Module([Expr(Str('Utilities to support packages.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('os', None)], lineno=6, col_offset=0), Import([alias('sys', None)], lineno=7, col_offset=0), Import([alias('imp', None)], lineno=8, col_offset=0), Import([alias('os.path', None)], lineno=9, col_offset=0), ImportFrom('types', [alias('ModuleType', None)], 0, lineno=10, col_offset=0), Assign([Name('__all__', Store(), lineno=12, col_offset=0)], List([Str('get_importer', lineno=13, col_offset=4), Str('iter_importers', lineno=13, col_offset=20), Str('get_loader', lineno=13, col_offset=38), Str('find_loader', lineno=13, col_offset=52), Str('walk_packages', lineno=14, col_offset=4), Str('iter_modules', lineno=14, col_offset=21), Str('ImpImporter', lineno=15, col_offset=4), Str('ImpLoader', lineno=15, col_offset=19), Str('read_code', lineno=15, col_offset=32), Str('extend_path', lineno=15, col_offset=45)], Load(), lineno=12, col_offset=10), lineno=12, col_offset=0), FunctionDef('read_code', arguments([Name('stream', Param(), lineno=18, col_offset=14)], None, None, []), [Import([alias('marshal', None)], lineno=21, col_offset=4), Assign([Name('magic', Store(), lineno=23, col_offset=4)], Call(Attribute(Name('stream', Load(), lineno=23, col_offset=12), 'read', Load(), lineno=23, col_offset=12), [Num(4, lineno=23, col_offset=24)], [], None, None, lineno=23, col_offset=12), lineno=23, col_offset=4), If(Compare(Name('magic', Load(), lineno=24, col_offset=7), [NotEq()], [Call(Attribute(Name('imp', Load(), lineno=24, col_offset=16), 'get_magic', Load(), lineno=24, col_offset=16), [], [], None, None, lineno=24, col_offset=16)], lineno=24, col_offset=7), [Return(Name('None', Load(), lineno=25, col_offset=15), lineno=25, col_offset=8)], [], lineno=24, col_offset=4), Expr(Call(Attribute(Name('stream', Load(), lineno=27, col_offset=4), 'read', Load(), lineno=27, col_offset=4), [Num(4, lineno=27, col_offset=16)], [], None, None, lineno=27, col_offset=4), lineno=27, col_offset=4), Return(Call(Attribute(Name('marshal', Load(), lineno=28, col_offset=11), 'load', Load(), lineno=28, col_offset=11), [Name('stream', Load(), lineno=28, col_offset=24)], [], None, None, lineno=28, col_offset=11), lineno=28, col_offset=4)], [], lineno=18, col_offset=0), FunctionDef('simplegeneric', arguments([Name('func', Param(), lineno=31, col_offset=18)], None, None, []), [Expr(Str('Make a trivial single-dispatch generic function', lineno=32, col_offset=4), lineno=32, col_offset=4), Assign([Name('registry', Store(), lineno=33, col_offset=4)], Dict([], [], lineno=33, col_offset=15), lineno=33, col_offset=4), FunctionDef('wrapper', arguments([], 'args', 'kw', []), [Assign([Name('ob', Store(), lineno=35, col_offset=8)], Subscript(Name('args', Load(), lineno=35, col_offset=13), Index(Num(0, lineno=35, col_offset=18)), Load(), lineno=35, col_offset=13), lineno=35, col_offset=8), TryExcept([Assign([Name('cls', Store(), lineno=37, col_offset=12)], Attribute(Name('ob', Load(), lineno=37, col_offset=18), '__class__', Load(), lineno=37, col_offset=18), lineno=37, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=38, col_offset=15), None, [Assign([Name('cls', Store(), lineno=39, col_offset=12)], Call(Name('type', Load(), lineno=39, col_offset=18), [Name('ob', Load(), lineno=39, col_offset=23)], [], None, None, lineno=39, col_offset=18), lineno=39, col_offset=12)], lineno=38, col_offset=8)], [], lineno=36, col_offset=8), TryExcept([Assign([Name('mro', Store(), lineno=41, col_offset=12)], Attribute(Name('cls', Load(), lineno=41, col_offset=18), '__mro__', Load(), lineno=41, col_offset=18), lineno=41, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=42, col_offset=15), None, [TryExcept([ClassDef('cls', [Name('cls', Load(), lineno=44, col_offset=26), Name('object', Load(), lineno=44, col_offset=31)], [Pass( lineno=45, col_offset=20)], [], lineno=44, col_offset=16), Assign([Name('mro', Store(), lineno=46, col_offset=16)], Subscript(Attribute(Name('cls', Load(), lineno=46, col_offset=22), '__mro__', Load(), lineno=46, col_offset=22), Slice(Num(1, lineno=46, col_offset=34), None, None), Load(), lineno=46, col_offset=22), lineno=46, col_offset=16)], [ExceptHandler(Name('TypeError', Load(), lineno=47, col_offset=19), None, [Assign([Name('mro', Store(), lineno=48, col_offset=16)], Tuple([Name('object', Load(), lineno=48, col_offset=22)], Load(), lineno=48, col_offset=22), lineno=48, col_offset=16)], lineno=47, col_offset=12)], [], lineno=43, col_offset=12)], lineno=42, col_offset=8)], [], lineno=40, col_offset=8), For(Name('t', Store(), lineno=49, col_offset=12), Name('mro', Load(), lineno=49, col_offset=17), [If(Compare(Name('t', Load(), lineno=50, col_offset=15), [In()], [Name('registry', Load(), lineno=50, col_offset=20)], lineno=50, col_offset=15), [Return(Call(Subscript(Name('registry', Load(), lineno=51, col_offset=23), Index(Name('t', Load(), lineno=51, col_offset=32)), Load(), lineno=51, col_offset=23), [], [], Name('args', Load(), lineno=51, col_offset=36), Name('kw', Load(), lineno=51, col_offset=44), lineno=51, col_offset=23), lineno=51, col_offset=16)], [], lineno=50, col_offset=12)], [Return(Call(Name('func', Load(), lineno=53, col_offset=19), [], [], Name('args', Load(), lineno=53, col_offset=25), Name('kw', Load(), lineno=53, col_offset=33), lineno=53, col_offset=19), lineno=53, col_offset=12)], lineno=49, col_offset=8)], [], lineno=34, col_offset=4), TryExcept([Assign([Attribute(Name('wrapper', Load(), lineno=55, col_offset=8), '__name__', Store(), lineno=55, col_offset=8)], Attribute(Name('func', Load(), lineno=55, col_offset=27), '__name__', Load(), lineno=55, col_offset=27), lineno=55, col_offset=8)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=56, col_offset=12), Name('AttributeError', Load(), lineno=56, col_offset=23)], Load(), lineno=56, col_offset=12), None, [Pass( lineno=57, col_offset=8)], lineno=56, col_offset=4)], [], lineno=54, col_offset=4), FunctionDef('register', arguments([Name('typ', Param(), lineno=59, col_offset=17), Name('func', Param(), lineno=59, col_offset=22)], None, None, [Name('None', Load(), lineno=59, col_offset=27)]), [If(Compare(Name('func', Load(), lineno=60, col_offset=11), [Is()], [Name('None', Load(), lineno=60, col_offset=19)], lineno=60, col_offset=11), [Return(Lambda(arguments([Name('f', Param(), lineno=61, col_offset=26)], None, None, []), Call(Name('register', Load(), lineno=61, col_offset=29), [Name('typ', Load(), lineno=61, col_offset=38), Name('f', Load(), lineno=61, col_offset=43)], [], None, None, lineno=61, col_offset=29), lineno=61, col_offset=19), lineno=61, col_offset=12)], [], lineno=60, col_offset=8), Assign([Subscript(Name('registry', Load(), lineno=62, col_offset=8), Index(Name('typ', Load(), lineno=62, col_offset=17)), Store(), lineno=62, col_offset=8)], Name('func', Load(), lineno=62, col_offset=24), lineno=62, col_offset=8), Return(Name('func', Load(), lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=59, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=65, col_offset=4), '__dict__', Store(), lineno=65, col_offset=4)], Attribute(Name('func', Load(), lineno=65, col_offset=23), '__dict__', Load(), lineno=65, col_offset=23), lineno=65, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=66, col_offset=4), '__doc__', Store(), lineno=66, col_offset=4)], Attribute(Name('func', Load(), lineno=66, col_offset=22), '__doc__', Load(), lineno=66, col_offset=22), lineno=66, col_offset=4), Assign([Attribute(Name('wrapper', Load(), lineno=67, col_offset=4), 'register', Store(), lineno=67, col_offset=4)], Name('register', Load(), lineno=67, col_offset=23), lineno=67, col_offset=4), Return(Name('wrapper', Load(), lineno=68, col_offset=11), lineno=68, col_offset=4)], [], lineno=31, col_offset=0), FunctionDef('walk_packages', arguments([Name('path', Param(), lineno=71, col_offset=18), Name('prefix', Param(), lineno=71, col_offset=29), Name('onerror', Param(), lineno=71, col_offset=40)], None, None, [Name('None', Load(), lineno=71, col_offset=23), Str('', lineno=71, col_offset=36), Name('None', Load(), lineno=71, col_offset=48)]), [Expr(Str("Yields (module_loader, name, ispkg) for all modules recursively\n    on path, or, if path is None, all accessible modules.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n\n    Note that this function must import all *packages* (NOT all\n    modules!) on the given path, in order to access the __path__\n    attribute to find submodules.\n\n    'onerror' is a function which gets called with one argument (the\n    name of the package which was being imported) if any exception\n    occurs while trying to import a package.  If no onerror function is\n    supplied, ImportErrors are caught and ignored, while all other\n    exceptions are propagated, terminating the search.\n\n    Examples:\n\n    # list all modules python can access\n    walk_packages()\n\n    # list all submodules of ctypes\n    walk_packages(ctypes.__path__, ctypes.__name__+'.')\n    ", lineno=98, col_offset=-1), lineno=98, col_offset=-1), FunctionDef('seen', arguments([Name('p', Param(), lineno=100, col_offset=13), Name('m', Param(), lineno=100, col_offset=16)], None, None, [Dict([], [], lineno=100, col_offset=18)]), [If(Compare(Name('p', Load(), lineno=101, col_offset=11), [In()], [Name('m', Load(), lineno=101, col_offset=16)], lineno=101, col_offset=11), [Return(Name('True', Load(), lineno=102, col_offset=19), lineno=102, col_offset=12)], [], lineno=101, col_offset=8), Assign([Subscript(Name('m', Load(), lineno=103, col_offset=8), Index(Name('p', Load(), lineno=103, col_offset=10)), Store(), lineno=103, col_offset=8)], Name('True', Load(), lineno=103, col_offset=15), lineno=103, col_offset=8)], [], lineno=100, col_offset=4), For(Tuple([Name('importer', Store(), lineno=105, col_offset=8), Name('name', Store(), lineno=105, col_offset=18), Name('ispkg', Store(), lineno=105, col_offset=24)], Store(), lineno=105, col_offset=8), Call(Name('iter_modules', Load(), lineno=105, col_offset=33), [Name('path', Load(), lineno=105, col_offset=46), Name('prefix', Load(), lineno=105, col_offset=52)], [], None, None, lineno=105, col_offset=33), [Expr(Yield(Tuple([Name('importer', Load(), lineno=106, col_offset=14), Name('name', Load(), lineno=106, col_offset=24), Name('ispkg', Load(), lineno=106, col_offset=30)], Load(), lineno=106, col_offset=14), lineno=106, col_offset=8), lineno=106, col_offset=8), If(Name('ispkg', Load(), lineno=108, col_offset=11), [TryExcept([Expr(Call(Name('__import__', Load(), lineno=110, col_offset=16), [Name('name', Load(), lineno=110, col_offset=27)], [], None, None, lineno=110, col_offset=16), lineno=110, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=111, col_offset=19), None, [If(Compare(Name('onerror', Load(), lineno=112, col_offset=19), [IsNot()], [Name('None', Load(), lineno=112, col_offset=34)], lineno=112, col_offset=19), [Expr(Call(Name('onerror', Load(), lineno=113, col_offset=20), [Name('name', Load(), lineno=113, col_offset=28)], [], None, None, lineno=113, col_offset=20), lineno=113, col_offset=20)], [], lineno=112, col_offset=16)], lineno=111, col_offset=12), ExceptHandler(Name('Exception', Load(), lineno=114, col_offset=19), None, [If(Compare(Name('onerror', Load(), lineno=115, col_offset=19), [IsNot()], [Name('None', Load(), lineno=115, col_offset=34)], lineno=115, col_offset=19), [Expr(Call(Name('onerror', Load(), lineno=116, col_offset=20), [Name('name', Load(), lineno=116, col_offset=28)], [], None, None, lineno=116, col_offset=20), lineno=116, col_offset=20)], [Raise(None, None, None, lineno=118, col_offset=20)], lineno=115, col_offset=16)], lineno=114, col_offset=12)], [Assign([Name('path', Store(), lineno=120, col_offset=16)], BoolOp(Or(), [Call(Name('getattr', Load(), lineno=120, col_offset=23), [Subscript(Attribute(Name('sys', Load(), lineno=120, col_offset=31), 'modules', Load(), lineno=120, col_offset=31), Index(Name('name', Load(), lineno=120, col_offset=43)), Load(), lineno=120, col_offset=31), Str('__path__', lineno=120, col_offset=50), Name('None', Load(), lineno=120, col_offset=62)], [], None, None, lineno=120, col_offset=23), List([], Load(), lineno=120, col_offset=71)], lineno=120, col_offset=23), lineno=120, col_offset=16), Assign([Name('path', Store(), lineno=123, col_offset=16)], ListComp(Name('p', Load(), lineno=123, col_offset=24), [comprehension(Name('p', Store(), lineno=123, col_offset=30), Name('path', Load(), lineno=123, col_offset=35), [UnaryOp(Not(), Call(Name('seen', Load(), lineno=123, col_offset=47), [Name('p', Load(), lineno=123, col_offset=52)], [], None, None, lineno=123, col_offset=47), lineno=123, col_offset=43)])], lineno=123, col_offset=24), lineno=123, col_offset=16), For(Name('item', Store(), lineno=125, col_offset=20), Call(Name('walk_packages', Load(), lineno=125, col_offset=28), [Name('path', Load(), lineno=125, col_offset=42), BinOp(Name('name', Load(), lineno=125, col_offset=48), Add(), Str('.', lineno=125, col_offset=53), lineno=125, col_offset=48), Name('onerror', Load(), lineno=125, col_offset=58)], [], None, None, lineno=125, col_offset=28), [Expr(Yield(Name('item', Load(), lineno=126, col_offset=26), lineno=126, col_offset=20), lineno=126, col_offset=20)], [], lineno=125, col_offset=16)], lineno=109, col_offset=12)], [], lineno=108, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=71, col_offset=0), FunctionDef('iter_modules', arguments([Name('path', Param(), lineno=129, col_offset=17), Name('prefix', Param(), lineno=129, col_offset=28)], None, None, [Name('None', Load(), lineno=129, col_offset=22), Str('', lineno=129, col_offset=35)]), [Expr(Str("Yields (module_loader, name, ispkg) for all submodules on path,\n    or, if path is None, all top-level modules on sys.path.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n    ", lineno=138, col_offset=-1), lineno=138, col_offset=-1), If(Compare(Name('path', Load(), lineno=140, col_offset=7), [Is()], [Name('None', Load(), lineno=140, col_offset=15)], lineno=140, col_offset=7), [Assign([Name('importers', Store(), lineno=141, col_offset=8)], Call(Name('iter_importers', Load(), lineno=141, col_offset=20), [], [], None, None, lineno=141, col_offset=20), lineno=141, col_offset=8)], [Assign([Name('importers', Store(), lineno=143, col_offset=8)], Call(Name('map', Load(), lineno=143, col_offset=20), [Name('get_importer', Load(), lineno=143, col_offset=24), Name('path', Load(), lineno=143, col_offset=38)], [], None, None, lineno=143, col_offset=20), lineno=143, col_offset=8)], lineno=140, col_offset=4), Assign([Name('yielded', Store(), lineno=145, col_offset=4)], Dict([], [], lineno=145, col_offset=14), lineno=145, col_offset=4), For(Name('i', Store(), lineno=146, col_offset=8), Name('importers', Load(), lineno=146, col_offset=13), [For(Tuple([Name('name', Store(), lineno=147, col_offset=12), Name('ispkg', Store(), lineno=147, col_offset=18)], Store(), lineno=147, col_offset=12), Call(Name('iter_importer_modules', Load(), lineno=147, col_offset=27), [Name('i', Load(), lineno=147, col_offset=49), Name('prefix', Load(), lineno=147, col_offset=52)], [], None, None, lineno=147, col_offset=27), [If(Compare(Name('name', Load(), lineno=148, col_offset=15), [NotIn()], [Name('yielded', Load(), lineno=148, col_offset=27)], lineno=148, col_offset=15), [Assign([Subscript(Name('yielded', Load(), lineno=149, col_offset=16), Index(Name('name', Load(), lineno=149, col_offset=24)), Store(), lineno=149, col_offset=16)], Num(1, lineno=149, col_offset=32), lineno=149, col_offset=16), Expr(Yield(Tuple([Name('i', Load(), lineno=150, col_offset=22), Name('name', Load(), lineno=150, col_offset=25), Name('ispkg', Load(), lineno=150, col_offset=31)], Load(), lineno=150, col_offset=22), lineno=150, col_offset=16), lineno=150, col_offset=16)], [], lineno=148, col_offset=12)], [], lineno=147, col_offset=8)], [], lineno=146, col_offset=4)], [], lineno=129, col_offset=0), FunctionDef('iter_importer_modules', arguments([Name('importer', Param(), lineno=154, col_offset=26), Name('prefix', Param(), lineno=154, col_offset=36)], None, None, [Str('', lineno=154, col_offset=43)]), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=155, col_offset=11), [Name('importer', Load(), lineno=155, col_offset=19), Str('iter_modules', lineno=155, col_offset=29)], [], None, None, lineno=155, col_offset=11), lineno=155, col_offset=7), [Return(List([], Load(), lineno=156, col_offset=15), lineno=156, col_offset=8)], [], lineno=155, col_offset=4), Return(Call(Attribute(Name('importer', Load(), lineno=157, col_offset=11), 'iter_modules', Load(), lineno=157, col_offset=11), [Name('prefix', Load(), lineno=157, col_offset=33)], [], None, None, lineno=157, col_offset=11), lineno=157, col_offset=4)], [], lineno=154, col_offset=0), Assign([Name('iter_importer_modules', Store(), lineno=159, col_offset=0)], Call(Name('simplegeneric', Load(), lineno=159, col_offset=24), [Name('iter_importer_modules', Load(), lineno=159, col_offset=38)], [], None, None, lineno=159, col_offset=24), lineno=159, col_offset=0), ClassDef('ImpImporter', [], [Expr(Str('PEP 302 Importer that wraps Python\'s "classic" import algorithm\n\n    ImpImporter(dirname) produces a PEP 302 importer that searches that\n    directory.  ImpImporter(None) produces a PEP 302 importer that searches\n    the current sys.path, plus any modules that are frozen or built-in.\n\n    Note that ImpImporter does not currently support being used by placement\n    on sys.meta_path.\n    ', lineno=171, col_offset=-1), lineno=171, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=173, col_offset=17), Name('path', Param(), lineno=173, col_offset=23)], None, None, [Name('None', Load(), lineno=173, col_offset=28)]), [Assign([Attribute(Name('self', Load(), lineno=174, col_offset=8), 'path', Store(), lineno=174, col_offset=8)], Name('path', Load(), lineno=174, col_offset=20), lineno=174, col_offset=8)], [], lineno=173, col_offset=4), FunctionDef('find_module', arguments([Name('self', Param(), lineno=176, col_offset=20), Name('fullname', Param(), lineno=176, col_offset=26), Name('path', Param(), lineno=176, col_offset=36)], None, None, [Name('None', Load(), lineno=176, col_offset=41)]), [Assign([Name('subname', Store(), lineno=178, col_offset=8)], Subscript(Call(Attribute(Name('fullname', Load(), lineno=178, col_offset=18), 'split', Load(), lineno=178, col_offset=18), [Str('.', lineno=178, col_offset=33)], [], None, None, lineno=178, col_offset=18), Index(Num(-1, lineno=178, col_offset=39)), Load(), lineno=178, col_offset=18), lineno=178, col_offset=8), If(BoolOp(And(), [Compare(Name('subname', Load(), lineno=179, col_offset=11), [NotEq()], [Name('fullname', Load(), lineno=179, col_offset=22)], lineno=179, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=179, col_offset=35), 'path', Load(), lineno=179, col_offset=35), [Is()], [Name('None', Load(), lineno=179, col_offset=48)], lineno=179, col_offset=35)], lineno=179, col_offset=11), [Return(Name('None', Load(), lineno=180, col_offset=19), lineno=180, col_offset=12)], [], lineno=179, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=181, col_offset=11), 'path', Load(), lineno=181, col_offset=11), [Is()], [Name('None', Load(), lineno=181, col_offset=24)], lineno=181, col_offset=11), [Assign([Name('path', Store(), lineno=182, col_offset=12)], Name('None', Load(), lineno=182, col_offset=19), lineno=182, col_offset=12)], [Assign([Name('path', Store(), lineno=184, col_offset=12)], List([Call(Attribute(Attribute(Name('os', Load(), lineno=184, col_offset=20), 'path', Load(), lineno=184, col_offset=20), 'realpath', Load(), lineno=184, col_offset=20), [Attribute(Name('self', Load(), lineno=184, col_offset=37), 'path', Load(), lineno=184, col_offset=37)], [], None, None, lineno=184, col_offset=20)], Load(), lineno=184, col_offset=19), lineno=184, col_offset=12)], lineno=181, col_offset=8), TryExcept([Assign([Tuple([Name('file', Store(), lineno=186, col_offset=12), Name('filename', Store(), lineno=186, col_offset=18), Name('etc', Store(), lineno=186, col_offset=28)], Store(), lineno=186, col_offset=12)], Call(Attribute(Name('imp', Load(), lineno=186, col_offset=34), 'find_module', Load(), lineno=186, col_offset=34), [Name('subname', Load(), lineno=186, col_offset=50), Name('path', Load(), lineno=186, col_offset=59)], [], None, None, lineno=186, col_offset=34), lineno=186, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=187, col_offset=15), None, [Return(Name('None', Load(), lineno=188, col_offset=19), lineno=188, col_offset=12)], lineno=187, col_offset=8)], [], lineno=185, col_offset=8), Return(Call(Name('ImpLoader', Load(), lineno=189, col_offset=15), [Name('fullname', Load(), lineno=189, col_offset=25), Name('file', Load(), lineno=189, col_offset=35), Name('filename', Load(), lineno=189, col_offset=41), Name('etc', Load(), lineno=189, col_offset=51)], [], None, None, lineno=189, col_offset=15), lineno=189, col_offset=8)], [], lineno=176, col_offset=4), FunctionDef('iter_modules', arguments([Name('self', Param(), lineno=191, col_offset=21), Name('prefix', Param(), lineno=191, col_offset=27)], None, None, [Str('', lineno=191, col_offset=34)]), [If(BoolOp(Or(), [Compare(Attribute(Name('self', Load(), lineno=192, col_offset=11), 'path', Load(), lineno=192, col_offset=11), [Is()], [Name('None', Load(), lineno=192, col_offset=24)], lineno=192, col_offset=11), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=192, col_offset=36), 'path', Load(), lineno=192, col_offset=36), 'isdir', Load(), lineno=192, col_offset=36), [Attribute(Name('self', Load(), lineno=192, col_offset=50), 'path', Load(), lineno=192, col_offset=50)], [], None, None, lineno=192, col_offset=36), lineno=192, col_offset=32)], lineno=192, col_offset=11), [Return(None, lineno=193, col_offset=12)], [], lineno=192, col_offset=8), Assign([Name('yielded', Store(), lineno=195, col_offset=8)], Dict([], [], lineno=195, col_offset=18), lineno=195, col_offset=8), Import([alias('inspect', None)], lineno=196, col_offset=8), Assign([Name('filenames', Store(), lineno=198, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=198, col_offset=20), 'listdir', Load(), lineno=198, col_offset=20), [Attribute(Name('self', Load(), lineno=198, col_offset=31), 'path', Load(), lineno=198, col_offset=31)], [], None, None, lineno=198, col_offset=20), lineno=198, col_offset=8), Expr(Call(Attribute(Name('filenames', Load(), lineno=199, col_offset=8), 'sort', Load(), lineno=199, col_offset=8), [], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8), For(Name('fn', Store(), lineno=201, col_offset=12), Name('filenames', Load(), lineno=201, col_offset=18), [Assign([Name('modname', Store(), lineno=202, col_offset=12)], Call(Attribute(Name('inspect', Load(), lineno=202, col_offset=22), 'getmodulename', Load(), lineno=202, col_offset=22), [Name('fn', Load(), lineno=202, col_offset=44)], [], None, None, lineno=202, col_offset=22), lineno=202, col_offset=12), If(BoolOp(Or(), [Compare(Name('modname', Load(), lineno=203, col_offset=15), [Eq()], [Str('__init__', lineno=203, col_offset=24)], lineno=203, col_offset=15), Compare(Name('modname', Load(), lineno=203, col_offset=38), [In()], [Name('yielded', Load(), lineno=203, col_offset=49)], lineno=203, col_offset=38)], lineno=203, col_offset=15), [Continue( lineno=204, col_offset=16)], [], lineno=203, col_offset=12), Assign([Name('path', Store(), lineno=206, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=206, col_offset=19), 'path', Load(), lineno=206, col_offset=19), 'join', Load(), lineno=206, col_offset=19), [Attribute(Name('self', Load(), lineno=206, col_offset=32), 'path', Load(), lineno=206, col_offset=32), Name('fn', Load(), lineno=206, col_offset=43)], [], None, None, lineno=206, col_offset=19), lineno=206, col_offset=12), Assign([Name('ispkg', Store(), lineno=207, col_offset=12)], Name('False', Load(), lineno=207, col_offset=20), lineno=207, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Name('modname', Load(), lineno=209, col_offset=19), lineno=209, col_offset=15), Call(Attribute(Attribute(Name('os', Load(), lineno=209, col_offset=31), 'path', Load(), lineno=209, col_offset=31), 'isdir', Load(), lineno=209, col_offset=31), [Name('path', Load(), lineno=209, col_offset=45)], [], None, None, lineno=209, col_offset=31), Compare(Str('.', lineno=209, col_offset=55), [NotIn()], [Name('fn', Load(), lineno=209, col_offset=66)], lineno=209, col_offset=55)], lineno=209, col_offset=15), [Assign([Name('modname', Store(), lineno=210, col_offset=16)], Name('fn', Load(), lineno=210, col_offset=26), lineno=210, col_offset=16), For(Name('fn', Store(), lineno=211, col_offset=20), Call(Attribute(Name('os', Load(), lineno=211, col_offset=26), 'listdir', Load(), lineno=211, col_offset=26), [Name('path', Load(), lineno=211, col_offset=37)], [], None, None, lineno=211, col_offset=26), [Assign([Name('subname', Store(), lineno=212, col_offset=20)], Call(Attribute(Name('inspect', Load(), lineno=212, col_offset=30), 'getmodulename', Load(), lineno=212, col_offset=30), [Name('fn', Load(), lineno=212, col_offset=52)], [], None, None, lineno=212, col_offset=30), lineno=212, col_offset=20), If(Compare(Name('subname', Load(), lineno=213, col_offset=23), [Eq()], [Str('__init__', lineno=213, col_offset=32)], lineno=213, col_offset=23), [Assign([Name('ispkg', Store(), lineno=214, col_offset=24)], Name('True', Load(), lineno=214, col_offset=32), lineno=214, col_offset=24), Break( lineno=215, col_offset=24)], [], lineno=213, col_offset=20)], [Continue( lineno=217, col_offset=20)], lineno=211, col_offset=16)], [], lineno=209, col_offset=12), If(BoolOp(And(), [Name('modname', Load(), lineno=219, col_offset=15), Compare(Str('.', lineno=219, col_offset=27), [NotIn()], [Name('modname', Load(), lineno=219, col_offset=38)], lineno=219, col_offset=27)], lineno=219, col_offset=15), [Assign([Subscript(Name('yielded', Load(), lineno=220, col_offset=16), Index(Name('modname', Load(), lineno=220, col_offset=24)), Store(), lineno=220, col_offset=16)], Num(1, lineno=220, col_offset=35), lineno=220, col_offset=16), Expr(Yield(Tuple([BinOp(Name('prefix', Load(), lineno=221, col_offset=22), Add(), Name('modname', Load(), lineno=221, col_offset=31), lineno=221, col_offset=22), Name('ispkg', Load(), lineno=221, col_offset=40)], Load(), lineno=221, col_offset=22), lineno=221, col_offset=16), lineno=221, col_offset=16)], [], lineno=219, col_offset=12)], [], lineno=201, col_offset=8)], [], lineno=191, col_offset=4)], [], lineno=162, col_offset=0), ClassDef('ImpLoader', [], [Expr(Str('PEP 302 Loader that wraps Python\'s "classic" import algorithm\n    ', lineno=226, col_offset=-1), lineno=226, col_offset=-1), Assign([Name('code', Store(), lineno=227, col_offset=4), Name('source', Store(), lineno=227, col_offset=11)], Name('None', Load(), lineno=227, col_offset=20), lineno=227, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=229, col_offset=17), Name('fullname', Param(), lineno=229, col_offset=23), Name('file', Param(), lineno=229, col_offset=33), Name('filename', Param(), lineno=229, col_offset=39), Name('etc', Param(), lineno=229, col_offset=49)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=230, col_offset=8), 'file', Store(), lineno=230, col_offset=8)], Name('file', Load(), lineno=230, col_offset=20), lineno=230, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=231, col_offset=8), 'filename', Store(), lineno=231, col_offset=8)], Name('filename', Load(), lineno=231, col_offset=24), lineno=231, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=232, col_offset=8), 'fullname', Store(), lineno=232, col_offset=8)], Name('fullname', Load(), lineno=232, col_offset=24), lineno=232, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=233, col_offset=8), 'etc', Store(), lineno=233, col_offset=8)], Name('etc', Load(), lineno=233, col_offset=19), lineno=233, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('load_module', arguments([Name('self', Param(), lineno=235, col_offset=20), Name('fullname', Param(), lineno=235, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=236, col_offset=8), '_reopen', Load(), lineno=236, col_offset=8), [], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8), TryFinally([Assign([Name('mod', Store(), lineno=238, col_offset=12)], Call(Attribute(Name('imp', Load(), lineno=238, col_offset=18), 'load_module', Load(), lineno=238, col_offset=18), [Name('fullname', Load(), lineno=238, col_offset=34), Attribute(Name('self', Load(), lineno=238, col_offset=44), 'file', Load(), lineno=238, col_offset=44), Attribute(Name('self', Load(), lineno=238, col_offset=55), 'filename', Load(), lineno=238, col_offset=55), Attribute(Name('self', Load(), lineno=238, col_offset=70), 'etc', Load(), lineno=238, col_offset=70)], [], None, None, lineno=238, col_offset=18), lineno=238, col_offset=12)], [If(Attribute(Name('self', Load(), lineno=240, col_offset=15), 'file', Load(), lineno=240, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=241, col_offset=16), 'file', Load(), lineno=241, col_offset=16), 'close', Load(), lineno=241, col_offset=16), [], [], None, None, lineno=241, col_offset=16), lineno=241, col_offset=16)], [], lineno=240, col_offset=12)], lineno=237, col_offset=8), Return(Name('mod', Load(), lineno=244, col_offset=15), lineno=244, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('get_data', arguments([Name('self', Param(), lineno=246, col_offset=17), Name('pathname', Param(), lineno=246, col_offset=23)], None, None, []), [Return(Call(Attribute(Call(Name('open', Load(), lineno=247, col_offset=15), [Name('pathname', Load(), lineno=247, col_offset=20), Str('rb', lineno=247, col_offset=30)], [], None, None, lineno=247, col_offset=15), 'read', Load(), lineno=247, col_offset=15), [], [], None, None, lineno=247, col_offset=15), lineno=247, col_offset=8)], [], lineno=246, col_offset=4), FunctionDef('_reopen', arguments([Name('self', Param(), lineno=249, col_offset=16)], None, None, []), [If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=250, col_offset=11), 'file', Load(), lineno=250, col_offset=11), Attribute(Attribute(Name('self', Load(), lineno=250, col_offset=25), 'file', Load(), lineno=250, col_offset=25), 'closed', Load(), lineno=250, col_offset=25)], lineno=250, col_offset=11), [Assign([Name('mod_type', Store(), lineno=251, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=251, col_offset=23), 'etc', Load(), lineno=251, col_offset=23), Index(Num(2, lineno=251, col_offset=32)), Load(), lineno=251, col_offset=23), lineno=251, col_offset=12), If(Compare(Name('mod_type', Load(), lineno=252, col_offset=15), [Eq()], [Attribute(Name('imp', Load(), lineno=252, col_offset=25), 'PY_SOURCE', Load(), lineno=252, col_offset=25)], lineno=252, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=253, col_offset=16), 'file', Store(), lineno=253, col_offset=16)], Call(Name('open', Load(), lineno=253, col_offset=28), [Attribute(Name('self', Load(), lineno=253, col_offset=33), 'filename', Load(), lineno=253, col_offset=33), Str('rU', lineno=253, col_offset=48)], [], None, None, lineno=253, col_offset=28), lineno=253, col_offset=16)], [If(Compare(Name('mod_type', Load(), lineno=254, col_offset=17), [In()], [Tuple([Attribute(Name('imp', Load(), lineno=254, col_offset=30), 'PY_COMPILED', Load(), lineno=254, col_offset=30), Attribute(Name('imp', Load(), lineno=254, col_offset=47), 'C_EXTENSION', Load(), lineno=254, col_offset=47)], Load(), lineno=254, col_offset=30)], lineno=254, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=255, col_offset=16), 'file', Store(), lineno=255, col_offset=16)], Call(Name('open', Load(), lineno=255, col_offset=28), [Attribute(Name('self', Load(), lineno=255, col_offset=33), 'filename', Load(), lineno=255, col_offset=33), Str('rb', lineno=255, col_offset=48)], [], None, None, lineno=255, col_offset=28), lineno=255, col_offset=16)], [], lineno=254, col_offset=17)], lineno=252, col_offset=12)], [], lineno=250, col_offset=8)], [], lineno=249, col_offset=4), FunctionDef('_fix_name', arguments([Name('self', Param(), lineno=257, col_offset=18), Name('fullname', Param(), lineno=257, col_offset=24)], None, None, []), [If(Compare(Name('fullname', Load(), lineno=258, col_offset=11), [Is()], [Name('None', Load(), lineno=258, col_offset=23)], lineno=258, col_offset=11), [Assign([Name('fullname', Store(), lineno=259, col_offset=12)], Attribute(Name('self', Load(), lineno=259, col_offset=23), 'fullname', Load(), lineno=259, col_offset=23), lineno=259, col_offset=12)], [If(Compare(Name('fullname', Load(), lineno=260, col_offset=13), [NotEq()], [Attribute(Name('self', Load(), lineno=260, col_offset=25), 'fullname', Load(), lineno=260, col_offset=25)], lineno=260, col_offset=13), [Raise(Call(Name('ImportError', Load(), lineno=261, col_offset=18), [BinOp(Str('Loader for module %s cannot handle module %s', lineno=261, col_offset=30), Mod(), Tuple([Attribute(Name('self', Load(), lineno=262, col_offset=45), 'fullname', Load(), lineno=262, col_offset=45), Name('fullname', Load(), lineno=262, col_offset=60)], Load(), lineno=262, col_offset=45), lineno=261, col_offset=30)], [], None, None, lineno=261, col_offset=18), None, None, lineno=261, col_offset=12)], [], lineno=260, col_offset=13)], lineno=258, col_offset=8), Return(Name('fullname', Load(), lineno=263, col_offset=15), lineno=263, col_offset=8)], [], lineno=257, col_offset=4), FunctionDef('is_package', arguments([Name('self', Param(), lineno=265, col_offset=19), Name('fullname', Param(), lineno=265, col_offset=25)], None, None, []), [Assign([Name('fullname', Store(), lineno=266, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=266, col_offset=19), '_fix_name', Load(), lineno=266, col_offset=19), [Name('fullname', Load(), lineno=266, col_offset=34)], [], None, None, lineno=266, col_offset=19), lineno=266, col_offset=8), Return(Compare(Subscript(Attribute(Name('self', Load(), lineno=267, col_offset=15), 'etc', Load(), lineno=267, col_offset=15), Index(Num(2, lineno=267, col_offset=24)), Load(), lineno=267, col_offset=15), [Eq()], [Attribute(Name('imp', Load(), lineno=267, col_offset=28), 'PKG_DIRECTORY', Load(), lineno=267, col_offset=28)], lineno=267, col_offset=15), lineno=267, col_offset=8)], [], lineno=265, col_offset=4), FunctionDef('get_code', arguments([Name('self', Param(), lineno=269, col_offset=17), Name('fullname', Param(), lineno=269, col_offset=23)], None, None, [Name('None', Load(), lineno=269, col_offset=32)]), [Assign([Name('fullname', Store(), lineno=270, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=270, col_offset=19), '_fix_name', Load(), lineno=270, col_offset=19), [Name('fullname', Load(), lineno=270, col_offset=34)], [], None, None, lineno=270, col_offset=19), lineno=270, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=271, col_offset=11), 'code', Load(), lineno=271, col_offset=11), [Is()], [Name('None', Load(), lineno=271, col_offset=24)], lineno=271, col_offset=11), [Assign([Name('mod_type', Store(), lineno=272, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=272, col_offset=23), 'etc', Load(), lineno=272, col_offset=23), Index(Num(2, lineno=272, col_offset=32)), Load(), lineno=272, col_offset=23), lineno=272, col_offset=12), If(Compare(Name('mod_type', Load(), lineno=273, col_offset=15), [Eq()], [Attribute(Name('imp', Load(), lineno=273, col_offset=25), 'PY_SOURCE', Load(), lineno=273, col_offset=25)], lineno=273, col_offset=15), [Assign([Name('source', Store(), lineno=274, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=274, col_offset=25), 'get_source', Load(), lineno=274, col_offset=25), [Name('fullname', Load(), lineno=274, col_offset=41)], [], None, None, lineno=274, col_offset=25), lineno=274, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=275, col_offset=16), 'code', Store(), lineno=275, col_offset=16)], Call(Name('compile', Load(), lineno=275, col_offset=28), [Name('source', Load(), lineno=275, col_offset=36), Attribute(Name('self', Load(), lineno=275, col_offset=44), 'filename', Load(), lineno=275, col_offset=44), Str('exec', lineno=275, col_offset=59)], [], None, None, lineno=275, col_offset=28), lineno=275, col_offset=16)], [If(Compare(Name('mod_type', Load(), lineno=276, col_offset=17), [Eq()], [Attribute(Name('imp', Load(), lineno=276, col_offset=27), 'PY_COMPILED', Load(), lineno=276, col_offset=27)], lineno=276, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=277, col_offset=16), '_reopen', Load(), lineno=277, col_offset=16), [], [], None, None, lineno=277, col_offset=16), lineno=277, col_offset=16), TryFinally([Assign([Attribute(Name('self', Load(), lineno=279, col_offset=20), 'code', Store(), lineno=279, col_offset=20)], Call(Name('read_code', Load(), lineno=279, col_offset=32), [Attribute(Name('self', Load(), lineno=279, col_offset=42), 'file', Load(), lineno=279, col_offset=42)], [], None, None, lineno=279, col_offset=32), lineno=279, col_offset=20)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=281, col_offset=20), 'file', Load(), lineno=281, col_offset=20), 'close', Load(), lineno=281, col_offset=20), [], [], None, None, lineno=281, col_offset=20), lineno=281, col_offset=20)], lineno=278, col_offset=16)], [If(Compare(Name('mod_type', Load(), lineno=282, col_offset=17), [Eq()], [Attribute(Name('imp', Load(), lineno=282, col_offset=27), 'PKG_DIRECTORY', Load(), lineno=282, col_offset=27)], lineno=282, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=283, col_offset=16), 'code', Store(), lineno=283, col_offset=16)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=283, col_offset=28), '_get_delegate', Load(), lineno=283, col_offset=28), [], [], None, None, lineno=283, col_offset=28), 'get_code', Load(), lineno=283, col_offset=28), [], [], None, None, lineno=283, col_offset=28), lineno=283, col_offset=16)], [], lineno=282, col_offset=17)], lineno=276, col_offset=17)], lineno=273, col_offset=12)], [], lineno=271, col_offset=8), Return(Attribute(Name('self', Load(), lineno=284, col_offset=15), 'code', Load(), lineno=284, col_offset=15), lineno=284, col_offset=8)], [], lineno=269, col_offset=4), FunctionDef('get_source', arguments([Name('self', Param(), lineno=286, col_offset=19), Name('fullname', Param(), lineno=286, col_offset=25)], None, None, [Name('None', Load(), lineno=286, col_offset=34)]), [Assign([Name('fullname', Store(), lineno=287, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=287, col_offset=19), '_fix_name', Load(), lineno=287, col_offset=19), [Name('fullname', Load(), lineno=287, col_offset=34)], [], None, None, lineno=287, col_offset=19), lineno=287, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=288, col_offset=11), 'source', Load(), lineno=288, col_offset=11), [Is()], [Name('None', Load(), lineno=288, col_offset=26)], lineno=288, col_offset=11), [Assign([Name('mod_type', Store(), lineno=289, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=289, col_offset=23), 'etc', Load(), lineno=289, col_offset=23), Index(Num(2, lineno=289, col_offset=32)), Load(), lineno=289, col_offset=23), lineno=289, col_offset=12), If(Compare(Name('mod_type', Load(), lineno=290, col_offset=15), [Eq()], [Attribute(Name('imp', Load(), lineno=290, col_offset=25), 'PY_SOURCE', Load(), lineno=290, col_offset=25)], lineno=290, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=291, col_offset=16), '_reopen', Load(), lineno=291, col_offset=16), [], [], None, None, lineno=291, col_offset=16), lineno=291, col_offset=16), TryFinally([Assign([Attribute(Name('self', Load(), lineno=293, col_offset=20), 'source', Store(), lineno=293, col_offset=20)], Call(Attribute(Attribute(Name('self', Load(), lineno=293, col_offset=34), 'file', Load(), lineno=293, col_offset=34), 'read', Load(), lineno=293, col_offset=34), [], [], None, None, lineno=293, col_offset=34), lineno=293, col_offset=20)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=295, col_offset=20), 'file', Load(), lineno=295, col_offset=20), 'close', Load(), lineno=295, col_offset=20), [], [], None, None, lineno=295, col_offset=20), lineno=295, col_offset=20)], lineno=292, col_offset=16)], [If(Compare(Name('mod_type', Load(), lineno=296, col_offset=17), [Eq()], [Attribute(Name('imp', Load(), lineno=296, col_offset=27), 'PY_COMPILED', Load(), lineno=296, col_offset=27)], lineno=296, col_offset=17), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=297, col_offset=19), 'path', Load(), lineno=297, col_offset=19), 'exists', Load(), lineno=297, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=297, col_offset=34), 'filename', Load(), lineno=297, col_offset=34), Slice(None, Num(-1, lineno=297, col_offset=50), None), Load(), lineno=297, col_offset=34)], [], None, None, lineno=297, col_offset=19), [Assign([Name('f', Store(), lineno=298, col_offset=20)], Call(Name('open', Load(), lineno=298, col_offset=24), [Subscript(Attribute(Name('self', Load(), lineno=298, col_offset=29), 'filename', Load(), lineno=298, col_offset=29), Slice(None, Num(-1, lineno=298, col_offset=45), None), Load(), lineno=298, col_offset=29), Str('rU', lineno=298, col_offset=49)], [], None, None, lineno=298, col_offset=24), lineno=298, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=299, col_offset=20), 'source', Store(), lineno=299, col_offset=20)], Call(Attribute(Name('f', Load(), lineno=299, col_offset=34), 'read', Load(), lineno=299, col_offset=34), [], [], None, None, lineno=299, col_offset=34), lineno=299, col_offset=20), Expr(Call(Attribute(Name('f', Load(), lineno=300, col_offset=20), 'close', Load(), lineno=300, col_offset=20), [], [], None, None, lineno=300, col_offset=20), lineno=300, col_offset=20)], [], lineno=297, col_offset=16)], [If(Compare(Name('mod_type', Load(), lineno=301, col_offset=17), [Eq()], [Attribute(Name('imp', Load(), lineno=301, col_offset=27), 'PKG_DIRECTORY', Load(), lineno=301, col_offset=27)], lineno=301, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=302, col_offset=16), 'source', Store(), lineno=302, col_offset=16)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=302, col_offset=30), '_get_delegate', Load(), lineno=302, col_offset=30), [], [], None, None, lineno=302, col_offset=30), 'get_source', Load(), lineno=302, col_offset=30), [], [], None, None, lineno=302, col_offset=30), lineno=302, col_offset=16)], [], lineno=301, col_offset=17)], lineno=296, col_offset=17)], lineno=290, col_offset=12)], [], lineno=288, col_offset=8), Return(Attribute(Name('self', Load(), lineno=303, col_offset=15), 'source', Load(), lineno=303, col_offset=15), lineno=303, col_offset=8)], [], lineno=286, col_offset=4), FunctionDef('_get_delegate', arguments([Name('self', Param(), lineno=306, col_offset=22)], None, None, []), [Return(Call(Attribute(Call(Name('ImpImporter', Load(), lineno=307, col_offset=15), [Attribute(Name('self', Load(), lineno=307, col_offset=27), 'filename', Load(), lineno=307, col_offset=27)], [], None, None, lineno=307, col_offset=15), 'find_module', Load(), lineno=307, col_offset=15), [Str('__init__', lineno=307, col_offset=54)], [], None, None, lineno=307, col_offset=15), lineno=307, col_offset=8)], [], lineno=306, col_offset=4), FunctionDef('get_filename', arguments([Name('self', Param(), lineno=309, col_offset=21), Name('fullname', Param(), lineno=309, col_offset=27)], None, None, [Name('None', Load(), lineno=309, col_offset=36)]), [Assign([Name('fullname', Store(), lineno=310, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=310, col_offset=19), '_fix_name', Load(), lineno=310, col_offset=19), [Name('fullname', Load(), lineno=310, col_offset=34)], [], None, None, lineno=310, col_offset=19), lineno=310, col_offset=8), Assign([Name('mod_type', Store(), lineno=311, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=311, col_offset=19), 'etc', Load(), lineno=311, col_offset=19), Index(Num(2, lineno=311, col_offset=28)), Load(), lineno=311, col_offset=19), lineno=311, col_offset=8), If(Compare(Subscript(Attribute(Name('self', Load(), lineno=312, col_offset=11), 'etc', Load(), lineno=312, col_offset=11), Index(Num(2, lineno=312, col_offset=20)), Load(), lineno=312, col_offset=11), [Eq()], [Attribute(Name('imp', Load(), lineno=312, col_offset=24), 'PKG_DIRECTORY', Load(), lineno=312, col_offset=24)], lineno=312, col_offset=11), [Return(Call(Attribute(Call(Attribute(Name('self', Load(), lineno=313, col_offset=19), '_get_delegate', Load(), lineno=313, col_offset=19), [], [], None, None, lineno=313, col_offset=19), 'get_filename', Load(), lineno=313, col_offset=19), [], [], None, None, lineno=313, col_offset=19), lineno=313, col_offset=12)], [If(Compare(Subscript(Attribute(Name('self', Load(), lineno=314, col_offset=13), 'etc', Load(), lineno=314, col_offset=13), Index(Num(2, lineno=314, col_offset=22)), Load(), lineno=314, col_offset=13), [In()], [Tuple([Attribute(Name('imp', Load(), lineno=314, col_offset=29), 'PY_SOURCE', Load(), lineno=314, col_offset=29), Attribute(Name('imp', Load(), lineno=314, col_offset=44), 'PY_COMPILED', Load(), lineno=314, col_offset=44), Attribute(Name('imp', Load(), lineno=314, col_offset=61), 'C_EXTENSION', Load(), lineno=314, col_offset=61)], Load(), lineno=314, col_offset=29)], lineno=314, col_offset=13), [Return(Attribute(Name('self', Load(), lineno=315, col_offset=19), 'filename', Load(), lineno=315, col_offset=19), lineno=315, col_offset=12)], [], lineno=314, col_offset=13)], lineno=312, col_offset=8), Return(Name('None', Load(), lineno=316, col_offset=15), lineno=316, col_offset=8)], [], lineno=309, col_offset=4)], [], lineno=224, col_offset=0), TryExcept([Import([alias('zipimport', None)], lineno=320, col_offset=4), ImportFrom('zipimport', [alias('zipimporter', None)], 0, lineno=321, col_offset=4), FunctionDef('iter_zipimport_modules', arguments([Name('importer', Param(), lineno=323, col_offset=31), Name('prefix', Param(), lineno=323, col_offset=41)], None, None, [Str('', lineno=323, col_offset=48)]), [Assign([Name('dirlist', Store(), lineno=324, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('zipimport', Load(), lineno=324, col_offset=18), '_zip_directory_cache', Load(), lineno=324, col_offset=18), Index(Attribute(Name('importer', Load(), lineno=324, col_offset=49), 'archive', Load(), lineno=324, col_offset=49)), Load(), lineno=324, col_offset=18), 'keys', Load(), lineno=324, col_offset=18), [], [], None, None, lineno=324, col_offset=18), lineno=324, col_offset=8), Expr(Call(Attribute(Name('dirlist', Load(), lineno=325, col_offset=8), 'sort', Load(), lineno=325, col_offset=8), [], [], None, None, lineno=325, col_offset=8), lineno=325, col_offset=8), Assign([Name('_prefix', Store(), lineno=326, col_offset=8)], Attribute(Name('importer', Load(), lineno=326, col_offset=18), 'prefix', Load(), lineno=326, col_offset=18), lineno=326, col_offset=8), Assign([Name('plen', Store(), lineno=327, col_offset=8)], Call(Name('len', Load(), lineno=327, col_offset=15), [Name('_prefix', Load(), lineno=327, col_offset=19)], [], None, None, lineno=327, col_offset=15), lineno=327, col_offset=8), Assign([Name('yielded', Store(), lineno=328, col_offset=8)], Dict([], [], lineno=328, col_offset=18), lineno=328, col_offset=8), Import([alias('inspect', None)], lineno=329, col_offset=8), For(Name('fn', Store(), lineno=330, col_offset=12), Name('dirlist', Load(), lineno=330, col_offset=18), [If(UnaryOp(Not(), Call(Attribute(Name('fn', Load(), lineno=331, col_offset=19), 'startswith', Load(), lineno=331, col_offset=19), [Name('_prefix', Load(), lineno=331, col_offset=33)], [], None, None, lineno=331, col_offset=19), lineno=331, col_offset=15), [Continue( lineno=332, col_offset=16)], [], lineno=331, col_offset=12), Assign([Name('fn', Store(), lineno=334, col_offset=12)], Call(Attribute(Subscript(Name('fn', Load(), lineno=334, col_offset=17), Slice(Name('plen', Load(), lineno=334, col_offset=20), None, None), Load(), lineno=334, col_offset=17), 'split', Load(), lineno=334, col_offset=17), [Attribute(Name('os', Load(), lineno=334, col_offset=33), 'sep', Load(), lineno=334, col_offset=33)], [], None, None, lineno=334, col_offset=17), lineno=334, col_offset=12), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=336, col_offset=15), [Name('fn', Load(), lineno=336, col_offset=19)], [], None, None, lineno=336, col_offset=15), [Eq()], [Num(2, lineno=336, col_offset=24)], lineno=336, col_offset=15), Call(Attribute(Subscript(Name('fn', Load(), lineno=336, col_offset=30), Index(Num(1, lineno=336, col_offset=33)), Load(), lineno=336, col_offset=30), 'startswith', Load(), lineno=336, col_offset=30), [Str('__init__.py', lineno=336, col_offset=47)], [], None, None, lineno=336, col_offset=30)], lineno=336, col_offset=15), [If(Compare(Subscript(Name('fn', Load(), lineno=337, col_offset=19), Index(Num(0, lineno=337, col_offset=22)), Load(), lineno=337, col_offset=19), [NotIn()], [Name('yielded', Load(), lineno=337, col_offset=32)], lineno=337, col_offset=19), [Assign([Subscript(Name('yielded', Load(), lineno=338, col_offset=20), Index(Subscript(Name('fn', Load(), lineno=338, col_offset=28), Index(Num(0, lineno=338, col_offset=31)), Load(), lineno=338, col_offset=28)), Store(), lineno=338, col_offset=20)], Num(1, lineno=338, col_offset=37), lineno=338, col_offset=20), Expr(Yield(Tuple([Subscript(Name('fn', Load(), lineno=339, col_offset=26), Index(Num(0, lineno=339, col_offset=29)), Load(), lineno=339, col_offset=26), Name('True', Load(), lineno=339, col_offset=33)], Load(), lineno=339, col_offset=26), lineno=339, col_offset=20), lineno=339, col_offset=20)], [], lineno=337, col_offset=16)], [], lineno=336, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=341, col_offset=15), [Name('fn', Load(), lineno=341, col_offset=19)], [], None, None, lineno=341, col_offset=15), [NotEq()], [Num(1, lineno=341, col_offset=24)], lineno=341, col_offset=15), [Continue( lineno=342, col_offset=16)], [], lineno=341, col_offset=12), Assign([Name('modname', Store(), lineno=344, col_offset=12)], Call(Attribute(Name('inspect', Load(), lineno=344, col_offset=22), 'getmodulename', Load(), lineno=344, col_offset=22), [Subscript(Name('fn', Load(), lineno=344, col_offset=44), Index(Num(0, lineno=344, col_offset=47)), Load(), lineno=344, col_offset=44)], [], None, None, lineno=344, col_offset=22), lineno=344, col_offset=12), If(Compare(Name('modname', Load(), lineno=345, col_offset=15), [Eq()], [Str('__init__', lineno=345, col_offset=24)], lineno=345, col_offset=15), [Continue( lineno=346, col_offset=16)], [], lineno=345, col_offset=12), If(BoolOp(And(), [Name('modname', Load(), lineno=348, col_offset=15), Compare(Str('.', lineno=348, col_offset=27), [NotIn()], [Name('modname', Load(), lineno=348, col_offset=38)], lineno=348, col_offset=27), Compare(Name('modname', Load(), lineno=348, col_offset=50), [NotIn()], [Name('yielded', Load(), lineno=348, col_offset=65)], lineno=348, col_offset=50)], lineno=348, col_offset=15), [Assign([Subscript(Name('yielded', Load(), lineno=349, col_offset=16), Index(Name('modname', Load(), lineno=349, col_offset=24)), Store(), lineno=349, col_offset=16)], Num(1, lineno=349, col_offset=35), lineno=349, col_offset=16), Expr(Yield(Tuple([BinOp(Name('prefix', Load(), lineno=350, col_offset=22), Add(), Name('modname', Load(), lineno=350, col_offset=31), lineno=350, col_offset=22), Name('False', Load(), lineno=350, col_offset=40)], Load(), lineno=350, col_offset=22), lineno=350, col_offset=16), lineno=350, col_offset=16)], [], lineno=348, col_offset=12)], [], lineno=330, col_offset=8)], [], lineno=323, col_offset=4), Expr(Call(Attribute(Name('iter_importer_modules', Load(), lineno=352, col_offset=4), 'register', Load(), lineno=352, col_offset=4), [Name('zipimporter', Load(), lineno=352, col_offset=35), Name('iter_zipimport_modules', Load(), lineno=352, col_offset=48)], [], None, None, lineno=352, col_offset=4), lineno=352, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=354, col_offset=7), None, [Pass( lineno=355, col_offset=4)], lineno=354, col_offset=0)], [], lineno=319, col_offset=0), FunctionDef('get_importer', arguments([Name('path_item', Param(), lineno=358, col_offset=17)], None, None, []), [Expr(Str('Retrieve a PEP 302 importer for the given path item\n\n    The returned importer is cached in sys.path_importer_cache\n    if it was newly created by a path hook.\n\n    If there is no importer, a wrapper around the basic import\n    machinery is returned. This wrapper is never inserted into\n    the importer cache (None is inserted instead).\n\n    The cache (or part of it) can be cleared manually if a\n    rescan of sys.path_hooks is necessary.\n    ', lineno=370, col_offset=-1), lineno=370, col_offset=-1), TryExcept([Assign([Name('importer', Store(), lineno=372, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=372, col_offset=19), 'path_importer_cache', Load(), lineno=372, col_offset=19), Index(Name('path_item', Load(), lineno=372, col_offset=43)), Load(), lineno=372, col_offset=19), lineno=372, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=373, col_offset=11), None, [For(Name('path_hook', Store(), lineno=374, col_offset=12), Attribute(Name('sys', Load(), lineno=374, col_offset=25), 'path_hooks', Load(), lineno=374, col_offset=25), [TryExcept([Assign([Name('importer', Store(), lineno=376, col_offset=16)], Call(Name('path_hook', Load(), lineno=376, col_offset=27), [Name('path_item', Load(), lineno=376, col_offset=37)], [], None, None, lineno=376, col_offset=27), lineno=376, col_offset=16), Break( lineno=377, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=378, col_offset=19), None, [Pass( lineno=379, col_offset=16)], lineno=378, col_offset=12)], [], lineno=375, col_offset=12)], [Assign([Name('importer', Store(), lineno=381, col_offset=12)], Name('None', Load(), lineno=381, col_offset=23), lineno=381, col_offset=12)], lineno=374, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=382, col_offset=8), 'path_importer_cache', Load(), lineno=382, col_offset=8), 'setdefault', Load(), lineno=382, col_offset=8), [Name('path_item', Load(), lineno=382, col_offset=43), Name('importer', Load(), lineno=382, col_offset=54)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8)], lineno=373, col_offset=4)], [], lineno=371, col_offset=4), If(Compare(Name('importer', Load(), lineno=384, col_offset=7), [Is()], [Name('None', Load(), lineno=384, col_offset=19)], lineno=384, col_offset=7), [TryExcept([Assign([Name('importer', Store(), lineno=386, col_offset=12)], Call(Name('ImpImporter', Load(), lineno=386, col_offset=23), [Name('path_item', Load(), lineno=386, col_offset=35)], [], None, None, lineno=386, col_offset=23), lineno=386, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=387, col_offset=15), None, [Assign([Name('importer', Store(), lineno=388, col_offset=12)], Name('None', Load(), lineno=388, col_offset=23), lineno=388, col_offset=12)], lineno=387, col_offset=8)], [], lineno=385, col_offset=8)], [], lineno=384, col_offset=4), Return(Name('importer', Load(), lineno=389, col_offset=11), lineno=389, col_offset=4)], [], lineno=358, col_offset=0), FunctionDef('iter_importers', arguments([Name('fullname', Param(), lineno=392, col_offset=19)], None, None, [Str('', lineno=392, col_offset=28)]), [Expr(Str('Yield PEP 302 importers for the given module name\n\n    If fullname contains a \'.\', the importers will be for the package\n    containing fullname, otherwise they will be importers for sys.meta_path,\n    sys.path, and Python\'s "classic" import machinery, in that order.  If\n    the named module is in a package, that package is imported as a side\n    effect of invoking this function.\n\n    Non PEP 302 mechanisms (e.g. the Windows registry) used by the\n    standard import machinery to find files in alternative locations\n    are partially supported, but are searched AFTER sys.path. Normally,\n    these locations are searched BEFORE sys.path, preventing sys.path\n    entries from shadowing them.\n\n    For this to cause a visible difference in behaviour, there must\n    be a module or package name that is accessible via both sys.path\n    and one of the non PEP 302 file system mechanisms. In this case,\n    the emulation will find the former version, while the builtin\n    import mechanism will find the latter.\n\n    Items of the following types can be affected by this discrepancy:\n        imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY\n    ', lineno=415, col_offset=-1), lineno=415, col_offset=-1), If(Call(Attribute(Name('fullname', Load(), lineno=416, col_offset=7), 'startswith', Load(), lineno=416, col_offset=7), [Str('.', lineno=416, col_offset=27)], [], None, None, lineno=416, col_offset=7), [Raise(Call(Name('ImportError', Load(), lineno=417, col_offset=14), [Str('Relative module names not supported', lineno=417, col_offset=26)], [], None, None, lineno=417, col_offset=14), None, None, lineno=417, col_offset=8)], [], lineno=416, col_offset=4), If(Compare(Str('.', lineno=418, col_offset=7), [In()], [Name('fullname', Load(), lineno=418, col_offset=14)], lineno=418, col_offset=7), [Assign([Name('pkg', Store(), lineno=420, col_offset=8)], Call(Attribute(Str('.', lineno=420, col_offset=14), 'join', Load(), lineno=420, col_offset=14), [Subscript(Call(Attribute(Name('fullname', Load(), lineno=420, col_offset=23), 'split', Load(), lineno=420, col_offset=23), [Str('.', lineno=420, col_offset=38)], [], None, None, lineno=420, col_offset=23), Slice(None, Num(-1, lineno=420, col_offset=45), None), Load(), lineno=420, col_offset=23)], [], None, None, lineno=420, col_offset=14), lineno=420, col_offset=8), If(Compare(Name('pkg', Load(), lineno=421, col_offset=11), [NotIn()], [Attribute(Name('sys', Load(), lineno=421, col_offset=22), 'modules', Load(), lineno=421, col_offset=22)], lineno=421, col_offset=11), [Expr(Call(Name('__import__', Load(), lineno=422, col_offset=12), [Name('pkg', Load(), lineno=422, col_offset=23)], [], None, None, lineno=422, col_offset=12), lineno=422, col_offset=12)], [], lineno=421, col_offset=8), Assign([Name('path', Store(), lineno=423, col_offset=8)], BoolOp(Or(), [Call(Name('getattr', Load(), lineno=423, col_offset=15), [Subscript(Attribute(Name('sys', Load(), lineno=423, col_offset=23), 'modules', Load(), lineno=423, col_offset=23), Index(Name('pkg', Load(), lineno=423, col_offset=35)), Load(), lineno=423, col_offset=23), Str('__path__', lineno=423, col_offset=41), Name('None', Load(), lineno=423, col_offset=53)], [], None, None, lineno=423, col_offset=15), List([], Load(), lineno=423, col_offset=62)], lineno=423, col_offset=15), lineno=423, col_offset=8)], [For(Name('importer', Store(), lineno=425, col_offset=12), Attribute(Name('sys', Load(), lineno=425, col_offset=24), 'meta_path', Load(), lineno=425, col_offset=24), [Expr(Yield(Name('importer', Load(), lineno=426, col_offset=18), lineno=426, col_offset=12), lineno=426, col_offset=12)], [], lineno=425, col_offset=8), Assign([Name('path', Store(), lineno=427, col_offset=8)], Attribute(Name('sys', Load(), lineno=427, col_offset=15), 'path', Load(), lineno=427, col_offset=15), lineno=427, col_offset=8)], lineno=418, col_offset=4), For(Name('item', Store(), lineno=428, col_offset=8), Name('path', Load(), lineno=428, col_offset=16), [Expr(Yield(Call(Name('get_importer', Load(), lineno=429, col_offset=14), [Name('item', Load(), lineno=429, col_offset=27)], [], None, None, lineno=429, col_offset=14), lineno=429, col_offset=8), lineno=429, col_offset=8)], [], lineno=428, col_offset=4), If(Compare(Str('.', lineno=430, col_offset=7), [NotIn()], [Name('fullname', Load(), lineno=430, col_offset=18)], lineno=430, col_offset=7), [Expr(Yield(Call(Name('ImpImporter', Load(), lineno=431, col_offset=14), [], [], None, None, lineno=431, col_offset=14), lineno=431, col_offset=8), lineno=431, col_offset=8)], [], lineno=430, col_offset=4)], [], lineno=392, col_offset=0), FunctionDef('get_loader', arguments([Name('module_or_name', Param(), lineno=433, col_offset=15)], None, None, []), [Expr(Str('Get a PEP 302 "loader" object for module_or_name\n\n    If the module or package is accessible via the normal import\n    mechanism, a wrapper around the relevant part of that machinery\n    is returned.  Returns None if the module cannot be found or imported.\n    If the named module is not already imported, its containing package\n    (if any) is imported, in order to establish the package __path__.\n\n    This function uses iter_importers(), and is thus subject to the same\n    limitations regarding platform-specific special import locations such\n    as the Windows registry.\n    ', lineno=445, col_offset=-1), lineno=445, col_offset=-1), If(Compare(Name('module_or_name', Load(), lineno=446, col_offset=7), [In()], [Attribute(Name('sys', Load(), lineno=446, col_offset=25), 'modules', Load(), lineno=446, col_offset=25)], lineno=446, col_offset=7), [Assign([Name('module_or_name', Store(), lineno=447, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=447, col_offset=25), 'modules', Load(), lineno=447, col_offset=25), Index(Name('module_or_name', Load(), lineno=447, col_offset=37)), Load(), lineno=447, col_offset=25), lineno=447, col_offset=8)], [], lineno=446, col_offset=4), If(Call(Name('isinstance', Load(), lineno=448, col_offset=7), [Name('module_or_name', Load(), lineno=448, col_offset=18), Name('ModuleType', Load(), lineno=448, col_offset=34)], [], None, None, lineno=448, col_offset=7), [Assign([Name('module', Store(), lineno=449, col_offset=8)], Name('module_or_name', Load(), lineno=449, col_offset=17), lineno=449, col_offset=8), Assign([Name('loader', Store(), lineno=450, col_offset=8)], Call(Name('getattr', Load(), lineno=450, col_offset=17), [Name('module', Load(), lineno=450, col_offset=25), Str('__loader__', lineno=450, col_offset=33), Name('None', Load(), lineno=450, col_offset=47)], [], None, None, lineno=450, col_offset=17), lineno=450, col_offset=8), If(Compare(Name('loader', Load(), lineno=451, col_offset=11), [IsNot()], [Name('None', Load(), lineno=451, col_offset=25)], lineno=451, col_offset=11), [Return(Name('loader', Load(), lineno=452, col_offset=19), lineno=452, col_offset=12)], [], lineno=451, col_offset=8), Assign([Name('fullname', Store(), lineno=453, col_offset=8)], Attribute(Name('module', Load(), lineno=453, col_offset=19), '__name__', Load(), lineno=453, col_offset=19), lineno=453, col_offset=8)], [Assign([Name('fullname', Store(), lineno=455, col_offset=8)], Name('module_or_name', Load(), lineno=455, col_offset=19), lineno=455, col_offset=8)], lineno=448, col_offset=4), Return(Call(Name('find_loader', Load(), lineno=456, col_offset=11), [Name('fullname', Load(), lineno=456, col_offset=23)], [], None, None, lineno=456, col_offset=11), lineno=456, col_offset=4)], [], lineno=433, col_offset=0), FunctionDef('find_loader', arguments([Name('fullname', Param(), lineno=458, col_offset=16)], None, None, []), [Expr(Str('Find a PEP 302 "loader" object for fullname\n\n    If fullname contains dots, path must be the containing package\'s __path__.\n    Returns None if the module cannot be found or imported. This function uses\n    iter_importers(), and is thus subject to the same limitations regarding\n    platform-specific special import locations such as the Windows registry.\n    ', lineno=465, col_offset=-1), lineno=465, col_offset=-1), For(Name('importer', Store(), lineno=466, col_offset=8), Call(Name('iter_importers', Load(), lineno=466, col_offset=20), [Name('fullname', Load(), lineno=466, col_offset=35)], [], None, None, lineno=466, col_offset=20), [Assign([Name('loader', Store(), lineno=467, col_offset=8)], Call(Attribute(Name('importer', Load(), lineno=467, col_offset=17), 'find_module', Load(), lineno=467, col_offset=17), [Name('fullname', Load(), lineno=467, col_offset=38)], [], None, None, lineno=467, col_offset=17), lineno=467, col_offset=8), If(Compare(Name('loader', Load(), lineno=468, col_offset=11), [IsNot()], [Name('None', Load(), lineno=468, col_offset=25)], lineno=468, col_offset=11), [Return(Name('loader', Load(), lineno=469, col_offset=19), lineno=469, col_offset=12)], [], lineno=468, col_offset=8)], [], lineno=466, col_offset=4), Return(Name('None', Load(), lineno=471, col_offset=11), lineno=471, col_offset=4)], [], lineno=458, col_offset=0), FunctionDef('extend_path', arguments([Name('path', Param(), lineno=474, col_offset=16), Name('name', Param(), lineno=474, col_offset=22)], None, None, []), [Expr(Str("Extend a package's path.\n\n    Intended use is to place the following code in a package's __init__.py:\n\n        from pkgutil import extend_path\n        __path__ = extend_path(__path__, __name__)\n\n    This will add to the package's __path__ all subdirectories of\n    directories on sys.path named after the package.  This is useful\n    if one wants to distribute different parts of a single logical\n    package as multiple directories.\n\n    It also looks for *.pkg files beginning where * matches the name\n    argument.  This feature is similar to *.pth files (see site.py),\n    except that it doesn't special-case lines starting with 'import'.\n    A *.pkg file is trusted at face value: apart from checking for\n    duplicates, all entries found in a *.pkg file are added to the\n    path, regardless of whether they are exist the filesystem.  (This\n    is a feature.)\n\n    If the input path is not a list (as is the case for frozen\n    packages) it is returned unchanged.  The input path is not\n    modified; an extended copy is returned.  Items are only appended\n    to the copy at the end.\n\n    It is assumed that sys.path is a sequence.  Items of sys.path that\n    are not (unicode or 8-bit) strings referring to existing\n    directories are ignored.  Unicode items of sys.path that cause\n    errors when used as filenames may cause this function to raise an\n    exception (in line with os.path.isdir() behavior).\n    ", lineno=505, col_offset=-1), lineno=505, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=507, col_offset=11), [Name('path', Load(), lineno=507, col_offset=22), Name('list', Load(), lineno=507, col_offset=28)], [], None, None, lineno=507, col_offset=11), lineno=507, col_offset=7), [Return(Name('path', Load(), lineno=510, col_offset=15), lineno=510, col_offset=8)], [], lineno=507, col_offset=4), Assign([Name('pname', Store(), lineno=512, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=512, col_offset=12), 'path', Load(), lineno=512, col_offset=12), 'join', Load(), lineno=512, col_offset=12), [], [], Call(Attribute(Name('name', Load(), lineno=512, col_offset=26), 'split', Load(), lineno=512, col_offset=26), [Str('.', lineno=512, col_offset=37)], [], None, None, lineno=512, col_offset=26), None, lineno=512, col_offset=12), lineno=512, col_offset=4), Assign([Name('sname', Store(), lineno=514, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=514, col_offset=12), 'extsep', Load(), lineno=514, col_offset=12), 'join', Load(), lineno=514, col_offset=12), [Call(Attribute(Name('name', Load(), lineno=514, col_offset=27), 'split', Load(), lineno=514, col_offset=27), [Str('.', lineno=514, col_offset=38)], [], None, None, lineno=514, col_offset=27)], [], None, None, lineno=514, col_offset=12), lineno=514, col_offset=4), Assign([Name('sname_pkg', Store(), lineno=515, col_offset=4)], BinOp(BinOp(Name('sname', Load(), lineno=515, col_offset=16), Add(), Attribute(Name('os', Load(), lineno=515, col_offset=24), 'extsep', Load(), lineno=515, col_offset=24), lineno=515, col_offset=16), Add(), Str('pkg', lineno=515, col_offset=36), lineno=515, col_offset=34), lineno=515, col_offset=4), Assign([Name('init_py', Store(), lineno=516, col_offset=4)], BinOp(BinOp(Str('__init__', lineno=516, col_offset=14), Add(), Attribute(Name('os', Load(), lineno=516, col_offset=27), 'extsep', Load(), lineno=516, col_offset=27), lineno=516, col_offset=14), Add(), Str('py', lineno=516, col_offset=39), lineno=516, col_offset=37), lineno=516, col_offset=4), Assign([Name('path', Store(), lineno=518, col_offset=4)], Subscript(Name('path', Load(), lineno=518, col_offset=11), Slice(None, None, None), Load(), lineno=518, col_offset=11), lineno=518, col_offset=4), For(Name('dir', Store(), lineno=520, col_offset=8), Attribute(Name('sys', Load(), lineno=520, col_offset=15), 'path', Load(), lineno=520, col_offset=15), [If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=521, col_offset=15), [Name('dir', Load(), lineno=521, col_offset=26), Name('basestring', Load(), lineno=521, col_offset=31)], [], None, None, lineno=521, col_offset=15), lineno=521, col_offset=11), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=521, col_offset=50), 'path', Load(), lineno=521, col_offset=50), 'isdir', Load(), lineno=521, col_offset=50), [Name('dir', Load(), lineno=521, col_offset=64)], [], None, None, lineno=521, col_offset=50), lineno=521, col_offset=46)], lineno=521, col_offset=11), [Continue( lineno=522, col_offset=12)], [], lineno=521, col_offset=8), Assign([Name('subdir', Store(), lineno=523, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=523, col_offset=17), 'path', Load(), lineno=523, col_offset=17), 'join', Load(), lineno=523, col_offset=17), [Name('dir', Load(), lineno=523, col_offset=30), Name('pname', Load(), lineno=523, col_offset=35)], [], None, None, lineno=523, col_offset=17), lineno=523, col_offset=8), Assign([Name('initfile', Store(), lineno=526, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=526, col_offset=19), 'path', Load(), lineno=526, col_offset=19), 'join', Load(), lineno=526, col_offset=19), [Name('subdir', Load(), lineno=526, col_offset=32), Name('init_py', Load(), lineno=526, col_offset=40)], [], None, None, lineno=526, col_offset=19), lineno=526, col_offset=8), If(BoolOp(And(), [Compare(Name('subdir', Load(), lineno=527, col_offset=11), [NotIn()], [Name('path', Load(), lineno=527, col_offset=25)], lineno=527, col_offset=11), Call(Attribute(Attribute(Name('os', Load(), lineno=527, col_offset=34), 'path', Load(), lineno=527, col_offset=34), 'isfile', Load(), lineno=527, col_offset=34), [Name('initfile', Load(), lineno=527, col_offset=49)], [], None, None, lineno=527, col_offset=34)], lineno=527, col_offset=11), [Expr(Call(Attribute(Name('path', Load(), lineno=528, col_offset=12), 'append', Load(), lineno=528, col_offset=12), [Name('subdir', Load(), lineno=528, col_offset=24)], [], None, None, lineno=528, col_offset=12), lineno=528, col_offset=12)], [], lineno=527, col_offset=8), Assign([Name('pkgfile', Store(), lineno=531, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=531, col_offset=18), 'path', Load(), lineno=531, col_offset=18), 'join', Load(), lineno=531, col_offset=18), [Name('dir', Load(), lineno=531, col_offset=31), Name('sname_pkg', Load(), lineno=531, col_offset=36)], [], None, None, lineno=531, col_offset=18), lineno=531, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=532, col_offset=11), 'path', Load(), lineno=532, col_offset=11), 'isfile', Load(), lineno=532, col_offset=11), [Name('pkgfile', Load(), lineno=532, col_offset=26)], [], None, None, lineno=532, col_offset=11), [TryExcept([Assign([Name('f', Store(), lineno=534, col_offset=16)], Call(Name('open', Load(), lineno=534, col_offset=20), [Name('pkgfile', Load(), lineno=534, col_offset=25)], [], None, None, lineno=534, col_offset=20), lineno=534, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=535, col_offset=19), Name('msg', Store(), lineno=535, col_offset=28), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=536, col_offset=16), 'stderr', Load(), lineno=536, col_offset=16), 'write', Load(), lineno=536, col_offset=16), [BinOp(Str("Can't open %s: %s\n", lineno=536, col_offset=33), Mod(), Tuple([Name('pkgfile', Load(), lineno=537, col_offset=34), Name('msg', Load(), lineno=537, col_offset=43)], Load(), lineno=537, col_offset=34), lineno=536, col_offset=33)], [], None, None, lineno=536, col_offset=16), lineno=536, col_offset=16)], lineno=535, col_offset=12)], [For(Name('line', Store(), lineno=539, col_offset=20), Name('f', Load(), lineno=539, col_offset=28), [Assign([Name('line', Store(), lineno=540, col_offset=20)], Call(Attribute(Name('line', Load(), lineno=540, col_offset=27), 'rstrip', Load(), lineno=540, col_offset=27), [Str('\n', lineno=540, col_offset=39)], [], None, None, lineno=540, col_offset=27), lineno=540, col_offset=20), If(BoolOp(Or(), [UnaryOp(Not(), Name('line', Load(), lineno=541, col_offset=27), lineno=541, col_offset=23), Call(Attribute(Name('line', Load(), lineno=541, col_offset=35), 'startswith', Load(), lineno=541, col_offset=35), [Str('#', lineno=541, col_offset=51)], [], None, None, lineno=541, col_offset=35)], lineno=541, col_offset=23), [Continue( lineno=542, col_offset=24)], [], lineno=541, col_offset=20), Expr(Call(Attribute(Name('path', Load(), lineno=543, col_offset=20), 'append', Load(), lineno=543, col_offset=20), [Name('line', Load(), lineno=543, col_offset=32)], [], None, None, lineno=543, col_offset=20), lineno=543, col_offset=20)], [], lineno=539, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=544, col_offset=16), 'close', Load(), lineno=544, col_offset=16), [], [], None, None, lineno=544, col_offset=16), lineno=544, col_offset=16)], lineno=533, col_offset=12)], [], lineno=532, col_offset=8)], [], lineno=520, col_offset=4), Return(Name('path', Load(), lineno=546, col_offset=11), lineno=546, col_offset=4)], [], lineno=474, col_offset=0), FunctionDef('get_data', arguments([Name('package', Param(), lineno=548, col_offset=13), Name('resource', Param(), lineno=548, col_offset=22)], None, None, []), [Expr(Str("Get a resource from a package.\n\n    This is a wrapper round the PEP 302 loader get_data API. The package\n    argument should be the name of a package, in standard module format\n    (foo.bar). The resource argument should be in the form of a relative\n    filename, using '/' as the path separator. The parent directory name '..'\n    is not allowed, and nor is a rooted name (starting with a '/').\n\n    The function returns a binary string, which is the contents of the\n    specified resource.\n\n    For packages located in the filesystem, which have already been imported,\n    this is the rough equivalent of\n\n        d = os.path.dirname(sys.modules[package].__file__)\n        data = open(os.path.join(d, resource), 'rb').read()\n\n    If the package cannot be located or loaded, or it uses a PEP 302 loader\n    which does not support get_data(), then None is returned.\n    ", lineno=568, col_offset=-1), lineno=568, col_offset=-1), Assign([Name('loader', Store(), lineno=570, col_offset=4)], Call(Name('get_loader', Load(), lineno=570, col_offset=13), [Name('package', Load(), lineno=570, col_offset=24)], [], None, None, lineno=570, col_offset=13), lineno=570, col_offset=4), If(BoolOp(Or(), [Compare(Name('loader', Load(), lineno=571, col_offset=7), [Is()], [Name('None', Load(), lineno=571, col_offset=17)], lineno=571, col_offset=7), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=571, col_offset=29), [Name('loader', Load(), lineno=571, col_offset=37), Str('get_data', lineno=571, col_offset=45)], [], None, None, lineno=571, col_offset=29), lineno=571, col_offset=25)], lineno=571, col_offset=7), [Return(Name('None', Load(), lineno=572, col_offset=15), lineno=572, col_offset=8)], [], lineno=571, col_offset=4), Assign([Name('mod', Store(), lineno=573, col_offset=4)], BoolOp(Or(), [Call(Attribute(Attribute(Name('sys', Load(), lineno=573, col_offset=10), 'modules', Load(), lineno=573, col_offset=10), 'get', Load(), lineno=573, col_offset=10), [Name('package', Load(), lineno=573, col_offset=26)], [], None, None, lineno=573, col_offset=10), Call(Attribute(Name('loader', Load(), lineno=573, col_offset=38), 'load_module', Load(), lineno=573, col_offset=38), [Name('package', Load(), lineno=573, col_offset=57)], [], None, None, lineno=573, col_offset=38)], lineno=573, col_offset=10), lineno=573, col_offset=4), If(BoolOp(Or(), [Compare(Name('mod', Load(), lineno=574, col_offset=7), [Is()], [Name('None', Load(), lineno=574, col_offset=14)], lineno=574, col_offset=7), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=574, col_offset=26), [Name('mod', Load(), lineno=574, col_offset=34), Str('__file__', lineno=574, col_offset=39)], [], None, None, lineno=574, col_offset=26), lineno=574, col_offset=22)], lineno=574, col_offset=7), [Return(Name('None', Load(), lineno=575, col_offset=15), lineno=575, col_offset=8)], [], lineno=574, col_offset=4), Assign([Name('parts', Store(), lineno=580, col_offset=4)], Call(Attribute(Name('resource', Load(), lineno=580, col_offset=12), 'split', Load(), lineno=580, col_offset=12), [Str('/', lineno=580, col_offset=27)], [], None, None, lineno=580, col_offset=12), lineno=580, col_offset=4), Expr(Call(Attribute(Name('parts', Load(), lineno=581, col_offset=4), 'insert', Load(), lineno=581, col_offset=4), [Num(0, lineno=581, col_offset=17), Call(Attribute(Attribute(Name('os', Load(), lineno=581, col_offset=20), 'path', Load(), lineno=581, col_offset=20), 'dirname', Load(), lineno=581, col_offset=20), [Attribute(Name('mod', Load(), lineno=581, col_offset=36), '__file__', Load(), lineno=581, col_offset=36)], [], None, None, lineno=581, col_offset=20)], [], None, None, lineno=581, col_offset=4), lineno=581, col_offset=4), Assign([Name('resource_name', Store(), lineno=582, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=582, col_offset=20), 'path', Load(), lineno=582, col_offset=20), 'join', Load(), lineno=582, col_offset=20), [], [], Name('parts', Load(), lineno=582, col_offset=34), None, lineno=582, col_offset=20), lineno=582, col_offset=4), Return(Call(Attribute(Name('loader', Load(), lineno=583, col_offset=11), 'get_data', Load(), lineno=583, col_offset=11), [Name('resource_name', Load(), lineno=583, col_offset=27)], [], None, None, lineno=583, col_offset=11), lineno=583, col_offset=4)], [], lineno=548, col_offset=0)])
