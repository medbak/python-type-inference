Module([Expr(Str('General floating point formatting functions.\n\nFunctions:\nfix(x, digits_behind)\nsci(x, digits_behind)\n\nEach takes a number or a string and a number of digits as arguments.\n\nParameters:\nx:             number to be formatted; or a string resembling a number\ndigits_behind: number of digits behind the decimal point\n', lineno=12, col_offset=-1), lineno=12, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=13, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=14, col_offset=0), [Str('the fpformat module has been removed in Python 3.0', lineno=14, col_offset=9)], [keyword('stacklevel', Num(2, lineno=14, col_offset=74))], None, None, lineno=14, col_offset=0), lineno=14, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=15, col_offset=4)], lineno=15, col_offset=0), Import([alias('re', None)], lineno=17, col_offset=0), Assign([Name('__all__', Store(), lineno=19, col_offset=0)], List([Str('fix', lineno=19, col_offset=11), Str('sci', lineno=19, col_offset=17), Str('NotANumber', lineno=19, col_offset=23)], Load(), lineno=19, col_offset=10), lineno=19, col_offset=0), Assign([Name('decoder', Store(), lineno=22, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=22, col_offset=10), 'compile', Load(), lineno=22, col_offset=10), [Str('^([-+]?)0*(\\d*)((?:\\.\\d*)?)(([eE][-+]?\\d+)?)$', lineno=22, col_offset=21)], [], None, None, lineno=22, col_offset=10), lineno=22, col_offset=0), TryExcept([ClassDef('NotANumber', [Name('ValueError', Load(), lineno=30, col_offset=21)], [Pass( lineno=31, col_offset=8)], [], lineno=30, col_offset=4)], [ExceptHandler(Name('TypeError', Load(), lineno=32, col_offset=7), None, [Assign([Name('NotANumber', Store(), lineno=33, col_offset=4)], Str('fpformat.NotANumber', lineno=33, col_offset=17), lineno=33, col_offset=4)], lineno=32, col_offset=0)], [], lineno=29, col_offset=0), FunctionDef('extract', arguments([Name('s', Param(), lineno=35, col_offset=12)], None, None, []), [Expr(Str("Return (sign, intpart, fraction, expo) or raise an exception:\n    sign is '+' or '-'\n    intpart is 0 or more digits beginning with a nonzero\n    fraction is 0 or more digits\n    expo is an integer", lineno=40, col_offset=-1), lineno=40, col_offset=-1), Assign([Name('res', Store(), lineno=41, col_offset=4)], Call(Attribute(Name('decoder', Load(), lineno=41, col_offset=10), 'match', Load(), lineno=41, col_offset=10), [Name('s', Load(), lineno=41, col_offset=24)], [], None, None, lineno=41, col_offset=10), lineno=41, col_offset=4), If(Compare(Name('res', Load(), lineno=42, col_offset=7), [Is()], [Name('None', Load(), lineno=42, col_offset=14)], lineno=42, col_offset=7), [Raise(Name('NotANumber', Load(), lineno=42, col_offset=26), Name('s', Load(), lineno=42, col_offset=38), None, lineno=42, col_offset=20)], [], lineno=42, col_offset=4), Assign([Tuple([Name('sign', Store(), lineno=43, col_offset=4), Name('intpart', Store(), lineno=43, col_offset=10), Name('fraction', Store(), lineno=43, col_offset=19), Name('exppart', Store(), lineno=43, col_offset=29)], Store(), lineno=43, col_offset=4)], Call(Attribute(Name('res', Load(), lineno=43, col_offset=39), 'group', Load(), lineno=43, col_offset=39), [Num(1, lineno=43, col_offset=49), Num(2, lineno=43, col_offset=51), Num(3, lineno=43, col_offset=53), Num(4, lineno=43, col_offset=55)], [], None, None, lineno=43, col_offset=39), lineno=43, col_offset=4), If(Compare(Name('sign', Load(), lineno=44, col_offset=7), [Eq()], [Str('+', lineno=44, col_offset=15)], lineno=44, col_offset=7), [Assign([Name('sign', Store(), lineno=44, col_offset=20)], Str('', lineno=44, col_offset=27), lineno=44, col_offset=20)], [], lineno=44, col_offset=4), If(Name('fraction', Load(), lineno=45, col_offset=7), [Assign([Name('fraction', Store(), lineno=45, col_offset=17)], Subscript(Name('fraction', Load(), lineno=45, col_offset=28), Slice(Num(1, lineno=45, col_offset=37), None, None), Load(), lineno=45, col_offset=28), lineno=45, col_offset=17)], [], lineno=45, col_offset=4), If(Name('exppart', Load(), lineno=46, col_offset=7), [Assign([Name('expo', Store(), lineno=46, col_offset=16)], Call(Name('int', Load(), lineno=46, col_offset=23), [Subscript(Name('exppart', Load(), lineno=46, col_offset=27), Slice(Num(1, lineno=46, col_offset=35), None, None), Load(), lineno=46, col_offset=27)], [], None, None, lineno=46, col_offset=23), lineno=46, col_offset=16)], [Assign([Name('expo', Store(), lineno=47, col_offset=10)], Num(0, lineno=47, col_offset=17), lineno=47, col_offset=10)], lineno=46, col_offset=4), Return(Tuple([Name('sign', Load(), lineno=48, col_offset=11), Name('intpart', Load(), lineno=48, col_offset=17), Name('fraction', Load(), lineno=48, col_offset=26), Name('expo', Load(), lineno=48, col_offset=36)], Load(), lineno=48, col_offset=11), lineno=48, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('unexpo', arguments([Name('intpart', Param(), lineno=50, col_offset=11), Name('fraction', Param(), lineno=50, col_offset=20), Name('expo', Param(), lineno=50, col_offset=30)], None, None, []), [Expr(Str('Remove the exponent by changing intpart and fraction.', lineno=51, col_offset=4), lineno=51, col_offset=4), If(Compare(Name('expo', Load(), lineno=52, col_offset=7), [Gt()], [Num(0, lineno=52, col_offset=14)], lineno=52, col_offset=7), [Assign([Name('f', Store(), lineno=53, col_offset=8)], Call(Name('len', Load(), lineno=53, col_offset=12), [Name('fraction', Load(), lineno=53, col_offset=16)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=8), Assign([Tuple([Name('intpart', Store(), lineno=54, col_offset=8), Name('fraction', Store(), lineno=54, col_offset=17)], Store(), lineno=54, col_offset=8)], Tuple([BinOp(Name('intpart', Load(), lineno=54, col_offset=28), Add(), Subscript(Name('fraction', Load(), lineno=54, col_offset=38), Slice(None, Name('expo', Load(), lineno=54, col_offset=48), None), Load(), lineno=54, col_offset=38), lineno=54, col_offset=28), Subscript(Name('fraction', Load(), lineno=54, col_offset=55), Slice(Name('expo', Load(), lineno=54, col_offset=64), None, None), Load(), lineno=54, col_offset=55)], Load(), lineno=54, col_offset=28), lineno=54, col_offset=8), If(Compare(Name('expo', Load(), lineno=55, col_offset=11), [Gt()], [Name('f', Load(), lineno=55, col_offset=18)], lineno=55, col_offset=11), [Assign([Name('intpart', Store(), lineno=56, col_offset=12)], BinOp(Name('intpart', Load(), lineno=56, col_offset=22), Add(), BinOp(Str('0', lineno=56, col_offset=32), Mult(), BinOp(Name('expo', Load(), lineno=56, col_offset=37), Sub(), Name('f', Load(), lineno=56, col_offset=42), lineno=56, col_offset=37), lineno=56, col_offset=32), lineno=56, col_offset=22), lineno=56, col_offset=12)], [], lineno=55, col_offset=8)], [If(Compare(Name('expo', Load(), lineno=57, col_offset=9), [Lt()], [Num(0, lineno=57, col_offset=16)], lineno=57, col_offset=9), [Assign([Name('i', Store(), lineno=58, col_offset=8)], Call(Name('len', Load(), lineno=58, col_offset=12), [Name('intpart', Load(), lineno=58, col_offset=16)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=8), Assign([Tuple([Name('intpart', Store(), lineno=59, col_offset=8), Name('fraction', Store(), lineno=59, col_offset=17)], Store(), lineno=59, col_offset=8)], Tuple([Subscript(Name('intpart', Load(), lineno=59, col_offset=28), Slice(None, Name('expo', Load(), lineno=59, col_offset=37), None), Load(), lineno=59, col_offset=28), BinOp(Subscript(Name('intpart', Load(), lineno=59, col_offset=44), Slice(Name('expo', Load(), lineno=59, col_offset=52), None, None), Load(), lineno=59, col_offset=44), Add(), Name('fraction', Load(), lineno=59, col_offset=61), lineno=59, col_offset=44)], Load(), lineno=59, col_offset=28), lineno=59, col_offset=8), If(Compare(Name('expo', Load(), lineno=60, col_offset=11), [Lt()], [UnaryOp(USub(), Name('i', Load(), lineno=60, col_offset=19), lineno=60, col_offset=18)], lineno=60, col_offset=11), [Assign([Name('fraction', Store(), lineno=61, col_offset=12)], BinOp(BinOp(Str('0', lineno=61, col_offset=23), Mult(), BinOp(UnaryOp(USub(), Name('expo', Load(), lineno=61, col_offset=29), lineno=61, col_offset=28), Sub(), Name('i', Load(), lineno=61, col_offset=34), lineno=61, col_offset=28), lineno=61, col_offset=23), Add(), Name('fraction', Load(), lineno=61, col_offset=39), lineno=61, col_offset=23), lineno=61, col_offset=12)], [], lineno=60, col_offset=8)], [], lineno=57, col_offset=9)], lineno=52, col_offset=4), Return(Tuple([Name('intpart', Load(), lineno=62, col_offset=11), Name('fraction', Load(), lineno=62, col_offset=20)], Load(), lineno=62, col_offset=11), lineno=62, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('roundfrac', arguments([Name('intpart', Param(), lineno=64, col_offset=14), Name('fraction', Param(), lineno=64, col_offset=23), Name('digs', Param(), lineno=64, col_offset=33)], None, None, []), [Expr(Str('Round or extend the fraction to size digs.', lineno=65, col_offset=4), lineno=65, col_offset=4), Assign([Name('f', Store(), lineno=66, col_offset=4)], Call(Name('len', Load(), lineno=66, col_offset=8), [Name('fraction', Load(), lineno=66, col_offset=12)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=4), If(Compare(Name('f', Load(), lineno=67, col_offset=7), [LtE()], [Name('digs', Load(), lineno=67, col_offset=12)], lineno=67, col_offset=7), [Return(Tuple([Name('intpart', Load(), lineno=68, col_offset=15), BinOp(Name('fraction', Load(), lineno=68, col_offset=24), Add(), BinOp(Str('0', lineno=68, col_offset=35), Mult(), BinOp(Name('digs', Load(), lineno=68, col_offset=40), Sub(), Name('f', Load(), lineno=68, col_offset=45), lineno=68, col_offset=40), lineno=68, col_offset=35), lineno=68, col_offset=24)], Load(), lineno=68, col_offset=15), lineno=68, col_offset=8)], [], lineno=67, col_offset=4), Assign([Name('i', Store(), lineno=69, col_offset=4)], Call(Name('len', Load(), lineno=69, col_offset=8), [Name('intpart', Load(), lineno=69, col_offset=12)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=4), If(Compare(BinOp(Name('i', Load(), lineno=70, col_offset=7), Add(), Name('digs', Load(), lineno=70, col_offset=9), lineno=70, col_offset=7), [Lt()], [Num(0, lineno=70, col_offset=16)], lineno=70, col_offset=7), [Return(Tuple([BinOp(Str('0', lineno=71, col_offset=15), Mult(), UnaryOp(USub(), Name('digs', Load(), lineno=71, col_offset=20), lineno=71, col_offset=19), lineno=71, col_offset=15), Str('', lineno=71, col_offset=26)], Load(), lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=70, col_offset=4), Assign([Name('total', Store(), lineno=72, col_offset=4)], BinOp(Name('intpart', Load(), lineno=72, col_offset=12), Add(), Name('fraction', Load(), lineno=72, col_offset=22), lineno=72, col_offset=12), lineno=72, col_offset=4), Assign([Name('nextdigit', Store(), lineno=73, col_offset=4)], Subscript(Name('total', Load(), lineno=73, col_offset=16), Index(BinOp(Name('i', Load(), lineno=73, col_offset=22), Add(), Name('digs', Load(), lineno=73, col_offset=24), lineno=73, col_offset=22)), Load(), lineno=73, col_offset=16), lineno=73, col_offset=4), If(Compare(Name('nextdigit', Load(), lineno=74, col_offset=7), [GtE()], [Str('5', lineno=74, col_offset=20)], lineno=74, col_offset=7), [Assign([Name('n', Store(), lineno=75, col_offset=8)], BinOp(BinOp(Name('i', Load(), lineno=75, col_offset=12), Add(), Name('digs', Load(), lineno=75, col_offset=16), lineno=75, col_offset=12), Sub(), Num(1, lineno=75, col_offset=23), lineno=75, col_offset=21), lineno=75, col_offset=8), While(Compare(Name('n', Load(), lineno=76, col_offset=14), [GtE()], [Num(0, lineno=76, col_offset=19)], lineno=76, col_offset=14), [If(Compare(Subscript(Name('total', Load(), lineno=77, col_offset=15), Index(Name('n', Load(), lineno=77, col_offset=21)), Load(), lineno=77, col_offset=15), [NotEq()], [Str('9', lineno=77, col_offset=27)], lineno=77, col_offset=15), [Break( lineno=77, col_offset=32)], [], lineno=77, col_offset=12), Assign([Name('n', Store(), lineno=78, col_offset=12)], BinOp(Name('n', Load(), lineno=78, col_offset=16), Sub(), Num(1, lineno=78, col_offset=18), lineno=78, col_offset=16), lineno=78, col_offset=12)], [Assign([Name('total', Store(), lineno=80, col_offset=12)], BinOp(Str('0', lineno=80, col_offset=20), Add(), Name('total', Load(), lineno=80, col_offset=26), lineno=80, col_offset=20), lineno=80, col_offset=12), Assign([Name('i', Store(), lineno=81, col_offset=12)], BinOp(Name('i', Load(), lineno=81, col_offset=16), Add(), Num(1, lineno=81, col_offset=18), lineno=81, col_offset=16), lineno=81, col_offset=12), Assign([Name('n', Store(), lineno=82, col_offset=12)], Num(0, lineno=82, col_offset=16), lineno=82, col_offset=12)], lineno=76, col_offset=8), Assign([Name('total', Store(), lineno=83, col_offset=8)], BinOp(BinOp(Subscript(Name('total', Load(), lineno=83, col_offset=16), Slice(None, Name('n', Load(), lineno=83, col_offset=23), None), Load(), lineno=83, col_offset=16), Add(), Call(Name('chr', Load(), lineno=83, col_offset=28), [BinOp(Call(Name('ord', Load(), lineno=83, col_offset=32), [Subscript(Name('total', Load(), lineno=83, col_offset=36), Index(Name('n', Load(), lineno=83, col_offset=42)), Load(), lineno=83, col_offset=36)], [], None, None, lineno=83, col_offset=32), Add(), Num(1, lineno=83, col_offset=48), lineno=83, col_offset=32)], [], None, None, lineno=83, col_offset=28), lineno=83, col_offset=16), Add(), BinOp(Str('0', lineno=83, col_offset=53), Mult(), BinOp(BinOp(Call(Name('len', Load(), lineno=83, col_offset=58), [Name('total', Load(), lineno=83, col_offset=62)], [], None, None, lineno=83, col_offset=58), Sub(), Name('n', Load(), lineno=83, col_offset=69), lineno=83, col_offset=58), Sub(), Num(1, lineno=83, col_offset=71), lineno=83, col_offset=70), lineno=83, col_offset=53), lineno=83, col_offset=51), lineno=83, col_offset=8), Assign([Tuple([Name('intpart', Store(), lineno=84, col_offset=8), Name('fraction', Store(), lineno=84, col_offset=17)], Store(), lineno=84, col_offset=8)], Tuple([Subscript(Name('total', Load(), lineno=84, col_offset=28), Slice(None, Name('i', Load(), lineno=84, col_offset=35), None), Load(), lineno=84, col_offset=28), Subscript(Name('total', Load(), lineno=84, col_offset=39), Slice(Name('i', Load(), lineno=84, col_offset=45), None, None), Load(), lineno=84, col_offset=39)], Load(), lineno=84, col_offset=28), lineno=84, col_offset=8)], [], lineno=74, col_offset=4), If(Compare(Name('digs', Load(), lineno=85, col_offset=7), [GtE()], [Num(0, lineno=85, col_offset=15)], lineno=85, col_offset=7), [Return(Tuple([Name('intpart', Load(), lineno=86, col_offset=15), Subscript(Name('fraction', Load(), lineno=86, col_offset=24), Slice(None, Name('digs', Load(), lineno=86, col_offset=34), None), Load(), lineno=86, col_offset=24)], Load(), lineno=86, col_offset=15), lineno=86, col_offset=8)], [Return(Tuple([BinOp(Subscript(Name('intpart', Load(), lineno=88, col_offset=15), Slice(None, Name('digs', Load(), lineno=88, col_offset=24), None), Load(), lineno=88, col_offset=15), Add(), BinOp(Str('0', lineno=88, col_offset=32), Mult(), UnaryOp(USub(), Name('digs', Load(), lineno=88, col_offset=37), lineno=88, col_offset=36), lineno=88, col_offset=32), lineno=88, col_offset=15), Str('', lineno=88, col_offset=43)], Load(), lineno=88, col_offset=15), lineno=88, col_offset=8)], lineno=85, col_offset=4)], [], lineno=64, col_offset=0), FunctionDef('fix', arguments([Name('x', Param(), lineno=90, col_offset=8), Name('digs', Param(), lineno=90, col_offset=11)], None, None, []), [Expr(Str("Format x as [-]ddd.ddd with 'digs' digits after the point\n    and at least one digit before.\n    If digs <= 0, the point is suppressed.", lineno=93, col_offset=-1), lineno=93, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=94, col_offset=7), [Name('x', Load(), lineno=94, col_offset=12)], [], None, None, lineno=94, col_offset=7), [NotEq()], [Call(Name('type', Load(), lineno=94, col_offset=18), [Str('', lineno=94, col_offset=23)], [], None, None, lineno=94, col_offset=18)], lineno=94, col_offset=7), [Assign([Name('x', Store(), lineno=94, col_offset=28)], Call(Name('repr', Load(), lineno=94, col_offset=32), [Name('x', Load(), lineno=94, col_offset=37)], [], None, None, lineno=94, col_offset=32), lineno=94, col_offset=28)], [], lineno=94, col_offset=4), TryExcept([Assign([Tuple([Name('sign', Store(), lineno=96, col_offset=8), Name('intpart', Store(), lineno=96, col_offset=14), Name('fraction', Store(), lineno=96, col_offset=23), Name('expo', Store(), lineno=96, col_offset=33)], Store(), lineno=96, col_offset=8)], Call(Name('extract', Load(), lineno=96, col_offset=40), [Name('x', Load(), lineno=96, col_offset=48)], [], None, None, lineno=96, col_offset=40), lineno=96, col_offset=8)], [ExceptHandler(Name('NotANumber', Load(), lineno=97, col_offset=11), None, [Return(Name('x', Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], lineno=97, col_offset=4)], [], lineno=95, col_offset=4), Assign([Tuple([Name('intpart', Store(), lineno=99, col_offset=4), Name('fraction', Store(), lineno=99, col_offset=13)], Store(), lineno=99, col_offset=4)], Call(Name('unexpo', Load(), lineno=99, col_offset=24), [Name('intpart', Load(), lineno=99, col_offset=31), Name('fraction', Load(), lineno=99, col_offset=40), Name('expo', Load(), lineno=99, col_offset=50)], [], None, None, lineno=99, col_offset=24), lineno=99, col_offset=4), Assign([Tuple([Name('intpart', Store(), lineno=100, col_offset=4), Name('fraction', Store(), lineno=100, col_offset=13)], Store(), lineno=100, col_offset=4)], Call(Name('roundfrac', Load(), lineno=100, col_offset=24), [Name('intpart', Load(), lineno=100, col_offset=34), Name('fraction', Load(), lineno=100, col_offset=43), Name('digs', Load(), lineno=100, col_offset=53)], [], None, None, lineno=100, col_offset=24), lineno=100, col_offset=4), While(BoolOp(And(), [Name('intpart', Load(), lineno=101, col_offset=10), Compare(Subscript(Name('intpart', Load(), lineno=101, col_offset=22), Index(Num(0, lineno=101, col_offset=30)), Load(), lineno=101, col_offset=22), [Eq()], [Str('0', lineno=101, col_offset=36)], lineno=101, col_offset=22)], lineno=101, col_offset=10), [Assign([Name('intpart', Store(), lineno=101, col_offset=41)], Subscript(Name('intpart', Load(), lineno=101, col_offset=51), Slice(Num(1, lineno=101, col_offset=59), None, None), Load(), lineno=101, col_offset=51), lineno=101, col_offset=41)], [], lineno=101, col_offset=4), If(Compare(Name('intpart', Load(), lineno=102, col_offset=7), [Eq()], [Str('', lineno=102, col_offset=18)], lineno=102, col_offset=7), [Assign([Name('intpart', Store(), lineno=102, col_offset=22)], Str('0', lineno=102, col_offset=32), lineno=102, col_offset=22)], [], lineno=102, col_offset=4), If(Compare(Name('digs', Load(), lineno=103, col_offset=7), [Gt()], [Num(0, lineno=103, col_offset=14)], lineno=103, col_offset=7), [Return(BinOp(BinOp(BinOp(Name('sign', Load(), lineno=103, col_offset=24), Add(), Name('intpart', Load(), lineno=103, col_offset=31), lineno=103, col_offset=24), Add(), Str('.', lineno=103, col_offset=41), lineno=103, col_offset=39), Add(), Name('fraction', Load(), lineno=103, col_offset=47), lineno=103, col_offset=45), lineno=103, col_offset=17)], [Return(BinOp(Name('sign', Load(), lineno=104, col_offset=17), Add(), Name('intpart', Load(), lineno=104, col_offset=24), lineno=104, col_offset=17), lineno=104, col_offset=10)], lineno=103, col_offset=4)], [], lineno=90, col_offset=0), FunctionDef('sci', arguments([Name('x', Param(), lineno=106, col_offset=8), Name('digs', Param(), lineno=106, col_offset=11)], None, None, []), [Expr(Str("Format x as [-]d.dddE[+-]ddd with 'digs' digits after the point\n    and exactly one digit before.\n    If digs is <= 0, one digit is kept and the point is suppressed.", lineno=109, col_offset=-1), lineno=109, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=110, col_offset=7), [Name('x', Load(), lineno=110, col_offset=12)], [], None, None, lineno=110, col_offset=7), [NotEq()], [Call(Name('type', Load(), lineno=110, col_offset=18), [Str('', lineno=110, col_offset=23)], [], None, None, lineno=110, col_offset=18)], lineno=110, col_offset=7), [Assign([Name('x', Store(), lineno=110, col_offset=28)], Call(Name('repr', Load(), lineno=110, col_offset=32), [Name('x', Load(), lineno=110, col_offset=37)], [], None, None, lineno=110, col_offset=32), lineno=110, col_offset=28)], [], lineno=110, col_offset=4), Assign([Tuple([Name('sign', Store(), lineno=111, col_offset=4), Name('intpart', Store(), lineno=111, col_offset=10), Name('fraction', Store(), lineno=111, col_offset=19), Name('expo', Store(), lineno=111, col_offset=29)], Store(), lineno=111, col_offset=4)], Call(Name('extract', Load(), lineno=111, col_offset=36), [Name('x', Load(), lineno=111, col_offset=44)], [], None, None, lineno=111, col_offset=36), lineno=111, col_offset=4), If(UnaryOp(Not(), Name('intpart', Load(), lineno=112, col_offset=11), lineno=112, col_offset=7), [While(BoolOp(And(), [Name('fraction', Load(), lineno=113, col_offset=14), Compare(Subscript(Name('fraction', Load(), lineno=113, col_offset=27), Index(Num(0, lineno=113, col_offset=36)), Load(), lineno=113, col_offset=27), [Eq()], [Str('0', lineno=113, col_offset=42)], lineno=113, col_offset=27)], lineno=113, col_offset=14), [Assign([Name('fraction', Store(), lineno=114, col_offset=12)], Subscript(Name('fraction', Load(), lineno=114, col_offset=23), Slice(Num(1, lineno=114, col_offset=32), None, None), Load(), lineno=114, col_offset=23), lineno=114, col_offset=12), Assign([Name('expo', Store(), lineno=115, col_offset=12)], BinOp(Name('expo', Load(), lineno=115, col_offset=19), Sub(), Num(1, lineno=115, col_offset=26), lineno=115, col_offset=19), lineno=115, col_offset=12)], [], lineno=113, col_offset=8), If(Name('fraction', Load(), lineno=116, col_offset=11), [Assign([Tuple([Name('intpart', Store(), lineno=117, col_offset=12), Name('fraction', Store(), lineno=117, col_offset=21)], Store(), lineno=117, col_offset=12)], Tuple([Subscript(Name('fraction', Load(), lineno=117, col_offset=32), Index(Num(0, lineno=117, col_offset=41)), Load(), lineno=117, col_offset=32), Subscript(Name('fraction', Load(), lineno=117, col_offset=45), Slice(Num(1, lineno=117, col_offset=54), None, None), Load(), lineno=117, col_offset=45)], Load(), lineno=117, col_offset=32), lineno=117, col_offset=12), Assign([Name('expo', Store(), lineno=118, col_offset=12)], BinOp(Name('expo', Load(), lineno=118, col_offset=19), Sub(), Num(1, lineno=118, col_offset=26), lineno=118, col_offset=19), lineno=118, col_offset=12)], [Assign([Name('intpart', Store(), lineno=120, col_offset=12)], Str('0', lineno=120, col_offset=22), lineno=120, col_offset=12)], lineno=116, col_offset=8)], [Assign([Name('expo', Store(), lineno=122, col_offset=8)], BinOp(BinOp(Name('expo', Load(), lineno=122, col_offset=15), Add(), Call(Name('len', Load(), lineno=122, col_offset=22), [Name('intpart', Load(), lineno=122, col_offset=26)], [], None, None, lineno=122, col_offset=22), lineno=122, col_offset=15), Sub(), Num(1, lineno=122, col_offset=37), lineno=122, col_offset=35), lineno=122, col_offset=8), Assign([Tuple([Name('intpart', Store(), lineno=123, col_offset=8), Name('fraction', Store(), lineno=123, col_offset=17)], Store(), lineno=123, col_offset=8)], Tuple([Subscript(Name('intpart', Load(), lineno=123, col_offset=28), Index(Num(0, lineno=123, col_offset=36)), Load(), lineno=123, col_offset=28), BinOp(Subscript(Name('intpart', Load(), lineno=123, col_offset=40), Slice(Num(1, lineno=123, col_offset=48), None, None), Load(), lineno=123, col_offset=40), Add(), Name('fraction', Load(), lineno=123, col_offset=54), lineno=123, col_offset=40)], Load(), lineno=123, col_offset=28), lineno=123, col_offset=8)], lineno=112, col_offset=4), Assign([Name('digs', Store(), lineno=124, col_offset=4)], Call(Name('max', Load(), lineno=124, col_offset=11), [Num(0, lineno=124, col_offset=15), Name('digs', Load(), lineno=124, col_offset=18)], [], None, None, lineno=124, col_offset=11), lineno=124, col_offset=4), Assign([Tuple([Name('intpart', Store(), lineno=125, col_offset=4), Name('fraction', Store(), lineno=125, col_offset=13)], Store(), lineno=125, col_offset=4)], Call(Name('roundfrac', Load(), lineno=125, col_offset=24), [Name('intpart', Load(), lineno=125, col_offset=34), Name('fraction', Load(), lineno=125, col_offset=43), Name('digs', Load(), lineno=125, col_offset=53)], [], None, None, lineno=125, col_offset=24), lineno=125, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=126, col_offset=7), [Name('intpart', Load(), lineno=126, col_offset=11)], [], None, None, lineno=126, col_offset=7), [Gt()], [Num(1, lineno=126, col_offset=22)], lineno=126, col_offset=7), [Assign([Tuple([Name('intpart', Store(), lineno=127, col_offset=8), Name('fraction', Store(), lineno=127, col_offset=17), Name('expo', Store(), lineno=127, col_offset=27)], Store(), lineno=127, col_offset=8)], Tuple([Subscript(Name('intpart', Load(), lineno=128, col_offset=12), Index(Num(0, lineno=128, col_offset=20)), Load(), lineno=128, col_offset=12), BinOp(Subscript(Name('intpart', Load(), lineno=128, col_offset=24), Slice(Num(1, lineno=128, col_offset=32), None, None), Load(), lineno=128, col_offset=24), Add(), Subscript(Name('fraction', Load(), lineno=128, col_offset=38), Slice(None, Num(-1, lineno=128, col_offset=49), None), Load(), lineno=128, col_offset=38), lineno=128, col_offset=24), BinOp(BinOp(Name('expo', Load(), lineno=129, col_offset=12), Add(), Call(Name('len', Load(), lineno=129, col_offset=19), [Name('intpart', Load(), lineno=129, col_offset=23)], [], None, None, lineno=129, col_offset=19), lineno=129, col_offset=12), Sub(), Num(1, lineno=129, col_offset=34), lineno=129, col_offset=32)], Load(), lineno=128, col_offset=12), lineno=127, col_offset=8)], [], lineno=126, col_offset=4), Assign([Name('s', Store(), lineno=130, col_offset=4)], BinOp(Name('sign', Load(), lineno=130, col_offset=8), Add(), Name('intpart', Load(), lineno=130, col_offset=15), lineno=130, col_offset=8), lineno=130, col_offset=4), If(Compare(Name('digs', Load(), lineno=131, col_offset=7), [Gt()], [Num(0, lineno=131, col_offset=14)], lineno=131, col_offset=7), [Assign([Name('s', Store(), lineno=131, col_offset=17)], BinOp(BinOp(Name('s', Load(), lineno=131, col_offset=21), Add(), Str('.', lineno=131, col_offset=25), lineno=131, col_offset=21), Add(), Name('fraction', Load(), lineno=131, col_offset=31), lineno=131, col_offset=29), lineno=131, col_offset=17)], [], lineno=131, col_offset=4), Assign([Name('e', Store(), lineno=132, col_offset=4)], Call(Name('repr', Load(), lineno=132, col_offset=8), [Call(Name('abs', Load(), lineno=132, col_offset=13), [Name('expo', Load(), lineno=132, col_offset=17)], [], None, None, lineno=132, col_offset=13)], [], None, None, lineno=132, col_offset=8), lineno=132, col_offset=4), Assign([Name('e', Store(), lineno=133, col_offset=4)], BinOp(BinOp(Str('0', lineno=133, col_offset=8), Mult(), BinOp(Num(3, lineno=133, col_offset=13), Sub(), Call(Name('len', Load(), lineno=133, col_offset=15), [Name('e', Load(), lineno=133, col_offset=19)], [], None, None, lineno=133, col_offset=15), lineno=133, col_offset=13), lineno=133, col_offset=8), Add(), Name('e', Load(), lineno=133, col_offset=25), lineno=133, col_offset=8), lineno=133, col_offset=4), If(Compare(Name('expo', Load(), lineno=134, col_offset=7), [Lt()], [Num(0, lineno=134, col_offset=14)], lineno=134, col_offset=7), [Assign([Name('e', Store(), lineno=134, col_offset=17)], BinOp(Str('-', lineno=134, col_offset=21), Add(), Name('e', Load(), lineno=134, col_offset=27), lineno=134, col_offset=21), lineno=134, col_offset=17)], [Assign([Name('e', Store(), lineno=135, col_offset=10)], BinOp(Str('+', lineno=135, col_offset=14), Add(), Name('e', Load(), lineno=135, col_offset=20), lineno=135, col_offset=14), lineno=135, col_offset=10)], lineno=134, col_offset=4), Return(BinOp(BinOp(Name('s', Load(), lineno=136, col_offset=11), Add(), Str('e', lineno=136, col_offset=15), lineno=136, col_offset=11), Add(), Name('e', Load(), lineno=136, col_offset=21), lineno=136, col_offset=19), lineno=136, col_offset=4)], [], lineno=106, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Expr(Str('Interactive test run.', lineno=139, col_offset=4), lineno=139, col_offset=4), TryExcept([While(Num(1, lineno=141, col_offset=14), [Assign([Tuple([Name('x', Store(), lineno=142, col_offset=12), Name('digs', Store(), lineno=142, col_offset=15)], Store(), lineno=142, col_offset=12)], Call(Name('input', Load(), lineno=142, col_offset=22), [Str('Enter (x, digs): ', lineno=142, col_offset=28)], [], None, None, lineno=142, col_offset=22), lineno=142, col_offset=12), Print(None, [Name('x', Load(), lineno=143, col_offset=18), Call(Name('fix', Load(), lineno=143, col_offset=21), [Name('x', Load(), lineno=143, col_offset=25), Name('digs', Load(), lineno=143, col_offset=28)], [], None, None, lineno=143, col_offset=21), Call(Name('sci', Load(), lineno=143, col_offset=35), [Name('x', Load(), lineno=143, col_offset=39), Name('digs', Load(), lineno=143, col_offset=42)], [], None, None, lineno=143, col_offset=35)], True, lineno=143, col_offset=12)], [], lineno=141, col_offset=8)], [ExceptHandler(Tuple([Name('EOFError', Load(), lineno=144, col_offset=12), Name('KeyboardInterrupt', Load(), lineno=144, col_offset=22)], Load(), lineno=144, col_offset=12), None, [Pass( lineno=145, col_offset=8)], lineno=144, col_offset=4)], [], lineno=140, col_offset=4)], [], lineno=138, col_offset=0)])
