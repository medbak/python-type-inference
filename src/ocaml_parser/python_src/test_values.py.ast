Module([Expr(Str('\nA testcase which accesses *values* in a dll.\n', lineno=3, col_offset=-1), lineno=3, col_offset=-1), Import([alias('unittest', None)], lineno=5, col_offset=0), ImportFrom('ctypes', [alias('*', None)], 0, lineno=6, col_offset=0), Import([alias('_ctypes_test', None)], lineno=8, col_offset=0), ClassDef('ValuesTestCase', [Attribute(Name('unittest', Load(), lineno=10, col_offset=21), 'TestCase', Load(), lineno=10, col_offset=21)], [FunctionDef('test_an_integer', arguments([Name('self', Param(), lineno=12, col_offset=24)], None, None, []), [Assign([Name('ctdll', Store(), lineno=13, col_offset=8)], Call(Name('CDLL', Load(), lineno=13, col_offset=16), [Attribute(Name('_ctypes_test', Load(), lineno=13, col_offset=21), '__file__', Load(), lineno=13, col_offset=21)], [], None, None, lineno=13, col_offset=16), lineno=13, col_offset=8), Assign([Name('an_integer', Store(), lineno=14, col_offset=8)], Call(Attribute(Name('c_int', Load(), lineno=14, col_offset=21), 'in_dll', Load(), lineno=14, col_offset=21), [Name('ctdll', Load(), lineno=14, col_offset=34), Str('an_integer', lineno=14, col_offset=41)], [], None, None, lineno=14, col_offset=21), lineno=14, col_offset=8), Assign([Name('x', Store(), lineno=15, col_offset=8)], Attribute(Name('an_integer', Load(), lineno=15, col_offset=12), 'value', Load(), lineno=15, col_offset=12), lineno=15, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=8), 'assertEqual', Load(), lineno=16, col_offset=8), [Name('x', Load(), lineno=16, col_offset=25), Call(Attribute(Name('ctdll', Load(), lineno=16, col_offset=28), 'get_an_integer', Load(), lineno=16, col_offset=28), [], [], None, None, lineno=16, col_offset=28)], [], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8), AugAssign(Attribute(Name('an_integer', Load(), lineno=17, col_offset=8), 'value', Store(), lineno=17, col_offset=8), Mult(), Num(2, lineno=17, col_offset=28), lineno=17, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=18, col_offset=8), 'assertEqual', Load(), lineno=18, col_offset=8), [BinOp(Name('x', Load(), lineno=18, col_offset=25), Mult(), Num(2, lineno=18, col_offset=27), lineno=18, col_offset=25), Call(Attribute(Name('ctdll', Load(), lineno=18, col_offset=30), 'get_an_integer', Load(), lineno=18, col_offset=30), [], [], None, None, lineno=18, col_offset=30)], [], None, None, lineno=18, col_offset=8), lineno=18, col_offset=8)], [], lineno=12, col_offset=4), FunctionDef('test_undefined', arguments([Name('self', Param(), lineno=20, col_offset=23)], None, None, []), [Assign([Name('ctdll', Store(), lineno=21, col_offset=8)], Call(Name('CDLL', Load(), lineno=21, col_offset=16), [Attribute(Name('_ctypes_test', Load(), lineno=21, col_offset=21), '__file__', Load(), lineno=21, col_offset=21)], [], None, None, lineno=21, col_offset=16), lineno=21, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=22, col_offset=8), 'assertRaises', Load(), lineno=22, col_offset=8), [Name('ValueError', Load(), lineno=22, col_offset=26), Attribute(Name('c_int', Load(), lineno=22, col_offset=38), 'in_dll', Load(), lineno=22, col_offset=38), Name('ctdll', Load(), lineno=22, col_offset=52), Str('Undefined_Symbol', lineno=22, col_offset=59)], [], None, None, lineno=22, col_offset=8), lineno=22, col_offset=8)], [], lineno=20, col_offset=4), ClassDef('Win_ValuesTestCase', [Attribute(Name('unittest', Load(), lineno=24, col_offset=29), 'TestCase', Load(), lineno=24, col_offset=29)], [Expr(Str('This test only works when python itself is a dll/shared library', lineno=25, col_offset=8), lineno=25, col_offset=8), FunctionDef('test_optimizeflag', arguments([Name('self', Param(), lineno=27, col_offset=30)], None, None, []), [Assign([Name('opt', Store(), lineno=35, col_offset=12)], Attribute(Call(Attribute(Name('c_int', Load(), lineno=35, col_offset=18), 'in_dll', Load(), lineno=35, col_offset=18), [Name('pydll', Load(), lineno=35, col_offset=31), Str('Py_OptimizeFlag', lineno=35, col_offset=38)], [], None, None, lineno=35, col_offset=18), 'value', Load(), lineno=35, col_offset=18), lineno=35, col_offset=12), If(Name('__debug__', Load(), lineno=36, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=16), 'assertEqual', Load(), lineno=37, col_offset=16), [Name('opt', Load(), lineno=37, col_offset=33), Num(0, lineno=37, col_offset=38)], [], None, None, lineno=37, col_offset=16), lineno=37, col_offset=16)], [If(Compare(Attribute(Name('ValuesTestCase', Load(), lineno=38, col_offset=17), '__doc__', Load(), lineno=38, col_offset=17), [IsNot()], [Name('None', Load(), lineno=38, col_offset=47)], lineno=38, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=16), 'assertEqual', Load(), lineno=39, col_offset=16), [Name('opt', Load(), lineno=39, col_offset=33), Num(1, lineno=39, col_offset=38)], [], None, None, lineno=39, col_offset=16), lineno=39, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=41, col_offset=16), 'assertEqual', Load(), lineno=41, col_offset=16), [Name('opt', Load(), lineno=41, col_offset=33), Num(2, lineno=41, col_offset=38)], [], None, None, lineno=41, col_offset=16), lineno=41, col_offset=16)], lineno=38, col_offset=17)], lineno=36, col_offset=12)], [], lineno=27, col_offset=8), FunctionDef('test_frozentable', arguments([Name('self', Param(), lineno=43, col_offset=29)], None, None, []), [ClassDef('struct_frozen', [Name('Structure', Load(), lineno=52, col_offset=32)], [Assign([Name('_fields_', Store(), lineno=53, col_offset=16)], List([Tuple([Str('name', lineno=53, col_offset=29), Name('c_char_p', Load(), lineno=53, col_offset=37)], Load(), lineno=53, col_offset=29), Tuple([Str('code', lineno=54, col_offset=29), Call(Name('POINTER', Load(), lineno=54, col_offset=37), [Name('c_ubyte', Load(), lineno=54, col_offset=45)], [], None, None, lineno=54, col_offset=37)], Load(), lineno=54, col_offset=29), Tuple([Str('size', lineno=55, col_offset=29), Name('c_int', Load(), lineno=55, col_offset=37)], Load(), lineno=55, col_offset=29)], Load(), lineno=53, col_offset=27), lineno=53, col_offset=16)], [], lineno=52, col_offset=12), Assign([Name('FrozenTable', Store(), lineno=56, col_offset=12)], Call(Name('POINTER', Load(), lineno=56, col_offset=26), [Name('struct_frozen', Load(), lineno=56, col_offset=34)], [], None, None, lineno=56, col_offset=26), lineno=56, col_offset=12), Assign([Name('ft', Store(), lineno=58, col_offset=12)], Call(Attribute(Name('FrozenTable', Load(), lineno=58, col_offset=17), 'in_dll', Load(), lineno=58, col_offset=17), [Name('pydll', Load(), lineno=58, col_offset=36), Str('PyImport_FrozenModules', lineno=58, col_offset=43)], [], None, None, lineno=58, col_offset=17), lineno=58, col_offset=12), Assign([Name('items', Store(), lineno=60, col_offset=12)], List([], Load(), lineno=60, col_offset=20), lineno=60, col_offset=12), For(Name('entry', Store(), lineno=61, col_offset=16), Name('ft', Load(), lineno=61, col_offset=25), [If(Compare(Attribute(Name('entry', Load(), lineno=65, col_offset=19), 'name', Load(), lineno=65, col_offset=19), [Is()], [Name('None', Load(), lineno=65, col_offset=33)], lineno=65, col_offset=19), [Break( lineno=66, col_offset=20)], [], lineno=65, col_offset=16), Expr(Call(Attribute(Name('items', Load(), lineno=67, col_offset=16), 'append', Load(), lineno=67, col_offset=16), [Tuple([Attribute(Name('entry', Load(), lineno=67, col_offset=30), 'name', Load(), lineno=67, col_offset=30), Attribute(Name('entry', Load(), lineno=67, col_offset=42), 'size', Load(), lineno=67, col_offset=42)], Load(), lineno=67, col_offset=30)], [], None, None, lineno=67, col_offset=16), lineno=67, col_offset=16)], [], lineno=61, col_offset=12), Import([alias('sys', None)], lineno=68, col_offset=12), If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=69, col_offset=15), 'version_info', Load(), lineno=69, col_offset=15), Slice(None, Num(2, lineno=69, col_offset=33), None), Load(), lineno=69, col_offset=15), [GtE()], [Tuple([Num(2, lineno=69, col_offset=40), Num(3, lineno=69, col_offset=43)], Load(), lineno=69, col_offset=40)], lineno=69, col_offset=15), [Assign([Name('expected', Store(), lineno=70, col_offset=16)], List([Tuple([Str('__hello__', lineno=70, col_offset=29), Num(104, lineno=70, col_offset=42)], Load(), lineno=70, col_offset=29), Tuple([Str('__phello__', lineno=70, col_offset=49), Num(-104, lineno=70, col_offset=64)], Load(), lineno=70, col_offset=49), Tuple([Str('__phello__.spam', lineno=70, col_offset=71), Num(104, lineno=70, col_offset=90)], Load(), lineno=70, col_offset=71)], Load(), lineno=70, col_offset=27), lineno=70, col_offset=16)], [Assign([Name('expected', Store(), lineno=72, col_offset=16)], List([Tuple([Str('__hello__', lineno=72, col_offset=29), Num(100, lineno=72, col_offset=42)], Load(), lineno=72, col_offset=29), Tuple([Str('__phello__', lineno=72, col_offset=49), Num(-100, lineno=72, col_offset=64)], Load(), lineno=72, col_offset=49), Tuple([Str('__phello__.spam', lineno=72, col_offset=71), Num(100, lineno=72, col_offset=90)], Load(), lineno=72, col_offset=71)], Load(), lineno=72, col_offset=27), lineno=72, col_offset=16)], lineno=69, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=12), 'assertEqual', Load(), lineno=73, col_offset=12), [Name('items', Load(), lineno=73, col_offset=29), Name('expected', Load(), lineno=73, col_offset=36)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12), ImportFrom('ctypes', [alias('_pointer_type_cache', None)], 0, lineno=75, col_offset=12), Delete([Subscript(Name('_pointer_type_cache', Load(), lineno=76, col_offset=16), Index(Name('struct_frozen', Load(), lineno=76, col_offset=36)), Del(), lineno=76, col_offset=16)], lineno=76, col_offset=12)], [], lineno=43, col_offset=8), FunctionDef('test_undefined', arguments([Name('self', Param(), lineno=78, col_offset=27)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=79, col_offset=12), 'assertRaises', Load(), lineno=79, col_offset=12), [Name('ValueError', Load(), lineno=79, col_offset=30), Attribute(Name('c_int', Load(), lineno=79, col_offset=42), 'in_dll', Load(), lineno=79, col_offset=42), Name('pydll', Load(), lineno=79, col_offset=56), Str('Undefined_Symbol', lineno=79, col_offset=63)], [], None, None, lineno=79, col_offset=12), lineno=79, col_offset=12)], [], lineno=78, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=10, col_offset=0), If(Compare(Name('__name__', Load(), lineno=81, col_offset=3), [Eq()], [Str('__main__', lineno=81, col_offset=15)], lineno=81, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=82, col_offset=4), 'main', Load(), lineno=82, col_offset=4), [], [], None, None, lineno=82, col_offset=4), lineno=82, col_offset=4)], [], lineno=81, col_offset=0)])
