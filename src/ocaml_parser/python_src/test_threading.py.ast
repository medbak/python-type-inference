Module([Import([alias('test.test_support', None)], lineno=3, col_offset=0), ImportFrom('test.test_support', [alias('verbose', None)], 0, lineno=4, col_offset=0), Import([alias('random', None)], lineno=5, col_offset=0), Import([alias('re', None)], lineno=6, col_offset=0), Import([alias('sys', None)], lineno=7, col_offset=0), Assign([Name('thread', Store(), lineno=8, col_offset=0)], Call(Attribute(Attribute(Name('test', Load(), lineno=8, col_offset=9), 'test_support', Load(), lineno=8, col_offset=9), 'import_module', Load(), lineno=8, col_offset=9), [Str('thread', lineno=8, col_offset=41)], [], None, None, lineno=8, col_offset=9), lineno=8, col_offset=0), Assign([Name('threading', Store(), lineno=9, col_offset=0)], Call(Attribute(Attribute(Name('test', Load(), lineno=9, col_offset=12), 'test_support', Load(), lineno=9, col_offset=12), 'import_module', Load(), lineno=9, col_offset=12), [Str('threading', lineno=9, col_offset=44)], [], None, None, lineno=9, col_offset=12), lineno=9, col_offset=0), Import([alias('time', None)], lineno=10, col_offset=0), Import([alias('unittest', None)], lineno=11, col_offset=0), Import([alias('weakref', None)], lineno=12, col_offset=0), ImportFrom('test', [alias('lock_tests', None)], 0, lineno=14, col_offset=0), ClassDef('Counter', [Name('object', Load(), lineno=17, col_offset=14)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=18, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=19, col_offset=8), 'value', Store(), lineno=19, col_offset=8)], Num(0, lineno=19, col_offset=21), lineno=19, col_offset=8)], [], lineno=18, col_offset=4), FunctionDef('inc', arguments([Name('self', Param(), lineno=20, col_offset=12)], None, None, []), [AugAssign(Attribute(Name('self', Load(), lineno=21, col_offset=8), 'value', Store(), lineno=21, col_offset=8), Add(), Num(1, lineno=21, col_offset=22), lineno=21, col_offset=8)], [], lineno=20, col_offset=4), FunctionDef('dec', arguments([Name('self', Param(), lineno=22, col_offset=12)], None, None, []), [AugAssign(Attribute(Name('self', Load(), lineno=23, col_offset=8), 'value', Store(), lineno=23, col_offset=8), Sub(), Num(1, lineno=23, col_offset=22), lineno=23, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=24, col_offset=12)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=25, col_offset=15), 'value', Load(), lineno=25, col_offset=15), lineno=25, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=17, col_offset=0), ClassDef('TestThread', [Attribute(Name('threading', Load(), lineno=27, col_offset=17), 'Thread', Load(), lineno=27, col_offset=17)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=28, col_offset=17), Name('name', Param(), lineno=28, col_offset=23), Name('testcase', Param(), lineno=28, col_offset=29), Name('sema', Param(), lineno=28, col_offset=39), Name('mutex', Param(), lineno=28, col_offset=45), Name('nrunning', Param(), lineno=28, col_offset=52)], None, None, []), [Expr(Call(Attribute(Attribute(Name('threading', Load(), lineno=29, col_offset=8), 'Thread', Load(), lineno=29, col_offset=8), '__init__', Load(), lineno=29, col_offset=8), [Name('self', Load(), lineno=29, col_offset=34)], [keyword('name', Name('name', Load(), lineno=29, col_offset=45))], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=30, col_offset=8), 'testcase', Store(), lineno=30, col_offset=8)], Name('testcase', Load(), lineno=30, col_offset=24), lineno=30, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=31, col_offset=8), 'sema', Store(), lineno=31, col_offset=8)], Name('sema', Load(), lineno=31, col_offset=20), lineno=31, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=32, col_offset=8), 'mutex', Store(), lineno=32, col_offset=8)], Name('mutex', Load(), lineno=32, col_offset=21), lineno=32, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'nrunning', Store(), lineno=33, col_offset=8)], Name('nrunning', Load(), lineno=33, col_offset=24), lineno=33, col_offset=8)], [], lineno=28, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=35, col_offset=12)], None, None, []), [Assign([Name('delay', Store(), lineno=36, col_offset=8)], BinOp(Call(Attribute(Name('random', Load(), lineno=36, col_offset=16), 'random', Load(), lineno=36, col_offset=16), [], [], None, None, lineno=36, col_offset=16), Div(), Num(10000.0, lineno=36, col_offset=34), lineno=36, col_offset=16), lineno=36, col_offset=8), If(Name('verbose', Load(), lineno=37, col_offset=11), [Print(None, [BinOp(Str('task %s will run for %.1f usec', lineno=38, col_offset=18), Mod(), Tuple([Attribute(Name('self', Load(), lineno=39, col_offset=16), 'name', Load(), lineno=39, col_offset=16), BinOp(Name('delay', Load(), lineno=39, col_offset=27), Mult(), Num(1000000.0, lineno=39, col_offset=35), lineno=39, col_offset=27)], Load(), lineno=39, col_offset=16), lineno=38, col_offset=18)], True, lineno=38, col_offset=12)], [], lineno=37, col_offset=8), With(Attribute(Name('self', Load(), lineno=41, col_offset=13), 'sema', Load(), lineno=41, col_offset=13), None, [With(Attribute(Name('self', Load(), lineno=42, col_offset=17), 'mutex', Load(), lineno=42, col_offset=17), None, [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=43, col_offset=16), 'nrunning', Load(), lineno=43, col_offset=16), 'inc', Load(), lineno=43, col_offset=16), [], [], None, None, lineno=43, col_offset=16), lineno=43, col_offset=16), If(Name('verbose', Load(), lineno=44, col_offset=19), [Print(None, [Call(Attribute(Attribute(Name('self', Load(), lineno=45, col_offset=26), 'nrunning', Load(), lineno=45, col_offset=26), 'get', Load(), lineno=45, col_offset=26), [], [], None, None, lineno=45, col_offset=26), Str('tasks are running', lineno=45, col_offset=47)], True, lineno=45, col_offset=20)], [], lineno=44, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=46, col_offset=16), 'testcase', Load(), lineno=46, col_offset=16), 'assertTrue', Load(), lineno=46, col_offset=16), [Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=46, col_offset=41), 'nrunning', Load(), lineno=46, col_offset=41), 'get', Load(), lineno=46, col_offset=41), [], [], None, None, lineno=46, col_offset=41), [LtE()], [Num(3, lineno=46, col_offset=64)], lineno=46, col_offset=41)], [], None, None, lineno=46, col_offset=16), lineno=46, col_offset=16)], lineno=42, col_offset=17), Expr(Call(Attribute(Name('time', Load(), lineno=48, col_offset=12), 'sleep', Load(), lineno=48, col_offset=12), [Name('delay', Load(), lineno=48, col_offset=23)], [], None, None, lineno=48, col_offset=12), lineno=48, col_offset=12), If(Name('verbose', Load(), lineno=49, col_offset=15), [Print(None, [Str('task', lineno=50, col_offset=22), Attribute(Name('self', Load(), lineno=50, col_offset=30), 'name', Load(), lineno=50, col_offset=30), Str('done', lineno=50, col_offset=41)], True, lineno=50, col_offset=16)], [], lineno=49, col_offset=12), With(Attribute(Name('self', Load(), lineno=52, col_offset=17), 'mutex', Load(), lineno=52, col_offset=17), None, [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=53, col_offset=16), 'nrunning', Load(), lineno=53, col_offset=16), 'dec', Load(), lineno=53, col_offset=16), [], [], None, None, lineno=53, col_offset=16), lineno=53, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=54, col_offset=16), 'testcase', Load(), lineno=54, col_offset=16), 'assertTrue', Load(), lineno=54, col_offset=16), [Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=54, col_offset=41), 'nrunning', Load(), lineno=54, col_offset=41), 'get', Load(), lineno=54, col_offset=41), [], [], None, None, lineno=54, col_offset=41), [GtE()], [Num(0, lineno=54, col_offset=64)], lineno=54, col_offset=41)], [], None, None, lineno=54, col_offset=16), lineno=54, col_offset=16), If(Name('verbose', Load(), lineno=55, col_offset=19), [Print(None, [BinOp(Str('%s is finished. %d tasks are running', lineno=56, col_offset=26), Mod(), Tuple([Attribute(Name('self', Load(), lineno=57, col_offset=24), 'name', Load(), lineno=57, col_offset=24), Call(Attribute(Attribute(Name('self', Load(), lineno=57, col_offset=35), 'nrunning', Load(), lineno=57, col_offset=35), 'get', Load(), lineno=57, col_offset=35), [], [], None, None, lineno=57, col_offset=35)], Load(), lineno=57, col_offset=24), lineno=56, col_offset=26)], True, lineno=56, col_offset=20)], [], lineno=55, col_offset=16)], lineno=52, col_offset=17)], lineno=41, col_offset=13)], [], lineno=35, col_offset=4)], [], lineno=27, col_offset=0), ClassDef('BaseTestCase', [Attribute(Name('unittest', Load(), lineno=59, col_offset=19), 'TestCase', Load(), lineno=59, col_offset=19)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=60, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), '_threads', Store(), lineno=61, col_offset=8)], Call(Attribute(Attribute(Name('test', Load(), lineno=61, col_offset=24), 'test_support', Load(), lineno=61, col_offset=24), 'threading_setup', Load(), lineno=61, col_offset=24), [], [], None, None, lineno=61, col_offset=24), lineno=61, col_offset=8)], [], lineno=60, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=63, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=64, col_offset=8), 'test_support', Load(), lineno=64, col_offset=8), 'threading_cleanup', Load(), lineno=64, col_offset=8), [], [], Attribute(Name('self', Load(), lineno=64, col_offset=45), '_threads', Load(), lineno=64, col_offset=45), None, lineno=64, col_offset=8), lineno=64, col_offset=8), Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=65, col_offset=8), 'test_support', Load(), lineno=65, col_offset=8), 'reap_children', Load(), lineno=65, col_offset=8), [], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8)], [], lineno=63, col_offset=4)], [], lineno=59, col_offset=0), ClassDef('ThreadTests', [Name('BaseTestCase', Load(), lineno=68, col_offset=18)], [FunctionDef('test_various_ops', arguments([Name('self', Param(), lineno=72, col_offset=25)], None, None, []), [Assign([Name('NUMTASKS', Store(), lineno=75, col_offset=8)], Num(10, lineno=75, col_offset=19), lineno=75, col_offset=8), Assign([Name('sema', Store(), lineno=78, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=78, col_offset=15), 'BoundedSemaphore', Load(), lineno=78, col_offset=15), [], [keyword('value', Num(3, lineno=78, col_offset=48))], None, None, lineno=78, col_offset=15), lineno=78, col_offset=8), Assign([Name('mutex', Store(), lineno=79, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=79, col_offset=16), 'RLock', Load(), lineno=79, col_offset=16), [], [], None, None, lineno=79, col_offset=16), lineno=79, col_offset=8), Assign([Name('numrunning', Store(), lineno=80, col_offset=8)], Call(Name('Counter', Load(), lineno=80, col_offset=21), [], [], None, None, lineno=80, col_offset=21), lineno=80, col_offset=8), Assign([Name('threads', Store(), lineno=82, col_offset=8)], List([], Load(), lineno=82, col_offset=18), lineno=82, col_offset=8), For(Name('i', Store(), lineno=84, col_offset=12), Call(Name('range', Load(), lineno=84, col_offset=17), [Name('NUMTASKS', Load(), lineno=84, col_offset=23)], [], None, None, lineno=84, col_offset=17), [Assign([Name('t', Store(), lineno=85, col_offset=12)], Call(Name('TestThread', Load(), lineno=85, col_offset=16), [BinOp(Str('<thread %d>', lineno=85, col_offset=27), Mod(), Name('i', Load(), lineno=85, col_offset=41), lineno=85, col_offset=27), Name('self', Load(), lineno=85, col_offset=44), Name('sema', Load(), lineno=85, col_offset=50), Name('mutex', Load(), lineno=85, col_offset=56), Name('numrunning', Load(), lineno=85, col_offset=63)], [], None, None, lineno=85, col_offset=16), lineno=85, col_offset=12), Expr(Call(Attribute(Name('threads', Load(), lineno=86, col_offset=12), 'append', Load(), lineno=86, col_offset=12), [Name('t', Load(), lineno=86, col_offset=27)], [], None, None, lineno=86, col_offset=12), lineno=86, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=87, col_offset=12), 'assertEqual', Load(), lineno=87, col_offset=12), [Attribute(Name('t', Load(), lineno=87, col_offset=29), 'ident', Load(), lineno=87, col_offset=29), Name('None', Load(), lineno=87, col_offset=38)], [], None, None, lineno=87, col_offset=12), lineno=87, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=12), 'assertTrue', Load(), lineno=88, col_offset=12), [Call(Attribute(Name('re', Load(), lineno=88, col_offset=28), 'match', Load(), lineno=88, col_offset=28), [Str('<TestThread\\(.*, initial\\)>', lineno=88, col_offset=37), Call(Name('repr', Load(), lineno=88, col_offset=68), [Name('t', Load(), lineno=88, col_offset=73)], [], None, None, lineno=88, col_offset=68)], [], None, None, lineno=88, col_offset=28)], [], None, None, lineno=88, col_offset=12), lineno=88, col_offset=12), Expr(Call(Attribute(Name('t', Load(), lineno=89, col_offset=12), 'start', Load(), lineno=89, col_offset=12), [], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=12)], [], lineno=84, col_offset=8), If(Name('verbose', Load(), lineno=91, col_offset=11), [Print(None, [Str('waiting for all tasks to complete', lineno=92, col_offset=18)], True, lineno=92, col_offset=12)], [], lineno=91, col_offset=8), For(Name('t', Store(), lineno=93, col_offset=12), Name('threads', Load(), lineno=93, col_offset=17), [Expr(Call(Attribute(Name('t', Load(), lineno=94, col_offset=12), 'join', Load(), lineno=94, col_offset=12), [Name('NUMTASKS', Load(), lineno=94, col_offset=19)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=12), 'assertTrue', Load(), lineno=95, col_offset=12), [UnaryOp(Not(), Call(Attribute(Name('t', Load(), lineno=95, col_offset=32), 'is_alive', Load(), lineno=95, col_offset=32), [], [], None, None, lineno=95, col_offset=32), lineno=95, col_offset=28)], [], None, None, lineno=95, col_offset=12), lineno=95, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=12), 'assertNotEqual', Load(), lineno=96, col_offset=12), [Attribute(Name('t', Load(), lineno=96, col_offset=32), 'ident', Load(), lineno=96, col_offset=32), Num(0, lineno=96, col_offset=41)], [], None, None, lineno=96, col_offset=12), lineno=96, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=12), 'assertFalse', Load(), lineno=97, col_offset=12), [Compare(Attribute(Name('t', Load(), lineno=97, col_offset=29), 'ident', Load(), lineno=97, col_offset=29), [Is()], [Name('None', Load(), lineno=97, col_offset=40)], lineno=97, col_offset=29)], [], None, None, lineno=97, col_offset=12), lineno=97, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=98, col_offset=12), 'assertTrue', Load(), lineno=98, col_offset=12), [Call(Attribute(Name('re', Load(), lineno=98, col_offset=28), 'match', Load(), lineno=98, col_offset=28), [Str('<TestThread\\(.*, \\w+ -?\\d+\\)>', lineno=98, col_offset=37), Call(Name('repr', Load(), lineno=98, col_offset=70), [Name('t', Load(), lineno=98, col_offset=75)], [], None, None, lineno=98, col_offset=70)], [], None, None, lineno=98, col_offset=28)], [], None, None, lineno=98, col_offset=12), lineno=98, col_offset=12)], [], lineno=93, col_offset=8), If(Name('verbose', Load(), lineno=99, col_offset=11), [Print(None, [Str('all tasks done', lineno=100, col_offset=18)], True, lineno=100, col_offset=12)], [], lineno=99, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=8), 'assertEqual', Load(), lineno=101, col_offset=8), [Call(Attribute(Name('numrunning', Load(), lineno=101, col_offset=25), 'get', Load(), lineno=101, col_offset=25), [], [], None, None, lineno=101, col_offset=25), Num(0, lineno=101, col_offset=43)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8)], [], lineno=72, col_offset=4), FunctionDef('test_ident_of_no_threading_threads', arguments([Name('self', Param(), lineno=103, col_offset=43)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=105, col_offset=8), 'assertFalse', Load(), lineno=105, col_offset=8), [Compare(Attribute(Call(Attribute(Name('threading', Load(), lineno=105, col_offset=25), 'currentThread', Load(), lineno=105, col_offset=25), [], [], None, None, lineno=105, col_offset=25), 'ident', Load(), lineno=105, col_offset=25), [Is()], [Name('None', Load(), lineno=105, col_offset=60)], lineno=105, col_offset=25)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=8), FunctionDef('f', arguments([], None, None, []), [Expr(Call(Attribute(Name('ident', Load(), lineno=107, col_offset=12), 'append', Load(), lineno=107, col_offset=12), [Attribute(Call(Attribute(Name('threading', Load(), lineno=107, col_offset=25), 'currentThread', Load(), lineno=107, col_offset=25), [], [], None, None, lineno=107, col_offset=25), 'ident', Load(), lineno=107, col_offset=25)], [], None, None, lineno=107, col_offset=12), lineno=107, col_offset=12), Expr(Call(Attribute(Name('done', Load(), lineno=108, col_offset=12), 'set', Load(), lineno=108, col_offset=12), [], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12)], [], lineno=106, col_offset=8), Assign([Name('done', Store(), lineno=109, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=109, col_offset=15), 'Event', Load(), lineno=109, col_offset=15), [], [], None, None, lineno=109, col_offset=15), lineno=109, col_offset=8), Assign([Name('ident', Store(), lineno=110, col_offset=8)], List([], Load(), lineno=110, col_offset=16), lineno=110, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=111, col_offset=8), 'start_new_thread', Load(), lineno=111, col_offset=8), [Name('f', Load(), lineno=111, col_offset=32), Tuple([], Load(), lineno=111, col_offset=35)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8), Expr(Call(Attribute(Name('done', Load(), lineno=112, col_offset=8), 'wait', Load(), lineno=112, col_offset=8), [], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=8), 'assertFalse', Load(), lineno=113, col_offset=8), [Compare(Subscript(Name('ident', Load(), lineno=113, col_offset=25), Index(Num(0, lineno=113, col_offset=31)), Load(), lineno=113, col_offset=25), [Is()], [Name('None', Load(), lineno=113, col_offset=37)], lineno=113, col_offset=25)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), Delete([Subscript(Attribute(Name('threading', Load(), lineno=115, col_offset=12), '_active', Load(), lineno=115, col_offset=12), Index(Subscript(Name('ident', Load(), lineno=115, col_offset=30), Index(Num(0, lineno=115, col_offset=36)), Load(), lineno=115, col_offset=30)), Del(), lineno=115, col_offset=12)], lineno=115, col_offset=8)], [], lineno=103, col_offset=4), FunctionDef('test_various_ops_small_stack', arguments([Name('self', Param(), lineno=118, col_offset=37)], None, None, []), [If(Name('verbose', Load(), lineno=119, col_offset=11), [Print(None, [Str('with 256kB thread stack size...', lineno=120, col_offset=18)], True, lineno=120, col_offset=12)], [], lineno=119, col_offset=8), TryExcept([Expr(Call(Attribute(Name('threading', Load(), lineno=122, col_offset=12), 'stack_size', Load(), lineno=122, col_offset=12), [Num(262144, lineno=122, col_offset=33)], [], None, None, lineno=122, col_offset=12), lineno=122, col_offset=12)], [ExceptHandler(Attribute(Name('thread', Load(), lineno=123, col_offset=15), 'error', Load(), lineno=123, col_offset=15), None, [If(Name('verbose', Load(), lineno=124, col_offset=15), [Print(None, [Str('platform does not support changing thread stack size', lineno=125, col_offset=22)], True, lineno=125, col_offset=16)], [], lineno=124, col_offset=12), Return(None, lineno=126, col_offset=12)], lineno=123, col_offset=8)], [], lineno=121, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=127, col_offset=8), 'test_various_ops', Load(), lineno=127, col_offset=8), [], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8), Expr(Call(Attribute(Name('threading', Load(), lineno=128, col_offset=8), 'stack_size', Load(), lineno=128, col_offset=8), [Num(0, lineno=128, col_offset=29)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8)], [], lineno=118, col_offset=4), FunctionDef('test_various_ops_large_stack', arguments([Name('self', Param(), lineno=131, col_offset=37)], None, None, []), [If(Name('verbose', Load(), lineno=132, col_offset=11), [Print(None, [Str('with 1MB thread stack size...', lineno=133, col_offset=18)], True, lineno=133, col_offset=12)], [], lineno=132, col_offset=8), TryExcept([Expr(Call(Attribute(Name('threading', Load(), lineno=135, col_offset=12), 'stack_size', Load(), lineno=135, col_offset=12), [Num(1048576, lineno=135, col_offset=33)], [], None, None, lineno=135, col_offset=12), lineno=135, col_offset=12)], [ExceptHandler(Attribute(Name('thread', Load(), lineno=136, col_offset=15), 'error', Load(), lineno=136, col_offset=15), None, [If(Name('verbose', Load(), lineno=137, col_offset=15), [Print(None, [Str('platform does not support changing thread stack size', lineno=138, col_offset=22)], True, lineno=138, col_offset=16)], [], lineno=137, col_offset=12), Return(None, lineno=139, col_offset=12)], lineno=136, col_offset=8)], [], lineno=134, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=140, col_offset=8), 'test_various_ops', Load(), lineno=140, col_offset=8), [], [], None, None, lineno=140, col_offset=8), lineno=140, col_offset=8), Expr(Call(Attribute(Name('threading', Load(), lineno=141, col_offset=8), 'stack_size', Load(), lineno=141, col_offset=8), [Num(0, lineno=141, col_offset=29)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('test_foreign_thread', arguments([Name('self', Param(), lineno=143, col_offset=28)], None, None, []), [FunctionDef('f', arguments([Name('mutex', Param(), lineno=145, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('threading', Load(), lineno=148, col_offset=12), 'current_thread', Load(), lineno=148, col_offset=12), [], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12), Expr(Call(Attribute(Name('mutex', Load(), lineno=149, col_offset=12), 'release', Load(), lineno=149, col_offset=12), [], [], None, None, lineno=149, col_offset=12), lineno=149, col_offset=12)], [], lineno=145, col_offset=8), Assign([Name('mutex', Store(), lineno=151, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=151, col_offset=16), 'Lock', Load(), lineno=151, col_offset=16), [], [], None, None, lineno=151, col_offset=16), lineno=151, col_offset=8), Expr(Call(Attribute(Name('mutex', Load(), lineno=152, col_offset=8), 'acquire', Load(), lineno=152, col_offset=8), [], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8), Assign([Name('tid', Store(), lineno=153, col_offset=8)], Call(Attribute(Name('thread', Load(), lineno=153, col_offset=14), 'start_new_thread', Load(), lineno=153, col_offset=14), [Name('f', Load(), lineno=153, col_offset=38), Tuple([Name('mutex', Load(), lineno=153, col_offset=42)], Load(), lineno=153, col_offset=42)], [], None, None, lineno=153, col_offset=14), lineno=153, col_offset=8), Expr(Call(Attribute(Name('mutex', Load(), lineno=155, col_offset=8), 'acquire', Load(), lineno=155, col_offset=8), [], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=8), 'assertIn', Load(), lineno=156, col_offset=8), [Name('tid', Load(), lineno=156, col_offset=22), Attribute(Name('threading', Load(), lineno=156, col_offset=27), '_active', Load(), lineno=156, col_offset=27)], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=8), 'assertIsInstance', Load(), lineno=157, col_offset=8), [Subscript(Attribute(Name('threading', Load(), lineno=157, col_offset=30), '_active', Load(), lineno=157, col_offset=30), Index(Name('tid', Load(), lineno=157, col_offset=48)), Load(), lineno=157, col_offset=30), Attribute(Name('threading', Load(), lineno=157, col_offset=54), '_DummyThread', Load(), lineno=157, col_offset=54)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8), Delete([Subscript(Attribute(Name('threading', Load(), lineno=158, col_offset=12), '_active', Load(), lineno=158, col_offset=12), Index(Name('tid', Load(), lineno=158, col_offset=30)), Del(), lineno=158, col_offset=12)], lineno=158, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('test_PyThreadState_SetAsyncExc', arguments([Name('self', Param(), lineno=162, col_offset=39)], None, None, []), [TryExcept([Import([alias('ctypes', None)], lineno=164, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=165, col_offset=15), None, [If(Name('verbose', Load(), lineno=166, col_offset=15), [Print(None, [Str("test_PyThreadState_SetAsyncExc can't import ctypes", lineno=167, col_offset=22)], True, lineno=167, col_offset=16)], [], lineno=166, col_offset=12), Return(None, lineno=168, col_offset=12)], lineno=165, col_offset=8)], [], lineno=163, col_offset=8), Assign([Name('set_async_exc', Store(), lineno=170, col_offset=8)], Attribute(Attribute(Name('ctypes', Load(), lineno=170, col_offset=24), 'pythonapi', Load(), lineno=170, col_offset=24), 'PyThreadState_SetAsyncExc', Load(), lineno=170, col_offset=24), lineno=170, col_offset=8), ClassDef('AsyncExc', [Name('Exception', Load(), lineno=172, col_offset=23)], [Pass( lineno=173, col_offset=12)], [], lineno=172, col_offset=8), Assign([Name('exception', Store(), lineno=175, col_offset=8)], Call(Attribute(Name('ctypes', Load(), lineno=175, col_offset=20), 'py_object', Load(), lineno=175, col_offset=20), [Name('AsyncExc', Load(), lineno=175, col_offset=37)], [], None, None, lineno=175, col_offset=20), lineno=175, col_offset=8), Assign([Name('tid', Store(), lineno=178, col_offset=8)], Call(Attribute(Name('thread', Load(), lineno=178, col_offset=14), 'get_ident', Load(), lineno=178, col_offset=14), [], [], None, None, lineno=178, col_offset=14), lineno=178, col_offset=8), TryExcept([Assign([Name('result', Store(), lineno=181, col_offset=12)], Call(Name('set_async_exc', Load(), lineno=181, col_offset=21), [Call(Attribute(Name('ctypes', Load(), lineno=181, col_offset=35), 'c_long', Load(), lineno=181, col_offset=35), [Name('tid', Load(), lineno=181, col_offset=49)], [], None, None, lineno=181, col_offset=35), Name('exception', Load(), lineno=181, col_offset=55)], [], None, None, lineno=181, col_offset=21), lineno=181, col_offset=12), While(Name('True', Load(), lineno=184, col_offset=18), [Pass( lineno=185, col_offset=16)], [], lineno=184, col_offset=12)], [ExceptHandler(Name('AsyncExc', Load(), lineno=186, col_offset=15), None, [Pass( lineno=187, col_offset=12)], lineno=186, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=12), 'fail', Load(), lineno=191, col_offset=12), [Str('AsyncExc not raised', lineno=191, col_offset=22)], [], None, None, lineno=191, col_offset=12), lineno=191, col_offset=12)], lineno=180, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=12), 'assertEqual', Load(), lineno=193, col_offset=12), [Name('result', Load(), lineno=193, col_offset=29), Num(1, lineno=193, col_offset=37)], [], None, None, lineno=193, col_offset=12), lineno=193, col_offset=12)], [ExceptHandler(Name('UnboundLocalError', Load(), lineno=194, col_offset=15), None, [Pass( lineno=196, col_offset=12)], lineno=194, col_offset=8)], [], lineno=192, col_offset=8), Assign([Name('worker_started', Store(), lineno=202, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=202, col_offset=25), 'Event', Load(), lineno=202, col_offset=25), [], [], None, None, lineno=202, col_offset=25), lineno=202, col_offset=8), Assign([Name('worker_saw_exception', Store(), lineno=203, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=203, col_offset=31), 'Event', Load(), lineno=203, col_offset=31), [], [], None, None, lineno=203, col_offset=31), lineno=203, col_offset=8), ClassDef('Worker', [Attribute(Name('threading', Load(), lineno=205, col_offset=21), 'Thread', Load(), lineno=205, col_offset=21)], [FunctionDef('run', arguments([Name('self', Param(), lineno=206, col_offset=20)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=207, col_offset=16), 'id', Store(), lineno=207, col_offset=16)], Call(Attribute(Name('thread', Load(), lineno=207, col_offset=26), 'get_ident', Load(), lineno=207, col_offset=26), [], [], None, None, lineno=207, col_offset=26), lineno=207, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=208, col_offset=16), 'finished', Store(), lineno=208, col_offset=16)], Name('False', Load(), lineno=208, col_offset=32), lineno=208, col_offset=16), TryExcept([While(Name('True', Load(), lineno=211, col_offset=26), [Expr(Call(Attribute(Name('worker_started', Load(), lineno=212, col_offset=24), 'set', Load(), lineno=212, col_offset=24), [], [], None, None, lineno=212, col_offset=24), lineno=212, col_offset=24), Expr(Call(Attribute(Name('time', Load(), lineno=213, col_offset=24), 'sleep', Load(), lineno=213, col_offset=24), [Num(0.1, lineno=213, col_offset=35)], [], None, None, lineno=213, col_offset=24), lineno=213, col_offset=24)], [], lineno=211, col_offset=20)], [ExceptHandler(Name('AsyncExc', Load(), lineno=214, col_offset=23), None, [Assign([Attribute(Name('self', Load(), lineno=215, col_offset=20), 'finished', Store(), lineno=215, col_offset=20)], Name('True', Load(), lineno=215, col_offset=36), lineno=215, col_offset=20), Expr(Call(Attribute(Name('worker_saw_exception', Load(), lineno=216, col_offset=20), 'set', Load(), lineno=216, col_offset=20), [], [], None, None, lineno=216, col_offset=20), lineno=216, col_offset=20)], lineno=214, col_offset=16)], [], lineno=210, col_offset=16)], [], lineno=206, col_offset=12)], [], lineno=205, col_offset=8), Assign([Name('t', Store(), lineno=218, col_offset=8)], Call(Name('Worker', Load(), lineno=218, col_offset=12), [], [], None, None, lineno=218, col_offset=12), lineno=218, col_offset=8), Assign([Attribute(Name('t', Load(), lineno=219, col_offset=8), 'daemon', Store(), lineno=219, col_offset=8)], Name('True', Load(), lineno=219, col_offset=19), lineno=219, col_offset=8), Expr(Call(Attribute(Name('t', Load(), lineno=220, col_offset=8), 'start', Load(), lineno=220, col_offset=8), [], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8), If(Name('verbose', Load(), lineno=221, col_offset=11), [Print(None, [Str('    started worker thread', lineno=222, col_offset=18)], True, lineno=222, col_offset=12)], [], lineno=221, col_offset=8), If(Name('verbose', Load(), lineno=225, col_offset=11), [Print(None, [Str('    trying nonsensical thread id', lineno=226, col_offset=18)], True, lineno=226, col_offset=12)], [], lineno=225, col_offset=8), Assign([Name('result', Store(), lineno=227, col_offset=8)], Call(Name('set_async_exc', Load(), lineno=227, col_offset=17), [Call(Attribute(Name('ctypes', Load(), lineno=227, col_offset=31), 'c_long', Load(), lineno=227, col_offset=31), [Num(-1, lineno=227, col_offset=46)], [], None, None, lineno=227, col_offset=31), Name('exception', Load(), lineno=227, col_offset=50)], [], None, None, lineno=227, col_offset=17), lineno=227, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=8), 'assertEqual', Load(), lineno=228, col_offset=8), [Name('result', Load(), lineno=228, col_offset=25), Num(0, lineno=228, col_offset=33)], [], None, None, lineno=228, col_offset=8), lineno=228, col_offset=8), If(Name('verbose', Load(), lineno=231, col_offset=11), [Print(None, [Str('    waiting for worker thread to get started', lineno=232, col_offset=18)], True, lineno=232, col_offset=12)], [], lineno=231, col_offset=8), Assign([Name('ret', Store(), lineno=233, col_offset=8)], Call(Attribute(Name('worker_started', Load(), lineno=233, col_offset=14), 'wait', Load(), lineno=233, col_offset=14), [], [], None, None, lineno=233, col_offset=14), lineno=233, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=8), 'assertTrue', Load(), lineno=234, col_offset=8), [Name('ret', Load(), lineno=234, col_offset=24)], [], None, None, lineno=234, col_offset=8), lineno=234, col_offset=8), If(Name('verbose', Load(), lineno=235, col_offset=11), [Print(None, [Str("    verifying worker hasn't exited", lineno=236, col_offset=18)], True, lineno=236, col_offset=12)], [], lineno=235, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=237, col_offset=8), 'assertTrue', Load(), lineno=237, col_offset=8), [UnaryOp(Not(), Attribute(Name('t', Load(), lineno=237, col_offset=28), 'finished', Load(), lineno=237, col_offset=28), lineno=237, col_offset=24)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8), If(Name('verbose', Load(), lineno=238, col_offset=11), [Print(None, [Str('    attempting to raise asynch exception in worker', lineno=239, col_offset=18)], True, lineno=239, col_offset=12)], [], lineno=238, col_offset=8), Assign([Name('result', Store(), lineno=240, col_offset=8)], Call(Name('set_async_exc', Load(), lineno=240, col_offset=17), [Call(Attribute(Name('ctypes', Load(), lineno=240, col_offset=31), 'c_long', Load(), lineno=240, col_offset=31), [Attribute(Name('t', Load(), lineno=240, col_offset=45), 'id', Load(), lineno=240, col_offset=45)], [], None, None, lineno=240, col_offset=31), Name('exception', Load(), lineno=240, col_offset=52)], [], None, None, lineno=240, col_offset=17), lineno=240, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=241, col_offset=8), 'assertEqual', Load(), lineno=241, col_offset=8), [Name('result', Load(), lineno=241, col_offset=25), Num(1, lineno=241, col_offset=33)], [], None, None, lineno=241, col_offset=8), lineno=241, col_offset=8), If(Name('verbose', Load(), lineno=242, col_offset=11), [Print(None, [Str('    waiting for worker to say it caught the exception', lineno=243, col_offset=18)], True, lineno=243, col_offset=12)], [], lineno=242, col_offset=8), Expr(Call(Attribute(Name('worker_saw_exception', Load(), lineno=244, col_offset=8), 'wait', Load(), lineno=244, col_offset=8), [], [keyword('timeout', Num(10, lineno=244, col_offset=42))], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=245, col_offset=8), 'assertTrue', Load(), lineno=245, col_offset=8), [Attribute(Name('t', Load(), lineno=245, col_offset=24), 'finished', Load(), lineno=245, col_offset=24)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), If(Name('verbose', Load(), lineno=246, col_offset=11), [Print(None, [Str('    all OK -- joining worker', lineno=247, col_offset=18)], True, lineno=247, col_offset=12)], [], lineno=246, col_offset=8), If(Attribute(Name('t', Load(), lineno=248, col_offset=11), 'finished', Load(), lineno=248, col_offset=11), [Expr(Call(Attribute(Name('t', Load(), lineno=249, col_offset=12), 'join', Load(), lineno=249, col_offset=12), [], [], None, None, lineno=249, col_offset=12), lineno=249, col_offset=12)], [], lineno=248, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('test_limbo_cleanup', arguments([Name('self', Param(), lineno=252, col_offset=27)], None, None, []), [FunctionDef('fail_new_thread', arguments([], 'args', None, []), [Raise(Call(Attribute(Name('thread', Load(), lineno=255, col_offset=18), 'error', Load(), lineno=255, col_offset=18), [], [], None, None, lineno=255, col_offset=18), None, None, lineno=255, col_offset=12)], [], lineno=254, col_offset=8), Assign([Name('_start_new_thread', Store(), lineno=256, col_offset=8)], Attribute(Name('threading', Load(), lineno=256, col_offset=28), '_start_new_thread', Load(), lineno=256, col_offset=28), lineno=256, col_offset=8), Assign([Attribute(Name('threading', Load(), lineno=257, col_offset=8), '_start_new_thread', Store(), lineno=257, col_offset=8)], Name('fail_new_thread', Load(), lineno=257, col_offset=38), lineno=257, col_offset=8), TryFinally([Assign([Name('t', Store(), lineno=259, col_offset=12)], Call(Attribute(Name('threading', Load(), lineno=259, col_offset=16), 'Thread', Load(), lineno=259, col_offset=16), [], [keyword('target', Lambda(arguments([], None, None, []), Name('None', Load(), lineno=259, col_offset=48), lineno=259, col_offset=40))], None, None, lineno=259, col_offset=16), lineno=259, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=260, col_offset=12), 'assertRaises', Load(), lineno=260, col_offset=12), [Attribute(Name('thread', Load(), lineno=260, col_offset=30), 'error', Load(), lineno=260, col_offset=30), Attribute(Name('t', Load(), lineno=260, col_offset=44), 'start', Load(), lineno=260, col_offset=44)], [], None, None, lineno=260, col_offset=12), lineno=260, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=261, col_offset=12), 'assertFalse', Load(), lineno=261, col_offset=12), [Compare(Name('t', Load(), lineno=262, col_offset=16), [In()], [Attribute(Name('threading', Load(), lineno=262, col_offset=21), '_limbo', Load(), lineno=262, col_offset=21)], lineno=262, col_offset=16), Str('Failed to cleanup _limbo map on failure of Thread.start().', lineno=263, col_offset=16)], [], None, None, lineno=261, col_offset=12), lineno=261, col_offset=12)], [Assign([Attribute(Name('threading', Load(), lineno=265, col_offset=12), '_start_new_thread', Store(), lineno=265, col_offset=12)], Name('_start_new_thread', Load(), lineno=265, col_offset=42), lineno=265, col_offset=12)], lineno=258, col_offset=8)], [], lineno=252, col_offset=4), FunctionDef('test_finalize_runnning_thread', arguments([Name('self', Param(), lineno=267, col_offset=38)], None, None, []), [TryExcept([Import([alias('ctypes', None)], lineno=272, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=273, col_offset=15), None, [If(Name('verbose', Load(), lineno=274, col_offset=15), [Print(None, [Str("test_finalize_with_runnning_thread can't import ctypes", lineno=275, col_offset=22)], True, lineno=275, col_offset=16)], [], lineno=274, col_offset=12), Return(None, lineno=276, col_offset=12)], lineno=273, col_offset=8)], [], lineno=271, col_offset=8), Import([alias('subprocess', None)], lineno=278, col_offset=8), Assign([Name('rc', Store(), lineno=279, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=279, col_offset=13), 'call', Load(), lineno=279, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=279, col_offset=30), 'executable', Load(), lineno=279, col_offset=30), Str('-c', lineno=279, col_offset=46), Str('if 1:\n            import ctypes, sys, time, thread\n\n            # This lock is used as a simple event variable.\n            ready = thread.allocate_lock()\n            ready.acquire()\n\n            # Module globals are cleared before __del__ is run\n            # So we save the functions in class dict\n            class C:\n                ensure = ctypes.pythonapi.PyGILState_Ensure\n                release = ctypes.pythonapi.PyGILState_Release\n                def __del__(self):\n                    state = self.ensure()\n                    self.release(state)\n\n            def waitingThread():\n                x = C()\n                ready.release()\n                time.sleep(100)\n\n            thread.start_new_thread(waitingThread, ())\n            ready.acquire()  # Be sure the other thread is waiting.\n            sys.exit(42)\n            ', lineno=303, col_offset=-1)], Load(), lineno=279, col_offset=29)], [], None, None, lineno=279, col_offset=13), lineno=279, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=304, col_offset=8), 'assertEqual', Load(), lineno=304, col_offset=8), [Name('rc', Load(), lineno=304, col_offset=25), Num(42, lineno=304, col_offset=29)], [], None, None, lineno=304, col_offset=8), lineno=304, col_offset=8)], [], lineno=267, col_offset=4), FunctionDef('test_finalize_with_trace', arguments([Name('self', Param(), lineno=306, col_offset=33)], None, None, []), [Import([alias('subprocess', None)], lineno=309, col_offset=8), Assign([Name('p', Store(), lineno=310, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=310, col_offset=12), 'Popen', Load(), lineno=310, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=310, col_offset=30), 'executable', Load(), lineno=310, col_offset=30), Str('-c', lineno=310, col_offset=46), Str("if 1:\n            import sys, threading\n\n            # A deadlock-killer, to prevent the\n            # testsuite to hang forever\n            def killer():\n                import os, time\n                time.sleep(2)\n                print 'program blocked; aborting'\n                os._exit(2)\n            t = threading.Thread(target=killer)\n            t.daemon = True\n            t.start()\n\n            # This is the trace function\n            def func(frame, event, arg):\n                threading.current_thread()\n                return func\n\n            sys.settrace(func)\n            ", lineno=330, col_offset=-1)], Load(), lineno=310, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=331, col_offset=19), 'PIPE', Load(), lineno=331, col_offset=19)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=332, col_offset=19), 'PIPE', Load(), lineno=332, col_offset=19))], None, None, lineno=310, col_offset=12), lineno=310, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=333, col_offset=8), 'addCleanup', Load(), lineno=333, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=333, col_offset=24), 'stdout', Load(), lineno=333, col_offset=24), 'close', Load(), lineno=333, col_offset=24)], [], None, None, lineno=333, col_offset=8), lineno=333, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=334, col_offset=8), 'addCleanup', Load(), lineno=334, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=334, col_offset=24), 'stderr', Load(), lineno=334, col_offset=24), 'close', Load(), lineno=334, col_offset=24)], [], None, None, lineno=334, col_offset=8), lineno=334, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=335, col_offset=8), Name('stderr', Store(), lineno=335, col_offset=16)], Store(), lineno=335, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=335, col_offset=25), 'communicate', Load(), lineno=335, col_offset=25), [], [], None, None, lineno=335, col_offset=25), lineno=335, col_offset=8), Assign([Name('rc', Store(), lineno=336, col_offset=8)], Attribute(Name('p', Load(), lineno=336, col_offset=13), 'returncode', Load(), lineno=336, col_offset=13), lineno=336, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=337, col_offset=8), 'assertFalse', Load(), lineno=337, col_offset=8), [Compare(Name('rc', Load(), lineno=337, col_offset=25), [Eq()], [Num(2, lineno=337, col_offset=31)], lineno=337, col_offset=25), Str('interpreted was blocked', lineno=337, col_offset=34)], [], None, None, lineno=337, col_offset=8), lineno=337, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'assertTrue', Load(), lineno=338, col_offset=8), [Compare(Name('rc', Load(), lineno=338, col_offset=24), [Eq()], [Num(0, lineno=338, col_offset=30)], lineno=338, col_offset=24), BinOp(Str('Unexpected error: ', lineno=339, col_offset=24), Add(), Call(Name('repr', Load(), lineno=339, col_offset=47), [Name('stderr', Load(), lineno=339, col_offset=52)], [], None, None, lineno=339, col_offset=47), lineno=339, col_offset=24)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8)], [], lineno=306, col_offset=4), FunctionDef('test_join_nondaemon_on_shutdown', arguments([Name('self', Param(), lineno=341, col_offset=40)], None, None, []), [Import([alias('subprocess', None)], lineno=344, col_offset=8), Assign([Name('p', Store(), lineno=345, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=345, col_offset=12), 'Popen', Load(), lineno=345, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=345, col_offset=30), 'executable', Load(), lineno=345, col_offset=30), Str('-c', lineno=345, col_offset=46), Str('if 1:\n                import threading\n                from time import sleep\n\n                def child():\n                    sleep(1)\n                    # As a non-daemon thread we SHOULD wake up and nothing\n                    # should be torn down yet\n                    print "Woke up, sleep function is:", sleep\n\n                threading.Thread(target=child).start()\n                raise SystemExit\n            ', lineno=357, col_offset=-1)], Load(), lineno=345, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=358, col_offset=19), 'PIPE', Load(), lineno=358, col_offset=19)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=359, col_offset=19), 'PIPE', Load(), lineno=359, col_offset=19))], None, None, lineno=345, col_offset=12), lineno=345, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=360, col_offset=8), 'addCleanup', Load(), lineno=360, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=360, col_offset=24), 'stdout', Load(), lineno=360, col_offset=24), 'close', Load(), lineno=360, col_offset=24)], [], None, None, lineno=360, col_offset=8), lineno=360, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=361, col_offset=8), 'addCleanup', Load(), lineno=361, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=361, col_offset=24), 'stderr', Load(), lineno=361, col_offset=24), 'close', Load(), lineno=361, col_offset=24)], [], None, None, lineno=361, col_offset=8), lineno=361, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=362, col_offset=8), Name('stderr', Store(), lineno=362, col_offset=16)], Store(), lineno=362, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=362, col_offset=25), 'communicate', Load(), lineno=362, col_offset=25), [], [], None, None, lineno=362, col_offset=25), lineno=362, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=363, col_offset=8), 'assertEqual', Load(), lineno=363, col_offset=8), [Call(Attribute(Name('stdout', Load(), lineno=363, col_offset=25), 'strip', Load(), lineno=363, col_offset=25), [], [], None, None, lineno=363, col_offset=25), Str('Woke up, sleep function is: <built-in function sleep>', lineno=364, col_offset=12)], [], None, None, lineno=363, col_offset=8), lineno=363, col_offset=8), Assign([Name('stderr', Store(), lineno=365, col_offset=8)], Call(Attribute(Call(Attribute(Name('re', Load(), lineno=365, col_offset=17), 'sub', Load(), lineno=365, col_offset=17), [Str('^\\[\\d+ refs\\]', lineno=365, col_offset=24), Str('', lineno=365, col_offset=42), Name('stderr', Load(), lineno=365, col_offset=46), Attribute(Name('re', Load(), lineno=365, col_offset=54), 'MULTILINE', Load(), lineno=365, col_offset=54)], [], None, None, lineno=365, col_offset=17), 'strip', Load(), lineno=365, col_offset=17), [], [], None, None, lineno=365, col_offset=17), lineno=365, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=366, col_offset=8), 'assertEqual', Load(), lineno=366, col_offset=8), [Name('stderr', Load(), lineno=366, col_offset=25), Str('', lineno=366, col_offset=33)], [], None, None, lineno=366, col_offset=8), lineno=366, col_offset=8)], [], lineno=341, col_offset=4), FunctionDef('test_enumerate_after_join', arguments([Name('self', Param(), lineno=368, col_offset=34)], None, None, []), [Assign([Name('enum', Store(), lineno=371, col_offset=8)], Attribute(Name('threading', Load(), lineno=371, col_offset=15), 'enumerate', Load(), lineno=371, col_offset=15), lineno=371, col_offset=8), Assign([Name('old_interval', Store(), lineno=372, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=372, col_offset=23), 'getcheckinterval', Load(), lineno=372, col_offset=23), [], [], None, None, lineno=372, col_offset=23), lineno=372, col_offset=8), TryFinally([For(Name('i', Store(), lineno=374, col_offset=16), Call(Name('xrange', Load(), lineno=374, col_offset=21), [Num(1, lineno=374, col_offset=28), Num(100, lineno=374, col_offset=31)], [], None, None, lineno=374, col_offset=21), [Expr(Call(Attribute(Name('sys', Load(), lineno=377, col_offset=16), 'setcheckinterval', Load(), lineno=377, col_offset=16), [BinOp(Name('i', Load(), lineno=377, col_offset=37), FloorDiv(), Num(5, lineno=377, col_offset=42), lineno=377, col_offset=37)], [], None, None, lineno=377, col_offset=16), lineno=377, col_offset=16), Assign([Name('t', Store(), lineno=378, col_offset=16)], Call(Attribute(Name('threading', Load(), lineno=378, col_offset=20), 'Thread', Load(), lineno=378, col_offset=20), [], [keyword('target', Lambda(arguments([], None, None, []), Name('None', Load(), lineno=378, col_offset=52), lineno=378, col_offset=44))], None, None, lineno=378, col_offset=20), lineno=378, col_offset=16), Expr(Call(Attribute(Name('t', Load(), lineno=379, col_offset=16), 'start', Load(), lineno=379, col_offset=16), [], [], None, None, lineno=379, col_offset=16), lineno=379, col_offset=16), Expr(Call(Attribute(Name('t', Load(), lineno=380, col_offset=16), 'join', Load(), lineno=380, col_offset=16), [], [], None, None, lineno=380, col_offset=16), lineno=380, col_offset=16), Assign([Name('l', Store(), lineno=381, col_offset=16)], Call(Name('enum', Load(), lineno=381, col_offset=20), [], [], None, None, lineno=381, col_offset=20), lineno=381, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=16), 'assertNotIn', Load(), lineno=382, col_offset=16), [Name('t', Load(), lineno=382, col_offset=33), Name('l', Load(), lineno=382, col_offset=36), BinOp(Str('#1703448 triggered after %d trials: %s', lineno=383, col_offset=20), Mod(), Tuple([Name('i', Load(), lineno=383, col_offset=64), Name('l', Load(), lineno=383, col_offset=67)], Load(), lineno=383, col_offset=64), lineno=383, col_offset=20)], [], None, None, lineno=382, col_offset=16), lineno=382, col_offset=16)], [], lineno=374, col_offset=12)], [Expr(Call(Attribute(Name('sys', Load(), lineno=385, col_offset=12), 'setcheckinterval', Load(), lineno=385, col_offset=12), [Name('old_interval', Load(), lineno=385, col_offset=33)], [], None, None, lineno=385, col_offset=12), lineno=385, col_offset=12)], lineno=373, col_offset=8)], [], lineno=368, col_offset=4), FunctionDef('test_no_refcycle_through_target', arguments([Name('self', Param(), lineno=387, col_offset=40)], None, None, []), [ClassDef('RunSelfFunction', [Name('object', Load(), lineno=388, col_offset=30)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=389, col_offset=25), Name('should_raise', Param(), lineno=389, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=392, col_offset=16), 'should_raise', Store(), lineno=392, col_offset=16)], Name('should_raise', Load(), lineno=392, col_offset=36), lineno=392, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=393, col_offset=16), 'thread', Store(), lineno=393, col_offset=16)], Call(Attribute(Name('threading', Load(), lineno=393, col_offset=30), 'Thread', Load(), lineno=393, col_offset=30), [], [keyword('target', Attribute(Name('self', Load(), lineno=393, col_offset=54), '_run', Load(), lineno=393, col_offset=54)), keyword('args', Tuple([Name('self', Load(), lineno=394, col_offset=53)], Load(), lineno=394, col_offset=53)), keyword('kwargs', Dict([Str('yet_another', lineno=395, col_offset=55)], [Name('self', Load(), lineno=395, col_offset=69)], lineno=395, col_offset=54))], None, None, lineno=393, col_offset=30), lineno=393, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=396, col_offset=16), 'thread', Load(), lineno=396, col_offset=16), 'start', Load(), lineno=396, col_offset=16), [], [], None, None, lineno=396, col_offset=16), lineno=396, col_offset=16)], [], lineno=389, col_offset=12), FunctionDef('_run', arguments([Name('self', Param(), lineno=398, col_offset=21), Name('other_ref', Param(), lineno=398, col_offset=27), Name('yet_another', Param(), lineno=398, col_offset=38)], None, None, []), [If(Attribute(Name('self', Load(), lineno=399, col_offset=19), 'should_raise', Load(), lineno=399, col_offset=19), [Raise(Name('SystemExit', Load(), lineno=400, col_offset=26), None, None, lineno=400, col_offset=20)], [], lineno=399, col_offset=16)], [], lineno=398, col_offset=12)], [], lineno=388, col_offset=8), Assign([Name('cyclic_object', Store(), lineno=402, col_offset=8)], Call(Name('RunSelfFunction', Load(), lineno=402, col_offset=24), [], [keyword('should_raise', Name('False', Load(), lineno=402, col_offset=53))], None, None, lineno=402, col_offset=24), lineno=402, col_offset=8), Assign([Name('weak_cyclic_object', Store(), lineno=403, col_offset=8)], Call(Attribute(Name('weakref', Load(), lineno=403, col_offset=29), 'ref', Load(), lineno=403, col_offset=29), [Name('cyclic_object', Load(), lineno=403, col_offset=41)], [], None, None, lineno=403, col_offset=29), lineno=403, col_offset=8), Expr(Call(Attribute(Attribute(Name('cyclic_object', Load(), lineno=404, col_offset=8), 'thread', Load(), lineno=404, col_offset=8), 'join', Load(), lineno=404, col_offset=8), [], [], None, None, lineno=404, col_offset=8), lineno=404, col_offset=8), Delete([Name('cyclic_object', Del(), lineno=405, col_offset=12)], lineno=405, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=406, col_offset=8), 'assertEqual', Load(), lineno=406, col_offset=8), [Name('None', Load(), lineno=406, col_offset=25), Call(Name('weak_cyclic_object', Load(), lineno=406, col_offset=31), [], [], None, None, lineno=406, col_offset=31)], [keyword('msg', BinOp(Str('%d references still around', lineno=407, col_offset=30), Mod(), Call(Attribute(Name('sys', Load(), lineno=408, col_offset=30), 'getrefcount', Load(), lineno=408, col_offset=30), [Call(Name('weak_cyclic_object', Load(), lineno=408, col_offset=46), [], [], None, None, lineno=408, col_offset=46)], [], None, None, lineno=408, col_offset=30), lineno=407, col_offset=30))], None, None, lineno=406, col_offset=8), lineno=406, col_offset=8), Assign([Name('raising_cyclic_object', Store(), lineno=410, col_offset=8)], Call(Name('RunSelfFunction', Load(), lineno=410, col_offset=32), [], [keyword('should_raise', Name('True', Load(), lineno=410, col_offset=61))], None, None, lineno=410, col_offset=32), lineno=410, col_offset=8), Assign([Name('weak_raising_cyclic_object', Store(), lineno=411, col_offset=8)], Call(Attribute(Name('weakref', Load(), lineno=411, col_offset=37), 'ref', Load(), lineno=411, col_offset=37), [Name('raising_cyclic_object', Load(), lineno=411, col_offset=49)], [], None, None, lineno=411, col_offset=37), lineno=411, col_offset=8), Expr(Call(Attribute(Attribute(Name('raising_cyclic_object', Load(), lineno=412, col_offset=8), 'thread', Load(), lineno=412, col_offset=8), 'join', Load(), lineno=412, col_offset=8), [], [], None, None, lineno=412, col_offset=8), lineno=412, col_offset=8), Delete([Name('raising_cyclic_object', Del(), lineno=413, col_offset=12)], lineno=413, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=414, col_offset=8), 'assertEqual', Load(), lineno=414, col_offset=8), [Name('None', Load(), lineno=414, col_offset=25), Call(Name('weak_raising_cyclic_object', Load(), lineno=414, col_offset=31), [], [], None, None, lineno=414, col_offset=31)], [keyword('msg', BinOp(Str('%d references still around', lineno=415, col_offset=30), Mod(), Call(Attribute(Name('sys', Load(), lineno=416, col_offset=30), 'getrefcount', Load(), lineno=416, col_offset=30), [Call(Name('weak_raising_cyclic_object', Load(), lineno=416, col_offset=46), [], [], None, None, lineno=416, col_offset=46)], [], None, None, lineno=416, col_offset=30), lineno=415, col_offset=30))], None, None, lineno=414, col_offset=8), lineno=414, col_offset=8)], [], lineno=387, col_offset=4)], [], lineno=68, col_offset=0), ClassDef('ThreadJoinOnShutdown', [Name('BaseTestCase', Load(), lineno=419, col_offset=27)], [FunctionDef('_run_and_join', arguments([Name('self', Param(), lineno=421, col_offset=22), Name('script', Param(), lineno=421, col_offset=28)], None, None, []), [Assign([Name('script', Store(), lineno=422, col_offset=8)], BinOp(Str("if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", lineno=429, col_offset=-1), Add(), Name('script', Load(), lineno=429, col_offset=16), lineno=429, col_offset=-1), lineno=422, col_offset=8), Import([alias('subprocess', None)], lineno=431, col_offset=8), Assign([Name('p', Store(), lineno=432, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=432, col_offset=12), 'Popen', Load(), lineno=432, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=432, col_offset=30), 'executable', Load(), lineno=432, col_offset=30), Str('-c', lineno=432, col_offset=46), Name('script', Load(), lineno=432, col_offset=52)], Load(), lineno=432, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=432, col_offset=68), 'PIPE', Load(), lineno=432, col_offset=68))], None, None, lineno=432, col_offset=12), lineno=432, col_offset=8), Assign([Name('rc', Store(), lineno=433, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=433, col_offset=13), 'wait', Load(), lineno=433, col_offset=13), [], [], None, None, lineno=433, col_offset=13), lineno=433, col_offset=8), Assign([Name('data', Store(), lineno=434, col_offset=8)], Call(Attribute(Call(Attribute(Attribute(Name('p', Load(), lineno=434, col_offset=15), 'stdout', Load(), lineno=434, col_offset=15), 'read', Load(), lineno=434, col_offset=15), [], [], None, None, lineno=434, col_offset=15), 'replace', Load(), lineno=434, col_offset=15), [Str('\r', lineno=434, col_offset=39), Str('', lineno=434, col_offset=45)], [], None, None, lineno=434, col_offset=15), lineno=434, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=435, col_offset=8), 'stdout', Load(), lineno=435, col_offset=8), 'close', Load(), lineno=435, col_offset=8), [], [], None, None, lineno=435, col_offset=8), lineno=435, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=436, col_offset=8), 'assertEqual', Load(), lineno=436, col_offset=8), [Name('data', Load(), lineno=436, col_offset=25), Str('end of main\nend of thread\n', lineno=436, col_offset=31)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=437, col_offset=8), 'assertFalse', Load(), lineno=437, col_offset=8), [Compare(Name('rc', Load(), lineno=437, col_offset=25), [Eq()], [Num(2, lineno=437, col_offset=31)], lineno=437, col_offset=25), Str('interpreter was blocked', lineno=437, col_offset=34)], [], None, None, lineno=437, col_offset=8), lineno=437, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=438, col_offset=8), 'assertTrue', Load(), lineno=438, col_offset=8), [Compare(Name('rc', Load(), lineno=438, col_offset=24), [Eq()], [Num(0, lineno=438, col_offset=30)], lineno=438, col_offset=24), Str('Unexpected error', lineno=438, col_offset=33)], [], None, None, lineno=438, col_offset=8), lineno=438, col_offset=8)], [], lineno=421, col_offset=4), FunctionDef('test_1_join_on_shutdown', arguments([Name('self', Param(), lineno=440, col_offset=32)], None, None, []), [Assign([Name('script', Store(), lineno=442, col_offset=8)], Str("if 1:\n            import os\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            time.sleep(0.1)\n            print 'end of main'\n            ", lineno=449, col_offset=-1), lineno=442, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=450, col_offset=8), '_run_and_join', Load(), lineno=450, col_offset=8), [Name('script', Load(), lineno=450, col_offset=27)], [], None, None, lineno=450, col_offset=8), lineno=450, col_offset=8)], [], lineno=440, col_offset=4), FunctionDef('test_2_join_in_forked_process', arguments([Name('self', Param(), lineno=453, col_offset=38)], None, None, []), [Import([alias('os', None)], lineno=455, col_offset=8), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=456, col_offset=15), [Name('os', Load(), lineno=456, col_offset=23), Str('fork', lineno=456, col_offset=27)], [], None, None, lineno=456, col_offset=15), lineno=456, col_offset=11), [Return(None, lineno=457, col_offset=12)], [], lineno=456, col_offset=8), Assign([Name('script', Store(), lineno=458, col_offset=8)], Str("if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", lineno=468, col_offset=-1), lineno=458, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=469, col_offset=8), '_run_and_join', Load(), lineno=469, col_offset=8), [Name('script', Load(), lineno=469, col_offset=27)], [], None, None, lineno=469, col_offset=8), lineno=469, col_offset=8)], [], lineno=453, col_offset=4), FunctionDef('test_3_join_in_forked_from_thread', arguments([Name('self', Param(), lineno=471, col_offset=42)], None, None, []), [Import([alias('os', None)], lineno=474, col_offset=8), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=475, col_offset=15), [Name('os', Load(), lineno=475, col_offset=23), Str('fork', lineno=475, col_offset=27)], [], None, None, lineno=475, col_offset=15), lineno=475, col_offset=11), [Return(None, lineno=476, col_offset=12)], [], lineno=475, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=479, col_offset=11), 'platform', Load(), lineno=479, col_offset=11), [In()], [Tuple([Str('freebsd4', lineno=479, col_offset=28), Str('freebsd5', lineno=479, col_offset=40), Str('freebsd6', lineno=479, col_offset=52), Str('netbsd5', lineno=479, col_offset=64), Str('os2emx', lineno=480, col_offset=27)], Load(), lineno=479, col_offset=28)], lineno=479, col_offset=11), [Print(Attribute(Name('sys', Load(), lineno=481, col_offset=20), 'stderr', Load(), lineno=481, col_offset=20), [Str('Skipping test_3_join_in_forked_from_thread due to known OS bugs on', lineno=481, col_offset=33), Attribute(Name('sys', Load(), lineno=482, col_offset=62), 'platform', Load(), lineno=482, col_offset=62)], True, lineno=481, col_offset=12), Return(None, lineno=483, col_offset=12)], [], lineno=479, col_offset=8), Assign([Name('script', Store(), lineno=484, col_offset=8)], Str("if 1:\n            main_thread = threading.current_thread()\n            def worker():\n                childpid = os.fork()\n                if childpid != 0:\n                    os.waitpid(childpid, 0)\n                    sys.exit(0)\n\n                t = threading.Thread(target=joiningfunc,\n                                     args=(main_thread,))\n                print 'end of main'\n                t.start()\n                t.join() # Should not block: main_thread is already stopped\n\n            w = threading.Thread(target=worker)\n            w.start()\n            ", lineno=500, col_offset=-1), lineno=484, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=501, col_offset=8), '_run_and_join', Load(), lineno=501, col_offset=8), [Name('script', Load(), lineno=501, col_offset=27)], [], None, None, lineno=501, col_offset=8), lineno=501, col_offset=8)], [], lineno=471, col_offset=4)], [], lineno=419, col_offset=0), ClassDef('ThreadingExceptionTests', [Name('BaseTestCase', Load(), lineno=504, col_offset=30)], [FunctionDef('test_start_thread_again', arguments([Name('self', Param(), lineno=507, col_offset=32)], None, None, []), [Assign([Name('thread', Store(), lineno=508, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=508, col_offset=17), 'Thread', Load(), lineno=508, col_offset=17), [], [], None, None, lineno=508, col_offset=17), lineno=508, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=509, col_offset=8), 'start', Load(), lineno=509, col_offset=8), [], [], None, None, lineno=509, col_offset=8), lineno=509, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=8), 'assertRaises', Load(), lineno=510, col_offset=8), [Name('RuntimeError', Load(), lineno=510, col_offset=26), Attribute(Name('thread', Load(), lineno=510, col_offset=40), 'start', Load(), lineno=510, col_offset=40)], [], None, None, lineno=510, col_offset=8), lineno=510, col_offset=8)], [], lineno=507, col_offset=4), FunctionDef('test_joining_current_thread', arguments([Name('self', Param(), lineno=512, col_offset=36)], None, None, []), [Assign([Name('current_thread', Store(), lineno=513, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=513, col_offset=25), 'current_thread', Load(), lineno=513, col_offset=25), [], [], None, None, lineno=513, col_offset=25), lineno=513, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=514, col_offset=8), 'assertRaises', Load(), lineno=514, col_offset=8), [Name('RuntimeError', Load(), lineno=514, col_offset=26), Attribute(Name('current_thread', Load(), lineno=514, col_offset=40), 'join', Load(), lineno=514, col_offset=40)], [], None, None, lineno=514, col_offset=8), lineno=514, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('test_joining_inactive_thread', arguments([Name('self', Param(), lineno=516, col_offset=37)], None, None, []), [Assign([Name('thread', Store(), lineno=517, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=517, col_offset=17), 'Thread', Load(), lineno=517, col_offset=17), [], [], None, None, lineno=517, col_offset=17), lineno=517, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=518, col_offset=8), 'assertRaises', Load(), lineno=518, col_offset=8), [Name('RuntimeError', Load(), lineno=518, col_offset=26), Attribute(Name('thread', Load(), lineno=518, col_offset=40), 'join', Load(), lineno=518, col_offset=40)], [], None, None, lineno=518, col_offset=8), lineno=518, col_offset=8)], [], lineno=516, col_offset=4), FunctionDef('test_daemonize_active_thread', arguments([Name('self', Param(), lineno=520, col_offset=37)], None, None, []), [Assign([Name('thread', Store(), lineno=521, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=521, col_offset=17), 'Thread', Load(), lineno=521, col_offset=17), [], [], None, None, lineno=521, col_offset=17), lineno=521, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=522, col_offset=8), 'start', Load(), lineno=522, col_offset=8), [], [], None, None, lineno=522, col_offset=8), lineno=522, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=523, col_offset=8), 'assertRaises', Load(), lineno=523, col_offset=8), [Name('RuntimeError', Load(), lineno=523, col_offset=26), Name('setattr', Load(), lineno=523, col_offset=40), Name('thread', Load(), lineno=523, col_offset=49), Str('daemon', lineno=523, col_offset=57), Name('True', Load(), lineno=523, col_offset=67)], [], None, None, lineno=523, col_offset=8), lineno=523, col_offset=8)], [], lineno=520, col_offset=4)], [], lineno=504, col_offset=0), ClassDef('LockTests', [Attribute(Name('lock_tests', Load(), lineno=526, col_offset=16), 'LockTests', Load(), lineno=526, col_offset=16)], [Assign([Name('locktype', Store(), lineno=527, col_offset=4)], Call(Name('staticmethod', Load(), lineno=527, col_offset=15), [Attribute(Name('threading', Load(), lineno=527, col_offset=28), 'Lock', Load(), lineno=527, col_offset=28)], [], None, None, lineno=527, col_offset=15), lineno=527, col_offset=4)], [], lineno=526, col_offset=0), ClassDef('RLockTests', [Attribute(Name('lock_tests', Load(), lineno=529, col_offset=17), 'RLockTests', Load(), lineno=529, col_offset=17)], [Assign([Name('locktype', Store(), lineno=530, col_offset=4)], Call(Name('staticmethod', Load(), lineno=530, col_offset=15), [Attribute(Name('threading', Load(), lineno=530, col_offset=28), 'RLock', Load(), lineno=530, col_offset=28)], [], None, None, lineno=530, col_offset=15), lineno=530, col_offset=4)], [], lineno=529, col_offset=0), ClassDef('EventTests', [Attribute(Name('lock_tests', Load(), lineno=532, col_offset=17), 'EventTests', Load(), lineno=532, col_offset=17)], [Assign([Name('eventtype', Store(), lineno=533, col_offset=4)], Call(Name('staticmethod', Load(), lineno=533, col_offset=16), [Attribute(Name('threading', Load(), lineno=533, col_offset=29), 'Event', Load(), lineno=533, col_offset=29)], [], None, None, lineno=533, col_offset=16), lineno=533, col_offset=4)], [], lineno=532, col_offset=0), ClassDef('ConditionAsRLockTests', [Attribute(Name('lock_tests', Load(), lineno=535, col_offset=28), 'RLockTests', Load(), lineno=535, col_offset=28)], [Assign([Name('locktype', Store(), lineno=537, col_offset=4)], Call(Name('staticmethod', Load(), lineno=537, col_offset=15), [Attribute(Name('threading', Load(), lineno=537, col_offset=28), 'Condition', Load(), lineno=537, col_offset=28)], [], None, None, lineno=537, col_offset=15), lineno=537, col_offset=4)], [], lineno=535, col_offset=0), ClassDef('ConditionTests', [Attribute(Name('lock_tests', Load(), lineno=539, col_offset=21), 'ConditionTests', Load(), lineno=539, col_offset=21)], [Assign([Name('condtype', Store(), lineno=540, col_offset=4)], Call(Name('staticmethod', Load(), lineno=540, col_offset=15), [Attribute(Name('threading', Load(), lineno=540, col_offset=28), 'Condition', Load(), lineno=540, col_offset=28)], [], None, None, lineno=540, col_offset=15), lineno=540, col_offset=4)], [], lineno=539, col_offset=0), ClassDef('SemaphoreTests', [Attribute(Name('lock_tests', Load(), lineno=542, col_offset=21), 'SemaphoreTests', Load(), lineno=542, col_offset=21)], [Assign([Name('semtype', Store(), lineno=543, col_offset=4)], Call(Name('staticmethod', Load(), lineno=543, col_offset=14), [Attribute(Name('threading', Load(), lineno=543, col_offset=27), 'Semaphore', Load(), lineno=543, col_offset=27)], [], None, None, lineno=543, col_offset=14), lineno=543, col_offset=4)], [], lineno=542, col_offset=0), ClassDef('BoundedSemaphoreTests', [Attribute(Name('lock_tests', Load(), lineno=545, col_offset=28), 'BoundedSemaphoreTests', Load(), lineno=545, col_offset=28)], [Assign([Name('semtype', Store(), lineno=546, col_offset=4)], Call(Name('staticmethod', Load(), lineno=546, col_offset=14), [Attribute(Name('threading', Load(), lineno=546, col_offset=27), 'BoundedSemaphore', Load(), lineno=546, col_offset=27)], [], None, None, lineno=546, col_offset=14), lineno=546, col_offset=4)], [], lineno=545, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=550, col_offset=4), 'test_support', Load(), lineno=550, col_offset=4), 'run_unittest', Load(), lineno=550, col_offset=4), [Name('LockTests', Load(), lineno=550, col_offset=35), Name('RLockTests', Load(), lineno=550, col_offset=46), Name('EventTests', Load(), lineno=550, col_offset=58), Name('ConditionAsRLockTests', Load(), lineno=551, col_offset=35), Name('ConditionTests', Load(), lineno=551, col_offset=58), Name('SemaphoreTests', Load(), lineno=552, col_offset=35), Name('BoundedSemaphoreTests', Load(), lineno=552, col_offset=51), Name('ThreadTests', Load(), lineno=553, col_offset=35), Name('ThreadJoinOnShutdown', Load(), lineno=554, col_offset=35), Name('ThreadingExceptionTests', Load(), lineno=555, col_offset=35)], [], None, None, lineno=550, col_offset=4), lineno=550, col_offset=4)], [], lineno=549, col_offset=0), If(Compare(Name('__name__', Load(), lineno=558, col_offset=3), [Eq()], [Str('__main__', lineno=558, col_offset=15)], lineno=558, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=559, col_offset=4), [], [], None, None, lineno=559, col_offset=4), lineno=559, col_offset=4)], [], lineno=558, col_offset=0)])
