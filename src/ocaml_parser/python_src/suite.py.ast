Module([Expr(Str('TestSuite', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('sys', None)], lineno=3, col_offset=0), ImportFrom(None, [alias('case', None)], 1, lineno=5, col_offset=0), ImportFrom(None, [alias('util', None)], 1, lineno=6, col_offset=0), Assign([Name('__unittest', Store(), lineno=8, col_offset=0)], Name('True', Load(), lineno=8, col_offset=13), lineno=8, col_offset=0), ClassDef('BaseTestSuite', [Name('object', Load(), lineno=11, col_offset=20)], [Expr(Str("A simple test suite that doesn't provide class or module shared fixtures.\n    ", lineno=13, col_offset=-1), lineno=13, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=14, col_offset=17), Name('tests', Param(), lineno=14, col_offset=23)], None, None, [Tuple([], Load(), lineno=14, col_offset=29)]), [Assign([Attribute(Name('self', Load(), lineno=15, col_offset=8), '_tests', Store(), lineno=15, col_offset=8)], List([], Load(), lineno=15, col_offset=22), lineno=15, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=8), 'addTests', Load(), lineno=16, col_offset=8), [Name('tests', Load(), lineno=16, col_offset=22)], [], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8)], [], lineno=14, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=18, col_offset=17)], None, None, []), [Return(BinOp(Str('<%s tests=%s>', lineno=19, col_offset=15), Mod(), Tuple([Call(Attribute(Name('util', Load(), lineno=19, col_offset=34), 'strclass', Load(), lineno=19, col_offset=34), [Attribute(Name('self', Load(), lineno=19, col_offset=48), '__class__', Load(), lineno=19, col_offset=48)], [], None, None, lineno=19, col_offset=34), Call(Name('list', Load(), lineno=19, col_offset=65), [Name('self', Load(), lineno=19, col_offset=70)], [], None, None, lineno=19, col_offset=65)], Load(), lineno=19, col_offset=34), lineno=19, col_offset=15), lineno=19, col_offset=8)], [], lineno=18, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=21, col_offset=15), Name('other', Param(), lineno=21, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=22, col_offset=15), [Name('other', Load(), lineno=22, col_offset=26), Attribute(Name('self', Load(), lineno=22, col_offset=33), '__class__', Load(), lineno=22, col_offset=33)], [], None, None, lineno=22, col_offset=15), lineno=22, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=23, col_offset=19), lineno=23, col_offset=12)], [], lineno=22, col_offset=8), Return(Compare(Call(Name('list', Load(), lineno=24, col_offset=15), [Name('self', Load(), lineno=24, col_offset=20)], [], None, None, lineno=24, col_offset=15), [Eq()], [Call(Name('list', Load(), lineno=24, col_offset=29), [Name('other', Load(), lineno=24, col_offset=34)], [], None, None, lineno=24, col_offset=29)], lineno=24, col_offset=15), lineno=24, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=26, col_offset=15), Name('other', Param(), lineno=26, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=27, col_offset=19), [Eq()], [Name('other', Load(), lineno=27, col_offset=27)], lineno=27, col_offset=19), lineno=27, col_offset=15), lineno=27, col_offset=8)], [], lineno=26, col_offset=4), Assign([Name('__hash__', Store(), lineno=30, col_offset=4)], Name('None', Load(), lineno=30, col_offset=15), lineno=30, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=32, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=33, col_offset=15), [Attribute(Name('self', Load(), lineno=33, col_offset=20), '_tests', Load(), lineno=33, col_offset=20)], [], None, None, lineno=33, col_offset=15), lineno=33, col_offset=8)], [], lineno=32, col_offset=4), FunctionDef('countTestCases', arguments([Name('self', Param(), lineno=35, col_offset=23)], None, None, []), [Assign([Name('cases', Store(), lineno=36, col_offset=8)], Num(0, lineno=36, col_offset=16), lineno=36, col_offset=8), For(Name('test', Store(), lineno=37, col_offset=12), Name('self', Load(), lineno=37, col_offset=20), [AugAssign(Name('cases', Store(), lineno=38, col_offset=12), Add(), Call(Attribute(Name('test', Load(), lineno=38, col_offset=21), 'countTestCases', Load(), lineno=38, col_offset=21), [], [], None, None, lineno=38, col_offset=21), lineno=38, col_offset=12)], [], lineno=37, col_offset=8), Return(Name('cases', Load(), lineno=39, col_offset=15), lineno=39, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('addTest', arguments([Name('self', Param(), lineno=41, col_offset=16), Name('test', Param(), lineno=41, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=43, col_offset=15), [Name('test', Load(), lineno=43, col_offset=23), Str('__call__', lineno=43, col_offset=29)], [], None, None, lineno=43, col_offset=15), lineno=43, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=44, col_offset=18), [Call(Attribute(Str('{} is not callable', lineno=44, col_offset=28), 'format', Load(), lineno=44, col_offset=28), [Call(Name('repr', Load(), lineno=44, col_offset=56), [Name('test', Load(), lineno=44, col_offset=61)], [], None, None, lineno=44, col_offset=56)], [], None, None, lineno=44, col_offset=28)], [], None, None, lineno=44, col_offset=18), None, None, lineno=44, col_offset=12)], [], lineno=43, col_offset=8), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=45, col_offset=11), [Name('test', Load(), lineno=45, col_offset=22), Name('type', Load(), lineno=45, col_offset=28)], [], None, None, lineno=45, col_offset=11), Call(Name('issubclass', Load(), lineno=45, col_offset=38), [Name('test', Load(), lineno=45, col_offset=49), Tuple([Attribute(Name('case', Load(), lineno=46, col_offset=50), 'TestCase', Load(), lineno=46, col_offset=50), Name('TestSuite', Load(), lineno=46, col_offset=65)], Load(), lineno=46, col_offset=50)], [], None, None, lineno=45, col_offset=38)], lineno=45, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=47, col_offset=18), [Str('TestCases and TestSuites must be instantiated before passing them to addTest()', lineno=47, col_offset=28)], [], None, None, lineno=47, col_offset=18), None, None, lineno=47, col_offset=12)], [], lineno=45, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=49, col_offset=8), '_tests', Load(), lineno=49, col_offset=8), 'append', Load(), lineno=49, col_offset=8), [Name('test', Load(), lineno=49, col_offset=27)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], [], lineno=41, col_offset=4), FunctionDef('addTests', arguments([Name('self', Param(), lineno=51, col_offset=17), Name('tests', Param(), lineno=51, col_offset=23)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=52, col_offset=11), [Name('tests', Load(), lineno=52, col_offset=22), Name('basestring', Load(), lineno=52, col_offset=29)], [], None, None, lineno=52, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=53, col_offset=18), [Str('tests must be an iterable of tests, not a string', lineno=53, col_offset=28)], [], None, None, lineno=53, col_offset=18), None, None, lineno=53, col_offset=12)], [], lineno=52, col_offset=8), For(Name('test', Store(), lineno=54, col_offset=12), Name('tests', Load(), lineno=54, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=55, col_offset=12), 'addTest', Load(), lineno=55, col_offset=12), [Name('test', Load(), lineno=55, col_offset=25)], [], None, None, lineno=55, col_offset=12), lineno=55, col_offset=12)], [], lineno=54, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=57, col_offset=12), Name('result', Param(), lineno=57, col_offset=18)], None, None, []), [For(Name('test', Store(), lineno=58, col_offset=12), Name('self', Load(), lineno=58, col_offset=20), [If(Attribute(Name('result', Load(), lineno=59, col_offset=15), 'shouldStop', Load(), lineno=59, col_offset=15), [Break( lineno=60, col_offset=16)], [], lineno=59, col_offset=12), Expr(Call(Name('test', Load(), lineno=61, col_offset=12), [Name('result', Load(), lineno=61, col_offset=17)], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12)], [], lineno=58, col_offset=8), Return(Name('result', Load(), lineno=62, col_offset=15), lineno=62, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=64, col_offset=17)], 'args', 'kwds', []), [Return(Call(Attribute(Name('self', Load(), lineno=65, col_offset=15), 'run', Load(), lineno=65, col_offset=15), [], [], Name('args', Load(), lineno=65, col_offset=25), Name('kwds', Load(), lineno=65, col_offset=33), lineno=65, col_offset=15), lineno=65, col_offset=8)], [], lineno=64, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=67, col_offset=14)], None, None, []), [Expr(Str('Run the tests without collecting errors in a TestResult', lineno=68, col_offset=8), lineno=68, col_offset=8), For(Name('test', Store(), lineno=69, col_offset=12), Name('self', Load(), lineno=69, col_offset=20), [Expr(Call(Attribute(Name('test', Load(), lineno=70, col_offset=12), 'debug', Load(), lineno=70, col_offset=12), [], [], None, None, lineno=70, col_offset=12), lineno=70, col_offset=12)], [], lineno=69, col_offset=8)], [], lineno=67, col_offset=4)], [], lineno=11, col_offset=0), ClassDef('TestSuite', [Name('BaseTestSuite', Load(), lineno=73, col_offset=16)], [Expr(Str('A test suite is a composite test consisting of a number of TestCases.\n\n    For use, create an instance of TestSuite, then add test case instances.\n    When all tests have been added, the suite can be passed to a test\n    runner, such as TextTestRunner. It will run the individual test cases\n    in the order in which they were added, aggregating the results. When\n    subclassing, do not forget to call the base class constructor.\n    ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), FunctionDef('run', arguments([Name('self', Param(), lineno=83, col_offset=12), Name('result', Param(), lineno=83, col_offset=18), Name('debug', Param(), lineno=83, col_offset=26)], None, None, [Name('False', Load(), lineno=83, col_offset=32)]), [Assign([Name('topLevel', Store(), lineno=84, col_offset=8)], Name('False', Load(), lineno=84, col_offset=19), lineno=84, col_offset=8), If(Compare(Call(Name('getattr', Load(), lineno=85, col_offset=11), [Name('result', Load(), lineno=85, col_offset=19), Str('_testRunEntered', lineno=85, col_offset=27), Name('False', Load(), lineno=85, col_offset=46)], [], None, None, lineno=85, col_offset=11), [Is()], [Name('False', Load(), lineno=85, col_offset=56)], lineno=85, col_offset=11), [Assign([Attribute(Name('result', Load(), lineno=86, col_offset=12), '_testRunEntered', Store(), lineno=86, col_offset=12), Name('topLevel', Store(), lineno=86, col_offset=37)], Name('True', Load(), lineno=86, col_offset=48), lineno=86, col_offset=12)], [], lineno=85, col_offset=8), For(Name('test', Store(), lineno=88, col_offset=12), Name('self', Load(), lineno=88, col_offset=20), [If(Attribute(Name('result', Load(), lineno=89, col_offset=15), 'shouldStop', Load(), lineno=89, col_offset=15), [Break( lineno=90, col_offset=16)], [], lineno=89, col_offset=12), If(Call(Name('_isnotsuite', Load(), lineno=92, col_offset=15), [Name('test', Load(), lineno=92, col_offset=27)], [], None, None, lineno=92, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=93, col_offset=16), '_tearDownPreviousClass', Load(), lineno=93, col_offset=16), [Name('test', Load(), lineno=93, col_offset=44), Name('result', Load(), lineno=93, col_offset=50)], [], None, None, lineno=93, col_offset=16), lineno=93, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=16), '_handleModuleFixture', Load(), lineno=94, col_offset=16), [Name('test', Load(), lineno=94, col_offset=42), Name('result', Load(), lineno=94, col_offset=48)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=16), '_handleClassSetUp', Load(), lineno=95, col_offset=16), [Name('test', Load(), lineno=95, col_offset=39), Name('result', Load(), lineno=95, col_offset=45)], [], None, None, lineno=95, col_offset=16), lineno=95, col_offset=16), Assign([Attribute(Name('result', Load(), lineno=96, col_offset=16), '_previousTestClass', Store(), lineno=96, col_offset=16)], Attribute(Name('test', Load(), lineno=96, col_offset=44), '__class__', Load(), lineno=96, col_offset=44), lineno=96, col_offset=16), If(BoolOp(Or(), [Call(Name('getattr', Load(), lineno=98, col_offset=20), [Attribute(Name('test', Load(), lineno=98, col_offset=28), '__class__', Load(), lineno=98, col_offset=28), Str('_classSetupFailed', lineno=98, col_offset=44), Name('False', Load(), lineno=98, col_offset=65)], [], None, None, lineno=98, col_offset=20), Call(Name('getattr', Load(), lineno=99, col_offset=20), [Name('result', Load(), lineno=99, col_offset=28), Str('_moduleSetUpFailed', lineno=99, col_offset=36), Name('False', Load(), lineno=99, col_offset=58)], [], None, None, lineno=99, col_offset=20)], lineno=98, col_offset=20), [Continue( lineno=100, col_offset=20)], [], lineno=98, col_offset=16)], [], lineno=92, col_offset=12), If(UnaryOp(Not(), Name('debug', Load(), lineno=102, col_offset=19), lineno=102, col_offset=15), [Expr(Call(Name('test', Load(), lineno=103, col_offset=16), [Name('result', Load(), lineno=103, col_offset=21)], [], None, None, lineno=103, col_offset=16), lineno=103, col_offset=16)], [Expr(Call(Attribute(Name('test', Load(), lineno=105, col_offset=16), 'debug', Load(), lineno=105, col_offset=16), [], [], None, None, lineno=105, col_offset=16), lineno=105, col_offset=16)], lineno=102, col_offset=12)], [], lineno=88, col_offset=8), If(Name('topLevel', Load(), lineno=107, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=12), '_tearDownPreviousClass', Load(), lineno=108, col_offset=12), [Name('None', Load(), lineno=108, col_offset=40), Name('result', Load(), lineno=108, col_offset=46)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=12), '_handleModuleTearDown', Load(), lineno=109, col_offset=12), [Name('result', Load(), lineno=109, col_offset=39)], [], None, None, lineno=109, col_offset=12), lineno=109, col_offset=12)], [], lineno=107, col_offset=8), Return(Name('result', Load(), lineno=110, col_offset=15), lineno=110, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=112, col_offset=14)], None, None, []), [Expr(Str('Run the tests without collecting errors in a TestResult', lineno=113, col_offset=8), lineno=113, col_offset=8), Assign([Name('debug', Store(), lineno=114, col_offset=8)], Call(Name('_DebugResult', Load(), lineno=114, col_offset=16), [], [], None, None, lineno=114, col_offset=16), lineno=114, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=8), 'run', Load(), lineno=115, col_offset=8), [Name('debug', Load(), lineno=115, col_offset=17), Name('True', Load(), lineno=115, col_offset=24)], [], None, None, lineno=115, col_offset=8), lineno=115, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('_handleClassSetUp', arguments([Name('self', Param(), lineno=119, col_offset=26), Name('test', Param(), lineno=119, col_offset=32), Name('result', Param(), lineno=119, col_offset=38)], None, None, []), [Assign([Name('previousClass', Store(), lineno=120, col_offset=8)], Call(Name('getattr', Load(), lineno=120, col_offset=24), [Name('result', Load(), lineno=120, col_offset=32), Str('_previousTestClass', lineno=120, col_offset=40), Name('None', Load(), lineno=120, col_offset=62)], [], None, None, lineno=120, col_offset=24), lineno=120, col_offset=8), Assign([Name('currentClass', Store(), lineno=121, col_offset=8)], Attribute(Name('test', Load(), lineno=121, col_offset=23), '__class__', Load(), lineno=121, col_offset=23), lineno=121, col_offset=8), If(Compare(Name('currentClass', Load(), lineno=122, col_offset=11), [Eq()], [Name('previousClass', Load(), lineno=122, col_offset=27)], lineno=122, col_offset=11), [Return(None, lineno=123, col_offset=12)], [], lineno=122, col_offset=8), If(Attribute(Name('result', Load(), lineno=124, col_offset=11), '_moduleSetUpFailed', Load(), lineno=124, col_offset=11), [Return(None, lineno=125, col_offset=12)], [], lineno=124, col_offset=8), If(Call(Name('getattr', Load(), lineno=126, col_offset=11), [Name('currentClass', Load(), lineno=126, col_offset=19), Str('__unittest_skip__', lineno=126, col_offset=33), Name('False', Load(), lineno=126, col_offset=54)], [], None, None, lineno=126, col_offset=11), [Return(None, lineno=127, col_offset=12)], [], lineno=126, col_offset=8), TryExcept([Assign([Attribute(Name('currentClass', Load(), lineno=130, col_offset=12), '_classSetupFailed', Store(), lineno=130, col_offset=12)], Name('False', Load(), lineno=130, col_offset=45), lineno=130, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=131, col_offset=15), None, [Pass( lineno=134, col_offset=12)], lineno=131, col_offset=8)], [], lineno=129, col_offset=8), Assign([Name('setUpClass', Store(), lineno=136, col_offset=8)], Call(Name('getattr', Load(), lineno=136, col_offset=21), [Name('currentClass', Load(), lineno=136, col_offset=29), Str('setUpClass', lineno=136, col_offset=43), Name('None', Load(), lineno=136, col_offset=57)], [], None, None, lineno=136, col_offset=21), lineno=136, col_offset=8), If(Compare(Name('setUpClass', Load(), lineno=137, col_offset=11), [IsNot()], [Name('None', Load(), lineno=137, col_offset=29)], lineno=137, col_offset=11), [TryExcept([Expr(Call(Name('setUpClass', Load(), lineno=139, col_offset=16), [], [], None, None, lineno=139, col_offset=16), lineno=139, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=140, col_offset=19), Name('e', Store(), lineno=140, col_offset=32), [If(Call(Name('isinstance', Load(), lineno=141, col_offset=19), [Name('result', Load(), lineno=141, col_offset=30), Name('_DebugResult', Load(), lineno=141, col_offset=38)], [], None, None, lineno=141, col_offset=19), [Raise(None, None, None, lineno=142, col_offset=20)], [], lineno=141, col_offset=16), Assign([Attribute(Name('currentClass', Load(), lineno=143, col_offset=16), '_classSetupFailed', Store(), lineno=143, col_offset=16)], Name('True', Load(), lineno=143, col_offset=49), lineno=143, col_offset=16), Assign([Name('className', Store(), lineno=144, col_offset=16)], Call(Attribute(Name('util', Load(), lineno=144, col_offset=28), 'strclass', Load(), lineno=144, col_offset=28), [Name('currentClass', Load(), lineno=144, col_offset=42)], [], None, None, lineno=144, col_offset=28), lineno=144, col_offset=16), Assign([Name('errorName', Store(), lineno=145, col_offset=16)], BinOp(Str('setUpClass (%s)', lineno=145, col_offset=28), Mod(), Name('className', Load(), lineno=145, col_offset=48), lineno=145, col_offset=28), lineno=145, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=146, col_offset=16), '_addClassOrModuleLevelException', Load(), lineno=146, col_offset=16), [Name('result', Load(), lineno=146, col_offset=53), Name('e', Load(), lineno=146, col_offset=61), Name('errorName', Load(), lineno=146, col_offset=64)], [], None, None, lineno=146, col_offset=16), lineno=146, col_offset=16)], lineno=140, col_offset=12)], [], lineno=138, col_offset=12)], [], lineno=137, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('_get_previous_module', arguments([Name('self', Param(), lineno=149, col_offset=29), Name('result', Param(), lineno=149, col_offset=35)], None, None, []), [Assign([Name('previousModule', Store(), lineno=150, col_offset=8)], Name('None', Load(), lineno=150, col_offset=25), lineno=150, col_offset=8), Assign([Name('previousClass', Store(), lineno=151, col_offset=8)], Call(Name('getattr', Load(), lineno=151, col_offset=24), [Name('result', Load(), lineno=151, col_offset=32), Str('_previousTestClass', lineno=151, col_offset=40), Name('None', Load(), lineno=151, col_offset=62)], [], None, None, lineno=151, col_offset=24), lineno=151, col_offset=8), If(Compare(Name('previousClass', Load(), lineno=152, col_offset=11), [IsNot()], [Name('None', Load(), lineno=152, col_offset=32)], lineno=152, col_offset=11), [Assign([Name('previousModule', Store(), lineno=153, col_offset=12)], Attribute(Name('previousClass', Load(), lineno=153, col_offset=29), '__module__', Load(), lineno=153, col_offset=29), lineno=153, col_offset=12)], [], lineno=152, col_offset=8), Return(Name('previousModule', Load(), lineno=154, col_offset=15), lineno=154, col_offset=8)], [], lineno=149, col_offset=4), FunctionDef('_handleModuleFixture', arguments([Name('self', Param(), lineno=157, col_offset=29), Name('test', Param(), lineno=157, col_offset=35), Name('result', Param(), lineno=157, col_offset=41)], None, None, []), [Assign([Name('previousModule', Store(), lineno=158, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=158, col_offset=25), '_get_previous_module', Load(), lineno=158, col_offset=25), [Name('result', Load(), lineno=158, col_offset=51)], [], None, None, lineno=158, col_offset=25), lineno=158, col_offset=8), Assign([Name('currentModule', Store(), lineno=159, col_offset=8)], Attribute(Attribute(Name('test', Load(), lineno=159, col_offset=24), '__class__', Load(), lineno=159, col_offset=24), '__module__', Load(), lineno=159, col_offset=24), lineno=159, col_offset=8), If(Compare(Name('currentModule', Load(), lineno=160, col_offset=11), [Eq()], [Name('previousModule', Load(), lineno=160, col_offset=28)], lineno=160, col_offset=11), [Return(None, lineno=161, col_offset=12)], [], lineno=160, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), '_handleModuleTearDown', Load(), lineno=163, col_offset=8), [Name('result', Load(), lineno=163, col_offset=35)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8), Assign([Attribute(Name('result', Load(), lineno=165, col_offset=8), '_moduleSetUpFailed', Store(), lineno=165, col_offset=8)], Name('False', Load(), lineno=165, col_offset=36), lineno=165, col_offset=8), TryExcept([Assign([Name('module', Store(), lineno=167, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=167, col_offset=21), 'modules', Load(), lineno=167, col_offset=21), Index(Name('currentModule', Load(), lineno=167, col_offset=33)), Load(), lineno=167, col_offset=21), lineno=167, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=168, col_offset=15), None, [Return(None, lineno=169, col_offset=12)], lineno=168, col_offset=8)], [], lineno=166, col_offset=8), Assign([Name('setUpModule', Store(), lineno=170, col_offset=8)], Call(Name('getattr', Load(), lineno=170, col_offset=22), [Name('module', Load(), lineno=170, col_offset=30), Str('setUpModule', lineno=170, col_offset=38), Name('None', Load(), lineno=170, col_offset=53)], [], None, None, lineno=170, col_offset=22), lineno=170, col_offset=8), If(Compare(Name('setUpModule', Load(), lineno=171, col_offset=11), [IsNot()], [Name('None', Load(), lineno=171, col_offset=30)], lineno=171, col_offset=11), [TryExcept([Expr(Call(Name('setUpModule', Load(), lineno=173, col_offset=16), [], [], None, None, lineno=173, col_offset=16), lineno=173, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=174, col_offset=19), Name('e', Store(), lineno=174, col_offset=30), [If(Call(Name('isinstance', Load(), lineno=175, col_offset=19), [Name('result', Load(), lineno=175, col_offset=30), Name('_DebugResult', Load(), lineno=175, col_offset=38)], [], None, None, lineno=175, col_offset=19), [Raise(None, None, None, lineno=176, col_offset=20)], [], lineno=175, col_offset=16), Assign([Attribute(Name('result', Load(), lineno=177, col_offset=16), '_moduleSetUpFailed', Store(), lineno=177, col_offset=16)], Name('True', Load(), lineno=177, col_offset=44), lineno=177, col_offset=16), Assign([Name('errorName', Store(), lineno=178, col_offset=16)], BinOp(Str('setUpModule (%s)', lineno=178, col_offset=28), Mod(), Name('currentModule', Load(), lineno=178, col_offset=49), lineno=178, col_offset=28), lineno=178, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=179, col_offset=16), '_addClassOrModuleLevelException', Load(), lineno=179, col_offset=16), [Name('result', Load(), lineno=179, col_offset=53), Name('e', Load(), lineno=179, col_offset=61), Name('errorName', Load(), lineno=179, col_offset=64)], [], None, None, lineno=179, col_offset=16), lineno=179, col_offset=16)], lineno=174, col_offset=12)], [], lineno=172, col_offset=12)], [], lineno=171, col_offset=8)], [], lineno=157, col_offset=4), FunctionDef('_addClassOrModuleLevelException', arguments([Name('self', Param(), lineno=181, col_offset=40), Name('result', Param(), lineno=181, col_offset=46), Name('exception', Param(), lineno=181, col_offset=54), Name('errorName', Param(), lineno=181, col_offset=65)], None, None, []), [Assign([Name('error', Store(), lineno=182, col_offset=8)], Call(Name('_ErrorHolder', Load(), lineno=182, col_offset=16), [Name('errorName', Load(), lineno=182, col_offset=29)], [], None, None, lineno=182, col_offset=16), lineno=182, col_offset=8), Assign([Name('addSkip', Store(), lineno=183, col_offset=8)], Call(Name('getattr', Load(), lineno=183, col_offset=18), [Name('result', Load(), lineno=183, col_offset=26), Str('addSkip', lineno=183, col_offset=34), Name('None', Load(), lineno=183, col_offset=45)], [], None, None, lineno=183, col_offset=18), lineno=183, col_offset=8), If(BoolOp(And(), [Compare(Name('addSkip', Load(), lineno=184, col_offset=11), [IsNot()], [Name('None', Load(), lineno=184, col_offset=26)], lineno=184, col_offset=11), Call(Name('isinstance', Load(), lineno=184, col_offset=35), [Name('exception', Load(), lineno=184, col_offset=46), Attribute(Name('case', Load(), lineno=184, col_offset=57), 'SkipTest', Load(), lineno=184, col_offset=57)], [], None, None, lineno=184, col_offset=35)], lineno=184, col_offset=11), [Expr(Call(Name('addSkip', Load(), lineno=185, col_offset=12), [Name('error', Load(), lineno=185, col_offset=20), Call(Name('str', Load(), lineno=185, col_offset=27), [Name('exception', Load(), lineno=185, col_offset=31)], [], None, None, lineno=185, col_offset=27)], [], None, None, lineno=185, col_offset=12), lineno=185, col_offset=12)], [Expr(Call(Attribute(Name('result', Load(), lineno=187, col_offset=12), 'addError', Load(), lineno=187, col_offset=12), [Name('error', Load(), lineno=187, col_offset=28), Call(Attribute(Name('sys', Load(), lineno=187, col_offset=35), 'exc_info', Load(), lineno=187, col_offset=35), [], [], None, None, lineno=187, col_offset=35)], [], None, None, lineno=187, col_offset=12), lineno=187, col_offset=12)], lineno=184, col_offset=8)], [], lineno=181, col_offset=4), FunctionDef('_handleModuleTearDown', arguments([Name('self', Param(), lineno=189, col_offset=30), Name('result', Param(), lineno=189, col_offset=36)], None, None, []), [Assign([Name('previousModule', Store(), lineno=190, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=190, col_offset=25), '_get_previous_module', Load(), lineno=190, col_offset=25), [Name('result', Load(), lineno=190, col_offset=51)], [], None, None, lineno=190, col_offset=25), lineno=190, col_offset=8), If(Compare(Name('previousModule', Load(), lineno=191, col_offset=11), [Is()], [Name('None', Load(), lineno=191, col_offset=29)], lineno=191, col_offset=11), [Return(None, lineno=192, col_offset=12)], [], lineno=191, col_offset=8), If(Attribute(Name('result', Load(), lineno=193, col_offset=11), '_moduleSetUpFailed', Load(), lineno=193, col_offset=11), [Return(None, lineno=194, col_offset=12)], [], lineno=193, col_offset=8), TryExcept([Assign([Name('module', Store(), lineno=197, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=197, col_offset=21), 'modules', Load(), lineno=197, col_offset=21), Index(Name('previousModule', Load(), lineno=197, col_offset=33)), Load(), lineno=197, col_offset=21), lineno=197, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=198, col_offset=15), None, [Return(None, lineno=199, col_offset=12)], lineno=198, col_offset=8)], [], lineno=196, col_offset=8), Assign([Name('tearDownModule', Store(), lineno=201, col_offset=8)], Call(Name('getattr', Load(), lineno=201, col_offset=25), [Name('module', Load(), lineno=201, col_offset=33), Str('tearDownModule', lineno=201, col_offset=41), Name('None', Load(), lineno=201, col_offset=59)], [], None, None, lineno=201, col_offset=25), lineno=201, col_offset=8), If(Compare(Name('tearDownModule', Load(), lineno=202, col_offset=11), [IsNot()], [Name('None', Load(), lineno=202, col_offset=33)], lineno=202, col_offset=11), [TryExcept([Expr(Call(Name('tearDownModule', Load(), lineno=204, col_offset=16), [], [], None, None, lineno=204, col_offset=16), lineno=204, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=205, col_offset=19), Name('e', Store(), lineno=205, col_offset=32), [If(Call(Name('isinstance', Load(), lineno=206, col_offset=19), [Name('result', Load(), lineno=206, col_offset=30), Name('_DebugResult', Load(), lineno=206, col_offset=38)], [], None, None, lineno=206, col_offset=19), [Raise(None, None, None, lineno=207, col_offset=20)], [], lineno=206, col_offset=16), Assign([Name('errorName', Store(), lineno=208, col_offset=16)], BinOp(Str('tearDownModule (%s)', lineno=208, col_offset=28), Mod(), Name('previousModule', Load(), lineno=208, col_offset=52), lineno=208, col_offset=28), lineno=208, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=209, col_offset=16), '_addClassOrModuleLevelException', Load(), lineno=209, col_offset=16), [Name('result', Load(), lineno=209, col_offset=53), Name('e', Load(), lineno=209, col_offset=61), Name('errorName', Load(), lineno=209, col_offset=64)], [], None, None, lineno=209, col_offset=16), lineno=209, col_offset=16)], lineno=205, col_offset=12)], [], lineno=203, col_offset=12)], [], lineno=202, col_offset=8)], [], lineno=189, col_offset=4), FunctionDef('_tearDownPreviousClass', arguments([Name('self', Param(), lineno=211, col_offset=31), Name('test', Param(), lineno=211, col_offset=37), Name('result', Param(), lineno=211, col_offset=43)], None, None, []), [Assign([Name('previousClass', Store(), lineno=212, col_offset=8)], Call(Name('getattr', Load(), lineno=212, col_offset=24), [Name('result', Load(), lineno=212, col_offset=32), Str('_previousTestClass', lineno=212, col_offset=40), Name('None', Load(), lineno=212, col_offset=62)], [], None, None, lineno=212, col_offset=24), lineno=212, col_offset=8), Assign([Name('currentClass', Store(), lineno=213, col_offset=8)], Attribute(Name('test', Load(), lineno=213, col_offset=23), '__class__', Load(), lineno=213, col_offset=23), lineno=213, col_offset=8), If(Compare(Name('currentClass', Load(), lineno=214, col_offset=11), [Eq()], [Name('previousClass', Load(), lineno=214, col_offset=27)], lineno=214, col_offset=11), [Return(None, lineno=215, col_offset=12)], [], lineno=214, col_offset=8), If(Call(Name('getattr', Load(), lineno=216, col_offset=11), [Name('previousClass', Load(), lineno=216, col_offset=19), Str('_classSetupFailed', lineno=216, col_offset=34), Name('False', Load(), lineno=216, col_offset=55)], [], None, None, lineno=216, col_offset=11), [Return(None, lineno=217, col_offset=12)], [], lineno=216, col_offset=8), If(Call(Name('getattr', Load(), lineno=218, col_offset=11), [Name('result', Load(), lineno=218, col_offset=19), Str('_moduleSetUpFailed', lineno=218, col_offset=27), Name('False', Load(), lineno=218, col_offset=49)], [], None, None, lineno=218, col_offset=11), [Return(None, lineno=219, col_offset=12)], [], lineno=218, col_offset=8), If(Call(Name('getattr', Load(), lineno=220, col_offset=11), [Name('previousClass', Load(), lineno=220, col_offset=19), Str('__unittest_skip__', lineno=220, col_offset=34), Name('False', Load(), lineno=220, col_offset=55)], [], None, None, lineno=220, col_offset=11), [Return(None, lineno=221, col_offset=12)], [], lineno=220, col_offset=8), Assign([Name('tearDownClass', Store(), lineno=223, col_offset=8)], Call(Name('getattr', Load(), lineno=223, col_offset=24), [Name('previousClass', Load(), lineno=223, col_offset=32), Str('tearDownClass', lineno=223, col_offset=47), Name('None', Load(), lineno=223, col_offset=64)], [], None, None, lineno=223, col_offset=24), lineno=223, col_offset=8), If(Compare(Name('tearDownClass', Load(), lineno=224, col_offset=11), [IsNot()], [Name('None', Load(), lineno=224, col_offset=32)], lineno=224, col_offset=11), [TryExcept([Expr(Call(Name('tearDownClass', Load(), lineno=226, col_offset=16), [], [], None, None, lineno=226, col_offset=16), lineno=226, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=227, col_offset=19), Name('e', Store(), lineno=227, col_offset=30), [If(Call(Name('isinstance', Load(), lineno=228, col_offset=19), [Name('result', Load(), lineno=228, col_offset=30), Name('_DebugResult', Load(), lineno=228, col_offset=38)], [], None, None, lineno=228, col_offset=19), [Raise(None, None, None, lineno=229, col_offset=20)], [], lineno=228, col_offset=16), Assign([Name('className', Store(), lineno=230, col_offset=16)], Call(Attribute(Name('util', Load(), lineno=230, col_offset=28), 'strclass', Load(), lineno=230, col_offset=28), [Name('previousClass', Load(), lineno=230, col_offset=42)], [], None, None, lineno=230, col_offset=28), lineno=230, col_offset=16), Assign([Name('errorName', Store(), lineno=231, col_offset=16)], BinOp(Str('tearDownClass (%s)', lineno=231, col_offset=28), Mod(), Name('className', Load(), lineno=231, col_offset=51), lineno=231, col_offset=28), lineno=231, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=232, col_offset=16), '_addClassOrModuleLevelException', Load(), lineno=232, col_offset=16), [Name('result', Load(), lineno=232, col_offset=53), Name('e', Load(), lineno=232, col_offset=61), Name('errorName', Load(), lineno=232, col_offset=64)], [], None, None, lineno=232, col_offset=16), lineno=232, col_offset=16)], lineno=227, col_offset=12)], [], lineno=225, col_offset=12)], [], lineno=224, col_offset=8)], [], lineno=211, col_offset=4)], [], lineno=73, col_offset=0), ClassDef('_ErrorHolder', [Name('object', Load(), lineno=235, col_offset=19)], [Expr(Str('\n    Placeholder for a TestCase inside a result. As far as a TestResult\n    is concerned, this looks exactly like a unit test. Used to insert\n    arbitrary errors into a test suite run.\n    ', lineno=240, col_offset=-1), lineno=240, col_offset=-1), Assign([Name('failureException', Store(), lineno=245, col_offset=4)], Name('None', Load(), lineno=245, col_offset=23), lineno=245, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=247, col_offset=17), Name('description', Param(), lineno=247, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=248, col_offset=8), 'description', Store(), lineno=248, col_offset=8)], Name('description', Load(), lineno=248, col_offset=27), lineno=248, col_offset=8)], [], lineno=247, col_offset=4), FunctionDef('id', arguments([Name('self', Param(), lineno=250, col_offset=11)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=251, col_offset=15), 'description', Load(), lineno=251, col_offset=15), lineno=251, col_offset=8)], [], lineno=250, col_offset=4), FunctionDef('shortDescription', arguments([Name('self', Param(), lineno=253, col_offset=25)], None, None, []), [Return(Name('None', Load(), lineno=254, col_offset=15), lineno=254, col_offset=8)], [], lineno=253, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=256, col_offset=17)], None, None, []), [Return(BinOp(Str('<ErrorHolder description=%r>', lineno=257, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=257, col_offset=49), 'description', Load(), lineno=257, col_offset=49)], Load(), lineno=257, col_offset=49), lineno=257, col_offset=15), lineno=257, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=259, col_offset=16)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=260, col_offset=15), 'id', Load(), lineno=260, col_offset=15), [], [], None, None, lineno=260, col_offset=15), lineno=260, col_offset=8)], [], lineno=259, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=262, col_offset=12), Name('result', Param(), lineno=262, col_offset=18)], None, None, []), [Pass( lineno=265, col_offset=8)], [], lineno=262, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=267, col_offset=17), Name('result', Param(), lineno=267, col_offset=23)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=268, col_offset=15), 'run', Load(), lineno=268, col_offset=15), [Name('result', Load(), lineno=268, col_offset=24)], [], None, None, lineno=268, col_offset=15), lineno=268, col_offset=8)], [], lineno=267, col_offset=4), FunctionDef('countTestCases', arguments([Name('self', Param(), lineno=270, col_offset=23)], None, None, []), [Return(Num(0, lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4)], [], lineno=235, col_offset=0), FunctionDef('_isnotsuite', arguments([Name('test', Param(), lineno=273, col_offset=16)], None, None, []), [Expr(Str('A crude way to tell apart testcases and suites with duck-typing', lineno=274, col_offset=4), lineno=274, col_offset=4), TryExcept([Expr(Call(Name('iter', Load(), lineno=276, col_offset=8), [Name('test', Load(), lineno=276, col_offset=13)], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8)], [ExceptHandler(Name('TypeError', Load(), lineno=277, col_offset=11), None, [Return(Name('True', Load(), lineno=278, col_offset=15), lineno=278, col_offset=8)], lineno=277, col_offset=4)], [], lineno=275, col_offset=4), Return(Name('False', Load(), lineno=279, col_offset=11), lineno=279, col_offset=4)], [], lineno=273, col_offset=0), ClassDef('_DebugResult', [Name('object', Load(), lineno=282, col_offset=19)], [Expr(Str('Used by the TestSuite to hold previous class when running in debug.', lineno=283, col_offset=4), lineno=283, col_offset=4), Assign([Name('_previousTestClass', Store(), lineno=284, col_offset=4)], Name('None', Load(), lineno=284, col_offset=25), lineno=284, col_offset=4), Assign([Name('_moduleSetUpFailed', Store(), lineno=285, col_offset=4)], Name('False', Load(), lineno=285, col_offset=25), lineno=285, col_offset=4), Assign([Name('shouldStop', Store(), lineno=286, col_offset=4)], Name('False', Load(), lineno=286, col_offset=17), lineno=286, col_offset=4)], [], lineno=282, col_offset=0)])
