Module([Expr(Str('Simple class to read IFF chunks.\n\nAn IFF chunk (used in formats such as AIFF, TIFF, RMFF (RealMedia File\nFormat)) has the following structure:\n\n+----------------+\n| ID (4 bytes)   |\n+----------------+\n| size (4 bytes) |\n+----------------+\n| data           |\n| ...            |\n+----------------+\n\nThe ID is a 4-byte string which identifies the type of chunk.\n\nThe size field (a 32-bit value, encoded using big-endian byte order)\ngives the size of the whole chunk, including the 8-byte header.\n\nUsually an IFF-type file consists of one or more chunks.  The proposed\nusage of the Chunk class defined here is to instantiate an instance at\nthe start of each chunk and read from the instance until it reaches\nthe end, after which a new instance can be instantiated.  At the end\nof the file, creating a new instance will fail with a EOFError\nexception.\n\nUsage:\nwhile True:\n    try:\n        chunk = Chunk(file)\n    except EOFError:\n        break\n    chunktype = chunk.getname()\n    while True:\n        data = chunk.read(nbytes)\n        if not data:\n            pass\n        # do something with data\n\nThe interface is file-like.  The implemented methods are:\nread, close, seek, tell, isatty.\nExtra methods are: skip() (called by close, skips to the end of the chunk),\ngetname() (returns the name (ID) of the chunk)\n\nThe __init__ method has one required argument, a file-like object\n(including a chunk instance), and one optional argument, a flag which\nspecifies whether or not chunks are aligned on 2-byte boundaries.  The\ndefault is 1, i.e. aligned.\n', lineno=49, col_offset=-1), lineno=49, col_offset=-1), ClassDef('Chunk', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=52, col_offset=17), Name('file', Param(), lineno=52, col_offset=23), Name('align', Param(), lineno=52, col_offset=29), Name('bigendian', Param(), lineno=52, col_offset=41), Name('inclheader', Param(), lineno=52, col_offset=57)], None, None, [Name('True', Load(), lineno=52, col_offset=35), Name('True', Load(), lineno=52, col_offset=51), Name('False', Load(), lineno=52, col_offset=68)]), [Import([alias('struct', None)], lineno=53, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=54, col_offset=8), 'closed', Store(), lineno=54, col_offset=8)], Name('False', Load(), lineno=54, col_offset=22), lineno=54, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), 'align', Store(), lineno=55, col_offset=8)], Name('align', Load(), lineno=55, col_offset=21), lineno=55, col_offset=8), If(Name('bigendian', Load(), lineno=56, col_offset=11), [Assign([Name('strflag', Store(), lineno=57, col_offset=12)], Str('>', lineno=57, col_offset=22), lineno=57, col_offset=12)], [Assign([Name('strflag', Store(), lineno=59, col_offset=12)], Str('<', lineno=59, col_offset=22), lineno=59, col_offset=12)], lineno=56, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=60, col_offset=8), 'file', Store(), lineno=60, col_offset=8)], Name('file', Load(), lineno=60, col_offset=20), lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'chunkname', Store(), lineno=61, col_offset=8)], Call(Attribute(Name('file', Load(), lineno=61, col_offset=25), 'read', Load(), lineno=61, col_offset=25), [Num(4, lineno=61, col_offset=35)], [], None, None, lineno=61, col_offset=25), lineno=61, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=62, col_offset=11), [Attribute(Name('self', Load(), lineno=62, col_offset=15), 'chunkname', Load(), lineno=62, col_offset=15)], [], None, None, lineno=62, col_offset=11), [Lt()], [Num(4, lineno=62, col_offset=33)], lineno=62, col_offset=11), [Raise(Name('EOFError', Load(), lineno=63, col_offset=18), None, None, lineno=63, col_offset=12)], [], lineno=62, col_offset=8), TryExcept([Assign([Attribute(Name('self', Load(), lineno=65, col_offset=12), 'chunksize', Store(), lineno=65, col_offset=12)], Subscript(Call(Attribute(Name('struct', Load(), lineno=65, col_offset=29), 'unpack', Load(), lineno=65, col_offset=29), [BinOp(Name('strflag', Load(), lineno=65, col_offset=43), Add(), Str('L', lineno=65, col_offset=51), lineno=65, col_offset=43), Call(Attribute(Name('file', Load(), lineno=65, col_offset=56), 'read', Load(), lineno=65, col_offset=56), [Num(4, lineno=65, col_offset=66)], [], None, None, lineno=65, col_offset=56)], [], None, None, lineno=65, col_offset=29), Index(Num(0, lineno=65, col_offset=70)), Load(), lineno=65, col_offset=29), lineno=65, col_offset=12)], [ExceptHandler(Attribute(Name('struct', Load(), lineno=66, col_offset=15), 'error', Load(), lineno=66, col_offset=15), None, [Raise(Name('EOFError', Load(), lineno=67, col_offset=18), None, None, lineno=67, col_offset=12)], lineno=66, col_offset=8)], [], lineno=64, col_offset=8), If(Name('inclheader', Load(), lineno=68, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=69, col_offset=12), 'chunksize', Store(), lineno=69, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=69, col_offset=29), 'chunksize', Load(), lineno=69, col_offset=29), Sub(), Num(8, lineno=69, col_offset=46), lineno=69, col_offset=29), lineno=69, col_offset=12)], [], lineno=68, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=70, col_offset=8), 'size_read', Store(), lineno=70, col_offset=8)], Num(0, lineno=70, col_offset=25), lineno=70, col_offset=8), TryExcept([Assign([Attribute(Name('self', Load(), lineno=72, col_offset=12), 'offset', Store(), lineno=72, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=72, col_offset=26), 'file', Load(), lineno=72, col_offset=26), 'tell', Load(), lineno=72, col_offset=26), [], [], None, None, lineno=72, col_offset=26), lineno=72, col_offset=12)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=73, col_offset=16), Name('IOError', Load(), lineno=73, col_offset=32)], Load(), lineno=73, col_offset=16), None, [Assign([Attribute(Name('self', Load(), lineno=74, col_offset=12), 'seekable', Store(), lineno=74, col_offset=12)], Name('False', Load(), lineno=74, col_offset=28), lineno=74, col_offset=12)], lineno=73, col_offset=8)], [Assign([Attribute(Name('self', Load(), lineno=76, col_offset=12), 'seekable', Store(), lineno=76, col_offset=12)], Name('True', Load(), lineno=76, col_offset=28), lineno=76, col_offset=12)], lineno=71, col_offset=8)], [], lineno=52, col_offset=4), FunctionDef('getname', arguments([Name('self', Param(), lineno=78, col_offset=16)], None, None, []), [Expr(Str('Return the name (ID) of the current chunk.', lineno=79, col_offset=8), lineno=79, col_offset=8), Return(Attribute(Name('self', Load(), lineno=80, col_offset=15), 'chunkname', Load(), lineno=80, col_offset=15), lineno=80, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('getsize', arguments([Name('self', Param(), lineno=82, col_offset=16)], None, None, []), [Expr(Str('Return the size of the current chunk.', lineno=83, col_offset=8), lineno=83, col_offset=8), Return(Attribute(Name('self', Load(), lineno=84, col_offset=15), 'chunksize', Load(), lineno=84, col_offset=15), lineno=84, col_offset=8)], [], lineno=82, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=86, col_offset=14)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=87, col_offset=15), 'closed', Load(), lineno=87, col_offset=15), lineno=87, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=12), 'skip', Load(), lineno=88, col_offset=12), [], [], None, None, lineno=88, col_offset=12), lineno=88, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=89, col_offset=12), 'closed', Store(), lineno=89, col_offset=12)], Name('True', Load(), lineno=89, col_offset=26), lineno=89, col_offset=12)], [], lineno=87, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=91, col_offset=15)], None, None, []), [If(Attribute(Name('self', Load(), lineno=92, col_offset=11), 'closed', Load(), lineno=92, col_offset=11), [Raise(Name('ValueError', Load(), lineno=93, col_offset=18), Str('I/O operation on closed file', lineno=93, col_offset=30), None, lineno=93, col_offset=12)], [], lineno=92, col_offset=8), Return(Name('False', Load(), lineno=94, col_offset=15), lineno=94, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=96, col_offset=13), Name('pos', Param(), lineno=96, col_offset=19), Name('whence', Param(), lineno=96, col_offset=24)], None, None, [Num(0, lineno=96, col_offset=31)]), [Expr(Str('Seek to specified position into the chunk.\n        Default position is 0 (start of chunk).\n        If the file is not seekable, this will result in an error.\n        ', lineno=100, col_offset=-1), lineno=100, col_offset=-1), If(Attribute(Name('self', Load(), lineno=102, col_offset=11), 'closed', Load(), lineno=102, col_offset=11), [Raise(Name('ValueError', Load(), lineno=103, col_offset=18), Str('I/O operation on closed file', lineno=103, col_offset=30), None, lineno=103, col_offset=12)], [], lineno=102, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=104, col_offset=15), 'seekable', Load(), lineno=104, col_offset=15), lineno=104, col_offset=11), [Raise(Name('IOError', Load(), lineno=105, col_offset=18), Str('cannot seek', lineno=105, col_offset=27), None, lineno=105, col_offset=12)], [], lineno=104, col_offset=8), If(Compare(Name('whence', Load(), lineno=106, col_offset=11), [Eq()], [Num(1, lineno=106, col_offset=21)], lineno=106, col_offset=11), [Assign([Name('pos', Store(), lineno=107, col_offset=12)], BinOp(Name('pos', Load(), lineno=107, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=107, col_offset=24), 'size_read', Load(), lineno=107, col_offset=24), lineno=107, col_offset=18), lineno=107, col_offset=12)], [If(Compare(Name('whence', Load(), lineno=108, col_offset=13), [Eq()], [Num(2, lineno=108, col_offset=23)], lineno=108, col_offset=13), [Assign([Name('pos', Store(), lineno=109, col_offset=12)], BinOp(Name('pos', Load(), lineno=109, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=109, col_offset=24), 'chunksize', Load(), lineno=109, col_offset=24), lineno=109, col_offset=18), lineno=109, col_offset=12)], [], lineno=108, col_offset=13)], lineno=106, col_offset=8), If(BoolOp(Or(), [Compare(Name('pos', Load(), lineno=110, col_offset=11), [Lt()], [Num(0, lineno=110, col_offset=17)], lineno=110, col_offset=11), Compare(Name('pos', Load(), lineno=110, col_offset=22), [Gt()], [Attribute(Name('self', Load(), lineno=110, col_offset=28), 'chunksize', Load(), lineno=110, col_offset=28)], lineno=110, col_offset=22)], lineno=110, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=111, col_offset=18), None, None, lineno=111, col_offset=12)], [], lineno=110, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=112, col_offset=8), 'file', Load(), lineno=112, col_offset=8), 'seek', Load(), lineno=112, col_offset=8), [BinOp(Attribute(Name('self', Load(), lineno=112, col_offset=23), 'offset', Load(), lineno=112, col_offset=23), Add(), Name('pos', Load(), lineno=112, col_offset=37), lineno=112, col_offset=23), Num(0, lineno=112, col_offset=42)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=113, col_offset=8), 'size_read', Store(), lineno=113, col_offset=8)], Name('pos', Load(), lineno=113, col_offset=25), lineno=113, col_offset=8)], [], lineno=96, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=115, col_offset=13)], None, None, []), [If(Attribute(Name('self', Load(), lineno=116, col_offset=11), 'closed', Load(), lineno=116, col_offset=11), [Raise(Name('ValueError', Load(), lineno=117, col_offset=18), Str('I/O operation on closed file', lineno=117, col_offset=30), None, lineno=117, col_offset=12)], [], lineno=116, col_offset=8), Return(Attribute(Name('self', Load(), lineno=118, col_offset=15), 'size_read', Load(), lineno=118, col_offset=15), lineno=118, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=120, col_offset=13), Name('size', Param(), lineno=120, col_offset=19)], None, None, [Num(-1, lineno=120, col_offset=25)]), [Expr(Str('Read at most size bytes from the chunk.\n        If size is omitted or negative, read until the end\n        of the chunk.\n        ', lineno=124, col_offset=-1), lineno=124, col_offset=-1), If(Attribute(Name('self', Load(), lineno=126, col_offset=11), 'closed', Load(), lineno=126, col_offset=11), [Raise(Name('ValueError', Load(), lineno=127, col_offset=18), Str('I/O operation on closed file', lineno=127, col_offset=30), None, lineno=127, col_offset=12)], [], lineno=126, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=128, col_offset=11), 'size_read', Load(), lineno=128, col_offset=11), [GtE()], [Attribute(Name('self', Load(), lineno=128, col_offset=29), 'chunksize', Load(), lineno=128, col_offset=29)], lineno=128, col_offset=11), [Return(Str('', lineno=129, col_offset=19), lineno=129, col_offset=12)], [], lineno=128, col_offset=8), If(Compare(Name('size', Load(), lineno=130, col_offset=11), [Lt()], [Num(0, lineno=130, col_offset=18)], lineno=130, col_offset=11), [Assign([Name('size', Store(), lineno=131, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=131, col_offset=19), 'chunksize', Load(), lineno=131, col_offset=19), Sub(), Attribute(Name('self', Load(), lineno=131, col_offset=36), 'size_read', Load(), lineno=131, col_offset=36), lineno=131, col_offset=19), lineno=131, col_offset=12)], [], lineno=130, col_offset=8), If(Compare(Name('size', Load(), lineno=132, col_offset=11), [Gt()], [BinOp(Attribute(Name('self', Load(), lineno=132, col_offset=18), 'chunksize', Load(), lineno=132, col_offset=18), Sub(), Attribute(Name('self', Load(), lineno=132, col_offset=35), 'size_read', Load(), lineno=132, col_offset=35), lineno=132, col_offset=18)], lineno=132, col_offset=11), [Assign([Name('size', Store(), lineno=133, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=133, col_offset=19), 'chunksize', Load(), lineno=133, col_offset=19), Sub(), Attribute(Name('self', Load(), lineno=133, col_offset=36), 'size_read', Load(), lineno=133, col_offset=36), lineno=133, col_offset=19), lineno=133, col_offset=12)], [], lineno=132, col_offset=8), Assign([Name('data', Store(), lineno=134, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=134, col_offset=15), 'file', Load(), lineno=134, col_offset=15), 'read', Load(), lineno=134, col_offset=15), [Name('size', Load(), lineno=134, col_offset=30)], [], None, None, lineno=134, col_offset=15), lineno=134, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=135, col_offset=8), 'size_read', Store(), lineno=135, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=135, col_offset=25), 'size_read', Load(), lineno=135, col_offset=25), Add(), Call(Name('len', Load(), lineno=135, col_offset=42), [Name('data', Load(), lineno=135, col_offset=46)], [], None, None, lineno=135, col_offset=42), lineno=135, col_offset=25), lineno=135, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=136, col_offset=11), 'size_read', Load(), lineno=136, col_offset=11), [Eq()], [Attribute(Name('self', Load(), lineno=136, col_offset=29), 'chunksize', Load(), lineno=136, col_offset=29)], lineno=136, col_offset=11), Attribute(Name('self', Load(), lineno=137, col_offset=11), 'align', Load(), lineno=137, col_offset=11), BinOp(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'chunksize', Load(), lineno=138, col_offset=12), BitAnd(), Num(1, lineno=138, col_offset=29), lineno=138, col_offset=12)], lineno=136, col_offset=11), [Assign([Name('dummy', Store(), lineno=139, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=139, col_offset=20), 'file', Load(), lineno=139, col_offset=20), 'read', Load(), lineno=139, col_offset=20), [Num(1, lineno=139, col_offset=35)], [], None, None, lineno=139, col_offset=20), lineno=139, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=140, col_offset=12), 'size_read', Store(), lineno=140, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=140, col_offset=29), 'size_read', Load(), lineno=140, col_offset=29), Add(), Call(Name('len', Load(), lineno=140, col_offset=46), [Name('dummy', Load(), lineno=140, col_offset=50)], [], None, None, lineno=140, col_offset=46), lineno=140, col_offset=29), lineno=140, col_offset=12)], [], lineno=136, col_offset=8), Return(Name('data', Load(), lineno=141, col_offset=15), lineno=141, col_offset=8)], [], lineno=120, col_offset=4), FunctionDef('skip', arguments([Name('self', Param(), lineno=143, col_offset=13)], None, None, []), [Expr(Str('Skip the rest of the chunk.\n        If you are not interested in the contents of the chunk,\n        this method should be called so that the file points to\n        the start of the next chunk.\n        ', lineno=148, col_offset=-1), lineno=148, col_offset=-1), If(Attribute(Name('self', Load(), lineno=150, col_offset=11), 'closed', Load(), lineno=150, col_offset=11), [Raise(Name('ValueError', Load(), lineno=151, col_offset=18), Str('I/O operation on closed file', lineno=151, col_offset=30), None, lineno=151, col_offset=12)], [], lineno=150, col_offset=8), If(Attribute(Name('self', Load(), lineno=152, col_offset=11), 'seekable', Load(), lineno=152, col_offset=11), [TryExcept([Assign([Name('n', Store(), lineno=154, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=154, col_offset=20), 'chunksize', Load(), lineno=154, col_offset=20), Sub(), Attribute(Name('self', Load(), lineno=154, col_offset=37), 'size_read', Load(), lineno=154, col_offset=37), lineno=154, col_offset=20), lineno=154, col_offset=16), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=156, col_offset=19), 'align', Load(), lineno=156, col_offset=19), BinOp(Attribute(Name('self', Load(), lineno=156, col_offset=35), 'chunksize', Load(), lineno=156, col_offset=35), BitAnd(), Num(1, lineno=156, col_offset=52), lineno=156, col_offset=35)], lineno=156, col_offset=19), [Assign([Name('n', Store(), lineno=157, col_offset=20)], BinOp(Name('n', Load(), lineno=157, col_offset=24), Add(), Num(1, lineno=157, col_offset=28), lineno=157, col_offset=24), lineno=157, col_offset=20)], [], lineno=156, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=158, col_offset=16), 'file', Load(), lineno=158, col_offset=16), 'seek', Load(), lineno=158, col_offset=16), [Name('n', Load(), lineno=158, col_offset=31), Num(1, lineno=158, col_offset=34)], [], None, None, lineno=158, col_offset=16), lineno=158, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=159, col_offset=16), 'size_read', Store(), lineno=159, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=159, col_offset=33), 'size_read', Load(), lineno=159, col_offset=33), Add(), Name('n', Load(), lineno=159, col_offset=50), lineno=159, col_offset=33), lineno=159, col_offset=16), Return(None, lineno=160, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=161, col_offset=19), None, [Pass( lineno=162, col_offset=16)], lineno=161, col_offset=12)], [], lineno=153, col_offset=12)], [], lineno=152, col_offset=8), While(Compare(Attribute(Name('self', Load(), lineno=163, col_offset=14), 'size_read', Load(), lineno=163, col_offset=14), [Lt()], [Attribute(Name('self', Load(), lineno=163, col_offset=31), 'chunksize', Load(), lineno=163, col_offset=31)], lineno=163, col_offset=14), [Assign([Name('n', Store(), lineno=164, col_offset=12)], Call(Name('min', Load(), lineno=164, col_offset=16), [Num(8192, lineno=164, col_offset=20), BinOp(Attribute(Name('self', Load(), lineno=164, col_offset=26), 'chunksize', Load(), lineno=164, col_offset=26), Sub(), Attribute(Name('self', Load(), lineno=164, col_offset=43), 'size_read', Load(), lineno=164, col_offset=43), lineno=164, col_offset=26)], [], None, None, lineno=164, col_offset=16), lineno=164, col_offset=12), Assign([Name('dummy', Store(), lineno=165, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=165, col_offset=20), 'read', Load(), lineno=165, col_offset=20), [Name('n', Load(), lineno=165, col_offset=30)], [], None, None, lineno=165, col_offset=20), lineno=165, col_offset=12), If(UnaryOp(Not(), Name('dummy', Load(), lineno=166, col_offset=19), lineno=166, col_offset=15), [Raise(Name('EOFError', Load(), lineno=167, col_offset=22), None, None, lineno=167, col_offset=16)], [], lineno=166, col_offset=12)], [], lineno=163, col_offset=8)], [], lineno=143, col_offset=4)], [], lineno=51, col_offset=0)])
