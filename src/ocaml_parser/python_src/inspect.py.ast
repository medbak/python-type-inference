Module([Expr(Str("Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargspec(), getargvalues(), getcallargs() - get info about function arguments\n    formatargspec(), formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n", lineno=25, col_offset=-1), lineno=25, col_offset=-1), Assign([Name('__author__', Store(), lineno=29, col_offset=0)], Str('Ka-Ping Yee <ping@lfw.org>', lineno=29, col_offset=13), lineno=29, col_offset=0), Assign([Name('__date__', Store(), lineno=30, col_offset=0)], Str('1 Jan 2001', lineno=30, col_offset=11), lineno=30, col_offset=0), Import([alias('sys', None)], lineno=32, col_offset=0), Import([alias('os', None)], lineno=33, col_offset=0), Import([alias('types', None)], lineno=34, col_offset=0), Import([alias('string', None)], lineno=35, col_offset=0), Import([alias('re', None)], lineno=36, col_offset=0), Import([alias('dis', None)], lineno=37, col_offset=0), Import([alias('imp', None)], lineno=38, col_offset=0), Import([alias('tokenize', None)], lineno=39, col_offset=0), Import([alias('linecache', None)], lineno=40, col_offset=0), ImportFrom('operator', [alias('attrgetter', None)], 0, lineno=41, col_offset=0), ImportFrom('collections', [alias('namedtuple', None)], 0, lineno=42, col_offset=0), Assign([Tuple([Name('CO_OPTIMIZED', Store(), lineno=45, col_offset=0), Name('CO_NEWLOCALS', Store(), lineno=45, col_offset=14), Name('CO_VARARGS', Store(), lineno=45, col_offset=28), Name('CO_VARKEYWORDS', Store(), lineno=45, col_offset=40)], Store(), lineno=45, col_offset=0)], Tuple([Num(1, lineno=45, col_offset=57), Num(2, lineno=45, col_offset=62), Num(4, lineno=45, col_offset=67), Num(8, lineno=45, col_offset=72)], Load(), lineno=45, col_offset=57), lineno=45, col_offset=0), Assign([Tuple([Name('CO_NESTED', Store(), lineno=46, col_offset=0), Name('CO_GENERATOR', Store(), lineno=46, col_offset=11), Name('CO_NOFREE', Store(), lineno=46, col_offset=25)], Store(), lineno=46, col_offset=0)], Tuple([Num(16, lineno=46, col_offset=37), Num(32, lineno=46, col_offset=43), Num(64, lineno=46, col_offset=49)], Load(), lineno=46, col_offset=37), lineno=46, col_offset=0), Assign([Name('TPFLAGS_IS_ABSTRACT', Store(), lineno=48, col_offset=0)], BinOp(Num(1, lineno=48, col_offset=22), LShift(), Num(20, lineno=48, col_offset=27), lineno=48, col_offset=22), lineno=48, col_offset=0), FunctionDef('ismodule', arguments([Name('object', Param(), lineno=51, col_offset=13)], None, None, []), [Expr(Str('Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)', lineno=56, col_offset=-1), lineno=56, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=57, col_offset=11), [Name('object', Load(), lineno=57, col_offset=22), Attribute(Name('types', Load(), lineno=57, col_offset=30), 'ModuleType', Load(), lineno=57, col_offset=30)], [], None, None, lineno=57, col_offset=11), lineno=57, col_offset=4)], [], lineno=51, col_offset=0), FunctionDef('isclass', arguments([Name('object', Param(), lineno=59, col_offset=12)], None, None, []), [Expr(Str('Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined', lineno=64, col_offset=-1), lineno=64, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=65, col_offset=11), [Name('object', Load(), lineno=65, col_offset=22), Tuple([Name('type', Load(), lineno=65, col_offset=31), Attribute(Name('types', Load(), lineno=65, col_offset=37), 'ClassType', Load(), lineno=65, col_offset=37)], Load(), lineno=65, col_offset=31)], [], None, None, lineno=65, col_offset=11), lineno=65, col_offset=4)], [], lineno=59, col_offset=0), FunctionDef('ismethod', arguments([Name('object', Param(), lineno=67, col_offset=13)], None, None, []), [Expr(Str('Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        im_class        class object in which this method belongs\n        im_func         function object containing implementation of method\n        im_self         instance to which this method is bound, or None', lineno=75, col_offset=-1), lineno=75, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=76, col_offset=11), [Name('object', Load(), lineno=76, col_offset=22), Attribute(Name('types', Load(), lineno=76, col_offset=30), 'MethodType', Load(), lineno=76, col_offset=30)], [], None, None, lineno=76, col_offset=11), lineno=76, col_offset=4)], [], lineno=67, col_offset=0), FunctionDef('ismethoddescriptor', arguments([Name('object', Param(), lineno=78, col_offset=23)], None, None, []), [Expr(Str('Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    im_func attribute (etc) when an object passes ismethod().', lineno=91, col_offset=-1), lineno=91, col_offset=-1), Return(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=92, col_offset=12), [Name('object', Load(), lineno=92, col_offset=20), Str('__get__', lineno=92, col_offset=28)], [], None, None, lineno=92, col_offset=12), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=93, col_offset=20), [Name('object', Load(), lineno=93, col_offset=28), Str('__set__', lineno=93, col_offset=36)], [], None, None, lineno=93, col_offset=20), lineno=93, col_offset=16), UnaryOp(Not(), Call(Name('ismethod', Load(), lineno=94, col_offset=20), [Name('object', Load(), lineno=94, col_offset=29)], [], None, None, lineno=94, col_offset=20), lineno=94, col_offset=16), UnaryOp(Not(), Call(Name('isfunction', Load(), lineno=95, col_offset=20), [Name('object', Load(), lineno=95, col_offset=31)], [], None, None, lineno=95, col_offset=20), lineno=95, col_offset=16), UnaryOp(Not(), Call(Name('isclass', Load(), lineno=96, col_offset=20), [Name('object', Load(), lineno=96, col_offset=28)], [], None, None, lineno=96, col_offset=20), lineno=96, col_offset=16)], lineno=92, col_offset=12), lineno=92, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('isdatadescriptor', arguments([Name('object', Param(), lineno=98, col_offset=21)], None, None, []), [Expr(Str('Return true if the object is a data descriptor.\n\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.', lineno=105, col_offset=-1), lineno=105, col_offset=-1), Return(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=106, col_offset=12), [Name('object', Load(), lineno=106, col_offset=20), Str('__set__', lineno=106, col_offset=28)], [], None, None, lineno=106, col_offset=12), Call(Name('hasattr', Load(), lineno=106, col_offset=43), [Name('object', Load(), lineno=106, col_offset=51), Str('__get__', lineno=106, col_offset=59)], [], None, None, lineno=106, col_offset=43)], lineno=106, col_offset=12), lineno=106, col_offset=4)], [], lineno=98, col_offset=0), If(Call(Name('hasattr', Load(), lineno=108, col_offset=3), [Name('types', Load(), lineno=108, col_offset=11), Str('MemberDescriptorType', lineno=108, col_offset=18)], [], None, None, lineno=108, col_offset=3), [FunctionDef('ismemberdescriptor', arguments([Name('object', Param(), lineno=110, col_offset=27)], None, None, []), [Expr(Str('Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.', lineno=114, col_offset=-1), lineno=114, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=115, col_offset=15), [Name('object', Load(), lineno=115, col_offset=26), Attribute(Name('types', Load(), lineno=115, col_offset=34), 'MemberDescriptorType', Load(), lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=15), lineno=115, col_offset=8)], [], lineno=110, col_offset=4)], [FunctionDef('ismemberdescriptor', arguments([Name('object', Param(), lineno=118, col_offset=27)], None, None, []), [Expr(Str('Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.', lineno=122, col_offset=-1), lineno=122, col_offset=-1), Return(Name('False', Load(), lineno=123, col_offset=15), lineno=123, col_offset=8)], [], lineno=118, col_offset=4)], lineno=108, col_offset=0), If(Call(Name('hasattr', Load(), lineno=125, col_offset=3), [Name('types', Load(), lineno=125, col_offset=11), Str('GetSetDescriptorType', lineno=125, col_offset=18)], [], None, None, lineno=125, col_offset=3), [FunctionDef('isgetsetdescriptor', arguments([Name('object', Param(), lineno=127, col_offset=27)], None, None, []), [Expr(Str('Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.', lineno=131, col_offset=-1), lineno=131, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=132, col_offset=15), [Name('object', Load(), lineno=132, col_offset=26), Attribute(Name('types', Load(), lineno=132, col_offset=34), 'GetSetDescriptorType', Load(), lineno=132, col_offset=34)], [], None, None, lineno=132, col_offset=15), lineno=132, col_offset=8)], [], lineno=127, col_offset=4)], [FunctionDef('isgetsetdescriptor', arguments([Name('object', Param(), lineno=135, col_offset=27)], None, None, []), [Expr(Str('Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.', lineno=139, col_offset=-1), lineno=139, col_offset=-1), Return(Name('False', Load(), lineno=140, col_offset=15), lineno=140, col_offset=8)], [], lineno=135, col_offset=4)], lineno=125, col_offset=0), FunctionDef('isfunction', arguments([Name('object', Param(), lineno=142, col_offset=15)], None, None, []), [Expr(Str('Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        func_code       code object containing compiled function bytecode\n        func_defaults   tuple of any default values for arguments\n        func_doc        (same as __doc__)\n        func_globals    global namespace in which this function was defined\n        func_name       (same as __name__)', lineno=152, col_offset=-1), lineno=152, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=153, col_offset=11), [Name('object', Load(), lineno=153, col_offset=22), Attribute(Name('types', Load(), lineno=153, col_offset=30), 'FunctionType', Load(), lineno=153, col_offset=30)], [], None, None, lineno=153, col_offset=11), lineno=153, col_offset=4)], [], lineno=142, col_offset=0), FunctionDef('isgeneratorfunction', arguments([Name('object', Param(), lineno=155, col_offset=24)], None, None, []), [Expr(Str('Return true if the object is a user-defined generator function.\n\n    Generator function objects provides same attributes as functions.\n\n    See help(isfunction) for attributes listing.', lineno=160, col_offset=-1), lineno=160, col_offset=-1), Return(Call(Name('bool', Load(), lineno=161, col_offset=11), [BoolOp(And(), [BoolOp(Or(), [Call(Name('isfunction', Load(), lineno=161, col_offset=17), [Name('object', Load(), lineno=161, col_offset=28)], [], None, None, lineno=161, col_offset=17), Call(Name('ismethod', Load(), lineno=161, col_offset=39), [Name('object', Load(), lineno=161, col_offset=48)], [], None, None, lineno=161, col_offset=39)], lineno=161, col_offset=17), BinOp(Attribute(Attribute(Name('object', Load(), lineno=162, col_offset=16), 'func_code', Load(), lineno=162, col_offset=16), 'co_flags', Load(), lineno=162, col_offset=16), BitAnd(), Name('CO_GENERATOR', Load(), lineno=162, col_offset=44), lineno=162, col_offset=16)], lineno=161, col_offset=16)], [], None, None, lineno=161, col_offset=11), lineno=161, col_offset=4)], [], lineno=155, col_offset=0), FunctionDef('isgenerator', arguments([Name('object', Param(), lineno=164, col_offset=16)], None, None, []), [Expr(Str('Return true if the object is a generator.\n\n    Generator objects provide these attributes:\n        __iter__        defined to support interation over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and "sends" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator', lineno=178, col_offset=-1), lineno=178, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=179, col_offset=11), [Name('object', Load(), lineno=179, col_offset=22), Attribute(Name('types', Load(), lineno=179, col_offset=30), 'GeneratorType', Load(), lineno=179, col_offset=30)], [], None, None, lineno=179, col_offset=11), lineno=179, col_offset=4)], [], lineno=164, col_offset=0), FunctionDef('istraceback', arguments([Name('object', Param(), lineno=181, col_offset=16)], None, None, []), [Expr(Str('Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)', lineno=188, col_offset=-1), lineno=188, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=189, col_offset=11), [Name('object', Load(), lineno=189, col_offset=22), Attribute(Name('types', Load(), lineno=189, col_offset=30), 'TracebackType', Load(), lineno=189, col_offset=30)], [], None, None, lineno=189, col_offset=11), lineno=189, col_offset=4)], [], lineno=181, col_offset=0), FunctionDef('isframe', arguments([Name('object', Param(), lineno=191, col_offset=12)], None, None, []), [Expr(Str("Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_exc_traceback traceback if raised in this frame, or None\n        f_exc_type      exception type if raised in this frame, or None\n        f_exc_value     exception value if raised in this frame, or None\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_restricted    0 or 1 if frame is in restricted execution mode\n        f_trace         tracing function for this frame, or None", lineno=206, col_offset=-1), lineno=206, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=207, col_offset=11), [Name('object', Load(), lineno=207, col_offset=22), Attribute(Name('types', Load(), lineno=207, col_offset=30), 'FrameType', Load(), lineno=207, col_offset=30)], [], None, None, lineno=207, col_offset=11), lineno=207, col_offset=4)], [], lineno=191, col_offset=0), FunctionDef('iscode', arguments([Name('object', Param(), lineno=209, col_offset=11)], None, None, []), [Expr(Str('Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables', lineno=224, col_offset=-1), lineno=224, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=225, col_offset=11), [Name('object', Load(), lineno=225, col_offset=22), Attribute(Name('types', Load(), lineno=225, col_offset=30), 'CodeType', Load(), lineno=225, col_offset=30)], [], None, None, lineno=225, col_offset=11), lineno=225, col_offset=4)], [], lineno=209, col_offset=0), FunctionDef('isbuiltin', arguments([Name('object', Param(), lineno=227, col_offset=14)], None, None, []), [Expr(Str('Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None', lineno=233, col_offset=-1), lineno=233, col_offset=-1), Return(Call(Name('isinstance', Load(), lineno=234, col_offset=11), [Name('object', Load(), lineno=234, col_offset=22), Attribute(Name('types', Load(), lineno=234, col_offset=30), 'BuiltinFunctionType', Load(), lineno=234, col_offset=30)], [], None, None, lineno=234, col_offset=11), lineno=234, col_offset=4)], [], lineno=227, col_offset=0), FunctionDef('isroutine', arguments([Name('object', Param(), lineno=236, col_offset=14)], None, None, []), [Expr(Str('Return true if the object is any kind of function or method.', lineno=237, col_offset=4), lineno=237, col_offset=4), Return(BoolOp(Or(), [Call(Name('isbuiltin', Load(), lineno=238, col_offset=12), [Name('object', Load(), lineno=238, col_offset=22)], [], None, None, lineno=238, col_offset=12), Call(Name('isfunction', Load(), lineno=239, col_offset=15), [Name('object', Load(), lineno=239, col_offset=26)], [], None, None, lineno=239, col_offset=15), Call(Name('ismethod', Load(), lineno=240, col_offset=15), [Name('object', Load(), lineno=240, col_offset=24)], [], None, None, lineno=240, col_offset=15), Call(Name('ismethoddescriptor', Load(), lineno=241, col_offset=15), [Name('object', Load(), lineno=241, col_offset=34)], [], None, None, lineno=241, col_offset=15)], lineno=238, col_offset=12), lineno=238, col_offset=4)], [], lineno=236, col_offset=0), FunctionDef('isabstract', arguments([Name('object', Param(), lineno=243, col_offset=15)], None, None, []), [Expr(Str('Return true if the object is an abstract base class (ABC).', lineno=244, col_offset=4), lineno=244, col_offset=4), Return(Call(Name('bool', Load(), lineno=245, col_offset=11), [BoolOp(And(), [Call(Name('isinstance', Load(), lineno=245, col_offset=16), [Name('object', Load(), lineno=245, col_offset=27), Name('type', Load(), lineno=245, col_offset=35)], [], None, None, lineno=245, col_offset=16), BinOp(Attribute(Name('object', Load(), lineno=245, col_offset=45), '__flags__', Load(), lineno=245, col_offset=45), BitAnd(), Name('TPFLAGS_IS_ABSTRACT', Load(), lineno=245, col_offset=64), lineno=245, col_offset=45)], lineno=245, col_offset=16)], [], None, None, lineno=245, col_offset=11), lineno=245, col_offset=4)], [], lineno=243, col_offset=0), FunctionDef('getmembers', arguments([Name('object', Param(), lineno=247, col_offset=15), Name('predicate', Param(), lineno=247, col_offset=23)], None, None, [Name('None', Load(), lineno=247, col_offset=33)]), [Expr(Str('Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.', lineno=249, col_offset=-1), lineno=249, col_offset=-1), Assign([Name('results', Store(), lineno=250, col_offset=4)], List([], Load(), lineno=250, col_offset=14), lineno=250, col_offset=4), For(Name('key', Store(), lineno=251, col_offset=8), Call(Name('dir', Load(), lineno=251, col_offset=15), [Name('object', Load(), lineno=251, col_offset=19)], [], None, None, lineno=251, col_offset=15), [TryExcept([Assign([Name('value', Store(), lineno=253, col_offset=12)], Call(Name('getattr', Load(), lineno=253, col_offset=20), [Name('object', Load(), lineno=253, col_offset=28), Name('key', Load(), lineno=253, col_offset=36)], [], None, None, lineno=253, col_offset=20), lineno=253, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=254, col_offset=15), None, [Continue( lineno=255, col_offset=12)], lineno=254, col_offset=8)], [], lineno=252, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('predicate', Load(), lineno=256, col_offset=15), lineno=256, col_offset=11), Call(Name('predicate', Load(), lineno=256, col_offset=28), [Name('value', Load(), lineno=256, col_offset=38)], [], None, None, lineno=256, col_offset=28)], lineno=256, col_offset=11), [Expr(Call(Attribute(Name('results', Load(), lineno=257, col_offset=12), 'append', Load(), lineno=257, col_offset=12), [Tuple([Name('key', Load(), lineno=257, col_offset=28), Name('value', Load(), lineno=257, col_offset=33)], Load(), lineno=257, col_offset=28)], [], None, None, lineno=257, col_offset=12), lineno=257, col_offset=12)], [], lineno=256, col_offset=8)], [], lineno=251, col_offset=4), Expr(Call(Attribute(Name('results', Load(), lineno=258, col_offset=4), 'sort', Load(), lineno=258, col_offset=4), [], [], None, None, lineno=258, col_offset=4), lineno=258, col_offset=4), Return(Name('results', Load(), lineno=259, col_offset=11), lineno=259, col_offset=4)], [], lineno=247, col_offset=0), Assign([Name('Attribute', Store(), lineno=261, col_offset=0)], Call(Name('namedtuple', Load(), lineno=261, col_offset=12), [Str('Attribute', lineno=261, col_offset=23), Str('name kind defining_class object', lineno=261, col_offset=36)], [], None, None, lineno=261, col_offset=12), lineno=261, col_offset=0), FunctionDef('classify_class_attrs', arguments([Name('cls', Param(), lineno=263, col_offset=25)], None, None, []), [Expr(Str("Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained directly from the defining class's\n           __dict__, not via getattr.  This is especially important for\n           data attributes:  C.data is just a data object, but\n           C.__dict__['data'] may be a data descriptor with additional\n           info, like a __doc__ string.\n    ", lineno=285, col_offset=-1), lineno=285, col_offset=-1), Assign([Name('mro', Store(), lineno=287, col_offset=4)], Call(Name('getmro', Load(), lineno=287, col_offset=10), [Name('cls', Load(), lineno=287, col_offset=17)], [], None, None, lineno=287, col_offset=10), lineno=287, col_offset=4), Assign([Name('names', Store(), lineno=288, col_offset=4)], Call(Name('dir', Load(), lineno=288, col_offset=12), [Name('cls', Load(), lineno=288, col_offset=16)], [], None, None, lineno=288, col_offset=12), lineno=288, col_offset=4), Assign([Name('result', Store(), lineno=289, col_offset=4)], List([], Load(), lineno=289, col_offset=13), lineno=289, col_offset=4), For(Name('name', Store(), lineno=290, col_offset=8), Name('names', Load(), lineno=290, col_offset=16), [If(Compare(Name('name', Load(), lineno=294, col_offset=11), [In()], [Attribute(Name('cls', Load(), lineno=294, col_offset=19), '__dict__', Load(), lineno=294, col_offset=19)], lineno=294, col_offset=11), [Assign([Name('obj', Store(), lineno=295, col_offset=12)], Subscript(Attribute(Name('cls', Load(), lineno=295, col_offset=18), '__dict__', Load(), lineno=295, col_offset=18), Index(Name('name', Load(), lineno=295, col_offset=31)), Load(), lineno=295, col_offset=18), lineno=295, col_offset=12)], [Assign([Name('obj', Store(), lineno=297, col_offset=12)], Call(Name('getattr', Load(), lineno=297, col_offset=18), [Name('cls', Load(), lineno=297, col_offset=26), Name('name', Load(), lineno=297, col_offset=31)], [], None, None, lineno=297, col_offset=18), lineno=297, col_offset=12)], lineno=294, col_offset=8), Assign([Name('homecls', Store(), lineno=300, col_offset=8)], Call(Name('getattr', Load(), lineno=300, col_offset=18), [Name('obj', Load(), lineno=300, col_offset=26), Str('__objclass__', lineno=300, col_offset=31), Name('None', Load(), lineno=300, col_offset=47)], [], None, None, lineno=300, col_offset=18), lineno=300, col_offset=8), If(Compare(Name('homecls', Load(), lineno=301, col_offset=11), [Is()], [Name('None', Load(), lineno=301, col_offset=22)], lineno=301, col_offset=11), [For(Name('base', Store(), lineno=303, col_offset=16), Name('mro', Load(), lineno=303, col_offset=24), [If(Compare(Name('name', Load(), lineno=304, col_offset=19), [In()], [Attribute(Name('base', Load(), lineno=304, col_offset=27), '__dict__', Load(), lineno=304, col_offset=27)], lineno=304, col_offset=19), [Assign([Name('homecls', Store(), lineno=305, col_offset=20)], Name('base', Load(), lineno=305, col_offset=30), lineno=305, col_offset=20), Break( lineno=306, col_offset=20)], [], lineno=304, col_offset=16)], [], lineno=303, col_offset=12)], [], lineno=301, col_offset=8), If(BoolOp(And(), [Compare(Name('homecls', Load(), lineno=310, col_offset=11), [IsNot()], [Name('None', Load(), lineno=310, col_offset=26)], lineno=310, col_offset=11), Compare(Name('name', Load(), lineno=310, col_offset=35), [In()], [Attribute(Name('homecls', Load(), lineno=310, col_offset=43), '__dict__', Load(), lineno=310, col_offset=43)], lineno=310, col_offset=35)], lineno=310, col_offset=11), [Assign([Name('obj', Store(), lineno=311, col_offset=12)], Subscript(Attribute(Name('homecls', Load(), lineno=311, col_offset=18), '__dict__', Load(), lineno=311, col_offset=18), Index(Name('name', Load(), lineno=311, col_offset=35)), Load(), lineno=311, col_offset=18), lineno=311, col_offset=12)], [], lineno=310, col_offset=8), Assign([Name('obj_via_getattr', Store(), lineno=314, col_offset=8)], Call(Name('getattr', Load(), lineno=314, col_offset=26), [Name('cls', Load(), lineno=314, col_offset=34), Name('name', Load(), lineno=314, col_offset=39)], [], None, None, lineno=314, col_offset=26), lineno=314, col_offset=8), If(Call(Name('isinstance', Load(), lineno=317, col_offset=11), [Name('obj', Load(), lineno=317, col_offset=22), Name('staticmethod', Load(), lineno=317, col_offset=27)], [], None, None, lineno=317, col_offset=11), [Assign([Name('kind', Store(), lineno=318, col_offset=12)], Str('static method', lineno=318, col_offset=19), lineno=318, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=319, col_offset=13), [Name('obj', Load(), lineno=319, col_offset=24), Name('classmethod', Load(), lineno=319, col_offset=29)], [], None, None, lineno=319, col_offset=13), [Assign([Name('kind', Store(), lineno=320, col_offset=12)], Str('class method', lineno=320, col_offset=19), lineno=320, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=321, col_offset=13), [Name('obj', Load(), lineno=321, col_offset=24), Name('property', Load(), lineno=321, col_offset=29)], [], None, None, lineno=321, col_offset=13), [Assign([Name('kind', Store(), lineno=322, col_offset=12)], Str('property', lineno=322, col_offset=19), lineno=322, col_offset=12)], [If(BoolOp(Or(), [Call(Name('ismethod', Load(), lineno=323, col_offset=14), [Name('obj_via_getattr', Load(), lineno=323, col_offset=23)], [], None, None, lineno=323, col_offset=14), Call(Name('ismethoddescriptor', Load(), lineno=324, col_offset=14), [Name('obj_via_getattr', Load(), lineno=324, col_offset=33)], [], None, None, lineno=324, col_offset=14)], lineno=323, col_offset=14), [Assign([Name('kind', Store(), lineno=325, col_offset=12)], Str('method', lineno=325, col_offset=19), lineno=325, col_offset=12)], [Assign([Name('kind', Store(), lineno=327, col_offset=12)], Str('data', lineno=327, col_offset=19), lineno=327, col_offset=12)], lineno=323, col_offset=13)], lineno=321, col_offset=13)], lineno=319, col_offset=13)], lineno=317, col_offset=8), Expr(Call(Attribute(Name('result', Load(), lineno=329, col_offset=8), 'append', Load(), lineno=329, col_offset=8), [Call(Name('Attribute', Load(), lineno=329, col_offset=22), [Name('name', Load(), lineno=329, col_offset=32), Name('kind', Load(), lineno=329, col_offset=38), Name('homecls', Load(), lineno=329, col_offset=44), Name('obj', Load(), lineno=329, col_offset=53)], [], None, None, lineno=329, col_offset=22)], [], None, None, lineno=329, col_offset=8), lineno=329, col_offset=8)], [], lineno=290, col_offset=4), Return(Name('result', Load(), lineno=331, col_offset=11), lineno=331, col_offset=4)], [], lineno=263, col_offset=0), FunctionDef('_searchbases', arguments([Name('cls', Param(), lineno=334, col_offset=17), Name('accum', Param(), lineno=334, col_offset=22)], None, None, []), [If(Compare(Name('cls', Load(), lineno=336, col_offset=7), [In()], [Name('accum', Load(), lineno=336, col_offset=14)], lineno=336, col_offset=7), [Return(None, lineno=337, col_offset=8)], [], lineno=336, col_offset=4), Expr(Call(Attribute(Name('accum', Load(), lineno=338, col_offset=4), 'append', Load(), lineno=338, col_offset=4), [Name('cls', Load(), lineno=338, col_offset=17)], [], None, None, lineno=338, col_offset=4), lineno=338, col_offset=4), For(Name('base', Store(), lineno=339, col_offset=8), Attribute(Name('cls', Load(), lineno=339, col_offset=16), '__bases__', Load(), lineno=339, col_offset=16), [Expr(Call(Name('_searchbases', Load(), lineno=340, col_offset=8), [Name('base', Load(), lineno=340, col_offset=21), Name('accum', Load(), lineno=340, col_offset=27)], [], None, None, lineno=340, col_offset=8), lineno=340, col_offset=8)], [], lineno=339, col_offset=4)], [], lineno=334, col_offset=0), FunctionDef('getmro', arguments([Name('cls', Param(), lineno=342, col_offset=11)], None, None, []), [Expr(Str('Return tuple of base classes (including cls) in method resolution order.', lineno=343, col_offset=4), lineno=343, col_offset=4), If(Call(Name('hasattr', Load(), lineno=344, col_offset=7), [Name('cls', Load(), lineno=344, col_offset=15), Str('__mro__', lineno=344, col_offset=20)], [], None, None, lineno=344, col_offset=7), [Return(Attribute(Name('cls', Load(), lineno=345, col_offset=15), '__mro__', Load(), lineno=345, col_offset=15), lineno=345, col_offset=8)], [Assign([Name('result', Store(), lineno=347, col_offset=8)], List([], Load(), lineno=347, col_offset=17), lineno=347, col_offset=8), Expr(Call(Name('_searchbases', Load(), lineno=348, col_offset=8), [Name('cls', Load(), lineno=348, col_offset=21), Name('result', Load(), lineno=348, col_offset=26)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8), Return(Call(Name('tuple', Load(), lineno=349, col_offset=15), [Name('result', Load(), lineno=349, col_offset=21)], [], None, None, lineno=349, col_offset=15), lineno=349, col_offset=8)], lineno=344, col_offset=4)], [], lineno=342, col_offset=0), FunctionDef('indentsize', arguments([Name('line', Param(), lineno=352, col_offset=15)], None, None, []), [Expr(Str('Return the indent size, in spaces, at the start of a line of text.', lineno=353, col_offset=4), lineno=353, col_offset=4), Assign([Name('expline', Store(), lineno=354, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=354, col_offset=14), 'expandtabs', Load(), lineno=354, col_offset=14), [Name('line', Load(), lineno=354, col_offset=32)], [], None, None, lineno=354, col_offset=14), lineno=354, col_offset=4), Return(BinOp(Call(Name('len', Load(), lineno=355, col_offset=11), [Name('expline', Load(), lineno=355, col_offset=15)], [], None, None, lineno=355, col_offset=11), Sub(), Call(Name('len', Load(), lineno=355, col_offset=26), [Call(Attribute(Name('string', Load(), lineno=355, col_offset=30), 'lstrip', Load(), lineno=355, col_offset=30), [Name('expline', Load(), lineno=355, col_offset=44)], [], None, None, lineno=355, col_offset=30)], [], None, None, lineno=355, col_offset=26), lineno=355, col_offset=11), lineno=355, col_offset=4)], [], lineno=352, col_offset=0), FunctionDef('getdoc', arguments([Name('object', Param(), lineno=357, col_offset=11)], None, None, []), [Expr(Str('Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.', lineno=362, col_offset=-1), lineno=362, col_offset=-1), TryExcept([Assign([Name('doc', Store(), lineno=364, col_offset=8)], Attribute(Name('object', Load(), lineno=364, col_offset=14), '__doc__', Load(), lineno=364, col_offset=14), lineno=364, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=365, col_offset=11), None, [Return(Name('None', Load(), lineno=366, col_offset=15), lineno=366, col_offset=8)], lineno=365, col_offset=4)], [], lineno=363, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=367, col_offset=11), [Name('doc', Load(), lineno=367, col_offset=22), Attribute(Name('types', Load(), lineno=367, col_offset=27), 'StringTypes', Load(), lineno=367, col_offset=27)], [], None, None, lineno=367, col_offset=11), lineno=367, col_offset=7), [Return(Name('None', Load(), lineno=368, col_offset=15), lineno=368, col_offset=8)], [], lineno=367, col_offset=4), Return(Call(Name('cleandoc', Load(), lineno=369, col_offset=11), [Name('doc', Load(), lineno=369, col_offset=20)], [], None, None, lineno=369, col_offset=11), lineno=369, col_offset=4)], [], lineno=357, col_offset=0), FunctionDef('cleandoc', arguments([Name('doc', Param(), lineno=371, col_offset=13)], None, None, []), [Expr(Str('Clean up indentation from docstrings.\n\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.', lineno=375, col_offset=-1), lineno=375, col_offset=-1), TryExcept([Assign([Name('lines', Store(), lineno=377, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=377, col_offset=16), 'split', Load(), lineno=377, col_offset=16), [Call(Attribute(Name('string', Load(), lineno=377, col_offset=29), 'expandtabs', Load(), lineno=377, col_offset=29), [Name('doc', Load(), lineno=377, col_offset=47)], [], None, None, lineno=377, col_offset=29), Str('\n', lineno=377, col_offset=53)], [], None, None, lineno=377, col_offset=16), lineno=377, col_offset=8)], [ExceptHandler(Name('UnicodeError', Load(), lineno=378, col_offset=11), None, [Return(Name('None', Load(), lineno=379, col_offset=15), lineno=379, col_offset=8)], lineno=378, col_offset=4)], [Assign([Name('margin', Store(), lineno=382, col_offset=8)], Attribute(Name('sys', Load(), lineno=382, col_offset=17), 'maxint', Load(), lineno=382, col_offset=17), lineno=382, col_offset=8), For(Name('line', Store(), lineno=383, col_offset=12), Subscript(Name('lines', Load(), lineno=383, col_offset=20), Slice(Num(1, lineno=383, col_offset=26), None, None), Load(), lineno=383, col_offset=20), [Assign([Name('content', Store(), lineno=384, col_offset=12)], Call(Name('len', Load(), lineno=384, col_offset=22), [Call(Attribute(Name('string', Load(), lineno=384, col_offset=26), 'lstrip', Load(), lineno=384, col_offset=26), [Name('line', Load(), lineno=384, col_offset=40)], [], None, None, lineno=384, col_offset=26)], [], None, None, lineno=384, col_offset=22), lineno=384, col_offset=12), If(Name('content', Load(), lineno=385, col_offset=15), [Assign([Name('indent', Store(), lineno=386, col_offset=16)], BinOp(Call(Name('len', Load(), lineno=386, col_offset=25), [Name('line', Load(), lineno=386, col_offset=29)], [], None, None, lineno=386, col_offset=25), Sub(), Name('content', Load(), lineno=386, col_offset=37), lineno=386, col_offset=25), lineno=386, col_offset=16), Assign([Name('margin', Store(), lineno=387, col_offset=16)], Call(Name('min', Load(), lineno=387, col_offset=25), [Name('margin', Load(), lineno=387, col_offset=29), Name('indent', Load(), lineno=387, col_offset=37)], [], None, None, lineno=387, col_offset=25), lineno=387, col_offset=16)], [], lineno=385, col_offset=12)], [], lineno=383, col_offset=8), If(Name('lines', Load(), lineno=389, col_offset=11), [Assign([Subscript(Name('lines', Load(), lineno=390, col_offset=12), Index(Num(0, lineno=390, col_offset=18)), Store(), lineno=390, col_offset=12)], Call(Attribute(Subscript(Name('lines', Load(), lineno=390, col_offset=23), Index(Num(0, lineno=390, col_offset=29)), Load(), lineno=390, col_offset=23), 'lstrip', Load(), lineno=390, col_offset=23), [], [], None, None, lineno=390, col_offset=23), lineno=390, col_offset=12)], [], lineno=389, col_offset=8), If(Compare(Name('margin', Load(), lineno=391, col_offset=11), [Lt()], [Attribute(Name('sys', Load(), lineno=391, col_offset=20), 'maxint', Load(), lineno=391, col_offset=20)], lineno=391, col_offset=11), [For(Name('i', Store(), lineno=392, col_offset=16), Call(Name('range', Load(), lineno=392, col_offset=21), [Num(1, lineno=392, col_offset=27), Call(Name('len', Load(), lineno=392, col_offset=30), [Name('lines', Load(), lineno=392, col_offset=34)], [], None, None, lineno=392, col_offset=30)], [], None, None, lineno=392, col_offset=21), [Assign([Subscript(Name('lines', Load(), lineno=392, col_offset=43), Index(Name('i', Load(), lineno=392, col_offset=49)), Store(), lineno=392, col_offset=43)], Subscript(Subscript(Name('lines', Load(), lineno=392, col_offset=54), Index(Name('i', Load(), lineno=392, col_offset=60)), Load(), lineno=392, col_offset=54), Slice(Name('margin', Load(), lineno=392, col_offset=63), None, None), Load(), lineno=392, col_offset=54), lineno=392, col_offset=43)], [], lineno=392, col_offset=12)], [], lineno=391, col_offset=8), While(BoolOp(And(), [Name('lines', Load(), lineno=394, col_offset=14), UnaryOp(Not(), Subscript(Name('lines', Load(), lineno=394, col_offset=28), Index(Num(-1, lineno=394, col_offset=35)), Load(), lineno=394, col_offset=28), lineno=394, col_offset=24)], lineno=394, col_offset=14), [Expr(Call(Attribute(Name('lines', Load(), lineno=395, col_offset=12), 'pop', Load(), lineno=395, col_offset=12), [], [], None, None, lineno=395, col_offset=12), lineno=395, col_offset=12)], [], lineno=394, col_offset=8), While(BoolOp(And(), [Name('lines', Load(), lineno=396, col_offset=14), UnaryOp(Not(), Subscript(Name('lines', Load(), lineno=396, col_offset=28), Index(Num(0, lineno=396, col_offset=34)), Load(), lineno=396, col_offset=28), lineno=396, col_offset=24)], lineno=396, col_offset=14), [Expr(Call(Attribute(Name('lines', Load(), lineno=397, col_offset=12), 'pop', Load(), lineno=397, col_offset=12), [Num(0, lineno=397, col_offset=22)], [], None, None, lineno=397, col_offset=12), lineno=397, col_offset=12)], [], lineno=396, col_offset=8), Return(Call(Attribute(Name('string', Load(), lineno=398, col_offset=15), 'join', Load(), lineno=398, col_offset=15), [Name('lines', Load(), lineno=398, col_offset=27), Str('\n', lineno=398, col_offset=34)], [], None, None, lineno=398, col_offset=15), lineno=398, col_offset=8)], lineno=376, col_offset=4)], [], lineno=371, col_offset=0), FunctionDef('getfile', arguments([Name('object', Param(), lineno=400, col_offset=12)], None, None, []), [Expr(Str('Work out which source or compiled file an object was defined in.', lineno=401, col_offset=4), lineno=401, col_offset=4), If(Call(Name('ismodule', Load(), lineno=402, col_offset=7), [Name('object', Load(), lineno=402, col_offset=16)], [], None, None, lineno=402, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=403, col_offset=11), [Name('object', Load(), lineno=403, col_offset=19), Str('__file__', lineno=403, col_offset=27)], [], None, None, lineno=403, col_offset=11), [Return(Attribute(Name('object', Load(), lineno=404, col_offset=19), '__file__', Load(), lineno=404, col_offset=19), lineno=404, col_offset=12)], [], lineno=403, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=405, col_offset=14), [Call(Attribute(Str('{!r} is a built-in module', lineno=405, col_offset=24), 'format', Load(), lineno=405, col_offset=24), [Name('object', Load(), lineno=405, col_offset=59)], [], None, None, lineno=405, col_offset=24)], [], None, None, lineno=405, col_offset=14), None, None, lineno=405, col_offset=8)], [], lineno=402, col_offset=4), If(Call(Name('isclass', Load(), lineno=406, col_offset=7), [Name('object', Load(), lineno=406, col_offset=15)], [], None, None, lineno=406, col_offset=7), [Assign([Name('object', Store(), lineno=407, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=407, col_offset=17), 'modules', Load(), lineno=407, col_offset=17), 'get', Load(), lineno=407, col_offset=17), [Attribute(Name('object', Load(), lineno=407, col_offset=33), '__module__', Load(), lineno=407, col_offset=33)], [], None, None, lineno=407, col_offset=17), lineno=407, col_offset=8), If(Call(Name('hasattr', Load(), lineno=408, col_offset=11), [Name('object', Load(), lineno=408, col_offset=19), Str('__file__', lineno=408, col_offset=27)], [], None, None, lineno=408, col_offset=11), [Return(Attribute(Name('object', Load(), lineno=409, col_offset=19), '__file__', Load(), lineno=409, col_offset=19), lineno=409, col_offset=12)], [], lineno=408, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=410, col_offset=14), [Call(Attribute(Str('{!r} is a built-in class', lineno=410, col_offset=24), 'format', Load(), lineno=410, col_offset=24), [Name('object', Load(), lineno=410, col_offset=58)], [], None, None, lineno=410, col_offset=24)], [], None, None, lineno=410, col_offset=14), None, None, lineno=410, col_offset=8)], [], lineno=406, col_offset=4), If(Call(Name('ismethod', Load(), lineno=411, col_offset=7), [Name('object', Load(), lineno=411, col_offset=16)], [], None, None, lineno=411, col_offset=7), [Assign([Name('object', Store(), lineno=412, col_offset=8)], Attribute(Name('object', Load(), lineno=412, col_offset=17), 'im_func', Load(), lineno=412, col_offset=17), lineno=412, col_offset=8)], [], lineno=411, col_offset=4), If(Call(Name('isfunction', Load(), lineno=413, col_offset=7), [Name('object', Load(), lineno=413, col_offset=18)], [], None, None, lineno=413, col_offset=7), [Assign([Name('object', Store(), lineno=414, col_offset=8)], Attribute(Name('object', Load(), lineno=414, col_offset=17), 'func_code', Load(), lineno=414, col_offset=17), lineno=414, col_offset=8)], [], lineno=413, col_offset=4), If(Call(Name('istraceback', Load(), lineno=415, col_offset=7), [Name('object', Load(), lineno=415, col_offset=19)], [], None, None, lineno=415, col_offset=7), [Assign([Name('object', Store(), lineno=416, col_offset=8)], Attribute(Name('object', Load(), lineno=416, col_offset=17), 'tb_frame', Load(), lineno=416, col_offset=17), lineno=416, col_offset=8)], [], lineno=415, col_offset=4), If(Call(Name('isframe', Load(), lineno=417, col_offset=7), [Name('object', Load(), lineno=417, col_offset=15)], [], None, None, lineno=417, col_offset=7), [Assign([Name('object', Store(), lineno=418, col_offset=8)], Attribute(Name('object', Load(), lineno=418, col_offset=17), 'f_code', Load(), lineno=418, col_offset=17), lineno=418, col_offset=8)], [], lineno=417, col_offset=4), If(Call(Name('iscode', Load(), lineno=419, col_offset=7), [Name('object', Load(), lineno=419, col_offset=14)], [], None, None, lineno=419, col_offset=7), [Return(Attribute(Name('object', Load(), lineno=420, col_offset=15), 'co_filename', Load(), lineno=420, col_offset=15), lineno=420, col_offset=8)], [], lineno=419, col_offset=4), Raise(Call(Name('TypeError', Load(), lineno=421, col_offset=10), [Call(Attribute(Str('{!r} is not a module, class, method, function, traceback, frame, or code object', lineno=421, col_offset=20), 'format', Load(), lineno=421, col_offset=20), [Name('object', Load(), lineno=422, col_offset=72)], [], None, None, lineno=421, col_offset=20)], [], None, None, lineno=421, col_offset=10), None, None, lineno=421, col_offset=4)], [], lineno=400, col_offset=0), Assign([Name('ModuleInfo', Store(), lineno=424, col_offset=0)], Call(Name('namedtuple', Load(), lineno=424, col_offset=13), [Str('ModuleInfo', lineno=424, col_offset=24), Str('name suffix mode module_type', lineno=424, col_offset=38)], [], None, None, lineno=424, col_offset=13), lineno=424, col_offset=0), FunctionDef('getmoduleinfo', arguments([Name('path', Param(), lineno=426, col_offset=18)], None, None, []), [Expr(Str('Get the module name, suffix, mode, and module type for a given file.', lineno=427, col_offset=4), lineno=427, col_offset=4), Assign([Name('filename', Store(), lineno=428, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=428, col_offset=15), 'path', Load(), lineno=428, col_offset=15), 'basename', Load(), lineno=428, col_offset=15), [Name('path', Load(), lineno=428, col_offset=32)], [], None, None, lineno=428, col_offset=15), lineno=428, col_offset=4), Assign([Name('suffixes', Store(), lineno=429, col_offset=4)], Call(Name('map', Load(), lineno=429, col_offset=15), [Lambda(arguments([Name('info', Param(), lineno=429, col_offset=26)], None, None, []), Tuple([UnaryOp(USub(), Call(Name('len', Load(), lineno=430, col_offset=21), [Subscript(Name('info', Load(), lineno=430, col_offset=25), Index(Num(0, lineno=430, col_offset=30)), Load(), lineno=430, col_offset=25)], [], None, None, lineno=430, col_offset=21), lineno=430, col_offset=20), Subscript(Name('info', Load(), lineno=430, col_offset=35), Index(Num(0, lineno=430, col_offset=40)), Load(), lineno=430, col_offset=35), Subscript(Name('info', Load(), lineno=430, col_offset=44), Index(Num(1, lineno=430, col_offset=49)), Load(), lineno=430, col_offset=44), Subscript(Name('info', Load(), lineno=430, col_offset=53), Index(Num(2, lineno=430, col_offset=58)), Load(), lineno=430, col_offset=53)], Load(), lineno=430, col_offset=20), lineno=429, col_offset=19), Call(Attribute(Name('imp', Load(), lineno=431, col_offset=20), 'get_suffixes', Load(), lineno=431, col_offset=20), [], [], None, None, lineno=431, col_offset=20)], [], None, None, lineno=429, col_offset=15), lineno=429, col_offset=4), Expr(Call(Attribute(Name('suffixes', Load(), lineno=432, col_offset=4), 'sort', Load(), lineno=432, col_offset=4), [], [], None, None, lineno=432, col_offset=4), lineno=432, col_offset=4), For(Tuple([Name('neglen', Store(), lineno=433, col_offset=8), Name('suffix', Store(), lineno=433, col_offset=16), Name('mode', Store(), lineno=433, col_offset=24), Name('mtype', Store(), lineno=433, col_offset=30)], Store(), lineno=433, col_offset=8), Name('suffixes', Load(), lineno=433, col_offset=39), [If(Compare(Subscript(Name('filename', Load(), lineno=434, col_offset=11), Slice(Name('neglen', Load(), lineno=434, col_offset=20), None, None), Load(), lineno=434, col_offset=11), [Eq()], [Name('suffix', Load(), lineno=434, col_offset=32)], lineno=434, col_offset=11), [Return(Call(Name('ModuleInfo', Load(), lineno=435, col_offset=19), [Subscript(Name('filename', Load(), lineno=435, col_offset=30), Slice(None, Name('neglen', Load(), lineno=435, col_offset=40), None), Load(), lineno=435, col_offset=30), Name('suffix', Load(), lineno=435, col_offset=49), Name('mode', Load(), lineno=435, col_offset=57), Name('mtype', Load(), lineno=435, col_offset=63)], [], None, None, lineno=435, col_offset=19), lineno=435, col_offset=12)], [], lineno=434, col_offset=8)], [], lineno=433, col_offset=4)], [], lineno=426, col_offset=0), FunctionDef('getmodulename', arguments([Name('path', Param(), lineno=437, col_offset=18)], None, None, []), [Expr(Str('Return the module name for a given file, or None.', lineno=438, col_offset=4), lineno=438, col_offset=4), Assign([Name('info', Store(), lineno=439, col_offset=4)], Call(Name('getmoduleinfo', Load(), lineno=439, col_offset=11), [Name('path', Load(), lineno=439, col_offset=25)], [], None, None, lineno=439, col_offset=11), lineno=439, col_offset=4), If(Name('info', Load(), lineno=440, col_offset=7), [Return(Subscript(Name('info', Load(), lineno=440, col_offset=20), Index(Num(0, lineno=440, col_offset=25)), Load(), lineno=440, col_offset=20), lineno=440, col_offset=13)], [], lineno=440, col_offset=4)], [], lineno=437, col_offset=0), FunctionDef('getsourcefile', arguments([Name('object', Param(), lineno=442, col_offset=18)], None, None, []), [Expr(Str("Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    ", lineno=445, col_offset=-1), lineno=445, col_offset=-1), Assign([Name('filename', Store(), lineno=446, col_offset=4)], Call(Name('getfile', Load(), lineno=446, col_offset=15), [Name('object', Load(), lineno=446, col_offset=23)], [], None, None, lineno=446, col_offset=15), lineno=446, col_offset=4), If(Compare(Call(Attribute(Name('string', Load(), lineno=447, col_offset=7), 'lower', Load(), lineno=447, col_offset=7), [Subscript(Name('filename', Load(), lineno=447, col_offset=20), Slice(Num(-4, lineno=447, col_offset=30), None, None), Load(), lineno=447, col_offset=20)], [], None, None, lineno=447, col_offset=7), [In()], [Tuple([Str('.pyc', lineno=447, col_offset=39), Str('.pyo', lineno=447, col_offset=47)], Load(), lineno=447, col_offset=39)], lineno=447, col_offset=7), [Assign([Name('filename', Store(), lineno=448, col_offset=8)], BinOp(Subscript(Name('filename', Load(), lineno=448, col_offset=19), Slice(None, Num(-4, lineno=448, col_offset=30), None), Load(), lineno=448, col_offset=19), Add(), Str('.py', lineno=448, col_offset=35), lineno=448, col_offset=19), lineno=448, col_offset=8)], [], lineno=447, col_offset=4), For(Tuple([Name('suffix', Store(), lineno=449, col_offset=8), Name('mode', Store(), lineno=449, col_offset=16), Name('kind', Store(), lineno=449, col_offset=22)], Store(), lineno=449, col_offset=8), Call(Attribute(Name('imp', Load(), lineno=449, col_offset=30), 'get_suffixes', Load(), lineno=449, col_offset=30), [], [], None, None, lineno=449, col_offset=30), [If(BoolOp(And(), [Compare(Str('b', lineno=450, col_offset=11), [In()], [Name('mode', Load(), lineno=450, col_offset=18)], lineno=450, col_offset=11), Compare(Call(Attribute(Name('string', Load(), lineno=450, col_offset=27), 'lower', Load(), lineno=450, col_offset=27), [Subscript(Name('filename', Load(), lineno=450, col_offset=40), Slice(UnaryOp(USub(), Call(Name('len', Load(), lineno=450, col_offset=50), [Name('suffix', Load(), lineno=450, col_offset=54)], [], None, None, lineno=450, col_offset=50), lineno=450, col_offset=49), None, None), Load(), lineno=450, col_offset=40)], [], None, None, lineno=450, col_offset=27), [Eq()], [Name('suffix', Load(), lineno=450, col_offset=68)], lineno=450, col_offset=27)], lineno=450, col_offset=11), [Return(Name('None', Load(), lineno=452, col_offset=19), lineno=452, col_offset=12)], [], lineno=450, col_offset=8)], [], lineno=449, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=453, col_offset=7), 'path', Load(), lineno=453, col_offset=7), 'exists', Load(), lineno=453, col_offset=7), [Name('filename', Load(), lineno=453, col_offset=22)], [], None, None, lineno=453, col_offset=7), [Return(Name('filename', Load(), lineno=454, col_offset=15), lineno=454, col_offset=8)], [], lineno=453, col_offset=4), If(Call(Name('hasattr', Load(), lineno=456, col_offset=7), [Call(Name('getmodule', Load(), lineno=456, col_offset=15), [Name('object', Load(), lineno=456, col_offset=25), Name('filename', Load(), lineno=456, col_offset=33)], [], None, None, lineno=456, col_offset=15), Str('__loader__', lineno=456, col_offset=44)], [], None, None, lineno=456, col_offset=7), [Return(Name('filename', Load(), lineno=457, col_offset=15), lineno=457, col_offset=8)], [], lineno=456, col_offset=4), If(Compare(Name('filename', Load(), lineno=459, col_offset=7), [In()], [Attribute(Name('linecache', Load(), lineno=459, col_offset=19), 'cache', Load(), lineno=459, col_offset=19)], lineno=459, col_offset=7), [Return(Name('filename', Load(), lineno=460, col_offset=15), lineno=460, col_offset=8)], [], lineno=459, col_offset=4)], [], lineno=442, col_offset=0), FunctionDef('getabsfile', arguments([Name('object', Param(), lineno=462, col_offset=15), Name('_filename', Param(), lineno=462, col_offset=23)], None, None, [Name('None', Load(), lineno=462, col_offset=33)]), [Expr(Str('Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.', lineno=466, col_offset=-1), lineno=466, col_offset=-1), If(Compare(Name('_filename', Load(), lineno=467, col_offset=7), [Is()], [Name('None', Load(), lineno=467, col_offset=20)], lineno=467, col_offset=7), [Assign([Name('_filename', Store(), lineno=468, col_offset=8)], BoolOp(Or(), [Call(Name('getsourcefile', Load(), lineno=468, col_offset=20), [Name('object', Load(), lineno=468, col_offset=34)], [], None, None, lineno=468, col_offset=20), Call(Name('getfile', Load(), lineno=468, col_offset=45), [Name('object', Load(), lineno=468, col_offset=53)], [], None, None, lineno=468, col_offset=45)], lineno=468, col_offset=20), lineno=468, col_offset=8)], [], lineno=467, col_offset=4), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=469, col_offset=11), 'path', Load(), lineno=469, col_offset=11), 'normcase', Load(), lineno=469, col_offset=11), [Call(Attribute(Attribute(Name('os', Load(), lineno=469, col_offset=28), 'path', Load(), lineno=469, col_offset=28), 'abspath', Load(), lineno=469, col_offset=28), [Name('_filename', Load(), lineno=469, col_offset=44)], [], None, None, lineno=469, col_offset=28)], [], None, None, lineno=469, col_offset=11), lineno=469, col_offset=4)], [], lineno=462, col_offset=0), Assign([Name('modulesbyfile', Store(), lineno=471, col_offset=0)], Dict([], [], lineno=471, col_offset=16), lineno=471, col_offset=0), Assign([Name('_filesbymodname', Store(), lineno=472, col_offset=0)], Dict([], [], lineno=472, col_offset=18), lineno=472, col_offset=0), FunctionDef('getmodule', arguments([Name('object', Param(), lineno=474, col_offset=14), Name('_filename', Param(), lineno=474, col_offset=22)], None, None, [Name('None', Load(), lineno=474, col_offset=32)]), [Expr(Str('Return the module an object was defined in, or None if not found.', lineno=475, col_offset=4), lineno=475, col_offset=4), If(Call(Name('ismodule', Load(), lineno=476, col_offset=7), [Name('object', Load(), lineno=476, col_offset=16)], [], None, None, lineno=476, col_offset=7), [Return(Name('object', Load(), lineno=477, col_offset=15), lineno=477, col_offset=8)], [], lineno=476, col_offset=4), If(Call(Name('hasattr', Load(), lineno=478, col_offset=7), [Name('object', Load(), lineno=478, col_offset=15), Str('__module__', lineno=478, col_offset=23)], [], None, None, lineno=478, col_offset=7), [Return(Call(Attribute(Attribute(Name('sys', Load(), lineno=479, col_offset=15), 'modules', Load(), lineno=479, col_offset=15), 'get', Load(), lineno=479, col_offset=15), [Attribute(Name('object', Load(), lineno=479, col_offset=31), '__module__', Load(), lineno=479, col_offset=31)], [], None, None, lineno=479, col_offset=15), lineno=479, col_offset=8)], [], lineno=478, col_offset=4), If(BoolOp(And(), [Compare(Name('_filename', Load(), lineno=481, col_offset=7), [IsNot()], [Name('None', Load(), lineno=481, col_offset=24)], lineno=481, col_offset=7), Compare(Name('_filename', Load(), lineno=481, col_offset=33), [In()], [Name('modulesbyfile', Load(), lineno=481, col_offset=46)], lineno=481, col_offset=33)], lineno=481, col_offset=7), [Return(Call(Attribute(Attribute(Name('sys', Load(), lineno=482, col_offset=15), 'modules', Load(), lineno=482, col_offset=15), 'get', Load(), lineno=482, col_offset=15), [Subscript(Name('modulesbyfile', Load(), lineno=482, col_offset=31), Index(Name('_filename', Load(), lineno=482, col_offset=45)), Load(), lineno=482, col_offset=31)], [], None, None, lineno=482, col_offset=15), lineno=482, col_offset=8)], [], lineno=481, col_offset=4), TryExcept([Assign([Name('file', Store(), lineno=485, col_offset=8)], Call(Name('getabsfile', Load(), lineno=485, col_offset=15), [Name('object', Load(), lineno=485, col_offset=26), Name('_filename', Load(), lineno=485, col_offset=34)], [], None, None, lineno=485, col_offset=15), lineno=485, col_offset=8)], [ExceptHandler(Name('TypeError', Load(), lineno=486, col_offset=11), None, [Return(Name('None', Load(), lineno=487, col_offset=15), lineno=487, col_offset=8)], lineno=486, col_offset=4)], [], lineno=484, col_offset=4), If(Compare(Name('file', Load(), lineno=488, col_offset=7), [In()], [Name('modulesbyfile', Load(), lineno=488, col_offset=15)], lineno=488, col_offset=7), [Return(Call(Attribute(Attribute(Name('sys', Load(), lineno=489, col_offset=15), 'modules', Load(), lineno=489, col_offset=15), 'get', Load(), lineno=489, col_offset=15), [Subscript(Name('modulesbyfile', Load(), lineno=489, col_offset=31), Index(Name('file', Load(), lineno=489, col_offset=45)), Load(), lineno=489, col_offset=31)], [], None, None, lineno=489, col_offset=15), lineno=489, col_offset=8)], [], lineno=488, col_offset=4), For(Tuple([Name('modname', Store(), lineno=492, col_offset=8), Name('module', Store(), lineno=492, col_offset=17)], Store(), lineno=492, col_offset=8), Call(Attribute(Attribute(Name('sys', Load(), lineno=492, col_offset=27), 'modules', Load(), lineno=492, col_offset=27), 'items', Load(), lineno=492, col_offset=27), [], [], None, None, lineno=492, col_offset=27), [If(BoolOp(And(), [Call(Name('ismodule', Load(), lineno=493, col_offset=11), [Name('module', Load(), lineno=493, col_offset=20)], [], None, None, lineno=493, col_offset=11), Call(Name('hasattr', Load(), lineno=493, col_offset=32), [Name('module', Load(), lineno=493, col_offset=40), Str('__file__', lineno=493, col_offset=48)], [], None, None, lineno=493, col_offset=32)], lineno=493, col_offset=11), [Assign([Name('f', Store(), lineno=494, col_offset=12)], Attribute(Name('module', Load(), lineno=494, col_offset=16), '__file__', Load(), lineno=494, col_offset=16), lineno=494, col_offset=12), If(Compare(Name('f', Load(), lineno=495, col_offset=15), [Eq()], [Call(Attribute(Name('_filesbymodname', Load(), lineno=495, col_offset=20), 'get', Load(), lineno=495, col_offset=20), [Name('modname', Load(), lineno=495, col_offset=40), Name('None', Load(), lineno=495, col_offset=49)], [], None, None, lineno=495, col_offset=20)], lineno=495, col_offset=15), [Continue( lineno=497, col_offset=16)], [], lineno=495, col_offset=12), Assign([Subscript(Name('_filesbymodname', Load(), lineno=498, col_offset=12), Index(Name('modname', Load(), lineno=498, col_offset=28)), Store(), lineno=498, col_offset=12)], Name('f', Load(), lineno=498, col_offset=39), lineno=498, col_offset=12), Assign([Name('f', Store(), lineno=499, col_offset=12)], Call(Name('getabsfile', Load(), lineno=499, col_offset=16), [Name('module', Load(), lineno=499, col_offset=27)], [], None, None, lineno=499, col_offset=16), lineno=499, col_offset=12), Assign([Subscript(Name('modulesbyfile', Load(), lineno=501, col_offset=12), Index(Name('f', Load(), lineno=501, col_offset=26)), Store(), lineno=501, col_offset=12), Subscript(Name('modulesbyfile', Load(), lineno=501, col_offset=31), Index(Call(Attribute(Attribute(Name('os', Load(), lineno=502, col_offset=16), 'path', Load(), lineno=502, col_offset=16), 'realpath', Load(), lineno=502, col_offset=16), [Name('f', Load(), lineno=502, col_offset=33)], [], None, None, lineno=502, col_offset=16)), Store(), lineno=501, col_offset=31)], Attribute(Name('module', Load(), lineno=502, col_offset=39), '__name__', Load(), lineno=502, col_offset=39), lineno=501, col_offset=12)], [], lineno=493, col_offset=8)], [], lineno=492, col_offset=4), If(Compare(Name('file', Load(), lineno=503, col_offset=7), [In()], [Name('modulesbyfile', Load(), lineno=503, col_offset=15)], lineno=503, col_offset=7), [Return(Call(Attribute(Attribute(Name('sys', Load(), lineno=504, col_offset=15), 'modules', Load(), lineno=504, col_offset=15), 'get', Load(), lineno=504, col_offset=15), [Subscript(Name('modulesbyfile', Load(), lineno=504, col_offset=31), Index(Name('file', Load(), lineno=504, col_offset=45)), Load(), lineno=504, col_offset=31)], [], None, None, lineno=504, col_offset=15), lineno=504, col_offset=8)], [], lineno=503, col_offset=4), Assign([Name('main', Store(), lineno=506, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=506, col_offset=11), 'modules', Load(), lineno=506, col_offset=11), Index(Str('__main__', lineno=506, col_offset=23)), Load(), lineno=506, col_offset=11), lineno=506, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=507, col_offset=11), [Name('object', Load(), lineno=507, col_offset=19), Str('__name__', lineno=507, col_offset=27)], [], None, None, lineno=507, col_offset=11), lineno=507, col_offset=7), [Return(Name('None', Load(), lineno=508, col_offset=15), lineno=508, col_offset=8)], [], lineno=507, col_offset=4), If(Call(Name('hasattr', Load(), lineno=509, col_offset=7), [Name('main', Load(), lineno=509, col_offset=15), Attribute(Name('object', Load(), lineno=509, col_offset=21), '__name__', Load(), lineno=509, col_offset=21)], [], None, None, lineno=509, col_offset=7), [Assign([Name('mainobject', Store(), lineno=510, col_offset=8)], Call(Name('getattr', Load(), lineno=510, col_offset=21), [Name('main', Load(), lineno=510, col_offset=29), Attribute(Name('object', Load(), lineno=510, col_offset=35), '__name__', Load(), lineno=510, col_offset=35)], [], None, None, lineno=510, col_offset=21), lineno=510, col_offset=8), If(Compare(Name('mainobject', Load(), lineno=511, col_offset=11), [Is()], [Name('object', Load(), lineno=511, col_offset=25)], lineno=511, col_offset=11), [Return(Name('main', Load(), lineno=512, col_offset=19), lineno=512, col_offset=12)], [], lineno=511, col_offset=8)], [], lineno=509, col_offset=4), Assign([Name('builtin', Store(), lineno=514, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=514, col_offset=14), 'modules', Load(), lineno=514, col_offset=14), Index(Str('__builtin__', lineno=514, col_offset=26)), Load(), lineno=514, col_offset=14), lineno=514, col_offset=4), If(Call(Name('hasattr', Load(), lineno=515, col_offset=7), [Name('builtin', Load(), lineno=515, col_offset=15), Attribute(Name('object', Load(), lineno=515, col_offset=24), '__name__', Load(), lineno=515, col_offset=24)], [], None, None, lineno=515, col_offset=7), [Assign([Name('builtinobject', Store(), lineno=516, col_offset=8)], Call(Name('getattr', Load(), lineno=516, col_offset=24), [Name('builtin', Load(), lineno=516, col_offset=32), Attribute(Name('object', Load(), lineno=516, col_offset=41), '__name__', Load(), lineno=516, col_offset=41)], [], None, None, lineno=516, col_offset=24), lineno=516, col_offset=8), If(Compare(Name('builtinobject', Load(), lineno=517, col_offset=11), [Is()], [Name('object', Load(), lineno=517, col_offset=28)], lineno=517, col_offset=11), [Return(Name('builtin', Load(), lineno=518, col_offset=19), lineno=518, col_offset=12)], [], lineno=517, col_offset=8)], [], lineno=515, col_offset=4)], [], lineno=474, col_offset=0), FunctionDef('findsource', arguments([Name('object', Param(), lineno=520, col_offset=15)], None, None, []), [Expr(Str('Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An IOError\n    is raised if the source code cannot be retrieved.', lineno=526, col_offset=-1), lineno=526, col_offset=-1), Assign([Name('file', Store(), lineno=527, col_offset=4)], Call(Name('getsourcefile', Load(), lineno=527, col_offset=11), [Name('object', Load(), lineno=527, col_offset=25)], [], None, None, lineno=527, col_offset=11), lineno=527, col_offset=4), If(UnaryOp(Not(), Name('file', Load(), lineno=528, col_offset=11), lineno=528, col_offset=7), [Raise(Call(Name('IOError', Load(), lineno=529, col_offset=14), [Str('source code not available', lineno=529, col_offset=22)], [], None, None, lineno=529, col_offset=14), None, None, lineno=529, col_offset=8)], [], lineno=528, col_offset=4), Assign([Name('module', Store(), lineno=530, col_offset=4)], Call(Name('getmodule', Load(), lineno=530, col_offset=13), [Name('object', Load(), lineno=530, col_offset=23), Name('file', Load(), lineno=530, col_offset=31)], [], None, None, lineno=530, col_offset=13), lineno=530, col_offset=4), If(Name('module', Load(), lineno=531, col_offset=7), [Assign([Name('lines', Store(), lineno=532, col_offset=8)], Call(Attribute(Name('linecache', Load(), lineno=532, col_offset=16), 'getlines', Load(), lineno=532, col_offset=16), [Name('file', Load(), lineno=532, col_offset=35), Attribute(Name('module', Load(), lineno=532, col_offset=41), '__dict__', Load(), lineno=532, col_offset=41)], [], None, None, lineno=532, col_offset=16), lineno=532, col_offset=8)], [Assign([Name('lines', Store(), lineno=534, col_offset=8)], Call(Attribute(Name('linecache', Load(), lineno=534, col_offset=16), 'getlines', Load(), lineno=534, col_offset=16), [Name('file', Load(), lineno=534, col_offset=35)], [], None, None, lineno=534, col_offset=16), lineno=534, col_offset=8)], lineno=531, col_offset=4), If(UnaryOp(Not(), Name('lines', Load(), lineno=535, col_offset=11), lineno=535, col_offset=7), [Raise(Call(Name('IOError', Load(), lineno=536, col_offset=14), [Str('could not get source code', lineno=536, col_offset=22)], [], None, None, lineno=536, col_offset=14), None, None, lineno=536, col_offset=8)], [], lineno=535, col_offset=4), If(Call(Name('ismodule', Load(), lineno=538, col_offset=7), [Name('object', Load(), lineno=538, col_offset=16)], [], None, None, lineno=538, col_offset=7), [Return(Tuple([Name('lines', Load(), lineno=539, col_offset=15), Num(0, lineno=539, col_offset=22)], Load(), lineno=539, col_offset=15), lineno=539, col_offset=8)], [], lineno=538, col_offset=4), If(Call(Name('isclass', Load(), lineno=541, col_offset=7), [Name('object', Load(), lineno=541, col_offset=15)], [], None, None, lineno=541, col_offset=7), [Assign([Name('name', Store(), lineno=542, col_offset=8)], Attribute(Name('object', Load(), lineno=542, col_offset=15), '__name__', Load(), lineno=542, col_offset=15), lineno=542, col_offset=8), Assign([Name('pat', Store(), lineno=543, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=543, col_offset=14), 'compile', Load(), lineno=543, col_offset=14), [BinOp(BinOp(Str('^(\\s*)class\\s*', lineno=543, col_offset=25), Add(), Name('name', Load(), lineno=543, col_offset=45), lineno=543, col_offset=25), Add(), Str('\\b', lineno=543, col_offset=52), lineno=543, col_offset=50)], [], None, None, lineno=543, col_offset=14), lineno=543, col_offset=8), Assign([Name('candidates', Store(), lineno=547, col_offset=8)], List([], Load(), lineno=547, col_offset=21), lineno=547, col_offset=8), For(Name('i', Store(), lineno=548, col_offset=12), Call(Name('range', Load(), lineno=548, col_offset=17), [Call(Name('len', Load(), lineno=548, col_offset=23), [Name('lines', Load(), lineno=548, col_offset=27)], [], None, None, lineno=548, col_offset=23)], [], None, None, lineno=548, col_offset=17), [Assign([Name('match', Store(), lineno=549, col_offset=12)], Call(Attribute(Name('pat', Load(), lineno=549, col_offset=20), 'match', Load(), lineno=549, col_offset=20), [Subscript(Name('lines', Load(), lineno=549, col_offset=30), Index(Name('i', Load(), lineno=549, col_offset=36)), Load(), lineno=549, col_offset=30)], [], None, None, lineno=549, col_offset=20), lineno=549, col_offset=12), If(Name('match', Load(), lineno=550, col_offset=15), [If(Compare(Subscript(Subscript(Name('lines', Load(), lineno=552, col_offset=19), Index(Name('i', Load(), lineno=552, col_offset=25)), Load(), lineno=552, col_offset=19), Index(Num(0, lineno=552, col_offset=28)), Load(), lineno=552, col_offset=19), [Eq()], [Str('c', lineno=552, col_offset=34)], lineno=552, col_offset=19), [Return(Tuple([Name('lines', Load(), lineno=553, col_offset=27), Name('i', Load(), lineno=553, col_offset=34)], Load(), lineno=553, col_offset=27), lineno=553, col_offset=20)], [], lineno=552, col_offset=16), Expr(Call(Attribute(Name('candidates', Load(), lineno=555, col_offset=16), 'append', Load(), lineno=555, col_offset=16), [Tuple([Call(Attribute(Name('match', Load(), lineno=555, col_offset=35), 'group', Load(), lineno=555, col_offset=35), [Num(1, lineno=555, col_offset=47)], [], None, None, lineno=555, col_offset=35), Name('i', Load(), lineno=555, col_offset=51)], Load(), lineno=555, col_offset=35)], [], None, None, lineno=555, col_offset=16), lineno=555, col_offset=16)], [], lineno=550, col_offset=12)], [], lineno=548, col_offset=8), If(Name('candidates', Load(), lineno=556, col_offset=11), [Expr(Call(Attribute(Name('candidates', Load(), lineno=559, col_offset=12), 'sort', Load(), lineno=559, col_offset=12), [], [], None, None, lineno=559, col_offset=12), lineno=559, col_offset=12), Return(Tuple([Name('lines', Load(), lineno=560, col_offset=19), Subscript(Subscript(Name('candidates', Load(), lineno=560, col_offset=26), Index(Num(0, lineno=560, col_offset=37)), Load(), lineno=560, col_offset=26), Index(Num(1, lineno=560, col_offset=40)), Load(), lineno=560, col_offset=26)], Load(), lineno=560, col_offset=19), lineno=560, col_offset=12)], [Raise(Call(Name('IOError', Load(), lineno=562, col_offset=18), [Str('could not find class definition', lineno=562, col_offset=26)], [], None, None, lineno=562, col_offset=18), None, None, lineno=562, col_offset=12)], lineno=556, col_offset=8)], [], lineno=541, col_offset=4), If(Call(Name('ismethod', Load(), lineno=564, col_offset=7), [Name('object', Load(), lineno=564, col_offset=16)], [], None, None, lineno=564, col_offset=7), [Assign([Name('object', Store(), lineno=565, col_offset=8)], Attribute(Name('object', Load(), lineno=565, col_offset=17), 'im_func', Load(), lineno=565, col_offset=17), lineno=565, col_offset=8)], [], lineno=564, col_offset=4), If(Call(Name('isfunction', Load(), lineno=566, col_offset=7), [Name('object', Load(), lineno=566, col_offset=18)], [], None, None, lineno=566, col_offset=7), [Assign([Name('object', Store(), lineno=567, col_offset=8)], Attribute(Name('object', Load(), lineno=567, col_offset=17), 'func_code', Load(), lineno=567, col_offset=17), lineno=567, col_offset=8)], [], lineno=566, col_offset=4), If(Call(Name('istraceback', Load(), lineno=568, col_offset=7), [Name('object', Load(), lineno=568, col_offset=19)], [], None, None, lineno=568, col_offset=7), [Assign([Name('object', Store(), lineno=569, col_offset=8)], Attribute(Name('object', Load(), lineno=569, col_offset=17), 'tb_frame', Load(), lineno=569, col_offset=17), lineno=569, col_offset=8)], [], lineno=568, col_offset=4), If(Call(Name('isframe', Load(), lineno=570, col_offset=7), [Name('object', Load(), lineno=570, col_offset=15)], [], None, None, lineno=570, col_offset=7), [Assign([Name('object', Store(), lineno=571, col_offset=8)], Attribute(Name('object', Load(), lineno=571, col_offset=17), 'f_code', Load(), lineno=571, col_offset=17), lineno=571, col_offset=8)], [], lineno=570, col_offset=4), If(Call(Name('iscode', Load(), lineno=572, col_offset=7), [Name('object', Load(), lineno=572, col_offset=14)], [], None, None, lineno=572, col_offset=7), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=573, col_offset=15), [Name('object', Load(), lineno=573, col_offset=23), Str('co_firstlineno', lineno=573, col_offset=31)], [], None, None, lineno=573, col_offset=15), lineno=573, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=574, col_offset=18), [Str('could not find function definition', lineno=574, col_offset=26)], [], None, None, lineno=574, col_offset=18), None, None, lineno=574, col_offset=12)], [], lineno=573, col_offset=8), Assign([Name('lnum', Store(), lineno=575, col_offset=8)], BinOp(Attribute(Name('object', Load(), lineno=575, col_offset=15), 'co_firstlineno', Load(), lineno=575, col_offset=15), Sub(), Num(1, lineno=575, col_offset=39), lineno=575, col_offset=15), lineno=575, col_offset=8), Assign([Name('pat', Store(), lineno=576, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=576, col_offset=14), 'compile', Load(), lineno=576, col_offset=14), [Str('^(\\s*def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)', lineno=576, col_offset=25)], [], None, None, lineno=576, col_offset=14), lineno=576, col_offset=8), While(Compare(Name('lnum', Load(), lineno=577, col_offset=14), [Gt()], [Num(0, lineno=577, col_offset=21)], lineno=577, col_offset=14), [If(Call(Attribute(Name('pat', Load(), lineno=578, col_offset=15), 'match', Load(), lineno=578, col_offset=15), [Subscript(Name('lines', Load(), lineno=578, col_offset=25), Index(Name('lnum', Load(), lineno=578, col_offset=31)), Load(), lineno=578, col_offset=25)], [], None, None, lineno=578, col_offset=15), [Break( lineno=578, col_offset=39)], [], lineno=578, col_offset=12), Assign([Name('lnum', Store(), lineno=579, col_offset=12)], BinOp(Name('lnum', Load(), lineno=579, col_offset=19), Sub(), Num(1, lineno=579, col_offset=26), lineno=579, col_offset=19), lineno=579, col_offset=12)], [], lineno=577, col_offset=8), Return(Tuple([Name('lines', Load(), lineno=580, col_offset=15), Name('lnum', Load(), lineno=580, col_offset=22)], Load(), lineno=580, col_offset=15), lineno=580, col_offset=8)], [], lineno=572, col_offset=4), Raise(Call(Name('IOError', Load(), lineno=581, col_offset=10), [Str('could not find code object', lineno=581, col_offset=18)], [], None, None, lineno=581, col_offset=10), None, None, lineno=581, col_offset=4)], [], lineno=520, col_offset=0), FunctionDef('getcomments', arguments([Name('object', Param(), lineno=583, col_offset=16)], None, None, []), [Expr(Str("Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    ", lineno=587, col_offset=-1), lineno=587, col_offset=-1), TryExcept([Assign([Tuple([Name('lines', Store(), lineno=589, col_offset=8), Name('lnum', Store(), lineno=589, col_offset=15)], Store(), lineno=589, col_offset=8)], Call(Name('findsource', Load(), lineno=589, col_offset=22), [Name('object', Load(), lineno=589, col_offset=33)], [], None, None, lineno=589, col_offset=22), lineno=589, col_offset=8)], [ExceptHandler(Tuple([Name('IOError', Load(), lineno=590, col_offset=12), Name('TypeError', Load(), lineno=590, col_offset=21)], Load(), lineno=590, col_offset=12), None, [Return(Name('None', Load(), lineno=591, col_offset=15), lineno=591, col_offset=8)], lineno=590, col_offset=4)], [], lineno=588, col_offset=4), If(Call(Name('ismodule', Load(), lineno=593, col_offset=7), [Name('object', Load(), lineno=593, col_offset=16)], [], None, None, lineno=593, col_offset=7), [Assign([Name('start', Store(), lineno=595, col_offset=8)], Num(0, lineno=595, col_offset=16), lineno=595, col_offset=8), If(BoolOp(And(), [Name('lines', Load(), lineno=596, col_offset=11), Compare(Subscript(Subscript(Name('lines', Load(), lineno=596, col_offset=21), Index(Num(0, lineno=596, col_offset=27)), Load(), lineno=596, col_offset=21), Slice(None, Num(2, lineno=596, col_offset=31), None), Load(), lineno=596, col_offset=21), [Eq()], [Str('#!', lineno=596, col_offset=37)], lineno=596, col_offset=21)], lineno=596, col_offset=11), [Assign([Name('start', Store(), lineno=596, col_offset=43)], Num(1, lineno=596, col_offset=51), lineno=596, col_offset=43)], [], lineno=596, col_offset=8), While(BoolOp(And(), [Compare(Name('start', Load(), lineno=597, col_offset=14), [Lt()], [Call(Name('len', Load(), lineno=597, col_offset=22), [Name('lines', Load(), lineno=597, col_offset=26)], [], None, None, lineno=597, col_offset=22)], lineno=597, col_offset=14), Compare(Call(Attribute(Name('string', Load(), lineno=597, col_offset=37), 'strip', Load(), lineno=597, col_offset=37), [Subscript(Name('lines', Load(), lineno=597, col_offset=50), Index(Name('start', Load(), lineno=597, col_offset=56)), Load(), lineno=597, col_offset=50)], [], None, None, lineno=597, col_offset=37), [In()], [Tuple([Str('', lineno=597, col_offset=68), Str('#', lineno=597, col_offset=72)], Load(), lineno=597, col_offset=68)], lineno=597, col_offset=37)], lineno=597, col_offset=14), [Assign([Name('start', Store(), lineno=598, col_offset=12)], BinOp(Name('start', Load(), lineno=598, col_offset=20), Add(), Num(1, lineno=598, col_offset=28), lineno=598, col_offset=20), lineno=598, col_offset=12)], [], lineno=597, col_offset=8), If(BoolOp(And(), [Compare(Name('start', Load(), lineno=599, col_offset=11), [Lt()], [Call(Name('len', Load(), lineno=599, col_offset=19), [Name('lines', Load(), lineno=599, col_offset=23)], [], None, None, lineno=599, col_offset=19)], lineno=599, col_offset=11), Compare(Subscript(Subscript(Name('lines', Load(), lineno=599, col_offset=34), Index(Name('start', Load(), lineno=599, col_offset=40)), Load(), lineno=599, col_offset=34), Slice(None, Num(1, lineno=599, col_offset=48), None), Load(), lineno=599, col_offset=34), [Eq()], [Str('#', lineno=599, col_offset=54)], lineno=599, col_offset=34)], lineno=599, col_offset=11), [Assign([Name('comments', Store(), lineno=600, col_offset=12)], List([], Load(), lineno=600, col_offset=23), lineno=600, col_offset=12), Assign([Name('end', Store(), lineno=601, col_offset=12)], Name('start', Load(), lineno=601, col_offset=18), lineno=601, col_offset=12), While(BoolOp(And(), [Compare(Name('end', Load(), lineno=602, col_offset=18), [Lt()], [Call(Name('len', Load(), lineno=602, col_offset=24), [Name('lines', Load(), lineno=602, col_offset=28)], [], None, None, lineno=602, col_offset=24)], lineno=602, col_offset=18), Compare(Subscript(Subscript(Name('lines', Load(), lineno=602, col_offset=39), Index(Name('end', Load(), lineno=602, col_offset=45)), Load(), lineno=602, col_offset=39), Slice(None, Num(1, lineno=602, col_offset=51), None), Load(), lineno=602, col_offset=39), [Eq()], [Str('#', lineno=602, col_offset=57)], lineno=602, col_offset=39)], lineno=602, col_offset=18), [Expr(Call(Attribute(Name('comments', Load(), lineno=603, col_offset=16), 'append', Load(), lineno=603, col_offset=16), [Call(Attribute(Name('string', Load(), lineno=603, col_offset=32), 'expandtabs', Load(), lineno=603, col_offset=32), [Subscript(Name('lines', Load(), lineno=603, col_offset=50), Index(Name('end', Load(), lineno=603, col_offset=56)), Load(), lineno=603, col_offset=50)], [], None, None, lineno=603, col_offset=32)], [], None, None, lineno=603, col_offset=16), lineno=603, col_offset=16), Assign([Name('end', Store(), lineno=604, col_offset=16)], BinOp(Name('end', Load(), lineno=604, col_offset=22), Add(), Num(1, lineno=604, col_offset=28), lineno=604, col_offset=22), lineno=604, col_offset=16)], [], lineno=602, col_offset=12), Return(Call(Attribute(Name('string', Load(), lineno=605, col_offset=19), 'join', Load(), lineno=605, col_offset=19), [Name('comments', Load(), lineno=605, col_offset=31), Str('', lineno=605, col_offset=41)], [], None, None, lineno=605, col_offset=19), lineno=605, col_offset=12)], [], lineno=599, col_offset=8)], [If(Compare(Name('lnum', Load(), lineno=608, col_offset=9), [Gt()], [Num(0, lineno=608, col_offset=16)], lineno=608, col_offset=9), [Assign([Name('indent', Store(), lineno=609, col_offset=8)], Call(Name('indentsize', Load(), lineno=609, col_offset=17), [Subscript(Name('lines', Load(), lineno=609, col_offset=28), Index(Name('lnum', Load(), lineno=609, col_offset=34)), Load(), lineno=609, col_offset=28)], [], None, None, lineno=609, col_offset=17), lineno=609, col_offset=8), Assign([Name('end', Store(), lineno=610, col_offset=8)], BinOp(Name('lnum', Load(), lineno=610, col_offset=14), Sub(), Num(1, lineno=610, col_offset=21), lineno=610, col_offset=14), lineno=610, col_offset=8), If(BoolOp(And(), [Compare(Name('end', Load(), lineno=611, col_offset=11), [GtE()], [Num(0, lineno=611, col_offset=18)], lineno=611, col_offset=11), Compare(Subscript(Call(Attribute(Name('string', Load(), lineno=611, col_offset=24), 'lstrip', Load(), lineno=611, col_offset=24), [Subscript(Name('lines', Load(), lineno=611, col_offset=38), Index(Name('end', Load(), lineno=611, col_offset=44)), Load(), lineno=611, col_offset=38)], [], None, None, lineno=611, col_offset=24), Slice(None, Num(1, lineno=611, col_offset=51), None), Load(), lineno=611, col_offset=24), [Eq()], [Str('#', lineno=611, col_offset=57)], lineno=611, col_offset=24), Compare(Call(Name('indentsize', Load(), lineno=612, col_offset=12), [Subscript(Name('lines', Load(), lineno=612, col_offset=23), Index(Name('end', Load(), lineno=612, col_offset=29)), Load(), lineno=612, col_offset=23)], [], None, None, lineno=612, col_offset=12), [Eq()], [Name('indent', Load(), lineno=612, col_offset=38)], lineno=612, col_offset=12)], lineno=611, col_offset=11), [Assign([Name('comments', Store(), lineno=613, col_offset=12)], List([Call(Attribute(Name('string', Load(), lineno=613, col_offset=24), 'lstrip', Load(), lineno=613, col_offset=24), [Call(Attribute(Name('string', Load(), lineno=613, col_offset=38), 'expandtabs', Load(), lineno=613, col_offset=38), [Subscript(Name('lines', Load(), lineno=613, col_offset=56), Index(Name('end', Load(), lineno=613, col_offset=62)), Load(), lineno=613, col_offset=56)], [], None, None, lineno=613, col_offset=38)], [], None, None, lineno=613, col_offset=24)], Load(), lineno=613, col_offset=23), lineno=613, col_offset=12), If(Compare(Name('end', Load(), lineno=614, col_offset=15), [Gt()], [Num(0, lineno=614, col_offset=21)], lineno=614, col_offset=15), [Assign([Name('end', Store(), lineno=615, col_offset=16)], BinOp(Name('end', Load(), lineno=615, col_offset=22), Sub(), Num(1, lineno=615, col_offset=28), lineno=615, col_offset=22), lineno=615, col_offset=16), Assign([Name('comment', Store(), lineno=616, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=616, col_offset=26), 'lstrip', Load(), lineno=616, col_offset=26), [Call(Attribute(Name('string', Load(), lineno=616, col_offset=40), 'expandtabs', Load(), lineno=616, col_offset=40), [Subscript(Name('lines', Load(), lineno=616, col_offset=58), Index(Name('end', Load(), lineno=616, col_offset=64)), Load(), lineno=616, col_offset=58)], [], None, None, lineno=616, col_offset=40)], [], None, None, lineno=616, col_offset=26), lineno=616, col_offset=16), While(BoolOp(And(), [Compare(Subscript(Name('comment', Load(), lineno=617, col_offset=22), Slice(None, Num(1, lineno=617, col_offset=31), None), Load(), lineno=617, col_offset=22), [Eq()], [Str('#', lineno=617, col_offset=37)], lineno=617, col_offset=22), Compare(Call(Name('indentsize', Load(), lineno=617, col_offset=45), [Subscript(Name('lines', Load(), lineno=617, col_offset=56), Index(Name('end', Load(), lineno=617, col_offset=62)), Load(), lineno=617, col_offset=56)], [], None, None, lineno=617, col_offset=45), [Eq()], [Name('indent', Load(), lineno=617, col_offset=71)], lineno=617, col_offset=45)], lineno=617, col_offset=22), [Assign([Subscript(Name('comments', Load(), lineno=618, col_offset=20), Slice(None, Num(0, lineno=618, col_offset=30), None), Store(), lineno=618, col_offset=20)], List([Name('comment', Load(), lineno=618, col_offset=36)], Load(), lineno=618, col_offset=35), lineno=618, col_offset=20), Assign([Name('end', Store(), lineno=619, col_offset=20)], BinOp(Name('end', Load(), lineno=619, col_offset=26), Sub(), Num(1, lineno=619, col_offset=32), lineno=619, col_offset=26), lineno=619, col_offset=20), If(Compare(Name('end', Load(), lineno=620, col_offset=23), [Lt()], [Num(0, lineno=620, col_offset=29)], lineno=620, col_offset=23), [Break( lineno=620, col_offset=32)], [], lineno=620, col_offset=20), Assign([Name('comment', Store(), lineno=621, col_offset=20)], Call(Attribute(Name('string', Load(), lineno=621, col_offset=30), 'lstrip', Load(), lineno=621, col_offset=30), [Call(Attribute(Name('string', Load(), lineno=621, col_offset=44), 'expandtabs', Load(), lineno=621, col_offset=44), [Subscript(Name('lines', Load(), lineno=621, col_offset=62), Index(Name('end', Load(), lineno=621, col_offset=68)), Load(), lineno=621, col_offset=62)], [], None, None, lineno=621, col_offset=44)], [], None, None, lineno=621, col_offset=30), lineno=621, col_offset=20)], [], lineno=617, col_offset=16)], [], lineno=614, col_offset=12), While(BoolOp(And(), [Name('comments', Load(), lineno=622, col_offset=18), Compare(Call(Attribute(Name('string', Load(), lineno=622, col_offset=31), 'strip', Load(), lineno=622, col_offset=31), [Subscript(Name('comments', Load(), lineno=622, col_offset=44), Index(Num(0, lineno=622, col_offset=53)), Load(), lineno=622, col_offset=44)], [], None, None, lineno=622, col_offset=31), [Eq()], [Str('#', lineno=622, col_offset=60)], lineno=622, col_offset=31)], lineno=622, col_offset=18), [Assign([Subscript(Name('comments', Load(), lineno=623, col_offset=16), Slice(None, Num(1, lineno=623, col_offset=26), None), Store(), lineno=623, col_offset=16)], List([], Load(), lineno=623, col_offset=31), lineno=623, col_offset=16)], [], lineno=622, col_offset=12), While(BoolOp(And(), [Name('comments', Load(), lineno=624, col_offset=18), Compare(Call(Attribute(Name('string', Load(), lineno=624, col_offset=31), 'strip', Load(), lineno=624, col_offset=31), [Subscript(Name('comments', Load(), lineno=624, col_offset=44), Index(Num(-1, lineno=624, col_offset=54)), Load(), lineno=624, col_offset=44)], [], None, None, lineno=624, col_offset=31), [Eq()], [Str('#', lineno=624, col_offset=61)], lineno=624, col_offset=31)], lineno=624, col_offset=18), [Assign([Subscript(Name('comments', Load(), lineno=625, col_offset=16), Slice(Num(-1, lineno=625, col_offset=26), None, None), Store(), lineno=625, col_offset=16)], List([], Load(), lineno=625, col_offset=32), lineno=625, col_offset=16)], [], lineno=624, col_offset=12), Return(Call(Attribute(Name('string', Load(), lineno=626, col_offset=19), 'join', Load(), lineno=626, col_offset=19), [Name('comments', Load(), lineno=626, col_offset=31), Str('', lineno=626, col_offset=41)], [], None, None, lineno=626, col_offset=19), lineno=626, col_offset=12)], [], lineno=611, col_offset=8)], [], lineno=608, col_offset=9)], lineno=593, col_offset=4)], [], lineno=583, col_offset=0), ClassDef('EndOfBlock', [Name('Exception', Load(), lineno=628, col_offset=17)], [Pass( lineno=628, col_offset=29)], [], lineno=628, col_offset=0), ClassDef('BlockFinder', [], [Expr(Str('Provide a tokeneater() method to detect the end of a code block.', lineno=631, col_offset=4), lineno=631, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=632, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=633, col_offset=8), 'indent', Store(), lineno=633, col_offset=8)], Num(0, lineno=633, col_offset=22), lineno=633, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=634, col_offset=8), 'islambda', Store(), lineno=634, col_offset=8)], Name('False', Load(), lineno=634, col_offset=24), lineno=634, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=635, col_offset=8), 'started', Store(), lineno=635, col_offset=8)], Name('False', Load(), lineno=635, col_offset=23), lineno=635, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=636, col_offset=8), 'passline', Store(), lineno=636, col_offset=8)], Name('False', Load(), lineno=636, col_offset=24), lineno=636, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=637, col_offset=8), 'last', Store(), lineno=637, col_offset=8)], Num(1, lineno=637, col_offset=20), lineno=637, col_offset=8)], [], lineno=632, col_offset=4), FunctionDef('tokeneater', arguments([Name('self', Param(), lineno=639, col_offset=19), Name('type', Param(), lineno=639, col_offset=25), Name('token', Param(), lineno=639, col_offset=31), Name('srow_scol', Param(), lineno=639, col_offset=38), Name('erow_ecol', Param(), lineno=639, col_offset=49), Name('line', Param(), lineno=639, col_offset=60)], None, None, []), [Assign([Tuple([Name('srow', Store(), lineno=640, col_offset=8), Name('scol', Store(), lineno=640, col_offset=14)], Store(), lineno=640, col_offset=8)], Name('srow_scol', Load(), lineno=640, col_offset=21), lineno=640, col_offset=8), Assign([Tuple([Name('erow', Store(), lineno=641, col_offset=8), Name('ecol', Store(), lineno=641, col_offset=14)], Store(), lineno=641, col_offset=8)], Name('erow_ecol', Load(), lineno=641, col_offset=21), lineno=641, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=642, col_offset=15), 'started', Load(), lineno=642, col_offset=15), lineno=642, col_offset=11), [If(Compare(Name('token', Load(), lineno=644, col_offset=15), [In()], [Tuple([Str('def', lineno=644, col_offset=25), Str('class', lineno=644, col_offset=32), Str('lambda', lineno=644, col_offset=41)], Load(), lineno=644, col_offset=25)], lineno=644, col_offset=15), [If(Compare(Name('token', Load(), lineno=645, col_offset=19), [Eq()], [Str('lambda', lineno=645, col_offset=28)], lineno=645, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=646, col_offset=20), 'islambda', Store(), lineno=646, col_offset=20)], Name('True', Load(), lineno=646, col_offset=36), lineno=646, col_offset=20)], [], lineno=645, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=647, col_offset=16), 'started', Store(), lineno=647, col_offset=16)], Name('True', Load(), lineno=647, col_offset=31), lineno=647, col_offset=16)], [], lineno=644, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=648, col_offset=12), 'passline', Store(), lineno=648, col_offset=12)], Name('True', Load(), lineno=648, col_offset=28), lineno=648, col_offset=12)], [If(Compare(Name('type', Load(), lineno=649, col_offset=13), [Eq()], [Attribute(Name('tokenize', Load(), lineno=649, col_offset=21), 'NEWLINE', Load(), lineno=649, col_offset=21)], lineno=649, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=650, col_offset=12), 'passline', Store(), lineno=650, col_offset=12)], Name('False', Load(), lineno=650, col_offset=28), lineno=650, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=651, col_offset=12), 'last', Store(), lineno=651, col_offset=12)], Name('srow', Load(), lineno=651, col_offset=24), lineno=651, col_offset=12), If(Attribute(Name('self', Load(), lineno=652, col_offset=15), 'islambda', Load(), lineno=652, col_offset=15), [Raise(Name('EndOfBlock', Load(), lineno=653, col_offset=22), None, None, lineno=653, col_offset=16)], [], lineno=652, col_offset=12)], [If(Attribute(Name('self', Load(), lineno=654, col_offset=13), 'passline', Load(), lineno=654, col_offset=13), [Pass( lineno=655, col_offset=12)], [If(Compare(Name('type', Load(), lineno=656, col_offset=13), [Eq()], [Attribute(Name('tokenize', Load(), lineno=656, col_offset=21), 'INDENT', Load(), lineno=656, col_offset=21)], lineno=656, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=657, col_offset=12), 'indent', Store(), lineno=657, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=657, col_offset=26), 'indent', Load(), lineno=657, col_offset=26), Add(), Num(1, lineno=657, col_offset=40), lineno=657, col_offset=26), lineno=657, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=658, col_offset=12), 'passline', Store(), lineno=658, col_offset=12)], Name('True', Load(), lineno=658, col_offset=28), lineno=658, col_offset=12)], [If(Compare(Name('type', Load(), lineno=659, col_offset=13), [Eq()], [Attribute(Name('tokenize', Load(), lineno=659, col_offset=21), 'DEDENT', Load(), lineno=659, col_offset=21)], lineno=659, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=660, col_offset=12), 'indent', Store(), lineno=660, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=660, col_offset=26), 'indent', Load(), lineno=660, col_offset=26), Sub(), Num(1, lineno=660, col_offset=40), lineno=660, col_offset=26), lineno=660, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=664, col_offset=15), 'indent', Load(), lineno=664, col_offset=15), [LtE()], [Num(0, lineno=664, col_offset=30)], lineno=664, col_offset=15), [Raise(Name('EndOfBlock', Load(), lineno=665, col_offset=22), None, None, lineno=665, col_offset=16)], [], lineno=664, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=666, col_offset=13), 'indent', Load(), lineno=666, col_offset=13), [Eq()], [Num(0, lineno=666, col_offset=28)], lineno=666, col_offset=13), Compare(Name('type', Load(), lineno=666, col_offset=34), [NotIn()], [Tuple([Attribute(Name('tokenize', Load(), lineno=666, col_offset=47), 'COMMENT', Load(), lineno=666, col_offset=47), Attribute(Name('tokenize', Load(), lineno=666, col_offset=65), 'NL', Load(), lineno=666, col_offset=65)], Load(), lineno=666, col_offset=47)], lineno=666, col_offset=34)], lineno=666, col_offset=13), [Raise(Name('EndOfBlock', Load(), lineno=669, col_offset=18), None, None, lineno=669, col_offset=12)], [], lineno=666, col_offset=13)], lineno=659, col_offset=13)], lineno=656, col_offset=13)], lineno=654, col_offset=13)], lineno=649, col_offset=13)], lineno=642, col_offset=8)], [], lineno=639, col_offset=4)], [], lineno=630, col_offset=0), FunctionDef('getblock', arguments([Name('lines', Param(), lineno=671, col_offset=13)], None, None, []), [Expr(Str('Extract the block of code at the top of the given list of lines.', lineno=672, col_offset=4), lineno=672, col_offset=4), Assign([Name('blockfinder', Store(), lineno=673, col_offset=4)], Call(Name('BlockFinder', Load(), lineno=673, col_offset=18), [], [], None, None, lineno=673, col_offset=18), lineno=673, col_offset=4), TryExcept([Expr(Call(Attribute(Name('tokenize', Load(), lineno=675, col_offset=8), 'tokenize', Load(), lineno=675, col_offset=8), [Attribute(Call(Name('iter', Load(), lineno=675, col_offset=26), [Name('lines', Load(), lineno=675, col_offset=31)], [], None, None, lineno=675, col_offset=26), 'next', Load(), lineno=675, col_offset=26), Attribute(Name('blockfinder', Load(), lineno=675, col_offset=44), 'tokeneater', Load(), lineno=675, col_offset=44)], [], None, None, lineno=675, col_offset=8), lineno=675, col_offset=8)], [ExceptHandler(Tuple([Name('EndOfBlock', Load(), lineno=676, col_offset=12), Name('IndentationError', Load(), lineno=676, col_offset=24)], Load(), lineno=676, col_offset=12), None, [Pass( lineno=677, col_offset=8)], lineno=676, col_offset=4)], [], lineno=674, col_offset=4), Return(Subscript(Name('lines', Load(), lineno=678, col_offset=11), Slice(None, Attribute(Name('blockfinder', Load(), lineno=678, col_offset=18), 'last', Load(), lineno=678, col_offset=18), None), Load(), lineno=678, col_offset=11), lineno=678, col_offset=4)], [], lineno=671, col_offset=0), FunctionDef('getsourcelines', arguments([Name('object', Param(), lineno=680, col_offset=19)], None, None, []), [Expr(Str('Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An IOError is\n    raised if the source code cannot be retrieved.', lineno=687, col_offset=-1), lineno=687, col_offset=-1), Assign([Tuple([Name('lines', Store(), lineno=688, col_offset=4), Name('lnum', Store(), lineno=688, col_offset=11)], Store(), lineno=688, col_offset=4)], Call(Name('findsource', Load(), lineno=688, col_offset=18), [Name('object', Load(), lineno=688, col_offset=29)], [], None, None, lineno=688, col_offset=18), lineno=688, col_offset=4), If(Call(Name('ismodule', Load(), lineno=690, col_offset=7), [Name('object', Load(), lineno=690, col_offset=16)], [], None, None, lineno=690, col_offset=7), [Return(Tuple([Name('lines', Load(), lineno=690, col_offset=32), Num(0, lineno=690, col_offset=39)], Load(), lineno=690, col_offset=32), lineno=690, col_offset=25)], [Return(Tuple([Call(Name('getblock', Load(), lineno=691, col_offset=17), [Subscript(Name('lines', Load(), lineno=691, col_offset=26), Slice(Name('lnum', Load(), lineno=691, col_offset=32), None, None), Load(), lineno=691, col_offset=26)], [], None, None, lineno=691, col_offset=17), BinOp(Name('lnum', Load(), lineno=691, col_offset=41), Add(), Num(1, lineno=691, col_offset=48), lineno=691, col_offset=41)], Load(), lineno=691, col_offset=17), lineno=691, col_offset=10)], lineno=690, col_offset=4)], [], lineno=680, col_offset=0), FunctionDef('getsource', arguments([Name('object', Param(), lineno=693, col_offset=14)], None, None, []), [Expr(Str('Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved.', lineno=698, col_offset=-1), lineno=698, col_offset=-1), Assign([Tuple([Name('lines', Store(), lineno=699, col_offset=4), Name('lnum', Store(), lineno=699, col_offset=11)], Store(), lineno=699, col_offset=4)], Call(Name('getsourcelines', Load(), lineno=699, col_offset=18), [Name('object', Load(), lineno=699, col_offset=33)], [], None, None, lineno=699, col_offset=18), lineno=699, col_offset=4), Return(Call(Attribute(Name('string', Load(), lineno=700, col_offset=11), 'join', Load(), lineno=700, col_offset=11), [Name('lines', Load(), lineno=700, col_offset=23), Str('', lineno=700, col_offset=30)], [], None, None, lineno=700, col_offset=11), lineno=700, col_offset=4)], [], lineno=693, col_offset=0), FunctionDef('walktree', arguments([Name('classes', Param(), lineno=703, col_offset=13), Name('children', Param(), lineno=703, col_offset=22), Name('parent', Param(), lineno=703, col_offset=32)], None, None, []), [Expr(Str('Recursive helper function for getclasstree().', lineno=704, col_offset=4), lineno=704, col_offset=4), Assign([Name('results', Store(), lineno=705, col_offset=4)], List([], Load(), lineno=705, col_offset=14), lineno=705, col_offset=4), Expr(Call(Attribute(Name('classes', Load(), lineno=706, col_offset=4), 'sort', Load(), lineno=706, col_offset=4), [], [keyword('key', Call(Name('attrgetter', Load(), lineno=706, col_offset=21), [Str('__module__', lineno=706, col_offset=32), Str('__name__', lineno=706, col_offset=46)], [], None, None, lineno=706, col_offset=21))], None, None, lineno=706, col_offset=4), lineno=706, col_offset=4), For(Name('c', Store(), lineno=707, col_offset=8), Name('classes', Load(), lineno=707, col_offset=13), [Expr(Call(Attribute(Name('results', Load(), lineno=708, col_offset=8), 'append', Load(), lineno=708, col_offset=8), [Tuple([Name('c', Load(), lineno=708, col_offset=24), Attribute(Name('c', Load(), lineno=708, col_offset=27), '__bases__', Load(), lineno=708, col_offset=27)], Load(), lineno=708, col_offset=24)], [], None, None, lineno=708, col_offset=8), lineno=708, col_offset=8), If(Compare(Name('c', Load(), lineno=709, col_offset=11), [In()], [Name('children', Load(), lineno=709, col_offset=16)], lineno=709, col_offset=11), [Expr(Call(Attribute(Name('results', Load(), lineno=710, col_offset=12), 'append', Load(), lineno=710, col_offset=12), [Call(Name('walktree', Load(), lineno=710, col_offset=27), [Subscript(Name('children', Load(), lineno=710, col_offset=36), Index(Name('c', Load(), lineno=710, col_offset=45)), Load(), lineno=710, col_offset=36), Name('children', Load(), lineno=710, col_offset=49), Name('c', Load(), lineno=710, col_offset=59)], [], None, None, lineno=710, col_offset=27)], [], None, None, lineno=710, col_offset=12), lineno=710, col_offset=12)], [], lineno=709, col_offset=8)], [], lineno=707, col_offset=4), Return(Name('results', Load(), lineno=711, col_offset=11), lineno=711, col_offset=4)], [], lineno=703, col_offset=0), FunctionDef('getclasstree', arguments([Name('classes', Param(), lineno=713, col_offset=17), Name('unique', Param(), lineno=713, col_offset=26)], None, None, [Num(0, lineno=713, col_offset=33)]), [Expr(Str("Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times.", lineno=721, col_offset=-1), lineno=721, col_offset=-1), Assign([Name('children', Store(), lineno=722, col_offset=4)], Dict([], [], lineno=722, col_offset=15), lineno=722, col_offset=4), Assign([Name('roots', Store(), lineno=723, col_offset=4)], List([], Load(), lineno=723, col_offset=12), lineno=723, col_offset=4), For(Name('c', Store(), lineno=724, col_offset=8), Name('classes', Load(), lineno=724, col_offset=13), [If(Attribute(Name('c', Load(), lineno=725, col_offset=11), '__bases__', Load(), lineno=725, col_offset=11), [For(Name('parent', Store(), lineno=726, col_offset=16), Attribute(Name('c', Load(), lineno=726, col_offset=26), '__bases__', Load(), lineno=726, col_offset=26), [If(UnaryOp(Not(), Compare(Name('parent', Load(), lineno=727, col_offset=23), [In()], [Name('children', Load(), lineno=727, col_offset=33)], lineno=727, col_offset=23), lineno=727, col_offset=19), [Assign([Subscript(Name('children', Load(), lineno=728, col_offset=20), Index(Name('parent', Load(), lineno=728, col_offset=29)), Store(), lineno=728, col_offset=20)], List([], Load(), lineno=728, col_offset=39), lineno=728, col_offset=20)], [], lineno=727, col_offset=16), Expr(Call(Attribute(Subscript(Name('children', Load(), lineno=729, col_offset=16), Index(Name('parent', Load(), lineno=729, col_offset=25)), Load(), lineno=729, col_offset=16), 'append', Load(), lineno=729, col_offset=16), [Name('c', Load(), lineno=729, col_offset=40)], [], None, None, lineno=729, col_offset=16), lineno=729, col_offset=16), If(BoolOp(And(), [Name('unique', Load(), lineno=730, col_offset=19), Compare(Name('parent', Load(), lineno=730, col_offset=30), [In()], [Name('classes', Load(), lineno=730, col_offset=40)], lineno=730, col_offset=30)], lineno=730, col_offset=19), [Break( lineno=730, col_offset=49)], [], lineno=730, col_offset=16)], [], lineno=726, col_offset=12)], [If(Compare(Name('c', Load(), lineno=731, col_offset=13), [NotIn()], [Name('roots', Load(), lineno=731, col_offset=22)], lineno=731, col_offset=13), [Expr(Call(Attribute(Name('roots', Load(), lineno=732, col_offset=12), 'append', Load(), lineno=732, col_offset=12), [Name('c', Load(), lineno=732, col_offset=25)], [], None, None, lineno=732, col_offset=12), lineno=732, col_offset=12)], [], lineno=731, col_offset=13)], lineno=725, col_offset=8)], [], lineno=724, col_offset=4), For(Name('parent', Store(), lineno=733, col_offset=8), Name('children', Load(), lineno=733, col_offset=18), [If(Compare(Name('parent', Load(), lineno=734, col_offset=11), [NotIn()], [Name('classes', Load(), lineno=734, col_offset=25)], lineno=734, col_offset=11), [Expr(Call(Attribute(Name('roots', Load(), lineno=735, col_offset=12), 'append', Load(), lineno=735, col_offset=12), [Name('parent', Load(), lineno=735, col_offset=25)], [], None, None, lineno=735, col_offset=12), lineno=735, col_offset=12)], [], lineno=734, col_offset=8)], [], lineno=733, col_offset=4), Return(Call(Name('walktree', Load(), lineno=736, col_offset=11), [Name('roots', Load(), lineno=736, col_offset=20), Name('children', Load(), lineno=736, col_offset=27), Name('None', Load(), lineno=736, col_offset=37)], [], None, None, lineno=736, col_offset=11), lineno=736, col_offset=4)], [], lineno=713, col_offset=0), Assign([Name('Arguments', Store(), lineno=739, col_offset=0)], Call(Name('namedtuple', Load(), lineno=739, col_offset=12), [Str('Arguments', lineno=739, col_offset=23), Str('args varargs keywords', lineno=739, col_offset=36)], [], None, None, lineno=739, col_offset=12), lineno=739, col_offset=0), FunctionDef('getargs', arguments([Name('co', Param(), lineno=741, col_offset=12)], None, None, []), [Expr(Str("Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where 'args' is\n    a list of argument names (possibly containing nested lists), and\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.", lineno=746, col_offset=-1), lineno=746, col_offset=-1), If(UnaryOp(Not(), Call(Name('iscode', Load(), lineno=748, col_offset=11), [Name('co', Load(), lineno=748, col_offset=18)], [], None, None, lineno=748, col_offset=11), lineno=748, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=749, col_offset=14), [Call(Attribute(Str('{!r} is not a code object', lineno=749, col_offset=24), 'format', Load(), lineno=749, col_offset=24), [Name('co', Load(), lineno=749, col_offset=59)], [], None, None, lineno=749, col_offset=24)], [], None, None, lineno=749, col_offset=14), None, None, lineno=749, col_offset=8)], [], lineno=748, col_offset=4), Assign([Name('nargs', Store(), lineno=751, col_offset=4)], Attribute(Name('co', Load(), lineno=751, col_offset=12), 'co_argcount', Load(), lineno=751, col_offset=12), lineno=751, col_offset=4), Assign([Name('names', Store(), lineno=752, col_offset=4)], Attribute(Name('co', Load(), lineno=752, col_offset=12), 'co_varnames', Load(), lineno=752, col_offset=12), lineno=752, col_offset=4), Assign([Name('args', Store(), lineno=753, col_offset=4)], Call(Name('list', Load(), lineno=753, col_offset=11), [Subscript(Name('names', Load(), lineno=753, col_offset=16), Slice(None, Name('nargs', Load(), lineno=753, col_offset=23), None), Load(), lineno=753, col_offset=16)], [], None, None, lineno=753, col_offset=11), lineno=753, col_offset=4), Assign([Name('step', Store(), lineno=754, col_offset=4)], Num(0, lineno=754, col_offset=11), lineno=754, col_offset=4), For(Name('i', Store(), lineno=757, col_offset=8), Call(Name('range', Load(), lineno=757, col_offset=13), [Name('nargs', Load(), lineno=757, col_offset=19)], [], None, None, lineno=757, col_offset=13), [If(Compare(Subscript(Subscript(Name('args', Load(), lineno=758, col_offset=11), Index(Name('i', Load(), lineno=758, col_offset=16)), Load(), lineno=758, col_offset=11), Slice(None, Num(1, lineno=758, col_offset=20), None), Load(), lineno=758, col_offset=11), [In()], [Tuple([Str('', lineno=758, col_offset=27), Str('.', lineno=758, col_offset=31)], Load(), lineno=758, col_offset=27)], lineno=758, col_offset=11), [Assign([Tuple([Name('stack', Store(), lineno=759, col_offset=12), Name('remain', Store(), lineno=759, col_offset=19), Name('count', Store(), lineno=759, col_offset=27)], Store(), lineno=759, col_offset=12)], Tuple([List([], Load(), lineno=759, col_offset=35), List([], Load(), lineno=759, col_offset=39), List([], Load(), lineno=759, col_offset=43)], Load(), lineno=759, col_offset=35), lineno=759, col_offset=12), While(Compare(Name('step', Load(), lineno=760, col_offset=18), [Lt()], [Call(Name('len', Load(), lineno=760, col_offset=25), [Attribute(Name('co', Load(), lineno=760, col_offset=29), 'co_code', Load(), lineno=760, col_offset=29)], [], None, None, lineno=760, col_offset=25)], lineno=760, col_offset=18), [Assign([Name('op', Store(), lineno=761, col_offset=16)], Call(Name('ord', Load(), lineno=761, col_offset=21), [Subscript(Attribute(Name('co', Load(), lineno=761, col_offset=25), 'co_code', Load(), lineno=761, col_offset=25), Index(Name('step', Load(), lineno=761, col_offset=36)), Load(), lineno=761, col_offset=25)], [], None, None, lineno=761, col_offset=21), lineno=761, col_offset=16), Assign([Name('step', Store(), lineno=762, col_offset=16)], BinOp(Name('step', Load(), lineno=762, col_offset=23), Add(), Num(1, lineno=762, col_offset=30), lineno=762, col_offset=23), lineno=762, col_offset=16), If(Compare(Name('op', Load(), lineno=763, col_offset=19), [GtE()], [Attribute(Name('dis', Load(), lineno=763, col_offset=25), 'HAVE_ARGUMENT', Load(), lineno=763, col_offset=25)], lineno=763, col_offset=19), [Assign([Name('opname', Store(), lineno=764, col_offset=20)], Subscript(Attribute(Name('dis', Load(), lineno=764, col_offset=29), 'opname', Load(), lineno=764, col_offset=29), Index(Name('op', Load(), lineno=764, col_offset=40)), Load(), lineno=764, col_offset=29), lineno=764, col_offset=20), Assign([Name('value', Store(), lineno=765, col_offset=20)], BinOp(Call(Name('ord', Load(), lineno=765, col_offset=28), [Subscript(Attribute(Name('co', Load(), lineno=765, col_offset=32), 'co_code', Load(), lineno=765, col_offset=32), Index(Name('step', Load(), lineno=765, col_offset=43)), Load(), lineno=765, col_offset=32)], [], None, None, lineno=765, col_offset=28), Add(), BinOp(Call(Name('ord', Load(), lineno=765, col_offset=52), [Subscript(Attribute(Name('co', Load(), lineno=765, col_offset=56), 'co_code', Load(), lineno=765, col_offset=56), Index(BinOp(Name('step', Load(), lineno=765, col_offset=67), Add(), Num(1, lineno=765, col_offset=72), lineno=765, col_offset=67)), Load(), lineno=765, col_offset=56)], [], None, None, lineno=765, col_offset=52), Mult(), Num(256, lineno=765, col_offset=76), lineno=765, col_offset=52), lineno=765, col_offset=28), lineno=765, col_offset=20), Assign([Name('step', Store(), lineno=766, col_offset=20)], BinOp(Name('step', Load(), lineno=766, col_offset=27), Add(), Num(2, lineno=766, col_offset=34), lineno=766, col_offset=27), lineno=766, col_offset=20), If(Compare(Name('opname', Load(), lineno=767, col_offset=23), [In()], [Tuple([Str('UNPACK_TUPLE', lineno=767, col_offset=34), Str('UNPACK_SEQUENCE', lineno=767, col_offset=50)], Load(), lineno=767, col_offset=34)], lineno=767, col_offset=23), [Expr(Call(Attribute(Name('remain', Load(), lineno=768, col_offset=24), 'append', Load(), lineno=768, col_offset=24), [Name('value', Load(), lineno=768, col_offset=38)], [], None, None, lineno=768, col_offset=24), lineno=768, col_offset=24), Expr(Call(Attribute(Name('count', Load(), lineno=769, col_offset=24), 'append', Load(), lineno=769, col_offset=24), [Name('value', Load(), lineno=769, col_offset=37)], [], None, None, lineno=769, col_offset=24), lineno=769, col_offset=24)], [If(Compare(Name('opname', Load(), lineno=770, col_offset=25), [Eq()], [Str('STORE_FAST', lineno=770, col_offset=35)], lineno=770, col_offset=25), [Expr(Call(Attribute(Name('stack', Load(), lineno=771, col_offset=24), 'append', Load(), lineno=771, col_offset=24), [Subscript(Name('names', Load(), lineno=771, col_offset=37), Index(Name('value', Load(), lineno=771, col_offset=43)), Load(), lineno=771, col_offset=37)], [], None, None, lineno=771, col_offset=24), lineno=771, col_offset=24), If(UnaryOp(Not(), Name('remain', Load(), lineno=776, col_offset=31), lineno=776, col_offset=27), [Assign([Subscript(Name('stack', Load(), lineno=777, col_offset=28), Index(Num(0, lineno=777, col_offset=34)), Store(), lineno=777, col_offset=28)], List([Subscript(Name('stack', Load(), lineno=777, col_offset=40), Index(Num(0, lineno=777, col_offset=46)), Load(), lineno=777, col_offset=40)], Load(), lineno=777, col_offset=39), lineno=777, col_offset=28), Break( lineno=778, col_offset=28)], [Assign([Subscript(Name('remain', Load(), lineno=780, col_offset=28), Index(Num(-1, lineno=780, col_offset=36)), Store(), lineno=780, col_offset=28)], BinOp(Subscript(Name('remain', Load(), lineno=780, col_offset=41), Index(Num(-1, lineno=780, col_offset=49)), Load(), lineno=780, col_offset=41), Sub(), Num(1, lineno=780, col_offset=54), lineno=780, col_offset=41), lineno=780, col_offset=28), While(Compare(Subscript(Name('remain', Load(), lineno=781, col_offset=34), Index(Num(-1, lineno=781, col_offset=42)), Load(), lineno=781, col_offset=34), [Eq()], [Num(0, lineno=781, col_offset=48)], lineno=781, col_offset=34), [Expr(Call(Attribute(Name('remain', Load(), lineno=782, col_offset=32), 'pop', Load(), lineno=782, col_offset=32), [], [], None, None, lineno=782, col_offset=32), lineno=782, col_offset=32), Assign([Name('size', Store(), lineno=783, col_offset=32)], Call(Attribute(Name('count', Load(), lineno=783, col_offset=39), 'pop', Load(), lineno=783, col_offset=39), [], [], None, None, lineno=783, col_offset=39), lineno=783, col_offset=32), Assign([Subscript(Name('stack', Load(), lineno=784, col_offset=32), Slice(UnaryOp(USub(), Name('size', Load(), lineno=784, col_offset=39), lineno=784, col_offset=38), None, None), Store(), lineno=784, col_offset=32)], List([Subscript(Name('stack', Load(), lineno=784, col_offset=49), Slice(UnaryOp(USub(), Name('size', Load(), lineno=784, col_offset=56), lineno=784, col_offset=55), None, None), Load(), lineno=784, col_offset=49)], Load(), lineno=784, col_offset=48), lineno=784, col_offset=32), If(UnaryOp(Not(), Name('remain', Load(), lineno=785, col_offset=39), lineno=785, col_offset=35), [Break( lineno=785, col_offset=47)], [], lineno=785, col_offset=32), Assign([Subscript(Name('remain', Load(), lineno=786, col_offset=32), Index(Num(-1, lineno=786, col_offset=40)), Store(), lineno=786, col_offset=32)], BinOp(Subscript(Name('remain', Load(), lineno=786, col_offset=45), Index(Num(-1, lineno=786, col_offset=53)), Load(), lineno=786, col_offset=45), Sub(), Num(1, lineno=786, col_offset=58), lineno=786, col_offset=45), lineno=786, col_offset=32)], [], lineno=781, col_offset=28), If(UnaryOp(Not(), Name('remain', Load(), lineno=787, col_offset=35), lineno=787, col_offset=31), [Break( lineno=787, col_offset=43)], [], lineno=787, col_offset=28)], lineno=776, col_offset=24)], [], lineno=770, col_offset=25)], lineno=767, col_offset=20)], [], lineno=763, col_offset=16)], [], lineno=760, col_offset=12), Assign([Subscript(Name('args', Load(), lineno=788, col_offset=12), Index(Name('i', Load(), lineno=788, col_offset=17)), Store(), lineno=788, col_offset=12)], Subscript(Name('stack', Load(), lineno=788, col_offset=22), Index(Num(0, lineno=788, col_offset=28)), Load(), lineno=788, col_offset=22), lineno=788, col_offset=12)], [], lineno=758, col_offset=8)], [], lineno=757, col_offset=4), Assign([Name('varargs', Store(), lineno=790, col_offset=4)], Name('None', Load(), lineno=790, col_offset=14), lineno=790, col_offset=4), If(BinOp(Attribute(Name('co', Load(), lineno=791, col_offset=7), 'co_flags', Load(), lineno=791, col_offset=7), BitAnd(), Name('CO_VARARGS', Load(), lineno=791, col_offset=21), lineno=791, col_offset=7), [Assign([Name('varargs', Store(), lineno=792, col_offset=8)], Subscript(Attribute(Name('co', Load(), lineno=792, col_offset=18), 'co_varnames', Load(), lineno=792, col_offset=18), Index(Name('nargs', Load(), lineno=792, col_offset=33)), Load(), lineno=792, col_offset=18), lineno=792, col_offset=8), Assign([Name('nargs', Store(), lineno=793, col_offset=8)], BinOp(Name('nargs', Load(), lineno=793, col_offset=16), Add(), Num(1, lineno=793, col_offset=24), lineno=793, col_offset=16), lineno=793, col_offset=8)], [], lineno=791, col_offset=4), Assign([Name('varkw', Store(), lineno=794, col_offset=4)], Name('None', Load(), lineno=794, col_offset=12), lineno=794, col_offset=4), If(BinOp(Attribute(Name('co', Load(), lineno=795, col_offset=7), 'co_flags', Load(), lineno=795, col_offset=7), BitAnd(), Name('CO_VARKEYWORDS', Load(), lineno=795, col_offset=21), lineno=795, col_offset=7), [Assign([Name('varkw', Store(), lineno=796, col_offset=8)], Subscript(Attribute(Name('co', Load(), lineno=796, col_offset=16), 'co_varnames', Load(), lineno=796, col_offset=16), Index(Name('nargs', Load(), lineno=796, col_offset=31)), Load(), lineno=796, col_offset=16), lineno=796, col_offset=8)], [], lineno=795, col_offset=4), Return(Call(Name('Arguments', Load(), lineno=797, col_offset=11), [Name('args', Load(), lineno=797, col_offset=21), Name('varargs', Load(), lineno=797, col_offset=27), Name('varkw', Load(), lineno=797, col_offset=36)], [], None, None, lineno=797, col_offset=11), lineno=797, col_offset=4)], [], lineno=741, col_offset=0), Assign([Name('ArgSpec', Store(), lineno=799, col_offset=0)], Call(Name('namedtuple', Load(), lineno=799, col_offset=10), [Str('ArgSpec', lineno=799, col_offset=21), Str('args varargs keywords defaults', lineno=799, col_offset=32)], [], None, None, lineno=799, col_offset=10), lineno=799, col_offset=0), FunctionDef('getargspec', arguments([Name('func', Param(), lineno=801, col_offset=15)], None, None, []), [Expr(Str("Get the names and default values of a function's arguments.\n\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    ", lineno=808, col_offset=-1), lineno=808, col_offset=-1), If(Call(Name('ismethod', Load(), lineno=810, col_offset=7), [Name('func', Load(), lineno=810, col_offset=16)], [], None, None, lineno=810, col_offset=7), [Assign([Name('func', Store(), lineno=811, col_offset=8)], Attribute(Name('func', Load(), lineno=811, col_offset=15), 'im_func', Load(), lineno=811, col_offset=15), lineno=811, col_offset=8)], [], lineno=810, col_offset=4), If(UnaryOp(Not(), Call(Name('isfunction', Load(), lineno=812, col_offset=11), [Name('func', Load(), lineno=812, col_offset=22)], [], None, None, lineno=812, col_offset=11), lineno=812, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=813, col_offset=14), [Call(Attribute(Str('{!r} is not a Python function', lineno=813, col_offset=24), 'format', Load(), lineno=813, col_offset=24), [Name('func', Load(), lineno=813, col_offset=63)], [], None, None, lineno=813, col_offset=24)], [], None, None, lineno=813, col_offset=14), None, None, lineno=813, col_offset=8)], [], lineno=812, col_offset=4), Assign([Tuple([Name('args', Store(), lineno=814, col_offset=4), Name('varargs', Store(), lineno=814, col_offset=10), Name('varkw', Store(), lineno=814, col_offset=19)], Store(), lineno=814, col_offset=4)], Call(Name('getargs', Load(), lineno=814, col_offset=27), [Attribute(Name('func', Load(), lineno=814, col_offset=35), 'func_code', Load(), lineno=814, col_offset=35)], [], None, None, lineno=814, col_offset=27), lineno=814, col_offset=4), Return(Call(Name('ArgSpec', Load(), lineno=815, col_offset=11), [Name('args', Load(), lineno=815, col_offset=19), Name('varargs', Load(), lineno=815, col_offset=25), Name('varkw', Load(), lineno=815, col_offset=34), Attribute(Name('func', Load(), lineno=815, col_offset=41), 'func_defaults', Load(), lineno=815, col_offset=41)], [], None, None, lineno=815, col_offset=11), lineno=815, col_offset=4)], [], lineno=801, col_offset=0), Assign([Name('ArgInfo', Store(), lineno=817, col_offset=0)], Call(Name('namedtuple', Load(), lineno=817, col_offset=10), [Str('ArgInfo', lineno=817, col_offset=21), Str('args varargs keywords locals', lineno=817, col_offset=32)], [], None, None, lineno=817, col_offset=10), lineno=817, col_offset=0), FunctionDef('getargvalues', arguments([Name('frame', Param(), lineno=819, col_offset=17)], None, None, []), [Expr(Str("Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame.", lineno=825, col_offset=-1), lineno=825, col_offset=-1), Assign([Tuple([Name('args', Store(), lineno=826, col_offset=4), Name('varargs', Store(), lineno=826, col_offset=10), Name('varkw', Store(), lineno=826, col_offset=19)], Store(), lineno=826, col_offset=4)], Call(Name('getargs', Load(), lineno=826, col_offset=27), [Attribute(Name('frame', Load(), lineno=826, col_offset=35), 'f_code', Load(), lineno=826, col_offset=35)], [], None, None, lineno=826, col_offset=27), lineno=826, col_offset=4), Return(Call(Name('ArgInfo', Load(), lineno=827, col_offset=11), [Name('args', Load(), lineno=827, col_offset=19), Name('varargs', Load(), lineno=827, col_offset=25), Name('varkw', Load(), lineno=827, col_offset=34), Attribute(Name('frame', Load(), lineno=827, col_offset=41), 'f_locals', Load(), lineno=827, col_offset=41)], [], None, None, lineno=827, col_offset=11), lineno=827, col_offset=4)], [], lineno=819, col_offset=0), FunctionDef('joinseq', arguments([Name('seq', Param(), lineno=829, col_offset=12)], None, None, []), [If(Compare(Call(Name('len', Load(), lineno=830, col_offset=7), [Name('seq', Load(), lineno=830, col_offset=11)], [], None, None, lineno=830, col_offset=7), [Eq()], [Num(1, lineno=830, col_offset=19)], lineno=830, col_offset=7), [Return(BinOp(BinOp(Str('(', lineno=831, col_offset=15), Add(), Subscript(Name('seq', Load(), lineno=831, col_offset=21), Index(Num(0, lineno=831, col_offset=25)), Load(), lineno=831, col_offset=21), lineno=831, col_offset=15), Add(), Str(',)', lineno=831, col_offset=30), lineno=831, col_offset=28), lineno=831, col_offset=8)], [Return(BinOp(BinOp(Str('(', lineno=833, col_offset=15), Add(), Call(Attribute(Name('string', Load(), lineno=833, col_offset=21), 'join', Load(), lineno=833, col_offset=21), [Name('seq', Load(), lineno=833, col_offset=33), Str(', ', lineno=833, col_offset=38)], [], None, None, lineno=833, col_offset=21), lineno=833, col_offset=15), Add(), Str(')', lineno=833, col_offset=46), lineno=833, col_offset=44), lineno=833, col_offset=8)], lineno=830, col_offset=4)], [], lineno=829, col_offset=0), FunctionDef('strseq', arguments([Name('object', Param(), lineno=835, col_offset=11), Name('convert', Param(), lineno=835, col_offset=19), Name('join', Param(), lineno=835, col_offset=28)], None, None, [Name('joinseq', Load(), lineno=835, col_offset=33)]), [Expr(Str('Recursively walk a sequence, stringifying each element.', lineno=836, col_offset=4), lineno=836, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=837, col_offset=7), [Name('object', Load(), lineno=837, col_offset=12)], [], None, None, lineno=837, col_offset=7), [In()], [Tuple([Name('list', Load(), lineno=837, col_offset=24), Name('tuple', Load(), lineno=837, col_offset=30)], Load(), lineno=837, col_offset=24)], lineno=837, col_offset=7), [Return(Call(Name('join', Load(), lineno=838, col_offset=15), [Call(Name('map', Load(), lineno=838, col_offset=20), [Lambda(arguments([Name('o', Param(), lineno=838, col_offset=31), Name('c', Param(), lineno=838, col_offset=34), Name('j', Param(), lineno=838, col_offset=45)], None, None, [Name('convert', Load(), lineno=838, col_offset=36), Name('join', Load(), lineno=838, col_offset=47)]), Call(Name('strseq', Load(), lineno=838, col_offset=53), [Name('o', Load(), lineno=838, col_offset=60), Name('c', Load(), lineno=838, col_offset=63), Name('j', Load(), lineno=838, col_offset=66)], [], None, None, lineno=838, col_offset=53), lineno=838, col_offset=24), Name('object', Load(), lineno=838, col_offset=70)], [], None, None, lineno=838, col_offset=20)], [], None, None, lineno=838, col_offset=15), lineno=838, col_offset=8)], [Return(Call(Name('convert', Load(), lineno=840, col_offset=15), [Name('object', Load(), lineno=840, col_offset=23)], [], None, None, lineno=840, col_offset=15), lineno=840, col_offset=8)], lineno=837, col_offset=4)], [], lineno=835, col_offset=0), FunctionDef('formatargspec', arguments([Name('args', Param(), lineno=842, col_offset=18), Name('varargs', Param(), lineno=842, col_offset=24), Name('varkw', Param(), lineno=842, col_offset=38), Name('defaults', Param(), lineno=842, col_offset=50), Name('formatarg', Param(), lineno=843, col_offset=18), Name('formatvarargs', Param(), lineno=844, col_offset=18), Name('formatvarkw', Param(), lineno=845, col_offset=18), Name('formatvalue', Param(), lineno=846, col_offset=18), Name('join', Param(), lineno=847, col_offset=18)], None, None, [Name('None', Load(), lineno=842, col_offset=32), Name('None', Load(), lineno=842, col_offset=44), Name('None', Load(), lineno=842, col_offset=59), Name('str', Load(), lineno=843, col_offset=28), Lambda(arguments([Name('name', Param(), lineno=844, col_offset=39)], None, None, []), BinOp(Str('*', lineno=844, col_offset=45), Add(), Name('name', Load(), lineno=844, col_offset=51), lineno=844, col_offset=45), lineno=844, col_offset=32), Lambda(arguments([Name('name', Param(), lineno=845, col_offset=37)], None, None, []), BinOp(Str('**', lineno=845, col_offset=43), Add(), Name('name', Load(), lineno=845, col_offset=50), lineno=845, col_offset=43), lineno=845, col_offset=30), Lambda(arguments([Name('value', Param(), lineno=846, col_offset=37)], None, None, []), BinOp(Str('=', lineno=846, col_offset=44), Add(), Call(Name('repr', Load(), lineno=846, col_offset=50), [Name('value', Load(), lineno=846, col_offset=55)], [], None, None, lineno=846, col_offset=50), lineno=846, col_offset=44), lineno=846, col_offset=30), Name('joinseq', Load(), lineno=847, col_offset=23)]), [Expr(Str('Format an argument spec from the 4 values returned by getargspec.\n\n    The first four arguments are (args, varargs, varkw, defaults).  The\n    other four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.', lineno=853, col_offset=-1), lineno=853, col_offset=-1), Assign([Name('specs', Store(), lineno=854, col_offset=4)], List([], Load(), lineno=854, col_offset=12), lineno=854, col_offset=4), If(Name('defaults', Load(), lineno=855, col_offset=7), [Assign([Name('firstdefault', Store(), lineno=856, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=856, col_offset=23), [Name('args', Load(), lineno=856, col_offset=27)], [], None, None, lineno=856, col_offset=23), Sub(), Call(Name('len', Load(), lineno=856, col_offset=35), [Name('defaults', Load(), lineno=856, col_offset=39)], [], None, None, lineno=856, col_offset=35), lineno=856, col_offset=23), lineno=856, col_offset=8)], [], lineno=855, col_offset=4), For(Tuple([Name('i', Store(), lineno=857, col_offset=8), Name('arg', Store(), lineno=857, col_offset=11)], Store(), lineno=857, col_offset=8), Call(Name('enumerate', Load(), lineno=857, col_offset=18), [Name('args', Load(), lineno=857, col_offset=28)], [], None, None, lineno=857, col_offset=18), [Assign([Name('spec', Store(), lineno=858, col_offset=8)], Call(Name('strseq', Load(), lineno=858, col_offset=15), [Name('arg', Load(), lineno=858, col_offset=22), Name('formatarg', Load(), lineno=858, col_offset=27), Name('join', Load(), lineno=858, col_offset=38)], [], None, None, lineno=858, col_offset=15), lineno=858, col_offset=8), If(BoolOp(And(), [Name('defaults', Load(), lineno=859, col_offset=11), Compare(Name('i', Load(), lineno=859, col_offset=24), [GtE()], [Name('firstdefault', Load(), lineno=859, col_offset=29)], lineno=859, col_offset=24)], lineno=859, col_offset=11), [Assign([Name('spec', Store(), lineno=860, col_offset=12)], BinOp(Name('spec', Load(), lineno=860, col_offset=19), Add(), Call(Name('formatvalue', Load(), lineno=860, col_offset=26), [Subscript(Name('defaults', Load(), lineno=860, col_offset=38), Index(BinOp(Name('i', Load(), lineno=860, col_offset=47), Sub(), Name('firstdefault', Load(), lineno=860, col_offset=51), lineno=860, col_offset=47)), Load(), lineno=860, col_offset=38)], [], None, None, lineno=860, col_offset=26), lineno=860, col_offset=19), lineno=860, col_offset=12)], [], lineno=859, col_offset=8), Expr(Call(Attribute(Name('specs', Load(), lineno=861, col_offset=8), 'append', Load(), lineno=861, col_offset=8), [Name('spec', Load(), lineno=861, col_offset=21)], [], None, None, lineno=861, col_offset=8), lineno=861, col_offset=8)], [], lineno=857, col_offset=4), If(Compare(Name('varargs', Load(), lineno=862, col_offset=7), [IsNot()], [Name('None', Load(), lineno=862, col_offset=22)], lineno=862, col_offset=7), [Expr(Call(Attribute(Name('specs', Load(), lineno=863, col_offset=8), 'append', Load(), lineno=863, col_offset=8), [Call(Name('formatvarargs', Load(), lineno=863, col_offset=21), [Name('varargs', Load(), lineno=863, col_offset=35)], [], None, None, lineno=863, col_offset=21)], [], None, None, lineno=863, col_offset=8), lineno=863, col_offset=8)], [], lineno=862, col_offset=4), If(Compare(Name('varkw', Load(), lineno=864, col_offset=7), [IsNot()], [Name('None', Load(), lineno=864, col_offset=20)], lineno=864, col_offset=7), [Expr(Call(Attribute(Name('specs', Load(), lineno=865, col_offset=8), 'append', Load(), lineno=865, col_offset=8), [Call(Name('formatvarkw', Load(), lineno=865, col_offset=21), [Name('varkw', Load(), lineno=865, col_offset=33)], [], None, None, lineno=865, col_offset=21)], [], None, None, lineno=865, col_offset=8), lineno=865, col_offset=8)], [], lineno=864, col_offset=4), Return(BinOp(BinOp(Str('(', lineno=866, col_offset=11), Add(), Call(Attribute(Name('string', Load(), lineno=866, col_offset=17), 'join', Load(), lineno=866, col_offset=17), [Name('specs', Load(), lineno=866, col_offset=29), Str(', ', lineno=866, col_offset=36)], [], None, None, lineno=866, col_offset=17), lineno=866, col_offset=11), Add(), Str(')', lineno=866, col_offset=44), lineno=866, col_offset=42), lineno=866, col_offset=4)], [], lineno=842, col_offset=0), FunctionDef('formatargvalues', arguments([Name('args', Param(), lineno=868, col_offset=20), Name('varargs', Param(), lineno=868, col_offset=26), Name('varkw', Param(), lineno=868, col_offset=35), Name('locals', Param(), lineno=868, col_offset=42), Name('formatarg', Param(), lineno=869, col_offset=20), Name('formatvarargs', Param(), lineno=870, col_offset=20), Name('formatvarkw', Param(), lineno=871, col_offset=20), Name('formatvalue', Param(), lineno=872, col_offset=20), Name('join', Param(), lineno=873, col_offset=20)], None, None, [Name('str', Load(), lineno=869, col_offset=30), Lambda(arguments([Name('name', Param(), lineno=870, col_offset=41)], None, None, []), BinOp(Str('*', lineno=870, col_offset=47), Add(), Name('name', Load(), lineno=870, col_offset=53), lineno=870, col_offset=47), lineno=870, col_offset=34), Lambda(arguments([Name('name', Param(), lineno=871, col_offset=39)], None, None, []), BinOp(Str('**', lineno=871, col_offset=45), Add(), Name('name', Load(), lineno=871, col_offset=52), lineno=871, col_offset=45), lineno=871, col_offset=32), Lambda(arguments([Name('value', Param(), lineno=872, col_offset=39)], None, None, []), BinOp(Str('=', lineno=872, col_offset=46), Add(), Call(Name('repr', Load(), lineno=872, col_offset=52), [Name('value', Load(), lineno=872, col_offset=57)], [], None, None, lineno=872, col_offset=52), lineno=872, col_offset=46), lineno=872, col_offset=32), Name('joinseq', Load(), lineno=873, col_offset=25)]), [Expr(Str('Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.', lineno=879, col_offset=-1), lineno=879, col_offset=-1), FunctionDef('convert', arguments([Name('name', Param(), lineno=880, col_offset=16), Name('locals', Param(), lineno=880, col_offset=22), Name('formatarg', Param(), lineno=881, col_offset=16), Name('formatvalue', Param(), lineno=881, col_offset=37)], None, None, [Name('locals', Load(), lineno=880, col_offset=29), Name('formatarg', Load(), lineno=881, col_offset=26), Name('formatvalue', Load(), lineno=881, col_offset=49)]), [Return(BinOp(Call(Name('formatarg', Load(), lineno=882, col_offset=15), [Name('name', Load(), lineno=882, col_offset=25)], [], None, None, lineno=882, col_offset=15), Add(), Call(Name('formatvalue', Load(), lineno=882, col_offset=33), [Subscript(Name('locals', Load(), lineno=882, col_offset=45), Index(Name('name', Load(), lineno=882, col_offset=52)), Load(), lineno=882, col_offset=45)], [], None, None, lineno=882, col_offset=33), lineno=882, col_offset=15), lineno=882, col_offset=8)], [], lineno=880, col_offset=4), Assign([Name('specs', Store(), lineno=883, col_offset=4)], List([], Load(), lineno=883, col_offset=12), lineno=883, col_offset=4), For(Name('i', Store(), lineno=884, col_offset=8), Call(Name('range', Load(), lineno=884, col_offset=13), [Call(Name('len', Load(), lineno=884, col_offset=19), [Name('args', Load(), lineno=884, col_offset=23)], [], None, None, lineno=884, col_offset=19)], [], None, None, lineno=884, col_offset=13), [Expr(Call(Attribute(Name('specs', Load(), lineno=885, col_offset=8), 'append', Load(), lineno=885, col_offset=8), [Call(Name('strseq', Load(), lineno=885, col_offset=21), [Subscript(Name('args', Load(), lineno=885, col_offset=28), Index(Name('i', Load(), lineno=885, col_offset=33)), Load(), lineno=885, col_offset=28), Name('convert', Load(), lineno=885, col_offset=37), Name('join', Load(), lineno=885, col_offset=46)], [], None, None, lineno=885, col_offset=21)], [], None, None, lineno=885, col_offset=8), lineno=885, col_offset=8)], [], lineno=884, col_offset=4), If(Name('varargs', Load(), lineno=886, col_offset=7), [Expr(Call(Attribute(Name('specs', Load(), lineno=887, col_offset=8), 'append', Load(), lineno=887, col_offset=8), [BinOp(Call(Name('formatvarargs', Load(), lineno=887, col_offset=21), [Name('varargs', Load(), lineno=887, col_offset=35)], [], None, None, lineno=887, col_offset=21), Add(), Call(Name('formatvalue', Load(), lineno=887, col_offset=46), [Subscript(Name('locals', Load(), lineno=887, col_offset=58), Index(Name('varargs', Load(), lineno=887, col_offset=65)), Load(), lineno=887, col_offset=58)], [], None, None, lineno=887, col_offset=46), lineno=887, col_offset=21)], [], None, None, lineno=887, col_offset=8), lineno=887, col_offset=8)], [], lineno=886, col_offset=4), If(Name('varkw', Load(), lineno=888, col_offset=7), [Expr(Call(Attribute(Name('specs', Load(), lineno=889, col_offset=8), 'append', Load(), lineno=889, col_offset=8), [BinOp(Call(Name('formatvarkw', Load(), lineno=889, col_offset=21), [Name('varkw', Load(), lineno=889, col_offset=33)], [], None, None, lineno=889, col_offset=21), Add(), Call(Name('formatvalue', Load(), lineno=889, col_offset=42), [Subscript(Name('locals', Load(), lineno=889, col_offset=54), Index(Name('varkw', Load(), lineno=889, col_offset=61)), Load(), lineno=889, col_offset=54)], [], None, None, lineno=889, col_offset=42), lineno=889, col_offset=21)], [], None, None, lineno=889, col_offset=8), lineno=889, col_offset=8)], [], lineno=888, col_offset=4), Return(BinOp(BinOp(Str('(', lineno=890, col_offset=11), Add(), Call(Attribute(Name('string', Load(), lineno=890, col_offset=17), 'join', Load(), lineno=890, col_offset=17), [Name('specs', Load(), lineno=890, col_offset=29), Str(', ', lineno=890, col_offset=36)], [], None, None, lineno=890, col_offset=17), lineno=890, col_offset=11), Add(), Str(')', lineno=890, col_offset=44), lineno=890, col_offset=42), lineno=890, col_offset=4)], [], lineno=868, col_offset=0), FunctionDef('getcallargs', arguments([Name('func', Param(), lineno=892, col_offset=16)], 'positional', 'named', []), [Expr(Str("Get the mapping of arguments to values.\n\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'.", lineno=897, col_offset=-1), lineno=897, col_offset=-1), Assign([Tuple([Name('args', Store(), lineno=898, col_offset=4), Name('varargs', Store(), lineno=898, col_offset=10), Name('varkw', Store(), lineno=898, col_offset=19), Name('defaults', Store(), lineno=898, col_offset=26)], Store(), lineno=898, col_offset=4)], Call(Name('getargspec', Load(), lineno=898, col_offset=37), [Name('func', Load(), lineno=898, col_offset=48)], [], None, None, lineno=898, col_offset=37), lineno=898, col_offset=4), Assign([Name('f_name', Store(), lineno=899, col_offset=4)], Attribute(Name('func', Load(), lineno=899, col_offset=13), '__name__', Load(), lineno=899, col_offset=13), lineno=899, col_offset=4), Assign([Name('arg2value', Store(), lineno=900, col_offset=4)], Dict([], [], lineno=900, col_offset=16), lineno=900, col_offset=4), Assign([Name('assigned_tuple_params', Store(), lineno=903, col_offset=4)], List([], Load(), lineno=903, col_offset=28), lineno=903, col_offset=4), FunctionDef('assign', arguments([Name('arg', Param(), lineno=904, col_offset=15), Name('value', Param(), lineno=904, col_offset=20)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=905, col_offset=11), [Name('arg', Load(), lineno=905, col_offset=22), Name('str', Load(), lineno=905, col_offset=27)], [], None, None, lineno=905, col_offset=11), [Assign([Subscript(Name('arg2value', Load(), lineno=906, col_offset=12), Index(Name('arg', Load(), lineno=906, col_offset=22)), Store(), lineno=906, col_offset=12)], Name('value', Load(), lineno=906, col_offset=29), lineno=906, col_offset=12)], [Expr(Call(Attribute(Name('assigned_tuple_params', Load(), lineno=908, col_offset=12), 'append', Load(), lineno=908, col_offset=12), [Name('arg', Load(), lineno=908, col_offset=41)], [], None, None, lineno=908, col_offset=12), lineno=908, col_offset=12), Assign([Name('value', Store(), lineno=909, col_offset=12)], Call(Name('iter', Load(), lineno=909, col_offset=20), [Name('value', Load(), lineno=909, col_offset=25)], [], None, None, lineno=909, col_offset=20), lineno=909, col_offset=12), For(Tuple([Name('i', Store(), lineno=910, col_offset=16), Name('subarg', Store(), lineno=910, col_offset=19)], Store(), lineno=910, col_offset=16), Call(Name('enumerate', Load(), lineno=910, col_offset=29), [Name('arg', Load(), lineno=910, col_offset=39)], [], None, None, lineno=910, col_offset=29), [TryExcept([Assign([Name('subvalue', Store(), lineno=912, col_offset=20)], Call(Name('next', Load(), lineno=912, col_offset=31), [Name('value', Load(), lineno=912, col_offset=36)], [], None, None, lineno=912, col_offset=31), lineno=912, col_offset=20)], [ExceptHandler(Name('StopIteration', Load(), lineno=913, col_offset=23), None, [Raise(Call(Name('ValueError', Load(), lineno=914, col_offset=26), [BinOp(Str('need more than %d %s to unpack', lineno=914, col_offset=37), Mod(), Tuple([Name('i', Load(), lineno=915, col_offset=38), IfExp(Compare(Name('i', Load(), lineno=915, col_offset=53), [Gt()], [Num(1, lineno=915, col_offset=57)], lineno=915, col_offset=53), Str('values', lineno=915, col_offset=41), Str('value', lineno=915, col_offset=64), lineno=915, col_offset=41)], Load(), lineno=915, col_offset=38), lineno=914, col_offset=37)], [], None, None, lineno=914, col_offset=26), None, None, lineno=914, col_offset=20)], lineno=913, col_offset=16)], [], lineno=911, col_offset=16), Expr(Call(Name('assign', Load(), lineno=916, col_offset=16), [Name('subarg', Load(), lineno=916, col_offset=23), Name('subvalue', Load(), lineno=916, col_offset=30)], [], None, None, lineno=916, col_offset=16), lineno=916, col_offset=16)], [], lineno=910, col_offset=12), TryExcept([Expr(Call(Name('next', Load(), lineno=918, col_offset=16), [Name('value', Load(), lineno=918, col_offset=21)], [], None, None, lineno=918, col_offset=16), lineno=918, col_offset=16)], [ExceptHandler(Name('StopIteration', Load(), lineno=919, col_offset=19), None, [Pass( lineno=920, col_offset=16)], lineno=919, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=922, col_offset=22), [Str('too many values to unpack', lineno=922, col_offset=33)], [], None, None, lineno=922, col_offset=22), None, None, lineno=922, col_offset=16)], lineno=917, col_offset=12)], lineno=905, col_offset=8)], [], lineno=904, col_offset=4), FunctionDef('is_assigned', arguments([Name('arg', Param(), lineno=923, col_offset=20)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=924, col_offset=11), [Name('arg', Load(), lineno=924, col_offset=22), Name('str', Load(), lineno=924, col_offset=26)], [], None, None, lineno=924, col_offset=11), [Return(Compare(Name('arg', Load(), lineno=925, col_offset=19), [In()], [Name('arg2value', Load(), lineno=925, col_offset=26)], lineno=925, col_offset=19), lineno=925, col_offset=12)], [], lineno=924, col_offset=8), Return(Compare(Name('arg', Load(), lineno=926, col_offset=15), [In()], [Name('assigned_tuple_params', Load(), lineno=926, col_offset=22)], lineno=926, col_offset=15), lineno=926, col_offset=8)], [], lineno=923, col_offset=4), If(BoolOp(And(), [Call(Name('ismethod', Load(), lineno=927, col_offset=7), [Name('func', Load(), lineno=927, col_offset=16)], [], None, None, lineno=927, col_offset=7), Compare(Attribute(Name('func', Load(), lineno=927, col_offset=26), 'im_self', Load(), lineno=927, col_offset=26), [IsNot()], [Name('None', Load(), lineno=927, col_offset=46)], lineno=927, col_offset=26)], lineno=927, col_offset=7), [Assign([Name('positional', Store(), lineno=929, col_offset=8)], BinOp(Tuple([Attribute(Name('func', Load(), lineno=929, col_offset=22), 'im_self', Load(), lineno=929, col_offset=22)], Load(), lineno=929, col_offset=22), Add(), Name('positional', Load(), lineno=929, col_offset=39), lineno=929, col_offset=21), lineno=929, col_offset=8)], [], lineno=927, col_offset=4), Assign([Name('num_pos', Store(), lineno=930, col_offset=4)], Call(Name('len', Load(), lineno=930, col_offset=14), [Name('positional', Load(), lineno=930, col_offset=18)], [], None, None, lineno=930, col_offset=14), lineno=930, col_offset=4), Assign([Name('num_total', Store(), lineno=931, col_offset=4)], BinOp(Name('num_pos', Load(), lineno=931, col_offset=16), Add(), Call(Name('len', Load(), lineno=931, col_offset=26), [Name('named', Load(), lineno=931, col_offset=30)], [], None, None, lineno=931, col_offset=26), lineno=931, col_offset=16), lineno=931, col_offset=4), Assign([Name('num_args', Store(), lineno=932, col_offset=4)], Call(Name('len', Load(), lineno=932, col_offset=15), [Name('args', Load(), lineno=932, col_offset=19)], [], None, None, lineno=932, col_offset=15), lineno=932, col_offset=4), Assign([Name('num_defaults', Store(), lineno=933, col_offset=4)], IfExp(Name('defaults', Load(), lineno=933, col_offset=36), Call(Name('len', Load(), lineno=933, col_offset=19), [Name('defaults', Load(), lineno=933, col_offset=23)], [], None, None, lineno=933, col_offset=19), Num(0, lineno=933, col_offset=50), lineno=933, col_offset=19), lineno=933, col_offset=4), For(Tuple([Name('arg', Store(), lineno=934, col_offset=8), Name('value', Store(), lineno=934, col_offset=13)], Store(), lineno=934, col_offset=8), Call(Name('zip', Load(), lineno=934, col_offset=22), [Name('args', Load(), lineno=934, col_offset=26), Name('positional', Load(), lineno=934, col_offset=32)], [], None, None, lineno=934, col_offset=22), [Expr(Call(Name('assign', Load(), lineno=935, col_offset=8), [Name('arg', Load(), lineno=935, col_offset=15), Name('value', Load(), lineno=935, col_offset=20)], [], None, None, lineno=935, col_offset=8), lineno=935, col_offset=8)], [], lineno=934, col_offset=4), If(Name('varargs', Load(), lineno=936, col_offset=7), [If(Compare(Name('num_pos', Load(), lineno=937, col_offset=11), [Gt()], [Name('num_args', Load(), lineno=937, col_offset=21)], lineno=937, col_offset=11), [Expr(Call(Name('assign', Load(), lineno=938, col_offset=12), [Name('varargs', Load(), lineno=938, col_offset=19), Subscript(Name('positional', Load(), lineno=938, col_offset=28), Slice(UnaryOp(USub(), BinOp(Name('num_pos', Load(), lineno=938, col_offset=41), Sub(), Name('num_args', Load(), lineno=938, col_offset=49), lineno=938, col_offset=41), lineno=938, col_offset=39), None, None), Load(), lineno=938, col_offset=28)], [], None, None, lineno=938, col_offset=12), lineno=938, col_offset=12)], [Expr(Call(Name('assign', Load(), lineno=940, col_offset=12), [Name('varargs', Load(), lineno=940, col_offset=19), Tuple([], Load(), lineno=940, col_offset=28)], [], None, None, lineno=940, col_offset=12), lineno=940, col_offset=12)], lineno=937, col_offset=8)], [If(Compare(Num(0, lineno=941, col_offset=9), [Lt(), Lt()], [Name('num_args', Load(), lineno=941, col_offset=13), Name('num_pos', Load(), lineno=941, col_offset=24)], lineno=941, col_offset=9), [Raise(Call(Name('TypeError', Load(), lineno=942, col_offset=14), [BinOp(Str('%s() takes %s %d %s (%d given)', lineno=942, col_offset=24), Mod(), Tuple([Name('f_name', Load(), lineno=943, col_offset=12), IfExp(Name('defaults', Load(), lineno=943, col_offset=33), Str('at most', lineno=943, col_offset=20), Str('exactly', lineno=943, col_offset=47), lineno=943, col_offset=20), Name('num_args', Load(), lineno=943, col_offset=58), IfExp(Compare(Name('num_args', Load(), lineno=944, col_offset=27), [Gt()], [Num(1, lineno=944, col_offset=38)], lineno=944, col_offset=27), Str('arguments', lineno=944, col_offset=12), Str('argument', lineno=944, col_offset=45), lineno=944, col_offset=12), Name('num_total', Load(), lineno=944, col_offset=57)], Load(), lineno=943, col_offset=12), lineno=942, col_offset=24)], [], None, None, lineno=942, col_offset=14), None, None, lineno=942, col_offset=8)], [If(BoolOp(And(), [Compare(Name('num_args', Load(), lineno=945, col_offset=9), [Eq()], [Num(0, lineno=945, col_offset=21)], lineno=945, col_offset=9), Name('num_total', Load(), lineno=945, col_offset=27)], lineno=945, col_offset=9), [Raise(Call(Name('TypeError', Load(), lineno=946, col_offset=14), [BinOp(Str('%s() takes no arguments (%d given)', lineno=946, col_offset=24), Mod(), Tuple([Name('f_name', Load(), lineno=947, col_offset=25), Name('num_total', Load(), lineno=947, col_offset=33)], Load(), lineno=947, col_offset=25), lineno=946, col_offset=24)], [], None, None, lineno=946, col_offset=14), None, None, lineno=946, col_offset=8)], [], lineno=945, col_offset=9)], lineno=941, col_offset=9)], lineno=936, col_offset=4), For(Name('arg', Store(), lineno=948, col_offset=8), Name('args', Load(), lineno=948, col_offset=15), [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=949, col_offset=11), [Name('arg', Load(), lineno=949, col_offset=22), Name('str', Load(), lineno=949, col_offset=27)], [], None, None, lineno=949, col_offset=11), Compare(Name('arg', Load(), lineno=949, col_offset=36), [In()], [Name('named', Load(), lineno=949, col_offset=43)], lineno=949, col_offset=36)], lineno=949, col_offset=11), [If(Call(Name('is_assigned', Load(), lineno=950, col_offset=15), [Name('arg', Load(), lineno=950, col_offset=27)], [], None, None, lineno=950, col_offset=15), [Raise(Call(Name('TypeError', Load(), lineno=951, col_offset=22), [BinOp(Str("%s() got multiple values for keyword argument '%s'", lineno=951, col_offset=32), Mod(), Tuple([Name('f_name', Load(), lineno=952, col_offset=51), Name('arg', Load(), lineno=952, col_offset=59)], Load(), lineno=952, col_offset=51), lineno=951, col_offset=32)], [], None, None, lineno=951, col_offset=22), None, None, lineno=951, col_offset=16)], [Expr(Call(Name('assign', Load(), lineno=954, col_offset=16), [Name('arg', Load(), lineno=954, col_offset=23), Call(Attribute(Name('named', Load(), lineno=954, col_offset=28), 'pop', Load(), lineno=954, col_offset=28), [Name('arg', Load(), lineno=954, col_offset=38)], [], None, None, lineno=954, col_offset=28)], [], None, None, lineno=954, col_offset=16), lineno=954, col_offset=16)], lineno=950, col_offset=12)], [], lineno=949, col_offset=8)], [], lineno=948, col_offset=4), If(Name('defaults', Load(), lineno=955, col_offset=7), [For(Tuple([Name('arg', Store(), lineno=956, col_offset=12), Name('value', Store(), lineno=956, col_offset=17)], Store(), lineno=956, col_offset=12), Call(Name('zip', Load(), lineno=956, col_offset=26), [Subscript(Name('args', Load(), lineno=956, col_offset=30), Slice(UnaryOp(USub(), Name('num_defaults', Load(), lineno=956, col_offset=36), lineno=956, col_offset=35), None, None), Load(), lineno=956, col_offset=30), Name('defaults', Load(), lineno=956, col_offset=52)], [], None, None, lineno=956, col_offset=26), [If(UnaryOp(Not(), Call(Name('is_assigned', Load(), lineno=957, col_offset=19), [Name('arg', Load(), lineno=957, col_offset=31)], [], None, None, lineno=957, col_offset=19), lineno=957, col_offset=15), [Expr(Call(Name('assign', Load(), lineno=958, col_offset=16), [Name('arg', Load(), lineno=958, col_offset=23), Name('value', Load(), lineno=958, col_offset=28)], [], None, None, lineno=958, col_offset=16), lineno=958, col_offset=16)], [], lineno=957, col_offset=12)], [], lineno=956, col_offset=8)], [], lineno=955, col_offset=4), If(Name('varkw', Load(), lineno=959, col_offset=7), [Expr(Call(Name('assign', Load(), lineno=960, col_offset=8), [Name('varkw', Load(), lineno=960, col_offset=15), Name('named', Load(), lineno=960, col_offset=22)], [], None, None, lineno=960, col_offset=8), lineno=960, col_offset=8)], [If(Name('named', Load(), lineno=961, col_offset=9), [Assign([Name('unexpected', Store(), lineno=962, col_offset=8)], Call(Name('next', Load(), lineno=962, col_offset=21), [Call(Name('iter', Load(), lineno=962, col_offset=26), [Name('named', Load(), lineno=962, col_offset=31)], [], None, None, lineno=962, col_offset=26)], [], None, None, lineno=962, col_offset=21), lineno=962, col_offset=8), If(Call(Name('isinstance', Load(), lineno=963, col_offset=11), [Name('unexpected', Load(), lineno=963, col_offset=22), Name('unicode', Load(), lineno=963, col_offset=34)], [], None, None, lineno=963, col_offset=11), [Assign([Name('unexpected', Store(), lineno=964, col_offset=12)], Call(Attribute(Name('unexpected', Load(), lineno=964, col_offset=25), 'encode', Load(), lineno=964, col_offset=25), [Call(Attribute(Name('sys', Load(), lineno=964, col_offset=43), 'getdefaultencoding', Load(), lineno=964, col_offset=43), [], [], None, None, lineno=964, col_offset=43), Str('replace', lineno=964, col_offset=69)], [], None, None, lineno=964, col_offset=25), lineno=964, col_offset=12)], [], lineno=963, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=965, col_offset=14), [BinOp(Str("%s() got an unexpected keyword argument '%s'", lineno=965, col_offset=24), Mod(), Tuple([Name('f_name', Load(), lineno=966, col_offset=25), Name('unexpected', Load(), lineno=966, col_offset=33)], Load(), lineno=966, col_offset=25), lineno=965, col_offset=24)], [], None, None, lineno=965, col_offset=14), None, None, lineno=965, col_offset=8)], [], lineno=961, col_offset=9)], lineno=959, col_offset=4), Assign([Name('unassigned', Store(), lineno=967, col_offset=4)], BinOp(Name('num_args', Load(), lineno=967, col_offset=17), Sub(), Call(Name('len', Load(), lineno=967, col_offset=28), [ListComp(Name('arg', Load(), lineno=967, col_offset=33), [comprehension(Name('arg', Store(), lineno=967, col_offset=41), Name('args', Load(), lineno=967, col_offset=48), [Call(Name('is_assigned', Load(), lineno=967, col_offset=56), [Name('arg', Load(), lineno=967, col_offset=68)], [], None, None, lineno=967, col_offset=56)])], lineno=967, col_offset=33)], [], None, None, lineno=967, col_offset=28), lineno=967, col_offset=17), lineno=967, col_offset=4), If(Name('unassigned', Load(), lineno=968, col_offset=7), [Assign([Name('num_required', Store(), lineno=969, col_offset=8)], BinOp(Name('num_args', Load(), lineno=969, col_offset=23), Sub(), Name('num_defaults', Load(), lineno=969, col_offset=34), lineno=969, col_offset=23), lineno=969, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=970, col_offset=14), [BinOp(Str('%s() takes %s %d %s (%d given)', lineno=970, col_offset=24), Mod(), Tuple([Name('f_name', Load(), lineno=971, col_offset=12), IfExp(Name('defaults', Load(), lineno=971, col_offset=34), Str('at least', lineno=971, col_offset=20), Str('exactly', lineno=971, col_offset=48), lineno=971, col_offset=20), Name('num_required', Load(), lineno=971, col_offset=59), IfExp(Compare(Name('num_required', Load(), lineno=972, col_offset=27), [Gt()], [Num(1, lineno=972, col_offset=42)], lineno=972, col_offset=27), Str('arguments', lineno=972, col_offset=12), Str('argument', lineno=972, col_offset=49), lineno=972, col_offset=12), Name('num_total', Load(), lineno=972, col_offset=61)], Load(), lineno=971, col_offset=12), lineno=970, col_offset=24)], [], None, None, lineno=970, col_offset=14), None, None, lineno=970, col_offset=8)], [], lineno=968, col_offset=4), Return(Name('arg2value', Load(), lineno=973, col_offset=11), lineno=973, col_offset=4)], [], lineno=892, col_offset=0), Assign([Name('Traceback', Store(), lineno=977, col_offset=0)], Call(Name('namedtuple', Load(), lineno=977, col_offset=12), [Str('Traceback', lineno=977, col_offset=23), Str('filename lineno function code_context index', lineno=977, col_offset=36)], [], None, None, lineno=977, col_offset=12), lineno=977, col_offset=0), FunctionDef('getframeinfo', arguments([Name('frame', Param(), lineno=979, col_offset=17), Name('context', Param(), lineno=979, col_offset=24)], None, None, [Num(1, lineno=979, col_offset=32)]), [Expr(Str('Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.', lineno=986, col_offset=-1), lineno=986, col_offset=-1), If(Call(Name('istraceback', Load(), lineno=987, col_offset=7), [Name('frame', Load(), lineno=987, col_offset=19)], [], None, None, lineno=987, col_offset=7), [Assign([Name('lineno', Store(), lineno=988, col_offset=8)], Attribute(Name('frame', Load(), lineno=988, col_offset=17), 'tb_lineno', Load(), lineno=988, col_offset=17), lineno=988, col_offset=8), Assign([Name('frame', Store(), lineno=989, col_offset=8)], Attribute(Name('frame', Load(), lineno=989, col_offset=16), 'tb_frame', Load(), lineno=989, col_offset=16), lineno=989, col_offset=8)], [Assign([Name('lineno', Store(), lineno=991, col_offset=8)], Attribute(Name('frame', Load(), lineno=991, col_offset=17), 'f_lineno', Load(), lineno=991, col_offset=17), lineno=991, col_offset=8)], lineno=987, col_offset=4), If(UnaryOp(Not(), Call(Name('isframe', Load(), lineno=992, col_offset=11), [Name('frame', Load(), lineno=992, col_offset=19)], [], None, None, lineno=992, col_offset=11), lineno=992, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=993, col_offset=14), [Call(Attribute(Str('{!r} is not a frame or traceback object', lineno=993, col_offset=24), 'format', Load(), lineno=993, col_offset=24), [Name('frame', Load(), lineno=993, col_offset=73)], [], None, None, lineno=993, col_offset=24)], [], None, None, lineno=993, col_offset=14), None, None, lineno=993, col_offset=8)], [], lineno=992, col_offset=4), Assign([Name('filename', Store(), lineno=995, col_offset=4)], BoolOp(Or(), [Call(Name('getsourcefile', Load(), lineno=995, col_offset=15), [Name('frame', Load(), lineno=995, col_offset=29)], [], None, None, lineno=995, col_offset=15), Call(Name('getfile', Load(), lineno=995, col_offset=39), [Name('frame', Load(), lineno=995, col_offset=47)], [], None, None, lineno=995, col_offset=39)], lineno=995, col_offset=15), lineno=995, col_offset=4), If(Compare(Name('context', Load(), lineno=996, col_offset=7), [Gt()], [Num(0, lineno=996, col_offset=17)], lineno=996, col_offset=7), [Assign([Name('start', Store(), lineno=997, col_offset=8)], BinOp(BinOp(Name('lineno', Load(), lineno=997, col_offset=16), Sub(), Num(1, lineno=997, col_offset=25), lineno=997, col_offset=16), Sub(), BinOp(Name('context', Load(), lineno=997, col_offset=29), FloorDiv(), Num(2, lineno=997, col_offset=38), lineno=997, col_offset=29), lineno=997, col_offset=27), lineno=997, col_offset=8), TryExcept([Assign([Tuple([Name('lines', Store(), lineno=999, col_offset=12), Name('lnum', Store(), lineno=999, col_offset=19)], Store(), lineno=999, col_offset=12)], Call(Name('findsource', Load(), lineno=999, col_offset=26), [Name('frame', Load(), lineno=999, col_offset=37)], [], None, None, lineno=999, col_offset=26), lineno=999, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=1000, col_offset=15), None, [Assign([Name('lines', Store(), lineno=1001, col_offset=12), Name('index', Store(), lineno=1001, col_offset=20)], Name('None', Load(), lineno=1001, col_offset=28), lineno=1001, col_offset=12)], lineno=1000, col_offset=8)], [Assign([Name('start', Store(), lineno=1003, col_offset=12)], Call(Name('max', Load(), lineno=1003, col_offset=20), [Name('start', Load(), lineno=1003, col_offset=24), Num(1, lineno=1003, col_offset=31)], [], None, None, lineno=1003, col_offset=20), lineno=1003, col_offset=12), Assign([Name('start', Store(), lineno=1004, col_offset=12)], Call(Name('max', Load(), lineno=1004, col_offset=20), [Num(0, lineno=1004, col_offset=24), Call(Name('min', Load(), lineno=1004, col_offset=27), [Name('start', Load(), lineno=1004, col_offset=31), BinOp(Call(Name('len', Load(), lineno=1004, col_offset=38), [Name('lines', Load(), lineno=1004, col_offset=42)], [], None, None, lineno=1004, col_offset=38), Sub(), Name('context', Load(), lineno=1004, col_offset=51), lineno=1004, col_offset=38)], [], None, None, lineno=1004, col_offset=27)], [], None, None, lineno=1004, col_offset=20), lineno=1004, col_offset=12), Assign([Name('lines', Store(), lineno=1005, col_offset=12)], Subscript(Name('lines', Load(), lineno=1005, col_offset=20), Slice(Name('start', Load(), lineno=1005, col_offset=26), BinOp(Name('start', Load(), lineno=1005, col_offset=32), Add(), Name('context', Load(), lineno=1005, col_offset=38), lineno=1005, col_offset=32), None), Load(), lineno=1005, col_offset=20), lineno=1005, col_offset=12), Assign([Name('index', Store(), lineno=1006, col_offset=12)], BinOp(BinOp(Name('lineno', Load(), lineno=1006, col_offset=20), Sub(), Num(1, lineno=1006, col_offset=29), lineno=1006, col_offset=20), Sub(), Name('start', Load(), lineno=1006, col_offset=33), lineno=1006, col_offset=31), lineno=1006, col_offset=12)], lineno=998, col_offset=8)], [Assign([Name('lines', Store(), lineno=1008, col_offset=8), Name('index', Store(), lineno=1008, col_offset=16)], Name('None', Load(), lineno=1008, col_offset=24), lineno=1008, col_offset=8)], lineno=996, col_offset=4), Return(Call(Name('Traceback', Load(), lineno=1010, col_offset=11), [Name('filename', Load(), lineno=1010, col_offset=21), Name('lineno', Load(), lineno=1010, col_offset=31), Attribute(Attribute(Name('frame', Load(), lineno=1010, col_offset=39), 'f_code', Load(), lineno=1010, col_offset=39), 'co_name', Load(), lineno=1010, col_offset=39), Name('lines', Load(), lineno=1010, col_offset=61), Name('index', Load(), lineno=1010, col_offset=68)], [], None, None, lineno=1010, col_offset=11), lineno=1010, col_offset=4)], [], lineno=979, col_offset=0), FunctionDef('getlineno', arguments([Name('frame', Param(), lineno=1012, col_offset=14)], None, None, []), [Expr(Str('Get the line number from a frame object, allowing for optimization.', lineno=1013, col_offset=4), lineno=1013, col_offset=4), Return(Attribute(Name('frame', Load(), lineno=1015, col_offset=11), 'f_lineno', Load(), lineno=1015, col_offset=11), lineno=1015, col_offset=4)], [], lineno=1012, col_offset=0), FunctionDef('getouterframes', arguments([Name('frame', Param(), lineno=1017, col_offset=19), Name('context', Param(), lineno=1017, col_offset=26)], None, None, [Num(1, lineno=1017, col_offset=34)]), [Expr(Str('Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.', lineno=1021, col_offset=-1), lineno=1021, col_offset=-1), Assign([Name('framelist', Store(), lineno=1022, col_offset=4)], List([], Load(), lineno=1022, col_offset=16), lineno=1022, col_offset=4), While(Name('frame', Load(), lineno=1023, col_offset=10), [Expr(Call(Attribute(Name('framelist', Load(), lineno=1024, col_offset=8), 'append', Load(), lineno=1024, col_offset=8), [BinOp(Tuple([Name('frame', Load(), lineno=1024, col_offset=26)], Load(), lineno=1024, col_offset=26), Add(), Call(Name('getframeinfo', Load(), lineno=1024, col_offset=36), [Name('frame', Load(), lineno=1024, col_offset=49), Name('context', Load(), lineno=1024, col_offset=56)], [], None, None, lineno=1024, col_offset=36), lineno=1024, col_offset=25)], [], None, None, lineno=1024, col_offset=8), lineno=1024, col_offset=8), Assign([Name('frame', Store(), lineno=1025, col_offset=8)], Attribute(Name('frame', Load(), lineno=1025, col_offset=16), 'f_back', Load(), lineno=1025, col_offset=16), lineno=1025, col_offset=8)], [], lineno=1023, col_offset=4), Return(Name('framelist', Load(), lineno=1026, col_offset=11), lineno=1026, col_offset=4)], [], lineno=1017, col_offset=0), FunctionDef('getinnerframes', arguments([Name('tb', Param(), lineno=1028, col_offset=19), Name('context', Param(), lineno=1028, col_offset=23)], None, None, [Num(1, lineno=1028, col_offset=31)]), [Expr(Str("Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.", lineno=1032, col_offset=-1), lineno=1032, col_offset=-1), Assign([Name('framelist', Store(), lineno=1033, col_offset=4)], List([], Load(), lineno=1033, col_offset=16), lineno=1033, col_offset=4), While(Name('tb', Load(), lineno=1034, col_offset=10), [Expr(Call(Attribute(Name('framelist', Load(), lineno=1035, col_offset=8), 'append', Load(), lineno=1035, col_offset=8), [BinOp(Tuple([Attribute(Name('tb', Load(), lineno=1035, col_offset=26), 'tb_frame', Load(), lineno=1035, col_offset=26)], Load(), lineno=1035, col_offset=26), Add(), Call(Name('getframeinfo', Load(), lineno=1035, col_offset=42), [Name('tb', Load(), lineno=1035, col_offset=55), Name('context', Load(), lineno=1035, col_offset=59)], [], None, None, lineno=1035, col_offset=42), lineno=1035, col_offset=25)], [], None, None, lineno=1035, col_offset=8), lineno=1035, col_offset=8), Assign([Name('tb', Store(), lineno=1036, col_offset=8)], Attribute(Name('tb', Load(), lineno=1036, col_offset=13), 'tb_next', Load(), lineno=1036, col_offset=13), lineno=1036, col_offset=8)], [], lineno=1034, col_offset=4), Return(Name('framelist', Load(), lineno=1037, col_offset=11), lineno=1037, col_offset=4)], [], lineno=1028, col_offset=0), If(Call(Name('hasattr', Load(), lineno=1039, col_offset=3), [Name('sys', Load(), lineno=1039, col_offset=11), Str('_getframe', lineno=1039, col_offset=16)], [], None, None, lineno=1039, col_offset=3), [Assign([Name('currentframe', Store(), lineno=1040, col_offset=4)], Attribute(Name('sys', Load(), lineno=1040, col_offset=19), '_getframe', Load(), lineno=1040, col_offset=19), lineno=1040, col_offset=4)], [Assign([Name('currentframe', Store(), lineno=1042, col_offset=4)], Lambda(arguments([Name('_', Param(), lineno=1042, col_offset=26)], None, None, [Name('None', Load(), lineno=1042, col_offset=28)]), Name('None', Load(), lineno=1042, col_offset=34), lineno=1042, col_offset=19), lineno=1042, col_offset=4)], lineno=1039, col_offset=0), FunctionDef('stack', arguments([Name('context', Param(), lineno=1044, col_offset=10)], None, None, [Num(1, lineno=1044, col_offset=18)]), [Expr(Str("Return a list of records for the stack above the caller's frame.", lineno=1045, col_offset=4), lineno=1045, col_offset=4), Return(Call(Name('getouterframes', Load(), lineno=1046, col_offset=11), [Call(Attribute(Name('sys', Load(), lineno=1046, col_offset=26), '_getframe', Load(), lineno=1046, col_offset=26), [Num(1, lineno=1046, col_offset=40)], [], None, None, lineno=1046, col_offset=26), Name('context', Load(), lineno=1046, col_offset=44)], [], None, None, lineno=1046, col_offset=11), lineno=1046, col_offset=4)], [], lineno=1044, col_offset=0), FunctionDef('trace', arguments([Name('context', Param(), lineno=1048, col_offset=10)], None, None, [Num(1, lineno=1048, col_offset=18)]), [Expr(Str('Return a list of records for the stack below the current exception.', lineno=1049, col_offset=4), lineno=1049, col_offset=4), Return(Call(Name('getinnerframes', Load(), lineno=1050, col_offset=11), [Subscript(Call(Attribute(Name('sys', Load(), lineno=1050, col_offset=26), 'exc_info', Load(), lineno=1050, col_offset=26), [], [], None, None, lineno=1050, col_offset=26), Index(Num(2, lineno=1050, col_offset=41)), Load(), lineno=1050, col_offset=26), Name('context', Load(), lineno=1050, col_offset=45)], [], None, None, lineno=1050, col_offset=11), lineno=1050, col_offset=4)], [], lineno=1048, col_offset=0)])
