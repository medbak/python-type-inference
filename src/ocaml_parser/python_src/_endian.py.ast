Module([Import([alias('sys', None)], lineno=4, col_offset=0), ImportFrom('ctypes', [alias('*', None)], 0, lineno=5, col_offset=0), Assign([Name('_array_type', Store(), lineno=7, col_offset=0)], Call(Name('type', Load(), lineno=7, col_offset=14), [BinOp(Name('c_int', Load(), lineno=7, col_offset=19), Mult(), Num(3, lineno=7, col_offset=27), lineno=7, col_offset=19)], [], None, None, lineno=7, col_offset=14), lineno=7, col_offset=0), FunctionDef('_other_endian', arguments([Name('typ', Param(), lineno=9, col_offset=18)], None, None, []), [Expr(Str("Return the type with the 'other' byte order.  Simple types like\n    c_int and so on already have __ctype_be__ and __ctype_le__\n    attributes which contain the types, for more complicated types\n    only arrays are supported.\n    ", lineno=14, col_offset=-1), lineno=14, col_offset=-1), TryExcept([Return(Call(Name('getattr', Load(), lineno=16, col_offset=15), [Name('typ', Load(), lineno=16, col_offset=23), Name('_OTHER_ENDIAN', Load(), lineno=16, col_offset=28)], [], None, None, lineno=16, col_offset=15), lineno=16, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=17, col_offset=11), None, [If(Compare(Call(Name('type', Load(), lineno=18, col_offset=11), [Name('typ', Load(), lineno=18, col_offset=16)], [], None, None, lineno=18, col_offset=11), [Eq()], [Name('_array_type', Load(), lineno=18, col_offset=24)], lineno=18, col_offset=11), [Return(BinOp(Call(Name('_other_endian', Load(), lineno=19, col_offset=19), [Attribute(Name('typ', Load(), lineno=19, col_offset=33), '_type_', Load(), lineno=19, col_offset=33)], [], None, None, lineno=19, col_offset=19), Mult(), Attribute(Name('typ', Load(), lineno=19, col_offset=47), '_length_', Load(), lineno=19, col_offset=47), lineno=19, col_offset=19), lineno=19, col_offset=12)], [], lineno=18, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=20, col_offset=14), [BinOp(Str('This type does not support other endian: %s', lineno=20, col_offset=24), Mod(), Name('typ', Load(), lineno=20, col_offset=72), lineno=20, col_offset=24)], [], None, None, lineno=20, col_offset=14), None, None, lineno=20, col_offset=8)], lineno=17, col_offset=4)], [], lineno=15, col_offset=4)], [], lineno=9, col_offset=0), ClassDef('_swapped_meta', [Call(Name('type', Load(), lineno=22, col_offset=20), [Name('Structure', Load(), lineno=22, col_offset=25)], [], None, None, lineno=22, col_offset=20)], [FunctionDef('__setattr__', arguments([Name('self', Param(), lineno=23, col_offset=20), Name('attrname', Param(), lineno=23, col_offset=26), Name('value', Param(), lineno=23, col_offset=36)], None, None, []), [If(Compare(Name('attrname', Load(), lineno=24, col_offset=11), [Eq()], [Str('_fields_', lineno=24, col_offset=23)], lineno=24, col_offset=11), [Assign([Name('fields', Store(), lineno=25, col_offset=12)], List([], Load(), lineno=25, col_offset=21), lineno=25, col_offset=12), For(Name('desc', Store(), lineno=26, col_offset=16), Name('value', Load(), lineno=26, col_offset=24), [Assign([Name('name', Store(), lineno=27, col_offset=16)], Subscript(Name('desc', Load(), lineno=27, col_offset=23), Index(Num(0, lineno=27, col_offset=28)), Load(), lineno=27, col_offset=23), lineno=27, col_offset=16), Assign([Name('typ', Store(), lineno=28, col_offset=16)], Subscript(Name('desc', Load(), lineno=28, col_offset=22), Index(Num(1, lineno=28, col_offset=27)), Load(), lineno=28, col_offset=22), lineno=28, col_offset=16), Assign([Name('rest', Store(), lineno=29, col_offset=16)], Subscript(Name('desc', Load(), lineno=29, col_offset=23), Slice(Num(2, lineno=29, col_offset=28), None, None), Load(), lineno=29, col_offset=23), lineno=29, col_offset=16), Expr(Call(Attribute(Name('fields', Load(), lineno=30, col_offset=16), 'append', Load(), lineno=30, col_offset=16), [BinOp(Tuple([Name('name', Load(), lineno=30, col_offset=31), Call(Name('_other_endian', Load(), lineno=30, col_offset=37), [Name('typ', Load(), lineno=30, col_offset=51)], [], None, None, lineno=30, col_offset=37)], Load(), lineno=30, col_offset=31), Add(), Name('rest', Load(), lineno=30, col_offset=59), lineno=30, col_offset=30)], [], None, None, lineno=30, col_offset=16), lineno=30, col_offset=16)], [], lineno=26, col_offset=12), Assign([Name('value', Store(), lineno=31, col_offset=12)], Name('fields', Load(), lineno=31, col_offset=20), lineno=31, col_offset=12)], [], lineno=24, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=32, col_offset=8), [Name('_swapped_meta', Load(), lineno=32, col_offset=14), Name('self', Load(), lineno=32, col_offset=29)], [], None, None, lineno=32, col_offset=8), '__setattr__', Load(), lineno=32, col_offset=8), [Name('attrname', Load(), lineno=32, col_offset=47), Name('value', Load(), lineno=32, col_offset=57)], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8)], [], lineno=23, col_offset=4)], [], lineno=22, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=40, col_offset=3), 'byteorder', Load(), lineno=40, col_offset=3), [Eq()], [Str('little', lineno=40, col_offset=20)], lineno=40, col_offset=3), [Assign([Name('_OTHER_ENDIAN', Store(), lineno=41, col_offset=4)], Str('__ctype_be__', lineno=41, col_offset=20), lineno=41, col_offset=4), Assign([Name('LittleEndianStructure', Store(), lineno=43, col_offset=4)], Name('Structure', Load(), lineno=43, col_offset=28), lineno=43, col_offset=4), ClassDef('BigEndianStructure', [Name('Structure', Load(), lineno=45, col_offset=29)], [Expr(Str('Structure with big endian byte order', lineno=46, col_offset=8), lineno=46, col_offset=8), Assign([Name('__metaclass__', Store(), lineno=47, col_offset=8)], Name('_swapped_meta', Load(), lineno=47, col_offset=24), lineno=47, col_offset=8), Assign([Name('_swappedbytes_', Store(), lineno=48, col_offset=8)], Name('None', Load(), lineno=48, col_offset=25), lineno=48, col_offset=8)], [], lineno=45, col_offset=4)], [If(Compare(Attribute(Name('sys', Load(), lineno=50, col_offset=5), 'byteorder', Load(), lineno=50, col_offset=5), [Eq()], [Str('big', lineno=50, col_offset=22)], lineno=50, col_offset=5), [Assign([Name('_OTHER_ENDIAN', Store(), lineno=51, col_offset=4)], Str('__ctype_le__', lineno=51, col_offset=20), lineno=51, col_offset=4), Assign([Name('BigEndianStructure', Store(), lineno=53, col_offset=4)], Name('Structure', Load(), lineno=53, col_offset=25), lineno=53, col_offset=4), ClassDef('LittleEndianStructure', [Name('Structure', Load(), lineno=54, col_offset=32)], [Expr(Str('Structure with little endian byte order', lineno=55, col_offset=8), lineno=55, col_offset=8), Assign([Name('__metaclass__', Store(), lineno=56, col_offset=8)], Name('_swapped_meta', Load(), lineno=56, col_offset=24), lineno=56, col_offset=8), Assign([Name('_swappedbytes_', Store(), lineno=57, col_offset=8)], Name('None', Load(), lineno=57, col_offset=25), lineno=57, col_offset=8)], [], lineno=54, col_offset=4)], [Raise(Call(Name('RuntimeError', Load(), lineno=60, col_offset=10), [Str('Invalid byteorder', lineno=60, col_offset=23)], [], None, None, lineno=60, col_offset=10), None, None, lineno=60, col_offset=4)], lineno=50, col_offset=5)], lineno=40, col_offset=0)])
