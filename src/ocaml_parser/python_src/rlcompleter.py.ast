Module([Expr(Str('Word completion for GNU readline 2.0.\n\nThis requires the latest extension to the readline module. The completer\ncompletes keywords, built-ins and globals in a selectable namespace (which\ndefaults to __main__); when completing NAME.NAME..., it evaluates (!) the\nexpression up to the last dot and completes its attributes.\n\nIt\'s very cool to do "import sys" type "sys.", hit the\ncompletion key (twice), and see the list of names defined by the\nsys module!\n\nTip: to use the tab key as the completion key, call\n\n    readline.parse_and_bind("tab: complete")\n\nNotes:\n\n- Exceptions raised by the completer function are *ignored* (and\ngenerally cause the completion to fail).  This is a feature -- since\nreadline sets the tty device in raw (or cbreak) mode, printing a\ntraceback wouldn\'t work well without some complicated hoopla to save,\nreset and restore the tty state.\n\n- The evaluation of the NAME.NAME... form may cause arbitrary\napplication defined code to be executed if an object with a\n__getattr__ hook is found.  Since it is the responsibility of the\napplication (or the user) to enable this feature, I consider this an\nacceptable risk.  More complicated expressions (e.g. function calls or\nindexing operations) are *not* evaluated.\n\n- GNU readline is also used by the built-in functions input() and\nraw_input(), and thus these also benefit/suffer from the completer\nfeatures.  Clearly an interactive application can benefit by\nspecifying its own completer function and using raw_input() for all\nits input.\n\n- When the original stdin is not a tty device, GNU readline is never\nused, and this module (and the readline module) are silently inactive.\n\n', lineno=40, col_offset=-1), lineno=40, col_offset=-1), Import([alias('__builtin__', None)], lineno=42, col_offset=0), Import([alias('__main__', None)], lineno=43, col_offset=0), Assign([Name('__all__', Store(), lineno=45, col_offset=0)], List([Str('Completer', lineno=45, col_offset=11)], Load(), lineno=45, col_offset=10), lineno=45, col_offset=0), ClassDef('Completer', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=48, col_offset=17), Name('namespace', Param(), lineno=48, col_offset=23)], None, None, [Name('None', Load(), lineno=48, col_offset=35)]), [Expr(Str('Create a new completer for the command line.\n\n        Completer([namespace]) -> completer instance.\n\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:\n\n        readline.set_completer(Completer(my_namespace).complete)\n        ', lineno=61, col_offset=-1), lineno=61, col_offset=-1), If(BoolOp(And(), [Name('namespace', Load(), lineno=63, col_offset=11), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=63, col_offset=29), [Name('namespace', Load(), lineno=63, col_offset=40), Name('dict', Load(), lineno=63, col_offset=51)], [], None, None, lineno=63, col_offset=29), lineno=63, col_offset=25)], lineno=63, col_offset=11), [Raise(Name('TypeError', Load(), lineno=64, col_offset=18), Str('namespace must be a dictionary', lineno=64, col_offset=28), None, lineno=64, col_offset=12)], [], lineno=63, col_offset=8), If(Compare(Name('namespace', Load(), lineno=69, col_offset=11), [Is()], [Name('None', Load(), lineno=69, col_offset=24)], lineno=69, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=70, col_offset=12), 'use_main_ns', Store(), lineno=70, col_offset=12)], Num(1, lineno=70, col_offset=31), lineno=70, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=72, col_offset=12), 'use_main_ns', Store(), lineno=72, col_offset=12)], Num(0, lineno=72, col_offset=31), lineno=72, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=73, col_offset=12), 'namespace', Store(), lineno=73, col_offset=12)], Name('namespace', Load(), lineno=73, col_offset=29), lineno=73, col_offset=12)], lineno=69, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('complete', arguments([Name('self', Param(), lineno=75, col_offset=17), Name('text', Param(), lineno=75, col_offset=23), Name('state', Param(), lineno=75, col_offset=29)], None, None, []), [Expr(Str("Return the next possible completion for 'text'.\n\n        This is called successively with state == 0, 1, 2, ... until it\n        returns None.  The completion should begin with 'text'.\n\n        ", lineno=81, col_offset=-1), lineno=81, col_offset=-1), If(Attribute(Name('self', Load(), lineno=82, col_offset=11), 'use_main_ns', Load(), lineno=82, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=83, col_offset=12), 'namespace', Store(), lineno=83, col_offset=12)], Attribute(Name('__main__', Load(), lineno=83, col_offset=29), '__dict__', Load(), lineno=83, col_offset=29), lineno=83, col_offset=12)], [], lineno=82, col_offset=8), If(Compare(Name('state', Load(), lineno=85, col_offset=11), [Eq()], [Num(0, lineno=85, col_offset=20)], lineno=85, col_offset=11), [If(Compare(Str('.', lineno=86, col_offset=15), [In()], [Name('text', Load(), lineno=86, col_offset=22)], lineno=86, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=87, col_offset=16), 'matches', Store(), lineno=87, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=87, col_offset=31), 'attr_matches', Load(), lineno=87, col_offset=31), [Name('text', Load(), lineno=87, col_offset=49)], [], None, None, lineno=87, col_offset=31), lineno=87, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=89, col_offset=16), 'matches', Store(), lineno=89, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=89, col_offset=31), 'global_matches', Load(), lineno=89, col_offset=31), [Name('text', Load(), lineno=89, col_offset=51)], [], None, None, lineno=89, col_offset=31), lineno=89, col_offset=16)], lineno=86, col_offset=12)], [], lineno=85, col_offset=8), TryExcept([Return(Subscript(Attribute(Name('self', Load(), lineno=91, col_offset=19), 'matches', Load(), lineno=91, col_offset=19), Index(Name('state', Load(), lineno=91, col_offset=32)), Load(), lineno=91, col_offset=19), lineno=91, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=92, col_offset=15), None, [Return(Name('None', Load(), lineno=93, col_offset=19), lineno=93, col_offset=12)], lineno=92, col_offset=8)], [], lineno=90, col_offset=8)], [], lineno=75, col_offset=4), FunctionDef('_callable_postfix', arguments([Name('self', Param(), lineno=95, col_offset=26), Name('val', Param(), lineno=95, col_offset=32), Name('word', Param(), lineno=95, col_offset=37)], None, None, []), [If(Call(Name('hasattr', Load(), lineno=96, col_offset=11), [Name('val', Load(), lineno=96, col_offset=19), Str('__call__', lineno=96, col_offset=24)], [], None, None, lineno=96, col_offset=11), [Assign([Name('word', Store(), lineno=97, col_offset=12)], BinOp(Name('word', Load(), lineno=97, col_offset=19), Add(), Str('(', lineno=97, col_offset=26), lineno=97, col_offset=19), lineno=97, col_offset=12)], [], lineno=96, col_offset=8), Return(Name('word', Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('global_matches', arguments([Name('self', Param(), lineno=100, col_offset=23), Name('text', Param(), lineno=100, col_offset=29)], None, None, []), [Expr(Str('Compute matches when text is a simple name.\n\n        Return a list of all keywords, built-in functions and names currently\n        defined in self.namespace that match.\n\n        ', lineno=106, col_offset=-1), lineno=106, col_offset=-1), Import([alias('keyword', None)], lineno=107, col_offset=8), Assign([Name('matches', Store(), lineno=108, col_offset=8)], List([], Load(), lineno=108, col_offset=18), lineno=108, col_offset=8), Assign([Name('n', Store(), lineno=109, col_offset=8)], Call(Name('len', Load(), lineno=109, col_offset=12), [Name('text', Load(), lineno=109, col_offset=16)], [], None, None, lineno=109, col_offset=12), lineno=109, col_offset=8), For(Name('word', Store(), lineno=110, col_offset=12), Attribute(Name('keyword', Load(), lineno=110, col_offset=20), 'kwlist', Load(), lineno=110, col_offset=20), [If(Compare(Subscript(Name('word', Load(), lineno=111, col_offset=15), Slice(None, Name('n', Load(), lineno=111, col_offset=21), None), Load(), lineno=111, col_offset=15), [Eq()], [Name('text', Load(), lineno=111, col_offset=27)], lineno=111, col_offset=15), [Expr(Call(Attribute(Name('matches', Load(), lineno=112, col_offset=16), 'append', Load(), lineno=112, col_offset=16), [Name('word', Load(), lineno=112, col_offset=31)], [], None, None, lineno=112, col_offset=16), lineno=112, col_offset=16)], [], lineno=111, col_offset=12)], [], lineno=110, col_offset=8), For(Name('nspace', Store(), lineno=113, col_offset=12), List([Attribute(Name('__builtin__', Load(), lineno=113, col_offset=23), '__dict__', Load(), lineno=113, col_offset=23), Attribute(Name('self', Load(), lineno=113, col_offset=45), 'namespace', Load(), lineno=113, col_offset=45)], Load(), lineno=113, col_offset=22), [For(Tuple([Name('word', Store(), lineno=114, col_offset=16), Name('val', Store(), lineno=114, col_offset=22)], Store(), lineno=114, col_offset=16), Call(Attribute(Name('nspace', Load(), lineno=114, col_offset=29), 'items', Load(), lineno=114, col_offset=29), [], [], None, None, lineno=114, col_offset=29), [If(BoolOp(And(), [Compare(Subscript(Name('word', Load(), lineno=115, col_offset=19), Slice(None, Name('n', Load(), lineno=115, col_offset=25), None), Load(), lineno=115, col_offset=19), [Eq()], [Name('text', Load(), lineno=115, col_offset=31)], lineno=115, col_offset=19), Compare(Name('word', Load(), lineno=115, col_offset=40), [NotEq()], [Str('__builtins__', lineno=115, col_offset=48)], lineno=115, col_offset=40)], lineno=115, col_offset=19), [Expr(Call(Attribute(Name('matches', Load(), lineno=116, col_offset=20), 'append', Load(), lineno=116, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=116, col_offset=35), '_callable_postfix', Load(), lineno=116, col_offset=35), [Name('val', Load(), lineno=116, col_offset=58), Name('word', Load(), lineno=116, col_offset=63)], [], None, None, lineno=116, col_offset=35)], [], None, None, lineno=116, col_offset=20), lineno=116, col_offset=20)], [], lineno=115, col_offset=16)], [], lineno=114, col_offset=12)], [], lineno=113, col_offset=8), Return(Name('matches', Load(), lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('attr_matches', arguments([Name('self', Param(), lineno=119, col_offset=21), Name('text', Param(), lineno=119, col_offset=27)], None, None, []), [Expr(Str('Compute matches when text contains a dot.\n\n        Assuming the text is of the form NAME.NAME....[NAME], and is\n        evaluatable in self.namespace, it will be evaluated and its attributes\n        (as revealed by dir()) are used as possible completions.  (For class\n        instances, class members are also considered.)\n\n        WARNING: this can still invoke arbitrary C code, if an object\n        with a __getattr__ hook is evaluated.\n\n        ', lineno=130, col_offset=-1), lineno=130, col_offset=-1), Import([alias('re', None)], lineno=131, col_offset=8), Assign([Name('m', Store(), lineno=132, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=132, col_offset=12), 'match', Load(), lineno=132, col_offset=12), [Str('(\\w+(\\.\\w+)*)\\.(\\w*)', lineno=132, col_offset=21), Name('text', Load(), lineno=132, col_offset=46)], [], None, None, lineno=132, col_offset=12), lineno=132, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=133, col_offset=15), lineno=133, col_offset=11), [Return(List([], Load(), lineno=134, col_offset=19), lineno=134, col_offset=12)], [], lineno=133, col_offset=8), Assign([Tuple([Name('expr', Store(), lineno=135, col_offset=8), Name('attr', Store(), lineno=135, col_offset=14)], Store(), lineno=135, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=135, col_offset=21), 'group', Load(), lineno=135, col_offset=21), [Num(1, lineno=135, col_offset=29), Num(3, lineno=135, col_offset=32)], [], None, None, lineno=135, col_offset=21), lineno=135, col_offset=8), TryExcept([Assign([Name('thisobject', Store(), lineno=137, col_offset=12)], Call(Name('eval', Load(), lineno=137, col_offset=25), [Name('expr', Load(), lineno=137, col_offset=30), Attribute(Name('self', Load(), lineno=137, col_offset=36), 'namespace', Load(), lineno=137, col_offset=36)], [], None, None, lineno=137, col_offset=25), lineno=137, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=138, col_offset=15), None, [Return(List([], Load(), lineno=139, col_offset=19), lineno=139, col_offset=12)], lineno=138, col_offset=8)], [], lineno=136, col_offset=8), Assign([Name('words', Store(), lineno=142, col_offset=8)], Call(Name('dir', Load(), lineno=142, col_offset=16), [Name('thisobject', Load(), lineno=142, col_offset=20)], [], None, None, lineno=142, col_offset=16), lineno=142, col_offset=8), If(Compare(Str('__builtins__', lineno=143, col_offset=11), [In()], [Name('words', Load(), lineno=143, col_offset=29)], lineno=143, col_offset=11), [Expr(Call(Attribute(Name('words', Load(), lineno=144, col_offset=12), 'remove', Load(), lineno=144, col_offset=12), [Str('__builtins__', lineno=144, col_offset=25)], [], None, None, lineno=144, col_offset=12), lineno=144, col_offset=12)], [], lineno=143, col_offset=8), If(Call(Name('hasattr', Load(), lineno=146, col_offset=11), [Name('thisobject', Load(), lineno=146, col_offset=19), Str('__class__', lineno=146, col_offset=31)], [], None, None, lineno=146, col_offset=11), [Expr(Call(Attribute(Name('words', Load(), lineno=147, col_offset=12), 'append', Load(), lineno=147, col_offset=12), [Str('__class__', lineno=147, col_offset=25)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=12), Expr(Call(Attribute(Name('words', Load(), lineno=148, col_offset=12), 'extend', Load(), lineno=148, col_offset=12), [Call(Name('get_class_members', Load(), lineno=148, col_offset=25), [Attribute(Name('thisobject', Load(), lineno=148, col_offset=43), '__class__', Load(), lineno=148, col_offset=43)], [], None, None, lineno=148, col_offset=25)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12)], [], lineno=146, col_offset=8), Assign([Name('matches', Store(), lineno=149, col_offset=8)], List([], Load(), lineno=149, col_offset=18), lineno=149, col_offset=8), Assign([Name('n', Store(), lineno=150, col_offset=8)], Call(Name('len', Load(), lineno=150, col_offset=12), [Name('attr', Load(), lineno=150, col_offset=16)], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=8), For(Name('word', Store(), lineno=151, col_offset=12), Name('words', Load(), lineno=151, col_offset=20), [If(BoolOp(And(), [Compare(Subscript(Name('word', Load(), lineno=152, col_offset=15), Slice(None, Name('n', Load(), lineno=152, col_offset=21), None), Load(), lineno=152, col_offset=15), [Eq()], [Name('attr', Load(), lineno=152, col_offset=27)], lineno=152, col_offset=15), Call(Name('hasattr', Load(), lineno=152, col_offset=36), [Name('thisobject', Load(), lineno=152, col_offset=44), Name('word', Load(), lineno=152, col_offset=56)], [], None, None, lineno=152, col_offset=36)], lineno=152, col_offset=15), [Assign([Name('val', Store(), lineno=153, col_offset=16)], Call(Name('getattr', Load(), lineno=153, col_offset=22), [Name('thisobject', Load(), lineno=153, col_offset=30), Name('word', Load(), lineno=153, col_offset=42)], [], None, None, lineno=153, col_offset=22), lineno=153, col_offset=16), Assign([Name('word', Store(), lineno=154, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=154, col_offset=23), '_callable_postfix', Load(), lineno=154, col_offset=23), [Name('val', Load(), lineno=154, col_offset=46), BinOp(Str('%s.%s', lineno=154, col_offset=51), Mod(), Tuple([Name('expr', Load(), lineno=154, col_offset=62), Name('word', Load(), lineno=154, col_offset=68)], Load(), lineno=154, col_offset=62), lineno=154, col_offset=51)], [], None, None, lineno=154, col_offset=23), lineno=154, col_offset=16), Expr(Call(Attribute(Name('matches', Load(), lineno=155, col_offset=16), 'append', Load(), lineno=155, col_offset=16), [Name('word', Load(), lineno=155, col_offset=31)], [], None, None, lineno=155, col_offset=16), lineno=155, col_offset=16)], [], lineno=152, col_offset=12)], [], lineno=151, col_offset=8), Return(Name('matches', Load(), lineno=156, col_offset=15), lineno=156, col_offset=8)], [], lineno=119, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('get_class_members', arguments([Name('klass', Param(), lineno=158, col_offset=22)], None, None, []), [Assign([Name('ret', Store(), lineno=159, col_offset=4)], Call(Name('dir', Load(), lineno=159, col_offset=10), [Name('klass', Load(), lineno=159, col_offset=14)], [], None, None, lineno=159, col_offset=10), lineno=159, col_offset=4), If(Call(Name('hasattr', Load(), lineno=160, col_offset=7), [Name('klass', Load(), lineno=160, col_offset=15), Str('__bases__', lineno=160, col_offset=21)], [], None, None, lineno=160, col_offset=7), [For(Name('base', Store(), lineno=161, col_offset=12), Attribute(Name('klass', Load(), lineno=161, col_offset=20), '__bases__', Load(), lineno=161, col_offset=20), [Assign([Name('ret', Store(), lineno=162, col_offset=12)], BinOp(Name('ret', Load(), lineno=162, col_offset=18), Add(), Call(Name('get_class_members', Load(), lineno=162, col_offset=24), [Name('base', Load(), lineno=162, col_offset=42)], [], None, None, lineno=162, col_offset=24), lineno=162, col_offset=18), lineno=162, col_offset=12)], [], lineno=161, col_offset=8)], [], lineno=160, col_offset=4), Return(Name('ret', Load(), lineno=163, col_offset=11), lineno=163, col_offset=4)], [], lineno=158, col_offset=0), TryExcept([Import([alias('readline', None)], lineno=166, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=167, col_offset=7), None, [Pass( lineno=168, col_offset=4)], lineno=167, col_offset=0)], [Expr(Call(Attribute(Name('readline', Load(), lineno=170, col_offset=4), 'set_completer', Load(), lineno=170, col_offset=4), [Attribute(Call(Name('Completer', Load(), lineno=170, col_offset=27), [], [], None, None, lineno=170, col_offset=27), 'complete', Load(), lineno=170, col_offset=27)], [], None, None, lineno=170, col_offset=4), lineno=170, col_offset=4)], lineno=165, col_offset=0)])
