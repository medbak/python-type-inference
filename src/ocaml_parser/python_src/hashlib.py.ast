Module([Assign([Name('__doc__', Store(), lineno=7, col_offset=0)], Str('hashlib module - A common interface to many hash functions.\n\nnew(name, string=\'\') - returns a new hash object implementing the\n                       given hash function; initializing the hash\n                       using the given string data.\n\nNamed constructor functions are also available, these are much faster\nthan using new():\n\nmd5(), sha1(), sha224(), sha256(), sha384(), and sha512()\n\nMore algorithms may be available on your platform but the above are\nguaranteed to exist.\n\nNOTE: If you want the adler32 or crc32 hash functions they are available in\nthe zlib module.\n\nChoose your hash function wisely.  Some have known collision weaknesses.\nsha384 and sha512 will be slow on 32 bit platforms.\n\nHash objects have these methods:\n - update(arg): Update the hash object with the string arg. Repeated calls\n                are equivalent to a single call with the concatenation of all\n                the arguments.\n - digest():    Return the digest of the strings passed to the update() method\n                so far. This may contain non-ASCII characters, including\n                NUL bytes.\n - hexdigest(): Like digest() except the digest is returned as a string of\n                double length, containing only hexadecimal digits.\n - copy():      Return a copy (clone) of the hash object. This can be used to\n                efficiently compute the digests of strings that share a common\n                initial substring.\n\nFor example, to obtain the digest of the string \'Nobody inspects the\nspammish repetition\':\n\n    >>> import hashlib\n    >>> m = hashlib.md5()\n    >>> m.update("Nobody inspects")\n    >>> m.update(" the spammish repetition")\n    >>> m.digest()\n    \'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9\'\n\nMore condensed:\n\n    >>> hashlib.sha224("Nobody inspects the spammish repetition").hexdigest()\n    \'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2\'\n\n', lineno=55, col_offset=-1), lineno=7, col_offset=0), Assign([Name('__always_supported', Store(), lineno=59, col_offset=0)], Tuple([Str('md5', lineno=59, col_offset=22), Str('sha1', lineno=59, col_offset=29), Str('sha224', lineno=59, col_offset=37), Str('sha256', lineno=59, col_offset=47), Str('sha384', lineno=59, col_offset=57), Str('sha512', lineno=59, col_offset=67)], Load(), lineno=59, col_offset=22), lineno=59, col_offset=0), Assign([Name('algorithms', Store(), lineno=61, col_offset=0)], Name('__always_supported', Load(), lineno=61, col_offset=13), lineno=61, col_offset=0), Assign([Name('__all__', Store(), lineno=63, col_offset=0)], BinOp(Name('__always_supported', Load(), lineno=63, col_offset=10), Add(), Tuple([Str('new', lineno=63, col_offset=32), Str('algorithms', lineno=63, col_offset=39)], Load(), lineno=63, col_offset=32), lineno=63, col_offset=10), lineno=63, col_offset=0), FunctionDef('__get_builtin_constructor', arguments([Name('name', Param(), lineno=66, col_offset=30)], None, None, []), [If(Compare(Name('name', Load(), lineno=67, col_offset=7), [In()], [Tuple([Str('SHA1', lineno=67, col_offset=16), Str('sha1', lineno=67, col_offset=24)], Load(), lineno=67, col_offset=16)], lineno=67, col_offset=7), [Import([alias('_sha', None)], lineno=68, col_offset=8), Return(Attribute(Name('_sha', Load(), lineno=69, col_offset=15), 'new', Load(), lineno=69, col_offset=15), lineno=69, col_offset=8)], [If(Compare(Name('name', Load(), lineno=70, col_offset=9), [In()], [Tuple([Str('MD5', lineno=70, col_offset=18), Str('md5', lineno=70, col_offset=25)], Load(), lineno=70, col_offset=18)], lineno=70, col_offset=9), [Import([alias('_md5', None)], lineno=71, col_offset=8), Return(Attribute(Name('_md5', Load(), lineno=72, col_offset=15), 'new', Load(), lineno=72, col_offset=15), lineno=72, col_offset=8)], [If(Compare(Name('name', Load(), lineno=73, col_offset=9), [In()], [Tuple([Str('SHA256', lineno=73, col_offset=18), Str('sha256', lineno=73, col_offset=28), Str('SHA224', lineno=73, col_offset=38), Str('sha224', lineno=73, col_offset=48)], Load(), lineno=73, col_offset=18)], lineno=73, col_offset=9), [Import([alias('_sha256', None)], lineno=74, col_offset=8), Assign([Name('bs', Store(), lineno=75, col_offset=8)], Subscript(Name('name', Load(), lineno=75, col_offset=13), Slice(Num(3, lineno=75, col_offset=18), None, None), Load(), lineno=75, col_offset=13), lineno=75, col_offset=8), If(Compare(Name('bs', Load(), lineno=76, col_offset=11), [Eq()], [Str('256', lineno=76, col_offset=17)], lineno=76, col_offset=11), [Return(Attribute(Name('_sha256', Load(), lineno=77, col_offset=19), 'sha256', Load(), lineno=77, col_offset=19), lineno=77, col_offset=12)], [If(Compare(Name('bs', Load(), lineno=78, col_offset=13), [Eq()], [Str('224', lineno=78, col_offset=19)], lineno=78, col_offset=13), [Return(Attribute(Name('_sha256', Load(), lineno=79, col_offset=19), 'sha224', Load(), lineno=79, col_offset=19), lineno=79, col_offset=12)], [], lineno=78, col_offset=13)], lineno=76, col_offset=8)], [If(Compare(Name('name', Load(), lineno=80, col_offset=9), [In()], [Tuple([Str('SHA512', lineno=80, col_offset=18), Str('sha512', lineno=80, col_offset=28), Str('SHA384', lineno=80, col_offset=38), Str('sha384', lineno=80, col_offset=48)], Load(), lineno=80, col_offset=18)], lineno=80, col_offset=9), [Import([alias('_sha512', None)], lineno=81, col_offset=8), Assign([Name('bs', Store(), lineno=82, col_offset=8)], Subscript(Name('name', Load(), lineno=82, col_offset=13), Slice(Num(3, lineno=82, col_offset=18), None, None), Load(), lineno=82, col_offset=13), lineno=82, col_offset=8), If(Compare(Name('bs', Load(), lineno=83, col_offset=11), [Eq()], [Str('512', lineno=83, col_offset=17)], lineno=83, col_offset=11), [Return(Attribute(Name('_sha512', Load(), lineno=84, col_offset=19), 'sha512', Load(), lineno=84, col_offset=19), lineno=84, col_offset=12)], [If(Compare(Name('bs', Load(), lineno=85, col_offset=13), [Eq()], [Str('384', lineno=85, col_offset=19)], lineno=85, col_offset=13), [Return(Attribute(Name('_sha512', Load(), lineno=86, col_offset=19), 'sha384', Load(), lineno=86, col_offset=19), lineno=86, col_offset=12)], [], lineno=85, col_offset=13)], lineno=83, col_offset=8)], [], lineno=80, col_offset=9)], lineno=73, col_offset=9)], lineno=70, col_offset=9)], lineno=67, col_offset=4), Raise(Call(Name('ValueError', Load(), lineno=88, col_offset=10), [BinOp(Str('unsupported hash type %s', lineno=88, col_offset=21), Mod(), Name('name', Load(), lineno=88, col_offset=50), lineno=88, col_offset=21)], [], None, None, lineno=88, col_offset=10), None, None, lineno=88, col_offset=4)], [], lineno=66, col_offset=0), FunctionDef('__get_openssl_constructor', arguments([Name('name', Param(), lineno=91, col_offset=30)], None, None, []), [TryExcept([Assign([Name('f', Store(), lineno=93, col_offset=8)], Call(Name('getattr', Load(), lineno=93, col_offset=12), [Name('_hashlib', Load(), lineno=93, col_offset=20), BinOp(Str('openssl_', lineno=93, col_offset=30), Add(), Name('name', Load(), lineno=93, col_offset=43), lineno=93, col_offset=30)], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=8), Expr(Call(Name('f', Load(), lineno=96, col_offset=8), [], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8), Return(Name('f', Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=99, col_offset=12), Name('ValueError', Load(), lineno=99, col_offset=28)], Load(), lineno=99, col_offset=12), None, [Return(Call(Name('__get_builtin_constructor', Load(), lineno=100, col_offset=15), [Name('name', Load(), lineno=100, col_offset=41)], [], None, None, lineno=100, col_offset=15), lineno=100, col_offset=8)], lineno=99, col_offset=4)], [], lineno=92, col_offset=4)], [], lineno=91, col_offset=0), FunctionDef('__py_new', arguments([Name('name', Param(), lineno=103, col_offset=13), Name('string', Param(), lineno=103, col_offset=19)], None, None, [Str('', lineno=103, col_offset=26)]), [Expr(Str("new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    ", lineno=106, col_offset=-1), lineno=106, col_offset=-1), Return(Call(Call(Name('__get_builtin_constructor', Load(), lineno=107, col_offset=11), [Name('name', Load(), lineno=107, col_offset=37)], [], None, None, lineno=107, col_offset=11), [Name('string', Load(), lineno=107, col_offset=43)], [], None, None, lineno=107, col_offset=11), lineno=107, col_offset=4)], [], lineno=103, col_offset=0), FunctionDef('__hash_new', arguments([Name('name', Param(), lineno=110, col_offset=15), Name('string', Param(), lineno=110, col_offset=21)], None, None, [Str('', lineno=110, col_offset=28)]), [Expr(Str("new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    ", lineno=113, col_offset=-1), lineno=113, col_offset=-1), TryExcept([Return(Call(Attribute(Name('_hashlib', Load(), lineno=115, col_offset=15), 'new', Load(), lineno=115, col_offset=15), [Name('name', Load(), lineno=115, col_offset=28), Name('string', Load(), lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=15), lineno=115, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=116, col_offset=11), None, [Return(Call(Call(Name('__get_builtin_constructor', Load(), lineno=121, col_offset=15), [Name('name', Load(), lineno=121, col_offset=41)], [], None, None, lineno=121, col_offset=15), [Name('string', Load(), lineno=121, col_offset=47)], [], None, None, lineno=121, col_offset=15), lineno=121, col_offset=8)], lineno=116, col_offset=4)], [], lineno=114, col_offset=4)], [], lineno=110, col_offset=0), TryExcept([Import([alias('_hashlib', None)], lineno=125, col_offset=4), Assign([Name('new', Store(), lineno=126, col_offset=4)], Name('__hash_new', Load(), lineno=126, col_offset=10), lineno=126, col_offset=4), Assign([Name('__get_hash', Store(), lineno=127, col_offset=4)], Name('__get_openssl_constructor', Load(), lineno=127, col_offset=17), lineno=127, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=128, col_offset=7), None, [Assign([Name('new', Store(), lineno=129, col_offset=4)], Name('__py_new', Load(), lineno=129, col_offset=10), lineno=129, col_offset=4), Assign([Name('__get_hash', Store(), lineno=130, col_offset=4)], Name('__get_builtin_constructor', Load(), lineno=130, col_offset=17), lineno=130, col_offset=4)], lineno=128, col_offset=0)], [], lineno=124, col_offset=0), For(Name('__func_name', Store(), lineno=132, col_offset=4), Name('__always_supported', Load(), lineno=132, col_offset=19), [TryExcept([Assign([Subscript(Call(Name('globals', Load(), lineno=136, col_offset=8), [], [], None, None, lineno=136, col_offset=8), Index(Name('__func_name', Load(), lineno=136, col_offset=18)), Store(), lineno=136, col_offset=8)], Call(Name('__get_hash', Load(), lineno=136, col_offset=33), [Name('__func_name', Load(), lineno=136, col_offset=44)], [], None, None, lineno=136, col_offset=33), lineno=136, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=137, col_offset=11), None, [Import([alias('logging', None)], lineno=138, col_offset=8), Expr(Call(Attribute(Name('logging', Load(), lineno=139, col_offset=8), 'exception', Load(), lineno=139, col_offset=8), [Str('code for hash %s was not found.', lineno=139, col_offset=26), Name('__func_name', Load(), lineno=139, col_offset=61)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8)], lineno=137, col_offset=4)], [], lineno=135, col_offset=4)], [], lineno=132, col_offset=0), Delete([Name('__always_supported', Del(), lineno=142, col_offset=4), Name('__func_name', Del(), lineno=142, col_offset=24), Name('__get_hash', Del(), lineno=142, col_offset=37)], lineno=142, col_offset=0), Delete([Name('__py_new', Del(), lineno=143, col_offset=4), Name('__hash_new', Del(), lineno=143, col_offset=14), Name('__get_openssl_constructor', Del(), lineno=143, col_offset=26)], lineno=143, col_offset=0)])
