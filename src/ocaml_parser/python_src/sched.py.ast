Module([Expr(Str('A generally useful event scheduler class.\n\nEach instance of this class manages its own queue.\nNo multi-threading is implied; you are supposed to hack that\nyourself, or use a single instance per application.\n\nEach instance is parametrized with two functions, one that is\nsupposed to return the current time, one that is supposed to\nimplement a delay.  You can implement real-time scheduling by\nsubstituting time and sleep from built-in module time, or you can\nimplement simulated time by writing your own functions.  This can\nalso be used to integrate scheduling with STDWIN events; the delay\nfunction is allowed to modify the queue.  Time can be expressed as\nintegers or floating point numbers, as long as it is consistent.\n\nEvents are specified by tuples (time, priority, action, argument).\nAs in UNIX, lower priority numbers mean higher priority; in this\nway the queue can be maintained as a priority queue.  Execution of the\nevent means calling the action function, passing it the argument\nsequence in "argument" (remember that in Python, multiple function\narguments are be packed in a sequence).\nThe action function may be an instance method so it\nhas another way to reference private data (besides global variables).\n', lineno=24, col_offset=-1), lineno=24, col_offset=-1), Import([alias('heapq', None)], lineno=31, col_offset=0), ImportFrom('collections', [alias('namedtuple', None)], 0, lineno=32, col_offset=0), Assign([Name('__all__', Store(), lineno=34, col_offset=0)], List([Str('scheduler', lineno=34, col_offset=11)], Load(), lineno=34, col_offset=10), lineno=34, col_offset=0), Assign([Name('Event', Store(), lineno=36, col_offset=0)], Call(Name('namedtuple', Load(), lineno=36, col_offset=8), [Str('Event', lineno=36, col_offset=19), Str('time, priority, action, argument', lineno=36, col_offset=28)], [], None, None, lineno=36, col_offset=8), lineno=36, col_offset=0), ClassDef('scheduler', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=39, col_offset=17), Name('timefunc', Param(), lineno=39, col_offset=23), Name('delayfunc', Param(), lineno=39, col_offset=33)], None, None, []), [Expr(Str('Initialize a new instance, passing the time and delay\n        functions', lineno=41, col_offset=-1), lineno=41, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), '_queue', Store(), lineno=42, col_offset=8)], List([], Load(), lineno=42, col_offset=22), lineno=42, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'timefunc', Store(), lineno=43, col_offset=8)], Name('timefunc', Load(), lineno=43, col_offset=24), lineno=43, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=44, col_offset=8), 'delayfunc', Store(), lineno=44, col_offset=8)], Name('delayfunc', Load(), lineno=44, col_offset=25), lineno=44, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('enterabs', arguments([Name('self', Param(), lineno=46, col_offset=17), Name('time', Param(), lineno=46, col_offset=23), Name('priority', Param(), lineno=46, col_offset=29), Name('action', Param(), lineno=46, col_offset=39), Name('argument', Param(), lineno=46, col_offset=47)], None, None, []), [Expr(Str('Enter a new event in the queue at an absolute time.\n\n        Returns an ID for the event which can be used to remove it,\n        if necessary.\n\n        ', lineno=52, col_offset=-1), lineno=52, col_offset=-1), Assign([Name('event', Store(), lineno=53, col_offset=8)], Call(Name('Event', Load(), lineno=53, col_offset=16), [Name('time', Load(), lineno=53, col_offset=22), Name('priority', Load(), lineno=53, col_offset=28), Name('action', Load(), lineno=53, col_offset=38), Name('argument', Load(), lineno=53, col_offset=46)], [], None, None, lineno=53, col_offset=16), lineno=53, col_offset=8), Expr(Call(Attribute(Name('heapq', Load(), lineno=54, col_offset=8), 'heappush', Load(), lineno=54, col_offset=8), [Attribute(Name('self', Load(), lineno=54, col_offset=23), '_queue', Load(), lineno=54, col_offset=23), Name('event', Load(), lineno=54, col_offset=36)], [], None, None, lineno=54, col_offset=8), lineno=54, col_offset=8), Return(Name('event', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=46, col_offset=4), FunctionDef('enter', arguments([Name('self', Param(), lineno=57, col_offset=14), Name('delay', Param(), lineno=57, col_offset=20), Name('priority', Param(), lineno=57, col_offset=27), Name('action', Param(), lineno=57, col_offset=37), Name('argument', Param(), lineno=57, col_offset=45)], None, None, []), [Expr(Str('A variant that specifies the time as a relative time.\n\n        This is actually the more commonly used interface.\n\n        ', lineno=62, col_offset=-1), lineno=62, col_offset=-1), Assign([Name('time', Store(), lineno=63, col_offset=8)], BinOp(Call(Attribute(Name('self', Load(), lineno=63, col_offset=15), 'timefunc', Load(), lineno=63, col_offset=15), [], [], None, None, lineno=63, col_offset=15), Add(), Name('delay', Load(), lineno=63, col_offset=33), lineno=63, col_offset=15), lineno=63, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=64, col_offset=15), 'enterabs', Load(), lineno=64, col_offset=15), [Name('time', Load(), lineno=64, col_offset=29), Name('priority', Load(), lineno=64, col_offset=35), Name('action', Load(), lineno=64, col_offset=45), Name('argument', Load(), lineno=64, col_offset=53)], [], None, None, lineno=64, col_offset=15), lineno=64, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('cancel', arguments([Name('self', Param(), lineno=66, col_offset=15), Name('event', Param(), lineno=66, col_offset=21)], None, None, []), [Expr(Str('Remove an event from the queue.\n\n        This must be presented the ID as returned by enter().\n        If the event is not in the queue, this raises ValueError.\n\n        ', lineno=72, col_offset=-1), lineno=72, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=73, col_offset=8), '_queue', Load(), lineno=73, col_offset=8), 'remove', Load(), lineno=73, col_offset=8), [Name('event', Load(), lineno=73, col_offset=27)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Expr(Call(Attribute(Name('heapq', Load(), lineno=74, col_offset=8), 'heapify', Load(), lineno=74, col_offset=8), [Attribute(Name('self', Load(), lineno=74, col_offset=22), '_queue', Load(), lineno=74, col_offset=22)], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('empty', arguments([Name('self', Param(), lineno=76, col_offset=14)], None, None, []), [Expr(Str('Check whether the queue is empty.', lineno=77, col_offset=8), lineno=77, col_offset=8), Return(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=78, col_offset=19), '_queue', Load(), lineno=78, col_offset=19), lineno=78, col_offset=15), lineno=78, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=80, col_offset=12)], None, None, []), [Expr(Str("Execute events until the queue is empty.\n\n        When there is a positive delay until the first event, the\n        delay function is called and the event is left in the queue;\n        otherwise, the event is removed from the queue and executed\n        (its action function is called, passing it the argument).  If\n        the delay function returns prematurely, it is simply\n        restarted.\n\n        It is legal for both the delay function and the action\n        function to to modify the queue or to raise an exception;\n        exceptions are not caught but the scheduler's state remains\n        well-defined so run() may be called again.\n\n        A questionable hack is added to allow other threads to run:\n        just after an event is executed, a delay of 0 is executed, to\n        avoid monopolizing the CPU when other threads are also\n        runnable.\n\n        ", lineno=100, col_offset=-1), lineno=100, col_offset=-1), Assign([Name('q', Store(), lineno=103, col_offset=8)], Attribute(Name('self', Load(), lineno=103, col_offset=12), '_queue', Load(), lineno=103, col_offset=12), lineno=103, col_offset=8), Assign([Name('delayfunc', Store(), lineno=104, col_offset=8)], Attribute(Name('self', Load(), lineno=104, col_offset=20), 'delayfunc', Load(), lineno=104, col_offset=20), lineno=104, col_offset=8), Assign([Name('timefunc', Store(), lineno=105, col_offset=8)], Attribute(Name('self', Load(), lineno=105, col_offset=19), 'timefunc', Load(), lineno=105, col_offset=19), lineno=105, col_offset=8), Assign([Name('pop', Store(), lineno=106, col_offset=8)], Attribute(Name('heapq', Load(), lineno=106, col_offset=14), 'heappop', Load(), lineno=106, col_offset=14), lineno=106, col_offset=8), While(Name('q', Load(), lineno=107, col_offset=14), [Assign([Tuple([Name('time', Store(), lineno=108, col_offset=12), Name('priority', Store(), lineno=108, col_offset=18), Name('action', Store(), lineno=108, col_offset=28), Name('argument', Store(), lineno=108, col_offset=36)], Store(), lineno=108, col_offset=12), Name('checked_event', Store(), lineno=108, col_offset=47)], Subscript(Name('q', Load(), lineno=108, col_offset=63), Index(Num(0, lineno=108, col_offset=65)), Load(), lineno=108, col_offset=63), lineno=108, col_offset=12), Assign([Name('now', Store(), lineno=109, col_offset=12)], Call(Name('timefunc', Load(), lineno=109, col_offset=18), [], [], None, None, lineno=109, col_offset=18), lineno=109, col_offset=12), If(Compare(Name('now', Load(), lineno=110, col_offset=15), [Lt()], [Name('time', Load(), lineno=110, col_offset=21)], lineno=110, col_offset=15), [Expr(Call(Name('delayfunc', Load(), lineno=111, col_offset=16), [BinOp(Name('time', Load(), lineno=111, col_offset=26), Sub(), Name('now', Load(), lineno=111, col_offset=33), lineno=111, col_offset=26)], [], None, None, lineno=111, col_offset=16), lineno=111, col_offset=16)], [Assign([Name('event', Store(), lineno=113, col_offset=16)], Call(Name('pop', Load(), lineno=113, col_offset=24), [Name('q', Load(), lineno=113, col_offset=28)], [], None, None, lineno=113, col_offset=24), lineno=113, col_offset=16), If(Compare(Name('event', Load(), lineno=116, col_offset=19), [Is()], [Name('checked_event', Load(), lineno=116, col_offset=28)], lineno=116, col_offset=19), [Expr(Call(Name('action', Load(), lineno=117, col_offset=20), [], [], Name('argument', Load(), lineno=117, col_offset=28), None, lineno=117, col_offset=20), lineno=117, col_offset=20), Expr(Call(Name('delayfunc', Load(), lineno=118, col_offset=20), [Num(0, lineno=118, col_offset=30)], [], None, None, lineno=118, col_offset=20), lineno=118, col_offset=20)], [Expr(Call(Attribute(Name('heapq', Load(), lineno=120, col_offset=20), 'heappush', Load(), lineno=120, col_offset=20), [Name('q', Load(), lineno=120, col_offset=35), Name('event', Load(), lineno=120, col_offset=38)], [], None, None, lineno=120, col_offset=20), lineno=120, col_offset=20)], lineno=116, col_offset=16)], lineno=110, col_offset=12)], [], lineno=107, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('queue', arguments([Name('self', Param(), lineno=123, col_offset=14)], None, None, []), [Expr(Str('An ordered list of upcoming events.\n\n        Events are named tuples with fields for:\n            time, priority, action, arguments\n\n        ', lineno=129, col_offset=-1), lineno=129, col_offset=-1), Assign([Name('events', Store(), lineno=133, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=133, col_offset=17), '_queue', Load(), lineno=133, col_offset=17), Slice(None, None, None), Load(), lineno=133, col_offset=17), lineno=133, col_offset=8), Return(Call(Name('map', Load(), lineno=134, col_offset=15), [Attribute(Name('heapq', Load(), lineno=134, col_offset=19), 'heappop', Load(), lineno=134, col_offset=19), BinOp(List([Name('events', Load(), lineno=134, col_offset=35)], Load(), lineno=134, col_offset=34), Mult(), Call(Name('len', Load(), lineno=134, col_offset=43), [Name('events', Load(), lineno=134, col_offset=47)], [], None, None, lineno=134, col_offset=43), lineno=134, col_offset=34)], [], None, None, lineno=134, col_offset=15), lineno=134, col_offset=8)], [Name('property', Load(), lineno=122, col_offset=5)], lineno=122, col_offset=4)], [], lineno=38, col_offset=0)])
