Module([Expr(Str('Classes to generate plain text from a message object tree.', lineno=4, col_offset=0), lineno=4, col_offset=0), Assign([Name('__all__', Store(), lineno=6, col_offset=0)], List([Str('Generator', lineno=6, col_offset=11), Str('DecodedGenerator', lineno=6, col_offset=24)], Load(), lineno=6, col_offset=10), lineno=6, col_offset=0), Import([alias('re', None)], lineno=8, col_offset=0), Import([alias('sys', None)], lineno=9, col_offset=0), Import([alias('time', None)], lineno=10, col_offset=0), Import([alias('random', None)], lineno=11, col_offset=0), Import([alias('warnings', None)], lineno=12, col_offset=0), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=14, col_offset=0), ImportFrom('email.header', [alias('Header', None)], 0, lineno=15, col_offset=0), Assign([Name('UNDERSCORE', Store(), lineno=17, col_offset=0)], Str('_', lineno=17, col_offset=13), lineno=17, col_offset=0), Assign([Name('NL', Store(), lineno=18, col_offset=0)], Str('\n', lineno=18, col_offset=5), lineno=18, col_offset=0), Assign([Name('fcre', Store(), lineno=20, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=20, col_offset=7), 'compile', Load(), lineno=20, col_offset=7), [Str('^From ', lineno=20, col_offset=18), Attribute(Name('re', Load(), lineno=20, col_offset=29), 'MULTILINE', Load(), lineno=20, col_offset=29)], [], None, None, lineno=20, col_offset=7), lineno=20, col_offset=0), FunctionDef('_is8bitstring', arguments([Name('s', Param(), lineno=22, col_offset=18)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=23, col_offset=7), [Name('s', Load(), lineno=23, col_offset=18), Name('str', Load(), lineno=23, col_offset=21)], [], None, None, lineno=23, col_offset=7), [TryExcept([Expr(Call(Name('unicode', Load(), lineno=25, col_offset=12), [Name('s', Load(), lineno=25, col_offset=20), Str('us-ascii', lineno=25, col_offset=23)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=26, col_offset=15), None, [Return(Name('True', Load(), lineno=27, col_offset=19), lineno=27, col_offset=12)], lineno=26, col_offset=8)], [], lineno=24, col_offset=8)], [], lineno=23, col_offset=4), Return(Name('False', Load(), lineno=28, col_offset=11), lineno=28, col_offset=4)], [], lineno=22, col_offset=0), ClassDef('Generator', [], [Expr(Str('Generates output from a Message object tree.\n\n    This basic generator writes the message to the given file object as plain\n    text.\n    ', lineno=37, col_offset=-1), lineno=37, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=42, col_offset=17), Name('outfp', Param(), lineno=42, col_offset=23), Name('mangle_from_', Param(), lineno=42, col_offset=30), Name('maxheaderlen', Param(), lineno=42, col_offset=49)], None, None, [Name('True', Load(), lineno=42, col_offset=43), Num(78, lineno=42, col_offset=62)]), [Expr(Str("Create the generator for message flattening.\n\n        outfp is the output file-like object for writing the message to.  It\n        must have a write() method.\n\n        Optional mangle_from_ is a flag that, when True (the default), escapes\n        From_ lines in the body of the message by putting a `>' in front of\n        them.\n\n        Optional maxheaderlen specifies the longest length for a non-continued\n        header.  When a header line is longer (in characters, with tabs\n        expanded to 8 spaces) than maxheaderlen, the header will split as\n        defined in the Header class.  Set maxheaderlen to zero to disable\n        header wrapping.  The default is 78, as recommended (but not required)\n        by RFC 2822.\n        ", lineno=58, col_offset=-1), lineno=58, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), '_fp', Store(), lineno=59, col_offset=8)], Name('outfp', Load(), lineno=59, col_offset=19), lineno=59, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=60, col_offset=8), '_mangle_from_', Store(), lineno=60, col_offset=8)], Name('mangle_from_', Load(), lineno=60, col_offset=29), lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), '_maxheaderlen', Store(), lineno=61, col_offset=8)], Name('maxheaderlen', Load(), lineno=61, col_offset=29), lineno=61, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=63, col_offset=14), Name('s', Param(), lineno=63, col_offset=20)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=65, col_offset=8), '_fp', Load(), lineno=65, col_offset=8), 'write', Load(), lineno=65, col_offset=8), [Name('s', Load(), lineno=65, col_offset=23)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('flatten', arguments([Name('self', Param(), lineno=67, col_offset=16), Name('msg', Param(), lineno=67, col_offset=22), Name('unixfrom', Param(), lineno=67, col_offset=27)], None, None, [Name('False', Load(), lineno=67, col_offset=36)]), [Expr(Str("Print the message object tree rooted at msg to the output file\n        specified when the Generator instance was created.\n\n        unixfrom is a flag that forces the printing of a Unix From_ delimiter\n        before the first object in the message tree.  If the original message\n        has no From_ delimiter, a `standard' one is crafted.  By default, this\n        is False to inhibit the printing of any From_ delimiter.\n\n        Note that for subobjects, no From_ line is printed.\n        ", lineno=77, col_offset=-1), lineno=77, col_offset=-1), If(Name('unixfrom', Load(), lineno=78, col_offset=11), [Assign([Name('ufrom', Store(), lineno=79, col_offset=12)], Call(Attribute(Name('msg', Load(), lineno=79, col_offset=20), 'get_unixfrom', Load(), lineno=79, col_offset=20), [], [], None, None, lineno=79, col_offset=20), lineno=79, col_offset=12), If(UnaryOp(Not(), Name('ufrom', Load(), lineno=80, col_offset=19), lineno=80, col_offset=15), [Assign([Name('ufrom', Store(), lineno=81, col_offset=16)], BinOp(Str('From nobody ', lineno=81, col_offset=24), Add(), Call(Attribute(Name('time', Load(), lineno=81, col_offset=41), 'ctime', Load(), lineno=81, col_offset=41), [Call(Attribute(Name('time', Load(), lineno=81, col_offset=52), 'time', Load(), lineno=81, col_offset=52), [], [], None, None, lineno=81, col_offset=52)], [], None, None, lineno=81, col_offset=41), lineno=81, col_offset=24), lineno=81, col_offset=16)], [], lineno=80, col_offset=12), Print(Attribute(Name('self', Load(), lineno=82, col_offset=21), '_fp', Load(), lineno=82, col_offset=21), [Name('ufrom', Load(), lineno=82, col_offset=31)], True, lineno=82, col_offset=12)], [], lineno=78, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=8), '_write', Load(), lineno=83, col_offset=8), [Name('msg', Load(), lineno=83, col_offset=20)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=85, col_offset=14), Name('fp', Param(), lineno=85, col_offset=20)], None, None, []), [Expr(Str('Clone this generator with the exact same options.', lineno=86, col_offset=8), lineno=86, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=87, col_offset=15), '__class__', Load(), lineno=87, col_offset=15), [Name('fp', Load(), lineno=87, col_offset=30), Attribute(Name('self', Load(), lineno=87, col_offset=34), '_mangle_from_', Load(), lineno=87, col_offset=34), Attribute(Name('self', Load(), lineno=87, col_offset=54), '_maxheaderlen', Load(), lineno=87, col_offset=54)], [], None, None, lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('_write', arguments([Name('self', Param(), lineno=93, col_offset=15), Name('msg', Param(), lineno=93, col_offset=21)], None, None, []), [Assign([Name('oldfp', Store(), lineno=105, col_offset=8)], Attribute(Name('self', Load(), lineno=105, col_offset=16), '_fp', Load(), lineno=105, col_offset=16), lineno=105, col_offset=8), TryFinally([Assign([Attribute(Name('self', Load(), lineno=107, col_offset=12), '_fp', Store(), lineno=107, col_offset=12), Name('sfp', Store(), lineno=107, col_offset=23)], Call(Name('StringIO', Load(), lineno=107, col_offset=29), [], [], None, None, lineno=107, col_offset=29), lineno=107, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=12), '_dispatch', Load(), lineno=108, col_offset=12), [Name('msg', Load(), lineno=108, col_offset=27)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=110, col_offset=12), '_fp', Store(), lineno=110, col_offset=12)], Name('oldfp', Load(), lineno=110, col_offset=23), lineno=110, col_offset=12)], lineno=106, col_offset=8), Assign([Name('meth', Store(), lineno=113, col_offset=8)], Call(Name('getattr', Load(), lineno=113, col_offset=15), [Name('msg', Load(), lineno=113, col_offset=23), Str('_write_headers', lineno=113, col_offset=28), Name('None', Load(), lineno=113, col_offset=46)], [], None, None, lineno=113, col_offset=15), lineno=113, col_offset=8), If(Compare(Name('meth', Load(), lineno=114, col_offset=11), [Is()], [Name('None', Load(), lineno=114, col_offset=19)], lineno=114, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=12), '_write_headers', Load(), lineno=115, col_offset=12), [Name('msg', Load(), lineno=115, col_offset=32)], [], None, None, lineno=115, col_offset=12), lineno=115, col_offset=12)], [Expr(Call(Name('meth', Load(), lineno=117, col_offset=12), [Name('self', Load(), lineno=117, col_offset=17)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12)], lineno=114, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=118, col_offset=8), '_fp', Load(), lineno=118, col_offset=8), 'write', Load(), lineno=118, col_offset=8), [Call(Attribute(Name('sfp', Load(), lineno=118, col_offset=23), 'getvalue', Load(), lineno=118, col_offset=23), [], [], None, None, lineno=118, col_offset=23)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('_dispatch', arguments([Name('self', Param(), lineno=120, col_offset=18), Name('msg', Param(), lineno=120, col_offset=24)], None, None, []), [Assign([Name('main', Store(), lineno=125, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=125, col_offset=15), 'get_content_maintype', Load(), lineno=125, col_offset=15), [], [], None, None, lineno=125, col_offset=15), lineno=125, col_offset=8), Assign([Name('sub', Store(), lineno=126, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=126, col_offset=14), 'get_content_subtype', Load(), lineno=126, col_offset=14), [], [], None, None, lineno=126, col_offset=14), lineno=126, col_offset=8), Assign([Name('specific', Store(), lineno=127, col_offset=8)], Call(Attribute(Call(Attribute(Name('UNDERSCORE', Load(), lineno=127, col_offset=19), 'join', Load(), lineno=127, col_offset=19), [Tuple([Name('main', Load(), lineno=127, col_offset=36), Name('sub', Load(), lineno=127, col_offset=42)], Load(), lineno=127, col_offset=36)], [], None, None, lineno=127, col_offset=19), 'replace', Load(), lineno=127, col_offset=19), [Str('-', lineno=127, col_offset=56), Str('_', lineno=127, col_offset=61)], [], None, None, lineno=127, col_offset=19), lineno=127, col_offset=8), Assign([Name('meth', Store(), lineno=128, col_offset=8)], Call(Name('getattr', Load(), lineno=128, col_offset=15), [Name('self', Load(), lineno=128, col_offset=23), BinOp(Str('_handle_', lineno=128, col_offset=29), Add(), Name('specific', Load(), lineno=128, col_offset=42), lineno=128, col_offset=29), Name('None', Load(), lineno=128, col_offset=52)], [], None, None, lineno=128, col_offset=15), lineno=128, col_offset=8), If(Compare(Name('meth', Load(), lineno=129, col_offset=11), [Is()], [Name('None', Load(), lineno=129, col_offset=19)], lineno=129, col_offset=11), [Assign([Name('generic', Store(), lineno=130, col_offset=12)], Call(Attribute(Name('main', Load(), lineno=130, col_offset=22), 'replace', Load(), lineno=130, col_offset=22), [Str('-', lineno=130, col_offset=35), Str('_', lineno=130, col_offset=40)], [], None, None, lineno=130, col_offset=22), lineno=130, col_offset=12), Assign([Name('meth', Store(), lineno=131, col_offset=12)], Call(Name('getattr', Load(), lineno=131, col_offset=19), [Name('self', Load(), lineno=131, col_offset=27), BinOp(Str('_handle_', lineno=131, col_offset=33), Add(), Name('generic', Load(), lineno=131, col_offset=46), lineno=131, col_offset=33), Name('None', Load(), lineno=131, col_offset=55)], [], None, None, lineno=131, col_offset=19), lineno=131, col_offset=12), If(Compare(Name('meth', Load(), lineno=132, col_offset=15), [Is()], [Name('None', Load(), lineno=132, col_offset=23)], lineno=132, col_offset=15), [Assign([Name('meth', Store(), lineno=133, col_offset=16)], Attribute(Name('self', Load(), lineno=133, col_offset=23), '_writeBody', Load(), lineno=133, col_offset=23), lineno=133, col_offset=16)], [], lineno=132, col_offset=12)], [], lineno=129, col_offset=8), Expr(Call(Name('meth', Load(), lineno=134, col_offset=8), [Name('msg', Load(), lineno=134, col_offset=13)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8)], [], lineno=120, col_offset=4), FunctionDef('_write_headers', arguments([Name('self', Param(), lineno=140, col_offset=23), Name('msg', Param(), lineno=140, col_offset=29)], None, None, []), [For(Tuple([Name('h', Store(), lineno=141, col_offset=12), Name('v', Store(), lineno=141, col_offset=15)], Store(), lineno=141, col_offset=12), Call(Attribute(Name('msg', Load(), lineno=141, col_offset=20), 'items', Load(), lineno=141, col_offset=20), [], [], None, None, lineno=141, col_offset=20), [Print(Attribute(Name('self', Load(), lineno=142, col_offset=21), '_fp', Load(), lineno=142, col_offset=21), [BinOp(Str('%s:', lineno=142, col_offset=31), Mod(), Name('h', Load(), lineno=142, col_offset=39), lineno=142, col_offset=31)], False, lineno=142, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=143, col_offset=15), '_maxheaderlen', Load(), lineno=143, col_offset=15), [Eq()], [Num(0, lineno=143, col_offset=37)], lineno=143, col_offset=15), [Print(Attribute(Name('self', Load(), lineno=145, col_offset=25), '_fp', Load(), lineno=145, col_offset=25), [Name('v', Load(), lineno=145, col_offset=35)], True, lineno=145, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=146, col_offset=17), [Name('v', Load(), lineno=146, col_offset=28), Name('Header', Load(), lineno=146, col_offset=31)], [], None, None, lineno=146, col_offset=17), [Print(Attribute(Name('self', Load(), lineno=148, col_offset=25), '_fp', Load(), lineno=148, col_offset=25), [Call(Attribute(Name('v', Load(), lineno=148, col_offset=35), 'encode', Load(), lineno=148, col_offset=35), [], [], None, None, lineno=148, col_offset=35)], True, lineno=148, col_offset=16)], [If(Call(Name('_is8bitstring', Load(), lineno=149, col_offset=17), [Name('v', Load(), lineno=149, col_offset=31)], [], None, None, lineno=149, col_offset=17), [Print(Attribute(Name('self', Load(), lineno=156, col_offset=25), '_fp', Load(), lineno=156, col_offset=25), [Name('v', Load(), lineno=156, col_offset=35)], True, lineno=156, col_offset=16)], [Print(Attribute(Name('self', Load(), lineno=163, col_offset=25), '_fp', Load(), lineno=163, col_offset=25), [Call(Attribute(Call(Name('Header', Load(), lineno=163, col_offset=35), [Name('v', Load(), lineno=164, col_offset=20)], [keyword('maxlinelen', Attribute(Name('self', Load(), lineno=164, col_offset=34), '_maxheaderlen', Load(), lineno=164, col_offset=34)), keyword('header_name', Name('h', Load(), lineno=164, col_offset=66))], None, None, lineno=163, col_offset=35), 'encode', Load(), lineno=163, col_offset=35), [], [], None, None, lineno=163, col_offset=35)], True, lineno=163, col_offset=16)], lineno=149, col_offset=17)], lineno=146, col_offset=17)], lineno=143, col_offset=12)], [], lineno=141, col_offset=8), Print(Attribute(Name('self', Load(), lineno=166, col_offset=17), '_fp', Load(), lineno=166, col_offset=17), [], True, lineno=166, col_offset=8)], [], lineno=140, col_offset=4), FunctionDef('_handle_text', arguments([Name('self', Param(), lineno=172, col_offset=21), Name('msg', Param(), lineno=172, col_offset=27)], None, None, []), [Assign([Name('payload', Store(), lineno=173, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=173, col_offset=18), 'get_payload', Load(), lineno=173, col_offset=18), [], [], None, None, lineno=173, col_offset=18), lineno=173, col_offset=8), If(Compare(Name('payload', Load(), lineno=174, col_offset=11), [Is()], [Name('None', Load(), lineno=174, col_offset=22)], lineno=174, col_offset=11), [Return(None, lineno=175, col_offset=12)], [], lineno=174, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=176, col_offset=15), [Name('payload', Load(), lineno=176, col_offset=26), Name('basestring', Load(), lineno=176, col_offset=35)], [], None, None, lineno=176, col_offset=15), lineno=176, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=177, col_offset=18), [BinOp(Str('string payload expected: %s', lineno=177, col_offset=28), Mod(), Call(Name('type', Load(), lineno=177, col_offset=60), [Name('payload', Load(), lineno=177, col_offset=65)], [], None, None, lineno=177, col_offset=60), lineno=177, col_offset=28)], [], None, None, lineno=177, col_offset=18), None, None, lineno=177, col_offset=12)], [], lineno=176, col_offset=8), If(Attribute(Name('self', Load(), lineno=178, col_offset=11), '_mangle_from_', Load(), lineno=178, col_offset=11), [Assign([Name('payload', Store(), lineno=179, col_offset=12)], Call(Attribute(Name('fcre', Load(), lineno=179, col_offset=22), 'sub', Load(), lineno=179, col_offset=22), [Str('>From ', lineno=179, col_offset=31), Name('payload', Load(), lineno=179, col_offset=41)], [], None, None, lineno=179, col_offset=22), lineno=179, col_offset=12)], [], lineno=178, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=180, col_offset=8), '_fp', Load(), lineno=180, col_offset=8), 'write', Load(), lineno=180, col_offset=8), [Name('payload', Load(), lineno=180, col_offset=23)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8)], [], lineno=172, col_offset=4), Assign([Name('_writeBody', Store(), lineno=183, col_offset=4)], Name('_handle_text', Load(), lineno=183, col_offset=17), lineno=183, col_offset=4), FunctionDef('_handle_multipart', arguments([Name('self', Param(), lineno=185, col_offset=26), Name('msg', Param(), lineno=185, col_offset=32)], None, None, []), [Assign([Name('msgtexts', Store(), lineno=189, col_offset=8)], List([], Load(), lineno=189, col_offset=19), lineno=189, col_offset=8), Assign([Name('subparts', Store(), lineno=190, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=190, col_offset=19), 'get_payload', Load(), lineno=190, col_offset=19), [], [], None, None, lineno=190, col_offset=19), lineno=190, col_offset=8), If(Compare(Name('subparts', Load(), lineno=191, col_offset=11), [Is()], [Name('None', Load(), lineno=191, col_offset=23)], lineno=191, col_offset=11), [Assign([Name('subparts', Store(), lineno=192, col_offset=12)], List([], Load(), lineno=192, col_offset=23), lineno=192, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=193, col_offset=13), [Name('subparts', Load(), lineno=193, col_offset=24), Name('basestring', Load(), lineno=193, col_offset=34)], [], None, None, lineno=193, col_offset=13), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=195, col_offset=12), '_fp', Load(), lineno=195, col_offset=12), 'write', Load(), lineno=195, col_offset=12), [Name('subparts', Load(), lineno=195, col_offset=27)], [], None, None, lineno=195, col_offset=12), lineno=195, col_offset=12), Return(None, lineno=196, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=197, col_offset=17), [Name('subparts', Load(), lineno=197, col_offset=28), Name('list', Load(), lineno=197, col_offset=38)], [], None, None, lineno=197, col_offset=17), lineno=197, col_offset=13), [Assign([Name('subparts', Store(), lineno=199, col_offset=12)], List([Name('subparts', Load(), lineno=199, col_offset=24)], Load(), lineno=199, col_offset=23), lineno=199, col_offset=12)], [], lineno=197, col_offset=13)], lineno=193, col_offset=13)], lineno=191, col_offset=8), For(Name('part', Store(), lineno=200, col_offset=12), Name('subparts', Load(), lineno=200, col_offset=20), [Assign([Name('s', Store(), lineno=201, col_offset=12)], Call(Name('StringIO', Load(), lineno=201, col_offset=16), [], [], None, None, lineno=201, col_offset=16), lineno=201, col_offset=12), Assign([Name('g', Store(), lineno=202, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=202, col_offset=16), 'clone', Load(), lineno=202, col_offset=16), [Name('s', Load(), lineno=202, col_offset=27)], [], None, None, lineno=202, col_offset=16), lineno=202, col_offset=12), Expr(Call(Attribute(Name('g', Load(), lineno=203, col_offset=12), 'flatten', Load(), lineno=203, col_offset=12), [Name('part', Load(), lineno=203, col_offset=22)], [keyword('unixfrom', Name('False', Load(), lineno=203, col_offset=37))], None, None, lineno=203, col_offset=12), lineno=203, col_offset=12), Expr(Call(Attribute(Name('msgtexts', Load(), lineno=204, col_offset=12), 'append', Load(), lineno=204, col_offset=12), [Call(Attribute(Name('s', Load(), lineno=204, col_offset=28), 'getvalue', Load(), lineno=204, col_offset=28), [], [], None, None, lineno=204, col_offset=28)], [], None, None, lineno=204, col_offset=12), lineno=204, col_offset=12)], [], lineno=200, col_offset=8), Assign([Name('alltext', Store(), lineno=207, col_offset=8)], Call(Attribute(Name('NL', Load(), lineno=207, col_offset=18), 'join', Load(), lineno=207, col_offset=18), [Name('msgtexts', Load(), lineno=207, col_offset=26)], [], None, None, lineno=207, col_offset=18), lineno=207, col_offset=8), Assign([Name('boundary', Store(), lineno=209, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=209, col_offset=19), 'get_boundary', Load(), lineno=209, col_offset=19), [], [keyword('failobj', Call(Name('_make_boundary', Load(), lineno=209, col_offset=44), [Name('alltext', Load(), lineno=209, col_offset=59)], [], None, None, lineno=209, col_offset=44))], None, None, lineno=209, col_offset=19), lineno=209, col_offset=8), If(Compare(Call(Attribute(Name('msg', Load(), lineno=216, col_offset=11), 'get_boundary', Load(), lineno=216, col_offset=11), [], [], None, None, lineno=216, col_offset=11), [NotEq()], [Name('boundary', Load(), lineno=216, col_offset=33)], lineno=216, col_offset=11), [Expr(Call(Attribute(Name('msg', Load(), lineno=217, col_offset=12), 'set_boundary', Load(), lineno=217, col_offset=12), [Name('boundary', Load(), lineno=217, col_offset=29)], [], None, None, lineno=217, col_offset=12), lineno=217, col_offset=12)], [], lineno=216, col_offset=8), If(Compare(Attribute(Name('msg', Load(), lineno=219, col_offset=11), 'preamble', Load(), lineno=219, col_offset=11), [IsNot()], [Name('None', Load(), lineno=219, col_offset=31)], lineno=219, col_offset=11), [Print(Attribute(Name('self', Load(), lineno=220, col_offset=21), '_fp', Load(), lineno=220, col_offset=21), [Attribute(Name('msg', Load(), lineno=220, col_offset=31), 'preamble', Load(), lineno=220, col_offset=31)], True, lineno=220, col_offset=12)], [], lineno=219, col_offset=8), Print(Attribute(Name('self', Load(), lineno=222, col_offset=17), '_fp', Load(), lineno=222, col_offset=17), [BinOp(Str('--', lineno=222, col_offset=27), Add(), Name('boundary', Load(), lineno=222, col_offset=34), lineno=222, col_offset=27)], True, lineno=222, col_offset=8), If(Name('msgtexts', Load(), lineno=224, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=225, col_offset=12), '_fp', Load(), lineno=225, col_offset=12), 'write', Load(), lineno=225, col_offset=12), [Call(Attribute(Name('msgtexts', Load(), lineno=225, col_offset=27), 'pop', Load(), lineno=225, col_offset=27), [Num(0, lineno=225, col_offset=40)], [], None, None, lineno=225, col_offset=27)], [], None, None, lineno=225, col_offset=12), lineno=225, col_offset=12)], [], lineno=224, col_offset=8), For(Name('body_part', Store(), lineno=229, col_offset=12), Name('msgtexts', Load(), lineno=229, col_offset=25), [Print(Attribute(Name('self', Load(), lineno=231, col_offset=21), '_fp', Load(), lineno=231, col_offset=21), [BinOp(Str('\n--', lineno=231, col_offset=31), Add(), Name('boundary', Load(), lineno=231, col_offset=40), lineno=231, col_offset=31)], True, lineno=231, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=233, col_offset=12), '_fp', Load(), lineno=233, col_offset=12), 'write', Load(), lineno=233, col_offset=12), [Name('body_part', Load(), lineno=233, col_offset=27)], [], None, None, lineno=233, col_offset=12), lineno=233, col_offset=12)], [], lineno=229, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=235, col_offset=8), '_fp', Load(), lineno=235, col_offset=8), 'write', Load(), lineno=235, col_offset=8), [BinOp(BinOp(Str('\n--', lineno=235, col_offset=23), Add(), Name('boundary', Load(), lineno=235, col_offset=32), lineno=235, col_offset=23), Add(), Str('--', lineno=235, col_offset=43), lineno=235, col_offset=41)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8), If(Compare(Attribute(Name('msg', Load(), lineno=236, col_offset=11), 'epilogue', Load(), lineno=236, col_offset=11), [IsNot()], [Name('None', Load(), lineno=236, col_offset=31)], lineno=236, col_offset=11), [Print(Attribute(Name('self', Load(), lineno=237, col_offset=21), '_fp', Load(), lineno=237, col_offset=21), [], True, lineno=237, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=238, col_offset=12), '_fp', Load(), lineno=238, col_offset=12), 'write', Load(), lineno=238, col_offset=12), [Attribute(Name('msg', Load(), lineno=238, col_offset=27), 'epilogue', Load(), lineno=238, col_offset=27)], [], None, None, lineno=238, col_offset=12), lineno=238, col_offset=12)], [], lineno=236, col_offset=8)], [], lineno=185, col_offset=4), FunctionDef('_handle_multipart_signed', arguments([Name('self', Param(), lineno=240, col_offset=33), Name('msg', Param(), lineno=240, col_offset=39)], None, None, []), [Assign([Name('old_maxheaderlen', Store(), lineno=244, col_offset=8)], Attribute(Name('self', Load(), lineno=244, col_offset=27), '_maxheaderlen', Load(), lineno=244, col_offset=27), lineno=244, col_offset=8), TryFinally([Assign([Attribute(Name('self', Load(), lineno=246, col_offset=12), '_maxheaderlen', Store(), lineno=246, col_offset=12)], Num(0, lineno=246, col_offset=33), lineno=246, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=247, col_offset=12), '_handle_multipart', Load(), lineno=247, col_offset=12), [Name('msg', Load(), lineno=247, col_offset=35)], [], None, None, lineno=247, col_offset=12), lineno=247, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=249, col_offset=12), '_maxheaderlen', Store(), lineno=249, col_offset=12)], Name('old_maxheaderlen', Load(), lineno=249, col_offset=33), lineno=249, col_offset=12)], lineno=245, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('_handle_message_delivery_status', arguments([Name('self', Param(), lineno=251, col_offset=40), Name('msg', Param(), lineno=251, col_offset=46)], None, None, []), [Assign([Name('blocks', Store(), lineno=255, col_offset=8)], List([], Load(), lineno=255, col_offset=17), lineno=255, col_offset=8), For(Name('part', Store(), lineno=256, col_offset=12), Call(Attribute(Name('msg', Load(), lineno=256, col_offset=20), 'get_payload', Load(), lineno=256, col_offset=20), [], [], None, None, lineno=256, col_offset=20), [Assign([Name('s', Store(), lineno=257, col_offset=12)], Call(Name('StringIO', Load(), lineno=257, col_offset=16), [], [], None, None, lineno=257, col_offset=16), lineno=257, col_offset=12), Assign([Name('g', Store(), lineno=258, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=258, col_offset=16), 'clone', Load(), lineno=258, col_offset=16), [Name('s', Load(), lineno=258, col_offset=27)], [], None, None, lineno=258, col_offset=16), lineno=258, col_offset=12), Expr(Call(Attribute(Name('g', Load(), lineno=259, col_offset=12), 'flatten', Load(), lineno=259, col_offset=12), [Name('part', Load(), lineno=259, col_offset=22)], [keyword('unixfrom', Name('False', Load(), lineno=259, col_offset=37))], None, None, lineno=259, col_offset=12), lineno=259, col_offset=12), Assign([Name('text', Store(), lineno=260, col_offset=12)], Call(Attribute(Name('s', Load(), lineno=260, col_offset=19), 'getvalue', Load(), lineno=260, col_offset=19), [], [], None, None, lineno=260, col_offset=19), lineno=260, col_offset=12), Assign([Name('lines', Store(), lineno=261, col_offset=12)], Call(Attribute(Name('text', Load(), lineno=261, col_offset=20), 'split', Load(), lineno=261, col_offset=20), [Str('\n', lineno=261, col_offset=31)], [], None, None, lineno=261, col_offset=20), lineno=261, col_offset=12), If(BoolOp(And(), [Name('lines', Load(), lineno=263, col_offset=15), Compare(Subscript(Name('lines', Load(), lineno=263, col_offset=25), Index(Num(-1, lineno=263, col_offset=32)), Load(), lineno=263, col_offset=25), [Eq()], [Str('', lineno=263, col_offset=38)], lineno=263, col_offset=25)], lineno=263, col_offset=15), [Expr(Call(Attribute(Name('blocks', Load(), lineno=264, col_offset=16), 'append', Load(), lineno=264, col_offset=16), [Call(Attribute(Name('NL', Load(), lineno=264, col_offset=30), 'join', Load(), lineno=264, col_offset=30), [Subscript(Name('lines', Load(), lineno=264, col_offset=38), Slice(None, Num(-1, lineno=264, col_offset=46), None), Load(), lineno=264, col_offset=38)], [], None, None, lineno=264, col_offset=30)], [], None, None, lineno=264, col_offset=16), lineno=264, col_offset=16)], [Expr(Call(Attribute(Name('blocks', Load(), lineno=266, col_offset=16), 'append', Load(), lineno=266, col_offset=16), [Name('text', Load(), lineno=266, col_offset=30)], [], None, None, lineno=266, col_offset=16), lineno=266, col_offset=16)], lineno=263, col_offset=12)], [], lineno=256, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=270, col_offset=8), '_fp', Load(), lineno=270, col_offset=8), 'write', Load(), lineno=270, col_offset=8), [Call(Attribute(Name('NL', Load(), lineno=270, col_offset=23), 'join', Load(), lineno=270, col_offset=23), [Name('blocks', Load(), lineno=270, col_offset=31)], [], None, None, lineno=270, col_offset=23)], [], None, None, lineno=270, col_offset=8), lineno=270, col_offset=8)], [], lineno=251, col_offset=4), FunctionDef('_handle_message', arguments([Name('self', Param(), lineno=272, col_offset=24), Name('msg', Param(), lineno=272, col_offset=30)], None, None, []), [Assign([Name('s', Store(), lineno=273, col_offset=8)], Call(Name('StringIO', Load(), lineno=273, col_offset=12), [], [], None, None, lineno=273, col_offset=12), lineno=273, col_offset=8), Assign([Name('g', Store(), lineno=274, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=274, col_offset=12), 'clone', Load(), lineno=274, col_offset=12), [Name('s', Load(), lineno=274, col_offset=23)], [], None, None, lineno=274, col_offset=12), lineno=274, col_offset=8), Assign([Name('payload', Store(), lineno=284, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=284, col_offset=18), 'get_payload', Load(), lineno=284, col_offset=18), [], [], None, None, lineno=284, col_offset=18), lineno=284, col_offset=8), If(Call(Name('isinstance', Load(), lineno=285, col_offset=11), [Name('payload', Load(), lineno=285, col_offset=22), Name('list', Load(), lineno=285, col_offset=31)], [], None, None, lineno=285, col_offset=11), [Expr(Call(Attribute(Name('g', Load(), lineno=286, col_offset=12), 'flatten', Load(), lineno=286, col_offset=12), [Call(Attribute(Name('msg', Load(), lineno=286, col_offset=22), 'get_payload', Load(), lineno=286, col_offset=22), [Num(0, lineno=286, col_offset=38)], [], None, None, lineno=286, col_offset=22)], [keyword('unixfrom', Name('False', Load(), lineno=286, col_offset=51))], None, None, lineno=286, col_offset=12), lineno=286, col_offset=12), Assign([Name('payload', Store(), lineno=287, col_offset=12)], Call(Attribute(Name('s', Load(), lineno=287, col_offset=22), 'getvalue', Load(), lineno=287, col_offset=22), [], [], None, None, lineno=287, col_offset=22), lineno=287, col_offset=12)], [], lineno=285, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=288, col_offset=8), '_fp', Load(), lineno=288, col_offset=8), 'write', Load(), lineno=288, col_offset=8), [Name('payload', Load(), lineno=288, col_offset=23)], [], None, None, lineno=288, col_offset=8), lineno=288, col_offset=8)], [], lineno=272, col_offset=4)], [], lineno=32, col_offset=0), Assign([Name('_FMT', Store(), lineno=292, col_offset=0)], Str('[Non-text (%(type)s) part of message omitted, filename %(filename)s]', lineno=292, col_offset=7), lineno=292, col_offset=0), ClassDef('DecodedGenerator', [Name('Generator', Load(), lineno=294, col_offset=23)], [Expr(Str('Generator a text representation of a message.\n\n    Like the Generator base class, except that non-text parts are substituted\n    with a format string representing the part.\n    ', lineno=299, col_offset=-1), lineno=299, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=300, col_offset=17), Name('outfp', Param(), lineno=300, col_offset=23), Name('mangle_from_', Param(), lineno=300, col_offset=30), Name('maxheaderlen', Param(), lineno=300, col_offset=49), Name('fmt', Param(), lineno=300, col_offset=66)], None, None, [Name('True', Load(), lineno=300, col_offset=43), Num(78, lineno=300, col_offset=62), Name('None', Load(), lineno=300, col_offset=70)]), [Expr(Str("Like Generator.__init__() except that an additional optional\n        argument is allowed.\n\n        Walks through all subparts of a message.  If the subpart is of main\n        type `text', then it prints the decoded payload of the subpart.\n\n        Otherwise, fmt is a format string that is used instead of the message\n        payload.  fmt is expanded with the following keywords (in\n        %(keyword)s format):\n\n        type       : Full MIME type of the non-text part\n        maintype   : Main MIME type of the non-text part\n        subtype    : Sub-MIME type of the non-text part\n        filename   : Filename of the non-text part\n        description: Description associated with the non-text part\n        encoding   : Content transfer encoding of the non-text part\n\n        The default value for fmt is None, meaning\n\n        [Non-text (%(type)s) part of message omitted, filename %(filename)s]\n        ", lineno=321, col_offset=-1), lineno=321, col_offset=-1), Expr(Call(Attribute(Name('Generator', Load(), lineno=322, col_offset=8), '__init__', Load(), lineno=322, col_offset=8), [Name('self', Load(), lineno=322, col_offset=27), Name('outfp', Load(), lineno=322, col_offset=33), Name('mangle_from_', Load(), lineno=322, col_offset=40), Name('maxheaderlen', Load(), lineno=322, col_offset=54)], [], None, None, lineno=322, col_offset=8), lineno=322, col_offset=8), If(Compare(Name('fmt', Load(), lineno=323, col_offset=11), [Is()], [Name('None', Load(), lineno=323, col_offset=18)], lineno=323, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=324, col_offset=12), '_fmt', Store(), lineno=324, col_offset=12)], Name('_FMT', Load(), lineno=324, col_offset=24), lineno=324, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=326, col_offset=12), '_fmt', Store(), lineno=326, col_offset=12)], Name('fmt', Load(), lineno=326, col_offset=24), lineno=326, col_offset=12)], lineno=323, col_offset=8)], [], lineno=300, col_offset=4), FunctionDef('_dispatch', arguments([Name('self', Param(), lineno=328, col_offset=18), Name('msg', Param(), lineno=328, col_offset=24)], None, None, []), [For(Name('part', Store(), lineno=329, col_offset=12), Call(Attribute(Name('msg', Load(), lineno=329, col_offset=20), 'walk', Load(), lineno=329, col_offset=20), [], [], None, None, lineno=329, col_offset=20), [Assign([Name('maintype', Store(), lineno=330, col_offset=12)], Call(Attribute(Name('part', Load(), lineno=330, col_offset=23), 'get_content_maintype', Load(), lineno=330, col_offset=23), [], [], None, None, lineno=330, col_offset=23), lineno=330, col_offset=12), If(Compare(Name('maintype', Load(), lineno=331, col_offset=15), [Eq()], [Str('text', lineno=331, col_offset=27)], lineno=331, col_offset=15), [Print(Name('self', Load(), lineno=332, col_offset=25), [Call(Attribute(Name('part', Load(), lineno=332, col_offset=31), 'get_payload', Load(), lineno=332, col_offset=31), [], [keyword('decode', Name('True', Load(), lineno=332, col_offset=55))], None, None, lineno=332, col_offset=31)], True, lineno=332, col_offset=16)], [If(Compare(Name('maintype', Load(), lineno=333, col_offset=17), [Eq()], [Str('multipart', lineno=333, col_offset=29)], lineno=333, col_offset=17), [Pass( lineno=335, col_offset=16)], [Print(Name('self', Load(), lineno=337, col_offset=25), [BinOp(Attribute(Name('self', Load(), lineno=337, col_offset=31), '_fmt', Load(), lineno=337, col_offset=31), Mod(), Dict([Str('type', lineno=338, col_offset=20), Str('maintype', lineno=339, col_offset=20), Str('subtype', lineno=340, col_offset=20), Str('filename', lineno=341, col_offset=20), Str('description', lineno=342, col_offset=20), Str('encoding', lineno=344, col_offset=20)], [Call(Attribute(Name('part', Load(), lineno=338, col_offset=35), 'get_content_type', Load(), lineno=338, col_offset=35), [], [], None, None, lineno=338, col_offset=35), Call(Attribute(Name('part', Load(), lineno=339, col_offset=35), 'get_content_maintype', Load(), lineno=339, col_offset=35), [], [], None, None, lineno=339, col_offset=35), Call(Attribute(Name('part', Load(), lineno=340, col_offset=35), 'get_content_subtype', Load(), lineno=340, col_offset=35), [], [], None, None, lineno=340, col_offset=35), Call(Attribute(Name('part', Load(), lineno=341, col_offset=35), 'get_filename', Load(), lineno=341, col_offset=35), [Str('[no filename]', lineno=341, col_offset=53)], [], None, None, lineno=341, col_offset=35), Call(Attribute(Name('part', Load(), lineno=342, col_offset=35), 'get', Load(), lineno=342, col_offset=35), [Str('Content-Description', lineno=342, col_offset=44), Str('[no description]', lineno=343, col_offset=44)], [], None, None, lineno=342, col_offset=35), Call(Attribute(Name('part', Load(), lineno=344, col_offset=35), 'get', Load(), lineno=344, col_offset=35), [Str('Content-Transfer-Encoding', lineno=344, col_offset=44), Str('[no encoding]', lineno=345, col_offset=44)], [], None, None, lineno=344, col_offset=35)], lineno=337, col_offset=43), lineno=337, col_offset=31)], True, lineno=337, col_offset=16)], lineno=333, col_offset=17)], lineno=331, col_offset=12)], [], lineno=329, col_offset=8)], [], lineno=328, col_offset=4)], [], lineno=294, col_offset=0), Assign([Name('_width', Store(), lineno=351, col_offset=0)], Call(Name('len', Load(), lineno=351, col_offset=9), [Call(Name('repr', Load(), lineno=351, col_offset=13), [BinOp(Attribute(Name('sys', Load(), lineno=351, col_offset=18), 'maxint', Load(), lineno=351, col_offset=18), Sub(), Num(1, lineno=351, col_offset=29), lineno=351, col_offset=18)], [], None, None, lineno=351, col_offset=13)], [], None, None, lineno=351, col_offset=9), lineno=351, col_offset=0), Assign([Name('_fmt', Store(), lineno=352, col_offset=0)], BinOp(Str('%%0%dd', lineno=352, col_offset=7), Mod(), Name('_width', Load(), lineno=352, col_offset=18), lineno=352, col_offset=7), lineno=352, col_offset=0), FunctionDef('_make_boundary', arguments([Name('text', Param(), lineno=354, col_offset=19)], None, None, [Name('None', Load(), lineno=354, col_offset=24)]), [Assign([Name('token', Store(), lineno=357, col_offset=4)], Call(Attribute(Name('random', Load(), lineno=357, col_offset=12), 'randrange', Load(), lineno=357, col_offset=12), [Attribute(Name('sys', Load(), lineno=357, col_offset=29), 'maxint', Load(), lineno=357, col_offset=29)], [], None, None, lineno=357, col_offset=12), lineno=357, col_offset=4), Assign([Name('boundary', Store(), lineno=358, col_offset=4)], BinOp(BinOp(BinOp(Str('=', lineno=358, col_offset=16), Mult(), Num(15, lineno=358, col_offset=22), lineno=358, col_offset=16), Add(), BinOp(Name('_fmt', Load(), lineno=358, col_offset=29), Mod(), Name('token', Load(), lineno=358, col_offset=36), lineno=358, col_offset=29), lineno=358, col_offset=15), Add(), Str('==', lineno=358, col_offset=45), lineno=358, col_offset=43), lineno=358, col_offset=4), If(Compare(Name('text', Load(), lineno=359, col_offset=7), [Is()], [Name('None', Load(), lineno=359, col_offset=15)], lineno=359, col_offset=7), [Return(Name('boundary', Load(), lineno=360, col_offset=15), lineno=360, col_offset=8)], [], lineno=359, col_offset=4), Assign([Name('b', Store(), lineno=361, col_offset=4)], Name('boundary', Load(), lineno=361, col_offset=8), lineno=361, col_offset=4), Assign([Name('counter', Store(), lineno=362, col_offset=4)], Num(0, lineno=362, col_offset=14), lineno=362, col_offset=4), While(Name('True', Load(), lineno=363, col_offset=10), [Assign([Name('cre', Store(), lineno=364, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=364, col_offset=14), 'compile', Load(), lineno=364, col_offset=14), [BinOp(BinOp(Str('^--', lineno=364, col_offset=25), Add(), Call(Attribute(Name('re', Load(), lineno=364, col_offset=33), 'escape', Load(), lineno=364, col_offset=33), [Name('b', Load(), lineno=364, col_offset=43)], [], None, None, lineno=364, col_offset=33), lineno=364, col_offset=25), Add(), Str('(--)?$', lineno=364, col_offset=48), lineno=364, col_offset=46), Attribute(Name('re', Load(), lineno=364, col_offset=58), 'MULTILINE', Load(), lineno=364, col_offset=58)], [], None, None, lineno=364, col_offset=14), lineno=364, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('cre', Load(), lineno=365, col_offset=15), 'search', Load(), lineno=365, col_offset=15), [Name('text', Load(), lineno=365, col_offset=26)], [], None, None, lineno=365, col_offset=15), lineno=365, col_offset=11), [Break( lineno=366, col_offset=12)], [], lineno=365, col_offset=8), Assign([Name('b', Store(), lineno=367, col_offset=8)], BinOp(BinOp(Name('boundary', Load(), lineno=367, col_offset=12), Add(), Str('.', lineno=367, col_offset=23), lineno=367, col_offset=12), Add(), Call(Name('str', Load(), lineno=367, col_offset=29), [Name('counter', Load(), lineno=367, col_offset=33)], [], None, None, lineno=367, col_offset=29), lineno=367, col_offset=27), lineno=367, col_offset=8), AugAssign(Name('counter', Store(), lineno=368, col_offset=8), Add(), Num(1, lineno=368, col_offset=19), lineno=368, col_offset=8)], [], lineno=363, col_offset=4), Return(Name('b', Load(), lineno=369, col_offset=11), lineno=369, col_offset=4)], [], lineno=354, col_offset=0)])
