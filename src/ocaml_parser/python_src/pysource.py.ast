Module([Expr(Str("List python source files.\n\nThere are three functions to check whether a file is a Python source, listed\nhere with increasing complexity:\n\n- has_python_ext() checks whether a file name ends in '.py[w]'.\n- look_like_python() checks whether the file is not binary and either has\n  the '.py[w]' extension or the first line contains the word 'python'.\n- can_be_compiled() checks whether the file can be compiled by compile().\n\nThe file also must be of appropriate size - not bigger than a megabyte.\n\nwalk_python_files() recursively lists all Python files under the given directories.\n", lineno=17, col_offset=-1), lineno=17, col_offset=-1), Assign([Name('__author__', Store(), lineno=18, col_offset=0)], Str('Oleg Broytmann, Georg Brandl', lineno=18, col_offset=13), lineno=18, col_offset=0), Assign([Name('__all__', Store(), lineno=20, col_offset=0)], List([Str('has_python_ext', lineno=20, col_offset=11), Str('looks_like_python', lineno=20, col_offset=29), Str('can_be_compiled', lineno=20, col_offset=50), Str('walk_python_files', lineno=20, col_offset=69)], Load(), lineno=20, col_offset=10), lineno=20, col_offset=0), Import([alias('os', None), alias('re', None)], lineno=23, col_offset=0), Assign([Name('binary_re', Store(), lineno=25, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=25, col_offset=12), 'compile', Load(), lineno=25, col_offset=12), [Str('[\x00-\x08\x0e-\x1f\x7f]', lineno=25, col_offset=23)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=0), Assign([Name('debug', Store(), lineno=27, col_offset=0)], Name('False', Load(), lineno=27, col_offset=8), lineno=27, col_offset=0), FunctionDef('print_debug', arguments([Name('msg', Param(), lineno=29, col_offset=16)], None, None, []), [If(Name('debug', Load(), lineno=30, col_offset=7), [Print(None, [Name('msg', Load(), lineno=30, col_offset=20)], True, lineno=30, col_offset=14)], [], lineno=30, col_offset=4)], [], lineno=29, col_offset=0), FunctionDef('_open', arguments([Name('fullpath', Param(), lineno=33, col_offset=10)], None, None, []), [TryExcept([Assign([Name('size', Store(), lineno=35, col_offset=8)], Attribute(Call(Attribute(Name('os', Load(), lineno=35, col_offset=15), 'stat', Load(), lineno=35, col_offset=15), [Name('fullpath', Load(), lineno=35, col_offset=23)], [], None, None, lineno=35, col_offset=15), 'st_size', Load(), lineno=35, col_offset=15), lineno=35, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=36, col_offset=11), Name('err', Store(), lineno=36, col_offset=20), [Expr(Call(Name('print_debug', Load(), lineno=37, col_offset=8), [BinOp(Str('%s: permission denied: %s', lineno=37, col_offset=20), Mod(), Tuple([Name('fullpath', Load(), lineno=37, col_offset=51), Name('err', Load(), lineno=37, col_offset=61)], Load(), lineno=37, col_offset=51), lineno=37, col_offset=20)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8), Return(Name('None', Load(), lineno=38, col_offset=15), lineno=38, col_offset=8)], lineno=36, col_offset=4)], [], lineno=34, col_offset=4), If(Compare(Name('size', Load(), lineno=40, col_offset=7), [Gt()], [BinOp(Num(1024, lineno=40, col_offset=14), Mult(), Num(1024, lineno=40, col_offset=19), lineno=40, col_offset=14)], lineno=40, col_offset=7), [Expr(Call(Name('print_debug', Load(), lineno=41, col_offset=8), [BinOp(Str('%s: the file is too big: %d bytes', lineno=41, col_offset=20), Mod(), Tuple([Name('fullpath', Load(), lineno=41, col_offset=59), Name('size', Load(), lineno=41, col_offset=69)], Load(), lineno=41, col_offset=59), lineno=41, col_offset=20)], [], None, None, lineno=41, col_offset=8), lineno=41, col_offset=8), Return(Name('None', Load(), lineno=42, col_offset=15), lineno=42, col_offset=8)], [], lineno=40, col_offset=4), TryExcept([Return(Call(Name('open', Load(), lineno=45, col_offset=15), [Name('fullpath', Load(), lineno=45, col_offset=20), Str('rU', lineno=45, col_offset=30)], [], None, None, lineno=45, col_offset=15), lineno=45, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=46, col_offset=11), Name('err', Store(), lineno=46, col_offset=20), [Expr(Call(Name('print_debug', Load(), lineno=47, col_offset=8), [BinOp(Str('%s: access denied: %s', lineno=47, col_offset=20), Mod(), Tuple([Name('fullpath', Load(), lineno=47, col_offset=47), Name('err', Load(), lineno=47, col_offset=57)], Load(), lineno=47, col_offset=47), lineno=47, col_offset=20)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Return(Name('None', Load(), lineno=48, col_offset=15), lineno=48, col_offset=8)], lineno=46, col_offset=4)], [], lineno=44, col_offset=4)], [], lineno=33, col_offset=0), FunctionDef('has_python_ext', arguments([Name('fullpath', Param(), lineno=50, col_offset=19)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('fullpath', Load(), lineno=51, col_offset=11), 'endswith', Load(), lineno=51, col_offset=11), [Str('.py', lineno=51, col_offset=29)], [], None, None, lineno=51, col_offset=11), Call(Attribute(Name('fullpath', Load(), lineno=51, col_offset=39), 'endswith', Load(), lineno=51, col_offset=39), [Str('.pyw', lineno=51, col_offset=57)], [], None, None, lineno=51, col_offset=39)], lineno=51, col_offset=11), lineno=51, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('looks_like_python', arguments([Name('fullpath', Param(), lineno=53, col_offset=22)], None, None, []), [Assign([Name('infile', Store(), lineno=54, col_offset=4)], Call(Name('_open', Load(), lineno=54, col_offset=13), [Name('fullpath', Load(), lineno=54, col_offset=19)], [], None, None, lineno=54, col_offset=13), lineno=54, col_offset=4), If(Compare(Name('infile', Load(), lineno=55, col_offset=7), [Is()], [Name('None', Load(), lineno=55, col_offset=17)], lineno=55, col_offset=7), [Return(Name('False', Load(), lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=55, col_offset=4), Assign([Name('line', Store(), lineno=58, col_offset=4)], Call(Attribute(Name('infile', Load(), lineno=58, col_offset=11), 'readline', Load(), lineno=58, col_offset=11), [], [], None, None, lineno=58, col_offset=11), lineno=58, col_offset=4), Expr(Call(Attribute(Name('infile', Load(), lineno=59, col_offset=4), 'close', Load(), lineno=59, col_offset=4), [], [], None, None, lineno=59, col_offset=4), lineno=59, col_offset=4), If(Call(Attribute(Name('binary_re', Load(), lineno=61, col_offset=7), 'search', Load(), lineno=61, col_offset=7), [Name('line', Load(), lineno=61, col_offset=24)], [], None, None, lineno=61, col_offset=7), [Expr(Call(Name('print_debug', Load(), lineno=63, col_offset=8), [BinOp(Str('%s: appears to be binary', lineno=63, col_offset=20), Mod(), Name('fullpath', Load(), lineno=63, col_offset=49), lineno=63, col_offset=20)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Return(Name('False', Load(), lineno=64, col_offset=15), lineno=64, col_offset=8)], [], lineno=61, col_offset=4), If(BoolOp(Or(), [Call(Attribute(Name('fullpath', Load(), lineno=66, col_offset=7), 'endswith', Load(), lineno=66, col_offset=7), [Str('.py', lineno=66, col_offset=25)], [], None, None, lineno=66, col_offset=7), Call(Attribute(Name('fullpath', Load(), lineno=66, col_offset=35), 'endswith', Load(), lineno=66, col_offset=35), [Str('.pyw', lineno=66, col_offset=53)], [], None, None, lineno=66, col_offset=35)], lineno=66, col_offset=7), [Return(Name('True', Load(), lineno=67, col_offset=15), lineno=67, col_offset=8)], [If(Compare(Str('python', lineno=68, col_offset=9), [In()], [Name('line', Load(), lineno=68, col_offset=21)], lineno=68, col_offset=9), [Return(Name('True', Load(), lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=68, col_offset=9)], lineno=66, col_offset=4), Return(Name('False', Load(), lineno=72, col_offset=11), lineno=72, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('can_be_compiled', arguments([Name('fullpath', Param(), lineno=74, col_offset=20)], None, None, []), [Assign([Name('infile', Store(), lineno=75, col_offset=4)], Call(Name('_open', Load(), lineno=75, col_offset=13), [Name('fullpath', Load(), lineno=75, col_offset=19)], [], None, None, lineno=75, col_offset=13), lineno=75, col_offset=4), If(Compare(Name('infile', Load(), lineno=76, col_offset=7), [Is()], [Name('None', Load(), lineno=76, col_offset=17)], lineno=76, col_offset=7), [Return(Name('False', Load(), lineno=77, col_offset=15), lineno=77, col_offset=8)], [], lineno=76, col_offset=4), Assign([Name('code', Store(), lineno=79, col_offset=4)], Call(Attribute(Name('infile', Load(), lineno=79, col_offset=11), 'read', Load(), lineno=79, col_offset=11), [], [], None, None, lineno=79, col_offset=11), lineno=79, col_offset=4), Expr(Call(Attribute(Name('infile', Load(), lineno=80, col_offset=4), 'close', Load(), lineno=80, col_offset=4), [], [], None, None, lineno=80, col_offset=4), lineno=80, col_offset=4), TryExcept([Expr(Call(Name('compile', Load(), lineno=83, col_offset=8), [Name('code', Load(), lineno=83, col_offset=16), Name('fullpath', Load(), lineno=83, col_offset=22), Str('exec', lineno=83, col_offset=32)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [ExceptHandler(Name('Exception', Load(), lineno=84, col_offset=11), Name('err', Store(), lineno=84, col_offset=22), [Expr(Call(Name('print_debug', Load(), lineno=85, col_offset=8), [BinOp(Str('%s: cannot compile: %s', lineno=85, col_offset=20), Mod(), Tuple([Name('fullpath', Load(), lineno=85, col_offset=48), Name('err', Load(), lineno=85, col_offset=58)], Load(), lineno=85, col_offset=48), lineno=85, col_offset=20)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8), Return(Name('False', Load(), lineno=86, col_offset=15), lineno=86, col_offset=8)], lineno=84, col_offset=4)], [], lineno=82, col_offset=4), Return(Name('True', Load(), lineno=88, col_offset=11), lineno=88, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('walk_python_files', arguments([Name('paths', Param(), lineno=91, col_offset=22), Name('is_python', Param(), lineno=91, col_offset=29), Name('exclude_dirs', Param(), lineno=91, col_offset=58)], None, None, [Name('looks_like_python', Load(), lineno=91, col_offset=39), Name('None', Load(), lineno=91, col_offset=71)]), [Expr(Str('    Recursively yield all Python source files below the given paths.\n\n    paths: a list of files and/or directories to be checked.\n    is_python: a function that takes a file name and checks whether it is a\n               Python source file\n    exclude_dirs: a list of directory base names that should be excluded in\n                  the search\n    ', lineno=100, col_offset=-1), lineno=100, col_offset=-1), If(Compare(Name('exclude_dirs', Load(), lineno=101, col_offset=7), [Is()], [Name('None', Load(), lineno=101, col_offset=23)], lineno=101, col_offset=7), [Assign([Name('exclude_dirs', Store(), lineno=102, col_offset=8)], List([], Load(), lineno=102, col_offset=21), lineno=102, col_offset=8)], [], lineno=101, col_offset=4), For(Name('path', Store(), lineno=104, col_offset=8), Name('paths', Load(), lineno=104, col_offset=16), [Expr(Call(Name('print_debug', Load(), lineno=105, col_offset=8), [BinOp(Str('testing: %s', lineno=105, col_offset=20), Mod(), Name('path', Load(), lineno=105, col_offset=36), lineno=105, col_offset=20)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=106, col_offset=11), 'path', Load(), lineno=106, col_offset=11), 'isfile', Load(), lineno=106, col_offset=11), [Name('path', Load(), lineno=106, col_offset=26)], [], None, None, lineno=106, col_offset=11), [If(Call(Name('is_python', Load(), lineno=107, col_offset=15), [Name('path', Load(), lineno=107, col_offset=25)], [], None, None, lineno=107, col_offset=15), [Expr(Yield(Name('path', Load(), lineno=108, col_offset=22), lineno=108, col_offset=16), lineno=108, col_offset=16)], [], lineno=107, col_offset=12)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=109, col_offset=13), 'path', Load(), lineno=109, col_offset=13), 'isdir', Load(), lineno=109, col_offset=13), [Name('path', Load(), lineno=109, col_offset=27)], [], None, None, lineno=109, col_offset=13), [Expr(Call(Name('print_debug', Load(), lineno=110, col_offset=12), [Str('    it is a directory', lineno=110, col_offset=24)], [], None, None, lineno=110, col_offset=12), lineno=110, col_offset=12), For(Tuple([Name('dirpath', Store(), lineno=111, col_offset=16), Name('dirnames', Store(), lineno=111, col_offset=25), Name('filenames', Store(), lineno=111, col_offset=35)], Store(), lineno=111, col_offset=16), Call(Attribute(Name('os', Load(), lineno=111, col_offset=48), 'walk', Load(), lineno=111, col_offset=48), [Name('path', Load(), lineno=111, col_offset=56)], [], None, None, lineno=111, col_offset=48), [For(Name('exclude', Store(), lineno=112, col_offset=20), Name('exclude_dirs', Load(), lineno=112, col_offset=31), [If(Compare(Name('exclude', Load(), lineno=113, col_offset=23), [In()], [Name('dirnames', Load(), lineno=113, col_offset=34)], lineno=113, col_offset=23), [Expr(Call(Attribute(Name('dirnames', Load(), lineno=114, col_offset=24), 'remove', Load(), lineno=114, col_offset=24), [Name('exclude', Load(), lineno=114, col_offset=40)], [], None, None, lineno=114, col_offset=24), lineno=114, col_offset=24)], [], lineno=113, col_offset=20)], [], lineno=112, col_offset=16), For(Name('filename', Store(), lineno=115, col_offset=20), Name('filenames', Load(), lineno=115, col_offset=32), [Assign([Name('fullpath', Store(), lineno=116, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=116, col_offset=31), 'path', Load(), lineno=116, col_offset=31), 'join', Load(), lineno=116, col_offset=31), [Name('dirpath', Load(), lineno=116, col_offset=44), Name('filename', Load(), lineno=116, col_offset=53)], [], None, None, lineno=116, col_offset=31), lineno=116, col_offset=20), Expr(Call(Name('print_debug', Load(), lineno=117, col_offset=20), [BinOp(Str('testing: %s', lineno=117, col_offset=32), Mod(), Name('fullpath', Load(), lineno=117, col_offset=48), lineno=117, col_offset=32)], [], None, None, lineno=117, col_offset=20), lineno=117, col_offset=20), If(Call(Name('is_python', Load(), lineno=118, col_offset=23), [Name('fullpath', Load(), lineno=118, col_offset=33)], [], None, None, lineno=118, col_offset=23), [Expr(Yield(Name('fullpath', Load(), lineno=119, col_offset=30), lineno=119, col_offset=24), lineno=119, col_offset=24)], [], lineno=118, col_offset=20)], [], lineno=115, col_offset=16)], [], lineno=111, col_offset=12)], [Expr(Call(Name('print_debug', Load(), lineno=121, col_offset=12), [Str('    unknown type', lineno=121, col_offset=24)], [], None, None, lineno=121, col_offset=12), lineno=121, col_offset=12)], lineno=109, col_offset=13)], lineno=106, col_offset=8)], [], lineno=104, col_offset=4)], [], lineno=91, col_offset=0), If(Compare(Name('__name__', Load(), lineno=124, col_offset=3), [Eq()], [Str('__main__', lineno=124, col_offset=15)], lineno=124, col_offset=3), [For(Name('fullpath', Store(), lineno=126, col_offset=8), Call(Name('walk_python_files', Load(), lineno=126, col_offset=20), [List([Str('.', lineno=126, col_offset=39)], Load(), lineno=126, col_offset=38)], [], None, None, lineno=126, col_offset=20), [Print(None, [Name('fullpath', Load(), lineno=127, col_offset=14)], True, lineno=127, col_offset=8)], [], lineno=126, col_offset=4), Print(None, [Str('----------', lineno=128, col_offset=10)], True, lineno=128, col_offset=4), For(Name('fullpath', Store(), lineno=129, col_offset=8), Call(Name('walk_python_files', Load(), lineno=129, col_offset=20), [List([Str('.', lineno=129, col_offset=39)], Load(), lineno=129, col_offset=38)], [keyword('is_python', Name('can_be_compiled', Load(), lineno=129, col_offset=55))], None, None, lineno=129, col_offset=20), [Print(None, [Name('fullpath', Load(), lineno=130, col_offset=14)], True, lineno=130, col_offset=8)], [], lineno=129, col_offset=4)], [], lineno=124, col_offset=0)])
