Module([Expr(Str('Conversions to/from quoted-printable transport encoding as per RFC 1521.', lineno=3, col_offset=0), lineno=3, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('encode', lineno=7, col_offset=11), Str('decode', lineno=7, col_offset=21), Str('encodestring', lineno=7, col_offset=31), Str('decodestring', lineno=7, col_offset=47)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), Assign([Name('ESCAPE', Store(), lineno=9, col_offset=0)], Str('=', lineno=9, col_offset=9), lineno=9, col_offset=0), Assign([Name('MAXLINESIZE', Store(), lineno=10, col_offset=0)], Num(76, lineno=10, col_offset=14), lineno=10, col_offset=0), Assign([Name('HEX', Store(), lineno=11, col_offset=0)], Str('0123456789ABCDEF', lineno=11, col_offset=6), lineno=11, col_offset=0), Assign([Name('EMPTYSTRING', Store(), lineno=12, col_offset=0)], Str('', lineno=12, col_offset=14), lineno=12, col_offset=0), TryExcept([ImportFrom('binascii', [alias('a2b_qp', None), alias('b2a_qp', None)], 0, lineno=15, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=16, col_offset=7), None, [Assign([Name('a2b_qp', Store(), lineno=17, col_offset=4)], Name('None', Load(), lineno=17, col_offset=13), lineno=17, col_offset=4), Assign([Name('b2a_qp', Store(), lineno=18, col_offset=4)], Name('None', Load(), lineno=18, col_offset=13), lineno=18, col_offset=4)], lineno=16, col_offset=0)], [], lineno=14, col_offset=0), FunctionDef('needsquoting', arguments([Name('c', Param(), lineno=21, col_offset=17), Name('quotetabs', Param(), lineno=21, col_offset=20), Name('header', Param(), lineno=21, col_offset=31)], None, None, []), [Expr(Str("Decide whether a particular character needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    ", lineno=27, col_offset=-1), lineno=27, col_offset=-1), If(Compare(Name('c', Load(), lineno=28, col_offset=7), [In()], [Str(' \t', lineno=28, col_offset=12)], lineno=28, col_offset=7), [Return(Name('quotetabs', Load(), lineno=29, col_offset=15), lineno=29, col_offset=8)], [], lineno=28, col_offset=4), If(Compare(Name('c', Load(), lineno=31, col_offset=7), [Eq()], [Str('_', lineno=31, col_offset=12)], lineno=31, col_offset=7), [Return(Name('header', Load(), lineno=32, col_offset=15), lineno=32, col_offset=8)], [], lineno=31, col_offset=4), Return(BoolOp(Or(), [Compare(Name('c', Load(), lineno=33, col_offset=11), [Eq()], [Name('ESCAPE', Load(), lineno=33, col_offset=16)], lineno=33, col_offset=11), UnaryOp(Not(), Compare(Str(' ', lineno=33, col_offset=31), [LtE(), LtE()], [Name('c', Load(), lineno=33, col_offset=38), Str('~', lineno=33, col_offset=43)], lineno=33, col_offset=31), lineno=33, col_offset=26)], lineno=33, col_offset=11), lineno=33, col_offset=4)], [], lineno=21, col_offset=0), FunctionDef('quote', arguments([Name('c', Param(), lineno=35, col_offset=10)], None, None, []), [Expr(Str('Quote a single character.', lineno=36, col_offset=4), lineno=36, col_offset=4), Assign([Name('i', Store(), lineno=37, col_offset=4)], Call(Name('ord', Load(), lineno=37, col_offset=8), [Name('c', Load(), lineno=37, col_offset=12)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=4), Return(BinOp(BinOp(Name('ESCAPE', Load(), lineno=38, col_offset=11), Add(), Subscript(Name('HEX', Load(), lineno=38, col_offset=20), Index(BinOp(Name('i', Load(), lineno=38, col_offset=24), FloorDiv(), Num(16, lineno=38, col_offset=27), lineno=38, col_offset=24)), Load(), lineno=38, col_offset=20), lineno=38, col_offset=11), Add(), Subscript(Name('HEX', Load(), lineno=38, col_offset=33), Index(BinOp(Name('i', Load(), lineno=38, col_offset=37), Mod(), Num(16, lineno=38, col_offset=39), lineno=38, col_offset=37)), Load(), lineno=38, col_offset=33), lineno=38, col_offset=31), lineno=38, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('encode', arguments([Name('input', Param(), lineno=42, col_offset=11), Name('output', Param(), lineno=42, col_offset=18), Name('quotetabs', Param(), lineno=42, col_offset=26), Name('header', Param(), lineno=42, col_offset=37)], None, None, [Num(0, lineno=42, col_offset=46)]), [Expr(Str("Read 'input', apply quoted-printable encoding, and write to 'output'.\n\n    'input' and 'output' are files with readline() and write() methods.\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    The 'header' flag indicates whether we are encoding spaces as _ as per\n    RFC 1522.\n    ", lineno=51, col_offset=-1), lineno=51, col_offset=-1), If(Compare(Name('b2a_qp', Load(), lineno=53, col_offset=7), [IsNot()], [Name('None', Load(), lineno=53, col_offset=21)], lineno=53, col_offset=7), [Assign([Name('data', Store(), lineno=54, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=54, col_offset=15), 'read', Load(), lineno=54, col_offset=15), [], [], None, None, lineno=54, col_offset=15), lineno=54, col_offset=8), Assign([Name('odata', Store(), lineno=55, col_offset=8)], Call(Name('b2a_qp', Load(), lineno=55, col_offset=16), [Name('data', Load(), lineno=55, col_offset=23)], [keyword('quotetabs', Name('quotetabs', Load(), lineno=55, col_offset=41)), keyword('header', Name('header', Load(), lineno=55, col_offset=61))], None, None, lineno=55, col_offset=16), lineno=55, col_offset=8), Expr(Call(Attribute(Name('output', Load(), lineno=56, col_offset=8), 'write', Load(), lineno=56, col_offset=8), [Name('odata', Load(), lineno=56, col_offset=21)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8), Return(None, lineno=57, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('write', arguments([Name('s', Param(), lineno=59, col_offset=14), Name('output', Param(), lineno=59, col_offset=17), Name('lineEnd', Param(), lineno=59, col_offset=32)], None, None, [Name('output', Load(), lineno=59, col_offset=24), Str('\n', lineno=59, col_offset=40)]), [If(BoolOp(And(), [Name('s', Load(), lineno=62, col_offset=11), Compare(Subscript(Name('s', Load(), lineno=62, col_offset=17), Slice(Num(-1, lineno=62, col_offset=20), None, None), Load(), lineno=62, col_offset=17), [In()], [Str(' \t', lineno=62, col_offset=27)], lineno=62, col_offset=17)], lineno=62, col_offset=11), [Expr(Call(Attribute(Name('output', Load(), lineno=63, col_offset=12), 'write', Load(), lineno=63, col_offset=12), [BinOp(BinOp(Subscript(Name('s', Load(), lineno=63, col_offset=25), Slice(None, Num(-1, lineno=63, col_offset=29), None), Load(), lineno=63, col_offset=25), Add(), Call(Name('quote', Load(), lineno=63, col_offset=34), [Subscript(Name('s', Load(), lineno=63, col_offset=40), Index(Num(-1, lineno=63, col_offset=43)), Load(), lineno=63, col_offset=40)], [], None, None, lineno=63, col_offset=34), lineno=63, col_offset=25), Add(), Name('lineEnd', Load(), lineno=63, col_offset=49), lineno=63, col_offset=47)], [], None, None, lineno=63, col_offset=12), lineno=63, col_offset=12)], [If(Compare(Name('s', Load(), lineno=64, col_offset=13), [Eq()], [Str('.', lineno=64, col_offset=18)], lineno=64, col_offset=13), [Expr(Call(Attribute(Name('output', Load(), lineno=65, col_offset=12), 'write', Load(), lineno=65, col_offset=12), [BinOp(Call(Name('quote', Load(), lineno=65, col_offset=25), [Name('s', Load(), lineno=65, col_offset=31)], [], None, None, lineno=65, col_offset=25), Add(), Name('lineEnd', Load(), lineno=65, col_offset=36), lineno=65, col_offset=25)], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], [Expr(Call(Attribute(Name('output', Load(), lineno=67, col_offset=12), 'write', Load(), lineno=67, col_offset=12), [BinOp(Name('s', Load(), lineno=67, col_offset=25), Add(), Name('lineEnd', Load(), lineno=67, col_offset=29), lineno=67, col_offset=25)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12)], lineno=64, col_offset=13)], lineno=62, col_offset=8)], [], lineno=59, col_offset=4), Assign([Name('prevline', Store(), lineno=69, col_offset=4)], Name('None', Load(), lineno=69, col_offset=15), lineno=69, col_offset=4), While(Num(1, lineno=70, col_offset=10), [Assign([Name('line', Store(), lineno=71, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=71, col_offset=15), 'readline', Load(), lineno=71, col_offset=15), [], [], None, None, lineno=71, col_offset=15), lineno=71, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=72, col_offset=15), lineno=72, col_offset=11), [Break( lineno=73, col_offset=12)], [], lineno=72, col_offset=8), Assign([Name('outline', Store(), lineno=74, col_offset=8)], List([], Load(), lineno=74, col_offset=18), lineno=74, col_offset=8), Assign([Name('stripped', Store(), lineno=76, col_offset=8)], Str('', lineno=76, col_offset=19), lineno=76, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=77, col_offset=11), Slice(Num(-1, lineno=77, col_offset=17), None, None), Load(), lineno=77, col_offset=11), [Eq()], [Str('\n', lineno=77, col_offset=24)], lineno=77, col_offset=11), [Assign([Name('line', Store(), lineno=78, col_offset=12)], Subscript(Name('line', Load(), lineno=78, col_offset=19), Slice(None, Num(-1, lineno=78, col_offset=26), None), Load(), lineno=78, col_offset=19), lineno=78, col_offset=12), Assign([Name('stripped', Store(), lineno=79, col_offset=12)], Str('\n', lineno=79, col_offset=23), lineno=79, col_offset=12)], [], lineno=77, col_offset=8), For(Name('c', Store(), lineno=81, col_offset=12), Name('line', Load(), lineno=81, col_offset=17), [If(Call(Name('needsquoting', Load(), lineno=82, col_offset=15), [Name('c', Load(), lineno=82, col_offset=28), Name('quotetabs', Load(), lineno=82, col_offset=31), Name('header', Load(), lineno=82, col_offset=42)], [], None, None, lineno=82, col_offset=15), [Assign([Name('c', Store(), lineno=83, col_offset=16)], Call(Name('quote', Load(), lineno=83, col_offset=20), [Name('c', Load(), lineno=83, col_offset=26)], [], None, None, lineno=83, col_offset=20), lineno=83, col_offset=16)], [], lineno=82, col_offset=12), If(BoolOp(And(), [Name('header', Load(), lineno=84, col_offset=15), Compare(Name('c', Load(), lineno=84, col_offset=26), [Eq()], [Str(' ', lineno=84, col_offset=31)], lineno=84, col_offset=26)], lineno=84, col_offset=15), [Expr(Call(Attribute(Name('outline', Load(), lineno=85, col_offset=16), 'append', Load(), lineno=85, col_offset=16), [Str('_', lineno=85, col_offset=31)], [], None, None, lineno=85, col_offset=16), lineno=85, col_offset=16)], [Expr(Call(Attribute(Name('outline', Load(), lineno=87, col_offset=16), 'append', Load(), lineno=87, col_offset=16), [Name('c', Load(), lineno=87, col_offset=31)], [], None, None, lineno=87, col_offset=16), lineno=87, col_offset=16)], lineno=84, col_offset=12)], [], lineno=81, col_offset=8), If(Compare(Name('prevline', Load(), lineno=89, col_offset=11), [IsNot()], [Name('None', Load(), lineno=89, col_offset=27)], lineno=89, col_offset=11), [Expr(Call(Name('write', Load(), lineno=90, col_offset=12), [Name('prevline', Load(), lineno=90, col_offset=18)], [], None, None, lineno=90, col_offset=12), lineno=90, col_offset=12)], [], lineno=89, col_offset=8), Assign([Name('thisline', Store(), lineno=93, col_offset=8)], Call(Attribute(Name('EMPTYSTRING', Load(), lineno=93, col_offset=19), 'join', Load(), lineno=93, col_offset=19), [Name('outline', Load(), lineno=93, col_offset=36)], [], None, None, lineno=93, col_offset=19), lineno=93, col_offset=8), While(Compare(Call(Name('len', Load(), lineno=94, col_offset=14), [Name('thisline', Load(), lineno=94, col_offset=18)], [], None, None, lineno=94, col_offset=14), [Gt()], [Name('MAXLINESIZE', Load(), lineno=94, col_offset=30)], lineno=94, col_offset=14), [Expr(Call(Name('write', Load(), lineno=97, col_offset=12), [Subscript(Name('thisline', Load(), lineno=97, col_offset=18), Slice(None, BinOp(Name('MAXLINESIZE', Load(), lineno=97, col_offset=28), Sub(), Num(1, lineno=97, col_offset=40), lineno=97, col_offset=28), None), Load(), lineno=97, col_offset=18)], [keyword('lineEnd', Str('=\n', lineno=97, col_offset=52))], None, None, lineno=97, col_offset=12), lineno=97, col_offset=12), Assign([Name('thisline', Store(), lineno=98, col_offset=12)], Subscript(Name('thisline', Load(), lineno=98, col_offset=23), Slice(BinOp(Name('MAXLINESIZE', Load(), lineno=98, col_offset=32), Sub(), Num(1, lineno=98, col_offset=44), lineno=98, col_offset=32), None, None), Load(), lineno=98, col_offset=23), lineno=98, col_offset=12)], [], lineno=94, col_offset=8), Assign([Name('prevline', Store(), lineno=100, col_offset=8)], Name('thisline', Load(), lineno=100, col_offset=19), lineno=100, col_offset=8)], [], lineno=70, col_offset=4), If(Compare(Name('prevline', Load(), lineno=102, col_offset=7), [IsNot()], [Name('None', Load(), lineno=102, col_offset=23)], lineno=102, col_offset=7), [Expr(Call(Name('write', Load(), lineno=103, col_offset=8), [Name('prevline', Load(), lineno=103, col_offset=14)], [keyword('lineEnd', Name('stripped', Load(), lineno=103, col_offset=32))], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8)], [], lineno=102, col_offset=4)], [], lineno=42, col_offset=0), FunctionDef('encodestring', arguments([Name('s', Param(), lineno=105, col_offset=17), Name('quotetabs', Param(), lineno=105, col_offset=20), Name('header', Param(), lineno=105, col_offset=35)], None, None, [Num(0, lineno=105, col_offset=32), Num(0, lineno=105, col_offset=44)]), [If(Compare(Name('b2a_qp', Load(), lineno=106, col_offset=7), [IsNot()], [Name('None', Load(), lineno=106, col_offset=21)], lineno=106, col_offset=7), [Return(Call(Name('b2a_qp', Load(), lineno=107, col_offset=15), [Name('s', Load(), lineno=107, col_offset=22)], [keyword('quotetabs', Name('quotetabs', Load(), lineno=107, col_offset=37)), keyword('header', Name('header', Load(), lineno=107, col_offset=57))], None, None, lineno=107, col_offset=15), lineno=107, col_offset=8)], [], lineno=106, col_offset=4), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=108, col_offset=4), Assign([Name('infp', Store(), lineno=109, col_offset=4)], Call(Name('StringIO', Load(), lineno=109, col_offset=11), [Name('s', Load(), lineno=109, col_offset=20)], [], None, None, lineno=109, col_offset=11), lineno=109, col_offset=4), Assign([Name('outfp', Store(), lineno=110, col_offset=4)], Call(Name('StringIO', Load(), lineno=110, col_offset=12), [], [], None, None, lineno=110, col_offset=12), lineno=110, col_offset=4), Expr(Call(Name('encode', Load(), lineno=111, col_offset=4), [Name('infp', Load(), lineno=111, col_offset=11), Name('outfp', Load(), lineno=111, col_offset=17), Name('quotetabs', Load(), lineno=111, col_offset=24), Name('header', Load(), lineno=111, col_offset=35)], [], None, None, lineno=111, col_offset=4), lineno=111, col_offset=4), Return(Call(Attribute(Name('outfp', Load(), lineno=112, col_offset=11), 'getvalue', Load(), lineno=112, col_offset=11), [], [], None, None, lineno=112, col_offset=11), lineno=112, col_offset=4)], [], lineno=105, col_offset=0), FunctionDef('decode', arguments([Name('input', Param(), lineno=116, col_offset=11), Name('output', Param(), lineno=116, col_offset=18), Name('header', Param(), lineno=116, col_offset=26)], None, None, [Num(0, lineno=116, col_offset=35)]), [Expr(Str("Read 'input', apply quoted-printable decoding, and write to 'output'.\n    'input' and 'output' are files with readline() and write() methods.\n    If 'header' is true, decode underscore as space (per RFC 1522).", lineno=119, col_offset=-1), lineno=119, col_offset=-1), If(Compare(Name('a2b_qp', Load(), lineno=121, col_offset=7), [IsNot()], [Name('None', Load(), lineno=121, col_offset=21)], lineno=121, col_offset=7), [Assign([Name('data', Store(), lineno=122, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=122, col_offset=15), 'read', Load(), lineno=122, col_offset=15), [], [], None, None, lineno=122, col_offset=15), lineno=122, col_offset=8), Assign([Name('odata', Store(), lineno=123, col_offset=8)], Call(Name('a2b_qp', Load(), lineno=123, col_offset=16), [Name('data', Load(), lineno=123, col_offset=23)], [keyword('header', Name('header', Load(), lineno=123, col_offset=38))], None, None, lineno=123, col_offset=16), lineno=123, col_offset=8), Expr(Call(Attribute(Name('output', Load(), lineno=124, col_offset=8), 'write', Load(), lineno=124, col_offset=8), [Name('odata', Load(), lineno=124, col_offset=21)], [], None, None, lineno=124, col_offset=8), lineno=124, col_offset=8), Return(None, lineno=125, col_offset=8)], [], lineno=121, col_offset=4), Assign([Name('new', Store(), lineno=127, col_offset=4)], Str('', lineno=127, col_offset=10), lineno=127, col_offset=4), While(Num(1, lineno=128, col_offset=10), [Assign([Name('line', Store(), lineno=129, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=129, col_offset=15), 'readline', Load(), lineno=129, col_offset=15), [], [], None, None, lineno=129, col_offset=15), lineno=129, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=130, col_offset=15), lineno=130, col_offset=11), [Break( lineno=130, col_offset=21)], [], lineno=130, col_offset=8), Assign([Tuple([Name('i', Store(), lineno=131, col_offset=8), Name('n', Store(), lineno=131, col_offset=11)], Store(), lineno=131, col_offset=8)], Tuple([Num(0, lineno=131, col_offset=15), Call(Name('len', Load(), lineno=131, col_offset=18), [Name('line', Load(), lineno=131, col_offset=22)], [], None, None, lineno=131, col_offset=18)], Load(), lineno=131, col_offset=15), lineno=131, col_offset=8), If(BoolOp(And(), [Compare(Name('n', Load(), lineno=132, col_offset=11), [Gt()], [Num(0, lineno=132, col_offset=15)], lineno=132, col_offset=11), Compare(Subscript(Name('line', Load(), lineno=132, col_offset=21), Index(BinOp(Name('n', Load(), lineno=132, col_offset=26), Sub(), Num(1, lineno=132, col_offset=28), lineno=132, col_offset=26)), Load(), lineno=132, col_offset=21), [Eq()], [Str('\n', lineno=132, col_offset=34)], lineno=132, col_offset=21)], lineno=132, col_offset=11), [Assign([Name('partial', Store(), lineno=133, col_offset=12)], Num(0, lineno=133, col_offset=22), lineno=133, col_offset=12), Assign([Name('n', Store(), lineno=133, col_offset=25)], BinOp(Name('n', Load(), lineno=133, col_offset=29), Sub(), Num(1, lineno=133, col_offset=31), lineno=133, col_offset=29), lineno=133, col_offset=25), While(BoolOp(And(), [Compare(Name('n', Load(), lineno=135, col_offset=18), [Gt()], [Num(0, lineno=135, col_offset=22)], lineno=135, col_offset=18), Compare(Subscript(Name('line', Load(), lineno=135, col_offset=28), Index(BinOp(Name('n', Load(), lineno=135, col_offset=33), Sub(), Num(1, lineno=135, col_offset=35), lineno=135, col_offset=33)), Load(), lineno=135, col_offset=28), [In()], [Str(' \t\r', lineno=135, col_offset=41)], lineno=135, col_offset=28)], lineno=135, col_offset=18), [Assign([Name('n', Store(), lineno=136, col_offset=16)], BinOp(Name('n', Load(), lineno=136, col_offset=20), Sub(), Num(1, lineno=136, col_offset=22), lineno=136, col_offset=20), lineno=136, col_offset=16)], [], lineno=135, col_offset=12)], [Assign([Name('partial', Store(), lineno=138, col_offset=12)], Num(1, lineno=138, col_offset=22), lineno=138, col_offset=12)], lineno=132, col_offset=8), While(Compare(Name('i', Load(), lineno=139, col_offset=14), [Lt()], [Name('n', Load(), lineno=139, col_offset=18)], lineno=139, col_offset=14), [Assign([Name('c', Store(), lineno=140, col_offset=12)], Subscript(Name('line', Load(), lineno=140, col_offset=16), Index(Name('i', Load(), lineno=140, col_offset=21)), Load(), lineno=140, col_offset=16), lineno=140, col_offset=12), If(BoolOp(And(), [Compare(Name('c', Load(), lineno=141, col_offset=15), [Eq()], [Str('_', lineno=141, col_offset=20)], lineno=141, col_offset=15), Name('header', Load(), lineno=141, col_offset=28)], lineno=141, col_offset=15), [Assign([Name('new', Store(), lineno=142, col_offset=16)], BinOp(Name('new', Load(), lineno=142, col_offset=22), Add(), Str(' ', lineno=142, col_offset=28), lineno=142, col_offset=22), lineno=142, col_offset=16), Assign([Name('i', Store(), lineno=142, col_offset=33)], BinOp(Name('i', Load(), lineno=142, col_offset=37), Add(), Num(1, lineno=142, col_offset=39), lineno=142, col_offset=37), lineno=142, col_offset=33)], [If(Compare(Name('c', Load(), lineno=143, col_offset=17), [NotEq()], [Name('ESCAPE', Load(), lineno=143, col_offset=22)], lineno=143, col_offset=17), [Assign([Name('new', Store(), lineno=144, col_offset=16)], BinOp(Name('new', Load(), lineno=144, col_offset=22), Add(), Name('c', Load(), lineno=144, col_offset=28), lineno=144, col_offset=22), lineno=144, col_offset=16), Assign([Name('i', Store(), lineno=144, col_offset=31)], BinOp(Name('i', Load(), lineno=144, col_offset=35), Add(), Num(1, lineno=144, col_offset=37), lineno=144, col_offset=35), lineno=144, col_offset=31)], [If(BoolOp(And(), [Compare(BinOp(Name('i', Load(), lineno=145, col_offset=17), Add(), Num(1, lineno=145, col_offset=19), lineno=145, col_offset=17), [Eq()], [Name('n', Load(), lineno=145, col_offset=24)], lineno=145, col_offset=17), UnaryOp(Not(), Name('partial', Load(), lineno=145, col_offset=34), lineno=145, col_offset=30)], lineno=145, col_offset=17), [Assign([Name('partial', Store(), lineno=146, col_offset=16)], Num(1, lineno=146, col_offset=26), lineno=146, col_offset=16), Break( lineno=146, col_offset=29)], [If(BoolOp(And(), [Compare(BinOp(Name('i', Load(), lineno=147, col_offset=17), Add(), Num(1, lineno=147, col_offset=19), lineno=147, col_offset=17), [Lt()], [Name('n', Load(), lineno=147, col_offset=23)], lineno=147, col_offset=17), Compare(Subscript(Name('line', Load(), lineno=147, col_offset=29), Index(BinOp(Name('i', Load(), lineno=147, col_offset=34), Add(), Num(1, lineno=147, col_offset=36), lineno=147, col_offset=34)), Load(), lineno=147, col_offset=29), [Eq()], [Name('ESCAPE', Load(), lineno=147, col_offset=42)], lineno=147, col_offset=29)], lineno=147, col_offset=17), [Assign([Name('new', Store(), lineno=148, col_offset=16)], BinOp(Name('new', Load(), lineno=148, col_offset=22), Add(), Name('ESCAPE', Load(), lineno=148, col_offset=28), lineno=148, col_offset=22), lineno=148, col_offset=16), Assign([Name('i', Store(), lineno=148, col_offset=36)], BinOp(Name('i', Load(), lineno=148, col_offset=40), Add(), Num(2, lineno=148, col_offset=42), lineno=148, col_offset=40), lineno=148, col_offset=36)], [If(BoolOp(And(), [Compare(BinOp(Name('i', Load(), lineno=149, col_offset=17), Add(), Num(2, lineno=149, col_offset=19), lineno=149, col_offset=17), [Lt()], [Name('n', Load(), lineno=149, col_offset=23)], lineno=149, col_offset=17), Call(Name('ishex', Load(), lineno=149, col_offset=29), [Subscript(Name('line', Load(), lineno=149, col_offset=35), Index(BinOp(Name('i', Load(), lineno=149, col_offset=40), Add(), Num(1, lineno=149, col_offset=42), lineno=149, col_offset=40)), Load(), lineno=149, col_offset=35)], [], None, None, lineno=149, col_offset=29), Call(Name('ishex', Load(), lineno=149, col_offset=50), [Subscript(Name('line', Load(), lineno=149, col_offset=56), Index(BinOp(Name('i', Load(), lineno=149, col_offset=61), Add(), Num(2, lineno=149, col_offset=63), lineno=149, col_offset=61)), Load(), lineno=149, col_offset=56)], [], None, None, lineno=149, col_offset=50)], lineno=149, col_offset=17), [Assign([Name('new', Store(), lineno=150, col_offset=16)], BinOp(Name('new', Load(), lineno=150, col_offset=22), Add(), Call(Name('chr', Load(), lineno=150, col_offset=28), [Call(Name('unhex', Load(), lineno=150, col_offset=32), [Subscript(Name('line', Load(), lineno=150, col_offset=38), Slice(BinOp(Name('i', Load(), lineno=150, col_offset=43), Add(), Num(1, lineno=150, col_offset=45), lineno=150, col_offset=43), BinOp(Name('i', Load(), lineno=150, col_offset=47), Add(), Num(3, lineno=150, col_offset=49), lineno=150, col_offset=47), None), Load(), lineno=150, col_offset=38)], [], None, None, lineno=150, col_offset=32)], [], None, None, lineno=150, col_offset=28), lineno=150, col_offset=22), lineno=150, col_offset=16), Assign([Name('i', Store(), lineno=150, col_offset=55)], BinOp(Name('i', Load(), lineno=150, col_offset=59), Add(), Num(3, lineno=150, col_offset=61), lineno=150, col_offset=59), lineno=150, col_offset=55)], [Assign([Name('new', Store(), lineno=152, col_offset=16)], BinOp(Name('new', Load(), lineno=152, col_offset=22), Add(), Name('c', Load(), lineno=152, col_offset=28), lineno=152, col_offset=22), lineno=152, col_offset=16), Assign([Name('i', Store(), lineno=152, col_offset=31)], BinOp(Name('i', Load(), lineno=152, col_offset=35), Add(), Num(1, lineno=152, col_offset=37), lineno=152, col_offset=35), lineno=152, col_offset=31)], lineno=149, col_offset=17)], lineno=147, col_offset=17)], lineno=145, col_offset=17)], lineno=143, col_offset=17)], lineno=141, col_offset=12)], [], lineno=139, col_offset=8), If(UnaryOp(Not(), Name('partial', Load(), lineno=153, col_offset=15), lineno=153, col_offset=11), [Expr(Call(Attribute(Name('output', Load(), lineno=154, col_offset=12), 'write', Load(), lineno=154, col_offset=12), [BinOp(Name('new', Load(), lineno=154, col_offset=25), Add(), Str('\n', lineno=154, col_offset=31), lineno=154, col_offset=25)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=12), Assign([Name('new', Store(), lineno=155, col_offset=12)], Str('', lineno=155, col_offset=18), lineno=155, col_offset=12)], [], lineno=153, col_offset=8)], [], lineno=128, col_offset=4), If(Name('new', Load(), lineno=156, col_offset=7), [Expr(Call(Attribute(Name('output', Load(), lineno=157, col_offset=8), 'write', Load(), lineno=157, col_offset=8), [Name('new', Load(), lineno=157, col_offset=21)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=156, col_offset=4)], [], lineno=116, col_offset=0), FunctionDef('decodestring', arguments([Name('s', Param(), lineno=159, col_offset=17), Name('header', Param(), lineno=159, col_offset=20)], None, None, [Num(0, lineno=159, col_offset=29)]), [If(Compare(Name('a2b_qp', Load(), lineno=160, col_offset=7), [IsNot()], [Name('None', Load(), lineno=160, col_offset=21)], lineno=160, col_offset=7), [Return(Call(Name('a2b_qp', Load(), lineno=161, col_offset=15), [Name('s', Load(), lineno=161, col_offset=22)], [keyword('header', Name('header', Load(), lineno=161, col_offset=34))], None, None, lineno=161, col_offset=15), lineno=161, col_offset=8)], [], lineno=160, col_offset=4), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=162, col_offset=4), Assign([Name('infp', Store(), lineno=163, col_offset=4)], Call(Name('StringIO', Load(), lineno=163, col_offset=11), [Name('s', Load(), lineno=163, col_offset=20)], [], None, None, lineno=163, col_offset=11), lineno=163, col_offset=4), Assign([Name('outfp', Store(), lineno=164, col_offset=4)], Call(Name('StringIO', Load(), lineno=164, col_offset=12), [], [], None, None, lineno=164, col_offset=12), lineno=164, col_offset=4), Expr(Call(Name('decode', Load(), lineno=165, col_offset=4), [Name('infp', Load(), lineno=165, col_offset=11), Name('outfp', Load(), lineno=165, col_offset=17)], [keyword('header', Name('header', Load(), lineno=165, col_offset=33))], None, None, lineno=165, col_offset=4), lineno=165, col_offset=4), Return(Call(Attribute(Name('outfp', Load(), lineno=166, col_offset=11), 'getvalue', Load(), lineno=166, col_offset=11), [], [], None, None, lineno=166, col_offset=11), lineno=166, col_offset=4)], [], lineno=159, col_offset=0), FunctionDef('ishex', arguments([Name('c', Param(), lineno=171, col_offset=10)], None, None, []), [Expr(Str("Return true if the character 'c' is a hexadecimal digit.", lineno=172, col_offset=4), lineno=172, col_offset=4), Return(BoolOp(Or(), [Compare(Str('0', lineno=173, col_offset=11), [LtE(), LtE()], [Name('c', Load(), lineno=173, col_offset=18), Str('9', lineno=173, col_offset=23)], lineno=173, col_offset=11), Compare(Str('a', lineno=173, col_offset=30), [LtE(), LtE()], [Name('c', Load(), lineno=173, col_offset=37), Str('f', lineno=173, col_offset=42)], lineno=173, col_offset=30), Compare(Str('A', lineno=173, col_offset=49), [LtE(), LtE()], [Name('c', Load(), lineno=173, col_offset=56), Str('F', lineno=173, col_offset=61)], lineno=173, col_offset=49)], lineno=173, col_offset=11), lineno=173, col_offset=4)], [], lineno=171, col_offset=0), FunctionDef('unhex', arguments([Name('s', Param(), lineno=175, col_offset=10)], None, None, []), [Expr(Str('Get the integer value of a hexadecimal number.', lineno=176, col_offset=4), lineno=176, col_offset=4), Assign([Name('bits', Store(), lineno=177, col_offset=4)], Num(0, lineno=177, col_offset=11), lineno=177, col_offset=4), For(Name('c', Store(), lineno=178, col_offset=8), Name('s', Load(), lineno=178, col_offset=13), [If(Compare(Str('0', lineno=179, col_offset=11), [LtE(), LtE()], [Name('c', Load(), lineno=179, col_offset=18), Str('9', lineno=179, col_offset=23)], lineno=179, col_offset=11), [Assign([Name('i', Store(), lineno=180, col_offset=12)], Call(Name('ord', Load(), lineno=180, col_offset=16), [Str('0', lineno=180, col_offset=20)], [], None, None, lineno=180, col_offset=16), lineno=180, col_offset=12)], [If(Compare(Str('a', lineno=181, col_offset=13), [LtE(), LtE()], [Name('c', Load(), lineno=181, col_offset=20), Str('f', lineno=181, col_offset=25)], lineno=181, col_offset=13), [Assign([Name('i', Store(), lineno=182, col_offset=12)], BinOp(Call(Name('ord', Load(), lineno=182, col_offset=16), [Str('a', lineno=182, col_offset=20)], [], None, None, lineno=182, col_offset=16), Sub(), Num(10, lineno=182, col_offset=25), lineno=182, col_offset=16), lineno=182, col_offset=12)], [If(Compare(Str('A', lineno=183, col_offset=13), [LtE(), LtE()], [Name('c', Load(), lineno=183, col_offset=20), Str('F', lineno=183, col_offset=25)], lineno=183, col_offset=13), [Assign([Name('i', Store(), lineno=184, col_offset=12)], BinOp(Call(Name('ord', Load(), lineno=184, col_offset=16), [Str('A', lineno=184, col_offset=20)], [], None, None, lineno=184, col_offset=16), Sub(), Num(10, lineno=184, col_offset=25), lineno=184, col_offset=16), lineno=184, col_offset=12)], [Break( lineno=186, col_offset=12)], lineno=183, col_offset=13)], lineno=181, col_offset=13)], lineno=179, col_offset=8), Assign([Name('bits', Store(), lineno=187, col_offset=8)], BinOp(BinOp(Name('bits', Load(), lineno=187, col_offset=15), Mult(), Num(16, lineno=187, col_offset=20), lineno=187, col_offset=15), Add(), BinOp(Call(Name('ord', Load(), lineno=187, col_offset=26), [Name('c', Load(), lineno=187, col_offset=30)], [], None, None, lineno=187, col_offset=26), Sub(), Name('i', Load(), lineno=187, col_offset=35), lineno=187, col_offset=26), lineno=187, col_offset=15), lineno=187, col_offset=8)], [], lineno=178, col_offset=4), Return(Name('bits', Load(), lineno=188, col_offset=11), lineno=188, col_offset=4)], [], lineno=175, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Import([alias('sys', None)], lineno=193, col_offset=4), Import([alias('getopt', None)], lineno=194, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=196, col_offset=8), Name('args', Store(), lineno=196, col_offset=14)], Store(), lineno=196, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=196, col_offset=21), 'getopt', Load(), lineno=196, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=196, col_offset=35), 'argv', Load(), lineno=196, col_offset=35), Slice(Num(1, lineno=196, col_offset=44), None, None), Load(), lineno=196, col_offset=35), Str('td', lineno=196, col_offset=49)], [], None, None, lineno=196, col_offset=21), lineno=196, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=197, col_offset=11), 'error', Load(), lineno=197, col_offset=11), Name('msg', Store(), lineno=197, col_offset=25), [Assign([Attribute(Name('sys', Load(), lineno=198, col_offset=8), 'stdout', Store(), lineno=198, col_offset=8)], Attribute(Name('sys', Load(), lineno=198, col_offset=21), 'stderr', Load(), lineno=198, col_offset=21), lineno=198, col_offset=8), Print(None, [Name('msg', Load(), lineno=199, col_offset=14)], True, lineno=199, col_offset=8), Print(None, [Str('usage: quopri [-t | -d] [file] ...', lineno=200, col_offset=14)], True, lineno=200, col_offset=8), Print(None, [Str('-t: quote tabs', lineno=201, col_offset=14)], True, lineno=201, col_offset=8), Print(None, [Str('-d: decode; default encode', lineno=202, col_offset=14)], True, lineno=202, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=203, col_offset=8), 'exit', Load(), lineno=203, col_offset=8), [Num(2, lineno=203, col_offset=17)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8)], lineno=197, col_offset=4)], [], lineno=195, col_offset=4), Assign([Name('deco', Store(), lineno=204, col_offset=4)], Num(0, lineno=204, col_offset=11), lineno=204, col_offset=4), Assign([Name('tabs', Store(), lineno=205, col_offset=4)], Num(0, lineno=205, col_offset=11), lineno=205, col_offset=4), For(Tuple([Name('o', Store(), lineno=206, col_offset=8), Name('a', Store(), lineno=206, col_offset=11)], Store(), lineno=206, col_offset=8), Name('opts', Load(), lineno=206, col_offset=16), [If(Compare(Name('o', Load(), lineno=207, col_offset=11), [Eq()], [Str('-t', lineno=207, col_offset=16)], lineno=207, col_offset=11), [Assign([Name('tabs', Store(), lineno=207, col_offset=22)], Num(1, lineno=207, col_offset=29), lineno=207, col_offset=22)], [], lineno=207, col_offset=8), If(Compare(Name('o', Load(), lineno=208, col_offset=11), [Eq()], [Str('-d', lineno=208, col_offset=16)], lineno=208, col_offset=11), [Assign([Name('deco', Store(), lineno=208, col_offset=22)], Num(1, lineno=208, col_offset=29), lineno=208, col_offset=22)], [], lineno=208, col_offset=8)], [], lineno=206, col_offset=4), If(BoolOp(And(), [Name('tabs', Load(), lineno=209, col_offset=7), Name('deco', Load(), lineno=209, col_offset=16)], lineno=209, col_offset=7), [Assign([Attribute(Name('sys', Load(), lineno=210, col_offset=8), 'stdout', Store(), lineno=210, col_offset=8)], Attribute(Name('sys', Load(), lineno=210, col_offset=21), 'stderr', Load(), lineno=210, col_offset=21), lineno=210, col_offset=8), Print(None, [Str('-t and -d are mutually exclusive', lineno=211, col_offset=14)], True, lineno=211, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=212, col_offset=8), 'exit', Load(), lineno=212, col_offset=8), [Num(2, lineno=212, col_offset=17)], [], None, None, lineno=212, col_offset=8), lineno=212, col_offset=8)], [], lineno=209, col_offset=4), If(UnaryOp(Not(), Name('args', Load(), lineno=213, col_offset=11), lineno=213, col_offset=7), [Assign([Name('args', Store(), lineno=213, col_offset=17)], List([Str('-', lineno=213, col_offset=25)], Load(), lineno=213, col_offset=24), lineno=213, col_offset=17)], [], lineno=213, col_offset=4), Assign([Name('sts', Store(), lineno=214, col_offset=4)], Num(0, lineno=214, col_offset=10), lineno=214, col_offset=4), For(Name('file', Store(), lineno=215, col_offset=8), Name('args', Load(), lineno=215, col_offset=16), [If(Compare(Name('file', Load(), lineno=216, col_offset=11), [Eq()], [Str('-', lineno=216, col_offset=19)], lineno=216, col_offset=11), [Assign([Name('fp', Store(), lineno=217, col_offset=12)], Attribute(Name('sys', Load(), lineno=217, col_offset=17), 'stdin', Load(), lineno=217, col_offset=17), lineno=217, col_offset=12)], [TryExcept([Assign([Name('fp', Store(), lineno=220, col_offset=16)], Call(Name('open', Load(), lineno=220, col_offset=21), [Name('file', Load(), lineno=220, col_offset=26)], [], None, None, lineno=220, col_offset=21), lineno=220, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=221, col_offset=19), Name('msg', Store(), lineno=221, col_offset=28), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=222, col_offset=16), 'stderr', Load(), lineno=222, col_offset=16), 'write', Load(), lineno=222, col_offset=16), [BinOp(Str("%s: can't open (%s)\n", lineno=222, col_offset=33), Mod(), Tuple([Name('file', Load(), lineno=222, col_offset=60), Name('msg', Load(), lineno=222, col_offset=66)], Load(), lineno=222, col_offset=60), lineno=222, col_offset=33)], [], None, None, lineno=222, col_offset=16), lineno=222, col_offset=16), Assign([Name('sts', Store(), lineno=223, col_offset=16)], Num(1, lineno=223, col_offset=22), lineno=223, col_offset=16), Continue( lineno=224, col_offset=16)], lineno=221, col_offset=12)], [], lineno=219, col_offset=12)], lineno=216, col_offset=8), If(Name('deco', Load(), lineno=225, col_offset=11), [Expr(Call(Name('decode', Load(), lineno=226, col_offset=12), [Name('fp', Load(), lineno=226, col_offset=19), Attribute(Name('sys', Load(), lineno=226, col_offset=23), 'stdout', Load(), lineno=226, col_offset=23)], [], None, None, lineno=226, col_offset=12), lineno=226, col_offset=12)], [Expr(Call(Name('encode', Load(), lineno=228, col_offset=12), [Name('fp', Load(), lineno=228, col_offset=19), Attribute(Name('sys', Load(), lineno=228, col_offset=23), 'stdout', Load(), lineno=228, col_offset=23), Name('tabs', Load(), lineno=228, col_offset=35)], [], None, None, lineno=228, col_offset=12), lineno=228, col_offset=12)], lineno=225, col_offset=8), If(Compare(Name('fp', Load(), lineno=229, col_offset=11), [IsNot()], [Attribute(Name('sys', Load(), lineno=229, col_offset=21), 'stdin', Load(), lineno=229, col_offset=21)], lineno=229, col_offset=11), [Expr(Call(Attribute(Name('fp', Load(), lineno=230, col_offset=12), 'close', Load(), lineno=230, col_offset=12), [], [], None, None, lineno=230, col_offset=12), lineno=230, col_offset=12)], [], lineno=229, col_offset=8)], [], lineno=215, col_offset=4), If(Name('sts', Load(), lineno=231, col_offset=7), [Expr(Call(Attribute(Name('sys', Load(), lineno=232, col_offset=8), 'exit', Load(), lineno=232, col_offset=8), [Name('sts', Load(), lineno=232, col_offset=17)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=8)], [], lineno=231, col_offset=4)], [], lineno=192, col_offset=0), If(Compare(Name('__name__', Load(), lineno=236, col_offset=3), [Eq()], [Str('__main__', lineno=236, col_offset=15)], lineno=236, col_offset=3), [Expr(Call(Name('main', Load(), lineno=237, col_offset=4), [], [], None, None, lineno=237, col_offset=4), lineno=237, col_offset=4)], [], lineno=236, col_offset=0)])
