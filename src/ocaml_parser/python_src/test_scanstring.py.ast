Module([Import([alias('sys', None)], lineno=1, col_offset=0), Import([alias('decimal', None)], lineno=2, col_offset=0), ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=3, col_offset=0), Import([alias('json', None)], lineno=5, col_offset=0), Import([alias('json.decoder', None)], lineno=6, col_offset=0), ClassDef('TestScanString', [Name('TestCase', Load(), lineno=8, col_offset=21)], [FunctionDef('test_py_scanstring', arguments([Name('self', Param(), lineno=9, col_offset=27)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=10, col_offset=8), '_test_scanstring', Load(), lineno=10, col_offset=8), [Attribute(Attribute(Name('json', Load(), lineno=10, col_offset=30), 'decoder', Load(), lineno=10, col_offset=30), 'py_scanstring', Load(), lineno=10, col_offset=30)], [], None, None, lineno=10, col_offset=8), lineno=10, col_offset=8)], [], lineno=9, col_offset=4), FunctionDef('test_c_scanstring', arguments([Name('self', Param(), lineno=12, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=13, col_offset=8), '_test_scanstring', Load(), lineno=13, col_offset=8), [Attribute(Attribute(Name('json', Load(), lineno=13, col_offset=30), 'decoder', Load(), lineno=13, col_offset=30), 'c_scanstring', Load(), lineno=13, col_offset=30)], [], None, None, lineno=13, col_offset=8), lineno=13, col_offset=8)], [], lineno=12, col_offset=4), FunctionDef('_test_scanstring', arguments([Name('self', Param(), lineno=15, col_offset=25), Name('scanstring', Param(), lineno=15, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=8), 'assertEqual', Load(), lineno=16, col_offset=8), [Call(Name('scanstring', Load(), lineno=17, col_offset=12), [Str('"z\\ud834\\udd20x"', lineno=17, col_offset=23), Num(1, lineno=17, col_offset=45), Name('None', Load(), lineno=17, col_offset=48), Name('True', Load(), lineno=17, col_offset=54)], [], None, None, lineno=17, col_offset=12), Tuple([Str(u'z\U0001d120x', lineno=18, col_offset=13), Num(16, lineno=18, col_offset=30)], Load(), lineno=18, col_offset=13)], [], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=20, col_offset=11), 'maxunicode', Load(), lineno=20, col_offset=11), [Eq()], [Num(65535, lineno=20, col_offset=29)], lineno=20, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=21, col_offset=12), 'assertEqual', Load(), lineno=21, col_offset=12), [Call(Name('scanstring', Load(), lineno=22, col_offset=16), [Str(u'"z\U0001d120x"', lineno=22, col_offset=27), Num(1, lineno=22, col_offset=46), Name('None', Load(), lineno=22, col_offset=49), Name('True', Load(), lineno=22, col_offset=55)], [], None, None, lineno=22, col_offset=16), Tuple([Str(u'z\U0001d120x', lineno=23, col_offset=17), Num(6, lineno=23, col_offset=34)], Load(), lineno=23, col_offset=17)], [], None, None, lineno=21, col_offset=12), lineno=21, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=25, col_offset=12), 'assertEqual', Load(), lineno=25, col_offset=12), [Call(Name('scanstring', Load(), lineno=26, col_offset=16), [Str(u'"z\U0001d120x"', lineno=26, col_offset=27), Num(1, lineno=26, col_offset=46), Name('None', Load(), lineno=26, col_offset=49), Name('True', Load(), lineno=26, col_offset=55)], [], None, None, lineno=26, col_offset=16), Tuple([Str(u'z\U0001d120x', lineno=27, col_offset=17), Num(5, lineno=27, col_offset=34)], Load(), lineno=27, col_offset=17)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=12)], lineno=20, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=8), 'assertEqual', Load(), lineno=29, col_offset=8), [Call(Name('scanstring', Load(), lineno=30, col_offset=12), [Str('"\\u007b"', lineno=30, col_offset=23), Num(1, lineno=30, col_offset=36), Name('None', Load(), lineno=30, col_offset=39), Name('True', Load(), lineno=30, col_offset=45)], [], None, None, lineno=30, col_offset=12), Tuple([Str(u'{', lineno=31, col_offset=13), Num(8, lineno=31, col_offset=19)], Load(), lineno=31, col_offset=13)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=8), 'assertEqual', Load(), lineno=33, col_offset=8), [Call(Name('scanstring', Load(), lineno=34, col_offset=12), [Str('"A JSON payload should be an object or array, not a string."', lineno=34, col_offset=23), Num(1, lineno=34, col_offset=87), Name('None', Load(), lineno=34, col_offset=90), Name('True', Load(), lineno=34, col_offset=96)], [], None, None, lineno=34, col_offset=12), Tuple([Str(u'A JSON payload should be an object or array, not a string.', lineno=35, col_offset=13), Num(60, lineno=35, col_offset=76)], Load(), lineno=35, col_offset=13)], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=8), 'assertEqual', Load(), lineno=37, col_offset=8), [Call(Name('scanstring', Load(), lineno=38, col_offset=12), [Str('["Unclosed array"', lineno=38, col_offset=23), Num(2, lineno=38, col_offset=44), Name('None', Load(), lineno=38, col_offset=47), Name('True', Load(), lineno=38, col_offset=53)], [], None, None, lineno=38, col_offset=12), Tuple([Str(u'Unclosed array', lineno=39, col_offset=13), Num(17, lineno=39, col_offset=32)], Load(), lineno=39, col_offset=13)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=41, col_offset=8), 'assertEqual', Load(), lineno=41, col_offset=8), [Call(Name('scanstring', Load(), lineno=42, col_offset=12), [Str('["extra comma",]', lineno=42, col_offset=23), Num(2, lineno=42, col_offset=43), Name('None', Load(), lineno=42, col_offset=46), Name('True', Load(), lineno=42, col_offset=52)], [], None, None, lineno=42, col_offset=12), Tuple([Str(u'extra comma', lineno=43, col_offset=13), Num(14, lineno=43, col_offset=29)], Load(), lineno=43, col_offset=13)], [], None, None, lineno=41, col_offset=8), lineno=41, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=45, col_offset=8), 'assertEqual', Load(), lineno=45, col_offset=8), [Call(Name('scanstring', Load(), lineno=46, col_offset=12), [Str('["double extra comma",,]', lineno=46, col_offset=23), Num(2, lineno=46, col_offset=51), Name('None', Load(), lineno=46, col_offset=54), Name('True', Load(), lineno=46, col_offset=60)], [], None, None, lineno=46, col_offset=12), Tuple([Str(u'double extra comma', lineno=47, col_offset=13), Num(21, lineno=47, col_offset=36)], Load(), lineno=47, col_offset=13)], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=8), 'assertEqual', Load(), lineno=49, col_offset=8), [Call(Name('scanstring', Load(), lineno=50, col_offset=12), [Str('["Comma after the close"],', lineno=50, col_offset=23), Num(2, lineno=50, col_offset=53), Name('None', Load(), lineno=50, col_offset=56), Name('True', Load(), lineno=50, col_offset=62)], [], None, None, lineno=50, col_offset=12), Tuple([Str(u'Comma after the close', lineno=51, col_offset=13), Num(24, lineno=51, col_offset=39)], Load(), lineno=51, col_offset=13)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'assertEqual', Load(), lineno=53, col_offset=8), [Call(Name('scanstring', Load(), lineno=54, col_offset=12), [Str('["Extra close"]]', lineno=54, col_offset=23), Num(2, lineno=54, col_offset=43), Name('None', Load(), lineno=54, col_offset=46), Name('True', Load(), lineno=54, col_offset=52)], [], None, None, lineno=54, col_offset=12), Tuple([Str(u'Extra close', lineno=55, col_offset=13), Num(14, lineno=55, col_offset=29)], Load(), lineno=55, col_offset=13)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=57, col_offset=8), 'assertEqual', Load(), lineno=57, col_offset=8), [Call(Name('scanstring', Load(), lineno=58, col_offset=12), [Str('{"Extra comma": true,}', lineno=58, col_offset=23), Num(2, lineno=58, col_offset=49), Name('None', Load(), lineno=58, col_offset=52), Name('True', Load(), lineno=58, col_offset=58)], [], None, None, lineno=58, col_offset=12), Tuple([Str(u'Extra comma', lineno=59, col_offset=13), Num(14, lineno=59, col_offset=29)], Load(), lineno=59, col_offset=13)], [], None, None, lineno=57, col_offset=8), lineno=57, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertEqual', Load(), lineno=61, col_offset=8), [Call(Name('scanstring', Load(), lineno=62, col_offset=12), [Str('{"Extra value after close": true} "misplaced quoted value"', lineno=62, col_offset=23), Num(2, lineno=62, col_offset=85), Name('None', Load(), lineno=62, col_offset=88), Name('True', Load(), lineno=62, col_offset=94)], [], None, None, lineno=62, col_offset=12), Tuple([Str(u'Extra value after close', lineno=63, col_offset=13), Num(26, lineno=63, col_offset=41)], Load(), lineno=63, col_offset=13)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=8), 'assertEqual', Load(), lineno=65, col_offset=8), [Call(Name('scanstring', Load(), lineno=66, col_offset=12), [Str('{"Illegal expression": 1 + 2}', lineno=66, col_offset=23), Num(2, lineno=66, col_offset=56), Name('None', Load(), lineno=66, col_offset=59), Name('True', Load(), lineno=66, col_offset=65)], [], None, None, lineno=66, col_offset=12), Tuple([Str(u'Illegal expression', lineno=67, col_offset=13), Num(21, lineno=67, col_offset=36)], Load(), lineno=67, col_offset=13)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=69, col_offset=8), 'assertEqual', Load(), lineno=69, col_offset=8), [Call(Name('scanstring', Load(), lineno=70, col_offset=12), [Str('{"Illegal invocation": alert()}', lineno=70, col_offset=23), Num(2, lineno=70, col_offset=58), Name('None', Load(), lineno=70, col_offset=61), Name('True', Load(), lineno=70, col_offset=67)], [], None, None, lineno=70, col_offset=12), Tuple([Str(u'Illegal invocation', lineno=71, col_offset=13), Num(21, lineno=71, col_offset=36)], Load(), lineno=71, col_offset=13)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=8), 'assertEqual', Load(), lineno=73, col_offset=8), [Call(Name('scanstring', Load(), lineno=74, col_offset=12), [Str('{"Numbers cannot have leading zeroes": 013}', lineno=74, col_offset=23), Num(2, lineno=74, col_offset=70), Name('None', Load(), lineno=74, col_offset=73), Name('True', Load(), lineno=74, col_offset=79)], [], None, None, lineno=74, col_offset=12), Tuple([Str(u'Numbers cannot have leading zeroes', lineno=75, col_offset=13), Num(37, lineno=75, col_offset=52)], Load(), lineno=75, col_offset=13)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=8), 'assertEqual', Load(), lineno=77, col_offset=8), [Call(Name('scanstring', Load(), lineno=78, col_offset=12), [Str('{"Numbers cannot be hex": 0x14}', lineno=78, col_offset=23), Num(2, lineno=78, col_offset=58), Name('None', Load(), lineno=78, col_offset=61), Name('True', Load(), lineno=78, col_offset=67)], [], None, None, lineno=78, col_offset=12), Tuple([Str(u'Numbers cannot be hex', lineno=79, col_offset=13), Num(24, lineno=79, col_offset=39)], Load(), lineno=79, col_offset=13)], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'assertEqual', Load(), lineno=81, col_offset=8), [Call(Name('scanstring', Load(), lineno=82, col_offset=12), [Str('[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]', lineno=82, col_offset=23), Num(21, lineno=82, col_offset=77), Name('None', Load(), lineno=82, col_offset=81), Name('True', Load(), lineno=82, col_offset=87)], [], None, None, lineno=82, col_offset=12), Tuple([Str(u'Too deep', lineno=83, col_offset=13), Num(30, lineno=83, col_offset=26)], Load(), lineno=83, col_offset=13)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=8), 'assertEqual', Load(), lineno=85, col_offset=8), [Call(Name('scanstring', Load(), lineno=86, col_offset=12), [Str('{"Missing colon" null}', lineno=86, col_offset=23), Num(2, lineno=86, col_offset=49), Name('None', Load(), lineno=86, col_offset=52), Name('True', Load(), lineno=86, col_offset=58)], [], None, None, lineno=86, col_offset=12), Tuple([Str(u'Missing colon', lineno=87, col_offset=13), Num(16, lineno=87, col_offset=31)], Load(), lineno=87, col_offset=13)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=8), 'assertEqual', Load(), lineno=89, col_offset=8), [Call(Name('scanstring', Load(), lineno=90, col_offset=12), [Str('{"Double colon":: null}', lineno=90, col_offset=23), Num(2, lineno=90, col_offset=50), Name('None', Load(), lineno=90, col_offset=53), Name('True', Load(), lineno=90, col_offset=59)], [], None, None, lineno=90, col_offset=12), Tuple([Str(u'Double colon', lineno=91, col_offset=13), Num(15, lineno=91, col_offset=30)], Load(), lineno=91, col_offset=13)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=93, col_offset=8), 'assertEqual', Load(), lineno=93, col_offset=8), [Call(Name('scanstring', Load(), lineno=94, col_offset=12), [Str('{"Comma instead of colon", null}', lineno=94, col_offset=23), Num(2, lineno=94, col_offset=59), Name('None', Load(), lineno=94, col_offset=62), Name('True', Load(), lineno=94, col_offset=68)], [], None, None, lineno=94, col_offset=12), Tuple([Str(u'Comma instead of colon', lineno=95, col_offset=13), Num(25, lineno=95, col_offset=40)], Load(), lineno=95, col_offset=13)], [], None, None, lineno=93, col_offset=8), lineno=93, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'assertEqual', Load(), lineno=97, col_offset=8), [Call(Name('scanstring', Load(), lineno=98, col_offset=12), [Str('["Colon instead of comma": false]', lineno=98, col_offset=23), Num(2, lineno=98, col_offset=60), Name('None', Load(), lineno=98, col_offset=63), Name('True', Load(), lineno=98, col_offset=69)], [], None, None, lineno=98, col_offset=12), Tuple([Str(u'Colon instead of comma', lineno=99, col_offset=13), Num(25, lineno=99, col_offset=40)], Load(), lineno=99, col_offset=13)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=8), 'assertEqual', Load(), lineno=101, col_offset=8), [Call(Name('scanstring', Load(), lineno=102, col_offset=12), [Str('["Bad value", truth]', lineno=102, col_offset=23), Num(2, lineno=102, col_offset=47), Name('None', Load(), lineno=102, col_offset=50), Name('True', Load(), lineno=102, col_offset=56)], [], None, None, lineno=102, col_offset=12), Tuple([Str(u'Bad value', lineno=103, col_offset=13), Num(12, lineno=103, col_offset=27)], Load(), lineno=103, col_offset=13)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8)], [], lineno=15, col_offset=4), FunctionDef('test_issue3623', arguments([Name('self', Param(), lineno=105, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=8), 'assertRaises', Load(), lineno=106, col_offset=8), [Name('ValueError', Load(), lineno=106, col_offset=26), Attribute(Attribute(Name('json', Load(), lineno=106, col_offset=38), 'decoder', Load(), lineno=106, col_offset=38), 'scanstring', Load(), lineno=106, col_offset=38), Str('xxx', lineno=106, col_offset=63), Num(1, lineno=106, col_offset=71), Str('xxx', lineno=107, col_offset=26)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'assertRaises', Load(), lineno=108, col_offset=8), [Name('UnicodeDecodeError', Load(), lineno=108, col_offset=26), Attribute(Attribute(Name('json', Load(), lineno=109, col_offset=26), 'encoder', Load(), lineno=109, col_offset=26), 'encode_basestring_ascii', Load(), lineno=109, col_offset=26), Str('xx\xff', lineno=109, col_offset=64)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('test_overflow', arguments([Name('self', Param(), lineno=111, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=8), 'assertRaises', Load(), lineno=112, col_offset=8), [Name('OverflowError', Load(), lineno=112, col_offset=26), Attribute(Attribute(Name('json', Load(), lineno=112, col_offset=41), 'decoder', Load(), lineno=112, col_offset=41), 'scanstring', Load(), lineno=112, col_offset=41), Str('xxx', lineno=112, col_offset=66), BinOp(Attribute(Name('sys', Load(), lineno=112, col_offset=74), 'maxsize', Load(), lineno=112, col_offset=74), Add(), Num(1, lineno=112, col_offset=86), lineno=112, col_offset=74)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8)], [], lineno=111, col_offset=4)], [], lineno=8, col_offset=0)])
