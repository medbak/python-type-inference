Module([Expr(Str("Test file for syntax highlighting of editors.\n\nMeant to cover a wide range of different types of statements and expressions.\nNot necessarily sensical or comprehensive (assume that if one exception is\nhighlighted that all are, for instance).\n\nExtraneous trailing whitespace can't be tested because of svn pre-commit hook\nchecks for such things.\n\n", lineno=10, col_offset=-1), lineno=10, col_offset=-1), ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=15, col_offset=0), ImportFrom('sys', [alias('path', 'thing')], 0, lineno=16, col_offset=0), Assert(Name('True', Load(), lineno=17, col_offset=7), None, lineno=17, col_offset=0), FunctionDef('foo', arguments([], None, None, []), [Return(List([], Load(), lineno=19, col_offset=11), lineno=19, col_offset=4)], [], lineno=18, col_offset=0), ClassDef('Bar', [Name('object', Load(), lineno=20, col_offset=10)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=21, col_offset=18)], None, None, []), [Pass( lineno=22, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=23, col_offset=17)], 'args', None, []), [Pass( lineno=24, col_offset=8)], [], lineno=23, col_offset=4)], [], lineno=20, col_offset=0), Expr(Call(Name('foo', Load(), lineno=25, col_offset=0), [], [], None, None, lineno=25, col_offset=0), lineno=25, col_offset=0), While(Name('False', Load(), lineno=26, col_offset=6), [Continue( lineno=27, col_offset=4)], [], lineno=26, col_offset=0), For(Name('x', Store(), lineno=28, col_offset=4), Call(Name('foo', Load(), lineno=28, col_offset=9), [], [], None, None, lineno=28, col_offset=9), [Break( lineno=29, col_offset=4)], [], lineno=28, col_offset=0), With(Call(Name('Bar', Load(), lineno=30, col_offset=5), [], [], None, None, lineno=30, col_offset=5), Name('stuff', Store(), lineno=30, col_offset=14), [Pass( lineno=31, col_offset=4)], lineno=30, col_offset=5), If(Name('False', Load(), lineno=32, col_offset=3), [Pass( lineno=32, col_offset=10)], [If(Name('False', Load(), lineno=33, col_offset=5), [Pass( lineno=33, col_offset=12)], [Pass( lineno=34, col_offset=6)], lineno=33, col_offset=5)], lineno=32, col_offset=0), Expr(Tuple([Str('single-quote', lineno=37, col_offset=0), Str(u'unicode', lineno=37, col_offset=16)], Load(), lineno=37, col_offset=0), lineno=37, col_offset=0), Expr(Str('double-quote', lineno=38, col_offset=0), lineno=38, col_offset=0), Expr(Str('triple double-quote', lineno=39, col_offset=0), lineno=39, col_offset=0), Expr(Str('triple single-quote', lineno=40, col_offset=0), lineno=40, col_offset=0), Expr(Str('raw', lineno=41, col_offset=0), lineno=41, col_offset=0), Expr(Str(u'unicode raw', lineno=42, col_offset=0), lineno=42, col_offset=0), Expr(Str('escape\n', lineno=43, col_offset=0), lineno=43, col_offset=0), Expr(Str('\x04', lineno=44, col_offset=0), lineno=44, col_offset=0), Expr(Str('\xff', lineno=45, col_offset=0), lineno=45, col_offset=0), Expr(Str('\\u1111', lineno=46, col_offset=0), lineno=46, col_offset=0), Expr(Num(1, lineno=47, col_offset=0), lineno=47, col_offset=0), Expr(Num(1L, lineno=48, col_offset=0), lineno=48, col_offset=0), Expr(Num(1.0, lineno=49, col_offset=0), lineno=49, col_offset=0), Expr(Num(0.1, lineno=50, col_offset=0), lineno=50, col_offset=0), Expr(BinOp(Num(1, lineno=51, col_offset=0), Add(), Num(2j, lineno=51, col_offset=2), lineno=51, col_offset=0), lineno=51, col_offset=0), Expr(BoolOp(Or(), [BoolOp(And(), [Num(1, lineno=54, col_offset=0), Num(2, lineno=54, col_offset=6)], lineno=54, col_offset=0), Num(3, lineno=54, col_offset=11)], lineno=54, col_offset=0), lineno=54, col_offset=0), Expr(Compare(Num(2, lineno=55, col_offset=0), [Lt()], [Num(3, lineno=55, col_offset=4)], lineno=55, col_offset=0), lineno=55, col_offset=0), Assign([Name('spam', Store(), lineno=56, col_offset=0)], Num(42, lineno=56, col_offset=7), lineno=56, col_offset=0), Expr(BinOp(Num(2, lineno=57, col_offset=0), Add(), Num(3, lineno=57, col_offset=4), lineno=57, col_offset=0), lineno=57, col_offset=0), Expr(List([], Load(), lineno=58, col_offset=0), lineno=58, col_offset=0), Expr(Dict([], [], lineno=59, col_offset=0), lineno=59, col_offset=0), Expr(Tuple([Num(1, lineno=60, col_offset=1)], Load(), lineno=60, col_offset=1), lineno=60, col_offset=0), Expr(Name('all', Load(), lineno=61, col_offset=0), lineno=61, col_offset=0), Expr(Name('GeneratorExit', Load(), lineno=62, col_offset=0), lineno=62, col_offset=0)])
