Module([Import([alias('sys', None)], lineno=3, col_offset=0), ImportFrom('bgenlocations', [alias('TOOLBOXDIR', None), alias('BGENDIR', None)], 0, lineno=4, col_offset=0), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=5, col_offset=0), 'path', Load(), lineno=5, col_offset=0), 'append', Load(), lineno=5, col_offset=0), [Name('BGENDIR', Load(), lineno=5, col_offset=16)], [], None, None, lineno=5, col_offset=0), lineno=5, col_offset=0), ImportFrom('scantools', [alias('Scanner', None)], 0, lineno=6, col_offset=0), Assign([Name('LONG', Store(), lineno=8, col_offset=0)], Str('Fonts', lineno=8, col_offset=7), lineno=8, col_offset=0), Assign([Name('SHORT', Store(), lineno=9, col_offset=0)], Str('fm', lineno=9, col_offset=8), lineno=9, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Assign([Name('input', Store(), lineno=12, col_offset=4)], Str('Fonts.h', lineno=12, col_offset=12), lineno=12, col_offset=4), Assign([Name('output', Store(), lineno=13, col_offset=4)], BinOp(Name('SHORT', Load(), lineno=13, col_offset=13), Add(), Str('gen.py', lineno=13, col_offset=21), lineno=13, col_offset=13), lineno=13, col_offset=4), Assign([Name('defsoutput', Store(), lineno=14, col_offset=4)], BinOp(BinOp(Name('TOOLBOXDIR', Load(), lineno=14, col_offset=17), Add(), Name('LONG', Load(), lineno=14, col_offset=30), lineno=14, col_offset=17), Add(), Str('.py', lineno=14, col_offset=37), lineno=14, col_offset=35), lineno=14, col_offset=4), Assign([Name('scanner', Store(), lineno=15, col_offset=4)], Call(Name('MyScanner', Load(), lineno=15, col_offset=14), [Name('input', Load(), lineno=15, col_offset=24), Name('output', Load(), lineno=15, col_offset=31), Name('defsoutput', Load(), lineno=15, col_offset=39)], [], None, None, lineno=15, col_offset=14), lineno=15, col_offset=4), Expr(Call(Attribute(Name('scanner', Load(), lineno=16, col_offset=4), 'scan', Load(), lineno=16, col_offset=4), [], [], None, None, lineno=16, col_offset=4), lineno=16, col_offset=4), Expr(Call(Attribute(Name('scanner', Load(), lineno=17, col_offset=4), 'close', Load(), lineno=17, col_offset=4), [], [], None, None, lineno=17, col_offset=4), lineno=17, col_offset=4), Print(None, [Str('=== Testing definitions output code ===', lineno=18, col_offset=10)], True, lineno=18, col_offset=4), Expr(Call(Name('execfile', Load(), lineno=19, col_offset=4), [Name('defsoutput', Load(), lineno=19, col_offset=13), Dict([], [], lineno=19, col_offset=25), Dict([], [], lineno=19, col_offset=29)], [], None, None, lineno=19, col_offset=4), lineno=19, col_offset=4), Print(None, [Str('=== Done scanning and generating, now importing the generated code... ===', lineno=20, col_offset=10)], True, lineno=20, col_offset=4), Exec(BinOp(BinOp(Str('import ', lineno=21, col_offset=9), Add(), Name('SHORT', Load(), lineno=21, col_offset=21), lineno=21, col_offset=9), Add(), Str('support', lineno=21, col_offset=29), lineno=21, col_offset=27), None, None, lineno=21, col_offset=4), Print(None, [Str("=== Done.  It's up to you to compile it now! ===", lineno=22, col_offset=10)], True, lineno=22, col_offset=4)], [], lineno=11, col_offset=0), ClassDef('MyScanner', [Name('Scanner', Load(), lineno=24, col_offset=16)], [FunctionDef('destination', arguments([Name('self', Param(), lineno=26, col_offset=20), Name('type', Param(), lineno=26, col_offset=26), Name('name', Param(), lineno=26, col_offset=32), Name('arglist', Param(), lineno=26, col_offset=38)], None, None, []), [Assign([Name('classname', Store(), lineno=27, col_offset=8)], Str('Function', lineno=27, col_offset=20), lineno=27, col_offset=8), Assign([Name('listname', Store(), lineno=28, col_offset=8)], Str('functions', lineno=28, col_offset=19), lineno=28, col_offset=8), Return(Tuple([Name('classname', Load(), lineno=29, col_offset=15), Name('listname', Load(), lineno=29, col_offset=26)], Load(), lineno=29, col_offset=15), lineno=29, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('makeblacklistnames', arguments([Name('self', Param(), lineno=31, col_offset=27)], None, None, []), [Return(List([Str('OutlineMetrics', lineno=33, col_offset=16), Str('AntiTextIsAntiAliased', lineno=34, col_offset=16), Str('AntiTextGetEnabled', lineno=35, col_offset=16), Str('AntiTextSetEnabled', lineno=36, col_offset=16), Str('AntiTextGetApplicationAware', lineno=37, col_offset=16), Str('AntiTextSetApplicationAware', lineno=38, col_offset=16), Str('SetAntiAliasedTextEnabled', lineno=42, col_offset=16), Str('IsAntiAliasedTextEnabled', lineno=43, col_offset=16), Str('InitFonts', lineno=45, col_offset=16), Str('SetFontLock', lineno=46, col_offset=16), Str('FlushFonts', lineno=47, col_offset=16)], Load(), lineno=32, col_offset=15), lineno=32, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('makeblacklisttypes', arguments([Name('self', Param(), lineno=50, col_offset=27)], None, None, []), [Return(List([Str('FMInput_ptr', lineno=52, col_offset=16), Str('FMOutPtr', lineno=53, col_offset=16), Str('FontInfo', lineno=55, col_offset=16)], Load(), lineno=51, col_offset=15), lineno=51, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('makerepairinstructions', arguments([Name('self', Param(), lineno=58, col_offset=31)], None, None, []), [Return(List([Tuple([List([Tuple([Str('Str255', lineno=60, col_offset=19), Str('*', lineno=60, col_offset=29), Str('InMode', lineno=60, col_offset=34)], Load(), lineno=60, col_offset=19)], Load(), lineno=60, col_offset=17), List([Tuple([Str('Str255', lineno=60, col_offset=48), Str('*', lineno=60, col_offset=58), Str('OutMode', lineno=60, col_offset=63)], Load(), lineno=60, col_offset=48)], Load(), lineno=60, col_offset=46)], Load(), lineno=60, col_offset=17), Tuple([List([Tuple([Str('FMetricRecPtr', lineno=61, col_offset=19), Str('theMetrics', lineno=61, col_offset=36), Str('InMode', lineno=61, col_offset=50)], Load(), lineno=61, col_offset=19)], Load(), lineno=61, col_offset=17), List([Tuple([Str('FMetricRecPtr', lineno=61, col_offset=64), Str('theMetrics', lineno=61, col_offset=81), Str('OutMode', lineno=61, col_offset=95)], Load(), lineno=61, col_offset=64)], Load(), lineno=61, col_offset=62)], Load(), lineno=61, col_offset=17), Tuple([List([Tuple([Str('short', lineno=62, col_offset=19), Str('byteCount', lineno=62, col_offset=28), Str('InMode', lineno=62, col_offset=41)], Load(), lineno=62, col_offset=19), Tuple([Str('void_ptr', lineno=62, col_offset=53), Str('textAddr', lineno=62, col_offset=65), Str('InMode', lineno=62, col_offset=77)], Load(), lineno=62, col_offset=53)], Load(), lineno=62, col_offset=17), List([Tuple([Str('TextBuffer', lineno=63, col_offset=19), Str('inText', lineno=63, col_offset=33), Str('InMode', lineno=63, col_offset=43)], Load(), lineno=63, col_offset=19)], Load(), lineno=63, col_offset=17)], Load(), lineno=62, col_offset=17)], Load(), lineno=59, col_offset=15), lineno=59, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('writeinitialdefs', arguments([Name('self', Param(), lineno=66, col_offset=25)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=67, col_offset=8), 'defsfile', Load(), lineno=67, col_offset=8), 'write', Load(), lineno=67, col_offset=8), [Str('def FOUR_CHAR_CODE(x): return x\n', lineno=67, col_offset=28)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'defsfile', Load(), lineno=68, col_offset=8), 'write', Load(), lineno=68, col_offset=8), [Str('kNilOptions = 0\n', lineno=68, col_offset=28)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=66, col_offset=4)], [], lineno=24, col_offset=0), If(Compare(Name('__name__', Load(), lineno=70, col_offset=3), [Eq()], [Str('__main__', lineno=70, col_offset=15)], lineno=70, col_offset=3), [Expr(Call(Name('main', Load(), lineno=71, col_offset=4), [], [], None, None, lineno=71, col_offset=4), lineno=71, col_offset=4)], [], lineno=70, col_offset=0)])
