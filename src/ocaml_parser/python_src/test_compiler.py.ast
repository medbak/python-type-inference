Module([Import([alias('test.test_support', None)], lineno=1, col_offset=0), Assign([Name('compiler', Store(), lineno=2, col_offset=0)], Call(Attribute(Attribute(Name('test', Load(), lineno=2, col_offset=11), 'test_support', Load(), lineno=2, col_offset=11), 'import_module', Load(), lineno=2, col_offset=11), [Str('compiler', lineno=2, col_offset=43)], [keyword('deprecated', Name('True', Load(), lineno=2, col_offset=66))], None, None, lineno=2, col_offset=11), lineno=2, col_offset=0), ImportFrom('compiler.ast', [alias('flatten', None)], 0, lineno=3, col_offset=0), Import([alias('os', None), alias('sys', None), alias('time', None), alias('unittest', None)], lineno=4, col_offset=0), ImportFrom('random', [alias('random', None)], 0, lineno=5, col_offset=0), ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=6, col_offset=0), Assign([Name('_PRINT_WORKING_MSG_INTERVAL', Store(), lineno=9, col_offset=0)], BinOp(Num(5, lineno=9, col_offset=30), Mult(), Num(60, lineno=9, col_offset=34), lineno=9, col_offset=30), lineno=9, col_offset=0), ClassDef('TrivialContext', [Name('object', Load(), lineno=11, col_offset=21)], [FunctionDef('__enter__', arguments([Name('self', Param(), lineno=12, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=13, col_offset=15), lineno=13, col_offset=8)], [], lineno=12, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=14, col_offset=17)], 'exc_info', None, []), [Pass( lineno=15, col_offset=8)], [], lineno=14, col_offset=4)], [], lineno=11, col_offset=0), ClassDef('CompilerTest', [Attribute(Name('unittest', Load(), lineno=17, col_offset=19), 'TestCase', Load(), lineno=17, col_offset=19)], [FunctionDef('testCompileLibrary', arguments([Name('self', Param(), lineno=19, col_offset=27)], None, None, []), [Assign([Name('next_time', Store(), lineno=25, col_offset=8)], BinOp(Call(Attribute(Name('time', Load(), lineno=25, col_offset=20), 'time', Load(), lineno=25, col_offset=20), [], [], None, None, lineno=25, col_offset=20), Add(), Name('_PRINT_WORKING_MSG_INTERVAL', Load(), lineno=25, col_offset=34), lineno=25, col_offset=20), lineno=25, col_offset=8), Assign([Name('libdir', Store(), lineno=28, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=28, col_offset=17), 'path', Load(), lineno=28, col_offset=17), 'dirname', Load(), lineno=28, col_offset=17), [Attribute(Name('os', Load(), lineno=28, col_offset=33), '__file__', Load(), lineno=28, col_offset=33)], [], None, None, lineno=28, col_offset=17), lineno=28, col_offset=8), Assign([Name('testdir', Store(), lineno=29, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=29, col_offset=18), 'path', Load(), lineno=29, col_offset=18), 'dirname', Load(), lineno=29, col_offset=18), [Attribute(Attribute(Name('test', Load(), lineno=29, col_offset=34), 'test_support', Load(), lineno=29, col_offset=34), '__file__', Load(), lineno=29, col_offset=34)], [], None, None, lineno=29, col_offset=18), lineno=29, col_offset=8), For(Name('dir', Store(), lineno=31, col_offset=12), List([Name('libdir', Load(), lineno=31, col_offset=20), Name('testdir', Load(), lineno=31, col_offset=28)], Load(), lineno=31, col_offset=19), [For(Name('basename', Store(), lineno=32, col_offset=16), Call(Attribute(Name('os', Load(), lineno=32, col_offset=28), 'listdir', Load(), lineno=32, col_offset=28), [Name('dir', Load(), lineno=32, col_offset=39)], [], None, None, lineno=32, col_offset=28), [If(Compare(Name('next_time', Load(), lineno=34, col_offset=19), [LtE()], [Call(Attribute(Name('time', Load(), lineno=34, col_offset=32), 'time', Load(), lineno=34, col_offset=32), [], [], None, None, lineno=34, col_offset=32)], lineno=34, col_offset=19), [Assign([Name('next_time', Store(), lineno=35, col_offset=20)], BinOp(Call(Attribute(Name('time', Load(), lineno=35, col_offset=32), 'time', Load(), lineno=35, col_offset=32), [], [], None, None, lineno=35, col_offset=32), Add(), Name('_PRINT_WORKING_MSG_INTERVAL', Load(), lineno=35, col_offset=46), lineno=35, col_offset=32), lineno=35, col_offset=20), Print(Attribute(Name('sys', Load(), lineno=36, col_offset=28), '__stdout__', Load(), lineno=36, col_offset=28), [Str('  testCompileLibrary still working, be patient...', lineno=37, col_offset=23)], True, lineno=36, col_offset=20), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=38, col_offset=20), '__stdout__', Load(), lineno=38, col_offset=20), 'flush', Load(), lineno=38, col_offset=20), [], [], None, None, lineno=38, col_offset=20), lineno=38, col_offset=20)], [], lineno=34, col_offset=16), If(UnaryOp(Not(), Call(Attribute(Name('basename', Load(), lineno=40, col_offset=23), 'endswith', Load(), lineno=40, col_offset=23), [Str('.py', lineno=40, col_offset=41)], [], None, None, lineno=40, col_offset=23), lineno=40, col_offset=19), [Continue( lineno=41, col_offset=20)], [], lineno=40, col_offset=16), If(BoolOp(And(), [UnaryOp(Not(), Name('TEST_ALL', Load(), lineno=42, col_offset=23), lineno=42, col_offset=19), Compare(Call(Name('random', Load(), lineno=42, col_offset=36), [], [], None, None, lineno=42, col_offset=36), [Lt()], [Num(0.98, lineno=42, col_offset=47)], lineno=42, col_offset=36)], lineno=42, col_offset=19), [Continue( lineno=43, col_offset=20)], [], lineno=42, col_offset=16), Assign([Name('path', Store(), lineno=44, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=44, col_offset=23), 'path', Load(), lineno=44, col_offset=23), 'join', Load(), lineno=44, col_offset=23), [Name('dir', Load(), lineno=44, col_offset=36), Name('basename', Load(), lineno=44, col_offset=41)], [], None, None, lineno=44, col_offset=23), lineno=44, col_offset=16), If(Attribute(Attribute(Name('test', Load(), lineno=45, col_offset=19), 'test_support', Load(), lineno=45, col_offset=19), 'verbose', Load(), lineno=45, col_offset=19), [Print(None, [Str('compiling', lineno=46, col_offset=26), Name('path', Load(), lineno=46, col_offset=39)], True, lineno=46, col_offset=20)], [], lineno=45, col_offset=16), Assign([Name('f', Store(), lineno=47, col_offset=16)], Call(Name('open', Load(), lineno=47, col_offset=20), [Name('path', Load(), lineno=47, col_offset=25), Str('U', lineno=47, col_offset=31)], [], None, None, lineno=47, col_offset=20), lineno=47, col_offset=16), Assign([Name('buf', Store(), lineno=48, col_offset=16)], Call(Attribute(Name('f', Load(), lineno=48, col_offset=22), 'read', Load(), lineno=48, col_offset=22), [], [], None, None, lineno=48, col_offset=22), lineno=48, col_offset=16), Expr(Call(Attribute(Name('f', Load(), lineno=49, col_offset=16), 'close', Load(), lineno=49, col_offset=16), [], [], None, None, lineno=49, col_offset=16), lineno=49, col_offset=16), If(BoolOp(Or(), [Compare(Str('badsyntax', lineno=50, col_offset=19), [In()], [Name('basename', Load(), lineno=50, col_offset=34)], lineno=50, col_offset=19), Compare(Str('bad_coding', lineno=50, col_offset=46), [In()], [Name('basename', Load(), lineno=50, col_offset=62)], lineno=50, col_offset=46)], lineno=50, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=20), 'assertRaises', Load(), lineno=51, col_offset=20), [Name('SyntaxError', Load(), lineno=51, col_offset=38), Attribute(Name('compiler', Load(), lineno=51, col_offset=51), 'compile', Load(), lineno=51, col_offset=51), Name('buf', Load(), lineno=52, col_offset=38), Name('basename', Load(), lineno=52, col_offset=43), Str('exec', lineno=52, col_offset=53)], [], None, None, lineno=51, col_offset=20), lineno=51, col_offset=20)], [TryExcept([Expr(Call(Attribute(Name('compiler', Load(), lineno=55, col_offset=24), 'compile', Load(), lineno=55, col_offset=24), [Name('buf', Load(), lineno=55, col_offset=41), Name('basename', Load(), lineno=55, col_offset=46), Str('exec', lineno=55, col_offset=56)], [], None, None, lineno=55, col_offset=24), lineno=55, col_offset=24)], [ExceptHandler(Name('Exception', Load(), lineno=56, col_offset=27), Name('e', Store(), lineno=56, col_offset=38), [Assign([Name('args', Store(), lineno=57, col_offset=24)], Call(Name('list', Load(), lineno=57, col_offset=31), [Attribute(Name('e', Load(), lineno=57, col_offset=36), 'args', Load(), lineno=57, col_offset=36)], [], None, None, lineno=57, col_offset=31), lineno=57, col_offset=24), Expr(Call(Attribute(Name('args', Load(), lineno=58, col_offset=24), 'append', Load(), lineno=58, col_offset=24), [BinOp(Str('in file %s]', lineno=58, col_offset=36), Mod(), Name('basename', Load(), lineno=58, col_offset=52), lineno=58, col_offset=36)], [], None, None, lineno=58, col_offset=24), lineno=58, col_offset=24), Assign([Attribute(Name('e', Load(), lineno=60, col_offset=24), 'args', Store(), lineno=60, col_offset=24)], Call(Name('tuple', Load(), lineno=60, col_offset=33), [Name('args', Load(), lineno=60, col_offset=39)], [], None, None, lineno=60, col_offset=33), lineno=60, col_offset=24), Raise(None, None, None, lineno=61, col_offset=24)], lineno=56, col_offset=20)], [], lineno=54, col_offset=20)], lineno=50, col_offset=16)], [], lineno=32, col_offset=12)], [], lineno=31, col_offset=8)], [], lineno=19, col_offset=4), FunctionDef('testNewClassSyntax', arguments([Name('self', Param(), lineno=63, col_offset=27)], None, None, []), [Expr(Call(Attribute(Name('compiler', Load(), lineno=64, col_offset=8), 'compile', Load(), lineno=64, col_offset=8), [Str('class foo():pass\n\n', lineno=64, col_offset=25), Str('<string>', lineno=64, col_offset=48), Str('exec', lineno=64, col_offset=59)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('testYieldExpr', arguments([Name('self', Param(), lineno=66, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('compiler', Load(), lineno=67, col_offset=8), 'compile', Load(), lineno=67, col_offset=8), [Str('def g(): yield\n\n', lineno=67, col_offset=25), Str('<string>', lineno=67, col_offset=47), Str('exec', lineno=67, col_offset=59)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('testKeywordAfterStarargs', arguments([Name('self', Param(), lineno=69, col_offset=33)], None, None, []), [FunctionDef('f', arguments([], 'args', 'kwargs', []), [Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=12), 'assertEqual', Load(), lineno=71, col_offset=12), [Tuple([Name('args', Load(), lineno=71, col_offset=30), Name('kwargs', Load(), lineno=71, col_offset=36)], Load(), lineno=71, col_offset=30), Tuple([Tuple([Num(2, lineno=71, col_offset=47), Num(3, lineno=71, col_offset=49)], Load(), lineno=71, col_offset=47), Dict([Str('x', lineno=71, col_offset=54), Str('y', lineno=71, col_offset=62)], [Num(1, lineno=71, col_offset=59), Num(4, lineno=71, col_offset=67)], lineno=71, col_offset=53)], Load(), lineno=71, col_offset=46)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=12)], [], lineno=70, col_offset=8), Assign([Name('c', Store(), lineno=72, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=72, col_offset=12), 'compile', Load(), lineno=72, col_offset=12), [Str('f(x=1, *(2, 3), y=4)', lineno=72, col_offset=29), Str('<string>', lineno=72, col_offset=53), Str('exec', lineno=72, col_offset=65)], [], None, None, lineno=72, col_offset=12), lineno=72, col_offset=8), Exec(Name('c', Load(), lineno=73, col_offset=13), Dict([Str('f', lineno=73, col_offset=19)], [Name('f', Load(), lineno=73, col_offset=24)], lineno=73, col_offset=18), None, lineno=73, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), 'assertRaises', Load(), lineno=75, col_offset=8), [Name('SyntaxError', Load(), lineno=75, col_offset=26), Attribute(Name('compiler', Load(), lineno=75, col_offset=39), 'parse', Load(), lineno=75, col_offset=39), Str('foo(a=1, b)', lineno=75, col_offset=55)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'assertRaises', Load(), lineno=76, col_offset=8), [Name('SyntaxError', Load(), lineno=76, col_offset=26), Attribute(Name('compiler', Load(), lineno=76, col_offset=39), 'parse', Load(), lineno=76, col_offset=39), Str('foo(1, *args, 3)', lineno=76, col_offset=55)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('testTryExceptFinally', arguments([Name('self', Param(), lineno=78, col_offset=29)], None, None, []), [Assign([Name('c', Store(), lineno=80, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=80, col_offset=12), 'compile', Load(), lineno=80, col_offset=12), [Str('try:\n 1//0\nexcept:\n e = 1\nfinally:\n f = 1', lineno=80, col_offset=29), Str('<string>', lineno=81, col_offset=29), Str('exec', lineno=81, col_offset=41)], [], None, None, lineno=80, col_offset=12), lineno=80, col_offset=8), Assign([Name('dct', Store(), lineno=82, col_offset=8)], Dict([], [], lineno=82, col_offset=14), lineno=82, col_offset=8), Exec(Name('c', Load(), lineno=83, col_offset=13), Name('dct', Load(), lineno=83, col_offset=18), None, lineno=83, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=8), 'assertEqual', Load(), lineno=84, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=84, col_offset=25), 'get', Load(), lineno=84, col_offset=25), [Str('e', lineno=84, col_offset=33)], [], None, None, lineno=84, col_offset=25), Num(1, lineno=84, col_offset=39)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=8), 'assertEqual', Load(), lineno=85, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=85, col_offset=25), 'get', Load(), lineno=85, col_offset=25), [Str('f', lineno=85, col_offset=33)], [], None, None, lineno=85, col_offset=25), Num(1, lineno=85, col_offset=39)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('testDefaultArgs', arguments([Name('self', Param(), lineno=87, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'assertRaises', Load(), lineno=88, col_offset=8), [Name('SyntaxError', Load(), lineno=88, col_offset=26), Attribute(Name('compiler', Load(), lineno=88, col_offset=39), 'parse', Load(), lineno=88, col_offset=39), Str('def foo(a=1, b): pass', lineno=88, col_offset=55)], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8)], [], lineno=87, col_offset=4), FunctionDef('testDocstrings', arguments([Name('self', Param(), lineno=90, col_offset=23)], None, None, []), [Assign([Name('c', Store(), lineno=91, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=91, col_offset=12), 'compile', Load(), lineno=91, col_offset=12), [Str('"doc"', lineno=91, col_offset=29), Str('<string>', lineno=91, col_offset=38), Str('exec', lineno=91, col_offset=50)], [], None, None, lineno=91, col_offset=12), lineno=91, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=8), 'assertIn', Load(), lineno=92, col_offset=8), [Str('__doc__', lineno=92, col_offset=22), Attribute(Name('c', Load(), lineno=92, col_offset=33), 'co_names', Load(), lineno=92, col_offset=33)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), Assign([Name('c', Store(), lineno=93, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=93, col_offset=12), 'compile', Load(), lineno=93, col_offset=12), [Str('def f():\n "doc"', lineno=93, col_offset=29), Str('<string>', lineno=93, col_offset=49), Str('exec', lineno=93, col_offset=61)], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=8), Assign([Name('g', Store(), lineno=94, col_offset=8)], Dict([], [], lineno=94, col_offset=12), lineno=94, col_offset=8), Exec(Name('c', Load(), lineno=95, col_offset=13), Name('g', Load(), lineno=95, col_offset=18), None, lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=8), 'assertEqual', Load(), lineno=96, col_offset=8), [Attribute(Subscript(Name('g', Load(), lineno=96, col_offset=25), Index(Str('f', lineno=96, col_offset=27)), Load(), lineno=96, col_offset=25), '__doc__', Load(), lineno=96, col_offset=25), Str('doc', lineno=96, col_offset=41)], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8)], [], lineno=90, col_offset=4), FunctionDef('testLineNo', arguments([Name('self', Param(), lineno=98, col_offset=19)], None, None, []), [Assign([Name('filename', Store(), lineno=100, col_offset=8)], Name('__file__', Load(), lineno=100, col_offset=19), lineno=100, col_offset=8), If(Call(Attribute(Name('filename', Load(), lineno=101, col_offset=11), 'endswith', Load(), lineno=101, col_offset=11), [Tuple([Str('.pyc', lineno=101, col_offset=30), Str('.pyo', lineno=101, col_offset=38)], Load(), lineno=101, col_offset=30)], [], None, None, lineno=101, col_offset=11), [Assign([Name('filename', Store(), lineno=102, col_offset=12)], Subscript(Name('filename', Load(), lineno=102, col_offset=23), Slice(None, Num(-1, lineno=102, col_offset=34), None), Load(), lineno=102, col_offset=23), lineno=102, col_offset=12)], [], lineno=101, col_offset=8), Assign([Name('tree', Store(), lineno=103, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=103, col_offset=15), 'parseFile', Load(), lineno=103, col_offset=15), [Name('filename', Load(), lineno=103, col_offset=34)], [], None, None, lineno=103, col_offset=15), lineno=103, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=104, col_offset=8), 'check_lineno', Load(), lineno=104, col_offset=8), [Name('tree', Load(), lineno=104, col_offset=26)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('check_lineno', arguments([Name('self', Param(), lineno=106, col_offset=21), Name('node', Param(), lineno=106, col_offset=27)], None, None, []), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=12), '_check_lineno', Load(), lineno=108, col_offset=12), [Name('node', Load(), lineno=108, col_offset=31)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12)], [ExceptHandler(Name('AssertionError', Load(), lineno=109, col_offset=15), None, [Print(None, [Attribute(Name('node', Load(), lineno=110, col_offset=18), '__class__', Load(), lineno=110, col_offset=18), Attribute(Name('node', Load(), lineno=110, col_offset=34), 'lineno', Load(), lineno=110, col_offset=34)], True, lineno=110, col_offset=12), Raise(None, None, None, lineno=111, col_offset=12)], lineno=109, col_offset=8)], [], lineno=107, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('_check_lineno', arguments([Name('self', Param(), lineno=113, col_offset=22), Name('node', Param(), lineno=113, col_offset=28)], None, None, []), [If(UnaryOp(Not(), Compare(Attribute(Name('node', Load(), lineno=114, col_offset=15), '__class__', Load(), lineno=114, col_offset=15), [In()], [Name('NOLINENO', Load(), lineno=114, col_offset=33)], lineno=114, col_offset=15), lineno=114, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=12), 'assertIsInstance', Load(), lineno=115, col_offset=12), [Attribute(Name('node', Load(), lineno=115, col_offset=34), 'lineno', Load(), lineno=115, col_offset=34), Name('int', Load(), lineno=115, col_offset=47), BinOp(Str('lineno=%s on %s', lineno=116, col_offset=16), Mod(), Tuple([Attribute(Name('node', Load(), lineno=116, col_offset=37), 'lineno', Load(), lineno=116, col_offset=37), Attribute(Name('node', Load(), lineno=116, col_offset=50), '__class__', Load(), lineno=116, col_offset=50)], Load(), lineno=116, col_offset=37), lineno=116, col_offset=16)], [], None, None, lineno=115, col_offset=12), lineno=115, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=117, col_offset=12), 'assertTrue', Load(), lineno=117, col_offset=12), [Compare(Attribute(Name('node', Load(), lineno=117, col_offset=28), 'lineno', Load(), lineno=117, col_offset=28), [Gt()], [Num(0, lineno=117, col_offset=42)], lineno=117, col_offset=28), BinOp(Str('lineno=%s on %s', lineno=118, col_offset=16), Mod(), Tuple([Attribute(Name('node', Load(), lineno=118, col_offset=37), 'lineno', Load(), lineno=118, col_offset=37), Attribute(Name('node', Load(), lineno=118, col_offset=50), '__class__', Load(), lineno=118, col_offset=50)], Load(), lineno=118, col_offset=37), lineno=118, col_offset=16)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12)], [], lineno=114, col_offset=8), For(Name('child', Store(), lineno=119, col_offset=12), Call(Attribute(Name('node', Load(), lineno=119, col_offset=21), 'getChildNodes', Load(), lineno=119, col_offset=21), [], [], None, None, lineno=119, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=120, col_offset=12), 'check_lineno', Load(), lineno=120, col_offset=12), [Name('child', Load(), lineno=120, col_offset=30)], [], None, None, lineno=120, col_offset=12), lineno=120, col_offset=12)], [], lineno=119, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('testFlatten', arguments([Name('self', Param(), lineno=122, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=8), 'assertEqual', Load(), lineno=123, col_offset=8), [Call(Name('flatten', Load(), lineno=123, col_offset=25), [List([Num(1, lineno=123, col_offset=34), List([Num(2, lineno=123, col_offset=38)], Load(), lineno=123, col_offset=37)], Load(), lineno=123, col_offset=33)], [], None, None, lineno=123, col_offset=25), List([Num(1, lineno=123, col_offset=45), Num(2, lineno=123, col_offset=48)], Load(), lineno=123, col_offset=44)], [], None, None, lineno=123, col_offset=8), lineno=123, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=124, col_offset=8), 'assertEqual', Load(), lineno=124, col_offset=8), [Call(Name('flatten', Load(), lineno=124, col_offset=25), [Tuple([Num(1, lineno=124, col_offset=34), Tuple([Num(2, lineno=124, col_offset=38)], Load(), lineno=124, col_offset=38)], Load(), lineno=124, col_offset=34)], [], None, None, lineno=124, col_offset=25), List([Num(1, lineno=124, col_offset=46), Num(2, lineno=124, col_offset=49)], Load(), lineno=124, col_offset=45)], [], None, None, lineno=124, col_offset=8), lineno=124, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('testNestedScope', arguments([Name('self', Param(), lineno=126, col_offset=24)], None, None, []), [Assign([Name('c', Store(), lineno=127, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=127, col_offset=12), 'compile', Load(), lineno=127, col_offset=12), [Str('def g():\n    a = 1\n    def f(): return a + 2\n    return f()\nresult = g()', lineno=127, col_offset=29), Str('<string>', lineno=132, col_offset=29), Str('exec', lineno=133, col_offset=29)], [], None, None, lineno=127, col_offset=12), lineno=127, col_offset=8), Assign([Name('dct', Store(), lineno=134, col_offset=8)], Dict([], [], lineno=134, col_offset=14), lineno=134, col_offset=8), Exec(Name('c', Load(), lineno=135, col_offset=13), Name('dct', Load(), lineno=135, col_offset=18), None, lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertEqual', Load(), lineno=136, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=136, col_offset=25), 'get', Load(), lineno=136, col_offset=25), [Str('result', lineno=136, col_offset=33)], [], None, None, lineno=136, col_offset=25), Num(3, lineno=136, col_offset=44)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8)], [], lineno=126, col_offset=4), FunctionDef('testGenExp', arguments([Name('self', Param(), lineno=138, col_offset=19)], None, None, []), [Assign([Name('c', Store(), lineno=139, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=139, col_offset=12), 'compile', Load(), lineno=139, col_offset=12), [Str('list((i,j) for i in range(3) if i < 3           for j in range(4) if j > 2)', lineno=139, col_offset=29), Str('<string>', lineno=141, col_offset=29), Str('eval', lineno=142, col_offset=29)], [], None, None, lineno=139, col_offset=12), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=143, col_offset=8), 'assertEqual', Load(), lineno=143, col_offset=8), [Call(Name('eval', Load(), lineno=143, col_offset=25), [Name('c', Load(), lineno=143, col_offset=30)], [], None, None, lineno=143, col_offset=25), List([Tuple([Num(0, lineno=143, col_offset=36), Num(3, lineno=143, col_offset=39)], Load(), lineno=143, col_offset=36), Tuple([Num(1, lineno=143, col_offset=44), Num(3, lineno=143, col_offset=47)], Load(), lineno=143, col_offset=44), Tuple([Num(2, lineno=143, col_offset=52), Num(3, lineno=143, col_offset=55)], Load(), lineno=143, col_offset=52)], Load(), lineno=143, col_offset=34)], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('testSetLiteral', arguments([Name('self', Param(), lineno=145, col_offset=23)], None, None, []), [Assign([Name('c', Store(), lineno=146, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=146, col_offset=12), 'compile', Load(), lineno=146, col_offset=12), [Str('{1, 2, 3}', lineno=146, col_offset=29), Str('<string>', lineno=146, col_offset=42), Str('eval', lineno=146, col_offset=54)], [], None, None, lineno=146, col_offset=12), lineno=146, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=8), 'assertEqual', Load(), lineno=147, col_offset=8), [Call(Name('eval', Load(), lineno=147, col_offset=25), [Name('c', Load(), lineno=147, col_offset=30)], [], None, None, lineno=147, col_offset=25), Set([Num(1, lineno=147, col_offset=35), Num(2, lineno=147, col_offset=37), Num(3, lineno=147, col_offset=39)], lineno=147, col_offset=34)], [], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8), Assign([Name('c', Store(), lineno=148, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=148, col_offset=12), 'compile', Load(), lineno=148, col_offset=12), [Str('{1, 2, 3,}', lineno=148, col_offset=29), Str('<string>', lineno=148, col_offset=43), Str('eval', lineno=148, col_offset=55)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=149, col_offset=8), 'assertEqual', Load(), lineno=149, col_offset=8), [Call(Name('eval', Load(), lineno=149, col_offset=25), [Name('c', Load(), lineno=149, col_offset=30)], [], None, None, lineno=149, col_offset=25), Set([Num(1, lineno=149, col_offset=35), Num(2, lineno=149, col_offset=37), Num(3, lineno=149, col_offset=39)], lineno=149, col_offset=34)], [], None, None, lineno=149, col_offset=8), lineno=149, col_offset=8)], [], lineno=145, col_offset=4), FunctionDef('testDictLiteral', arguments([Name('self', Param(), lineno=151, col_offset=24)], None, None, []), [Assign([Name('c', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=152, col_offset=12), 'compile', Load(), lineno=152, col_offset=12), [Str('{1:2, 2:3, 3:4}', lineno=152, col_offset=29), Str('<string>', lineno=152, col_offset=48), Str('eval', lineno=152, col_offset=60)], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=153, col_offset=8), 'assertEqual', Load(), lineno=153, col_offset=8), [Call(Name('eval', Load(), lineno=153, col_offset=25), [Name('c', Load(), lineno=153, col_offset=30)], [], None, None, lineno=153, col_offset=25), Dict([Num(1, lineno=153, col_offset=35), Num(2, lineno=153, col_offset=40), Num(3, lineno=153, col_offset=45)], [Num(2, lineno=153, col_offset=37), Num(3, lineno=153, col_offset=42), Num(4, lineno=153, col_offset=47)], lineno=153, col_offset=34)], [], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8), Assign([Name('c', Store(), lineno=154, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=154, col_offset=12), 'compile', Load(), lineno=154, col_offset=12), [Str('{1:2, 2:3, 3:4,}', lineno=154, col_offset=29), Str('<string>', lineno=154, col_offset=49), Str('eval', lineno=154, col_offset=61)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=155, col_offset=8), 'assertEqual', Load(), lineno=155, col_offset=8), [Call(Name('eval', Load(), lineno=155, col_offset=25), [Name('c', Load(), lineno=155, col_offset=30)], [], None, None, lineno=155, col_offset=25), Dict([Num(1, lineno=155, col_offset=35), Num(2, lineno=155, col_offset=40), Num(3, lineno=155, col_offset=45)], [Num(2, lineno=155, col_offset=37), Num(3, lineno=155, col_offset=42), Num(4, lineno=155, col_offset=47)], lineno=155, col_offset=34)], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('testSetComp', arguments([Name('self', Param(), lineno=157, col_offset=20)], None, None, []), [Assign([Name('c', Store(), lineno=158, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=158, col_offset=12), 'compile', Load(), lineno=158, col_offset=12), [Str('{x for x in range(1, 4)}', lineno=158, col_offset=29), Str('<string>', lineno=158, col_offset=57), Str('eval', lineno=158, col_offset=69)], [], None, None, lineno=158, col_offset=12), lineno=158, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=159, col_offset=8), 'assertEqual', Load(), lineno=159, col_offset=8), [Call(Name('eval', Load(), lineno=159, col_offset=25), [Name('c', Load(), lineno=159, col_offset=30)], [], None, None, lineno=159, col_offset=25), Set([Num(1, lineno=159, col_offset=35), Num(2, lineno=159, col_offset=38), Num(3, lineno=159, col_offset=41)], lineno=159, col_offset=34)], [], None, None, lineno=159, col_offset=8), lineno=159, col_offset=8), Assign([Name('c', Store(), lineno=160, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=160, col_offset=12), 'compile', Load(), lineno=160, col_offset=12), [Str('{x * y for x in range(3) if x != 0       for y in range(4) if y != 0}', lineno=160, col_offset=29), Str('<string>', lineno=162, col_offset=29), Str('eval', lineno=163, col_offset=29)], [], None, None, lineno=160, col_offset=12), lineno=160, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=8), 'assertEqual', Load(), lineno=164, col_offset=8), [Call(Name('eval', Load(), lineno=164, col_offset=25), [Name('c', Load(), lineno=164, col_offset=30)], [], None, None, lineno=164, col_offset=25), Set([Num(1, lineno=164, col_offset=35), Num(2, lineno=164, col_offset=38), Num(3, lineno=164, col_offset=41), Num(4, lineno=164, col_offset=44), Num(6, lineno=164, col_offset=47)], lineno=164, col_offset=34)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8)], [], lineno=157, col_offset=4), FunctionDef('testDictComp', arguments([Name('self', Param(), lineno=166, col_offset=21)], None, None, []), [Assign([Name('c', Store(), lineno=167, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=167, col_offset=12), 'compile', Load(), lineno=167, col_offset=12), [Str('{x:x+1 for x in range(1, 4)}', lineno=167, col_offset=29), Str('<string>', lineno=167, col_offset=61), Str('eval', lineno=167, col_offset=73)], [], None, None, lineno=167, col_offset=12), lineno=167, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=8), 'assertEqual', Load(), lineno=168, col_offset=8), [Call(Name('eval', Load(), lineno=168, col_offset=25), [Name('c', Load(), lineno=168, col_offset=30)], [], None, None, lineno=168, col_offset=25), Dict([Num(1, lineno=168, col_offset=35), Num(2, lineno=168, col_offset=40), Num(3, lineno=168, col_offset=45)], [Num(2, lineno=168, col_offset=37), Num(3, lineno=168, col_offset=42), Num(4, lineno=168, col_offset=47)], lineno=168, col_offset=34)], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8), Assign([Name('c', Store(), lineno=169, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=169, col_offset=12), 'compile', Load(), lineno=169, col_offset=12), [Str('{(x, y) : y for x in range(2) if x != 0            for y in range(3) if y != 0}', lineno=169, col_offset=29), Str('<string>', lineno=171, col_offset=29), Str('eval', lineno=172, col_offset=29)], [], None, None, lineno=169, col_offset=12), lineno=169, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=173, col_offset=8), 'assertEqual', Load(), lineno=173, col_offset=8), [Call(Name('eval', Load(), lineno=173, col_offset=25), [Name('c', Load(), lineno=173, col_offset=30)], [], None, None, lineno=173, col_offset=25), Dict([Tuple([Num(1, lineno=173, col_offset=36), Num(2, lineno=173, col_offset=39)], Load(), lineno=173, col_offset=36), Tuple([Num(1, lineno=173, col_offset=47), Num(1, lineno=173, col_offset=50)], Load(), lineno=173, col_offset=47)], [Num(2, lineno=173, col_offset=43), Num(1, lineno=173, col_offset=54)], lineno=173, col_offset=34)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=8)], [], lineno=166, col_offset=4), FunctionDef('testWith', arguments([Name('self', Param(), lineno=175, col_offset=17)], None, None, []), [Assign([Name('c', Store(), lineno=177, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=177, col_offset=12), 'compile', Load(), lineno=177, col_offset=12), [Str('from __future__ import with_statement\ndef f():\n    with TrivialContext():\n        return 1\nresult = f()', lineno=177, col_offset=29), Str('<string>', lineno=182, col_offset=29), Str('exec', lineno=183, col_offset=29)], [], None, None, lineno=177, col_offset=12), lineno=177, col_offset=8), Assign([Name('dct', Store(), lineno=184, col_offset=8)], Dict([Str('TrivialContext', lineno=184, col_offset=15)], [Name('TrivialContext', Load(), lineno=184, col_offset=33)], lineno=184, col_offset=14), lineno=184, col_offset=8), Exec(Name('c', Load(), lineno=185, col_offset=13), Name('dct', Load(), lineno=185, col_offset=18), None, lineno=185, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=186, col_offset=8), 'assertEqual', Load(), lineno=186, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=186, col_offset=25), 'get', Load(), lineno=186, col_offset=25), [Str('result', lineno=186, col_offset=33)], [], None, None, lineno=186, col_offset=25), Num(1, lineno=186, col_offset=44)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8)], [], lineno=175, col_offset=4), FunctionDef('testWithAss', arguments([Name('self', Param(), lineno=188, col_offset=20)], None, None, []), [Assign([Name('c', Store(), lineno=189, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=189, col_offset=12), 'compile', Load(), lineno=189, col_offset=12), [Str('from __future__ import with_statement\ndef f():\n    with TrivialContext() as tc:\n        return 1\nresult = f()', lineno=189, col_offset=29), Str('<string>', lineno=194, col_offset=29), Str('exec', lineno=195, col_offset=29)], [], None, None, lineno=189, col_offset=12), lineno=189, col_offset=8), Assign([Name('dct', Store(), lineno=196, col_offset=8)], Dict([Str('TrivialContext', lineno=196, col_offset=15)], [Name('TrivialContext', Load(), lineno=196, col_offset=33)], lineno=196, col_offset=14), lineno=196, col_offset=8), Exec(Name('c', Load(), lineno=197, col_offset=13), Name('dct', Load(), lineno=197, col_offset=18), None, lineno=197, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=8), 'assertEqual', Load(), lineno=198, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=198, col_offset=25), 'get', Load(), lineno=198, col_offset=25), [Str('result', lineno=198, col_offset=33)], [], None, None, lineno=198, col_offset=25), Num(1, lineno=198, col_offset=44)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('testWithMult', arguments([Name('self', Param(), lineno=200, col_offset=21)], None, None, []), [Assign([Name('events', Store(), lineno=201, col_offset=8)], List([], Load(), lineno=201, col_offset=17), lineno=201, col_offset=8), ClassDef('Ctx', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=203, col_offset=25), Name('n', Param(), lineno=203, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=204, col_offset=16), 'n', Store(), lineno=204, col_offset=16)], Name('n', Load(), lineno=204, col_offset=25), lineno=204, col_offset=16)], [], lineno=203, col_offset=12), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=205, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('events', Load(), lineno=206, col_offset=16), 'append', Load(), lineno=206, col_offset=16), [Attribute(Name('self', Load(), lineno=206, col_offset=30), 'n', Load(), lineno=206, col_offset=30)], [], None, None, lineno=206, col_offset=16), lineno=206, col_offset=16)], [], lineno=205, col_offset=12), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=207, col_offset=25)], 'args', None, []), [Pass( lineno=208, col_offset=16)], [], lineno=207, col_offset=12)], [], lineno=202, col_offset=8), Assign([Name('c', Store(), lineno=209, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=209, col_offset=12), 'compile', Load(), lineno=209, col_offset=12), [Str('from __future__ import with_statement\ndef f():\n    with Ctx(1) as tc, Ctx(2) as tc2:\n        return 1\nresult = f()', lineno=209, col_offset=29), Str('<string>', lineno=214, col_offset=29), Str('exec', lineno=215, col_offset=29)], [], None, None, lineno=209, col_offset=12), lineno=209, col_offset=8), Assign([Name('dct', Store(), lineno=216, col_offset=8)], Dict([Str('Ctx', lineno=216, col_offset=15)], [Name('Ctx', Load(), lineno=216, col_offset=22)], lineno=216, col_offset=14), lineno=216, col_offset=8), Exec(Name('c', Load(), lineno=217, col_offset=13), Name('dct', Load(), lineno=217, col_offset=18), None, lineno=217, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=218, col_offset=8), 'assertEqual', Load(), lineno=218, col_offset=8), [Call(Attribute(Name('dct', Load(), lineno=218, col_offset=25), 'get', Load(), lineno=218, col_offset=25), [Str('result', lineno=218, col_offset=33)], [], None, None, lineno=218, col_offset=25), Num(1, lineno=218, col_offset=44)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertEqual', Load(), lineno=219, col_offset=8), [Name('events', Load(), lineno=219, col_offset=25), List([Num(1, lineno=219, col_offset=34), Num(2, lineno=219, col_offset=37)], Load(), lineno=219, col_offset=33)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8)], [], lineno=200, col_offset=4), FunctionDef('testGlobal', arguments([Name('self', Param(), lineno=221, col_offset=19)], None, None, []), [Assign([Name('code', Store(), lineno=222, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=222, col_offset=15), 'compile', Load(), lineno=222, col_offset=15), [Str('global x\nx=1', lineno=222, col_offset=32), Str('<string>', lineno=222, col_offset=49), Str('exec', lineno=222, col_offset=61)], [], None, None, lineno=222, col_offset=15), lineno=222, col_offset=8), Assign([Name('d1', Store(), lineno=223, col_offset=8)], Dict([Str('__builtins__', lineno=223, col_offset=14)], [Dict([], [], lineno=223, col_offset=30)], lineno=223, col_offset=13), lineno=223, col_offset=8), Assign([Name('d2', Store(), lineno=224, col_offset=8)], Dict([], [], lineno=224, col_offset=13), lineno=224, col_offset=8), Exec(Name('code', Load(), lineno=225, col_offset=13), Name('d1', Load(), lineno=225, col_offset=21), Name('d2', Load(), lineno=225, col_offset=25), lineno=225, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=227, col_offset=8), 'assertEqual', Load(), lineno=227, col_offset=8), [Call(Attribute(Name('d1', Load(), lineno=227, col_offset=25), 'get', Load(), lineno=227, col_offset=25), [Str('x', lineno=227, col_offset=32)], [], None, None, lineno=227, col_offset=25), Num(1, lineno=227, col_offset=38)], [], None, None, lineno=227, col_offset=8), lineno=227, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('testPrintFunction', arguments([Name('self', Param(), lineno=229, col_offset=26)], None, None, []), [Assign([Name('c', Store(), lineno=230, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=230, col_offset=12), 'compile', Load(), lineno=230, col_offset=12), [Str('from __future__ import print_function\nprint("a", "b", sep="**", end="++", file=output)', lineno=230, col_offset=29), Str('<string>', lineno=233, col_offset=29), Str('exec', lineno=234, col_offset=29)], [], None, None, lineno=230, col_offset=12), lineno=230, col_offset=8), Assign([Name('dct', Store(), lineno=235, col_offset=8)], Dict([Str('output', lineno=235, col_offset=15)], [Call(Name('StringIO', Load(), lineno=235, col_offset=25), [], [], None, None, lineno=235, col_offset=25)], lineno=235, col_offset=14), lineno=235, col_offset=8), Exec(Name('c', Load(), lineno=236, col_offset=13), Name('dct', Load(), lineno=236, col_offset=18), None, lineno=236, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=237, col_offset=8), 'assertEqual', Load(), lineno=237, col_offset=8), [Call(Attribute(Subscript(Name('dct', Load(), lineno=237, col_offset=25), Index(Str('output', lineno=237, col_offset=29)), Load(), lineno=237, col_offset=25), 'getvalue', Load(), lineno=237, col_offset=25), [], [], None, None, lineno=237, col_offset=25), Str('a**b++', lineno=237, col_offset=51)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('_testErrEnc', arguments([Name('self', Param(), lineno=239, col_offset=20), Name('src', Param(), lineno=239, col_offset=26), Name('text', Param(), lineno=239, col_offset=31), Name('offset', Param(), lineno=239, col_offset=37)], None, None, []), [TryExcept([Expr(Call(Name('compile', Load(), lineno=241, col_offset=12), [Name('src', Load(), lineno=241, col_offset=20), Str('', lineno=241, col_offset=25), Str('exec', lineno=241, col_offset=29)], [], None, None, lineno=241, col_offset=12), lineno=241, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=242, col_offset=15), Name('e', Store(), lineno=242, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=243, col_offset=12), 'assertEqual', Load(), lineno=243, col_offset=12), [Attribute(Name('e', Load(), lineno=243, col_offset=29), 'offset', Load(), lineno=243, col_offset=29), Name('offset', Load(), lineno=243, col_offset=39)], [], None, None, lineno=243, col_offset=12), lineno=243, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=12), 'assertEqual', Load(), lineno=244, col_offset=12), [Attribute(Name('e', Load(), lineno=244, col_offset=29), 'text', Load(), lineno=244, col_offset=29), Name('text', Load(), lineno=244, col_offset=37)], [], None, None, lineno=244, col_offset=12), lineno=244, col_offset=12)], lineno=242, col_offset=8)], [], lineno=240, col_offset=8)], [], lineno=239, col_offset=4), FunctionDef('testSourceCodeEncodingsError', arguments([Name('self', Param(), lineno=246, col_offset=37)], None, None, []), [Assign([Name('sjis', Store(), lineno=248, col_offset=8)], Str("print '\x83p\x83C\x83\\\x83\x93', '\n", lineno=248, col_offset=15), lineno=248, col_offset=8), Assign([Name('ascii', Store(), lineno=249, col_offset=8)], Str("print '12345678', '\n", lineno=249, col_offset=16), lineno=249, col_offset=8), Assign([Name('encdef', Store(), lineno=250, col_offset=8)], Str('#! -*- coding: ShiftJIS -*-\n', lineno=250, col_offset=17), lineno=250, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=8), '_testErrEnc', Load(), lineno=253, col_offset=8), [Name('ascii', Load(), lineno=253, col_offset=25), Name('ascii', Load(), lineno=253, col_offset=32), Num(19, lineno=253, col_offset=39)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=8), '_testErrEnc', Load(), lineno=256, col_offset=8), [BinOp(Name('encdef', Load(), lineno=256, col_offset=25), Add(), Name('ascii', Load(), lineno=256, col_offset=32), lineno=256, col_offset=25), Name('ascii', Load(), lineno=256, col_offset=39), Num(19, lineno=256, col_offset=46)], [], None, None, lineno=256, col_offset=8), lineno=256, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=259, col_offset=8), '_testErrEnc', Load(), lineno=259, col_offset=8), [BinOp(Name('encdef', Load(), lineno=259, col_offset=25), Add(), Name('sjis', Load(), lineno=259, col_offset=32), lineno=259, col_offset=25), Name('sjis', Load(), lineno=259, col_offset=38), Num(19, lineno=259, col_offset=44)], [], None, None, lineno=259, col_offset=8), lineno=259, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=262, col_offset=8), '_testErrEnc', Load(), lineno=262, col_offset=8), [Name('sjis', Load(), lineno=262, col_offset=25), Name('sjis', Load(), lineno=262, col_offset=31), Num(19, lineno=262, col_offset=37)], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=8)], [], lineno=246, col_offset=4)], [], lineno=17, col_offset=0), Assign([Name('NOLINENO', Store(), lineno=265, col_offset=0)], Tuple([Attribute(Attribute(Name('compiler', Load(), lineno=265, col_offset=12), 'ast', Load(), lineno=265, col_offset=12), 'Module', Load(), lineno=265, col_offset=12), Attribute(Attribute(Name('compiler', Load(), lineno=265, col_offset=33), 'ast', Load(), lineno=265, col_offset=33), 'Stmt', Load(), lineno=265, col_offset=33), Attribute(Attribute(Name('compiler', Load(), lineno=265, col_offset=52), 'ast', Load(), lineno=265, col_offset=52), 'Discard', Load(), lineno=265, col_offset=52)], Load(), lineno=265, col_offset=12), lineno=265, col_offset=0), ClassDef('Toto', [], [Expr(Str('docstring', lineno=273, col_offset=4), lineno=273, col_offset=4), Pass( lineno=274, col_offset=4)], [], lineno=272, col_offset=0), Assign([Tuple([Name('a', Store(), lineno=276, col_offset=0), Name('b', Store(), lineno=276, col_offset=3)], Store(), lineno=276, col_offset=0)], Tuple([Num(2, lineno=276, col_offset=7), Num(3, lineno=276, col_offset=10)], Load(), lineno=276, col_offset=7), lineno=276, col_offset=0), Assign([List([Name('c', Store(), lineno=277, col_offset=1), Name('d', Store(), lineno=277, col_offset=4)], Store(), lineno=277, col_offset=0)], Tuple([Num(5, lineno=277, col_offset=9), Num(6, lineno=277, col_offset=12)], Load(), lineno=277, col_offset=9), lineno=277, col_offset=0), Assign([Name('l', Store(), lineno=278, col_offset=0)], ListComp(Tuple([Name('x', Load(), lineno=278, col_offset=6), Name('y', Load(), lineno=278, col_offset=9)], Load(), lineno=278, col_offset=6), [comprehension(Tuple([Name('x', Store(), lineno=278, col_offset=16), Name('y', Store(), lineno=278, col_offset=19)], Store(), lineno=278, col_offset=16), Call(Name('zip', Load(), lineno=278, col_offset=24), [Call(Name('range', Load(), lineno=278, col_offset=28), [Num(5, lineno=278, col_offset=34)], [], None, None, lineno=278, col_offset=28), Call(Name('range', Load(), lineno=278, col_offset=38), [Num(5, lineno=278, col_offset=44), Num(10, lineno=278, col_offset=46)], [], None, None, lineno=278, col_offset=38)], [], None, None, lineno=278, col_offset=24), [])], lineno=278, col_offset=5), lineno=278, col_offset=0), Expr(Subscript(Name('l', Load(), lineno=279, col_offset=0), Index(Num(0, lineno=279, col_offset=2)), Load(), lineno=279, col_offset=0), lineno=279, col_offset=0), Expr(Subscript(Name('l', Load(), lineno=280, col_offset=0), Slice(Num(3, lineno=280, col_offset=2), Num(4, lineno=280, col_offset=4), None), Load(), lineno=280, col_offset=0), lineno=280, col_offset=0), Assign([Name('d', Store(), lineno=281, col_offset=0)], Dict([Str('a', lineno=281, col_offset=5)], [Num(2, lineno=281, col_offset=10)], lineno=281, col_offset=4), lineno=281, col_offset=0), Assign([Name('d', Store(), lineno=282, col_offset=0)], Dict([], [], lineno=282, col_offset=4), lineno=282, col_offset=0), Assign([Name('d', Store(), lineno=283, col_offset=0)], DictComp(Name('x', Load(), lineno=283, col_offset=5), Name('y', Load(), lineno=283, col_offset=8), [comprehension(Tuple([Name('x', Store(), lineno=283, col_offset=14), Name('y', Store(), lineno=283, col_offset=17)], Store(), lineno=283, col_offset=14), Call(Name('zip', Load(), lineno=283, col_offset=22), [Call(Name('range', Load(), lineno=283, col_offset=26), [Num(5, lineno=283, col_offset=32)], [], None, None, lineno=283, col_offset=26), Call(Name('range', Load(), lineno=283, col_offset=36), [Num(5, lineno=283, col_offset=42), Num(10, lineno=283, col_offset=44)], [], None, None, lineno=283, col_offset=36)], [], None, None, lineno=283, col_offset=22), [])], lineno=283, col_offset=5), lineno=283, col_offset=0), Assign([Name('s', Store(), lineno=284, col_offset=0)], SetComp(Name('x', Load(), lineno=284, col_offset=5), [comprehension(Name('x', Store(), lineno=284, col_offset=11), Call(Name('range', Load(), lineno=284, col_offset=16), [Num(10, lineno=284, col_offset=22)], [], None, None, lineno=284, col_offset=16), [])], lineno=284, col_offset=5), lineno=284, col_offset=0), Assign([Name('s', Store(), lineno=285, col_offset=0)], Set([Num(1, lineno=285, col_offset=5)], lineno=285, col_offset=4), lineno=285, col_offset=0), Assign([Name('t', Store(), lineno=286, col_offset=0)], Tuple([], Load(), lineno=286, col_offset=4), lineno=286, col_offset=0), Assign([Name('t', Store(), lineno=287, col_offset=0)], Tuple([Num(1, lineno=287, col_offset=5), Num(2, lineno=287, col_offset=8)], Load(), lineno=287, col_offset=5), lineno=287, col_offset=0), Assign([Name('l', Store(), lineno=288, col_offset=0)], List([], Load(), lineno=288, col_offset=4), lineno=288, col_offset=0), Assign([Name('l', Store(), lineno=289, col_offset=0)], List([Num(1, lineno=289, col_offset=5), Num(2, lineno=289, col_offset=8)], Load(), lineno=289, col_offset=4), lineno=289, col_offset=0), If(Name('l', Load(), lineno=290, col_offset=3), [Pass( lineno=291, col_offset=4)], [Assign([Tuple([Name('a', Store(), lineno=293, col_offset=4), Name('b', Store(), lineno=293, col_offset=7)], Store(), lineno=293, col_offset=4)], Tuple([Name('b', Load(), lineno=293, col_offset=11), Name('a', Load(), lineno=293, col_offset=14)], Load(), lineno=293, col_offset=11), lineno=293, col_offset=4)], lineno=290, col_offset=0), TryExcept([Print(None, [Name('yo', Load(), lineno=296, col_offset=10)], True, lineno=296, col_offset=4)], [ExceptHandler(None, None, [Assign([Name('yo', Store(), lineno=298, col_offset=4)], Num(3, lineno=298, col_offset=9), lineno=298, col_offset=4)], lineno=297, col_offset=0)], [AugAssign(Name('yo', Store(), lineno=300, col_offset=4), Add(), Num(3, lineno=300, col_offset=10), lineno=300, col_offset=4)], lineno=295, col_offset=0), TryFinally([AugAssign(Name('a', Store(), lineno=303, col_offset=4), Add(), Name('b', Load(), lineno=303, col_offset=9), lineno=303, col_offset=4)], [Assign([Name('b', Store(), lineno=305, col_offset=4)], Num(0, lineno=305, col_offset=8), lineno=305, col_offset=4)], lineno=302, col_offset=0), ImportFrom('math', [alias('*', None)], 0, lineno=307, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Global(['TEST_ALL'], lineno=312, col_offset=4), Assign([Name('TEST_ALL', Store(), lineno=313, col_offset=4)], Call(Attribute(Attribute(Name('test', Load(), lineno=313, col_offset=15), 'test_support', Load(), lineno=313, col_offset=15), 'is_resource_enabled', Load(), lineno=313, col_offset=15), [Str('cpu', lineno=313, col_offset=53)], [], None, None, lineno=313, col_offset=15), lineno=313, col_offset=4), Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=314, col_offset=4), 'test_support', Load(), lineno=314, col_offset=4), 'run_unittest', Load(), lineno=314, col_offset=4), [Name('CompilerTest', Load(), lineno=314, col_offset=35)], [], None, None, lineno=314, col_offset=4), lineno=314, col_offset=4)], [], lineno=311, col_offset=0), If(Compare(Name('__name__', Load(), lineno=316, col_offset=3), [Eq()], [Str('__main__', lineno=316, col_offset=15)], lineno=316, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=317, col_offset=4), [], [], None, None, lineno=317, col_offset=4), lineno=317, col_offset=4)], [], lineno=316, col_offset=0)])
