Module([Expr(Str("This test case provides support for checking forking and wait behavior.\n\nTo test different wait behavior, override the wait_impl method.\n\nWe want fork1() semantics -- only the forking thread survives in the\nchild after a fork().\n\nOn some systems (e.g. Solaris without posix threads) we find that all\nactive threads survive in the child after a fork(); this is an error.\n\nWhile BeOS doesn't officially support fork and native threading in\nthe same application, the present example should work just fine.  DC\n", lineno=13, col_offset=-1), lineno=13, col_offset=-1), Import([alias('os', None), alias('sys', None), alias('time', None), alias('unittest', None)], lineno=15, col_offset=0), Import([alias('test.test_support', 'test_support')], lineno=16, col_offset=0), Assign([Name('thread', Store(), lineno=17, col_offset=0)], Call(Attribute(Name('test_support', Load(), lineno=17, col_offset=9), 'import_module', Load(), lineno=17, col_offset=9), [Str('thread', lineno=17, col_offset=36)], [], None, None, lineno=17, col_offset=9), lineno=17, col_offset=0), Assign([Name('LONGSLEEP', Store(), lineno=19, col_offset=0)], Num(2, lineno=19, col_offset=12), lineno=19, col_offset=0), Assign([Name('SHORTSLEEP', Store(), lineno=20, col_offset=0)], Num(0.5, lineno=20, col_offset=13), lineno=20, col_offset=0), Assign([Name('NUM_THREADS', Store(), lineno=21, col_offset=0)], Num(4, lineno=21, col_offset=14), lineno=21, col_offset=0), ClassDef('ForkWait', [Attribute(Name('unittest', Load(), lineno=23, col_offset=15), 'TestCase', Load(), lineno=23, col_offset=15)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=25, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=26, col_offset=8), 'alive', Store(), lineno=26, col_offset=8)], Dict([], [], lineno=26, col_offset=21), lineno=26, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=27, col_offset=8), 'stop', Store(), lineno=27, col_offset=8)], Num(0, lineno=27, col_offset=20), lineno=27, col_offset=8)], [], lineno=25, col_offset=4), FunctionDef('f', arguments([Name('self', Param(), lineno=29, col_offset=10), Name('id', Param(), lineno=29, col_offset=16)], None, None, []), [While(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=30, col_offset=18), 'stop', Load(), lineno=30, col_offset=18), lineno=30, col_offset=14), [Assign([Subscript(Attribute(Name('self', Load(), lineno=31, col_offset=12), 'alive', Load(), lineno=31, col_offset=12), Index(Name('id', Load(), lineno=31, col_offset=23)), Store(), lineno=31, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=31, col_offset=29), 'getpid', Load(), lineno=31, col_offset=29), [], [], None, None, lineno=31, col_offset=29), lineno=31, col_offset=12), TryExcept([Expr(Call(Attribute(Name('time', Load(), lineno=33, col_offset=16), 'sleep', Load(), lineno=33, col_offset=16), [Name('SHORTSLEEP', Load(), lineno=33, col_offset=27)], [], None, None, lineno=33, col_offset=16), lineno=33, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=34, col_offset=19), None, [Pass( lineno=35, col_offset=16)], lineno=34, col_offset=12)], [], lineno=32, col_offset=12)], [], lineno=30, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('wait_impl', arguments([Name('self', Param(), lineno=37, col_offset=18), Name('cpid', Param(), lineno=37, col_offset=24)], None, None, []), [For(Name('i', Store(), lineno=38, col_offset=12), Call(Name('range', Load(), lineno=38, col_offset=17), [Num(10, lineno=38, col_offset=23)], [], None, None, lineno=38, col_offset=17), [Assign([Tuple([Name('spid', Store(), lineno=41, col_offset=12), Name('status', Store(), lineno=41, col_offset=18)], Store(), lineno=41, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=41, col_offset=27), 'waitpid', Load(), lineno=41, col_offset=27), [Name('cpid', Load(), lineno=41, col_offset=38), Attribute(Name('os', Load(), lineno=41, col_offset=44), 'WNOHANG', Load(), lineno=41, col_offset=44)], [], None, None, lineno=41, col_offset=27), lineno=41, col_offset=12), If(Compare(Name('spid', Load(), lineno=42, col_offset=15), [Eq()], [Name('cpid', Load(), lineno=42, col_offset=23)], lineno=42, col_offset=15), [Break( lineno=43, col_offset=16)], [], lineno=42, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=44, col_offset=12), 'sleep', Load(), lineno=44, col_offset=12), [BinOp(Num(2, lineno=44, col_offset=23), Mult(), Name('SHORTSLEEP', Load(), lineno=44, col_offset=27), lineno=44, col_offset=23)], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12)], [], lineno=38, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=46, col_offset=8), 'assertEqual', Load(), lineno=46, col_offset=8), [Name('spid', Load(), lineno=46, col_offset=25), Name('cpid', Load(), lineno=46, col_offset=31)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=47, col_offset=8), 'assertEqual', Load(), lineno=47, col_offset=8), [Name('status', Load(), lineno=47, col_offset=25), Num(0, lineno=47, col_offset=33), BinOp(Str('cause = %d, exit = %d', lineno=47, col_offset=36), Mod(), Tuple([BinOp(Name('status', Load(), lineno=47, col_offset=63), BitAnd(), Num(255, lineno=47, col_offset=70), lineno=47, col_offset=63), BinOp(Name('status', Load(), lineno=47, col_offset=76), RShift(), Num(8, lineno=47, col_offset=84), lineno=47, col_offset=76)], Load(), lineno=47, col_offset=63), lineno=47, col_offset=36)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('test_wait', arguments([Name('self', Param(), lineno=49, col_offset=18)], None, None, []), [For(Name('i', Store(), lineno=50, col_offset=12), Call(Name('range', Load(), lineno=50, col_offset=17), [Name('NUM_THREADS', Load(), lineno=50, col_offset=23)], [], None, None, lineno=50, col_offset=17), [Expr(Call(Attribute(Name('thread', Load(), lineno=51, col_offset=12), 'start_new', Load(), lineno=51, col_offset=12), [Attribute(Name('self', Load(), lineno=51, col_offset=29), 'f', Load(), lineno=51, col_offset=29), Tuple([Name('i', Load(), lineno=51, col_offset=38)], Load(), lineno=51, col_offset=38)], [], None, None, lineno=51, col_offset=12), lineno=51, col_offset=12)], [], lineno=50, col_offset=8), Expr(Call(Attribute(Name('time', Load(), lineno=53, col_offset=8), 'sleep', Load(), lineno=53, col_offset=8), [Name('LONGSLEEP', Load(), lineno=53, col_offset=19)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8), Assign([Name('a', Store(), lineno=55, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=55, col_offset=12), 'alive', Load(), lineno=55, col_offset=12), 'keys', Load(), lineno=55, col_offset=12), [], [], None, None, lineno=55, col_offset=12), lineno=55, col_offset=8), Expr(Call(Attribute(Name('a', Load(), lineno=56, col_offset=8), 'sort', Load(), lineno=56, col_offset=8), [], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=57, col_offset=8), 'assertEqual', Load(), lineno=57, col_offset=8), [Name('a', Load(), lineno=57, col_offset=25), Call(Name('range', Load(), lineno=57, col_offset=28), [Name('NUM_THREADS', Load(), lineno=57, col_offset=34)], [], None, None, lineno=57, col_offset=28)], [], None, None, lineno=57, col_offset=8), lineno=57, col_offset=8), Assign([Name('prefork_lives', Store(), lineno=59, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=59, col_offset=24), 'alive', Load(), lineno=59, col_offset=24), 'copy', Load(), lineno=59, col_offset=24), [], [], None, None, lineno=59, col_offset=24), lineno=59, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=61, col_offset=11), 'platform', Load(), lineno=61, col_offset=11), [In()], [List([Str('unixware7', lineno=61, col_offset=28)], Load(), lineno=61, col_offset=27)], lineno=61, col_offset=11), [Assign([Name('cpid', Store(), lineno=62, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=62, col_offset=19), 'fork1', Load(), lineno=62, col_offset=19), [], [], None, None, lineno=62, col_offset=19), lineno=62, col_offset=12)], [Assign([Name('cpid', Store(), lineno=64, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=64, col_offset=19), 'fork', Load(), lineno=64, col_offset=19), [], [], None, None, lineno=64, col_offset=19), lineno=64, col_offset=12)], lineno=61, col_offset=8), If(Compare(Name('cpid', Load(), lineno=66, col_offset=11), [Eq()], [Num(0, lineno=66, col_offset=19)], lineno=66, col_offset=11), [Expr(Call(Attribute(Name('time', Load(), lineno=68, col_offset=12), 'sleep', Load(), lineno=68, col_offset=12), [Name('LONGSLEEP', Load(), lineno=68, col_offset=23)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12), Assign([Name('n', Store(), lineno=69, col_offset=12)], Num(0, lineno=69, col_offset=16), lineno=69, col_offset=12), For(Name('key', Store(), lineno=70, col_offset=16), Attribute(Name('self', Load(), lineno=70, col_offset=23), 'alive', Load(), lineno=70, col_offset=23), [If(Compare(Subscript(Attribute(Name('self', Load(), lineno=71, col_offset=19), 'alive', Load(), lineno=71, col_offset=19), Index(Name('key', Load(), lineno=71, col_offset=30)), Load(), lineno=71, col_offset=19), [NotEq()], [Subscript(Name('prefork_lives', Load(), lineno=71, col_offset=38), Index(Name('key', Load(), lineno=71, col_offset=52)), Load(), lineno=71, col_offset=38)], lineno=71, col_offset=19), [AugAssign(Name('n', Store(), lineno=72, col_offset=20), Add(), Num(1, lineno=72, col_offset=25), lineno=72, col_offset=20)], [], lineno=71, col_offset=16)], [], lineno=70, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=73, col_offset=12), '_exit', Load(), lineno=73, col_offset=12), [Name('n', Load(), lineno=73, col_offset=21)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'wait_impl', Load(), lineno=76, col_offset=12), [Name('cpid', Load(), lineno=76, col_offset=27)], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=12), 'stop', Store(), lineno=78, col_offset=12)], Num(1, lineno=78, col_offset=24), lineno=78, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=79, col_offset=12), 'sleep', Load(), lineno=79, col_offset=12), [BinOp(Num(2, lineno=79, col_offset=23), Mult(), Name('SHORTSLEEP', Load(), lineno=79, col_offset=25), lineno=79, col_offset=23)], [], None, None, lineno=79, col_offset=12), lineno=79, col_offset=12)], lineno=66, col_offset=8)], [], lineno=49, col_offset=4)], [], lineno=23, col_offset=0)])
