Module([Expr(Str('\nFrom gdb 7 onwards, gdb\'s build can be configured --with-python, allowing gdb\nto be extended with Python code e.g. for library-specific data visualizations,\nsuch as for the C++ STL types.  Documentation on this API can be seen at:\nhttp://sourceware.org/gdb/current/onlinedocs/gdb/Python-API.html\n\n\nThis python module deals with the case when the process being debugged (the\n"inferior process" in gdb parlance) is itself python, or more specifically,\nlinked against libpython.  In this situation, almost every item of data is a\n(PyObject*), and having the debugger merely print their addresses is not very\nenlightening.\n\nThis module embeds knowledge about the implementation details of libpython so\nthat we can emit useful visualizations e.g. a string, a list, a dict, a frame\ngiving file/line information and the state of local variables\n\nIn particular, given a gdb.Value corresponding to a PyObject* in the inferior\nprocess, we can generate a "proxy value" within the gdb process.  For example,\ngiven a PyObject* in the inferior process that is in fact a PyListObject*\nholding three PyObject* that turn out to be PyStringObject* instances, we can\ngenerate a proxy value within the gdb process that is a list of strings:\n  ["foo", "bar", "baz"]\n\nDoing so can be expensive for complicated graphs of objects, and could take\nsome time, so we also have a "write_repr" method that writes a representation\nof the data to a file-like object.  This allows us to stop the traversal by\nhaving the file-like object raise an exception if it gets too much data.\n\nWith both "proxyval" and "write_repr" we keep track of the set of all addresses\nvisited so far in the traversal, to avoid infinite recursion due to cycles in\nthe graph of object references.\n\nWe try to defer gdb.lookup_type() invocations for python types until as late as\npossible: for a dynamically linked python binary, when the process starts in\nthe debugger, the libpython.so hasn\'t been dynamically loaded yet, so none of\nthe type names are known to the debugger\n\nThe module also extends gdb with some python-specific commands.\n', lineno=41, col_offset=-1), lineno=41, col_offset=-1), ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=42, col_offset=0), Import([alias('gdb', None)], lineno=43, col_offset=0), Import([alias('sys', None)], lineno=44, col_offset=0), Assign([Name('_type_char_ptr', Store(), lineno=47, col_offset=0)], Call(Attribute(Call(Attribute(Name('gdb', Load(), lineno=47, col_offset=17), 'lookup_type', Load(), lineno=47, col_offset=17), [Str('char', lineno=47, col_offset=33)], [], None, None, lineno=47, col_offset=17), 'pointer', Load(), lineno=47, col_offset=17), [], [], None, None, lineno=47, col_offset=17), lineno=47, col_offset=0), Assign([Name('_type_unsigned_char_ptr', Store(), lineno=48, col_offset=0)], Call(Attribute(Call(Attribute(Name('gdb', Load(), lineno=48, col_offset=26), 'lookup_type', Load(), lineno=48, col_offset=26), [Str('unsigned char', lineno=48, col_offset=42)], [], None, None, lineno=48, col_offset=26), 'pointer', Load(), lineno=48, col_offset=26), [], [], None, None, lineno=48, col_offset=26), lineno=48, col_offset=0), Assign([Name('_type_void_ptr', Store(), lineno=49, col_offset=0)], Call(Attribute(Call(Attribute(Name('gdb', Load(), lineno=49, col_offset=17), 'lookup_type', Load(), lineno=49, col_offset=17), [Str('void', lineno=49, col_offset=33)], [], None, None, lineno=49, col_offset=17), 'pointer', Load(), lineno=49, col_offset=17), [], [], None, None, lineno=49, col_offset=17), lineno=49, col_offset=0), Assign([Name('_type_size_t', Store(), lineno=50, col_offset=0)], Call(Attribute(Name('gdb', Load(), lineno=50, col_offset=15), 'lookup_type', Load(), lineno=50, col_offset=15), [Str('size_t', lineno=50, col_offset=31)], [], None, None, lineno=50, col_offset=15), lineno=50, col_offset=0), Assign([Name('SIZEOF_VOID_P', Store(), lineno=52, col_offset=0)], Attribute(Name('_type_void_ptr', Load(), lineno=52, col_offset=16), 'sizeof', Load(), lineno=52, col_offset=16), lineno=52, col_offset=0), Assign([Name('Py_TPFLAGS_HEAPTYPE', Store(), lineno=55, col_offset=0)], BinOp(Num(1L, lineno=55, col_offset=23), LShift(), Num(9, lineno=55, col_offset=29), lineno=55, col_offset=23), lineno=55, col_offset=0), Assign([Name('Py_TPFLAGS_INT_SUBCLASS', Store(), lineno=57, col_offset=0)], BinOp(Num(1L, lineno=57, col_offset=32), LShift(), Num(23, lineno=57, col_offset=38), lineno=57, col_offset=32), lineno=57, col_offset=0), Assign([Name('Py_TPFLAGS_LONG_SUBCLASS', Store(), lineno=58, col_offset=0)], BinOp(Num(1L, lineno=58, col_offset=32), LShift(), Num(24, lineno=58, col_offset=38), lineno=58, col_offset=32), lineno=58, col_offset=0), Assign([Name('Py_TPFLAGS_LIST_SUBCLASS', Store(), lineno=59, col_offset=0)], BinOp(Num(1L, lineno=59, col_offset=32), LShift(), Num(25, lineno=59, col_offset=38), lineno=59, col_offset=32), lineno=59, col_offset=0), Assign([Name('Py_TPFLAGS_TUPLE_SUBCLASS', Store(), lineno=60, col_offset=0)], BinOp(Num(1L, lineno=60, col_offset=32), LShift(), Num(26, lineno=60, col_offset=38), lineno=60, col_offset=32), lineno=60, col_offset=0), Assign([Name('Py_TPFLAGS_STRING_SUBCLASS', Store(), lineno=61, col_offset=0)], BinOp(Num(1L, lineno=61, col_offset=32), LShift(), Num(27, lineno=61, col_offset=38), lineno=61, col_offset=32), lineno=61, col_offset=0), Assign([Name('Py_TPFLAGS_UNICODE_SUBCLASS', Store(), lineno=62, col_offset=0)], BinOp(Num(1L, lineno=62, col_offset=32), LShift(), Num(28, lineno=62, col_offset=38), lineno=62, col_offset=32), lineno=62, col_offset=0), Assign([Name('Py_TPFLAGS_DICT_SUBCLASS', Store(), lineno=63, col_offset=0)], BinOp(Num(1L, lineno=63, col_offset=32), LShift(), Num(29, lineno=63, col_offset=38), lineno=63, col_offset=32), lineno=63, col_offset=0), Assign([Name('Py_TPFLAGS_BASE_EXC_SUBCLASS', Store(), lineno=64, col_offset=0)], BinOp(Num(1L, lineno=64, col_offset=32), LShift(), Num(30, lineno=64, col_offset=38), lineno=64, col_offset=32), lineno=64, col_offset=0), Assign([Name('Py_TPFLAGS_TYPE_SUBCLASS', Store(), lineno=65, col_offset=0)], BinOp(Num(1L, lineno=65, col_offset=32), LShift(), Num(31, lineno=65, col_offset=38), lineno=65, col_offset=32), lineno=65, col_offset=0), Assign([Name('MAX_OUTPUT_LEN', Store(), lineno=68, col_offset=0)], Num(1024, lineno=68, col_offset=15), lineno=68, col_offset=0), ClassDef('NullPyObjectPtr', [Name('RuntimeError', Load(), lineno=70, col_offset=22)], [Pass( lineno=71, col_offset=4)], [], lineno=70, col_offset=0), FunctionDef('safety_limit', arguments([Name('val', Param(), lineno=74, col_offset=17)], None, None, []), [Return(Call(Name('min', Load(), lineno=78, col_offset=11), [Name('val', Load(), lineno=78, col_offset=15), Num(1000, lineno=78, col_offset=20)], [], None, None, lineno=78, col_offset=11), lineno=78, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('safe_range', arguments([Name('val', Param(), lineno=81, col_offset=15)], None, None, []), [Return(Call(Name('xrange', Load(), lineno=84, col_offset=11), [Call(Name('safety_limit', Load(), lineno=84, col_offset=18), [Name('val', Load(), lineno=84, col_offset=31)], [], None, None, lineno=84, col_offset=18)], [], None, None, lineno=84, col_offset=11), lineno=84, col_offset=4)], [], lineno=81, col_offset=0), ClassDef('StringTruncated', [Name('RuntimeError', Load(), lineno=87, col_offset=22)], [Pass( lineno=88, col_offset=4)], [], lineno=87, col_offset=0), ClassDef('TruncatedStringIO', [Name('object', Load(), lineno=90, col_offset=24)], [Expr(Str('Similar to cStringIO, but can truncate the output by raising a\n    StringTruncated exception', lineno=92, col_offset=-1), lineno=92, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=93, col_offset=17), Name('maxlen', Param(), lineno=93, col_offset=23)], None, None, [Name('None', Load(), lineno=93, col_offset=30)]), [Assign([Attribute(Name('self', Load(), lineno=94, col_offset=8), '_val', Store(), lineno=94, col_offset=8)], Str('', lineno=94, col_offset=20), lineno=94, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=95, col_offset=8), 'maxlen', Store(), lineno=95, col_offset=8)], Name('maxlen', Load(), lineno=95, col_offset=22), lineno=95, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=97, col_offset=14), Name('data', Param(), lineno=97, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=98, col_offset=11), 'maxlen', Load(), lineno=98, col_offset=11), [If(Compare(BinOp(Call(Name('len', Load(), lineno=99, col_offset=15), [Name('data', Load(), lineno=99, col_offset=19)], [], None, None, lineno=99, col_offset=15), Add(), Call(Name('len', Load(), lineno=99, col_offset=27), [Attribute(Name('self', Load(), lineno=99, col_offset=31), '_val', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=27), lineno=99, col_offset=15), [Gt()], [Attribute(Name('self', Load(), lineno=99, col_offset=44), 'maxlen', Load(), lineno=99, col_offset=44)], lineno=99, col_offset=15), [AugAssign(Attribute(Name('self', Load(), lineno=101, col_offset=16), '_val', Store(), lineno=101, col_offset=16), Add(), Subscript(Name('data', Load(), lineno=101, col_offset=29), Slice(Num(0, lineno=101, col_offset=34), BinOp(Attribute(Name('self', Load(), lineno=101, col_offset=36), 'maxlen', Load(), lineno=101, col_offset=36), Sub(), Call(Name('len', Load(), lineno=101, col_offset=50), [Attribute(Name('self', Load(), lineno=101, col_offset=54), '_val', Load(), lineno=101, col_offset=54)], [], None, None, lineno=101, col_offset=50), lineno=101, col_offset=36), None), Load(), lineno=101, col_offset=29), lineno=101, col_offset=16), Raise(Call(Name('StringTruncated', Load(), lineno=102, col_offset=22), [], [], None, None, lineno=102, col_offset=22), None, None, lineno=102, col_offset=16)], [], lineno=99, col_offset=12)], [], lineno=98, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=104, col_offset=8), '_val', Store(), lineno=104, col_offset=8), Add(), Name('data', Load(), lineno=104, col_offset=21), lineno=104, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=106, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=107, col_offset=15), '_val', Load(), lineno=107, col_offset=15), lineno=107, col_offset=8)], [], lineno=106, col_offset=4)], [], lineno=90, col_offset=0), ClassDef('PyObjectPtr', [Name('object', Load(), lineno=109, col_offset=18)], [Expr(Str("\n    Class wrapping a gdb.Value that's a either a (PyObject*) within the\n    inferior process, or some subclass pointer e.g. (PyStringObject*)\n\n    There will be a subclass for every refined PyObject type that we care\n    about.\n\n    Note that at every stage the underlying pointer could be NULL, point\n    to corrupt data, etc; this is the debugger, after all.\n    ", lineno=119, col_offset=-1), lineno=119, col_offset=-1), Assign([Name('_typename', Store(), lineno=120, col_offset=4)], Str('PyObject', lineno=120, col_offset=16), lineno=120, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=122, col_offset=17), Name('gdbval', Param(), lineno=122, col_offset=23), Name('cast_to', Param(), lineno=122, col_offset=31)], None, None, [Name('None', Load(), lineno=122, col_offset=39)]), [If(Name('cast_to', Load(), lineno=123, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=124, col_offset=12), '_gdbval', Store(), lineno=124, col_offset=12)], Call(Attribute(Name('gdbval', Load(), lineno=124, col_offset=27), 'cast', Load(), lineno=124, col_offset=27), [Name('cast_to', Load(), lineno=124, col_offset=39)], [], None, None, lineno=124, col_offset=27), lineno=124, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=126, col_offset=12), '_gdbval', Store(), lineno=126, col_offset=12)], Name('gdbval', Load(), lineno=126, col_offset=27), lineno=126, col_offset=12)], lineno=123, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('field', arguments([Name('self', Param(), lineno=128, col_offset=14), Name('name', Param(), lineno=128, col_offset=20)], None, None, []), [Expr(Str('\n        Get the gdb.Value for the given field within the PyObject, coping with\n        some python 2 versus python 3 differences.\n\n        Various libpython types are defined using the "PyObject_HEAD" and\n        "PyObject_VAR_HEAD" macros.\n\n        In Python 2, this these are defined so that "ob_type" and (for a var\n        object) "ob_size" are fields of the type in question.\n\n        In Python 3, this is defined as an embedded PyVarObject type thus:\n           PyVarObject ob_base;\n        so that the "ob_size" field is located insize the "ob_base" field, and\n        the "ob_type" is most easily accessed by casting back to a (PyObject*).\n        ', lineno=143, col_offset=-1), lineno=143, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=144, col_offset=11), 'is_null', Load(), lineno=144, col_offset=11), [], [], None, None, lineno=144, col_offset=11), [Raise(Call(Name('NullPyObjectPtr', Load(), lineno=145, col_offset=18), [Name('self', Load(), lineno=145, col_offset=34)], [], None, None, lineno=145, col_offset=18), None, None, lineno=145, col_offset=12)], [], lineno=144, col_offset=8), If(Compare(Name('name', Load(), lineno=147, col_offset=11), [Eq()], [Str('ob_type', lineno=147, col_offset=19)], lineno=147, col_offset=11), [Assign([Name('pyo_ptr', Store(), lineno=148, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=148, col_offset=22), '_gdbval', Load(), lineno=148, col_offset=22), 'cast', Load(), lineno=148, col_offset=22), [Call(Attribute(Name('PyObjectPtr', Load(), lineno=148, col_offset=40), 'get_gdb_type', Load(), lineno=148, col_offset=40), [], [], None, None, lineno=148, col_offset=40)], [], None, None, lineno=148, col_offset=22), lineno=148, col_offset=12), Return(Subscript(Call(Attribute(Name('pyo_ptr', Load(), lineno=149, col_offset=19), 'dereference', Load(), lineno=149, col_offset=19), [], [], None, None, lineno=149, col_offset=19), Index(Name('name', Load(), lineno=149, col_offset=41)), Load(), lineno=149, col_offset=19), lineno=149, col_offset=12)], [], lineno=147, col_offset=8), If(Compare(Name('name', Load(), lineno=151, col_offset=11), [Eq()], [Str('ob_size', lineno=151, col_offset=19)], lineno=151, col_offset=11), [TryExcept([Return(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=154, col_offset=23), '_gdbval', Load(), lineno=154, col_offset=23), 'dereference', Load(), lineno=154, col_offset=23), [], [], None, None, lineno=154, col_offset=23), Index(Name('name', Load(), lineno=154, col_offset=50)), Load(), lineno=154, col_offset=23), lineno=154, col_offset=16)], [ExceptHandler(Name('RuntimeError', Load(), lineno=155, col_offset=19), None, [Return(Subscript(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=157, col_offset=23), '_gdbval', Load(), lineno=157, col_offset=23), 'dereference', Load(), lineno=157, col_offset=23), [], [], None, None, lineno=157, col_offset=23), Index(Str('ob_base', lineno=157, col_offset=50)), Load(), lineno=157, col_offset=23), Index(Name('name', Load(), lineno=157, col_offset=61)), Load(), lineno=157, col_offset=23), lineno=157, col_offset=16)], lineno=155, col_offset=12)], [], lineno=152, col_offset=12)], [], lineno=151, col_offset=8), Return(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=160, col_offset=15), '_gdbval', Load(), lineno=160, col_offset=15), 'dereference', Load(), lineno=160, col_offset=15), [], [], None, None, lineno=160, col_offset=15), Index(Name('name', Load(), lineno=160, col_offset=42)), Load(), lineno=160, col_offset=15), lineno=160, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('pyop_field', arguments([Name('self', Param(), lineno=162, col_offset=19), Name('name', Param(), lineno=162, col_offset=25)], None, None, []), [Expr(Str('\n        Get a PyObjectPtr for the given PyObject* field within this PyObject,\n        coping with some python 2 versus python 3 differences.\n        ', lineno=166, col_offset=-1), lineno=166, col_offset=-1), Return(Call(Attribute(Name('PyObjectPtr', Load(), lineno=167, col_offset=15), 'from_pyobject_ptr', Load(), lineno=167, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=167, col_offset=45), 'field', Load(), lineno=167, col_offset=45), [Name('name', Load(), lineno=167, col_offset=56)], [], None, None, lineno=167, col_offset=45)], [], None, None, lineno=167, col_offset=15), lineno=167, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('write_field_repr', arguments([Name('self', Param(), lineno=169, col_offset=25), Name('name', Param(), lineno=169, col_offset=31), Name('out', Param(), lineno=169, col_offset=37), Name('visited', Param(), lineno=169, col_offset=42)], None, None, []), [Expr(Str('\n        Extract the PyObject* field named "name", and write its representation\n        to file-like object "out"\n        ', lineno=173, col_offset=-1), lineno=173, col_offset=-1), Assign([Name('field_obj', Store(), lineno=174, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=174, col_offset=20), 'pyop_field', Load(), lineno=174, col_offset=20), [Name('name', Load(), lineno=174, col_offset=36)], [], None, None, lineno=174, col_offset=20), lineno=174, col_offset=8), Expr(Call(Attribute(Name('field_obj', Load(), lineno=175, col_offset=8), 'write_repr', Load(), lineno=175, col_offset=8), [Name('out', Load(), lineno=175, col_offset=29), Name('visited', Load(), lineno=175, col_offset=34)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('get_truncated_repr', arguments([Name('self', Param(), lineno=177, col_offset=27), Name('maxlen', Param(), lineno=177, col_offset=33)], None, None, []), [Expr(Str('\n        Get a repr-like string for the data, but truncate it at "maxlen" bytes\n        (ending the object graph traversal as soon as you do)\n        ', lineno=181, col_offset=-1), lineno=181, col_offset=-1), Assign([Name('out', Store(), lineno=182, col_offset=8)], Call(Name('TruncatedStringIO', Load(), lineno=182, col_offset=14), [Name('maxlen', Load(), lineno=182, col_offset=32)], [], None, None, lineno=182, col_offset=14), lineno=182, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=12), 'write_repr', Load(), lineno=184, col_offset=12), [Name('out', Load(), lineno=184, col_offset=28), Call(Name('set', Load(), lineno=184, col_offset=33), [], [], None, None, lineno=184, col_offset=33)], [], None, None, lineno=184, col_offset=12), lineno=184, col_offset=12)], [ExceptHandler(Name('StringTruncated', Load(), lineno=185, col_offset=15), None, [Return(BinOp(Call(Attribute(Name('out', Load(), lineno=187, col_offset=19), 'getvalue', Load(), lineno=187, col_offset=19), [], [], None, None, lineno=187, col_offset=19), Add(), Str('...(truncated)', lineno=187, col_offset=36), lineno=187, col_offset=19), lineno=187, col_offset=12)], lineno=185, col_offset=8)], [], lineno=183, col_offset=8), Return(Call(Attribute(Name('out', Load(), lineno=190, col_offset=15), 'getvalue', Load(), lineno=190, col_offset=15), [], [], None, None, lineno=190, col_offset=15), lineno=190, col_offset=8)], [], lineno=177, col_offset=4), FunctionDef('type', arguments([Name('self', Param(), lineno=192, col_offset=13)], None, None, []), [Return(Call(Name('PyTypeObjectPtr', Load(), lineno=193, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=193, col_offset=31), 'field', Load(), lineno=193, col_offset=31), [Str('ob_type', lineno=193, col_offset=42)], [], None, None, lineno=193, col_offset=31)], [], None, None, lineno=193, col_offset=15), lineno=193, col_offset=8)], [], lineno=192, col_offset=4), FunctionDef('is_null', arguments([Name('self', Param(), lineno=195, col_offset=16)], None, None, []), [Return(Compare(Num(0, lineno=196, col_offset=15), [Eq()], [Call(Name('long', Load(), lineno=196, col_offset=20), [Attribute(Name('self', Load(), lineno=196, col_offset=25), '_gdbval', Load(), lineno=196, col_offset=25)], [], None, None, lineno=196, col_offset=20)], lineno=196, col_offset=15), lineno=196, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('is_optimized_out', arguments([Name('self', Param(), lineno=198, col_offset=25)], None, None, []), [Expr(Str('\n        Is the value of the underlying PyObject* visible to the debugger?\n\n        This can vary with the precise version of the compiler used to build\n        Python, and the precise version of gdb.\n\n        See e.g. https://bugzilla.redhat.com/show_bug.cgi?id=556975 with\n        PyEval_EvalFrameEx\'s "f"\n        ', lineno=207, col_offset=-1), lineno=207, col_offset=-1), Return(Attribute(Attribute(Name('self', Load(), lineno=208, col_offset=15), '_gdbval', Load(), lineno=208, col_offset=15), 'is_optimized_out', Load(), lineno=208, col_offset=15), lineno=208, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('safe_tp_name', arguments([Name('self', Param(), lineno=210, col_offset=21)], None, None, []), [TryExcept([Return(Call(Attribute(Call(Attribute(Call(Attribute(Name('self', Load(), lineno=212, col_offset=19), 'type', Load(), lineno=212, col_offset=19), [], [], None, None, lineno=212, col_offset=19), 'field', Load(), lineno=212, col_offset=19), [Str('tp_name', lineno=212, col_offset=37)], [], None, None, lineno=212, col_offset=19), 'string', Load(), lineno=212, col_offset=19), [], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=12)], [ExceptHandler(Name('NullPyObjectPtr', Load(), lineno=213, col_offset=15), None, [Return(Str('unknown', lineno=215, col_offset=19), lineno=215, col_offset=12)], lineno=213, col_offset=8), ExceptHandler(Name('RuntimeError', Load(), lineno=216, col_offset=15), None, [Return(Str('unknown', lineno=218, col_offset=19), lineno=218, col_offset=12)], lineno=216, col_offset=8)], [], lineno=211, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=220, col_offset=17), Name('visited', Param(), lineno=220, col_offset=23)], None, None, []), [Expr(Str('\n        Scrape a value from the inferior process, and try to represent it\n        within the gdb process, whilst (hopefully) avoiding crashes when\n        the remote data is corrupt.\n\n        Derived classes will override this.\n\n        For example, a PyIntObject* with ob_ival 42 in the inferior process\n        should result in an int(42) in this process.\n\n        visited: a set of all gdb.Value pyobject pointers already visited\n        whilst generating this value (to guard against infinite recursion when\n        visiting object graphs with loops).  Analogous to Py_ReprEnter and\n        Py_ReprLeave\n        ', lineno=235, col_offset=-1), lineno=235, col_offset=-1), ClassDef('FakeRepr', [Name('object', Load(), lineno=237, col_offset=23)], [Expr(Str("\n            Class representing a non-descript PyObject* value in the inferior\n            process for when we don't have a custom scraper, intended to have\n            a sane repr().\n            ", lineno=242, col_offset=-1), lineno=242, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=244, col_offset=25), Name('tp_name', Param(), lineno=244, col_offset=31), Name('address', Param(), lineno=244, col_offset=40)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=245, col_offset=16), 'tp_name', Store(), lineno=245, col_offset=16)], Name('tp_name', Load(), lineno=245, col_offset=31), lineno=245, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=246, col_offset=16), 'address', Store(), lineno=246, col_offset=16)], Name('address', Load(), lineno=246, col_offset=31), lineno=246, col_offset=16)], [], lineno=244, col_offset=12), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=248, col_offset=25)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=252, col_offset=19), 'address', Load(), lineno=252, col_offset=19), [Eq()], [Num(0, lineno=252, col_offset=35)], lineno=252, col_offset=19), [Return(Str('0x0', lineno=253, col_offset=27), lineno=253, col_offset=20)], [], lineno=252, col_offset=16), Return(BinOp(Str('<%s at remote 0x%x>', lineno=254, col_offset=23), Mod(), Tuple([Attribute(Name('self', Load(), lineno=254, col_offset=48), 'tp_name', Load(), lineno=254, col_offset=48), Attribute(Name('self', Load(), lineno=254, col_offset=62), 'address', Load(), lineno=254, col_offset=62)], Load(), lineno=254, col_offset=48), lineno=254, col_offset=23), lineno=254, col_offset=16)], [], lineno=248, col_offset=12)], [], lineno=237, col_offset=8), Return(Call(Name('FakeRepr', Load(), lineno=256, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=256, col_offset=24), 'safe_tp_name', Load(), lineno=256, col_offset=24), [], [], None, None, lineno=256, col_offset=24), Call(Name('long', Load(), lineno=257, col_offset=24), [Attribute(Name('self', Load(), lineno=257, col_offset=29), '_gdbval', Load(), lineno=257, col_offset=29)], [], None, None, lineno=257, col_offset=24)], [], None, None, lineno=256, col_offset=15), lineno=256, col_offset=8)], [], lineno=220, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=259, col_offset=19), Name('out', Param(), lineno=259, col_offset=25), Name('visited', Param(), lineno=259, col_offset=30)], None, None, []), [Expr(Str('\n        Write a string representation of the value scraped from the inferior\n        process to "out", a file-like object.\n        ', lineno=263, col_offset=-1), lineno=263, col_offset=-1), Return(Call(Attribute(Name('out', Load(), lineno=267, col_offset=15), 'write', Load(), lineno=267, col_offset=15), [Call(Name('repr', Load(), lineno=267, col_offset=25), [Call(Attribute(Name('self', Load(), lineno=267, col_offset=30), 'proxyval', Load(), lineno=267, col_offset=30), [Name('visited', Load(), lineno=267, col_offset=44)], [], None, None, lineno=267, col_offset=30)], [], None, None, lineno=267, col_offset=25)], [], None, None, lineno=267, col_offset=15), lineno=267, col_offset=8)], [], lineno=259, col_offset=4), FunctionDef('subclass_from_type', arguments([Name('cls', Param(), lineno=270, col_offset=27), Name('t', Param(), lineno=270, col_offset=32)], None, None, []), [Expr(Str('\n        Given a PyTypeObjectPtr instance wrapping a gdb.Value that\'s a\n        (PyTypeObject*), determine the corresponding subclass of PyObjectPtr\n        to use\n\n        Ideally, we would look up the symbols for the global types, but that\n        isn\'t working yet:\n          (gdb) python print gdb.lookup_symbol(\'PyList_Type\')[0].value\n          Traceback (most recent call last):\n            File "<string>", line 1, in <module>\n          NotImplementedError: Symbol type not yet supported in Python scripts.\n          Error while executing Python code.\n\n        For now, we use tp_flags, after doing some string comparisons on the\n        tp_name for some special-cases that don\'t seem to be visible through\n        flags\n        ', lineno=287, col_offset=-1), lineno=287, col_offset=-1), TryExcept([Assign([Name('tp_name', Store(), lineno=289, col_offset=12)], Call(Attribute(Call(Attribute(Name('t', Load(), lineno=289, col_offset=22), 'field', Load(), lineno=289, col_offset=22), [Str('tp_name', lineno=289, col_offset=30)], [], None, None, lineno=289, col_offset=22), 'string', Load(), lineno=289, col_offset=22), [], [], None, None, lineno=289, col_offset=22), lineno=289, col_offset=12), Assign([Name('tp_flags', Store(), lineno=290, col_offset=12)], Call(Name('int', Load(), lineno=290, col_offset=23), [Call(Attribute(Name('t', Load(), lineno=290, col_offset=27), 'field', Load(), lineno=290, col_offset=27), [Str('tp_flags', lineno=290, col_offset=35)], [], None, None, lineno=290, col_offset=27)], [], None, None, lineno=290, col_offset=23), lineno=290, col_offset=12)], [ExceptHandler(Name('RuntimeError', Load(), lineno=291, col_offset=15), None, [Return(Name('cls', Load(), lineno=294, col_offset=19), lineno=294, col_offset=12)], lineno=291, col_offset=8)], [], lineno=288, col_offset=8), Assign([Name('name_map', Store(), lineno=299, col_offset=8)], Dict([Str('bool', lineno=299, col_offset=20), Str('classobj', lineno=300, col_offset=20), Str('instance', lineno=301, col_offset=20), Str('NoneType', lineno=302, col_offset=20), Str('frame', lineno=303, col_offset=20), Str('set', lineno=304, col_offset=20), Str('frozenset', lineno=305, col_offset=20), Str('builtin_function_or_method', lineno=306, col_offset=20)], [Name('PyBoolObjectPtr', Load(), lineno=299, col_offset=28), Name('PyClassObjectPtr', Load(), lineno=300, col_offset=32), Name('PyInstanceObjectPtr', Load(), lineno=301, col_offset=32), Name('PyNoneStructPtr', Load(), lineno=302, col_offset=32), Name('PyFrameObjectPtr', Load(), lineno=303, col_offset=29), Name('PySetObjectPtr', Load(), lineno=304, col_offset=28), Name('PySetObjectPtr', Load(), lineno=305, col_offset=34), Name('PyCFunctionObjectPtr', Load(), lineno=306, col_offset=51)], lineno=299, col_offset=19), lineno=299, col_offset=8), If(Compare(Name('tp_name', Load(), lineno=308, col_offset=11), [In()], [Name('name_map', Load(), lineno=308, col_offset=22)], lineno=308, col_offset=11), [Return(Subscript(Name('name_map', Load(), lineno=309, col_offset=19), Index(Name('tp_name', Load(), lineno=309, col_offset=28)), Load(), lineno=309, col_offset=19), lineno=309, col_offset=12)], [], lineno=308, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=311, col_offset=11), BitAnd(), Name('Py_TPFLAGS_HEAPTYPE', Load(), lineno=311, col_offset=22), lineno=311, col_offset=11), [Return(Name('HeapTypeObjectPtr', Load(), lineno=312, col_offset=19), lineno=312, col_offset=12)], [], lineno=311, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=314, col_offset=11), BitAnd(), Name('Py_TPFLAGS_INT_SUBCLASS', Load(), lineno=314, col_offset=22), lineno=314, col_offset=11), [Return(Name('PyIntObjectPtr', Load(), lineno=315, col_offset=19), lineno=315, col_offset=12)], [], lineno=314, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=316, col_offset=11), BitAnd(), Name('Py_TPFLAGS_LONG_SUBCLASS', Load(), lineno=316, col_offset=22), lineno=316, col_offset=11), [Return(Name('PyLongObjectPtr', Load(), lineno=317, col_offset=19), lineno=317, col_offset=12)], [], lineno=316, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=318, col_offset=11), BitAnd(), Name('Py_TPFLAGS_LIST_SUBCLASS', Load(), lineno=318, col_offset=22), lineno=318, col_offset=11), [Return(Name('PyListObjectPtr', Load(), lineno=319, col_offset=19), lineno=319, col_offset=12)], [], lineno=318, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=320, col_offset=11), BitAnd(), Name('Py_TPFLAGS_TUPLE_SUBCLASS', Load(), lineno=320, col_offset=22), lineno=320, col_offset=11), [Return(Name('PyTupleObjectPtr', Load(), lineno=321, col_offset=19), lineno=321, col_offset=12)], [], lineno=320, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=322, col_offset=11), BitAnd(), Name('Py_TPFLAGS_STRING_SUBCLASS', Load(), lineno=322, col_offset=22), lineno=322, col_offset=11), [Return(Name('PyStringObjectPtr', Load(), lineno=323, col_offset=19), lineno=323, col_offset=12)], [], lineno=322, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=324, col_offset=11), BitAnd(), Name('Py_TPFLAGS_UNICODE_SUBCLASS', Load(), lineno=324, col_offset=22), lineno=324, col_offset=11), [Return(Name('PyUnicodeObjectPtr', Load(), lineno=325, col_offset=19), lineno=325, col_offset=12)], [], lineno=324, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=326, col_offset=11), BitAnd(), Name('Py_TPFLAGS_DICT_SUBCLASS', Load(), lineno=326, col_offset=22), lineno=326, col_offset=11), [Return(Name('PyDictObjectPtr', Load(), lineno=327, col_offset=19), lineno=327, col_offset=12)], [], lineno=326, col_offset=8), If(BinOp(Name('tp_flags', Load(), lineno=328, col_offset=11), BitAnd(), Name('Py_TPFLAGS_BASE_EXC_SUBCLASS', Load(), lineno=328, col_offset=22), lineno=328, col_offset=11), [Return(Name('PyBaseExceptionObjectPtr', Load(), lineno=329, col_offset=19), lineno=329, col_offset=12)], [], lineno=328, col_offset=8), Return(Name('cls', Load(), lineno=334, col_offset=15), lineno=334, col_offset=8)], [Name('classmethod', Load(), lineno=269, col_offset=5)], lineno=269, col_offset=4), FunctionDef('from_pyobject_ptr', arguments([Name('cls', Param(), lineno=337, col_offset=26), Name('gdbval', Param(), lineno=337, col_offset=31)], None, None, []), [Expr(Str('\n        Try to locate the appropriate derived class dynamically, and cast\n        the pointer accordingly.\n        ', lineno=341, col_offset=-1), lineno=341, col_offset=-1), TryExcept([Assign([Name('p', Store(), lineno=343, col_offset=12)], Call(Name('PyObjectPtr', Load(), lineno=343, col_offset=16), [Name('gdbval', Load(), lineno=343, col_offset=28)], [], None, None, lineno=343, col_offset=16), lineno=343, col_offset=12), Assign([Name('cls', Store(), lineno=344, col_offset=12)], Call(Attribute(Name('cls', Load(), lineno=344, col_offset=18), 'subclass_from_type', Load(), lineno=344, col_offset=18), [Call(Attribute(Name('p', Load(), lineno=344, col_offset=41), 'type', Load(), lineno=344, col_offset=41), [], [], None, None, lineno=344, col_offset=41)], [], None, None, lineno=344, col_offset=18), lineno=344, col_offset=12), Return(Call(Name('cls', Load(), lineno=345, col_offset=19), [Name('gdbval', Load(), lineno=345, col_offset=23)], [keyword('cast_to', Call(Attribute(Name('cls', Load(), lineno=345, col_offset=39), 'get_gdb_type', Load(), lineno=345, col_offset=39), [], [], None, None, lineno=345, col_offset=39))], None, None, lineno=345, col_offset=19), lineno=345, col_offset=12)], [ExceptHandler(Name('RuntimeError', Load(), lineno=346, col_offset=15), None, [Pass( lineno=349, col_offset=12)], lineno=346, col_offset=8)], [], lineno=342, col_offset=8), Return(Call(Name('cls', Load(), lineno=350, col_offset=15), [Name('gdbval', Load(), lineno=350, col_offset=19)], [], None, None, lineno=350, col_offset=15), lineno=350, col_offset=8)], [Name('classmethod', Load(), lineno=336, col_offset=5)], lineno=336, col_offset=4), FunctionDef('get_gdb_type', arguments([Name('cls', Param(), lineno=353, col_offset=21)], None, None, []), [Return(Call(Attribute(Call(Attribute(Name('gdb', Load(), lineno=354, col_offset=15), 'lookup_type', Load(), lineno=354, col_offset=15), [Attribute(Name('cls', Load(), lineno=354, col_offset=31), '_typename', Load(), lineno=354, col_offset=31)], [], None, None, lineno=354, col_offset=15), 'pointer', Load(), lineno=354, col_offset=15), [], [], None, None, lineno=354, col_offset=15), lineno=354, col_offset=8)], [Name('classmethod', Load(), lineno=352, col_offset=5)], lineno=352, col_offset=4), FunctionDef('as_address', arguments([Name('self', Param(), lineno=356, col_offset=19)], None, None, []), [Return(Call(Name('long', Load(), lineno=357, col_offset=15), [Attribute(Name('self', Load(), lineno=357, col_offset=20), '_gdbval', Load(), lineno=357, col_offset=20)], [], None, None, lineno=357, col_offset=15), lineno=357, col_offset=8)], [], lineno=356, col_offset=4)], [], lineno=109, col_offset=0), ClassDef('ProxyAlreadyVisited', [Name('object', Load(), lineno=360, col_offset=26)], [Expr(Str('\n    Placeholder proxy to use when protecting against infinite recursion due to\n    loops in the object graph.\n\n    Analogous to the values emitted by the users of Py_ReprEnter and Py_ReprLeave\n    ', lineno=366, col_offset=-1), lineno=366, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=367, col_offset=17), Name('rep', Param(), lineno=367, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=368, col_offset=8), '_rep', Store(), lineno=368, col_offset=8)], Name('rep', Load(), lineno=368, col_offset=20), lineno=368, col_offset=8)], [], lineno=367, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=370, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=371, col_offset=15), '_rep', Load(), lineno=371, col_offset=15), lineno=371, col_offset=8)], [], lineno=370, col_offset=4)], [], lineno=360, col_offset=0), FunctionDef('_write_instance_repr', arguments([Name('out', Param(), lineno=374, col_offset=25), Name('visited', Param(), lineno=374, col_offset=30), Name('name', Param(), lineno=374, col_offset=39), Name('pyop_attrdict', Param(), lineno=374, col_offset=45), Name('address', Param(), lineno=374, col_offset=60)], None, None, []), [Expr(Str('Shared code for use by old-style and new-style classes:\n    write a representation to file-like object "out"', lineno=376, col_offset=-1), lineno=376, col_offset=-1), Expr(Call(Attribute(Name('out', Load(), lineno=377, col_offset=4), 'write', Load(), lineno=377, col_offset=4), [Str('<', lineno=377, col_offset=14)], [], None, None, lineno=377, col_offset=4), lineno=377, col_offset=4), Expr(Call(Attribute(Name('out', Load(), lineno=378, col_offset=4), 'write', Load(), lineno=378, col_offset=4), [Name('name', Load(), lineno=378, col_offset=14)], [], None, None, lineno=378, col_offset=4), lineno=378, col_offset=4), If(Call(Name('isinstance', Load(), lineno=381, col_offset=7), [Name('pyop_attrdict', Load(), lineno=381, col_offset=18), Name('PyDictObjectPtr', Load(), lineno=381, col_offset=33)], [], None, None, lineno=381, col_offset=7), [Expr(Call(Attribute(Name('out', Load(), lineno=382, col_offset=8), 'write', Load(), lineno=382, col_offset=8), [Str('(', lineno=382, col_offset=18)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8), Assign([Name('first', Store(), lineno=383, col_offset=8)], Name('True', Load(), lineno=383, col_offset=16), lineno=383, col_offset=8), For(Tuple([Name('pyop_arg', Store(), lineno=384, col_offset=12), Name('pyop_val', Store(), lineno=384, col_offset=22)], Store(), lineno=384, col_offset=12), Call(Attribute(Name('pyop_attrdict', Load(), lineno=384, col_offset=34), 'iteritems', Load(), lineno=384, col_offset=34), [], [], None, None, lineno=384, col_offset=34), [If(UnaryOp(Not(), Name('first', Load(), lineno=385, col_offset=19), lineno=385, col_offset=15), [Expr(Call(Attribute(Name('out', Load(), lineno=386, col_offset=16), 'write', Load(), lineno=386, col_offset=16), [Str(', ', lineno=386, col_offset=26)], [], None, None, lineno=386, col_offset=16), lineno=386, col_offset=16)], [], lineno=385, col_offset=12), Assign([Name('first', Store(), lineno=387, col_offset=12)], Name('False', Load(), lineno=387, col_offset=20), lineno=387, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=388, col_offset=12), 'write', Load(), lineno=388, col_offset=12), [Call(Attribute(Name('pyop_arg', Load(), lineno=388, col_offset=22), 'proxyval', Load(), lineno=388, col_offset=22), [Name('visited', Load(), lineno=388, col_offset=40)], [], None, None, lineno=388, col_offset=22)], [], None, None, lineno=388, col_offset=12), lineno=388, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=389, col_offset=12), 'write', Load(), lineno=389, col_offset=12), [Str('=', lineno=389, col_offset=22)], [], None, None, lineno=389, col_offset=12), lineno=389, col_offset=12), Expr(Call(Attribute(Name('pyop_val', Load(), lineno=390, col_offset=12), 'write_repr', Load(), lineno=390, col_offset=12), [Name('out', Load(), lineno=390, col_offset=32), Name('visited', Load(), lineno=390, col_offset=37)], [], None, None, lineno=390, col_offset=12), lineno=390, col_offset=12)], [], lineno=384, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=391, col_offset=8), 'write', Load(), lineno=391, col_offset=8), [Str(')', lineno=391, col_offset=18)], [], None, None, lineno=391, col_offset=8), lineno=391, col_offset=8)], [], lineno=381, col_offset=4), Expr(Call(Attribute(Name('out', Load(), lineno=392, col_offset=4), 'write', Load(), lineno=392, col_offset=4), [BinOp(Str(' at remote 0x%x>', lineno=392, col_offset=14), Mod(), Name('address', Load(), lineno=392, col_offset=35), lineno=392, col_offset=14)], [], None, None, lineno=392, col_offset=4), lineno=392, col_offset=4)], [], lineno=374, col_offset=0), ClassDef('InstanceProxy', [Name('object', Load(), lineno=395, col_offset=20)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=397, col_offset=17), Name('cl_name', Param(), lineno=397, col_offset=23), Name('attrdict', Param(), lineno=397, col_offset=32), Name('address', Param(), lineno=397, col_offset=42)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=398, col_offset=8), 'cl_name', Store(), lineno=398, col_offset=8)], Name('cl_name', Load(), lineno=398, col_offset=23), lineno=398, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=399, col_offset=8), 'attrdict', Store(), lineno=399, col_offset=8)], Name('attrdict', Load(), lineno=399, col_offset=24), lineno=399, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=400, col_offset=8), 'address', Store(), lineno=400, col_offset=8)], Name('address', Load(), lineno=400, col_offset=23), lineno=400, col_offset=8)], [], lineno=397, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=402, col_offset=17)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=403, col_offset=11), [Attribute(Name('self', Load(), lineno=403, col_offset=22), 'attrdict', Load(), lineno=403, col_offset=22), Name('dict', Load(), lineno=403, col_offset=37)], [], None, None, lineno=403, col_offset=11), [Assign([Name('kwargs', Store(), lineno=404, col_offset=12)], Call(Attribute(Str(', ', lineno=404, col_offset=21), 'join', Load(), lineno=404, col_offset=21), [ListComp(BinOp(Str('%s=%r', lineno=404, col_offset=32), Mod(), Tuple([Name('arg', Load(), lineno=404, col_offset=43), Name('val', Load(), lineno=404, col_offset=48)], Load(), lineno=404, col_offset=43), lineno=404, col_offset=32), [comprehension(Tuple([Name('arg', Store(), lineno=405, col_offset=36), Name('val', Store(), lineno=405, col_offset=41)], Store(), lineno=405, col_offset=36), Call(Attribute(Attribute(Name('self', Load(), lineno=405, col_offset=48), 'attrdict', Load(), lineno=405, col_offset=48), 'iteritems', Load(), lineno=405, col_offset=48), [], [], None, None, lineno=405, col_offset=48), [])], lineno=404, col_offset=32)], [], None, None, lineno=404, col_offset=21), lineno=404, col_offset=12), Return(BinOp(Str('<%s(%s) at remote 0x%x>', lineno=406, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=406, col_offset=48), 'cl_name', Load(), lineno=406, col_offset=48), Name('kwargs', Load(), lineno=407, col_offset=48), Attribute(Name('self', Load(), lineno=407, col_offset=56), 'address', Load(), lineno=407, col_offset=56)], Load(), lineno=406, col_offset=48), lineno=406, col_offset=19), lineno=406, col_offset=12)], [Return(BinOp(Str('<%s at remote 0x%x>', lineno=409, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=409, col_offset=44), 'cl_name', Load(), lineno=409, col_offset=44), Attribute(Name('self', Load(), lineno=410, col_offset=44), 'address', Load(), lineno=410, col_offset=44)], Load(), lineno=409, col_offset=44), lineno=409, col_offset=19), lineno=409, col_offset=12)], lineno=403, col_offset=8)], [], lineno=402, col_offset=4)], [], lineno=395, col_offset=0), FunctionDef('_PyObject_VAR_SIZE', arguments([Name('typeobj', Param(), lineno=412, col_offset=23), Name('nitems', Param(), lineno=412, col_offset=32)], None, None, []), [Return(Call(Attribute(BinOp(BinOp(BinOp(Call(Attribute(Name('typeobj', Load(), lineno=413, col_offset=15), 'field', Load(), lineno=413, col_offset=15), [Str('tp_basicsize', lineno=413, col_offset=29)], [], None, None, lineno=413, col_offset=15), Add(), BinOp(Name('nitems', Load(), lineno=414, col_offset=15), Mult(), Call(Attribute(Name('typeobj', Load(), lineno=414, col_offset=24), 'field', Load(), lineno=414, col_offset=24), [Str('tp_itemsize', lineno=414, col_offset=38)], [], None, None, lineno=414, col_offset=24), lineno=414, col_offset=15), lineno=413, col_offset=15), Add(), BinOp(Name('SIZEOF_VOID_P', Load(), lineno=415, col_offset=16), Sub(), Num(1, lineno=415, col_offset=32), lineno=415, col_offset=16), lineno=414, col_offset=53), BitAnd(), UnaryOp(Invert(), BinOp(Name('SIZEOF_VOID_P', Load(), lineno=416, col_offset=19), Sub(), Num(1, lineno=416, col_offset=35), lineno=416, col_offset=19), lineno=416, col_offset=17), lineno=413, col_offset=13), 'cast', Load(), lineno=413, col_offset=13), [Name('_type_size_t', Load(), lineno=417, col_offset=18)], [], None, None, lineno=413, col_offset=13), lineno=413, col_offset=4)], [], lineno=412, col_offset=0), ClassDef('HeapTypeObjectPtr', [Name('PyObjectPtr', Load(), lineno=419, col_offset=24)], [Assign([Name('_typename', Store(), lineno=420, col_offset=4)], Str('PyObject', lineno=420, col_offset=16), lineno=420, col_offset=4), FunctionDef('get_attr_dict', arguments([Name('self', Param(), lineno=422, col_offset=22)], None, None, []), [Expr(Str("\n        Get the PyDictObject ptr representing the attribute dictionary\n        (or None if there's a problem)\n        ", lineno=426, col_offset=-1), lineno=426, col_offset=-1), TryExcept([Assign([Name('typeobj', Store(), lineno=428, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=428, col_offset=22), 'type', Load(), lineno=428, col_offset=22), [], [], None, None, lineno=428, col_offset=22), lineno=428, col_offset=12), Assign([Name('dictoffset', Store(), lineno=429, col_offset=12)], Call(Name('int_from_int', Load(), lineno=429, col_offset=25), [Call(Attribute(Name('typeobj', Load(), lineno=429, col_offset=38), 'field', Load(), lineno=429, col_offset=38), [Str('tp_dictoffset', lineno=429, col_offset=52)], [], None, None, lineno=429, col_offset=38)], [], None, None, lineno=429, col_offset=25), lineno=429, col_offset=12), If(Compare(Name('dictoffset', Load(), lineno=430, col_offset=15), [NotEq()], [Num(0, lineno=430, col_offset=29)], lineno=430, col_offset=15), [If(Compare(Name('dictoffset', Load(), lineno=431, col_offset=19), [Lt()], [Num(0, lineno=431, col_offset=32)], lineno=431, col_offset=19), [Assign([Name('type_PyVarObject_ptr', Store(), lineno=432, col_offset=20)], Call(Attribute(Call(Attribute(Name('gdb', Load(), lineno=432, col_offset=43), 'lookup_type', Load(), lineno=432, col_offset=43), [Str('PyVarObject', lineno=432, col_offset=59)], [], None, None, lineno=432, col_offset=43), 'pointer', Load(), lineno=432, col_offset=43), [], [], None, None, lineno=432, col_offset=43), lineno=432, col_offset=20), Assign([Name('tsize', Store(), lineno=433, col_offset=20)], Call(Name('int_from_int', Load(), lineno=433, col_offset=28), [Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=433, col_offset=41), '_gdbval', Load(), lineno=433, col_offset=41), 'cast', Load(), lineno=433, col_offset=41), [Name('type_PyVarObject_ptr', Load(), lineno=433, col_offset=59)], [], None, None, lineno=433, col_offset=41), Index(Str('ob_size', lineno=433, col_offset=81)), Load(), lineno=433, col_offset=41)], [], None, None, lineno=433, col_offset=28), lineno=433, col_offset=20), If(Compare(Name('tsize', Load(), lineno=434, col_offset=23), [Lt()], [Num(0, lineno=434, col_offset=31)], lineno=434, col_offset=23), [Assign([Name('tsize', Store(), lineno=435, col_offset=24)], UnaryOp(USub(), Name('tsize', Load(), lineno=435, col_offset=33), lineno=435, col_offset=32), lineno=435, col_offset=24)], [], lineno=434, col_offset=20), Assign([Name('size', Store(), lineno=436, col_offset=20)], Call(Name('_PyObject_VAR_SIZE', Load(), lineno=436, col_offset=27), [Name('typeobj', Load(), lineno=436, col_offset=46), Name('tsize', Load(), lineno=436, col_offset=55)], [], None, None, lineno=436, col_offset=27), lineno=436, col_offset=20), AugAssign(Name('dictoffset', Store(), lineno=437, col_offset=20), Add(), Name('size', Load(), lineno=437, col_offset=34), lineno=437, col_offset=20), Assert(Compare(Name('dictoffset', Load(), lineno=438, col_offset=27), [Gt()], [Num(0, lineno=438, col_offset=40)], lineno=438, col_offset=27), None, lineno=438, col_offset=20), Assert(Compare(BinOp(Name('dictoffset', Load(), lineno=439, col_offset=27), Mod(), Name('SIZEOF_VOID_P', Load(), lineno=439, col_offset=40), lineno=439, col_offset=27), [Eq()], [Num(0, lineno=439, col_offset=57)], lineno=439, col_offset=27), None, lineno=439, col_offset=20)], [], lineno=431, col_offset=16), Assign([Name('dictptr', Store(), lineno=441, col_offset=16)], BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=441, col_offset=26), '_gdbval', Load(), lineno=441, col_offset=26), 'cast', Load(), lineno=441, col_offset=26), [Name('_type_char_ptr', Load(), lineno=441, col_offset=44)], [], None, None, lineno=441, col_offset=26), Add(), Name('dictoffset', Load(), lineno=441, col_offset=62), lineno=441, col_offset=26), lineno=441, col_offset=16), Assign([Name('PyObjectPtrPtr', Store(), lineno=442, col_offset=16)], Call(Attribute(Call(Attribute(Name('PyObjectPtr', Load(), lineno=442, col_offset=33), 'get_gdb_type', Load(), lineno=442, col_offset=33), [], [], None, None, lineno=442, col_offset=33), 'pointer', Load(), lineno=442, col_offset=33), [], [], None, None, lineno=442, col_offset=33), lineno=442, col_offset=16), Assign([Name('dictptr', Store(), lineno=443, col_offset=16)], Call(Attribute(Name('dictptr', Load(), lineno=443, col_offset=26), 'cast', Load(), lineno=443, col_offset=26), [Name('PyObjectPtrPtr', Load(), lineno=443, col_offset=39)], [], None, None, lineno=443, col_offset=26), lineno=443, col_offset=16), Return(Call(Attribute(Name('PyObjectPtr', Load(), lineno=444, col_offset=23), 'from_pyobject_ptr', Load(), lineno=444, col_offset=23), [Call(Attribute(Name('dictptr', Load(), lineno=444, col_offset=53), 'dereference', Load(), lineno=444, col_offset=53), [], [], None, None, lineno=444, col_offset=53)], [], None, None, lineno=444, col_offset=23), lineno=444, col_offset=16)], [], lineno=430, col_offset=12)], [ExceptHandler(Name('RuntimeError', Load(), lineno=445, col_offset=15), None, [Pass( lineno=447, col_offset=12)], lineno=445, col_offset=8)], [], lineno=427, col_offset=8), Return(Name('None', Load(), lineno=450, col_offset=15), lineno=450, col_offset=8)], [], lineno=422, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=452, col_offset=17), Name('visited', Param(), lineno=452, col_offset=23)], None, None, []), [Expr(Str('\n        Support for new-style classes.\n\n        Currently we just locate the dictionary using a transliteration to\n        python of _PyObject_GetDictPtr, ignoring descriptors\n        ', lineno=458, col_offset=-1), lineno=458, col_offset=-1), If(Compare(Call(Attribute(Name('self', Load(), lineno=460, col_offset=11), 'as_address', Load(), lineno=460, col_offset=11), [], [], None, None, lineno=460, col_offset=11), [In()], [Name('visited', Load(), lineno=460, col_offset=32)], lineno=460, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=461, col_offset=19), [Str('<...>', lineno=461, col_offset=39)], [], None, None, lineno=461, col_offset=19), lineno=461, col_offset=12)], [], lineno=460, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=462, col_offset=8), 'add', Load(), lineno=462, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=462, col_offset=20), 'as_address', Load(), lineno=462, col_offset=20), [], [], None, None, lineno=462, col_offset=20)], [], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8), Assign([Name('pyop_attr_dict', Store(), lineno=464, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=464, col_offset=25), 'get_attr_dict', Load(), lineno=464, col_offset=25), [], [], None, None, lineno=464, col_offset=25), lineno=464, col_offset=8), If(Name('pyop_attr_dict', Load(), lineno=465, col_offset=11), [Assign([Name('attr_dict', Store(), lineno=466, col_offset=12)], Call(Attribute(Name('pyop_attr_dict', Load(), lineno=466, col_offset=24), 'proxyval', Load(), lineno=466, col_offset=24), [Name('visited', Load(), lineno=466, col_offset=48)], [], None, None, lineno=466, col_offset=24), lineno=466, col_offset=12)], [Assign([Name('attr_dict', Store(), lineno=468, col_offset=12)], Dict([], [], lineno=468, col_offset=24), lineno=468, col_offset=12)], lineno=465, col_offset=8), Assign([Name('tp_name', Store(), lineno=469, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=469, col_offset=18), 'safe_tp_name', Load(), lineno=469, col_offset=18), [], [], None, None, lineno=469, col_offset=18), lineno=469, col_offset=8), Return(Call(Name('InstanceProxy', Load(), lineno=472, col_offset=15), [Name('tp_name', Load(), lineno=472, col_offset=29), Name('attr_dict', Load(), lineno=472, col_offset=38), Call(Name('long', Load(), lineno=472, col_offset=49), [Attribute(Name('self', Load(), lineno=472, col_offset=54), '_gdbval', Load(), lineno=472, col_offset=54)], [], None, None, lineno=472, col_offset=49)], [], None, None, lineno=472, col_offset=15), lineno=472, col_offset=8)], [], lineno=452, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=474, col_offset=19), Name('out', Param(), lineno=474, col_offset=25), Name('visited', Param(), lineno=474, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=476, col_offset=11), 'as_address', Load(), lineno=476, col_offset=11), [], [], None, None, lineno=476, col_offset=11), [In()], [Name('visited', Load(), lineno=476, col_offset=32)], lineno=476, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=477, col_offset=12), 'write', Load(), lineno=477, col_offset=12), [Str('<...>', lineno=477, col_offset=22)], [], None, None, lineno=477, col_offset=12), lineno=477, col_offset=12), Return(None, lineno=478, col_offset=12)], [], lineno=476, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=479, col_offset=8), 'add', Load(), lineno=479, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=479, col_offset=20), 'as_address', Load(), lineno=479, col_offset=20), [], [], None, None, lineno=479, col_offset=20)], [], None, None, lineno=479, col_offset=8), lineno=479, col_offset=8), Assign([Name('pyop_attrdict', Store(), lineno=481, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=481, col_offset=24), 'get_attr_dict', Load(), lineno=481, col_offset=24), [], [], None, None, lineno=481, col_offset=24), lineno=481, col_offset=8), Expr(Call(Name('_write_instance_repr', Load(), lineno=482, col_offset=8), [Name('out', Load(), lineno=482, col_offset=29), Name('visited', Load(), lineno=482, col_offset=34), Call(Attribute(Name('self', Load(), lineno=483, col_offset=29), 'safe_tp_name', Load(), lineno=483, col_offset=29), [], [], None, None, lineno=483, col_offset=29), Name('pyop_attrdict', Load(), lineno=483, col_offset=50), Call(Attribute(Name('self', Load(), lineno=483, col_offset=65), 'as_address', Load(), lineno=483, col_offset=65), [], [], None, None, lineno=483, col_offset=65)], [], None, None, lineno=482, col_offset=8), lineno=482, col_offset=8)], [], lineno=474, col_offset=4)], [], lineno=419, col_offset=0), ClassDef('ProxyException', [Name('Exception', Load(), lineno=485, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=486, col_offset=17), Name('tp_name', Param(), lineno=486, col_offset=23), Name('args', Param(), lineno=486, col_offset=32)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=487, col_offset=8), 'tp_name', Store(), lineno=487, col_offset=8)], Name('tp_name', Load(), lineno=487, col_offset=23), lineno=487, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=488, col_offset=8), 'args', Store(), lineno=488, col_offset=8)], Name('args', Load(), lineno=488, col_offset=20), lineno=488, col_offset=8)], [], lineno=486, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=490, col_offset=17)], None, None, []), [Return(BinOp(Str('%s%r', lineno=491, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=491, col_offset=25), 'tp_name', Load(), lineno=491, col_offset=25), Attribute(Name('self', Load(), lineno=491, col_offset=39), 'args', Load(), lineno=491, col_offset=39)], Load(), lineno=491, col_offset=25), lineno=491, col_offset=15), lineno=491, col_offset=8)], [], lineno=490, col_offset=4)], [], lineno=485, col_offset=0), ClassDef('PyBaseExceptionObjectPtr', [Name('PyObjectPtr', Load(), lineno=493, col_offset=31)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyBaseExceptionObject* i.e. an exception\n    within the process being debugged.\n    ", lineno=497, col_offset=-1), lineno=497, col_offset=-1), Assign([Name('_typename', Store(), lineno=498, col_offset=4)], Str('PyBaseExceptionObject', lineno=498, col_offset=16), lineno=498, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=500, col_offset=17), Name('visited', Param(), lineno=500, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=502, col_offset=11), 'as_address', Load(), lineno=502, col_offset=11), [], [], None, None, lineno=502, col_offset=11), [In()], [Name('visited', Load(), lineno=502, col_offset=32)], lineno=502, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=503, col_offset=19), [Str('(...)', lineno=503, col_offset=39)], [], None, None, lineno=503, col_offset=19), lineno=503, col_offset=12)], [], lineno=502, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=504, col_offset=8), 'add', Load(), lineno=504, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=504, col_offset=20), 'as_address', Load(), lineno=504, col_offset=20), [], [], None, None, lineno=504, col_offset=20)], [], None, None, lineno=504, col_offset=8), lineno=504, col_offset=8), Assign([Name('arg_proxy', Store(), lineno=505, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=505, col_offset=20), 'pyop_field', Load(), lineno=505, col_offset=20), [Str('args', lineno=505, col_offset=36)], [], None, None, lineno=505, col_offset=20), 'proxyval', Load(), lineno=505, col_offset=20), [Name('visited', Load(), lineno=505, col_offset=53)], [], None, None, lineno=505, col_offset=20), lineno=505, col_offset=8), Return(Call(Name('ProxyException', Load(), lineno=506, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=506, col_offset=30), 'safe_tp_name', Load(), lineno=506, col_offset=30), [], [], None, None, lineno=506, col_offset=30), Name('arg_proxy', Load(), lineno=507, col_offset=30)], [], None, None, lineno=506, col_offset=15), lineno=506, col_offset=8)], [], lineno=500, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=509, col_offset=19), Name('out', Param(), lineno=509, col_offset=25), Name('visited', Param(), lineno=509, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=511, col_offset=11), 'as_address', Load(), lineno=511, col_offset=11), [], [], None, None, lineno=511, col_offset=11), [In()], [Name('visited', Load(), lineno=511, col_offset=32)], lineno=511, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=512, col_offset=12), 'write', Load(), lineno=512, col_offset=12), [Str('(...)', lineno=512, col_offset=22)], [], None, None, lineno=512, col_offset=12), lineno=512, col_offset=12), Return(None, lineno=513, col_offset=12)], [], lineno=511, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=514, col_offset=8), 'add', Load(), lineno=514, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=514, col_offset=20), 'as_address', Load(), lineno=514, col_offset=20), [], [], None, None, lineno=514, col_offset=20)], [], None, None, lineno=514, col_offset=8), lineno=514, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=516, col_offset=8), 'write', Load(), lineno=516, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=516, col_offset=18), 'safe_tp_name', Load(), lineno=516, col_offset=18), [], [], None, None, lineno=516, col_offset=18)], [], None, None, lineno=516, col_offset=8), lineno=516, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=517, col_offset=8), 'write_field_repr', Load(), lineno=517, col_offset=8), [Str('args', lineno=517, col_offset=30), Name('out', Load(), lineno=517, col_offset=38), Name('visited', Load(), lineno=517, col_offset=43)], [], None, None, lineno=517, col_offset=8), lineno=517, col_offset=8)], [], lineno=509, col_offset=4)], [], lineno=493, col_offset=0), ClassDef('PyBoolObjectPtr', [Name('PyObjectPtr', Load(), lineno=519, col_offset=22)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyBoolObject* i.e. one of the two\n    <bool> instances (Py_True/Py_False) within the process being debugged.\n    ", lineno=523, col_offset=-1), lineno=523, col_offset=-1), Assign([Name('_typename', Store(), lineno=524, col_offset=4)], Str('PyBoolObject', lineno=524, col_offset=16), lineno=524, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=526, col_offset=17), Name('visited', Param(), lineno=526, col_offset=23)], None, None, []), [If(Call(Name('int_from_int', Load(), lineno=527, col_offset=11), [Call(Attribute(Name('self', Load(), lineno=527, col_offset=24), 'field', Load(), lineno=527, col_offset=24), [Str('ob_ival', lineno=527, col_offset=35)], [], None, None, lineno=527, col_offset=24)], [], None, None, lineno=527, col_offset=11), [Return(Name('True', Load(), lineno=528, col_offset=19), lineno=528, col_offset=12)], [Return(Name('False', Load(), lineno=530, col_offset=19), lineno=530, col_offset=12)], lineno=527, col_offset=8)], [], lineno=526, col_offset=4)], [], lineno=519, col_offset=0), ClassDef('PyClassObjectPtr', [Name('PyObjectPtr', Load(), lineno=533, col_offset=23)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyClassObject* i.e. a <classobj>\n    instance within the process being debugged.\n    ", lineno=537, col_offset=-1), lineno=537, col_offset=-1), Assign([Name('_typename', Store(), lineno=538, col_offset=4)], Str('PyClassObject', lineno=538, col_offset=16), lineno=538, col_offset=4)], [], lineno=533, col_offset=0), ClassDef('BuiltInFunctionProxy', [Name('object', Load(), lineno=541, col_offset=27)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=542, col_offset=17), Name('ml_name', Param(), lineno=542, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=543, col_offset=8), 'ml_name', Store(), lineno=543, col_offset=8)], Name('ml_name', Load(), lineno=543, col_offset=23), lineno=543, col_offset=8)], [], lineno=542, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=545, col_offset=17)], None, None, []), [Return(BinOp(Str('<built-in function %s>', lineno=546, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=546, col_offset=42), 'ml_name', Load(), lineno=546, col_offset=42), lineno=546, col_offset=15), lineno=546, col_offset=8)], [], lineno=545, col_offset=4)], [], lineno=541, col_offset=0), ClassDef('BuiltInMethodProxy', [Name('object', Load(), lineno=548, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=549, col_offset=17), Name('ml_name', Param(), lineno=549, col_offset=23), Name('pyop_m_self', Param(), lineno=549, col_offset=32)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=550, col_offset=8), 'ml_name', Store(), lineno=550, col_offset=8)], Name('ml_name', Load(), lineno=550, col_offset=23), lineno=550, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=551, col_offset=8), 'pyop_m_self', Store(), lineno=551, col_offset=8)], Name('pyop_m_self', Load(), lineno=551, col_offset=27), lineno=551, col_offset=8)], [], lineno=549, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=553, col_offset=17)], None, None, []), [Return(BinOp(Str('<built-in method %s of %s object at remote 0x%x>', lineno=554, col_offset=16), Mod(), Tuple([Attribute(Name('self', Load(), lineno=555, col_offset=19), 'ml_name', Load(), lineno=555, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=556, col_offset=19), 'pyop_m_self', Load(), lineno=556, col_offset=19), 'safe_tp_name', Load(), lineno=556, col_offset=19), [], [], None, None, lineno=556, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=557, col_offset=19), 'pyop_m_self', Load(), lineno=557, col_offset=19), 'as_address', Load(), lineno=557, col_offset=19), [], [], None, None, lineno=557, col_offset=19)], Load(), lineno=555, col_offset=19), lineno=554, col_offset=16), lineno=554, col_offset=8)], [], lineno=553, col_offset=4)], [], lineno=548, col_offset=0), ClassDef('PyCFunctionObjectPtr', [Name('PyObjectPtr', Load(), lineno=560, col_offset=27)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyCFunctionObject*\n    (see Include/methodobject.h and Objects/methodobject.c)\n    ", lineno=564, col_offset=-1), lineno=564, col_offset=-1), Assign([Name('_typename', Store(), lineno=565, col_offset=4)], Str('PyCFunctionObject', lineno=565, col_offset=16), lineno=565, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=567, col_offset=17), Name('visited', Param(), lineno=567, col_offset=23)], None, None, []), [Assign([Name('m_ml', Store(), lineno=568, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=568, col_offset=15), 'field', Load(), lineno=568, col_offset=15), [Str('m_ml', lineno=568, col_offset=26)], [], None, None, lineno=568, col_offset=15), lineno=568, col_offset=8), Assign([Name('ml_name', Store(), lineno=569, col_offset=8)], Call(Attribute(Subscript(Name('m_ml', Load(), lineno=569, col_offset=18), Index(Str('ml_name', lineno=569, col_offset=23)), Load(), lineno=569, col_offset=18), 'string', Load(), lineno=569, col_offset=18), [], [], None, None, lineno=569, col_offset=18), lineno=569, col_offset=8), Assign([Name('pyop_m_self', Store(), lineno=571, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=571, col_offset=22), 'pyop_field', Load(), lineno=571, col_offset=22), [Str('m_self', lineno=571, col_offset=38)], [], None, None, lineno=571, col_offset=22), lineno=571, col_offset=8), If(Call(Attribute(Name('pyop_m_self', Load(), lineno=572, col_offset=11), 'is_null', Load(), lineno=572, col_offset=11), [], [], None, None, lineno=572, col_offset=11), [Return(Call(Name('BuiltInFunctionProxy', Load(), lineno=573, col_offset=19), [Name('ml_name', Load(), lineno=573, col_offset=40)], [], None, None, lineno=573, col_offset=19), lineno=573, col_offset=12)], [Return(Call(Name('BuiltInMethodProxy', Load(), lineno=575, col_offset=19), [Name('ml_name', Load(), lineno=575, col_offset=38), Name('pyop_m_self', Load(), lineno=575, col_offset=47)], [], None, None, lineno=575, col_offset=19), lineno=575, col_offset=12)], lineno=572, col_offset=8)], [], lineno=567, col_offset=4)], [], lineno=560, col_offset=0), ClassDef('PyCodeObjectPtr', [Name('PyObjectPtr', Load(), lineno=578, col_offset=22)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyCodeObject* i.e. a <code> instance\n    within the process being debugged.\n    ", lineno=582, col_offset=-1), lineno=582, col_offset=-1), Assign([Name('_typename', Store(), lineno=583, col_offset=4)], Str('PyCodeObject', lineno=583, col_offset=16), lineno=583, col_offset=4), FunctionDef('addr2line', arguments([Name('self', Param(), lineno=585, col_offset=18), Name('addrq', Param(), lineno=585, col_offset=24)], None, None, []), [Expr(Str('\n        Get the line number for a given bytecode offset\n\n        Analogous to PyCode_Addr2Line; translated from pseudocode in\n        Objects/lnotab_notes.txt\n        ', lineno=591, col_offset=-1), lineno=591, col_offset=-1), Assign([Name('co_lnotab', Store(), lineno=592, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=592, col_offset=20), 'pyop_field', Load(), lineno=592, col_offset=20), [Str('co_lnotab', lineno=592, col_offset=36)], [], None, None, lineno=592, col_offset=20), 'proxyval', Load(), lineno=592, col_offset=20), [Call(Name('set', Load(), lineno=592, col_offset=58), [], [], None, None, lineno=592, col_offset=58)], [], None, None, lineno=592, col_offset=20), lineno=592, col_offset=8), Assign([Name('lineno', Store(), lineno=596, col_offset=8)], Call(Name('int_from_int', Load(), lineno=596, col_offset=17), [Call(Attribute(Name('self', Load(), lineno=596, col_offset=30), 'field', Load(), lineno=596, col_offset=30), [Str('co_firstlineno', lineno=596, col_offset=41)], [], None, None, lineno=596, col_offset=30)], [], None, None, lineno=596, col_offset=17), lineno=596, col_offset=8), Assign([Name('addr', Store(), lineno=598, col_offset=8)], Num(0, lineno=598, col_offset=15), lineno=598, col_offset=8), For(Tuple([Name('addr_incr', Store(), lineno=599, col_offset=12), Name('line_incr', Store(), lineno=599, col_offset=23)], Store(), lineno=599, col_offset=12), Call(Name('zip', Load(), lineno=599, col_offset=36), [Subscript(Name('co_lnotab', Load(), lineno=599, col_offset=40), Slice(None, None, Num(2, lineno=599, col_offset=52)), Load(), lineno=599, col_offset=40), Subscript(Name('co_lnotab', Load(), lineno=599, col_offset=56), Slice(Num(1, lineno=599, col_offset=66), None, Num(2, lineno=599, col_offset=69)), Load(), lineno=599, col_offset=56)], [], None, None, lineno=599, col_offset=36), [AugAssign(Name('addr', Store(), lineno=600, col_offset=12), Add(), Call(Name('ord', Load(), lineno=600, col_offset=20), [Name('addr_incr', Load(), lineno=600, col_offset=24)], [], None, None, lineno=600, col_offset=20), lineno=600, col_offset=12), If(Compare(Name('addr', Load(), lineno=601, col_offset=15), [Gt()], [Name('addrq', Load(), lineno=601, col_offset=22)], lineno=601, col_offset=15), [Return(Name('lineno', Load(), lineno=602, col_offset=23), lineno=602, col_offset=16)], [], lineno=601, col_offset=12), AugAssign(Name('lineno', Store(), lineno=603, col_offset=12), Add(), Call(Name('ord', Load(), lineno=603, col_offset=22), [Name('line_incr', Load(), lineno=603, col_offset=26)], [], None, None, lineno=603, col_offset=22), lineno=603, col_offset=12)], [], lineno=599, col_offset=8), Return(Name('lineno', Load(), lineno=604, col_offset=15), lineno=604, col_offset=8)], [], lineno=585, col_offset=4)], [], lineno=578, col_offset=0), ClassDef('PyDictObjectPtr', [Name('PyObjectPtr', Load(), lineno=607, col_offset=22)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyDictObject* i.e. a dict instance\n    within the process being debugged.\n    ", lineno=611, col_offset=-1), lineno=611, col_offset=-1), Assign([Name('_typename', Store(), lineno=612, col_offset=4)], Str('PyDictObject', lineno=612, col_offset=16), lineno=612, col_offset=4), FunctionDef('iteritems', arguments([Name('self', Param(), lineno=614, col_offset=18)], None, None, []), [Expr(Str('\n        Yields a sequence of (PyObjectPtr key, PyObjectPtr value) pairs,\n        analagous to dict.iteritems()\n        ', lineno=618, col_offset=-1), lineno=618, col_offset=-1), For(Name('i', Store(), lineno=619, col_offset=12), Call(Name('safe_range', Load(), lineno=619, col_offset=17), [BinOp(Call(Attribute(Name('self', Load(), lineno=619, col_offset=28), 'field', Load(), lineno=619, col_offset=28), [Str('ma_mask', lineno=619, col_offset=39)], [], None, None, lineno=619, col_offset=28), Add(), Num(1, lineno=619, col_offset=52), lineno=619, col_offset=28)], [], None, None, lineno=619, col_offset=17), [Assign([Name('ep', Store(), lineno=620, col_offset=12)], BinOp(Call(Attribute(Name('self', Load(), lineno=620, col_offset=17), 'field', Load(), lineno=620, col_offset=17), [Str('ma_table', lineno=620, col_offset=28)], [], None, None, lineno=620, col_offset=17), Add(), Name('i', Load(), lineno=620, col_offset=42), lineno=620, col_offset=17), lineno=620, col_offset=12), Assign([Name('pyop_value', Store(), lineno=621, col_offset=12)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=621, col_offset=25), 'from_pyobject_ptr', Load(), lineno=621, col_offset=25), [Subscript(Name('ep', Load(), lineno=621, col_offset=55), Index(Str('me_value', lineno=621, col_offset=58)), Load(), lineno=621, col_offset=55)], [], None, None, lineno=621, col_offset=25), lineno=621, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('pyop_value', Load(), lineno=622, col_offset=19), 'is_null', Load(), lineno=622, col_offset=19), [], [], None, None, lineno=622, col_offset=19), lineno=622, col_offset=15), [Assign([Name('pyop_key', Store(), lineno=623, col_offset=16)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=623, col_offset=27), 'from_pyobject_ptr', Load(), lineno=623, col_offset=27), [Subscript(Name('ep', Load(), lineno=623, col_offset=57), Index(Str('me_key', lineno=623, col_offset=60)), Load(), lineno=623, col_offset=57)], [], None, None, lineno=623, col_offset=27), lineno=623, col_offset=16), Expr(Yield(Tuple([Name('pyop_key', Load(), lineno=624, col_offset=23), Name('pyop_value', Load(), lineno=624, col_offset=33)], Load(), lineno=624, col_offset=23), lineno=624, col_offset=16), lineno=624, col_offset=16)], [], lineno=622, col_offset=12)], [], lineno=619, col_offset=8)], [], lineno=614, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=626, col_offset=17), Name('visited', Param(), lineno=626, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=628, col_offset=11), 'as_address', Load(), lineno=628, col_offset=11), [], [], None, None, lineno=628, col_offset=11), [In()], [Name('visited', Load(), lineno=628, col_offset=32)], lineno=628, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=629, col_offset=19), [Str('{...}', lineno=629, col_offset=39)], [], None, None, lineno=629, col_offset=19), lineno=629, col_offset=12)], [], lineno=628, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=630, col_offset=8), 'add', Load(), lineno=630, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=630, col_offset=20), 'as_address', Load(), lineno=630, col_offset=20), [], [], None, None, lineno=630, col_offset=20)], [], None, None, lineno=630, col_offset=8), lineno=630, col_offset=8), Assign([Name('result', Store(), lineno=632, col_offset=8)], Dict([], [], lineno=632, col_offset=17), lineno=632, col_offset=8), For(Tuple([Name('pyop_key', Store(), lineno=633, col_offset=12), Name('pyop_value', Store(), lineno=633, col_offset=22)], Store(), lineno=633, col_offset=12), Call(Attribute(Name('self', Load(), lineno=633, col_offset=36), 'iteritems', Load(), lineno=633, col_offset=36), [], [], None, None, lineno=633, col_offset=36), [Assign([Name('proxy_key', Store(), lineno=634, col_offset=12)], Call(Attribute(Name('pyop_key', Load(), lineno=634, col_offset=24), 'proxyval', Load(), lineno=634, col_offset=24), [Name('visited', Load(), lineno=634, col_offset=42)], [], None, None, lineno=634, col_offset=24), lineno=634, col_offset=12), Assign([Name('proxy_value', Store(), lineno=635, col_offset=12)], Call(Attribute(Name('pyop_value', Load(), lineno=635, col_offset=26), 'proxyval', Load(), lineno=635, col_offset=26), [Name('visited', Load(), lineno=635, col_offset=46)], [], None, None, lineno=635, col_offset=26), lineno=635, col_offset=12), Assign([Subscript(Name('result', Load(), lineno=636, col_offset=12), Index(Name('proxy_key', Load(), lineno=636, col_offset=19)), Store(), lineno=636, col_offset=12)], Name('proxy_value', Load(), lineno=636, col_offset=32), lineno=636, col_offset=12)], [], lineno=633, col_offset=8), Return(Name('result', Load(), lineno=637, col_offset=15), lineno=637, col_offset=8)], [], lineno=626, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=639, col_offset=19), Name('out', Param(), lineno=639, col_offset=25), Name('visited', Param(), lineno=639, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=641, col_offset=11), 'as_address', Load(), lineno=641, col_offset=11), [], [], None, None, lineno=641, col_offset=11), [In()], [Name('visited', Load(), lineno=641, col_offset=32)], lineno=641, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=642, col_offset=12), 'write', Load(), lineno=642, col_offset=12), [Str('{...}', lineno=642, col_offset=22)], [], None, None, lineno=642, col_offset=12), lineno=642, col_offset=12), Return(None, lineno=643, col_offset=12)], [], lineno=641, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=644, col_offset=8), 'add', Load(), lineno=644, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=644, col_offset=20), 'as_address', Load(), lineno=644, col_offset=20), [], [], None, None, lineno=644, col_offset=20)], [], None, None, lineno=644, col_offset=8), lineno=644, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=646, col_offset=8), 'write', Load(), lineno=646, col_offset=8), [Str('{', lineno=646, col_offset=18)], [], None, None, lineno=646, col_offset=8), lineno=646, col_offset=8), Assign([Name('first', Store(), lineno=647, col_offset=8)], Name('True', Load(), lineno=647, col_offset=16), lineno=647, col_offset=8), For(Tuple([Name('pyop_key', Store(), lineno=648, col_offset=12), Name('pyop_value', Store(), lineno=648, col_offset=22)], Store(), lineno=648, col_offset=12), Call(Attribute(Name('self', Load(), lineno=648, col_offset=36), 'iteritems', Load(), lineno=648, col_offset=36), [], [], None, None, lineno=648, col_offset=36), [If(UnaryOp(Not(), Name('first', Load(), lineno=649, col_offset=19), lineno=649, col_offset=15), [Expr(Call(Attribute(Name('out', Load(), lineno=650, col_offset=16), 'write', Load(), lineno=650, col_offset=16), [Str(', ', lineno=650, col_offset=26)], [], None, None, lineno=650, col_offset=16), lineno=650, col_offset=16)], [], lineno=649, col_offset=12), Assign([Name('first', Store(), lineno=651, col_offset=12)], Name('False', Load(), lineno=651, col_offset=20), lineno=651, col_offset=12), Expr(Call(Attribute(Name('pyop_key', Load(), lineno=652, col_offset=12), 'write_repr', Load(), lineno=652, col_offset=12), [Name('out', Load(), lineno=652, col_offset=32), Name('visited', Load(), lineno=652, col_offset=37)], [], None, None, lineno=652, col_offset=12), lineno=652, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=653, col_offset=12), 'write', Load(), lineno=653, col_offset=12), [Str(': ', lineno=653, col_offset=22)], [], None, None, lineno=653, col_offset=12), lineno=653, col_offset=12), Expr(Call(Attribute(Name('pyop_value', Load(), lineno=654, col_offset=12), 'write_repr', Load(), lineno=654, col_offset=12), [Name('out', Load(), lineno=654, col_offset=34), Name('visited', Load(), lineno=654, col_offset=39)], [], None, None, lineno=654, col_offset=12), lineno=654, col_offset=12)], [], lineno=648, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=655, col_offset=8), 'write', Load(), lineno=655, col_offset=8), [Str('}', lineno=655, col_offset=18)], [], None, None, lineno=655, col_offset=8), lineno=655, col_offset=8)], [], lineno=639, col_offset=4)], [], lineno=607, col_offset=0), ClassDef('PyInstanceObjectPtr', [Name('PyObjectPtr', Load(), lineno=657, col_offset=26)], [Assign([Name('_typename', Store(), lineno=658, col_offset=4)], Str('PyInstanceObject', lineno=658, col_offset=16), lineno=658, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=660, col_offset=17), Name('visited', Param(), lineno=660, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=662, col_offset=11), 'as_address', Load(), lineno=662, col_offset=11), [], [], None, None, lineno=662, col_offset=11), [In()], [Name('visited', Load(), lineno=662, col_offset=32)], lineno=662, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=663, col_offset=19), [Str('<...>', lineno=663, col_offset=39)], [], None, None, lineno=663, col_offset=19), lineno=663, col_offset=12)], [], lineno=662, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=664, col_offset=8), 'add', Load(), lineno=664, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=664, col_offset=20), 'as_address', Load(), lineno=664, col_offset=20), [], [], None, None, lineno=664, col_offset=20)], [], None, None, lineno=664, col_offset=8), lineno=664, col_offset=8), Assign([Name('in_class', Store(), lineno=667, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=667, col_offset=19), 'pyop_field', Load(), lineno=667, col_offset=19), [Str('in_class', lineno=667, col_offset=35)], [], None, None, lineno=667, col_offset=19), lineno=667, col_offset=8), Assign([Name('cl_name', Store(), lineno=668, col_offset=8)], Call(Attribute(Call(Attribute(Name('in_class', Load(), lineno=668, col_offset=18), 'pyop_field', Load(), lineno=668, col_offset=18), [Str('cl_name', lineno=668, col_offset=38)], [], None, None, lineno=668, col_offset=18), 'proxyval', Load(), lineno=668, col_offset=18), [Name('visited', Load(), lineno=668, col_offset=58)], [], None, None, lineno=668, col_offset=18), lineno=668, col_offset=8), Assign([Name('in_dict', Store(), lineno=671, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=671, col_offset=18), 'pyop_field', Load(), lineno=671, col_offset=18), [Str('in_dict', lineno=671, col_offset=34)], [], None, None, lineno=671, col_offset=18), 'proxyval', Load(), lineno=671, col_offset=18), [Name('visited', Load(), lineno=671, col_offset=54)], [], None, None, lineno=671, col_offset=18), lineno=671, col_offset=8), Return(Call(Name('InstanceProxy', Load(), lineno=674, col_offset=15), [Name('cl_name', Load(), lineno=674, col_offset=29), Name('in_dict', Load(), lineno=674, col_offset=38), Call(Name('long', Load(), lineno=674, col_offset=47), [Attribute(Name('self', Load(), lineno=674, col_offset=52), '_gdbval', Load(), lineno=674, col_offset=52)], [], None, None, lineno=674, col_offset=47)], [], None, None, lineno=674, col_offset=15), lineno=674, col_offset=8)], [], lineno=660, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=676, col_offset=19), Name('out', Param(), lineno=676, col_offset=25), Name('visited', Param(), lineno=676, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=678, col_offset=11), 'as_address', Load(), lineno=678, col_offset=11), [], [], None, None, lineno=678, col_offset=11), [In()], [Name('visited', Load(), lineno=678, col_offset=32)], lineno=678, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=679, col_offset=12), 'write', Load(), lineno=679, col_offset=12), [Str('<...>', lineno=679, col_offset=22)], [], None, None, lineno=679, col_offset=12), lineno=679, col_offset=12), Return(None, lineno=680, col_offset=12)], [], lineno=678, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=681, col_offset=8), 'add', Load(), lineno=681, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=681, col_offset=20), 'as_address', Load(), lineno=681, col_offset=20), [], [], None, None, lineno=681, col_offset=20)], [], None, None, lineno=681, col_offset=8), lineno=681, col_offset=8), Assign([Name('in_class', Store(), lineno=686, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=686, col_offset=19), 'pyop_field', Load(), lineno=686, col_offset=19), [Str('in_class', lineno=686, col_offset=35)], [], None, None, lineno=686, col_offset=19), lineno=686, col_offset=8), Assign([Name('cl_name', Store(), lineno=687, col_offset=8)], Call(Attribute(Call(Attribute(Name('in_class', Load(), lineno=687, col_offset=18), 'pyop_field', Load(), lineno=687, col_offset=18), [Str('cl_name', lineno=687, col_offset=38)], [], None, None, lineno=687, col_offset=18), 'proxyval', Load(), lineno=687, col_offset=18), [Name('visited', Load(), lineno=687, col_offset=58)], [], None, None, lineno=687, col_offset=18), lineno=687, col_offset=8), Assign([Name('pyop_in_dict', Store(), lineno=690, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=690, col_offset=23), 'pyop_field', Load(), lineno=690, col_offset=23), [Str('in_dict', lineno=690, col_offset=39)], [], None, None, lineno=690, col_offset=23), lineno=690, col_offset=8), Expr(Call(Name('_write_instance_repr', Load(), lineno=692, col_offset=8), [Name('out', Load(), lineno=692, col_offset=29), Name('visited', Load(), lineno=692, col_offset=34), Name('cl_name', Load(), lineno=693, col_offset=29), Name('pyop_in_dict', Load(), lineno=693, col_offset=38), Call(Attribute(Name('self', Load(), lineno=693, col_offset=52), 'as_address', Load(), lineno=693, col_offset=52), [], [], None, None, lineno=693, col_offset=52)], [], None, None, lineno=692, col_offset=8), lineno=692, col_offset=8)], [], lineno=676, col_offset=4)], [], lineno=657, col_offset=0), ClassDef('PyIntObjectPtr', [Name('PyObjectPtr', Load(), lineno=695, col_offset=21)], [Assign([Name('_typename', Store(), lineno=696, col_offset=4)], Str('PyIntObject', lineno=696, col_offset=16), lineno=696, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=698, col_offset=17), Name('visited', Param(), lineno=698, col_offset=23)], None, None, []), [Assign([Name('result', Store(), lineno=699, col_offset=8)], Call(Name('int_from_int', Load(), lineno=699, col_offset=17), [Call(Attribute(Name('self', Load(), lineno=699, col_offset=30), 'field', Load(), lineno=699, col_offset=30), [Str('ob_ival', lineno=699, col_offset=41)], [], None, None, lineno=699, col_offset=30)], [], None, None, lineno=699, col_offset=17), lineno=699, col_offset=8), Return(Name('result', Load(), lineno=700, col_offset=15), lineno=700, col_offset=8)], [], lineno=698, col_offset=4)], [], lineno=695, col_offset=0), ClassDef('PyListObjectPtr', [Name('PyObjectPtr', Load(), lineno=702, col_offset=22)], [Assign([Name('_typename', Store(), lineno=703, col_offset=4)], Str('PyListObject', lineno=703, col_offset=16), lineno=703, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=705, col_offset=20), Name('i', Param(), lineno=705, col_offset=26)], None, None, []), [Assign([Name('field_ob_item', Store(), lineno=707, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=707, col_offset=24), 'field', Load(), lineno=707, col_offset=24), [Str('ob_item', lineno=707, col_offset=35)], [], None, None, lineno=707, col_offset=24), lineno=707, col_offset=8), Return(Subscript(Name('field_ob_item', Load(), lineno=708, col_offset=15), Index(Name('i', Load(), lineno=708, col_offset=29)), Load(), lineno=708, col_offset=15), lineno=708, col_offset=8)], [], lineno=705, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=710, col_offset=17), Name('visited', Param(), lineno=710, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=712, col_offset=11), 'as_address', Load(), lineno=712, col_offset=11), [], [], None, None, lineno=712, col_offset=11), [In()], [Name('visited', Load(), lineno=712, col_offset=32)], lineno=712, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=713, col_offset=19), [Str('[...]', lineno=713, col_offset=39)], [], None, None, lineno=713, col_offset=19), lineno=713, col_offset=12)], [], lineno=712, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=714, col_offset=8), 'add', Load(), lineno=714, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=714, col_offset=20), 'as_address', Load(), lineno=714, col_offset=20), [], [], None, None, lineno=714, col_offset=20)], [], None, None, lineno=714, col_offset=8), lineno=714, col_offset=8), Assign([Name('result', Store(), lineno=716, col_offset=8)], ListComp(Call(Attribute(Call(Attribute(Name('PyObjectPtr', Load(), lineno=716, col_offset=18), 'from_pyobject_ptr', Load(), lineno=716, col_offset=18), [Subscript(Name('self', Load(), lineno=716, col_offset=48), Index(Name('i', Load(), lineno=716, col_offset=53)), Load(), lineno=716, col_offset=48)], [], None, None, lineno=716, col_offset=18), 'proxyval', Load(), lineno=716, col_offset=18), [Name('visited', Load(), lineno=716, col_offset=66)], [], None, None, lineno=716, col_offset=18), [comprehension(Name('i', Store(), lineno=717, col_offset=22), Call(Name('safe_range', Load(), lineno=717, col_offset=27), [Call(Name('int_from_int', Load(), lineno=717, col_offset=38), [Call(Attribute(Name('self', Load(), lineno=717, col_offset=51), 'field', Load(), lineno=717, col_offset=51), [Str('ob_size', lineno=717, col_offset=62)], [], None, None, lineno=717, col_offset=51)], [], None, None, lineno=717, col_offset=38)], [], None, None, lineno=717, col_offset=27), [])], lineno=716, col_offset=18), lineno=716, col_offset=8), Return(Name('result', Load(), lineno=718, col_offset=15), lineno=718, col_offset=8)], [], lineno=710, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=720, col_offset=19), Name('out', Param(), lineno=720, col_offset=25), Name('visited', Param(), lineno=720, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=722, col_offset=11), 'as_address', Load(), lineno=722, col_offset=11), [], [], None, None, lineno=722, col_offset=11), [In()], [Name('visited', Load(), lineno=722, col_offset=32)], lineno=722, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=723, col_offset=12), 'write', Load(), lineno=723, col_offset=12), [Str('[...]', lineno=723, col_offset=22)], [], None, None, lineno=723, col_offset=12), lineno=723, col_offset=12), Return(None, lineno=724, col_offset=12)], [], lineno=722, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=725, col_offset=8), 'add', Load(), lineno=725, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=725, col_offset=20), 'as_address', Load(), lineno=725, col_offset=20), [], [], None, None, lineno=725, col_offset=20)], [], None, None, lineno=725, col_offset=8), lineno=725, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=727, col_offset=8), 'write', Load(), lineno=727, col_offset=8), [Str('[', lineno=727, col_offset=18)], [], None, None, lineno=727, col_offset=8), lineno=727, col_offset=8), For(Name('i', Store(), lineno=728, col_offset=12), Call(Name('safe_range', Load(), lineno=728, col_offset=17), [Call(Name('int_from_int', Load(), lineno=728, col_offset=28), [Call(Attribute(Name('self', Load(), lineno=728, col_offset=41), 'field', Load(), lineno=728, col_offset=41), [Str('ob_size', lineno=728, col_offset=52)], [], None, None, lineno=728, col_offset=41)], [], None, None, lineno=728, col_offset=28)], [], None, None, lineno=728, col_offset=17), [If(Compare(Name('i', Load(), lineno=729, col_offset=15), [Gt()], [Num(0, lineno=729, col_offset=19)], lineno=729, col_offset=15), [Expr(Call(Attribute(Name('out', Load(), lineno=730, col_offset=16), 'write', Load(), lineno=730, col_offset=16), [Str(', ', lineno=730, col_offset=26)], [], None, None, lineno=730, col_offset=16), lineno=730, col_offset=16)], [], lineno=729, col_offset=12), Assign([Name('element', Store(), lineno=731, col_offset=12)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=731, col_offset=22), 'from_pyobject_ptr', Load(), lineno=731, col_offset=22), [Subscript(Name('self', Load(), lineno=731, col_offset=52), Index(Name('i', Load(), lineno=731, col_offset=57)), Load(), lineno=731, col_offset=52)], [], None, None, lineno=731, col_offset=22), lineno=731, col_offset=12), Expr(Call(Attribute(Name('element', Load(), lineno=732, col_offset=12), 'write_repr', Load(), lineno=732, col_offset=12), [Name('out', Load(), lineno=732, col_offset=31), Name('visited', Load(), lineno=732, col_offset=36)], [], None, None, lineno=732, col_offset=12), lineno=732, col_offset=12)], [], lineno=728, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=733, col_offset=8), 'write', Load(), lineno=733, col_offset=8), [Str(']', lineno=733, col_offset=18)], [], None, None, lineno=733, col_offset=8), lineno=733, col_offset=8)], [], lineno=720, col_offset=4)], [], lineno=702, col_offset=0), ClassDef('PyLongObjectPtr', [Name('PyObjectPtr', Load(), lineno=735, col_offset=22)], [Assign([Name('_typename', Store(), lineno=736, col_offset=4)], Str('PyLongObject', lineno=736, col_offset=16), lineno=736, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=738, col_offset=17), Name('visited', Param(), lineno=738, col_offset=23)], None, None, []), [Expr(Str("\n        Python's Include/longobjrep.h has this declaration:\n           struct _longobject {\n               PyObject_VAR_HEAD\n               digit ob_digit[1];\n           };\n\n        with this description:\n            The absolute value of a number is equal to\n                 SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2**(SHIFT*i)\n            Negative numbers are represented with ob_size < 0;\n            zero is represented by ob_size == 0.\n\n        where SHIFT can be either:\n            #define PyLong_SHIFT        30\n            #define PyLong_SHIFT        15\n        ", lineno=755, col_offset=-1), lineno=755, col_offset=-1), Assign([Name('ob_size', Store(), lineno=756, col_offset=8)], Call(Name('long', Load(), lineno=756, col_offset=18), [Call(Attribute(Name('self', Load(), lineno=756, col_offset=23), 'field', Load(), lineno=756, col_offset=23), [Str('ob_size', lineno=756, col_offset=34)], [], None, None, lineno=756, col_offset=23)], [], None, None, lineno=756, col_offset=18), lineno=756, col_offset=8), If(Compare(Name('ob_size', Load(), lineno=757, col_offset=11), [Eq()], [Num(0, lineno=757, col_offset=22)], lineno=757, col_offset=11), [Return(Num(0L, lineno=758, col_offset=19), lineno=758, col_offset=12)], [], lineno=757, col_offset=8), Assign([Name('ob_digit', Store(), lineno=760, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=760, col_offset=19), 'field', Load(), lineno=760, col_offset=19), [Str('ob_digit', lineno=760, col_offset=30)], [], None, None, lineno=760, col_offset=19), lineno=760, col_offset=8), If(Compare(Attribute(Call(Attribute(Name('gdb', Load(), lineno=762, col_offset=11), 'lookup_type', Load(), lineno=762, col_offset=11), [Str('digit', lineno=762, col_offset=27)], [], None, None, lineno=762, col_offset=11), 'sizeof', Load(), lineno=762, col_offset=11), [Eq()], [Num(2, lineno=762, col_offset=46)], lineno=762, col_offset=11), [Assign([Name('SHIFT', Store(), lineno=763, col_offset=12)], Num(15L, lineno=763, col_offset=20), lineno=763, col_offset=12)], [Assign([Name('SHIFT', Store(), lineno=765, col_offset=12)], Num(30L, lineno=765, col_offset=20), lineno=765, col_offset=12)], lineno=762, col_offset=8), Assign([Name('digits', Store(), lineno=767, col_offset=8)], ListComp(BinOp(Call(Name('long', Load(), lineno=767, col_offset=18), [Subscript(Name('ob_digit', Load(), lineno=767, col_offset=23), Index(Name('i', Load(), lineno=767, col_offset=32)), Load(), lineno=767, col_offset=23)], [], None, None, lineno=767, col_offset=18), Mult(), BinOp(Num(2, lineno=767, col_offset=38), Pow(), BinOp(Name('SHIFT', Load(), lineno=767, col_offset=42), Mult(), Name('i', Load(), lineno=767, col_offset=48), lineno=767, col_offset=42), lineno=767, col_offset=38), lineno=767, col_offset=18), [comprehension(Name('i', Store(), lineno=768, col_offset=22), Call(Name('safe_range', Load(), lineno=768, col_offset=27), [Call(Name('abs', Load(), lineno=768, col_offset=38), [Name('ob_size', Load(), lineno=768, col_offset=42)], [], None, None, lineno=768, col_offset=38)], [], None, None, lineno=768, col_offset=27), [])], lineno=767, col_offset=18), lineno=767, col_offset=8), Assign([Name('result', Store(), lineno=769, col_offset=8)], Call(Name('sum', Load(), lineno=769, col_offset=17), [Name('digits', Load(), lineno=769, col_offset=21)], [], None, None, lineno=769, col_offset=17), lineno=769, col_offset=8), If(Compare(Name('ob_size', Load(), lineno=770, col_offset=11), [Lt()], [Num(0, lineno=770, col_offset=21)], lineno=770, col_offset=11), [Assign([Name('result', Store(), lineno=771, col_offset=12)], UnaryOp(USub(), Name('result', Load(), lineno=771, col_offset=22), lineno=771, col_offset=21), lineno=771, col_offset=12)], [], lineno=770, col_offset=8), Return(Name('result', Load(), lineno=772, col_offset=15), lineno=772, col_offset=8)], [], lineno=738, col_offset=4)], [], lineno=735, col_offset=0), ClassDef('PyNoneStructPtr', [Name('PyObjectPtr', Load(), lineno=775, col_offset=22)], [Expr(Str("\n    Class wrapping a gdb.Value that's a PyObject* pointing to the\n    singleton (we hope) _Py_NoneStruct with ob_type PyNone_Type\n    ", lineno=779, col_offset=-1), lineno=779, col_offset=-1), Assign([Name('_typename', Store(), lineno=780, col_offset=4)], Str('PyObject', lineno=780, col_offset=16), lineno=780, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=782, col_offset=17), Name('visited', Param(), lineno=782, col_offset=23)], None, None, []), [Return(Name('None', Load(), lineno=783, col_offset=15), lineno=783, col_offset=8)], [], lineno=782, col_offset=4)], [], lineno=775, col_offset=0), ClassDef('PyFrameObjectPtr', [Name('PyObjectPtr', Load(), lineno=786, col_offset=23)], [Assign([Name('_typename', Store(), lineno=787, col_offset=4)], Str('PyFrameObject', lineno=787, col_offset=16), lineno=787, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=789, col_offset=17), Name('gdbval', Param(), lineno=789, col_offset=23), Name('cast_to', Param(), lineno=789, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('PyObjectPtr', Load(), lineno=790, col_offset=8), '__init__', Load(), lineno=790, col_offset=8), [Name('self', Load(), lineno=790, col_offset=29), Name('gdbval', Load(), lineno=790, col_offset=35), Name('cast_to', Load(), lineno=790, col_offset=43)], [], None, None, lineno=790, col_offset=8), lineno=790, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=792, col_offset=15), 'is_optimized_out', Load(), lineno=792, col_offset=15), [], [], None, None, lineno=792, col_offset=15), lineno=792, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=793, col_offset=12), 'co', Store(), lineno=793, col_offset=12)], Call(Attribute(Name('PyCodeObjectPtr', Load(), lineno=793, col_offset=22), 'from_pyobject_ptr', Load(), lineno=793, col_offset=22), [Call(Attribute(Name('self', Load(), lineno=793, col_offset=56), 'field', Load(), lineno=793, col_offset=56), [Str('f_code', lineno=793, col_offset=67)], [], None, None, lineno=793, col_offset=56)], [], None, None, lineno=793, col_offset=22), lineno=793, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=794, col_offset=12), 'co_name', Store(), lineno=794, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=794, col_offset=27), 'co', Load(), lineno=794, col_offset=27), 'pyop_field', Load(), lineno=794, col_offset=27), [Str('co_name', lineno=794, col_offset=46)], [], None, None, lineno=794, col_offset=27), lineno=794, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=795, col_offset=12), 'co_filename', Store(), lineno=795, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=795, col_offset=31), 'co', Load(), lineno=795, col_offset=31), 'pyop_field', Load(), lineno=795, col_offset=31), [Str('co_filename', lineno=795, col_offset=50)], [], None, None, lineno=795, col_offset=31), lineno=795, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=797, col_offset=12), 'f_lineno', Store(), lineno=797, col_offset=12)], Call(Name('int_from_int', Load(), lineno=797, col_offset=28), [Call(Attribute(Name('self', Load(), lineno=797, col_offset=41), 'field', Load(), lineno=797, col_offset=41), [Str('f_lineno', lineno=797, col_offset=52)], [], None, None, lineno=797, col_offset=41)], [], None, None, lineno=797, col_offset=28), lineno=797, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=798, col_offset=12), 'f_lasti', Store(), lineno=798, col_offset=12)], Call(Name('int_from_int', Load(), lineno=798, col_offset=27), [Call(Attribute(Name('self', Load(), lineno=798, col_offset=40), 'field', Load(), lineno=798, col_offset=40), [Str('f_lasti', lineno=798, col_offset=51)], [], None, None, lineno=798, col_offset=40)], [], None, None, lineno=798, col_offset=27), lineno=798, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=799, col_offset=12), 'co_nlocals', Store(), lineno=799, col_offset=12)], Call(Name('int_from_int', Load(), lineno=799, col_offset=30), [Call(Attribute(Attribute(Name('self', Load(), lineno=799, col_offset=43), 'co', Load(), lineno=799, col_offset=43), 'field', Load(), lineno=799, col_offset=43), [Str('co_nlocals', lineno=799, col_offset=57)], [], None, None, lineno=799, col_offset=43)], [], None, None, lineno=799, col_offset=30), lineno=799, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=800, col_offset=12), 'co_varnames', Store(), lineno=800, col_offset=12)], Call(Attribute(Name('PyTupleObjectPtr', Load(), lineno=800, col_offset=31), 'from_pyobject_ptr', Load(), lineno=800, col_offset=31), [Call(Attribute(Attribute(Name('self', Load(), lineno=800, col_offset=66), 'co', Load(), lineno=800, col_offset=66), 'field', Load(), lineno=800, col_offset=66), [Str('co_varnames', lineno=800, col_offset=80)], [], None, None, lineno=800, col_offset=66)], [], None, None, lineno=800, col_offset=31), lineno=800, col_offset=12)], [], lineno=792, col_offset=8)], [], lineno=789, col_offset=4), FunctionDef('iter_locals', arguments([Name('self', Param(), lineno=802, col_offset=20)], None, None, []), [Expr(Str('\n        Yield a sequence of (name,value) pairs of PyObjectPtr instances, for\n        the local variables of this frame\n        ', lineno=806, col_offset=-1), lineno=806, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=807, col_offset=11), 'is_optimized_out', Load(), lineno=807, col_offset=11), [], [], None, None, lineno=807, col_offset=11), [Return(None, lineno=808, col_offset=12)], [], lineno=807, col_offset=8), Assign([Name('f_localsplus', Store(), lineno=810, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=810, col_offset=23), 'field', Load(), lineno=810, col_offset=23), [Str('f_localsplus', lineno=810, col_offset=34)], [], None, None, lineno=810, col_offset=23), lineno=810, col_offset=8), For(Name('i', Store(), lineno=811, col_offset=12), Call(Name('safe_range', Load(), lineno=811, col_offset=17), [Attribute(Name('self', Load(), lineno=811, col_offset=28), 'co_nlocals', Load(), lineno=811, col_offset=28)], [], None, None, lineno=811, col_offset=17), [Assign([Name('pyop_value', Store(), lineno=812, col_offset=12)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=812, col_offset=25), 'from_pyobject_ptr', Load(), lineno=812, col_offset=25), [Subscript(Name('f_localsplus', Load(), lineno=812, col_offset=55), Index(Name('i', Load(), lineno=812, col_offset=68)), Load(), lineno=812, col_offset=55)], [], None, None, lineno=812, col_offset=25), lineno=812, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('pyop_value', Load(), lineno=813, col_offset=19), 'is_null', Load(), lineno=813, col_offset=19), [], [], None, None, lineno=813, col_offset=19), lineno=813, col_offset=15), [Assign([Name('pyop_name', Store(), lineno=814, col_offset=16)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=814, col_offset=28), 'from_pyobject_ptr', Load(), lineno=814, col_offset=28), [Subscript(Attribute(Name('self', Load(), lineno=814, col_offset=58), 'co_varnames', Load(), lineno=814, col_offset=58), Index(Name('i', Load(), lineno=814, col_offset=75)), Load(), lineno=814, col_offset=58)], [], None, None, lineno=814, col_offset=28), lineno=814, col_offset=16), Expr(Yield(Tuple([Name('pyop_name', Load(), lineno=815, col_offset=23), Name('pyop_value', Load(), lineno=815, col_offset=34)], Load(), lineno=815, col_offset=23), lineno=815, col_offset=16), lineno=815, col_offset=16)], [], lineno=813, col_offset=12)], [], lineno=811, col_offset=8)], [], lineno=802, col_offset=4), FunctionDef('iter_globals', arguments([Name('self', Param(), lineno=817, col_offset=21)], None, None, []), [Expr(Str('\n        Yield a sequence of (name,value) pairs of PyObjectPtr instances, for\n        the global variables of this frame\n        ', lineno=821, col_offset=-1), lineno=821, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=822, col_offset=11), 'is_optimized_out', Load(), lineno=822, col_offset=11), [], [], None, None, lineno=822, col_offset=11), [Return(None, lineno=823, col_offset=12)], [], lineno=822, col_offset=8), Assign([Name('pyop_globals', Store(), lineno=825, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=825, col_offset=23), 'pyop_field', Load(), lineno=825, col_offset=23), [Str('f_globals', lineno=825, col_offset=39)], [], None, None, lineno=825, col_offset=23), lineno=825, col_offset=8), Return(Call(Attribute(Name('pyop_globals', Load(), lineno=826, col_offset=15), 'iteritems', Load(), lineno=826, col_offset=15), [], [], None, None, lineno=826, col_offset=15), lineno=826, col_offset=8)], [], lineno=817, col_offset=4), FunctionDef('iter_builtins', arguments([Name('self', Param(), lineno=828, col_offset=22)], None, None, []), [Expr(Str('\n        Yield a sequence of (name,value) pairs of PyObjectPtr instances, for\n        the builtin variables\n        ', lineno=832, col_offset=-1), lineno=832, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=833, col_offset=11), 'is_optimized_out', Load(), lineno=833, col_offset=11), [], [], None, None, lineno=833, col_offset=11), [Return(None, lineno=834, col_offset=12)], [], lineno=833, col_offset=8), Assign([Name('pyop_builtins', Store(), lineno=836, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=836, col_offset=24), 'pyop_field', Load(), lineno=836, col_offset=24), [Str('f_builtins', lineno=836, col_offset=40)], [], None, None, lineno=836, col_offset=24), lineno=836, col_offset=8), Return(Call(Attribute(Name('pyop_builtins', Load(), lineno=837, col_offset=15), 'iteritems', Load(), lineno=837, col_offset=15), [], [], None, None, lineno=837, col_offset=15), lineno=837, col_offset=8)], [], lineno=828, col_offset=4), FunctionDef('get_var_by_name', arguments([Name('self', Param(), lineno=839, col_offset=24), Name('name', Param(), lineno=839, col_offset=30)], None, None, []), [Expr(Str("\n        Look for the named local variable, returning a (PyObjectPtr, scope) pair\n        where scope is a string 'local', 'global', 'builtin'\n\n        If not found, return (None, None)\n        ", lineno=845, col_offset=-1), lineno=845, col_offset=-1), For(Tuple([Name('pyop_name', Store(), lineno=846, col_offset=12), Name('pyop_value', Store(), lineno=846, col_offset=23)], Store(), lineno=846, col_offset=12), Call(Attribute(Name('self', Load(), lineno=846, col_offset=37), 'iter_locals', Load(), lineno=846, col_offset=37), [], [], None, None, lineno=846, col_offset=37), [If(Compare(Name('name', Load(), lineno=847, col_offset=15), [Eq()], [Call(Attribute(Name('pyop_name', Load(), lineno=847, col_offset=23), 'proxyval', Load(), lineno=847, col_offset=23), [Call(Name('set', Load(), lineno=847, col_offset=42), [], [], None, None, lineno=847, col_offset=42)], [], None, None, lineno=847, col_offset=23)], lineno=847, col_offset=15), [Return(Tuple([Name('pyop_value', Load(), lineno=848, col_offset=23), Str('local', lineno=848, col_offset=35)], Load(), lineno=848, col_offset=23), lineno=848, col_offset=16)], [], lineno=847, col_offset=12)], [], lineno=846, col_offset=8), For(Tuple([Name('pyop_name', Store(), lineno=849, col_offset=12), Name('pyop_value', Store(), lineno=849, col_offset=23)], Store(), lineno=849, col_offset=12), Call(Attribute(Name('self', Load(), lineno=849, col_offset=37), 'iter_globals', Load(), lineno=849, col_offset=37), [], [], None, None, lineno=849, col_offset=37), [If(Compare(Name('name', Load(), lineno=850, col_offset=15), [Eq()], [Call(Attribute(Name('pyop_name', Load(), lineno=850, col_offset=23), 'proxyval', Load(), lineno=850, col_offset=23), [Call(Name('set', Load(), lineno=850, col_offset=42), [], [], None, None, lineno=850, col_offset=42)], [], None, None, lineno=850, col_offset=23)], lineno=850, col_offset=15), [Return(Tuple([Name('pyop_value', Load(), lineno=851, col_offset=23), Str('global', lineno=851, col_offset=35)], Load(), lineno=851, col_offset=23), lineno=851, col_offset=16)], [], lineno=850, col_offset=12)], [], lineno=849, col_offset=8), For(Tuple([Name('pyop_name', Store(), lineno=852, col_offset=12), Name('pyop_value', Store(), lineno=852, col_offset=23)], Store(), lineno=852, col_offset=12), Call(Attribute(Name('self', Load(), lineno=852, col_offset=37), 'iter_builtins', Load(), lineno=852, col_offset=37), [], [], None, None, lineno=852, col_offset=37), [If(Compare(Name('name', Load(), lineno=853, col_offset=15), [Eq()], [Call(Attribute(Name('pyop_name', Load(), lineno=853, col_offset=23), 'proxyval', Load(), lineno=853, col_offset=23), [Call(Name('set', Load(), lineno=853, col_offset=42), [], [], None, None, lineno=853, col_offset=42)], [], None, None, lineno=853, col_offset=23)], lineno=853, col_offset=15), [Return(Tuple([Name('pyop_value', Load(), lineno=854, col_offset=23), Str('builtin', lineno=854, col_offset=35)], Load(), lineno=854, col_offset=23), lineno=854, col_offset=16)], [], lineno=853, col_offset=12)], [], lineno=852, col_offset=8), Return(Tuple([Name('None', Load(), lineno=855, col_offset=15), Name('None', Load(), lineno=855, col_offset=21)], Load(), lineno=855, col_offset=15), lineno=855, col_offset=8)], [], lineno=839, col_offset=4), FunctionDef('filename', arguments([Name('self', Param(), lineno=857, col_offset=17)], None, None, []), [Expr(Str('Get the path of the current Python source file, as a string', lineno=858, col_offset=8), lineno=858, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=859, col_offset=11), 'is_optimized_out', Load(), lineno=859, col_offset=11), [], [], None, None, lineno=859, col_offset=11), [Return(Str('(frame information optimized out)', lineno=860, col_offset=19), lineno=860, col_offset=12)], [], lineno=859, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=861, col_offset=15), 'co_filename', Load(), lineno=861, col_offset=15), 'proxyval', Load(), lineno=861, col_offset=15), [Call(Name('set', Load(), lineno=861, col_offset=41), [], [], None, None, lineno=861, col_offset=41)], [], None, None, lineno=861, col_offset=15), lineno=861, col_offset=8)], [], lineno=857, col_offset=4), FunctionDef('current_line_num', arguments([Name('self', Param(), lineno=863, col_offset=25)], None, None, []), [Expr(Str('Get current line number as an integer (1-based)\n\n        Translated from PyFrame_GetLineNumber and PyCode_Addr2Line\n\n        See Objects/lnotab_notes.txt\n        ', lineno=869, col_offset=-1), lineno=869, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=870, col_offset=11), 'is_optimized_out', Load(), lineno=870, col_offset=11), [], [], None, None, lineno=870, col_offset=11), [Return(Name('None', Load(), lineno=871, col_offset=19), lineno=871, col_offset=12)], [], lineno=870, col_offset=8), Assign([Name('f_trace', Store(), lineno=872, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=872, col_offset=18), 'field', Load(), lineno=872, col_offset=18), [Str('f_trace', lineno=872, col_offset=29)], [], None, None, lineno=872, col_offset=18), lineno=872, col_offset=8), If(Compare(Call(Name('long', Load(), lineno=873, col_offset=11), [Name('f_trace', Load(), lineno=873, col_offset=16)], [], None, None, lineno=873, col_offset=11), [NotEq()], [Num(0, lineno=873, col_offset=28)], lineno=873, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=875, col_offset=19), 'f_lineno', Load(), lineno=875, col_offset=19), lineno=875, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=878, col_offset=19), 'co', Load(), lineno=878, col_offset=19), 'addr2line', Load(), lineno=878, col_offset=19), [Attribute(Name('self', Load(), lineno=878, col_offset=37), 'f_lasti', Load(), lineno=878, col_offset=37)], [], None, None, lineno=878, col_offset=19), lineno=878, col_offset=12)], lineno=873, col_offset=8)], [], lineno=863, col_offset=4), FunctionDef('current_line', arguments([Name('self', Param(), lineno=882, col_offset=21)], None, None, []), [Expr(Str('Get the text of the current source line as a string, with a trailing\n        newline character', lineno=884, col_offset=-1), lineno=884, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=885, col_offset=11), 'is_optimized_out', Load(), lineno=885, col_offset=11), [], [], None, None, lineno=885, col_offset=11), [Return(Str('(frame information optimized out)', lineno=886, col_offset=19), lineno=886, col_offset=12)], [], lineno=885, col_offset=8), With(Call(Name('open', Load(), lineno=887, col_offset=13), [Call(Attribute(Name('self', Load(), lineno=887, col_offset=18), 'filename', Load(), lineno=887, col_offset=18), [], [], None, None, lineno=887, col_offset=18), Str('r', lineno=887, col_offset=35)], [], None, None, lineno=887, col_offset=13), Name('f', Store(), lineno=887, col_offset=43), [Assign([Name('all_lines', Store(), lineno=888, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=888, col_offset=24), 'readlines', Load(), lineno=888, col_offset=24), [], [], None, None, lineno=888, col_offset=24), lineno=888, col_offset=12), Return(Subscript(Name('all_lines', Load(), lineno=890, col_offset=19), Index(BinOp(Call(Attribute(Name('self', Load(), lineno=890, col_offset=29), 'current_line_num', Load(), lineno=890, col_offset=29), [], [], None, None, lineno=890, col_offset=29), Sub(), Num(1, lineno=890, col_offset=53), lineno=890, col_offset=29)), Load(), lineno=890, col_offset=19), lineno=890, col_offset=12)], lineno=887, col_offset=13)], [], lineno=882, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=892, col_offset=19), Name('out', Param(), lineno=892, col_offset=25), Name('visited', Param(), lineno=892, col_offset=30)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=893, col_offset=11), 'is_optimized_out', Load(), lineno=893, col_offset=11), [], [], None, None, lineno=893, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=894, col_offset=12), 'write', Load(), lineno=894, col_offset=12), [Str('(frame information optimized out)', lineno=894, col_offset=22)], [], None, None, lineno=894, col_offset=12), lineno=894, col_offset=12), Return(None, lineno=895, col_offset=12)], [], lineno=893, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=896, col_offset=8), 'write', Load(), lineno=896, col_offset=8), [BinOp(Str('Frame 0x%x, for file %s, line %i, in %s (', lineno=896, col_offset=18), Mod(), Tuple([Call(Attribute(Name('self', Load(), lineno=897, col_offset=21), 'as_address', Load(), lineno=897, col_offset=21), [], [], None, None, lineno=897, col_offset=21), Attribute(Name('self', Load(), lineno=898, col_offset=21), 'co_filename', Load(), lineno=898, col_offset=21), Call(Attribute(Name('self', Load(), lineno=899, col_offset=21), 'current_line_num', Load(), lineno=899, col_offset=21), [], [], None, None, lineno=899, col_offset=21), Attribute(Name('self', Load(), lineno=900, col_offset=21), 'co_name', Load(), lineno=900, col_offset=21)], Load(), lineno=897, col_offset=21), lineno=896, col_offset=18)], [], None, None, lineno=896, col_offset=8), lineno=896, col_offset=8), Assign([Name('first', Store(), lineno=901, col_offset=8)], Name('True', Load(), lineno=901, col_offset=16), lineno=901, col_offset=8), For(Tuple([Name('pyop_name', Store(), lineno=902, col_offset=12), Name('pyop_value', Store(), lineno=902, col_offset=23)], Store(), lineno=902, col_offset=12), Call(Attribute(Name('self', Load(), lineno=902, col_offset=37), 'iter_locals', Load(), lineno=902, col_offset=37), [], [], None, None, lineno=902, col_offset=37), [If(UnaryOp(Not(), Name('first', Load(), lineno=903, col_offset=19), lineno=903, col_offset=15), [Expr(Call(Attribute(Name('out', Load(), lineno=904, col_offset=16), 'write', Load(), lineno=904, col_offset=16), [Str(', ', lineno=904, col_offset=26)], [], None, None, lineno=904, col_offset=16), lineno=904, col_offset=16)], [], lineno=903, col_offset=12), Assign([Name('first', Store(), lineno=905, col_offset=12)], Name('False', Load(), lineno=905, col_offset=20), lineno=905, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=907, col_offset=12), 'write', Load(), lineno=907, col_offset=12), [Call(Attribute(Name('pyop_name', Load(), lineno=907, col_offset=22), 'proxyval', Load(), lineno=907, col_offset=22), [Name('visited', Load(), lineno=907, col_offset=41)], [], None, None, lineno=907, col_offset=22)], [], None, None, lineno=907, col_offset=12), lineno=907, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=908, col_offset=12), 'write', Load(), lineno=908, col_offset=12), [Str('=', lineno=908, col_offset=22)], [], None, None, lineno=908, col_offset=12), lineno=908, col_offset=12), Expr(Call(Attribute(Name('pyop_value', Load(), lineno=909, col_offset=12), 'write_repr', Load(), lineno=909, col_offset=12), [Name('out', Load(), lineno=909, col_offset=34), Name('visited', Load(), lineno=909, col_offset=39)], [], None, None, lineno=909, col_offset=12), lineno=909, col_offset=12)], [], lineno=902, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=911, col_offset=8), 'write', Load(), lineno=911, col_offset=8), [Str(')', lineno=911, col_offset=18)], [], None, None, lineno=911, col_offset=8), lineno=911, col_offset=8)], [], lineno=892, col_offset=4)], [], lineno=786, col_offset=0), ClassDef('PySetObjectPtr', [Name('PyObjectPtr', Load(), lineno=913, col_offset=21)], [Assign([Name('_typename', Store(), lineno=914, col_offset=4)], Str('PySetObject', lineno=914, col_offset=16), lineno=914, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=916, col_offset=17), Name('visited', Param(), lineno=916, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=918, col_offset=11), 'as_address', Load(), lineno=918, col_offset=11), [], [], None, None, lineno=918, col_offset=11), [In()], [Name('visited', Load(), lineno=918, col_offset=32)], lineno=918, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=919, col_offset=19), [BinOp(Str('%s(...)', lineno=919, col_offset=39), Mod(), Call(Attribute(Name('self', Load(), lineno=919, col_offset=51), 'safe_tp_name', Load(), lineno=919, col_offset=51), [], [], None, None, lineno=919, col_offset=51), lineno=919, col_offset=39)], [], None, None, lineno=919, col_offset=19), lineno=919, col_offset=12)], [], lineno=918, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=920, col_offset=8), 'add', Load(), lineno=920, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=920, col_offset=20), 'as_address', Load(), lineno=920, col_offset=20), [], [], None, None, lineno=920, col_offset=20)], [], None, None, lineno=920, col_offset=8), lineno=920, col_offset=8), Assign([Name('members', Store(), lineno=922, col_offset=8)], List([], Load(), lineno=922, col_offset=18), lineno=922, col_offset=8), Assign([Name('table', Store(), lineno=923, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=923, col_offset=16), 'field', Load(), lineno=923, col_offset=16), [Str('table', lineno=923, col_offset=27)], [], None, None, lineno=923, col_offset=16), lineno=923, col_offset=8), For(Name('i', Store(), lineno=924, col_offset=12), Call(Name('safe_range', Load(), lineno=924, col_offset=17), [BinOp(Call(Attribute(Name('self', Load(), lineno=924, col_offset=28), 'field', Load(), lineno=924, col_offset=28), [Str('mask', lineno=924, col_offset=39)], [], None, None, lineno=924, col_offset=28), Add(), Num(1, lineno=924, col_offset=47), lineno=924, col_offset=28)], [], None, None, lineno=924, col_offset=17), [Assign([Name('setentry', Store(), lineno=925, col_offset=12)], Subscript(Name('table', Load(), lineno=925, col_offset=23), Index(Name('i', Load(), lineno=925, col_offset=29)), Load(), lineno=925, col_offset=23), lineno=925, col_offset=12), Assign([Name('key', Store(), lineno=926, col_offset=12)], Subscript(Name('setentry', Load(), lineno=926, col_offset=18), Index(Str('key', lineno=926, col_offset=27)), Load(), lineno=926, col_offset=18), lineno=926, col_offset=12), If(Compare(Name('key', Load(), lineno=927, col_offset=15), [NotEq()], [Num(0, lineno=927, col_offset=22)], lineno=927, col_offset=15), [Assign([Name('key_proxy', Store(), lineno=928, col_offset=16)], Call(Attribute(Call(Attribute(Name('PyObjectPtr', Load(), lineno=928, col_offset=28), 'from_pyobject_ptr', Load(), lineno=928, col_offset=28), [Name('key', Load(), lineno=928, col_offset=58)], [], None, None, lineno=928, col_offset=28), 'proxyval', Load(), lineno=928, col_offset=28), [Name('visited', Load(), lineno=928, col_offset=72)], [], None, None, lineno=928, col_offset=28), lineno=928, col_offset=16), If(Compare(Name('key_proxy', Load(), lineno=929, col_offset=19), [NotEq()], [Str('<dummy key>', lineno=929, col_offset=32)], lineno=929, col_offset=19), [Expr(Call(Attribute(Name('members', Load(), lineno=930, col_offset=20), 'append', Load(), lineno=930, col_offset=20), [Name('key_proxy', Load(), lineno=930, col_offset=35)], [], None, None, lineno=930, col_offset=20), lineno=930, col_offset=20)], [], lineno=929, col_offset=16)], [], lineno=927, col_offset=12)], [], lineno=924, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=931, col_offset=11), 'safe_tp_name', Load(), lineno=931, col_offset=11), [], [], None, None, lineno=931, col_offset=11), [Eq()], [Str('frozenset', lineno=931, col_offset=34)], lineno=931, col_offset=11), [Return(Call(Name('frozenset', Load(), lineno=932, col_offset=19), [Name('members', Load(), lineno=932, col_offset=29)], [], None, None, lineno=932, col_offset=19), lineno=932, col_offset=12)], [Return(Call(Name('set', Load(), lineno=934, col_offset=19), [Name('members', Load(), lineno=934, col_offset=23)], [], None, None, lineno=934, col_offset=19), lineno=934, col_offset=12)], lineno=931, col_offset=8)], [], lineno=916, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=936, col_offset=19), Name('out', Param(), lineno=936, col_offset=25), Name('visited', Param(), lineno=936, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('out', Load(), lineno=937, col_offset=8), 'write', Load(), lineno=937, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=937, col_offset=18), 'safe_tp_name', Load(), lineno=937, col_offset=18), [], [], None, None, lineno=937, col_offset=18)], [], None, None, lineno=937, col_offset=8), lineno=937, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=940, col_offset=11), 'as_address', Load(), lineno=940, col_offset=11), [], [], None, None, lineno=940, col_offset=11), [In()], [Name('visited', Load(), lineno=940, col_offset=32)], lineno=940, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=941, col_offset=12), 'write', Load(), lineno=941, col_offset=12), [Str('(...)', lineno=941, col_offset=22)], [], None, None, lineno=941, col_offset=12), lineno=941, col_offset=12), Return(None, lineno=942, col_offset=12)], [], lineno=940, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=943, col_offset=8), 'add', Load(), lineno=943, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=943, col_offset=20), 'as_address', Load(), lineno=943, col_offset=20), [], [], None, None, lineno=943, col_offset=20)], [], None, None, lineno=943, col_offset=8), lineno=943, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=945, col_offset=8), 'write', Load(), lineno=945, col_offset=8), [Str('([', lineno=945, col_offset=18)], [], None, None, lineno=945, col_offset=8), lineno=945, col_offset=8), Assign([Name('first', Store(), lineno=946, col_offset=8)], Name('True', Load(), lineno=946, col_offset=16), lineno=946, col_offset=8), Assign([Name('table', Store(), lineno=947, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=947, col_offset=16), 'field', Load(), lineno=947, col_offset=16), [Str('table', lineno=947, col_offset=27)], [], None, None, lineno=947, col_offset=16), lineno=947, col_offset=8), For(Name('i', Store(), lineno=948, col_offset=12), Call(Name('safe_range', Load(), lineno=948, col_offset=17), [BinOp(Call(Attribute(Name('self', Load(), lineno=948, col_offset=28), 'field', Load(), lineno=948, col_offset=28), [Str('mask', lineno=948, col_offset=39)], [], None, None, lineno=948, col_offset=28), Add(), Num(1, lineno=948, col_offset=47), lineno=948, col_offset=28)], [], None, None, lineno=948, col_offset=17), [Assign([Name('setentry', Store(), lineno=949, col_offset=12)], Subscript(Name('table', Load(), lineno=949, col_offset=23), Index(Name('i', Load(), lineno=949, col_offset=29)), Load(), lineno=949, col_offset=23), lineno=949, col_offset=12), Assign([Name('key', Store(), lineno=950, col_offset=12)], Subscript(Name('setentry', Load(), lineno=950, col_offset=18), Index(Str('key', lineno=950, col_offset=27)), Load(), lineno=950, col_offset=18), lineno=950, col_offset=12), If(Compare(Name('key', Load(), lineno=951, col_offset=15), [NotEq()], [Num(0, lineno=951, col_offset=22)], lineno=951, col_offset=15), [Assign([Name('pyop_key', Store(), lineno=952, col_offset=16)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=952, col_offset=27), 'from_pyobject_ptr', Load(), lineno=952, col_offset=27), [Name('key', Load(), lineno=952, col_offset=57)], [], None, None, lineno=952, col_offset=27), lineno=952, col_offset=16), Assign([Name('key_proxy', Store(), lineno=953, col_offset=16)], Call(Attribute(Name('pyop_key', Load(), lineno=953, col_offset=28), 'proxyval', Load(), lineno=953, col_offset=28), [Name('visited', Load(), lineno=953, col_offset=46)], [], None, None, lineno=953, col_offset=28), lineno=953, col_offset=16), If(Compare(Name('key_proxy', Load(), lineno=954, col_offset=19), [NotEq()], [Str('<dummy key>', lineno=954, col_offset=32)], lineno=954, col_offset=19), [If(UnaryOp(Not(), Name('first', Load(), lineno=955, col_offset=27), lineno=955, col_offset=23), [Expr(Call(Attribute(Name('out', Load(), lineno=956, col_offset=24), 'write', Load(), lineno=956, col_offset=24), [Str(', ', lineno=956, col_offset=34)], [], None, None, lineno=956, col_offset=24), lineno=956, col_offset=24)], [], lineno=955, col_offset=20), Assign([Name('first', Store(), lineno=957, col_offset=20)], Name('False', Load(), lineno=957, col_offset=28), lineno=957, col_offset=20), Expr(Call(Attribute(Name('pyop_key', Load(), lineno=958, col_offset=20), 'write_repr', Load(), lineno=958, col_offset=20), [Name('out', Load(), lineno=958, col_offset=40), Name('visited', Load(), lineno=958, col_offset=45)], [], None, None, lineno=958, col_offset=20), lineno=958, col_offset=20)], [], lineno=954, col_offset=16)], [], lineno=951, col_offset=12)], [], lineno=948, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=959, col_offset=8), 'write', Load(), lineno=959, col_offset=8), [Str('])', lineno=959, col_offset=18)], [], None, None, lineno=959, col_offset=8), lineno=959, col_offset=8)], [], lineno=936, col_offset=4)], [], lineno=913, col_offset=0), ClassDef('PyStringObjectPtr', [Name('PyObjectPtr', Load(), lineno=962, col_offset=24)], [Assign([Name('_typename', Store(), lineno=963, col_offset=4)], Str('PyStringObject', lineno=963, col_offset=16), lineno=963, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=965, col_offset=16)], None, None, []), [Assign([Name('field_ob_size', Store(), lineno=966, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=966, col_offset=24), 'field', Load(), lineno=966, col_offset=24), [Str('ob_size', lineno=966, col_offset=35)], [], None, None, lineno=966, col_offset=24), lineno=966, col_offset=8), Assign([Name('field_ob_sval', Store(), lineno=967, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=967, col_offset=24), 'field', Load(), lineno=967, col_offset=24), [Str('ob_sval', lineno=967, col_offset=35)], [], None, None, lineno=967, col_offset=24), lineno=967, col_offset=8), Assign([Name('char_ptr', Store(), lineno=968, col_offset=8)], Call(Attribute(Attribute(Name('field_ob_sval', Load(), lineno=968, col_offset=19), 'address', Load(), lineno=968, col_offset=19), 'cast', Load(), lineno=968, col_offset=19), [Name('_type_unsigned_char_ptr', Load(), lineno=968, col_offset=46)], [], None, None, lineno=968, col_offset=19), lineno=968, col_offset=8), Return(Call(Attribute(Str('', lineno=969, col_offset=15), 'join', Load(), lineno=969, col_offset=15), [ListComp(Call(Name('chr', Load(), lineno=969, col_offset=24), [Subscript(Name('char_ptr', Load(), lineno=969, col_offset=28), Index(Name('i', Load(), lineno=969, col_offset=37)), Load(), lineno=969, col_offset=28)], [], None, None, lineno=969, col_offset=24), [comprehension(Name('i', Store(), lineno=969, col_offset=45), Call(Name('safe_range', Load(), lineno=969, col_offset=50), [Name('field_ob_size', Load(), lineno=969, col_offset=61)], [], None, None, lineno=969, col_offset=50), [])], lineno=969, col_offset=24)], [], None, None, lineno=969, col_offset=15), lineno=969, col_offset=8)], [], lineno=965, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=971, col_offset=17), Name('visited', Param(), lineno=971, col_offset=23)], None, None, []), [Return(Call(Name('str', Load(), lineno=972, col_offset=15), [Name('self', Load(), lineno=972, col_offset=19)], [], None, None, lineno=972, col_offset=15), lineno=972, col_offset=8)], [], lineno=971, col_offset=4)], [], lineno=962, col_offset=0), ClassDef('PyTupleObjectPtr', [Name('PyObjectPtr', Load(), lineno=974, col_offset=23)], [Assign([Name('_typename', Store(), lineno=975, col_offset=4)], Str('PyTupleObject', lineno=975, col_offset=16), lineno=975, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=977, col_offset=20), Name('i', Param(), lineno=977, col_offset=26)], None, None, []), [Assign([Name('field_ob_item', Store(), lineno=979, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=979, col_offset=24), 'field', Load(), lineno=979, col_offset=24), [Str('ob_item', lineno=979, col_offset=35)], [], None, None, lineno=979, col_offset=24), lineno=979, col_offset=8), Return(Subscript(Name('field_ob_item', Load(), lineno=980, col_offset=15), Index(Name('i', Load(), lineno=980, col_offset=29)), Load(), lineno=980, col_offset=15), lineno=980, col_offset=8)], [], lineno=977, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=982, col_offset=17), Name('visited', Param(), lineno=982, col_offset=23)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=984, col_offset=11), 'as_address', Load(), lineno=984, col_offset=11), [], [], None, None, lineno=984, col_offset=11), [In()], [Name('visited', Load(), lineno=984, col_offset=32)], lineno=984, col_offset=11), [Return(Call(Name('ProxyAlreadyVisited', Load(), lineno=985, col_offset=19), [Str('(...)', lineno=985, col_offset=39)], [], None, None, lineno=985, col_offset=19), lineno=985, col_offset=12)], [], lineno=984, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=986, col_offset=8), 'add', Load(), lineno=986, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=986, col_offset=20), 'as_address', Load(), lineno=986, col_offset=20), [], [], None, None, lineno=986, col_offset=20)], [], None, None, lineno=986, col_offset=8), lineno=986, col_offset=8), Assign([Name('result', Store(), lineno=988, col_offset=8)], Call(Name('tuple', Load(), lineno=988, col_offset=17), [ListComp(Call(Attribute(Call(Attribute(Name('PyObjectPtr', Load(), lineno=988, col_offset=24), 'from_pyobject_ptr', Load(), lineno=988, col_offset=24), [Subscript(Name('self', Load(), lineno=988, col_offset=54), Index(Name('i', Load(), lineno=988, col_offset=59)), Load(), lineno=988, col_offset=54)], [], None, None, lineno=988, col_offset=24), 'proxyval', Load(), lineno=988, col_offset=24), [Name('visited', Load(), lineno=988, col_offset=72)], [], None, None, lineno=988, col_offset=24), [comprehension(Name('i', Store(), lineno=989, col_offset=28), Call(Name('safe_range', Load(), lineno=989, col_offset=33), [Call(Name('int_from_int', Load(), lineno=989, col_offset=44), [Call(Attribute(Name('self', Load(), lineno=989, col_offset=57), 'field', Load(), lineno=989, col_offset=57), [Str('ob_size', lineno=989, col_offset=68)], [], None, None, lineno=989, col_offset=57)], [], None, None, lineno=989, col_offset=44)], [], None, None, lineno=989, col_offset=33), [])], lineno=988, col_offset=24)], [], None, None, lineno=988, col_offset=17), lineno=988, col_offset=8), Return(Name('result', Load(), lineno=990, col_offset=15), lineno=990, col_offset=8)], [], lineno=982, col_offset=4), FunctionDef('write_repr', arguments([Name('self', Param(), lineno=992, col_offset=19), Name('out', Param(), lineno=992, col_offset=25), Name('visited', Param(), lineno=992, col_offset=30)], None, None, []), [If(Compare(Call(Attribute(Name('self', Load(), lineno=994, col_offset=11), 'as_address', Load(), lineno=994, col_offset=11), [], [], None, None, lineno=994, col_offset=11), [In()], [Name('visited', Load(), lineno=994, col_offset=32)], lineno=994, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=995, col_offset=12), 'write', Load(), lineno=995, col_offset=12), [Str('(...)', lineno=995, col_offset=22)], [], None, None, lineno=995, col_offset=12), lineno=995, col_offset=12), Return(None, lineno=996, col_offset=12)], [], lineno=994, col_offset=8), Expr(Call(Attribute(Name('visited', Load(), lineno=997, col_offset=8), 'add', Load(), lineno=997, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=997, col_offset=20), 'as_address', Load(), lineno=997, col_offset=20), [], [], None, None, lineno=997, col_offset=20)], [], None, None, lineno=997, col_offset=8), lineno=997, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=999, col_offset=8), 'write', Load(), lineno=999, col_offset=8), [Str('(', lineno=999, col_offset=18)], [], None, None, lineno=999, col_offset=8), lineno=999, col_offset=8), For(Name('i', Store(), lineno=1000, col_offset=12), Call(Name('safe_range', Load(), lineno=1000, col_offset=17), [Call(Name('int_from_int', Load(), lineno=1000, col_offset=28), [Call(Attribute(Name('self', Load(), lineno=1000, col_offset=41), 'field', Load(), lineno=1000, col_offset=41), [Str('ob_size', lineno=1000, col_offset=52)], [], None, None, lineno=1000, col_offset=41)], [], None, None, lineno=1000, col_offset=28)], [], None, None, lineno=1000, col_offset=17), [If(Compare(Name('i', Load(), lineno=1001, col_offset=15), [Gt()], [Num(0, lineno=1001, col_offset=19)], lineno=1001, col_offset=15), [Expr(Call(Attribute(Name('out', Load(), lineno=1002, col_offset=16), 'write', Load(), lineno=1002, col_offset=16), [Str(', ', lineno=1002, col_offset=26)], [], None, None, lineno=1002, col_offset=16), lineno=1002, col_offset=16)], [], lineno=1001, col_offset=12), Assign([Name('element', Store(), lineno=1003, col_offset=12)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=1003, col_offset=22), 'from_pyobject_ptr', Load(), lineno=1003, col_offset=22), [Subscript(Name('self', Load(), lineno=1003, col_offset=52), Index(Name('i', Load(), lineno=1003, col_offset=57)), Load(), lineno=1003, col_offset=52)], [], None, None, lineno=1003, col_offset=22), lineno=1003, col_offset=12), Expr(Call(Attribute(Name('element', Load(), lineno=1004, col_offset=12), 'write_repr', Load(), lineno=1004, col_offset=12), [Name('out', Load(), lineno=1004, col_offset=31), Name('visited', Load(), lineno=1004, col_offset=36)], [], None, None, lineno=1004, col_offset=12), lineno=1004, col_offset=12)], [], lineno=1000, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=1005, col_offset=11), 'field', Load(), lineno=1005, col_offset=11), [Str('ob_size', lineno=1005, col_offset=22)], [], None, None, lineno=1005, col_offset=11), [Eq()], [Num(1, lineno=1005, col_offset=36)], lineno=1005, col_offset=11), [Expr(Call(Attribute(Name('out', Load(), lineno=1006, col_offset=12), 'write', Load(), lineno=1006, col_offset=12), [Str(',)', lineno=1006, col_offset=22)], [], None, None, lineno=1006, col_offset=12), lineno=1006, col_offset=12)], [Expr(Call(Attribute(Name('out', Load(), lineno=1008, col_offset=12), 'write', Load(), lineno=1008, col_offset=12), [Str(')', lineno=1008, col_offset=22)], [], None, None, lineno=1008, col_offset=12), lineno=1008, col_offset=12)], lineno=1005, col_offset=8)], [], lineno=992, col_offset=4)], [], lineno=974, col_offset=0), ClassDef('PyTypeObjectPtr', [Name('PyObjectPtr', Load(), lineno=1010, col_offset=22)], [Assign([Name('_typename', Store(), lineno=1011, col_offset=4)], Str('PyTypeObject', lineno=1011, col_offset=16), lineno=1011, col_offset=4)], [], lineno=1010, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=1014, col_offset=3), 'maxunicode', Load(), lineno=1014, col_offset=3), [GtE()], [Num(65536, lineno=1014, col_offset=21)], lineno=1014, col_offset=3), [Assign([Name('_unichr', Store(), lineno=1015, col_offset=4)], Name('unichr', Load(), lineno=1015, col_offset=14), lineno=1015, col_offset=4)], [FunctionDef('_unichr', arguments([Name('x', Param(), lineno=1018, col_offset=16)], None, None, []), [If(Compare(Name('x', Load(), lineno=1019, col_offset=11), [Lt()], [Num(65536, lineno=1019, col_offset=15)], lineno=1019, col_offset=11), [Return(Call(Name('unichr', Load(), lineno=1020, col_offset=19), [Name('x', Load(), lineno=1020, col_offset=26)], [], None, None, lineno=1020, col_offset=19), lineno=1020, col_offset=12)], [], lineno=1019, col_offset=8), AugAssign(Name('x', Store(), lineno=1021, col_offset=8), Sub(), Num(65536, lineno=1021, col_offset=13), lineno=1021, col_offset=8), Assign([Name('ch1', Store(), lineno=1022, col_offset=8)], BinOp(Num(55296, lineno=1022, col_offset=14), BitOr(), BinOp(Name('x', Load(), lineno=1022, col_offset=24), RShift(), Num(10, lineno=1022, col_offset=29), lineno=1022, col_offset=24), lineno=1022, col_offset=14), lineno=1022, col_offset=8), Assign([Name('ch2', Store(), lineno=1023, col_offset=8)], BinOp(Num(56320, lineno=1023, col_offset=14), BitOr(), BinOp(Name('x', Load(), lineno=1023, col_offset=24), BitAnd(), Num(1023, lineno=1023, col_offset=28), lineno=1023, col_offset=24), lineno=1023, col_offset=14), lineno=1023, col_offset=8), Return(BinOp(Call(Name('unichr', Load(), lineno=1024, col_offset=15), [Name('ch1', Load(), lineno=1024, col_offset=22)], [], None, None, lineno=1024, col_offset=15), Add(), Call(Name('unichr', Load(), lineno=1024, col_offset=29), [Name('ch2', Load(), lineno=1024, col_offset=36)], [], None, None, lineno=1024, col_offset=29), lineno=1024, col_offset=15), lineno=1024, col_offset=8)], [], lineno=1018, col_offset=4)], lineno=1014, col_offset=0), ClassDef('PyUnicodeObjectPtr', [Name('PyObjectPtr', Load(), lineno=1026, col_offset=25)], [Assign([Name('_typename', Store(), lineno=1027, col_offset=4)], Str('PyUnicodeObject', lineno=1027, col_offset=16), lineno=1027, col_offset=4), FunctionDef('char_width', arguments([Name('self', Param(), lineno=1029, col_offset=19)], None, None, []), [Assign([Name('_type_Py_UNICODE', Store(), lineno=1030, col_offset=8)], Call(Attribute(Name('gdb', Load(), lineno=1030, col_offset=27), 'lookup_type', Load(), lineno=1030, col_offset=27), [Str('Py_UNICODE', lineno=1030, col_offset=43)], [], None, None, lineno=1030, col_offset=27), lineno=1030, col_offset=8), Return(Attribute(Name('_type_Py_UNICODE', Load(), lineno=1031, col_offset=15), 'sizeof', Load(), lineno=1031, col_offset=15), lineno=1031, col_offset=8)], [], lineno=1029, col_offset=4), FunctionDef('proxyval', arguments([Name('self', Param(), lineno=1033, col_offset=17), Name('visited', Param(), lineno=1033, col_offset=23)], None, None, []), [Assign([Name('field_length', Store(), lineno=1037, col_offset=8)], Call(Name('long', Load(), lineno=1037, col_offset=23), [Call(Attribute(Name('self', Load(), lineno=1037, col_offset=28), 'field', Load(), lineno=1037, col_offset=28), [Str('length', lineno=1037, col_offset=39)], [], None, None, lineno=1037, col_offset=28)], [], None, None, lineno=1037, col_offset=23), lineno=1037, col_offset=8), Assign([Name('field_str', Store(), lineno=1038, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1038, col_offset=20), 'field', Load(), lineno=1038, col_offset=20), [Str('str', lineno=1038, col_offset=31)], [], None, None, lineno=1038, col_offset=20), lineno=1038, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=1042, col_offset=11), 'char_width', Load(), lineno=1042, col_offset=11), [], [], None, None, lineno=1042, col_offset=11), [Gt()], [Num(2, lineno=1042, col_offset=31)], lineno=1042, col_offset=11), [Assign([Name('Py_UNICODEs', Store(), lineno=1043, col_offset=12)], ListComp(Call(Name('int', Load(), lineno=1043, col_offset=27), [Subscript(Name('field_str', Load(), lineno=1043, col_offset=31), Index(Name('i', Load(), lineno=1043, col_offset=41)), Load(), lineno=1043, col_offset=31)], [], None, None, lineno=1043, col_offset=27), [comprehension(Name('i', Store(), lineno=1043, col_offset=49), Call(Name('safe_range', Load(), lineno=1043, col_offset=54), [Name('field_length', Load(), lineno=1043, col_offset=65)], [], None, None, lineno=1043, col_offset=54), [])], lineno=1043, col_offset=27), lineno=1043, col_offset=12)], [Assign([Name('Py_UNICODEs', Store(), lineno=1047, col_offset=12)], List([], Load(), lineno=1047, col_offset=26), lineno=1047, col_offset=12), Assign([Name('i', Store(), lineno=1048, col_offset=12)], Num(0, lineno=1048, col_offset=16), lineno=1048, col_offset=12), Assign([Name('limit', Store(), lineno=1049, col_offset=12)], Call(Name('safety_limit', Load(), lineno=1049, col_offset=20), [Name('field_length', Load(), lineno=1049, col_offset=33)], [], None, None, lineno=1049, col_offset=20), lineno=1049, col_offset=12), While(Compare(Name('i', Load(), lineno=1050, col_offset=18), [Lt()], [Name('limit', Load(), lineno=1050, col_offset=22)], lineno=1050, col_offset=18), [Assign([Name('ucs', Store(), lineno=1051, col_offset=16)], Call(Name('int', Load(), lineno=1051, col_offset=22), [Subscript(Name('field_str', Load(), lineno=1051, col_offset=26), Index(Name('i', Load(), lineno=1051, col_offset=36)), Load(), lineno=1051, col_offset=26)], [], None, None, lineno=1051, col_offset=22), lineno=1051, col_offset=16), AugAssign(Name('i', Store(), lineno=1052, col_offset=16), Add(), Num(1, lineno=1052, col_offset=21), lineno=1052, col_offset=16), If(BoolOp(Or(), [Compare(Name('ucs', Load(), lineno=1053, col_offset=19), [Lt()], [Num(55296, lineno=1053, col_offset=25)], lineno=1053, col_offset=19), Compare(Name('ucs', Load(), lineno=1053, col_offset=35), [GtE()], [Num(56320, lineno=1053, col_offset=42)], lineno=1053, col_offset=35), Compare(Name('i', Load(), lineno=1053, col_offset=52), [Eq()], [Name('field_length', Load(), lineno=1053, col_offset=57)], lineno=1053, col_offset=52)], lineno=1053, col_offset=19), [Expr(Call(Attribute(Name('Py_UNICODEs', Load(), lineno=1054, col_offset=20), 'append', Load(), lineno=1054, col_offset=20), [Name('ucs', Load(), lineno=1054, col_offset=39)], [], None, None, lineno=1054, col_offset=20), lineno=1054, col_offset=20), Continue( lineno=1055, col_offset=20)], [], lineno=1053, col_offset=16), Assign([Name('ucs2', Store(), lineno=1057, col_offset=16)], Call(Name('int', Load(), lineno=1057, col_offset=23), [Subscript(Name('field_str', Load(), lineno=1057, col_offset=27), Index(Name('i', Load(), lineno=1057, col_offset=37)), Load(), lineno=1057, col_offset=27)], [], None, None, lineno=1057, col_offset=23), lineno=1057, col_offset=16), If(BoolOp(Or(), [Compare(Name('ucs2', Load(), lineno=1058, col_offset=19), [Lt()], [Num(56320, lineno=1058, col_offset=26)], lineno=1058, col_offset=19), Compare(Name('ucs2', Load(), lineno=1058, col_offset=36), [Gt()], [Num(57343, lineno=1058, col_offset=43)], lineno=1058, col_offset=36)], lineno=1058, col_offset=19), [Continue( lineno=1059, col_offset=20)], [], lineno=1058, col_offset=16), Assign([Name('code', Store(), lineno=1060, col_offset=16)], BinOp(BinOp(Name('ucs', Load(), lineno=1060, col_offset=24), BitAnd(), Num(1023, lineno=1060, col_offset=30), lineno=1060, col_offset=24), LShift(), Num(10, lineno=1060, col_offset=41), lineno=1060, col_offset=23), lineno=1060, col_offset=16), AugAssign(Name('code', Store(), lineno=1061, col_offset=16), BitOr(), BinOp(Name('ucs2', Load(), lineno=1061, col_offset=24), BitAnd(), Num(1023, lineno=1061, col_offset=31), lineno=1061, col_offset=24), lineno=1061, col_offset=16), AugAssign(Name('code', Store(), lineno=1062, col_offset=16), Add(), Num(65536, lineno=1062, col_offset=24), lineno=1062, col_offset=16), Expr(Call(Attribute(Name('Py_UNICODEs', Load(), lineno=1063, col_offset=16), 'append', Load(), lineno=1063, col_offset=16), [Name('code', Load(), lineno=1063, col_offset=35)], [], None, None, lineno=1063, col_offset=16), lineno=1063, col_offset=16), AugAssign(Name('i', Store(), lineno=1064, col_offset=16), Add(), Num(1, lineno=1064, col_offset=21), lineno=1064, col_offset=16)], [], lineno=1050, col_offset=12)], lineno=1042, col_offset=8), Assign([Name('result', Store(), lineno=1069, col_offset=8)], Call(Attribute(Str(u'', lineno=1069, col_offset=17), 'join', Load(), lineno=1069, col_offset=17), [ListComp(Call(Name('_unichr', Load(), lineno=1069, col_offset=27), [Name('ucs', Load(), lineno=1069, col_offset=35)], [], None, None, lineno=1069, col_offset=27), [comprehension(Name('ucs', Store(), lineno=1069, col_offset=44), Name('Py_UNICODEs', Load(), lineno=1069, col_offset=51), [])], lineno=1069, col_offset=27)], [], None, None, lineno=1069, col_offset=17), lineno=1069, col_offset=8), Return(Name('result', Load(), lineno=1070, col_offset=15), lineno=1070, col_offset=8)], [], lineno=1033, col_offset=4)], [], lineno=1026, col_offset=0), FunctionDef('int_from_int', arguments([Name('gdbval', Param(), lineno=1073, col_offset=17)], None, None, []), [Return(Call(Name('int', Load(), lineno=1074, col_offset=11), [Call(Name('str', Load(), lineno=1074, col_offset=15), [Name('gdbval', Load(), lineno=1074, col_offset=19)], [], None, None, lineno=1074, col_offset=15)], [], None, None, lineno=1074, col_offset=11), lineno=1074, col_offset=4)], [], lineno=1073, col_offset=0), FunctionDef('stringify', arguments([Name('val', Param(), lineno=1077, col_offset=14)], None, None, []), [If(Name('True', Load(), lineno=1080, col_offset=7), [Return(Call(Name('repr', Load(), lineno=1081, col_offset=15), [Name('val', Load(), lineno=1081, col_offset=20)], [], None, None, lineno=1081, col_offset=15), lineno=1081, col_offset=8)], [ImportFrom('pprint', [alias('pformat', None)], 0, lineno=1083, col_offset=8), Return(Call(Name('pformat', Load(), lineno=1084, col_offset=15), [Name('val', Load(), lineno=1084, col_offset=23)], [], None, None, lineno=1084, col_offset=15), lineno=1084, col_offset=8)], lineno=1080, col_offset=4)], [], lineno=1077, col_offset=0), ClassDef('PyObjectPtrPrinter', [], [Expr(Str('Prints a (PyObject*)', lineno=1088, col_offset=4), lineno=1088, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1090, col_offset=18), Name('gdbval', Param(), lineno=1090, col_offset=24)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1091, col_offset=8), 'gdbval', Store(), lineno=1091, col_offset=8)], Name('gdbval', Load(), lineno=1091, col_offset=22), lineno=1091, col_offset=8)], [], lineno=1090, col_offset=4), FunctionDef('to_string', arguments([Name('self', Param(), lineno=1093, col_offset=19)], None, None, []), [Assign([Name('pyop', Store(), lineno=1094, col_offset=8)], Call(Attribute(Name('PyObjectPtr', Load(), lineno=1094, col_offset=15), 'from_pyobject_ptr', Load(), lineno=1094, col_offset=15), [Attribute(Name('self', Load(), lineno=1094, col_offset=45), 'gdbval', Load(), lineno=1094, col_offset=45)], [], None, None, lineno=1094, col_offset=15), lineno=1094, col_offset=8), If(Name('True', Load(), lineno=1095, col_offset=11), [Return(Call(Attribute(Name('pyop', Load(), lineno=1096, col_offset=19), 'get_truncated_repr', Load(), lineno=1096, col_offset=19), [Name('MAX_OUTPUT_LEN', Load(), lineno=1096, col_offset=43)], [], None, None, lineno=1096, col_offset=19), lineno=1096, col_offset=12)], [Assign([Name('proxyval', Store(), lineno=1100, col_offset=12)], Call(Attribute(Name('pyop', Load(), lineno=1100, col_offset=23), 'proxyval', Load(), lineno=1100, col_offset=23), [Call(Name('set', Load(), lineno=1100, col_offset=37), [], [], None, None, lineno=1100, col_offset=37)], [], None, None, lineno=1100, col_offset=23), lineno=1100, col_offset=12), Return(Call(Name('stringify', Load(), lineno=1101, col_offset=19), [Name('proxyval', Load(), lineno=1101, col_offset=29)], [], None, None, lineno=1101, col_offset=19), lineno=1101, col_offset=12)], lineno=1095, col_offset=8)], [], lineno=1093, col_offset=4)], [], lineno=1087, col_offset=0), FunctionDef('pretty_printer_lookup', arguments([Name('gdbval', Param(), lineno=1103, col_offset=26)], None, None, []), [Assign([Name('type', Store(), lineno=1104, col_offset=4)], Call(Attribute(Attribute(Name('gdbval', Load(), lineno=1104, col_offset=11), 'type', Load(), lineno=1104, col_offset=11), 'unqualified', Load(), lineno=1104, col_offset=11), [], [], None, None, lineno=1104, col_offset=11), lineno=1104, col_offset=4), If(Compare(Attribute(Name('type', Load(), lineno=1105, col_offset=7), 'code', Load(), lineno=1105, col_offset=7), [Eq()], [Attribute(Name('gdb', Load(), lineno=1105, col_offset=20), 'TYPE_CODE_PTR', Load(), lineno=1105, col_offset=20)], lineno=1105, col_offset=7), [Assign([Name('type', Store(), lineno=1106, col_offset=8)], Call(Attribute(Call(Attribute(Name('type', Load(), lineno=1106, col_offset=15), 'target', Load(), lineno=1106, col_offset=15), [], [], None, None, lineno=1106, col_offset=15), 'unqualified', Load(), lineno=1106, col_offset=15), [], [], None, None, lineno=1106, col_offset=15), lineno=1106, col_offset=8), Assign([Name('t', Store(), lineno=1107, col_offset=8)], Call(Name('str', Load(), lineno=1107, col_offset=12), [Name('type', Load(), lineno=1107, col_offset=16)], [], None, None, lineno=1107, col_offset=12), lineno=1107, col_offset=8), If(Compare(Name('t', Load(), lineno=1108, col_offset=11), [In()], [Tuple([Str('PyObject', lineno=1108, col_offset=17), Str('PyFrameObject', lineno=1108, col_offset=29)], Load(), lineno=1108, col_offset=17)], lineno=1108, col_offset=11), [Return(Call(Name('PyObjectPtrPrinter', Load(), lineno=1109, col_offset=19), [Name('gdbval', Load(), lineno=1109, col_offset=38)], [], None, None, lineno=1109, col_offset=19), lineno=1109, col_offset=12)], [], lineno=1108, col_offset=8)], [], lineno=1105, col_offset=4)], [], lineno=1103, col_offset=0), Expr(Str('\nDuring development, I\'ve been manually invoking the code in this way:\n(gdb) python\n\nimport sys\nsys.path.append(\'/home/david/coding/python-gdb\')\nimport libpython\nend\n\nthen reloading it after each edit like this:\n(gdb) python reload(libpython)\n\nThe following code should ensure that the prettyprinter is registered\nif the code is autoloaded by gdb when visiting libpython.so, provided\nthat this python file is installed to the same path as the library (or its\n.debug file) plus a "-gdb.py" suffix, e.g:\n  /usr/lib/libpython2.6.so.1.0-gdb.py\n  /usr/lib/debug/usr/lib/libpython2.6.so.1.0.debug-gdb.py\n', lineno=1129, col_offset=-1), lineno=1129, col_offset=-1), FunctionDef('register', arguments([Name('obj', Param(), lineno=1130, col_offset=14)], None, None, []), [If(Compare(Name('obj', Load(), lineno=1131, col_offset=7), [Eq()], [Name('None', Load(), lineno=1131, col_offset=14)], lineno=1131, col_offset=7), [Assign([Name('obj', Store(), lineno=1132, col_offset=8)], Name('gdb', Load(), lineno=1132, col_offset=14), lineno=1132, col_offset=8)], [], lineno=1131, col_offset=4), Expr(Call(Attribute(Attribute(Name('obj', Load(), lineno=1135, col_offset=4), 'pretty_printers', Load(), lineno=1135, col_offset=4), 'append', Load(), lineno=1135, col_offset=4), [Name('pretty_printer_lookup', Load(), lineno=1135, col_offset=31)], [], None, None, lineno=1135, col_offset=4), lineno=1135, col_offset=4)], [], lineno=1130, col_offset=0), Expr(Call(Name('register', Load(), lineno=1137, col_offset=0), [Call(Attribute(Name('gdb', Load(), lineno=1137, col_offset=10), 'current_objfile', Load(), lineno=1137, col_offset=10), [], [], None, None, lineno=1137, col_offset=10)], [], None, None, lineno=1137, col_offset=0), lineno=1137, col_offset=0), ClassDef('Frame', [Name('object', Load(), lineno=1145, col_offset=12)], [Expr(Str('\n    Wrapper for gdb.Frame, adding various methods\n    ', lineno=1148, col_offset=-1), lineno=1148, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1149, col_offset=17), Name('gdbframe', Param(), lineno=1149, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1150, col_offset=8), '_gdbframe', Store(), lineno=1150, col_offset=8)], Name('gdbframe', Load(), lineno=1150, col_offset=25), lineno=1150, col_offset=8)], [], lineno=1149, col_offset=4), FunctionDef('older', arguments([Name('self', Param(), lineno=1152, col_offset=14)], None, None, []), [Assign([Name('older', Store(), lineno=1153, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1153, col_offset=16), '_gdbframe', Load(), lineno=1153, col_offset=16), 'older', Load(), lineno=1153, col_offset=16), [], [], None, None, lineno=1153, col_offset=16), lineno=1153, col_offset=8), If(Name('older', Load(), lineno=1154, col_offset=11), [Return(Call(Name('Frame', Load(), lineno=1155, col_offset=19), [Name('older', Load(), lineno=1155, col_offset=25)], [], None, None, lineno=1155, col_offset=19), lineno=1155, col_offset=12)], [Return(Name('None', Load(), lineno=1157, col_offset=19), lineno=1157, col_offset=12)], lineno=1154, col_offset=8)], [], lineno=1152, col_offset=4), FunctionDef('newer', arguments([Name('self', Param(), lineno=1159, col_offset=14)], None, None, []), [Assign([Name('newer', Store(), lineno=1160, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1160, col_offset=16), '_gdbframe', Load(), lineno=1160, col_offset=16), 'newer', Load(), lineno=1160, col_offset=16), [], [], None, None, lineno=1160, col_offset=16), lineno=1160, col_offset=8), If(Name('newer', Load(), lineno=1161, col_offset=11), [Return(Call(Name('Frame', Load(), lineno=1162, col_offset=19), [Name('newer', Load(), lineno=1162, col_offset=25)], [], None, None, lineno=1162, col_offset=19), lineno=1162, col_offset=12)], [Return(Name('None', Load(), lineno=1164, col_offset=19), lineno=1164, col_offset=12)], lineno=1161, col_offset=8)], [], lineno=1159, col_offset=4), FunctionDef('select', arguments([Name('self', Param(), lineno=1166, col_offset=15)], None, None, []), [Expr(Str('If supported, select this frame and return True; return False if unsupported\n\n        Not all builds have a gdb.Frame.select method; seems to be present on Fedora 12\n        onwards, but absent on Ubuntu buildbot', lineno=1170, col_offset=-1), lineno=1170, col_offset=-1), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=1171, col_offset=15), [Attribute(Name('self', Load(), lineno=1171, col_offset=23), '_gdbframe', Load(), lineno=1171, col_offset=23), Str('select', lineno=1171, col_offset=39)], [], None, None, lineno=1171, col_offset=15), lineno=1171, col_offset=11), [Print(None, [Str('Unable to select frame: this build of gdb does not expose a gdb.Frame.select method', lineno=1172, col_offset=19)], True, lineno=1172, col_offset=12), Return(Name('False', Load(), lineno=1174, col_offset=19), lineno=1174, col_offset=12)], [], lineno=1171, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1175, col_offset=8), '_gdbframe', Load(), lineno=1175, col_offset=8), 'select', Load(), lineno=1175, col_offset=8), [], [], None, None, lineno=1175, col_offset=8), lineno=1175, col_offset=8), Return(Name('True', Load(), lineno=1176, col_offset=15), lineno=1176, col_offset=8)], [], lineno=1166, col_offset=4), FunctionDef('get_index', arguments([Name('self', Param(), lineno=1178, col_offset=18)], None, None, []), [Expr(Str('Calculate index of frame, starting at 0 for the newest frame within\n        this thread', lineno=1180, col_offset=-1), lineno=1180, col_offset=-1), Assign([Name('index', Store(), lineno=1181, col_offset=8)], Num(0, lineno=1181, col_offset=16), lineno=1181, col_offset=8), Assign([Name('iter_frame', Store(), lineno=1183, col_offset=8)], Name('self', Load(), lineno=1183, col_offset=21), lineno=1183, col_offset=8), While(Call(Attribute(Name('iter_frame', Load(), lineno=1184, col_offset=14), 'newer', Load(), lineno=1184, col_offset=14), [], [], None, None, lineno=1184, col_offset=14), [AugAssign(Name('index', Store(), lineno=1185, col_offset=12), Add(), Num(1, lineno=1185, col_offset=21), lineno=1185, col_offset=12), Assign([Name('iter_frame', Store(), lineno=1186, col_offset=12)], Call(Attribute(Name('iter_frame', Load(), lineno=1186, col_offset=25), 'newer', Load(), lineno=1186, col_offset=25), [], [], None, None, lineno=1186, col_offset=25), lineno=1186, col_offset=12)], [], lineno=1184, col_offset=8), Return(Name('index', Load(), lineno=1187, col_offset=15), lineno=1187, col_offset=8)], [], lineno=1178, col_offset=4), FunctionDef('is_evalframeex', arguments([Name('self', Param(), lineno=1189, col_offset=23)], None, None, []), [Expr(Str('Is this a PyEval_EvalFrameEx frame?', lineno=1190, col_offset=8), lineno=1190, col_offset=8), If(Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=1191, col_offset=11), '_gdbframe', Load(), lineno=1191, col_offset=11), 'name', Load(), lineno=1191, col_offset=11), [], [], None, None, lineno=1191, col_offset=11), [Eq()], [Str('PyEval_EvalFrameEx', lineno=1191, col_offset=36)], lineno=1191, col_offset=11), [Expr(Str('\n            I believe we also need to filter on the inline\n            struct frame_id.inline_depth, only regarding frames with\n            an inline depth of 0 as actually being this function\n\n            So we reject those with type gdb.INLINE_FRAME\n            ', lineno=1198, col_offset=-1), lineno=1198, col_offset=-1), If(Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=1199, col_offset=15), '_gdbframe', Load(), lineno=1199, col_offset=15), 'type', Load(), lineno=1199, col_offset=15), [], [], None, None, lineno=1199, col_offset=15), [Eq()], [Attribute(Name('gdb', Load(), lineno=1199, col_offset=40), 'NORMAL_FRAME', Load(), lineno=1199, col_offset=40)], lineno=1199, col_offset=15), [Return(Name('True', Load(), lineno=1201, col_offset=23), lineno=1201, col_offset=16)], [], lineno=1199, col_offset=12)], [], lineno=1191, col_offset=8), Return(Name('False', Load(), lineno=1203, col_offset=15), lineno=1203, col_offset=8)], [], lineno=1189, col_offset=4), FunctionDef('get_pyop', arguments([Name('self', Param(), lineno=1205, col_offset=17)], None, None, []), [TryExcept([Assign([Name('f', Store(), lineno=1207, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1207, col_offset=16), '_gdbframe', Load(), lineno=1207, col_offset=16), 'read_var', Load(), lineno=1207, col_offset=16), [Str('f', lineno=1207, col_offset=40)], [], None, None, lineno=1207, col_offset=16), lineno=1207, col_offset=12), Return(Call(Attribute(Name('PyFrameObjectPtr', Load(), lineno=1208, col_offset=19), 'from_pyobject_ptr', Load(), lineno=1208, col_offset=19), [Name('f', Load(), lineno=1208, col_offset=54)], [], None, None, lineno=1208, col_offset=19), lineno=1208, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=1209, col_offset=15), None, [Return(Name('None', Load(), lineno=1210, col_offset=19), lineno=1210, col_offset=12)], lineno=1209, col_offset=8)], [], lineno=1206, col_offset=8)], [], lineno=1205, col_offset=4), FunctionDef('get_selected_frame', arguments([Name('cls', Param(), lineno=1213, col_offset=27)], None, None, []), [Assign([Name('_gdbframe', Store(), lineno=1214, col_offset=8)], Call(Attribute(Name('gdb', Load(), lineno=1214, col_offset=20), 'selected_frame', Load(), lineno=1214, col_offset=20), [], [], None, None, lineno=1214, col_offset=20), lineno=1214, col_offset=8), If(Name('_gdbframe', Load(), lineno=1215, col_offset=11), [Return(Call(Name('Frame', Load(), lineno=1216, col_offset=19), [Name('_gdbframe', Load(), lineno=1216, col_offset=25)], [], None, None, lineno=1216, col_offset=19), lineno=1216, col_offset=12)], [], lineno=1215, col_offset=8), Return(Name('None', Load(), lineno=1217, col_offset=15), lineno=1217, col_offset=8)], [Name('classmethod', Load(), lineno=1212, col_offset=5)], lineno=1212, col_offset=4), FunctionDef('get_selected_python_frame', arguments([Name('cls', Param(), lineno=1220, col_offset=34)], None, None, []), [Expr(Str('Try to obtain the Frame for the python code in the selected frame,\n        or None', lineno=1222, col_offset=-1), lineno=1222, col_offset=-1), Assign([Name('frame', Store(), lineno=1223, col_offset=8)], Call(Attribute(Name('cls', Load(), lineno=1223, col_offset=16), 'get_selected_frame', Load(), lineno=1223, col_offset=16), [], [], None, None, lineno=1223, col_offset=16), lineno=1223, col_offset=8), While(Name('frame', Load(), lineno=1225, col_offset=14), [If(Call(Attribute(Name('frame', Load(), lineno=1226, col_offset=15), 'is_evalframeex', Load(), lineno=1226, col_offset=15), [], [], None, None, lineno=1226, col_offset=15), [Return(Name('frame', Load(), lineno=1227, col_offset=23), lineno=1227, col_offset=16)], [], lineno=1226, col_offset=12), Assign([Name('frame', Store(), lineno=1228, col_offset=12)], Call(Attribute(Name('frame', Load(), lineno=1228, col_offset=20), 'older', Load(), lineno=1228, col_offset=20), [], [], None, None, lineno=1228, col_offset=20), lineno=1228, col_offset=12)], [], lineno=1225, col_offset=8), Return(Name('None', Load(), lineno=1231, col_offset=15), lineno=1231, col_offset=8)], [Name('classmethod', Load(), lineno=1219, col_offset=5)], lineno=1219, col_offset=4), FunctionDef('print_summary', arguments([Name('self', Param(), lineno=1233, col_offset=22)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=1234, col_offset=11), 'is_evalframeex', Load(), lineno=1234, col_offset=11), [], [], None, None, lineno=1234, col_offset=11), [Assign([Name('pyop', Store(), lineno=1235, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1235, col_offset=19), 'get_pyop', Load(), lineno=1235, col_offset=19), [], [], None, None, lineno=1235, col_offset=19), lineno=1235, col_offset=12), If(Name('pyop', Load(), lineno=1236, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1237, col_offset=16), 'stdout', Load(), lineno=1237, col_offset=16), 'write', Load(), lineno=1237, col_offset=16), [BinOp(Str('#%i %s\n', lineno=1237, col_offset=33), Mod(), Tuple([Call(Attribute(Name('self', Load(), lineno=1237, col_offset=47), 'get_index', Load(), lineno=1237, col_offset=47), [], [], None, None, lineno=1237, col_offset=47), Call(Attribute(Name('pyop', Load(), lineno=1237, col_offset=65), 'get_truncated_repr', Load(), lineno=1237, col_offset=65), [Name('MAX_OUTPUT_LEN', Load(), lineno=1237, col_offset=89)], [], None, None, lineno=1237, col_offset=65)], Load(), lineno=1237, col_offset=47), lineno=1237, col_offset=33)], [], None, None, lineno=1237, col_offset=16), lineno=1237, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1238, col_offset=16), 'stdout', Load(), lineno=1238, col_offset=16), 'write', Load(), lineno=1238, col_offset=16), [Call(Attribute(Name('pyop', Load(), lineno=1238, col_offset=33), 'current_line', Load(), lineno=1238, col_offset=33), [], [], None, None, lineno=1238, col_offset=33)], [], None, None, lineno=1238, col_offset=16), lineno=1238, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1240, col_offset=16), 'stdout', Load(), lineno=1240, col_offset=16), 'write', Load(), lineno=1240, col_offset=16), [BinOp(Str('#%i (unable to read python frame information)\n', lineno=1240, col_offset=33), Mod(), Call(Attribute(Name('self', Load(), lineno=1240, col_offset=85), 'get_index', Load(), lineno=1240, col_offset=85), [], [], None, None, lineno=1240, col_offset=85), lineno=1240, col_offset=33)], [], None, None, lineno=1240, col_offset=16), lineno=1240, col_offset=16)], lineno=1236, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1242, col_offset=12), 'stdout', Load(), lineno=1242, col_offset=12), 'write', Load(), lineno=1242, col_offset=12), [BinOp(Str('#%i\n', lineno=1242, col_offset=29), Mod(), Call(Attribute(Name('self', Load(), lineno=1242, col_offset=39), 'get_index', Load(), lineno=1242, col_offset=39), [], [], None, None, lineno=1242, col_offset=39), lineno=1242, col_offset=29)], [], None, None, lineno=1242, col_offset=12), lineno=1242, col_offset=12)], lineno=1234, col_offset=8)], [], lineno=1233, col_offset=4)], [], lineno=1145, col_offset=0), ClassDef('PyList', [Attribute(Name('gdb', Load(), lineno=1244, col_offset=13), 'Command', Load(), lineno=1244, col_offset=13)], [Expr(Str('List the current Python source code, if any\n\n    Use\n       py-list START\n    to list at a different line number within the python source.\n\n    Use\n       py-list START, END\n    to list a specific range of lines within the python source.\n    ', lineno=1254, col_offset=-1), lineno=1254, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1256, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1257, col_offset=8), 'Command', Load(), lineno=1257, col_offset=8), '__init__', Load(), lineno=1257, col_offset=8), [Name('self', Load(), lineno=1257, col_offset=30), Str('py-list', lineno=1258, col_offset=30), Attribute(Name('gdb', Load(), lineno=1259, col_offset=30), 'COMMAND_FILES', Load(), lineno=1259, col_offset=30), Attribute(Name('gdb', Load(), lineno=1260, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1260, col_offset=30)], [], None, None, lineno=1257, col_offset=8), lineno=1257, col_offset=8)], [], lineno=1256, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1263, col_offset=15), Name('args', Param(), lineno=1263, col_offset=21), Name('from_tty', Param(), lineno=1263, col_offset=27)], None, None, []), [Import([alias('re', None)], lineno=1264, col_offset=8), Assign([Name('start', Store(), lineno=1266, col_offset=8)], Name('None', Load(), lineno=1266, col_offset=16), lineno=1266, col_offset=8), Assign([Name('end', Store(), lineno=1267, col_offset=8)], Name('None', Load(), lineno=1267, col_offset=14), lineno=1267, col_offset=8), Assign([Name('m', Store(), lineno=1269, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=1269, col_offset=12), 'match', Load(), lineno=1269, col_offset=12), [Str('\\s*(\\d+)\\s*', lineno=1269, col_offset=21), Name('args', Load(), lineno=1269, col_offset=37)], [], None, None, lineno=1269, col_offset=12), lineno=1269, col_offset=8), If(Name('m', Load(), lineno=1270, col_offset=11), [Assign([Name('start', Store(), lineno=1271, col_offset=12)], Call(Name('int', Load(), lineno=1271, col_offset=20), [Call(Attribute(Name('m', Load(), lineno=1271, col_offset=24), 'group', Load(), lineno=1271, col_offset=24), [Num(0, lineno=1271, col_offset=32)], [], None, None, lineno=1271, col_offset=24)], [], None, None, lineno=1271, col_offset=20), lineno=1271, col_offset=12), Assign([Name('end', Store(), lineno=1272, col_offset=12)], BinOp(Name('start', Load(), lineno=1272, col_offset=18), Add(), Num(10, lineno=1272, col_offset=26), lineno=1272, col_offset=18), lineno=1272, col_offset=12)], [], lineno=1270, col_offset=8), Assign([Name('m', Store(), lineno=1274, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=1274, col_offset=12), 'match', Load(), lineno=1274, col_offset=12), [Str('\\s*(\\d+)\\s*,\\s*(\\d+)\\s*', lineno=1274, col_offset=21), Name('args', Load(), lineno=1274, col_offset=49)], [], None, None, lineno=1274, col_offset=12), lineno=1274, col_offset=8), If(Name('m', Load(), lineno=1275, col_offset=11), [Assign([Tuple([Name('start', Store(), lineno=1276, col_offset=12), Name('end', Store(), lineno=1276, col_offset=19)], Store(), lineno=1276, col_offset=12)], Call(Name('map', Load(), lineno=1276, col_offset=25), [Name('int', Load(), lineno=1276, col_offset=29), Call(Attribute(Name('m', Load(), lineno=1276, col_offset=34), 'groups', Load(), lineno=1276, col_offset=34), [], [], None, None, lineno=1276, col_offset=34)], [], None, None, lineno=1276, col_offset=25), lineno=1276, col_offset=12)], [], lineno=1275, col_offset=8), Assign([Name('frame', Store(), lineno=1278, col_offset=8)], Call(Attribute(Name('Frame', Load(), lineno=1278, col_offset=16), 'get_selected_python_frame', Load(), lineno=1278, col_offset=16), [], [], None, None, lineno=1278, col_offset=16), lineno=1278, col_offset=8), If(UnaryOp(Not(), Name('frame', Load(), lineno=1279, col_offset=15), lineno=1279, col_offset=11), [Print(None, [Str('Unable to locate python frame', lineno=1280, col_offset=18)], True, lineno=1280, col_offset=12), Return(None, lineno=1281, col_offset=12)], [], lineno=1279, col_offset=8), Assign([Name('pyop', Store(), lineno=1283, col_offset=8)], Call(Attribute(Name('frame', Load(), lineno=1283, col_offset=15), 'get_pyop', Load(), lineno=1283, col_offset=15), [], [], None, None, lineno=1283, col_offset=15), lineno=1283, col_offset=8), If(UnaryOp(Not(), Name('pyop', Load(), lineno=1284, col_offset=15), lineno=1284, col_offset=11), [Print(None, [Str('Unable to read information on python frame', lineno=1285, col_offset=18)], True, lineno=1285, col_offset=12), Return(None, lineno=1286, col_offset=12)], [], lineno=1284, col_offset=8), Assign([Name('filename', Store(), lineno=1288, col_offset=8)], Call(Attribute(Name('pyop', Load(), lineno=1288, col_offset=19), 'filename', Load(), lineno=1288, col_offset=19), [], [], None, None, lineno=1288, col_offset=19), lineno=1288, col_offset=8), Assign([Name('lineno', Store(), lineno=1289, col_offset=8)], Call(Attribute(Name('pyop', Load(), lineno=1289, col_offset=17), 'current_line_num', Load(), lineno=1289, col_offset=17), [], [], None, None, lineno=1289, col_offset=17), lineno=1289, col_offset=8), If(Compare(Name('start', Load(), lineno=1291, col_offset=11), [Is()], [Name('None', Load(), lineno=1291, col_offset=20)], lineno=1291, col_offset=11), [Assign([Name('start', Store(), lineno=1292, col_offset=12)], BinOp(Name('lineno', Load(), lineno=1292, col_offset=20), Sub(), Num(5, lineno=1292, col_offset=29), lineno=1292, col_offset=20), lineno=1292, col_offset=12), Assign([Name('end', Store(), lineno=1293, col_offset=12)], BinOp(Name('lineno', Load(), lineno=1293, col_offset=18), Add(), Num(5, lineno=1293, col_offset=27), lineno=1293, col_offset=18), lineno=1293, col_offset=12)], [], lineno=1291, col_offset=8), If(Compare(Name('start', Load(), lineno=1295, col_offset=11), [Lt()], [Num(1, lineno=1295, col_offset=17)], lineno=1295, col_offset=11), [Assign([Name('start', Store(), lineno=1296, col_offset=12)], Num(1, lineno=1296, col_offset=20), lineno=1296, col_offset=12)], [], lineno=1295, col_offset=8), With(Call(Name('open', Load(), lineno=1298, col_offset=13), [Name('filename', Load(), lineno=1298, col_offset=18), Str('r', lineno=1298, col_offset=28)], [], None, None, lineno=1298, col_offset=13), Name('f', Store(), lineno=1298, col_offset=36), [Assign([Name('all_lines', Store(), lineno=1299, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=1299, col_offset=24), 'readlines', Load(), lineno=1299, col_offset=24), [], [], None, None, lineno=1299, col_offset=24), lineno=1299, col_offset=12), For(Tuple([Name('i', Store(), lineno=1303, col_offset=16), Name('line', Store(), lineno=1303, col_offset=19)], Store(), lineno=1303, col_offset=16), Call(Name('enumerate', Load(), lineno=1303, col_offset=27), [Subscript(Name('all_lines', Load(), lineno=1303, col_offset=37), Slice(BinOp(Name('start', Load(), lineno=1303, col_offset=47), Sub(), Num(1, lineno=1303, col_offset=53), lineno=1303, col_offset=47), Name('end', Load(), lineno=1303, col_offset=55), None), Load(), lineno=1303, col_offset=37)], [], None, None, lineno=1303, col_offset=27), [Assign([Name('linestr', Store(), lineno=1304, col_offset=16)], Call(Name('str', Load(), lineno=1304, col_offset=26), [BinOp(Name('i', Load(), lineno=1304, col_offset=30), Add(), Name('start', Load(), lineno=1304, col_offset=32), lineno=1304, col_offset=30)], [], None, None, lineno=1304, col_offset=26), lineno=1304, col_offset=16), If(Compare(BinOp(Name('i', Load(), lineno=1306, col_offset=19), Add(), Name('start', Load(), lineno=1306, col_offset=23), lineno=1306, col_offset=19), [Eq()], [Name('lineno', Load(), lineno=1306, col_offset=32)], lineno=1306, col_offset=19), [Assign([Name('linestr', Store(), lineno=1307, col_offset=20)], BinOp(Str('>', lineno=1307, col_offset=30), Add(), Name('linestr', Load(), lineno=1307, col_offset=36), lineno=1307, col_offset=30), lineno=1307, col_offset=20)], [], lineno=1306, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1308, col_offset=16), 'stdout', Load(), lineno=1308, col_offset=16), 'write', Load(), lineno=1308, col_offset=16), [BinOp(Str('%4s    %s', lineno=1308, col_offset=33), Mod(), Tuple([Name('linestr', Load(), lineno=1308, col_offset=48), Name('line', Load(), lineno=1308, col_offset=57)], Load(), lineno=1308, col_offset=48), lineno=1308, col_offset=33)], [], None, None, lineno=1308, col_offset=16), lineno=1308, col_offset=16)], [], lineno=1303, col_offset=12)], lineno=1298, col_offset=13)], [], lineno=1263, col_offset=4)], [], lineno=1244, col_offset=0), Expr(Call(Name('PyList', Load(), lineno=1312, col_offset=0), [], [], None, None, lineno=1312, col_offset=0), lineno=1312, col_offset=0), FunctionDef('move_in_stack', arguments([Name('move_up', Param(), lineno=1314, col_offset=18)], None, None, []), [Expr(Str('Move up or down the stack (for the py-up/py-down command)', lineno=1315, col_offset=4), lineno=1315, col_offset=4), Assign([Name('frame', Store(), lineno=1316, col_offset=4)], Call(Attribute(Name('Frame', Load(), lineno=1316, col_offset=12), 'get_selected_python_frame', Load(), lineno=1316, col_offset=12), [], [], None, None, lineno=1316, col_offset=12), lineno=1316, col_offset=4), While(Name('frame', Load(), lineno=1317, col_offset=10), [If(Name('move_up', Load(), lineno=1318, col_offset=11), [Assign([Name('iter_frame', Store(), lineno=1319, col_offset=12)], Call(Attribute(Name('frame', Load(), lineno=1319, col_offset=25), 'older', Load(), lineno=1319, col_offset=25), [], [], None, None, lineno=1319, col_offset=25), lineno=1319, col_offset=12)], [Assign([Name('iter_frame', Store(), lineno=1321, col_offset=12)], Call(Attribute(Name('frame', Load(), lineno=1321, col_offset=25), 'newer', Load(), lineno=1321, col_offset=25), [], [], None, None, lineno=1321, col_offset=25), lineno=1321, col_offset=12)], lineno=1318, col_offset=8), If(UnaryOp(Not(), Name('iter_frame', Load(), lineno=1323, col_offset=15), lineno=1323, col_offset=11), [Break( lineno=1324, col_offset=12)], [], lineno=1323, col_offset=8), If(Call(Attribute(Name('iter_frame', Load(), lineno=1326, col_offset=11), 'is_evalframeex', Load(), lineno=1326, col_offset=11), [], [], None, None, lineno=1326, col_offset=11), [If(Call(Attribute(Name('iter_frame', Load(), lineno=1328, col_offset=15), 'select', Load(), lineno=1328, col_offset=15), [], [], None, None, lineno=1328, col_offset=15), [Expr(Call(Attribute(Name('iter_frame', Load(), lineno=1329, col_offset=16), 'print_summary', Load(), lineno=1329, col_offset=16), [], [], None, None, lineno=1329, col_offset=16), lineno=1329, col_offset=16)], [], lineno=1328, col_offset=12), Return(None, lineno=1330, col_offset=12)], [], lineno=1326, col_offset=8), Assign([Name('frame', Store(), lineno=1332, col_offset=8)], Name('iter_frame', Load(), lineno=1332, col_offset=16), lineno=1332, col_offset=8)], [], lineno=1317, col_offset=4), If(Name('move_up', Load(), lineno=1334, col_offset=7), [Print(None, [Str('Unable to find an older python frame', lineno=1335, col_offset=14)], True, lineno=1335, col_offset=8)], [Print(None, [Str('Unable to find a newer python frame', lineno=1337, col_offset=14)], True, lineno=1337, col_offset=8)], lineno=1334, col_offset=4)], [], lineno=1314, col_offset=0), ClassDef('PyUp', [Attribute(Name('gdb', Load(), lineno=1339, col_offset=11), 'Command', Load(), lineno=1339, col_offset=11)], [Expr(Str('Select and print the python stack frame that called this one (if any)', lineno=1340, col_offset=4), lineno=1340, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1341, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1342, col_offset=8), 'Command', Load(), lineno=1342, col_offset=8), '__init__', Load(), lineno=1342, col_offset=8), [Name('self', Load(), lineno=1342, col_offset=30), Str('py-up', lineno=1343, col_offset=30), Attribute(Name('gdb', Load(), lineno=1344, col_offset=30), 'COMMAND_STACK', Load(), lineno=1344, col_offset=30), Attribute(Name('gdb', Load(), lineno=1345, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1345, col_offset=30)], [], None, None, lineno=1342, col_offset=8), lineno=1342, col_offset=8)], [], lineno=1341, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1348, col_offset=15), Name('args', Param(), lineno=1348, col_offset=21), Name('from_tty', Param(), lineno=1348, col_offset=27)], None, None, []), [Expr(Call(Name('move_in_stack', Load(), lineno=1349, col_offset=8), [], [keyword('move_up', Name('True', Load(), lineno=1349, col_offset=30))], None, None, lineno=1349, col_offset=8), lineno=1349, col_offset=8)], [], lineno=1348, col_offset=4)], [], lineno=1339, col_offset=0), ClassDef('PyDown', [Attribute(Name('gdb', Load(), lineno=1351, col_offset=13), 'Command', Load(), lineno=1351, col_offset=13)], [Expr(Str('Select and print the python stack frame called by this one (if any)', lineno=1352, col_offset=4), lineno=1352, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1353, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1354, col_offset=8), 'Command', Load(), lineno=1354, col_offset=8), '__init__', Load(), lineno=1354, col_offset=8), [Name('self', Load(), lineno=1354, col_offset=30), Str('py-down', lineno=1355, col_offset=30), Attribute(Name('gdb', Load(), lineno=1356, col_offset=30), 'COMMAND_STACK', Load(), lineno=1356, col_offset=30), Attribute(Name('gdb', Load(), lineno=1357, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1357, col_offset=30)], [], None, None, lineno=1354, col_offset=8), lineno=1354, col_offset=8)], [], lineno=1353, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1360, col_offset=15), Name('args', Param(), lineno=1360, col_offset=21), Name('from_tty', Param(), lineno=1360, col_offset=27)], None, None, []), [Expr(Call(Name('move_in_stack', Load(), lineno=1361, col_offset=8), [], [keyword('move_up', Name('False', Load(), lineno=1361, col_offset=30))], None, None, lineno=1361, col_offset=8), lineno=1361, col_offset=8)], [], lineno=1360, col_offset=4)], [], lineno=1351, col_offset=0), If(Call(Name('hasattr', Load(), lineno=1364, col_offset=3), [Attribute(Name('gdb', Load(), lineno=1364, col_offset=11), 'Frame', Load(), lineno=1364, col_offset=11), Str('select', lineno=1364, col_offset=22)], [], None, None, lineno=1364, col_offset=3), [Expr(Call(Name('PyUp', Load(), lineno=1365, col_offset=4), [], [], None, None, lineno=1365, col_offset=4), lineno=1365, col_offset=4), Expr(Call(Name('PyDown', Load(), lineno=1366, col_offset=4), [], [], None, None, lineno=1366, col_offset=4), lineno=1366, col_offset=4)], [], lineno=1364, col_offset=0), ClassDef('PyBacktrace', [Attribute(Name('gdb', Load(), lineno=1368, col_offset=18), 'Command', Load(), lineno=1368, col_offset=18)], [Expr(Str('Display the current python frame and all the frames within its call stack (if any)', lineno=1369, col_offset=4), lineno=1369, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1370, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1371, col_offset=8), 'Command', Load(), lineno=1371, col_offset=8), '__init__', Load(), lineno=1371, col_offset=8), [Name('self', Load(), lineno=1371, col_offset=30), Str('py-bt', lineno=1372, col_offset=30), Attribute(Name('gdb', Load(), lineno=1373, col_offset=30), 'COMMAND_STACK', Load(), lineno=1373, col_offset=30), Attribute(Name('gdb', Load(), lineno=1374, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1374, col_offset=30)], [], None, None, lineno=1371, col_offset=8), lineno=1371, col_offset=8)], [], lineno=1370, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1377, col_offset=15), Name('args', Param(), lineno=1377, col_offset=21), Name('from_tty', Param(), lineno=1377, col_offset=27)], None, None, []), [Assign([Name('frame', Store(), lineno=1378, col_offset=8)], Call(Attribute(Name('Frame', Load(), lineno=1378, col_offset=16), 'get_selected_python_frame', Load(), lineno=1378, col_offset=16), [], [], None, None, lineno=1378, col_offset=16), lineno=1378, col_offset=8), While(Name('frame', Load(), lineno=1379, col_offset=14), [If(Call(Attribute(Name('frame', Load(), lineno=1380, col_offset=15), 'is_evalframeex', Load(), lineno=1380, col_offset=15), [], [], None, None, lineno=1380, col_offset=15), [Expr(Call(Attribute(Name('frame', Load(), lineno=1381, col_offset=16), 'print_summary', Load(), lineno=1381, col_offset=16), [], [], None, None, lineno=1381, col_offset=16), lineno=1381, col_offset=16)], [], lineno=1380, col_offset=12), Assign([Name('frame', Store(), lineno=1382, col_offset=12)], Call(Attribute(Name('frame', Load(), lineno=1382, col_offset=20), 'older', Load(), lineno=1382, col_offset=20), [], [], None, None, lineno=1382, col_offset=20), lineno=1382, col_offset=12)], [], lineno=1379, col_offset=8)], [], lineno=1377, col_offset=4)], [], lineno=1368, col_offset=0), Expr(Call(Name('PyBacktrace', Load(), lineno=1384, col_offset=0), [], [], None, None, lineno=1384, col_offset=0), lineno=1384, col_offset=0), ClassDef('PyPrint', [Attribute(Name('gdb', Load(), lineno=1386, col_offset=14), 'Command', Load(), lineno=1386, col_offset=14)], [Expr(Str('Look up the given python variable name, and print it', lineno=1387, col_offset=4), lineno=1387, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1388, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1389, col_offset=8), 'Command', Load(), lineno=1389, col_offset=8), '__init__', Load(), lineno=1389, col_offset=8), [Name('self', Load(), lineno=1389, col_offset=30), Str('py-print', lineno=1390, col_offset=30), Attribute(Name('gdb', Load(), lineno=1391, col_offset=30), 'COMMAND_DATA', Load(), lineno=1391, col_offset=30), Attribute(Name('gdb', Load(), lineno=1392, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1392, col_offset=30)], [], None, None, lineno=1389, col_offset=8), lineno=1389, col_offset=8)], [], lineno=1388, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1395, col_offset=15), Name('args', Param(), lineno=1395, col_offset=21), Name('from_tty', Param(), lineno=1395, col_offset=27)], None, None, []), [Assign([Name('name', Store(), lineno=1396, col_offset=8)], Call(Name('str', Load(), lineno=1396, col_offset=15), [Name('args', Load(), lineno=1396, col_offset=19)], [], None, None, lineno=1396, col_offset=15), lineno=1396, col_offset=8), Assign([Name('frame', Store(), lineno=1398, col_offset=8)], Call(Attribute(Name('Frame', Load(), lineno=1398, col_offset=16), 'get_selected_python_frame', Load(), lineno=1398, col_offset=16), [], [], None, None, lineno=1398, col_offset=16), lineno=1398, col_offset=8), If(UnaryOp(Not(), Name('frame', Load(), lineno=1399, col_offset=15), lineno=1399, col_offset=11), [Print(None, [Str('Unable to locate python frame', lineno=1400, col_offset=18)], True, lineno=1400, col_offset=12), Return(None, lineno=1401, col_offset=12)], [], lineno=1399, col_offset=8), Assign([Name('pyop_frame', Store(), lineno=1403, col_offset=8)], Call(Attribute(Name('frame', Load(), lineno=1403, col_offset=21), 'get_pyop', Load(), lineno=1403, col_offset=21), [], [], None, None, lineno=1403, col_offset=21), lineno=1403, col_offset=8), If(UnaryOp(Not(), Name('pyop_frame', Load(), lineno=1404, col_offset=15), lineno=1404, col_offset=11), [Print(None, [Str('Unable to read information on python frame', lineno=1405, col_offset=18)], True, lineno=1405, col_offset=12), Return(None, lineno=1406, col_offset=12)], [], lineno=1404, col_offset=8), Assign([Tuple([Name('pyop_var', Store(), lineno=1408, col_offset=8), Name('scope', Store(), lineno=1408, col_offset=18)], Store(), lineno=1408, col_offset=8)], Call(Attribute(Name('pyop_frame', Load(), lineno=1408, col_offset=26), 'get_var_by_name', Load(), lineno=1408, col_offset=26), [Name('name', Load(), lineno=1408, col_offset=53)], [], None, None, lineno=1408, col_offset=26), lineno=1408, col_offset=8), If(Name('pyop_var', Load(), lineno=1410, col_offset=11), [Print(None, [BinOp(Str('%s %r = %s', lineno=1411, col_offset=19), Mod(), Tuple([Name('scope', Load(), lineno=1412, col_offset=22), Name('name', Load(), lineno=1413, col_offset=22), Call(Attribute(Name('pyop_var', Load(), lineno=1414, col_offset=22), 'get_truncated_repr', Load(), lineno=1414, col_offset=22), [Name('MAX_OUTPUT_LEN', Load(), lineno=1414, col_offset=50)], [], None, None, lineno=1414, col_offset=22)], Load(), lineno=1412, col_offset=22), lineno=1411, col_offset=19)], True, lineno=1411, col_offset=12)], [Print(None, [BinOp(Str('%r not found', lineno=1416, col_offset=18), Mod(), Name('name', Load(), lineno=1416, col_offset=35), lineno=1416, col_offset=18)], True, lineno=1416, col_offset=12)], lineno=1410, col_offset=8)], [], lineno=1395, col_offset=4)], [], lineno=1386, col_offset=0), Expr(Call(Name('PyPrint', Load(), lineno=1418, col_offset=0), [], [], None, None, lineno=1418, col_offset=0), lineno=1418, col_offset=0), ClassDef('PyLocals', [Attribute(Name('gdb', Load(), lineno=1420, col_offset=15), 'Command', Load(), lineno=1420, col_offset=15)], [Expr(Str('Look up the given python variable name, and print it', lineno=1421, col_offset=4), lineno=1421, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1422, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('gdb', Load(), lineno=1423, col_offset=8), 'Command', Load(), lineno=1423, col_offset=8), '__init__', Load(), lineno=1423, col_offset=8), [Name('self', Load(), lineno=1423, col_offset=30), Str('py-locals', lineno=1424, col_offset=30), Attribute(Name('gdb', Load(), lineno=1425, col_offset=30), 'COMMAND_DATA', Load(), lineno=1425, col_offset=30), Attribute(Name('gdb', Load(), lineno=1426, col_offset=30), 'COMPLETE_NONE', Load(), lineno=1426, col_offset=30)], [], None, None, lineno=1423, col_offset=8), lineno=1423, col_offset=8)], [], lineno=1422, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=1429, col_offset=15), Name('args', Param(), lineno=1429, col_offset=21), Name('from_tty', Param(), lineno=1429, col_offset=27)], None, None, []), [Assign([Name('name', Store(), lineno=1430, col_offset=8)], Call(Name('str', Load(), lineno=1430, col_offset=15), [Name('args', Load(), lineno=1430, col_offset=19)], [], None, None, lineno=1430, col_offset=15), lineno=1430, col_offset=8), Assign([Name('frame', Store(), lineno=1432, col_offset=8)], Call(Attribute(Name('Frame', Load(), lineno=1432, col_offset=16), 'get_selected_python_frame', Load(), lineno=1432, col_offset=16), [], [], None, None, lineno=1432, col_offset=16), lineno=1432, col_offset=8), If(UnaryOp(Not(), Name('frame', Load(), lineno=1433, col_offset=15), lineno=1433, col_offset=11), [Print(None, [Str('Unable to locate python frame', lineno=1434, col_offset=18)], True, lineno=1434, col_offset=12), Return(None, lineno=1435, col_offset=12)], [], lineno=1433, col_offset=8), Assign([Name('pyop_frame', Store(), lineno=1437, col_offset=8)], Call(Attribute(Name('frame', Load(), lineno=1437, col_offset=21), 'get_pyop', Load(), lineno=1437, col_offset=21), [], [], None, None, lineno=1437, col_offset=21), lineno=1437, col_offset=8), If(UnaryOp(Not(), Name('pyop_frame', Load(), lineno=1438, col_offset=15), lineno=1438, col_offset=11), [Print(None, [Str('Unable to read information on python frame', lineno=1439, col_offset=18)], True, lineno=1439, col_offset=12), Return(None, lineno=1440, col_offset=12)], [], lineno=1438, col_offset=8), For(Tuple([Name('pyop_name', Store(), lineno=1442, col_offset=12), Name('pyop_value', Store(), lineno=1442, col_offset=23)], Store(), lineno=1442, col_offset=12), Call(Attribute(Name('pyop_frame', Load(), lineno=1442, col_offset=37), 'iter_locals', Load(), lineno=1442, col_offset=37), [], [], None, None, lineno=1442, col_offset=37), [Print(None, [BinOp(Str('%s = %s', lineno=1443, col_offset=19), Mod(), Tuple([Call(Attribute(Name('pyop_name', Load(), lineno=1444, col_offset=22), 'proxyval', Load(), lineno=1444, col_offset=22), [Call(Name('set', Load(), lineno=1444, col_offset=41), [], [], None, None, lineno=1444, col_offset=41)], [], None, None, lineno=1444, col_offset=22), Call(Attribute(Name('pyop_value', Load(), lineno=1445, col_offset=22), 'get_truncated_repr', Load(), lineno=1445, col_offset=22), [Name('MAX_OUTPUT_LEN', Load(), lineno=1445, col_offset=52)], [], None, None, lineno=1445, col_offset=22)], Load(), lineno=1444, col_offset=22), lineno=1443, col_offset=19)], True, lineno=1443, col_offset=12)], [], lineno=1442, col_offset=8)], [], lineno=1429, col_offset=4)], [], lineno=1420, col_offset=0), Expr(Call(Name('PyLocals', Load(), lineno=1447, col_offset=0), [], [], None, None, lineno=1447, col_offset=0), lineno=1447, col_offset=0)])
