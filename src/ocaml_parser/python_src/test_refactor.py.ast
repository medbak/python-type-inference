Module([Expr(Str('\nUnit tests for refactor.py.\n', lineno=3, col_offset=-1), lineno=3, col_offset=-1), ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=5, col_offset=0), Import([alias('sys', None)], lineno=7, col_offset=0), Import([alias('os', None)], lineno=8, col_offset=0), Import([alias('codecs', None)], lineno=9, col_offset=0), Import([alias('operator', None)], lineno=10, col_offset=0), Import([alias('StringIO', None)], lineno=11, col_offset=0), Import([alias('tempfile', None)], lineno=12, col_offset=0), Import([alias('shutil', None)], lineno=13, col_offset=0), Import([alias('unittest', None)], lineno=14, col_offset=0), Import([alias('warnings', None)], lineno=15, col_offset=0), ImportFrom('lib2to3', [alias('refactor', None), alias('pygram', None), alias('fixer_base', None)], 0, lineno=17, col_offset=0), ImportFrom('lib2to3.pgen2', [alias('token', None)], 0, lineno=18, col_offset=0), ImportFrom(None, [alias('support', None)], 1, lineno=20, col_offset=0), Assign([Name('TEST_DATA_DIR', Store(), lineno=23, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=23, col_offset=16), 'path', Load(), lineno=23, col_offset=16), 'join', Load(), lineno=23, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=23, col_offset=29), 'path', Load(), lineno=23, col_offset=29), 'dirname', Load(), lineno=23, col_offset=29), [Name('__file__', Load(), lineno=23, col_offset=45)], [], None, None, lineno=23, col_offset=29), Str('data', lineno=23, col_offset=56)], [], None, None, lineno=23, col_offset=16), lineno=23, col_offset=0), Assign([Name('FIXER_DIR', Store(), lineno=24, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=24, col_offset=12), 'path', Load(), lineno=24, col_offset=12), 'join', Load(), lineno=24, col_offset=12), [Name('TEST_DATA_DIR', Load(), lineno=24, col_offset=25), Str('fixers', lineno=24, col_offset=40)], [], None, None, lineno=24, col_offset=12), lineno=24, col_offset=0), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=26, col_offset=0), 'path', Load(), lineno=26, col_offset=0), 'append', Load(), lineno=26, col_offset=0), [Name('FIXER_DIR', Load(), lineno=26, col_offset=16)], [], None, None, lineno=26, col_offset=0), lineno=26, col_offset=0), TryFinally([Assign([Name('_DEFAULT_FIXERS', Store(), lineno=28, col_offset=4)], Call(Attribute(Name('refactor', Load(), lineno=28, col_offset=22), 'get_fixers_from_package', Load(), lineno=28, col_offset=22), [Str('myfixes', lineno=28, col_offset=55)], [], None, None, lineno=28, col_offset=22), lineno=28, col_offset=4)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=30, col_offset=4), 'path', Load(), lineno=30, col_offset=4), 'pop', Load(), lineno=30, col_offset=4), [], [], None, None, lineno=30, col_offset=4), lineno=30, col_offset=4)], lineno=27, col_offset=0), Assign([Name('_2TO3_FIXERS', Store(), lineno=32, col_offset=0)], Call(Attribute(Name('refactor', Load(), lineno=32, col_offset=15), 'get_fixers_from_package', Load(), lineno=32, col_offset=15), [Str('lib2to3.fixes', lineno=32, col_offset=48)], [], None, None, lineno=32, col_offset=15), lineno=32, col_offset=0), ClassDef('TestRefactoringTool', [Attribute(Name('unittest', Load(), lineno=34, col_offset=26), 'TestCase', Load(), lineno=34, col_offset=26)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=36, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=37, col_offset=8), 'path', Load(), lineno=37, col_offset=8), 'append', Load(), lineno=37, col_offset=8), [Name('FIXER_DIR', Load(), lineno=37, col_offset=24)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8)], [], lineno=36, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=39, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=40, col_offset=8), 'path', Load(), lineno=40, col_offset=8), 'pop', Load(), lineno=40, col_offset=8), [], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('check_instances', arguments([Name('self', Param(), lineno=42, col_offset=24), Name('instances', Param(), lineno=42, col_offset=30), Name('classes', Param(), lineno=42, col_offset=41)], None, None, []), [For(Tuple([Name('inst', Store(), lineno=43, col_offset=12), Name('cls', Store(), lineno=43, col_offset=18)], Store(), lineno=43, col_offset=12), Call(Name('zip', Load(), lineno=43, col_offset=25), [Name('instances', Load(), lineno=43, col_offset=29), Name('classes', Load(), lineno=43, col_offset=40)], [], None, None, lineno=43, col_offset=25), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=44, col_offset=19), [Name('inst', Load(), lineno=44, col_offset=30), Name('cls', Load(), lineno=44, col_offset=36)], [], None, None, lineno=44, col_offset=19), lineno=44, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=45, col_offset=16), 'fail', Load(), lineno=45, col_offset=16), [BinOp(Str('%s are not instances of %s', lineno=45, col_offset=26), Mod(), Name('instances', Load(), lineno=45, col_offset=57), lineno=45, col_offset=26), Name('classes', Load(), lineno=45, col_offset=68)], [], None, None, lineno=45, col_offset=16), lineno=45, col_offset=16)], [], lineno=44, col_offset=12)], [], lineno=43, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('rt', arguments([Name('self', Param(), lineno=47, col_offset=11), Name('options', Param(), lineno=47, col_offset=17), Name('fixers', Param(), lineno=47, col_offset=31), Name('explicit', Param(), lineno=47, col_offset=55)], None, None, [Name('None', Load(), lineno=47, col_offset=25), Name('_DEFAULT_FIXERS', Load(), lineno=47, col_offset=38), Name('None', Load(), lineno=47, col_offset=64)]), [Return(Call(Attribute(Name('refactor', Load(), lineno=48, col_offset=15), 'RefactoringTool', Load(), lineno=48, col_offset=15), [Name('fixers', Load(), lineno=48, col_offset=40), Name('options', Load(), lineno=48, col_offset=48), Name('explicit', Load(), lineno=48, col_offset=57)], [], None, None, lineno=48, col_offset=15), lineno=48, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('test_print_function_option', arguments([Name('self', Param(), lineno=50, col_offset=35)], None, None, []), [Assign([Name('rt', Store(), lineno=51, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=51, col_offset=13), 'rt', Load(), lineno=51, col_offset=13), [Dict([Str('print_function', lineno=51, col_offset=22)], [Name('True', Load(), lineno=51, col_offset=41)], lineno=51, col_offset=21)], [], None, None, lineno=51, col_offset=13), lineno=51, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=8), 'assertTrue', Load(), lineno=52, col_offset=8), [Compare(Attribute(Name('rt', Load(), lineno=52, col_offset=24), 'grammar', Load(), lineno=52, col_offset=24), [Is()], [Attribute(Name('pygram', Load(), lineno=52, col_offset=38), 'python_grammar_no_print_statement', Load(), lineno=52, col_offset=38)], lineno=52, col_offset=24)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'assertTrue', Load(), lineno=53, col_offset=8), [Compare(Attribute(Attribute(Name('rt', Load(), lineno=53, col_offset=24), 'driver', Load(), lineno=53, col_offset=24), 'grammar', Load(), lineno=53, col_offset=24), [Is()], [Attribute(Name('pygram', Load(), lineno=54, col_offset=24), 'python_grammar_no_print_statement', Load(), lineno=54, col_offset=24)], lineno=53, col_offset=24)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('test_fixer_loading_helpers', arguments([Name('self', Param(), lineno=56, col_offset=35)], None, None, []), [Assign([Name('contents', Store(), lineno=57, col_offset=8)], List([Str('explicit', lineno=57, col_offset=20), Str('first', lineno=57, col_offset=32), Str('last', lineno=57, col_offset=41), Str('parrot', lineno=57, col_offset=49), Str('preorder', lineno=57, col_offset=59)], Load(), lineno=57, col_offset=19), lineno=57, col_offset=8), Assign([Name('non_prefixed', Store(), lineno=58, col_offset=8)], Call(Attribute(Name('refactor', Load(), lineno=58, col_offset=23), 'get_all_fix_names', Load(), lineno=58, col_offset=23), [Str('myfixes', lineno=58, col_offset=50)], [], None, None, lineno=58, col_offset=23), lineno=58, col_offset=8), Assign([Name('prefixed', Store(), lineno=59, col_offset=8)], Call(Attribute(Name('refactor', Load(), lineno=59, col_offset=19), 'get_all_fix_names', Load(), lineno=59, col_offset=19), [Str('myfixes', lineno=59, col_offset=46), Name('False', Load(), lineno=59, col_offset=57)], [], None, None, lineno=59, col_offset=19), lineno=59, col_offset=8), Assign([Name('full_names', Store(), lineno=60, col_offset=8)], Call(Attribute(Name('refactor', Load(), lineno=60, col_offset=21), 'get_fixers_from_package', Load(), lineno=60, col_offset=21), [Str('myfixes', lineno=60, col_offset=54)], [], None, None, lineno=60, col_offset=21), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertEqual', Load(), lineno=61, col_offset=8), [Name('prefixed', Load(), lineno=61, col_offset=25), ListComp(BinOp(Str('fix_', lineno=61, col_offset=36), Add(), Name('name', Load(), lineno=61, col_offset=45), lineno=61, col_offset=36), [comprehension(Name('name', Store(), lineno=61, col_offset=54), Name('contents', Load(), lineno=61, col_offset=62), [])], lineno=61, col_offset=36)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [Name('non_prefixed', Load(), lineno=62, col_offset=25), Name('contents', Load(), lineno=62, col_offset=39)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertEqual', Load(), lineno=63, col_offset=8), [Name('full_names', Load(), lineno=63, col_offset=25), ListComp(BinOp(Str('myfixes.fix_', lineno=64, col_offset=26), Add(), Name('name', Load(), lineno=64, col_offset=43), lineno=64, col_offset=26), [comprehension(Name('name', Store(), lineno=64, col_offset=52), Name('contents', Load(), lineno=64, col_offset=60), [])], lineno=64, col_offset=26)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=56, col_offset=4), FunctionDef('test_detect_future_features', arguments([Name('self', Param(), lineno=66, col_offset=36)], None, None, []), [Assign([Name('run', Store(), lineno=67, col_offset=8)], Attribute(Name('refactor', Load(), lineno=67, col_offset=14), '_detect_future_features', Load(), lineno=67, col_offset=14), lineno=67, col_offset=8), Assign([Name('fs', Store(), lineno=68, col_offset=8)], Name('frozenset', Load(), lineno=68, col_offset=13), lineno=68, col_offset=8), Assign([Name('empty', Store(), lineno=69, col_offset=8)], Call(Name('fs', Load(), lineno=69, col_offset=16), [], [], None, None, lineno=69, col_offset=16), lineno=69, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'assertEqual', Load(), lineno=70, col_offset=8), [Call(Name('run', Load(), lineno=70, col_offset=25), [Str('', lineno=70, col_offset=29)], [], None, None, lineno=70, col_offset=25), Name('empty', Load(), lineno=70, col_offset=34)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'assertEqual', Load(), lineno=71, col_offset=8), [Call(Name('run', Load(), lineno=71, col_offset=25), [Str('from __future__ import print_function', lineno=71, col_offset=29)], [], None, None, lineno=71, col_offset=25), Call(Name('fs', Load(), lineno=72, col_offset=25), [Tuple([Str('print_function', lineno=72, col_offset=29)], Load(), lineno=72, col_offset=29)], [], None, None, lineno=72, col_offset=25)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=8), 'assertEqual', Load(), lineno=73, col_offset=8), [Call(Name('run', Load(), lineno=73, col_offset=25), [Str('from __future__ import generators', lineno=73, col_offset=29)], [], None, None, lineno=73, col_offset=25), Call(Name('fs', Load(), lineno=74, col_offset=25), [Tuple([Str('generators', lineno=74, col_offset=29)], Load(), lineno=74, col_offset=29)], [], None, None, lineno=74, col_offset=25)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), 'assertEqual', Load(), lineno=75, col_offset=8), [Call(Name('run', Load(), lineno=75, col_offset=25), [Str('from __future__ import generators, feature', lineno=75, col_offset=29)], [], None, None, lineno=75, col_offset=25), Call(Name('fs', Load(), lineno=76, col_offset=25), [Tuple([Str('generators', lineno=76, col_offset=29), Str('feature', lineno=76, col_offset=43)], Load(), lineno=76, col_offset=29)], [], None, None, lineno=76, col_offset=25)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Assign([Name('inp', Store(), lineno=77, col_offset=8)], Str('from __future__ import generators, print_function', lineno=77, col_offset=14), lineno=77, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=8), 'assertEqual', Load(), lineno=78, col_offset=8), [Call(Name('run', Load(), lineno=78, col_offset=25), [Name('inp', Load(), lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=25), Call(Name('fs', Load(), lineno=78, col_offset=35), [Tuple([Str('generators', lineno=78, col_offset=39), Str('print_function', lineno=78, col_offset=53)], Load(), lineno=78, col_offset=39)], [], None, None, lineno=78, col_offset=35)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8), Assign([Name('inp', Store(), lineno=79, col_offset=8)], Str('from __future__ import print_function, generators', lineno=79, col_offset=13), lineno=79, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=80, col_offset=8), 'assertEqual', Load(), lineno=80, col_offset=8), [Call(Name('run', Load(), lineno=80, col_offset=25), [Name('inp', Load(), lineno=80, col_offset=29)], [], None, None, lineno=80, col_offset=25), Call(Name('fs', Load(), lineno=80, col_offset=35), [Tuple([Str('print_function', lineno=80, col_offset=39), Str('generators', lineno=80, col_offset=57)], Load(), lineno=80, col_offset=39)], [], None, None, lineno=80, col_offset=35)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8), Assign([Name('inp', Store(), lineno=81, col_offset=8)], Str('from __future__ import (print_function,)', lineno=81, col_offset=14), lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=8), 'assertEqual', Load(), lineno=82, col_offset=8), [Call(Name('run', Load(), lineno=82, col_offset=25), [Name('inp', Load(), lineno=82, col_offset=29)], [], None, None, lineno=82, col_offset=25), Call(Name('fs', Load(), lineno=82, col_offset=35), [Tuple([Str('print_function', lineno=82, col_offset=39)], Load(), lineno=82, col_offset=39)], [], None, None, lineno=82, col_offset=35)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Assign([Name('inp', Store(), lineno=83, col_offset=8)], Str('from __future__ import (generators, print_function)', lineno=83, col_offset=14), lineno=83, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=8), 'assertEqual', Load(), lineno=84, col_offset=8), [Call(Name('run', Load(), lineno=84, col_offset=25), [Name('inp', Load(), lineno=84, col_offset=29)], [], None, None, lineno=84, col_offset=25), Call(Name('fs', Load(), lineno=84, col_offset=35), [Tuple([Str('generators', lineno=84, col_offset=39), Str('print_function', lineno=84, col_offset=53)], Load(), lineno=84, col_offset=39)], [], None, None, lineno=84, col_offset=35)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8), Assign([Name('inp', Store(), lineno=85, col_offset=8)], Str('from __future__ import (generators, nested_scopes)', lineno=85, col_offset=14), lineno=85, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=86, col_offset=8), 'assertEqual', Load(), lineno=86, col_offset=8), [Call(Name('run', Load(), lineno=86, col_offset=25), [Name('inp', Load(), lineno=86, col_offset=29)], [], None, None, lineno=86, col_offset=25), Call(Name('fs', Load(), lineno=86, col_offset=35), [Tuple([Str('generators', lineno=86, col_offset=39), Str('nested_scopes', lineno=86, col_offset=53)], Load(), lineno=86, col_offset=39)], [], None, None, lineno=86, col_offset=35)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8), Assign([Name('inp', Store(), lineno=87, col_offset=8)], Str('from __future__ import generators\nfrom __future__ import print_function', lineno=88, col_offset=-1), lineno=87, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=8), 'assertEqual', Load(), lineno=89, col_offset=8), [Call(Name('run', Load(), lineno=89, col_offset=25), [Name('inp', Load(), lineno=89, col_offset=29)], [], None, None, lineno=89, col_offset=25), Call(Name('fs', Load(), lineno=89, col_offset=35), [Tuple([Str('generators', lineno=89, col_offset=39), Str('print_function', lineno=89, col_offset=53)], Load(), lineno=89, col_offset=39)], [], None, None, lineno=89, col_offset=35)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=8), Assign([Name('invalid', Store(), lineno=90, col_offset=8)], Tuple([Str('from', lineno=90, col_offset=19), Str('from 4', lineno=91, col_offset=19), Str('from x', lineno=92, col_offset=19), Str('from x 5', lineno=93, col_offset=19), Str('from x im', lineno=94, col_offset=19), Str('from x import', lineno=95, col_offset=19), Str('from x import 4', lineno=96, col_offset=19)], Load(), lineno=90, col_offset=19), lineno=90, col_offset=8), For(Name('inp', Store(), lineno=98, col_offset=12), Name('invalid', Load(), lineno=98, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=12), 'assertEqual', Load(), lineno=99, col_offset=12), [Call(Name('run', Load(), lineno=99, col_offset=29), [Name('inp', Load(), lineno=99, col_offset=33)], [], None, None, lineno=99, col_offset=29), Name('empty', Load(), lineno=99, col_offset=39)], [], None, None, lineno=99, col_offset=12), lineno=99, col_offset=12)], [], lineno=98, col_offset=8), Assign([Name('inp', Store(), lineno=100, col_offset=8)], Str("'docstring'\nfrom __future__ import print_function", lineno=100, col_offset=14), lineno=100, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=8), 'assertEqual', Load(), lineno=101, col_offset=8), [Call(Name('run', Load(), lineno=101, col_offset=25), [Name('inp', Load(), lineno=101, col_offset=29)], [], None, None, lineno=101, col_offset=25), Call(Name('fs', Load(), lineno=101, col_offset=35), [Tuple([Str('print_function', lineno=101, col_offset=39)], Load(), lineno=101, col_offset=39)], [], None, None, lineno=101, col_offset=35)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8), Assign([Name('inp', Store(), lineno=102, col_offset=8)], Str("'docstring'\n'somng'\nfrom __future__ import print_function", lineno=102, col_offset=14), lineno=102, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=8), 'assertEqual', Load(), lineno=103, col_offset=8), [Call(Name('run', Load(), lineno=103, col_offset=25), [Name('inp', Load(), lineno=103, col_offset=29)], [], None, None, lineno=103, col_offset=25), Name('empty', Load(), lineno=103, col_offset=35)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8), Assign([Name('inp', Store(), lineno=104, col_offset=8)], Str('# comment\nfrom __future__ import print_function', lineno=104, col_offset=14), lineno=104, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=105, col_offset=8), 'assertEqual', Load(), lineno=105, col_offset=8), [Call(Name('run', Load(), lineno=105, col_offset=25), [Name('inp', Load(), lineno=105, col_offset=29)], [], None, None, lineno=105, col_offset=25), Call(Name('fs', Load(), lineno=105, col_offset=35), [Tuple([Str('print_function', lineno=105, col_offset=39)], Load(), lineno=105, col_offset=39)], [], None, None, lineno=105, col_offset=35)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=8), Assign([Name('inp', Store(), lineno=106, col_offset=8)], Str("# comment\n'doc'\nfrom __future__ import print_function", lineno=106, col_offset=14), lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=107, col_offset=8), 'assertEqual', Load(), lineno=107, col_offset=8), [Call(Name('run', Load(), lineno=107, col_offset=25), [Name('inp', Load(), lineno=107, col_offset=29)], [], None, None, lineno=107, col_offset=25), Call(Name('fs', Load(), lineno=107, col_offset=35), [Tuple([Str('print_function', lineno=107, col_offset=39)], Load(), lineno=107, col_offset=39)], [], None, None, lineno=107, col_offset=35)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=8), Assign([Name('inp', Store(), lineno=108, col_offset=8)], Str('class x: pass\nfrom __future__ import print_function', lineno=108, col_offset=14), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'assertEqual', Load(), lineno=109, col_offset=8), [Call(Name('run', Load(), lineno=109, col_offset=25), [Name('inp', Load(), lineno=109, col_offset=29)], [], None, None, lineno=109, col_offset=25), Name('empty', Load(), lineno=109, col_offset=35)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('test_get_headnode_dict', arguments([Name('self', Param(), lineno=111, col_offset=31)], None, None, []), [ClassDef('NoneFix', [Attribute(Name('fixer_base', Load(), lineno=112, col_offset=22), 'BaseFix', Load(), lineno=112, col_offset=22)], [Pass( lineno=113, col_offset=12)], [], lineno=112, col_offset=8), ClassDef('FileInputFix', [Attribute(Name('fixer_base', Load(), lineno=115, col_offset=27), 'BaseFix', Load(), lineno=115, col_offset=27)], [Assign([Name('PATTERN', Store(), lineno=116, col_offset=12)], Str('file_input< any * >', lineno=116, col_offset=22), lineno=116, col_offset=12)], [], lineno=115, col_offset=8), ClassDef('SimpleFix', [Attribute(Name('fixer_base', Load(), lineno=118, col_offset=24), 'BaseFix', Load(), lineno=118, col_offset=24)], [Assign([Name('PATTERN', Store(), lineno=119, col_offset=12)], Str("'name'", lineno=119, col_offset=22), lineno=119, col_offset=12)], [], lineno=118, col_offset=8), Assign([Name('no_head', Store(), lineno=121, col_offset=8)], Call(Name('NoneFix', Load(), lineno=121, col_offset=18), [Dict([], [], lineno=121, col_offset=26), List([], Load(), lineno=121, col_offset=30)], [], None, None, lineno=121, col_offset=18), lineno=121, col_offset=8), Assign([Name('with_head', Store(), lineno=122, col_offset=8)], Call(Name('FileInputFix', Load(), lineno=122, col_offset=20), [Dict([], [], lineno=122, col_offset=33), List([], Load(), lineno=122, col_offset=37)], [], None, None, lineno=122, col_offset=20), lineno=122, col_offset=8), Assign([Name('simple', Store(), lineno=123, col_offset=8)], Call(Name('SimpleFix', Load(), lineno=123, col_offset=17), [Dict([], [], lineno=123, col_offset=27), List([], Load(), lineno=123, col_offset=31)], [], None, None, lineno=123, col_offset=17), lineno=123, col_offset=8), Assign([Name('d', Store(), lineno=124, col_offset=8)], Call(Attribute(Name('refactor', Load(), lineno=124, col_offset=12), '_get_headnode_dict', Load(), lineno=124, col_offset=12), [List([Name('no_head', Load(), lineno=124, col_offset=41), Name('with_head', Load(), lineno=124, col_offset=50), Name('simple', Load(), lineno=124, col_offset=61)], Load(), lineno=124, col_offset=40)], [], None, None, lineno=124, col_offset=12), lineno=124, col_offset=8), Assign([Name('top_fixes', Store(), lineno=125, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=125, col_offset=20), 'pop', Load(), lineno=125, col_offset=20), [Attribute(Attribute(Name('pygram', Load(), lineno=125, col_offset=26), 'python_symbols', Load(), lineno=125, col_offset=26), 'file_input', Load(), lineno=125, col_offset=26)], [], None, None, lineno=125, col_offset=20), lineno=125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=126, col_offset=8), 'assertEqual', Load(), lineno=126, col_offset=8), [Name('top_fixes', Load(), lineno=126, col_offset=25), List([Name('with_head', Load(), lineno=126, col_offset=37), Name('no_head', Load(), lineno=126, col_offset=48)], Load(), lineno=126, col_offset=36)], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=8), Assign([Name('name_fixes', Store(), lineno=127, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=127, col_offset=21), 'pop', Load(), lineno=127, col_offset=21), [Attribute(Name('token', Load(), lineno=127, col_offset=27), 'NAME', Load(), lineno=127, col_offset=27)], [], None, None, lineno=127, col_offset=21), lineno=127, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=8), 'assertEqual', Load(), lineno=128, col_offset=8), [Name('name_fixes', Load(), lineno=128, col_offset=25), List([Name('simple', Load(), lineno=128, col_offset=38), Name('no_head', Load(), lineno=128, col_offset=46)], Load(), lineno=128, col_offset=37)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8), For(Name('fixes', Store(), lineno=129, col_offset=12), Call(Attribute(Name('d', Load(), lineno=129, col_offset=21), 'itervalues', Load(), lineno=129, col_offset=21), [], [], None, None, lineno=129, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=130, col_offset=12), 'assertEqual', Load(), lineno=130, col_offset=12), [Name('fixes', Load(), lineno=130, col_offset=29), List([Name('no_head', Load(), lineno=130, col_offset=37)], Load(), lineno=130, col_offset=36)], [], None, None, lineno=130, col_offset=12), lineno=130, col_offset=12)], [], lineno=129, col_offset=8)], [], lineno=111, col_offset=4), FunctionDef('test_fixer_loading', arguments([Name('self', Param(), lineno=132, col_offset=27)], None, None, []), [ImportFrom('myfixes.fix_first', [alias('FixFirst', None)], 0, lineno=133, col_offset=8), ImportFrom('myfixes.fix_last', [alias('FixLast', None)], 0, lineno=134, col_offset=8), ImportFrom('myfixes.fix_parrot', [alias('FixParrot', None)], 0, lineno=135, col_offset=8), ImportFrom('myfixes.fix_preorder', [alias('FixPreorder', None)], 0, lineno=136, col_offset=8), Assign([Name('rt', Store(), lineno=138, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=138, col_offset=13), 'rt', Load(), lineno=138, col_offset=13), [], [], None, None, lineno=138, col_offset=13), lineno=138, col_offset=8), Assign([Tuple([Name('pre', Store(), lineno=139, col_offset=8), Name('post', Store(), lineno=139, col_offset=13)], Store(), lineno=139, col_offset=8)], Call(Attribute(Name('rt', Load(), lineno=139, col_offset=20), 'get_fixers', Load(), lineno=139, col_offset=20), [], [], None, None, lineno=139, col_offset=20), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'check_instances', Load(), lineno=141, col_offset=8), [Name('pre', Load(), lineno=141, col_offset=29), List([Name('FixPreorder', Load(), lineno=141, col_offset=35)], Load(), lineno=141, col_offset=34)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=8), 'check_instances', Load(), lineno=142, col_offset=8), [Name('post', Load(), lineno=142, col_offset=29), List([Name('FixFirst', Load(), lineno=142, col_offset=36), Name('FixParrot', Load(), lineno=142, col_offset=46), Name('FixLast', Load(), lineno=142, col_offset=57)], Load(), lineno=142, col_offset=35)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('test_naughty_fixers', arguments([Name('self', Param(), lineno=144, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=145, col_offset=8), 'assertRaises', Load(), lineno=145, col_offset=8), [Name('ImportError', Load(), lineno=145, col_offset=26), Attribute(Name('self', Load(), lineno=145, col_offset=39), 'rt', Load(), lineno=145, col_offset=39)], [keyword('fixers', List([Str('not_here', lineno=145, col_offset=56)], Load(), lineno=145, col_offset=55))], None, None, lineno=145, col_offset=8), lineno=145, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=146, col_offset=8), 'assertRaises', Load(), lineno=146, col_offset=8), [Attribute(Name('refactor', Load(), lineno=146, col_offset=26), 'FixerError', Load(), lineno=146, col_offset=26), Attribute(Name('self', Load(), lineno=146, col_offset=47), 'rt', Load(), lineno=146, col_offset=47)], [keyword('fixers', List([Str('no_fixer_cls', lineno=146, col_offset=64)], Load(), lineno=146, col_offset=63))], None, None, lineno=146, col_offset=8), lineno=146, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=8), 'assertRaises', Load(), lineno=147, col_offset=8), [Attribute(Name('refactor', Load(), lineno=147, col_offset=26), 'FixerError', Load(), lineno=147, col_offset=26), Attribute(Name('self', Load(), lineno=147, col_offset=47), 'rt', Load(), lineno=147, col_offset=47)], [keyword('fixers', List([Str('bad_order', lineno=147, col_offset=64)], Load(), lineno=147, col_offset=63))], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8)], [], lineno=144, col_offset=4), FunctionDef('test_refactor_string', arguments([Name('self', Param(), lineno=149, col_offset=29)], None, None, []), [Assign([Name('rt', Store(), lineno=150, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=150, col_offset=13), 'rt', Load(), lineno=150, col_offset=13), [], [], None, None, lineno=150, col_offset=13), lineno=150, col_offset=8), Assign([Name('input', Store(), lineno=151, col_offset=8)], Str('def parrot(): pass\n\n', lineno=151, col_offset=16), lineno=151, col_offset=8), Assign([Name('tree', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('rt', Load(), lineno=152, col_offset=15), 'refactor_string', Load(), lineno=152, col_offset=15), [Name('input', Load(), lineno=152, col_offset=34), Str('<test>', lineno=152, col_offset=41)], [], None, None, lineno=152, col_offset=15), lineno=152, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=153, col_offset=8), 'assertNotEqual', Load(), lineno=153, col_offset=8), [Call(Name('str', Load(), lineno=153, col_offset=28), [Name('tree', Load(), lineno=153, col_offset=32)], [], None, None, lineno=153, col_offset=28), Name('input', Load(), lineno=153, col_offset=39)], [], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8), Assign([Name('input', Store(), lineno=155, col_offset=8)], Str('def f(): pass\n\n', lineno=155, col_offset=16), lineno=155, col_offset=8), Assign([Name('tree', Store(), lineno=156, col_offset=8)], Call(Attribute(Name('rt', Load(), lineno=156, col_offset=15), 'refactor_string', Load(), lineno=156, col_offset=15), [Name('input', Load(), lineno=156, col_offset=34), Str('<test>', lineno=156, col_offset=41)], [], None, None, lineno=156, col_offset=15), lineno=156, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=8), 'assertEqual', Load(), lineno=157, col_offset=8), [Call(Name('str', Load(), lineno=157, col_offset=25), [Name('tree', Load(), lineno=157, col_offset=29)], [], None, None, lineno=157, col_offset=25), Name('input', Load(), lineno=157, col_offset=36)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=149, col_offset=4), FunctionDef('test_refactor_stdin', arguments([Name('self', Param(), lineno=159, col_offset=28)], None, None, []), [ClassDef('MyRT', [Attribute(Name('refactor', Load(), lineno=161, col_offset=19), 'RefactoringTool', Load(), lineno=161, col_offset=19)], [FunctionDef('print_output', arguments([Name('self', Param(), lineno=163, col_offset=29), Name('old_text', Param(), lineno=163, col_offset=35), Name('new_text', Param(), lineno=163, col_offset=45), Name('filename', Param(), lineno=163, col_offset=55), Name('equal', Param(), lineno=163, col_offset=65)], None, None, []), [Expr(Call(Attribute(Name('results', Load(), lineno=164, col_offset=16), 'extend', Load(), lineno=164, col_offset=16), [List([Name('old_text', Load(), lineno=164, col_offset=32), Name('new_text', Load(), lineno=164, col_offset=42), Name('filename', Load(), lineno=164, col_offset=52), Name('equal', Load(), lineno=164, col_offset=62)], Load(), lineno=164, col_offset=31)], [], None, None, lineno=164, col_offset=16), lineno=164, col_offset=16)], [], lineno=163, col_offset=12)], [], lineno=161, col_offset=8), Assign([Name('results', Store(), lineno=166, col_offset=8)], List([], Load(), lineno=166, col_offset=18), lineno=166, col_offset=8), Assign([Name('rt', Store(), lineno=167, col_offset=8)], Call(Name('MyRT', Load(), lineno=167, col_offset=13), [Name('_DEFAULT_FIXERS', Load(), lineno=167, col_offset=18)], [], None, None, lineno=167, col_offset=13), lineno=167, col_offset=8), Assign([Name('save', Store(), lineno=168, col_offset=8)], Attribute(Name('sys', Load(), lineno=168, col_offset=15), 'stdin', Load(), lineno=168, col_offset=15), lineno=168, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=169, col_offset=8), 'stdin', Store(), lineno=169, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=169, col_offset=20), 'StringIO', Load(), lineno=169, col_offset=20), [Str('def parrot(): pass\n\n', lineno=169, col_offset=38)], [], None, None, lineno=169, col_offset=20), lineno=169, col_offset=8), TryFinally([Expr(Call(Attribute(Name('rt', Load(), lineno=171, col_offset=12), 'refactor_stdin', Load(), lineno=171, col_offset=12), [], [], None, None, lineno=171, col_offset=12), lineno=171, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=173, col_offset=12), 'stdin', Store(), lineno=173, col_offset=12)], Name('save', Load(), lineno=173, col_offset=24), lineno=173, col_offset=12)], lineno=170, col_offset=8), Assign([Name('expected', Store(), lineno=174, col_offset=8)], List([Str('def parrot(): pass\n\n', lineno=174, col_offset=20), Str('def cheese(): pass\n\n', lineno=175, col_offset=20), Str('<stdin>', lineno=176, col_offset=20), Name('False', Load(), lineno=176, col_offset=31)], Load(), lineno=174, col_offset=19), lineno=174, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=8), 'assertEqual', Load(), lineno=177, col_offset=8), [Name('results', Load(), lineno=177, col_offset=25), Name('expected', Load(), lineno=177, col_offset=34)], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8)], [], lineno=159, col_offset=4), FunctionDef('check_file_refactoring', arguments([Name('self', Param(), lineno=179, col_offset=31), Name('test_file', Param(), lineno=179, col_offset=37), Name('fixers', Param(), lineno=179, col_offset=48)], None, None, [Name('_2TO3_FIXERS', Load(), lineno=179, col_offset=55)]), [FunctionDef('read_file', arguments([], None, None, []), [With(Call(Name('open', Load(), lineno=181, col_offset=17), [Name('test_file', Load(), lineno=181, col_offset=22), Str('rb', lineno=181, col_offset=33)], [], None, None, lineno=181, col_offset=17), Name('fp', Store(), lineno=181, col_offset=42), [Return(Call(Attribute(Name('fp', Load(), lineno=182, col_offset=23), 'read', Load(), lineno=182, col_offset=23), [], [], None, None, lineno=182, col_offset=23), lineno=182, col_offset=16)], lineno=181, col_offset=17)], [], lineno=180, col_offset=8), Assign([Name('old_contents', Store(), lineno=183, col_offset=8)], Call(Name('read_file', Load(), lineno=183, col_offset=23), [], [], None, None, lineno=183, col_offset=23), lineno=183, col_offset=8), Assign([Name('rt', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=184, col_offset=13), 'rt', Load(), lineno=184, col_offset=13), [], [keyword('fixers', Name('fixers', Load(), lineno=184, col_offset=28))], None, None, lineno=184, col_offset=13), lineno=184, col_offset=8), Expr(Call(Attribute(Name('rt', Load(), lineno=186, col_offset=8), 'refactor_file', Load(), lineno=186, col_offset=8), [Name('test_file', Load(), lineno=186, col_offset=25)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=187, col_offset=8), 'assertEqual', Load(), lineno=187, col_offset=8), [Name('old_contents', Load(), lineno=187, col_offset=25), Call(Name('read_file', Load(), lineno=187, col_offset=39), [], [], None, None, lineno=187, col_offset=39)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8), TryFinally([Expr(Call(Attribute(Name('rt', Load(), lineno=190, col_offset=12), 'refactor_file', Load(), lineno=190, col_offset=12), [Name('test_file', Load(), lineno=190, col_offset=29), Name('True', Load(), lineno=190, col_offset=40)], [], None, None, lineno=190, col_offset=12), lineno=190, col_offset=12), Assign([Name('new_contents', Store(), lineno=191, col_offset=12)], Call(Name('read_file', Load(), lineno=191, col_offset=27), [], [], None, None, lineno=191, col_offset=27), lineno=191, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=192, col_offset=12), 'assertNotEqual', Load(), lineno=192, col_offset=12), [Name('old_contents', Load(), lineno=192, col_offset=32), Name('new_contents', Load(), lineno=192, col_offset=46)], [], None, None, lineno=192, col_offset=12), lineno=192, col_offset=12)], [With(Call(Name('open', Load(), lineno=194, col_offset=17), [Name('test_file', Load(), lineno=194, col_offset=22), Str('wb', lineno=194, col_offset=33)], [], None, None, lineno=194, col_offset=17), Name('fp', Store(), lineno=194, col_offset=42), [Expr(Call(Attribute(Name('fp', Load(), lineno=195, col_offset=16), 'write', Load(), lineno=195, col_offset=16), [Name('old_contents', Load(), lineno=195, col_offset=25)], [], None, None, lineno=195, col_offset=16), lineno=195, col_offset=16)], lineno=194, col_offset=17)], lineno=189, col_offset=8), Return(Name('new_contents', Load(), lineno=196, col_offset=15), lineno=196, col_offset=8)], [], lineno=179, col_offset=4), FunctionDef('test_refactor_file', arguments([Name('self', Param(), lineno=198, col_offset=27)], None, None, []), [Assign([Name('test_file', Store(), lineno=199, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=199, col_offset=20), 'path', Load(), lineno=199, col_offset=20), 'join', Load(), lineno=199, col_offset=20), [Name('FIXER_DIR', Load(), lineno=199, col_offset=33), Str('parrot_example.py', lineno=199, col_offset=44)], [], None, None, lineno=199, col_offset=20), lineno=199, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=200, col_offset=8), 'check_file_refactoring', Load(), lineno=200, col_offset=8), [Name('test_file', Load(), lineno=200, col_offset=36), Name('_DEFAULT_FIXERS', Load(), lineno=200, col_offset=47)], [], None, None, lineno=200, col_offset=8), lineno=200, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('test_refactor_dir', arguments([Name('self', Param(), lineno=202, col_offset=26)], None, None, []), [FunctionDef('check', arguments([Name('structure', Param(), lineno=203, col_offset=18), Name('expected', Param(), lineno=203, col_offset=29)], None, None, []), [FunctionDef('mock_refactor_file', arguments([Name('self', Param(), lineno=204, col_offset=35), Name('f', Param(), lineno=204, col_offset=41)], 'args', None, []), [Expr(Call(Attribute(Name('got', Load(), lineno=205, col_offset=16), 'append', Load(), lineno=205, col_offset=16), [Name('f', Load(), lineno=205, col_offset=27)], [], None, None, lineno=205, col_offset=16), lineno=205, col_offset=16)], [], lineno=204, col_offset=12), Assign([Name('save_func', Store(), lineno=206, col_offset=12)], Attribute(Attribute(Name('refactor', Load(), lineno=206, col_offset=24), 'RefactoringTool', Load(), lineno=206, col_offset=24), 'refactor_file', Load(), lineno=206, col_offset=24), lineno=206, col_offset=12), Assign([Attribute(Attribute(Name('refactor', Load(), lineno=207, col_offset=12), 'RefactoringTool', Load(), lineno=207, col_offset=12), 'refactor_file', Store(), lineno=207, col_offset=12)], Name('mock_refactor_file', Load(), lineno=207, col_offset=53), lineno=207, col_offset=12), Assign([Name('rt', Store(), lineno=208, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=208, col_offset=17), 'rt', Load(), lineno=208, col_offset=17), [], [], None, None, lineno=208, col_offset=17), lineno=208, col_offset=12), Assign([Name('got', Store(), lineno=209, col_offset=12)], List([], Load(), lineno=209, col_offset=18), lineno=209, col_offset=12), Assign([Name('dir', Store(), lineno=210, col_offset=12)], Call(Attribute(Name('tempfile', Load(), lineno=210, col_offset=18), 'mkdtemp', Load(), lineno=210, col_offset=18), [], [keyword('prefix', Str('2to3-test_refactor', lineno=210, col_offset=42))], None, None, lineno=210, col_offset=18), lineno=210, col_offset=12), TryFinally([Expr(Call(Attribute(Name('os', Load(), lineno=212, col_offset=16), 'mkdir', Load(), lineno=212, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=212, col_offset=25), 'path', Load(), lineno=212, col_offset=25), 'join', Load(), lineno=212, col_offset=25), [Name('dir', Load(), lineno=212, col_offset=38), Str('a_dir', lineno=212, col_offset=43)], [], None, None, lineno=212, col_offset=25)], [], None, None, lineno=212, col_offset=16), lineno=212, col_offset=16), For(Name('fn', Store(), lineno=213, col_offset=20), Name('structure', Load(), lineno=213, col_offset=26), [Expr(Call(Attribute(Call(Name('open', Load(), lineno=214, col_offset=20), [Call(Attribute(Attribute(Name('os', Load(), lineno=214, col_offset=25), 'path', Load(), lineno=214, col_offset=25), 'join', Load(), lineno=214, col_offset=25), [Name('dir', Load(), lineno=214, col_offset=38), Name('fn', Load(), lineno=214, col_offset=43)], [], None, None, lineno=214, col_offset=25), Str('wb', lineno=214, col_offset=48)], [], None, None, lineno=214, col_offset=20), 'close', Load(), lineno=214, col_offset=20), [], [], None, None, lineno=214, col_offset=20), lineno=214, col_offset=20)], [], lineno=213, col_offset=16), Expr(Call(Attribute(Name('rt', Load(), lineno=215, col_offset=16), 'refactor_dir', Load(), lineno=215, col_offset=16), [Name('dir', Load(), lineno=215, col_offset=32)], [], None, None, lineno=215, col_offset=16), lineno=215, col_offset=16)], [Assign([Attribute(Attribute(Name('refactor', Load(), lineno=217, col_offset=16), 'RefactoringTool', Load(), lineno=217, col_offset=16), 'refactor_file', Store(), lineno=217, col_offset=16)], Name('save_func', Load(), lineno=217, col_offset=57), lineno=217, col_offset=16), Expr(Call(Attribute(Name('shutil', Load(), lineno=218, col_offset=16), 'rmtree', Load(), lineno=218, col_offset=16), [Name('dir', Load(), lineno=218, col_offset=30)], [], None, None, lineno=218, col_offset=16), lineno=218, col_offset=16)], lineno=211, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=12), 'assertEqual', Load(), lineno=219, col_offset=12), [Name('got', Load(), lineno=219, col_offset=29), ListComp(Call(Attribute(Attribute(Name('os', Load(), lineno=220, col_offset=30), 'path', Load(), lineno=220, col_offset=30), 'join', Load(), lineno=220, col_offset=30), [Name('dir', Load(), lineno=220, col_offset=43), Name('path', Load(), lineno=220, col_offset=48)], [], None, None, lineno=220, col_offset=30), [comprehension(Name('path', Store(), lineno=220, col_offset=58), Name('expected', Load(), lineno=220, col_offset=66), [])], lineno=220, col_offset=30)], [], None, None, lineno=219, col_offset=12), lineno=219, col_offset=12)], [], lineno=203, col_offset=8), Expr(Call(Name('check', Load(), lineno=221, col_offset=8), [List([], Load(), lineno=221, col_offset=14), List([], Load(), lineno=221, col_offset=18)], [], None, None, lineno=221, col_offset=8), lineno=221, col_offset=8), Assign([Name('tree', Store(), lineno=222, col_offset=8)], List([Str('nothing', lineno=222, col_offset=16), Str('hi.py', lineno=223, col_offset=16), Str('.dumb', lineno=224, col_offset=16), Str('.after.py', lineno=225, col_offset=16), Str('sappy', lineno=226, col_offset=16)], Load(), lineno=222, col_offset=15), lineno=222, col_offset=8), Assign([Name('expected', Store(), lineno=227, col_offset=8)], List([Str('hi.py', lineno=227, col_offset=20)], Load(), lineno=227, col_offset=19), lineno=227, col_offset=8), Expr(Call(Name('check', Load(), lineno=228, col_offset=8), [Name('tree', Load(), lineno=228, col_offset=14), Name('expected', Load(), lineno=228, col_offset=20)], [], None, None, lineno=228, col_offset=8), lineno=228, col_offset=8), Assign([Name('tree', Store(), lineno=229, col_offset=8)], List([Str('hi.py', lineno=229, col_offset=16), Call(Attribute(Attribute(Name('os', Load(), lineno=230, col_offset=16), 'path', Load(), lineno=230, col_offset=16), 'join', Load(), lineno=230, col_offset=16), [Str('a_dir', lineno=230, col_offset=29), Str('stuff.py', lineno=230, col_offset=38)], [], None, None, lineno=230, col_offset=16)], Load(), lineno=229, col_offset=15), lineno=229, col_offset=8), Expr(Call(Name('check', Load(), lineno=231, col_offset=8), [Name('tree', Load(), lineno=231, col_offset=14), Name('tree', Load(), lineno=231, col_offset=20)], [], None, None, lineno=231, col_offset=8), lineno=231, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('test_file_encoding', arguments([Name('self', Param(), lineno=233, col_offset=27)], None, None, []), [Assign([Name('fn', Store(), lineno=234, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=234, col_offset=13), 'path', Load(), lineno=234, col_offset=13), 'join', Load(), lineno=234, col_offset=13), [Name('TEST_DATA_DIR', Load(), lineno=234, col_offset=26), Str('different_encoding.py', lineno=234, col_offset=41)], [], None, None, lineno=234, col_offset=13), lineno=234, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=235, col_offset=8), 'check_file_refactoring', Load(), lineno=235, col_offset=8), [Name('fn', Load(), lineno=235, col_offset=36)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8)], [], lineno=233, col_offset=4), FunctionDef('test_bom', arguments([Name('self', Param(), lineno=237, col_offset=17)], None, None, []), [Assign([Name('fn', Store(), lineno=238, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=238, col_offset=13), 'path', Load(), lineno=238, col_offset=13), 'join', Load(), lineno=238, col_offset=13), [Name('TEST_DATA_DIR', Load(), lineno=238, col_offset=26), Str('bom.py', lineno=238, col_offset=41)], [], None, None, lineno=238, col_offset=13), lineno=238, col_offset=8), Assign([Name('data', Store(), lineno=239, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=239, col_offset=15), 'check_file_refactoring', Load(), lineno=239, col_offset=15), [Name('fn', Load(), lineno=239, col_offset=43)], [], None, None, lineno=239, col_offset=15), lineno=239, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=240, col_offset=8), 'assertTrue', Load(), lineno=240, col_offset=8), [Call(Attribute(Name('data', Load(), lineno=240, col_offset=24), 'startswith', Load(), lineno=240, col_offset=24), [Attribute(Name('codecs', Load(), lineno=240, col_offset=40), 'BOM_UTF8', Load(), lineno=240, col_offset=40)], [], None, None, lineno=240, col_offset=24)], [], None, None, lineno=240, col_offset=8), lineno=240, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('test_crlf_newlines', arguments([Name('self', Param(), lineno=242, col_offset=27)], None, None, []), [Assign([Name('old_sep', Store(), lineno=243, col_offset=8)], Attribute(Name('os', Load(), lineno=243, col_offset=18), 'linesep', Load(), lineno=243, col_offset=18), lineno=243, col_offset=8), Assign([Attribute(Name('os', Load(), lineno=244, col_offset=8), 'linesep', Store(), lineno=244, col_offset=8)], Str('\r\n', lineno=244, col_offset=21), lineno=244, col_offset=8), TryFinally([Assign([Name('fn', Store(), lineno=246, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=246, col_offset=17), 'path', Load(), lineno=246, col_offset=17), 'join', Load(), lineno=246, col_offset=17), [Name('TEST_DATA_DIR', Load(), lineno=246, col_offset=30), Str('crlf.py', lineno=246, col_offset=45)], [], None, None, lineno=246, col_offset=17), lineno=246, col_offset=12), Assign([Name('fixes', Store(), lineno=247, col_offset=12)], Call(Attribute(Name('refactor', Load(), lineno=247, col_offset=20), 'get_fixers_from_package', Load(), lineno=247, col_offset=20), [Str('lib2to3.fixes', lineno=247, col_offset=53)], [], None, None, lineno=247, col_offset=20), lineno=247, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=248, col_offset=12), 'check_file_refactoring', Load(), lineno=248, col_offset=12), [Name('fn', Load(), lineno=248, col_offset=40), Name('fixes', Load(), lineno=248, col_offset=44)], [], None, None, lineno=248, col_offset=12), lineno=248, col_offset=12)], [Assign([Attribute(Name('os', Load(), lineno=250, col_offset=12), 'linesep', Store(), lineno=250, col_offset=12)], Name('old_sep', Load(), lineno=250, col_offset=25), lineno=250, col_offset=12)], lineno=245, col_offset=8)], [], lineno=242, col_offset=4), FunctionDef('test_refactor_docstring', arguments([Name('self', Param(), lineno=252, col_offset=32)], None, None, []), [Assign([Name('rt', Store(), lineno=253, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=253, col_offset=13), 'rt', Load(), lineno=253, col_offset=13), [], [], None, None, lineno=253, col_offset=13), lineno=253, col_offset=8), Assign([Name('doc', Store(), lineno=255, col_offset=8)], Str('\n>>> example()\n42\n', lineno=258, col_offset=-1), lineno=255, col_offset=8), Assign([Name('out', Store(), lineno=259, col_offset=8)], Call(Attribute(Name('rt', Load(), lineno=259, col_offset=14), 'refactor_docstring', Load(), lineno=259, col_offset=14), [Name('doc', Load(), lineno=259, col_offset=36), Str('<test>', lineno=259, col_offset=41)], [], None, None, lineno=259, col_offset=14), lineno=259, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=260, col_offset=8), 'assertEqual', Load(), lineno=260, col_offset=8), [Name('out', Load(), lineno=260, col_offset=25), Name('doc', Load(), lineno=260, col_offset=30)], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=8), Assign([Name('doc', Store(), lineno=262, col_offset=8)], Str('\n>>> def parrot():\n...      return 43\n', lineno=265, col_offset=-1), lineno=262, col_offset=8), Assign([Name('out', Store(), lineno=266, col_offset=8)], Call(Attribute(Name('rt', Load(), lineno=266, col_offset=14), 'refactor_docstring', Load(), lineno=266, col_offset=14), [Name('doc', Load(), lineno=266, col_offset=36), Str('<test>', lineno=266, col_offset=41)], [], None, None, lineno=266, col_offset=14), lineno=266, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=8), 'assertNotEqual', Load(), lineno=267, col_offset=8), [Name('out', Load(), lineno=267, col_offset=28), Name('doc', Load(), lineno=267, col_offset=33)], [], None, None, lineno=267, col_offset=8), lineno=267, col_offset=8)], [], lineno=252, col_offset=4), FunctionDef('test_explicit', arguments([Name('self', Param(), lineno=269, col_offset=22)], None, None, []), [ImportFrom('myfixes.fix_explicit', [alias('FixExplicit', None)], 0, lineno=270, col_offset=8), Assign([Name('rt', Store(), lineno=272, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=272, col_offset=13), 'rt', Load(), lineno=272, col_offset=13), [], [keyword('fixers', List([Str('myfixes.fix_explicit', lineno=272, col_offset=29)], Load(), lineno=272, col_offset=28))], None, None, lineno=272, col_offset=13), lineno=272, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=273, col_offset=8), 'assertEqual', Load(), lineno=273, col_offset=8), [Call(Name('len', Load(), lineno=273, col_offset=25), [Attribute(Name('rt', Load(), lineno=273, col_offset=29), 'post_order', Load(), lineno=273, col_offset=29)], [], None, None, lineno=273, col_offset=25), Num(0, lineno=273, col_offset=45)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=8), Assign([Name('rt', Store(), lineno=275, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=275, col_offset=13), 'rt', Load(), lineno=275, col_offset=13), [], [keyword('explicit', List([Str('myfixes.fix_explicit', lineno=275, col_offset=31)], Load(), lineno=275, col_offset=30))], None, None, lineno=275, col_offset=13), lineno=275, col_offset=8), For(Name('fix', Store(), lineno=276, col_offset=12), Attribute(Name('rt', Load(), lineno=276, col_offset=19), 'post_order', Load(), lineno=276, col_offset=19), [If(Call(Name('isinstance', Load(), lineno=277, col_offset=15), [Name('fix', Load(), lineno=277, col_offset=26), Name('FixExplicit', Load(), lineno=277, col_offset=31)], [], None, None, lineno=277, col_offset=15), [Break( lineno=278, col_offset=16)], [], lineno=277, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=12), 'fail', Load(), lineno=280, col_offset=12), [Str('explicit fixer not loaded', lineno=280, col_offset=22)], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12)], lineno=276, col_offset=8)], [], lineno=269, col_offset=4)], [], lineno=34, col_offset=0)])
