Module([Expr(Str('This test checks for correct fork() behavior.\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), Import([alias('imp', None)], lineno=4, col_offset=0), Import([alias('os', None)], lineno=5, col_offset=0), Import([alias('signal', None)], lineno=6, col_offset=0), Import([alias('sys', None)], lineno=7, col_offset=0), Import([alias('time', None)], lineno=8, col_offset=0), ImportFrom('test.fork_wait', [alias('ForkWait', None)], 0, lineno=10, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('reap_children', None), alias('get_attribute', None), alias('import_module', None)], 0, lineno=11, col_offset=0), Assign([Name('threading', Store(), lineno=12, col_offset=0)], Call(Name('import_module', Load(), lineno=12, col_offset=12), [Str('threading', lineno=12, col_offset=26)], [], None, None, lineno=12, col_offset=12), lineno=12, col_offset=0), Expr(Call(Name('get_attribute', Load(), lineno=15, col_offset=0), [Name('os', Load(), lineno=15, col_offset=14), Str('fork', lineno=15, col_offset=18)], [], None, None, lineno=15, col_offset=0), lineno=15, col_offset=0), ClassDef('ForkTest', [Name('ForkWait', Load(), lineno=18, col_offset=15)], [FunctionDef('wait_impl', arguments([Name('self', Param(), lineno=19, col_offset=18), Name('cpid', Param(), lineno=19, col_offset=24)], None, None, []), [For(Name('i', Store(), lineno=20, col_offset=12), Call(Name('range', Load(), lineno=20, col_offset=17), [Num(10, lineno=20, col_offset=23)], [], None, None, lineno=20, col_offset=17), [Assign([Tuple([Name('spid', Store(), lineno=23, col_offset=12), Name('status', Store(), lineno=23, col_offset=18)], Store(), lineno=23, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=23, col_offset=27), 'waitpid', Load(), lineno=23, col_offset=27), [Name('cpid', Load(), lineno=23, col_offset=38), Attribute(Name('os', Load(), lineno=23, col_offset=44), 'WNOHANG', Load(), lineno=23, col_offset=44)], [], None, None, lineno=23, col_offset=27), lineno=23, col_offset=12), If(Compare(Name('spid', Load(), lineno=24, col_offset=15), [Eq()], [Name('cpid', Load(), lineno=24, col_offset=23)], lineno=24, col_offset=15), [Break( lineno=25, col_offset=16)], [], lineno=24, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=26, col_offset=12), 'sleep', Load(), lineno=26, col_offset=12), [Num(1.0, lineno=26, col_offset=23)], [], None, None, lineno=26, col_offset=12), lineno=26, col_offset=12)], [], lineno=20, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=28, col_offset=8), 'assertEqual', Load(), lineno=28, col_offset=8), [Name('spid', Load(), lineno=28, col_offset=25), Name('cpid', Load(), lineno=28, col_offset=31)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=8), 'assertEqual', Load(), lineno=29, col_offset=8), [Name('status', Load(), lineno=29, col_offset=25), Num(0, lineno=29, col_offset=33), BinOp(Str('cause = %d, exit = %d', lineno=29, col_offset=36), Mod(), Tuple([BinOp(Name('status', Load(), lineno=29, col_offset=63), BitAnd(), Num(255, lineno=29, col_offset=70), lineno=29, col_offset=63), BinOp(Name('status', Load(), lineno=29, col_offset=76), RShift(), Num(8, lineno=29, col_offset=84), lineno=29, col_offset=76)], Load(), lineno=29, col_offset=63), lineno=29, col_offset=36)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8)], [], lineno=19, col_offset=4), FunctionDef('test_import_lock_fork', arguments([Name('self', Param(), lineno=31, col_offset=30)], None, None, []), [Assign([Name('import_started', Store(), lineno=32, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=32, col_offset=25), 'Event', Load(), lineno=32, col_offset=25), [], [], None, None, lineno=32, col_offset=25), lineno=32, col_offset=8), Assign([Name('fake_module_name', Store(), lineno=33, col_offset=8)], Str('fake test module', lineno=33, col_offset=27), lineno=33, col_offset=8), Assign([Name('partial_module', Store(), lineno=34, col_offset=8)], Str('partial', lineno=34, col_offset=25), lineno=34, col_offset=8), Assign([Name('complete_module', Store(), lineno=35, col_offset=8)], Str('complete', lineno=35, col_offset=26), lineno=35, col_offset=8), FunctionDef('importer', arguments([], None, None, []), [Expr(Call(Attribute(Name('imp', Load(), lineno=37, col_offset=12), 'acquire_lock', Load(), lineno=37, col_offset=12), [], [], None, None, lineno=37, col_offset=12), lineno=37, col_offset=12), Assign([Subscript(Attribute(Name('sys', Load(), lineno=38, col_offset=12), 'modules', Load(), lineno=38, col_offset=12), Index(Name('fake_module_name', Load(), lineno=38, col_offset=24)), Store(), lineno=38, col_offset=12)], Name('partial_module', Load(), lineno=38, col_offset=44), lineno=38, col_offset=12), Expr(Call(Attribute(Name('import_started', Load(), lineno=39, col_offset=12), 'set', Load(), lineno=39, col_offset=12), [], [], None, None, lineno=39, col_offset=12), lineno=39, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=40, col_offset=12), 'sleep', Load(), lineno=40, col_offset=12), [Num(0.01, lineno=40, col_offset=23)], [], None, None, lineno=40, col_offset=12), lineno=40, col_offset=12), Assign([Subscript(Attribute(Name('sys', Load(), lineno=41, col_offset=12), 'modules', Load(), lineno=41, col_offset=12), Index(Name('fake_module_name', Load(), lineno=41, col_offset=24)), Store(), lineno=41, col_offset=12)], Name('complete_module', Load(), lineno=41, col_offset=44), lineno=41, col_offset=12), Expr(Call(Attribute(Name('imp', Load(), lineno=42, col_offset=12), 'release_lock', Load(), lineno=42, col_offset=12), [], [], None, None, lineno=42, col_offset=12), lineno=42, col_offset=12)], [], lineno=36, col_offset=8), Assign([Name('t', Store(), lineno=43, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=43, col_offset=12), 'Thread', Load(), lineno=43, col_offset=12), [], [keyword('target', Name('importer', Load(), lineno=43, col_offset=36))], None, None, lineno=43, col_offset=12), lineno=43, col_offset=8), Expr(Call(Attribute(Name('t', Load(), lineno=44, col_offset=8), 'start', Load(), lineno=44, col_offset=8), [], [], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8), Expr(Call(Attribute(Name('import_started', Load(), lineno=45, col_offset=8), 'wait', Load(), lineno=45, col_offset=8), [], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Assign([Name('pid', Store(), lineno=46, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=46, col_offset=14), 'fork', Load(), lineno=46, col_offset=14), [], [], None, None, lineno=46, col_offset=14), lineno=46, col_offset=8), TryFinally([If(UnaryOp(Not(), Name('pid', Load(), lineno=48, col_offset=19), lineno=48, col_offset=15), [Assign([Name('m', Store(), lineno=49, col_offset=16)], Call(Name('__import__', Load(), lineno=49, col_offset=20), [Name('fake_module_name', Load(), lineno=49, col_offset=31)], [], None, None, lineno=49, col_offset=20), lineno=49, col_offset=16), If(Compare(Name('m', Load(), lineno=50, col_offset=19), [Eq()], [Name('complete_module', Load(), lineno=50, col_offset=24)], lineno=50, col_offset=19), [Expr(Call(Attribute(Name('os', Load(), lineno=51, col_offset=20), '_exit', Load(), lineno=51, col_offset=20), [Num(0, lineno=51, col_offset=29)], [], None, None, lineno=51, col_offset=20), lineno=51, col_offset=20)], [Expr(Call(Attribute(Name('os', Load(), lineno=53, col_offset=20), '_exit', Load(), lineno=53, col_offset=20), [Num(1, lineno=53, col_offset=29)], [], None, None, lineno=53, col_offset=20), lineno=53, col_offset=20)], lineno=50, col_offset=16)], [Expr(Call(Attribute(Name('t', Load(), lineno=55, col_offset=16), 'join', Load(), lineno=55, col_offset=16), [], [], None, None, lineno=55, col_offset=16), lineno=55, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=16), 'wait_impl', Load(), lineno=59, col_offset=16), [Name('pid', Load(), lineno=59, col_offset=31)], [], None, None, lineno=59, col_offset=16), lineno=59, col_offset=16)], lineno=48, col_offset=12)], [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=62, col_offset=16), 'kill', Load(), lineno=62, col_offset=16), [Name('pid', Load(), lineno=62, col_offset=24), Attribute(Name('signal', Load(), lineno=62, col_offset=29), 'SIGKILL', Load(), lineno=62, col_offset=29)], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=63, col_offset=19), None, [Pass( lineno=64, col_offset=16)], lineno=63, col_offset=12)], [], lineno=61, col_offset=12)], lineno=47, col_offset=8)], [], lineno=31, col_offset=4)], [], lineno=18, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=67, col_offset=4), [Name('ForkTest', Load(), lineno=67, col_offset=17)], [], None, None, lineno=67, col_offset=4), lineno=67, col_offset=4), Expr(Call(Name('reap_children', Load(), lineno=68, col_offset=4), [], [], None, None, lineno=68, col_offset=4), lineno=68, col_offset=4)], [], lineno=66, col_offset=0), If(Compare(Name('__name__', Load(), lineno=70, col_offset=3), [Eq()], [Str('__main__', lineno=70, col_offset=15)], lineno=70, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=71, col_offset=4), [], [], None, None, lineno=71, col_offset=4), lineno=71, col_offset=4)], [], lineno=70, col_offset=0)])
