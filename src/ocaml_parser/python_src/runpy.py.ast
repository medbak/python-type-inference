Module([Expr(Str('runpy.py - locating and running Python code using the module namespace\n\nProvides support for locating and running Python scripts using the Python\nmodule namespace instead of the native filesystem.\n\nThis allows Python code to play nicely with non-filesystem based PEP 302\nimporters when locating support scripts as well as when importing modules.\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('sys', None)], lineno=12, col_offset=0), Import([alias('imp', None)], lineno=13, col_offset=0), ImportFrom('pkgutil', [alias('read_code', None)], 0, lineno=14, col_offset=0), TryExcept([ImportFrom('imp', [alias('get_loader', None)], 0, lineno=16, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=17, col_offset=7), None, [ImportFrom('pkgutil', [alias('get_loader', None)], 0, lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), Assign([Name('__all__', Store(), lineno=20, col_offset=0)], List([Str('run_module', lineno=21, col_offset=4), Str('run_path', lineno=21, col_offset=18)], Load(), lineno=20, col_offset=10), lineno=20, col_offset=0), ClassDef('_TempModule', [Name('object', Load(), lineno=24, col_offset=18)], [Expr(Str('Temporarily replace a module in sys.modules with an empty namespace', lineno=25, col_offset=4), lineno=25, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=26, col_offset=17), Name('mod_name', Param(), lineno=26, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=27, col_offset=8), 'mod_name', Store(), lineno=27, col_offset=8)], Name('mod_name', Load(), lineno=27, col_offset=24), lineno=27, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=28, col_offset=8), 'module', Store(), lineno=28, col_offset=8)], Call(Attribute(Name('imp', Load(), lineno=28, col_offset=22), 'new_module', Load(), lineno=28, col_offset=22), [Name('mod_name', Load(), lineno=28, col_offset=37)], [], None, None, lineno=28, col_offset=22), lineno=28, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=29, col_offset=8), '_saved_module', Store(), lineno=29, col_offset=8)], List([], Load(), lineno=29, col_offset=29), lineno=29, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=31, col_offset=18)], None, None, []), [Assign([Name('mod_name', Store(), lineno=32, col_offset=8)], Attribute(Name('self', Load(), lineno=32, col_offset=19), 'mod_name', Load(), lineno=32, col_offset=19), lineno=32, col_offset=8), TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=34, col_offset=12), '_saved_module', Load(), lineno=34, col_offset=12), 'append', Load(), lineno=34, col_offset=12), [Subscript(Attribute(Name('sys', Load(), lineno=34, col_offset=38), 'modules', Load(), lineno=34, col_offset=38), Index(Name('mod_name', Load(), lineno=34, col_offset=50)), Load(), lineno=34, col_offset=38)], [], None, None, lineno=34, col_offset=12), lineno=34, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=35, col_offset=15), None, [Pass( lineno=36, col_offset=12)], lineno=35, col_offset=8)], [], lineno=33, col_offset=8), Assign([Subscript(Attribute(Name('sys', Load(), lineno=37, col_offset=8), 'modules', Load(), lineno=37, col_offset=8), Index(Name('mod_name', Load(), lineno=37, col_offset=20)), Store(), lineno=37, col_offset=8)], Attribute(Name('self', Load(), lineno=37, col_offset=32), 'module', Load(), lineno=37, col_offset=32), lineno=37, col_offset=8), Return(Name('self', Load(), lineno=38, col_offset=15), lineno=38, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=40, col_offset=17)], 'args', None, []), [If(Attribute(Name('self', Load(), lineno=41, col_offset=11), '_saved_module', Load(), lineno=41, col_offset=11), [Assign([Subscript(Attribute(Name('sys', Load(), lineno=42, col_offset=12), 'modules', Load(), lineno=42, col_offset=12), Index(Attribute(Name('self', Load(), lineno=42, col_offset=24), 'mod_name', Load(), lineno=42, col_offset=24)), Store(), lineno=42, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=42, col_offset=41), '_saved_module', Load(), lineno=42, col_offset=41), Index(Num(0, lineno=42, col_offset=60)), Load(), lineno=42, col_offset=41), lineno=42, col_offset=12)], [Delete([Subscript(Attribute(Name('sys', Load(), lineno=44, col_offset=16), 'modules', Load(), lineno=44, col_offset=16), Index(Attribute(Name('self', Load(), lineno=44, col_offset=28), 'mod_name', Load(), lineno=44, col_offset=28)), Del(), lineno=44, col_offset=16)], lineno=44, col_offset=12)], lineno=41, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=45, col_offset=8), '_saved_module', Store(), lineno=45, col_offset=8)], List([], Load(), lineno=45, col_offset=29), lineno=45, col_offset=8)], [], lineno=40, col_offset=4)], [], lineno=24, col_offset=0), ClassDef('_ModifiedArgv0', [Name('object', Load(), lineno=47, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=48, col_offset=17), Name('value', Param(), lineno=48, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=49, col_offset=8), 'value', Store(), lineno=49, col_offset=8)], Name('value', Load(), lineno=49, col_offset=21), lineno=49, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=50, col_offset=8), '_saved_value', Store(), lineno=50, col_offset=8), Attribute(Name('self', Load(), lineno=50, col_offset=28), '_sentinel', Store(), lineno=50, col_offset=28)], Call(Name('object', Load(), lineno=50, col_offset=45), [], [], None, None, lineno=50, col_offset=45), lineno=50, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=52, col_offset=18)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=53, col_offset=11), '_saved_value', Load(), lineno=53, col_offset=11), [IsNot()], [Attribute(Name('self', Load(), lineno=53, col_offset=36), '_sentinel', Load(), lineno=53, col_offset=36)], lineno=53, col_offset=11), [Raise(Call(Name('RuntimeError', Load(), lineno=54, col_offset=18), [Str('Already preserving saved value', lineno=54, col_offset=31)], [], None, None, lineno=54, col_offset=18), None, None, lineno=54, col_offset=12)], [], lineno=53, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), '_saved_value', Store(), lineno=55, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=55, col_offset=28), 'argv', Load(), lineno=55, col_offset=28), Index(Num(0, lineno=55, col_offset=37)), Load(), lineno=55, col_offset=28), lineno=55, col_offset=8), Assign([Subscript(Attribute(Name('sys', Load(), lineno=56, col_offset=8), 'argv', Load(), lineno=56, col_offset=8), Index(Num(0, lineno=56, col_offset=17)), Store(), lineno=56, col_offset=8)], Attribute(Name('self', Load(), lineno=56, col_offset=22), 'value', Load(), lineno=56, col_offset=22), lineno=56, col_offset=8)], [], lineno=52, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=58, col_offset=17)], 'args', None, []), [Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), 'value', Store(), lineno=59, col_offset=8)], Attribute(Name('self', Load(), lineno=59, col_offset=21), '_sentinel', Load(), lineno=59, col_offset=21), lineno=59, col_offset=8), Assign([Subscript(Attribute(Name('sys', Load(), lineno=60, col_offset=8), 'argv', Load(), lineno=60, col_offset=8), Index(Num(0, lineno=60, col_offset=17)), Store(), lineno=60, col_offset=8)], Attribute(Name('self', Load(), lineno=60, col_offset=22), '_saved_value', Load(), lineno=60, col_offset=22), lineno=60, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('_run_code', arguments([Name('code', Param(), lineno=62, col_offset=14), Name('run_globals', Param(), lineno=62, col_offset=20), Name('init_globals', Param(), lineno=62, col_offset=33), Name('mod_name', Param(), lineno=63, col_offset=14), Name('mod_fname', Param(), lineno=63, col_offset=29), Name('mod_loader', Param(), lineno=64, col_offset=14), Name('pkg_name', Param(), lineno=64, col_offset=31)], None, None, [Name('None', Load(), lineno=62, col_offset=46), Name('None', Load(), lineno=63, col_offset=23), Name('None', Load(), lineno=63, col_offset=39), Name('None', Load(), lineno=64, col_offset=25), Name('None', Load(), lineno=64, col_offset=40)]), [Expr(Str('Helper to run code in nominated namespace', lineno=65, col_offset=4), lineno=65, col_offset=4), If(Compare(Name('init_globals', Load(), lineno=66, col_offset=7), [IsNot()], [Name('None', Load(), lineno=66, col_offset=27)], lineno=66, col_offset=7), [Expr(Call(Attribute(Name('run_globals', Load(), lineno=67, col_offset=8), 'update', Load(), lineno=67, col_offset=8), [Name('init_globals', Load(), lineno=67, col_offset=27)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8)], [], lineno=66, col_offset=4), Expr(Call(Attribute(Name('run_globals', Load(), lineno=68, col_offset=4), 'update', Load(), lineno=68, col_offset=4), [], [keyword('__name__', Name('mod_name', Load(), lineno=68, col_offset=34)), keyword('__file__', Name('mod_fname', Load(), lineno=69, col_offset=34)), keyword('__loader__', Name('mod_loader', Load(), lineno=70, col_offset=36)), keyword('__package__', Name('pkg_name', Load(), lineno=71, col_offset=37))], None, None, lineno=68, col_offset=4), lineno=68, col_offset=4), Exec(Name('code', Load(), lineno=72, col_offset=9), Name('run_globals', Load(), lineno=72, col_offset=17), None, lineno=72, col_offset=4), Return(Name('run_globals', Load(), lineno=73, col_offset=11), lineno=73, col_offset=4)], [], lineno=62, col_offset=0), FunctionDef('_run_module_code', arguments([Name('code', Param(), lineno=75, col_offset=21), Name('init_globals', Param(), lineno=75, col_offset=27), Name('mod_name', Param(), lineno=76, col_offset=20), Name('mod_fname', Param(), lineno=76, col_offset=35), Name('mod_loader', Param(), lineno=77, col_offset=20), Name('pkg_name', Param(), lineno=77, col_offset=37)], None, None, [Name('None', Load(), lineno=75, col_offset=40), Name('None', Load(), lineno=76, col_offset=29), Name('None', Load(), lineno=76, col_offset=45), Name('None', Load(), lineno=77, col_offset=31), Name('None', Load(), lineno=77, col_offset=46)]), [Expr(Str('Helper to run code in new namespace with sys modified', lineno=78, col_offset=4), lineno=78, col_offset=4), With(Call(Name('_TempModule', Load(), lineno=79, col_offset=9), [Name('mod_name', Load(), lineno=79, col_offset=21)], [], None, None, lineno=79, col_offset=9), Name('temp_module', Store(), lineno=79, col_offset=34), [With(Call(Name('_ModifiedArgv0', Load(), lineno=79, col_offset=47), [Name('mod_fname', Load(), lineno=79, col_offset=62)], [], None, None, lineno=79, col_offset=47), None, [Assign([Name('mod_globals', Store(), lineno=80, col_offset=8)], Attribute(Attribute(Name('temp_module', Load(), lineno=80, col_offset=22), 'module', Load(), lineno=80, col_offset=22), '__dict__', Load(), lineno=80, col_offset=22), lineno=80, col_offset=8), Expr(Call(Name('_run_code', Load(), lineno=81, col_offset=8), [Name('code', Load(), lineno=81, col_offset=18), Name('mod_globals', Load(), lineno=81, col_offset=24), Name('init_globals', Load(), lineno=81, col_offset=37), Name('mod_name', Load(), lineno=82, col_offset=18), Name('mod_fname', Load(), lineno=82, col_offset=28), Name('mod_loader', Load(), lineno=82, col_offset=39), Name('pkg_name', Load(), lineno=82, col_offset=51)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8)], lineno=79, col_offset=47)], lineno=79, col_offset=9), Return(Call(Attribute(Name('mod_globals', Load(), lineno=85, col_offset=11), 'copy', Load(), lineno=85, col_offset=11), [], [], None, None, lineno=85, col_offset=11), lineno=85, col_offset=4)], [], lineno=75, col_offset=0), FunctionDef('_get_filename', arguments([Name('loader', Param(), lineno=92, col_offset=18), Name('mod_name', Param(), lineno=92, col_offset=26)], None, None, []), [For(Name('attr', Store(), lineno=93, col_offset=8), Tuple([Str('get_filename', lineno=93, col_offset=17), Str('_get_filename', lineno=93, col_offset=33)], Load(), lineno=93, col_offset=17), [Assign([Name('meth', Store(), lineno=94, col_offset=8)], Call(Name('getattr', Load(), lineno=94, col_offset=15), [Name('loader', Load(), lineno=94, col_offset=23), Name('attr', Load(), lineno=94, col_offset=31), Name('None', Load(), lineno=94, col_offset=37)], [], None, None, lineno=94, col_offset=15), lineno=94, col_offset=8), If(Compare(Name('meth', Load(), lineno=95, col_offset=11), [IsNot()], [Name('None', Load(), lineno=95, col_offset=23)], lineno=95, col_offset=11), [Return(Call(Name('meth', Load(), lineno=96, col_offset=19), [Name('mod_name', Load(), lineno=96, col_offset=24)], [], None, None, lineno=96, col_offset=19), lineno=96, col_offset=12)], [], lineno=95, col_offset=8)], [], lineno=93, col_offset=4), Return(Name('None', Load(), lineno=97, col_offset=11), lineno=97, col_offset=4)], [], lineno=92, col_offset=0), FunctionDef('_get_module_details', arguments([Name('mod_name', Param(), lineno=100, col_offset=24)], None, None, []), [Assign([Name('loader', Store(), lineno=101, col_offset=4)], Call(Name('get_loader', Load(), lineno=101, col_offset=13), [Name('mod_name', Load(), lineno=101, col_offset=24)], [], None, None, lineno=101, col_offset=13), lineno=101, col_offset=4), If(Compare(Name('loader', Load(), lineno=102, col_offset=7), [Is()], [Name('None', Load(), lineno=102, col_offset=17)], lineno=102, col_offset=7), [Raise(Call(Name('ImportError', Load(), lineno=103, col_offset=14), [BinOp(Str('No module named %s', lineno=103, col_offset=26), Mod(), Name('mod_name', Load(), lineno=103, col_offset=49), lineno=103, col_offset=26)], [], None, None, lineno=103, col_offset=14), None, None, lineno=103, col_offset=8)], [], lineno=102, col_offset=4), If(Call(Attribute(Name('loader', Load(), lineno=104, col_offset=7), 'is_package', Load(), lineno=104, col_offset=7), [Name('mod_name', Load(), lineno=104, col_offset=25)], [], None, None, lineno=104, col_offset=7), [If(BoolOp(Or(), [Compare(Name('mod_name', Load(), lineno=105, col_offset=11), [Eq()], [Str('__main__', lineno=105, col_offset=23)], lineno=105, col_offset=11), Call(Attribute(Name('mod_name', Load(), lineno=105, col_offset=37), 'endswith', Load(), lineno=105, col_offset=37), [Str('.__main__', lineno=105, col_offset=55)], [], None, None, lineno=105, col_offset=37)], lineno=105, col_offset=11), [Raise(Call(Name('ImportError', Load(), lineno=106, col_offset=18), [Str('Cannot use package as __main__ module', lineno=106, col_offset=30)], [], None, None, lineno=106, col_offset=18), None, None, lineno=106, col_offset=12)], [], lineno=105, col_offset=8), TryExcept([Assign([Name('pkg_main_name', Store(), lineno=108, col_offset=12)], BinOp(Name('mod_name', Load(), lineno=108, col_offset=28), Add(), Str('.__main__', lineno=108, col_offset=39), lineno=108, col_offset=28), lineno=108, col_offset=12), Return(Call(Name('_get_module_details', Load(), lineno=109, col_offset=19), [Name('pkg_main_name', Load(), lineno=109, col_offset=39)], [], None, None, lineno=109, col_offset=19), lineno=109, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=110, col_offset=15), Name('e', Store(), lineno=110, col_offset=28), [Raise(Call(Name('ImportError', Load(), lineno=111, col_offset=18), [BinOp(BinOp(Str('%s; %r is a package and cannot ', lineno=111, col_offset=31), Add(), Str('be directly executed', lineno=112, col_offset=31), lineno=111, col_offset=31), Mod(), Tuple([Name('e', Load(), lineno=112, col_offset=57), Name('mod_name', Load(), lineno=112, col_offset=60)], Load(), lineno=112, col_offset=57), lineno=111, col_offset=30)], [], None, None, lineno=111, col_offset=18), None, None, lineno=111, col_offset=12)], lineno=110, col_offset=8)], [], lineno=107, col_offset=8)], [], lineno=104, col_offset=4), Assign([Name('code', Store(), lineno=113, col_offset=4)], Call(Attribute(Name('loader', Load(), lineno=113, col_offset=11), 'get_code', Load(), lineno=113, col_offset=11), [Name('mod_name', Load(), lineno=113, col_offset=27)], [], None, None, lineno=113, col_offset=11), lineno=113, col_offset=4), If(Compare(Name('code', Load(), lineno=114, col_offset=7), [Is()], [Name('None', Load(), lineno=114, col_offset=15)], lineno=114, col_offset=7), [Raise(Call(Name('ImportError', Load(), lineno=115, col_offset=14), [BinOp(Str('No code object available for %s', lineno=115, col_offset=26), Mod(), Name('mod_name', Load(), lineno=115, col_offset=62), lineno=115, col_offset=26)], [], None, None, lineno=115, col_offset=14), None, None, lineno=115, col_offset=8)], [], lineno=114, col_offset=4), Assign([Name('filename', Store(), lineno=116, col_offset=4)], Call(Name('_get_filename', Load(), lineno=116, col_offset=15), [Name('loader', Load(), lineno=116, col_offset=29), Name('mod_name', Load(), lineno=116, col_offset=37)], [], None, None, lineno=116, col_offset=15), lineno=116, col_offset=4), Return(Tuple([Name('mod_name', Load(), lineno=117, col_offset=11), Name('loader', Load(), lineno=117, col_offset=21), Name('code', Load(), lineno=117, col_offset=29), Name('filename', Load(), lineno=117, col_offset=35)], Load(), lineno=117, col_offset=11), lineno=117, col_offset=4)], [], lineno=100, col_offset=0), FunctionDef('_get_main_module_details', arguments([], None, None, []), [Assign([Name('main_name', Store(), lineno=123, col_offset=4)], Str('__main__', lineno=123, col_offset=16), lineno=123, col_offset=4), TryExcept([Return(Call(Name('_get_module_details', Load(), lineno=125, col_offset=15), [Name('main_name', Load(), lineno=125, col_offset=35)], [], None, None, lineno=125, col_offset=15), lineno=125, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=126, col_offset=11), Name('exc', Store(), lineno=126, col_offset=26), [If(Compare(Name('main_name', Load(), lineno=127, col_offset=11), [In()], [Call(Name('str', Load(), lineno=127, col_offset=24), [Name('exc', Load(), lineno=127, col_offset=28)], [], None, None, lineno=127, col_offset=24)], lineno=127, col_offset=11), [Raise(Call(Name('ImportError', Load(), lineno=128, col_offset=18), [BinOp(Str("can't find %r module in %r", lineno=128, col_offset=30), Mod(), Tuple([Name('main_name', Load(), lineno=129, col_offset=31), Subscript(Attribute(Name('sys', Load(), lineno=129, col_offset=42), 'path', Load(), lineno=129, col_offset=42), Index(Num(0, lineno=129, col_offset=51)), Load(), lineno=129, col_offset=42)], Load(), lineno=129, col_offset=31), lineno=128, col_offset=30)], [], None, None, lineno=128, col_offset=18), None, None, lineno=128, col_offset=12)], [], lineno=127, col_offset=8), Raise(None, None, None, lineno=130, col_offset=8)], lineno=126, col_offset=4)], [], lineno=124, col_offset=4)], [], lineno=120, col_offset=0), FunctionDef('_run_module_as_main', arguments([Name('mod_name', Param(), lineno=136, col_offset=24), Name('alter_argv', Param(), lineno=136, col_offset=34)], None, None, [Name('True', Load(), lineno=136, col_offset=45)]), [Expr(Str('Runs the designated module in the __main__ namespace\n\n       Note that the executed module will have full access to the\n       __main__ namespace. If this is not desirable, the run_module()\n       function should be used to run the module code in a fresh namespace.\n\n       At the very least, these variables in __main__ will be overwritten:\n           __name__\n           __file__\n           __loader__\n           __package__\n    ', lineno=148, col_offset=-1), lineno=148, col_offset=-1), TryExcept([If(BoolOp(Or(), [Name('alter_argv', Load(), lineno=150, col_offset=11), Compare(Name('mod_name', Load(), lineno=150, col_offset=25), [NotEq()], [Str('__main__', lineno=150, col_offset=37)], lineno=150, col_offset=25)], lineno=150, col_offset=11), [Assign([Tuple([Name('mod_name', Store(), lineno=151, col_offset=12), Name('loader', Store(), lineno=151, col_offset=22), Name('code', Store(), lineno=151, col_offset=30), Name('fname', Store(), lineno=151, col_offset=36)], Store(), lineno=151, col_offset=12)], Call(Name('_get_module_details', Load(), lineno=151, col_offset=44), [Name('mod_name', Load(), lineno=151, col_offset=64)], [], None, None, lineno=151, col_offset=44), lineno=151, col_offset=12)], [Assign([Tuple([Name('mod_name', Store(), lineno=153, col_offset=12), Name('loader', Store(), lineno=153, col_offset=22), Name('code', Store(), lineno=153, col_offset=30), Name('fname', Store(), lineno=153, col_offset=36)], Store(), lineno=153, col_offset=12)], Call(Name('_get_main_module_details', Load(), lineno=153, col_offset=44), [], [], None, None, lineno=153, col_offset=44), lineno=153, col_offset=12)], lineno=150, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=154, col_offset=11), Name('exc', Store(), lineno=154, col_offset=26), [Assign([Name('msg', Store(), lineno=155, col_offset=8)], BinOp(Str('%s: %s', lineno=155, col_offset=14), Mod(), Tuple([Attribute(Name('sys', Load(), lineno=155, col_offset=26), 'executable', Load(), lineno=155, col_offset=26), Call(Name('str', Load(), lineno=155, col_offset=42), [Name('exc', Load(), lineno=155, col_offset=46)], [], None, None, lineno=155, col_offset=42)], Load(), lineno=155, col_offset=26), lineno=155, col_offset=14), lineno=155, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=156, col_offset=8), 'exit', Load(), lineno=156, col_offset=8), [Name('msg', Load(), lineno=156, col_offset=17)], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8)], lineno=154, col_offset=4)], [], lineno=149, col_offset=4), Assign([Name('pkg_name', Store(), lineno=157, col_offset=4)], Subscript(Call(Attribute(Name('mod_name', Load(), lineno=157, col_offset=15), 'rpartition', Load(), lineno=157, col_offset=15), [Str('.', lineno=157, col_offset=35)], [], None, None, lineno=157, col_offset=15), Index(Num(0, lineno=157, col_offset=40)), Load(), lineno=157, col_offset=15), lineno=157, col_offset=4), Assign([Name('main_globals', Store(), lineno=158, col_offset=4)], Attribute(Subscript(Attribute(Name('sys', Load(), lineno=158, col_offset=19), 'modules', Load(), lineno=158, col_offset=19), Index(Str('__main__', lineno=158, col_offset=31)), Load(), lineno=158, col_offset=19), '__dict__', Load(), lineno=158, col_offset=19), lineno=158, col_offset=4), If(Name('alter_argv', Load(), lineno=159, col_offset=7), [Assign([Subscript(Attribute(Name('sys', Load(), lineno=160, col_offset=8), 'argv', Load(), lineno=160, col_offset=8), Index(Num(0, lineno=160, col_offset=17)), Store(), lineno=160, col_offset=8)], Name('fname', Load(), lineno=160, col_offset=22), lineno=160, col_offset=8)], [], lineno=159, col_offset=4), Return(Call(Name('_run_code', Load(), lineno=161, col_offset=11), [Name('code', Load(), lineno=161, col_offset=21), Name('main_globals', Load(), lineno=161, col_offset=27), Name('None', Load(), lineno=161, col_offset=41), Str('__main__', lineno=162, col_offset=21), Name('fname', Load(), lineno=162, col_offset=33), Name('loader', Load(), lineno=162, col_offset=40), Name('pkg_name', Load(), lineno=162, col_offset=48)], [], None, None, lineno=161, col_offset=11), lineno=161, col_offset=4)], [], lineno=136, col_offset=0), FunctionDef('run_module', arguments([Name('mod_name', Param(), lineno=164, col_offset=15), Name('init_globals', Param(), lineno=164, col_offset=25), Name('run_name', Param(), lineno=165, col_offset=15), Name('alter_sys', Param(), lineno=165, col_offset=30)], None, None, [Name('None', Load(), lineno=164, col_offset=38), Name('None', Load(), lineno=165, col_offset=24), Name('False', Load(), lineno=165, col_offset=40)]), [Expr(Str("Execute a module's code without importing it\n\n       Returns the resulting top level namespace dictionary\n    ", lineno=169, col_offset=-1), lineno=169, col_offset=-1), Assign([Tuple([Name('mod_name', Store(), lineno=170, col_offset=4), Name('loader', Store(), lineno=170, col_offset=14), Name('code', Store(), lineno=170, col_offset=22), Name('fname', Store(), lineno=170, col_offset=28)], Store(), lineno=170, col_offset=4)], Call(Name('_get_module_details', Load(), lineno=170, col_offset=36), [Name('mod_name', Load(), lineno=170, col_offset=56)], [], None, None, lineno=170, col_offset=36), lineno=170, col_offset=4), If(Compare(Name('run_name', Load(), lineno=171, col_offset=7), [Is()], [Name('None', Load(), lineno=171, col_offset=19)], lineno=171, col_offset=7), [Assign([Name('run_name', Store(), lineno=172, col_offset=8)], Name('mod_name', Load(), lineno=172, col_offset=19), lineno=172, col_offset=8)], [], lineno=171, col_offset=4), Assign([Name('pkg_name', Store(), lineno=173, col_offset=4)], Subscript(Call(Attribute(Name('mod_name', Load(), lineno=173, col_offset=15), 'rpartition', Load(), lineno=173, col_offset=15), [Str('.', lineno=173, col_offset=35)], [], None, None, lineno=173, col_offset=15), Index(Num(0, lineno=173, col_offset=40)), Load(), lineno=173, col_offset=15), lineno=173, col_offset=4), If(Name('alter_sys', Load(), lineno=174, col_offset=7), [Return(Call(Name('_run_module_code', Load(), lineno=175, col_offset=15), [Name('code', Load(), lineno=175, col_offset=32), Name('init_globals', Load(), lineno=175, col_offset=38), Name('run_name', Load(), lineno=175, col_offset=52), Name('fname', Load(), lineno=176, col_offset=32), Name('loader', Load(), lineno=176, col_offset=39), Name('pkg_name', Load(), lineno=176, col_offset=47)], [], None, None, lineno=175, col_offset=15), lineno=175, col_offset=8)], [Return(Call(Name('_run_code', Load(), lineno=179, col_offset=15), [Name('code', Load(), lineno=179, col_offset=25), Dict([], [], lineno=179, col_offset=31), Name('init_globals', Load(), lineno=179, col_offset=35), Name('run_name', Load(), lineno=179, col_offset=49), Name('fname', Load(), lineno=180, col_offset=25), Name('loader', Load(), lineno=180, col_offset=32), Name('pkg_name', Load(), lineno=180, col_offset=40)], [], None, None, lineno=179, col_offset=15), lineno=179, col_offset=8)], lineno=174, col_offset=4)], [], lineno=164, col_offset=0), FunctionDef('_get_importer', arguments([Name('path_name', Param(), lineno=185, col_offset=18)], None, None, []), [Expr(Str('Python version of PyImport_GetImporter C API function', lineno=186, col_offset=4), lineno=186, col_offset=4), Assign([Name('cache', Store(), lineno=187, col_offset=4)], Attribute(Name('sys', Load(), lineno=187, col_offset=12), 'path_importer_cache', Load(), lineno=187, col_offset=12), lineno=187, col_offset=4), TryExcept([Assign([Name('importer', Store(), lineno=189, col_offset=8)], Subscript(Name('cache', Load(), lineno=189, col_offset=19), Index(Name('path_name', Load(), lineno=189, col_offset=25)), Load(), lineno=189, col_offset=19), lineno=189, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=190, col_offset=11), None, [Assign([Subscript(Name('cache', Load(), lineno=194, col_offset=8), Index(Name('path_name', Load(), lineno=194, col_offset=14)), Store(), lineno=194, col_offset=8)], Name('None', Load(), lineno=194, col_offset=27), lineno=194, col_offset=8), For(Name('hook', Store(), lineno=195, col_offset=12), Attribute(Name('sys', Load(), lineno=195, col_offset=20), 'path_hooks', Load(), lineno=195, col_offset=20), [TryExcept([Assign([Name('importer', Store(), lineno=197, col_offset=16)], Call(Name('hook', Load(), lineno=197, col_offset=27), [Name('path_name', Load(), lineno=197, col_offset=32)], [], None, None, lineno=197, col_offset=27), lineno=197, col_offset=16), Break( lineno=198, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=199, col_offset=19), None, [Pass( lineno=200, col_offset=16)], lineno=199, col_offset=12)], [], lineno=196, col_offset=12)], [TryExcept([Assign([Name('importer', Store(), lineno=207, col_offset=16)], Call(Attribute(Name('imp', Load(), lineno=207, col_offset=27), 'NullImporter', Load(), lineno=207, col_offset=27), [Name('path_name', Load(), lineno=207, col_offset=44)], [], None, None, lineno=207, col_offset=27), lineno=207, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=208, col_offset=19), None, [Return(Name('None', Load(), lineno=209, col_offset=23), lineno=209, col_offset=16)], lineno=208, col_offset=12)], [], lineno=206, col_offset=12)], lineno=195, col_offset=8), Assign([Subscript(Name('cache', Load(), lineno=210, col_offset=8), Index(Name('path_name', Load(), lineno=210, col_offset=14)), Store(), lineno=210, col_offset=8)], Name('importer', Load(), lineno=210, col_offset=27), lineno=210, col_offset=8)], lineno=190, col_offset=4)], [], lineno=188, col_offset=4), Return(Name('importer', Load(), lineno=211, col_offset=11), lineno=211, col_offset=4)], [], lineno=185, col_offset=0), FunctionDef('_get_code_from_file', arguments([Name('fname', Param(), lineno=213, col_offset=24)], None, None, []), [With(Call(Name('open', Load(), lineno=215, col_offset=9), [Name('fname', Load(), lineno=215, col_offset=14), Str('rb', lineno=215, col_offset=21)], [], None, None, lineno=215, col_offset=9), Name('f', Store(), lineno=215, col_offset=30), [Assign([Name('code', Store(), lineno=216, col_offset=8)], Call(Name('read_code', Load(), lineno=216, col_offset=15), [Name('f', Load(), lineno=216, col_offset=25)], [], None, None, lineno=216, col_offset=15), lineno=216, col_offset=8)], lineno=215, col_offset=9), If(Compare(Name('code', Load(), lineno=217, col_offset=7), [Is()], [Name('None', Load(), lineno=217, col_offset=15)], lineno=217, col_offset=7), [With(Call(Name('open', Load(), lineno=219, col_offset=13), [Name('fname', Load(), lineno=219, col_offset=18), Str('rU', lineno=219, col_offset=25)], [], None, None, lineno=219, col_offset=13), Name('f', Store(), lineno=219, col_offset=34), [Assign([Name('code', Store(), lineno=220, col_offset=12)], Call(Name('compile', Load(), lineno=220, col_offset=19), [Call(Attribute(Name('f', Load(), lineno=220, col_offset=27), 'read', Load(), lineno=220, col_offset=27), [], [], None, None, lineno=220, col_offset=27), Name('fname', Load(), lineno=220, col_offset=37), Str('exec', lineno=220, col_offset=44)], [], None, None, lineno=220, col_offset=19), lineno=220, col_offset=12)], lineno=219, col_offset=13)], [], lineno=217, col_offset=4), Return(Name('code', Load(), lineno=221, col_offset=11), lineno=221, col_offset=4)], [], lineno=213, col_offset=0), FunctionDef('run_path', arguments([Name('path_name', Param(), lineno=223, col_offset=13), Name('init_globals', Param(), lineno=223, col_offset=24), Name('run_name', Param(), lineno=223, col_offset=43)], None, None, [Name('None', Load(), lineno=223, col_offset=37), Name('None', Load(), lineno=223, col_offset=52)]), [Expr(Str('Execute code located at the specified filesystem location\n\n       Returns the resulting top level namespace dictionary\n\n       The file path may refer directly to a Python script (i.e.\n       one that could be directly executed with execfile) or else\n       it may refer to a zipfile or directory containing a top\n       level __main__.py script.\n    ', lineno=232, col_offset=-1), lineno=232, col_offset=-1), If(Compare(Name('run_name', Load(), lineno=233, col_offset=7), [Is()], [Name('None', Load(), lineno=233, col_offset=19)], lineno=233, col_offset=7), [Assign([Name('run_name', Store(), lineno=234, col_offset=8)], Str('<run_path>', lineno=234, col_offset=19), lineno=234, col_offset=8)], [], lineno=233, col_offset=4), Assign([Name('importer', Store(), lineno=235, col_offset=4)], Call(Name('_get_importer', Load(), lineno=235, col_offset=15), [Name('path_name', Load(), lineno=235, col_offset=29)], [], None, None, lineno=235, col_offset=15), lineno=235, col_offset=4), If(Call(Name('isinstance', Load(), lineno=236, col_offset=7), [Name('importer', Load(), lineno=236, col_offset=18), Attribute(Name('imp', Load(), lineno=236, col_offset=28), 'NullImporter', Load(), lineno=236, col_offset=28)], [], None, None, lineno=236, col_offset=7), [Assign([Name('code', Store(), lineno=239, col_offset=8)], Call(Name('_get_code_from_file', Load(), lineno=239, col_offset=15), [Name('path_name', Load(), lineno=239, col_offset=35)], [], None, None, lineno=239, col_offset=15), lineno=239, col_offset=8), Return(Call(Name('_run_module_code', Load(), lineno=240, col_offset=15), [Name('code', Load(), lineno=240, col_offset=32), Name('init_globals', Load(), lineno=240, col_offset=38), Name('run_name', Load(), lineno=240, col_offset=52), Name('path_name', Load(), lineno=240, col_offset=62)], [], None, None, lineno=240, col_offset=15), lineno=240, col_offset=8)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=244, col_offset=8), 'path', Load(), lineno=244, col_offset=8), 'insert', Load(), lineno=244, col_offset=8), [Num(0, lineno=244, col_offset=24), Name('path_name', Load(), lineno=244, col_offset=27)], [], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8), TryFinally([Assign([Name('main_name', Store(), lineno=252, col_offset=12)], Str('__main__', lineno=252, col_offset=24), lineno=252, col_offset=12), Assign([Name('saved_main', Store(), lineno=253, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=253, col_offset=25), 'modules', Load(), lineno=253, col_offset=25), Index(Name('main_name', Load(), lineno=253, col_offset=37)), Load(), lineno=253, col_offset=25), lineno=253, col_offset=12), Delete([Subscript(Attribute(Name('sys', Load(), lineno=254, col_offset=16), 'modules', Load(), lineno=254, col_offset=16), Index(Name('main_name', Load(), lineno=254, col_offset=28)), Del(), lineno=254, col_offset=16)], lineno=254, col_offset=12), TryFinally([Assign([Tuple([Name('mod_name', Store(), lineno=256, col_offset=16), Name('loader', Store(), lineno=256, col_offset=26), Name('code', Store(), lineno=256, col_offset=34), Name('fname', Store(), lineno=256, col_offset=40)], Store(), lineno=256, col_offset=16)], Call(Name('_get_main_module_details', Load(), lineno=256, col_offset=48), [], [], None, None, lineno=256, col_offset=48), lineno=256, col_offset=16)], [Assign([Subscript(Attribute(Name('sys', Load(), lineno=258, col_offset=16), 'modules', Load(), lineno=258, col_offset=16), Index(Name('main_name', Load(), lineno=258, col_offset=28)), Store(), lineno=258, col_offset=16)], Name('saved_main', Load(), lineno=258, col_offset=41), lineno=258, col_offset=16)], lineno=255, col_offset=12), Assign([Name('pkg_name', Store(), lineno=259, col_offset=12)], Str('', lineno=259, col_offset=23), lineno=259, col_offset=12), With(Call(Name('_TempModule', Load(), lineno=260, col_offset=17), [Name('run_name', Load(), lineno=260, col_offset=29)], [], None, None, lineno=260, col_offset=17), Name('temp_module', Store(), lineno=260, col_offset=42), [With(Call(Name('_ModifiedArgv0', Load(), lineno=261, col_offset=17), [Name('path_name', Load(), lineno=261, col_offset=32)], [], None, None, lineno=261, col_offset=17), None, [Assign([Name('mod_globals', Store(), lineno=262, col_offset=16)], Attribute(Attribute(Name('temp_module', Load(), lineno=262, col_offset=30), 'module', Load(), lineno=262, col_offset=30), '__dict__', Load(), lineno=262, col_offset=30), lineno=262, col_offset=16), Return(Call(Attribute(Call(Name('_run_code', Load(), lineno=263, col_offset=23), [Name('code', Load(), lineno=263, col_offset=33), Name('mod_globals', Load(), lineno=263, col_offset=39), Name('init_globals', Load(), lineno=263, col_offset=52), Name('run_name', Load(), lineno=264, col_offset=36), Name('fname', Load(), lineno=264, col_offset=46), Name('loader', Load(), lineno=264, col_offset=53), Name('pkg_name', Load(), lineno=264, col_offset=61)], [], None, None, lineno=263, col_offset=23), 'copy', Load(), lineno=263, col_offset=23), [], [], None, None, lineno=263, col_offset=23), lineno=263, col_offset=16)], lineno=261, col_offset=17)], lineno=260, col_offset=17)], [TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=267, col_offset=16), 'path', Load(), lineno=267, col_offset=16), 'remove', Load(), lineno=267, col_offset=16), [Name('path_name', Load(), lineno=267, col_offset=32)], [], None, None, lineno=267, col_offset=16), lineno=267, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=268, col_offset=19), None, [Pass( lineno=269, col_offset=16)], lineno=268, col_offset=12)], [], lineno=266, col_offset=12)], lineno=245, col_offset=8)], lineno=236, col_offset=4)], [], lineno=223, col_offset=0), If(Compare(Name('__name__', Load(), lineno=272, col_offset=3), [Eq()], [Str('__main__', lineno=272, col_offset=15)], lineno=272, col_offset=3), [If(Compare(Call(Name('len', Load(), lineno=274, col_offset=7), [Attribute(Name('sys', Load(), lineno=274, col_offset=11), 'argv', Load(), lineno=274, col_offset=11)], [], None, None, lineno=274, col_offset=7), [Lt()], [Num(2, lineno=274, col_offset=23)], lineno=274, col_offset=7), [Print(Attribute(Name('sys', Load(), lineno=275, col_offset=17), 'stderr', Load(), lineno=275, col_offset=17), [Str('No module specified for execution', lineno=275, col_offset=29)], True, lineno=275, col_offset=8)], [Delete([Subscript(Attribute(Name('sys', Load(), lineno=277, col_offset=12), 'argv', Load(), lineno=277, col_offset=12), Index(Num(0, lineno=277, col_offset=21)), Del(), lineno=277, col_offset=12)], lineno=277, col_offset=8), Expr(Call(Name('_run_module_as_main', Load(), lineno=278, col_offset=8), [Subscript(Attribute(Name('sys', Load(), lineno=278, col_offset=28), 'argv', Load(), lineno=278, col_offset=28), Index(Num(0, lineno=278, col_offset=37)), Load(), lineno=278, col_offset=28)], [], None, None, lineno=278, col_offset=8), lineno=278, col_offset=8)], lineno=274, col_offset=4)], [], lineno=272, col_offset=0)])
