Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ImportFrom('test.test_support', [alias('check_syntax_error', None), alias('check_py3k_warnings', None), alias('check_warnings', None), alias('run_unittest', None)], 0, lineno=2, col_offset=0), ClassDef('ScopeTests', [Attribute(Name('unittest', Load(), lineno=6, col_offset=17), 'TestCase', Load(), lineno=6, col_offset=17)], [FunctionDef('testSimpleNesting', arguments([Name('self', Param(), lineno=8, col_offset=26)], None, None, []), [FunctionDef('make_adder', arguments([Name('x', Param(), lineno=10, col_offset=23)], None, None, []), [FunctionDef('adder', arguments([Name('y', Param(), lineno=11, col_offset=22)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=12, col_offset=23), Add(), Name('y', Load(), lineno=12, col_offset=27), lineno=12, col_offset=23), lineno=12, col_offset=16)], [], lineno=11, col_offset=12), Return(Name('adder', Load(), lineno=13, col_offset=19), lineno=13, col_offset=12)], [], lineno=10, col_offset=8), Assign([Name('inc', Store(), lineno=15, col_offset=8)], Call(Name('make_adder', Load(), lineno=15, col_offset=14), [Num(1, lineno=15, col_offset=25)], [], None, None, lineno=15, col_offset=14), lineno=15, col_offset=8), Assign([Name('plus10', Store(), lineno=16, col_offset=8)], Call(Name('make_adder', Load(), lineno=16, col_offset=17), [Num(10, lineno=16, col_offset=28)], [], None, None, lineno=16, col_offset=17), lineno=16, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=18, col_offset=8), 'assertEqual', Load(), lineno=18, col_offset=8), [Call(Name('inc', Load(), lineno=18, col_offset=25), [Num(1, lineno=18, col_offset=29)], [], None, None, lineno=18, col_offset=25), Num(2, lineno=18, col_offset=33)], [], None, None, lineno=18, col_offset=8), lineno=18, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=19, col_offset=8), 'assertEqual', Load(), lineno=19, col_offset=8), [Call(Name('plus10', Load(), lineno=19, col_offset=25), [Num(-2, lineno=19, col_offset=33)], [], None, None, lineno=19, col_offset=25), Num(8, lineno=19, col_offset=37)], [], None, None, lineno=19, col_offset=8), lineno=19, col_offset=8)], [], lineno=8, col_offset=4), FunctionDef('testExtraNesting', arguments([Name('self', Param(), lineno=21, col_offset=25)], None, None, []), [FunctionDef('make_adder2', arguments([Name('x', Param(), lineno=23, col_offset=24)], None, None, []), [FunctionDef('extra', arguments([], None, None, []), [FunctionDef('adder', arguments([Name('y', Param(), lineno=25, col_offset=26)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=26, col_offset=27), Add(), Name('y', Load(), lineno=26, col_offset=31), lineno=26, col_offset=27), lineno=26, col_offset=20)], [], lineno=25, col_offset=16), Return(Name('adder', Load(), lineno=27, col_offset=23), lineno=27, col_offset=16)], [], lineno=24, col_offset=12), Return(Call(Name('extra', Load(), lineno=28, col_offset=19), [], [], None, None, lineno=28, col_offset=19), lineno=28, col_offset=12)], [], lineno=23, col_offset=8), Assign([Name('inc', Store(), lineno=30, col_offset=8)], Call(Name('make_adder2', Load(), lineno=30, col_offset=14), [Num(1, lineno=30, col_offset=26)], [], None, None, lineno=30, col_offset=14), lineno=30, col_offset=8), Assign([Name('plus10', Store(), lineno=31, col_offset=8)], Call(Name('make_adder2', Load(), lineno=31, col_offset=17), [Num(10, lineno=31, col_offset=29)], [], None, None, lineno=31, col_offset=17), lineno=31, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=8), 'assertEqual', Load(), lineno=33, col_offset=8), [Call(Name('inc', Load(), lineno=33, col_offset=25), [Num(1, lineno=33, col_offset=29)], [], None, None, lineno=33, col_offset=25), Num(2, lineno=33, col_offset=33)], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=34, col_offset=8), 'assertEqual', Load(), lineno=34, col_offset=8), [Call(Name('plus10', Load(), lineno=34, col_offset=25), [Num(-2, lineno=34, col_offset=33)], [], None, None, lineno=34, col_offset=25), Num(8, lineno=34, col_offset=37)], [], None, None, lineno=34, col_offset=8), lineno=34, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('testSimpleAndRebinding', arguments([Name('self', Param(), lineno=36, col_offset=31)], None, None, []), [FunctionDef('make_adder3', arguments([Name('x', Param(), lineno=38, col_offset=24)], None, None, []), [FunctionDef('adder', arguments([Name('y', Param(), lineno=39, col_offset=22)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=40, col_offset=23), Add(), Name('y', Load(), lineno=40, col_offset=27), lineno=40, col_offset=23), lineno=40, col_offset=16)], [], lineno=39, col_offset=12), Assign([Name('x', Store(), lineno=41, col_offset=12)], BinOp(Name('x', Load(), lineno=41, col_offset=16), Add(), Num(1, lineno=41, col_offset=20), lineno=41, col_offset=16), lineno=41, col_offset=12), Return(Name('adder', Load(), lineno=42, col_offset=19), lineno=42, col_offset=12)], [], lineno=38, col_offset=8), Assign([Name('inc', Store(), lineno=44, col_offset=8)], Call(Name('make_adder3', Load(), lineno=44, col_offset=14), [Num(0, lineno=44, col_offset=26)], [], None, None, lineno=44, col_offset=14), lineno=44, col_offset=8), Assign([Name('plus10', Store(), lineno=45, col_offset=8)], Call(Name('make_adder3', Load(), lineno=45, col_offset=17), [Num(9, lineno=45, col_offset=29)], [], None, None, lineno=45, col_offset=17), lineno=45, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=47, col_offset=8), 'assertEqual', Load(), lineno=47, col_offset=8), [Call(Name('inc', Load(), lineno=47, col_offset=25), [Num(1, lineno=47, col_offset=29)], [], None, None, lineno=47, col_offset=25), Num(2, lineno=47, col_offset=33)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'assertEqual', Load(), lineno=48, col_offset=8), [Call(Name('plus10', Load(), lineno=48, col_offset=25), [Num(-2, lineno=48, col_offset=33)], [], None, None, lineno=48, col_offset=25), Num(8, lineno=48, col_offset=37)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=36, col_offset=4), FunctionDef('testNestingGlobalNoFree', arguments([Name('self', Param(), lineno=50, col_offset=32)], None, None, []), [FunctionDef('make_adder4', arguments([], None, None, []), [FunctionDef('nest', arguments([], None, None, []), [FunctionDef('nest', arguments([], None, None, []), [FunctionDef('adder', arguments([Name('y', Param(), lineno=55, col_offset=30)], None, None, []), [Return(BinOp(Name('global_x', Load(), lineno=56, col_offset=31), Add(), Name('y', Load(), lineno=56, col_offset=42), lineno=56, col_offset=31), lineno=56, col_offset=24)], [], lineno=55, col_offset=20), Return(Name('adder', Load(), lineno=57, col_offset=27), lineno=57, col_offset=20)], [], lineno=54, col_offset=16), Return(Call(Name('nest', Load(), lineno=58, col_offset=23), [], [], None, None, lineno=58, col_offset=23), lineno=58, col_offset=16)], [], lineno=53, col_offset=12), Return(Call(Name('nest', Load(), lineno=59, col_offset=19), [], [], None, None, lineno=59, col_offset=19), lineno=59, col_offset=12)], [], lineno=52, col_offset=8), Assign([Name('global_x', Store(), lineno=61, col_offset=8)], Num(1, lineno=61, col_offset=19), lineno=61, col_offset=8), Assign([Name('adder', Store(), lineno=62, col_offset=8)], Call(Name('make_adder4', Load(), lineno=62, col_offset=16), [], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertEqual', Load(), lineno=63, col_offset=8), [Call(Name('adder', Load(), lineno=63, col_offset=25), [Num(1, lineno=63, col_offset=31)], [], None, None, lineno=63, col_offset=25), Num(2, lineno=63, col_offset=35)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Assign([Name('global_x', Store(), lineno=65, col_offset=8)], Num(10, lineno=65, col_offset=19), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'assertEqual', Load(), lineno=66, col_offset=8), [Call(Name('adder', Load(), lineno=66, col_offset=25), [Num(-2, lineno=66, col_offset=32)], [], None, None, lineno=66, col_offset=25), Num(8, lineno=66, col_offset=36)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('testNestingThroughClass', arguments([Name('self', Param(), lineno=68, col_offset=32)], None, None, []), [FunctionDef('make_adder5', arguments([Name('x', Param(), lineno=70, col_offset=24)], None, None, []), [ClassDef('Adder', [], [FunctionDef('__call__', arguments([Name('self', Param(), lineno=72, col_offset=29), Name('y', Param(), lineno=72, col_offset=35)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=73, col_offset=27), Add(), Name('y', Load(), lineno=73, col_offset=31), lineno=73, col_offset=27), lineno=73, col_offset=20)], [], lineno=72, col_offset=16)], [], lineno=71, col_offset=12), Return(Call(Name('Adder', Load(), lineno=74, col_offset=19), [], [], None, None, lineno=74, col_offset=19), lineno=74, col_offset=12)], [], lineno=70, col_offset=8), Assign([Name('inc', Store(), lineno=76, col_offset=8)], Call(Name('make_adder5', Load(), lineno=76, col_offset=14), [Num(1, lineno=76, col_offset=26)], [], None, None, lineno=76, col_offset=14), lineno=76, col_offset=8), Assign([Name('plus10', Store(), lineno=77, col_offset=8)], Call(Name('make_adder5', Load(), lineno=77, col_offset=17), [Num(10, lineno=77, col_offset=29)], [], None, None, lineno=77, col_offset=17), lineno=77, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=79, col_offset=8), 'assertEqual', Load(), lineno=79, col_offset=8), [Call(Name('inc', Load(), lineno=79, col_offset=25), [Num(1, lineno=79, col_offset=29)], [], None, None, lineno=79, col_offset=25), Num(2, lineno=79, col_offset=33)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=80, col_offset=8), 'assertEqual', Load(), lineno=80, col_offset=8), [Call(Name('plus10', Load(), lineno=80, col_offset=25), [Num(-2, lineno=80, col_offset=33)], [], None, None, lineno=80, col_offset=25), Num(8, lineno=80, col_offset=37)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('testNestingPlusFreeRefToGlobal', arguments([Name('self', Param(), lineno=82, col_offset=39)], None, None, []), [FunctionDef('make_adder6', arguments([Name('x', Param(), lineno=84, col_offset=24)], None, None, []), [Global(['global_nest_x'], lineno=85, col_offset=12), FunctionDef('adder', arguments([Name('y', Param(), lineno=86, col_offset=22)], None, None, []), [Return(BinOp(Name('global_nest_x', Load(), lineno=87, col_offset=23), Add(), Name('y', Load(), lineno=87, col_offset=39), lineno=87, col_offset=23), lineno=87, col_offset=16)], [], lineno=86, col_offset=12), Assign([Name('global_nest_x', Store(), lineno=88, col_offset=12)], Name('x', Load(), lineno=88, col_offset=28), lineno=88, col_offset=12), Return(Name('adder', Load(), lineno=89, col_offset=19), lineno=89, col_offset=12)], [], lineno=84, col_offset=8), Assign([Name('inc', Store(), lineno=91, col_offset=8)], Call(Name('make_adder6', Load(), lineno=91, col_offset=14), [Num(1, lineno=91, col_offset=26)], [], None, None, lineno=91, col_offset=14), lineno=91, col_offset=8), Assign([Name('plus10', Store(), lineno=92, col_offset=8)], Call(Name('make_adder6', Load(), lineno=92, col_offset=17), [Num(10, lineno=92, col_offset=29)], [], None, None, lineno=92, col_offset=17), lineno=92, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=8), 'assertEqual', Load(), lineno=94, col_offset=8), [Call(Name('inc', Load(), lineno=94, col_offset=25), [Num(1, lineno=94, col_offset=29)], [], None, None, lineno=94, col_offset=25), Num(11, lineno=94, col_offset=33)], [], None, None, lineno=94, col_offset=8), lineno=94, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertEqual', Load(), lineno=95, col_offset=8), [Call(Name('plus10', Load(), lineno=95, col_offset=25), [Num(-2, lineno=95, col_offset=33)], [], None, None, lineno=95, col_offset=25), Num(8, lineno=95, col_offset=37)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8)], [], lineno=82, col_offset=4), FunctionDef('testNearestEnclosingScope', arguments([Name('self', Param(), lineno=97, col_offset=34)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=99, col_offset=14)], None, None, []), [FunctionDef('g', arguments([Name('y', Param(), lineno=100, col_offset=18)], None, None, []), [Assign([Name('x', Store(), lineno=101, col_offset=16)], Num(42, lineno=101, col_offset=20), lineno=101, col_offset=16), FunctionDef('h', arguments([Name('z', Param(), lineno=102, col_offset=22)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=103, col_offset=27), Add(), Name('z', Load(), lineno=103, col_offset=31), lineno=103, col_offset=27), lineno=103, col_offset=20)], [], lineno=102, col_offset=16), Return(Name('h', Load(), lineno=104, col_offset=23), lineno=104, col_offset=16)], [], lineno=100, col_offset=12), Return(Call(Name('g', Load(), lineno=105, col_offset=19), [Num(2, lineno=105, col_offset=21)], [], None, None, lineno=105, col_offset=19), lineno=105, col_offset=12)], [], lineno=99, col_offset=8), Assign([Name('test_func', Store(), lineno=107, col_offset=8)], Call(Name('f', Load(), lineno=107, col_offset=20), [Num(10, lineno=107, col_offset=22)], [], None, None, lineno=107, col_offset=20), lineno=107, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'assertEqual', Load(), lineno=108, col_offset=8), [Call(Name('test_func', Load(), lineno=108, col_offset=25), [Num(5, lineno=108, col_offset=35)], [], None, None, lineno=108, col_offset=25), Num(47, lineno=108, col_offset=39)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('testMixedFreevarsAndCellvars', arguments([Name('self', Param(), lineno=110, col_offset=37)], None, None, []), [FunctionDef('identity', arguments([Name('x', Param(), lineno=112, col_offset=21)], None, None, []), [Return(Name('x', Load(), lineno=113, col_offset=19), lineno=113, col_offset=12)], [], lineno=112, col_offset=8), FunctionDef('f', arguments([Name('x', Param(), lineno=115, col_offset=14), Name('y', Param(), lineno=115, col_offset=17), Name('z', Param(), lineno=115, col_offset=20)], None, None, []), [FunctionDef('g', arguments([Name('a', Param(), lineno=116, col_offset=18), Name('b', Param(), lineno=116, col_offset=21), Name('c', Param(), lineno=116, col_offset=24)], None, None, []), [Assign([Name('a', Store(), lineno=117, col_offset=16)], BinOp(Name('a', Load(), lineno=117, col_offset=20), Add(), Name('x', Load(), lineno=117, col_offset=24), lineno=117, col_offset=20), lineno=117, col_offset=16), FunctionDef('h', arguments([], None, None, []), [Return(Call(Name('identity', Load(), lineno=121, col_offset=27), [BinOp(Name('z', Load(), lineno=121, col_offset=36), Mult(), BinOp(Name('b', Load(), lineno=121, col_offset=41), Add(), Name('y', Load(), lineno=121, col_offset=45), lineno=121, col_offset=41), lineno=121, col_offset=36)], [], None, None, lineno=121, col_offset=27), lineno=121, col_offset=20)], [], lineno=118, col_offset=16), Assign([Name('y', Store(), lineno=122, col_offset=16)], BinOp(Name('c', Load(), lineno=122, col_offset=20), Add(), Name('z', Load(), lineno=122, col_offset=24), lineno=122, col_offset=20), lineno=122, col_offset=16), Return(Name('h', Load(), lineno=123, col_offset=23), lineno=123, col_offset=16)], [], lineno=116, col_offset=12), Return(Name('g', Load(), lineno=124, col_offset=19), lineno=124, col_offset=12)], [], lineno=115, col_offset=8), Assign([Name('g', Store(), lineno=126, col_offset=8)], Call(Name('f', Load(), lineno=126, col_offset=12), [Num(1, lineno=126, col_offset=14), Num(2, lineno=126, col_offset=17), Num(3, lineno=126, col_offset=20)], [], None, None, lineno=126, col_offset=12), lineno=126, col_offset=8), Assign([Name('h', Store(), lineno=127, col_offset=8)], Call(Name('g', Load(), lineno=127, col_offset=12), [Num(2, lineno=127, col_offset=14), Num(4, lineno=127, col_offset=17), Num(6, lineno=127, col_offset=20)], [], None, None, lineno=127, col_offset=12), lineno=127, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=8), 'assertEqual', Load(), lineno=128, col_offset=8), [Call(Name('h', Load(), lineno=128, col_offset=25), [], [], None, None, lineno=128, col_offset=25), Num(39, lineno=128, col_offset=30)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('testFreeVarInMethod', arguments([Name('self', Param(), lineno=130, col_offset=28)], None, None, []), [FunctionDef('test', arguments([], None, None, []), [Assign([Name('method_and_var', Store(), lineno=133, col_offset=12)], Str('var', lineno=133, col_offset=29), lineno=133, col_offset=12), ClassDef('Test', [], [FunctionDef('method_and_var', arguments([Name('self', Param(), lineno=135, col_offset=35)], None, None, []), [Return(Str('method', lineno=136, col_offset=27), lineno=136, col_offset=20)], [], lineno=135, col_offset=16), FunctionDef('test', arguments([Name('self', Param(), lineno=137, col_offset=25)], None, None, []), [Return(Name('method_and_var', Load(), lineno=138, col_offset=27), lineno=138, col_offset=20)], [], lineno=137, col_offset=16), FunctionDef('actual_global', arguments([Name('self', Param(), lineno=139, col_offset=34)], None, None, []), [Return(Call(Name('str', Load(), lineno=140, col_offset=27), [Str('global', lineno=140, col_offset=31)], [], None, None, lineno=140, col_offset=27), lineno=140, col_offset=20)], [], lineno=139, col_offset=16), FunctionDef('str', arguments([Name('self', Param(), lineno=141, col_offset=24)], None, None, []), [Return(Call(Name('str', Load(), lineno=142, col_offset=27), [Name('self', Load(), lineno=142, col_offset=31)], [], None, None, lineno=142, col_offset=27), lineno=142, col_offset=20)], [], lineno=141, col_offset=16)], [], lineno=134, col_offset=12), Return(Call(Name('Test', Load(), lineno=143, col_offset=19), [], [], None, None, lineno=143, col_offset=19), lineno=143, col_offset=12)], [], lineno=132, col_offset=8), Assign([Name('t', Store(), lineno=145, col_offset=8)], Call(Name('test', Load(), lineno=145, col_offset=12), [], [], None, None, lineno=145, col_offset=12), lineno=145, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=146, col_offset=8), 'assertEqual', Load(), lineno=146, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=146, col_offset=25), 'test', Load(), lineno=146, col_offset=25), [], [], None, None, lineno=146, col_offset=25), Str('var', lineno=146, col_offset=35)], [], None, None, lineno=146, col_offset=8), lineno=146, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=8), 'assertEqual', Load(), lineno=147, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=147, col_offset=25), 'method_and_var', Load(), lineno=147, col_offset=25), [], [], None, None, lineno=147, col_offset=25), Str('method', lineno=147, col_offset=45)], [], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=8), 'assertEqual', Load(), lineno=148, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=148, col_offset=25), 'actual_global', Load(), lineno=148, col_offset=25), [], [], None, None, lineno=148, col_offset=25), Str('global', lineno=148, col_offset=44)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Assign([Name('method_and_var', Store(), lineno=150, col_offset=8)], Str('var', lineno=150, col_offset=25), lineno=150, col_offset=8), ClassDef('Test', [], [FunctionDef('method_and_var', arguments([Name('self', Param(), lineno=153, col_offset=31)], None, None, []), [Return(Str('method', lineno=154, col_offset=23), lineno=154, col_offset=16)], [], lineno=153, col_offset=12), FunctionDef('test', arguments([Name('self', Param(), lineno=155, col_offset=21)], None, None, []), [Return(Name('method_and_var', Load(), lineno=156, col_offset=23), lineno=156, col_offset=16)], [], lineno=155, col_offset=12), FunctionDef('actual_global', arguments([Name('self', Param(), lineno=157, col_offset=30)], None, None, []), [Return(Call(Name('str', Load(), lineno=158, col_offset=23), [Str('global', lineno=158, col_offset=27)], [], None, None, lineno=158, col_offset=23), lineno=158, col_offset=16)], [], lineno=157, col_offset=12), FunctionDef('str', arguments([Name('self', Param(), lineno=159, col_offset=20)], None, None, []), [Return(Call(Name('str', Load(), lineno=160, col_offset=23), [Name('self', Load(), lineno=160, col_offset=27)], [], None, None, lineno=160, col_offset=23), lineno=160, col_offset=16)], [], lineno=159, col_offset=12)], [], lineno=151, col_offset=8), Assign([Name('t', Store(), lineno=162, col_offset=8)], Call(Name('Test', Load(), lineno=162, col_offset=12), [], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), 'assertEqual', Load(), lineno=163, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=163, col_offset=25), 'test', Load(), lineno=163, col_offset=25), [], [], None, None, lineno=163, col_offset=25), Str('var', lineno=163, col_offset=35)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=8), 'assertEqual', Load(), lineno=164, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=164, col_offset=25), 'method_and_var', Load(), lineno=164, col_offset=25), [], [], None, None, lineno=164, col_offset=25), Str('method', lineno=164, col_offset=45)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=165, col_offset=8), 'assertEqual', Load(), lineno=165, col_offset=8), [Call(Attribute(Name('t', Load(), lineno=165, col_offset=25), 'actual_global', Load(), lineno=165, col_offset=25), [], [], None, None, lineno=165, col_offset=25), Str('global', lineno=165, col_offset=44)], [], None, None, lineno=165, col_offset=8), lineno=165, col_offset=8)], [], lineno=130, col_offset=4), FunctionDef('testRecursion', arguments([Name('self', Param(), lineno=167, col_offset=22)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=169, col_offset=14)], None, None, []), [FunctionDef('fact', arguments([Name('n', Param(), lineno=170, col_offset=21)], None, None, []), [If(Compare(Name('n', Load(), lineno=171, col_offset=19), [Eq()], [Num(0, lineno=171, col_offset=24)], lineno=171, col_offset=19), [Return(Num(1, lineno=172, col_offset=27), lineno=172, col_offset=20)], [Return(BinOp(Name('n', Load(), lineno=174, col_offset=27), Mult(), Call(Name('fact', Load(), lineno=174, col_offset=31), [BinOp(Name('n', Load(), lineno=174, col_offset=36), Sub(), Num(1, lineno=174, col_offset=40), lineno=174, col_offset=36)], [], None, None, lineno=174, col_offset=31), lineno=174, col_offset=27), lineno=174, col_offset=20)], lineno=171, col_offset=16)], [], lineno=170, col_offset=12), If(Compare(Name('x', Load(), lineno=175, col_offset=15), [GtE()], [Num(0, lineno=175, col_offset=20)], lineno=175, col_offset=15), [Return(Call(Name('fact', Load(), lineno=176, col_offset=23), [Name('x', Load(), lineno=176, col_offset=28)], [], None, None, lineno=176, col_offset=23), lineno=176, col_offset=16)], [Raise(Name('ValueError', Load(), lineno=178, col_offset=22), Str('x must be >= 0', lineno=178, col_offset=34), None, lineno=178, col_offset=16)], lineno=175, col_offset=12)], [], lineno=169, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=180, col_offset=8), 'assertEqual', Load(), lineno=180, col_offset=8), [Call(Name('f', Load(), lineno=180, col_offset=25), [Num(6, lineno=180, col_offset=27)], [], None, None, lineno=180, col_offset=25), Num(720, lineno=180, col_offset=31)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8)], [], lineno=167, col_offset=4), FunctionDef('testUnoptimizedNamespaces', arguments([Name('self', Param(), lineno=183, col_offset=34)], None, None, []), [Expr(Call(Name('check_syntax_error', Load(), lineno=185, col_offset=8), [Name('self', Load(), lineno=185, col_offset=27), Str('def unoptimized_clash1(strip):\n    def f(s):\n        from string import *\n        return strip(s) # ambiguity: free or local\n    return f\n', lineno=191, col_offset=-1)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8), Expr(Call(Name('check_syntax_error', Load(), lineno=193, col_offset=8), [Name('self', Load(), lineno=193, col_offset=27), Str('def unoptimized_clash2():\n    from string import *\n    def f(s):\n        return strip(s) # ambiguity: global or local\n    return f\n', lineno=199, col_offset=-1)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Name('check_syntax_error', Load(), lineno=201, col_offset=8), [Name('self', Load(), lineno=201, col_offset=27), Str('def unoptimized_clash2():\n    from string import *\n    def g():\n        def f(s):\n            return strip(s) # ambiguity: global or local\n        return f\n', lineno=208, col_offset=-1)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8), Expr(Call(Name('check_syntax_error', Load(), lineno=211, col_offset=8), [Name('self', Load(), lineno=211, col_offset=27), Str('def error(y):\n    exec "a = 1"\n    def f(x):\n        return x + y\n    return f\n', lineno=217, col_offset=-1)], [], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8), Expr(Call(Name('check_syntax_error', Load(), lineno=219, col_offset=8), [Name('self', Load(), lineno=219, col_offset=27), Str("def f(x):\n    def g():\n        return x\n    del x # can't del name\n", lineno=224, col_offset=-1)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8), Expr(Call(Name('check_syntax_error', Load(), lineno=226, col_offset=8), [Name('self', Load(), lineno=226, col_offset=27), Str('def f():\n    def g():\n        from string import *\n        return strip # global or local?\n', lineno=231, col_offset=-1)], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8), Exec(Str('\ndef noproblem1():\n    from string import *\n    f = lambda x:x\n\ndef noproblem2():\n    from string import *\n    def f(x):\n        return x + 1\n\ndef noproblem3():\n    from string import *\n    def f(x):\n        global y\n        y = x\n', lineno=250, col_offset=-1), None, None, lineno=235, col_offset=8)], [], lineno=183, col_offset=4), FunctionDef('testLambdas', arguments([Name('self', Param(), lineno=252, col_offset=20)], None, None, []), [Assign([Name('f1', Store(), lineno=254, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=254, col_offset=20)], None, None, []), Lambda(arguments([Name('y', Param(), lineno=254, col_offset=30)], None, None, []), BinOp(Name('x', Load(), lineno=254, col_offset=33), Add(), Name('y', Load(), lineno=254, col_offset=37), lineno=254, col_offset=33), lineno=254, col_offset=23), lineno=254, col_offset=13), lineno=254, col_offset=8), Assign([Name('inc', Store(), lineno=255, col_offset=8)], Call(Name('f1', Load(), lineno=255, col_offset=14), [Num(1, lineno=255, col_offset=17)], [], None, None, lineno=255, col_offset=14), lineno=255, col_offset=8), Assign([Name('plus10', Store(), lineno=256, col_offset=8)], Call(Name('f1', Load(), lineno=256, col_offset=17), [Num(10, lineno=256, col_offset=20)], [], None, None, lineno=256, col_offset=17), lineno=256, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=257, col_offset=8), 'assertEqual', Load(), lineno=257, col_offset=8), [Call(Name('inc', Load(), lineno=257, col_offset=25), [Num(1, lineno=257, col_offset=29)], [], None, None, lineno=257, col_offset=25), Num(2, lineno=257, col_offset=33)], [], None, None, lineno=257, col_offset=8), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=8), 'assertEqual', Load(), lineno=258, col_offset=8), [Call(Name('plus10', Load(), lineno=258, col_offset=25), [Num(5, lineno=258, col_offset=32)], [], None, None, lineno=258, col_offset=25), Num(15, lineno=258, col_offset=36)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8), Assign([Name('f2', Store(), lineno=260, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=260, col_offset=20)], None, None, []), Call(Lambda(arguments([], None, None, []), Lambda(arguments([Name('y', Param(), lineno=260, col_offset=40)], None, None, []), BinOp(Name('x', Load(), lineno=260, col_offset=43), Add(), Name('y', Load(), lineno=260, col_offset=47), lineno=260, col_offset=43), lineno=260, col_offset=33), lineno=260, col_offset=24), [], [], None, None, lineno=260, col_offset=24), lineno=260, col_offset=13), lineno=260, col_offset=8), Assign([Name('inc', Store(), lineno=261, col_offset=8)], Call(Name('f2', Load(), lineno=261, col_offset=14), [Num(1, lineno=261, col_offset=17)], [], None, None, lineno=261, col_offset=14), lineno=261, col_offset=8), Assign([Name('plus10', Store(), lineno=262, col_offset=8)], Call(Name('f2', Load(), lineno=262, col_offset=17), [Num(10, lineno=262, col_offset=20)], [], None, None, lineno=262, col_offset=17), lineno=262, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'assertEqual', Load(), lineno=263, col_offset=8), [Call(Name('inc', Load(), lineno=263, col_offset=25), [Num(1, lineno=263, col_offset=29)], [], None, None, lineno=263, col_offset=25), Num(2, lineno=263, col_offset=33)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=264, col_offset=8), 'assertEqual', Load(), lineno=264, col_offset=8), [Call(Name('plus10', Load(), lineno=264, col_offset=25), [Num(5, lineno=264, col_offset=32)], [], None, None, lineno=264, col_offset=25), Num(15, lineno=264, col_offset=36)], [], None, None, lineno=264, col_offset=8), lineno=264, col_offset=8), Assign([Name('f3', Store(), lineno=266, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=266, col_offset=20)], None, None, []), Lambda(arguments([Name('y', Param(), lineno=266, col_offset=30)], None, None, []), BinOp(Name('global_x', Load(), lineno=266, col_offset=33), Add(), Name('y', Load(), lineno=266, col_offset=44), lineno=266, col_offset=33), lineno=266, col_offset=23), lineno=266, col_offset=13), lineno=266, col_offset=8), Assign([Name('global_x', Store(), lineno=267, col_offset=8)], Num(1, lineno=267, col_offset=19), lineno=267, col_offset=8), Assign([Name('inc', Store(), lineno=268, col_offset=8)], Call(Name('f3', Load(), lineno=268, col_offset=14), [Name('None', Load(), lineno=268, col_offset=17)], [], None, None, lineno=268, col_offset=14), lineno=268, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=269, col_offset=8), 'assertEqual', Load(), lineno=269, col_offset=8), [Call(Name('inc', Load(), lineno=269, col_offset=25), [Num(2, lineno=269, col_offset=29)], [], None, None, lineno=269, col_offset=25), Num(3, lineno=269, col_offset=33)], [], None, None, lineno=269, col_offset=8), lineno=269, col_offset=8), Assign([Name('f8', Store(), lineno=271, col_offset=8)], Lambda(arguments([Name('x', Param(), lineno=271, col_offset=20), Name('y', Param(), lineno=271, col_offset=23), Name('z', Param(), lineno=271, col_offset=26)], None, None, []), Lambda(arguments([Name('a', Param(), lineno=271, col_offset=36), Name('b', Param(), lineno=271, col_offset=39), Name('c', Param(), lineno=271, col_offset=42)], None, None, []), Lambda(arguments([], None, None, []), BinOp(Name('z', Load(), lineno=271, col_offset=54), Mult(), BinOp(Name('b', Load(), lineno=271, col_offset=59), Add(), Name('y', Load(), lineno=271, col_offset=63), lineno=271, col_offset=59), lineno=271, col_offset=54), lineno=271, col_offset=45), lineno=271, col_offset=29), lineno=271, col_offset=13), lineno=271, col_offset=8), Assign([Name('g', Store(), lineno=272, col_offset=8)], Call(Name('f8', Load(), lineno=272, col_offset=12), [Num(1, lineno=272, col_offset=15), Num(2, lineno=272, col_offset=18), Num(3, lineno=272, col_offset=21)], [], None, None, lineno=272, col_offset=12), lineno=272, col_offset=8), Assign([Name('h', Store(), lineno=273, col_offset=8)], Call(Name('g', Load(), lineno=273, col_offset=12), [Num(2, lineno=273, col_offset=14), Num(4, lineno=273, col_offset=17), Num(6, lineno=273, col_offset=20)], [], None, None, lineno=273, col_offset=12), lineno=273, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=8), 'assertEqual', Load(), lineno=274, col_offset=8), [Call(Name('h', Load(), lineno=274, col_offset=25), [], [], None, None, lineno=274, col_offset=25), Num(18, lineno=274, col_offset=30)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8)], [], lineno=252, col_offset=4), FunctionDef('testUnboundLocal', arguments([Name('self', Param(), lineno=276, col_offset=25)], None, None, []), [FunctionDef('errorInOuter', arguments([], None, None, []), [Print(None, [Name('y', Load(), lineno=279, col_offset=18)], True, lineno=279, col_offset=12), FunctionDef('inner', arguments([], None, None, []), [Return(Name('y', Load(), lineno=281, col_offset=23), lineno=281, col_offset=16)], [], lineno=280, col_offset=12), Assign([Name('y', Store(), lineno=282, col_offset=12)], Num(1, lineno=282, col_offset=16), lineno=282, col_offset=12)], [], lineno=278, col_offset=8), FunctionDef('errorInInner', arguments([], None, None, []), [FunctionDef('inner', arguments([], None, None, []), [Return(Name('y', Load(), lineno=286, col_offset=23), lineno=286, col_offset=16)], [], lineno=285, col_offset=12), Expr(Call(Name('inner', Load(), lineno=287, col_offset=12), [], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=12), Assign([Name('y', Store(), lineno=288, col_offset=12)], Num(1, lineno=288, col_offset=16), lineno=288, col_offset=12)], [], lineno=284, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=290, col_offset=8), 'assertRaises', Load(), lineno=290, col_offset=8), [Name('UnboundLocalError', Load(), lineno=290, col_offset=26), Name('errorInOuter', Load(), lineno=290, col_offset=45)], [], None, None, lineno=290, col_offset=8), lineno=290, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=291, col_offset=8), 'assertRaises', Load(), lineno=291, col_offset=8), [Name('NameError', Load(), lineno=291, col_offset=26), Name('errorInInner', Load(), lineno=291, col_offset=37)], [], None, None, lineno=291, col_offset=8), lineno=291, col_offset=8), Exec(Str("\nglobal_x = 1\ndef f():\n    global_x += 1\ntry:\n    f()\nexcept UnboundLocalError:\n    pass\nelse:\n    fail('scope of global_x not correctly determined')\n", lineno=304, col_offset=-1), Dict([Str('fail', lineno=304, col_offset=8)], [Attribute(Name('self', Load(), lineno=304, col_offset=16), 'fail', Load(), lineno=304, col_offset=16)], lineno=304, col_offset=7), None, lineno=294, col_offset=8)], [], lineno=276, col_offset=4), FunctionDef('testComplexDefinitions', arguments([Name('self', Param(), lineno=306, col_offset=31)], None, None, []), [FunctionDef('makeReturner', arguments([], 'lst', None, []), [FunctionDef('returner', arguments([], None, None, []), [Return(Name('lst', Load(), lineno=310, col_offset=23), lineno=310, col_offset=16)], [], lineno=309, col_offset=12), Return(Name('returner', Load(), lineno=311, col_offset=19), lineno=311, col_offset=12)], [], lineno=308, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=8), 'assertEqual', Load(), lineno=313, col_offset=8), [Call(Call(Name('makeReturner', Load(), lineno=313, col_offset=25), [Num(1, lineno=313, col_offset=38), Num(2, lineno=313, col_offset=40), Num(3, lineno=313, col_offset=42)], [], None, None, lineno=313, col_offset=25), [], [], None, None, lineno=313, col_offset=25), Tuple([Num(1, lineno=313, col_offset=49), Num(2, lineno=313, col_offset=51), Num(3, lineno=313, col_offset=53)], Load(), lineno=313, col_offset=49)], [], None, None, lineno=313, col_offset=8), lineno=313, col_offset=8), FunctionDef('makeReturner2', arguments([], None, 'kwargs', []), [FunctionDef('returner', arguments([], None, None, []), [Return(Name('kwargs', Load(), lineno=317, col_offset=23), lineno=317, col_offset=16)], [], lineno=316, col_offset=12), Return(Name('returner', Load(), lineno=318, col_offset=19), lineno=318, col_offset=12)], [], lineno=315, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=320, col_offset=8), 'assertEqual', Load(), lineno=320, col_offset=8), [Subscript(Call(Call(Name('makeReturner2', Load(), lineno=320, col_offset=25), [], [keyword('a', Num(11, lineno=320, col_offset=41))], None, None, lineno=320, col_offset=25), [], [], None, None, lineno=320, col_offset=25), Index(Str('a', lineno=320, col_offset=47)), Load(), lineno=320, col_offset=25), Num(11, lineno=320, col_offset=53)], [], None, None, lineno=320, col_offset=8), lineno=320, col_offset=8), With(Call(Name('check_py3k_warnings', Load(), lineno=322, col_offset=13), [Tuple([Str('tuple parameter unpacking has been removed', lineno=322, col_offset=34), Name('SyntaxWarning', Load(), lineno=323, col_offset=34)], Load(), lineno=322, col_offset=34)], [], None, None, lineno=322, col_offset=13), None, [Exec(Str('def makeAddPair((a, b)):\n    def addPair((c, d)):\n        return (a + c, b + d)\n    return addPair\n', lineno=329, col_offset=-1), Call(Name('locals', Load(), lineno=329, col_offset=7), [], [], None, None, lineno=329, col_offset=7), None, lineno=324, col_offset=12)], lineno=322, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), 'assertEqual', Load(), lineno=330, col_offset=8), [Call(Call(Name('makeAddPair', Load(), lineno=330, col_offset=25), [Tuple([Num(1, lineno=330, col_offset=38), Num(2, lineno=330, col_offset=41)], Load(), lineno=330, col_offset=38)], [], None, None, lineno=330, col_offset=25), [Tuple([Num(100, lineno=330, col_offset=46), Num(200, lineno=330, col_offset=51)], Load(), lineno=330, col_offset=46)], [], None, None, lineno=330, col_offset=25), Tuple([Num(101, lineno=330, col_offset=59), Num(202, lineno=330, col_offset=63)], Load(), lineno=330, col_offset=59)], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8)], [], lineno=306, col_offset=4), FunctionDef('testScopeOfGlobalStmt', arguments([Name('self', Param(), lineno=332, col_offset=30)], None, None, []), [Exec(Str('# I\nx = 7\ndef f():\n    x = 1\n    def g():\n        global x\n        def i():\n            def h():\n                return x\n            return h()\n        return i()\n    return g()\nself.assertEqual(f(), 7)\nself.assertEqual(x, 7)\n\n# II\nx = 7\ndef f():\n    x = 1\n    def g():\n        x = 2\n        def i():\n            def h():\n                return x\n            return h()\n        return i()\n    return g()\nself.assertEqual(f(), 2)\nself.assertEqual(x, 7)\n\n# III\nx = 7\ndef f():\n    x = 1\n    def g():\n        global x\n        x = 2\n        def i():\n            def h():\n                return x\n            return h()\n        return i()\n    return g()\nself.assertEqual(f(), 2)\nself.assertEqual(x, 2)\n\n# IV\nx = 7\ndef f():\n    x = 3\n    def g():\n        global x\n        x = 2\n        def i():\n            def h():\n                return x\n            return h()\n        return i()\n    return g()\nself.assertEqual(f(), 2)\nself.assertEqual(x, 2)\n\n# XXX what about global statements in class blocks?\n# do they affect methods?\n\nx = 12\nclass Global:\n    global x\n    x = 13\n    def set(self, val):\n        x = val\n    def get(self):\n        return x\n\ng = Global()\nself.assertEqual(g.get(), 13)\ng.set(15)\nself.assertEqual(g.get(), 13)\n', lineno=414, col_offset=-1), None, None, lineno=335, col_offset=8)], [], lineno=332, col_offset=4), FunctionDef('testLeaks', arguments([Name('self', Param(), lineno=416, col_offset=18)], None, None, []), [ClassDef('Foo', [], [Assign([Name('count', Store(), lineno=419, col_offset=12)], Num(0, lineno=419, col_offset=20), lineno=419, col_offset=12), FunctionDef('__init__', arguments([Name('self', Param(), lineno=421, col_offset=25)], None, None, []), [AugAssign(Attribute(Name('Foo', Load(), lineno=422, col_offset=16), 'count', Store(), lineno=422, col_offset=16), Add(), Num(1, lineno=422, col_offset=29), lineno=422, col_offset=16)], [], lineno=421, col_offset=12), FunctionDef('__del__', arguments([Name('self', Param(), lineno=424, col_offset=24)], None, None, []), [AugAssign(Attribute(Name('Foo', Load(), lineno=425, col_offset=16), 'count', Store(), lineno=425, col_offset=16), Sub(), Num(1, lineno=425, col_offset=29), lineno=425, col_offset=16)], [], lineno=424, col_offset=12)], [], lineno=418, col_offset=8), FunctionDef('f1', arguments([], None, None, []), [Assign([Name('x', Store(), lineno=428, col_offset=12)], Call(Name('Foo', Load(), lineno=428, col_offset=16), [], [], None, None, lineno=428, col_offset=16), lineno=428, col_offset=12), FunctionDef('f2', arguments([], None, None, []), [Return(Name('x', Load(), lineno=430, col_offset=23), lineno=430, col_offset=16)], [], lineno=429, col_offset=12), Expr(Call(Name('f2', Load(), lineno=431, col_offset=12), [], [], None, None, lineno=431, col_offset=12), lineno=431, col_offset=12)], [], lineno=427, col_offset=8), For(Name('i', Store(), lineno=433, col_offset=12), Call(Name('range', Load(), lineno=433, col_offset=17), [Num(100, lineno=433, col_offset=23)], [], None, None, lineno=433, col_offset=17), [Expr(Call(Name('f1', Load(), lineno=434, col_offset=12), [], [], None, None, lineno=434, col_offset=12), lineno=434, col_offset=12)], [], lineno=433, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=436, col_offset=8), 'assertEqual', Load(), lineno=436, col_offset=8), [Attribute(Name('Foo', Load(), lineno=436, col_offset=25), 'count', Load(), lineno=436, col_offset=25), Num(0, lineno=436, col_offset=36)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8)], [], lineno=416, col_offset=4), FunctionDef('testClassAndGlobal', arguments([Name('self', Param(), lineno=438, col_offset=27)], None, None, []), [Exec(Str("def test(x):\n    class Foo:\n        global x\n        def __call__(self, y):\n            return x + y\n    return Foo()\n\nx = 0\nself.assertEqual(test(6)(2), 8)\nx = -1\nself.assertEqual(test(3)(2), 5)\n\nlooked_up_by_load_name = False\nclass X:\n    # Implicit globals inside classes are be looked up by LOAD_NAME, not\n    # LOAD_GLOBAL.\n    locals()['looked_up_by_load_name'] = True\n    passed = looked_up_by_load_name\n\nself.assertTrue(X.passed)\n", lineno=461, col_offset=-1), None, None, lineno=440, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('testLocalsFunction', arguments([Name('self', Param(), lineno=463, col_offset=27)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=465, col_offset=14)], None, None, []), [FunctionDef('g', arguments([Name('y', Param(), lineno=466, col_offset=18)], None, None, []), [FunctionDef('h', arguments([Name('z', Param(), lineno=467, col_offset=22)], None, None, []), [Return(BinOp(Name('y', Load(), lineno=468, col_offset=27), Add(), Name('z', Load(), lineno=468, col_offset=31), lineno=468, col_offset=27), lineno=468, col_offset=20)], [], lineno=467, col_offset=16), Assign([Name('w', Store(), lineno=469, col_offset=16)], BinOp(Name('x', Load(), lineno=469, col_offset=20), Add(), Name('y', Load(), lineno=469, col_offset=24), lineno=469, col_offset=20), lineno=469, col_offset=16), AugAssign(Name('y', Store(), lineno=470, col_offset=16), Add(), Num(3, lineno=470, col_offset=21), lineno=470, col_offset=16), Return(Call(Name('locals', Load(), lineno=471, col_offset=23), [], [], None, None, lineno=471, col_offset=23), lineno=471, col_offset=16)], [], lineno=466, col_offset=12), Return(Name('g', Load(), lineno=472, col_offset=19), lineno=472, col_offset=12)], [], lineno=465, col_offset=8), Assign([Name('d', Store(), lineno=474, col_offset=8)], Call(Call(Name('f', Load(), lineno=474, col_offset=12), [Num(2, lineno=474, col_offset=14)], [], None, None, lineno=474, col_offset=12), [Num(4, lineno=474, col_offset=17)], [], None, None, lineno=474, col_offset=12), lineno=474, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=475, col_offset=8), 'assertIn', Load(), lineno=475, col_offset=8), [Str('h', lineno=475, col_offset=22), Name('d', Load(), lineno=475, col_offset=27)], [], None, None, lineno=475, col_offset=8), lineno=475, col_offset=8), Delete([Subscript(Name('d', Load(), lineno=476, col_offset=12), Index(Str('h', lineno=476, col_offset=14)), Del(), lineno=476, col_offset=12)], lineno=476, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=477, col_offset=8), 'assertEqual', Load(), lineno=477, col_offset=8), [Name('d', Load(), lineno=477, col_offset=25), Dict([Str('x', lineno=477, col_offset=29), Str('y', lineno=477, col_offset=37), Str('w', lineno=477, col_offset=45)], [Num(2, lineno=477, col_offset=34), Num(7, lineno=477, col_offset=42), Num(6, lineno=477, col_offset=50)], lineno=477, col_offset=28)], [], None, None, lineno=477, col_offset=8), lineno=477, col_offset=8)], [], lineno=463, col_offset=4), FunctionDef('testLocalsClass', arguments([Name('self', Param(), lineno=479, col_offset=24)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=490, col_offset=14)], None, None, []), [ClassDef('C', [], [Assign([Name('x', Store(), lineno=492, col_offset=16)], Num(12, lineno=492, col_offset=20), lineno=492, col_offset=16), FunctionDef('m', arguments([Name('self', Param(), lineno=493, col_offset=22)], None, None, []), [Return(Name('x', Load(), lineno=494, col_offset=27), lineno=494, col_offset=20)], [], lineno=493, col_offset=16), Expr(Call(Name('locals', Load(), lineno=495, col_offset=16), [], [], None, None, lineno=495, col_offset=16), lineno=495, col_offset=16)], [], lineno=491, col_offset=12), Return(Name('C', Load(), lineno=496, col_offset=19), lineno=496, col_offset=12)], [], lineno=490, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=498, col_offset=8), 'assertEqual', Load(), lineno=498, col_offset=8), [Attribute(Call(Name('f', Load(), lineno=498, col_offset=25), [Num(1, lineno=498, col_offset=27)], [], None, None, lineno=498, col_offset=25), 'x', Load(), lineno=498, col_offset=25), Num(12, lineno=498, col_offset=33)], [], None, None, lineno=498, col_offset=8), lineno=498, col_offset=8), FunctionDef('f', arguments([Name('x', Param(), lineno=500, col_offset=14)], None, None, []), [ClassDef('C', [], [Assign([Name('y', Store(), lineno=502, col_offset=16)], Name('x', Load(), lineno=502, col_offset=20), lineno=502, col_offset=16), FunctionDef('m', arguments([Name('self', Param(), lineno=503, col_offset=22)], None, None, []), [Return(Name('x', Load(), lineno=504, col_offset=27), lineno=504, col_offset=20)], [], lineno=503, col_offset=16), Assign([Name('z', Store(), lineno=505, col_offset=16)], Call(Name('list', Load(), lineno=505, col_offset=20), [Call(Name('locals', Load(), lineno=505, col_offset=25), [], [], None, None, lineno=505, col_offset=25)], [], None, None, lineno=505, col_offset=20), lineno=505, col_offset=16)], [], lineno=501, col_offset=12), Return(Name('C', Load(), lineno=506, col_offset=19), lineno=506, col_offset=12)], [], lineno=500, col_offset=8), Assign([Name('varnames', Store(), lineno=508, col_offset=8)], Attribute(Call(Name('f', Load(), lineno=508, col_offset=19), [Num(1, lineno=508, col_offset=21)], [], None, None, lineno=508, col_offset=19), 'z', Load(), lineno=508, col_offset=19), lineno=508, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=509, col_offset=8), 'assertNotIn', Load(), lineno=509, col_offset=8), [Str('x', lineno=509, col_offset=25), Name('varnames', Load(), lineno=509, col_offset=30)], [], None, None, lineno=509, col_offset=8), lineno=509, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=8), 'assertIn', Load(), lineno=510, col_offset=8), [Str('y', lineno=510, col_offset=22), Name('varnames', Load(), lineno=510, col_offset=27)], [], None, None, lineno=510, col_offset=8), lineno=510, col_offset=8)], [], lineno=479, col_offset=4), FunctionDef('testLocalsClass_WithTrace', arguments([Name('self', Param(), lineno=512, col_offset=34)], None, None, []), [Import([alias('sys', None)], lineno=517, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=518, col_offset=8), 'settrace', Load(), lineno=518, col_offset=8), [Lambda(arguments([Name('a', Param(), lineno=518, col_offset=28), Name('b', Param(), lineno=518, col_offset=30), Name('c', Param(), lineno=518, col_offset=32)], None, None, []), Name('None', Load(), lineno=518, col_offset=34), lineno=518, col_offset=21)], [], None, None, lineno=518, col_offset=8), lineno=518, col_offset=8), TryFinally([Assign([Name('x', Store(), lineno=520, col_offset=12)], Num(12, lineno=520, col_offset=16), lineno=520, col_offset=12), ClassDef('C', [], [FunctionDef('f', arguments([Name('self', Param(), lineno=523, col_offset=22)], None, None, []), [Return(Name('x', Load(), lineno=524, col_offset=27), lineno=524, col_offset=20)], [], lineno=523, col_offset=16)], [], lineno=522, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=526, col_offset=12), 'assertEqual', Load(), lineno=526, col_offset=12), [Name('x', Load(), lineno=526, col_offset=29), Num(12, lineno=526, col_offset=32)], [], None, None, lineno=526, col_offset=12), lineno=526, col_offset=12)], [Expr(Call(Attribute(Name('sys', Load(), lineno=528, col_offset=12), 'settrace', Load(), lineno=528, col_offset=12), [Name('None', Load(), lineno=528, col_offset=25)], [], None, None, lineno=528, col_offset=12), lineno=528, col_offset=12)], lineno=519, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('testBoundAndFree', arguments([Name('self', Param(), lineno=530, col_offset=25)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=533, col_offset=14)], None, None, []), [ClassDef('C', [], [FunctionDef('m', arguments([Name('self', Param(), lineno=535, col_offset=22)], None, None, []), [Return(Name('x', Load(), lineno=536, col_offset=27), lineno=536, col_offset=20)], [], lineno=535, col_offset=16), Assign([Name('a', Store(), lineno=537, col_offset=16)], Name('x', Load(), lineno=537, col_offset=20), lineno=537, col_offset=16)], [], lineno=534, col_offset=12), Return(Name('C', Load(), lineno=538, col_offset=19), lineno=538, col_offset=12)], [], lineno=533, col_offset=8), Assign([Name('inst', Store(), lineno=540, col_offset=8)], Call(Call(Name('f', Load(), lineno=540, col_offset=15), [Num(3, lineno=540, col_offset=17)], [], None, None, lineno=540, col_offset=15), [], [], None, None, lineno=540, col_offset=15), lineno=540, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=541, col_offset=8), 'assertEqual', Load(), lineno=541, col_offset=8), [Attribute(Name('inst', Load(), lineno=541, col_offset=25), 'a', Load(), lineno=541, col_offset=25), Call(Attribute(Name('inst', Load(), lineno=541, col_offset=33), 'm', Load(), lineno=541, col_offset=33), [], [], None, None, lineno=541, col_offset=33)], [], None, None, lineno=541, col_offset=8), lineno=541, col_offset=8)], [], lineno=530, col_offset=4), FunctionDef('testInteractionWithTraceFunc', arguments([Name('self', Param(), lineno=543, col_offset=37)], None, None, []), [Import([alias('sys', None)], lineno=545, col_offset=8), FunctionDef('tracer', arguments([Name('a', Param(), lineno=546, col_offset=19), Name('b', Param(), lineno=546, col_offset=21), Name('c', Param(), lineno=546, col_offset=23)], None, None, []), [Return(Name('tracer', Load(), lineno=547, col_offset=19), lineno=547, col_offset=12)], [], lineno=546, col_offset=8), FunctionDef('adaptgetter', arguments([Name('name', Param(), lineno=549, col_offset=24), Name('klass', Param(), lineno=549, col_offset=30), Name('getter', Param(), lineno=549, col_offset=37)], None, None, []), [Assign([Tuple([Name('kind', Store(), lineno=550, col_offset=12), Name('des', Store(), lineno=550, col_offset=18)], Store(), lineno=550, col_offset=12)], Name('getter', Load(), lineno=550, col_offset=24), lineno=550, col_offset=12), If(Compare(Name('kind', Load(), lineno=551, col_offset=15), [Eq()], [Num(1, lineno=551, col_offset=23)], lineno=551, col_offset=15), [If(Compare(Name('des', Load(), lineno=552, col_offset=19), [Eq()], [Str('', lineno=552, col_offset=26)], lineno=552, col_offset=19), [Assign([Name('des', Store(), lineno=553, col_offset=20)], BinOp(Str('_%s__%s', lineno=553, col_offset=26), Mod(), Tuple([Attribute(Name('klass', Load(), lineno=553, col_offset=39), '__name__', Load(), lineno=553, col_offset=39), Name('name', Load(), lineno=553, col_offset=55)], Load(), lineno=553, col_offset=39), lineno=553, col_offset=26), lineno=553, col_offset=20)], [], lineno=552, col_offset=16), Return(Lambda(arguments([Name('obj', Param(), lineno=554, col_offset=30)], None, None, []), Call(Name('getattr', Load(), lineno=554, col_offset=35), [Name('obj', Load(), lineno=554, col_offset=43), Name('des', Load(), lineno=554, col_offset=48)], [], None, None, lineno=554, col_offset=35), lineno=554, col_offset=23), lineno=554, col_offset=16)], [], lineno=551, col_offset=12)], [], lineno=549, col_offset=8), ClassDef('TestClass', [], [Pass( lineno=557, col_offset=12)], [], lineno=556, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=559, col_offset=8), 'settrace', Load(), lineno=559, col_offset=8), [Name('tracer', Load(), lineno=559, col_offset=21)], [], None, None, lineno=559, col_offset=8), lineno=559, col_offset=8), Expr(Call(Name('adaptgetter', Load(), lineno=560, col_offset=8), [Str('foo', lineno=560, col_offset=20), Name('TestClass', Load(), lineno=560, col_offset=27), Tuple([Num(1, lineno=560, col_offset=39), Str('', lineno=560, col_offset=42)], Load(), lineno=560, col_offset=39)], [], None, None, lineno=560, col_offset=8), lineno=560, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=561, col_offset=8), 'settrace', Load(), lineno=561, col_offset=8), [Name('None', Load(), lineno=561, col_offset=21)], [], None, None, lineno=561, col_offset=8), lineno=561, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=563, col_offset=8), 'assertRaises', Load(), lineno=563, col_offset=8), [Name('TypeError', Load(), lineno=563, col_offset=26), Attribute(Name('sys', Load(), lineno=563, col_offset=37), 'settrace', Load(), lineno=563, col_offset=37)], [], None, None, lineno=563, col_offset=8), lineno=563, col_offset=8)], [], lineno=543, col_offset=4), FunctionDef('testEvalExecFreeVars', arguments([Name('self', Param(), lineno=565, col_offset=29)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=567, col_offset=14)], None, None, []), [Return(Lambda(arguments([], None, None, []), BinOp(Name('x', Load(), lineno=568, col_offset=27), Add(), Num(1, lineno=568, col_offset=31), lineno=568, col_offset=27), lineno=568, col_offset=19), lineno=568, col_offset=12)], [], lineno=567, col_offset=8), Assign([Name('g', Store(), lineno=570, col_offset=8)], Call(Name('f', Load(), lineno=570, col_offset=12), [Num(3, lineno=570, col_offset=14)], [], None, None, lineno=570, col_offset=12), lineno=570, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=571, col_offset=8), 'assertRaises', Load(), lineno=571, col_offset=8), [Name('TypeError', Load(), lineno=571, col_offset=26), Name('eval', Load(), lineno=571, col_offset=37), Attribute(Name('g', Load(), lineno=571, col_offset=43), 'func_code', Load(), lineno=571, col_offset=43)], [], None, None, lineno=571, col_offset=8), lineno=571, col_offset=8), TryExcept([Exec(Attribute(Name('g', Load(), lineno=574, col_offset=17), 'func_code', Load(), lineno=574, col_offset=17), Dict([], [], lineno=574, col_offset=32), None, lineno=574, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=575, col_offset=15), None, [Pass( lineno=576, col_offset=12)], lineno=575, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=578, col_offset=12), 'fail', Load(), lineno=578, col_offset=12), [Str('exec should have failed, because code contained free vars', lineno=578, col_offset=22)], [], None, None, lineno=578, col_offset=12), lineno=578, col_offset=12)], lineno=573, col_offset=8)], [], lineno=565, col_offset=4), FunctionDef('testListCompLocalVars', arguments([Name('self', Param(), lineno=580, col_offset=30)], None, None, []), [TryExcept([Print(None, [Name('bad', Load(), lineno=583, col_offset=18)], True, lineno=583, col_offset=12)], [ExceptHandler(Name('NameError', Load(), lineno=584, col_offset=15), None, [Pass( lineno=585, col_offset=12)], lineno=584, col_offset=8)], [Print(None, [Str('bad should not be defined', lineno=587, col_offset=18)], True, lineno=587, col_offset=12)], lineno=582, col_offset=8), FunctionDef('x', arguments([], None, None, []), [Expr(ListComp(Name('bad', Load(), lineno=590, col_offset=13), [comprehension(Name('s', Store(), lineno=590, col_offset=21), Str('a b', lineno=590, col_offset=26), []), comprehension(Name('bad', Store(), lineno=590, col_offset=36), Call(Attribute(Name('s', Load(), lineno=590, col_offset=43), 'split', Load(), lineno=590, col_offset=43), [], [], None, None, lineno=590, col_offset=43), [])], lineno=590, col_offset=13), lineno=590, col_offset=12)], [], lineno=589, col_offset=8), Expr(Call(Name('x', Load(), lineno=592, col_offset=8), [], [], None, None, lineno=592, col_offset=8), lineno=592, col_offset=8), TryExcept([Print(None, [Name('bad', Load(), lineno=594, col_offset=18)], True, lineno=594, col_offset=12)], [ExceptHandler(Name('NameError', Load(), lineno=595, col_offset=15), None, [Pass( lineno=596, col_offset=12)], lineno=595, col_offset=8)], [], lineno=593, col_offset=8)], [], lineno=580, col_offset=4), FunctionDef('testEvalFreeVars', arguments([Name('self', Param(), lineno=598, col_offset=25)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=600, col_offset=14)], None, None, []), [FunctionDef('g', arguments([], None, None, []), [Expr(Name('x', Load(), lineno=602, col_offset=16), lineno=602, col_offset=16), Expr(Call(Name('eval', Load(), lineno=603, col_offset=16), [Str('x + 1', lineno=603, col_offset=21)], [], None, None, lineno=603, col_offset=16), lineno=603, col_offset=16)], [], lineno=601, col_offset=12), Return(Name('g', Load(), lineno=604, col_offset=19), lineno=604, col_offset=12)], [], lineno=600, col_offset=8), Expr(Call(Call(Name('f', Load(), lineno=606, col_offset=8), [Num(4, lineno=606, col_offset=10)], [], None, None, lineno=606, col_offset=8), [], [], None, None, lineno=606, col_offset=8), lineno=606, col_offset=8)], [], lineno=598, col_offset=4), FunctionDef('testFreeingCell', arguments([Name('self', Param(), lineno=608, col_offset=24)], None, None, []), [ClassDef('Special', [], [FunctionDef('__del__', arguments([Name('self', Param(), lineno=612, col_offset=24)], None, None, []), [Expr(Call(Name('nestedcell_get', Load(), lineno=613, col_offset=16), [], [], None, None, lineno=613, col_offset=16), lineno=613, col_offset=16)], [], lineno=612, col_offset=12)], [], lineno=611, col_offset=8), FunctionDef('f', arguments([], None, None, []), [Global(['nestedcell_get'], lineno=616, col_offset=12), FunctionDef('nestedcell_get', arguments([], None, None, []), [Return(Name('c', Load(), lineno=618, col_offset=23), lineno=618, col_offset=16)], [], lineno=617, col_offset=12), Assign([Name('c', Store(), lineno=620, col_offset=12)], Tuple([Call(Name('Special', Load(), lineno=620, col_offset=17), [], [], None, None, lineno=620, col_offset=17)], Load(), lineno=620, col_offset=17), lineno=620, col_offset=12), Assign([Name('c', Store(), lineno=621, col_offset=12)], Num(2, lineno=621, col_offset=16), lineno=621, col_offset=12)], [], lineno=615, col_offset=8), Expr(Call(Name('f', Load(), lineno=623, col_offset=8), [], [], None, None, lineno=623, col_offset=8), lineno=623, col_offset=8)], [], lineno=608, col_offset=4), FunctionDef('testGlobalInParallelNestedFunctions', arguments([Name('self', Param(), lineno=625, col_offset=44)], None, None, []), [Assign([Name('CODE', Store(), lineno=630, col_offset=8)], Str('def f():\n    y = 1\n    def g():\n        global y\n        return y\n    def h():\n        return y + 1\n    return g, h\n\ny = 9\ng, h = f()\nresult9 = g()\nresult2 = h()\n', lineno=643, col_offset=-1), lineno=630, col_offset=8), Assign([Name('local_ns', Store(), lineno=644, col_offset=8)], Dict([], [], lineno=644, col_offset=19), lineno=644, col_offset=8), Assign([Name('global_ns', Store(), lineno=645, col_offset=8)], Dict([], [], lineno=645, col_offset=20), lineno=645, col_offset=8), Exec(Name('CODE', Load(), lineno=646, col_offset=13), Name('local_ns', Load(), lineno=646, col_offset=21), Name('global_ns', Load(), lineno=646, col_offset=31), lineno=646, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=647, col_offset=8), 'assertEqual', Load(), lineno=647, col_offset=8), [Num(2, lineno=647, col_offset=25), Subscript(Name('global_ns', Load(), lineno=647, col_offset=28), Index(Str('result2', lineno=647, col_offset=38)), Load(), lineno=647, col_offset=28)], [], None, None, lineno=647, col_offset=8), lineno=647, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=648, col_offset=8), 'assertEqual', Load(), lineno=648, col_offset=8), [Num(9, lineno=648, col_offset=25), Subscript(Name('global_ns', Load(), lineno=648, col_offset=28), Index(Str('result9', lineno=648, col_offset=38)), Load(), lineno=648, col_offset=28)], [], None, None, lineno=648, col_offset=8), lineno=648, col_offset=8)], [], lineno=625, col_offset=4), FunctionDef('testTopIsNotSignificant', arguments([Name('self', Param(), lineno=650, col_offset=32)], None, None, []), [FunctionDef('top', arguments([Name('a', Param(), lineno=652, col_offset=16)], None, None, []), [Pass( lineno=653, col_offset=12)], [], lineno=652, col_offset=8), FunctionDef('b', arguments([], None, None, []), [Global(['a'], lineno=655, col_offset=12)], [], lineno=654, col_offset=8)], [], lineno=650, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [With(Call(Name('check_warnings', Load(), lineno=659, col_offset=9), [Tuple([Str('import \\* only allowed at module level', lineno=659, col_offset=25), Name('SyntaxWarning', Load(), lineno=660, col_offset=25)], Load(), lineno=659, col_offset=25)], [], None, None, lineno=659, col_offset=9), None, [Expr(Call(Name('run_unittest', Load(), lineno=661, col_offset=8), [Name('ScopeTests', Load(), lineno=661, col_offset=21)], [], None, None, lineno=661, col_offset=8), lineno=661, col_offset=8)], lineno=659, col_offset=9)], [], lineno=658, col_offset=0), If(Compare(Name('__name__', Load(), lineno=663, col_offset=3), [Eq()], [Str('__main__', lineno=663, col_offset=15)], lineno=663, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=664, col_offset=4), [], [], None, None, lineno=664, col_offset=4), lineno=664, col_offset=4)], [], lineno=663, col_offset=0)])
