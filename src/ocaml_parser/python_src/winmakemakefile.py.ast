Module([Import([alias('sys', None), alias('os', None)], lineno=1, col_offset=0), Assign([Name('WINMAINTEMPLATE', Store(), lineno=4, col_offset=0)], Str('\n#include <windows.h>\n\nint WINAPI WinMain(\n    HINSTANCE hInstance,      // handle to current instance\n    HINSTANCE hPrevInstance,  // handle to previous instance\n    LPSTR lpCmdLine,          // pointer to command line\n    int nCmdShow              // show state of window\n    )\n{\n    extern int Py_FrozenMain(int, char **);\n    PyImport_FrozenModules = _PyImport_FrozenModules;\n    return Py_FrozenMain(__argc, __argv);\n}\n', lineno=18, col_offset=-1), lineno=4, col_offset=0), Assign([Name('SERVICETEMPLATE', Store(), lineno=20, col_offset=0)], Str('\nextern int PythonService_main(int, char **);\n\nint main( int argc, char **argv)\n{\n    PyImport_FrozenModules = _PyImport_FrozenModules;\n    return PythonService_main(argc, argv);\n}\n', lineno=28, col_offset=-1), lineno=20, col_offset=0), Assign([Name('subsystem_details', Store(), lineno=30, col_offset=0)], Dict([Str('console', lineno=32, col_offset=4), Str('windows', lineno=33, col_offset=4), Str('service', lineno=34, col_offset=4), Str('com_dll', lineno=35, col_offset=4)], [Tuple([Name('None', Load(), lineno=32, col_offset=24), Num(1, lineno=32, col_offset=49), Num(0, lineno=32, col_offset=68)], Load(), lineno=32, col_offset=24), Tuple([Name('WINMAINTEMPLATE', Load(), lineno=33, col_offset=24), Num(1, lineno=33, col_offset=49), Num(0, lineno=33, col_offset=68)], Load(), lineno=33, col_offset=24), Tuple([Name('SERVICETEMPLATE', Load(), lineno=34, col_offset=24), Num(0, lineno=34, col_offset=49), Num(0, lineno=34, col_offset=68)], Load(), lineno=34, col_offset=24), Tuple([Str('', lineno=35, col_offset=24), Num(0, lineno=35, col_offset=49), Num(1, lineno=35, col_offset=68)], Load(), lineno=35, col_offset=24)], lineno=30, col_offset=20), lineno=30, col_offset=0), FunctionDef('get_custom_entry_point', arguments([Name('subsystem', Param(), lineno=38, col_offset=27)], None, None, []), [TryExcept([Return(Subscript(Subscript(Name('subsystem_details', Load(), lineno=40, col_offset=15), Index(Name('subsystem', Load(), lineno=40, col_offset=33)), Load(), lineno=40, col_offset=15), Slice(None, Num(2, lineno=40, col_offset=45), None), Load(), lineno=40, col_offset=15), lineno=40, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=41, col_offset=11), None, [Raise(Name('ValueError', Load(), lineno=42, col_offset=14), BinOp(Str('The subsystem %s is not known', lineno=42, col_offset=26), Mod(), Name('subsystem', Load(), lineno=42, col_offset=60), lineno=42, col_offset=26), None, lineno=42, col_offset=8)], lineno=41, col_offset=4)], [], lineno=39, col_offset=4)], [], lineno=38, col_offset=0), FunctionDef('makemakefile', arguments([Name('outfp', Param(), lineno=45, col_offset=17), Name('vars', Param(), lineno=45, col_offset=24), Name('files', Param(), lineno=45, col_offset=30), Name('target', Param(), lineno=45, col_offset=37)], None, None, []), [Assign([Name('save', Store(), lineno=46, col_offset=4)], Attribute(Name('sys', Load(), lineno=46, col_offset=11), 'stdout', Load(), lineno=46, col_offset=11), lineno=46, col_offset=4), TryFinally([Assign([Attribute(Name('sys', Load(), lineno=48, col_offset=8), 'stdout', Store(), lineno=48, col_offset=8)], Name('outfp', Load(), lineno=48, col_offset=21), lineno=48, col_offset=8), Expr(Call(Name('realwork', Load(), lineno=49, col_offset=8), [Name('vars', Load(), lineno=49, col_offset=17), Name('files', Load(), lineno=49, col_offset=23), Name('target', Load(), lineno=49, col_offset=30)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], [Assign([Attribute(Name('sys', Load(), lineno=51, col_offset=8), 'stdout', Store(), lineno=51, col_offset=8)], Name('save', Load(), lineno=51, col_offset=21), lineno=51, col_offset=8)], lineno=47, col_offset=4)], [], lineno=45, col_offset=0), FunctionDef('realwork', arguments([Name('vars', Param(), lineno=53, col_offset=13), Name('moddefns', Param(), lineno=53, col_offset=19), Name('target', Param(), lineno=53, col_offset=29)], None, None, []), [Assign([Name('version_suffix', Store(), lineno=54, col_offset=4)], BinOp(Str('%r%r', lineno=54, col_offset=21), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=54, col_offset=30), 'version_info', Load(), lineno=54, col_offset=30), Slice(None, Num(2, lineno=54, col_offset=48), None), Load(), lineno=54, col_offset=30), lineno=54, col_offset=21), lineno=54, col_offset=4), Print(None, [Str('# Makefile for Microsoft Visual C++ generated by freeze.py script', lineno=55, col_offset=10)], True, lineno=55, col_offset=4), Print(None, [], True, lineno=56, col_offset=4), Print(None, [BinOp(Str('target = %s', lineno=57, col_offset=10), Mod(), Name('target', Load(), lineno=57, col_offset=26), lineno=57, col_offset=10)], True, lineno=57, col_offset=4), Print(None, [BinOp(Str('pythonhome = %s', lineno=58, col_offset=10), Mod(), Subscript(Name('vars', Load(), lineno=58, col_offset=30), Index(Str('prefix', lineno=58, col_offset=35)), Load(), lineno=58, col_offset=30), lineno=58, col_offset=10)], True, lineno=58, col_offset=4), Print(None, [], True, lineno=59, col_offset=4), Print(None, [Str('DEBUG=0 # Set to 1 to use the _d versions of Python.', lineno=60, col_offset=10)], True, lineno=60, col_offset=4), Print(None, [Str('!IF $(DEBUG)', lineno=61, col_offset=10)], True, lineno=61, col_offset=4), Print(None, [Str('debug_suffix=_d', lineno=62, col_offset=10)], True, lineno=62, col_offset=4), Print(None, [Str('c_debug=/Zi /Od /DDEBUG /D_DEBUG', lineno=63, col_offset=10)], True, lineno=63, col_offset=4), Print(None, [Str('l_debug=/DEBUG', lineno=64, col_offset=10)], True, lineno=64, col_offset=4), Print(None, [Str('temp_dir=Build\\Debug', lineno=65, col_offset=10)], True, lineno=65, col_offset=4), Print(None, [Str('!ELSE', lineno=66, col_offset=10)], True, lineno=66, col_offset=4), Print(None, [Str('debug_suffix=', lineno=67, col_offset=10)], True, lineno=67, col_offset=4), Print(None, [Str('c_debug=/Ox', lineno=68, col_offset=10)], True, lineno=68, col_offset=4), Print(None, [Str('l_debug=', lineno=69, col_offset=10)], True, lineno=69, col_offset=4), Print(None, [Str('temp_dir=Build\\Release', lineno=70, col_offset=10)], True, lineno=70, col_offset=4), Print(None, [Str('!ENDIF', lineno=71, col_offset=10)], True, lineno=71, col_offset=4), Print(None, [], True, lineno=72, col_offset=4), Print(None, [Str('# The following line assumes you have built Python using the standard instructions', lineno=74, col_offset=10)], True, lineno=74, col_offset=4), Print(None, [Str('# Otherwise fix the following line to point to the library.', lineno=75, col_offset=10)], True, lineno=75, col_offset=4), Print(None, [BinOp(Str('pythonlib = "$(pythonhome)/pcbuild/python%s$(debug_suffix).lib"', lineno=76, col_offset=10), Mod(), Name('version_suffix', Load(), lineno=76, col_offset=78), lineno=76, col_offset=10)], True, lineno=76, col_offset=4), Print(None, [], True, lineno=77, col_offset=4), Assign([Name('target_link_flags', Store(), lineno=84, col_offset=4)], Str('', lineno=84, col_offset=24), lineno=84, col_offset=4), Assign([Name('target_ext', Store(), lineno=85, col_offset=4)], Str('.exe', lineno=85, col_offset=17), lineno=85, col_offset=4), If(Subscript(Subscript(Name('subsystem_details', Load(), lineno=86, col_offset=7), Index(Subscript(Name('vars', Load(), lineno=86, col_offset=25), Index(Str('subsystem', lineno=86, col_offset=30)), Load(), lineno=86, col_offset=25)), Load(), lineno=86, col_offset=7), Index(Num(2, lineno=86, col_offset=44)), Load(), lineno=86, col_offset=7), [Assign([Name('target_link_flags', Store(), lineno=87, col_offset=8)], Str('-dll', lineno=87, col_offset=28), lineno=87, col_offset=8), Assign([Name('target_ext', Store(), lineno=88, col_offset=8)], Str('.dll', lineno=88, col_offset=21), lineno=88, col_offset=8)], [], lineno=86, col_offset=4), Print(None, [BinOp(Str('# As the target uses Python%s.dll, we must use this compiler option!', lineno=91, col_offset=10), Mod(), Name('version_suffix', Load(), lineno=91, col_offset=83), lineno=91, col_offset=10)], True, lineno=91, col_offset=4), Print(None, [Str('cdl = /MD', lineno=92, col_offset=10)], True, lineno=92, col_offset=4), Print(None, [], True, lineno=93, col_offset=4), Print(None, [BinOp(Str('all: $(target)$(debug_suffix)%s', lineno=94, col_offset=10), Mod(), Name('target_ext', Load(), lineno=94, col_offset=47), lineno=94, col_offset=10)], True, lineno=94, col_offset=4), Print(None, [], True, lineno=95, col_offset=4), Print(None, [Str('$(temp_dir):', lineno=97, col_offset=10)], True, lineno=97, col_offset=4), Print(None, [Str('  if not exist $(temp_dir)\\. mkdir $(temp_dir)', lineno=98, col_offset=10)], True, lineno=98, col_offset=4), Print(None, [], True, lineno=99, col_offset=4), Assign([Name('objects', Store(), lineno=101, col_offset=4)], List([], Load(), lineno=101, col_offset=14), lineno=101, col_offset=4), Assign([Name('libs', Store(), lineno=102, col_offset=4)], List([Str('shell32.lib', lineno=102, col_offset=12), Str('comdlg32.lib', lineno=102, col_offset=27), Str('wsock32.lib', lineno=102, col_offset=43), Str('user32.lib', lineno=102, col_offset=58), Str('oleaut32.lib', lineno=102, col_offset=72)], Load(), lineno=102, col_offset=11), lineno=102, col_offset=4), For(Name('moddefn', Store(), lineno=103, col_offset=8), Name('moddefns', Load(), lineno=103, col_offset=19), [Print(None, [Str('# Module', lineno=104, col_offset=14), Attribute(Name('moddefn', Load(), lineno=104, col_offset=26), 'name', Load(), lineno=104, col_offset=26)], True, lineno=104, col_offset=8), For(Name('file', Store(), lineno=105, col_offset=12), Attribute(Name('moddefn', Load(), lineno=105, col_offset=20), 'sourceFiles', Load(), lineno=105, col_offset=20), [Assign([Name('base', Store(), lineno=106, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=106, col_offset=19), 'path', Load(), lineno=106, col_offset=19), 'basename', Load(), lineno=106, col_offset=19), [Name('file', Load(), lineno=106, col_offset=36)], [], None, None, lineno=106, col_offset=19), lineno=106, col_offset=12), Assign([Tuple([Name('base', Store(), lineno=107, col_offset=12), Name('ext', Store(), lineno=107, col_offset=18)], Store(), lineno=107, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=107, col_offset=24), 'path', Load(), lineno=107, col_offset=24), 'splitext', Load(), lineno=107, col_offset=24), [Name('base', Load(), lineno=107, col_offset=41)], [], None, None, lineno=107, col_offset=24), lineno=107, col_offset=12), Expr(Call(Attribute(Name('objects', Load(), lineno=108, col_offset=12), 'append', Load(), lineno=108, col_offset=12), [BinOp(Name('base', Load(), lineno=108, col_offset=27), Add(), Str('.obj', lineno=108, col_offset=34), lineno=108, col_offset=27)], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12), Print(None, [BinOp(Str('$(temp_dir)\\%s.obj: "%s"', lineno=109, col_offset=18), Mod(), Tuple([Name('base', Load(), lineno=109, col_offset=48), Name('file', Load(), lineno=109, col_offset=54)], Load(), lineno=109, col_offset=48), lineno=109, col_offset=18)], True, lineno=109, col_offset=12), Print(None, [Str('\t@$(CC) -c -nologo /Fo$* $(cdl) $(c_debug) /D BUILD_FREEZE', lineno=110, col_offset=18)], False, lineno=110, col_offset=12), Print(None, [Str('"-I$(pythonhome)/Include"  "-I$(pythonhome)/PC" \\', lineno=111, col_offset=18)], True, lineno=111, col_offset=12), Print(None, [Str('\t\t$(cflags) $(cdebug) $(cinclude) \\', lineno=112, col_offset=18)], True, lineno=112, col_offset=12), Assign([Name('extra', Store(), lineno=113, col_offset=12)], Call(Attribute(Name('moddefn', Load(), lineno=113, col_offset=20), 'GetCompilerOptions', Load(), lineno=113, col_offset=20), [], [], None, None, lineno=113, col_offset=20), lineno=113, col_offset=12), If(Name('extra', Load(), lineno=114, col_offset=15), [Print(None, [BinOp(Str('\t\t%s \\', lineno=115, col_offset=22), Mod(), Tuple([Call(Attribute(Str(' ', lineno=115, col_offset=37), 'join', Load(), lineno=115, col_offset=37), [Name('extra', Load(), lineno=115, col_offset=46)], [], None, None, lineno=115, col_offset=37)], Load(), lineno=115, col_offset=37), lineno=115, col_offset=22)], True, lineno=115, col_offset=16)], [], lineno=114, col_offset=12), Print(None, [BinOp(Str('\t\t"%s"', lineno=116, col_offset=18), Mod(), Name('file', Load(), lineno=116, col_offset=31), lineno=116, col_offset=18)], True, lineno=116, col_offset=12), Print(None, [], True, lineno=117, col_offset=12)], [], lineno=105, col_offset=8), For(Name('modlib', Store(), lineno=120, col_offset=12), Call(Attribute(Name('moddefn', Load(), lineno=120, col_offset=22), 'GetLinkerLibs', Load(), lineno=120, col_offset=22), [], [], None, None, lineno=120, col_offset=22), [If(Compare(Name('modlib', Load(), lineno=121, col_offset=15), [NotIn()], [Name('libs', Load(), lineno=121, col_offset=29)], lineno=121, col_offset=15), [Expr(Call(Attribute(Name('libs', Load(), lineno=122, col_offset=16), 'append', Load(), lineno=122, col_offset=16), [Name('modlib', Load(), lineno=122, col_offset=28)], [], None, None, lineno=122, col_offset=16), lineno=122, col_offset=16)], [], lineno=121, col_offset=12)], [], lineno=120, col_offset=8)], [], lineno=103, col_offset=4), Print(None, [Str('ADDN_LINK_FILES=', lineno=124, col_offset=10)], False, lineno=124, col_offset=4), For(Name('addn', Store(), lineno=125, col_offset=8), Subscript(Name('vars', Load(), lineno=125, col_offset=16), Index(Str('addn_link', lineno=125, col_offset=21)), Load(), lineno=125, col_offset=16), [Print(None, [BinOp(Str('"%s"', lineno=125, col_offset=41), Mod(), Name('addn', Load(), lineno=125, col_offset=51), lineno=125, col_offset=41)], False, lineno=125, col_offset=35)], [], lineno=125, col_offset=4), Print(None, [], True, lineno=126, col_offset=4), Print(None, [], True, lineno=126, col_offset=12), Print(None, [Str('OBJS=', lineno=128, col_offset=10)], False, lineno=128, col_offset=4), For(Name('obj', Store(), lineno=129, col_offset=8), Name('objects', Load(), lineno=129, col_offset=15), [Print(None, [BinOp(Str('"$(temp_dir)\\%s"', lineno=129, col_offset=30), Mod(), Name('obj', Load(), lineno=129, col_offset=52), lineno=129, col_offset=30)], False, lineno=129, col_offset=24)], [], lineno=129, col_offset=4), Print(None, [], True, lineno=130, col_offset=4), Print(None, [], True, lineno=130, col_offset=12), Print(None, [Str('LIBS=', lineno=132, col_offset=10)], False, lineno=132, col_offset=4), For(Name('lib', Store(), lineno=133, col_offset=8), Name('libs', Load(), lineno=133, col_offset=15), [Print(None, [BinOp(Str('"%s"', lineno=133, col_offset=27), Mod(), Name('lib', Load(), lineno=133, col_offset=37), lineno=133, col_offset=27)], False, lineno=133, col_offset=21)], [], lineno=133, col_offset=4), Print(None, [], True, lineno=134, col_offset=4), Print(None, [], True, lineno=134, col_offset=12), Print(None, [BinOp(Str('$(target)$(debug_suffix)%s: $(temp_dir) $(OBJS)', lineno=136, col_offset=10), Mod(), Name('target_ext', Load(), lineno=136, col_offset=63), lineno=136, col_offset=10)], True, lineno=136, col_offset=4), Print(None, [BinOp(Str('\tlink -out:$(target)$(debug_suffix)%s %s', lineno=137, col_offset=10), Mod(), Tuple([Name('target_ext', Load(), lineno=137, col_offset=57), Name('target_link_flags', Load(), lineno=137, col_offset=69)], Load(), lineno=137, col_offset=57), lineno=137, col_offset=10), Str('@<<', lineno=137, col_offset=89)], True, lineno=137, col_offset=4), Print(None, [Str('\t$(OBJS)', lineno=138, col_offset=10)], True, lineno=138, col_offset=4), Print(None, [Str('\t$(LIBS)', lineno=139, col_offset=10)], True, lineno=139, col_offset=4), Print(None, [Str('\t$(ADDN_LINK_FILES)', lineno=140, col_offset=10)], True, lineno=140, col_offset=4), Print(None, [Str('\t$(pythonlib) $(lcustom) $(l_debug)', lineno=141, col_offset=10)], True, lineno=141, col_offset=4), Print(None, [Str('\t$(resources)', lineno=142, col_offset=10)], True, lineno=142, col_offset=4), Print(None, [Str('<<', lineno=143, col_offset=10)], True, lineno=143, col_offset=4), Print(None, [], True, lineno=144, col_offset=4), Print(None, [Str('clean:', lineno=145, col_offset=10)], True, lineno=145, col_offset=4), Print(None, [Str('\t-rm -f *.obj', lineno=146, col_offset=10)], True, lineno=146, col_offset=4), Print(None, [Str('\t-rm -f $(target).exe', lineno=147, col_offset=10)], True, lineno=147, col_offset=4)], [], lineno=53, col_offset=0)])
