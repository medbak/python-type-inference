Module([Import([alias('datetime', None)], lineno=24, col_offset=0), Import([alias('unittest', None)], lineno=25, col_offset=0), Import([alias('sqlite3', 'sqlite')], lineno=26, col_offset=0), ClassDef('RegressionTests', [Attribute(Name('unittest', Load(), lineno=28, col_offset=22), 'TestCase', Load(), lineno=28, col_offset=22)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=29, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=30, col_offset=8), 'con', Store(), lineno=30, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=30, col_offset=19), 'connect', Load(), lineno=30, col_offset=19), [Str(':memory:', lineno=30, col_offset=34)], [], None, None, lineno=30, col_offset=19), lineno=30, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=32, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=33, col_offset=8), 'con', Load(), lineno=33, col_offset=8), 'close', Load(), lineno=33, col_offset=8), [], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8)], [], lineno=32, col_offset=4), FunctionDef('CheckPragmaUserVersion', arguments([Name('self', Param(), lineno=35, col_offset=31)], None, None, []), [Assign([Name('cur', Store(), lineno=37, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=37, col_offset=14), 'con', Load(), lineno=37, col_offset=14), 'cursor', Load(), lineno=37, col_offset=14), [], [], None, None, lineno=37, col_offset=14), lineno=37, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=38, col_offset=8), 'execute', Load(), lineno=38, col_offset=8), [Str('pragma user_version', lineno=38, col_offset=20)], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('CheckPragmaSchemaVersion', arguments([Name('self', Param(), lineno=40, col_offset=33)], None, None, []), [Assign([Name('con', Store(), lineno=42, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=42, col_offset=14), 'connect', Load(), lineno=42, col_offset=14), [Str(':memory:', lineno=42, col_offset=29)], [keyword('detect_types', Attribute(Name('sqlite', Load(), lineno=42, col_offset=54), 'PARSE_COLNAMES', Load(), lineno=42, col_offset=54))], None, None, lineno=42, col_offset=14), lineno=42, col_offset=8), TryFinally([Assign([Name('cur', Store(), lineno=44, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=44, col_offset=18), 'con', Load(), lineno=44, col_offset=18), 'cursor', Load(), lineno=44, col_offset=18), [], [], None, None, lineno=44, col_offset=18), lineno=44, col_offset=12), Expr(Call(Attribute(Name('cur', Load(), lineno=45, col_offset=12), 'execute', Load(), lineno=45, col_offset=12), [Str('pragma schema_version', lineno=45, col_offset=24)], [], None, None, lineno=45, col_offset=12), lineno=45, col_offset=12)], [Expr(Call(Attribute(Name('cur', Load(), lineno=47, col_offset=12), 'close', Load(), lineno=47, col_offset=12), [], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=12), Expr(Call(Attribute(Name('con', Load(), lineno=48, col_offset=12), 'close', Load(), lineno=48, col_offset=12), [], [], None, None, lineno=48, col_offset=12), lineno=48, col_offset=12)], lineno=43, col_offset=8)], [], lineno=40, col_offset=4), FunctionDef('CheckStatementReset', arguments([Name('self', Param(), lineno=50, col_offset=28)], None, None, []), [Assign([Name('con', Store(), lineno=54, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=54, col_offset=14), 'connect', Load(), lineno=54, col_offset=14), [Str(':memory:', lineno=54, col_offset=29)], [keyword('cached_statements', Num(5, lineno=54, col_offset=59))], None, None, lineno=54, col_offset=14), lineno=54, col_offset=8), Assign([Name('cursors', Store(), lineno=55, col_offset=8)], ListComp(Call(Attribute(Name('con', Load(), lineno=55, col_offset=19), 'cursor', Load(), lineno=55, col_offset=19), [], [], None, None, lineno=55, col_offset=19), [comprehension(Name('x', Store(), lineno=55, col_offset=36), Call(Name('xrange', Load(), lineno=55, col_offset=41), [Num(5, lineno=55, col_offset=48)], [], None, None, lineno=55, col_offset=41), [])], lineno=55, col_offset=19), lineno=55, col_offset=8), Expr(Call(Attribute(Subscript(Name('cursors', Load(), lineno=56, col_offset=8), Index(Num(0, lineno=56, col_offset=16)), Load(), lineno=56, col_offset=8), 'execute', Load(), lineno=56, col_offset=8), [Str('create table test(x)', lineno=56, col_offset=27)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8), For(Name('i', Store(), lineno=57, col_offset=12), Call(Name('range', Load(), lineno=57, col_offset=17), [Num(10, lineno=57, col_offset=23)], [], None, None, lineno=57, col_offset=17), [Expr(Call(Attribute(Subscript(Name('cursors', Load(), lineno=58, col_offset=12), Index(Num(0, lineno=58, col_offset=20)), Load(), lineno=58, col_offset=12), 'executemany', Load(), lineno=58, col_offset=12), [Str('insert into test(x) values (?)', lineno=58, col_offset=35), ListComp(Tuple([Name('x', Load(), lineno=58, col_offset=71)], Load(), lineno=58, col_offset=71), [comprehension(Name('x', Store(), lineno=58, col_offset=79), Call(Name('xrange', Load(), lineno=58, col_offset=84), [Num(10, lineno=58, col_offset=91)], [], None, None, lineno=58, col_offset=84), [])], lineno=58, col_offset=70)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], [], lineno=57, col_offset=8), For(Name('i', Store(), lineno=60, col_offset=12), Call(Name('range', Load(), lineno=60, col_offset=17), [Num(5, lineno=60, col_offset=23)], [], None, None, lineno=60, col_offset=17), [Expr(Call(Attribute(Subscript(Name('cursors', Load(), lineno=61, col_offset=12), Index(Name('i', Load(), lineno=61, col_offset=20)), Load(), lineno=61, col_offset=12), 'execute', Load(), lineno=61, col_offset=12), [BinOp(BinOp(Str(' ', lineno=61, col_offset=31), Mult(), Name('i', Load(), lineno=61, col_offset=37), lineno=61, col_offset=31), Add(), Str('select x from test', lineno=61, col_offset=41), lineno=61, col_offset=31)], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12)], [], lineno=60, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=63, col_offset=8), 'rollback', Load(), lineno=63, col_offset=8), [], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('CheckColumnNameWithSpaces', arguments([Name('self', Param(), lineno=65, col_offset=34)], None, None, []), [Assign([Name('cur', Store(), lineno=66, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=66, col_offset=14), 'con', Load(), lineno=66, col_offset=14), 'cursor', Load(), lineno=66, col_offset=14), [], [], None, None, lineno=66, col_offset=14), lineno=66, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=67, col_offset=8), 'execute', Load(), lineno=67, col_offset=8), [Str('select 1 as "foo bar [datetime]"', lineno=67, col_offset=20)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertEqual', Load(), lineno=68, col_offset=8), [Subscript(Subscript(Attribute(Name('cur', Load(), lineno=68, col_offset=25), 'description', Load(), lineno=68, col_offset=25), Index(Num(0, lineno=68, col_offset=41)), Load(), lineno=68, col_offset=25), Index(Num(0, lineno=68, col_offset=44)), Load(), lineno=68, col_offset=25), Str('foo bar', lineno=68, col_offset=48)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=70, col_offset=8), 'execute', Load(), lineno=70, col_offset=8), [Str('select 1 as "foo baz"', lineno=70, col_offset=20)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'assertEqual', Load(), lineno=71, col_offset=8), [Subscript(Subscript(Attribute(Name('cur', Load(), lineno=71, col_offset=25), 'description', Load(), lineno=71, col_offset=25), Index(Num(0, lineno=71, col_offset=41)), Load(), lineno=71, col_offset=25), Index(Num(0, lineno=71, col_offset=44)), Load(), lineno=71, col_offset=25), Str('foo baz', lineno=71, col_offset=48)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('CheckStatementFinalizationOnCloseDb', arguments([Name('self', Param(), lineno=73, col_offset=44)], None, None, []), [Assign([Name('con', Store(), lineno=78, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=78, col_offset=14), 'connect', Load(), lineno=78, col_offset=14), [Str(':memory:', lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=14), lineno=78, col_offset=8), Assign([Name('cursors', Store(), lineno=79, col_offset=8)], List([], Load(), lineno=79, col_offset=18), lineno=79, col_offset=8), For(Name('i', Store(), lineno=81, col_offset=12), Call(Name('range', Load(), lineno=81, col_offset=17), [Num(105, lineno=81, col_offset=23)], [], None, None, lineno=81, col_offset=17), [Assign([Name('cur', Store(), lineno=82, col_offset=12)], Call(Attribute(Name('con', Load(), lineno=82, col_offset=18), 'cursor', Load(), lineno=82, col_offset=18), [], [], None, None, lineno=82, col_offset=18), lineno=82, col_offset=12), Expr(Call(Attribute(Name('cursors', Load(), lineno=83, col_offset=12), 'append', Load(), lineno=83, col_offset=12), [Name('cur', Load(), lineno=83, col_offset=27)], [], None, None, lineno=83, col_offset=12), lineno=83, col_offset=12), Expr(Call(Attribute(Name('cur', Load(), lineno=84, col_offset=12), 'execute', Load(), lineno=84, col_offset=12), [BinOp(Str('select 1 x union select ', lineno=84, col_offset=24), Add(), Call(Name('str', Load(), lineno=84, col_offset=53), [Name('i', Load(), lineno=84, col_offset=57)], [], None, None, lineno=84, col_offset=53), lineno=84, col_offset=24)], [], None, None, lineno=84, col_offset=12), lineno=84, col_offset=12)], [], lineno=81, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=85, col_offset=8), 'close', Load(), lineno=85, col_offset=8), [], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8)], [], lineno=73, col_offset=4), FunctionDef('CheckOnConflictRollback', arguments([Name('self', Param(), lineno=87, col_offset=32)], None, None, []), [If(Compare(Attribute(Name('sqlite', Load(), lineno=88, col_offset=11), 'sqlite_version_info', Load(), lineno=88, col_offset=11), [Lt()], [Tuple([Num(3, lineno=88, col_offset=41), Num(2, lineno=88, col_offset=44), Num(2, lineno=88, col_offset=47)], Load(), lineno=88, col_offset=41)], lineno=88, col_offset=11), [Return(None, lineno=89, col_offset=12)], [], lineno=88, col_offset=8), Assign([Name('con', Store(), lineno=90, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=90, col_offset=14), 'connect', Load(), lineno=90, col_offset=14), [Str(':memory:', lineno=90, col_offset=29)], [], None, None, lineno=90, col_offset=14), lineno=90, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=91, col_offset=8), 'execute', Load(), lineno=91, col_offset=8), [Str('create table foo(x, unique(x) on conflict rollback)', lineno=91, col_offset=20)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=92, col_offset=8), 'execute', Load(), lineno=92, col_offset=8), [Str('insert into foo(x) values (1)', lineno=92, col_offset=20)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), TryExcept([Expr(Call(Attribute(Name('con', Load(), lineno=94, col_offset=12), 'execute', Load(), lineno=94, col_offset=12), [Str('insert into foo(x) values (1)', lineno=94, col_offset=24)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=95, col_offset=15), 'DatabaseError', Load(), lineno=95, col_offset=15), None, [Pass( lineno=96, col_offset=12)], lineno=95, col_offset=8)], [], lineno=93, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=97, col_offset=8), 'execute', Load(), lineno=97, col_offset=8), [Str('insert into foo(x) values (2)', lineno=97, col_offset=20)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), TryExcept([Expr(Call(Attribute(Name('con', Load(), lineno=99, col_offset=12), 'commit', Load(), lineno=99, col_offset=12), [], [], None, None, lineno=99, col_offset=12), lineno=99, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=100, col_offset=15), 'OperationalError', Load(), lineno=100, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=12), 'fail', Load(), lineno=101, col_offset=12), [Str('pysqlite knew nothing about the implicit ROLLBACK', lineno=101, col_offset=22)], [], None, None, lineno=101, col_offset=12), lineno=101, col_offset=12)], lineno=100, col_offset=8)], [], lineno=98, col_offset=8)], [], lineno=87, col_offset=4), FunctionDef('CheckWorkaroundForBuggySqliteTransferBindings', arguments([Name('self', Param(), lineno=103, col_offset=54)], None, None, []), [Expr(Str('\n        pysqlite would crash with older SQLite versions unless\n        a workaround is implemented.\n        ', lineno=107, col_offset=-1), lineno=107, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'con', Load(), lineno=108, col_offset=8), 'execute', Load(), lineno=108, col_offset=8), [Str('create table foo(bar)', lineno=108, col_offset=25)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'con', Load(), lineno=109, col_offset=8), 'execute', Load(), lineno=109, col_offset=8), [Str('drop table foo', lineno=109, col_offset=25)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=110, col_offset=8), 'con', Load(), lineno=110, col_offset=8), 'execute', Load(), lineno=110, col_offset=8), [Str('create table foo(bar)', lineno=110, col_offset=25)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8)], [], lineno=103, col_offset=4), FunctionDef('CheckEmptyStatement', arguments([Name('self', Param(), lineno=112, col_offset=28)], None, None, []), [Expr(Str('\n        pysqlite used to segfault with SQLite versions 3.5.x. These return NULL\n        for "no-operation" statements\n        ', lineno=116, col_offset=-1), lineno=116, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=117, col_offset=8), 'con', Load(), lineno=117, col_offset=8), 'execute', Load(), lineno=117, col_offset=8), [Str('', lineno=117, col_offset=25)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('CheckUnicodeConnect', arguments([Name('self', Param(), lineno=119, col_offset=28)], None, None, []), [Expr(Str("\n        With pysqlite 2.4.0 you needed to use a string or a APSW connection\n        object for opening database connections.\n\n        Formerly, both bytestrings and unicode strings used to work.\n\n        Let's make sure unicode strings work in the future.\n        ", lineno=127, col_offset=-1), lineno=127, col_offset=-1), Assign([Name('con', Store(), lineno=128, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=128, col_offset=14), 'connect', Load(), lineno=128, col_offset=14), [Str(u':memory:', lineno=128, col_offset=29)], [], None, None, lineno=128, col_offset=14), lineno=128, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=129, col_offset=8), 'close', Load(), lineno=129, col_offset=8), [], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('CheckTypeMapUsage', arguments([Name('self', Param(), lineno=131, col_offset=26)], None, None, []), [Expr(Str('\n        pysqlite until 2.4.1 did not rebuild the row_cast_map when recompiling\n        a statement. This test exhibits the problem.\n        ', lineno=135, col_offset=-1), lineno=135, col_offset=-1), Assign([Name('SELECT', Store(), lineno=136, col_offset=8)], Str('select * from foo', lineno=136, col_offset=17), lineno=136, col_offset=8), Assign([Name('con', Store(), lineno=137, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=137, col_offset=14), 'connect', Load(), lineno=137, col_offset=14), [Str(':memory:', lineno=137, col_offset=29)], [keyword('detect_types', Attribute(Name('sqlite', Load(), lineno=137, col_offset=53), 'PARSE_DECLTYPES', Load(), lineno=137, col_offset=53))], None, None, lineno=137, col_offset=14), lineno=137, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=138, col_offset=8), 'execute', Load(), lineno=138, col_offset=8), [Str('create table foo(bar timestamp)', lineno=138, col_offset=20)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=139, col_offset=8), 'execute', Load(), lineno=139, col_offset=8), [Str('insert into foo(bar) values (?)', lineno=139, col_offset=20), Tuple([Call(Attribute(Attribute(Name('datetime', Load(), lineno=139, col_offset=56), 'datetime', Load(), lineno=139, col_offset=56), 'now', Load(), lineno=139, col_offset=56), [], [], None, None, lineno=139, col_offset=56)], Load(), lineno=139, col_offset=56)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=140, col_offset=8), 'execute', Load(), lineno=140, col_offset=8), [Name('SELECT', Load(), lineno=140, col_offset=20)], [], None, None, lineno=140, col_offset=8), lineno=140, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=141, col_offset=8), 'execute', Load(), lineno=141, col_offset=8), [Str('drop table foo', lineno=141, col_offset=20)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=142, col_offset=8), 'execute', Load(), lineno=142, col_offset=8), [Str('create table foo(bar integer)', lineno=142, col_offset=20)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=143, col_offset=8), 'execute', Load(), lineno=143, col_offset=8), [Str('insert into foo(bar) values (5)', lineno=143, col_offset=20)], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=144, col_offset=8), 'execute', Load(), lineno=144, col_offset=8), [Name('SELECT', Load(), lineno=144, col_offset=20)], [], None, None, lineno=144, col_offset=8), lineno=144, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('CheckRegisterAdapter', arguments([Name('self', Param(), lineno=146, col_offset=29)], None, None, []), [Expr(Str('\n        See issue 3312.\n        ', lineno=149, col_offset=-1), lineno=149, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=150, col_offset=8), 'assertRaises', Load(), lineno=150, col_offset=8), [Name('TypeError', Load(), lineno=150, col_offset=26), Attribute(Name('sqlite', Load(), lineno=150, col_offset=37), 'register_adapter', Load(), lineno=150, col_offset=37), Dict([], [], lineno=150, col_offset=62), Name('None', Load(), lineno=150, col_offset=66)], [], None, None, lineno=150, col_offset=8), lineno=150, col_offset=8)], [], lineno=146, col_offset=4), FunctionDef('CheckSetIsolationLevel', arguments([Name('self', Param(), lineno=152, col_offset=31)], None, None, []), [Expr(Str('\n        See issue 3312.\n        ', lineno=155, col_offset=-1), lineno=155, col_offset=-1), Assign([Name('con', Store(), lineno=156, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=156, col_offset=14), 'connect', Load(), lineno=156, col_offset=14), [Str(':memory:', lineno=156, col_offset=29)], [], None, None, lineno=156, col_offset=14), lineno=156, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=8), 'assertRaises', Load(), lineno=157, col_offset=8), [Name('UnicodeEncodeError', Load(), lineno=157, col_offset=26), Name('setattr', Load(), lineno=157, col_offset=46), Name('con', Load(), lineno=157, col_offset=55), Str('isolation_level', lineno=158, col_offset=26), Str(u'\xe9', lineno=158, col_offset=45)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=152, col_offset=4), FunctionDef('CheckCursorConstructorCallCheck', arguments([Name('self', Param(), lineno=160, col_offset=40)], None, None, []), [Expr(Str('\n        Verifies that cursor methods check wether base class __init__ was called.\n        ', lineno=163, col_offset=-1), lineno=163, col_offset=-1), ClassDef('Cursor', [Attribute(Name('sqlite', Load(), lineno=164, col_offset=21), 'Cursor', Load(), lineno=164, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=165, col_offset=25), Name('con', Param(), lineno=165, col_offset=31)], None, None, []), [Pass( lineno=166, col_offset=16)], [], lineno=165, col_offset=12)], [], lineno=164, col_offset=8), Assign([Name('con', Store(), lineno=168, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=168, col_offset=14), 'connect', Load(), lineno=168, col_offset=14), [Str(':memory:', lineno=168, col_offset=29)], [], None, None, lineno=168, col_offset=14), lineno=168, col_offset=8), Assign([Name('cur', Store(), lineno=169, col_offset=8)], Call(Name('Cursor', Load(), lineno=169, col_offset=14), [Name('con', Load(), lineno=169, col_offset=21)], [], None, None, lineno=169, col_offset=14), lineno=169, col_offset=8), TryExcept([Expr(Call(Attribute(Call(Attribute(Name('cur', Load(), lineno=171, col_offset=12), 'execute', Load(), lineno=171, col_offset=12), [Str('select 4+5', lineno=171, col_offset=24)], [], None, None, lineno=171, col_offset=12), 'fetchall', Load(), lineno=171, col_offset=12), [], [], None, None, lineno=171, col_offset=12), lineno=171, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=172, col_offset=12), 'fail', Load(), lineno=172, col_offset=12), [Str('should have raised ProgrammingError', lineno=172, col_offset=22)], [], None, None, lineno=172, col_offset=12), lineno=172, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=173, col_offset=15), 'ProgrammingError', Load(), lineno=173, col_offset=15), None, [Pass( lineno=174, col_offset=12)], lineno=173, col_offset=8), ExceptHandler(None, None, [Expr(Call(Attribute(Name('self', Load(), lineno=176, col_offset=12), 'fail', Load(), lineno=176, col_offset=12), [Str('should have raised ProgrammingError', lineno=176, col_offset=22)], [], None, None, lineno=176, col_offset=12), lineno=176, col_offset=12)], lineno=175, col_offset=8)], [], lineno=170, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('CheckConnectionConstructorCallCheck', arguments([Name('self', Param(), lineno=178, col_offset=44)], None, None, []), [Expr(Str('\n        Verifies that connection methods check wether base class __init__ was called.\n        ', lineno=181, col_offset=-1), lineno=181, col_offset=-1), ClassDef('Connection', [Attribute(Name('sqlite', Load(), lineno=182, col_offset=25), 'Connection', Load(), lineno=182, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=183, col_offset=25), Name('name', Param(), lineno=183, col_offset=31)], None, None, []), [Pass( lineno=184, col_offset=16)], [], lineno=183, col_offset=12)], [], lineno=182, col_offset=8), Assign([Name('con', Store(), lineno=186, col_offset=8)], Call(Name('Connection', Load(), lineno=186, col_offset=14), [Str(':memory:', lineno=186, col_offset=25)], [], None, None, lineno=186, col_offset=14), lineno=186, col_offset=8), TryExcept([Assign([Name('cur', Store(), lineno=188, col_offset=12)], Call(Attribute(Name('con', Load(), lineno=188, col_offset=18), 'cursor', Load(), lineno=188, col_offset=18), [], [], None, None, lineno=188, col_offset=18), lineno=188, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=12), 'fail', Load(), lineno=189, col_offset=12), [Str('should have raised ProgrammingError', lineno=189, col_offset=22)], [], None, None, lineno=189, col_offset=12), lineno=189, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=190, col_offset=15), 'ProgrammingError', Load(), lineno=190, col_offset=15), None, [Pass( lineno=191, col_offset=12)], lineno=190, col_offset=8), ExceptHandler(None, None, [Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=12), 'fail', Load(), lineno=193, col_offset=12), [Str('should have raised ProgrammingError', lineno=193, col_offset=22)], [], None, None, lineno=193, col_offset=12), lineno=193, col_offset=12)], lineno=192, col_offset=8)], [], lineno=187, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('CheckCursorRegistration', arguments([Name('self', Param(), lineno=195, col_offset=32)], None, None, []), [Expr(Str('\n        Verifies that subclassed cursor classes are correctly registered with\n        the connection object, too.  (fetch-across-rollback problem)\n        ', lineno=199, col_offset=-1), lineno=199, col_offset=-1), ClassDef('Connection', [Attribute(Name('sqlite', Load(), lineno=200, col_offset=25), 'Connection', Load(), lineno=200, col_offset=25)], [FunctionDef('cursor', arguments([Name('self', Param(), lineno=201, col_offset=23)], None, None, []), [Return(Call(Name('Cursor', Load(), lineno=202, col_offset=23), [Name('self', Load(), lineno=202, col_offset=30)], [], None, None, lineno=202, col_offset=23), lineno=202, col_offset=16)], [], lineno=201, col_offset=12)], [], lineno=200, col_offset=8), ClassDef('Cursor', [Attribute(Name('sqlite', Load(), lineno=204, col_offset=21), 'Cursor', Load(), lineno=204, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=205, col_offset=25), Name('con', Param(), lineno=205, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('sqlite', Load(), lineno=206, col_offset=16), 'Cursor', Load(), lineno=206, col_offset=16), '__init__', Load(), lineno=206, col_offset=16), [Name('self', Load(), lineno=206, col_offset=39), Name('con', Load(), lineno=206, col_offset=45)], [], None, None, lineno=206, col_offset=16), lineno=206, col_offset=16)], [], lineno=205, col_offset=12)], [], lineno=204, col_offset=8), Assign([Name('con', Store(), lineno=208, col_offset=8)], Call(Name('Connection', Load(), lineno=208, col_offset=14), [Str(':memory:', lineno=208, col_offset=25)], [], None, None, lineno=208, col_offset=14), lineno=208, col_offset=8), Assign([Name('cur', Store(), lineno=209, col_offset=8)], Call(Attribute(Name('con', Load(), lineno=209, col_offset=14), 'cursor', Load(), lineno=209, col_offset=14), [], [], None, None, lineno=209, col_offset=14), lineno=209, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=210, col_offset=8), 'execute', Load(), lineno=210, col_offset=8), [Str('create table foo(x)', lineno=210, col_offset=20)], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=211, col_offset=8), 'executemany', Load(), lineno=211, col_offset=8), [Str('insert into foo(x) values (?)', lineno=211, col_offset=24), List([Tuple([Num(3, lineno=211, col_offset=59)], Load(), lineno=211, col_offset=59), Tuple([Num(4, lineno=211, col_offset=65)], Load(), lineno=211, col_offset=65), Tuple([Num(5, lineno=211, col_offset=71)], Load(), lineno=211, col_offset=71)], Load(), lineno=211, col_offset=57)], [], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=212, col_offset=8), 'execute', Load(), lineno=212, col_offset=8), [Str('select x from foo', lineno=212, col_offset=20)], [], None, None, lineno=212, col_offset=8), lineno=212, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=213, col_offset=8), 'rollback', Load(), lineno=213, col_offset=8), [], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8), TryExcept([Expr(Call(Attribute(Name('cur', Load(), lineno=215, col_offset=12), 'fetchall', Load(), lineno=215, col_offset=12), [], [], None, None, lineno=215, col_offset=12), lineno=215, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=216, col_offset=12), 'fail', Load(), lineno=216, col_offset=12), [Str('should have raised InterfaceError', lineno=216, col_offset=22)], [], None, None, lineno=216, col_offset=12), lineno=216, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=217, col_offset=15), 'InterfaceError', Load(), lineno=217, col_offset=15), None, [Pass( lineno=218, col_offset=12)], lineno=217, col_offset=8), ExceptHandler(None, None, [Expr(Call(Attribute(Name('self', Load(), lineno=220, col_offset=12), 'fail', Load(), lineno=220, col_offset=12), [Str('should have raised InterfaceError', lineno=220, col_offset=22)], [], None, None, lineno=220, col_offset=12), lineno=220, col_offset=12)], lineno=219, col_offset=8)], [], lineno=214, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('CheckAutoCommit', arguments([Name('self', Param(), lineno=222, col_offset=24)], None, None, []), [Expr(Str('\n        Verifies that creating a connection in autocommit mode works.\n        2.5.3 introduced a regression so that these could no longer\n        be created.\n        ', lineno=227, col_offset=-1), lineno=227, col_offset=-1), Assign([Name('con', Store(), lineno=228, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=228, col_offset=14), 'connect', Load(), lineno=228, col_offset=14), [Str(':memory:', lineno=228, col_offset=29)], [keyword('isolation_level', Name('None', Load(), lineno=228, col_offset=57))], None, None, lineno=228, col_offset=14), lineno=228, col_offset=8)], [], lineno=222, col_offset=4), FunctionDef('CheckPragmaAutocommit', arguments([Name('self', Param(), lineno=230, col_offset=30)], None, None, []), [Expr(Str('\n        Verifies that running a PRAGMA statement that does an autocommit does\n        work. This did not work in 2.5.3/2.5.4.\n        ', lineno=234, col_offset=-1), lineno=234, col_offset=-1), Assign([Name('cur', Store(), lineno=235, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=235, col_offset=14), 'con', Load(), lineno=235, col_offset=14), 'cursor', Load(), lineno=235, col_offset=14), [], [], None, None, lineno=235, col_offset=14), lineno=235, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=236, col_offset=8), 'execute', Load(), lineno=236, col_offset=8), [Str('create table foo(bar)', lineno=236, col_offset=20)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=237, col_offset=8), 'execute', Load(), lineno=237, col_offset=8), [Str('insert into foo(bar) values (5)', lineno=237, col_offset=20)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8), Expr(Call(Attribute(Name('cur', Load(), lineno=239, col_offset=8), 'execute', Load(), lineno=239, col_offset=8), [Str('pragma page_size', lineno=239, col_offset=20)], [], None, None, lineno=239, col_offset=8), lineno=239, col_offset=8), Assign([Name('row', Store(), lineno=240, col_offset=8)], Call(Attribute(Name('cur', Load(), lineno=240, col_offset=14), 'fetchone', Load(), lineno=240, col_offset=14), [], [], None, None, lineno=240, col_offset=14), lineno=240, col_offset=8)], [], lineno=230, col_offset=4), FunctionDef('CheckSetDict', arguments([Name('self', Param(), lineno=242, col_offset=21)], None, None, []), [Expr(Str('\n        See http://bugs.python.org/issue7478\n\n        It was possible to successfully register callbacks that could not be\n        hashed. Return codes of PyDict_SetItem were not checked properly.\n        ', lineno=248, col_offset=-1), lineno=248, col_offset=-1), ClassDef('NotHashable', [], [FunctionDef('__call__', arguments([Name('self', Param(), lineno=250, col_offset=25)], 'args', 'kw', []), [Pass( lineno=251, col_offset=16)], [], lineno=250, col_offset=12), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=252, col_offset=25)], None, None, []), [Raise(Call(Name('TypeError', Load(), lineno=253, col_offset=22), [], [], None, None, lineno=253, col_offset=22), None, None, lineno=253, col_offset=16)], [], lineno=252, col_offset=12)], [], lineno=249, col_offset=8), Assign([Name('var', Store(), lineno=254, col_offset=8)], Call(Name('NotHashable', Load(), lineno=254, col_offset=14), [], [], None, None, lineno=254, col_offset=14), lineno=254, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=255, col_offset=8), 'assertRaises', Load(), lineno=255, col_offset=8), [Name('TypeError', Load(), lineno=255, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=255, col_offset=37), 'con', Load(), lineno=255, col_offset=37), 'create_function', Load(), lineno=255, col_offset=37), Name('var', Load(), lineno=255, col_offset=63)], [], None, None, lineno=255, col_offset=8), lineno=255, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=8), 'assertRaises', Load(), lineno=256, col_offset=8), [Name('TypeError', Load(), lineno=256, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=256, col_offset=37), 'con', Load(), lineno=256, col_offset=37), 'create_aggregate', Load(), lineno=256, col_offset=37), Name('var', Load(), lineno=256, col_offset=64)], [], None, None, lineno=256, col_offset=8), lineno=256, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=257, col_offset=8), 'assertRaises', Load(), lineno=257, col_offset=8), [Name('TypeError', Load(), lineno=257, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=257, col_offset=37), 'con', Load(), lineno=257, col_offset=37), 'set_authorizer', Load(), lineno=257, col_offset=37), Name('var', Load(), lineno=257, col_offset=62)], [], None, None, lineno=257, col_offset=8), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=8), 'assertRaises', Load(), lineno=258, col_offset=8), [Name('TypeError', Load(), lineno=258, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=258, col_offset=37), 'con', Load(), lineno=258, col_offset=37), 'set_progress_handler', Load(), lineno=258, col_offset=37), Name('var', Load(), lineno=258, col_offset=68)], [], None, None, lineno=258, col_offset=8), lineno=258, col_offset=8)], [], lineno=242, col_offset=4), FunctionDef('CheckConnectionCall', arguments([Name('self', Param(), lineno=260, col_offset=28)], None, None, []), [Expr(Str('\n        Call a connection with a non-string SQL request: check error handling\n        of the statement constructor.\n        ', lineno=264, col_offset=-1), lineno=264, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=8), 'assertRaises', Load(), lineno=265, col_offset=8), [Attribute(Name('sqlite', Load(), lineno=265, col_offset=26), 'Warning', Load(), lineno=265, col_offset=26), Attribute(Name('self', Load(), lineno=265, col_offset=42), 'con', Load(), lineno=265, col_offset=42), Num(1, lineno=265, col_offset=52)], [], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8)], [], lineno=260, col_offset=4)], [], lineno=28, col_offset=0), FunctionDef('suite', arguments([], None, None, []), [Assign([Name('regression_suite', Store(), lineno=268, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=268, col_offset=23), 'makeSuite', Load(), lineno=268, col_offset=23), [Name('RegressionTests', Load(), lineno=268, col_offset=42), Str('Check', lineno=268, col_offset=59)], [], None, None, lineno=268, col_offset=23), lineno=268, col_offset=4), Return(Call(Attribute(Name('unittest', Load(), lineno=269, col_offset=11), 'TestSuite', Load(), lineno=269, col_offset=11), [Tuple([Name('regression_suite', Load(), lineno=269, col_offset=31)], Load(), lineno=269, col_offset=31)], [], None, None, lineno=269, col_offset=11), lineno=269, col_offset=4)], [], lineno=267, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Assign([Name('runner', Store(), lineno=272, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=272, col_offset=13), 'TextTestRunner', Load(), lineno=272, col_offset=13), [], [], None, None, lineno=272, col_offset=13), lineno=272, col_offset=4), Expr(Call(Attribute(Name('runner', Load(), lineno=273, col_offset=4), 'run', Load(), lineno=273, col_offset=4), [Call(Name('suite', Load(), lineno=273, col_offset=15), [], [], None, None, lineno=273, col_offset=15)], [], None, None, lineno=273, col_offset=4), lineno=273, col_offset=4)], [], lineno=271, col_offset=0), If(Compare(Name('__name__', Load(), lineno=275, col_offset=3), [Eq()], [Str('__main__', lineno=275, col_offset=15)], lineno=275, col_offset=3), [Expr(Call(Name('test', Load(), lineno=276, col_offset=4), [], [], None, None, lineno=276, col_offset=4), lineno=276, col_offset=4)], [], lineno=275, col_offset=0)])
