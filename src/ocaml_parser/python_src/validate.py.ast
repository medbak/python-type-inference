Module([Expr(Str("\nMiddleware to check for obedience to the WSGI specification.\n\nSome of the things this checks:\n\n* Signature of the application and start_response (including that\n  keyword arguments are not used).\n\n* Environment checks:\n\n  - Environment is a dictionary (and not a subclass).\n\n  - That all the required keys are in the environment: REQUEST_METHOD,\n    SERVER_NAME, SERVER_PORT, wsgi.version, wsgi.input, wsgi.errors,\n    wsgi.multithread, wsgi.multiprocess, wsgi.run_once\n\n  - That HTTP_CONTENT_TYPE and HTTP_CONTENT_LENGTH are not in the\n    environment (these headers should appear as CONTENT_LENGTH and\n    CONTENT_TYPE).\n\n  - Warns if QUERY_STRING is missing, as the cgi module acts\n    unpredictably in that case.\n\n  - That CGI-style variables (that don't contain a .) have\n    (non-unicode) string values\n\n  - That wsgi.version is a tuple\n\n  - That wsgi.url_scheme is 'http' or 'https' (@@: is this too\n    restrictive?)\n\n  - Warns if the REQUEST_METHOD is not known (@@: probably too\n    restrictive).\n\n  - That SCRIPT_NAME and PATH_INFO are empty or start with /\n\n  - That at least one of SCRIPT_NAME or PATH_INFO are set.\n\n  - That CONTENT_LENGTH is a positive integer.\n\n  - That SCRIPT_NAME is not '/' (it should be '', and PATH_INFO should\n    be '/').\n\n  - That wsgi.input has the methods read, readline, readlines, and\n    __iter__\n\n  - That wsgi.errors has the methods flush, write, writelines\n\n* The status is a string, contains a space, starts with an integer,\n  and that integer is in range (> 100).\n\n* That the headers is a list (not a subclass, not another kind of\n  sequence).\n\n* That the items of the headers are tuples of strings.\n\n* That there is no 'status' header (that is used in CGI, but not in\n  WSGI).\n\n* That the headers don't contain newlines or colons, end in _ or -, or\n  contain characters codes below 037.\n\n* That Content-Type is given if there is content (CGI often has a\n  default content type, but WSGI does not).\n\n* That no Content-Type is given when there is no content (@@: is this\n  too restrictive?)\n\n* That the exc_info argument to start_response is a tuple or None.\n\n* That all calls to the writer are with strings, and no other methods\n  on the writer are accessed.\n\n* That wsgi.input is used properly:\n\n  - .read() is called with zero or one argument\n\n  - That it returns a string\n\n  - That readline, readlines, and __iter__ return strings\n\n  - That .close() is not called\n\n  - No other methods are provided\n\n* That wsgi.errors is used properly:\n\n  - .write() and .writelines() is called with a string\n\n  - That .close() is not called, and no other methods are provided.\n\n* The response iterator:\n\n  - That it is not a string (it should be a list of a single string; a\n    string will work, but perform horribly).\n\n  - That .next() returns a string\n\n  - That the iterator is not iterated over until start_response has\n    been called (that can signal either a server or application\n    error).\n\n  - That .close() is called (doesn't raise exception, only prints to\n    sys.stderr, because we only know it isn't called when the object\n    is garbage collected).\n", lineno=110, col_offset=-1), lineno=110, col_offset=-1), Assign([Name('__all__', Store(), lineno=111, col_offset=0)], List([Str('validator', lineno=111, col_offset=11)], Load(), lineno=111, col_offset=10), lineno=111, col_offset=0), Import([alias('re', None)], lineno=114, col_offset=0), Import([alias('sys', None)], lineno=115, col_offset=0), ImportFrom('types', [alias('DictType', None), alias('StringType', None), alias('TupleType', None), alias('ListType', None)], 0, lineno=116, col_offset=0), Import([alias('warnings', None)], lineno=117, col_offset=0), Assign([Name('header_re', Store(), lineno=119, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=119, col_offset=12), 'compile', Load(), lineno=119, col_offset=12), [Str('^[a-zA-Z][a-zA-Z0-9\\-_]*$', lineno=119, col_offset=23)], [], None, None, lineno=119, col_offset=12), lineno=119, col_offset=0), Assign([Name('bad_header_value_re', Store(), lineno=120, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=120, col_offset=22), 'compile', Load(), lineno=120, col_offset=22), [Str('[\\000-\\037]', lineno=120, col_offset=33)], [], None, None, lineno=120, col_offset=22), lineno=120, col_offset=0), ClassDef('WSGIWarning', [Name('Warning', Load(), lineno=122, col_offset=18)], [Expr(Str('\n    Raised in response to WSGI-spec-related warnings\n    ', lineno=125, col_offset=-1), lineno=125, col_offset=-1)], [], lineno=122, col_offset=0), FunctionDef('assert_', arguments([Name('cond', Param(), lineno=127, col_offset=12)], 'args', None, []), [If(UnaryOp(Not(), Name('cond', Load(), lineno=128, col_offset=11), lineno=128, col_offset=7), [Raise(Call(Name('AssertionError', Load(), lineno=129, col_offset=14), [], [], Name('args', Load(), lineno=129, col_offset=30), None, lineno=129, col_offset=14), None, None, lineno=129, col_offset=8)], [], lineno=128, col_offset=4)], [], lineno=127, col_offset=0), FunctionDef('validator', arguments([Name('application', Param(), lineno=131, col_offset=14)], None, None, []), [Expr(Str("\n    When applied between a WSGI server and a WSGI application, this\n    middleware will check for WSGI compliancy on a number of levels.\n    This middleware does not modify the request or response in any\n    way, but will throw an AssertionError if anything seems off\n    (except for a failure to close the application iterator, which\n    will be printed to stderr -- there's no way to throw an exception\n    at that point).\n    ", lineno=141, col_offset=-1), lineno=141, col_offset=-1), FunctionDef('lint_app', arguments([], 'args', 'kw', []), [Expr(Call(Name('assert_', Load(), lineno=144, col_offset=8), [Compare(Call(Name('len', Load(), lineno=144, col_offset=16), [Name('args', Load(), lineno=144, col_offset=20)], [], None, None, lineno=144, col_offset=16), [Eq()], [Num(2, lineno=144, col_offset=29)], lineno=144, col_offset=16), Str('Two arguments required', lineno=144, col_offset=32)], [], None, None, lineno=144, col_offset=8), lineno=144, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=145, col_offset=8), [UnaryOp(Not(), Name('kw', Load(), lineno=145, col_offset=20), lineno=145, col_offset=16), Str('No keyword arguments allowed', lineno=145, col_offset=24)], [], None, None, lineno=145, col_offset=8), lineno=145, col_offset=8), Assign([Tuple([Name('environ', Store(), lineno=146, col_offset=8), Name('start_response', Store(), lineno=146, col_offset=17)], Store(), lineno=146, col_offset=8)], Name('args', Load(), lineno=146, col_offset=34), lineno=146, col_offset=8), Expr(Call(Name('check_environ', Load(), lineno=148, col_offset=8), [Name('environ', Load(), lineno=148, col_offset=22)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Assign([Name('start_response_started', Store(), lineno=152, col_offset=8)], List([], Load(), lineno=152, col_offset=33), lineno=152, col_offset=8), FunctionDef('start_response_wrapper', arguments([], 'args', 'kw', []), [Expr(Call(Name('assert_', Load(), lineno=155, col_offset=12), [BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=155, col_offset=20), [Name('args', Load(), lineno=155, col_offset=24)], [], None, None, lineno=155, col_offset=20), [Eq()], [Num(2, lineno=155, col_offset=33)], lineno=155, col_offset=20), Compare(Call(Name('len', Load(), lineno=155, col_offset=38), [Name('args', Load(), lineno=155, col_offset=42)], [], None, None, lineno=155, col_offset=38), [Eq()], [Num(3, lineno=155, col_offset=51)], lineno=155, col_offset=38)], lineno=155, col_offset=20), BinOp(Str('Invalid number of arguments: %s', lineno=156, col_offset=16), Mod(), Tuple([Name('args', Load(), lineno=156, col_offset=53)], Load(), lineno=156, col_offset=53), lineno=156, col_offset=16)], [], None, None, lineno=155, col_offset=12), lineno=155, col_offset=12), Expr(Call(Name('assert_', Load(), lineno=157, col_offset=12), [UnaryOp(Not(), Name('kw', Load(), lineno=157, col_offset=24), lineno=157, col_offset=20), Str('No keyword arguments allowed', lineno=157, col_offset=28)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12), Assign([Name('status', Store(), lineno=158, col_offset=12)], Subscript(Name('args', Load(), lineno=158, col_offset=21), Index(Num(0, lineno=158, col_offset=26)), Load(), lineno=158, col_offset=21), lineno=158, col_offset=12), Assign([Name('headers', Store(), lineno=159, col_offset=12)], Subscript(Name('args', Load(), lineno=159, col_offset=22), Index(Num(1, lineno=159, col_offset=27)), Load(), lineno=159, col_offset=22), lineno=159, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=160, col_offset=15), [Name('args', Load(), lineno=160, col_offset=19)], [], None, None, lineno=160, col_offset=15), [Eq()], [Num(3, lineno=160, col_offset=28)], lineno=160, col_offset=15), [Assign([Name('exc_info', Store(), lineno=161, col_offset=16)], Subscript(Name('args', Load(), lineno=161, col_offset=27), Index(Num(2, lineno=161, col_offset=32)), Load(), lineno=161, col_offset=27), lineno=161, col_offset=16)], [Assign([Name('exc_info', Store(), lineno=163, col_offset=16)], Name('None', Load(), lineno=163, col_offset=27), lineno=163, col_offset=16)], lineno=160, col_offset=12), Expr(Call(Name('check_status', Load(), lineno=165, col_offset=12), [Name('status', Load(), lineno=165, col_offset=25)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12), Expr(Call(Name('check_headers', Load(), lineno=166, col_offset=12), [Name('headers', Load(), lineno=166, col_offset=26)], [], None, None, lineno=166, col_offset=12), lineno=166, col_offset=12), Expr(Call(Name('check_content_type', Load(), lineno=167, col_offset=12), [Name('status', Load(), lineno=167, col_offset=31), Name('headers', Load(), lineno=167, col_offset=39)], [], None, None, lineno=167, col_offset=12), lineno=167, col_offset=12), Expr(Call(Name('check_exc_info', Load(), lineno=168, col_offset=12), [Name('exc_info', Load(), lineno=168, col_offset=27)], [], None, None, lineno=168, col_offset=12), lineno=168, col_offset=12), Expr(Call(Attribute(Name('start_response_started', Load(), lineno=170, col_offset=12), 'append', Load(), lineno=170, col_offset=12), [Name('None', Load(), lineno=170, col_offset=42)], [], None, None, lineno=170, col_offset=12), lineno=170, col_offset=12), Return(Call(Name('WriteWrapper', Load(), lineno=171, col_offset=19), [Call(Name('start_response', Load(), lineno=171, col_offset=32), [], [], Name('args', Load(), lineno=171, col_offset=48), None, lineno=171, col_offset=32)], [], None, None, lineno=171, col_offset=19), lineno=171, col_offset=12)], [], lineno=154, col_offset=8), Assign([Subscript(Name('environ', Load(), lineno=173, col_offset=8), Index(Str('wsgi.input', lineno=173, col_offset=16)), Store(), lineno=173, col_offset=8)], Call(Name('InputWrapper', Load(), lineno=173, col_offset=32), [Subscript(Name('environ', Load(), lineno=173, col_offset=45), Index(Str('wsgi.input', lineno=173, col_offset=53)), Load(), lineno=173, col_offset=45)], [], None, None, lineno=173, col_offset=32), lineno=173, col_offset=8), Assign([Subscript(Name('environ', Load(), lineno=174, col_offset=8), Index(Str('wsgi.errors', lineno=174, col_offset=16)), Store(), lineno=174, col_offset=8)], Call(Name('ErrorWrapper', Load(), lineno=174, col_offset=33), [Subscript(Name('environ', Load(), lineno=174, col_offset=46), Index(Str('wsgi.errors', lineno=174, col_offset=54)), Load(), lineno=174, col_offset=46)], [], None, None, lineno=174, col_offset=33), lineno=174, col_offset=8), Assign([Name('iterator', Store(), lineno=176, col_offset=8)], Call(Name('application', Load(), lineno=176, col_offset=19), [Name('environ', Load(), lineno=176, col_offset=31), Name('start_response_wrapper', Load(), lineno=176, col_offset=40)], [], None, None, lineno=176, col_offset=19), lineno=176, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=177, col_offset=8), [BoolOp(And(), [Compare(Name('iterator', Load(), lineno=177, col_offset=16), [IsNot()], [Name('None', Load(), lineno=177, col_offset=32)], lineno=177, col_offset=16), Compare(Name('iterator', Load(), lineno=177, col_offset=41), [NotEq()], [Name('False', Load(), lineno=177, col_offset=53)], lineno=177, col_offset=41)], lineno=177, col_offset=16), Str('The application must return an iterator, if only an empty list', lineno=178, col_offset=12)], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8), Expr(Call(Name('check_iterator', Load(), lineno=180, col_offset=8), [Name('iterator', Load(), lineno=180, col_offset=23)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8), Return(Call(Name('IteratorWrapper', Load(), lineno=182, col_offset=15), [Name('iterator', Load(), lineno=182, col_offset=31), Name('start_response_started', Load(), lineno=182, col_offset=41)], [], None, None, lineno=182, col_offset=15), lineno=182, col_offset=8)], [], lineno=143, col_offset=4), Return(Name('lint_app', Load(), lineno=184, col_offset=11), lineno=184, col_offset=4)], [], lineno=131, col_offset=0), ClassDef('InputWrapper', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=188, col_offset=17), Name('wsgi_input', Param(), lineno=188, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=189, col_offset=8), 'input', Store(), lineno=189, col_offset=8)], Name('wsgi_input', Load(), lineno=189, col_offset=21), lineno=189, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=191, col_offset=13)], 'args', None, []), [Expr(Call(Name('assert_', Load(), lineno=192, col_offset=8), [Compare(Call(Name('len', Load(), lineno=192, col_offset=16), [Name('args', Load(), lineno=192, col_offset=20)], [], None, None, lineno=192, col_offset=16), [LtE()], [Num(1, lineno=192, col_offset=29)], lineno=192, col_offset=16)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), Assign([Name('v', Store(), lineno=193, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=193, col_offset=12), 'input', Load(), lineno=193, col_offset=12), 'read', Load(), lineno=193, col_offset=12), [], [], Name('args', Load(), lineno=193, col_offset=29), None, lineno=193, col_offset=12), lineno=193, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=194, col_offset=8), [Compare(Call(Name('type', Load(), lineno=194, col_offset=16), [Name('v', Load(), lineno=194, col_offset=21)], [], None, None, lineno=194, col_offset=16), [Is()], [Call(Name('type', Load(), lineno=194, col_offset=27), [Str('', lineno=194, col_offset=32)], [], None, None, lineno=194, col_offset=27)], lineno=194, col_offset=16)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8), Return(Name('v', Load(), lineno=195, col_offset=15), lineno=195, col_offset=8)], [], lineno=191, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=197, col_offset=17)], None, None, []), [Assign([Name('v', Store(), lineno=198, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=198, col_offset=12), 'input', Load(), lineno=198, col_offset=12), 'readline', Load(), lineno=198, col_offset=12), [], [], None, None, lineno=198, col_offset=12), lineno=198, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=199, col_offset=8), [Compare(Call(Name('type', Load(), lineno=199, col_offset=16), [Name('v', Load(), lineno=199, col_offset=21)], [], None, None, lineno=199, col_offset=16), [Is()], [Call(Name('type', Load(), lineno=199, col_offset=27), [Str('', lineno=199, col_offset=32)], [], None, None, lineno=199, col_offset=27)], lineno=199, col_offset=16)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8), Return(Name('v', Load(), lineno=200, col_offset=15), lineno=200, col_offset=8)], [], lineno=197, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=202, col_offset=18)], 'args', None, []), [Expr(Call(Name('assert_', Load(), lineno=203, col_offset=8), [Compare(Call(Name('len', Load(), lineno=203, col_offset=16), [Name('args', Load(), lineno=203, col_offset=20)], [], None, None, lineno=203, col_offset=16), [LtE()], [Num(1, lineno=203, col_offset=29)], lineno=203, col_offset=16)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Assign([Name('lines', Store(), lineno=204, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=204, col_offset=16), 'input', Load(), lineno=204, col_offset=16), 'readlines', Load(), lineno=204, col_offset=16), [], [], Name('args', Load(), lineno=204, col_offset=38), None, lineno=204, col_offset=16), lineno=204, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=205, col_offset=8), [Compare(Call(Name('type', Load(), lineno=205, col_offset=16), [Name('lines', Load(), lineno=205, col_offset=21)], [], None, None, lineno=205, col_offset=16), [Is()], [Call(Name('type', Load(), lineno=205, col_offset=31), [List([], Load(), lineno=205, col_offset=36)], [], None, None, lineno=205, col_offset=31)], lineno=205, col_offset=16)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8), For(Name('line', Store(), lineno=206, col_offset=12), Name('lines', Load(), lineno=206, col_offset=20), [Expr(Call(Name('assert_', Load(), lineno=207, col_offset=12), [Compare(Call(Name('type', Load(), lineno=207, col_offset=20), [Name('line', Load(), lineno=207, col_offset=25)], [], None, None, lineno=207, col_offset=20), [Is()], [Call(Name('type', Load(), lineno=207, col_offset=34), [Str('', lineno=207, col_offset=39)], [], None, None, lineno=207, col_offset=34)], lineno=207, col_offset=20)], [], None, None, lineno=207, col_offset=12), lineno=207, col_offset=12)], [], lineno=206, col_offset=8), Return(Name('lines', Load(), lineno=208, col_offset=15), lineno=208, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=210, col_offset=17)], None, None, []), [While(Num(1, lineno=211, col_offset=14), [Assign([Name('line', Store(), lineno=212, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=212, col_offset=19), 'readline', Load(), lineno=212, col_offset=19), [], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=213, col_offset=19), lineno=213, col_offset=15), [Return(None, lineno=214, col_offset=16)], [], lineno=213, col_offset=12), Expr(Yield(Name('line', Load(), lineno=215, col_offset=18), lineno=215, col_offset=12), lineno=215, col_offset=12)], [], lineno=211, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=217, col_offset=14)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=218, col_offset=8), [Num(0, lineno=218, col_offset=16), Str('input.close() must not be called', lineno=218, col_offset=19)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8)], [], lineno=217, col_offset=4)], [], lineno=186, col_offset=0), ClassDef('ErrorWrapper', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=222, col_offset=17), Name('wsgi_errors', Param(), lineno=222, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=223, col_offset=8), 'errors', Store(), lineno=223, col_offset=8)], Name('wsgi_errors', Load(), lineno=223, col_offset=22), lineno=223, col_offset=8)], [], lineno=222, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=225, col_offset=14), Name('s', Param(), lineno=225, col_offset=20)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=226, col_offset=8), [Compare(Call(Name('type', Load(), lineno=226, col_offset=16), [Name('s', Load(), lineno=226, col_offset=21)], [], None, None, lineno=226, col_offset=16), [Is()], [Call(Name('type', Load(), lineno=226, col_offset=27), [Str('', lineno=226, col_offset=32)], [], None, None, lineno=226, col_offset=27)], lineno=226, col_offset=16)], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=227, col_offset=8), 'errors', Load(), lineno=227, col_offset=8), 'write', Load(), lineno=227, col_offset=8), [Name('s', Load(), lineno=227, col_offset=26)], [], None, None, lineno=227, col_offset=8), lineno=227, col_offset=8)], [], lineno=225, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=229, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=230, col_offset=8), 'errors', Load(), lineno=230, col_offset=8), 'flush', Load(), lineno=230, col_offset=8), [], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=232, col_offset=19), Name('seq', Param(), lineno=232, col_offset=25)], None, None, []), [For(Name('line', Store(), lineno=233, col_offset=12), Name('seq', Load(), lineno=233, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=12), 'write', Load(), lineno=234, col_offset=12), [Name('line', Load(), lineno=234, col_offset=23)], [], None, None, lineno=234, col_offset=12), lineno=234, col_offset=12)], [], lineno=233, col_offset=8)], [], lineno=232, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=236, col_offset=14)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=237, col_offset=8), [Num(0, lineno=237, col_offset=16), Str('errors.close() must not be called', lineno=237, col_offset=19)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8)], [], lineno=236, col_offset=4)], [], lineno=220, col_offset=0), ClassDef('WriteWrapper', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=241, col_offset=17), Name('wsgi_writer', Param(), lineno=241, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=242, col_offset=8), 'writer', Store(), lineno=242, col_offset=8)], Name('wsgi_writer', Load(), lineno=242, col_offset=22), lineno=242, col_offset=8)], [], lineno=241, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=244, col_offset=17), Name('s', Param(), lineno=244, col_offset=23)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=245, col_offset=8), [Compare(Call(Name('type', Load(), lineno=245, col_offset=16), [Name('s', Load(), lineno=245, col_offset=21)], [], None, None, lineno=245, col_offset=16), [Is()], [Call(Name('type', Load(), lineno=245, col_offset=27), [Str('', lineno=245, col_offset=32)], [], None, None, lineno=245, col_offset=27)], lineno=245, col_offset=16)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=8), 'writer', Load(), lineno=246, col_offset=8), [Name('s', Load(), lineno=246, col_offset=20)], [], None, None, lineno=246, col_offset=8), lineno=246, col_offset=8)], [], lineno=244, col_offset=4)], [], lineno=239, col_offset=0), ClassDef('PartialIteratorWrapper', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=250, col_offset=17), Name('wsgi_iterator', Param(), lineno=250, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=251, col_offset=8), 'iterator', Store(), lineno=251, col_offset=8)], Name('wsgi_iterator', Load(), lineno=251, col_offset=24), lineno=251, col_offset=8)], [], lineno=250, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=253, col_offset=17)], None, None, []), [Return(Call(Name('IteratorWrapper', Load(), lineno=255, col_offset=15), [Attribute(Name('self', Load(), lineno=255, col_offset=31), 'iterator', Load(), lineno=255, col_offset=31), Name('None', Load(), lineno=255, col_offset=46)], [], None, None, lineno=255, col_offset=15), lineno=255, col_offset=8)], [], lineno=253, col_offset=4)], [], lineno=248, col_offset=0), ClassDef('IteratorWrapper', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=259, col_offset=17), Name('wsgi_iterator', Param(), lineno=259, col_offset=23), Name('check_start_response', Param(), lineno=259, col_offset=38)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=260, col_offset=8), 'original_iterator', Store(), lineno=260, col_offset=8)], Name('wsgi_iterator', Load(), lineno=260, col_offset=33), lineno=260, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=261, col_offset=8), 'iterator', Store(), lineno=261, col_offset=8)], Call(Name('iter', Load(), lineno=261, col_offset=24), [Name('wsgi_iterator', Load(), lineno=261, col_offset=29)], [], None, None, lineno=261, col_offset=24), lineno=261, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=262, col_offset=8), 'closed', Store(), lineno=262, col_offset=8)], Name('False', Load(), lineno=262, col_offset=22), lineno=262, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=263, col_offset=8), 'check_start_response', Store(), lineno=263, col_offset=8)], Name('check_start_response', Load(), lineno=263, col_offset=36), lineno=263, col_offset=8)], [], lineno=259, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=265, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=266, col_offset=15), lineno=266, col_offset=8)], [], lineno=265, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=268, col_offset=13)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=269, col_offset=8), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=269, col_offset=20), 'closed', Load(), lineno=269, col_offset=20), lineno=269, col_offset=16), Str('Iterator read after closed', lineno=270, col_offset=12)], [], None, None, lineno=269, col_offset=8), lineno=269, col_offset=8), Assign([Name('v', Store(), lineno=271, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=271, col_offset=12), 'iterator', Load(), lineno=271, col_offset=12), 'next', Load(), lineno=271, col_offset=12), [], [], None, None, lineno=271, col_offset=12), lineno=271, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=272, col_offset=11), 'check_start_response', Load(), lineno=272, col_offset=11), [IsNot()], [Name('None', Load(), lineno=272, col_offset=44)], lineno=272, col_offset=11), [Expr(Call(Name('assert_', Load(), lineno=273, col_offset=12), [Attribute(Name('self', Load(), lineno=273, col_offset=20), 'check_start_response', Load(), lineno=273, col_offset=20), Str('The application returns and we started iterating over its body, but start_response has not yet been called', lineno=274, col_offset=16)], [], None, None, lineno=273, col_offset=12), lineno=273, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=275, col_offset=12), 'check_start_response', Store(), lineno=275, col_offset=12)], Name('None', Load(), lineno=275, col_offset=40), lineno=275, col_offset=12)], [], lineno=272, col_offset=8), Return(Name('v', Load(), lineno=276, col_offset=15), lineno=276, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=278, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=279, col_offset=8), 'closed', Store(), lineno=279, col_offset=8)], Name('True', Load(), lineno=279, col_offset=22), lineno=279, col_offset=8), If(Call(Name('hasattr', Load(), lineno=280, col_offset=11), [Attribute(Name('self', Load(), lineno=280, col_offset=19), 'original_iterator', Load(), lineno=280, col_offset=19), Str('close', lineno=280, col_offset=43)], [], None, None, lineno=280, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=281, col_offset=12), 'original_iterator', Load(), lineno=281, col_offset=12), 'close', Load(), lineno=281, col_offset=12), [], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], [], lineno=280, col_offset=8)], [], lineno=278, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=283, col_offset=16)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=284, col_offset=15), 'closed', Load(), lineno=284, col_offset=15), lineno=284, col_offset=11), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=285, col_offset=12), 'stderr', Load(), lineno=285, col_offset=12), 'write', Load(), lineno=285, col_offset=12), [Str('Iterator garbage collected without being closed', lineno=286, col_offset=16)], [], None, None, lineno=285, col_offset=12), lineno=285, col_offset=12)], [], lineno=284, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=287, col_offset=8), [Attribute(Name('self', Load(), lineno=287, col_offset=16), 'closed', Load(), lineno=287, col_offset=16), Str('Iterator garbage collected without being closed', lineno=288, col_offset=12)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=283, col_offset=4)], [], lineno=257, col_offset=0), FunctionDef('check_environ', arguments([Name('environ', Param(), lineno=290, col_offset=18)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=291, col_offset=4), [Compare(Call(Name('type', Load(), lineno=291, col_offset=12), [Name('environ', Load(), lineno=291, col_offset=17)], [], None, None, lineno=291, col_offset=12), [Is()], [Name('DictType', Load(), lineno=291, col_offset=29)], lineno=291, col_offset=12), BinOp(Str('Environment is not of the right type: %r (environment: %r)', lineno=292, col_offset=8), Mod(), Tuple([Call(Name('type', Load(), lineno=293, col_offset=11), [Name('environ', Load(), lineno=293, col_offset=16)], [], None, None, lineno=293, col_offset=11), Name('environ', Load(), lineno=293, col_offset=26)], Load(), lineno=293, col_offset=11), lineno=292, col_offset=8)], [], None, None, lineno=291, col_offset=4), lineno=291, col_offset=4), For(Name('key', Store(), lineno=295, col_offset=8), List([Str('REQUEST_METHOD', lineno=295, col_offset=16), Str('SERVER_NAME', lineno=295, col_offset=34), Str('SERVER_PORT', lineno=295, col_offset=49), Str('wsgi.version', lineno=296, col_offset=16), Str('wsgi.input', lineno=296, col_offset=32), Str('wsgi.errors', lineno=296, col_offset=46), Str('wsgi.multithread', lineno=297, col_offset=16), Str('wsgi.multiprocess', lineno=297, col_offset=36), Str('wsgi.run_once', lineno=298, col_offset=16)], Load(), lineno=295, col_offset=15), [Expr(Call(Name('assert_', Load(), lineno=299, col_offset=8), [Compare(Name('key', Load(), lineno=299, col_offset=16), [In()], [Name('environ', Load(), lineno=299, col_offset=23)], lineno=299, col_offset=16), BinOp(Str('Environment missing required key: %r', lineno=300, col_offset=12), Mod(), Tuple([Name('key', Load(), lineno=300, col_offset=54)], Load(), lineno=300, col_offset=54), lineno=300, col_offset=12)], [], None, None, lineno=299, col_offset=8), lineno=299, col_offset=8)], [], lineno=295, col_offset=4), For(Name('key', Store(), lineno=302, col_offset=8), List([Str('HTTP_CONTENT_TYPE', lineno=302, col_offset=16), Str('HTTP_CONTENT_LENGTH', lineno=302, col_offset=37)], Load(), lineno=302, col_offset=15), [Expr(Call(Name('assert_', Load(), lineno=303, col_offset=8), [Compare(Name('key', Load(), lineno=303, col_offset=16), [NotIn()], [Name('environ', Load(), lineno=303, col_offset=27)], lineno=303, col_offset=16), BinOp(Str('Environment should not have the key: %s (use %s instead)', lineno=304, col_offset=12), Mod(), Tuple([Name('key', Load(), lineno=305, col_offset=34), Subscript(Name('key', Load(), lineno=305, col_offset=39), Slice(Num(5, lineno=305, col_offset=43), None, None), Load(), lineno=305, col_offset=39)], Load(), lineno=305, col_offset=34), lineno=304, col_offset=12)], [], None, None, lineno=303, col_offset=8), lineno=303, col_offset=8)], [], lineno=302, col_offset=4), If(Compare(Str('QUERY_STRING', lineno=307, col_offset=7), [NotIn()], [Name('environ', Load(), lineno=307, col_offset=29)], lineno=307, col_offset=7), [Expr(Call(Attribute(Name('warnings', Load(), lineno=308, col_offset=8), 'warn', Load(), lineno=308, col_offset=8), [Str('QUERY_STRING is not in the WSGI environment; the cgi module will use sys.argv when this variable is missing, so application errors are more likely', lineno=309, col_offset=12), Name('WSGIWarning', Load(), lineno=312, col_offset=12)], [], None, None, lineno=308, col_offset=8), lineno=308, col_offset=8)], [], lineno=307, col_offset=4), For(Name('key', Store(), lineno=314, col_offset=8), Call(Attribute(Name('environ', Load(), lineno=314, col_offset=15), 'keys', Load(), lineno=314, col_offset=15), [], [], None, None, lineno=314, col_offset=15), [If(Compare(Str('.', lineno=315, col_offset=11), [In()], [Name('key', Load(), lineno=315, col_offset=18)], lineno=315, col_offset=11), [Continue( lineno=317, col_offset=12)], [], lineno=315, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=318, col_offset=8), [Compare(Call(Name('type', Load(), lineno=318, col_offset=16), [Subscript(Name('environ', Load(), lineno=318, col_offset=21), Index(Name('key', Load(), lineno=318, col_offset=29)), Load(), lineno=318, col_offset=21)], [], None, None, lineno=318, col_offset=16), [Is()], [Name('StringType', Load(), lineno=318, col_offset=38)], lineno=318, col_offset=16), BinOp(Str('Environmental variable %s is not a string: %r (value: %r)', lineno=319, col_offset=12), Mod(), Tuple([Name('key', Load(), lineno=320, col_offset=15), Call(Name('type', Load(), lineno=320, col_offset=20), [Subscript(Name('environ', Load(), lineno=320, col_offset=25), Index(Name('key', Load(), lineno=320, col_offset=33)), Load(), lineno=320, col_offset=25)], [], None, None, lineno=320, col_offset=20), Subscript(Name('environ', Load(), lineno=320, col_offset=40), Index(Name('key', Load(), lineno=320, col_offset=48)), Load(), lineno=320, col_offset=40)], Load(), lineno=320, col_offset=15), lineno=319, col_offset=12)], [], None, None, lineno=318, col_offset=8), lineno=318, col_offset=8)], [], lineno=314, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=322, col_offset=4), [Compare(Call(Name('type', Load(), lineno=322, col_offset=12), [Subscript(Name('environ', Load(), lineno=322, col_offset=17), Index(Str('wsgi.version', lineno=322, col_offset=25)), Load(), lineno=322, col_offset=17)], [], None, None, lineno=322, col_offset=12), [Is()], [Name('TupleType', Load(), lineno=322, col_offset=45)], lineno=322, col_offset=12), BinOp(Str('wsgi.version should be a tuple (%r)', lineno=323, col_offset=8), Mod(), Tuple([Subscript(Name('environ', Load(), lineno=323, col_offset=49), Index(Str('wsgi.version', lineno=323, col_offset=57)), Load(), lineno=323, col_offset=49)], Load(), lineno=323, col_offset=49), lineno=323, col_offset=8)], [], None, None, lineno=322, col_offset=4), lineno=322, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=324, col_offset=4), [Compare(Subscript(Name('environ', Load(), lineno=324, col_offset=12), Index(Str('wsgi.url_scheme', lineno=324, col_offset=20)), Load(), lineno=324, col_offset=12), [In()], [Tuple([Str('http', lineno=324, col_offset=43), Str('https', lineno=324, col_offset=51)], Load(), lineno=324, col_offset=43)], lineno=324, col_offset=12), BinOp(Str('wsgi.url_scheme unknown: %r', lineno=325, col_offset=8), Mod(), Subscript(Name('environ', Load(), lineno=325, col_offset=40), Index(Str('wsgi.url_scheme', lineno=325, col_offset=48)), Load(), lineno=325, col_offset=40), lineno=325, col_offset=8)], [], None, None, lineno=324, col_offset=4), lineno=324, col_offset=4), Expr(Call(Name('check_input', Load(), lineno=327, col_offset=4), [Subscript(Name('environ', Load(), lineno=327, col_offset=16), Index(Str('wsgi.input', lineno=327, col_offset=24)), Load(), lineno=327, col_offset=16)], [], None, None, lineno=327, col_offset=4), lineno=327, col_offset=4), Expr(Call(Name('check_errors', Load(), lineno=328, col_offset=4), [Subscript(Name('environ', Load(), lineno=328, col_offset=17), Index(Str('wsgi.errors', lineno=328, col_offset=25)), Load(), lineno=328, col_offset=17)], [], None, None, lineno=328, col_offset=4), lineno=328, col_offset=4), If(Compare(Subscript(Name('environ', Load(), lineno=331, col_offset=7), Index(Str('REQUEST_METHOD', lineno=331, col_offset=15)), Load(), lineno=331, col_offset=7), [NotIn()], [Tuple([Str('GET', lineno=332, col_offset=8), Str('HEAD', lineno=332, col_offset=15), Str('POST', lineno=332, col_offset=23), Str('OPTIONS', lineno=332, col_offset=31), Str('PUT', lineno=332, col_offset=41), Str('DELETE', lineno=332, col_offset=47), Str('TRACE', lineno=332, col_offset=56)], Load(), lineno=332, col_offset=8)], lineno=331, col_offset=7), [Expr(Call(Attribute(Name('warnings', Load(), lineno=333, col_offset=8), 'warn', Load(), lineno=333, col_offset=8), [BinOp(Str('Unknown REQUEST_METHOD: %r', lineno=334, col_offset=12), Mod(), Subscript(Name('environ', Load(), lineno=334, col_offset=43), Index(Str('REQUEST_METHOD', lineno=334, col_offset=51)), Load(), lineno=334, col_offset=43), lineno=334, col_offset=12), Name('WSGIWarning', Load(), lineno=335, col_offset=12)], [], None, None, lineno=333, col_offset=8), lineno=333, col_offset=8)], [], lineno=331, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=337, col_offset=4), [BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('environ', Load(), lineno=337, col_offset=16), 'get', Load(), lineno=337, col_offset=16), [Str('SCRIPT_NAME', lineno=337, col_offset=28)], [], None, None, lineno=337, col_offset=16), lineno=337, col_offset=12), Call(Attribute(Subscript(Name('environ', Load(), lineno=338, col_offset=15), Index(Str('SCRIPT_NAME', lineno=338, col_offset=23)), Load(), lineno=338, col_offset=15), 'startswith', Load(), lineno=338, col_offset=15), [Str('/', lineno=338, col_offset=49)], [], None, None, lineno=338, col_offset=15)], lineno=337, col_offset=12), BinOp(Str("SCRIPT_NAME doesn't start with /: %r", lineno=339, col_offset=8), Mod(), Subscript(Name('environ', Load(), lineno=339, col_offset=49), Index(Str('SCRIPT_NAME', lineno=339, col_offset=57)), Load(), lineno=339, col_offset=49), lineno=339, col_offset=8)], [], None, None, lineno=337, col_offset=4), lineno=337, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=340, col_offset=4), [BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('environ', Load(), lineno=340, col_offset=16), 'get', Load(), lineno=340, col_offset=16), [Str('PATH_INFO', lineno=340, col_offset=28)], [], None, None, lineno=340, col_offset=16), lineno=340, col_offset=12), Call(Attribute(Subscript(Name('environ', Load(), lineno=341, col_offset=15), Index(Str('PATH_INFO', lineno=341, col_offset=23)), Load(), lineno=341, col_offset=15), 'startswith', Load(), lineno=341, col_offset=15), [Str('/', lineno=341, col_offset=47)], [], None, None, lineno=341, col_offset=15)], lineno=340, col_offset=12), BinOp(Str("PATH_INFO doesn't start with /: %r", lineno=342, col_offset=8), Mod(), Subscript(Name('environ', Load(), lineno=342, col_offset=47), Index(Str('PATH_INFO', lineno=342, col_offset=55)), Load(), lineno=342, col_offset=47), lineno=342, col_offset=8)], [], None, None, lineno=340, col_offset=4), lineno=340, col_offset=4), If(Call(Attribute(Name('environ', Load(), lineno=343, col_offset=7), 'get', Load(), lineno=343, col_offset=7), [Str('CONTENT_LENGTH', lineno=343, col_offset=19)], [], None, None, lineno=343, col_offset=7), [Expr(Call(Name('assert_', Load(), lineno=344, col_offset=8), [Compare(Call(Name('int', Load(), lineno=344, col_offset=16), [Subscript(Name('environ', Load(), lineno=344, col_offset=20), Index(Str('CONTENT_LENGTH', lineno=344, col_offset=28)), Load(), lineno=344, col_offset=20)], [], None, None, lineno=344, col_offset=16), [GtE()], [Num(0, lineno=344, col_offset=50)], lineno=344, col_offset=16), BinOp(Str('Invalid CONTENT_LENGTH: %r', lineno=345, col_offset=12), Mod(), Subscript(Name('environ', Load(), lineno=345, col_offset=43), Index(Str('CONTENT_LENGTH', lineno=345, col_offset=51)), Load(), lineno=345, col_offset=43), lineno=345, col_offset=12)], [], None, None, lineno=344, col_offset=8), lineno=344, col_offset=8)], [], lineno=343, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('environ', Load(), lineno=347, col_offset=11), 'get', Load(), lineno=347, col_offset=11), [Str('SCRIPT_NAME', lineno=347, col_offset=23)], [], None, None, lineno=347, col_offset=11), lineno=347, col_offset=7), [Expr(Call(Name('assert_', Load(), lineno=348, col_offset=8), [Compare(Str('PATH_INFO', lineno=348, col_offset=16), [In()], [Name('environ', Load(), lineno=348, col_offset=31)], lineno=348, col_offset=16), Str("One of SCRIPT_NAME or PATH_INFO are required (PATH_INFO should at least be '/' if SCRIPT_NAME is empty)", lineno=349, col_offset=12)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8)], [], lineno=347, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=351, col_offset=4), [Compare(Call(Attribute(Name('environ', Load(), lineno=351, col_offset=12), 'get', Load(), lineno=351, col_offset=12), [Str('SCRIPT_NAME', lineno=351, col_offset=24)], [], None, None, lineno=351, col_offset=12), [NotEq()], [Str('/', lineno=351, col_offset=42)], lineno=351, col_offset=12), Str("SCRIPT_NAME cannot be '/'; it should instead be '', and PATH_INFO should be '/'", lineno=352, col_offset=8)], [], None, None, lineno=351, col_offset=4), lineno=351, col_offset=4)], [], lineno=290, col_offset=0), FunctionDef('check_input', arguments([Name('wsgi_input', Param(), lineno=355, col_offset=16)], None, None, []), [For(Name('attr', Store(), lineno=356, col_offset=8), List([Str('read', lineno=356, col_offset=17), Str('readline', lineno=356, col_offset=25), Str('readlines', lineno=356, col_offset=37), Str('__iter__', lineno=356, col_offset=50)], Load(), lineno=356, col_offset=16), [Expr(Call(Name('assert_', Load(), lineno=357, col_offset=8), [Call(Name('hasattr', Load(), lineno=357, col_offset=16), [Name('wsgi_input', Load(), lineno=357, col_offset=24), Name('attr', Load(), lineno=357, col_offset=36)], [], None, None, lineno=357, col_offset=16), BinOp(Str("wsgi.input (%r) doesn't have the attribute %s", lineno=358, col_offset=12), Mod(), Tuple([Name('wsgi_input', Load(), lineno=359, col_offset=15), Name('attr', Load(), lineno=359, col_offset=27)], Load(), lineno=359, col_offset=15), lineno=358, col_offset=12)], [], None, None, lineno=357, col_offset=8), lineno=357, col_offset=8)], [], lineno=356, col_offset=4)], [], lineno=355, col_offset=0), FunctionDef('check_errors', arguments([Name('wsgi_errors', Param(), lineno=361, col_offset=17)], None, None, []), [For(Name('attr', Store(), lineno=362, col_offset=8), List([Str('flush', lineno=362, col_offset=17), Str('write', lineno=362, col_offset=26), Str('writelines', lineno=362, col_offset=35)], Load(), lineno=362, col_offset=16), [Expr(Call(Name('assert_', Load(), lineno=363, col_offset=8), [Call(Name('hasattr', Load(), lineno=363, col_offset=16), [Name('wsgi_errors', Load(), lineno=363, col_offset=24), Name('attr', Load(), lineno=363, col_offset=37)], [], None, None, lineno=363, col_offset=16), BinOp(Str("wsgi.errors (%r) doesn't have the attribute %s", lineno=364, col_offset=12), Mod(), Tuple([Name('wsgi_errors', Load(), lineno=365, col_offset=15), Name('attr', Load(), lineno=365, col_offset=28)], Load(), lineno=365, col_offset=15), lineno=364, col_offset=12)], [], None, None, lineno=363, col_offset=8), lineno=363, col_offset=8)], [], lineno=362, col_offset=4)], [], lineno=361, col_offset=0), FunctionDef('check_status', arguments([Name('status', Param(), lineno=367, col_offset=17)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=368, col_offset=4), [Compare(Call(Name('type', Load(), lineno=368, col_offset=12), [Name('status', Load(), lineno=368, col_offset=17)], [], None, None, lineno=368, col_offset=12), [Is()], [Name('StringType', Load(), lineno=368, col_offset=28)], lineno=368, col_offset=12), BinOp(Str('Status must be a string (not %r)', lineno=369, col_offset=8), Mod(), Name('status', Load(), lineno=369, col_offset=45), lineno=369, col_offset=8)], [], None, None, lineno=368, col_offset=4), lineno=368, col_offset=4), Assign([Name('status_code', Store(), lineno=371, col_offset=4)], Subscript(Call(Attribute(Name('status', Load(), lineno=371, col_offset=18), 'split', Load(), lineno=371, col_offset=18), [Name('None', Load(), lineno=371, col_offset=31), Num(1, lineno=371, col_offset=37)], [], None, None, lineno=371, col_offset=18), Index(Num(0, lineno=371, col_offset=40)), Load(), lineno=371, col_offset=18), lineno=371, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=372, col_offset=4), [Compare(Call(Name('len', Load(), lineno=372, col_offset=12), [Name('status_code', Load(), lineno=372, col_offset=16)], [], None, None, lineno=372, col_offset=12), [Eq()], [Num(3, lineno=372, col_offset=32)], lineno=372, col_offset=12), BinOp(Str('Status codes must be three characters: %r', lineno=373, col_offset=8), Mod(), Name('status_code', Load(), lineno=373, col_offset=54), lineno=373, col_offset=8)], [], None, None, lineno=372, col_offset=4), lineno=372, col_offset=4), Assign([Name('status_int', Store(), lineno=374, col_offset=4)], Call(Name('int', Load(), lineno=374, col_offset=17), [Name('status_code', Load(), lineno=374, col_offset=21)], [], None, None, lineno=374, col_offset=17), lineno=374, col_offset=4), Expr(Call(Name('assert_', Load(), lineno=375, col_offset=4), [Compare(Name('status_int', Load(), lineno=375, col_offset=12), [GtE()], [Num(100, lineno=375, col_offset=26)], lineno=375, col_offset=12), BinOp(Str('Status code is invalid: %r', lineno=375, col_offset=31), Mod(), Name('status_int', Load(), lineno=375, col_offset=62), lineno=375, col_offset=31)], [], None, None, lineno=375, col_offset=4), lineno=375, col_offset=4), If(BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=376, col_offset=7), [Name('status', Load(), lineno=376, col_offset=11)], [], None, None, lineno=376, col_offset=7), [Lt()], [Num(4, lineno=376, col_offset=21)], lineno=376, col_offset=7), Compare(Subscript(Name('status', Load(), lineno=376, col_offset=26), Index(Num(3, lineno=376, col_offset=33)), Load(), lineno=376, col_offset=26), [NotEq()], [Str(' ', lineno=376, col_offset=39)], lineno=376, col_offset=26)], lineno=376, col_offset=7), [Expr(Call(Attribute(Name('warnings', Load(), lineno=377, col_offset=8), 'warn', Load(), lineno=377, col_offset=8), [BinOp(Str('The status string (%r) should be a three-digit integer followed by a single space and a status explanation', lineno=378, col_offset=12), Mod(), Name('status', Load(), lineno=380, col_offset=14), lineno=378, col_offset=12), Name('WSGIWarning', Load(), lineno=380, col_offset=22)], [], None, None, lineno=377, col_offset=8), lineno=377, col_offset=8)], [], lineno=376, col_offset=4)], [], lineno=367, col_offset=0), FunctionDef('check_headers', arguments([Name('headers', Param(), lineno=382, col_offset=18)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=383, col_offset=4), [Compare(Call(Name('type', Load(), lineno=383, col_offset=12), [Name('headers', Load(), lineno=383, col_offset=17)], [], None, None, lineno=383, col_offset=12), [Is()], [Name('ListType', Load(), lineno=383, col_offset=29)], lineno=383, col_offset=12), BinOp(Str('Headers (%r) must be of type list: %r', lineno=384, col_offset=8), Mod(), Tuple([Name('headers', Load(), lineno=385, col_offset=11), Call(Name('type', Load(), lineno=385, col_offset=20), [Name('headers', Load(), lineno=385, col_offset=25)], [], None, None, lineno=385, col_offset=20)], Load(), lineno=385, col_offset=11), lineno=384, col_offset=8)], [], None, None, lineno=383, col_offset=4), lineno=383, col_offset=4), Assign([Name('header_names', Store(), lineno=386, col_offset=4)], Dict([], [], lineno=386, col_offset=19), lineno=386, col_offset=4), For(Name('item', Store(), lineno=387, col_offset=8), Name('headers', Load(), lineno=387, col_offset=16), [Expr(Call(Name('assert_', Load(), lineno=388, col_offset=8), [Compare(Call(Name('type', Load(), lineno=388, col_offset=16), [Name('item', Load(), lineno=388, col_offset=21)], [], None, None, lineno=388, col_offset=16), [Is()], [Name('TupleType', Load(), lineno=388, col_offset=30)], lineno=388, col_offset=16), BinOp(Str('Individual headers (%r) must be of type tuple: %r', lineno=389, col_offset=12), Mod(), Tuple([Name('item', Load(), lineno=390, col_offset=15), Call(Name('type', Load(), lineno=390, col_offset=21), [Name('item', Load(), lineno=390, col_offset=26)], [], None, None, lineno=390, col_offset=21)], Load(), lineno=390, col_offset=15), lineno=389, col_offset=12)], [], None, None, lineno=388, col_offset=8), lineno=388, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=391, col_offset=8), [Compare(Call(Name('len', Load(), lineno=391, col_offset=16), [Name('item', Load(), lineno=391, col_offset=20)], [], None, None, lineno=391, col_offset=16), [Eq()], [Num(2, lineno=391, col_offset=29)], lineno=391, col_offset=16)], [], None, None, lineno=391, col_offset=8), lineno=391, col_offset=8), Assign([Tuple([Name('name', Store(), lineno=392, col_offset=8), Name('value', Store(), lineno=392, col_offset=14)], Store(), lineno=392, col_offset=8)], Name('item', Load(), lineno=392, col_offset=22), lineno=392, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=393, col_offset=8), [Compare(Call(Attribute(Name('name', Load(), lineno=393, col_offset=16), 'lower', Load(), lineno=393, col_offset=16), [], [], None, None, lineno=393, col_offset=16), [NotEq()], [Str('status', lineno=393, col_offset=32)], lineno=393, col_offset=16), BinOp(Str('The Status header cannot be used; it conflicts with CGI script, and HTTP status is not given through headers (value: %r).', lineno=394, col_offset=12), Mod(), Name('value', Load(), lineno=396, col_offset=29), lineno=394, col_offset=12)], [], None, None, lineno=393, col_offset=8), lineno=393, col_offset=8), Assign([Subscript(Name('header_names', Load(), lineno=397, col_offset=8), Index(Call(Attribute(Name('name', Load(), lineno=397, col_offset=21), 'lower', Load(), lineno=397, col_offset=21), [], [], None, None, lineno=397, col_offset=21)), Store(), lineno=397, col_offset=8)], Name('None', Load(), lineno=397, col_offset=37), lineno=397, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=398, col_offset=8), [BoolOp(And(), [Compare(Str('\n', lineno=398, col_offset=16), [NotIn()], [Name('name', Load(), lineno=398, col_offset=28)], lineno=398, col_offset=16), Compare(Str(':', lineno=398, col_offset=37), [NotIn()], [Name('name', Load(), lineno=398, col_offset=48)], lineno=398, col_offset=37)], lineno=398, col_offset=16), BinOp(Str("Header names may not contain ':' or '\\n': %r", lineno=399, col_offset=12), Mod(), Name('name', Load(), lineno=399, col_offset=62), lineno=399, col_offset=12)], [], None, None, lineno=398, col_offset=8), lineno=398, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=400, col_offset=8), [Call(Attribute(Name('header_re', Load(), lineno=400, col_offset=16), 'search', Load(), lineno=400, col_offset=16), [Name('name', Load(), lineno=400, col_offset=33)], [], None, None, lineno=400, col_offset=16), BinOp(Str('Bad header name: %r', lineno=400, col_offset=40), Mod(), Name('name', Load(), lineno=400, col_offset=64), lineno=400, col_offset=40)], [], None, None, lineno=400, col_offset=8), lineno=400, col_offset=8), Expr(Call(Name('assert_', Load(), lineno=401, col_offset=8), [BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('name', Load(), lineno=401, col_offset=20), 'endswith', Load(), lineno=401, col_offset=20), [Str('-', lineno=401, col_offset=34)], [], None, None, lineno=401, col_offset=20), lineno=401, col_offset=16), UnaryOp(Not(), Call(Attribute(Name('name', Load(), lineno=401, col_offset=47), 'endswith', Load(), lineno=401, col_offset=47), [Str('_', lineno=401, col_offset=61)], [], None, None, lineno=401, col_offset=47), lineno=401, col_offset=43)], lineno=401, col_offset=16), BinOp(Str("Names may not end in '-' or '_': %r", lineno=402, col_offset=12), Mod(), Name('name', Load(), lineno=402, col_offset=52), lineno=402, col_offset=12)], [], None, None, lineno=401, col_offset=8), lineno=401, col_offset=8), If(Call(Attribute(Name('bad_header_value_re', Load(), lineno=403, col_offset=11), 'search', Load(), lineno=403, col_offset=11), [Name('value', Load(), lineno=403, col_offset=38)], [], None, None, lineno=403, col_offset=11), [Expr(Call(Name('assert_', Load(), lineno=404, col_offset=12), [Num(0, lineno=404, col_offset=20), BinOp(Str('Bad header value: %r (bad char: %r)', lineno=404, col_offset=23), Mod(), Tuple([Name('value', Load(), lineno=405, col_offset=15), Call(Attribute(Call(Attribute(Name('bad_header_value_re', Load(), lineno=405, col_offset=22), 'search', Load(), lineno=405, col_offset=22), [Name('value', Load(), lineno=405, col_offset=49)], [], None, None, lineno=405, col_offset=22), 'group', Load(), lineno=405, col_offset=22), [Num(0, lineno=405, col_offset=62)], [], None, None, lineno=405, col_offset=22)], Load(), lineno=405, col_offset=15), lineno=404, col_offset=23)], [], None, None, lineno=404, col_offset=12), lineno=404, col_offset=12)], [], lineno=403, col_offset=8)], [], lineno=387, col_offset=4)], [], lineno=382, col_offset=0), FunctionDef('check_content_type', arguments([Name('status', Param(), lineno=407, col_offset=23), Name('headers', Param(), lineno=407, col_offset=31)], None, None, []), [Assign([Name('code', Store(), lineno=408, col_offset=4)], Call(Name('int', Load(), lineno=408, col_offset=11), [Subscript(Call(Attribute(Name('status', Load(), lineno=408, col_offset=15), 'split', Load(), lineno=408, col_offset=15), [Name('None', Load(), lineno=408, col_offset=28), Num(1, lineno=408, col_offset=34)], [], None, None, lineno=408, col_offset=15), Index(Num(0, lineno=408, col_offset=37)), Load(), lineno=408, col_offset=15)], [], None, None, lineno=408, col_offset=11), lineno=408, col_offset=4), Assign([Name('NO_MESSAGE_BODY', Store(), lineno=411, col_offset=4)], Tuple([Num(204, lineno=411, col_offset=23), Num(304, lineno=411, col_offset=28)], Load(), lineno=411, col_offset=23), lineno=411, col_offset=4), For(Tuple([Name('name', Store(), lineno=412, col_offset=8), Name('value', Store(), lineno=412, col_offset=14)], Store(), lineno=412, col_offset=8), Name('headers', Load(), lineno=412, col_offset=23), [If(Compare(Call(Attribute(Name('name', Load(), lineno=413, col_offset=11), 'lower', Load(), lineno=413, col_offset=11), [], [], None, None, lineno=413, col_offset=11), [Eq()], [Str('content-type', lineno=413, col_offset=27)], lineno=413, col_offset=11), [If(Compare(Name('code', Load(), lineno=414, col_offset=15), [NotIn()], [Name('NO_MESSAGE_BODY', Load(), lineno=414, col_offset=27)], lineno=414, col_offset=15), [Return(None, lineno=415, col_offset=16)], [], lineno=414, col_offset=12), Expr(Call(Name('assert_', Load(), lineno=416, col_offset=12), [Num(0, lineno=416, col_offset=20), BinOp(Str('Content-Type header found in a %s response, which must not return content.', lineno=416, col_offset=24), Mod(), Name('code', Load(), lineno=417, col_offset=60), lineno=416, col_offset=23)], [], None, None, lineno=416, col_offset=12), lineno=416, col_offset=12)], [], lineno=413, col_offset=8)], [], lineno=412, col_offset=4), If(Compare(Name('code', Load(), lineno=418, col_offset=7), [NotIn()], [Name('NO_MESSAGE_BODY', Load(), lineno=418, col_offset=19)], lineno=418, col_offset=7), [Expr(Call(Name('assert_', Load(), lineno=419, col_offset=8), [Num(0, lineno=419, col_offset=16), BinOp(Str('No Content-Type header found in headers (%s)', lineno=419, col_offset=19), Mod(), Name('headers', Load(), lineno=419, col_offset=68), lineno=419, col_offset=19)], [], None, None, lineno=419, col_offset=8), lineno=419, col_offset=8)], [], lineno=418, col_offset=4)], [], lineno=407, col_offset=0), FunctionDef('check_exc_info', arguments([Name('exc_info', Param(), lineno=421, col_offset=19)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=422, col_offset=4), [BoolOp(Or(), [Compare(Name('exc_info', Load(), lineno=422, col_offset=12), [Is()], [Name('None', Load(), lineno=422, col_offset=24)], lineno=422, col_offset=12), Compare(Call(Name('type', Load(), lineno=422, col_offset=32), [Name('exc_info', Load(), lineno=422, col_offset=37)], [], None, None, lineno=422, col_offset=32), [Is()], [Call(Name('type', Load(), lineno=422, col_offset=50), [Tuple([], Load(), lineno=422, col_offset=55)], [], None, None, lineno=422, col_offset=50)], lineno=422, col_offset=32)], lineno=422, col_offset=12), BinOp(Str('exc_info (%r) is not a tuple: %r', lineno=423, col_offset=8), Mod(), Tuple([Name('exc_info', Load(), lineno=423, col_offset=46), Call(Name('type', Load(), lineno=423, col_offset=56), [Name('exc_info', Load(), lineno=423, col_offset=61)], [], None, None, lineno=423, col_offset=56)], Load(), lineno=423, col_offset=46), lineno=423, col_offset=8)], [], None, None, lineno=422, col_offset=4), lineno=422, col_offset=4)], [], lineno=421, col_offset=0), FunctionDef('check_iterator', arguments([Name('iterator', Param(), lineno=426, col_offset=19)], None, None, []), [Expr(Call(Name('assert_', Load(), lineno=430, col_offset=4), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=430, col_offset=16), [Name('iterator', Load(), lineno=430, col_offset=27), Name('str', Load(), lineno=430, col_offset=37)], [], None, None, lineno=430, col_offset=16), lineno=430, col_offset=12), Str('You should not return a string as your application iterator, instead return a single-item list containing that string.', lineno=431, col_offset=8)], [], None, None, lineno=430, col_offset=4), lineno=430, col_offset=4)], [], lineno=426, col_offset=0)])
