Module([Expr(Str('Module doctest -- a framework for running examples in docstrings.\n\nIn simplest use, end each module M to be tested with:\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == "__main__":\n    _test()\n\nThen running the module as a script will cause the examples in the\ndocstrings to get executed and verified:\n\npython M.py\n\nThis won\'t display anything unless an example fails, in which case the\nfailing example(s) and the cause(s) of the failure(s) are printed to stdout\n(why not stderr? because stderr is a lame hack <0.2 wink>), and the final\nline of output is "Test failed.".\n\nRun it with the -v switch instead:\n\npython M.py -v\n\nand a detailed report of all examples tried is printed to stdout, along\nwith assorted summaries at the end.\n\nYou can force verbose mode by passing "verbose=True" to testmod, or prohibit\nit by passing "verbose=False".  In either of those cases, sys.argv is not\nexamined by testmod.\n\nThere are a variety of other ways to run doctests, including integration\nwith the unittest framework, and support for running non-Python text\nfiles containing doctests.  There are also many ways to override parts\nof doctest\'s default behaviors.  See the Library Reference Manual for\ndetails.\n', lineno=46, col_offset=-1), lineno=46, col_offset=-1), Assign([Name('__docformat__', Store(), lineno=48, col_offset=0)], Str('reStructuredText en', lineno=48, col_offset=16), lineno=48, col_offset=0), Assign([Name('__all__', Store(), lineno=50, col_offset=0)], List([Str('register_optionflag', lineno=52, col_offset=4), Str('DONT_ACCEPT_TRUE_FOR_1', lineno=53, col_offset=4), Str('DONT_ACCEPT_BLANKLINE', lineno=54, col_offset=4), Str('NORMALIZE_WHITESPACE', lineno=55, col_offset=4), Str('ELLIPSIS', lineno=56, col_offset=4), Str('SKIP', lineno=57, col_offset=4), Str('IGNORE_EXCEPTION_DETAIL', lineno=58, col_offset=4), Str('COMPARISON_FLAGS', lineno=59, col_offset=4), Str('REPORT_UDIFF', lineno=60, col_offset=4), Str('REPORT_CDIFF', lineno=61, col_offset=4), Str('REPORT_NDIFF', lineno=62, col_offset=4), Str('REPORT_ONLY_FIRST_FAILURE', lineno=63, col_offset=4), Str('REPORTING_FLAGS', lineno=64, col_offset=4), Str('Example', lineno=67, col_offset=4), Str('DocTest', lineno=68, col_offset=4), Str('DocTestParser', lineno=70, col_offset=4), Str('DocTestFinder', lineno=72, col_offset=4), Str('DocTestRunner', lineno=74, col_offset=4), Str('OutputChecker', lineno=75, col_offset=4), Str('DocTestFailure', lineno=76, col_offset=4), Str('UnexpectedException', lineno=77, col_offset=4), Str('DebugRunner', lineno=78, col_offset=4), Str('testmod', lineno=80, col_offset=4), Str('testfile', lineno=81, col_offset=4), Str('run_docstring_examples', lineno=82, col_offset=4), Str('Tester', lineno=84, col_offset=4), Str('DocTestSuite', lineno=86, col_offset=4), Str('DocFileSuite', lineno=87, col_offset=4), Str('set_unittest_reportflags', lineno=88, col_offset=4), Str('script_from_examples', lineno=90, col_offset=4), Str('testsource', lineno=91, col_offset=4), Str('debug_src', lineno=92, col_offset=4), Str('debug', lineno=93, col_offset=4)], Load(), lineno=50, col_offset=10), lineno=50, col_offset=0), Import([alias('__future__', None)], lineno=96, col_offset=0), Import([alias('sys', None), alias('traceback', None), alias('inspect', None), alias('linecache', None), alias('os', None), alias('re', None)], lineno=98, col_offset=0), Import([alias('unittest', None), alias('difflib', None), alias('pdb', None), alias('tempfile', None)], lineno=99, col_offset=0), Import([alias('warnings', None)], lineno=100, col_offset=0), ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=101, col_offset=0), ImportFrom('collections', [alias('namedtuple', None)], 0, lineno=102, col_offset=0), Assign([Name('TestResults', Store(), lineno=104, col_offset=0)], Call(Name('namedtuple', Load(), lineno=104, col_offset=14), [Str('TestResults', lineno=104, col_offset=25), Str('failed attempted', lineno=104, col_offset=40)], [], None, None, lineno=104, col_offset=14), lineno=104, col_offset=0), Assign([Name('OPTIONFLAGS_BY_NAME', Store(), lineno=127, col_offset=0)], Dict([], [], lineno=127, col_offset=22), lineno=127, col_offset=0), FunctionDef('register_optionflag', arguments([Name('name', Param(), lineno=128, col_offset=24)], None, None, []), [Return(Call(Attribute(Name('OPTIONFLAGS_BY_NAME', Load(), lineno=130, col_offset=11), 'setdefault', Load(), lineno=130, col_offset=11), [Name('name', Load(), lineno=130, col_offset=42), BinOp(Num(1, lineno=130, col_offset=48), LShift(), Call(Name('len', Load(), lineno=130, col_offset=53), [Name('OPTIONFLAGS_BY_NAME', Load(), lineno=130, col_offset=57)], [], None, None, lineno=130, col_offset=53), lineno=130, col_offset=48)], [], None, None, lineno=130, col_offset=11), lineno=130, col_offset=4)], [], lineno=128, col_offset=0), Assign([Name('DONT_ACCEPT_TRUE_FOR_1', Store(), lineno=132, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=132, col_offset=25), [Str('DONT_ACCEPT_TRUE_FOR_1', lineno=132, col_offset=45)], [], None, None, lineno=132, col_offset=25), lineno=132, col_offset=0), Assign([Name('DONT_ACCEPT_BLANKLINE', Store(), lineno=133, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=133, col_offset=24), [Str('DONT_ACCEPT_BLANKLINE', lineno=133, col_offset=44)], [], None, None, lineno=133, col_offset=24), lineno=133, col_offset=0), Assign([Name('NORMALIZE_WHITESPACE', Store(), lineno=134, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=134, col_offset=23), [Str('NORMALIZE_WHITESPACE', lineno=134, col_offset=43)], [], None, None, lineno=134, col_offset=23), lineno=134, col_offset=0), Assign([Name('ELLIPSIS', Store(), lineno=135, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=135, col_offset=11), [Str('ELLIPSIS', lineno=135, col_offset=31)], [], None, None, lineno=135, col_offset=11), lineno=135, col_offset=0), Assign([Name('SKIP', Store(), lineno=136, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=136, col_offset=7), [Str('SKIP', lineno=136, col_offset=27)], [], None, None, lineno=136, col_offset=7), lineno=136, col_offset=0), Assign([Name('IGNORE_EXCEPTION_DETAIL', Store(), lineno=137, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=137, col_offset=26), [Str('IGNORE_EXCEPTION_DETAIL', lineno=137, col_offset=46)], [], None, None, lineno=137, col_offset=26), lineno=137, col_offset=0), Assign([Name('COMPARISON_FLAGS', Store(), lineno=139, col_offset=0)], BinOp(BinOp(BinOp(BinOp(BinOp(Name('DONT_ACCEPT_TRUE_FOR_1', Load(), lineno=139, col_offset=20), BitOr(), Name('DONT_ACCEPT_BLANKLINE', Load(), lineno=140, col_offset=20), lineno=139, col_offset=20), BitOr(), Name('NORMALIZE_WHITESPACE', Load(), lineno=141, col_offset=20), lineno=140, col_offset=42), BitOr(), Name('ELLIPSIS', Load(), lineno=142, col_offset=20), lineno=141, col_offset=41), BitOr(), Name('SKIP', Load(), lineno=143, col_offset=20), lineno=142, col_offset=29), BitOr(), Name('IGNORE_EXCEPTION_DETAIL', Load(), lineno=144, col_offset=20), lineno=143, col_offset=25), lineno=139, col_offset=0), Assign([Name('REPORT_UDIFF', Store(), lineno=146, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=146, col_offset=15), [Str('REPORT_UDIFF', lineno=146, col_offset=35)], [], None, None, lineno=146, col_offset=15), lineno=146, col_offset=0), Assign([Name('REPORT_CDIFF', Store(), lineno=147, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=147, col_offset=15), [Str('REPORT_CDIFF', lineno=147, col_offset=35)], [], None, None, lineno=147, col_offset=15), lineno=147, col_offset=0), Assign([Name('REPORT_NDIFF', Store(), lineno=148, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=148, col_offset=15), [Str('REPORT_NDIFF', lineno=148, col_offset=35)], [], None, None, lineno=148, col_offset=15), lineno=148, col_offset=0), Assign([Name('REPORT_ONLY_FIRST_FAILURE', Store(), lineno=149, col_offset=0)], Call(Name('register_optionflag', Load(), lineno=149, col_offset=28), [Str('REPORT_ONLY_FIRST_FAILURE', lineno=149, col_offset=48)], [], None, None, lineno=149, col_offset=28), lineno=149, col_offset=0), Assign([Name('REPORTING_FLAGS', Store(), lineno=151, col_offset=0)], BinOp(BinOp(BinOp(Name('REPORT_UDIFF', Load(), lineno=151, col_offset=19), BitOr(), Name('REPORT_CDIFF', Load(), lineno=152, col_offset=19), lineno=151, col_offset=19), BitOr(), Name('REPORT_NDIFF', Load(), lineno=153, col_offset=19), lineno=152, col_offset=32), BitOr(), Name('REPORT_ONLY_FIRST_FAILURE', Load(), lineno=154, col_offset=19), lineno=153, col_offset=32), lineno=151, col_offset=0), Assign([Name('BLANKLINE_MARKER', Store(), lineno=157, col_offset=0)], Str('<BLANKLINE>', lineno=157, col_offset=19), lineno=157, col_offset=0), Assign([Name('ELLIPSIS_MARKER', Store(), lineno=158, col_offset=0)], Str('...', lineno=158, col_offset=18), lineno=158, col_offset=0), FunctionDef('_extract_future_flags', arguments([Name('globs', Param(), lineno=178, col_offset=26)], None, None, []), [Expr(Str('\n    Return the compiler-flags associated with the future features that\n    have been imported into the given namespace (globs).\n    ', lineno=182, col_offset=-1), lineno=182, col_offset=-1), Assign([Name('flags', Store(), lineno=183, col_offset=4)], Num(0, lineno=183, col_offset=12), lineno=183, col_offset=4), For(Name('fname', Store(), lineno=184, col_offset=8), Attribute(Name('__future__', Load(), lineno=184, col_offset=17), 'all_feature_names', Load(), lineno=184, col_offset=17), [Assign([Name('feature', Store(), lineno=185, col_offset=8)], Call(Attribute(Name('globs', Load(), lineno=185, col_offset=18), 'get', Load(), lineno=185, col_offset=18), [Name('fname', Load(), lineno=185, col_offset=28), Name('None', Load(), lineno=185, col_offset=35)], [], None, None, lineno=185, col_offset=18), lineno=185, col_offset=8), If(Compare(Name('feature', Load(), lineno=186, col_offset=11), [Is()], [Call(Name('getattr', Load(), lineno=186, col_offset=22), [Name('__future__', Load(), lineno=186, col_offset=30), Name('fname', Load(), lineno=186, col_offset=42)], [], None, None, lineno=186, col_offset=22)], lineno=186, col_offset=11), [AugAssign(Name('flags', Store(), lineno=187, col_offset=12), BitOr(), Attribute(Name('feature', Load(), lineno=187, col_offset=21), 'compiler_flag', Load(), lineno=187, col_offset=21), lineno=187, col_offset=12)], [], lineno=186, col_offset=8)], [], lineno=184, col_offset=4), Return(Name('flags', Load(), lineno=188, col_offset=11), lineno=188, col_offset=4)], [], lineno=178, col_offset=0), FunctionDef('_normalize_module', arguments([Name('module', Param(), lineno=190, col_offset=22), Name('depth', Param(), lineno=190, col_offset=30)], None, None, [Num(2, lineno=190, col_offset=36)]), [Expr(Str('\n    Return the module specified by `module`.  In particular:\n      - If `module` is a module, then return module.\n      - If `module` is a string, then import and return the\n        module with that name.\n      - If `module` is None, then return the calling module.\n        The calling module is assumed to be the module of\n        the stack frame at the given depth in the call stack.\n    ', lineno=199, col_offset=-1), lineno=199, col_offset=-1), If(Call(Attribute(Name('inspect', Load(), lineno=200, col_offset=7), 'ismodule', Load(), lineno=200, col_offset=7), [Name('module', Load(), lineno=200, col_offset=24)], [], None, None, lineno=200, col_offset=7), [Return(Name('module', Load(), lineno=201, col_offset=15), lineno=201, col_offset=8)], [If(Call(Name('isinstance', Load(), lineno=202, col_offset=9), [Name('module', Load(), lineno=202, col_offset=20), Tuple([Name('str', Load(), lineno=202, col_offset=29), Name('unicode', Load(), lineno=202, col_offset=34)], Load(), lineno=202, col_offset=29)], [], None, None, lineno=202, col_offset=9), [Return(Call(Name('__import__', Load(), lineno=203, col_offset=15), [Name('module', Load(), lineno=203, col_offset=26), Call(Name('globals', Load(), lineno=203, col_offset=34), [], [], None, None, lineno=203, col_offset=34), Call(Name('locals', Load(), lineno=203, col_offset=45), [], [], None, None, lineno=203, col_offset=45), List([Str('*', lineno=203, col_offset=56)], Load(), lineno=203, col_offset=55)], [], None, None, lineno=203, col_offset=15), lineno=203, col_offset=8)], [If(Compare(Name('module', Load(), lineno=204, col_offset=9), [Is()], [Name('None', Load(), lineno=204, col_offset=19)], lineno=204, col_offset=9), [Return(Subscript(Attribute(Name('sys', Load(), lineno=205, col_offset=15), 'modules', Load(), lineno=205, col_offset=15), Index(Subscript(Attribute(Call(Attribute(Name('sys', Load(), lineno=205, col_offset=27), '_getframe', Load(), lineno=205, col_offset=27), [Name('depth', Load(), lineno=205, col_offset=41)], [], None, None, lineno=205, col_offset=27), 'f_globals', Load(), lineno=205, col_offset=27), Index(Str('__name__', lineno=205, col_offset=58)), Load(), lineno=205, col_offset=27)), Load(), lineno=205, col_offset=15), lineno=205, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=207, col_offset=14), [Str('Expected a module, string, or None', lineno=207, col_offset=24)], [], None, None, lineno=207, col_offset=14), None, None, lineno=207, col_offset=8)], lineno=204, col_offset=9)], lineno=202, col_offset=9)], lineno=200, col_offset=4)], [], lineno=190, col_offset=0), FunctionDef('_load_testfile', arguments([Name('filename', Param(), lineno=209, col_offset=19), Name('package', Param(), lineno=209, col_offset=29), Name('module_relative', Param(), lineno=209, col_offset=38)], None, None, []), [If(Name('module_relative', Load(), lineno=210, col_offset=7), [Assign([Name('package', Store(), lineno=211, col_offset=8)], Call(Name('_normalize_module', Load(), lineno=211, col_offset=18), [Name('package', Load(), lineno=211, col_offset=36), Num(3, lineno=211, col_offset=45)], [], None, None, lineno=211, col_offset=18), lineno=211, col_offset=8), Assign([Name('filename', Store(), lineno=212, col_offset=8)], Call(Name('_module_relative_path', Load(), lineno=212, col_offset=19), [Name('package', Load(), lineno=212, col_offset=41), Name('filename', Load(), lineno=212, col_offset=50)], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=8), If(Call(Name('hasattr', Load(), lineno=213, col_offset=11), [Name('package', Load(), lineno=213, col_offset=19), Str('__loader__', lineno=213, col_offset=28)], [], None, None, lineno=213, col_offset=11), [If(Call(Name('hasattr', Load(), lineno=214, col_offset=15), [Attribute(Name('package', Load(), lineno=214, col_offset=23), '__loader__', Load(), lineno=214, col_offset=23), Str('get_data', lineno=214, col_offset=43)], [], None, None, lineno=214, col_offset=15), [Assign([Name('file_contents', Store(), lineno=215, col_offset=16)], Call(Attribute(Attribute(Name('package', Load(), lineno=215, col_offset=32), '__loader__', Load(), lineno=215, col_offset=32), 'get_data', Load(), lineno=215, col_offset=32), [Name('filename', Load(), lineno=215, col_offset=60)], [], None, None, lineno=215, col_offset=32), lineno=215, col_offset=16), Return(Tuple([Call(Attribute(Name('file_contents', Load(), lineno=218, col_offset=23), 'replace', Load(), lineno=218, col_offset=23), [Attribute(Name('os', Load(), lineno=218, col_offset=45), 'linesep', Load(), lineno=218, col_offset=45), Str('\n', lineno=218, col_offset=57)], [], None, None, lineno=218, col_offset=23), Name('filename', Load(), lineno=218, col_offset=64)], Load(), lineno=218, col_offset=23), lineno=218, col_offset=16)], [], lineno=214, col_offset=12)], [], lineno=213, col_offset=8)], [], lineno=210, col_offset=4), With(Call(Name('open', Load(), lineno=219, col_offset=9), [Name('filename', Load(), lineno=219, col_offset=14)], [], None, None, lineno=219, col_offset=9), Name('f', Store(), lineno=219, col_offset=27), [Return(Tuple([Call(Attribute(Name('f', Load(), lineno=220, col_offset=15), 'read', Load(), lineno=220, col_offset=15), [], [], None, None, lineno=220, col_offset=15), Name('filename', Load(), lineno=220, col_offset=25)], Load(), lineno=220, col_offset=15), lineno=220, col_offset=8)], lineno=219, col_offset=9)], [], lineno=209, col_offset=0), Assign([Name('_encoding', Store(), lineno=223, col_offset=0)], BoolOp(Or(), [Call(Name('getattr', Load(), lineno=223, col_offset=12), [Attribute(Name('sys', Load(), lineno=223, col_offset=20), '__stdout__', Load(), lineno=223, col_offset=20), Str('encoding', lineno=223, col_offset=36), Name('None', Load(), lineno=223, col_offset=48)], [], None, None, lineno=223, col_offset=12), Str('utf-8', lineno=223, col_offset=57)], lineno=223, col_offset=12), lineno=223, col_offset=0), FunctionDef('_indent', arguments([Name('s', Param(), lineno=225, col_offset=12), Name('indent', Param(), lineno=225, col_offset=15)], None, None, [Num(4, lineno=225, col_offset=22)]), [Expr(Str('\n    Add the given number of space characters to the beginning of\n    every non-blank line in `s`, and return the result.\n    If the string `s` is Unicode, it is encoded using the stdout\n    encoding and the `backslashreplace` error handler.\n    ', lineno=231, col_offset=-1), lineno=231, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=232, col_offset=7), [Name('s', Load(), lineno=232, col_offset=18), Name('unicode', Load(), lineno=232, col_offset=21)], [], None, None, lineno=232, col_offset=7), [Assign([Name('s', Store(), lineno=233, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=233, col_offset=12), 'encode', Load(), lineno=233, col_offset=12), [Name('_encoding', Load(), lineno=233, col_offset=21), Str('backslashreplace', lineno=233, col_offset=32)], [], None, None, lineno=233, col_offset=12), lineno=233, col_offset=8)], [], lineno=232, col_offset=4), Return(Call(Attribute(Name('re', Load(), lineno=235, col_offset=11), 'sub', Load(), lineno=235, col_offset=11), [Str('(?m)^(?!$)', lineno=235, col_offset=18), BinOp(Name('indent', Load(), lineno=235, col_offset=32), Mult(), Str(' ', lineno=235, col_offset=39), lineno=235, col_offset=32), Name('s', Load(), lineno=235, col_offset=44)], [], None, None, lineno=235, col_offset=11), lineno=235, col_offset=4)], [], lineno=225, col_offset=0), FunctionDef('_exception_traceback', arguments([Name('exc_info', Param(), lineno=237, col_offset=25)], None, None, []), [Expr(Str('\n    Return a string containing a traceback message for the given\n    exc_info tuple (as returned by sys.exc_info()).\n    ', lineno=241, col_offset=-1), lineno=241, col_offset=-1), Assign([Name('excout', Store(), lineno=243, col_offset=4)], Call(Name('StringIO', Load(), lineno=243, col_offset=13), [], [], None, None, lineno=243, col_offset=13), lineno=243, col_offset=4), Assign([Tuple([Name('exc_type', Store(), lineno=244, col_offset=4), Name('exc_val', Store(), lineno=244, col_offset=14), Name('exc_tb', Store(), lineno=244, col_offset=23)], Store(), lineno=244, col_offset=4)], Name('exc_info', Load(), lineno=244, col_offset=32), lineno=244, col_offset=4), Expr(Call(Attribute(Name('traceback', Load(), lineno=245, col_offset=4), 'print_exception', Load(), lineno=245, col_offset=4), [Name('exc_type', Load(), lineno=245, col_offset=30), Name('exc_val', Load(), lineno=245, col_offset=40), Name('exc_tb', Load(), lineno=245, col_offset=49)], [keyword('file', Name('excout', Load(), lineno=245, col_offset=62))], None, None, lineno=245, col_offset=4), lineno=245, col_offset=4), Return(Call(Attribute(Name('excout', Load(), lineno=246, col_offset=11), 'getvalue', Load(), lineno=246, col_offset=11), [], [], None, None, lineno=246, col_offset=11), lineno=246, col_offset=4)], [], lineno=237, col_offset=0), ClassDef('_SpoofOut', [Name('StringIO', Load(), lineno=249, col_offset=16)], [FunctionDef('getvalue', arguments([Name('self', Param(), lineno=250, col_offset=17)], None, None, []), [Assign([Name('result', Store(), lineno=251, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=251, col_offset=17), 'getvalue', Load(), lineno=251, col_offset=17), [Name('self', Load(), lineno=251, col_offset=35)], [], None, None, lineno=251, col_offset=17), lineno=251, col_offset=8), If(BoolOp(And(), [Name('result', Load(), lineno=255, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('result', Load(), lineno=255, col_offset=26), 'endswith', Load(), lineno=255, col_offset=26), [Str('\n', lineno=255, col_offset=42)], [], None, None, lineno=255, col_offset=26), lineno=255, col_offset=22)], lineno=255, col_offset=11), [AugAssign(Name('result', Store(), lineno=256, col_offset=12), Add(), Str('\n', lineno=256, col_offset=22), lineno=256, col_offset=12)], [], lineno=255, col_offset=8), If(Call(Name('hasattr', Load(), lineno=259, col_offset=11), [Name('self', Load(), lineno=259, col_offset=19), Str('softspace', lineno=259, col_offset=25)], [], None, None, lineno=259, col_offset=11), [Delete([Attribute(Name('self', Load(), lineno=260, col_offset=16), 'softspace', Del(), lineno=260, col_offset=16)], lineno=260, col_offset=12)], [], lineno=259, col_offset=8), Return(Name('result', Load(), lineno=261, col_offset=15), lineno=261, col_offset=8)], [], lineno=250, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=263, col_offset=17), Name('size', Param(), lineno=263, col_offset=25)], None, None, [Name('None', Load(), lineno=263, col_offset=30)]), [Expr(Call(Attribute(Name('StringIO', Load(), lineno=264, col_offset=8), 'truncate', Load(), lineno=264, col_offset=8), [Name('self', Load(), lineno=264, col_offset=26), Name('size', Load(), lineno=264, col_offset=32)], [], None, None, lineno=264, col_offset=8), lineno=264, col_offset=8), If(Call(Name('hasattr', Load(), lineno=265, col_offset=11), [Name('self', Load(), lineno=265, col_offset=19), Str('softspace', lineno=265, col_offset=25)], [], None, None, lineno=265, col_offset=11), [Delete([Attribute(Name('self', Load(), lineno=266, col_offset=16), 'softspace', Del(), lineno=266, col_offset=16)], lineno=266, col_offset=12)], [], lineno=265, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=267, col_offset=15), 'buf', Load(), lineno=267, col_offset=15), lineno=267, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=269, col_offset=12), 'buf', Store(), lineno=269, col_offset=12)], Str('', lineno=269, col_offset=23), lineno=269, col_offset=12)], [], lineno=267, col_offset=8)], [], lineno=263, col_offset=4)], [], lineno=249, col_offset=0), FunctionDef('_ellipsis_match', arguments([Name('want', Param(), lineno=272, col_offset=20), Name('got', Param(), lineno=272, col_offset=26)], None, None, []), [Expr(Str("\n    Essentially the only subtle case:\n    >>> _ellipsis_match('aa...aa', 'aaa')\n    False\n    ", lineno=277, col_offset=-1), lineno=277, col_offset=-1), If(Compare(Name('ELLIPSIS_MARKER', Load(), lineno=278, col_offset=7), [NotIn()], [Name('want', Load(), lineno=278, col_offset=30)], lineno=278, col_offset=7), [Return(Compare(Name('want', Load(), lineno=279, col_offset=15), [Eq()], [Name('got', Load(), lineno=279, col_offset=23)], lineno=279, col_offset=15), lineno=279, col_offset=8)], [], lineno=278, col_offset=4), Assign([Name('ws', Store(), lineno=282, col_offset=4)], Call(Attribute(Name('want', Load(), lineno=282, col_offset=9), 'split', Load(), lineno=282, col_offset=9), [Name('ELLIPSIS_MARKER', Load(), lineno=282, col_offset=20)], [], None, None, lineno=282, col_offset=9), lineno=282, col_offset=4), Assert(Compare(Call(Name('len', Load(), lineno=283, col_offset=11), [Name('ws', Load(), lineno=283, col_offset=15)], [], None, None, lineno=283, col_offset=11), [GtE()], [Num(2, lineno=283, col_offset=22)], lineno=283, col_offset=11), None, lineno=283, col_offset=4), Assign([Tuple([Name('startpos', Store(), lineno=286, col_offset=4), Name('endpos', Store(), lineno=286, col_offset=14)], Store(), lineno=286, col_offset=4)], Tuple([Num(0, lineno=286, col_offset=23), Call(Name('len', Load(), lineno=286, col_offset=26), [Name('got', Load(), lineno=286, col_offset=30)], [], None, None, lineno=286, col_offset=26)], Load(), lineno=286, col_offset=23), lineno=286, col_offset=4), Assign([Name('w', Store(), lineno=287, col_offset=4)], Subscript(Name('ws', Load(), lineno=287, col_offset=8), Index(Num(0, lineno=287, col_offset=11)), Load(), lineno=287, col_offset=8), lineno=287, col_offset=4), If(Name('w', Load(), lineno=288, col_offset=7), [If(Call(Attribute(Name('got', Load(), lineno=289, col_offset=11), 'startswith', Load(), lineno=289, col_offset=11), [Name('w', Load(), lineno=289, col_offset=26)], [], None, None, lineno=289, col_offset=11), [Assign([Name('startpos', Store(), lineno=290, col_offset=12)], Call(Name('len', Load(), lineno=290, col_offset=23), [Name('w', Load(), lineno=290, col_offset=27)], [], None, None, lineno=290, col_offset=23), lineno=290, col_offset=12), Delete([Subscript(Name('ws', Load(), lineno=291, col_offset=16), Index(Num(0, lineno=291, col_offset=19)), Del(), lineno=291, col_offset=16)], lineno=291, col_offset=12)], [Return(Name('False', Load(), lineno=293, col_offset=19), lineno=293, col_offset=12)], lineno=289, col_offset=8)], [], lineno=288, col_offset=4), Assign([Name('w', Store(), lineno=294, col_offset=4)], Subscript(Name('ws', Load(), lineno=294, col_offset=8), Index(Num(-1, lineno=294, col_offset=12)), Load(), lineno=294, col_offset=8), lineno=294, col_offset=4), If(Name('w', Load(), lineno=295, col_offset=7), [If(Call(Attribute(Name('got', Load(), lineno=296, col_offset=11), 'endswith', Load(), lineno=296, col_offset=11), [Name('w', Load(), lineno=296, col_offset=24)], [], None, None, lineno=296, col_offset=11), [AugAssign(Name('endpos', Store(), lineno=297, col_offset=12), Sub(), Call(Name('len', Load(), lineno=297, col_offset=22), [Name('w', Load(), lineno=297, col_offset=26)], [], None, None, lineno=297, col_offset=22), lineno=297, col_offset=12), Delete([Subscript(Name('ws', Load(), lineno=298, col_offset=16), Index(Num(-1, lineno=298, col_offset=20)), Del(), lineno=298, col_offset=16)], lineno=298, col_offset=12)], [Return(Name('False', Load(), lineno=300, col_offset=19), lineno=300, col_offset=12)], lineno=296, col_offset=8)], [], lineno=295, col_offset=4), If(Compare(Name('startpos', Load(), lineno=302, col_offset=7), [Gt()], [Name('endpos', Load(), lineno=302, col_offset=18)], lineno=302, col_offset=7), [Return(Name('False', Load(), lineno=305, col_offset=15), lineno=305, col_offset=8)], [], lineno=302, col_offset=4), For(Name('w', Store(), lineno=310, col_offset=8), Name('ws', Load(), lineno=310, col_offset=13), [Assign([Name('startpos', Store(), lineno=314, col_offset=8)], Call(Attribute(Name('got', Load(), lineno=314, col_offset=19), 'find', Load(), lineno=314, col_offset=19), [Name('w', Load(), lineno=314, col_offset=28), Name('startpos', Load(), lineno=314, col_offset=31), Name('endpos', Load(), lineno=314, col_offset=41)], [], None, None, lineno=314, col_offset=19), lineno=314, col_offset=8), If(Compare(Name('startpos', Load(), lineno=315, col_offset=11), [Lt()], [Num(0, lineno=315, col_offset=22)], lineno=315, col_offset=11), [Return(Name('False', Load(), lineno=316, col_offset=19), lineno=316, col_offset=12)], [], lineno=315, col_offset=8), AugAssign(Name('startpos', Store(), lineno=317, col_offset=8), Add(), Call(Name('len', Load(), lineno=317, col_offset=20), [Name('w', Load(), lineno=317, col_offset=24)], [], None, None, lineno=317, col_offset=20), lineno=317, col_offset=8)], [], lineno=310, col_offset=4), Return(Name('True', Load(), lineno=319, col_offset=11), lineno=319, col_offset=4)], [], lineno=272, col_offset=0), FunctionDef('_comment_line', arguments([Name('line', Param(), lineno=321, col_offset=18)], None, None, []), [Expr(Str('Return a commented form of the given line', lineno=322, col_offset=4), lineno=322, col_offset=4), Assign([Name('line', Store(), lineno=323, col_offset=4)], Call(Attribute(Name('line', Load(), lineno=323, col_offset=11), 'rstrip', Load(), lineno=323, col_offset=11), [], [], None, None, lineno=323, col_offset=11), lineno=323, col_offset=4), If(Name('line', Load(), lineno=324, col_offset=7), [Return(BinOp(Str('# ', lineno=325, col_offset=15), Add(), Name('line', Load(), lineno=325, col_offset=20), lineno=325, col_offset=15), lineno=325, col_offset=8)], [Return(Str('#', lineno=327, col_offset=15), lineno=327, col_offset=8)], lineno=324, col_offset=4)], [], lineno=321, col_offset=0), ClassDef('_OutputRedirectingPdb', [Attribute(Name('pdb', Load(), lineno=329, col_offset=28), 'Pdb', Load(), lineno=329, col_offset=28)], [Expr(Str('\n    A specialized version of the python debugger that redirects stdout\n    to a given stream when interacting with the user.  Stdout is *not*\n    redirected when traced code is executed.\n    ', lineno=334, col_offset=-1), lineno=334, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=335, col_offset=17), Name('out', Param(), lineno=335, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=336, col_offset=8), '__out', Store(), lineno=336, col_offset=8)], Name('out', Load(), lineno=336, col_offset=21), lineno=336, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=337, col_offset=8), '__debugger_used', Store(), lineno=337, col_offset=8)], Name('False', Load(), lineno=337, col_offset=31), lineno=337, col_offset=8), Expr(Call(Attribute(Attribute(Name('pdb', Load(), lineno=338, col_offset=8), 'Pdb', Load(), lineno=338, col_offset=8), '__init__', Load(), lineno=338, col_offset=8), [Name('self', Load(), lineno=338, col_offset=25)], [keyword('stdout', Name('out', Load(), lineno=338, col_offset=38))], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=340, col_offset=8), 'use_rawinput', Store(), lineno=340, col_offset=8)], Num(1, lineno=340, col_offset=28), lineno=340, col_offset=8)], [], lineno=335, col_offset=4), FunctionDef('set_trace', arguments([Name('self', Param(), lineno=342, col_offset=18), Name('frame', Param(), lineno=342, col_offset=24)], None, None, [Name('None', Load(), lineno=342, col_offset=30)]), [Assign([Attribute(Name('self', Load(), lineno=343, col_offset=8), '__debugger_used', Store(), lineno=343, col_offset=8)], Name('True', Load(), lineno=343, col_offset=31), lineno=343, col_offset=8), If(Compare(Name('frame', Load(), lineno=344, col_offset=11), [Is()], [Name('None', Load(), lineno=344, col_offset=20)], lineno=344, col_offset=11), [Assign([Name('frame', Store(), lineno=345, col_offset=12)], Attribute(Call(Attribute(Name('sys', Load(), lineno=345, col_offset=20), '_getframe', Load(), lineno=345, col_offset=20), [], [], None, None, lineno=345, col_offset=20), 'f_back', Load(), lineno=345, col_offset=20), lineno=345, col_offset=12)], [], lineno=344, col_offset=8), Expr(Call(Attribute(Attribute(Name('pdb', Load(), lineno=346, col_offset=8), 'Pdb', Load(), lineno=346, col_offset=8), 'set_trace', Load(), lineno=346, col_offset=8), [Name('self', Load(), lineno=346, col_offset=26), Name('frame', Load(), lineno=346, col_offset=32)], [], None, None, lineno=346, col_offset=8), lineno=346, col_offset=8)], [], lineno=342, col_offset=4), FunctionDef('set_continue', arguments([Name('self', Param(), lineno=348, col_offset=21)], None, None, []), [If(Attribute(Name('self', Load(), lineno=351, col_offset=11), '__debugger_used', Load(), lineno=351, col_offset=11), [Expr(Call(Attribute(Attribute(Name('pdb', Load(), lineno=352, col_offset=12), 'Pdb', Load(), lineno=352, col_offset=12), 'set_continue', Load(), lineno=352, col_offset=12), [Name('self', Load(), lineno=352, col_offset=33)], [], None, None, lineno=352, col_offset=12), lineno=352, col_offset=12)], [], lineno=351, col_offset=8)], [], lineno=348, col_offset=4), FunctionDef('trace_dispatch', arguments([Name('self', Param(), lineno=354, col_offset=23)], 'args', None, []), [Assign([Name('save_stdout', Store(), lineno=356, col_offset=8)], Attribute(Name('sys', Load(), lineno=356, col_offset=22), 'stdout', Load(), lineno=356, col_offset=22), lineno=356, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=357, col_offset=8), 'stdout', Store(), lineno=357, col_offset=8)], Attribute(Name('self', Load(), lineno=357, col_offset=21), '__out', Load(), lineno=357, col_offset=21), lineno=357, col_offset=8), TryFinally([Return(Call(Attribute(Attribute(Name('pdb', Load(), lineno=360, col_offset=19), 'Pdb', Load(), lineno=360, col_offset=19), 'trace_dispatch', Load(), lineno=360, col_offset=19), [Name('self', Load(), lineno=360, col_offset=42)], [], Name('args', Load(), lineno=360, col_offset=49), None, lineno=360, col_offset=19), lineno=360, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=362, col_offset=12), 'stdout', Store(), lineno=362, col_offset=12)], Name('save_stdout', Load(), lineno=362, col_offset=25), lineno=362, col_offset=12)], lineno=359, col_offset=8)], [], lineno=354, col_offset=4)], [], lineno=329, col_offset=0), FunctionDef('_module_relative_path', arguments([Name('module', Param(), lineno=365, col_offset=26), Name('path', Param(), lineno=365, col_offset=34)], None, None, []), [If(UnaryOp(Not(), Call(Attribute(Name('inspect', Load(), lineno=366, col_offset=11), 'ismodule', Load(), lineno=366, col_offset=11), [Name('module', Load(), lineno=366, col_offset=28)], [], None, None, lineno=366, col_offset=11), lineno=366, col_offset=7), [Raise(Name('TypeError', Load(), lineno=367, col_offset=14), BinOp(Str('Expected a module: %r', lineno=367, col_offset=25), Mod(), Name('module', Load(), lineno=367, col_offset=51), lineno=367, col_offset=25), None, lineno=367, col_offset=8)], [], lineno=366, col_offset=4), If(Call(Attribute(Name('path', Load(), lineno=368, col_offset=7), 'startswith', Load(), lineno=368, col_offset=7), [Str('/', lineno=368, col_offset=23)], [], None, None, lineno=368, col_offset=7), [Raise(Name('ValueError', Load(), lineno=369, col_offset=14), Str('Module-relative files may not have absolute paths', lineno=369, col_offset=26), None, lineno=369, col_offset=8)], [], lineno=368, col_offset=4), If(Call(Name('hasattr', Load(), lineno=372, col_offset=7), [Name('module', Load(), lineno=372, col_offset=15), Str('__file__', lineno=372, col_offset=23)], [], None, None, lineno=372, col_offset=7), [Assign([Name('basedir', Store(), lineno=374, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=374, col_offset=18), 'path', Load(), lineno=374, col_offset=18), 'split', Load(), lineno=374, col_offset=18), [Attribute(Name('module', Load(), lineno=374, col_offset=32), '__file__', Load(), lineno=374, col_offset=32)], [], None, None, lineno=374, col_offset=18), Index(Num(0, lineno=374, col_offset=49)), Load(), lineno=374, col_offset=18), lineno=374, col_offset=8)], [If(Compare(Attribute(Name('module', Load(), lineno=375, col_offset=9), '__name__', Load(), lineno=375, col_offset=9), [Eq()], [Str('__main__', lineno=375, col_offset=28)], lineno=375, col_offset=9), [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=377, col_offset=11), [Attribute(Name('sys', Load(), lineno=377, col_offset=15), 'argv', Load(), lineno=377, col_offset=15)], [], None, None, lineno=377, col_offset=11), [Gt()], [Num(0, lineno=377, col_offset=25)], lineno=377, col_offset=11), Compare(Subscript(Attribute(Name('sys', Load(), lineno=377, col_offset=31), 'argv', Load(), lineno=377, col_offset=31), Index(Num(0, lineno=377, col_offset=40)), Load(), lineno=377, col_offset=31), [NotEq()], [Str('', lineno=377, col_offset=46)], lineno=377, col_offset=31)], lineno=377, col_offset=11), [Assign([Name('basedir', Store(), lineno=378, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=378, col_offset=22), 'path', Load(), lineno=378, col_offset=22), 'split', Load(), lineno=378, col_offset=22), [Subscript(Attribute(Name('sys', Load(), lineno=378, col_offset=36), 'argv', Load(), lineno=378, col_offset=36), Index(Num(0, lineno=378, col_offset=45)), Load(), lineno=378, col_offset=36)], [], None, None, lineno=378, col_offset=22), Index(Num(0, lineno=378, col_offset=49)), Load(), lineno=378, col_offset=22), lineno=378, col_offset=12)], [Assign([Name('basedir', Store(), lineno=380, col_offset=12)], Attribute(Name('os', Load(), lineno=380, col_offset=22), 'curdir', Load(), lineno=380, col_offset=22), lineno=380, col_offset=12)], lineno=377, col_offset=8)], [Raise(Call(Name('ValueError', Load(), lineno=383, col_offset=14), [BinOp(BinOp(Str("Can't resolve paths relative to the module ", lineno=383, col_offset=25), Add(), Name('module', Load(), lineno=384, col_offset=25), lineno=383, col_offset=25), Add(), Str(' (it has no __file__)', lineno=384, col_offset=34), lineno=384, col_offset=32)], [], None, None, lineno=383, col_offset=14), None, None, lineno=383, col_offset=8)], lineno=375, col_offset=9)], lineno=372, col_offset=4), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=387, col_offset=11), 'path', Load(), lineno=387, col_offset=11), 'join', Load(), lineno=387, col_offset=11), [Name('basedir', Load(), lineno=387, col_offset=24)], [], Call(Attribute(Name('path', Load(), lineno=387, col_offset=35), 'split', Load(), lineno=387, col_offset=35), [Str('/', lineno=387, col_offset=46)], [], None, None, lineno=387, col_offset=35), None, lineno=387, col_offset=11), lineno=387, col_offset=4)], [], lineno=365, col_offset=0), ClassDef('Example', [], [Expr(Str("\n    A single doctest example, consisting of source code and expected\n    output.  `Example` defines the following attributes:\n\n      - source: A single Python statement, always ending with a newline.\n        The constructor adds a newline if needed.\n\n      - want: The expected output from running the source code (either\n        from stdout, or a traceback in case of exception).  `want` ends\n        with a newline unless it's empty, in which case it's an empty\n        string.  The constructor adds a newline if needed.\n\n      - exc_msg: The exception message generated by the example, if\n        the example is expected to generate an exception; or `None` if\n        it is not expected to generate an exception.  This exception\n        message is compared against the return value of\n        `traceback.format_exception_only()`.  `exc_msg` ends with a\n        newline unless it's `None`.  The constructor adds a newline\n        if needed.\n\n      - lineno: The line number within the DocTest string containing\n        this Example where the Example begins.  This line number is\n        zero-based, with respect to the beginning of the DocTest.\n\n      - indent: The example's indentation in the DocTest string.\n        I.e., the number of space characters that preceed the\n        example's first prompt.\n\n      - options: A dictionary mapping from option flags to True or\n        False, which is used to override default options for this\n        example.  Any option flags not contained in this dictionary\n        are left at their default value (as specified by the\n        DocTestRunner's optionflags).  By default, no options are set.\n    ", lineno=435, col_offset=-1), lineno=435, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=436, col_offset=17), Name('source', Param(), lineno=436, col_offset=23), Name('want', Param(), lineno=436, col_offset=31), Name('exc_msg', Param(), lineno=436, col_offset=37), Name('lineno', Param(), lineno=436, col_offset=51), Name('indent', Param(), lineno=436, col_offset=61), Name('options', Param(), lineno=437, col_offset=17)], None, None, [Name('None', Load(), lineno=436, col_offset=45), Num(0, lineno=436, col_offset=58), Num(0, lineno=436, col_offset=68), Name('None', Load(), lineno=437, col_offset=25)]), [If(UnaryOp(Not(), Call(Attribute(Name('source', Load(), lineno=439, col_offset=15), 'endswith', Load(), lineno=439, col_offset=15), [Str('\n', lineno=439, col_offset=31)], [], None, None, lineno=439, col_offset=15), lineno=439, col_offset=11), [AugAssign(Name('source', Store(), lineno=440, col_offset=12), Add(), Str('\n', lineno=440, col_offset=22), lineno=440, col_offset=12)], [], lineno=439, col_offset=8), If(BoolOp(And(), [Name('want', Load(), lineno=441, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('want', Load(), lineno=441, col_offset=24), 'endswith', Load(), lineno=441, col_offset=24), [Str('\n', lineno=441, col_offset=38)], [], None, None, lineno=441, col_offset=24), lineno=441, col_offset=20)], lineno=441, col_offset=11), [AugAssign(Name('want', Store(), lineno=442, col_offset=12), Add(), Str('\n', lineno=442, col_offset=20), lineno=442, col_offset=12)], [], lineno=441, col_offset=8), If(BoolOp(And(), [Compare(Name('exc_msg', Load(), lineno=443, col_offset=11), [IsNot()], [Name('None', Load(), lineno=443, col_offset=26)], lineno=443, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('exc_msg', Load(), lineno=443, col_offset=39), 'endswith', Load(), lineno=443, col_offset=39), [Str('\n', lineno=443, col_offset=56)], [], None, None, lineno=443, col_offset=39), lineno=443, col_offset=35)], lineno=443, col_offset=11), [AugAssign(Name('exc_msg', Store(), lineno=444, col_offset=12), Add(), Str('\n', lineno=444, col_offset=23), lineno=444, col_offset=12)], [], lineno=443, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=446, col_offset=8), 'source', Store(), lineno=446, col_offset=8)], Name('source', Load(), lineno=446, col_offset=22), lineno=446, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=447, col_offset=8), 'want', Store(), lineno=447, col_offset=8)], Name('want', Load(), lineno=447, col_offset=20), lineno=447, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=448, col_offset=8), 'lineno', Store(), lineno=448, col_offset=8)], Name('lineno', Load(), lineno=448, col_offset=22), lineno=448, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=449, col_offset=8), 'indent', Store(), lineno=449, col_offset=8)], Name('indent', Load(), lineno=449, col_offset=22), lineno=449, col_offset=8), If(Compare(Name('options', Load(), lineno=450, col_offset=11), [Is()], [Name('None', Load(), lineno=450, col_offset=22)], lineno=450, col_offset=11), [Assign([Name('options', Store(), lineno=450, col_offset=28)], Dict([], [], lineno=450, col_offset=38), lineno=450, col_offset=28)], [], lineno=450, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=451, col_offset=8), 'options', Store(), lineno=451, col_offset=8)], Name('options', Load(), lineno=451, col_offset=23), lineno=451, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=452, col_offset=8), 'exc_msg', Store(), lineno=452, col_offset=8)], Name('exc_msg', Load(), lineno=452, col_offset=23), lineno=452, col_offset=8)], [], lineno=436, col_offset=4)], [], lineno=401, col_offset=0), ClassDef('DocTest', [], [Expr(Str('\n    A collection of doctest examples that should be run in a single\n    namespace.  Each `DocTest` defines the following attributes:\n\n      - examples: the list of examples.\n\n      - globs: The namespace (aka globals) that the examples should\n        be run in.\n\n      - name: A name identifying the DocTest (typically, the name of\n        the object whose docstring this DocTest was extracted from).\n\n      - filename: The name of the file that this DocTest was extracted\n        from, or `None` if the filename is unknown.\n\n      - lineno: The line number within filename where this DocTest\n        begins, or `None` if the line number is unavailable.  This\n        line number is zero-based, with respect to the beginning of\n        the file.\n\n      - docstring: The string that the examples were extracted from,\n        or `None` if the string is unavailable.\n    ', lineno=477, col_offset=-1), lineno=477, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=478, col_offset=17), Name('examples', Param(), lineno=478, col_offset=23), Name('globs', Param(), lineno=478, col_offset=33), Name('name', Param(), lineno=478, col_offset=40), Name('filename', Param(), lineno=478, col_offset=46), Name('lineno', Param(), lineno=478, col_offset=56), Name('docstring', Param(), lineno=478, col_offset=64)], None, None, []), [Expr(Str("\n        Create a new DocTest containing the given examples.  The\n        DocTest's globals are initialized with a copy of `globs`.\n        ", lineno=482, col_offset=-1), lineno=482, col_offset=-1), Assert(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=483, col_offset=19), [Name('examples', Load(), lineno=483, col_offset=30), Name('basestring', Load(), lineno=483, col_offset=40)], [], None, None, lineno=483, col_offset=19), lineno=483, col_offset=15), Str('DocTest no longer accepts str; use DocTestParser instead', lineno=484, col_offset=15), lineno=483, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=485, col_offset=8), 'examples', Store(), lineno=485, col_offset=8)], Name('examples', Load(), lineno=485, col_offset=24), lineno=485, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=486, col_offset=8), 'docstring', Store(), lineno=486, col_offset=8)], Name('docstring', Load(), lineno=486, col_offset=25), lineno=486, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=487, col_offset=8), 'globs', Store(), lineno=487, col_offset=8)], Call(Attribute(Name('globs', Load(), lineno=487, col_offset=21), 'copy', Load(), lineno=487, col_offset=21), [], [], None, None, lineno=487, col_offset=21), lineno=487, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=488, col_offset=8), 'name', Store(), lineno=488, col_offset=8)], Name('name', Load(), lineno=488, col_offset=20), lineno=488, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=489, col_offset=8), 'filename', Store(), lineno=489, col_offset=8)], Name('filename', Load(), lineno=489, col_offset=24), lineno=489, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=490, col_offset=8), 'lineno', Store(), lineno=490, col_offset=8)], Name('lineno', Load(), lineno=490, col_offset=22), lineno=490, col_offset=8)], [], lineno=478, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=492, col_offset=17)], None, None, []), [If(Compare(Call(Name('len', Load(), lineno=493, col_offset=11), [Attribute(Name('self', Load(), lineno=493, col_offset=15), 'examples', Load(), lineno=493, col_offset=15)], [], None, None, lineno=493, col_offset=11), [Eq()], [Num(0, lineno=493, col_offset=33)], lineno=493, col_offset=11), [Assign([Name('examples', Store(), lineno=494, col_offset=12)], Str('no examples', lineno=494, col_offset=23), lineno=494, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=495, col_offset=13), [Attribute(Name('self', Load(), lineno=495, col_offset=17), 'examples', Load(), lineno=495, col_offset=17)], [], None, None, lineno=495, col_offset=13), [Eq()], [Num(1, lineno=495, col_offset=35)], lineno=495, col_offset=13), [Assign([Name('examples', Store(), lineno=496, col_offset=12)], Str('1 example', lineno=496, col_offset=23), lineno=496, col_offset=12)], [Assign([Name('examples', Store(), lineno=498, col_offset=12)], BinOp(Str('%d examples', lineno=498, col_offset=23), Mod(), Call(Name('len', Load(), lineno=498, col_offset=39), [Attribute(Name('self', Load(), lineno=498, col_offset=43), 'examples', Load(), lineno=498, col_offset=43)], [], None, None, lineno=498, col_offset=39), lineno=498, col_offset=23), lineno=498, col_offset=12)], lineno=495, col_offset=13)], lineno=493, col_offset=8), Return(BinOp(Str('<DocTest %s from %s:%s (%s)>', lineno=499, col_offset=16), Mod(), Tuple([Attribute(Name('self', Load(), lineno=500, col_offset=17), 'name', Load(), lineno=500, col_offset=17), Attribute(Name('self', Load(), lineno=500, col_offset=28), 'filename', Load(), lineno=500, col_offset=28), Attribute(Name('self', Load(), lineno=500, col_offset=43), 'lineno', Load(), lineno=500, col_offset=43), Name('examples', Load(), lineno=500, col_offset=56)], Load(), lineno=500, col_offset=17), lineno=499, col_offset=16), lineno=499, col_offset=8)], [], lineno=492, col_offset=4), FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=504, col_offset=16), Name('other', Param(), lineno=504, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=505, col_offset=15), [Name('other', Load(), lineno=505, col_offset=26), Name('DocTest', Load(), lineno=505, col_offset=33)], [], None, None, lineno=505, col_offset=15), lineno=505, col_offset=11), [Return(Num(-1, lineno=506, col_offset=20), lineno=506, col_offset=12)], [], lineno=505, col_offset=8), Return(Call(Name('cmp', Load(), lineno=507, col_offset=15), [Tuple([Attribute(Name('self', Load(), lineno=507, col_offset=20), 'name', Load(), lineno=507, col_offset=20), Attribute(Name('self', Load(), lineno=507, col_offset=31), 'filename', Load(), lineno=507, col_offset=31), Attribute(Name('self', Load(), lineno=507, col_offset=46), 'lineno', Load(), lineno=507, col_offset=46), Call(Name('id', Load(), lineno=507, col_offset=59), [Name('self', Load(), lineno=507, col_offset=62)], [], None, None, lineno=507, col_offset=59)], Load(), lineno=507, col_offset=20), Tuple([Attribute(Name('other', Load(), lineno=508, col_offset=20), 'name', Load(), lineno=508, col_offset=20), Attribute(Name('other', Load(), lineno=508, col_offset=32), 'filename', Load(), lineno=508, col_offset=32), Attribute(Name('other', Load(), lineno=508, col_offset=48), 'lineno', Load(), lineno=508, col_offset=48), Call(Name('id', Load(), lineno=508, col_offset=62), [Name('other', Load(), lineno=508, col_offset=65)], [], None, None, lineno=508, col_offset=62)], Load(), lineno=508, col_offset=20)], [], None, None, lineno=507, col_offset=15), lineno=507, col_offset=8)], [], lineno=504, col_offset=4)], [], lineno=454, col_offset=0), ClassDef('DocTestParser', [], [Expr(Str('\n    A class used to parse strings containing doctest examples.\n    ', lineno=517, col_offset=-1), lineno=517, col_offset=-1), Assign([Name('_EXAMPLE_RE', Store(), lineno=523, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=523, col_offset=18), 'compile', Load(), lineno=523, col_offset=18), [Str('\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*)  # PS2 lines\n        \\n?\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .*$\\n?       # But any other line\n                  )*)\n        ', lineno=534, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=534, col_offset=13), 'MULTILINE', Load(), lineno=534, col_offset=13), BitOr(), Attribute(Name('re', Load(), lineno=534, col_offset=28), 'VERBOSE', Load(), lineno=534, col_offset=28), lineno=534, col_offset=13)], [], None, None, lineno=523, col_offset=18), lineno=523, col_offset=4), Assign([Name('_EXCEPTION_RE', Store(), lineno=545, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=545, col_offset=20), 'compile', Load(), lineno=545, col_offset=20), [Str("\n        # Grab the traceback header.  Different versions of Python have\n        # said different things on the first traceback line.\n        ^(?P<hdr> Traceback\\ \\(\n            (?: most\\ recent\\ call\\ last\n            |   innermost\\ last\n            ) \\) :\n        )\n        \\s* $                # toss trailing whitespace on the header.\n        (?P<stack> .*?)      # don't blink: absorb stuff until...\n        ^ (?P<msg> \\w+ .*)   #     a line *starts* with alphanum.\n        ", lineno=556, col_offset=-1), BinOp(BinOp(Attribute(Name('re', Load(), lineno=556, col_offset=13), 'VERBOSE', Load(), lineno=556, col_offset=13), BitOr(), Attribute(Name('re', Load(), lineno=556, col_offset=26), 'MULTILINE', Load(), lineno=556, col_offset=26), lineno=556, col_offset=13), BitOr(), Attribute(Name('re', Load(), lineno=556, col_offset=41), 'DOTALL', Load(), lineno=556, col_offset=41), lineno=556, col_offset=39)], [], None, None, lineno=545, col_offset=20), lineno=545, col_offset=4), Assign([Name('_IS_BLANK_OR_COMMENT', Store(), lineno=560, col_offset=4)], Attribute(Call(Attribute(Name('re', Load(), lineno=560, col_offset=27), 'compile', Load(), lineno=560, col_offset=27), [Str('^[ ]*(#.*)?$', lineno=560, col_offset=38)], [], None, None, lineno=560, col_offset=27), 'match', Load(), lineno=560, col_offset=27), lineno=560, col_offset=4), FunctionDef('parse', arguments([Name('self', Param(), lineno=562, col_offset=14), Name('string', Param(), lineno=562, col_offset=20), Name('name', Param(), lineno=562, col_offset=28)], None, None, [Str('<string>', lineno=562, col_offset=33)]), [Expr(Str('\n        Divide the given string into examples and intervening text,\n        and return them as a list of alternating Examples and strings.\n        Line numbers for the Examples are 0-based.  The optional\n        argument `name` is a name identifying this string, and is only\n        used for error messages.\n        ', lineno=569, col_offset=-1), lineno=569, col_offset=-1), Assign([Name('string', Store(), lineno=570, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=570, col_offset=17), 'expandtabs', Load(), lineno=570, col_offset=17), [], [], None, None, lineno=570, col_offset=17), lineno=570, col_offset=8), Assign([Name('min_indent', Store(), lineno=572, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=572, col_offset=21), '_min_indent', Load(), lineno=572, col_offset=21), [Name('string', Load(), lineno=572, col_offset=38)], [], None, None, lineno=572, col_offset=21), lineno=572, col_offset=8), If(Compare(Name('min_indent', Load(), lineno=573, col_offset=11), [Gt()], [Num(0, lineno=573, col_offset=24)], lineno=573, col_offset=11), [Assign([Name('string', Store(), lineno=574, col_offset=12)], Call(Attribute(Str('\n', lineno=574, col_offset=21), 'join', Load(), lineno=574, col_offset=21), [ListComp(Subscript(Name('l', Load(), lineno=574, col_offset=32), Slice(Name('min_indent', Load(), lineno=574, col_offset=34), None, None), Load(), lineno=574, col_offset=32), [comprehension(Name('l', Store(), lineno=574, col_offset=51), Call(Attribute(Name('string', Load(), lineno=574, col_offset=56), 'split', Load(), lineno=574, col_offset=56), [Str('\n', lineno=574, col_offset=69)], [], None, None, lineno=574, col_offset=56), [])], lineno=574, col_offset=32)], [], None, None, lineno=574, col_offset=21), lineno=574, col_offset=12)], [], lineno=573, col_offset=8), Assign([Name('output', Store(), lineno=576, col_offset=8)], List([], Load(), lineno=576, col_offset=17), lineno=576, col_offset=8), Assign([Tuple([Name('charno', Store(), lineno=577, col_offset=8), Name('lineno', Store(), lineno=577, col_offset=16)], Store(), lineno=577, col_offset=8)], Tuple([Num(0, lineno=577, col_offset=25), Num(0, lineno=577, col_offset=28)], Load(), lineno=577, col_offset=25), lineno=577, col_offset=8), For(Name('m', Store(), lineno=579, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=579, col_offset=17), '_EXAMPLE_RE', Load(), lineno=579, col_offset=17), 'finditer', Load(), lineno=579, col_offset=17), [Name('string', Load(), lineno=579, col_offset=43)], [], None, None, lineno=579, col_offset=17), [Expr(Call(Attribute(Name('output', Load(), lineno=581, col_offset=12), 'append', Load(), lineno=581, col_offset=12), [Subscript(Name('string', Load(), lineno=581, col_offset=26), Slice(Name('charno', Load(), lineno=581, col_offset=33), Call(Attribute(Name('m', Load(), lineno=581, col_offset=40), 'start', Load(), lineno=581, col_offset=40), [], [], None, None, lineno=581, col_offset=40), None), Load(), lineno=581, col_offset=26)], [], None, None, lineno=581, col_offset=12), lineno=581, col_offset=12), AugAssign(Name('lineno', Store(), lineno=583, col_offset=12), Add(), Call(Attribute(Name('string', Load(), lineno=583, col_offset=22), 'count', Load(), lineno=583, col_offset=22), [Str('\n', lineno=583, col_offset=35), Name('charno', Load(), lineno=583, col_offset=41), Call(Attribute(Name('m', Load(), lineno=583, col_offset=49), 'start', Load(), lineno=583, col_offset=49), [], [], None, None, lineno=583, col_offset=49)], [], None, None, lineno=583, col_offset=22), lineno=583, col_offset=12), Assign([Tuple([Name('source', Store(), lineno=585, col_offset=13), Name('options', Store(), lineno=585, col_offset=21), Name('want', Store(), lineno=585, col_offset=30), Name('exc_msg', Store(), lineno=585, col_offset=36)], Store(), lineno=585, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=586, col_offset=21), '_parse_example', Load(), lineno=586, col_offset=21), [Name('m', Load(), lineno=586, col_offset=41), Name('name', Load(), lineno=586, col_offset=44), Name('lineno', Load(), lineno=586, col_offset=50)], [], None, None, lineno=586, col_offset=21), lineno=585, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=588, col_offset=19), '_IS_BLANK_OR_COMMENT', Load(), lineno=588, col_offset=19), [Name('source', Load(), lineno=588, col_offset=45)], [], None, None, lineno=588, col_offset=19), lineno=588, col_offset=15), [Expr(Call(Attribute(Name('output', Load(), lineno=589, col_offset=16), 'append', Load(), lineno=589, col_offset=16), [Call(Name('Example', Load(), lineno=589, col_offset=31), [Name('source', Load(), lineno=589, col_offset=39), Name('want', Load(), lineno=589, col_offset=47), Name('exc_msg', Load(), lineno=589, col_offset=53)], [keyword('lineno', Name('lineno', Load(), lineno=590, col_offset=43)), keyword('indent', BinOp(Name('min_indent', Load(), lineno=591, col_offset=43), Add(), Call(Name('len', Load(), lineno=591, col_offset=54), [Call(Attribute(Name('m', Load(), lineno=591, col_offset=58), 'group', Load(), lineno=591, col_offset=58), [Str('indent', lineno=591, col_offset=66)], [], None, None, lineno=591, col_offset=58)], [], None, None, lineno=591, col_offset=54), lineno=591, col_offset=43)), keyword('options', Name('options', Load(), lineno=592, col_offset=44))], None, None, lineno=589, col_offset=31)], [], None, None, lineno=589, col_offset=16), lineno=589, col_offset=16)], [], lineno=588, col_offset=12), AugAssign(Name('lineno', Store(), lineno=594, col_offset=12), Add(), Call(Attribute(Name('string', Load(), lineno=594, col_offset=22), 'count', Load(), lineno=594, col_offset=22), [Str('\n', lineno=594, col_offset=35), Call(Attribute(Name('m', Load(), lineno=594, col_offset=41), 'start', Load(), lineno=594, col_offset=41), [], [], None, None, lineno=594, col_offset=41), Call(Attribute(Name('m', Load(), lineno=594, col_offset=52), 'end', Load(), lineno=594, col_offset=52), [], [], None, None, lineno=594, col_offset=52)], [], None, None, lineno=594, col_offset=22), lineno=594, col_offset=12), Assign([Name('charno', Store(), lineno=596, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=596, col_offset=21), 'end', Load(), lineno=596, col_offset=21), [], [], None, None, lineno=596, col_offset=21), lineno=596, col_offset=12)], [], lineno=579, col_offset=8), Expr(Call(Attribute(Name('output', Load(), lineno=598, col_offset=8), 'append', Load(), lineno=598, col_offset=8), [Subscript(Name('string', Load(), lineno=598, col_offset=22), Slice(Name('charno', Load(), lineno=598, col_offset=29), None, None), Load(), lineno=598, col_offset=22)], [], None, None, lineno=598, col_offset=8), lineno=598, col_offset=8), Return(Name('output', Load(), lineno=599, col_offset=15), lineno=599, col_offset=8)], [], lineno=562, col_offset=4), FunctionDef('get_doctest', arguments([Name('self', Param(), lineno=601, col_offset=20), Name('string', Param(), lineno=601, col_offset=26), Name('globs', Param(), lineno=601, col_offset=34), Name('name', Param(), lineno=601, col_offset=41), Name('filename', Param(), lineno=601, col_offset=47), Name('lineno', Param(), lineno=601, col_offset=57)], None, None, []), [Expr(Str('\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        ', lineno=609, col_offset=-1), lineno=609, col_offset=-1), Return(Call(Name('DocTest', Load(), lineno=610, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=610, col_offset=23), 'get_examples', Load(), lineno=610, col_offset=23), [Name('string', Load(), lineno=610, col_offset=41), Name('name', Load(), lineno=610, col_offset=49)], [], None, None, lineno=610, col_offset=23), Name('globs', Load(), lineno=610, col_offset=56), Name('name', Load(), lineno=611, col_offset=23), Name('filename', Load(), lineno=611, col_offset=29), Name('lineno', Load(), lineno=611, col_offset=39), Name('string', Load(), lineno=611, col_offset=47)], [], None, None, lineno=610, col_offset=15), lineno=610, col_offset=8)], [], lineno=601, col_offset=4), FunctionDef('get_examples', arguments([Name('self', Param(), lineno=613, col_offset=21), Name('string', Param(), lineno=613, col_offset=27), Name('name', Param(), lineno=613, col_offset=35)], None, None, [Str('<string>', lineno=613, col_offset=40)]), [Expr(Str('\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it\'s most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called "line 1" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        ', lineno=623, col_offset=-1), lineno=623, col_offset=-1), Return(ListComp(Name('x', Load(), lineno=624, col_offset=16), [comprehension(Name('x', Store(), lineno=624, col_offset=22), Call(Attribute(Name('self', Load(), lineno=624, col_offset=27), 'parse', Load(), lineno=624, col_offset=27), [Name('string', Load(), lineno=624, col_offset=38), Name('name', Load(), lineno=624, col_offset=46)], [], None, None, lineno=624, col_offset=27), [Call(Name('isinstance', Load(), lineno=625, col_offset=19), [Name('x', Load(), lineno=625, col_offset=30), Name('Example', Load(), lineno=625, col_offset=33)], [], None, None, lineno=625, col_offset=19)])], lineno=624, col_offset=16), lineno=624, col_offset=8)], [], lineno=613, col_offset=4), FunctionDef('_parse_example', arguments([Name('self', Param(), lineno=627, col_offset=23), Name('m', Param(), lineno=627, col_offset=29), Name('name', Param(), lineno=627, col_offset=32), Name('lineno', Param(), lineno=627, col_offset=38)], None, None, []), [Expr(Str("\n        Given a regular expression match from `_EXAMPLE_RE` (`m`),\n        return a pair `(source, want)`, where `source` is the matched\n        example's source code (with prompts and indentation stripped);\n        and `want` is the example's expected output (with indentation\n        stripped).\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        ", lineno=637, col_offset=-1), lineno=637, col_offset=-1), Assign([Name('indent', Store(), lineno=639, col_offset=8)], Call(Name('len', Load(), lineno=639, col_offset=17), [Call(Attribute(Name('m', Load(), lineno=639, col_offset=21), 'group', Load(), lineno=639, col_offset=21), [Str('indent', lineno=639, col_offset=29)], [], None, None, lineno=639, col_offset=21)], [], None, None, lineno=639, col_offset=17), lineno=639, col_offset=8), Assign([Name('source_lines', Store(), lineno=643, col_offset=8)], Call(Attribute(Call(Attribute(Name('m', Load(), lineno=643, col_offset=23), 'group', Load(), lineno=643, col_offset=23), [Str('source', lineno=643, col_offset=31)], [], None, None, lineno=643, col_offset=23), 'split', Load(), lineno=643, col_offset=23), [Str('\n', lineno=643, col_offset=47)], [], None, None, lineno=643, col_offset=23), lineno=643, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=644, col_offset=8), '_check_prompt_blank', Load(), lineno=644, col_offset=8), [Name('source_lines', Load(), lineno=644, col_offset=33), Name('indent', Load(), lineno=644, col_offset=47), Name('name', Load(), lineno=644, col_offset=55), Name('lineno', Load(), lineno=644, col_offset=61)], [], None, None, lineno=644, col_offset=8), lineno=644, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=645, col_offset=8), '_check_prefix', Load(), lineno=645, col_offset=8), [Subscript(Name('source_lines', Load(), lineno=645, col_offset=27), Slice(Num(1, lineno=645, col_offset=40), None, None), Load(), lineno=645, col_offset=27), BinOp(BinOp(Str(' ', lineno=645, col_offset=45), Mult(), Name('indent', Load(), lineno=645, col_offset=49), lineno=645, col_offset=45), Add(), Str('.', lineno=645, col_offset=58), lineno=645, col_offset=45), Name('name', Load(), lineno=645, col_offset=63), Name('lineno', Load(), lineno=645, col_offset=69)], [], None, None, lineno=645, col_offset=8), lineno=645, col_offset=8), Assign([Name('source', Store(), lineno=646, col_offset=8)], Call(Attribute(Str('\n', lineno=646, col_offset=17), 'join', Load(), lineno=646, col_offset=17), [ListComp(Subscript(Name('sl', Load(), lineno=646, col_offset=28), Slice(BinOp(Name('indent', Load(), lineno=646, col_offset=31), Add(), Num(4, lineno=646, col_offset=38), lineno=646, col_offset=31), None, None), Load(), lineno=646, col_offset=28), [comprehension(Name('sl', Store(), lineno=646, col_offset=46), Name('source_lines', Load(), lineno=646, col_offset=52), [])], lineno=646, col_offset=28)], [], None, None, lineno=646, col_offset=17), lineno=646, col_offset=8), Assign([Name('want', Store(), lineno=651, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=651, col_offset=15), 'group', Load(), lineno=651, col_offset=15), [Str('want', lineno=651, col_offset=23)], [], None, None, lineno=651, col_offset=15), lineno=651, col_offset=8), Assign([Name('want_lines', Store(), lineno=652, col_offset=8)], Call(Attribute(Name('want', Load(), lineno=652, col_offset=21), 'split', Load(), lineno=652, col_offset=21), [Str('\n', lineno=652, col_offset=32)], [], None, None, lineno=652, col_offset=21), lineno=652, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=653, col_offset=11), [Name('want_lines', Load(), lineno=653, col_offset=15)], [], None, None, lineno=653, col_offset=11), [Gt()], [Num(1, lineno=653, col_offset=29)], lineno=653, col_offset=11), Call(Attribute(Name('re', Load(), lineno=653, col_offset=35), 'match', Load(), lineno=653, col_offset=35), [Str(' *$', lineno=653, col_offset=44), Subscript(Name('want_lines', Load(), lineno=653, col_offset=52), Index(Num(-1, lineno=653, col_offset=64)), Load(), lineno=653, col_offset=52)], [], None, None, lineno=653, col_offset=35)], lineno=653, col_offset=11), [Delete([Subscript(Name('want_lines', Load(), lineno=654, col_offset=16), Index(Num(-1, lineno=654, col_offset=28)), Del(), lineno=654, col_offset=16)], lineno=654, col_offset=12)], [], lineno=653, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=655, col_offset=8), '_check_prefix', Load(), lineno=655, col_offset=8), [Name('want_lines', Load(), lineno=655, col_offset=27), BinOp(Str(' ', lineno=655, col_offset=39), Mult(), Name('indent', Load(), lineno=655, col_offset=43), lineno=655, col_offset=39), Name('name', Load(), lineno=655, col_offset=51), BinOp(Name('lineno', Load(), lineno=656, col_offset=27), Add(), Call(Name('len', Load(), lineno=656, col_offset=36), [Name('source_lines', Load(), lineno=656, col_offset=40)], [], None, None, lineno=656, col_offset=36), lineno=656, col_offset=27)], [], None, None, lineno=655, col_offset=8), lineno=655, col_offset=8), Assign([Name('want', Store(), lineno=657, col_offset=8)], Call(Attribute(Str('\n', lineno=657, col_offset=15), 'join', Load(), lineno=657, col_offset=15), [ListComp(Subscript(Name('wl', Load(), lineno=657, col_offset=26), Slice(Name('indent', Load(), lineno=657, col_offset=29), None, None), Load(), lineno=657, col_offset=26), [comprehension(Name('wl', Store(), lineno=657, col_offset=42), Name('want_lines', Load(), lineno=657, col_offset=48), [])], lineno=657, col_offset=26)], [], None, None, lineno=657, col_offset=15), lineno=657, col_offset=8), Assign([Name('m', Store(), lineno=660, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=660, col_offset=12), '_EXCEPTION_RE', Load(), lineno=660, col_offset=12), 'match', Load(), lineno=660, col_offset=12), [Name('want', Load(), lineno=660, col_offset=37)], [], None, None, lineno=660, col_offset=12), lineno=660, col_offset=8), If(Name('m', Load(), lineno=661, col_offset=11), [Assign([Name('exc_msg', Store(), lineno=662, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=662, col_offset=22), 'group', Load(), lineno=662, col_offset=22), [Str('msg', lineno=662, col_offset=30)], [], None, None, lineno=662, col_offset=22), lineno=662, col_offset=12)], [Assign([Name('exc_msg', Store(), lineno=664, col_offset=12)], Name('None', Load(), lineno=664, col_offset=22), lineno=664, col_offset=12)], lineno=661, col_offset=8), Assign([Name('options', Store(), lineno=667, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=667, col_offset=18), '_find_options', Load(), lineno=667, col_offset=18), [Name('source', Load(), lineno=667, col_offset=37), Name('name', Load(), lineno=667, col_offset=45), Name('lineno', Load(), lineno=667, col_offset=51)], [], None, None, lineno=667, col_offset=18), lineno=667, col_offset=8), Return(Tuple([Name('source', Load(), lineno=669, col_offset=15), Name('options', Load(), lineno=669, col_offset=23), Name('want', Load(), lineno=669, col_offset=32), Name('exc_msg', Load(), lineno=669, col_offset=38)], Load(), lineno=669, col_offset=15), lineno=669, col_offset=8)], [], lineno=627, col_offset=4), Assign([Name('_OPTION_DIRECTIVE_RE', Store(), lineno=678, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=678, col_offset=27), 'compile', Load(), lineno=678, col_offset=27), [Str('#\\s*doctest:\\s*([^\\n\\\'"]*)$', lineno=678, col_offset=38), Attribute(Name('re', Load(), lineno=679, col_offset=38), 'MULTILINE', Load(), lineno=679, col_offset=38)], [], None, None, lineno=678, col_offset=27), lineno=678, col_offset=4), FunctionDef('_find_options', arguments([Name('self', Param(), lineno=681, col_offset=22), Name('source', Param(), lineno=681, col_offset=28), Name('name', Param(), lineno=681, col_offset=36), Name('lineno', Param(), lineno=681, col_offset=42)], None, None, []), [Expr(Str("\n        Return a dictionary containing option overrides extracted from\n        option directives in the given source string.\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        ", lineno=688, col_offset=-1), lineno=688, col_offset=-1), Assign([Name('options', Store(), lineno=689, col_offset=8)], Dict([], [], lineno=689, col_offset=18), lineno=689, col_offset=8), For(Name('m', Store(), lineno=691, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=691, col_offset=17), '_OPTION_DIRECTIVE_RE', Load(), lineno=691, col_offset=17), 'finditer', Load(), lineno=691, col_offset=17), [Name('source', Load(), lineno=691, col_offset=52)], [], None, None, lineno=691, col_offset=17), [Assign([Name('option_strings', Store(), lineno=692, col_offset=12)], Call(Attribute(Call(Attribute(Call(Attribute(Name('m', Load(), lineno=692, col_offset=29), 'group', Load(), lineno=692, col_offset=29), [Num(1, lineno=692, col_offset=37)], [], None, None, lineno=692, col_offset=29), 'replace', Load(), lineno=692, col_offset=29), [Str(',', lineno=692, col_offset=48), Str(' ', lineno=692, col_offset=53)], [], None, None, lineno=692, col_offset=29), 'split', Load(), lineno=692, col_offset=29), [], [], None, None, lineno=692, col_offset=29), lineno=692, col_offset=12), For(Name('option', Store(), lineno=693, col_offset=16), Name('option_strings', Load(), lineno=693, col_offset=26), [If(BoolOp(Or(), [Compare(Subscript(Name('option', Load(), lineno=694, col_offset=20), Index(Num(0, lineno=694, col_offset=27)), Load(), lineno=694, col_offset=20), [NotIn()], [Str('+-', lineno=694, col_offset=37)], lineno=694, col_offset=20), Compare(Subscript(Name('option', Load(), lineno=695, col_offset=20), Slice(Num(1, lineno=695, col_offset=27), None, None), Load(), lineno=695, col_offset=20), [NotIn()], [Name('OPTIONFLAGS_BY_NAME', Load(), lineno=695, col_offset=38)], lineno=695, col_offset=20)], lineno=694, col_offset=20), [Raise(Call(Name('ValueError', Load(), lineno=696, col_offset=26), [BinOp(Str('line %r of the doctest for %s has an invalid option: %r', lineno=696, col_offset=37), Mod(), Tuple([BinOp(Name('lineno', Load(), lineno=698, col_offset=38), Add(), Num(1, lineno=698, col_offset=45), lineno=698, col_offset=38), Name('name', Load(), lineno=698, col_offset=48), Name('option', Load(), lineno=698, col_offset=54)], Load(), lineno=698, col_offset=38), lineno=696, col_offset=37)], [], None, None, lineno=696, col_offset=26), None, None, lineno=696, col_offset=20)], [], lineno=694, col_offset=16), Assign([Name('flag', Store(), lineno=699, col_offset=16)], Subscript(Name('OPTIONFLAGS_BY_NAME', Load(), lineno=699, col_offset=23), Index(Subscript(Name('option', Load(), lineno=699, col_offset=43), Slice(Num(1, lineno=699, col_offset=50), None, None), Load(), lineno=699, col_offset=43)), Load(), lineno=699, col_offset=23), lineno=699, col_offset=16), Assign([Subscript(Name('options', Load(), lineno=700, col_offset=16), Index(Name('flag', Load(), lineno=700, col_offset=24)), Store(), lineno=700, col_offset=16)], Compare(Subscript(Name('option', Load(), lineno=700, col_offset=33), Index(Num(0, lineno=700, col_offset=40)), Load(), lineno=700, col_offset=33), [Eq()], [Str('+', lineno=700, col_offset=46)], lineno=700, col_offset=33), lineno=700, col_offset=16)], [], lineno=693, col_offset=12)], [], lineno=691, col_offset=8), If(BoolOp(And(), [Name('options', Load(), lineno=701, col_offset=11), Call(Attribute(Name('self', Load(), lineno=701, col_offset=23), '_IS_BLANK_OR_COMMENT', Load(), lineno=701, col_offset=23), [Name('source', Load(), lineno=701, col_offset=49)], [], None, None, lineno=701, col_offset=23)], lineno=701, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=702, col_offset=18), [BinOp(Str('line %r of the doctest for %s has an option directive on a line with no example: %r', lineno=702, col_offset=29), Mod(), Tuple([Name('lineno', Load(), lineno=704, col_offset=30), Name('name', Load(), lineno=704, col_offset=38), Name('source', Load(), lineno=704, col_offset=44)], Load(), lineno=704, col_offset=30), lineno=702, col_offset=29)], [], None, None, lineno=702, col_offset=18), None, None, lineno=702, col_offset=12)], [], lineno=701, col_offset=8), Return(Name('options', Load(), lineno=705, col_offset=15), lineno=705, col_offset=8)], [], lineno=681, col_offset=4), Assign([Name('_INDENT_RE', Store(), lineno=709, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=709, col_offset=17), 'compile', Load(), lineno=709, col_offset=17), [Str('^([ ]*)(?=\\S)', lineno=709, col_offset=28), Attribute(Name('re', Load(), lineno=709, col_offset=45), 'MULTILINE', Load(), lineno=709, col_offset=45)], [], None, None, lineno=709, col_offset=17), lineno=709, col_offset=4), FunctionDef('_min_indent', arguments([Name('self', Param(), lineno=711, col_offset=20), Name('s', Param(), lineno=711, col_offset=26)], None, None, []), [Expr(Str('Return the minimum indentation of any non-blank line in `s`', lineno=712, col_offset=8), lineno=712, col_offset=8), Assign([Name('indents', Store(), lineno=713, col_offset=8)], ListComp(Call(Name('len', Load(), lineno=713, col_offset=19), [Name('indent', Load(), lineno=713, col_offset=23)], [], None, None, lineno=713, col_offset=19), [comprehension(Name('indent', Store(), lineno=713, col_offset=35), Call(Attribute(Attribute(Name('self', Load(), lineno=713, col_offset=45), '_INDENT_RE', Load(), lineno=713, col_offset=45), 'findall', Load(), lineno=713, col_offset=45), [Name('s', Load(), lineno=713, col_offset=69)], [], None, None, lineno=713, col_offset=45), [])], lineno=713, col_offset=19), lineno=713, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=714, col_offset=11), [Name('indents', Load(), lineno=714, col_offset=15)], [], None, None, lineno=714, col_offset=11), [Gt()], [Num(0, lineno=714, col_offset=26)], lineno=714, col_offset=11), [Return(Call(Name('min', Load(), lineno=715, col_offset=19), [Name('indents', Load(), lineno=715, col_offset=23)], [], None, None, lineno=715, col_offset=19), lineno=715, col_offset=12)], [Return(Num(0, lineno=717, col_offset=19), lineno=717, col_offset=12)], lineno=714, col_offset=8)], [], lineno=711, col_offset=4), FunctionDef('_check_prompt_blank', arguments([Name('self', Param(), lineno=719, col_offset=28), Name('lines', Param(), lineno=719, col_offset=34), Name('indent', Param(), lineno=719, col_offset=41), Name('name', Param(), lineno=719, col_offset=49), Name('lineno', Param(), lineno=719, col_offset=55)], None, None, []), [Expr(Str('\n        Given the lines of a source string (including prompts and\n        leading indentation), check to make sure that every prompt is\n        followed by a space character.  If any line is not followed by\n        a space character, then raise ValueError.\n        ', lineno=725, col_offset=-1), lineno=725, col_offset=-1), For(Tuple([Name('i', Store(), lineno=726, col_offset=12), Name('line', Store(), lineno=726, col_offset=15)], Store(), lineno=726, col_offset=12), Call(Name('enumerate', Load(), lineno=726, col_offset=23), [Name('lines', Load(), lineno=726, col_offset=33)], [], None, None, lineno=726, col_offset=23), [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=727, col_offset=15), [Name('line', Load(), lineno=727, col_offset=19)], [], None, None, lineno=727, col_offset=15), [GtE()], [BinOp(Name('indent', Load(), lineno=727, col_offset=28), Add(), Num(4, lineno=727, col_offset=35), lineno=727, col_offset=28)], lineno=727, col_offset=15), Compare(Subscript(Name('line', Load(), lineno=727, col_offset=41), Index(BinOp(Name('indent', Load(), lineno=727, col_offset=46), Add(), Num(3, lineno=727, col_offset=53), lineno=727, col_offset=46)), Load(), lineno=727, col_offset=41), [NotEq()], [Str(' ', lineno=727, col_offset=59)], lineno=727, col_offset=41)], lineno=727, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=728, col_offset=22), [BinOp(Str('line %r of the docstring for %s lacks blank after %s: %r', lineno=728, col_offset=33), Mod(), Tuple([BinOp(BinOp(Name('lineno', Load(), lineno=730, col_offset=34), Add(), Name('i', Load(), lineno=730, col_offset=41), lineno=730, col_offset=34), Add(), Num(1, lineno=730, col_offset=43), lineno=730, col_offset=42), Name('name', Load(), lineno=730, col_offset=46), Subscript(Name('line', Load(), lineno=731, col_offset=34), Slice(Name('indent', Load(), lineno=731, col_offset=39), BinOp(Name('indent', Load(), lineno=731, col_offset=46), Add(), Num(3, lineno=731, col_offset=53), lineno=731, col_offset=46), None), Load(), lineno=731, col_offset=34), Name('line', Load(), lineno=731, col_offset=57)], Load(), lineno=730, col_offset=34), lineno=728, col_offset=33)], [], None, None, lineno=728, col_offset=22), None, None, lineno=728, col_offset=16)], [], lineno=727, col_offset=12)], [], lineno=726, col_offset=8)], [], lineno=719, col_offset=4), FunctionDef('_check_prefix', arguments([Name('self', Param(), lineno=733, col_offset=22), Name('lines', Param(), lineno=733, col_offset=28), Name('prefix', Param(), lineno=733, col_offset=35), Name('name', Param(), lineno=733, col_offset=43), Name('lineno', Param(), lineno=733, col_offset=49)], None, None, []), [Expr(Str('\n        Check that every line in the given list starts with the given\n        prefix; if any line does not, then raise a ValueError.\n        ', lineno=737, col_offset=-1), lineno=737, col_offset=-1), For(Tuple([Name('i', Store(), lineno=738, col_offset=12), Name('line', Store(), lineno=738, col_offset=15)], Store(), lineno=738, col_offset=12), Call(Name('enumerate', Load(), lineno=738, col_offset=23), [Name('lines', Load(), lineno=738, col_offset=33)], [], None, None, lineno=738, col_offset=23), [If(BoolOp(And(), [Name('line', Load(), lineno=739, col_offset=15), UnaryOp(Not(), Call(Attribute(Name('line', Load(), lineno=739, col_offset=28), 'startswith', Load(), lineno=739, col_offset=28), [Name('prefix', Load(), lineno=739, col_offset=44)], [], None, None, lineno=739, col_offset=28), lineno=739, col_offset=24)], lineno=739, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=740, col_offset=22), [BinOp(Str('line %r of the docstring for %s has inconsistent leading whitespace: %r', lineno=740, col_offset=33), Mod(), Tuple([BinOp(BinOp(Name('lineno', Load(), lineno=742, col_offset=34), Add(), Name('i', Load(), lineno=742, col_offset=41), lineno=742, col_offset=34), Add(), Num(1, lineno=742, col_offset=43), lineno=742, col_offset=42), Name('name', Load(), lineno=742, col_offset=46), Name('line', Load(), lineno=742, col_offset=52)], Load(), lineno=742, col_offset=34), lineno=740, col_offset=33)], [], None, None, lineno=740, col_offset=22), None, None, lineno=740, col_offset=16)], [], lineno=739, col_offset=12)], [], lineno=738, col_offset=8)], [], lineno=733, col_offset=4)], [], lineno=514, col_offset=0), ClassDef('DocTestFinder', [], [Expr(Str('\n    A class used to extract the DocTests that are relevant to a given\n    object, from its docstring and the docstrings of its contained\n    objects.  Doctests can currently be extracted from the following\n    object types: modules, functions, classes, methods, staticmethods,\n    classmethods, and properties.\n    ', lineno=756, col_offset=-1), lineno=756, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=758, col_offset=17), Name('verbose', Param(), lineno=758, col_offset=23), Name('parser', Param(), lineno=758, col_offset=38), Name('recurse', Param(), lineno=759, col_offset=17), Name('exclude_empty', Param(), lineno=759, col_offset=31)], None, None, [Name('False', Load(), lineno=758, col_offset=31), Call(Name('DocTestParser', Load(), lineno=758, col_offset=45), [], [], None, None, lineno=758, col_offset=45), Name('True', Load(), lineno=759, col_offset=25), Name('True', Load(), lineno=759, col_offset=45)]), [Expr(Str('\n        Create a new doctest finder.\n\n        The optional argument `parser` specifies a class or\n        function that should be used to create new DocTest objects (or\n        objects that implement the same interface as DocTest).  The\n        signature for this factory function should match the signature\n        of the DocTest constructor.\n\n        If the optional argument `recurse` is false, then `find` will\n        only examine the given object, and not any contained objects.\n\n        If the optional argument `exclude_empty` is false, then `find`\n        will include tests for objects with empty docstrings.\n        ', lineno=774, col_offset=-1), lineno=774, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=775, col_offset=8), '_parser', Store(), lineno=775, col_offset=8)], Name('parser', Load(), lineno=775, col_offset=23), lineno=775, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=776, col_offset=8), '_verbose', Store(), lineno=776, col_offset=8)], Name('verbose', Load(), lineno=776, col_offset=24), lineno=776, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=777, col_offset=8), '_recurse', Store(), lineno=777, col_offset=8)], Name('recurse', Load(), lineno=777, col_offset=24), lineno=777, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=778, col_offset=8), '_exclude_empty', Store(), lineno=778, col_offset=8)], Name('exclude_empty', Load(), lineno=778, col_offset=30), lineno=778, col_offset=8)], [], lineno=758, col_offset=4), FunctionDef('find', arguments([Name('self', Param(), lineno=780, col_offset=13), Name('obj', Param(), lineno=780, col_offset=19), Name('name', Param(), lineno=780, col_offset=24), Name('module', Param(), lineno=780, col_offset=35), Name('globs', Param(), lineno=780, col_offset=48), Name('extraglobs', Param(), lineno=780, col_offset=60)], None, None, [Name('None', Load(), lineno=780, col_offset=29), Name('None', Load(), lineno=780, col_offset=42), Name('None', Load(), lineno=780, col_offset=54), Name('None', Load(), lineno=780, col_offset=71)]), [Expr(Str("\n        Return a list of the DocTests that are defined by the given\n        object's docstring, or by any of its contained objects'\n        docstrings.\n\n        The optional parameter `module` is the module that contains\n        the given object.  If the module is not specified or is None, then\n        the test finder will attempt to automatically determine the\n        correct module.  The object's module is used:\n\n            - As a default namespace, if `globs` is not specified.\n            - To prevent the DocTestFinder from extracting DocTests\n              from objects that are imported from other modules.\n            - To find the name of the file containing the object.\n            - To help find the line number of the object within its\n              file.\n\n        Contained objects whose module does not match `module` are ignored.\n\n        If `module` is False, no attempt to find the module will be made.\n        This is obscure, of use mostly in tests:  if `module` is False, or\n        is None but cannot be found automatically, then all objects are\n        considered to belong to the (non-existent) module, so all contained\n        objects will (recursively) be searched for doctests.\n\n        The globals for each DocTest is formed by combining `globs`\n        and `extraglobs` (bindings in `extraglobs` override bindings\n        in `globs`).  A new copy of the globals dictionary is created\n        for each DocTest.  If `globs` is not specified, then it\n        defaults to the module's `__dict__`, if specified, or {}\n        otherwise.  If `extraglobs` is not specified, then it defaults\n        to {}.\n\n        ", lineno=814, col_offset=-1), lineno=814, col_offset=-1), If(Compare(Name('name', Load(), lineno=816, col_offset=11), [Is()], [Name('None', Load(), lineno=816, col_offset=19)], lineno=816, col_offset=11), [Assign([Name('name', Store(), lineno=817, col_offset=12)], Call(Name('getattr', Load(), lineno=817, col_offset=19), [Name('obj', Load(), lineno=817, col_offset=27), Str('__name__', lineno=817, col_offset=32), Name('None', Load(), lineno=817, col_offset=44)], [], None, None, lineno=817, col_offset=19), lineno=817, col_offset=12), If(Compare(Name('name', Load(), lineno=818, col_offset=15), [Is()], [Name('None', Load(), lineno=818, col_offset=23)], lineno=818, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=819, col_offset=22), [BinOp(Str("DocTestFinder.find: name must be given when obj.__name__ doesn't exist: %r", lineno=819, col_offset=33), Mod(), Tuple([Call(Name('type', Load(), lineno=821, col_offset=34), [Name('obj', Load(), lineno=821, col_offset=39)], [], None, None, lineno=821, col_offset=34)], Load(), lineno=821, col_offset=34), lineno=819, col_offset=33)], [], None, None, lineno=819, col_offset=22), None, None, lineno=819, col_offset=16)], [], lineno=818, col_offset=12)], [], lineno=816, col_offset=8), If(Compare(Name('module', Load(), lineno=826, col_offset=11), [Is()], [Name('False', Load(), lineno=826, col_offset=21)], lineno=826, col_offset=11), [Assign([Name('module', Store(), lineno=827, col_offset=12)], Name('None', Load(), lineno=827, col_offset=21), lineno=827, col_offset=12)], [If(Compare(Name('module', Load(), lineno=828, col_offset=13), [Is()], [Name('None', Load(), lineno=828, col_offset=23)], lineno=828, col_offset=13), [Assign([Name('module', Store(), lineno=829, col_offset=12)], Call(Attribute(Name('inspect', Load(), lineno=829, col_offset=21), 'getmodule', Load(), lineno=829, col_offset=21), [Name('obj', Load(), lineno=829, col_offset=39)], [], None, None, lineno=829, col_offset=21), lineno=829, col_offset=12)], [], lineno=828, col_offset=13)], lineno=826, col_offset=8), TryExcept([Assign([Name('file', Store(), lineno=835, col_offset=12)], BoolOp(Or(), [Call(Attribute(Name('inspect', Load(), lineno=835, col_offset=19), 'getsourcefile', Load(), lineno=835, col_offset=19), [Name('obj', Load(), lineno=835, col_offset=41)], [], None, None, lineno=835, col_offset=19), Call(Attribute(Name('inspect', Load(), lineno=835, col_offset=49), 'getfile', Load(), lineno=835, col_offset=49), [Name('obj', Load(), lineno=835, col_offset=65)], [], None, None, lineno=835, col_offset=49)], lineno=835, col_offset=19), lineno=835, col_offset=12), If(Compare(Name('module', Load(), lineno=836, col_offset=15), [IsNot()], [Name('None', Load(), lineno=836, col_offset=29)], lineno=836, col_offset=15), [Assign([Name('source_lines', Store(), lineno=840, col_offset=16)], Call(Attribute(Name('linecache', Load(), lineno=840, col_offset=31), 'getlines', Load(), lineno=840, col_offset=31), [Name('file', Load(), lineno=840, col_offset=50), Attribute(Name('module', Load(), lineno=840, col_offset=56), '__dict__', Load(), lineno=840, col_offset=56)], [], None, None, lineno=840, col_offset=31), lineno=840, col_offset=16)], [Assign([Name('source_lines', Store(), lineno=844, col_offset=16)], Call(Attribute(Name('linecache', Load(), lineno=844, col_offset=31), 'getlines', Load(), lineno=844, col_offset=31), [Name('file', Load(), lineno=844, col_offset=50)], [], None, None, lineno=844, col_offset=31), lineno=844, col_offset=16)], lineno=836, col_offset=12), If(UnaryOp(Not(), Name('source_lines', Load(), lineno=845, col_offset=19), lineno=845, col_offset=15), [Assign([Name('source_lines', Store(), lineno=846, col_offset=16)], Name('None', Load(), lineno=846, col_offset=31), lineno=846, col_offset=16)], [], lineno=845, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=847, col_offset=15), None, [Assign([Name('source_lines', Store(), lineno=848, col_offset=12)], Name('None', Load(), lineno=848, col_offset=27), lineno=848, col_offset=12)], lineno=847, col_offset=8)], [], lineno=834, col_offset=8), If(Compare(Name('globs', Load(), lineno=851, col_offset=11), [Is()], [Name('None', Load(), lineno=851, col_offset=20)], lineno=851, col_offset=11), [If(Compare(Name('module', Load(), lineno=852, col_offset=15), [Is()], [Name('None', Load(), lineno=852, col_offset=25)], lineno=852, col_offset=15), [Assign([Name('globs', Store(), lineno=853, col_offset=16)], Dict([], [], lineno=853, col_offset=24), lineno=853, col_offset=16)], [Assign([Name('globs', Store(), lineno=855, col_offset=16)], Call(Attribute(Attribute(Name('module', Load(), lineno=855, col_offset=24), '__dict__', Load(), lineno=855, col_offset=24), 'copy', Load(), lineno=855, col_offset=24), [], [], None, None, lineno=855, col_offset=24), lineno=855, col_offset=16)], lineno=852, col_offset=12)], [Assign([Name('globs', Store(), lineno=857, col_offset=12)], Call(Attribute(Name('globs', Load(), lineno=857, col_offset=20), 'copy', Load(), lineno=857, col_offset=20), [], [], None, None, lineno=857, col_offset=20), lineno=857, col_offset=12)], lineno=851, col_offset=8), If(Compare(Name('extraglobs', Load(), lineno=858, col_offset=11), [IsNot()], [Name('None', Load(), lineno=858, col_offset=29)], lineno=858, col_offset=11), [Expr(Call(Attribute(Name('globs', Load(), lineno=859, col_offset=12), 'update', Load(), lineno=859, col_offset=12), [Name('extraglobs', Load(), lineno=859, col_offset=25)], [], None, None, lineno=859, col_offset=12), lineno=859, col_offset=12)], [], lineno=858, col_offset=8), If(Compare(Str('__name__', lineno=860, col_offset=11), [NotIn()], [Name('globs', Load(), lineno=860, col_offset=29)], lineno=860, col_offset=11), [Assign([Subscript(Name('globs', Load(), lineno=861, col_offset=12), Index(Str('__name__', lineno=861, col_offset=18)), Store(), lineno=861, col_offset=12)], Str('__main__', lineno=861, col_offset=32), lineno=861, col_offset=12)], [], lineno=860, col_offset=8), Assign([Name('tests', Store(), lineno=864, col_offset=8)], List([], Load(), lineno=864, col_offset=16), lineno=864, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=865, col_offset=8), '_find', Load(), lineno=865, col_offset=8), [Name('tests', Load(), lineno=865, col_offset=19), Name('obj', Load(), lineno=865, col_offset=26), Name('name', Load(), lineno=865, col_offset=31), Name('module', Load(), lineno=865, col_offset=37), Name('source_lines', Load(), lineno=865, col_offset=45), Name('globs', Load(), lineno=865, col_offset=59), Dict([], [], lineno=865, col_offset=66)], [], None, None, lineno=865, col_offset=8), lineno=865, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=870, col_offset=8), 'sort', Load(), lineno=870, col_offset=8), [], [], None, None, lineno=870, col_offset=8), lineno=870, col_offset=8), Return(Name('tests', Load(), lineno=871, col_offset=15), lineno=871, col_offset=8)], [], lineno=780, col_offset=4), FunctionDef('_from_module', arguments([Name('self', Param(), lineno=873, col_offset=21), Name('module', Param(), lineno=873, col_offset=27), Name('object', Param(), lineno=873, col_offset=35)], None, None, []), [Expr(Str('\n        Return true if the given object is defined in the given\n        module.\n        ', lineno=877, col_offset=-1), lineno=877, col_offset=-1), If(Compare(Name('module', Load(), lineno=878, col_offset=11), [Is()], [Name('None', Load(), lineno=878, col_offset=21)], lineno=878, col_offset=11), [Return(Name('True', Load(), lineno=879, col_offset=19), lineno=879, col_offset=12)], [If(Compare(Call(Attribute(Name('inspect', Load(), lineno=880, col_offset=13), 'getmodule', Load(), lineno=880, col_offset=13), [Name('object', Load(), lineno=880, col_offset=31)], [], None, None, lineno=880, col_offset=13), [IsNot()], [Name('None', Load(), lineno=880, col_offset=46)], lineno=880, col_offset=13), [Return(Compare(Name('module', Load(), lineno=881, col_offset=19), [Is()], [Call(Attribute(Name('inspect', Load(), lineno=881, col_offset=29), 'getmodule', Load(), lineno=881, col_offset=29), [Name('object', Load(), lineno=881, col_offset=47)], [], None, None, lineno=881, col_offset=29)], lineno=881, col_offset=19), lineno=881, col_offset=12)], [If(Call(Attribute(Name('inspect', Load(), lineno=882, col_offset=13), 'isfunction', Load(), lineno=882, col_offset=13), [Name('object', Load(), lineno=882, col_offset=32)], [], None, None, lineno=882, col_offset=13), [Return(Compare(Attribute(Name('module', Load(), lineno=883, col_offset=19), '__dict__', Load(), lineno=883, col_offset=19), [Is()], [Attribute(Name('object', Load(), lineno=883, col_offset=38), 'func_globals', Load(), lineno=883, col_offset=38)], lineno=883, col_offset=19), lineno=883, col_offset=12)], [If(Call(Attribute(Name('inspect', Load(), lineno=884, col_offset=13), 'isclass', Load(), lineno=884, col_offset=13), [Name('object', Load(), lineno=884, col_offset=29)], [], None, None, lineno=884, col_offset=13), [Return(Compare(Attribute(Name('module', Load(), lineno=885, col_offset=19), '__name__', Load(), lineno=885, col_offset=19), [Eq()], [Attribute(Name('object', Load(), lineno=885, col_offset=38), '__module__', Load(), lineno=885, col_offset=38)], lineno=885, col_offset=19), lineno=885, col_offset=12)], [If(Call(Name('hasattr', Load(), lineno=886, col_offset=13), [Name('object', Load(), lineno=886, col_offset=21), Str('__module__', lineno=886, col_offset=29)], [], None, None, lineno=886, col_offset=13), [Return(Compare(Attribute(Name('module', Load(), lineno=887, col_offset=19), '__name__', Load(), lineno=887, col_offset=19), [Eq()], [Attribute(Name('object', Load(), lineno=887, col_offset=38), '__module__', Load(), lineno=887, col_offset=38)], lineno=887, col_offset=19), lineno=887, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=888, col_offset=13), [Name('object', Load(), lineno=888, col_offset=24), Name('property', Load(), lineno=888, col_offset=32)], [], None, None, lineno=888, col_offset=13), [Return(Name('True', Load(), lineno=889, col_offset=19), lineno=889, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=891, col_offset=18), [Str('object must be a class or function', lineno=891, col_offset=29)], [], None, None, lineno=891, col_offset=18), None, None, lineno=891, col_offset=12)], lineno=888, col_offset=13)], lineno=886, col_offset=13)], lineno=884, col_offset=13)], lineno=882, col_offset=13)], lineno=880, col_offset=13)], lineno=878, col_offset=8)], [], lineno=873, col_offset=4), FunctionDef('_find', arguments([Name('self', Param(), lineno=893, col_offset=14), Name('tests', Param(), lineno=893, col_offset=20), Name('obj', Param(), lineno=893, col_offset=27), Name('name', Param(), lineno=893, col_offset=32), Name('module', Param(), lineno=893, col_offset=38), Name('source_lines', Param(), lineno=893, col_offset=46), Name('globs', Param(), lineno=893, col_offset=60), Name('seen', Param(), lineno=893, col_offset=67)], None, None, []), [Expr(Str('\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        ', lineno=897, col_offset=-1), lineno=897, col_offset=-1), If(Attribute(Name('self', Load(), lineno=898, col_offset=11), '_verbose', Load(), lineno=898, col_offset=11), [Print(None, [BinOp(Str('Finding tests in %s', lineno=899, col_offset=18), Mod(), Name('name', Load(), lineno=899, col_offset=42), lineno=899, col_offset=18)], True, lineno=899, col_offset=12)], [], lineno=898, col_offset=8), If(Compare(Call(Name('id', Load(), lineno=902, col_offset=11), [Name('obj', Load(), lineno=902, col_offset=14)], [], None, None, lineno=902, col_offset=11), [In()], [Name('seen', Load(), lineno=902, col_offset=22)], lineno=902, col_offset=11), [Return(None, lineno=903, col_offset=12)], [], lineno=902, col_offset=8), Assign([Subscript(Name('seen', Load(), lineno=904, col_offset=8), Index(Call(Name('id', Load(), lineno=904, col_offset=13), [Name('obj', Load(), lineno=904, col_offset=16)], [], None, None, lineno=904, col_offset=13)), Store(), lineno=904, col_offset=8)], Num(1, lineno=904, col_offset=24), lineno=904, col_offset=8), Assign([Name('test', Store(), lineno=907, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=907, col_offset=15), '_get_test', Load(), lineno=907, col_offset=15), [Name('obj', Load(), lineno=907, col_offset=30), Name('name', Load(), lineno=907, col_offset=35), Name('module', Load(), lineno=907, col_offset=41), Name('globs', Load(), lineno=907, col_offset=49), Name('source_lines', Load(), lineno=907, col_offset=56)], [], None, None, lineno=907, col_offset=15), lineno=907, col_offset=8), If(Compare(Name('test', Load(), lineno=908, col_offset=11), [IsNot()], [Name('None', Load(), lineno=908, col_offset=23)], lineno=908, col_offset=11), [Expr(Call(Attribute(Name('tests', Load(), lineno=909, col_offset=12), 'append', Load(), lineno=909, col_offset=12), [Name('test', Load(), lineno=909, col_offset=25)], [], None, None, lineno=909, col_offset=12), lineno=909, col_offset=12)], [], lineno=908, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('inspect', Load(), lineno=912, col_offset=11), 'ismodule', Load(), lineno=912, col_offset=11), [Name('obj', Load(), lineno=912, col_offset=28)], [], None, None, lineno=912, col_offset=11), Attribute(Name('self', Load(), lineno=912, col_offset=37), '_recurse', Load(), lineno=912, col_offset=37)], lineno=912, col_offset=11), [For(Tuple([Name('valname', Store(), lineno=913, col_offset=16), Name('val', Store(), lineno=913, col_offset=25)], Store(), lineno=913, col_offset=16), Call(Attribute(Attribute(Name('obj', Load(), lineno=913, col_offset=32), '__dict__', Load(), lineno=913, col_offset=32), 'items', Load(), lineno=913, col_offset=32), [], [], None, None, lineno=913, col_offset=32), [Assign([Name('valname', Store(), lineno=914, col_offset=16)], BinOp(Str('%s.%s', lineno=914, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=914, col_offset=37), Name('valname', Load(), lineno=914, col_offset=43)], Load(), lineno=914, col_offset=37), lineno=914, col_offset=26), lineno=914, col_offset=16), If(BoolOp(And(), [BoolOp(Or(), [Call(Attribute(Name('inspect', Load(), lineno=916, col_offset=21), 'isfunction', Load(), lineno=916, col_offset=21), [Name('val', Load(), lineno=916, col_offset=40)], [], None, None, lineno=916, col_offset=21), Call(Attribute(Name('inspect', Load(), lineno=916, col_offset=48), 'isclass', Load(), lineno=916, col_offset=48), [Name('val', Load(), lineno=916, col_offset=64)], [], None, None, lineno=916, col_offset=48)], lineno=916, col_offset=21), Call(Attribute(Name('self', Load(), lineno=917, col_offset=20), '_from_module', Load(), lineno=917, col_offset=20), [Name('module', Load(), lineno=917, col_offset=38), Name('val', Load(), lineno=917, col_offset=46)], [], None, None, lineno=917, col_offset=20)], lineno=916, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=918, col_offset=20), '_find', Load(), lineno=918, col_offset=20), [Name('tests', Load(), lineno=918, col_offset=31), Name('val', Load(), lineno=918, col_offset=38), Name('valname', Load(), lineno=918, col_offset=43), Name('module', Load(), lineno=918, col_offset=52), Name('source_lines', Load(), lineno=918, col_offset=60), Name('globs', Load(), lineno=919, col_offset=31), Name('seen', Load(), lineno=919, col_offset=38)], [], None, None, lineno=918, col_offset=20), lineno=918, col_offset=20)], [], lineno=916, col_offset=16)], [], lineno=913, col_offset=12)], [], lineno=912, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('inspect', Load(), lineno=922, col_offset=11), 'ismodule', Load(), lineno=922, col_offset=11), [Name('obj', Load(), lineno=922, col_offset=28)], [], None, None, lineno=922, col_offset=11), Attribute(Name('self', Load(), lineno=922, col_offset=37), '_recurse', Load(), lineno=922, col_offset=37)], lineno=922, col_offset=11), [For(Tuple([Name('valname', Store(), lineno=923, col_offset=16), Name('val', Store(), lineno=923, col_offset=25)], Store(), lineno=923, col_offset=16), Call(Attribute(Call(Name('getattr', Load(), lineno=923, col_offset=32), [Name('obj', Load(), lineno=923, col_offset=40), Str('__test__', lineno=923, col_offset=45), Dict([], [], lineno=923, col_offset=57)], [], None, None, lineno=923, col_offset=32), 'items', Load(), lineno=923, col_offset=32), [], [], None, None, lineno=923, col_offset=32), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=924, col_offset=23), [Name('valname', Load(), lineno=924, col_offset=34), Name('basestring', Load(), lineno=924, col_offset=43)], [], None, None, lineno=924, col_offset=23), lineno=924, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=925, col_offset=26), [BinOp(Str('DocTestFinder.find: __test__ keys must be strings: %r', lineno=925, col_offset=37), Mod(), Tuple([Call(Name('type', Load(), lineno=927, col_offset=38), [Name('valname', Load(), lineno=927, col_offset=43)], [], None, None, lineno=927, col_offset=38)], Load(), lineno=927, col_offset=38), lineno=925, col_offset=37)], [], None, None, lineno=925, col_offset=26), None, None, lineno=925, col_offset=20)], [], lineno=924, col_offset=16), If(UnaryOp(Not(), BoolOp(Or(), [Call(Attribute(Name('inspect', Load(), lineno=928, col_offset=24), 'isfunction', Load(), lineno=928, col_offset=24), [Name('val', Load(), lineno=928, col_offset=43)], [], None, None, lineno=928, col_offset=24), Call(Attribute(Name('inspect', Load(), lineno=928, col_offset=51), 'isclass', Load(), lineno=928, col_offset=51), [Name('val', Load(), lineno=928, col_offset=67)], [], None, None, lineno=928, col_offset=51), Call(Attribute(Name('inspect', Load(), lineno=929, col_offset=24), 'ismethod', Load(), lineno=929, col_offset=24), [Name('val', Load(), lineno=929, col_offset=41)], [], None, None, lineno=929, col_offset=24), Call(Attribute(Name('inspect', Load(), lineno=929, col_offset=49), 'ismodule', Load(), lineno=929, col_offset=49), [Name('val', Load(), lineno=929, col_offset=66)], [], None, None, lineno=929, col_offset=49), Call(Name('isinstance', Load(), lineno=930, col_offset=24), [Name('val', Load(), lineno=930, col_offset=35), Name('basestring', Load(), lineno=930, col_offset=40)], [], None, None, lineno=930, col_offset=24)], lineno=928, col_offset=24), lineno=928, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=931, col_offset=26), [BinOp(Str('DocTestFinder.find: __test__ values must be strings, functions, methods, classes, or modules: %r', lineno=931, col_offset=37), Mod(), Tuple([Call(Name('type', Load(), lineno=934, col_offset=38), [Name('val', Load(), lineno=934, col_offset=43)], [], None, None, lineno=934, col_offset=38)], Load(), lineno=934, col_offset=38), lineno=931, col_offset=37)], [], None, None, lineno=931, col_offset=26), None, None, lineno=931, col_offset=20)], [], lineno=928, col_offset=16), Assign([Name('valname', Store(), lineno=935, col_offset=16)], BinOp(Str('%s.__test__.%s', lineno=935, col_offset=26), Mod(), Tuple([Name('name', Load(), lineno=935, col_offset=46), Name('valname', Load(), lineno=935, col_offset=52)], Load(), lineno=935, col_offset=46), lineno=935, col_offset=26), lineno=935, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=936, col_offset=16), '_find', Load(), lineno=936, col_offset=16), [Name('tests', Load(), lineno=936, col_offset=27), Name('val', Load(), lineno=936, col_offset=34), Name('valname', Load(), lineno=936, col_offset=39), Name('module', Load(), lineno=936, col_offset=48), Name('source_lines', Load(), lineno=936, col_offset=56), Name('globs', Load(), lineno=937, col_offset=27), Name('seen', Load(), lineno=937, col_offset=34)], [], None, None, lineno=936, col_offset=16), lineno=936, col_offset=16)], [], lineno=923, col_offset=12)], [], lineno=922, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('inspect', Load(), lineno=940, col_offset=11), 'isclass', Load(), lineno=940, col_offset=11), [Name('obj', Load(), lineno=940, col_offset=27)], [], None, None, lineno=940, col_offset=11), Attribute(Name('self', Load(), lineno=940, col_offset=36), '_recurse', Load(), lineno=940, col_offset=36)], lineno=940, col_offset=11), [For(Tuple([Name('valname', Store(), lineno=941, col_offset=16), Name('val', Store(), lineno=941, col_offset=25)], Store(), lineno=941, col_offset=16), Call(Attribute(Attribute(Name('obj', Load(), lineno=941, col_offset=32), '__dict__', Load(), lineno=941, col_offset=32), 'items', Load(), lineno=941, col_offset=32), [], [], None, None, lineno=941, col_offset=32), [If(Call(Name('isinstance', Load(), lineno=943, col_offset=19), [Name('val', Load(), lineno=943, col_offset=30), Name('staticmethod', Load(), lineno=943, col_offset=35)], [], None, None, lineno=943, col_offset=19), [Assign([Name('val', Store(), lineno=944, col_offset=20)], Call(Name('getattr', Load(), lineno=944, col_offset=26), [Name('obj', Load(), lineno=944, col_offset=34), Name('valname', Load(), lineno=944, col_offset=39)], [], None, None, lineno=944, col_offset=26), lineno=944, col_offset=20)], [], lineno=943, col_offset=16), If(Call(Name('isinstance', Load(), lineno=945, col_offset=19), [Name('val', Load(), lineno=945, col_offset=30), Name('classmethod', Load(), lineno=945, col_offset=35)], [], None, None, lineno=945, col_offset=19), [Assign([Name('val', Store(), lineno=946, col_offset=20)], Attribute(Call(Name('getattr', Load(), lineno=946, col_offset=26), [Name('obj', Load(), lineno=946, col_offset=34), Name('valname', Load(), lineno=946, col_offset=39)], [], None, None, lineno=946, col_offset=26), 'im_func', Load(), lineno=946, col_offset=26), lineno=946, col_offset=20)], [], lineno=945, col_offset=16), If(BoolOp(And(), [BoolOp(Or(), [Call(Attribute(Name('inspect', Load(), lineno=949, col_offset=21), 'isfunction', Load(), lineno=949, col_offset=21), [Name('val', Load(), lineno=949, col_offset=40)], [], None, None, lineno=949, col_offset=21), Call(Attribute(Name('inspect', Load(), lineno=949, col_offset=48), 'isclass', Load(), lineno=949, col_offset=48), [Name('val', Load(), lineno=949, col_offset=64)], [], None, None, lineno=949, col_offset=48), Call(Name('isinstance', Load(), lineno=950, col_offset=22), [Name('val', Load(), lineno=950, col_offset=33), Name('property', Load(), lineno=950, col_offset=38)], [], None, None, lineno=950, col_offset=22)], lineno=949, col_offset=21), Call(Attribute(Name('self', Load(), lineno=951, col_offset=22), '_from_module', Load(), lineno=951, col_offset=22), [Name('module', Load(), lineno=951, col_offset=40), Name('val', Load(), lineno=951, col_offset=48)], [], None, None, lineno=951, col_offset=22)], lineno=949, col_offset=20), [Assign([Name('valname', Store(), lineno=952, col_offset=20)], BinOp(Str('%s.%s', lineno=952, col_offset=30), Mod(), Tuple([Name('name', Load(), lineno=952, col_offset=41), Name('valname', Load(), lineno=952, col_offset=47)], Load(), lineno=952, col_offset=41), lineno=952, col_offset=30), lineno=952, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=953, col_offset=20), '_find', Load(), lineno=953, col_offset=20), [Name('tests', Load(), lineno=953, col_offset=31), Name('val', Load(), lineno=953, col_offset=38), Name('valname', Load(), lineno=953, col_offset=43), Name('module', Load(), lineno=953, col_offset=52), Name('source_lines', Load(), lineno=953, col_offset=60), Name('globs', Load(), lineno=954, col_offset=31), Name('seen', Load(), lineno=954, col_offset=38)], [], None, None, lineno=953, col_offset=20), lineno=953, col_offset=20)], [], lineno=949, col_offset=16)], [], lineno=941, col_offset=12)], [], lineno=940, col_offset=8)], [], lineno=893, col_offset=4), FunctionDef('_get_test', arguments([Name('self', Param(), lineno=956, col_offset=18), Name('obj', Param(), lineno=956, col_offset=24), Name('name', Param(), lineno=956, col_offset=29), Name('module', Param(), lineno=956, col_offset=35), Name('globs', Param(), lineno=956, col_offset=43), Name('source_lines', Param(), lineno=956, col_offset=50)], None, None, []), [Expr(Str('\n        Return a DocTest for the given object, if it defines a docstring;\n        otherwise, return None.\n        ', lineno=960, col_offset=-1), lineno=960, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=963, col_offset=11), [Name('obj', Load(), lineno=963, col_offset=22), Name('basestring', Load(), lineno=963, col_offset=27)], [], None, None, lineno=963, col_offset=11), [Assign([Name('docstring', Store(), lineno=964, col_offset=12)], Name('obj', Load(), lineno=964, col_offset=24), lineno=964, col_offset=12)], [TryExcept([If(Compare(Attribute(Name('obj', Load(), lineno=967, col_offset=19), '__doc__', Load(), lineno=967, col_offset=19), [Is()], [Name('None', Load(), lineno=967, col_offset=34)], lineno=967, col_offset=19), [Assign([Name('docstring', Store(), lineno=968, col_offset=20)], Str('', lineno=968, col_offset=32), lineno=968, col_offset=20)], [Assign([Name('docstring', Store(), lineno=970, col_offset=20)], Attribute(Name('obj', Load(), lineno=970, col_offset=32), '__doc__', Load(), lineno=970, col_offset=32), lineno=970, col_offset=20), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=971, col_offset=27), [Name('docstring', Load(), lineno=971, col_offset=38), Name('basestring', Load(), lineno=971, col_offset=49)], [], None, None, lineno=971, col_offset=27), lineno=971, col_offset=23), [Assign([Name('docstring', Store(), lineno=972, col_offset=24)], Call(Name('str', Load(), lineno=972, col_offset=36), [Name('docstring', Load(), lineno=972, col_offset=40)], [], None, None, lineno=972, col_offset=36), lineno=972, col_offset=24)], [], lineno=971, col_offset=20)], lineno=967, col_offset=16)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=973, col_offset=20), Name('AttributeError', Load(), lineno=973, col_offset=31)], Load(), lineno=973, col_offset=20), None, [Assign([Name('docstring', Store(), lineno=974, col_offset=16)], Str('', lineno=974, col_offset=28), lineno=974, col_offset=16)], lineno=973, col_offset=12)], [], lineno=966, col_offset=12)], lineno=963, col_offset=8), Assign([Name('lineno', Store(), lineno=977, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=977, col_offset=17), '_find_lineno', Load(), lineno=977, col_offset=17), [Name('obj', Load(), lineno=977, col_offset=35), Name('source_lines', Load(), lineno=977, col_offset=40)], [], None, None, lineno=977, col_offset=17), lineno=977, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=980, col_offset=11), '_exclude_empty', Load(), lineno=980, col_offset=11), UnaryOp(Not(), Name('docstring', Load(), lineno=980, col_offset=39), lineno=980, col_offset=35)], lineno=980, col_offset=11), [Return(Name('None', Load(), lineno=981, col_offset=19), lineno=981, col_offset=12)], [], lineno=980, col_offset=8), If(Compare(Name('module', Load(), lineno=984, col_offset=11), [Is()], [Name('None', Load(), lineno=984, col_offset=21)], lineno=984, col_offset=11), [Assign([Name('filename', Store(), lineno=985, col_offset=12)], Name('None', Load(), lineno=985, col_offset=23), lineno=985, col_offset=12)], [Assign([Name('filename', Store(), lineno=987, col_offset=12)], Call(Name('getattr', Load(), lineno=987, col_offset=23), [Name('module', Load(), lineno=987, col_offset=31), Str('__file__', lineno=987, col_offset=39), Attribute(Name('module', Load(), lineno=987, col_offset=51), '__name__', Load(), lineno=987, col_offset=51)], [], None, None, lineno=987, col_offset=23), lineno=987, col_offset=12), If(Compare(Subscript(Name('filename', Load(), lineno=988, col_offset=15), Slice(Num(-4, lineno=988, col_offset=25), None, None), Load(), lineno=988, col_offset=15), [In()], [Tuple([Str('.pyc', lineno=988, col_offset=33), Str('.pyo', lineno=988, col_offset=41)], Load(), lineno=988, col_offset=33)], lineno=988, col_offset=15), [Assign([Name('filename', Store(), lineno=989, col_offset=16)], Subscript(Name('filename', Load(), lineno=989, col_offset=27), Slice(None, Num(-1, lineno=989, col_offset=38), None), Load(), lineno=989, col_offset=27), lineno=989, col_offset=16)], [], lineno=988, col_offset=12)], lineno=984, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=990, col_offset=15), '_parser', Load(), lineno=990, col_offset=15), 'get_doctest', Load(), lineno=990, col_offset=15), [Name('docstring', Load(), lineno=990, col_offset=40), Name('globs', Load(), lineno=990, col_offset=51), Name('name', Load(), lineno=990, col_offset=58), Name('filename', Load(), lineno=991, col_offset=40), Name('lineno', Load(), lineno=991, col_offset=50)], [], None, None, lineno=990, col_offset=15), lineno=990, col_offset=8)], [], lineno=956, col_offset=4), FunctionDef('_find_lineno', arguments([Name('self', Param(), lineno=993, col_offset=21), Name('obj', Param(), lineno=993, col_offset=27), Name('source_lines', Param(), lineno=993, col_offset=32)], None, None, []), [Expr(Str("\n        Return a line number of the given object's docstring.  Note:\n        this method assumes that the object has a docstring.\n        ", lineno=997, col_offset=-1), lineno=997, col_offset=-1), Assign([Name('lineno', Store(), lineno=998, col_offset=8)], Name('None', Load(), lineno=998, col_offset=17), lineno=998, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1001, col_offset=11), 'ismodule', Load(), lineno=1001, col_offset=11), [Name('obj', Load(), lineno=1001, col_offset=28)], [], None, None, lineno=1001, col_offset=11), [Assign([Name('lineno', Store(), lineno=1002, col_offset=12)], Num(0, lineno=1002, col_offset=21), lineno=1002, col_offset=12)], [], lineno=1001, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1007, col_offset=11), 'isclass', Load(), lineno=1007, col_offset=11), [Name('obj', Load(), lineno=1007, col_offset=27)], [], None, None, lineno=1007, col_offset=11), [If(Compare(Name('source_lines', Load(), lineno=1008, col_offset=15), [Is()], [Name('None', Load(), lineno=1008, col_offset=31)], lineno=1008, col_offset=15), [Return(Name('None', Load(), lineno=1009, col_offset=23), lineno=1009, col_offset=16)], [], lineno=1008, col_offset=12), Assign([Name('pat', Store(), lineno=1010, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1010, col_offset=18), 'compile', Load(), lineno=1010, col_offset=18), [BinOp(Str('^\\s*class\\s*%s\\b', lineno=1010, col_offset=29), Mod(), Call(Name('getattr', Load(), lineno=1011, col_offset=29), [Name('obj', Load(), lineno=1011, col_offset=37), Str('__name__', lineno=1011, col_offset=42), Str('-', lineno=1011, col_offset=54)], [], None, None, lineno=1011, col_offset=29), lineno=1010, col_offset=29)], [], None, None, lineno=1010, col_offset=18), lineno=1010, col_offset=12), For(Tuple([Name('i', Store(), lineno=1012, col_offset=16), Name('line', Store(), lineno=1012, col_offset=19)], Store(), lineno=1012, col_offset=16), Call(Name('enumerate', Load(), lineno=1012, col_offset=27), [Name('source_lines', Load(), lineno=1012, col_offset=37)], [], None, None, lineno=1012, col_offset=27), [If(Call(Attribute(Name('pat', Load(), lineno=1013, col_offset=19), 'match', Load(), lineno=1013, col_offset=19), [Name('line', Load(), lineno=1013, col_offset=29)], [], None, None, lineno=1013, col_offset=19), [Assign([Name('lineno', Store(), lineno=1014, col_offset=20)], Name('i', Load(), lineno=1014, col_offset=29), lineno=1014, col_offset=20), Break( lineno=1015, col_offset=20)], [], lineno=1013, col_offset=16)], [], lineno=1012, col_offset=12)], [], lineno=1007, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1018, col_offset=11), 'ismethod', Load(), lineno=1018, col_offset=11), [Name('obj', Load(), lineno=1018, col_offset=28)], [], None, None, lineno=1018, col_offset=11), [Assign([Name('obj', Store(), lineno=1018, col_offset=34)], Attribute(Name('obj', Load(), lineno=1018, col_offset=40), 'im_func', Load(), lineno=1018, col_offset=40), lineno=1018, col_offset=34)], [], lineno=1018, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1019, col_offset=11), 'isfunction', Load(), lineno=1019, col_offset=11), [Name('obj', Load(), lineno=1019, col_offset=30)], [], None, None, lineno=1019, col_offset=11), [Assign([Name('obj', Store(), lineno=1019, col_offset=36)], Attribute(Name('obj', Load(), lineno=1019, col_offset=42), 'func_code', Load(), lineno=1019, col_offset=42), lineno=1019, col_offset=36)], [], lineno=1019, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1020, col_offset=11), 'istraceback', Load(), lineno=1020, col_offset=11), [Name('obj', Load(), lineno=1020, col_offset=31)], [], None, None, lineno=1020, col_offset=11), [Assign([Name('obj', Store(), lineno=1020, col_offset=37)], Attribute(Name('obj', Load(), lineno=1020, col_offset=43), 'tb_frame', Load(), lineno=1020, col_offset=43), lineno=1020, col_offset=37)], [], lineno=1020, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1021, col_offset=11), 'isframe', Load(), lineno=1021, col_offset=11), [Name('obj', Load(), lineno=1021, col_offset=27)], [], None, None, lineno=1021, col_offset=11), [Assign([Name('obj', Store(), lineno=1021, col_offset=33)], Attribute(Name('obj', Load(), lineno=1021, col_offset=39), 'f_code', Load(), lineno=1021, col_offset=39), lineno=1021, col_offset=33)], [], lineno=1021, col_offset=8), If(Call(Attribute(Name('inspect', Load(), lineno=1022, col_offset=11), 'iscode', Load(), lineno=1022, col_offset=11), [Name('obj', Load(), lineno=1022, col_offset=26)], [], None, None, lineno=1022, col_offset=11), [Assign([Name('lineno', Store(), lineno=1023, col_offset=12)], BinOp(Call(Name('getattr', Load(), lineno=1023, col_offset=21), [Name('obj', Load(), lineno=1023, col_offset=29), Str('co_firstlineno', lineno=1023, col_offset=34), Name('None', Load(), lineno=1023, col_offset=52)], [], None, None, lineno=1023, col_offset=21), Sub(), Num(1, lineno=1023, col_offset=58), lineno=1023, col_offset=21), lineno=1023, col_offset=12)], [], lineno=1022, col_offset=8), If(Compare(Name('lineno', Load(), lineno=1030, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1030, col_offset=25)], lineno=1030, col_offset=11), [If(Compare(Name('source_lines', Load(), lineno=1031, col_offset=15), [Is()], [Name('None', Load(), lineno=1031, col_offset=31)], lineno=1031, col_offset=15), [Return(BinOp(Name('lineno', Load(), lineno=1032, col_offset=23), Add(), Num(1, lineno=1032, col_offset=30), lineno=1032, col_offset=23), lineno=1032, col_offset=16)], [], lineno=1031, col_offset=12), Assign([Name('pat', Store(), lineno=1033, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1033, col_offset=18), 'compile', Load(), lineno=1033, col_offset=18), [Str('(^|.*:)\\s*\\w*("|\')', lineno=1033, col_offset=29)], [], None, None, lineno=1033, col_offset=18), lineno=1033, col_offset=12), For(Name('lineno', Store(), lineno=1034, col_offset=16), Call(Name('range', Load(), lineno=1034, col_offset=26), [Name('lineno', Load(), lineno=1034, col_offset=32), Call(Name('len', Load(), lineno=1034, col_offset=40), [Name('source_lines', Load(), lineno=1034, col_offset=44)], [], None, None, lineno=1034, col_offset=40)], [], None, None, lineno=1034, col_offset=26), [If(Call(Attribute(Name('pat', Load(), lineno=1035, col_offset=19), 'match', Load(), lineno=1035, col_offset=19), [Subscript(Name('source_lines', Load(), lineno=1035, col_offset=29), Index(Name('lineno', Load(), lineno=1035, col_offset=42)), Load(), lineno=1035, col_offset=29)], [], None, None, lineno=1035, col_offset=19), [Return(Name('lineno', Load(), lineno=1036, col_offset=27), lineno=1036, col_offset=20)], [], lineno=1035, col_offset=16)], [], lineno=1034, col_offset=12)], [], lineno=1030, col_offset=8), Return(Name('None', Load(), lineno=1039, col_offset=15), lineno=1039, col_offset=8)], [], lineno=993, col_offset=4)], [], lineno=749, col_offset=0), ClassDef('DocTestRunner', [], [Expr(Str("\n    A class used to run DocTest test cases, and accumulate statistics.\n    The `run` method is used to process a single DocTest case.  It\n    returns a tuple `(f, t)`, where `t` is the number of test cases\n    tried, and `f` is the number of test cases that failed.\n\n        >>> tests = DocTestFinder().find(_TestClass)\n        >>> runner = DocTestRunner(verbose=False)\n        >>> tests.sort(key = lambda test: test.name)\n        >>> for test in tests:\n        ...     print test.name, '->', runner.run(test)\n        _TestClass -> TestResults(failed=0, attempted=2)\n        _TestClass.__init__ -> TestResults(failed=0, attempted=2)\n        _TestClass.get -> TestResults(failed=0, attempted=2)\n        _TestClass.square -> TestResults(failed=0, attempted=1)\n\n    The `summarize` method prints a summary of all the test cases that\n    have been run by the runner, and returns an aggregated `(f, t)`\n    tuple:\n\n        >>> runner.summarize(verbose=1)\n        4 items passed all tests:\n           2 tests in _TestClass\n           2 tests in _TestClass.__init__\n           2 tests in _TestClass.get\n           1 tests in _TestClass.square\n        7 tests in 4 items.\n        7 passed and 0 failed.\n        Test passed.\n        TestResults(failed=0, attempted=7)\n\n    The aggregated number of tried examples and failed examples is\n    also available via the `tries` and `failures` attributes:\n\n        >>> runner.tries\n        7\n        >>> runner.failures\n        0\n\n    The comparison between expected outputs and actual outputs is done\n    by an `OutputChecker`.  This comparison may be customized with a\n    number of option flags; see the documentation for `testmod` for\n    more information.  If the option flags are insufficient, then the\n    comparison may also be customized by passing a subclass of\n    `OutputChecker` to the constructor.\n\n    The test runner's display output can be controlled in two ways.\n    First, an output function (`out) can be passed to\n    `TestRunner.run`; this function will be called with strings that\n    should be displayed.  It defaults to `sys.stdout.write`.  If\n    capturing the output is not sufficient, then the display output\n    can be also customized by subclassing DocTestRunner, and\n    overriding the methods `report_start`, `report_success`,\n    `report_unexpected_exception`, and `report_failure`.\n    ", lineno=1100, col_offset=-1), lineno=1100, col_offset=-1), Assign([Name('DIVIDER', Store(), lineno=1103, col_offset=4)], BinOp(Str('*', lineno=1103, col_offset=14), Mult(), Num(70, lineno=1103, col_offset=20), lineno=1103, col_offset=14), lineno=1103, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1105, col_offset=17), Name('checker', Param(), lineno=1105, col_offset=23), Name('verbose', Param(), lineno=1105, col_offset=37), Name('optionflags', Param(), lineno=1105, col_offset=51)], None, None, [Name('None', Load(), lineno=1105, col_offset=31), Name('None', Load(), lineno=1105, col_offset=45), Num(0, lineno=1105, col_offset=63)]), [Expr(Str("\n        Create a new test runner.\n\n        Optional keyword arg `checker` is the `OutputChecker` that\n        should be used to compare the expected outputs and actual\n        outputs of doctest examples.\n\n        Optional keyword arg 'verbose' prints lots of stuff if true,\n        only failures if false; by default, it's true iff '-v' is in\n        sys.argv.\n\n        Optional argument `optionflags` can be used to control how the\n        test runner compares expected output to actual output, and how\n        it displays failures.  See the documentation for `testmod` for\n        more information.\n        ", lineno=1121, col_offset=-1), lineno=1121, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1122, col_offset=8), '_checker', Store(), lineno=1122, col_offset=8)], BoolOp(Or(), [Name('checker', Load(), lineno=1122, col_offset=24), Call(Name('OutputChecker', Load(), lineno=1122, col_offset=35), [], [], None, None, lineno=1122, col_offset=35)], lineno=1122, col_offset=24), lineno=1122, col_offset=8), If(Compare(Name('verbose', Load(), lineno=1123, col_offset=11), [Is()], [Name('None', Load(), lineno=1123, col_offset=22)], lineno=1123, col_offset=11), [Assign([Name('verbose', Store(), lineno=1124, col_offset=12)], Compare(Str('-v', lineno=1124, col_offset=22), [In()], [Attribute(Name('sys', Load(), lineno=1124, col_offset=30), 'argv', Load(), lineno=1124, col_offset=30)], lineno=1124, col_offset=22), lineno=1124, col_offset=12)], [], lineno=1123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1125, col_offset=8), '_verbose', Store(), lineno=1125, col_offset=8)], Name('verbose', Load(), lineno=1125, col_offset=24), lineno=1125, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1126, col_offset=8), 'optionflags', Store(), lineno=1126, col_offset=8)], Name('optionflags', Load(), lineno=1126, col_offset=27), lineno=1126, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1127, col_offset=8), 'original_optionflags', Store(), lineno=1127, col_offset=8)], Name('optionflags', Load(), lineno=1127, col_offset=36), lineno=1127, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1130, col_offset=8), 'tries', Store(), lineno=1130, col_offset=8)], Num(0, lineno=1130, col_offset=21), lineno=1130, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1131, col_offset=8), 'failures', Store(), lineno=1131, col_offset=8)], Num(0, lineno=1131, col_offset=24), lineno=1131, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1132, col_offset=8), '_name2ft', Store(), lineno=1132, col_offset=8)], Dict([], [], lineno=1132, col_offset=24), lineno=1132, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1135, col_offset=8), '_fakeout', Store(), lineno=1135, col_offset=8)], Call(Name('_SpoofOut', Load(), lineno=1135, col_offset=24), [], [], None, None, lineno=1135, col_offset=24), lineno=1135, col_offset=8)], [], lineno=1105, col_offset=4), FunctionDef('report_start', arguments([Name('self', Param(), lineno=1141, col_offset=21), Name('out', Param(), lineno=1141, col_offset=27), Name('test', Param(), lineno=1141, col_offset=32), Name('example', Param(), lineno=1141, col_offset=38)], None, None, []), [Expr(Str('\n        Report that the test runner is about to process the given\n        example.  (Only displays a message if verbose=True)\n        ', lineno=1145, col_offset=-1), lineno=1145, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1146, col_offset=11), '_verbose', Load(), lineno=1146, col_offset=11), [If(Attribute(Name('example', Load(), lineno=1147, col_offset=15), 'want', Load(), lineno=1147, col_offset=15), [Expr(Call(Name('out', Load(), lineno=1148, col_offset=16), [BinOp(BinOp(BinOp(Str('Trying:\n', lineno=1148, col_offset=20), Add(), Call(Name('_indent', Load(), lineno=1148, col_offset=34), [Attribute(Name('example', Load(), lineno=1148, col_offset=42), 'source', Load(), lineno=1148, col_offset=42)], [], None, None, lineno=1148, col_offset=34), lineno=1148, col_offset=20), Add(), Str('Expecting:\n', lineno=1149, col_offset=20), lineno=1148, col_offset=58), Add(), Call(Name('_indent', Load(), lineno=1149, col_offset=37), [Attribute(Name('example', Load(), lineno=1149, col_offset=45), 'want', Load(), lineno=1149, col_offset=45)], [], None, None, lineno=1149, col_offset=37), lineno=1149, col_offset=35)], [], None, None, lineno=1148, col_offset=16), lineno=1148, col_offset=16)], [Expr(Call(Name('out', Load(), lineno=1151, col_offset=16), [BinOp(BinOp(Str('Trying:\n', lineno=1151, col_offset=20), Add(), Call(Name('_indent', Load(), lineno=1151, col_offset=34), [Attribute(Name('example', Load(), lineno=1151, col_offset=42), 'source', Load(), lineno=1151, col_offset=42)], [], None, None, lineno=1151, col_offset=34), lineno=1151, col_offset=20), Add(), Str('Expecting nothing\n', lineno=1152, col_offset=20), lineno=1151, col_offset=58)], [], None, None, lineno=1151, col_offset=16), lineno=1151, col_offset=16)], lineno=1147, col_offset=12)], [], lineno=1146, col_offset=8)], [], lineno=1141, col_offset=4), FunctionDef('report_success', arguments([Name('self', Param(), lineno=1154, col_offset=23), Name('out', Param(), lineno=1154, col_offset=29), Name('test', Param(), lineno=1154, col_offset=34), Name('example', Param(), lineno=1154, col_offset=40), Name('got', Param(), lineno=1154, col_offset=49)], None, None, []), [Expr(Str('\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        ', lineno=1158, col_offset=-1), lineno=1158, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1159, col_offset=11), '_verbose', Load(), lineno=1159, col_offset=11), [Expr(Call(Name('out', Load(), lineno=1160, col_offset=12), [Str('ok\n', lineno=1160, col_offset=16)], [], None, None, lineno=1160, col_offset=12), lineno=1160, col_offset=12)], [], lineno=1159, col_offset=8)], [], lineno=1154, col_offset=4), FunctionDef('report_failure', arguments([Name('self', Param(), lineno=1162, col_offset=23), Name('out', Param(), lineno=1162, col_offset=29), Name('test', Param(), lineno=1162, col_offset=34), Name('example', Param(), lineno=1162, col_offset=40), Name('got', Param(), lineno=1162, col_offset=49)], None, None, []), [Expr(Str('\n        Report that the given example failed.\n        ', lineno=1165, col_offset=-1), lineno=1165, col_offset=-1), Expr(Call(Name('out', Load(), lineno=1166, col_offset=8), [BinOp(Call(Attribute(Name('self', Load(), lineno=1166, col_offset=12), '_failure_header', Load(), lineno=1166, col_offset=12), [Name('test', Load(), lineno=1166, col_offset=33), Name('example', Load(), lineno=1166, col_offset=39)], [], None, None, lineno=1166, col_offset=12), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=1167, col_offset=12), '_checker', Load(), lineno=1167, col_offset=12), 'output_difference', Load(), lineno=1167, col_offset=12), [Name('example', Load(), lineno=1167, col_offset=44), Name('got', Load(), lineno=1167, col_offset=53), Attribute(Name('self', Load(), lineno=1167, col_offset=58), 'optionflags', Load(), lineno=1167, col_offset=58)], [], None, None, lineno=1167, col_offset=12), lineno=1166, col_offset=12)], [], None, None, lineno=1166, col_offset=8), lineno=1166, col_offset=8)], [], lineno=1162, col_offset=4), FunctionDef('report_unexpected_exception', arguments([Name('self', Param(), lineno=1169, col_offset=36), Name('out', Param(), lineno=1169, col_offset=42), Name('test', Param(), lineno=1169, col_offset=47), Name('example', Param(), lineno=1169, col_offset=53), Name('exc_info', Param(), lineno=1169, col_offset=62)], None, None, []), [Expr(Str('\n        Report that the given example raised an unexpected exception.\n        ', lineno=1172, col_offset=-1), lineno=1172, col_offset=-1), Expr(Call(Name('out', Load(), lineno=1173, col_offset=8), [BinOp(BinOp(Call(Attribute(Name('self', Load(), lineno=1173, col_offset=12), '_failure_header', Load(), lineno=1173, col_offset=12), [Name('test', Load(), lineno=1173, col_offset=33), Name('example', Load(), lineno=1173, col_offset=39)], [], None, None, lineno=1173, col_offset=12), Add(), Str('Exception raised:\n', lineno=1174, col_offset=12), lineno=1173, col_offset=12), Add(), Call(Name('_indent', Load(), lineno=1174, col_offset=36), [Call(Name('_exception_traceback', Load(), lineno=1174, col_offset=44), [Name('exc_info', Load(), lineno=1174, col_offset=65)], [], None, None, lineno=1174, col_offset=44)], [], None, None, lineno=1174, col_offset=36), lineno=1174, col_offset=34)], [], None, None, lineno=1173, col_offset=8), lineno=1173, col_offset=8)], [], lineno=1169, col_offset=4), FunctionDef('_failure_header', arguments([Name('self', Param(), lineno=1176, col_offset=24), Name('test', Param(), lineno=1176, col_offset=30), Name('example', Param(), lineno=1176, col_offset=36)], None, None, []), [Assign([Name('out', Store(), lineno=1177, col_offset=8)], List([Attribute(Name('self', Load(), lineno=1177, col_offset=15), 'DIVIDER', Load(), lineno=1177, col_offset=15)], Load(), lineno=1177, col_offset=14), lineno=1177, col_offset=8), If(Attribute(Name('test', Load(), lineno=1178, col_offset=11), 'filename', Load(), lineno=1178, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('test', Load(), lineno=1179, col_offset=15), 'lineno', Load(), lineno=1179, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1179, col_offset=34)], lineno=1179, col_offset=15), Compare(Attribute(Name('example', Load(), lineno=1179, col_offset=43), 'lineno', Load(), lineno=1179, col_offset=43), [IsNot()], [Name('None', Load(), lineno=1179, col_offset=65)], lineno=1179, col_offset=43)], lineno=1179, col_offset=15), [Assign([Name('lineno', Store(), lineno=1180, col_offset=16)], BinOp(BinOp(Attribute(Name('test', Load(), lineno=1180, col_offset=25), 'lineno', Load(), lineno=1180, col_offset=25), Add(), Attribute(Name('example', Load(), lineno=1180, col_offset=39), 'lineno', Load(), lineno=1180, col_offset=39), lineno=1180, col_offset=25), Add(), Num(1, lineno=1180, col_offset=56), lineno=1180, col_offset=54), lineno=1180, col_offset=16)], [Assign([Name('lineno', Store(), lineno=1182, col_offset=16)], Str('?', lineno=1182, col_offset=25), lineno=1182, col_offset=16)], lineno=1179, col_offset=12), Expr(Call(Attribute(Name('out', Load(), lineno=1183, col_offset=12), 'append', Load(), lineno=1183, col_offset=12), [BinOp(Str('File "%s", line %s, in %s', lineno=1183, col_offset=23), Mod(), Tuple([Attribute(Name('test', Load(), lineno=1184, col_offset=24), 'filename', Load(), lineno=1184, col_offset=24), Name('lineno', Load(), lineno=1184, col_offset=39), Attribute(Name('test', Load(), lineno=1184, col_offset=47), 'name', Load(), lineno=1184, col_offset=47)], Load(), lineno=1184, col_offset=24), lineno=1183, col_offset=23)], [], None, None, lineno=1183, col_offset=12), lineno=1183, col_offset=12)], [Expr(Call(Attribute(Name('out', Load(), lineno=1186, col_offset=12), 'append', Load(), lineno=1186, col_offset=12), [BinOp(Str('Line %s, in %s', lineno=1186, col_offset=23), Mod(), Tuple([BinOp(Attribute(Name('example', Load(), lineno=1186, col_offset=43), 'lineno', Load(), lineno=1186, col_offset=43), Add(), Num(1, lineno=1186, col_offset=58), lineno=1186, col_offset=43), Attribute(Name('test', Load(), lineno=1186, col_offset=61), 'name', Load(), lineno=1186, col_offset=61)], Load(), lineno=1186, col_offset=43), lineno=1186, col_offset=23)], [], None, None, lineno=1186, col_offset=12), lineno=1186, col_offset=12)], lineno=1178, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=1187, col_offset=8), 'append', Load(), lineno=1187, col_offset=8), [Str('Failed example:', lineno=1187, col_offset=19)], [], None, None, lineno=1187, col_offset=8), lineno=1187, col_offset=8), Assign([Name('source', Store(), lineno=1188, col_offset=8)], Attribute(Name('example', Load(), lineno=1188, col_offset=17), 'source', Load(), lineno=1188, col_offset=17), lineno=1188, col_offset=8), Expr(Call(Attribute(Name('out', Load(), lineno=1189, col_offset=8), 'append', Load(), lineno=1189, col_offset=8), [Call(Name('_indent', Load(), lineno=1189, col_offset=19), [Name('source', Load(), lineno=1189, col_offset=27)], [], None, None, lineno=1189, col_offset=19)], [], None, None, lineno=1189, col_offset=8), lineno=1189, col_offset=8), Return(Call(Attribute(Str('\n', lineno=1190, col_offset=15), 'join', Load(), lineno=1190, col_offset=15), [Name('out', Load(), lineno=1190, col_offset=25)], [], None, None, lineno=1190, col_offset=15), lineno=1190, col_offset=8)], [], lineno=1176, col_offset=4), FunctionDef('__run', arguments([Name('self', Param(), lineno=1196, col_offset=14), Name('test', Param(), lineno=1196, col_offset=20), Name('compileflags', Param(), lineno=1196, col_offset=26), Name('out', Param(), lineno=1196, col_offset=40)], None, None, []), [Expr(Str('\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        ', lineno=1205, col_offset=-1), lineno=1205, col_offset=-1), Assign([Name('failures', Store(), lineno=1207, col_offset=8), Name('tries', Store(), lineno=1207, col_offset=19)], Num(0, lineno=1207, col_offset=27), lineno=1207, col_offset=8), Assign([Name('original_optionflags', Store(), lineno=1211, col_offset=8)], Attribute(Name('self', Load(), lineno=1211, col_offset=31), 'optionflags', Load(), lineno=1211, col_offset=31), lineno=1211, col_offset=8), Assign([Tuple([Name('SUCCESS', Store(), lineno=1213, col_offset=8), Name('FAILURE', Store(), lineno=1213, col_offset=17), Name('BOOM', Store(), lineno=1213, col_offset=26)], Store(), lineno=1213, col_offset=8)], Call(Name('range', Load(), lineno=1213, col_offset=33), [Num(3, lineno=1213, col_offset=39)], [], None, None, lineno=1213, col_offset=33), lineno=1213, col_offset=8), Assign([Name('check', Store(), lineno=1215, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1215, col_offset=16), '_checker', Load(), lineno=1215, col_offset=16), 'check_output', Load(), lineno=1215, col_offset=16), lineno=1215, col_offset=8), For(Tuple([Name('examplenum', Store(), lineno=1218, col_offset=12), Name('example', Store(), lineno=1218, col_offset=24)], Store(), lineno=1218, col_offset=12), Call(Name('enumerate', Load(), lineno=1218, col_offset=35), [Attribute(Name('test', Load(), lineno=1218, col_offset=45), 'examples', Load(), lineno=1218, col_offset=45)], [], None, None, lineno=1218, col_offset=35), [Assign([Name('quiet', Store(), lineno=1222, col_offset=12)], BoolOp(And(), [BinOp(Attribute(Name('self', Load(), lineno=1222, col_offset=21), 'optionflags', Load(), lineno=1222, col_offset=21), BitAnd(), Name('REPORT_ONLY_FIRST_FAILURE', Load(), lineno=1222, col_offset=40), lineno=1222, col_offset=21), Compare(Name('failures', Load(), lineno=1223, col_offset=21), [Gt()], [Num(0, lineno=1223, col_offset=32)], lineno=1223, col_offset=21)], lineno=1222, col_offset=21), lineno=1222, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1226, col_offset=12), 'optionflags', Store(), lineno=1226, col_offset=12)], Name('original_optionflags', Load(), lineno=1226, col_offset=31), lineno=1226, col_offset=12), If(Attribute(Name('example', Load(), lineno=1227, col_offset=15), 'options', Load(), lineno=1227, col_offset=15), [For(Tuple([Name('optionflag', Store(), lineno=1228, col_offset=21), Name('val', Store(), lineno=1228, col_offset=33)], Store(), lineno=1228, col_offset=21), Call(Attribute(Attribute(Name('example', Load(), lineno=1228, col_offset=41), 'options', Load(), lineno=1228, col_offset=41), 'items', Load(), lineno=1228, col_offset=41), [], [], None, None, lineno=1228, col_offset=41), [If(Name('val', Load(), lineno=1229, col_offset=23), [AugAssign(Attribute(Name('self', Load(), lineno=1230, col_offset=24), 'optionflags', Store(), lineno=1230, col_offset=24), BitOr(), Name('optionflag', Load(), lineno=1230, col_offset=44), lineno=1230, col_offset=24)], [AugAssign(Attribute(Name('self', Load(), lineno=1232, col_offset=24), 'optionflags', Store(), lineno=1232, col_offset=24), BitAnd(), UnaryOp(Invert(), Name('optionflag', Load(), lineno=1232, col_offset=45), lineno=1232, col_offset=44), lineno=1232, col_offset=24)], lineno=1229, col_offset=20)], [], lineno=1228, col_offset=16)], [], lineno=1227, col_offset=12), If(BinOp(Attribute(Name('self', Load(), lineno=1235, col_offset=15), 'optionflags', Load(), lineno=1235, col_offset=15), BitAnd(), Name('SKIP', Load(), lineno=1235, col_offset=34), lineno=1235, col_offset=15), [Continue( lineno=1236, col_offset=16)], [], lineno=1235, col_offset=12), AugAssign(Name('tries', Store(), lineno=1239, col_offset=12), Add(), Num(1, lineno=1239, col_offset=21), lineno=1239, col_offset=12), If(UnaryOp(Not(), Name('quiet', Load(), lineno=1240, col_offset=19), lineno=1240, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=1241, col_offset=16), 'report_start', Load(), lineno=1241, col_offset=16), [Name('out', Load(), lineno=1241, col_offset=34), Name('test', Load(), lineno=1241, col_offset=39), Name('example', Load(), lineno=1241, col_offset=45)], [], None, None, lineno=1241, col_offset=16), lineno=1241, col_offset=16)], [], lineno=1240, col_offset=12), Assign([Name('filename', Store(), lineno=1246, col_offset=12)], BinOp(Str('<doctest %s[%d]>', lineno=1246, col_offset=23), Mod(), Tuple([Attribute(Name('test', Load(), lineno=1246, col_offset=45), 'name', Load(), lineno=1246, col_offset=45), Name('examplenum', Load(), lineno=1246, col_offset=56)], Load(), lineno=1246, col_offset=45), lineno=1246, col_offset=23), lineno=1246, col_offset=12), TryExcept([Exec(Call(Name('compile', Load(), lineno=1253, col_offset=21), [Attribute(Name('example', Load(), lineno=1253, col_offset=29), 'source', Load(), lineno=1253, col_offset=29), Name('filename', Load(), lineno=1253, col_offset=45), Str('single', lineno=1253, col_offset=55), Name('compileflags', Load(), lineno=1254, col_offset=29), Num(1, lineno=1254, col_offset=43)], [], None, None, lineno=1253, col_offset=21), Attribute(Name('test', Load(), lineno=1254, col_offset=49), 'globs', Load(), lineno=1254, col_offset=49), None, lineno=1253, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1255, col_offset=16), 'debugger', Load(), lineno=1255, col_offset=16), 'set_continue', Load(), lineno=1255, col_offset=16), [], [], None, None, lineno=1255, col_offset=16), lineno=1255, col_offset=16), Assign([Name('exception', Store(), lineno=1256, col_offset=16)], Name('None', Load(), lineno=1256, col_offset=28), lineno=1256, col_offset=16)], [ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=1257, col_offset=19), None, [Raise(None, None, None, lineno=1258, col_offset=16)], lineno=1257, col_offset=12), ExceptHandler(None, None, [Assign([Name('exception', Store(), lineno=1260, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=1260, col_offset=28), 'exc_info', Load(), lineno=1260, col_offset=28), [], [], None, None, lineno=1260, col_offset=28), lineno=1260, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1261, col_offset=16), 'debugger', Load(), lineno=1261, col_offset=16), 'set_continue', Load(), lineno=1261, col_offset=16), [], [], None, None, lineno=1261, col_offset=16), lineno=1261, col_offset=16)], lineno=1259, col_offset=12)], [], lineno=1251, col_offset=12), Assign([Name('got', Store(), lineno=1263, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1263, col_offset=18), '_fakeout', Load(), lineno=1263, col_offset=18), 'getvalue', Load(), lineno=1263, col_offset=18), [], [], None, None, lineno=1263, col_offset=18), lineno=1263, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1264, col_offset=12), '_fakeout', Load(), lineno=1264, col_offset=12), 'truncate', Load(), lineno=1264, col_offset=12), [Num(0, lineno=1264, col_offset=35)], [], None, None, lineno=1264, col_offset=12), lineno=1264, col_offset=12), Assign([Name('outcome', Store(), lineno=1265, col_offset=12)], Name('FAILURE', Load(), lineno=1265, col_offset=22), lineno=1265, col_offset=12), If(Compare(Name('exception', Load(), lineno=1269, col_offset=15), [Is()], [Name('None', Load(), lineno=1269, col_offset=28)], lineno=1269, col_offset=15), [If(Call(Name('check', Load(), lineno=1270, col_offset=19), [Attribute(Name('example', Load(), lineno=1270, col_offset=25), 'want', Load(), lineno=1270, col_offset=25), Name('got', Load(), lineno=1270, col_offset=39), Attribute(Name('self', Load(), lineno=1270, col_offset=44), 'optionflags', Load(), lineno=1270, col_offset=44)], [], None, None, lineno=1270, col_offset=19), [Assign([Name('outcome', Store(), lineno=1271, col_offset=20)], Name('SUCCESS', Load(), lineno=1271, col_offset=30), lineno=1271, col_offset=20)], [], lineno=1270, col_offset=16)], [Assign([Name('exc_info', Store(), lineno=1275, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=1275, col_offset=27), 'exc_info', Load(), lineno=1275, col_offset=27), [], [], None, None, lineno=1275, col_offset=27), lineno=1275, col_offset=16), Assign([Name('exc_msg', Store(), lineno=1276, col_offset=16)], Subscript(Call(Attribute(Name('traceback', Load(), lineno=1276, col_offset=26), 'format_exception_only', Load(), lineno=1276, col_offset=26), [], [], Subscript(Name('exc_info', Load(), lineno=1276, col_offset=59), Slice(None, Num(2, lineno=1276, col_offset=69), None), Load(), lineno=1276, col_offset=59), None, lineno=1276, col_offset=26), Index(Num(-1, lineno=1276, col_offset=74)), Load(), lineno=1276, col_offset=26), lineno=1276, col_offset=16), If(UnaryOp(Not(), Name('quiet', Load(), lineno=1277, col_offset=23), lineno=1277, col_offset=19), [AugAssign(Name('got', Store(), lineno=1278, col_offset=20), Add(), Call(Name('_exception_traceback', Load(), lineno=1278, col_offset=27), [Name('exc_info', Load(), lineno=1278, col_offset=48)], [], None, None, lineno=1278, col_offset=27), lineno=1278, col_offset=20)], [], lineno=1277, col_offset=16), If(Compare(Attribute(Name('example', Load(), lineno=1282, col_offset=19), 'exc_msg', Load(), lineno=1282, col_offset=19), [Is()], [Name('None', Load(), lineno=1282, col_offset=38)], lineno=1282, col_offset=19), [Assign([Name('outcome', Store(), lineno=1283, col_offset=20)], Name('BOOM', Load(), lineno=1283, col_offset=30), lineno=1283, col_offset=20)], [If(Call(Name('check', Load(), lineno=1286, col_offset=21), [Attribute(Name('example', Load(), lineno=1286, col_offset=27), 'exc_msg', Load(), lineno=1286, col_offset=27), Name('exc_msg', Load(), lineno=1286, col_offset=44), Attribute(Name('self', Load(), lineno=1286, col_offset=53), 'optionflags', Load(), lineno=1286, col_offset=53)], [], None, None, lineno=1286, col_offset=21), [Assign([Name('outcome', Store(), lineno=1287, col_offset=20)], Name('SUCCESS', Load(), lineno=1287, col_offset=30), lineno=1287, col_offset=20)], [If(BinOp(Attribute(Name('self', Load(), lineno=1290, col_offset=21), 'optionflags', Load(), lineno=1290, col_offset=21), BitAnd(), Name('IGNORE_EXCEPTION_DETAIL', Load(), lineno=1290, col_offset=40), lineno=1290, col_offset=21), [Assign([Name('m1', Store(), lineno=1291, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=1291, col_offset=25), 'match', Load(), lineno=1291, col_offset=25), [Str('(?:[^:]*\\.)?([^:]*:)', lineno=1291, col_offset=34), Attribute(Name('example', Load(), lineno=1291, col_offset=59), 'exc_msg', Load(), lineno=1291, col_offset=59)], [], None, None, lineno=1291, col_offset=25), lineno=1291, col_offset=20), Assign([Name('m2', Store(), lineno=1292, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=1292, col_offset=25), 'match', Load(), lineno=1292, col_offset=25), [Str('(?:[^:]*\\.)?([^:]*:)', lineno=1292, col_offset=34), Name('exc_msg', Load(), lineno=1292, col_offset=59)], [], None, None, lineno=1292, col_offset=25), lineno=1292, col_offset=20), If(BoolOp(And(), [Name('m1', Load(), lineno=1293, col_offset=23), Name('m2', Load(), lineno=1293, col_offset=30), Call(Name('check', Load(), lineno=1293, col_offset=37), [Call(Attribute(Name('m1', Load(), lineno=1293, col_offset=43), 'group', Load(), lineno=1293, col_offset=43), [Num(1, lineno=1293, col_offset=52)], [], None, None, lineno=1293, col_offset=43), Call(Attribute(Name('m2', Load(), lineno=1293, col_offset=56), 'group', Load(), lineno=1293, col_offset=56), [Num(1, lineno=1293, col_offset=65)], [], None, None, lineno=1293, col_offset=56), Attribute(Name('self', Load(), lineno=1294, col_offset=43), 'optionflags', Load(), lineno=1294, col_offset=43)], [], None, None, lineno=1293, col_offset=37)], lineno=1293, col_offset=23), [Assign([Name('outcome', Store(), lineno=1295, col_offset=24)], Name('SUCCESS', Load(), lineno=1295, col_offset=34), lineno=1295, col_offset=24)], [], lineno=1293, col_offset=20)], [], lineno=1290, col_offset=21)], lineno=1286, col_offset=21)], lineno=1282, col_offset=16)], lineno=1269, col_offset=12), If(Compare(Name('outcome', Load(), lineno=1298, col_offset=15), [Is()], [Name('SUCCESS', Load(), lineno=1298, col_offset=26)], lineno=1298, col_offset=15), [If(UnaryOp(Not(), Name('quiet', Load(), lineno=1299, col_offset=23), lineno=1299, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=1300, col_offset=20), 'report_success', Load(), lineno=1300, col_offset=20), [Name('out', Load(), lineno=1300, col_offset=40), Name('test', Load(), lineno=1300, col_offset=45), Name('example', Load(), lineno=1300, col_offset=51), Name('got', Load(), lineno=1300, col_offset=60)], [], None, None, lineno=1300, col_offset=20), lineno=1300, col_offset=20)], [], lineno=1299, col_offset=16)], [If(Compare(Name('outcome', Load(), lineno=1301, col_offset=17), [Is()], [Name('FAILURE', Load(), lineno=1301, col_offset=28)], lineno=1301, col_offset=17), [If(UnaryOp(Not(), Name('quiet', Load(), lineno=1302, col_offset=23), lineno=1302, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=1303, col_offset=20), 'report_failure', Load(), lineno=1303, col_offset=20), [Name('out', Load(), lineno=1303, col_offset=40), Name('test', Load(), lineno=1303, col_offset=45), Name('example', Load(), lineno=1303, col_offset=51), Name('got', Load(), lineno=1303, col_offset=60)], [], None, None, lineno=1303, col_offset=20), lineno=1303, col_offset=20)], [], lineno=1302, col_offset=16), AugAssign(Name('failures', Store(), lineno=1304, col_offset=16), Add(), Num(1, lineno=1304, col_offset=28), lineno=1304, col_offset=16)], [If(Compare(Name('outcome', Load(), lineno=1305, col_offset=17), [Is()], [Name('BOOM', Load(), lineno=1305, col_offset=28)], lineno=1305, col_offset=17), [If(UnaryOp(Not(), Name('quiet', Load(), lineno=1306, col_offset=23), lineno=1306, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=1307, col_offset=20), 'report_unexpected_exception', Load(), lineno=1307, col_offset=20), [Name('out', Load(), lineno=1307, col_offset=53), Name('test', Load(), lineno=1307, col_offset=58), Name('example', Load(), lineno=1307, col_offset=64), Name('exc_info', Load(), lineno=1308, col_offset=53)], [], None, None, lineno=1307, col_offset=20), lineno=1307, col_offset=20)], [], lineno=1306, col_offset=16), AugAssign(Name('failures', Store(), lineno=1309, col_offset=16), Add(), Num(1, lineno=1309, col_offset=28), lineno=1309, col_offset=16)], [Assert(Name('False', Load(), lineno=1311, col_offset=23), Tuple([Str('unknown outcome', lineno=1311, col_offset=31), Name('outcome', Load(), lineno=1311, col_offset=50)], Load(), lineno=1311, col_offset=31), lineno=1311, col_offset=16)], lineno=1305, col_offset=17)], lineno=1301, col_offset=17)], lineno=1298, col_offset=12)], [], lineno=1218, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1314, col_offset=8), 'optionflags', Store(), lineno=1314, col_offset=8)], Name('original_optionflags', Load(), lineno=1314, col_offset=27), lineno=1314, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1317, col_offset=8), '__record_outcome', Load(), lineno=1317, col_offset=8), [Name('test', Load(), lineno=1317, col_offset=30), Name('failures', Load(), lineno=1317, col_offset=36), Name('tries', Load(), lineno=1317, col_offset=46)], [], None, None, lineno=1317, col_offset=8), lineno=1317, col_offset=8), Return(Call(Name('TestResults', Load(), lineno=1318, col_offset=15), [Name('failures', Load(), lineno=1318, col_offset=27), Name('tries', Load(), lineno=1318, col_offset=37)], [], None, None, lineno=1318, col_offset=15), lineno=1318, col_offset=8)], [], lineno=1196, col_offset=4), FunctionDef('__record_outcome', arguments([Name('self', Param(), lineno=1320, col_offset=25), Name('test', Param(), lineno=1320, col_offset=31), Name('f', Param(), lineno=1320, col_offset=37), Name('t', Param(), lineno=1320, col_offset=40)], None, None, []), [Expr(Str('\n        Record the fact that the given DocTest (`test`) generated `f`\n        failures out of `t` tried examples.\n        ', lineno=1324, col_offset=-1), lineno=1324, col_offset=-1), Assign([Tuple([Name('f2', Store(), lineno=1325, col_offset=8), Name('t2', Store(), lineno=1325, col_offset=12)], Store(), lineno=1325, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1325, col_offset=17), '_name2ft', Load(), lineno=1325, col_offset=17), 'get', Load(), lineno=1325, col_offset=17), [Attribute(Name('test', Load(), lineno=1325, col_offset=35), 'name', Load(), lineno=1325, col_offset=35), Tuple([Num(0, lineno=1325, col_offset=47), Num(0, lineno=1325, col_offset=49)], Load(), lineno=1325, col_offset=47)], [], None, None, lineno=1325, col_offset=17), lineno=1325, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=1326, col_offset=8), '_name2ft', Load(), lineno=1326, col_offset=8), Index(Attribute(Name('test', Load(), lineno=1326, col_offset=22), 'name', Load(), lineno=1326, col_offset=22)), Store(), lineno=1326, col_offset=8)], Tuple([BinOp(Name('f', Load(), lineno=1326, col_offset=36), Add(), Name('f2', Load(), lineno=1326, col_offset=38), lineno=1326, col_offset=36), BinOp(Name('t', Load(), lineno=1326, col_offset=42), Add(), Name('t2', Load(), lineno=1326, col_offset=44), lineno=1326, col_offset=42)], Load(), lineno=1326, col_offset=36), lineno=1326, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=1327, col_offset=8), 'failures', Store(), lineno=1327, col_offset=8), Add(), Name('f', Load(), lineno=1327, col_offset=25), lineno=1327, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=1328, col_offset=8), 'tries', Store(), lineno=1328, col_offset=8), Add(), Name('t', Load(), lineno=1328, col_offset=22), lineno=1328, col_offset=8)], [], lineno=1320, col_offset=4), Assign([Name('__LINECACHE_FILENAME_RE', Store(), lineno=1330, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1330, col_offset=30), 'compile', Load(), lineno=1330, col_offset=30), [Str('<doctest (?P<name>.+)\\[(?P<examplenum>\\d+)\\]>$', lineno=1330, col_offset=41)], [], None, None, lineno=1330, col_offset=30), lineno=1330, col_offset=4), FunctionDef('__patched_linecache_getlines', arguments([Name('self', Param(), lineno=1333, col_offset=37), Name('filename', Param(), lineno=1333, col_offset=43), Name('module_globals', Param(), lineno=1333, col_offset=53)], None, None, [Name('None', Load(), lineno=1333, col_offset=68)]), [Assign([Name('m', Store(), lineno=1334, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1334, col_offset=12), '__LINECACHE_FILENAME_RE', Load(), lineno=1334, col_offset=12), 'match', Load(), lineno=1334, col_offset=12), [Name('filename', Load(), lineno=1334, col_offset=47)], [], None, None, lineno=1334, col_offset=12), lineno=1334, col_offset=8), If(BoolOp(And(), [Name('m', Load(), lineno=1335, col_offset=11), Compare(Call(Attribute(Name('m', Load(), lineno=1335, col_offset=17), 'group', Load(), lineno=1335, col_offset=17), [Str('name', lineno=1335, col_offset=25)], [], None, None, lineno=1335, col_offset=17), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=1335, col_offset=36), 'test', Load(), lineno=1335, col_offset=36), 'name', Load(), lineno=1335, col_offset=36)], lineno=1335, col_offset=17)], lineno=1335, col_offset=11), [Assign([Name('example', Store(), lineno=1336, col_offset=12)], Subscript(Attribute(Attribute(Name('self', Load(), lineno=1336, col_offset=22), 'test', Load(), lineno=1336, col_offset=22), 'examples', Load(), lineno=1336, col_offset=22), Index(Call(Name('int', Load(), lineno=1336, col_offset=41), [Call(Attribute(Name('m', Load(), lineno=1336, col_offset=45), 'group', Load(), lineno=1336, col_offset=45), [Str('examplenum', lineno=1336, col_offset=53)], [], None, None, lineno=1336, col_offset=45)], [], None, None, lineno=1336, col_offset=41)), Load(), lineno=1336, col_offset=22), lineno=1336, col_offset=12), Assign([Name('source', Store(), lineno=1337, col_offset=12)], Attribute(Name('example', Load(), lineno=1337, col_offset=21), 'source', Load(), lineno=1337, col_offset=21), lineno=1337, col_offset=12), If(Call(Name('isinstance', Load(), lineno=1338, col_offset=15), [Name('source', Load(), lineno=1338, col_offset=26), Name('unicode', Load(), lineno=1338, col_offset=34)], [], None, None, lineno=1338, col_offset=15), [Assign([Name('source', Store(), lineno=1339, col_offset=16)], Call(Attribute(Name('source', Load(), lineno=1339, col_offset=25), 'encode', Load(), lineno=1339, col_offset=25), [Str('ascii', lineno=1339, col_offset=39), Str('backslashreplace', lineno=1339, col_offset=48)], [], None, None, lineno=1339, col_offset=25), lineno=1339, col_offset=16)], [], lineno=1338, col_offset=12), Return(Call(Attribute(Name('source', Load(), lineno=1340, col_offset=19), 'splitlines', Load(), lineno=1340, col_offset=19), [Name('True', Load(), lineno=1340, col_offset=37)], [], None, None, lineno=1340, col_offset=19), lineno=1340, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=1342, col_offset=19), 'save_linecache_getlines', Load(), lineno=1342, col_offset=19), [Name('filename', Load(), lineno=1342, col_offset=48), Name('module_globals', Load(), lineno=1342, col_offset=58)], [], None, None, lineno=1342, col_offset=19), lineno=1342, col_offset=12)], lineno=1335, col_offset=8)], [], lineno=1333, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=1344, col_offset=12), Name('test', Param(), lineno=1344, col_offset=18), Name('compileflags', Param(), lineno=1344, col_offset=24), Name('out', Param(), lineno=1344, col_offset=43), Name('clear_globs', Param(), lineno=1344, col_offset=53)], None, None, [Name('None', Load(), lineno=1344, col_offset=37), Name('None', Load(), lineno=1344, col_offset=47), Name('True', Load(), lineno=1344, col_offset=65)]), [Expr(Str('\n        Run the examples in `test`, and display the results using the\n        writer function `out`.\n\n        The examples are run in the namespace `test.globs`.  If\n        `clear_globs` is true (the default), then this namespace will\n        be cleared after the test runs, to help with garbage\n        collection.  If you would like to examine the namespace after\n        the test completes, then use `clear_globs=False`.\n\n        `compileflags` gives the set of flags that should be used by\n        the Python compiler when running the examples.  If not\n        specified, then it will default to the set of future-import\n        flags that apply to `globs`.\n\n        The output of each example is checked using\n        `DocTestRunner.check_output`, and the results are formatted by\n        the `DocTestRunner.report_*` methods.\n        ', lineno=1363, col_offset=-1), lineno=1363, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1364, col_offset=8), 'test', Store(), lineno=1364, col_offset=8)], Name('test', Load(), lineno=1364, col_offset=20), lineno=1364, col_offset=8), If(Compare(Name('compileflags', Load(), lineno=1366, col_offset=11), [Is()], [Name('None', Load(), lineno=1366, col_offset=27)], lineno=1366, col_offset=11), [Assign([Name('compileflags', Store(), lineno=1367, col_offset=12)], Call(Name('_extract_future_flags', Load(), lineno=1367, col_offset=27), [Attribute(Name('test', Load(), lineno=1367, col_offset=49), 'globs', Load(), lineno=1367, col_offset=49)], [], None, None, lineno=1367, col_offset=27), lineno=1367, col_offset=12)], [], lineno=1366, col_offset=8), Assign([Name('save_stdout', Store(), lineno=1369, col_offset=8)], Attribute(Name('sys', Load(), lineno=1369, col_offset=22), 'stdout', Load(), lineno=1369, col_offset=22), lineno=1369, col_offset=8), If(Compare(Name('out', Load(), lineno=1370, col_offset=11), [Is()], [Name('None', Load(), lineno=1370, col_offset=18)], lineno=1370, col_offset=11), [Assign([Name('out', Store(), lineno=1371, col_offset=12)], Attribute(Name('save_stdout', Load(), lineno=1371, col_offset=18), 'write', Load(), lineno=1371, col_offset=18), lineno=1371, col_offset=12)], [], lineno=1370, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=1372, col_offset=8), 'stdout', Store(), lineno=1372, col_offset=8)], Attribute(Name('self', Load(), lineno=1372, col_offset=21), '_fakeout', Load(), lineno=1372, col_offset=21), lineno=1372, col_offset=8), Assign([Name('save_set_trace', Store(), lineno=1379, col_offset=8)], Attribute(Name('pdb', Load(), lineno=1379, col_offset=25), 'set_trace', Load(), lineno=1379, col_offset=25), lineno=1379, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1380, col_offset=8), 'debugger', Store(), lineno=1380, col_offset=8)], Call(Name('_OutputRedirectingPdb', Load(), lineno=1380, col_offset=24), [Name('save_stdout', Load(), lineno=1380, col_offset=46)], [], None, None, lineno=1380, col_offset=24), lineno=1380, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1381, col_offset=8), 'debugger', Load(), lineno=1381, col_offset=8), 'reset', Load(), lineno=1381, col_offset=8), [], [], None, None, lineno=1381, col_offset=8), lineno=1381, col_offset=8), Assign([Attribute(Name('pdb', Load(), lineno=1382, col_offset=8), 'set_trace', Store(), lineno=1382, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1382, col_offset=24), 'debugger', Load(), lineno=1382, col_offset=24), 'set_trace', Load(), lineno=1382, col_offset=24), lineno=1382, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1386, col_offset=8), 'save_linecache_getlines', Store(), lineno=1386, col_offset=8)], Attribute(Name('linecache', Load(), lineno=1386, col_offset=39), 'getlines', Load(), lineno=1386, col_offset=39), lineno=1386, col_offset=8), Assign([Attribute(Name('linecache', Load(), lineno=1387, col_offset=8), 'getlines', Store(), lineno=1387, col_offset=8)], Attribute(Name('self', Load(), lineno=1387, col_offset=29), '__patched_linecache_getlines', Load(), lineno=1387, col_offset=29), lineno=1387, col_offset=8), Assign([Name('save_displayhook', Store(), lineno=1390, col_offset=8)], Attribute(Name('sys', Load(), lineno=1390, col_offset=27), 'displayhook', Load(), lineno=1390, col_offset=27), lineno=1390, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=1391, col_offset=8), 'displayhook', Store(), lineno=1391, col_offset=8)], Attribute(Name('sys', Load(), lineno=1391, col_offset=26), '__displayhook__', Load(), lineno=1391, col_offset=26), lineno=1391, col_offset=8), TryFinally([Return(Call(Attribute(Name('self', Load(), lineno=1394, col_offset=19), '__run', Load(), lineno=1394, col_offset=19), [Name('test', Load(), lineno=1394, col_offset=30), Name('compileflags', Load(), lineno=1394, col_offset=36), Name('out', Load(), lineno=1394, col_offset=50)], [], None, None, lineno=1394, col_offset=19), lineno=1394, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=1396, col_offset=12), 'stdout', Store(), lineno=1396, col_offset=12)], Name('save_stdout', Load(), lineno=1396, col_offset=25), lineno=1396, col_offset=12), Assign([Attribute(Name('pdb', Load(), lineno=1397, col_offset=12), 'set_trace', Store(), lineno=1397, col_offset=12)], Name('save_set_trace', Load(), lineno=1397, col_offset=28), lineno=1397, col_offset=12), Assign([Attribute(Name('linecache', Load(), lineno=1398, col_offset=12), 'getlines', Store(), lineno=1398, col_offset=12)], Attribute(Name('self', Load(), lineno=1398, col_offset=33), 'save_linecache_getlines', Load(), lineno=1398, col_offset=33), lineno=1398, col_offset=12), Assign([Attribute(Name('sys', Load(), lineno=1399, col_offset=12), 'displayhook', Store(), lineno=1399, col_offset=12)], Name('save_displayhook', Load(), lineno=1399, col_offset=30), lineno=1399, col_offset=12), If(Name('clear_globs', Load(), lineno=1400, col_offset=15), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=1401, col_offset=16), 'globs', Load(), lineno=1401, col_offset=16), 'clear', Load(), lineno=1401, col_offset=16), [], [], None, None, lineno=1401, col_offset=16), lineno=1401, col_offset=16)], [], lineno=1400, col_offset=12)], lineno=1393, col_offset=8)], [], lineno=1344, col_offset=4), FunctionDef('summarize', arguments([Name('self', Param(), lineno=1406, col_offset=18), Name('verbose', Param(), lineno=1406, col_offset=24)], None, None, [Name('None', Load(), lineno=1406, col_offset=32)]), [Expr(Str("\n        Print a summary of all the test cases that have been run by\n        this DocTestRunner, and return a tuple `(f, t)`, where `f` is\n        the total number of failed examples, and `t` is the total\n        number of tried examples.\n\n        The optional `verbose` argument controls how detailed the\n        summary is.  If the verbosity is not specified, then the\n        DocTestRunner's verbosity is used.\n        ", lineno=1416, col_offset=-1), lineno=1416, col_offset=-1), If(Compare(Name('verbose', Load(), lineno=1417, col_offset=11), [Is()], [Name('None', Load(), lineno=1417, col_offset=22)], lineno=1417, col_offset=11), [Assign([Name('verbose', Store(), lineno=1418, col_offset=12)], Attribute(Name('self', Load(), lineno=1418, col_offset=22), '_verbose', Load(), lineno=1418, col_offset=22), lineno=1418, col_offset=12)], [], lineno=1417, col_offset=8), Assign([Name('notests', Store(), lineno=1419, col_offset=8)], List([], Load(), lineno=1419, col_offset=18), lineno=1419, col_offset=8), Assign([Name('passed', Store(), lineno=1420, col_offset=8)], List([], Load(), lineno=1420, col_offset=17), lineno=1420, col_offset=8), Assign([Name('failed', Store(), lineno=1421, col_offset=8)], List([], Load(), lineno=1421, col_offset=17), lineno=1421, col_offset=8), Assign([Name('totalt', Store(), lineno=1422, col_offset=8), Name('totalf', Store(), lineno=1422, col_offset=17)], Num(0, lineno=1422, col_offset=26), lineno=1422, col_offset=8), For(Name('x', Store(), lineno=1423, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=1423, col_offset=17), '_name2ft', Load(), lineno=1423, col_offset=17), 'items', Load(), lineno=1423, col_offset=17), [], [], None, None, lineno=1423, col_offset=17), [Assign([Tuple([Name('name', Store(), lineno=1424, col_offset=12), Tuple([Name('f', Store(), lineno=1424, col_offset=19), Name('t', Store(), lineno=1424, col_offset=22)], Store(), lineno=1424, col_offset=19)], Store(), lineno=1424, col_offset=12)], Name('x', Load(), lineno=1424, col_offset=27), lineno=1424, col_offset=12), Assert(Compare(Name('f', Load(), lineno=1425, col_offset=19), [LtE()], [Name('t', Load(), lineno=1425, col_offset=24)], lineno=1425, col_offset=19), None, lineno=1425, col_offset=12), AugAssign(Name('totalt', Store(), lineno=1426, col_offset=12), Add(), Name('t', Load(), lineno=1426, col_offset=22), lineno=1426, col_offset=12), AugAssign(Name('totalf', Store(), lineno=1427, col_offset=12), Add(), Name('f', Load(), lineno=1427, col_offset=22), lineno=1427, col_offset=12), If(Compare(Name('t', Load(), lineno=1428, col_offset=15), [Eq()], [Num(0, lineno=1428, col_offset=20)], lineno=1428, col_offset=15), [Expr(Call(Attribute(Name('notests', Load(), lineno=1429, col_offset=16), 'append', Load(), lineno=1429, col_offset=16), [Name('name', Load(), lineno=1429, col_offset=31)], [], None, None, lineno=1429, col_offset=16), lineno=1429, col_offset=16)], [If(Compare(Name('f', Load(), lineno=1430, col_offset=17), [Eq()], [Num(0, lineno=1430, col_offset=22)], lineno=1430, col_offset=17), [Expr(Call(Attribute(Name('passed', Load(), lineno=1431, col_offset=16), 'append', Load(), lineno=1431, col_offset=16), [Tuple([Name('name', Load(), lineno=1431, col_offset=32), Name('t', Load(), lineno=1431, col_offset=38)], Load(), lineno=1431, col_offset=32)], [], None, None, lineno=1431, col_offset=16), lineno=1431, col_offset=16)], [Expr(Call(Attribute(Name('failed', Load(), lineno=1433, col_offset=16), 'append', Load(), lineno=1433, col_offset=16), [Name('x', Load(), lineno=1433, col_offset=30)], [], None, None, lineno=1433, col_offset=16), lineno=1433, col_offset=16)], lineno=1430, col_offset=17)], lineno=1428, col_offset=12)], [], lineno=1423, col_offset=8), If(Name('verbose', Load(), lineno=1434, col_offset=11), [If(Name('notests', Load(), lineno=1435, col_offset=15), [Print(None, [Call(Name('len', Load(), lineno=1436, col_offset=22), [Name('notests', Load(), lineno=1436, col_offset=26)], [], None, None, lineno=1436, col_offset=22), Str('items had no tests:', lineno=1436, col_offset=36)], True, lineno=1436, col_offset=16), Expr(Call(Attribute(Name('notests', Load(), lineno=1437, col_offset=16), 'sort', Load(), lineno=1437, col_offset=16), [], [], None, None, lineno=1437, col_offset=16), lineno=1437, col_offset=16), For(Name('thing', Store(), lineno=1438, col_offset=20), Name('notests', Load(), lineno=1438, col_offset=29), [Print(None, [Str('   ', lineno=1439, col_offset=26), Name('thing', Load(), lineno=1439, col_offset=33)], True, lineno=1439, col_offset=20)], [], lineno=1438, col_offset=16)], [], lineno=1435, col_offset=12), If(Name('passed', Load(), lineno=1440, col_offset=15), [Print(None, [Call(Name('len', Load(), lineno=1441, col_offset=22), [Name('passed', Load(), lineno=1441, col_offset=26)], [], None, None, lineno=1441, col_offset=22), Str('items passed all tests:', lineno=1441, col_offset=35)], True, lineno=1441, col_offset=16), Expr(Call(Attribute(Name('passed', Load(), lineno=1442, col_offset=16), 'sort', Load(), lineno=1442, col_offset=16), [], [], None, None, lineno=1442, col_offset=16), lineno=1442, col_offset=16), For(Tuple([Name('thing', Store(), lineno=1443, col_offset=20), Name('count', Store(), lineno=1443, col_offset=27)], Store(), lineno=1443, col_offset=20), Name('passed', Load(), lineno=1443, col_offset=36), [Print(None, [BinOp(Str(' %3d tests in %s', lineno=1444, col_offset=26), Mod(), Tuple([Name('count', Load(), lineno=1444, col_offset=48), Name('thing', Load(), lineno=1444, col_offset=55)], Load(), lineno=1444, col_offset=48), lineno=1444, col_offset=26)], True, lineno=1444, col_offset=20)], [], lineno=1443, col_offset=16)], [], lineno=1440, col_offset=12)], [], lineno=1434, col_offset=8), If(Name('failed', Load(), lineno=1445, col_offset=11), [Print(None, [Attribute(Name('self', Load(), lineno=1446, col_offset=18), 'DIVIDER', Load(), lineno=1446, col_offset=18)], True, lineno=1446, col_offset=12), Print(None, [Call(Name('len', Load(), lineno=1447, col_offset=18), [Name('failed', Load(), lineno=1447, col_offset=22)], [], None, None, lineno=1447, col_offset=18), Str('items had failures:', lineno=1447, col_offset=31)], True, lineno=1447, col_offset=12), Expr(Call(Attribute(Name('failed', Load(), lineno=1448, col_offset=12), 'sort', Load(), lineno=1448, col_offset=12), [], [], None, None, lineno=1448, col_offset=12), lineno=1448, col_offset=12), For(Tuple([Name('thing', Store(), lineno=1449, col_offset=16), Tuple([Name('f', Store(), lineno=1449, col_offset=24), Name('t', Store(), lineno=1449, col_offset=27)], Store(), lineno=1449, col_offset=24)], Store(), lineno=1449, col_offset=16), Name('failed', Load(), lineno=1449, col_offset=33), [Print(None, [BinOp(Str(' %3d of %3d in %s', lineno=1450, col_offset=22), Mod(), Tuple([Name('f', Load(), lineno=1450, col_offset=45), Name('t', Load(), lineno=1450, col_offset=48), Name('thing', Load(), lineno=1450, col_offset=51)], Load(), lineno=1450, col_offset=45), lineno=1450, col_offset=22)], True, lineno=1450, col_offset=16)], [], lineno=1449, col_offset=12)], [], lineno=1445, col_offset=8), If(Name('verbose', Load(), lineno=1451, col_offset=11), [Print(None, [Name('totalt', Load(), lineno=1452, col_offset=18), Str('tests in', lineno=1452, col_offset=26), Call(Name('len', Load(), lineno=1452, col_offset=38), [Attribute(Name('self', Load(), lineno=1452, col_offset=42), '_name2ft', Load(), lineno=1452, col_offset=42)], [], None, None, lineno=1452, col_offset=38), Str('items.', lineno=1452, col_offset=58)], True, lineno=1452, col_offset=12), Print(None, [BinOp(Name('totalt', Load(), lineno=1453, col_offset=18), Sub(), Name('totalf', Load(), lineno=1453, col_offset=27), lineno=1453, col_offset=18), Str('passed and', lineno=1453, col_offset=35), Name('totalf', Load(), lineno=1453, col_offset=49), Str('failed.', lineno=1453, col_offset=57)], True, lineno=1453, col_offset=12)], [], lineno=1451, col_offset=8), If(Name('totalf', Load(), lineno=1454, col_offset=11), [Print(None, [Str('***Test Failed***', lineno=1455, col_offset=18), Name('totalf', Load(), lineno=1455, col_offset=39), Str('failures.', lineno=1455, col_offset=47)], True, lineno=1455, col_offset=12)], [If(Name('verbose', Load(), lineno=1456, col_offset=13), [Print(None, [Str('Test passed.', lineno=1457, col_offset=18)], True, lineno=1457, col_offset=12)], [], lineno=1456, col_offset=13)], lineno=1454, col_offset=8), Return(Call(Name('TestResults', Load(), lineno=1458, col_offset=15), [Name('totalf', Load(), lineno=1458, col_offset=27), Name('totalt', Load(), lineno=1458, col_offset=35)], [], None, None, lineno=1458, col_offset=15), lineno=1458, col_offset=8)], [], lineno=1406, col_offset=4), FunctionDef('merge', arguments([Name('self', Param(), lineno=1463, col_offset=14), Name('other', Param(), lineno=1463, col_offset=20)], None, None, []), [Assign([Name('d', Store(), lineno=1464, col_offset=8)], Attribute(Name('self', Load(), lineno=1464, col_offset=12), '_name2ft', Load(), lineno=1464, col_offset=12), lineno=1464, col_offset=8), For(Tuple([Name('name', Store(), lineno=1465, col_offset=12), Tuple([Name('f', Store(), lineno=1465, col_offset=19), Name('t', Store(), lineno=1465, col_offset=22)], Store(), lineno=1465, col_offset=19)], Store(), lineno=1465, col_offset=12), Call(Attribute(Attribute(Name('other', Load(), lineno=1465, col_offset=28), '_name2ft', Load(), lineno=1465, col_offset=28), 'items', Load(), lineno=1465, col_offset=28), [], [], None, None, lineno=1465, col_offset=28), [If(Compare(Name('name', Load(), lineno=1466, col_offset=15), [In()], [Name('d', Load(), lineno=1466, col_offset=23)], lineno=1466, col_offset=15), [Assign([Tuple([Name('f2', Store(), lineno=1471, col_offset=16), Name('t2', Store(), lineno=1471, col_offset=20)], Store(), lineno=1471, col_offset=16)], Subscript(Name('d', Load(), lineno=1471, col_offset=25), Index(Name('name', Load(), lineno=1471, col_offset=27)), Load(), lineno=1471, col_offset=25), lineno=1471, col_offset=16), Assign([Name('f', Store(), lineno=1472, col_offset=16)], BinOp(Name('f', Load(), lineno=1472, col_offset=20), Add(), Name('f2', Load(), lineno=1472, col_offset=24), lineno=1472, col_offset=20), lineno=1472, col_offset=16), Assign([Name('t', Store(), lineno=1473, col_offset=16)], BinOp(Name('t', Load(), lineno=1473, col_offset=20), Add(), Name('t2', Load(), lineno=1473, col_offset=24), lineno=1473, col_offset=20), lineno=1473, col_offset=16)], [], lineno=1466, col_offset=12), Assign([Subscript(Name('d', Load(), lineno=1474, col_offset=12), Index(Name('name', Load(), lineno=1474, col_offset=14)), Store(), lineno=1474, col_offset=12)], Tuple([Name('f', Load(), lineno=1474, col_offset=22), Name('t', Load(), lineno=1474, col_offset=25)], Load(), lineno=1474, col_offset=22), lineno=1474, col_offset=12)], [], lineno=1465, col_offset=8)], [], lineno=1463, col_offset=4)], [], lineno=1045, col_offset=0), ClassDef('OutputChecker', [], [Expr(Str('\n    A class used to check the whether the actual output from a doctest\n    example matches the expected output.  `OutputChecker` defines two\n    methods: `check_output`, which compares a given pair of outputs,\n    and returns true if they match; and `output_difference`, which\n    returns a string describing the differences between two outputs.\n    ', lineno=1483, col_offset=-1), lineno=1483, col_offset=-1), FunctionDef('check_output', arguments([Name('self', Param(), lineno=1484, col_offset=21), Name('want', Param(), lineno=1484, col_offset=27), Name('got', Param(), lineno=1484, col_offset=33), Name('optionflags', Param(), lineno=1484, col_offset=38)], None, None, []), [Expr(Str('\n        Return True iff the actual output from an example (`got`)\n        matches the expected output (`want`).  These strings are\n        always considered to match if they are identical; but\n        depending on what option flags the test runner is using,\n        several non-exact match types are also possible.  See the\n        documentation for `TestRunner` for more information about\n        option flags.\n        ', lineno=1493, col_offset=-1), lineno=1493, col_offset=-1), If(Compare(Name('got', Load(), lineno=1496, col_offset=11), [Eq()], [Name('want', Load(), lineno=1496, col_offset=18)], lineno=1496, col_offset=11), [Return(Name('True', Load(), lineno=1497, col_offset=19), lineno=1497, col_offset=12)], [], lineno=1496, col_offset=8), If(UnaryOp(Not(), BinOp(Name('optionflags', Load(), lineno=1501, col_offset=16), BitAnd(), Name('DONT_ACCEPT_TRUE_FOR_1', Load(), lineno=1501, col_offset=30), lineno=1501, col_offset=16), lineno=1501, col_offset=11), [If(Compare(Tuple([Name('got', Load(), lineno=1502, col_offset=16), Name('want', Load(), lineno=1502, col_offset=20)], Load(), lineno=1502, col_offset=16), [Eq()], [Tuple([Str('True\n', lineno=1502, col_offset=30), Str('1\n', lineno=1502, col_offset=40)], Load(), lineno=1502, col_offset=30)], lineno=1502, col_offset=15), [Return(Name('True', Load(), lineno=1503, col_offset=23), lineno=1503, col_offset=16)], [], lineno=1502, col_offset=12), If(Compare(Tuple([Name('got', Load(), lineno=1504, col_offset=16), Name('want', Load(), lineno=1504, col_offset=20)], Load(), lineno=1504, col_offset=16), [Eq()], [Tuple([Str('False\n', lineno=1504, col_offset=30), Str('0\n', lineno=1504, col_offset=41)], Load(), lineno=1504, col_offset=30)], lineno=1504, col_offset=15), [Return(Name('True', Load(), lineno=1505, col_offset=23), lineno=1505, col_offset=16)], [], lineno=1504, col_offset=12)], [], lineno=1501, col_offset=8), If(UnaryOp(Not(), BinOp(Name('optionflags', Load(), lineno=1509, col_offset=16), BitAnd(), Name('DONT_ACCEPT_BLANKLINE', Load(), lineno=1509, col_offset=30), lineno=1509, col_offset=16), lineno=1509, col_offset=11), [Assign([Name('want', Store(), lineno=1511, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1511, col_offset=19), 'sub', Load(), lineno=1511, col_offset=19), [BinOp(Str('(?m)^%s\\s*?$', lineno=1511, col_offset=26), Mod(), Call(Attribute(Name('re', Load(), lineno=1511, col_offset=43), 'escape', Load(), lineno=1511, col_offset=43), [Name('BLANKLINE_MARKER', Load(), lineno=1511, col_offset=53)], [], None, None, lineno=1511, col_offset=43), lineno=1511, col_offset=26), Str('', lineno=1512, col_offset=26), Name('want', Load(), lineno=1512, col_offset=30)], [], None, None, lineno=1511, col_offset=19), lineno=1511, col_offset=12), Assign([Name('got', Store(), lineno=1515, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1515, col_offset=18), 'sub', Load(), lineno=1515, col_offset=18), [Str('(?m)^\\s*?$', lineno=1515, col_offset=25), Str('', lineno=1515, col_offset=39), Name('got', Load(), lineno=1515, col_offset=43)], [], None, None, lineno=1515, col_offset=18), lineno=1515, col_offset=12), If(Compare(Name('got', Load(), lineno=1516, col_offset=15), [Eq()], [Name('want', Load(), lineno=1516, col_offset=22)], lineno=1516, col_offset=15), [Return(Name('True', Load(), lineno=1517, col_offset=23), lineno=1517, col_offset=16)], [], lineno=1516, col_offset=12)], [], lineno=1509, col_offset=8), If(BinOp(Name('optionflags', Load(), lineno=1522, col_offset=11), BitAnd(), Name('NORMALIZE_WHITESPACE', Load(), lineno=1522, col_offset=25), lineno=1522, col_offset=11), [Assign([Name('got', Store(), lineno=1523, col_offset=12)], Call(Attribute(Str(' ', lineno=1523, col_offset=18), 'join', Load(), lineno=1523, col_offset=18), [Call(Attribute(Name('got', Load(), lineno=1523, col_offset=27), 'split', Load(), lineno=1523, col_offset=27), [], [], None, None, lineno=1523, col_offset=27)], [], None, None, lineno=1523, col_offset=18), lineno=1523, col_offset=12), Assign([Name('want', Store(), lineno=1524, col_offset=12)], Call(Attribute(Str(' ', lineno=1524, col_offset=19), 'join', Load(), lineno=1524, col_offset=19), [Call(Attribute(Name('want', Load(), lineno=1524, col_offset=28), 'split', Load(), lineno=1524, col_offset=28), [], [], None, None, lineno=1524, col_offset=28)], [], None, None, lineno=1524, col_offset=19), lineno=1524, col_offset=12), If(Compare(Name('got', Load(), lineno=1525, col_offset=15), [Eq()], [Name('want', Load(), lineno=1525, col_offset=22)], lineno=1525, col_offset=15), [Return(Name('True', Load(), lineno=1526, col_offset=23), lineno=1526, col_offset=16)], [], lineno=1525, col_offset=12)], [], lineno=1522, col_offset=8), If(BinOp(Name('optionflags', Load(), lineno=1530, col_offset=11), BitAnd(), Name('ELLIPSIS', Load(), lineno=1530, col_offset=25), lineno=1530, col_offset=11), [If(Call(Name('_ellipsis_match', Load(), lineno=1531, col_offset=15), [Name('want', Load(), lineno=1531, col_offset=31), Name('got', Load(), lineno=1531, col_offset=37)], [], None, None, lineno=1531, col_offset=15), [Return(Name('True', Load(), lineno=1532, col_offset=23), lineno=1532, col_offset=16)], [], lineno=1531, col_offset=12)], [], lineno=1530, col_offset=8), Return(Name('False', Load(), lineno=1535, col_offset=15), lineno=1535, col_offset=8)], [], lineno=1484, col_offset=4), FunctionDef('_do_a_fancy_diff', arguments([Name('self', Param(), lineno=1538, col_offset=25), Name('want', Param(), lineno=1538, col_offset=31), Name('got', Param(), lineno=1538, col_offset=37), Name('optionflags', Param(), lineno=1538, col_offset=42)], None, None, []), [If(UnaryOp(Not(), BinOp(Name('optionflags', Load(), lineno=1540, col_offset=15), BitAnd(), BinOp(BinOp(Name('REPORT_UDIFF', Load(), lineno=1540, col_offset=30), BitOr(), Name('REPORT_CDIFF', Load(), lineno=1541, col_offset=30), lineno=1540, col_offset=30), BitOr(), Name('REPORT_NDIFF', Load(), lineno=1542, col_offset=30), lineno=1541, col_offset=43), lineno=1540, col_offset=15), lineno=1540, col_offset=11), [Return(Name('False', Load(), lineno=1543, col_offset=19), lineno=1543, col_offset=12)], [], lineno=1540, col_offset=8), If(BinOp(Name('optionflags', Load(), lineno=1555, col_offset=11), BitAnd(), Name('REPORT_NDIFF', Load(), lineno=1555, col_offset=25), lineno=1555, col_offset=11), [Return(Name('True', Load(), lineno=1556, col_offset=19), lineno=1556, col_offset=12)], [], lineno=1555, col_offset=8), Return(BoolOp(And(), [Compare(Call(Attribute(Name('want', Load(), lineno=1559, col_offset=15), 'count', Load(), lineno=1559, col_offset=15), [Str('\n', lineno=1559, col_offset=26)], [], None, None, lineno=1559, col_offset=15), [Gt()], [Num(2, lineno=1559, col_offset=34)], lineno=1559, col_offset=15), Compare(Call(Attribute(Name('got', Load(), lineno=1559, col_offset=40), 'count', Load(), lineno=1559, col_offset=40), [Str('\n', lineno=1559, col_offset=50)], [], None, None, lineno=1559, col_offset=40), [Gt()], [Num(2, lineno=1559, col_offset=58)], lineno=1559, col_offset=40)], lineno=1559, col_offset=15), lineno=1559, col_offset=8)], [], lineno=1538, col_offset=4), FunctionDef('output_difference', arguments([Name('self', Param(), lineno=1561, col_offset=26), Name('example', Param(), lineno=1561, col_offset=32), Name('got', Param(), lineno=1561, col_offset=41), Name('optionflags', Param(), lineno=1561, col_offset=46)], None, None, []), [Expr(Str('\n        Return a string describing the differences between the\n        expected output for a given example (`example`) and the actual\n        output (`got`).  `optionflags` is the set of option flags used\n        to compare `want` and `got`.\n        ', lineno=1567, col_offset=-1), lineno=1567, col_offset=-1), Assign([Name('want', Store(), lineno=1568, col_offset=8)], Attribute(Name('example', Load(), lineno=1568, col_offset=15), 'want', Load(), lineno=1568, col_offset=15), lineno=1568, col_offset=8), If(UnaryOp(Not(), BinOp(Name('optionflags', Load(), lineno=1571, col_offset=16), BitAnd(), Name('DONT_ACCEPT_BLANKLINE', Load(), lineno=1571, col_offset=30), lineno=1571, col_offset=16), lineno=1571, col_offset=11), [Assign([Name('got', Store(), lineno=1572, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1572, col_offset=18), 'sub', Load(), lineno=1572, col_offset=18), [Str('(?m)^[ ]*(?=\n)', lineno=1572, col_offset=25), Name('BLANKLINE_MARKER', Load(), lineno=1572, col_offset=44), Name('got', Load(), lineno=1572, col_offset=62)], [], None, None, lineno=1572, col_offset=18), lineno=1572, col_offset=12)], [], lineno=1571, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1575, col_offset=11), '_do_a_fancy_diff', Load(), lineno=1575, col_offset=11), [Name('want', Load(), lineno=1575, col_offset=33), Name('got', Load(), lineno=1575, col_offset=39), Name('optionflags', Load(), lineno=1575, col_offset=44)], [], None, None, lineno=1575, col_offset=11), [Assign([Name('want_lines', Store(), lineno=1577, col_offset=12)], Call(Attribute(Name('want', Load(), lineno=1577, col_offset=25), 'splitlines', Load(), lineno=1577, col_offset=25), [Name('True', Load(), lineno=1577, col_offset=41)], [], None, None, lineno=1577, col_offset=25), lineno=1577, col_offset=12), Assign([Name('got_lines', Store(), lineno=1578, col_offset=12)], Call(Attribute(Name('got', Load(), lineno=1578, col_offset=24), 'splitlines', Load(), lineno=1578, col_offset=24), [Name('True', Load(), lineno=1578, col_offset=39)], [], None, None, lineno=1578, col_offset=24), lineno=1578, col_offset=12), If(BinOp(Name('optionflags', Load(), lineno=1580, col_offset=15), BitAnd(), Name('REPORT_UDIFF', Load(), lineno=1580, col_offset=29), lineno=1580, col_offset=15), [Assign([Name('diff', Store(), lineno=1581, col_offset=16)], Call(Attribute(Name('difflib', Load(), lineno=1581, col_offset=23), 'unified_diff', Load(), lineno=1581, col_offset=23), [Name('want_lines', Load(), lineno=1581, col_offset=44), Name('got_lines', Load(), lineno=1581, col_offset=56)], [keyword('n', Num(2, lineno=1581, col_offset=69))], None, None, lineno=1581, col_offset=23), lineno=1581, col_offset=16), Assign([Name('diff', Store(), lineno=1582, col_offset=16)], Subscript(Call(Name('list', Load(), lineno=1582, col_offset=23), [Name('diff', Load(), lineno=1582, col_offset=28)], [], None, None, lineno=1582, col_offset=23), Slice(Num(2, lineno=1582, col_offset=34), None, None), Load(), lineno=1582, col_offset=23), lineno=1582, col_offset=16), Assign([Name('kind', Store(), lineno=1583, col_offset=16)], Str('unified diff with -expected +actual', lineno=1583, col_offset=23), lineno=1583, col_offset=16)], [If(BinOp(Name('optionflags', Load(), lineno=1584, col_offset=17), BitAnd(), Name('REPORT_CDIFF', Load(), lineno=1584, col_offset=31), lineno=1584, col_offset=17), [Assign([Name('diff', Store(), lineno=1585, col_offset=16)], Call(Attribute(Name('difflib', Load(), lineno=1585, col_offset=23), 'context_diff', Load(), lineno=1585, col_offset=23), [Name('want_lines', Load(), lineno=1585, col_offset=44), Name('got_lines', Load(), lineno=1585, col_offset=56)], [keyword('n', Num(2, lineno=1585, col_offset=69))], None, None, lineno=1585, col_offset=23), lineno=1585, col_offset=16), Assign([Name('diff', Store(), lineno=1586, col_offset=16)], Subscript(Call(Name('list', Load(), lineno=1586, col_offset=23), [Name('diff', Load(), lineno=1586, col_offset=28)], [], None, None, lineno=1586, col_offset=23), Slice(Num(2, lineno=1586, col_offset=34), None, None), Load(), lineno=1586, col_offset=23), lineno=1586, col_offset=16), Assign([Name('kind', Store(), lineno=1587, col_offset=16)], Str('context diff with expected followed by actual', lineno=1587, col_offset=23), lineno=1587, col_offset=16)], [If(BinOp(Name('optionflags', Load(), lineno=1588, col_offset=17), BitAnd(), Name('REPORT_NDIFF', Load(), lineno=1588, col_offset=31), lineno=1588, col_offset=17), [Assign([Name('engine', Store(), lineno=1589, col_offset=16)], Call(Attribute(Name('difflib', Load(), lineno=1589, col_offset=25), 'Differ', Load(), lineno=1589, col_offset=25), [], [keyword('charjunk', Attribute(Name('difflib', Load(), lineno=1589, col_offset=49), 'IS_CHARACTER_JUNK', Load(), lineno=1589, col_offset=49))], None, None, lineno=1589, col_offset=25), lineno=1589, col_offset=16), Assign([Name('diff', Store(), lineno=1590, col_offset=16)], Call(Name('list', Load(), lineno=1590, col_offset=23), [Call(Attribute(Name('engine', Load(), lineno=1590, col_offset=28), 'compare', Load(), lineno=1590, col_offset=28), [Name('want_lines', Load(), lineno=1590, col_offset=43), Name('got_lines', Load(), lineno=1590, col_offset=55)], [], None, None, lineno=1590, col_offset=28)], [], None, None, lineno=1590, col_offset=23), lineno=1590, col_offset=16), Assign([Name('kind', Store(), lineno=1591, col_offset=16)], Str('ndiff with -expected +actual', lineno=1591, col_offset=23), lineno=1591, col_offset=16)], [Assert(Num(0, lineno=1593, col_offset=23), Str('Bad diff option', lineno=1593, col_offset=26), lineno=1593, col_offset=16)], lineno=1588, col_offset=17)], lineno=1584, col_offset=17)], lineno=1580, col_offset=12), Assign([Name('diff', Store(), lineno=1595, col_offset=12)], ListComp(BinOp(Call(Attribute(Name('line', Load(), lineno=1595, col_offset=20), 'rstrip', Load(), lineno=1595, col_offset=20), [], [], None, None, lineno=1595, col_offset=20), Add(), Str('\n', lineno=1595, col_offset=36), lineno=1595, col_offset=20), [comprehension(Name('line', Store(), lineno=1595, col_offset=45), Name('diff', Load(), lineno=1595, col_offset=53), [])], lineno=1595, col_offset=20), lineno=1595, col_offset=12), Return(BinOp(BinOp(Str('Differences (%s):\n', lineno=1596, col_offset=19), Mod(), Name('kind', Load(), lineno=1596, col_offset=43), lineno=1596, col_offset=19), Add(), Call(Name('_indent', Load(), lineno=1596, col_offset=50), [Call(Attribute(Str('', lineno=1596, col_offset=58), 'join', Load(), lineno=1596, col_offset=58), [Name('diff', Load(), lineno=1596, col_offset=66)], [], None, None, lineno=1596, col_offset=58)], [], None, None, lineno=1596, col_offset=50), lineno=1596, col_offset=19), lineno=1596, col_offset=12)], [], lineno=1575, col_offset=8), If(BoolOp(And(), [Name('want', Load(), lineno=1600, col_offset=11), Name('got', Load(), lineno=1600, col_offset=20)], lineno=1600, col_offset=11), [Return(BinOp(Str('Expected:\n%sGot:\n%s', lineno=1601, col_offset=19), Mod(), Tuple([Call(Name('_indent', Load(), lineno=1601, col_offset=46), [Name('want', Load(), lineno=1601, col_offset=54)], [], None, None, lineno=1601, col_offset=46), Call(Name('_indent', Load(), lineno=1601, col_offset=61), [Name('got', Load(), lineno=1601, col_offset=69)], [], None, None, lineno=1601, col_offset=61)], Load(), lineno=1601, col_offset=46), lineno=1601, col_offset=19), lineno=1601, col_offset=12)], [If(Name('want', Load(), lineno=1602, col_offset=13), [Return(BinOp(Str('Expected:\n%sGot nothing\n', lineno=1603, col_offset=19), Mod(), Call(Name('_indent', Load(), lineno=1603, col_offset=50), [Name('want', Load(), lineno=1603, col_offset=58)], [], None, None, lineno=1603, col_offset=50), lineno=1603, col_offset=19), lineno=1603, col_offset=12)], [If(Name('got', Load(), lineno=1604, col_offset=13), [Return(BinOp(Str('Expected nothing\nGot:\n%s', lineno=1605, col_offset=19), Mod(), Call(Name('_indent', Load(), lineno=1605, col_offset=50), [Name('got', Load(), lineno=1605, col_offset=58)], [], None, None, lineno=1605, col_offset=50), lineno=1605, col_offset=19), lineno=1605, col_offset=12)], [Return(Str('Expected nothing\nGot nothing\n', lineno=1607, col_offset=19), lineno=1607, col_offset=12)], lineno=1604, col_offset=13)], lineno=1602, col_offset=13)], lineno=1600, col_offset=8)], [], lineno=1561, col_offset=4)], [], lineno=1476, col_offset=0), ClassDef('DocTestFailure', [Name('Exception', Load(), lineno=1609, col_offset=21)], [Expr(Str('A DocTest example has failed in debugging mode.\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - got: the actual output\n    ', lineno=1619, col_offset=-1), lineno=1619, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1620, col_offset=17), Name('test', Param(), lineno=1620, col_offset=23), Name('example', Param(), lineno=1620, col_offset=29), Name('got', Param(), lineno=1620, col_offset=38)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1621, col_offset=8), 'test', Store(), lineno=1621, col_offset=8)], Name('test', Load(), lineno=1621, col_offset=20), lineno=1621, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1622, col_offset=8), 'example', Store(), lineno=1622, col_offset=8)], Name('example', Load(), lineno=1622, col_offset=23), lineno=1622, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1623, col_offset=8), 'got', Store(), lineno=1623, col_offset=8)], Name('got', Load(), lineno=1623, col_offset=19), lineno=1623, col_offset=8)], [], lineno=1620, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=1625, col_offset=16)], None, None, []), [Return(Call(Name('str', Load(), lineno=1626, col_offset=15), [Attribute(Name('self', Load(), lineno=1626, col_offset=19), 'test', Load(), lineno=1626, col_offset=19)], [], None, None, lineno=1626, col_offset=15), lineno=1626, col_offset=8)], [], lineno=1625, col_offset=4)], [], lineno=1609, col_offset=0), ClassDef('UnexpectedException', [Name('Exception', Load(), lineno=1628, col_offset=26)], [Expr(Str('A DocTest example has encountered an unexpected exception\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - exc_info: the exception info\n    ', lineno=1638, col_offset=-1), lineno=1638, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1639, col_offset=17), Name('test', Param(), lineno=1639, col_offset=23), Name('example', Param(), lineno=1639, col_offset=29), Name('exc_info', Param(), lineno=1639, col_offset=38)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1640, col_offset=8), 'test', Store(), lineno=1640, col_offset=8)], Name('test', Load(), lineno=1640, col_offset=20), lineno=1640, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1641, col_offset=8), 'example', Store(), lineno=1641, col_offset=8)], Name('example', Load(), lineno=1641, col_offset=23), lineno=1641, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1642, col_offset=8), 'exc_info', Store(), lineno=1642, col_offset=8)], Name('exc_info', Load(), lineno=1642, col_offset=24), lineno=1642, col_offset=8)], [], lineno=1639, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=1644, col_offset=16)], None, None, []), [Return(Call(Name('str', Load(), lineno=1645, col_offset=15), [Attribute(Name('self', Load(), lineno=1645, col_offset=19), 'test', Load(), lineno=1645, col_offset=19)], [], None, None, lineno=1645, col_offset=15), lineno=1645, col_offset=8)], [], lineno=1644, col_offset=4)], [], lineno=1628, col_offset=0), ClassDef('DebugRunner', [Name('DocTestRunner', Load(), lineno=1647, col_offset=18)], [Expr(Str("Run doc tests but raise an exception as soon as there is a failure.\n\n       If an unexpected exception occurs, an UnexpectedException is raised.\n       It contains the test, the example, and the original exception:\n\n         >>> runner = DebugRunner(verbose=False)\n         >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n         ...                                    {}, 'foo', 'foo.py', 0)\n         >>> try:\n         ...     runner.run(test)\n         ... except UnexpectedException, failure:\n         ...     pass\n\n         >>> failure.test is test\n         True\n\n         >>> failure.example.want\n         '42\\n'\n\n         >>> exc_info = failure.exc_info\n         >>> raise exc_info[0], exc_info[1], exc_info[2]\n         Traceback (most recent call last):\n         ...\n         KeyError\n\n       We wrap the original exception to give the calling application\n       access to the test and example information.\n\n       If the output doesn't match, then a DocTestFailure is raised:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 1\n         ...      >>> x\n         ...      2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> try:\n         ...    runner.run(test)\n         ... except DocTestFailure, failure:\n         ...    pass\n\n       DocTestFailure objects provide access to the test:\n\n         >>> failure.test is test\n         True\n\n       As well as to the example:\n\n         >>> failure.example.want\n         '2\\n'\n\n       and the actual output:\n\n         >>> failure.got\n         '1\\n'\n\n       If a failure or error occurs, the globals are left intact:\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 1}\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      >>> raise KeyError\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         Traceback (most recent call last):\n         ...\n         UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 2}\n\n       But the globals are cleared if there is no error:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         TestResults(failed=0, attempted=1)\n\n         >>> test.globs\n         {}\n\n       ", lineno=1736, col_offset=-1), lineno=1736, col_offset=-1), FunctionDef('run', arguments([Name('self', Param(), lineno=1738, col_offset=12), Name('test', Param(), lineno=1738, col_offset=18), Name('compileflags', Param(), lineno=1738, col_offset=24), Name('out', Param(), lineno=1738, col_offset=43), Name('clear_globs', Param(), lineno=1738, col_offset=53)], None, None, [Name('None', Load(), lineno=1738, col_offset=37), Name('None', Load(), lineno=1738, col_offset=47), Name('True', Load(), lineno=1738, col_offset=65)]), [Assign([Name('r', Store(), lineno=1739, col_offset=8)], Call(Attribute(Name('DocTestRunner', Load(), lineno=1739, col_offset=12), 'run', Load(), lineno=1739, col_offset=12), [Name('self', Load(), lineno=1739, col_offset=30), Name('test', Load(), lineno=1739, col_offset=36), Name('compileflags', Load(), lineno=1739, col_offset=42), Name('out', Load(), lineno=1739, col_offset=56), Name('False', Load(), lineno=1739, col_offset=61)], [], None, None, lineno=1739, col_offset=12), lineno=1739, col_offset=8), If(Name('clear_globs', Load(), lineno=1740, col_offset=11), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=1741, col_offset=12), 'globs', Load(), lineno=1741, col_offset=12), 'clear', Load(), lineno=1741, col_offset=12), [], [], None, None, lineno=1741, col_offset=12), lineno=1741, col_offset=12)], [], lineno=1740, col_offset=8), Return(Name('r', Load(), lineno=1742, col_offset=15), lineno=1742, col_offset=8)], [], lineno=1738, col_offset=4), FunctionDef('report_unexpected_exception', arguments([Name('self', Param(), lineno=1744, col_offset=36), Name('out', Param(), lineno=1744, col_offset=42), Name('test', Param(), lineno=1744, col_offset=47), Name('example', Param(), lineno=1744, col_offset=53), Name('exc_info', Param(), lineno=1744, col_offset=62)], None, None, []), [Raise(Call(Name('UnexpectedException', Load(), lineno=1745, col_offset=14), [Name('test', Load(), lineno=1745, col_offset=34), Name('example', Load(), lineno=1745, col_offset=40), Name('exc_info', Load(), lineno=1745, col_offset=49)], [], None, None, lineno=1745, col_offset=14), None, None, lineno=1745, col_offset=8)], [], lineno=1744, col_offset=4), FunctionDef('report_failure', arguments([Name('self', Param(), lineno=1747, col_offset=23), Name('out', Param(), lineno=1747, col_offset=29), Name('test', Param(), lineno=1747, col_offset=34), Name('example', Param(), lineno=1747, col_offset=40), Name('got', Param(), lineno=1747, col_offset=49)], None, None, []), [Raise(Call(Name('DocTestFailure', Load(), lineno=1748, col_offset=14), [Name('test', Load(), lineno=1748, col_offset=29), Name('example', Load(), lineno=1748, col_offset=35), Name('got', Load(), lineno=1748, col_offset=44)], [], None, None, lineno=1748, col_offset=14), None, None, lineno=1748, col_offset=8)], [], lineno=1747, col_offset=4)], [], lineno=1647, col_offset=0), Assign([Name('master', Store(), lineno=1757, col_offset=0)], Name('None', Load(), lineno=1757, col_offset=9), lineno=1757, col_offset=0), FunctionDef('testmod', arguments([Name('m', Param(), lineno=1759, col_offset=12), Name('name', Param(), lineno=1759, col_offset=20), Name('globs', Param(), lineno=1759, col_offset=31), Name('verbose', Param(), lineno=1759, col_offset=43), Name('report', Param(), lineno=1760, col_offset=12), Name('optionflags', Param(), lineno=1760, col_offset=25), Name('extraglobs', Param(), lineno=1760, col_offset=40), Name('raise_on_error', Param(), lineno=1761, col_offset=12), Name('exclude_empty', Param(), lineno=1761, col_offset=34)], None, None, [Name('None', Load(), lineno=1759, col_offset=14), Name('None', Load(), lineno=1759, col_offset=25), Name('None', Load(), lineno=1759, col_offset=37), Name('None', Load(), lineno=1759, col_offset=51), Name('True', Load(), lineno=1760, col_offset=19), Num(0, lineno=1760, col_offset=37), Name('None', Load(), lineno=1760, col_offset=51), Name('False', Load(), lineno=1761, col_offset=27), Name('False', Load(), lineno=1761, col_offset=48)]), [Expr(Str('m=None, name=None, globs=None, verbose=None, report=True,\n       optionflags=0, extraglobs=None, raise_on_error=False,\n       exclude_empty=False\n\n    Test examples in docstrings in functions and classes reachable\n    from module m (or the current module if m is not supplied), starting\n    with m.__doc__.\n\n    Also test examples reachable from dict m.__test__ if it exists and is\n    not None.  m.__test__ maps names to functions, classes and strings;\n    function and class docstrings are tested even if the name is private;\n    strings are tested directly, as if they were docstrings.\n\n    Return (#failures, #tests).\n\n    See help(doctest) for an overview.\n\n    Optional keyword arg "name" gives the name of the module; by default\n    use m.__name__.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use m.__dict__.  A copy of this\n    dict is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.  This is new in 2.4.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  This is new in 2.3.  Possible values (see the\n    docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    ', lineno=1824, col_offset=-1), lineno=1824, col_offset=-1), Global(['master'], lineno=1825, col_offset=4), If(Compare(Name('m', Load(), lineno=1828, col_offset=7), [Is()], [Name('None', Load(), lineno=1828, col_offset=12)], lineno=1828, col_offset=7), [Assign([Name('m', Store(), lineno=1832, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=1832, col_offset=12), 'modules', Load(), lineno=1832, col_offset=12), 'get', Load(), lineno=1832, col_offset=12), [Str('__main__', lineno=1832, col_offset=28)], [], None, None, lineno=1832, col_offset=12), lineno=1832, col_offset=8)], [], lineno=1828, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('inspect', Load(), lineno=1835, col_offset=11), 'ismodule', Load(), lineno=1835, col_offset=11), [Name('m', Load(), lineno=1835, col_offset=28)], [], None, None, lineno=1835, col_offset=11), lineno=1835, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=1836, col_offset=14), [BinOp(Str('testmod: module required; %r', lineno=1836, col_offset=24), Mod(), Tuple([Name('m', Load(), lineno=1836, col_offset=58)], Load(), lineno=1836, col_offset=58), lineno=1836, col_offset=24)], [], None, None, lineno=1836, col_offset=14), None, None, lineno=1836, col_offset=8)], [], lineno=1835, col_offset=4), If(Compare(Name('name', Load(), lineno=1839, col_offset=7), [Is()], [Name('None', Load(), lineno=1839, col_offset=15)], lineno=1839, col_offset=7), [Assign([Name('name', Store(), lineno=1840, col_offset=8)], Attribute(Name('m', Load(), lineno=1840, col_offset=15), '__name__', Load(), lineno=1840, col_offset=15), lineno=1840, col_offset=8)], [], lineno=1839, col_offset=4), Assign([Name('finder', Store(), lineno=1843, col_offset=4)], Call(Name('DocTestFinder', Load(), lineno=1843, col_offset=13), [], [keyword('exclude_empty', Name('exclude_empty', Load(), lineno=1843, col_offset=41))], None, None, lineno=1843, col_offset=13), lineno=1843, col_offset=4), If(Name('raise_on_error', Load(), lineno=1845, col_offset=7), [Assign([Name('runner', Store(), lineno=1846, col_offset=8)], Call(Name('DebugRunner', Load(), lineno=1846, col_offset=17), [], [keyword('verbose', Name('verbose', Load(), lineno=1846, col_offset=37)), keyword('optionflags', Name('optionflags', Load(), lineno=1846, col_offset=58))], None, None, lineno=1846, col_offset=17), lineno=1846, col_offset=8)], [Assign([Name('runner', Store(), lineno=1848, col_offset=8)], Call(Name('DocTestRunner', Load(), lineno=1848, col_offset=17), [], [keyword('verbose', Name('verbose', Load(), lineno=1848, col_offset=39)), keyword('optionflags', Name('optionflags', Load(), lineno=1848, col_offset=60))], None, None, lineno=1848, col_offset=17), lineno=1848, col_offset=8)], lineno=1845, col_offset=4), For(Name('test', Store(), lineno=1850, col_offset=8), Call(Attribute(Name('finder', Load(), lineno=1850, col_offset=16), 'find', Load(), lineno=1850, col_offset=16), [Name('m', Load(), lineno=1850, col_offset=28), Name('name', Load(), lineno=1850, col_offset=31)], [keyword('globs', Name('globs', Load(), lineno=1850, col_offset=43)), keyword('extraglobs', Name('extraglobs', Load(), lineno=1850, col_offset=61))], None, None, lineno=1850, col_offset=16), [Expr(Call(Attribute(Name('runner', Load(), lineno=1851, col_offset=8), 'run', Load(), lineno=1851, col_offset=8), [Name('test', Load(), lineno=1851, col_offset=19)], [], None, None, lineno=1851, col_offset=8), lineno=1851, col_offset=8)], [], lineno=1850, col_offset=4), If(Name('report', Load(), lineno=1853, col_offset=7), [Expr(Call(Attribute(Name('runner', Load(), lineno=1854, col_offset=8), 'summarize', Load(), lineno=1854, col_offset=8), [], [], None, None, lineno=1854, col_offset=8), lineno=1854, col_offset=8)], [], lineno=1853, col_offset=4), If(Compare(Name('master', Load(), lineno=1856, col_offset=7), [Is()], [Name('None', Load(), lineno=1856, col_offset=17)], lineno=1856, col_offset=7), [Assign([Name('master', Store(), lineno=1857, col_offset=8)], Name('runner', Load(), lineno=1857, col_offset=17), lineno=1857, col_offset=8)], [Expr(Call(Attribute(Name('master', Load(), lineno=1859, col_offset=8), 'merge', Load(), lineno=1859, col_offset=8), [Name('runner', Load(), lineno=1859, col_offset=21)], [], None, None, lineno=1859, col_offset=8), lineno=1859, col_offset=8)], lineno=1856, col_offset=4), Return(Call(Name('TestResults', Load(), lineno=1861, col_offset=11), [Attribute(Name('runner', Load(), lineno=1861, col_offset=23), 'failures', Load(), lineno=1861, col_offset=23), Attribute(Name('runner', Load(), lineno=1861, col_offset=40), 'tries', Load(), lineno=1861, col_offset=40)], [], None, None, lineno=1861, col_offset=11), lineno=1861, col_offset=4)], [], lineno=1759, col_offset=0), FunctionDef('testfile', arguments([Name('filename', Param(), lineno=1863, col_offset=13), Name('module_relative', Param(), lineno=1863, col_offset=23), Name('name', Param(), lineno=1863, col_offset=45), Name('package', Param(), lineno=1863, col_offset=56), Name('globs', Param(), lineno=1864, col_offset=13), Name('verbose', Param(), lineno=1864, col_offset=25), Name('report', Param(), lineno=1864, col_offset=39), Name('optionflags', Param(), lineno=1864, col_offset=52), Name('extraglobs', Param(), lineno=1865, col_offset=13), Name('raise_on_error', Param(), lineno=1865, col_offset=30), Name('parser', Param(), lineno=1865, col_offset=52), Name('encoding', Param(), lineno=1866, col_offset=13)], None, None, [Name('True', Load(), lineno=1863, col_offset=39), Name('None', Load(), lineno=1863, col_offset=50), Name('None', Load(), lineno=1863, col_offset=64), Name('None', Load(), lineno=1864, col_offset=19), Name('None', Load(), lineno=1864, col_offset=33), Name('True', Load(), lineno=1864, col_offset=46), Num(0, lineno=1864, col_offset=64), Name('None', Load(), lineno=1865, col_offset=24), Name('False', Load(), lineno=1865, col_offset=45), Call(Name('DocTestParser', Load(), lineno=1865, col_offset=59), [], [], None, None, lineno=1865, col_offset=59), Name('None', Load(), lineno=1866, col_offset=22)]), [Expr(Str('\n    Test examples in the given file.  Return (#failures, #tests).\n\n    Optional keyword arg "module_relative" specifies how filenames\n    should be interpreted:\n\n      - If "module_relative" is True (the default), then "filename"\n         specifies a module-relative path.  By default, this path is\n         relative to the calling module\'s directory; but if the\n         "package" argument is specified, then it is relative to that\n         package.  To ensure os-independence, "filename" should use\n         "/" characters to separate path segments, and should not\n         be an absolute path (i.e., it may not begin with "/").\n\n      - If "module_relative" is False, then "filename" specifies an\n        os-specific path.  The path may be absolute or relative (to\n        the current working directory).\n\n    Optional keyword arg "name" gives the name of the test; by default\n    use the file\'s basename.\n\n    Optional keyword argument "package" is a Python package or the\n    name of a Python package whose directory should be used as the\n    base directory for a module relative filename.  If no package is\n    specified, then the calling module\'s directory is used as the base\n    directory for module relative filenames.  It is an error to\n    specify "package" if "module_relative" is False.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use {}.  A copy of this dict\n    is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  Possible values (see the docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Optional keyword arg "parser" specifies a DocTestParser (or\n    subclass) that should be used to extract tests from the files.\n\n    Optional keyword arg "encoding" specifies an encoding that should\n    be used to convert the file to unicode.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    ', lineno=1942, col_offset=-1), lineno=1942, col_offset=-1), Global(['master'], lineno=1943, col_offset=4), If(BoolOp(And(), [Name('package', Load(), lineno=1945, col_offset=7), UnaryOp(Not(), Name('module_relative', Load(), lineno=1945, col_offset=23), lineno=1945, col_offset=19)], lineno=1945, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=1946, col_offset=14), [Str('Package may only be specified for module-relative paths.', lineno=1946, col_offset=25)], [], None, None, lineno=1946, col_offset=14), None, None, lineno=1946, col_offset=8)], [], lineno=1945, col_offset=4), Assign([Tuple([Name('text', Store(), lineno=1950, col_offset=4), Name('filename', Store(), lineno=1950, col_offset=10)], Store(), lineno=1950, col_offset=4)], Call(Name('_load_testfile', Load(), lineno=1950, col_offset=21), [Name('filename', Load(), lineno=1950, col_offset=36), Name('package', Load(), lineno=1950, col_offset=46), Name('module_relative', Load(), lineno=1950, col_offset=55)], [], None, None, lineno=1950, col_offset=21), lineno=1950, col_offset=4), If(Compare(Name('name', Load(), lineno=1953, col_offset=7), [Is()], [Name('None', Load(), lineno=1953, col_offset=15)], lineno=1953, col_offset=7), [Assign([Name('name', Store(), lineno=1954, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1954, col_offset=15), 'path', Load(), lineno=1954, col_offset=15), 'basename', Load(), lineno=1954, col_offset=15), [Name('filename', Load(), lineno=1954, col_offset=32)], [], None, None, lineno=1954, col_offset=15), lineno=1954, col_offset=8)], [], lineno=1953, col_offset=4), If(Compare(Name('globs', Load(), lineno=1957, col_offset=7), [Is()], [Name('None', Load(), lineno=1957, col_offset=16)], lineno=1957, col_offset=7), [Assign([Name('globs', Store(), lineno=1958, col_offset=8)], Dict([], [], lineno=1958, col_offset=16), lineno=1958, col_offset=8)], [Assign([Name('globs', Store(), lineno=1960, col_offset=8)], Call(Attribute(Name('globs', Load(), lineno=1960, col_offset=16), 'copy', Load(), lineno=1960, col_offset=16), [], [], None, None, lineno=1960, col_offset=16), lineno=1960, col_offset=8)], lineno=1957, col_offset=4), If(Compare(Name('extraglobs', Load(), lineno=1961, col_offset=7), [IsNot()], [Name('None', Load(), lineno=1961, col_offset=25)], lineno=1961, col_offset=7), [Expr(Call(Attribute(Name('globs', Load(), lineno=1962, col_offset=8), 'update', Load(), lineno=1962, col_offset=8), [Name('extraglobs', Load(), lineno=1962, col_offset=21)], [], None, None, lineno=1962, col_offset=8), lineno=1962, col_offset=8)], [], lineno=1961, col_offset=4), If(Compare(Str('__name__', lineno=1963, col_offset=7), [NotIn()], [Name('globs', Load(), lineno=1963, col_offset=25)], lineno=1963, col_offset=7), [Assign([Subscript(Name('globs', Load(), lineno=1964, col_offset=8), Index(Str('__name__', lineno=1964, col_offset=14)), Store(), lineno=1964, col_offset=8)], Str('__main__', lineno=1964, col_offset=28), lineno=1964, col_offset=8)], [], lineno=1963, col_offset=4), If(Name('raise_on_error', Load(), lineno=1966, col_offset=7), [Assign([Name('runner', Store(), lineno=1967, col_offset=8)], Call(Name('DebugRunner', Load(), lineno=1967, col_offset=17), [], [keyword('verbose', Name('verbose', Load(), lineno=1967, col_offset=37)), keyword('optionflags', Name('optionflags', Load(), lineno=1967, col_offset=58))], None, None, lineno=1967, col_offset=17), lineno=1967, col_offset=8)], [Assign([Name('runner', Store(), lineno=1969, col_offset=8)], Call(Name('DocTestRunner', Load(), lineno=1969, col_offset=17), [], [keyword('verbose', Name('verbose', Load(), lineno=1969, col_offset=39)), keyword('optionflags', Name('optionflags', Load(), lineno=1969, col_offset=60))], None, None, lineno=1969, col_offset=17), lineno=1969, col_offset=8)], lineno=1966, col_offset=4), If(Compare(Name('encoding', Load(), lineno=1971, col_offset=7), [IsNot()], [Name('None', Load(), lineno=1971, col_offset=23)], lineno=1971, col_offset=7), [Assign([Name('text', Store(), lineno=1972, col_offset=8)], Call(Attribute(Name('text', Load(), lineno=1972, col_offset=15), 'decode', Load(), lineno=1972, col_offset=15), [Name('encoding', Load(), lineno=1972, col_offset=27)], [], None, None, lineno=1972, col_offset=15), lineno=1972, col_offset=8)], [], lineno=1971, col_offset=4), Assign([Name('test', Store(), lineno=1975, col_offset=4)], Call(Attribute(Name('parser', Load(), lineno=1975, col_offset=11), 'get_doctest', Load(), lineno=1975, col_offset=11), [Name('text', Load(), lineno=1975, col_offset=30), Name('globs', Load(), lineno=1975, col_offset=36), Name('name', Load(), lineno=1975, col_offset=43), Name('filename', Load(), lineno=1975, col_offset=49), Num(0, lineno=1975, col_offset=59)], [], None, None, lineno=1975, col_offset=11), lineno=1975, col_offset=4), Expr(Call(Attribute(Name('runner', Load(), lineno=1976, col_offset=4), 'run', Load(), lineno=1976, col_offset=4), [Name('test', Load(), lineno=1976, col_offset=15)], [], None, None, lineno=1976, col_offset=4), lineno=1976, col_offset=4), If(Name('report', Load(), lineno=1978, col_offset=7), [Expr(Call(Attribute(Name('runner', Load(), lineno=1979, col_offset=8), 'summarize', Load(), lineno=1979, col_offset=8), [], [], None, None, lineno=1979, col_offset=8), lineno=1979, col_offset=8)], [], lineno=1978, col_offset=4), If(Compare(Name('master', Load(), lineno=1981, col_offset=7), [Is()], [Name('None', Load(), lineno=1981, col_offset=17)], lineno=1981, col_offset=7), [Assign([Name('master', Store(), lineno=1982, col_offset=8)], Name('runner', Load(), lineno=1982, col_offset=17), lineno=1982, col_offset=8)], [Expr(Call(Attribute(Name('master', Load(), lineno=1984, col_offset=8), 'merge', Load(), lineno=1984, col_offset=8), [Name('runner', Load(), lineno=1984, col_offset=21)], [], None, None, lineno=1984, col_offset=8), lineno=1984, col_offset=8)], lineno=1981, col_offset=4), Return(Call(Name('TestResults', Load(), lineno=1986, col_offset=11), [Attribute(Name('runner', Load(), lineno=1986, col_offset=23), 'failures', Load(), lineno=1986, col_offset=23), Attribute(Name('runner', Load(), lineno=1986, col_offset=40), 'tries', Load(), lineno=1986, col_offset=40)], [], None, None, lineno=1986, col_offset=11), lineno=1986, col_offset=4)], [], lineno=1863, col_offset=0), FunctionDef('run_docstring_examples', arguments([Name('f', Param(), lineno=1988, col_offset=27), Name('globs', Param(), lineno=1988, col_offset=30), Name('verbose', Param(), lineno=1988, col_offset=37), Name('name', Param(), lineno=1988, col_offset=52), Name('compileflags', Param(), lineno=1989, col_offset=27), Name('optionflags', Param(), lineno=1989, col_offset=46)], None, None, [Name('False', Load(), lineno=1988, col_offset=45), Str('NoName', lineno=1988, col_offset=57), Name('None', Load(), lineno=1989, col_offset=40), Num(0, lineno=1989, col_offset=58)]), [Expr(Str("\n    Test examples in the given object's docstring (`f`), using `globs`\n    as globals.  Optional argument `name` is used in failure messages.\n    If the optional argument `verbose` is true, then generate output\n    even if there are no failures.\n\n    `compileflags` gives the set of flags that should be used by the\n    Python compiler when running the examples.  If not specified, then\n    it will default to the set of future-import flags that apply to\n    `globs`.\n\n    Optional keyword arg `optionflags` specifies options for the\n    testing and output.  See the documentation for `testmod` for more\n    information.\n    ", lineno=2004, col_offset=-1), lineno=2004, col_offset=-1), Assign([Name('finder', Store(), lineno=2006, col_offset=4)], Call(Name('DocTestFinder', Load(), lineno=2006, col_offset=13), [], [keyword('verbose', Name('verbose', Load(), lineno=2006, col_offset=35)), keyword('recurse', Name('False', Load(), lineno=2006, col_offset=52))], None, None, lineno=2006, col_offset=13), lineno=2006, col_offset=4), Assign([Name('runner', Store(), lineno=2007, col_offset=4)], Call(Name('DocTestRunner', Load(), lineno=2007, col_offset=13), [], [keyword('verbose', Name('verbose', Load(), lineno=2007, col_offset=35)), keyword('optionflags', Name('optionflags', Load(), lineno=2007, col_offset=56))], None, None, lineno=2007, col_offset=13), lineno=2007, col_offset=4), For(Name('test', Store(), lineno=2008, col_offset=8), Call(Attribute(Name('finder', Load(), lineno=2008, col_offset=16), 'find', Load(), lineno=2008, col_offset=16), [Name('f', Load(), lineno=2008, col_offset=28), Name('name', Load(), lineno=2008, col_offset=31)], [keyword('globs', Name('globs', Load(), lineno=2008, col_offset=43))], None, None, lineno=2008, col_offset=16), [Expr(Call(Attribute(Name('runner', Load(), lineno=2009, col_offset=8), 'run', Load(), lineno=2009, col_offset=8), [Name('test', Load(), lineno=2009, col_offset=19)], [keyword('compileflags', Name('compileflags', Load(), lineno=2009, col_offset=38))], None, None, lineno=2009, col_offset=8), lineno=2009, col_offset=8)], [], lineno=2008, col_offset=4)], [], lineno=1988, col_offset=0), ClassDef('Tester', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=2018, col_offset=17), Name('mod', Param(), lineno=2018, col_offset=23), Name('globs', Param(), lineno=2018, col_offset=33), Name('verbose', Param(), lineno=2018, col_offset=45), Name('optionflags', Param(), lineno=2018, col_offset=59)], None, None, [Name('None', Load(), lineno=2018, col_offset=27), Name('None', Load(), lineno=2018, col_offset=39), Name('None', Load(), lineno=2018, col_offset=53), Num(0, lineno=2018, col_offset=71)]), [Expr(Call(Attribute(Name('warnings', Load(), lineno=2020, col_offset=8), 'warn', Load(), lineno=2020, col_offset=8), [Str('class Tester is deprecated; use class doctest.DocTestRunner instead', lineno=2020, col_offset=22), Name('DeprecationWarning', Load(), lineno=2022, col_offset=22)], [keyword('stacklevel', Num(2, lineno=2022, col_offset=53))], None, None, lineno=2020, col_offset=8), lineno=2020, col_offset=8), If(BoolOp(And(), [Compare(Name('mod', Load(), lineno=2023, col_offset=11), [Is()], [Name('None', Load(), lineno=2023, col_offset=18)], lineno=2023, col_offset=11), Compare(Name('globs', Load(), lineno=2023, col_offset=27), [Is()], [Name('None', Load(), lineno=2023, col_offset=36)], lineno=2023, col_offset=27)], lineno=2023, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=2024, col_offset=18), [Str('Tester.__init__: must specify mod or globs', lineno=2024, col_offset=28)], [], None, None, lineno=2024, col_offset=18), None, None, lineno=2024, col_offset=12)], [], lineno=2023, col_offset=8), If(BoolOp(And(), [Compare(Name('mod', Load(), lineno=2025, col_offset=11), [IsNot()], [Name('None', Load(), lineno=2025, col_offset=22)], lineno=2025, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('inspect', Load(), lineno=2025, col_offset=35), 'ismodule', Load(), lineno=2025, col_offset=35), [Name('mod', Load(), lineno=2025, col_offset=52)], [], None, None, lineno=2025, col_offset=35), lineno=2025, col_offset=31)], lineno=2025, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=2026, col_offset=18), [BinOp(Str('Tester.__init__: mod must be a module; %r', lineno=2026, col_offset=28), Mod(), Tuple([Name('mod', Load(), lineno=2027, col_offset=29)], Load(), lineno=2027, col_offset=29), lineno=2026, col_offset=28)], [], None, None, lineno=2026, col_offset=18), None, None, lineno=2026, col_offset=12)], [], lineno=2025, col_offset=8), If(Compare(Name('globs', Load(), lineno=2028, col_offset=11), [Is()], [Name('None', Load(), lineno=2028, col_offset=20)], lineno=2028, col_offset=11), [Assign([Name('globs', Store(), lineno=2029, col_offset=12)], Attribute(Name('mod', Load(), lineno=2029, col_offset=20), '__dict__', Load(), lineno=2029, col_offset=20), lineno=2029, col_offset=12)], [], lineno=2028, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2030, col_offset=8), 'globs', Store(), lineno=2030, col_offset=8)], Name('globs', Load(), lineno=2030, col_offset=21), lineno=2030, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2032, col_offset=8), 'verbose', Store(), lineno=2032, col_offset=8)], Name('verbose', Load(), lineno=2032, col_offset=23), lineno=2032, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2033, col_offset=8), 'optionflags', Store(), lineno=2033, col_offset=8)], Name('optionflags', Load(), lineno=2033, col_offset=27), lineno=2033, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2034, col_offset=8), 'testfinder', Store(), lineno=2034, col_offset=8)], Call(Name('DocTestFinder', Load(), lineno=2034, col_offset=26), [], [], None, None, lineno=2034, col_offset=26), lineno=2034, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2035, col_offset=8), 'testrunner', Store(), lineno=2035, col_offset=8)], Call(Name('DocTestRunner', Load(), lineno=2035, col_offset=26), [], [keyword('verbose', Name('verbose', Load(), lineno=2035, col_offset=48)), keyword('optionflags', Name('optionflags', Load(), lineno=2036, col_offset=52))], None, None, lineno=2035, col_offset=26), lineno=2035, col_offset=8)], [], lineno=2018, col_offset=4), FunctionDef('runstring', arguments([Name('self', Param(), lineno=2038, col_offset=18), Name('s', Param(), lineno=2038, col_offset=24), Name('name', Param(), lineno=2038, col_offset=27)], None, None, []), [Assign([Name('test', Store(), lineno=2039, col_offset=8)], Call(Attribute(Call(Name('DocTestParser', Load(), lineno=2039, col_offset=15), [], [], None, None, lineno=2039, col_offset=15), 'get_doctest', Load(), lineno=2039, col_offset=15), [Name('s', Load(), lineno=2039, col_offset=43), Attribute(Name('self', Load(), lineno=2039, col_offset=46), 'globs', Load(), lineno=2039, col_offset=46), Name('name', Load(), lineno=2039, col_offset=58), Name('None', Load(), lineno=2039, col_offset=64), Name('None', Load(), lineno=2039, col_offset=70)], [], None, None, lineno=2039, col_offset=15), lineno=2039, col_offset=8), If(Attribute(Name('self', Load(), lineno=2040, col_offset=11), 'verbose', Load(), lineno=2040, col_offset=11), [Print(None, [Str('Running string', lineno=2041, col_offset=18), Name('name', Load(), lineno=2041, col_offset=36)], True, lineno=2041, col_offset=12)], [], lineno=2040, col_offset=8), Assign([Tuple([Name('f', Store(), lineno=2042, col_offset=9), Name('t', Store(), lineno=2042, col_offset=11)], Store(), lineno=2042, col_offset=9)], Call(Attribute(Attribute(Name('self', Load(), lineno=2042, col_offset=16), 'testrunner', Load(), lineno=2042, col_offset=16), 'run', Load(), lineno=2042, col_offset=16), [Name('test', Load(), lineno=2042, col_offset=36)], [], None, None, lineno=2042, col_offset=16), lineno=2042, col_offset=8), If(Attribute(Name('self', Load(), lineno=2043, col_offset=11), 'verbose', Load(), lineno=2043, col_offset=11), [Print(None, [Name('f', Load(), lineno=2044, col_offset=18), Str('of', lineno=2044, col_offset=21), Name('t', Load(), lineno=2044, col_offset=27), Str('examples failed in string', lineno=2044, col_offset=30), Name('name', Load(), lineno=2044, col_offset=59)], True, lineno=2044, col_offset=12)], [], lineno=2043, col_offset=8), Return(Call(Name('TestResults', Load(), lineno=2045, col_offset=15), [Name('f', Load(), lineno=2045, col_offset=27), Name('t', Load(), lineno=2045, col_offset=29)], [], None, None, lineno=2045, col_offset=15), lineno=2045, col_offset=8)], [], lineno=2038, col_offset=4), FunctionDef('rundoc', arguments([Name('self', Param(), lineno=2047, col_offset=15), Name('object', Param(), lineno=2047, col_offset=21), Name('name', Param(), lineno=2047, col_offset=29), Name('module', Param(), lineno=2047, col_offset=40)], None, None, [Name('None', Load(), lineno=2047, col_offset=34), Name('None', Load(), lineno=2047, col_offset=47)]), [Assign([Name('f', Store(), lineno=2048, col_offset=8), Name('t', Store(), lineno=2048, col_offset=12)], Num(0, lineno=2048, col_offset=16), lineno=2048, col_offset=8), Assign([Name('tests', Store(), lineno=2049, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=2049, col_offset=16), 'testfinder', Load(), lineno=2049, col_offset=16), 'find', Load(), lineno=2049, col_offset=16), [Name('object', Load(), lineno=2049, col_offset=37), Name('name', Load(), lineno=2049, col_offset=45)], [keyword('module', Name('module', Load(), lineno=2049, col_offset=58)), keyword('globs', Attribute(Name('self', Load(), lineno=2050, col_offset=43), 'globs', Load(), lineno=2050, col_offset=43))], None, None, lineno=2049, col_offset=16), lineno=2049, col_offset=8), For(Name('test', Store(), lineno=2051, col_offset=12), Name('tests', Load(), lineno=2051, col_offset=20), [Assign([Tuple([Name('f2', Store(), lineno=2052, col_offset=13), Name('t2', Store(), lineno=2052, col_offset=17)], Store(), lineno=2052, col_offset=13)], Call(Attribute(Attribute(Name('self', Load(), lineno=2052, col_offset=23), 'testrunner', Load(), lineno=2052, col_offset=23), 'run', Load(), lineno=2052, col_offset=23), [Name('test', Load(), lineno=2052, col_offset=43)], [], None, None, lineno=2052, col_offset=23), lineno=2052, col_offset=12), Assign([Tuple([Name('f', Store(), lineno=2053, col_offset=13), Name('t', Store(), lineno=2053, col_offset=15)], Store(), lineno=2053, col_offset=13)], Tuple([BinOp(Name('f', Load(), lineno=2053, col_offset=21), Add(), Name('f2', Load(), lineno=2053, col_offset=23), lineno=2053, col_offset=21), BinOp(Name('t', Load(), lineno=2053, col_offset=27), Add(), Name('t2', Load(), lineno=2053, col_offset=29), lineno=2053, col_offset=27)], Load(), lineno=2053, col_offset=21), lineno=2053, col_offset=12)], [], lineno=2051, col_offset=8), Return(Call(Name('TestResults', Load(), lineno=2054, col_offset=15), [Name('f', Load(), lineno=2054, col_offset=27), Name('t', Load(), lineno=2054, col_offset=29)], [], None, None, lineno=2054, col_offset=15), lineno=2054, col_offset=8)], [], lineno=2047, col_offset=4), FunctionDef('rundict', arguments([Name('self', Param(), lineno=2056, col_offset=16), Name('d', Param(), lineno=2056, col_offset=22), Name('name', Param(), lineno=2056, col_offset=25), Name('module', Param(), lineno=2056, col_offset=31)], None, None, [Name('None', Load(), lineno=2056, col_offset=38)]), [Import([alias('types', None)], lineno=2057, col_offset=8), Assign([Name('m', Store(), lineno=2058, col_offset=8)], Call(Attribute(Name('types', Load(), lineno=2058, col_offset=12), 'ModuleType', Load(), lineno=2058, col_offset=12), [Name('name', Load(), lineno=2058, col_offset=29)], [], None, None, lineno=2058, col_offset=12), lineno=2058, col_offset=8), Expr(Call(Attribute(Attribute(Name('m', Load(), lineno=2059, col_offset=8), '__dict__', Load(), lineno=2059, col_offset=8), 'update', Load(), lineno=2059, col_offset=8), [Name('d', Load(), lineno=2059, col_offset=26)], [], None, None, lineno=2059, col_offset=8), lineno=2059, col_offset=8), If(Compare(Name('module', Load(), lineno=2060, col_offset=11), [Is()], [Name('None', Load(), lineno=2060, col_offset=21)], lineno=2060, col_offset=11), [Assign([Name('module', Store(), lineno=2061, col_offset=12)], Name('False', Load(), lineno=2061, col_offset=21), lineno=2061, col_offset=12)], [], lineno=2060, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2062, col_offset=15), 'rundoc', Load(), lineno=2062, col_offset=15), [Name('m', Load(), lineno=2062, col_offset=27), Name('name', Load(), lineno=2062, col_offset=30), Name('module', Load(), lineno=2062, col_offset=36)], [], None, None, lineno=2062, col_offset=15), lineno=2062, col_offset=8)], [], lineno=2056, col_offset=4), FunctionDef('run__test__', arguments([Name('self', Param(), lineno=2064, col_offset=20), Name('d', Param(), lineno=2064, col_offset=26), Name('name', Param(), lineno=2064, col_offset=29)], None, None, []), [Import([alias('types', None)], lineno=2065, col_offset=8), Assign([Name('m', Store(), lineno=2066, col_offset=8)], Call(Attribute(Name('types', Load(), lineno=2066, col_offset=12), 'ModuleType', Load(), lineno=2066, col_offset=12), [Name('name', Load(), lineno=2066, col_offset=29)], [], None, None, lineno=2066, col_offset=12), lineno=2066, col_offset=8), Assign([Attribute(Name('m', Load(), lineno=2067, col_offset=8), '__test__', Store(), lineno=2067, col_offset=8)], Name('d', Load(), lineno=2067, col_offset=21), lineno=2067, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2068, col_offset=15), 'rundoc', Load(), lineno=2068, col_offset=15), [Name('m', Load(), lineno=2068, col_offset=27), Name('name', Load(), lineno=2068, col_offset=30)], [], None, None, lineno=2068, col_offset=15), lineno=2068, col_offset=8)], [], lineno=2064, col_offset=4), FunctionDef('summarize', arguments([Name('self', Param(), lineno=2070, col_offset=18), Name('verbose', Param(), lineno=2070, col_offset=24)], None, None, [Name('None', Load(), lineno=2070, col_offset=32)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2071, col_offset=15), 'testrunner', Load(), lineno=2071, col_offset=15), 'summarize', Load(), lineno=2071, col_offset=15), [Name('verbose', Load(), lineno=2071, col_offset=41)], [], None, None, lineno=2071, col_offset=15), lineno=2071, col_offset=8)], [], lineno=2070, col_offset=4), FunctionDef('merge', arguments([Name('self', Param(), lineno=2073, col_offset=14), Name('other', Param(), lineno=2073, col_offset=20)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2074, col_offset=8), 'testrunner', Load(), lineno=2074, col_offset=8), 'merge', Load(), lineno=2074, col_offset=8), [Attribute(Name('other', Load(), lineno=2074, col_offset=30), 'testrunner', Load(), lineno=2074, col_offset=30)], [], None, None, lineno=2074, col_offset=8), lineno=2074, col_offset=8)], [], lineno=2073, col_offset=4)], [], lineno=2017, col_offset=0), Assign([Name('_unittest_reportflags', Store(), lineno=2080, col_offset=0)], Num(0, lineno=2080, col_offset=24), lineno=2080, col_offset=0), FunctionDef('set_unittest_reportflags', arguments([Name('flags', Param(), lineno=2082, col_offset=29)], None, None, []), [Expr(Str("Sets the unittest option flags.\n\n    The old flag is returned so that a runner could restore the old\n    value if it wished to:\n\n      >>> import doctest\n      >>> old = doctest._unittest_reportflags\n      >>> doctest.set_unittest_reportflags(REPORT_NDIFF |\n      ...                          REPORT_ONLY_FIRST_FAILURE) == old\n      True\n\n      >>> doctest._unittest_reportflags == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n\n    Only reporting flags can be set:\n\n      >>> doctest.set_unittest_reportflags(ELLIPSIS)\n      Traceback (most recent call last):\n      ...\n      ValueError: ('Only reporting flags allowed', 8)\n\n      >>> doctest.set_unittest_reportflags(old) == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n    ", lineno=2108, col_offset=-1), lineno=2108, col_offset=-1), Global(['_unittest_reportflags'], lineno=2109, col_offset=4), If(Compare(BinOp(Name('flags', Load(), lineno=2111, col_offset=8), BitAnd(), Name('REPORTING_FLAGS', Load(), lineno=2111, col_offset=16), lineno=2111, col_offset=8), [NotEq()], [Name('flags', Load(), lineno=2111, col_offset=36)], lineno=2111, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=2112, col_offset=14), [Str('Only reporting flags allowed', lineno=2112, col_offset=25), Name('flags', Load(), lineno=2112, col_offset=57)], [], None, None, lineno=2112, col_offset=14), None, None, lineno=2112, col_offset=8)], [], lineno=2111, col_offset=4), Assign([Name('old', Store(), lineno=2113, col_offset=4)], Name('_unittest_reportflags', Load(), lineno=2113, col_offset=10), lineno=2113, col_offset=4), Assign([Name('_unittest_reportflags', Store(), lineno=2114, col_offset=4)], Name('flags', Load(), lineno=2114, col_offset=28), lineno=2114, col_offset=4), Return(Name('old', Load(), lineno=2115, col_offset=11), lineno=2115, col_offset=4)], [], lineno=2082, col_offset=0), ClassDef('DocTestCase', [Attribute(Name('unittest', Load(), lineno=2118, col_offset=18), 'TestCase', Load(), lineno=2118, col_offset=18)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=2120, col_offset=17), Name('test', Param(), lineno=2120, col_offset=23), Name('optionflags', Param(), lineno=2120, col_offset=29), Name('setUp', Param(), lineno=2120, col_offset=44), Name('tearDown', Param(), lineno=2120, col_offset=56), Name('checker', Param(), lineno=2121, col_offset=17)], None, None, [Num(0, lineno=2120, col_offset=41), Name('None', Load(), lineno=2120, col_offset=50), Name('None', Load(), lineno=2120, col_offset=65), Name('None', Load(), lineno=2121, col_offset=25)]), [Expr(Call(Attribute(Attribute(Name('unittest', Load(), lineno=2123, col_offset=8), 'TestCase', Load(), lineno=2123, col_offset=8), '__init__', Load(), lineno=2123, col_offset=8), [Name('self', Load(), lineno=2123, col_offset=35)], [], None, None, lineno=2123, col_offset=8), lineno=2123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2124, col_offset=8), '_dt_optionflags', Store(), lineno=2124, col_offset=8)], Name('optionflags', Load(), lineno=2124, col_offset=31), lineno=2124, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2125, col_offset=8), '_dt_checker', Store(), lineno=2125, col_offset=8)], Name('checker', Load(), lineno=2125, col_offset=27), lineno=2125, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2126, col_offset=8), '_dt_test', Store(), lineno=2126, col_offset=8)], Name('test', Load(), lineno=2126, col_offset=24), lineno=2126, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2127, col_offset=8), '_dt_setUp', Store(), lineno=2127, col_offset=8)], Name('setUp', Load(), lineno=2127, col_offset=25), lineno=2127, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2128, col_offset=8), '_dt_tearDown', Store(), lineno=2128, col_offset=8)], Name('tearDown', Load(), lineno=2128, col_offset=28), lineno=2128, col_offset=8)], [], lineno=2120, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=2130, col_offset=14)], None, None, []), [Assign([Name('test', Store(), lineno=2131, col_offset=8)], Attribute(Name('self', Load(), lineno=2131, col_offset=15), '_dt_test', Load(), lineno=2131, col_offset=15), lineno=2131, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2133, col_offset=11), '_dt_setUp', Load(), lineno=2133, col_offset=11), [IsNot()], [Name('None', Load(), lineno=2133, col_offset=33)], lineno=2133, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=2134, col_offset=12), '_dt_setUp', Load(), lineno=2134, col_offset=12), [Name('test', Load(), lineno=2134, col_offset=27)], [], None, None, lineno=2134, col_offset=12), lineno=2134, col_offset=12)], [], lineno=2133, col_offset=8)], [], lineno=2130, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=2136, col_offset=17)], None, None, []), [Assign([Name('test', Store(), lineno=2137, col_offset=8)], Attribute(Name('self', Load(), lineno=2137, col_offset=15), '_dt_test', Load(), lineno=2137, col_offset=15), lineno=2137, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2139, col_offset=11), '_dt_tearDown', Load(), lineno=2139, col_offset=11), [IsNot()], [Name('None', Load(), lineno=2139, col_offset=36)], lineno=2139, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=2140, col_offset=12), '_dt_tearDown', Load(), lineno=2140, col_offset=12), [Name('test', Load(), lineno=2140, col_offset=30)], [], None, None, lineno=2140, col_offset=12), lineno=2140, col_offset=12)], [], lineno=2139, col_offset=8), Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=2142, col_offset=8), 'globs', Load(), lineno=2142, col_offset=8), 'clear', Load(), lineno=2142, col_offset=8), [], [], None, None, lineno=2142, col_offset=8), lineno=2142, col_offset=8)], [], lineno=2136, col_offset=4), FunctionDef('runTest', arguments([Name('self', Param(), lineno=2144, col_offset=16)], None, None, []), [Assign([Name('test', Store(), lineno=2145, col_offset=8)], Attribute(Name('self', Load(), lineno=2145, col_offset=15), '_dt_test', Load(), lineno=2145, col_offset=15), lineno=2145, col_offset=8), Assign([Name('old', Store(), lineno=2146, col_offset=8)], Attribute(Name('sys', Load(), lineno=2146, col_offset=14), 'stdout', Load(), lineno=2146, col_offset=14), lineno=2146, col_offset=8), Assign([Name('new', Store(), lineno=2147, col_offset=8)], Call(Name('StringIO', Load(), lineno=2147, col_offset=14), [], [], None, None, lineno=2147, col_offset=14), lineno=2147, col_offset=8), Assign([Name('optionflags', Store(), lineno=2148, col_offset=8)], Attribute(Name('self', Load(), lineno=2148, col_offset=22), '_dt_optionflags', Load(), lineno=2148, col_offset=22), lineno=2148, col_offset=8), If(UnaryOp(Not(), BinOp(Name('optionflags', Load(), lineno=2150, col_offset=16), BitAnd(), Name('REPORTING_FLAGS', Load(), lineno=2150, col_offset=30), lineno=2150, col_offset=16), lineno=2150, col_offset=11), [AugAssign(Name('optionflags', Store(), lineno=2153, col_offset=12), BitOr(), Name('_unittest_reportflags', Load(), lineno=2153, col_offset=27), lineno=2153, col_offset=12)], [], lineno=2150, col_offset=8), Assign([Name('runner', Store(), lineno=2155, col_offset=8)], Call(Name('DocTestRunner', Load(), lineno=2155, col_offset=17), [], [keyword('optionflags', Name('optionflags', Load(), lineno=2155, col_offset=43)), keyword('checker', Attribute(Name('self', Load(), lineno=2156, col_offset=39), '_dt_checker', Load(), lineno=2156, col_offset=39)), keyword('verbose', Name('False', Load(), lineno=2156, col_offset=65))], None, None, lineno=2155, col_offset=17), lineno=2155, col_offset=8), TryFinally([Assign([Attribute(Name('runner', Load(), lineno=2159, col_offset=12), 'DIVIDER', Store(), lineno=2159, col_offset=12)], BinOp(Str('-', lineno=2159, col_offset=29), Mult(), Num(70, lineno=2159, col_offset=33), lineno=2159, col_offset=29), lineno=2159, col_offset=12), Assign([Tuple([Name('failures', Store(), lineno=2160, col_offset=12), Name('tries', Store(), lineno=2160, col_offset=22)], Store(), lineno=2160, col_offset=12)], Call(Attribute(Name('runner', Load(), lineno=2160, col_offset=30), 'run', Load(), lineno=2160, col_offset=30), [Name('test', Load(), lineno=2161, col_offset=16)], [keyword('out', Attribute(Name('new', Load(), lineno=2161, col_offset=26), 'write', Load(), lineno=2161, col_offset=26)), keyword('clear_globs', Name('False', Load(), lineno=2161, col_offset=49))], None, None, lineno=2160, col_offset=30), lineno=2160, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=2163, col_offset=12), 'stdout', Store(), lineno=2163, col_offset=12)], Name('old', Load(), lineno=2163, col_offset=25), lineno=2163, col_offset=12)], lineno=2158, col_offset=8), If(Name('failures', Load(), lineno=2165, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=2166, col_offset=18), 'failureException', Load(), lineno=2166, col_offset=18), [Call(Attribute(Name('self', Load(), lineno=2166, col_offset=40), 'format_failure', Load(), lineno=2166, col_offset=40), [Call(Attribute(Name('new', Load(), lineno=2166, col_offset=60), 'getvalue', Load(), lineno=2166, col_offset=60), [], [], None, None, lineno=2166, col_offset=60)], [], None, None, lineno=2166, col_offset=40)], [], None, None, lineno=2166, col_offset=18), None, None, lineno=2166, col_offset=12)], [], lineno=2165, col_offset=8)], [], lineno=2144, col_offset=4), FunctionDef('format_failure', arguments([Name('self', Param(), lineno=2168, col_offset=23), Name('err', Param(), lineno=2168, col_offset=29)], None, None, []), [Assign([Name('test', Store(), lineno=2169, col_offset=8)], Attribute(Name('self', Load(), lineno=2169, col_offset=15), '_dt_test', Load(), lineno=2169, col_offset=15), lineno=2169, col_offset=8), If(Compare(Attribute(Name('test', Load(), lineno=2170, col_offset=11), 'lineno', Load(), lineno=2170, col_offset=11), [Is()], [Name('None', Load(), lineno=2170, col_offset=26)], lineno=2170, col_offset=11), [Assign([Name('lineno', Store(), lineno=2171, col_offset=12)], Str('unknown line number', lineno=2171, col_offset=21), lineno=2171, col_offset=12)], [Assign([Name('lineno', Store(), lineno=2173, col_offset=12)], BinOp(Str('%s', lineno=2173, col_offset=21), Mod(), Attribute(Name('test', Load(), lineno=2173, col_offset=28), 'lineno', Load(), lineno=2173, col_offset=28), lineno=2173, col_offset=21), lineno=2173, col_offset=12)], lineno=2170, col_offset=8), Assign([Name('lname', Store(), lineno=2174, col_offset=8)], Call(Attribute(Str('.', lineno=2174, col_offset=16), 'join', Load(), lineno=2174, col_offset=16), [Subscript(Call(Attribute(Attribute(Name('test', Load(), lineno=2174, col_offset=25), 'name', Load(), lineno=2174, col_offset=25), 'split', Load(), lineno=2174, col_offset=25), [Str('.', lineno=2174, col_offset=41)], [], None, None, lineno=2174, col_offset=25), Slice(Num(-1, lineno=2174, col_offset=47), None, None), Load(), lineno=2174, col_offset=25)], [], None, None, lineno=2174, col_offset=16), lineno=2174, col_offset=8), Return(BinOp(Str('Failed doctest test for %s\n  File "%s", line %s, in %s\n\n%s', lineno=2175, col_offset=16), Mod(), Tuple([Attribute(Name('test', Load(), lineno=2177, col_offset=19), 'name', Load(), lineno=2177, col_offset=19), Attribute(Name('test', Load(), lineno=2177, col_offset=30), 'filename', Load(), lineno=2177, col_offset=30), Name('lineno', Load(), lineno=2177, col_offset=45), Name('lname', Load(), lineno=2177, col_offset=53), Name('err', Load(), lineno=2177, col_offset=60)], Load(), lineno=2177, col_offset=19), lineno=2175, col_offset=16), lineno=2175, col_offset=8)], [], lineno=2168, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=2180, col_offset=14)], None, None, []), [Expr(Str("Run the test case without results and without catching exceptions\n\n           The unit test framework includes a debug method on test cases\n           and test suites to support post-mortem debugging.  The test code\n           is run in such a way that errors are not caught.  This way a\n           caller can catch the errors and initiate post-mortem debugging.\n\n           The DocTestCase provides a debug method that raises\n           UnexpectedException errors if there is an unexepcted\n           exception:\n\n             >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n             ...                {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n             >>> try:\n             ...     case.debug()\n             ... except UnexpectedException, failure:\n             ...     pass\n\n           The UnexpectedException contains the test, the example, and\n           the original exception:\n\n             >>> failure.test is test\n             True\n\n             >>> failure.example.want\n             '42\\n'\n\n             >>> exc_info = failure.exc_info\n             >>> raise exc_info[0], exc_info[1], exc_info[2]\n             Traceback (most recent call last):\n             ...\n             KeyError\n\n           If the output doesn't match, then a DocTestFailure is raised:\n\n             >>> test = DocTestParser().get_doctest('''\n             ...      >>> x = 1\n             ...      >>> x\n             ...      2\n             ...      ''', {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n\n             >>> try:\n             ...    case.debug()\n             ... except DocTestFailure, failure:\n             ...    pass\n\n           DocTestFailure objects provide access to the test:\n\n             >>> failure.test is test\n             True\n\n           As well as to the example:\n\n             >>> failure.example.want\n             '2\\n'\n\n           and the actual output:\n\n             >>> failure.got\n             '1\\n'\n\n           ", lineno=2244, col_offset=-1), lineno=2244, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2246, col_offset=8), 'setUp', Load(), lineno=2246, col_offset=8), [], [], None, None, lineno=2246, col_offset=8), lineno=2246, col_offset=8), Assign([Name('runner', Store(), lineno=2247, col_offset=8)], Call(Name('DebugRunner', Load(), lineno=2247, col_offset=17), [], [keyword('optionflags', Attribute(Name('self', Load(), lineno=2247, col_offset=41), '_dt_optionflags', Load(), lineno=2247, col_offset=41)), keyword('checker', Attribute(Name('self', Load(), lineno=2248, col_offset=37), '_dt_checker', Load(), lineno=2248, col_offset=37)), keyword('verbose', Name('False', Load(), lineno=2248, col_offset=63))], None, None, lineno=2247, col_offset=17), lineno=2247, col_offset=8), Expr(Call(Attribute(Name('runner', Load(), lineno=2249, col_offset=8), 'run', Load(), lineno=2249, col_offset=8), [Attribute(Name('self', Load(), lineno=2249, col_offset=19), '_dt_test', Load(), lineno=2249, col_offset=19)], [keyword('clear_globs', Name('False', Load(), lineno=2249, col_offset=46))], None, None, lineno=2249, col_offset=8), lineno=2249, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2250, col_offset=8), 'tearDown', Load(), lineno=2250, col_offset=8), [], [], None, None, lineno=2250, col_offset=8), lineno=2250, col_offset=8)], [], lineno=2180, col_offset=4), FunctionDef('id', arguments([Name('self', Param(), lineno=2252, col_offset=11)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=2253, col_offset=15), '_dt_test', Load(), lineno=2253, col_offset=15), 'name', Load(), lineno=2253, col_offset=15), lineno=2253, col_offset=8)], [], lineno=2252, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=2255, col_offset=17)], None, None, []), [Assign([Name('name', Store(), lineno=2256, col_offset=8)], Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=2256, col_offset=15), '_dt_test', Load(), lineno=2256, col_offset=15), 'name', Load(), lineno=2256, col_offset=15), 'split', Load(), lineno=2256, col_offset=15), [Str('.', lineno=2256, col_offset=40)], [], None, None, lineno=2256, col_offset=15), lineno=2256, col_offset=8), Return(BinOp(Str('%s (%s)', lineno=2257, col_offset=15), Mod(), Tuple([Subscript(Name('name', Load(), lineno=2257, col_offset=28), Index(Num(-1, lineno=2257, col_offset=34)), Load(), lineno=2257, col_offset=28), Call(Attribute(Str('.', lineno=2257, col_offset=38), 'join', Load(), lineno=2257, col_offset=38), [Subscript(Name('name', Load(), lineno=2257, col_offset=47), Slice(None, Num(-1, lineno=2257, col_offset=54), None), Load(), lineno=2257, col_offset=47)], [], None, None, lineno=2257, col_offset=38)], Load(), lineno=2257, col_offset=28), lineno=2257, col_offset=15), lineno=2257, col_offset=8)], [], lineno=2255, col_offset=4), Assign([Name('__str__', Store(), lineno=2259, col_offset=4)], Name('__repr__', Load(), lineno=2259, col_offset=14), lineno=2259, col_offset=4), FunctionDef('shortDescription', arguments([Name('self', Param(), lineno=2261, col_offset=25)], None, None, []), [Return(BinOp(Str('Doctest: ', lineno=2262, col_offset=15), Add(), Attribute(Attribute(Name('self', Load(), lineno=2262, col_offset=29), '_dt_test', Load(), lineno=2262, col_offset=29), 'name', Load(), lineno=2262, col_offset=29), lineno=2262, col_offset=15), lineno=2262, col_offset=8)], [], lineno=2261, col_offset=4)], [], lineno=2118, col_offset=0), ClassDef('SkipDocTestCase', [Name('DocTestCase', Load(), lineno=2264, col_offset=22)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=2265, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('DocTestCase', Load(), lineno=2266, col_offset=8), '__init__', Load(), lineno=2266, col_offset=8), [Name('self', Load(), lineno=2266, col_offset=29), Name('None', Load(), lineno=2266, col_offset=35)], [], None, None, lineno=2266, col_offset=8), lineno=2266, col_offset=8)], [], lineno=2265, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=2268, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=2269, col_offset=8), 'skipTest', Load(), lineno=2269, col_offset=8), [Str('DocTestSuite will not work with -O2 and above', lineno=2269, col_offset=22)], [], None, None, lineno=2269, col_offset=8), lineno=2269, col_offset=8)], [], lineno=2268, col_offset=4), FunctionDef('test_skip', arguments([Name('self', Param(), lineno=2271, col_offset=18)], None, None, []), [Pass( lineno=2272, col_offset=8)], [], lineno=2271, col_offset=4), FunctionDef('shortDescription', arguments([Name('self', Param(), lineno=2274, col_offset=25)], None, None, []), [Return(BinOp(Str('Skipping tests from %s', lineno=2275, col_offset=15), Mod(), Attribute(Name('module', Load(), lineno=2275, col_offset=42), '__name__', Load(), lineno=2275, col_offset=42), lineno=2275, col_offset=15), lineno=2275, col_offset=8)], [], lineno=2274, col_offset=4)], [], lineno=2264, col_offset=0), FunctionDef('DocTestSuite', arguments([Name('module', Param(), lineno=2277, col_offset=17), Name('globs', Param(), lineno=2277, col_offset=30), Name('extraglobs', Param(), lineno=2277, col_offset=42), Name('test_finder', Param(), lineno=2277, col_offset=59)], None, 'options', [Name('None', Load(), lineno=2277, col_offset=24), Name('None', Load(), lineno=2277, col_offset=36), Name('None', Load(), lineno=2277, col_offset=53), Name('None', Load(), lineno=2277, col_offset=71)]), [Expr(Str('\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    ', lineno=2312, col_offset=-1), lineno=2312, col_offset=-1), If(Compare(Name('test_finder', Load(), lineno=2314, col_offset=7), [Is()], [Name('None', Load(), lineno=2314, col_offset=22)], lineno=2314, col_offset=7), [Assign([Name('test_finder', Store(), lineno=2315, col_offset=8)], Call(Name('DocTestFinder', Load(), lineno=2315, col_offset=22), [], [], None, None, lineno=2315, col_offset=22), lineno=2315, col_offset=8)], [], lineno=2314, col_offset=4), Assign([Name('module', Store(), lineno=2317, col_offset=4)], Call(Name('_normalize_module', Load(), lineno=2317, col_offset=13), [Name('module', Load(), lineno=2317, col_offset=31)], [], None, None, lineno=2317, col_offset=13), lineno=2317, col_offset=4), Assign([Name('tests', Store(), lineno=2318, col_offset=4)], Call(Attribute(Name('test_finder', Load(), lineno=2318, col_offset=12), 'find', Load(), lineno=2318, col_offset=12), [Name('module', Load(), lineno=2318, col_offset=29)], [keyword('globs', Name('globs', Load(), lineno=2318, col_offset=43)), keyword('extraglobs', Name('extraglobs', Load(), lineno=2318, col_offset=61))], None, None, lineno=2318, col_offset=12), lineno=2318, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Name('tests', Load(), lineno=2320, col_offset=11), lineno=2320, col_offset=7), Compare(Attribute(Attribute(Name('sys', Load(), lineno=2320, col_offset=21), 'flags', Load(), lineno=2320, col_offset=21), 'optimize', Load(), lineno=2320, col_offset=21), [GtE()], [Num(2, lineno=2320, col_offset=42)], lineno=2320, col_offset=21)], lineno=2320, col_offset=7), [Assign([Name('suite', Store(), lineno=2322, col_offset=8)], Call(Attribute(Name('unittest', Load(), lineno=2322, col_offset=16), 'TestSuite', Load(), lineno=2322, col_offset=16), [], [], None, None, lineno=2322, col_offset=16), lineno=2322, col_offset=8), Expr(Call(Attribute(Name('suite', Load(), lineno=2323, col_offset=8), 'addTest', Load(), lineno=2323, col_offset=8), [Call(Name('SkipDocTestCase', Load(), lineno=2323, col_offset=22), [], [], None, None, lineno=2323, col_offset=22)], [], None, None, lineno=2323, col_offset=8), lineno=2323, col_offset=8), Return(Name('suite', Load(), lineno=2324, col_offset=15), lineno=2324, col_offset=8)], [If(UnaryOp(Not(), Name('tests', Load(), lineno=2325, col_offset=13), lineno=2325, col_offset=9), [Raise(Call(Name('ValueError', Load(), lineno=2328, col_offset=14), [Name('module', Load(), lineno=2328, col_offset=25), Str('has no tests', lineno=2328, col_offset=33)], [], None, None, lineno=2328, col_offset=14), None, None, lineno=2328, col_offset=8)], [], lineno=2325, col_offset=9)], lineno=2320, col_offset=4), Expr(Call(Attribute(Name('tests', Load(), lineno=2330, col_offset=4), 'sort', Load(), lineno=2330, col_offset=4), [], [], None, None, lineno=2330, col_offset=4), lineno=2330, col_offset=4), Assign([Name('suite', Store(), lineno=2331, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=2331, col_offset=12), 'TestSuite', Load(), lineno=2331, col_offset=12), [], [], None, None, lineno=2331, col_offset=12), lineno=2331, col_offset=4), For(Name('test', Store(), lineno=2333, col_offset=8), Name('tests', Load(), lineno=2333, col_offset=16), [If(Compare(Call(Name('len', Load(), lineno=2334, col_offset=11), [Attribute(Name('test', Load(), lineno=2334, col_offset=15), 'examples', Load(), lineno=2334, col_offset=15)], [], None, None, lineno=2334, col_offset=11), [Eq()], [Num(0, lineno=2334, col_offset=33)], lineno=2334, col_offset=11), [Continue( lineno=2335, col_offset=12)], [], lineno=2334, col_offset=8), If(UnaryOp(Not(), Attribute(Name('test', Load(), lineno=2336, col_offset=15), 'filename', Load(), lineno=2336, col_offset=15), lineno=2336, col_offset=11), [Assign([Name('filename', Store(), lineno=2337, col_offset=12)], Attribute(Name('module', Load(), lineno=2337, col_offset=23), '__file__', Load(), lineno=2337, col_offset=23), lineno=2337, col_offset=12), If(Compare(Subscript(Name('filename', Load(), lineno=2338, col_offset=15), Slice(Num(-4, lineno=2338, col_offset=25), None, None), Load(), lineno=2338, col_offset=15), [In()], [Tuple([Str('.pyc', lineno=2338, col_offset=33), Str('.pyo', lineno=2338, col_offset=41)], Load(), lineno=2338, col_offset=33)], lineno=2338, col_offset=15), [Assign([Name('filename', Store(), lineno=2339, col_offset=16)], Subscript(Name('filename', Load(), lineno=2339, col_offset=27), Slice(None, Num(-1, lineno=2339, col_offset=38), None), Load(), lineno=2339, col_offset=27), lineno=2339, col_offset=16)], [], lineno=2338, col_offset=12), Assign([Attribute(Name('test', Load(), lineno=2340, col_offset=12), 'filename', Store(), lineno=2340, col_offset=12)], Name('filename', Load(), lineno=2340, col_offset=28), lineno=2340, col_offset=12)], [], lineno=2336, col_offset=8), Expr(Call(Attribute(Name('suite', Load(), lineno=2341, col_offset=8), 'addTest', Load(), lineno=2341, col_offset=8), [Call(Name('DocTestCase', Load(), lineno=2341, col_offset=22), [Name('test', Load(), lineno=2341, col_offset=34)], [], None, Name('options', Load(), lineno=2341, col_offset=42), lineno=2341, col_offset=22)], [], None, None, lineno=2341, col_offset=8), lineno=2341, col_offset=8)], [], lineno=2333, col_offset=4), Return(Name('suite', Load(), lineno=2343, col_offset=11), lineno=2343, col_offset=4)], [], lineno=2277, col_offset=0), ClassDef('DocFileCase', [Name('DocTestCase', Load(), lineno=2345, col_offset=18)], [FunctionDef('id', arguments([Name('self', Param(), lineno=2347, col_offset=11)], None, None, []), [Return(Call(Attribute(Str('_', lineno=2348, col_offset=15), 'join', Load(), lineno=2348, col_offset=15), [Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=2348, col_offset=24), '_dt_test', Load(), lineno=2348, col_offset=24), 'name', Load(), lineno=2348, col_offset=24), 'split', Load(), lineno=2348, col_offset=24), [Str('.', lineno=2348, col_offset=49)], [], None, None, lineno=2348, col_offset=24)], [], None, None, lineno=2348, col_offset=15), lineno=2348, col_offset=8)], [], lineno=2347, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=2350, col_offset=17)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=2351, col_offset=15), '_dt_test', Load(), lineno=2351, col_offset=15), 'filename', Load(), lineno=2351, col_offset=15), lineno=2351, col_offset=8)], [], lineno=2350, col_offset=4), Assign([Name('__str__', Store(), lineno=2352, col_offset=4)], Name('__repr__', Load(), lineno=2352, col_offset=14), lineno=2352, col_offset=4), FunctionDef('format_failure', arguments([Name('self', Param(), lineno=2354, col_offset=23), Name('err', Param(), lineno=2354, col_offset=29)], None, None, []), [Return(BinOp(Str('Failed doctest test for %s\n  File "%s", line 0\n\n%s', lineno=2355, col_offset=16), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=2356, col_offset=19), '_dt_test', Load(), lineno=2356, col_offset=19), 'name', Load(), lineno=2356, col_offset=19), Attribute(Attribute(Name('self', Load(), lineno=2356, col_offset=39), '_dt_test', Load(), lineno=2356, col_offset=39), 'filename', Load(), lineno=2356, col_offset=39), Name('err', Load(), lineno=2356, col_offset=63)], Load(), lineno=2356, col_offset=19), lineno=2355, col_offset=16), lineno=2355, col_offset=8)], [], lineno=2354, col_offset=4)], [], lineno=2345, col_offset=0), FunctionDef('DocFileTest', arguments([Name('path', Param(), lineno=2359, col_offset=16), Name('module_relative', Param(), lineno=2359, col_offset=22), Name('package', Param(), lineno=2359, col_offset=44), Name('globs', Param(), lineno=2360, col_offset=16), Name('parser', Param(), lineno=2360, col_offset=28), Name('encoding', Param(), lineno=2361, col_offset=16)], None, 'options', [Name('True', Load(), lineno=2359, col_offset=38), Name('None', Load(), lineno=2359, col_offset=52), Name('None', Load(), lineno=2360, col_offset=22), Call(Name('DocTestParser', Load(), lineno=2360, col_offset=35), [], [], None, None, lineno=2360, col_offset=35), Name('None', Load(), lineno=2361, col_offset=25)]), [If(Compare(Name('globs', Load(), lineno=2362, col_offset=7), [Is()], [Name('None', Load(), lineno=2362, col_offset=16)], lineno=2362, col_offset=7), [Assign([Name('globs', Store(), lineno=2363, col_offset=8)], Dict([], [], lineno=2363, col_offset=16), lineno=2363, col_offset=8)], [Assign([Name('globs', Store(), lineno=2365, col_offset=8)], Call(Attribute(Name('globs', Load(), lineno=2365, col_offset=16), 'copy', Load(), lineno=2365, col_offset=16), [], [], None, None, lineno=2365, col_offset=16), lineno=2365, col_offset=8)], lineno=2362, col_offset=4), If(BoolOp(And(), [Name('package', Load(), lineno=2367, col_offset=7), UnaryOp(Not(), Name('module_relative', Load(), lineno=2367, col_offset=23), lineno=2367, col_offset=19)], lineno=2367, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=2368, col_offset=14), [Str('Package may only be specified for module-relative paths.', lineno=2368, col_offset=25)], [], None, None, lineno=2368, col_offset=14), None, None, lineno=2368, col_offset=8)], [], lineno=2367, col_offset=4), Assign([Tuple([Name('doc', Store(), lineno=2372, col_offset=4), Name('path', Store(), lineno=2372, col_offset=9)], Store(), lineno=2372, col_offset=4)], Call(Name('_load_testfile', Load(), lineno=2372, col_offset=16), [Name('path', Load(), lineno=2372, col_offset=31), Name('package', Load(), lineno=2372, col_offset=37), Name('module_relative', Load(), lineno=2372, col_offset=46)], [], None, None, lineno=2372, col_offset=16), lineno=2372, col_offset=4), If(Compare(Str('__file__', lineno=2374, col_offset=7), [NotIn()], [Name('globs', Load(), lineno=2374, col_offset=25)], lineno=2374, col_offset=7), [Assign([Subscript(Name('globs', Load(), lineno=2375, col_offset=8), Index(Str('__file__', lineno=2375, col_offset=14)), Store(), lineno=2375, col_offset=8)], Name('path', Load(), lineno=2375, col_offset=28), lineno=2375, col_offset=8)], [], lineno=2374, col_offset=4), Assign([Name('name', Store(), lineno=2378, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=2378, col_offset=11), 'path', Load(), lineno=2378, col_offset=11), 'basename', Load(), lineno=2378, col_offset=11), [Name('path', Load(), lineno=2378, col_offset=28)], [], None, None, lineno=2378, col_offset=11), lineno=2378, col_offset=4), If(Compare(Name('encoding', Load(), lineno=2381, col_offset=7), [IsNot()], [Name('None', Load(), lineno=2381, col_offset=23)], lineno=2381, col_offset=7), [Assign([Name('doc', Store(), lineno=2382, col_offset=8)], Call(Attribute(Name('doc', Load(), lineno=2382, col_offset=14), 'decode', Load(), lineno=2382, col_offset=14), [Name('encoding', Load(), lineno=2382, col_offset=25)], [], None, None, lineno=2382, col_offset=14), lineno=2382, col_offset=8)], [], lineno=2381, col_offset=4), Assign([Name('test', Store(), lineno=2385, col_offset=4)], Call(Attribute(Name('parser', Load(), lineno=2385, col_offset=11), 'get_doctest', Load(), lineno=2385, col_offset=11), [Name('doc', Load(), lineno=2385, col_offset=30), Name('globs', Load(), lineno=2385, col_offset=35), Name('name', Load(), lineno=2385, col_offset=42), Name('path', Load(), lineno=2385, col_offset=48), Num(0, lineno=2385, col_offset=54)], [], None, None, lineno=2385, col_offset=11), lineno=2385, col_offset=4), Return(Call(Name('DocFileCase', Load(), lineno=2386, col_offset=11), [Name('test', Load(), lineno=2386, col_offset=23)], [], None, Name('options', Load(), lineno=2386, col_offset=31), lineno=2386, col_offset=11), lineno=2386, col_offset=4)], [], lineno=2359, col_offset=0), FunctionDef('DocFileSuite', arguments([], 'paths', 'kw', []), [Expr(Str('A unittest suite for one or more doctest files.\n\n    The path to each doctest file is given as a string; the\n    interpretation of that string depends on the keyword argument\n    "module_relative".\n\n    A number of options may be provided as keyword arguments:\n\n    module_relative\n      If "module_relative" is True, then the given file paths are\n      interpreted as os-independent module-relative paths.  By\n      default, these paths are relative to the calling module\'s\n      directory; but if the "package" argument is specified, then\n      they are relative to that package.  To ensure os-independence,\n      "filename" should use "/" characters to separate path\n      segments, and may not be an absolute path (i.e., it may not\n      begin with "/").\n\n      If "module_relative" is False, then the given file paths are\n      interpreted as os-specific paths.  These paths may be absolute\n      or relative (to the current working directory).\n\n    package\n      A Python package or the name of a Python package whose directory\n      should be used as the base directory for module relative paths.\n      If "package" is not specified, then the calling module\'s\n      directory is used as the base directory for module relative\n      filenames.  It is an error to specify "package" if\n      "module_relative" is False.\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n      A set of doctest option flags expressed as an integer.\n\n    parser\n      A DocTestParser (or subclass) that should be used to extract\n      tests from the files.\n\n    encoding\n      An encoding that will be used to convert the files to unicode.\n    ', lineno=2443, col_offset=-1), lineno=2443, col_offset=-1), Assign([Name('suite', Store(), lineno=2444, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=2444, col_offset=12), 'TestSuite', Load(), lineno=2444, col_offset=12), [], [], None, None, lineno=2444, col_offset=12), lineno=2444, col_offset=4), If(Call(Attribute(Name('kw', Load(), lineno=2449, col_offset=7), 'get', Load(), lineno=2449, col_offset=7), [Str('module_relative', lineno=2449, col_offset=14), Name('True', Load(), lineno=2449, col_offset=33)], [], None, None, lineno=2449, col_offset=7), [Assign([Subscript(Name('kw', Load(), lineno=2450, col_offset=8), Index(Str('package', lineno=2450, col_offset=11)), Store(), lineno=2450, col_offset=8)], Call(Name('_normalize_module', Load(), lineno=2450, col_offset=24), [Call(Attribute(Name('kw', Load(), lineno=2450, col_offset=42), 'get', Load(), lineno=2450, col_offset=42), [Str('package', lineno=2450, col_offset=49)], [], None, None, lineno=2450, col_offset=42)], [], None, None, lineno=2450, col_offset=24), lineno=2450, col_offset=8)], [], lineno=2449, col_offset=4), For(Name('path', Store(), lineno=2452, col_offset=8), Name('paths', Load(), lineno=2452, col_offset=16), [Expr(Call(Attribute(Name('suite', Load(), lineno=2453, col_offset=8), 'addTest', Load(), lineno=2453, col_offset=8), [Call(Name('DocFileTest', Load(), lineno=2453, col_offset=22), [Name('path', Load(), lineno=2453, col_offset=34)], [], None, Name('kw', Load(), lineno=2453, col_offset=42), lineno=2453, col_offset=22)], [], None, None, lineno=2453, col_offset=8), lineno=2453, col_offset=8)], [], lineno=2452, col_offset=4), Return(Name('suite', Load(), lineno=2455, col_offset=11), lineno=2455, col_offset=4)], [], lineno=2388, col_offset=0), FunctionDef('script_from_examples', arguments([Name('s', Param(), lineno=2461, col_offset=25)], None, None, []), [Expr(Str("Extract script from text with examples.\n\n       Converts text with examples to a Python script.  Example input is\n       converted to regular code.  Example output and all other words\n       are converted to comments:\n\n       >>> text = '''\n       ...       Here are examples of simple math.\n       ...\n       ...           Python has super accurate integer addition\n       ...\n       ...           >>> 2 + 2\n       ...           5\n       ...\n       ...           And very friendly error messages:\n       ...\n       ...           >>> 1/0\n       ...           To Infinity\n       ...           And\n       ...           Beyond\n       ...\n       ...           You can use logic if you want:\n       ...\n       ...           >>> if 0:\n       ...           ...    blah\n       ...           ...    blah\n       ...           ...\n       ...\n       ...           Ho hum\n       ...           '''\n\n       >>> print script_from_examples(text)\n       # Here are examples of simple math.\n       #\n       #     Python has super accurate integer addition\n       #\n       2 + 2\n       # Expected:\n       ## 5\n       #\n       #     And very friendly error messages:\n       #\n       1/0\n       # Expected:\n       ## To Infinity\n       ## And\n       ## Beyond\n       #\n       #     You can use logic if you want:\n       #\n       if 0:\n          blah\n          blah\n       #\n       #     Ho hum\n       <BLANKLINE>\n       ", lineno=2518, col_offset=-1), lineno=2518, col_offset=-1), Assign([Name('output', Store(), lineno=2519, col_offset=4)], List([], Load(), lineno=2519, col_offset=13), lineno=2519, col_offset=4), For(Name('piece', Store(), lineno=2520, col_offset=8), Call(Attribute(Call(Name('DocTestParser', Load(), lineno=2520, col_offset=17), [], [], None, None, lineno=2520, col_offset=17), 'parse', Load(), lineno=2520, col_offset=17), [Name('s', Load(), lineno=2520, col_offset=39)], [], None, None, lineno=2520, col_offset=17), [If(Call(Name('isinstance', Load(), lineno=2521, col_offset=11), [Name('piece', Load(), lineno=2521, col_offset=22), Name('Example', Load(), lineno=2521, col_offset=29)], [], None, None, lineno=2521, col_offset=11), [Expr(Call(Attribute(Name('output', Load(), lineno=2523, col_offset=12), 'append', Load(), lineno=2523, col_offset=12), [Subscript(Attribute(Name('piece', Load(), lineno=2523, col_offset=26), 'source', Load(), lineno=2523, col_offset=26), Slice(None, Num(-1, lineno=2523, col_offset=41), None), Load(), lineno=2523, col_offset=26)], [], None, None, lineno=2523, col_offset=12), lineno=2523, col_offset=12), Assign([Name('want', Store(), lineno=2525, col_offset=12)], Attribute(Name('piece', Load(), lineno=2525, col_offset=19), 'want', Load(), lineno=2525, col_offset=19), lineno=2525, col_offset=12), If(Name('want', Load(), lineno=2526, col_offset=15), [Expr(Call(Attribute(Name('output', Load(), lineno=2527, col_offset=16), 'append', Load(), lineno=2527, col_offset=16), [Str('# Expected:', lineno=2527, col_offset=30)], [], None, None, lineno=2527, col_offset=16), lineno=2527, col_offset=16), AugAssign(Name('output', Store(), lineno=2528, col_offset=16), Add(), ListComp(BinOp(Str('## ', lineno=2528, col_offset=27), Add(), Name('l', Load(), lineno=2528, col_offset=33), lineno=2528, col_offset=27), [comprehension(Name('l', Store(), lineno=2528, col_offset=39), Subscript(Call(Attribute(Name('want', Load(), lineno=2528, col_offset=44), 'split', Load(), lineno=2528, col_offset=44), [Str('\n', lineno=2528, col_offset=55)], [], None, None, lineno=2528, col_offset=44), Slice(None, Num(-1, lineno=2528, col_offset=63), None), Load(), lineno=2528, col_offset=44), [])], lineno=2528, col_offset=27), lineno=2528, col_offset=16)], [], lineno=2526, col_offset=12)], [AugAssign(Name('output', Store(), lineno=2531, col_offset=12), Add(), ListComp(Call(Name('_comment_line', Load(), lineno=2531, col_offset=23), [Name('l', Load(), lineno=2531, col_offset=37)], [], None, None, lineno=2531, col_offset=23), [comprehension(Name('l', Store(), lineno=2532, col_offset=27), Subscript(Call(Attribute(Name('piece', Load(), lineno=2532, col_offset=32), 'split', Load(), lineno=2532, col_offset=32), [Str('\n', lineno=2532, col_offset=44)], [], None, None, lineno=2532, col_offset=32), Slice(None, Num(-1, lineno=2532, col_offset=52), None), Load(), lineno=2532, col_offset=32), [])], lineno=2531, col_offset=23), lineno=2531, col_offset=12)], lineno=2521, col_offset=8)], [], lineno=2520, col_offset=4), While(BoolOp(And(), [Name('output', Load(), lineno=2535, col_offset=10), Compare(Subscript(Name('output', Load(), lineno=2535, col_offset=21), Index(Num(-1, lineno=2535, col_offset=29)), Load(), lineno=2535, col_offset=21), [Eq()], [Str('#', lineno=2535, col_offset=35)], lineno=2535, col_offset=21)], lineno=2535, col_offset=10), [Expr(Call(Attribute(Name('output', Load(), lineno=2536, col_offset=8), 'pop', Load(), lineno=2536, col_offset=8), [], [], None, None, lineno=2536, col_offset=8), lineno=2536, col_offset=8)], [], lineno=2535, col_offset=4), While(BoolOp(And(), [Name('output', Load(), lineno=2537, col_offset=10), Compare(Subscript(Name('output', Load(), lineno=2537, col_offset=21), Index(Num(0, lineno=2537, col_offset=28)), Load(), lineno=2537, col_offset=21), [Eq()], [Str('#', lineno=2537, col_offset=34)], lineno=2537, col_offset=21)], lineno=2537, col_offset=10), [Expr(Call(Attribute(Name('output', Load(), lineno=2538, col_offset=8), 'pop', Load(), lineno=2538, col_offset=8), [Num(0, lineno=2538, col_offset=19)], [], None, None, lineno=2538, col_offset=8), lineno=2538, col_offset=8)], [], lineno=2537, col_offset=4), Return(BinOp(Call(Attribute(Str('\n', lineno=2541, col_offset=11), 'join', Load(), lineno=2541, col_offset=11), [Name('output', Load(), lineno=2541, col_offset=21)], [], None, None, lineno=2541, col_offset=11), Add(), Str('\n', lineno=2541, col_offset=31), lineno=2541, col_offset=11), lineno=2541, col_offset=4)], [], lineno=2461, col_offset=0), FunctionDef('testsource', arguments([Name('module', Param(), lineno=2543, col_offset=15), Name('name', Param(), lineno=2543, col_offset=23)], None, None, []), [Expr(Str('Extract the test sources from a doctest docstring as a script.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the doc string with tests to be debugged.\n    ', lineno=2549, col_offset=-1), lineno=2549, col_offset=-1), Assign([Name('module', Store(), lineno=2550, col_offset=4)], Call(Name('_normalize_module', Load(), lineno=2550, col_offset=13), [Name('module', Load(), lineno=2550, col_offset=31)], [], None, None, lineno=2550, col_offset=13), lineno=2550, col_offset=4), Assign([Name('tests', Store(), lineno=2551, col_offset=4)], Call(Attribute(Call(Name('DocTestFinder', Load(), lineno=2551, col_offset=12), [], [], None, None, lineno=2551, col_offset=12), 'find', Load(), lineno=2551, col_offset=12), [Name('module', Load(), lineno=2551, col_offset=33)], [], None, None, lineno=2551, col_offset=12), lineno=2551, col_offset=4), Assign([Name('test', Store(), lineno=2552, col_offset=4)], ListComp(Name('t', Load(), lineno=2552, col_offset=12), [comprehension(Name('t', Store(), lineno=2552, col_offset=18), Name('tests', Load(), lineno=2552, col_offset=23), [Compare(Attribute(Name('t', Load(), lineno=2552, col_offset=32), 'name', Load(), lineno=2552, col_offset=32), [Eq()], [Name('name', Load(), lineno=2552, col_offset=42)], lineno=2552, col_offset=32)])], lineno=2552, col_offset=12), lineno=2552, col_offset=4), If(UnaryOp(Not(), Name('test', Load(), lineno=2553, col_offset=11), lineno=2553, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=2554, col_offset=14), [Name('name', Load(), lineno=2554, col_offset=25), Str('not found in tests', lineno=2554, col_offset=31)], [], None, None, lineno=2554, col_offset=14), None, None, lineno=2554, col_offset=8)], [], lineno=2553, col_offset=4), Assign([Name('test', Store(), lineno=2555, col_offset=4)], Subscript(Name('test', Load(), lineno=2555, col_offset=11), Index(Num(0, lineno=2555, col_offset=16)), Load(), lineno=2555, col_offset=11), lineno=2555, col_offset=4), Assign([Name('testsrc', Store(), lineno=2556, col_offset=4)], Call(Name('script_from_examples', Load(), lineno=2556, col_offset=14), [Attribute(Name('test', Load(), lineno=2556, col_offset=35), 'docstring', Load(), lineno=2556, col_offset=35)], [], None, None, lineno=2556, col_offset=14), lineno=2556, col_offset=4), Return(Name('testsrc', Load(), lineno=2557, col_offset=11), lineno=2557, col_offset=4)], [], lineno=2543, col_offset=0), FunctionDef('debug_src', arguments([Name('src', Param(), lineno=2559, col_offset=14), Name('pm', Param(), lineno=2559, col_offset=19), Name('globs', Param(), lineno=2559, col_offset=29)], None, None, [Name('False', Load(), lineno=2559, col_offset=22), Name('None', Load(), lineno=2559, col_offset=35)]), [Expr(Str("Debug a single doctest docstring, in argument `src`'", lineno=2560, col_offset=4), lineno=2560, col_offset=4), Assign([Name('testsrc', Store(), lineno=2561, col_offset=4)], Call(Name('script_from_examples', Load(), lineno=2561, col_offset=14), [Name('src', Load(), lineno=2561, col_offset=35)], [], None, None, lineno=2561, col_offset=14), lineno=2561, col_offset=4), Expr(Call(Name('debug_script', Load(), lineno=2562, col_offset=4), [Name('testsrc', Load(), lineno=2562, col_offset=17), Name('pm', Load(), lineno=2562, col_offset=26), Name('globs', Load(), lineno=2562, col_offset=30)], [], None, None, lineno=2562, col_offset=4), lineno=2562, col_offset=4)], [], lineno=2559, col_offset=0), FunctionDef('debug_script', arguments([Name('src', Param(), lineno=2564, col_offset=17), Name('pm', Param(), lineno=2564, col_offset=22), Name('globs', Param(), lineno=2564, col_offset=32)], None, None, [Name('False', Load(), lineno=2564, col_offset=25), Name('None', Load(), lineno=2564, col_offset=38)]), [Expr(Str('Debug a test script.  `src` is the script, as a string.', lineno=2565, col_offset=4), lineno=2565, col_offset=4), Import([alias('pdb', None)], lineno=2566, col_offset=4), Assign([Name('srcfilename', Store(), lineno=2571, col_offset=4)], Call(Attribute(Name('tempfile', Load(), lineno=2571, col_offset=18), 'mktemp', Load(), lineno=2571, col_offset=18), [Str('.py', lineno=2571, col_offset=34), Str('doctestdebug', lineno=2571, col_offset=41)], [], None, None, lineno=2571, col_offset=18), lineno=2571, col_offset=4), Assign([Name('f', Store(), lineno=2572, col_offset=4)], Call(Name('open', Load(), lineno=2572, col_offset=8), [Name('srcfilename', Load(), lineno=2572, col_offset=13), Str('w', lineno=2572, col_offset=26)], [], None, None, lineno=2572, col_offset=8), lineno=2572, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=2573, col_offset=4), 'write', Load(), lineno=2573, col_offset=4), [Name('src', Load(), lineno=2573, col_offset=12)], [], None, None, lineno=2573, col_offset=4), lineno=2573, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=2574, col_offset=4), 'close', Load(), lineno=2574, col_offset=4), [], [], None, None, lineno=2574, col_offset=4), lineno=2574, col_offset=4), TryFinally([If(Name('globs', Load(), lineno=2577, col_offset=11), [Assign([Name('globs', Store(), lineno=2578, col_offset=12)], Call(Attribute(Name('globs', Load(), lineno=2578, col_offset=20), 'copy', Load(), lineno=2578, col_offset=20), [], [], None, None, lineno=2578, col_offset=20), lineno=2578, col_offset=12)], [Assign([Name('globs', Store(), lineno=2580, col_offset=12)], Dict([], [], lineno=2580, col_offset=20), lineno=2580, col_offset=12)], lineno=2577, col_offset=8), If(Name('pm', Load(), lineno=2582, col_offset=11), [TryExcept([Expr(Call(Name('execfile', Load(), lineno=2584, col_offset=16), [Name('srcfilename', Load(), lineno=2584, col_offset=25), Name('globs', Load(), lineno=2584, col_offset=38), Name('globs', Load(), lineno=2584, col_offset=45)], [], None, None, lineno=2584, col_offset=16), lineno=2584, col_offset=16)], [ExceptHandler(None, None, [Print(None, [Subscript(Call(Attribute(Name('sys', Load(), lineno=2586, col_offset=22), 'exc_info', Load(), lineno=2586, col_offset=22), [], [], None, None, lineno=2586, col_offset=22), Index(Num(1, lineno=2586, col_offset=37)), Load(), lineno=2586, col_offset=22)], True, lineno=2586, col_offset=16), Expr(Call(Attribute(Name('pdb', Load(), lineno=2587, col_offset=16), 'post_mortem', Load(), lineno=2587, col_offset=16), [Subscript(Call(Attribute(Name('sys', Load(), lineno=2587, col_offset=32), 'exc_info', Load(), lineno=2587, col_offset=32), [], [], None, None, lineno=2587, col_offset=32), Index(Num(2, lineno=2587, col_offset=47)), Load(), lineno=2587, col_offset=32)], [], None, None, lineno=2587, col_offset=16), lineno=2587, col_offset=16)], lineno=2585, col_offset=12)], [], lineno=2583, col_offset=12)], [Expr(Call(Attribute(Name('pdb', Load(), lineno=2591, col_offset=12), 'run', Load(), lineno=2591, col_offset=12), [BinOp(Str('execfile(%r)', lineno=2591, col_offset=20), Mod(), Name('srcfilename', Load(), lineno=2591, col_offset=37), lineno=2591, col_offset=20), Name('globs', Load(), lineno=2591, col_offset=50), Name('globs', Load(), lineno=2591, col_offset=57)], [], None, None, lineno=2591, col_offset=12), lineno=2591, col_offset=12)], lineno=2582, col_offset=8)], [Expr(Call(Attribute(Name('os', Load(), lineno=2594, col_offset=8), 'remove', Load(), lineno=2594, col_offset=8), [Name('srcfilename', Load(), lineno=2594, col_offset=18)], [], None, None, lineno=2594, col_offset=8), lineno=2594, col_offset=8)], lineno=2576, col_offset=4)], [], lineno=2564, col_offset=0), FunctionDef('debug', arguments([Name('module', Param(), lineno=2596, col_offset=10), Name('name', Param(), lineno=2596, col_offset=18), Name('pm', Param(), lineno=2596, col_offset=24)], None, None, [Name('False', Load(), lineno=2596, col_offset=27)]), [Expr(Str('Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    ', lineno=2602, col_offset=-1), lineno=2602, col_offset=-1), Assign([Name('module', Store(), lineno=2603, col_offset=4)], Call(Name('_normalize_module', Load(), lineno=2603, col_offset=13), [Name('module', Load(), lineno=2603, col_offset=31)], [], None, None, lineno=2603, col_offset=13), lineno=2603, col_offset=4), Assign([Name('testsrc', Store(), lineno=2604, col_offset=4)], Call(Name('testsource', Load(), lineno=2604, col_offset=14), [Name('module', Load(), lineno=2604, col_offset=25), Name('name', Load(), lineno=2604, col_offset=33)], [], None, None, lineno=2604, col_offset=14), lineno=2604, col_offset=4), Expr(Call(Name('debug_script', Load(), lineno=2605, col_offset=4), [Name('testsrc', Load(), lineno=2605, col_offset=17), Name('pm', Load(), lineno=2605, col_offset=26), Attribute(Name('module', Load(), lineno=2605, col_offset=30), '__dict__', Load(), lineno=2605, col_offset=30)], [], None, None, lineno=2605, col_offset=4), lineno=2605, col_offset=4)], [], lineno=2596, col_offset=0), ClassDef('_TestClass', [], [Expr(Str("\n    A pointless class, for sanity-checking of docstring testing.\n\n    Methods:\n        square()\n        get()\n\n    >>> _TestClass(13).get() + _TestClass(-12).get()\n    1\n    >>> hex(_TestClass(13).square().get())\n    '0xa9'\n    ", lineno=2622, col_offset=-1), lineno=2622, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2624, col_offset=17), Name('val', Param(), lineno=2624, col_offset=23)], None, None, []), [Expr(Str('val -> _TestClass object with associated value val.\n\n        >>> t = _TestClass(123)\n        >>> print t.get()\n        123\n        ', lineno=2630, col_offset=-1), lineno=2630, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=2632, col_offset=8), 'val', Store(), lineno=2632, col_offset=8)], Name('val', Load(), lineno=2632, col_offset=19), lineno=2632, col_offset=8)], [], lineno=2624, col_offset=4), FunctionDef('square', arguments([Name('self', Param(), lineno=2634, col_offset=15)], None, None, []), [Expr(Str("square() -> square TestClass's associated value\n\n        >>> _TestClass(13).square().get()\n        169\n        ", lineno=2639, col_offset=-1), lineno=2639, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=2641, col_offset=8), 'val', Store(), lineno=2641, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=2641, col_offset=19), 'val', Load(), lineno=2641, col_offset=19), Pow(), Num(2, lineno=2641, col_offset=31), lineno=2641, col_offset=19), lineno=2641, col_offset=8), Return(Name('self', Load(), lineno=2642, col_offset=15), lineno=2642, col_offset=8)], [], lineno=2634, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2644, col_offset=12)], None, None, []), [Expr(Str("get() -> return TestClass's associated value.\n\n        >>> x = _TestClass(-42)\n        >>> print x.get()\n        -42\n        ", lineno=2650, col_offset=-1), lineno=2650, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=2652, col_offset=15), 'val', Load(), lineno=2652, col_offset=15), lineno=2652, col_offset=8)], [], lineno=2644, col_offset=4)], [], lineno=2610, col_offset=0), Assign([Name('__test__', Store(), lineno=2654, col_offset=0)], Dict([Str('_TestClass', lineno=2654, col_offset=12), Str('string', lineno=2655, col_offset=12), Str('bool-int equivalence', lineno=2662, col_offset=12), Str('blank lines', lineno=2678, col_offset=12), Str('ellipsis', lineno=2687, col_offset=12), Str('whitespace normalization', lineno=2694, col_offset=12)], [Name('_TestClass', Load(), lineno=2654, col_offset=26), Str('\n                      Example of a string object, searched as-is.\n                      >>> x = 1; y = 2\n                      >>> x + y, x * y\n                      (3, 2)\n                      ', lineno=2660, col_offset=-1), Str('\n                                    In 2.2, boolean expressions displayed\n                                    0 or 1.  By default, we still accept\n                                    them.  This can be disabled by passing\n                                    DONT_ACCEPT_TRUE_FOR_1 to the new\n                                    optionflags argument.\n                                    >>> 4 == 4\n                                    1\n                                    >>> 4 == 4\n                                    True\n                                    >>> 4 > 4\n                                    0\n                                    >>> 4 > 4\n                                    False\n                                    ', lineno=2676, col_offset=-1), Str("\n                Blank lines can be marked with <BLANKLINE>:\n                    >>> print 'foo\\n\\nbar\\n'\n                    foo\n                    <BLANKLINE>\n                    bar\n                    <BLANKLINE>\n            ", lineno=2685, col_offset=-1), Str("\n                If the ellipsis flag is used, then '...' can be used to\n                elide substrings in the desired output:\n                    >>> print range(1000) #doctest: +ELLIPSIS\n                    [0, 1, 2, ..., 999]\n            ", lineno=2692, col_offset=-1), Str('\n                If the whitespace normalization flag is used, then\n                differences in whitespace are ignored.\n                    >>> print range(30) #doctest: +NORMALIZE_WHITESPACE\n                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n                     27, 28, 29]\n            ', lineno=2701, col_offset=-1)], lineno=2654, col_offset=11), lineno=2654, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Assign([Name('testfiles', Store(), lineno=2706, col_offset=4)], ListComp(Name('arg', Load(), lineno=2706, col_offset=17), [comprehension(Name('arg', Store(), lineno=2706, col_offset=25), Subscript(Attribute(Name('sys', Load(), lineno=2706, col_offset=32), 'argv', Load(), lineno=2706, col_offset=32), Slice(Num(1, lineno=2706, col_offset=41), None, None), Load(), lineno=2706, col_offset=32), [BoolOp(And(), [Name('arg', Load(), lineno=2706, col_offset=48), Compare(Subscript(Name('arg', Load(), lineno=2706, col_offset=56), Index(Num(0, lineno=2706, col_offset=60)), Load(), lineno=2706, col_offset=56), [NotEq()], [Str('-', lineno=2706, col_offset=66)], lineno=2706, col_offset=56)], lineno=2706, col_offset=48)])], lineno=2706, col_offset=17), lineno=2706, col_offset=4), If(UnaryOp(Not(), Name('testfiles', Load(), lineno=2707, col_offset=11), lineno=2707, col_offset=7), [Assign([Name('name', Store(), lineno=2708, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=2708, col_offset=15), 'path', Load(), lineno=2708, col_offset=15), 'basename', Load(), lineno=2708, col_offset=15), [Subscript(Attribute(Name('sys', Load(), lineno=2708, col_offset=32), 'argv', Load(), lineno=2708, col_offset=32), Index(Num(0, lineno=2708, col_offset=41)), Load(), lineno=2708, col_offset=32)], [], None, None, lineno=2708, col_offset=15), lineno=2708, col_offset=8), If(Compare(Str('__loader__', lineno=2709, col_offset=11), [In()], [Call(Name('globals', Load(), lineno=2709, col_offset=27), [], [], None, None, lineno=2709, col_offset=27)], lineno=2709, col_offset=11), [Assign([Tuple([Name('name', Store(), lineno=2710, col_offset=12), Name('_', Store(), lineno=2710, col_offset=18)], Store(), lineno=2710, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=2710, col_offset=22), 'path', Load(), lineno=2710, col_offset=22), 'splitext', Load(), lineno=2710, col_offset=22), [Name('name', Load(), lineno=2710, col_offset=39)], [], None, None, lineno=2710, col_offset=22), lineno=2710, col_offset=12)], [], lineno=2709, col_offset=8), Print(None, [Call(Attribute(Str('usage: {0} [-v] file ...', lineno=2711, col_offset=14), 'format', Load(), lineno=2711, col_offset=14), [Name('name', Load(), lineno=2711, col_offset=48)], [], None, None, lineno=2711, col_offset=14)], True, lineno=2711, col_offset=8), Return(Num(2, lineno=2712, col_offset=15), lineno=2712, col_offset=8)], [], lineno=2707, col_offset=4), For(Name('filename', Store(), lineno=2713, col_offset=8), Name('testfiles', Load(), lineno=2713, col_offset=20), [If(Call(Attribute(Name('filename', Load(), lineno=2714, col_offset=11), 'endswith', Load(), lineno=2714, col_offset=11), [Str('.py', lineno=2714, col_offset=29)], [], None, None, lineno=2714, col_offset=11), [Assign([Tuple([Name('dirname', Store(), lineno=2718, col_offset=12), Name('filename', Store(), lineno=2718, col_offset=21)], Store(), lineno=2718, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=2718, col_offset=32), 'path', Load(), lineno=2718, col_offset=32), 'split', Load(), lineno=2718, col_offset=32), [Name('filename', Load(), lineno=2718, col_offset=46)], [], None, None, lineno=2718, col_offset=32), lineno=2718, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=2719, col_offset=12), 'path', Load(), lineno=2719, col_offset=12), 'insert', Load(), lineno=2719, col_offset=12), [Num(0, lineno=2719, col_offset=28), Name('dirname', Load(), lineno=2719, col_offset=31)], [], None, None, lineno=2719, col_offset=12), lineno=2719, col_offset=12), Assign([Name('m', Store(), lineno=2720, col_offset=12)], Call(Name('__import__', Load(), lineno=2720, col_offset=16), [Subscript(Name('filename', Load(), lineno=2720, col_offset=27), Slice(None, Num(-3, lineno=2720, col_offset=38), None), Load(), lineno=2720, col_offset=27)], [], None, None, lineno=2720, col_offset=16), lineno=2720, col_offset=12), Delete([Subscript(Attribute(Name('sys', Load(), lineno=2721, col_offset=16), 'path', Load(), lineno=2721, col_offset=16), Index(Num(0, lineno=2721, col_offset=25)), Del(), lineno=2721, col_offset=16)], lineno=2721, col_offset=12), Assign([Tuple([Name('failures', Store(), lineno=2722, col_offset=12), Name('_', Store(), lineno=2722, col_offset=22)], Store(), lineno=2722, col_offset=12)], Call(Name('testmod', Load(), lineno=2722, col_offset=26), [Name('m', Load(), lineno=2722, col_offset=34)], [], None, None, lineno=2722, col_offset=26), lineno=2722, col_offset=12)], [Assign([Tuple([Name('failures', Store(), lineno=2724, col_offset=12), Name('_', Store(), lineno=2724, col_offset=22)], Store(), lineno=2724, col_offset=12)], Call(Name('testfile', Load(), lineno=2724, col_offset=26), [Name('filename', Load(), lineno=2724, col_offset=35)], [keyword('module_relative', Name('False', Load(), lineno=2724, col_offset=61))], None, None, lineno=2724, col_offset=26), lineno=2724, col_offset=12)], lineno=2714, col_offset=8), If(Name('failures', Load(), lineno=2725, col_offset=11), [Return(Num(1, lineno=2726, col_offset=19), lineno=2726, col_offset=12)], [], lineno=2725, col_offset=8)], [], lineno=2713, col_offset=4), Return(Num(0, lineno=2727, col_offset=11), lineno=2727, col_offset=4)], [], lineno=2705, col_offset=0), If(Compare(Name('__name__', Load(), lineno=2730, col_offset=3), [Eq()], [Str('__main__', lineno=2730, col_offset=15)], lineno=2730, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=2731, col_offset=4), 'exit', Load(), lineno=2731, col_offset=4), [Call(Name('_test', Load(), lineno=2731, col_offset=13), [], [], None, None, lineno=2731, col_offset=13)], [], None, None, lineno=2731, col_offset=4), lineno=2731, col_offset=4)], [], lineno=2730, col_offset=0)])
