Module([Import([alias('unittest', None)], lineno=2, col_offset=0), Import([alias('shlex', None)], lineno=3, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=5, col_offset=0), TryExcept([ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=8, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=9, col_offset=7), None, [ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=10, col_offset=4)], lineno=9, col_offset=0)], [], lineno=7, col_offset=0), Assign([Name('data', Store(), lineno=15, col_offset=0)], Str('x|x|\nfoo bar|foo|bar|\n foo bar|foo|bar|\n foo bar |foo|bar|\nfoo   bar    bla     fasel|foo|bar|bla|fasel|\nx y  z              xxxx|x|y|z|xxxx|\n\\x bar|\\|x|bar|\n\\ x bar|\\|x|bar|\n\\ bar|\\|bar|\nfoo \\x bar|foo|\\|x|bar|\nfoo \\ x bar|foo|\\|x|bar|\nfoo \\ bar|foo|\\|bar|\nfoo "bar" bla|foo|"bar"|bla|\n"foo" "bar" "bla"|"foo"|"bar"|"bla"|\n"foo" bar "bla"|"foo"|bar|"bla"|\n"foo" bar bla|"foo"|bar|bla|\nfoo \'bar\' bla|foo|\'bar\'|bla|\n\'foo\' \'bar\' \'bla\'|\'foo\'|\'bar\'|\'bla\'|\n\'foo\' bar \'bla\'|\'foo\'|bar|\'bla\'|\n\'foo\' bar bla|\'foo\'|bar|bla|\nblurb foo"bar"bar"fasel" baz|blurb|foo"bar"bar"fasel"|baz|\nblurb foo\'bar\'bar\'fasel\' baz|blurb|foo\'bar\'bar\'fasel\'|baz|\n""|""|\n\'\'|\'\'|\nfoo "" bar|foo|""|bar|\nfoo \'\' bar|foo|\'\'|bar|\nfoo "" "" "" bar|foo|""|""|""|bar|\nfoo \'\' \'\' \'\' bar|foo|\'\'|\'\'|\'\'|bar|\n\\""|\\|""|\n"\\"|"\\"|\n"foo\\ bar"|"foo\\ bar"|\n"foo\\\\ bar"|"foo\\\\ bar"|\n"foo\\\\ bar\\"|"foo\\\\ bar\\"|\n"foo\\\\" bar\\""|"foo\\\\"|bar|\\|""|\n"foo\\\\ bar\\" dfadf"|"foo\\\\ bar\\"|dfadf"|\n"foo\\\\\\ bar\\" dfadf"|"foo\\\\\\ bar\\"|dfadf"|\n"foo\\\\\\x bar\\" dfadf"|"foo\\\\\\x bar\\"|dfadf"|\n"foo\\x bar\\" dfadf"|"foo\\x bar\\"|dfadf"|\n\\\'\'|\\|\'\'|\n\'foo\\ bar\'|\'foo\\ bar\'|\n\'foo\\\\ bar\'|\'foo\\\\ bar\'|\n"foo\\\\\\x bar\\" df\'a\\ \'df\'|"foo\\\\\\x bar\\"|df\'a|\\|\'df\'|\n\\"foo"|\\|"foo"|\n\\"foo"\\x|\\|"foo"|\\|x|\n"foo\\x"|"foo\\x"|\n"foo\\ "|"foo\\ "|\nfoo\\ xx|foo|\\|xx|\nfoo\\ x\\x|foo|\\|x|\\|x|\nfoo\\ x\\x\\""|foo|\\|x|\\|x|\\|""|\n"foo\\ x\\x"|"foo\\ x\\x"|\n"foo\\ x\\x\\\\"|"foo\\ x\\x\\\\"|\n"foo\\ x\\x\\\\""foobar"|"foo\\ x\\x\\\\"|"foobar"|\n"foo\\ x\\x\\\\"\\\'\'"foobar"|"foo\\ x\\x\\\\"|\\|\'\'|"foobar"|\n"foo\\ x\\x\\\\"\\\'"fo\'obar"|"foo\\ x\\x\\\\"|\\|\'"fo\'|obar"|\n"foo\\ x\\x\\\\"\\\'"fo\'obar" \'don\'\\\'\'t\'|"foo\\ x\\x\\\\"|\\|\'"fo\'|obar"|\'don\'|\\|\'\'|t\'|\n\'foo\\ bar\'|\'foo\\ bar\'|\n\'foo\\\\ bar\'|\'foo\\\\ bar\'|\nfoo\\ bar|foo|\\|bar|\nfoo#bar\\nbaz|foobaz|\n:-) ;-)|:|-|)|;|-|)|\n\xe1\xe9\xed\xf3\xfa|\xe1|\xe9|\xed|\xf3|\xfa|\n', lineno=76, col_offset=-1), lineno=15, col_offset=0), Assign([Name('posix_data', Store(), lineno=78, col_offset=0)], Str('x|x|\nfoo bar|foo|bar|\n foo bar|foo|bar|\n foo bar |foo|bar|\nfoo   bar    bla     fasel|foo|bar|bla|fasel|\nx y  z              xxxx|x|y|z|xxxx|\n\\x bar|x|bar|\n\\ x bar| x|bar|\n\\ bar| bar|\nfoo \\x bar|foo|x|bar|\nfoo \\ x bar|foo| x|bar|\nfoo \\ bar|foo| bar|\nfoo "bar" bla|foo|bar|bla|\n"foo" "bar" "bla"|foo|bar|bla|\n"foo" bar "bla"|foo|bar|bla|\n"foo" bar bla|foo|bar|bla|\nfoo \'bar\' bla|foo|bar|bla|\n\'foo\' \'bar\' \'bla\'|foo|bar|bla|\n\'foo\' bar \'bla\'|foo|bar|bla|\n\'foo\' bar bla|foo|bar|bla|\nblurb foo"bar"bar"fasel" baz|blurb|foobarbarfasel|baz|\nblurb foo\'bar\'bar\'fasel\' baz|blurb|foobarbarfasel|baz|\n""||\n\'\'||\nfoo "" bar|foo||bar|\nfoo \'\' bar|foo||bar|\nfoo "" "" "" bar|foo||||bar|\nfoo \'\' \'\' \'\' bar|foo||||bar|\n\\"|"|\n"\\""|"|\n"foo\\ bar"|foo\\ bar|\n"foo\\\\ bar"|foo\\ bar|\n"foo\\\\ bar\\""|foo\\ bar"|\n"foo\\\\" bar\\"|foo\\|bar"|\n"foo\\\\ bar\\" dfadf"|foo\\ bar" dfadf|\n"foo\\\\\\ bar\\" dfadf"|foo\\\\ bar" dfadf|\n"foo\\\\\\x bar\\" dfadf"|foo\\\\x bar" dfadf|\n"foo\\x bar\\" dfadf"|foo\\x bar" dfadf|\n\\\'|\'|\n\'foo\\ bar\'|foo\\ bar|\n\'foo\\\\ bar\'|foo\\\\ bar|\n"foo\\\\\\x bar\\" df\'a\\ \'df"|foo\\\\x bar" df\'a\\ \'df|\n\\"foo|"foo|\n\\"foo\\x|"foox|\n"foo\\x"|foo\\x|\n"foo\\ "|foo\\ |\nfoo\\ xx|foo xx|\nfoo\\ x\\x|foo xx|\nfoo\\ x\\x\\"|foo xx"|\n"foo\\ x\\x"|foo\\ x\\x|\n"foo\\ x\\x\\\\"|foo\\ x\\x\\|\n"foo\\ x\\x\\\\""foobar"|foo\\ x\\x\\foobar|\n"foo\\ x\\x\\\\"\\\'"foobar"|foo\\ x\\x\\\'foobar|\n"foo\\ x\\x\\\\"\\\'"fo\'obar"|foo\\ x\\x\\\'fo\'obar|\n"foo\\ x\\x\\\\"\\\'"fo\'obar" \'don\'\\\'\'t\'|foo\\ x\\x\\\'fo\'obar|don\'t|\n"foo\\ x\\x\\\\"\\\'"fo\'obar" \'don\'\\\'\'t\' \\\\|foo\\ x\\x\\\'fo\'obar|don\'t|\\|\n\'foo\\ bar\'|foo\\ bar|\n\'foo\\\\ bar\'|foo\\\\ bar|\nfoo\\ bar|foo bar|\nfoo#bar\\nbaz|foo|baz|\n:-) ;-)|:-)|;-)|\n\xe1\xe9\xed\xf3\xfa|\xe1\xe9\xed\xf3\xfa|\n', lineno=140, col_offset=-1), lineno=78, col_offset=0), ClassDef('ShlexTest', [Attribute(Name('unittest', Load(), lineno=142, col_offset=16), 'TestCase', Load(), lineno=142, col_offset=16)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=143, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=144, col_offset=8), 'data', Store(), lineno=144, col_offset=8)], ListComp(Subscript(Call(Attribute(Name('x', Load(), lineno=144, col_offset=21), 'split', Load(), lineno=144, col_offset=21), [Str('|', lineno=144, col_offset=29)], [], None, None, lineno=144, col_offset=21), Slice(None, Num(-1, lineno=144, col_offset=36), None), Load(), lineno=144, col_offset=21), [comprehension(Name('x', Store(), lineno=145, col_offset=25), Call(Attribute(Name('data', Load(), lineno=145, col_offset=30), 'splitlines', Load(), lineno=145, col_offset=30), [], [], None, None, lineno=145, col_offset=30), [])], lineno=144, col_offset=21), lineno=144, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=146, col_offset=8), 'posix_data', Store(), lineno=146, col_offset=8)], ListComp(Subscript(Call(Attribute(Name('x', Load(), lineno=146, col_offset=27), 'split', Load(), lineno=146, col_offset=27), [Str('|', lineno=146, col_offset=35)], [], None, None, lineno=146, col_offset=27), Slice(None, Num(-1, lineno=146, col_offset=42), None), Load(), lineno=146, col_offset=27), [comprehension(Name('x', Store(), lineno=147, col_offset=31), Call(Attribute(Name('posix_data', Load(), lineno=147, col_offset=36), 'splitlines', Load(), lineno=147, col_offset=36), [], [], None, None, lineno=147, col_offset=36), [])], lineno=146, col_offset=27), lineno=146, col_offset=8), For(Name('item', Store(), lineno=148, col_offset=12), Attribute(Name('self', Load(), lineno=148, col_offset=20), 'data', Load(), lineno=148, col_offset=20), [Assign([Subscript(Name('item', Load(), lineno=149, col_offset=12), Index(Num(0, lineno=149, col_offset=17)), Store(), lineno=149, col_offset=12)], Call(Attribute(Subscript(Name('item', Load(), lineno=149, col_offset=22), Index(Num(0, lineno=149, col_offset=27)), Load(), lineno=149, col_offset=22), 'replace', Load(), lineno=149, col_offset=22), [Str('\\n', lineno=149, col_offset=38), Str('\n', lineno=149, col_offset=45)], [], None, None, lineno=149, col_offset=22), lineno=149, col_offset=12)], [], lineno=148, col_offset=8), For(Name('item', Store(), lineno=150, col_offset=12), Attribute(Name('self', Load(), lineno=150, col_offset=20), 'posix_data', Load(), lineno=150, col_offset=20), [Assign([Subscript(Name('item', Load(), lineno=151, col_offset=12), Index(Num(0, lineno=151, col_offset=17)), Store(), lineno=151, col_offset=12)], Call(Attribute(Subscript(Name('item', Load(), lineno=151, col_offset=22), Index(Num(0, lineno=151, col_offset=27)), Load(), lineno=151, col_offset=22), 'replace', Load(), lineno=151, col_offset=22), [Str('\\n', lineno=151, col_offset=38), Str('\n', lineno=151, col_offset=45)], [], None, None, lineno=151, col_offset=22), lineno=151, col_offset=12)], [], lineno=150, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('splitTest', arguments([Name('self', Param(), lineno=153, col_offset=18), Name('data', Param(), lineno=153, col_offset=24), Name('comments', Param(), lineno=153, col_offset=30)], None, None, []), [For(Name('i', Store(), lineno=154, col_offset=12), Call(Name('range', Load(), lineno=154, col_offset=17), [Call(Name('len', Load(), lineno=154, col_offset=23), [Name('data', Load(), lineno=154, col_offset=27)], [], None, None, lineno=154, col_offset=23)], [], None, None, lineno=154, col_offset=17), [Assign([Name('l', Store(), lineno=155, col_offset=12)], Call(Attribute(Name('shlex', Load(), lineno=155, col_offset=16), 'split', Load(), lineno=155, col_offset=16), [Subscript(Subscript(Name('data', Load(), lineno=155, col_offset=28), Index(Name('i', Load(), lineno=155, col_offset=33)), Load(), lineno=155, col_offset=28), Index(Num(0, lineno=155, col_offset=36)), Load(), lineno=155, col_offset=28)], [keyword('comments', Name('comments', Load(), lineno=155, col_offset=49))], None, None, lineno=155, col_offset=16), lineno=155, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=12), 'assertEqual', Load(), lineno=156, col_offset=12), [Name('l', Load(), lineno=156, col_offset=29), Subscript(Subscript(Name('data', Load(), lineno=156, col_offset=32), Index(Name('i', Load(), lineno=156, col_offset=37)), Load(), lineno=156, col_offset=32), Slice(Num(1, lineno=156, col_offset=40), None, None), Load(), lineno=156, col_offset=32), BinOp(Str('%s: %s != %s', lineno=157, col_offset=29), Mod(), Tuple([Subscript(Subscript(Name('data', Load(), lineno=158, col_offset=30), Index(Name('i', Load(), lineno=158, col_offset=35)), Load(), lineno=158, col_offset=30), Index(Num(0, lineno=158, col_offset=38)), Load(), lineno=158, col_offset=30), Name('l', Load(), lineno=158, col_offset=42), Subscript(Subscript(Name('data', Load(), lineno=158, col_offset=45), Index(Name('i', Load(), lineno=158, col_offset=50)), Load(), lineno=158, col_offset=45), Slice(Num(1, lineno=158, col_offset=53), None, None), Load(), lineno=158, col_offset=45)], Load(), lineno=158, col_offset=30), lineno=157, col_offset=29)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12)], [], lineno=154, col_offset=8)], [], lineno=153, col_offset=4), FunctionDef('oldSplit', arguments([Name('self', Param(), lineno=160, col_offset=17), Name('s', Param(), lineno=160, col_offset=23)], None, None, []), [Assign([Name('ret', Store(), lineno=161, col_offset=8)], List([], Load(), lineno=161, col_offset=14), lineno=161, col_offset=8), Assign([Name('lex', Store(), lineno=162, col_offset=8)], Call(Attribute(Name('shlex', Load(), lineno=162, col_offset=14), 'shlex', Load(), lineno=162, col_offset=14), [Call(Name('StringIO', Load(), lineno=162, col_offset=26), [Name('s', Load(), lineno=162, col_offset=35)], [], None, None, lineno=162, col_offset=26)], [], None, None, lineno=162, col_offset=14), lineno=162, col_offset=8), Assign([Name('tok', Store(), lineno=163, col_offset=8)], Call(Attribute(Name('lex', Load(), lineno=163, col_offset=14), 'get_token', Load(), lineno=163, col_offset=14), [], [], None, None, lineno=163, col_offset=14), lineno=163, col_offset=8), While(Name('tok', Load(), lineno=164, col_offset=14), [Expr(Call(Attribute(Name('ret', Load(), lineno=165, col_offset=12), 'append', Load(), lineno=165, col_offset=12), [Name('tok', Load(), lineno=165, col_offset=23)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12), Assign([Name('tok', Store(), lineno=166, col_offset=12)], Call(Attribute(Name('lex', Load(), lineno=166, col_offset=18), 'get_token', Load(), lineno=166, col_offset=18), [], [], None, None, lineno=166, col_offset=18), lineno=166, col_offset=12)], [], lineno=164, col_offset=8), Return(Name('ret', Load(), lineno=167, col_offset=15), lineno=167, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('testSplitPosix', arguments([Name('self', Param(), lineno=169, col_offset=23)], None, None, []), [Expr(Str('Test data splitting with posix parser', lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=171, col_offset=8), 'splitTest', Load(), lineno=171, col_offset=8), [Attribute(Name('self', Load(), lineno=171, col_offset=23), 'posix_data', Load(), lineno=171, col_offset=23)], [keyword('comments', Name('True', Load(), lineno=171, col_offset=49))], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('testCompat', arguments([Name('self', Param(), lineno=173, col_offset=19)], None, None, []), [Expr(Str('Test compatibility interface', lineno=174, col_offset=8), lineno=174, col_offset=8), For(Name('i', Store(), lineno=175, col_offset=12), Call(Name('range', Load(), lineno=175, col_offset=17), [Call(Name('len', Load(), lineno=175, col_offset=23), [Attribute(Name('self', Load(), lineno=175, col_offset=27), 'data', Load(), lineno=175, col_offset=27)], [], None, None, lineno=175, col_offset=23)], [], None, None, lineno=175, col_offset=17), [Assign([Name('l', Store(), lineno=176, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=176, col_offset=16), 'oldSplit', Load(), lineno=176, col_offset=16), [Subscript(Subscript(Attribute(Name('self', Load(), lineno=176, col_offset=30), 'data', Load(), lineno=176, col_offset=30), Index(Name('i', Load(), lineno=176, col_offset=40)), Load(), lineno=176, col_offset=30), Index(Num(0, lineno=176, col_offset=43)), Load(), lineno=176, col_offset=30)], [], None, None, lineno=176, col_offset=16), lineno=176, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=12), 'assertEqual', Load(), lineno=177, col_offset=12), [Name('l', Load(), lineno=177, col_offset=29), Subscript(Subscript(Attribute(Name('self', Load(), lineno=177, col_offset=32), 'data', Load(), lineno=177, col_offset=32), Index(Name('i', Load(), lineno=177, col_offset=42)), Load(), lineno=177, col_offset=32), Slice(Num(1, lineno=177, col_offset=45), None, None), Load(), lineno=177, col_offset=32), BinOp(Str('%s: %s != %s', lineno=178, col_offset=29), Mod(), Tuple([Subscript(Subscript(Attribute(Name('self', Load(), lineno=179, col_offset=30), 'data', Load(), lineno=179, col_offset=30), Index(Name('i', Load(), lineno=179, col_offset=40)), Load(), lineno=179, col_offset=30), Index(Num(0, lineno=179, col_offset=43)), Load(), lineno=179, col_offset=30), Name('l', Load(), lineno=179, col_offset=47), Subscript(Subscript(Attribute(Name('self', Load(), lineno=179, col_offset=50), 'data', Load(), lineno=179, col_offset=50), Index(Name('i', Load(), lineno=179, col_offset=60)), Load(), lineno=179, col_offset=50), Slice(Num(1, lineno=179, col_offset=63), None, None), Load(), lineno=179, col_offset=50)], Load(), lineno=179, col_offset=30), lineno=178, col_offset=29)], [], None, None, lineno=177, col_offset=12), lineno=177, col_offset=12)], [], lineno=175, col_offset=8)], [], lineno=173, col_offset=4)], [], lineno=142, col_offset=0), If(UnaryOp(Not(), Call(Name('getattr', Load(), lineno=182, col_offset=7), [Name('shlex', Load(), lineno=182, col_offset=15), Str('split', lineno=182, col_offset=22), Name('None', Load(), lineno=182, col_offset=31)], [], None, None, lineno=182, col_offset=7), lineno=182, col_offset=3), [For(Name('methname', Store(), lineno=183, col_offset=8), Call(Name('dir', Load(), lineno=183, col_offset=20), [Name('ShlexTest', Load(), lineno=183, col_offset=24)], [], None, None, lineno=183, col_offset=20), [If(BoolOp(And(), [Call(Attribute(Name('methname', Load(), lineno=184, col_offset=11), 'startswith', Load(), lineno=184, col_offset=11), [Str('test', lineno=184, col_offset=31)], [], None, None, lineno=184, col_offset=11), Compare(Name('methname', Load(), lineno=184, col_offset=43), [NotEq()], [Str('testCompat', lineno=184, col_offset=55)], lineno=184, col_offset=43)], lineno=184, col_offset=11), [Expr(Call(Name('delattr', Load(), lineno=185, col_offset=12), [Name('ShlexTest', Load(), lineno=185, col_offset=20), Name('methname', Load(), lineno=185, col_offset=31)], [], None, None, lineno=185, col_offset=12), lineno=185, col_offset=12)], [], lineno=184, col_offset=8)], [], lineno=183, col_offset=4)], [], lineno=182, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=188, col_offset=4), 'run_unittest', Load(), lineno=188, col_offset=4), [Name('ShlexTest', Load(), lineno=188, col_offset=30)], [], None, None, lineno=188, col_offset=4), lineno=188, col_offset=4)], [], lineno=187, col_offset=0), If(Compare(Name('__name__', Load(), lineno=190, col_offset=3), [Eq()], [Str('__main__', lineno=190, col_offset=15)], lineno=190, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=191, col_offset=4), [], [], None, None, lineno=191, col_offset=4), lineno=191, col_offset=4)], [], lineno=190, col_offset=0)])
