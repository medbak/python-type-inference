Module([ImportFrom('__future__', [alias('with_statement', None)], 0, lineno=12, col_offset=0), Import([alias('os', None)], lineno=14, col_offset=0), Import([alias('re', None)], lineno=15, col_offset=0), Import([alias('sys', None)], lineno=16, col_offset=0), Import([alias('getopt', None)], lineno=17, col_offset=0), Import([alias('subprocess', None)], lineno=18, col_offset=0), ImportFrom('os.path', [alias('join', None), alias('splitext', None), alias('abspath', None), alias('exists', None)], 0, lineno=19, col_offset=0), ImportFrom('collections', [alias('defaultdict', None)], 0, lineno=20, col_offset=0), Assign([Name('directives', Store(), lineno=22, col_offset=0)], List([Str('admonition', lineno=24, col_offset=4), Str('attention', lineno=24, col_offset=18), Str('caution', lineno=24, col_offset=31), Str('class', lineno=24, col_offset=42), Str('compound', lineno=24, col_offset=51), Str('container', lineno=24, col_offset=63), Str('contents', lineno=25, col_offset=4), Str('csv-table', lineno=25, col_offset=16), Str('danger', lineno=25, col_offset=29), Str('date', lineno=25, col_offset=39), Str('default-role', lineno=25, col_offset=47), Str('epigraph', lineno=25, col_offset=63), Str('error', lineno=26, col_offset=4), Str('figure', lineno=26, col_offset=13), Str('footer', lineno=26, col_offset=23), Str('header', lineno=26, col_offset=33), Str('highlights', lineno=26, col_offset=43), Str('hint', lineno=26, col_offset=57), Str('image', lineno=26, col_offset=65), Str('important', lineno=27, col_offset=4), Str('include', lineno=27, col_offset=17), Str('line-block', lineno=27, col_offset=28), Str('list-table', lineno=27, col_offset=42), Str('meta', lineno=27, col_offset=56), Str('note', lineno=27, col_offset=64), Str('parsed-literal', lineno=28, col_offset=4), Str('pull-quote', lineno=28, col_offset=22), Str('raw', lineno=28, col_offset=36), Str('replace', lineno=28, col_offset=43), Str('restructuredtext-test-directive', lineno=29, col_offset=4), Str('role', lineno=29, col_offset=39), Str('rubric', lineno=29, col_offset=47), Str('sectnum', lineno=29, col_offset=57), Str('sidebar', lineno=29, col_offset=68), Str('table', lineno=30, col_offset=4), Str('target-notes', lineno=30, col_offset=13), Str('tip', lineno=30, col_offset=29), Str('title', lineno=30, col_offset=36), Str('topic', lineno=30, col_offset=45), Str('unicode', lineno=30, col_offset=54), Str('warning', lineno=30, col_offset=65), Str('acks', lineno=32, col_offset=4), Str('attribute', lineno=32, col_offset=12), Str('autoattribute', lineno=32, col_offset=25), Str('autoclass', lineno=32, col_offset=42), Str('autodata', lineno=32, col_offset=55), Str('autoexception', lineno=33, col_offset=4), Str('autofunction', lineno=33, col_offset=21), Str('automethod', lineno=33, col_offset=37), Str('automodule', lineno=33, col_offset=51), Str('centered', lineno=33, col_offset=65), Str('cfunction', lineno=34, col_offset=4), Str('class', lineno=34, col_offset=17), Str('classmethod', lineno=34, col_offset=26), Str('cmacro', lineno=34, col_offset=41), Str('cmdoption', lineno=34, col_offset=51), Str('cmember', lineno=34, col_offset=64), Str('code-block', lineno=35, col_offset=4), Str('confval', lineno=35, col_offset=18), Str('cssclass', lineno=35, col_offset=29), Str('ctype', lineno=35, col_offset=41), Str('currentmodule', lineno=35, col_offset=50), Str('cvar', lineno=35, col_offset=67), Str('data', lineno=36, col_offset=4), Str('deprecated', lineno=36, col_offset=12), Str('describe', lineno=36, col_offset=26), Str('directive', lineno=36, col_offset=38), Str('doctest', lineno=36, col_offset=51), Str('envvar', lineno=36, col_offset=62), Str('event', lineno=36, col_offset=72), Str('exception', lineno=37, col_offset=4), Str('function', lineno=37, col_offset=17), Str('glossary', lineno=37, col_offset=29), Str('highlight', lineno=37, col_offset=41), Str('highlightlang', lineno=37, col_offset=54), Str('index', lineno=37, col_offset=71), Str('literalinclude', lineno=38, col_offset=4), Str('method', lineno=38, col_offset=22), Str('module', lineno=38, col_offset=32), Str('moduleauthor', lineno=38, col_offset=42), Str('productionlist', lineno=38, col_offset=58), Str('program', lineno=39, col_offset=4), Str('role', lineno=39, col_offset=15), Str('sectionauthor', lineno=39, col_offset=23), Str('seealso', lineno=39, col_offset=40), Str('sourcecode', lineno=39, col_offset=51), Str('staticmethod', lineno=39, col_offset=65), Str('tabularcolumns', lineno=40, col_offset=4), Str('testcode', lineno=40, col_offset=22), Str('testoutput', lineno=40, col_offset=34), Str('testsetup', lineno=40, col_offset=48), Str('toctree', lineno=40, col_offset=61), Str('todo', lineno=40, col_offset=72), Str('todolist', lineno=41, col_offset=4), Str('versionadded', lineno=41, col_offset=16), Str('versionchanged', lineno=41, col_offset=32)], Load(), lineno=22, col_offset=13), lineno=22, col_offset=0), Assign([Name('all_directives', Store(), lineno=44, col_offset=0)], BinOp(BinOp(Str('(', lineno=44, col_offset=17), Add(), Call(Attribute(Str('|', lineno=44, col_offset=23), 'join', Load(), lineno=44, col_offset=23), [Name('directives', Load(), lineno=44, col_offset=32)], [], None, None, lineno=44, col_offset=23), lineno=44, col_offset=17), Add(), Str(')', lineno=44, col_offset=46), lineno=44, col_offset=44), lineno=44, col_offset=0), Assign([Name('seems_directive_re', Store(), lineno=45, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=45, col_offset=21), 'compile', Load(), lineno=45, col_offset=21), [BinOp(Str('\\.\\. %s([^a-z:]|:(?!:))', lineno=45, col_offset=32), Mod(), Name('all_directives', Load(), lineno=45, col_offset=61), lineno=45, col_offset=32)], [], None, None, lineno=45, col_offset=21), lineno=45, col_offset=0), Assign([Name('default_role_re', Store(), lineno=46, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=46, col_offset=18), 'compile', Load(), lineno=46, col_offset=18), [Str('(^| )`\\w([^`]*?\\w)?`($| )', lineno=46, col_offset=29)], [], None, None, lineno=46, col_offset=18), lineno=46, col_offset=0), Assign([Name('leaked_markup_re', Store(), lineno=47, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=47, col_offset=19), 'compile', Load(), lineno=47, col_offset=19), [Str('[a-z]::[^=]|:[a-z]+:|`|\\.\\.\\s*\\w+:', lineno=47, col_offset=30)], [], None, None, lineno=47, col_offset=19), lineno=47, col_offset=0), Assign([Name('checkers', Store(), lineno=50, col_offset=0)], Dict([], [], lineno=50, col_offset=11), lineno=50, col_offset=0), Assign([Name('checker_props', Store(), lineno=52, col_offset=0)], Dict([Str('severity', lineno=52, col_offset=17), Str('falsepositives', lineno=52, col_offset=32)], [Num(1, lineno=52, col_offset=29), Name('False', Load(), lineno=52, col_offset=50)], lineno=52, col_offset=16), lineno=52, col_offset=0), FunctionDef('checker', arguments([], 'suffixes', 'kwds', []), [Expr(Str('Decorator to register a function as a checker.', lineno=55, col_offset=4), lineno=55, col_offset=4), FunctionDef('deco', arguments([Name('func', Param(), lineno=56, col_offset=13)], None, None, []), [For(Name('suffix', Store(), lineno=57, col_offset=12), Name('suffixes', Load(), lineno=57, col_offset=22), [Expr(Call(Attribute(Call(Attribute(Name('checkers', Load(), lineno=58, col_offset=12), 'setdefault', Load(), lineno=58, col_offset=12), [Name('suffix', Load(), lineno=58, col_offset=32), List([], Load(), lineno=58, col_offset=40)], [], None, None, lineno=58, col_offset=12), 'append', Load(), lineno=58, col_offset=12), [Name('func', Load(), lineno=58, col_offset=51)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], [], lineno=57, col_offset=8), For(Name('prop', Store(), lineno=59, col_offset=12), Name('checker_props', Load(), lineno=59, col_offset=20), [Expr(Call(Name('setattr', Load(), lineno=60, col_offset=12), [Name('func', Load(), lineno=60, col_offset=20), Name('prop', Load(), lineno=60, col_offset=26), Call(Attribute(Name('kwds', Load(), lineno=60, col_offset=32), 'get', Load(), lineno=60, col_offset=32), [Name('prop', Load(), lineno=60, col_offset=41), Subscript(Name('checker_props', Load(), lineno=60, col_offset=47), Index(Name('prop', Load(), lineno=60, col_offset=61)), Load(), lineno=60, col_offset=47)], [], None, None, lineno=60, col_offset=32)], [], None, None, lineno=60, col_offset=12), lineno=60, col_offset=12)], [], lineno=59, col_offset=8), Return(Name('func', Load(), lineno=61, col_offset=15), lineno=61, col_offset=8)], [], lineno=56, col_offset=4), Return(Name('deco', Load(), lineno=62, col_offset=11), lineno=62, col_offset=4)], [], lineno=54, col_offset=0), FunctionDef('check_syntax', arguments([Name('fn', Param(), lineno=66, col_offset=17), Name('lines', Param(), lineno=66, col_offset=21)], None, None, []), [Expr(Str('Check Python examples for valid syntax.', lineno=67, col_offset=4), lineno=67, col_offset=4), Assign([Name('code', Store(), lineno=68, col_offset=4)], Call(Attribute(Str('', lineno=68, col_offset=11), 'join', Load(), lineno=68, col_offset=11), [Name('lines', Load(), lineno=68, col_offset=19)], [], None, None, lineno=68, col_offset=11), lineno=68, col_offset=4), If(Compare(Str('\r', lineno=69, col_offset=7), [In()], [Name('code', Load(), lineno=69, col_offset=15)], lineno=69, col_offset=7), [If(Compare(Attribute(Name('os', Load(), lineno=70, col_offset=11), 'name', Load(), lineno=70, col_offset=11), [NotEq()], [Str('nt', lineno=70, col_offset=22)], lineno=70, col_offset=11), [Expr(Yield(Tuple([Num(0, lineno=71, col_offset=18), Str('\\r in code file', lineno=71, col_offset=21)], Load(), lineno=71, col_offset=18), lineno=71, col_offset=12), lineno=71, col_offset=12)], [], lineno=70, col_offset=8), Assign([Name('code', Store(), lineno=72, col_offset=8)], Call(Attribute(Name('code', Load(), lineno=72, col_offset=15), 'replace', Load(), lineno=72, col_offset=15), [Str('\r', lineno=72, col_offset=28), Str('', lineno=72, col_offset=34)], [], None, None, lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=69, col_offset=4), TryExcept([Expr(Call(Name('compile', Load(), lineno=74, col_offset=8), [Name('code', Load(), lineno=74, col_offset=16), Name('fn', Load(), lineno=74, col_offset=22), Str('exec', lineno=74, col_offset=26)], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8)], [ExceptHandler(Name('SyntaxError', Load(), lineno=75, col_offset=11), Name('err', Store(), lineno=75, col_offset=24), [Expr(Yield(Tuple([Attribute(Name('err', Load(), lineno=76, col_offset=14), 'lineno', Load(), lineno=76, col_offset=14), BinOp(Str('not compilable: %s', lineno=76, col_offset=26), Mod(), Name('err', Load(), lineno=76, col_offset=49), lineno=76, col_offset=26)], Load(), lineno=76, col_offset=14), lineno=76, col_offset=8), lineno=76, col_offset=8)], lineno=75, col_offset=4)], [], lineno=73, col_offset=4)], [Call(Name('checker', Load(), lineno=65, col_offset=1), [Str('.py', lineno=65, col_offset=9)], [keyword('severity', Num(4, lineno=65, col_offset=25))], None, None, lineno=65, col_offset=1)], lineno=65, col_offset=0), FunctionDef('check_suspicious_constructs', arguments([Name('fn', Param(), lineno=80, col_offset=32), Name('lines', Param(), lineno=80, col_offset=36)], None, None, []), [Expr(Str('Check for suspicious reST constructs.', lineno=81, col_offset=4), lineno=81, col_offset=4), Assign([Name('inprod', Store(), lineno=82, col_offset=4)], Name('False', Load(), lineno=82, col_offset=13), lineno=82, col_offset=4), For(Tuple([Name('lno', Store(), lineno=83, col_offset=8), Name('line', Store(), lineno=83, col_offset=13)], Store(), lineno=83, col_offset=8), Call(Name('enumerate', Load(), lineno=83, col_offset=21), [Name('lines', Load(), lineno=83, col_offset=31)], [], None, None, lineno=83, col_offset=21), [If(Call(Attribute(Name('seems_directive_re', Load(), lineno=84, col_offset=11), 'match', Load(), lineno=84, col_offset=11), [Name('line', Load(), lineno=84, col_offset=36)], [], None, None, lineno=84, col_offset=11), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=85, col_offset=18), Add(), Num(1, lineno=85, col_offset=22), lineno=85, col_offset=18), Str('comment seems to be intended as a directive', lineno=85, col_offset=25)], Load(), lineno=85, col_offset=18), lineno=85, col_offset=12), lineno=85, col_offset=12)], [], lineno=84, col_offset=8), If(Compare(Str('.. productionlist::', lineno=86, col_offset=11), [In()], [Name('line', Load(), lineno=86, col_offset=36)], lineno=86, col_offset=11), [Assign([Name('inprod', Store(), lineno=87, col_offset=12)], Name('True', Load(), lineno=87, col_offset=21), lineno=87, col_offset=12)], [If(BoolOp(And(), [UnaryOp(Not(), Name('inprod', Load(), lineno=88, col_offset=17), lineno=88, col_offset=13), Call(Attribute(Name('default_role_re', Load(), lineno=88, col_offset=28), 'search', Load(), lineno=88, col_offset=28), [Name('line', Load(), lineno=88, col_offset=51)], [], None, None, lineno=88, col_offset=28)], lineno=88, col_offset=13), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=89, col_offset=18), Add(), Num(1, lineno=89, col_offset=22), lineno=89, col_offset=18), Str('default role used', lineno=89, col_offset=25)], Load(), lineno=89, col_offset=18), lineno=89, col_offset=12), lineno=89, col_offset=12)], [If(BoolOp(And(), [Name('inprod', Load(), lineno=90, col_offset=13), UnaryOp(Not(), Call(Attribute(Name('line', Load(), lineno=90, col_offset=28), 'strip', Load(), lineno=90, col_offset=28), [], [], None, None, lineno=90, col_offset=28), lineno=90, col_offset=24)], lineno=90, col_offset=13), [Assign([Name('inprod', Store(), lineno=91, col_offset=12)], Name('False', Load(), lineno=91, col_offset=21), lineno=91, col_offset=12)], [], lineno=90, col_offset=13)], lineno=88, col_offset=13)], lineno=86, col_offset=8)], [], lineno=83, col_offset=4)], [Call(Name('checker', Load(), lineno=79, col_offset=1), [Str('.rst', lineno=79, col_offset=9)], [keyword('severity', Num(2, lineno=79, col_offset=26))], None, None, lineno=79, col_offset=1)], lineno=79, col_offset=0), FunctionDef('check_whitespace', arguments([Name('fn', Param(), lineno=95, col_offset=21), Name('lines', Param(), lineno=95, col_offset=25)], None, None, []), [Expr(Str('Check for whitespace and line length issues.', lineno=96, col_offset=4), lineno=96, col_offset=4), For(Tuple([Name('lno', Store(), lineno=97, col_offset=8), Name('line', Store(), lineno=97, col_offset=13)], Store(), lineno=97, col_offset=8), Call(Name('enumerate', Load(), lineno=97, col_offset=21), [Name('lines', Load(), lineno=97, col_offset=31)], [], None, None, lineno=97, col_offset=21), [If(Compare(Str('\r', lineno=98, col_offset=11), [In()], [Name('line', Load(), lineno=98, col_offset=19)], lineno=98, col_offset=11), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=99, col_offset=18), Add(), Num(1, lineno=99, col_offset=22), lineno=99, col_offset=18), Str('\\r in line', lineno=99, col_offset=25)], Load(), lineno=99, col_offset=18), lineno=99, col_offset=12), lineno=99, col_offset=12)], [], lineno=98, col_offset=8), If(Compare(Str('\t', lineno=100, col_offset=11), [In()], [Name('line', Load(), lineno=100, col_offset=19)], lineno=100, col_offset=11), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=101, col_offset=18), Add(), Num(1, lineno=101, col_offset=22), lineno=101, col_offset=18), Str('OMG TABS!!!1', lineno=101, col_offset=25)], Load(), lineno=101, col_offset=18), lineno=101, col_offset=12), lineno=101, col_offset=12)], [], lineno=100, col_offset=8), If(Compare(Call(Attribute(Subscript(Name('line', Load(), lineno=102, col_offset=11), Slice(None, Num(-1, lineno=102, col_offset=18), None), Load(), lineno=102, col_offset=11), 'rstrip', Load(), lineno=102, col_offset=11), [Str(' \t', lineno=102, col_offset=28)], [], None, None, lineno=102, col_offset=11), [NotEq()], [Subscript(Name('line', Load(), lineno=102, col_offset=38), Slice(None, Num(-1, lineno=102, col_offset=45), None), Load(), lineno=102, col_offset=38)], lineno=102, col_offset=11), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=103, col_offset=18), Add(), Num(1, lineno=103, col_offset=22), lineno=103, col_offset=18), Str('trailing whitespace', lineno=103, col_offset=25)], Load(), lineno=103, col_offset=18), lineno=103, col_offset=12), lineno=103, col_offset=12)], [], lineno=102, col_offset=8)], [], lineno=97, col_offset=4)], [Call(Name('checker', Load(), lineno=94, col_offset=1), [Str('.py', lineno=94, col_offset=9), Str('.rst', lineno=94, col_offset=16)], [], None, None, lineno=94, col_offset=1)], lineno=94, col_offset=0), FunctionDef('check_line_length', arguments([Name('fn', Param(), lineno=107, col_offset=22), Name('lines', Param(), lineno=107, col_offset=26)], None, None, []), [Expr(Str('Check for line length; this checker is not run by default.', lineno=108, col_offset=4), lineno=108, col_offset=4), For(Tuple([Name('lno', Store(), lineno=109, col_offset=8), Name('line', Store(), lineno=109, col_offset=13)], Store(), lineno=109, col_offset=8), Call(Name('enumerate', Load(), lineno=109, col_offset=21), [Name('lines', Load(), lineno=109, col_offset=31)], [], None, None, lineno=109, col_offset=21), [If(Compare(Call(Name('len', Load(), lineno=110, col_offset=11), [Name('line', Load(), lineno=110, col_offset=15)], [], None, None, lineno=110, col_offset=11), [Gt()], [Num(81, lineno=110, col_offset=23)], lineno=110, col_offset=11), [If(BoolOp(And(), [Compare(Subscript(Call(Attribute(Name('line', Load(), lineno=112, col_offset=15), 'lstrip', Load(), lineno=112, col_offset=15), [], [], None, None, lineno=112, col_offset=15), Index(Num(0, lineno=112, col_offset=29)), Load(), lineno=112, col_offset=15), [NotIn()], [Str('+|', lineno=112, col_offset=39)], lineno=112, col_offset=15), Compare(Str('http://', lineno=113, col_offset=15), [NotIn()], [Name('line', Load(), lineno=113, col_offset=32)], lineno=113, col_offset=15), UnaryOp(Not(), Call(Attribute(Call(Attribute(Name('line', Load(), lineno=114, col_offset=19), 'lstrip', Load(), lineno=114, col_offset=19), [], [], None, None, lineno=114, col_offset=19), 'startswith', Load(), lineno=114, col_offset=19), [Tuple([Str('.. function', lineno=114, col_offset=45), Str('.. method', lineno=115, col_offset=45), Str('.. cfunction', lineno=116, col_offset=45)], Load(), lineno=114, col_offset=45)], [], None, None, lineno=114, col_offset=19), lineno=114, col_offset=15)], lineno=112, col_offset=15), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=117, col_offset=22), Add(), Num(1, lineno=117, col_offset=26), lineno=117, col_offset=22), Str('line too long', lineno=117, col_offset=29)], Load(), lineno=117, col_offset=22), lineno=117, col_offset=16), lineno=117, col_offset=16)], [], lineno=112, col_offset=12)], [], lineno=110, col_offset=8)], [], lineno=109, col_offset=4)], [Call(Name('checker', Load(), lineno=106, col_offset=1), [Str('.rst', lineno=106, col_offset=9)], [keyword('severity', Num(0, lineno=106, col_offset=26))], None, None, lineno=106, col_offset=1)], lineno=106, col_offset=0), FunctionDef('check_leaked_markup', arguments([Name('fn', Param(), lineno=121, col_offset=24), Name('lines', Param(), lineno=121, col_offset=28)], None, None, []), [Expr(Str('Check HTML files for leaked reST markup; this only works if\n    the HTML files have been built.\n    ', lineno=124, col_offset=-1), lineno=124, col_offset=-1), For(Tuple([Name('lno', Store(), lineno=125, col_offset=8), Name('line', Store(), lineno=125, col_offset=13)], Store(), lineno=125, col_offset=8), Call(Name('enumerate', Load(), lineno=125, col_offset=21), [Name('lines', Load(), lineno=125, col_offset=31)], [], None, None, lineno=125, col_offset=21), [If(Call(Attribute(Name('leaked_markup_re', Load(), lineno=126, col_offset=11), 'search', Load(), lineno=126, col_offset=11), [Name('line', Load(), lineno=126, col_offset=35)], [], None, None, lineno=126, col_offset=11), [Expr(Yield(Tuple([BinOp(Name('lno', Load(), lineno=127, col_offset=18), Add(), Num(1, lineno=127, col_offset=22), lineno=127, col_offset=18), BinOp(Str('possibly leaked markup: %r', lineno=127, col_offset=25), Mod(), Name('line', Load(), lineno=127, col_offset=56), lineno=127, col_offset=25)], Load(), lineno=127, col_offset=18), lineno=127, col_offset=12), lineno=127, col_offset=12)], [], lineno=126, col_offset=8)], [], lineno=125, col_offset=4)], [Call(Name('checker', Load(), lineno=120, col_offset=1), [Str('.html', lineno=120, col_offset=9)], [keyword('severity', Num(2, lineno=120, col_offset=27)), keyword('falsepositives', Name('True', Load(), lineno=120, col_offset=45))], None, None, lineno=120, col_offset=1)], lineno=120, col_offset=0), FunctionDef('main', arguments([Name('argv', Param(), lineno=130, col_offset=9)], None, None, []), [Assign([Name('usage', Store(), lineno=131, col_offset=4)], BinOp(Str('Usage: %s [-v] [-f] [-s sev] [-i path]* [path]\n\nOptions:  -v       verbose (print all checked file names)\n          -f       enable checkers that yield many false positives\n          -s sev   only show problems with severity >= sev\n          -i path  ignore subdir or file path\n', lineno=138, col_offset=-1), Mod(), Subscript(Name('argv', Load(), lineno=138, col_offset=6), Index(Num(0, lineno=138, col_offset=11)), Load(), lineno=138, col_offset=6), lineno=138, col_offset=-1), lineno=131, col_offset=4), TryExcept([Assign([Tuple([Name('gopts', Store(), lineno=140, col_offset=8), Name('args', Store(), lineno=140, col_offset=15)], Store(), lineno=140, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=140, col_offset=22), 'getopt', Load(), lineno=140, col_offset=22), [Subscript(Name('argv', Load(), lineno=140, col_offset=36), Slice(Num(1, lineno=140, col_offset=41), None, None), Load(), lineno=140, col_offset=36), Str('vfs:i:', lineno=140, col_offset=46)], [], None, None, lineno=140, col_offset=22), lineno=140, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=141, col_offset=11), 'GetoptError', Load(), lineno=141, col_offset=11), None, [Print(None, [Name('usage', Load(), lineno=142, col_offset=14)], True, lineno=142, col_offset=8), Return(Num(2, lineno=143, col_offset=15), lineno=143, col_offset=8)], lineno=141, col_offset=4)], [], lineno=139, col_offset=4), Assign([Name('verbose', Store(), lineno=145, col_offset=4)], Name('False', Load(), lineno=145, col_offset=14), lineno=145, col_offset=4), Assign([Name('severity', Store(), lineno=146, col_offset=4)], Num(1, lineno=146, col_offset=15), lineno=146, col_offset=4), Assign([Name('ignore', Store(), lineno=147, col_offset=4)], List([], Load(), lineno=147, col_offset=13), lineno=147, col_offset=4), Assign([Name('falsepos', Store(), lineno=148, col_offset=4)], Name('False', Load(), lineno=148, col_offset=15), lineno=148, col_offset=4), For(Tuple([Name('opt', Store(), lineno=149, col_offset=8), Name('val', Store(), lineno=149, col_offset=13)], Store(), lineno=149, col_offset=8), Name('gopts', Load(), lineno=149, col_offset=20), [If(Compare(Name('opt', Load(), lineno=150, col_offset=11), [Eq()], [Str('-v', lineno=150, col_offset=18)], lineno=150, col_offset=11), [Assign([Name('verbose', Store(), lineno=151, col_offset=12)], Name('True', Load(), lineno=151, col_offset=22), lineno=151, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=152, col_offset=13), [Eq()], [Str('-f', lineno=152, col_offset=20)], lineno=152, col_offset=13), [Assign([Name('falsepos', Store(), lineno=153, col_offset=12)], Name('True', Load(), lineno=153, col_offset=23), lineno=153, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=154, col_offset=13), [Eq()], [Str('-s', lineno=154, col_offset=20)], lineno=154, col_offset=13), [Assign([Name('severity', Store(), lineno=155, col_offset=12)], Call(Name('int', Load(), lineno=155, col_offset=23), [Name('val', Load(), lineno=155, col_offset=27)], [], None, None, lineno=155, col_offset=23), lineno=155, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=156, col_offset=13), [Eq()], [Str('-i', lineno=156, col_offset=20)], lineno=156, col_offset=13), [Expr(Call(Attribute(Name('ignore', Load(), lineno=157, col_offset=12), 'append', Load(), lineno=157, col_offset=12), [Call(Name('abspath', Load(), lineno=157, col_offset=26), [Name('val', Load(), lineno=157, col_offset=34)], [], None, None, lineno=157, col_offset=26)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12)], [], lineno=156, col_offset=13)], lineno=154, col_offset=13)], lineno=152, col_offset=13)], lineno=150, col_offset=8)], [], lineno=149, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=159, col_offset=7), [Name('args', Load(), lineno=159, col_offset=11)], [], None, None, lineno=159, col_offset=7), [Eq()], [Num(0, lineno=159, col_offset=20)], lineno=159, col_offset=7), [Assign([Name('path', Store(), lineno=160, col_offset=8)], Str('.', lineno=160, col_offset=15), lineno=160, col_offset=8)], [If(Compare(Call(Name('len', Load(), lineno=161, col_offset=9), [Name('args', Load(), lineno=161, col_offset=13)], [], None, None, lineno=161, col_offset=9), [Eq()], [Num(1, lineno=161, col_offset=22)], lineno=161, col_offset=9), [Assign([Name('path', Store(), lineno=162, col_offset=8)], Subscript(Name('args', Load(), lineno=162, col_offset=15), Index(Num(0, lineno=162, col_offset=20)), Load(), lineno=162, col_offset=15), lineno=162, col_offset=8)], [Print(None, [Name('usage', Load(), lineno=164, col_offset=14)], True, lineno=164, col_offset=8), Return(Num(2, lineno=165, col_offset=15), lineno=165, col_offset=8)], lineno=161, col_offset=9)], lineno=159, col_offset=4), If(UnaryOp(Not(), Call(Name('exists', Load(), lineno=167, col_offset=11), [Name('path', Load(), lineno=167, col_offset=18)], [], None, None, lineno=167, col_offset=11), lineno=167, col_offset=7), [Print(None, [BinOp(Str('Error: path %s does not exist', lineno=168, col_offset=14), Mod(), Name('path', Load(), lineno=168, col_offset=48), lineno=168, col_offset=14)], True, lineno=168, col_offset=8), Return(Num(2, lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=167, col_offset=4), Assign([Name('count', Store(), lineno=171, col_offset=4)], Call(Name('defaultdict', Load(), lineno=171, col_offset=12), [Name('int', Load(), lineno=171, col_offset=24)], [], None, None, lineno=171, col_offset=12), lineno=171, col_offset=4), Assign([Name('out', Store(), lineno=172, col_offset=4)], Attribute(Name('sys', Load(), lineno=172, col_offset=10), 'stdout', Load(), lineno=172, col_offset=10), lineno=172, col_offset=4), For(Tuple([Name('root', Store(), lineno=174, col_offset=8), Name('dirs', Store(), lineno=174, col_offset=14), Name('files', Store(), lineno=174, col_offset=20)], Store(), lineno=174, col_offset=8), Call(Attribute(Name('os', Load(), lineno=174, col_offset=29), 'walk', Load(), lineno=174, col_offset=29), [Name('path', Load(), lineno=174, col_offset=37)], [], None, None, lineno=174, col_offset=29), [If(Compare(Str('.svn', lineno=176, col_offset=11), [In()], [Name('dirs', Load(), lineno=176, col_offset=21)], lineno=176, col_offset=11), [Expr(Call(Attribute(Name('dirs', Load(), lineno=177, col_offset=12), 'remove', Load(), lineno=177, col_offset=12), [Str('.svn', lineno=177, col_offset=24)], [], None, None, lineno=177, col_offset=12), lineno=177, col_offset=12)], [], lineno=176, col_offset=8), If(Compare(Call(Name('abspath', Load(), lineno=180, col_offset=11), [Name('root', Load(), lineno=180, col_offset=19)], [], None, None, lineno=180, col_offset=11), [In()], [Name('ignore', Load(), lineno=180, col_offset=28)], lineno=180, col_offset=11), [Delete([Subscript(Name('dirs', Load(), lineno=181, col_offset=16), Slice(None, None, None), Del(), lineno=181, col_offset=16)], lineno=181, col_offset=12), Continue( lineno=182, col_offset=12)], [], lineno=180, col_offset=8), For(Name('fn', Store(), lineno=184, col_offset=12), Name('files', Load(), lineno=184, col_offset=18), [Assign([Name('fn', Store(), lineno=185, col_offset=12)], Call(Name('join', Load(), lineno=185, col_offset=17), [Name('root', Load(), lineno=185, col_offset=22), Name('fn', Load(), lineno=185, col_offset=28)], [], None, None, lineno=185, col_offset=17), lineno=185, col_offset=12), If(Compare(Subscript(Name('fn', Load(), lineno=186, col_offset=15), Slice(None, Num(2, lineno=186, col_offset=19), None), Load(), lineno=186, col_offset=15), [Eq()], [Str('./', lineno=186, col_offset=25)], lineno=186, col_offset=15), [Assign([Name('fn', Store(), lineno=187, col_offset=16)], Subscript(Name('fn', Load(), lineno=187, col_offset=21), Slice(Num(2, lineno=187, col_offset=24), None, None), Load(), lineno=187, col_offset=21), lineno=187, col_offset=16)], [], lineno=186, col_offset=12), If(Compare(Call(Name('abspath', Load(), lineno=190, col_offset=15), [Name('fn', Load(), lineno=190, col_offset=23)], [], None, None, lineno=190, col_offset=15), [In()], [Name('ignore', Load(), lineno=190, col_offset=30)], lineno=190, col_offset=15), [Continue( lineno=191, col_offset=16)], [], lineno=190, col_offset=12), Assign([Name('ext', Store(), lineno=193, col_offset=12)], Subscript(Call(Name('splitext', Load(), lineno=193, col_offset=18), [Name('fn', Load(), lineno=193, col_offset=27)], [], None, None, lineno=193, col_offset=18), Index(Num(1, lineno=193, col_offset=31)), Load(), lineno=193, col_offset=18), lineno=193, col_offset=12), Assign([Name('checkerlist', Store(), lineno=194, col_offset=12)], Call(Attribute(Name('checkers', Load(), lineno=194, col_offset=26), 'get', Load(), lineno=194, col_offset=26), [Name('ext', Load(), lineno=194, col_offset=39), Name('None', Load(), lineno=194, col_offset=44)], [], None, None, lineno=194, col_offset=26), lineno=194, col_offset=12), If(UnaryOp(Not(), Name('checkerlist', Load(), lineno=195, col_offset=19), lineno=195, col_offset=15), [Continue( lineno=196, col_offset=16)], [], lineno=195, col_offset=12), If(Name('verbose', Load(), lineno=198, col_offset=15), [Print(None, [BinOp(Str('Checking %s...', lineno=199, col_offset=22), Mod(), Name('fn', Load(), lineno=199, col_offset=41), lineno=199, col_offset=22)], True, lineno=199, col_offset=16)], [], lineno=198, col_offset=12), TryExcept([With(Call(Name('open', Load(), lineno=202, col_offset=21), [Name('fn', Load(), lineno=202, col_offset=26), Str('r', lineno=202, col_offset=30)], [], None, None, lineno=202, col_offset=21), Name('f', Store(), lineno=202, col_offset=38), [Assign([Name('lines', Store(), lineno=203, col_offset=20)], Call(Name('list', Load(), lineno=203, col_offset=28), [Name('f', Load(), lineno=203, col_offset=33)], [], None, None, lineno=203, col_offset=28), lineno=203, col_offset=20)], lineno=202, col_offset=21)], [ExceptHandler(Tuple([Name('IOError', Load(), lineno=204, col_offset=20), Name('OSError', Load(), lineno=204, col_offset=29)], Load(), lineno=204, col_offset=20), Name('err', Store(), lineno=204, col_offset=39), [Print(None, [BinOp(Str('%s: cannot open: %s', lineno=205, col_offset=22), Mod(), Tuple([Name('fn', Load(), lineno=205, col_offset=47), Name('err', Load(), lineno=205, col_offset=51)], Load(), lineno=205, col_offset=47), lineno=205, col_offset=22)], True, lineno=205, col_offset=16), AugAssign(Subscript(Name('count', Load(), lineno=206, col_offset=16), Index(Num(4, lineno=206, col_offset=22)), Store(), lineno=206, col_offset=16), Add(), Num(1, lineno=206, col_offset=28), lineno=206, col_offset=16), Continue( lineno=207, col_offset=16)], lineno=204, col_offset=12)], [], lineno=201, col_offset=12), For(Name('checker', Store(), lineno=209, col_offset=16), Name('checkerlist', Load(), lineno=209, col_offset=27), [If(BoolOp(And(), [Attribute(Name('checker', Load(), lineno=210, col_offset=19), 'falsepositives', Load(), lineno=210, col_offset=19), UnaryOp(Not(), Name('falsepos', Load(), lineno=210, col_offset=50), lineno=210, col_offset=46)], lineno=210, col_offset=19), [Continue( lineno=211, col_offset=20)], [], lineno=210, col_offset=16), Assign([Name('csev', Store(), lineno=212, col_offset=16)], Attribute(Name('checker', Load(), lineno=212, col_offset=23), 'severity', Load(), lineno=212, col_offset=23), lineno=212, col_offset=16), If(Compare(Name('csev', Load(), lineno=213, col_offset=19), [GtE()], [Name('severity', Load(), lineno=213, col_offset=27)], lineno=213, col_offset=19), [For(Tuple([Name('lno', Store(), lineno=214, col_offset=24), Name('msg', Store(), lineno=214, col_offset=29)], Store(), lineno=214, col_offset=24), Call(Name('checker', Load(), lineno=214, col_offset=36), [Name('fn', Load(), lineno=214, col_offset=44), Name('lines', Load(), lineno=214, col_offset=48)], [], None, None, lineno=214, col_offset=36), [Print(Name('out', Load(), lineno=215, col_offset=32), [BinOp(Str('[%d] %s:%d: %s', lineno=215, col_offset=37), Mod(), Tuple([Name('csev', Load(), lineno=215, col_offset=57), Name('fn', Load(), lineno=215, col_offset=63), Name('lno', Load(), lineno=215, col_offset=67), Name('msg', Load(), lineno=215, col_offset=72)], Load(), lineno=215, col_offset=57), lineno=215, col_offset=37)], True, lineno=215, col_offset=24), AugAssign(Subscript(Name('count', Load(), lineno=216, col_offset=24), Index(Name('csev', Load(), lineno=216, col_offset=30)), Store(), lineno=216, col_offset=24), Add(), Num(1, lineno=216, col_offset=39), lineno=216, col_offset=24)], [], lineno=214, col_offset=20)], [], lineno=213, col_offset=16)], [], lineno=209, col_offset=12)], [], lineno=184, col_offset=8)], [], lineno=174, col_offset=4), If(Name('verbose', Load(), lineno=217, col_offset=7), [Print(None, [], True, lineno=218, col_offset=8)], [], lineno=217, col_offset=4), If(UnaryOp(Not(), Name('count', Load(), lineno=219, col_offset=11), lineno=219, col_offset=7), [If(Compare(Name('severity', Load(), lineno=220, col_offset=11), [Gt()], [Num(1, lineno=220, col_offset=22)], lineno=220, col_offset=11), [Print(None, [BinOp(Str('No problems with severity >= %d found.', lineno=221, col_offset=18), Mod(), Name('severity', Load(), lineno=221, col_offset=61), lineno=221, col_offset=18)], True, lineno=221, col_offset=12)], [Print(None, [Str('No problems found.', lineno=223, col_offset=18)], True, lineno=223, col_offset=12)], lineno=220, col_offset=8)], [For(Name('severity', Store(), lineno=225, col_offset=12), Call(Name('sorted', Load(), lineno=225, col_offset=24), [Name('count', Load(), lineno=225, col_offset=31)], [], None, None, lineno=225, col_offset=24), [Assign([Name('number', Store(), lineno=226, col_offset=12)], Subscript(Name('count', Load(), lineno=226, col_offset=21), Index(Name('severity', Load(), lineno=226, col_offset=27)), Load(), lineno=226, col_offset=21), lineno=226, col_offset=12), Print(None, [BinOp(Str('%d problem%s with severity %d found.', lineno=227, col_offset=18), Mod(), Tuple([Name('number', Load(), lineno=228, col_offset=19), BoolOp(Or(), [BoolOp(And(), [Compare(Name('number', Load(), lineno=228, col_offset=27), [Gt()], [Num(1, lineno=228, col_offset=36)], lineno=228, col_offset=27), Str('s', lineno=228, col_offset=42)], lineno=228, col_offset=27), Str('', lineno=228, col_offset=49)], lineno=228, col_offset=27), Name('severity', Load(), lineno=228, col_offset=53)], Load(), lineno=228, col_offset=19), lineno=227, col_offset=18)], True, lineno=227, col_offset=12)], [], lineno=225, col_offset=8)], lineno=219, col_offset=4), Return(Call(Name('int', Load(), lineno=229, col_offset=11), [Call(Name('bool', Load(), lineno=229, col_offset=15), [Name('count', Load(), lineno=229, col_offset=20)], [], None, None, lineno=229, col_offset=15)], [], None, None, lineno=229, col_offset=11), lineno=229, col_offset=4)], [], lineno=130, col_offset=0), If(Compare(Name('__name__', Load(), lineno=232, col_offset=3), [Eq()], [Str('__main__', lineno=232, col_offset=15)], lineno=232, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=233, col_offset=4), 'exit', Load(), lineno=233, col_offset=4), [Call(Name('main', Load(), lineno=233, col_offset=13), [Attribute(Name('sys', Load(), lineno=233, col_offset=18), 'argv', Load(), lineno=233, col_offset=18)], [], None, None, lineno=233, col_offset=13)], [], None, None, lineno=233, col_offset=4), lineno=233, col_offset=4)], [], lineno=232, col_offset=0)])
