Module([Import([alias('unittest', None)], lineno=2, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=3, col_offset=0), Import([alias('textwrap', None)], lineno=4, col_offset=0), ClassDef('ComplexArgsTestCase', [Attribute(Name('unittest', Load(), lineno=6, col_offset=26), 'TestCase', Load(), lineno=6, col_offset=26)], [FunctionDef('check', arguments([Name('self', Param(), lineno=8, col_offset=14), Name('func', Param(), lineno=8, col_offset=20), Name('expected', Param(), lineno=8, col_offset=26)], 'args', None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=9, col_offset=8), 'assertEqual', Load(), lineno=9, col_offset=8), [Call(Name('func', Load(), lineno=9, col_offset=25), [], [], Name('args', Load(), lineno=9, col_offset=31), None, lineno=9, col_offset=25), Name('expected', Load(), lineno=9, col_offset=38)], [], None, None, lineno=9, col_offset=8), lineno=9, col_offset=8)], [], lineno=8, col_offset=4), FunctionDef('test_func_parens_no_unpacking', arguments([Name('self', Param(), lineno=17, col_offset=38)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=18, col_offset=13), 'dedent', Load(), lineno=18, col_offset=13), [Str('\n        def f(((((x))))): return x\n        self.check(f, 1, 1)\n        # Inner parens are elided, same as: f(x,)\n        def f(((x)),): return x\n        self.check(f, 2, 2)\n        ', lineno=24, col_offset=-1)], [], None, None, lineno=18, col_offset=13), None, None, lineno=18, col_offset=8)], [], lineno=17, col_offset=4), FunctionDef('test_func_1', arguments([Name('self', Param(), lineno=26, col_offset=20)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=27, col_offset=13), 'dedent', Load(), lineno=27, col_offset=13), [Str('\n        def f(((((x),)))): return x\n        self.check(f, 3, (3,))\n        def f(((((x)),))): return x\n        self.check(f, 4, (4,))\n        def f(((((x))),)): return x\n        self.check(f, 5, (5,))\n        def f(((x),)): return x\n        self.check(f, 6, (6,))\n        ', lineno=36, col_offset=-1)], [], None, None, lineno=27, col_offset=13), None, None, lineno=27, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('test_func_2', arguments([Name('self', Param(), lineno=38, col_offset=20)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=39, col_offset=13), 'dedent', Load(), lineno=39, col_offset=13), [Str('\n        def f(((((x)),),)): return x\n        self.check(f, 2, ((2,),))\n        ', lineno=42, col_offset=-1)], [], None, None, lineno=39, col_offset=13), None, None, lineno=39, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('test_func_3', arguments([Name('self', Param(), lineno=44, col_offset=20)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=45, col_offset=13), 'dedent', Load(), lineno=45, col_offset=13), [Str('\n        def f((((((x)),),),)): return x\n        self.check(f, 3, (((3,),),))\n        ', lineno=48, col_offset=-1)], [], None, None, lineno=45, col_offset=13), None, None, lineno=45, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('test_func_complex', arguments([Name('self', Param(), lineno=50, col_offset=26)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=51, col_offset=13), 'dedent', Load(), lineno=51, col_offset=13), [Str('\n        def f((((((x)),),),), a, b, c): return x, a, b, c\n        self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)\n\n        def f(((((((x)),)),),), a, b, c): return x, a, b, c\n        self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)\n\n        def f(a, b, c, ((((((x)),)),),)): return a, b, c, x\n        self.check(f, (9, 8, 7, 3), 9, 8, 7, (((3,),),))\n        ', lineno=60, col_offset=-1)], [], None, None, lineno=51, col_offset=13), None, None, lineno=51, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('test_lambda_parens_no_unpacking', arguments([Name('self', Param(), lineno=65, col_offset=40)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=66, col_offset=13), 'dedent', Load(), lineno=66, col_offset=13), [Str('\n        f = lambda (((((x))))): x\n        self.check(f, 1, 1)\n        # Inner parens are elided, same as: f(x,)\n        f = lambda ((x)),: x\n        self.check(f, 2, 2)\n        ', lineno=72, col_offset=-1)], [], None, None, lineno=66, col_offset=13), None, None, lineno=66, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('test_lambda_1', arguments([Name('self', Param(), lineno=74, col_offset=22)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=75, col_offset=13), 'dedent', Load(), lineno=75, col_offset=13), [Str('\n        f = lambda (((((x),)))): x\n        self.check(f, 3, (3,))\n        f = lambda (((((x)),))): x\n        self.check(f, 4, (4,))\n        f = lambda (((((x))),)): x\n        self.check(f, 5, (5,))\n        f = lambda (((x),)): x\n        self.check(f, 6, (6,))\n        ', lineno=84, col_offset=-1)], [], None, None, lineno=75, col_offset=13), None, None, lineno=75, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('test_lambda_2', arguments([Name('self', Param(), lineno=86, col_offset=22)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=87, col_offset=13), 'dedent', Load(), lineno=87, col_offset=13), [Str('\n        f = lambda (((((x)),),)): x\n        self.check(f, 2, ((2,),))\n        ', lineno=90, col_offset=-1)], [], None, None, lineno=87, col_offset=13), None, None, lineno=87, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('test_lambda_3', arguments([Name('self', Param(), lineno=92, col_offset=22)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=93, col_offset=13), 'dedent', Load(), lineno=93, col_offset=13), [Str('\n        f = lambda ((((((x)),),),)): x\n        self.check(f, 3, (((3,),),))\n        ', lineno=96, col_offset=-1)], [], None, None, lineno=93, col_offset=13), None, None, lineno=93, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('test_lambda_complex', arguments([Name('self', Param(), lineno=98, col_offset=28)], None, None, []), [Exec(Call(Attribute(Name('textwrap', Load(), lineno=99, col_offset=13), 'dedent', Load(), lineno=99, col_offset=13), [Str('\n        f = lambda (((((x)),),),), a, b, c: (x, a, b, c)\n        self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)\n\n        f = lambda ((((((x)),)),),), a, b, c: (x, a, b, c)\n        self.check(f, (3, 9, 8, 7), (((3,),),), 9, 8, 7)\n\n        f = lambda a, b, c, ((((((x)),)),),): (a, b, c, x)\n        self.check(f, (9, 8, 7, 3), 9, 8, 7, (((3,),),))\n        ', lineno=108, col_offset=-1)], [], None, None, lineno=99, col_offset=13), None, None, lineno=99, col_offset=8)], [], lineno=98, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [With(Call(Attribute(Name('test_support', Load(), lineno=112, col_offset=9), 'check_py3k_warnings', Load(), lineno=112, col_offset=9), [Tuple([Str('tuple parameter unpacking has been removed', lineno=113, col_offset=13), Name('SyntaxWarning', Load(), lineno=113, col_offset=59)], Load(), lineno=113, col_offset=13), Tuple([Str('parenthesized argument names are invalid', lineno=114, col_offset=13), Name('SyntaxWarning', Load(), lineno=114, col_offset=57)], Load(), lineno=114, col_offset=13)], [], None, None, lineno=112, col_offset=9), None, [Expr(Call(Attribute(Name('test_support', Load(), lineno=115, col_offset=8), 'run_unittest', Load(), lineno=115, col_offset=8), [Name('ComplexArgsTestCase', Load(), lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=8), lineno=115, col_offset=8)], lineno=112, col_offset=9)], [], lineno=111, col_offset=0), If(Compare(Name('__name__', Load(), lineno=117, col_offset=3), [Eq()], [Str('__main__', lineno=117, col_offset=15)], lineno=117, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=118, col_offset=4), [], [], None, None, lineno=118, col_offset=4), lineno=118, col_offset=4)], [], lineno=117, col_offset=0)])
