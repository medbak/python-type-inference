Module([Expr(Str('Parser engine for the grammar tables generated by pgen.\n\nThe grammar table must be loaded first.\n\nSee Parser/parser.c in the Python distribution for additional info on\nhow this parsing engine works.\n\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), ImportFrom(None, [alias('token', None)], 1, lineno=14, col_offset=0), ClassDef('ParseError', [Name('Exception', Load(), lineno=16, col_offset=17)], [Expr(Str('Exception to signal the parser is stuck.', lineno=17, col_offset=4), lineno=17, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=19, col_offset=17), Name('msg', Param(), lineno=19, col_offset=23), Name('type', Param(), lineno=19, col_offset=28), Name('value', Param(), lineno=19, col_offset=34), Name('context', Param(), lineno=19, col_offset=41)], None, None, []), [Expr(Call(Attribute(Name('Exception', Load(), lineno=20, col_offset=8), '__init__', Load(), lineno=20, col_offset=8), [Name('self', Load(), lineno=20, col_offset=27), BinOp(Str('%s: type=%r, value=%r, context=%r', lineno=20, col_offset=33), Mod(), Tuple([Name('msg', Load(), lineno=21, col_offset=28), Name('type', Load(), lineno=21, col_offset=33), Name('value', Load(), lineno=21, col_offset=39), Name('context', Load(), lineno=21, col_offset=46)], Load(), lineno=21, col_offset=28), lineno=20, col_offset=33)], [], None, None, lineno=20, col_offset=8), lineno=20, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=22, col_offset=8), 'msg', Store(), lineno=22, col_offset=8)], Name('msg', Load(), lineno=22, col_offset=19), lineno=22, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'type', Store(), lineno=23, col_offset=8)], Name('type', Load(), lineno=23, col_offset=20), lineno=23, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=24, col_offset=8), 'value', Store(), lineno=24, col_offset=8)], Name('value', Load(), lineno=24, col_offset=21), lineno=24, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=25, col_offset=8), 'context', Store(), lineno=25, col_offset=8)], Name('context', Load(), lineno=25, col_offset=23), lineno=25, col_offset=8)], [], lineno=19, col_offset=4)], [], lineno=16, col_offset=0), ClassDef('Parser', [Name('object', Load(), lineno=27, col_offset=13)], [Expr(Str('Parser engine.\n\n    The proper usage sequence is:\n\n    p = Parser(grammar, [converter])  # create instance\n    p.setup([start])                  # prepare for parsing\n    <for each input token>:\n        if p.addtoken(...):           # parse a token; may raise ParseError\n            break\n    root = p.rootnode                 # root of abstract syntax tree\n\n    A Parser instance may be reused by calling setup() repeatedly.\n\n    A Parser instance contains state pertaining to the current token\n    sequence, and should not be used concurrently by different threads\n    to parse separate token sequences.\n\n    See driver.py for how to get input tokens by tokenizing a file or\n    string.\n\n    Parsing is complete when addtoken() returns True; the root of the\n    abstract syntax tree can then be retrieved from the rootnode\n    instance variable.  When a syntax error occurs, addtoken() raises\n    the ParseError exception.  There is no error recovery; the parser\n    cannot be used after a syntax error was reported (but it can be\n    reinitialized by calling setup()).\n\n    ', lineno=55, col_offset=-1), lineno=55, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=57, col_offset=17), Name('grammar', Param(), lineno=57, col_offset=23), Name('convert', Param(), lineno=57, col_offset=32)], None, None, [Name('None', Load(), lineno=57, col_offset=40)]), [Expr(Str('Constructor.\n\n        The grammar argument is a grammar.Grammar instance; see the\n        grammar module for more information.\n\n        The parser is not ready yet for parsing; you must call the\n        setup() method to get it started.\n\n        The optional convert argument is a function mapping concrete\n        syntax tree nodes to abstract syntax tree nodes.  If not\n        given, no conversion is done and the syntax tree produced is\n        the concrete syntax tree.  If given, it must be a function of\n        two arguments, the first being the grammar (a grammar.Grammar\n        instance), and the second being the concrete syntax tree node\n        to be converted.  The syntax tree is converted from the bottom\n        up.\n\n        A concrete syntax tree node is a (type, value, context, nodes)\n        tuple, where type is the node type (a token or symbol number),\n        value is None for symbols and a string for tokens, context is\n        None or an opaque value used for error reporting (typically a\n        (lineno, offset) pair), and nodes is a list of children for\n        symbols, and None for tokens.\n\n        An abstract syntax tree node may be anything; this is entirely\n        up to the converter function.\n\n        ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=86, col_offset=8), 'grammar', Store(), lineno=86, col_offset=8)], Name('grammar', Load(), lineno=86, col_offset=23), lineno=86, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=87, col_offset=8), 'convert', Store(), lineno=87, col_offset=8)], BoolOp(Or(), [Name('convert', Load(), lineno=87, col_offset=23), Lambda(arguments([Name('grammar', Param(), lineno=87, col_offset=42), Name('node', Param(), lineno=87, col_offset=51)], None, None, []), Name('node', Load(), lineno=87, col_offset=57), lineno=87, col_offset=35)], lineno=87, col_offset=23), lineno=87, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('setup', arguments([Name('self', Param(), lineno=89, col_offset=14), Name('start', Param(), lineno=89, col_offset=20)], None, None, [Name('None', Load(), lineno=89, col_offset=26)]), [Expr(Str("Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        ", lineno=101, col_offset=-1), lineno=101, col_offset=-1), If(Compare(Name('start', Load(), lineno=102, col_offset=11), [Is()], [Name('None', Load(), lineno=102, col_offset=20)], lineno=102, col_offset=11), [Assign([Name('start', Store(), lineno=103, col_offset=12)], Attribute(Attribute(Name('self', Load(), lineno=103, col_offset=20), 'grammar', Load(), lineno=103, col_offset=20), 'start', Load(), lineno=103, col_offset=20), lineno=103, col_offset=12)], [], lineno=102, col_offset=8), Assign([Name('newnode', Store(), lineno=107, col_offset=8)], Tuple([Name('start', Load(), lineno=107, col_offset=19), Name('None', Load(), lineno=107, col_offset=26), Name('None', Load(), lineno=107, col_offset=32), List([], Load(), lineno=107, col_offset=38)], Load(), lineno=107, col_offset=19), lineno=107, col_offset=8), Assign([Name('stackentry', Store(), lineno=108, col_offset=8)], Tuple([Subscript(Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=22), 'grammar', Load(), lineno=108, col_offset=22), 'dfas', Load(), lineno=108, col_offset=22), Index(Name('start', Load(), lineno=108, col_offset=40)), Load(), lineno=108, col_offset=22), Num(0, lineno=108, col_offset=48), Name('newnode', Load(), lineno=108, col_offset=51)], Load(), lineno=108, col_offset=22), lineno=108, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=109, col_offset=8), 'stack', Store(), lineno=109, col_offset=8)], List([Name('stackentry', Load(), lineno=109, col_offset=22)], Load(), lineno=109, col_offset=21), lineno=109, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'rootnode', Store(), lineno=110, col_offset=8)], Name('None', Load(), lineno=110, col_offset=24), lineno=110, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'used_names', Store(), lineno=111, col_offset=8)], Call(Name('set', Load(), lineno=111, col_offset=26), [], [], None, None, lineno=111, col_offset=26), lineno=111, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('addtoken', arguments([Name('self', Param(), lineno=113, col_offset=17), Name('type', Param(), lineno=113, col_offset=23), Name('value', Param(), lineno=113, col_offset=29), Name('context', Param(), lineno=113, col_offset=36)], None, None, []), [Expr(Str('Add a token; return True iff this is the end of the program.', lineno=114, col_offset=8), lineno=114, col_offset=8), Assign([Name('ilabel', Store(), lineno=116, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=116, col_offset=17), 'classify', Load(), lineno=116, col_offset=17), [Name('type', Load(), lineno=116, col_offset=31), Name('value', Load(), lineno=116, col_offset=37), Name('context', Load(), lineno=116, col_offset=44)], [], None, None, lineno=116, col_offset=17), lineno=116, col_offset=8), While(Name('True', Load(), lineno=118, col_offset=14), [Assign([Tuple([Name('dfa', Store(), lineno=119, col_offset=12), Name('state', Store(), lineno=119, col_offset=17), Name('node', Store(), lineno=119, col_offset=24)], Store(), lineno=119, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=119, col_offset=31), 'stack', Load(), lineno=119, col_offset=31), Index(Num(-1, lineno=119, col_offset=43)), Load(), lineno=119, col_offset=31), lineno=119, col_offset=12), Assign([Tuple([Name('states', Store(), lineno=120, col_offset=12), Name('first', Store(), lineno=120, col_offset=20)], Store(), lineno=120, col_offset=12)], Name('dfa', Load(), lineno=120, col_offset=28), lineno=120, col_offset=12), Assign([Name('arcs', Store(), lineno=121, col_offset=12)], Subscript(Name('states', Load(), lineno=121, col_offset=19), Index(Name('state', Load(), lineno=121, col_offset=26)), Load(), lineno=121, col_offset=19), lineno=121, col_offset=12), For(Tuple([Name('i', Store(), lineno=123, col_offset=16), Name('newstate', Store(), lineno=123, col_offset=19)], Store(), lineno=123, col_offset=16), Name('arcs', Load(), lineno=123, col_offset=31), [Assign([Tuple([Name('t', Store(), lineno=124, col_offset=16), Name('v', Store(), lineno=124, col_offset=19)], Store(), lineno=124, col_offset=16)], Subscript(Attribute(Attribute(Name('self', Load(), lineno=124, col_offset=23), 'grammar', Load(), lineno=124, col_offset=23), 'labels', Load(), lineno=124, col_offset=23), Index(Name('i', Load(), lineno=124, col_offset=43)), Load(), lineno=124, col_offset=23), lineno=124, col_offset=16), If(Compare(Name('ilabel', Load(), lineno=125, col_offset=19), [Eq()], [Name('i', Load(), lineno=125, col_offset=29)], lineno=125, col_offset=19), [Assert(Compare(Name('t', Load(), lineno=127, col_offset=27), [Lt()], [Num(256, lineno=127, col_offset=31)], lineno=127, col_offset=27), None, lineno=127, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=129, col_offset=20), 'shift', Load(), lineno=129, col_offset=20), [Name('type', Load(), lineno=129, col_offset=31), Name('value', Load(), lineno=129, col_offset=37), Name('newstate', Load(), lineno=129, col_offset=44), Name('context', Load(), lineno=129, col_offset=54)], [], None, None, lineno=129, col_offset=20), lineno=129, col_offset=20), Assign([Name('state', Store(), lineno=131, col_offset=20)], Name('newstate', Load(), lineno=131, col_offset=28), lineno=131, col_offset=20), While(Compare(Subscript(Name('states', Load(), lineno=132, col_offset=26), Index(Name('state', Load(), lineno=132, col_offset=33)), Load(), lineno=132, col_offset=26), [Eq()], [List([Tuple([Num(0, lineno=132, col_offset=45), Name('state', Load(), lineno=132, col_offset=48)], Load(), lineno=132, col_offset=45)], Load(), lineno=132, col_offset=43)], lineno=132, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=24), 'pop', Load(), lineno=133, col_offset=24), [], [], None, None, lineno=133, col_offset=24), lineno=133, col_offset=24), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=134, col_offset=31), 'stack', Load(), lineno=134, col_offset=31), lineno=134, col_offset=27), [Return(Name('True', Load(), lineno=136, col_offset=35), lineno=136, col_offset=28)], [], lineno=134, col_offset=24), Assign([Tuple([Name('dfa', Store(), lineno=137, col_offset=24), Name('state', Store(), lineno=137, col_offset=29), Name('node', Store(), lineno=137, col_offset=36)], Store(), lineno=137, col_offset=24)], Subscript(Attribute(Name('self', Load(), lineno=137, col_offset=43), 'stack', Load(), lineno=137, col_offset=43), Index(Num(-1, lineno=137, col_offset=55)), Load(), lineno=137, col_offset=43), lineno=137, col_offset=24), Assign([Tuple([Name('states', Store(), lineno=138, col_offset=24), Name('first', Store(), lineno=138, col_offset=32)], Store(), lineno=138, col_offset=24)], Name('dfa', Load(), lineno=138, col_offset=40), lineno=138, col_offset=24)], [], lineno=132, col_offset=20), Return(Name('False', Load(), lineno=140, col_offset=27), lineno=140, col_offset=20)], [If(Compare(Name('t', Load(), lineno=141, col_offset=21), [GtE()], [Num(256, lineno=141, col_offset=26)], lineno=141, col_offset=21), [Assign([Name('itsdfa', Store(), lineno=143, col_offset=20)], Subscript(Attribute(Attribute(Name('self', Load(), lineno=143, col_offset=29), 'grammar', Load(), lineno=143, col_offset=29), 'dfas', Load(), lineno=143, col_offset=29), Index(Name('t', Load(), lineno=143, col_offset=47)), Load(), lineno=143, col_offset=29), lineno=143, col_offset=20), Assign([Tuple([Name('itsstates', Store(), lineno=144, col_offset=20), Name('itsfirst', Store(), lineno=144, col_offset=31)], Store(), lineno=144, col_offset=20)], Name('itsdfa', Load(), lineno=144, col_offset=42), lineno=144, col_offset=20), If(Compare(Name('ilabel', Load(), lineno=145, col_offset=23), [In()], [Name('itsfirst', Load(), lineno=145, col_offset=33)], lineno=145, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=24), 'push', Load(), lineno=147, col_offset=24), [Name('t', Load(), lineno=147, col_offset=34), Subscript(Attribute(Attribute(Name('self', Load(), lineno=147, col_offset=37), 'grammar', Load(), lineno=147, col_offset=37), 'dfas', Load(), lineno=147, col_offset=37), Index(Name('t', Load(), lineno=147, col_offset=55)), Load(), lineno=147, col_offset=37), Name('newstate', Load(), lineno=147, col_offset=59), Name('context', Load(), lineno=147, col_offset=69)], [], None, None, lineno=147, col_offset=24), lineno=147, col_offset=24), Break( lineno=148, col_offset=24)], [], lineno=145, col_offset=20)], [], lineno=141, col_offset=21)], lineno=125, col_offset=16)], [If(Compare(Tuple([Num(0, lineno=150, col_offset=20), Name('state', Load(), lineno=150, col_offset=23)], Load(), lineno=150, col_offset=20), [In()], [Name('arcs', Load(), lineno=150, col_offset=33)], lineno=150, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=20), 'pop', Load(), lineno=152, col_offset=20), [], [], None, None, lineno=152, col_offset=20), lineno=152, col_offset=20), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=153, col_offset=27), 'stack', Load(), lineno=153, col_offset=27), lineno=153, col_offset=23), [Raise(Call(Name('ParseError', Load(), lineno=155, col_offset=30), [Str('too much input', lineno=155, col_offset=41), Name('type', Load(), lineno=156, col_offset=41), Name('value', Load(), lineno=156, col_offset=47), Name('context', Load(), lineno=156, col_offset=54)], [], None, None, lineno=155, col_offset=30), None, None, lineno=155, col_offset=24)], [], lineno=153, col_offset=20)], [Raise(Call(Name('ParseError', Load(), lineno=159, col_offset=26), [Str('bad input', lineno=159, col_offset=37), Name('type', Load(), lineno=159, col_offset=50), Name('value', Load(), lineno=159, col_offset=56), Name('context', Load(), lineno=159, col_offset=63)], [], None, None, lineno=159, col_offset=26), None, None, lineno=159, col_offset=20)], lineno=150, col_offset=16)], lineno=123, col_offset=12)], [], lineno=118, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('classify', arguments([Name('self', Param(), lineno=161, col_offset=17), Name('type', Param(), lineno=161, col_offset=23), Name('value', Param(), lineno=161, col_offset=29), Name('context', Param(), lineno=161, col_offset=36)], None, None, []), [Expr(Str('Turn a token into a label.  (Internal)', lineno=162, col_offset=8), lineno=162, col_offset=8), If(Compare(Name('type', Load(), lineno=163, col_offset=11), [Eq()], [Attribute(Name('token', Load(), lineno=163, col_offset=19), 'NAME', Load(), lineno=163, col_offset=19)], lineno=163, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=165, col_offset=12), 'used_names', Load(), lineno=165, col_offset=12), 'add', Load(), lineno=165, col_offset=12), [Name('value', Load(), lineno=165, col_offset=32)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12), Assign([Name('ilabel', Store(), lineno=167, col_offset=12)], Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=167, col_offset=21), 'grammar', Load(), lineno=167, col_offset=21), 'keywords', Load(), lineno=167, col_offset=21), 'get', Load(), lineno=167, col_offset=21), [Name('value', Load(), lineno=167, col_offset=47)], [], None, None, lineno=167, col_offset=21), lineno=167, col_offset=12), If(Compare(Name('ilabel', Load(), lineno=168, col_offset=15), [IsNot()], [Name('None', Load(), lineno=168, col_offset=29)], lineno=168, col_offset=15), [Return(Name('ilabel', Load(), lineno=169, col_offset=23), lineno=169, col_offset=16)], [], lineno=168, col_offset=12)], [], lineno=163, col_offset=8), Assign([Name('ilabel', Store(), lineno=170, col_offset=8)], Call(Attribute(Attribute(Attribute(Name('self', Load(), lineno=170, col_offset=17), 'grammar', Load(), lineno=170, col_offset=17), 'tokens', Load(), lineno=170, col_offset=17), 'get', Load(), lineno=170, col_offset=17), [Name('type', Load(), lineno=170, col_offset=41)], [], None, None, lineno=170, col_offset=17), lineno=170, col_offset=8), If(Compare(Name('ilabel', Load(), lineno=171, col_offset=11), [Is()], [Name('None', Load(), lineno=171, col_offset=21)], lineno=171, col_offset=11), [Raise(Call(Name('ParseError', Load(), lineno=172, col_offset=18), [Str('bad token', lineno=172, col_offset=29), Name('type', Load(), lineno=172, col_offset=42), Name('value', Load(), lineno=172, col_offset=48), Name('context', Load(), lineno=172, col_offset=55)], [], None, None, lineno=172, col_offset=18), None, None, lineno=172, col_offset=12)], [], lineno=171, col_offset=8), Return(Name('ilabel', Load(), lineno=173, col_offset=15), lineno=173, col_offset=8)], [], lineno=161, col_offset=4), FunctionDef('shift', arguments([Name('self', Param(), lineno=175, col_offset=14), Name('type', Param(), lineno=175, col_offset=20), Name('value', Param(), lineno=175, col_offset=26), Name('newstate', Param(), lineno=175, col_offset=33), Name('context', Param(), lineno=175, col_offset=43)], None, None, []), [Expr(Str('Shift a token.  (Internal)', lineno=176, col_offset=8), lineno=176, col_offset=8), Assign([Tuple([Name('dfa', Store(), lineno=177, col_offset=8), Name('state', Store(), lineno=177, col_offset=13), Name('node', Store(), lineno=177, col_offset=20)], Store(), lineno=177, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=177, col_offset=27), 'stack', Load(), lineno=177, col_offset=27), Index(Num(-1, lineno=177, col_offset=39)), Load(), lineno=177, col_offset=27), lineno=177, col_offset=8), Assign([Name('newnode', Store(), lineno=178, col_offset=8)], Tuple([Name('type', Load(), lineno=178, col_offset=19), Name('value', Load(), lineno=178, col_offset=25), Name('context', Load(), lineno=178, col_offset=32), Name('None', Load(), lineno=178, col_offset=41)], Load(), lineno=178, col_offset=19), lineno=178, col_offset=8), Assign([Name('newnode', Store(), lineno=179, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=179, col_offset=18), 'convert', Load(), lineno=179, col_offset=18), [Attribute(Name('self', Load(), lineno=179, col_offset=31), 'grammar', Load(), lineno=179, col_offset=31), Name('newnode', Load(), lineno=179, col_offset=45)], [], None, None, lineno=179, col_offset=18), lineno=179, col_offset=8), If(Compare(Name('newnode', Load(), lineno=180, col_offset=11), [IsNot()], [Name('None', Load(), lineno=180, col_offset=26)], lineno=180, col_offset=11), [Expr(Call(Attribute(Subscript(Name('node', Load(), lineno=181, col_offset=12), Index(Num(-1, lineno=181, col_offset=18)), Load(), lineno=181, col_offset=12), 'append', Load(), lineno=181, col_offset=12), [Name('newnode', Load(), lineno=181, col_offset=28)], [], None, None, lineno=181, col_offset=12), lineno=181, col_offset=12)], [], lineno=180, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=182, col_offset=8), 'stack', Load(), lineno=182, col_offset=8), Index(Num(-1, lineno=182, col_offset=20)), Store(), lineno=182, col_offset=8)], Tuple([Name('dfa', Load(), lineno=182, col_offset=26), Name('newstate', Load(), lineno=182, col_offset=31), Name('node', Load(), lineno=182, col_offset=41)], Load(), lineno=182, col_offset=26), lineno=182, col_offset=8)], [], lineno=175, col_offset=4), FunctionDef('push', arguments([Name('self', Param(), lineno=184, col_offset=13), Name('type', Param(), lineno=184, col_offset=19), Name('newdfa', Param(), lineno=184, col_offset=25), Name('newstate', Param(), lineno=184, col_offset=33), Name('context', Param(), lineno=184, col_offset=43)], None, None, []), [Expr(Str('Push a nonterminal.  (Internal)', lineno=185, col_offset=8), lineno=185, col_offset=8), Assign([Tuple([Name('dfa', Store(), lineno=186, col_offset=8), Name('state', Store(), lineno=186, col_offset=13), Name('node', Store(), lineno=186, col_offset=20)], Store(), lineno=186, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=186, col_offset=27), 'stack', Load(), lineno=186, col_offset=27), Index(Num(-1, lineno=186, col_offset=39)), Load(), lineno=186, col_offset=27), lineno=186, col_offset=8), Assign([Name('newnode', Store(), lineno=187, col_offset=8)], Tuple([Name('type', Load(), lineno=187, col_offset=19), Name('None', Load(), lineno=187, col_offset=25), Name('context', Load(), lineno=187, col_offset=31), List([], Load(), lineno=187, col_offset=40)], Load(), lineno=187, col_offset=19), lineno=187, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=188, col_offset=8), 'stack', Load(), lineno=188, col_offset=8), Index(Num(-1, lineno=188, col_offset=20)), Store(), lineno=188, col_offset=8)], Tuple([Name('dfa', Load(), lineno=188, col_offset=26), Name('newstate', Load(), lineno=188, col_offset=31), Name('node', Load(), lineno=188, col_offset=41)], Load(), lineno=188, col_offset=26), lineno=188, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=189, col_offset=8), 'stack', Load(), lineno=189, col_offset=8), 'append', Load(), lineno=189, col_offset=8), [Tuple([Name('newdfa', Load(), lineno=189, col_offset=27), Num(0, lineno=189, col_offset=35), Name('newnode', Load(), lineno=189, col_offset=38)], Load(), lineno=189, col_offset=27)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=191, col_offset=12)], None, None, []), [Expr(Str('Pop a nonterminal.  (Internal)', lineno=192, col_offset=8), lineno=192, col_offset=8), Assign([Tuple([Name('popdfa', Store(), lineno=193, col_offset=8), Name('popstate', Store(), lineno=193, col_offset=16), Name('popnode', Store(), lineno=193, col_offset=26)], Store(), lineno=193, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=193, col_offset=36), 'stack', Load(), lineno=193, col_offset=36), 'pop', Load(), lineno=193, col_offset=36), [], [], None, None, lineno=193, col_offset=36), lineno=193, col_offset=8), Assign([Name('newnode', Store(), lineno=194, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=194, col_offset=18), 'convert', Load(), lineno=194, col_offset=18), [Attribute(Name('self', Load(), lineno=194, col_offset=31), 'grammar', Load(), lineno=194, col_offset=31), Name('popnode', Load(), lineno=194, col_offset=45)], [], None, None, lineno=194, col_offset=18), lineno=194, col_offset=8), If(Compare(Name('newnode', Load(), lineno=195, col_offset=11), [IsNot()], [Name('None', Load(), lineno=195, col_offset=26)], lineno=195, col_offset=11), [If(Attribute(Name('self', Load(), lineno=196, col_offset=15), 'stack', Load(), lineno=196, col_offset=15), [Assign([Tuple([Name('dfa', Store(), lineno=197, col_offset=16), Name('state', Store(), lineno=197, col_offset=21), Name('node', Store(), lineno=197, col_offset=28)], Store(), lineno=197, col_offset=16)], Subscript(Attribute(Name('self', Load(), lineno=197, col_offset=35), 'stack', Load(), lineno=197, col_offset=35), Index(Num(-1, lineno=197, col_offset=47)), Load(), lineno=197, col_offset=35), lineno=197, col_offset=16), Expr(Call(Attribute(Subscript(Name('node', Load(), lineno=198, col_offset=16), Index(Num(-1, lineno=198, col_offset=22)), Load(), lineno=198, col_offset=16), 'append', Load(), lineno=198, col_offset=16), [Name('newnode', Load(), lineno=198, col_offset=32)], [], None, None, lineno=198, col_offset=16), lineno=198, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=200, col_offset=16), 'rootnode', Store(), lineno=200, col_offset=16)], Name('newnode', Load(), lineno=200, col_offset=32), lineno=200, col_offset=16), Assign([Attribute(Attribute(Name('self', Load(), lineno=201, col_offset=16), 'rootnode', Load(), lineno=201, col_offset=16), 'used_names', Store(), lineno=201, col_offset=16)], Attribute(Name('self', Load(), lineno=201, col_offset=43), 'used_names', Load(), lineno=201, col_offset=43), lineno=201, col_offset=16)], lineno=196, col_offset=12)], [], lineno=195, col_offset=8)], [], lineno=191, col_offset=4)], [], lineno=27, col_offset=0)])
