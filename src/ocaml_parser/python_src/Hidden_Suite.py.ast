Module([Expr(Str('Suite Hidden Suite: Hidden Terms and Events for controlling the System Events application\nLevel 1, version 1\n\nGenerated from /System/Library/CoreServices/System Events.app\nAETE/AEUT resource version 1/0, language 0, script 0\n', lineno=6, col_offset=-1), lineno=6, col_offset=-1), Import([alias('aetools', None)], lineno=8, col_offset=0), Import([alias('MacOS', None)], lineno=9, col_offset=0), Assign([Name('_code', Store(), lineno=11, col_offset=0)], Str('tpnm', lineno=11, col_offset=8), lineno=11, col_offset=0), ImportFrom('StdSuites.Type_Names_Suite', [alias('*', None)], 0, lineno=13, col_offset=0), ClassDef('Hidden_Suite_Events', [Name('Type_Names_Suite_Events', Load(), lineno=14, col_offset=26)], [FunctionDef('do_script', arguments([Name('self', Param(), lineno=16, col_offset=18), Name('_object', Param(), lineno=16, col_offset=24), Name('_attributes', Param(), lineno=16, col_offset=33)], None, '_arguments', [Dict([], [], lineno=16, col_offset=45)]), [Expr(Str('do script: Execute an OSA script.\n        Required argument: the object for the command\n        Keyword argument _attributes: AppleEvent attribute dictionary\n        ', lineno=20, col_offset=-1), lineno=20, col_offset=-1), Assign([Name('_code', Store(), lineno=21, col_offset=8)], Str('misc', lineno=21, col_offset=16), lineno=21, col_offset=8), Assign([Name('_subcode', Store(), lineno=22, col_offset=8)], Str('dosc', lineno=22, col_offset=19), lineno=22, col_offset=8), If(Name('_arguments', Load(), lineno=24, col_offset=11), [Raise(Name('TypeError', Load(), lineno=24, col_offset=29), Str('No optional args expected', lineno=24, col_offset=40), None, lineno=24, col_offset=23)], [], lineno=24, col_offset=8), Assign([Subscript(Name('_arguments', Load(), lineno=25, col_offset=8), Index(Str('----', lineno=25, col_offset=19)), Store(), lineno=25, col_offset=8)], Name('_object', Load(), lineno=25, col_offset=29), lineno=25, col_offset=8), Assign([Tuple([Name('_reply', Store(), lineno=28, col_offset=8), Name('_arguments', Store(), lineno=28, col_offset=16), Name('_attributes', Store(), lineno=28, col_offset=28)], Store(), lineno=28, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=28, col_offset=42), 'send', Load(), lineno=28, col_offset=42), [Name('_code', Load(), lineno=28, col_offset=52), Name('_subcode', Load(), lineno=28, col_offset=59), Name('_arguments', Load(), lineno=29, col_offset=16), Name('_attributes', Load(), lineno=29, col_offset=28)], [], None, None, lineno=28, col_offset=42), lineno=28, col_offset=8), If(Call(Attribute(Name('_arguments', Load(), lineno=30, col_offset=11), 'get', Load(), lineno=30, col_offset=11), [Str('errn', lineno=30, col_offset=26), Num(0, lineno=30, col_offset=34)], [], None, None, lineno=30, col_offset=11), [Raise(Attribute(Name('aetools', Load(), lineno=31, col_offset=18), 'Error', Load(), lineno=31, col_offset=18), Call(Attribute(Name('aetools', Load(), lineno=31, col_offset=33), 'decodeerror', Load(), lineno=31, col_offset=33), [Name('_arguments', Load(), lineno=31, col_offset=53)], [], None, None, lineno=31, col_offset=33), None, lineno=31, col_offset=12)], [], lineno=30, col_offset=8), If(Call(Attribute(Name('_arguments', Load(), lineno=33, col_offset=11), 'has_key', Load(), lineno=33, col_offset=11), [Str('----', lineno=33, col_offset=30)], [], None, None, lineno=33, col_offset=11), [Return(Subscript(Name('_arguments', Load(), lineno=34, col_offset=19), Index(Str('----', lineno=34, col_offset=30)), Load(), lineno=34, col_offset=19), lineno=34, col_offset=12)], [], lineno=33, col_offset=8)], [], lineno=16, col_offset=4)], [], lineno=14, col_offset=0), Assign([Name('_classdeclarations', Store(), lineno=40, col_offset=0)], Dict([], [], lineno=40, col_offset=21), lineno=40, col_offset=0), Assign([Name('_propdeclarations', Store(), lineno=43, col_offset=0)], Dict([], [], lineno=43, col_offset=20), lineno=43, col_offset=0), Assign([Name('_compdeclarations', Store(), lineno=46, col_offset=0)], Dict([], [], lineno=46, col_offset=20), lineno=46, col_offset=0), Assign([Name('_enumdeclarations', Store(), lineno=49, col_offset=0)], Dict([], [], lineno=49, col_offset=20), lineno=49, col_offset=0)])
