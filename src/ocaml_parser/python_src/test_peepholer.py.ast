Module([Import([alias('dis', None)], lineno=1, col_offset=0), Import([alias('sys', None)], lineno=2, col_offset=0), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=3, col_offset=0), Import([alias('unittest', None)], lineno=4, col_offset=0), FunctionDef('disassemble', arguments([Name('func', Param(), lineno=6, col_offset=16)], None, None, []), [Assign([Name('f', Store(), lineno=7, col_offset=4)], Call(Name('StringIO', Load(), lineno=7, col_offset=8), [], [], None, None, lineno=7, col_offset=8), lineno=7, col_offset=4), Assign([Name('tmp', Store(), lineno=8, col_offset=4)], Attribute(Name('sys', Load(), lineno=8, col_offset=10), 'stdout', Load(), lineno=8, col_offset=10), lineno=8, col_offset=4), Assign([Attribute(Name('sys', Load(), lineno=9, col_offset=4), 'stdout', Store(), lineno=9, col_offset=4)], Name('f', Load(), lineno=9, col_offset=17), lineno=9, col_offset=4), Expr(Call(Attribute(Name('dis', Load(), lineno=10, col_offset=4), 'dis', Load(), lineno=10, col_offset=4), [Name('func', Load(), lineno=10, col_offset=12)], [], None, None, lineno=10, col_offset=4), lineno=10, col_offset=4), Assign([Attribute(Name('sys', Load(), lineno=11, col_offset=4), 'stdout', Store(), lineno=11, col_offset=4)], Name('tmp', Load(), lineno=11, col_offset=17), lineno=11, col_offset=4), Assign([Name('result', Store(), lineno=12, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=12, col_offset=13), 'getvalue', Load(), lineno=12, col_offset=13), [], [], None, None, lineno=12, col_offset=13), lineno=12, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=13, col_offset=4), 'close', Load(), lineno=13, col_offset=4), [], [], None, None, lineno=13, col_offset=4), lineno=13, col_offset=4), Return(Name('result', Load(), lineno=14, col_offset=11), lineno=14, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('dis_single', arguments([Name('line', Param(), lineno=16, col_offset=15)], None, None, []), [Return(Call(Name('disassemble', Load(), lineno=17, col_offset=11), [Call(Name('compile', Load(), lineno=17, col_offset=23), [Name('line', Load(), lineno=17, col_offset=31), Str('', lineno=17, col_offset=37), Str('single', lineno=17, col_offset=41)], [], None, None, lineno=17, col_offset=23)], [], None, None, lineno=17, col_offset=11), lineno=17, col_offset=4)], [], lineno=16, col_offset=0), ClassDef('TestTranforms', [Attribute(Name('unittest', Load(), lineno=19, col_offset=20), 'TestCase', Load(), lineno=19, col_offset=20)], [FunctionDef('test_unot', arguments([Name('self', Param(), lineno=21, col_offset=18)], None, None, []), [FunctionDef('unot', arguments([Name('x', Param(), lineno=23, col_offset=17)], None, None, []), [If(UnaryOp(Not(), Compare(Name('x', Load(), lineno=24, col_offset=19), [Eq()], [Num(2, lineno=24, col_offset=24)], lineno=24, col_offset=19), lineno=24, col_offset=15), [Delete([Name('x', Del(), lineno=25, col_offset=20)], lineno=25, col_offset=16)], [], lineno=24, col_offset=12)], [], lineno=23, col_offset=8), Assign([Name('asm', Store(), lineno=26, col_offset=8)], Call(Name('disassemble', Load(), lineno=26, col_offset=14), [Name('unot', Load(), lineno=26, col_offset=26)], [], None, None, lineno=26, col_offset=14), lineno=26, col_offset=8), For(Name('elem', Store(), lineno=27, col_offset=12), Tuple([Str('UNARY_NOT', lineno=27, col_offset=21), Str('POP_JUMP_IF_FALSE', lineno=27, col_offset=34)], Load(), lineno=27, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=28, col_offset=12), 'assertNotIn', Load(), lineno=28, col_offset=12), [Name('elem', Load(), lineno=28, col_offset=29), Name('asm', Load(), lineno=28, col_offset=35)], [], None, None, lineno=28, col_offset=12), lineno=28, col_offset=12)], [], lineno=27, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=8), 'assertIn', Load(), lineno=29, col_offset=8), [Str('POP_JUMP_IF_TRUE', lineno=29, col_offset=22), Name('asm', Load(), lineno=29, col_offset=42)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('test_elim_inversion_of_is_or_in', arguments([Name('self', Param(), lineno=31, col_offset=40)], None, None, []), [For(Tuple([Name('line', Store(), lineno=32, col_offset=12), Name('elem', Store(), lineno=32, col_offset=18)], Store(), lineno=32, col_offset=12), Tuple([Tuple([Str('not a is b', lineno=33, col_offset=13), Str('(is not)', lineno=33, col_offset=27)], Load(), lineno=33, col_offset=13), Tuple([Str('not a in b', lineno=34, col_offset=13), Str('(not in)', lineno=34, col_offset=27)], Load(), lineno=34, col_offset=13), Tuple([Str('not a is not b', lineno=35, col_offset=13), Str('(is)', lineno=35, col_offset=31)], Load(), lineno=35, col_offset=13), Tuple([Str('not a not in b', lineno=36, col_offset=13), Str('(in)', lineno=36, col_offset=31)], Load(), lineno=36, col_offset=13)], Load(), lineno=33, col_offset=12), [Assign([Name('asm', Store(), lineno=38, col_offset=12)], Call(Name('dis_single', Load(), lineno=38, col_offset=18), [Name('line', Load(), lineno=38, col_offset=29)], [], None, None, lineno=38, col_offset=18), lineno=38, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=12), 'assertIn', Load(), lineno=39, col_offset=12), [Name('elem', Load(), lineno=39, col_offset=26), Name('asm', Load(), lineno=39, col_offset=32)], [], None, None, lineno=39, col_offset=12), lineno=39, col_offset=12)], [], lineno=32, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('test_none_as_constant', arguments([Name('self', Param(), lineno=41, col_offset=30)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=43, col_offset=14)], None, None, []), [Expr(Name('None', Load(), lineno=44, col_offset=12), lineno=44, col_offset=12), Return(Name('x', Load(), lineno=45, col_offset=19), lineno=45, col_offset=12)], [], lineno=43, col_offset=8), Assign([Name('asm', Store(), lineno=46, col_offset=8)], Call(Name('disassemble', Load(), lineno=46, col_offset=14), [Name('f', Load(), lineno=46, col_offset=26)], [], None, None, lineno=46, col_offset=14), lineno=46, col_offset=8), For(Name('elem', Store(), lineno=47, col_offset=12), Tuple([Str('LOAD_GLOBAL', lineno=47, col_offset=21)], Load(), lineno=47, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=12), 'assertNotIn', Load(), lineno=48, col_offset=12), [Name('elem', Load(), lineno=48, col_offset=29), Name('asm', Load(), lineno=48, col_offset=35)], [], None, None, lineno=48, col_offset=12), lineno=48, col_offset=12)], [], lineno=47, col_offset=8), For(Name('elem', Store(), lineno=49, col_offset=12), Tuple([Str('LOAD_CONST', lineno=49, col_offset=21), Str('(None)', lineno=49, col_offset=35)], Load(), lineno=49, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=50, col_offset=12), 'assertIn', Load(), lineno=50, col_offset=12), [Name('elem', Load(), lineno=50, col_offset=26), Name('asm', Load(), lineno=50, col_offset=32)], [], None, None, lineno=50, col_offset=12), lineno=50, col_offset=12)], [], lineno=49, col_offset=8), FunctionDef('f', arguments([], None, None, []), [Expr(Str('Adding a docstring made this test fail in Py2.5.0', lineno=52, col_offset=12), lineno=52, col_offset=12), Return(Name('None', Load(), lineno=53, col_offset=19), lineno=53, col_offset=12)], [], lineno=51, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=54, col_offset=8), 'assertIn', Load(), lineno=54, col_offset=8), [Str('LOAD_CONST', lineno=54, col_offset=22), Call(Name('disassemble', Load(), lineno=54, col_offset=36), [Name('f', Load(), lineno=54, col_offset=48)], [], None, None, lineno=54, col_offset=36)], [], None, None, lineno=54, col_offset=8), lineno=54, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=55, col_offset=8), 'assertNotIn', Load(), lineno=55, col_offset=8), [Str('LOAD_GLOBAL', lineno=55, col_offset=25), Call(Name('disassemble', Load(), lineno=55, col_offset=40), [Name('f', Load(), lineno=55, col_offset=52)], [], None, None, lineno=55, col_offset=40)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8)], [], lineno=41, col_offset=4), FunctionDef('test_while_one', arguments([Name('self', Param(), lineno=57, col_offset=23)], None, None, []), [FunctionDef('f', arguments([], None, None, []), [While(Num(1, lineno=60, col_offset=18), [Pass( lineno=61, col_offset=16)], [], lineno=60, col_offset=12), Return(Name('list', Load(), lineno=62, col_offset=19), lineno=62, col_offset=12)], [], lineno=59, col_offset=8), Assign([Name('asm', Store(), lineno=63, col_offset=8)], Call(Name('disassemble', Load(), lineno=63, col_offset=14), [Name('f', Load(), lineno=63, col_offset=26)], [], None, None, lineno=63, col_offset=14), lineno=63, col_offset=8), For(Name('elem', Store(), lineno=64, col_offset=12), Tuple([Str('LOAD_CONST', lineno=64, col_offset=21), Str('POP_JUMP_IF_FALSE', lineno=64, col_offset=35)], Load(), lineno=64, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=12), 'assertNotIn', Load(), lineno=65, col_offset=12), [Name('elem', Load(), lineno=65, col_offset=29), Name('asm', Load(), lineno=65, col_offset=35)], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], [], lineno=64, col_offset=8), For(Name('elem', Store(), lineno=66, col_offset=12), Tuple([Str('JUMP_ABSOLUTE', lineno=66, col_offset=21)], Load(), lineno=66, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=12), 'assertIn', Load(), lineno=67, col_offset=12), [Name('elem', Load(), lineno=67, col_offset=26), Name('asm', Load(), lineno=67, col_offset=32)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12)], [], lineno=66, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('test_pack_unpack', arguments([Name('self', Param(), lineno=69, col_offset=25)], None, None, []), [For(Tuple([Name('line', Store(), lineno=70, col_offset=12), Name('elem', Store(), lineno=70, col_offset=18)], Store(), lineno=70, col_offset=12), Tuple([Tuple([Str('a, = a,', lineno=71, col_offset=13), Str('LOAD_CONST', lineno=71, col_offset=24)], Load(), lineno=71, col_offset=13), Tuple([Str('a, b = a, b', lineno=72, col_offset=13), Str('ROT_TWO', lineno=72, col_offset=28)], Load(), lineno=72, col_offset=13), Tuple([Str('a, b, c = a, b, c', lineno=73, col_offset=13), Str('ROT_THREE', lineno=73, col_offset=34)], Load(), lineno=73, col_offset=13)], Load(), lineno=71, col_offset=12), [Assign([Name('asm', Store(), lineno=75, col_offset=12)], Call(Name('dis_single', Load(), lineno=75, col_offset=18), [Name('line', Load(), lineno=75, col_offset=29)], [], None, None, lineno=75, col_offset=18), lineno=75, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'assertIn', Load(), lineno=76, col_offset=12), [Name('elem', Load(), lineno=76, col_offset=26), Name('asm', Load(), lineno=76, col_offset=32)], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=12), 'assertNotIn', Load(), lineno=77, col_offset=12), [Str('BUILD_TUPLE', lineno=77, col_offset=29), Name('asm', Load(), lineno=77, col_offset=44)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=12), 'assertNotIn', Load(), lineno=78, col_offset=12), [Str('UNPACK_TUPLE', lineno=78, col_offset=29), Name('asm', Load(), lineno=78, col_offset=45)], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=12)], [], lineno=70, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('test_folding_of_tuples_of_constants', arguments([Name('self', Param(), lineno=80, col_offset=44)], None, None, []), [For(Tuple([Name('line', Store(), lineno=81, col_offset=12), Name('elem', Store(), lineno=81, col_offset=18)], Store(), lineno=81, col_offset=12), Tuple([Tuple([Str('a = 1,2,3', lineno=82, col_offset=13), Str('((1, 2, 3))', lineno=82, col_offset=26)], Load(), lineno=82, col_offset=13), Tuple([Str('("a","b","c")', lineno=83, col_offset=13), Str("(('a', 'b', 'c'))", lineno=83, col_offset=30)], Load(), lineno=83, col_offset=13), Tuple([Str('a,b,c = 1,2,3', lineno=84, col_offset=13), Str('((1, 2, 3))', lineno=84, col_offset=30)], Load(), lineno=84, col_offset=13), Tuple([Str('(None, 1, None)', lineno=85, col_offset=13), Str('((None, 1, None))', lineno=85, col_offset=32)], Load(), lineno=85, col_offset=13), Tuple([Str('((1, 2), 3, 4)', lineno=86, col_offset=13), Str('(((1, 2), 3, 4))', lineno=86, col_offset=31)], Load(), lineno=86, col_offset=13)], Load(), lineno=82, col_offset=12), [Assign([Name('asm', Store(), lineno=88, col_offset=12)], Call(Name('dis_single', Load(), lineno=88, col_offset=18), [Name('line', Load(), lineno=88, col_offset=29)], [], None, None, lineno=88, col_offset=18), lineno=88, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=12), 'assertIn', Load(), lineno=89, col_offset=12), [Name('elem', Load(), lineno=89, col_offset=26), Name('asm', Load(), lineno=89, col_offset=32)], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=90, col_offset=12), 'assertNotIn', Load(), lineno=90, col_offset=12), [Str('BUILD_TUPLE', lineno=90, col_offset=29), Name('asm', Load(), lineno=90, col_offset=44)], [], None, None, lineno=90, col_offset=12), lineno=90, col_offset=12)], [], lineno=81, col_offset=8), FunctionDef('crater', arguments([], None, None, []), [Expr(Tuple([UnaryOp(Invert(), List([Num(0, lineno=97, col_offset=16), Num(1, lineno=97, col_offset=19), Num(2, lineno=97, col_offset=22), Num(3, lineno=97, col_offset=25), Num(4, lineno=97, col_offset=28), Num(5, lineno=97, col_offset=31), Num(6, lineno=97, col_offset=34), Num(7, lineno=97, col_offset=37), Num(8, lineno=97, col_offset=40), Num(9, lineno=97, col_offset=43), Num(0, lineno=98, col_offset=16), Num(1, lineno=98, col_offset=19), Num(2, lineno=98, col_offset=22), Num(3, lineno=98, col_offset=25), Num(4, lineno=98, col_offset=28), Num(5, lineno=98, col_offset=31), Num(6, lineno=98, col_offset=34), Num(7, lineno=98, col_offset=37), Num(8, lineno=98, col_offset=40), Num(9, lineno=98, col_offset=43), Num(0, lineno=99, col_offset=16), Num(1, lineno=99, col_offset=19), Num(2, lineno=99, col_offset=22), Num(3, lineno=99, col_offset=25), Num(4, lineno=99, col_offset=28), Num(5, lineno=99, col_offset=31), Num(6, lineno=99, col_offset=34), Num(7, lineno=99, col_offset=37), Num(8, lineno=99, col_offset=40), Num(9, lineno=99, col_offset=43), Num(0, lineno=100, col_offset=16), Num(1, lineno=100, col_offset=19), Num(2, lineno=100, col_offset=22), Num(3, lineno=100, col_offset=25), Num(4, lineno=100, col_offset=28), Num(5, lineno=100, col_offset=31), Num(6, lineno=100, col_offset=34), Num(7, lineno=100, col_offset=37), Num(8, lineno=100, col_offset=40), Num(9, lineno=100, col_offset=43), Num(0, lineno=101, col_offset=16), Num(1, lineno=101, col_offset=19), Num(2, lineno=101, col_offset=22), Num(3, lineno=101, col_offset=25), Num(4, lineno=101, col_offset=28), Num(5, lineno=101, col_offset=31), Num(6, lineno=101, col_offset=34), Num(7, lineno=101, col_offset=37), Num(8, lineno=101, col_offset=40), Num(9, lineno=101, col_offset=43), Num(0, lineno=102, col_offset=16), Num(1, lineno=102, col_offset=19), Num(2, lineno=102, col_offset=22), Num(3, lineno=102, col_offset=25), Num(4, lineno=102, col_offset=28), Num(5, lineno=102, col_offset=31), Num(6, lineno=102, col_offset=34), Num(7, lineno=102, col_offset=37), Num(8, lineno=102, col_offset=40), Num(9, lineno=102, col_offset=43), Num(0, lineno=103, col_offset=16), Num(1, lineno=103, col_offset=19), Num(2, lineno=103, col_offset=22), Num(3, lineno=103, col_offset=25), Num(4, lineno=103, col_offset=28), Num(5, lineno=103, col_offset=31), Num(6, lineno=103, col_offset=34), Num(7, lineno=103, col_offset=37), Num(8, lineno=103, col_offset=40), Num(9, lineno=103, col_offset=43), Num(0, lineno=104, col_offset=16), Num(1, lineno=104, col_offset=19), Num(2, lineno=104, col_offset=22), Num(3, lineno=104, col_offset=25), Num(4, lineno=104, col_offset=28), Num(5, lineno=104, col_offset=31), Num(6, lineno=104, col_offset=34), Num(7, lineno=104, col_offset=37), Num(8, lineno=104, col_offset=40), Num(9, lineno=104, col_offset=43), Num(0, lineno=105, col_offset=16), Num(1, lineno=105, col_offset=19), Num(2, lineno=105, col_offset=22), Num(3, lineno=105, col_offset=25), Num(4, lineno=105, col_offset=28), Num(5, lineno=105, col_offset=31), Num(6, lineno=105, col_offset=34), Num(7, lineno=105, col_offset=37), Num(8, lineno=105, col_offset=40), Num(9, lineno=105, col_offset=43), Num(0, lineno=106, col_offset=16), Num(1, lineno=106, col_offset=19), Num(2, lineno=106, col_offset=22), Num(3, lineno=106, col_offset=25), Num(4, lineno=106, col_offset=28), Num(5, lineno=106, col_offset=31), Num(6, lineno=106, col_offset=34), Num(7, lineno=106, col_offset=37), Num(8, lineno=106, col_offset=40), Num(9, lineno=106, col_offset=43)], Load(), lineno=96, col_offset=14), lineno=96, col_offset=13)], Load(), lineno=96, col_offset=13), lineno=96, col_offset=12)], [], lineno=95, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('test_folding_of_binops_on_constants', arguments([Name('self', Param(), lineno=109, col_offset=44)], None, None, []), [For(Tuple([Name('line', Store(), lineno=110, col_offset=12), Name('elem', Store(), lineno=110, col_offset=18)], Store(), lineno=110, col_offset=12), Tuple([Tuple([Str('a = 2+3+4', lineno=111, col_offset=13), Str('(9)', lineno=111, col_offset=26)], Load(), lineno=111, col_offset=13), Tuple([Str('"@"*4', lineno=112, col_offset=13), Str("('@@@@')", lineno=112, col_offset=22)], Load(), lineno=112, col_offset=13), Tuple([Str('a="abc" + "def"', lineno=113, col_offset=13), Str("('abcdef')", lineno=113, col_offset=32)], Load(), lineno=113, col_offset=13), Tuple([Str('a = 3**4', lineno=114, col_offset=13), Str('(81)', lineno=114, col_offset=25)], Load(), lineno=114, col_offset=13), Tuple([Str('a = 3*4', lineno=115, col_offset=13), Str('(12)', lineno=115, col_offset=24)], Load(), lineno=115, col_offset=13), Tuple([Str('a = 13//4', lineno=116, col_offset=13), Str('(3)', lineno=116, col_offset=26)], Load(), lineno=116, col_offset=13), Tuple([Str('a = 14%4', lineno=117, col_offset=13), Str('(2)', lineno=117, col_offset=25)], Load(), lineno=117, col_offset=13), Tuple([Str('a = 2+3', lineno=118, col_offset=13), Str('(5)', lineno=118, col_offset=24)], Load(), lineno=118, col_offset=13), Tuple([Str('a = 13-4', lineno=119, col_offset=13), Str('(9)', lineno=119, col_offset=25)], Load(), lineno=119, col_offset=13), Tuple([Str('a = (12,13)[1]', lineno=120, col_offset=13), Str('(13)', lineno=120, col_offset=31)], Load(), lineno=120, col_offset=13), Tuple([Str('a = 13 << 2', lineno=121, col_offset=13), Str('(52)', lineno=121, col_offset=28)], Load(), lineno=121, col_offset=13), Tuple([Str('a = 13 >> 2', lineno=122, col_offset=13), Str('(3)', lineno=122, col_offset=28)], Load(), lineno=122, col_offset=13), Tuple([Str('a = 13 & 7', lineno=123, col_offset=13), Str('(5)', lineno=123, col_offset=27)], Load(), lineno=123, col_offset=13), Tuple([Str('a = 13 ^ 7', lineno=124, col_offset=13), Str('(10)', lineno=124, col_offset=27)], Load(), lineno=124, col_offset=13), Tuple([Str('a = 13 | 7', lineno=125, col_offset=13), Str('(15)', lineno=125, col_offset=27)], Load(), lineno=125, col_offset=13)], Load(), lineno=111, col_offset=12), [Assign([Name('asm', Store(), lineno=127, col_offset=12)], Call(Name('dis_single', Load(), lineno=127, col_offset=18), [Name('line', Load(), lineno=127, col_offset=29)], [], None, None, lineno=127, col_offset=18), lineno=127, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=12), 'assertIn', Load(), lineno=128, col_offset=12), [Name('elem', Load(), lineno=128, col_offset=26), Name('asm', Load(), lineno=128, col_offset=32), Name('asm', Load(), lineno=128, col_offset=37)], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=129, col_offset=12), 'assertNotIn', Load(), lineno=129, col_offset=12), [Str('BINARY_', lineno=129, col_offset=29), Name('asm', Load(), lineno=129, col_offset=40)], [], None, None, lineno=129, col_offset=12), lineno=129, col_offset=12)], [], lineno=110, col_offset=8), Assign([Name('asm', Store(), lineno=132, col_offset=8)], Call(Name('dis_single', Load(), lineno=132, col_offset=14), [Str('a=2+"b"', lineno=132, col_offset=25)], [], None, None, lineno=132, col_offset=14), lineno=132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'assertIn', Load(), lineno=133, col_offset=8), [Str('(2)', lineno=133, col_offset=22), Name('asm', Load(), lineno=133, col_offset=29)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'assertIn', Load(), lineno=134, col_offset=8), [Str("('b')", lineno=134, col_offset=22), Name('asm', Load(), lineno=134, col_offset=31)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Assign([Name('asm', Store(), lineno=137, col_offset=8)], Call(Name('dis_single', Load(), lineno=137, col_offset=14), [Str('a="x"*1000', lineno=137, col_offset=25)], [], None, None, lineno=137, col_offset=14), lineno=137, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'assertIn', Load(), lineno=138, col_offset=8), [Str('(1000)', lineno=138, col_offset=22), Name('asm', Load(), lineno=138, col_offset=32)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8)], [], lineno=109, col_offset=4), FunctionDef('test_folding_of_unaryops_on_constants', arguments([Name('self', Param(), lineno=140, col_offset=46)], None, None, []), [For(Tuple([Name('line', Store(), lineno=141, col_offset=12), Name('elem', Store(), lineno=141, col_offset=18)], Store(), lineno=141, col_offset=12), Tuple([Tuple([Str('`1`', lineno=142, col_offset=13), Str("('1')", lineno=142, col_offset=20)], Load(), lineno=142, col_offset=13), Tuple([Str('-0.5', lineno=143, col_offset=13), Str('(-0.5)', lineno=143, col_offset=21)], Load(), lineno=143, col_offset=13), Tuple([Str('~-2', lineno=144, col_offset=13), Str('(1)', lineno=144, col_offset=20)], Load(), lineno=144, col_offset=13)], Load(), lineno=142, col_offset=12), [Assign([Name('asm', Store(), lineno=146, col_offset=12)], Call(Name('dis_single', Load(), lineno=146, col_offset=18), [Name('line', Load(), lineno=146, col_offset=29)], [], None, None, lineno=146, col_offset=18), lineno=146, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=12), 'assertIn', Load(), lineno=147, col_offset=12), [Name('elem', Load(), lineno=147, col_offset=26), Name('asm', Load(), lineno=147, col_offset=32), Name('asm', Load(), lineno=147, col_offset=37)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=12), 'assertNotIn', Load(), lineno=148, col_offset=12), [Str('UNARY_', lineno=148, col_offset=29), Name('asm', Load(), lineno=148, col_offset=39)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12)], [], lineno=141, col_offset=8), For(Tuple([Name('line', Store(), lineno=151, col_offset=12), Name('elem', Store(), lineno=151, col_offset=18)], Store(), lineno=151, col_offset=12), Tuple([Tuple([Str('-"abc"', lineno=152, col_offset=13), Str("('abc')", lineno=152, col_offset=23)], Load(), lineno=152, col_offset=13), Tuple([Str('~"abc"', lineno=153, col_offset=13), Str("('abc')", lineno=153, col_offset=23)], Load(), lineno=153, col_offset=13)], Load(), lineno=152, col_offset=12), [Assign([Name('asm', Store(), lineno=155, col_offset=12)], Call(Name('dis_single', Load(), lineno=155, col_offset=18), [Name('line', Load(), lineno=155, col_offset=29)], [], None, None, lineno=155, col_offset=18), lineno=155, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=12), 'assertIn', Load(), lineno=156, col_offset=12), [Name('elem', Load(), lineno=156, col_offset=26), Name('asm', Load(), lineno=156, col_offset=32), Name('asm', Load(), lineno=156, col_offset=37)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=12), 'assertIn', Load(), lineno=157, col_offset=12), [Str('UNARY_', lineno=157, col_offset=26), Name('asm', Load(), lineno=157, col_offset=36)], [], None, None, lineno=157, col_offset=12), lineno=157, col_offset=12)], [], lineno=151, col_offset=8)], [], lineno=140, col_offset=4), FunctionDef('test_elim_extra_return', arguments([Name('self', Param(), lineno=159, col_offset=31)], None, None, []), [FunctionDef('f', arguments([Name('x', Param(), lineno=161, col_offset=14)], None, None, []), [Return(Name('x', Load(), lineno=162, col_offset=19), lineno=162, col_offset=12)], [], lineno=161, col_offset=8), Assign([Name('asm', Store(), lineno=163, col_offset=8)], Call(Name('disassemble', Load(), lineno=163, col_offset=14), [Name('f', Load(), lineno=163, col_offset=26)], [], None, None, lineno=163, col_offset=14), lineno=163, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=8), 'assertNotIn', Load(), lineno=164, col_offset=8), [Str('LOAD_CONST', lineno=164, col_offset=25), Name('asm', Load(), lineno=164, col_offset=39)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=165, col_offset=8), 'assertNotIn', Load(), lineno=165, col_offset=8), [Str('(None)', lineno=165, col_offset=25), Name('asm', Load(), lineno=165, col_offset=35)], [], None, None, lineno=165, col_offset=8), lineno=165, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=166, col_offset=8), 'assertEqual', Load(), lineno=166, col_offset=8), [Call(Attribute(Call(Attribute(Name('asm', Load(), lineno=166, col_offset=25), 'split', Load(), lineno=166, col_offset=25), [], [], None, None, lineno=166, col_offset=25), 'count', Load(), lineno=166, col_offset=25), [Str('RETURN_VALUE', lineno=166, col_offset=43)], [], None, None, lineno=166, col_offset=25), Num(1, lineno=166, col_offset=60)], [], None, None, lineno=166, col_offset=8), lineno=166, col_offset=8)], [], lineno=159, col_offset=4), FunctionDef('test_elim_jump_to_return', arguments([Name('self', Param(), lineno=168, col_offset=33)], None, None, []), [FunctionDef('f', arguments([Name('cond', Param(), lineno=170, col_offset=14), Name('true_value', Param(), lineno=170, col_offset=20), Name('false_value', Param(), lineno=170, col_offset=32)], None, None, []), [Return(IfExp(Name('cond', Load(), lineno=171, col_offset=33), Name('true_value', Load(), lineno=171, col_offset=19), Name('false_value', Load(), lineno=171, col_offset=43), lineno=171, col_offset=19), lineno=171, col_offset=12)], [], lineno=170, col_offset=8), Assign([Name('asm', Store(), lineno=172, col_offset=8)], Call(Name('disassemble', Load(), lineno=172, col_offset=14), [Name('f', Load(), lineno=172, col_offset=26)], [], None, None, lineno=172, col_offset=14), lineno=172, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=173, col_offset=8), 'assertNotIn', Load(), lineno=173, col_offset=8), [Str('JUMP_FORWARD', lineno=173, col_offset=25), Name('asm', Load(), lineno=173, col_offset=41)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=174, col_offset=8), 'assertNotIn', Load(), lineno=174, col_offset=8), [Str('JUMP_ABSOLUTE', lineno=174, col_offset=25), Name('asm', Load(), lineno=174, col_offset=42)], [], None, None, lineno=174, col_offset=8), lineno=174, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=175, col_offset=8), 'assertEqual', Load(), lineno=175, col_offset=8), [Call(Attribute(Call(Attribute(Name('asm', Load(), lineno=175, col_offset=25), 'split', Load(), lineno=175, col_offset=25), [], [], None, None, lineno=175, col_offset=25), 'count', Load(), lineno=175, col_offset=25), [Str('RETURN_VALUE', lineno=175, col_offset=43)], [], None, None, lineno=175, col_offset=25), Num(2, lineno=175, col_offset=60)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('test_elim_jump_after_return1', arguments([Name('self', Param(), lineno=177, col_offset=37)], None, None, []), [FunctionDef('f', arguments([Name('cond1', Param(), lineno=179, col_offset=14), Name('cond2', Param(), lineno=179, col_offset=21)], None, None, []), [If(Name('cond1', Load(), lineno=180, col_offset=15), [Return(Num(1, lineno=180, col_offset=29), lineno=180, col_offset=22)], [], lineno=180, col_offset=12), If(Name('cond2', Load(), lineno=181, col_offset=15), [Return(Num(2, lineno=181, col_offset=29), lineno=181, col_offset=22)], [], lineno=181, col_offset=12), While(Num(1, lineno=182, col_offset=18), [Return(Num(3, lineno=183, col_offset=23), lineno=183, col_offset=16)], [], lineno=182, col_offset=12), While(Num(1, lineno=184, col_offset=18), [If(Name('cond1', Load(), lineno=185, col_offset=19), [Return(Num(4, lineno=185, col_offset=33), lineno=185, col_offset=26)], [], lineno=185, col_offset=16), Return(Num(5, lineno=186, col_offset=23), lineno=186, col_offset=16)], [], lineno=184, col_offset=12), Return(Num(6, lineno=187, col_offset=19), lineno=187, col_offset=12)], [], lineno=179, col_offset=8), Assign([Name('asm', Store(), lineno=188, col_offset=8)], Call(Name('disassemble', Load(), lineno=188, col_offset=14), [Name('f', Load(), lineno=188, col_offset=26)], [], None, None, lineno=188, col_offset=14), lineno=188, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=8), 'assertNotIn', Load(), lineno=189, col_offset=8), [Str('JUMP_FORWARD', lineno=189, col_offset=25), Name('asm', Load(), lineno=189, col_offset=41)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=190, col_offset=8), 'assertNotIn', Load(), lineno=190, col_offset=8), [Str('JUMP_ABSOLUTE', lineno=190, col_offset=25), Name('asm', Load(), lineno=190, col_offset=42)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=8), 'assertEqual', Load(), lineno=191, col_offset=8), [Call(Attribute(Call(Attribute(Name('asm', Load(), lineno=191, col_offset=25), 'split', Load(), lineno=191, col_offset=25), [], [], None, None, lineno=191, col_offset=25), 'count', Load(), lineno=191, col_offset=25), [Str('RETURN_VALUE', lineno=191, col_offset=43)], [], None, None, lineno=191, col_offset=25), Num(6, lineno=191, col_offset=60)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8)], [], lineno=177, col_offset=4), FunctionDef('test_elim_jump_after_return2', arguments([Name('self', Param(), lineno=193, col_offset=37)], None, None, []), [FunctionDef('f', arguments([Name('cond1', Param(), lineno=195, col_offset=14), Name('cond2', Param(), lineno=195, col_offset=21)], None, None, []), [While(Num(1, lineno=196, col_offset=18), [If(Name('cond1', Load(), lineno=197, col_offset=19), [Return(Num(4, lineno=197, col_offset=33), lineno=197, col_offset=26)], [], lineno=197, col_offset=16)], [], lineno=196, col_offset=12)], [], lineno=195, col_offset=8), Assign([Name('asm', Store(), lineno=198, col_offset=8)], Call(Name('disassemble', Load(), lineno=198, col_offset=14), [Name('f', Load(), lineno=198, col_offset=26)], [], None, None, lineno=198, col_offset=14), lineno=198, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=8), 'assertNotIn', Load(), lineno=199, col_offset=8), [Str('JUMP_FORWARD', lineno=199, col_offset=25), Name('asm', Load(), lineno=199, col_offset=41)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=201, col_offset=8), 'assertEqual', Load(), lineno=201, col_offset=8), [Call(Attribute(Call(Attribute(Name('asm', Load(), lineno=201, col_offset=25), 'split', Load(), lineno=201, col_offset=25), [], [], None, None, lineno=201, col_offset=25), 'count', Load(), lineno=201, col_offset=25), [Str('JUMP_ABSOLUTE', lineno=201, col_offset=43)], [], None, None, lineno=201, col_offset=25), Num(1, lineno=201, col_offset=61)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=202, col_offset=8), 'assertEqual', Load(), lineno=202, col_offset=8), [Call(Attribute(Call(Attribute(Name('asm', Load(), lineno=202, col_offset=25), 'split', Load(), lineno=202, col_offset=25), [], [], None, None, lineno=202, col_offset=25), 'count', Load(), lineno=202, col_offset=25), [Str('RETURN_VALUE', lineno=202, col_offset=43)], [], None, None, lineno=202, col_offset=25), Num(2, lineno=202, col_offset=60)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=19, col_offset=0), FunctionDef('test_main', arguments([Name('verbose', Param(), lineno=205, col_offset=14)], None, None, [Name('None', Load(), lineno=205, col_offset=22)]), [Import([alias('sys', None)], lineno=206, col_offset=4), ImportFrom('test', [alias('test_support', None)], 0, lineno=207, col_offset=4), Assign([Name('test_classes', Store(), lineno=208, col_offset=4)], Tuple([Name('TestTranforms', Load(), lineno=208, col_offset=20)], Load(), lineno=208, col_offset=20), lineno=208, col_offset=4), With(Call(Attribute(Name('test_support', Load(), lineno=210, col_offset=9), 'check_py3k_warnings', Load(), lineno=210, col_offset=9), [Tuple([Str('backquote not supported', lineno=211, col_offset=13), Name('SyntaxWarning', Load(), lineno=211, col_offset=40)], Load(), lineno=211, col_offset=13)], [], None, None, lineno=210, col_offset=9), None, [Expr(Call(Attribute(Name('test_support', Load(), lineno=212, col_offset=8), 'run_unittest', Load(), lineno=212, col_offset=8), [], [], Name('test_classes', Load(), lineno=212, col_offset=35), None, lineno=212, col_offset=8), lineno=212, col_offset=8), If(BoolOp(And(), [Name('verbose', Load(), lineno=215, col_offset=11), Call(Name('hasattr', Load(), lineno=215, col_offset=23), [Name('sys', Load(), lineno=215, col_offset=31), Str('gettotalrefcount', lineno=215, col_offset=36)], [], None, None, lineno=215, col_offset=23)], lineno=215, col_offset=11), [Import([alias('gc', None)], lineno=216, col_offset=12), Assign([Name('counts', Store(), lineno=217, col_offset=12)], BinOp(List([Name('None', Load(), lineno=217, col_offset=22)], Load(), lineno=217, col_offset=21), Mult(), Num(5, lineno=217, col_offset=30), lineno=217, col_offset=21), lineno=217, col_offset=12), For(Name('i', Store(), lineno=218, col_offset=16), Call(Name('xrange', Load(), lineno=218, col_offset=21), [Call(Name('len', Load(), lineno=218, col_offset=28), [Name('counts', Load(), lineno=218, col_offset=32)], [], None, None, lineno=218, col_offset=28)], [], None, None, lineno=218, col_offset=21), [Expr(Call(Attribute(Name('test_support', Load(), lineno=219, col_offset=16), 'run_unittest', Load(), lineno=219, col_offset=16), [], [], Name('test_classes', Load(), lineno=219, col_offset=43), None, lineno=219, col_offset=16), lineno=219, col_offset=16), Expr(Call(Attribute(Name('gc', Load(), lineno=220, col_offset=16), 'collect', Load(), lineno=220, col_offset=16), [], [], None, None, lineno=220, col_offset=16), lineno=220, col_offset=16), Assign([Subscript(Name('counts', Load(), lineno=221, col_offset=16), Index(Name('i', Load(), lineno=221, col_offset=23)), Store(), lineno=221, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=221, col_offset=28), 'gettotalrefcount', Load(), lineno=221, col_offset=28), [], [], None, None, lineno=221, col_offset=28), lineno=221, col_offset=16)], [], lineno=218, col_offset=12), Print(None, [Name('counts', Load(), lineno=222, col_offset=18)], True, lineno=222, col_offset=12)], [], lineno=215, col_offset=8)], lineno=210, col_offset=9)], [], lineno=205, col_offset=0), If(Compare(Name('__name__', Load(), lineno=224, col_offset=3), [Eq()], [Str('__main__', lineno=224, col_offset=15)], lineno=224, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=225, col_offset=4), [], [keyword('verbose', Name('True', Load(), lineno=225, col_offset=22))], None, None, lineno=225, col_offset=4), lineno=225, col_offset=4)], [], lineno=224, col_offset=0)])
