Module([Expr(Str('A multi-producer, multi-consumer queue.', lineno=1, col_offset=0), lineno=1, col_offset=0), ImportFrom('time', [alias('time', '_time')], 0, lineno=3, col_offset=0), TryExcept([Import([alias('threading', '_threading')], lineno=5, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=6, col_offset=7), None, [Import([alias('dummy_threading', '_threading')], lineno=7, col_offset=4)], lineno=6, col_offset=0)], [], lineno=4, col_offset=0), ImportFrom('collections', [alias('deque', None)], 0, lineno=8, col_offset=0), Import([alias('heapq', None)], lineno=9, col_offset=0), Assign([Name('__all__', Store(), lineno=11, col_offset=0)], List([Str('Empty', lineno=11, col_offset=11), Str('Full', lineno=11, col_offset=20), Str('Queue', lineno=11, col_offset=28), Str('PriorityQueue', lineno=11, col_offset=37), Str('LifoQueue', lineno=11, col_offset=54)], Load(), lineno=11, col_offset=10), lineno=11, col_offset=0), ClassDef('Empty', [Name('Exception', Load(), lineno=13, col_offset=12)], [Expr(Str('Exception raised by Queue.get(block=0)/get_nowait().', lineno=14, col_offset=4), lineno=14, col_offset=4), Pass( lineno=15, col_offset=4)], [], lineno=13, col_offset=0), ClassDef('Full', [Name('Exception', Load(), lineno=17, col_offset=11)], [Expr(Str('Exception raised by Queue.put(block=0)/put_nowait().', lineno=18, col_offset=4), lineno=18, col_offset=4), Pass( lineno=19, col_offset=4)], [], lineno=17, col_offset=0), ClassDef('Queue', [], [Expr(Str('Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    ', lineno=25, col_offset=-1), lineno=25, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=26, col_offset=17), Name('maxsize', Param(), lineno=26, col_offset=23)], None, None, [Num(0, lineno=26, col_offset=31)]), [Assign([Attribute(Name('self', Load(), lineno=27, col_offset=8), 'maxsize', Store(), lineno=27, col_offset=8)], Name('maxsize', Load(), lineno=27, col_offset=23), lineno=27, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=28, col_offset=8), '_init', Load(), lineno=28, col_offset=8), [Name('maxsize', Load(), lineno=28, col_offset=19)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'mutex', Store(), lineno=33, col_offset=8)], Call(Attribute(Name('_threading', Load(), lineno=33, col_offset=21), 'Lock', Load(), lineno=33, col_offset=21), [], [], None, None, lineno=33, col_offset=21), lineno=33, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=36, col_offset=8), 'not_empty', Store(), lineno=36, col_offset=8)], Call(Attribute(Name('_threading', Load(), lineno=36, col_offset=25), 'Condition', Load(), lineno=36, col_offset=25), [Attribute(Name('self', Load(), lineno=36, col_offset=46), 'mutex', Load(), lineno=36, col_offset=46)], [], None, None, lineno=36, col_offset=25), lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'not_full', Store(), lineno=39, col_offset=8)], Call(Attribute(Name('_threading', Load(), lineno=39, col_offset=24), 'Condition', Load(), lineno=39, col_offset=24), [Attribute(Name('self', Load(), lineno=39, col_offset=45), 'mutex', Load(), lineno=39, col_offset=45)], [], None, None, lineno=39, col_offset=24), lineno=39, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'all_tasks_done', Store(), lineno=42, col_offset=8)], Call(Attribute(Name('_threading', Load(), lineno=42, col_offset=30), 'Condition', Load(), lineno=42, col_offset=30), [Attribute(Name('self', Load(), lineno=42, col_offset=51), 'mutex', Load(), lineno=42, col_offset=51)], [], None, None, lineno=42, col_offset=30), lineno=42, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'unfinished_tasks', Store(), lineno=43, col_offset=8)], Num(0, lineno=43, col_offset=32), lineno=43, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('task_done', arguments([Name('self', Param(), lineno=45, col_offset=18)], None, None, []), [Expr(Str('Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        ', lineno=58, col_offset=-1), lineno=58, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=59, col_offset=8), 'all_tasks_done', Load(), lineno=59, col_offset=8), 'acquire', Load(), lineno=59, col_offset=8), [], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), TryFinally([Assign([Name('unfinished', Store(), lineno=61, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=61, col_offset=25), 'unfinished_tasks', Load(), lineno=61, col_offset=25), Sub(), Num(1, lineno=61, col_offset=49), lineno=61, col_offset=25), lineno=61, col_offset=12), If(Compare(Name('unfinished', Load(), lineno=62, col_offset=15), [LtE()], [Num(0, lineno=62, col_offset=29)], lineno=62, col_offset=15), [If(Compare(Name('unfinished', Load(), lineno=63, col_offset=19), [Lt()], [Num(0, lineno=63, col_offset=32)], lineno=63, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=64, col_offset=26), [Str('task_done() called too many times', lineno=64, col_offset=37)], [], None, None, lineno=64, col_offset=26), None, None, lineno=64, col_offset=20)], [], lineno=63, col_offset=16), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=65, col_offset=16), 'all_tasks_done', Load(), lineno=65, col_offset=16), 'notify_all', Load(), lineno=65, col_offset=16), [], [], None, None, lineno=65, col_offset=16), lineno=65, col_offset=16)], [], lineno=62, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=66, col_offset=12), 'unfinished_tasks', Store(), lineno=66, col_offset=12)], Name('unfinished', Load(), lineno=66, col_offset=36), lineno=66, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=68, col_offset=12), 'all_tasks_done', Load(), lineno=68, col_offset=12), 'release', Load(), lineno=68, col_offset=12), [], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12)], lineno=60, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('join', arguments([Name('self', Param(), lineno=70, col_offset=13)], None, None, []), [Expr(Str('Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        ', lineno=78, col_offset=-1), lineno=78, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=79, col_offset=8), 'all_tasks_done', Load(), lineno=79, col_offset=8), 'acquire', Load(), lineno=79, col_offset=8), [], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), TryFinally([While(Attribute(Name('self', Load(), lineno=81, col_offset=18), 'unfinished_tasks', Load(), lineno=81, col_offset=18), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=82, col_offset=16), 'all_tasks_done', Load(), lineno=82, col_offset=16), 'wait', Load(), lineno=82, col_offset=16), [], [], None, None, lineno=82, col_offset=16), lineno=82, col_offset=16)], [], lineno=81, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=84, col_offset=12), 'all_tasks_done', Load(), lineno=84, col_offset=12), 'release', Load(), lineno=84, col_offset=12), [], [], None, None, lineno=84, col_offset=12), lineno=84, col_offset=12)], lineno=80, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('qsize', arguments([Name('self', Param(), lineno=86, col_offset=14)], None, None, []), [Expr(Str('Return the approximate size of the queue (not reliable!).', lineno=87, col_offset=8), lineno=87, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'mutex', Load(), lineno=88, col_offset=8), 'acquire', Load(), lineno=88, col_offset=8), [], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8), Assign([Name('n', Store(), lineno=89, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=89, col_offset=12), '_qsize', Load(), lineno=89, col_offset=12), [], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=8), 'mutex', Load(), lineno=90, col_offset=8), 'release', Load(), lineno=90, col_offset=8), [], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), Return(Name('n', Load(), lineno=91, col_offset=15), lineno=91, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('empty', arguments([Name('self', Param(), lineno=93, col_offset=14)], None, None, []), [Expr(Str('Return True if the queue is empty, False otherwise (not reliable!).', lineno=94, col_offset=8), lineno=94, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'mutex', Load(), lineno=95, col_offset=8), 'acquire', Load(), lineno=95, col_offset=8), [], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Name('n', Store(), lineno=96, col_offset=8)], UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=96, col_offset=16), '_qsize', Load(), lineno=96, col_offset=16), [], [], None, None, lineno=96, col_offset=16), lineno=96, col_offset=12), lineno=96, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'mutex', Load(), lineno=97, col_offset=8), 'release', Load(), lineno=97, col_offset=8), [], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Return(Name('n', Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('full', arguments([Name('self', Param(), lineno=100, col_offset=13)], None, None, []), [Expr(Str('Return True if the queue is full, False otherwise (not reliable!).', lineno=101, col_offset=8), lineno=101, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=102, col_offset=8), 'mutex', Load(), lineno=102, col_offset=8), 'acquire', Load(), lineno=102, col_offset=8), [], [], None, None, lineno=102, col_offset=8), lineno=102, col_offset=8), Assign([Name('n', Store(), lineno=103, col_offset=8)], Compare(Num(0, lineno=103, col_offset=12), [Lt(), Eq()], [Attribute(Name('self', Load(), lineno=103, col_offset=16), 'maxsize', Load(), lineno=103, col_offset=16), Call(Attribute(Name('self', Load(), lineno=103, col_offset=32), '_qsize', Load(), lineno=103, col_offset=32), [], [], None, None, lineno=103, col_offset=32)], lineno=103, col_offset=12), lineno=103, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=104, col_offset=8), 'mutex', Load(), lineno=104, col_offset=8), 'release', Load(), lineno=104, col_offset=8), [], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8), Return(Name('n', Load(), lineno=105, col_offset=15), lineno=105, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('put', arguments([Name('self', Param(), lineno=107, col_offset=12), Name('item', Param(), lineno=107, col_offset=18), Name('block', Param(), lineno=107, col_offset=24), Name('timeout', Param(), lineno=107, col_offset=36)], None, None, [Name('True', Load(), lineno=107, col_offset=30), Name('None', Load(), lineno=107, col_offset=44)]), [Expr(Str("Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        ", lineno=117, col_offset=-1), lineno=117, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=118, col_offset=8), 'not_full', Load(), lineno=118, col_offset=8), 'acquire', Load(), lineno=118, col_offset=8), [], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8), TryFinally([If(Compare(Attribute(Name('self', Load(), lineno=120, col_offset=15), 'maxsize', Load(), lineno=120, col_offset=15), [Gt()], [Num(0, lineno=120, col_offset=30)], lineno=120, col_offset=15), [If(UnaryOp(Not(), Name('block', Load(), lineno=121, col_offset=23), lineno=121, col_offset=19), [If(Compare(Call(Attribute(Name('self', Load(), lineno=122, col_offset=23), '_qsize', Load(), lineno=122, col_offset=23), [], [], None, None, lineno=122, col_offset=23), [Eq()], [Attribute(Name('self', Load(), lineno=122, col_offset=40), 'maxsize', Load(), lineno=122, col_offset=40)], lineno=122, col_offset=23), [Raise(Name('Full', Load(), lineno=123, col_offset=30), None, None, lineno=123, col_offset=24)], [], lineno=122, col_offset=20)], [If(Compare(Name('timeout', Load(), lineno=124, col_offset=21), [Is()], [Name('None', Load(), lineno=124, col_offset=32)], lineno=124, col_offset=21), [While(Compare(Call(Attribute(Name('self', Load(), lineno=125, col_offset=26), '_qsize', Load(), lineno=125, col_offset=26), [], [], None, None, lineno=125, col_offset=26), [Eq()], [Attribute(Name('self', Load(), lineno=125, col_offset=43), 'maxsize', Load(), lineno=125, col_offset=43)], lineno=125, col_offset=26), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=126, col_offset=24), 'not_full', Load(), lineno=126, col_offset=24), 'wait', Load(), lineno=126, col_offset=24), [], [], None, None, lineno=126, col_offset=24), lineno=126, col_offset=24)], [], lineno=125, col_offset=20)], [If(Compare(Name('timeout', Load(), lineno=127, col_offset=21), [Lt()], [Num(0, lineno=127, col_offset=31)], lineno=127, col_offset=21), [Raise(Call(Name('ValueError', Load(), lineno=128, col_offset=26), [Str("'timeout' must be a positive number", lineno=128, col_offset=37)], [], None, None, lineno=128, col_offset=26), None, None, lineno=128, col_offset=20)], [Assign([Name('endtime', Store(), lineno=130, col_offset=20)], BinOp(Call(Name('_time', Load(), lineno=130, col_offset=30), [], [], None, None, lineno=130, col_offset=30), Add(), Name('timeout', Load(), lineno=130, col_offset=40), lineno=130, col_offset=30), lineno=130, col_offset=20), While(Compare(Call(Attribute(Name('self', Load(), lineno=131, col_offset=26), '_qsize', Load(), lineno=131, col_offset=26), [], [], None, None, lineno=131, col_offset=26), [Eq()], [Attribute(Name('self', Load(), lineno=131, col_offset=43), 'maxsize', Load(), lineno=131, col_offset=43)], lineno=131, col_offset=26), [Assign([Name('remaining', Store(), lineno=132, col_offset=24)], BinOp(Name('endtime', Load(), lineno=132, col_offset=36), Sub(), Call(Name('_time', Load(), lineno=132, col_offset=46), [], [], None, None, lineno=132, col_offset=46), lineno=132, col_offset=36), lineno=132, col_offset=24), If(Compare(Name('remaining', Load(), lineno=133, col_offset=27), [LtE()], [Num(0.0, lineno=133, col_offset=40)], lineno=133, col_offset=27), [Raise(Name('Full', Load(), lineno=134, col_offset=34), None, None, lineno=134, col_offset=28)], [], lineno=133, col_offset=24), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=135, col_offset=24), 'not_full', Load(), lineno=135, col_offset=24), 'wait', Load(), lineno=135, col_offset=24), [Name('remaining', Load(), lineno=135, col_offset=43)], [], None, None, lineno=135, col_offset=24), lineno=135, col_offset=24)], [], lineno=131, col_offset=20)], lineno=127, col_offset=21)], lineno=124, col_offset=21)], lineno=121, col_offset=16)], [], lineno=120, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=12), '_put', Load(), lineno=136, col_offset=12), [Name('item', Load(), lineno=136, col_offset=22)], [], None, None, lineno=136, col_offset=12), lineno=136, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=137, col_offset=12), 'unfinished_tasks', Store(), lineno=137, col_offset=12), Add(), Num(1, lineno=137, col_offset=37), lineno=137, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'not_empty', Load(), lineno=138, col_offset=12), 'notify', Load(), lineno=138, col_offset=12), [], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=140, col_offset=12), 'not_full', Load(), lineno=140, col_offset=12), 'release', Load(), lineno=140, col_offset=12), [], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12)], lineno=119, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('put_nowait', arguments([Name('self', Param(), lineno=142, col_offset=19), Name('item', Param(), lineno=142, col_offset=25)], None, None, []), [Expr(Str('Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        ', lineno=147, col_offset=-1), lineno=147, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=148, col_offset=15), 'put', Load(), lineno=148, col_offset=15), [Name('item', Load(), lineno=148, col_offset=24), Name('False', Load(), lineno=148, col_offset=30)], [], None, None, lineno=148, col_offset=15), lineno=148, col_offset=8)], [], lineno=142, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=150, col_offset=12), Name('block', Param(), lineno=150, col_offset=18), Name('timeout', Param(), lineno=150, col_offset=30)], None, None, [Name('True', Load(), lineno=150, col_offset=24), Name('None', Load(), lineno=150, col_offset=38)]), [Expr(Str("Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        ", lineno=160, col_offset=-1), lineno=160, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=161, col_offset=8), 'not_empty', Load(), lineno=161, col_offset=8), 'acquire', Load(), lineno=161, col_offset=8), [], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8), TryFinally([If(UnaryOp(Not(), Name('block', Load(), lineno=163, col_offset=19), lineno=163, col_offset=15), [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=164, col_offset=23), '_qsize', Load(), lineno=164, col_offset=23), [], [], None, None, lineno=164, col_offset=23), lineno=164, col_offset=19), [Raise(Name('Empty', Load(), lineno=165, col_offset=26), None, None, lineno=165, col_offset=20)], [], lineno=164, col_offset=16)], [If(Compare(Name('timeout', Load(), lineno=166, col_offset=17), [Is()], [Name('None', Load(), lineno=166, col_offset=28)], lineno=166, col_offset=17), [While(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=167, col_offset=26), '_qsize', Load(), lineno=167, col_offset=26), [], [], None, None, lineno=167, col_offset=26), lineno=167, col_offset=22), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=168, col_offset=20), 'not_empty', Load(), lineno=168, col_offset=20), 'wait', Load(), lineno=168, col_offset=20), [], [], None, None, lineno=168, col_offset=20), lineno=168, col_offset=20)], [], lineno=167, col_offset=16)], [If(Compare(Name('timeout', Load(), lineno=169, col_offset=17), [Lt()], [Num(0, lineno=169, col_offset=27)], lineno=169, col_offset=17), [Raise(Call(Name('ValueError', Load(), lineno=170, col_offset=22), [Str("'timeout' must be a positive number", lineno=170, col_offset=33)], [], None, None, lineno=170, col_offset=22), None, None, lineno=170, col_offset=16)], [Assign([Name('endtime', Store(), lineno=172, col_offset=16)], BinOp(Call(Name('_time', Load(), lineno=172, col_offset=26), [], [], None, None, lineno=172, col_offset=26), Add(), Name('timeout', Load(), lineno=172, col_offset=36), lineno=172, col_offset=26), lineno=172, col_offset=16), While(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=173, col_offset=26), '_qsize', Load(), lineno=173, col_offset=26), [], [], None, None, lineno=173, col_offset=26), lineno=173, col_offset=22), [Assign([Name('remaining', Store(), lineno=174, col_offset=20)], BinOp(Name('endtime', Load(), lineno=174, col_offset=32), Sub(), Call(Name('_time', Load(), lineno=174, col_offset=42), [], [], None, None, lineno=174, col_offset=42), lineno=174, col_offset=32), lineno=174, col_offset=20), If(Compare(Name('remaining', Load(), lineno=175, col_offset=23), [LtE()], [Num(0.0, lineno=175, col_offset=36)], lineno=175, col_offset=23), [Raise(Name('Empty', Load(), lineno=176, col_offset=30), None, None, lineno=176, col_offset=24)], [], lineno=175, col_offset=20), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=177, col_offset=20), 'not_empty', Load(), lineno=177, col_offset=20), 'wait', Load(), lineno=177, col_offset=20), [Name('remaining', Load(), lineno=177, col_offset=40)], [], None, None, lineno=177, col_offset=20), lineno=177, col_offset=20)], [], lineno=173, col_offset=16)], lineno=169, col_offset=17)], lineno=166, col_offset=17)], lineno=163, col_offset=12), Assign([Name('item', Store(), lineno=178, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=178, col_offset=19), '_get', Load(), lineno=178, col_offset=19), [], [], None, None, lineno=178, col_offset=19), lineno=178, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=179, col_offset=12), 'not_full', Load(), lineno=179, col_offset=12), 'notify', Load(), lineno=179, col_offset=12), [], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12), Return(Name('item', Load(), lineno=180, col_offset=19), lineno=180, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=182, col_offset=12), 'not_empty', Load(), lineno=182, col_offset=12), 'release', Load(), lineno=182, col_offset=12), [], [], None, None, lineno=182, col_offset=12), lineno=182, col_offset=12)], lineno=162, col_offset=8)], [], lineno=150, col_offset=4), FunctionDef('get_nowait', arguments([Name('self', Param(), lineno=184, col_offset=19)], None, None, []), [Expr(Str('Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        ', lineno=189, col_offset=-1), lineno=189, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=190, col_offset=15), 'get', Load(), lineno=190, col_offset=15), [Name('False', Load(), lineno=190, col_offset=24)], [], None, None, lineno=190, col_offset=15), lineno=190, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('_init', arguments([Name('self', Param(), lineno=197, col_offset=14), Name('maxsize', Param(), lineno=197, col_offset=20)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=198, col_offset=8), 'queue', Store(), lineno=198, col_offset=8)], Call(Name('deque', Load(), lineno=198, col_offset=21), [], [], None, None, lineno=198, col_offset=21), lineno=198, col_offset=8)], [], lineno=197, col_offset=4), FunctionDef('_qsize', arguments([Name('self', Param(), lineno=200, col_offset=15), Name('len', Param(), lineno=200, col_offset=21)], None, None, [Name('len', Load(), lineno=200, col_offset=25)]), [Return(Call(Name('len', Load(), lineno=201, col_offset=15), [Attribute(Name('self', Load(), lineno=201, col_offset=19), 'queue', Load(), lineno=201, col_offset=19)], [], None, None, lineno=201, col_offset=15), lineno=201, col_offset=8)], [], lineno=200, col_offset=4), FunctionDef('_put', arguments([Name('self', Param(), lineno=204, col_offset=13), Name('item', Param(), lineno=204, col_offset=19)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=205, col_offset=8), 'queue', Load(), lineno=205, col_offset=8), 'append', Load(), lineno=205, col_offset=8), [Name('item', Load(), lineno=205, col_offset=26)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8)], [], lineno=204, col_offset=4), FunctionDef('_get', arguments([Name('self', Param(), lineno=208, col_offset=13)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=209, col_offset=15), 'queue', Load(), lineno=209, col_offset=15), 'popleft', Load(), lineno=209, col_offset=15), [], [], None, None, lineno=209, col_offset=15), lineno=209, col_offset=8)], [], lineno=208, col_offset=4)], [], lineno=21, col_offset=0), ClassDef('PriorityQueue', [Name('Queue', Load(), lineno=212, col_offset=20)], [Expr(Str('Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    ', lineno=216, col_offset=-1), lineno=216, col_offset=-1), FunctionDef('_init', arguments([Name('self', Param(), lineno=218, col_offset=14), Name('maxsize', Param(), lineno=218, col_offset=20)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=219, col_offset=8), 'queue', Store(), lineno=219, col_offset=8)], List([], Load(), lineno=219, col_offset=21), lineno=219, col_offset=8)], [], lineno=218, col_offset=4), FunctionDef('_qsize', arguments([Name('self', Param(), lineno=221, col_offset=15), Name('len', Param(), lineno=221, col_offset=21)], None, None, [Name('len', Load(), lineno=221, col_offset=25)]), [Return(Call(Name('len', Load(), lineno=222, col_offset=15), [Attribute(Name('self', Load(), lineno=222, col_offset=19), 'queue', Load(), lineno=222, col_offset=19)], [], None, None, lineno=222, col_offset=15), lineno=222, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('_put', arguments([Name('self', Param(), lineno=224, col_offset=13), Name('item', Param(), lineno=224, col_offset=19), Name('heappush', Param(), lineno=224, col_offset=25)], None, None, [Attribute(Name('heapq', Load(), lineno=224, col_offset=34), 'heappush', Load(), lineno=224, col_offset=34)]), [Expr(Call(Name('heappush', Load(), lineno=225, col_offset=8), [Attribute(Name('self', Load(), lineno=225, col_offset=17), 'queue', Load(), lineno=225, col_offset=17), Name('item', Load(), lineno=225, col_offset=29)], [], None, None, lineno=225, col_offset=8), lineno=225, col_offset=8)], [], lineno=224, col_offset=4), FunctionDef('_get', arguments([Name('self', Param(), lineno=227, col_offset=13), Name('heappop', Param(), lineno=227, col_offset=19)], None, None, [Attribute(Name('heapq', Load(), lineno=227, col_offset=27), 'heappop', Load(), lineno=227, col_offset=27)]), [Return(Call(Name('heappop', Load(), lineno=228, col_offset=15), [Attribute(Name('self', Load(), lineno=228, col_offset=23), 'queue', Load(), lineno=228, col_offset=23)], [], None, None, lineno=228, col_offset=15), lineno=228, col_offset=8)], [], lineno=227, col_offset=4)], [], lineno=212, col_offset=0), ClassDef('LifoQueue', [Name('Queue', Load(), lineno=231, col_offset=16)], [Expr(Str('Variant of Queue that retrieves most recently added entries first.', lineno=232, col_offset=4), lineno=232, col_offset=4), FunctionDef('_init', arguments([Name('self', Param(), lineno=234, col_offset=14), Name('maxsize', Param(), lineno=234, col_offset=20)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=235, col_offset=8), 'queue', Store(), lineno=235, col_offset=8)], List([], Load(), lineno=235, col_offset=21), lineno=235, col_offset=8)], [], lineno=234, col_offset=4), FunctionDef('_qsize', arguments([Name('self', Param(), lineno=237, col_offset=15), Name('len', Param(), lineno=237, col_offset=21)], None, None, [Name('len', Load(), lineno=237, col_offset=25)]), [Return(Call(Name('len', Load(), lineno=238, col_offset=15), [Attribute(Name('self', Load(), lineno=238, col_offset=19), 'queue', Load(), lineno=238, col_offset=19)], [], None, None, lineno=238, col_offset=15), lineno=238, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('_put', arguments([Name('self', Param(), lineno=240, col_offset=13), Name('item', Param(), lineno=240, col_offset=19)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=241, col_offset=8), 'queue', Load(), lineno=241, col_offset=8), 'append', Load(), lineno=241, col_offset=8), [Name('item', Load(), lineno=241, col_offset=26)], [], None, None, lineno=241, col_offset=8), lineno=241, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('_get', arguments([Name('self', Param(), lineno=243, col_offset=13)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=244, col_offset=15), 'queue', Load(), lineno=244, col_offset=15), 'pop', Load(), lineno=244, col_offset=15), [], [], None, None, lineno=244, col_offset=15), lineno=244, col_offset=8)], [], lineno=243, col_offset=4)], [], lineno=231, col_offset=0)])
