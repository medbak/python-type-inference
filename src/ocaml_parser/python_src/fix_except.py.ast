Module([Expr(Str('Fixer for except statements with named exceptions.\n\nThe following cases will be converted:\n\n- "except E, T:" where T is a name:\n\n    except E as T:\n\n- "except E, T:" where T is not a name, tuple or list:\n\n        except E as t:\n            T = t\n\n    This is done because the target of an "except" clause must be a\n    name.\n\n- "except E, T:" where T is a tuple or list literal:\n\n        except E as t:\n            T = t.args\n', lineno=21, col_offset=-1), lineno=21, col_offset=-1), ImportFrom(None, [alias('pytree', None)], 2, lineno=25, col_offset=0), ImportFrom('pgen2', [alias('token', None)], 2, lineno=26, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=27, col_offset=0), ImportFrom('fixer_util', [alias('Assign', None), alias('Attr', None), alias('Name', None), alias('is_tuple', None), alias('is_list', None), alias('syms', None)], 2, lineno=28, col_offset=0), FunctionDef('find_excepts', arguments([Name('nodes', Param(), lineno=30, col_offset=17)], None, None, []), [For(Tuple([Name('i', Store(), lineno=31, col_offset=8), Name('n', Store(), lineno=31, col_offset=11)], Store(), lineno=31, col_offset=8), Call(Name('enumerate', Load(), lineno=31, col_offset=16), [Name('nodes', Load(), lineno=31, col_offset=26)], [], None, None, lineno=31, col_offset=16), [If(Compare(Attribute(Name('n', Load(), lineno=32, col_offset=11), 'type', Load(), lineno=32, col_offset=11), [Eq()], [Attribute(Name('syms', Load(), lineno=32, col_offset=21), 'except_clause', Load(), lineno=32, col_offset=21)], lineno=32, col_offset=11), [If(Compare(Attribute(Subscript(Attribute(Name('n', Load(), lineno=33, col_offset=15), 'children', Load(), lineno=33, col_offset=15), Index(Num(0, lineno=33, col_offset=26)), Load(), lineno=33, col_offset=15), 'value', Load(), lineno=33, col_offset=15), [Eq()], [Str(u'except', lineno=33, col_offset=38)], lineno=33, col_offset=15), [Expr(Yield(Tuple([Name('n', Load(), lineno=34, col_offset=23), Subscript(Name('nodes', Load(), lineno=34, col_offset=26), Index(BinOp(Name('i', Load(), lineno=34, col_offset=32), Add(), Num(2, lineno=34, col_offset=34), lineno=34, col_offset=32)), Load(), lineno=34, col_offset=26)], Load(), lineno=34, col_offset=23), lineno=34, col_offset=16), lineno=34, col_offset=16)], [], lineno=33, col_offset=12)], [], lineno=32, col_offset=8)], [], lineno=31, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('FixExcept', [Attribute(Name('fixer_base', Load(), lineno=36, col_offset=16), 'BaseFix', Load(), lineno=36, col_offset=16)], [Assign([Name('BM_compatible', Store(), lineno=37, col_offset=4)], Name('True', Load(), lineno=37, col_offset=20), lineno=37, col_offset=4), Assign([Name('PATTERN', Store(), lineno=39, col_offset=4)], Str("\n    try_stmt< 'try' ':' (simple_stmt | suite)\n                  cleanup=(except_clause ':' (simple_stmt | suite))+\n                  tail=(['except' ':' (simple_stmt | suite)]\n                        ['else' ':' (simple_stmt | suite)]\n                        ['finally' ':' (simple_stmt | suite)]) >\n    ", lineno=45, col_offset=-1), lineno=39, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=47, col_offset=18), Name('node', Param(), lineno=47, col_offset=24), Name('results', Param(), lineno=47, col_offset=30)], None, None, []), [Assign([Name('syms', Store(), lineno=48, col_offset=8)], Attribute(Name('self', Load(), lineno=48, col_offset=15), 'syms', Load(), lineno=48, col_offset=15), lineno=48, col_offset=8), Assign([Name('tail', Store(), lineno=50, col_offset=8)], ListComp(Call(Attribute(Name('n', Load(), lineno=50, col_offset=16), 'clone', Load(), lineno=50, col_offset=16), [], [], None, None, lineno=50, col_offset=16), [comprehension(Name('n', Store(), lineno=50, col_offset=30), Subscript(Name('results', Load(), lineno=50, col_offset=35), Index(Str('tail', lineno=50, col_offset=43)), Load(), lineno=50, col_offset=35), [])], lineno=50, col_offset=16), lineno=50, col_offset=8), Assign([Name('try_cleanup', Store(), lineno=52, col_offset=8)], ListComp(Call(Attribute(Name('ch', Load(), lineno=52, col_offset=23), 'clone', Load(), lineno=52, col_offset=23), [], [], None, None, lineno=52, col_offset=23), [comprehension(Name('ch', Store(), lineno=52, col_offset=38), Subscript(Name('results', Load(), lineno=52, col_offset=44), Index(Str('cleanup', lineno=52, col_offset=52)), Load(), lineno=52, col_offset=44), [])], lineno=52, col_offset=23), lineno=52, col_offset=8), For(Tuple([Name('except_clause', Store(), lineno=53, col_offset=12), Name('e_suite', Store(), lineno=53, col_offset=27)], Store(), lineno=53, col_offset=12), Call(Name('find_excepts', Load(), lineno=53, col_offset=38), [Name('try_cleanup', Load(), lineno=53, col_offset=51)], [], None, None, lineno=53, col_offset=38), [If(Compare(Call(Name('len', Load(), lineno=54, col_offset=15), [Attribute(Name('except_clause', Load(), lineno=54, col_offset=19), 'children', Load(), lineno=54, col_offset=19)], [], None, None, lineno=54, col_offset=15), [Eq()], [Num(4, lineno=54, col_offset=46)], lineno=54, col_offset=15), [Assign([Tuple([Name('E', Store(), lineno=55, col_offset=17), Name('comma', Store(), lineno=55, col_offset=20), Name('N', Store(), lineno=55, col_offset=27)], Store(), lineno=55, col_offset=17)], Subscript(Attribute(Name('except_clause', Load(), lineno=55, col_offset=32), 'children', Load(), lineno=55, col_offset=32), Slice(Num(1, lineno=55, col_offset=55), Num(4, lineno=55, col_offset=57), None), Load(), lineno=55, col_offset=32), lineno=55, col_offset=16), Expr(Call(Attribute(Name('comma', Load(), lineno=56, col_offset=16), 'replace', Load(), lineno=56, col_offset=16), [Call(Name('Name', Load(), lineno=56, col_offset=30), [Str(u'as', lineno=56, col_offset=35)], [keyword('prefix', Str(u' ', lineno=56, col_offset=49))], None, None, lineno=56, col_offset=30)], [], None, None, lineno=56, col_offset=16), lineno=56, col_offset=16), If(Compare(Attribute(Name('N', Load(), lineno=58, col_offset=19), 'type', Load(), lineno=58, col_offset=19), [NotEq()], [Attribute(Name('token', Load(), lineno=58, col_offset=29), 'NAME', Load(), lineno=58, col_offset=29)], lineno=58, col_offset=19), [Assign([Name('new_N', Store(), lineno=60, col_offset=20)], Call(Name('Name', Load(), lineno=60, col_offset=28), [Call(Attribute(Name('self', Load(), lineno=60, col_offset=33), 'new_name', Load(), lineno=60, col_offset=33), [], [], None, None, lineno=60, col_offset=33)], [keyword('prefix', Str(u' ', lineno=60, col_offset=57))], None, None, lineno=60, col_offset=28), lineno=60, col_offset=20), Assign([Name('target', Store(), lineno=61, col_offset=20)], Call(Attribute(Name('N', Load(), lineno=61, col_offset=29), 'clone', Load(), lineno=61, col_offset=29), [], [], None, None, lineno=61, col_offset=29), lineno=61, col_offset=20), Assign([Attribute(Name('target', Load(), lineno=62, col_offset=20), 'prefix', Store(), lineno=62, col_offset=20)], Str(u'', lineno=62, col_offset=36), lineno=62, col_offset=20), Expr(Call(Attribute(Name('N', Load(), lineno=63, col_offset=20), 'replace', Load(), lineno=63, col_offset=20), [Name('new_N', Load(), lineno=63, col_offset=30)], [], None, None, lineno=63, col_offset=20), lineno=63, col_offset=20), Assign([Name('new_N', Store(), lineno=64, col_offset=20)], Call(Attribute(Name('new_N', Load(), lineno=64, col_offset=28), 'clone', Load(), lineno=64, col_offset=28), [], [], None, None, lineno=64, col_offset=28), lineno=64, col_offset=20), Assign([Name('suite_stmts', Store(), lineno=70, col_offset=20)], Attribute(Name('e_suite', Load(), lineno=70, col_offset=34), 'children', Load(), lineno=70, col_offset=34), lineno=70, col_offset=20), For(Tuple([Name('i', Store(), lineno=71, col_offset=24), Name('stmt', Store(), lineno=71, col_offset=27)], Store(), lineno=71, col_offset=24), Call(Name('enumerate', Load(), lineno=71, col_offset=35), [Name('suite_stmts', Load(), lineno=71, col_offset=45)], [], None, None, lineno=71, col_offset=35), [If(Call(Name('isinstance', Load(), lineno=72, col_offset=27), [Name('stmt', Load(), lineno=72, col_offset=38), Attribute(Name('pytree', Load(), lineno=72, col_offset=44), 'Node', Load(), lineno=72, col_offset=44)], [], None, None, lineno=72, col_offset=27), [Break( lineno=73, col_offset=28)], [], lineno=72, col_offset=24)], [], lineno=71, col_offset=20), If(BoolOp(Or(), [Call(Name('is_tuple', Load(), lineno=77, col_offset=23), [Name('N', Load(), lineno=77, col_offset=32)], [], None, None, lineno=77, col_offset=23), Call(Name('is_list', Load(), lineno=77, col_offset=38), [Name('N', Load(), lineno=77, col_offset=46)], [], None, None, lineno=77, col_offset=38)], lineno=77, col_offset=23), [Assign([Name('assign', Store(), lineno=78, col_offset=24)], Call(Name('Assign', Load(), lineno=78, col_offset=33), [Name('target', Load(), lineno=78, col_offset=40), Call(Name('Attr', Load(), lineno=78, col_offset=48), [Name('new_N', Load(), lineno=78, col_offset=53), Call(Name('Name', Load(), lineno=78, col_offset=60), [Str(u'args', lineno=78, col_offset=65)], [], None, None, lineno=78, col_offset=60)], [], None, None, lineno=78, col_offset=48)], [], None, None, lineno=78, col_offset=33), lineno=78, col_offset=24)], [Assign([Name('assign', Store(), lineno=80, col_offset=24)], Call(Name('Assign', Load(), lineno=80, col_offset=33), [Name('target', Load(), lineno=80, col_offset=40), Name('new_N', Load(), lineno=80, col_offset=48)], [], None, None, lineno=80, col_offset=33), lineno=80, col_offset=24)], lineno=77, col_offset=20), For(Name('child', Store(), lineno=83, col_offset=24), Call(Name('reversed', Load(), lineno=83, col_offset=33), [Subscript(Name('suite_stmts', Load(), lineno=83, col_offset=42), Slice(None, Name('i', Load(), lineno=83, col_offset=55), None), Load(), lineno=83, col_offset=42)], [], None, None, lineno=83, col_offset=33), [Expr(Call(Attribute(Name('e_suite', Load(), lineno=84, col_offset=24), 'insert_child', Load(), lineno=84, col_offset=24), [Num(0, lineno=84, col_offset=45), Name('child', Load(), lineno=84, col_offset=48)], [], None, None, lineno=84, col_offset=24), lineno=84, col_offset=24)], [], lineno=83, col_offset=20), Expr(Call(Attribute(Name('e_suite', Load(), lineno=85, col_offset=20), 'insert_child', Load(), lineno=85, col_offset=20), [Name('i', Load(), lineno=85, col_offset=41), Name('assign', Load(), lineno=85, col_offset=44)], [], None, None, lineno=85, col_offset=20), lineno=85, col_offset=20)], [If(Compare(Attribute(Name('N', Load(), lineno=86, col_offset=21), 'prefix', Load(), lineno=86, col_offset=21), [Eq()], [Str(u'', lineno=86, col_offset=33)], lineno=86, col_offset=21), [Assign([Attribute(Name('N', Load(), lineno=89, col_offset=20), 'prefix', Store(), lineno=89, col_offset=20)], Str(u' ', lineno=89, col_offset=31), lineno=89, col_offset=20)], [], lineno=86, col_offset=21)], lineno=58, col_offset=16)], [], lineno=54, col_offset=12)], [], lineno=53, col_offset=8), Assign([Name('children', Store(), lineno=92, col_offset=8)], BinOp(BinOp(ListComp(Call(Attribute(Name('c', Load(), lineno=92, col_offset=20), 'clone', Load(), lineno=92, col_offset=20), [], [], None, None, lineno=92, col_offset=20), [comprehension(Name('c', Store(), lineno=92, col_offset=34), Subscript(Attribute(Name('node', Load(), lineno=92, col_offset=39), 'children', Load(), lineno=92, col_offset=39), Slice(None, Num(3, lineno=92, col_offset=54), None), Load(), lineno=92, col_offset=39), [])], lineno=92, col_offset=20), Add(), Name('try_cleanup', Load(), lineno=92, col_offset=60), lineno=92, col_offset=19), Add(), Name('tail', Load(), lineno=92, col_offset=74), lineno=92, col_offset=72), lineno=92, col_offset=8), Return(Call(Attribute(Name('pytree', Load(), lineno=93, col_offset=15), 'Node', Load(), lineno=93, col_offset=15), [Attribute(Name('node', Load(), lineno=93, col_offset=27), 'type', Load(), lineno=93, col_offset=27), Name('children', Load(), lineno=93, col_offset=38)], [], None, None, lineno=93, col_offset=15), lineno=93, col_offset=8)], [], lineno=47, col_offset=4)], [], lineno=36, col_offset=0)])
