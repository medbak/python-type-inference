Module([Expr(Str("Conversion pipeline templates.\n\nThe problem:\n------------\n\nSuppose you have some data that you want to convert to another format,\nsuch as from GIF image format to PPM image format.  Maybe the\nconversion involves several steps (e.g. piping it through compress or\nuuencode).  Some of the conversion steps may require that their input\nis a disk file, others may be able to read standard input; similar for\ntheir output.  The input to the entire conversion may also be read\nfrom a disk file or from an open file, and similar for its output.\n\nThe module lets you construct a pipeline template by sticking one or\nmore conversion steps together.  It will take care of creating and\nremoving temporary files if they are necessary to hold intermediate\ndata.  You can then use the template to do conversions from many\ndifferent sources to many different destinations.  The temporary\nfile names used are different each time the template is used.\n\nThe templates are objects so you can create templates for many\ndifferent conversion steps and store them in a dictionary, for\ninstance.\n\n\nDirections:\n-----------\n\nTo create a template:\n    t = Template()\n\nTo add a conversion step to a template:\n   t.append(command, kind)\nwhere kind is a string of two characters: the first is '-' if the\ncommand reads its standard input or 'f' if it requires a file; the\nsecond likewise for the output. The command must be valid /bin/sh\nsyntax.  If input or output files are required, they are passed as\n$IN and $OUT; otherwise, it must be  possible to use the command in\na pipeline.\n\nTo add a conversion step at the beginning:\n   t.prepend(command, kind)\n\nTo convert a file to another file using a template:\n  sts = t.copy(infile, outfile)\nIf infile or outfile are the empty string, standard input is read or\nstandard output is written, respectively.  The return value is the\nexit status of the conversion pipeline.\n\nTo open a file for reading or writing through a conversion pipeline:\n   fp = t.open(file, mode)\nwhere mode is 'r' to read the file, or 'w' to write it -- just like\nfor the built-in function open() or for os.popen().\n\nTo create a new template object initialized to a given one:\n   t2 = t.clone()\n\nFor an example, see the function test() at the end of the file.\n", lineno=59, col_offset=-1), lineno=59, col_offset=-1), Import([alias('re', None)], lineno=62, col_offset=0), Import([alias('os', None)], lineno=63, col_offset=0), Import([alias('tempfile', None)], lineno=64, col_offset=0), Import([alias('string', None)], lineno=65, col_offset=0), Assign([Name('__all__', Store(), lineno=67, col_offset=0)], List([Str('Template', lineno=67, col_offset=11)], Load(), lineno=67, col_offset=10), lineno=67, col_offset=0), Assign([Name('FILEIN_FILEOUT', Store(), lineno=71, col_offset=0)], Str('ff', lineno=71, col_offset=17), lineno=71, col_offset=0), Assign([Name('STDIN_FILEOUT', Store(), lineno=72, col_offset=0)], Str('-f', lineno=72, col_offset=17), lineno=72, col_offset=0), Assign([Name('FILEIN_STDOUT', Store(), lineno=73, col_offset=0)], Str('f-', lineno=73, col_offset=17), lineno=73, col_offset=0), Assign([Name('STDIN_STDOUT', Store(), lineno=74, col_offset=0)], Str('--', lineno=74, col_offset=17), lineno=74, col_offset=0), Assign([Name('SOURCE', Store(), lineno=75, col_offset=0)], Str('.-', lineno=75, col_offset=17), lineno=75, col_offset=0), Assign([Name('SINK', Store(), lineno=76, col_offset=0)], Str('-.', lineno=76, col_offset=17), lineno=76, col_offset=0), Assign([Name('stepkinds', Store(), lineno=78, col_offset=0)], List([Name('FILEIN_FILEOUT', Load(), lineno=78, col_offset=13), Name('STDIN_FILEOUT', Load(), lineno=78, col_offset=29), Name('FILEIN_STDOUT', Load(), lineno=78, col_offset=44), Name('STDIN_STDOUT', Load(), lineno=78, col_offset=59), Name('SOURCE', Load(), lineno=79, col_offset=13), Name('SINK', Load(), lineno=79, col_offset=21)], Load(), lineno=78, col_offset=12), lineno=78, col_offset=0), ClassDef('Template', [], [Expr(Str('Class representing a pipeline template.', lineno=83, col_offset=4), lineno=83, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=85, col_offset=17)], None, None, []), [Expr(Str('Template() returns a fresh pipeline template.', lineno=86, col_offset=8), lineno=86, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=87, col_offset=8), 'debugging', Store(), lineno=87, col_offset=8)], Num(0, lineno=87, col_offset=25), lineno=87, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'reset', Load(), lineno=88, col_offset=8), [], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=90, col_offset=17)], None, None, []), [Expr(Str('t.__repr__() implements repr(t).', lineno=91, col_offset=8), lineno=91, col_offset=8), Return(BinOp(Str('<Template instance, steps=%r>', lineno=92, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=92, col_offset=50), 'steps', Load(), lineno=92, col_offset=50)], Load(), lineno=92, col_offset=50), lineno=92, col_offset=15), lineno=92, col_offset=8)], [], lineno=90, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=94, col_offset=14)], None, None, []), [Expr(Str('t.reset() restores a pipeline template to its initial state.', lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=96, col_offset=8), 'steps', Store(), lineno=96, col_offset=8)], List([], Load(), lineno=96, col_offset=21), lineno=96, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=98, col_offset=14)], None, None, []), [Expr(Str('t.clone() returns a new pipeline template with identical\n        initial state as the current one.', lineno=100, col_offset=-1), lineno=100, col_offset=-1), Assign([Name('t', Store(), lineno=101, col_offset=8)], Call(Name('Template', Load(), lineno=101, col_offset=12), [], [], None, None, lineno=101, col_offset=12), lineno=101, col_offset=8), Assign([Attribute(Name('t', Load(), lineno=102, col_offset=8), 'steps', Store(), lineno=102, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=102, col_offset=18), 'steps', Load(), lineno=102, col_offset=18), Slice(None, None, None), Load(), lineno=102, col_offset=18), lineno=102, col_offset=8), Assign([Attribute(Name('t', Load(), lineno=103, col_offset=8), 'debugging', Store(), lineno=103, col_offset=8)], Attribute(Name('self', Load(), lineno=103, col_offset=22), 'debugging', Load(), lineno=103, col_offset=22), lineno=103, col_offset=8), Return(Name('t', Load(), lineno=104, col_offset=15), lineno=104, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=106, col_offset=14), Name('flag', Param(), lineno=106, col_offset=20)], None, None, []), [Expr(Str('t.debug(flag) turns debugging on or off.', lineno=107, col_offset=8), lineno=107, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=108, col_offset=8), 'debugging', Store(), lineno=108, col_offset=8)], Name('flag', Load(), lineno=108, col_offset=25), lineno=108, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('append', arguments([Name('self', Param(), lineno=110, col_offset=15), Name('cmd', Param(), lineno=110, col_offset=21), Name('kind', Param(), lineno=110, col_offset=26)], None, None, []), [Expr(Str('t.append(cmd, kind) adds a new step at the end.', lineno=111, col_offset=8), lineno=111, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=112, col_offset=11), [Name('cmd', Load(), lineno=112, col_offset=16)], [], None, None, lineno=112, col_offset=11), [IsNot()], [Call(Name('type', Load(), lineno=112, col_offset=28), [Str('', lineno=112, col_offset=33)], [], None, None, lineno=112, col_offset=28)], lineno=112, col_offset=11), [Raise(Name('TypeError', Load(), lineno=113, col_offset=18), Str('Template.append: cmd must be a string', lineno=114, col_offset=18), None, lineno=113, col_offset=12)], [], lineno=112, col_offset=8), If(Compare(Name('kind', Load(), lineno=115, col_offset=11), [NotIn()], [Name('stepkinds', Load(), lineno=115, col_offset=23)], lineno=115, col_offset=11), [Raise(Name('ValueError', Load(), lineno=116, col_offset=18), BinOp(Str('Template.append: bad kind %r', lineno=117, col_offset=18), Mod(), Tuple([Name('kind', Load(), lineno=117, col_offset=52)], Load(), lineno=117, col_offset=52), lineno=117, col_offset=18), None, lineno=116, col_offset=12)], [], lineno=115, col_offset=8), If(Compare(Name('kind', Load(), lineno=118, col_offset=11), [Eq()], [Name('SOURCE', Load(), lineno=118, col_offset=19)], lineno=118, col_offset=11), [Raise(Name('ValueError', Load(), lineno=119, col_offset=18), Str('Template.append: SOURCE can only be prepended', lineno=120, col_offset=18), None, lineno=119, col_offset=12)], [], lineno=118, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=121, col_offset=11), 'steps', Load(), lineno=121, col_offset=11), Compare(Subscript(Subscript(Attribute(Name('self', Load(), lineno=121, col_offset=26), 'steps', Load(), lineno=121, col_offset=26), Index(Num(-1, lineno=121, col_offset=38)), Load(), lineno=121, col_offset=26), Index(Num(1, lineno=121, col_offset=41)), Load(), lineno=121, col_offset=26), [Eq()], [Name('SINK', Load(), lineno=121, col_offset=47)], lineno=121, col_offset=26)], lineno=121, col_offset=11), [Raise(Name('ValueError', Load(), lineno=122, col_offset=18), Str('Template.append: already ends with SINK', lineno=123, col_offset=18), None, lineno=122, col_offset=12)], [], lineno=121, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=124, col_offset=11), Index(Num(0, lineno=124, col_offset=16)), Load(), lineno=124, col_offset=11), [Eq()], [Str('f', lineno=124, col_offset=22)], lineno=124, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=124, col_offset=34), 'search', Load(), lineno=124, col_offset=34), [Str('\\$IN\\b', lineno=124, col_offset=44), Name('cmd', Load(), lineno=124, col_offset=55)], [], None, None, lineno=124, col_offset=34), lineno=124, col_offset=30)], lineno=124, col_offset=11), [Raise(Name('ValueError', Load(), lineno=125, col_offset=18), Str('Template.append: missing $IN in cmd', lineno=126, col_offset=18), None, lineno=125, col_offset=12)], [], lineno=124, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=127, col_offset=11), Index(Num(1, lineno=127, col_offset=16)), Load(), lineno=127, col_offset=11), [Eq()], [Str('f', lineno=127, col_offset=22)], lineno=127, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=127, col_offset=34), 'search', Load(), lineno=127, col_offset=34), [Str('\\$OUT\\b', lineno=127, col_offset=44), Name('cmd', Load(), lineno=127, col_offset=56)], [], None, None, lineno=127, col_offset=34), lineno=127, col_offset=30)], lineno=127, col_offset=11), [Raise(Name('ValueError', Load(), lineno=128, col_offset=18), Str('Template.append: missing $OUT in cmd', lineno=129, col_offset=18), None, lineno=128, col_offset=12)], [], lineno=127, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=130, col_offset=8), 'steps', Load(), lineno=130, col_offset=8), 'append', Load(), lineno=130, col_offset=8), [Tuple([Name('cmd', Load(), lineno=130, col_offset=27), Name('kind', Load(), lineno=130, col_offset=32)], Load(), lineno=130, col_offset=27)], [], None, None, lineno=130, col_offset=8), lineno=130, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('prepend', arguments([Name('self', Param(), lineno=132, col_offset=16), Name('cmd', Param(), lineno=132, col_offset=22), Name('kind', Param(), lineno=132, col_offset=27)], None, None, []), [Expr(Str('t.prepend(cmd, kind) adds a new step at the front.', lineno=133, col_offset=8), lineno=133, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=134, col_offset=11), [Name('cmd', Load(), lineno=134, col_offset=16)], [], None, None, lineno=134, col_offset=11), [IsNot()], [Call(Name('type', Load(), lineno=134, col_offset=28), [Str('', lineno=134, col_offset=33)], [], None, None, lineno=134, col_offset=28)], lineno=134, col_offset=11), [Raise(Name('TypeError', Load(), lineno=135, col_offset=18), Str('Template.prepend: cmd must be a string', lineno=136, col_offset=18), None, lineno=135, col_offset=12)], [], lineno=134, col_offset=8), If(Compare(Name('kind', Load(), lineno=137, col_offset=11), [NotIn()], [Name('stepkinds', Load(), lineno=137, col_offset=23)], lineno=137, col_offset=11), [Raise(Name('ValueError', Load(), lineno=138, col_offset=18), BinOp(Str('Template.prepend: bad kind %r', lineno=139, col_offset=18), Mod(), Tuple([Name('kind', Load(), lineno=139, col_offset=53)], Load(), lineno=139, col_offset=53), lineno=139, col_offset=18), None, lineno=138, col_offset=12)], [], lineno=137, col_offset=8), If(Compare(Name('kind', Load(), lineno=140, col_offset=11), [Eq()], [Name('SINK', Load(), lineno=140, col_offset=19)], lineno=140, col_offset=11), [Raise(Name('ValueError', Load(), lineno=141, col_offset=18), Str('Template.prepend: SINK can only be appended', lineno=142, col_offset=18), None, lineno=141, col_offset=12)], [], lineno=140, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=143, col_offset=11), 'steps', Load(), lineno=143, col_offset=11), Compare(Subscript(Subscript(Attribute(Name('self', Load(), lineno=143, col_offset=26), 'steps', Load(), lineno=143, col_offset=26), Index(Num(0, lineno=143, col_offset=37)), Load(), lineno=143, col_offset=26), Index(Num(1, lineno=143, col_offset=40)), Load(), lineno=143, col_offset=26), [Eq()], [Name('SOURCE', Load(), lineno=143, col_offset=46)], lineno=143, col_offset=26)], lineno=143, col_offset=11), [Raise(Name('ValueError', Load(), lineno=144, col_offset=18), Str('Template.prepend: already begins with SOURCE', lineno=145, col_offset=18), None, lineno=144, col_offset=12)], [], lineno=143, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=146, col_offset=11), Index(Num(0, lineno=146, col_offset=16)), Load(), lineno=146, col_offset=11), [Eq()], [Str('f', lineno=146, col_offset=22)], lineno=146, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=146, col_offset=34), 'search', Load(), lineno=146, col_offset=34), [Str('\\$IN\\b', lineno=146, col_offset=44), Name('cmd', Load(), lineno=146, col_offset=55)], [], None, None, lineno=146, col_offset=34), lineno=146, col_offset=30)], lineno=146, col_offset=11), [Raise(Name('ValueError', Load(), lineno=147, col_offset=18), Str('Template.prepend: missing $IN in cmd', lineno=148, col_offset=18), None, lineno=147, col_offset=12)], [], lineno=146, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=149, col_offset=11), Index(Num(1, lineno=149, col_offset=16)), Load(), lineno=149, col_offset=11), [Eq()], [Str('f', lineno=149, col_offset=22)], lineno=149, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=149, col_offset=34), 'search', Load(), lineno=149, col_offset=34), [Str('\\$OUT\\b', lineno=149, col_offset=44), Name('cmd', Load(), lineno=149, col_offset=56)], [], None, None, lineno=149, col_offset=34), lineno=149, col_offset=30)], lineno=149, col_offset=11), [Raise(Name('ValueError', Load(), lineno=150, col_offset=18), Str('Template.prepend: missing $OUT in cmd', lineno=151, col_offset=18), None, lineno=150, col_offset=12)], [], lineno=149, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=152, col_offset=8), 'steps', Load(), lineno=152, col_offset=8), 'insert', Load(), lineno=152, col_offset=8), [Num(0, lineno=152, col_offset=26), Tuple([Name('cmd', Load(), lineno=152, col_offset=30), Name('kind', Load(), lineno=152, col_offset=35)], Load(), lineno=152, col_offset=30)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('open', arguments([Name('self', Param(), lineno=154, col_offset=13), Name('file', Param(), lineno=154, col_offset=19), Name('rw', Param(), lineno=154, col_offset=25)], None, None, []), [Expr(Str('t.open(file, rw) returns a pipe or file object open for\n        reading or writing; the file is the other end of the pipeline.', lineno=156, col_offset=-1), lineno=156, col_offset=-1), If(Compare(Name('rw', Load(), lineno=157, col_offset=11), [Eq()], [Str('r', lineno=157, col_offset=17)], lineno=157, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=158, col_offset=19), 'open_r', Load(), lineno=158, col_offset=19), [Name('file', Load(), lineno=158, col_offset=31)], [], None, None, lineno=158, col_offset=19), lineno=158, col_offset=12)], [], lineno=157, col_offset=8), If(Compare(Name('rw', Load(), lineno=159, col_offset=11), [Eq()], [Str('w', lineno=159, col_offset=17)], lineno=159, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=160, col_offset=19), 'open_w', Load(), lineno=160, col_offset=19), [Name('file', Load(), lineno=160, col_offset=31)], [], None, None, lineno=160, col_offset=19), lineno=160, col_offset=12)], [], lineno=159, col_offset=8), Raise(Name('ValueError', Load(), lineno=161, col_offset=14), BinOp(Str("Template.open: rw must be 'r' or 'w', not %r", lineno=162, col_offset=14), Mod(), Tuple([Name('rw', Load(), lineno=162, col_offset=68)], Load(), lineno=162, col_offset=68), lineno=162, col_offset=14), None, lineno=161, col_offset=8)], [], lineno=154, col_offset=4), FunctionDef('open_r', arguments([Name('self', Param(), lineno=164, col_offset=15), Name('file', Param(), lineno=164, col_offset=21)], None, None, []), [Expr(Str("t.open_r(file) and t.open_w(file) implement\n        t.open(file, 'r') and t.open(file, 'w') respectively.", lineno=166, col_offset=-1), lineno=166, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=167, col_offset=15), 'steps', Load(), lineno=167, col_offset=15), lineno=167, col_offset=11), [Return(Call(Name('open', Load(), lineno=168, col_offset=19), [Name('file', Load(), lineno=168, col_offset=24), Str('r', lineno=168, col_offset=30)], [], None, None, lineno=168, col_offset=19), lineno=168, col_offset=12)], [], lineno=167, col_offset=8), If(Compare(Subscript(Subscript(Attribute(Name('self', Load(), lineno=169, col_offset=11), 'steps', Load(), lineno=169, col_offset=11), Index(Num(-1, lineno=169, col_offset=23)), Load(), lineno=169, col_offset=11), Index(Num(1, lineno=169, col_offset=26)), Load(), lineno=169, col_offset=11), [Eq()], [Name('SINK', Load(), lineno=169, col_offset=32)], lineno=169, col_offset=11), [Raise(Name('ValueError', Load(), lineno=170, col_offset=18), Str('Template.open_r: pipeline ends width SINK', lineno=171, col_offset=18), None, lineno=170, col_offset=12)], [], lineno=169, col_offset=8), Assign([Name('cmd', Store(), lineno=172, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=172, col_offset=14), 'makepipeline', Load(), lineno=172, col_offset=14), [Name('file', Load(), lineno=172, col_offset=32), Str('', lineno=172, col_offset=38)], [], None, None, lineno=172, col_offset=14), lineno=172, col_offset=8), Return(Call(Attribute(Name('os', Load(), lineno=173, col_offset=15), 'popen', Load(), lineno=173, col_offset=15), [Name('cmd', Load(), lineno=173, col_offset=24), Str('r', lineno=173, col_offset=29)], [], None, None, lineno=173, col_offset=15), lineno=173, col_offset=8)], [], lineno=164, col_offset=4), FunctionDef('open_w', arguments([Name('self', Param(), lineno=175, col_offset=15), Name('file', Param(), lineno=175, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=176, col_offset=15), 'steps', Load(), lineno=176, col_offset=15), lineno=176, col_offset=11), [Return(Call(Name('open', Load(), lineno=177, col_offset=19), [Name('file', Load(), lineno=177, col_offset=24), Str('w', lineno=177, col_offset=30)], [], None, None, lineno=177, col_offset=19), lineno=177, col_offset=12)], [], lineno=176, col_offset=8), If(Compare(Subscript(Subscript(Attribute(Name('self', Load(), lineno=178, col_offset=11), 'steps', Load(), lineno=178, col_offset=11), Index(Num(0, lineno=178, col_offset=22)), Load(), lineno=178, col_offset=11), Index(Num(1, lineno=178, col_offset=25)), Load(), lineno=178, col_offset=11), [Eq()], [Name('SOURCE', Load(), lineno=178, col_offset=31)], lineno=178, col_offset=11), [Raise(Name('ValueError', Load(), lineno=179, col_offset=18), Str('Template.open_w: pipeline begins with SOURCE', lineno=180, col_offset=18), None, lineno=179, col_offset=12)], [], lineno=178, col_offset=8), Assign([Name('cmd', Store(), lineno=181, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=181, col_offset=14), 'makepipeline', Load(), lineno=181, col_offset=14), [Str('', lineno=181, col_offset=32), Name('file', Load(), lineno=181, col_offset=36)], [], None, None, lineno=181, col_offset=14), lineno=181, col_offset=8), Return(Call(Attribute(Name('os', Load(), lineno=182, col_offset=15), 'popen', Load(), lineno=182, col_offset=15), [Name('cmd', Load(), lineno=182, col_offset=24), Str('w', lineno=182, col_offset=29)], [], None, None, lineno=182, col_offset=15), lineno=182, col_offset=8)], [], lineno=175, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=184, col_offset=13), Name('infile', Param(), lineno=184, col_offset=19), Name('outfile', Param(), lineno=184, col_offset=27)], None, None, []), [Return(Call(Attribute(Name('os', Load(), lineno=185, col_offset=15), 'system', Load(), lineno=185, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=185, col_offset=25), 'makepipeline', Load(), lineno=185, col_offset=25), [Name('infile', Load(), lineno=185, col_offset=43), Name('outfile', Load(), lineno=185, col_offset=51)], [], None, None, lineno=185, col_offset=25)], [], None, None, lineno=185, col_offset=15), lineno=185, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('makepipeline', arguments([Name('self', Param(), lineno=187, col_offset=21), Name('infile', Param(), lineno=187, col_offset=27), Name('outfile', Param(), lineno=187, col_offset=35)], None, None, []), [Assign([Name('cmd', Store(), lineno=188, col_offset=8)], Call(Name('makepipeline', Load(), lineno=188, col_offset=14), [Name('infile', Load(), lineno=188, col_offset=27), Attribute(Name('self', Load(), lineno=188, col_offset=35), 'steps', Load(), lineno=188, col_offset=35), Name('outfile', Load(), lineno=188, col_offset=47)], [], None, None, lineno=188, col_offset=14), lineno=188, col_offset=8), If(Attribute(Name('self', Load(), lineno=189, col_offset=11), 'debugging', Load(), lineno=189, col_offset=11), [Print(None, [Name('cmd', Load(), lineno=190, col_offset=18)], True, lineno=190, col_offset=12), Assign([Name('cmd', Store(), lineno=191, col_offset=12)], BinOp(Str('set -x; ', lineno=191, col_offset=18), Add(), Name('cmd', Load(), lineno=191, col_offset=31), lineno=191, col_offset=18), lineno=191, col_offset=12)], [], lineno=189, col_offset=8), Return(Name('cmd', Load(), lineno=192, col_offset=15), lineno=192, col_offset=8)], [], lineno=187, col_offset=4)], [], lineno=82, col_offset=0), FunctionDef('makepipeline', arguments([Name('infile', Param(), lineno=195, col_offset=17), Name('steps', Param(), lineno=195, col_offset=25), Name('outfile', Param(), lineno=195, col_offset=32)], None, None, []), [Assign([Name('list', Store(), lineno=199, col_offset=4)], List([], Load(), lineno=199, col_offset=11), lineno=199, col_offset=4), For(Tuple([Name('cmd', Store(), lineno=200, col_offset=8), Name('kind', Store(), lineno=200, col_offset=13)], Store(), lineno=200, col_offset=8), Name('steps', Load(), lineno=200, col_offset=21), [Expr(Call(Attribute(Name('list', Load(), lineno=201, col_offset=8), 'append', Load(), lineno=201, col_offset=8), [List([Str('', lineno=201, col_offset=21), Name('cmd', Load(), lineno=201, col_offset=25), Name('kind', Load(), lineno=201, col_offset=30), Str('', lineno=201, col_offset=36)], Load(), lineno=201, col_offset=20)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8)], [], lineno=200, col_offset=4), If(UnaryOp(Not(), Name('list', Load(), lineno=205, col_offset=11), lineno=205, col_offset=7), [Expr(Call(Attribute(Name('list', Load(), lineno=206, col_offset=8), 'append', Load(), lineno=206, col_offset=8), [List([Str('', lineno=206, col_offset=21), Str('cat', lineno=206, col_offset=25), Str('--', lineno=206, col_offset=32), Str('', lineno=206, col_offset=38)], Load(), lineno=206, col_offset=20)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8)], [], lineno=205, col_offset=4), Assign([List([Name('cmd', Store(), lineno=210, col_offset=5), Name('kind', Store(), lineno=210, col_offset=10)], Store(), lineno=210, col_offset=4)], Subscript(Subscript(Name('list', Load(), lineno=210, col_offset=18), Index(Num(0, lineno=210, col_offset=23)), Load(), lineno=210, col_offset=18), Slice(Num(1, lineno=210, col_offset=26), Num(3, lineno=210, col_offset=28), None), Load(), lineno=210, col_offset=18), lineno=210, col_offset=4), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=211, col_offset=7), Index(Num(0, lineno=211, col_offset=12)), Load(), lineno=211, col_offset=7), [Eq()], [Str('f', lineno=211, col_offset=18)], lineno=211, col_offset=7), UnaryOp(Not(), Name('infile', Load(), lineno=211, col_offset=30), lineno=211, col_offset=26)], lineno=211, col_offset=7), [Expr(Call(Attribute(Name('list', Load(), lineno=212, col_offset=8), 'insert', Load(), lineno=212, col_offset=8), [Num(0, lineno=212, col_offset=20), List([Str('', lineno=212, col_offset=24), Str('cat', lineno=212, col_offset=28), Str('--', lineno=212, col_offset=35), Str('', lineno=212, col_offset=41)], Load(), lineno=212, col_offset=23)], [], None, None, lineno=212, col_offset=8), lineno=212, col_offset=8)], [], lineno=211, col_offset=4), Assign([Subscript(Subscript(Name('list', Load(), lineno=213, col_offset=4), Index(Num(0, lineno=213, col_offset=9)), Load(), lineno=213, col_offset=4), Index(Num(0, lineno=213, col_offset=12)), Store(), lineno=213, col_offset=4)], Name('infile', Load(), lineno=213, col_offset=17), lineno=213, col_offset=4), Assign([List([Name('cmd', Store(), lineno=215, col_offset=5), Name('kind', Store(), lineno=215, col_offset=10)], Store(), lineno=215, col_offset=4)], Subscript(Subscript(Name('list', Load(), lineno=215, col_offset=18), Index(Num(-1, lineno=215, col_offset=24)), Load(), lineno=215, col_offset=18), Slice(Num(1, lineno=215, col_offset=27), Num(3, lineno=215, col_offset=29), None), Load(), lineno=215, col_offset=18), lineno=215, col_offset=4), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=216, col_offset=7), Index(Num(1, lineno=216, col_offset=12)), Load(), lineno=216, col_offset=7), [Eq()], [Str('f', lineno=216, col_offset=18)], lineno=216, col_offset=7), UnaryOp(Not(), Name('outfile', Load(), lineno=216, col_offset=30), lineno=216, col_offset=26)], lineno=216, col_offset=7), [Expr(Call(Attribute(Name('list', Load(), lineno=217, col_offset=8), 'append', Load(), lineno=217, col_offset=8), [List([Str('', lineno=217, col_offset=21), Str('cat', lineno=217, col_offset=25), Str('--', lineno=217, col_offset=32), Str('', lineno=217, col_offset=38)], Load(), lineno=217, col_offset=20)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8)], [], lineno=216, col_offset=4), Assign([Subscript(Subscript(Name('list', Load(), lineno=218, col_offset=4), Index(Num(-1, lineno=218, col_offset=10)), Load(), lineno=218, col_offset=4), Index(Num(-1, lineno=218, col_offset=14)), Store(), lineno=218, col_offset=4)], Name('outfile', Load(), lineno=218, col_offset=19), lineno=218, col_offset=4), Assign([Name('garbage', Store(), lineno=222, col_offset=4)], List([], Load(), lineno=222, col_offset=14), lineno=222, col_offset=4), For(Name('i', Store(), lineno=223, col_offset=8), Call(Name('range', Load(), lineno=223, col_offset=13), [Num(1, lineno=223, col_offset=19), Call(Name('len', Load(), lineno=223, col_offset=22), [Name('list', Load(), lineno=223, col_offset=26)], [], None, None, lineno=223, col_offset=22)], [], None, None, lineno=223, col_offset=13), [Assign([Name('lkind', Store(), lineno=224, col_offset=8)], Subscript(Subscript(Name('list', Load(), lineno=224, col_offset=16), Index(BinOp(Name('i', Load(), lineno=224, col_offset=21), Sub(), Num(1, lineno=224, col_offset=23), lineno=224, col_offset=21)), Load(), lineno=224, col_offset=16), Index(Num(2, lineno=224, col_offset=26)), Load(), lineno=224, col_offset=16), lineno=224, col_offset=8), Assign([Name('rkind', Store(), lineno=225, col_offset=8)], Subscript(Subscript(Name('list', Load(), lineno=225, col_offset=16), Index(Name('i', Load(), lineno=225, col_offset=21)), Load(), lineno=225, col_offset=16), Index(Num(2, lineno=225, col_offset=24)), Load(), lineno=225, col_offset=16), lineno=225, col_offset=8), If(BoolOp(Or(), [Compare(Subscript(Name('lkind', Load(), lineno=226, col_offset=11), Index(Num(1, lineno=226, col_offset=17)), Load(), lineno=226, col_offset=11), [Eq()], [Str('f', lineno=226, col_offset=23)], lineno=226, col_offset=11), Compare(Subscript(Name('rkind', Load(), lineno=226, col_offset=30), Index(Num(0, lineno=226, col_offset=36)), Load(), lineno=226, col_offset=30), [Eq()], [Str('f', lineno=226, col_offset=42)], lineno=226, col_offset=30)], lineno=226, col_offset=11), [Assign([Tuple([Name('fd', Store(), lineno=227, col_offset=13), Name('temp', Store(), lineno=227, col_offset=17)], Store(), lineno=227, col_offset=13)], Call(Attribute(Name('tempfile', Load(), lineno=227, col_offset=25), 'mkstemp', Load(), lineno=227, col_offset=25), [], [], None, None, lineno=227, col_offset=25), lineno=227, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=228, col_offset=12), 'close', Load(), lineno=228, col_offset=12), [Name('fd', Load(), lineno=228, col_offset=21)], [], None, None, lineno=228, col_offset=12), lineno=228, col_offset=12), Expr(Call(Attribute(Name('garbage', Load(), lineno=229, col_offset=12), 'append', Load(), lineno=229, col_offset=12), [Name('temp', Load(), lineno=229, col_offset=27)], [], None, None, lineno=229, col_offset=12), lineno=229, col_offset=12), Assign([Subscript(Subscript(Name('list', Load(), lineno=230, col_offset=12), Index(BinOp(Name('i', Load(), lineno=230, col_offset=17), Sub(), Num(1, lineno=230, col_offset=19), lineno=230, col_offset=17)), Load(), lineno=230, col_offset=12), Index(Num(-1, lineno=230, col_offset=23)), Store(), lineno=230, col_offset=12), Subscript(Subscript(Name('list', Load(), lineno=230, col_offset=28), Index(Name('i', Load(), lineno=230, col_offset=33)), Load(), lineno=230, col_offset=28), Index(Num(0, lineno=230, col_offset=36)), Store(), lineno=230, col_offset=28)], Name('temp', Load(), lineno=230, col_offset=41), lineno=230, col_offset=12)], [], lineno=226, col_offset=8)], [], lineno=223, col_offset=4), For(Name('item', Store(), lineno=232, col_offset=8), Name('list', Load(), lineno=232, col_offset=16), [Assign([List([Name('inf', Store(), lineno=233, col_offset=9), Name('cmd', Store(), lineno=233, col_offset=14), Name('kind', Store(), lineno=233, col_offset=19), Name('outf', Store(), lineno=233, col_offset=25)], Store(), lineno=233, col_offset=8)], Name('item', Load(), lineno=233, col_offset=33), lineno=233, col_offset=8), If(Compare(Subscript(Name('kind', Load(), lineno=234, col_offset=11), Index(Num(1, lineno=234, col_offset=16)), Load(), lineno=234, col_offset=11), [Eq()], [Str('f', lineno=234, col_offset=22)], lineno=234, col_offset=11), [Assign([Name('cmd', Store(), lineno=235, col_offset=12)], BinOp(BinOp(BinOp(Str('OUT=', lineno=235, col_offset=18), Add(), Call(Name('quote', Load(), lineno=235, col_offset=27), [Name('outf', Load(), lineno=235, col_offset=33)], [], None, None, lineno=235, col_offset=27), lineno=235, col_offset=18), Add(), Str('; ', lineno=235, col_offset=41), lineno=235, col_offset=39), Add(), Name('cmd', Load(), lineno=235, col_offset=48), lineno=235, col_offset=46), lineno=235, col_offset=12)], [], lineno=234, col_offset=8), If(Compare(Subscript(Name('kind', Load(), lineno=236, col_offset=11), Index(Num(0, lineno=236, col_offset=16)), Load(), lineno=236, col_offset=11), [Eq()], [Str('f', lineno=236, col_offset=22)], lineno=236, col_offset=11), [Assign([Name('cmd', Store(), lineno=237, col_offset=12)], BinOp(BinOp(BinOp(Str('IN=', lineno=237, col_offset=18), Add(), Call(Name('quote', Load(), lineno=237, col_offset=26), [Name('inf', Load(), lineno=237, col_offset=32)], [], None, None, lineno=237, col_offset=26), lineno=237, col_offset=18), Add(), Str('; ', lineno=237, col_offset=39), lineno=237, col_offset=37), Add(), Name('cmd', Load(), lineno=237, col_offset=46), lineno=237, col_offset=44), lineno=237, col_offset=12)], [], lineno=236, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=238, col_offset=11), Index(Num(0, lineno=238, col_offset=16)), Load(), lineno=238, col_offset=11), [Eq()], [Str('-', lineno=238, col_offset=22)], lineno=238, col_offset=11), Name('inf', Load(), lineno=238, col_offset=30)], lineno=238, col_offset=11), [Assign([Name('cmd', Store(), lineno=239, col_offset=12)], BinOp(BinOp(Name('cmd', Load(), lineno=239, col_offset=18), Add(), Str(' <', lineno=239, col_offset=24), lineno=239, col_offset=18), Add(), Call(Name('quote', Load(), lineno=239, col_offset=31), [Name('inf', Load(), lineno=239, col_offset=37)], [], None, None, lineno=239, col_offset=31), lineno=239, col_offset=29), lineno=239, col_offset=12)], [], lineno=238, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Name('kind', Load(), lineno=240, col_offset=11), Index(Num(1, lineno=240, col_offset=16)), Load(), lineno=240, col_offset=11), [Eq()], [Str('-', lineno=240, col_offset=22)], lineno=240, col_offset=11), Name('outf', Load(), lineno=240, col_offset=30)], lineno=240, col_offset=11), [Assign([Name('cmd', Store(), lineno=241, col_offset=12)], BinOp(BinOp(Name('cmd', Load(), lineno=241, col_offset=18), Add(), Str(' >', lineno=241, col_offset=24), lineno=241, col_offset=18), Add(), Call(Name('quote', Load(), lineno=241, col_offset=31), [Name('outf', Load(), lineno=241, col_offset=37)], [], None, None, lineno=241, col_offset=31), lineno=241, col_offset=29), lineno=241, col_offset=12)], [], lineno=240, col_offset=8), Assign([Subscript(Name('item', Load(), lineno=242, col_offset=8), Index(Num(1, lineno=242, col_offset=13)), Store(), lineno=242, col_offset=8)], Name('cmd', Load(), lineno=242, col_offset=18), lineno=242, col_offset=8)], [], lineno=232, col_offset=4), Assign([Name('cmdlist', Store(), lineno=244, col_offset=4)], Subscript(Subscript(Name('list', Load(), lineno=244, col_offset=14), Index(Num(0, lineno=244, col_offset=19)), Load(), lineno=244, col_offset=14), Index(Num(1, lineno=244, col_offset=22)), Load(), lineno=244, col_offset=14), lineno=244, col_offset=4), For(Name('item', Store(), lineno=245, col_offset=8), Subscript(Name('list', Load(), lineno=245, col_offset=16), Slice(Num(1, lineno=245, col_offset=21), None, None), Load(), lineno=245, col_offset=16), [Assign([List([Name('cmd', Store(), lineno=246, col_offset=9), Name('kind', Store(), lineno=246, col_offset=14)], Store(), lineno=246, col_offset=8)], Subscript(Name('item', Load(), lineno=246, col_offset=22), Slice(Num(1, lineno=246, col_offset=27), Num(3, lineno=246, col_offset=29), None), Load(), lineno=246, col_offset=22), lineno=246, col_offset=8), If(Compare(Subscript(Name('item', Load(), lineno=247, col_offset=11), Index(Num(0, lineno=247, col_offset=16)), Load(), lineno=247, col_offset=11), [Eq()], [Str('', lineno=247, col_offset=22)], lineno=247, col_offset=11), [If(Compare(Str('f', lineno=248, col_offset=15), [In()], [Name('kind', Load(), lineno=248, col_offset=22)], lineno=248, col_offset=15), [Assign([Name('cmd', Store(), lineno=249, col_offset=16)], BinOp(BinOp(Str('{ ', lineno=249, col_offset=22), Add(), Name('cmd', Load(), lineno=249, col_offset=29), lineno=249, col_offset=22), Add(), Str('; }', lineno=249, col_offset=35), lineno=249, col_offset=33), lineno=249, col_offset=16)], [], lineno=248, col_offset=12), Assign([Name('cmdlist', Store(), lineno=250, col_offset=12)], BinOp(BinOp(Name('cmdlist', Load(), lineno=250, col_offset=22), Add(), Str(' |\n', lineno=250, col_offset=32), lineno=250, col_offset=22), Add(), Name('cmd', Load(), lineno=250, col_offset=41), lineno=250, col_offset=39), lineno=250, col_offset=12)], [Assign([Name('cmdlist', Store(), lineno=252, col_offset=12)], BinOp(BinOp(Name('cmdlist', Load(), lineno=252, col_offset=22), Add(), Str('\n', lineno=252, col_offset=32), lineno=252, col_offset=22), Add(), Name('cmd', Load(), lineno=252, col_offset=39), lineno=252, col_offset=37), lineno=252, col_offset=12)], lineno=247, col_offset=8)], [], lineno=245, col_offset=4), If(Name('garbage', Load(), lineno=254, col_offset=7), [Assign([Name('rmcmd', Store(), lineno=255, col_offset=8)], Str('rm -f', lineno=255, col_offset=16), lineno=255, col_offset=8), For(Name('file', Store(), lineno=256, col_offset=12), Name('garbage', Load(), lineno=256, col_offset=20), [Assign([Name('rmcmd', Store(), lineno=257, col_offset=12)], BinOp(BinOp(Name('rmcmd', Load(), lineno=257, col_offset=20), Add(), Str(' ', lineno=257, col_offset=28), lineno=257, col_offset=20), Add(), Call(Name('quote', Load(), lineno=257, col_offset=34), [Name('file', Load(), lineno=257, col_offset=40)], [], None, None, lineno=257, col_offset=34), lineno=257, col_offset=32), lineno=257, col_offset=12)], [], lineno=256, col_offset=8), Assign([Name('trapcmd', Store(), lineno=258, col_offset=8)], BinOp(BinOp(Str('trap ', lineno=258, col_offset=18), Add(), Call(Name('quote', Load(), lineno=258, col_offset=28), [BinOp(Name('rmcmd', Load(), lineno=258, col_offset=34), Add(), Str('; exit', lineno=258, col_offset=42), lineno=258, col_offset=34)], [], None, None, lineno=258, col_offset=28), lineno=258, col_offset=18), Add(), Str(' 1 2 3 13 14 15', lineno=258, col_offset=54), lineno=258, col_offset=52), lineno=258, col_offset=8), Assign([Name('cmdlist', Store(), lineno=259, col_offset=8)], BinOp(BinOp(BinOp(BinOp(Name('trapcmd', Load(), lineno=259, col_offset=18), Add(), Str('\n', lineno=259, col_offset=28), lineno=259, col_offset=18), Add(), Name('cmdlist', Load(), lineno=259, col_offset=35), lineno=259, col_offset=33), Add(), Str('\n', lineno=259, col_offset=45), lineno=259, col_offset=43), Add(), Name('rmcmd', Load(), lineno=259, col_offset=52), lineno=259, col_offset=50), lineno=259, col_offset=8)], [], lineno=254, col_offset=4), Return(Name('cmdlist', Load(), lineno=261, col_offset=11), lineno=261, col_offset=4)], [], lineno=195, col_offset=0), Assign([Name('_safechars', Store(), lineno=267, col_offset=0)], Call(Name('frozenset', Load(), lineno=267, col_offset=13), [BinOp(BinOp(Attribute(Name('string', Load(), lineno=267, col_offset=23), 'ascii_letters', Load(), lineno=267, col_offset=23), Add(), Attribute(Name('string', Load(), lineno=267, col_offset=46), 'digits', Load(), lineno=267, col_offset=46), lineno=267, col_offset=23), Add(), Str('@%_-+=:,./', lineno=267, col_offset=62), lineno=267, col_offset=60)], [], None, None, lineno=267, col_offset=13), lineno=267, col_offset=0), FunctionDef('quote', arguments([Name('file', Param(), lineno=269, col_offset=10)], None, None, []), [Expr(Str('Return a shell-escaped version of the file string.', lineno=270, col_offset=4), lineno=270, col_offset=4), For(Name('c', Store(), lineno=271, col_offset=8), Name('file', Load(), lineno=271, col_offset=13), [If(Compare(Name('c', Load(), lineno=272, col_offset=11), [NotIn()], [Name('_safechars', Load(), lineno=272, col_offset=20)], lineno=272, col_offset=11), [Break( lineno=273, col_offset=12)], [], lineno=272, col_offset=8)], [If(UnaryOp(Not(), Name('file', Load(), lineno=275, col_offset=15), lineno=275, col_offset=11), [Return(Str("''", lineno=276, col_offset=19), lineno=276, col_offset=12)], [], lineno=275, col_offset=8), Return(Name('file', Load(), lineno=277, col_offset=15), lineno=277, col_offset=8)], lineno=271, col_offset=4), Return(BinOp(BinOp(Str("'", lineno=280, col_offset=11), Add(), Call(Attribute(Name('file', Load(), lineno=280, col_offset=17), 'replace', Load(), lineno=280, col_offset=17), [Str("'", lineno=280, col_offset=30), Str('\'"\'"\'', lineno=280, col_offset=35)], [], None, None, lineno=280, col_offset=17), lineno=280, col_offset=11), Add(), Str("'", lineno=280, col_offset=48), lineno=280, col_offset=46), lineno=280, col_offset=4)], [], lineno=269, col_offset=0)])
