Module([Expr(Str(" Python 'uu_codec' Codec - UU content transfer encoding\n\n    Unlike most of the other codecs which target Unicode, this codec\n    will return Python string objects for both encode and decode.\n\n    Written by Marc-Andre Lemburg (mal@lemburg.com). Some details were\n    adapted from uu.py which was written by Lance Ellinghouse and\n    modified by Jack Jansen and Fredrik Lundh.\n\n", lineno=10, col_offset=-1), lineno=10, col_offset=-1), Import([alias('codecs', None), alias('binascii', None)], lineno=11, col_offset=0), FunctionDef('uu_encode', arguments([Name('input', Param(), lineno=15, col_offset=14), Name('errors', Param(), lineno=15, col_offset=20), Name('filename', Param(), lineno=15, col_offset=36), Name('mode', Param(), lineno=15, col_offset=54)], None, None, [Str('strict', lineno=15, col_offset=27), Str('<data>', lineno=15, col_offset=45), Num(438, lineno=15, col_offset=59)]), [Expr(Str(" Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    ", lineno=24, col_offset=-1), lineno=24, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=25, col_offset=11), [Eq()], [Str('strict', lineno=25, col_offset=21)], lineno=25, col_offset=11), None, lineno=25, col_offset=4), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=26, col_offset=4), ImportFrom('binascii', [alias('b2a_uu', None)], 0, lineno=27, col_offset=4), Assign([Name('infile', Store(), lineno=29, col_offset=4)], Call(Name('StringIO', Load(), lineno=29, col_offset=13), [Call(Name('str', Load(), lineno=29, col_offset=22), [Name('input', Load(), lineno=29, col_offset=26)], [], None, None, lineno=29, col_offset=22)], [], None, None, lineno=29, col_offset=13), lineno=29, col_offset=4), Assign([Name('outfile', Store(), lineno=30, col_offset=4)], Call(Name('StringIO', Load(), lineno=30, col_offset=14), [], [], None, None, lineno=30, col_offset=14), lineno=30, col_offset=4), Assign([Name('read', Store(), lineno=31, col_offset=4)], Attribute(Name('infile', Load(), lineno=31, col_offset=11), 'read', Load(), lineno=31, col_offset=11), lineno=31, col_offset=4), Assign([Name('write', Store(), lineno=32, col_offset=4)], Attribute(Name('outfile', Load(), lineno=32, col_offset=12), 'write', Load(), lineno=32, col_offset=12), lineno=32, col_offset=4), Expr(Call(Name('write', Load(), lineno=35, col_offset=4), [BinOp(Str('begin %o %s\n', lineno=35, col_offset=10), Mod(), Tuple([BinOp(Name('mode', Load(), lineno=35, col_offset=29), BitAnd(), Num(511, lineno=35, col_offset=36), lineno=35, col_offset=29), Name('filename', Load(), lineno=35, col_offset=42)], Load(), lineno=35, col_offset=29), lineno=35, col_offset=10)], [], None, None, lineno=35, col_offset=4), lineno=35, col_offset=4), Assign([Name('chunk', Store(), lineno=36, col_offset=4)], Call(Name('read', Load(), lineno=36, col_offset=12), [Num(45, lineno=36, col_offset=17)], [], None, None, lineno=36, col_offset=12), lineno=36, col_offset=4), While(Name('chunk', Load(), lineno=37, col_offset=10), [Expr(Call(Name('write', Load(), lineno=38, col_offset=8), [Call(Name('b2a_uu', Load(), lineno=38, col_offset=14), [Name('chunk', Load(), lineno=38, col_offset=21)], [], None, None, lineno=38, col_offset=14)], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=8), Assign([Name('chunk', Store(), lineno=39, col_offset=8)], Call(Name('read', Load(), lineno=39, col_offset=16), [Num(45, lineno=39, col_offset=21)], [], None, None, lineno=39, col_offset=16), lineno=39, col_offset=8)], [], lineno=37, col_offset=4), Expr(Call(Name('write', Load(), lineno=40, col_offset=4), [Str(' \nend\n', lineno=40, col_offset=10)], [], None, None, lineno=40, col_offset=4), lineno=40, col_offset=4), Return(Tuple([Call(Attribute(Name('outfile', Load(), lineno=42, col_offset=12), 'getvalue', Load(), lineno=42, col_offset=12), [], [], None, None, lineno=42, col_offset=12), Call(Name('len', Load(), lineno=42, col_offset=32), [Name('input', Load(), lineno=42, col_offset=36)], [], None, None, lineno=42, col_offset=32)], Load(), lineno=42, col_offset=12), lineno=42, col_offset=4)], [], lineno=15, col_offset=0), FunctionDef('uu_decode', arguments([Name('input', Param(), lineno=44, col_offset=14), Name('errors', Param(), lineno=44, col_offset=20)], None, None, [Str('strict', lineno=44, col_offset=27)]), [Expr(Str(" Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n        Note: filename and file mode information in the input data is\n        ignored.\n\n    ", lineno=60, col_offset=-1), lineno=60, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=61, col_offset=11), [Eq()], [Str('strict', lineno=61, col_offset=21)], lineno=61, col_offset=11), None, lineno=61, col_offset=4), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=62, col_offset=4), ImportFrom('binascii', [alias('a2b_uu', None)], 0, lineno=63, col_offset=4), Assign([Name('infile', Store(), lineno=64, col_offset=4)], Call(Name('StringIO', Load(), lineno=64, col_offset=13), [Call(Name('str', Load(), lineno=64, col_offset=22), [Name('input', Load(), lineno=64, col_offset=26)], [], None, None, lineno=64, col_offset=22)], [], None, None, lineno=64, col_offset=13), lineno=64, col_offset=4), Assign([Name('outfile', Store(), lineno=65, col_offset=4)], Call(Name('StringIO', Load(), lineno=65, col_offset=14), [], [], None, None, lineno=65, col_offset=14), lineno=65, col_offset=4), Assign([Name('readline', Store(), lineno=66, col_offset=4)], Attribute(Name('infile', Load(), lineno=66, col_offset=15), 'readline', Load(), lineno=66, col_offset=15), lineno=66, col_offset=4), Assign([Name('write', Store(), lineno=67, col_offset=4)], Attribute(Name('outfile', Load(), lineno=67, col_offset=12), 'write', Load(), lineno=67, col_offset=12), lineno=67, col_offset=4), While(Num(1, lineno=70, col_offset=10), [Assign([Name('s', Store(), lineno=71, col_offset=8)], Call(Name('readline', Load(), lineno=71, col_offset=12), [], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=8), If(UnaryOp(Not(), Name('s', Load(), lineno=72, col_offset=15), lineno=72, col_offset=11), [Raise(Name('ValueError', Load(), lineno=73, col_offset=18), Str('Missing "begin" line in input data', lineno=73, col_offset=30), None, lineno=73, col_offset=12)], [], lineno=72, col_offset=8), If(Compare(Subscript(Name('s', Load(), lineno=74, col_offset=11), Slice(None, Num(5, lineno=74, col_offset=14), None), Load(), lineno=74, col_offset=11), [Eq()], [Str('begin', lineno=74, col_offset=20)], lineno=74, col_offset=11), [Break( lineno=75, col_offset=12)], [], lineno=74, col_offset=8)], [], lineno=70, col_offset=4), While(Num(1, lineno=78, col_offset=10), [Assign([Name('s', Store(), lineno=79, col_offset=8)], Call(Name('readline', Load(), lineno=79, col_offset=12), [], [], None, None, lineno=79, col_offset=12), lineno=79, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('s', Load(), lineno=80, col_offset=15), lineno=80, col_offset=11), Compare(Name('s', Load(), lineno=81, col_offset=11), [Eq()], [Str('end\n', lineno=81, col_offset=16)], lineno=81, col_offset=11)], lineno=80, col_offset=11), [Break( lineno=82, col_offset=12)], [], lineno=80, col_offset=8), TryExcept([Assign([Name('data', Store(), lineno=84, col_offset=12)], Call(Name('a2b_uu', Load(), lineno=84, col_offset=19), [Name('s', Load(), lineno=84, col_offset=26)], [], None, None, lineno=84, col_offset=19), lineno=84, col_offset=12)], [ExceptHandler(Attribute(Name('binascii', Load(), lineno=85, col_offset=15), 'Error', Load(), lineno=85, col_offset=15), Name('v', Store(), lineno=85, col_offset=31), [Assign([Name('nbytes', Store(), lineno=87, col_offset=12)], BinOp(BinOp(BinOp(BinOp(BinOp(Call(Name('ord', Load(), lineno=87, col_offset=24), [Subscript(Name('s', Load(), lineno=87, col_offset=28), Index(Num(0, lineno=87, col_offset=30)), Load(), lineno=87, col_offset=28)], [], None, None, lineno=87, col_offset=24), Sub(), Num(32, lineno=87, col_offset=34), lineno=87, col_offset=24), BitAnd(), Num(63, lineno=87, col_offset=40), lineno=87, col_offset=23), Mult(), Num(4, lineno=87, col_offset=46), lineno=87, col_offset=22), Add(), Num(5, lineno=87, col_offset=50), lineno=87, col_offset=22), Div(), Num(3, lineno=87, col_offset=55), lineno=87, col_offset=21), lineno=87, col_offset=12), Assign([Name('data', Store(), lineno=88, col_offset=12)], Call(Name('a2b_uu', Load(), lineno=88, col_offset=19), [Subscript(Name('s', Load(), lineno=88, col_offset=26), Slice(None, Name('nbytes', Load(), lineno=88, col_offset=29), None), Load(), lineno=88, col_offset=26)], [], None, None, lineno=88, col_offset=19), lineno=88, col_offset=12)], lineno=85, col_offset=8)], [], lineno=83, col_offset=8), Expr(Call(Name('write', Load(), lineno=90, col_offset=8), [Name('data', Load(), lineno=90, col_offset=14)], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8)], [], lineno=78, col_offset=4), If(UnaryOp(Not(), Name('s', Load(), lineno=91, col_offset=11), lineno=91, col_offset=7), [Raise(Name('ValueError', Load(), lineno=92, col_offset=14), Str('Truncated input data', lineno=92, col_offset=26), None, lineno=92, col_offset=8)], [], lineno=91, col_offset=4), Return(Tuple([Call(Attribute(Name('outfile', Load(), lineno=94, col_offset=12), 'getvalue', Load(), lineno=94, col_offset=12), [], [], None, None, lineno=94, col_offset=12), Call(Name('len', Load(), lineno=94, col_offset=32), [Name('input', Load(), lineno=94, col_offset=36)], [], None, None, lineno=94, col_offset=32)], Load(), lineno=94, col_offset=12), lineno=94, col_offset=4)], [], lineno=44, col_offset=0), ClassDef('Codec', [Attribute(Name('codecs', Load(), lineno=96, col_offset=12), 'Codec', Load(), lineno=96, col_offset=12)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=98, col_offset=15), Name('input', Param(), lineno=98, col_offset=20), Name('errors', Param(), lineno=98, col_offset=26)], None, None, [Str('strict', lineno=98, col_offset=33)]), [Return(Call(Name('uu_encode', Load(), lineno=99, col_offset=15), [Name('input', Load(), lineno=99, col_offset=25), Name('errors', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=15), lineno=99, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=101, col_offset=15), Name('input', Param(), lineno=101, col_offset=20), Name('errors', Param(), lineno=101, col_offset=26)], None, None, [Str('strict', lineno=101, col_offset=33)]), [Return(Call(Name('uu_decode', Load(), lineno=102, col_offset=15), [Name('input', Load(), lineno=102, col_offset=25), Name('errors', Load(), lineno=102, col_offset=31)], [], None, None, lineno=102, col_offset=15), lineno=102, col_offset=8)], [], lineno=101, col_offset=4)], [], lineno=96, col_offset=0), ClassDef('IncrementalEncoder', [Attribute(Name('codecs', Load(), lineno=104, col_offset=25), 'IncrementalEncoder', Load(), lineno=104, col_offset=25)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=105, col_offset=15), Name('input', Param(), lineno=105, col_offset=21), Name('final', Param(), lineno=105, col_offset=28)], None, None, [Name('False', Load(), lineno=105, col_offset=34)]), [Return(Subscript(Call(Name('uu_encode', Load(), lineno=106, col_offset=15), [Name('input', Load(), lineno=106, col_offset=25), Attribute(Name('self', Load(), lineno=106, col_offset=32), 'errors', Load(), lineno=106, col_offset=32)], [], None, None, lineno=106, col_offset=15), Index(Num(0, lineno=106, col_offset=45)), Load(), lineno=106, col_offset=15), lineno=106, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=104, col_offset=0), ClassDef('IncrementalDecoder', [Attribute(Name('codecs', Load(), lineno=108, col_offset=25), 'IncrementalDecoder', Load(), lineno=108, col_offset=25)], [FunctionDef('decode', arguments([Name('self', Param(), lineno=109, col_offset=15), Name('input', Param(), lineno=109, col_offset=21), Name('final', Param(), lineno=109, col_offset=28)], None, None, [Name('False', Load(), lineno=109, col_offset=34)]), [Return(Subscript(Call(Name('uu_decode', Load(), lineno=110, col_offset=15), [Name('input', Load(), lineno=110, col_offset=25), Attribute(Name('self', Load(), lineno=110, col_offset=32), 'errors', Load(), lineno=110, col_offset=32)], [], None, None, lineno=110, col_offset=15), Index(Num(0, lineno=110, col_offset=45)), Load(), lineno=110, col_offset=15), lineno=110, col_offset=8)], [], lineno=109, col_offset=4)], [], lineno=108, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=112, col_offset=19), Attribute(Name('codecs', Load(), lineno=112, col_offset=25), 'StreamWriter', Load(), lineno=112, col_offset=25)], [Pass( lineno=113, col_offset=4)], [], lineno=112, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=115, col_offset=19), Attribute(Name('codecs', Load(), lineno=115, col_offset=25), 'StreamReader', Load(), lineno=115, col_offset=25)], [Pass( lineno=116, col_offset=4)], [], lineno=115, col_offset=0), FunctionDef('getregentry', arguments([], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=121, col_offset=11), 'CodecInfo', Load(), lineno=121, col_offset=11), [], [keyword('name', Str('uu', lineno=122, col_offset=13)), keyword('encode', Name('uu_encode', Load(), lineno=123, col_offset=15)), keyword('decode', Name('uu_decode', Load(), lineno=124, col_offset=15)), keyword('incrementalencoder', Name('IncrementalEncoder', Load(), lineno=125, col_offset=27)), keyword('incrementaldecoder', Name('IncrementalDecoder', Load(), lineno=126, col_offset=27)), keyword('streamreader', Name('StreamReader', Load(), lineno=127, col_offset=21)), keyword('streamwriter', Name('StreamWriter', Load(), lineno=128, col_offset=21))], None, None, lineno=121, col_offset=11), lineno=121, col_offset=4)], [], lineno=120, col_offset=0)])
