Module([Expr(Str('distutils.msvccompiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor the Microsoft Visual Studio.\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__revision__', Store(), lineno=11, col_offset=0)], Str('$Id: msvccompiler.py 76956 2009-12-21 01:22:46Z tarek.ziade $', lineno=11, col_offset=15), lineno=11, col_offset=0), Import([alias('sys', None)], lineno=13, col_offset=0), Import([alias('os', None)], lineno=14, col_offset=0), Import([alias('string', None)], lineno=15, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsExecError', None), alias('DistutilsPlatformError', None), alias('CompileError', None), alias('LibError', None), alias('LinkError', None)], 0, lineno=17, col_offset=0), ImportFrom('distutils.ccompiler', [alias('CCompiler', None), alias('gen_lib_options', None)], 0, lineno=19, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=20, col_offset=0), Assign([Name('_can_read_reg', Store(), lineno=22, col_offset=0)], Num(0, lineno=22, col_offset=16), lineno=22, col_offset=0), TryExcept([Import([alias('_winreg', None)], lineno=24, col_offset=4), Assign([Name('_can_read_reg', Store(), lineno=26, col_offset=4)], Num(1, lineno=26, col_offset=20), lineno=26, col_offset=4), Assign([Name('hkey_mod', Store(), lineno=27, col_offset=4)], Name('_winreg', Load(), lineno=27, col_offset=15), lineno=27, col_offset=4), Assign([Name('RegOpenKeyEx', Store(), lineno=29, col_offset=4)], Attribute(Name('_winreg', Load(), lineno=29, col_offset=19), 'OpenKeyEx', Load(), lineno=29, col_offset=19), lineno=29, col_offset=4), Assign([Name('RegEnumKey', Store(), lineno=30, col_offset=4)], Attribute(Name('_winreg', Load(), lineno=30, col_offset=17), 'EnumKey', Load(), lineno=30, col_offset=17), lineno=30, col_offset=4), Assign([Name('RegEnumValue', Store(), lineno=31, col_offset=4)], Attribute(Name('_winreg', Load(), lineno=31, col_offset=19), 'EnumValue', Load(), lineno=31, col_offset=19), lineno=31, col_offset=4), Assign([Name('RegError', Store(), lineno=32, col_offset=4)], Attribute(Name('_winreg', Load(), lineno=32, col_offset=15), 'error', Load(), lineno=32, col_offset=15), lineno=32, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=34, col_offset=7), None, [TryExcept([Import([alias('win32api', None)], lineno=36, col_offset=8), Import([alias('win32con', None)], lineno=37, col_offset=8), Assign([Name('_can_read_reg', Store(), lineno=38, col_offset=8)], Num(1, lineno=38, col_offset=24), lineno=38, col_offset=8), Assign([Name('hkey_mod', Store(), lineno=39, col_offset=8)], Name('win32con', Load(), lineno=39, col_offset=19), lineno=39, col_offset=8), Assign([Name('RegOpenKeyEx', Store(), lineno=41, col_offset=8)], Attribute(Name('win32api', Load(), lineno=41, col_offset=23), 'RegOpenKeyEx', Load(), lineno=41, col_offset=23), lineno=41, col_offset=8), Assign([Name('RegEnumKey', Store(), lineno=42, col_offset=8)], Attribute(Name('win32api', Load(), lineno=42, col_offset=21), 'RegEnumKey', Load(), lineno=42, col_offset=21), lineno=42, col_offset=8), Assign([Name('RegEnumValue', Store(), lineno=43, col_offset=8)], Attribute(Name('win32api', Load(), lineno=43, col_offset=23), 'RegEnumValue', Load(), lineno=43, col_offset=23), lineno=43, col_offset=8), Assign([Name('RegError', Store(), lineno=44, col_offset=8)], Attribute(Name('win32api', Load(), lineno=44, col_offset=19), 'error', Load(), lineno=44, col_offset=19), lineno=44, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=46, col_offset=11), None, [Expr(Call(Attribute(Name('log', Load(), lineno=47, col_offset=8), 'info', Load(), lineno=47, col_offset=8), [Str("Warning: Can't read registry to find the necessary compiler setting\nMake sure that Python modules _winreg, win32api or win32con are installed.", lineno=47, col_offset=17)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Pass( lineno=51, col_offset=8)], lineno=46, col_offset=4)], [], lineno=35, col_offset=4)], lineno=34, col_offset=0)], [], lineno=23, col_offset=0), If(Name('_can_read_reg', Load(), lineno=53, col_offset=3), [Assign([Name('HKEYS', Store(), lineno=54, col_offset=4)], Tuple([Attribute(Name('hkey_mod', Load(), lineno=54, col_offset=13), 'HKEY_USERS', Load(), lineno=54, col_offset=13), Attribute(Name('hkey_mod', Load(), lineno=55, col_offset=13), 'HKEY_CURRENT_USER', Load(), lineno=55, col_offset=13), Attribute(Name('hkey_mod', Load(), lineno=56, col_offset=13), 'HKEY_LOCAL_MACHINE', Load(), lineno=56, col_offset=13), Attribute(Name('hkey_mod', Load(), lineno=57, col_offset=13), 'HKEY_CLASSES_ROOT', Load(), lineno=57, col_offset=13)], Load(), lineno=54, col_offset=13), lineno=54, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('read_keys', arguments([Name('base', Param(), lineno=59, col_offset=14), Name('key', Param(), lineno=59, col_offset=20)], None, None, []), [Expr(Str('Return list of registry keys.', lineno=60, col_offset=4), lineno=60, col_offset=4), TryExcept([Assign([Name('handle', Store(), lineno=63, col_offset=8)], Call(Name('RegOpenKeyEx', Load(), lineno=63, col_offset=17), [Name('base', Load(), lineno=63, col_offset=30), Name('key', Load(), lineno=63, col_offset=36)], [], None, None, lineno=63, col_offset=17), lineno=63, col_offset=8)], [ExceptHandler(Name('RegError', Load(), lineno=64, col_offset=11), None, [Return(Name('None', Load(), lineno=65, col_offset=15), lineno=65, col_offset=8)], lineno=64, col_offset=4)], [], lineno=62, col_offset=4), Assign([Name('L', Store(), lineno=66, col_offset=4)], List([], Load(), lineno=66, col_offset=8), lineno=66, col_offset=4), Assign([Name('i', Store(), lineno=67, col_offset=4)], Num(0, lineno=67, col_offset=8), lineno=67, col_offset=4), While(Num(1, lineno=68, col_offset=10), [TryExcept([Assign([Name('k', Store(), lineno=70, col_offset=12)], Call(Name('RegEnumKey', Load(), lineno=70, col_offset=16), [Name('handle', Load(), lineno=70, col_offset=27), Name('i', Load(), lineno=70, col_offset=35)], [], None, None, lineno=70, col_offset=16), lineno=70, col_offset=12)], [ExceptHandler(Name('RegError', Load(), lineno=71, col_offset=15), None, [Break( lineno=72, col_offset=12)], lineno=71, col_offset=8)], [], lineno=69, col_offset=8), Expr(Call(Attribute(Name('L', Load(), lineno=73, col_offset=8), 'append', Load(), lineno=73, col_offset=8), [Name('k', Load(), lineno=73, col_offset=17)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Assign([Name('i', Store(), lineno=74, col_offset=8)], BinOp(Name('i', Load(), lineno=74, col_offset=12), Add(), Num(1, lineno=74, col_offset=16), lineno=74, col_offset=12), lineno=74, col_offset=8)], [], lineno=68, col_offset=4), Return(Name('L', Load(), lineno=75, col_offset=11), lineno=75, col_offset=4)], [], lineno=59, col_offset=0), FunctionDef('read_values', arguments([Name('base', Param(), lineno=77, col_offset=16), Name('key', Param(), lineno=77, col_offset=22)], None, None, []), [Expr(Str('Return dict of registry keys and values.\n\n    All names are converted to lowercase.\n    ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), TryExcept([Assign([Name('handle', Store(), lineno=83, col_offset=8)], Call(Name('RegOpenKeyEx', Load(), lineno=83, col_offset=17), [Name('base', Load(), lineno=83, col_offset=30), Name('key', Load(), lineno=83, col_offset=36)], [], None, None, lineno=83, col_offset=17), lineno=83, col_offset=8)], [ExceptHandler(Name('RegError', Load(), lineno=84, col_offset=11), None, [Return(Name('None', Load(), lineno=85, col_offset=15), lineno=85, col_offset=8)], lineno=84, col_offset=4)], [], lineno=82, col_offset=4), Assign([Name('d', Store(), lineno=86, col_offset=4)], Dict([], [], lineno=86, col_offset=8), lineno=86, col_offset=4), Assign([Name('i', Store(), lineno=87, col_offset=4)], Num(0, lineno=87, col_offset=8), lineno=87, col_offset=4), While(Num(1, lineno=88, col_offset=10), [TryExcept([Assign([Tuple([Name('name', Store(), lineno=90, col_offset=12), Name('value', Store(), lineno=90, col_offset=18), Name('type', Store(), lineno=90, col_offset=25)], Store(), lineno=90, col_offset=12)], Call(Name('RegEnumValue', Load(), lineno=90, col_offset=32), [Name('handle', Load(), lineno=90, col_offset=45), Name('i', Load(), lineno=90, col_offset=53)], [], None, None, lineno=90, col_offset=32), lineno=90, col_offset=12)], [ExceptHandler(Name('RegError', Load(), lineno=91, col_offset=15), None, [Break( lineno=92, col_offset=12)], lineno=91, col_offset=8)], [], lineno=89, col_offset=8), Assign([Name('name', Store(), lineno=93, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=93, col_offset=15), 'lower', Load(), lineno=93, col_offset=15), [], [], None, None, lineno=93, col_offset=15), lineno=93, col_offset=8), Assign([Subscript(Name('d', Load(), lineno=94, col_offset=8), Index(Call(Name('convert_mbcs', Load(), lineno=94, col_offset=10), [Name('name', Load(), lineno=94, col_offset=23)], [], None, None, lineno=94, col_offset=10)), Store(), lineno=94, col_offset=8)], Call(Name('convert_mbcs', Load(), lineno=94, col_offset=32), [Name('value', Load(), lineno=94, col_offset=45)], [], None, None, lineno=94, col_offset=32), lineno=94, col_offset=8), Assign([Name('i', Store(), lineno=95, col_offset=8)], BinOp(Name('i', Load(), lineno=95, col_offset=12), Add(), Num(1, lineno=95, col_offset=16), lineno=95, col_offset=12), lineno=95, col_offset=8)], [], lineno=88, col_offset=4), Return(Name('d', Load(), lineno=96, col_offset=11), lineno=96, col_offset=4)], [], lineno=77, col_offset=0), FunctionDef('convert_mbcs', arguments([Name('s', Param(), lineno=98, col_offset=17)], None, None, []), [Assign([Name('enc', Store(), lineno=99, col_offset=4)], Call(Name('getattr', Load(), lineno=99, col_offset=10), [Name('s', Load(), lineno=99, col_offset=18), Str('encode', lineno=99, col_offset=21), Name('None', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=10), lineno=99, col_offset=4), If(Compare(Name('enc', Load(), lineno=100, col_offset=7), [IsNot()], [Name('None', Load(), lineno=100, col_offset=18)], lineno=100, col_offset=7), [TryExcept([Assign([Name('s', Store(), lineno=102, col_offset=12)], Call(Name('enc', Load(), lineno=102, col_offset=16), [Str('mbcs', lineno=102, col_offset=20)], [], None, None, lineno=102, col_offset=16), lineno=102, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=103, col_offset=15), None, [Pass( lineno=104, col_offset=12)], lineno=103, col_offset=8)], [], lineno=101, col_offset=8)], [], lineno=100, col_offset=4), Return(Name('s', Load(), lineno=105, col_offset=11), lineno=105, col_offset=4)], [], lineno=98, col_offset=0), ClassDef('MacroExpander', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=109, col_offset=17), Name('version', Param(), lineno=109, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=110, col_offset=8), 'macros', Store(), lineno=110, col_offset=8)], Dict([], [], lineno=110, col_offset=22), lineno=110, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=111, col_offset=8), 'load_macros', Load(), lineno=111, col_offset=8), [Name('version', Load(), lineno=111, col_offset=25)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8)], [], lineno=109, col_offset=4), FunctionDef('set_macro', arguments([Name('self', Param(), lineno=113, col_offset=18), Name('macro', Param(), lineno=113, col_offset=24), Name('path', Param(), lineno=113, col_offset=31), Name('key', Param(), lineno=113, col_offset=37)], None, None, []), [For(Name('base', Store(), lineno=114, col_offset=12), Name('HKEYS', Load(), lineno=114, col_offset=20), [Assign([Name('d', Store(), lineno=115, col_offset=12)], Call(Name('read_values', Load(), lineno=115, col_offset=16), [Name('base', Load(), lineno=115, col_offset=28), Name('path', Load(), lineno=115, col_offset=34)], [], None, None, lineno=115, col_offset=16), lineno=115, col_offset=12), If(Name('d', Load(), lineno=116, col_offset=15), [Assign([Subscript(Attribute(Name('self', Load(), lineno=117, col_offset=16), 'macros', Load(), lineno=117, col_offset=16), Index(BinOp(Str('$(%s)', lineno=117, col_offset=28), Mod(), Name('macro', Load(), lineno=117, col_offset=38), lineno=117, col_offset=28)), Store(), lineno=117, col_offset=16)], Subscript(Name('d', Load(), lineno=117, col_offset=47), Index(Name('key', Load(), lineno=117, col_offset=49)), Load(), lineno=117, col_offset=47), lineno=117, col_offset=16), Break( lineno=118, col_offset=16)], [], lineno=116, col_offset=12)], [], lineno=114, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('load_macros', arguments([Name('self', Param(), lineno=120, col_offset=20), Name('version', Param(), lineno=120, col_offset=26)], None, None, []), [Assign([Name('vsbase', Store(), lineno=121, col_offset=8)], BinOp(Str('Software\\Microsoft\\VisualStudio\\%0.1f', lineno=121, col_offset=17), Mod(), Name('version', Load(), lineno=121, col_offset=60), lineno=121, col_offset=17), lineno=121, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=122, col_offset=8), 'set_macro', Load(), lineno=122, col_offset=8), [Str('VCInstallDir', lineno=122, col_offset=23), BinOp(Name('vsbase', Load(), lineno=122, col_offset=39), Add(), Str('\\Setup\\VC', lineno=122, col_offset=48), lineno=122, col_offset=39), Str('productdir', lineno=122, col_offset=62)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=8), 'set_macro', Load(), lineno=123, col_offset=8), [Str('VSInstallDir', lineno=123, col_offset=23), BinOp(Name('vsbase', Load(), lineno=123, col_offset=39), Add(), Str('\\Setup\\VS', lineno=123, col_offset=48), lineno=123, col_offset=39), Str('productdir', lineno=123, col_offset=62)], [], None, None, lineno=123, col_offset=8), lineno=123, col_offset=8), Assign([Name('net', Store(), lineno=124, col_offset=8)], Str('Software\\Microsoft\\.NETFramework', lineno=124, col_offset=14), lineno=124, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=8), 'set_macro', Load(), lineno=125, col_offset=8), [Str('FrameworkDir', lineno=125, col_offset=23), Name('net', Load(), lineno=125, col_offset=39), Str('installroot', lineno=125, col_offset=44)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8), TryExcept([If(Compare(Name('version', Load(), lineno=127, col_offset=15), [Gt()], [Num(7.0, lineno=127, col_offset=25)], lineno=127, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=16), 'set_macro', Load(), lineno=128, col_offset=16), [Str('FrameworkSDKDir', lineno=128, col_offset=31), Name('net', Load(), lineno=128, col_offset=50), Str('sdkinstallrootv1.1', lineno=128, col_offset=55)], [], None, None, lineno=128, col_offset=16), lineno=128, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=130, col_offset=16), 'set_macro', Load(), lineno=130, col_offset=16), [Str('FrameworkSDKDir', lineno=130, col_offset=31), Name('net', Load(), lineno=130, col_offset=50), Str('sdkinstallroot', lineno=130, col_offset=55)], [], None, None, lineno=130, col_offset=16), lineno=130, col_offset=16)], lineno=127, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=131, col_offset=15), None, [Raise(Name('DistutilsPlatformError', Load(), lineno=132, col_offset=18), Str('Python was built with Visual Studio 2003;\nextensions must be built with a compiler than can generate compatible binaries.\nVisual Studio 2003 was not found on this system. If you have Cygwin installed,\nyou can try compiling with MingW32, by passing "-c mingw32" to setup.py.', lineno=136, col_offset=-1), None, lineno=132, col_offset=12)], lineno=131, col_offset=8)], [], lineno=126, col_offset=8), Assign([Name('p', Store(), lineno=138, col_offset=8)], Str('Software\\Microsoft\\NET Framework Setup\\Product', lineno=138, col_offset=12), lineno=138, col_offset=8), For(Name('base', Store(), lineno=139, col_offset=12), Name('HKEYS', Load(), lineno=139, col_offset=20), [TryExcept([Assign([Name('h', Store(), lineno=141, col_offset=16)], Call(Name('RegOpenKeyEx', Load(), lineno=141, col_offset=20), [Name('base', Load(), lineno=141, col_offset=33), Name('p', Load(), lineno=141, col_offset=39)], [], None, None, lineno=141, col_offset=20), lineno=141, col_offset=16)], [ExceptHandler(Name('RegError', Load(), lineno=142, col_offset=19), None, [Continue( lineno=143, col_offset=16)], lineno=142, col_offset=12)], [], lineno=140, col_offset=12), Assign([Name('key', Store(), lineno=144, col_offset=12)], Call(Name('RegEnumKey', Load(), lineno=144, col_offset=18), [Name('h', Load(), lineno=144, col_offset=29), Num(0, lineno=144, col_offset=32)], [], None, None, lineno=144, col_offset=18), lineno=144, col_offset=12), Assign([Name('d', Store(), lineno=145, col_offset=12)], Call(Name('read_values', Load(), lineno=145, col_offset=16), [Name('base', Load(), lineno=145, col_offset=28), BinOp(Str('%s\\%s', lineno=145, col_offset=34), Mod(), Tuple([Name('p', Load(), lineno=145, col_offset=46), Name('key', Load(), lineno=145, col_offset=49)], Load(), lineno=145, col_offset=46), lineno=145, col_offset=34)], [], None, None, lineno=145, col_offset=16), lineno=145, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=146, col_offset=12), 'macros', Load(), lineno=146, col_offset=12), Index(Str('$(FrameworkVersion)', lineno=146, col_offset=24)), Store(), lineno=146, col_offset=12)], Subscript(Name('d', Load(), lineno=146, col_offset=49), Index(Str('version', lineno=146, col_offset=51)), Load(), lineno=146, col_offset=49), lineno=146, col_offset=12)], [], lineno=139, col_offset=8)], [], lineno=120, col_offset=4), FunctionDef('sub', arguments([Name('self', Param(), lineno=148, col_offset=12), Name('s', Param(), lineno=148, col_offset=18)], None, None, []), [For(Tuple([Name('k', Store(), lineno=149, col_offset=12), Name('v', Store(), lineno=149, col_offset=15)], Store(), lineno=149, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=149, col_offset=20), 'macros', Load(), lineno=149, col_offset=20), 'items', Load(), lineno=149, col_offset=20), [], [], None, None, lineno=149, col_offset=20), [Assign([Name('s', Store(), lineno=150, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=150, col_offset=16), 'replace', Load(), lineno=150, col_offset=16), [Name('s', Load(), lineno=150, col_offset=31), Name('k', Load(), lineno=150, col_offset=34), Name('v', Load(), lineno=150, col_offset=37)], [], None, None, lineno=150, col_offset=16), lineno=150, col_offset=12)], [], lineno=149, col_offset=8), Return(Name('s', Load(), lineno=151, col_offset=15), lineno=151, col_offset=8)], [], lineno=148, col_offset=4)], [], lineno=107, col_offset=0), FunctionDef('get_build_version', arguments([], None, None, []), [Expr(Str('Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    ', lineno=158, col_offset=-1), lineno=158, col_offset=-1), Assign([Name('prefix', Store(), lineno=160, col_offset=4)], Str('MSC v.', lineno=160, col_offset=13), lineno=160, col_offset=4), Assign([Name('i', Store(), lineno=161, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=161, col_offset=8), 'find', Load(), lineno=161, col_offset=8), [Attribute(Name('sys', Load(), lineno=161, col_offset=20), 'version', Load(), lineno=161, col_offset=20), Name('prefix', Load(), lineno=161, col_offset=33)], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=4), If(Compare(Name('i', Load(), lineno=162, col_offset=7), [Eq()], [Num(-1, lineno=162, col_offset=13)], lineno=162, col_offset=7), [Return(Num(6, lineno=163, col_offset=15), lineno=163, col_offset=8)], [], lineno=162, col_offset=4), Assign([Name('i', Store(), lineno=164, col_offset=4)], BinOp(Name('i', Load(), lineno=164, col_offset=8), Add(), Call(Name('len', Load(), lineno=164, col_offset=12), [Name('prefix', Load(), lineno=164, col_offset=16)], [], None, None, lineno=164, col_offset=12), lineno=164, col_offset=8), lineno=164, col_offset=4), Assign([Tuple([Name('s', Store(), lineno=165, col_offset=4), Name('rest', Store(), lineno=165, col_offset=7)], Store(), lineno=165, col_offset=4)], Call(Attribute(Subscript(Attribute(Name('sys', Load(), lineno=165, col_offset=14), 'version', Load(), lineno=165, col_offset=14), Slice(Name('i', Load(), lineno=165, col_offset=26), None, None), Load(), lineno=165, col_offset=14), 'split', Load(), lineno=165, col_offset=14), [Str(' ', lineno=165, col_offset=36), Num(1, lineno=165, col_offset=41)], [], None, None, lineno=165, col_offset=14), lineno=165, col_offset=4), Assign([Name('majorVersion', Store(), lineno=166, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=166, col_offset=19), [Subscript(Name('s', Load(), lineno=166, col_offset=23), Slice(None, Num(-2, lineno=166, col_offset=27), None), Load(), lineno=166, col_offset=23)], [], None, None, lineno=166, col_offset=19), Sub(), Num(6, lineno=166, col_offset=33), lineno=166, col_offset=19), lineno=166, col_offset=4), Assign([Name('minorVersion', Store(), lineno=167, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=167, col_offset=19), [Subscript(Name('s', Load(), lineno=167, col_offset=23), Slice(Num(2, lineno=167, col_offset=25), Num(3, lineno=167, col_offset=27), None), Load(), lineno=167, col_offset=23)], [], None, None, lineno=167, col_offset=19), Div(), Num(10.0, lineno=167, col_offset=33), lineno=167, col_offset=19), lineno=167, col_offset=4), If(Compare(Name('majorVersion', Load(), lineno=169, col_offset=7), [Eq()], [Num(6, lineno=169, col_offset=23)], lineno=169, col_offset=7), [Assign([Name('minorVersion', Store(), lineno=170, col_offset=8)], Num(0, lineno=170, col_offset=23), lineno=170, col_offset=8)], [], lineno=169, col_offset=4), If(Compare(Name('majorVersion', Load(), lineno=171, col_offset=7), [GtE()], [Num(6, lineno=171, col_offset=23)], lineno=171, col_offset=7), [Return(BinOp(Name('majorVersion', Load(), lineno=172, col_offset=15), Add(), Name('minorVersion', Load(), lineno=172, col_offset=30), lineno=172, col_offset=15), lineno=172, col_offset=8)], [], lineno=171, col_offset=4), Return(Name('None', Load(), lineno=174, col_offset=11), lineno=174, col_offset=4)], [], lineno=153, col_offset=0), FunctionDef('get_build_architecture', arguments([], None, None, []), [Expr(Str('Return the processor architecture.\n\n    Possible results are "Intel", "Itanium", or "AMD64".\n    ', lineno=180, col_offset=-1), lineno=180, col_offset=-1), Assign([Name('prefix', Store(), lineno=182, col_offset=4)], Str(' bit (', lineno=182, col_offset=13), lineno=182, col_offset=4), Assign([Name('i', Store(), lineno=183, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=183, col_offset=8), 'find', Load(), lineno=183, col_offset=8), [Attribute(Name('sys', Load(), lineno=183, col_offset=20), 'version', Load(), lineno=183, col_offset=20), Name('prefix', Load(), lineno=183, col_offset=33)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=4), If(Compare(Name('i', Load(), lineno=184, col_offset=7), [Eq()], [Num(-1, lineno=184, col_offset=13)], lineno=184, col_offset=7), [Return(Str('Intel', lineno=185, col_offset=15), lineno=185, col_offset=8)], [], lineno=184, col_offset=4), Assign([Name('j', Store(), lineno=186, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=186, col_offset=8), 'find', Load(), lineno=186, col_offset=8), [Attribute(Name('sys', Load(), lineno=186, col_offset=20), 'version', Load(), lineno=186, col_offset=20), Str(')', lineno=186, col_offset=33), Name('i', Load(), lineno=186, col_offset=38)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=4), Return(Subscript(Attribute(Name('sys', Load(), lineno=187, col_offset=11), 'version', Load(), lineno=187, col_offset=11), Slice(BinOp(Name('i', Load(), lineno=187, col_offset=23), Add(), Call(Name('len', Load(), lineno=187, col_offset=25), [Name('prefix', Load(), lineno=187, col_offset=29)], [], None, None, lineno=187, col_offset=25), lineno=187, col_offset=23), Name('j', Load(), lineno=187, col_offset=37), None), Load(), lineno=187, col_offset=11), lineno=187, col_offset=4)], [], lineno=176, col_offset=0), FunctionDef('normalize_and_reduce_paths', arguments([Name('paths', Param(), lineno=189, col_offset=31)], None, None, []), [Expr(Str('Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    ', lineno=193, col_offset=-1), lineno=193, col_offset=-1), Assign([Name('reduced_paths', Store(), lineno=195, col_offset=4)], List([], Load(), lineno=195, col_offset=20), lineno=195, col_offset=4), For(Name('p', Store(), lineno=196, col_offset=8), Name('paths', Load(), lineno=196, col_offset=13), [Assign([Name('np', Store(), lineno=197, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=197, col_offset=13), 'path', Load(), lineno=197, col_offset=13), 'normpath', Load(), lineno=197, col_offset=13), [Name('p', Load(), lineno=197, col_offset=30)], [], None, None, lineno=197, col_offset=13), lineno=197, col_offset=8), If(Compare(Name('np', Load(), lineno=199, col_offset=11), [NotIn()], [Name('reduced_paths', Load(), lineno=199, col_offset=21)], lineno=199, col_offset=11), [Expr(Call(Attribute(Name('reduced_paths', Load(), lineno=200, col_offset=12), 'append', Load(), lineno=200, col_offset=12), [Name('np', Load(), lineno=200, col_offset=33)], [], None, None, lineno=200, col_offset=12), lineno=200, col_offset=12)], [], lineno=199, col_offset=8)], [], lineno=196, col_offset=4), Return(Name('reduced_paths', Load(), lineno=201, col_offset=11), lineno=201, col_offset=4)], [], lineno=189, col_offset=0), ClassDef('MSVCCompiler', [Name('CCompiler', Load(), lineno=204, col_offset=20)], [Expr(Str('Concrete class that implements an interface to Microsoft Visual C++,\n       as defined by the CCompiler abstract class.', lineno=206, col_offset=-1), lineno=206, col_offset=-1), Assign([Name('compiler_type', Store(), lineno=208, col_offset=4)], Str('msvc', lineno=208, col_offset=20), lineno=208, col_offset=4), Assign([Name('executables', Store(), lineno=215, col_offset=4)], Dict([], [], lineno=215, col_offset=18), lineno=215, col_offset=4), Assign([Name('_c_extensions', Store(), lineno=218, col_offset=4)], List([Str('.c', lineno=218, col_offset=21)], Load(), lineno=218, col_offset=20), lineno=218, col_offset=4), Assign([Name('_cpp_extensions', Store(), lineno=219, col_offset=4)], List([Str('.cc', lineno=219, col_offset=23), Str('.cpp', lineno=219, col_offset=30), Str('.cxx', lineno=219, col_offset=38)], Load(), lineno=219, col_offset=22), lineno=219, col_offset=4), Assign([Name('_rc_extensions', Store(), lineno=220, col_offset=4)], List([Str('.rc', lineno=220, col_offset=22)], Load(), lineno=220, col_offset=21), lineno=220, col_offset=4), Assign([Name('_mc_extensions', Store(), lineno=221, col_offset=4)], List([Str('.mc', lineno=221, col_offset=22)], Load(), lineno=221, col_offset=21), lineno=221, col_offset=4), Assign([Name('src_extensions', Store(), lineno=225, col_offset=4)], BinOp(BinOp(BinOp(Name('_c_extensions', Load(), lineno=225, col_offset=22), Add(), Name('_cpp_extensions', Load(), lineno=225, col_offset=38), lineno=225, col_offset=22), Add(), Name('_rc_extensions', Load(), lineno=226, col_offset=22), lineno=225, col_offset=54), Add(), Name('_mc_extensions', Load(), lineno=226, col_offset=39), lineno=226, col_offset=37), lineno=225, col_offset=4), Assign([Name('res_extension', Store(), lineno=227, col_offset=4)], Str('.res', lineno=227, col_offset=20), lineno=227, col_offset=4), Assign([Name('obj_extension', Store(), lineno=228, col_offset=4)], Str('.obj', lineno=228, col_offset=20), lineno=228, col_offset=4), Assign([Name('static_lib_extension', Store(), lineno=229, col_offset=4)], Str('.lib', lineno=229, col_offset=27), lineno=229, col_offset=4), Assign([Name('shared_lib_extension', Store(), lineno=230, col_offset=4)], Str('.dll', lineno=230, col_offset=27), lineno=230, col_offset=4), Assign([Name('static_lib_format', Store(), lineno=231, col_offset=4), Name('shared_lib_format', Store(), lineno=231, col_offset=24)], Str('%s%s', lineno=231, col_offset=44), lineno=231, col_offset=4), Assign([Name('exe_extension', Store(), lineno=232, col_offset=4)], Str('.exe', lineno=232, col_offset=20), lineno=232, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=234, col_offset=18), Name('verbose', Param(), lineno=234, col_offset=24), Name('dry_run', Param(), lineno=234, col_offset=35), Name('force', Param(), lineno=234, col_offset=46)], None, None, [Num(0, lineno=234, col_offset=32), Num(0, lineno=234, col_offset=43), Num(0, lineno=234, col_offset=52)]), [Expr(Call(Attribute(Name('CCompiler', Load(), lineno=235, col_offset=8), '__init__', Load(), lineno=235, col_offset=8), [Name('self', Load(), lineno=235, col_offset=28), Name('verbose', Load(), lineno=235, col_offset=34), Name('dry_run', Load(), lineno=235, col_offset=43), Name('force', Load(), lineno=235, col_offset=52)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=236, col_offset=8), '__version', Store(), lineno=236, col_offset=8)], Call(Name('get_build_version', Load(), lineno=236, col_offset=25), [], [], None, None, lineno=236, col_offset=25), lineno=236, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=237, col_offset=8), '__arch', Store(), lineno=237, col_offset=8)], Call(Name('get_build_architecture', Load(), lineno=237, col_offset=22), [], [], None, None, lineno=237, col_offset=22), lineno=237, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=238, col_offset=11), '__arch', Load(), lineno=238, col_offset=11), [Eq()], [Str('Intel', lineno=238, col_offset=26)], lineno=238, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=240, col_offset=15), '__version', Load(), lineno=240, col_offset=15), [GtE()], [Num(7, lineno=240, col_offset=33)], lineno=240, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=241, col_offset=16), '__root', Store(), lineno=241, col_offset=16)], Str('Software\\Microsoft\\VisualStudio', lineno=241, col_offset=30), lineno=241, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=242, col_offset=16), '__macros', Store(), lineno=242, col_offset=16)], Call(Name('MacroExpander', Load(), lineno=242, col_offset=32), [Attribute(Name('self', Load(), lineno=242, col_offset=46), '__version', Load(), lineno=242, col_offset=46)], [], None, None, lineno=242, col_offset=32), lineno=242, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=244, col_offset=16), '__root', Store(), lineno=244, col_offset=16)], Str('Software\\Microsoft\\Devstudio', lineno=244, col_offset=30), lineno=244, col_offset=16)], lineno=240, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=245, col_offset=12), '__product', Store(), lineno=245, col_offset=12)], BinOp(Str('Visual Studio version %s', lineno=245, col_offset=29), Mod(), Attribute(Name('self', Load(), lineno=245, col_offset=58), '__version', Load(), lineno=245, col_offset=58), lineno=245, col_offset=29), lineno=245, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=248, col_offset=12), '__product', Store(), lineno=248, col_offset=12)], BinOp(Str('Microsoft SDK compiler %s', lineno=248, col_offset=29), Mod(), BinOp(Attribute(Name('self', Load(), lineno=248, col_offset=60), '__version', Load(), lineno=248, col_offset=60), Add(), Num(6, lineno=248, col_offset=77), lineno=248, col_offset=60), lineno=248, col_offset=29), lineno=248, col_offset=12)], lineno=238, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=250, col_offset=8), 'initialized', Store(), lineno=250, col_offset=8)], Name('False', Load(), lineno=250, col_offset=27), lineno=250, col_offset=8)], [], lineno=234, col_offset=4), FunctionDef('initialize', arguments([Name('self', Param(), lineno=252, col_offset=19)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=253, col_offset=8), '__paths', Store(), lineno=253, col_offset=8)], List([], Load(), lineno=253, col_offset=23), lineno=253, col_offset=8), If(BoolOp(And(), [Compare(Str('DISTUTILS_USE_SDK', lineno=254, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=254, col_offset=34), 'environ', Load(), lineno=254, col_offset=34)], lineno=254, col_offset=11), Compare(Str('MSSdk', lineno=254, col_offset=49), [In()], [Attribute(Name('os', Load(), lineno=254, col_offset=60), 'environ', Load(), lineno=254, col_offset=60)], lineno=254, col_offset=49), Call(Attribute(Name('self', Load(), lineno=254, col_offset=75), 'find_exe', Load(), lineno=254, col_offset=75), [Str('cl.exe', lineno=254, col_offset=89)], [], None, None, lineno=254, col_offset=75)], lineno=254, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=257, col_offset=12), 'cc', Store(), lineno=257, col_offset=12)], Str('cl.exe', lineno=257, col_offset=22), lineno=257, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=12), 'linker', Store(), lineno=258, col_offset=12)], Str('link.exe', lineno=258, col_offset=26), lineno=258, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=259, col_offset=12), 'lib', Store(), lineno=259, col_offset=12)], Str('lib.exe', lineno=259, col_offset=23), lineno=259, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=260, col_offset=12), 'rc', Store(), lineno=260, col_offset=12)], Str('rc.exe', lineno=260, col_offset=22), lineno=260, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=261, col_offset=12), 'mc', Store(), lineno=261, col_offset=12)], Str('mc.exe', lineno=261, col_offset=22), lineno=261, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=263, col_offset=12), '__paths', Store(), lineno=263, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=263, col_offset=27), 'get_msvc_paths', Load(), lineno=263, col_offset=27), [Str('path', lineno=263, col_offset=47)], [], None, None, lineno=263, col_offset=27), lineno=263, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=265, col_offset=15), [Attribute(Name('self', Load(), lineno=265, col_offset=20), '__paths', Load(), lineno=265, col_offset=20)], [], None, None, lineno=265, col_offset=15), [Eq()], [Num(0, lineno=265, col_offset=37)], lineno=265, col_offset=15), [Raise(Name('DistutilsPlatformError', Load(), lineno=266, col_offset=22), BinOp(Str("Python was built with %s, and extensions need to be built with the same version of the compiler, but it isn't installed.", lineno=267, col_offset=23), Mod(), Attribute(Name('self', Load(), lineno=269, col_offset=76), '__product', Load(), lineno=269, col_offset=76), lineno=267, col_offset=23), None, lineno=266, col_offset=16)], [], lineno=265, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=271, col_offset=12), 'cc', Store(), lineno=271, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=271, col_offset=22), 'find_exe', Load(), lineno=271, col_offset=22), [Str('cl.exe', lineno=271, col_offset=36)], [], None, None, lineno=271, col_offset=22), lineno=271, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=272, col_offset=12), 'linker', Store(), lineno=272, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=272, col_offset=26), 'find_exe', Load(), lineno=272, col_offset=26), [Str('link.exe', lineno=272, col_offset=40)], [], None, None, lineno=272, col_offset=26), lineno=272, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=273, col_offset=12), 'lib', Store(), lineno=273, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=273, col_offset=23), 'find_exe', Load(), lineno=273, col_offset=23), [Str('lib.exe', lineno=273, col_offset=37)], [], None, None, lineno=273, col_offset=23), lineno=273, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=274, col_offset=12), 'rc', Store(), lineno=274, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=274, col_offset=22), 'find_exe', Load(), lineno=274, col_offset=22), [Str('rc.exe', lineno=274, col_offset=36)], [], None, None, lineno=274, col_offset=22), lineno=274, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=275, col_offset=12), 'mc', Store(), lineno=275, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=275, col_offset=22), 'find_exe', Load(), lineno=275, col_offset=22), [Str('mc.exe', lineno=275, col_offset=36)], [], None, None, lineno=275, col_offset=22), lineno=275, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=12), 'set_path_env_var', Load(), lineno=276, col_offset=12), [Str('lib', lineno=276, col_offset=34)], [], None, None, lineno=276, col_offset=12), lineno=276, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=277, col_offset=12), 'set_path_env_var', Load(), lineno=277, col_offset=12), [Str('include', lineno=277, col_offset=34)], [], None, None, lineno=277, col_offset=12), lineno=277, col_offset=12)], lineno=254, col_offset=8), TryExcept([For(Name('p', Store(), lineno=281, col_offset=16), Call(Attribute(Name('string', Load(), lineno=281, col_offset=21), 'split', Load(), lineno=281, col_offset=21), [Subscript(Attribute(Name('os', Load(), lineno=281, col_offset=34), 'environ', Load(), lineno=281, col_offset=34), Index(Str('path', lineno=281, col_offset=45)), Load(), lineno=281, col_offset=34), Str(';', lineno=281, col_offset=54)], [], None, None, lineno=281, col_offset=21), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=282, col_offset=16), '__paths', Load(), lineno=282, col_offset=16), 'append', Load(), lineno=282, col_offset=16), [Name('p', Load(), lineno=282, col_offset=36)], [], None, None, lineno=282, col_offset=16), lineno=282, col_offset=16)], [], lineno=281, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=283, col_offset=15), None, [Pass( lineno=284, col_offset=12)], lineno=283, col_offset=8)], [], lineno=280, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=285, col_offset=8), '__paths', Store(), lineno=285, col_offset=8)], Call(Name('normalize_and_reduce_paths', Load(), lineno=285, col_offset=23), [Attribute(Name('self', Load(), lineno=285, col_offset=50), '__paths', Load(), lineno=285, col_offset=50)], [], None, None, lineno=285, col_offset=23), lineno=285, col_offset=8), Assign([Subscript(Attribute(Name('os', Load(), lineno=286, col_offset=8), 'environ', Load(), lineno=286, col_offset=8), Index(Str('path', lineno=286, col_offset=19)), Store(), lineno=286, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=286, col_offset=29), 'join', Load(), lineno=286, col_offset=29), [Attribute(Name('self', Load(), lineno=286, col_offset=41), '__paths', Load(), lineno=286, col_offset=41), Str(';', lineno=286, col_offset=55)], [], None, None, lineno=286, col_offset=29), lineno=286, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=288, col_offset=8), 'preprocess_options', Store(), lineno=288, col_offset=8)], Name('None', Load(), lineno=288, col_offset=34), lineno=288, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=289, col_offset=11), '__arch', Load(), lineno=289, col_offset=11), [Eq()], [Str('Intel', lineno=289, col_offset=26)], lineno=289, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=290, col_offset=12), 'compile_options', Store(), lineno=290, col_offset=12)], List([Str('/nologo', lineno=290, col_offset=37), Str('/Ox', lineno=290, col_offset=48), Str('/MD', lineno=290, col_offset=55), Str('/W3', lineno=290, col_offset=62), Str('/GX', lineno=290, col_offset=69), Str('/DNDEBUG', lineno=291, col_offset=37)], Load(), lineno=290, col_offset=35), lineno=290, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=292, col_offset=12), 'compile_options_debug', Store(), lineno=292, col_offset=12)], List([Str('/nologo', lineno=292, col_offset=42), Str('/Od', lineno=292, col_offset=53), Str('/MDd', lineno=292, col_offset=60), Str('/W3', lineno=292, col_offset=68), Str('/GX', lineno=292, col_offset=75), Str('/Z7', lineno=293, col_offset=42), Str('/D_DEBUG', lineno=293, col_offset=49)], Load(), lineno=292, col_offset=41), lineno=292, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=296, col_offset=12), 'compile_options', Store(), lineno=296, col_offset=12)], List([Str('/nologo', lineno=296, col_offset=37), Str('/Ox', lineno=296, col_offset=48), Str('/MD', lineno=296, col_offset=55), Str('/W3', lineno=296, col_offset=62), Str('/GS-', lineno=296, col_offset=69), Str('/DNDEBUG', lineno=297, col_offset=37)], Load(), lineno=296, col_offset=35), lineno=296, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=298, col_offset=12), 'compile_options_debug', Store(), lineno=298, col_offset=12)], List([Str('/nologo', lineno=298, col_offset=42), Str('/Od', lineno=298, col_offset=53), Str('/MDd', lineno=298, col_offset=60), Str('/W3', lineno=298, col_offset=68), Str('/GS-', lineno=298, col_offset=75), Str('/Z7', lineno=299, col_offset=42), Str('/D_DEBUG', lineno=299, col_offset=49)], Load(), lineno=298, col_offset=41), lineno=298, col_offset=12)], lineno=289, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=301, col_offset=8), 'ldflags_shared', Store(), lineno=301, col_offset=8)], List([Str('/DLL', lineno=301, col_offset=31), Str('/nologo', lineno=301, col_offset=39), Str('/INCREMENTAL:NO', lineno=301, col_offset=50)], Load(), lineno=301, col_offset=30), lineno=301, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=302, col_offset=11), '__version', Load(), lineno=302, col_offset=11), [GtE()], [Num(7, lineno=302, col_offset=29)], lineno=302, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=303, col_offset=12), 'ldflags_shared_debug', Store(), lineno=303, col_offset=12)], List([Str('/DLL', lineno=304, col_offset=16), Str('/nologo', lineno=304, col_offset=24), Str('/INCREMENTAL:no', lineno=304, col_offset=35), Str('/DEBUG', lineno=304, col_offset=54)], Load(), lineno=303, col_offset=40), lineno=303, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=307, col_offset=12), 'ldflags_shared_debug', Store(), lineno=307, col_offset=12)], List([Str('/DLL', lineno=308, col_offset=16), Str('/nologo', lineno=308, col_offset=24), Str('/INCREMENTAL:no', lineno=308, col_offset=35), Str('/pdb:None', lineno=308, col_offset=54), Str('/DEBUG', lineno=308, col_offset=67)], Load(), lineno=307, col_offset=40), lineno=307, col_offset=12)], lineno=302, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=310, col_offset=8), 'ldflags_static', Store(), lineno=310, col_offset=8)], List([Str('/nologo', lineno=310, col_offset=32)], Load(), lineno=310, col_offset=30), lineno=310, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=312, col_offset=8), 'initialized', Store(), lineno=312, col_offset=8)], Name('True', Load(), lineno=312, col_offset=27), lineno=312, col_offset=8)], [], lineno=252, col_offset=4), FunctionDef('object_filenames', arguments([Name('self', Param(), lineno=316, col_offset=26), Name('source_filenames', Param(), lineno=317, col_offset=26), Name('strip_dir', Param(), lineno=318, col_offset=26), Name('output_dir', Param(), lineno=319, col_offset=26)], None, None, [Num(0, lineno=318, col_offset=36), Str('', lineno=319, col_offset=37)]), [If(Compare(Name('output_dir', Load(), lineno=322, col_offset=11), [Is()], [Name('None', Load(), lineno=322, col_offset=25)], lineno=322, col_offset=11), [Assign([Name('output_dir', Store(), lineno=322, col_offset=31)], Str('', lineno=322, col_offset=44), lineno=322, col_offset=31)], [], lineno=322, col_offset=8), Assign([Name('obj_names', Store(), lineno=323, col_offset=8)], List([], Load(), lineno=323, col_offset=20), lineno=323, col_offset=8), For(Name('src_name', Store(), lineno=324, col_offset=12), Name('source_filenames', Load(), lineno=324, col_offset=24), [Assign([Tuple([Name('base', Store(), lineno=325, col_offset=13), Name('ext', Store(), lineno=325, col_offset=19)], Store(), lineno=325, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=325, col_offset=26), 'path', Load(), lineno=325, col_offset=26), 'splitext', Load(), lineno=325, col_offset=26), [Name('src_name', Load(), lineno=325, col_offset=44)], [], None, None, lineno=325, col_offset=26), lineno=325, col_offset=12), Assign([Name('base', Store(), lineno=326, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=326, col_offset=19), 'path', Load(), lineno=326, col_offset=19), 'splitdrive', Load(), lineno=326, col_offset=19), [Name('base', Load(), lineno=326, col_offset=38)], [], None, None, lineno=326, col_offset=19), Index(Num(1, lineno=326, col_offset=44)), Load(), lineno=326, col_offset=19), lineno=326, col_offset=12), Assign([Name('base', Store(), lineno=327, col_offset=12)], Subscript(Name('base', Load(), lineno=327, col_offset=19), Slice(Call(Attribute(Attribute(Name('os', Load(), lineno=327, col_offset=24), 'path', Load(), lineno=327, col_offset=24), 'isabs', Load(), lineno=327, col_offset=24), [Name('base', Load(), lineno=327, col_offset=38)], [], None, None, lineno=327, col_offset=24), None, None), Load(), lineno=327, col_offset=19), lineno=327, col_offset=12), If(Compare(Name('ext', Load(), lineno=328, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=328, col_offset=26), 'src_extensions', Load(), lineno=328, col_offset=26)], lineno=328, col_offset=15), [Raise(Call(Name('CompileError', Load(), lineno=332, col_offset=22), [BinOp(Str("Don't know how to compile %s", lineno=332, col_offset=36), Mod(), Name('src_name', Load(), lineno=332, col_offset=69), lineno=332, col_offset=36)], [], None, None, lineno=332, col_offset=22), None, None, lineno=332, col_offset=16)], [], lineno=328, col_offset=12), If(Name('strip_dir', Load(), lineno=333, col_offset=15), [Assign([Name('base', Store(), lineno=334, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=334, col_offset=23), 'path', Load(), lineno=334, col_offset=23), 'basename', Load(), lineno=334, col_offset=23), [Name('base', Load(), lineno=334, col_offset=41)], [], None, None, lineno=334, col_offset=23), lineno=334, col_offset=16)], [], lineno=333, col_offset=12), If(Compare(Name('ext', Load(), lineno=335, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=335, col_offset=22), '_rc_extensions', Load(), lineno=335, col_offset=22)], lineno=335, col_offset=15), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=336, col_offset=16), 'append', Load(), lineno=336, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=336, col_offset=34), 'path', Load(), lineno=336, col_offset=34), 'join', Load(), lineno=336, col_offset=34), [Name('output_dir', Load(), lineno=336, col_offset=48), BinOp(Name('base', Load(), lineno=337, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=337, col_offset=55), 'res_extension', Load(), lineno=337, col_offset=55), lineno=337, col_offset=48)], [], None, None, lineno=336, col_offset=34)], [], None, None, lineno=336, col_offset=16), lineno=336, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=338, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=338, col_offset=24), '_mc_extensions', Load(), lineno=338, col_offset=24)], lineno=338, col_offset=17), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=339, col_offset=16), 'append', Load(), lineno=339, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=339, col_offset=34), 'path', Load(), lineno=339, col_offset=34), 'join', Load(), lineno=339, col_offset=34), [Name('output_dir', Load(), lineno=339, col_offset=48), BinOp(Name('base', Load(), lineno=340, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=340, col_offset=55), 'res_extension', Load(), lineno=340, col_offset=55), lineno=340, col_offset=48)], [], None, None, lineno=339, col_offset=34)], [], None, None, lineno=339, col_offset=16), lineno=339, col_offset=16)], [Expr(Call(Attribute(Name('obj_names', Load(), lineno=342, col_offset=16), 'append', Load(), lineno=342, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=342, col_offset=34), 'path', Load(), lineno=342, col_offset=34), 'join', Load(), lineno=342, col_offset=34), [Name('output_dir', Load(), lineno=342, col_offset=48), BinOp(Name('base', Load(), lineno=343, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=343, col_offset=55), 'obj_extension', Load(), lineno=343, col_offset=55), lineno=343, col_offset=48)], [], None, None, lineno=342, col_offset=34)], [], None, None, lineno=342, col_offset=16), lineno=342, col_offset=16)], lineno=338, col_offset=17)], lineno=335, col_offset=12)], [], lineno=324, col_offset=8), Return(Name('obj_names', Load(), lineno=344, col_offset=15), lineno=344, col_offset=8)], [], lineno=316, col_offset=4), FunctionDef('compile', arguments([Name('self', Param(), lineno=349, col_offset=16), Name('sources', Param(), lineno=349, col_offset=22), Name('output_dir', Param(), lineno=350, col_offset=16), Name('macros', Param(), lineno=350, col_offset=33), Name('include_dirs', Param(), lineno=350, col_offset=46), Name('debug', Param(), lineno=350, col_offset=65), Name('extra_preargs', Param(), lineno=351, col_offset=16), Name('extra_postargs', Param(), lineno=351, col_offset=36), Name('depends', Param(), lineno=351, col_offset=57)], None, None, [Name('None', Load(), lineno=350, col_offset=27), Name('None', Load(), lineno=350, col_offset=40), Name('None', Load(), lineno=350, col_offset=59), Num(0, lineno=350, col_offset=71), Name('None', Load(), lineno=351, col_offset=30), Name('None', Load(), lineno=351, col_offset=51), Name('None', Load(), lineno=351, col_offset=65)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=353, col_offset=15), 'initialized', Load(), lineno=353, col_offset=15), lineno=353, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=353, col_offset=33), 'initialize', Load(), lineno=353, col_offset=33), [], [], None, None, lineno=353, col_offset=33), lineno=353, col_offset=33)], [], lineno=353, col_offset=8), Assign([Tuple([Name('macros', Store(), lineno=354, col_offset=8), Name('objects', Store(), lineno=354, col_offset=16), Name('extra_postargs', Store(), lineno=354, col_offset=25), Name('pp_opts', Store(), lineno=354, col_offset=41), Name('build', Store(), lineno=354, col_offset=50)], Store(), lineno=354, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=355, col_offset=16), '_setup_compile', Load(), lineno=355, col_offset=16), [Name('output_dir', Load(), lineno=355, col_offset=36), Name('macros', Load(), lineno=355, col_offset=48), Name('include_dirs', Load(), lineno=355, col_offset=56), Name('sources', Load(), lineno=355, col_offset=70), Name('depends', Load(), lineno=356, col_offset=36), Name('extra_postargs', Load(), lineno=356, col_offset=45)], [], None, None, lineno=355, col_offset=16), lineno=354, col_offset=8), Assign([Name('compile_opts', Store(), lineno=358, col_offset=8)], BoolOp(Or(), [Name('extra_preargs', Load(), lineno=358, col_offset=23), List([], Load(), lineno=358, col_offset=40)], lineno=358, col_offset=23), lineno=358, col_offset=8), Expr(Call(Attribute(Name('compile_opts', Load(), lineno=359, col_offset=8), 'append', Load(), lineno=359, col_offset=8), [Str('/c', lineno=359, col_offset=29)], [], None, None, lineno=359, col_offset=8), lineno=359, col_offset=8), If(Name('debug', Load(), lineno=360, col_offset=11), [Expr(Call(Attribute(Name('compile_opts', Load(), lineno=361, col_offset=12), 'extend', Load(), lineno=361, col_offset=12), [Attribute(Name('self', Load(), lineno=361, col_offset=32), 'compile_options_debug', Load(), lineno=361, col_offset=32)], [], None, None, lineno=361, col_offset=12), lineno=361, col_offset=12)], [Expr(Call(Attribute(Name('compile_opts', Load(), lineno=363, col_offset=12), 'extend', Load(), lineno=363, col_offset=12), [Attribute(Name('self', Load(), lineno=363, col_offset=32), 'compile_options', Load(), lineno=363, col_offset=32)], [], None, None, lineno=363, col_offset=12), lineno=363, col_offset=12)], lineno=360, col_offset=8), For(Name('obj', Store(), lineno=365, col_offset=12), Name('objects', Load(), lineno=365, col_offset=19), [TryExcept([Assign([Tuple([Name('src', Store(), lineno=367, col_offset=16), Name('ext', Store(), lineno=367, col_offset=21)], Store(), lineno=367, col_offset=16)], Subscript(Name('build', Load(), lineno=367, col_offset=27), Index(Name('obj', Load(), lineno=367, col_offset=33)), Load(), lineno=367, col_offset=27), lineno=367, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=368, col_offset=19), None, [Continue( lineno=369, col_offset=16)], lineno=368, col_offset=12)], [], lineno=366, col_offset=12), If(Name('debug', Load(), lineno=370, col_offset=15), [Assign([Name('src', Store(), lineno=374, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=374, col_offset=22), 'path', Load(), lineno=374, col_offset=22), 'abspath', Load(), lineno=374, col_offset=22), [Name('src', Load(), lineno=374, col_offset=38)], [], None, None, lineno=374, col_offset=22), lineno=374, col_offset=16)], [], lineno=370, col_offset=12), If(Compare(Name('ext', Load(), lineno=376, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=376, col_offset=22), '_c_extensions', Load(), lineno=376, col_offset=22)], lineno=376, col_offset=15), [Assign([Name('input_opt', Store(), lineno=377, col_offset=16)], BinOp(Str('/Tc', lineno=377, col_offset=28), Add(), Name('src', Load(), lineno=377, col_offset=36), lineno=377, col_offset=28), lineno=377, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=378, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=378, col_offset=24), '_cpp_extensions', Load(), lineno=378, col_offset=24)], lineno=378, col_offset=17), [Assign([Name('input_opt', Store(), lineno=379, col_offset=16)], BinOp(Str('/Tp', lineno=379, col_offset=28), Add(), Name('src', Load(), lineno=379, col_offset=36), lineno=379, col_offset=28), lineno=379, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=380, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=380, col_offset=24), '_rc_extensions', Load(), lineno=380, col_offset=24)], lineno=380, col_offset=17), [Assign([Name('input_opt', Store(), lineno=382, col_offset=16)], Name('src', Load(), lineno=382, col_offset=28), lineno=382, col_offset=16), Assign([Name('output_opt', Store(), lineno=383, col_offset=16)], BinOp(Str('/fo', lineno=383, col_offset=29), Add(), Name('obj', Load(), lineno=383, col_offset=37), lineno=383, col_offset=29), lineno=383, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=385, col_offset=20), 'spawn', Load(), lineno=385, col_offset=20), [BinOp(BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=385, col_offset=33), 'rc', Load(), lineno=385, col_offset=33)], Load(), lineno=385, col_offset=32), Add(), Name('pp_opts', Load(), lineno=385, col_offset=44), lineno=385, col_offset=32), Add(), List([Name('output_opt', Load(), lineno=386, col_offset=33)], Load(), lineno=386, col_offset=32), lineno=385, col_offset=52), Add(), List([Name('input_opt', Load(), lineno=386, col_offset=48)], Load(), lineno=386, col_offset=47), lineno=386, col_offset=45)], [], None, None, lineno=385, col_offset=20), lineno=385, col_offset=20)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=387, col_offset=23), Name('msg', Store(), lineno=387, col_offset=43), [Raise(Name('CompileError', Load(), lineno=388, col_offset=26), Name('msg', Load(), lineno=388, col_offset=40), None, lineno=388, col_offset=20)], lineno=387, col_offset=16)], [], lineno=384, col_offset=16), Continue( lineno=389, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=390, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=390, col_offset=24), '_mc_extensions', Load(), lineno=390, col_offset=24)], lineno=390, col_offset=17), [Assign([Name('h_dir', Store(), lineno=404, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=404, col_offset=24), 'path', Load(), lineno=404, col_offset=24), 'dirname', Load(), lineno=404, col_offset=24), [Name('src', Load(), lineno=404, col_offset=41)], [], None, None, lineno=404, col_offset=24), lineno=404, col_offset=16), Assign([Name('rc_dir', Store(), lineno=405, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=405, col_offset=25), 'path', Load(), lineno=405, col_offset=25), 'dirname', Load(), lineno=405, col_offset=25), [Name('obj', Load(), lineno=405, col_offset=42)], [], None, None, lineno=405, col_offset=25), lineno=405, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=408, col_offset=20), 'spawn', Load(), lineno=408, col_offset=20), [BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=408, col_offset=33), 'mc', Load(), lineno=408, col_offset=33)], Load(), lineno=408, col_offset=32), Add(), List([Str('-h', lineno=409, col_offset=33), Name('h_dir', Load(), lineno=409, col_offset=39), Str('-r', lineno=409, col_offset=46), Name('rc_dir', Load(), lineno=409, col_offset=52)], Load(), lineno=409, col_offset=32), lineno=408, col_offset=32), Add(), List([Name('src', Load(), lineno=409, col_offset=63)], Load(), lineno=409, col_offset=62), lineno=409, col_offset=60)], [], None, None, lineno=408, col_offset=20), lineno=408, col_offset=20), Assign([Tuple([Name('base', Store(), lineno=410, col_offset=20), Name('_', Store(), lineno=410, col_offset=26)], Store(), lineno=410, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=410, col_offset=30), 'path', Load(), lineno=410, col_offset=30), 'splitext', Load(), lineno=410, col_offset=30), [Call(Attribute(Attribute(Name('os', Load(), lineno=410, col_offset=48), 'path', Load(), lineno=410, col_offset=48), 'basename', Load(), lineno=410, col_offset=48), [Name('src', Load(), lineno=410, col_offset=66)], [], None, None, lineno=410, col_offset=48)], [], None, None, lineno=410, col_offset=30), lineno=410, col_offset=20), Assign([Name('rc_file', Store(), lineno=411, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=411, col_offset=30), 'path', Load(), lineno=411, col_offset=30), 'join', Load(), lineno=411, col_offset=30), [Name('rc_dir', Load(), lineno=411, col_offset=44), BinOp(Name('base', Load(), lineno=411, col_offset=52), Add(), Str('.rc', lineno=411, col_offset=59), lineno=411, col_offset=52)], [], None, None, lineno=411, col_offset=30), lineno=411, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=413, col_offset=20), 'spawn', Load(), lineno=413, col_offset=20), [BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=413, col_offset=33), 'rc', Load(), lineno=413, col_offset=33)], Load(), lineno=413, col_offset=32), Add(), List([BinOp(Str('/fo', lineno=414, col_offset=33), Add(), Name('obj', Load(), lineno=414, col_offset=41), lineno=414, col_offset=33)], Load(), lineno=414, col_offset=32), lineno=413, col_offset=32), Add(), List([Name('rc_file', Load(), lineno=414, col_offset=49)], Load(), lineno=414, col_offset=48), lineno=414, col_offset=46)], [], None, None, lineno=413, col_offset=20), lineno=413, col_offset=20)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=416, col_offset=23), Name('msg', Store(), lineno=416, col_offset=43), [Raise(Name('CompileError', Load(), lineno=417, col_offset=26), Name('msg', Load(), lineno=417, col_offset=40), None, lineno=417, col_offset=20)], lineno=416, col_offset=16)], [], lineno=406, col_offset=16), Continue( lineno=418, col_offset=16)], [Raise(Call(Name('CompileError', Load(), lineno=421, col_offset=22), [BinOp(Str("Don't know how to compile %s to %s", lineno=422, col_offset=20), Mod(), Tuple([Name('src', Load(), lineno=423, col_offset=21), Name('obj', Load(), lineno=423, col_offset=26)], Load(), lineno=423, col_offset=21), lineno=422, col_offset=20)], [], None, None, lineno=421, col_offset=22), None, None, lineno=421, col_offset=16)], lineno=390, col_offset=17)], lineno=380, col_offset=17)], lineno=378, col_offset=17)], lineno=376, col_offset=12), Assign([Name('output_opt', Store(), lineno=425, col_offset=12)], BinOp(Str('/Fo', lineno=425, col_offset=25), Add(), Name('obj', Load(), lineno=425, col_offset=33), lineno=425, col_offset=25), lineno=425, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=427, col_offset=16), 'spawn', Load(), lineno=427, col_offset=16), [BinOp(BinOp(BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=427, col_offset=29), 'cc', Load(), lineno=427, col_offset=29)], Load(), lineno=427, col_offset=28), Add(), Name('compile_opts', Load(), lineno=427, col_offset=40), lineno=427, col_offset=28), Add(), Name('pp_opts', Load(), lineno=427, col_offset=55), lineno=427, col_offset=53), Add(), List([Name('input_opt', Load(), lineno=428, col_offset=29), Name('output_opt', Load(), lineno=428, col_offset=40)], Load(), lineno=428, col_offset=28), lineno=427, col_offset=63), Add(), Name('extra_postargs', Load(), lineno=429, col_offset=28), lineno=428, col_offset=52)], [], None, None, lineno=427, col_offset=16), lineno=427, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=430, col_offset=19), Name('msg', Store(), lineno=430, col_offset=39), [Raise(Name('CompileError', Load(), lineno=431, col_offset=22), Name('msg', Load(), lineno=431, col_offset=36), None, lineno=431, col_offset=16)], lineno=430, col_offset=12)], [], lineno=426, col_offset=12)], [], lineno=365, col_offset=8), Return(Name('objects', Load(), lineno=433, col_offset=15), lineno=433, col_offset=8)], [], lineno=349, col_offset=4), FunctionDef('create_static_lib', arguments([Name('self', Param(), lineno=438, col_offset=27), Name('objects', Param(), lineno=439, col_offset=27), Name('output_libname', Param(), lineno=440, col_offset=27), Name('output_dir', Param(), lineno=441, col_offset=27), Name('debug', Param(), lineno=442, col_offset=27), Name('target_lang', Param(), lineno=443, col_offset=27)], None, None, [Name('None', Load(), lineno=441, col_offset=38), Num(0, lineno=442, col_offset=33), Name('None', Load(), lineno=443, col_offset=39)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=445, col_offset=15), 'initialized', Load(), lineno=445, col_offset=15), lineno=445, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=445, col_offset=33), 'initialize', Load(), lineno=445, col_offset=33), [], [], None, None, lineno=445, col_offset=33), lineno=445, col_offset=33)], [], lineno=445, col_offset=8), Assign([Tuple([Name('objects', Store(), lineno=446, col_offset=9), Name('output_dir', Store(), lineno=446, col_offset=18)], Store(), lineno=446, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=446, col_offset=32), '_fix_object_args', Load(), lineno=446, col_offset=32), [Name('objects', Load(), lineno=446, col_offset=55), Name('output_dir', Load(), lineno=446, col_offset=64)], [], None, None, lineno=446, col_offset=32), lineno=446, col_offset=8), Assign([Name('output_filename', Store(), lineno=447, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=448, col_offset=12), 'library_filename', Load(), lineno=448, col_offset=12), [Name('output_libname', Load(), lineno=448, col_offset=35)], [keyword('output_dir', Name('output_dir', Load(), lineno=448, col_offset=62))], None, None, lineno=448, col_offset=12), lineno=447, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=450, col_offset=11), '_need_link', Load(), lineno=450, col_offset=11), [Name('objects', Load(), lineno=450, col_offset=28), Name('output_filename', Load(), lineno=450, col_offset=37)], [], None, None, lineno=450, col_offset=11), [Assign([Name('lib_args', Store(), lineno=451, col_offset=12)], BinOp(Name('objects', Load(), lineno=451, col_offset=23), Add(), List([BinOp(Str('/OUT:', lineno=451, col_offset=34), Add(), Name('output_filename', Load(), lineno=451, col_offset=44), lineno=451, col_offset=34)], Load(), lineno=451, col_offset=33), lineno=451, col_offset=23), lineno=451, col_offset=12), If(Name('debug', Load(), lineno=452, col_offset=15), [Pass( lineno=453, col_offset=16)], [], lineno=452, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=455, col_offset=16), 'spawn', Load(), lineno=455, col_offset=16), [BinOp(List([Attribute(Name('self', Load(), lineno=455, col_offset=29), 'lib', Load(), lineno=455, col_offset=29)], Load(), lineno=455, col_offset=28), Add(), Name('lib_args', Load(), lineno=455, col_offset=41), lineno=455, col_offset=28)], [], None, None, lineno=455, col_offset=16), lineno=455, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=456, col_offset=19), Name('msg', Store(), lineno=456, col_offset=39), [Raise(Name('LibError', Load(), lineno=457, col_offset=22), Name('msg', Load(), lineno=457, col_offset=32), None, lineno=457, col_offset=16)], lineno=456, col_offset=12)], [], lineno=454, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=460, col_offset=12), 'debug', Load(), lineno=460, col_offset=12), [Str('skipping %s (up-to-date)', lineno=460, col_offset=22), Name('output_filename', Load(), lineno=460, col_offset=50)], [], None, None, lineno=460, col_offset=12), lineno=460, col_offset=12)], lineno=450, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('link', arguments([Name('self', Param(), lineno=464, col_offset=14), Name('target_desc', Param(), lineno=465, col_offset=14), Name('objects', Param(), lineno=466, col_offset=14), Name('output_filename', Param(), lineno=467, col_offset=14), Name('output_dir', Param(), lineno=468, col_offset=14), Name('libraries', Param(), lineno=469, col_offset=14), Name('library_dirs', Param(), lineno=470, col_offset=14), Name('runtime_library_dirs', Param(), lineno=471, col_offset=14), Name('export_symbols', Param(), lineno=472, col_offset=14), Name('debug', Param(), lineno=473, col_offset=14), Name('extra_preargs', Param(), lineno=474, col_offset=14), Name('extra_postargs', Param(), lineno=475, col_offset=14), Name('build_temp', Param(), lineno=476, col_offset=14), Name('target_lang', Param(), lineno=477, col_offset=14)], None, None, [Name('None', Load(), lineno=468, col_offset=25), Name('None', Load(), lineno=469, col_offset=24), Name('None', Load(), lineno=470, col_offset=27), Name('None', Load(), lineno=471, col_offset=35), Name('None', Load(), lineno=472, col_offset=29), Num(0, lineno=473, col_offset=20), Name('None', Load(), lineno=474, col_offset=28), Name('None', Load(), lineno=475, col_offset=29), Name('None', Load(), lineno=476, col_offset=25), Name('None', Load(), lineno=477, col_offset=26)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=479, col_offset=15), 'initialized', Load(), lineno=479, col_offset=15), lineno=479, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=479, col_offset=33), 'initialize', Load(), lineno=479, col_offset=33), [], [], None, None, lineno=479, col_offset=33), lineno=479, col_offset=33)], [], lineno=479, col_offset=8), Assign([Tuple([Name('objects', Store(), lineno=480, col_offset=9), Name('output_dir', Store(), lineno=480, col_offset=18)], Store(), lineno=480, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=480, col_offset=32), '_fix_object_args', Load(), lineno=480, col_offset=32), [Name('objects', Load(), lineno=480, col_offset=55), Name('output_dir', Load(), lineno=480, col_offset=64)], [], None, None, lineno=480, col_offset=32), lineno=480, col_offset=8), Assign([Tuple([Name('libraries', Store(), lineno=481, col_offset=9), Name('library_dirs', Store(), lineno=481, col_offset=20), Name('runtime_library_dirs', Store(), lineno=481, col_offset=34)], Store(), lineno=481, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=482, col_offset=12), '_fix_lib_args', Load(), lineno=482, col_offset=12), [Name('libraries', Load(), lineno=482, col_offset=32), Name('library_dirs', Load(), lineno=482, col_offset=43), Name('runtime_library_dirs', Load(), lineno=482, col_offset=57)], [], None, None, lineno=482, col_offset=12), lineno=481, col_offset=8), If(Name('runtime_library_dirs', Load(), lineno=484, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=485, col_offset=12), 'warn', Load(), lineno=485, col_offset=12), [BinOp(Str("I don't know what to do with 'runtime_library_dirs': ", lineno=485, col_offset=23), Add(), Call(Name('str', Load(), lineno=486, col_offset=25), [Name('runtime_library_dirs', Load(), lineno=486, col_offset=30)], [], None, None, lineno=486, col_offset=25), lineno=485, col_offset=23)], [], None, None, lineno=485, col_offset=12), lineno=485, col_offset=12)], [], lineno=484, col_offset=8), Assign([Name('lib_opts', Store(), lineno=488, col_offset=8)], Call(Name('gen_lib_options', Load(), lineno=488, col_offset=19), [Name('self', Load(), lineno=488, col_offset=36), Name('library_dirs', Load(), lineno=489, col_offset=36), Name('runtime_library_dirs', Load(), lineno=489, col_offset=50), Name('libraries', Load(), lineno=490, col_offset=36)], [], None, None, lineno=488, col_offset=19), lineno=488, col_offset=8), If(Compare(Name('output_dir', Load(), lineno=491, col_offset=11), [IsNot()], [Name('None', Load(), lineno=491, col_offset=29)], lineno=491, col_offset=11), [Assign([Name('output_filename', Store(), lineno=492, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=492, col_offset=30), 'path', Load(), lineno=492, col_offset=30), 'join', Load(), lineno=492, col_offset=30), [Name('output_dir', Load(), lineno=492, col_offset=44), Name('output_filename', Load(), lineno=492, col_offset=56)], [], None, None, lineno=492, col_offset=30), lineno=492, col_offset=12)], [], lineno=491, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=494, col_offset=11), '_need_link', Load(), lineno=494, col_offset=11), [Name('objects', Load(), lineno=494, col_offset=28), Name('output_filename', Load(), lineno=494, col_offset=37)], [], None, None, lineno=494, col_offset=11), [If(Compare(Name('target_desc', Load(), lineno=496, col_offset=15), [Eq()], [Attribute(Name('CCompiler', Load(), lineno=496, col_offset=30), 'EXECUTABLE', Load(), lineno=496, col_offset=30)], lineno=496, col_offset=15), [If(Name('debug', Load(), lineno=497, col_offset=19), [Assign([Name('ldflags', Store(), lineno=498, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=498, col_offset=30), 'ldflags_shared_debug', Load(), lineno=498, col_offset=30), Slice(Num(1, lineno=498, col_offset=56), None, None), Load(), lineno=498, col_offset=30), lineno=498, col_offset=20)], [Assign([Name('ldflags', Store(), lineno=500, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=500, col_offset=30), 'ldflags_shared', Load(), lineno=500, col_offset=30), Slice(Num(1, lineno=500, col_offset=50), None, None), Load(), lineno=500, col_offset=30), lineno=500, col_offset=20)], lineno=497, col_offset=16)], [If(Name('debug', Load(), lineno=502, col_offset=19), [Assign([Name('ldflags', Store(), lineno=503, col_offset=20)], Attribute(Name('self', Load(), lineno=503, col_offset=30), 'ldflags_shared_debug', Load(), lineno=503, col_offset=30), lineno=503, col_offset=20)], [Assign([Name('ldflags', Store(), lineno=505, col_offset=20)], Attribute(Name('self', Load(), lineno=505, col_offset=30), 'ldflags_shared', Load(), lineno=505, col_offset=30), lineno=505, col_offset=20)], lineno=502, col_offset=16)], lineno=496, col_offset=12), Assign([Name('export_opts', Store(), lineno=507, col_offset=12)], List([], Load(), lineno=507, col_offset=26), lineno=507, col_offset=12), For(Name('sym', Store(), lineno=508, col_offset=16), BoolOp(Or(), [Name('export_symbols', Load(), lineno=508, col_offset=24), List([], Load(), lineno=508, col_offset=42)], lineno=508, col_offset=24), [Expr(Call(Attribute(Name('export_opts', Load(), lineno=509, col_offset=16), 'append', Load(), lineno=509, col_offset=16), [BinOp(Str('/EXPORT:', lineno=509, col_offset=35), Add(), Name('sym', Load(), lineno=509, col_offset=48), lineno=509, col_offset=35)], [], None, None, lineno=509, col_offset=16), lineno=509, col_offset=16)], [], lineno=508, col_offset=12), Assign([Name('ld_args', Store(), lineno=511, col_offset=12)], BinOp(BinOp(BinOp(BinOp(Name('ldflags', Load(), lineno=511, col_offset=23), Add(), Name('lib_opts', Load(), lineno=511, col_offset=33), lineno=511, col_offset=23), Add(), Name('export_opts', Load(), lineno=511, col_offset=44), lineno=511, col_offset=42), Add(), Name('objects', Load(), lineno=512, col_offset=23), lineno=511, col_offset=56), Add(), List([BinOp(Str('/OUT:', lineno=512, col_offset=34), Add(), Name('output_filename', Load(), lineno=512, col_offset=44), lineno=512, col_offset=34)], Load(), lineno=512, col_offset=33), lineno=512, col_offset=31), lineno=511, col_offset=12), If(Compare(Name('export_symbols', Load(), lineno=519, col_offset=15), [IsNot()], [Name('None', Load(), lineno=519, col_offset=37)], lineno=519, col_offset=15), [Assign([Tuple([Name('dll_name', Store(), lineno=520, col_offset=17), Name('dll_ext', Store(), lineno=520, col_offset=27)], Store(), lineno=520, col_offset=17)], Call(Attribute(Attribute(Name('os', Load(), lineno=520, col_offset=38), 'path', Load(), lineno=520, col_offset=38), 'splitext', Load(), lineno=520, col_offset=38), [Call(Attribute(Attribute(Name('os', Load(), lineno=521, col_offset=20), 'path', Load(), lineno=521, col_offset=20), 'basename', Load(), lineno=521, col_offset=20), [Name('output_filename', Load(), lineno=521, col_offset=37)], [], None, None, lineno=521, col_offset=20)], [], None, None, lineno=520, col_offset=38), lineno=520, col_offset=16), Assign([Name('implib_file', Store(), lineno=522, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=522, col_offset=30), 'path', Load(), lineno=522, col_offset=30), 'join', Load(), lineno=522, col_offset=30), [Call(Attribute(Attribute(Name('os', Load(), lineno=523, col_offset=20), 'path', Load(), lineno=523, col_offset=20), 'dirname', Load(), lineno=523, col_offset=20), [Subscript(Name('objects', Load(), lineno=523, col_offset=36), Index(Num(0, lineno=523, col_offset=44)), Load(), lineno=523, col_offset=36)], [], None, None, lineno=523, col_offset=20), Call(Attribute(Name('self', Load(), lineno=524, col_offset=20), 'library_filename', Load(), lineno=524, col_offset=20), [Name('dll_name', Load(), lineno=524, col_offset=42)], [], None, None, lineno=524, col_offset=20)], [], None, None, lineno=522, col_offset=30), lineno=522, col_offset=16), Expr(Call(Attribute(Name('ld_args', Load(), lineno=525, col_offset=16), 'append', Load(), lineno=525, col_offset=16), [BinOp(Str('/IMPLIB:', lineno=525, col_offset=32), Add(), Name('implib_file', Load(), lineno=525, col_offset=45), lineno=525, col_offset=32)], [], None, None, lineno=525, col_offset=16), lineno=525, col_offset=16)], [], lineno=519, col_offset=12), If(Name('extra_preargs', Load(), lineno=527, col_offset=15), [Assign([Subscript(Name('ld_args', Load(), lineno=528, col_offset=16), Slice(None, Num(0, lineno=528, col_offset=25), None), Store(), lineno=528, col_offset=16)], Name('extra_preargs', Load(), lineno=528, col_offset=30), lineno=528, col_offset=16)], [], lineno=527, col_offset=12), If(Name('extra_postargs', Load(), lineno=529, col_offset=15), [Expr(Call(Attribute(Name('ld_args', Load(), lineno=530, col_offset=16), 'extend', Load(), lineno=530, col_offset=16), [Name('extra_postargs', Load(), lineno=530, col_offset=31)], [], None, None, lineno=530, col_offset=16), lineno=530, col_offset=16)], [], lineno=529, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=532, col_offset=12), 'mkpath', Load(), lineno=532, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=532, col_offset=25), 'path', Load(), lineno=532, col_offset=25), 'dirname', Load(), lineno=532, col_offset=25), [Name('output_filename', Load(), lineno=532, col_offset=42)], [], None, None, lineno=532, col_offset=25)], [], None, None, lineno=532, col_offset=12), lineno=532, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=534, col_offset=16), 'spawn', Load(), lineno=534, col_offset=16), [BinOp(List([Attribute(Name('self', Load(), lineno=534, col_offset=29), 'linker', Load(), lineno=534, col_offset=29)], Load(), lineno=534, col_offset=28), Add(), Name('ld_args', Load(), lineno=534, col_offset=44), lineno=534, col_offset=28)], [], None, None, lineno=534, col_offset=16), lineno=534, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=535, col_offset=19), Name('msg', Store(), lineno=535, col_offset=39), [Raise(Name('LinkError', Load(), lineno=536, col_offset=22), Name('msg', Load(), lineno=536, col_offset=33), None, lineno=536, col_offset=16)], lineno=535, col_offset=12)], [], lineno=533, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=539, col_offset=12), 'debug', Load(), lineno=539, col_offset=12), [Str('skipping %s (up-to-date)', lineno=539, col_offset=22), Name('output_filename', Load(), lineno=539, col_offset=50)], [], None, None, lineno=539, col_offset=12), lineno=539, col_offset=12)], lineno=494, col_offset=8)], [], lineno=464, col_offset=4), FunctionDef('library_dir_option', arguments([Name('self', Param(), lineno=548, col_offset=28), Name('dir', Param(), lineno=548, col_offset=34)], None, None, []), [Return(BinOp(Str('/LIBPATH:', lineno=549, col_offset=15), Add(), Name('dir', Load(), lineno=549, col_offset=29), lineno=549, col_offset=15), lineno=549, col_offset=8)], [], lineno=548, col_offset=4), FunctionDef('runtime_library_dir_option', arguments([Name('self', Param(), lineno=551, col_offset=36), Name('dir', Param(), lineno=551, col_offset=42)], None, None, []), [Raise(Name('DistutilsPlatformError', Load(), lineno=552, col_offset=14), Str("don't know how to set runtime library search path for MSVC++", lineno=553, col_offset=14), None, lineno=552, col_offset=8)], [], lineno=551, col_offset=4), FunctionDef('library_option', arguments([Name('self', Param(), lineno=555, col_offset=24), Name('lib', Param(), lineno=555, col_offset=30)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=556, col_offset=15), 'library_filename', Load(), lineno=556, col_offset=15), [Name('lib', Load(), lineno=556, col_offset=38)], [], None, None, lineno=556, col_offset=15), lineno=556, col_offset=8)], [], lineno=555, col_offset=4), FunctionDef('find_library_file', arguments([Name('self', Param(), lineno=559, col_offset=27), Name('dirs', Param(), lineno=559, col_offset=33), Name('lib', Param(), lineno=559, col_offset=39), Name('debug', Param(), lineno=559, col_offset=44)], None, None, [Num(0, lineno=559, col_offset=50)]), [If(Name('debug', Load(), lineno=562, col_offset=11), [Assign([Name('try_names', Store(), lineno=563, col_offset=12)], List([BinOp(Name('lib', Load(), lineno=563, col_offset=25), Add(), Str('_d', lineno=563, col_offset=31), lineno=563, col_offset=25), Name('lib', Load(), lineno=563, col_offset=37)], Load(), lineno=563, col_offset=24), lineno=563, col_offset=12)], [Assign([Name('try_names', Store(), lineno=565, col_offset=12)], List([Name('lib', Load(), lineno=565, col_offset=25)], Load(), lineno=565, col_offset=24), lineno=565, col_offset=12)], lineno=562, col_offset=8), For(Name('dir', Store(), lineno=566, col_offset=12), Name('dirs', Load(), lineno=566, col_offset=19), [For(Name('name', Store(), lineno=567, col_offset=16), Name('try_names', Load(), lineno=567, col_offset=24), [Assign([Name('libfile', Store(), lineno=568, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=568, col_offset=26), 'path', Load(), lineno=568, col_offset=26), 'join', Load(), lineno=568, col_offset=26), [Name('dir', Load(), lineno=568, col_offset=39), Call(Attribute(Name('self', Load(), lineno=568, col_offset=44), 'library_filename', Load(), lineno=568, col_offset=44), [Name('name', Load(), lineno=568, col_offset=67)], [], None, None, lineno=568, col_offset=44)], [], None, None, lineno=568, col_offset=26), lineno=568, col_offset=16), If(Call(Attribute(Attribute(Name('os', Load(), lineno=569, col_offset=19), 'path', Load(), lineno=569, col_offset=19), 'exists', Load(), lineno=569, col_offset=19), [Name('libfile', Load(), lineno=569, col_offset=34)], [], None, None, lineno=569, col_offset=19), [Return(Name('libfile', Load(), lineno=570, col_offset=27), lineno=570, col_offset=20)], [], lineno=569, col_offset=16)], [], lineno=567, col_offset=12)], [Return(Name('None', Load(), lineno=573, col_offset=19), lineno=573, col_offset=12)], lineno=566, col_offset=8)], [], lineno=559, col_offset=4), FunctionDef('find_exe', arguments([Name('self', Param(), lineno=579, col_offset=17), Name('exe', Param(), lineno=579, col_offset=23)], None, None, []), [Expr(Str("Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        ", lineno=587, col_offset=-1), lineno=587, col_offset=-1), For(Name('p', Store(), lineno=589, col_offset=12), Attribute(Name('self', Load(), lineno=589, col_offset=17), '__paths', Load(), lineno=589, col_offset=17), [Assign([Name('fn', Store(), lineno=590, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=590, col_offset=17), 'path', Load(), lineno=590, col_offset=17), 'join', Load(), lineno=590, col_offset=17), [Call(Attribute(Attribute(Name('os', Load(), lineno=590, col_offset=30), 'path', Load(), lineno=590, col_offset=30), 'abspath', Load(), lineno=590, col_offset=30), [Name('p', Load(), lineno=590, col_offset=46)], [], None, None, lineno=590, col_offset=30), Name('exe', Load(), lineno=590, col_offset=50)], [], None, None, lineno=590, col_offset=17), lineno=590, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=591, col_offset=15), 'path', Load(), lineno=591, col_offset=15), 'isfile', Load(), lineno=591, col_offset=15), [Name('fn', Load(), lineno=591, col_offset=30)], [], None, None, lineno=591, col_offset=15), [Return(Name('fn', Load(), lineno=592, col_offset=23), lineno=592, col_offset=16)], [], lineno=591, col_offset=12)], [], lineno=589, col_offset=8), For(Name('p', Store(), lineno=595, col_offset=12), Call(Attribute(Name('string', Load(), lineno=595, col_offset=17), 'split', Load(), lineno=595, col_offset=17), [Subscript(Attribute(Name('os', Load(), lineno=595, col_offset=30), 'environ', Load(), lineno=595, col_offset=30), Index(Str('Path', lineno=595, col_offset=41)), Load(), lineno=595, col_offset=30), Str(';', lineno=595, col_offset=49)], [], None, None, lineno=595, col_offset=17), [Assign([Name('fn', Store(), lineno=596, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=596, col_offset=17), 'path', Load(), lineno=596, col_offset=17), 'join', Load(), lineno=596, col_offset=17), [Call(Attribute(Attribute(Name('os', Load(), lineno=596, col_offset=30), 'path', Load(), lineno=596, col_offset=30), 'abspath', Load(), lineno=596, col_offset=30), [Name('p', Load(), lineno=596, col_offset=46)], [], None, None, lineno=596, col_offset=30), Name('exe', Load(), lineno=596, col_offset=49)], [], None, None, lineno=596, col_offset=17), lineno=596, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=597, col_offset=15), 'path', Load(), lineno=597, col_offset=15), 'isfile', Load(), lineno=597, col_offset=15), [Name('fn', Load(), lineno=597, col_offset=30)], [], None, None, lineno=597, col_offset=15), [Return(Name('fn', Load(), lineno=598, col_offset=23), lineno=598, col_offset=16)], [], lineno=597, col_offset=12)], [], lineno=595, col_offset=8), Return(Name('exe', Load(), lineno=600, col_offset=15), lineno=600, col_offset=8)], [], lineno=579, col_offset=4), FunctionDef('get_msvc_paths', arguments([Name('self', Param(), lineno=602, col_offset=23), Name('path', Param(), lineno=602, col_offset=29), Name('platform', Param(), lineno=602, col_offset=35)], None, None, [Str('x86', lineno=602, col_offset=44)]), [Expr(Str('Get a list of devstudio directories (include, lib or path).\n\n        Return a list of strings.  The list will be empty if unable to\n        access the registry or appropriate registry keys not found.\n        ', lineno=607, col_offset=-1), lineno=607, col_offset=-1), If(UnaryOp(Not(), Name('_can_read_reg', Load(), lineno=609, col_offset=15), lineno=609, col_offset=11), [Return(List([], Load(), lineno=610, col_offset=19), lineno=610, col_offset=12)], [], lineno=609, col_offset=8), Assign([Name('path', Store(), lineno=612, col_offset=8)], BinOp(Name('path', Load(), lineno=612, col_offset=15), Add(), Str(' dirs', lineno=612, col_offset=22), lineno=612, col_offset=15), lineno=612, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=613, col_offset=11), '__version', Load(), lineno=613, col_offset=11), [GtE()], [Num(7, lineno=613, col_offset=29)], lineno=613, col_offset=11), [Assign([Name('key', Store(), lineno=614, col_offset=12)], BinOp(Str('%s\\%0.1f\\VC\\VC_OBJECTS_PLATFORM_INFO\\Win32\\Directories', lineno=614, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=615, col_offset=22), '__root', Load(), lineno=615, col_offset=22), Attribute(Name('self', Load(), lineno=615, col_offset=35), '__version', Load(), lineno=615, col_offset=35)], Load(), lineno=615, col_offset=22), lineno=614, col_offset=19), lineno=614, col_offset=12)], [Assign([Name('key', Store(), lineno=617, col_offset=12)], BinOp(Str('%s\\6.0\\Build System\\Components\\Platforms\\Win32 (%s)\\Directories', lineno=617, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=618, col_offset=49), '__root', Load(), lineno=618, col_offset=49), Name('platform', Load(), lineno=618, col_offset=62)], Load(), lineno=618, col_offset=49), lineno=617, col_offset=19), lineno=617, col_offset=12)], lineno=613, col_offset=8), For(Name('base', Store(), lineno=620, col_offset=12), Name('HKEYS', Load(), lineno=620, col_offset=20), [Assign([Name('d', Store(), lineno=621, col_offset=12)], Call(Name('read_values', Load(), lineno=621, col_offset=16), [Name('base', Load(), lineno=621, col_offset=28), Name('key', Load(), lineno=621, col_offset=34)], [], None, None, lineno=621, col_offset=16), lineno=621, col_offset=12), If(Name('d', Load(), lineno=622, col_offset=15), [If(Compare(Attribute(Name('self', Load(), lineno=623, col_offset=19), '__version', Load(), lineno=623, col_offset=19), [GtE()], [Num(7, lineno=623, col_offset=37)], lineno=623, col_offset=19), [Return(Call(Attribute(Name('string', Load(), lineno=624, col_offset=27), 'split', Load(), lineno=624, col_offset=27), [Call(Attribute(Attribute(Name('self', Load(), lineno=624, col_offset=40), '__macros', Load(), lineno=624, col_offset=40), 'sub', Load(), lineno=624, col_offset=40), [Subscript(Name('d', Load(), lineno=624, col_offset=58), Index(Name('path', Load(), lineno=624, col_offset=60)), Load(), lineno=624, col_offset=58)], [], None, None, lineno=624, col_offset=40), Str(';', lineno=624, col_offset=68)], [], None, None, lineno=624, col_offset=27), lineno=624, col_offset=20)], [Return(Call(Attribute(Name('string', Load(), lineno=626, col_offset=27), 'split', Load(), lineno=626, col_offset=27), [Subscript(Name('d', Load(), lineno=626, col_offset=40), Index(Name('path', Load(), lineno=626, col_offset=42)), Load(), lineno=626, col_offset=40), Str(';', lineno=626, col_offset=49)], [], None, None, lineno=626, col_offset=27), lineno=626, col_offset=20)], lineno=623, col_offset=16)], [], lineno=622, col_offset=12)], [], lineno=620, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=629, col_offset=11), '__version', Load(), lineno=629, col_offset=11), [Eq()], [Num(6, lineno=629, col_offset=29)], lineno=629, col_offset=11), [For(Name('base', Store(), lineno=630, col_offset=16), Name('HKEYS', Load(), lineno=630, col_offset=24), [If(Compare(Call(Name('read_values', Load(), lineno=631, col_offset=19), [Name('base', Load(), lineno=631, col_offset=31), BinOp(Str('%s\\6.0', lineno=631, col_offset=37), Mod(), Attribute(Name('self', Load(), lineno=631, col_offset=49), '__root', Load(), lineno=631, col_offset=49), lineno=631, col_offset=37)], [], None, None, lineno=631, col_offset=19), [IsNot()], [Name('None', Load(), lineno=631, col_offset=69)], lineno=631, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=632, col_offset=20), 'warn', Load(), lineno=632, col_offset=20), [Str('It seems you have Visual Studio 6 installed, but the expected registry settings are not present.\nYou must at least run the Visual Studio GUI once so that these entries are created.', lineno=632, col_offset=30)], [], None, None, lineno=632, col_offset=20), lineno=632, col_offset=20), Break( lineno=636, col_offset=20)], [], lineno=631, col_offset=16)], [], lineno=630, col_offset=12)], [], lineno=629, col_offset=8), Return(List([], Load(), lineno=637, col_offset=15), lineno=637, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('set_path_env_var', arguments([Name('self', Param(), lineno=639, col_offset=25), Name('name', Param(), lineno=639, col_offset=31)], None, None, []), [Expr(Str("Set environment variable 'name' to an MSVC path type value.\n\n        This is equivalent to a SET command prior to execution of spawned\n        commands.\n        ", lineno=644, col_offset=-1), lineno=644, col_offset=-1), If(Compare(Name('name', Load(), lineno=646, col_offset=11), [Eq()], [Str('lib', lineno=646, col_offset=19)], lineno=646, col_offset=11), [Assign([Name('p', Store(), lineno=647, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=647, col_offset=16), 'get_msvc_paths', Load(), lineno=647, col_offset=16), [Str('library', lineno=647, col_offset=36)], [], None, None, lineno=647, col_offset=16), lineno=647, col_offset=12)], [Assign([Name('p', Store(), lineno=649, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=649, col_offset=16), 'get_msvc_paths', Load(), lineno=649, col_offset=16), [Name('name', Load(), lineno=649, col_offset=36)], [], None, None, lineno=649, col_offset=16), lineno=649, col_offset=12)], lineno=646, col_offset=8), If(Name('p', Load(), lineno=650, col_offset=11), [Assign([Subscript(Attribute(Name('os', Load(), lineno=651, col_offset=12), 'environ', Load(), lineno=651, col_offset=12), Index(Name('name', Load(), lineno=651, col_offset=23)), Store(), lineno=651, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=651, col_offset=31), 'join', Load(), lineno=651, col_offset=31), [Name('p', Load(), lineno=651, col_offset=43), Str(';', lineno=651, col_offset=46)], [], None, None, lineno=651, col_offset=31), lineno=651, col_offset=12)], [], lineno=650, col_offset=8)], [], lineno=639, col_offset=4)], [], lineno=204, col_offset=0), If(Compare(Call(Name('get_build_version', Load(), lineno=654, col_offset=3), [], [], None, None, lineno=654, col_offset=3), [GtE()], [Num(8.0, lineno=654, col_offset=26)], lineno=654, col_offset=3), [Expr(Call(Attribute(Name('log', Load(), lineno=655, col_offset=4), 'debug', Load(), lineno=655, col_offset=4), [Str('Importing new compiler from distutils.msvc9compiler', lineno=655, col_offset=14)], [], None, None, lineno=655, col_offset=4), lineno=655, col_offset=4), Assign([Name('OldMSVCCompiler', Store(), lineno=656, col_offset=4)], Name('MSVCCompiler', Load(), lineno=656, col_offset=22), lineno=656, col_offset=4), ImportFrom('distutils.msvc9compiler', [alias('MSVCCompiler', None)], 0, lineno=657, col_offset=4), ImportFrom('distutils.msvc9compiler', [alias('MacroExpander', None)], 0, lineno=659, col_offset=4)], [], lineno=654, col_offset=0)])
