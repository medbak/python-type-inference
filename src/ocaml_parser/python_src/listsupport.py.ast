Module([Import([alias('string', None)], lineno=6, col_offset=0), Assign([Name('MACHEADERFILE', Store(), lineno=9, col_offset=0)], Str('Lists.h', lineno=9, col_offset=16), lineno=9, col_offset=0), Assign([Name('MODNAME', Store(), lineno=10, col_offset=0)], Str('_List', lineno=10, col_offset=10), lineno=10, col_offset=0), Assign([Name('OBJECTNAME', Store(), lineno=11, col_offset=0)], Str('List', lineno=11, col_offset=13), lineno=11, col_offset=0), Assign([Name('KIND', Store(), lineno=12, col_offset=0)], Str('Handle', lineno=12, col_offset=7), lineno=12, col_offset=0), Assign([Name('MODPREFIX', Store(), lineno=15, col_offset=0)], Str('List', lineno=15, col_offset=12), lineno=15, col_offset=0), Assign([Name('OBJECTTYPE', Store(), lineno=16, col_offset=0)], Str('ListHandle', lineno=16, col_offset=13), lineno=16, col_offset=0), Assign([Name('OBJECTPREFIX', Store(), lineno=17, col_offset=0)], BinOp(Name('MODPREFIX', Load(), lineno=17, col_offset=15), Add(), Str('Obj', lineno=17, col_offset=27), lineno=17, col_offset=15), lineno=17, col_offset=0), Assign([Name('INPUTFILE', Store(), lineno=18, col_offset=0)], BinOp(Call(Attribute(Name('string', Load(), lineno=18, col_offset=12), 'lower', Load(), lineno=18, col_offset=12), [Name('MODPREFIX', Load(), lineno=18, col_offset=25)], [], None, None, lineno=18, col_offset=12), Add(), Str('gen.py', lineno=18, col_offset=38), lineno=18, col_offset=12), lineno=18, col_offset=0), Assign([Name('OUTPUTFILE', Store(), lineno=19, col_offset=0)], BinOp(Name('MODNAME', Load(), lineno=19, col_offset=13), Add(), Str('module.c', lineno=19, col_offset=23), lineno=19, col_offset=13), lineno=19, col_offset=0), ImportFrom('macsupport', [alias('*', None)], 0, lineno=21, col_offset=0), Assign([Name('ListHandle', Store(), lineno=24, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=24, col_offset=13), [Str('ListHandle', lineno=24, col_offset=31), Str('ListObj', lineno=24, col_offset=45)], [], None, None, lineno=24, col_offset=13), lineno=24, col_offset=0), Assign([Name('ListRef', Store(), lineno=25, col_offset=0)], Name('ListHandle', Load(), lineno=25, col_offset=10), lineno=25, col_offset=0), Assign([Name('Cell', Store(), lineno=26, col_offset=0)], Name('Point', Load(), lineno=26, col_offset=7), lineno=26, col_offset=0), Assign([Name('ListBounds', Store(), lineno=27, col_offset=0)], Name('Rect', Load(), lineno=27, col_offset=13), lineno=27, col_offset=0), Assign([Name('ListBounds_ptr', Store(), lineno=28, col_offset=0)], Name('Rect_ptr', Load(), lineno=28, col_offset=17), lineno=28, col_offset=0), Assign([Name('ListDefSpec', Store(), lineno=30, col_offset=0), Name('ListDefSpec_ptr', Store(), lineno=30, col_offset=14)], Call(Name('OpaqueType', Load(), lineno=30, col_offset=32), [Str('ListDefSpec', lineno=30, col_offset=43), Str('PyMac_BuildListDefSpec', lineno=30, col_offset=58), Str('PyMac_GetListDefSpec', lineno=30, col_offset=84)], [], None, None, lineno=30, col_offset=32), lineno=30, col_offset=0), Assign([Name('VarOutBufferShortsize', Store(), lineno=32, col_offset=0)], Call(Name('VarHeapOutputBufferType', Load(), lineno=32, col_offset=24), [Str('char', lineno=32, col_offset=48), Str('short', lineno=32, col_offset=56), Str('s', lineno=32, col_offset=65)], [], None, None, lineno=32, col_offset=24), lineno=32, col_offset=0), Assign([Name('InBufferShortsize', Store(), lineno=33, col_offset=0)], Call(Name('VarInputBufferType', Load(), lineno=33, col_offset=20), [Str('char', lineno=33, col_offset=39), Str('short', lineno=33, col_offset=47), Str('s', lineno=33, col_offset=56)], [], None, None, lineno=33, col_offset=20), lineno=33, col_offset=0), Assign([Name('RgnHandle', Store(), lineno=35, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=35, col_offset=12), [Str('RgnHandle', lineno=35, col_offset=30), Str('ResObj', lineno=35, col_offset=43)], [], None, None, lineno=35, col_offset=12), lineno=35, col_offset=0), Assign([Name('DataHandle', Store(), lineno=36, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=36, col_offset=13), [Str('DataHandle', lineno=36, col_offset=31), Str('ResObj', lineno=36, col_offset=45)], [], None, None, lineno=36, col_offset=13), lineno=36, col_offset=0), Assign([Name('Handle', Store(), lineno=37, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=37, col_offset=9), [Str('Handle', lineno=37, col_offset=27), Str('ResObj', lineno=37, col_offset=37)], [], None, None, lineno=37, col_offset=9), lineno=37, col_offset=0), Assign([Name('CGrafPtr', Store(), lineno=38, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=38, col_offset=11), [Str('CGrafPtr', lineno=38, col_offset=29), Str('GrafObj', lineno=38, col_offset=41)], [], None, None, lineno=38, col_offset=11), lineno=38, col_offset=0), Assign([Name('EventModifiers', Store(), lineno=39, col_offset=0)], Call(Name('Type', Load(), lineno=39, col_offset=17), [Str('EventModifiers', lineno=39, col_offset=22), Str('H', lineno=39, col_offset=40)], [], None, None, lineno=39, col_offset=17), lineno=39, col_offset=0), Assign([Name('includestuff', Store(), lineno=41, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=41, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\n#ifdef USE_TOOLBOX_OBJECT_GLUE\nextern PyObject *_ListObj_New(ListHandle);\nextern int _ListObj_Convert(PyObject *, ListHandle *);\n\n#define ListObj_New _ListObj_New\n#define ListObj_Convert _ListObj_Convert\n#endif\n\n#define as_List(x) ((ListHandle)x)\n#define as_Resource(lh) ((Handle)lh)\n\nstatic ListDefUPP myListDefFunctionUPP;\n\n', lineno=57, col_offset=-1), lineno=41, col_offset=15), lineno=41, col_offset=0), Assign([Name('initstuff', Store(), lineno=59, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=59, col_offset=12), Add(), Str('\nmyListDefFunctionUPP = NewListDefUPP((ListDefProcPtr)myListDefFunction);\n\nPyMac_INIT_TOOLBOX_OBJECT_NEW(ListHandle, ListObj_New);\nPyMac_INIT_TOOLBOX_OBJECT_CONVERT(ListHandle, ListObj_Convert);\n', lineno=64, col_offset=-1), lineno=59, col_offset=12), lineno=59, col_offset=0), ClassDef('ListMethodGenerator', [Name('MethodGenerator', Load(), lineno=66, col_offset=26)], [Expr(Str('Similar to MethodGenerator, but has self as last argument', lineno=67, col_offset=4), lineno=67, col_offset=4), FunctionDef('parseArgumentList', arguments([Name('self', Param(), lineno=69, col_offset=26), Name('args', Param(), lineno=69, col_offset=32)], None, None, []), [Assign([Tuple([Name('args', Store(), lineno=70, col_offset=8), Name('a0', Store(), lineno=70, col_offset=14)], Store(), lineno=70, col_offset=8)], Tuple([Subscript(Name('args', Load(), lineno=70, col_offset=19), Slice(None, Num(-1, lineno=70, col_offset=26), None), Load(), lineno=70, col_offset=19), Subscript(Name('args', Load(), lineno=70, col_offset=30), Index(Num(-1, lineno=70, col_offset=36)), Load(), lineno=70, col_offset=30)], Load(), lineno=70, col_offset=19), lineno=70, col_offset=8), Assign([Tuple([Name('t0', Store(), lineno=71, col_offset=8), Name('n0', Store(), lineno=71, col_offset=12), Name('m0', Store(), lineno=71, col_offset=16)], Store(), lineno=71, col_offset=8)], Name('a0', Load(), lineno=71, col_offset=21), lineno=71, col_offset=8), If(Compare(Name('m0', Load(), lineno=72, col_offset=11), [NotEq()], [Name('InMode', Load(), lineno=72, col_offset=17)], lineno=72, col_offset=11), [Raise(Name('ValueError', Load(), lineno=73, col_offset=18), Str("method's 'self' must be 'InMode'", lineno=73, col_offset=30), None, lineno=73, col_offset=12)], [], lineno=72, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=74, col_offset=8), 'itself', Store(), lineno=74, col_offset=8)], Call(Name('Variable', Load(), lineno=74, col_offset=22), [Name('t0', Load(), lineno=74, col_offset=31), Str('_self->ob_itself', lineno=74, col_offset=35), Name('SelfMode', Load(), lineno=74, col_offset=55)], [], None, None, lineno=74, col_offset=22), lineno=74, col_offset=8), Expr(Call(Attribute(Name('FunctionGenerator', Load(), lineno=75, col_offset=8), 'parseArgumentList', Load(), lineno=75, col_offset=8), [Name('self', Load(), lineno=75, col_offset=44), Name('args', Load(), lineno=75, col_offset=50)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'argumentList', Load(), lineno=76, col_offset=8), 'append', Load(), lineno=76, col_offset=8), [Attribute(Name('self', Load(), lineno=76, col_offset=33), 'itself', Load(), lineno=76, col_offset=33)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8)], [], lineno=69, col_offset=4)], [], lineno=66, col_offset=0), ClassDef('MyObjectDefinition', [Name('PEP253Mixin', Load(), lineno=78, col_offset=25), Name('GlobalObjectDefinition', Load(), lineno=78, col_offset=38)], [Assign([Name('getsetlist', Store(), lineno=80, col_offset=4)], List([Tuple([Str('listFlags', lineno=81, col_offset=12), Str('return Py_BuildValue("l", (long)GetListFlags(self->ob_itself) & 0xff);', lineno=82, col_offset=12), Str('if (!PyArg_Parse(v, "B", &(*self->ob_itself)->listFlags)) return -1;', lineno=83, col_offset=12), Name('None', Load(), lineno=84, col_offset=12)], Load(), lineno=81, col_offset=12), Tuple([Str('selFlags', lineno=86, col_offset=12), Str('return Py_BuildValue("l", (long)GetListSelectionFlags(self->ob_itself) & 0xff);', lineno=87, col_offset=12), Str('if (!PyArg_Parse(v, "B", &(*self->ob_itself)->selFlags)) return -1;', lineno=88, col_offset=12), Name('None', Load(), lineno=89, col_offset=12)], Load(), lineno=86, col_offset=12), Tuple([Str('cellSize', lineno=91, col_offset=12), Str('return Py_BuildValue("O&", PyMac_BuildPoint, (*self->ob_itself)->cellSize);', lineno=92, col_offset=12), Str('if (!PyArg_Parse(v, "O&", PyMac_GetPoint, &(*self->ob_itself)->cellSize)) return -1;', lineno=93, col_offset=12), Name('None', Load(), lineno=94, col_offset=12)], Load(), lineno=91, col_offset=12)], Load(), lineno=80, col_offset=17), lineno=80, col_offset=4), FunctionDef('outputStructMembers', arguments([Name('self', Param(), lineno=97, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=98, col_offset=8), 'outputStructMembers', Load(), lineno=98, col_offset=8), [Name('self', Load(), lineno=98, col_offset=45)], [], None, None, lineno=98, col_offset=8), lineno=98, col_offset=8), Expr(Call(Name('Output', Load(), lineno=99, col_offset=8), [Str('PyObject *ob_ldef_func;', lineno=99, col_offset=15)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Name('Output', Load(), lineno=100, col_offset=8), [Str('int ob_must_be_disposed;', lineno=100, col_offset=15)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=102, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=103, col_offset=8), [Str('if (itself == NULL) {\n                                PyErr_SetString(List_Error,"Cannot create null List");\n                                return NULL;\n                        }', lineno=106, col_offset=-1)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=108, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('ObjectDefinition', Load(), lineno=109, col_offset=8), 'outputInitStructMembers', Load(), lineno=109, col_offset=8), [Name('self', Load(), lineno=109, col_offset=49)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8), Expr(Call(Name('Output', Load(), lineno=110, col_offset=8), [Str('it->ob_ldef_func = NULL;', lineno=110, col_offset=15)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8), Expr(Call(Name('Output', Load(), lineno=111, col_offset=8), [Str('it->ob_must_be_disposed = 1;', lineno=111, col_offset=15)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8), Expr(Call(Name('Output', Load(), lineno=112, col_offset=8), [Str('SetListRefCon(itself, (long)it);', lineno=112, col_offset=15)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8)], [], lineno=108, col_offset=4), FunctionDef('outputFreeIt', arguments([Name('self', Param(), lineno=114, col_offset=21), Name('itselfname', Param(), lineno=114, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=115, col_offset=8), [Str('Py_XDECREF(self->ob_ldef_func);', lineno=115, col_offset=15)], [], None, None, lineno=115, col_offset=8), lineno=115, col_offset=8), Expr(Call(Name('Output', Load(), lineno=116, col_offset=8), [Str('self->ob_ldef_func = NULL;', lineno=116, col_offset=15)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8), Expr(Call(Name('Output', Load(), lineno=117, col_offset=8), [Str('SetListRefCon(self->ob_itself, (long)0);', lineno=117, col_offset=15)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8), Expr(Call(Name('Output', Load(), lineno=118, col_offset=8), [Str('if (self->ob_must_be_disposed && %s) LDispose(%s);', lineno=118, col_offset=15), Name('itselfname', Load(), lineno=118, col_offset=69), Name('itselfname', Load(), lineno=118, col_offset=81)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8)], [], lineno=114, col_offset=4)], [], lineno=78, col_offset=0), Assign([Name('finalstuff', Store(), lineno=122, col_offset=0)], BinOp(Name('finalstuff', Load(), lineno=122, col_offset=13), Add(), Str('\nstatic void myListDefFunction(SInt16 message,\n                       Boolean selected,\n                       Rect *cellRect,\n                       Cell theCell,\n                       SInt16 dataOffset,\n                       SInt16 dataLen,\n                       ListHandle theList)\n{\n        PyObject *listDefFunc, *args, *rv=NULL;\n        ListObject *self;\n\n        self = (ListObject*)GetListRefCon(theList);\n        if (self == NULL || self->ob_itself != theList)\n                return;  /* nothing we can do */\n        listDefFunc = self->ob_ldef_func;\n        if (listDefFunc == NULL)\n                return;  /* nothing we can do */\n        args = Py_BuildValue("hbO&O&hhO", message,\n                                          selected,\n                                          PyMac_BuildRect, cellRect,\n                                          PyMac_BuildPoint, theCell,\n                                          dataOffset,\n                                          dataLen,\n                                          self);\n        if (args != NULL) {\n                rv = PyEval_CallObject(listDefFunc, args);\n                Py_DECREF(args);\n        }\n        if (rv == NULL) {\n                PySys_WriteStderr("error in list definition callback:\\n");\n                PyErr_Print();\n        } else {\n                Py_DECREF(rv);\n        }\n}\n', lineno=158, col_offset=-1), lineno=122, col_offset=13), lineno=122, col_offset=0), Assign([Name('module', Store(), lineno=161, col_offset=0)], Call(Name('MacModule', Load(), lineno=161, col_offset=9), [Name('MODNAME', Load(), lineno=161, col_offset=19), Name('MODPREFIX', Load(), lineno=161, col_offset=28), Name('includestuff', Load(), lineno=161, col_offset=39), Name('finalstuff', Load(), lineno=161, col_offset=53), Name('initstuff', Load(), lineno=161, col_offset=65)], [], None, None, lineno=161, col_offset=9), lineno=161, col_offset=0), Assign([Name('object', Store(), lineno=162, col_offset=0)], Call(Name('MyObjectDefinition', Load(), lineno=162, col_offset=9), [Name('OBJECTNAME', Load(), lineno=162, col_offset=28), Name('OBJECTPREFIX', Load(), lineno=162, col_offset=40), Name('OBJECTTYPE', Load(), lineno=162, col_offset=54)], [], None, None, lineno=162, col_offset=9), lineno=162, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=163, col_offset=0), 'addobject', Load(), lineno=163, col_offset=0), [Name('object', Load(), lineno=163, col_offset=17)], [], None, None, lineno=163, col_offset=0), lineno=163, col_offset=0), Assign([Name('Function', Store(), lineno=166, col_offset=0)], Name('FunctionGenerator', Load(), lineno=166, col_offset=11), lineno=166, col_offset=0), Assign([Name('Method', Store(), lineno=167, col_offset=0)], Name('ListMethodGenerator', Load(), lineno=167, col_offset=9), lineno=167, col_offset=0), Assign([Name('functions', Store(), lineno=170, col_offset=0)], List([], Load(), lineno=170, col_offset=12), lineno=170, col_offset=0), Assign([Name('methods', Store(), lineno=171, col_offset=0)], List([], Load(), lineno=171, col_offset=10), lineno=171, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=172, col_offset=0), [Name('INPUTFILE', Load(), lineno=172, col_offset=9)], [], None, None, lineno=172, col_offset=0), lineno=172, col_offset=0), Assign([Name('as_List_body', Store(), lineno=176, col_offset=0)], Str('\nHandle h;\nListObject *l;\nif (!PyArg_ParseTuple(_args, "O&", ResObj_Convert, &h))\n        return NULL;\nl = (ListObject *)ListObj_New(as_List(h));\nl->ob_must_be_disposed = 0;\n_res = Py_BuildValue("O", l);\nreturn _res;\n', lineno=185, col_offset=-1), lineno=176, col_offset=0), Assign([Name('f', Store(), lineno=186, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=186, col_offset=4), [Str('as_List', lineno=186, col_offset=20), Name('as_List_body', Load(), lineno=186, col_offset=31)], [], None, None, lineno=186, col_offset=4), lineno=186, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=187, col_offset=0), 'docstring', Store(), lineno=187, col_offset=0)], Lambda(arguments([], None, None, []), Str('(Resource)->List.\nReturns List object (which is not auto-freed!)', lineno=187, col_offset=22), lineno=187, col_offset=14), lineno=187, col_offset=0), Expr(Call(Attribute(Name('functions', Load(), lineno=188, col_offset=0), 'append', Load(), lineno=188, col_offset=0), [Name('f', Load(), lineno=188, col_offset=17)], [], None, None, lineno=188, col_offset=0), lineno=188, col_offset=0), Assign([Name('f', Store(), lineno=190, col_offset=0)], Call(Name('Method', Load(), lineno=190, col_offset=4), [Name('Handle', Load(), lineno=190, col_offset=11), Str('as_Resource', lineno=190, col_offset=19), Tuple([Name('ListHandle', Load(), lineno=190, col_offset=35), Str('lh', lineno=190, col_offset=47), Name('InMode', Load(), lineno=190, col_offset=53)], Load(), lineno=190, col_offset=35)], [], None, None, lineno=190, col_offset=4), lineno=190, col_offset=0), Expr(Call(Attribute(Name('methods', Load(), lineno=191, col_offset=0), 'append', Load(), lineno=191, col_offset=0), [Name('f', Load(), lineno=191, col_offset=15)], [], None, None, lineno=191, col_offset=0), lineno=191, col_offset=0), Assign([Name('CreateCustomList_body', Store(), lineno=194, col_offset=0)], Str('Rect rView;\nRect dataBounds;\nPoint cellSize;\n\nPyObject *listDefFunc;\nListDefSpec theSpec;\nWindowPtr theWindow;\nBoolean drawIt;\nBoolean hasGrow;\nBoolean scrollHoriz;\nBoolean scrollVert;\nListHandle outList;\n\nif (!PyArg_ParseTuple(_args, "O&O&O&(iO)O&bbbb",\n                      PyMac_GetRect, &rView,\n                      PyMac_GetRect, &dataBounds,\n                      PyMac_GetPoint, &cellSize,\n                      &theSpec.defType, &listDefFunc,\n                      WinObj_Convert, &theWindow,\n                      &drawIt,\n                      &hasGrow,\n                      &scrollHoriz,\n                      &scrollVert))\n        return NULL;\n\n\n/* Carbon applications use the CreateCustomList API */\ntheSpec.u.userProc = myListDefFunctionUPP;\nCreateCustomList(&rView,\n                 &dataBounds,\n                 cellSize,\n                 &theSpec,\n                 theWindow,\n                 drawIt,\n                 hasGrow,\n                 scrollHoriz,\n                 scrollVert,\n                 &outList);\n\n\n_res = ListObj_New(outList);\nif (_res == NULL)\n        return NULL;\nPy_INCREF(listDefFunc);\n((ListObject*)_res)->ob_ldef_func = listDefFunc;\nreturn _res;', lineno=241, col_offset=-1), lineno=194, col_offset=0), Assign([Name('f', Store(), lineno=243, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=243, col_offset=4), [Str('CreateCustomList', lineno=243, col_offset=20), Name('CreateCustomList_body', Load(), lineno=243, col_offset=40)], [], None, None, lineno=243, col_offset=4), lineno=243, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=244, col_offset=0), 'docstring', Store(), lineno=244, col_offset=0)], Lambda(arguments([], None, None, []), Str('(Rect rView, Rect dataBounds, Point cellSize, ListDefSpec theSpec, WindowPtr theWindow, Boolean drawIt, Boolean hasGrow, Boolean scrollHoriz, Boolean scrollVert) -> (ListHandle outList)', lineno=244, col_offset=22), lineno=244, col_offset=14), lineno=244, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=245, col_offset=0), 'add', Load(), lineno=245, col_offset=0), [Name('f', Load(), lineno=245, col_offset=11)], [], None, None, lineno=245, col_offset=0), lineno=245, col_offset=0), For(Name('f', Store(), lineno=249, col_offset=4), Name('functions', Load(), lineno=249, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=249, col_offset=20), 'add', Load(), lineno=249, col_offset=20), [Name('f', Load(), lineno=249, col_offset=31)], [], None, None, lineno=249, col_offset=20), lineno=249, col_offset=20)], [], lineno=249, col_offset=0), For(Name('f', Store(), lineno=250, col_offset=4), Name('methods', Load(), lineno=250, col_offset=9), [Expr(Call(Attribute(Name('object', Load(), lineno=250, col_offset=18), 'add', Load(), lineno=250, col_offset=18), [Name('f', Load(), lineno=250, col_offset=29)], [], None, None, lineno=250, col_offset=18), lineno=250, col_offset=18)], [], lineno=250, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=254, col_offset=0), [Name('OUTPUTFILE', Load(), lineno=254, col_offset=18)], [], None, None, lineno=254, col_offset=0), lineno=254, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=255, col_offset=0), 'generate', Load(), lineno=255, col_offset=0), [], [], None, None, lineno=255, col_offset=0), lineno=255, col_offset=0)])
