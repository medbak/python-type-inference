Module([Expr(Str('Fixer for generator.throw(E, V, T).\n\ng.throw(E)       -> g.throw(E)\ng.throw(E, V)    -> g.throw(E(V))\ng.throw(E, V, T) -> g.throw(E(V).with_traceback(T))\n\ng.throw("foo"[, V[, T]]) will warn about string exceptions.', lineno=7, col_offset=-1), lineno=7, col_offset=-1), ImportFrom(None, [alias('pytree', None)], 2, lineno=11, col_offset=0), ImportFrom('pgen2', [alias('token', None)], 2, lineno=12, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=13, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('Call', None), alias('ArgList', None), alias('Attr', None), alias('is_tuple', None)], 2, lineno=14, col_offset=0), ClassDef('FixThrow', [Attribute(Name('fixer_base', Load(), lineno=16, col_offset=15), 'BaseFix', Load(), lineno=16, col_offset=15)], [Assign([Name('BM_compatible', Store(), lineno=17, col_offset=4)], Name('True', Load(), lineno=17, col_offset=20), lineno=17, col_offset=4), Assign([Name('PATTERN', Store(), lineno=18, col_offset=4)], Str("\n    power< any trailer< '.' 'throw' >\n           trailer< '(' args=arglist< exc=any ',' val=any [',' tb=any] > ')' >\n    >\n    |\n    power< any trailer< '.' 'throw' > trailer< '(' exc=any ')' > >\n    ", lineno=24, col_offset=-1), lineno=18, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=26, col_offset=18), Name('node', Param(), lineno=26, col_offset=24), Name('results', Param(), lineno=26, col_offset=30)], None, None, []), [Assign([Name('syms', Store(), lineno=27, col_offset=8)], Attribute(Name('self', Load(), lineno=27, col_offset=15), 'syms', Load(), lineno=27, col_offset=15), lineno=27, col_offset=8), Assign([Name('exc', Store(), lineno=29, col_offset=8)], Call(Attribute(Subscript(Name('results', Load(), lineno=29, col_offset=14), Index(Str('exc', lineno=29, col_offset=22)), Load(), lineno=29, col_offset=14), 'clone', Load(), lineno=29, col_offset=14), [], [], None, None, lineno=29, col_offset=14), lineno=29, col_offset=8), If(Compare(Attribute(Name('exc', Load(), lineno=30, col_offset=11), 'type', Load(), lineno=30, col_offset=11), [Is()], [Attribute(Name('token', Load(), lineno=30, col_offset=23), 'STRING', Load(), lineno=30, col_offset=23)], lineno=30, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=31, col_offset=12), 'cannot_convert', Load(), lineno=31, col_offset=12), [Name('node', Load(), lineno=31, col_offset=32), Str('Python 3 does not support string exceptions', lineno=31, col_offset=38)], [], None, None, lineno=31, col_offset=12), lineno=31, col_offset=12), Return(None, lineno=32, col_offset=12)], [], lineno=30, col_offset=8), Assign([Name('val', Store(), lineno=35, col_offset=8)], Call(Attribute(Name('results', Load(), lineno=35, col_offset=14), 'get', Load(), lineno=35, col_offset=14), [Str(u'val', lineno=35, col_offset=26)], [], None, None, lineno=35, col_offset=14), lineno=35, col_offset=8), If(Compare(Name('val', Load(), lineno=36, col_offset=11), [Is()], [Name('None', Load(), lineno=36, col_offset=18)], lineno=36, col_offset=11), [Return(None, lineno=37, col_offset=12)], [], lineno=36, col_offset=8), Assign([Name('val', Store(), lineno=39, col_offset=8)], Call(Attribute(Name('val', Load(), lineno=39, col_offset=14), 'clone', Load(), lineno=39, col_offset=14), [], [], None, None, lineno=39, col_offset=14), lineno=39, col_offset=8), If(Call(Name('is_tuple', Load(), lineno=40, col_offset=11), [Name('val', Load(), lineno=40, col_offset=20)], [], None, None, lineno=40, col_offset=11), [Assign([Name('args', Store(), lineno=41, col_offset=12)], ListComp(Call(Attribute(Name('c', Load(), lineno=41, col_offset=20), 'clone', Load(), lineno=41, col_offset=20), [], [], None, None, lineno=41, col_offset=20), [comprehension(Name('c', Store(), lineno=41, col_offset=34), Subscript(Attribute(Name('val', Load(), lineno=41, col_offset=39), 'children', Load(), lineno=41, col_offset=39), Slice(Num(1, lineno=41, col_offset=52), Num(-1, lineno=41, col_offset=55), None), Load(), lineno=41, col_offset=39), [])], lineno=41, col_offset=20), lineno=41, col_offset=12)], [Assign([Attribute(Name('val', Load(), lineno=43, col_offset=12), 'prefix', Store(), lineno=43, col_offset=12)], Str(u'', lineno=43, col_offset=25), lineno=43, col_offset=12), Assign([Name('args', Store(), lineno=44, col_offset=12)], List([Name('val', Load(), lineno=44, col_offset=20)], Load(), lineno=44, col_offset=19), lineno=44, col_offset=12)], lineno=40, col_offset=8), Assign([Name('throw_args', Store(), lineno=46, col_offset=8)], Subscript(Name('results', Load(), lineno=46, col_offset=21), Index(Str('args', lineno=46, col_offset=29)), Load(), lineno=46, col_offset=21), lineno=46, col_offset=8), If(Compare(Str('tb', lineno=48, col_offset=11), [In()], [Name('results', Load(), lineno=48, col_offset=19)], lineno=48, col_offset=11), [Assign([Name('tb', Store(), lineno=49, col_offset=12)], Call(Attribute(Subscript(Name('results', Load(), lineno=49, col_offset=17), Index(Str('tb', lineno=49, col_offset=25)), Load(), lineno=49, col_offset=17), 'clone', Load(), lineno=49, col_offset=17), [], [], None, None, lineno=49, col_offset=17), lineno=49, col_offset=12), Assign([Attribute(Name('tb', Load(), lineno=50, col_offset=12), 'prefix', Store(), lineno=50, col_offset=12)], Str(u'', lineno=50, col_offset=24), lineno=50, col_offset=12), Assign([Name('e', Store(), lineno=52, col_offset=12)], Call(Name('Call', Load(), lineno=52, col_offset=16), [Name('exc', Load(), lineno=52, col_offset=21), Name('args', Load(), lineno=52, col_offset=26)], [], None, None, lineno=52, col_offset=16), lineno=52, col_offset=12), Assign([Name('with_tb', Store(), lineno=53, col_offset=12)], BinOp(Call(Name('Attr', Load(), lineno=53, col_offset=22), [Name('e', Load(), lineno=53, col_offset=27), Call(Name('Name', Load(), lineno=53, col_offset=30), [Str(u'with_traceback', lineno=53, col_offset=35)], [], None, None, lineno=53, col_offset=30)], [], None, None, lineno=53, col_offset=22), Add(), List([Call(Name('ArgList', Load(), lineno=53, col_offset=58), [List([Name('tb', Load(), lineno=53, col_offset=67)], Load(), lineno=53, col_offset=66)], [], None, None, lineno=53, col_offset=58)], Load(), lineno=53, col_offset=57), lineno=53, col_offset=22), lineno=53, col_offset=12), Expr(Call(Attribute(Name('throw_args', Load(), lineno=54, col_offset=12), 'replace', Load(), lineno=54, col_offset=12), [Call(Attribute(Name('pytree', Load(), lineno=54, col_offset=31), 'Node', Load(), lineno=54, col_offset=31), [Attribute(Name('syms', Load(), lineno=54, col_offset=43), 'power', Load(), lineno=54, col_offset=43), Name('with_tb', Load(), lineno=54, col_offset=55)], [], None, None, lineno=54, col_offset=31)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=12)], [Expr(Call(Attribute(Name('throw_args', Load(), lineno=56, col_offset=12), 'replace', Load(), lineno=56, col_offset=12), [Call(Name('Call', Load(), lineno=56, col_offset=31), [Name('exc', Load(), lineno=56, col_offset=36), Name('args', Load(), lineno=56, col_offset=41)], [], None, None, lineno=56, col_offset=31)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=12)], lineno=48, col_offset=8)], [], lineno=26, col_offset=4)], [], lineno=16, col_offset=0)])
