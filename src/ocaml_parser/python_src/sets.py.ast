Module([Expr(Str("Classes to represent arbitrary sets (including sets of sets).\n\nThis module implements sets using dictionaries whose values are\nignored.  The usual operations (union, intersection, deletion, etc.)\nare provided as both methods and operators.\n\nImportant: sets are not sequences!  While they support 'x in s',\n'len(s)', and 'for x in s', none of those operations are unique for\nsequences; for example, mappings support all three as well.  The\ncharacteristic operation for sequences is subscripting with small\nintegers: s[i], for i in range(len(s)).  Sets don't support\nsubscripting at all.  Also, sequences allow multiple occurrences and\ntheir elements have a definite order; sets on the other hand don't\nrecord multiple occurrences and don't remember the order of element\ninsertion (which is why they don't support s[i]).\n\nThe following classes are provided:\n\nBaseSet -- All the operations common to both mutable and immutable\n    sets. This is an abstract class, not meant to be directly\n    instantiated.\n\nSet -- Mutable sets, subclass of BaseSet; not hashable.\n\nImmutableSet -- Immutable sets, subclass of BaseSet; hashable.\n    An iterable argument is mandatory to create an ImmutableSet.\n\n_TemporarilyImmutableSet -- A wrapper around a Set, hashable,\n    giving the same hash value as the immutable set equivalent\n    would have.  Do not use this class directly.\n\nOnly hashable objects can be added to a Set. In particular, you cannot\nreally add a Set as an element to another Set; if you try, what is\nactually added is an ImmutableSet built from it (it compares equal to\nthe one you tried adding).\n\nWhen you ask if `x in y' where x is a Set and y is a Set or\nImmutableSet, x is wrapped into a _TemporarilyImmutableSet z, and\nwhat's tested is actually `z in y'.\n\n", lineno=41, col_offset=-1), lineno=41, col_offset=-1), ImportFrom('itertools', [alias('ifilter', None), alias('ifilterfalse', None)], 0, lineno=57, col_offset=0), Assign([Name('__all__', Store(), lineno=59, col_offset=0)], List([Str('BaseSet', lineno=59, col_offset=11), Str('Set', lineno=59, col_offset=22), Str('ImmutableSet', lineno=59, col_offset=29)], Load(), lineno=59, col_offset=10), lineno=59, col_offset=0), Import([alias('warnings', None)], lineno=61, col_offset=0), Expr(Call(Attribute(Name('warnings', Load(), lineno=62, col_offset=0), 'warn', Load(), lineno=62, col_offset=0), [Str('the sets module is deprecated', lineno=62, col_offset=14), Name('DeprecationWarning', Load(), lineno=62, col_offset=47)], [keyword('stacklevel', Num(2, lineno=63, col_offset=27))], None, None, lineno=62, col_offset=0), lineno=62, col_offset=0), ClassDef('BaseSet', [Name('object', Load(), lineno=65, col_offset=14)], [Expr(Str('Common base class for mutable and immutable sets.', lineno=66, col_offset=4), lineno=66, col_offset=4), Assign([Name('__slots__', Store(), lineno=68, col_offset=4)], List([Str('_data', lineno=68, col_offset=17)], Load(), lineno=68, col_offset=16), lineno=68, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=72, col_offset=17)], None, None, []), [Expr(Str('This is an abstract class.', lineno=73, col_offset=8), lineno=73, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=75, col_offset=11), '__class__', Load(), lineno=75, col_offset=11), [Is()], [Name('BaseSet', Load(), lineno=75, col_offset=29)], lineno=75, col_offset=11), [Raise(Name('TypeError', Load(), lineno=76, col_offset=18), Str('BaseSet is an abstract class.  Use Set or ImmutableSet.', lineno=76, col_offset=30), None, lineno=76, col_offset=12)], [], lineno=75, col_offset=8)], [], lineno=72, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=81, col_offset=16)], None, None, []), [Expr(Str('Return the number of elements of a set.', lineno=82, col_offset=8), lineno=82, col_offset=8), Return(Call(Name('len', Load(), lineno=83, col_offset=15), [Attribute(Name('self', Load(), lineno=83, col_offset=19), '_data', Load(), lineno=83, col_offset=19)], [], None, None, lineno=83, col_offset=15), lineno=83, col_offset=8)], [], lineno=81, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=85, col_offset=17)], None, None, []), [Expr(Str("Return string representation of a set.\n\n        This looks like 'Set([<list of elements>])'.\n        ", lineno=89, col_offset=-1), lineno=89, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=90, col_offset=15), '_repr', Load(), lineno=90, col_offset=15), [], [], None, None, lineno=90, col_offset=15), lineno=90, col_offset=8)], [], lineno=85, col_offset=4), Assign([Name('__str__', Store(), lineno=93, col_offset=4)], Name('__repr__', Load(), lineno=93, col_offset=14), lineno=93, col_offset=4), FunctionDef('_repr', arguments([Name('self', Param(), lineno=95, col_offset=14), Name('sorted', Param(), lineno=95, col_offset=20)], None, None, [Name('False', Load(), lineno=95, col_offset=27)]), [Assign([Name('elements', Store(), lineno=96, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=96, col_offset=19), '_data', Load(), lineno=96, col_offset=19), 'keys', Load(), lineno=96, col_offset=19), [], [], None, None, lineno=96, col_offset=19), lineno=96, col_offset=8), If(Name('sorted', Load(), lineno=97, col_offset=11), [Expr(Call(Attribute(Name('elements', Load(), lineno=98, col_offset=12), 'sort', Load(), lineno=98, col_offset=12), [], [], None, None, lineno=98, col_offset=12), lineno=98, col_offset=12)], [], lineno=97, col_offset=8), Return(BinOp(Str('%s(%r)', lineno=99, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=99, col_offset=27), '__class__', Load(), lineno=99, col_offset=27), '__name__', Load(), lineno=99, col_offset=27), Name('elements', Load(), lineno=99, col_offset=52)], Load(), lineno=99, col_offset=27), lineno=99, col_offset=15), lineno=99, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=101, col_offset=17)], None, None, []), [Expr(Str('Return an iterator over the elements or a set.\n\n        This is the keys iterator for the underlying dict.\n        ', lineno=105, col_offset=-1), lineno=105, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=106, col_offset=15), '_data', Load(), lineno=106, col_offset=15), 'iterkeys', Load(), lineno=106, col_offset=15), [], [], None, None, lineno=106, col_offset=15), lineno=106, col_offset=8)], [], lineno=101, col_offset=4), FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=113, col_offset=16), Name('other', Param(), lineno=113, col_offset=22)], None, None, []), [Raise(Name('TypeError', Load(), lineno=114, col_offset=14), Str("can't compare sets using cmp()", lineno=114, col_offset=25), None, lineno=114, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=131, col_offset=15), Name('other', Param(), lineno=131, col_offset=21)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=132, col_offset=11), [Name('other', Load(), lineno=132, col_offset=22), Name('BaseSet', Load(), lineno=132, col_offset=29)], [], None, None, lineno=132, col_offset=11), [Return(Compare(Attribute(Name('self', Load(), lineno=133, col_offset=19), '_data', Load(), lineno=133, col_offset=19), [Eq()], [Attribute(Name('other', Load(), lineno=133, col_offset=33), '_data', Load(), lineno=133, col_offset=33)], lineno=133, col_offset=19), lineno=133, col_offset=12)], [Return(Name('False', Load(), lineno=135, col_offset=19), lineno=135, col_offset=12)], lineno=132, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=137, col_offset=15), Name('other', Param(), lineno=137, col_offset=21)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=138, col_offset=11), [Name('other', Load(), lineno=138, col_offset=22), Name('BaseSet', Load(), lineno=138, col_offset=29)], [], None, None, lineno=138, col_offset=11), [Return(Compare(Attribute(Name('self', Load(), lineno=139, col_offset=19), '_data', Load(), lineno=139, col_offset=19), [NotEq()], [Attribute(Name('other', Load(), lineno=139, col_offset=33), '_data', Load(), lineno=139, col_offset=33)], lineno=139, col_offset=19), lineno=139, col_offset=12)], [Return(Name('True', Load(), lineno=141, col_offset=19), lineno=141, col_offset=12)], lineno=138, col_offset=8)], [], lineno=137, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=145, col_offset=13)], None, None, []), [Expr(Str('Return a shallow copy of a set.', lineno=146, col_offset=8), lineno=146, col_offset=8), Assign([Name('result', Store(), lineno=147, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=147, col_offset=17), '__class__', Load(), lineno=147, col_offset=17), [], [], None, None, lineno=147, col_offset=17), lineno=147, col_offset=8), Expr(Call(Attribute(Attribute(Name('result', Load(), lineno=148, col_offset=8), '_data', Load(), lineno=148, col_offset=8), 'update', Load(), lineno=148, col_offset=8), [Attribute(Name('self', Load(), lineno=148, col_offset=28), '_data', Load(), lineno=148, col_offset=28)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Return(Name('result', Load(), lineno=149, col_offset=15), lineno=149, col_offset=8)], [], lineno=145, col_offset=4), Assign([Name('__copy__', Store(), lineno=151, col_offset=4)], Name('copy', Load(), lineno=151, col_offset=15), lineno=151, col_offset=4), FunctionDef('__deepcopy__', arguments([Name('self', Param(), lineno=153, col_offset=21), Name('memo', Param(), lineno=153, col_offset=27)], None, None, []), [Expr(Str('Return a deep copy of a set; used by copy module.', lineno=154, col_offset=8), lineno=154, col_offset=8), ImportFrom('copy', [alias('deepcopy', None)], 0, lineno=160, col_offset=8), Assign([Name('result', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=161, col_offset=17), '__class__', Load(), lineno=161, col_offset=17), [], [], None, None, lineno=161, col_offset=17), lineno=161, col_offset=8), Assign([Subscript(Name('memo', Load(), lineno=162, col_offset=8), Index(Call(Name('id', Load(), lineno=162, col_offset=13), [Name('self', Load(), lineno=162, col_offset=16)], [], None, None, lineno=162, col_offset=13)), Store(), lineno=162, col_offset=8)], Name('result', Load(), lineno=162, col_offset=25), lineno=162, col_offset=8), Assign([Name('data', Store(), lineno=163, col_offset=8)], Attribute(Name('result', Load(), lineno=163, col_offset=15), '_data', Load(), lineno=163, col_offset=15), lineno=163, col_offset=8), Assign([Name('value', Store(), lineno=164, col_offset=8)], Name('True', Load(), lineno=164, col_offset=16), lineno=164, col_offset=8), For(Name('elt', Store(), lineno=165, col_offset=12), Name('self', Load(), lineno=165, col_offset=19), [Assign([Subscript(Name('data', Load(), lineno=166, col_offset=12), Index(Call(Name('deepcopy', Load(), lineno=166, col_offset=17), [Name('elt', Load(), lineno=166, col_offset=26), Name('memo', Load(), lineno=166, col_offset=31)], [], None, None, lineno=166, col_offset=17)), Store(), lineno=166, col_offset=12)], Name('value', Load(), lineno=166, col_offset=40), lineno=166, col_offset=12)], [], lineno=165, col_offset=8), Return(Name('result', Load(), lineno=167, col_offset=15), lineno=167, col_offset=8)], [], lineno=153, col_offset=4), FunctionDef('__or__', arguments([Name('self', Param(), lineno=178, col_offset=15), Name('other', Param(), lineno=178, col_offset=21)], None, None, []), [Expr(Str('Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        ', lineno=182, col_offset=-1), lineno=182, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=183, col_offset=15), [Name('other', Load(), lineno=183, col_offset=26), Name('BaseSet', Load(), lineno=183, col_offset=33)], [], None, None, lineno=183, col_offset=15), lineno=183, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=184, col_offset=19), lineno=184, col_offset=12)], [], lineno=183, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=185, col_offset=15), 'union', Load(), lineno=185, col_offset=15), [Name('other', Load(), lineno=185, col_offset=26)], [], None, None, lineno=185, col_offset=15), lineno=185, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('union', arguments([Name('self', Param(), lineno=187, col_offset=14), Name('other', Param(), lineno=187, col_offset=20)], None, None, []), [Expr(Str('Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        ', lineno=191, col_offset=-1), lineno=191, col_offset=-1), Assign([Name('result', Store(), lineno=192, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=192, col_offset=17), '__class__', Load(), lineno=192, col_offset=17), [Name('self', Load(), lineno=192, col_offset=32)], [], None, None, lineno=192, col_offset=17), lineno=192, col_offset=8), Expr(Call(Attribute(Name('result', Load(), lineno=193, col_offset=8), '_update', Load(), lineno=193, col_offset=8), [Name('other', Load(), lineno=193, col_offset=23)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Return(Name('result', Load(), lineno=194, col_offset=15), lineno=194, col_offset=8)], [], lineno=187, col_offset=4), FunctionDef('__and__', arguments([Name('self', Param(), lineno=196, col_offset=16), Name('other', Param(), lineno=196, col_offset=22)], None, None, []), [Expr(Str('Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        ', lineno=200, col_offset=-1), lineno=200, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=201, col_offset=15), [Name('other', Load(), lineno=201, col_offset=26), Name('BaseSet', Load(), lineno=201, col_offset=33)], [], None, None, lineno=201, col_offset=15), lineno=201, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=202, col_offset=19), lineno=202, col_offset=12)], [], lineno=201, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=203, col_offset=15), 'intersection', Load(), lineno=203, col_offset=15), [Name('other', Load(), lineno=203, col_offset=33)], [], None, None, lineno=203, col_offset=15), lineno=203, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('intersection', arguments([Name('self', Param(), lineno=205, col_offset=21), Name('other', Param(), lineno=205, col_offset=27)], None, None, []), [Expr(Str('Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        ', lineno=209, col_offset=-1), lineno=209, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=210, col_offset=15), [Name('other', Load(), lineno=210, col_offset=26), Name('BaseSet', Load(), lineno=210, col_offset=33)], [], None, None, lineno=210, col_offset=15), lineno=210, col_offset=11), [Assign([Name('other', Store(), lineno=211, col_offset=12)], Call(Name('Set', Load(), lineno=211, col_offset=20), [Name('other', Load(), lineno=211, col_offset=24)], [], None, None, lineno=211, col_offset=20), lineno=211, col_offset=12)], [], lineno=210, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=212, col_offset=11), [Name('self', Load(), lineno=212, col_offset=15)], [], None, None, lineno=212, col_offset=11), [LtE()], [Call(Name('len', Load(), lineno=212, col_offset=24), [Name('other', Load(), lineno=212, col_offset=28)], [], None, None, lineno=212, col_offset=24)], lineno=212, col_offset=11), [Assign([Tuple([Name('little', Store(), lineno=213, col_offset=12), Name('big', Store(), lineno=213, col_offset=20)], Store(), lineno=213, col_offset=12)], Tuple([Name('self', Load(), lineno=213, col_offset=26), Name('other', Load(), lineno=213, col_offset=32)], Load(), lineno=213, col_offset=26), lineno=213, col_offset=12)], [Assign([Tuple([Name('little', Store(), lineno=215, col_offset=12), Name('big', Store(), lineno=215, col_offset=20)], Store(), lineno=215, col_offset=12)], Tuple([Name('other', Load(), lineno=215, col_offset=26), Name('self', Load(), lineno=215, col_offset=33)], Load(), lineno=215, col_offset=26), lineno=215, col_offset=12)], lineno=212, col_offset=8), Assign([Name('common', Store(), lineno=216, col_offset=8)], Call(Name('ifilter', Load(), lineno=216, col_offset=17), [Attribute(Attribute(Name('big', Load(), lineno=216, col_offset=25), '_data', Load(), lineno=216, col_offset=25), '__contains__', Load(), lineno=216, col_offset=25), Name('little', Load(), lineno=216, col_offset=49)], [], None, None, lineno=216, col_offset=17), lineno=216, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=217, col_offset=15), '__class__', Load(), lineno=217, col_offset=15), [Name('common', Load(), lineno=217, col_offset=30)], [], None, None, lineno=217, col_offset=15), lineno=217, col_offset=8)], [], lineno=205, col_offset=4), FunctionDef('__xor__', arguments([Name('self', Param(), lineno=219, col_offset=16), Name('other', Param(), lineno=219, col_offset=22)], None, None, []), [Expr(Str('Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        ', lineno=223, col_offset=-1), lineno=223, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=224, col_offset=15), [Name('other', Load(), lineno=224, col_offset=26), Name('BaseSet', Load(), lineno=224, col_offset=33)], [], None, None, lineno=224, col_offset=15), lineno=224, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=225, col_offset=19), lineno=225, col_offset=12)], [], lineno=224, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=226, col_offset=15), 'symmetric_difference', Load(), lineno=226, col_offset=15), [Name('other', Load(), lineno=226, col_offset=41)], [], None, None, lineno=226, col_offset=15), lineno=226, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('symmetric_difference', arguments([Name('self', Param(), lineno=228, col_offset=29), Name('other', Param(), lineno=228, col_offset=35)], None, None, []), [Expr(Str('Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        ', lineno=232, col_offset=-1), lineno=232, col_offset=-1), Assign([Name('result', Store(), lineno=233, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=233, col_offset=17), '__class__', Load(), lineno=233, col_offset=17), [], [], None, None, lineno=233, col_offset=17), lineno=233, col_offset=8), Assign([Name('data', Store(), lineno=234, col_offset=8)], Attribute(Name('result', Load(), lineno=234, col_offset=15), '_data', Load(), lineno=234, col_offset=15), lineno=234, col_offset=8), Assign([Name('value', Store(), lineno=235, col_offset=8)], Name('True', Load(), lineno=235, col_offset=16), lineno=235, col_offset=8), Assign([Name('selfdata', Store(), lineno=236, col_offset=8)], Attribute(Name('self', Load(), lineno=236, col_offset=19), '_data', Load(), lineno=236, col_offset=19), lineno=236, col_offset=8), TryExcept([Assign([Name('otherdata', Store(), lineno=238, col_offset=12)], Attribute(Name('other', Load(), lineno=238, col_offset=24), '_data', Load(), lineno=238, col_offset=24), lineno=238, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=239, col_offset=15), None, [Assign([Name('otherdata', Store(), lineno=240, col_offset=12)], Attribute(Call(Name('Set', Load(), lineno=240, col_offset=24), [Name('other', Load(), lineno=240, col_offset=28)], [], None, None, lineno=240, col_offset=24), '_data', Load(), lineno=240, col_offset=24), lineno=240, col_offset=12)], lineno=239, col_offset=8)], [], lineno=237, col_offset=8), For(Name('elt', Store(), lineno=241, col_offset=12), Call(Name('ifilterfalse', Load(), lineno=241, col_offset=19), [Attribute(Name('otherdata', Load(), lineno=241, col_offset=32), '__contains__', Load(), lineno=241, col_offset=32), Name('selfdata', Load(), lineno=241, col_offset=56)], [], None, None, lineno=241, col_offset=19), [Assign([Subscript(Name('data', Load(), lineno=242, col_offset=12), Index(Name('elt', Load(), lineno=242, col_offset=17)), Store(), lineno=242, col_offset=12)], Name('value', Load(), lineno=242, col_offset=24), lineno=242, col_offset=12)], [], lineno=241, col_offset=8), For(Name('elt', Store(), lineno=243, col_offset=12), Call(Name('ifilterfalse', Load(), lineno=243, col_offset=19), [Attribute(Name('selfdata', Load(), lineno=243, col_offset=32), '__contains__', Load(), lineno=243, col_offset=32), Name('otherdata', Load(), lineno=243, col_offset=55)], [], None, None, lineno=243, col_offset=19), [Assign([Subscript(Name('data', Load(), lineno=244, col_offset=12), Index(Name('elt', Load(), lineno=244, col_offset=17)), Store(), lineno=244, col_offset=12)], Name('value', Load(), lineno=244, col_offset=24), lineno=244, col_offset=12)], [], lineno=243, col_offset=8), Return(Name('result', Load(), lineno=245, col_offset=15), lineno=245, col_offset=8)], [], lineno=228, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=247, col_offset=17), Name('other', Param(), lineno=247, col_offset=23)], None, None, []), [Expr(Str('Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        ', lineno=251, col_offset=-1), lineno=251, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=252, col_offset=15), [Name('other', Load(), lineno=252, col_offset=26), Name('BaseSet', Load(), lineno=252, col_offset=33)], [], None, None, lineno=252, col_offset=15), lineno=252, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=253, col_offset=19), lineno=253, col_offset=12)], [], lineno=252, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=254, col_offset=15), 'difference', Load(), lineno=254, col_offset=15), [Name('other', Load(), lineno=254, col_offset=31)], [], None, None, lineno=254, col_offset=15), lineno=254, col_offset=8)], [], lineno=247, col_offset=4), FunctionDef('difference', arguments([Name('self', Param(), lineno=256, col_offset=19), Name('other', Param(), lineno=256, col_offset=25)], None, None, []), [Expr(Str('Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        ', lineno=260, col_offset=-1), lineno=260, col_offset=-1), Assign([Name('result', Store(), lineno=261, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=261, col_offset=17), '__class__', Load(), lineno=261, col_offset=17), [], [], None, None, lineno=261, col_offset=17), lineno=261, col_offset=8), Assign([Name('data', Store(), lineno=262, col_offset=8)], Attribute(Name('result', Load(), lineno=262, col_offset=15), '_data', Load(), lineno=262, col_offset=15), lineno=262, col_offset=8), TryExcept([Assign([Name('otherdata', Store(), lineno=264, col_offset=12)], Attribute(Name('other', Load(), lineno=264, col_offset=24), '_data', Load(), lineno=264, col_offset=24), lineno=264, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=265, col_offset=15), None, [Assign([Name('otherdata', Store(), lineno=266, col_offset=12)], Attribute(Call(Name('Set', Load(), lineno=266, col_offset=24), [Name('other', Load(), lineno=266, col_offset=28)], [], None, None, lineno=266, col_offset=24), '_data', Load(), lineno=266, col_offset=24), lineno=266, col_offset=12)], lineno=265, col_offset=8)], [], lineno=263, col_offset=8), Assign([Name('value', Store(), lineno=267, col_offset=8)], Name('True', Load(), lineno=267, col_offset=16), lineno=267, col_offset=8), For(Name('elt', Store(), lineno=268, col_offset=12), Call(Name('ifilterfalse', Load(), lineno=268, col_offset=19), [Attribute(Name('otherdata', Load(), lineno=268, col_offset=32), '__contains__', Load(), lineno=268, col_offset=32), Name('self', Load(), lineno=268, col_offset=56)], [], None, None, lineno=268, col_offset=19), [Assign([Subscript(Name('data', Load(), lineno=269, col_offset=12), Index(Name('elt', Load(), lineno=269, col_offset=17)), Store(), lineno=269, col_offset=12)], Name('value', Load(), lineno=269, col_offset=24), lineno=269, col_offset=12)], [], lineno=268, col_offset=8), Return(Name('result', Load(), lineno=270, col_offset=15), lineno=270, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=274, col_offset=21), Name('element', Param(), lineno=274, col_offset=27)], None, None, []), [Expr(Str("Report whether an element is a member of a set.\n\n        (Called in response to the expression `element in self'.)\n        ", lineno=278, col_offset=-1), lineno=278, col_offset=-1), TryExcept([Return(Compare(Name('element', Load(), lineno=280, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=280, col_offset=30), '_data', Load(), lineno=280, col_offset=30)], lineno=280, col_offset=19), lineno=280, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=281, col_offset=15), None, [Assign([Name('transform', Store(), lineno=282, col_offset=12)], Call(Name('getattr', Load(), lineno=282, col_offset=24), [Name('element', Load(), lineno=282, col_offset=32), Str('__as_temporarily_immutable__', lineno=282, col_offset=41), Name('None', Load(), lineno=282, col_offset=73)], [], None, None, lineno=282, col_offset=24), lineno=282, col_offset=12), If(Compare(Name('transform', Load(), lineno=283, col_offset=15), [Is()], [Name('None', Load(), lineno=283, col_offset=28)], lineno=283, col_offset=15), [Raise(None, None, None, lineno=284, col_offset=16)], [], lineno=283, col_offset=12), Return(Compare(Call(Name('transform', Load(), lineno=285, col_offset=19), [], [], None, None, lineno=285, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=285, col_offset=34), '_data', Load(), lineno=285, col_offset=34)], lineno=285, col_offset=19), lineno=285, col_offset=12)], lineno=281, col_offset=8)], [], lineno=279, col_offset=8)], [], lineno=274, col_offset=4), FunctionDef('issubset', arguments([Name('self', Param(), lineno=289, col_offset=17), Name('other', Param(), lineno=289, col_offset=23)], None, None, []), [Expr(Str('Report whether another set contains this set.', lineno=290, col_offset=8), lineno=290, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=291, col_offset=8), '_binary_sanity_check', Load(), lineno=291, col_offset=8), [Name('other', Load(), lineno=291, col_offset=34)], [], None, None, lineno=291, col_offset=8), lineno=291, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=292, col_offset=11), [Name('self', Load(), lineno=292, col_offset=15)], [], None, None, lineno=292, col_offset=11), [Gt()], [Call(Name('len', Load(), lineno=292, col_offset=23), [Name('other', Load(), lineno=292, col_offset=27)], [], None, None, lineno=292, col_offset=23)], lineno=292, col_offset=11), [Return(Name('False', Load(), lineno=293, col_offset=19), lineno=293, col_offset=12)], [], lineno=292, col_offset=8), For(Name('elt', Store(), lineno=294, col_offset=12), Call(Name('ifilterfalse', Load(), lineno=294, col_offset=19), [Attribute(Attribute(Name('other', Load(), lineno=294, col_offset=32), '_data', Load(), lineno=294, col_offset=32), '__contains__', Load(), lineno=294, col_offset=32), Name('self', Load(), lineno=294, col_offset=58)], [], None, None, lineno=294, col_offset=19), [Return(Name('False', Load(), lineno=295, col_offset=19), lineno=295, col_offset=12)], [], lineno=294, col_offset=8), Return(Name('True', Load(), lineno=296, col_offset=15), lineno=296, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('issuperset', arguments([Name('self', Param(), lineno=298, col_offset=19), Name('other', Param(), lineno=298, col_offset=25)], None, None, []), [Expr(Str('Report whether this set contains another set.', lineno=299, col_offset=8), lineno=299, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=300, col_offset=8), '_binary_sanity_check', Load(), lineno=300, col_offset=8), [Name('other', Load(), lineno=300, col_offset=34)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=301, col_offset=11), [Name('self', Load(), lineno=301, col_offset=15)], [], None, None, lineno=301, col_offset=11), [Lt()], [Call(Name('len', Load(), lineno=301, col_offset=23), [Name('other', Load(), lineno=301, col_offset=27)], [], None, None, lineno=301, col_offset=23)], lineno=301, col_offset=11), [Return(Name('False', Load(), lineno=302, col_offset=19), lineno=302, col_offset=12)], [], lineno=301, col_offset=8), For(Name('elt', Store(), lineno=303, col_offset=12), Call(Name('ifilterfalse', Load(), lineno=303, col_offset=19), [Attribute(Attribute(Name('self', Load(), lineno=303, col_offset=32), '_data', Load(), lineno=303, col_offset=32), '__contains__', Load(), lineno=303, col_offset=32), Name('other', Load(), lineno=303, col_offset=57)], [], None, None, lineno=303, col_offset=19), [Return(Name('False', Load(), lineno=304, col_offset=19), lineno=304, col_offset=12)], [], lineno=303, col_offset=8), Return(Name('True', Load(), lineno=305, col_offset=15), lineno=305, col_offset=8)], [], lineno=298, col_offset=4), Assign([Name('__le__', Store(), lineno=308, col_offset=4)], Name('issubset', Load(), lineno=308, col_offset=13), lineno=308, col_offset=4), Assign([Name('__ge__', Store(), lineno=309, col_offset=4)], Name('issuperset', Load(), lineno=309, col_offset=13), lineno=309, col_offset=4), FunctionDef('__lt__', arguments([Name('self', Param(), lineno=311, col_offset=15), Name('other', Param(), lineno=311, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=312, col_offset=8), '_binary_sanity_check', Load(), lineno=312, col_offset=8), [Name('other', Load(), lineno=312, col_offset=34)], [], None, None, lineno=312, col_offset=8), lineno=312, col_offset=8), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=313, col_offset=15), [Name('self', Load(), lineno=313, col_offset=19)], [], None, None, lineno=313, col_offset=15), [Lt()], [Call(Name('len', Load(), lineno=313, col_offset=27), [Name('other', Load(), lineno=313, col_offset=31)], [], None, None, lineno=313, col_offset=27)], lineno=313, col_offset=15), Call(Attribute(Name('self', Load(), lineno=313, col_offset=42), 'issubset', Load(), lineno=313, col_offset=42), [Name('other', Load(), lineno=313, col_offset=56)], [], None, None, lineno=313, col_offset=42)], lineno=313, col_offset=15), lineno=313, col_offset=8)], [], lineno=311, col_offset=4), FunctionDef('__gt__', arguments([Name('self', Param(), lineno=315, col_offset=15), Name('other', Param(), lineno=315, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=316, col_offset=8), '_binary_sanity_check', Load(), lineno=316, col_offset=8), [Name('other', Load(), lineno=316, col_offset=34)], [], None, None, lineno=316, col_offset=8), lineno=316, col_offset=8), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=317, col_offset=15), [Name('self', Load(), lineno=317, col_offset=19)], [], None, None, lineno=317, col_offset=15), [Gt()], [Call(Name('len', Load(), lineno=317, col_offset=27), [Name('other', Load(), lineno=317, col_offset=31)], [], None, None, lineno=317, col_offset=27)], lineno=317, col_offset=15), Call(Attribute(Name('self', Load(), lineno=317, col_offset=42), 'issuperset', Load(), lineno=317, col_offset=42), [Name('other', Load(), lineno=317, col_offset=58)], [], None, None, lineno=317, col_offset=42)], lineno=317, col_offset=15), lineno=317, col_offset=8)], [], lineno=315, col_offset=4), Assign([Name('__hash__', Store(), lineno=320, col_offset=4)], Name('None', Load(), lineno=320, col_offset=15), lineno=320, col_offset=4), FunctionDef('_binary_sanity_check', arguments([Name('self', Param(), lineno=324, col_offset=29), Name('other', Param(), lineno=324, col_offset=35)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=327, col_offset=15), [Name('other', Load(), lineno=327, col_offset=26), Name('BaseSet', Load(), lineno=327, col_offset=33)], [], None, None, lineno=327, col_offset=15), lineno=327, col_offset=11), [Raise(Name('TypeError', Load(), lineno=328, col_offset=18), Str('Binary operation only permitted between sets', lineno=328, col_offset=29), None, lineno=328, col_offset=12)], [], lineno=327, col_offset=8)], [], lineno=324, col_offset=4), FunctionDef('_compute_hash', arguments([Name('self', Param(), lineno=330, col_offset=22)], None, None, []), [Assign([Name('result', Store(), lineno=336, col_offset=8)], Num(0, lineno=336, col_offset=17), lineno=336, col_offset=8), For(Name('elt', Store(), lineno=337, col_offset=12), Name('self', Load(), lineno=337, col_offset=19), [AugAssign(Name('result', Store(), lineno=338, col_offset=12), BitXor(), Call(Name('hash', Load(), lineno=338, col_offset=22), [Name('elt', Load(), lineno=338, col_offset=27)], [], None, None, lineno=338, col_offset=22), lineno=338, col_offset=12)], [], lineno=337, col_offset=8), Return(Name('result', Load(), lineno=339, col_offset=15), lineno=339, col_offset=8)], [], lineno=330, col_offset=4), FunctionDef('_update', arguments([Name('self', Param(), lineno=341, col_offset=16), Name('iterable', Param(), lineno=341, col_offset=22)], None, None, []), [Assign([Name('data', Store(), lineno=343, col_offset=8)], Attribute(Name('self', Load(), lineno=343, col_offset=15), '_data', Load(), lineno=343, col_offset=15), lineno=343, col_offset=8), If(Call(Name('isinstance', Load(), lineno=346, col_offset=11), [Name('iterable', Load(), lineno=346, col_offset=22), Name('BaseSet', Load(), lineno=346, col_offset=32)], [], None, None, lineno=346, col_offset=11), [Expr(Call(Attribute(Name('data', Load(), lineno=347, col_offset=12), 'update', Load(), lineno=347, col_offset=12), [Attribute(Name('iterable', Load(), lineno=347, col_offset=24), '_data', Load(), lineno=347, col_offset=24)], [], None, None, lineno=347, col_offset=12), lineno=347, col_offset=12), Return(None, lineno=348, col_offset=12)], [], lineno=346, col_offset=8), Assign([Name('value', Store(), lineno=350, col_offset=8)], Name('True', Load(), lineno=350, col_offset=16), lineno=350, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=352, col_offset=11), [Name('iterable', Load(), lineno=352, col_offset=16)], [], None, None, lineno=352, col_offset=11), [In()], [Tuple([Name('list', Load(), lineno=352, col_offset=30), Name('tuple', Load(), lineno=352, col_offset=36), Name('xrange', Load(), lineno=352, col_offset=43)], Load(), lineno=352, col_offset=30)], lineno=352, col_offset=11), [Assign([Name('it', Store(), lineno=355, col_offset=12)], Call(Name('iter', Load(), lineno=355, col_offset=17), [Name('iterable', Load(), lineno=355, col_offset=22)], [], None, None, lineno=355, col_offset=17), lineno=355, col_offset=12), While(Name('True', Load(), lineno=356, col_offset=18), [TryExcept([For(Name('element', Store(), lineno=358, col_offset=24), Name('it', Load(), lineno=358, col_offset=35), [Assign([Subscript(Name('data', Load(), lineno=359, col_offset=24), Index(Name('element', Load(), lineno=359, col_offset=29)), Store(), lineno=359, col_offset=24)], Name('value', Load(), lineno=359, col_offset=40), lineno=359, col_offset=24)], [], lineno=358, col_offset=20), Return(None, lineno=360, col_offset=20)], [ExceptHandler(Name('TypeError', Load(), lineno=361, col_offset=23), None, [Assign([Name('transform', Store(), lineno=362, col_offset=20)], Call(Name('getattr', Load(), lineno=362, col_offset=32), [Name('element', Load(), lineno=362, col_offset=40), Str('__as_immutable__', lineno=362, col_offset=49), Name('None', Load(), lineno=362, col_offset=69)], [], None, None, lineno=362, col_offset=32), lineno=362, col_offset=20), If(Compare(Name('transform', Load(), lineno=363, col_offset=23), [Is()], [Name('None', Load(), lineno=363, col_offset=36)], lineno=363, col_offset=23), [Raise(None, None, None, lineno=364, col_offset=24)], [], lineno=363, col_offset=20), Assign([Subscript(Name('data', Load(), lineno=365, col_offset=20), Index(Call(Name('transform', Load(), lineno=365, col_offset=25), [], [], None, None, lineno=365, col_offset=25)), Store(), lineno=365, col_offset=20)], Name('value', Load(), lineno=365, col_offset=40), lineno=365, col_offset=20)], lineno=361, col_offset=16)], [], lineno=357, col_offset=16)], [], lineno=356, col_offset=12)], [For(Name('element', Store(), lineno=368, col_offset=16), Name('iterable', Load(), lineno=368, col_offset=27), [TryExcept([Assign([Subscript(Name('data', Load(), lineno=370, col_offset=20), Index(Name('element', Load(), lineno=370, col_offset=25)), Store(), lineno=370, col_offset=20)], Name('value', Load(), lineno=370, col_offset=36), lineno=370, col_offset=20)], [ExceptHandler(Name('TypeError', Load(), lineno=371, col_offset=23), None, [Assign([Name('transform', Store(), lineno=372, col_offset=20)], Call(Name('getattr', Load(), lineno=372, col_offset=32), [Name('element', Load(), lineno=372, col_offset=40), Str('__as_immutable__', lineno=372, col_offset=49), Name('None', Load(), lineno=372, col_offset=69)], [], None, None, lineno=372, col_offset=32), lineno=372, col_offset=20), If(Compare(Name('transform', Load(), lineno=373, col_offset=23), [Is()], [Name('None', Load(), lineno=373, col_offset=36)], lineno=373, col_offset=23), [Raise(None, None, None, lineno=374, col_offset=24)], [], lineno=373, col_offset=20), Assign([Subscript(Name('data', Load(), lineno=375, col_offset=20), Index(Call(Name('transform', Load(), lineno=375, col_offset=25), [], [], None, None, lineno=375, col_offset=25)), Store(), lineno=375, col_offset=20)], Name('value', Load(), lineno=375, col_offset=40), lineno=375, col_offset=20)], lineno=371, col_offset=16)], [], lineno=369, col_offset=16)], [], lineno=368, col_offset=12)], lineno=352, col_offset=8)], [], lineno=341, col_offset=4)], [], lineno=65, col_offset=0), ClassDef('ImmutableSet', [Name('BaseSet', Load(), lineno=378, col_offset=19)], [Expr(Str('Immutable set class.', lineno=379, col_offset=4), lineno=379, col_offset=4), Assign([Name('__slots__', Store(), lineno=381, col_offset=4)], List([Str('_hashcode', lineno=381, col_offset=17)], Load(), lineno=381, col_offset=16), lineno=381, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=385, col_offset=17), Name('iterable', Param(), lineno=385, col_offset=23)], None, None, [Name('None', Load(), lineno=385, col_offset=32)]), [Expr(Str('Construct an immutable set from an optional iterable.', lineno=386, col_offset=8), lineno=386, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=387, col_offset=8), '_hashcode', Store(), lineno=387, col_offset=8)], Name('None', Load(), lineno=387, col_offset=25), lineno=387, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=388, col_offset=8), '_data', Store(), lineno=388, col_offset=8)], Dict([], [], lineno=388, col_offset=21), lineno=388, col_offset=8), If(Compare(Name('iterable', Load(), lineno=389, col_offset=11), [IsNot()], [Name('None', Load(), lineno=389, col_offset=27)], lineno=389, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=390, col_offset=12), '_update', Load(), lineno=390, col_offset=12), [Name('iterable', Load(), lineno=390, col_offset=25)], [], None, None, lineno=390, col_offset=12), lineno=390, col_offset=12)], [], lineno=389, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=392, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=393, col_offset=11), '_hashcode', Load(), lineno=393, col_offset=11), [Is()], [Name('None', Load(), lineno=393, col_offset=29)], lineno=393, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=394, col_offset=12), '_hashcode', Store(), lineno=394, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=394, col_offset=29), '_compute_hash', Load(), lineno=394, col_offset=29), [], [], None, None, lineno=394, col_offset=29), lineno=394, col_offset=12)], [], lineno=393, col_offset=8), Return(Attribute(Name('self', Load(), lineno=395, col_offset=15), '_hashcode', Load(), lineno=395, col_offset=15), lineno=395, col_offset=8)], [], lineno=392, col_offset=4), FunctionDef('__getstate__', arguments([Name('self', Param(), lineno=397, col_offset=21)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=398, col_offset=15), '_data', Load(), lineno=398, col_offset=15), Attribute(Name('self', Load(), lineno=398, col_offset=27), '_hashcode', Load(), lineno=398, col_offset=27)], Load(), lineno=398, col_offset=15), lineno=398, col_offset=8)], [], lineno=397, col_offset=4), FunctionDef('__setstate__', arguments([Name('self', Param(), lineno=400, col_offset=21), Name('state', Param(), lineno=400, col_offset=27)], None, None, []), [Assign([Tuple([Attribute(Name('self', Load(), lineno=401, col_offset=8), '_data', Store(), lineno=401, col_offset=8), Attribute(Name('self', Load(), lineno=401, col_offset=20), '_hashcode', Store(), lineno=401, col_offset=20)], Store(), lineno=401, col_offset=8)], Name('state', Load(), lineno=401, col_offset=37), lineno=401, col_offset=8)], [], lineno=400, col_offset=4)], [], lineno=378, col_offset=0), ClassDef('Set', [Name('BaseSet', Load(), lineno=403, col_offset=10)], [Expr(Str(' Mutable set class.', lineno=404, col_offset=4), lineno=404, col_offset=4), Assign([Name('__slots__', Store(), lineno=406, col_offset=4)], List([], Load(), lineno=406, col_offset=16), lineno=406, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=410, col_offset=17), Name('iterable', Param(), lineno=410, col_offset=23)], None, None, [Name('None', Load(), lineno=410, col_offset=32)]), [Expr(Str('Construct a set from an optional iterable.', lineno=411, col_offset=8), lineno=411, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=412, col_offset=8), '_data', Store(), lineno=412, col_offset=8)], Dict([], [], lineno=412, col_offset=21), lineno=412, col_offset=8), If(Compare(Name('iterable', Load(), lineno=413, col_offset=11), [IsNot()], [Name('None', Load(), lineno=413, col_offset=27)], lineno=413, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=414, col_offset=12), '_update', Load(), lineno=414, col_offset=12), [Name('iterable', Load(), lineno=414, col_offset=25)], [], None, None, lineno=414, col_offset=12), lineno=414, col_offset=12)], [], lineno=413, col_offset=8)], [], lineno=410, col_offset=4), FunctionDef('__getstate__', arguments([Name('self', Param(), lineno=416, col_offset=21)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=418, col_offset=15), '_data', Load(), lineno=418, col_offset=15)], Load(), lineno=418, col_offset=15), lineno=418, col_offset=8)], [], lineno=416, col_offset=4), FunctionDef('__setstate__', arguments([Name('self', Param(), lineno=420, col_offset=21), Name('data', Param(), lineno=420, col_offset=27)], None, None, []), [Assign([Tuple([Attribute(Name('self', Load(), lineno=421, col_offset=8), '_data', Store(), lineno=421, col_offset=8)], Store(), lineno=421, col_offset=8)], Name('data', Load(), lineno=421, col_offset=22), lineno=421, col_offset=8)], [], lineno=420, col_offset=4), FunctionDef('__ior__', arguments([Name('self', Param(), lineno=428, col_offset=16), Name('other', Param(), lineno=428, col_offset=22)], None, None, []), [Expr(Str('Update a set with the union of itself and another.', lineno=429, col_offset=8), lineno=429, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=430, col_offset=8), '_binary_sanity_check', Load(), lineno=430, col_offset=8), [Name('other', Load(), lineno=430, col_offset=34)], [], None, None, lineno=430, col_offset=8), lineno=430, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=431, col_offset=8), '_data', Load(), lineno=431, col_offset=8), 'update', Load(), lineno=431, col_offset=8), [Attribute(Name('other', Load(), lineno=431, col_offset=26), '_data', Load(), lineno=431, col_offset=26)], [], None, None, lineno=431, col_offset=8), lineno=431, col_offset=8), Return(Name('self', Load(), lineno=432, col_offset=15), lineno=432, col_offset=8)], [], lineno=428, col_offset=4), FunctionDef('union_update', arguments([Name('self', Param(), lineno=434, col_offset=21), Name('other', Param(), lineno=434, col_offset=27)], None, None, []), [Expr(Str('Update a set with the union of itself and another.', lineno=435, col_offset=8), lineno=435, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=436, col_offset=8), '_update', Load(), lineno=436, col_offset=8), [Name('other', Load(), lineno=436, col_offset=21)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8)], [], lineno=434, col_offset=4), FunctionDef('__iand__', arguments([Name('self', Param(), lineno=438, col_offset=17), Name('other', Param(), lineno=438, col_offset=23)], None, None, []), [Expr(Str('Update a set with the intersection of itself and another.', lineno=439, col_offset=8), lineno=439, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=440, col_offset=8), '_binary_sanity_check', Load(), lineno=440, col_offset=8), [Name('other', Load(), lineno=440, col_offset=34)], [], None, None, lineno=440, col_offset=8), lineno=440, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=441, col_offset=8), '_data', Store(), lineno=441, col_offset=8)], Attribute(BinOp(Name('self', Load(), lineno=441, col_offset=22), BitAnd(), Name('other', Load(), lineno=441, col_offset=29), lineno=441, col_offset=22), '_data', Load(), lineno=441, col_offset=22), lineno=441, col_offset=8), Return(Name('self', Load(), lineno=442, col_offset=15), lineno=442, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('intersection_update', arguments([Name('self', Param(), lineno=444, col_offset=28), Name('other', Param(), lineno=444, col_offset=34)], None, None, []), [Expr(Str('Update a set with the intersection of itself and another.', lineno=445, col_offset=8), lineno=445, col_offset=8), If(Call(Name('isinstance', Load(), lineno=446, col_offset=11), [Name('other', Load(), lineno=446, col_offset=22), Name('BaseSet', Load(), lineno=446, col_offset=29)], [], None, None, lineno=446, col_offset=11), [AugAssign(Name('self', Store(), lineno=447, col_offset=12), BitAnd(), Name('other', Load(), lineno=447, col_offset=20), lineno=447, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=449, col_offset=12), '_data', Store(), lineno=449, col_offset=12)], Attribute(Call(Attribute(Name('self', Load(), lineno=449, col_offset=26), 'intersection', Load(), lineno=449, col_offset=26), [Name('other', Load(), lineno=449, col_offset=44)], [], None, None, lineno=449, col_offset=26), '_data', Load(), lineno=449, col_offset=26), lineno=449, col_offset=12)], lineno=446, col_offset=8)], [], lineno=444, col_offset=4), FunctionDef('__ixor__', arguments([Name('self', Param(), lineno=451, col_offset=17), Name('other', Param(), lineno=451, col_offset=23)], None, None, []), [Expr(Str('Update a set with the symmetric difference of itself and another.', lineno=452, col_offset=8), lineno=452, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=453, col_offset=8), '_binary_sanity_check', Load(), lineno=453, col_offset=8), [Name('other', Load(), lineno=453, col_offset=34)], [], None, None, lineno=453, col_offset=8), lineno=453, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=454, col_offset=8), 'symmetric_difference_update', Load(), lineno=454, col_offset=8), [Name('other', Load(), lineno=454, col_offset=41)], [], None, None, lineno=454, col_offset=8), lineno=454, col_offset=8), Return(Name('self', Load(), lineno=455, col_offset=15), lineno=455, col_offset=8)], [], lineno=451, col_offset=4), FunctionDef('symmetric_difference_update', arguments([Name('self', Param(), lineno=457, col_offset=36), Name('other', Param(), lineno=457, col_offset=42)], None, None, []), [Expr(Str('Update a set with the symmetric difference of itself and another.', lineno=458, col_offset=8), lineno=458, col_offset=8), Assign([Name('data', Store(), lineno=459, col_offset=8)], Attribute(Name('self', Load(), lineno=459, col_offset=15), '_data', Load(), lineno=459, col_offset=15), lineno=459, col_offset=8), Assign([Name('value', Store(), lineno=460, col_offset=8)], Name('True', Load(), lineno=460, col_offset=16), lineno=460, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=461, col_offset=15), [Name('other', Load(), lineno=461, col_offset=26), Name('BaseSet', Load(), lineno=461, col_offset=33)], [], None, None, lineno=461, col_offset=15), lineno=461, col_offset=11), [Assign([Name('other', Store(), lineno=462, col_offset=12)], Call(Name('Set', Load(), lineno=462, col_offset=20), [Name('other', Load(), lineno=462, col_offset=24)], [], None, None, lineno=462, col_offset=20), lineno=462, col_offset=12)], [], lineno=461, col_offset=8), If(Compare(Name('self', Load(), lineno=463, col_offset=11), [Is()], [Name('other', Load(), lineno=463, col_offset=19)], lineno=463, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=464, col_offset=12), 'clear', Load(), lineno=464, col_offset=12), [], [], None, None, lineno=464, col_offset=12), lineno=464, col_offset=12)], [], lineno=463, col_offset=8), For(Name('elt', Store(), lineno=465, col_offset=12), Name('other', Load(), lineno=465, col_offset=19), [If(Compare(Name('elt', Load(), lineno=466, col_offset=15), [In()], [Name('data', Load(), lineno=466, col_offset=22)], lineno=466, col_offset=15), [Delete([Subscript(Name('data', Load(), lineno=467, col_offset=20), Index(Name('elt', Load(), lineno=467, col_offset=25)), Del(), lineno=467, col_offset=20)], lineno=467, col_offset=16)], [Assign([Subscript(Name('data', Load(), lineno=469, col_offset=16), Index(Name('elt', Load(), lineno=469, col_offset=21)), Store(), lineno=469, col_offset=16)], Name('value', Load(), lineno=469, col_offset=28), lineno=469, col_offset=16)], lineno=466, col_offset=12)], [], lineno=465, col_offset=8)], [], lineno=457, col_offset=4), FunctionDef('__isub__', arguments([Name('self', Param(), lineno=471, col_offset=17), Name('other', Param(), lineno=471, col_offset=23)], None, None, []), [Expr(Str('Remove all elements of another set from this set.', lineno=472, col_offset=8), lineno=472, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=473, col_offset=8), '_binary_sanity_check', Load(), lineno=473, col_offset=8), [Name('other', Load(), lineno=473, col_offset=34)], [], None, None, lineno=473, col_offset=8), lineno=473, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=474, col_offset=8), 'difference_update', Load(), lineno=474, col_offset=8), [Name('other', Load(), lineno=474, col_offset=31)], [], None, None, lineno=474, col_offset=8), lineno=474, col_offset=8), Return(Name('self', Load(), lineno=475, col_offset=15), lineno=475, col_offset=8)], [], lineno=471, col_offset=4), FunctionDef('difference_update', arguments([Name('self', Param(), lineno=477, col_offset=26), Name('other', Param(), lineno=477, col_offset=32)], None, None, []), [Expr(Str('Remove all elements of another set from this set.', lineno=478, col_offset=8), lineno=478, col_offset=8), Assign([Name('data', Store(), lineno=479, col_offset=8)], Attribute(Name('self', Load(), lineno=479, col_offset=15), '_data', Load(), lineno=479, col_offset=15), lineno=479, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=480, col_offset=15), [Name('other', Load(), lineno=480, col_offset=26), Name('BaseSet', Load(), lineno=480, col_offset=33)], [], None, None, lineno=480, col_offset=15), lineno=480, col_offset=11), [Assign([Name('other', Store(), lineno=481, col_offset=12)], Call(Name('Set', Load(), lineno=481, col_offset=20), [Name('other', Load(), lineno=481, col_offset=24)], [], None, None, lineno=481, col_offset=20), lineno=481, col_offset=12)], [], lineno=480, col_offset=8), If(Compare(Name('self', Load(), lineno=482, col_offset=11), [Is()], [Name('other', Load(), lineno=482, col_offset=19)], lineno=482, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=483, col_offset=12), 'clear', Load(), lineno=483, col_offset=12), [], [], None, None, lineno=483, col_offset=12), lineno=483, col_offset=12)], [], lineno=482, col_offset=8), For(Name('elt', Store(), lineno=484, col_offset=12), Call(Name('ifilter', Load(), lineno=484, col_offset=19), [Attribute(Name('data', Load(), lineno=484, col_offset=27), '__contains__', Load(), lineno=484, col_offset=27), Name('other', Load(), lineno=484, col_offset=46)], [], None, None, lineno=484, col_offset=19), [Delete([Subscript(Name('data', Load(), lineno=485, col_offset=16), Index(Name('elt', Load(), lineno=485, col_offset=21)), Del(), lineno=485, col_offset=16)], lineno=485, col_offset=12)], [], lineno=484, col_offset=8)], [], lineno=477, col_offset=4), FunctionDef('update', arguments([Name('self', Param(), lineno=489, col_offset=15), Name('iterable', Param(), lineno=489, col_offset=21)], None, None, []), [Expr(Str('Add all values from an iterable (such as a list or file).', lineno=490, col_offset=8), lineno=490, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=491, col_offset=8), '_update', Load(), lineno=491, col_offset=8), [Name('iterable', Load(), lineno=491, col_offset=21)], [], None, None, lineno=491, col_offset=8), lineno=491, col_offset=8)], [], lineno=489, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=493, col_offset=14)], None, None, []), [Expr(Str('Remove all elements from this set.', lineno=494, col_offset=8), lineno=494, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=495, col_offset=8), '_data', Load(), lineno=495, col_offset=8), 'clear', Load(), lineno=495, col_offset=8), [], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8)], [], lineno=493, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=499, col_offset=12), Name('element', Param(), lineno=499, col_offset=18)], None, None, []), [Expr(Str('Add an element to a set.\n\n        This has no effect if the element is already present.\n        ', lineno=503, col_offset=-1), lineno=503, col_offset=-1), TryExcept([Assign([Subscript(Attribute(Name('self', Load(), lineno=505, col_offset=12), '_data', Load(), lineno=505, col_offset=12), Index(Name('element', Load(), lineno=505, col_offset=23)), Store(), lineno=505, col_offset=12)], Name('True', Load(), lineno=505, col_offset=34), lineno=505, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=506, col_offset=15), None, [Assign([Name('transform', Store(), lineno=507, col_offset=12)], Call(Name('getattr', Load(), lineno=507, col_offset=24), [Name('element', Load(), lineno=507, col_offset=32), Str('__as_immutable__', lineno=507, col_offset=41), Name('None', Load(), lineno=507, col_offset=61)], [], None, None, lineno=507, col_offset=24), lineno=507, col_offset=12), If(Compare(Name('transform', Load(), lineno=508, col_offset=15), [Is()], [Name('None', Load(), lineno=508, col_offset=28)], lineno=508, col_offset=15), [Raise(None, None, None, lineno=509, col_offset=16)], [], lineno=508, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=510, col_offset=12), '_data', Load(), lineno=510, col_offset=12), Index(Call(Name('transform', Load(), lineno=510, col_offset=23), [], [], None, None, lineno=510, col_offset=23)), Store(), lineno=510, col_offset=12)], Name('True', Load(), lineno=510, col_offset=38), lineno=510, col_offset=12)], lineno=506, col_offset=8)], [], lineno=504, col_offset=8)], [], lineno=499, col_offset=4), FunctionDef('remove', arguments([Name('self', Param(), lineno=512, col_offset=15), Name('element', Param(), lineno=512, col_offset=21)], None, None, []), [Expr(Str('Remove an element from a set; it must be a member.\n\n        If the element is not a member, raise a KeyError.\n        ', lineno=516, col_offset=-1), lineno=516, col_offset=-1), TryExcept([Delete([Subscript(Attribute(Name('self', Load(), lineno=518, col_offset=16), '_data', Load(), lineno=518, col_offset=16), Index(Name('element', Load(), lineno=518, col_offset=27)), Del(), lineno=518, col_offset=16)], lineno=518, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=519, col_offset=15), None, [Assign([Name('transform', Store(), lineno=520, col_offset=12)], Call(Name('getattr', Load(), lineno=520, col_offset=24), [Name('element', Load(), lineno=520, col_offset=32), Str('__as_temporarily_immutable__', lineno=520, col_offset=41), Name('None', Load(), lineno=520, col_offset=73)], [], None, None, lineno=520, col_offset=24), lineno=520, col_offset=12), If(Compare(Name('transform', Load(), lineno=521, col_offset=15), [Is()], [Name('None', Load(), lineno=521, col_offset=28)], lineno=521, col_offset=15), [Raise(None, None, None, lineno=522, col_offset=16)], [], lineno=521, col_offset=12), Delete([Subscript(Attribute(Name('self', Load(), lineno=523, col_offset=16), '_data', Load(), lineno=523, col_offset=16), Index(Call(Name('transform', Load(), lineno=523, col_offset=27), [], [], None, None, lineno=523, col_offset=27)), Del(), lineno=523, col_offset=16)], lineno=523, col_offset=12)], lineno=519, col_offset=8)], [], lineno=517, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('discard', arguments([Name('self', Param(), lineno=525, col_offset=16), Name('element', Param(), lineno=525, col_offset=22)], None, None, []), [Expr(Str('Remove an element from a set if it is a member.\n\n        If the element is not a member, do nothing.\n        ', lineno=529, col_offset=-1), lineno=529, col_offset=-1), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=531, col_offset=12), 'remove', Load(), lineno=531, col_offset=12), [Name('element', Load(), lineno=531, col_offset=24)], [], None, None, lineno=531, col_offset=12), lineno=531, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=532, col_offset=15), None, [Pass( lineno=533, col_offset=12)], lineno=532, col_offset=8)], [], lineno=530, col_offset=8)], [], lineno=525, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=535, col_offset=12)], None, None, []), [Expr(Str('Remove and return an arbitrary set element.', lineno=536, col_offset=8), lineno=536, col_offset=8), Return(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=537, col_offset=15), '_data', Load(), lineno=537, col_offset=15), 'popitem', Load(), lineno=537, col_offset=15), [], [], None, None, lineno=537, col_offset=15), Index(Num(0, lineno=537, col_offset=36)), Load(), lineno=537, col_offset=15), lineno=537, col_offset=8)], [], lineno=535, col_offset=4), FunctionDef('__as_immutable__', arguments([Name('self', Param(), lineno=539, col_offset=25)], None, None, []), [Return(Call(Name('ImmutableSet', Load(), lineno=541, col_offset=15), [Name('self', Load(), lineno=541, col_offset=28)], [], None, None, lineno=541, col_offset=15), lineno=541, col_offset=8)], [], lineno=539, col_offset=4), FunctionDef('__as_temporarily_immutable__', arguments([Name('self', Param(), lineno=543, col_offset=37)], None, None, []), [Return(Call(Name('_TemporarilyImmutableSet', Load(), lineno=545, col_offset=15), [Name('self', Load(), lineno=545, col_offset=40)], [], None, None, lineno=545, col_offset=15), lineno=545, col_offset=8)], [], lineno=543, col_offset=4)], [], lineno=403, col_offset=0), ClassDef('_TemporarilyImmutableSet', [Name('BaseSet', Load(), lineno=548, col_offset=31)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=552, col_offset=17), Name('set', Param(), lineno=552, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=553, col_offset=8), '_set', Store(), lineno=553, col_offset=8)], Name('set', Load(), lineno=553, col_offset=20), lineno=553, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=554, col_offset=8), '_data', Store(), lineno=554, col_offset=8)], Attribute(Name('set', Load(), lineno=554, col_offset=21), '_data', Load(), lineno=554, col_offset=21), lineno=554, col_offset=8)], [], lineno=552, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=556, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=557, col_offset=15), '_set', Load(), lineno=557, col_offset=15), '_compute_hash', Load(), lineno=557, col_offset=15), [], [], None, None, lineno=557, col_offset=15), lineno=557, col_offset=8)], [], lineno=556, col_offset=4)], [], lineno=548, col_offset=0)])
