Module([Expr(Str('\nModule difflib -- helpers for computing deltas between objects.\n\nFunction get_close_matches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best "good enough" matches.\n\nFunction context_diff(a, b):\n    For two lists of strings, return a delta in context diff format.\n\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\n\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\n\nFunction unified_diff(a, b):\n    For two lists of strings, return a delta in unified diff format.\n\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\n\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\n\nClass HtmlDiff:\n    For producing HTML side by side comparison with change highlights.\n', lineno=29, col_offset=-1), lineno=29, col_offset=-1), Assign([Name('__all__', Store(), lineno=31, col_offset=0)], List([Str('get_close_matches', lineno=31, col_offset=11), Str('ndiff', lineno=31, col_offset=32), Str('restore', lineno=31, col_offset=41), Str('SequenceMatcher', lineno=31, col_offset=52), Str('Differ', lineno=32, col_offset=11), Str('IS_CHARACTER_JUNK', lineno=32, col_offset=20), Str('IS_LINE_JUNK', lineno=32, col_offset=41), Str('context_diff', lineno=32, col_offset=57), Str('unified_diff', lineno=33, col_offset=11), Str('HtmlDiff', lineno=33, col_offset=27), Str('Match', lineno=33, col_offset=39)], Load(), lineno=31, col_offset=10), lineno=31, col_offset=0), Import([alias('heapq', None)], lineno=35, col_offset=0), ImportFrom('collections', [alias('namedtuple', '_namedtuple')], 0, lineno=36, col_offset=0), ImportFrom('functools', [alias('reduce', None)], 0, lineno=37, col_offset=0), Assign([Name('Match', Store(), lineno=39, col_offset=0)], Call(Name('_namedtuple', Load(), lineno=39, col_offset=8), [Str('Match', lineno=39, col_offset=20), Str('a b size', lineno=39, col_offset=29)], [], None, None, lineno=39, col_offset=8), lineno=39, col_offset=0), FunctionDef('_calculate_ratio', arguments([Name('matches', Param(), lineno=41, col_offset=21), Name('length', Param(), lineno=41, col_offset=30)], None, None, []), [If(Name('length', Load(), lineno=42, col_offset=7), [Return(BinOp(BinOp(Num(2.0, lineno=43, col_offset=15), Mult(), Name('matches', Load(), lineno=43, col_offset=21), lineno=43, col_offset=15), Div(), Name('length', Load(), lineno=43, col_offset=31), lineno=43, col_offset=29), lineno=43, col_offset=8)], [], lineno=42, col_offset=4), Return(Num(1.0, lineno=44, col_offset=11), lineno=44, col_offset=4)], [], lineno=41, col_offset=0), ClassDef('SequenceMatcher', [], [Expr(Str('\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980\'s by Ratcliff and Obershelp under the\n    hyperbolic name "gestalt pattern matching".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no "junk"\n    elements (R-O doesn\'t address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that "look right" to people.\n\n    SequenceMatcher tries to compute a "human-friendly diff" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That\'s what\n    catches peoples\' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of "junk lines", though (like blank lines in\n    ordinary text files, or maybe "<P>" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    "junk" <wink>.\n\n    Example, comparing two strings, and considering blanks to be "junk":\n\n    >>> s = SequenceMatcher(lambda x: x == " ",\n    ...                     "private Thread currentThread;",\n    ...                     "private volatile Thread currentThread;")\n    >>>\n\n    .ratio() returns a float in [0, 1], measuring the "similarity" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n\n    >>> print round(s.ratio(), 3)\n    0.866\n    >>>\n\n    If you\'re only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n\n    >>> for block in s.get_matching_blocks():\n    ...     print "a[%d] and b[%d] match for %d elements" % block\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n\n    >>> for opcode in s.get_opcodes():\n    ...     print "%6s a[%d:%d] b[%d:%d]" % opcode\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n\n    Methods:\n\n    __init__(isjunk=None, a=\'\', b=\'\')\n        Construct a SequenceMatcher.\n\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n\n    set_seq1(a)\n        Set the first sequence to be compared.\n\n    set_seq2(b)\n        Set the second sequence to be compared.\n\n    find_longest_match(alo, ahi, blo, bhi)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n    get_matching_blocks()\n        Return list of triples describing matching subsequences.\n\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n\n    ratio()\n        Return a measure of the sequences\' similarity (float in [0,1]).\n\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    ', lineno=152, col_offset=-1), lineno=152, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=154, col_offset=17), Name('isjunk', Param(), lineno=154, col_offset=23), Name('a', Param(), lineno=154, col_offset=36), Name('b', Param(), lineno=154, col_offset=42), Name('autojunk', Param(), lineno=154, col_offset=48)], None, None, [Name('None', Load(), lineno=154, col_offset=30), Str('', lineno=154, col_offset=38), Str('', lineno=154, col_offset=44), Name('True', Load(), lineno=154, col_offset=57)]), [Expr(Str('Construct a SequenceMatcher.\n\n        Optional arg isjunk is None (the default), or a one-argument\n        function that takes a sequence element and returns true iff the\n        element is junk.  None is equivalent to passing "lambda x: 0", i.e.\n        no elements are considered to be junk.  For example, pass\n            lambda x: x in " \\t"\n        if you\'re comparing lines as sequences of characters, and don\'t\n        want to synch up on blanks or hard tabs.\n\n        Optional arg a is the first of two sequences to be compared.  By\n        default, an empty string.  The elements of a must be hashable.  See\n        also .set_seqs() and .set_seq1().\n\n        Optional arg b is the second of two sequences to be compared.  By\n        default, an empty string.  The elements of b must be hashable. See\n        also .set_seqs() and .set_seq2().\n\n        Optional arg autojunk should be set to False to disable the\n        "automatic junk heuristic" that treats popular elements as junk\n        (see module documentation for more information).\n        ', lineno=176, col_offset=-1), lineno=176, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=218, col_offset=8), 'isjunk', Store(), lineno=218, col_offset=8)], Name('isjunk', Load(), lineno=218, col_offset=22), lineno=218, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=219, col_offset=8), 'a', Store(), lineno=219, col_offset=8), Attribute(Name('self', Load(), lineno=219, col_offset=17), 'b', Store(), lineno=219, col_offset=17)], Name('None', Load(), lineno=219, col_offset=26), lineno=219, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=220, col_offset=8), 'autojunk', Store(), lineno=220, col_offset=8)], Name('autojunk', Load(), lineno=220, col_offset=24), lineno=220, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=8), 'set_seqs', Load(), lineno=221, col_offset=8), [Name('a', Load(), lineno=221, col_offset=22), Name('b', Load(), lineno=221, col_offset=25)], [], None, None, lineno=221, col_offset=8), lineno=221, col_offset=8)], [], lineno=154, col_offset=4), FunctionDef('set_seqs', arguments([Name('self', Param(), lineno=223, col_offset=17), Name('a', Param(), lineno=223, col_offset=23), Name('b', Param(), lineno=223, col_offset=26)], None, None, []), [Expr(Str('Set the two sequences to be compared.\n\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs("abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        ', lineno=230, col_offset=-1), lineno=230, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=232, col_offset=8), 'set_seq1', Load(), lineno=232, col_offset=8), [Name('a', Load(), lineno=232, col_offset=22)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=233, col_offset=8), 'set_seq2', Load(), lineno=233, col_offset=8), [Name('b', Load(), lineno=233, col_offset=22)], [], None, None, lineno=233, col_offset=8), lineno=233, col_offset=8)], [], lineno=223, col_offset=4), FunctionDef('set_seq1', arguments([Name('self', Param(), lineno=235, col_offset=17), Name('a', Param(), lineno=235, col_offset=23)], None, None, []), [Expr(Str('Set the first sequence to be compared.\n\n        The second sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1("bcde")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq2().\n        ', lineno=254, col_offset=-1), lineno=254, col_offset=-1), If(Compare(Name('a', Load(), lineno=256, col_offset=11), [Is()], [Attribute(Name('self', Load(), lineno=256, col_offset=16), 'a', Load(), lineno=256, col_offset=16)], lineno=256, col_offset=11), [Return(None, lineno=257, col_offset=12)], [], lineno=256, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=8), 'a', Store(), lineno=258, col_offset=8)], Name('a', Load(), lineno=258, col_offset=17), lineno=258, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=259, col_offset=8), 'matching_blocks', Store(), lineno=259, col_offset=8), Attribute(Name('self', Load(), lineno=259, col_offset=31), 'opcodes', Store(), lineno=259, col_offset=31)], Name('None', Load(), lineno=259, col_offset=46), lineno=259, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('set_seq2', arguments([Name('self', Param(), lineno=261, col_offset=17), Name('b', Param(), lineno=261, col_offset=23)], None, None, []), [Expr(Str('Set the second sequence to be compared.\n\n        The first sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2("abcd")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq1().\n        ', lineno=280, col_offset=-1), lineno=280, col_offset=-1), If(Compare(Name('b', Load(), lineno=282, col_offset=11), [Is()], [Attribute(Name('self', Load(), lineno=282, col_offset=16), 'b', Load(), lineno=282, col_offset=16)], lineno=282, col_offset=11), [Return(None, lineno=283, col_offset=12)], [], lineno=282, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=284, col_offset=8), 'b', Store(), lineno=284, col_offset=8)], Name('b', Load(), lineno=284, col_offset=17), lineno=284, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=285, col_offset=8), 'matching_blocks', Store(), lineno=285, col_offset=8), Attribute(Name('self', Load(), lineno=285, col_offset=31), 'opcodes', Store(), lineno=285, col_offset=31)], Name('None', Load(), lineno=285, col_offset=46), lineno=285, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=286, col_offset=8), 'fullbcount', Store(), lineno=286, col_offset=8)], Name('None', Load(), lineno=286, col_offset=26), lineno=286, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=287, col_offset=8), '__chain_b', Load(), lineno=287, col_offset=8), [], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('__chain_b', arguments([Name('self', Param(), lineno=306, col_offset=18)], None, None, []), [Assign([Name('b', Store(), lineno=317, col_offset=8)], Attribute(Name('self', Load(), lineno=317, col_offset=12), 'b', Load(), lineno=317, col_offset=12), lineno=317, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=318, col_offset=8), 'b2j', Store(), lineno=318, col_offset=8), Name('b2j', Store(), lineno=318, col_offset=19)], Dict([], [], lineno=318, col_offset=25), lineno=318, col_offset=8), For(Tuple([Name('i', Store(), lineno=320, col_offset=12), Name('elt', Store(), lineno=320, col_offset=15)], Store(), lineno=320, col_offset=12), Call(Name('enumerate', Load(), lineno=320, col_offset=22), [Name('b', Load(), lineno=320, col_offset=32)], [], None, None, lineno=320, col_offset=22), [Assign([Name('indices', Store(), lineno=321, col_offset=12)], Call(Attribute(Name('b2j', Load(), lineno=321, col_offset=22), 'setdefault', Load(), lineno=321, col_offset=22), [Name('elt', Load(), lineno=321, col_offset=37), List([], Load(), lineno=321, col_offset=42)], [], None, None, lineno=321, col_offset=22), lineno=321, col_offset=12), Expr(Call(Attribute(Name('indices', Load(), lineno=322, col_offset=12), 'append', Load(), lineno=322, col_offset=12), [Name('i', Load(), lineno=322, col_offset=27)], [], None, None, lineno=322, col_offset=12), lineno=322, col_offset=12)], [], lineno=320, col_offset=8), Assign([Name('junk', Store(), lineno=325, col_offset=8)], Call(Name('set', Load(), lineno=325, col_offset=15), [], [], None, None, lineno=325, col_offset=15), lineno=325, col_offset=8), Assign([Name('isjunk', Store(), lineno=326, col_offset=8)], Attribute(Name('self', Load(), lineno=326, col_offset=17), 'isjunk', Load(), lineno=326, col_offset=17), lineno=326, col_offset=8), If(Name('isjunk', Load(), lineno=327, col_offset=11), [For(Name('elt', Store(), lineno=328, col_offset=16), Call(Name('list', Load(), lineno=328, col_offset=23), [Call(Attribute(Name('b2j', Load(), lineno=328, col_offset=28), 'keys', Load(), lineno=328, col_offset=28), [], [], None, None, lineno=328, col_offset=28)], [], None, None, lineno=328, col_offset=23), [If(Call(Name('isjunk', Load(), lineno=329, col_offset=19), [Name('elt', Load(), lineno=329, col_offset=26)], [], None, None, lineno=329, col_offset=19), [Expr(Call(Attribute(Name('junk', Load(), lineno=330, col_offset=20), 'add', Load(), lineno=330, col_offset=20), [Name('elt', Load(), lineno=330, col_offset=29)], [], None, None, lineno=330, col_offset=20), lineno=330, col_offset=20), Delete([Subscript(Name('b2j', Load(), lineno=331, col_offset=24), Index(Name('elt', Load(), lineno=331, col_offset=28)), Del(), lineno=331, col_offset=24)], lineno=331, col_offset=20)], [], lineno=329, col_offset=16)], [], lineno=328, col_offset=12)], [], lineno=327, col_offset=8), Assign([Name('popular', Store(), lineno=334, col_offset=8)], Call(Name('set', Load(), lineno=334, col_offset=18), [], [], None, None, lineno=334, col_offset=18), lineno=334, col_offset=8), Assign([Name('n', Store(), lineno=335, col_offset=8)], Call(Name('len', Load(), lineno=335, col_offset=12), [Name('b', Load(), lineno=335, col_offset=16)], [], None, None, lineno=335, col_offset=12), lineno=335, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=336, col_offset=11), 'autojunk', Load(), lineno=336, col_offset=11), Compare(Name('n', Load(), lineno=336, col_offset=29), [GtE()], [Num(200, lineno=336, col_offset=34)], lineno=336, col_offset=29)], lineno=336, col_offset=11), [Assign([Name('ntest', Store(), lineno=337, col_offset=12)], BinOp(BinOp(Name('n', Load(), lineno=337, col_offset=20), FloorDiv(), Num(100, lineno=337, col_offset=25), lineno=337, col_offset=20), Add(), Num(1, lineno=337, col_offset=31), lineno=337, col_offset=20), lineno=337, col_offset=12), For(Tuple([Name('elt', Store(), lineno=338, col_offset=16), Name('idxs', Store(), lineno=338, col_offset=21)], Store(), lineno=338, col_offset=16), Call(Name('list', Load(), lineno=338, col_offset=29), [Call(Attribute(Name('b2j', Load(), lineno=338, col_offset=34), 'items', Load(), lineno=338, col_offset=34), [], [], None, None, lineno=338, col_offset=34)], [], None, None, lineno=338, col_offset=29), [If(Compare(Call(Name('len', Load(), lineno=339, col_offset=19), [Name('idxs', Load(), lineno=339, col_offset=23)], [], None, None, lineno=339, col_offset=19), [Gt()], [Name('ntest', Load(), lineno=339, col_offset=31)], lineno=339, col_offset=19), [Expr(Call(Attribute(Name('popular', Load(), lineno=340, col_offset=20), 'add', Load(), lineno=340, col_offset=20), [Name('elt', Load(), lineno=340, col_offset=32)], [], None, None, lineno=340, col_offset=20), lineno=340, col_offset=20), Delete([Subscript(Name('b2j', Load(), lineno=341, col_offset=24), Index(Name('elt', Load(), lineno=341, col_offset=28)), Del(), lineno=341, col_offset=24)], lineno=341, col_offset=20)], [], lineno=339, col_offset=16)], [], lineno=338, col_offset=12)], [], lineno=336, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=347, col_offset=8), 'isbjunk', Store(), lineno=347, col_offset=8)], Attribute(Name('junk', Load(), lineno=347, col_offset=23), '__contains__', Load(), lineno=347, col_offset=23), lineno=347, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=348, col_offset=8), 'isbpopular', Store(), lineno=348, col_offset=8)], Attribute(Name('popular', Load(), lineno=348, col_offset=26), '__contains__', Load(), lineno=348, col_offset=26), lineno=348, col_offset=8)], [], lineno=306, col_offset=4), FunctionDef('find_longest_match', arguments([Name('self', Param(), lineno=350, col_offset=27), Name('alo', Param(), lineno=350, col_offset=33), Name('ahi', Param(), lineno=350, col_offset=38), Name('blo', Param(), lineno=350, col_offset=43), Name('bhi', Param(), lineno=350, col_offset=48)], None, None, []), [Expr(Str('Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n        If isjunk is not defined:\n\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i\',j\',k\') meeting those conditions,\n            k >= k\'\n            i <= i\'\n            and if i == i\', j <= j\'\n\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n\n        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=0, b=4, size=5)\n\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an "interesting" match.\n\n        Here\'s the same example as before, but considering blanks to be\n        junk.  That prevents " abcd" from matching the " abcd" at the tail\n        end of the second sequence directly.  Instead only the "abcd" can\n        match, and matches the leftmost "abcd" in the second sequence:\n\n        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=1, b=0, size=4)\n\n        If no blocks match, return (alo, blo, 0).\n\n        >>> s = SequenceMatcher(None, "ab", "c")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        Match(a=0, b=0, size=0)\n        ', lineno=392, col_offset=-1), lineno=392, col_offset=-1), Assign([Tuple([Name('a', Store(), lineno=406, col_offset=8), Name('b', Store(), lineno=406, col_offset=11), Name('b2j', Store(), lineno=406, col_offset=14), Name('isbjunk', Store(), lineno=406, col_offset=19)], Store(), lineno=406, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=406, col_offset=29), 'a', Load(), lineno=406, col_offset=29), Attribute(Name('self', Load(), lineno=406, col_offset=37), 'b', Load(), lineno=406, col_offset=37), Attribute(Name('self', Load(), lineno=406, col_offset=45), 'b2j', Load(), lineno=406, col_offset=45), Attribute(Name('self', Load(), lineno=406, col_offset=55), 'isbjunk', Load(), lineno=406, col_offset=55)], Load(), lineno=406, col_offset=29), lineno=406, col_offset=8), Assign([Tuple([Name('besti', Store(), lineno=407, col_offset=8), Name('bestj', Store(), lineno=407, col_offset=15), Name('bestsize', Store(), lineno=407, col_offset=22)], Store(), lineno=407, col_offset=8)], Tuple([Name('alo', Load(), lineno=407, col_offset=33), Name('blo', Load(), lineno=407, col_offset=38), Num(0, lineno=407, col_offset=43)], Load(), lineno=407, col_offset=33), lineno=407, col_offset=8), Assign([Name('j2len', Store(), lineno=411, col_offset=8)], Dict([], [], lineno=411, col_offset=16), lineno=411, col_offset=8), Assign([Name('nothing', Store(), lineno=412, col_offset=8)], List([], Load(), lineno=412, col_offset=18), lineno=412, col_offset=8), For(Name('i', Store(), lineno=413, col_offset=12), Call(Name('xrange', Load(), lineno=413, col_offset=17), [Name('alo', Load(), lineno=413, col_offset=24), Name('ahi', Load(), lineno=413, col_offset=29)], [], None, None, lineno=413, col_offset=17), [Assign([Name('j2lenget', Store(), lineno=416, col_offset=12)], Attribute(Name('j2len', Load(), lineno=416, col_offset=23), 'get', Load(), lineno=416, col_offset=23), lineno=416, col_offset=12), Assign([Name('newj2len', Store(), lineno=417, col_offset=12)], Dict([], [], lineno=417, col_offset=23), lineno=417, col_offset=12), For(Name('j', Store(), lineno=418, col_offset=16), Call(Attribute(Name('b2j', Load(), lineno=418, col_offset=21), 'get', Load(), lineno=418, col_offset=21), [Subscript(Name('a', Load(), lineno=418, col_offset=29), Index(Name('i', Load(), lineno=418, col_offset=31)), Load(), lineno=418, col_offset=29), Name('nothing', Load(), lineno=418, col_offset=35)], [], None, None, lineno=418, col_offset=21), [If(Compare(Name('j', Load(), lineno=420, col_offset=19), [Lt()], [Name('blo', Load(), lineno=420, col_offset=23)], lineno=420, col_offset=19), [Continue( lineno=421, col_offset=20)], [], lineno=420, col_offset=16), If(Compare(Name('j', Load(), lineno=422, col_offset=19), [GtE()], [Name('bhi', Load(), lineno=422, col_offset=24)], lineno=422, col_offset=19), [Break( lineno=423, col_offset=20)], [], lineno=422, col_offset=16), Assign([Name('k', Store(), lineno=424, col_offset=16), Subscript(Name('newj2len', Load(), lineno=424, col_offset=20), Index(Name('j', Load(), lineno=424, col_offset=29)), Store(), lineno=424, col_offset=20)], BinOp(Call(Name('j2lenget', Load(), lineno=424, col_offset=34), [BinOp(Name('j', Load(), lineno=424, col_offset=43), Sub(), Num(1, lineno=424, col_offset=45), lineno=424, col_offset=43), Num(0, lineno=424, col_offset=48)], [], None, None, lineno=424, col_offset=34), Add(), Num(1, lineno=424, col_offset=53), lineno=424, col_offset=34), lineno=424, col_offset=16), If(Compare(Name('k', Load(), lineno=425, col_offset=19), [Gt()], [Name('bestsize', Load(), lineno=425, col_offset=23)], lineno=425, col_offset=19), [Assign([Tuple([Name('besti', Store(), lineno=426, col_offset=20), Name('bestj', Store(), lineno=426, col_offset=27), Name('bestsize', Store(), lineno=426, col_offset=34)], Store(), lineno=426, col_offset=20)], Tuple([BinOp(BinOp(Name('i', Load(), lineno=426, col_offset=45), Sub(), Name('k', Load(), lineno=426, col_offset=47), lineno=426, col_offset=45), Add(), Num(1, lineno=426, col_offset=49), lineno=426, col_offset=48), BinOp(BinOp(Name('j', Load(), lineno=426, col_offset=52), Sub(), Name('k', Load(), lineno=426, col_offset=54), lineno=426, col_offset=52), Add(), Num(1, lineno=426, col_offset=56), lineno=426, col_offset=55), Name('k', Load(), lineno=426, col_offset=59)], Load(), lineno=426, col_offset=45), lineno=426, col_offset=20)], [], lineno=425, col_offset=16)], [], lineno=418, col_offset=12), Assign([Name('j2len', Store(), lineno=427, col_offset=12)], Name('newj2len', Load(), lineno=427, col_offset=20), lineno=427, col_offset=12)], [], lineno=413, col_offset=8), While(BoolOp(And(), [Compare(Name('besti', Load(), lineno=433, col_offset=14), [Gt()], [Name('alo', Load(), lineno=433, col_offset=22)], lineno=433, col_offset=14), Compare(Name('bestj', Load(), lineno=433, col_offset=30), [Gt()], [Name('blo', Load(), lineno=433, col_offset=38)], lineno=433, col_offset=30), UnaryOp(Not(), Call(Name('isbjunk', Load(), lineno=434, col_offset=18), [Subscript(Name('b', Load(), lineno=434, col_offset=26), Index(BinOp(Name('bestj', Load(), lineno=434, col_offset=28), Sub(), Num(1, lineno=434, col_offset=34), lineno=434, col_offset=28)), Load(), lineno=434, col_offset=26)], [], None, None, lineno=434, col_offset=18), lineno=434, col_offset=14), Compare(Subscript(Name('a', Load(), lineno=435, col_offset=14), Index(BinOp(Name('besti', Load(), lineno=435, col_offset=16), Sub(), Num(1, lineno=435, col_offset=22), lineno=435, col_offset=16)), Load(), lineno=435, col_offset=14), [Eq()], [Subscript(Name('b', Load(), lineno=435, col_offset=28), Index(BinOp(Name('bestj', Load(), lineno=435, col_offset=30), Sub(), Num(1, lineno=435, col_offset=36), lineno=435, col_offset=30)), Load(), lineno=435, col_offset=28)], lineno=435, col_offset=14)], lineno=433, col_offset=14), [Assign([Tuple([Name('besti', Store(), lineno=436, col_offset=12), Name('bestj', Store(), lineno=436, col_offset=19), Name('bestsize', Store(), lineno=436, col_offset=26)], Store(), lineno=436, col_offset=12)], Tuple([BinOp(Name('besti', Load(), lineno=436, col_offset=37), Sub(), Num(1, lineno=436, col_offset=43), lineno=436, col_offset=37), BinOp(Name('bestj', Load(), lineno=436, col_offset=46), Sub(), Num(1, lineno=436, col_offset=52), lineno=436, col_offset=46), BinOp(Name('bestsize', Load(), lineno=436, col_offset=55), Add(), Num(1, lineno=436, col_offset=64), lineno=436, col_offset=55)], Load(), lineno=436, col_offset=37), lineno=436, col_offset=12)], [], lineno=433, col_offset=8), While(BoolOp(And(), [Compare(BinOp(Name('besti', Load(), lineno=437, col_offset=14), Add(), Name('bestsize', Load(), lineno=437, col_offset=20), lineno=437, col_offset=14), [Lt()], [Name('ahi', Load(), lineno=437, col_offset=31)], lineno=437, col_offset=14), Compare(BinOp(Name('bestj', Load(), lineno=437, col_offset=39), Add(), Name('bestsize', Load(), lineno=437, col_offset=45), lineno=437, col_offset=39), [Lt()], [Name('bhi', Load(), lineno=437, col_offset=56)], lineno=437, col_offset=39), UnaryOp(Not(), Call(Name('isbjunk', Load(), lineno=438, col_offset=18), [Subscript(Name('b', Load(), lineno=438, col_offset=26), Index(BinOp(Name('bestj', Load(), lineno=438, col_offset=28), Add(), Name('bestsize', Load(), lineno=438, col_offset=34), lineno=438, col_offset=28)), Load(), lineno=438, col_offset=26)], [], None, None, lineno=438, col_offset=18), lineno=438, col_offset=14), Compare(Subscript(Name('a', Load(), lineno=439, col_offset=14), Index(BinOp(Name('besti', Load(), lineno=439, col_offset=16), Add(), Name('bestsize', Load(), lineno=439, col_offset=22), lineno=439, col_offset=16)), Load(), lineno=439, col_offset=14), [Eq()], [Subscript(Name('b', Load(), lineno=439, col_offset=35), Index(BinOp(Name('bestj', Load(), lineno=439, col_offset=37), Add(), Name('bestsize', Load(), lineno=439, col_offset=43), lineno=439, col_offset=37)), Load(), lineno=439, col_offset=35)], lineno=439, col_offset=14)], lineno=437, col_offset=14), [AugAssign(Name('bestsize', Store(), lineno=440, col_offset=12), Add(), Num(1, lineno=440, col_offset=24), lineno=440, col_offset=12)], [], lineno=437, col_offset=8), While(BoolOp(And(), [Compare(Name('besti', Load(), lineno=449, col_offset=14), [Gt()], [Name('alo', Load(), lineno=449, col_offset=22)], lineno=449, col_offset=14), Compare(Name('bestj', Load(), lineno=449, col_offset=30), [Gt()], [Name('blo', Load(), lineno=449, col_offset=38)], lineno=449, col_offset=30), Call(Name('isbjunk', Load(), lineno=450, col_offset=14), [Subscript(Name('b', Load(), lineno=450, col_offset=22), Index(BinOp(Name('bestj', Load(), lineno=450, col_offset=24), Sub(), Num(1, lineno=450, col_offset=30), lineno=450, col_offset=24)), Load(), lineno=450, col_offset=22)], [], None, None, lineno=450, col_offset=14), Compare(Subscript(Name('a', Load(), lineno=451, col_offset=14), Index(BinOp(Name('besti', Load(), lineno=451, col_offset=16), Sub(), Num(1, lineno=451, col_offset=22), lineno=451, col_offset=16)), Load(), lineno=451, col_offset=14), [Eq()], [Subscript(Name('b', Load(), lineno=451, col_offset=28), Index(BinOp(Name('bestj', Load(), lineno=451, col_offset=30), Sub(), Num(1, lineno=451, col_offset=36), lineno=451, col_offset=30)), Load(), lineno=451, col_offset=28)], lineno=451, col_offset=14)], lineno=449, col_offset=14), [Assign([Tuple([Name('besti', Store(), lineno=452, col_offset=12), Name('bestj', Store(), lineno=452, col_offset=19), Name('bestsize', Store(), lineno=452, col_offset=26)], Store(), lineno=452, col_offset=12)], Tuple([BinOp(Name('besti', Load(), lineno=452, col_offset=37), Sub(), Num(1, lineno=452, col_offset=43), lineno=452, col_offset=37), BinOp(Name('bestj', Load(), lineno=452, col_offset=46), Sub(), Num(1, lineno=452, col_offset=52), lineno=452, col_offset=46), BinOp(Name('bestsize', Load(), lineno=452, col_offset=55), Add(), Num(1, lineno=452, col_offset=64), lineno=452, col_offset=55)], Load(), lineno=452, col_offset=37), lineno=452, col_offset=12)], [], lineno=449, col_offset=8), While(BoolOp(And(), [Compare(BinOp(Name('besti', Load(), lineno=453, col_offset=14), Add(), Name('bestsize', Load(), lineno=453, col_offset=20), lineno=453, col_offset=14), [Lt()], [Name('ahi', Load(), lineno=453, col_offset=31)], lineno=453, col_offset=14), Compare(BinOp(Name('bestj', Load(), lineno=453, col_offset=39), Add(), Name('bestsize', Load(), lineno=453, col_offset=45), lineno=453, col_offset=39), [Lt()], [Name('bhi', Load(), lineno=453, col_offset=56)], lineno=453, col_offset=39), Call(Name('isbjunk', Load(), lineno=454, col_offset=14), [Subscript(Name('b', Load(), lineno=454, col_offset=22), Index(BinOp(Name('bestj', Load(), lineno=454, col_offset=24), Add(), Name('bestsize', Load(), lineno=454, col_offset=30), lineno=454, col_offset=24)), Load(), lineno=454, col_offset=22)], [], None, None, lineno=454, col_offset=14), Compare(Subscript(Name('a', Load(), lineno=455, col_offset=14), Index(BinOp(Name('besti', Load(), lineno=455, col_offset=16), Add(), Name('bestsize', Load(), lineno=455, col_offset=22), lineno=455, col_offset=16)), Load(), lineno=455, col_offset=14), [Eq()], [Subscript(Name('b', Load(), lineno=455, col_offset=35), Index(BinOp(Name('bestj', Load(), lineno=455, col_offset=37), Add(), Name('bestsize', Load(), lineno=455, col_offset=43), lineno=455, col_offset=37)), Load(), lineno=455, col_offset=35)], lineno=455, col_offset=14)], lineno=453, col_offset=14), [Assign([Name('bestsize', Store(), lineno=456, col_offset=12)], BinOp(Name('bestsize', Load(), lineno=456, col_offset=23), Add(), Num(1, lineno=456, col_offset=34), lineno=456, col_offset=23), lineno=456, col_offset=12)], [], lineno=453, col_offset=8), Return(Call(Name('Match', Load(), lineno=458, col_offset=15), [Name('besti', Load(), lineno=458, col_offset=21), Name('bestj', Load(), lineno=458, col_offset=28), Name('bestsize', Load(), lineno=458, col_offset=35)], [], None, None, lineno=458, col_offset=15), lineno=458, col_offset=8)], [], lineno=350, col_offset=4), FunctionDef('get_matching_blocks', arguments([Name('self', Param(), lineno=460, col_offset=28)], None, None, []), [Expr(Str('Return list of triples describing matching subsequences.\n\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it\'s also guaranteed that if\n        (i, j, n) and (i\', j\', n\') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i\' or\n        j+n != j\'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n\n        >>> s = SequenceMatcher(None, "abxcd", "abcd")\n        >>> s.get_matching_blocks()\n        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n        ', lineno=477, col_offset=-1), lineno=477, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=479, col_offset=11), 'matching_blocks', Load(), lineno=479, col_offset=11), [IsNot()], [Name('None', Load(), lineno=479, col_offset=39)], lineno=479, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=480, col_offset=19), 'matching_blocks', Load(), lineno=480, col_offset=19), lineno=480, col_offset=12)], [], lineno=479, col_offset=8), Assign([Tuple([Name('la', Store(), lineno=481, col_offset=8), Name('lb', Store(), lineno=481, col_offset=12)], Store(), lineno=481, col_offset=8)], Tuple([Call(Name('len', Load(), lineno=481, col_offset=17), [Attribute(Name('self', Load(), lineno=481, col_offset=21), 'a', Load(), lineno=481, col_offset=21)], [], None, None, lineno=481, col_offset=17), Call(Name('len', Load(), lineno=481, col_offset=30), [Attribute(Name('self', Load(), lineno=481, col_offset=34), 'b', Load(), lineno=481, col_offset=34)], [], None, None, lineno=481, col_offset=30)], Load(), lineno=481, col_offset=17), lineno=481, col_offset=8), Assign([Name('queue', Store(), lineno=489, col_offset=8)], List([Tuple([Num(0, lineno=489, col_offset=18), Name('la', Load(), lineno=489, col_offset=21), Num(0, lineno=489, col_offset=25), Name('lb', Load(), lineno=489, col_offset=28)], Load(), lineno=489, col_offset=18)], Load(), lineno=489, col_offset=16), lineno=489, col_offset=8), Assign([Name('matching_blocks', Store(), lineno=490, col_offset=8)], List([], Load(), lineno=490, col_offset=26), lineno=490, col_offset=8), While(Name('queue', Load(), lineno=491, col_offset=14), [Assign([Tuple([Name('alo', Store(), lineno=492, col_offset=12), Name('ahi', Store(), lineno=492, col_offset=17), Name('blo', Store(), lineno=492, col_offset=22), Name('bhi', Store(), lineno=492, col_offset=27)], Store(), lineno=492, col_offset=12)], Call(Attribute(Name('queue', Load(), lineno=492, col_offset=33), 'pop', Load(), lineno=492, col_offset=33), [], [], None, None, lineno=492, col_offset=33), lineno=492, col_offset=12), Assign([Tuple([Name('i', Store(), lineno=493, col_offset=12), Name('j', Store(), lineno=493, col_offset=15), Name('k', Store(), lineno=493, col_offset=18)], Store(), lineno=493, col_offset=12), Name('x', Store(), lineno=493, col_offset=22)], Call(Attribute(Name('self', Load(), lineno=493, col_offset=26), 'find_longest_match', Load(), lineno=493, col_offset=26), [Name('alo', Load(), lineno=493, col_offset=50), Name('ahi', Load(), lineno=493, col_offset=55), Name('blo', Load(), lineno=493, col_offset=60), Name('bhi', Load(), lineno=493, col_offset=65)], [], None, None, lineno=493, col_offset=26), lineno=493, col_offset=12), If(Name('k', Load(), lineno=497, col_offset=15), [Expr(Call(Attribute(Name('matching_blocks', Load(), lineno=498, col_offset=16), 'append', Load(), lineno=498, col_offset=16), [Name('x', Load(), lineno=498, col_offset=39)], [], None, None, lineno=498, col_offset=16), lineno=498, col_offset=16), If(BoolOp(And(), [Compare(Name('alo', Load(), lineno=499, col_offset=19), [Lt()], [Name('i', Load(), lineno=499, col_offset=25)], lineno=499, col_offset=19), Compare(Name('blo', Load(), lineno=499, col_offset=31), [Lt()], [Name('j', Load(), lineno=499, col_offset=37)], lineno=499, col_offset=31)], lineno=499, col_offset=19), [Expr(Call(Attribute(Name('queue', Load(), lineno=500, col_offset=20), 'append', Load(), lineno=500, col_offset=20), [Tuple([Name('alo', Load(), lineno=500, col_offset=34), Name('i', Load(), lineno=500, col_offset=39), Name('blo', Load(), lineno=500, col_offset=42), Name('j', Load(), lineno=500, col_offset=47)], Load(), lineno=500, col_offset=34)], [], None, None, lineno=500, col_offset=20), lineno=500, col_offset=20)], [], lineno=499, col_offset=16), If(BoolOp(And(), [Compare(BinOp(Name('i', Load(), lineno=501, col_offset=19), Add(), Name('k', Load(), lineno=501, col_offset=21), lineno=501, col_offset=19), [Lt()], [Name('ahi', Load(), lineno=501, col_offset=25)], lineno=501, col_offset=19), Compare(BinOp(Name('j', Load(), lineno=501, col_offset=33), Add(), Name('k', Load(), lineno=501, col_offset=35), lineno=501, col_offset=33), [Lt()], [Name('bhi', Load(), lineno=501, col_offset=39)], lineno=501, col_offset=33)], lineno=501, col_offset=19), [Expr(Call(Attribute(Name('queue', Load(), lineno=502, col_offset=20), 'append', Load(), lineno=502, col_offset=20), [Tuple([BinOp(Name('i', Load(), lineno=502, col_offset=34), Add(), Name('k', Load(), lineno=502, col_offset=36), lineno=502, col_offset=34), Name('ahi', Load(), lineno=502, col_offset=39), BinOp(Name('j', Load(), lineno=502, col_offset=44), Add(), Name('k', Load(), lineno=502, col_offset=46), lineno=502, col_offset=44), Name('bhi', Load(), lineno=502, col_offset=49)], Load(), lineno=502, col_offset=34)], [], None, None, lineno=502, col_offset=20), lineno=502, col_offset=20)], [], lineno=501, col_offset=16)], [], lineno=497, col_offset=12)], [], lineno=491, col_offset=8), Expr(Call(Attribute(Name('matching_blocks', Load(), lineno=503, col_offset=8), 'sort', Load(), lineno=503, col_offset=8), [], [], None, None, lineno=503, col_offset=8), lineno=503, col_offset=8), Assign([Name('i1', Store(), lineno=508, col_offset=8), Name('j1', Store(), lineno=508, col_offset=13), Name('k1', Store(), lineno=508, col_offset=18)], Num(0, lineno=508, col_offset=23), lineno=508, col_offset=8), Assign([Name('non_adjacent', Store(), lineno=509, col_offset=8)], List([], Load(), lineno=509, col_offset=23), lineno=509, col_offset=8), For(Tuple([Name('i2', Store(), lineno=510, col_offset=12), Name('j2', Store(), lineno=510, col_offset=16), Name('k2', Store(), lineno=510, col_offset=20)], Store(), lineno=510, col_offset=12), Name('matching_blocks', Load(), lineno=510, col_offset=26), [If(BoolOp(And(), [Compare(BinOp(Name('i1', Load(), lineno=512, col_offset=15), Add(), Name('k1', Load(), lineno=512, col_offset=20), lineno=512, col_offset=15), [Eq()], [Name('i2', Load(), lineno=512, col_offset=26)], lineno=512, col_offset=15), Compare(BinOp(Name('j1', Load(), lineno=512, col_offset=33), Add(), Name('k1', Load(), lineno=512, col_offset=38), lineno=512, col_offset=33), [Eq()], [Name('j2', Load(), lineno=512, col_offset=44)], lineno=512, col_offset=33)], lineno=512, col_offset=15), [AugAssign(Name('k1', Store(), lineno=516, col_offset=16), Add(), Name('k2', Load(), lineno=516, col_offset=22), lineno=516, col_offset=16)], [If(Name('k1', Load(), lineno=521, col_offset=19), [Expr(Call(Attribute(Name('non_adjacent', Load(), lineno=522, col_offset=20), 'append', Load(), lineno=522, col_offset=20), [Tuple([Name('i1', Load(), lineno=522, col_offset=41), Name('j1', Load(), lineno=522, col_offset=45), Name('k1', Load(), lineno=522, col_offset=49)], Load(), lineno=522, col_offset=41)], [], None, None, lineno=522, col_offset=20), lineno=522, col_offset=20)], [], lineno=521, col_offset=16), Assign([Tuple([Name('i1', Store(), lineno=523, col_offset=16), Name('j1', Store(), lineno=523, col_offset=20), Name('k1', Store(), lineno=523, col_offset=24)], Store(), lineno=523, col_offset=16)], Tuple([Name('i2', Load(), lineno=523, col_offset=29), Name('j2', Load(), lineno=523, col_offset=33), Name('k2', Load(), lineno=523, col_offset=37)], Load(), lineno=523, col_offset=29), lineno=523, col_offset=16)], lineno=512, col_offset=12)], [], lineno=510, col_offset=8), If(Name('k1', Load(), lineno=524, col_offset=11), [Expr(Call(Attribute(Name('non_adjacent', Load(), lineno=525, col_offset=12), 'append', Load(), lineno=525, col_offset=12), [Tuple([Name('i1', Load(), lineno=525, col_offset=33), Name('j1', Load(), lineno=525, col_offset=37), Name('k1', Load(), lineno=525, col_offset=41)], Load(), lineno=525, col_offset=33)], [], None, None, lineno=525, col_offset=12), lineno=525, col_offset=12)], [], lineno=524, col_offset=8), Expr(Call(Attribute(Name('non_adjacent', Load(), lineno=527, col_offset=8), 'append', Load(), lineno=527, col_offset=8), [Tuple([Name('la', Load(), lineno=527, col_offset=30), Name('lb', Load(), lineno=527, col_offset=34), Num(0, lineno=527, col_offset=38)], Load(), lineno=527, col_offset=30)], [], None, None, lineno=527, col_offset=8), lineno=527, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=528, col_offset=8), 'matching_blocks', Store(), lineno=528, col_offset=8)], Name('non_adjacent', Load(), lineno=528, col_offset=31), lineno=528, col_offset=8), Return(Call(Name('map', Load(), lineno=529, col_offset=15), [Attribute(Name('Match', Load(), lineno=529, col_offset=19), '_make', Load(), lineno=529, col_offset=19), Attribute(Name('self', Load(), lineno=529, col_offset=32), 'matching_blocks', Load(), lineno=529, col_offset=32)], [], None, None, lineno=529, col_offset=15), lineno=529, col_offset=8)], [], lineno=460, col_offset=4), FunctionDef('get_opcodes', arguments([Name('self', Param(), lineno=531, col_offset=20)], None, None, []), [Expr(Str('Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        \'replace\':  a[i1:i2] should be replaced by b[j1:j2]\n        \'delete\':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        \'insert\':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        \'equal\':    a[i1:i2] == b[j1:j2]\n\n        >>> a = "qabxcd"\n        >>> b = "abycdf"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print ("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2]))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        ', lineno=558, col_offset=-1), lineno=558, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=560, col_offset=11), 'opcodes', Load(), lineno=560, col_offset=11), [IsNot()], [Name('None', Load(), lineno=560, col_offset=31)], lineno=560, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=561, col_offset=19), 'opcodes', Load(), lineno=561, col_offset=19), lineno=561, col_offset=12)], [], lineno=560, col_offset=8), Assign([Name('i', Store(), lineno=562, col_offset=8), Name('j', Store(), lineno=562, col_offset=12)], Num(0, lineno=562, col_offset=16), lineno=562, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=563, col_offset=8), 'opcodes', Store(), lineno=563, col_offset=8), Name('answer', Store(), lineno=563, col_offset=23)], List([], Load(), lineno=563, col_offset=32), lineno=563, col_offset=8), For(Tuple([Name('ai', Store(), lineno=564, col_offset=12), Name('bj', Store(), lineno=564, col_offset=16), Name('size', Store(), lineno=564, col_offset=20)], Store(), lineno=564, col_offset=12), Call(Attribute(Name('self', Load(), lineno=564, col_offset=28), 'get_matching_blocks', Load(), lineno=564, col_offset=28), [], [], None, None, lineno=564, col_offset=28), [Assign([Name('tag', Store(), lineno=570, col_offset=12)], Str('', lineno=570, col_offset=18), lineno=570, col_offset=12), If(BoolOp(And(), [Compare(Name('i', Load(), lineno=571, col_offset=15), [Lt()], [Name('ai', Load(), lineno=571, col_offset=19)], lineno=571, col_offset=15), Compare(Name('j', Load(), lineno=571, col_offset=26), [Lt()], [Name('bj', Load(), lineno=571, col_offset=30)], lineno=571, col_offset=26)], lineno=571, col_offset=15), [Assign([Name('tag', Store(), lineno=572, col_offset=16)], Str('replace', lineno=572, col_offset=22), lineno=572, col_offset=16)], [If(Compare(Name('i', Load(), lineno=573, col_offset=17), [Lt()], [Name('ai', Load(), lineno=573, col_offset=21)], lineno=573, col_offset=17), [Assign([Name('tag', Store(), lineno=574, col_offset=16)], Str('delete', lineno=574, col_offset=22), lineno=574, col_offset=16)], [If(Compare(Name('j', Load(), lineno=575, col_offset=17), [Lt()], [Name('bj', Load(), lineno=575, col_offset=21)], lineno=575, col_offset=17), [Assign([Name('tag', Store(), lineno=576, col_offset=16)], Str('insert', lineno=576, col_offset=22), lineno=576, col_offset=16)], [], lineno=575, col_offset=17)], lineno=573, col_offset=17)], lineno=571, col_offset=12), If(Name('tag', Load(), lineno=577, col_offset=15), [Expr(Call(Attribute(Name('answer', Load(), lineno=578, col_offset=16), 'append', Load(), lineno=578, col_offset=16), [Tuple([Name('tag', Load(), lineno=578, col_offset=32), Name('i', Load(), lineno=578, col_offset=37), Name('ai', Load(), lineno=578, col_offset=40), Name('j', Load(), lineno=578, col_offset=44), Name('bj', Load(), lineno=578, col_offset=47)], Load(), lineno=578, col_offset=32)], [], None, None, lineno=578, col_offset=16), lineno=578, col_offset=16)], [], lineno=577, col_offset=12), Assign([Tuple([Name('i', Store(), lineno=579, col_offset=12), Name('j', Store(), lineno=579, col_offset=15)], Store(), lineno=579, col_offset=12)], Tuple([BinOp(Name('ai', Load(), lineno=579, col_offset=19), Add(), Name('size', Load(), lineno=579, col_offset=22), lineno=579, col_offset=19), BinOp(Name('bj', Load(), lineno=579, col_offset=28), Add(), Name('size', Load(), lineno=579, col_offset=31), lineno=579, col_offset=28)], Load(), lineno=579, col_offset=19), lineno=579, col_offset=12), If(Name('size', Load(), lineno=582, col_offset=15), [Expr(Call(Attribute(Name('answer', Load(), lineno=583, col_offset=16), 'append', Load(), lineno=583, col_offset=16), [Tuple([Str('equal', lineno=583, col_offset=32), Name('ai', Load(), lineno=583, col_offset=41), Name('i', Load(), lineno=583, col_offset=45), Name('bj', Load(), lineno=583, col_offset=48), Name('j', Load(), lineno=583, col_offset=52)], Load(), lineno=583, col_offset=32)], [], None, None, lineno=583, col_offset=16), lineno=583, col_offset=16)], [], lineno=582, col_offset=12)], [], lineno=564, col_offset=8), Return(Name('answer', Load(), lineno=584, col_offset=15), lineno=584, col_offset=8)], [], lineno=531, col_offset=4), FunctionDef('get_grouped_opcodes', arguments([Name('self', Param(), lineno=586, col_offset=28), Name('n', Param(), lineno=586, col_offset=34)], None, None, [Num(3, lineno=586, col_offset=36)]), [Expr(Str(" Isolate change clusters by eliminating ranges with no changes.\n\n        Return a generator of groups with upto n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n\n        >>> from pprint import pprint\n        >>> a = map(str, range(1,40))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        ", lineno=609, col_offset=-1), lineno=609, col_offset=-1), Assign([Name('codes', Store(), lineno=611, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=611, col_offset=16), 'get_opcodes', Load(), lineno=611, col_offset=16), [], [], None, None, lineno=611, col_offset=16), lineno=611, col_offset=8), If(UnaryOp(Not(), Name('codes', Load(), lineno=612, col_offset=15), lineno=612, col_offset=11), [Assign([Name('codes', Store(), lineno=613, col_offset=12)], List([Tuple([Str('equal', lineno=613, col_offset=22), Num(0, lineno=613, col_offset=31), Num(1, lineno=613, col_offset=34), Num(0, lineno=613, col_offset=37), Num(1, lineno=613, col_offset=40)], Load(), lineno=613, col_offset=22)], Load(), lineno=613, col_offset=20), lineno=613, col_offset=12)], [], lineno=612, col_offset=8), If(Compare(Subscript(Subscript(Name('codes', Load(), lineno=615, col_offset=11), Index(Num(0, lineno=615, col_offset=17)), Load(), lineno=615, col_offset=11), Index(Num(0, lineno=615, col_offset=20)), Load(), lineno=615, col_offset=11), [Eq()], [Str('equal', lineno=615, col_offset=26)], lineno=615, col_offset=11), [Assign([Tuple([Name('tag', Store(), lineno=616, col_offset=12), Name('i1', Store(), lineno=616, col_offset=17), Name('i2', Store(), lineno=616, col_offset=21), Name('j1', Store(), lineno=616, col_offset=25), Name('j2', Store(), lineno=616, col_offset=29)], Store(), lineno=616, col_offset=12)], Subscript(Name('codes', Load(), lineno=616, col_offset=34), Index(Num(0, lineno=616, col_offset=40)), Load(), lineno=616, col_offset=34), lineno=616, col_offset=12), Assign([Subscript(Name('codes', Load(), lineno=617, col_offset=12), Index(Num(0, lineno=617, col_offset=18)), Store(), lineno=617, col_offset=12)], Tuple([Name('tag', Load(), lineno=617, col_offset=23), Call(Name('max', Load(), lineno=617, col_offset=28), [Name('i1', Load(), lineno=617, col_offset=32), BinOp(Name('i2', Load(), lineno=617, col_offset=36), Sub(), Name('n', Load(), lineno=617, col_offset=39), lineno=617, col_offset=36)], [], None, None, lineno=617, col_offset=28), Name('i2', Load(), lineno=617, col_offset=43), Call(Name('max', Load(), lineno=617, col_offset=47), [Name('j1', Load(), lineno=617, col_offset=51), BinOp(Name('j2', Load(), lineno=617, col_offset=55), Sub(), Name('n', Load(), lineno=617, col_offset=58), lineno=617, col_offset=55)], [], None, None, lineno=617, col_offset=47), Name('j2', Load(), lineno=617, col_offset=62)], Load(), lineno=617, col_offset=23), lineno=617, col_offset=12)], [], lineno=615, col_offset=8), If(Compare(Subscript(Subscript(Name('codes', Load(), lineno=618, col_offset=11), Index(Num(-1, lineno=618, col_offset=18)), Load(), lineno=618, col_offset=11), Index(Num(0, lineno=618, col_offset=21)), Load(), lineno=618, col_offset=11), [Eq()], [Str('equal', lineno=618, col_offset=27)], lineno=618, col_offset=11), [Assign([Tuple([Name('tag', Store(), lineno=619, col_offset=12), Name('i1', Store(), lineno=619, col_offset=17), Name('i2', Store(), lineno=619, col_offset=21), Name('j1', Store(), lineno=619, col_offset=25), Name('j2', Store(), lineno=619, col_offset=29)], Store(), lineno=619, col_offset=12)], Subscript(Name('codes', Load(), lineno=619, col_offset=34), Index(Num(-1, lineno=619, col_offset=41)), Load(), lineno=619, col_offset=34), lineno=619, col_offset=12), Assign([Subscript(Name('codes', Load(), lineno=620, col_offset=12), Index(Num(-1, lineno=620, col_offset=19)), Store(), lineno=620, col_offset=12)], Tuple([Name('tag', Load(), lineno=620, col_offset=24), Name('i1', Load(), lineno=620, col_offset=29), Call(Name('min', Load(), lineno=620, col_offset=33), [Name('i2', Load(), lineno=620, col_offset=37), BinOp(Name('i1', Load(), lineno=620, col_offset=41), Add(), Name('n', Load(), lineno=620, col_offset=44), lineno=620, col_offset=41)], [], None, None, lineno=620, col_offset=33), Name('j1', Load(), lineno=620, col_offset=48), Call(Name('min', Load(), lineno=620, col_offset=52), [Name('j2', Load(), lineno=620, col_offset=56), BinOp(Name('j1', Load(), lineno=620, col_offset=60), Add(), Name('n', Load(), lineno=620, col_offset=63), lineno=620, col_offset=60)], [], None, None, lineno=620, col_offset=52)], Load(), lineno=620, col_offset=24), lineno=620, col_offset=12)], [], lineno=618, col_offset=8), Assign([Name('nn', Store(), lineno=622, col_offset=8)], BinOp(Name('n', Load(), lineno=622, col_offset=13), Add(), Name('n', Load(), lineno=622, col_offset=17), lineno=622, col_offset=13), lineno=622, col_offset=8), Assign([Name('group', Store(), lineno=623, col_offset=8)], List([], Load(), lineno=623, col_offset=16), lineno=623, col_offset=8), For(Tuple([Name('tag', Store(), lineno=624, col_offset=12), Name('i1', Store(), lineno=624, col_offset=17), Name('i2', Store(), lineno=624, col_offset=21), Name('j1', Store(), lineno=624, col_offset=25), Name('j2', Store(), lineno=624, col_offset=29)], Store(), lineno=624, col_offset=12), Name('codes', Load(), lineno=624, col_offset=35), [If(BoolOp(And(), [Compare(Name('tag', Load(), lineno=627, col_offset=15), [Eq()], [Str('equal', lineno=627, col_offset=22)], lineno=627, col_offset=15), Compare(BinOp(Name('i2', Load(), lineno=627, col_offset=34), Sub(), Name('i1', Load(), lineno=627, col_offset=37), lineno=627, col_offset=34), [Gt()], [Name('nn', Load(), lineno=627, col_offset=42)], lineno=627, col_offset=34)], lineno=627, col_offset=15), [Expr(Call(Attribute(Name('group', Load(), lineno=628, col_offset=16), 'append', Load(), lineno=628, col_offset=16), [Tuple([Name('tag', Load(), lineno=628, col_offset=30), Name('i1', Load(), lineno=628, col_offset=35), Call(Name('min', Load(), lineno=628, col_offset=39), [Name('i2', Load(), lineno=628, col_offset=43), BinOp(Name('i1', Load(), lineno=628, col_offset=47), Add(), Name('n', Load(), lineno=628, col_offset=50), lineno=628, col_offset=47)], [], None, None, lineno=628, col_offset=39), Name('j1', Load(), lineno=628, col_offset=54), Call(Name('min', Load(), lineno=628, col_offset=58), [Name('j2', Load(), lineno=628, col_offset=62), BinOp(Name('j1', Load(), lineno=628, col_offset=66), Add(), Name('n', Load(), lineno=628, col_offset=69), lineno=628, col_offset=66)], [], None, None, lineno=628, col_offset=58)], Load(), lineno=628, col_offset=30)], [], None, None, lineno=628, col_offset=16), lineno=628, col_offset=16), Expr(Yield(Name('group', Load(), lineno=629, col_offset=22), lineno=629, col_offset=16), lineno=629, col_offset=16), Assign([Name('group', Store(), lineno=630, col_offset=16)], List([], Load(), lineno=630, col_offset=24), lineno=630, col_offset=16), Assign([Tuple([Name('i1', Store(), lineno=631, col_offset=16), Name('j1', Store(), lineno=631, col_offset=20)], Store(), lineno=631, col_offset=16)], Tuple([Call(Name('max', Load(), lineno=631, col_offset=25), [Name('i1', Load(), lineno=631, col_offset=29), BinOp(Name('i2', Load(), lineno=631, col_offset=33), Sub(), Name('n', Load(), lineno=631, col_offset=36), lineno=631, col_offset=33)], [], None, None, lineno=631, col_offset=25), Call(Name('max', Load(), lineno=631, col_offset=40), [Name('j1', Load(), lineno=631, col_offset=44), BinOp(Name('j2', Load(), lineno=631, col_offset=48), Sub(), Name('n', Load(), lineno=631, col_offset=51), lineno=631, col_offset=48)], [], None, None, lineno=631, col_offset=40)], Load(), lineno=631, col_offset=25), lineno=631, col_offset=16)], [], lineno=627, col_offset=12), Expr(Call(Attribute(Name('group', Load(), lineno=632, col_offset=12), 'append', Load(), lineno=632, col_offset=12), [Tuple([Name('tag', Load(), lineno=632, col_offset=26), Name('i1', Load(), lineno=632, col_offset=31), Name('i2', Load(), lineno=632, col_offset=35), Name('j1', Load(), lineno=632, col_offset=39), Name('j2', Load(), lineno=632, col_offset=43)], Load(), lineno=632, col_offset=26)], [], None, None, lineno=632, col_offset=12), lineno=632, col_offset=12)], [], lineno=624, col_offset=8), If(BoolOp(And(), [Name('group', Load(), lineno=633, col_offset=11), UnaryOp(Not(), BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=633, col_offset=26), [Name('group', Load(), lineno=633, col_offset=30)], [], None, None, lineno=633, col_offset=26), [Eq()], [Num(1, lineno=633, col_offset=38)], lineno=633, col_offset=26), Compare(Subscript(Subscript(Name('group', Load(), lineno=633, col_offset=44), Index(Num(0, lineno=633, col_offset=50)), Load(), lineno=633, col_offset=44), Index(Num(0, lineno=633, col_offset=53)), Load(), lineno=633, col_offset=44), [Eq()], [Str('equal', lineno=633, col_offset=59)], lineno=633, col_offset=44)], lineno=633, col_offset=26), lineno=633, col_offset=21)], lineno=633, col_offset=11), [Expr(Yield(Name('group', Load(), lineno=634, col_offset=18), lineno=634, col_offset=12), lineno=634, col_offset=12)], [], lineno=633, col_offset=8)], [], lineno=586, col_offset=4), FunctionDef('ratio', arguments([Name('self', Param(), lineno=636, col_offset=14)], None, None, []), [Expr(Str('Return a measure of the sequences\' similarity (float in [0,1]).\n\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n\n        .ratio() is expensive to compute if you haven\'t already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        ', lineno=656, col_offset=-1), lineno=656, col_offset=-1), Assign([Name('matches', Store(), lineno=658, col_offset=8)], Call(Name('reduce', Load(), lineno=658, col_offset=18), [Lambda(arguments([Name('sum', Param(), lineno=658, col_offset=32), Name('triple', Param(), lineno=658, col_offset=37)], None, None, []), BinOp(Name('sum', Load(), lineno=658, col_offset=45), Add(), Subscript(Name('triple', Load(), lineno=658, col_offset=51), Index(Num(-1, lineno=658, col_offset=59)), Load(), lineno=658, col_offset=51), lineno=658, col_offset=45), lineno=658, col_offset=25), Call(Attribute(Name('self', Load(), lineno=659, col_offset=25), 'get_matching_blocks', Load(), lineno=659, col_offset=25), [], [], None, None, lineno=659, col_offset=25), Num(0, lineno=659, col_offset=53)], [], None, None, lineno=658, col_offset=18), lineno=658, col_offset=8), Return(Call(Name('_calculate_ratio', Load(), lineno=660, col_offset=15), [Name('matches', Load(), lineno=660, col_offset=32), BinOp(Call(Name('len', Load(), lineno=660, col_offset=41), [Attribute(Name('self', Load(), lineno=660, col_offset=45), 'a', Load(), lineno=660, col_offset=45)], [], None, None, lineno=660, col_offset=41), Add(), Call(Name('len', Load(), lineno=660, col_offset=55), [Attribute(Name('self', Load(), lineno=660, col_offset=59), 'b', Load(), lineno=660, col_offset=59)], [], None, None, lineno=660, col_offset=55), lineno=660, col_offset=41)], [], None, None, lineno=660, col_offset=15), lineno=660, col_offset=8)], [], lineno=636, col_offset=4), FunctionDef('quick_ratio', arguments([Name('self', Param(), lineno=662, col_offset=20)], None, None, []), [Expr(Str("Return an upper bound on ratio() relatively quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute.\n        ", lineno=667, col_offset=-1), lineno=667, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=672, col_offset=11), 'fullbcount', Load(), lineno=672, col_offset=11), [Is()], [Name('None', Load(), lineno=672, col_offset=30)], lineno=672, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=673, col_offset=12), 'fullbcount', Store(), lineno=673, col_offset=12), Name('fullbcount', Store(), lineno=673, col_offset=30)], Dict([], [], lineno=673, col_offset=43), lineno=673, col_offset=12), For(Name('elt', Store(), lineno=674, col_offset=16), Attribute(Name('self', Load(), lineno=674, col_offset=23), 'b', Load(), lineno=674, col_offset=23), [Assign([Subscript(Name('fullbcount', Load(), lineno=675, col_offset=16), Index(Name('elt', Load(), lineno=675, col_offset=27)), Store(), lineno=675, col_offset=16)], BinOp(Call(Attribute(Name('fullbcount', Load(), lineno=675, col_offset=34), 'get', Load(), lineno=675, col_offset=34), [Name('elt', Load(), lineno=675, col_offset=49), Num(0, lineno=675, col_offset=54)], [], None, None, lineno=675, col_offset=34), Add(), Num(1, lineno=675, col_offset=59), lineno=675, col_offset=34), lineno=675, col_offset=16)], [], lineno=674, col_offset=12)], [], lineno=672, col_offset=8), Assign([Name('fullbcount', Store(), lineno=676, col_offset=8)], Attribute(Name('self', Load(), lineno=676, col_offset=21), 'fullbcount', Load(), lineno=676, col_offset=21), lineno=676, col_offset=8), Assign([Name('avail', Store(), lineno=679, col_offset=8)], Dict([], [], lineno=679, col_offset=16), lineno=679, col_offset=8), Assign([Tuple([Name('availhas', Store(), lineno=680, col_offset=8), Name('matches', Store(), lineno=680, col_offset=18)], Store(), lineno=680, col_offset=8)], Tuple([Attribute(Name('avail', Load(), lineno=680, col_offset=28), '__contains__', Load(), lineno=680, col_offset=28), Num(0, lineno=680, col_offset=48)], Load(), lineno=680, col_offset=28), lineno=680, col_offset=8), For(Name('elt', Store(), lineno=681, col_offset=12), Attribute(Name('self', Load(), lineno=681, col_offset=19), 'a', Load(), lineno=681, col_offset=19), [If(Call(Name('availhas', Load(), lineno=682, col_offset=15), [Name('elt', Load(), lineno=682, col_offset=24)], [], None, None, lineno=682, col_offset=15), [Assign([Name('numb', Store(), lineno=683, col_offset=16)], Subscript(Name('avail', Load(), lineno=683, col_offset=23), Index(Name('elt', Load(), lineno=683, col_offset=29)), Load(), lineno=683, col_offset=23), lineno=683, col_offset=16)], [Assign([Name('numb', Store(), lineno=685, col_offset=16)], Call(Attribute(Name('fullbcount', Load(), lineno=685, col_offset=23), 'get', Load(), lineno=685, col_offset=23), [Name('elt', Load(), lineno=685, col_offset=38), Num(0, lineno=685, col_offset=43)], [], None, None, lineno=685, col_offset=23), lineno=685, col_offset=16)], lineno=682, col_offset=12), Assign([Subscript(Name('avail', Load(), lineno=686, col_offset=12), Index(Name('elt', Load(), lineno=686, col_offset=18)), Store(), lineno=686, col_offset=12)], BinOp(Name('numb', Load(), lineno=686, col_offset=25), Sub(), Num(1, lineno=686, col_offset=32), lineno=686, col_offset=25), lineno=686, col_offset=12), If(Compare(Name('numb', Load(), lineno=687, col_offset=15), [Gt()], [Num(0, lineno=687, col_offset=22)], lineno=687, col_offset=15), [Assign([Name('matches', Store(), lineno=688, col_offset=16)], BinOp(Name('matches', Load(), lineno=688, col_offset=26), Add(), Num(1, lineno=688, col_offset=36), lineno=688, col_offset=26), lineno=688, col_offset=16)], [], lineno=687, col_offset=12)], [], lineno=681, col_offset=8), Return(Call(Name('_calculate_ratio', Load(), lineno=689, col_offset=15), [Name('matches', Load(), lineno=689, col_offset=32), BinOp(Call(Name('len', Load(), lineno=689, col_offset=41), [Attribute(Name('self', Load(), lineno=689, col_offset=45), 'a', Load(), lineno=689, col_offset=45)], [], None, None, lineno=689, col_offset=41), Add(), Call(Name('len', Load(), lineno=689, col_offset=55), [Attribute(Name('self', Load(), lineno=689, col_offset=59), 'b', Load(), lineno=689, col_offset=59)], [], None, None, lineno=689, col_offset=55), lineno=689, col_offset=41)], [], None, None, lineno=689, col_offset=15), lineno=689, col_offset=8)], [], lineno=662, col_offset=4), FunctionDef('real_quick_ratio', arguments([Name('self', Param(), lineno=691, col_offset=25)], None, None, []), [Expr(Str("Return an upper bound on ratio() very quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute than either .ratio() or .quick_ratio().\n        ", lineno=696, col_offset=-1), lineno=696, col_offset=-1), Assign([Tuple([Name('la', Store(), lineno=698, col_offset=8), Name('lb', Store(), lineno=698, col_offset=12)], Store(), lineno=698, col_offset=8)], Tuple([Call(Name('len', Load(), lineno=698, col_offset=17), [Attribute(Name('self', Load(), lineno=698, col_offset=21), 'a', Load(), lineno=698, col_offset=21)], [], None, None, lineno=698, col_offset=17), Call(Name('len', Load(), lineno=698, col_offset=30), [Attribute(Name('self', Load(), lineno=698, col_offset=34), 'b', Load(), lineno=698, col_offset=34)], [], None, None, lineno=698, col_offset=30)], Load(), lineno=698, col_offset=17), lineno=698, col_offset=8), Return(Call(Name('_calculate_ratio', Load(), lineno=701, col_offset=15), [Call(Name('min', Load(), lineno=701, col_offset=32), [Name('la', Load(), lineno=701, col_offset=36), Name('lb', Load(), lineno=701, col_offset=40)], [], None, None, lineno=701, col_offset=32), BinOp(Name('la', Load(), lineno=701, col_offset=45), Add(), Name('lb', Load(), lineno=701, col_offset=50), lineno=701, col_offset=45)], [], None, None, lineno=701, col_offset=15), lineno=701, col_offset=8)], [], lineno=691, col_offset=4)], [], lineno=46, col_offset=0), FunctionDef('get_close_matches', arguments([Name('word', Param(), lineno=703, col_offset=22), Name('possibilities', Param(), lineno=703, col_offset=28), Name('n', Param(), lineno=703, col_offset=43), Name('cutoff', Param(), lineno=703, col_offset=48)], None, None, [Num(3, lineno=703, col_offset=45), Num(0.6, lineno=703, col_offset=55)]), [Expr(Str('Use SequenceMatcher to return list of the best "good enough" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don\'t score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])\n    [\'apple\', \'ape\']\n    >>> import keyword as _keyword\n    >>> get_close_matches("wheel", _keyword.kwlist)\n    [\'while\']\n    >>> get_close_matches("apple", _keyword.kwlist)\n    []\n    >>> get_close_matches("accept", _keyword.kwlist)\n    [\'except\']\n    ', lineno=730, col_offset=-1), lineno=730, col_offset=-1), If(UnaryOp(Not(), Compare(Name('n', Load(), lineno=732, col_offset=11), [Gt()], [Num(0, lineno=732, col_offset=16)], lineno=732, col_offset=11), lineno=732, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=733, col_offset=14), [BinOp(Str('n must be > 0: %r', lineno=733, col_offset=25), Mod(), Tuple([Name('n', Load(), lineno=733, col_offset=48)], Load(), lineno=733, col_offset=48), lineno=733, col_offset=25)], [], None, None, lineno=733, col_offset=14), None, None, lineno=733, col_offset=8)], [], lineno=732, col_offset=4), If(UnaryOp(Not(), Compare(Num(0.0, lineno=734, col_offset=11), [LtE(), LtE()], [Name('cutoff', Load(), lineno=734, col_offset=18), Num(1.0, lineno=734, col_offset=28)], lineno=734, col_offset=11), lineno=734, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=735, col_offset=14), [BinOp(Str('cutoff must be in [0.0, 1.0]: %r', lineno=735, col_offset=25), Mod(), Tuple([Name('cutoff', Load(), lineno=735, col_offset=63)], Load(), lineno=735, col_offset=63), lineno=735, col_offset=25)], [], None, None, lineno=735, col_offset=14), None, None, lineno=735, col_offset=8)], [], lineno=734, col_offset=4), Assign([Name('result', Store(), lineno=736, col_offset=4)], List([], Load(), lineno=736, col_offset=13), lineno=736, col_offset=4), Assign([Name('s', Store(), lineno=737, col_offset=4)], Call(Name('SequenceMatcher', Load(), lineno=737, col_offset=8), [], [], None, None, lineno=737, col_offset=8), lineno=737, col_offset=4), Expr(Call(Attribute(Name('s', Load(), lineno=738, col_offset=4), 'set_seq2', Load(), lineno=738, col_offset=4), [Name('word', Load(), lineno=738, col_offset=15)], [], None, None, lineno=738, col_offset=4), lineno=738, col_offset=4), For(Name('x', Store(), lineno=739, col_offset=8), Name('possibilities', Load(), lineno=739, col_offset=13), [Expr(Call(Attribute(Name('s', Load(), lineno=740, col_offset=8), 'set_seq1', Load(), lineno=740, col_offset=8), [Name('x', Load(), lineno=740, col_offset=19)], [], None, None, lineno=740, col_offset=8), lineno=740, col_offset=8), If(BoolOp(And(), [Compare(Call(Attribute(Name('s', Load(), lineno=741, col_offset=11), 'real_quick_ratio', Load(), lineno=741, col_offset=11), [], [], None, None, lineno=741, col_offset=11), [GtE()], [Name('cutoff', Load(), lineno=741, col_offset=35)], lineno=741, col_offset=11), Compare(Call(Attribute(Name('s', Load(), lineno=742, col_offset=11), 'quick_ratio', Load(), lineno=742, col_offset=11), [], [], None, None, lineno=742, col_offset=11), [GtE()], [Name('cutoff', Load(), lineno=742, col_offset=30)], lineno=742, col_offset=11), Compare(Call(Attribute(Name('s', Load(), lineno=743, col_offset=11), 'ratio', Load(), lineno=743, col_offset=11), [], [], None, None, lineno=743, col_offset=11), [GtE()], [Name('cutoff', Load(), lineno=743, col_offset=24)], lineno=743, col_offset=11)], lineno=741, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=744, col_offset=12), 'append', Load(), lineno=744, col_offset=12), [Tuple([Call(Attribute(Name('s', Load(), lineno=744, col_offset=27), 'ratio', Load(), lineno=744, col_offset=27), [], [], None, None, lineno=744, col_offset=27), Name('x', Load(), lineno=744, col_offset=38)], Load(), lineno=744, col_offset=27)], [], None, None, lineno=744, col_offset=12), lineno=744, col_offset=12)], [], lineno=741, col_offset=8)], [], lineno=739, col_offset=4), Assign([Name('result', Store(), lineno=747, col_offset=4)], Call(Attribute(Name('heapq', Load(), lineno=747, col_offset=13), 'nlargest', Load(), lineno=747, col_offset=13), [Name('n', Load(), lineno=747, col_offset=28), Name('result', Load(), lineno=747, col_offset=31)], [], None, None, lineno=747, col_offset=13), lineno=747, col_offset=4), Return(ListComp(Name('x', Load(), lineno=749, col_offset=12), [comprehension(Tuple([Name('score', Store(), lineno=749, col_offset=18), Name('x', Store(), lineno=749, col_offset=25)], Store(), lineno=749, col_offset=18), Name('result', Load(), lineno=749, col_offset=30), [])], lineno=749, col_offset=12), lineno=749, col_offset=4)], [], lineno=703, col_offset=0), FunctionDef('_count_leading', arguments([Name('line', Param(), lineno=751, col_offset=19), Name('ch', Param(), lineno=751, col_offset=25)], None, None, []), [Expr(Str("\n    Return number of `ch` characters at the start of `line`.\n\n    Example:\n\n    >>> _count_leading('   abc', ' ')\n    3\n    ", lineno=759, col_offset=-1), lineno=759, col_offset=-1), Assign([Tuple([Name('i', Store(), lineno=761, col_offset=4), Name('n', Store(), lineno=761, col_offset=7)], Store(), lineno=761, col_offset=4)], Tuple([Num(0, lineno=761, col_offset=11), Call(Name('len', Load(), lineno=761, col_offset=14), [Name('line', Load(), lineno=761, col_offset=18)], [], None, None, lineno=761, col_offset=14)], Load(), lineno=761, col_offset=11), lineno=761, col_offset=4), While(BoolOp(And(), [Compare(Name('i', Load(), lineno=762, col_offset=10), [Lt()], [Name('n', Load(), lineno=762, col_offset=14)], lineno=762, col_offset=10), Compare(Subscript(Name('line', Load(), lineno=762, col_offset=20), Index(Name('i', Load(), lineno=762, col_offset=25)), Load(), lineno=762, col_offset=20), [Eq()], [Name('ch', Load(), lineno=762, col_offset=31)], lineno=762, col_offset=20)], lineno=762, col_offset=10), [AugAssign(Name('i', Store(), lineno=763, col_offset=8), Add(), Num(1, lineno=763, col_offset=13), lineno=763, col_offset=8)], [], lineno=762, col_offset=4), Return(Name('i', Load(), lineno=764, col_offset=11), lineno=764, col_offset=4)], [], lineno=751, col_offset=0), ClassDef('Differ', [], [Expr(Str("\n    Differ is a class for comparing sequences of lines of text, and\n    producing human-readable differences or deltas.  Differ uses\n    SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    Each line of a Differ delta begins with a two-letter code:\n\n        '- '    line unique to sequence 1\n        '+ '    line unique to sequence 2\n        '  '    line common to both sequences\n        '? '    line not present in either input sequence\n\n    Lines beginning with '? ' attempt to guide the eye to intraline\n    differences, and were not present in either input sequence.  These lines\n    can be confusing if the sequences contain tab characters.\n\n    Note that Differ makes no claim to produce a *minimal* diff.  To the\n    contrary, minimal diffs are often counter-intuitive, because they synch\n    up anywhere possible, sometimes accidental matches 100 pages apart.\n    Restricting synch points to contiguous matches preserves some notion of\n    locality, at the occasional cost of producing a longer diff.\n\n    Example: Comparing two texts.\n\n    First we set up the texts, sequences of individual single-line strings\n    ending with newlines (such sequences can also be obtained from the\n    `readlines()` method of file-like objects):\n\n    >>> text1 = '''  1. Beautiful is better than ugly.\n    ...   2. Explicit is better than implicit.\n    ...   3. Simple is better than complex.\n    ...   4. Complex is better than complicated.\n    ... '''.splitlines(1)\n    >>> len(text1)\n    4\n    >>> text1[0][-1]\n    '\\n'\n    >>> text2 = '''  1. Beautiful is better than ugly.\n    ...   3.   Simple is better than complex.\n    ...   4. Complicated is better than complex.\n    ...   5. Flat is better than nested.\n    ... '''.splitlines(1)\n\n    Next we instantiate a Differ object:\n\n    >>> d = Differ()\n\n    Note that when instantiating a Differ object we may pass functions to\n    filter out line and character 'junk'.  See Differ.__init__ for details.\n\n    Finally, we compare the two:\n\n    >>> result = list(d.compare(text1, text2))\n\n    'result' is a list of strings, so let's pretty-print it:\n\n    >>> from pprint import pprint as _pprint\n    >>> _pprint(result)\n    ['    1. Beautiful is better than ugly.\\n',\n     '-   2. Explicit is better than implicit.\\n',\n     '-   3. Simple is better than complex.\\n',\n     '+   3.   Simple is better than complex.\\n',\n     '?     ++\\n',\n     '-   4. Complex is better than complicated.\\n',\n     '?            ^                     ---- ^\\n',\n     '+   4. Complicated is better than complex.\\n',\n     '?           ++++ ^                      ^\\n',\n     '+   5. Flat is better than nested.\\n']\n\n    As a single multi-line string it looks like this:\n\n    >>> print ''.join(result),\n        1. Beautiful is better than ugly.\n    -   2. Explicit is better than implicit.\n    -   3. Simple is better than complex.\n    +   3.   Simple is better than complex.\n    ?     ++\n    -   4. Complex is better than complicated.\n    ?            ^                     ---- ^\n    +   4. Complicated is better than complex.\n    ?           ++++ ^                      ^\n    +   5. Flat is better than nested.\n\n    Methods:\n\n    __init__(linejunk=None, charjunk=None)\n        Construct a text differencer, with optional filters.\n\n    compare(a, b)\n        Compare two sequences of lines; generate the resulting delta.\n    ", lineno=858, col_offset=-1), lineno=858, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=860, col_offset=17), Name('linejunk', Param(), lineno=860, col_offset=23), Name('charjunk', Param(), lineno=860, col_offset=38)], None, None, [Name('None', Load(), lineno=860, col_offset=32), Name('None', Load(), lineno=860, col_offset=47)]), [Expr(Str('\n        Construct a text differencer, with optional filters.\n\n        The two optional keyword parameters are for filter functions:\n\n        - `linejunk`: A function that should accept a single string argument,\n          and return true iff the string is junk. The module-level function\n          `IS_LINE_JUNK` may be used to filter out lines without visible\n          characters, except for at most one splat (\'#\').  It is recommended\n          to leave linejunk None; as of Python 2.3, the underlying\n          SequenceMatcher class has grown an adaptive notion of "noise" lines\n          that\'s better than any static definition the author has ever been\n          able to craft.\n\n        - `charjunk`: A function that should accept a string of length 1. The\n          module-level function `IS_CHARACTER_JUNK` may be used to filter out\n          whitespace characters (a blank or tab; **note**: bad idea to include\n          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.\n        ', lineno=879, col_offset=-1), lineno=879, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=881, col_offset=8), 'linejunk', Store(), lineno=881, col_offset=8)], Name('linejunk', Load(), lineno=881, col_offset=24), lineno=881, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=882, col_offset=8), 'charjunk', Store(), lineno=882, col_offset=8)], Name('charjunk', Load(), lineno=882, col_offset=24), lineno=882, col_offset=8)], [], lineno=860, col_offset=4), FunctionDef('compare', arguments([Name('self', Param(), lineno=884, col_offset=16), Name('a', Param(), lineno=884, col_offset=22), Name('b', Param(), lineno=884, col_offset=25)], None, None, []), [Expr(Str("\n        Compare two sequences of lines; generate the resulting delta.\n\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n\n        Example:\n\n        >>> print ''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(1),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(1))),\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        ", lineno=907, col_offset=-1), lineno=907, col_offset=-1), Assign([Name('cruncher', Store(), lineno=909, col_offset=8)], Call(Name('SequenceMatcher', Load(), lineno=909, col_offset=19), [Attribute(Name('self', Load(), lineno=909, col_offset=35), 'linejunk', Load(), lineno=909, col_offset=35), Name('a', Load(), lineno=909, col_offset=50), Name('b', Load(), lineno=909, col_offset=53)], [], None, None, lineno=909, col_offset=19), lineno=909, col_offset=8), For(Tuple([Name('tag', Store(), lineno=910, col_offset=12), Name('alo', Store(), lineno=910, col_offset=17), Name('ahi', Store(), lineno=910, col_offset=22), Name('blo', Store(), lineno=910, col_offset=27), Name('bhi', Store(), lineno=910, col_offset=32)], Store(), lineno=910, col_offset=12), Call(Attribute(Name('cruncher', Load(), lineno=910, col_offset=39), 'get_opcodes', Load(), lineno=910, col_offset=39), [], [], None, None, lineno=910, col_offset=39), [If(Compare(Name('tag', Load(), lineno=911, col_offset=15), [Eq()], [Str('replace', lineno=911, col_offset=22)], lineno=911, col_offset=15), [Assign([Name('g', Store(), lineno=912, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=912, col_offset=20), '_fancy_replace', Load(), lineno=912, col_offset=20), [Name('a', Load(), lineno=912, col_offset=40), Name('alo', Load(), lineno=912, col_offset=43), Name('ahi', Load(), lineno=912, col_offset=48), Name('b', Load(), lineno=912, col_offset=53), Name('blo', Load(), lineno=912, col_offset=56), Name('bhi', Load(), lineno=912, col_offset=61)], [], None, None, lineno=912, col_offset=20), lineno=912, col_offset=16)], [If(Compare(Name('tag', Load(), lineno=913, col_offset=17), [Eq()], [Str('delete', lineno=913, col_offset=24)], lineno=913, col_offset=17), [Assign([Name('g', Store(), lineno=914, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=914, col_offset=20), '_dump', Load(), lineno=914, col_offset=20), [Str('-', lineno=914, col_offset=31), Name('a', Load(), lineno=914, col_offset=36), Name('alo', Load(), lineno=914, col_offset=39), Name('ahi', Load(), lineno=914, col_offset=44)], [], None, None, lineno=914, col_offset=20), lineno=914, col_offset=16)], [If(Compare(Name('tag', Load(), lineno=915, col_offset=17), [Eq()], [Str('insert', lineno=915, col_offset=24)], lineno=915, col_offset=17), [Assign([Name('g', Store(), lineno=916, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=916, col_offset=20), '_dump', Load(), lineno=916, col_offset=20), [Str('+', lineno=916, col_offset=31), Name('b', Load(), lineno=916, col_offset=36), Name('blo', Load(), lineno=916, col_offset=39), Name('bhi', Load(), lineno=916, col_offset=44)], [], None, None, lineno=916, col_offset=20), lineno=916, col_offset=16)], [If(Compare(Name('tag', Load(), lineno=917, col_offset=17), [Eq()], [Str('equal', lineno=917, col_offset=24)], lineno=917, col_offset=17), [Assign([Name('g', Store(), lineno=918, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=918, col_offset=20), '_dump', Load(), lineno=918, col_offset=20), [Str(' ', lineno=918, col_offset=31), Name('a', Load(), lineno=918, col_offset=36), Name('alo', Load(), lineno=918, col_offset=39), Name('ahi', Load(), lineno=918, col_offset=44)], [], None, None, lineno=918, col_offset=20), lineno=918, col_offset=16)], [Raise(Name('ValueError', Load(), lineno=920, col_offset=22), BinOp(Str('unknown tag %r', lineno=920, col_offset=34), Mod(), Tuple([Name('tag', Load(), lineno=920, col_offset=54)], Load(), lineno=920, col_offset=54), lineno=920, col_offset=34), None, lineno=920, col_offset=16)], lineno=917, col_offset=17)], lineno=915, col_offset=17)], lineno=913, col_offset=17)], lineno=911, col_offset=12), For(Name('line', Store(), lineno=922, col_offset=16), Name('g', Load(), lineno=922, col_offset=24), [Expr(Yield(Name('line', Load(), lineno=923, col_offset=22), lineno=923, col_offset=16), lineno=923, col_offset=16)], [], lineno=922, col_offset=12)], [], lineno=910, col_offset=8)], [], lineno=884, col_offset=4), FunctionDef('_dump', arguments([Name('self', Param(), lineno=925, col_offset=14), Name('tag', Param(), lineno=925, col_offset=20), Name('x', Param(), lineno=925, col_offset=25), Name('lo', Param(), lineno=925, col_offset=28), Name('hi', Param(), lineno=925, col_offset=32)], None, None, []), [Expr(Str('Generate comparison results for a same-tagged range.', lineno=926, col_offset=8), lineno=926, col_offset=8), For(Name('i', Store(), lineno=927, col_offset=12), Call(Name('xrange', Load(), lineno=927, col_offset=17), [Name('lo', Load(), lineno=927, col_offset=24), Name('hi', Load(), lineno=927, col_offset=28)], [], None, None, lineno=927, col_offset=17), [Expr(Yield(BinOp(Str('%s %s', lineno=928, col_offset=18), Mod(), Tuple([Name('tag', Load(), lineno=928, col_offset=29), Subscript(Name('x', Load(), lineno=928, col_offset=34), Index(Name('i', Load(), lineno=928, col_offset=36)), Load(), lineno=928, col_offset=34)], Load(), lineno=928, col_offset=29), lineno=928, col_offset=18), lineno=928, col_offset=12), lineno=928, col_offset=12)], [], lineno=927, col_offset=8)], [], lineno=925, col_offset=4), FunctionDef('_plain_replace', arguments([Name('self', Param(), lineno=930, col_offset=23), Name('a', Param(), lineno=930, col_offset=29), Name('alo', Param(), lineno=930, col_offset=32), Name('ahi', Param(), lineno=930, col_offset=37), Name('b', Param(), lineno=930, col_offset=42), Name('blo', Param(), lineno=930, col_offset=45), Name('bhi', Param(), lineno=930, col_offset=50)], None, None, []), [Assert(BoolOp(And(), [Compare(Name('alo', Load(), lineno=931, col_offset=15), [Lt()], [Name('ahi', Load(), lineno=931, col_offset=21)], lineno=931, col_offset=15), Compare(Name('blo', Load(), lineno=931, col_offset=29), [Lt()], [Name('bhi', Load(), lineno=931, col_offset=35)], lineno=931, col_offset=29)], lineno=931, col_offset=15), None, lineno=931, col_offset=8), If(Compare(BinOp(Name('bhi', Load(), lineno=934, col_offset=11), Sub(), Name('blo', Load(), lineno=934, col_offset=17), lineno=934, col_offset=11), [Lt()], [BinOp(Name('ahi', Load(), lineno=934, col_offset=23), Sub(), Name('alo', Load(), lineno=934, col_offset=29), lineno=934, col_offset=23)], lineno=934, col_offset=11), [Assign([Name('first', Store(), lineno=935, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=935, col_offset=21), '_dump', Load(), lineno=935, col_offset=21), [Str('+', lineno=935, col_offset=32), Name('b', Load(), lineno=935, col_offset=37), Name('blo', Load(), lineno=935, col_offset=40), Name('bhi', Load(), lineno=935, col_offset=45)], [], None, None, lineno=935, col_offset=21), lineno=935, col_offset=12), Assign([Name('second', Store(), lineno=936, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=936, col_offset=21), '_dump', Load(), lineno=936, col_offset=21), [Str('-', lineno=936, col_offset=32), Name('a', Load(), lineno=936, col_offset=37), Name('alo', Load(), lineno=936, col_offset=40), Name('ahi', Load(), lineno=936, col_offset=45)], [], None, None, lineno=936, col_offset=21), lineno=936, col_offset=12)], [Assign([Name('first', Store(), lineno=938, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=938, col_offset=21), '_dump', Load(), lineno=938, col_offset=21), [Str('-', lineno=938, col_offset=32), Name('a', Load(), lineno=938, col_offset=37), Name('alo', Load(), lineno=938, col_offset=40), Name('ahi', Load(), lineno=938, col_offset=45)], [], None, None, lineno=938, col_offset=21), lineno=938, col_offset=12), Assign([Name('second', Store(), lineno=939, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=939, col_offset=21), '_dump', Load(), lineno=939, col_offset=21), [Str('+', lineno=939, col_offset=32), Name('b', Load(), lineno=939, col_offset=37), Name('blo', Load(), lineno=939, col_offset=40), Name('bhi', Load(), lineno=939, col_offset=45)], [], None, None, lineno=939, col_offset=21), lineno=939, col_offset=12)], lineno=934, col_offset=8), For(Name('g', Store(), lineno=941, col_offset=12), Tuple([Name('first', Load(), lineno=941, col_offset=17), Name('second', Load(), lineno=941, col_offset=24)], Load(), lineno=941, col_offset=17), [For(Name('line', Store(), lineno=942, col_offset=16), Name('g', Load(), lineno=942, col_offset=24), [Expr(Yield(Name('line', Load(), lineno=943, col_offset=22), lineno=943, col_offset=16), lineno=943, col_offset=16)], [], lineno=942, col_offset=12)], [], lineno=941, col_offset=8)], [], lineno=930, col_offset=4), FunctionDef('_fancy_replace', arguments([Name('self', Param(), lineno=945, col_offset=23), Name('a', Param(), lineno=945, col_offset=29), Name('alo', Param(), lineno=945, col_offset=32), Name('ahi', Param(), lineno=945, col_offset=37), Name('b', Param(), lineno=945, col_offset=42), Name('blo', Param(), lineno=945, col_offset=45), Name('bhi', Param(), lineno=945, col_offset=50)], None, None, []), [Expr(Str("\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print ''.join(results),\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        ", lineno=962, col_offset=-1), lineno=962, col_offset=-1), Assign([Tuple([Name('best_ratio', Store(), lineno=966, col_offset=8), Name('cutoff', Store(), lineno=966, col_offset=20)], Store(), lineno=966, col_offset=8)], Tuple([Num(0.74, lineno=966, col_offset=29), Num(0.75, lineno=966, col_offset=35)], Load(), lineno=966, col_offset=29), lineno=966, col_offset=8), Assign([Name('cruncher', Store(), lineno=967, col_offset=8)], Call(Name('SequenceMatcher', Load(), lineno=967, col_offset=19), [Attribute(Name('self', Load(), lineno=967, col_offset=35), 'charjunk', Load(), lineno=967, col_offset=35)], [], None, None, lineno=967, col_offset=19), lineno=967, col_offset=8), Assign([Tuple([Name('eqi', Store(), lineno=968, col_offset=8), Name('eqj', Store(), lineno=968, col_offset=13)], Store(), lineno=968, col_offset=8)], Tuple([Name('None', Load(), lineno=968, col_offset=19), Name('None', Load(), lineno=968, col_offset=25)], Load(), lineno=968, col_offset=19), lineno=968, col_offset=8), For(Name('j', Store(), lineno=973, col_offset=12), Call(Name('xrange', Load(), lineno=973, col_offset=17), [Name('blo', Load(), lineno=973, col_offset=24), Name('bhi', Load(), lineno=973, col_offset=29)], [], None, None, lineno=973, col_offset=17), [Assign([Name('bj', Store(), lineno=974, col_offset=12)], Subscript(Name('b', Load(), lineno=974, col_offset=17), Index(Name('j', Load(), lineno=974, col_offset=19)), Load(), lineno=974, col_offset=17), lineno=974, col_offset=12), Expr(Call(Attribute(Name('cruncher', Load(), lineno=975, col_offset=12), 'set_seq2', Load(), lineno=975, col_offset=12), [Name('bj', Load(), lineno=975, col_offset=30)], [], None, None, lineno=975, col_offset=12), lineno=975, col_offset=12), For(Name('i', Store(), lineno=976, col_offset=16), Call(Name('xrange', Load(), lineno=976, col_offset=21), [Name('alo', Load(), lineno=976, col_offset=28), Name('ahi', Load(), lineno=976, col_offset=33)], [], None, None, lineno=976, col_offset=21), [Assign([Name('ai', Store(), lineno=977, col_offset=16)], Subscript(Name('a', Load(), lineno=977, col_offset=21), Index(Name('i', Load(), lineno=977, col_offset=23)), Load(), lineno=977, col_offset=21), lineno=977, col_offset=16), If(Compare(Name('ai', Load(), lineno=978, col_offset=19), [Eq()], [Name('bj', Load(), lineno=978, col_offset=25)], lineno=978, col_offset=19), [If(Compare(Name('eqi', Load(), lineno=979, col_offset=23), [Is()], [Name('None', Load(), lineno=979, col_offset=30)], lineno=979, col_offset=23), [Assign([Tuple([Name('eqi', Store(), lineno=980, col_offset=24), Name('eqj', Store(), lineno=980, col_offset=29)], Store(), lineno=980, col_offset=24)], Tuple([Name('i', Load(), lineno=980, col_offset=35), Name('j', Load(), lineno=980, col_offset=38)], Load(), lineno=980, col_offset=35), lineno=980, col_offset=24)], [], lineno=979, col_offset=20), Continue( lineno=981, col_offset=20)], [], lineno=978, col_offset=16), Expr(Call(Attribute(Name('cruncher', Load(), lineno=982, col_offset=16), 'set_seq1', Load(), lineno=982, col_offset=16), [Name('ai', Load(), lineno=982, col_offset=34)], [], None, None, lineno=982, col_offset=16), lineno=982, col_offset=16), If(BoolOp(And(), [Compare(Call(Attribute(Name('cruncher', Load(), lineno=989, col_offset=19), 'real_quick_ratio', Load(), lineno=989, col_offset=19), [], [], None, None, lineno=989, col_offset=19), [Gt()], [Name('best_ratio', Load(), lineno=989, col_offset=49)], lineno=989, col_offset=19), Compare(Call(Attribute(Name('cruncher', Load(), lineno=990, col_offset=22), 'quick_ratio', Load(), lineno=990, col_offset=22), [], [], None, None, lineno=990, col_offset=22), [Gt()], [Name('best_ratio', Load(), lineno=990, col_offset=47)], lineno=990, col_offset=22), Compare(Call(Attribute(Name('cruncher', Load(), lineno=991, col_offset=22), 'ratio', Load(), lineno=991, col_offset=22), [], [], None, None, lineno=991, col_offset=22), [Gt()], [Name('best_ratio', Load(), lineno=991, col_offset=41)], lineno=991, col_offset=22)], lineno=989, col_offset=19), [Assign([Tuple([Name('best_ratio', Store(), lineno=992, col_offset=20), Name('best_i', Store(), lineno=992, col_offset=32), Name('best_j', Store(), lineno=992, col_offset=40)], Store(), lineno=992, col_offset=20)], Tuple([Call(Attribute(Name('cruncher', Load(), lineno=992, col_offset=49), 'ratio', Load(), lineno=992, col_offset=49), [], [], None, None, lineno=992, col_offset=49), Name('i', Load(), lineno=992, col_offset=67), Name('j', Load(), lineno=992, col_offset=70)], Load(), lineno=992, col_offset=49), lineno=992, col_offset=20)], [], lineno=989, col_offset=16)], [], lineno=976, col_offset=12)], [], lineno=973, col_offset=8), If(Compare(Name('best_ratio', Load(), lineno=993, col_offset=11), [Lt()], [Name('cutoff', Load(), lineno=993, col_offset=24)], lineno=993, col_offset=11), [If(Compare(Name('eqi', Load(), lineno=995, col_offset=15), [Is()], [Name('None', Load(), lineno=995, col_offset=22)], lineno=995, col_offset=15), [For(Name('line', Store(), lineno=997, col_offset=20), Call(Attribute(Name('self', Load(), lineno=997, col_offset=28), '_plain_replace', Load(), lineno=997, col_offset=28), [Name('a', Load(), lineno=997, col_offset=48), Name('alo', Load(), lineno=997, col_offset=51), Name('ahi', Load(), lineno=997, col_offset=56), Name('b', Load(), lineno=997, col_offset=61), Name('blo', Load(), lineno=997, col_offset=64), Name('bhi', Load(), lineno=997, col_offset=69)], [], None, None, lineno=997, col_offset=28), [Expr(Yield(Name('line', Load(), lineno=998, col_offset=26), lineno=998, col_offset=20), lineno=998, col_offset=20)], [], lineno=997, col_offset=16), Return(None, lineno=999, col_offset=16)], [], lineno=995, col_offset=12), Assign([Tuple([Name('best_i', Store(), lineno=1001, col_offset=12), Name('best_j', Store(), lineno=1001, col_offset=20), Name('best_ratio', Store(), lineno=1001, col_offset=28)], Store(), lineno=1001, col_offset=12)], Tuple([Name('eqi', Load(), lineno=1001, col_offset=41), Name('eqj', Load(), lineno=1001, col_offset=46), Num(1.0, lineno=1001, col_offset=51)], Load(), lineno=1001, col_offset=41), lineno=1001, col_offset=12)], [Assign([Name('eqi', Store(), lineno=1004, col_offset=12)], Name('None', Load(), lineno=1004, col_offset=18), lineno=1004, col_offset=12)], lineno=993, col_offset=8), For(Name('line', Store(), lineno=1010, col_offset=12), Call(Attribute(Name('self', Load(), lineno=1010, col_offset=20), '_fancy_helper', Load(), lineno=1010, col_offset=20), [Name('a', Load(), lineno=1010, col_offset=39), Name('alo', Load(), lineno=1010, col_offset=42), Name('best_i', Load(), lineno=1010, col_offset=47), Name('b', Load(), lineno=1010, col_offset=55), Name('blo', Load(), lineno=1010, col_offset=58), Name('best_j', Load(), lineno=1010, col_offset=63)], [], None, None, lineno=1010, col_offset=20), [Expr(Yield(Name('line', Load(), lineno=1011, col_offset=18), lineno=1011, col_offset=12), lineno=1011, col_offset=12)], [], lineno=1010, col_offset=8), Assign([Tuple([Name('aelt', Store(), lineno=1014, col_offset=8), Name('belt', Store(), lineno=1014, col_offset=14)], Store(), lineno=1014, col_offset=8)], Tuple([Subscript(Name('a', Load(), lineno=1014, col_offset=21), Index(Name('best_i', Load(), lineno=1014, col_offset=23)), Load(), lineno=1014, col_offset=21), Subscript(Name('b', Load(), lineno=1014, col_offset=32), Index(Name('best_j', Load(), lineno=1014, col_offset=34)), Load(), lineno=1014, col_offset=32)], Load(), lineno=1014, col_offset=21), lineno=1014, col_offset=8), If(Compare(Name('eqi', Load(), lineno=1015, col_offset=11), [Is()], [Name('None', Load(), lineno=1015, col_offset=18)], lineno=1015, col_offset=11), [Assign([Name('atags', Store(), lineno=1017, col_offset=12), Name('btags', Store(), lineno=1017, col_offset=20)], Str('', lineno=1017, col_offset=28), lineno=1017, col_offset=12), Expr(Call(Attribute(Name('cruncher', Load(), lineno=1018, col_offset=12), 'set_seqs', Load(), lineno=1018, col_offset=12), [Name('aelt', Load(), lineno=1018, col_offset=30), Name('belt', Load(), lineno=1018, col_offset=36)], [], None, None, lineno=1018, col_offset=12), lineno=1018, col_offset=12), For(Tuple([Name('tag', Store(), lineno=1019, col_offset=16), Name('ai1', Store(), lineno=1019, col_offset=21), Name('ai2', Store(), lineno=1019, col_offset=26), Name('bj1', Store(), lineno=1019, col_offset=31), Name('bj2', Store(), lineno=1019, col_offset=36)], Store(), lineno=1019, col_offset=16), Call(Attribute(Name('cruncher', Load(), lineno=1019, col_offset=43), 'get_opcodes', Load(), lineno=1019, col_offset=43), [], [], None, None, lineno=1019, col_offset=43), [Assign([Tuple([Name('la', Store(), lineno=1020, col_offset=16), Name('lb', Store(), lineno=1020, col_offset=20)], Store(), lineno=1020, col_offset=16)], Tuple([BinOp(Name('ai2', Load(), lineno=1020, col_offset=25), Sub(), Name('ai1', Load(), lineno=1020, col_offset=31), lineno=1020, col_offset=25), BinOp(Name('bj2', Load(), lineno=1020, col_offset=36), Sub(), Name('bj1', Load(), lineno=1020, col_offset=42), lineno=1020, col_offset=36)], Load(), lineno=1020, col_offset=25), lineno=1020, col_offset=16), If(Compare(Name('tag', Load(), lineno=1021, col_offset=19), [Eq()], [Str('replace', lineno=1021, col_offset=26)], lineno=1021, col_offset=19), [AugAssign(Name('atags', Store(), lineno=1022, col_offset=20), Add(), BinOp(Str('^', lineno=1022, col_offset=29), Mult(), Name('la', Load(), lineno=1022, col_offset=35), lineno=1022, col_offset=29), lineno=1022, col_offset=20), AugAssign(Name('btags', Store(), lineno=1023, col_offset=20), Add(), BinOp(Str('^', lineno=1023, col_offset=29), Mult(), Name('lb', Load(), lineno=1023, col_offset=35), lineno=1023, col_offset=29), lineno=1023, col_offset=20)], [If(Compare(Name('tag', Load(), lineno=1024, col_offset=21), [Eq()], [Str('delete', lineno=1024, col_offset=28)], lineno=1024, col_offset=21), [AugAssign(Name('atags', Store(), lineno=1025, col_offset=20), Add(), BinOp(Str('-', lineno=1025, col_offset=29), Mult(), Name('la', Load(), lineno=1025, col_offset=35), lineno=1025, col_offset=29), lineno=1025, col_offset=20)], [If(Compare(Name('tag', Load(), lineno=1026, col_offset=21), [Eq()], [Str('insert', lineno=1026, col_offset=28)], lineno=1026, col_offset=21), [AugAssign(Name('btags', Store(), lineno=1027, col_offset=20), Add(), BinOp(Str('+', lineno=1027, col_offset=29), Mult(), Name('lb', Load(), lineno=1027, col_offset=35), lineno=1027, col_offset=29), lineno=1027, col_offset=20)], [If(Compare(Name('tag', Load(), lineno=1028, col_offset=21), [Eq()], [Str('equal', lineno=1028, col_offset=28)], lineno=1028, col_offset=21), [AugAssign(Name('atags', Store(), lineno=1029, col_offset=20), Add(), BinOp(Str(' ', lineno=1029, col_offset=29), Mult(), Name('la', Load(), lineno=1029, col_offset=35), lineno=1029, col_offset=29), lineno=1029, col_offset=20), AugAssign(Name('btags', Store(), lineno=1030, col_offset=20), Add(), BinOp(Str(' ', lineno=1030, col_offset=29), Mult(), Name('lb', Load(), lineno=1030, col_offset=35), lineno=1030, col_offset=29), lineno=1030, col_offset=20)], [Raise(Name('ValueError', Load(), lineno=1032, col_offset=26), BinOp(Str('unknown tag %r', lineno=1032, col_offset=38), Mod(), Tuple([Name('tag', Load(), lineno=1032, col_offset=58)], Load(), lineno=1032, col_offset=58), lineno=1032, col_offset=38), None, lineno=1032, col_offset=20)], lineno=1028, col_offset=21)], lineno=1026, col_offset=21)], lineno=1024, col_offset=21)], lineno=1021, col_offset=16)], [], lineno=1019, col_offset=12), For(Name('line', Store(), lineno=1033, col_offset=16), Call(Attribute(Name('self', Load(), lineno=1033, col_offset=24), '_qformat', Load(), lineno=1033, col_offset=24), [Name('aelt', Load(), lineno=1033, col_offset=38), Name('belt', Load(), lineno=1033, col_offset=44), Name('atags', Load(), lineno=1033, col_offset=50), Name('btags', Load(), lineno=1033, col_offset=57)], [], None, None, lineno=1033, col_offset=24), [Expr(Yield(Name('line', Load(), lineno=1034, col_offset=22), lineno=1034, col_offset=16), lineno=1034, col_offset=16)], [], lineno=1033, col_offset=12)], [Expr(Yield(BinOp(Str('  ', lineno=1037, col_offset=18), Add(), Name('aelt', Load(), lineno=1037, col_offset=25), lineno=1037, col_offset=18), lineno=1037, col_offset=12), lineno=1037, col_offset=12)], lineno=1015, col_offset=8), For(Name('line', Store(), lineno=1040, col_offset=12), Call(Attribute(Name('self', Load(), lineno=1040, col_offset=20), '_fancy_helper', Load(), lineno=1040, col_offset=20), [Name('a', Load(), lineno=1040, col_offset=39), BinOp(Name('best_i', Load(), lineno=1040, col_offset=42), Add(), Num(1, lineno=1040, col_offset=49), lineno=1040, col_offset=42), Name('ahi', Load(), lineno=1040, col_offset=52), Name('b', Load(), lineno=1040, col_offset=57), BinOp(Name('best_j', Load(), lineno=1040, col_offset=60), Add(), Num(1, lineno=1040, col_offset=67), lineno=1040, col_offset=60), Name('bhi', Load(), lineno=1040, col_offset=70)], [], None, None, lineno=1040, col_offset=20), [Expr(Yield(Name('line', Load(), lineno=1041, col_offset=18), lineno=1041, col_offset=12), lineno=1041, col_offset=12)], [], lineno=1040, col_offset=8)], [], lineno=945, col_offset=4), FunctionDef('_fancy_helper', arguments([Name('self', Param(), lineno=1043, col_offset=22), Name('a', Param(), lineno=1043, col_offset=28), Name('alo', Param(), lineno=1043, col_offset=31), Name('ahi', Param(), lineno=1043, col_offset=36), Name('b', Param(), lineno=1043, col_offset=41), Name('blo', Param(), lineno=1043, col_offset=44), Name('bhi', Param(), lineno=1043, col_offset=49)], None, None, []), [Assign([Name('g', Store(), lineno=1044, col_offset=8)], List([], Load(), lineno=1044, col_offset=12), lineno=1044, col_offset=8), If(Compare(Name('alo', Load(), lineno=1045, col_offset=11), [Lt()], [Name('ahi', Load(), lineno=1045, col_offset=17)], lineno=1045, col_offset=11), [If(Compare(Name('blo', Load(), lineno=1046, col_offset=15), [Lt()], [Name('bhi', Load(), lineno=1046, col_offset=21)], lineno=1046, col_offset=15), [Assign([Name('g', Store(), lineno=1047, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1047, col_offset=20), '_fancy_replace', Load(), lineno=1047, col_offset=20), [Name('a', Load(), lineno=1047, col_offset=40), Name('alo', Load(), lineno=1047, col_offset=43), Name('ahi', Load(), lineno=1047, col_offset=48), Name('b', Load(), lineno=1047, col_offset=53), Name('blo', Load(), lineno=1047, col_offset=56), Name('bhi', Load(), lineno=1047, col_offset=61)], [], None, None, lineno=1047, col_offset=20), lineno=1047, col_offset=16)], [Assign([Name('g', Store(), lineno=1049, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1049, col_offset=20), '_dump', Load(), lineno=1049, col_offset=20), [Str('-', lineno=1049, col_offset=31), Name('a', Load(), lineno=1049, col_offset=36), Name('alo', Load(), lineno=1049, col_offset=39), Name('ahi', Load(), lineno=1049, col_offset=44)], [], None, None, lineno=1049, col_offset=20), lineno=1049, col_offset=16)], lineno=1046, col_offset=12)], [If(Compare(Name('blo', Load(), lineno=1050, col_offset=13), [Lt()], [Name('bhi', Load(), lineno=1050, col_offset=19)], lineno=1050, col_offset=13), [Assign([Name('g', Store(), lineno=1051, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1051, col_offset=16), '_dump', Load(), lineno=1051, col_offset=16), [Str('+', lineno=1051, col_offset=27), Name('b', Load(), lineno=1051, col_offset=32), Name('blo', Load(), lineno=1051, col_offset=35), Name('bhi', Load(), lineno=1051, col_offset=40)], [], None, None, lineno=1051, col_offset=16), lineno=1051, col_offset=12)], [], lineno=1050, col_offset=13)], lineno=1045, col_offset=8), For(Name('line', Store(), lineno=1053, col_offset=12), Name('g', Load(), lineno=1053, col_offset=20), [Expr(Yield(Name('line', Load(), lineno=1054, col_offset=18), lineno=1054, col_offset=12), lineno=1054, col_offset=12)], [], lineno=1053, col_offset=8)], [], lineno=1043, col_offset=4), FunctionDef('_qformat', arguments([Name('self', Param(), lineno=1056, col_offset=17), Name('aline', Param(), lineno=1056, col_offset=23), Name('bline', Param(), lineno=1056, col_offset=30), Name('atags', Param(), lineno=1056, col_offset=37), Name('btags', Param(), lineno=1056, col_offset=44)], None, None, []), [Expr(Str('\n        Format "?" output and deal with leading tabs.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._qformat(\'\\tabcDefghiJkl\\n\', \'\\tabcdefGhijkl\\n\',\n        ...                      \'  ^ ^  ^      \', \'  ^ ^  ^      \')\n        >>> for line in results: print repr(line)\n        ...\n        \'- \\tabcDefghiJkl\\n\'\n        \'? \\t ^ ^  ^\\n\'\n        \'+ \\tabcdefGhijkl\\n\'\n        \'? \\t ^ ^  ^\\n\'\n        ', lineno=1071, col_offset=-1), lineno=1071, col_offset=-1), Assign([Name('common', Store(), lineno=1074, col_offset=8)], Call(Name('min', Load(), lineno=1074, col_offset=17), [Call(Name('_count_leading', Load(), lineno=1074, col_offset=21), [Name('aline', Load(), lineno=1074, col_offset=36), Str('\t', lineno=1074, col_offset=43)], [], None, None, lineno=1074, col_offset=21), Call(Name('_count_leading', Load(), lineno=1075, col_offset=21), [Name('bline', Load(), lineno=1075, col_offset=36), Str('\t', lineno=1075, col_offset=43)], [], None, None, lineno=1075, col_offset=21)], [], None, None, lineno=1074, col_offset=17), lineno=1074, col_offset=8), Assign([Name('common', Store(), lineno=1076, col_offset=8)], Call(Name('min', Load(), lineno=1076, col_offset=17), [Name('common', Load(), lineno=1076, col_offset=21), Call(Name('_count_leading', Load(), lineno=1076, col_offset=29), [Subscript(Name('atags', Load(), lineno=1076, col_offset=44), Slice(None, Name('common', Load(), lineno=1076, col_offset=51), None), Load(), lineno=1076, col_offset=44), Str(' ', lineno=1076, col_offset=60)], [], None, None, lineno=1076, col_offset=29)], [], None, None, lineno=1076, col_offset=17), lineno=1076, col_offset=8), Assign([Name('common', Store(), lineno=1077, col_offset=8)], Call(Name('min', Load(), lineno=1077, col_offset=17), [Name('common', Load(), lineno=1077, col_offset=21), Call(Name('_count_leading', Load(), lineno=1077, col_offset=29), [Subscript(Name('btags', Load(), lineno=1077, col_offset=44), Slice(None, Name('common', Load(), lineno=1077, col_offset=51), None), Load(), lineno=1077, col_offset=44), Str(' ', lineno=1077, col_offset=60)], [], None, None, lineno=1077, col_offset=29)], [], None, None, lineno=1077, col_offset=17), lineno=1077, col_offset=8), Assign([Name('atags', Store(), lineno=1078, col_offset=8)], Call(Attribute(Subscript(Name('atags', Load(), lineno=1078, col_offset=16), Slice(Name('common', Load(), lineno=1078, col_offset=22), None, None), Load(), lineno=1078, col_offset=16), 'rstrip', Load(), lineno=1078, col_offset=16), [], [], None, None, lineno=1078, col_offset=16), lineno=1078, col_offset=8), Assign([Name('btags', Store(), lineno=1079, col_offset=8)], Call(Attribute(Subscript(Name('btags', Load(), lineno=1079, col_offset=16), Slice(Name('common', Load(), lineno=1079, col_offset=22), None, None), Load(), lineno=1079, col_offset=16), 'rstrip', Load(), lineno=1079, col_offset=16), [], [], None, None, lineno=1079, col_offset=16), lineno=1079, col_offset=8), Expr(Yield(BinOp(Str('- ', lineno=1081, col_offset=14), Add(), Name('aline', Load(), lineno=1081, col_offset=21), lineno=1081, col_offset=14), lineno=1081, col_offset=8), lineno=1081, col_offset=8), If(Name('atags', Load(), lineno=1082, col_offset=11), [Expr(Yield(BinOp(Str('? %s%s\n', lineno=1083, col_offset=18), Mod(), Tuple([BinOp(Str('\t', lineno=1083, col_offset=32), Mult(), Name('common', Load(), lineno=1083, col_offset=39), lineno=1083, col_offset=32), Name('atags', Load(), lineno=1083, col_offset=47)], Load(), lineno=1083, col_offset=32), lineno=1083, col_offset=18), lineno=1083, col_offset=12), lineno=1083, col_offset=12)], [], lineno=1082, col_offset=8), Expr(Yield(BinOp(Str('+ ', lineno=1085, col_offset=14), Add(), Name('bline', Load(), lineno=1085, col_offset=21), lineno=1085, col_offset=14), lineno=1085, col_offset=8), lineno=1085, col_offset=8), If(Name('btags', Load(), lineno=1086, col_offset=11), [Expr(Yield(BinOp(Str('? %s%s\n', lineno=1087, col_offset=18), Mod(), Tuple([BinOp(Str('\t', lineno=1087, col_offset=32), Mult(), Name('common', Load(), lineno=1087, col_offset=39), lineno=1087, col_offset=32), Name('btags', Load(), lineno=1087, col_offset=47)], Load(), lineno=1087, col_offset=32), lineno=1087, col_offset=18), lineno=1087, col_offset=12), lineno=1087, col_offset=12)], [], lineno=1086, col_offset=8)], [], lineno=1056, col_offset=4)], [], lineno=766, col_offset=0), Import([alias('re', None)], lineno=1106, col_offset=0), FunctionDef('IS_LINE_JUNK', arguments([Name('line', Param(), lineno=1108, col_offset=17), Name('pat', Param(), lineno=1108, col_offset=23)], None, None, [Attribute(Call(Attribute(Name('re', Load(), lineno=1108, col_offset=27), 'compile', Load(), lineno=1108, col_offset=27), [Str('\\s*#?\\s*$', lineno=1108, col_offset=38)], [], None, None, lineno=1108, col_offset=27), 'match', Load(), lineno=1108, col_offset=27)]), [Expr(Str("\n    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n\n    Examples:\n\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    ", lineno=1120, col_offset=-1), lineno=1120, col_offset=-1), Return(Compare(Call(Name('pat', Load(), lineno=1122, col_offset=11), [Name('line', Load(), lineno=1122, col_offset=15)], [], None, None, lineno=1122, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1122, col_offset=28)], lineno=1122, col_offset=11), lineno=1122, col_offset=4)], [], lineno=1108, col_offset=0), FunctionDef('IS_CHARACTER_JUNK', arguments([Name('ch', Param(), lineno=1124, col_offset=22), Name('ws', Param(), lineno=1124, col_offset=26)], None, None, [Str(' \t', lineno=1124, col_offset=29)]), [Expr(Str("\n    Return 1 for ignorable character: iff `ch` is a space or tab.\n\n    Examples:\n\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    ", lineno=1138, col_offset=-1), lineno=1138, col_offset=-1), Return(Compare(Name('ch', Load(), lineno=1140, col_offset=11), [In()], [Name('ws', Load(), lineno=1140, col_offset=17)], lineno=1140, col_offset=11), lineno=1140, col_offset=4)], [], lineno=1124, col_offset=0), FunctionDef('unified_diff', arguments([Name('a', Param(), lineno=1143, col_offset=17), Name('b', Param(), lineno=1143, col_offset=20), Name('fromfile', Param(), lineno=1143, col_offset=23), Name('tofile', Param(), lineno=1143, col_offset=36), Name('fromfiledate', Param(), lineno=1143, col_offset=47), Name('tofiledate', Param(), lineno=1144, col_offset=17), Name('n', Param(), lineno=1144, col_offset=32), Name('lineterm', Param(), lineno=1144, col_offset=37)], None, None, [Str('', lineno=1143, col_offset=32), Str('', lineno=1143, col_offset=43), Str('', lineno=1143, col_offset=60), Str('', lineno=1144, col_offset=28), Num(3, lineno=1144, col_offset=34), Str('\n', lineno=1144, col_offset=46)]), [Expr(Str('\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the ISO 8601 format.\n\n    Example:\n\n    >>> for line in unified_diff(\'one two three four\'.split(),\n    ...             \'zero one tree four\'.split(), \'Original\', \'Current\',\n    ...             \'2005-01-26 23:30:50\', \'2010-04-02 10:20:52\',\n    ...             lineterm=\'\'):\n    ...     print line                  # doctest: +NORMALIZE_WHITESPACE\n    --- Original        2005-01-26 23:30:50\n    +++ Current         2010-04-02 10:20:52\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    ', lineno=1182, col_offset=-1), lineno=1182, col_offset=-1), Assign([Name('started', Store(), lineno=1184, col_offset=4)], Name('False', Load(), lineno=1184, col_offset=14), lineno=1184, col_offset=4), For(Name('group', Store(), lineno=1185, col_offset=8), Call(Attribute(Call(Name('SequenceMatcher', Load(), lineno=1185, col_offset=17), [Name('None', Load(), lineno=1185, col_offset=33), Name('a', Load(), lineno=1185, col_offset=38), Name('b', Load(), lineno=1185, col_offset=40)], [], None, None, lineno=1185, col_offset=17), 'get_grouped_opcodes', Load(), lineno=1185, col_offset=17), [Name('n', Load(), lineno=1185, col_offset=63)], [], None, None, lineno=1185, col_offset=17), [If(UnaryOp(Not(), Name('started', Load(), lineno=1186, col_offset=15), lineno=1186, col_offset=11), [Assign([Name('fromdate', Store(), lineno=1187, col_offset=12)], IfExp(Name('fromfiledate', Load(), lineno=1187, col_offset=48), BinOp(Str('\t%s', lineno=1187, col_offset=23), Mod(), Name('fromfiledate', Load(), lineno=1187, col_offset=32), lineno=1187, col_offset=23), Str('', lineno=1187, col_offset=66), lineno=1187, col_offset=23), lineno=1187, col_offset=12), Assign([Name('todate', Store(), lineno=1188, col_offset=12)], IfExp(Name('tofiledate', Load(), lineno=1188, col_offset=44), BinOp(Str('\t%s', lineno=1188, col_offset=21), Mod(), Name('tofiledate', Load(), lineno=1188, col_offset=30), lineno=1188, col_offset=21), Str('', lineno=1188, col_offset=60), lineno=1188, col_offset=21), lineno=1188, col_offset=12), Expr(Yield(BinOp(Str('--- %s%s%s', lineno=1189, col_offset=18), Mod(), Tuple([Name('fromfile', Load(), lineno=1189, col_offset=34), Name('fromdate', Load(), lineno=1189, col_offset=44), Name('lineterm', Load(), lineno=1189, col_offset=54)], Load(), lineno=1189, col_offset=34), lineno=1189, col_offset=18), lineno=1189, col_offset=12), lineno=1189, col_offset=12), Expr(Yield(BinOp(Str('+++ %s%s%s', lineno=1190, col_offset=18), Mod(), Tuple([Name('tofile', Load(), lineno=1190, col_offset=34), Name('todate', Load(), lineno=1190, col_offset=42), Name('lineterm', Load(), lineno=1190, col_offset=50)], Load(), lineno=1190, col_offset=34), lineno=1190, col_offset=18), lineno=1190, col_offset=12), lineno=1190, col_offset=12), Assign([Name('started', Store(), lineno=1191, col_offset=12)], Name('True', Load(), lineno=1191, col_offset=22), lineno=1191, col_offset=12)], [], lineno=1186, col_offset=8), Assign([Tuple([Name('i1', Store(), lineno=1192, col_offset=8), Name('i2', Store(), lineno=1192, col_offset=12), Name('j1', Store(), lineno=1192, col_offset=16), Name('j2', Store(), lineno=1192, col_offset=20)], Store(), lineno=1192, col_offset=8)], Tuple([Subscript(Subscript(Name('group', Load(), lineno=1192, col_offset=25), Index(Num(0, lineno=1192, col_offset=31)), Load(), lineno=1192, col_offset=25), Index(Num(1, lineno=1192, col_offset=34)), Load(), lineno=1192, col_offset=25), Subscript(Subscript(Name('group', Load(), lineno=1192, col_offset=38), Index(Num(-1, lineno=1192, col_offset=45)), Load(), lineno=1192, col_offset=38), Index(Num(2, lineno=1192, col_offset=48)), Load(), lineno=1192, col_offset=38), Subscript(Subscript(Name('group', Load(), lineno=1192, col_offset=52), Index(Num(0, lineno=1192, col_offset=58)), Load(), lineno=1192, col_offset=52), Index(Num(3, lineno=1192, col_offset=61)), Load(), lineno=1192, col_offset=52), Subscript(Subscript(Name('group', Load(), lineno=1192, col_offset=65), Index(Num(-1, lineno=1192, col_offset=72)), Load(), lineno=1192, col_offset=65), Index(Num(4, lineno=1192, col_offset=75)), Load(), lineno=1192, col_offset=65)], Load(), lineno=1192, col_offset=25), lineno=1192, col_offset=8), Expr(Yield(BinOp(Str('@@ -%d,%d +%d,%d @@%s', lineno=1193, col_offset=14), Mod(), Tuple([BinOp(Name('i1', Load(), lineno=1193, col_offset=41), Add(), Num(1, lineno=1193, col_offset=44), lineno=1193, col_offset=41), BinOp(Name('i2', Load(), lineno=1193, col_offset=47), Sub(), Name('i1', Load(), lineno=1193, col_offset=50), lineno=1193, col_offset=47), BinOp(Name('j1', Load(), lineno=1193, col_offset=54), Add(), Num(1, lineno=1193, col_offset=57), lineno=1193, col_offset=54), BinOp(Name('j2', Load(), lineno=1193, col_offset=60), Sub(), Name('j1', Load(), lineno=1193, col_offset=63), lineno=1193, col_offset=60), Name('lineterm', Load(), lineno=1193, col_offset=67)], Load(), lineno=1193, col_offset=41), lineno=1193, col_offset=14), lineno=1193, col_offset=8), lineno=1193, col_offset=8), For(Tuple([Name('tag', Store(), lineno=1194, col_offset=12), Name('i1', Store(), lineno=1194, col_offset=17), Name('i2', Store(), lineno=1194, col_offset=21), Name('j1', Store(), lineno=1194, col_offset=25), Name('j2', Store(), lineno=1194, col_offset=29)], Store(), lineno=1194, col_offset=12), Name('group', Load(), lineno=1194, col_offset=35), [If(Compare(Name('tag', Load(), lineno=1195, col_offset=15), [Eq()], [Str('equal', lineno=1195, col_offset=22)], lineno=1195, col_offset=15), [For(Name('line', Store(), lineno=1196, col_offset=20), Subscript(Name('a', Load(), lineno=1196, col_offset=28), Slice(Name('i1', Load(), lineno=1196, col_offset=30), Name('i2', Load(), lineno=1196, col_offset=33), None), Load(), lineno=1196, col_offset=28), [Expr(Yield(BinOp(Str(' ', lineno=1197, col_offset=26), Add(), Name('line', Load(), lineno=1197, col_offset=32), lineno=1197, col_offset=26), lineno=1197, col_offset=20), lineno=1197, col_offset=20)], [], lineno=1196, col_offset=16), Continue( lineno=1198, col_offset=16)], [], lineno=1195, col_offset=12), If(BoolOp(Or(), [Compare(Name('tag', Load(), lineno=1199, col_offset=15), [Eq()], [Str('replace', lineno=1199, col_offset=22)], lineno=1199, col_offset=15), Compare(Name('tag', Load(), lineno=1199, col_offset=35), [Eq()], [Str('delete', lineno=1199, col_offset=42)], lineno=1199, col_offset=35)], lineno=1199, col_offset=15), [For(Name('line', Store(), lineno=1200, col_offset=20), Subscript(Name('a', Load(), lineno=1200, col_offset=28), Slice(Name('i1', Load(), lineno=1200, col_offset=30), Name('i2', Load(), lineno=1200, col_offset=33), None), Load(), lineno=1200, col_offset=28), [Expr(Yield(BinOp(Str('-', lineno=1201, col_offset=26), Add(), Name('line', Load(), lineno=1201, col_offset=32), lineno=1201, col_offset=26), lineno=1201, col_offset=20), lineno=1201, col_offset=20)], [], lineno=1200, col_offset=16)], [], lineno=1199, col_offset=12), If(BoolOp(Or(), [Compare(Name('tag', Load(), lineno=1202, col_offset=15), [Eq()], [Str('replace', lineno=1202, col_offset=22)], lineno=1202, col_offset=15), Compare(Name('tag', Load(), lineno=1202, col_offset=35), [Eq()], [Str('insert', lineno=1202, col_offset=42)], lineno=1202, col_offset=35)], lineno=1202, col_offset=15), [For(Name('line', Store(), lineno=1203, col_offset=20), Subscript(Name('b', Load(), lineno=1203, col_offset=28), Slice(Name('j1', Load(), lineno=1203, col_offset=30), Name('j2', Load(), lineno=1203, col_offset=33), None), Load(), lineno=1203, col_offset=28), [Expr(Yield(BinOp(Str('+', lineno=1204, col_offset=26), Add(), Name('line', Load(), lineno=1204, col_offset=32), lineno=1204, col_offset=26), lineno=1204, col_offset=20), lineno=1204, col_offset=20)], [], lineno=1203, col_offset=16)], [], lineno=1202, col_offset=12)], [], lineno=1194, col_offset=8)], [], lineno=1185, col_offset=4)], [], lineno=1143, col_offset=0), FunctionDef('context_diff', arguments([Name('a', Param(), lineno=1207, col_offset=17), Name('b', Param(), lineno=1207, col_offset=20), Name('fromfile', Param(), lineno=1207, col_offset=23), Name('tofile', Param(), lineno=1207, col_offset=36), Name('fromfiledate', Param(), lineno=1208, col_offset=17), Name('tofiledate', Param(), lineno=1208, col_offset=34), Name('n', Param(), lineno=1208, col_offset=49), Name('lineterm', Param(), lineno=1208, col_offset=54)], None, None, [Str('', lineno=1207, col_offset=32), Str('', lineno=1207, col_offset=43), Str('', lineno=1208, col_offset=30), Str('', lineno=1208, col_offset=45), Num(3, lineno=1208, col_offset=51), Str('\n', lineno=1208, col_offset=63)]), [Expr(Str('\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the ISO 8601 format.\n    If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print \'\'.join(context_diff(\'one\\ntwo\\nthree\\nfour\\n\'.splitlines(1),\n    ...       \'zero\\none\\ntree\\nfour\\n\'.splitlines(1), \'Original\', \'Current\')),\n    *** Original\n    --- Current\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    ', lineno=1248, col_offset=-1), lineno=1248, col_offset=-1), Assign([Name('started', Store(), lineno=1250, col_offset=4)], Name('False', Load(), lineno=1250, col_offset=14), lineno=1250, col_offset=4), Assign([Name('prefixmap', Store(), lineno=1251, col_offset=4)], Dict([Str('insert', lineno=1251, col_offset=17), Str('delete', lineno=1251, col_offset=32), Str('replace', lineno=1251, col_offset=47), Str('equal', lineno=1251, col_offset=63)], [Str('+ ', lineno=1251, col_offset=26), Str('- ', lineno=1251, col_offset=41), Str('! ', lineno=1251, col_offset=57), Str('  ', lineno=1251, col_offset=71)], lineno=1251, col_offset=16), lineno=1251, col_offset=4), For(Name('group', Store(), lineno=1252, col_offset=8), Call(Attribute(Call(Name('SequenceMatcher', Load(), lineno=1252, col_offset=17), [Name('None', Load(), lineno=1252, col_offset=33), Name('a', Load(), lineno=1252, col_offset=38), Name('b', Load(), lineno=1252, col_offset=40)], [], None, None, lineno=1252, col_offset=17), 'get_grouped_opcodes', Load(), lineno=1252, col_offset=17), [Name('n', Load(), lineno=1252, col_offset=63)], [], None, None, lineno=1252, col_offset=17), [If(UnaryOp(Not(), Name('started', Load(), lineno=1253, col_offset=15), lineno=1253, col_offset=11), [Assign([Name('fromdate', Store(), lineno=1254, col_offset=12)], IfExp(Name('fromfiledate', Load(), lineno=1254, col_offset=48), BinOp(Str('\t%s', lineno=1254, col_offset=23), Mod(), Name('fromfiledate', Load(), lineno=1254, col_offset=32), lineno=1254, col_offset=23), Str('', lineno=1254, col_offset=66), lineno=1254, col_offset=23), lineno=1254, col_offset=12), Assign([Name('todate', Store(), lineno=1255, col_offset=12)], IfExp(Name('tofiledate', Load(), lineno=1255, col_offset=44), BinOp(Str('\t%s', lineno=1255, col_offset=21), Mod(), Name('tofiledate', Load(), lineno=1255, col_offset=30), lineno=1255, col_offset=21), Str('', lineno=1255, col_offset=60), lineno=1255, col_offset=21), lineno=1255, col_offset=12), Expr(Yield(BinOp(Str('*** %s%s%s', lineno=1256, col_offset=18), Mod(), Tuple([Name('fromfile', Load(), lineno=1256, col_offset=34), Name('fromdate', Load(), lineno=1256, col_offset=44), Name('lineterm', Load(), lineno=1256, col_offset=54)], Load(), lineno=1256, col_offset=34), lineno=1256, col_offset=18), lineno=1256, col_offset=12), lineno=1256, col_offset=12), Expr(Yield(BinOp(Str('--- %s%s%s', lineno=1257, col_offset=18), Mod(), Tuple([Name('tofile', Load(), lineno=1257, col_offset=34), Name('todate', Load(), lineno=1257, col_offset=42), Name('lineterm', Load(), lineno=1257, col_offset=50)], Load(), lineno=1257, col_offset=34), lineno=1257, col_offset=18), lineno=1257, col_offset=12), lineno=1257, col_offset=12), Assign([Name('started', Store(), lineno=1258, col_offset=12)], Name('True', Load(), lineno=1258, col_offset=22), lineno=1258, col_offset=12)], [], lineno=1253, col_offset=8), Expr(Yield(BinOp(Str('***************%s', lineno=1260, col_offset=14), Mod(), Tuple([Name('lineterm', Load(), lineno=1260, col_offset=37)], Load(), lineno=1260, col_offset=37), lineno=1260, col_offset=14), lineno=1260, col_offset=8), lineno=1260, col_offset=8), If(Compare(BinOp(Subscript(Subscript(Name('group', Load(), lineno=1261, col_offset=11), Index(Num(-1, lineno=1261, col_offset=18)), Load(), lineno=1261, col_offset=11), Index(Num(2, lineno=1261, col_offset=21)), Load(), lineno=1261, col_offset=11), Sub(), Subscript(Subscript(Name('group', Load(), lineno=1261, col_offset=26), Index(Num(0, lineno=1261, col_offset=32)), Load(), lineno=1261, col_offset=26), Index(Num(1, lineno=1261, col_offset=35)), Load(), lineno=1261, col_offset=26), lineno=1261, col_offset=11), [GtE()], [Num(2, lineno=1261, col_offset=41)], lineno=1261, col_offset=11), [Expr(Yield(BinOp(Str('*** %d,%d ****%s', lineno=1262, col_offset=18), Mod(), Tuple([BinOp(Subscript(Subscript(Name('group', Load(), lineno=1262, col_offset=40), Index(Num(0, lineno=1262, col_offset=46)), Load(), lineno=1262, col_offset=40), Index(Num(1, lineno=1262, col_offset=49)), Load(), lineno=1262, col_offset=40), Add(), Num(1, lineno=1262, col_offset=52), lineno=1262, col_offset=40), Subscript(Subscript(Name('group', Load(), lineno=1262, col_offset=55), Index(Num(-1, lineno=1262, col_offset=62)), Load(), lineno=1262, col_offset=55), Index(Num(2, lineno=1262, col_offset=65)), Load(), lineno=1262, col_offset=55), Name('lineterm', Load(), lineno=1262, col_offset=69)], Load(), lineno=1262, col_offset=40), lineno=1262, col_offset=18), lineno=1262, col_offset=12), lineno=1262, col_offset=12)], [Expr(Yield(BinOp(Str('*** %d ****%s', lineno=1264, col_offset=18), Mod(), Tuple([Subscript(Subscript(Name('group', Load(), lineno=1264, col_offset=37), Index(Num(-1, lineno=1264, col_offset=44)), Load(), lineno=1264, col_offset=37), Index(Num(2, lineno=1264, col_offset=47)), Load(), lineno=1264, col_offset=37), Name('lineterm', Load(), lineno=1264, col_offset=51)], Load(), lineno=1264, col_offset=37), lineno=1264, col_offset=18), lineno=1264, col_offset=12), lineno=1264, col_offset=12)], lineno=1261, col_offset=8), Assign([Name('visiblechanges', Store(), lineno=1265, col_offset=8)], ListComp(Name('e', Load(), lineno=1265, col_offset=26), [comprehension(Name('e', Store(), lineno=1265, col_offset=32), Name('group', Load(), lineno=1265, col_offset=37), [Compare(Subscript(Name('e', Load(), lineno=1265, col_offset=46), Index(Num(0, lineno=1265, col_offset=48)), Load(), lineno=1265, col_offset=46), [In()], [Tuple([Str('replace', lineno=1265, col_offset=55), Str('delete', lineno=1265, col_offset=66)], Load(), lineno=1265, col_offset=55)], lineno=1265, col_offset=46)])], lineno=1265, col_offset=26), lineno=1265, col_offset=8), If(Name('visiblechanges', Load(), lineno=1266, col_offset=11), [For(Tuple([Name('tag', Store(), lineno=1267, col_offset=16), Name('i1', Store(), lineno=1267, col_offset=21), Name('i2', Store(), lineno=1267, col_offset=25), Name('_', Store(), lineno=1267, col_offset=29), Name('_', Store(), lineno=1267, col_offset=32)], Store(), lineno=1267, col_offset=16), Name('group', Load(), lineno=1267, col_offset=37), [If(Compare(Name('tag', Load(), lineno=1268, col_offset=19), [NotEq()], [Str('insert', lineno=1268, col_offset=26)], lineno=1268, col_offset=19), [For(Name('line', Store(), lineno=1269, col_offset=24), Subscript(Name('a', Load(), lineno=1269, col_offset=32), Slice(Name('i1', Load(), lineno=1269, col_offset=34), Name('i2', Load(), lineno=1269, col_offset=37), None), Load(), lineno=1269, col_offset=32), [Expr(Yield(BinOp(Subscript(Name('prefixmap', Load(), lineno=1270, col_offset=30), Index(Name('tag', Load(), lineno=1270, col_offset=40)), Load(), lineno=1270, col_offset=30), Add(), Name('line', Load(), lineno=1270, col_offset=47), lineno=1270, col_offset=30), lineno=1270, col_offset=24), lineno=1270, col_offset=24)], [], lineno=1269, col_offset=20)], [], lineno=1268, col_offset=16)], [], lineno=1267, col_offset=12)], [], lineno=1266, col_offset=8), If(Compare(BinOp(Subscript(Subscript(Name('group', Load(), lineno=1272, col_offset=11), Index(Num(-1, lineno=1272, col_offset=18)), Load(), lineno=1272, col_offset=11), Index(Num(4, lineno=1272, col_offset=21)), Load(), lineno=1272, col_offset=11), Sub(), Subscript(Subscript(Name('group', Load(), lineno=1272, col_offset=26), Index(Num(0, lineno=1272, col_offset=32)), Load(), lineno=1272, col_offset=26), Index(Num(3, lineno=1272, col_offset=35)), Load(), lineno=1272, col_offset=26), lineno=1272, col_offset=11), [GtE()], [Num(2, lineno=1272, col_offset=41)], lineno=1272, col_offset=11), [Expr(Yield(BinOp(Str('--- %d,%d ----%s', lineno=1273, col_offset=18), Mod(), Tuple([BinOp(Subscript(Subscript(Name('group', Load(), lineno=1273, col_offset=40), Index(Num(0, lineno=1273, col_offset=46)), Load(), lineno=1273, col_offset=40), Index(Num(3, lineno=1273, col_offset=49)), Load(), lineno=1273, col_offset=40), Add(), Num(1, lineno=1273, col_offset=52), lineno=1273, col_offset=40), Subscript(Subscript(Name('group', Load(), lineno=1273, col_offset=55), Index(Num(-1, lineno=1273, col_offset=62)), Load(), lineno=1273, col_offset=55), Index(Num(4, lineno=1273, col_offset=65)), Load(), lineno=1273, col_offset=55), Name('lineterm', Load(), lineno=1273, col_offset=69)], Load(), lineno=1273, col_offset=40), lineno=1273, col_offset=18), lineno=1273, col_offset=12), lineno=1273, col_offset=12)], [Expr(Yield(BinOp(Str('--- %d ----%s', lineno=1275, col_offset=18), Mod(), Tuple([Subscript(Subscript(Name('group', Load(), lineno=1275, col_offset=37), Index(Num(-1, lineno=1275, col_offset=44)), Load(), lineno=1275, col_offset=37), Index(Num(4, lineno=1275, col_offset=47)), Load(), lineno=1275, col_offset=37), Name('lineterm', Load(), lineno=1275, col_offset=51)], Load(), lineno=1275, col_offset=37), lineno=1275, col_offset=18), lineno=1275, col_offset=12), lineno=1275, col_offset=12)], lineno=1272, col_offset=8), Assign([Name('visiblechanges', Store(), lineno=1276, col_offset=8)], ListComp(Name('e', Load(), lineno=1276, col_offset=26), [comprehension(Name('e', Store(), lineno=1276, col_offset=32), Name('group', Load(), lineno=1276, col_offset=37), [Compare(Subscript(Name('e', Load(), lineno=1276, col_offset=46), Index(Num(0, lineno=1276, col_offset=48)), Load(), lineno=1276, col_offset=46), [In()], [Tuple([Str('replace', lineno=1276, col_offset=55), Str('insert', lineno=1276, col_offset=66)], Load(), lineno=1276, col_offset=55)], lineno=1276, col_offset=46)])], lineno=1276, col_offset=26), lineno=1276, col_offset=8), If(Name('visiblechanges', Load(), lineno=1277, col_offset=11), [For(Tuple([Name('tag', Store(), lineno=1278, col_offset=16), Name('_', Store(), lineno=1278, col_offset=21), Name('_', Store(), lineno=1278, col_offset=24), Name('j1', Store(), lineno=1278, col_offset=27), Name('j2', Store(), lineno=1278, col_offset=31)], Store(), lineno=1278, col_offset=16), Name('group', Load(), lineno=1278, col_offset=37), [If(Compare(Name('tag', Load(), lineno=1279, col_offset=19), [NotEq()], [Str('delete', lineno=1279, col_offset=26)], lineno=1279, col_offset=19), [For(Name('line', Store(), lineno=1280, col_offset=24), Subscript(Name('b', Load(), lineno=1280, col_offset=32), Slice(Name('j1', Load(), lineno=1280, col_offset=34), Name('j2', Load(), lineno=1280, col_offset=37), None), Load(), lineno=1280, col_offset=32), [Expr(Yield(BinOp(Subscript(Name('prefixmap', Load(), lineno=1281, col_offset=30), Index(Name('tag', Load(), lineno=1281, col_offset=40)), Load(), lineno=1281, col_offset=30), Add(), Name('line', Load(), lineno=1281, col_offset=47), lineno=1281, col_offset=30), lineno=1281, col_offset=24), lineno=1281, col_offset=24)], [], lineno=1280, col_offset=20)], [], lineno=1279, col_offset=16)], [], lineno=1278, col_offset=12)], [], lineno=1277, col_offset=8)], [], lineno=1252, col_offset=4)], [], lineno=1207, col_offset=0), FunctionDef('ndiff', arguments([Name('a', Param(), lineno=1283, col_offset=10), Name('b', Param(), lineno=1283, col_offset=13), Name('linejunk', Param(), lineno=1283, col_offset=16), Name('charjunk', Param(), lineno=1283, col_offset=31)], None, None, [Name('None', Load(), lineno=1283, col_offset=25), Name('IS_CHARACTER_JUNK', Load(), lineno=1283, col_offset=40)]), [Expr(Str('\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions (or None):\n\n    - linejunk: A function that should accept a single string argument, and\n      return true iff the string is junk.  The default is None, and is\n      recommended; as of Python 2.3, an adaptive notion of "noise" lines is\n      used that does a good job on its own.\n\n    - charjunk: A function that should accept a string of length 1. The\n      default is module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: bad idea to include newline\n      in this!).\n\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n\n    Example:\n\n    >>> diff = ndiff(\'one\\ntwo\\nthree\\n\'.splitlines(1),\n    ...              \'ore\\ntree\\nemu\\n\'.splitlines(1))\n    >>> print \'\'.join(diff),\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    ', lineno=1316, col_offset=-1), lineno=1316, col_offset=-1), Return(Call(Attribute(Call(Name('Differ', Load(), lineno=1317, col_offset=11), [Name('linejunk', Load(), lineno=1317, col_offset=18), Name('charjunk', Load(), lineno=1317, col_offset=28)], [], None, None, lineno=1317, col_offset=11), 'compare', Load(), lineno=1317, col_offset=11), [Name('a', Load(), lineno=1317, col_offset=46), Name('b', Load(), lineno=1317, col_offset=49)], [], None, None, lineno=1317, col_offset=11), lineno=1317, col_offset=4)], [], lineno=1283, col_offset=0), FunctionDef('_mdiff', arguments([Name('fromlines', Param(), lineno=1319, col_offset=11), Name('tolines', Param(), lineno=1319, col_offset=22), Name('context', Param(), lineno=1319, col_offset=31), Name('linejunk', Param(), lineno=1319, col_offset=45), Name('charjunk', Param(), lineno=1320, col_offset=11)], None, None, [Name('None', Load(), lineno=1319, col_offset=39), Name('None', Load(), lineno=1319, col_offset=54), Name('IS_CHARACTER_JUNK', Load(), lineno=1320, col_offset=20)]), [Expr(Str('Returns generator yielding marked up from/to side by side differences.\n\n    Arguments:\n    fromlines -- list of text lines to compared to tolines\n    tolines -- list of text lines to be compared to fromlines\n    context -- number of context lines to display on each side of difference,\n               if None, all from/to text lines will be generated.\n    linejunk -- passed on to ndiff (see ndiff documentation)\n    charjunk -- passed on to ndiff (see ndiff documentation)\n\n    This function returns an interator which returns a tuple:\n    (from line tuple, to line tuple, boolean flag)\n\n    from/to line tuple -- (line num, line text)\n        line num -- integer or None (to indicate a context separation)\n        line text -- original line text with following markers inserted:\n            \'\\0+\' -- marks start of added text\n            \'\\0-\' -- marks start of deleted text\n            \'\\0^\' -- marks start of changed text\n            \'\\1\' -- marks end of added/deleted/changed text\n\n    boolean flag -- None indicates context separation, True indicates\n        either "from" or "to" line contains a change, otherwise False.\n\n    This function/iterator was originally developed to generate side by side\n    file difference for making HTML pages (see HtmlDiff class for example\n    usage).\n\n    Note, this function utilizes the ndiff function to generate the side by\n    side difference markup.  Optional ndiff arguments may be passed to this\n    function and they in turn will be passed to ndiff.\n    ', lineno=1352, col_offset=-1), lineno=1352, col_offset=-1), Import([alias('re', None)], lineno=1353, col_offset=4), Assign([Name('change_re', Store(), lineno=1356, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1356, col_offset=16), 'compile', Load(), lineno=1356, col_offset=16), [Str('(\\++|\\-+|\\^+)', lineno=1356, col_offset=27)], [], None, None, lineno=1356, col_offset=16), lineno=1356, col_offset=4), Assign([Name('diff_lines_iterator', Store(), lineno=1359, col_offset=4)], Call(Name('ndiff', Load(), lineno=1359, col_offset=26), [Name('fromlines', Load(), lineno=1359, col_offset=32), Name('tolines', Load(), lineno=1359, col_offset=42), Name('linejunk', Load(), lineno=1359, col_offset=50), Name('charjunk', Load(), lineno=1359, col_offset=59)], [], None, None, lineno=1359, col_offset=26), lineno=1359, col_offset=4), FunctionDef('_make_line', arguments([Name('lines', Param(), lineno=1361, col_offset=19), Name('format_key', Param(), lineno=1361, col_offset=26), Name('side', Param(), lineno=1361, col_offset=38), Name('num_lines', Param(), lineno=1361, col_offset=44)], None, None, [List([Num(0, lineno=1361, col_offset=55), Num(0, lineno=1361, col_offset=57)], Load(), lineno=1361, col_offset=54)]), [Expr(Str('Returns line of text with user\'s change markup and line formatting.\n\n        lines -- list of lines from the ndiff generator to produce a line of\n                 text from.  When producing the line of text to return, the\n                 lines used are removed from this list.\n        format_key -- \'+\' return first line in list with "add" markup around\n                          the entire line.\n                      \'-\' return first line in list with "delete" markup around\n                          the entire line.\n                      \'?\' return first line in list with add/delete/change\n                          intraline markup (indices obtained from second line)\n                      None return first line in list with no markup\n        side -- indice into the num_lines list (0=from,1=to)\n        num_lines -- from/to current line number.  This is NOT intended to be a\n                     passed parameter.  It is present as a keyword argument to\n                     maintain memory of the current line numbers between calls\n                     of this function.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ', lineno=1383, col_offset=-1), lineno=1383, col_offset=-1), AugAssign(Subscript(Name('num_lines', Load(), lineno=1384, col_offset=8), Index(Name('side', Load(), lineno=1384, col_offset=18)), Store(), lineno=1384, col_offset=8), Add(), Num(1, lineno=1384, col_offset=27), lineno=1384, col_offset=8), If(Compare(Name('format_key', Load(), lineno=1387, col_offset=11), [Is()], [Name('None', Load(), lineno=1387, col_offset=25)], lineno=1387, col_offset=11), [Return(Tuple([Subscript(Name('num_lines', Load(), lineno=1388, col_offset=20), Index(Name('side', Load(), lineno=1388, col_offset=30)), Load(), lineno=1388, col_offset=20), Subscript(Call(Attribute(Name('lines', Load(), lineno=1388, col_offset=36), 'pop', Load(), lineno=1388, col_offset=36), [Num(0, lineno=1388, col_offset=46)], [], None, None, lineno=1388, col_offset=36), Slice(Num(2, lineno=1388, col_offset=49), None, None), Load(), lineno=1388, col_offset=36)], Load(), lineno=1388, col_offset=20), lineno=1388, col_offset=12)], [], lineno=1387, col_offset=8), If(Compare(Name('format_key', Load(), lineno=1390, col_offset=11), [Eq()], [Str('?', lineno=1390, col_offset=25)], lineno=1390, col_offset=11), [Assign([Tuple([Name('text', Store(), lineno=1391, col_offset=12), Name('markers', Store(), lineno=1391, col_offset=18)], Store(), lineno=1391, col_offset=12)], Tuple([Call(Attribute(Name('lines', Load(), lineno=1391, col_offset=28), 'pop', Load(), lineno=1391, col_offset=28), [Num(0, lineno=1391, col_offset=38)], [], None, None, lineno=1391, col_offset=28), Call(Attribute(Name('lines', Load(), lineno=1391, col_offset=42), 'pop', Load(), lineno=1391, col_offset=42), [Num(0, lineno=1391, col_offset=52)], [], None, None, lineno=1391, col_offset=42)], Load(), lineno=1391, col_offset=28), lineno=1391, col_offset=12), Assign([Name('sub_info', Store(), lineno=1393, col_offset=12)], List([], Load(), lineno=1393, col_offset=23), lineno=1393, col_offset=12), FunctionDef('record_sub_info', arguments([Name('match_object', Param(), lineno=1394, col_offset=32), Name('sub_info', Param(), lineno=1394, col_offset=45)], None, None, [Name('sub_info', Load(), lineno=1394, col_offset=54)]), [Expr(Call(Attribute(Name('sub_info', Load(), lineno=1395, col_offset=16), 'append', Load(), lineno=1395, col_offset=16), [List([Subscript(Call(Attribute(Name('match_object', Load(), lineno=1395, col_offset=33), 'group', Load(), lineno=1395, col_offset=33), [Num(1, lineno=1395, col_offset=52)], [], None, None, lineno=1395, col_offset=33), Index(Num(0, lineno=1395, col_offset=55)), Load(), lineno=1395, col_offset=33), Call(Attribute(Name('match_object', Load(), lineno=1395, col_offset=58), 'span', Load(), lineno=1395, col_offset=58), [], [], None, None, lineno=1395, col_offset=58)], Load(), lineno=1395, col_offset=32)], [], None, None, lineno=1395, col_offset=16), lineno=1395, col_offset=16), Return(Call(Attribute(Name('match_object', Load(), lineno=1396, col_offset=23), 'group', Load(), lineno=1396, col_offset=23), [Num(1, lineno=1396, col_offset=42)], [], None, None, lineno=1396, col_offset=23), lineno=1396, col_offset=16)], [], lineno=1394, col_offset=12), Expr(Call(Attribute(Name('change_re', Load(), lineno=1397, col_offset=12), 'sub', Load(), lineno=1397, col_offset=12), [Name('record_sub_info', Load(), lineno=1397, col_offset=26), Name('markers', Load(), lineno=1397, col_offset=42)], [], None, None, lineno=1397, col_offset=12), lineno=1397, col_offset=12), For(Tuple([Name('key', Store(), lineno=1400, col_offset=16), Tuple([Name('begin', Store(), lineno=1400, col_offset=21), Name('end', Store(), lineno=1400, col_offset=27)], Store(), lineno=1400, col_offset=21)], Store(), lineno=1400, col_offset=16), Subscript(Name('sub_info', Load(), lineno=1400, col_offset=35), Slice(None, None, Num(-1, lineno=1400, col_offset=47)), Load(), lineno=1400, col_offset=35), [Assign([Name('text', Store(), lineno=1401, col_offset=16)], BinOp(BinOp(BinOp(BinOp(BinOp(Subscript(Name('text', Load(), lineno=1401, col_offset=23), Slice(Num(0, lineno=1401, col_offset=28), Name('begin', Load(), lineno=1401, col_offset=30), None), Load(), lineno=1401, col_offset=23), Add(), Str('\x00', lineno=1401, col_offset=37), lineno=1401, col_offset=23), Add(), Name('key', Load(), lineno=1401, col_offset=42), lineno=1401, col_offset=41), Add(), Subscript(Name('text', Load(), lineno=1401, col_offset=46), Slice(Name('begin', Load(), lineno=1401, col_offset=51), Name('end', Load(), lineno=1401, col_offset=57), None), Load(), lineno=1401, col_offset=46), lineno=1401, col_offset=45), Add(), Str('\x01', lineno=1401, col_offset=62), lineno=1401, col_offset=61), Add(), Subscript(Name('text', Load(), lineno=1401, col_offset=67), Slice(Name('end', Load(), lineno=1401, col_offset=72), None, None), Load(), lineno=1401, col_offset=67), lineno=1401, col_offset=66), lineno=1401, col_offset=16)], [], lineno=1400, col_offset=12), Assign([Name('text', Store(), lineno=1402, col_offset=12)], Subscript(Name('text', Load(), lineno=1402, col_offset=19), Slice(Num(2, lineno=1402, col_offset=24), None, None), Load(), lineno=1402, col_offset=19), lineno=1402, col_offset=12)], [Assign([Name('text', Store(), lineno=1405, col_offset=12)], Subscript(Call(Attribute(Name('lines', Load(), lineno=1405, col_offset=19), 'pop', Load(), lineno=1405, col_offset=19), [Num(0, lineno=1405, col_offset=29)], [], None, None, lineno=1405, col_offset=19), Slice(Num(2, lineno=1405, col_offset=32), None, None), Load(), lineno=1405, col_offset=19), lineno=1405, col_offset=12), If(UnaryOp(Not(), Name('text', Load(), lineno=1408, col_offset=19), lineno=1408, col_offset=15), [Assign([Name('text', Store(), lineno=1409, col_offset=16)], Str(' ', lineno=1409, col_offset=23), lineno=1409, col_offset=16)], [], lineno=1408, col_offset=12), Assign([Name('text', Store(), lineno=1411, col_offset=12)], BinOp(BinOp(BinOp(Str('\x00', lineno=1411, col_offset=19), Add(), Name('format_key', Load(), lineno=1411, col_offset=26), lineno=1411, col_offset=19), Add(), Name('text', Load(), lineno=1411, col_offset=39), lineno=1411, col_offset=37), Add(), Str('\x01', lineno=1411, col_offset=46), lineno=1411, col_offset=44), lineno=1411, col_offset=12)], lineno=1390, col_offset=8), Return(Tuple([Subscript(Name('num_lines', Load(), lineno=1415, col_offset=16), Index(Name('side', Load(), lineno=1415, col_offset=26)), Load(), lineno=1415, col_offset=16), Name('text', Load(), lineno=1415, col_offset=32)], Load(), lineno=1415, col_offset=16), lineno=1415, col_offset=8)], [], lineno=1361, col_offset=4), FunctionDef('_line_iterator', arguments([], None, None, []), [Expr(Str('Yields from/to lines of text with a change indication.\n\n        This function is an iterator.  It itself pulls lines from a\n        differencing iterator, processes them and yields them.  When it can\n        it yields both a "from" and a "to" line, otherwise it will yield one\n        or the other.  In addition to yielding the lines of from/to text, a\n        boolean flag is yielded to indicate if the text line(s) have\n        differences in them.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ', lineno=1430, col_offset=-1), lineno=1430, col_offset=-1), Assign([Name('lines', Store(), lineno=1431, col_offset=8)], List([], Load(), lineno=1431, col_offset=16), lineno=1431, col_offset=8), Assign([Tuple([Name('num_blanks_pending', Store(), lineno=1432, col_offset=8), Name('num_blanks_to_yield', Store(), lineno=1432, col_offset=28)], Store(), lineno=1432, col_offset=8)], Tuple([Num(0, lineno=1432, col_offset=50), Num(0, lineno=1432, col_offset=53)], Load(), lineno=1432, col_offset=50), lineno=1432, col_offset=8), While(Name('True', Load(), lineno=1433, col_offset=14), [While(Compare(Call(Name('len', Load(), lineno=1437, col_offset=18), [Name('lines', Load(), lineno=1437, col_offset=22)], [], None, None, lineno=1437, col_offset=18), [Lt()], [Num(4, lineno=1437, col_offset=31)], lineno=1437, col_offset=18), [TryExcept([Expr(Call(Attribute(Name('lines', Load(), lineno=1439, col_offset=20), 'append', Load(), lineno=1439, col_offset=20), [Call(Attribute(Name('diff_lines_iterator', Load(), lineno=1439, col_offset=33), 'next', Load(), lineno=1439, col_offset=33), [], [], None, None, lineno=1439, col_offset=33)], [], None, None, lineno=1439, col_offset=20), lineno=1439, col_offset=20)], [ExceptHandler(Name('StopIteration', Load(), lineno=1440, col_offset=23), None, [Expr(Call(Attribute(Name('lines', Load(), lineno=1441, col_offset=20), 'append', Load(), lineno=1441, col_offset=20), [Str('X', lineno=1441, col_offset=33)], [], None, None, lineno=1441, col_offset=20), lineno=1441, col_offset=20)], lineno=1440, col_offset=16)], [], lineno=1438, col_offset=16)], [], lineno=1437, col_offset=12), Assign([Name('s', Store(), lineno=1442, col_offset=12)], Call(Attribute(Str('', lineno=1442, col_offset=16), 'join', Load(), lineno=1442, col_offset=16), [ListComp(Subscript(Name('line', Load(), lineno=1442, col_offset=25), Index(Num(0, lineno=1442, col_offset=30)), Load(), lineno=1442, col_offset=25), [comprehension(Name('line', Store(), lineno=1442, col_offset=37), Name('lines', Load(), lineno=1442, col_offset=45), [])], lineno=1442, col_offset=25)], [], None, None, lineno=1442, col_offset=16), lineno=1442, col_offset=12), If(Call(Attribute(Name('s', Load(), lineno=1443, col_offset=15), 'startswith', Load(), lineno=1443, col_offset=15), [Str('X', lineno=1443, col_offset=28)], [], None, None, lineno=1443, col_offset=15), [Assign([Name('num_blanks_to_yield', Store(), lineno=1447, col_offset=16)], Name('num_blanks_pending', Load(), lineno=1447, col_offset=38), lineno=1447, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1448, col_offset=17), 'startswith', Load(), lineno=1448, col_offset=17), [Str('-?+?', lineno=1448, col_offset=30)], [], None, None, lineno=1448, col_offset=17), [Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1450, col_offset=22), [Name('lines', Load(), lineno=1450, col_offset=33), Str('?', lineno=1450, col_offset=39), Num(0, lineno=1450, col_offset=43)], [], None, None, lineno=1450, col_offset=22), Call(Name('_make_line', Load(), lineno=1450, col_offset=47), [Name('lines', Load(), lineno=1450, col_offset=58), Str('?', lineno=1450, col_offset=64), Num(1, lineno=1450, col_offset=68)], [], None, None, lineno=1450, col_offset=47), Name('True', Load(), lineno=1450, col_offset=72)], Load(), lineno=1450, col_offset=22), lineno=1450, col_offset=16), lineno=1450, col_offset=16), Continue( lineno=1451, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1452, col_offset=17), 'startswith', Load(), lineno=1452, col_offset=17), [Str('--++', lineno=1452, col_offset=30)], [], None, None, lineno=1452, col_offset=17), [AugAssign(Name('num_blanks_pending', Store(), lineno=1455, col_offset=16), Sub(), Num(1, lineno=1455, col_offset=38), lineno=1455, col_offset=16), Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1456, col_offset=22), [Name('lines', Load(), lineno=1456, col_offset=33), Str('-', lineno=1456, col_offset=39), Num(0, lineno=1456, col_offset=43)], [], None, None, lineno=1456, col_offset=22), Name('None', Load(), lineno=1456, col_offset=47), Name('True', Load(), lineno=1456, col_offset=53)], Load(), lineno=1456, col_offset=22), lineno=1456, col_offset=16), lineno=1456, col_offset=16), Continue( lineno=1457, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1458, col_offset=17), 'startswith', Load(), lineno=1458, col_offset=17), [Tuple([Str('--?+', lineno=1458, col_offset=31), Str('--+', lineno=1458, col_offset=39), Str('- ', lineno=1458, col_offset=46)], Load(), lineno=1458, col_offset=31)], [], None, None, lineno=1458, col_offset=17), [Assign([Tuple([Name('from_line', Store(), lineno=1461, col_offset=16), Name('to_line', Store(), lineno=1461, col_offset=26)], Store(), lineno=1461, col_offset=16)], Tuple([Call(Name('_make_line', Load(), lineno=1461, col_offset=36), [Name('lines', Load(), lineno=1461, col_offset=47), Str('-', lineno=1461, col_offset=53), Num(0, lineno=1461, col_offset=57)], [], None, None, lineno=1461, col_offset=36), Name('None', Load(), lineno=1461, col_offset=61)], Load(), lineno=1461, col_offset=36), lineno=1461, col_offset=16), Assign([Tuple([Name('num_blanks_to_yield', Store(), lineno=1462, col_offset=16), Name('num_blanks_pending', Store(), lineno=1462, col_offset=36)], Store(), lineno=1462, col_offset=16)], Tuple([BinOp(Name('num_blanks_pending', Load(), lineno=1462, col_offset=57), Sub(), Num(1, lineno=1462, col_offset=76), lineno=1462, col_offset=57), Num(0, lineno=1462, col_offset=78)], Load(), lineno=1462, col_offset=57), lineno=1462, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1463, col_offset=17), 'startswith', Load(), lineno=1463, col_offset=17), [Str('-+?', lineno=1463, col_offset=30)], [], None, None, lineno=1463, col_offset=17), [Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1465, col_offset=22), [Name('lines', Load(), lineno=1465, col_offset=33), Name('None', Load(), lineno=1465, col_offset=39), Num(0, lineno=1465, col_offset=44)], [], None, None, lineno=1465, col_offset=22), Call(Name('_make_line', Load(), lineno=1465, col_offset=48), [Name('lines', Load(), lineno=1465, col_offset=59), Str('?', lineno=1465, col_offset=65), Num(1, lineno=1465, col_offset=69)], [], None, None, lineno=1465, col_offset=48), Name('True', Load(), lineno=1465, col_offset=73)], Load(), lineno=1465, col_offset=22), lineno=1465, col_offset=16), lineno=1465, col_offset=16), Continue( lineno=1466, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1467, col_offset=17), 'startswith', Load(), lineno=1467, col_offset=17), [Str('-?+', lineno=1467, col_offset=30)], [], None, None, lineno=1467, col_offset=17), [Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1469, col_offset=22), [Name('lines', Load(), lineno=1469, col_offset=33), Str('?', lineno=1469, col_offset=39), Num(0, lineno=1469, col_offset=43)], [], None, None, lineno=1469, col_offset=22), Call(Name('_make_line', Load(), lineno=1469, col_offset=47), [Name('lines', Load(), lineno=1469, col_offset=58), Name('None', Load(), lineno=1469, col_offset=64), Num(1, lineno=1469, col_offset=69)], [], None, None, lineno=1469, col_offset=47), Name('True', Load(), lineno=1469, col_offset=73)], Load(), lineno=1469, col_offset=22), lineno=1469, col_offset=16), lineno=1469, col_offset=16), Continue( lineno=1470, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1471, col_offset=17), 'startswith', Load(), lineno=1471, col_offset=17), [Str('-', lineno=1471, col_offset=30)], [], None, None, lineno=1471, col_offset=17), [AugAssign(Name('num_blanks_pending', Store(), lineno=1473, col_offset=16), Sub(), Num(1, lineno=1473, col_offset=38), lineno=1473, col_offset=16), Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1474, col_offset=22), [Name('lines', Load(), lineno=1474, col_offset=33), Str('-', lineno=1474, col_offset=39), Num(0, lineno=1474, col_offset=43)], [], None, None, lineno=1474, col_offset=22), Name('None', Load(), lineno=1474, col_offset=47), Name('True', Load(), lineno=1474, col_offset=53)], Load(), lineno=1474, col_offset=22), lineno=1474, col_offset=16), lineno=1474, col_offset=16), Continue( lineno=1475, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1476, col_offset=17), 'startswith', Load(), lineno=1476, col_offset=17), [Str('+--', lineno=1476, col_offset=30)], [], None, None, lineno=1476, col_offset=17), [AugAssign(Name('num_blanks_pending', Store(), lineno=1479, col_offset=16), Add(), Num(1, lineno=1479, col_offset=38), lineno=1479, col_offset=16), Expr(Yield(Tuple([Name('None', Load(), lineno=1480, col_offset=22), Call(Name('_make_line', Load(), lineno=1480, col_offset=28), [Name('lines', Load(), lineno=1480, col_offset=39), Str('+', lineno=1480, col_offset=45), Num(1, lineno=1480, col_offset=49)], [], None, None, lineno=1480, col_offset=28), Name('True', Load(), lineno=1480, col_offset=53)], Load(), lineno=1480, col_offset=22), lineno=1480, col_offset=16), lineno=1480, col_offset=16), Continue( lineno=1481, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1482, col_offset=17), 'startswith', Load(), lineno=1482, col_offset=17), [Tuple([Str('+ ', lineno=1482, col_offset=31), Str('+-', lineno=1482, col_offset=37)], Load(), lineno=1482, col_offset=31)], [], None, None, lineno=1482, col_offset=17), [Assign([Tuple([Name('from_line', Store(), lineno=1484, col_offset=16), Name('to_line', Store(), lineno=1484, col_offset=27)], Store(), lineno=1484, col_offset=16)], Tuple([Name('None', Load(), lineno=1484, col_offset=37), Call(Name('_make_line', Load(), lineno=1484, col_offset=43), [Name('lines', Load(), lineno=1484, col_offset=54), Str('+', lineno=1484, col_offset=60), Num(1, lineno=1484, col_offset=64)], [], None, None, lineno=1484, col_offset=43)], Load(), lineno=1484, col_offset=37), lineno=1484, col_offset=16), Assign([Tuple([Name('num_blanks_to_yield', Store(), lineno=1485, col_offset=16), Name('num_blanks_pending', Store(), lineno=1485, col_offset=36)], Store(), lineno=1485, col_offset=16)], Tuple([BinOp(Name('num_blanks_pending', Load(), lineno=1485, col_offset=57), Add(), Num(1, lineno=1485, col_offset=76), lineno=1485, col_offset=57), Num(0, lineno=1485, col_offset=78)], Load(), lineno=1485, col_offset=57), lineno=1485, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1486, col_offset=17), 'startswith', Load(), lineno=1486, col_offset=17), [Str('+', lineno=1486, col_offset=30)], [], None, None, lineno=1486, col_offset=17), [AugAssign(Name('num_blanks_pending', Store(), lineno=1488, col_offset=16), Add(), Num(1, lineno=1488, col_offset=38), lineno=1488, col_offset=16), Expr(Yield(Tuple([Name('None', Load(), lineno=1489, col_offset=22), Call(Name('_make_line', Load(), lineno=1489, col_offset=28), [Name('lines', Load(), lineno=1489, col_offset=39), Str('+', lineno=1489, col_offset=45), Num(1, lineno=1489, col_offset=49)], [], None, None, lineno=1489, col_offset=28), Name('True', Load(), lineno=1489, col_offset=53)], Load(), lineno=1489, col_offset=22), lineno=1489, col_offset=16), lineno=1489, col_offset=16), Continue( lineno=1490, col_offset=16)], [If(Call(Attribute(Name('s', Load(), lineno=1491, col_offset=17), 'startswith', Load(), lineno=1491, col_offset=17), [Str(' ', lineno=1491, col_offset=30)], [], None, None, lineno=1491, col_offset=17), [Expr(Yield(Tuple([Call(Name('_make_line', Load(), lineno=1493, col_offset=22), [Subscript(Name('lines', Load(), lineno=1493, col_offset=33), Slice(None, None, None), Load(), lineno=1493, col_offset=33), Name('None', Load(), lineno=1493, col_offset=42), Num(0, lineno=1493, col_offset=47)], [], None, None, lineno=1493, col_offset=22), Call(Name('_make_line', Load(), lineno=1493, col_offset=50), [Name('lines', Load(), lineno=1493, col_offset=61), Name('None', Load(), lineno=1493, col_offset=67), Num(1, lineno=1493, col_offset=72)], [], None, None, lineno=1493, col_offset=50), Name('False', Load(), lineno=1493, col_offset=75)], Load(), lineno=1493, col_offset=22), lineno=1493, col_offset=16), lineno=1493, col_offset=16), Continue( lineno=1494, col_offset=16)], [], lineno=1491, col_offset=17)], lineno=1486, col_offset=17)], lineno=1482, col_offset=17)], lineno=1476, col_offset=17)], lineno=1471, col_offset=17)], lineno=1467, col_offset=17)], lineno=1463, col_offset=17)], lineno=1458, col_offset=17)], lineno=1452, col_offset=17)], lineno=1448, col_offset=17)], lineno=1443, col_offset=12), While(Compare(Name('num_blanks_to_yield', Load(), lineno=1497, col_offset=18), [Lt()], [Num(0, lineno=1497, col_offset=40)], lineno=1497, col_offset=18), [AugAssign(Name('num_blanks_to_yield', Store(), lineno=1498, col_offset=16), Add(), Num(1, lineno=1498, col_offset=39), lineno=1498, col_offset=16), Expr(Yield(Tuple([Name('None', Load(), lineno=1499, col_offset=22), Tuple([Str('', lineno=1499, col_offset=28), Str('\n', lineno=1499, col_offset=31)], Load(), lineno=1499, col_offset=28), Name('True', Load(), lineno=1499, col_offset=37)], Load(), lineno=1499, col_offset=22), lineno=1499, col_offset=16), lineno=1499, col_offset=16)], [], lineno=1497, col_offset=12), While(Compare(Name('num_blanks_to_yield', Load(), lineno=1500, col_offset=18), [Gt()], [Num(0, lineno=1500, col_offset=40)], lineno=1500, col_offset=18), [AugAssign(Name('num_blanks_to_yield', Store(), lineno=1501, col_offset=16), Sub(), Num(1, lineno=1501, col_offset=39), lineno=1501, col_offset=16), Expr(Yield(Tuple([Tuple([Str('', lineno=1502, col_offset=23), Str('\n', lineno=1502, col_offset=26)], Load(), lineno=1502, col_offset=23), Name('None', Load(), lineno=1502, col_offset=32), Name('True', Load(), lineno=1502, col_offset=37)], Load(), lineno=1502, col_offset=22), lineno=1502, col_offset=16), lineno=1502, col_offset=16)], [], lineno=1500, col_offset=12), If(Call(Attribute(Name('s', Load(), lineno=1503, col_offset=15), 'startswith', Load(), lineno=1503, col_offset=15), [Str('X', lineno=1503, col_offset=28)], [], None, None, lineno=1503, col_offset=15), [Raise(Name('StopIteration', Load(), lineno=1504, col_offset=22), None, None, lineno=1504, col_offset=16)], [Expr(Yield(Tuple([Name('from_line', Load(), lineno=1506, col_offset=22), Name('to_line', Load(), lineno=1506, col_offset=32), Name('True', Load(), lineno=1506, col_offset=40)], Load(), lineno=1506, col_offset=22), lineno=1506, col_offset=16), lineno=1506, col_offset=16)], lineno=1503, col_offset=12)], [], lineno=1433, col_offset=8)], [], lineno=1417, col_offset=4), FunctionDef('_line_pair_iterator', arguments([], None, None, []), [Expr(Str('Yields from/to lines of text with a change indication.\n\n        This function is an iterator.  It itself pulls lines from the line\n        iterator.  Its difference from that iterator is that this function\n        always yields a pair of from/to text lines (with the change\n        indication).  If necessary it will collect single from/to lines\n        until it has a matching pair from/to pair to yield.\n\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        ', lineno=1520, col_offset=-1), lineno=1520, col_offset=-1), Assign([Name('line_iterator', Store(), lineno=1521, col_offset=8)], Call(Name('_line_iterator', Load(), lineno=1521, col_offset=24), [], [], None, None, lineno=1521, col_offset=24), lineno=1521, col_offset=8), Assign([Tuple([Name('fromlines', Store(), lineno=1522, col_offset=8), Name('tolines', Store(), lineno=1522, col_offset=18)], Store(), lineno=1522, col_offset=8)], Tuple([List([], Load(), lineno=1522, col_offset=26), List([], Load(), lineno=1522, col_offset=29)], Load(), lineno=1522, col_offset=26), lineno=1522, col_offset=8), While(Name('True', Load(), lineno=1523, col_offset=14), [While(BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=1525, col_offset=19), [Name('fromlines', Load(), lineno=1525, col_offset=23)], [], None, None, lineno=1525, col_offset=19), [Eq()], [Num(0, lineno=1525, col_offset=35)], lineno=1525, col_offset=19), Compare(Call(Name('len', Load(), lineno=1525, col_offset=40), [Name('tolines', Load(), lineno=1525, col_offset=44)], [], None, None, lineno=1525, col_offset=40), [Eq()], [Num(0, lineno=1525, col_offset=54)], lineno=1525, col_offset=40)], lineno=1525, col_offset=19), [Assign([Tuple([Name('from_line', Store(), lineno=1526, col_offset=16), Name('to_line', Store(), lineno=1526, col_offset=27), Name('found_diff', Store(), lineno=1526, col_offset=36)], Store(), lineno=1526, col_offset=16)], Call(Attribute(Name('line_iterator', Load(), lineno=1526, col_offset=48), 'next', Load(), lineno=1526, col_offset=48), [], [], None, None, lineno=1526, col_offset=48), lineno=1526, col_offset=16), If(Compare(Name('from_line', Load(), lineno=1527, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1527, col_offset=36)], lineno=1527, col_offset=19), [Expr(Call(Attribute(Name('fromlines', Load(), lineno=1528, col_offset=20), 'append', Load(), lineno=1528, col_offset=20), [Tuple([Name('from_line', Load(), lineno=1528, col_offset=38), Name('found_diff', Load(), lineno=1528, col_offset=48)], Load(), lineno=1528, col_offset=38)], [], None, None, lineno=1528, col_offset=20), lineno=1528, col_offset=20)], [], lineno=1527, col_offset=16), If(Compare(Name('to_line', Load(), lineno=1529, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1529, col_offset=34)], lineno=1529, col_offset=19), [Expr(Call(Attribute(Name('tolines', Load(), lineno=1530, col_offset=20), 'append', Load(), lineno=1530, col_offset=20), [Tuple([Name('to_line', Load(), lineno=1530, col_offset=36), Name('found_diff', Load(), lineno=1530, col_offset=44)], Load(), lineno=1530, col_offset=36)], [], None, None, lineno=1530, col_offset=20), lineno=1530, col_offset=20)], [], lineno=1529, col_offset=16)], [], lineno=1525, col_offset=12), Assign([Tuple([Name('from_line', Store(), lineno=1532, col_offset=12), Name('fromDiff', Store(), lineno=1532, col_offset=23)], Store(), lineno=1532, col_offset=12)], Call(Attribute(Name('fromlines', Load(), lineno=1532, col_offset=34), 'pop', Load(), lineno=1532, col_offset=34), [Num(0, lineno=1532, col_offset=48)], [], None, None, lineno=1532, col_offset=34), lineno=1532, col_offset=12), Assign([Tuple([Name('to_line', Store(), lineno=1533, col_offset=12), Name('to_diff', Store(), lineno=1533, col_offset=21)], Store(), lineno=1533, col_offset=12)], Call(Attribute(Name('tolines', Load(), lineno=1533, col_offset=31), 'pop', Load(), lineno=1533, col_offset=31), [Num(0, lineno=1533, col_offset=43)], [], None, None, lineno=1533, col_offset=31), lineno=1533, col_offset=12), Expr(Yield(Tuple([Name('from_line', Load(), lineno=1534, col_offset=19), Name('to_line', Load(), lineno=1534, col_offset=29), BoolOp(Or(), [Name('fromDiff', Load(), lineno=1534, col_offset=37), Name('to_diff', Load(), lineno=1534, col_offset=49)], lineno=1534, col_offset=37)], Load(), lineno=1534, col_offset=19), lineno=1534, col_offset=12), lineno=1534, col_offset=12)], [], lineno=1523, col_offset=8)], [], lineno=1508, col_offset=4), Assign([Name('line_pair_iterator', Store(), lineno=1538, col_offset=4)], Call(Name('_line_pair_iterator', Load(), lineno=1538, col_offset=25), [], [], None, None, lineno=1538, col_offset=25), lineno=1538, col_offset=4), If(Compare(Name('context', Load(), lineno=1539, col_offset=7), [Is()], [Name('None', Load(), lineno=1539, col_offset=18)], lineno=1539, col_offset=7), [While(Name('True', Load(), lineno=1540, col_offset=14), [Expr(Yield(Call(Attribute(Name('line_pair_iterator', Load(), lineno=1541, col_offset=18), 'next', Load(), lineno=1541, col_offset=18), [], [], None, None, lineno=1541, col_offset=18), lineno=1541, col_offset=12), lineno=1541, col_offset=12)], [], lineno=1540, col_offset=8)], [AugAssign(Name('context', Store(), lineno=1545, col_offset=8), Add(), Num(1, lineno=1545, col_offset=19), lineno=1545, col_offset=8), Assign([Name('lines_to_write', Store(), lineno=1546, col_offset=8)], Num(0, lineno=1546, col_offset=25), lineno=1546, col_offset=8), While(Name('True', Load(), lineno=1547, col_offset=14), [Assign([Tuple([Name('index', Store(), lineno=1551, col_offset=12), Name('contextLines', Store(), lineno=1551, col_offset=19)], Store(), lineno=1551, col_offset=12)], Tuple([Num(0, lineno=1551, col_offset=34), BinOp(List([Name('None', Load(), lineno=1551, col_offset=38)], Load(), lineno=1551, col_offset=37), Mult(), Name('context', Load(), lineno=1551, col_offset=45), lineno=1551, col_offset=37)], Load(), lineno=1551, col_offset=34), lineno=1551, col_offset=12), Assign([Name('found_diff', Store(), lineno=1552, col_offset=12)], Name('False', Load(), lineno=1552, col_offset=25), lineno=1552, col_offset=12), While(Compare(Name('found_diff', Load(), lineno=1553, col_offset=18), [Is()], [Name('False', Load(), lineno=1553, col_offset=32)], lineno=1553, col_offset=18), [Assign([Tuple([Name('from_line', Store(), lineno=1554, col_offset=16), Name('to_line', Store(), lineno=1554, col_offset=27), Name('found_diff', Store(), lineno=1554, col_offset=36)], Store(), lineno=1554, col_offset=16)], Call(Attribute(Name('line_pair_iterator', Load(), lineno=1554, col_offset=49), 'next', Load(), lineno=1554, col_offset=49), [], [], None, None, lineno=1554, col_offset=49), lineno=1554, col_offset=16), Assign([Name('i', Store(), lineno=1555, col_offset=16)], BinOp(Name('index', Load(), lineno=1555, col_offset=20), Mod(), Name('context', Load(), lineno=1555, col_offset=28), lineno=1555, col_offset=20), lineno=1555, col_offset=16), Assign([Subscript(Name('contextLines', Load(), lineno=1556, col_offset=16), Index(Name('i', Load(), lineno=1556, col_offset=29)), Store(), lineno=1556, col_offset=16)], Tuple([Name('from_line', Load(), lineno=1556, col_offset=35), Name('to_line', Load(), lineno=1556, col_offset=46), Name('found_diff', Load(), lineno=1556, col_offset=55)], Load(), lineno=1556, col_offset=35), lineno=1556, col_offset=16), AugAssign(Name('index', Store(), lineno=1557, col_offset=16), Add(), Num(1, lineno=1557, col_offset=25), lineno=1557, col_offset=16)], [], lineno=1553, col_offset=12), If(Compare(Name('index', Load(), lineno=1560, col_offset=15), [Gt()], [Name('context', Load(), lineno=1560, col_offset=23)], lineno=1560, col_offset=15), [Expr(Yield(Tuple([Name('None', Load(), lineno=1561, col_offset=22), Name('None', Load(), lineno=1561, col_offset=28), Name('None', Load(), lineno=1561, col_offset=34)], Load(), lineno=1561, col_offset=22), lineno=1561, col_offset=16), lineno=1561, col_offset=16), Assign([Name('lines_to_write', Store(), lineno=1562, col_offset=16)], Name('context', Load(), lineno=1562, col_offset=33), lineno=1562, col_offset=16)], [Assign([Name('lines_to_write', Store(), lineno=1564, col_offset=16)], Name('index', Load(), lineno=1564, col_offset=33), lineno=1564, col_offset=16), Assign([Name('index', Store(), lineno=1565, col_offset=16)], Num(0, lineno=1565, col_offset=24), lineno=1565, col_offset=16)], lineno=1560, col_offset=12), While(Name('lines_to_write', Load(), lineno=1566, col_offset=18), [Assign([Name('i', Store(), lineno=1567, col_offset=16)], BinOp(Name('index', Load(), lineno=1567, col_offset=20), Mod(), Name('context', Load(), lineno=1567, col_offset=28), lineno=1567, col_offset=20), lineno=1567, col_offset=16), AugAssign(Name('index', Store(), lineno=1568, col_offset=16), Add(), Num(1, lineno=1568, col_offset=25), lineno=1568, col_offset=16), Expr(Yield(Subscript(Name('contextLines', Load(), lineno=1569, col_offset=22), Index(Name('i', Load(), lineno=1569, col_offset=35)), Load(), lineno=1569, col_offset=22), lineno=1569, col_offset=16), lineno=1569, col_offset=16), AugAssign(Name('lines_to_write', Store(), lineno=1570, col_offset=16), Sub(), Num(1, lineno=1570, col_offset=34), lineno=1570, col_offset=16)], [], lineno=1566, col_offset=12), Assign([Name('lines_to_write', Store(), lineno=1572, col_offset=12)], BinOp(Name('context', Load(), lineno=1572, col_offset=29), Sub(), Num(1, lineno=1572, col_offset=37), lineno=1572, col_offset=29), lineno=1572, col_offset=12), While(Name('lines_to_write', Load(), lineno=1573, col_offset=18), [Assign([Tuple([Name('from_line', Store(), lineno=1574, col_offset=16), Name('to_line', Store(), lineno=1574, col_offset=27), Name('found_diff', Store(), lineno=1574, col_offset=36)], Store(), lineno=1574, col_offset=16)], Call(Attribute(Name('line_pair_iterator', Load(), lineno=1574, col_offset=49), 'next', Load(), lineno=1574, col_offset=49), [], [], None, None, lineno=1574, col_offset=49), lineno=1574, col_offset=16), If(Name('found_diff', Load(), lineno=1576, col_offset=19), [Assign([Name('lines_to_write', Store(), lineno=1577, col_offset=20)], BinOp(Name('context', Load(), lineno=1577, col_offset=37), Sub(), Num(1, lineno=1577, col_offset=45), lineno=1577, col_offset=37), lineno=1577, col_offset=20)], [AugAssign(Name('lines_to_write', Store(), lineno=1579, col_offset=20), Sub(), Num(1, lineno=1579, col_offset=38), lineno=1579, col_offset=20)], lineno=1576, col_offset=16), Expr(Yield(Tuple([Name('from_line', Load(), lineno=1580, col_offset=22), Name('to_line', Load(), lineno=1580, col_offset=33), Name('found_diff', Load(), lineno=1580, col_offset=42)], Load(), lineno=1580, col_offset=22), lineno=1580, col_offset=16), lineno=1580, col_offset=16)], [], lineno=1573, col_offset=12)], [], lineno=1547, col_offset=8)], lineno=1539, col_offset=4)], [], lineno=1319, col_offset=0), Assign([Name('_file_template', Store(), lineno=1583, col_offset=0)], Str('\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n<html>\n\n<head>\n    <meta http-equiv="Content-Type"\n          content="text/html; charset=ISO-8859-1" />\n    <title></title>\n    <style type="text/css">%(styles)s\n    </style>\n</head>\n\n<body>\n    %(table)s%(legend)s\n</body>\n\n</html>', lineno=1601, col_offset=-1), lineno=1583, col_offset=0), Assign([Name('_styles', Store(), lineno=1603, col_offset=0)], Str('\n        table.diff {font-family:Courier; border:medium;}\n        .diff_header {background-color:#e0e0e0}\n        td.diff_header {text-align:right}\n        .diff_next {background-color:#c0c0c0}\n        .diff_add {background-color:#aaffaa}\n        .diff_chg {background-color:#ffff77}\n        .diff_sub {background-color:#ffaaaa}', lineno=1610, col_offset=-1), lineno=1603, col_offset=0), Assign([Name('_table_template', Store(), lineno=1612, col_offset=0)], Str('\n    <table class="diff" id="difflib_chg_%(prefix)s_top"\n           cellspacing="0" cellpadding="0" rules="groups" >\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        %(header_row)s\n        <tbody>\n%(data_rows)s        </tbody>\n    </table>', lineno=1620, col_offset=-1), lineno=1612, col_offset=0), Assign([Name('_legend', Store(), lineno=1622, col_offset=0)], Str('\n    <table class="diff" summary="Legends">\n        <tr> <th colspan="2"> Legends </th> </tr>\n        <tr> <td> <table border="" summary="Colors">\n                      <tr><th> Colors </th> </tr>\n                      <tr><td class="diff_add">&nbsp;Added&nbsp;</td></tr>\n                      <tr><td class="diff_chg">Changed</td> </tr>\n                      <tr><td class="diff_sub">Deleted</td> </tr>\n                  </table></td>\n             <td> <table border="" summary="Links">\n                      <tr><th colspan="2"> Links </th> </tr>\n                      <tr><td>(f)irst change</td> </tr>\n                      <tr><td>(n)ext change</td> </tr>\n                      <tr><td>(t)op</td> </tr>\n                  </table></td> </tr>\n    </table>', lineno=1637, col_offset=-1), lineno=1622, col_offset=0), ClassDef('HtmlDiff', [Name('object', Load(), lineno=1639, col_offset=15)], [Expr(Str('For producing HTML side by side comparison with change highlights.\n\n    This class can be used to create an HTML table (or a complete HTML file\n    containing the table) showing a side by side, line by line comparison\n    of text with inter-line and intra-line change highlights.  The table can\n    be generated in either full or contextual difference mode.\n\n    The following methods are provided for HTML generation:\n\n    make_table -- generates HTML for a single side by side table\n    make_file -- generates complete HTML file with a single side by side table\n\n    See tools/scripts/diff.py for an example usage of this class.\n    ', lineno=1653, col_offset=-1), lineno=1653, col_offset=-1), Assign([Name('_file_template', Store(), lineno=1655, col_offset=4)], Name('_file_template', Load(), lineno=1655, col_offset=21), lineno=1655, col_offset=4), Assign([Name('_styles', Store(), lineno=1656, col_offset=4)], Name('_styles', Load(), lineno=1656, col_offset=14), lineno=1656, col_offset=4), Assign([Name('_table_template', Store(), lineno=1657, col_offset=4)], Name('_table_template', Load(), lineno=1657, col_offset=22), lineno=1657, col_offset=4), Assign([Name('_legend', Store(), lineno=1658, col_offset=4)], Name('_legend', Load(), lineno=1658, col_offset=14), lineno=1658, col_offset=4), Assign([Name('_default_prefix', Store(), lineno=1659, col_offset=4)], Num(0, lineno=1659, col_offset=22), lineno=1659, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1661, col_offset=17), Name('tabsize', Param(), lineno=1661, col_offset=22), Name('wrapcolumn', Param(), lineno=1661, col_offset=32), Name('linejunk', Param(), lineno=1661, col_offset=48), Name('charjunk', Param(), lineno=1662, col_offset=17)], None, None, [Num(8, lineno=1661, col_offset=30), Name('None', Load(), lineno=1661, col_offset=43), Name('None', Load(), lineno=1661, col_offset=57), Name('IS_CHARACTER_JUNK', Load(), lineno=1662, col_offset=26)]), [Expr(Str('HtmlDiff instance initializer\n\n        Arguments:\n        tabsize -- tab stop spacing, defaults to 8.\n        wrapcolumn -- column number where lines are broken and wrapped,\n            defaults to None where lines are not wrapped.\n        linejunk,charjunk -- keyword arguments passed into ndiff() (used to by\n            HtmlDiff() to generate the side by side HTML differences).  See\n            ndiff() documentation for argument default values and descriptions.\n        ', lineno=1672, col_offset=-1), lineno=1672, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1673, col_offset=8), '_tabsize', Store(), lineno=1673, col_offset=8)], Name('tabsize', Load(), lineno=1673, col_offset=24), lineno=1673, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1674, col_offset=8), '_wrapcolumn', Store(), lineno=1674, col_offset=8)], Name('wrapcolumn', Load(), lineno=1674, col_offset=27), lineno=1674, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1675, col_offset=8), '_linejunk', Store(), lineno=1675, col_offset=8)], Name('linejunk', Load(), lineno=1675, col_offset=25), lineno=1675, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1676, col_offset=8), '_charjunk', Store(), lineno=1676, col_offset=8)], Name('charjunk', Load(), lineno=1676, col_offset=25), lineno=1676, col_offset=8)], [], lineno=1661, col_offset=4), FunctionDef('make_file', arguments([Name('self', Param(), lineno=1678, col_offset=18), Name('fromlines', Param(), lineno=1678, col_offset=23), Name('tolines', Param(), lineno=1678, col_offset=33), Name('fromdesc', Param(), lineno=1678, col_offset=41), Name('todesc', Param(), lineno=1678, col_offset=53), Name('context', Param(), lineno=1678, col_offset=63), Name('numlines', Param(), lineno=1679, col_offset=18)], None, None, [Str('', lineno=1678, col_offset=50), Str('', lineno=1678, col_offset=60), Name('False', Load(), lineno=1678, col_offset=71), Num(5, lineno=1679, col_offset=27)]), [Expr(Str('Returns HTML file of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        ', lineno=1694, col_offset=-1), lineno=1694, col_offset=-1), Return(BinOp(Attribute(Name('self', Load(), lineno=1696, col_offset=15), '_file_template', Load(), lineno=1696, col_offset=15), Mod(), Call(Name('dict', Load(), lineno=1696, col_offset=37), [], [keyword('styles', Attribute(Name('self', Load(), lineno=1697, col_offset=21), '_styles', Load(), lineno=1697, col_offset=21)), keyword('legend', Attribute(Name('self', Load(), lineno=1698, col_offset=21), '_legend', Load(), lineno=1698, col_offset=21)), keyword('table', Call(Attribute(Name('self', Load(), lineno=1699, col_offset=20), 'make_table', Load(), lineno=1699, col_offset=20), [Name('fromlines', Load(), lineno=1699, col_offset=36), Name('tolines', Load(), lineno=1699, col_offset=46), Name('fromdesc', Load(), lineno=1699, col_offset=54), Name('todesc', Load(), lineno=1699, col_offset=63)], [keyword('context', Name('context', Load(), lineno=1700, col_offset=44)), keyword('numlines', Name('numlines', Load(), lineno=1700, col_offset=61))], None, None, lineno=1699, col_offset=20))], None, None, lineno=1696, col_offset=37), lineno=1696, col_offset=15), lineno=1696, col_offset=8)], [], lineno=1678, col_offset=4), FunctionDef('_tab_newline_replace', arguments([Name('self', Param(), lineno=1702, col_offset=29), Name('fromlines', Param(), lineno=1702, col_offset=34), Name('tolines', Param(), lineno=1702, col_offset=44)], None, None, []), [Expr(Str('Returns from/to line lists with tabs expanded and newlines removed.\n\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the HTML generation, the tab\n        characters will be replaced with a nonbreakable space.\n        ', lineno=1711, col_offset=-1), lineno=1711, col_offset=-1), FunctionDef('expand_tabs', arguments([Name('line', Param(), lineno=1712, col_offset=24)], None, None, []), [Assign([Name('line', Store(), lineno=1714, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=1714, col_offset=19), 'replace', Load(), lineno=1714, col_offset=19), [Str(' ', lineno=1714, col_offset=32), Str('\x00', lineno=1714, col_offset=36)], [], None, None, lineno=1714, col_offset=19), lineno=1714, col_offset=12), Assign([Name('line', Store(), lineno=1716, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=1716, col_offset=19), 'expandtabs', Load(), lineno=1716, col_offset=19), [Attribute(Name('self', Load(), lineno=1716, col_offset=35), '_tabsize', Load(), lineno=1716, col_offset=35)], [], None, None, lineno=1716, col_offset=19), lineno=1716, col_offset=12), Assign([Name('line', Store(), lineno=1719, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=1719, col_offset=19), 'replace', Load(), lineno=1719, col_offset=19), [Str(' ', lineno=1719, col_offset=32), Str('\t', lineno=1719, col_offset=36)], [], None, None, lineno=1719, col_offset=19), lineno=1719, col_offset=12), Return(Call(Attribute(Call(Attribute(Name('line', Load(), lineno=1720, col_offset=19), 'replace', Load(), lineno=1720, col_offset=19), [Str('\x00', lineno=1720, col_offset=32), Str(' ', lineno=1720, col_offset=37)], [], None, None, lineno=1720, col_offset=19), 'rstrip', Load(), lineno=1720, col_offset=19), [Str('\n', lineno=1720, col_offset=49)], [], None, None, lineno=1720, col_offset=19), lineno=1720, col_offset=12)], [], lineno=1712, col_offset=8), Assign([Name('fromlines', Store(), lineno=1721, col_offset=8)], ListComp(Call(Name('expand_tabs', Load(), lineno=1721, col_offset=21), [Name('line', Load(), lineno=1721, col_offset=33)], [], None, None, lineno=1721, col_offset=21), [comprehension(Name('line', Store(), lineno=1721, col_offset=43), Name('fromlines', Load(), lineno=1721, col_offset=51), [])], lineno=1721, col_offset=21), lineno=1721, col_offset=8), Assign([Name('tolines', Store(), lineno=1722, col_offset=8)], ListComp(Call(Name('expand_tabs', Load(), lineno=1722, col_offset=19), [Name('line', Load(), lineno=1722, col_offset=31)], [], None, None, lineno=1722, col_offset=19), [comprehension(Name('line', Store(), lineno=1722, col_offset=41), Name('tolines', Load(), lineno=1722, col_offset=49), [])], lineno=1722, col_offset=19), lineno=1722, col_offset=8), Return(Tuple([Name('fromlines', Load(), lineno=1723, col_offset=15), Name('tolines', Load(), lineno=1723, col_offset=25)], Load(), lineno=1723, col_offset=15), lineno=1723, col_offset=8)], [], lineno=1702, col_offset=4), FunctionDef('_split_line', arguments([Name('self', Param(), lineno=1725, col_offset=20), Name('data_list', Param(), lineno=1725, col_offset=25), Name('line_num', Param(), lineno=1725, col_offset=35), Name('text', Param(), lineno=1725, col_offset=44)], None, None, []), [Expr(Str('Builds list of text lines by splitting text lines at wrap point\n\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        ', lineno=1733, col_offset=-1), lineno=1733, col_offset=-1), If(UnaryOp(Not(), Name('line_num', Load(), lineno=1735, col_offset=15), lineno=1735, col_offset=11), [Expr(Call(Attribute(Name('data_list', Load(), lineno=1736, col_offset=12), 'append', Load(), lineno=1736, col_offset=12), [Tuple([Name('line_num', Load(), lineno=1736, col_offset=30), Name('text', Load(), lineno=1736, col_offset=39)], Load(), lineno=1736, col_offset=30)], [], None, None, lineno=1736, col_offset=12), lineno=1736, col_offset=12), Return(None, lineno=1737, col_offset=12)], [], lineno=1735, col_offset=8), Assign([Name('size', Store(), lineno=1740, col_offset=8)], Call(Name('len', Load(), lineno=1740, col_offset=15), [Name('text', Load(), lineno=1740, col_offset=19)], [], None, None, lineno=1740, col_offset=15), lineno=1740, col_offset=8), Assign([Name('max', Store(), lineno=1741, col_offset=8)], Attribute(Name('self', Load(), lineno=1741, col_offset=14), '_wrapcolumn', Load(), lineno=1741, col_offset=14), lineno=1741, col_offset=8), If(BoolOp(Or(), [Compare(Name('size', Load(), lineno=1742, col_offset=12), [LtE()], [Name('max', Load(), lineno=1742, col_offset=20)], lineno=1742, col_offset=12), Compare(BinOp(Name('size', Load(), lineno=1742, col_offset=30), Sub(), BinOp(Call(Attribute(Name('text', Load(), lineno=1742, col_offset=37), 'count', Load(), lineno=1742, col_offset=37), [Str('\x00', lineno=1742, col_offset=48)], [], None, None, lineno=1742, col_offset=37), Mult(), Num(3, lineno=1742, col_offset=54), lineno=1742, col_offset=37), lineno=1742, col_offset=30), [LtE()], [Name('max', Load(), lineno=1742, col_offset=61)], lineno=1742, col_offset=29)], lineno=1742, col_offset=11), [Expr(Call(Attribute(Name('data_list', Load(), lineno=1743, col_offset=12), 'append', Load(), lineno=1743, col_offset=12), [Tuple([Name('line_num', Load(), lineno=1743, col_offset=30), Name('text', Load(), lineno=1743, col_offset=39)], Load(), lineno=1743, col_offset=30)], [], None, None, lineno=1743, col_offset=12), lineno=1743, col_offset=12), Return(None, lineno=1744, col_offset=12)], [], lineno=1742, col_offset=8), Assign([Name('i', Store(), lineno=1748, col_offset=8)], Num(0, lineno=1748, col_offset=12), lineno=1748, col_offset=8), Assign([Name('n', Store(), lineno=1749, col_offset=8)], Num(0, lineno=1749, col_offset=12), lineno=1749, col_offset=8), Assign([Name('mark', Store(), lineno=1750, col_offset=8)], Str('', lineno=1750, col_offset=15), lineno=1750, col_offset=8), While(BoolOp(And(), [Compare(Name('n', Load(), lineno=1751, col_offset=14), [Lt()], [Name('max', Load(), lineno=1751, col_offset=18)], lineno=1751, col_offset=14), Compare(Name('i', Load(), lineno=1751, col_offset=26), [Lt()], [Name('size', Load(), lineno=1751, col_offset=30)], lineno=1751, col_offset=26)], lineno=1751, col_offset=14), [If(Compare(Subscript(Name('text', Load(), lineno=1752, col_offset=15), Index(Name('i', Load(), lineno=1752, col_offset=20)), Load(), lineno=1752, col_offset=15), [Eq()], [Str('\x00', lineno=1752, col_offset=26)], lineno=1752, col_offset=15), [AugAssign(Name('i', Store(), lineno=1753, col_offset=16), Add(), Num(1, lineno=1753, col_offset=21), lineno=1753, col_offset=16), Assign([Name('mark', Store(), lineno=1754, col_offset=16)], Subscript(Name('text', Load(), lineno=1754, col_offset=23), Index(Name('i', Load(), lineno=1754, col_offset=28)), Load(), lineno=1754, col_offset=23), lineno=1754, col_offset=16), AugAssign(Name('i', Store(), lineno=1755, col_offset=16), Add(), Num(1, lineno=1755, col_offset=21), lineno=1755, col_offset=16)], [If(Compare(Subscript(Name('text', Load(), lineno=1756, col_offset=17), Index(Name('i', Load(), lineno=1756, col_offset=22)), Load(), lineno=1756, col_offset=17), [Eq()], [Str('\x01', lineno=1756, col_offset=28)], lineno=1756, col_offset=17), [AugAssign(Name('i', Store(), lineno=1757, col_offset=16), Add(), Num(1, lineno=1757, col_offset=21), lineno=1757, col_offset=16), Assign([Name('mark', Store(), lineno=1758, col_offset=16)], Str('', lineno=1758, col_offset=23), lineno=1758, col_offset=16)], [AugAssign(Name('i', Store(), lineno=1760, col_offset=16), Add(), Num(1, lineno=1760, col_offset=21), lineno=1760, col_offset=16), AugAssign(Name('n', Store(), lineno=1761, col_offset=16), Add(), Num(1, lineno=1761, col_offset=21), lineno=1761, col_offset=16)], lineno=1756, col_offset=17)], lineno=1752, col_offset=12)], [], lineno=1751, col_offset=8), Assign([Name('line1', Store(), lineno=1764, col_offset=8)], Subscript(Name('text', Load(), lineno=1764, col_offset=16), Slice(None, Name('i', Load(), lineno=1764, col_offset=22), None), Load(), lineno=1764, col_offset=16), lineno=1764, col_offset=8), Assign([Name('line2', Store(), lineno=1765, col_offset=8)], Subscript(Name('text', Load(), lineno=1765, col_offset=16), Slice(Name('i', Load(), lineno=1765, col_offset=21), None, None), Load(), lineno=1765, col_offset=16), lineno=1765, col_offset=8), If(Name('mark', Load(), lineno=1770, col_offset=11), [Assign([Name('line1', Store(), lineno=1771, col_offset=12)], BinOp(Name('line1', Load(), lineno=1771, col_offset=20), Add(), Str('\x01', lineno=1771, col_offset=28), lineno=1771, col_offset=20), lineno=1771, col_offset=12), Assign([Name('line2', Store(), lineno=1772, col_offset=12)], BinOp(BinOp(Str('\x00', lineno=1772, col_offset=20), Add(), Name('mark', Load(), lineno=1772, col_offset=27), lineno=1772, col_offset=20), Add(), Name('line2', Load(), lineno=1772, col_offset=34), lineno=1772, col_offset=32), lineno=1772, col_offset=12)], [], lineno=1770, col_offset=8), Expr(Call(Attribute(Name('data_list', Load(), lineno=1775, col_offset=8), 'append', Load(), lineno=1775, col_offset=8), [Tuple([Name('line_num', Load(), lineno=1775, col_offset=26), Name('line1', Load(), lineno=1775, col_offset=35)], Load(), lineno=1775, col_offset=26)], [], None, None, lineno=1775, col_offset=8), lineno=1775, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1778, col_offset=8), '_split_line', Load(), lineno=1778, col_offset=8), [Name('data_list', Load(), lineno=1778, col_offset=25), Str('>', lineno=1778, col_offset=35), Name('line2', Load(), lineno=1778, col_offset=39)], [], None, None, lineno=1778, col_offset=8), lineno=1778, col_offset=8)], [], lineno=1725, col_offset=4), FunctionDef('_line_wrapper', arguments([Name('self', Param(), lineno=1780, col_offset=22), Name('diffs', Param(), lineno=1780, col_offset=27)], None, None, []), [Expr(Str('Returns iterator that splits (wraps) mdiff text lines', lineno=1781, col_offset=8), lineno=1781, col_offset=8), For(Tuple([Name('fromdata', Store(), lineno=1784, col_offset=12), Name('todata', Store(), lineno=1784, col_offset=21), Name('flag', Store(), lineno=1784, col_offset=28)], Store(), lineno=1784, col_offset=12), Name('diffs', Load(), lineno=1784, col_offset=36), [If(Compare(Name('flag', Load(), lineno=1786, col_offset=15), [Is()], [Name('None', Load(), lineno=1786, col_offset=23)], lineno=1786, col_offset=15), [Expr(Yield(Tuple([Name('fromdata', Load(), lineno=1787, col_offset=22), Name('todata', Load(), lineno=1787, col_offset=31), Name('flag', Load(), lineno=1787, col_offset=38)], Load(), lineno=1787, col_offset=22), lineno=1787, col_offset=16), lineno=1787, col_offset=16), Continue( lineno=1788, col_offset=16)], [], lineno=1786, col_offset=12), Assign([Tuple([Tuple([Name('fromline', Store(), lineno=1789, col_offset=13), Name('fromtext', Store(), lineno=1789, col_offset=22)], Store(), lineno=1789, col_offset=13), Tuple([Name('toline', Store(), lineno=1789, col_offset=33), Name('totext', Store(), lineno=1789, col_offset=40)], Store(), lineno=1789, col_offset=33)], Store(), lineno=1789, col_offset=12)], Tuple([Name('fromdata', Load(), lineno=1789, col_offset=50), Name('todata', Load(), lineno=1789, col_offset=59)], Load(), lineno=1789, col_offset=50), lineno=1789, col_offset=12), Assign([Tuple([Name('fromlist', Store(), lineno=1792, col_offset=12), Name('tolist', Store(), lineno=1792, col_offset=21)], Store(), lineno=1792, col_offset=12)], Tuple([List([], Load(), lineno=1792, col_offset=30), List([], Load(), lineno=1792, col_offset=33)], Load(), lineno=1792, col_offset=30), lineno=1792, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1793, col_offset=12), '_split_line', Load(), lineno=1793, col_offset=12), [Name('fromlist', Load(), lineno=1793, col_offset=29), Name('fromline', Load(), lineno=1793, col_offset=38), Name('fromtext', Load(), lineno=1793, col_offset=47)], [], None, None, lineno=1793, col_offset=12), lineno=1793, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1794, col_offset=12), '_split_line', Load(), lineno=1794, col_offset=12), [Name('tolist', Load(), lineno=1794, col_offset=29), Name('toline', Load(), lineno=1794, col_offset=36), Name('totext', Load(), lineno=1794, col_offset=43)], [], None, None, lineno=1794, col_offset=12), lineno=1794, col_offset=12), While(BoolOp(Or(), [Name('fromlist', Load(), lineno=1797, col_offset=18), Name('tolist', Load(), lineno=1797, col_offset=30)], lineno=1797, col_offset=18), [If(Name('fromlist', Load(), lineno=1798, col_offset=19), [Assign([Name('fromdata', Store(), lineno=1799, col_offset=20)], Call(Attribute(Name('fromlist', Load(), lineno=1799, col_offset=31), 'pop', Load(), lineno=1799, col_offset=31), [Num(0, lineno=1799, col_offset=44)], [], None, None, lineno=1799, col_offset=31), lineno=1799, col_offset=20)], [Assign([Name('fromdata', Store(), lineno=1801, col_offset=20)], Tuple([Str('', lineno=1801, col_offset=32), Str(' ', lineno=1801, col_offset=35)], Load(), lineno=1801, col_offset=32), lineno=1801, col_offset=20)], lineno=1798, col_offset=16), If(Name('tolist', Load(), lineno=1802, col_offset=19), [Assign([Name('todata', Store(), lineno=1803, col_offset=20)], Call(Attribute(Name('tolist', Load(), lineno=1803, col_offset=29), 'pop', Load(), lineno=1803, col_offset=29), [Num(0, lineno=1803, col_offset=40)], [], None, None, lineno=1803, col_offset=29), lineno=1803, col_offset=20)], [Assign([Name('todata', Store(), lineno=1805, col_offset=20)], Tuple([Str('', lineno=1805, col_offset=30), Str(' ', lineno=1805, col_offset=33)], Load(), lineno=1805, col_offset=30), lineno=1805, col_offset=20)], lineno=1802, col_offset=16), Expr(Yield(Tuple([Name('fromdata', Load(), lineno=1806, col_offset=22), Name('todata', Load(), lineno=1806, col_offset=31), Name('flag', Load(), lineno=1806, col_offset=38)], Load(), lineno=1806, col_offset=22), lineno=1806, col_offset=16), lineno=1806, col_offset=16)], [], lineno=1797, col_offset=12)], [], lineno=1784, col_offset=8)], [], lineno=1780, col_offset=4), FunctionDef('_collect_lines', arguments([Name('self', Param(), lineno=1808, col_offset=23), Name('diffs', Param(), lineno=1808, col_offset=28)], None, None, []), [Expr(Str('Collects mdiff output into separate lists\n\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with HTML markup.\n        ', lineno=1813, col_offset=-1), lineno=1813, col_offset=-1), Assign([Tuple([Name('fromlist', Store(), lineno=1815, col_offset=8), Name('tolist', Store(), lineno=1815, col_offset=17), Name('flaglist', Store(), lineno=1815, col_offset=24)], Store(), lineno=1815, col_offset=8)], Tuple([List([], Load(), lineno=1815, col_offset=35), List([], Load(), lineno=1815, col_offset=38), List([], Load(), lineno=1815, col_offset=41)], Load(), lineno=1815, col_offset=35), lineno=1815, col_offset=8), For(Tuple([Name('fromdata', Store(), lineno=1817, col_offset=12), Name('todata', Store(), lineno=1817, col_offset=21), Name('flag', Store(), lineno=1817, col_offset=28)], Store(), lineno=1817, col_offset=12), Name('diffs', Load(), lineno=1817, col_offset=36), [TryExcept([Expr(Call(Attribute(Name('fromlist', Load(), lineno=1820, col_offset=16), 'append', Load(), lineno=1820, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=1820, col_offset=32), '_format_line', Load(), lineno=1820, col_offset=32), [Num(0, lineno=1820, col_offset=50), Name('flag', Load(), lineno=1820, col_offset=52)], [], Name('fromdata', Load(), lineno=1820, col_offset=58), None, lineno=1820, col_offset=32)], [], None, None, lineno=1820, col_offset=16), lineno=1820, col_offset=16), Expr(Call(Attribute(Name('tolist', Load(), lineno=1821, col_offset=16), 'append', Load(), lineno=1821, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=1821, col_offset=30), '_format_line', Load(), lineno=1821, col_offset=30), [Num(1, lineno=1821, col_offset=48), Name('flag', Load(), lineno=1821, col_offset=50)], [], Name('todata', Load(), lineno=1821, col_offset=56), None, lineno=1821, col_offset=30)], [], None, None, lineno=1821, col_offset=16), lineno=1821, col_offset=16)], [ExceptHandler(Name('TypeError', Load(), lineno=1822, col_offset=19), None, [Expr(Call(Attribute(Name('fromlist', Load(), lineno=1824, col_offset=16), 'append', Load(), lineno=1824, col_offset=16), [Name('None', Load(), lineno=1824, col_offset=32)], [], None, None, lineno=1824, col_offset=16), lineno=1824, col_offset=16), Expr(Call(Attribute(Name('tolist', Load(), lineno=1825, col_offset=16), 'append', Load(), lineno=1825, col_offset=16), [Name('None', Load(), lineno=1825, col_offset=30)], [], None, None, lineno=1825, col_offset=16), lineno=1825, col_offset=16)], lineno=1822, col_offset=12)], [], lineno=1818, col_offset=12), Expr(Call(Attribute(Name('flaglist', Load(), lineno=1826, col_offset=12), 'append', Load(), lineno=1826, col_offset=12), [Name('flag', Load(), lineno=1826, col_offset=28)], [], None, None, lineno=1826, col_offset=12), lineno=1826, col_offset=12)], [], lineno=1817, col_offset=8), Return(Tuple([Name('fromlist', Load(), lineno=1827, col_offset=15), Name('tolist', Load(), lineno=1827, col_offset=24), Name('flaglist', Load(), lineno=1827, col_offset=31)], Load(), lineno=1827, col_offset=15), lineno=1827, col_offset=8)], [], lineno=1808, col_offset=4), FunctionDef('_format_line', arguments([Name('self', Param(), lineno=1829, col_offset=21), Name('side', Param(), lineno=1829, col_offset=26), Name('flag', Param(), lineno=1829, col_offset=31), Name('linenum', Param(), lineno=1829, col_offset=36), Name('text', Param(), lineno=1829, col_offset=44)], None, None, []), [Expr(Str('Returns HTML markup of "from" / "to" text lines\n\n        side -- 0 or 1 indicating "from" or "to" text\n        flag -- indicates if difference on line\n        linenum -- line number (used for line number column)\n        text -- line text to be marked up\n        ', lineno=1836, col_offset=-1), lineno=1836, col_offset=-1), TryExcept([Assign([Name('linenum', Store(), lineno=1838, col_offset=12)], BinOp(Str('%d', lineno=1838, col_offset=22), Mod(), Name('linenum', Load(), lineno=1838, col_offset=29), lineno=1838, col_offset=22), lineno=1838, col_offset=12), Assign([Name('id', Store(), lineno=1839, col_offset=12)], BinOp(Str(' id="%s%s"', lineno=1839, col_offset=17), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=1839, col_offset=33), '_prefix', Load(), lineno=1839, col_offset=33), Index(Name('side', Load(), lineno=1839, col_offset=46)), Load(), lineno=1839, col_offset=33), Name('linenum', Load(), lineno=1839, col_offset=52)], Load(), lineno=1839, col_offset=33), lineno=1839, col_offset=17), lineno=1839, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=1840, col_offset=15), None, [Assign([Name('id', Store(), lineno=1842, col_offset=12)], Str('', lineno=1842, col_offset=17), lineno=1842, col_offset=12)], lineno=1840, col_offset=8)], [], lineno=1837, col_offset=8), Assign([Name('text', Store(), lineno=1844, col_offset=8)], Call(Attribute(Call(Attribute(Call(Attribute(Name('text', Load(), lineno=1844, col_offset=13), 'replace', Load(), lineno=1844, col_offset=13), [Str('&', lineno=1844, col_offset=26), Str('&amp;', lineno=1844, col_offset=30)], [], None, None, lineno=1844, col_offset=13), 'replace', Load(), lineno=1844, col_offset=13), [Str('>', lineno=1844, col_offset=47), Str('&gt;', lineno=1844, col_offset=51)], [], None, None, lineno=1844, col_offset=13), 'replace', Load(), lineno=1844, col_offset=13), [Str('<', lineno=1844, col_offset=67), Str('&lt;', lineno=1844, col_offset=71)], [], None, None, lineno=1844, col_offset=13), lineno=1844, col_offset=8), Assign([Name('text', Store(), lineno=1847, col_offset=8)], Call(Attribute(Call(Attribute(Name('text', Load(), lineno=1847, col_offset=15), 'replace', Load(), lineno=1847, col_offset=15), [Str(' ', lineno=1847, col_offset=28), Str('&nbsp;', lineno=1847, col_offset=32)], [], None, None, lineno=1847, col_offset=15), 'rstrip', Load(), lineno=1847, col_offset=15), [], [], None, None, lineno=1847, col_offset=15), lineno=1847, col_offset=8), Return(BinOp(Str('<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>', lineno=1849, col_offset=15), Mod(), Tuple([Name('id', Load(), lineno=1850, col_offset=18), Name('linenum', Load(), lineno=1850, col_offset=21), Name('text', Load(), lineno=1850, col_offset=29)], Load(), lineno=1850, col_offset=18), lineno=1849, col_offset=15), lineno=1849, col_offset=8)], [], lineno=1829, col_offset=4), FunctionDef('_make_prefix', arguments([Name('self', Param(), lineno=1852, col_offset=21)], None, None, []), [Expr(Str('Create unique anchor prefixes', lineno=1853, col_offset=8), lineno=1853, col_offset=8), Assign([Name('fromprefix', Store(), lineno=1857, col_offset=8)], BinOp(Str('from%d_', lineno=1857, col_offset=21), Mod(), Attribute(Name('HtmlDiff', Load(), lineno=1857, col_offset=33), '_default_prefix', Load(), lineno=1857, col_offset=33), lineno=1857, col_offset=21), lineno=1857, col_offset=8), Assign([Name('toprefix', Store(), lineno=1858, col_offset=8)], BinOp(Str('to%d_', lineno=1858, col_offset=19), Mod(), Attribute(Name('HtmlDiff', Load(), lineno=1858, col_offset=29), '_default_prefix', Load(), lineno=1858, col_offset=29), lineno=1858, col_offset=19), lineno=1858, col_offset=8), AugAssign(Attribute(Name('HtmlDiff', Load(), lineno=1859, col_offset=8), '_default_prefix', Store(), lineno=1859, col_offset=8), Add(), Num(1, lineno=1859, col_offset=36), lineno=1859, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1861, col_offset=8), '_prefix', Store(), lineno=1861, col_offset=8)], List([Name('fromprefix', Load(), lineno=1861, col_offset=24), Name('toprefix', Load(), lineno=1861, col_offset=35)], Load(), lineno=1861, col_offset=23), lineno=1861, col_offset=8)], [], lineno=1852, col_offset=4), FunctionDef('_convert_flags', arguments([Name('self', Param(), lineno=1863, col_offset=23), Name('fromlist', Param(), lineno=1863, col_offset=28), Name('tolist', Param(), lineno=1863, col_offset=37), Name('flaglist', Param(), lineno=1863, col_offset=44), Name('context', Param(), lineno=1863, col_offset=53), Name('numlines', Param(), lineno=1863, col_offset=61)], None, None, []), [Expr(Str('Makes list of "next" links', lineno=1864, col_offset=8), lineno=1864, col_offset=8), Assign([Name('toprefix', Store(), lineno=1867, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=1867, col_offset=19), '_prefix', Load(), lineno=1867, col_offset=19), Index(Num(1, lineno=1867, col_offset=32)), Load(), lineno=1867, col_offset=19), lineno=1867, col_offset=8), Assign([Name('next_id', Store(), lineno=1870, col_offset=8)], BinOp(List([Str('', lineno=1870, col_offset=19)], Load(), lineno=1870, col_offset=18), Mult(), Call(Name('len', Load(), lineno=1870, col_offset=23), [Name('flaglist', Load(), lineno=1870, col_offset=27)], [], None, None, lineno=1870, col_offset=23), lineno=1870, col_offset=18), lineno=1870, col_offset=8), Assign([Name('next_href', Store(), lineno=1871, col_offset=8)], BinOp(List([Str('', lineno=1871, col_offset=21)], Load(), lineno=1871, col_offset=20), Mult(), Call(Name('len', Load(), lineno=1871, col_offset=25), [Name('flaglist', Load(), lineno=1871, col_offset=29)], [], None, None, lineno=1871, col_offset=25), lineno=1871, col_offset=20), lineno=1871, col_offset=8), Assign([Tuple([Name('num_chg', Store(), lineno=1872, col_offset=8), Name('in_change', Store(), lineno=1872, col_offset=17)], Store(), lineno=1872, col_offset=8)], Tuple([Num(0, lineno=1872, col_offset=29), Name('False', Load(), lineno=1872, col_offset=32)], Load(), lineno=1872, col_offset=29), lineno=1872, col_offset=8), Assign([Name('last', Store(), lineno=1873, col_offset=8)], Num(0, lineno=1873, col_offset=15), lineno=1873, col_offset=8), For(Tuple([Name('i', Store(), lineno=1874, col_offset=12), Name('flag', Store(), lineno=1874, col_offset=14)], Store(), lineno=1874, col_offset=12), Call(Name('enumerate', Load(), lineno=1874, col_offset=22), [Name('flaglist', Load(), lineno=1874, col_offset=32)], [], None, None, lineno=1874, col_offset=22), [If(Name('flag', Load(), lineno=1875, col_offset=15), [If(UnaryOp(Not(), Name('in_change', Load(), lineno=1876, col_offset=23), lineno=1876, col_offset=19), [Assign([Name('in_change', Store(), lineno=1877, col_offset=20)], Name('True', Load(), lineno=1877, col_offset=32), lineno=1877, col_offset=20), Assign([Name('last', Store(), lineno=1878, col_offset=20)], Name('i', Load(), lineno=1878, col_offset=27), lineno=1878, col_offset=20), Assign([Name('i', Store(), lineno=1882, col_offset=20)], Call(Name('max', Load(), lineno=1882, col_offset=24), [List([Num(0, lineno=1882, col_offset=29), BinOp(Name('i', Load(), lineno=1882, col_offset=31), Sub(), Name('numlines', Load(), lineno=1882, col_offset=33), lineno=1882, col_offset=31)], Load(), lineno=1882, col_offset=28)], [], None, None, lineno=1882, col_offset=24), lineno=1882, col_offset=20), Assign([Subscript(Name('next_id', Load(), lineno=1883, col_offset=20), Index(Name('i', Load(), lineno=1883, col_offset=28)), Store(), lineno=1883, col_offset=20)], BinOp(Str(' id="difflib_chg_%s_%d"', lineno=1883, col_offset=33), Mod(), Tuple([Name('toprefix', Load(), lineno=1883, col_offset=62), Name('num_chg', Load(), lineno=1883, col_offset=71)], Load(), lineno=1883, col_offset=62), lineno=1883, col_offset=33), lineno=1883, col_offset=20), AugAssign(Name('num_chg', Store(), lineno=1886, col_offset=20), Add(), Num(1, lineno=1886, col_offset=31), lineno=1886, col_offset=20), Assign([Subscript(Name('next_href', Load(), lineno=1887, col_offset=20), Index(Name('last', Load(), lineno=1887, col_offset=30)), Store(), lineno=1887, col_offset=20)], BinOp(Str('<a href="#difflib_chg_%s_%d">n</a>', lineno=1887, col_offset=38), Mod(), Tuple([Name('toprefix', Load(), lineno=1888, col_offset=25), Name('num_chg', Load(), lineno=1888, col_offset=34)], Load(), lineno=1888, col_offset=25), lineno=1887, col_offset=38), lineno=1887, col_offset=20)], [], lineno=1876, col_offset=16)], [Assign([Name('in_change', Store(), lineno=1890, col_offset=16)], Name('False', Load(), lineno=1890, col_offset=28), lineno=1890, col_offset=16)], lineno=1875, col_offset=12)], [], lineno=1874, col_offset=8), If(UnaryOp(Not(), Name('flaglist', Load(), lineno=1892, col_offset=15), lineno=1892, col_offset=11), [Assign([Name('flaglist', Store(), lineno=1893, col_offset=12)], List([Name('False', Load(), lineno=1893, col_offset=24)], Load(), lineno=1893, col_offset=23), lineno=1893, col_offset=12), Assign([Name('next_id', Store(), lineno=1894, col_offset=12)], List([Str('', lineno=1894, col_offset=23)], Load(), lineno=1894, col_offset=22), lineno=1894, col_offset=12), Assign([Name('next_href', Store(), lineno=1895, col_offset=12)], List([Str('', lineno=1895, col_offset=25)], Load(), lineno=1895, col_offset=24), lineno=1895, col_offset=12), Assign([Name('last', Store(), lineno=1896, col_offset=12)], Num(0, lineno=1896, col_offset=19), lineno=1896, col_offset=12), If(Name('context', Load(), lineno=1897, col_offset=15), [Assign([Name('fromlist', Store(), lineno=1898, col_offset=16)], List([Str('<td></td><td>&nbsp;No Differences Found&nbsp;</td>', lineno=1898, col_offset=28)], Load(), lineno=1898, col_offset=27), lineno=1898, col_offset=16), Assign([Name('tolist', Store(), lineno=1899, col_offset=16)], Name('fromlist', Load(), lineno=1899, col_offset=25), lineno=1899, col_offset=16)], [Assign([Name('fromlist', Store(), lineno=1901, col_offset=16), Name('tolist', Store(), lineno=1901, col_offset=27)], List([Str('<td></td><td>&nbsp;Empty File&nbsp;</td>', lineno=1901, col_offset=37)], Load(), lineno=1901, col_offset=36), lineno=1901, col_offset=16)], lineno=1897, col_offset=12)], [], lineno=1892, col_offset=8), If(UnaryOp(Not(), Subscript(Name('flaglist', Load(), lineno=1903, col_offset=15), Index(Num(0, lineno=1903, col_offset=24)), Load(), lineno=1903, col_offset=15), lineno=1903, col_offset=11), [Assign([Subscript(Name('next_href', Load(), lineno=1904, col_offset=12), Index(Num(0, lineno=1904, col_offset=22)), Store(), lineno=1904, col_offset=12)], BinOp(Str('<a href="#difflib_chg_%s_0">f</a>', lineno=1904, col_offset=27), Mod(), Name('toprefix', Load(), lineno=1904, col_offset=65), lineno=1904, col_offset=27), lineno=1904, col_offset=12)], [], lineno=1903, col_offset=8), Assign([Subscript(Name('next_href', Load(), lineno=1906, col_offset=8), Index(Name('last', Load(), lineno=1906, col_offset=18)), Store(), lineno=1906, col_offset=8)], BinOp(Str('<a href="#difflib_chg_%s_top">t</a>', lineno=1906, col_offset=26), Mod(), Name('toprefix', Load(), lineno=1906, col_offset=67), lineno=1906, col_offset=26), lineno=1906, col_offset=8), Return(Tuple([Name('fromlist', Load(), lineno=1908, col_offset=15), Name('tolist', Load(), lineno=1908, col_offset=24), Name('flaglist', Load(), lineno=1908, col_offset=31), Name('next_href', Load(), lineno=1908, col_offset=40), Name('next_id', Load(), lineno=1908, col_offset=50)], Load(), lineno=1908, col_offset=15), lineno=1908, col_offset=8)], [], lineno=1863, col_offset=4), FunctionDef('make_table', arguments([Name('self', Param(), lineno=1910, col_offset=19), Name('fromlines', Param(), lineno=1910, col_offset=24), Name('tolines', Param(), lineno=1910, col_offset=34), Name('fromdesc', Param(), lineno=1910, col_offset=42), Name('todesc', Param(), lineno=1910, col_offset=54), Name('context', Param(), lineno=1910, col_offset=64), Name('numlines', Param(), lineno=1911, col_offset=19)], None, None, [Str('', lineno=1910, col_offset=51), Str('', lineno=1910, col_offset=61), Name('False', Load(), lineno=1910, col_offset=72), Num(5, lineno=1911, col_offset=28)]), [Expr(Str('Returns HTML table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        ', lineno=1926, col_offset=-1), lineno=1926, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1930, col_offset=8), '_make_prefix', Load(), lineno=1930, col_offset=8), [], [], None, None, lineno=1930, col_offset=8), lineno=1930, col_offset=8), Assign([Tuple([Name('fromlines', Store(), lineno=1934, col_offset=8), Name('tolines', Store(), lineno=1934, col_offset=18)], Store(), lineno=1934, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1934, col_offset=28), '_tab_newline_replace', Load(), lineno=1934, col_offset=28), [Name('fromlines', Load(), lineno=1934, col_offset=54), Name('tolines', Load(), lineno=1934, col_offset=64)], [], None, None, lineno=1934, col_offset=28), lineno=1934, col_offset=8), If(Name('context', Load(), lineno=1937, col_offset=11), [Assign([Name('context_lines', Store(), lineno=1938, col_offset=12)], Name('numlines', Load(), lineno=1938, col_offset=28), lineno=1938, col_offset=12)], [Assign([Name('context_lines', Store(), lineno=1940, col_offset=12)], Name('None', Load(), lineno=1940, col_offset=28), lineno=1940, col_offset=12)], lineno=1937, col_offset=8), Assign([Name('diffs', Store(), lineno=1941, col_offset=8)], Call(Name('_mdiff', Load(), lineno=1941, col_offset=16), [Name('fromlines', Load(), lineno=1941, col_offset=23), Name('tolines', Load(), lineno=1941, col_offset=33), Name('context_lines', Load(), lineno=1941, col_offset=41)], [keyword('linejunk', Attribute(Name('self', Load(), lineno=1941, col_offset=64), '_linejunk', Load(), lineno=1941, col_offset=64)), keyword('charjunk', Attribute(Name('self', Load(), lineno=1942, col_offset=31), '_charjunk', Load(), lineno=1942, col_offset=31))], None, None, lineno=1941, col_offset=16), lineno=1941, col_offset=8), If(Attribute(Name('self', Load(), lineno=1945, col_offset=11), '_wrapcolumn', Load(), lineno=1945, col_offset=11), [Assign([Name('diffs', Store(), lineno=1946, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1946, col_offset=20), '_line_wrapper', Load(), lineno=1946, col_offset=20), [Name('diffs', Load(), lineno=1946, col_offset=39)], [], None, None, lineno=1946, col_offset=20), lineno=1946, col_offset=12)], [], lineno=1945, col_offset=8), Assign([Tuple([Name('fromlist', Store(), lineno=1949, col_offset=8), Name('tolist', Store(), lineno=1949, col_offset=17), Name('flaglist', Store(), lineno=1949, col_offset=24)], Store(), lineno=1949, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1949, col_offset=35), '_collect_lines', Load(), lineno=1949, col_offset=35), [Name('diffs', Load(), lineno=1949, col_offset=55)], [], None, None, lineno=1949, col_offset=35), lineno=1949, col_offset=8), Assign([Tuple([Name('fromlist', Store(), lineno=1952, col_offset=8), Name('tolist', Store(), lineno=1952, col_offset=17), Name('flaglist', Store(), lineno=1952, col_offset=24), Name('next_href', Store(), lineno=1952, col_offset=33), Name('next_id', Store(), lineno=1952, col_offset=43)], Store(), lineno=1952, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1952, col_offset=53), '_convert_flags', Load(), lineno=1952, col_offset=53), [Name('fromlist', Load(), lineno=1953, col_offset=12), Name('tolist', Load(), lineno=1953, col_offset=21), Name('flaglist', Load(), lineno=1953, col_offset=28), Name('context', Load(), lineno=1953, col_offset=37), Name('numlines', Load(), lineno=1953, col_offset=45)], [], None, None, lineno=1952, col_offset=53), lineno=1952, col_offset=8), Assign([Name('s', Store(), lineno=1955, col_offset=8)], List([], Load(), lineno=1955, col_offset=12), lineno=1955, col_offset=8), Assign([Name('fmt', Store(), lineno=1956, col_offset=8)], BinOp(Str('            <tr><td class="diff_next"%s>%s</td>%s', lineno=1956, col_offset=14), Add(), Str('<td class="diff_next">%s</td>%s</tr>\n', lineno=1957, col_offset=14), lineno=1956, col_offset=14), lineno=1956, col_offset=8), For(Name('i', Store(), lineno=1958, col_offset=12), Call(Name('range', Load(), lineno=1958, col_offset=17), [Call(Name('len', Load(), lineno=1958, col_offset=23), [Name('flaglist', Load(), lineno=1958, col_offset=27)], [], None, None, lineno=1958, col_offset=23)], [], None, None, lineno=1958, col_offset=17), [If(Compare(Subscript(Name('flaglist', Load(), lineno=1959, col_offset=15), Index(Name('i', Load(), lineno=1959, col_offset=24)), Load(), lineno=1959, col_offset=15), [Is()], [Name('None', Load(), lineno=1959, col_offset=30)], lineno=1959, col_offset=15), [If(Compare(Name('i', Load(), lineno=1962, col_offset=19), [Gt()], [Num(0, lineno=1962, col_offset=23)], lineno=1962, col_offset=19), [Expr(Call(Attribute(Name('s', Load(), lineno=1963, col_offset=20), 'append', Load(), lineno=1963, col_offset=20), [Str('        </tbody>        \n        <tbody>\n', lineno=1963, col_offset=29)], [], None, None, lineno=1963, col_offset=20), lineno=1963, col_offset=20)], [], lineno=1962, col_offset=16)], [Expr(Call(Attribute(Name('s', Load(), lineno=1965, col_offset=16), 'append', Load(), lineno=1965, col_offset=16), [BinOp(Name('fmt', Load(), lineno=1965, col_offset=26), Mod(), Tuple([Subscript(Name('next_id', Load(), lineno=1965, col_offset=33), Index(Name('i', Load(), lineno=1965, col_offset=41)), Load(), lineno=1965, col_offset=33), Subscript(Name('next_href', Load(), lineno=1965, col_offset=44), Index(Name('i', Load(), lineno=1965, col_offset=54)), Load(), lineno=1965, col_offset=44), Subscript(Name('fromlist', Load(), lineno=1965, col_offset=57), Index(Name('i', Load(), lineno=1965, col_offset=66)), Load(), lineno=1965, col_offset=57), Subscript(Name('next_href', Load(), lineno=1966, col_offset=43), Index(Name('i', Load(), lineno=1966, col_offset=53)), Load(), lineno=1966, col_offset=43), Subscript(Name('tolist', Load(), lineno=1966, col_offset=56), Index(Name('i', Load(), lineno=1966, col_offset=63)), Load(), lineno=1966, col_offset=56)], Load(), lineno=1965, col_offset=33), lineno=1965, col_offset=26)], [], None, None, lineno=1965, col_offset=16), lineno=1965, col_offset=16)], lineno=1959, col_offset=12)], [], lineno=1958, col_offset=8), If(BoolOp(Or(), [Name('fromdesc', Load(), lineno=1967, col_offset=11), Name('todesc', Load(), lineno=1967, col_offset=23)], lineno=1967, col_offset=11), [Assign([Name('header_row', Store(), lineno=1968, col_offset=12)], BinOp(Str('<thead><tr>%s%s%s%s</tr></thead>', lineno=1968, col_offset=25), Mod(), Tuple([Str('<th class="diff_next"><br /></th>', lineno=1969, col_offset=16), BinOp(Str('<th colspan="2" class="diff_header">%s</th>', lineno=1970, col_offset=16), Mod(), Name('fromdesc', Load(), lineno=1970, col_offset=64), lineno=1970, col_offset=16), Str('<th class="diff_next"><br /></th>', lineno=1971, col_offset=16), BinOp(Str('<th colspan="2" class="diff_header">%s</th>', lineno=1972, col_offset=16), Mod(), Name('todesc', Load(), lineno=1972, col_offset=64), lineno=1972, col_offset=16)], Load(), lineno=1969, col_offset=16), lineno=1968, col_offset=25), lineno=1968, col_offset=12)], [Assign([Name('header_row', Store(), lineno=1974, col_offset=12)], Str('', lineno=1974, col_offset=25), lineno=1974, col_offset=12)], lineno=1967, col_offset=8), Assign([Name('table', Store(), lineno=1976, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1976, col_offset=16), '_table_template', Load(), lineno=1976, col_offset=16), Mod(), Call(Name('dict', Load(), lineno=1976, col_offset=39), [], [keyword('data_rows', Call(Attribute(Str('', lineno=1977, col_offset=22), 'join', Load(), lineno=1977, col_offset=22), [Name('s', Load(), lineno=1977, col_offset=30)], [], None, None, lineno=1977, col_offset=22)), keyword('header_row', Name('header_row', Load(), lineno=1978, col_offset=23)), keyword('prefix', Subscript(Attribute(Name('self', Load(), lineno=1979, col_offset=19), '_prefix', Load(), lineno=1979, col_offset=19), Index(Num(1, lineno=1979, col_offset=32)), Load(), lineno=1979, col_offset=19))], None, None, lineno=1976, col_offset=39), lineno=1976, col_offset=16), lineno=1976, col_offset=8), Return(Call(Attribute(Call(Attribute(Call(Attribute(Call(Attribute(Call(Attribute(Name('table', Load(), lineno=1981, col_offset=15), 'replace', Load(), lineno=1981, col_offset=15), [Str('\x00+', lineno=1981, col_offset=29), Str('<span class="diff_add">', lineno=1981, col_offset=35)], [], None, None, lineno=1981, col_offset=15), 'replace', Load(), lineno=1981, col_offset=15), [Str('\x00-', lineno=1982, col_offset=29), Str('<span class="diff_sub">', lineno=1982, col_offset=35)], [], None, None, lineno=1981, col_offset=15), 'replace', Load(), lineno=1981, col_offset=15), [Str('\x00^', lineno=1983, col_offset=29), Str('<span class="diff_chg">', lineno=1983, col_offset=35)], [], None, None, lineno=1981, col_offset=15), 'replace', Load(), lineno=1981, col_offset=15), [Str('\x01', lineno=1984, col_offset=29), Str('</span>', lineno=1984, col_offset=34)], [], None, None, lineno=1981, col_offset=15), 'replace', Load(), lineno=1981, col_offset=15), [Str('\t', lineno=1985, col_offset=29), Str('&nbsp;', lineno=1985, col_offset=34)], [], None, None, lineno=1981, col_offset=15), lineno=1981, col_offset=8)], [], lineno=1910, col_offset=4)], [], lineno=1639, col_offset=0), Delete([Name('re', Del(), lineno=1987, col_offset=4)], lineno=1987, col_offset=0), FunctionDef('restore', arguments([Name('delta', Param(), lineno=1989, col_offset=12), Name('which', Param(), lineno=1989, col_offset=19)], None, None, []), [Expr(Str("\n    Generate one of the two sequences that generated a delta.\n\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n\n    Examples:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(1),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(1))\n    >>> diff = list(diff)\n    >>> print ''.join(restore(diff, 1)),\n    one\n    two\n    three\n    >>> print ''.join(restore(diff, 2)),\n    ore\n    tree\n    emu\n    ", lineno=2010, col_offset=-1), lineno=2010, col_offset=-1), TryExcept([Assign([Name('tag', Store(), lineno=2012, col_offset=8)], Subscript(Dict([Num(1, lineno=2012, col_offset=15), Num(2, lineno=2012, col_offset=24)], [Str('- ', lineno=2012, col_offset=18), Str('+ ', lineno=2012, col_offset=27)], lineno=2012, col_offset=14), Index(Call(Name('int', Load(), lineno=2012, col_offset=33), [Name('which', Load(), lineno=2012, col_offset=37)], [], None, None, lineno=2012, col_offset=33)), Load(), lineno=2012, col_offset=14), lineno=2012, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=2013, col_offset=11), None, [Raise(Name('ValueError', Load(), lineno=2014, col_offset=14), BinOp(Str('unknown delta choice (must be 1 or 2): %r', lineno=2014, col_offset=27), Mod(), Name('which', Load(), lineno=2015, col_offset=29), lineno=2014, col_offset=27), None, lineno=2014, col_offset=8)], lineno=2013, col_offset=4)], [], lineno=2011, col_offset=4), Assign([Name('prefixes', Store(), lineno=2016, col_offset=4)], Tuple([Str('  ', lineno=2016, col_offset=16), Name('tag', Load(), lineno=2016, col_offset=22)], Load(), lineno=2016, col_offset=16), lineno=2016, col_offset=4), For(Name('line', Store(), lineno=2017, col_offset=8), Name('delta', Load(), lineno=2017, col_offset=16), [If(Compare(Subscript(Name('line', Load(), lineno=2018, col_offset=11), Slice(None, Num(2, lineno=2018, col_offset=17), None), Load(), lineno=2018, col_offset=11), [In()], [Name('prefixes', Load(), lineno=2018, col_offset=23)], lineno=2018, col_offset=11), [Expr(Yield(Subscript(Name('line', Load(), lineno=2019, col_offset=18), Slice(Num(2, lineno=2019, col_offset=23), None, None), Load(), lineno=2019, col_offset=18), lineno=2019, col_offset=12), lineno=2019, col_offset=12)], [], lineno=2018, col_offset=8)], [], lineno=2017, col_offset=4)], [], lineno=1989, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Import([alias('doctest', None), alias('difflib', None)], lineno=2022, col_offset=4), Return(Call(Attribute(Name('doctest', Load(), lineno=2023, col_offset=11), 'testmod', Load(), lineno=2023, col_offset=11), [Name('difflib', Load(), lineno=2023, col_offset=27)], [], None, None, lineno=2023, col_offset=11), lineno=2023, col_offset=4)], [], lineno=2021, col_offset=0), If(Compare(Name('__name__', Load(), lineno=2025, col_offset=3), [Eq()], [Str('__main__', lineno=2025, col_offset=15)], lineno=2025, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=2026, col_offset=4), [], [], None, None, lineno=2026, col_offset=4), lineno=2026, col_offset=4)], [], lineno=2025, col_offset=0)])
