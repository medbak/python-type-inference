Module([Expr(Str('Fixer for import statements.\nIf spam is being imported from the local directory, this import:\n    from spam import eggs\nBecomes:\n    from .spam import eggs\n\nAnd this import:\n    import spam\nBecomes:\n    from . import spam\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=14, col_offset=0), ImportFrom('os.path', [alias('dirname', None), alias('join', None), alias('exists', None), alias('sep', None)], 0, lineno=15, col_offset=0), ImportFrom('fixer_util', [alias('FromImport', None), alias('syms', None), alias('token', None)], 2, lineno=16, col_offset=0), FunctionDef('traverse_imports', arguments([Name('names', Param(), lineno=19, col_offset=21)], None, None, []), [Expr(Str('\n    Walks over all the names imported in a dotted_as_names node.\n    ', lineno=22, col_offset=-1), lineno=22, col_offset=-1), Assign([Name('pending', Store(), lineno=23, col_offset=4)], List([Name('names', Load(), lineno=23, col_offset=15)], Load(), lineno=23, col_offset=14), lineno=23, col_offset=4), While(Name('pending', Load(), lineno=24, col_offset=10), [Assign([Name('node', Store(), lineno=25, col_offset=8)], Call(Attribute(Name('pending', Load(), lineno=25, col_offset=15), 'pop', Load(), lineno=25, col_offset=15), [], [], None, None, lineno=25, col_offset=15), lineno=25, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=26, col_offset=11), 'type', Load(), lineno=26, col_offset=11), [Eq()], [Attribute(Name('token', Load(), lineno=26, col_offset=24), 'NAME', Load(), lineno=26, col_offset=24)], lineno=26, col_offset=11), [Expr(Yield(Attribute(Name('node', Load(), lineno=27, col_offset=18), 'value', Load(), lineno=27, col_offset=18), lineno=27, col_offset=12), lineno=27, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=28, col_offset=13), 'type', Load(), lineno=28, col_offset=13), [Eq()], [Attribute(Name('syms', Load(), lineno=28, col_offset=26), 'dotted_name', Load(), lineno=28, col_offset=26)], lineno=28, col_offset=13), [Expr(Yield(Call(Attribute(Str('', lineno=29, col_offset=18), 'join', Load(), lineno=29, col_offset=18), [ListComp(Attribute(Name('ch', Load(), lineno=29, col_offset=27), 'value', Load(), lineno=29, col_offset=27), [comprehension(Name('ch', Store(), lineno=29, col_offset=40), Attribute(Name('node', Load(), lineno=29, col_offset=46), 'children', Load(), lineno=29, col_offset=46), [])], lineno=29, col_offset=27)], [], None, None, lineno=29, col_offset=18), lineno=29, col_offset=12), lineno=29, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=30, col_offset=13), 'type', Load(), lineno=30, col_offset=13), [Eq()], [Attribute(Name('syms', Load(), lineno=30, col_offset=26), 'dotted_as_name', Load(), lineno=30, col_offset=26)], lineno=30, col_offset=13), [Expr(Call(Attribute(Name('pending', Load(), lineno=31, col_offset=12), 'append', Load(), lineno=31, col_offset=12), [Subscript(Attribute(Name('node', Load(), lineno=31, col_offset=27), 'children', Load(), lineno=31, col_offset=27), Index(Num(0, lineno=31, col_offset=41)), Load(), lineno=31, col_offset=27)], [], None, None, lineno=31, col_offset=12), lineno=31, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=32, col_offset=13), 'type', Load(), lineno=32, col_offset=13), [Eq()], [Attribute(Name('syms', Load(), lineno=32, col_offset=26), 'dotted_as_names', Load(), lineno=32, col_offset=26)], lineno=32, col_offset=13), [Expr(Call(Attribute(Name('pending', Load(), lineno=33, col_offset=12), 'extend', Load(), lineno=33, col_offset=12), [Subscript(Attribute(Name('node', Load(), lineno=33, col_offset=27), 'children', Load(), lineno=33, col_offset=27), Slice(None, None, Num(-2, lineno=33, col_offset=44)), Load(), lineno=33, col_offset=27)], [], None, None, lineno=33, col_offset=12), lineno=33, col_offset=12)], [Raise(Call(Name('AssertionError', Load(), lineno=35, col_offset=18), [Str('unkown node type', lineno=35, col_offset=33)], [], None, None, lineno=35, col_offset=18), None, None, lineno=35, col_offset=12)], lineno=32, col_offset=13)], lineno=30, col_offset=13)], lineno=28, col_offset=13)], lineno=26, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=19, col_offset=0), ClassDef('FixImport', [Attribute(Name('fixer_base', Load(), lineno=38, col_offset=16), 'BaseFix', Load(), lineno=38, col_offset=16)], [Assign([Name('BM_compatible', Store(), lineno=39, col_offset=4)], Name('True', Load(), lineno=39, col_offset=20), lineno=39, col_offset=4), Assign([Name('PATTERN', Store(), lineno=41, col_offset=4)], Str("\n    import_from< 'from' imp=any 'import' ['('] any [')'] >\n    |\n    import_name< 'import' imp=any >\n    ", lineno=45, col_offset=-1), lineno=41, col_offset=4), FunctionDef('start_tree', arguments([Name('self', Param(), lineno=47, col_offset=19), Name('tree', Param(), lineno=47, col_offset=25), Name('name', Param(), lineno=47, col_offset=31)], None, None, []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=48, col_offset=8), [Name('FixImport', Load(), lineno=48, col_offset=14), Name('self', Load(), lineno=48, col_offset=25)], [], None, None, lineno=48, col_offset=8), 'start_tree', Load(), lineno=48, col_offset=8), [Name('tree', Load(), lineno=48, col_offset=42), Name('name', Load(), lineno=48, col_offset=48)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=49, col_offset=8), 'skip', Store(), lineno=49, col_offset=8)], Compare(Str('absolute_import', lineno=49, col_offset=20), [In()], [Attribute(Name('tree', Load(), lineno=49, col_offset=41), 'future_features', Load(), lineno=49, col_offset=41)], lineno=49, col_offset=20), lineno=49, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=51, col_offset=18), Name('node', Param(), lineno=51, col_offset=24), Name('results', Param(), lineno=51, col_offset=30)], None, None, []), [If(Attribute(Name('self', Load(), lineno=52, col_offset=11), 'skip', Load(), lineno=52, col_offset=11), [Return(None, lineno=53, col_offset=12)], [], lineno=52, col_offset=8), Assign([Name('imp', Store(), lineno=54, col_offset=8)], Subscript(Name('results', Load(), lineno=54, col_offset=14), Index(Str('imp', lineno=54, col_offset=22)), Load(), lineno=54, col_offset=14), lineno=54, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=56, col_offset=11), 'type', Load(), lineno=56, col_offset=11), [Eq()], [Attribute(Name('syms', Load(), lineno=56, col_offset=24), 'import_from', Load(), lineno=56, col_offset=24)], lineno=56, col_offset=11), [While(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=61, col_offset=22), [Name('imp', Load(), lineno=61, col_offset=30), Str('value', lineno=61, col_offset=35)], [], None, None, lineno=61, col_offset=22), lineno=61, col_offset=18), [Assign([Name('imp', Store(), lineno=62, col_offset=16)], Subscript(Attribute(Name('imp', Load(), lineno=62, col_offset=22), 'children', Load(), lineno=62, col_offset=22), Index(Num(0, lineno=62, col_offset=35)), Load(), lineno=62, col_offset=22), lineno=62, col_offset=16)], [], lineno=61, col_offset=12), If(Call(Attribute(Name('self', Load(), lineno=63, col_offset=15), 'probably_a_local_import', Load(), lineno=63, col_offset=15), [Attribute(Name('imp', Load(), lineno=63, col_offset=44), 'value', Load(), lineno=63, col_offset=44)], [], None, None, lineno=63, col_offset=15), [Assign([Attribute(Name('imp', Load(), lineno=64, col_offset=16), 'value', Store(), lineno=64, col_offset=16)], BinOp(Str(u'.', lineno=64, col_offset=28), Add(), Attribute(Name('imp', Load(), lineno=64, col_offset=35), 'value', Load(), lineno=64, col_offset=35), lineno=64, col_offset=28), lineno=64, col_offset=16), Expr(Call(Attribute(Name('imp', Load(), lineno=65, col_offset=16), 'changed', Load(), lineno=65, col_offset=16), [], [], None, None, lineno=65, col_offset=16), lineno=65, col_offset=16)], [], lineno=63, col_offset=12)], [Assign([Name('have_local', Store(), lineno=67, col_offset=12)], Name('False', Load(), lineno=67, col_offset=25), lineno=67, col_offset=12), Assign([Name('have_absolute', Store(), lineno=68, col_offset=12)], Name('False', Load(), lineno=68, col_offset=28), lineno=68, col_offset=12), For(Name('mod_name', Store(), lineno=69, col_offset=16), Call(Name('traverse_imports', Load(), lineno=69, col_offset=28), [Name('imp', Load(), lineno=69, col_offset=45)], [], None, None, lineno=69, col_offset=28), [If(Call(Attribute(Name('self', Load(), lineno=70, col_offset=19), 'probably_a_local_import', Load(), lineno=70, col_offset=19), [Name('mod_name', Load(), lineno=70, col_offset=48)], [], None, None, lineno=70, col_offset=19), [Assign([Name('have_local', Store(), lineno=71, col_offset=20)], Name('True', Load(), lineno=71, col_offset=33), lineno=71, col_offset=20)], [Assign([Name('have_absolute', Store(), lineno=73, col_offset=20)], Name('True', Load(), lineno=73, col_offset=36), lineno=73, col_offset=20)], lineno=70, col_offset=16)], [], lineno=69, col_offset=12), If(Name('have_absolute', Load(), lineno=74, col_offset=15), [If(Name('have_local', Load(), lineno=75, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=20), 'warning', Load(), lineno=78, col_offset=20), [Name('node', Load(), lineno=78, col_offset=33), Str('absolute and local imports together', lineno=78, col_offset=39)], [], None, None, lineno=78, col_offset=20), lineno=78, col_offset=20)], [], lineno=75, col_offset=16), Return(None, lineno=79, col_offset=16)], [], lineno=74, col_offset=12), Assign([Name('new', Store(), lineno=81, col_offset=12)], Call(Name('FromImport', Load(), lineno=81, col_offset=18), [Str(u'.', lineno=81, col_offset=29), List([Name('imp', Load(), lineno=81, col_offset=36)], Load(), lineno=81, col_offset=35)], [], None, None, lineno=81, col_offset=18), lineno=81, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=82, col_offset=12), 'prefix', Store(), lineno=82, col_offset=12)], Attribute(Name('node', Load(), lineno=82, col_offset=25), 'prefix', Load(), lineno=82, col_offset=25), lineno=82, col_offset=12), Return(Name('new', Load(), lineno=83, col_offset=19), lineno=83, col_offset=12)], lineno=56, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('probably_a_local_import', arguments([Name('self', Param(), lineno=85, col_offset=32), Name('imp_name', Param(), lineno=85, col_offset=38)], None, None, []), [If(Call(Attribute(Name('imp_name', Load(), lineno=86, col_offset=11), 'startswith', Load(), lineno=86, col_offset=11), [Str(u'.', lineno=86, col_offset=31)], [], None, None, lineno=86, col_offset=11), [Return(Name('False', Load(), lineno=88, col_offset=19), lineno=88, col_offset=12)], [], lineno=86, col_offset=8), Assign([Name('imp_name', Store(), lineno=89, col_offset=8)], Subscript(Call(Attribute(Name('imp_name', Load(), lineno=89, col_offset=19), 'split', Load(), lineno=89, col_offset=19), [Str(u'.', lineno=89, col_offset=34), Num(1, lineno=89, col_offset=40)], [], None, None, lineno=89, col_offset=19), Index(Num(0, lineno=89, col_offset=43)), Load(), lineno=89, col_offset=19), lineno=89, col_offset=8), Assign([Name('base_path', Store(), lineno=90, col_offset=8)], Call(Name('dirname', Load(), lineno=90, col_offset=20), [Attribute(Name('self', Load(), lineno=90, col_offset=28), 'filename', Load(), lineno=90, col_offset=28)], [], None, None, lineno=90, col_offset=20), lineno=90, col_offset=8), Assign([Name('base_path', Store(), lineno=91, col_offset=8)], Call(Name('join', Load(), lineno=91, col_offset=20), [Name('base_path', Load(), lineno=91, col_offset=25), Name('imp_name', Load(), lineno=91, col_offset=36)], [], None, None, lineno=91, col_offset=20), lineno=91, col_offset=8), If(UnaryOp(Not(), Call(Name('exists', Load(), lineno=94, col_offset=15), [Call(Name('join', Load(), lineno=94, col_offset=22), [Call(Name('dirname', Load(), lineno=94, col_offset=27), [Name('base_path', Load(), lineno=94, col_offset=35)], [], None, None, lineno=94, col_offset=27), Str('__init__.py', lineno=94, col_offset=47)], [], None, None, lineno=94, col_offset=22)], [], None, None, lineno=94, col_offset=15), lineno=94, col_offset=11), [Return(Name('False', Load(), lineno=95, col_offset=19), lineno=95, col_offset=12)], [], lineno=94, col_offset=8), For(Name('ext', Store(), lineno=96, col_offset=12), List([Str('.py', lineno=96, col_offset=20), Name('sep', Load(), lineno=96, col_offset=27), Str('.pyc', lineno=96, col_offset=32), Str('.so', lineno=96, col_offset=40), Str('.sl', lineno=96, col_offset=47), Str('.pyd', lineno=96, col_offset=54)], Load(), lineno=96, col_offset=19), [If(Call(Name('exists', Load(), lineno=97, col_offset=15), [BinOp(Name('base_path', Load(), lineno=97, col_offset=22), Add(), Name('ext', Load(), lineno=97, col_offset=34), lineno=97, col_offset=22)], [], None, None, lineno=97, col_offset=15), [Return(Name('True', Load(), lineno=98, col_offset=23), lineno=98, col_offset=16)], [], lineno=97, col_offset=12)], [], lineno=96, col_offset=8), Return(Name('False', Load(), lineno=99, col_offset=15), lineno=99, col_offset=8)], [], lineno=85, col_offset=4)], [], lineno=38, col_offset=0)])
