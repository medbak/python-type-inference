Module([Expr(Str('plistlib.py -- a tool to generate and parse MacOSX .plist files.\n\nThe PropertyList (.plist) file format is a simple XML pickle supporting\nbasic object types, like dictionaries, lists, numbers and strings.\nUsually the top level object is a dictionary.\n\nTo write out a plist file, use the writePlist(rootObject, pathOrFile)\nfunction. \'rootObject\' is the top level object, \'pathOrFile\' is a\nfilename or a (writable) file object.\n\nTo parse a plist from a file, use the readPlist(pathOrFile) function,\nwith a file name or a (readable) file object as the only argument. It\nreturns the top level object (again, usually a dictionary).\n\nTo work with plist data in strings, you can use readPlistFromString()\nand writePlistToString().\n\nValues can be strings, integers, floats, booleans, tuples, lists,\ndictionaries, Data or datetime.datetime objects. String values (including\ndictionary keys) may be unicode strings -- they will be written out as\nUTF-8.\n\nThe <data> plist type is supported through the Data class. This is a\nthin wrapper around a Python string.\n\nGenerate Plist example:\n\n    pl = dict(\n        aString="Doodah",\n        aList=["A", "B", 12, 32.1, [1, 2, 3]],\n        aFloat=0.1,\n        anInt=728,\n        aDict=dict(\n            anotherString="<hello & hi there!>",\n            aUnicodeValue=u\'M\\xe4ssig, Ma\\xdf\',\n            aTrueValue=True,\n            aFalseValue=False,\n        ),\n        someData=Data("<binary gunk>"),\n        someMoreData=Data("<lots of binary gunk>" * 10),\n        aDate=datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),\n    )\n    # unicode keys are possible, but a little awkward to use:\n    pl[u\'\\xc5benraa\'] = "That was a unicode key."\n    writePlist(pl, fileName)\n\nParse Plist example:\n\n    pl = readPlist(pathOrFile)\n    print pl["aKey"]\n', lineno=51, col_offset=-1), lineno=51, col_offset=-1), Assign([Name('__all__', Store(), lineno=54, col_offset=0)], List([Str('readPlist', lineno=55, col_offset=4), Str('writePlist', lineno=55, col_offset=17), Str('readPlistFromString', lineno=55, col_offset=31), Str('writePlistToString', lineno=55, col_offset=54), Str('readPlistFromResource', lineno=56, col_offset=4), Str('writePlistToResource', lineno=56, col_offset=29), Str('Plist', lineno=57, col_offset=4), Str('Data', lineno=57, col_offset=13), Str('Dict', lineno=57, col_offset=21)], Load(), lineno=54, col_offset=10), lineno=54, col_offset=0), Import([alias('binascii', None)], lineno=61, col_offset=0), Import([alias('datetime', None)], lineno=62, col_offset=0), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=63, col_offset=0), Import([alias('re', None)], lineno=64, col_offset=0), Import([alias('warnings', None)], lineno=65, col_offset=0), FunctionDef('readPlist', arguments([Name('pathOrFile', Param(), lineno=68, col_offset=14)], None, None, []), [Expr(Str("Read a .plist file. 'pathOrFile' may either be a file name or a\n    (readable) file object. Return the unpacked root object (which\n    usually is a dictionary).\n    ", lineno=72, col_offset=-1), lineno=72, col_offset=-1), Assign([Name('didOpen', Store(), lineno=73, col_offset=4)], Num(0, lineno=73, col_offset=14), lineno=73, col_offset=4), If(Call(Name('isinstance', Load(), lineno=74, col_offset=7), [Name('pathOrFile', Load(), lineno=74, col_offset=18), Tuple([Name('str', Load(), lineno=74, col_offset=31), Name('unicode', Load(), lineno=74, col_offset=36)], Load(), lineno=74, col_offset=31)], [], None, None, lineno=74, col_offset=7), [Assign([Name('pathOrFile', Store(), lineno=75, col_offset=8)], Call(Name('open', Load(), lineno=75, col_offset=21), [Name('pathOrFile', Load(), lineno=75, col_offset=26)], [], None, None, lineno=75, col_offset=21), lineno=75, col_offset=8), Assign([Name('didOpen', Store(), lineno=76, col_offset=8)], Num(1, lineno=76, col_offset=18), lineno=76, col_offset=8)], [], lineno=74, col_offset=4), Assign([Name('p', Store(), lineno=77, col_offset=4)], Call(Name('PlistParser', Load(), lineno=77, col_offset=8), [], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=4), Assign([Name('rootObject', Store(), lineno=78, col_offset=4)], Call(Attribute(Name('p', Load(), lineno=78, col_offset=17), 'parse', Load(), lineno=78, col_offset=17), [Name('pathOrFile', Load(), lineno=78, col_offset=25)], [], None, None, lineno=78, col_offset=17), lineno=78, col_offset=4), If(Name('didOpen', Load(), lineno=79, col_offset=7), [Expr(Call(Attribute(Name('pathOrFile', Load(), lineno=80, col_offset=8), 'close', Load(), lineno=80, col_offset=8), [], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8)], [], lineno=79, col_offset=4), Return(Name('rootObject', Load(), lineno=81, col_offset=11), lineno=81, col_offset=4)], [], lineno=68, col_offset=0), FunctionDef('writePlist', arguments([Name('rootObject', Param(), lineno=84, col_offset=15), Name('pathOrFile', Param(), lineno=84, col_offset=27)], None, None, []), [Expr(Str("Write 'rootObject' to a .plist file. 'pathOrFile' may either be a\n    file name or a (writable) file object.\n    ", lineno=87, col_offset=-1), lineno=87, col_offset=-1), Assign([Name('didOpen', Store(), lineno=88, col_offset=4)], Num(0, lineno=88, col_offset=14), lineno=88, col_offset=4), If(Call(Name('isinstance', Load(), lineno=89, col_offset=7), [Name('pathOrFile', Load(), lineno=89, col_offset=18), Tuple([Name('str', Load(), lineno=89, col_offset=31), Name('unicode', Load(), lineno=89, col_offset=36)], Load(), lineno=89, col_offset=31)], [], None, None, lineno=89, col_offset=7), [Assign([Name('pathOrFile', Store(), lineno=90, col_offset=8)], Call(Name('open', Load(), lineno=90, col_offset=21), [Name('pathOrFile', Load(), lineno=90, col_offset=26), Str('w', lineno=90, col_offset=38)], [], None, None, lineno=90, col_offset=21), lineno=90, col_offset=8), Assign([Name('didOpen', Store(), lineno=91, col_offset=8)], Num(1, lineno=91, col_offset=18), lineno=91, col_offset=8)], [], lineno=89, col_offset=4), Assign([Name('writer', Store(), lineno=92, col_offset=4)], Call(Name('PlistWriter', Load(), lineno=92, col_offset=13), [Name('pathOrFile', Load(), lineno=92, col_offset=25)], [], None, None, lineno=92, col_offset=13), lineno=92, col_offset=4), Expr(Call(Attribute(Name('writer', Load(), lineno=93, col_offset=4), 'writeln', Load(), lineno=93, col_offset=4), [Str('<plist version="1.0">', lineno=93, col_offset=19)], [], None, None, lineno=93, col_offset=4), lineno=93, col_offset=4), Expr(Call(Attribute(Name('writer', Load(), lineno=94, col_offset=4), 'writeValue', Load(), lineno=94, col_offset=4), [Name('rootObject', Load(), lineno=94, col_offset=22)], [], None, None, lineno=94, col_offset=4), lineno=94, col_offset=4), Expr(Call(Attribute(Name('writer', Load(), lineno=95, col_offset=4), 'writeln', Load(), lineno=95, col_offset=4), [Str('</plist>', lineno=95, col_offset=19)], [], None, None, lineno=95, col_offset=4), lineno=95, col_offset=4), If(Name('didOpen', Load(), lineno=96, col_offset=7), [Expr(Call(Attribute(Name('pathOrFile', Load(), lineno=97, col_offset=8), 'close', Load(), lineno=97, col_offset=8), [], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8)], [], lineno=96, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('readPlistFromString', arguments([Name('data', Param(), lineno=100, col_offset=24)], None, None, []), [Expr(Str('Read a plist data from a string. Return the root object.\n    ', lineno=102, col_offset=-1), lineno=102, col_offset=-1), Return(Call(Name('readPlist', Load(), lineno=103, col_offset=11), [Call(Name('StringIO', Load(), lineno=103, col_offset=21), [Name('data', Load(), lineno=103, col_offset=30)], [], None, None, lineno=103, col_offset=21)], [], None, None, lineno=103, col_offset=11), lineno=103, col_offset=4)], [], lineno=100, col_offset=0), FunctionDef('writePlistToString', arguments([Name('rootObject', Param(), lineno=106, col_offset=23)], None, None, []), [Expr(Str("Return 'rootObject' as a plist-formatted string.\n    ", lineno=108, col_offset=-1), lineno=108, col_offset=-1), Assign([Name('f', Store(), lineno=109, col_offset=4)], Call(Name('StringIO', Load(), lineno=109, col_offset=8), [], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=4), Expr(Call(Name('writePlist', Load(), lineno=110, col_offset=4), [Name('rootObject', Load(), lineno=110, col_offset=15), Name('f', Load(), lineno=110, col_offset=27)], [], None, None, lineno=110, col_offset=4), lineno=110, col_offset=4), Return(Call(Attribute(Name('f', Load(), lineno=111, col_offset=11), 'getvalue', Load(), lineno=111, col_offset=11), [], [], None, None, lineno=111, col_offset=11), lineno=111, col_offset=4)], [], lineno=106, col_offset=0), FunctionDef('readPlistFromResource', arguments([Name('path', Param(), lineno=114, col_offset=26), Name('restype', Param(), lineno=114, col_offset=32), Name('resid', Param(), lineno=114, col_offset=48)], None, None, [Str('plst', lineno=114, col_offset=40), Num(0, lineno=114, col_offset=54)]), [Expr(Str('Read plst resource from the resource fork of path.\n    ', lineno=116, col_offset=-1), lineno=116, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=117, col_offset=4), 'warnpy3k', Load(), lineno=117, col_offset=4), [Str('In 3.x, readPlistFromResource is removed.', lineno=117, col_offset=22)], [keyword('stacklevel', Num(2, lineno=118, col_offset=33))], None, None, lineno=117, col_offset=4), lineno=117, col_offset=4), ImportFrom('Carbon.File', [alias('FSRef', None), alias('FSGetResourceForkName', None)], 0, lineno=119, col_offset=4), ImportFrom('Carbon.Files', [alias('fsRdPerm', None)], 0, lineno=120, col_offset=4), ImportFrom('Carbon', [alias('Res', None)], 0, lineno=121, col_offset=4), Assign([Name('fsRef', Store(), lineno=122, col_offset=4)], Call(Name('FSRef', Load(), lineno=122, col_offset=12), [Name('path', Load(), lineno=122, col_offset=18)], [], None, None, lineno=122, col_offset=12), lineno=122, col_offset=4), Assign([Name('resNum', Store(), lineno=123, col_offset=4)], Call(Attribute(Name('Res', Load(), lineno=123, col_offset=13), 'FSOpenResourceFile', Load(), lineno=123, col_offset=13), [Name('fsRef', Load(), lineno=123, col_offset=36), Call(Name('FSGetResourceForkName', Load(), lineno=123, col_offset=43), [], [], None, None, lineno=123, col_offset=43), Name('fsRdPerm', Load(), lineno=123, col_offset=68)], [], None, None, lineno=123, col_offset=13), lineno=123, col_offset=4), Expr(Call(Attribute(Name('Res', Load(), lineno=124, col_offset=4), 'UseResFile', Load(), lineno=124, col_offset=4), [Name('resNum', Load(), lineno=124, col_offset=19)], [], None, None, lineno=124, col_offset=4), lineno=124, col_offset=4), Assign([Name('plistData', Store(), lineno=125, col_offset=4)], Attribute(Call(Attribute(Name('Res', Load(), lineno=125, col_offset=16), 'Get1Resource', Load(), lineno=125, col_offset=16), [Name('restype', Load(), lineno=125, col_offset=33), Name('resid', Load(), lineno=125, col_offset=42)], [], None, None, lineno=125, col_offset=16), 'data', Load(), lineno=125, col_offset=16), lineno=125, col_offset=4), Expr(Call(Attribute(Name('Res', Load(), lineno=126, col_offset=4), 'CloseResFile', Load(), lineno=126, col_offset=4), [Name('resNum', Load(), lineno=126, col_offset=21)], [], None, None, lineno=126, col_offset=4), lineno=126, col_offset=4), Return(Call(Name('readPlistFromString', Load(), lineno=127, col_offset=11), [Name('plistData', Load(), lineno=127, col_offset=31)], [], None, None, lineno=127, col_offset=11), lineno=127, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('writePlistToResource', arguments([Name('rootObject', Param(), lineno=130, col_offset=25), Name('path', Param(), lineno=130, col_offset=37), Name('restype', Param(), lineno=130, col_offset=43), Name('resid', Param(), lineno=130, col_offset=59)], None, None, [Str('plst', lineno=130, col_offset=51), Num(0, lineno=130, col_offset=65)]), [Expr(Str("Write 'rootObject' as a plst resource to the resource fork of path.\n    ", lineno=132, col_offset=-1), lineno=132, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=133, col_offset=4), 'warnpy3k', Load(), lineno=133, col_offset=4), [Str('In 3.x, writePlistToResource is removed.', lineno=133, col_offset=22)], [keyword('stacklevel', Num(2, lineno=133, col_offset=77))], None, None, lineno=133, col_offset=4), lineno=133, col_offset=4), ImportFrom('Carbon.File', [alias('FSRef', None), alias('FSGetResourceForkName', None)], 0, lineno=134, col_offset=4), ImportFrom('Carbon.Files', [alias('fsRdWrPerm', None)], 0, lineno=135, col_offset=4), ImportFrom('Carbon', [alias('Res', None)], 0, lineno=136, col_offset=4), Assign([Name('plistData', Store(), lineno=137, col_offset=4)], Call(Name('writePlistToString', Load(), lineno=137, col_offset=16), [Name('rootObject', Load(), lineno=137, col_offset=35)], [], None, None, lineno=137, col_offset=16), lineno=137, col_offset=4), Assign([Name('fsRef', Store(), lineno=138, col_offset=4)], Call(Name('FSRef', Load(), lineno=138, col_offset=12), [Name('path', Load(), lineno=138, col_offset=18)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=4), Assign([Name('resNum', Store(), lineno=139, col_offset=4)], Call(Attribute(Name('Res', Load(), lineno=139, col_offset=13), 'FSOpenResourceFile', Load(), lineno=139, col_offset=13), [Name('fsRef', Load(), lineno=139, col_offset=36), Call(Name('FSGetResourceForkName', Load(), lineno=139, col_offset=43), [], [], None, None, lineno=139, col_offset=43), Name('fsRdWrPerm', Load(), lineno=139, col_offset=68)], [], None, None, lineno=139, col_offset=13), lineno=139, col_offset=4), Expr(Call(Attribute(Name('Res', Load(), lineno=140, col_offset=4), 'UseResFile', Load(), lineno=140, col_offset=4), [Name('resNum', Load(), lineno=140, col_offset=19)], [], None, None, lineno=140, col_offset=4), lineno=140, col_offset=4), TryExcept([Expr(Call(Attribute(Call(Attribute(Name('Res', Load(), lineno=142, col_offset=8), 'Get1Resource', Load(), lineno=142, col_offset=8), [Name('restype', Load(), lineno=142, col_offset=25), Name('resid', Load(), lineno=142, col_offset=34)], [], None, None, lineno=142, col_offset=8), 'RemoveResource', Load(), lineno=142, col_offset=8), [], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8)], [ExceptHandler(Attribute(Name('Res', Load(), lineno=143, col_offset=11), 'Error', Load(), lineno=143, col_offset=11), None, [Pass( lineno=144, col_offset=8)], lineno=143, col_offset=4)], [], lineno=141, col_offset=4), Assign([Name('res', Store(), lineno=145, col_offset=4)], Call(Attribute(Name('Res', Load(), lineno=145, col_offset=10), 'Resource', Load(), lineno=145, col_offset=10), [Name('plistData', Load(), lineno=145, col_offset=23)], [], None, None, lineno=145, col_offset=10), lineno=145, col_offset=4), Expr(Call(Attribute(Name('res', Load(), lineno=146, col_offset=4), 'AddResource', Load(), lineno=146, col_offset=4), [Name('restype', Load(), lineno=146, col_offset=20), Name('resid', Load(), lineno=146, col_offset=29), Str('', lineno=146, col_offset=36)], [], None, None, lineno=146, col_offset=4), lineno=146, col_offset=4), Expr(Call(Attribute(Name('res', Load(), lineno=147, col_offset=4), 'WriteResource', Load(), lineno=147, col_offset=4), [], [], None, None, lineno=147, col_offset=4), lineno=147, col_offset=4), Expr(Call(Attribute(Name('Res', Load(), lineno=148, col_offset=4), 'CloseResFile', Load(), lineno=148, col_offset=4), [Name('resNum', Load(), lineno=148, col_offset=21)], [], None, None, lineno=148, col_offset=4), lineno=148, col_offset=4)], [], lineno=130, col_offset=0), ClassDef('DumbXMLWriter', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=153, col_offset=17), Name('file', Param(), lineno=153, col_offset=23), Name('indentLevel', Param(), lineno=153, col_offset=29), Name('indent', Param(), lineno=153, col_offset=44)], None, None, [Num(0, lineno=153, col_offset=41), Str('\t', lineno=153, col_offset=51)]), [Assign([Attribute(Name('self', Load(), lineno=154, col_offset=8), 'file', Store(), lineno=154, col_offset=8)], Name('file', Load(), lineno=154, col_offset=20), lineno=154, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=155, col_offset=8), 'stack', Store(), lineno=155, col_offset=8)], List([], Load(), lineno=155, col_offset=21), lineno=155, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'indentLevel', Store(), lineno=156, col_offset=8)], Name('indentLevel', Load(), lineno=156, col_offset=27), lineno=156, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=157, col_offset=8), 'indent', Store(), lineno=157, col_offset=8)], Name('indent', Load(), lineno=157, col_offset=22), lineno=157, col_offset=8)], [], lineno=153, col_offset=4), FunctionDef('beginElement', arguments([Name('self', Param(), lineno=159, col_offset=21), Name('element', Param(), lineno=159, col_offset=27)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=160, col_offset=8), 'stack', Load(), lineno=160, col_offset=8), 'append', Load(), lineno=160, col_offset=8), [Name('element', Load(), lineno=160, col_offset=26)], [], None, None, lineno=160, col_offset=8), lineno=160, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=161, col_offset=8), 'writeln', Load(), lineno=161, col_offset=8), [BinOp(Str('<%s>', lineno=161, col_offset=21), Mod(), Name('element', Load(), lineno=161, col_offset=30), lineno=161, col_offset=21)], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=162, col_offset=8), 'indentLevel', Store(), lineno=162, col_offset=8), Add(), Num(1, lineno=162, col_offset=28), lineno=162, col_offset=8)], [], lineno=159, col_offset=4), FunctionDef('endElement', arguments([Name('self', Param(), lineno=164, col_offset=19), Name('element', Param(), lineno=164, col_offset=25)], None, None, []), [Assert(Compare(Attribute(Name('self', Load(), lineno=165, col_offset=15), 'indentLevel', Load(), lineno=165, col_offset=15), [Gt()], [Num(0, lineno=165, col_offset=34)], lineno=165, col_offset=15), None, lineno=165, col_offset=8), Assert(Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=166, col_offset=15), 'stack', Load(), lineno=166, col_offset=15), 'pop', Load(), lineno=166, col_offset=15), [], [], None, None, lineno=166, col_offset=15), [Eq()], [Name('element', Load(), lineno=166, col_offset=35)], lineno=166, col_offset=15), None, lineno=166, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=167, col_offset=8), 'indentLevel', Store(), lineno=167, col_offset=8), Sub(), Num(1, lineno=167, col_offset=28), lineno=167, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=8), 'writeln', Load(), lineno=168, col_offset=8), [BinOp(Str('</%s>', lineno=168, col_offset=21), Mod(), Name('element', Load(), lineno=168, col_offset=31), lineno=168, col_offset=21)], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8)], [], lineno=164, col_offset=4), FunctionDef('simpleElement', arguments([Name('self', Param(), lineno=170, col_offset=22), Name('element', Param(), lineno=170, col_offset=28), Name('value', Param(), lineno=170, col_offset=37)], None, None, [Name('None', Load(), lineno=170, col_offset=43)]), [If(Compare(Name('value', Load(), lineno=171, col_offset=11), [IsNot()], [Name('None', Load(), lineno=171, col_offset=24)], lineno=171, col_offset=11), [Assign([Name('value', Store(), lineno=172, col_offset=12)], Call(Name('_escapeAndEncode', Load(), lineno=172, col_offset=20), [Name('value', Load(), lineno=172, col_offset=37)], [], None, None, lineno=172, col_offset=20), lineno=172, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=173, col_offset=12), 'writeln', Load(), lineno=173, col_offset=12), [BinOp(Str('<%s>%s</%s>', lineno=173, col_offset=25), Mod(), Tuple([Name('element', Load(), lineno=173, col_offset=42), Name('value', Load(), lineno=173, col_offset=51), Name('element', Load(), lineno=173, col_offset=58)], Load(), lineno=173, col_offset=42), lineno=173, col_offset=25)], [], None, None, lineno=173, col_offset=12), lineno=173, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=175, col_offset=12), 'writeln', Load(), lineno=175, col_offset=12), [BinOp(Str('<%s/>', lineno=175, col_offset=25), Mod(), Name('element', Load(), lineno=175, col_offset=35), lineno=175, col_offset=25)], [], None, None, lineno=175, col_offset=12), lineno=175, col_offset=12)], lineno=171, col_offset=8)], [], lineno=170, col_offset=4), FunctionDef('writeln', arguments([Name('self', Param(), lineno=177, col_offset=16), Name('line', Param(), lineno=177, col_offset=22)], None, None, []), [If(Name('line', Load(), lineno=178, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=179, col_offset=12), 'file', Load(), lineno=179, col_offset=12), 'write', Load(), lineno=179, col_offset=12), [BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=179, col_offset=28), 'indentLevel', Load(), lineno=179, col_offset=28), Mult(), Attribute(Name('self', Load(), lineno=179, col_offset=47), 'indent', Load(), lineno=179, col_offset=47), lineno=179, col_offset=28), Add(), Name('line', Load(), lineno=179, col_offset=61), lineno=179, col_offset=28), Add(), Str('\n', lineno=179, col_offset=68), lineno=179, col_offset=66)], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=181, col_offset=12), 'file', Load(), lineno=181, col_offset=12), 'write', Load(), lineno=181, col_offset=12), [Str('\n', lineno=181, col_offset=28)], [], None, None, lineno=181, col_offset=12), lineno=181, col_offset=12)], lineno=178, col_offset=8)], [], lineno=177, col_offset=4)], [], lineno=151, col_offset=0), Assign([Name('_dateParser', Store(), lineno=187, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=187, col_offset=14), 'compile', Load(), lineno=187, col_offset=14), [Str('(?P<year>\\d\\d\\d\\d)(?:-(?P<month>\\d\\d)(?:-(?P<day>\\d\\d)(?:T(?P<hour>\\d\\d)(?::(?P<minute>\\d\\d)(?::(?P<second>\\d\\d))?)?)?)?)?Z', lineno=187, col_offset=25)], [], None, None, lineno=187, col_offset=14), lineno=187, col_offset=0), FunctionDef('_dateFromString', arguments([Name('s', Param(), lineno=189, col_offset=20)], None, None, []), [Assign([Name('order', Store(), lineno=190, col_offset=4)], Tuple([Str('year', lineno=190, col_offset=13), Str('month', lineno=190, col_offset=21), Str('day', lineno=190, col_offset=30), Str('hour', lineno=190, col_offset=37), Str('minute', lineno=190, col_offset=45), Str('second', lineno=190, col_offset=55)], Load(), lineno=190, col_offset=13), lineno=190, col_offset=4), Assign([Name('gd', Store(), lineno=191, col_offset=4)], Call(Attribute(Call(Attribute(Name('_dateParser', Load(), lineno=191, col_offset=9), 'match', Load(), lineno=191, col_offset=9), [Name('s', Load(), lineno=191, col_offset=27)], [], None, None, lineno=191, col_offset=9), 'groupdict', Load(), lineno=191, col_offset=9), [], [], None, None, lineno=191, col_offset=9), lineno=191, col_offset=4), Assign([Name('lst', Store(), lineno=192, col_offset=4)], List([], Load(), lineno=192, col_offset=10), lineno=192, col_offset=4), For(Name('key', Store(), lineno=193, col_offset=8), Name('order', Load(), lineno=193, col_offset=15), [Assign([Name('val', Store(), lineno=194, col_offset=8)], Subscript(Name('gd', Load(), lineno=194, col_offset=14), Index(Name('key', Load(), lineno=194, col_offset=17)), Load(), lineno=194, col_offset=14), lineno=194, col_offset=8), If(Compare(Name('val', Load(), lineno=195, col_offset=11), [Is()], [Name('None', Load(), lineno=195, col_offset=18)], lineno=195, col_offset=11), [Break( lineno=196, col_offset=12)], [], lineno=195, col_offset=8), Expr(Call(Attribute(Name('lst', Load(), lineno=197, col_offset=8), 'append', Load(), lineno=197, col_offset=8), [Call(Name('int', Load(), lineno=197, col_offset=19), [Name('val', Load(), lineno=197, col_offset=23)], [], None, None, lineno=197, col_offset=19)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [], lineno=193, col_offset=4), Return(Call(Attribute(Name('datetime', Load(), lineno=198, col_offset=11), 'datetime', Load(), lineno=198, col_offset=11), [], [], Name('lst', Load(), lineno=198, col_offset=30), None, lineno=198, col_offset=11), lineno=198, col_offset=4)], [], lineno=189, col_offset=0), FunctionDef('_dateToString', arguments([Name('d', Param(), lineno=200, col_offset=18)], None, None, []), [Return(BinOp(Str('%04d-%02d-%02dT%02d:%02d:%02dZ', lineno=201, col_offset=11), Mod(), Tuple([Attribute(Name('d', Load(), lineno=202, col_offset=8), 'year', Load(), lineno=202, col_offset=8), Attribute(Name('d', Load(), lineno=202, col_offset=16), 'month', Load(), lineno=202, col_offset=16), Attribute(Name('d', Load(), lineno=202, col_offset=25), 'day', Load(), lineno=202, col_offset=25), Attribute(Name('d', Load(), lineno=203, col_offset=8), 'hour', Load(), lineno=203, col_offset=8), Attribute(Name('d', Load(), lineno=203, col_offset=16), 'minute', Load(), lineno=203, col_offset=16), Attribute(Name('d', Load(), lineno=203, col_offset=26), 'second', Load(), lineno=203, col_offset=26)], Load(), lineno=202, col_offset=8), lineno=201, col_offset=11), lineno=201, col_offset=4)], [], lineno=200, col_offset=0), Assign([Name('_controlCharPat', Store(), lineno=208, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=208, col_offset=18), 'compile', Load(), lineno=208, col_offset=18), [Str('[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f]', lineno=209, col_offset=4)], [], None, None, lineno=208, col_offset=18), lineno=208, col_offset=0), FunctionDef('_escapeAndEncode', arguments([Name('text', Param(), lineno=212, col_offset=21)], None, None, []), [Assign([Name('m', Store(), lineno=213, col_offset=4)], Call(Attribute(Name('_controlCharPat', Load(), lineno=213, col_offset=8), 'search', Load(), lineno=213, col_offset=8), [Name('text', Load(), lineno=213, col_offset=31)], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=4), If(Compare(Name('m', Load(), lineno=214, col_offset=7), [IsNot()], [Name('None', Load(), lineno=214, col_offset=16)], lineno=214, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=215, col_offset=14), [Str("strings can't contains control characters; use plistlib.Data instead", lineno=215, col_offset=25)], [], None, None, lineno=215, col_offset=14), None, None, lineno=215, col_offset=8)], [], lineno=214, col_offset=4), Assign([Name('text', Store(), lineno=217, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=217, col_offset=11), 'replace', Load(), lineno=217, col_offset=11), [Str('\r\n', lineno=217, col_offset=24), Str('\n', lineno=217, col_offset=32)], [], None, None, lineno=217, col_offset=11), lineno=217, col_offset=4), Assign([Name('text', Store(), lineno=218, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=218, col_offset=11), 'replace', Load(), lineno=218, col_offset=11), [Str('\r', lineno=218, col_offset=24), Str('\n', lineno=218, col_offset=30)], [], None, None, lineno=218, col_offset=11), lineno=218, col_offset=4), Assign([Name('text', Store(), lineno=219, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=219, col_offset=11), 'replace', Load(), lineno=219, col_offset=11), [Str('&', lineno=219, col_offset=24), Str('&amp;', lineno=219, col_offset=29)], [], None, None, lineno=219, col_offset=11), lineno=219, col_offset=4), Assign([Name('text', Store(), lineno=220, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=220, col_offset=11), 'replace', Load(), lineno=220, col_offset=11), [Str('<', lineno=220, col_offset=24), Str('&lt;', lineno=220, col_offset=29)], [], None, None, lineno=220, col_offset=11), lineno=220, col_offset=4), Assign([Name('text', Store(), lineno=221, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=221, col_offset=11), 'replace', Load(), lineno=221, col_offset=11), [Str('>', lineno=221, col_offset=24), Str('&gt;', lineno=221, col_offset=29)], [], None, None, lineno=221, col_offset=11), lineno=221, col_offset=4), Return(Call(Attribute(Name('text', Load(), lineno=222, col_offset=11), 'encode', Load(), lineno=222, col_offset=11), [Str('utf-8', lineno=222, col_offset=23)], [], None, None, lineno=222, col_offset=11), lineno=222, col_offset=4)], [], lineno=212, col_offset=0), Assign([Name('PLISTHEADER', Store(), lineno=225, col_offset=0)], Str('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n', lineno=228, col_offset=-1), lineno=225, col_offset=0), ClassDef('PlistWriter', [Name('DumbXMLWriter', Load(), lineno=230, col_offset=18)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=232, col_offset=17), Name('file', Param(), lineno=232, col_offset=23), Name('indentLevel', Param(), lineno=232, col_offset=29), Name('indent', Param(), lineno=232, col_offset=44), Name('writeHeader', Param(), lineno=232, col_offset=57)], None, None, [Num(0, lineno=232, col_offset=41), Str('\t', lineno=232, col_offset=51), Num(1, lineno=232, col_offset=69)]), [If(Name('writeHeader', Load(), lineno=233, col_offset=11), [Expr(Call(Attribute(Name('file', Load(), lineno=234, col_offset=12), 'write', Load(), lineno=234, col_offset=12), [Name('PLISTHEADER', Load(), lineno=234, col_offset=23)], [], None, None, lineno=234, col_offset=12), lineno=234, col_offset=12)], [], lineno=233, col_offset=8), Expr(Call(Attribute(Name('DumbXMLWriter', Load(), lineno=235, col_offset=8), '__init__', Load(), lineno=235, col_offset=8), [Name('self', Load(), lineno=235, col_offset=31), Name('file', Load(), lineno=235, col_offset=37), Name('indentLevel', Load(), lineno=235, col_offset=43), Name('indent', Load(), lineno=235, col_offset=56)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8)], [], lineno=232, col_offset=4), FunctionDef('writeValue', arguments([Name('self', Param(), lineno=237, col_offset=19), Name('value', Param(), lineno=237, col_offset=25)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=238, col_offset=11), [Name('value', Load(), lineno=238, col_offset=22), Tuple([Name('str', Load(), lineno=238, col_offset=30), Name('unicode', Load(), lineno=238, col_offset=35)], Load(), lineno=238, col_offset=30)], [], None, None, lineno=238, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=239, col_offset=12), 'simpleElement', Load(), lineno=239, col_offset=12), [Str('string', lineno=239, col_offset=31), Name('value', Load(), lineno=239, col_offset=41)], [], None, None, lineno=239, col_offset=12), lineno=239, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=240, col_offset=13), [Name('value', Load(), lineno=240, col_offset=24), Name('bool', Load(), lineno=240, col_offset=31)], [], None, None, lineno=240, col_offset=13), [If(Name('value', Load(), lineno=243, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=16), 'simpleElement', Load(), lineno=244, col_offset=16), [Str('true', lineno=244, col_offset=35)], [], None, None, lineno=244, col_offset=16), lineno=244, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=16), 'simpleElement', Load(), lineno=246, col_offset=16), [Str('false', lineno=246, col_offset=35)], [], None, None, lineno=246, col_offset=16), lineno=246, col_offset=16)], lineno=243, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=247, col_offset=13), [Name('value', Load(), lineno=247, col_offset=24), Tuple([Name('int', Load(), lineno=247, col_offset=32), Name('long', Load(), lineno=247, col_offset=37)], Load(), lineno=247, col_offset=32)], [], None, None, lineno=247, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=248, col_offset=12), 'simpleElement', Load(), lineno=248, col_offset=12), [Str('integer', lineno=248, col_offset=31), BinOp(Str('%d', lineno=248, col_offset=42), Mod(), Name('value', Load(), lineno=248, col_offset=49), lineno=248, col_offset=42)], [], None, None, lineno=248, col_offset=12), lineno=248, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=249, col_offset=13), [Name('value', Load(), lineno=249, col_offset=24), Name('float', Load(), lineno=249, col_offset=31)], [], None, None, lineno=249, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=250, col_offset=12), 'simpleElement', Load(), lineno=250, col_offset=12), [Str('real', lineno=250, col_offset=31), Call(Name('repr', Load(), lineno=250, col_offset=39), [Name('value', Load(), lineno=250, col_offset=44)], [], None, None, lineno=250, col_offset=39)], [], None, None, lineno=250, col_offset=12), lineno=250, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=251, col_offset=13), [Name('value', Load(), lineno=251, col_offset=24), Name('dict', Load(), lineno=251, col_offset=31)], [], None, None, lineno=251, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=252, col_offset=12), 'writeDict', Load(), lineno=252, col_offset=12), [Name('value', Load(), lineno=252, col_offset=27)], [], None, None, lineno=252, col_offset=12), lineno=252, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=253, col_offset=13), [Name('value', Load(), lineno=253, col_offset=24), Name('Data', Load(), lineno=253, col_offset=31)], [], None, None, lineno=253, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=12), 'writeData', Load(), lineno=254, col_offset=12), [Name('value', Load(), lineno=254, col_offset=27)], [], None, None, lineno=254, col_offset=12), lineno=254, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=255, col_offset=13), [Name('value', Load(), lineno=255, col_offset=24), Attribute(Name('datetime', Load(), lineno=255, col_offset=31), 'datetime', Load(), lineno=255, col_offset=31)], [], None, None, lineno=255, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=256, col_offset=12), 'simpleElement', Load(), lineno=256, col_offset=12), [Str('date', lineno=256, col_offset=31), Call(Name('_dateToString', Load(), lineno=256, col_offset=39), [Name('value', Load(), lineno=256, col_offset=53)], [], None, None, lineno=256, col_offset=39)], [], None, None, lineno=256, col_offset=12), lineno=256, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=257, col_offset=13), [Name('value', Load(), lineno=257, col_offset=24), Tuple([Name('tuple', Load(), lineno=257, col_offset=32), Name('list', Load(), lineno=257, col_offset=39)], Load(), lineno=257, col_offset=32)], [], None, None, lineno=257, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=12), 'writeArray', Load(), lineno=258, col_offset=12), [Name('value', Load(), lineno=258, col_offset=28)], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=12)], [Raise(Call(Name('TypeError', Load(), lineno=260, col_offset=18), [BinOp(Str('unsuported type: %s', lineno=260, col_offset=28), Mod(), Call(Name('type', Load(), lineno=260, col_offset=52), [Name('value', Load(), lineno=260, col_offset=57)], [], None, None, lineno=260, col_offset=52), lineno=260, col_offset=28)], [], None, None, lineno=260, col_offset=18), None, None, lineno=260, col_offset=12)], lineno=257, col_offset=13)], lineno=255, col_offset=13)], lineno=253, col_offset=13)], lineno=251, col_offset=13)], lineno=249, col_offset=13)], lineno=247, col_offset=13)], lineno=240, col_offset=13)], lineno=238, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('writeData', arguments([Name('self', Param(), lineno=262, col_offset=18), Name('data', Param(), lineno=262, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'beginElement', Load(), lineno=263, col_offset=8), [Str('data', lineno=263, col_offset=26)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=264, col_offset=8), 'indentLevel', Store(), lineno=264, col_offset=8), Sub(), Num(1, lineno=264, col_offset=28), lineno=264, col_offset=8), Assign([Name('maxlinelength', Store(), lineno=265, col_offset=8)], BinOp(Num(76, lineno=265, col_offset=24), Sub(), Call(Name('len', Load(), lineno=265, col_offset=29), [BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=265, col_offset=33), 'indent', Load(), lineno=265, col_offset=33), 'replace', Load(), lineno=265, col_offset=33), [Str('\t', lineno=265, col_offset=53), BinOp(Str(' ', lineno=265, col_offset=59), Mult(), Num(8, lineno=265, col_offset=65), lineno=265, col_offset=59)], [], None, None, lineno=265, col_offset=33), Mult(), Attribute(Name('self', Load(), lineno=266, col_offset=33), 'indentLevel', Load(), lineno=266, col_offset=33), lineno=265, col_offset=33)], [], None, None, lineno=265, col_offset=29), lineno=265, col_offset=24), lineno=265, col_offset=8), For(Name('line', Store(), lineno=267, col_offset=12), Call(Attribute(Call(Attribute(Name('data', Load(), lineno=267, col_offset=20), 'asBase64', Load(), lineno=267, col_offset=20), [Name('maxlinelength', Load(), lineno=267, col_offset=34)], [], None, None, lineno=267, col_offset=20), 'split', Load(), lineno=267, col_offset=20), [Str('\n', lineno=267, col_offset=55)], [], None, None, lineno=267, col_offset=20), [If(Name('line', Load(), lineno=268, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=269, col_offset=16), 'writeln', Load(), lineno=269, col_offset=16), [Name('line', Load(), lineno=269, col_offset=29)], [], None, None, lineno=269, col_offset=16), lineno=269, col_offset=16)], [], lineno=268, col_offset=12)], [], lineno=267, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=270, col_offset=8), 'indentLevel', Store(), lineno=270, col_offset=8), Add(), Num(1, lineno=270, col_offset=28), lineno=270, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=271, col_offset=8), 'endElement', Load(), lineno=271, col_offset=8), [Str('data', lineno=271, col_offset=24)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8)], [], lineno=262, col_offset=4), FunctionDef('writeDict', arguments([Name('self', Param(), lineno=273, col_offset=18), Name('d', Param(), lineno=273, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=8), 'beginElement', Load(), lineno=274, col_offset=8), [Str('dict', lineno=274, col_offset=26)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8), Assign([Name('items', Store(), lineno=275, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=275, col_offset=16), 'items', Load(), lineno=275, col_offset=16), [], [], None, None, lineno=275, col_offset=16), lineno=275, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=276, col_offset=8), 'sort', Load(), lineno=276, col_offset=8), [], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8), For(Tuple([Name('key', Store(), lineno=277, col_offset=12), Name('value', Store(), lineno=277, col_offset=17)], Store(), lineno=277, col_offset=12), Name('items', Load(), lineno=277, col_offset=26), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=278, col_offset=19), [Name('key', Load(), lineno=278, col_offset=30), Tuple([Name('str', Load(), lineno=278, col_offset=36), Name('unicode', Load(), lineno=278, col_offset=41)], Load(), lineno=278, col_offset=36)], [], None, None, lineno=278, col_offset=19), lineno=278, col_offset=15), [Raise(Call(Name('TypeError', Load(), lineno=279, col_offset=22), [Str('keys must be strings', lineno=279, col_offset=32)], [], None, None, lineno=279, col_offset=22), None, None, lineno=279, col_offset=16)], [], lineno=278, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=12), 'simpleElement', Load(), lineno=280, col_offset=12), [Str('key', lineno=280, col_offset=31), Name('key', Load(), lineno=280, col_offset=38)], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=12), 'writeValue', Load(), lineno=281, col_offset=12), [Name('value', Load(), lineno=281, col_offset=28)], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], [], lineno=277, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=282, col_offset=8), 'endElement', Load(), lineno=282, col_offset=8), [Str('dict', lineno=282, col_offset=24)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('writeArray', arguments([Name('self', Param(), lineno=284, col_offset=19), Name('array', Param(), lineno=284, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=285, col_offset=8), 'beginElement', Load(), lineno=285, col_offset=8), [Str('array', lineno=285, col_offset=26)], [], None, None, lineno=285, col_offset=8), lineno=285, col_offset=8), For(Name('value', Store(), lineno=286, col_offset=12), Name('array', Load(), lineno=286, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=287, col_offset=12), 'writeValue', Load(), lineno=287, col_offset=12), [Name('value', Load(), lineno=287, col_offset=28)], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=12)], [], lineno=286, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=288, col_offset=8), 'endElement', Load(), lineno=288, col_offset=8), [Str('array', lineno=288, col_offset=24)], [], None, None, lineno=288, col_offset=8), lineno=288, col_offset=8)], [], lineno=284, col_offset=4)], [], lineno=230, col_offset=0), ClassDef('_InternalDict', [Name('dict', Load(), lineno=291, col_offset=20)], [FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=297, col_offset=20), Name('attr', Param(), lineno=297, col_offset=26)], None, None, []), [TryExcept([Assign([Name('value', Store(), lineno=299, col_offset=12)], Subscript(Name('self', Load(), lineno=299, col_offset=20), Index(Name('attr', Load(), lineno=299, col_offset=25)), Load(), lineno=299, col_offset=20), lineno=299, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=300, col_offset=15), None, [Raise(Name('AttributeError', Load(), lineno=301, col_offset=18), Name('attr', Load(), lineno=301, col_offset=34), None, lineno=301, col_offset=12)], lineno=300, col_offset=8)], [], lineno=298, col_offset=8), ImportFrom('warnings', [alias('warn', None)], 0, lineno=302, col_offset=8), Expr(Call(Name('warn', Load(), lineno=303, col_offset=8), [Str('Attribute access from plist dicts is deprecated, use d[key] notation instead', lineno=303, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=304, col_offset=33), Num(2, lineno=304, col_offset=60)], [], None, None, lineno=303, col_offset=8), lineno=303, col_offset=8), Return(Name('value', Load(), lineno=305, col_offset=15), lineno=305, col_offset=8)], [], lineno=297, col_offset=4), FunctionDef('__setattr__', arguments([Name('self', Param(), lineno=307, col_offset=20), Name('attr', Param(), lineno=307, col_offset=26), Name('value', Param(), lineno=307, col_offset=32)], None, None, []), [ImportFrom('warnings', [alias('warn', None)], 0, lineno=308, col_offset=8), Expr(Call(Name('warn', Load(), lineno=309, col_offset=8), [Str('Attribute access from plist dicts is deprecated, use d[key] notation instead', lineno=309, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=310, col_offset=33), Num(2, lineno=310, col_offset=60)], [], None, None, lineno=309, col_offset=8), lineno=309, col_offset=8), Assign([Subscript(Name('self', Load(), lineno=311, col_offset=8), Index(Name('attr', Load(), lineno=311, col_offset=13)), Store(), lineno=311, col_offset=8)], Name('value', Load(), lineno=311, col_offset=21), lineno=311, col_offset=8)], [], lineno=307, col_offset=4), FunctionDef('__delattr__', arguments([Name('self', Param(), lineno=313, col_offset=20), Name('attr', Param(), lineno=313, col_offset=26)], None, None, []), [TryExcept([Delete([Subscript(Name('self', Load(), lineno=315, col_offset=16), Index(Name('attr', Load(), lineno=315, col_offset=21)), Del(), lineno=315, col_offset=16)], lineno=315, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=316, col_offset=15), None, [Raise(Name('AttributeError', Load(), lineno=317, col_offset=18), Name('attr', Load(), lineno=317, col_offset=34), None, lineno=317, col_offset=12)], lineno=316, col_offset=8)], [], lineno=314, col_offset=8), ImportFrom('warnings', [alias('warn', None)], 0, lineno=318, col_offset=8), Expr(Call(Name('warn', Load(), lineno=319, col_offset=8), [Str('Attribute access from plist dicts is deprecated, use d[key] notation instead', lineno=319, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=320, col_offset=33), Num(2, lineno=320, col_offset=60)], [], None, None, lineno=319, col_offset=8), lineno=319, col_offset=8)], [], lineno=313, col_offset=4)], [], lineno=291, col_offset=0), ClassDef('Dict', [Name('_InternalDict', Load(), lineno=322, col_offset=11)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=324, col_offset=17)], None, 'kwargs', []), [ImportFrom('warnings', [alias('warn', None)], 0, lineno=325, col_offset=8), Expr(Call(Name('warn', Load(), lineno=326, col_offset=8), [Str('The plistlib.Dict class is deprecated, use builtin dict instead', lineno=326, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=327, col_offset=13), Num(2, lineno=327, col_offset=40)], [], None, None, lineno=326, col_offset=8), lineno=326, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=328, col_offset=8), [Name('Dict', Load(), lineno=328, col_offset=14), Name('self', Load(), lineno=328, col_offset=20)], [], None, None, lineno=328, col_offset=8), '__init__', Load(), lineno=328, col_offset=8), [], [], None, Name('kwargs', Load(), lineno=328, col_offset=37), lineno=328, col_offset=8), lineno=328, col_offset=8)], [], lineno=324, col_offset=4)], [], lineno=322, col_offset=0), ClassDef('Plist', [Name('_InternalDict', Load(), lineno=331, col_offset=12)], [Expr(Str('This class has been deprecated. Use readPlist() and writePlist()\n    functions instead, together with regular dict objects.\n    ', lineno=335, col_offset=-1), lineno=335, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=337, col_offset=17)], None, 'kwargs', []), [ImportFrom('warnings', [alias('warn', None)], 0, lineno=338, col_offset=8), Expr(Call(Name('warn', Load(), lineno=339, col_offset=8), [Str('The Plist class is deprecated, use the readPlist() and writePlist() functions instead', lineno=339, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=340, col_offset=47), Num(2, lineno=340, col_offset=74)], [], None, None, lineno=339, col_offset=8), lineno=339, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=341, col_offset=8), [Name('Plist', Load(), lineno=341, col_offset=14), Name('self', Load(), lineno=341, col_offset=21)], [], None, None, lineno=341, col_offset=8), '__init__', Load(), lineno=341, col_offset=8), [], [], None, Name('kwargs', Load(), lineno=341, col_offset=38), lineno=341, col_offset=8), lineno=341, col_offset=8)], [], lineno=337, col_offset=4), FunctionDef('fromFile', arguments([Name('cls', Param(), lineno=343, col_offset=17), Name('pathOrFile', Param(), lineno=343, col_offset=22)], None, None, []), [Expr(Str('Deprecated. Use the readPlist() function instead.', lineno=344, col_offset=8), lineno=344, col_offset=8), Assign([Name('rootObject', Store(), lineno=345, col_offset=8)], Call(Name('readPlist', Load(), lineno=345, col_offset=21), [Name('pathOrFile', Load(), lineno=345, col_offset=31)], [], None, None, lineno=345, col_offset=21), lineno=345, col_offset=8), Assign([Name('plist', Store(), lineno=346, col_offset=8)], Call(Name('cls', Load(), lineno=346, col_offset=16), [], [], None, None, lineno=346, col_offset=16), lineno=346, col_offset=8), Expr(Call(Attribute(Name('plist', Load(), lineno=347, col_offset=8), 'update', Load(), lineno=347, col_offset=8), [Name('rootObject', Load(), lineno=347, col_offset=21)], [], None, None, lineno=347, col_offset=8), lineno=347, col_offset=8), Return(Name('plist', Load(), lineno=348, col_offset=15), lineno=348, col_offset=8)], [], lineno=343, col_offset=4), Assign([Name('fromFile', Store(), lineno=349, col_offset=4)], Call(Name('classmethod', Load(), lineno=349, col_offset=15), [Name('fromFile', Load(), lineno=349, col_offset=27)], [], None, None, lineno=349, col_offset=15), lineno=349, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=351, col_offset=14), Name('pathOrFile', Param(), lineno=351, col_offset=20)], None, None, []), [Expr(Str('Deprecated. Use the writePlist() function instead.', lineno=352, col_offset=8), lineno=352, col_offset=8), Expr(Call(Name('writePlist', Load(), lineno=353, col_offset=8), [Name('self', Load(), lineno=353, col_offset=19), Name('pathOrFile', Load(), lineno=353, col_offset=25)], [], None, None, lineno=353, col_offset=8), lineno=353, col_offset=8)], [], lineno=351, col_offset=4)], [], lineno=331, col_offset=0), FunctionDef('_encodeBase64', arguments([Name('s', Param(), lineno=356, col_offset=18), Name('maxlinelength', Param(), lineno=356, col_offset=21)], None, None, [Num(76, lineno=356, col_offset=35)]), [Assign([Name('maxbinsize', Store(), lineno=358, col_offset=4)], BinOp(BinOp(Name('maxlinelength', Load(), lineno=358, col_offset=18), FloorDiv(), Num(4, lineno=358, col_offset=33), lineno=358, col_offset=18), Mult(), Num(3, lineno=358, col_offset=36), lineno=358, col_offset=17), lineno=358, col_offset=4), Assign([Name('pieces', Store(), lineno=359, col_offset=4)], List([], Load(), lineno=359, col_offset=13), lineno=359, col_offset=4), For(Name('i', Store(), lineno=360, col_offset=8), Call(Name('range', Load(), lineno=360, col_offset=13), [Num(0, lineno=360, col_offset=19), Call(Name('len', Load(), lineno=360, col_offset=22), [Name('s', Load(), lineno=360, col_offset=26)], [], None, None, lineno=360, col_offset=22), Name('maxbinsize', Load(), lineno=360, col_offset=30)], [], None, None, lineno=360, col_offset=13), [Assign([Name('chunk', Store(), lineno=361, col_offset=8)], Subscript(Name('s', Load(), lineno=361, col_offset=16), Slice(Name('i', Load(), lineno=361, col_offset=18), BinOp(Name('i', Load(), lineno=361, col_offset=22), Add(), Name('maxbinsize', Load(), lineno=361, col_offset=26), lineno=361, col_offset=22), None), Load(), lineno=361, col_offset=16), lineno=361, col_offset=8), Expr(Call(Attribute(Name('pieces', Load(), lineno=362, col_offset=8), 'append', Load(), lineno=362, col_offset=8), [Call(Attribute(Name('binascii', Load(), lineno=362, col_offset=22), 'b2a_base64', Load(), lineno=362, col_offset=22), [Name('chunk', Load(), lineno=362, col_offset=42)], [], None, None, lineno=362, col_offset=22)], [], None, None, lineno=362, col_offset=8), lineno=362, col_offset=8)], [], lineno=360, col_offset=4), Return(Call(Attribute(Str('', lineno=363, col_offset=11), 'join', Load(), lineno=363, col_offset=11), [Name('pieces', Load(), lineno=363, col_offset=19)], [], None, None, lineno=363, col_offset=11), lineno=363, col_offset=4)], [], lineno=356, col_offset=0), ClassDef('Data', [], [Expr(Str('Wrapper for binary data.', lineno=367, col_offset=4), lineno=367, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=369, col_offset=17), Name('data', Param(), lineno=369, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=370, col_offset=8), 'data', Store(), lineno=370, col_offset=8)], Name('data', Load(), lineno=370, col_offset=20), lineno=370, col_offset=8)], [], lineno=369, col_offset=4), FunctionDef('fromBase64', arguments([Name('cls', Param(), lineno=372, col_offset=19), Name('data', Param(), lineno=372, col_offset=24)], None, None, []), [Return(Call(Name('cls', Load(), lineno=375, col_offset=15), [Call(Attribute(Name('binascii', Load(), lineno=375, col_offset=19), 'a2b_base64', Load(), lineno=375, col_offset=19), [Name('data', Load(), lineno=375, col_offset=39)], [], None, None, lineno=375, col_offset=19)], [], None, None, lineno=375, col_offset=15), lineno=375, col_offset=8)], [], lineno=372, col_offset=4), Assign([Name('fromBase64', Store(), lineno=376, col_offset=4)], Call(Name('classmethod', Load(), lineno=376, col_offset=17), [Name('fromBase64', Load(), lineno=376, col_offset=29)], [], None, None, lineno=376, col_offset=17), lineno=376, col_offset=4), FunctionDef('asBase64', arguments([Name('self', Param(), lineno=378, col_offset=17), Name('maxlinelength', Param(), lineno=378, col_offset=23)], None, None, [Num(76, lineno=378, col_offset=37)]), [Return(Call(Name('_encodeBase64', Load(), lineno=379, col_offset=15), [Attribute(Name('self', Load(), lineno=379, col_offset=29), 'data', Load(), lineno=379, col_offset=29), Name('maxlinelength', Load(), lineno=379, col_offset=40)], [], None, None, lineno=379, col_offset=15), lineno=379, col_offset=8)], [], lineno=378, col_offset=4), FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=381, col_offset=16), Name('other', Param(), lineno=381, col_offset=22)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=382, col_offset=11), [Name('other', Load(), lineno=382, col_offset=22), Attribute(Name('self', Load(), lineno=382, col_offset=29), '__class__', Load(), lineno=382, col_offset=29)], [], None, None, lineno=382, col_offset=11), [Return(Call(Name('cmp', Load(), lineno=383, col_offset=19), [Attribute(Name('self', Load(), lineno=383, col_offset=23), 'data', Load(), lineno=383, col_offset=23), Attribute(Name('other', Load(), lineno=383, col_offset=34), 'data', Load(), lineno=383, col_offset=34)], [], None, None, lineno=383, col_offset=19), lineno=383, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=384, col_offset=13), [Name('other', Load(), lineno=384, col_offset=24), Name('str', Load(), lineno=384, col_offset=31)], [], None, None, lineno=384, col_offset=13), [Return(Call(Name('cmp', Load(), lineno=385, col_offset=19), [Attribute(Name('self', Load(), lineno=385, col_offset=23), 'data', Load(), lineno=385, col_offset=23), Name('other', Load(), lineno=385, col_offset=34)], [], None, None, lineno=385, col_offset=19), lineno=385, col_offset=12)], [Return(Call(Name('cmp', Load(), lineno=387, col_offset=19), [Call(Name('id', Load(), lineno=387, col_offset=23), [Name('self', Load(), lineno=387, col_offset=26)], [], None, None, lineno=387, col_offset=23), Call(Name('id', Load(), lineno=387, col_offset=33), [Name('other', Load(), lineno=387, col_offset=36)], [], None, None, lineno=387, col_offset=33)], [], None, None, lineno=387, col_offset=19), lineno=387, col_offset=12)], lineno=384, col_offset=13)], lineno=382, col_offset=8)], [], lineno=381, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=389, col_offset=17)], None, None, []), [Return(BinOp(Str('%s(%s)', lineno=390, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=390, col_offset=27), '__class__', Load(), lineno=390, col_offset=27), '__name__', Load(), lineno=390, col_offset=27), Call(Name('repr', Load(), lineno=390, col_offset=52), [Attribute(Name('self', Load(), lineno=390, col_offset=57), 'data', Load(), lineno=390, col_offset=57)], [], None, None, lineno=390, col_offset=52)], Load(), lineno=390, col_offset=27), lineno=390, col_offset=15), lineno=390, col_offset=8)], [], lineno=389, col_offset=4)], [], lineno=365, col_offset=0), ClassDef('PlistParser', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=395, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=396, col_offset=8), 'stack', Store(), lineno=396, col_offset=8)], List([], Load(), lineno=396, col_offset=21), lineno=396, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=397, col_offset=8), 'currentKey', Store(), lineno=397, col_offset=8)], Name('None', Load(), lineno=397, col_offset=26), lineno=397, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=398, col_offset=8), 'root', Store(), lineno=398, col_offset=8)], Name('None', Load(), lineno=398, col_offset=20), lineno=398, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('parse', arguments([Name('self', Param(), lineno=400, col_offset=14), Name('fileobj', Param(), lineno=400, col_offset=20)], None, None, []), [ImportFrom('xml.parsers.expat', [alias('ParserCreate', None)], 0, lineno=401, col_offset=8), Assign([Name('parser', Store(), lineno=402, col_offset=8)], Call(Name('ParserCreate', Load(), lineno=402, col_offset=17), [], [], None, None, lineno=402, col_offset=17), lineno=402, col_offset=8), Assign([Attribute(Name('parser', Load(), lineno=403, col_offset=8), 'StartElementHandler', Store(), lineno=403, col_offset=8)], Attribute(Name('self', Load(), lineno=403, col_offset=37), 'handleBeginElement', Load(), lineno=403, col_offset=37), lineno=403, col_offset=8), Assign([Attribute(Name('parser', Load(), lineno=404, col_offset=8), 'EndElementHandler', Store(), lineno=404, col_offset=8)], Attribute(Name('self', Load(), lineno=404, col_offset=35), 'handleEndElement', Load(), lineno=404, col_offset=35), lineno=404, col_offset=8), Assign([Attribute(Name('parser', Load(), lineno=405, col_offset=8), 'CharacterDataHandler', Store(), lineno=405, col_offset=8)], Attribute(Name('self', Load(), lineno=405, col_offset=38), 'handleData', Load(), lineno=405, col_offset=38), lineno=405, col_offset=8), Expr(Call(Attribute(Name('parser', Load(), lineno=406, col_offset=8), 'ParseFile', Load(), lineno=406, col_offset=8), [Name('fileobj', Load(), lineno=406, col_offset=25)], [], None, None, lineno=406, col_offset=8), lineno=406, col_offset=8), Return(Attribute(Name('self', Load(), lineno=407, col_offset=15), 'root', Load(), lineno=407, col_offset=15), lineno=407, col_offset=8)], [], lineno=400, col_offset=4), FunctionDef('handleBeginElement', arguments([Name('self', Param(), lineno=409, col_offset=27), Name('element', Param(), lineno=409, col_offset=33), Name('attrs', Param(), lineno=409, col_offset=42)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=410, col_offset=8), 'data', Store(), lineno=410, col_offset=8)], List([], Load(), lineno=410, col_offset=20), lineno=410, col_offset=8), Assign([Name('handler', Store(), lineno=411, col_offset=8)], Call(Name('getattr', Load(), lineno=411, col_offset=18), [Name('self', Load(), lineno=411, col_offset=26), BinOp(Str('begin_', lineno=411, col_offset=32), Add(), Name('element', Load(), lineno=411, col_offset=43), lineno=411, col_offset=32), Name('None', Load(), lineno=411, col_offset=52)], [], None, None, lineno=411, col_offset=18), lineno=411, col_offset=8), If(Compare(Name('handler', Load(), lineno=412, col_offset=11), [IsNot()], [Name('None', Load(), lineno=412, col_offset=26)], lineno=412, col_offset=11), [Expr(Call(Name('handler', Load(), lineno=413, col_offset=12), [Name('attrs', Load(), lineno=413, col_offset=20)], [], None, None, lineno=413, col_offset=12), lineno=413, col_offset=12)], [], lineno=412, col_offset=8)], [], lineno=409, col_offset=4), FunctionDef('handleEndElement', arguments([Name('self', Param(), lineno=415, col_offset=25), Name('element', Param(), lineno=415, col_offset=31)], None, None, []), [Assign([Name('handler', Store(), lineno=416, col_offset=8)], Call(Name('getattr', Load(), lineno=416, col_offset=18), [Name('self', Load(), lineno=416, col_offset=26), BinOp(Str('end_', lineno=416, col_offset=32), Add(), Name('element', Load(), lineno=416, col_offset=41), lineno=416, col_offset=32), Name('None', Load(), lineno=416, col_offset=50)], [], None, None, lineno=416, col_offset=18), lineno=416, col_offset=8), If(Compare(Name('handler', Load(), lineno=417, col_offset=11), [IsNot()], [Name('None', Load(), lineno=417, col_offset=26)], lineno=417, col_offset=11), [Expr(Call(Name('handler', Load(), lineno=418, col_offset=12), [], [], None, None, lineno=418, col_offset=12), lineno=418, col_offset=12)], [], lineno=417, col_offset=8)], [], lineno=415, col_offset=4), FunctionDef('handleData', arguments([Name('self', Param(), lineno=420, col_offset=19), Name('data', Param(), lineno=420, col_offset=25)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=421, col_offset=8), 'data', Load(), lineno=421, col_offset=8), 'append', Load(), lineno=421, col_offset=8), [Name('data', Load(), lineno=421, col_offset=25)], [], None, None, lineno=421, col_offset=8), lineno=421, col_offset=8)], [], lineno=420, col_offset=4), FunctionDef('addObject', arguments([Name('self', Param(), lineno=423, col_offset=18), Name('value', Param(), lineno=423, col_offset=24)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=424, col_offset=11), 'currentKey', Load(), lineno=424, col_offset=11), [IsNot()], [Name('None', Load(), lineno=424, col_offset=34)], lineno=424, col_offset=11), [Assign([Subscript(Subscript(Attribute(Name('self', Load(), lineno=425, col_offset=12), 'stack', Load(), lineno=425, col_offset=12), Index(Num(-1, lineno=425, col_offset=24)), Load(), lineno=425, col_offset=12), Index(Attribute(Name('self', Load(), lineno=425, col_offset=27), 'currentKey', Load(), lineno=425, col_offset=27)), Store(), lineno=425, col_offset=12)], Name('value', Load(), lineno=425, col_offset=46), lineno=425, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=426, col_offset=12), 'currentKey', Store(), lineno=426, col_offset=12)], Name('None', Load(), lineno=426, col_offset=30), lineno=426, col_offset=12)], [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=427, col_offset=17), 'stack', Load(), lineno=427, col_offset=17), lineno=427, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=429, col_offset=12), 'root', Store(), lineno=429, col_offset=12)], Name('value', Load(), lineno=429, col_offset=24), lineno=429, col_offset=12)], [Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=431, col_offset=12), 'stack', Load(), lineno=431, col_offset=12), Index(Num(-1, lineno=431, col_offset=24)), Load(), lineno=431, col_offset=12), 'append', Load(), lineno=431, col_offset=12), [Name('value', Load(), lineno=431, col_offset=34)], [], None, None, lineno=431, col_offset=12), lineno=431, col_offset=12)], lineno=427, col_offset=13)], lineno=424, col_offset=8)], [], lineno=423, col_offset=4), FunctionDef('getData', arguments([Name('self', Param(), lineno=433, col_offset=16)], None, None, []), [Assign([Name('data', Store(), lineno=434, col_offset=8)], Call(Attribute(Str('', lineno=434, col_offset=15), 'join', Load(), lineno=434, col_offset=15), [Attribute(Name('self', Load(), lineno=434, col_offset=23), 'data', Load(), lineno=434, col_offset=23)], [], None, None, lineno=434, col_offset=15), lineno=434, col_offset=8), TryExcept([Assign([Name('data', Store(), lineno=436, col_offset=12)], Call(Attribute(Name('data', Load(), lineno=436, col_offset=19), 'encode', Load(), lineno=436, col_offset=19), [Str('ascii', lineno=436, col_offset=31)], [], None, None, lineno=436, col_offset=19), lineno=436, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=437, col_offset=15), None, [Pass( lineno=438, col_offset=12)], lineno=437, col_offset=8)], [], lineno=435, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=439, col_offset=8), 'data', Store(), lineno=439, col_offset=8)], List([], Load(), lineno=439, col_offset=20), lineno=439, col_offset=8), Return(Name('data', Load(), lineno=440, col_offset=15), lineno=440, col_offset=8)], [], lineno=433, col_offset=4), FunctionDef('begin_dict', arguments([Name('self', Param(), lineno=444, col_offset=19), Name('attrs', Param(), lineno=444, col_offset=25)], None, None, []), [Assign([Name('d', Store(), lineno=445, col_offset=8)], Call(Name('_InternalDict', Load(), lineno=445, col_offset=12), [], [], None, None, lineno=445, col_offset=12), lineno=445, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=446, col_offset=8), 'addObject', Load(), lineno=446, col_offset=8), [Name('d', Load(), lineno=446, col_offset=23)], [], None, None, lineno=446, col_offset=8), lineno=446, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=447, col_offset=8), 'stack', Load(), lineno=447, col_offset=8), 'append', Load(), lineno=447, col_offset=8), [Name('d', Load(), lineno=447, col_offset=26)], [], None, None, lineno=447, col_offset=8), lineno=447, col_offset=8)], [], lineno=444, col_offset=4), FunctionDef('end_dict', arguments([Name('self', Param(), lineno=448, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=449, col_offset=8), 'stack', Load(), lineno=449, col_offset=8), 'pop', Load(), lineno=449, col_offset=8), [], [], None, None, lineno=449, col_offset=8), lineno=449, col_offset=8)], [], lineno=448, col_offset=4), FunctionDef('end_key', arguments([Name('self', Param(), lineno=451, col_offset=16)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=452, col_offset=8), 'currentKey', Store(), lineno=452, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=452, col_offset=26), 'getData', Load(), lineno=452, col_offset=26), [], [], None, None, lineno=452, col_offset=26), lineno=452, col_offset=8)], [], lineno=451, col_offset=4), FunctionDef('begin_array', arguments([Name('self', Param(), lineno=454, col_offset=20), Name('attrs', Param(), lineno=454, col_offset=26)], None, None, []), [Assign([Name('a', Store(), lineno=455, col_offset=8)], List([], Load(), lineno=455, col_offset=12), lineno=455, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=456, col_offset=8), 'addObject', Load(), lineno=456, col_offset=8), [Name('a', Load(), lineno=456, col_offset=23)], [], None, None, lineno=456, col_offset=8), lineno=456, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=457, col_offset=8), 'stack', Load(), lineno=457, col_offset=8), 'append', Load(), lineno=457, col_offset=8), [Name('a', Load(), lineno=457, col_offset=26)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8)], [], lineno=454, col_offset=4), FunctionDef('end_array', arguments([Name('self', Param(), lineno=458, col_offset=18)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=459, col_offset=8), 'stack', Load(), lineno=459, col_offset=8), 'pop', Load(), lineno=459, col_offset=8), [], [], None, None, lineno=459, col_offset=8), lineno=459, col_offset=8)], [], lineno=458, col_offset=4), FunctionDef('end_true', arguments([Name('self', Param(), lineno=461, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=462, col_offset=8), 'addObject', Load(), lineno=462, col_offset=8), [Name('True', Load(), lineno=462, col_offset=23)], [], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8)], [], lineno=461, col_offset=4), FunctionDef('end_false', arguments([Name('self', Param(), lineno=463, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=464, col_offset=8), 'addObject', Load(), lineno=464, col_offset=8), [Name('False', Load(), lineno=464, col_offset=23)], [], None, None, lineno=464, col_offset=8), lineno=464, col_offset=8)], [], lineno=463, col_offset=4), FunctionDef('end_integer', arguments([Name('self', Param(), lineno=465, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=466, col_offset=8), 'addObject', Load(), lineno=466, col_offset=8), [Call(Name('int', Load(), lineno=466, col_offset=23), [Call(Attribute(Name('self', Load(), lineno=466, col_offset=27), 'getData', Load(), lineno=466, col_offset=27), [], [], None, None, lineno=466, col_offset=27)], [], None, None, lineno=466, col_offset=23)], [], None, None, lineno=466, col_offset=8), lineno=466, col_offset=8)], [], lineno=465, col_offset=4), FunctionDef('end_real', arguments([Name('self', Param(), lineno=467, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=468, col_offset=8), 'addObject', Load(), lineno=468, col_offset=8), [Call(Name('float', Load(), lineno=468, col_offset=23), [Call(Attribute(Name('self', Load(), lineno=468, col_offset=29), 'getData', Load(), lineno=468, col_offset=29), [], [], None, None, lineno=468, col_offset=29)], [], None, None, lineno=468, col_offset=23)], [], None, None, lineno=468, col_offset=8), lineno=468, col_offset=8)], [], lineno=467, col_offset=4), FunctionDef('end_string', arguments([Name('self', Param(), lineno=469, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=470, col_offset=8), 'addObject', Load(), lineno=470, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=470, col_offset=23), 'getData', Load(), lineno=470, col_offset=23), [], [], None, None, lineno=470, col_offset=23)], [], None, None, lineno=470, col_offset=8), lineno=470, col_offset=8)], [], lineno=469, col_offset=4), FunctionDef('end_data', arguments([Name('self', Param(), lineno=471, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=472, col_offset=8), 'addObject', Load(), lineno=472, col_offset=8), [Call(Attribute(Name('Data', Load(), lineno=472, col_offset=23), 'fromBase64', Load(), lineno=472, col_offset=23), [Call(Attribute(Name('self', Load(), lineno=472, col_offset=39), 'getData', Load(), lineno=472, col_offset=39), [], [], None, None, lineno=472, col_offset=39)], [], None, None, lineno=472, col_offset=23)], [], None, None, lineno=472, col_offset=8), lineno=472, col_offset=8)], [], lineno=471, col_offset=4), FunctionDef('end_date', arguments([Name('self', Param(), lineno=473, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=474, col_offset=8), 'addObject', Load(), lineno=474, col_offset=8), [Call(Name('_dateFromString', Load(), lineno=474, col_offset=23), [Call(Attribute(Name('self', Load(), lineno=474, col_offset=39), 'getData', Load(), lineno=474, col_offset=39), [], [], None, None, lineno=474, col_offset=39)], [], None, None, lineno=474, col_offset=23)], [], None, None, lineno=474, col_offset=8), lineno=474, col_offset=8)], [], lineno=473, col_offset=4)], [], lineno=393, col_offset=0)])
