Module([Expr(Str('Pathname and path-related operations for the Macintosh.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('os', None)], lineno=3, col_offset=0), Import([alias('warnings', None)], lineno=4, col_offset=0), ImportFrom('stat', [alias('*', None)], 0, lineno=5, col_offset=0), Import([alias('genericpath', None)], lineno=6, col_offset=0), ImportFrom('genericpath', [alias('*', None)], 0, lineno=7, col_offset=0), Assign([Name('__all__', Store(), lineno=9, col_offset=0)], List([Str('normcase', lineno=9, col_offset=11), Str('isabs', lineno=9, col_offset=22), Str('join', lineno=9, col_offset=30), Str('splitdrive', lineno=9, col_offset=37), Str('split', lineno=9, col_offset=50), Str('splitext', lineno=9, col_offset=58), Str('basename', lineno=10, col_offset=11), Str('dirname', lineno=10, col_offset=22), Str('commonprefix', lineno=10, col_offset=32), Str('getsize', lineno=10, col_offset=47), Str('getmtime', lineno=10, col_offset=57), Str('getatime', lineno=11, col_offset=11), Str('getctime', lineno=11, col_offset=22), Str('islink', lineno=11, col_offset=34), Str('exists', lineno=11, col_offset=43), Str('lexists', lineno=11, col_offset=52), Str('isdir', lineno=11, col_offset=62), Str('isfile', lineno=11, col_offset=70), Str('walk', lineno=12, col_offset=11), Str('expanduser', lineno=12, col_offset=18), Str('expandvars', lineno=12, col_offset=31), Str('normpath', lineno=12, col_offset=44), Str('abspath', lineno=12, col_offset=55), Str('curdir', lineno=13, col_offset=11), Str('pardir', lineno=13, col_offset=20), Str('sep', lineno=13, col_offset=29), Str('pathsep', lineno=13, col_offset=35), Str('defpath', lineno=13, col_offset=45), Str('altsep', lineno=13, col_offset=55), Str('extsep', lineno=13, col_offset=64), Str('devnull', lineno=14, col_offset=11), Str('realpath', lineno=14, col_offset=21), Str('supports_unicode_filenames', lineno=14, col_offset=32)], Load(), lineno=9, col_offset=10), lineno=9, col_offset=0), Assign([Name('curdir', Store(), lineno=17, col_offset=0)], Str(':', lineno=17, col_offset=9), lineno=17, col_offset=0), Assign([Name('pardir', Store(), lineno=18, col_offset=0)], Str('::', lineno=18, col_offset=9), lineno=18, col_offset=0), Assign([Name('extsep', Store(), lineno=19, col_offset=0)], Str('.', lineno=19, col_offset=9), lineno=19, col_offset=0), Assign([Name('sep', Store(), lineno=20, col_offset=0)], Str(':', lineno=20, col_offset=6), lineno=20, col_offset=0), Assign([Name('pathsep', Store(), lineno=21, col_offset=0)], Str('\n', lineno=21, col_offset=10), lineno=21, col_offset=0), Assign([Name('defpath', Store(), lineno=22, col_offset=0)], Str(':', lineno=22, col_offset=10), lineno=22, col_offset=0), Assign([Name('altsep', Store(), lineno=23, col_offset=0)], Name('None', Load(), lineno=23, col_offset=9), lineno=23, col_offset=0), Assign([Name('devnull', Store(), lineno=24, col_offset=0)], Str('Dev:Null', lineno=24, col_offset=10), lineno=24, col_offset=0), FunctionDef('normcase', arguments([Name('path', Param(), lineno=28, col_offset=13)], None, None, []), [Return(Call(Attribute(Name('path', Load(), lineno=29, col_offset=11), 'lower', Load(), lineno=29, col_offset=11), [], [], None, None, lineno=29, col_offset=11), lineno=29, col_offset=4)], [], lineno=28, col_offset=0), FunctionDef('isabs', arguments([Name('s', Param(), lineno=32, col_offset=10)], None, None, []), [Expr(Str('Return true if a path is absolute.\n    On the Mac, relative paths begin with a colon,\n    but as a special case, paths with no colons at all are also relative.\n    Anything else is absolute (the string up to the first colon is the\n    volume name).', lineno=37, col_offset=-1), lineno=37, col_offset=-1), Return(BoolOp(And(), [Compare(Str(':', lineno=39, col_offset=11), [In()], [Name('s', Load(), lineno=39, col_offset=18)], lineno=39, col_offset=11), Compare(Subscript(Name('s', Load(), lineno=39, col_offset=24), Index(Num(0, lineno=39, col_offset=26)), Load(), lineno=39, col_offset=24), [NotEq()], [Str(':', lineno=39, col_offset=32)], lineno=39, col_offset=24)], lineno=39, col_offset=11), lineno=39, col_offset=4)], [], lineno=32, col_offset=0), FunctionDef('join', arguments([Name('s', Param(), lineno=42, col_offset=9)], 'p', None, []), [Assign([Name('path', Store(), lineno=43, col_offset=4)], Name('s', Load(), lineno=43, col_offset=11), lineno=43, col_offset=4), For(Name('t', Store(), lineno=44, col_offset=8), Name('p', Load(), lineno=44, col_offset=13), [If(BoolOp(Or(), [UnaryOp(Not(), Name('s', Load(), lineno=45, col_offset=16), lineno=45, col_offset=12), Call(Name('isabs', Load(), lineno=45, col_offset=22), [Name('t', Load(), lineno=45, col_offset=28)], [], None, None, lineno=45, col_offset=22)], lineno=45, col_offset=11), [Assign([Name('path', Store(), lineno=46, col_offset=12)], Name('t', Load(), lineno=46, col_offset=19), lineno=46, col_offset=12), Continue( lineno=47, col_offset=12)], [], lineno=45, col_offset=8), If(Compare(Subscript(Name('t', Load(), lineno=48, col_offset=11), Slice(None, Num(1, lineno=48, col_offset=14), None), Load(), lineno=48, col_offset=11), [Eq()], [Str(':', lineno=48, col_offset=20)], lineno=48, col_offset=11), [Assign([Name('t', Store(), lineno=49, col_offset=12)], Subscript(Name('t', Load(), lineno=49, col_offset=16), Slice(Num(1, lineno=49, col_offset=18), None, None), Load(), lineno=49, col_offset=16), lineno=49, col_offset=12)], [], lineno=48, col_offset=8), If(Compare(Str(':', lineno=50, col_offset=11), [NotIn()], [Name('path', Load(), lineno=50, col_offset=22)], lineno=50, col_offset=11), [Assign([Name('path', Store(), lineno=51, col_offset=12)], BinOp(Str(':', lineno=51, col_offset=19), Add(), Name('path', Load(), lineno=51, col_offset=25), lineno=51, col_offset=19), lineno=51, col_offset=12)], [], lineno=50, col_offset=8), If(Compare(Subscript(Name('path', Load(), lineno=52, col_offset=11), Slice(Num(-1, lineno=52, col_offset=17), None, None), Load(), lineno=52, col_offset=11), [NotEq()], [Str(':', lineno=52, col_offset=24)], lineno=52, col_offset=11), [Assign([Name('path', Store(), lineno=53, col_offset=12)], BinOp(Name('path', Load(), lineno=53, col_offset=19), Add(), Str(':', lineno=53, col_offset=26), lineno=53, col_offset=19), lineno=53, col_offset=12)], [], lineno=52, col_offset=8), Assign([Name('path', Store(), lineno=54, col_offset=8)], BinOp(Name('path', Load(), lineno=54, col_offset=15), Add(), Name('t', Load(), lineno=54, col_offset=22), lineno=54, col_offset=15), lineno=54, col_offset=8)], [], lineno=44, col_offset=4), Return(Name('path', Load(), lineno=55, col_offset=11), lineno=55, col_offset=4)], [], lineno=42, col_offset=0), FunctionDef('split', arguments([Name('s', Param(), lineno=58, col_offset=10)], None, None, []), [Expr(Str('Split a pathname into two parts: the directory leading up to the final\n    bit, and the basename (the filename, without colons, in that directory).\n    The result (s, t) is such that join(s, t) yields the original argument.', lineno=61, col_offset=-1), lineno=61, col_offset=-1), If(Compare(Str(':', lineno=63, col_offset=7), [NotIn()], [Name('s', Load(), lineno=63, col_offset=18)], lineno=63, col_offset=7), [Return(Tuple([Str('', lineno=63, col_offset=28), Name('s', Load(), lineno=63, col_offset=32)], Load(), lineno=63, col_offset=28), lineno=63, col_offset=21)], [], lineno=63, col_offset=4), Assign([Name('colon', Store(), lineno=64, col_offset=4)], Num(0, lineno=64, col_offset=12), lineno=64, col_offset=4), For(Name('i', Store(), lineno=65, col_offset=8), Call(Name('range', Load(), lineno=65, col_offset=13), [Call(Name('len', Load(), lineno=65, col_offset=19), [Name('s', Load(), lineno=65, col_offset=23)], [], None, None, lineno=65, col_offset=19)], [], None, None, lineno=65, col_offset=13), [If(Compare(Subscript(Name('s', Load(), lineno=66, col_offset=11), Index(Name('i', Load(), lineno=66, col_offset=13)), Load(), lineno=66, col_offset=11), [Eq()], [Str(':', lineno=66, col_offset=19)], lineno=66, col_offset=11), [Assign([Name('colon', Store(), lineno=66, col_offset=24)], BinOp(Name('i', Load(), lineno=66, col_offset=32), Add(), Num(1, lineno=66, col_offset=36), lineno=66, col_offset=32), lineno=66, col_offset=24)], [], lineno=66, col_offset=8)], [], lineno=65, col_offset=4), Assign([Tuple([Name('path', Store(), lineno=67, col_offset=4), Name('file', Store(), lineno=67, col_offset=10)], Store(), lineno=67, col_offset=4)], Tuple([Subscript(Name('s', Load(), lineno=67, col_offset=17), Slice(None, BinOp(Name('colon', Load(), lineno=67, col_offset=20), Sub(), Num(1, lineno=67, col_offset=26), lineno=67, col_offset=20), None), Load(), lineno=67, col_offset=17), Subscript(Name('s', Load(), lineno=67, col_offset=30), Slice(Name('colon', Load(), lineno=67, col_offset=32), None, None), Load(), lineno=67, col_offset=30)], Load(), lineno=67, col_offset=17), lineno=67, col_offset=4), If(BoolOp(And(), [Name('path', Load(), lineno=68, col_offset=7), UnaryOp(Not(), Compare(Str(':', lineno=68, col_offset=20), [In()], [Name('path', Load(), lineno=68, col_offset=27)], lineno=68, col_offset=20), lineno=68, col_offset=16)], lineno=68, col_offset=7), [Assign([Name('path', Store(), lineno=69, col_offset=8)], BinOp(Name('path', Load(), lineno=69, col_offset=15), Add(), Str(':', lineno=69, col_offset=22), lineno=69, col_offset=15), lineno=69, col_offset=8)], [], lineno=68, col_offset=4), Return(Tuple([Name('path', Load(), lineno=70, col_offset=11), Name('file', Load(), lineno=70, col_offset=17)], Load(), lineno=70, col_offset=11), lineno=70, col_offset=4)], [], lineno=58, col_offset=0), FunctionDef('splitext', arguments([Name('p', Param(), lineno=73, col_offset=13)], None, None, []), [Return(Call(Attribute(Name('genericpath', Load(), lineno=74, col_offset=11), '_splitext', Load(), lineno=74, col_offset=11), [Name('p', Load(), lineno=74, col_offset=33), Name('sep', Load(), lineno=74, col_offset=36), Name('altsep', Load(), lineno=74, col_offset=41), Name('extsep', Load(), lineno=74, col_offset=49)], [], None, None, lineno=74, col_offset=11), lineno=74, col_offset=4)], [], lineno=73, col_offset=0), Assign([Attribute(Name('splitext', Load(), lineno=75, col_offset=0), '__doc__', Store(), lineno=75, col_offset=0)], Attribute(Attribute(Name('genericpath', Load(), lineno=75, col_offset=19), '_splitext', Load(), lineno=75, col_offset=19), '__doc__', Load(), lineno=75, col_offset=19), lineno=75, col_offset=0), FunctionDef('splitdrive', arguments([Name('p', Param(), lineno=77, col_offset=15)], None, None, []), [Expr(Str("Split a pathname into a drive specification and the rest of the\n    path.  Useful on DOS/Windows/NT; on the Mac, the drive is always\n    empty (don't use the volume name -- it doesn't have the same\n    syntactic and semantic oddities as DOS drive letters, such as there\n    being a separate current directory per drive).", lineno=82, col_offset=-1), lineno=82, col_offset=-1), Return(Tuple([Str('', lineno=84, col_offset=11), Name('p', Load(), lineno=84, col_offset=15)], Load(), lineno=84, col_offset=11), lineno=84, col_offset=4)], [], lineno=77, col_offset=0), FunctionDef('dirname', arguments([Name('s', Param(), lineno=89, col_offset=12)], None, None, []), [Return(Subscript(Call(Name('split', Load(), lineno=89, col_offset=23), [Name('s', Load(), lineno=89, col_offset=29)], [], None, None, lineno=89, col_offset=23), Index(Num(0, lineno=89, col_offset=32)), Load(), lineno=89, col_offset=23), lineno=89, col_offset=16)], [], lineno=89, col_offset=0), FunctionDef('basename', arguments([Name('s', Param(), lineno=90, col_offset=13)], None, None, []), [Return(Subscript(Call(Name('split', Load(), lineno=90, col_offset=24), [Name('s', Load(), lineno=90, col_offset=30)], [], None, None, lineno=90, col_offset=24), Index(Num(1, lineno=90, col_offset=33)), Load(), lineno=90, col_offset=24), lineno=90, col_offset=17)], [], lineno=90, col_offset=0), FunctionDef('ismount', arguments([Name('s', Param(), lineno=92, col_offset=12)], None, None, []), [If(UnaryOp(Not(), Call(Name('isabs', Load(), lineno=93, col_offset=11), [Name('s', Load(), lineno=93, col_offset=17)], [], None, None, lineno=93, col_offset=11), lineno=93, col_offset=7), [Return(Name('False', Load(), lineno=94, col_offset=15), lineno=94, col_offset=8)], [], lineno=93, col_offset=4), Assign([Name('components', Store(), lineno=95, col_offset=4)], Call(Name('split', Load(), lineno=95, col_offset=17), [Name('s', Load(), lineno=95, col_offset=23)], [], None, None, lineno=95, col_offset=17), lineno=95, col_offset=4), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=96, col_offset=11), [Name('components', Load(), lineno=96, col_offset=15)], [], None, None, lineno=96, col_offset=11), [Eq()], [Num(2, lineno=96, col_offset=30)], lineno=96, col_offset=11), Compare(Subscript(Name('components', Load(), lineno=96, col_offset=36), Index(Num(1, lineno=96, col_offset=47)), Load(), lineno=96, col_offset=36), [Eq()], [Str('', lineno=96, col_offset=53)], lineno=96, col_offset=36)], lineno=96, col_offset=11), lineno=96, col_offset=4)], [], lineno=92, col_offset=0), FunctionDef('islink', arguments([Name('s', Param(), lineno=98, col_offset=11)], None, None, []), [Expr(Str('Return true if the pathname refers to a symbolic link.', lineno=99, col_offset=4), lineno=99, col_offset=4), TryExcept([Import([alias('Carbon.File', None)], lineno=102, col_offset=8), Return(Subscript(Call(Attribute(Attribute(Name('Carbon', Load(), lineno=103, col_offset=15), 'File', Load(), lineno=103, col_offset=15), 'ResolveAliasFile', Load(), lineno=103, col_offset=15), [Name('s', Load(), lineno=103, col_offset=44), Num(0, lineno=103, col_offset=47)], [], None, None, lineno=103, col_offset=15), Index(Num(2, lineno=103, col_offset=50)), Load(), lineno=103, col_offset=15), lineno=103, col_offset=8)], [ExceptHandler(None, None, [Return(Name('False', Load(), lineno=105, col_offset=15), lineno=105, col_offset=8)], lineno=104, col_offset=4)], [], lineno=101, col_offset=4)], [], lineno=98, col_offset=0), FunctionDef('lexists', arguments([Name('path', Param(), lineno=110, col_offset=12)], None, None, []), [Expr(Str('Test whether a path exists.  Returns True for broken symbolic links', lineno=111, col_offset=4), lineno=111, col_offset=4), TryExcept([Assign([Name('st', Store(), lineno=114, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=114, col_offset=13), 'lstat', Load(), lineno=114, col_offset=13), [Name('path', Load(), lineno=114, col_offset=22)], [], None, None, lineno=114, col_offset=13), lineno=114, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=115, col_offset=11), 'error', Load(), lineno=115, col_offset=11), None, [Return(Name('False', Load(), lineno=116, col_offset=15), lineno=116, col_offset=8)], lineno=115, col_offset=4)], [], lineno=113, col_offset=4), Return(Name('True', Load(), lineno=117, col_offset=11), lineno=117, col_offset=4)], [], lineno=110, col_offset=0), FunctionDef('expandvars', arguments([Name('path', Param(), lineno=119, col_offset=15)], None, None, []), [Expr(Str('Dummy to retain interface-compatibility with other operating systems.', lineno=120, col_offset=4), lineno=120, col_offset=4), Return(Name('path', Load(), lineno=121, col_offset=11), lineno=121, col_offset=4)], [], lineno=119, col_offset=0), FunctionDef('expanduser', arguments([Name('path', Param(), lineno=124, col_offset=15)], None, None, []), [Expr(Str('Dummy to retain interface-compatibility with other operating systems.', lineno=125, col_offset=4), lineno=125, col_offset=4), Return(Name('path', Load(), lineno=126, col_offset=11), lineno=126, col_offset=4)], [], lineno=124, col_offset=0), ClassDef('norm_error', [Name('Exception', Load(), lineno=128, col_offset=17)], [Expr(Str('Path cannot be normalized', lineno=129, col_offset=4), lineno=129, col_offset=4)], [], lineno=128, col_offset=0), FunctionDef('normpath', arguments([Name('s', Param(), lineno=131, col_offset=13)], None, None, []), [Expr(Str('Normalize a pathname.  Will return the same result for\n    equivalent paths.', lineno=133, col_offset=-1), lineno=133, col_offset=-1), If(Compare(Str(':', lineno=135, col_offset=7), [NotIn()], [Name('s', Load(), lineno=135, col_offset=18)], lineno=135, col_offset=7), [Return(BinOp(Str(':', lineno=136, col_offset=15), Add(), Name('s', Load(), lineno=136, col_offset=19), lineno=136, col_offset=15), lineno=136, col_offset=8)], [], lineno=135, col_offset=4), Assign([Name('comps', Store(), lineno=138, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=138, col_offset=12), 'split', Load(), lineno=138, col_offset=12), [Str(':', lineno=138, col_offset=20)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=4), Assign([Name('i', Store(), lineno=139, col_offset=4)], Num(1, lineno=139, col_offset=8), lineno=139, col_offset=4), While(Compare(Name('i', Load(), lineno=140, col_offset=10), [Lt()], [BinOp(Call(Name('len', Load(), lineno=140, col_offset=14), [Name('comps', Load(), lineno=140, col_offset=18)], [], None, None, lineno=140, col_offset=14), Sub(), Num(1, lineno=140, col_offset=25), lineno=140, col_offset=14)], lineno=140, col_offset=10), [If(BoolOp(And(), [Compare(Subscript(Name('comps', Load(), lineno=141, col_offset=11), Index(Name('i', Load(), lineno=141, col_offset=17)), Load(), lineno=141, col_offset=11), [Eq()], [Str('', lineno=141, col_offset=23)], lineno=141, col_offset=11), Compare(Subscript(Name('comps', Load(), lineno=141, col_offset=30), Index(BinOp(Name('i', Load(), lineno=141, col_offset=36), Sub(), Num(1, lineno=141, col_offset=38), lineno=141, col_offset=36)), Load(), lineno=141, col_offset=30), [NotEq()], [Str('', lineno=141, col_offset=44)], lineno=141, col_offset=30)], lineno=141, col_offset=11), [If(Compare(Name('i', Load(), lineno=142, col_offset=15), [Gt()], [Num(1, lineno=142, col_offset=19)], lineno=142, col_offset=15), [Delete([Subscript(Name('comps', Load(), lineno=143, col_offset=20), Slice(BinOp(Name('i', Load(), lineno=143, col_offset=26), Sub(), Num(1, lineno=143, col_offset=28), lineno=143, col_offset=26), BinOp(Name('i', Load(), lineno=143, col_offset=30), Add(), Num(1, lineno=143, col_offset=32), lineno=143, col_offset=30), None), Del(), lineno=143, col_offset=20)], lineno=143, col_offset=16), Assign([Name('i', Store(), lineno=144, col_offset=16)], BinOp(Name('i', Load(), lineno=144, col_offset=20), Sub(), Num(1, lineno=144, col_offset=24), lineno=144, col_offset=20), lineno=144, col_offset=16)], [Raise(Name('norm_error', Load(), lineno=147, col_offset=22), Str('Cannot use :: immediately after volume name', lineno=147, col_offset=34), None, lineno=147, col_offset=16)], lineno=142, col_offset=12)], [Assign([Name('i', Store(), lineno=149, col_offset=12)], BinOp(Name('i', Load(), lineno=149, col_offset=16), Add(), Num(1, lineno=149, col_offset=20), lineno=149, col_offset=16), lineno=149, col_offset=12)], lineno=141, col_offset=8)], [], lineno=140, col_offset=4), Assign([Name('s', Store(), lineno=151, col_offset=4)], Call(Attribute(Str(':', lineno=151, col_offset=8), 'join', Load(), lineno=151, col_offset=8), [Name('comps', Load(), lineno=151, col_offset=17)], [], None, None, lineno=151, col_offset=8), lineno=151, col_offset=4), If(BoolOp(And(), [Compare(Subscript(Name('s', Load(), lineno=154, col_offset=7), Index(Num(-1, lineno=154, col_offset=10)), Load(), lineno=154, col_offset=7), [Eq()], [Str(':', lineno=154, col_offset=16)], lineno=154, col_offset=7), Compare(Call(Name('len', Load(), lineno=154, col_offset=24), [Name('comps', Load(), lineno=154, col_offset=28)], [], None, None, lineno=154, col_offset=24), [Gt()], [Num(2, lineno=154, col_offset=37)], lineno=154, col_offset=24), Compare(Name('s', Load(), lineno=154, col_offset=43), [NotEq()], [BinOp(Str(':', lineno=154, col_offset=48), Mult(), Call(Name('len', Load(), lineno=154, col_offset=52), [Name('s', Load(), lineno=154, col_offset=56)], [], None, None, lineno=154, col_offset=52), lineno=154, col_offset=48)], lineno=154, col_offset=43)], lineno=154, col_offset=7), [Assign([Name('s', Store(), lineno=155, col_offset=8)], Subscript(Name('s', Load(), lineno=155, col_offset=12), Slice(None, Num(-1, lineno=155, col_offset=16), None), Load(), lineno=155, col_offset=12), lineno=155, col_offset=8)], [], lineno=154, col_offset=4), Return(Name('s', Load(), lineno=156, col_offset=11), lineno=156, col_offset=4)], [], lineno=131, col_offset=0), FunctionDef('walk', arguments([Name('top', Param(), lineno=159, col_offset=9), Name('func', Param(), lineno=159, col_offset=14), Name('arg', Param(), lineno=159, col_offset=20)], None, None, []), [Expr(Str("Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common.", lineno=172, col_offset=-1), lineno=172, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=173, col_offset=4), 'warnpy3k', Load(), lineno=173, col_offset=4), [Str('In 3.x, os.path.walk is removed in favor of os.walk.', lineno=173, col_offset=22)], [keyword('stacklevel', Num(2, lineno=174, col_offset=33))], None, None, lineno=173, col_offset=4), lineno=173, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=176, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=176, col_offset=16), 'listdir', Load(), lineno=176, col_offset=16), [Name('top', Load(), lineno=176, col_offset=27)], [], None, None, lineno=176, col_offset=16), lineno=176, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=177, col_offset=11), 'error', Load(), lineno=177, col_offset=11), None, [Return(None, lineno=178, col_offset=8)], lineno=177, col_offset=4)], [], lineno=175, col_offset=4), Expr(Call(Name('func', Load(), lineno=179, col_offset=4), [Name('arg', Load(), lineno=179, col_offset=9), Name('top', Load(), lineno=179, col_offset=14), Name('names', Load(), lineno=179, col_offset=19)], [], None, None, lineno=179, col_offset=4), lineno=179, col_offset=4), For(Name('name', Store(), lineno=180, col_offset=8), Name('names', Load(), lineno=180, col_offset=16), [Assign([Name('name', Store(), lineno=181, col_offset=8)], Call(Name('join', Load(), lineno=181, col_offset=15), [Name('top', Load(), lineno=181, col_offset=20), Name('name', Load(), lineno=181, col_offset=25)], [], None, None, lineno=181, col_offset=15), lineno=181, col_offset=8), If(BoolOp(And(), [Call(Name('isdir', Load(), lineno=182, col_offset=11), [Name('name', Load(), lineno=182, col_offset=17)], [], None, None, lineno=182, col_offset=11), UnaryOp(Not(), Call(Name('islink', Load(), lineno=182, col_offset=31), [Name('name', Load(), lineno=182, col_offset=38)], [], None, None, lineno=182, col_offset=31), lineno=182, col_offset=27)], lineno=182, col_offset=11), [Expr(Call(Name('walk', Load(), lineno=183, col_offset=12), [Name('name', Load(), lineno=183, col_offset=17), Name('func', Load(), lineno=183, col_offset=23), Name('arg', Load(), lineno=183, col_offset=29)], [], None, None, lineno=183, col_offset=12), lineno=183, col_offset=12)], [], lineno=182, col_offset=8)], [], lineno=180, col_offset=4)], [], lineno=159, col_offset=0), FunctionDef('abspath', arguments([Name('path', Param(), lineno=186, col_offset=12)], None, None, []), [Expr(Str('Return an absolute path.', lineno=187, col_offset=4), lineno=187, col_offset=4), If(UnaryOp(Not(), Call(Name('isabs', Load(), lineno=188, col_offset=11), [Name('path', Load(), lineno=188, col_offset=17)], [], None, None, lineno=188, col_offset=11), lineno=188, col_offset=7), [If(Call(Name('isinstance', Load(), lineno=189, col_offset=11), [Name('path', Load(), lineno=189, col_offset=22), Name('unicode', Load(), lineno=189, col_offset=28)], [], None, None, lineno=189, col_offset=11), [Assign([Name('cwd', Store(), lineno=190, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=190, col_offset=18), 'getcwdu', Load(), lineno=190, col_offset=18), [], [], None, None, lineno=190, col_offset=18), lineno=190, col_offset=12)], [Assign([Name('cwd', Store(), lineno=192, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=192, col_offset=18), 'getcwd', Load(), lineno=192, col_offset=18), [], [], None, None, lineno=192, col_offset=18), lineno=192, col_offset=12)], lineno=189, col_offset=8), Assign([Name('path', Store(), lineno=193, col_offset=8)], Call(Name('join', Load(), lineno=193, col_offset=15), [Name('cwd', Load(), lineno=193, col_offset=20), Name('path', Load(), lineno=193, col_offset=25)], [], None, None, lineno=193, col_offset=15), lineno=193, col_offset=8)], [], lineno=188, col_offset=4), Return(Call(Name('normpath', Load(), lineno=194, col_offset=11), [Name('path', Load(), lineno=194, col_offset=20)], [], None, None, lineno=194, col_offset=11), lineno=194, col_offset=4)], [], lineno=186, col_offset=0), FunctionDef('realpath', arguments([Name('path', Param(), lineno=197, col_offset=13)], None, None, []), [Assign([Name('path', Store(), lineno=198, col_offset=4)], Call(Name('abspath', Load(), lineno=198, col_offset=11), [Name('path', Load(), lineno=198, col_offset=19)], [], None, None, lineno=198, col_offset=11), lineno=198, col_offset=4), TryExcept([Import([alias('Carbon.File', None)], lineno=200, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=201, col_offset=11), None, [Return(Name('path', Load(), lineno=202, col_offset=15), lineno=202, col_offset=8)], lineno=201, col_offset=4)], [], lineno=199, col_offset=4), If(UnaryOp(Not(), Name('path', Load(), lineno=203, col_offset=11), lineno=203, col_offset=7), [Return(Name('path', Load(), lineno=204, col_offset=15), lineno=204, col_offset=8)], [], lineno=203, col_offset=4), Assign([Name('components', Store(), lineno=205, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=205, col_offset=17), 'split', Load(), lineno=205, col_offset=17), [Str(':', lineno=205, col_offset=28)], [], None, None, lineno=205, col_offset=17), lineno=205, col_offset=4), Assign([Name('path', Store(), lineno=206, col_offset=4)], BinOp(Subscript(Name('components', Load(), lineno=206, col_offset=11), Index(Num(0, lineno=206, col_offset=22)), Load(), lineno=206, col_offset=11), Add(), Str(':', lineno=206, col_offset=27), lineno=206, col_offset=11), lineno=206, col_offset=4), For(Name('c', Store(), lineno=207, col_offset=8), Subscript(Name('components', Load(), lineno=207, col_offset=13), Slice(Num(1, lineno=207, col_offset=24), None, None), Load(), lineno=207, col_offset=13), [Assign([Name('path', Store(), lineno=208, col_offset=8)], Call(Name('join', Load(), lineno=208, col_offset=15), [Name('path', Load(), lineno=208, col_offset=20), Name('c', Load(), lineno=208, col_offset=26)], [], None, None, lineno=208, col_offset=15), lineno=208, col_offset=8), TryExcept([Assign([Name('path', Store(), lineno=210, col_offset=12)], Call(Attribute(Subscript(Call(Attribute(Attribute(Name('Carbon', Load(), lineno=210, col_offset=19), 'File', Load(), lineno=210, col_offset=19), 'FSResolveAliasFile', Load(), lineno=210, col_offset=19), [Name('path', Load(), lineno=210, col_offset=50), Num(1, lineno=210, col_offset=56)], [], None, None, lineno=210, col_offset=19), Index(Num(0, lineno=210, col_offset=59)), Load(), lineno=210, col_offset=19), 'as_pathname', Load(), lineno=210, col_offset=19), [], [], None, None, lineno=210, col_offset=19), lineno=210, col_offset=12)], [ExceptHandler(Attribute(Attribute(Name('Carbon', Load(), lineno=211, col_offset=15), 'File', Load(), lineno=211, col_offset=15), 'Error', Load(), lineno=211, col_offset=15), None, [Pass( lineno=212, col_offset=12)], lineno=211, col_offset=8)], [], lineno=209, col_offset=8)], [], lineno=207, col_offset=4), Return(Name('path', Load(), lineno=213, col_offset=11), lineno=213, col_offset=4)], [], lineno=197, col_offset=0), Assign([Name('supports_unicode_filenames', Store(), lineno=215, col_offset=0)], Name('True', Load(), lineno=215, col_offset=29), lineno=215, col_offset=0)])
