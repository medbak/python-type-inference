Module([Import([alias('imp', None)], lineno=4, col_offset=0), Import([alias('sys', None)], lineno=5, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=7, col_offset=0), ImportFrom('test_doctest', [alias('_FakeInput', None)], 0, lineno=9, col_offset=0), ClassDef('PdbTestInput', [Name('object', Load(), lineno=12, col_offset=19)], [Expr(Str('Context manager that makes testing Pdb in doctests easier.', lineno=13, col_offset=4), lineno=13, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=15, col_offset=17), Name('input', Param(), lineno=15, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=16, col_offset=8), 'input', Store(), lineno=16, col_offset=8)], Name('input', Load(), lineno=16, col_offset=21), lineno=16, col_offset=8)], [], lineno=15, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=18, col_offset=18)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=19, col_offset=8), 'real_stdin', Store(), lineno=19, col_offset=8)], Attribute(Name('sys', Load(), lineno=19, col_offset=26), 'stdin', Load(), lineno=19, col_offset=26), lineno=19, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=20, col_offset=8), 'stdin', Store(), lineno=20, col_offset=8)], Call(Name('_FakeInput', Load(), lineno=20, col_offset=20), [Attribute(Name('self', Load(), lineno=20, col_offset=31), 'input', Load(), lineno=20, col_offset=31)], [], None, None, lineno=20, col_offset=20), lineno=20, col_offset=8)], [], lineno=18, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=22, col_offset=17)], 'exc', None, []), [Assign([Attribute(Name('sys', Load(), lineno=23, col_offset=8), 'stdin', Store(), lineno=23, col_offset=8)], Attribute(Name('self', Load(), lineno=23, col_offset=20), 'real_stdin', Load(), lineno=23, col_offset=20), lineno=23, col_offset=8)], [], lineno=22, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('write', arguments([Name('x', Param(), lineno=26, col_offset=10)], None, None, []), [Print(None, [Name('x', Load(), lineno=27, col_offset=10)], True, lineno=27, col_offset=4)], [], lineno=26, col_offset=0), FunctionDef('test_pdb_displayhook', arguments([], None, None, []), [Expr(Str("This tests the custom displayhook for pdb.\n\n    >>> def test_function(foo, bar):\n    ...     import pdb; pdb.Pdb().set_trace()\n    ...     pass\n\n    >>> with PdbTestInput([\n    ...     'foo',\n    ...     'bar',\n    ...     'for i in range(5): write(i)',\n    ...     'continue',\n    ... ]):\n    ...     test_function(1, None)\n    > <doctest test.test_pdb.test_pdb_displayhook[0]>(3)test_function()\n    -> pass\n    (Pdb) foo\n    1\n    (Pdb) bar\n    (Pdb) for i in range(5): write(i)\n    0\n    1\n    2\n    3\n    4\n    (Pdb) continue\n    ", lineno=55, col_offset=-1), lineno=55, col_offset=-1)], [], lineno=29, col_offset=0), FunctionDef('test_pdb_skip_modules', arguments([], None, None, []), [Expr(Str("This illustrates the simple case of module skipping.\n\n    >>> def skip_module():\n    ...     import string\n    ...     import pdb; pdb.Pdb(skip=['string*']).set_trace()\n    ...     string.lower('FOO')\n\n    >>> with PdbTestInput([\n    ...     'step',\n    ...     'continue',\n    ... ]):\n    ...     skip_module()\n    > <doctest test.test_pdb.test_pdb_skip_modules[0]>(4)skip_module()\n    -> string.lower('FOO')\n    (Pdb) step\n    --Return--\n    > <doctest test.test_pdb.test_pdb_skip_modules[0]>(4)skip_module()->None\n    -> string.lower('FOO')\n    (Pdb) continue\n    ", lineno=78, col_offset=-1), lineno=78, col_offset=-1)], [], lineno=58, col_offset=0), Assign([Name('mod', Store(), lineno=82, col_offset=0)], Call(Attribute(Name('imp', Load(), lineno=82, col_offset=6), 'new_module', Load(), lineno=82, col_offset=6), [Str('module_to_skip', lineno=82, col_offset=21)], [], None, None, lineno=82, col_offset=6), lineno=82, col_offset=0), Exec(Str('def foo_pony(callback): x = 1; callback(); return None', lineno=83, col_offset=5), Attribute(Name('mod', Load(), lineno=83, col_offset=65), '__dict__', Load(), lineno=83, col_offset=65), None, lineno=83, col_offset=0), FunctionDef('test_pdb_skip_modules_with_callback', arguments([], None, None, []), [Expr(Str('This illustrates skipping of modules that call into other code.\n\n    >>> def skip_module():\n    ...     def callback():\n    ...         return None\n    ...     import pdb; pdb.Pdb(skip=[\'module_to_skip*\']).set_trace()\n    ...     mod.foo_pony(callback)\n\n    >>> with PdbTestInput([\n    ...     \'step\',\n    ...     \'step\',\n    ...     \'step\',\n    ...     \'step\',\n    ...     \'step\',\n    ...     \'continue\',\n    ... ]):\n    ...     skip_module()\n    ...     pass  # provides something to "step" to\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[0]>(5)skip_module()\n    -> mod.foo_pony(callback)\n    (Pdb) step\n    --Call--\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[0]>(2)callback()\n    -> def callback():\n    (Pdb) step\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[0]>(3)callback()\n    -> return None\n    (Pdb) step\n    --Return--\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[0]>(3)callback()->None\n    -> return None\n    (Pdb) step\n    --Return--\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[0]>(5)skip_module()->None\n    -> mod.foo_pony(callback)\n    (Pdb) step\n    > <doctest test.test_pdb.test_pdb_skip_modules_with_callback[1]>(10)<module>()\n    -> pass  # provides something to "step" to\n    (Pdb) continue\n    ', lineno=126, col_offset=-1), lineno=126, col_offset=-1)], [], lineno=86, col_offset=0), FunctionDef('test_pdb_continue_in_bottomframe', arguments([], None, None, []), [Expr(Str('Test that "continue" and "next" work properly in bottom frame (issue #5294).\n\n    >>> def test_function():\n    ...     import pdb, sys; inst = pdb.Pdb()\n    ...     inst.set_trace()\n    ...     inst.botframe = sys._getframe()  # hackery to get the right botframe\n    ...     print(1)\n    ...     print(2)\n    ...     print(3)\n    ...     print(4)\n\n    >>> with PdbTestInput([\n    ...     \'next\',\n    ...     \'break 7\',\n    ...     \'continue\',\n    ...     \'next\',\n    ...     \'continue\',\n    ...     \'continue\',\n    ... ]):\n    ...    test_function()\n    > <doctest test.test_pdb.test_pdb_continue_in_bottomframe[0]>(4)test_function()\n    -> inst.botframe = sys._getframe()  # hackery to get the right botframe\n    (Pdb) next\n    > <doctest test.test_pdb.test_pdb_continue_in_bottomframe[0]>(5)test_function()\n    -> print(1)\n    (Pdb) break 7\n    Breakpoint 1 at <doctest test.test_pdb.test_pdb_continue_in_bottomframe[0]>:7\n    (Pdb) continue\n    1\n    2\n    > <doctest test.test_pdb.test_pdb_continue_in_bottomframe[0]>(7)test_function()\n    -> print(3)\n    (Pdb) next\n    3\n    > <doctest test.test_pdb.test_pdb_continue_in_bottomframe[0]>(8)test_function()\n    -> print(4)\n    (Pdb) continue\n    4\n    ', lineno=168, col_offset=-1), lineno=168, col_offset=-1)], [], lineno=129, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [ImportFrom('test', [alias('test_pdb', None)], 0, lineno=172, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=173, col_offset=4), 'run_doctest', Load(), lineno=173, col_offset=4), [Name('test_pdb', Load(), lineno=173, col_offset=29)], [keyword('verbosity', Name('True', Load(), lineno=173, col_offset=49))], None, None, lineno=173, col_offset=4), lineno=173, col_offset=4)], [], lineno=171, col_offset=0), If(Compare(Name('__name__', Load(), lineno=176, col_offset=3), [Eq()], [Str('__main__', lineno=176, col_offset=15)], lineno=176, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=177, col_offset=4), [], [], None, None, lineno=177, col_offset=4), lineno=177, col_offset=4)], [], lineno=176, col_offset=0)])
