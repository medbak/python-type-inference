Module([ImportFrom('macsupport', [alias('*', None)], 0, lineno=6, col_offset=0), Assign([Name('DialogPtr', Store(), lineno=10, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=10, col_offset=12), [Str('DialogPtr', lineno=10, col_offset=30), Str('DlgObj', lineno=10, col_offset=43)], [], None, None, lineno=10, col_offset=12), lineno=10, col_offset=0), Assign([Name('DialogRef', Store(), lineno=11, col_offset=0)], Name('DialogPtr', Load(), lineno=11, col_offset=12), lineno=11, col_offset=0), Assign([Name('OptHandle', Store(), lineno=15, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=15, col_offset=12), [Str('Handle', lineno=15, col_offset=30), Str('OptResObj', lineno=15, col_offset=40)], [], None, None, lineno=15, col_offset=12), lineno=15, col_offset=0), Assign([Name('ModalFilterProcPtr', Store(), lineno=17, col_offset=0)], Call(Name('InputOnlyType', Load(), lineno=17, col_offset=21), [Str('PyObject*', lineno=17, col_offset=35), Str('O', lineno=17, col_offset=48)], [], None, None, lineno=17, col_offset=21), lineno=17, col_offset=0), Assign([Attribute(Name('ModalFilterProcPtr', Load(), lineno=18, col_offset=0), 'passInput', Store(), lineno=18, col_offset=0)], Lambda(arguments([Name('name', Param(), lineno=18, col_offset=38)], None, None, []), BinOp(Str('Dlg_PassFilterProc(%s)', lineno=18, col_offset=44), Mod(), Name('name', Load(), lineno=18, col_offset=71), lineno=18, col_offset=44), lineno=18, col_offset=31), lineno=18, col_offset=0), Assign([Name('ModalFilterUPP', Store(), lineno=19, col_offset=0)], Name('ModalFilterProcPtr', Load(), lineno=19, col_offset=17), lineno=19, col_offset=0), Assign([Name('RgnHandle', Store(), lineno=21, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=21, col_offset=12), [Str('RgnHandle', lineno=21, col_offset=30), Str('ResObj', lineno=21, col_offset=43)], [], None, None, lineno=21, col_offset=12), lineno=21, col_offset=0), Assign([Name('TEHandle', Store(), lineno=22, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=22, col_offset=11), [Str('TEHandle', lineno=22, col_offset=29), Str('ResObj', lineno=22, col_offset=41)], [], None, None, lineno=22, col_offset=11), lineno=22, col_offset=0), Assign([Name('CGrafPtr', Store(), lineno=23, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=23, col_offset=11), [Str('CGrafPtr', lineno=23, col_offset=29), Str('GrafObj', lineno=23, col_offset=41)], [], None, None, lineno=23, col_offset=11), lineno=23, col_offset=0), Assign([Name('DITLMethod', Store(), lineno=25, col_offset=0)], Call(Name('Type', Load(), lineno=25, col_offset=13), [Str('DITLMethod', lineno=25, col_offset=18), Str('h', lineno=25, col_offset=32)], [], None, None, lineno=25, col_offset=13), lineno=25, col_offset=0), Assign([Name('DialogItemIndex', Store(), lineno=26, col_offset=0)], Call(Name('Type', Load(), lineno=26, col_offset=18), [Str('DialogItemIndex', lineno=26, col_offset=23), Str('h', lineno=26, col_offset=42)], [], None, None, lineno=26, col_offset=18), lineno=26, col_offset=0), Assign([Name('DialogItemType', Store(), lineno=27, col_offset=0)], Call(Name('Type', Load(), lineno=27, col_offset=17), [Str('DialogItemType', lineno=27, col_offset=22), Str('h', lineno=27, col_offset=40)], [], None, None, lineno=27, col_offset=17), lineno=27, col_offset=0), Assign([Name('DialogItemIndexZeroBased', Store(), lineno=28, col_offset=0)], Call(Name('Type', Load(), lineno=28, col_offset=27), [Str('DialogItemIndexZeroBased', lineno=28, col_offset=32), Str('h', lineno=28, col_offset=60)], [], None, None, lineno=28, col_offset=27), lineno=28, col_offset=0), Assign([Name('AlertType', Store(), lineno=29, col_offset=0)], Call(Name('Type', Load(), lineno=29, col_offset=12), [Str('AlertType', lineno=29, col_offset=17), Str('h', lineno=29, col_offset=30)], [], None, None, lineno=29, col_offset=12), lineno=29, col_offset=0), Assign([Name('StringPtr', Store(), lineno=30, col_offset=0)], Name('Str255', Load(), lineno=30, col_offset=12), lineno=30, col_offset=0), Assign([Name('EventMask', Store(), lineno=31, col_offset=0)], Call(Name('Type', Load(), lineno=31, col_offset=12), [Str('EventMask', lineno=31, col_offset=17), Str('H', lineno=31, col_offset=30)], [], None, None, lineno=31, col_offset=12), lineno=31, col_offset=0), Assign([Name('includestuff', Store(), lineno=33, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=33, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\n#ifdef USE_TOOLBOX_OBJECT_GLUE\nextern PyObject *_DlgObj_New(DialogRef);\nextern PyObject *_DlgObj_WhichDialog(DialogRef);\nextern int _DlgObj_Convert(PyObject *, DialogRef *);\n\n#define DlgObj_New _DlgObj_New\n#define DlgObj_WhichDialog _DlgObj_WhichDialog\n#define DlgObj_Convert _DlgObj_Convert\n#endif\n\n/* XXX Shouldn\'t this be a stack? */\nstatic PyObject *Dlg_FilterProc_callback = NULL;\n\nstatic pascal Boolean Dlg_UnivFilterProc(DialogPtr dialog,\n                                         EventRecord *event,\n                                         short *itemHit)\n{\n        Boolean rv;\n        PyObject *args, *res;\n        PyObject *callback = Dlg_FilterProc_callback;\n        if (callback == NULL)\n                return 0; /* Default behavior */\n        Dlg_FilterProc_callback = NULL; /* We\'ll restore it when call successful */\n        args = Py_BuildValue("O&O&", DlgObj_WhichDialog, dialog, PyMac_BuildEventRecord, event);\n        if (args == NULL)\n                res = NULL;\n        else {\n                res = PyEval_CallObject(callback, args);\n                Py_DECREF(args);\n        }\n        if (res == NULL) {\n                PySys_WriteStderr("Exception in Dialog Filter\\n");\n                PyErr_Print();\n                *itemHit = -1; /* Fake return item */\n                return 1; /* We handled it */\n        }\n        else {\n                Dlg_FilterProc_callback = callback;\n                if (PyInt_Check(res)) {\n                        *itemHit = PyInt_AsLong(res);\n                        rv = 1;\n                }\n                else\n                        rv = PyObject_IsTrue(res);\n        }\n        Py_DECREF(res);\n        return rv;\n}\n\nstatic ModalFilterUPP\nDlg_PassFilterProc(PyObject *callback)\n{\n        PyObject *tmp = Dlg_FilterProc_callback;\n        static ModalFilterUPP UnivFilterUpp = NULL;\n\n        Dlg_FilterProc_callback = NULL;\n        if (callback == Py_None) {\n                Py_XDECREF(tmp);\n                return NULL;\n        }\n        Py_INCREF(callback);\n        Dlg_FilterProc_callback = callback;\n        Py_XDECREF(tmp);\n        if ( UnivFilterUpp == NULL )\n                UnivFilterUpp = NewModalFilterUPP(&Dlg_UnivFilterProc);\n        return UnivFilterUpp;\n}\n\nstatic PyObject *Dlg_UserItemProc_callback = NULL;\n\nstatic pascal void Dlg_UnivUserItemProc(DialogPtr dialog,\n                                         short item)\n{\n        PyObject *args, *res;\n\n        if (Dlg_UserItemProc_callback == NULL)\n                return; /* Default behavior */\n        Dlg_FilterProc_callback = NULL; /* We\'ll restore it when call successful */\n        args = Py_BuildValue("O&h", DlgObj_WhichDialog, dialog, item);\n        if (args == NULL)\n                res = NULL;\n        else {\n                res = PyEval_CallObject(Dlg_UserItemProc_callback, args);\n                Py_DECREF(args);\n        }\n        if (res == NULL) {\n                PySys_WriteStderr("Exception in Dialog UserItem proc\\n");\n                PyErr_Print();\n        }\n        Py_XDECREF(res);\n        return;\n}\n\n#if 0\n/*\n** Treating DialogObjects as WindowObjects is (I think) illegal under Carbon.\n** However, as they are still identical under MacOS9 Carbon this is a problem, even\n** if we neatly call GetDialogWindow() at the right places: there\'s one refcon field\n** and it points to the DialogObject, so WinObj_WhichWindow will smartly return the\n** dialog object, and therefore we still don\'t have a WindowObject.\n** I\'ll leave the chaining code in place for now, with this comment to warn the\n** unsuspecting victims (i.e. me, probably, in a few weeks:-)\n*/\nextern PyMethodChain WinObj_chain;\n#endif\n', lineno=141, col_offset=-1), lineno=33, col_offset=15), lineno=33, col_offset=0), Assign([Name('finalstuff', Store(), lineno=143, col_offset=0)], BinOp(Name('finalstuff', Load(), lineno=143, col_offset=13), Add(), Str("\n/* Return the WindowPtr corresponding to a DialogObject */\n#if 0\nWindowPtr\nDlgObj_ConvertToWindow(PyObject *self)\n{\n        if ( DlgObj_Check(self) )\n                return GetDialogWindow(((DialogObject *)self)->ob_itself);\n        return NULL;\n}\n#endif\n/* Return the object corresponding to the dialog, or None */\n\nPyObject *\nDlgObj_WhichDialog(DialogPtr d)\n{\n        PyObject *it;\n\n        if (d == NULL) {\n                it = Py_None;\n                Py_INCREF(it);\n        } else {\n                WindowPtr w = GetDialogWindow(d);\n\n                it = (PyObject *) GetWRefCon(w);\n                if (it == NULL || ((DialogObject *)it)->ob_itself != d || !DlgObj_Check(it)) {\n#if 0\n                        /* Should do this, but we don't have an ob_freeit for dialogs yet. */\n                        it = WinObj_New(w);\n                        ((WindowObject *)it)->ob_freeit = NULL;\n#else\n                        it = Py_None;\n                        Py_INCREF(it);\n#endif\n                } else {\n                        Py_INCREF(it);\n                }\n        }\n        return it;\n}\n", lineno=183, col_offset=-1), lineno=143, col_offset=13), lineno=143, col_offset=0), Assign([Name('initstuff', Store(), lineno=185, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=185, col_offset=12), Add(), Str('\n        PyMac_INIT_TOOLBOX_OBJECT_NEW(DialogPtr, DlgObj_New);\n        PyMac_INIT_TOOLBOX_OBJECT_NEW(DialogPtr, DlgObj_WhichDialog);\n        PyMac_INIT_TOOLBOX_OBJECT_CONVERT(DialogPtr, DlgObj_Convert);\n', lineno=189, col_offset=-1), lineno=185, col_offset=12), lineno=185, col_offset=0), ClassDef('MyObjectDefinition', [Name('PEP253Mixin', Load(), lineno=193, col_offset=25), Name('GlobalObjectDefinition', Load(), lineno=193, col_offset=38)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=194, col_offset=17), Name('name', Param(), lineno=194, col_offset=23), Name('prefix', Param(), lineno=194, col_offset=29), Name('itselftype', Param(), lineno=194, col_offset=44)], None, None, [Name('None', Load(), lineno=194, col_offset=38), Name('None', Load(), lineno=194, col_offset=57)]), [Expr(Call(Attribute(Name('GlobalObjectDefinition', Load(), lineno=195, col_offset=8), '__init__', Load(), lineno=195, col_offset=8), [Name('self', Load(), lineno=195, col_offset=40), Name('name', Load(), lineno=195, col_offset=46), Name('prefix', Load(), lineno=195, col_offset=52), Name('itselftype', Load(), lineno=195, col_offset=60)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8)], [], lineno=194, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=200, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('GlobalObjectDefinition', Load(), lineno=201, col_offset=8), 'outputInitStructMembers', Load(), lineno=201, col_offset=8), [Name('self', Load(), lineno=201, col_offset=55)], [], None, None, lineno=201, col_offset=8), lineno=201, col_offset=8), Expr(Call(Name('Output', Load(), lineno=202, col_offset=8), [Str('SetWRefCon(GetDialogWindow(itself), (long)it);', lineno=202, col_offset=15)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8)], [], lineno=200, col_offset=4), FunctionDef('outputCheckNewArg', arguments([Name('self', Param(), lineno=204, col_offset=26)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=205, col_offset=8), [Str('if (itself == NULL) { Py_INCREF(Py_None); return Py_None; }', lineno=205, col_offset=15)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8)], [], lineno=204, col_offset=4), FunctionDef('outputCheckConvertArg', arguments([Name('self', Param(), lineno=207, col_offset=30)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=208, col_offset=8), [Str('if (v == Py_None) { *p_itself = NULL; return 1; }', lineno=208, col_offset=15)], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=8), Expr(Call(Name('Output', Load(), lineno=209, col_offset=8), [Str('if (PyInt_Check(v)) { *p_itself = (DialogPtr)PyInt_AsLong(v);', lineno=209, col_offset=15)], [], None, None, lineno=209, col_offset=8), lineno=209, col_offset=8), Expr(Call(Name('Output', Load(), lineno=210, col_offset=8), [Str('                      return 1; }', lineno=210, col_offset=15)], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8)], [], lineno=207, col_offset=4), FunctionDef('outputCompare', arguments([Name('self', Param(), lineno=212, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=213, col_offset=8), [], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8), Expr(Call(Name('Output', Load(), lineno=214, col_offset=8), [Str('static int %s_compare(%s *self, %s *other)', lineno=214, col_offset=15), Attribute(Name('self', Load(), lineno=214, col_offset=61), 'prefix', Load(), lineno=214, col_offset=61), Attribute(Name('self', Load(), lineno=214, col_offset=74), 'objecttype', Load(), lineno=214, col_offset=74), Attribute(Name('self', Load(), lineno=214, col_offset=91), 'objecttype', Load(), lineno=214, col_offset=91)], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=215, col_offset=8), [], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8), Expr(Call(Name('Output', Load(), lineno=216, col_offset=8), [Str('if ( self->ob_itself > other->ob_itself ) return 1;', lineno=216, col_offset=15)], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8), Expr(Call(Name('Output', Load(), lineno=217, col_offset=8), [Str('if ( self->ob_itself < other->ob_itself ) return -1;', lineno=217, col_offset=15)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Expr(Call(Name('Output', Load(), lineno=218, col_offset=8), [Str('return 0;', lineno=218, col_offset=15)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=219, col_offset=8), [], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8)], [], lineno=212, col_offset=4), FunctionDef('outputHash', arguments([Name('self', Param(), lineno=221, col_offset=19)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=222, col_offset=8), [], [], None, None, lineno=222, col_offset=8), lineno=222, col_offset=8), Expr(Call(Name('Output', Load(), lineno=223, col_offset=8), [Str('static int %s_hash(%s *self)', lineno=223, col_offset=15), Attribute(Name('self', Load(), lineno=223, col_offset=47), 'prefix', Load(), lineno=223, col_offset=47), Attribute(Name('self', Load(), lineno=223, col_offset=60), 'objecttype', Load(), lineno=223, col_offset=60)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=224, col_offset=8), [], [], None, None, lineno=224, col_offset=8), lineno=224, col_offset=8), Expr(Call(Name('Output', Load(), lineno=225, col_offset=8), [Str('return (int)self->ob_itself;', lineno=225, col_offset=15)], [], None, None, lineno=225, col_offset=8), lineno=225, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=226, col_offset=8), [], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('outputFreeIt', arguments([Name('self', Param(), lineno=228, col_offset=21), Name('itselfname', Param(), lineno=228, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=229, col_offset=8), [Str('DisposeDialog(%s);', lineno=229, col_offset=15), Name('itselfname', Load(), lineno=229, col_offset=37)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8)], [], lineno=228, col_offset=4)], [], lineno=193, col_offset=0), Assign([Name('module', Store(), lineno=232, col_offset=0)], Call(Name('MacModule', Load(), lineno=232, col_offset=9), [Str('_Dlg', lineno=232, col_offset=19), Str('Dlg', lineno=232, col_offset=27), Name('includestuff', Load(), lineno=232, col_offset=34), Name('finalstuff', Load(), lineno=232, col_offset=48), Name('initstuff', Load(), lineno=232, col_offset=60)], [], None, None, lineno=232, col_offset=9), lineno=232, col_offset=0), Assign([Name('object', Store(), lineno=233, col_offset=0)], Call(Name('MyObjectDefinition', Load(), lineno=233, col_offset=9), [Str('Dialog', lineno=233, col_offset=28), Str('DlgObj', lineno=233, col_offset=38), Str('DialogPtr', lineno=233, col_offset=48)], [], None, None, lineno=233, col_offset=9), lineno=233, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=234, col_offset=0), 'addobject', Load(), lineno=234, col_offset=0), [Name('object', Load(), lineno=234, col_offset=17)], [], None, None, lineno=234, col_offset=0), lineno=234, col_offset=0), Assign([Name('Function', Store(), lineno=237, col_offset=0)], Name('OSErrWeakLinkFunctionGenerator', Load(), lineno=237, col_offset=11), lineno=237, col_offset=0), Assign([Name('Method', Store(), lineno=238, col_offset=0)], Name('OSErrWeakLinkMethodGenerator', Load(), lineno=238, col_offset=9), lineno=238, col_offset=0), Assign([Name('functions', Store(), lineno=241, col_offset=0)], List([], Load(), lineno=241, col_offset=12), lineno=241, col_offset=0), Assign([Name('methods', Store(), lineno=242, col_offset=0)], List([], Load(), lineno=242, col_offset=10), lineno=242, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=243, col_offset=0), [Str('dlggen.py', lineno=243, col_offset=9)], [], None, None, lineno=243, col_offset=0), lineno=243, col_offset=0), For(Name('f', Store(), lineno=246, col_offset=4), Name('functions', Load(), lineno=246, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=246, col_offset=20), 'add', Load(), lineno=246, col_offset=20), [Name('f', Load(), lineno=246, col_offset=31)], [], None, None, lineno=246, col_offset=20), lineno=246, col_offset=20)], [], lineno=246, col_offset=0), For(Name('f', Store(), lineno=247, col_offset=4), Name('methods', Load(), lineno=247, col_offset=9), [Expr(Call(Attribute(Name('object', Load(), lineno=247, col_offset=18), 'add', Load(), lineno=247, col_offset=18), [Name('f', Load(), lineno=247, col_offset=29)], [], None, None, lineno=247, col_offset=18), lineno=247, col_offset=18)], [], lineno=247, col_offset=0), Assign([Name('setuseritembody', Store(), lineno=249, col_offset=0)], Str('\n        PyObject *new = NULL;\n\n\n        if (!PyArg_ParseTuple(_args, "|O", &new))\n                return NULL;\n\n        if (Dlg_UserItemProc_callback && new && new != Py_None) {\n                PyErr_SetString(Dlg_Error, "Another UserItemProc is already installed");\n                return NULL;\n        }\n\n        if (new == NULL || new == Py_None) {\n                new = NULL;\n                _res = Py_None;\n                Py_INCREF(Py_None);\n        } else {\n                Py_INCREF(new);\n                _res = Py_BuildValue("O&", ResObj_New, (Handle)NewUserItemUPP(Dlg_UnivUserItemProc));\n        }\n\n        Dlg_UserItemProc_callback = new;\n        return _res;\n', lineno=272, col_offset=-1), lineno=249, col_offset=0), Assign([Name('f', Store(), lineno=273, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=273, col_offset=4), [Str('SetUserItemHandler', lineno=273, col_offset=20), Name('setuseritembody', Load(), lineno=273, col_offset=42)], [], None, None, lineno=273, col_offset=4), lineno=273, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=274, col_offset=0), 'add', Load(), lineno=274, col_offset=0), [Name('f', Load(), lineno=274, col_offset=11)], [], None, None, lineno=274, col_offset=0), lineno=274, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=277, col_offset=0), [Str('_Dlgmodule.c', lineno=277, col_offset=18)], [], None, None, lineno=277, col_offset=0), lineno=277, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=278, col_offset=0), 'generate', Load(), lineno=278, col_offset=0), [], [], None, None, lineno=278, col_offset=0), lineno=278, col_offset=0)])
