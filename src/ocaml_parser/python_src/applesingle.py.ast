Module([Expr(Str('Routines to decode AppleSingle files\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=4, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=5, col_offset=0), [Str('In 3.x, the applesingle module is removed.', lineno=5, col_offset=9)], [keyword('stacklevel', Num(2, lineno=5, col_offset=66))], None, None, lineno=5, col_offset=0), lineno=5, col_offset=0), Import([alias('struct', None)], lineno=7, col_offset=0), Import([alias('sys', None)], lineno=8, col_offset=0), TryExcept([Import([alias('MacOS', None)], lineno=10, col_offset=4), Import([alias('Carbon.File', None)], lineno=11, col_offset=4)], [ExceptHandler(None, None, [ClassDef('MacOS', [], [FunctionDef('openrf', arguments([Name('path', Param(), lineno=14, col_offset=19), Name('mode', Param(), lineno=14, col_offset=25)], None, None, []), [Return(Call(Name('open', Load(), lineno=15, col_offset=19), [BinOp(Name('path', Load(), lineno=15, col_offset=24), Add(), Str('.rsrc', lineno=15, col_offset=31), lineno=15, col_offset=24), Name('mode', Load(), lineno=15, col_offset=40)], [], None, None, lineno=15, col_offset=19), lineno=15, col_offset=12)], [], lineno=14, col_offset=8), Assign([Name('openrf', Store(), lineno=16, col_offset=8)], Call(Name('classmethod', Load(), lineno=16, col_offset=17), [Name('openrf', Load(), lineno=16, col_offset=29)], [], None, None, lineno=16, col_offset=17), lineno=16, col_offset=8)], [], lineno=13, col_offset=4), ClassDef('Carbon', [], [ClassDef('File', [], [ClassDef('FSSpec', [], [Pass( lineno=20, col_offset=16)], [], lineno=19, col_offset=12), ClassDef('FSRef', [], [Pass( lineno=22, col_offset=16)], [], lineno=21, col_offset=12), ClassDef('Alias', [], [Pass( lineno=24, col_offset=16)], [], lineno=23, col_offset=12)], [], lineno=18, col_offset=8)], [], lineno=17, col_offset=4)], lineno=12, col_offset=0)], [], lineno=9, col_offset=0), ClassDef('Error', [Name('ValueError', Load(), lineno=28, col_offset=12)], [Pass( lineno=29, col_offset=4)], [], lineno=28, col_offset=0), Assign([Name('AS_HEADER_FORMAT', Store(), lineno=32, col_offset=0)], Str('>LL16sh', lineno=32, col_offset=17), lineno=32, col_offset=0), Assign([Name('AS_HEADER_LENGTH', Store(), lineno=33, col_offset=0)], Num(26, lineno=33, col_offset=17), lineno=33, col_offset=0), Assign([Name('AS_MAGIC', Store(), lineno=35, col_offset=0)], Num(333312, lineno=35, col_offset=9), lineno=35, col_offset=0), Assign([Name('AS_VERSION', Store(), lineno=36, col_offset=0)], Num(131072, lineno=36, col_offset=11), lineno=36, col_offset=0), Assign([Name('AS_ENTRY_FORMAT', Store(), lineno=39, col_offset=0)], Str('>lll', lineno=39, col_offset=16), lineno=39, col_offset=0), Assign([Name('AS_ENTRY_LENGTH', Store(), lineno=40, col_offset=0)], Num(12, lineno=40, col_offset=16), lineno=40, col_offset=0), Assign([Name('AS_DATAFORK', Store(), lineno=43, col_offset=0)], Num(1, lineno=43, col_offset=12), lineno=43, col_offset=0), Assign([Name('AS_RESOURCEFORK', Store(), lineno=44, col_offset=0)], Num(2, lineno=44, col_offset=16), lineno=44, col_offset=0), Assign([Name('AS_IGNORE', Store(), lineno=45, col_offset=0)], Tuple([Num(3, lineno=45, col_offset=11), Num(4, lineno=45, col_offset=13), Num(5, lineno=45, col_offset=15), Num(6, lineno=45, col_offset=17), Num(8, lineno=45, col_offset=19), Num(9, lineno=45, col_offset=21), Num(10, lineno=45, col_offset=23), Num(11, lineno=45, col_offset=26), Num(12, lineno=45, col_offset=29), Num(13, lineno=45, col_offset=32), Num(14, lineno=45, col_offset=35), Num(15, lineno=45, col_offset=38)], Load(), lineno=45, col_offset=11), lineno=45, col_offset=0), ClassDef('AppleSingle', [Name('object', Load(), lineno=47, col_offset=18)], [Assign([Name('datafork', Store(), lineno=48, col_offset=4)], Name('None', Load(), lineno=48, col_offset=15), lineno=48, col_offset=4), Assign([Name('resourcefork', Store(), lineno=49, col_offset=4)], Name('None', Load(), lineno=49, col_offset=19), lineno=49, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=51, col_offset=17), Name('fileobj', Param(), lineno=51, col_offset=23), Name('verbose', Param(), lineno=51, col_offset=32)], None, None, [Name('False', Load(), lineno=51, col_offset=40)]), [Assign([Name('header', Store(), lineno=52, col_offset=8)], Call(Attribute(Name('fileobj', Load(), lineno=52, col_offset=17), 'read', Load(), lineno=52, col_offset=17), [Name('AS_HEADER_LENGTH', Load(), lineno=52, col_offset=30)], [], None, None, lineno=52, col_offset=17), lineno=52, col_offset=8), TryExcept([Assign([Tuple([Name('magic', Store(), lineno=54, col_offset=12), Name('version', Store(), lineno=54, col_offset=19), Name('ig', Store(), lineno=54, col_offset=28), Name('nentry', Store(), lineno=54, col_offset=32)], Store(), lineno=54, col_offset=12)], Call(Attribute(Name('struct', Load(), lineno=54, col_offset=41), 'unpack', Load(), lineno=54, col_offset=41), [Name('AS_HEADER_FORMAT', Load(), lineno=54, col_offset=55), Name('header', Load(), lineno=54, col_offset=73)], [], None, None, lineno=54, col_offset=41), lineno=54, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=55, col_offset=15), Name('arg', Store(), lineno=55, col_offset=27), [Raise(Name('Error', Load(), lineno=56, col_offset=18), BinOp(Str('Unpack header error: %s', lineno=56, col_offset=25), Mod(), Tuple([Name('arg', Load(), lineno=56, col_offset=54)], Load(), lineno=56, col_offset=54), lineno=56, col_offset=25), None, lineno=56, col_offset=12)], lineno=55, col_offset=8)], [], lineno=53, col_offset=8), If(Name('verbose', Load(), lineno=57, col_offset=11), [Print(None, [BinOp(Str('Magic:   0x%8.8x', lineno=58, col_offset=18), Mod(), Tuple([Name('magic', Load(), lineno=58, col_offset=40)], Load(), lineno=58, col_offset=40), lineno=58, col_offset=18)], True, lineno=58, col_offset=12), Print(None, [BinOp(Str('Version: 0x%8.8x', lineno=59, col_offset=18), Mod(), Tuple([Name('version', Load(), lineno=59, col_offset=40)], Load(), lineno=59, col_offset=40), lineno=59, col_offset=18)], True, lineno=59, col_offset=12), Print(None, [BinOp(Str('Entries: %d', lineno=60, col_offset=18), Mod(), Tuple([Name('nentry', Load(), lineno=60, col_offset=35)], Load(), lineno=60, col_offset=35), lineno=60, col_offset=18)], True, lineno=60, col_offset=12)], [], lineno=57, col_offset=8), If(Compare(Name('magic', Load(), lineno=61, col_offset=11), [NotEq()], [Name('AS_MAGIC', Load(), lineno=61, col_offset=20)], lineno=61, col_offset=11), [Raise(Name('Error', Load(), lineno=62, col_offset=18), BinOp(Str('Unknown AppleSingle magic number 0x%8.8x', lineno=62, col_offset=25), Mod(), Tuple([Name('magic', Load(), lineno=62, col_offset=71)], Load(), lineno=62, col_offset=71), lineno=62, col_offset=25), None, lineno=62, col_offset=12)], [], lineno=61, col_offset=8), If(Compare(Name('version', Load(), lineno=63, col_offset=11), [NotEq()], [Name('AS_VERSION', Load(), lineno=63, col_offset=22)], lineno=63, col_offset=11), [Raise(Name('Error', Load(), lineno=64, col_offset=18), BinOp(Str('Unknown AppleSingle version number 0x%8.8x', lineno=64, col_offset=25), Mod(), Tuple([Name('version', Load(), lineno=64, col_offset=73)], Load(), lineno=64, col_offset=73), lineno=64, col_offset=25), None, lineno=64, col_offset=12)], [], lineno=63, col_offset=8), If(Compare(Name('nentry', Load(), lineno=65, col_offset=11), [LtE()], [Num(0, lineno=65, col_offset=21)], lineno=65, col_offset=11), [Raise(Name('Error', Load(), lineno=66, col_offset=18), Str('AppleSingle file contains no forks', lineno=66, col_offset=25), None, lineno=66, col_offset=12)], [], lineno=65, col_offset=8), Assign([Name('headers', Store(), lineno=67, col_offset=8)], ListComp(Call(Attribute(Name('fileobj', Load(), lineno=67, col_offset=19), 'read', Load(), lineno=67, col_offset=19), [Name('AS_ENTRY_LENGTH', Load(), lineno=67, col_offset=32)], [], None, None, lineno=67, col_offset=19), [comprehension(Name('i', Store(), lineno=67, col_offset=53), Call(Name('xrange', Load(), lineno=67, col_offset=58), [Name('nentry', Load(), lineno=67, col_offset=65)], [], None, None, lineno=67, col_offset=58), [])], lineno=67, col_offset=19), lineno=67, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=68, col_offset=8), 'forks', Store(), lineno=68, col_offset=8)], List([], Load(), lineno=68, col_offset=21), lineno=68, col_offset=8), For(Name('hdr', Store(), lineno=69, col_offset=12), Name('headers', Load(), lineno=69, col_offset=19), [TryExcept([Assign([Tuple([Name('restype', Store(), lineno=71, col_offset=16), Name('offset', Store(), lineno=71, col_offset=25), Name('length', Store(), lineno=71, col_offset=33)], Store(), lineno=71, col_offset=16)], Call(Attribute(Name('struct', Load(), lineno=71, col_offset=42), 'unpack', Load(), lineno=71, col_offset=42), [Name('AS_ENTRY_FORMAT', Load(), lineno=71, col_offset=56), Name('hdr', Load(), lineno=71, col_offset=73)], [], None, None, lineno=71, col_offset=42), lineno=71, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=72, col_offset=19), Name('arg', Store(), lineno=72, col_offset=31), [Raise(Name('Error', Load(), lineno=73, col_offset=22), BinOp(Str('Unpack entry error: %s', lineno=73, col_offset=29), Mod(), Tuple([Name('arg', Load(), lineno=73, col_offset=57)], Load(), lineno=73, col_offset=57), lineno=73, col_offset=29), None, lineno=73, col_offset=16)], lineno=72, col_offset=12)], [], lineno=70, col_offset=12), If(Name('verbose', Load(), lineno=74, col_offset=15), [Print(None, [BinOp(Str('Fork %d, offset %d, length %d', lineno=75, col_offset=22), Mod(), Tuple([Name('restype', Load(), lineno=75, col_offset=57), Name('offset', Load(), lineno=75, col_offset=66), Name('length', Load(), lineno=75, col_offset=74)], Load(), lineno=75, col_offset=57), lineno=75, col_offset=22)], True, lineno=75, col_offset=16)], [], lineno=74, col_offset=12), Expr(Call(Attribute(Name('fileobj', Load(), lineno=76, col_offset=12), 'seek', Load(), lineno=76, col_offset=12), [Name('offset', Load(), lineno=76, col_offset=25)], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=12), Assign([Name('data', Store(), lineno=77, col_offset=12)], Call(Attribute(Name('fileobj', Load(), lineno=77, col_offset=19), 'read', Load(), lineno=77, col_offset=19), [Name('length', Load(), lineno=77, col_offset=32)], [], None, None, lineno=77, col_offset=19), lineno=77, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=78, col_offset=15), [Name('data', Load(), lineno=78, col_offset=19)], [], None, None, lineno=78, col_offset=15), [NotEq()], [Name('length', Load(), lineno=78, col_offset=28)], lineno=78, col_offset=15), [Raise(Name('Error', Load(), lineno=79, col_offset=22), BinOp(Str('Short read: expected %d bytes got %d', lineno=79, col_offset=29), Mod(), Tuple([Name('length', Load(), lineno=79, col_offset=71), Call(Name('len', Load(), lineno=79, col_offset=79), [Name('data', Load(), lineno=79, col_offset=83)], [], None, None, lineno=79, col_offset=79)], Load(), lineno=79, col_offset=71), lineno=79, col_offset=29), None, lineno=79, col_offset=16)], [], lineno=78, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=80, col_offset=12), 'forks', Load(), lineno=80, col_offset=12), 'append', Load(), lineno=80, col_offset=12), [Tuple([Name('restype', Load(), lineno=80, col_offset=31), Name('data', Load(), lineno=80, col_offset=40)], Load(), lineno=80, col_offset=31)], [], None, None, lineno=80, col_offset=12), lineno=80, col_offset=12), If(Compare(Name('restype', Load(), lineno=81, col_offset=15), [Eq()], [Name('AS_DATAFORK', Load(), lineno=81, col_offset=26)], lineno=81, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=82, col_offset=16), 'datafork', Store(), lineno=82, col_offset=16)], Name('data', Load(), lineno=82, col_offset=32), lineno=82, col_offset=16)], [If(Compare(Name('restype', Load(), lineno=83, col_offset=17), [Eq()], [Name('AS_RESOURCEFORK', Load(), lineno=83, col_offset=28)], lineno=83, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=84, col_offset=16), 'resourcefork', Store(), lineno=84, col_offset=16)], Name('data', Load(), lineno=84, col_offset=36), lineno=84, col_offset=16)], [], lineno=83, col_offset=17)], lineno=81, col_offset=12)], [], lineno=69, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('tofile', arguments([Name('self', Param(), lineno=86, col_offset=15), Name('path', Param(), lineno=86, col_offset=21), Name('resonly', Param(), lineno=86, col_offset=27)], None, None, [Name('False', Load(), lineno=86, col_offset=35)]), [Assign([Name('outfile', Store(), lineno=87, col_offset=8)], Call(Name('open', Load(), lineno=87, col_offset=18), [Name('path', Load(), lineno=87, col_offset=23), Str('wb', lineno=87, col_offset=29)], [], None, None, lineno=87, col_offset=18), lineno=87, col_offset=8), Assign([Name('data', Store(), lineno=88, col_offset=8)], Name('False', Load(), lineno=88, col_offset=15), lineno=88, col_offset=8), If(Name('resonly', Load(), lineno=89, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=90, col_offset=15), 'resourcefork', Load(), lineno=90, col_offset=15), [Is()], [Name('None', Load(), lineno=90, col_offset=36)], lineno=90, col_offset=15), [Raise(Name('Error', Load(), lineno=91, col_offset=22), Str('No resource fork found', lineno=91, col_offset=29), None, lineno=91, col_offset=16)], [], lineno=90, col_offset=12), Assign([Name('fp', Store(), lineno=92, col_offset=12)], Call(Name('open', Load(), lineno=92, col_offset=17), [Name('path', Load(), lineno=92, col_offset=22), Str('wb', lineno=92, col_offset=28)], [], None, None, lineno=92, col_offset=17), lineno=92, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=93, col_offset=12), 'write', Load(), lineno=93, col_offset=12), [Attribute(Name('self', Load(), lineno=93, col_offset=21), 'resourcefork', Load(), lineno=93, col_offset=21)], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=94, col_offset=12), 'close', Load(), lineno=94, col_offset=12), [], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=95, col_offset=14), 'resourcefork', Load(), lineno=95, col_offset=14), [Is()], [Name('None', Load(), lineno=95, col_offset=35)], lineno=95, col_offset=14), Compare(Attribute(Name('self', Load(), lineno=95, col_offset=44), 'datafork', Load(), lineno=95, col_offset=44), [Is()], [Name('None', Load(), lineno=95, col_offset=61)], lineno=95, col_offset=44)], lineno=95, col_offset=14), [Raise(Name('Error', Load(), lineno=96, col_offset=18), Str('No useful forks found', lineno=96, col_offset=25), None, lineno=96, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=98, col_offset=15), 'datafork', Load(), lineno=98, col_offset=15), [IsNot()], [Name('None', Load(), lineno=98, col_offset=36)], lineno=98, col_offset=15), [Assign([Name('fp', Store(), lineno=99, col_offset=16)], Call(Name('open', Load(), lineno=99, col_offset=21), [Name('path', Load(), lineno=99, col_offset=26), Str('wb', lineno=99, col_offset=32)], [], None, None, lineno=99, col_offset=21), lineno=99, col_offset=16), Expr(Call(Attribute(Name('fp', Load(), lineno=100, col_offset=16), 'write', Load(), lineno=100, col_offset=16), [Attribute(Name('self', Load(), lineno=100, col_offset=25), 'datafork', Load(), lineno=100, col_offset=25)], [], None, None, lineno=100, col_offset=16), lineno=100, col_offset=16), Expr(Call(Attribute(Name('fp', Load(), lineno=101, col_offset=16), 'close', Load(), lineno=101, col_offset=16), [], [], None, None, lineno=101, col_offset=16), lineno=101, col_offset=16)], [], lineno=98, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=102, col_offset=15), 'resourcefork', Load(), lineno=102, col_offset=15), [IsNot()], [Name('None', Load(), lineno=102, col_offset=40)], lineno=102, col_offset=15), [Assign([Name('fp', Store(), lineno=103, col_offset=16)], Call(Attribute(Name('MacOS', Load(), lineno=103, col_offset=21), 'openrf', Load(), lineno=103, col_offset=21), [Name('path', Load(), lineno=103, col_offset=34), Str('*wb', lineno=103, col_offset=40)], [], None, None, lineno=103, col_offset=21), lineno=103, col_offset=16), Expr(Call(Attribute(Name('fp', Load(), lineno=104, col_offset=16), 'write', Load(), lineno=104, col_offset=16), [Attribute(Name('self', Load(), lineno=104, col_offset=25), 'resourcefork', Load(), lineno=104, col_offset=25)], [], None, None, lineno=104, col_offset=16), lineno=104, col_offset=16), Expr(Call(Attribute(Name('fp', Load(), lineno=105, col_offset=16), 'close', Load(), lineno=105, col_offset=16), [], [], None, None, lineno=105, col_offset=16), lineno=105, col_offset=16)], [], lineno=102, col_offset=12)], lineno=95, col_offset=13)], lineno=89, col_offset=8)], [], lineno=86, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('decode', arguments([Name('infile', Param(), lineno=107, col_offset=11), Name('outpath', Param(), lineno=107, col_offset=19), Name('resonly', Param(), lineno=107, col_offset=28), Name('verbose', Param(), lineno=107, col_offset=43)], None, None, [Name('False', Load(), lineno=107, col_offset=36), Name('False', Load(), lineno=107, col_offset=51)]), [Expr(Str("decode(infile, outpath [, resonly=False, verbose=False])\n\n    Creates a decoded file from an AppleSingle encoded file.\n    If resonly is True, then it will create a regular file at\n    outpath containing only the resource fork from infile.\n    Otherwise it will create an AppleDouble file at outpath\n    with the data and resource forks from infile.  On platforms\n    without the MacOS module, it will create inpath and inpath+'.rsrc'\n    with the data and resource forks respectively.\n\n    ", lineno=118, col_offset=-1), lineno=118, col_offset=-1), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=119, col_offset=11), [Name('infile', Load(), lineno=119, col_offset=19), Str('read', lineno=119, col_offset=27)], [], None, None, lineno=119, col_offset=11), lineno=119, col_offset=7), [If(Call(Name('isinstance', Load(), lineno=120, col_offset=11), [Name('infile', Load(), lineno=120, col_offset=22), Attribute(Attribute(Name('Carbon', Load(), lineno=120, col_offset=30), 'File', Load(), lineno=120, col_offset=30), 'Alias', Load(), lineno=120, col_offset=30)], [], None, None, lineno=120, col_offset=11), [Assign([Name('infile', Store(), lineno=121, col_offset=12)], Subscript(Call(Attribute(Name('infile', Load(), lineno=121, col_offset=21), 'ResolveAlias', Load(), lineno=121, col_offset=21), [], [], None, None, lineno=121, col_offset=21), Index(Num(0, lineno=121, col_offset=43)), Load(), lineno=121, col_offset=21), lineno=121, col_offset=12)], [], lineno=120, col_offset=8), If(Call(Name('hasattr', Load(), lineno=123, col_offset=11), [Attribute(Name('Carbon', Load(), lineno=123, col_offset=19), 'File', Load(), lineno=123, col_offset=19), Str('FSSpec', lineno=123, col_offset=32)], [], None, None, lineno=123, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=124, col_offset=15), [Name('infile', Load(), lineno=124, col_offset=26), Tuple([Attribute(Attribute(Name('Carbon', Load(), lineno=124, col_offset=35), 'File', Load(), lineno=124, col_offset=35), 'FSSpec', Load(), lineno=124, col_offset=35), Attribute(Attribute(Name('Carbon', Load(), lineno=124, col_offset=55), 'File', Load(), lineno=124, col_offset=55), 'FSRef', Load(), lineno=124, col_offset=55)], Load(), lineno=124, col_offset=35)], [], None, None, lineno=124, col_offset=15), [Assign([Name('infile', Store(), lineno=125, col_offset=16)], Call(Attribute(Name('infile', Load(), lineno=125, col_offset=25), 'as_pathname', Load(), lineno=125, col_offset=25), [], [], None, None, lineno=125, col_offset=25), lineno=125, col_offset=16)], [], lineno=124, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=127, col_offset=15), [Name('infile', Load(), lineno=127, col_offset=26), Attribute(Attribute(Name('Carbon', Load(), lineno=127, col_offset=34), 'File', Load(), lineno=127, col_offset=34), 'FSRef', Load(), lineno=127, col_offset=34)], [], None, None, lineno=127, col_offset=15), [Assign([Name('infile', Store(), lineno=128, col_offset=16)], Call(Attribute(Name('infile', Load(), lineno=128, col_offset=25), 'as_pathname', Load(), lineno=128, col_offset=25), [], [], None, None, lineno=128, col_offset=25), lineno=128, col_offset=16)], [], lineno=127, col_offset=12)], lineno=123, col_offset=8), Assign([Name('infile', Store(), lineno=129, col_offset=8)], Call(Name('open', Load(), lineno=129, col_offset=17), [Name('infile', Load(), lineno=129, col_offset=22), Str('rb', lineno=129, col_offset=30)], [], None, None, lineno=129, col_offset=17), lineno=129, col_offset=8)], [], lineno=119, col_offset=4), Assign([Name('asfile', Store(), lineno=131, col_offset=4)], Call(Name('AppleSingle', Load(), lineno=131, col_offset=13), [Name('infile', Load(), lineno=131, col_offset=25)], [keyword('verbose', Name('verbose', Load(), lineno=131, col_offset=41))], None, None, lineno=131, col_offset=13), lineno=131, col_offset=4), Expr(Call(Attribute(Name('asfile', Load(), lineno=132, col_offset=4), 'tofile', Load(), lineno=132, col_offset=4), [Name('outpath', Load(), lineno=132, col_offset=18)], [keyword('resonly', Name('resonly', Load(), lineno=132, col_offset=35))], None, None, lineno=132, col_offset=4), lineno=132, col_offset=4)], [], lineno=107, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [If(BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=135, col_offset=7), [Attribute(Name('sys', Load(), lineno=135, col_offset=11), 'argv', Load(), lineno=135, col_offset=11)], [], None, None, lineno=135, col_offset=7), [Lt()], [Num(3, lineno=135, col_offset=23)], lineno=135, col_offset=7), BoolOp(And(), [Compare(Subscript(Attribute(Name('sys', Load(), lineno=135, col_offset=28), 'argv', Load(), lineno=135, col_offset=28), Index(Num(1, lineno=135, col_offset=37)), Load(), lineno=135, col_offset=28), [Eq()], [Str('-r', lineno=135, col_offset=43)], lineno=135, col_offset=28), Compare(Call(Name('len', Load(), lineno=135, col_offset=52), [Attribute(Name('sys', Load(), lineno=135, col_offset=56), 'argv', Load(), lineno=135, col_offset=56)], [], None, None, lineno=135, col_offset=52), [NotEq()], [Num(4, lineno=135, col_offset=69)], lineno=135, col_offset=52)], lineno=135, col_offset=28)], lineno=135, col_offset=7), [Print(None, [Str('Usage: applesingle.py [-r] applesinglefile decodedfile', lineno=136, col_offset=14)], True, lineno=136, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=137, col_offset=8), 'exit', Load(), lineno=137, col_offset=8), [Num(1, lineno=137, col_offset=17)], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8)], [], lineno=135, col_offset=4), If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=138, col_offset=7), 'argv', Load(), lineno=138, col_offset=7), Index(Num(1, lineno=138, col_offset=16)), Load(), lineno=138, col_offset=7), [Eq()], [Str('-r', lineno=138, col_offset=22)], lineno=138, col_offset=7), [Assign([Name('resonly', Store(), lineno=139, col_offset=8)], Name('True', Load(), lineno=139, col_offset=18), lineno=139, col_offset=8), Delete([Subscript(Attribute(Name('sys', Load(), lineno=140, col_offset=12), 'argv', Load(), lineno=140, col_offset=12), Index(Num(1, lineno=140, col_offset=21)), Del(), lineno=140, col_offset=12)], lineno=140, col_offset=8)], [Assign([Name('resonly', Store(), lineno=142, col_offset=8)], Name('False', Load(), lineno=142, col_offset=18), lineno=142, col_offset=8)], lineno=138, col_offset=4), Expr(Call(Name('decode', Load(), lineno=143, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=143, col_offset=11), 'argv', Load(), lineno=143, col_offset=11), Index(Num(1, lineno=143, col_offset=20)), Load(), lineno=143, col_offset=11), Subscript(Attribute(Name('sys', Load(), lineno=143, col_offset=24), 'argv', Load(), lineno=143, col_offset=24), Index(Num(2, lineno=143, col_offset=33)), Load(), lineno=143, col_offset=24)], [keyword('resonly', Name('resonly', Load(), lineno=143, col_offset=45))], None, None, lineno=143, col_offset=4), lineno=143, col_offset=4)], [], lineno=134, col_offset=0), If(Compare(Name('__name__', Load(), lineno=145, col_offset=3), [Eq()], [Str('__main__', lineno=145, col_offset=15)], lineno=145, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=146, col_offset=4), [], [], None, None, lineno=146, col_offset=4), lineno=146, col_offset=4)], [], lineno=145, col_offset=0)])
