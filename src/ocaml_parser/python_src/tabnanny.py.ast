Module([Expr(Str('The Tab Nanny despises ambiguous indentation.  She knows no mercy.\n\ntabnanny -- Detection of ambiguous indentation\n\nFor the time being this module is intended to be called as a script.\nHowever it is possible to import it into an IDE and use the function\ncheck() described below.\n\nWarning: The API provided by this module is likely to change in future\nreleases; such changes may not be backward compatible.\n', lineno=13, col_offset=-1), lineno=13, col_offset=-1), Assign([Name('__version__', Store(), lineno=21, col_offset=0)], Str('6', lineno=21, col_offset=14), lineno=21, col_offset=0), Import([alias('os', None)], lineno=23, col_offset=0), Import([alias('sys', None)], lineno=24, col_offset=0), Import([alias('getopt', None)], lineno=25, col_offset=0), Import([alias('tokenize', None)], lineno=26, col_offset=0), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=27, col_offset=7), [Name('tokenize', Load(), lineno=27, col_offset=15), Str('NL', lineno=27, col_offset=25)], [], None, None, lineno=27, col_offset=7), lineno=27, col_offset=3), [Raise(Call(Name('ValueError', Load(), lineno=28, col_offset=10), [Str("tokenize.NL doesn't exist -- tokenize module too old", lineno=28, col_offset=21)], [], None, None, lineno=28, col_offset=10), None, None, lineno=28, col_offset=4)], [], lineno=27, col_offset=0), Assign([Name('__all__', Store(), lineno=30, col_offset=0)], List([Str('check', lineno=30, col_offset=11), Str('NannyNag', lineno=30, col_offset=20), Str('process_tokens', lineno=30, col_offset=32)], Load(), lineno=30, col_offset=10), lineno=30, col_offset=0), Assign([Name('verbose', Store(), lineno=32, col_offset=0)], Num(0, lineno=32, col_offset=10), lineno=32, col_offset=0), Assign([Name('filename_only', Store(), lineno=33, col_offset=0)], Num(0, lineno=33, col_offset=16), lineno=33, col_offset=0), FunctionDef('errprint', arguments([], 'args', None, []), [Assign([Name('sep', Store(), lineno=36, col_offset=4)], Str('', lineno=36, col_offset=10), lineno=36, col_offset=4), For(Name('arg', Store(), lineno=37, col_offset=8), Name('args', Load(), lineno=37, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=38, col_offset=8), 'stderr', Load(), lineno=38, col_offset=8), 'write', Load(), lineno=38, col_offset=8), [BinOp(Name('sep', Load(), lineno=38, col_offset=25), Add(), Call(Name('str', Load(), lineno=38, col_offset=31), [Name('arg', Load(), lineno=38, col_offset=35)], [], None, None, lineno=38, col_offset=31), lineno=38, col_offset=25)], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=8), Assign([Name('sep', Store(), lineno=39, col_offset=8)], Str(' ', lineno=39, col_offset=14), lineno=39, col_offset=8)], [], lineno=37, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=40, col_offset=4), 'stderr', Load(), lineno=40, col_offset=4), 'write', Load(), lineno=40, col_offset=4), [Str('\n', lineno=40, col_offset=21)], [], None, None, lineno=40, col_offset=4), lineno=40, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Global(['verbose', 'filename_only'], lineno=43, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=45, col_offset=8), Name('args', Store(), lineno=45, col_offset=14)], Store(), lineno=45, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=45, col_offset=21), 'getopt', Load(), lineno=45, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=45, col_offset=35), 'argv', Load(), lineno=45, col_offset=35), Slice(Num(1, lineno=45, col_offset=44), None, None), Load(), lineno=45, col_offset=35), Str('qv', lineno=45, col_offset=49)], [], None, None, lineno=45, col_offset=21), lineno=45, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=46, col_offset=11), 'error', Load(), lineno=46, col_offset=11), Name('msg', Store(), lineno=46, col_offset=25), [Expr(Call(Name('errprint', Load(), lineno=47, col_offset=8), [Name('msg', Load(), lineno=47, col_offset=17)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Return(None, lineno=48, col_offset=8)], lineno=46, col_offset=4)], [], lineno=44, col_offset=4), For(Tuple([Name('o', Store(), lineno=49, col_offset=8), Name('a', Store(), lineno=49, col_offset=11)], Store(), lineno=49, col_offset=8), Name('opts', Load(), lineno=49, col_offset=16), [If(Compare(Name('o', Load(), lineno=50, col_offset=11), [Eq()], [Str('-q', lineno=50, col_offset=16)], lineno=50, col_offset=11), [Assign([Name('filename_only', Store(), lineno=51, col_offset=12)], BinOp(Name('filename_only', Load(), lineno=51, col_offset=28), Add(), Num(1, lineno=51, col_offset=44), lineno=51, col_offset=28), lineno=51, col_offset=12)], [], lineno=50, col_offset=8), If(Compare(Name('o', Load(), lineno=52, col_offset=11), [Eq()], [Str('-v', lineno=52, col_offset=16)], lineno=52, col_offset=11), [Assign([Name('verbose', Store(), lineno=53, col_offset=12)], BinOp(Name('verbose', Load(), lineno=53, col_offset=22), Add(), Num(1, lineno=53, col_offset=32), lineno=53, col_offset=22), lineno=53, col_offset=12)], [], lineno=52, col_offset=8)], [], lineno=49, col_offset=4), If(UnaryOp(Not(), Name('args', Load(), lineno=54, col_offset=11), lineno=54, col_offset=7), [Expr(Call(Name('errprint', Load(), lineno=55, col_offset=8), [Str('Usage:', lineno=55, col_offset=17), Subscript(Attribute(Name('sys', Load(), lineno=55, col_offset=27), 'argv', Load(), lineno=55, col_offset=27), Index(Num(0, lineno=55, col_offset=36)), Load(), lineno=55, col_offset=27), Str('[-v] file_or_directory ...', lineno=55, col_offset=40)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8), Return(None, lineno=56, col_offset=8)], [], lineno=54, col_offset=4), For(Name('arg', Store(), lineno=57, col_offset=8), Name('args', Load(), lineno=57, col_offset=15), [Expr(Call(Name('check', Load(), lineno=58, col_offset=8), [Name('arg', Load(), lineno=58, col_offset=14)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8)], [], lineno=57, col_offset=4)], [], lineno=42, col_offset=0), ClassDef('NannyNag', [Name('Exception', Load(), lineno=60, col_offset=15)], [Expr(Str('\n    Raised by tokeneater() if detecting an ambiguous indent.\n    Captured and handled in check().\n    ', lineno=64, col_offset=-1), lineno=64, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=65, col_offset=17), Name('lineno', Param(), lineno=65, col_offset=23), Name('msg', Param(), lineno=65, col_offset=31), Name('line', Param(), lineno=65, col_offset=36)], None, None, []), [Assign([Tuple([Attribute(Name('self', Load(), lineno=66, col_offset=8), 'lineno', Store(), lineno=66, col_offset=8), Attribute(Name('self', Load(), lineno=66, col_offset=21), 'msg', Store(), lineno=66, col_offset=21), Attribute(Name('self', Load(), lineno=66, col_offset=31), 'line', Store(), lineno=66, col_offset=31)], Store(), lineno=66, col_offset=8)], Tuple([Name('lineno', Load(), lineno=66, col_offset=43), Name('msg', Load(), lineno=66, col_offset=51), Name('line', Load(), lineno=66, col_offset=56)], Load(), lineno=66, col_offset=43), lineno=66, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('get_lineno', arguments([Name('self', Param(), lineno=67, col_offset=19)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=68, col_offset=15), 'lineno', Load(), lineno=68, col_offset=15), lineno=68, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('get_msg', arguments([Name('self', Param(), lineno=69, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=70, col_offset=15), 'msg', Load(), lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('get_line', arguments([Name('self', Param(), lineno=71, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=72, col_offset=15), 'line', Load(), lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=71, col_offset=4)], [], lineno=60, col_offset=0), FunctionDef('check', arguments([Name('file', Param(), lineno=74, col_offset=10)], None, None, []), [Expr(Str('check(file_or_dir)\n\n    If file_or_dir is a directory and not a symbolic link, then recursively\n    descend the directory tree named by file_or_dir, checking all .py files\n    along the way. If file_or_dir is an ordinary Python source file, it is\n    checked for whitespace related problems. The diagnostic messages are\n    written to standard output using the print statement.\n    ', lineno=82, col_offset=-1), lineno=82, col_offset=-1), If(BoolOp(And(), [Call(Attribute(Attribute(Name('os', Load(), lineno=84, col_offset=7), 'path', Load(), lineno=84, col_offset=7), 'isdir', Load(), lineno=84, col_offset=7), [Name('file', Load(), lineno=84, col_offset=21)], [], None, None, lineno=84, col_offset=7), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=84, col_offset=35), 'path', Load(), lineno=84, col_offset=35), 'islink', Load(), lineno=84, col_offset=35), [Name('file', Load(), lineno=84, col_offset=50)], [], None, None, lineno=84, col_offset=35), lineno=84, col_offset=31)], lineno=84, col_offset=7), [If(Name('verbose', Load(), lineno=85, col_offset=11), [Print(None, [BinOp(Str('%r: listing directory', lineno=86, col_offset=18), Mod(), Tuple([Name('file', Load(), lineno=86, col_offset=45)], Load(), lineno=86, col_offset=45), lineno=86, col_offset=18)], True, lineno=86, col_offset=12)], [], lineno=85, col_offset=8), Assign([Name('names', Store(), lineno=87, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=87, col_offset=16), 'listdir', Load(), lineno=87, col_offset=16), [Name('file', Load(), lineno=87, col_offset=27)], [], None, None, lineno=87, col_offset=16), lineno=87, col_offset=8), For(Name('name', Store(), lineno=88, col_offset=12), Name('names', Load(), lineno=88, col_offset=20), [Assign([Name('fullname', Store(), lineno=89, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=89, col_offset=23), 'path', Load(), lineno=89, col_offset=23), 'join', Load(), lineno=89, col_offset=23), [Name('file', Load(), lineno=89, col_offset=36), Name('name', Load(), lineno=89, col_offset=42)], [], None, None, lineno=89, col_offset=23), lineno=89, col_offset=12), If(BoolOp(Or(), [BoolOp(And(), [Call(Attribute(Attribute(Name('os', Load(), lineno=90, col_offset=16), 'path', Load(), lineno=90, col_offset=16), 'isdir', Load(), lineno=90, col_offset=16), [Name('fullname', Load(), lineno=90, col_offset=30)], [], None, None, lineno=90, col_offset=16), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=91, col_offset=20), 'path', Load(), lineno=91, col_offset=20), 'islink', Load(), lineno=91, col_offset=20), [Name('fullname', Load(), lineno=91, col_offset=35)], [], None, None, lineno=91, col_offset=20), lineno=91, col_offset=16)], lineno=90, col_offset=16), Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=92, col_offset=16), 'path', Load(), lineno=92, col_offset=16), 'normcase', Load(), lineno=92, col_offset=16), [Subscript(Name('name', Load(), lineno=92, col_offset=33), Slice(Num(-3, lineno=92, col_offset=39), None, None), Load(), lineno=92, col_offset=33)], [], None, None, lineno=92, col_offset=16), [Eq()], [Str('.py', lineno=92, col_offset=47)], lineno=92, col_offset=16)], lineno=90, col_offset=16), [Expr(Call(Name('check', Load(), lineno=93, col_offset=16), [Name('fullname', Load(), lineno=93, col_offset=22)], [], None, None, lineno=93, col_offset=16), lineno=93, col_offset=16)], [], lineno=90, col_offset=12)], [], lineno=88, col_offset=8), Return(None, lineno=94, col_offset=8)], [], lineno=84, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=97, col_offset=8)], Call(Name('open', Load(), lineno=97, col_offset=12), [Name('file', Load(), lineno=97, col_offset=17)], [], None, None, lineno=97, col_offset=12), lineno=97, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=98, col_offset=11), Name('msg', Store(), lineno=98, col_offset=20), [Expr(Call(Name('errprint', Load(), lineno=99, col_offset=8), [BinOp(Str('%r: I/O Error: %s', lineno=99, col_offset=17), Mod(), Tuple([Name('file', Load(), lineno=99, col_offset=40), Name('msg', Load(), lineno=99, col_offset=46)], Load(), lineno=99, col_offset=40), lineno=99, col_offset=17)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Return(None, lineno=100, col_offset=8)], lineno=98, col_offset=4)], [], lineno=96, col_offset=4), If(Compare(Name('verbose', Load(), lineno=102, col_offset=7), [Gt()], [Num(1, lineno=102, col_offset=17)], lineno=102, col_offset=7), [Print(None, [BinOp(Str('checking %r ...', lineno=103, col_offset=14), Mod(), Name('file', Load(), lineno=103, col_offset=34), lineno=103, col_offset=14)], True, lineno=103, col_offset=8)], [], lineno=102, col_offset=4), TryExcept([Expr(Call(Name('process_tokens', Load(), lineno=106, col_offset=8), [Call(Attribute(Name('tokenize', Load(), lineno=106, col_offset=23), 'generate_tokens', Load(), lineno=106, col_offset=23), [Attribute(Name('f', Load(), lineno=106, col_offset=48), 'readline', Load(), lineno=106, col_offset=48)], [], None, None, lineno=106, col_offset=23)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8)], [ExceptHandler(Attribute(Name('tokenize', Load(), lineno=108, col_offset=11), 'TokenError', Load(), lineno=108, col_offset=11), Name('msg', Store(), lineno=108, col_offset=32), [Expr(Call(Name('errprint', Load(), lineno=109, col_offset=8), [BinOp(Str('%r: Token Error: %s', lineno=109, col_offset=17), Mod(), Tuple([Name('file', Load(), lineno=109, col_offset=42), Name('msg', Load(), lineno=109, col_offset=48)], Load(), lineno=109, col_offset=42), lineno=109, col_offset=17)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8), Return(None, lineno=110, col_offset=8)], lineno=108, col_offset=4), ExceptHandler(Name('IndentationError', Load(), lineno=112, col_offset=11), Name('msg', Store(), lineno=112, col_offset=29), [Expr(Call(Name('errprint', Load(), lineno=113, col_offset=8), [BinOp(Str('%r: Indentation Error: %s', lineno=113, col_offset=17), Mod(), Tuple([Name('file', Load(), lineno=113, col_offset=48), Name('msg', Load(), lineno=113, col_offset=54)], Load(), lineno=113, col_offset=48), lineno=113, col_offset=17)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), Return(None, lineno=114, col_offset=8)], lineno=112, col_offset=4), ExceptHandler(Name('NannyNag', Load(), lineno=116, col_offset=11), Name('nag', Store(), lineno=116, col_offset=21), [Assign([Name('badline', Store(), lineno=117, col_offset=8)], Call(Attribute(Name('nag', Load(), lineno=117, col_offset=18), 'get_lineno', Load(), lineno=117, col_offset=18), [], [], None, None, lineno=117, col_offset=18), lineno=117, col_offset=8), Assign([Name('line', Store(), lineno=118, col_offset=8)], Call(Attribute(Name('nag', Load(), lineno=118, col_offset=15), 'get_line', Load(), lineno=118, col_offset=15), [], [], None, None, lineno=118, col_offset=15), lineno=118, col_offset=8), If(Name('verbose', Load(), lineno=119, col_offset=11), [Print(None, [BinOp(Str('%r: *** Line %d: trouble in tab city! ***', lineno=120, col_offset=18), Mod(), Tuple([Name('file', Load(), lineno=120, col_offset=65), Name('badline', Load(), lineno=120, col_offset=71)], Load(), lineno=120, col_offset=65), lineno=120, col_offset=18)], True, lineno=120, col_offset=12), Print(None, [BinOp(Str('offending line: %r', lineno=121, col_offset=18), Mod(), Tuple([Name('line', Load(), lineno=121, col_offset=42)], Load(), lineno=121, col_offset=42), lineno=121, col_offset=18)], True, lineno=121, col_offset=12), Print(None, [Call(Attribute(Name('nag', Load(), lineno=122, col_offset=18), 'get_msg', Load(), lineno=122, col_offset=18), [], [], None, None, lineno=122, col_offset=18)], True, lineno=122, col_offset=12)], [If(Compare(Str(' ', lineno=124, col_offset=15), [In()], [Name('file', Load(), lineno=124, col_offset=22)], lineno=124, col_offset=15), [Assign([Name('file', Store(), lineno=124, col_offset=28)], BinOp(BinOp(Str('"', lineno=124, col_offset=35), Add(), Name('file', Load(), lineno=124, col_offset=41), lineno=124, col_offset=35), Add(), Str('"', lineno=124, col_offset=48), lineno=124, col_offset=46), lineno=124, col_offset=28)], [], lineno=124, col_offset=12), If(Name('filename_only', Load(), lineno=125, col_offset=15), [Print(None, [Name('file', Load(), lineno=125, col_offset=36)], True, lineno=125, col_offset=30)], [Print(None, [Name('file', Load(), lineno=126, col_offset=24), Name('badline', Load(), lineno=126, col_offset=30), Call(Name('repr', Load(), lineno=126, col_offset=39), [Name('line', Load(), lineno=126, col_offset=44)], [], None, None, lineno=126, col_offset=39)], True, lineno=126, col_offset=18)], lineno=125, col_offset=12)], lineno=119, col_offset=8), Return(None, lineno=127, col_offset=8)], lineno=116, col_offset=4)], [], lineno=105, col_offset=4), If(Name('verbose', Load(), lineno=129, col_offset=7), [Print(None, [BinOp(Str('%r: Clean bill of health.', lineno=130, col_offset=14), Mod(), Tuple([Name('file', Load(), lineno=130, col_offset=45)], Load(), lineno=130, col_offset=45), lineno=130, col_offset=14)], True, lineno=130, col_offset=8)], [], lineno=129, col_offset=4)], [], lineno=74, col_offset=0), ClassDef('Whitespace', [], [Assign([Tuple([Name('S', Store(), lineno=134, col_offset=4), Name('T', Store(), lineno=134, col_offset=7)], Store(), lineno=134, col_offset=4)], Str(' \t', lineno=134, col_offset=11), lineno=134, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=155, col_offset=17), Name('ws', Param(), lineno=155, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'raw', Store(), lineno=156, col_offset=8)], Name('ws', Load(), lineno=156, col_offset=20), lineno=156, col_offset=8), Assign([Tuple([Name('S', Store(), lineno=157, col_offset=8), Name('T', Store(), lineno=157, col_offset=11)], Store(), lineno=157, col_offset=8)], Tuple([Attribute(Name('Whitespace', Load(), lineno=157, col_offset=15), 'S', Load(), lineno=157, col_offset=15), Attribute(Name('Whitespace', Load(), lineno=157, col_offset=29), 'T', Load(), lineno=157, col_offset=29)], Load(), lineno=157, col_offset=15), lineno=157, col_offset=8), Assign([Name('count', Store(), lineno=158, col_offset=8)], List([], Load(), lineno=158, col_offset=16), lineno=158, col_offset=8), Assign([Name('b', Store(), lineno=159, col_offset=8), Name('n', Store(), lineno=159, col_offset=12), Name('nt', Store(), lineno=159, col_offset=16)], Num(0, lineno=159, col_offset=21), lineno=159, col_offset=8), For(Name('ch', Store(), lineno=160, col_offset=12), Attribute(Name('self', Load(), lineno=160, col_offset=18), 'raw', Load(), lineno=160, col_offset=18), [If(Compare(Name('ch', Load(), lineno=161, col_offset=15), [Eq()], [Name('S', Load(), lineno=161, col_offset=21)], lineno=161, col_offset=15), [Assign([Name('n', Store(), lineno=162, col_offset=16)], BinOp(Name('n', Load(), lineno=162, col_offset=20), Add(), Num(1, lineno=162, col_offset=24), lineno=162, col_offset=20), lineno=162, col_offset=16), Assign([Name('b', Store(), lineno=163, col_offset=16)], BinOp(Name('b', Load(), lineno=163, col_offset=20), Add(), Num(1, lineno=163, col_offset=24), lineno=163, col_offset=20), lineno=163, col_offset=16)], [If(Compare(Name('ch', Load(), lineno=164, col_offset=17), [Eq()], [Name('T', Load(), lineno=164, col_offset=23)], lineno=164, col_offset=17), [Assign([Name('n', Store(), lineno=165, col_offset=16)], BinOp(Name('n', Load(), lineno=165, col_offset=20), Add(), Num(1, lineno=165, col_offset=24), lineno=165, col_offset=20), lineno=165, col_offset=16), Assign([Name('nt', Store(), lineno=166, col_offset=16)], BinOp(Name('nt', Load(), lineno=166, col_offset=21), Add(), Num(1, lineno=166, col_offset=26), lineno=166, col_offset=21), lineno=166, col_offset=16), If(Compare(Name('b', Load(), lineno=167, col_offset=19), [GtE()], [Call(Name('len', Load(), lineno=167, col_offset=24), [Name('count', Load(), lineno=167, col_offset=28)], [], None, None, lineno=167, col_offset=24)], lineno=167, col_offset=19), [Assign([Name('count', Store(), lineno=168, col_offset=20)], BinOp(Name('count', Load(), lineno=168, col_offset=28), Add(), BinOp(List([Num(0, lineno=168, col_offset=37)], Load(), lineno=168, col_offset=36), Mult(), BinOp(BinOp(Name('b', Load(), lineno=168, col_offset=43), Sub(), Call(Name('len', Load(), lineno=168, col_offset=47), [Name('count', Load(), lineno=168, col_offset=51)], [], None, None, lineno=168, col_offset=47), lineno=168, col_offset=43), Add(), Num(1, lineno=168, col_offset=60), lineno=168, col_offset=58), lineno=168, col_offset=36), lineno=168, col_offset=28), lineno=168, col_offset=20)], [], lineno=167, col_offset=16), Assign([Subscript(Name('count', Load(), lineno=169, col_offset=16), Index(Name('b', Load(), lineno=169, col_offset=22)), Store(), lineno=169, col_offset=16)], BinOp(Subscript(Name('count', Load(), lineno=169, col_offset=27), Index(Name('b', Load(), lineno=169, col_offset=33)), Load(), lineno=169, col_offset=27), Add(), Num(1, lineno=169, col_offset=38), lineno=169, col_offset=27), lineno=169, col_offset=16), Assign([Name('b', Store(), lineno=170, col_offset=16)], Num(0, lineno=170, col_offset=20), lineno=170, col_offset=16)], [Break( lineno=172, col_offset=16)], lineno=164, col_offset=17)], lineno=161, col_offset=12)], [], lineno=160, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=173, col_offset=8), 'n', Store(), lineno=173, col_offset=8)], Name('n', Load(), lineno=173, col_offset=20), lineno=173, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=174, col_offset=8), 'nt', Store(), lineno=174, col_offset=8)], Name('nt', Load(), lineno=174, col_offset=20), lineno=174, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=175, col_offset=8), 'norm', Store(), lineno=175, col_offset=8)], Tuple([Call(Name('tuple', Load(), lineno=175, col_offset=20), [Name('count', Load(), lineno=175, col_offset=26)], [], None, None, lineno=175, col_offset=20), Name('b', Load(), lineno=175, col_offset=34)], Load(), lineno=175, col_offset=20), lineno=175, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=176, col_offset=8), 'is_simple', Store(), lineno=176, col_offset=8)], Compare(Call(Name('len', Load(), lineno=176, col_offset=25), [Name('count', Load(), lineno=176, col_offset=29)], [], None, None, lineno=176, col_offset=25), [LtE()], [Num(1, lineno=176, col_offset=39)], lineno=176, col_offset=25), lineno=176, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('longest_run_of_spaces', arguments([Name('self', Param(), lineno=180, col_offset=30)], None, None, []), [Assign([Tuple([Name('count', Store(), lineno=181, col_offset=8), Name('trailing', Store(), lineno=181, col_offset=15)], Store(), lineno=181, col_offset=8)], Attribute(Name('self', Load(), lineno=181, col_offset=26), 'norm', Load(), lineno=181, col_offset=26), lineno=181, col_offset=8), Return(Call(Name('max', Load(), lineno=182, col_offset=15), [BinOp(Call(Name('len', Load(), lineno=182, col_offset=19), [Name('count', Load(), lineno=182, col_offset=23)], [], None, None, lineno=182, col_offset=19), Sub(), Num(1, lineno=182, col_offset=30), lineno=182, col_offset=19), Name('trailing', Load(), lineno=182, col_offset=33)], [], None, None, lineno=182, col_offset=15), lineno=182, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('indent_level', arguments([Name('self', Param(), lineno=184, col_offset=21), Name('tabsize', Param(), lineno=184, col_offset=27)], None, None, []), [Assign([Tuple([Name('count', Store(), lineno=199, col_offset=8), Name('trailing', Store(), lineno=199, col_offset=15)], Store(), lineno=199, col_offset=8)], Attribute(Name('self', Load(), lineno=199, col_offset=26), 'norm', Load(), lineno=199, col_offset=26), lineno=199, col_offset=8), Assign([Name('il', Store(), lineno=200, col_offset=8)], Num(0, lineno=200, col_offset=13), lineno=200, col_offset=8), For(Name('i', Store(), lineno=201, col_offset=12), Call(Name('range', Load(), lineno=201, col_offset=17), [Name('tabsize', Load(), lineno=201, col_offset=23), Call(Name('len', Load(), lineno=201, col_offset=32), [Name('count', Load(), lineno=201, col_offset=36)], [], None, None, lineno=201, col_offset=32)], [], None, None, lineno=201, col_offset=17), [Assign([Name('il', Store(), lineno=202, col_offset=12)], BinOp(Name('il', Load(), lineno=202, col_offset=17), Add(), BinOp(BinOp(Name('i', Load(), lineno=202, col_offset=22), Div(), Name('tabsize', Load(), lineno=202, col_offset=24), lineno=202, col_offset=22), Mult(), Subscript(Name('count', Load(), lineno=202, col_offset=34), Index(Name('i', Load(), lineno=202, col_offset=40)), Load(), lineno=202, col_offset=34), lineno=202, col_offset=32), lineno=202, col_offset=17), lineno=202, col_offset=12)], [], lineno=201, col_offset=8), Return(BinOp(Name('trailing', Load(), lineno=203, col_offset=15), Add(), BinOp(Name('tabsize', Load(), lineno=203, col_offset=26), Mult(), BinOp(Name('il', Load(), lineno=203, col_offset=37), Add(), Attribute(Name('self', Load(), lineno=203, col_offset=42), 'nt', Load(), lineno=203, col_offset=42), lineno=203, col_offset=37), lineno=203, col_offset=26), lineno=203, col_offset=15), lineno=203, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('equal', arguments([Name('self', Param(), lineno=207, col_offset=14), Name('other', Param(), lineno=207, col_offset=20)], None, None, []), [Return(Compare(Attribute(Name('self', Load(), lineno=208, col_offset=15), 'norm', Load(), lineno=208, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=208, col_offset=28), 'norm', Load(), lineno=208, col_offset=28)], lineno=208, col_offset=15), lineno=208, col_offset=8)], [], lineno=207, col_offset=4), FunctionDef('not_equal_witness', arguments([Name('self', Param(), lineno=214, col_offset=26), Name('other', Param(), lineno=214, col_offset=32)], None, None, []), [Assign([Name('n', Store(), lineno=215, col_offset=8)], BinOp(Call(Name('max', Load(), lineno=215, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=215, col_offset=16), 'longest_run_of_spaces', Load(), lineno=215, col_offset=16), [], [], None, None, lineno=215, col_offset=16), Call(Attribute(Name('other', Load(), lineno=216, col_offset=16), 'longest_run_of_spaces', Load(), lineno=216, col_offset=16), [], [], None, None, lineno=216, col_offset=16)], [], None, None, lineno=215, col_offset=12), Add(), Num(1, lineno=216, col_offset=49), lineno=215, col_offset=12), lineno=215, col_offset=8), Assign([Name('a', Store(), lineno=217, col_offset=8)], List([], Load(), lineno=217, col_offset=12), lineno=217, col_offset=8), For(Name('ts', Store(), lineno=218, col_offset=12), Call(Name('range', Load(), lineno=218, col_offset=18), [Num(1, lineno=218, col_offset=24), BinOp(Name('n', Load(), lineno=218, col_offset=27), Add(), Num(1, lineno=218, col_offset=29), lineno=218, col_offset=27)], [], None, None, lineno=218, col_offset=18), [If(Compare(Call(Attribute(Name('self', Load(), lineno=219, col_offset=15), 'indent_level', Load(), lineno=219, col_offset=15), [Name('ts', Load(), lineno=219, col_offset=33)], [], None, None, lineno=219, col_offset=15), [NotEq()], [Call(Attribute(Name('other', Load(), lineno=219, col_offset=40), 'indent_level', Load(), lineno=219, col_offset=40), [Name('ts', Load(), lineno=219, col_offset=59)], [], None, None, lineno=219, col_offset=40)], lineno=219, col_offset=15), [Expr(Call(Attribute(Name('a', Load(), lineno=220, col_offset=16), 'append', Load(), lineno=220, col_offset=16), [Tuple([Name('ts', Load(), lineno=220, col_offset=27), Call(Attribute(Name('self', Load(), lineno=221, col_offset=27), 'indent_level', Load(), lineno=221, col_offset=27), [Name('ts', Load(), lineno=221, col_offset=45)], [], None, None, lineno=221, col_offset=27), Call(Attribute(Name('other', Load(), lineno=222, col_offset=27), 'indent_level', Load(), lineno=222, col_offset=27), [Name('ts', Load(), lineno=222, col_offset=46)], [], None, None, lineno=222, col_offset=27)], Load(), lineno=220, col_offset=27)], [], None, None, lineno=220, col_offset=16), lineno=220, col_offset=16)], [], lineno=219, col_offset=12)], [], lineno=218, col_offset=8), Return(Name('a', Load(), lineno=223, col_offset=15), lineno=223, col_offset=8)], [], lineno=214, col_offset=4), FunctionDef('less', arguments([Name('self', Param(), lineno=238, col_offset=13), Name('other', Param(), lineno=238, col_offset=19)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=239, col_offset=11), 'n', Load(), lineno=239, col_offset=11), [GtE()], [Attribute(Name('other', Load(), lineno=239, col_offset=21), 'n', Load(), lineno=239, col_offset=21)], lineno=239, col_offset=11), [Return(Name('False', Load(), lineno=240, col_offset=19), lineno=240, col_offset=12)], [], lineno=239, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=241, col_offset=11), 'is_simple', Load(), lineno=241, col_offset=11), Attribute(Name('other', Load(), lineno=241, col_offset=30), 'is_simple', Load(), lineno=241, col_offset=30)], lineno=241, col_offset=11), [Return(Compare(Attribute(Name('self', Load(), lineno=242, col_offset=19), 'nt', Load(), lineno=242, col_offset=19), [LtE()], [Attribute(Name('other', Load(), lineno=242, col_offset=30), 'nt', Load(), lineno=242, col_offset=30)], lineno=242, col_offset=19), lineno=242, col_offset=12)], [], lineno=241, col_offset=8), Assign([Name('n', Store(), lineno=243, col_offset=8)], BinOp(Call(Name('max', Load(), lineno=243, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=243, col_offset=16), 'longest_run_of_spaces', Load(), lineno=243, col_offset=16), [], [], None, None, lineno=243, col_offset=16), Call(Attribute(Name('other', Load(), lineno=244, col_offset=16), 'longest_run_of_spaces', Load(), lineno=244, col_offset=16), [], [], None, None, lineno=244, col_offset=16)], [], None, None, lineno=243, col_offset=12), Add(), Num(1, lineno=244, col_offset=49), lineno=243, col_offset=12), lineno=243, col_offset=8), For(Name('ts', Store(), lineno=246, col_offset=12), Call(Name('range', Load(), lineno=246, col_offset=18), [Num(2, lineno=246, col_offset=24), BinOp(Name('n', Load(), lineno=246, col_offset=27), Add(), Num(1, lineno=246, col_offset=29), lineno=246, col_offset=27)], [], None, None, lineno=246, col_offset=18), [If(Compare(Call(Attribute(Name('self', Load(), lineno=247, col_offset=15), 'indent_level', Load(), lineno=247, col_offset=15), [Name('ts', Load(), lineno=247, col_offset=33)], [], None, None, lineno=247, col_offset=15), [GtE()], [Call(Attribute(Name('other', Load(), lineno=247, col_offset=40), 'indent_level', Load(), lineno=247, col_offset=40), [Name('ts', Load(), lineno=247, col_offset=59)], [], None, None, lineno=247, col_offset=40)], lineno=247, col_offset=15), [Return(Name('False', Load(), lineno=248, col_offset=23), lineno=248, col_offset=16)], [], lineno=247, col_offset=12)], [], lineno=246, col_offset=8), Return(Name('True', Load(), lineno=249, col_offset=15), lineno=249, col_offset=8)], [], lineno=238, col_offset=4), FunctionDef('not_less_witness', arguments([Name('self', Param(), lineno=255, col_offset=25), Name('other', Param(), lineno=255, col_offset=31)], None, None, []), [Assign([Name('n', Store(), lineno=256, col_offset=8)], BinOp(Call(Name('max', Load(), lineno=256, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=256, col_offset=16), 'longest_run_of_spaces', Load(), lineno=256, col_offset=16), [], [], None, None, lineno=256, col_offset=16), Call(Attribute(Name('other', Load(), lineno=257, col_offset=16), 'longest_run_of_spaces', Load(), lineno=257, col_offset=16), [], [], None, None, lineno=257, col_offset=16)], [], None, None, lineno=256, col_offset=12), Add(), Num(1, lineno=257, col_offset=49), lineno=256, col_offset=12), lineno=256, col_offset=8), Assign([Name('a', Store(), lineno=258, col_offset=8)], List([], Load(), lineno=258, col_offset=12), lineno=258, col_offset=8), For(Name('ts', Store(), lineno=259, col_offset=12), Call(Name('range', Load(), lineno=259, col_offset=18), [Num(1, lineno=259, col_offset=24), BinOp(Name('n', Load(), lineno=259, col_offset=27), Add(), Num(1, lineno=259, col_offset=29), lineno=259, col_offset=27)], [], None, None, lineno=259, col_offset=18), [If(Compare(Call(Attribute(Name('self', Load(), lineno=260, col_offset=15), 'indent_level', Load(), lineno=260, col_offset=15), [Name('ts', Load(), lineno=260, col_offset=33)], [], None, None, lineno=260, col_offset=15), [GtE()], [Call(Attribute(Name('other', Load(), lineno=260, col_offset=40), 'indent_level', Load(), lineno=260, col_offset=40), [Name('ts', Load(), lineno=260, col_offset=59)], [], None, None, lineno=260, col_offset=40)], lineno=260, col_offset=15), [Expr(Call(Attribute(Name('a', Load(), lineno=261, col_offset=16), 'append', Load(), lineno=261, col_offset=16), [Tuple([Name('ts', Load(), lineno=261, col_offset=27), Call(Attribute(Name('self', Load(), lineno=262, col_offset=27), 'indent_level', Load(), lineno=262, col_offset=27), [Name('ts', Load(), lineno=262, col_offset=45)], [], None, None, lineno=262, col_offset=27), Call(Attribute(Name('other', Load(), lineno=263, col_offset=27), 'indent_level', Load(), lineno=263, col_offset=27), [Name('ts', Load(), lineno=263, col_offset=46)], [], None, None, lineno=263, col_offset=27)], Load(), lineno=261, col_offset=27)], [], None, None, lineno=261, col_offset=16), lineno=261, col_offset=16)], [], lineno=260, col_offset=12)], [], lineno=259, col_offset=8), Return(Name('a', Load(), lineno=264, col_offset=15), lineno=264, col_offset=8)], [], lineno=255, col_offset=4)], [], lineno=132, col_offset=0), FunctionDef('format_witnesses', arguments([Name('w', Param(), lineno=266, col_offset=21)], None, None, []), [Assign([Name('firsts', Store(), lineno=267, col_offset=4)], Call(Name('map', Load(), lineno=267, col_offset=13), [Lambda(arguments([Name('tup', Param(), lineno=267, col_offset=24)], None, None, []), Call(Name('str', Load(), lineno=267, col_offset=29), [Subscript(Name('tup', Load(), lineno=267, col_offset=33), Index(Num(0, lineno=267, col_offset=37)), Load(), lineno=267, col_offset=33)], [], None, None, lineno=267, col_offset=29), lineno=267, col_offset=17), Name('w', Load(), lineno=267, col_offset=42)], [], None, None, lineno=267, col_offset=13), lineno=267, col_offset=4), Assign([Name('prefix', Store(), lineno=268, col_offset=4)], Str('at tab size', lineno=268, col_offset=13), lineno=268, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=269, col_offset=7), [Name('w', Load(), lineno=269, col_offset=11)], [], None, None, lineno=269, col_offset=7), [Gt()], [Num(1, lineno=269, col_offset=16)], lineno=269, col_offset=7), [Assign([Name('prefix', Store(), lineno=270, col_offset=8)], BinOp(Name('prefix', Load(), lineno=270, col_offset=17), Add(), Str('s', lineno=270, col_offset=26), lineno=270, col_offset=17), lineno=270, col_offset=8)], [], lineno=269, col_offset=4), Return(BinOp(BinOp(Name('prefix', Load(), lineno=271, col_offset=11), Add(), Str(' ', lineno=271, col_offset=20), lineno=271, col_offset=11), Add(), Call(Attribute(Str(', ', lineno=271, col_offset=26), 'join', Load(), lineno=271, col_offset=26), [Name('firsts', Load(), lineno=271, col_offset=36)], [], None, None, lineno=271, col_offset=26), lineno=271, col_offset=24), lineno=271, col_offset=4)], [], lineno=266, col_offset=0), FunctionDef('process_tokens', arguments([Name('tokens', Param(), lineno=273, col_offset=19)], None, None, []), [Assign([Name('INDENT', Store(), lineno=274, col_offset=4)], Attribute(Name('tokenize', Load(), lineno=274, col_offset=13), 'INDENT', Load(), lineno=274, col_offset=13), lineno=274, col_offset=4), Assign([Name('DEDENT', Store(), lineno=275, col_offset=4)], Attribute(Name('tokenize', Load(), lineno=275, col_offset=13), 'DEDENT', Load(), lineno=275, col_offset=13), lineno=275, col_offset=4), Assign([Name('NEWLINE', Store(), lineno=276, col_offset=4)], Attribute(Name('tokenize', Load(), lineno=276, col_offset=14), 'NEWLINE', Load(), lineno=276, col_offset=14), lineno=276, col_offset=4), Assign([Name('JUNK', Store(), lineno=277, col_offset=4)], Tuple([Attribute(Name('tokenize', Load(), lineno=277, col_offset=11), 'COMMENT', Load(), lineno=277, col_offset=11), Attribute(Name('tokenize', Load(), lineno=277, col_offset=29), 'NL', Load(), lineno=277, col_offset=29)], Load(), lineno=277, col_offset=11), lineno=277, col_offset=4), Assign([Name('indents', Store(), lineno=278, col_offset=4)], List([Call(Name('Whitespace', Load(), lineno=278, col_offset=15), [Str('', lineno=278, col_offset=26)], [], None, None, lineno=278, col_offset=15)], Load(), lineno=278, col_offset=14), lineno=278, col_offset=4), Assign([Name('check_equal', Store(), lineno=279, col_offset=4)], Num(0, lineno=279, col_offset=18), lineno=279, col_offset=4), For(Tuple([Name('type', Store(), lineno=281, col_offset=9), Name('token', Store(), lineno=281, col_offset=15), Name('start', Store(), lineno=281, col_offset=22), Name('end', Store(), lineno=281, col_offset=29), Name('line', Store(), lineno=281, col_offset=34)], Store(), lineno=281, col_offset=9), Name('tokens', Load(), lineno=281, col_offset=43), [If(Compare(Name('type', Load(), lineno=282, col_offset=11), [Eq()], [Name('NEWLINE', Load(), lineno=282, col_offset=19)], lineno=282, col_offset=11), [Assign([Name('check_equal', Store(), lineno=288, col_offset=12)], Num(1, lineno=288, col_offset=26), lineno=288, col_offset=12)], [If(Compare(Name('type', Load(), lineno=290, col_offset=13), [Eq()], [Name('INDENT', Load(), lineno=290, col_offset=21)], lineno=290, col_offset=13), [Assign([Name('check_equal', Store(), lineno=291, col_offset=12)], Num(0, lineno=291, col_offset=26), lineno=291, col_offset=12), Assign([Name('thisguy', Store(), lineno=292, col_offset=12)], Call(Name('Whitespace', Load(), lineno=292, col_offset=22), [Name('token', Load(), lineno=292, col_offset=33)], [], None, None, lineno=292, col_offset=22), lineno=292, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Subscript(Name('indents', Load(), lineno=293, col_offset=19), Index(Num(-1, lineno=293, col_offset=28)), Load(), lineno=293, col_offset=19), 'less', Load(), lineno=293, col_offset=19), [Name('thisguy', Load(), lineno=293, col_offset=36)], [], None, None, lineno=293, col_offset=19), lineno=293, col_offset=15), [Assign([Name('witness', Store(), lineno=294, col_offset=16)], Call(Attribute(Subscript(Name('indents', Load(), lineno=294, col_offset=26), Index(Num(-1, lineno=294, col_offset=35)), Load(), lineno=294, col_offset=26), 'not_less_witness', Load(), lineno=294, col_offset=26), [Name('thisguy', Load(), lineno=294, col_offset=55)], [], None, None, lineno=294, col_offset=26), lineno=294, col_offset=16), Assign([Name('msg', Store(), lineno=295, col_offset=16)], BinOp(Str('indent not greater e.g. ', lineno=295, col_offset=22), Add(), Call(Name('format_witnesses', Load(), lineno=295, col_offset=51), [Name('witness', Load(), lineno=295, col_offset=68)], [], None, None, lineno=295, col_offset=51), lineno=295, col_offset=22), lineno=295, col_offset=16), Raise(Call(Name('NannyNag', Load(), lineno=296, col_offset=22), [Subscript(Name('start', Load(), lineno=296, col_offset=31), Index(Num(0, lineno=296, col_offset=37)), Load(), lineno=296, col_offset=31), Name('msg', Load(), lineno=296, col_offset=41), Name('line', Load(), lineno=296, col_offset=46)], [], None, None, lineno=296, col_offset=22), None, None, lineno=296, col_offset=16)], [], lineno=293, col_offset=12), Expr(Call(Attribute(Name('indents', Load(), lineno=297, col_offset=12), 'append', Load(), lineno=297, col_offset=12), [Name('thisguy', Load(), lineno=297, col_offset=27)], [], None, None, lineno=297, col_offset=12), lineno=297, col_offset=12)], [If(Compare(Name('type', Load(), lineno=299, col_offset=13), [Eq()], [Name('DEDENT', Load(), lineno=299, col_offset=21)], lineno=299, col_offset=13), [Assign([Name('check_equal', Store(), lineno=309, col_offset=12)], Num(1, lineno=309, col_offset=26), lineno=309, col_offset=12), Delete([Subscript(Name('indents', Load(), lineno=311, col_offset=16), Index(Num(-1, lineno=311, col_offset=25)), Del(), lineno=311, col_offset=16)], lineno=311, col_offset=12)], [If(BoolOp(And(), [Name('check_equal', Load(), lineno=313, col_offset=13), Compare(Name('type', Load(), lineno=313, col_offset=29), [NotIn()], [Name('JUNK', Load(), lineno=313, col_offset=41)], lineno=313, col_offset=29)], lineno=313, col_offset=13), [Assign([Name('check_equal', Store(), lineno=320, col_offset=12)], Num(0, lineno=320, col_offset=26), lineno=320, col_offset=12), Assign([Name('thisguy', Store(), lineno=321, col_offset=12)], Call(Name('Whitespace', Load(), lineno=321, col_offset=22), [Name('line', Load(), lineno=321, col_offset=33)], [], None, None, lineno=321, col_offset=22), lineno=321, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Subscript(Name('indents', Load(), lineno=322, col_offset=19), Index(Num(-1, lineno=322, col_offset=28)), Load(), lineno=322, col_offset=19), 'equal', Load(), lineno=322, col_offset=19), [Name('thisguy', Load(), lineno=322, col_offset=37)], [], None, None, lineno=322, col_offset=19), lineno=322, col_offset=15), [Assign([Name('witness', Store(), lineno=323, col_offset=16)], Call(Attribute(Subscript(Name('indents', Load(), lineno=323, col_offset=26), Index(Num(-1, lineno=323, col_offset=35)), Load(), lineno=323, col_offset=26), 'not_equal_witness', Load(), lineno=323, col_offset=26), [Name('thisguy', Load(), lineno=323, col_offset=56)], [], None, None, lineno=323, col_offset=26), lineno=323, col_offset=16), Assign([Name('msg', Store(), lineno=324, col_offset=16)], BinOp(Str('indent not equal e.g. ', lineno=324, col_offset=22), Add(), Call(Name('format_witnesses', Load(), lineno=324, col_offset=49), [Name('witness', Load(), lineno=324, col_offset=66)], [], None, None, lineno=324, col_offset=49), lineno=324, col_offset=22), lineno=324, col_offset=16), Raise(Call(Name('NannyNag', Load(), lineno=325, col_offset=22), [Subscript(Name('start', Load(), lineno=325, col_offset=31), Index(Num(0, lineno=325, col_offset=37)), Load(), lineno=325, col_offset=31), Name('msg', Load(), lineno=325, col_offset=41), Name('line', Load(), lineno=325, col_offset=46)], [], None, None, lineno=325, col_offset=22), None, None, lineno=325, col_offset=16)], [], lineno=322, col_offset=12)], [], lineno=313, col_offset=13)], lineno=299, col_offset=13)], lineno=290, col_offset=13)], lineno=282, col_offset=8)], [], lineno=281, col_offset=4)], [], lineno=273, col_offset=0), If(Compare(Name('__name__', Load(), lineno=328, col_offset=3), [Eq()], [Str('__main__', lineno=328, col_offset=15)], lineno=328, col_offset=3), [Expr(Call(Name('main', Load(), lineno=329, col_offset=4), [], [], None, None, lineno=329, col_offset=4), lineno=329, col_offset=4)], [], lineno=328, col_offset=0)])
