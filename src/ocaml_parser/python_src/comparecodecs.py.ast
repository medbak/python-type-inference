Module([Expr(Str(' Compare the output of two codecs.\n\n(c) Copyright 2005, Marc-Andre Lemburg (mal@lemburg.com).\n\n    Licensed to PSF under a Contributor Agreement.\n\n', lineno=9, col_offset=-1), lineno=9, col_offset=-1), Import([alias('sys', None)], lineno=10, col_offset=0), FunctionDef('compare_codecs', arguments([Name('encoding1', Param(), lineno=12, col_offset=19), Name('encoding2', Param(), lineno=12, col_offset=30)], None, None, []), [Print(None, [BinOp(Str('Comparing encoding/decoding of   %r and   %r', lineno=14, col_offset=10), Mod(), Tuple([Name('encoding1', Load(), lineno=14, col_offset=60), Name('encoding2', Load(), lineno=14, col_offset=71)], Load(), lineno=14, col_offset=60), lineno=14, col_offset=10)], True, lineno=14, col_offset=4), Assign([Name('mismatch', Store(), lineno=15, col_offset=4)], Num(0, lineno=15, col_offset=15), lineno=15, col_offset=4), For(Name('i', Store(), lineno=17, col_offset=8), Call(Name('range', Load(), lineno=17, col_offset=13), [Attribute(Name('sys', Load(), lineno=17, col_offset=19), 'maxunicode', Load(), lineno=17, col_offset=19)], [], None, None, lineno=17, col_offset=13), [Assign([Name('u', Store(), lineno=18, col_offset=8)], Call(Name('unichr', Load(), lineno=18, col_offset=12), [Name('i', Load(), lineno=18, col_offset=19)], [], None, None, lineno=18, col_offset=12), lineno=18, col_offset=8), TryExcept([Assign([Name('c1', Store(), lineno=20, col_offset=12)], Call(Attribute(Name('u', Load(), lineno=20, col_offset=17), 'encode', Load(), lineno=20, col_offset=17), [Name('encoding1', Load(), lineno=20, col_offset=26)], [], None, None, lineno=20, col_offset=17), lineno=20, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=21, col_offset=15), Name('reason', Store(), lineno=21, col_offset=29), [Assign([Name('c1', Store(), lineno=22, col_offset=12)], Str('<undefined>', lineno=22, col_offset=17), lineno=22, col_offset=12)], lineno=21, col_offset=8)], [], lineno=19, col_offset=8), TryExcept([Assign([Name('c2', Store(), lineno=24, col_offset=12)], Call(Attribute(Name('u', Load(), lineno=24, col_offset=17), 'encode', Load(), lineno=24, col_offset=17), [Name('encoding2', Load(), lineno=24, col_offset=26)], [], None, None, lineno=24, col_offset=17), lineno=24, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=25, col_offset=15), Name('reason', Store(), lineno=25, col_offset=29), [Assign([Name('c2', Store(), lineno=26, col_offset=12)], Str('<undefined>', lineno=26, col_offset=17), lineno=26, col_offset=12)], lineno=25, col_offset=8)], [], lineno=23, col_offset=8), If(Compare(Name('c1', Load(), lineno=27, col_offset=11), [NotEq()], [Name('c2', Load(), lineno=27, col_offset=17)], lineno=27, col_offset=11), [Print(None, [BinOp(Str(' * encoding mismatch for 0x%04X: %-14r != %r', lineno=28, col_offset=18), Mod(), Tuple([Name('i', Load(), lineno=29, col_offset=19), Name('c1', Load(), lineno=29, col_offset=22), Name('c2', Load(), lineno=29, col_offset=26)], Load(), lineno=29, col_offset=19), lineno=28, col_offset=18)], True, lineno=28, col_offset=12), AugAssign(Name('mismatch', Store(), lineno=30, col_offset=12), Add(), Num(1, lineno=30, col_offset=24), lineno=30, col_offset=12)], [], lineno=27, col_offset=8)], [], lineno=17, col_offset=4), For(Name('i', Store(), lineno=32, col_offset=8), Call(Name('range', Load(), lineno=32, col_offset=13), [Num(256, lineno=32, col_offset=19)], [], None, None, lineno=32, col_offset=13), [Assign([Name('c', Store(), lineno=33, col_offset=8)], Call(Name('chr', Load(), lineno=33, col_offset=12), [Name('i', Load(), lineno=33, col_offset=16)], [], None, None, lineno=33, col_offset=12), lineno=33, col_offset=8), TryExcept([Assign([Name('u1', Store(), lineno=35, col_offset=12)], Call(Attribute(Name('c', Load(), lineno=35, col_offset=17), 'decode', Load(), lineno=35, col_offset=17), [Name('encoding1', Load(), lineno=35, col_offset=26)], [], None, None, lineno=35, col_offset=17), lineno=35, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=36, col_offset=15), None, [Assign([Name('u1', Store(), lineno=37, col_offset=12)], Str(u'<undefined>', lineno=37, col_offset=17), lineno=37, col_offset=12)], lineno=36, col_offset=8)], [], lineno=34, col_offset=8), TryExcept([Assign([Name('u2', Store(), lineno=39, col_offset=12)], Call(Attribute(Name('c', Load(), lineno=39, col_offset=17), 'decode', Load(), lineno=39, col_offset=17), [Name('encoding2', Load(), lineno=39, col_offset=26)], [], None, None, lineno=39, col_offset=17), lineno=39, col_offset=12)], [ExceptHandler(Name('UnicodeError', Load(), lineno=40, col_offset=15), None, [Assign([Name('u2', Store(), lineno=41, col_offset=12)], Str(u'<undefined>', lineno=41, col_offset=17), lineno=41, col_offset=12)], lineno=40, col_offset=8)], [], lineno=38, col_offset=8), If(Compare(Name('u1', Load(), lineno=42, col_offset=11), [NotEq()], [Name('u2', Load(), lineno=42, col_offset=17)], lineno=42, col_offset=11), [Print(None, [BinOp(Str(' * decoding mismatch for 0x%04X: %-14r != %r', lineno=43, col_offset=18), Mod(), Tuple([Name('i', Load(), lineno=44, col_offset=19), Name('u1', Load(), lineno=44, col_offset=22), Name('u2', Load(), lineno=44, col_offset=26)], Load(), lineno=44, col_offset=19), lineno=43, col_offset=18)], True, lineno=43, col_offset=12), AugAssign(Name('mismatch', Store(), lineno=45, col_offset=12), Add(), Num(1, lineno=45, col_offset=24), lineno=45, col_offset=12)], [], lineno=42, col_offset=8)], [], lineno=32, col_offset=4), If(Name('mismatch', Load(), lineno=46, col_offset=7), [Print(None, [], True, lineno=47, col_offset=8), Print(None, [BinOp(Str('Found %i mismatches', lineno=48, col_offset=14), Mod(), Name('mismatch', Load(), lineno=48, col_offset=38), lineno=48, col_offset=14)], True, lineno=48, col_offset=8)], [Print(None, [Str('-> Codecs are identical.', lineno=50, col_offset=14)], True, lineno=50, col_offset=8)], lineno=46, col_offset=4)], [], lineno=12, col_offset=0), If(Compare(Name('__name__', Load(), lineno=52, col_offset=3), [Eq()], [Str('__main__', lineno=52, col_offset=15)], lineno=52, col_offset=3), [Expr(Call(Name('compare_codecs', Load(), lineno=53, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=53, col_offset=19), 'argv', Load(), lineno=53, col_offset=19), Index(Num(1, lineno=53, col_offset=28)), Load(), lineno=53, col_offset=19), Subscript(Attribute(Name('sys', Load(), lineno=53, col_offset=32), 'argv', Load(), lineno=53, col_offset=32), Index(Num(2, lineno=53, col_offset=41)), Load(), lineno=53, col_offset=32)], [], None, None, lineno=53, col_offset=4), lineno=53, col_offset=4)], [], lineno=52, col_offset=0)])
