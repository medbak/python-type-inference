Module([Expr(Str("Provide access to Python's configuration information.\n\n", lineno=3, col_offset=-1), lineno=3, col_offset=-1), Import([alias('sys', None)], lineno=4, col_offset=0), Import([alias('os', None)], lineno=5, col_offset=0), ImportFrom('os.path', [alias('pardir', None), alias('realpath', None)], 0, lineno=6, col_offset=0), Assign([Name('_INSTALL_SCHEMES', Store(), lineno=8, col_offset=0)], Dict([Str('posix_prefix', lineno=9, col_offset=4), Str('posix_home', lineno=19, col_offset=4), Str('nt', lineno=29, col_offset=4), Str('os2', lineno=39, col_offset=4), Str('os2_home', lineno=49, col_offset=4), Str('nt_user', lineno=58, col_offset=4), Str('posix_user', lineno=67, col_offset=4), Str('osx_framework_user', lineno=76, col_offset=4)], [Dict([Str('stdlib', lineno=10, col_offset=8), Str('platstdlib', lineno=11, col_offset=8), Str('purelib', lineno=12, col_offset=8), Str('platlib', lineno=13, col_offset=8), Str('include', lineno=14, col_offset=8), Str('platinclude', lineno=15, col_offset=8), Str('scripts', lineno=16, col_offset=8), Str('data', lineno=17, col_offset=8)], [Str('{base}/lib/python{py_version_short}', lineno=10, col_offset=18), Str('{platbase}/lib/python{py_version_short}', lineno=11, col_offset=22), Str('{base}/lib/python{py_version_short}/site-packages', lineno=12, col_offset=19), Str('{platbase}/lib/python{py_version_short}/site-packages', lineno=13, col_offset=19), Str('{base}/include/python{py_version_short}', lineno=14, col_offset=19), Str('{platbase}/include/python{py_version_short}', lineno=15, col_offset=23), Str('{base}/bin', lineno=16, col_offset=19), Str('{base}', lineno=17, col_offset=16)], lineno=9, col_offset=20), Dict([Str('stdlib', lineno=20, col_offset=8), Str('platstdlib', lineno=21, col_offset=8), Str('purelib', lineno=22, col_offset=8), Str('platlib', lineno=23, col_offset=8), Str('include', lineno=24, col_offset=8), Str('platinclude', lineno=25, col_offset=8), Str('scripts', lineno=26, col_offset=8), Str('data', lineno=27, col_offset=8)], [Str('{base}/lib/python', lineno=20, col_offset=18), Str('{base}/lib/python', lineno=21, col_offset=22), Str('{base}/lib/python', lineno=22, col_offset=19), Str('{base}/lib/python', lineno=23, col_offset=19), Str('{base}/include/python', lineno=24, col_offset=19), Str('{base}/include/python', lineno=25, col_offset=23), Str('{base}/bin', lineno=26, col_offset=19), Str('{base}', lineno=27, col_offset=19)], lineno=19, col_offset=18), Dict([Str('stdlib', lineno=30, col_offset=8), Str('platstdlib', lineno=31, col_offset=8), Str('purelib', lineno=32, col_offset=8), Str('platlib', lineno=33, col_offset=8), Str('include', lineno=34, col_offset=8), Str('platinclude', lineno=35, col_offset=8), Str('scripts', lineno=36, col_offset=8), Str('data', lineno=37, col_offset=8)], [Str('{base}/Lib', lineno=30, col_offset=18), Str('{base}/Lib', lineno=31, col_offset=22), Str('{base}/Lib/site-packages', lineno=32, col_offset=19), Str('{base}/Lib/site-packages', lineno=33, col_offset=19), Str('{base}/Include', lineno=34, col_offset=19), Str('{base}/Include', lineno=35, col_offset=23), Str('{base}/Scripts', lineno=36, col_offset=19), Str('{base}', lineno=37, col_offset=19)], lineno=29, col_offset=10), Dict([Str('stdlib', lineno=40, col_offset=8), Str('platstdlib', lineno=41, col_offset=8), Str('purelib', lineno=42, col_offset=8), Str('platlib', lineno=43, col_offset=8), Str('include', lineno=44, col_offset=8), Str('platinclude', lineno=45, col_offset=8), Str('scripts', lineno=46, col_offset=8), Str('data', lineno=47, col_offset=8)], [Str('{base}/Lib', lineno=40, col_offset=18), Str('{base}/Lib', lineno=41, col_offset=22), Str('{base}/Lib/site-packages', lineno=42, col_offset=19), Str('{base}/Lib/site-packages', lineno=43, col_offset=19), Str('{base}/Include', lineno=44, col_offset=19), Str('{base}/Include', lineno=45, col_offset=23), Str('{base}/Scripts', lineno=46, col_offset=19), Str('{base}', lineno=47, col_offset=19)], lineno=39, col_offset=11), Dict([Str('stdlib', lineno=50, col_offset=8), Str('platstdlib', lineno=51, col_offset=8), Str('purelib', lineno=52, col_offset=8), Str('platlib', lineno=53, col_offset=8), Str('include', lineno=54, col_offset=8), Str('scripts', lineno=55, col_offset=8), Str('data', lineno=56, col_offset=8)], [Str('{userbase}/lib/python{py_version_short}', lineno=50, col_offset=18), Str('{userbase}/lib/python{py_version_short}', lineno=51, col_offset=22), Str('{userbase}/lib/python{py_version_short}/site-packages', lineno=52, col_offset=19), Str('{userbase}/lib/python{py_version_short}/site-packages', lineno=53, col_offset=19), Str('{userbase}/include/python{py_version_short}', lineno=54, col_offset=19), Str('{userbase}/bin', lineno=55, col_offset=19), Str('{userbase}', lineno=56, col_offset=19)], lineno=49, col_offset=16), Dict([Str('stdlib', lineno=59, col_offset=8), Str('platstdlib', lineno=60, col_offset=8), Str('purelib', lineno=61, col_offset=8), Str('platlib', lineno=62, col_offset=8), Str('include', lineno=63, col_offset=8), Str('scripts', lineno=64, col_offset=8), Str('data', lineno=65, col_offset=8)], [Str('{userbase}/Python{py_version_nodot}', lineno=59, col_offset=18), Str('{userbase}/Python{py_version_nodot}', lineno=60, col_offset=22), Str('{userbase}/Python{py_version_nodot}/site-packages', lineno=61, col_offset=19), Str('{userbase}/Python{py_version_nodot}/site-packages', lineno=62, col_offset=19), Str('{userbase}/Python{py_version_nodot}/Include', lineno=63, col_offset=19), Str('{userbase}/Scripts', lineno=64, col_offset=19), Str('{userbase}', lineno=65, col_offset=19)], lineno=58, col_offset=15), Dict([Str('stdlib', lineno=68, col_offset=8), Str('platstdlib', lineno=69, col_offset=8), Str('purelib', lineno=70, col_offset=8), Str('platlib', lineno=71, col_offset=8), Str('include', lineno=72, col_offset=8), Str('scripts', lineno=73, col_offset=8), Str('data', lineno=74, col_offset=8)], [Str('{userbase}/lib/python{py_version_short}', lineno=68, col_offset=18), Str('{userbase}/lib/python{py_version_short}', lineno=69, col_offset=22), Str('{userbase}/lib/python{py_version_short}/site-packages', lineno=70, col_offset=19), Str('{userbase}/lib/python{py_version_short}/site-packages', lineno=71, col_offset=19), Str('{userbase}/include/python{py_version_short}', lineno=72, col_offset=19), Str('{userbase}/bin', lineno=73, col_offset=19), Str('{userbase}', lineno=74, col_offset=19)], lineno=67, col_offset=18), Dict([Str('stdlib', lineno=77, col_offset=8), Str('platstdlib', lineno=78, col_offset=8), Str('purelib', lineno=79, col_offset=8), Str('platlib', lineno=80, col_offset=8), Str('include', lineno=81, col_offset=8), Str('scripts', lineno=82, col_offset=8), Str('data', lineno=83, col_offset=8)], [Str('{userbase}/lib/python', lineno=77, col_offset=18), Str('{userbase}/lib/python', lineno=78, col_offset=22), Str('{userbase}/lib/python/site-packages', lineno=79, col_offset=19), Str('{userbase}/lib/python/site-packages', lineno=80, col_offset=19), Str('{userbase}/include', lineno=81, col_offset=19), Str('{userbase}/bin', lineno=82, col_offset=19), Str('{userbase}', lineno=83, col_offset=19)], lineno=76, col_offset=26)], lineno=8, col_offset=19), lineno=8, col_offset=0), Assign([Name('_SCHEME_KEYS', Store(), lineno=87, col_offset=0)], Tuple([Str('stdlib', lineno=87, col_offset=16), Str('platstdlib', lineno=87, col_offset=26), Str('purelib', lineno=87, col_offset=40), Str('platlib', lineno=87, col_offset=51), Str('include', lineno=87, col_offset=62), Str('scripts', lineno=88, col_offset=16), Str('data', lineno=88, col_offset=27)], Load(), lineno=87, col_offset=16), lineno=87, col_offset=0), Assign([Name('_PY_VERSION', Store(), lineno=89, col_offset=0)], Subscript(Call(Attribute(Attribute(Name('sys', Load(), lineno=89, col_offset=14), 'version', Load(), lineno=89, col_offset=14), 'split', Load(), lineno=89, col_offset=14), [], [], None, None, lineno=89, col_offset=14), Index(Num(0, lineno=89, col_offset=34)), Load(), lineno=89, col_offset=14), lineno=89, col_offset=0), Assign([Name('_PY_VERSION_SHORT', Store(), lineno=90, col_offset=0)], Subscript(Attribute(Name('sys', Load(), lineno=90, col_offset=20), 'version', Load(), lineno=90, col_offset=20), Slice(None, Num(3, lineno=90, col_offset=33), None), Load(), lineno=90, col_offset=20), lineno=90, col_offset=0), Assign([Name('_PY_VERSION_SHORT_NO_DOT', Store(), lineno=91, col_offset=0)], BinOp(Subscript(Name('_PY_VERSION', Load(), lineno=91, col_offset=27), Index(Num(0, lineno=91, col_offset=39)), Load(), lineno=91, col_offset=27), Add(), Subscript(Name('_PY_VERSION', Load(), lineno=91, col_offset=44), Index(Num(2, lineno=91, col_offset=56)), Load(), lineno=91, col_offset=44), lineno=91, col_offset=27), lineno=91, col_offset=0), Assign([Name('_PREFIX', Store(), lineno=92, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=92, col_offset=10), 'path', Load(), lineno=92, col_offset=10), 'normpath', Load(), lineno=92, col_offset=10), [Attribute(Name('sys', Load(), lineno=92, col_offset=27), 'prefix', Load(), lineno=92, col_offset=27)], [], None, None, lineno=92, col_offset=10), lineno=92, col_offset=0), Assign([Name('_EXEC_PREFIX', Store(), lineno=93, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=93, col_offset=15), 'path', Load(), lineno=93, col_offset=15), 'normpath', Load(), lineno=93, col_offset=15), [Attribute(Name('sys', Load(), lineno=93, col_offset=32), 'exec_prefix', Load(), lineno=93, col_offset=32)], [], None, None, lineno=93, col_offset=15), lineno=93, col_offset=0), Assign([Name('_CONFIG_VARS', Store(), lineno=94, col_offset=0)], Name('None', Load(), lineno=94, col_offset=15), lineno=94, col_offset=0), Assign([Name('_USER_BASE', Store(), lineno=95, col_offset=0)], Name('None', Load(), lineno=95, col_offset=13), lineno=95, col_offset=0), FunctionDef('_safe_realpath', arguments([Name('path', Param(), lineno=97, col_offset=19)], None, None, []), [TryExcept([Return(Call(Name('realpath', Load(), lineno=99, col_offset=15), [Name('path', Load(), lineno=99, col_offset=24)], [], None, None, lineno=99, col_offset=15), lineno=99, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=100, col_offset=11), None, [Return(Name('path', Load(), lineno=101, col_offset=15), lineno=101, col_offset=8)], lineno=100, col_offset=4)], [], lineno=98, col_offset=4)], [], lineno=97, col_offset=0), If(Attribute(Name('sys', Load(), lineno=103, col_offset=3), 'executable', Load(), lineno=103, col_offset=3), [Assign([Name('_PROJECT_BASE', Store(), lineno=104, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=104, col_offset=20), 'path', Load(), lineno=104, col_offset=20), 'dirname', Load(), lineno=104, col_offset=20), [Call(Name('_safe_realpath', Load(), lineno=104, col_offset=36), [Attribute(Name('sys', Load(), lineno=104, col_offset=51), 'executable', Load(), lineno=104, col_offset=51)], [], None, None, lineno=104, col_offset=36)], [], None, None, lineno=104, col_offset=20), lineno=104, col_offset=4)], [Assign([Name('_PROJECT_BASE', Store(), lineno=108, col_offset=4)], Call(Name('_safe_realpath', Load(), lineno=108, col_offset=20), [Call(Attribute(Name('os', Load(), lineno=108, col_offset=35), 'getcwd', Load(), lineno=108, col_offset=35), [], [], None, None, lineno=108, col_offset=35)], [], None, None, lineno=108, col_offset=20), lineno=108, col_offset=4)], lineno=103, col_offset=0), If(BoolOp(And(), [Compare(Attribute(Name('os', Load(), lineno=110, col_offset=3), 'name', Load(), lineno=110, col_offset=3), [Eq()], [Str('nt', lineno=110, col_offset=14)], lineno=110, col_offset=3), Compare(Str('pcbuild', lineno=110, col_offset=23), [In()], [Call(Attribute(Subscript(Name('_PROJECT_BASE', Load(), lineno=110, col_offset=36), Slice(Num(-8, lineno=110, col_offset=51), None, None), Load(), lineno=110, col_offset=36), 'lower', Load(), lineno=110, col_offset=36), [], [], None, None, lineno=110, col_offset=36)], lineno=110, col_offset=23)], lineno=110, col_offset=3), [Assign([Name('_PROJECT_BASE', Store(), lineno=111, col_offset=4)], Call(Name('_safe_realpath', Load(), lineno=111, col_offset=20), [Call(Attribute(Attribute(Name('os', Load(), lineno=111, col_offset=35), 'path', Load(), lineno=111, col_offset=35), 'join', Load(), lineno=111, col_offset=35), [Name('_PROJECT_BASE', Load(), lineno=111, col_offset=48), Name('pardir', Load(), lineno=111, col_offset=63)], [], None, None, lineno=111, col_offset=35)], [], None, None, lineno=111, col_offset=20), lineno=111, col_offset=4)], [], lineno=110, col_offset=0), If(BoolOp(And(), [Compare(Attribute(Name('os', Load(), lineno=113, col_offset=3), 'name', Load(), lineno=113, col_offset=3), [Eq()], [Str('nt', lineno=113, col_offset=14)], lineno=113, col_offset=3), Compare(Str('\\pc\\v', lineno=113, col_offset=23), [In()], [Call(Attribute(Subscript(Name('_PROJECT_BASE', Load(), lineno=113, col_offset=36), Slice(Num(-10, lineno=113, col_offset=51), None, None), Load(), lineno=113, col_offset=36), 'lower', Load(), lineno=113, col_offset=36), [], [], None, None, lineno=113, col_offset=36)], lineno=113, col_offset=23)], lineno=113, col_offset=3), [Assign([Name('_PROJECT_BASE', Store(), lineno=114, col_offset=4)], Call(Name('_safe_realpath', Load(), lineno=114, col_offset=20), [Call(Attribute(Attribute(Name('os', Load(), lineno=114, col_offset=35), 'path', Load(), lineno=114, col_offset=35), 'join', Load(), lineno=114, col_offset=35), [Name('_PROJECT_BASE', Load(), lineno=114, col_offset=48), Name('pardir', Load(), lineno=114, col_offset=63), Name('pardir', Load(), lineno=114, col_offset=71)], [], None, None, lineno=114, col_offset=35)], [], None, None, lineno=114, col_offset=20), lineno=114, col_offset=4)], [], lineno=113, col_offset=0), If(BoolOp(And(), [Compare(Attribute(Name('os', Load(), lineno=116, col_offset=3), 'name', Load(), lineno=116, col_offset=3), [Eq()], [Str('nt', lineno=116, col_offset=14)], lineno=116, col_offset=3), Compare(Str('\\pcbuild\\amd64', lineno=116, col_offset=23), [In()], [Call(Attribute(Subscript(Name('_PROJECT_BASE', Load(), lineno=116, col_offset=45), Slice(Num(-14, lineno=116, col_offset=60), None, None), Load(), lineno=116, col_offset=45), 'lower', Load(), lineno=116, col_offset=45), [], [], None, None, lineno=116, col_offset=45)], lineno=116, col_offset=23)], lineno=116, col_offset=3), [Assign([Name('_PROJECT_BASE', Store(), lineno=117, col_offset=4)], Call(Name('_safe_realpath', Load(), lineno=117, col_offset=20), [Call(Attribute(Attribute(Name('os', Load(), lineno=117, col_offset=35), 'path', Load(), lineno=117, col_offset=35), 'join', Load(), lineno=117, col_offset=35), [Name('_PROJECT_BASE', Load(), lineno=117, col_offset=48), Name('pardir', Load(), lineno=117, col_offset=63), Name('pardir', Load(), lineno=117, col_offset=71)], [], None, None, lineno=117, col_offset=35)], [], None, None, lineno=117, col_offset=20), lineno=117, col_offset=4)], [], lineno=116, col_offset=0), FunctionDef('is_python_build', arguments([], None, None, []), [For(Name('fn', Store(), lineno=120, col_offset=8), Tuple([Str('Setup.dist', lineno=120, col_offset=15), Str('Setup.local', lineno=120, col_offset=29)], Load(), lineno=120, col_offset=15), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=121, col_offset=11), 'path', Load(), lineno=121, col_offset=11), 'isfile', Load(), lineno=121, col_offset=11), [Call(Attribute(Attribute(Name('os', Load(), lineno=121, col_offset=26), 'path', Load(), lineno=121, col_offset=26), 'join', Load(), lineno=121, col_offset=26), [Name('_PROJECT_BASE', Load(), lineno=121, col_offset=39), Str('Modules', lineno=121, col_offset=54), Name('fn', Load(), lineno=121, col_offset=65)], [], None, None, lineno=121, col_offset=26)], [], None, None, lineno=121, col_offset=11), [Return(Name('True', Load(), lineno=122, col_offset=19), lineno=122, col_offset=12)], [], lineno=121, col_offset=8)], [], lineno=120, col_offset=4), Return(Name('False', Load(), lineno=123, col_offset=11), lineno=123, col_offset=4)], [], lineno=119, col_offset=0), Assign([Name('_PYTHON_BUILD', Store(), lineno=125, col_offset=0)], Call(Name('is_python_build', Load(), lineno=125, col_offset=16), [], [], None, None, lineno=125, col_offset=16), lineno=125, col_offset=0), If(Name('_PYTHON_BUILD', Load(), lineno=127, col_offset=3), [For(Name('scheme', Store(), lineno=128, col_offset=8), Tuple([Str('posix_prefix', lineno=128, col_offset=19), Str('posix_home', lineno=128, col_offset=35)], Load(), lineno=128, col_offset=19), [Assign([Subscript(Subscript(Name('_INSTALL_SCHEMES', Load(), lineno=129, col_offset=8), Index(Name('scheme', Load(), lineno=129, col_offset=25)), Load(), lineno=129, col_offset=8), Index(Str('include', lineno=129, col_offset=33)), Store(), lineno=129, col_offset=8)], Str('{projectbase}/Include', lineno=129, col_offset=46), lineno=129, col_offset=8), Assign([Subscript(Subscript(Name('_INSTALL_SCHEMES', Load(), lineno=130, col_offset=8), Index(Name('scheme', Load(), lineno=130, col_offset=25)), Load(), lineno=130, col_offset=8), Index(Str('platinclude', lineno=130, col_offset=33)), Store(), lineno=130, col_offset=8)], Str('{srcdir}', lineno=130, col_offset=50), lineno=130, col_offset=8)], [], lineno=128, col_offset=4)], [], lineno=127, col_offset=0), FunctionDef('_subst_vars', arguments([Name('s', Param(), lineno=132, col_offset=16), Name('local_vars', Param(), lineno=132, col_offset=19)], None, None, []), [TryExcept([Return(Call(Attribute(Name('s', Load(), lineno=134, col_offset=15), 'format', Load(), lineno=134, col_offset=15), [], [], None, Name('local_vars', Load(), lineno=134, col_offset=26), lineno=134, col_offset=15), lineno=134, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=135, col_offset=11), None, [TryExcept([Return(Call(Attribute(Name('s', Load(), lineno=137, col_offset=19), 'format', Load(), lineno=137, col_offset=19), [], [], None, Attribute(Name('os', Load(), lineno=137, col_offset=30), 'environ', Load(), lineno=137, col_offset=30), lineno=137, col_offset=19), lineno=137, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=138, col_offset=15), Name('var', Store(), lineno=138, col_offset=25), [Raise(Call(Name('AttributeError', Load(), lineno=139, col_offset=18), [BinOp(Str('{%s}', lineno=139, col_offset=33), Mod(), Name('var', Load(), lineno=139, col_offset=42), lineno=139, col_offset=33)], [], None, None, lineno=139, col_offset=18), None, None, lineno=139, col_offset=12)], lineno=138, col_offset=8)], [], lineno=136, col_offset=8)], lineno=135, col_offset=4)], [], lineno=133, col_offset=4)], [], lineno=132, col_offset=0), FunctionDef('_extend_dict', arguments([Name('target_dict', Param(), lineno=141, col_offset=17), Name('other_dict', Param(), lineno=141, col_offset=30)], None, None, []), [Assign([Name('target_keys', Store(), lineno=142, col_offset=4)], Call(Attribute(Name('target_dict', Load(), lineno=142, col_offset=18), 'keys', Load(), lineno=142, col_offset=18), [], [], None, None, lineno=142, col_offset=18), lineno=142, col_offset=4), For(Tuple([Name('key', Store(), lineno=143, col_offset=8), Name('value', Store(), lineno=143, col_offset=13)], Store(), lineno=143, col_offset=8), Call(Attribute(Name('other_dict', Load(), lineno=143, col_offset=22), 'items', Load(), lineno=143, col_offset=22), [], [], None, None, lineno=143, col_offset=22), [If(Compare(Name('key', Load(), lineno=144, col_offset=11), [In()], [Name('target_keys', Load(), lineno=144, col_offset=18)], lineno=144, col_offset=11), [Continue( lineno=145, col_offset=12)], [], lineno=144, col_offset=8), Assign([Subscript(Name('target_dict', Load(), lineno=146, col_offset=8), Index(Name('key', Load(), lineno=146, col_offset=20)), Store(), lineno=146, col_offset=8)], Name('value', Load(), lineno=146, col_offset=27), lineno=146, col_offset=8)], [], lineno=143, col_offset=4)], [], lineno=141, col_offset=0), FunctionDef('_expand_vars', arguments([Name('scheme', Param(), lineno=148, col_offset=17), Name('vars', Param(), lineno=148, col_offset=25)], None, None, []), [Assign([Name('res', Store(), lineno=149, col_offset=4)], Dict([], [], lineno=149, col_offset=10), lineno=149, col_offset=4), If(Compare(Name('vars', Load(), lineno=150, col_offset=7), [Is()], [Name('None', Load(), lineno=150, col_offset=15)], lineno=150, col_offset=7), [Assign([Name('vars', Store(), lineno=151, col_offset=8)], Dict([], [], lineno=151, col_offset=15), lineno=151, col_offset=8)], [], lineno=150, col_offset=4), Expr(Call(Name('_extend_dict', Load(), lineno=152, col_offset=4), [Name('vars', Load(), lineno=152, col_offset=17), Call(Name('get_config_vars', Load(), lineno=152, col_offset=23), [], [], None, None, lineno=152, col_offset=23)], [], None, None, lineno=152, col_offset=4), lineno=152, col_offset=4), For(Tuple([Name('key', Store(), lineno=154, col_offset=8), Name('value', Store(), lineno=154, col_offset=13)], Store(), lineno=154, col_offset=8), Call(Attribute(Subscript(Name('_INSTALL_SCHEMES', Load(), lineno=154, col_offset=22), Index(Name('scheme', Load(), lineno=154, col_offset=39)), Load(), lineno=154, col_offset=22), 'items', Load(), lineno=154, col_offset=22), [], [], None, None, lineno=154, col_offset=22), [If(Compare(Attribute(Name('os', Load(), lineno=155, col_offset=11), 'name', Load(), lineno=155, col_offset=11), [In()], [Tuple([Str('posix', lineno=155, col_offset=23), Str('nt', lineno=155, col_offset=32)], Load(), lineno=155, col_offset=23)], lineno=155, col_offset=11), [Assign([Name('value', Store(), lineno=156, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=156, col_offset=20), 'path', Load(), lineno=156, col_offset=20), 'expanduser', Load(), lineno=156, col_offset=20), [Name('value', Load(), lineno=156, col_offset=39)], [], None, None, lineno=156, col_offset=20), lineno=156, col_offset=12)], [], lineno=155, col_offset=8), Assign([Subscript(Name('res', Load(), lineno=157, col_offset=8), Index(Name('key', Load(), lineno=157, col_offset=12)), Store(), lineno=157, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=157, col_offset=19), 'path', Load(), lineno=157, col_offset=19), 'normpath', Load(), lineno=157, col_offset=19), [Call(Name('_subst_vars', Load(), lineno=157, col_offset=36), [Name('value', Load(), lineno=157, col_offset=48), Name('vars', Load(), lineno=157, col_offset=55)], [], None, None, lineno=157, col_offset=36)], [], None, None, lineno=157, col_offset=19), lineno=157, col_offset=8)], [], lineno=154, col_offset=4), Return(Name('res', Load(), lineno=158, col_offset=11), lineno=158, col_offset=4)], [], lineno=148, col_offset=0), FunctionDef('_get_default_scheme', arguments([], None, None, []), [If(Compare(Attribute(Name('os', Load(), lineno=161, col_offset=7), 'name', Load(), lineno=161, col_offset=7), [Eq()], [Str('posix', lineno=161, col_offset=18)], lineno=161, col_offset=7), [Return(Str('posix_prefix', lineno=163, col_offset=15), lineno=163, col_offset=8)], [], lineno=161, col_offset=4), Return(Attribute(Name('os', Load(), lineno=164, col_offset=11), 'name', Load(), lineno=164, col_offset=11), lineno=164, col_offset=4)], [], lineno=160, col_offset=0), FunctionDef('_getuserbase', arguments([], None, None, []), [Assign([Name('env_base', Store(), lineno=167, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=167, col_offset=15), 'environ', Load(), lineno=167, col_offset=15), 'get', Load(), lineno=167, col_offset=15), [Str('PYTHONUSERBASE', lineno=167, col_offset=30), Name('None', Load(), lineno=167, col_offset=48)], [], None, None, lineno=167, col_offset=15), lineno=167, col_offset=4), FunctionDef('joinuser', arguments([], 'args', None, []), [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=169, col_offset=15), 'path', Load(), lineno=169, col_offset=15), 'expanduser', Load(), lineno=169, col_offset=15), [Call(Attribute(Attribute(Name('os', Load(), lineno=169, col_offset=34), 'path', Load(), lineno=169, col_offset=34), 'join', Load(), lineno=169, col_offset=34), [], [], Name('args', Load(), lineno=169, col_offset=48), None, lineno=169, col_offset=34)], [], None, None, lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=168, col_offset=4), If(Compare(Attribute(Name('os', Load(), lineno=172, col_offset=7), 'name', Load(), lineno=172, col_offset=7), [Eq()], [Str('nt', lineno=172, col_offset=18)], lineno=172, col_offset=7), [Assign([Name('base', Store(), lineno=173, col_offset=8)], BoolOp(Or(), [Call(Attribute(Attribute(Name('os', Load(), lineno=173, col_offset=15), 'environ', Load(), lineno=173, col_offset=15), 'get', Load(), lineno=173, col_offset=15), [Str('APPDATA', lineno=173, col_offset=30)], [], None, None, lineno=173, col_offset=15), Str('~', lineno=173, col_offset=44)], lineno=173, col_offset=15), lineno=173, col_offset=8), Return(IfExp(Name('env_base', Load(), lineno=174, col_offset=27), Name('env_base', Load(), lineno=174, col_offset=15), Call(Name('joinuser', Load(), lineno=174, col_offset=41), [Name('base', Load(), lineno=174, col_offset=50), Str('Python', lineno=174, col_offset=56)], [], None, None, lineno=174, col_offset=41), lineno=174, col_offset=15), lineno=174, col_offset=8)], [], lineno=172, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=176, col_offset=7), 'platform', Load(), lineno=176, col_offset=7), [Eq()], [Str('darwin', lineno=176, col_offset=23)], lineno=176, col_offset=7), [Assign([Name('framework', Store(), lineno=177, col_offset=8)], Call(Name('get_config_var', Load(), lineno=177, col_offset=20), [Str('PYTHONFRAMEWORK', lineno=177, col_offset=35)], [], None, None, lineno=177, col_offset=20), lineno=177, col_offset=8), If(Name('framework', Load(), lineno=178, col_offset=11), [Return(Call(Name('joinuser', Load(), lineno=179, col_offset=19), [Str('~', lineno=179, col_offset=28), Str('Library', lineno=179, col_offset=33), Name('framework', Load(), lineno=179, col_offset=44), BinOp(Str('%d.%d', lineno=179, col_offset=55), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=180, col_offset=16), 'version_info', Load(), lineno=180, col_offset=16), Slice(None, Num(2, lineno=180, col_offset=34), None), Load(), lineno=180, col_offset=16), lineno=179, col_offset=55)], [], None, None, lineno=179, col_offset=19), lineno=179, col_offset=12)], [], lineno=178, col_offset=8)], [], lineno=176, col_offset=4), Return(IfExp(Name('env_base', Load(), lineno=182, col_offset=23), Name('env_base', Load(), lineno=182, col_offset=11), Call(Name('joinuser', Load(), lineno=182, col_offset=37), [Str('~', lineno=182, col_offset=46), Str('.local', lineno=182, col_offset=51)], [], None, None, lineno=182, col_offset=37), lineno=182, col_offset=11), lineno=182, col_offset=4)], [], lineno=166, col_offset=0), FunctionDef('_parse_makefile', arguments([Name('filename', Param(), lineno=185, col_offset=20), Name('vars', Param(), lineno=185, col_offset=30)], None, None, [Name('None', Load(), lineno=185, col_offset=35)]), [Expr(Str('Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ', lineno=191, col_offset=-1), lineno=191, col_offset=-1), Import([alias('re', None)], lineno=192, col_offset=4), Assign([Name('_variable_rx', Store(), lineno=195, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=195, col_offset=19), 'compile', Load(), lineno=195, col_offset=19), [Str('([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)', lineno=195, col_offset=30)], [], None, None, lineno=195, col_offset=19), lineno=195, col_offset=4), Assign([Name('_findvar1_rx', Store(), lineno=196, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=196, col_offset=19), 'compile', Load(), lineno=196, col_offset=19), [Str('\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)', lineno=196, col_offset=30)], [], None, None, lineno=196, col_offset=19), lineno=196, col_offset=4), Assign([Name('_findvar2_rx', Store(), lineno=197, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=197, col_offset=19), 'compile', Load(), lineno=197, col_offset=19), [Str('\\${([A-Za-z][A-Za-z0-9_]*)}', lineno=197, col_offset=30)], [], None, None, lineno=197, col_offset=19), lineno=197, col_offset=4), If(Compare(Name('vars', Load(), lineno=199, col_offset=7), [Is()], [Name('None', Load(), lineno=199, col_offset=15)], lineno=199, col_offset=7), [Assign([Name('vars', Store(), lineno=200, col_offset=8)], Dict([], [], lineno=200, col_offset=15), lineno=200, col_offset=8)], [], lineno=199, col_offset=4), Assign([Name('done', Store(), lineno=201, col_offset=4)], Dict([], [], lineno=201, col_offset=11), lineno=201, col_offset=4), Assign([Name('notdone', Store(), lineno=202, col_offset=4)], Dict([], [], lineno=202, col_offset=14), lineno=202, col_offset=4), With(Call(Name('open', Load(), lineno=204, col_offset=9), [Name('filename', Load(), lineno=204, col_offset=14)], [], None, None, lineno=204, col_offset=9), Name('f', Store(), lineno=204, col_offset=27), [Assign([Name('lines', Store(), lineno=205, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=205, col_offset=16), 'readlines', Load(), lineno=205, col_offset=16), [], [], None, None, lineno=205, col_offset=16), lineno=205, col_offset=8)], lineno=204, col_offset=9), For(Name('line', Store(), lineno=207, col_offset=8), Name('lines', Load(), lineno=207, col_offset=16), [If(BoolOp(Or(), [Call(Attribute(Name('line', Load(), lineno=208, col_offset=11), 'startswith', Load(), lineno=208, col_offset=11), [Str('#', lineno=208, col_offset=27)], [], None, None, lineno=208, col_offset=11), Compare(Call(Attribute(Name('line', Load(), lineno=208, col_offset=35), 'strip', Load(), lineno=208, col_offset=35), [], [], None, None, lineno=208, col_offset=35), [Eq()], [Str('', lineno=208, col_offset=51)], lineno=208, col_offset=35)], lineno=208, col_offset=11), [Continue( lineno=209, col_offset=12)], [], lineno=208, col_offset=8), Assign([Name('m', Store(), lineno=210, col_offset=8)], Call(Attribute(Name('_variable_rx', Load(), lineno=210, col_offset=12), 'match', Load(), lineno=210, col_offset=12), [Name('line', Load(), lineno=210, col_offset=31)], [], None, None, lineno=210, col_offset=12), lineno=210, col_offset=8), If(Name('m', Load(), lineno=211, col_offset=11), [Assign([Tuple([Name('n', Store(), lineno=212, col_offset=12), Name('v', Store(), lineno=212, col_offset=15)], Store(), lineno=212, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=212, col_offset=19), 'group', Load(), lineno=212, col_offset=19), [Num(1, lineno=212, col_offset=27), Num(2, lineno=212, col_offset=30)], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=12), Assign([Name('v', Store(), lineno=213, col_offset=12)], Call(Attribute(Name('v', Load(), lineno=213, col_offset=16), 'strip', Load(), lineno=213, col_offset=16), [], [], None, None, lineno=213, col_offset=16), lineno=213, col_offset=12), Assign([Name('tmpv', Store(), lineno=215, col_offset=12)], Call(Attribute(Name('v', Load(), lineno=215, col_offset=19), 'replace', Load(), lineno=215, col_offset=19), [Str('$$', lineno=215, col_offset=29), Str('', lineno=215, col_offset=35)], [], None, None, lineno=215, col_offset=19), lineno=215, col_offset=12), If(Compare(Str('$', lineno=217, col_offset=15), [In()], [Name('tmpv', Load(), lineno=217, col_offset=22)], lineno=217, col_offset=15), [Assign([Subscript(Name('notdone', Load(), lineno=218, col_offset=16), Index(Name('n', Load(), lineno=218, col_offset=24)), Store(), lineno=218, col_offset=16)], Name('v', Load(), lineno=218, col_offset=29), lineno=218, col_offset=16)], [TryExcept([Assign([Name('v', Store(), lineno=221, col_offset=20)], Call(Name('int', Load(), lineno=221, col_offset=24), [Name('v', Load(), lineno=221, col_offset=28)], [], None, None, lineno=221, col_offset=24), lineno=221, col_offset=20)], [ExceptHandler(Name('ValueError', Load(), lineno=222, col_offset=23), None, [Assign([Subscript(Name('done', Load(), lineno=224, col_offset=20), Index(Name('n', Load(), lineno=224, col_offset=25)), Store(), lineno=224, col_offset=20)], Call(Attribute(Name('v', Load(), lineno=224, col_offset=30), 'replace', Load(), lineno=224, col_offset=30), [Str('$$', lineno=224, col_offset=40), Str('$', lineno=224, col_offset=46)], [], None, None, lineno=224, col_offset=30), lineno=224, col_offset=20)], lineno=222, col_offset=16)], [Assign([Subscript(Name('done', Load(), lineno=226, col_offset=20), Index(Name('n', Load(), lineno=226, col_offset=25)), Store(), lineno=226, col_offset=20)], Name('v', Load(), lineno=226, col_offset=30), lineno=226, col_offset=20)], lineno=220, col_offset=16)], lineno=217, col_offset=12)], [], lineno=211, col_offset=8)], [], lineno=207, col_offset=4), While(Name('notdone', Load(), lineno=229, col_offset=10), [For(Name('name', Store(), lineno=230, col_offset=12), Call(Attribute(Name('notdone', Load(), lineno=230, col_offset=20), 'keys', Load(), lineno=230, col_offset=20), [], [], None, None, lineno=230, col_offset=20), [Assign([Name('value', Store(), lineno=231, col_offset=12)], Subscript(Name('notdone', Load(), lineno=231, col_offset=20), Index(Name('name', Load(), lineno=231, col_offset=28)), Load(), lineno=231, col_offset=20), lineno=231, col_offset=12), Assign([Name('m', Store(), lineno=232, col_offset=12)], BoolOp(Or(), [Call(Attribute(Name('_findvar1_rx', Load(), lineno=232, col_offset=16), 'search', Load(), lineno=232, col_offset=16), [Name('value', Load(), lineno=232, col_offset=36)], [], None, None, lineno=232, col_offset=16), Call(Attribute(Name('_findvar2_rx', Load(), lineno=232, col_offset=46), 'search', Load(), lineno=232, col_offset=46), [Name('value', Load(), lineno=232, col_offset=66)], [], None, None, lineno=232, col_offset=46)], lineno=232, col_offset=16), lineno=232, col_offset=12), If(Name('m', Load(), lineno=233, col_offset=15), [Assign([Name('n', Store(), lineno=234, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=234, col_offset=20), 'group', Load(), lineno=234, col_offset=20), [Num(1, lineno=234, col_offset=28)], [], None, None, lineno=234, col_offset=20), lineno=234, col_offset=16), Assign([Name('found', Store(), lineno=235, col_offset=16)], Name('True', Load(), lineno=235, col_offset=24), lineno=235, col_offset=16), If(Compare(Name('n', Load(), lineno=236, col_offset=19), [In()], [Name('done', Load(), lineno=236, col_offset=24)], lineno=236, col_offset=19), [Assign([Name('item', Store(), lineno=237, col_offset=20)], Call(Name('str', Load(), lineno=237, col_offset=27), [Subscript(Name('done', Load(), lineno=237, col_offset=31), Index(Name('n', Load(), lineno=237, col_offset=36)), Load(), lineno=237, col_offset=31)], [], None, None, lineno=237, col_offset=27), lineno=237, col_offset=20)], [If(Compare(Name('n', Load(), lineno=238, col_offset=21), [In()], [Name('notdone', Load(), lineno=238, col_offset=26)], lineno=238, col_offset=21), [Assign([Name('found', Store(), lineno=240, col_offset=20)], Name('False', Load(), lineno=240, col_offset=28), lineno=240, col_offset=20)], [If(Compare(Name('n', Load(), lineno=241, col_offset=21), [In()], [Attribute(Name('os', Load(), lineno=241, col_offset=26), 'environ', Load(), lineno=241, col_offset=26)], lineno=241, col_offset=21), [Assign([Name('item', Store(), lineno=243, col_offset=20)], Subscript(Attribute(Name('os', Load(), lineno=243, col_offset=27), 'environ', Load(), lineno=243, col_offset=27), Index(Name('n', Load(), lineno=243, col_offset=38)), Load(), lineno=243, col_offset=27), lineno=243, col_offset=20)], [Assign([Subscript(Name('done', Load(), lineno=245, col_offset=20), Index(Name('n', Load(), lineno=245, col_offset=25)), Store(), lineno=245, col_offset=20), Name('item', Store(), lineno=245, col_offset=30)], Str('', lineno=245, col_offset=37), lineno=245, col_offset=20)], lineno=241, col_offset=21)], lineno=238, col_offset=21)], lineno=236, col_offset=16), If(Name('found', Load(), lineno=246, col_offset=19), [Assign([Name('after', Store(), lineno=247, col_offset=20)], Subscript(Name('value', Load(), lineno=247, col_offset=28), Slice(Call(Attribute(Name('m', Load(), lineno=247, col_offset=34), 'end', Load(), lineno=247, col_offset=34), [], [], None, None, lineno=247, col_offset=34), None, None), Load(), lineno=247, col_offset=28), lineno=247, col_offset=20), Assign([Name('value', Store(), lineno=248, col_offset=20)], BinOp(BinOp(Subscript(Name('value', Load(), lineno=248, col_offset=28), Slice(None, Call(Attribute(Name('m', Load(), lineno=248, col_offset=35), 'start', Load(), lineno=248, col_offset=35), [], [], None, None, lineno=248, col_offset=35), None), Load(), lineno=248, col_offset=28), Add(), Name('item', Load(), lineno=248, col_offset=48), lineno=248, col_offset=28), Add(), Name('after', Load(), lineno=248, col_offset=55), lineno=248, col_offset=53), lineno=248, col_offset=20), If(Compare(Str('$', lineno=249, col_offset=23), [In()], [Name('after', Load(), lineno=249, col_offset=30)], lineno=249, col_offset=23), [Assign([Subscript(Name('notdone', Load(), lineno=250, col_offset=24), Index(Name('name', Load(), lineno=250, col_offset=32)), Store(), lineno=250, col_offset=24)], Name('value', Load(), lineno=250, col_offset=40), lineno=250, col_offset=24)], [TryExcept([Assign([Name('value', Store(), lineno=252, col_offset=29)], Call(Name('int', Load(), lineno=252, col_offset=37), [Name('value', Load(), lineno=252, col_offset=41)], [], None, None, lineno=252, col_offset=37), lineno=252, col_offset=29)], [ExceptHandler(Name('ValueError', Load(), lineno=253, col_offset=31), None, [Assign([Subscript(Name('done', Load(), lineno=254, col_offset=28), Index(Name('name', Load(), lineno=254, col_offset=33)), Store(), lineno=254, col_offset=28)], Call(Attribute(Name('value', Load(), lineno=254, col_offset=41), 'strip', Load(), lineno=254, col_offset=41), [], [], None, None, lineno=254, col_offset=41), lineno=254, col_offset=28)], lineno=253, col_offset=24)], [Assign([Subscript(Name('done', Load(), lineno=256, col_offset=28), Index(Name('name', Load(), lineno=256, col_offset=33)), Store(), lineno=256, col_offset=28)], Name('value', Load(), lineno=256, col_offset=41), lineno=256, col_offset=28)], lineno=252, col_offset=24), Delete([Subscript(Name('notdone', Load(), lineno=257, col_offset=28), Index(Name('name', Load(), lineno=257, col_offset=36)), Del(), lineno=257, col_offset=28)], lineno=257, col_offset=24)], lineno=249, col_offset=20)], [], lineno=246, col_offset=16)], [Delete([Subscript(Name('notdone', Load(), lineno=260, col_offset=20), Index(Name('name', Load(), lineno=260, col_offset=28)), Del(), lineno=260, col_offset=20)], lineno=260, col_offset=16)], lineno=233, col_offset=12)], [], lineno=230, col_offset=8)], [], lineno=229, col_offset=4), For(Tuple([Name('k', Store(), lineno=262, col_offset=8), Name('v', Store(), lineno=262, col_offset=11)], Store(), lineno=262, col_offset=8), Call(Attribute(Name('done', Load(), lineno=262, col_offset=16), 'items', Load(), lineno=262, col_offset=16), [], [], None, None, lineno=262, col_offset=16), [If(Call(Name('isinstance', Load(), lineno=263, col_offset=11), [Name('v', Load(), lineno=263, col_offset=22), Name('str', Load(), lineno=263, col_offset=25)], [], None, None, lineno=263, col_offset=11), [Assign([Subscript(Name('done', Load(), lineno=264, col_offset=12), Index(Name('k', Load(), lineno=264, col_offset=17)), Store(), lineno=264, col_offset=12)], Call(Attribute(Name('v', Load(), lineno=264, col_offset=22), 'strip', Load(), lineno=264, col_offset=22), [], [], None, None, lineno=264, col_offset=22), lineno=264, col_offset=12)], [], lineno=263, col_offset=8)], [], lineno=262, col_offset=4), Expr(Call(Attribute(Name('vars', Load(), lineno=267, col_offset=4), 'update', Load(), lineno=267, col_offset=4), [Name('done', Load(), lineno=267, col_offset=16)], [], None, None, lineno=267, col_offset=4), lineno=267, col_offset=4), Return(Name('vars', Load(), lineno=268, col_offset=11), lineno=268, col_offset=4)], [], lineno=185, col_offset=0), FunctionDef('_get_makefile_filename', arguments([], None, None, []), [If(Name('_PYTHON_BUILD', Load(), lineno=272, col_offset=7), [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=273, col_offset=15), 'path', Load(), lineno=273, col_offset=15), 'join', Load(), lineno=273, col_offset=15), [Name('_PROJECT_BASE', Load(), lineno=273, col_offset=28), Str('Makefile', lineno=273, col_offset=43)], [], None, None, lineno=273, col_offset=15), lineno=273, col_offset=8)], [], lineno=272, col_offset=4), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=274, col_offset=11), 'path', Load(), lineno=274, col_offset=11), 'join', Load(), lineno=274, col_offset=11), [Call(Name('get_path', Load(), lineno=274, col_offset=24), [Str('stdlib', lineno=274, col_offset=33)], [], None, None, lineno=274, col_offset=24), Str('config', lineno=274, col_offset=44), Str('Makefile', lineno=274, col_offset=54)], [], None, None, lineno=274, col_offset=11), lineno=274, col_offset=4)], [], lineno=271, col_offset=0), FunctionDef('_init_posix', arguments([Name('vars', Param(), lineno=277, col_offset=16)], None, None, []), [Expr(Str('Initialize the module as appropriate for POSIX systems.', lineno=278, col_offset=4), lineno=278, col_offset=4), Assign([Name('makefile', Store(), lineno=280, col_offset=4)], Call(Name('_get_makefile_filename', Load(), lineno=280, col_offset=15), [], [], None, None, lineno=280, col_offset=15), lineno=280, col_offset=4), TryExcept([Expr(Call(Name('_parse_makefile', Load(), lineno=282, col_offset=8), [Name('makefile', Load(), lineno=282, col_offset=24), Name('vars', Load(), lineno=282, col_offset=34)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=283, col_offset=11), Name('e', Store(), lineno=283, col_offset=20), [Assign([Name('msg', Store(), lineno=284, col_offset=8)], BinOp(Str('invalid Python installation: unable to open %s', lineno=284, col_offset=14), Mod(), Name('makefile', Load(), lineno=284, col_offset=65), lineno=284, col_offset=14), lineno=284, col_offset=8), If(Call(Name('hasattr', Load(), lineno=285, col_offset=11), [Name('e', Load(), lineno=285, col_offset=19), Str('strerror', lineno=285, col_offset=22)], [], None, None, lineno=285, col_offset=11), [Assign([Name('msg', Store(), lineno=286, col_offset=12)], BinOp(Name('msg', Load(), lineno=286, col_offset=18), Add(), BinOp(Str(' (%s)', lineno=286, col_offset=24), Mod(), Attribute(Name('e', Load(), lineno=286, col_offset=34), 'strerror', Load(), lineno=286, col_offset=34), lineno=286, col_offset=24), lineno=286, col_offset=18), lineno=286, col_offset=12)], [], lineno=285, col_offset=8), Raise(Call(Name('IOError', Load(), lineno=287, col_offset=14), [Name('msg', Load(), lineno=287, col_offset=22)], [], None, None, lineno=287, col_offset=14), None, None, lineno=287, col_offset=8)], lineno=283, col_offset=4)], [], lineno=281, col_offset=4), Assign([Name('config_h', Store(), lineno=290, col_offset=4)], Call(Name('get_config_h_filename', Load(), lineno=290, col_offset=15), [], [], None, None, lineno=290, col_offset=15), lineno=290, col_offset=4), TryExcept([With(Call(Name('open', Load(), lineno=292, col_offset=13), [Name('config_h', Load(), lineno=292, col_offset=18)], [], None, None, lineno=292, col_offset=13), Name('f', Store(), lineno=292, col_offset=31), [Expr(Call(Name('parse_config_h', Load(), lineno=293, col_offset=12), [Name('f', Load(), lineno=293, col_offset=27), Name('vars', Load(), lineno=293, col_offset=30)], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=12)], lineno=292, col_offset=13)], [ExceptHandler(Name('IOError', Load(), lineno=294, col_offset=11), Name('e', Store(), lineno=294, col_offset=20), [Assign([Name('msg', Store(), lineno=295, col_offset=8)], BinOp(Str('invalid Python installation: unable to open %s', lineno=295, col_offset=14), Mod(), Name('config_h', Load(), lineno=295, col_offset=65), lineno=295, col_offset=14), lineno=295, col_offset=8), If(Call(Name('hasattr', Load(), lineno=296, col_offset=11), [Name('e', Load(), lineno=296, col_offset=19), Str('strerror', lineno=296, col_offset=22)], [], None, None, lineno=296, col_offset=11), [Assign([Name('msg', Store(), lineno=297, col_offset=12)], BinOp(Name('msg', Load(), lineno=297, col_offset=18), Add(), BinOp(Str(' (%s)', lineno=297, col_offset=24), Mod(), Attribute(Name('e', Load(), lineno=297, col_offset=34), 'strerror', Load(), lineno=297, col_offset=34), lineno=297, col_offset=24), lineno=297, col_offset=18), lineno=297, col_offset=12)], [], lineno=296, col_offset=8), Raise(Call(Name('IOError', Load(), lineno=298, col_offset=14), [Name('msg', Load(), lineno=298, col_offset=22)], [], None, None, lineno=298, col_offset=14), None, None, lineno=298, col_offset=8)], lineno=294, col_offset=4)], [], lineno=291, col_offset=4), If(BoolOp(And(), [Compare(Attribute(Name('sys', Load(), lineno=304, col_offset=7), 'platform', Load(), lineno=304, col_offset=7), [Eq()], [Str('darwin', lineno=304, col_offset=23)], lineno=304, col_offset=7), Compare(Str('MACOSX_DEPLOYMENT_TARGET', lineno=304, col_offset=36), [In()], [Name('vars', Load(), lineno=304, col_offset=66)], lineno=304, col_offset=36)], lineno=304, col_offset=7), [Assign([Name('cfg_target', Store(), lineno=305, col_offset=8)], Subscript(Name('vars', Load(), lineno=305, col_offset=21), Index(Str('MACOSX_DEPLOYMENT_TARGET', lineno=305, col_offset=26)), Load(), lineno=305, col_offset=21), lineno=305, col_offset=8), Assign([Name('cur_target', Store(), lineno=306, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=306, col_offset=21), 'getenv', Load(), lineno=306, col_offset=21), [Str('MACOSX_DEPLOYMENT_TARGET', lineno=306, col_offset=31), Str('', lineno=306, col_offset=59)], [], None, None, lineno=306, col_offset=21), lineno=306, col_offset=8), If(Compare(Name('cur_target', Load(), lineno=307, col_offset=11), [Eq()], [Str('', lineno=307, col_offset=25)], lineno=307, col_offset=11), [Assign([Name('cur_target', Store(), lineno=308, col_offset=12)], Name('cfg_target', Load(), lineno=308, col_offset=25), lineno=308, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=309, col_offset=12), 'putenv', Load(), lineno=309, col_offset=12), [Str('MACOSX_DEPLOYMENT_TARGET', lineno=309, col_offset=22), Name('cfg_target', Load(), lineno=309, col_offset=50)], [], None, None, lineno=309, col_offset=12), lineno=309, col_offset=12)], [If(Compare(Call(Name('map', Load(), lineno=310, col_offset=13), [Name('int', Load(), lineno=310, col_offset=17), Call(Attribute(Name('cfg_target', Load(), lineno=310, col_offset=22), 'split', Load(), lineno=310, col_offset=22), [Str('.', lineno=310, col_offset=39)], [], None, None, lineno=310, col_offset=22)], [], None, None, lineno=310, col_offset=13), [Gt()], [Call(Name('map', Load(), lineno=310, col_offset=47), [Name('int', Load(), lineno=310, col_offset=51), Call(Attribute(Name('cur_target', Load(), lineno=310, col_offset=56), 'split', Load(), lineno=310, col_offset=56), [Str('.', lineno=310, col_offset=73)], [], None, None, lineno=310, col_offset=56)], [], None, None, lineno=310, col_offset=47)], lineno=310, col_offset=13), [Assign([Name('msg', Store(), lineno=311, col_offset=12)], BinOp(Str('$MACOSX_DEPLOYMENT_TARGET mismatch: now "%s" but "%s" during configure', lineno=311, col_offset=19), Mod(), Tuple([Name('cur_target', Load(), lineno=312, col_offset=41), Name('cfg_target', Load(), lineno=312, col_offset=53)], Load(), lineno=312, col_offset=41), lineno=311, col_offset=19), lineno=311, col_offset=12), Raise(Call(Name('IOError', Load(), lineno=313, col_offset=18), [Name('msg', Load(), lineno=313, col_offset=26)], [], None, None, lineno=313, col_offset=18), None, None, lineno=313, col_offset=12)], [], lineno=310, col_offset=13)], lineno=307, col_offset=8)], [], lineno=304, col_offset=4), If(Name('_PYTHON_BUILD', Load(), lineno=318, col_offset=7), [Assign([Subscript(Name('vars', Load(), lineno=319, col_offset=8), Index(Str('LDSHARED', lineno=319, col_offset=13)), Store(), lineno=319, col_offset=8)], Subscript(Name('vars', Load(), lineno=319, col_offset=27), Index(Str('BLDSHARED', lineno=319, col_offset=32)), Load(), lineno=319, col_offset=27), lineno=319, col_offset=8)], [], lineno=318, col_offset=4)], [], lineno=277, col_offset=0), FunctionDef('_init_non_posix', arguments([Name('vars', Param(), lineno=321, col_offset=20)], None, None, []), [Expr(Str('Initialize the module as appropriate for NT', lineno=322, col_offset=4), lineno=322, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=324, col_offset=4), Index(Str('LIBDEST', lineno=324, col_offset=9)), Store(), lineno=324, col_offset=4)], Call(Name('get_path', Load(), lineno=324, col_offset=22), [Str('stdlib', lineno=324, col_offset=31)], [], None, None, lineno=324, col_offset=22), lineno=324, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=325, col_offset=4), Index(Str('BINLIBDEST', lineno=325, col_offset=9)), Store(), lineno=325, col_offset=4)], Call(Name('get_path', Load(), lineno=325, col_offset=25), [Str('platstdlib', lineno=325, col_offset=34)], [], None, None, lineno=325, col_offset=25), lineno=325, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=326, col_offset=4), Index(Str('INCLUDEPY', lineno=326, col_offset=9)), Store(), lineno=326, col_offset=4)], Call(Name('get_path', Load(), lineno=326, col_offset=24), [Str('include', lineno=326, col_offset=33)], [], None, None, lineno=326, col_offset=24), lineno=326, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=327, col_offset=4), Index(Str('SO', lineno=327, col_offset=9)), Store(), lineno=327, col_offset=4)], Str('.pyd', lineno=327, col_offset=17), lineno=327, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=328, col_offset=4), Index(Str('EXE', lineno=328, col_offset=9)), Store(), lineno=328, col_offset=4)], Str('.exe', lineno=328, col_offset=18), lineno=328, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=329, col_offset=4), Index(Str('VERSION', lineno=329, col_offset=9)), Store(), lineno=329, col_offset=4)], Name('_PY_VERSION_SHORT_NO_DOT', Load(), lineno=329, col_offset=22), lineno=329, col_offset=4), Assign([Subscript(Name('vars', Load(), lineno=330, col_offset=4), Index(Str('BINDIR', lineno=330, col_offset=9)), Store(), lineno=330, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=330, col_offset=21), 'path', Load(), lineno=330, col_offset=21), 'dirname', Load(), lineno=330, col_offset=21), [Call(Name('_safe_realpath', Load(), lineno=330, col_offset=37), [Attribute(Name('sys', Load(), lineno=330, col_offset=52), 'executable', Load(), lineno=330, col_offset=52)], [], None, None, lineno=330, col_offset=37)], [], None, None, lineno=330, col_offset=21), lineno=330, col_offset=4)], [], lineno=321, col_offset=0), FunctionDef('parse_config_h', arguments([Name('fp', Param(), lineno=337, col_offset=19), Name('vars', Param(), lineno=337, col_offset=23)], None, None, [Name('None', Load(), lineno=337, col_offset=28)]), [Expr(Str('Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ', lineno=343, col_offset=-1), lineno=343, col_offset=-1), Import([alias('re', None)], lineno=344, col_offset=4), If(Compare(Name('vars', Load(), lineno=345, col_offset=7), [Is()], [Name('None', Load(), lineno=345, col_offset=15)], lineno=345, col_offset=7), [Assign([Name('vars', Store(), lineno=346, col_offset=8)], Dict([], [], lineno=346, col_offset=15), lineno=346, col_offset=8)], [], lineno=345, col_offset=4), Assign([Name('define_rx', Store(), lineno=347, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=347, col_offset=16), 'compile', Load(), lineno=347, col_offset=16), [Str('#define ([A-Z][A-Za-z0-9_]+) (.*)\n', lineno=347, col_offset=27)], [], None, None, lineno=347, col_offset=16), lineno=347, col_offset=4), Assign([Name('undef_rx', Store(), lineno=348, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=348, col_offset=15), 'compile', Load(), lineno=348, col_offset=15), [Str('/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n', lineno=348, col_offset=26)], [], None, None, lineno=348, col_offset=15), lineno=348, col_offset=4), While(Name('True', Load(), lineno=350, col_offset=10), [Assign([Name('line', Store(), lineno=351, col_offset=8)], Call(Attribute(Name('fp', Load(), lineno=351, col_offset=15), 'readline', Load(), lineno=351, col_offset=15), [], [], None, None, lineno=351, col_offset=15), lineno=351, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=352, col_offset=15), lineno=352, col_offset=11), [Break( lineno=353, col_offset=12)], [], lineno=352, col_offset=8), Assign([Name('m', Store(), lineno=354, col_offset=8)], Call(Attribute(Name('define_rx', Load(), lineno=354, col_offset=12), 'match', Load(), lineno=354, col_offset=12), [Name('line', Load(), lineno=354, col_offset=28)], [], None, None, lineno=354, col_offset=12), lineno=354, col_offset=8), If(Name('m', Load(), lineno=355, col_offset=11), [Assign([Tuple([Name('n', Store(), lineno=356, col_offset=12), Name('v', Store(), lineno=356, col_offset=15)], Store(), lineno=356, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=356, col_offset=19), 'group', Load(), lineno=356, col_offset=19), [Num(1, lineno=356, col_offset=27), Num(2, lineno=356, col_offset=30)], [], None, None, lineno=356, col_offset=19), lineno=356, col_offset=12), TryExcept([Assign([Name('v', Store(), lineno=357, col_offset=17)], Call(Name('int', Load(), lineno=357, col_offset=21), [Name('v', Load(), lineno=357, col_offset=25)], [], None, None, lineno=357, col_offset=21), lineno=357, col_offset=17)], [ExceptHandler(Name('ValueError', Load(), lineno=358, col_offset=19), None, [Pass( lineno=358, col_offset=31)], lineno=358, col_offset=12)], [], lineno=357, col_offset=12), Assign([Subscript(Name('vars', Load(), lineno=359, col_offset=12), Index(Name('n', Load(), lineno=359, col_offset=17)), Store(), lineno=359, col_offset=12)], Name('v', Load(), lineno=359, col_offset=22), lineno=359, col_offset=12)], [Assign([Name('m', Store(), lineno=361, col_offset=12)], Call(Attribute(Name('undef_rx', Load(), lineno=361, col_offset=16), 'match', Load(), lineno=361, col_offset=16), [Name('line', Load(), lineno=361, col_offset=31)], [], None, None, lineno=361, col_offset=16), lineno=361, col_offset=12), If(Name('m', Load(), lineno=362, col_offset=15), [Assign([Subscript(Name('vars', Load(), lineno=363, col_offset=16), Index(Call(Attribute(Name('m', Load(), lineno=363, col_offset=21), 'group', Load(), lineno=363, col_offset=21), [Num(1, lineno=363, col_offset=29)], [], None, None, lineno=363, col_offset=21)), Store(), lineno=363, col_offset=16)], Num(0, lineno=363, col_offset=35), lineno=363, col_offset=16)], [], lineno=362, col_offset=12)], lineno=355, col_offset=8)], [], lineno=350, col_offset=4), Return(Name('vars', Load(), lineno=364, col_offset=11), lineno=364, col_offset=4)], [], lineno=337, col_offset=0), FunctionDef('get_config_h_filename', arguments([], None, None, []), [Expr(Str('Returns the path of pyconfig.h.', lineno=367, col_offset=4), lineno=367, col_offset=4), If(Name('_PYTHON_BUILD', Load(), lineno=368, col_offset=7), [If(Compare(Attribute(Name('os', Load(), lineno=369, col_offset=11), 'name', Load(), lineno=369, col_offset=11), [Eq()], [Str('nt', lineno=369, col_offset=22)], lineno=369, col_offset=11), [Assign([Name('inc_dir', Store(), lineno=370, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=370, col_offset=22), 'path', Load(), lineno=370, col_offset=22), 'join', Load(), lineno=370, col_offset=22), [Name('_PROJECT_BASE', Load(), lineno=370, col_offset=35), Str('PC', lineno=370, col_offset=50)], [], None, None, lineno=370, col_offset=22), lineno=370, col_offset=12)], [Assign([Name('inc_dir', Store(), lineno=372, col_offset=12)], Name('_PROJECT_BASE', Load(), lineno=372, col_offset=22), lineno=372, col_offset=12)], lineno=369, col_offset=8)], [Assign([Name('inc_dir', Store(), lineno=374, col_offset=8)], Call(Name('get_path', Load(), lineno=374, col_offset=18), [Str('platinclude', lineno=374, col_offset=27)], [], None, None, lineno=374, col_offset=18), lineno=374, col_offset=8)], lineno=368, col_offset=4), Return(Call(Attribute(Attribute(Name('os', Load(), lineno=375, col_offset=11), 'path', Load(), lineno=375, col_offset=11), 'join', Load(), lineno=375, col_offset=11), [Name('inc_dir', Load(), lineno=375, col_offset=24), Str('pyconfig.h', lineno=375, col_offset=33)], [], None, None, lineno=375, col_offset=11), lineno=375, col_offset=4)], [], lineno=366, col_offset=0), FunctionDef('get_scheme_names', arguments([], None, None, []), [Expr(Str('Returns a tuple containing the schemes names.', lineno=378, col_offset=4), lineno=378, col_offset=4), Assign([Name('schemes', Store(), lineno=379, col_offset=4)], Call(Attribute(Name('_INSTALL_SCHEMES', Load(), lineno=379, col_offset=14), 'keys', Load(), lineno=379, col_offset=14), [], [], None, None, lineno=379, col_offset=14), lineno=379, col_offset=4), Expr(Call(Attribute(Name('schemes', Load(), lineno=380, col_offset=4), 'sort', Load(), lineno=380, col_offset=4), [], [], None, None, lineno=380, col_offset=4), lineno=380, col_offset=4), Return(Call(Name('tuple', Load(), lineno=381, col_offset=11), [Name('schemes', Load(), lineno=381, col_offset=17)], [], None, None, lineno=381, col_offset=11), lineno=381, col_offset=4)], [], lineno=377, col_offset=0), FunctionDef('get_path_names', arguments([], None, None, []), [Expr(Str('Returns a tuple containing the paths names.', lineno=384, col_offset=4), lineno=384, col_offset=4), Return(Name('_SCHEME_KEYS', Load(), lineno=385, col_offset=11), lineno=385, col_offset=4)], [], lineno=383, col_offset=0), FunctionDef('get_paths', arguments([Name('scheme', Param(), lineno=387, col_offset=14), Name('vars', Param(), lineno=387, col_offset=44), Name('expand', Param(), lineno=387, col_offset=55)], None, None, [Call(Name('_get_default_scheme', Load(), lineno=387, col_offset=21), [], [], None, None, lineno=387, col_offset=21), Name('None', Load(), lineno=387, col_offset=49), Name('True', Load(), lineno=387, col_offset=62)]), [Expr(Str('Returns a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    ', lineno=392, col_offset=-1), lineno=392, col_offset=-1), If(Name('expand', Load(), lineno=393, col_offset=7), [Return(Call(Name('_expand_vars', Load(), lineno=394, col_offset=15), [Name('scheme', Load(), lineno=394, col_offset=28), Name('vars', Load(), lineno=394, col_offset=36)], [], None, None, lineno=394, col_offset=15), lineno=394, col_offset=8)], [Return(Subscript(Name('_INSTALL_SCHEMES', Load(), lineno=396, col_offset=15), Index(Name('scheme', Load(), lineno=396, col_offset=32)), Load(), lineno=396, col_offset=15), lineno=396, col_offset=8)], lineno=393, col_offset=4)], [], lineno=387, col_offset=0), FunctionDef('get_path', arguments([Name('name', Param(), lineno=398, col_offset=13), Name('scheme', Param(), lineno=398, col_offset=19), Name('vars', Param(), lineno=398, col_offset=49), Name('expand', Param(), lineno=398, col_offset=60)], None, None, [Call(Name('_get_default_scheme', Load(), lineno=398, col_offset=26), [], [], None, None, lineno=398, col_offset=26), Name('None', Load(), lineno=398, col_offset=54), Name('True', Load(), lineno=398, col_offset=67)]), [Expr(Str('Returns a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    ', lineno=402, col_offset=-1), lineno=402, col_offset=-1), Return(Subscript(Call(Name('get_paths', Load(), lineno=403, col_offset=11), [Name('scheme', Load(), lineno=403, col_offset=21), Name('vars', Load(), lineno=403, col_offset=29), Name('expand', Load(), lineno=403, col_offset=35)], [], None, None, lineno=403, col_offset=11), Index(Name('name', Load(), lineno=403, col_offset=43)), Load(), lineno=403, col_offset=11), lineno=403, col_offset=4)], [], lineno=398, col_offset=0), FunctionDef('get_config_vars', arguments([], 'args', None, []), [Expr(Str("With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python's installed Makefile;\n    On Windows and Mac OS it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    ", lineno=414, col_offset=-1), lineno=414, col_offset=-1), Import([alias('re', None)], lineno=415, col_offset=4), Global(['_CONFIG_VARS'], lineno=416, col_offset=4), If(Compare(Name('_CONFIG_VARS', Load(), lineno=417, col_offset=7), [Is()], [Name('None', Load(), lineno=417, col_offset=23)], lineno=417, col_offset=7), [Assign([Name('_CONFIG_VARS', Store(), lineno=418, col_offset=8)], Dict([], [], lineno=418, col_offset=23), lineno=418, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=422, col_offset=8), Index(Str('prefix', lineno=422, col_offset=21)), Store(), lineno=422, col_offset=8)], Name('_PREFIX', Load(), lineno=422, col_offset=33), lineno=422, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=423, col_offset=8), Index(Str('exec_prefix', lineno=423, col_offset=21)), Store(), lineno=423, col_offset=8)], Name('_EXEC_PREFIX', Load(), lineno=423, col_offset=38), lineno=423, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=424, col_offset=8), Index(Str('py_version', lineno=424, col_offset=21)), Store(), lineno=424, col_offset=8)], Name('_PY_VERSION', Load(), lineno=424, col_offset=37), lineno=424, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=425, col_offset=8), Index(Str('py_version_short', lineno=425, col_offset=21)), Store(), lineno=425, col_offset=8)], Name('_PY_VERSION_SHORT', Load(), lineno=425, col_offset=43), lineno=425, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=426, col_offset=8), Index(Str('py_version_nodot', lineno=426, col_offset=21)), Store(), lineno=426, col_offset=8)], BinOp(Subscript(Name('_PY_VERSION', Load(), lineno=426, col_offset=43), Index(Num(0, lineno=426, col_offset=55)), Load(), lineno=426, col_offset=43), Add(), Subscript(Name('_PY_VERSION', Load(), lineno=426, col_offset=60), Index(Num(2, lineno=426, col_offset=72)), Load(), lineno=426, col_offset=60), lineno=426, col_offset=43), lineno=426, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=427, col_offset=8), Index(Str('base', lineno=427, col_offset=21)), Store(), lineno=427, col_offset=8)], Name('_PREFIX', Load(), lineno=427, col_offset=31), lineno=427, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=428, col_offset=8), Index(Str('platbase', lineno=428, col_offset=21)), Store(), lineno=428, col_offset=8)], Name('_EXEC_PREFIX', Load(), lineno=428, col_offset=35), lineno=428, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=429, col_offset=8), Index(Str('projectbase', lineno=429, col_offset=21)), Store(), lineno=429, col_offset=8)], Name('_PROJECT_BASE', Load(), lineno=429, col_offset=38), lineno=429, col_offset=8), If(Compare(Attribute(Name('os', Load(), lineno=431, col_offset=11), 'name', Load(), lineno=431, col_offset=11), [In()], [Tuple([Str('nt', lineno=431, col_offset=23), Str('os2', lineno=431, col_offset=29)], Load(), lineno=431, col_offset=23)], lineno=431, col_offset=11), [Expr(Call(Name('_init_non_posix', Load(), lineno=432, col_offset=12), [Name('_CONFIG_VARS', Load(), lineno=432, col_offset=28)], [], None, None, lineno=432, col_offset=12), lineno=432, col_offset=12)], [], lineno=431, col_offset=8), If(Compare(Attribute(Name('os', Load(), lineno=433, col_offset=11), 'name', Load(), lineno=433, col_offset=11), [Eq()], [Str('posix', lineno=433, col_offset=22)], lineno=433, col_offset=11), [Expr(Call(Name('_init_posix', Load(), lineno=434, col_offset=12), [Name('_CONFIG_VARS', Load(), lineno=434, col_offset=24)], [], None, None, lineno=434, col_offset=12), lineno=434, col_offset=12)], [], lineno=433, col_offset=8), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=439, col_offset=8), Index(Str('userbase', lineno=439, col_offset=21)), Store(), lineno=439, col_offset=8)], Call(Name('_getuserbase', Load(), lineno=439, col_offset=35), [], [], None, None, lineno=439, col_offset=35), lineno=439, col_offset=8), If(Compare(Str('srcdir', lineno=441, col_offset=11), [NotIn()], [Name('_CONFIG_VARS', Load(), lineno=441, col_offset=27)], lineno=441, col_offset=11), [Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=442, col_offset=12), Index(Str('srcdir', lineno=442, col_offset=25)), Store(), lineno=442, col_offset=12)], Name('_PROJECT_BASE', Load(), lineno=442, col_offset=37), lineno=442, col_offset=12)], [], lineno=441, col_offset=8), If(BoolOp(And(), [Name('_PYTHON_BUILD', Load(), lineno=448, col_offset=11), Compare(Attribute(Name('os', Load(), lineno=448, col_offset=29), 'name', Load(), lineno=448, col_offset=29), [Eq()], [Str('posix', lineno=448, col_offset=40)], lineno=448, col_offset=29)], lineno=448, col_offset=11), [Assign([Name('base', Store(), lineno=449, col_offset=12)], Name('_PROJECT_BASE', Load(), lineno=449, col_offset=19), lineno=449, col_offset=12), TryExcept([Assign([Name('cwd', Store(), lineno=451, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=451, col_offset=22), 'getcwd', Load(), lineno=451, col_offset=22), [], [], None, None, lineno=451, col_offset=22), lineno=451, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=452, col_offset=19), None, [Assign([Name('cwd', Store(), lineno=453, col_offset=16)], Name('None', Load(), lineno=453, col_offset=22), lineno=453, col_offset=16)], lineno=452, col_offset=12)], [], lineno=450, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=454, col_offset=20), 'path', Load(), lineno=454, col_offset=20), 'isabs', Load(), lineno=454, col_offset=20), [Subscript(Name('_CONFIG_VARS', Load(), lineno=454, col_offset=34), Index(Str('srcdir', lineno=454, col_offset=47)), Load(), lineno=454, col_offset=34)], [], None, None, lineno=454, col_offset=20), lineno=454, col_offset=16), Compare(Name('base', Load(), lineno=455, col_offset=16), [NotEq()], [Name('cwd', Load(), lineno=455, col_offset=24)], lineno=455, col_offset=16)], lineno=454, col_offset=16), [Assign([Name('srcdir', Store(), lineno=459, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=459, col_offset=25), 'path', Load(), lineno=459, col_offset=25), 'join', Load(), lineno=459, col_offset=25), [Name('base', Load(), lineno=459, col_offset=38), Subscript(Name('_CONFIG_VARS', Load(), lineno=459, col_offset=44), Index(Str('srcdir', lineno=459, col_offset=57)), Load(), lineno=459, col_offset=44)], [], None, None, lineno=459, col_offset=25), lineno=459, col_offset=16), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=460, col_offset=16), Index(Str('srcdir', lineno=460, col_offset=29)), Store(), lineno=460, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=460, col_offset=41), 'path', Load(), lineno=460, col_offset=41), 'normpath', Load(), lineno=460, col_offset=41), [Name('srcdir', Load(), lineno=460, col_offset=58)], [], None, None, lineno=460, col_offset=41), lineno=460, col_offset=16)], [], lineno=454, col_offset=12)], [], lineno=448, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=462, col_offset=11), 'platform', Load(), lineno=462, col_offset=11), [Eq()], [Str('darwin', lineno=462, col_offset=27)], lineno=462, col_offset=11), [Assign([Name('kernel_version', Store(), lineno=463, col_offset=12)], Subscript(Call(Attribute(Name('os', Load(), lineno=463, col_offset=29), 'uname', Load(), lineno=463, col_offset=29), [], [], None, None, lineno=463, col_offset=29), Index(Num(2, lineno=463, col_offset=40)), Load(), lineno=463, col_offset=29), lineno=463, col_offset=12), Assign([Name('major_version', Store(), lineno=464, col_offset=12)], Call(Name('int', Load(), lineno=464, col_offset=28), [Subscript(Call(Attribute(Name('kernel_version', Load(), lineno=464, col_offset=32), 'split', Load(), lineno=464, col_offset=32), [Str('.', lineno=464, col_offset=53)], [], None, None, lineno=464, col_offset=32), Index(Num(0, lineno=464, col_offset=58)), Load(), lineno=464, col_offset=32)], [], None, None, lineno=464, col_offset=28), lineno=464, col_offset=12), If(Compare(Name('major_version', Load(), lineno=466, col_offset=15), [Lt()], [Num(8, lineno=466, col_offset=31)], lineno=466, col_offset=15), [For(Name('key', Store(), lineno=471, col_offset=20), Tuple([Str('LDFLAGS', lineno=471, col_offset=28), Str('BASECFLAGS', lineno=471, col_offset=39), Str('CFLAGS', lineno=474, col_offset=24), Str('PY_CFLAGS', lineno=474, col_offset=34), Str('BLDSHARED', lineno=474, col_offset=47)], Load(), lineno=471, col_offset=28), [Assign([Name('flags', Store(), lineno=475, col_offset=20)], Subscript(Name('_CONFIG_VARS', Load(), lineno=475, col_offset=28), Index(Name('key', Load(), lineno=475, col_offset=41)), Load(), lineno=475, col_offset=28), lineno=475, col_offset=20), Assign([Name('flags', Store(), lineno=476, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=476, col_offset=28), 'sub', Load(), lineno=476, col_offset=28), [Str('-arch\\s+\\w+\\s', lineno=476, col_offset=35), Str(' ', lineno=476, col_offset=52), Name('flags', Load(), lineno=476, col_offset=57)], [], None, None, lineno=476, col_offset=28), lineno=476, col_offset=20), Assign([Name('flags', Store(), lineno=477, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=477, col_offset=28), 'sub', Load(), lineno=477, col_offset=28), [Str('-isysroot [^ \t]*', lineno=477, col_offset=35), Str(' ', lineno=477, col_offset=56), Name('flags', Load(), lineno=477, col_offset=61)], [], None, None, lineno=477, col_offset=28), lineno=477, col_offset=20), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=478, col_offset=20), Index(Name('key', Load(), lineno=478, col_offset=33)), Store(), lineno=478, col_offset=20)], Name('flags', Load(), lineno=478, col_offset=40), lineno=478, col_offset=20)], [], lineno=471, col_offset=16)], [If(Compare(Str('ARCHFLAGS', lineno=485, col_offset=19), [In()], [Attribute(Name('os', Load(), lineno=485, col_offset=34), 'environ', Load(), lineno=485, col_offset=34)], lineno=485, col_offset=19), [Assign([Name('arch', Store(), lineno=486, col_offset=20)], Subscript(Attribute(Name('os', Load(), lineno=486, col_offset=27), 'environ', Load(), lineno=486, col_offset=27), Index(Str('ARCHFLAGS', lineno=486, col_offset=38)), Load(), lineno=486, col_offset=27), lineno=486, col_offset=20), For(Name('key', Store(), lineno=487, col_offset=24), Tuple([Str('LDFLAGS', lineno=487, col_offset=32), Str('BASECFLAGS', lineno=487, col_offset=43), Str('CFLAGS', lineno=490, col_offset=24), Str('PY_CFLAGS', lineno=490, col_offset=34), Str('BLDSHARED', lineno=490, col_offset=47)], Load(), lineno=487, col_offset=32), [Assign([Name('flags', Store(), lineno=492, col_offset=24)], Subscript(Name('_CONFIG_VARS', Load(), lineno=492, col_offset=32), Index(Name('key', Load(), lineno=492, col_offset=45)), Load(), lineno=492, col_offset=32), lineno=492, col_offset=24), Assign([Name('flags', Store(), lineno=493, col_offset=24)], Call(Attribute(Name('re', Load(), lineno=493, col_offset=32), 'sub', Load(), lineno=493, col_offset=32), [Str('-arch\\s+\\w+\\s', lineno=493, col_offset=39), Str(' ', lineno=493, col_offset=56), Name('flags', Load(), lineno=493, col_offset=61)], [], None, None, lineno=493, col_offset=32), lineno=493, col_offset=24), Assign([Name('flags', Store(), lineno=494, col_offset=24)], BinOp(BinOp(Name('flags', Load(), lineno=494, col_offset=32), Add(), Str(' ', lineno=494, col_offset=40), lineno=494, col_offset=32), Add(), Name('arch', Load(), lineno=494, col_offset=46), lineno=494, col_offset=44), lineno=494, col_offset=24), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=495, col_offset=24), Index(Name('key', Load(), lineno=495, col_offset=37)), Store(), lineno=495, col_offset=24)], Name('flags', Load(), lineno=495, col_offset=44), lineno=495, col_offset=24)], [], lineno=487, col_offset=20)], [], lineno=485, col_offset=16), Assign([Name('CFLAGS', Store(), lineno=507, col_offset=16)], Call(Attribute(Name('_CONFIG_VARS', Load(), lineno=507, col_offset=25), 'get', Load(), lineno=507, col_offset=25), [Str('CFLAGS', lineno=507, col_offset=42), Str('', lineno=507, col_offset=52)], [], None, None, lineno=507, col_offset=25), lineno=507, col_offset=16), Assign([Name('m', Store(), lineno=508, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=508, col_offset=20), 'search', Load(), lineno=508, col_offset=20), [Str('-isysroot\\s+(\\S+)', lineno=508, col_offset=30), Name('CFLAGS', Load(), lineno=508, col_offset=51)], [], None, None, lineno=508, col_offset=20), lineno=508, col_offset=16), If(Compare(Name('m', Load(), lineno=509, col_offset=19), [IsNot()], [Name('None', Load(), lineno=509, col_offset=28)], lineno=509, col_offset=19), [Assign([Name('sdk', Store(), lineno=510, col_offset=20)], Call(Attribute(Name('m', Load(), lineno=510, col_offset=26), 'group', Load(), lineno=510, col_offset=26), [Num(1, lineno=510, col_offset=34)], [], None, None, lineno=510, col_offset=26), lineno=510, col_offset=20), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=511, col_offset=27), 'path', Load(), lineno=511, col_offset=27), 'exists', Load(), lineno=511, col_offset=27), [Name('sdk', Load(), lineno=511, col_offset=42)], [], None, None, lineno=511, col_offset=27), lineno=511, col_offset=23), [For(Name('key', Store(), lineno=512, col_offset=28), Tuple([Str('LDFLAGS', lineno=512, col_offset=36), Str('BASECFLAGS', lineno=512, col_offset=47), Str('CFLAGS', lineno=515, col_offset=28), Str('PY_CFLAGS', lineno=515, col_offset=38), Str('BLDSHARED', lineno=515, col_offset=51)], Load(), lineno=512, col_offset=36), [Assign([Name('flags', Store(), lineno=517, col_offset=28)], Subscript(Name('_CONFIG_VARS', Load(), lineno=517, col_offset=36), Index(Name('key', Load(), lineno=517, col_offset=49)), Load(), lineno=517, col_offset=36), lineno=517, col_offset=28), Assign([Name('flags', Store(), lineno=518, col_offset=28)], Call(Attribute(Name('re', Load(), lineno=518, col_offset=36), 'sub', Load(), lineno=518, col_offset=36), [Str('-isysroot\\s+\\S+(\\s|$)', lineno=518, col_offset=43), Str(' ', lineno=518, col_offset=68), Name('flags', Load(), lineno=518, col_offset=73)], [], None, None, lineno=518, col_offset=36), lineno=518, col_offset=28), Assign([Subscript(Name('_CONFIG_VARS', Load(), lineno=519, col_offset=28), Index(Name('key', Load(), lineno=519, col_offset=41)), Store(), lineno=519, col_offset=28)], Name('flags', Load(), lineno=519, col_offset=48), lineno=519, col_offset=28)], [], lineno=512, col_offset=24)], [], lineno=511, col_offset=20)], [], lineno=509, col_offset=16)], lineno=466, col_offset=12)], [], lineno=462, col_offset=8)], [], lineno=417, col_offset=4), If(Name('args', Load(), lineno=521, col_offset=7), [Assign([Name('vals', Store(), lineno=522, col_offset=8)], List([], Load(), lineno=522, col_offset=15), lineno=522, col_offset=8), For(Name('name', Store(), lineno=523, col_offset=12), Name('args', Load(), lineno=523, col_offset=20), [Expr(Call(Attribute(Name('vals', Load(), lineno=524, col_offset=12), 'append', Load(), lineno=524, col_offset=12), [Call(Attribute(Name('_CONFIG_VARS', Load(), lineno=524, col_offset=24), 'get', Load(), lineno=524, col_offset=24), [Name('name', Load(), lineno=524, col_offset=41)], [], None, None, lineno=524, col_offset=24)], [], None, None, lineno=524, col_offset=12), lineno=524, col_offset=12)], [], lineno=523, col_offset=8), Return(Name('vals', Load(), lineno=525, col_offset=15), lineno=525, col_offset=8)], [Return(Name('_CONFIG_VARS', Load(), lineno=527, col_offset=15), lineno=527, col_offset=8)], lineno=521, col_offset=4)], [], lineno=405, col_offset=0), FunctionDef('get_config_var', arguments([Name('name', Param(), lineno=529, col_offset=19)], None, None, []), [Expr(Str("Return the value of a single variable using the dictionary returned by\n    'get_config_vars()'.\n\n    Equivalent to get_config_vars().get(name)\n    ", lineno=534, col_offset=-1), lineno=534, col_offset=-1), Return(Call(Attribute(Call(Name('get_config_vars', Load(), lineno=535, col_offset=11), [], [], None, None, lineno=535, col_offset=11), 'get', Load(), lineno=535, col_offset=11), [Name('name', Load(), lineno=535, col_offset=33)], [], None, None, lineno=535, col_offset=11), lineno=535, col_offset=4)], [], lineno=529, col_offset=0), FunctionDef('get_platform', arguments([], None, None, []), [Expr(Str("Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by 'os.uname()'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn't particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn't particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\n    ", lineno=561, col_offset=-1), lineno=561, col_offset=-1), Import([alias('re', None)], lineno=562, col_offset=4), If(Compare(Attribute(Name('os', Load(), lineno=563, col_offset=7), 'name', Load(), lineno=563, col_offset=7), [Eq()], [Str('nt', lineno=563, col_offset=18)], lineno=563, col_offset=7), [Assign([Name('prefix', Store(), lineno=565, col_offset=8)], Str(' bit (', lineno=565, col_offset=17), lineno=565, col_offset=8), Assign([Name('i', Store(), lineno=566, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=566, col_offset=12), 'version', Load(), lineno=566, col_offset=12), 'find', Load(), lineno=566, col_offset=12), [Name('prefix', Load(), lineno=566, col_offset=29)], [], None, None, lineno=566, col_offset=12), lineno=566, col_offset=8), If(Compare(Name('i', Load(), lineno=567, col_offset=11), [Eq()], [Num(-1, lineno=567, col_offset=17)], lineno=567, col_offset=11), [Return(Attribute(Name('sys', Load(), lineno=568, col_offset=19), 'platform', Load(), lineno=568, col_offset=19), lineno=568, col_offset=12)], [], lineno=567, col_offset=8), Assign([Name('j', Store(), lineno=569, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=569, col_offset=12), 'version', Load(), lineno=569, col_offset=12), 'find', Load(), lineno=569, col_offset=12), [Str(')', lineno=569, col_offset=29), Name('i', Load(), lineno=569, col_offset=34)], [], None, None, lineno=569, col_offset=12), lineno=569, col_offset=8), Assign([Name('look', Store(), lineno=570, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('sys', Load(), lineno=570, col_offset=15), 'version', Load(), lineno=570, col_offset=15), Slice(BinOp(Name('i', Load(), lineno=570, col_offset=27), Add(), Call(Name('len', Load(), lineno=570, col_offset=29), [Name('prefix', Load(), lineno=570, col_offset=33)], [], None, None, lineno=570, col_offset=29), lineno=570, col_offset=27), Name('j', Load(), lineno=570, col_offset=41), None), Load(), lineno=570, col_offset=15), 'lower', Load(), lineno=570, col_offset=15), [], [], None, None, lineno=570, col_offset=15), lineno=570, col_offset=8), If(Compare(Name('look', Load(), lineno=571, col_offset=11), [Eq()], [Str('amd64', lineno=571, col_offset=19)], lineno=571, col_offset=11), [Return(Str('win-amd64', lineno=572, col_offset=19), lineno=572, col_offset=12)], [], lineno=571, col_offset=8), If(Compare(Name('look', Load(), lineno=573, col_offset=11), [Eq()], [Str('itanium', lineno=573, col_offset=19)], lineno=573, col_offset=11), [Return(Str('win-ia64', lineno=574, col_offset=19), lineno=574, col_offset=12)], [], lineno=573, col_offset=8), Return(Attribute(Name('sys', Load(), lineno=575, col_offset=15), 'platform', Load(), lineno=575, col_offset=15), lineno=575, col_offset=8)], [], lineno=563, col_offset=4), If(BoolOp(Or(), [Compare(Attribute(Name('os', Load(), lineno=577, col_offset=7), 'name', Load(), lineno=577, col_offset=7), [NotEq()], [Str('posix', lineno=577, col_offset=18)], lineno=577, col_offset=7), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=577, col_offset=33), [Name('os', Load(), lineno=577, col_offset=41), Str('uname', lineno=577, col_offset=45)], [], None, None, lineno=577, col_offset=33), lineno=577, col_offset=29)], lineno=577, col_offset=7), [Return(Attribute(Name('sys', Load(), lineno=580, col_offset=15), 'platform', Load(), lineno=580, col_offset=15), lineno=580, col_offset=8)], [], lineno=577, col_offset=4), Assign([Tuple([Name('osname', Store(), lineno=583, col_offset=4), Name('host', Store(), lineno=583, col_offset=12), Name('release', Store(), lineno=583, col_offset=18), Name('version', Store(), lineno=583, col_offset=27), Name('machine', Store(), lineno=583, col_offset=36)], Store(), lineno=583, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=583, col_offset=46), 'uname', Load(), lineno=583, col_offset=46), [], [], None, None, lineno=583, col_offset=46), lineno=583, col_offset=4), Assign([Name('osname', Store(), lineno=587, col_offset=4)], Call(Attribute(Call(Attribute(Name('osname', Load(), lineno=587, col_offset=13), 'lower', Load(), lineno=587, col_offset=13), [], [], None, None, lineno=587, col_offset=13), 'replace', Load(), lineno=587, col_offset=13), [Str('/', lineno=587, col_offset=36), Str('', lineno=587, col_offset=41)], [], None, None, lineno=587, col_offset=13), lineno=587, col_offset=4), Assign([Name('machine', Store(), lineno=588, col_offset=4)], Call(Attribute(Name('machine', Load(), lineno=588, col_offset=14), 'replace', Load(), lineno=588, col_offset=14), [Str(' ', lineno=588, col_offset=30), Str('_', lineno=588, col_offset=35)], [], None, None, lineno=588, col_offset=14), lineno=588, col_offset=4), Assign([Name('machine', Store(), lineno=589, col_offset=4)], Call(Attribute(Name('machine', Load(), lineno=589, col_offset=14), 'replace', Load(), lineno=589, col_offset=14), [Str('/', lineno=589, col_offset=30), Str('-', lineno=589, col_offset=35)], [], None, None, lineno=589, col_offset=14), lineno=589, col_offset=4), If(Compare(Subscript(Name('osname', Load(), lineno=591, col_offset=7), Slice(None, Num(5, lineno=591, col_offset=15), None), Load(), lineno=591, col_offset=7), [Eq()], [Str('linux', lineno=591, col_offset=21)], lineno=591, col_offset=7), [Return(BinOp(Str('%s-%s', lineno=595, col_offset=16), Mod(), Tuple([Name('osname', Load(), lineno=595, col_offset=27), Name('machine', Load(), lineno=595, col_offset=35)], Load(), lineno=595, col_offset=27), lineno=595, col_offset=16), lineno=595, col_offset=8)], [If(Compare(Subscript(Name('osname', Load(), lineno=596, col_offset=9), Slice(None, Num(5, lineno=596, col_offset=17), None), Load(), lineno=596, col_offset=9), [Eq()], [Str('sunos', lineno=596, col_offset=23)], lineno=596, col_offset=9), [If(Compare(Subscript(Name('release', Load(), lineno=597, col_offset=11), Index(Num(0, lineno=597, col_offset=19)), Load(), lineno=597, col_offset=11), [GtE()], [Str('5', lineno=597, col_offset=25)], lineno=597, col_offset=11), [Assign([Name('osname', Store(), lineno=598, col_offset=12)], Str('solaris', lineno=598, col_offset=21), lineno=598, col_offset=12), Assign([Name('release', Store(), lineno=599, col_offset=12)], BinOp(Str('%d.%s', lineno=599, col_offset=22), Mod(), Tuple([BinOp(Call(Name('int', Load(), lineno=599, col_offset=33), [Subscript(Name('release', Load(), lineno=599, col_offset=37), Index(Num(0, lineno=599, col_offset=45)), Load(), lineno=599, col_offset=37)], [], None, None, lineno=599, col_offset=33), Sub(), Num(3, lineno=599, col_offset=51), lineno=599, col_offset=33), Subscript(Name('release', Load(), lineno=599, col_offset=54), Slice(Num(2, lineno=599, col_offset=62), None, None), Load(), lineno=599, col_offset=54)], Load(), lineno=599, col_offset=33), lineno=599, col_offset=22), lineno=599, col_offset=12)], [], lineno=597, col_offset=8)], [If(Compare(Subscript(Name('osname', Load(), lineno=601, col_offset=9), Slice(None, Num(4, lineno=601, col_offset=17), None), Load(), lineno=601, col_offset=9), [Eq()], [Str('irix', lineno=601, col_offset=23)], lineno=601, col_offset=9), [Return(BinOp(Str('%s-%s', lineno=602, col_offset=15), Mod(), Tuple([Name('osname', Load(), lineno=602, col_offset=26), Name('release', Load(), lineno=602, col_offset=34)], Load(), lineno=602, col_offset=26), lineno=602, col_offset=15), lineno=602, col_offset=8)], [If(Compare(Subscript(Name('osname', Load(), lineno=603, col_offset=9), Slice(None, Num(3, lineno=603, col_offset=17), None), Load(), lineno=603, col_offset=9), [Eq()], [Str('aix', lineno=603, col_offset=23)], lineno=603, col_offset=9), [Return(BinOp(Str('%s-%s.%s', lineno=604, col_offset=15), Mod(), Tuple([Name('osname', Load(), lineno=604, col_offset=29), Name('version', Load(), lineno=604, col_offset=37), Name('release', Load(), lineno=604, col_offset=46)], Load(), lineno=604, col_offset=29), lineno=604, col_offset=15), lineno=604, col_offset=8)], [If(Compare(Subscript(Name('osname', Load(), lineno=605, col_offset=9), Slice(None, Num(6, lineno=605, col_offset=17), None), Load(), lineno=605, col_offset=9), [Eq()], [Str('cygwin', lineno=605, col_offset=23)], lineno=605, col_offset=9), [Assign([Name('osname', Store(), lineno=606, col_offset=8)], Str('cygwin', lineno=606, col_offset=17), lineno=606, col_offset=8), Assign([Name('rel_re', Store(), lineno=607, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=607, col_offset=17), 'compile', Load(), lineno=607, col_offset=17), [Str('[\\d.]+', lineno=607, col_offset=29)], [], None, None, lineno=607, col_offset=17), lineno=607, col_offset=8), Assign([Name('m', Store(), lineno=608, col_offset=8)], Call(Attribute(Name('rel_re', Load(), lineno=608, col_offset=12), 'match', Load(), lineno=608, col_offset=12), [Name('release', Load(), lineno=608, col_offset=25)], [], None, None, lineno=608, col_offset=12), lineno=608, col_offset=8), If(Name('m', Load(), lineno=609, col_offset=11), [Assign([Name('release', Store(), lineno=610, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=610, col_offset=22), 'group', Load(), lineno=610, col_offset=22), [], [], None, None, lineno=610, col_offset=22), lineno=610, col_offset=12)], [], lineno=609, col_offset=8)], [If(Compare(Subscript(Name('osname', Load(), lineno=611, col_offset=9), Slice(None, Num(6, lineno=611, col_offset=17), None), Load(), lineno=611, col_offset=9), [Eq()], [Str('darwin', lineno=611, col_offset=23)], lineno=611, col_offset=9), [Assign([Name('cfgvars', Store(), lineno=618, col_offset=8)], Call(Name('get_config_vars', Load(), lineno=618, col_offset=18), [], [], None, None, lineno=618, col_offset=18), lineno=618, col_offset=8), Assign([Name('macver', Store(), lineno=619, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=619, col_offset=17), 'environ', Load(), lineno=619, col_offset=17), 'get', Load(), lineno=619, col_offset=17), [Str('MACOSX_DEPLOYMENT_TARGET', lineno=619, col_offset=32)], [], None, None, lineno=619, col_offset=17), lineno=619, col_offset=8), If(UnaryOp(Not(), Name('macver', Load(), lineno=620, col_offset=15), lineno=620, col_offset=11), [Assign([Name('macver', Store(), lineno=621, col_offset=12)], Call(Attribute(Name('cfgvars', Load(), lineno=621, col_offset=21), 'get', Load(), lineno=621, col_offset=21), [Str('MACOSX_DEPLOYMENT_TARGET', lineno=621, col_offset=33)], [], None, None, lineno=621, col_offset=21), lineno=621, col_offset=12)], [], lineno=620, col_offset=8), If(Num(1, lineno=623, col_offset=11), [Assign([Name('macrelease', Store(), lineno=627, col_offset=12)], Name('macver', Load(), lineno=627, col_offset=25), lineno=627, col_offset=12), TryExcept([Assign([Name('f', Store(), lineno=632, col_offset=16)], Call(Name('open', Load(), lineno=632, col_offset=20), [Str('/System/Library/CoreServices/SystemVersion.plist', lineno=632, col_offset=25)], [], None, None, lineno=632, col_offset=20), lineno=632, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=633, col_offset=19), None, [Pass( lineno=636, col_offset=16)], lineno=633, col_offset=12)], [TryFinally([Assign([Name('m', Store(), lineno=639, col_offset=20)], Call(Attribute(Name('re', Load(), lineno=639, col_offset=24), 'search', Load(), lineno=639, col_offset=24), [BinOp(Str('<key>ProductUserVisibleVersion</key>\\s*', lineno=640, col_offset=28), Add(), Str('<string>(.*?)</string>', lineno=641, col_offset=28), lineno=640, col_offset=28), Call(Attribute(Name('f', Load(), lineno=641, col_offset=55), 'read', Load(), lineno=641, col_offset=55), [], [], None, None, lineno=641, col_offset=55)], [], None, None, lineno=639, col_offset=24), lineno=639, col_offset=20), Expr(Call(Attribute(Name('f', Load(), lineno=642, col_offset=20), 'close', Load(), lineno=642, col_offset=20), [], [], None, None, lineno=642, col_offset=20), lineno=642, col_offset=20), If(Compare(Name('m', Load(), lineno=643, col_offset=23), [IsNot()], [Name('None', Load(), lineno=643, col_offset=32)], lineno=643, col_offset=23), [Assign([Name('macrelease', Store(), lineno=644, col_offset=24)], Call(Attribute(Str('.', lineno=644, col_offset=37), 'join', Load(), lineno=644, col_offset=37), [Subscript(Call(Attribute(Call(Attribute(Name('m', Load(), lineno=644, col_offset=46), 'group', Load(), lineno=644, col_offset=46), [Num(1, lineno=644, col_offset=54)], [], None, None, lineno=644, col_offset=46), 'split', Load(), lineno=644, col_offset=46), [Str('.', lineno=644, col_offset=63)], [], None, None, lineno=644, col_offset=46), Slice(None, Num(2, lineno=644, col_offset=69), None), Load(), lineno=644, col_offset=46)], [], None, None, lineno=644, col_offset=37), lineno=644, col_offset=24)], [], lineno=643, col_offset=20)], [Expr(Call(Attribute(Name('f', Load(), lineno=647, col_offset=20), 'close', Load(), lineno=647, col_offset=20), [], [], None, None, lineno=647, col_offset=20), lineno=647, col_offset=20)], lineno=638, col_offset=16)], lineno=631, col_offset=12)], [], lineno=623, col_offset=8), If(UnaryOp(Not(), Name('macver', Load(), lineno=649, col_offset=15), lineno=649, col_offset=11), [Assign([Name('macver', Store(), lineno=650, col_offset=12)], Name('macrelease', Load(), lineno=650, col_offset=21), lineno=650, col_offset=12)], [], lineno=649, col_offset=8), If(Name('macver', Load(), lineno=652, col_offset=11), [Assign([Name('release', Store(), lineno=653, col_offset=12)], Name('macver', Load(), lineno=653, col_offset=22), lineno=653, col_offset=12), Assign([Name('osname', Store(), lineno=654, col_offset=12)], Str('macosx', lineno=654, col_offset=21), lineno=654, col_offset=12), If(BoolOp(And(), [Compare(BinOp(Name('macrelease', Load(), lineno=656, col_offset=16), Add(), Str('.', lineno=656, col_offset=29), lineno=656, col_offset=16), [GtE()], [Str('10.4.', lineno=656, col_offset=37)], lineno=656, col_offset=15), Compare(Str('-arch', lineno=657, col_offset=20), [In()], [Call(Attribute(Call(Attribute(Call(Name('get_config_vars', Load(), lineno=657, col_offset=31), [], [], None, None, lineno=657, col_offset=31), 'get', Load(), lineno=657, col_offset=31), [Str('CFLAGS', lineno=657, col_offset=53), Str('', lineno=657, col_offset=63)], [], None, None, lineno=657, col_offset=31), 'strip', Load(), lineno=657, col_offset=31), [], [], None, None, lineno=657, col_offset=31)], lineno=657, col_offset=20)], lineno=656, col_offset=15), [Assign([Name('machine', Store(), lineno=664, col_offset=16)], Str('fat', lineno=664, col_offset=26), lineno=664, col_offset=16), Assign([Name('cflags', Store(), lineno=665, col_offset=16)], Call(Attribute(Call(Name('get_config_vars', Load(), lineno=665, col_offset=25), [], [], None, None, lineno=665, col_offset=25), 'get', Load(), lineno=665, col_offset=25), [Str('CFLAGS', lineno=665, col_offset=47)], [], None, None, lineno=665, col_offset=25), lineno=665, col_offset=16), Assign([Name('archs', Store(), lineno=667, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=667, col_offset=24), 'findall', Load(), lineno=667, col_offset=24), [Str('-arch\\s+(\\S+)', lineno=667, col_offset=35), Name('cflags', Load(), lineno=667, col_offset=52)], [], None, None, lineno=667, col_offset=24), lineno=667, col_offset=16), Assign([Name('archs', Store(), lineno=668, col_offset=16)], Call(Name('tuple', Load(), lineno=668, col_offset=24), [Call(Name('sorted', Load(), lineno=668, col_offset=30), [Call(Name('set', Load(), lineno=668, col_offset=37), [Name('archs', Load(), lineno=668, col_offset=41)], [], None, None, lineno=668, col_offset=37)], [], None, None, lineno=668, col_offset=30)], [], None, None, lineno=668, col_offset=24), lineno=668, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=670, col_offset=19), [Name('archs', Load(), lineno=670, col_offset=23)], [], None, None, lineno=670, col_offset=19), [Eq()], [Num(1, lineno=670, col_offset=33)], lineno=670, col_offset=19), [Assign([Name('machine', Store(), lineno=671, col_offset=20)], Subscript(Name('archs', Load(), lineno=671, col_offset=30), Index(Num(0, lineno=671, col_offset=36)), Load(), lineno=671, col_offset=30), lineno=671, col_offset=20)], [If(Compare(Name('archs', Load(), lineno=672, col_offset=21), [Eq()], [Tuple([Str('i386', lineno=672, col_offset=31), Str('ppc', lineno=672, col_offset=39)], Load(), lineno=672, col_offset=31)], lineno=672, col_offset=21), [Assign([Name('machine', Store(), lineno=673, col_offset=20)], Str('fat', lineno=673, col_offset=30), lineno=673, col_offset=20)], [If(Compare(Name('archs', Load(), lineno=674, col_offset=21), [Eq()], [Tuple([Str('i386', lineno=674, col_offset=31), Str('x86_64', lineno=674, col_offset=39)], Load(), lineno=674, col_offset=31)], lineno=674, col_offset=21), [Assign([Name('machine', Store(), lineno=675, col_offset=20)], Str('intel', lineno=675, col_offset=30), lineno=675, col_offset=20)], [If(Compare(Name('archs', Load(), lineno=676, col_offset=21), [Eq()], [Tuple([Str('i386', lineno=676, col_offset=31), Str('ppc', lineno=676, col_offset=39), Str('x86_64', lineno=676, col_offset=46)], Load(), lineno=676, col_offset=31)], lineno=676, col_offset=21), [Assign([Name('machine', Store(), lineno=677, col_offset=20)], Str('fat3', lineno=677, col_offset=30), lineno=677, col_offset=20)], [If(Compare(Name('archs', Load(), lineno=678, col_offset=21), [Eq()], [Tuple([Str('ppc64', lineno=678, col_offset=31), Str('x86_64', lineno=678, col_offset=40)], Load(), lineno=678, col_offset=31)], lineno=678, col_offset=21), [Assign([Name('machine', Store(), lineno=679, col_offset=20)], Str('fat64', lineno=679, col_offset=30), lineno=679, col_offset=20)], [If(Compare(Name('archs', Load(), lineno=680, col_offset=21), [Eq()], [Tuple([Str('i386', lineno=680, col_offset=31), Str('ppc', lineno=680, col_offset=39), Str('ppc64', lineno=680, col_offset=46), Str('x86_64', lineno=680, col_offset=55)], Load(), lineno=680, col_offset=31)], lineno=680, col_offset=21), [Assign([Name('machine', Store(), lineno=681, col_offset=20)], Str('universal', lineno=681, col_offset=30), lineno=681, col_offset=20)], [Raise(Call(Name('ValueError', Load(), lineno=683, col_offset=26), [BinOp(Str("Don't know machine value for archs=%r", lineno=684, col_offset=23), Mod(), Tuple([Name('archs', Load(), lineno=684, col_offset=64)], Load(), lineno=684, col_offset=64), lineno=684, col_offset=23)], [], None, None, lineno=683, col_offset=26), None, None, lineno=683, col_offset=20)], lineno=680, col_offset=21)], lineno=678, col_offset=21)], lineno=676, col_offset=21)], lineno=674, col_offset=21)], lineno=672, col_offset=21)], lineno=670, col_offset=16)], [If(Compare(Name('machine', Load(), lineno=686, col_offset=17), [Eq()], [Str('i386', lineno=686, col_offset=28)], lineno=686, col_offset=17), [If(Compare(Attribute(Name('sys', Load(), lineno=690, col_offset=19), 'maxint', Load(), lineno=690, col_offset=19), [GtE()], [BinOp(Num(2, lineno=690, col_offset=33), Pow(), Num(32, lineno=690, col_offset=36), lineno=690, col_offset=33)], lineno=690, col_offset=19), [Assign([Name('machine', Store(), lineno=691, col_offset=20)], Str('x86_64', lineno=691, col_offset=30), lineno=691, col_offset=20)], [], lineno=690, col_offset=16)], [If(Compare(Name('machine', Load(), lineno=693, col_offset=17), [In()], [Tuple([Str('PowerPC', lineno=693, col_offset=29), Str('Power_Macintosh', lineno=693, col_offset=40)], Load(), lineno=693, col_offset=29)], lineno=693, col_offset=17), [If(Compare(Attribute(Name('sys', Load(), lineno=696, col_offset=19), 'maxint', Load(), lineno=696, col_offset=19), [GtE()], [BinOp(Num(2, lineno=696, col_offset=33), Pow(), Num(32, lineno=696, col_offset=36), lineno=696, col_offset=33)], lineno=696, col_offset=19), [Assign([Name('machine', Store(), lineno=697, col_offset=20)], Str('ppc64', lineno=697, col_offset=30), lineno=697, col_offset=20)], [Assign([Name('machine', Store(), lineno=699, col_offset=20)], Str('ppc', lineno=699, col_offset=30), lineno=699, col_offset=20)], lineno=696, col_offset=16)], [], lineno=693, col_offset=17)], lineno=686, col_offset=17)], lineno=656, col_offset=12)], [], lineno=652, col_offset=8)], [], lineno=611, col_offset=9)], lineno=605, col_offset=9)], lineno=603, col_offset=9)], lineno=601, col_offset=9)], lineno=596, col_offset=9)], lineno=591, col_offset=4), Return(BinOp(Str('%s-%s-%s', lineno=701, col_offset=11), Mod(), Tuple([Name('osname', Load(), lineno=701, col_offset=25), Name('release', Load(), lineno=701, col_offset=33), Name('machine', Load(), lineno=701, col_offset=42)], Load(), lineno=701, col_offset=25), lineno=701, col_offset=11), lineno=701, col_offset=4)], [], lineno=537, col_offset=0), FunctionDef('get_python_version', arguments([], None, None, []), [Return(Name('_PY_VERSION_SHORT', Load(), lineno=705, col_offset=11), lineno=705, col_offset=4)], [], lineno=704, col_offset=0)])
