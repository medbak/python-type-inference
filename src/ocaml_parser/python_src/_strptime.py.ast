Module([Expr(Str('Strptime-related classes and functions.\n\nCLASSES:\n    LocaleTime -- Discovers and stores locale-specific time information\n    TimeRE -- Creates regexes for pattern matching a string of text containing\n                time information\n\nFUNCTIONS:\n    _getlang -- Figure out what language is being used for the locale\n    strptime -- Calculates the time struct represented by the passed-in string\n\n', lineno=12, col_offset=-1), lineno=12, col_offset=-1), Import([alias('time', None)], lineno=13, col_offset=0), Import([alias('locale', None)], lineno=14, col_offset=0), Import([alias('calendar', None)], lineno=15, col_offset=0), ImportFrom('re', [alias('compile', 're_compile')], 0, lineno=16, col_offset=0), ImportFrom('re', [alias('IGNORECASE', None)], 0, lineno=17, col_offset=0), ImportFrom('re', [alias('escape', 're_escape')], 0, lineno=18, col_offset=0), ImportFrom('datetime', [alias('date', 'datetime_date')], 0, lineno=19, col_offset=0), TryExcept([ImportFrom('thread', [alias('allocate_lock', '_thread_allocate_lock')], 0, lineno=21, col_offset=4)], [ExceptHandler(None, None, [ImportFrom('dummy_thread', [alias('allocate_lock', '_thread_allocate_lock')], 0, lineno=23, col_offset=4)], lineno=22, col_offset=0)], [], lineno=20, col_offset=0), Assign([Name('__all__', Store(), lineno=25, col_offset=0)], List([], Load(), lineno=25, col_offset=10), lineno=25, col_offset=0), FunctionDef('_getlang', arguments([], None, None, []), [Return(Call(Attribute(Name('locale', Load(), lineno=29, col_offset=11), 'getlocale', Load(), lineno=29, col_offset=11), [Attribute(Name('locale', Load(), lineno=29, col_offset=28), 'LC_TIME', Load(), lineno=29, col_offset=28)], [], None, None, lineno=29, col_offset=11), lineno=29, col_offset=4)], [], lineno=27, col_offset=0), ClassDef('LocaleTime', [Name('object', Load(), lineno=31, col_offset=17)], [Expr(Str('Stores and handles locale-specific information related to time.\n\n    ATTRIBUTES:\n        f_weekday -- full weekday names (7-item list)\n        a_weekday -- abbreviated weekday names (7-item list)\n        f_month -- full month names (13-item list; dummy value in [0], which\n                    is added by code)\n        a_month -- abbreviated month names (13-item list, dummy value in\n                    [0], which is added by code)\n        am_pm -- AM/PM representation (2-item list)\n        LC_date_time -- format string for date/time representation (string)\n        LC_date -- format string for date representation (string)\n        LC_time -- format string for time representation (string)\n        timezone -- daylight- and non-daylight-savings timezone representation\n                    (2-item list of sets)\n        lang -- Language used by instance (2-item tuple)\n    ', lineno=48, col_offset=-1), lineno=48, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=50, col_offset=17)], None, None, []), [Expr(Str('Set all attributes.\n\n        Order of methods called matters for dependency reasons.\n\n        The locale language is set at the offset and then checked again before\n        exiting.  This is to make sure that the attributes were not set with a\n        mix of information from more than one locale.  This would most likely\n        happen when using threads where one thread calls a locale-dependent\n        function while another thread changes the locale while the function in\n        the other thread is still running.  Proper coding would call for\n        locks to prevent changing the locale while locale-dependent code is\n        running.  The check here is done in case someone does not think about\n        doing this.\n\n        Only other possible issue is if someone changed the timezone and did\n        not call tz.tzset .  That is an issue for the programmer, though,\n        since changing the timezone is worthless without that call.\n\n        ', lineno=69, col_offset=-1), lineno=69, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=70, col_offset=8), 'lang', Store(), lineno=70, col_offset=8)], Call(Name('_getlang', Load(), lineno=70, col_offset=20), [], [], None, None, lineno=70, col_offset=20), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), '__calc_weekday', Load(), lineno=71, col_offset=8), [], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=72, col_offset=8), '__calc_month', Load(), lineno=72, col_offset=8), [], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=8), '__calc_am_pm', Load(), lineno=73, col_offset=8), [], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=74, col_offset=8), '__calc_timezone', Load(), lineno=74, col_offset=8), [], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), '__calc_date_time', Load(), lineno=75, col_offset=8), [], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), If(Compare(Call(Name('_getlang', Load(), lineno=76, col_offset=11), [], [], None, None, lineno=76, col_offset=11), [NotEq()], [Attribute(Name('self', Load(), lineno=76, col_offset=25), 'lang', Load(), lineno=76, col_offset=25)], lineno=76, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=77, col_offset=18), [Str('locale changed during initialization', lineno=77, col_offset=29)], [], None, None, lineno=77, col_offset=18), None, None, lineno=77, col_offset=12)], [], lineno=76, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('__pad', arguments([Name('self', Param(), lineno=79, col_offset=14), Name('seq', Param(), lineno=79, col_offset=20), Name('front', Param(), lineno=79, col_offset=25)], None, None, []), [Assign([Name('seq', Store(), lineno=81, col_offset=8)], Call(Name('list', Load(), lineno=81, col_offset=14), [Name('seq', Load(), lineno=81, col_offset=19)], [], None, None, lineno=81, col_offset=14), lineno=81, col_offset=8), If(Name('front', Load(), lineno=82, col_offset=11), [Expr(Call(Attribute(Name('seq', Load(), lineno=83, col_offset=12), 'insert', Load(), lineno=83, col_offset=12), [Num(0, lineno=83, col_offset=23), Str('', lineno=83, col_offset=26)], [], None, None, lineno=83, col_offset=12), lineno=83, col_offset=12)], [Expr(Call(Attribute(Name('seq', Load(), lineno=85, col_offset=12), 'append', Load(), lineno=85, col_offset=12), [Str('', lineno=85, col_offset=23)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=12)], lineno=82, col_offset=8), Return(Name('seq', Load(), lineno=86, col_offset=15), lineno=86, col_offset=8)], [], lineno=79, col_offset=4), FunctionDef('__calc_weekday', arguments([Name('self', Param(), lineno=88, col_offset=23)], None, None, []), [Assign([Name('a_weekday', Store(), lineno=91, col_offset=8)], ListComp(Call(Attribute(Subscript(Attribute(Name('calendar', Load(), lineno=91, col_offset=21), 'day_abbr', Load(), lineno=91, col_offset=21), Index(Name('i', Load(), lineno=91, col_offset=39)), Load(), lineno=91, col_offset=21), 'lower', Load(), lineno=91, col_offset=21), [], [], None, None, lineno=91, col_offset=21), [comprehension(Name('i', Store(), lineno=91, col_offset=54), Call(Name('range', Load(), lineno=91, col_offset=59), [Num(7, lineno=91, col_offset=65)], [], None, None, lineno=91, col_offset=59), [])], lineno=91, col_offset=21), lineno=91, col_offset=8), Assign([Name('f_weekday', Store(), lineno=92, col_offset=8)], ListComp(Call(Attribute(Subscript(Attribute(Name('calendar', Load(), lineno=92, col_offset=21), 'day_name', Load(), lineno=92, col_offset=21), Index(Name('i', Load(), lineno=92, col_offset=39)), Load(), lineno=92, col_offset=21), 'lower', Load(), lineno=92, col_offset=21), [], [], None, None, lineno=92, col_offset=21), [comprehension(Name('i', Store(), lineno=92, col_offset=54), Call(Name('range', Load(), lineno=92, col_offset=59), [Num(7, lineno=92, col_offset=65)], [], None, None, lineno=92, col_offset=59), [])], lineno=92, col_offset=21), lineno=92, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=93, col_offset=8), 'a_weekday', Store(), lineno=93, col_offset=8)], Name('a_weekday', Load(), lineno=93, col_offset=25), lineno=93, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=94, col_offset=8), 'f_weekday', Store(), lineno=94, col_offset=8)], Name('f_weekday', Load(), lineno=94, col_offset=25), lineno=94, col_offset=8)], [], lineno=88, col_offset=4), FunctionDef('__calc_month', arguments([Name('self', Param(), lineno=96, col_offset=21)], None, None, []), [Assign([Name('a_month', Store(), lineno=98, col_offset=8)], ListComp(Call(Attribute(Subscript(Attribute(Name('calendar', Load(), lineno=98, col_offset=19), 'month_abbr', Load(), lineno=98, col_offset=19), Index(Name('i', Load(), lineno=98, col_offset=39)), Load(), lineno=98, col_offset=19), 'lower', Load(), lineno=98, col_offset=19), [], [], None, None, lineno=98, col_offset=19), [comprehension(Name('i', Store(), lineno=98, col_offset=54), Call(Name('range', Load(), lineno=98, col_offset=59), [Num(13, lineno=98, col_offset=65)], [], None, None, lineno=98, col_offset=59), [])], lineno=98, col_offset=19), lineno=98, col_offset=8), Assign([Name('f_month', Store(), lineno=99, col_offset=8)], ListComp(Call(Attribute(Subscript(Attribute(Name('calendar', Load(), lineno=99, col_offset=19), 'month_name', Load(), lineno=99, col_offset=19), Index(Name('i', Load(), lineno=99, col_offset=39)), Load(), lineno=99, col_offset=19), 'lower', Load(), lineno=99, col_offset=19), [], [], None, None, lineno=99, col_offset=19), [comprehension(Name('i', Store(), lineno=99, col_offset=54), Call(Name('range', Load(), lineno=99, col_offset=59), [Num(13, lineno=99, col_offset=65)], [], None, None, lineno=99, col_offset=59), [])], lineno=99, col_offset=19), lineno=99, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=100, col_offset=8), 'a_month', Store(), lineno=100, col_offset=8)], Name('a_month', Load(), lineno=100, col_offset=23), lineno=100, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=101, col_offset=8), 'f_month', Store(), lineno=101, col_offset=8)], Name('f_month', Load(), lineno=101, col_offset=23), lineno=101, col_offset=8)], [], lineno=96, col_offset=4), FunctionDef('__calc_am_pm', arguments([Name('self', Param(), lineno=103, col_offset=21)], None, None, []), [Assign([Name('am_pm', Store(), lineno=109, col_offset=8)], List([], Load(), lineno=109, col_offset=16), lineno=109, col_offset=8), For(Name('hour', Store(), lineno=110, col_offset=12), Tuple([Num(1, lineno=110, col_offset=21), Num(22, lineno=110, col_offset=24)], Load(), lineno=110, col_offset=21), [Assign([Name('time_tuple', Store(), lineno=111, col_offset=12)], Call(Attribute(Name('time', Load(), lineno=111, col_offset=25), 'struct_time', Load(), lineno=111, col_offset=25), [Tuple([Num(1999, lineno=111, col_offset=43), Num(3, lineno=111, col_offset=48), Num(17, lineno=111, col_offset=50), Name('hour', Load(), lineno=111, col_offset=53), Num(44, lineno=111, col_offset=58), Num(55, lineno=111, col_offset=61), Num(2, lineno=111, col_offset=64), Num(76, lineno=111, col_offset=66), Num(0, lineno=111, col_offset=69)], Load(), lineno=111, col_offset=43)], [], None, None, lineno=111, col_offset=25), lineno=111, col_offset=12), Expr(Call(Attribute(Name('am_pm', Load(), lineno=112, col_offset=12), 'append', Load(), lineno=112, col_offset=12), [Call(Attribute(Call(Attribute(Name('time', Load(), lineno=112, col_offset=25), 'strftime', Load(), lineno=112, col_offset=25), [Str('%p', lineno=112, col_offset=39), Name('time_tuple', Load(), lineno=112, col_offset=45)], [], None, None, lineno=112, col_offset=25), 'lower', Load(), lineno=112, col_offset=25), [], [], None, None, lineno=112, col_offset=25)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12)], [], lineno=110, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=113, col_offset=8), 'am_pm', Store(), lineno=113, col_offset=8)], Name('am_pm', Load(), lineno=113, col_offset=21), lineno=113, col_offset=8)], [], lineno=103, col_offset=4), FunctionDef('__calc_date_time', arguments([Name('self', Param(), lineno=115, col_offset=25)], None, None, []), [Assign([Name('time_tuple', Store(), lineno=123, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=123, col_offset=21), 'struct_time', Load(), lineno=123, col_offset=21), [Tuple([Num(1999, lineno=123, col_offset=39), Num(3, lineno=123, col_offset=44), Num(17, lineno=123, col_offset=46), Num(22, lineno=123, col_offset=49), Num(44, lineno=123, col_offset=52), Num(55, lineno=123, col_offset=55), Num(2, lineno=123, col_offset=58), Num(76, lineno=123, col_offset=60), Num(0, lineno=123, col_offset=63)], Load(), lineno=123, col_offset=39)], [], None, None, lineno=123, col_offset=21), lineno=123, col_offset=8), Assign([Name('date_time', Store(), lineno=124, col_offset=8)], List([Name('None', Load(), lineno=124, col_offset=21), Name('None', Load(), lineno=124, col_offset=27), Name('None', Load(), lineno=124, col_offset=33)], Load(), lineno=124, col_offset=20), lineno=124, col_offset=8), Assign([Subscript(Name('date_time', Load(), lineno=125, col_offset=8), Index(Num(0, lineno=125, col_offset=18)), Store(), lineno=125, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=125, col_offset=23), 'strftime', Load(), lineno=125, col_offset=23), [Str('%c', lineno=125, col_offset=37), Name('time_tuple', Load(), lineno=125, col_offset=43)], [], None, None, lineno=125, col_offset=23), 'lower', Load(), lineno=125, col_offset=23), [], [], None, None, lineno=125, col_offset=23), lineno=125, col_offset=8), Assign([Subscript(Name('date_time', Load(), lineno=126, col_offset=8), Index(Num(1, lineno=126, col_offset=18)), Store(), lineno=126, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=126, col_offset=23), 'strftime', Load(), lineno=126, col_offset=23), [Str('%x', lineno=126, col_offset=37), Name('time_tuple', Load(), lineno=126, col_offset=43)], [], None, None, lineno=126, col_offset=23), 'lower', Load(), lineno=126, col_offset=23), [], [], None, None, lineno=126, col_offset=23), lineno=126, col_offset=8), Assign([Subscript(Name('date_time', Load(), lineno=127, col_offset=8), Index(Num(2, lineno=127, col_offset=18)), Store(), lineno=127, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=127, col_offset=23), 'strftime', Load(), lineno=127, col_offset=23), [Str('%X', lineno=127, col_offset=37), Name('time_tuple', Load(), lineno=127, col_offset=43)], [], None, None, lineno=127, col_offset=23), 'lower', Load(), lineno=127, col_offset=23), [], [], None, None, lineno=127, col_offset=23), lineno=127, col_offset=8), Assign([Name('replacement_pairs', Store(), lineno=128, col_offset=8)], List([Tuple([Str('%', lineno=128, col_offset=30), Str('%%', lineno=128, col_offset=35)], Load(), lineno=128, col_offset=30), Tuple([Subscript(Attribute(Name('self', Load(), lineno=128, col_offset=43), 'f_weekday', Load(), lineno=128, col_offset=43), Index(Num(2, lineno=128, col_offset=58)), Load(), lineno=128, col_offset=43), Str('%A', lineno=128, col_offset=62)], Load(), lineno=128, col_offset=43), Tuple([Subscript(Attribute(Name('self', Load(), lineno=129, col_offset=21), 'f_month', Load(), lineno=129, col_offset=21), Index(Num(3, lineno=129, col_offset=34)), Load(), lineno=129, col_offset=21), Str('%B', lineno=129, col_offset=38)], Load(), lineno=129, col_offset=21), Tuple([Subscript(Attribute(Name('self', Load(), lineno=129, col_offset=46), 'a_weekday', Load(), lineno=129, col_offset=46), Index(Num(2, lineno=129, col_offset=61)), Load(), lineno=129, col_offset=46), Str('%a', lineno=129, col_offset=65)], Load(), lineno=129, col_offset=46), Tuple([Subscript(Attribute(Name('self', Load(), lineno=130, col_offset=21), 'a_month', Load(), lineno=130, col_offset=21), Index(Num(3, lineno=130, col_offset=34)), Load(), lineno=130, col_offset=21), Str('%b', lineno=130, col_offset=38)], Load(), lineno=130, col_offset=21), Tuple([Subscript(Attribute(Name('self', Load(), lineno=130, col_offset=46), 'am_pm', Load(), lineno=130, col_offset=46), Index(Num(1, lineno=130, col_offset=57)), Load(), lineno=130, col_offset=46), Str('%p', lineno=130, col_offset=61)], Load(), lineno=130, col_offset=46), Tuple([Str('1999', lineno=131, col_offset=21), Str('%Y', lineno=131, col_offset=29)], Load(), lineno=131, col_offset=21), Tuple([Str('99', lineno=131, col_offset=37), Str('%y', lineno=131, col_offset=43)], Load(), lineno=131, col_offset=37), Tuple([Str('22', lineno=131, col_offset=51), Str('%H', lineno=131, col_offset=57)], Load(), lineno=131, col_offset=51), Tuple([Str('44', lineno=132, col_offset=21), Str('%M', lineno=132, col_offset=27)], Load(), lineno=132, col_offset=21), Tuple([Str('55', lineno=132, col_offset=35), Str('%S', lineno=132, col_offset=41)], Load(), lineno=132, col_offset=35), Tuple([Str('76', lineno=132, col_offset=49), Str('%j', lineno=132, col_offset=55)], Load(), lineno=132, col_offset=49), Tuple([Str('17', lineno=133, col_offset=21), Str('%d', lineno=133, col_offset=27)], Load(), lineno=133, col_offset=21), Tuple([Str('03', lineno=133, col_offset=35), Str('%m', lineno=133, col_offset=41)], Load(), lineno=133, col_offset=35), Tuple([Str('3', lineno=133, col_offset=49), Str('%m', lineno=133, col_offset=54)], Load(), lineno=133, col_offset=49), Tuple([Str('2', lineno=135, col_offset=21), Str('%w', lineno=135, col_offset=26)], Load(), lineno=135, col_offset=21), Tuple([Str('10', lineno=135, col_offset=34), Str('%I', lineno=135, col_offset=40)], Load(), lineno=135, col_offset=34)], Load(), lineno=128, col_offset=28), lineno=128, col_offset=8), Expr(Call(Attribute(Name('replacement_pairs', Load(), lineno=136, col_offset=8), 'extend', Load(), lineno=136, col_offset=8), [ListComp(Tuple([Name('tz', Load(), lineno=136, col_offset=35), Str('%Z', lineno=136, col_offset=39)], Load(), lineno=136, col_offset=35), [comprehension(Name('tz_values', Store(), lineno=136, col_offset=49), Attribute(Name('self', Load(), lineno=136, col_offset=62), 'timezone', Load(), lineno=136, col_offset=62), []), comprehension(Name('tz', Store(), lineno=137, col_offset=52), Name('tz_values', Load(), lineno=137, col_offset=58), [])], lineno=136, col_offset=34)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), For(Tuple([Name('offset', Store(), lineno=138, col_offset=12), Name('directive', Store(), lineno=138, col_offset=19)], Store(), lineno=138, col_offset=12), Tuple([Tuple([Num(0, lineno=138, col_offset=34), Str('%c', lineno=138, col_offset=36)], Load(), lineno=138, col_offset=34), Tuple([Num(1, lineno=138, col_offset=44), Str('%x', lineno=138, col_offset=46)], Load(), lineno=138, col_offset=44), Tuple([Num(2, lineno=138, col_offset=54), Str('%X', lineno=138, col_offset=56)], Load(), lineno=138, col_offset=54)], Load(), lineno=138, col_offset=33), [Assign([Name('current_format', Store(), lineno=139, col_offset=12)], Subscript(Name('date_time', Load(), lineno=139, col_offset=29), Index(Name('offset', Load(), lineno=139, col_offset=39)), Load(), lineno=139, col_offset=29), lineno=139, col_offset=12), For(Tuple([Name('old', Store(), lineno=140, col_offset=16), Name('new', Store(), lineno=140, col_offset=21)], Store(), lineno=140, col_offset=16), Name('replacement_pairs', Load(), lineno=140, col_offset=28), [If(Name('old', Load(), lineno=145, col_offset=19), [Assign([Name('current_format', Store(), lineno=146, col_offset=20)], Call(Attribute(Name('current_format', Load(), lineno=146, col_offset=37), 'replace', Load(), lineno=146, col_offset=37), [Name('old', Load(), lineno=146, col_offset=60), Name('new', Load(), lineno=146, col_offset=65)], [], None, None, lineno=146, col_offset=37), lineno=146, col_offset=20)], [], lineno=145, col_offset=16)], [], lineno=140, col_offset=12), Assign([Name('time_tuple', Store(), lineno=150, col_offset=12)], Call(Attribute(Name('time', Load(), lineno=150, col_offset=25), 'struct_time', Load(), lineno=150, col_offset=25), [Tuple([Num(1999, lineno=150, col_offset=43), Num(1, lineno=150, col_offset=48), Num(3, lineno=150, col_offset=50), Num(1, lineno=150, col_offset=52), Num(1, lineno=150, col_offset=54), Num(1, lineno=150, col_offset=56), Num(6, lineno=150, col_offset=58), Num(3, lineno=150, col_offset=60), Num(0, lineno=150, col_offset=62)], Load(), lineno=150, col_offset=43)], [], None, None, lineno=150, col_offset=25), lineno=150, col_offset=12), If(Compare(Str('00', lineno=151, col_offset=15), [In()], [Call(Attribute(Name('time', Load(), lineno=151, col_offset=23), 'strftime', Load(), lineno=151, col_offset=23), [Name('directive', Load(), lineno=151, col_offset=37), Name('time_tuple', Load(), lineno=151, col_offset=48)], [], None, None, lineno=151, col_offset=23)], lineno=151, col_offset=15), [Assign([Name('U_W', Store(), lineno=152, col_offset=16)], Str('%W', lineno=152, col_offset=22), lineno=152, col_offset=16)], [Assign([Name('U_W', Store(), lineno=154, col_offset=16)], Str('%U', lineno=154, col_offset=22), lineno=154, col_offset=16)], lineno=151, col_offset=12), Assign([Subscript(Name('date_time', Load(), lineno=155, col_offset=12), Index(Name('offset', Load(), lineno=155, col_offset=22)), Store(), lineno=155, col_offset=12)], Call(Attribute(Name('current_format', Load(), lineno=155, col_offset=32), 'replace', Load(), lineno=155, col_offset=32), [Str('11', lineno=155, col_offset=55), Name('U_W', Load(), lineno=155, col_offset=61)], [], None, None, lineno=155, col_offset=32), lineno=155, col_offset=12)], [], lineno=138, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'LC_date_time', Store(), lineno=156, col_offset=8)], Subscript(Name('date_time', Load(), lineno=156, col_offset=28), Index(Num(0, lineno=156, col_offset=38)), Load(), lineno=156, col_offset=28), lineno=156, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=157, col_offset=8), 'LC_date', Store(), lineno=157, col_offset=8)], Subscript(Name('date_time', Load(), lineno=157, col_offset=23), Index(Num(1, lineno=157, col_offset=33)), Load(), lineno=157, col_offset=23), lineno=157, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=158, col_offset=8), 'LC_time', Store(), lineno=158, col_offset=8)], Subscript(Name('date_time', Load(), lineno=158, col_offset=23), Index(Num(2, lineno=158, col_offset=33)), Load(), lineno=158, col_offset=23), lineno=158, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('__calc_timezone', arguments([Name('self', Param(), lineno=160, col_offset=24)], None, None, []), [TryExcept([Expr(Call(Attribute(Name('time', Load(), lineno=165, col_offset=12), 'tzset', Load(), lineno=165, col_offset=12), [], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=166, col_offset=15), None, [Pass( lineno=167, col_offset=12)], lineno=166, col_offset=8)], [], lineno=164, col_offset=8), Assign([Name('no_saving', Store(), lineno=168, col_offset=8)], Call(Name('frozenset', Load(), lineno=168, col_offset=20), [List([Str('utc', lineno=168, col_offset=31), Str('gmt', lineno=168, col_offset=38), Call(Attribute(Subscript(Attribute(Name('time', Load(), lineno=168, col_offset=45), 'tzname', Load(), lineno=168, col_offset=45), Index(Num(0, lineno=168, col_offset=57)), Load(), lineno=168, col_offset=45), 'lower', Load(), lineno=168, col_offset=45), [], [], None, None, lineno=168, col_offset=45)], Load(), lineno=168, col_offset=30)], [], None, None, lineno=168, col_offset=20), lineno=168, col_offset=8), If(Attribute(Name('time', Load(), lineno=169, col_offset=11), 'daylight', Load(), lineno=169, col_offset=11), [Assign([Name('has_saving', Store(), lineno=170, col_offset=12)], Call(Name('frozenset', Load(), lineno=170, col_offset=25), [List([Call(Attribute(Subscript(Attribute(Name('time', Load(), lineno=170, col_offset=36), 'tzname', Load(), lineno=170, col_offset=36), Index(Num(1, lineno=170, col_offset=48)), Load(), lineno=170, col_offset=36), 'lower', Load(), lineno=170, col_offset=36), [], [], None, None, lineno=170, col_offset=36)], Load(), lineno=170, col_offset=35)], [], None, None, lineno=170, col_offset=25), lineno=170, col_offset=12)], [Assign([Name('has_saving', Store(), lineno=172, col_offset=12)], Call(Name('frozenset', Load(), lineno=172, col_offset=25), [], [], None, None, lineno=172, col_offset=25), lineno=172, col_offset=12)], lineno=169, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=173, col_offset=8), 'timezone', Store(), lineno=173, col_offset=8)], Tuple([Name('no_saving', Load(), lineno=173, col_offset=25), Name('has_saving', Load(), lineno=173, col_offset=36)], Load(), lineno=173, col_offset=25), lineno=173, col_offset=8)], [], lineno=160, col_offset=4)], [], lineno=31, col_offset=0), ClassDef('TimeRE', [Name('dict', Load(), lineno=176, col_offset=13)], [Expr(Str('Handle conversion from format directives to regexes.', lineno=177, col_offset=4), lineno=177, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=179, col_offset=17), Name('locale_time', Param(), lineno=179, col_offset=23)], None, None, [Name('None', Load(), lineno=179, col_offset=35)]), [Expr(Str('Create keys/values.\n\n        Order of execution is important for dependency reasons.\n\n        ', lineno=184, col_offset=-1), lineno=184, col_offset=-1), If(Name('locale_time', Load(), lineno=185, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=186, col_offset=12), 'locale_time', Store(), lineno=186, col_offset=12)], Name('locale_time', Load(), lineno=186, col_offset=31), lineno=186, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=188, col_offset=12), 'locale_time', Store(), lineno=188, col_offset=12)], Call(Name('LocaleTime', Load(), lineno=188, col_offset=31), [], [], None, None, lineno=188, col_offset=31), lineno=188, col_offset=12)], lineno=185, col_offset=8), Assign([Name('base', Store(), lineno=189, col_offset=8)], Call(Name('super', Load(), lineno=189, col_offset=15), [Name('TimeRE', Load(), lineno=189, col_offset=21), Name('self', Load(), lineno=189, col_offset=29)], [], None, None, lineno=189, col_offset=15), lineno=189, col_offset=8), Expr(Call(Attribute(Name('base', Load(), lineno=190, col_offset=8), '__init__', Load(), lineno=190, col_offset=8), [Dict([Str('d', lineno=192, col_offset=12), Str('f', lineno=193, col_offset=12), Str('H', lineno=194, col_offset=12), Str('I', lineno=195, col_offset=12), Str('j', lineno=196, col_offset=12), Str('m', lineno=197, col_offset=12), Str('M', lineno=198, col_offset=12), Str('S', lineno=199, col_offset=12), Str('U', lineno=200, col_offset=12), Str('w', lineno=201, col_offset=12), Str('y', lineno=203, col_offset=12), Str('Y', lineno=206, col_offset=12), Str('A', lineno=207, col_offset=12), Str('a', lineno=208, col_offset=12), Str('B', lineno=209, col_offset=12), Str('b', lineno=210, col_offset=12), Str('p', lineno=211, col_offset=12), Str('Z', lineno=212, col_offset=12), Str('%', lineno=215, col_offset=12)], [Str('(?P<d>3[0-1]|[1-2]\\d|0[1-9]|[1-9]| [1-9])', lineno=192, col_offset=17), Str('(?P<f>[0-9]{1,6})', lineno=193, col_offset=17), Str('(?P<H>2[0-3]|[0-1]\\d|\\d)', lineno=194, col_offset=17), Str('(?P<I>1[0-2]|0[1-9]|[1-9])', lineno=195, col_offset=17), Str('(?P<j>36[0-6]|3[0-5]\\d|[1-2]\\d\\d|0[1-9]\\d|00[1-9]|[1-9]\\d|0[1-9]|[1-9])', lineno=196, col_offset=17), Str('(?P<m>1[0-2]|0[1-9]|[1-9])', lineno=197, col_offset=17), Str('(?P<M>[0-5]\\d|\\d)', lineno=198, col_offset=17), Str('(?P<S>6[0-1]|[0-5]\\d|\\d)', lineno=199, col_offset=17), Str('(?P<U>5[0-3]|[0-4]\\d|\\d)', lineno=200, col_offset=17), Str('(?P<w>[0-6])', lineno=201, col_offset=17), Str('(?P<y>\\d\\d)', lineno=203, col_offset=17), Str('(?P<Y>\\d\\d\\d\\d)', lineno=206, col_offset=17), Call(Attribute(Name('self', Load(), lineno=207, col_offset=17), '__seqToRE', Load(), lineno=207, col_offset=17), [Attribute(Attribute(Name('self', Load(), lineno=207, col_offset=32), 'locale_time', Load(), lineno=207, col_offset=32), 'f_weekday', Load(), lineno=207, col_offset=32), Str('A', lineno=207, col_offset=60)], [], None, None, lineno=207, col_offset=17), Call(Attribute(Name('self', Load(), lineno=208, col_offset=17), '__seqToRE', Load(), lineno=208, col_offset=17), [Attribute(Attribute(Name('self', Load(), lineno=208, col_offset=32), 'locale_time', Load(), lineno=208, col_offset=32), 'a_weekday', Load(), lineno=208, col_offset=32), Str('a', lineno=208, col_offset=60)], [], None, None, lineno=208, col_offset=17), Call(Attribute(Name('self', Load(), lineno=209, col_offset=17), '__seqToRE', Load(), lineno=209, col_offset=17), [Subscript(Attribute(Attribute(Name('self', Load(), lineno=209, col_offset=32), 'locale_time', Load(), lineno=209, col_offset=32), 'f_month', Load(), lineno=209, col_offset=32), Slice(Num(1, lineno=209, col_offset=57), None, None), Load(), lineno=209, col_offset=32), Str('B', lineno=209, col_offset=62)], [], None, None, lineno=209, col_offset=17), Call(Attribute(Name('self', Load(), lineno=210, col_offset=17), '__seqToRE', Load(), lineno=210, col_offset=17), [Subscript(Attribute(Attribute(Name('self', Load(), lineno=210, col_offset=32), 'locale_time', Load(), lineno=210, col_offset=32), 'a_month', Load(), lineno=210, col_offset=32), Slice(Num(1, lineno=210, col_offset=57), None, None), Load(), lineno=210, col_offset=32), Str('b', lineno=210, col_offset=62)], [], None, None, lineno=210, col_offset=17), Call(Attribute(Name('self', Load(), lineno=211, col_offset=17), '__seqToRE', Load(), lineno=211, col_offset=17), [Attribute(Attribute(Name('self', Load(), lineno=211, col_offset=32), 'locale_time', Load(), lineno=211, col_offset=32), 'am_pm', Load(), lineno=211, col_offset=32), Str('p', lineno=211, col_offset=56)], [], None, None, lineno=211, col_offset=17), Call(Attribute(Name('self', Load(), lineno=212, col_offset=17), '__seqToRE', Load(), lineno=212, col_offset=17), [GeneratorExp(Name('tz', Load(), lineno=212, col_offset=33), [comprehension(Name('tz_names', Store(), lineno=212, col_offset=40), Attribute(Attribute(Name('self', Load(), lineno=212, col_offset=52), 'locale_time', Load(), lineno=212, col_offset=52), 'timezone', Load(), lineno=212, col_offset=52), []), comprehension(Name('tz', Store(), lineno=213, col_offset=44), Name('tz_names', Load(), lineno=213, col_offset=50), [])], lineno=212, col_offset=33), Str('Z', lineno=214, col_offset=32)], [], None, None, lineno=212, col_offset=17), Str('%', lineno=215, col_offset=17)], lineno=190, col_offset=22)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('base', Load(), lineno=216, col_offset=8), '__setitem__', Load(), lineno=216, col_offset=8), [Str('W', lineno=216, col_offset=25), Call(Attribute(Call(Attribute(Name('base', Load(), lineno=216, col_offset=30), '__getitem__', Load(), lineno=216, col_offset=30), [Str('U', lineno=216, col_offset=47)], [], None, None, lineno=216, col_offset=30), 'replace', Load(), lineno=216, col_offset=30), [Str('U', lineno=216, col_offset=60), Str('W', lineno=216, col_offset=65)], [], None, None, lineno=216, col_offset=30)], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8), Expr(Call(Attribute(Name('base', Load(), lineno=217, col_offset=8), '__setitem__', Load(), lineno=217, col_offset=8), [Str('c', lineno=217, col_offset=25), Call(Attribute(Name('self', Load(), lineno=217, col_offset=30), 'pattern', Load(), lineno=217, col_offset=30), [Attribute(Attribute(Name('self', Load(), lineno=217, col_offset=43), 'locale_time', Load(), lineno=217, col_offset=43), 'LC_date_time', Load(), lineno=217, col_offset=43)], [], None, None, lineno=217, col_offset=30)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Expr(Call(Attribute(Name('base', Load(), lineno=218, col_offset=8), '__setitem__', Load(), lineno=218, col_offset=8), [Str('x', lineno=218, col_offset=25), Call(Attribute(Name('self', Load(), lineno=218, col_offset=30), 'pattern', Load(), lineno=218, col_offset=30), [Attribute(Attribute(Name('self', Load(), lineno=218, col_offset=43), 'locale_time', Load(), lineno=218, col_offset=43), 'LC_date', Load(), lineno=218, col_offset=43)], [], None, None, lineno=218, col_offset=30)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8), Expr(Call(Attribute(Name('base', Load(), lineno=219, col_offset=8), '__setitem__', Load(), lineno=219, col_offset=8), [Str('X', lineno=219, col_offset=25), Call(Attribute(Name('self', Load(), lineno=219, col_offset=30), 'pattern', Load(), lineno=219, col_offset=30), [Attribute(Attribute(Name('self', Load(), lineno=219, col_offset=43), 'locale_time', Load(), lineno=219, col_offset=43), 'LC_time', Load(), lineno=219, col_offset=43)], [], None, None, lineno=219, col_offset=30)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8)], [], lineno=179, col_offset=4), FunctionDef('__seqToRE', arguments([Name('self', Param(), lineno=221, col_offset=18), Name('to_convert', Param(), lineno=221, col_offset=24), Name('directive', Param(), lineno=221, col_offset=36)], None, None, []), [Expr(Str("Convert a list to a regex string for matching a directive.\n\n        Want possible matching values to be from longest to shortest.  This\n        prevents the possibility of a match occuring for a value that also\n        a substring of a larger value that should have matched (e.g., 'abc'\n        matching when 'abcdef' should have been the match).\n\n        ", lineno=229, col_offset=-1), lineno=229, col_offset=-1), Assign([Name('to_convert', Store(), lineno=230, col_offset=8)], Call(Name('sorted', Load(), lineno=230, col_offset=21), [Name('to_convert', Load(), lineno=230, col_offset=28)], [keyword('key', Name('len', Load(), lineno=230, col_offset=44)), keyword('reverse', Name('True', Load(), lineno=230, col_offset=57))], None, None, lineno=230, col_offset=21), lineno=230, col_offset=8), For(Name('value', Store(), lineno=231, col_offset=12), Name('to_convert', Load(), lineno=231, col_offset=21), [If(Compare(Name('value', Load(), lineno=232, col_offset=15), [NotEq()], [Str('', lineno=232, col_offset=24)], lineno=232, col_offset=15), [Break( lineno=233, col_offset=16)], [], lineno=232, col_offset=12)], [Return(Str('', lineno=235, col_offset=19), lineno=235, col_offset=12)], lineno=231, col_offset=8), Assign([Name('regex', Store(), lineno=236, col_offset=8)], Call(Attribute(Str('|', lineno=236, col_offset=16), 'join', Load(), lineno=236, col_offset=16), [GeneratorExp(Call(Name('re_escape', Load(), lineno=236, col_offset=25), [Name('stuff', Load(), lineno=236, col_offset=35)], [], None, None, lineno=236, col_offset=25), [comprehension(Name('stuff', Store(), lineno=236, col_offset=46), Name('to_convert', Load(), lineno=236, col_offset=55), [])], lineno=236, col_offset=25)], [], None, None, lineno=236, col_offset=16), lineno=236, col_offset=8), Assign([Name('regex', Store(), lineno=237, col_offset=8)], BinOp(Str('(?P<%s>%s', lineno=237, col_offset=16), Mod(), Tuple([Name('directive', Load(), lineno=237, col_offset=31), Name('regex', Load(), lineno=237, col_offset=42)], Load(), lineno=237, col_offset=31), lineno=237, col_offset=16), lineno=237, col_offset=8), Return(BinOp(Str('%s)', lineno=238, col_offset=15), Mod(), Name('regex', Load(), lineno=238, col_offset=23), lineno=238, col_offset=15), lineno=238, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('pattern', arguments([Name('self', Param(), lineno=240, col_offset=16), Name('format', Param(), lineno=240, col_offset=22)], None, None, []), [Expr(Str('Return regex pattern for the format string.\n\n        Need to make sure that any characters that might be interpreted as\n        regex syntax are escaped.\n\n        ', lineno=246, col_offset=-1), lineno=246, col_offset=-1), Assign([Name('processed_format', Store(), lineno=247, col_offset=8)], Str('', lineno=247, col_offset=27), lineno=247, col_offset=8), Assign([Name('regex_chars', Store(), lineno=251, col_offset=8)], Call(Name('re_compile', Load(), lineno=251, col_offset=22), [Str('([\\\\.^$*+?\\(\\){}\\[\\]|])', lineno=251, col_offset=33)], [], None, None, lineno=251, col_offset=22), lineno=251, col_offset=8), Assign([Name('format', Store(), lineno=252, col_offset=8)], Call(Attribute(Name('regex_chars', Load(), lineno=252, col_offset=17), 'sub', Load(), lineno=252, col_offset=17), [Str('\\\\\\1', lineno=252, col_offset=33), Name('format', Load(), lineno=252, col_offset=42)], [], None, None, lineno=252, col_offset=17), lineno=252, col_offset=8), Assign([Name('whitespace_replacement', Store(), lineno=253, col_offset=8)], Call(Name('re_compile', Load(), lineno=253, col_offset=33), [Str('\\s+', lineno=253, col_offset=44)], [], None, None, lineno=253, col_offset=33), lineno=253, col_offset=8), Assign([Name('format', Store(), lineno=254, col_offset=8)], Call(Attribute(Name('whitespace_replacement', Load(), lineno=254, col_offset=17), 'sub', Load(), lineno=254, col_offset=17), [Str('\\s+', lineno=254, col_offset=44), Name('format', Load(), lineno=254, col_offset=51)], [], None, None, lineno=254, col_offset=17), lineno=254, col_offset=8), While(Compare(Str('%', lineno=255, col_offset=14), [In()], [Name('format', Load(), lineno=255, col_offset=21)], lineno=255, col_offset=14), [Assign([Name('directive_index', Store(), lineno=256, col_offset=12)], BinOp(Call(Attribute(Name('format', Load(), lineno=256, col_offset=30), 'index', Load(), lineno=256, col_offset=30), [Str('%', lineno=256, col_offset=43)], [], None, None, lineno=256, col_offset=30), Add(), Num(1, lineno=256, col_offset=48), lineno=256, col_offset=30), lineno=256, col_offset=12), Assign([Name('processed_format', Store(), lineno=257, col_offset=12)], BinOp(Str('%s%s%s', lineno=257, col_offset=31), Mod(), Tuple([Name('processed_format', Load(), lineno=257, col_offset=43), Subscript(Name('format', Load(), lineno=258, col_offset=43), Slice(None, BinOp(Name('directive_index', Load(), lineno=258, col_offset=51), Sub(), Num(1, lineno=258, col_offset=67), lineno=258, col_offset=51), None), Load(), lineno=258, col_offset=43), Subscript(Name('self', Load(), lineno=259, col_offset=43), Index(Subscript(Name('format', Load(), lineno=259, col_offset=48), Index(Name('directive_index', Load(), lineno=259, col_offset=55)), Load(), lineno=259, col_offset=48)), Load(), lineno=259, col_offset=43)], Load(), lineno=257, col_offset=43), lineno=257, col_offset=31), lineno=257, col_offset=12), Assign([Name('format', Store(), lineno=260, col_offset=12)], Subscript(Name('format', Load(), lineno=260, col_offset=21), Slice(BinOp(Name('directive_index', Load(), lineno=260, col_offset=28), Add(), Num(1, lineno=260, col_offset=44), lineno=260, col_offset=28), None, None), Load(), lineno=260, col_offset=21), lineno=260, col_offset=12)], [], lineno=255, col_offset=8), Return(BinOp(Str('%s%s', lineno=261, col_offset=15), Mod(), Tuple([Name('processed_format', Load(), lineno=261, col_offset=25), Name('format', Load(), lineno=261, col_offset=43)], Load(), lineno=261, col_offset=25), lineno=261, col_offset=15), lineno=261, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('compile', arguments([Name('self', Param(), lineno=263, col_offset=16), Name('format', Param(), lineno=263, col_offset=22)], None, None, []), [Expr(Str('Return a compiled re object for the format string.', lineno=264, col_offset=8), lineno=264, col_offset=8), Return(Call(Name('re_compile', Load(), lineno=265, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=265, col_offset=26), 'pattern', Load(), lineno=265, col_offset=26), [Name('format', Load(), lineno=265, col_offset=39)], [], None, None, lineno=265, col_offset=26), Name('IGNORECASE', Load(), lineno=265, col_offset=48)], [], None, None, lineno=265, col_offset=15), lineno=265, col_offset=8)], [], lineno=263, col_offset=4)], [], lineno=176, col_offset=0), Assign([Name('_cache_lock', Store(), lineno=267, col_offset=0)], Call(Name('_thread_allocate_lock', Load(), lineno=267, col_offset=14), [], [], None, None, lineno=267, col_offset=14), lineno=267, col_offset=0), Assign([Name('_TimeRE_cache', Store(), lineno=270, col_offset=0)], Call(Name('TimeRE', Load(), lineno=270, col_offset=16), [], [], None, None, lineno=270, col_offset=16), lineno=270, col_offset=0), Assign([Name('_CACHE_MAX_SIZE', Store(), lineno=271, col_offset=0)], Num(5, lineno=271, col_offset=18), lineno=271, col_offset=0), Assign([Name('_regex_cache', Store(), lineno=272, col_offset=0)], Dict([], [], lineno=272, col_offset=15), lineno=272, col_offset=0), FunctionDef('_calc_julian_from_U_or_W', arguments([Name('year', Param(), lineno=274, col_offset=29), Name('week_of_year', Param(), lineno=274, col_offset=35), Name('day_of_week', Param(), lineno=274, col_offset=49), Name('week_starts_Mon', Param(), lineno=274, col_offset=62)], None, None, []), [Expr(Str('Calculate the Julian day based on the year, week of the year, and day of\n    the week, with week_start_day representing whether the week of the year\n    assumes the week starts on Sunday or Monday (6 or 0).', lineno=277, col_offset=-1), lineno=277, col_offset=-1), Assign([Name('first_weekday', Store(), lineno=278, col_offset=4)], Call(Attribute(Call(Name('datetime_date', Load(), lineno=278, col_offset=20), [Name('year', Load(), lineno=278, col_offset=34), Num(1, lineno=278, col_offset=40), Num(1, lineno=278, col_offset=43)], [], None, None, lineno=278, col_offset=20), 'weekday', Load(), lineno=278, col_offset=20), [], [], None, None, lineno=278, col_offset=20), lineno=278, col_offset=4), If(UnaryOp(Not(), Name('week_starts_Mon', Load(), lineno=282, col_offset=11), lineno=282, col_offset=7), [Assign([Name('first_weekday', Store(), lineno=283, col_offset=8)], BinOp(BinOp(Name('first_weekday', Load(), lineno=283, col_offset=25), Add(), Num(1, lineno=283, col_offset=41), lineno=283, col_offset=25), Mod(), Num(7, lineno=283, col_offset=46), lineno=283, col_offset=24), lineno=283, col_offset=8), Assign([Name('day_of_week', Store(), lineno=284, col_offset=8)], BinOp(BinOp(Name('day_of_week', Load(), lineno=284, col_offset=23), Add(), Num(1, lineno=284, col_offset=37), lineno=284, col_offset=23), Mod(), Num(7, lineno=284, col_offset=42), lineno=284, col_offset=22), lineno=284, col_offset=8)], [], lineno=282, col_offset=4), Assign([Name('week_0_length', Store(), lineno=287, col_offset=4)], BinOp(BinOp(Num(7, lineno=287, col_offset=21), Sub(), Name('first_weekday', Load(), lineno=287, col_offset=25), lineno=287, col_offset=21), Mod(), Num(7, lineno=287, col_offset=42), lineno=287, col_offset=20), lineno=287, col_offset=4), If(Compare(Name('week_of_year', Load(), lineno=288, col_offset=7), [Eq()], [Num(0, lineno=288, col_offset=23)], lineno=288, col_offset=7), [Return(BinOp(BinOp(Num(1, lineno=289, col_offset=15), Add(), Name('day_of_week', Load(), lineno=289, col_offset=19), lineno=289, col_offset=15), Sub(), Name('first_weekday', Load(), lineno=289, col_offset=33), lineno=289, col_offset=31), lineno=289, col_offset=8)], [Assign([Name('days_to_week', Store(), lineno=291, col_offset=8)], BinOp(Name('week_0_length', Load(), lineno=291, col_offset=23), Add(), BinOp(Num(7, lineno=291, col_offset=40), Mult(), BinOp(Name('week_of_year', Load(), lineno=291, col_offset=45), Sub(), Num(1, lineno=291, col_offset=60), lineno=291, col_offset=45), lineno=291, col_offset=40), lineno=291, col_offset=23), lineno=291, col_offset=8), Return(BinOp(BinOp(Num(1, lineno=292, col_offset=15), Add(), Name('days_to_week', Load(), lineno=292, col_offset=19), lineno=292, col_offset=15), Add(), Name('day_of_week', Load(), lineno=292, col_offset=34), lineno=292, col_offset=32), lineno=292, col_offset=8)], lineno=288, col_offset=4)], [], lineno=274, col_offset=0), FunctionDef('_strptime', arguments([Name('data_string', Param(), lineno=295, col_offset=14), Name('format', Param(), lineno=295, col_offset=27)], None, None, [Str('%a %b %d %H:%M:%S %Y', lineno=295, col_offset=34)]), [Expr(Str('Return a time struct based on the input string and the format string.', lineno=296, col_offset=4), lineno=296, col_offset=4), Global(['_TimeRE_cache', '_regex_cache'], lineno=297, col_offset=4), With(Name('_cache_lock', Load(), lineno=298, col_offset=9), None, [If(Compare(Call(Name('_getlang', Load(), lineno=299, col_offset=11), [], [], None, None, lineno=299, col_offset=11), [NotEq()], [Attribute(Attribute(Name('_TimeRE_cache', Load(), lineno=299, col_offset=25), 'locale_time', Load(), lineno=299, col_offset=25), 'lang', Load(), lineno=299, col_offset=25)], lineno=299, col_offset=11), [Assign([Name('_TimeRE_cache', Store(), lineno=300, col_offset=12)], Call(Name('TimeRE', Load(), lineno=300, col_offset=28), [], [], None, None, lineno=300, col_offset=28), lineno=300, col_offset=12), Expr(Call(Attribute(Name('_regex_cache', Load(), lineno=301, col_offset=12), 'clear', Load(), lineno=301, col_offset=12), [], [], None, None, lineno=301, col_offset=12), lineno=301, col_offset=12)], [], lineno=299, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=302, col_offset=11), [Name('_regex_cache', Load(), lineno=302, col_offset=15)], [], None, None, lineno=302, col_offset=11), [Gt()], [Name('_CACHE_MAX_SIZE', Load(), lineno=302, col_offset=31)], lineno=302, col_offset=11), [Expr(Call(Attribute(Name('_regex_cache', Load(), lineno=303, col_offset=12), 'clear', Load(), lineno=303, col_offset=12), [], [], None, None, lineno=303, col_offset=12), lineno=303, col_offset=12)], [], lineno=302, col_offset=8), Assign([Name('locale_time', Store(), lineno=304, col_offset=8)], Attribute(Name('_TimeRE_cache', Load(), lineno=304, col_offset=22), 'locale_time', Load(), lineno=304, col_offset=22), lineno=304, col_offset=8), Assign([Name('format_regex', Store(), lineno=305, col_offset=8)], Call(Attribute(Name('_regex_cache', Load(), lineno=305, col_offset=23), 'get', Load(), lineno=305, col_offset=23), [Name('format', Load(), lineno=305, col_offset=40)], [], None, None, lineno=305, col_offset=23), lineno=305, col_offset=8), If(UnaryOp(Not(), Name('format_regex', Load(), lineno=306, col_offset=15), lineno=306, col_offset=11), [TryExcept([Assign([Name('format_regex', Store(), lineno=308, col_offset=16)], Call(Attribute(Name('_TimeRE_cache', Load(), lineno=308, col_offset=31), 'compile', Load(), lineno=308, col_offset=31), [Name('format', Load(), lineno=308, col_offset=53)], [], None, None, lineno=308, col_offset=31), lineno=308, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=311, col_offset=19), Name('err', Store(), lineno=311, col_offset=29), [Assign([Name('bad_directive', Store(), lineno=312, col_offset=16)], Subscript(Attribute(Name('err', Load(), lineno=312, col_offset=32), 'args', Load(), lineno=312, col_offset=32), Index(Num(0, lineno=312, col_offset=41)), Load(), lineno=312, col_offset=32), lineno=312, col_offset=16), If(Compare(Name('bad_directive', Load(), lineno=313, col_offset=19), [Eq()], [Str('\\', lineno=313, col_offset=36)], lineno=313, col_offset=19), [Assign([Name('bad_directive', Store(), lineno=314, col_offset=20)], Str('%', lineno=314, col_offset=36), lineno=314, col_offset=20)], [], lineno=313, col_offset=16), Delete([Name('err', Del(), lineno=315, col_offset=20)], lineno=315, col_offset=16), Raise(Call(Name('ValueError', Load(), lineno=316, col_offset=22), [BinOp(Str("'%s' is a bad directive in format '%s'", lineno=316, col_offset=33), Mod(), Tuple([Name('bad_directive', Load(), lineno=317, col_offset=37), Name('format', Load(), lineno=317, col_offset=52)], Load(), lineno=317, col_offset=37), lineno=316, col_offset=33)], [], None, None, lineno=316, col_offset=22), None, None, lineno=316, col_offset=16)], lineno=311, col_offset=12), ExceptHandler(Name('IndexError', Load(), lineno=319, col_offset=19), None, [Raise(Call(Name('ValueError', Load(), lineno=320, col_offset=22), [BinOp(Str("stray %% in format '%s'", lineno=320, col_offset=33), Mod(), Name('format', Load(), lineno=320, col_offset=61), lineno=320, col_offset=33)], [], None, None, lineno=320, col_offset=22), None, None, lineno=320, col_offset=16)], lineno=319, col_offset=12)], [], lineno=307, col_offset=12), Assign([Subscript(Name('_regex_cache', Load(), lineno=321, col_offset=12), Index(Name('format', Load(), lineno=321, col_offset=25)), Store(), lineno=321, col_offset=12)], Name('format_regex', Load(), lineno=321, col_offset=35), lineno=321, col_offset=12)], [], lineno=306, col_offset=8)], lineno=298, col_offset=9), Assign([Name('found', Store(), lineno=322, col_offset=4)], Call(Attribute(Name('format_regex', Load(), lineno=322, col_offset=12), 'match', Load(), lineno=322, col_offset=12), [Name('data_string', Load(), lineno=322, col_offset=31)], [], None, None, lineno=322, col_offset=12), lineno=322, col_offset=4), If(UnaryOp(Not(), Name('found', Load(), lineno=323, col_offset=11), lineno=323, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=324, col_offset=14), [BinOp(Str('time data %r does not match format %r', lineno=324, col_offset=25), Mod(), Tuple([Name('data_string', Load(), lineno=325, col_offset=26), Name('format', Load(), lineno=325, col_offset=39)], Load(), lineno=325, col_offset=26), lineno=324, col_offset=25)], [], None, None, lineno=324, col_offset=14), None, None, lineno=324, col_offset=8)], [], lineno=323, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=326, col_offset=7), [Name('data_string', Load(), lineno=326, col_offset=11)], [], None, None, lineno=326, col_offset=7), [NotEq()], [Call(Attribute(Name('found', Load(), lineno=326, col_offset=27), 'end', Load(), lineno=326, col_offset=27), [], [], None, None, lineno=326, col_offset=27)], lineno=326, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=327, col_offset=14), [BinOp(Str('unconverted data remains: %s', lineno=327, col_offset=25), Mod(), Subscript(Name('data_string', Load(), lineno=328, col_offset=26), Slice(Call(Attribute(Name('found', Load(), lineno=328, col_offset=38), 'end', Load(), lineno=328, col_offset=38), [], [], None, None, lineno=328, col_offset=38), None, None), Load(), lineno=328, col_offset=26), lineno=327, col_offset=25)], [], None, None, lineno=327, col_offset=14), None, None, lineno=327, col_offset=8)], [], lineno=326, col_offset=4), Assign([Name('year', Store(), lineno=329, col_offset=4)], Num(1900, lineno=329, col_offset=11), lineno=329, col_offset=4), Assign([Name('month', Store(), lineno=330, col_offset=4), Name('day', Store(), lineno=330, col_offset=12)], Num(1, lineno=330, col_offset=18), lineno=330, col_offset=4), Assign([Name('hour', Store(), lineno=331, col_offset=4), Name('minute', Store(), lineno=331, col_offset=11), Name('second', Store(), lineno=331, col_offset=20), Name('fraction', Store(), lineno=331, col_offset=29)], Num(0, lineno=331, col_offset=40), lineno=331, col_offset=4), Assign([Name('tz', Store(), lineno=332, col_offset=4)], Num(-1, lineno=332, col_offset=10), lineno=332, col_offset=4), Assign([Name('week_of_year', Store(), lineno=335, col_offset=4)], Num(-1, lineno=335, col_offset=20), lineno=335, col_offset=4), Assign([Name('week_of_year_start', Store(), lineno=336, col_offset=4)], Num(-1, lineno=336, col_offset=26), lineno=336, col_offset=4), Assign([Name('weekday', Store(), lineno=339, col_offset=4), Name('julian', Store(), lineno=339, col_offset=14)], Num(-1, lineno=339, col_offset=24), lineno=339, col_offset=4), Assign([Name('found_dict', Store(), lineno=340, col_offset=4)], Call(Attribute(Name('found', Load(), lineno=340, col_offset=17), 'groupdict', Load(), lineno=340, col_offset=17), [], [], None, None, lineno=340, col_offset=17), lineno=340, col_offset=4), For(Name('group_key', Store(), lineno=341, col_offset=8), Call(Attribute(Name('found_dict', Load(), lineno=341, col_offset=21), 'iterkeys', Load(), lineno=341, col_offset=21), [], [], None, None, lineno=341, col_offset=21), [If(Compare(Name('group_key', Load(), lineno=347, col_offset=11), [Eq()], [Str('y', lineno=347, col_offset=24)], lineno=347, col_offset=11), [Assign([Name('year', Store(), lineno=348, col_offset=12)], Call(Name('int', Load(), lineno=348, col_offset=19), [Subscript(Name('found_dict', Load(), lineno=348, col_offset=23), Index(Str('y', lineno=348, col_offset=34)), Load(), lineno=348, col_offset=23)], [], None, None, lineno=348, col_offset=19), lineno=348, col_offset=12), If(Compare(Name('year', Load(), lineno=352, col_offset=15), [LtE()], [Num(68, lineno=352, col_offset=23)], lineno=352, col_offset=15), [AugAssign(Name('year', Store(), lineno=353, col_offset=16), Add(), Num(2000, lineno=353, col_offset=24), lineno=353, col_offset=16)], [AugAssign(Name('year', Store(), lineno=355, col_offset=16), Add(), Num(1900, lineno=355, col_offset=24), lineno=355, col_offset=16)], lineno=352, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=356, col_offset=13), [Eq()], [Str('Y', lineno=356, col_offset=26)], lineno=356, col_offset=13), [Assign([Name('year', Store(), lineno=357, col_offset=12)], Call(Name('int', Load(), lineno=357, col_offset=19), [Subscript(Name('found_dict', Load(), lineno=357, col_offset=23), Index(Str('Y', lineno=357, col_offset=34)), Load(), lineno=357, col_offset=23)], [], None, None, lineno=357, col_offset=19), lineno=357, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=358, col_offset=13), [Eq()], [Str('m', lineno=358, col_offset=26)], lineno=358, col_offset=13), [Assign([Name('month', Store(), lineno=359, col_offset=12)], Call(Name('int', Load(), lineno=359, col_offset=20), [Subscript(Name('found_dict', Load(), lineno=359, col_offset=24), Index(Str('m', lineno=359, col_offset=35)), Load(), lineno=359, col_offset=24)], [], None, None, lineno=359, col_offset=20), lineno=359, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=360, col_offset=13), [Eq()], [Str('B', lineno=360, col_offset=26)], lineno=360, col_offset=13), [Assign([Name('month', Store(), lineno=361, col_offset=12)], Call(Attribute(Attribute(Name('locale_time', Load(), lineno=361, col_offset=20), 'f_month', Load(), lineno=361, col_offset=20), 'index', Load(), lineno=361, col_offset=20), [Call(Attribute(Subscript(Name('found_dict', Load(), lineno=361, col_offset=46), Index(Str('B', lineno=361, col_offset=57)), Load(), lineno=361, col_offset=46), 'lower', Load(), lineno=361, col_offset=46), [], [], None, None, lineno=361, col_offset=46)], [], None, None, lineno=361, col_offset=20), lineno=361, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=362, col_offset=13), [Eq()], [Str('b', lineno=362, col_offset=26)], lineno=362, col_offset=13), [Assign([Name('month', Store(), lineno=363, col_offset=12)], Call(Attribute(Attribute(Name('locale_time', Load(), lineno=363, col_offset=20), 'a_month', Load(), lineno=363, col_offset=20), 'index', Load(), lineno=363, col_offset=20), [Call(Attribute(Subscript(Name('found_dict', Load(), lineno=363, col_offset=46), Index(Str('b', lineno=363, col_offset=57)), Load(), lineno=363, col_offset=46), 'lower', Load(), lineno=363, col_offset=46), [], [], None, None, lineno=363, col_offset=46)], [], None, None, lineno=363, col_offset=20), lineno=363, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=364, col_offset=13), [Eq()], [Str('d', lineno=364, col_offset=26)], lineno=364, col_offset=13), [Assign([Name('day', Store(), lineno=365, col_offset=12)], Call(Name('int', Load(), lineno=365, col_offset=18), [Subscript(Name('found_dict', Load(), lineno=365, col_offset=22), Index(Str('d', lineno=365, col_offset=33)), Load(), lineno=365, col_offset=22)], [], None, None, lineno=365, col_offset=18), lineno=365, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=366, col_offset=13), [Eq()], [Str('H', lineno=366, col_offset=26)], lineno=366, col_offset=13), [Assign([Name('hour', Store(), lineno=367, col_offset=12)], Call(Name('int', Load(), lineno=367, col_offset=19), [Subscript(Name('found_dict', Load(), lineno=367, col_offset=23), Index(Str('H', lineno=367, col_offset=34)), Load(), lineno=367, col_offset=23)], [], None, None, lineno=367, col_offset=19), lineno=367, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=368, col_offset=13), [Eq()], [Str('I', lineno=368, col_offset=26)], lineno=368, col_offset=13), [Assign([Name('hour', Store(), lineno=369, col_offset=12)], Call(Name('int', Load(), lineno=369, col_offset=19), [Subscript(Name('found_dict', Load(), lineno=369, col_offset=23), Index(Str('I', lineno=369, col_offset=34)), Load(), lineno=369, col_offset=23)], [], None, None, lineno=369, col_offset=19), lineno=369, col_offset=12), Assign([Name('ampm', Store(), lineno=370, col_offset=12)], Call(Attribute(Call(Attribute(Name('found_dict', Load(), lineno=370, col_offset=19), 'get', Load(), lineno=370, col_offset=19), [Str('p', lineno=370, col_offset=34), Str('', lineno=370, col_offset=39)], [], None, None, lineno=370, col_offset=19), 'lower', Load(), lineno=370, col_offset=19), [], [], None, None, lineno=370, col_offset=19), lineno=370, col_offset=12), If(Compare(Name('ampm', Load(), lineno=372, col_offset=15), [In()], [Tuple([Str('', lineno=372, col_offset=24), Subscript(Attribute(Name('locale_time', Load(), lineno=372, col_offset=28), 'am_pm', Load(), lineno=372, col_offset=28), Index(Num(0, lineno=372, col_offset=46)), Load(), lineno=372, col_offset=28)], Load(), lineno=372, col_offset=24)], lineno=372, col_offset=15), [If(Compare(Name('hour', Load(), lineno=376, col_offset=19), [Eq()], [Num(12, lineno=376, col_offset=27)], lineno=376, col_offset=19), [Assign([Name('hour', Store(), lineno=377, col_offset=20)], Num(0, lineno=377, col_offset=27), lineno=377, col_offset=20)], [], lineno=376, col_offset=16)], [If(Compare(Name('ampm', Load(), lineno=378, col_offset=17), [Eq()], [Subscript(Attribute(Name('locale_time', Load(), lineno=378, col_offset=25), 'am_pm', Load(), lineno=378, col_offset=25), Index(Num(1, lineno=378, col_offset=43)), Load(), lineno=378, col_offset=25)], lineno=378, col_offset=17), [If(Compare(Name('hour', Load(), lineno=382, col_offset=19), [NotEq()], [Num(12, lineno=382, col_offset=27)], lineno=382, col_offset=19), [AugAssign(Name('hour', Store(), lineno=383, col_offset=20), Add(), Num(12, lineno=383, col_offset=28), lineno=383, col_offset=20)], [], lineno=382, col_offset=16)], [], lineno=378, col_offset=17)], lineno=372, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=384, col_offset=13), [Eq()], [Str('M', lineno=384, col_offset=26)], lineno=384, col_offset=13), [Assign([Name('minute', Store(), lineno=385, col_offset=12)], Call(Name('int', Load(), lineno=385, col_offset=21), [Subscript(Name('found_dict', Load(), lineno=385, col_offset=25), Index(Str('M', lineno=385, col_offset=36)), Load(), lineno=385, col_offset=25)], [], None, None, lineno=385, col_offset=21), lineno=385, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=386, col_offset=13), [Eq()], [Str('S', lineno=386, col_offset=26)], lineno=386, col_offset=13), [Assign([Name('second', Store(), lineno=387, col_offset=12)], Call(Name('int', Load(), lineno=387, col_offset=21), [Subscript(Name('found_dict', Load(), lineno=387, col_offset=25), Index(Str('S', lineno=387, col_offset=36)), Load(), lineno=387, col_offset=25)], [], None, None, lineno=387, col_offset=21), lineno=387, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=388, col_offset=13), [Eq()], [Str('f', lineno=388, col_offset=26)], lineno=388, col_offset=13), [Assign([Name('s', Store(), lineno=389, col_offset=12)], Subscript(Name('found_dict', Load(), lineno=389, col_offset=16), Index(Str('f', lineno=389, col_offset=27)), Load(), lineno=389, col_offset=16), lineno=389, col_offset=12), AugAssign(Name('s', Store(), lineno=391, col_offset=12), Add(), BinOp(Str('0', lineno=391, col_offset=17), Mult(), BinOp(Num(6, lineno=391, col_offset=24), Sub(), Call(Name('len', Load(), lineno=391, col_offset=28), [Name('s', Load(), lineno=391, col_offset=32)], [], None, None, lineno=391, col_offset=28), lineno=391, col_offset=24), lineno=391, col_offset=17), lineno=391, col_offset=12), Assign([Name('fraction', Store(), lineno=392, col_offset=12)], Call(Name('int', Load(), lineno=392, col_offset=23), [Name('s', Load(), lineno=392, col_offset=27)], [], None, None, lineno=392, col_offset=23), lineno=392, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=393, col_offset=13), [Eq()], [Str('A', lineno=393, col_offset=26)], lineno=393, col_offset=13), [Assign([Name('weekday', Store(), lineno=394, col_offset=12)], Call(Attribute(Attribute(Name('locale_time', Load(), lineno=394, col_offset=22), 'f_weekday', Load(), lineno=394, col_offset=22), 'index', Load(), lineno=394, col_offset=22), [Call(Attribute(Subscript(Name('found_dict', Load(), lineno=394, col_offset=50), Index(Str('A', lineno=394, col_offset=61)), Load(), lineno=394, col_offset=50), 'lower', Load(), lineno=394, col_offset=50), [], [], None, None, lineno=394, col_offset=50)], [], None, None, lineno=394, col_offset=22), lineno=394, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=395, col_offset=13), [Eq()], [Str('a', lineno=395, col_offset=26)], lineno=395, col_offset=13), [Assign([Name('weekday', Store(), lineno=396, col_offset=12)], Call(Attribute(Attribute(Name('locale_time', Load(), lineno=396, col_offset=22), 'a_weekday', Load(), lineno=396, col_offset=22), 'index', Load(), lineno=396, col_offset=22), [Call(Attribute(Subscript(Name('found_dict', Load(), lineno=396, col_offset=50), Index(Str('a', lineno=396, col_offset=61)), Load(), lineno=396, col_offset=50), 'lower', Load(), lineno=396, col_offset=50), [], [], None, None, lineno=396, col_offset=50)], [], None, None, lineno=396, col_offset=22), lineno=396, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=397, col_offset=13), [Eq()], [Str('w', lineno=397, col_offset=26)], lineno=397, col_offset=13), [Assign([Name('weekday', Store(), lineno=398, col_offset=12)], Call(Name('int', Load(), lineno=398, col_offset=22), [Subscript(Name('found_dict', Load(), lineno=398, col_offset=26), Index(Str('w', lineno=398, col_offset=37)), Load(), lineno=398, col_offset=26)], [], None, None, lineno=398, col_offset=22), lineno=398, col_offset=12), If(Compare(Name('weekday', Load(), lineno=399, col_offset=15), [Eq()], [Num(0, lineno=399, col_offset=26)], lineno=399, col_offset=15), [Assign([Name('weekday', Store(), lineno=400, col_offset=16)], Num(6, lineno=400, col_offset=26), lineno=400, col_offset=16)], [AugAssign(Name('weekday', Store(), lineno=402, col_offset=16), Sub(), Num(1, lineno=402, col_offset=27), lineno=402, col_offset=16)], lineno=399, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=403, col_offset=13), [Eq()], [Str('j', lineno=403, col_offset=26)], lineno=403, col_offset=13), [Assign([Name('julian', Store(), lineno=404, col_offset=12)], Call(Name('int', Load(), lineno=404, col_offset=21), [Subscript(Name('found_dict', Load(), lineno=404, col_offset=25), Index(Str('j', lineno=404, col_offset=36)), Load(), lineno=404, col_offset=25)], [], None, None, lineno=404, col_offset=21), lineno=404, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=405, col_offset=13), [In()], [Tuple([Str('U', lineno=405, col_offset=27), Str('W', lineno=405, col_offset=32)], Load(), lineno=405, col_offset=27)], lineno=405, col_offset=13), [Assign([Name('week_of_year', Store(), lineno=406, col_offset=12)], Call(Name('int', Load(), lineno=406, col_offset=27), [Subscript(Name('found_dict', Load(), lineno=406, col_offset=31), Index(Name('group_key', Load(), lineno=406, col_offset=42)), Load(), lineno=406, col_offset=31)], [], None, None, lineno=406, col_offset=27), lineno=406, col_offset=12), If(Compare(Name('group_key', Load(), lineno=407, col_offset=15), [Eq()], [Str('U', lineno=407, col_offset=28)], lineno=407, col_offset=15), [Assign([Name('week_of_year_start', Store(), lineno=409, col_offset=16)], Num(6, lineno=409, col_offset=37), lineno=409, col_offset=16)], [Assign([Name('week_of_year_start', Store(), lineno=412, col_offset=16)], Num(0, lineno=412, col_offset=37), lineno=412, col_offset=16)], lineno=407, col_offset=12)], [If(Compare(Name('group_key', Load(), lineno=413, col_offset=13), [Eq()], [Str('Z', lineno=413, col_offset=26)], lineno=413, col_offset=13), [Assign([Name('found_zone', Store(), lineno=416, col_offset=12)], Call(Attribute(Subscript(Name('found_dict', Load(), lineno=416, col_offset=25), Index(Str('Z', lineno=416, col_offset=36)), Load(), lineno=416, col_offset=25), 'lower', Load(), lineno=416, col_offset=25), [], [], None, None, lineno=416, col_offset=25), lineno=416, col_offset=12), For(Tuple([Name('value', Store(), lineno=417, col_offset=16), Name('tz_values', Store(), lineno=417, col_offset=23)], Store(), lineno=417, col_offset=16), Call(Name('enumerate', Load(), lineno=417, col_offset=36), [Attribute(Name('locale_time', Load(), lineno=417, col_offset=46), 'timezone', Load(), lineno=417, col_offset=46)], [], None, None, lineno=417, col_offset=36), [If(Compare(Name('found_zone', Load(), lineno=418, col_offset=19), [In()], [Name('tz_values', Load(), lineno=418, col_offset=33)], lineno=418, col_offset=19), [If(BoolOp(And(), [Compare(Subscript(Attribute(Name('time', Load(), lineno=422, col_offset=24), 'tzname', Load(), lineno=422, col_offset=24), Index(Num(0, lineno=422, col_offset=36)), Load(), lineno=422, col_offset=24), [Eq()], [Subscript(Attribute(Name('time', Load(), lineno=422, col_offset=42), 'tzname', Load(), lineno=422, col_offset=42), Index(Num(1, lineno=422, col_offset=54)), Load(), lineno=422, col_offset=42)], lineno=422, col_offset=24), Attribute(Name('time', Load(), lineno=423, col_offset=23), 'daylight', Load(), lineno=423, col_offset=23), Compare(Name('found_zone', Load(), lineno=423, col_offset=41), [NotIn()], [Tuple([Str('utc', lineno=423, col_offset=60), Str('gmt', lineno=423, col_offset=67)], Load(), lineno=423, col_offset=60)], lineno=423, col_offset=41)], lineno=422, col_offset=24), [Break( lineno=424, col_offset=24)], [Assign([Name('tz', Store(), lineno=426, col_offset=24)], Name('value', Load(), lineno=426, col_offset=29), lineno=426, col_offset=24), Break( lineno=427, col_offset=24)], lineno=422, col_offset=20)], [], lineno=418, col_offset=16)], [], lineno=417, col_offset=12)], [], lineno=413, col_offset=13)], lineno=405, col_offset=13)], lineno=403, col_offset=13)], lineno=397, col_offset=13)], lineno=395, col_offset=13)], lineno=393, col_offset=13)], lineno=388, col_offset=13)], lineno=386, col_offset=13)], lineno=384, col_offset=13)], lineno=368, col_offset=13)], lineno=366, col_offset=13)], lineno=364, col_offset=13)], lineno=362, col_offset=13)], lineno=360, col_offset=13)], lineno=358, col_offset=13)], lineno=356, col_offset=13)], lineno=347, col_offset=8)], [], lineno=341, col_offset=4), If(BoolOp(And(), [Compare(Name('julian', Load(), lineno=430, col_offset=7), [Eq()], [Num(-1, lineno=430, col_offset=18)], lineno=430, col_offset=7), Compare(Name('week_of_year', Load(), lineno=430, col_offset=24), [NotEq()], [Num(-1, lineno=430, col_offset=41)], lineno=430, col_offset=24), Compare(Name('weekday', Load(), lineno=430, col_offset=47), [NotEq()], [Num(-1, lineno=430, col_offset=59)], lineno=430, col_offset=47)], lineno=430, col_offset=7), [Assign([Name('week_starts_Mon', Store(), lineno=431, col_offset=8)], IfExp(Compare(Name('week_of_year_start', Load(), lineno=431, col_offset=34), [Eq()], [Num(0, lineno=431, col_offset=56)], lineno=431, col_offset=34), Name('True', Load(), lineno=431, col_offset=26), Name('False', Load(), lineno=431, col_offset=63), lineno=431, col_offset=26), lineno=431, col_offset=8), Assign([Name('julian', Store(), lineno=432, col_offset=8)], Call(Name('_calc_julian_from_U_or_W', Load(), lineno=432, col_offset=17), [Name('year', Load(), lineno=432, col_offset=42), Name('week_of_year', Load(), lineno=432, col_offset=48), Name('weekday', Load(), lineno=432, col_offset=62), Name('week_starts_Mon', Load(), lineno=433, col_offset=44)], [], None, None, lineno=432, col_offset=17), lineno=432, col_offset=8)], [], lineno=430, col_offset=4), If(Compare(Name('julian', Load(), lineno=437, col_offset=7), [Eq()], [Num(-1, lineno=437, col_offset=18)], lineno=437, col_offset=7), [Assign([Name('julian', Store(), lineno=439, col_offset=8)], BinOp(BinOp(Call(Attribute(Call(Name('datetime_date', Load(), lineno=439, col_offset=17), [Name('year', Load(), lineno=439, col_offset=31), Name('month', Load(), lineno=439, col_offset=37), Name('day', Load(), lineno=439, col_offset=44)], [], None, None, lineno=439, col_offset=17), 'toordinal', Load(), lineno=439, col_offset=17), [], [], None, None, lineno=439, col_offset=17), Sub(), Call(Attribute(Call(Name('datetime_date', Load(), lineno=440, col_offset=18), [Name('year', Load(), lineno=440, col_offset=32), Num(1, lineno=440, col_offset=38), Num(1, lineno=440, col_offset=41)], [], None, None, lineno=440, col_offset=18), 'toordinal', Load(), lineno=440, col_offset=18), [], [], None, None, lineno=440, col_offset=18), lineno=439, col_offset=17), Add(), Num(1, lineno=440, col_offset=58), lineno=440, col_offset=56), lineno=439, col_offset=8)], [Assign([Name('datetime_result', Store(), lineno=443, col_offset=8)], Call(Attribute(Name('datetime_date', Load(), lineno=443, col_offset=26), 'fromordinal', Load(), lineno=443, col_offset=26), [BinOp(BinOp(Name('julian', Load(), lineno=443, col_offset=53), Sub(), Num(1, lineno=443, col_offset=62), lineno=443, col_offset=53), Add(), Call(Attribute(Call(Name('datetime_date', Load(), lineno=443, col_offset=67), [Name('year', Load(), lineno=443, col_offset=81), Num(1, lineno=443, col_offset=87), Num(1, lineno=443, col_offset=90)], [], None, None, lineno=443, col_offset=67), 'toordinal', Load(), lineno=443, col_offset=67), [], [], None, None, lineno=443, col_offset=67), lineno=443, col_offset=52)], [], None, None, lineno=443, col_offset=26), lineno=443, col_offset=8), Assign([Name('year', Store(), lineno=444, col_offset=8)], Attribute(Name('datetime_result', Load(), lineno=444, col_offset=15), 'year', Load(), lineno=444, col_offset=15), lineno=444, col_offset=8), Assign([Name('month', Store(), lineno=445, col_offset=8)], Attribute(Name('datetime_result', Load(), lineno=445, col_offset=16), 'month', Load(), lineno=445, col_offset=16), lineno=445, col_offset=8), Assign([Name('day', Store(), lineno=446, col_offset=8)], Attribute(Name('datetime_result', Load(), lineno=446, col_offset=14), 'day', Load(), lineno=446, col_offset=14), lineno=446, col_offset=8)], lineno=437, col_offset=4), If(Compare(Name('weekday', Load(), lineno=447, col_offset=7), [Eq()], [Num(-1, lineno=447, col_offset=19)], lineno=447, col_offset=7), [Assign([Name('weekday', Store(), lineno=448, col_offset=8)], Call(Attribute(Call(Name('datetime_date', Load(), lineno=448, col_offset=18), [Name('year', Load(), lineno=448, col_offset=32), Name('month', Load(), lineno=448, col_offset=38), Name('day', Load(), lineno=448, col_offset=45)], [], None, None, lineno=448, col_offset=18), 'weekday', Load(), lineno=448, col_offset=18), [], [], None, None, lineno=448, col_offset=18), lineno=448, col_offset=8)], [], lineno=447, col_offset=4), Return(Tuple([Call(Attribute(Name('time', Load(), lineno=449, col_offset=12), 'struct_time', Load(), lineno=449, col_offset=12), [Tuple([Name('year', Load(), lineno=449, col_offset=30), Name('month', Load(), lineno=449, col_offset=36), Name('day', Load(), lineno=449, col_offset=43), Name('hour', Load(), lineno=450, col_offset=30), Name('minute', Load(), lineno=450, col_offset=36), Name('second', Load(), lineno=450, col_offset=44), Name('weekday', Load(), lineno=451, col_offset=30), Name('julian', Load(), lineno=451, col_offset=39), Name('tz', Load(), lineno=451, col_offset=47)], Load(), lineno=449, col_offset=30)], [], None, None, lineno=449, col_offset=12), Name('fraction', Load(), lineno=451, col_offset=53)], Load(), lineno=449, col_offset=12), lineno=449, col_offset=4)], [], lineno=295, col_offset=0), FunctionDef('_strptime_time', arguments([Name('data_string', Param(), lineno=453, col_offset=19), Name('format', Param(), lineno=453, col_offset=32)], None, None, [Str('%a %b %d %H:%M:%S %Y', lineno=453, col_offset=39)]), [Return(Subscript(Call(Name('_strptime', Load(), lineno=454, col_offset=11), [Name('data_string', Load(), lineno=454, col_offset=21), Name('format', Load(), lineno=454, col_offset=34)], [], None, None, lineno=454, col_offset=11), Index(Num(0, lineno=454, col_offset=42)), Load(), lineno=454, col_offset=11), lineno=454, col_offset=4)], [], lineno=453, col_offset=0)])
