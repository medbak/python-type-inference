Module([Expr(Str('\n    pyspecific.py\n    ~~~~~~~~~~~~~\n\n    Sphinx extension with Python doc-specific markup.\n\n    :copyright: 2008, 2009 by Georg Brandl.\n    :license: Python license.\n', lineno=10, col_offset=-1), lineno=10, col_offset=-1), Assign([Name('ISSUE_URI', Store(), lineno=12, col_offset=0)], Str('http://bugs.python.org/issue%s', lineno=12, col_offset=12), lineno=12, col_offset=0), ImportFrom('docutils', [alias('nodes', None), alias('utils', None)], 0, lineno=14, col_offset=0), ImportFrom('docutils.parsers.rst.states', [alias('Body', None)], 0, lineno=17, col_offset=0), Assign([Subscript(Attribute(Attribute(Name('Body', Load(), lineno=18, col_offset=0), 'enum', Load(), lineno=18, col_offset=0), 'converters', Load(), lineno=18, col_offset=0), Index(Str('loweralpha', lineno=18, col_offset=21)), Store(), lineno=18, col_offset=0), Subscript(Attribute(Attribute(Name('Body', Load(), lineno=19, col_offset=4), 'enum', Load(), lineno=19, col_offset=4), 'converters', Load(), lineno=19, col_offset=4), Index(Str('upperalpha', lineno=19, col_offset=25)), Store(), lineno=19, col_offset=4), Subscript(Attribute(Attribute(Name('Body', Load(), lineno=20, col_offset=4), 'enum', Load(), lineno=20, col_offset=4), 'converters', Load(), lineno=20, col_offset=4), Index(Str('lowerroman', lineno=20, col_offset=25)), Store(), lineno=20, col_offset=4), Subscript(Attribute(Attribute(Name('Body', Load(), lineno=21, col_offset=4), 'enum', Load(), lineno=21, col_offset=4), 'converters', Load(), lineno=21, col_offset=4), Index(Str('upperroman', lineno=21, col_offset=25)), Store(), lineno=21, col_offset=4)], Lambda(arguments([Name('x', Param(), lineno=21, col_offset=48)], None, None, []), Name('None', Load(), lineno=21, col_offset=51), lineno=21, col_offset=41), lineno=18, col_offset=0), FunctionDef('new_visit_versionmodified', arguments([Name('self', Param(), lineno=24, col_offset=30), Name('node', Param(), lineno=24, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=25, col_offset=4), 'body', Load(), lineno=25, col_offset=4), 'append', Load(), lineno=25, col_offset=4), [Call(Attribute(Name('self', Load(), lineno=25, col_offset=21), 'starttag', Load(), lineno=25, col_offset=21), [Name('node', Load(), lineno=25, col_offset=35), Str('p', lineno=25, col_offset=41)], [keyword('CLASS', Subscript(Name('node', Load(), lineno=25, col_offset=52), Index(Str('type', lineno=25, col_offset=57)), Load(), lineno=25, col_offset=52))], None, None, lineno=25, col_offset=21)], [], None, None, lineno=25, col_offset=4), lineno=25, col_offset=4), Assign([Name('text', Store(), lineno=26, col_offset=4)], BinOp(Subscript(Name('versionlabels', Load(), lineno=26, col_offset=11), Index(Subscript(Name('node', Load(), lineno=26, col_offset=25), Index(Str('type', lineno=26, col_offset=30)), Load(), lineno=26, col_offset=25)), Load(), lineno=26, col_offset=11), Mod(), Subscript(Name('node', Load(), lineno=26, col_offset=41), Index(Str('version', lineno=26, col_offset=46)), Load(), lineno=26, col_offset=41), lineno=26, col_offset=11), lineno=26, col_offset=4), If(Call(Name('len', Load(), lineno=27, col_offset=7), [Name('node', Load(), lineno=27, col_offset=11)], [], None, None, lineno=27, col_offset=7), [AugAssign(Name('text', Store(), lineno=28, col_offset=8), Add(), Str(': ', lineno=28, col_offset=16), lineno=28, col_offset=8)], [AugAssign(Name('text', Store(), lineno=30, col_offset=8), Add(), Str('.', lineno=30, col_offset=16), lineno=30, col_offset=8)], lineno=27, col_offset=4), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=31, col_offset=4), 'body', Load(), lineno=31, col_offset=4), 'append', Load(), lineno=31, col_offset=4), [BinOp(Str('<span class="versionmodified">%s</span>', lineno=31, col_offset=21), Mod(), Name('text', Load(), lineno=31, col_offset=65), lineno=31, col_offset=21)], [], None, None, lineno=31, col_offset=4), lineno=31, col_offset=4)], [], lineno=24, col_offset=0), ImportFrom('sphinx.writers.html', [alias('HTMLTranslator', None)], 0, lineno=33, col_offset=0), ImportFrom('sphinx.locale', [alias('versionlabels', None)], 0, lineno=34, col_offset=0), Assign([Attribute(Name('HTMLTranslator', Load(), lineno=35, col_offset=0), 'visit_versionmodified', Store(), lineno=35, col_offset=0)], Name('new_visit_versionmodified', Load(), lineno=35, col_offset=39), lineno=35, col_offset=0), FunctionDef('issue_role', arguments([Name('typ', Param(), lineno=40, col_offset=15), Name('rawtext', Param(), lineno=40, col_offset=20), Name('text', Param(), lineno=40, col_offset=29), Name('lineno', Param(), lineno=40, col_offset=35), Name('inliner', Param(), lineno=40, col_offset=43), Name('options', Param(), lineno=40, col_offset=52), Name('content', Param(), lineno=40, col_offset=64)], None, None, [Dict([], [], lineno=40, col_offset=60), List([], Load(), lineno=40, col_offset=72)]), [Assign([Name('issue', Store(), lineno=41, col_offset=4)], Call(Attribute(Name('utils', Load(), lineno=41, col_offset=12), 'unescape', Load(), lineno=41, col_offset=12), [Name('text', Load(), lineno=41, col_offset=27)], [], None, None, lineno=41, col_offset=12), lineno=41, col_offset=4), Assign([Name('text', Store(), lineno=42, col_offset=4)], BinOp(Str('issue ', lineno=42, col_offset=11), Add(), Name('issue', Load(), lineno=42, col_offset=22), lineno=42, col_offset=11), lineno=42, col_offset=4), Assign([Name('refnode', Store(), lineno=43, col_offset=4)], Call(Attribute(Name('nodes', Load(), lineno=43, col_offset=14), 'reference', Load(), lineno=43, col_offset=14), [Name('text', Load(), lineno=43, col_offset=30), Name('text', Load(), lineno=43, col_offset=36)], [keyword('refuri', BinOp(Name('ISSUE_URI', Load(), lineno=43, col_offset=49), Mod(), Name('issue', Load(), lineno=43, col_offset=61), lineno=43, col_offset=49))], None, None, lineno=43, col_offset=14), lineno=43, col_offset=4), Return(Tuple([List([Name('refnode', Load(), lineno=44, col_offset=12)], Load(), lineno=44, col_offset=11), List([], Load(), lineno=44, col_offset=22)], Load(), lineno=44, col_offset=11), lineno=44, col_offset=4)], [], lineno=40, col_offset=0), ImportFrom('sphinx.util.compat', [alias('Directive', None)], 0, lineno=49, col_offset=0), ClassDef('ImplementationDetail', [Name('Directive', Load(), lineno=51, col_offset=27)], [Assign([Name('has_content', Store(), lineno=53, col_offset=4)], Name('True', Load(), lineno=53, col_offset=18), lineno=53, col_offset=4), Assign([Name('required_arguments', Store(), lineno=54, col_offset=4)], Num(0, lineno=54, col_offset=25), lineno=54, col_offset=4), Assign([Name('optional_arguments', Store(), lineno=55, col_offset=4)], Num(1, lineno=55, col_offset=25), lineno=55, col_offset=4), Assign([Name('final_argument_whitespace', Store(), lineno=56, col_offset=4)], Name('True', Load(), lineno=56, col_offset=32), lineno=56, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=58, col_offset=12)], None, None, []), [Assign([Name('pnode', Store(), lineno=59, col_offset=8)], Call(Attribute(Name('nodes', Load(), lineno=59, col_offset=16), 'compound', Load(), lineno=59, col_offset=16), [], [keyword('classes', List([Str('impl-detail', lineno=59, col_offset=40)], Load(), lineno=59, col_offset=39))], None, None, lineno=59, col_offset=16), lineno=59, col_offset=8), Assign([Name('content', Store(), lineno=60, col_offset=8)], Attribute(Name('self', Load(), lineno=60, col_offset=18), 'content', Load(), lineno=60, col_offset=18), lineno=60, col_offset=8), Assign([Name('add_text', Store(), lineno=61, col_offset=8)], Call(Attribute(Name('nodes', Load(), lineno=61, col_offset=19), 'strong', Load(), lineno=61, col_offset=19), [Str('CPython implementation detail:', lineno=61, col_offset=32), Str('CPython implementation detail:', lineno=62, col_offset=32)], [], None, None, lineno=61, col_offset=19), lineno=61, col_offset=8), If(Attribute(Name('self', Load(), lineno=63, col_offset=11), 'arguments', Load(), lineno=63, col_offset=11), [Assign([Tuple([Name('n', Store(), lineno=64, col_offset=12), Name('m', Store(), lineno=64, col_offset=15)], Store(), lineno=64, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=64, col_offset=19), 'state', Load(), lineno=64, col_offset=19), 'inline_text', Load(), lineno=64, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=64, col_offset=42), 'arguments', Load(), lineno=64, col_offset=42), Index(Num(0, lineno=64, col_offset=57)), Load(), lineno=64, col_offset=42), Attribute(Name('self', Load(), lineno=64, col_offset=61), 'lineno', Load(), lineno=64, col_offset=61)], [], None, None, lineno=64, col_offset=19), lineno=64, col_offset=12), Expr(Call(Attribute(Name('pnode', Load(), lineno=65, col_offset=12), 'append', Load(), lineno=65, col_offset=12), [Call(Attribute(Name('nodes', Load(), lineno=65, col_offset=25), 'paragraph', Load(), lineno=65, col_offset=25), [Str('', lineno=65, col_offset=41), Str('', lineno=65, col_offset=45)], [], BinOp(Name('n', Load(), lineno=65, col_offset=51), Add(), Name('m', Load(), lineno=65, col_offset=55), lineno=65, col_offset=51), None, lineno=65, col_offset=25)], [], None, None, lineno=65, col_offset=12), lineno=65, col_offset=12)], [], lineno=63, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'state', Load(), lineno=66, col_offset=8), 'nested_parse', Load(), lineno=66, col_offset=8), [Name('content', Load(), lineno=66, col_offset=32), Attribute(Name('self', Load(), lineno=66, col_offset=41), 'content_offset', Load(), lineno=66, col_offset=41), Name('pnode', Load(), lineno=66, col_offset=62)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), If(BoolOp(And(), [Attribute(Name('pnode', Load(), lineno=67, col_offset=11), 'children', Load(), lineno=67, col_offset=11), Call(Name('isinstance', Load(), lineno=67, col_offset=30), [Subscript(Name('pnode', Load(), lineno=67, col_offset=41), Index(Num(0, lineno=67, col_offset=47)), Load(), lineno=67, col_offset=41), Attribute(Name('nodes', Load(), lineno=67, col_offset=51), 'paragraph', Load(), lineno=67, col_offset=51)], [], None, None, lineno=67, col_offset=30)], lineno=67, col_offset=11), [Expr(Call(Attribute(Subscript(Name('pnode', Load(), lineno=68, col_offset=12), Index(Num(0, lineno=68, col_offset=18)), Load(), lineno=68, col_offset=12), 'insert', Load(), lineno=68, col_offset=12), [Num(0, lineno=68, col_offset=28), Name('add_text', Load(), lineno=68, col_offset=31)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12), Expr(Call(Attribute(Subscript(Name('pnode', Load(), lineno=69, col_offset=12), Index(Num(0, lineno=69, col_offset=18)), Load(), lineno=69, col_offset=12), 'insert', Load(), lineno=69, col_offset=12), [Num(1, lineno=69, col_offset=28), Call(Attribute(Name('nodes', Load(), lineno=69, col_offset=31), 'Text', Load(), lineno=69, col_offset=31), [Str(' ', lineno=69, col_offset=42)], [], None, None, lineno=69, col_offset=31)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12)], [Expr(Call(Attribute(Name('pnode', Load(), lineno=71, col_offset=12), 'insert', Load(), lineno=71, col_offset=12), [Num(0, lineno=71, col_offset=25), Call(Attribute(Name('nodes', Load(), lineno=71, col_offset=28), 'paragraph', Load(), lineno=71, col_offset=28), [Str('', lineno=71, col_offset=44), Str('', lineno=71, col_offset=48), Name('add_text', Load(), lineno=71, col_offset=52)], [], None, None, lineno=71, col_offset=28)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=12)], lineno=67, col_offset=8), Return(List([Name('pnode', Load(), lineno=72, col_offset=16)], Load(), lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=51, col_offset=0), Assign([Name('pydoc_topic_labels', Store(), lineno=77, col_offset=0)], List([Str('assert', lineno=78, col_offset=4), Str('assignment', lineno=78, col_offset=14), Str('atom-identifiers', lineno=78, col_offset=28), Str('atom-literals', lineno=78, col_offset=48), Str('attribute-access', lineno=79, col_offset=4), Str('attribute-references', lineno=79, col_offset=24), Str('augassign', lineno=79, col_offset=48), Str('binary', lineno=79, col_offset=61), Str('bitwise', lineno=80, col_offset=4), Str('bltin-code-objects', lineno=80, col_offset=15), Str('bltin-ellipsis-object', lineno=80, col_offset=37), Str('bltin-file-objects', lineno=81, col_offset=4), Str('bltin-null-object', lineno=81, col_offset=26), Str('bltin-type-objects', lineno=81, col_offset=47), Str('booleans', lineno=81, col_offset=69), Str('break', lineno=82, col_offset=4), Str('callable-types', lineno=82, col_offset=13), Str('calls', lineno=82, col_offset=31), Str('class', lineno=82, col_offset=40), Str('coercion-rules', lineno=82, col_offset=49), Str('comparisons', lineno=83, col_offset=4), Str('compound', lineno=83, col_offset=19), Str('context-managers', lineno=83, col_offset=31), Str('continue', lineno=83, col_offset=51), Str('conversions', lineno=83, col_offset=63), Str('customization', lineno=84, col_offset=4), Str('debugger', lineno=84, col_offset=21), Str('del', lineno=84, col_offset=33), Str('dict', lineno=84, col_offset=40), Str('dynamic-features', lineno=84, col_offset=48), Str('else', lineno=84, col_offset=68), Str('exceptions', lineno=85, col_offset=4), Str('exec', lineno=85, col_offset=18), Str('execmodel', lineno=85, col_offset=26), Str('exprlists', lineno=85, col_offset=39), Str('floating', lineno=85, col_offset=52), Str('for', lineno=85, col_offset=64), Str('formatstrings', lineno=86, col_offset=4), Str('function', lineno=86, col_offset=21), Str('global', lineno=86, col_offset=33), Str('id-classes', lineno=86, col_offset=43), Str('identifiers', lineno=86, col_offset=57), Str('if', lineno=86, col_offset=72), Str('imaginary', lineno=87, col_offset=4), Str('import', lineno=87, col_offset=17), Str('in', lineno=87, col_offset=27), Str('integers', lineno=87, col_offset=33), Str('lambda', lineno=87, col_offset=45), Str('lists', lineno=87, col_offset=55), Str('naming', lineno=87, col_offset=64), Str('numbers', lineno=88, col_offset=4), Str('numeric-types', lineno=88, col_offset=15), Str('objects', lineno=88, col_offset=32), Str('operator-summary', lineno=88, col_offset=43), Str('pass', lineno=88, col_offset=63), Str('power', lineno=88, col_offset=71), Str('print', lineno=89, col_offset=4), Str('raise', lineno=89, col_offset=13), Str('return', lineno=89, col_offset=22), Str('sequence-methods', lineno=89, col_offset=32), Str('sequence-types', lineno=89, col_offset=52), Str('shifting', lineno=90, col_offset=4), Str('slicings', lineno=90, col_offset=16), Str('specialattrs', lineno=90, col_offset=28), Str('specialnames', lineno=90, col_offset=44), Str('string-conversions', lineno=91, col_offset=4), Str('string-methods', lineno=91, col_offset=26), Str('strings', lineno=91, col_offset=44), Str('subscriptions', lineno=91, col_offset=55), Str('truth', lineno=91, col_offset=72), Str('try', lineno=92, col_offset=4), Str('types', lineno=92, col_offset=11), Str('typesfunctions', lineno=92, col_offset=20), Str('typesmapping', lineno=92, col_offset=38), Str('typesmethods', lineno=92, col_offset=54), Str('typesmodules', lineno=93, col_offset=4), Str('typesseq', lineno=93, col_offset=20), Str('typesseq-mutable', lineno=93, col_offset=32), Str('unary', lineno=93, col_offset=52), Str('while', lineno=93, col_offset=61), Str('with', lineno=93, col_offset=70), Str('yield', lineno=94, col_offset=4)], Load(), lineno=77, col_offset=21), lineno=77, col_offset=0), ImportFrom('os', [alias('path', None)], 0, lineno=97, col_offset=0), ImportFrom('time', [alias('asctime', None)], 0, lineno=98, col_offset=0), ImportFrom('pprint', [alias('pformat', None)], 0, lineno=99, col_offset=0), ImportFrom('docutils.io', [alias('StringOutput', None)], 0, lineno=100, col_offset=0), ImportFrom('docutils.utils', [alias('new_document', None)], 0, lineno=101, col_offset=0), ImportFrom('sphinx.builders', [alias('Builder', None)], 0, lineno=103, col_offset=0), ImportFrom('sphinx.writers.text', [alias('TextWriter', None)], 0, lineno=104, col_offset=0), ClassDef('PydocTopicsBuilder', [Name('Builder', Load(), lineno=107, col_offset=25)], [Assign([Name('name', Store(), lineno=108, col_offset=4)], Str('pydoc-topics', lineno=108, col_offset=11), lineno=108, col_offset=4), FunctionDef('init', arguments([Name('self', Param(), lineno=110, col_offset=13)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=111, col_offset=8), 'topics', Store(), lineno=111, col_offset=8)], Dict([], [], lineno=111, col_offset=22), lineno=111, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('get_outdated_docs', arguments([Name('self', Param(), lineno=113, col_offset=26)], None, None, []), [Return(Str('all pydoc topics', lineno=114, col_offset=15), lineno=114, col_offset=8)], [], lineno=113, col_offset=4), FunctionDef('get_target_uri', arguments([Name('self', Param(), lineno=116, col_offset=23), Name('docname', Param(), lineno=116, col_offset=29), Name('typ', Param(), lineno=116, col_offset=38)], None, None, [Name('None', Load(), lineno=116, col_offset=42)]), [Return(Str('', lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=116, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=119, col_offset=14)], 'ignored', None, []), [Assign([Name('writer', Store(), lineno=120, col_offset=8)], Call(Name('TextWriter', Load(), lineno=120, col_offset=17), [Name('self', Load(), lineno=120, col_offset=28)], [], None, None, lineno=120, col_offset=17), lineno=120, col_offset=8), For(Name('label', Store(), lineno=121, col_offset=12), Call(Attribute(Name('self', Load(), lineno=121, col_offset=21), 'status_iterator', Load(), lineno=121, col_offset=21), [Name('pydoc_topic_labels', Load(), lineno=121, col_offset=42), Str('building topics... ', lineno=122, col_offset=42)], [keyword('length', Call(Name('len', Load(), lineno=123, col_offset=49), [Name('pydoc_topic_labels', Load(), lineno=123, col_offset=53)], [], None, None, lineno=123, col_offset=49))], None, None, lineno=121, col_offset=21), [If(Compare(Name('label', Load(), lineno=124, col_offset=15), [NotIn()], [Attribute(Attribute(Name('self', Load(), lineno=124, col_offset=28), 'env', Load(), lineno=124, col_offset=28), 'labels', Load(), lineno=124, col_offset=28)], lineno=124, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=16), 'warn', Load(), lineno=125, col_offset=16), [BinOp(Str('label %r not in documentation', lineno=125, col_offset=26), Mod(), Name('label', Load(), lineno=125, col_offset=60), lineno=125, col_offset=26)], [], None, None, lineno=125, col_offset=16), lineno=125, col_offset=16), Continue( lineno=126, col_offset=16)], [], lineno=124, col_offset=12), Assign([Tuple([Name('docname', Store(), lineno=127, col_offset=12), Name('labelid', Store(), lineno=127, col_offset=21), Name('sectname', Store(), lineno=127, col_offset=30)], Store(), lineno=127, col_offset=12)], Subscript(Attribute(Attribute(Name('self', Load(), lineno=127, col_offset=41), 'env', Load(), lineno=127, col_offset=41), 'labels', Load(), lineno=127, col_offset=41), Index(Name('label', Load(), lineno=127, col_offset=57)), Load(), lineno=127, col_offset=41), lineno=127, col_offset=12), Assign([Name('doctree', Store(), lineno=128, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=128, col_offset=22), 'env', Load(), lineno=128, col_offset=22), 'get_and_resolve_doctree', Load(), lineno=128, col_offset=22), [Name('docname', Load(), lineno=128, col_offset=55), Name('self', Load(), lineno=128, col_offset=64)], [], None, None, lineno=128, col_offset=22), lineno=128, col_offset=12), Assign([Name('document', Store(), lineno=129, col_offset=12)], Call(Name('new_document', Load(), lineno=129, col_offset=23), [Str('<section node>', lineno=129, col_offset=36)], [], None, None, lineno=129, col_offset=23), lineno=129, col_offset=12), Expr(Call(Attribute(Name('document', Load(), lineno=130, col_offset=12), 'append', Load(), lineno=130, col_offset=12), [Subscript(Attribute(Name('doctree', Load(), lineno=130, col_offset=28), 'ids', Load(), lineno=130, col_offset=28), Index(Name('labelid', Load(), lineno=130, col_offset=40)), Load(), lineno=130, col_offset=28)], [], None, None, lineno=130, col_offset=12), lineno=130, col_offset=12), Assign([Name('destination', Store(), lineno=131, col_offset=12)], Call(Name('StringOutput', Load(), lineno=131, col_offset=26), [], [keyword('encoding', Str('utf-8', lineno=131, col_offset=48))], None, None, lineno=131, col_offset=26), lineno=131, col_offset=12), Expr(Call(Attribute(Name('writer', Load(), lineno=132, col_offset=12), 'write', Load(), lineno=132, col_offset=12), [Name('document', Load(), lineno=132, col_offset=25), Name('destination', Load(), lineno=132, col_offset=35)], [], None, None, lineno=132, col_offset=12), lineno=132, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=133, col_offset=12), 'topics', Load(), lineno=133, col_offset=12), Index(Name('label', Load(), lineno=133, col_offset=24)), Store(), lineno=133, col_offset=12)], Attribute(Name('writer', Load(), lineno=133, col_offset=33), 'output', Load(), lineno=133, col_offset=33), lineno=133, col_offset=12)], [], lineno=121, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('finish', arguments([Name('self', Param(), lineno=135, col_offset=15)], None, None, []), [Assign([Name('f', Store(), lineno=136, col_offset=8)], Call(Name('open', Load(), lineno=136, col_offset=12), [Call(Attribute(Name('path', Load(), lineno=136, col_offset=17), 'join', Load(), lineno=136, col_offset=17), [Attribute(Name('self', Load(), lineno=136, col_offset=27), 'outdir', Load(), lineno=136, col_offset=27), Str('topics.py', lineno=136, col_offset=40)], [], None, None, lineno=136, col_offset=17), Str('w', lineno=136, col_offset=54)], [], None, None, lineno=136, col_offset=12), lineno=136, col_offset=8), TryFinally([Expr(Call(Attribute(Name('f', Load(), lineno=138, col_offset=12), 'write', Load(), lineno=138, col_offset=12), [BinOp(Str('# Autogenerated by Sphinx on %s\n', lineno=138, col_offset=20), Mod(), Call(Name('asctime', Load(), lineno=138, col_offset=58), [], [], None, None, lineno=138, col_offset=58), lineno=138, col_offset=20)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12), Expr(Call(Attribute(Name('f', Load(), lineno=139, col_offset=12), 'write', Load(), lineno=139, col_offset=12), [BinOp(BinOp(Str('topics = ', lineno=139, col_offset=20), Add(), Call(Name('pformat', Load(), lineno=139, col_offset=34), [Attribute(Name('self', Load(), lineno=139, col_offset=42), 'topics', Load(), lineno=139, col_offset=42)], [], None, None, lineno=139, col_offset=34), lineno=139, col_offset=20), Add(), Str('\n', lineno=139, col_offset=57), lineno=139, col_offset=55)], [], None, None, lineno=139, col_offset=12), lineno=139, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=141, col_offset=12), 'close', Load(), lineno=141, col_offset=12), [], [], None, None, lineno=141, col_offset=12), lineno=141, col_offset=12)], lineno=137, col_offset=8)], [], lineno=135, col_offset=4)], [], lineno=107, col_offset=0), Import([alias('suspicious', None)], lineno=146, col_offset=0), Import([alias('re', None)], lineno=151, col_offset=0), ImportFrom('sphinx', [alias('addnodes', None)], 0, lineno=152, col_offset=0), Assign([Name('opcode_sig_re', Store(), lineno=154, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=154, col_offset=16), 'compile', Load(), lineno=154, col_offset=16), [Str('(\\w+(?:\\+\\d)?)\\s*\\((.*)\\)', lineno=154, col_offset=27)], [], None, None, lineno=154, col_offset=16), lineno=154, col_offset=0), FunctionDef('parse_opcode_signature', arguments([Name('env', Param(), lineno=156, col_offset=27), Name('sig', Param(), lineno=156, col_offset=32), Name('signode', Param(), lineno=156, col_offset=37)], None, None, []), [Expr(Str('Transform an opcode signature into RST nodes.', lineno=157, col_offset=4), lineno=157, col_offset=4), Assign([Name('m', Store(), lineno=158, col_offset=4)], Call(Attribute(Name('opcode_sig_re', Load(), lineno=158, col_offset=8), 'match', Load(), lineno=158, col_offset=8), [Name('sig', Load(), lineno=158, col_offset=28)], [], None, None, lineno=158, col_offset=8), lineno=158, col_offset=4), If(Compare(Name('m', Load(), lineno=159, col_offset=7), [Is()], [Name('None', Load(), lineno=159, col_offset=12)], lineno=159, col_offset=7), [Raise(Name('ValueError', Load(), lineno=160, col_offset=14), None, None, lineno=160, col_offset=8)], [], lineno=159, col_offset=4), Assign([Tuple([Name('opname', Store(), lineno=161, col_offset=4), Name('arglist', Store(), lineno=161, col_offset=12)], Store(), lineno=161, col_offset=4)], Call(Attribute(Name('m', Load(), lineno=161, col_offset=22), 'groups', Load(), lineno=161, col_offset=22), [], [], None, None, lineno=161, col_offset=22), lineno=161, col_offset=4), AugAssign(Name('signode', Store(), lineno=162, col_offset=4), Add(), Call(Attribute(Name('addnodes', Load(), lineno=162, col_offset=15), 'desc_name', Load(), lineno=162, col_offset=15), [Name('opname', Load(), lineno=162, col_offset=34), Name('opname', Load(), lineno=162, col_offset=42)], [], None, None, lineno=162, col_offset=15), lineno=162, col_offset=4), Assign([Name('paramlist', Store(), lineno=163, col_offset=4)], Call(Attribute(Name('addnodes', Load(), lineno=163, col_offset=16), 'desc_parameterlist', Load(), lineno=163, col_offset=16), [], [], None, None, lineno=163, col_offset=16), lineno=163, col_offset=4), AugAssign(Name('signode', Store(), lineno=164, col_offset=4), Add(), Name('paramlist', Load(), lineno=164, col_offset=15), lineno=164, col_offset=4), AugAssign(Name('paramlist', Store(), lineno=165, col_offset=4), Add(), Call(Attribute(Name('addnodes', Load(), lineno=165, col_offset=17), 'desc_parameter', Load(), lineno=165, col_offset=17), [Name('arglist', Load(), lineno=165, col_offset=41), Name('arglist', Load(), lineno=165, col_offset=50)], [], None, None, lineno=165, col_offset=17), lineno=165, col_offset=4), Return(Call(Attribute(Name('opname', Load(), lineno=166, col_offset=11), 'strip', Load(), lineno=166, col_offset=11), [], [], None, None, lineno=166, col_offset=11), lineno=166, col_offset=4)], [], lineno=156, col_offset=0), FunctionDef('setup', arguments([Name('app', Param(), lineno=169, col_offset=10)], None, None, []), [Expr(Call(Attribute(Name('app', Load(), lineno=170, col_offset=4), 'add_role', Load(), lineno=170, col_offset=4), [Str('issue', lineno=170, col_offset=17), Name('issue_role', Load(), lineno=170, col_offset=26)], [], None, None, lineno=170, col_offset=4), lineno=170, col_offset=4), Expr(Call(Attribute(Name('app', Load(), lineno=171, col_offset=4), 'add_directive', Load(), lineno=171, col_offset=4), [Str('impl-detail', lineno=171, col_offset=22), Name('ImplementationDetail', Load(), lineno=171, col_offset=37)], [], None, None, lineno=171, col_offset=4), lineno=171, col_offset=4), Expr(Call(Attribute(Name('app', Load(), lineno=172, col_offset=4), 'add_builder', Load(), lineno=172, col_offset=4), [Name('PydocTopicsBuilder', Load(), lineno=172, col_offset=20)], [], None, None, lineno=172, col_offset=4), lineno=172, col_offset=4), Expr(Call(Attribute(Name('app', Load(), lineno=173, col_offset=4), 'add_builder', Load(), lineno=173, col_offset=4), [Attribute(Name('suspicious', Load(), lineno=173, col_offset=20), 'CheckSuspiciousMarkupBuilder', Load(), lineno=173, col_offset=20)], [], None, None, lineno=173, col_offset=4), lineno=173, col_offset=4), Expr(Call(Attribute(Name('app', Load(), lineno=174, col_offset=4), 'add_description_unit', Load(), lineno=174, col_offset=4), [Str('opcode', lineno=174, col_offset=29), Str('opcode', lineno=174, col_offset=39), Str('%s (opcode)', lineno=174, col_offset=49), Name('parse_opcode_signature', Load(), lineno=175, col_offset=29)], [], None, None, lineno=174, col_offset=4), lineno=174, col_offset=4), Expr(Call(Attribute(Name('app', Load(), lineno=176, col_offset=4), 'add_description_unit', Load(), lineno=176, col_offset=4), [Str('2to3fixer', lineno=176, col_offset=29), Str('2to3fixer', lineno=176, col_offset=42), Str('%s (2to3 fixer)', lineno=176, col_offset=55)], [], None, None, lineno=176, col_offset=4), lineno=176, col_offset=4)], [], lineno=169, col_offset=0)])
