Module([Expr(Str('\nThis is a Py2.3 implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n\n    www2.hursley.ibm.com/decimal/decarith.html\n\nand IEEE standard 854-1987:\n\n    www.cs.berkeley.edu/~ejr/projects/754/private/drafts/854-1987/dir.html\n\nDecimal floating point has finite precision with arbitrarily large bounds.\n\nThe purpose of this module is to support arithmetic using familiar\n"schoolhouse" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof the expected Decimal(\'0.00\') returned by decimal floating point).\n\nHere are some examples of using the decimal module:\n\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal(\'0\')\n>>> Decimal(\'1\')\nDecimal(\'1\')\n>>> Decimal(\'-.0123\')\nDecimal(\'-0.0123\')\n>>> Decimal(123456)\nDecimal(\'123456\')\n>>> Decimal(\'123.45e12345678901234567890\')\nDecimal(\'1.2345E+12345678901234567892\')\n>>> Decimal(\'1.33\') + Decimal(\'1.27\')\nDecimal(\'2.60\')\n>>> Decimal(\'12.34\') + Decimal(\'3.87\') - Decimal(\'18.41\')\nDecimal(\'-2.20\')\n>>> dig = Decimal(1)\n>>> print dig / Decimal(3)\n0.333333333\n>>> getcontext().prec = 18\n>>> print dig / Decimal(3)\n0.333333333333333333\n>>> print dig.sqrt()\n1\n>>> print Decimal(3).sqrt()\n1.73205080756887729\n>>> print Decimal(3) ** 123\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print inf\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print neginf\n-Infinity\n>>> print neginf + inf\nNaN\n>>> print neginf * inf\n-Infinity\n>>> print dig / 0\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print dig / 0\nTraceback (most recent call last):\n  ...\n  ...\n  ...\nDivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print c.flags[InvalidOperation]\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal(\'NaN\')\n>>> c.traps[InvalidOperation] = 1\n>>> print c.flags[InvalidOperation]\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print c.flags[InvalidOperation]\n0\n>>> print c.divide(Decimal(0), Decimal(0))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\nInvalidOperation: 0 / 0\n>>> print c.flags[InvalidOperation]\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print c.divide(Decimal(0), Decimal(0))\nNaN\n>>> print c.flags[InvalidOperation]\n1\n>>>\n', lineno=116, col_offset=-1), lineno=116, col_offset=-1), Assign([Name('__all__', Store(), lineno=118, col_offset=0)], List([Str('Decimal', lineno=120, col_offset=4), Str('Context', lineno=120, col_offset=15), Str('DefaultContext', lineno=123, col_offset=4), Str('BasicContext', lineno=123, col_offset=22), Str('ExtendedContext', lineno=123, col_offset=38), Str('DecimalException', lineno=126, col_offset=4), Str('Clamped', lineno=126, col_offset=24), Str('InvalidOperation', lineno=126, col_offset=35), Str('DivisionByZero', lineno=126, col_offset=55), Str('Inexact', lineno=127, col_offset=4), Str('Rounded', lineno=127, col_offset=15), Str('Subnormal', lineno=127, col_offset=26), Str('Overflow', lineno=127, col_offset=39), Str('Underflow', lineno=127, col_offset=51), Str('ROUND_DOWN', lineno=130, col_offset=4), Str('ROUND_HALF_UP', lineno=130, col_offset=18), Str('ROUND_HALF_EVEN', lineno=130, col_offset=35), Str('ROUND_CEILING', lineno=130, col_offset=54), Str('ROUND_FLOOR', lineno=131, col_offset=4), Str('ROUND_UP', lineno=131, col_offset=19), Str('ROUND_HALF_DOWN', lineno=131, col_offset=31), Str('ROUND_05UP', lineno=131, col_offset=50), Str('setcontext', lineno=134, col_offset=4), Str('getcontext', lineno=134, col_offset=18), Str('localcontext', lineno=134, col_offset=32)], Load(), lineno=118, col_offset=10), lineno=118, col_offset=0), Assign([Name('__version__', Store(), lineno=137, col_offset=0)], Str('1.70', lineno=137, col_offset=14), lineno=137, col_offset=0), Import([alias('copy', '_copy')], lineno=139, col_offset=0), Import([alias('math', '_math')], lineno=140, col_offset=0), Import([alias('numbers', '_numbers')], lineno=141, col_offset=0), TryExcept([ImportFrom('collections', [alias('namedtuple', '_namedtuple')], 0, lineno=144, col_offset=4), Assign([Name('DecimalTuple', Store(), lineno=145, col_offset=4)], Call(Name('_namedtuple', Load(), lineno=145, col_offset=19), [Str('DecimalTuple', lineno=145, col_offset=31), Str('sign digits exponent', lineno=145, col_offset=47)], [], None, None, lineno=145, col_offset=19), lineno=145, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=146, col_offset=7), None, [Assign([Name('DecimalTuple', Store(), lineno=147, col_offset=4)], Lambda(arguments([], 'args', None, []), Name('args', Load(), lineno=147, col_offset=33), lineno=147, col_offset=19), lineno=147, col_offset=4)], lineno=146, col_offset=0)], [], lineno=143, col_offset=0), Assign([Name('ROUND_DOWN', Store(), lineno=150, col_offset=0)], Str('ROUND_DOWN', lineno=150, col_offset=13), lineno=150, col_offset=0), Assign([Name('ROUND_HALF_UP', Store(), lineno=151, col_offset=0)], Str('ROUND_HALF_UP', lineno=151, col_offset=16), lineno=151, col_offset=0), Assign([Name('ROUND_HALF_EVEN', Store(), lineno=152, col_offset=0)], Str('ROUND_HALF_EVEN', lineno=152, col_offset=18), lineno=152, col_offset=0), Assign([Name('ROUND_CEILING', Store(), lineno=153, col_offset=0)], Str('ROUND_CEILING', lineno=153, col_offset=16), lineno=153, col_offset=0), Assign([Name('ROUND_FLOOR', Store(), lineno=154, col_offset=0)], Str('ROUND_FLOOR', lineno=154, col_offset=14), lineno=154, col_offset=0), Assign([Name('ROUND_UP', Store(), lineno=155, col_offset=0)], Str('ROUND_UP', lineno=155, col_offset=11), lineno=155, col_offset=0), Assign([Name('ROUND_HALF_DOWN', Store(), lineno=156, col_offset=0)], Str('ROUND_HALF_DOWN', lineno=156, col_offset=18), lineno=156, col_offset=0), Assign([Name('ROUND_05UP', Store(), lineno=157, col_offset=0)], Str('ROUND_05UP', lineno=157, col_offset=13), lineno=157, col_offset=0), ClassDef('DecimalException', [Name('ArithmeticError', Load(), lineno=161, col_offset=23)], [Expr(Str("Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    ", lineno=179, col_offset=-1), lineno=179, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=180, col_offset=15), Name('context', Param(), lineno=180, col_offset=21)], 'args', None, []), [Pass( lineno=181, col_offset=8)], [], lineno=180, col_offset=4)], [], lineno=161, col_offset=0), ClassDef('Clamped', [Name('DecimalException', Load(), lineno=184, col_offset=14)], [Expr(Str('Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    ', lineno=194, col_offset=-1), lineno=194, col_offset=-1)], [], lineno=184, col_offset=0), ClassDef('InvalidOperation', [Name('DecimalException', Load(), lineno=196, col_offset=23)], [Expr(Str('An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    ', lineno=218, col_offset=-1), lineno=218, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=219, col_offset=15), Name('context', Param(), lineno=219, col_offset=21)], 'args', None, []), [If(Name('args', Load(), lineno=220, col_offset=11), [Assign([Name('ans', Store(), lineno=221, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=221, col_offset=18), [Attribute(Subscript(Name('args', Load(), lineno=221, col_offset=35), Index(Num(0, lineno=221, col_offset=40)), Load(), lineno=221, col_offset=35), '_sign', Load(), lineno=221, col_offset=35), Attribute(Subscript(Name('args', Load(), lineno=221, col_offset=50), Index(Num(0, lineno=221, col_offset=55)), Load(), lineno=221, col_offset=50), '_int', Load(), lineno=221, col_offset=50), Str('n', lineno=221, col_offset=64), Name('True', Load(), lineno=221, col_offset=69)], [], None, None, lineno=221, col_offset=18), lineno=221, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=222, col_offset=19), '_fix_nan', Load(), lineno=222, col_offset=19), [Name('context', Load(), lineno=222, col_offset=32)], [], None, None, lineno=222, col_offset=19), lineno=222, col_offset=12)], [], lineno=220, col_offset=8), Return(Name('_NaN', Load(), lineno=223, col_offset=15), lineno=223, col_offset=8)], [], lineno=219, col_offset=4)], [], lineno=196, col_offset=0), ClassDef('ConversionSyntax', [Name('InvalidOperation', Load(), lineno=225, col_offset=23)], [Expr(Str('Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if an string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    ', lineno=231, col_offset=-1), lineno=231, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=232, col_offset=15), Name('context', Param(), lineno=232, col_offset=21)], 'args', None, []), [Return(Name('_NaN', Load(), lineno=233, col_offset=15), lineno=233, col_offset=8)], [], lineno=232, col_offset=4)], [], lineno=225, col_offset=0), ClassDef('DivisionByZero', [Name('DecimalException', Load(), lineno=235, col_offset=21), Name('ZeroDivisionError', Load(), lineno=235, col_offset=39)], [Expr(Str('Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    ', lineno=246, col_offset=-1), lineno=246, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=248, col_offset=15), Name('context', Param(), lineno=248, col_offset=21), Name('sign', Param(), lineno=248, col_offset=30)], 'args', None, []), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=249, col_offset=15), Index(Name('sign', Load(), lineno=249, col_offset=31)), Load(), lineno=249, col_offset=15), lineno=249, col_offset=8)], [], lineno=248, col_offset=4)], [], lineno=235, col_offset=0), ClassDef('DivisionImpossible', [Name('InvalidOperation', Load(), lineno=251, col_offset=25)], [Expr(Str('Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    ', lineno=257, col_offset=-1), lineno=257, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=259, col_offset=15), Name('context', Param(), lineno=259, col_offset=21)], 'args', None, []), [Return(Name('_NaN', Load(), lineno=260, col_offset=15), lineno=260, col_offset=8)], [], lineno=259, col_offset=4)], [], lineno=251, col_offset=0), ClassDef('DivisionUndefined', [Name('InvalidOperation', Load(), lineno=262, col_offset=24), Name('ZeroDivisionError', Load(), lineno=262, col_offset=42)], [Expr(Str('Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    ', lineno=268, col_offset=-1), lineno=268, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=270, col_offset=15), Name('context', Param(), lineno=270, col_offset=21)], 'args', None, []), [Return(Name('_NaN', Load(), lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4)], [], lineno=262, col_offset=0), ClassDef('Inexact', [Name('DecimalException', Load(), lineno=273, col_offset=14)], [Expr(Str('Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    ', lineno=283, col_offset=-1), lineno=283, col_offset=-1)], [], lineno=273, col_offset=0), ClassDef('InvalidContext', [Name('InvalidOperation', Load(), lineno=285, col_offset=21)], [Expr(Str('Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    ', lineno=294, col_offset=-1), lineno=294, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=296, col_offset=15), Name('context', Param(), lineno=296, col_offset=21)], 'args', None, []), [Return(Name('_NaN', Load(), lineno=297, col_offset=15), lineno=297, col_offset=8)], [], lineno=296, col_offset=4)], [], lineno=285, col_offset=0), ClassDef('Rounded', [Name('DecimalException', Load(), lineno=299, col_offset=14)], [Expr(Str('Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    ', lineno=309, col_offset=-1), lineno=309, col_offset=-1)], [], lineno=299, col_offset=0), ClassDef('Subnormal', [Name('DecimalException', Load(), lineno=311, col_offset=16)], [Expr(Str('Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    ', lineno=320, col_offset=-1), lineno=320, col_offset=-1)], [], lineno=311, col_offset=0), ClassDef('Overflow', [Name('Inexact', Load(), lineno=322, col_offset=15), Name('Rounded', Load(), lineno=322, col_offset=24)], [Expr(Str('Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    ', lineno=342, col_offset=-1), lineno=342, col_offset=-1), FunctionDef('handle', arguments([Name('self', Param(), lineno=344, col_offset=15), Name('context', Param(), lineno=344, col_offset=21), Name('sign', Param(), lineno=344, col_offset=30)], 'args', None, []), [If(Compare(Attribute(Name('context', Load(), lineno=345, col_offset=11), 'rounding', Load(), lineno=345, col_offset=11), [In()], [Tuple([Name('ROUND_HALF_UP', Load(), lineno=345, col_offset=32), Name('ROUND_HALF_EVEN', Load(), lineno=345, col_offset=47), Name('ROUND_HALF_DOWN', Load(), lineno=346, col_offset=32), Name('ROUND_UP', Load(), lineno=346, col_offset=49)], Load(), lineno=345, col_offset=32)], lineno=345, col_offset=11), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=347, col_offset=19), Index(Name('sign', Load(), lineno=347, col_offset=35)), Load(), lineno=347, col_offset=19), lineno=347, col_offset=12)], [], lineno=345, col_offset=8), If(Compare(Name('sign', Load(), lineno=348, col_offset=11), [Eq()], [Num(0, lineno=348, col_offset=19)], lineno=348, col_offset=11), [If(Compare(Attribute(Name('context', Load(), lineno=349, col_offset=15), 'rounding', Load(), lineno=349, col_offset=15), [Eq()], [Name('ROUND_CEILING', Load(), lineno=349, col_offset=35)], lineno=349, col_offset=15), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=350, col_offset=23), Index(Name('sign', Load(), lineno=350, col_offset=39)), Load(), lineno=350, col_offset=23), lineno=350, col_offset=16)], [], lineno=349, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=351, col_offset=19), [Name('sign', Load(), lineno=351, col_offset=36), BinOp(Str('9', lineno=351, col_offset=42), Mult(), Attribute(Name('context', Load(), lineno=351, col_offset=46), 'prec', Load(), lineno=351, col_offset=46), lineno=351, col_offset=42), BinOp(BinOp(Attribute(Name('context', Load(), lineno=352, col_offset=28), 'Emax', Load(), lineno=352, col_offset=28), Sub(), Attribute(Name('context', Load(), lineno=352, col_offset=41), 'prec', Load(), lineno=352, col_offset=41), lineno=352, col_offset=28), Add(), Num(1, lineno=352, col_offset=54), lineno=352, col_offset=53)], [], None, None, lineno=351, col_offset=19), lineno=351, col_offset=12)], [], lineno=348, col_offset=8), If(Compare(Name('sign', Load(), lineno=353, col_offset=11), [Eq()], [Num(1, lineno=353, col_offset=19)], lineno=353, col_offset=11), [If(Compare(Attribute(Name('context', Load(), lineno=354, col_offset=15), 'rounding', Load(), lineno=354, col_offset=15), [Eq()], [Name('ROUND_FLOOR', Load(), lineno=354, col_offset=35)], lineno=354, col_offset=15), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=355, col_offset=23), Index(Name('sign', Load(), lineno=355, col_offset=39)), Load(), lineno=355, col_offset=23), lineno=355, col_offset=16)], [], lineno=354, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=356, col_offset=19), [Name('sign', Load(), lineno=356, col_offset=36), BinOp(Str('9', lineno=356, col_offset=42), Mult(), Attribute(Name('context', Load(), lineno=356, col_offset=46), 'prec', Load(), lineno=356, col_offset=46), lineno=356, col_offset=42), BinOp(BinOp(Attribute(Name('context', Load(), lineno=357, col_offset=29), 'Emax', Load(), lineno=357, col_offset=29), Sub(), Attribute(Name('context', Load(), lineno=357, col_offset=42), 'prec', Load(), lineno=357, col_offset=42), lineno=357, col_offset=29), Add(), Num(1, lineno=357, col_offset=55), lineno=357, col_offset=54)], [], None, None, lineno=356, col_offset=19), lineno=356, col_offset=12)], [], lineno=353, col_offset=8)], [], lineno=344, col_offset=4)], [], lineno=322, col_offset=0), ClassDef('Underflow', [Name('Inexact', Load(), lineno=360, col_offset=16), Name('Rounded', Load(), lineno=360, col_offset=25), Name('Subnormal', Load(), lineno=360, col_offset=34)], [Expr(Str('Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    ', lineno=373, col_offset=-1), lineno=373, col_offset=-1)], [], lineno=360, col_offset=0), Assign([Name('_signals', Store(), lineno=376, col_offset=0)], List([Name('Clamped', Load(), lineno=376, col_offset=12), Name('DivisionByZero', Load(), lineno=376, col_offset=21), Name('Inexact', Load(), lineno=376, col_offset=37), Name('Overflow', Load(), lineno=376, col_offset=46), Name('Rounded', Load(), lineno=376, col_offset=56), Name('Underflow', Load(), lineno=377, col_offset=11), Name('InvalidOperation', Load(), lineno=377, col_offset=22), Name('Subnormal', Load(), lineno=377, col_offset=40)], Load(), lineno=376, col_offset=11), lineno=376, col_offset=0), Assign([Name('_condition_map', Store(), lineno=380, col_offset=0)], Dict([Name('ConversionSyntax', Load(), lineno=380, col_offset=18), Name('DivisionImpossible', Load(), lineno=381, col_offset=18), Name('DivisionUndefined', Load(), lineno=382, col_offset=18), Name('InvalidContext', Load(), lineno=383, col_offset=18)], [Name('InvalidOperation', Load(), lineno=380, col_offset=35), Name('InvalidOperation', Load(), lineno=381, col_offset=37), Name('InvalidOperation', Load(), lineno=382, col_offset=36), Name('InvalidOperation', Load(), lineno=383, col_offset=33)], lineno=380, col_offset=17), lineno=380, col_offset=0), TryExcept([Import([alias('threading', None)], lineno=394, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=395, col_offset=7), None, [Import([alias('sys', None)], lineno=397, col_offset=4), ClassDef('MockThreading', [Name('object', Load(), lineno=398, col_offset=24)], [FunctionDef('local', arguments([Name('self', Param(), lineno=399, col_offset=18), Name('sys', Param(), lineno=399, col_offset=24)], None, None, [Name('sys', Load(), lineno=399, col_offset=28)]), [Return(Subscript(Attribute(Name('sys', Load(), lineno=400, col_offset=19), 'modules', Load(), lineno=400, col_offset=19), Index(Name('__name__', Load(), lineno=400, col_offset=31)), Load(), lineno=400, col_offset=19), lineno=400, col_offset=12)], [], lineno=399, col_offset=8)], [], lineno=398, col_offset=4), Assign([Name('threading', Store(), lineno=401, col_offset=4)], Call(Name('MockThreading', Load(), lineno=401, col_offset=16), [], [], None, None, lineno=401, col_offset=16), lineno=401, col_offset=4), Delete([Name('sys', Del(), lineno=402, col_offset=8), Name('MockThreading', Del(), lineno=402, col_offset=13)], lineno=402, col_offset=4)], lineno=395, col_offset=0)], [], lineno=393, col_offset=0), TryExcept([Expr(Attribute(Name('threading', Load(), lineno=405, col_offset=4), 'local', Load(), lineno=405, col_offset=4), lineno=405, col_offset=4)], [ExceptHandler(Name('AttributeError', Load(), lineno=407, col_offset=7), None, [If(Call(Name('hasattr', Load(), lineno=411, col_offset=7), [Call(Attribute(Name('threading', Load(), lineno=411, col_offset=15), 'currentThread', Load(), lineno=411, col_offset=15), [], [], None, None, lineno=411, col_offset=15), Str('__decimal_context__', lineno=411, col_offset=42)], [], None, None, lineno=411, col_offset=7), [Delete([Attribute(Call(Attribute(Name('threading', Load(), lineno=412, col_offset=12), 'currentThread', Load(), lineno=412, col_offset=12), [], [], None, None, lineno=412, col_offset=12), '__decimal_context__', Del(), lineno=412, col_offset=12)], lineno=412, col_offset=8)], [], lineno=411, col_offset=4), FunctionDef('setcontext', arguments([Name('context', Param(), lineno=414, col_offset=19)], None, None, []), [Expr(Str("Set this thread's context to context.", lineno=415, col_offset=8), lineno=415, col_offset=8), If(Compare(Name('context', Load(), lineno=416, col_offset=11), [In()], [Tuple([Name('DefaultContext', Load(), lineno=416, col_offset=23), Name('BasicContext', Load(), lineno=416, col_offset=39), Name('ExtendedContext', Load(), lineno=416, col_offset=53)], Load(), lineno=416, col_offset=23)], lineno=416, col_offset=11), [Assign([Name('context', Store(), lineno=417, col_offset=12)], Call(Attribute(Name('context', Load(), lineno=417, col_offset=22), 'copy', Load(), lineno=417, col_offset=22), [], [], None, None, lineno=417, col_offset=22), lineno=417, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=418, col_offset=12), 'clear_flags', Load(), lineno=418, col_offset=12), [], [], None, None, lineno=418, col_offset=12), lineno=418, col_offset=12)], [], lineno=416, col_offset=8), Assign([Attribute(Call(Attribute(Name('threading', Load(), lineno=419, col_offset=8), 'currentThread', Load(), lineno=419, col_offset=8), [], [], None, None, lineno=419, col_offset=8), '__decimal_context__', Store(), lineno=419, col_offset=8)], Name('context', Load(), lineno=419, col_offset=56), lineno=419, col_offset=8)], [], lineno=414, col_offset=4), FunctionDef('getcontext', arguments([], None, None, []), [Expr(Str("Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        ", lineno=427, col_offset=-1), lineno=427, col_offset=-1), TryExcept([Return(Attribute(Call(Attribute(Name('threading', Load(), lineno=429, col_offset=19), 'currentThread', Load(), lineno=429, col_offset=19), [], [], None, None, lineno=429, col_offset=19), '__decimal_context__', Load(), lineno=429, col_offset=19), lineno=429, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=430, col_offset=15), None, [Assign([Name('context', Store(), lineno=431, col_offset=12)], Call(Name('Context', Load(), lineno=431, col_offset=22), [], [], None, None, lineno=431, col_offset=22), lineno=431, col_offset=12), Assign([Attribute(Call(Attribute(Name('threading', Load(), lineno=432, col_offset=12), 'currentThread', Load(), lineno=432, col_offset=12), [], [], None, None, lineno=432, col_offset=12), '__decimal_context__', Store(), lineno=432, col_offset=12)], Name('context', Load(), lineno=432, col_offset=60), lineno=432, col_offset=12), Return(Name('context', Load(), lineno=433, col_offset=19), lineno=433, col_offset=12)], lineno=430, col_offset=8)], [], lineno=428, col_offset=8)], [], lineno=421, col_offset=4)], lineno=407, col_offset=0)], [Assign([Name('local', Store(), lineno=437, col_offset=4)], Call(Attribute(Name('threading', Load(), lineno=437, col_offset=12), 'local', Load(), lineno=437, col_offset=12), [], [], None, None, lineno=437, col_offset=12), lineno=437, col_offset=4), If(Call(Name('hasattr', Load(), lineno=438, col_offset=7), [Name('local', Load(), lineno=438, col_offset=15), Str('__decimal_context__', lineno=438, col_offset=22)], [], None, None, lineno=438, col_offset=7), [Delete([Attribute(Name('local', Load(), lineno=439, col_offset=12), '__decimal_context__', Del(), lineno=439, col_offset=12)], lineno=439, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('getcontext', arguments([Name('_local', Param(), lineno=441, col_offset=19)], None, None, [Name('local', Load(), lineno=441, col_offset=26)]), [Expr(Str("Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        ", lineno=447, col_offset=-1), lineno=447, col_offset=-1), TryExcept([Return(Attribute(Name('_local', Load(), lineno=449, col_offset=19), '__decimal_context__', Load(), lineno=449, col_offset=19), lineno=449, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=450, col_offset=15), None, [Assign([Name('context', Store(), lineno=451, col_offset=12)], Call(Name('Context', Load(), lineno=451, col_offset=22), [], [], None, None, lineno=451, col_offset=22), lineno=451, col_offset=12), Assign([Attribute(Name('_local', Load(), lineno=452, col_offset=12), '__decimal_context__', Store(), lineno=452, col_offset=12)], Name('context', Load(), lineno=452, col_offset=41), lineno=452, col_offset=12), Return(Name('context', Load(), lineno=453, col_offset=19), lineno=453, col_offset=12)], lineno=450, col_offset=8)], [], lineno=448, col_offset=8)], [], lineno=441, col_offset=4), FunctionDef('setcontext', arguments([Name('context', Param(), lineno=455, col_offset=19), Name('_local', Param(), lineno=455, col_offset=28)], None, None, [Name('local', Load(), lineno=455, col_offset=35)]), [Expr(Str("Set this thread's context to context.", lineno=456, col_offset=8), lineno=456, col_offset=8), If(Compare(Name('context', Load(), lineno=457, col_offset=11), [In()], [Tuple([Name('DefaultContext', Load(), lineno=457, col_offset=23), Name('BasicContext', Load(), lineno=457, col_offset=39), Name('ExtendedContext', Load(), lineno=457, col_offset=53)], Load(), lineno=457, col_offset=23)], lineno=457, col_offset=11), [Assign([Name('context', Store(), lineno=458, col_offset=12)], Call(Attribute(Name('context', Load(), lineno=458, col_offset=22), 'copy', Load(), lineno=458, col_offset=22), [], [], None, None, lineno=458, col_offset=22), lineno=458, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=459, col_offset=12), 'clear_flags', Load(), lineno=459, col_offset=12), [], [], None, None, lineno=459, col_offset=12), lineno=459, col_offset=12)], [], lineno=457, col_offset=8), Assign([Attribute(Name('_local', Load(), lineno=460, col_offset=8), '__decimal_context__', Store(), lineno=460, col_offset=8)], Name('context', Load(), lineno=460, col_offset=37), lineno=460, col_offset=8)], [], lineno=455, col_offset=4), Delete([Name('threading', Del(), lineno=462, col_offset=8), Name('local', Del(), lineno=462, col_offset=19)], lineno=462, col_offset=4)], lineno=404, col_offset=0), FunctionDef('localcontext', arguments([Name('ctx', Param(), lineno=464, col_offset=17)], None, None, [Name('None', Load(), lineno=464, col_offset=21)]), [Expr(Str('Return a context manager for a copy of the supplied context\n\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n                 # Rest of sin calculation algorithm\n                 # uses a precision 2 greater than normal\n             return +s  # Convert result to normal precision\n\n         def sin(x):\n             with localcontext(ExtendedContext):\n                 # Rest of sin calculation algorithm\n                 # uses the Extended Context from the\n                 # General Decimal Arithmetic Specification\n             return +s  # Convert result to normal context\n\n    >>> setcontext(DefaultContext)\n    >>> print getcontext().prec\n    28\n    >>> with localcontext():\n    ...     ctx = getcontext()\n    ...     ctx.prec += 2\n    ...     print ctx.prec\n    ...\n    30\n    >>> with localcontext(ExtendedContext):\n    ...     print getcontext().prec\n    ...\n    9\n    >>> print getcontext().prec\n    28\n    ', lineno=499, col_offset=-1), lineno=499, col_offset=-1), If(Compare(Name('ctx', Load(), lineno=500, col_offset=7), [Is()], [Name('None', Load(), lineno=500, col_offset=14)], lineno=500, col_offset=7), [Assign([Name('ctx', Store(), lineno=500, col_offset=20)], Call(Name('getcontext', Load(), lineno=500, col_offset=26), [], [], None, None, lineno=500, col_offset=26), lineno=500, col_offset=20)], [], lineno=500, col_offset=4), Return(Call(Name('_ContextManager', Load(), lineno=501, col_offset=11), [Name('ctx', Load(), lineno=501, col_offset=27)], [], None, None, lineno=501, col_offset=11), lineno=501, col_offset=4)], [], lineno=464, col_offset=0), ClassDef('Decimal', [Name('object', Load(), lineno=506, col_offset=14)], [Expr(Str('Floating point class for decimal arithmetic.', lineno=507, col_offset=4), lineno=507, col_offset=4), Assign([Name('__slots__', Store(), lineno=509, col_offset=4)], Tuple([Str('_exp', lineno=509, col_offset=17), Str('_int', lineno=509, col_offset=24), Str('_sign', lineno=509, col_offset=31), Str('_is_special', lineno=509, col_offset=40)], Load(), lineno=509, col_offset=17), lineno=509, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=515, col_offset=16), Name('value', Param(), lineno=515, col_offset=21), Name('context', Param(), lineno=515, col_offset=32)], None, None, [Str('0', lineno=515, col_offset=27), Name('None', Load(), lineno=515, col_offset=40)]), [Expr(Str("Create a decimal point instance.\n\n        >>> Decimal('3.14')              # string input\n        Decimal('3.14')\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal('3.14')\n        >>> Decimal(314)                 # int or long\n        Decimal('314')\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal('314')\n        >>> Decimal('  3.14  \\n')        # leading and trailing whitespace okay\n        Decimal('3.14')\n        ", lineno=528, col_offset=-1), lineno=528, col_offset=-1), Assign([Name('self', Store(), lineno=538, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=538, col_offset=15), '__new__', Load(), lineno=538, col_offset=15), [Name('cls', Load(), lineno=538, col_offset=30)], [], None, None, lineno=538, col_offset=15), lineno=538, col_offset=8), If(Call(Name('isinstance', Load(), lineno=542, col_offset=11), [Name('value', Load(), lineno=542, col_offset=22), Name('basestring', Load(), lineno=542, col_offset=29)], [], None, None, lineno=542, col_offset=11), [Assign([Name('m', Store(), lineno=543, col_offset=12)], Call(Name('_parser', Load(), lineno=543, col_offset=16), [Call(Attribute(Name('value', Load(), lineno=543, col_offset=24), 'strip', Load(), lineno=543, col_offset=24), [], [], None, None, lineno=543, col_offset=24)], [], None, None, lineno=543, col_offset=16), lineno=543, col_offset=12), If(Compare(Name('m', Load(), lineno=544, col_offset=15), [Is()], [Name('None', Load(), lineno=544, col_offset=20)], lineno=544, col_offset=15), [If(Compare(Name('context', Load(), lineno=545, col_offset=19), [Is()], [Name('None', Load(), lineno=545, col_offset=30)], lineno=545, col_offset=19), [Assign([Name('context', Store(), lineno=546, col_offset=20)], Call(Name('getcontext', Load(), lineno=546, col_offset=30), [], [], None, None, lineno=546, col_offset=30), lineno=546, col_offset=20)], [], lineno=545, col_offset=16), Return(Call(Attribute(Name('context', Load(), lineno=547, col_offset=23), '_raise_error', Load(), lineno=547, col_offset=23), [Name('ConversionSyntax', Load(), lineno=547, col_offset=44), BinOp(Str('Invalid literal for Decimal: %r', lineno=548, col_offset=32), Mod(), Name('value', Load(), lineno=548, col_offset=68), lineno=548, col_offset=32)], [], None, None, lineno=547, col_offset=23), lineno=547, col_offset=16)], [], lineno=544, col_offset=12), If(Compare(Call(Attribute(Name('m', Load(), lineno=550, col_offset=15), 'group', Load(), lineno=550, col_offset=15), [Str('sign', lineno=550, col_offset=23)], [], None, None, lineno=550, col_offset=15), [Eq()], [Str('-', lineno=550, col_offset=34)], lineno=550, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=551, col_offset=16), '_sign', Store(), lineno=551, col_offset=16)], Num(1, lineno=551, col_offset=29), lineno=551, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=553, col_offset=16), '_sign', Store(), lineno=553, col_offset=16)], Num(0, lineno=553, col_offset=29), lineno=553, col_offset=16)], lineno=550, col_offset=12), Assign([Name('intpart', Store(), lineno=554, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=554, col_offset=22), 'group', Load(), lineno=554, col_offset=22), [Str('int', lineno=554, col_offset=30)], [], None, None, lineno=554, col_offset=22), lineno=554, col_offset=12), If(Compare(Name('intpart', Load(), lineno=555, col_offset=15), [IsNot()], [Name('None', Load(), lineno=555, col_offset=30)], lineno=555, col_offset=15), [Assign([Name('fracpart', Store(), lineno=557, col_offset=16)], BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=557, col_offset=27), 'group', Load(), lineno=557, col_offset=27), [Str('frac', lineno=557, col_offset=35)], [], None, None, lineno=557, col_offset=27), Str('', lineno=557, col_offset=46)], lineno=557, col_offset=27), lineno=557, col_offset=16), Assign([Name('exp', Store(), lineno=558, col_offset=16)], Call(Name('int', Load(), lineno=558, col_offset=22), [BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=558, col_offset=26), 'group', Load(), lineno=558, col_offset=26), [Str('exp', lineno=558, col_offset=34)], [], None, None, lineno=558, col_offset=26), Str('0', lineno=558, col_offset=44)], lineno=558, col_offset=26)], [], None, None, lineno=558, col_offset=22), lineno=558, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=559, col_offset=16), '_int', Store(), lineno=559, col_offset=16)], Call(Name('str', Load(), lineno=559, col_offset=28), [Call(Name('int', Load(), lineno=559, col_offset=32), [BinOp(Name('intpart', Load(), lineno=559, col_offset=36), Add(), Name('fracpart', Load(), lineno=559, col_offset=44), lineno=559, col_offset=36)], [], None, None, lineno=559, col_offset=32)], [], None, None, lineno=559, col_offset=28), lineno=559, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=560, col_offset=16), '_exp', Store(), lineno=560, col_offset=16)], BinOp(Name('exp', Load(), lineno=560, col_offset=28), Sub(), Call(Name('len', Load(), lineno=560, col_offset=34), [Name('fracpart', Load(), lineno=560, col_offset=38)], [], None, None, lineno=560, col_offset=34), lineno=560, col_offset=28), lineno=560, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=561, col_offset=16), '_is_special', Store(), lineno=561, col_offset=16)], Name('False', Load(), lineno=561, col_offset=35), lineno=561, col_offset=16)], [Assign([Name('diag', Store(), lineno=563, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=563, col_offset=23), 'group', Load(), lineno=563, col_offset=23), [Str('diag', lineno=563, col_offset=31)], [], None, None, lineno=563, col_offset=23), lineno=563, col_offset=16), If(Compare(Name('diag', Load(), lineno=564, col_offset=19), [IsNot()], [Name('None', Load(), lineno=564, col_offset=31)], lineno=564, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=566, col_offset=20), '_int', Store(), lineno=566, col_offset=20)], Call(Attribute(Call(Name('str', Load(), lineno=566, col_offset=32), [Call(Name('int', Load(), lineno=566, col_offset=36), [BoolOp(Or(), [Name('diag', Load(), lineno=566, col_offset=40), Str('0', lineno=566, col_offset=48)], lineno=566, col_offset=40)], [], None, None, lineno=566, col_offset=36)], [], None, None, lineno=566, col_offset=32), 'lstrip', Load(), lineno=566, col_offset=32), [Str('0', lineno=566, col_offset=61)], [], None, None, lineno=566, col_offset=32), lineno=566, col_offset=20), If(Call(Attribute(Name('m', Load(), lineno=567, col_offset=23), 'group', Load(), lineno=567, col_offset=23), [Str('signal', lineno=567, col_offset=31)], [], None, None, lineno=567, col_offset=23), [Assign([Attribute(Name('self', Load(), lineno=568, col_offset=24), '_exp', Store(), lineno=568, col_offset=24)], Str('N', lineno=568, col_offset=36), lineno=568, col_offset=24)], [Assign([Attribute(Name('self', Load(), lineno=570, col_offset=24), '_exp', Store(), lineno=570, col_offset=24)], Str('n', lineno=570, col_offset=36), lineno=570, col_offset=24)], lineno=567, col_offset=20)], [Assign([Attribute(Name('self', Load(), lineno=573, col_offset=20), '_int', Store(), lineno=573, col_offset=20)], Str('0', lineno=573, col_offset=32), lineno=573, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=574, col_offset=20), '_exp', Store(), lineno=574, col_offset=20)], Str('F', lineno=574, col_offset=32), lineno=574, col_offset=20)], lineno=564, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=575, col_offset=16), '_is_special', Store(), lineno=575, col_offset=16)], Name('True', Load(), lineno=575, col_offset=35), lineno=575, col_offset=16)], lineno=555, col_offset=12), Return(Name('self', Load(), lineno=576, col_offset=19), lineno=576, col_offset=12)], [], lineno=542, col_offset=8), If(Call(Name('isinstance', Load(), lineno=579, col_offset=11), [Name('value', Load(), lineno=579, col_offset=22), Tuple([Name('int', Load(), lineno=579, col_offset=30), Name('long', Load(), lineno=579, col_offset=34)], Load(), lineno=579, col_offset=30)], [], None, None, lineno=579, col_offset=11), [If(Compare(Name('value', Load(), lineno=580, col_offset=15), [GtE()], [Num(0, lineno=580, col_offset=24)], lineno=580, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=581, col_offset=16), '_sign', Store(), lineno=581, col_offset=16)], Num(0, lineno=581, col_offset=29), lineno=581, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=583, col_offset=16), '_sign', Store(), lineno=583, col_offset=16)], Num(1, lineno=583, col_offset=29), lineno=583, col_offset=16)], lineno=580, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=584, col_offset=12), '_exp', Store(), lineno=584, col_offset=12)], Num(0, lineno=584, col_offset=24), lineno=584, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=585, col_offset=12), '_int', Store(), lineno=585, col_offset=12)], Call(Name('str', Load(), lineno=585, col_offset=24), [Call(Name('abs', Load(), lineno=585, col_offset=28), [Name('value', Load(), lineno=585, col_offset=32)], [], None, None, lineno=585, col_offset=28)], [], None, None, lineno=585, col_offset=24), lineno=585, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=586, col_offset=12), '_is_special', Store(), lineno=586, col_offset=12)], Name('False', Load(), lineno=586, col_offset=31), lineno=586, col_offset=12), Return(Name('self', Load(), lineno=587, col_offset=19), lineno=587, col_offset=12)], [], lineno=579, col_offset=8), If(Call(Name('isinstance', Load(), lineno=590, col_offset=11), [Name('value', Load(), lineno=590, col_offset=22), Name('Decimal', Load(), lineno=590, col_offset=29)], [], None, None, lineno=590, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=591, col_offset=12), '_exp', Store(), lineno=591, col_offset=12)], Attribute(Name('value', Load(), lineno=591, col_offset=25), '_exp', Load(), lineno=591, col_offset=25), lineno=591, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=592, col_offset=12), '_sign', Store(), lineno=592, col_offset=12)], Attribute(Name('value', Load(), lineno=592, col_offset=25), '_sign', Load(), lineno=592, col_offset=25), lineno=592, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=593, col_offset=12), '_int', Store(), lineno=593, col_offset=12)], Attribute(Name('value', Load(), lineno=593, col_offset=25), '_int', Load(), lineno=593, col_offset=25), lineno=593, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=594, col_offset=12), '_is_special', Store(), lineno=594, col_offset=12)], Attribute(Name('value', Load(), lineno=594, col_offset=32), '_is_special', Load(), lineno=594, col_offset=32), lineno=594, col_offset=12), Return(Name('self', Load(), lineno=595, col_offset=19), lineno=595, col_offset=12)], [], lineno=590, col_offset=8), If(Call(Name('isinstance', Load(), lineno=598, col_offset=11), [Name('value', Load(), lineno=598, col_offset=22), Name('_WorkRep', Load(), lineno=598, col_offset=29)], [], None, None, lineno=598, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=599, col_offset=12), '_sign', Store(), lineno=599, col_offset=12)], Attribute(Name('value', Load(), lineno=599, col_offset=25), 'sign', Load(), lineno=599, col_offset=25), lineno=599, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=600, col_offset=12), '_int', Store(), lineno=600, col_offset=12)], Call(Name('str', Load(), lineno=600, col_offset=24), [Attribute(Name('value', Load(), lineno=600, col_offset=28), 'int', Load(), lineno=600, col_offset=28)], [], None, None, lineno=600, col_offset=24), lineno=600, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=601, col_offset=12), '_exp', Store(), lineno=601, col_offset=12)], Call(Name('int', Load(), lineno=601, col_offset=24), [Attribute(Name('value', Load(), lineno=601, col_offset=28), 'exp', Load(), lineno=601, col_offset=28)], [], None, None, lineno=601, col_offset=24), lineno=601, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=602, col_offset=12), '_is_special', Store(), lineno=602, col_offset=12)], Name('False', Load(), lineno=602, col_offset=31), lineno=602, col_offset=12), Return(Name('self', Load(), lineno=603, col_offset=19), lineno=603, col_offset=12)], [], lineno=598, col_offset=8), If(Call(Name('isinstance', Load(), lineno=606, col_offset=11), [Name('value', Load(), lineno=606, col_offset=22), Tuple([Name('list', Load(), lineno=606, col_offset=30), Name('tuple', Load(), lineno=606, col_offset=35)], Load(), lineno=606, col_offset=30)], [], None, None, lineno=606, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=607, col_offset=15), [Name('value', Load(), lineno=607, col_offset=19)], [], None, None, lineno=607, col_offset=15), [NotEq()], [Num(3, lineno=607, col_offset=29)], lineno=607, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=608, col_offset=22), [Str('Invalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.', lineno=608, col_offset=33)], [], None, None, lineno=608, col_offset=22), None, None, lineno=608, col_offset=16)], [], lineno=607, col_offset=12), If(UnaryOp(Not(), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=612, col_offset=20), [Subscript(Name('value', Load(), lineno=612, col_offset=31), Index(Num(0, lineno=612, col_offset=37)), Load(), lineno=612, col_offset=31), Tuple([Name('int', Load(), lineno=612, col_offset=42), Name('long', Load(), lineno=612, col_offset=47)], Load(), lineno=612, col_offset=42)], [], None, None, lineno=612, col_offset=20), Compare(Subscript(Name('value', Load(), lineno=612, col_offset=58), Index(Num(0, lineno=612, col_offset=64)), Load(), lineno=612, col_offset=58), [In()], [Tuple([Num(0, lineno=612, col_offset=71), Num(1, lineno=612, col_offset=73)], Load(), lineno=612, col_offset=71)], lineno=612, col_offset=58)], lineno=612, col_offset=20), lineno=612, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=613, col_offset=22), [Str('Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number.', lineno=613, col_offset=33)], [], None, None, lineno=613, col_offset=22), None, None, lineno=613, col_offset=16)], [], lineno=612, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=616, col_offset=12), '_sign', Store(), lineno=616, col_offset=12)], Subscript(Name('value', Load(), lineno=616, col_offset=25), Index(Num(0, lineno=616, col_offset=31)), Load(), lineno=616, col_offset=25), lineno=616, col_offset=12), If(Compare(Subscript(Name('value', Load(), lineno=617, col_offset=15), Index(Num(2, lineno=617, col_offset=21)), Load(), lineno=617, col_offset=15), [Eq()], [Str('F', lineno=617, col_offset=27)], lineno=617, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=619, col_offset=16), '_int', Store(), lineno=619, col_offset=16)], Str('0', lineno=619, col_offset=28), lineno=619, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=620, col_offset=16), '_exp', Store(), lineno=620, col_offset=16)], Subscript(Name('value', Load(), lineno=620, col_offset=28), Index(Num(2, lineno=620, col_offset=34)), Load(), lineno=620, col_offset=28), lineno=620, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=621, col_offset=16), '_is_special', Store(), lineno=621, col_offset=16)], Name('True', Load(), lineno=621, col_offset=35), lineno=621, col_offset=16)], [Assign([Name('digits', Store(), lineno=624, col_offset=16)], List([], Load(), lineno=624, col_offset=25), lineno=624, col_offset=16), For(Name('digit', Store(), lineno=625, col_offset=20), Subscript(Name('value', Load(), lineno=625, col_offset=29), Index(Num(1, lineno=625, col_offset=35)), Load(), lineno=625, col_offset=29), [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=626, col_offset=23), [Name('digit', Load(), lineno=626, col_offset=34), Tuple([Name('int', Load(), lineno=626, col_offset=42), Name('long', Load(), lineno=626, col_offset=47)], Load(), lineno=626, col_offset=42)], [], None, None, lineno=626, col_offset=23), Compare(Num(0, lineno=626, col_offset=58), [LtE(), LtE()], [Name('digit', Load(), lineno=626, col_offset=63), Num(9, lineno=626, col_offset=72)], lineno=626, col_offset=58)], lineno=626, col_offset=23), [If(BoolOp(Or(), [Name('digits', Load(), lineno=628, col_offset=27), Compare(Name('digit', Load(), lineno=628, col_offset=37), [NotEq()], [Num(0, lineno=628, col_offset=46)], lineno=628, col_offset=37)], lineno=628, col_offset=27), [Expr(Call(Attribute(Name('digits', Load(), lineno=629, col_offset=28), 'append', Load(), lineno=629, col_offset=28), [Name('digit', Load(), lineno=629, col_offset=42)], [], None, None, lineno=629, col_offset=28), lineno=629, col_offset=28)], [], lineno=628, col_offset=24)], [Raise(Call(Name('ValueError', Load(), lineno=631, col_offset=30), [Str('The second value in the tuple must be composed of integers in the range 0 through 9.', lineno=631, col_offset=41)], [], None, None, lineno=631, col_offset=30), None, None, lineno=631, col_offset=24)], lineno=626, col_offset=20)], [], lineno=625, col_offset=16), If(Compare(Subscript(Name('value', Load(), lineno=634, col_offset=19), Index(Num(2, lineno=634, col_offset=25)), Load(), lineno=634, col_offset=19), [In()], [Tuple([Str('n', lineno=634, col_offset=32), Str('N', lineno=634, col_offset=37)], Load(), lineno=634, col_offset=32)], lineno=634, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=636, col_offset=20), '_int', Store(), lineno=636, col_offset=20)], Call(Attribute(Str('', lineno=636, col_offset=32), 'join', Load(), lineno=636, col_offset=32), [Call(Name('map', Load(), lineno=636, col_offset=40), [Name('str', Load(), lineno=636, col_offset=44), Name('digits', Load(), lineno=636, col_offset=49)], [], None, None, lineno=636, col_offset=40)], [], None, None, lineno=636, col_offset=32), lineno=636, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=637, col_offset=20), '_exp', Store(), lineno=637, col_offset=20)], Subscript(Name('value', Load(), lineno=637, col_offset=32), Index(Num(2, lineno=637, col_offset=38)), Load(), lineno=637, col_offset=32), lineno=637, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=638, col_offset=20), '_is_special', Store(), lineno=638, col_offset=20)], Name('True', Load(), lineno=638, col_offset=39), lineno=638, col_offset=20)], [If(Call(Name('isinstance', Load(), lineno=639, col_offset=21), [Subscript(Name('value', Load(), lineno=639, col_offset=32), Index(Num(2, lineno=639, col_offset=38)), Load(), lineno=639, col_offset=32), Tuple([Name('int', Load(), lineno=639, col_offset=43), Name('long', Load(), lineno=639, col_offset=48)], Load(), lineno=639, col_offset=43)], [], None, None, lineno=639, col_offset=21), [Assign([Attribute(Name('self', Load(), lineno=641, col_offset=20), '_int', Store(), lineno=641, col_offset=20)], Call(Attribute(Str('', lineno=641, col_offset=32), 'join', Load(), lineno=641, col_offset=32), [Call(Name('map', Load(), lineno=641, col_offset=40), [Name('str', Load(), lineno=641, col_offset=44), BoolOp(Or(), [Name('digits', Load(), lineno=641, col_offset=49), List([Num(0, lineno=641, col_offset=60)], Load(), lineno=641, col_offset=59)], lineno=641, col_offset=49)], [], None, None, lineno=641, col_offset=40)], [], None, None, lineno=641, col_offset=32), lineno=641, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=642, col_offset=20), '_exp', Store(), lineno=642, col_offset=20)], Subscript(Name('value', Load(), lineno=642, col_offset=32), Index(Num(2, lineno=642, col_offset=38)), Load(), lineno=642, col_offset=32), lineno=642, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=643, col_offset=20), '_is_special', Store(), lineno=643, col_offset=20)], Name('False', Load(), lineno=643, col_offset=39), lineno=643, col_offset=20)], [Raise(Call(Name('ValueError', Load(), lineno=645, col_offset=26), [Str("The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'.", lineno=645, col_offset=37)], [], None, None, lineno=645, col_offset=26), None, None, lineno=645, col_offset=20)], lineno=639, col_offset=21)], lineno=634, col_offset=16)], lineno=617, col_offset=12), Return(Name('self', Load(), lineno=648, col_offset=19), lineno=648, col_offset=12)], [], lineno=606, col_offset=8), If(Call(Name('isinstance', Load(), lineno=650, col_offset=11), [Name('value', Load(), lineno=650, col_offset=22), Name('float', Load(), lineno=650, col_offset=29)], [], None, None, lineno=650, col_offset=11), [Assign([Name('value', Store(), lineno=651, col_offset=12)], Call(Attribute(Name('Decimal', Load(), lineno=651, col_offset=20), 'from_float', Load(), lineno=651, col_offset=20), [Name('value', Load(), lineno=651, col_offset=39)], [], None, None, lineno=651, col_offset=20), lineno=651, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=652, col_offset=12), '_exp', Store(), lineno=652, col_offset=12)], Attribute(Name('value', Load(), lineno=652, col_offset=25), '_exp', Load(), lineno=652, col_offset=25), lineno=652, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=653, col_offset=12), '_sign', Store(), lineno=653, col_offset=12)], Attribute(Name('value', Load(), lineno=653, col_offset=25), '_sign', Load(), lineno=653, col_offset=25), lineno=653, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=654, col_offset=12), '_int', Store(), lineno=654, col_offset=12)], Attribute(Name('value', Load(), lineno=654, col_offset=25), '_int', Load(), lineno=654, col_offset=25), lineno=654, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=655, col_offset=12), '_is_special', Store(), lineno=655, col_offset=12)], Attribute(Name('value', Load(), lineno=655, col_offset=32), '_is_special', Load(), lineno=655, col_offset=32), lineno=655, col_offset=12), Return(Name('self', Load(), lineno=656, col_offset=19), lineno=656, col_offset=12)], [], lineno=650, col_offset=8), Raise(Call(Name('TypeError', Load(), lineno=658, col_offset=14), [BinOp(Str('Cannot convert %r to Decimal', lineno=658, col_offset=24), Mod(), Name('value', Load(), lineno=658, col_offset=57), lineno=658, col_offset=24)], [], None, None, lineno=658, col_offset=14), None, None, lineno=658, col_offset=8)], [], lineno=515, col_offset=4), FunctionDef('from_float', arguments([Name('cls', Param(), lineno=662, col_offset=19), Name('f', Param(), lineno=662, col_offset=24)], None, None, []), [Expr(Str("Converts a float to a decimal number, exactly.\n\n        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').\n        Since 0.1 is not exactly representable in binary floating point, the\n        value is stored as the nearest representable value which is\n        0x1.999999999999ap-4.  The exact equivalent of the value in decimal\n        is 0.1000000000000000055511151231257827021181583404541015625.\n\n        >>> Decimal.from_float(0.1)\n        Decimal('0.1000000000000000055511151231257827021181583404541015625')\n        >>> Decimal.from_float(float('nan'))\n        Decimal('NaN')\n        >>> Decimal.from_float(float('inf'))\n        Decimal('Infinity')\n        >>> Decimal.from_float(-float('inf'))\n        Decimal('-Infinity')\n        >>> Decimal.from_float(-0.0)\n        Decimal('-0')\n\n        ", lineno=682, col_offset=-1), lineno=682, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=683, col_offset=11), [Name('f', Load(), lineno=683, col_offset=22), Tuple([Name('int', Load(), lineno=683, col_offset=26), Name('long', Load(), lineno=683, col_offset=31)], Load(), lineno=683, col_offset=26)], [], None, None, lineno=683, col_offset=11), [Return(Call(Name('cls', Load(), lineno=684, col_offset=19), [Name('f', Load(), lineno=684, col_offset=23)], [], None, None, lineno=684, col_offset=19), lineno=684, col_offset=12)], [], lineno=683, col_offset=8), If(BoolOp(Or(), [Call(Attribute(Name('_math', Load(), lineno=685, col_offset=11), 'isinf', Load(), lineno=685, col_offset=11), [Name('f', Load(), lineno=685, col_offset=23)], [], None, None, lineno=685, col_offset=11), Call(Attribute(Name('_math', Load(), lineno=685, col_offset=29), 'isnan', Load(), lineno=685, col_offset=29), [Name('f', Load(), lineno=685, col_offset=41)], [], None, None, lineno=685, col_offset=29)], lineno=685, col_offset=11), [Return(Call(Name('cls', Load(), lineno=686, col_offset=19), [Call(Name('repr', Load(), lineno=686, col_offset=23), [Name('f', Load(), lineno=686, col_offset=28)], [], None, None, lineno=686, col_offset=23)], [], None, None, lineno=686, col_offset=19), lineno=686, col_offset=12)], [], lineno=685, col_offset=8), If(Compare(Call(Attribute(Name('_math', Load(), lineno=687, col_offset=11), 'copysign', Load(), lineno=687, col_offset=11), [Num(1.0, lineno=687, col_offset=26), Name('f', Load(), lineno=687, col_offset=31)], [], None, None, lineno=687, col_offset=11), [Eq()], [Num(1.0, lineno=687, col_offset=37)], lineno=687, col_offset=11), [Assign([Name('sign', Store(), lineno=688, col_offset=12)], Num(0, lineno=688, col_offset=19), lineno=688, col_offset=12)], [Assign([Name('sign', Store(), lineno=690, col_offset=12)], Num(1, lineno=690, col_offset=19), lineno=690, col_offset=12)], lineno=687, col_offset=8), Assign([Tuple([Name('n', Store(), lineno=691, col_offset=8), Name('d', Store(), lineno=691, col_offset=11)], Store(), lineno=691, col_offset=8)], Call(Attribute(Call(Name('abs', Load(), lineno=691, col_offset=15), [Name('f', Load(), lineno=691, col_offset=19)], [], None, None, lineno=691, col_offset=15), 'as_integer_ratio', Load(), lineno=691, col_offset=15), [], [], None, None, lineno=691, col_offset=15), lineno=691, col_offset=8), Assign([Name('k', Store(), lineno=692, col_offset=8)], BinOp(Call(Attribute(Name('d', Load(), lineno=692, col_offset=12), 'bit_length', Load(), lineno=692, col_offset=12), [], [], None, None, lineno=692, col_offset=12), Sub(), Num(1, lineno=692, col_offset=29), lineno=692, col_offset=12), lineno=692, col_offset=8), Assign([Name('result', Store(), lineno=693, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=693, col_offset=17), [Name('sign', Load(), lineno=693, col_offset=34), Call(Name('str', Load(), lineno=693, col_offset=40), [BinOp(Name('n', Load(), lineno=693, col_offset=44), Mult(), BinOp(Num(5, lineno=693, col_offset=46), Pow(), Name('k', Load(), lineno=693, col_offset=49), lineno=693, col_offset=46), lineno=693, col_offset=44)], [], None, None, lineno=693, col_offset=40), UnaryOp(USub(), Name('k', Load(), lineno=693, col_offset=54), lineno=693, col_offset=53)], [], None, None, lineno=693, col_offset=17), lineno=693, col_offset=8), If(Compare(Name('cls', Load(), lineno=694, col_offset=11), [Is()], [Name('Decimal', Load(), lineno=694, col_offset=18)], lineno=694, col_offset=11), [Return(Name('result', Load(), lineno=695, col_offset=19), lineno=695, col_offset=12)], [Return(Call(Name('cls', Load(), lineno=697, col_offset=19), [Name('result', Load(), lineno=697, col_offset=23)], [], None, None, lineno=697, col_offset=19), lineno=697, col_offset=12)], lineno=694, col_offset=8)], [], lineno=662, col_offset=4), Assign([Name('from_float', Store(), lineno=698, col_offset=4)], Call(Name('classmethod', Load(), lineno=698, col_offset=17), [Name('from_float', Load(), lineno=698, col_offset=29)], [], None, None, lineno=698, col_offset=17), lineno=698, col_offset=4), FunctionDef('_isnan', arguments([Name('self', Param(), lineno=700, col_offset=15)], None, None, []), [Expr(Str('Returns whether the number is not actually one.\n\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        ', lineno=706, col_offset=-1), lineno=706, col_offset=-1), If(Attribute(Name('self', Load(), lineno=707, col_offset=11), '_is_special', Load(), lineno=707, col_offset=11), [Assign([Name('exp', Store(), lineno=708, col_offset=12)], Attribute(Name('self', Load(), lineno=708, col_offset=18), '_exp', Load(), lineno=708, col_offset=18), lineno=708, col_offset=12), If(Compare(Name('exp', Load(), lineno=709, col_offset=15), [Eq()], [Str('n', lineno=709, col_offset=22)], lineno=709, col_offset=15), [Return(Num(1, lineno=710, col_offset=23), lineno=710, col_offset=16)], [If(Compare(Name('exp', Load(), lineno=711, col_offset=17), [Eq()], [Str('N', lineno=711, col_offset=24)], lineno=711, col_offset=17), [Return(Num(2, lineno=712, col_offset=23), lineno=712, col_offset=16)], [], lineno=711, col_offset=17)], lineno=709, col_offset=12)], [], lineno=707, col_offset=8), Return(Num(0, lineno=713, col_offset=15), lineno=713, col_offset=8)], [], lineno=700, col_offset=4), FunctionDef('_isinfinity', arguments([Name('self', Param(), lineno=715, col_offset=20)], None, None, []), [Expr(Str('Returns whether the number is infinite\n\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        ', lineno=721, col_offset=-1), lineno=721, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=722, col_offset=11), '_exp', Load(), lineno=722, col_offset=11), [Eq()], [Str('F', lineno=722, col_offset=24)], lineno=722, col_offset=11), [If(Attribute(Name('self', Load(), lineno=723, col_offset=15), '_sign', Load(), lineno=723, col_offset=15), [Return(Num(-1, lineno=724, col_offset=24), lineno=724, col_offset=16)], [], lineno=723, col_offset=12), Return(Num(1, lineno=725, col_offset=19), lineno=725, col_offset=12)], [], lineno=722, col_offset=8), Return(Num(0, lineno=726, col_offset=15), lineno=726, col_offset=8)], [], lineno=715, col_offset=4), FunctionDef('_check_nans', arguments([Name('self', Param(), lineno=728, col_offset=20), Name('other', Param(), lineno=728, col_offset=26), Name('context', Param(), lineno=728, col_offset=38)], None, None, [Name('None', Load(), lineno=728, col_offset=32), Name('None', Load(), lineno=728, col_offset=46)]), [Expr(Str('Returns whether the number is not actually one.\n\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n\n        Done before operations.\n        ', lineno=736, col_offset=-1), lineno=736, col_offset=-1), Assign([Name('self_is_nan', Store(), lineno=738, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=738, col_offset=22), '_isnan', Load(), lineno=738, col_offset=22), [], [], None, None, lineno=738, col_offset=22), lineno=738, col_offset=8), If(Compare(Name('other', Load(), lineno=739, col_offset=11), [Is()], [Name('None', Load(), lineno=739, col_offset=20)], lineno=739, col_offset=11), [Assign([Name('other_is_nan', Store(), lineno=740, col_offset=12)], Name('False', Load(), lineno=740, col_offset=27), lineno=740, col_offset=12)], [Assign([Name('other_is_nan', Store(), lineno=742, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=742, col_offset=27), '_isnan', Load(), lineno=742, col_offset=27), [], [], None, None, lineno=742, col_offset=27), lineno=742, col_offset=12)], lineno=739, col_offset=8), If(BoolOp(Or(), [Name('self_is_nan', Load(), lineno=744, col_offset=11), Name('other_is_nan', Load(), lineno=744, col_offset=26)], lineno=744, col_offset=11), [If(Compare(Name('context', Load(), lineno=745, col_offset=15), [Is()], [Name('None', Load(), lineno=745, col_offset=26)], lineno=745, col_offset=15), [Assign([Name('context', Store(), lineno=746, col_offset=16)], Call(Name('getcontext', Load(), lineno=746, col_offset=26), [], [], None, None, lineno=746, col_offset=26), lineno=746, col_offset=16)], [], lineno=745, col_offset=12), If(Compare(Name('self_is_nan', Load(), lineno=748, col_offset=15), [Eq()], [Num(2, lineno=748, col_offset=30)], lineno=748, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=749, col_offset=23), '_raise_error', Load(), lineno=749, col_offset=23), [Name('InvalidOperation', Load(), lineno=749, col_offset=44), Str('sNaN', lineno=749, col_offset=62), Name('self', Load(), lineno=750, col_offset=40)], [], None, None, lineno=749, col_offset=23), lineno=749, col_offset=16)], [], lineno=748, col_offset=12), If(Compare(Name('other_is_nan', Load(), lineno=751, col_offset=15), [Eq()], [Num(2, lineno=751, col_offset=31)], lineno=751, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=752, col_offset=23), '_raise_error', Load(), lineno=752, col_offset=23), [Name('InvalidOperation', Load(), lineno=752, col_offset=44), Str('sNaN', lineno=752, col_offset=62), Name('other', Load(), lineno=753, col_offset=40)], [], None, None, lineno=752, col_offset=23), lineno=752, col_offset=16)], [], lineno=751, col_offset=12), If(Name('self_is_nan', Load(), lineno=754, col_offset=15), [Return(Call(Attribute(Name('self', Load(), lineno=755, col_offset=23), '_fix_nan', Load(), lineno=755, col_offset=23), [Name('context', Load(), lineno=755, col_offset=37)], [], None, None, lineno=755, col_offset=23), lineno=755, col_offset=16)], [], lineno=754, col_offset=12), Return(Call(Attribute(Name('other', Load(), lineno=757, col_offset=19), '_fix_nan', Load(), lineno=757, col_offset=19), [Name('context', Load(), lineno=757, col_offset=34)], [], None, None, lineno=757, col_offset=19), lineno=757, col_offset=12)], [], lineno=744, col_offset=8), Return(Num(0, lineno=758, col_offset=15), lineno=758, col_offset=8)], [], lineno=728, col_offset=4), FunctionDef('_compare_check_nans', arguments([Name('self', Param(), lineno=760, col_offset=28), Name('other', Param(), lineno=760, col_offset=34), Name('context', Param(), lineno=760, col_offset=41)], None, None, []), [Expr(Str('Version of _check_nans used for the signaling comparisons\n        compare_signal, __le__, __lt__, __ge__, __gt__.\n\n        Signal InvalidOperation if either self or other is a (quiet\n        or signaling) NaN.  Signaling NaNs take precedence over quiet\n        NaNs.\n\n        Return 0 if neither operand is a NaN.\n\n        ', lineno=770, col_offset=-1), lineno=770, col_offset=-1), If(Compare(Name('context', Load(), lineno=771, col_offset=11), [Is()], [Name('None', Load(), lineno=771, col_offset=22)], lineno=771, col_offset=11), [Assign([Name('context', Store(), lineno=772, col_offset=12)], Call(Name('getcontext', Load(), lineno=772, col_offset=22), [], [], None, None, lineno=772, col_offset=22), lineno=772, col_offset=12)], [], lineno=771, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=774, col_offset=11), '_is_special', Load(), lineno=774, col_offset=11), Attribute(Name('other', Load(), lineno=774, col_offset=31), '_is_special', Load(), lineno=774, col_offset=31)], lineno=774, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=775, col_offset=15), 'is_snan', Load(), lineno=775, col_offset=15), [], [], None, None, lineno=775, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=776, col_offset=23), '_raise_error', Load(), lineno=776, col_offset=23), [Name('InvalidOperation', Load(), lineno=776, col_offset=44), Str('comparison involving sNaN', lineno=777, col_offset=44), Name('self', Load(), lineno=778, col_offset=44)], [], None, None, lineno=776, col_offset=23), lineno=776, col_offset=16)], [If(Call(Attribute(Name('other', Load(), lineno=779, col_offset=17), 'is_snan', Load(), lineno=779, col_offset=17), [], [], None, None, lineno=779, col_offset=17), [Return(Call(Attribute(Name('context', Load(), lineno=780, col_offset=23), '_raise_error', Load(), lineno=780, col_offset=23), [Name('InvalidOperation', Load(), lineno=780, col_offset=44), Str('comparison involving sNaN', lineno=781, col_offset=44), Name('other', Load(), lineno=782, col_offset=44)], [], None, None, lineno=780, col_offset=23), lineno=780, col_offset=16)], [If(Call(Attribute(Name('self', Load(), lineno=783, col_offset=17), 'is_qnan', Load(), lineno=783, col_offset=17), [], [], None, None, lineno=783, col_offset=17), [Return(Call(Attribute(Name('context', Load(), lineno=784, col_offset=23), '_raise_error', Load(), lineno=784, col_offset=23), [Name('InvalidOperation', Load(), lineno=784, col_offset=44), Str('comparison involving NaN', lineno=785, col_offset=44), Name('self', Load(), lineno=786, col_offset=44)], [], None, None, lineno=784, col_offset=23), lineno=784, col_offset=16)], [If(Call(Attribute(Name('other', Load(), lineno=787, col_offset=17), 'is_qnan', Load(), lineno=787, col_offset=17), [], [], None, None, lineno=787, col_offset=17), [Return(Call(Attribute(Name('context', Load(), lineno=788, col_offset=23), '_raise_error', Load(), lineno=788, col_offset=23), [Name('InvalidOperation', Load(), lineno=788, col_offset=44), Str('comparison involving NaN', lineno=789, col_offset=44), Name('other', Load(), lineno=790, col_offset=44)], [], None, None, lineno=788, col_offset=23), lineno=788, col_offset=16)], [], lineno=787, col_offset=17)], lineno=783, col_offset=17)], lineno=779, col_offset=17)], lineno=775, col_offset=12)], [], lineno=774, col_offset=8), Return(Num(0, lineno=791, col_offset=15), lineno=791, col_offset=8)], [], lineno=760, col_offset=4), FunctionDef('__nonzero__', arguments([Name('self', Param(), lineno=793, col_offset=20)], None, None, []), [Expr(Str('Return True if self is nonzero; otherwise return False.\n\n        NaNs and infinities are considered nonzero.\n        ', lineno=797, col_offset=-1), lineno=797, col_offset=-1), Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=798, col_offset=15), '_is_special', Load(), lineno=798, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=798, col_offset=35), '_int', Load(), lineno=798, col_offset=35), [NotEq()], [Str('0', lineno=798, col_offset=48)], lineno=798, col_offset=35)], lineno=798, col_offset=15), lineno=798, col_offset=8)], [], lineno=793, col_offset=4), FunctionDef('_cmp', arguments([Name('self', Param(), lineno=800, col_offset=13), Name('other', Param(), lineno=800, col_offset=19)], None, None, []), [Expr(Str('Compare the two non-NaN decimal instances self and other.\n\n        Returns -1 if self < other, 0 if self == other and 1\n        if self > other.  This routine is for internal use only.', lineno=804, col_offset=-1), lineno=804, col_offset=-1), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=806, col_offset=11), '_is_special', Load(), lineno=806, col_offset=11), Attribute(Name('other', Load(), lineno=806, col_offset=31), '_is_special', Load(), lineno=806, col_offset=31)], lineno=806, col_offset=11), [Assign([Name('self_inf', Store(), lineno=807, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=807, col_offset=23), '_isinfinity', Load(), lineno=807, col_offset=23), [], [], None, None, lineno=807, col_offset=23), lineno=807, col_offset=12), Assign([Name('other_inf', Store(), lineno=808, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=808, col_offset=24), '_isinfinity', Load(), lineno=808, col_offset=24), [], [], None, None, lineno=808, col_offset=24), lineno=808, col_offset=12), If(Compare(Name('self_inf', Load(), lineno=809, col_offset=15), [Eq()], [Name('other_inf', Load(), lineno=809, col_offset=27)], lineno=809, col_offset=15), [Return(Num(0, lineno=810, col_offset=23), lineno=810, col_offset=16)], [If(Compare(Name('self_inf', Load(), lineno=811, col_offset=17), [Lt()], [Name('other_inf', Load(), lineno=811, col_offset=28)], lineno=811, col_offset=17), [Return(Num(-1, lineno=812, col_offset=24), lineno=812, col_offset=16)], [Return(Num(1, lineno=814, col_offset=23), lineno=814, col_offset=16)], lineno=811, col_offset=17)], lineno=809, col_offset=12)], [], lineno=806, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=817, col_offset=15), lineno=817, col_offset=11), [If(UnaryOp(Not(), Name('other', Load(), lineno=818, col_offset=19), lineno=818, col_offset=15), [Return(Num(0, lineno=819, col_offset=23), lineno=819, col_offset=16)], [Return(UnaryOp(USub(), BinOp(Num(-1, lineno=821, col_offset=27), Pow(), Attribute(Name('other', Load(), lineno=821, col_offset=31), '_sign', Load(), lineno=821, col_offset=31), lineno=821, col_offset=25), lineno=821, col_offset=23), lineno=821, col_offset=16)], lineno=818, col_offset=12)], [], lineno=817, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=822, col_offset=15), lineno=822, col_offset=11), [Return(BinOp(Num(-1, lineno=823, col_offset=21), Pow(), Attribute(Name('self', Load(), lineno=823, col_offset=25), '_sign', Load(), lineno=823, col_offset=25), lineno=823, col_offset=19), lineno=823, col_offset=12)], [], lineno=822, col_offset=8), If(Compare(Attribute(Name('other', Load(), lineno=826, col_offset=11), '_sign', Load(), lineno=826, col_offset=11), [Lt()], [Attribute(Name('self', Load(), lineno=826, col_offset=25), '_sign', Load(), lineno=826, col_offset=25)], lineno=826, col_offset=11), [Return(Num(-1, lineno=827, col_offset=20), lineno=827, col_offset=12)], [], lineno=826, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=828, col_offset=11), '_sign', Load(), lineno=828, col_offset=11), [Lt()], [Attribute(Name('other', Load(), lineno=828, col_offset=24), '_sign', Load(), lineno=828, col_offset=24)], lineno=828, col_offset=11), [Return(Num(1, lineno=829, col_offset=19), lineno=829, col_offset=12)], [], lineno=828, col_offset=8), Assign([Name('self_adjusted', Store(), lineno=831, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=831, col_offset=24), 'adjusted', Load(), lineno=831, col_offset=24), [], [], None, None, lineno=831, col_offset=24), lineno=831, col_offset=8), Assign([Name('other_adjusted', Store(), lineno=832, col_offset=8)], Call(Attribute(Name('other', Load(), lineno=832, col_offset=25), 'adjusted', Load(), lineno=832, col_offset=25), [], [], None, None, lineno=832, col_offset=25), lineno=832, col_offset=8), If(Compare(Name('self_adjusted', Load(), lineno=833, col_offset=11), [Eq()], [Name('other_adjusted', Load(), lineno=833, col_offset=28)], lineno=833, col_offset=11), [Assign([Name('self_padded', Store(), lineno=834, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=834, col_offset=26), '_int', Load(), lineno=834, col_offset=26), Add(), BinOp(Str('0', lineno=834, col_offset=38), Mult(), BinOp(Attribute(Name('self', Load(), lineno=834, col_offset=43), '_exp', Load(), lineno=834, col_offset=43), Sub(), Attribute(Name('other', Load(), lineno=834, col_offset=55), '_exp', Load(), lineno=834, col_offset=55), lineno=834, col_offset=43), lineno=834, col_offset=38), lineno=834, col_offset=26), lineno=834, col_offset=12), Assign([Name('other_padded', Store(), lineno=835, col_offset=12)], BinOp(Attribute(Name('other', Load(), lineno=835, col_offset=27), '_int', Load(), lineno=835, col_offset=27), Add(), BinOp(Str('0', lineno=835, col_offset=40), Mult(), BinOp(Attribute(Name('other', Load(), lineno=835, col_offset=45), '_exp', Load(), lineno=835, col_offset=45), Sub(), Attribute(Name('self', Load(), lineno=835, col_offset=58), '_exp', Load(), lineno=835, col_offset=58), lineno=835, col_offset=45), lineno=835, col_offset=40), lineno=835, col_offset=27), lineno=835, col_offset=12), If(Compare(Name('self_padded', Load(), lineno=836, col_offset=15), [Eq()], [Name('other_padded', Load(), lineno=836, col_offset=30)], lineno=836, col_offset=15), [Return(Num(0, lineno=837, col_offset=23), lineno=837, col_offset=16)], [If(Compare(Name('self_padded', Load(), lineno=838, col_offset=17), [Lt()], [Name('other_padded', Load(), lineno=838, col_offset=31)], lineno=838, col_offset=17), [Return(UnaryOp(USub(), BinOp(Num(-1, lineno=839, col_offset=26), Pow(), Attribute(Name('self', Load(), lineno=839, col_offset=30), '_sign', Load(), lineno=839, col_offset=30), lineno=839, col_offset=24), lineno=839, col_offset=23), lineno=839, col_offset=16)], [Return(BinOp(Num(-1, lineno=841, col_offset=25), Pow(), Attribute(Name('self', Load(), lineno=841, col_offset=29), '_sign', Load(), lineno=841, col_offset=29), lineno=841, col_offset=23), lineno=841, col_offset=16)], lineno=838, col_offset=17)], lineno=836, col_offset=12)], [If(Compare(Name('self_adjusted', Load(), lineno=842, col_offset=13), [Gt()], [Name('other_adjusted', Load(), lineno=842, col_offset=29)], lineno=842, col_offset=13), [Return(BinOp(Num(-1, lineno=843, col_offset=21), Pow(), Attribute(Name('self', Load(), lineno=843, col_offset=25), '_sign', Load(), lineno=843, col_offset=25), lineno=843, col_offset=19), lineno=843, col_offset=12)], [Return(UnaryOp(USub(), BinOp(Num(-1, lineno=845, col_offset=23), Pow(), Attribute(Name('self', Load(), lineno=845, col_offset=27), '_sign', Load(), lineno=845, col_offset=27), lineno=845, col_offset=21), lineno=845, col_offset=19), lineno=845, col_offset=12)], lineno=842, col_offset=13)], lineno=833, col_offset=8)], [], lineno=800, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=864, col_offset=15), Name('other', Param(), lineno=864, col_offset=21), Name('context', Param(), lineno=864, col_offset=28)], None, None, [Name('None', Load(), lineno=864, col_offset=36)]), [Assign([Name('other', Store(), lineno=865, col_offset=8)], Call(Name('_convert_other', Load(), lineno=865, col_offset=16), [Name('other', Load(), lineno=865, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=865, col_offset=50))], None, None, lineno=865, col_offset=16), lineno=865, col_offset=8), If(Compare(Name('other', Load(), lineno=866, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=866, col_offset=20)], lineno=866, col_offset=11), [Return(Name('other', Load(), lineno=867, col_offset=19), lineno=867, col_offset=12)], [], lineno=866, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=868, col_offset=11), '_check_nans', Load(), lineno=868, col_offset=11), [Name('other', Load(), lineno=868, col_offset=28), Name('context', Load(), lineno=868, col_offset=35)], [], None, None, lineno=868, col_offset=11), [Return(Name('False', Load(), lineno=869, col_offset=19), lineno=869, col_offset=12)], [], lineno=868, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=870, col_offset=15), '_cmp', Load(), lineno=870, col_offset=15), [Name('other', Load(), lineno=870, col_offset=25)], [], None, None, lineno=870, col_offset=15), [Eq()], [Num(0, lineno=870, col_offset=35)], lineno=870, col_offset=15), lineno=870, col_offset=8)], [], lineno=864, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=872, col_offset=15), Name('other', Param(), lineno=872, col_offset=21), Name('context', Param(), lineno=872, col_offset=28)], None, None, [Name('None', Load(), lineno=872, col_offset=36)]), [Assign([Name('other', Store(), lineno=873, col_offset=8)], Call(Name('_convert_other', Load(), lineno=873, col_offset=16), [Name('other', Load(), lineno=873, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=873, col_offset=50))], None, None, lineno=873, col_offset=16), lineno=873, col_offset=8), If(Compare(Name('other', Load(), lineno=874, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=874, col_offset=20)], lineno=874, col_offset=11), [Return(Name('other', Load(), lineno=875, col_offset=19), lineno=875, col_offset=12)], [], lineno=874, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=876, col_offset=11), '_check_nans', Load(), lineno=876, col_offset=11), [Name('other', Load(), lineno=876, col_offset=28), Name('context', Load(), lineno=876, col_offset=35)], [], None, None, lineno=876, col_offset=11), [Return(Name('True', Load(), lineno=877, col_offset=19), lineno=877, col_offset=12)], [], lineno=876, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=878, col_offset=15), '_cmp', Load(), lineno=878, col_offset=15), [Name('other', Load(), lineno=878, col_offset=25)], [], None, None, lineno=878, col_offset=15), [NotEq()], [Num(0, lineno=878, col_offset=35)], lineno=878, col_offset=15), lineno=878, col_offset=8)], [], lineno=872, col_offset=4), FunctionDef('__lt__', arguments([Name('self', Param(), lineno=880, col_offset=15), Name('other', Param(), lineno=880, col_offset=21), Name('context', Param(), lineno=880, col_offset=28)], None, None, [Name('None', Load(), lineno=880, col_offset=36)]), [Assign([Name('other', Store(), lineno=881, col_offset=8)], Call(Name('_convert_other', Load(), lineno=881, col_offset=16), [Name('other', Load(), lineno=881, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=881, col_offset=50))], None, None, lineno=881, col_offset=16), lineno=881, col_offset=8), If(Compare(Name('other', Load(), lineno=882, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=882, col_offset=20)], lineno=882, col_offset=11), [Return(Name('other', Load(), lineno=883, col_offset=19), lineno=883, col_offset=12)], [], lineno=882, col_offset=8), Assign([Name('ans', Store(), lineno=884, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=884, col_offset=14), '_compare_check_nans', Load(), lineno=884, col_offset=14), [Name('other', Load(), lineno=884, col_offset=39), Name('context', Load(), lineno=884, col_offset=46)], [], None, None, lineno=884, col_offset=14), lineno=884, col_offset=8), If(Name('ans', Load(), lineno=885, col_offset=11), [Return(Name('False', Load(), lineno=886, col_offset=19), lineno=886, col_offset=12)], [], lineno=885, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=887, col_offset=15), '_cmp', Load(), lineno=887, col_offset=15), [Name('other', Load(), lineno=887, col_offset=25)], [], None, None, lineno=887, col_offset=15), [Lt()], [Num(0, lineno=887, col_offset=34)], lineno=887, col_offset=15), lineno=887, col_offset=8)], [], lineno=880, col_offset=4), FunctionDef('__le__', arguments([Name('self', Param(), lineno=889, col_offset=15), Name('other', Param(), lineno=889, col_offset=21), Name('context', Param(), lineno=889, col_offset=28)], None, None, [Name('None', Load(), lineno=889, col_offset=36)]), [Assign([Name('other', Store(), lineno=890, col_offset=8)], Call(Name('_convert_other', Load(), lineno=890, col_offset=16), [Name('other', Load(), lineno=890, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=890, col_offset=50))], None, None, lineno=890, col_offset=16), lineno=890, col_offset=8), If(Compare(Name('other', Load(), lineno=891, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=891, col_offset=20)], lineno=891, col_offset=11), [Return(Name('other', Load(), lineno=892, col_offset=19), lineno=892, col_offset=12)], [], lineno=891, col_offset=8), Assign([Name('ans', Store(), lineno=893, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=893, col_offset=14), '_compare_check_nans', Load(), lineno=893, col_offset=14), [Name('other', Load(), lineno=893, col_offset=39), Name('context', Load(), lineno=893, col_offset=46)], [], None, None, lineno=893, col_offset=14), lineno=893, col_offset=8), If(Name('ans', Load(), lineno=894, col_offset=11), [Return(Name('False', Load(), lineno=895, col_offset=19), lineno=895, col_offset=12)], [], lineno=894, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=896, col_offset=15), '_cmp', Load(), lineno=896, col_offset=15), [Name('other', Load(), lineno=896, col_offset=25)], [], None, None, lineno=896, col_offset=15), [LtE()], [Num(0, lineno=896, col_offset=35)], lineno=896, col_offset=15), lineno=896, col_offset=8)], [], lineno=889, col_offset=4), FunctionDef('__gt__', arguments([Name('self', Param(), lineno=898, col_offset=15), Name('other', Param(), lineno=898, col_offset=21), Name('context', Param(), lineno=898, col_offset=28)], None, None, [Name('None', Load(), lineno=898, col_offset=36)]), [Assign([Name('other', Store(), lineno=899, col_offset=8)], Call(Name('_convert_other', Load(), lineno=899, col_offset=16), [Name('other', Load(), lineno=899, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=899, col_offset=50))], None, None, lineno=899, col_offset=16), lineno=899, col_offset=8), If(Compare(Name('other', Load(), lineno=900, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=900, col_offset=20)], lineno=900, col_offset=11), [Return(Name('other', Load(), lineno=901, col_offset=19), lineno=901, col_offset=12)], [], lineno=900, col_offset=8), Assign([Name('ans', Store(), lineno=902, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=902, col_offset=14), '_compare_check_nans', Load(), lineno=902, col_offset=14), [Name('other', Load(), lineno=902, col_offset=39), Name('context', Load(), lineno=902, col_offset=46)], [], None, None, lineno=902, col_offset=14), lineno=902, col_offset=8), If(Name('ans', Load(), lineno=903, col_offset=11), [Return(Name('False', Load(), lineno=904, col_offset=19), lineno=904, col_offset=12)], [], lineno=903, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=905, col_offset=15), '_cmp', Load(), lineno=905, col_offset=15), [Name('other', Load(), lineno=905, col_offset=25)], [], None, None, lineno=905, col_offset=15), [Gt()], [Num(0, lineno=905, col_offset=34)], lineno=905, col_offset=15), lineno=905, col_offset=8)], [], lineno=898, col_offset=4), FunctionDef('__ge__', arguments([Name('self', Param(), lineno=907, col_offset=15), Name('other', Param(), lineno=907, col_offset=21), Name('context', Param(), lineno=907, col_offset=28)], None, None, [Name('None', Load(), lineno=907, col_offset=36)]), [Assign([Name('other', Store(), lineno=908, col_offset=8)], Call(Name('_convert_other', Load(), lineno=908, col_offset=16), [Name('other', Load(), lineno=908, col_offset=31)], [keyword('allow_float', Name('True', Load(), lineno=908, col_offset=50))], None, None, lineno=908, col_offset=16), lineno=908, col_offset=8), If(Compare(Name('other', Load(), lineno=909, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=909, col_offset=20)], lineno=909, col_offset=11), [Return(Name('other', Load(), lineno=910, col_offset=19), lineno=910, col_offset=12)], [], lineno=909, col_offset=8), Assign([Name('ans', Store(), lineno=911, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=911, col_offset=14), '_compare_check_nans', Load(), lineno=911, col_offset=14), [Name('other', Load(), lineno=911, col_offset=39), Name('context', Load(), lineno=911, col_offset=46)], [], None, None, lineno=911, col_offset=14), lineno=911, col_offset=8), If(Name('ans', Load(), lineno=912, col_offset=11), [Return(Name('False', Load(), lineno=913, col_offset=19), lineno=913, col_offset=12)], [], lineno=912, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=914, col_offset=15), '_cmp', Load(), lineno=914, col_offset=15), [Name('other', Load(), lineno=914, col_offset=25)], [], None, None, lineno=914, col_offset=15), [GtE()], [Num(0, lineno=914, col_offset=35)], lineno=914, col_offset=15), lineno=914, col_offset=8)], [], lineno=907, col_offset=4), FunctionDef('compare', arguments([Name('self', Param(), lineno=916, col_offset=16), Name('other', Param(), lineno=916, col_offset=22), Name('context', Param(), lineno=916, col_offset=29)], None, None, [Name('None', Load(), lineno=916, col_offset=37)]), [Expr(Str('Compares one to another.\n\n        -1 => a < b\n        0  => a = b\n        1  => a > b\n        NaN => one is NaN\n        Like __cmp__, but returns Decimal instances.\n        ', lineno=924, col_offset=-1), lineno=924, col_offset=-1), Assign([Name('other', Store(), lineno=925, col_offset=8)], Call(Name('_convert_other', Load(), lineno=925, col_offset=16), [Name('other', Load(), lineno=925, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=925, col_offset=46))], None, None, lineno=925, col_offset=16), lineno=925, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=928, col_offset=12), '_is_special', Load(), lineno=928, col_offset=12), BoolOp(And(), [Name('other', Load(), lineno=928, col_offset=32), Attribute(Name('other', Load(), lineno=928, col_offset=42), '_is_special', Load(), lineno=928, col_offset=42)], lineno=928, col_offset=32)], lineno=928, col_offset=12), [Assign([Name('ans', Store(), lineno=929, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=929, col_offset=18), '_check_nans', Load(), lineno=929, col_offset=18), [Name('other', Load(), lineno=929, col_offset=35), Name('context', Load(), lineno=929, col_offset=42)], [], None, None, lineno=929, col_offset=18), lineno=929, col_offset=12), If(Name('ans', Load(), lineno=930, col_offset=15), [Return(Name('ans', Load(), lineno=931, col_offset=23), lineno=931, col_offset=16)], [], lineno=930, col_offset=12)], [], lineno=928, col_offset=8), Return(Call(Name('Decimal', Load(), lineno=933, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=933, col_offset=23), '_cmp', Load(), lineno=933, col_offset=23), [Name('other', Load(), lineno=933, col_offset=33)], [], None, None, lineno=933, col_offset=23)], [], None, None, lineno=933, col_offset=15), lineno=933, col_offset=8)], [], lineno=916, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=935, col_offset=17)], None, None, []), [Expr(Str('x.__hash__() <==> hash(x)', lineno=936, col_offset=8), lineno=936, col_offset=8), If(Attribute(Name('self', Load(), lineno=948, col_offset=11), '_is_special', Load(), lineno=948, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=949, col_offset=15), 'is_snan', Load(), lineno=949, col_offset=15), [], [], None, None, lineno=949, col_offset=15), [Raise(Call(Name('TypeError', Load(), lineno=950, col_offset=22), [Str('Cannot hash a signaling NaN value.', lineno=950, col_offset=32)], [], None, None, lineno=950, col_offset=22), None, None, lineno=950, col_offset=16)], [If(Call(Attribute(Name('self', Load(), lineno=951, col_offset=17), 'is_nan', Load(), lineno=951, col_offset=17), [], [], None, None, lineno=951, col_offset=17), [Return(Num(0, lineno=953, col_offset=23), lineno=953, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=957, col_offset=19), '_sign', Load(), lineno=957, col_offset=19), [Return(Num(-271828, lineno=958, col_offset=28), lineno=958, col_offset=20)], [Return(Num(314159, lineno=960, col_offset=27), lineno=960, col_offset=20)], lineno=957, col_offset=16)], lineno=951, col_offset=17)], lineno=949, col_offset=12)], [], lineno=948, col_offset=8), Assign([Name('self_as_float', Store(), lineno=966, col_offset=8)], Call(Name('float', Load(), lineno=966, col_offset=24), [Name('self', Load(), lineno=966, col_offset=30)], [], None, None, lineno=966, col_offset=24), lineno=966, col_offset=8), If(Compare(Call(Attribute(Name('Decimal', Load(), lineno=967, col_offset=11), 'from_float', Load(), lineno=967, col_offset=11), [Name('self_as_float', Load(), lineno=967, col_offset=30)], [], None, None, lineno=967, col_offset=11), [Eq()], [Name('self', Load(), lineno=967, col_offset=48)], lineno=967, col_offset=11), [Return(Call(Name('hash', Load(), lineno=968, col_offset=19), [Name('self_as_float', Load(), lineno=968, col_offset=24)], [], None, None, lineno=968, col_offset=19), lineno=968, col_offset=12)], [], lineno=967, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=970, col_offset=11), '_isinteger', Load(), lineno=970, col_offset=11), [], [], None, None, lineno=970, col_offset=11), [Assign([Name('op', Store(), lineno=971, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=971, col_offset=17), [Call(Attribute(Name('self', Load(), lineno=971, col_offset=26), 'to_integral_value', Load(), lineno=971, col_offset=26), [], [], None, None, lineno=971, col_offset=26)], [], None, None, lineno=971, col_offset=17), lineno=971, col_offset=12), Return(Call(Name('hash', Load(), lineno=978, col_offset=19), [BinOp(BinOp(BinOp(Num(-1, lineno=978, col_offset=26), Pow(), Attribute(Name('op', Load(), lineno=978, col_offset=30), 'sign', Load(), lineno=978, col_offset=30), lineno=978, col_offset=24), Mult(), Attribute(Name('op', Load(), lineno=978, col_offset=38), 'int', Load(), lineno=978, col_offset=38), lineno=978, col_offset=24), Mult(), Call(Name('pow', Load(), lineno=978, col_offset=45), [Num(10, lineno=978, col_offset=49), Attribute(Name('op', Load(), lineno=978, col_offset=53), 'exp', Load(), lineno=978, col_offset=53), BinOp(BinOp(Num(2, lineno=978, col_offset=61), Pow(), Num(64, lineno=978, col_offset=64), lineno=978, col_offset=61), Sub(), Num(1, lineno=978, col_offset=67), lineno=978, col_offset=61)], [], None, None, lineno=978, col_offset=45), lineno=978, col_offset=44)], [], None, None, lineno=978, col_offset=19), lineno=978, col_offset=12)], [], lineno=970, col_offset=8), Return(Call(Name('hash', Load(), lineno=983, col_offset=15), [Tuple([Attribute(Name('self', Load(), lineno=983, col_offset=21), '_sign', Load(), lineno=983, col_offset=21), BinOp(Attribute(Name('self', Load(), lineno=984, col_offset=21), '_exp', Load(), lineno=984, col_offset=21), Add(), Call(Name('len', Load(), lineno=984, col_offset=31), [Attribute(Name('self', Load(), lineno=984, col_offset=35), '_int', Load(), lineno=984, col_offset=35)], [], None, None, lineno=984, col_offset=31), lineno=984, col_offset=21), Call(Attribute(Attribute(Name('self', Load(), lineno=985, col_offset=21), '_int', Load(), lineno=985, col_offset=21), 'rstrip', Load(), lineno=985, col_offset=21), [Str('0', lineno=985, col_offset=38)], [], None, None, lineno=985, col_offset=21)], Load(), lineno=983, col_offset=21)], [], None, None, lineno=983, col_offset=15), lineno=983, col_offset=8)], [], lineno=935, col_offset=4), FunctionDef('as_tuple', arguments([Name('self', Param(), lineno=987, col_offset=17)], None, None, []), [Expr(Str('Represents the number as a triple tuple.\n\n        To show the internals exactly as they are.\n        ', lineno=991, col_offset=-1), lineno=991, col_offset=-1), Return(Call(Name('DecimalTuple', Load(), lineno=992, col_offset=15), [Attribute(Name('self', Load(), lineno=992, col_offset=28), '_sign', Load(), lineno=992, col_offset=28), Call(Name('tuple', Load(), lineno=992, col_offset=40), [Call(Name('map', Load(), lineno=992, col_offset=46), [Name('int', Load(), lineno=992, col_offset=50), Attribute(Name('self', Load(), lineno=992, col_offset=55), '_int', Load(), lineno=992, col_offset=55)], [], None, None, lineno=992, col_offset=46)], [], None, None, lineno=992, col_offset=40), Attribute(Name('self', Load(), lineno=992, col_offset=68), '_exp', Load(), lineno=992, col_offset=68)], [], None, None, lineno=992, col_offset=15), lineno=992, col_offset=8)], [], lineno=987, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=994, col_offset=17)], None, None, []), [Expr(Str('Represents the number as an instance of Decimal.', lineno=995, col_offset=8), lineno=995, col_offset=8), Return(BinOp(Str("Decimal('%s')", lineno=997, col_offset=15), Mod(), Call(Name('str', Load(), lineno=997, col_offset=33), [Name('self', Load(), lineno=997, col_offset=37)], [], None, None, lineno=997, col_offset=33), lineno=997, col_offset=15), lineno=997, col_offset=8)], [], lineno=994, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=999, col_offset=16), Name('eng', Param(), lineno=999, col_offset=22), Name('context', Param(), lineno=999, col_offset=33)], None, None, [Name('False', Load(), lineno=999, col_offset=26), Name('None', Load(), lineno=999, col_offset=41)]), [Expr(Str('Return string representation of the number in scientific notation.\n\n        Captures all of the information in the underlying representation.\n        ', lineno=1003, col_offset=-1), lineno=1003, col_offset=-1), Assign([Name('sign', Store(), lineno=1005, col_offset=8)], Subscript(List([Str('', lineno=1005, col_offset=16), Str('-', lineno=1005, col_offset=20)], Load(), lineno=1005, col_offset=15), Index(Attribute(Name('self', Load(), lineno=1005, col_offset=25), '_sign', Load(), lineno=1005, col_offset=25)), Load(), lineno=1005, col_offset=15), lineno=1005, col_offset=8), If(Attribute(Name('self', Load(), lineno=1006, col_offset=11), '_is_special', Load(), lineno=1006, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1007, col_offset=15), '_exp', Load(), lineno=1007, col_offset=15), [Eq()], [Str('F', lineno=1007, col_offset=28)], lineno=1007, col_offset=15), [Return(BinOp(Name('sign', Load(), lineno=1008, col_offset=23), Add(), Str('Infinity', lineno=1008, col_offset=30), lineno=1008, col_offset=23), lineno=1008, col_offset=16)], [If(Compare(Attribute(Name('self', Load(), lineno=1009, col_offset=17), '_exp', Load(), lineno=1009, col_offset=17), [Eq()], [Str('n', lineno=1009, col_offset=30)], lineno=1009, col_offset=17), [Return(BinOp(BinOp(Name('sign', Load(), lineno=1010, col_offset=23), Add(), Str('NaN', lineno=1010, col_offset=30), lineno=1010, col_offset=23), Add(), Attribute(Name('self', Load(), lineno=1010, col_offset=38), '_int', Load(), lineno=1010, col_offset=38), lineno=1010, col_offset=36), lineno=1010, col_offset=16)], [Return(BinOp(BinOp(Name('sign', Load(), lineno=1012, col_offset=23), Add(), Str('sNaN', lineno=1012, col_offset=30), lineno=1012, col_offset=23), Add(), Attribute(Name('self', Load(), lineno=1012, col_offset=39), '_int', Load(), lineno=1012, col_offset=39), lineno=1012, col_offset=37), lineno=1012, col_offset=16)], lineno=1009, col_offset=17)], lineno=1007, col_offset=12)], [], lineno=1006, col_offset=8), Assign([Name('leftdigits', Store(), lineno=1015, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1015, col_offset=21), '_exp', Load(), lineno=1015, col_offset=21), Add(), Call(Name('len', Load(), lineno=1015, col_offset=33), [Attribute(Name('self', Load(), lineno=1015, col_offset=37), '_int', Load(), lineno=1015, col_offset=37)], [], None, None, lineno=1015, col_offset=33), lineno=1015, col_offset=21), lineno=1015, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=1020, col_offset=11), '_exp', Load(), lineno=1020, col_offset=11), [LtE()], [Num(0, lineno=1020, col_offset=24)], lineno=1020, col_offset=11), Compare(Name('leftdigits', Load(), lineno=1020, col_offset=30), [Gt()], [Num(-6, lineno=1020, col_offset=44)], lineno=1020, col_offset=30)], lineno=1020, col_offset=11), [Assign([Name('dotplace', Store(), lineno=1022, col_offset=12)], Name('leftdigits', Load(), lineno=1022, col_offset=23), lineno=1022, col_offset=12)], [If(UnaryOp(Not(), Name('eng', Load(), lineno=1023, col_offset=17), lineno=1023, col_offset=13), [Assign([Name('dotplace', Store(), lineno=1025, col_offset=12)], Num(1, lineno=1025, col_offset=23), lineno=1025, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=1026, col_offset=13), '_int', Load(), lineno=1026, col_offset=13), [Eq()], [Str('0', lineno=1026, col_offset=26)], lineno=1026, col_offset=13), [Assign([Name('dotplace', Store(), lineno=1028, col_offset=12)], BinOp(BinOp(BinOp(Name('leftdigits', Load(), lineno=1028, col_offset=24), Add(), Num(1, lineno=1028, col_offset=37), lineno=1028, col_offset=24), Mod(), Num(3, lineno=1028, col_offset=42), lineno=1028, col_offset=23), Sub(), Num(1, lineno=1028, col_offset=46), lineno=1028, col_offset=23), lineno=1028, col_offset=12)], [Assign([Name('dotplace', Store(), lineno=1031, col_offset=12)], BinOp(BinOp(BinOp(Name('leftdigits', Load(), lineno=1031, col_offset=24), Sub(), Num(1, lineno=1031, col_offset=37), lineno=1031, col_offset=24), Mod(), Num(3, lineno=1031, col_offset=42), lineno=1031, col_offset=23), Add(), Num(1, lineno=1031, col_offset=46), lineno=1031, col_offset=23), lineno=1031, col_offset=12)], lineno=1026, col_offset=13)], lineno=1023, col_offset=13)], lineno=1020, col_offset=8), If(Compare(Name('dotplace', Load(), lineno=1033, col_offset=11), [LtE()], [Num(0, lineno=1033, col_offset=23)], lineno=1033, col_offset=11), [Assign([Name('intpart', Store(), lineno=1034, col_offset=12)], Str('0', lineno=1034, col_offset=22), lineno=1034, col_offset=12), Assign([Name('fracpart', Store(), lineno=1035, col_offset=12)], BinOp(BinOp(Str('.', lineno=1035, col_offset=23), Add(), BinOp(Str('0', lineno=1035, col_offset=29), Mult(), UnaryOp(USub(), Name('dotplace', Load(), lineno=1035, col_offset=35), lineno=1035, col_offset=34), lineno=1035, col_offset=29), lineno=1035, col_offset=23), Add(), Attribute(Name('self', Load(), lineno=1035, col_offset=47), '_int', Load(), lineno=1035, col_offset=47), lineno=1035, col_offset=45), lineno=1035, col_offset=12)], [If(Compare(Name('dotplace', Load(), lineno=1036, col_offset=13), [GtE()], [Call(Name('len', Load(), lineno=1036, col_offset=25), [Attribute(Name('self', Load(), lineno=1036, col_offset=29), '_int', Load(), lineno=1036, col_offset=29)], [], None, None, lineno=1036, col_offset=25)], lineno=1036, col_offset=13), [Assign([Name('intpart', Store(), lineno=1037, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=1037, col_offset=22), '_int', Load(), lineno=1037, col_offset=22), Add(), BinOp(Str('0', lineno=1037, col_offset=32), Mult(), BinOp(Name('dotplace', Load(), lineno=1037, col_offset=37), Sub(), Call(Name('len', Load(), lineno=1037, col_offset=46), [Attribute(Name('self', Load(), lineno=1037, col_offset=50), '_int', Load(), lineno=1037, col_offset=50)], [], None, None, lineno=1037, col_offset=46), lineno=1037, col_offset=37), lineno=1037, col_offset=32), lineno=1037, col_offset=22), lineno=1037, col_offset=12), Assign([Name('fracpart', Store(), lineno=1038, col_offset=12)], Str('', lineno=1038, col_offset=23), lineno=1038, col_offset=12)], [Assign([Name('intpart', Store(), lineno=1040, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=1040, col_offset=22), '_int', Load(), lineno=1040, col_offset=22), Slice(None, Name('dotplace', Load(), lineno=1040, col_offset=33), None), Load(), lineno=1040, col_offset=22), lineno=1040, col_offset=12), Assign([Name('fracpart', Store(), lineno=1041, col_offset=12)], BinOp(Str('.', lineno=1041, col_offset=23), Add(), Subscript(Attribute(Name('self', Load(), lineno=1041, col_offset=29), '_int', Load(), lineno=1041, col_offset=29), Slice(Name('dotplace', Load(), lineno=1041, col_offset=39), None, None), Load(), lineno=1041, col_offset=29), lineno=1041, col_offset=23), lineno=1041, col_offset=12)], lineno=1036, col_offset=13)], lineno=1033, col_offset=8), If(Compare(Name('leftdigits', Load(), lineno=1042, col_offset=11), [Eq()], [Name('dotplace', Load(), lineno=1042, col_offset=25)], lineno=1042, col_offset=11), [Assign([Name('exp', Store(), lineno=1043, col_offset=12)], Str('', lineno=1043, col_offset=18), lineno=1043, col_offset=12)], [If(Compare(Name('context', Load(), lineno=1045, col_offset=15), [Is()], [Name('None', Load(), lineno=1045, col_offset=26)], lineno=1045, col_offset=15), [Assign([Name('context', Store(), lineno=1046, col_offset=16)], Call(Name('getcontext', Load(), lineno=1046, col_offset=26), [], [], None, None, lineno=1046, col_offset=26), lineno=1046, col_offset=16)], [], lineno=1045, col_offset=12), Assign([Name('exp', Store(), lineno=1047, col_offset=12)], BinOp(Subscript(List([Str('e', lineno=1047, col_offset=19), Str('E', lineno=1047, col_offset=24)], Load(), lineno=1047, col_offset=18), Index(Attribute(Name('context', Load(), lineno=1047, col_offset=29), 'capitals', Load(), lineno=1047, col_offset=29)), Load(), lineno=1047, col_offset=18), Add(), BinOp(Str('%+d', lineno=1047, col_offset=49), Mod(), BinOp(Name('leftdigits', Load(), lineno=1047, col_offset=58), Sub(), Name('dotplace', Load(), lineno=1047, col_offset=69), lineno=1047, col_offset=58), lineno=1047, col_offset=49), lineno=1047, col_offset=18), lineno=1047, col_offset=12)], lineno=1042, col_offset=8), Return(BinOp(BinOp(BinOp(Name('sign', Load(), lineno=1049, col_offset=15), Add(), Name('intpart', Load(), lineno=1049, col_offset=22), lineno=1049, col_offset=15), Add(), Name('fracpart', Load(), lineno=1049, col_offset=32), lineno=1049, col_offset=30), Add(), Name('exp', Load(), lineno=1049, col_offset=43), lineno=1049, col_offset=41), lineno=1049, col_offset=8)], [], lineno=999, col_offset=4), FunctionDef('to_eng_string', arguments([Name('self', Param(), lineno=1051, col_offset=22), Name('context', Param(), lineno=1051, col_offset=28)], None, None, [Name('None', Load(), lineno=1051, col_offset=36)]), [Expr(Str('Convert to engineering-type string.\n\n        Engineering notation has an exponent which is a multiple of 3, so there\n        are up to 3 digits left of the decimal place.\n\n        Same rules for when in exponential and when as a value as in __str__.\n        ', lineno=1058, col_offset=-1), lineno=1058, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1059, col_offset=15), '__str__', Load(), lineno=1059, col_offset=15), [], [keyword('eng', Name('True', Load(), lineno=1059, col_offset=32)), keyword('context', Name('context', Load(), lineno=1059, col_offset=46))], None, None, lineno=1059, col_offset=15), lineno=1059, col_offset=8)], [], lineno=1051, col_offset=4), FunctionDef('__neg__', arguments([Name('self', Param(), lineno=1061, col_offset=16), Name('context', Param(), lineno=1061, col_offset=22)], None, None, [Name('None', Load(), lineno=1061, col_offset=30)]), [Expr(Str('Returns a copy with the sign switched.\n\n        Rounds, if it has reason.\n        ', lineno=1065, col_offset=-1), lineno=1065, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1066, col_offset=11), '_is_special', Load(), lineno=1066, col_offset=11), [Assign([Name('ans', Store(), lineno=1067, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1067, col_offset=18), '_check_nans', Load(), lineno=1067, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=1067, col_offset=43))], None, None, lineno=1067, col_offset=18), lineno=1067, col_offset=12), If(Name('ans', Load(), lineno=1068, col_offset=15), [Return(Name('ans', Load(), lineno=1069, col_offset=23), lineno=1069, col_offset=16)], [], lineno=1068, col_offset=12)], [], lineno=1066, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1071, col_offset=15), lineno=1071, col_offset=11), [Assign([Name('ans', Store(), lineno=1073, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1073, col_offset=18), 'copy_abs', Load(), lineno=1073, col_offset=18), [], [], None, None, lineno=1073, col_offset=18), lineno=1073, col_offset=12)], [Assign([Name('ans', Store(), lineno=1075, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1075, col_offset=18), 'copy_negate', Load(), lineno=1075, col_offset=18), [], [], None, None, lineno=1075, col_offset=18), lineno=1075, col_offset=12)], lineno=1071, col_offset=8), If(Compare(Name('context', Load(), lineno=1077, col_offset=11), [Is()], [Name('None', Load(), lineno=1077, col_offset=22)], lineno=1077, col_offset=11), [Assign([Name('context', Store(), lineno=1078, col_offset=12)], Call(Name('getcontext', Load(), lineno=1078, col_offset=22), [], [], None, None, lineno=1078, col_offset=22), lineno=1078, col_offset=12)], [], lineno=1077, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=1079, col_offset=15), '_fix', Load(), lineno=1079, col_offset=15), [Name('context', Load(), lineno=1079, col_offset=24)], [], None, None, lineno=1079, col_offset=15), lineno=1079, col_offset=8)], [], lineno=1061, col_offset=4), FunctionDef('__pos__', arguments([Name('self', Param(), lineno=1081, col_offset=16), Name('context', Param(), lineno=1081, col_offset=22)], None, None, [Name('None', Load(), lineno=1081, col_offset=30)]), [Expr(Str('Returns a copy, unless it is a sNaN.\n\n        Rounds the number (if more then precision digits)\n        ', lineno=1085, col_offset=-1), lineno=1085, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1086, col_offset=11), '_is_special', Load(), lineno=1086, col_offset=11), [Assign([Name('ans', Store(), lineno=1087, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1087, col_offset=18), '_check_nans', Load(), lineno=1087, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=1087, col_offset=43))], None, None, lineno=1087, col_offset=18), lineno=1087, col_offset=12), If(Name('ans', Load(), lineno=1088, col_offset=15), [Return(Name('ans', Load(), lineno=1089, col_offset=23), lineno=1089, col_offset=16)], [], lineno=1088, col_offset=12)], [], lineno=1086, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1091, col_offset=15), lineno=1091, col_offset=11), [Assign([Name('ans', Store(), lineno=1093, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1093, col_offset=18), 'copy_abs', Load(), lineno=1093, col_offset=18), [], [], None, None, lineno=1093, col_offset=18), lineno=1093, col_offset=12)], [Assign([Name('ans', Store(), lineno=1095, col_offset=12)], Call(Name('Decimal', Load(), lineno=1095, col_offset=18), [Name('self', Load(), lineno=1095, col_offset=26)], [], None, None, lineno=1095, col_offset=18), lineno=1095, col_offset=12)], lineno=1091, col_offset=8), If(Compare(Name('context', Load(), lineno=1097, col_offset=11), [Is()], [Name('None', Load(), lineno=1097, col_offset=22)], lineno=1097, col_offset=11), [Assign([Name('context', Store(), lineno=1098, col_offset=12)], Call(Name('getcontext', Load(), lineno=1098, col_offset=22), [], [], None, None, lineno=1098, col_offset=22), lineno=1098, col_offset=12)], [], lineno=1097, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=1099, col_offset=15), '_fix', Load(), lineno=1099, col_offset=15), [Name('context', Load(), lineno=1099, col_offset=24)], [], None, None, lineno=1099, col_offset=15), lineno=1099, col_offset=8)], [], lineno=1081, col_offset=4), FunctionDef('__abs__', arguments([Name('self', Param(), lineno=1101, col_offset=16), Name('round', Param(), lineno=1101, col_offset=22), Name('context', Param(), lineno=1101, col_offset=34)], None, None, [Name('True', Load(), lineno=1101, col_offset=28), Name('None', Load(), lineno=1101, col_offset=42)]), [Expr(Str("Returns the absolute value of self.\n\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        ", lineno=1107, col_offset=-1), lineno=1107, col_offset=-1), If(UnaryOp(Not(), Name('round', Load(), lineno=1108, col_offset=15), lineno=1108, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1109, col_offset=19), 'copy_abs', Load(), lineno=1109, col_offset=19), [], [], None, None, lineno=1109, col_offset=19), lineno=1109, col_offset=12)], [], lineno=1108, col_offset=8), If(Attribute(Name('self', Load(), lineno=1111, col_offset=11), '_is_special', Load(), lineno=1111, col_offset=11), [Assign([Name('ans', Store(), lineno=1112, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1112, col_offset=18), '_check_nans', Load(), lineno=1112, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=1112, col_offset=43))], None, None, lineno=1112, col_offset=18), lineno=1112, col_offset=12), If(Name('ans', Load(), lineno=1113, col_offset=15), [Return(Name('ans', Load(), lineno=1114, col_offset=23), lineno=1114, col_offset=16)], [], lineno=1113, col_offset=12)], [], lineno=1111, col_offset=8), If(Attribute(Name('self', Load(), lineno=1116, col_offset=11), '_sign', Load(), lineno=1116, col_offset=11), [Assign([Name('ans', Store(), lineno=1117, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1117, col_offset=18), '__neg__', Load(), lineno=1117, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=1117, col_offset=39))], None, None, lineno=1117, col_offset=18), lineno=1117, col_offset=12)], [Assign([Name('ans', Store(), lineno=1119, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1119, col_offset=18), '__pos__', Load(), lineno=1119, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=1119, col_offset=39))], None, None, lineno=1119, col_offset=18), lineno=1119, col_offset=12)], lineno=1116, col_offset=8), Return(Name('ans', Load(), lineno=1121, col_offset=15), lineno=1121, col_offset=8)], [], lineno=1101, col_offset=4), FunctionDef('__add__', arguments([Name('self', Param(), lineno=1123, col_offset=16), Name('other', Param(), lineno=1123, col_offset=22), Name('context', Param(), lineno=1123, col_offset=29)], None, None, [Name('None', Load(), lineno=1123, col_offset=37)]), [Expr(Str('Returns self + other.\n\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        ', lineno=1127, col_offset=-1), lineno=1127, col_offset=-1), Assign([Name('other', Store(), lineno=1128, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1128, col_offset=16), [Name('other', Load(), lineno=1128, col_offset=31)], [], None, None, lineno=1128, col_offset=16), lineno=1128, col_offset=8), If(Compare(Name('other', Load(), lineno=1129, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1129, col_offset=20)], lineno=1129, col_offset=11), [Return(Name('other', Load(), lineno=1130, col_offset=19), lineno=1130, col_offset=12)], [], lineno=1129, col_offset=8), If(Compare(Name('context', Load(), lineno=1132, col_offset=11), [Is()], [Name('None', Load(), lineno=1132, col_offset=22)], lineno=1132, col_offset=11), [Assign([Name('context', Store(), lineno=1133, col_offset=12)], Call(Name('getcontext', Load(), lineno=1133, col_offset=22), [], [], None, None, lineno=1133, col_offset=22), lineno=1133, col_offset=12)], [], lineno=1132, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1135, col_offset=11), '_is_special', Load(), lineno=1135, col_offset=11), Attribute(Name('other', Load(), lineno=1135, col_offset=31), '_is_special', Load(), lineno=1135, col_offset=31)], lineno=1135, col_offset=11), [Assign([Name('ans', Store(), lineno=1136, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1136, col_offset=18), '_check_nans', Load(), lineno=1136, col_offset=18), [Name('other', Load(), lineno=1136, col_offset=35), Name('context', Load(), lineno=1136, col_offset=42)], [], None, None, lineno=1136, col_offset=18), lineno=1136, col_offset=12), If(Name('ans', Load(), lineno=1137, col_offset=15), [Return(Name('ans', Load(), lineno=1138, col_offset=23), lineno=1138, col_offset=16)], [], lineno=1137, col_offset=12), If(Call(Attribute(Name('self', Load(), lineno=1140, col_offset=15), '_isinfinity', Load(), lineno=1140, col_offset=15), [], [], None, None, lineno=1140, col_offset=15), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=1142, col_offset=19), '_sign', Load(), lineno=1142, col_offset=19), [NotEq()], [Attribute(Name('other', Load(), lineno=1142, col_offset=33), '_sign', Load(), lineno=1142, col_offset=33)], lineno=1142, col_offset=19), Call(Attribute(Name('other', Load(), lineno=1142, col_offset=49), '_isinfinity', Load(), lineno=1142, col_offset=49), [], [], None, None, lineno=1142, col_offset=49)], lineno=1142, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=1143, col_offset=27), '_raise_error', Load(), lineno=1143, col_offset=27), [Name('InvalidOperation', Load(), lineno=1143, col_offset=48), Str('-INF + INF', lineno=1143, col_offset=66)], [], None, None, lineno=1143, col_offset=27), lineno=1143, col_offset=20)], [], lineno=1142, col_offset=16), Return(Call(Name('Decimal', Load(), lineno=1144, col_offset=23), [Name('self', Load(), lineno=1144, col_offset=31)], [], None, None, lineno=1144, col_offset=23), lineno=1144, col_offset=16)], [], lineno=1140, col_offset=12), If(Call(Attribute(Name('other', Load(), lineno=1145, col_offset=15), '_isinfinity', Load(), lineno=1145, col_offset=15), [], [], None, None, lineno=1145, col_offset=15), [Return(Call(Name('Decimal', Load(), lineno=1146, col_offset=23), [Name('other', Load(), lineno=1146, col_offset=31)], [], None, None, lineno=1146, col_offset=23), lineno=1146, col_offset=16)], [], lineno=1145, col_offset=12)], [], lineno=1135, col_offset=8), Assign([Name('exp', Store(), lineno=1148, col_offset=8)], Call(Name('min', Load(), lineno=1148, col_offset=14), [Attribute(Name('self', Load(), lineno=1148, col_offset=18), '_exp', Load(), lineno=1148, col_offset=18), Attribute(Name('other', Load(), lineno=1148, col_offset=29), '_exp', Load(), lineno=1148, col_offset=29)], [], None, None, lineno=1148, col_offset=14), lineno=1148, col_offset=8), Assign([Name('negativezero', Store(), lineno=1149, col_offset=8)], Num(0, lineno=1149, col_offset=23), lineno=1149, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('context', Load(), lineno=1150, col_offset=11), 'rounding', Load(), lineno=1150, col_offset=11), [Eq()], [Name('ROUND_FLOOR', Load(), lineno=1150, col_offset=31)], lineno=1150, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=1150, col_offset=47), '_sign', Load(), lineno=1150, col_offset=47), [NotEq()], [Attribute(Name('other', Load(), lineno=1150, col_offset=61), '_sign', Load(), lineno=1150, col_offset=61)], lineno=1150, col_offset=47)], lineno=1150, col_offset=11), [Assign([Name('negativezero', Store(), lineno=1152, col_offset=12)], Num(1, lineno=1152, col_offset=27), lineno=1152, col_offset=12)], [], lineno=1150, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('self', Load(), lineno=1154, col_offset=15), lineno=1154, col_offset=11), UnaryOp(Not(), Name('other', Load(), lineno=1154, col_offset=28), lineno=1154, col_offset=24)], lineno=1154, col_offset=11), [Assign([Name('sign', Store(), lineno=1155, col_offset=12)], Call(Name('min', Load(), lineno=1155, col_offset=19), [Attribute(Name('self', Load(), lineno=1155, col_offset=23), '_sign', Load(), lineno=1155, col_offset=23), Attribute(Name('other', Load(), lineno=1155, col_offset=35), '_sign', Load(), lineno=1155, col_offset=35)], [], None, None, lineno=1155, col_offset=19), lineno=1155, col_offset=12), If(Name('negativezero', Load(), lineno=1156, col_offset=15), [Assign([Name('sign', Store(), lineno=1157, col_offset=16)], Num(1, lineno=1157, col_offset=23), lineno=1157, col_offset=16)], [], lineno=1156, col_offset=12), Assign([Name('ans', Store(), lineno=1158, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1158, col_offset=18), [Name('sign', Load(), lineno=1158, col_offset=35), Str('0', lineno=1158, col_offset=41), Name('exp', Load(), lineno=1158, col_offset=46)], [], None, None, lineno=1158, col_offset=18), lineno=1158, col_offset=12), Assign([Name('ans', Store(), lineno=1159, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1159, col_offset=18), '_fix', Load(), lineno=1159, col_offset=18), [Name('context', Load(), lineno=1159, col_offset=27)], [], None, None, lineno=1159, col_offset=18), lineno=1159, col_offset=12), Return(Name('ans', Load(), lineno=1160, col_offset=19), lineno=1160, col_offset=12)], [], lineno=1154, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1161, col_offset=15), lineno=1161, col_offset=11), [Assign([Name('exp', Store(), lineno=1162, col_offset=12)], Call(Name('max', Load(), lineno=1162, col_offset=18), [Name('exp', Load(), lineno=1162, col_offset=22), BinOp(BinOp(Attribute(Name('other', Load(), lineno=1162, col_offset=27), '_exp', Load(), lineno=1162, col_offset=27), Sub(), Attribute(Name('context', Load(), lineno=1162, col_offset=40), 'prec', Load(), lineno=1162, col_offset=40), lineno=1162, col_offset=27), Sub(), Num(1, lineno=1162, col_offset=53), lineno=1162, col_offset=52)], [], None, None, lineno=1162, col_offset=18), lineno=1162, col_offset=12), Assign([Name('ans', Store(), lineno=1163, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=1163, col_offset=18), '_rescale', Load(), lineno=1163, col_offset=18), [Name('exp', Load(), lineno=1163, col_offset=33), Attribute(Name('context', Load(), lineno=1163, col_offset=38), 'rounding', Load(), lineno=1163, col_offset=38)], [], None, None, lineno=1163, col_offset=18), lineno=1163, col_offset=12), Assign([Name('ans', Store(), lineno=1164, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1164, col_offset=18), '_fix', Load(), lineno=1164, col_offset=18), [Name('context', Load(), lineno=1164, col_offset=27)], [], None, None, lineno=1164, col_offset=18), lineno=1164, col_offset=12), Return(Name('ans', Load(), lineno=1165, col_offset=19), lineno=1165, col_offset=12)], [], lineno=1161, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=1166, col_offset=15), lineno=1166, col_offset=11), [Assign([Name('exp', Store(), lineno=1167, col_offset=12)], Call(Name('max', Load(), lineno=1167, col_offset=18), [Name('exp', Load(), lineno=1167, col_offset=22), BinOp(BinOp(Attribute(Name('self', Load(), lineno=1167, col_offset=27), '_exp', Load(), lineno=1167, col_offset=27), Sub(), Attribute(Name('context', Load(), lineno=1167, col_offset=39), 'prec', Load(), lineno=1167, col_offset=39), lineno=1167, col_offset=27), Sub(), Num(1, lineno=1167, col_offset=52), lineno=1167, col_offset=51)], [], None, None, lineno=1167, col_offset=18), lineno=1167, col_offset=12), Assign([Name('ans', Store(), lineno=1168, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1168, col_offset=18), '_rescale', Load(), lineno=1168, col_offset=18), [Name('exp', Load(), lineno=1168, col_offset=32), Attribute(Name('context', Load(), lineno=1168, col_offset=37), 'rounding', Load(), lineno=1168, col_offset=37)], [], None, None, lineno=1168, col_offset=18), lineno=1168, col_offset=12), Assign([Name('ans', Store(), lineno=1169, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1169, col_offset=18), '_fix', Load(), lineno=1169, col_offset=18), [Name('context', Load(), lineno=1169, col_offset=27)], [], None, None, lineno=1169, col_offset=18), lineno=1169, col_offset=12), Return(Name('ans', Load(), lineno=1170, col_offset=19), lineno=1170, col_offset=12)], [], lineno=1166, col_offset=8), Assign([Name('op1', Store(), lineno=1172, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1172, col_offset=14), [Name('self', Load(), lineno=1172, col_offset=23)], [], None, None, lineno=1172, col_offset=14), lineno=1172, col_offset=8), Assign([Name('op2', Store(), lineno=1173, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1173, col_offset=14), [Name('other', Load(), lineno=1173, col_offset=23)], [], None, None, lineno=1173, col_offset=14), lineno=1173, col_offset=8), Assign([Tuple([Name('op1', Store(), lineno=1174, col_offset=8), Name('op2', Store(), lineno=1174, col_offset=13)], Store(), lineno=1174, col_offset=8)], Call(Name('_normalize', Load(), lineno=1174, col_offset=19), [Name('op1', Load(), lineno=1174, col_offset=30), Name('op2', Load(), lineno=1174, col_offset=35), Attribute(Name('context', Load(), lineno=1174, col_offset=40), 'prec', Load(), lineno=1174, col_offset=40)], [], None, None, lineno=1174, col_offset=19), lineno=1174, col_offset=8), Assign([Name('result', Store(), lineno=1176, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1176, col_offset=17), [], [], None, None, lineno=1176, col_offset=17), lineno=1176, col_offset=8), If(Compare(Attribute(Name('op1', Load(), lineno=1177, col_offset=11), 'sign', Load(), lineno=1177, col_offset=11), [NotEq()], [Attribute(Name('op2', Load(), lineno=1177, col_offset=23), 'sign', Load(), lineno=1177, col_offset=23)], lineno=1177, col_offset=11), [If(Compare(Attribute(Name('op1', Load(), lineno=1179, col_offset=15), 'int', Load(), lineno=1179, col_offset=15), [Eq()], [Attribute(Name('op2', Load(), lineno=1179, col_offset=26), 'int', Load(), lineno=1179, col_offset=26)], lineno=1179, col_offset=15), [Assign([Name('ans', Store(), lineno=1180, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=1180, col_offset=22), [Name('negativezero', Load(), lineno=1180, col_offset=39), Str('0', lineno=1180, col_offset=53), Name('exp', Load(), lineno=1180, col_offset=58)], [], None, None, lineno=1180, col_offset=22), lineno=1180, col_offset=16), Assign([Name('ans', Store(), lineno=1181, col_offset=16)], Call(Attribute(Name('ans', Load(), lineno=1181, col_offset=22), '_fix', Load(), lineno=1181, col_offset=22), [Name('context', Load(), lineno=1181, col_offset=31)], [], None, None, lineno=1181, col_offset=22), lineno=1181, col_offset=16), Return(Name('ans', Load(), lineno=1182, col_offset=23), lineno=1182, col_offset=16)], [], lineno=1179, col_offset=12), If(Compare(Attribute(Name('op1', Load(), lineno=1183, col_offset=15), 'int', Load(), lineno=1183, col_offset=15), [Lt()], [Attribute(Name('op2', Load(), lineno=1183, col_offset=25), 'int', Load(), lineno=1183, col_offset=25)], lineno=1183, col_offset=15), [Assign([Tuple([Name('op1', Store(), lineno=1184, col_offset=16), Name('op2', Store(), lineno=1184, col_offset=21)], Store(), lineno=1184, col_offset=16)], Tuple([Name('op2', Load(), lineno=1184, col_offset=27), Name('op1', Load(), lineno=1184, col_offset=32)], Load(), lineno=1184, col_offset=27), lineno=1184, col_offset=16)], [], lineno=1183, col_offset=12), If(Compare(Attribute(Name('op1', Load(), lineno=1186, col_offset=15), 'sign', Load(), lineno=1186, col_offset=15), [Eq()], [Num(1, lineno=1186, col_offset=27)], lineno=1186, col_offset=15), [Assign([Attribute(Name('result', Load(), lineno=1187, col_offset=16), 'sign', Store(), lineno=1187, col_offset=16)], Num(1, lineno=1187, col_offset=30), lineno=1187, col_offset=16), Assign([Tuple([Attribute(Name('op1', Load(), lineno=1188, col_offset=16), 'sign', Store(), lineno=1188, col_offset=16), Attribute(Name('op2', Load(), lineno=1188, col_offset=26), 'sign', Store(), lineno=1188, col_offset=26)], Store(), lineno=1188, col_offset=16)], Tuple([Attribute(Name('op2', Load(), lineno=1188, col_offset=37), 'sign', Load(), lineno=1188, col_offset=37), Attribute(Name('op1', Load(), lineno=1188, col_offset=47), 'sign', Load(), lineno=1188, col_offset=47)], Load(), lineno=1188, col_offset=37), lineno=1188, col_offset=16)], [Assign([Attribute(Name('result', Load(), lineno=1190, col_offset=16), 'sign', Store(), lineno=1190, col_offset=16)], Num(0, lineno=1190, col_offset=30), lineno=1190, col_offset=16)], lineno=1186, col_offset=12)], [If(Compare(Attribute(Name('op1', Load(), lineno=1192, col_offset=13), 'sign', Load(), lineno=1192, col_offset=13), [Eq()], [Num(1, lineno=1192, col_offset=25)], lineno=1192, col_offset=13), [Assign([Attribute(Name('result', Load(), lineno=1193, col_offset=12), 'sign', Store(), lineno=1193, col_offset=12)], Num(1, lineno=1193, col_offset=26), lineno=1193, col_offset=12), Assign([Tuple([Attribute(Name('op1', Load(), lineno=1194, col_offset=12), 'sign', Store(), lineno=1194, col_offset=12), Attribute(Name('op2', Load(), lineno=1194, col_offset=22), 'sign', Store(), lineno=1194, col_offset=22)], Store(), lineno=1194, col_offset=12)], Tuple([Num(0, lineno=1194, col_offset=34), Num(0, lineno=1194, col_offset=37)], Load(), lineno=1194, col_offset=34), lineno=1194, col_offset=12)], [Assign([Attribute(Name('result', Load(), lineno=1196, col_offset=12), 'sign', Store(), lineno=1196, col_offset=12)], Num(0, lineno=1196, col_offset=26), lineno=1196, col_offset=12)], lineno=1192, col_offset=13)], lineno=1177, col_offset=8), If(Compare(Attribute(Name('op2', Load(), lineno=1199, col_offset=11), 'sign', Load(), lineno=1199, col_offset=11), [Eq()], [Num(0, lineno=1199, col_offset=23)], lineno=1199, col_offset=11), [Assign([Attribute(Name('result', Load(), lineno=1200, col_offset=12), 'int', Store(), lineno=1200, col_offset=12)], BinOp(Attribute(Name('op1', Load(), lineno=1200, col_offset=25), 'int', Load(), lineno=1200, col_offset=25), Add(), Attribute(Name('op2', Load(), lineno=1200, col_offset=35), 'int', Load(), lineno=1200, col_offset=35), lineno=1200, col_offset=25), lineno=1200, col_offset=12)], [Assign([Attribute(Name('result', Load(), lineno=1202, col_offset=12), 'int', Store(), lineno=1202, col_offset=12)], BinOp(Attribute(Name('op1', Load(), lineno=1202, col_offset=25), 'int', Load(), lineno=1202, col_offset=25), Sub(), Attribute(Name('op2', Load(), lineno=1202, col_offset=35), 'int', Load(), lineno=1202, col_offset=35), lineno=1202, col_offset=25), lineno=1202, col_offset=12)], lineno=1199, col_offset=8), Assign([Attribute(Name('result', Load(), lineno=1204, col_offset=8), 'exp', Store(), lineno=1204, col_offset=8)], Attribute(Name('op1', Load(), lineno=1204, col_offset=21), 'exp', Load(), lineno=1204, col_offset=21), lineno=1204, col_offset=8), Assign([Name('ans', Store(), lineno=1205, col_offset=8)], Call(Name('Decimal', Load(), lineno=1205, col_offset=14), [Name('result', Load(), lineno=1205, col_offset=22)], [], None, None, lineno=1205, col_offset=14), lineno=1205, col_offset=8), Assign([Name('ans', Store(), lineno=1206, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=1206, col_offset=14), '_fix', Load(), lineno=1206, col_offset=14), [Name('context', Load(), lineno=1206, col_offset=23)], [], None, None, lineno=1206, col_offset=14), lineno=1206, col_offset=8), Return(Name('ans', Load(), lineno=1207, col_offset=15), lineno=1207, col_offset=8)], [], lineno=1123, col_offset=4), Assign([Name('__radd__', Store(), lineno=1209, col_offset=4)], Name('__add__', Load(), lineno=1209, col_offset=15), lineno=1209, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=1211, col_offset=16), Name('other', Param(), lineno=1211, col_offset=22), Name('context', Param(), lineno=1211, col_offset=29)], None, None, [Name('None', Load(), lineno=1211, col_offset=37)]), [Expr(Str('Return self - other', lineno=1212, col_offset=8), lineno=1212, col_offset=8), Assign([Name('other', Store(), lineno=1213, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1213, col_offset=16), [Name('other', Load(), lineno=1213, col_offset=31)], [], None, None, lineno=1213, col_offset=16), lineno=1213, col_offset=8), If(Compare(Name('other', Load(), lineno=1214, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1214, col_offset=20)], lineno=1214, col_offset=11), [Return(Name('other', Load(), lineno=1215, col_offset=19), lineno=1215, col_offset=12)], [], lineno=1214, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1217, col_offset=11), '_is_special', Load(), lineno=1217, col_offset=11), Attribute(Name('other', Load(), lineno=1217, col_offset=31), '_is_special', Load(), lineno=1217, col_offset=31)], lineno=1217, col_offset=11), [Assign([Name('ans', Store(), lineno=1218, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1218, col_offset=18), '_check_nans', Load(), lineno=1218, col_offset=18), [Name('other', Load(), lineno=1218, col_offset=35)], [keyword('context', Name('context', Load(), lineno=1218, col_offset=50))], None, None, lineno=1218, col_offset=18), lineno=1218, col_offset=12), If(Name('ans', Load(), lineno=1219, col_offset=15), [Return(Name('ans', Load(), lineno=1220, col_offset=23), lineno=1220, col_offset=16)], [], lineno=1219, col_offset=12)], [], lineno=1217, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=1223, col_offset=15), '__add__', Load(), lineno=1223, col_offset=15), [Call(Attribute(Name('other', Load(), lineno=1223, col_offset=28), 'copy_negate', Load(), lineno=1223, col_offset=28), [], [], None, None, lineno=1223, col_offset=28)], [keyword('context', Name('context', Load(), lineno=1223, col_offset=57))], None, None, lineno=1223, col_offset=15), lineno=1223, col_offset=8)], [], lineno=1211, col_offset=4), FunctionDef('__rsub__', arguments([Name('self', Param(), lineno=1225, col_offset=17), Name('other', Param(), lineno=1225, col_offset=23), Name('context', Param(), lineno=1225, col_offset=30)], None, None, [Name('None', Load(), lineno=1225, col_offset=38)]), [Expr(Str('Return other - self', lineno=1226, col_offset=8), lineno=1226, col_offset=8), Assign([Name('other', Store(), lineno=1227, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1227, col_offset=16), [Name('other', Load(), lineno=1227, col_offset=31)], [], None, None, lineno=1227, col_offset=16), lineno=1227, col_offset=8), If(Compare(Name('other', Load(), lineno=1228, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1228, col_offset=20)], lineno=1228, col_offset=11), [Return(Name('other', Load(), lineno=1229, col_offset=19), lineno=1229, col_offset=12)], [], lineno=1228, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=1231, col_offset=15), '__sub__', Load(), lineno=1231, col_offset=15), [Name('self', Load(), lineno=1231, col_offset=29)], [keyword('context', Name('context', Load(), lineno=1231, col_offset=43))], None, None, lineno=1231, col_offset=15), lineno=1231, col_offset=8)], [], lineno=1225, col_offset=4), FunctionDef('__mul__', arguments([Name('self', Param(), lineno=1233, col_offset=16), Name('other', Param(), lineno=1233, col_offset=22), Name('context', Param(), lineno=1233, col_offset=29)], None, None, [Name('None', Load(), lineno=1233, col_offset=37)]), [Expr(Str('Return self * other.\n\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        ', lineno=1237, col_offset=-1), lineno=1237, col_offset=-1), Assign([Name('other', Store(), lineno=1238, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1238, col_offset=16), [Name('other', Load(), lineno=1238, col_offset=31)], [], None, None, lineno=1238, col_offset=16), lineno=1238, col_offset=8), If(Compare(Name('other', Load(), lineno=1239, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1239, col_offset=20)], lineno=1239, col_offset=11), [Return(Name('other', Load(), lineno=1240, col_offset=19), lineno=1240, col_offset=12)], [], lineno=1239, col_offset=8), If(Compare(Name('context', Load(), lineno=1242, col_offset=11), [Is()], [Name('None', Load(), lineno=1242, col_offset=22)], lineno=1242, col_offset=11), [Assign([Name('context', Store(), lineno=1243, col_offset=12)], Call(Name('getcontext', Load(), lineno=1243, col_offset=22), [], [], None, None, lineno=1243, col_offset=22), lineno=1243, col_offset=12)], [], lineno=1242, col_offset=8), Assign([Name('resultsign', Store(), lineno=1245, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1245, col_offset=21), '_sign', Load(), lineno=1245, col_offset=21), BitXor(), Attribute(Name('other', Load(), lineno=1245, col_offset=34), '_sign', Load(), lineno=1245, col_offset=34), lineno=1245, col_offset=21), lineno=1245, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1247, col_offset=11), '_is_special', Load(), lineno=1247, col_offset=11), Attribute(Name('other', Load(), lineno=1247, col_offset=31), '_is_special', Load(), lineno=1247, col_offset=31)], lineno=1247, col_offset=11), [Assign([Name('ans', Store(), lineno=1248, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1248, col_offset=18), '_check_nans', Load(), lineno=1248, col_offset=18), [Name('other', Load(), lineno=1248, col_offset=35), Name('context', Load(), lineno=1248, col_offset=42)], [], None, None, lineno=1248, col_offset=18), lineno=1248, col_offset=12), If(Name('ans', Load(), lineno=1249, col_offset=15), [Return(Name('ans', Load(), lineno=1250, col_offset=23), lineno=1250, col_offset=16)], [], lineno=1249, col_offset=12), If(Call(Attribute(Name('self', Load(), lineno=1252, col_offset=15), '_isinfinity', Load(), lineno=1252, col_offset=15), [], [], None, None, lineno=1252, col_offset=15), [If(UnaryOp(Not(), Name('other', Load(), lineno=1253, col_offset=23), lineno=1253, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=1254, col_offset=27), '_raise_error', Load(), lineno=1254, col_offset=27), [Name('InvalidOperation', Load(), lineno=1254, col_offset=48), Str('(+-)INF * 0', lineno=1254, col_offset=66)], [], None, None, lineno=1254, col_offset=27), lineno=1254, col_offset=20)], [], lineno=1253, col_offset=16), Return(Subscript(Name('_SignedInfinity', Load(), lineno=1255, col_offset=23), Index(Name('resultsign', Load(), lineno=1255, col_offset=39)), Load(), lineno=1255, col_offset=23), lineno=1255, col_offset=16)], [], lineno=1252, col_offset=12), If(Call(Attribute(Name('other', Load(), lineno=1257, col_offset=15), '_isinfinity', Load(), lineno=1257, col_offset=15), [], [], None, None, lineno=1257, col_offset=15), [If(UnaryOp(Not(), Name('self', Load(), lineno=1258, col_offset=23), lineno=1258, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=1259, col_offset=27), '_raise_error', Load(), lineno=1259, col_offset=27), [Name('InvalidOperation', Load(), lineno=1259, col_offset=48), Str('0 * (+-)INF', lineno=1259, col_offset=66)], [], None, None, lineno=1259, col_offset=27), lineno=1259, col_offset=20)], [], lineno=1258, col_offset=16), Return(Subscript(Name('_SignedInfinity', Load(), lineno=1260, col_offset=23), Index(Name('resultsign', Load(), lineno=1260, col_offset=39)), Load(), lineno=1260, col_offset=23), lineno=1260, col_offset=16)], [], lineno=1257, col_offset=12)], [], lineno=1247, col_offset=8), Assign([Name('resultexp', Store(), lineno=1262, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1262, col_offset=20), '_exp', Load(), lineno=1262, col_offset=20), Add(), Attribute(Name('other', Load(), lineno=1262, col_offset=32), '_exp', Load(), lineno=1262, col_offset=32), lineno=1262, col_offset=20), lineno=1262, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('self', Load(), lineno=1265, col_offset=15), lineno=1265, col_offset=11), UnaryOp(Not(), Name('other', Load(), lineno=1265, col_offset=27), lineno=1265, col_offset=23)], lineno=1265, col_offset=11), [Assign([Name('ans', Store(), lineno=1266, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1266, col_offset=18), [Name('resultsign', Load(), lineno=1266, col_offset=35), Str('0', lineno=1266, col_offset=47), Name('resultexp', Load(), lineno=1266, col_offset=52)], [], None, None, lineno=1266, col_offset=18), lineno=1266, col_offset=12), Assign([Name('ans', Store(), lineno=1268, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1268, col_offset=18), '_fix', Load(), lineno=1268, col_offset=18), [Name('context', Load(), lineno=1268, col_offset=27)], [], None, None, lineno=1268, col_offset=18), lineno=1268, col_offset=12), Return(Name('ans', Load(), lineno=1269, col_offset=19), lineno=1269, col_offset=12)], [], lineno=1265, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1272, col_offset=11), '_int', Load(), lineno=1272, col_offset=11), [Eq()], [Str('1', lineno=1272, col_offset=24)], lineno=1272, col_offset=11), [Assign([Name('ans', Store(), lineno=1273, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1273, col_offset=18), [Name('resultsign', Load(), lineno=1273, col_offset=35), Attribute(Name('other', Load(), lineno=1273, col_offset=47), '_int', Load(), lineno=1273, col_offset=47), Name('resultexp', Load(), lineno=1273, col_offset=59)], [], None, None, lineno=1273, col_offset=18), lineno=1273, col_offset=12), Assign([Name('ans', Store(), lineno=1274, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1274, col_offset=18), '_fix', Load(), lineno=1274, col_offset=18), [Name('context', Load(), lineno=1274, col_offset=27)], [], None, None, lineno=1274, col_offset=18), lineno=1274, col_offset=12), Return(Name('ans', Load(), lineno=1275, col_offset=19), lineno=1275, col_offset=12)], [], lineno=1272, col_offset=8), If(Compare(Attribute(Name('other', Load(), lineno=1276, col_offset=11), '_int', Load(), lineno=1276, col_offset=11), [Eq()], [Str('1', lineno=1276, col_offset=25)], lineno=1276, col_offset=11), [Assign([Name('ans', Store(), lineno=1277, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1277, col_offset=18), [Name('resultsign', Load(), lineno=1277, col_offset=35), Attribute(Name('self', Load(), lineno=1277, col_offset=47), '_int', Load(), lineno=1277, col_offset=47), Name('resultexp', Load(), lineno=1277, col_offset=58)], [], None, None, lineno=1277, col_offset=18), lineno=1277, col_offset=12), Assign([Name('ans', Store(), lineno=1278, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=1278, col_offset=18), '_fix', Load(), lineno=1278, col_offset=18), [Name('context', Load(), lineno=1278, col_offset=27)], [], None, None, lineno=1278, col_offset=18), lineno=1278, col_offset=12), Return(Name('ans', Load(), lineno=1279, col_offset=19), lineno=1279, col_offset=12)], [], lineno=1276, col_offset=8), Assign([Name('op1', Store(), lineno=1281, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1281, col_offset=14), [Name('self', Load(), lineno=1281, col_offset=23)], [], None, None, lineno=1281, col_offset=14), lineno=1281, col_offset=8), Assign([Name('op2', Store(), lineno=1282, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1282, col_offset=14), [Name('other', Load(), lineno=1282, col_offset=23)], [], None, None, lineno=1282, col_offset=14), lineno=1282, col_offset=8), Assign([Name('ans', Store(), lineno=1284, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=1284, col_offset=14), [Name('resultsign', Load(), lineno=1284, col_offset=31), Call(Name('str', Load(), lineno=1284, col_offset=43), [BinOp(Attribute(Name('op1', Load(), lineno=1284, col_offset=47), 'int', Load(), lineno=1284, col_offset=47), Mult(), Attribute(Name('op2', Load(), lineno=1284, col_offset=57), 'int', Load(), lineno=1284, col_offset=57), lineno=1284, col_offset=47)], [], None, None, lineno=1284, col_offset=43), Name('resultexp', Load(), lineno=1284, col_offset=67)], [], None, None, lineno=1284, col_offset=14), lineno=1284, col_offset=8), Assign([Name('ans', Store(), lineno=1285, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=1285, col_offset=14), '_fix', Load(), lineno=1285, col_offset=14), [Name('context', Load(), lineno=1285, col_offset=23)], [], None, None, lineno=1285, col_offset=14), lineno=1285, col_offset=8), Return(Name('ans', Load(), lineno=1287, col_offset=15), lineno=1287, col_offset=8)], [], lineno=1233, col_offset=4), Assign([Name('__rmul__', Store(), lineno=1288, col_offset=4)], Name('__mul__', Load(), lineno=1288, col_offset=15), lineno=1288, col_offset=4), FunctionDef('__truediv__', arguments([Name('self', Param(), lineno=1290, col_offset=20), Name('other', Param(), lineno=1290, col_offset=26), Name('context', Param(), lineno=1290, col_offset=33)], None, None, [Name('None', Load(), lineno=1290, col_offset=41)]), [Expr(Str('Return self / other.', lineno=1291, col_offset=8), lineno=1291, col_offset=8), Assign([Name('other', Store(), lineno=1292, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1292, col_offset=16), [Name('other', Load(), lineno=1292, col_offset=31)], [], None, None, lineno=1292, col_offset=16), lineno=1292, col_offset=8), If(Compare(Name('other', Load(), lineno=1293, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1293, col_offset=20)], lineno=1293, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=1294, col_offset=19), lineno=1294, col_offset=12)], [], lineno=1293, col_offset=8), If(Compare(Name('context', Load(), lineno=1296, col_offset=11), [Is()], [Name('None', Load(), lineno=1296, col_offset=22)], lineno=1296, col_offset=11), [Assign([Name('context', Store(), lineno=1297, col_offset=12)], Call(Name('getcontext', Load(), lineno=1297, col_offset=22), [], [], None, None, lineno=1297, col_offset=22), lineno=1297, col_offset=12)], [], lineno=1296, col_offset=8), Assign([Name('sign', Store(), lineno=1299, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1299, col_offset=15), '_sign', Load(), lineno=1299, col_offset=15), BitXor(), Attribute(Name('other', Load(), lineno=1299, col_offset=28), '_sign', Load(), lineno=1299, col_offset=28), lineno=1299, col_offset=15), lineno=1299, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1301, col_offset=11), '_is_special', Load(), lineno=1301, col_offset=11), Attribute(Name('other', Load(), lineno=1301, col_offset=31), '_is_special', Load(), lineno=1301, col_offset=31)], lineno=1301, col_offset=11), [Assign([Name('ans', Store(), lineno=1302, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1302, col_offset=18), '_check_nans', Load(), lineno=1302, col_offset=18), [Name('other', Load(), lineno=1302, col_offset=35), Name('context', Load(), lineno=1302, col_offset=42)], [], None, None, lineno=1302, col_offset=18), lineno=1302, col_offset=12), If(Name('ans', Load(), lineno=1303, col_offset=15), [Return(Name('ans', Load(), lineno=1304, col_offset=23), lineno=1304, col_offset=16)], [], lineno=1303, col_offset=12), If(BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=1306, col_offset=15), '_isinfinity', Load(), lineno=1306, col_offset=15), [], [], None, None, lineno=1306, col_offset=15), Call(Attribute(Name('other', Load(), lineno=1306, col_offset=38), '_isinfinity', Load(), lineno=1306, col_offset=38), [], [], None, None, lineno=1306, col_offset=38)], lineno=1306, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1307, col_offset=23), '_raise_error', Load(), lineno=1307, col_offset=23), [Name('InvalidOperation', Load(), lineno=1307, col_offset=44), Str('(+-)INF/(+-)INF', lineno=1307, col_offset=62)], [], None, None, lineno=1307, col_offset=23), lineno=1307, col_offset=16)], [], lineno=1306, col_offset=12), If(Call(Attribute(Name('self', Load(), lineno=1309, col_offset=15), '_isinfinity', Load(), lineno=1309, col_offset=15), [], [], None, None, lineno=1309, col_offset=15), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=1310, col_offset=23), Index(Name('sign', Load(), lineno=1310, col_offset=39)), Load(), lineno=1310, col_offset=23), lineno=1310, col_offset=16)], [], lineno=1309, col_offset=12), If(Call(Attribute(Name('other', Load(), lineno=1312, col_offset=15), '_isinfinity', Load(), lineno=1312, col_offset=15), [], [], None, None, lineno=1312, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1313, col_offset=16), '_raise_error', Load(), lineno=1313, col_offset=16), [Name('Clamped', Load(), lineno=1313, col_offset=37), Str('Division by infinity', lineno=1313, col_offset=46)], [], None, None, lineno=1313, col_offset=16), lineno=1313, col_offset=16), Return(Call(Name('_dec_from_triple', Load(), lineno=1314, col_offset=23), [Name('sign', Load(), lineno=1314, col_offset=40), Str('0', lineno=1314, col_offset=46), Call(Attribute(Name('context', Load(), lineno=1314, col_offset=51), 'Etiny', Load(), lineno=1314, col_offset=51), [], [], None, None, lineno=1314, col_offset=51)], [], None, None, lineno=1314, col_offset=23), lineno=1314, col_offset=16)], [], lineno=1312, col_offset=12)], [], lineno=1301, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=1317, col_offset=15), lineno=1317, col_offset=11), [If(UnaryOp(Not(), Name('self', Load(), lineno=1318, col_offset=19), lineno=1318, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1319, col_offset=23), '_raise_error', Load(), lineno=1319, col_offset=23), [Name('DivisionUndefined', Load(), lineno=1319, col_offset=44), Str('0 / 0', lineno=1319, col_offset=63)], [], None, None, lineno=1319, col_offset=23), lineno=1319, col_offset=16)], [], lineno=1318, col_offset=12), Return(Call(Attribute(Name('context', Load(), lineno=1320, col_offset=19), '_raise_error', Load(), lineno=1320, col_offset=19), [Name('DivisionByZero', Load(), lineno=1320, col_offset=40), Str('x / 0', lineno=1320, col_offset=56), Name('sign', Load(), lineno=1320, col_offset=65)], [], None, None, lineno=1320, col_offset=19), lineno=1320, col_offset=12)], [], lineno=1317, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1322, col_offset=15), lineno=1322, col_offset=11), [Assign([Name('exp', Store(), lineno=1323, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=1323, col_offset=18), '_exp', Load(), lineno=1323, col_offset=18), Sub(), Attribute(Name('other', Load(), lineno=1323, col_offset=30), '_exp', Load(), lineno=1323, col_offset=30), lineno=1323, col_offset=18), lineno=1323, col_offset=12), Assign([Name('coeff', Store(), lineno=1324, col_offset=12)], Num(0, lineno=1324, col_offset=20), lineno=1324, col_offset=12)], [Assign([Name('shift', Store(), lineno=1327, col_offset=12)], BinOp(BinOp(BinOp(Call(Name('len', Load(), lineno=1327, col_offset=20), [Attribute(Name('other', Load(), lineno=1327, col_offset=24), '_int', Load(), lineno=1327, col_offset=24)], [], None, None, lineno=1327, col_offset=20), Sub(), Call(Name('len', Load(), lineno=1327, col_offset=38), [Attribute(Name('self', Load(), lineno=1327, col_offset=42), '_int', Load(), lineno=1327, col_offset=42)], [], None, None, lineno=1327, col_offset=38), lineno=1327, col_offset=20), Add(), Attribute(Name('context', Load(), lineno=1327, col_offset=55), 'prec', Load(), lineno=1327, col_offset=55), lineno=1327, col_offset=53), Add(), Num(1, lineno=1327, col_offset=70), lineno=1327, col_offset=68), lineno=1327, col_offset=12), Assign([Name('exp', Store(), lineno=1328, col_offset=12)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=1328, col_offset=18), '_exp', Load(), lineno=1328, col_offset=18), Sub(), Attribute(Name('other', Load(), lineno=1328, col_offset=30), '_exp', Load(), lineno=1328, col_offset=30), lineno=1328, col_offset=18), Sub(), Name('shift', Load(), lineno=1328, col_offset=43), lineno=1328, col_offset=41), lineno=1328, col_offset=12), Assign([Name('op1', Store(), lineno=1329, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=1329, col_offset=18), [Name('self', Load(), lineno=1329, col_offset=27)], [], None, None, lineno=1329, col_offset=18), lineno=1329, col_offset=12), Assign([Name('op2', Store(), lineno=1330, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=1330, col_offset=18), [Name('other', Load(), lineno=1330, col_offset=27)], [], None, None, lineno=1330, col_offset=18), lineno=1330, col_offset=12), If(Compare(Name('shift', Load(), lineno=1331, col_offset=15), [GtE()], [Num(0, lineno=1331, col_offset=24)], lineno=1331, col_offset=15), [Assign([Tuple([Name('coeff', Store(), lineno=1332, col_offset=16), Name('remainder', Store(), lineno=1332, col_offset=23)], Store(), lineno=1332, col_offset=16)], Call(Name('divmod', Load(), lineno=1332, col_offset=35), [BinOp(Attribute(Name('op1', Load(), lineno=1332, col_offset=42), 'int', Load(), lineno=1332, col_offset=42), Mult(), BinOp(Num(10, lineno=1332, col_offset=52), Pow(), Name('shift', Load(), lineno=1332, col_offset=56), lineno=1332, col_offset=52), lineno=1332, col_offset=42), Attribute(Name('op2', Load(), lineno=1332, col_offset=63), 'int', Load(), lineno=1332, col_offset=63)], [], None, None, lineno=1332, col_offset=35), lineno=1332, col_offset=16)], [Assign([Tuple([Name('coeff', Store(), lineno=1334, col_offset=16), Name('remainder', Store(), lineno=1334, col_offset=23)], Store(), lineno=1334, col_offset=16)], Call(Name('divmod', Load(), lineno=1334, col_offset=35), [Attribute(Name('op1', Load(), lineno=1334, col_offset=42), 'int', Load(), lineno=1334, col_offset=42), BinOp(Attribute(Name('op2', Load(), lineno=1334, col_offset=51), 'int', Load(), lineno=1334, col_offset=51), Mult(), BinOp(Num(10, lineno=1334, col_offset=61), Pow(), UnaryOp(USub(), Name('shift', Load(), lineno=1334, col_offset=66), lineno=1334, col_offset=65), lineno=1334, col_offset=61), lineno=1334, col_offset=51)], [], None, None, lineno=1334, col_offset=35), lineno=1334, col_offset=16)], lineno=1331, col_offset=12), If(Name('remainder', Load(), lineno=1335, col_offset=15), [If(Compare(BinOp(Name('coeff', Load(), lineno=1337, col_offset=19), Mod(), Num(5, lineno=1337, col_offset=27), lineno=1337, col_offset=19), [Eq()], [Num(0, lineno=1337, col_offset=32)], lineno=1337, col_offset=19), [AugAssign(Name('coeff', Store(), lineno=1338, col_offset=20), Add(), Num(1, lineno=1338, col_offset=29), lineno=1338, col_offset=20)], [], lineno=1337, col_offset=16)], [Assign([Name('ideal_exp', Store(), lineno=1341, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=1341, col_offset=28), '_exp', Load(), lineno=1341, col_offset=28), Sub(), Attribute(Name('other', Load(), lineno=1341, col_offset=40), '_exp', Load(), lineno=1341, col_offset=40), lineno=1341, col_offset=28), lineno=1341, col_offset=16), While(BoolOp(And(), [Compare(Name('exp', Load(), lineno=1342, col_offset=22), [Lt()], [Name('ideal_exp', Load(), lineno=1342, col_offset=28)], lineno=1342, col_offset=22), Compare(BinOp(Name('coeff', Load(), lineno=1342, col_offset=42), Mod(), Num(10, lineno=1342, col_offset=50), lineno=1342, col_offset=42), [Eq()], [Num(0, lineno=1342, col_offset=56)], lineno=1342, col_offset=42)], lineno=1342, col_offset=22), [AugAssign(Name('coeff', Store(), lineno=1343, col_offset=20), FloorDiv(), Num(10, lineno=1343, col_offset=30), lineno=1343, col_offset=20), AugAssign(Name('exp', Store(), lineno=1344, col_offset=20), Add(), Num(1, lineno=1344, col_offset=27), lineno=1344, col_offset=20)], [], lineno=1342, col_offset=16)], lineno=1335, col_offset=12)], lineno=1322, col_offset=8), Assign([Name('ans', Store(), lineno=1346, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=1346, col_offset=14), [Name('sign', Load(), lineno=1346, col_offset=31), Call(Name('str', Load(), lineno=1346, col_offset=37), [Name('coeff', Load(), lineno=1346, col_offset=41)], [], None, None, lineno=1346, col_offset=37), Name('exp', Load(), lineno=1346, col_offset=49)], [], None, None, lineno=1346, col_offset=14), lineno=1346, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=1347, col_offset=15), '_fix', Load(), lineno=1347, col_offset=15), [Name('context', Load(), lineno=1347, col_offset=24)], [], None, None, lineno=1347, col_offset=15), lineno=1347, col_offset=8)], [], lineno=1290, col_offset=4), FunctionDef('_divide', arguments([Name('self', Param(), lineno=1349, col_offset=16), Name('other', Param(), lineno=1349, col_offset=22), Name('context', Param(), lineno=1349, col_offset=29)], None, None, []), [Expr(Str('Return (self // other, self % other), to context.prec precision.\n\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        ', lineno=1354, col_offset=-1), lineno=1354, col_offset=-1), Assign([Name('sign', Store(), lineno=1355, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1355, col_offset=15), '_sign', Load(), lineno=1355, col_offset=15), BitXor(), Attribute(Name('other', Load(), lineno=1355, col_offset=28), '_sign', Load(), lineno=1355, col_offset=28), lineno=1355, col_offset=15), lineno=1355, col_offset=8), If(Call(Attribute(Name('other', Load(), lineno=1356, col_offset=11), '_isinfinity', Load(), lineno=1356, col_offset=11), [], [], None, None, lineno=1356, col_offset=11), [Assign([Name('ideal_exp', Store(), lineno=1357, col_offset=12)], Attribute(Name('self', Load(), lineno=1357, col_offset=24), '_exp', Load(), lineno=1357, col_offset=24), lineno=1357, col_offset=12)], [Assign([Name('ideal_exp', Store(), lineno=1359, col_offset=12)], Call(Name('min', Load(), lineno=1359, col_offset=24), [Attribute(Name('self', Load(), lineno=1359, col_offset=28), '_exp', Load(), lineno=1359, col_offset=28), Attribute(Name('other', Load(), lineno=1359, col_offset=39), '_exp', Load(), lineno=1359, col_offset=39)], [], None, None, lineno=1359, col_offset=24), lineno=1359, col_offset=12)], lineno=1356, col_offset=8), Assign([Name('expdiff', Store(), lineno=1361, col_offset=8)], BinOp(Call(Attribute(Name('self', Load(), lineno=1361, col_offset=18), 'adjusted', Load(), lineno=1361, col_offset=18), [], [], None, None, lineno=1361, col_offset=18), Sub(), Call(Attribute(Name('other', Load(), lineno=1361, col_offset=36), 'adjusted', Load(), lineno=1361, col_offset=36), [], [], None, None, lineno=1361, col_offset=36), lineno=1361, col_offset=18), lineno=1361, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('self', Load(), lineno=1362, col_offset=15), lineno=1362, col_offset=11), Call(Attribute(Name('other', Load(), lineno=1362, col_offset=23), '_isinfinity', Load(), lineno=1362, col_offset=23), [], [], None, None, lineno=1362, col_offset=23), Compare(Name('expdiff', Load(), lineno=1362, col_offset=46), [LtE()], [Num(-2, lineno=1362, col_offset=58)], lineno=1362, col_offset=46)], lineno=1362, col_offset=11), [Return(Tuple([Call(Name('_dec_from_triple', Load(), lineno=1363, col_offset=20), [Name('sign', Load(), lineno=1363, col_offset=37), Str('0', lineno=1363, col_offset=43), Num(0, lineno=1363, col_offset=48)], [], None, None, lineno=1363, col_offset=20), Call(Attribute(Name('self', Load(), lineno=1364, col_offset=20), '_rescale', Load(), lineno=1364, col_offset=20), [Name('ideal_exp', Load(), lineno=1364, col_offset=34), Attribute(Name('context', Load(), lineno=1364, col_offset=45), 'rounding', Load(), lineno=1364, col_offset=45)], [], None, None, lineno=1364, col_offset=20)], Load(), lineno=1363, col_offset=20), lineno=1363, col_offset=12)], [], lineno=1362, col_offset=8), If(Compare(Name('expdiff', Load(), lineno=1365, col_offset=11), [LtE()], [Attribute(Name('context', Load(), lineno=1365, col_offset=22), 'prec', Load(), lineno=1365, col_offset=22)], lineno=1365, col_offset=11), [Assign([Name('op1', Store(), lineno=1366, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=1366, col_offset=18), [Name('self', Load(), lineno=1366, col_offset=27)], [], None, None, lineno=1366, col_offset=18), lineno=1366, col_offset=12), Assign([Name('op2', Store(), lineno=1367, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=1367, col_offset=18), [Name('other', Load(), lineno=1367, col_offset=27)], [], None, None, lineno=1367, col_offset=18), lineno=1367, col_offset=12), If(Compare(Attribute(Name('op1', Load(), lineno=1368, col_offset=15), 'exp', Load(), lineno=1368, col_offset=15), [GtE()], [Attribute(Name('op2', Load(), lineno=1368, col_offset=26), 'exp', Load(), lineno=1368, col_offset=26)], lineno=1368, col_offset=15), [AugAssign(Attribute(Name('op1', Load(), lineno=1369, col_offset=16), 'int', Store(), lineno=1369, col_offset=16), Mult(), BinOp(Num(10, lineno=1369, col_offset=27), Pow(), BinOp(Attribute(Name('op1', Load(), lineno=1369, col_offset=32), 'exp', Load(), lineno=1369, col_offset=32), Sub(), Attribute(Name('op2', Load(), lineno=1369, col_offset=42), 'exp', Load(), lineno=1369, col_offset=42), lineno=1369, col_offset=32), lineno=1369, col_offset=27), lineno=1369, col_offset=16)], [AugAssign(Attribute(Name('op2', Load(), lineno=1371, col_offset=16), 'int', Store(), lineno=1371, col_offset=16), Mult(), BinOp(Num(10, lineno=1371, col_offset=27), Pow(), BinOp(Attribute(Name('op2', Load(), lineno=1371, col_offset=32), 'exp', Load(), lineno=1371, col_offset=32), Sub(), Attribute(Name('op1', Load(), lineno=1371, col_offset=42), 'exp', Load(), lineno=1371, col_offset=42), lineno=1371, col_offset=32), lineno=1371, col_offset=27), lineno=1371, col_offset=16)], lineno=1368, col_offset=12), Assign([Tuple([Name('q', Store(), lineno=1372, col_offset=12), Name('r', Store(), lineno=1372, col_offset=15)], Store(), lineno=1372, col_offset=12)], Call(Name('divmod', Load(), lineno=1372, col_offset=19), [Attribute(Name('op1', Load(), lineno=1372, col_offset=26), 'int', Load(), lineno=1372, col_offset=26), Attribute(Name('op2', Load(), lineno=1372, col_offset=35), 'int', Load(), lineno=1372, col_offset=35)], [], None, None, lineno=1372, col_offset=19), lineno=1372, col_offset=12), If(Compare(Name('q', Load(), lineno=1373, col_offset=15), [Lt()], [BinOp(Num(10, lineno=1373, col_offset=19), Pow(), Attribute(Name('context', Load(), lineno=1373, col_offset=23), 'prec', Load(), lineno=1373, col_offset=23), lineno=1373, col_offset=19)], lineno=1373, col_offset=15), [Return(Tuple([Call(Name('_dec_from_triple', Load(), lineno=1374, col_offset=24), [Name('sign', Load(), lineno=1374, col_offset=41), Call(Name('str', Load(), lineno=1374, col_offset=47), [Name('q', Load(), lineno=1374, col_offset=51)], [], None, None, lineno=1374, col_offset=47), Num(0, lineno=1374, col_offset=55)], [], None, None, lineno=1374, col_offset=24), Call(Name('_dec_from_triple', Load(), lineno=1375, col_offset=24), [Attribute(Name('self', Load(), lineno=1375, col_offset=41), '_sign', Load(), lineno=1375, col_offset=41), Call(Name('str', Load(), lineno=1375, col_offset=53), [Name('r', Load(), lineno=1375, col_offset=57)], [], None, None, lineno=1375, col_offset=53), Name('ideal_exp', Load(), lineno=1375, col_offset=61)], [], None, None, lineno=1375, col_offset=24)], Load(), lineno=1374, col_offset=24), lineno=1374, col_offset=16)], [], lineno=1373, col_offset=12)], [], lineno=1365, col_offset=8), Assign([Name('ans', Store(), lineno=1378, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=1378, col_offset=14), '_raise_error', Load(), lineno=1378, col_offset=14), [Name('DivisionImpossible', Load(), lineno=1378, col_offset=35), Str('quotient too large in //, % or divmod', lineno=1379, col_offset=35)], [], None, None, lineno=1378, col_offset=14), lineno=1378, col_offset=8), Return(Tuple([Name('ans', Load(), lineno=1380, col_offset=15), Name('ans', Load(), lineno=1380, col_offset=20)], Load(), lineno=1380, col_offset=15), lineno=1380, col_offset=8)], [], lineno=1349, col_offset=4), FunctionDef('__rtruediv__', arguments([Name('self', Param(), lineno=1382, col_offset=21), Name('other', Param(), lineno=1382, col_offset=27), Name('context', Param(), lineno=1382, col_offset=34)], None, None, [Name('None', Load(), lineno=1382, col_offset=42)]), [Expr(Str('Swaps self/other and returns __truediv__.', lineno=1383, col_offset=8), lineno=1383, col_offset=8), Assign([Name('other', Store(), lineno=1384, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1384, col_offset=16), [Name('other', Load(), lineno=1384, col_offset=31)], [], None, None, lineno=1384, col_offset=16), lineno=1384, col_offset=8), If(Compare(Name('other', Load(), lineno=1385, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1385, col_offset=20)], lineno=1385, col_offset=11), [Return(Name('other', Load(), lineno=1386, col_offset=19), lineno=1386, col_offset=12)], [], lineno=1385, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=1387, col_offset=15), '__truediv__', Load(), lineno=1387, col_offset=15), [Name('self', Load(), lineno=1387, col_offset=33)], [keyword('context', Name('context', Load(), lineno=1387, col_offset=47))], None, None, lineno=1387, col_offset=15), lineno=1387, col_offset=8)], [], lineno=1382, col_offset=4), Assign([Name('__div__', Store(), lineno=1389, col_offset=4)], Name('__truediv__', Load(), lineno=1389, col_offset=14), lineno=1389, col_offset=4), Assign([Name('__rdiv__', Store(), lineno=1390, col_offset=4)], Name('__rtruediv__', Load(), lineno=1390, col_offset=15), lineno=1390, col_offset=4), FunctionDef('__divmod__', arguments([Name('self', Param(), lineno=1392, col_offset=19), Name('other', Param(), lineno=1392, col_offset=25), Name('context', Param(), lineno=1392, col_offset=32)], None, None, [Name('None', Load(), lineno=1392, col_offset=40)]), [Expr(Str('\n        Return (self // other, self % other)\n        ', lineno=1395, col_offset=-1), lineno=1395, col_offset=-1), Assign([Name('other', Store(), lineno=1396, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1396, col_offset=16), [Name('other', Load(), lineno=1396, col_offset=31)], [], None, None, lineno=1396, col_offset=16), lineno=1396, col_offset=8), If(Compare(Name('other', Load(), lineno=1397, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1397, col_offset=20)], lineno=1397, col_offset=11), [Return(Name('other', Load(), lineno=1398, col_offset=19), lineno=1398, col_offset=12)], [], lineno=1397, col_offset=8), If(Compare(Name('context', Load(), lineno=1400, col_offset=11), [Is()], [Name('None', Load(), lineno=1400, col_offset=22)], lineno=1400, col_offset=11), [Assign([Name('context', Store(), lineno=1401, col_offset=12)], Call(Name('getcontext', Load(), lineno=1401, col_offset=22), [], [], None, None, lineno=1401, col_offset=22), lineno=1401, col_offset=12)], [], lineno=1400, col_offset=8), Assign([Name('ans', Store(), lineno=1403, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1403, col_offset=14), '_check_nans', Load(), lineno=1403, col_offset=14), [Name('other', Load(), lineno=1403, col_offset=31), Name('context', Load(), lineno=1403, col_offset=38)], [], None, None, lineno=1403, col_offset=14), lineno=1403, col_offset=8), If(Name('ans', Load(), lineno=1404, col_offset=11), [Return(Tuple([Name('ans', Load(), lineno=1405, col_offset=20), Name('ans', Load(), lineno=1405, col_offset=25)], Load(), lineno=1405, col_offset=20), lineno=1405, col_offset=12)], [], lineno=1404, col_offset=8), Assign([Name('sign', Store(), lineno=1407, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1407, col_offset=15), '_sign', Load(), lineno=1407, col_offset=15), BitXor(), Attribute(Name('other', Load(), lineno=1407, col_offset=28), '_sign', Load(), lineno=1407, col_offset=28), lineno=1407, col_offset=15), lineno=1407, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1408, col_offset=11), '_isinfinity', Load(), lineno=1408, col_offset=11), [], [], None, None, lineno=1408, col_offset=11), [If(Call(Attribute(Name('other', Load(), lineno=1409, col_offset=15), '_isinfinity', Load(), lineno=1409, col_offset=15), [], [], None, None, lineno=1409, col_offset=15), [Assign([Name('ans', Store(), lineno=1410, col_offset=16)], Call(Attribute(Name('context', Load(), lineno=1410, col_offset=22), '_raise_error', Load(), lineno=1410, col_offset=22), [Name('InvalidOperation', Load(), lineno=1410, col_offset=43), Str('divmod(INF, INF)', lineno=1410, col_offset=61)], [], None, None, lineno=1410, col_offset=22), lineno=1410, col_offset=16), Return(Tuple([Name('ans', Load(), lineno=1411, col_offset=23), Name('ans', Load(), lineno=1411, col_offset=28)], Load(), lineno=1411, col_offset=23), lineno=1411, col_offset=16)], [Return(Tuple([Subscript(Name('_SignedInfinity', Load(), lineno=1413, col_offset=24), Index(Name('sign', Load(), lineno=1413, col_offset=40)), Load(), lineno=1413, col_offset=24), Call(Attribute(Name('context', Load(), lineno=1414, col_offset=24), '_raise_error', Load(), lineno=1414, col_offset=24), [Name('InvalidOperation', Load(), lineno=1414, col_offset=45), Str('INF % x', lineno=1414, col_offset=63)], [], None, None, lineno=1414, col_offset=24)], Load(), lineno=1413, col_offset=24), lineno=1413, col_offset=16)], lineno=1409, col_offset=12)], [], lineno=1408, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=1416, col_offset=15), lineno=1416, col_offset=11), [If(UnaryOp(Not(), Name('self', Load(), lineno=1417, col_offset=19), lineno=1417, col_offset=15), [Assign([Name('ans', Store(), lineno=1418, col_offset=16)], Call(Attribute(Name('context', Load(), lineno=1418, col_offset=22), '_raise_error', Load(), lineno=1418, col_offset=22), [Name('DivisionUndefined', Load(), lineno=1418, col_offset=43), Str('divmod(0, 0)', lineno=1418, col_offset=62)], [], None, None, lineno=1418, col_offset=22), lineno=1418, col_offset=16), Return(Tuple([Name('ans', Load(), lineno=1419, col_offset=23), Name('ans', Load(), lineno=1419, col_offset=28)], Load(), lineno=1419, col_offset=23), lineno=1419, col_offset=16)], [Return(Tuple([Call(Attribute(Name('context', Load(), lineno=1421, col_offset=24), '_raise_error', Load(), lineno=1421, col_offset=24), [Name('DivisionByZero', Load(), lineno=1421, col_offset=45), Str('x // 0', lineno=1421, col_offset=61), Name('sign', Load(), lineno=1421, col_offset=71)], [], None, None, lineno=1421, col_offset=24), Call(Attribute(Name('context', Load(), lineno=1422, col_offset=24), '_raise_error', Load(), lineno=1422, col_offset=24), [Name('InvalidOperation', Load(), lineno=1422, col_offset=45), Str('x % 0', lineno=1422, col_offset=63)], [], None, None, lineno=1422, col_offset=24)], Load(), lineno=1421, col_offset=24), lineno=1421, col_offset=16)], lineno=1417, col_offset=12)], [], lineno=1416, col_offset=8), Assign([Tuple([Name('quotient', Store(), lineno=1424, col_offset=8), Name('remainder', Store(), lineno=1424, col_offset=18)], Store(), lineno=1424, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1424, col_offset=30), '_divide', Load(), lineno=1424, col_offset=30), [Name('other', Load(), lineno=1424, col_offset=43), Name('context', Load(), lineno=1424, col_offset=50)], [], None, None, lineno=1424, col_offset=30), lineno=1424, col_offset=8), Assign([Name('remainder', Store(), lineno=1425, col_offset=8)], Call(Attribute(Name('remainder', Load(), lineno=1425, col_offset=20), '_fix', Load(), lineno=1425, col_offset=20), [Name('context', Load(), lineno=1425, col_offset=35)], [], None, None, lineno=1425, col_offset=20), lineno=1425, col_offset=8), Return(Tuple([Name('quotient', Load(), lineno=1426, col_offset=15), Name('remainder', Load(), lineno=1426, col_offset=25)], Load(), lineno=1426, col_offset=15), lineno=1426, col_offset=8)], [], lineno=1392, col_offset=4), FunctionDef('__rdivmod__', arguments([Name('self', Param(), lineno=1428, col_offset=20), Name('other', Param(), lineno=1428, col_offset=26), Name('context', Param(), lineno=1428, col_offset=33)], None, None, [Name('None', Load(), lineno=1428, col_offset=41)]), [Expr(Str('Swaps self/other and returns __divmod__.', lineno=1429, col_offset=8), lineno=1429, col_offset=8), Assign([Name('other', Store(), lineno=1430, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1430, col_offset=16), [Name('other', Load(), lineno=1430, col_offset=31)], [], None, None, lineno=1430, col_offset=16), lineno=1430, col_offset=8), If(Compare(Name('other', Load(), lineno=1431, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1431, col_offset=20)], lineno=1431, col_offset=11), [Return(Name('other', Load(), lineno=1432, col_offset=19), lineno=1432, col_offset=12)], [], lineno=1431, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=1433, col_offset=15), '__divmod__', Load(), lineno=1433, col_offset=15), [Name('self', Load(), lineno=1433, col_offset=32)], [keyword('context', Name('context', Load(), lineno=1433, col_offset=46))], None, None, lineno=1433, col_offset=15), lineno=1433, col_offset=8)], [], lineno=1428, col_offset=4), FunctionDef('__mod__', arguments([Name('self', Param(), lineno=1435, col_offset=16), Name('other', Param(), lineno=1435, col_offset=22), Name('context', Param(), lineno=1435, col_offset=29)], None, None, [Name('None', Load(), lineno=1435, col_offset=37)]), [Expr(Str('\n        self % other\n        ', lineno=1438, col_offset=-1), lineno=1438, col_offset=-1), Assign([Name('other', Store(), lineno=1439, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1439, col_offset=16), [Name('other', Load(), lineno=1439, col_offset=31)], [], None, None, lineno=1439, col_offset=16), lineno=1439, col_offset=8), If(Compare(Name('other', Load(), lineno=1440, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1440, col_offset=20)], lineno=1440, col_offset=11), [Return(Name('other', Load(), lineno=1441, col_offset=19), lineno=1441, col_offset=12)], [], lineno=1440, col_offset=8), If(Compare(Name('context', Load(), lineno=1443, col_offset=11), [Is()], [Name('None', Load(), lineno=1443, col_offset=22)], lineno=1443, col_offset=11), [Assign([Name('context', Store(), lineno=1444, col_offset=12)], Call(Name('getcontext', Load(), lineno=1444, col_offset=22), [], [], None, None, lineno=1444, col_offset=22), lineno=1444, col_offset=12)], [], lineno=1443, col_offset=8), Assign([Name('ans', Store(), lineno=1446, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1446, col_offset=14), '_check_nans', Load(), lineno=1446, col_offset=14), [Name('other', Load(), lineno=1446, col_offset=31), Name('context', Load(), lineno=1446, col_offset=38)], [], None, None, lineno=1446, col_offset=14), lineno=1446, col_offset=8), If(Name('ans', Load(), lineno=1447, col_offset=11), [Return(Name('ans', Load(), lineno=1448, col_offset=19), lineno=1448, col_offset=12)], [], lineno=1447, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1450, col_offset=11), '_isinfinity', Load(), lineno=1450, col_offset=11), [], [], None, None, lineno=1450, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1451, col_offset=19), '_raise_error', Load(), lineno=1451, col_offset=19), [Name('InvalidOperation', Load(), lineno=1451, col_offset=40), Str('INF % x', lineno=1451, col_offset=58)], [], None, None, lineno=1451, col_offset=19), lineno=1451, col_offset=12)], [If(UnaryOp(Not(), Name('other', Load(), lineno=1452, col_offset=17), lineno=1452, col_offset=13), [If(Name('self', Load(), lineno=1453, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1454, col_offset=23), '_raise_error', Load(), lineno=1454, col_offset=23), [Name('InvalidOperation', Load(), lineno=1454, col_offset=44), Str('x % 0', lineno=1454, col_offset=62)], [], None, None, lineno=1454, col_offset=23), lineno=1454, col_offset=16)], [Return(Call(Attribute(Name('context', Load(), lineno=1456, col_offset=23), '_raise_error', Load(), lineno=1456, col_offset=23), [Name('DivisionUndefined', Load(), lineno=1456, col_offset=44), Str('0 % 0', lineno=1456, col_offset=63)], [], None, None, lineno=1456, col_offset=23), lineno=1456, col_offset=16)], lineno=1453, col_offset=12)], [], lineno=1452, col_offset=13)], lineno=1450, col_offset=8), Assign([Name('remainder', Store(), lineno=1458, col_offset=8)], Subscript(Call(Attribute(Name('self', Load(), lineno=1458, col_offset=20), '_divide', Load(), lineno=1458, col_offset=20), [Name('other', Load(), lineno=1458, col_offset=33), Name('context', Load(), lineno=1458, col_offset=40)], [], None, None, lineno=1458, col_offset=20), Index(Num(1, lineno=1458, col_offset=49)), Load(), lineno=1458, col_offset=20), lineno=1458, col_offset=8), Assign([Name('remainder', Store(), lineno=1459, col_offset=8)], Call(Attribute(Name('remainder', Load(), lineno=1459, col_offset=20), '_fix', Load(), lineno=1459, col_offset=20), [Name('context', Load(), lineno=1459, col_offset=35)], [], None, None, lineno=1459, col_offset=20), lineno=1459, col_offset=8), Return(Name('remainder', Load(), lineno=1460, col_offset=15), lineno=1460, col_offset=8)], [], lineno=1435, col_offset=4), FunctionDef('__rmod__', arguments([Name('self', Param(), lineno=1462, col_offset=17), Name('other', Param(), lineno=1462, col_offset=23), Name('context', Param(), lineno=1462, col_offset=30)], None, None, [Name('None', Load(), lineno=1462, col_offset=38)]), [Expr(Str('Swaps self/other and returns __mod__.', lineno=1463, col_offset=8), lineno=1463, col_offset=8), Assign([Name('other', Store(), lineno=1464, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1464, col_offset=16), [Name('other', Load(), lineno=1464, col_offset=31)], [], None, None, lineno=1464, col_offset=16), lineno=1464, col_offset=8), If(Compare(Name('other', Load(), lineno=1465, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1465, col_offset=20)], lineno=1465, col_offset=11), [Return(Name('other', Load(), lineno=1466, col_offset=19), lineno=1466, col_offset=12)], [], lineno=1465, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=1467, col_offset=15), '__mod__', Load(), lineno=1467, col_offset=15), [Name('self', Load(), lineno=1467, col_offset=29)], [keyword('context', Name('context', Load(), lineno=1467, col_offset=43))], None, None, lineno=1467, col_offset=15), lineno=1467, col_offset=8)], [], lineno=1462, col_offset=4), FunctionDef('remainder_near', arguments([Name('self', Param(), lineno=1469, col_offset=23), Name('other', Param(), lineno=1469, col_offset=29), Name('context', Param(), lineno=1469, col_offset=36)], None, None, [Name('None', Load(), lineno=1469, col_offset=44)]), [Expr(Str('\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        ', lineno=1472, col_offset=-1), lineno=1472, col_offset=-1), If(Compare(Name('context', Load(), lineno=1473, col_offset=11), [Is()], [Name('None', Load(), lineno=1473, col_offset=22)], lineno=1473, col_offset=11), [Assign([Name('context', Store(), lineno=1474, col_offset=12)], Call(Name('getcontext', Load(), lineno=1474, col_offset=22), [], [], None, None, lineno=1474, col_offset=22), lineno=1474, col_offset=12)], [], lineno=1473, col_offset=8), Assign([Name('other', Store(), lineno=1476, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1476, col_offset=16), [Name('other', Load(), lineno=1476, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=1476, col_offset=46))], None, None, lineno=1476, col_offset=16), lineno=1476, col_offset=8), Assign([Name('ans', Store(), lineno=1478, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1478, col_offset=14), '_check_nans', Load(), lineno=1478, col_offset=14), [Name('other', Load(), lineno=1478, col_offset=31), Name('context', Load(), lineno=1478, col_offset=38)], [], None, None, lineno=1478, col_offset=14), lineno=1478, col_offset=8), If(Name('ans', Load(), lineno=1479, col_offset=11), [Return(Name('ans', Load(), lineno=1480, col_offset=19), lineno=1480, col_offset=12)], [], lineno=1479, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1483, col_offset=11), '_isinfinity', Load(), lineno=1483, col_offset=11), [], [], None, None, lineno=1483, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1484, col_offset=19), '_raise_error', Load(), lineno=1484, col_offset=19), [Name('InvalidOperation', Load(), lineno=1484, col_offset=40), Str('remainder_near(infinity, x)', lineno=1485, col_offset=40)], [], None, None, lineno=1484, col_offset=19), lineno=1484, col_offset=12)], [], lineno=1483, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=1488, col_offset=15), lineno=1488, col_offset=11), [If(Name('self', Load(), lineno=1489, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1490, col_offset=23), '_raise_error', Load(), lineno=1490, col_offset=23), [Name('InvalidOperation', Load(), lineno=1490, col_offset=44), Str('remainder_near(x, 0)', lineno=1491, col_offset=44)], [], None, None, lineno=1490, col_offset=23), lineno=1490, col_offset=16)], [Return(Call(Attribute(Name('context', Load(), lineno=1493, col_offset=23), '_raise_error', Load(), lineno=1493, col_offset=23), [Name('DivisionUndefined', Load(), lineno=1493, col_offset=44), Str('remainder_near(0, 0)', lineno=1494, col_offset=44)], [], None, None, lineno=1493, col_offset=23), lineno=1493, col_offset=16)], lineno=1489, col_offset=12)], [], lineno=1488, col_offset=8), If(Call(Attribute(Name('other', Load(), lineno=1497, col_offset=11), '_isinfinity', Load(), lineno=1497, col_offset=11), [], [], None, None, lineno=1497, col_offset=11), [Assign([Name('ans', Store(), lineno=1498, col_offset=12)], Call(Name('Decimal', Load(), lineno=1498, col_offset=18), [Name('self', Load(), lineno=1498, col_offset=26)], [], None, None, lineno=1498, col_offset=18), lineno=1498, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=1499, col_offset=19), '_fix', Load(), lineno=1499, col_offset=19), [Name('context', Load(), lineno=1499, col_offset=28)], [], None, None, lineno=1499, col_offset=19), lineno=1499, col_offset=12)], [], lineno=1497, col_offset=8), Assign([Name('ideal_exponent', Store(), lineno=1502, col_offset=8)], Call(Name('min', Load(), lineno=1502, col_offset=25), [Attribute(Name('self', Load(), lineno=1502, col_offset=29), '_exp', Load(), lineno=1502, col_offset=29), Attribute(Name('other', Load(), lineno=1502, col_offset=40), '_exp', Load(), lineno=1502, col_offset=40)], [], None, None, lineno=1502, col_offset=25), lineno=1502, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1503, col_offset=15), lineno=1503, col_offset=11), [Assign([Name('ans', Store(), lineno=1504, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1504, col_offset=18), [Attribute(Name('self', Load(), lineno=1504, col_offset=35), '_sign', Load(), lineno=1504, col_offset=35), Str('0', lineno=1504, col_offset=47), Name('ideal_exponent', Load(), lineno=1504, col_offset=52)], [], None, None, lineno=1504, col_offset=18), lineno=1504, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=1505, col_offset=19), '_fix', Load(), lineno=1505, col_offset=19), [Name('context', Load(), lineno=1505, col_offset=28)], [], None, None, lineno=1505, col_offset=19), lineno=1505, col_offset=12)], [], lineno=1503, col_offset=8), Assign([Name('expdiff', Store(), lineno=1508, col_offset=8)], BinOp(Call(Attribute(Name('self', Load(), lineno=1508, col_offset=18), 'adjusted', Load(), lineno=1508, col_offset=18), [], [], None, None, lineno=1508, col_offset=18), Sub(), Call(Attribute(Name('other', Load(), lineno=1508, col_offset=36), 'adjusted', Load(), lineno=1508, col_offset=36), [], [], None, None, lineno=1508, col_offset=36), lineno=1508, col_offset=18), lineno=1508, col_offset=8), If(Compare(Name('expdiff', Load(), lineno=1509, col_offset=11), [GtE()], [BinOp(Attribute(Name('context', Load(), lineno=1509, col_offset=22), 'prec', Load(), lineno=1509, col_offset=22), Add(), Num(1, lineno=1509, col_offset=37), lineno=1509, col_offset=22)], lineno=1509, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1511, col_offset=19), '_raise_error', Load(), lineno=1511, col_offset=19), [Name('DivisionImpossible', Load(), lineno=1511, col_offset=40)], [], None, None, lineno=1511, col_offset=19), lineno=1511, col_offset=12)], [], lineno=1509, col_offset=8), If(Compare(Name('expdiff', Load(), lineno=1512, col_offset=11), [LtE()], [Num(-2, lineno=1512, col_offset=23)], lineno=1512, col_offset=11), [Assign([Name('ans', Store(), lineno=1514, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1514, col_offset=18), '_rescale', Load(), lineno=1514, col_offset=18), [Name('ideal_exponent', Load(), lineno=1514, col_offset=32), Attribute(Name('context', Load(), lineno=1514, col_offset=48), 'rounding', Load(), lineno=1514, col_offset=48)], [], None, None, lineno=1514, col_offset=18), lineno=1514, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=1515, col_offset=19), '_fix', Load(), lineno=1515, col_offset=19), [Name('context', Load(), lineno=1515, col_offset=28)], [], None, None, lineno=1515, col_offset=19), lineno=1515, col_offset=12)], [], lineno=1512, col_offset=8), Assign([Name('op1', Store(), lineno=1518, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1518, col_offset=14), [Name('self', Load(), lineno=1518, col_offset=23)], [], None, None, lineno=1518, col_offset=14), lineno=1518, col_offset=8), Assign([Name('op2', Store(), lineno=1519, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1519, col_offset=14), [Name('other', Load(), lineno=1519, col_offset=23)], [], None, None, lineno=1519, col_offset=14), lineno=1519, col_offset=8), If(Compare(Attribute(Name('op1', Load(), lineno=1520, col_offset=11), 'exp', Load(), lineno=1520, col_offset=11), [GtE()], [Attribute(Name('op2', Load(), lineno=1520, col_offset=22), 'exp', Load(), lineno=1520, col_offset=22)], lineno=1520, col_offset=11), [AugAssign(Attribute(Name('op1', Load(), lineno=1521, col_offset=12), 'int', Store(), lineno=1521, col_offset=12), Mult(), BinOp(Num(10, lineno=1521, col_offset=23), Pow(), BinOp(Attribute(Name('op1', Load(), lineno=1521, col_offset=28), 'exp', Load(), lineno=1521, col_offset=28), Sub(), Attribute(Name('op2', Load(), lineno=1521, col_offset=38), 'exp', Load(), lineno=1521, col_offset=38), lineno=1521, col_offset=28), lineno=1521, col_offset=23), lineno=1521, col_offset=12)], [AugAssign(Attribute(Name('op2', Load(), lineno=1523, col_offset=12), 'int', Store(), lineno=1523, col_offset=12), Mult(), BinOp(Num(10, lineno=1523, col_offset=23), Pow(), BinOp(Attribute(Name('op2', Load(), lineno=1523, col_offset=28), 'exp', Load(), lineno=1523, col_offset=28), Sub(), Attribute(Name('op1', Load(), lineno=1523, col_offset=38), 'exp', Load(), lineno=1523, col_offset=38), lineno=1523, col_offset=28), lineno=1523, col_offset=23), lineno=1523, col_offset=12)], lineno=1520, col_offset=8), Assign([Tuple([Name('q', Store(), lineno=1524, col_offset=8), Name('r', Store(), lineno=1524, col_offset=11)], Store(), lineno=1524, col_offset=8)], Call(Name('divmod', Load(), lineno=1524, col_offset=15), [Attribute(Name('op1', Load(), lineno=1524, col_offset=22), 'int', Load(), lineno=1524, col_offset=22), Attribute(Name('op2', Load(), lineno=1524, col_offset=31), 'int', Load(), lineno=1524, col_offset=31)], [], None, None, lineno=1524, col_offset=15), lineno=1524, col_offset=8), If(Compare(BinOp(BinOp(Num(2, lineno=1528, col_offset=11), Mult(), Name('r', Load(), lineno=1528, col_offset=13), lineno=1528, col_offset=11), Add(), BinOp(Name('q', Load(), lineno=1528, col_offset=18), BitAnd(), Num(1, lineno=1528, col_offset=20), lineno=1528, col_offset=18), lineno=1528, col_offset=11), [Gt()], [Attribute(Name('op2', Load(), lineno=1528, col_offset=25), 'int', Load(), lineno=1528, col_offset=25)], lineno=1528, col_offset=11), [AugAssign(Name('r', Store(), lineno=1529, col_offset=12), Sub(), Attribute(Name('op2', Load(), lineno=1529, col_offset=17), 'int', Load(), lineno=1529, col_offset=17), lineno=1529, col_offset=12), AugAssign(Name('q', Store(), lineno=1530, col_offset=12), Add(), Num(1, lineno=1530, col_offset=17), lineno=1530, col_offset=12)], [], lineno=1528, col_offset=8), If(Compare(Name('q', Load(), lineno=1532, col_offset=11), [GtE()], [BinOp(Num(10, lineno=1532, col_offset=16), Pow(), Attribute(Name('context', Load(), lineno=1532, col_offset=20), 'prec', Load(), lineno=1532, col_offset=20), lineno=1532, col_offset=16)], lineno=1532, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1533, col_offset=19), '_raise_error', Load(), lineno=1533, col_offset=19), [Name('DivisionImpossible', Load(), lineno=1533, col_offset=40)], [], None, None, lineno=1533, col_offset=19), lineno=1533, col_offset=12)], [], lineno=1532, col_offset=8), Assign([Name('sign', Store(), lineno=1536, col_offset=8)], Attribute(Name('self', Load(), lineno=1536, col_offset=15), '_sign', Load(), lineno=1536, col_offset=15), lineno=1536, col_offset=8), If(Compare(Name('r', Load(), lineno=1537, col_offset=11), [Lt()], [Num(0, lineno=1537, col_offset=15)], lineno=1537, col_offset=11), [Assign([Name('sign', Store(), lineno=1538, col_offset=12)], BinOp(Num(1, lineno=1538, col_offset=19), Sub(), Name('sign', Load(), lineno=1538, col_offset=21), lineno=1538, col_offset=19), lineno=1538, col_offset=12), Assign([Name('r', Store(), lineno=1539, col_offset=12)], UnaryOp(USub(), Name('r', Load(), lineno=1539, col_offset=17), lineno=1539, col_offset=16), lineno=1539, col_offset=12)], [], lineno=1537, col_offset=8), Assign([Name('ans', Store(), lineno=1541, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=1541, col_offset=14), [Name('sign', Load(), lineno=1541, col_offset=31), Call(Name('str', Load(), lineno=1541, col_offset=37), [Name('r', Load(), lineno=1541, col_offset=41)], [], None, None, lineno=1541, col_offset=37), Name('ideal_exponent', Load(), lineno=1541, col_offset=45)], [], None, None, lineno=1541, col_offset=14), lineno=1541, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=1542, col_offset=15), '_fix', Load(), lineno=1542, col_offset=15), [Name('context', Load(), lineno=1542, col_offset=24)], [], None, None, lineno=1542, col_offset=15), lineno=1542, col_offset=8)], [], lineno=1469, col_offset=4), FunctionDef('__floordiv__', arguments([Name('self', Param(), lineno=1544, col_offset=21), Name('other', Param(), lineno=1544, col_offset=27), Name('context', Param(), lineno=1544, col_offset=34)], None, None, [Name('None', Load(), lineno=1544, col_offset=42)]), [Expr(Str('self // other', lineno=1545, col_offset=8), lineno=1545, col_offset=8), Assign([Name('other', Store(), lineno=1546, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1546, col_offset=16), [Name('other', Load(), lineno=1546, col_offset=31)], [], None, None, lineno=1546, col_offset=16), lineno=1546, col_offset=8), If(Compare(Name('other', Load(), lineno=1547, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1547, col_offset=20)], lineno=1547, col_offset=11), [Return(Name('other', Load(), lineno=1548, col_offset=19), lineno=1548, col_offset=12)], [], lineno=1547, col_offset=8), If(Compare(Name('context', Load(), lineno=1550, col_offset=11), [Is()], [Name('None', Load(), lineno=1550, col_offset=22)], lineno=1550, col_offset=11), [Assign([Name('context', Store(), lineno=1551, col_offset=12)], Call(Name('getcontext', Load(), lineno=1551, col_offset=22), [], [], None, None, lineno=1551, col_offset=22), lineno=1551, col_offset=12)], [], lineno=1550, col_offset=8), Assign([Name('ans', Store(), lineno=1553, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1553, col_offset=14), '_check_nans', Load(), lineno=1553, col_offset=14), [Name('other', Load(), lineno=1553, col_offset=31), Name('context', Load(), lineno=1553, col_offset=38)], [], None, None, lineno=1553, col_offset=14), lineno=1553, col_offset=8), If(Name('ans', Load(), lineno=1554, col_offset=11), [Return(Name('ans', Load(), lineno=1555, col_offset=19), lineno=1555, col_offset=12)], [], lineno=1554, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1557, col_offset=11), '_isinfinity', Load(), lineno=1557, col_offset=11), [], [], None, None, lineno=1557, col_offset=11), [If(Call(Attribute(Name('other', Load(), lineno=1558, col_offset=15), '_isinfinity', Load(), lineno=1558, col_offset=15), [], [], None, None, lineno=1558, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1559, col_offset=23), '_raise_error', Load(), lineno=1559, col_offset=23), [Name('InvalidOperation', Load(), lineno=1559, col_offset=44), Str('INF // INF', lineno=1559, col_offset=62)], [], None, None, lineno=1559, col_offset=23), lineno=1559, col_offset=16)], [Return(Subscript(Name('_SignedInfinity', Load(), lineno=1561, col_offset=23), Index(BinOp(Attribute(Name('self', Load(), lineno=1561, col_offset=39), '_sign', Load(), lineno=1561, col_offset=39), BitXor(), Attribute(Name('other', Load(), lineno=1561, col_offset=52), '_sign', Load(), lineno=1561, col_offset=52), lineno=1561, col_offset=39)), Load(), lineno=1561, col_offset=23), lineno=1561, col_offset=16)], lineno=1558, col_offset=12)], [], lineno=1557, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=1563, col_offset=15), lineno=1563, col_offset=11), [If(Name('self', Load(), lineno=1564, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1565, col_offset=23), '_raise_error', Load(), lineno=1565, col_offset=23), [Name('DivisionByZero', Load(), lineno=1565, col_offset=44), Str('x // 0', lineno=1565, col_offset=60), BinOp(Attribute(Name('self', Load(), lineno=1566, col_offset=44), '_sign', Load(), lineno=1566, col_offset=44), BitXor(), Attribute(Name('other', Load(), lineno=1566, col_offset=57), '_sign', Load(), lineno=1566, col_offset=57), lineno=1566, col_offset=44)], [], None, None, lineno=1565, col_offset=23), lineno=1565, col_offset=16)], [Return(Call(Attribute(Name('context', Load(), lineno=1568, col_offset=23), '_raise_error', Load(), lineno=1568, col_offset=23), [Name('DivisionUndefined', Load(), lineno=1568, col_offset=44), Str('0 // 0', lineno=1568, col_offset=63)], [], None, None, lineno=1568, col_offset=23), lineno=1568, col_offset=16)], lineno=1564, col_offset=12)], [], lineno=1563, col_offset=8), Return(Subscript(Call(Attribute(Name('self', Load(), lineno=1570, col_offset=15), '_divide', Load(), lineno=1570, col_offset=15), [Name('other', Load(), lineno=1570, col_offset=28), Name('context', Load(), lineno=1570, col_offset=35)], [], None, None, lineno=1570, col_offset=15), Index(Num(0, lineno=1570, col_offset=44)), Load(), lineno=1570, col_offset=15), lineno=1570, col_offset=8)], [], lineno=1544, col_offset=4), FunctionDef('__rfloordiv__', arguments([Name('self', Param(), lineno=1572, col_offset=22), Name('other', Param(), lineno=1572, col_offset=28), Name('context', Param(), lineno=1572, col_offset=35)], None, None, [Name('None', Load(), lineno=1572, col_offset=43)]), [Expr(Str('Swaps self/other and returns __floordiv__.', lineno=1573, col_offset=8), lineno=1573, col_offset=8), Assign([Name('other', Store(), lineno=1574, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1574, col_offset=16), [Name('other', Load(), lineno=1574, col_offset=31)], [], None, None, lineno=1574, col_offset=16), lineno=1574, col_offset=8), If(Compare(Name('other', Load(), lineno=1575, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=1575, col_offset=20)], lineno=1575, col_offset=11), [Return(Name('other', Load(), lineno=1576, col_offset=19), lineno=1576, col_offset=12)], [], lineno=1575, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=1577, col_offset=15), '__floordiv__', Load(), lineno=1577, col_offset=15), [Name('self', Load(), lineno=1577, col_offset=34)], [keyword('context', Name('context', Load(), lineno=1577, col_offset=48))], None, None, lineno=1577, col_offset=15), lineno=1577, col_offset=8)], [], lineno=1572, col_offset=4), FunctionDef('__float__', arguments([Name('self', Param(), lineno=1579, col_offset=18)], None, None, []), [Expr(Str('Float representation.', lineno=1580, col_offset=8), lineno=1580, col_offset=8), Return(Call(Name('float', Load(), lineno=1581, col_offset=15), [Call(Name('str', Load(), lineno=1581, col_offset=21), [Name('self', Load(), lineno=1581, col_offset=25)], [], None, None, lineno=1581, col_offset=21)], [], None, None, lineno=1581, col_offset=15), lineno=1581, col_offset=8)], [], lineno=1579, col_offset=4), FunctionDef('__int__', arguments([Name('self', Param(), lineno=1583, col_offset=16)], None, None, []), [Expr(Str('Converts self to an int, truncating if necessary.', lineno=1584, col_offset=8), lineno=1584, col_offset=8), If(Attribute(Name('self', Load(), lineno=1585, col_offset=11), '_is_special', Load(), lineno=1585, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=1586, col_offset=15), '_isnan', Load(), lineno=1586, col_offset=15), [], [], None, None, lineno=1586, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=1587, col_offset=22), [Str('Cannot convert NaN to integer', lineno=1587, col_offset=33)], [], None, None, lineno=1587, col_offset=22), None, None, lineno=1587, col_offset=16)], [If(Call(Attribute(Name('self', Load(), lineno=1588, col_offset=17), '_isinfinity', Load(), lineno=1588, col_offset=17), [], [], None, None, lineno=1588, col_offset=17), [Raise(Call(Name('OverflowError', Load(), lineno=1589, col_offset=22), [Str('Cannot convert infinity to integer', lineno=1589, col_offset=36)], [], None, None, lineno=1589, col_offset=22), None, None, lineno=1589, col_offset=16)], [], lineno=1588, col_offset=17)], lineno=1586, col_offset=12)], [], lineno=1585, col_offset=8), Assign([Name('s', Store(), lineno=1590, col_offset=8)], BinOp(Num(-1, lineno=1590, col_offset=14), Pow(), Attribute(Name('self', Load(), lineno=1590, col_offset=18), '_sign', Load(), lineno=1590, col_offset=18), lineno=1590, col_offset=12), lineno=1590, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1591, col_offset=11), '_exp', Load(), lineno=1591, col_offset=11), [GtE()], [Num(0, lineno=1591, col_offset=24)], lineno=1591, col_offset=11), [Return(BinOp(BinOp(Name('s', Load(), lineno=1592, col_offset=19), Mult(), Call(Name('int', Load(), lineno=1592, col_offset=21), [Attribute(Name('self', Load(), lineno=1592, col_offset=25), '_int', Load(), lineno=1592, col_offset=25)], [], None, None, lineno=1592, col_offset=21), lineno=1592, col_offset=19), Mult(), BinOp(Num(10, lineno=1592, col_offset=36), Pow(), Attribute(Name('self', Load(), lineno=1592, col_offset=40), '_exp', Load(), lineno=1592, col_offset=40), lineno=1592, col_offset=36), lineno=1592, col_offset=35), lineno=1592, col_offset=12)], [Return(BinOp(Name('s', Load(), lineno=1594, col_offset=19), Mult(), Call(Name('int', Load(), lineno=1594, col_offset=21), [BoolOp(Or(), [Subscript(Attribute(Name('self', Load(), lineno=1594, col_offset=25), '_int', Load(), lineno=1594, col_offset=25), Slice(None, Attribute(Name('self', Load(), lineno=1594, col_offset=36), '_exp', Load(), lineno=1594, col_offset=36), None), Load(), lineno=1594, col_offset=25), Str('0', lineno=1594, col_offset=50)], lineno=1594, col_offset=25)], [], None, None, lineno=1594, col_offset=21), lineno=1594, col_offset=19), lineno=1594, col_offset=12)], lineno=1591, col_offset=8)], [], lineno=1583, col_offset=4), Assign([Name('__trunc__', Store(), lineno=1596, col_offset=4)], Name('__int__', Load(), lineno=1596, col_offset=16), lineno=1596, col_offset=4), FunctionDef('real', arguments([Name('self', Param(), lineno=1598, col_offset=13)], None, None, []), [Return(Name('self', Load(), lineno=1599, col_offset=15), lineno=1599, col_offset=8)], [], lineno=1598, col_offset=4), Assign([Name('real', Store(), lineno=1600, col_offset=4)], Call(Name('property', Load(), lineno=1600, col_offset=11), [Name('real', Load(), lineno=1600, col_offset=20)], [], None, None, lineno=1600, col_offset=11), lineno=1600, col_offset=4), FunctionDef('imag', arguments([Name('self', Param(), lineno=1602, col_offset=13)], None, None, []), [Return(Call(Name('Decimal', Load(), lineno=1603, col_offset=15), [Num(0, lineno=1603, col_offset=23)], [], None, None, lineno=1603, col_offset=15), lineno=1603, col_offset=8)], [], lineno=1602, col_offset=4), Assign([Name('imag', Store(), lineno=1604, col_offset=4)], Call(Name('property', Load(), lineno=1604, col_offset=11), [Name('imag', Load(), lineno=1604, col_offset=20)], [], None, None, lineno=1604, col_offset=11), lineno=1604, col_offset=4), FunctionDef('conjugate', arguments([Name('self', Param(), lineno=1606, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=1607, col_offset=15), lineno=1607, col_offset=8)], [], lineno=1606, col_offset=4), FunctionDef('__complex__', arguments([Name('self', Param(), lineno=1609, col_offset=20)], None, None, []), [Return(Call(Name('complex', Load(), lineno=1610, col_offset=15), [Call(Name('float', Load(), lineno=1610, col_offset=23), [Name('self', Load(), lineno=1610, col_offset=29)], [], None, None, lineno=1610, col_offset=23)], [], None, None, lineno=1610, col_offset=15), lineno=1610, col_offset=8)], [], lineno=1609, col_offset=4), FunctionDef('__long__', arguments([Name('self', Param(), lineno=1612, col_offset=17)], None, None, []), [Expr(Str('Converts to a long.\n\n        Equivalent to long(int(self))\n        ', lineno=1616, col_offset=-1), lineno=1616, col_offset=-1), Return(Call(Name('long', Load(), lineno=1617, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=1617, col_offset=20), '__int__', Load(), lineno=1617, col_offset=20), [], [], None, None, lineno=1617, col_offset=20)], [], None, None, lineno=1617, col_offset=15), lineno=1617, col_offset=8)], [], lineno=1612, col_offset=4), FunctionDef('_fix_nan', arguments([Name('self', Param(), lineno=1619, col_offset=17), Name('context', Param(), lineno=1619, col_offset=23)], None, None, []), [Expr(Str('Decapitate the payload of a NaN to fit the context', lineno=1620, col_offset=8), lineno=1620, col_offset=8), Assign([Name('payload', Store(), lineno=1621, col_offset=8)], Attribute(Name('self', Load(), lineno=1621, col_offset=18), '_int', Load(), lineno=1621, col_offset=18), lineno=1621, col_offset=8), Assign([Name('max_payload_len', Store(), lineno=1625, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=1625, col_offset=26), 'prec', Load(), lineno=1625, col_offset=26), Sub(), Attribute(Name('context', Load(), lineno=1625, col_offset=41), '_clamp', Load(), lineno=1625, col_offset=41), lineno=1625, col_offset=26), lineno=1625, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=1626, col_offset=11), [Name('payload', Load(), lineno=1626, col_offset=15)], [], None, None, lineno=1626, col_offset=11), [Gt()], [Name('max_payload_len', Load(), lineno=1626, col_offset=26)], lineno=1626, col_offset=11), [Assign([Name('payload', Store(), lineno=1627, col_offset=12)], Call(Attribute(Subscript(Name('payload', Load(), lineno=1627, col_offset=22), Slice(BinOp(Call(Name('len', Load(), lineno=1627, col_offset=30), [Name('payload', Load(), lineno=1627, col_offset=34)], [], None, None, lineno=1627, col_offset=30), Sub(), Name('max_payload_len', Load(), lineno=1627, col_offset=43), lineno=1627, col_offset=30), None, None), Load(), lineno=1627, col_offset=22), 'lstrip', Load(), lineno=1627, col_offset=22), [Str('0', lineno=1627, col_offset=68)], [], None, None, lineno=1627, col_offset=22), lineno=1627, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=1628, col_offset=19), [Attribute(Name('self', Load(), lineno=1628, col_offset=36), '_sign', Load(), lineno=1628, col_offset=36), Name('payload', Load(), lineno=1628, col_offset=48), Attribute(Name('self', Load(), lineno=1628, col_offset=57), '_exp', Load(), lineno=1628, col_offset=57), Name('True', Load(), lineno=1628, col_offset=68)], [], None, None, lineno=1628, col_offset=19), lineno=1628, col_offset=12)], [], lineno=1626, col_offset=8), Return(Call(Name('Decimal', Load(), lineno=1629, col_offset=15), [Name('self', Load(), lineno=1629, col_offset=23)], [], None, None, lineno=1629, col_offset=15), lineno=1629, col_offset=8)], [], lineno=1619, col_offset=4), FunctionDef('_fix', arguments([Name('self', Param(), lineno=1631, col_offset=13), Name('context', Param(), lineno=1631, col_offset=19)], None, None, []), [Expr(Str('Round if it is necessary to keep self within prec precision.\n\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        ', lineno=1639, col_offset=-1), lineno=1639, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1641, col_offset=11), '_is_special', Load(), lineno=1641, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=1642, col_offset=15), '_isnan', Load(), lineno=1642, col_offset=15), [], [], None, None, lineno=1642, col_offset=15), [Return(Call(Attribute(Name('self', Load(), lineno=1644, col_offset=23), '_fix_nan', Load(), lineno=1644, col_offset=23), [Name('context', Load(), lineno=1644, col_offset=37)], [], None, None, lineno=1644, col_offset=23), lineno=1644, col_offset=16)], [Return(Call(Name('Decimal', Load(), lineno=1647, col_offset=23), [Name('self', Load(), lineno=1647, col_offset=31)], [], None, None, lineno=1647, col_offset=23), lineno=1647, col_offset=16)], lineno=1642, col_offset=12)], [], lineno=1641, col_offset=8), Assign([Name('Etiny', Store(), lineno=1651, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=1651, col_offset=16), 'Etiny', Load(), lineno=1651, col_offset=16), [], [], None, None, lineno=1651, col_offset=16), lineno=1651, col_offset=8), Assign([Name('Etop', Store(), lineno=1652, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=1652, col_offset=15), 'Etop', Load(), lineno=1652, col_offset=15), [], [], None, None, lineno=1652, col_offset=15), lineno=1652, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=1653, col_offset=15), lineno=1653, col_offset=11), [Assign([Name('exp_max', Store(), lineno=1654, col_offset=12)], Subscript(List([Attribute(Name('context', Load(), lineno=1654, col_offset=23), 'Emax', Load(), lineno=1654, col_offset=23), Name('Etop', Load(), lineno=1654, col_offset=37)], Load(), lineno=1654, col_offset=22), Index(Attribute(Name('context', Load(), lineno=1654, col_offset=43), '_clamp', Load(), lineno=1654, col_offset=43)), Load(), lineno=1654, col_offset=22), lineno=1654, col_offset=12), Assign([Name('new_exp', Store(), lineno=1655, col_offset=12)], Call(Name('min', Load(), lineno=1655, col_offset=22), [Call(Name('max', Load(), lineno=1655, col_offset=26), [Attribute(Name('self', Load(), lineno=1655, col_offset=30), '_exp', Load(), lineno=1655, col_offset=30), Name('Etiny', Load(), lineno=1655, col_offset=41)], [], None, None, lineno=1655, col_offset=26), Name('exp_max', Load(), lineno=1655, col_offset=49)], [], None, None, lineno=1655, col_offset=22), lineno=1655, col_offset=12), If(Compare(Name('new_exp', Load(), lineno=1656, col_offset=15), [NotEq()], [Attribute(Name('self', Load(), lineno=1656, col_offset=26), '_exp', Load(), lineno=1656, col_offset=26)], lineno=1656, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1657, col_offset=16), '_raise_error', Load(), lineno=1657, col_offset=16), [Name('Clamped', Load(), lineno=1657, col_offset=37)], [], None, None, lineno=1657, col_offset=16), lineno=1657, col_offset=16), Return(Call(Name('_dec_from_triple', Load(), lineno=1658, col_offset=23), [Attribute(Name('self', Load(), lineno=1658, col_offset=40), '_sign', Load(), lineno=1658, col_offset=40), Str('0', lineno=1658, col_offset=52), Name('new_exp', Load(), lineno=1658, col_offset=57)], [], None, None, lineno=1658, col_offset=23), lineno=1658, col_offset=16)], [Return(Call(Name('Decimal', Load(), lineno=1660, col_offset=23), [Name('self', Load(), lineno=1660, col_offset=31)], [], None, None, lineno=1660, col_offset=23), lineno=1660, col_offset=16)], lineno=1656, col_offset=12)], [], lineno=1653, col_offset=8), Assign([Name('exp_min', Store(), lineno=1664, col_offset=8)], BinOp(BinOp(Call(Name('len', Load(), lineno=1664, col_offset=18), [Attribute(Name('self', Load(), lineno=1664, col_offset=22), '_int', Load(), lineno=1664, col_offset=22)], [], None, None, lineno=1664, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=1664, col_offset=35), '_exp', Load(), lineno=1664, col_offset=35), lineno=1664, col_offset=18), Sub(), Attribute(Name('context', Load(), lineno=1664, col_offset=47), 'prec', Load(), lineno=1664, col_offset=47), lineno=1664, col_offset=45), lineno=1664, col_offset=8), If(Compare(Name('exp_min', Load(), lineno=1665, col_offset=11), [Gt()], [Name('Etop', Load(), lineno=1665, col_offset=21)], lineno=1665, col_offset=11), [Assign([Name('ans', Store(), lineno=1667, col_offset=12)], Call(Attribute(Name('context', Load(), lineno=1667, col_offset=18), '_raise_error', Load(), lineno=1667, col_offset=18), [Name('Overflow', Load(), lineno=1667, col_offset=39), Str('above Emax', lineno=1667, col_offset=49), Attribute(Name('self', Load(), lineno=1667, col_offset=63), '_sign', Load(), lineno=1667, col_offset=63)], [], None, None, lineno=1667, col_offset=18), lineno=1667, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=1668, col_offset=12), '_raise_error', Load(), lineno=1668, col_offset=12), [Name('Inexact', Load(), lineno=1668, col_offset=33)], [], None, None, lineno=1668, col_offset=12), lineno=1668, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=1669, col_offset=12), '_raise_error', Load(), lineno=1669, col_offset=12), [Name('Rounded', Load(), lineno=1669, col_offset=33)], [], None, None, lineno=1669, col_offset=12), lineno=1669, col_offset=12), Return(Name('ans', Load(), lineno=1670, col_offset=19), lineno=1670, col_offset=12)], [], lineno=1665, col_offset=8), Assign([Name('self_is_subnormal', Store(), lineno=1672, col_offset=8)], Compare(Name('exp_min', Load(), lineno=1672, col_offset=28), [Lt()], [Name('Etiny', Load(), lineno=1672, col_offset=38)], lineno=1672, col_offset=28), lineno=1672, col_offset=8), If(Name('self_is_subnormal', Load(), lineno=1673, col_offset=11), [Assign([Name('exp_min', Store(), lineno=1674, col_offset=12)], Name('Etiny', Load(), lineno=1674, col_offset=22), lineno=1674, col_offset=12)], [], lineno=1673, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1677, col_offset=11), '_exp', Load(), lineno=1677, col_offset=11), [Lt()], [Name('exp_min', Load(), lineno=1677, col_offset=23)], lineno=1677, col_offset=11), [Assign([Name('digits', Store(), lineno=1678, col_offset=12)], BinOp(BinOp(Call(Name('len', Load(), lineno=1678, col_offset=21), [Attribute(Name('self', Load(), lineno=1678, col_offset=25), '_int', Load(), lineno=1678, col_offset=25)], [], None, None, lineno=1678, col_offset=21), Add(), Attribute(Name('self', Load(), lineno=1678, col_offset=38), '_exp', Load(), lineno=1678, col_offset=38), lineno=1678, col_offset=21), Sub(), Name('exp_min', Load(), lineno=1678, col_offset=50), lineno=1678, col_offset=48), lineno=1678, col_offset=12), If(Compare(Name('digits', Load(), lineno=1679, col_offset=15), [Lt()], [Num(0, lineno=1679, col_offset=24)], lineno=1679, col_offset=15), [Assign([Name('self', Store(), lineno=1680, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=1680, col_offset=23), [Attribute(Name('self', Load(), lineno=1680, col_offset=40), '_sign', Load(), lineno=1680, col_offset=40), Str('1', lineno=1680, col_offset=52), BinOp(Name('exp_min', Load(), lineno=1680, col_offset=57), Sub(), Num(1, lineno=1680, col_offset=65), lineno=1680, col_offset=57)], [], None, None, lineno=1680, col_offset=23), lineno=1680, col_offset=16), Assign([Name('digits', Store(), lineno=1681, col_offset=16)], Num(0, lineno=1681, col_offset=25), lineno=1681, col_offset=16)], [], lineno=1679, col_offset=12), Assign([Name('rounding_method', Store(), lineno=1682, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=1682, col_offset=30), '_pick_rounding_function', Load(), lineno=1682, col_offset=30), Index(Attribute(Name('context', Load(), lineno=1682, col_offset=59), 'rounding', Load(), lineno=1682, col_offset=59)), Load(), lineno=1682, col_offset=30), lineno=1682, col_offset=12), Assign([Name('changed', Store(), lineno=1683, col_offset=12)], Call(Call(Name('getattr', Load(), lineno=1683, col_offset=22), [Name('self', Load(), lineno=1683, col_offset=30), Name('rounding_method', Load(), lineno=1683, col_offset=36)], [], None, None, lineno=1683, col_offset=22), [Name('digits', Load(), lineno=1683, col_offset=53)], [], None, None, lineno=1683, col_offset=22), lineno=1683, col_offset=12), Assign([Name('coeff', Store(), lineno=1684, col_offset=12)], BoolOp(Or(), [Subscript(Attribute(Name('self', Load(), lineno=1684, col_offset=20), '_int', Load(), lineno=1684, col_offset=20), Slice(None, Name('digits', Load(), lineno=1684, col_offset=31), None), Load(), lineno=1684, col_offset=20), Str('0', lineno=1684, col_offset=42)], lineno=1684, col_offset=20), lineno=1684, col_offset=12), If(Compare(Name('changed', Load(), lineno=1685, col_offset=15), [Gt()], [Num(0, lineno=1685, col_offset=25)], lineno=1685, col_offset=15), [Assign([Name('coeff', Store(), lineno=1686, col_offset=16)], Call(Name('str', Load(), lineno=1686, col_offset=24), [BinOp(Call(Name('int', Load(), lineno=1686, col_offset=28), [Name('coeff', Load(), lineno=1686, col_offset=32)], [], None, None, lineno=1686, col_offset=28), Add(), Num(1, lineno=1686, col_offset=39), lineno=1686, col_offset=28)], [], None, None, lineno=1686, col_offset=24), lineno=1686, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=1687, col_offset=19), [Name('coeff', Load(), lineno=1687, col_offset=23)], [], None, None, lineno=1687, col_offset=19), [Gt()], [Attribute(Name('context', Load(), lineno=1687, col_offset=32), 'prec', Load(), lineno=1687, col_offset=32)], lineno=1687, col_offset=19), [Assign([Name('coeff', Store(), lineno=1688, col_offset=20)], Subscript(Name('coeff', Load(), lineno=1688, col_offset=28), Slice(None, Num(-1, lineno=1688, col_offset=36), None), Load(), lineno=1688, col_offset=28), lineno=1688, col_offset=20), AugAssign(Name('exp_min', Store(), lineno=1689, col_offset=20), Add(), Num(1, lineno=1689, col_offset=31), lineno=1689, col_offset=20)], [], lineno=1687, col_offset=16)], [], lineno=1685, col_offset=12), If(Compare(Name('exp_min', Load(), lineno=1692, col_offset=15), [Gt()], [Name('Etop', Load(), lineno=1692, col_offset=25)], lineno=1692, col_offset=15), [Assign([Name('ans', Store(), lineno=1693, col_offset=16)], Call(Attribute(Name('context', Load(), lineno=1693, col_offset=22), '_raise_error', Load(), lineno=1693, col_offset=22), [Name('Overflow', Load(), lineno=1693, col_offset=43), Str('above Emax', lineno=1693, col_offset=53), Attribute(Name('self', Load(), lineno=1693, col_offset=67), '_sign', Load(), lineno=1693, col_offset=67)], [], None, None, lineno=1693, col_offset=22), lineno=1693, col_offset=16)], [Assign([Name('ans', Store(), lineno=1695, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=1695, col_offset=22), [Attribute(Name('self', Load(), lineno=1695, col_offset=39), '_sign', Load(), lineno=1695, col_offset=39), Name('coeff', Load(), lineno=1695, col_offset=51), Name('exp_min', Load(), lineno=1695, col_offset=58)], [], None, None, lineno=1695, col_offset=22), lineno=1695, col_offset=16)], lineno=1692, col_offset=12), If(BoolOp(And(), [Name('changed', Load(), lineno=1699, col_offset=15), Name('self_is_subnormal', Load(), lineno=1699, col_offset=27)], lineno=1699, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1700, col_offset=16), '_raise_error', Load(), lineno=1700, col_offset=16), [Name('Underflow', Load(), lineno=1700, col_offset=37)], [], None, None, lineno=1700, col_offset=16), lineno=1700, col_offset=16)], [], lineno=1699, col_offset=12), If(Name('self_is_subnormal', Load(), lineno=1701, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1702, col_offset=16), '_raise_error', Load(), lineno=1702, col_offset=16), [Name('Subnormal', Load(), lineno=1702, col_offset=37)], [], None, None, lineno=1702, col_offset=16), lineno=1702, col_offset=16)], [], lineno=1701, col_offset=12), If(Name('changed', Load(), lineno=1703, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1704, col_offset=16), '_raise_error', Load(), lineno=1704, col_offset=16), [Name('Inexact', Load(), lineno=1704, col_offset=37)], [], None, None, lineno=1704, col_offset=16), lineno=1704, col_offset=16)], [], lineno=1703, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=1705, col_offset=12), '_raise_error', Load(), lineno=1705, col_offset=12), [Name('Rounded', Load(), lineno=1705, col_offset=33)], [], None, None, lineno=1705, col_offset=12), lineno=1705, col_offset=12), If(UnaryOp(Not(), Name('ans', Load(), lineno=1706, col_offset=19), lineno=1706, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=1708, col_offset=16), '_raise_error', Load(), lineno=1708, col_offset=16), [Name('Clamped', Load(), lineno=1708, col_offset=37)], [], None, None, lineno=1708, col_offset=16), lineno=1708, col_offset=16)], [], lineno=1706, col_offset=12), Return(Name('ans', Load(), lineno=1709, col_offset=19), lineno=1709, col_offset=12)], [], lineno=1677, col_offset=8), If(Name('self_is_subnormal', Load(), lineno=1711, col_offset=11), [Expr(Call(Attribute(Name('context', Load(), lineno=1712, col_offset=12), '_raise_error', Load(), lineno=1712, col_offset=12), [Name('Subnormal', Load(), lineno=1712, col_offset=33)], [], None, None, lineno=1712, col_offset=12), lineno=1712, col_offset=12)], [], lineno=1711, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('context', Load(), lineno=1715, col_offset=11), '_clamp', Load(), lineno=1715, col_offset=11), [Eq()], [Num(1, lineno=1715, col_offset=29)], lineno=1715, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=1715, col_offset=35), '_exp', Load(), lineno=1715, col_offset=35), [Gt()], [Name('Etop', Load(), lineno=1715, col_offset=47)], lineno=1715, col_offset=35)], lineno=1715, col_offset=11), [Expr(Call(Attribute(Name('context', Load(), lineno=1716, col_offset=12), '_raise_error', Load(), lineno=1716, col_offset=12), [Name('Clamped', Load(), lineno=1716, col_offset=33)], [], None, None, lineno=1716, col_offset=12), lineno=1716, col_offset=12), Assign([Name('self_padded', Store(), lineno=1717, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=1717, col_offset=26), '_int', Load(), lineno=1717, col_offset=26), Add(), BinOp(Str('0', lineno=1717, col_offset=38), Mult(), BinOp(Attribute(Name('self', Load(), lineno=1717, col_offset=43), '_exp', Load(), lineno=1717, col_offset=43), Sub(), Name('Etop', Load(), lineno=1717, col_offset=55), lineno=1717, col_offset=43), lineno=1717, col_offset=38), lineno=1717, col_offset=26), lineno=1717, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=1718, col_offset=19), [Attribute(Name('self', Load(), lineno=1718, col_offset=36), '_sign', Load(), lineno=1718, col_offset=36), Name('self_padded', Load(), lineno=1718, col_offset=48), Name('Etop', Load(), lineno=1718, col_offset=61)], [], None, None, lineno=1718, col_offset=19), lineno=1718, col_offset=12)], [], lineno=1715, col_offset=8), Return(Call(Name('Decimal', Load(), lineno=1721, col_offset=15), [Name('self', Load(), lineno=1721, col_offset=23)], [], None, None, lineno=1721, col_offset=15), lineno=1721, col_offset=8)], [], lineno=1631, col_offset=4), Assign([Name('_pick_rounding_function', Store(), lineno=1723, col_offset=4)], Dict([], [], lineno=1723, col_offset=30), lineno=1723, col_offset=4), FunctionDef('_round_down', arguments([Name('self', Param(), lineno=1735, col_offset=20), Name('prec', Param(), lineno=1735, col_offset=26)], None, None, []), [Expr(Str('Also known as round-towards-0, truncate.', lineno=1736, col_offset=8), lineno=1736, col_offset=8), If(Call(Name('_all_zeros', Load(), lineno=1737, col_offset=11), [Attribute(Name('self', Load(), lineno=1737, col_offset=22), '_int', Load(), lineno=1737, col_offset=22), Name('prec', Load(), lineno=1737, col_offset=33)], [], None, None, lineno=1737, col_offset=11), [Return(Num(0, lineno=1738, col_offset=19), lineno=1738, col_offset=12)], [Return(Num(-1, lineno=1740, col_offset=20), lineno=1740, col_offset=12)], lineno=1737, col_offset=8)], [], lineno=1735, col_offset=4), FunctionDef('_round_up', arguments([Name('self', Param(), lineno=1742, col_offset=18), Name('prec', Param(), lineno=1742, col_offset=24)], None, None, []), [Expr(Str('Rounds away from 0.', lineno=1743, col_offset=8), lineno=1743, col_offset=8), Return(UnaryOp(USub(), Call(Attribute(Name('self', Load(), lineno=1744, col_offset=16), '_round_down', Load(), lineno=1744, col_offset=16), [Name('prec', Load(), lineno=1744, col_offset=33)], [], None, None, lineno=1744, col_offset=16), lineno=1744, col_offset=15), lineno=1744, col_offset=8)], [], lineno=1742, col_offset=4), FunctionDef('_round_half_up', arguments([Name('self', Param(), lineno=1746, col_offset=23), Name('prec', Param(), lineno=1746, col_offset=29)], None, None, []), [Expr(Str('Rounds 5 up (away from 0)', lineno=1747, col_offset=8), lineno=1747, col_offset=8), If(Compare(Subscript(Attribute(Name('self', Load(), lineno=1748, col_offset=11), '_int', Load(), lineno=1748, col_offset=11), Index(Name('prec', Load(), lineno=1748, col_offset=21)), Load(), lineno=1748, col_offset=11), [In()], [Str('56789', lineno=1748, col_offset=30)], lineno=1748, col_offset=11), [Return(Num(1, lineno=1749, col_offset=19), lineno=1749, col_offset=12)], [If(Call(Name('_all_zeros', Load(), lineno=1750, col_offset=13), [Attribute(Name('self', Load(), lineno=1750, col_offset=24), '_int', Load(), lineno=1750, col_offset=24), Name('prec', Load(), lineno=1750, col_offset=35)], [], None, None, lineno=1750, col_offset=13), [Return(Num(0, lineno=1751, col_offset=19), lineno=1751, col_offset=12)], [Return(Num(-1, lineno=1753, col_offset=20), lineno=1753, col_offset=12)], lineno=1750, col_offset=13)], lineno=1748, col_offset=8)], [], lineno=1746, col_offset=4), FunctionDef('_round_half_down', arguments([Name('self', Param(), lineno=1755, col_offset=25), Name('prec', Param(), lineno=1755, col_offset=31)], None, None, []), [Expr(Str('Round 5 down', lineno=1756, col_offset=8), lineno=1756, col_offset=8), If(Call(Name('_exact_half', Load(), lineno=1757, col_offset=11), [Attribute(Name('self', Load(), lineno=1757, col_offset=23), '_int', Load(), lineno=1757, col_offset=23), Name('prec', Load(), lineno=1757, col_offset=34)], [], None, None, lineno=1757, col_offset=11), [Return(Num(-1, lineno=1758, col_offset=20), lineno=1758, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=1760, col_offset=19), '_round_half_up', Load(), lineno=1760, col_offset=19), [Name('prec', Load(), lineno=1760, col_offset=39)], [], None, None, lineno=1760, col_offset=19), lineno=1760, col_offset=12)], lineno=1757, col_offset=8)], [], lineno=1755, col_offset=4), FunctionDef('_round_half_even', arguments([Name('self', Param(), lineno=1762, col_offset=25), Name('prec', Param(), lineno=1762, col_offset=31)], None, None, []), [Expr(Str('Round 5 to even, rest to nearest.', lineno=1763, col_offset=8), lineno=1763, col_offset=8), If(BoolOp(And(), [Call(Name('_exact_half', Load(), lineno=1764, col_offset=11), [Attribute(Name('self', Load(), lineno=1764, col_offset=23), '_int', Load(), lineno=1764, col_offset=23), Name('prec', Load(), lineno=1764, col_offset=34)], [], None, None, lineno=1764, col_offset=11), BoolOp(Or(), [Compare(Name('prec', Load(), lineno=1765, col_offset=17), [Eq()], [Num(0, lineno=1765, col_offset=25)], lineno=1765, col_offset=17), Compare(Subscript(Attribute(Name('self', Load(), lineno=1765, col_offset=30), '_int', Load(), lineno=1765, col_offset=30), Index(BinOp(Name('prec', Load(), lineno=1765, col_offset=40), Sub(), Num(1, lineno=1765, col_offset=45), lineno=1765, col_offset=40)), Load(), lineno=1765, col_offset=30), [In()], [Str('02468', lineno=1765, col_offset=51)], lineno=1765, col_offset=30)], lineno=1765, col_offset=17)], lineno=1764, col_offset=11), [Return(Num(-1, lineno=1766, col_offset=20), lineno=1766, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=1768, col_offset=19), '_round_half_up', Load(), lineno=1768, col_offset=19), [Name('prec', Load(), lineno=1768, col_offset=39)], [], None, None, lineno=1768, col_offset=19), lineno=1768, col_offset=12)], lineno=1764, col_offset=8)], [], lineno=1762, col_offset=4), FunctionDef('_round_ceiling', arguments([Name('self', Param(), lineno=1770, col_offset=23), Name('prec', Param(), lineno=1770, col_offset=29)], None, None, []), [Expr(Str('Rounds up (not away from 0 if negative.)', lineno=1771, col_offset=8), lineno=1771, col_offset=8), If(Attribute(Name('self', Load(), lineno=1772, col_offset=11), '_sign', Load(), lineno=1772, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1773, col_offset=19), '_round_down', Load(), lineno=1773, col_offset=19), [Name('prec', Load(), lineno=1773, col_offset=36)], [], None, None, lineno=1773, col_offset=19), lineno=1773, col_offset=12)], [Return(UnaryOp(USub(), Call(Attribute(Name('self', Load(), lineno=1775, col_offset=20), '_round_down', Load(), lineno=1775, col_offset=20), [Name('prec', Load(), lineno=1775, col_offset=37)], [], None, None, lineno=1775, col_offset=20), lineno=1775, col_offset=19), lineno=1775, col_offset=12)], lineno=1772, col_offset=8)], [], lineno=1770, col_offset=4), FunctionDef('_round_floor', arguments([Name('self', Param(), lineno=1777, col_offset=21), Name('prec', Param(), lineno=1777, col_offset=27)], None, None, []), [Expr(Str('Rounds down (not towards 0 if negative)', lineno=1778, col_offset=8), lineno=1778, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1779, col_offset=15), '_sign', Load(), lineno=1779, col_offset=15), lineno=1779, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1780, col_offset=19), '_round_down', Load(), lineno=1780, col_offset=19), [Name('prec', Load(), lineno=1780, col_offset=36)], [], None, None, lineno=1780, col_offset=19), lineno=1780, col_offset=12)], [Return(UnaryOp(USub(), Call(Attribute(Name('self', Load(), lineno=1782, col_offset=20), '_round_down', Load(), lineno=1782, col_offset=20), [Name('prec', Load(), lineno=1782, col_offset=37)], [], None, None, lineno=1782, col_offset=20), lineno=1782, col_offset=19), lineno=1782, col_offset=12)], lineno=1779, col_offset=8)], [], lineno=1777, col_offset=4), FunctionDef('_round_05up', arguments([Name('self', Param(), lineno=1784, col_offset=20), Name('prec', Param(), lineno=1784, col_offset=26)], None, None, []), [Expr(Str('Round down unless digit prec-1 is 0 or 5.', lineno=1785, col_offset=8), lineno=1785, col_offset=8), If(BoolOp(And(), [Name('prec', Load(), lineno=1786, col_offset=11), Compare(Subscript(Attribute(Name('self', Load(), lineno=1786, col_offset=20), '_int', Load(), lineno=1786, col_offset=20), Index(BinOp(Name('prec', Load(), lineno=1786, col_offset=30), Sub(), Num(1, lineno=1786, col_offset=35), lineno=1786, col_offset=30)), Load(), lineno=1786, col_offset=20), [NotIn()], [Str('05', lineno=1786, col_offset=45)], lineno=1786, col_offset=20)], lineno=1786, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1787, col_offset=19), '_round_down', Load(), lineno=1787, col_offset=19), [Name('prec', Load(), lineno=1787, col_offset=36)], [], None, None, lineno=1787, col_offset=19), lineno=1787, col_offset=12)], [Return(UnaryOp(USub(), Call(Attribute(Name('self', Load(), lineno=1789, col_offset=20), '_round_down', Load(), lineno=1789, col_offset=20), [Name('prec', Load(), lineno=1789, col_offset=37)], [], None, None, lineno=1789, col_offset=20), lineno=1789, col_offset=19), lineno=1789, col_offset=12)], lineno=1786, col_offset=8)], [], lineno=1784, col_offset=4), FunctionDef('fma', arguments([Name('self', Param(), lineno=1791, col_offset=12), Name('other', Param(), lineno=1791, col_offset=18), Name('third', Param(), lineno=1791, col_offset=25), Name('context', Param(), lineno=1791, col_offset=32)], None, None, [Name('None', Load(), lineno=1791, col_offset=40)]), [Expr(Str('Fused multiply-add.\n\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        ', lineno=1800, col_offset=-1), lineno=1800, col_offset=-1), Assign([Name('other', Store(), lineno=1802, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1802, col_offset=16), [Name('other', Load(), lineno=1802, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=1802, col_offset=46))], None, None, lineno=1802, col_offset=16), lineno=1802, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1806, col_offset=11), '_is_special', Load(), lineno=1806, col_offset=11), Attribute(Name('other', Load(), lineno=1806, col_offset=31), '_is_special', Load(), lineno=1806, col_offset=31)], lineno=1806, col_offset=11), [If(Compare(Name('context', Load(), lineno=1807, col_offset=15), [Is()], [Name('None', Load(), lineno=1807, col_offset=26)], lineno=1807, col_offset=15), [Assign([Name('context', Store(), lineno=1808, col_offset=16)], Call(Name('getcontext', Load(), lineno=1808, col_offset=26), [], [], None, None, lineno=1808, col_offset=26), lineno=1808, col_offset=16)], [], lineno=1807, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=1809, col_offset=15), '_exp', Load(), lineno=1809, col_offset=15), [Eq()], [Str('N', lineno=1809, col_offset=28)], lineno=1809, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1810, col_offset=23), '_raise_error', Load(), lineno=1810, col_offset=23), [Name('InvalidOperation', Load(), lineno=1810, col_offset=44), Str('sNaN', lineno=1810, col_offset=62), Name('self', Load(), lineno=1810, col_offset=70)], [], None, None, lineno=1810, col_offset=23), lineno=1810, col_offset=16)], [], lineno=1809, col_offset=12), If(Compare(Attribute(Name('other', Load(), lineno=1811, col_offset=15), '_exp', Load(), lineno=1811, col_offset=15), [Eq()], [Str('N', lineno=1811, col_offset=29)], lineno=1811, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1812, col_offset=23), '_raise_error', Load(), lineno=1812, col_offset=23), [Name('InvalidOperation', Load(), lineno=1812, col_offset=44), Str('sNaN', lineno=1812, col_offset=62), Name('other', Load(), lineno=1812, col_offset=70)], [], None, None, lineno=1812, col_offset=23), lineno=1812, col_offset=16)], [], lineno=1811, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=1813, col_offset=15), '_exp', Load(), lineno=1813, col_offset=15), [Eq()], [Str('n', lineno=1813, col_offset=28)], lineno=1813, col_offset=15), [Assign([Name('product', Store(), lineno=1814, col_offset=16)], Name('self', Load(), lineno=1814, col_offset=26), lineno=1814, col_offset=16)], [If(Compare(Attribute(Name('other', Load(), lineno=1815, col_offset=17), '_exp', Load(), lineno=1815, col_offset=17), [Eq()], [Str('n', lineno=1815, col_offset=31)], lineno=1815, col_offset=17), [Assign([Name('product', Store(), lineno=1816, col_offset=16)], Name('other', Load(), lineno=1816, col_offset=26), lineno=1816, col_offset=16)], [If(Compare(Attribute(Name('self', Load(), lineno=1817, col_offset=17), '_exp', Load(), lineno=1817, col_offset=17), [Eq()], [Str('F', lineno=1817, col_offset=30)], lineno=1817, col_offset=17), [If(UnaryOp(Not(), Name('other', Load(), lineno=1818, col_offset=23), lineno=1818, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=1819, col_offset=27), '_raise_error', Load(), lineno=1819, col_offset=27), [Name('InvalidOperation', Load(), lineno=1819, col_offset=48), Str('INF * 0 in fma', lineno=1820, col_offset=48)], [], None, None, lineno=1819, col_offset=27), lineno=1819, col_offset=20)], [], lineno=1818, col_offset=16), Assign([Name('product', Store(), lineno=1821, col_offset=16)], Subscript(Name('_SignedInfinity', Load(), lineno=1821, col_offset=26), Index(BinOp(Attribute(Name('self', Load(), lineno=1821, col_offset=42), '_sign', Load(), lineno=1821, col_offset=42), BitXor(), Attribute(Name('other', Load(), lineno=1821, col_offset=55), '_sign', Load(), lineno=1821, col_offset=55), lineno=1821, col_offset=42)), Load(), lineno=1821, col_offset=26), lineno=1821, col_offset=16)], [If(Compare(Attribute(Name('other', Load(), lineno=1822, col_offset=17), '_exp', Load(), lineno=1822, col_offset=17), [Eq()], [Str('F', lineno=1822, col_offset=31)], lineno=1822, col_offset=17), [If(UnaryOp(Not(), Name('self', Load(), lineno=1823, col_offset=23), lineno=1823, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=1824, col_offset=27), '_raise_error', Load(), lineno=1824, col_offset=27), [Name('InvalidOperation', Load(), lineno=1824, col_offset=48), Str('0 * INF in fma', lineno=1825, col_offset=48)], [], None, None, lineno=1824, col_offset=27), lineno=1824, col_offset=20)], [], lineno=1823, col_offset=16), Assign([Name('product', Store(), lineno=1826, col_offset=16)], Subscript(Name('_SignedInfinity', Load(), lineno=1826, col_offset=26), Index(BinOp(Attribute(Name('self', Load(), lineno=1826, col_offset=42), '_sign', Load(), lineno=1826, col_offset=42), BitXor(), Attribute(Name('other', Load(), lineno=1826, col_offset=55), '_sign', Load(), lineno=1826, col_offset=55), lineno=1826, col_offset=42)), Load(), lineno=1826, col_offset=26), lineno=1826, col_offset=16)], [], lineno=1822, col_offset=17)], lineno=1817, col_offset=17)], lineno=1815, col_offset=17)], lineno=1813, col_offset=12)], [Assign([Name('product', Store(), lineno=1828, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=1828, col_offset=22), [BinOp(Attribute(Name('self', Load(), lineno=1828, col_offset=39), '_sign', Load(), lineno=1828, col_offset=39), BitXor(), Attribute(Name('other', Load(), lineno=1828, col_offset=52), '_sign', Load(), lineno=1828, col_offset=52), lineno=1828, col_offset=39), Call(Name('str', Load(), lineno=1829, col_offset=39), [BinOp(Call(Name('int', Load(), lineno=1829, col_offset=43), [Attribute(Name('self', Load(), lineno=1829, col_offset=47), '_int', Load(), lineno=1829, col_offset=47)], [], None, None, lineno=1829, col_offset=43), Mult(), Call(Name('int', Load(), lineno=1829, col_offset=60), [Attribute(Name('other', Load(), lineno=1829, col_offset=64), '_int', Load(), lineno=1829, col_offset=64)], [], None, None, lineno=1829, col_offset=60), lineno=1829, col_offset=43)], [], None, None, lineno=1829, col_offset=39), BinOp(Attribute(Name('self', Load(), lineno=1830, col_offset=39), '_exp', Load(), lineno=1830, col_offset=39), Add(), Attribute(Name('other', Load(), lineno=1830, col_offset=51), '_exp', Load(), lineno=1830, col_offset=51), lineno=1830, col_offset=39)], [], None, None, lineno=1828, col_offset=22), lineno=1828, col_offset=12)], lineno=1806, col_offset=8), Assign([Name('third', Store(), lineno=1832, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1832, col_offset=16), [Name('third', Load(), lineno=1832, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=1832, col_offset=46))], None, None, lineno=1832, col_offset=16), lineno=1832, col_offset=8), Return(Call(Attribute(Name('product', Load(), lineno=1833, col_offset=15), '__add__', Load(), lineno=1833, col_offset=15), [Name('third', Load(), lineno=1833, col_offset=31), Name('context', Load(), lineno=1833, col_offset=38)], [], None, None, lineno=1833, col_offset=15), lineno=1833, col_offset=8)], [], lineno=1791, col_offset=4), FunctionDef('_power_modulo', arguments([Name('self', Param(), lineno=1835, col_offset=22), Name('other', Param(), lineno=1835, col_offset=28), Name('modulo', Param(), lineno=1835, col_offset=35), Name('context', Param(), lineno=1835, col_offset=43)], None, None, [Name('None', Load(), lineno=1835, col_offset=51)]), [Expr(Str('Three argument version of __pow__', lineno=1836, col_offset=8), lineno=1836, col_offset=8), Assign([Name('other', Store(), lineno=1841, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1841, col_offset=16), [Name('other', Load(), lineno=1841, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=1841, col_offset=46))], None, None, lineno=1841, col_offset=16), lineno=1841, col_offset=8), Assign([Name('modulo', Store(), lineno=1842, col_offset=8)], Call(Name('_convert_other', Load(), lineno=1842, col_offset=17), [Name('modulo', Load(), lineno=1842, col_offset=32)], [keyword('raiseit', Name('True', Load(), lineno=1842, col_offset=48))], None, None, lineno=1842, col_offset=17), lineno=1842, col_offset=8), If(Compare(Name('context', Load(), lineno=1844, col_offset=11), [Is()], [Name('None', Load(), lineno=1844, col_offset=22)], lineno=1844, col_offset=11), [Assign([Name('context', Store(), lineno=1845, col_offset=12)], Call(Name('getcontext', Load(), lineno=1845, col_offset=22), [], [], None, None, lineno=1845, col_offset=22), lineno=1845, col_offset=12)], [], lineno=1844, col_offset=8), Assign([Name('self_is_nan', Store(), lineno=1849, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1849, col_offset=22), '_isnan', Load(), lineno=1849, col_offset=22), [], [], None, None, lineno=1849, col_offset=22), lineno=1849, col_offset=8), Assign([Name('other_is_nan', Store(), lineno=1850, col_offset=8)], Call(Attribute(Name('other', Load(), lineno=1850, col_offset=23), '_isnan', Load(), lineno=1850, col_offset=23), [], [], None, None, lineno=1850, col_offset=23), lineno=1850, col_offset=8), Assign([Name('modulo_is_nan', Store(), lineno=1851, col_offset=8)], Call(Attribute(Name('modulo', Load(), lineno=1851, col_offset=24), '_isnan', Load(), lineno=1851, col_offset=24), [], [], None, None, lineno=1851, col_offset=24), lineno=1851, col_offset=8), If(BoolOp(Or(), [Name('self_is_nan', Load(), lineno=1852, col_offset=11), Name('other_is_nan', Load(), lineno=1852, col_offset=26), Name('modulo_is_nan', Load(), lineno=1852, col_offset=42)], lineno=1852, col_offset=11), [If(Compare(Name('self_is_nan', Load(), lineno=1853, col_offset=15), [Eq()], [Num(2, lineno=1853, col_offset=30)], lineno=1853, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1854, col_offset=23), '_raise_error', Load(), lineno=1854, col_offset=23), [Name('InvalidOperation', Load(), lineno=1854, col_offset=44), Str('sNaN', lineno=1854, col_offset=62), Name('self', Load(), lineno=1855, col_offset=40)], [], None, None, lineno=1854, col_offset=23), lineno=1854, col_offset=16)], [], lineno=1853, col_offset=12), If(Compare(Name('other_is_nan', Load(), lineno=1856, col_offset=15), [Eq()], [Num(2, lineno=1856, col_offset=31)], lineno=1856, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1857, col_offset=23), '_raise_error', Load(), lineno=1857, col_offset=23), [Name('InvalidOperation', Load(), lineno=1857, col_offset=44), Str('sNaN', lineno=1857, col_offset=62), Name('other', Load(), lineno=1858, col_offset=40)], [], None, None, lineno=1857, col_offset=23), lineno=1857, col_offset=16)], [], lineno=1856, col_offset=12), If(Compare(Name('modulo_is_nan', Load(), lineno=1859, col_offset=15), [Eq()], [Num(2, lineno=1859, col_offset=32)], lineno=1859, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=1860, col_offset=23), '_raise_error', Load(), lineno=1860, col_offset=23), [Name('InvalidOperation', Load(), lineno=1860, col_offset=44), Str('sNaN', lineno=1860, col_offset=62), Name('modulo', Load(), lineno=1861, col_offset=40)], [], None, None, lineno=1860, col_offset=23), lineno=1860, col_offset=16)], [], lineno=1859, col_offset=12), If(Name('self_is_nan', Load(), lineno=1862, col_offset=15), [Return(Call(Attribute(Name('self', Load(), lineno=1863, col_offset=23), '_fix_nan', Load(), lineno=1863, col_offset=23), [Name('context', Load(), lineno=1863, col_offset=37)], [], None, None, lineno=1863, col_offset=23), lineno=1863, col_offset=16)], [], lineno=1862, col_offset=12), If(Name('other_is_nan', Load(), lineno=1864, col_offset=15), [Return(Call(Attribute(Name('other', Load(), lineno=1865, col_offset=23), '_fix_nan', Load(), lineno=1865, col_offset=23), [Name('context', Load(), lineno=1865, col_offset=38)], [], None, None, lineno=1865, col_offset=23), lineno=1865, col_offset=16)], [], lineno=1864, col_offset=12), Return(Call(Attribute(Name('modulo', Load(), lineno=1866, col_offset=19), '_fix_nan', Load(), lineno=1866, col_offset=19), [Name('context', Load(), lineno=1866, col_offset=35)], [], None, None, lineno=1866, col_offset=19), lineno=1866, col_offset=12)], [], lineno=1852, col_offset=8), If(UnaryOp(Not(), BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=1869, col_offset=16), '_isinteger', Load(), lineno=1869, col_offset=16), [], [], None, None, lineno=1869, col_offset=16), Call(Attribute(Name('other', Load(), lineno=1870, col_offset=16), '_isinteger', Load(), lineno=1870, col_offset=16), [], [], None, None, lineno=1870, col_offset=16), Call(Attribute(Name('modulo', Load(), lineno=1871, col_offset=16), '_isinteger', Load(), lineno=1871, col_offset=16), [], [], None, None, lineno=1871, col_offset=16)], lineno=1869, col_offset=16), lineno=1869, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1872, col_offset=19), '_raise_error', Load(), lineno=1872, col_offset=19), [Name('InvalidOperation', Load(), lineno=1872, col_offset=40), Str('pow() 3rd argument not allowed unless all arguments are integers', lineno=1873, col_offset=40)], [], None, None, lineno=1872, col_offset=19), lineno=1872, col_offset=12)], [], lineno=1869, col_offset=8), If(Compare(Name('other', Load(), lineno=1875, col_offset=11), [Lt()], [Num(0, lineno=1875, col_offset=19)], lineno=1875, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1876, col_offset=19), '_raise_error', Load(), lineno=1876, col_offset=19), [Name('InvalidOperation', Load(), lineno=1876, col_offset=40), Str('pow() 2nd argument cannot be negative when 3rd argument specified', lineno=1877, col_offset=40)], [], None, None, lineno=1876, col_offset=19), lineno=1876, col_offset=12)], [], lineno=1875, col_offset=8), If(UnaryOp(Not(), Name('modulo', Load(), lineno=1879, col_offset=15), lineno=1879, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1880, col_offset=19), '_raise_error', Load(), lineno=1880, col_offset=19), [Name('InvalidOperation', Load(), lineno=1880, col_offset=40), Str('pow() 3rd argument cannot be 0', lineno=1881, col_offset=40)], [], None, None, lineno=1880, col_offset=19), lineno=1880, col_offset=12)], [], lineno=1879, col_offset=8), If(Compare(Call(Attribute(Name('modulo', Load(), lineno=1885, col_offset=11), 'adjusted', Load(), lineno=1885, col_offset=11), [], [], None, None, lineno=1885, col_offset=11), [GtE()], [Attribute(Name('context', Load(), lineno=1885, col_offset=32), 'prec', Load(), lineno=1885, col_offset=32)], lineno=1885, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1886, col_offset=19), '_raise_error', Load(), lineno=1886, col_offset=19), [Name('InvalidOperation', Load(), lineno=1886, col_offset=40), Str('insufficient precision: pow() 3rd argument must not have more than precision digits', lineno=1887, col_offset=40)], [], None, None, lineno=1886, col_offset=19), lineno=1886, col_offset=12)], [], lineno=1885, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('other', Load(), lineno=1893, col_offset=15), lineno=1893, col_offset=11), UnaryOp(Not(), Name('self', Load(), lineno=1893, col_offset=29), lineno=1893, col_offset=25)], lineno=1893, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=1894, col_offset=19), '_raise_error', Load(), lineno=1894, col_offset=19), [Name('InvalidOperation', Load(), lineno=1894, col_offset=40), Str('at least one of pow() 1st argument and 2nd argument must be nonzero ;0**0 is not defined', lineno=1895, col_offset=40)], [], None, None, lineno=1894, col_offset=19), lineno=1894, col_offset=12)], [], lineno=1893, col_offset=8), If(Call(Attribute(Name('other', Load(), lineno=1900, col_offset=11), '_iseven', Load(), lineno=1900, col_offset=11), [], [], None, None, lineno=1900, col_offset=11), [Assign([Name('sign', Store(), lineno=1901, col_offset=12)], Num(0, lineno=1901, col_offset=19), lineno=1901, col_offset=12)], [Assign([Name('sign', Store(), lineno=1903, col_offset=12)], Attribute(Name('self', Load(), lineno=1903, col_offset=19), '_sign', Load(), lineno=1903, col_offset=19), lineno=1903, col_offset=12)], lineno=1900, col_offset=8), Assign([Name('modulo', Store(), lineno=1907, col_offset=8)], Call(Name('abs', Load(), lineno=1907, col_offset=17), [Call(Name('int', Load(), lineno=1907, col_offset=21), [Name('modulo', Load(), lineno=1907, col_offset=25)], [], None, None, lineno=1907, col_offset=21)], [], None, None, lineno=1907, col_offset=17), lineno=1907, col_offset=8), Assign([Name('base', Store(), lineno=1908, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1908, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=1908, col_offset=24), 'to_integral_value', Load(), lineno=1908, col_offset=24), [], [], None, None, lineno=1908, col_offset=24)], [], None, None, lineno=1908, col_offset=15), lineno=1908, col_offset=8), Assign([Name('exponent', Store(), lineno=1909, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1909, col_offset=19), [Call(Attribute(Name('other', Load(), lineno=1909, col_offset=28), 'to_integral_value', Load(), lineno=1909, col_offset=28), [], [], None, None, lineno=1909, col_offset=28)], [], None, None, lineno=1909, col_offset=19), lineno=1909, col_offset=8), Assign([Name('base', Store(), lineno=1912, col_offset=8)], BinOp(BinOp(BinOp(Attribute(Name('base', Load(), lineno=1912, col_offset=16), 'int', Load(), lineno=1912, col_offset=16), Mod(), Name('modulo', Load(), lineno=1912, col_offset=27), lineno=1912, col_offset=16), Mult(), Call(Name('pow', Load(), lineno=1912, col_offset=36), [Num(10, lineno=1912, col_offset=40), Attribute(Name('base', Load(), lineno=1912, col_offset=44), 'exp', Load(), lineno=1912, col_offset=44), Name('modulo', Load(), lineno=1912, col_offset=54)], [], None, None, lineno=1912, col_offset=36), lineno=1912, col_offset=34), Mod(), Name('modulo', Load(), lineno=1912, col_offset=65), lineno=1912, col_offset=15), lineno=1912, col_offset=8), For(Name('i', Store(), lineno=1913, col_offset=12), Call(Name('xrange', Load(), lineno=1913, col_offset=17), [Attribute(Name('exponent', Load(), lineno=1913, col_offset=24), 'exp', Load(), lineno=1913, col_offset=24)], [], None, None, lineno=1913, col_offset=17), [Assign([Name('base', Store(), lineno=1914, col_offset=12)], Call(Name('pow', Load(), lineno=1914, col_offset=19), [Name('base', Load(), lineno=1914, col_offset=23), Num(10, lineno=1914, col_offset=29), Name('modulo', Load(), lineno=1914, col_offset=33)], [], None, None, lineno=1914, col_offset=19), lineno=1914, col_offset=12)], [], lineno=1913, col_offset=8), Assign([Name('base', Store(), lineno=1915, col_offset=8)], Call(Name('pow', Load(), lineno=1915, col_offset=15), [Name('base', Load(), lineno=1915, col_offset=19), Attribute(Name('exponent', Load(), lineno=1915, col_offset=25), 'int', Load(), lineno=1915, col_offset=25), Name('modulo', Load(), lineno=1915, col_offset=39)], [], None, None, lineno=1915, col_offset=15), lineno=1915, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=1917, col_offset=15), [Name('sign', Load(), lineno=1917, col_offset=32), Call(Name('str', Load(), lineno=1917, col_offset=38), [Name('base', Load(), lineno=1917, col_offset=42)], [], None, None, lineno=1917, col_offset=38), Num(0, lineno=1917, col_offset=49)], [], None, None, lineno=1917, col_offset=15), lineno=1917, col_offset=8)], [], lineno=1835, col_offset=4), FunctionDef('_power_exact', arguments([Name('self', Param(), lineno=1919, col_offset=21), Name('other', Param(), lineno=1919, col_offset=27), Name('p', Param(), lineno=1919, col_offset=34)], None, None, []), [Expr(Str('Attempt to compute self**other exactly.\n\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation.', lineno=1931, col_offset=-1), lineno=1931, col_offset=-1), Assign([Name('x', Store(), lineno=1978, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1978, col_offset=12), [Name('self', Load(), lineno=1978, col_offset=21)], [], None, None, lineno=1978, col_offset=12), lineno=1978, col_offset=8), Assign([Tuple([Name('xc', Store(), lineno=1979, col_offset=8), Name('xe', Store(), lineno=1979, col_offset=12)], Store(), lineno=1979, col_offset=8)], Tuple([Attribute(Name('x', Load(), lineno=1979, col_offset=17), 'int', Load(), lineno=1979, col_offset=17), Attribute(Name('x', Load(), lineno=1979, col_offset=24), 'exp', Load(), lineno=1979, col_offset=24)], Load(), lineno=1979, col_offset=17), lineno=1979, col_offset=8), While(Compare(BinOp(Name('xc', Load(), lineno=1980, col_offset=14), Mod(), Num(10, lineno=1980, col_offset=19), lineno=1980, col_offset=14), [Eq()], [Num(0, lineno=1980, col_offset=25)], lineno=1980, col_offset=14), [AugAssign(Name('xc', Store(), lineno=1981, col_offset=12), FloorDiv(), Num(10, lineno=1981, col_offset=19), lineno=1981, col_offset=12), AugAssign(Name('xe', Store(), lineno=1982, col_offset=12), Add(), Num(1, lineno=1982, col_offset=18), lineno=1982, col_offset=12)], [], lineno=1980, col_offset=8), Assign([Name('y', Store(), lineno=1984, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=1984, col_offset=12), [Name('other', Load(), lineno=1984, col_offset=21)], [], None, None, lineno=1984, col_offset=12), lineno=1984, col_offset=8), Assign([Tuple([Name('yc', Store(), lineno=1985, col_offset=8), Name('ye', Store(), lineno=1985, col_offset=12)], Store(), lineno=1985, col_offset=8)], Tuple([Attribute(Name('y', Load(), lineno=1985, col_offset=17), 'int', Load(), lineno=1985, col_offset=17), Attribute(Name('y', Load(), lineno=1985, col_offset=24), 'exp', Load(), lineno=1985, col_offset=24)], Load(), lineno=1985, col_offset=17), lineno=1985, col_offset=8), While(Compare(BinOp(Name('yc', Load(), lineno=1986, col_offset=14), Mod(), Num(10, lineno=1986, col_offset=19), lineno=1986, col_offset=14), [Eq()], [Num(0, lineno=1986, col_offset=25)], lineno=1986, col_offset=14), [AugAssign(Name('yc', Store(), lineno=1987, col_offset=12), FloorDiv(), Num(10, lineno=1987, col_offset=19), lineno=1987, col_offset=12), AugAssign(Name('ye', Store(), lineno=1988, col_offset=12), Add(), Num(1, lineno=1988, col_offset=18), lineno=1988, col_offset=12)], [], lineno=1986, col_offset=8), If(Compare(Name('xc', Load(), lineno=1992, col_offset=11), [Eq()], [Num(1, lineno=1992, col_offset=17)], lineno=1992, col_offset=11), [AugAssign(Name('xe', Store(), lineno=1993, col_offset=12), Mult(), Name('yc', Load(), lineno=1993, col_offset=18), lineno=1993, col_offset=12), While(Compare(BinOp(Name('xe', Load(), lineno=1995, col_offset=18), Mod(), Num(10, lineno=1995, col_offset=23), lineno=1995, col_offset=18), [Eq()], [Num(0, lineno=1995, col_offset=29)], lineno=1995, col_offset=18), [AugAssign(Name('xe', Store(), lineno=1996, col_offset=16), FloorDiv(), Num(10, lineno=1996, col_offset=23), lineno=1996, col_offset=16), AugAssign(Name('ye', Store(), lineno=1997, col_offset=16), Add(), Num(1, lineno=1997, col_offset=22), lineno=1997, col_offset=16)], [], lineno=1995, col_offset=12), If(Compare(Name('ye', Load(), lineno=1998, col_offset=15), [Lt()], [Num(0, lineno=1998, col_offset=20)], lineno=1998, col_offset=15), [Return(Name('None', Load(), lineno=1999, col_offset=23), lineno=1999, col_offset=16)], [], lineno=1998, col_offset=12), Assign([Name('exponent', Store(), lineno=2000, col_offset=12)], BinOp(Name('xe', Load(), lineno=2000, col_offset=23), Mult(), BinOp(Num(10, lineno=2000, col_offset=28), Pow(), Name('ye', Load(), lineno=2000, col_offset=32), lineno=2000, col_offset=28), lineno=2000, col_offset=23), lineno=2000, col_offset=12), If(Compare(Attribute(Name('y', Load(), lineno=2001, col_offset=15), 'sign', Load(), lineno=2001, col_offset=15), [Eq()], [Num(1, lineno=2001, col_offset=25)], lineno=2001, col_offset=15), [Assign([Name('exponent', Store(), lineno=2002, col_offset=16)], UnaryOp(USub(), Name('exponent', Load(), lineno=2002, col_offset=28), lineno=2002, col_offset=27), lineno=2002, col_offset=16)], [], lineno=2001, col_offset=12), If(BoolOp(And(), [Call(Attribute(Name('other', Load(), lineno=2004, col_offset=15), '_isinteger', Load(), lineno=2004, col_offset=15), [], [], None, None, lineno=2004, col_offset=15), Compare(Attribute(Name('other', Load(), lineno=2004, col_offset=38), '_sign', Load(), lineno=2004, col_offset=38), [Eq()], [Num(0, lineno=2004, col_offset=53)], lineno=2004, col_offset=38)], lineno=2004, col_offset=15), [Assign([Name('ideal_exponent', Store(), lineno=2005, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=2005, col_offset=33), '_exp', Load(), lineno=2005, col_offset=33), Mult(), Call(Name('int', Load(), lineno=2005, col_offset=43), [Name('other', Load(), lineno=2005, col_offset=47)], [], None, None, lineno=2005, col_offset=43), lineno=2005, col_offset=33), lineno=2005, col_offset=16), Assign([Name('zeros', Store(), lineno=2006, col_offset=16)], Call(Name('min', Load(), lineno=2006, col_offset=24), [BinOp(Name('exponent', Load(), lineno=2006, col_offset=28), Sub(), Name('ideal_exponent', Load(), lineno=2006, col_offset=37), lineno=2006, col_offset=28), BinOp(Name('p', Load(), lineno=2006, col_offset=53), Sub(), Num(1, lineno=2006, col_offset=55), lineno=2006, col_offset=53)], [], None, None, lineno=2006, col_offset=24), lineno=2006, col_offset=16)], [Assign([Name('zeros', Store(), lineno=2008, col_offset=16)], Num(0, lineno=2008, col_offset=24), lineno=2008, col_offset=16)], lineno=2004, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=2009, col_offset=19), [Num(0, lineno=2009, col_offset=36), BinOp(Str('1', lineno=2009, col_offset=39), Add(), BinOp(Str('0', lineno=2009, col_offset=45), Mult(), Name('zeros', Load(), lineno=2009, col_offset=49), lineno=2009, col_offset=45), lineno=2009, col_offset=39), BinOp(Name('exponent', Load(), lineno=2009, col_offset=56), Sub(), Name('zeros', Load(), lineno=2009, col_offset=65), lineno=2009, col_offset=56)], [], None, None, lineno=2009, col_offset=19), lineno=2009, col_offset=12)], [], lineno=1992, col_offset=8), If(Compare(Attribute(Name('y', Load(), lineno=2013, col_offset=11), 'sign', Load(), lineno=2013, col_offset=11), [Eq()], [Num(1, lineno=2013, col_offset=21)], lineno=2013, col_offset=11), [Assign([Name('last_digit', Store(), lineno=2014, col_offset=12)], BinOp(Name('xc', Load(), lineno=2014, col_offset=25), Mod(), Num(10, lineno=2014, col_offset=30), lineno=2014, col_offset=25), lineno=2014, col_offset=12), If(Compare(Name('last_digit', Load(), lineno=2015, col_offset=15), [In()], [Tuple([Num(2, lineno=2015, col_offset=30), Num(4, lineno=2015, col_offset=32), Num(6, lineno=2015, col_offset=34), Num(8, lineno=2015, col_offset=36)], Load(), lineno=2015, col_offset=30)], lineno=2015, col_offset=15), [If(Compare(BinOp(Name('xc', Load(), lineno=2017, col_offset=19), BitAnd(), UnaryOp(USub(), Name('xc', Load(), lineno=2017, col_offset=25), lineno=2017, col_offset=24), lineno=2017, col_offset=19), [NotEq()], [Name('xc', Load(), lineno=2017, col_offset=31)], lineno=2017, col_offset=19), [Return(Name('None', Load(), lineno=2018, col_offset=27), lineno=2018, col_offset=20)], [], lineno=2017, col_offset=16), Assign([Name('e', Store(), lineno=2020, col_offset=16)], BinOp(Call(Name('_nbits', Load(), lineno=2020, col_offset=20), [Name('xc', Load(), lineno=2020, col_offset=27)], [], None, None, lineno=2020, col_offset=20), Sub(), Num(1, lineno=2020, col_offset=31), lineno=2020, col_offset=20), lineno=2020, col_offset=16), If(Compare(Name('ye', Load(), lineno=2022, col_offset=19), [GtE()], [Num(0, lineno=2022, col_offset=25)], lineno=2022, col_offset=19), [Assign([Name('y_as_int', Store(), lineno=2023, col_offset=20)], BinOp(Name('yc', Load(), lineno=2023, col_offset=31), Mult(), BinOp(Num(10, lineno=2023, col_offset=34), Pow(), Name('ye', Load(), lineno=2023, col_offset=38), lineno=2023, col_offset=34), lineno=2023, col_offset=31), lineno=2023, col_offset=20), Assign([Name('e', Store(), lineno=2024, col_offset=20)], BinOp(Name('e', Load(), lineno=2024, col_offset=24), Mult(), Name('y_as_int', Load(), lineno=2024, col_offset=26), lineno=2024, col_offset=24), lineno=2024, col_offset=20), Assign([Name('xe', Store(), lineno=2025, col_offset=20)], BinOp(Name('xe', Load(), lineno=2025, col_offset=25), Mult(), Name('y_as_int', Load(), lineno=2025, col_offset=28), lineno=2025, col_offset=25), lineno=2025, col_offset=20)], [Assign([Name('ten_pow', Store(), lineno=2027, col_offset=20)], BinOp(Num(10, lineno=2027, col_offset=30), Pow(), UnaryOp(USub(), Name('ye', Load(), lineno=2027, col_offset=35), lineno=2027, col_offset=34), lineno=2027, col_offset=30), lineno=2027, col_offset=20), Assign([Tuple([Name('e', Store(), lineno=2028, col_offset=20), Name('remainder', Store(), lineno=2028, col_offset=23)], Store(), lineno=2028, col_offset=20)], Call(Name('divmod', Load(), lineno=2028, col_offset=35), [BinOp(Name('e', Load(), lineno=2028, col_offset=42), Mult(), Name('yc', Load(), lineno=2028, col_offset=44), lineno=2028, col_offset=42), Name('ten_pow', Load(), lineno=2028, col_offset=48)], [], None, None, lineno=2028, col_offset=35), lineno=2028, col_offset=20), If(Name('remainder', Load(), lineno=2029, col_offset=23), [Return(Name('None', Load(), lineno=2030, col_offset=31), lineno=2030, col_offset=24)], [], lineno=2029, col_offset=20), Assign([Tuple([Name('xe', Store(), lineno=2031, col_offset=20), Name('remainder', Store(), lineno=2031, col_offset=24)], Store(), lineno=2031, col_offset=20)], Call(Name('divmod', Load(), lineno=2031, col_offset=36), [BinOp(Name('xe', Load(), lineno=2031, col_offset=43), Mult(), Name('yc', Load(), lineno=2031, col_offset=46), lineno=2031, col_offset=43), Name('ten_pow', Load(), lineno=2031, col_offset=50)], [], None, None, lineno=2031, col_offset=36), lineno=2031, col_offset=20), If(Name('remainder', Load(), lineno=2032, col_offset=23), [Return(Name('None', Load(), lineno=2033, col_offset=31), lineno=2033, col_offset=24)], [], lineno=2032, col_offset=20)], lineno=2022, col_offset=16), If(Compare(BinOp(Name('e', Load(), lineno=2035, col_offset=19), Mult(), Num(65, lineno=2035, col_offset=21), lineno=2035, col_offset=19), [GtE()], [BinOp(Name('p', Load(), lineno=2035, col_offset=27), Mult(), Num(93, lineno=2035, col_offset=29), lineno=2035, col_offset=27)], lineno=2035, col_offset=19), [Return(Name('None', Load(), lineno=2036, col_offset=27), lineno=2036, col_offset=20)], [], lineno=2035, col_offset=16), Assign([Name('xc', Store(), lineno=2037, col_offset=16)], BinOp(Num(5, lineno=2037, col_offset=21), Pow(), Name('e', Load(), lineno=2037, col_offset=24), lineno=2037, col_offset=21), lineno=2037, col_offset=16)], [If(Compare(Name('last_digit', Load(), lineno=2039, col_offset=17), [Eq()], [Num(5, lineno=2039, col_offset=31)], lineno=2039, col_offset=17), [Assign([Name('e', Store(), lineno=2042, col_offset=16)], BinOp(BinOp(Call(Name('_nbits', Load(), lineno=2042, col_offset=20), [Name('xc', Load(), lineno=2042, col_offset=27)], [], None, None, lineno=2042, col_offset=20), Mult(), Num(28, lineno=2042, col_offset=31), lineno=2042, col_offset=20), FloorDiv(), Num(65, lineno=2042, col_offset=35), lineno=2042, col_offset=33), lineno=2042, col_offset=16), Assign([Tuple([Name('xc', Store(), lineno=2043, col_offset=16), Name('remainder', Store(), lineno=2043, col_offset=20)], Store(), lineno=2043, col_offset=16)], Call(Name('divmod', Load(), lineno=2043, col_offset=32), [BinOp(Num(5, lineno=2043, col_offset=39), Pow(), Name('e', Load(), lineno=2043, col_offset=42), lineno=2043, col_offset=39), Name('xc', Load(), lineno=2043, col_offset=45)], [], None, None, lineno=2043, col_offset=32), lineno=2043, col_offset=16), If(Name('remainder', Load(), lineno=2044, col_offset=19), [Return(Name('None', Load(), lineno=2045, col_offset=27), lineno=2045, col_offset=20)], [], lineno=2044, col_offset=16), While(Compare(BinOp(Name('xc', Load(), lineno=2046, col_offset=22), Mod(), Num(5, lineno=2046, col_offset=27), lineno=2046, col_offset=22), [Eq()], [Num(0, lineno=2046, col_offset=32)], lineno=2046, col_offset=22), [AugAssign(Name('xc', Store(), lineno=2047, col_offset=20), FloorDiv(), Num(5, lineno=2047, col_offset=27), lineno=2047, col_offset=20), AugAssign(Name('e', Store(), lineno=2048, col_offset=20), Sub(), Num(1, lineno=2048, col_offset=25), lineno=2048, col_offset=20)], [], lineno=2046, col_offset=16), If(Compare(Name('ye', Load(), lineno=2049, col_offset=19), [GtE()], [Num(0, lineno=2049, col_offset=25)], lineno=2049, col_offset=19), [Assign([Name('y_as_integer', Store(), lineno=2050, col_offset=20)], BinOp(Name('yc', Load(), lineno=2050, col_offset=35), Mult(), BinOp(Num(10, lineno=2050, col_offset=38), Pow(), Name('ye', Load(), lineno=2050, col_offset=42), lineno=2050, col_offset=38), lineno=2050, col_offset=35), lineno=2050, col_offset=20), Assign([Name('e', Store(), lineno=2051, col_offset=20)], BinOp(Name('e', Load(), lineno=2051, col_offset=24), Mult(), Name('y_as_integer', Load(), lineno=2051, col_offset=26), lineno=2051, col_offset=24), lineno=2051, col_offset=20), Assign([Name('xe', Store(), lineno=2052, col_offset=20)], BinOp(Name('xe', Load(), lineno=2052, col_offset=25), Mult(), Name('y_as_integer', Load(), lineno=2052, col_offset=28), lineno=2052, col_offset=25), lineno=2052, col_offset=20)], [Assign([Name('ten_pow', Store(), lineno=2054, col_offset=20)], BinOp(Num(10, lineno=2054, col_offset=30), Pow(), UnaryOp(USub(), Name('ye', Load(), lineno=2054, col_offset=35), lineno=2054, col_offset=34), lineno=2054, col_offset=30), lineno=2054, col_offset=20), Assign([Tuple([Name('e', Store(), lineno=2055, col_offset=20), Name('remainder', Store(), lineno=2055, col_offset=23)], Store(), lineno=2055, col_offset=20)], Call(Name('divmod', Load(), lineno=2055, col_offset=35), [BinOp(Name('e', Load(), lineno=2055, col_offset=42), Mult(), Name('yc', Load(), lineno=2055, col_offset=44), lineno=2055, col_offset=42), Name('ten_pow', Load(), lineno=2055, col_offset=48)], [], None, None, lineno=2055, col_offset=35), lineno=2055, col_offset=20), If(Name('remainder', Load(), lineno=2056, col_offset=23), [Return(Name('None', Load(), lineno=2057, col_offset=31), lineno=2057, col_offset=24)], [], lineno=2056, col_offset=20), Assign([Tuple([Name('xe', Store(), lineno=2058, col_offset=20), Name('remainder', Store(), lineno=2058, col_offset=24)], Store(), lineno=2058, col_offset=20)], Call(Name('divmod', Load(), lineno=2058, col_offset=36), [BinOp(Name('xe', Load(), lineno=2058, col_offset=43), Mult(), Name('yc', Load(), lineno=2058, col_offset=46), lineno=2058, col_offset=43), Name('ten_pow', Load(), lineno=2058, col_offset=50)], [], None, None, lineno=2058, col_offset=36), lineno=2058, col_offset=20), If(Name('remainder', Load(), lineno=2059, col_offset=23), [Return(Name('None', Load(), lineno=2060, col_offset=31), lineno=2060, col_offset=24)], [], lineno=2059, col_offset=20)], lineno=2049, col_offset=16), If(Compare(BinOp(Name('e', Load(), lineno=2061, col_offset=19), Mult(), Num(3, lineno=2061, col_offset=21), lineno=2061, col_offset=19), [GtE()], [BinOp(Name('p', Load(), lineno=2061, col_offset=26), Mult(), Num(10, lineno=2061, col_offset=28), lineno=2061, col_offset=26)], lineno=2061, col_offset=19), [Return(Name('None', Load(), lineno=2062, col_offset=27), lineno=2062, col_offset=20)], [], lineno=2061, col_offset=16), Assign([Name('xc', Store(), lineno=2063, col_offset=16)], BinOp(Num(2, lineno=2063, col_offset=21), Pow(), Name('e', Load(), lineno=2063, col_offset=24), lineno=2063, col_offset=21), lineno=2063, col_offset=16)], [Return(Name('None', Load(), lineno=2065, col_offset=23), lineno=2065, col_offset=16)], lineno=2039, col_offset=17)], lineno=2015, col_offset=12), If(Compare(Name('xc', Load(), lineno=2067, col_offset=15), [GtE()], [BinOp(Num(10, lineno=2067, col_offset=21), Pow(), Name('p', Load(), lineno=2067, col_offset=25), lineno=2067, col_offset=21)], lineno=2067, col_offset=15), [Return(Name('None', Load(), lineno=2068, col_offset=23), lineno=2068, col_offset=16)], [], lineno=2067, col_offset=12), Assign([Name('xe', Store(), lineno=2069, col_offset=12)], BinOp(UnaryOp(USub(), Name('e', Load(), lineno=2069, col_offset=18), lineno=2069, col_offset=17), Sub(), Name('xe', Load(), lineno=2069, col_offset=20), lineno=2069, col_offset=17), lineno=2069, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=2070, col_offset=19), [Num(0, lineno=2070, col_offset=36), Call(Name('str', Load(), lineno=2070, col_offset=39), [Name('xc', Load(), lineno=2070, col_offset=43)], [], None, None, lineno=2070, col_offset=39), Name('xe', Load(), lineno=2070, col_offset=48)], [], None, None, lineno=2070, col_offset=19), lineno=2070, col_offset=12)], [], lineno=2013, col_offset=8), If(Compare(Name('ye', Load(), lineno=2073, col_offset=11), [GtE()], [Num(0, lineno=2073, col_offset=17)], lineno=2073, col_offset=11), [Assign([Tuple([Name('m', Store(), lineno=2074, col_offset=12), Name('n', Store(), lineno=2074, col_offset=15)], Store(), lineno=2074, col_offset=12)], Tuple([BinOp(Name('yc', Load(), lineno=2074, col_offset=19), Mult(), BinOp(Num(10, lineno=2074, col_offset=22), Pow(), Name('ye', Load(), lineno=2074, col_offset=26), lineno=2074, col_offset=22), lineno=2074, col_offset=19), Num(1, lineno=2074, col_offset=30)], Load(), lineno=2074, col_offset=19), lineno=2074, col_offset=12)], [If(BoolOp(And(), [Compare(Name('xe', Load(), lineno=2076, col_offset=15), [NotEq()], [Num(0, lineno=2076, col_offset=21)], lineno=2076, col_offset=15), Compare(Call(Name('len', Load(), lineno=2076, col_offset=27), [Call(Name('str', Load(), lineno=2076, col_offset=31), [Call(Name('abs', Load(), lineno=2076, col_offset=35), [BinOp(Name('yc', Load(), lineno=2076, col_offset=39), Mult(), Name('xe', Load(), lineno=2076, col_offset=42), lineno=2076, col_offset=39)], [], None, None, lineno=2076, col_offset=35)], [], None, None, lineno=2076, col_offset=31)], [], None, None, lineno=2076, col_offset=27), [LtE()], [UnaryOp(USub(), Name('ye', Load(), lineno=2076, col_offset=52), lineno=2076, col_offset=51)], lineno=2076, col_offset=27)], lineno=2076, col_offset=15), [Return(Name('None', Load(), lineno=2077, col_offset=23), lineno=2077, col_offset=16)], [], lineno=2076, col_offset=12), Assign([Name('xc_bits', Store(), lineno=2078, col_offset=12)], Call(Name('_nbits', Load(), lineno=2078, col_offset=22), [Name('xc', Load(), lineno=2078, col_offset=29)], [], None, None, lineno=2078, col_offset=22), lineno=2078, col_offset=12), If(BoolOp(And(), [Compare(Name('xc', Load(), lineno=2079, col_offset=15), [NotEq()], [Num(1, lineno=2079, col_offset=21)], lineno=2079, col_offset=15), Compare(Call(Name('len', Load(), lineno=2079, col_offset=27), [Call(Name('str', Load(), lineno=2079, col_offset=31), [BinOp(Call(Name('abs', Load(), lineno=2079, col_offset=35), [Name('yc', Load(), lineno=2079, col_offset=39)], [], None, None, lineno=2079, col_offset=35), Mult(), Name('xc_bits', Load(), lineno=2079, col_offset=43), lineno=2079, col_offset=35)], [], None, None, lineno=2079, col_offset=31)], [], None, None, lineno=2079, col_offset=27), [LtE()], [UnaryOp(USub(), Name('ye', Load(), lineno=2079, col_offset=57), lineno=2079, col_offset=56)], lineno=2079, col_offset=27)], lineno=2079, col_offset=15), [Return(Name('None', Load(), lineno=2080, col_offset=23), lineno=2080, col_offset=16)], [], lineno=2079, col_offset=12), Assign([Tuple([Name('m', Store(), lineno=2081, col_offset=12), Name('n', Store(), lineno=2081, col_offset=15)], Store(), lineno=2081, col_offset=12)], Tuple([Name('yc', Load(), lineno=2081, col_offset=19), BinOp(Num(10, lineno=2081, col_offset=23), Pow(), UnaryOp(USub(), Name('ye', Load(), lineno=2081, col_offset=29), lineno=2081, col_offset=28), lineno=2081, col_offset=23)], Load(), lineno=2081, col_offset=19), lineno=2081, col_offset=12), While(Compare(BinOp(Name('m', Load(), lineno=2082, col_offset=18), Mod(), Num(2, lineno=2082, col_offset=22), lineno=2082, col_offset=18), [Eq(), Eq()], [BinOp(Name('n', Load(), lineno=2082, col_offset=27), Mod(), Num(2, lineno=2082, col_offset=31), lineno=2082, col_offset=27), Num(0, lineno=2082, col_offset=36)], lineno=2082, col_offset=18), [AugAssign(Name('m', Store(), lineno=2083, col_offset=16), FloorDiv(), Num(2, lineno=2083, col_offset=22), lineno=2083, col_offset=16), AugAssign(Name('n', Store(), lineno=2084, col_offset=16), FloorDiv(), Num(2, lineno=2084, col_offset=22), lineno=2084, col_offset=16)], [], lineno=2082, col_offset=12), While(Compare(BinOp(Name('m', Load(), lineno=2085, col_offset=18), Mod(), Num(5, lineno=2085, col_offset=22), lineno=2085, col_offset=18), [Eq(), Eq()], [BinOp(Name('n', Load(), lineno=2085, col_offset=27), Mod(), Num(5, lineno=2085, col_offset=31), lineno=2085, col_offset=27), Num(0, lineno=2085, col_offset=36)], lineno=2085, col_offset=18), [AugAssign(Name('m', Store(), lineno=2086, col_offset=16), FloorDiv(), Num(5, lineno=2086, col_offset=22), lineno=2086, col_offset=16), AugAssign(Name('n', Store(), lineno=2087, col_offset=16), FloorDiv(), Num(5, lineno=2087, col_offset=22), lineno=2087, col_offset=16)], [], lineno=2085, col_offset=12)], lineno=2073, col_offset=8), If(Compare(Name('n', Load(), lineno=2090, col_offset=11), [Gt()], [Num(1, lineno=2090, col_offset=15)], lineno=2090, col_offset=11), [If(BoolOp(And(), [Compare(Name('xc', Load(), lineno=2092, col_offset=15), [NotEq()], [Num(1, lineno=2092, col_offset=21)], lineno=2092, col_offset=15), Compare(Name('xc_bits', Load(), lineno=2092, col_offset=27), [LtE()], [Name('n', Load(), lineno=2092, col_offset=38)], lineno=2092, col_offset=27)], lineno=2092, col_offset=15), [Return(Name('None', Load(), lineno=2093, col_offset=23), lineno=2093, col_offset=16)], [], lineno=2092, col_offset=12), Assign([Tuple([Name('xe', Store(), lineno=2095, col_offset=12), Name('rem', Store(), lineno=2095, col_offset=16)], Store(), lineno=2095, col_offset=12)], Call(Name('divmod', Load(), lineno=2095, col_offset=22), [Name('xe', Load(), lineno=2095, col_offset=29), Name('n', Load(), lineno=2095, col_offset=33)], [], None, None, lineno=2095, col_offset=22), lineno=2095, col_offset=12), If(Compare(Name('rem', Load(), lineno=2096, col_offset=15), [NotEq()], [Num(0, lineno=2096, col_offset=22)], lineno=2096, col_offset=15), [Return(Name('None', Load(), lineno=2097, col_offset=23), lineno=2097, col_offset=16)], [], lineno=2096, col_offset=12), Assign([Name('a', Store(), lineno=2100, col_offset=12)], BinOp(Num(1L, lineno=2100, col_offset=16), LShift(), UnaryOp(USub(), BinOp(UnaryOp(USub(), Call(Name('_nbits', Load(), lineno=2100, col_offset=25), [Name('xc', Load(), lineno=2100, col_offset=32)], [], None, None, lineno=2100, col_offset=25), lineno=2100, col_offset=24), FloorDiv(), Name('n', Load(), lineno=2100, col_offset=37), lineno=2100, col_offset=24), lineno=2100, col_offset=22), lineno=2100, col_offset=16), lineno=2100, col_offset=12), While(Name('True', Load(), lineno=2101, col_offset=18), [Assign([Tuple([Name('q', Store(), lineno=2102, col_offset=16), Name('r', Store(), lineno=2102, col_offset=19)], Store(), lineno=2102, col_offset=16)], Call(Name('divmod', Load(), lineno=2102, col_offset=23), [Name('xc', Load(), lineno=2102, col_offset=30), BinOp(Name('a', Load(), lineno=2102, col_offset=34), Pow(), BinOp(Name('n', Load(), lineno=2102, col_offset=38), Sub(), Num(1, lineno=2102, col_offset=40), lineno=2102, col_offset=38), lineno=2102, col_offset=34)], [], None, None, lineno=2102, col_offset=23), lineno=2102, col_offset=16), If(Compare(Name('a', Load(), lineno=2103, col_offset=19), [LtE()], [Name('q', Load(), lineno=2103, col_offset=24)], lineno=2103, col_offset=19), [Break( lineno=2104, col_offset=20)], [Assign([Name('a', Store(), lineno=2106, col_offset=20)], BinOp(BinOp(BinOp(Name('a', Load(), lineno=2106, col_offset=25), Mult(), BinOp(Name('n', Load(), lineno=2106, col_offset=28), Sub(), Num(1, lineno=2106, col_offset=30), lineno=2106, col_offset=28), lineno=2106, col_offset=25), Add(), Name('q', Load(), lineno=2106, col_offset=35), lineno=2106, col_offset=25), FloorDiv(), Name('n', Load(), lineno=2106, col_offset=39), lineno=2106, col_offset=24), lineno=2106, col_offset=20)], lineno=2103, col_offset=16)], [], lineno=2101, col_offset=12), If(UnaryOp(Not(), BoolOp(And(), [Compare(Name('a', Load(), lineno=2107, col_offset=20), [Eq()], [Name('q', Load(), lineno=2107, col_offset=25)], lineno=2107, col_offset=20), Compare(Name('r', Load(), lineno=2107, col_offset=31), [Eq()], [Num(0, lineno=2107, col_offset=36)], lineno=2107, col_offset=31)], lineno=2107, col_offset=20), lineno=2107, col_offset=15), [Return(Name('None', Load(), lineno=2108, col_offset=23), lineno=2108, col_offset=16)], [], lineno=2107, col_offset=12), Assign([Name('xc', Store(), lineno=2109, col_offset=12)], Name('a', Load(), lineno=2109, col_offset=17), lineno=2109, col_offset=12)], [], lineno=2090, col_offset=8), If(BoolOp(And(), [Compare(Name('xc', Load(), lineno=2116, col_offset=11), [Gt()], [Num(1, lineno=2116, col_offset=16)], lineno=2116, col_offset=11), Compare(Name('m', Load(), lineno=2116, col_offset=22), [Gt()], [BinOp(BinOp(Name('p', Load(), lineno=2116, col_offset=26), Mult(), Num(100, lineno=2116, col_offset=28), lineno=2116, col_offset=26), FloorDiv(), Call(Name('_log10_lb', Load(), lineno=2116, col_offset=33), [Name('xc', Load(), lineno=2116, col_offset=43)], [], None, None, lineno=2116, col_offset=33), lineno=2116, col_offset=31)], lineno=2116, col_offset=22)], lineno=2116, col_offset=11), [Return(Name('None', Load(), lineno=2117, col_offset=19), lineno=2117, col_offset=12)], [], lineno=2116, col_offset=8), Assign([Name('xc', Store(), lineno=2118, col_offset=8)], BinOp(Name('xc', Load(), lineno=2118, col_offset=13), Pow(), Name('m', Load(), lineno=2118, col_offset=17), lineno=2118, col_offset=13), lineno=2118, col_offset=8), AugAssign(Name('xe', Store(), lineno=2119, col_offset=8), Mult(), Name('m', Load(), lineno=2119, col_offset=14), lineno=2119, col_offset=8), If(Compare(Name('xc', Load(), lineno=2120, col_offset=11), [Gt()], [BinOp(Num(10, lineno=2120, col_offset=16), Pow(), Name('p', Load(), lineno=2120, col_offset=20), lineno=2120, col_offset=16)], lineno=2120, col_offset=11), [Return(Name('None', Load(), lineno=2121, col_offset=19), lineno=2121, col_offset=12)], [], lineno=2120, col_offset=8), Assign([Name('str_xc', Store(), lineno=2126, col_offset=8)], Call(Name('str', Load(), lineno=2126, col_offset=17), [Name('xc', Load(), lineno=2126, col_offset=21)], [], None, None, lineno=2126, col_offset=17), lineno=2126, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('other', Load(), lineno=2127, col_offset=11), '_isinteger', Load(), lineno=2127, col_offset=11), [], [], None, None, lineno=2127, col_offset=11), Compare(Attribute(Name('other', Load(), lineno=2127, col_offset=34), '_sign', Load(), lineno=2127, col_offset=34), [Eq()], [Num(0, lineno=2127, col_offset=49)], lineno=2127, col_offset=34)], lineno=2127, col_offset=11), [Assign([Name('ideal_exponent', Store(), lineno=2128, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=2128, col_offset=29), '_exp', Load(), lineno=2128, col_offset=29), Mult(), Call(Name('int', Load(), lineno=2128, col_offset=39), [Name('other', Load(), lineno=2128, col_offset=43)], [], None, None, lineno=2128, col_offset=39), lineno=2128, col_offset=29), lineno=2128, col_offset=12), Assign([Name('zeros', Store(), lineno=2129, col_offset=12)], Call(Name('min', Load(), lineno=2129, col_offset=20), [BinOp(Name('xe', Load(), lineno=2129, col_offset=24), Sub(), Name('ideal_exponent', Load(), lineno=2129, col_offset=27), lineno=2129, col_offset=24), BinOp(Name('p', Load(), lineno=2129, col_offset=43), Sub(), Call(Name('len', Load(), lineno=2129, col_offset=45), [Name('str_xc', Load(), lineno=2129, col_offset=49)], [], None, None, lineno=2129, col_offset=45), lineno=2129, col_offset=43)], [], None, None, lineno=2129, col_offset=20), lineno=2129, col_offset=12)], [Assign([Name('zeros', Store(), lineno=2131, col_offset=12)], Num(0, lineno=2131, col_offset=20), lineno=2131, col_offset=12)], lineno=2127, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=2132, col_offset=15), [Num(0, lineno=2132, col_offset=32), BinOp(Name('str_xc', Load(), lineno=2132, col_offset=35), Add(), BinOp(Str('0', lineno=2132, col_offset=42), Mult(), Name('zeros', Load(), lineno=2132, col_offset=46), lineno=2132, col_offset=42), lineno=2132, col_offset=35), BinOp(Name('xe', Load(), lineno=2132, col_offset=53), Sub(), Name('zeros', Load(), lineno=2132, col_offset=56), lineno=2132, col_offset=53)], [], None, None, lineno=2132, col_offset=15), lineno=2132, col_offset=8)], [], lineno=1919, col_offset=4), FunctionDef('__pow__', arguments([Name('self', Param(), lineno=2134, col_offset=16), Name('other', Param(), lineno=2134, col_offset=22), Name('modulo', Param(), lineno=2134, col_offset=29), Name('context', Param(), lineno=2134, col_offset=42)], None, None, [Name('None', Load(), lineno=2134, col_offset=36), Name('None', Load(), lineno=2134, col_offset=50)]), [Expr(Str('Return self ** other [ % modulo].\n\n        With two arguments, compute self**other.\n\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        ', lineno=2156, col_offset=-1), lineno=2156, col_offset=-1), If(Compare(Name('modulo', Load(), lineno=2158, col_offset=11), [IsNot()], [Name('None', Load(), lineno=2158, col_offset=25)], lineno=2158, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=2159, col_offset=19), '_power_modulo', Load(), lineno=2159, col_offset=19), [Name('other', Load(), lineno=2159, col_offset=38), Name('modulo', Load(), lineno=2159, col_offset=45), Name('context', Load(), lineno=2159, col_offset=53)], [], None, None, lineno=2159, col_offset=19), lineno=2159, col_offset=12)], [], lineno=2158, col_offset=8), Assign([Name('other', Store(), lineno=2161, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2161, col_offset=16), [Name('other', Load(), lineno=2161, col_offset=31)], [], None, None, lineno=2161, col_offset=16), lineno=2161, col_offset=8), If(Compare(Name('other', Load(), lineno=2162, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=2162, col_offset=20)], lineno=2162, col_offset=11), [Return(Name('other', Load(), lineno=2163, col_offset=19), lineno=2163, col_offset=12)], [], lineno=2162, col_offset=8), If(Compare(Name('context', Load(), lineno=2165, col_offset=11), [Is()], [Name('None', Load(), lineno=2165, col_offset=22)], lineno=2165, col_offset=11), [Assign([Name('context', Store(), lineno=2166, col_offset=12)], Call(Name('getcontext', Load(), lineno=2166, col_offset=22), [], [], None, None, lineno=2166, col_offset=22), lineno=2166, col_offset=12)], [], lineno=2165, col_offset=8), Assign([Name('ans', Store(), lineno=2169, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2169, col_offset=14), '_check_nans', Load(), lineno=2169, col_offset=14), [Name('other', Load(), lineno=2169, col_offset=31), Name('context', Load(), lineno=2169, col_offset=38)], [], None, None, lineno=2169, col_offset=14), lineno=2169, col_offset=8), If(Name('ans', Load(), lineno=2170, col_offset=11), [Return(Name('ans', Load(), lineno=2171, col_offset=19), lineno=2171, col_offset=12)], [], lineno=2170, col_offset=8), If(UnaryOp(Not(), Name('other', Load(), lineno=2174, col_offset=15), lineno=2174, col_offset=11), [If(UnaryOp(Not(), Name('self', Load(), lineno=2175, col_offset=19), lineno=2175, col_offset=15), [Return(Call(Attribute(Name('context', Load(), lineno=2176, col_offset=23), '_raise_error', Load(), lineno=2176, col_offset=23), [Name('InvalidOperation', Load(), lineno=2176, col_offset=44), Str('0 ** 0', lineno=2176, col_offset=62)], [], None, None, lineno=2176, col_offset=23), lineno=2176, col_offset=16)], [Return(Name('_One', Load(), lineno=2178, col_offset=23), lineno=2178, col_offset=16)], lineno=2175, col_offset=12)], [], lineno=2174, col_offset=8), Assign([Name('result_sign', Store(), lineno=2181, col_offset=8)], Num(0, lineno=2181, col_offset=22), lineno=2181, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2182, col_offset=11), '_sign', Load(), lineno=2182, col_offset=11), [Eq()], [Num(1, lineno=2182, col_offset=25)], lineno=2182, col_offset=11), [If(Call(Attribute(Name('other', Load(), lineno=2183, col_offset=15), '_isinteger', Load(), lineno=2183, col_offset=15), [], [], None, None, lineno=2183, col_offset=15), [If(UnaryOp(Not(), Call(Attribute(Name('other', Load(), lineno=2184, col_offset=23), '_iseven', Load(), lineno=2184, col_offset=23), [], [], None, None, lineno=2184, col_offset=23), lineno=2184, col_offset=19), [Assign([Name('result_sign', Store(), lineno=2185, col_offset=20)], Num(1, lineno=2185, col_offset=34), lineno=2185, col_offset=20)], [], lineno=2184, col_offset=16)], [If(Name('self', Load(), lineno=2189, col_offset=19), [Return(Call(Attribute(Name('context', Load(), lineno=2190, col_offset=27), '_raise_error', Load(), lineno=2190, col_offset=27), [Name('InvalidOperation', Load(), lineno=2190, col_offset=48), Str('x ** y with x negative and y not an integer', lineno=2191, col_offset=24)], [], None, None, lineno=2190, col_offset=27), lineno=2190, col_offset=20)], [], lineno=2189, col_offset=16)], lineno=2183, col_offset=12), Assign([Name('self', Store(), lineno=2193, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2193, col_offset=19), 'copy_negate', Load(), lineno=2193, col_offset=19), [], [], None, None, lineno=2193, col_offset=19), lineno=2193, col_offset=12)], [], lineno=2182, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2196, col_offset=15), lineno=2196, col_offset=11), [If(Compare(Attribute(Name('other', Load(), lineno=2197, col_offset=15), '_sign', Load(), lineno=2197, col_offset=15), [Eq()], [Num(0, lineno=2197, col_offset=30)], lineno=2197, col_offset=15), [Return(Call(Name('_dec_from_triple', Load(), lineno=2198, col_offset=23), [Name('result_sign', Load(), lineno=2198, col_offset=40), Str('0', lineno=2198, col_offset=53), Num(0, lineno=2198, col_offset=58)], [], None, None, lineno=2198, col_offset=23), lineno=2198, col_offset=16)], [Return(Subscript(Name('_SignedInfinity', Load(), lineno=2200, col_offset=23), Index(Name('result_sign', Load(), lineno=2200, col_offset=39)), Load(), lineno=2200, col_offset=23), lineno=2200, col_offset=16)], lineno=2197, col_offset=12)], [], lineno=2196, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=2203, col_offset=11), '_isinfinity', Load(), lineno=2203, col_offset=11), [], [], None, None, lineno=2203, col_offset=11), [If(Compare(Attribute(Name('other', Load(), lineno=2204, col_offset=15), '_sign', Load(), lineno=2204, col_offset=15), [Eq()], [Num(0, lineno=2204, col_offset=30)], lineno=2204, col_offset=15), [Return(Subscript(Name('_SignedInfinity', Load(), lineno=2205, col_offset=23), Index(Name('result_sign', Load(), lineno=2205, col_offset=39)), Load(), lineno=2205, col_offset=23), lineno=2205, col_offset=16)], [Return(Call(Name('_dec_from_triple', Load(), lineno=2207, col_offset=23), [Name('result_sign', Load(), lineno=2207, col_offset=40), Str('0', lineno=2207, col_offset=53), Num(0, lineno=2207, col_offset=58)], [], None, None, lineno=2207, col_offset=23), lineno=2207, col_offset=16)], lineno=2204, col_offset=12)], [], lineno=2203, col_offset=8), If(Compare(Name('self', Load(), lineno=2212, col_offset=11), [Eq()], [Name('_One', Load(), lineno=2212, col_offset=19)], lineno=2212, col_offset=11), [If(Call(Attribute(Name('other', Load(), lineno=2213, col_offset=15), '_isinteger', Load(), lineno=2213, col_offset=15), [], [], None, None, lineno=2213, col_offset=15), [If(Compare(Attribute(Name('other', Load(), lineno=2218, col_offset=19), '_sign', Load(), lineno=2218, col_offset=19), [Eq()], [Num(1, lineno=2218, col_offset=34)], lineno=2218, col_offset=19), [Assign([Name('multiplier', Store(), lineno=2219, col_offset=20)], Num(0, lineno=2219, col_offset=33), lineno=2219, col_offset=20)], [If(Compare(Name('other', Load(), lineno=2220, col_offset=21), [Gt()], [Attribute(Name('context', Load(), lineno=2220, col_offset=29), 'prec', Load(), lineno=2220, col_offset=29)], lineno=2220, col_offset=21), [Assign([Name('multiplier', Store(), lineno=2221, col_offset=20)], Attribute(Name('context', Load(), lineno=2221, col_offset=33), 'prec', Load(), lineno=2221, col_offset=33), lineno=2221, col_offset=20)], [Assign([Name('multiplier', Store(), lineno=2223, col_offset=20)], Call(Name('int', Load(), lineno=2223, col_offset=33), [Name('other', Load(), lineno=2223, col_offset=37)], [], None, None, lineno=2223, col_offset=33), lineno=2223, col_offset=20)], lineno=2220, col_offset=21)], lineno=2218, col_offset=16), Assign([Name('exp', Store(), lineno=2225, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=2225, col_offset=22), '_exp', Load(), lineno=2225, col_offset=22), Mult(), Name('multiplier', Load(), lineno=2225, col_offset=34), lineno=2225, col_offset=22), lineno=2225, col_offset=16), If(Compare(Name('exp', Load(), lineno=2226, col_offset=19), [Lt()], [BinOp(Num(1, lineno=2226, col_offset=25), Sub(), Attribute(Name('context', Load(), lineno=2226, col_offset=27), 'prec', Load(), lineno=2226, col_offset=27), lineno=2226, col_offset=25)], lineno=2226, col_offset=19), [Assign([Name('exp', Store(), lineno=2227, col_offset=20)], BinOp(Num(1, lineno=2227, col_offset=26), Sub(), Attribute(Name('context', Load(), lineno=2227, col_offset=28), 'prec', Load(), lineno=2227, col_offset=28), lineno=2227, col_offset=26), lineno=2227, col_offset=20), Expr(Call(Attribute(Name('context', Load(), lineno=2228, col_offset=20), '_raise_error', Load(), lineno=2228, col_offset=20), [Name('Rounded', Load(), lineno=2228, col_offset=41)], [], None, None, lineno=2228, col_offset=20), lineno=2228, col_offset=20)], [], lineno=2226, col_offset=16)], [Expr(Call(Attribute(Name('context', Load(), lineno=2230, col_offset=16), '_raise_error', Load(), lineno=2230, col_offset=16), [Name('Inexact', Load(), lineno=2230, col_offset=37)], [], None, None, lineno=2230, col_offset=16), lineno=2230, col_offset=16), Expr(Call(Attribute(Name('context', Load(), lineno=2231, col_offset=16), '_raise_error', Load(), lineno=2231, col_offset=16), [Name('Rounded', Load(), lineno=2231, col_offset=37)], [], None, None, lineno=2231, col_offset=16), lineno=2231, col_offset=16), Assign([Name('exp', Store(), lineno=2232, col_offset=16)], BinOp(Num(1, lineno=2232, col_offset=22), Sub(), Attribute(Name('context', Load(), lineno=2232, col_offset=24), 'prec', Load(), lineno=2232, col_offset=24), lineno=2232, col_offset=22), lineno=2232, col_offset=16)], lineno=2213, col_offset=12), Return(Call(Name('_dec_from_triple', Load(), lineno=2234, col_offset=19), [Name('result_sign', Load(), lineno=2234, col_offset=36), BinOp(Str('1', lineno=2234, col_offset=49), Add(), BinOp(Str('0', lineno=2234, col_offset=53), Mult(), UnaryOp(USub(), Name('exp', Load(), lineno=2234, col_offset=58), lineno=2234, col_offset=57), lineno=2234, col_offset=53), lineno=2234, col_offset=49), Name('exp', Load(), lineno=2234, col_offset=63)], [], None, None, lineno=2234, col_offset=19), lineno=2234, col_offset=12)], [], lineno=2212, col_offset=8), Assign([Name('self_adj', Store(), lineno=2237, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2237, col_offset=19), 'adjusted', Load(), lineno=2237, col_offset=19), [], [], None, None, lineno=2237, col_offset=19), lineno=2237, col_offset=8), If(Call(Attribute(Name('other', Load(), lineno=2241, col_offset=11), '_isinfinity', Load(), lineno=2241, col_offset=11), [], [], None, None, lineno=2241, col_offset=11), [If(Compare(Compare(Attribute(Name('other', Load(), lineno=2242, col_offset=16), '_sign', Load(), lineno=2242, col_offset=16), [Eq()], [Num(0, lineno=2242, col_offset=31)], lineno=2242, col_offset=16), [Eq()], [Compare(Name('self_adj', Load(), lineno=2242, col_offset=38), [Lt()], [Num(0, lineno=2242, col_offset=49)], lineno=2242, col_offset=38)], lineno=2242, col_offset=15), [Return(Call(Name('_dec_from_triple', Load(), lineno=2243, col_offset=23), [Name('result_sign', Load(), lineno=2243, col_offset=40), Str('0', lineno=2243, col_offset=53), Num(0, lineno=2243, col_offset=58)], [], None, None, lineno=2243, col_offset=23), lineno=2243, col_offset=16)], [Return(Subscript(Name('_SignedInfinity', Load(), lineno=2245, col_offset=23), Index(Name('result_sign', Load(), lineno=2245, col_offset=39)), Load(), lineno=2245, col_offset=23), lineno=2245, col_offset=16)], lineno=2242, col_offset=12)], [], lineno=2241, col_offset=8), Assign([Name('ans', Store(), lineno=2249, col_offset=8)], Name('None', Load(), lineno=2249, col_offset=14), lineno=2249, col_offset=8), Assign([Name('exact', Store(), lineno=2250, col_offset=8)], Name('False', Load(), lineno=2250, col_offset=16), lineno=2250, col_offset=8), Assign([Name('bound', Store(), lineno=2257, col_offset=8)], BinOp(Call(Attribute(Name('self', Load(), lineno=2257, col_offset=16), '_log10_exp_bound', Load(), lineno=2257, col_offset=16), [], [], None, None, lineno=2257, col_offset=16), Add(), Call(Attribute(Name('other', Load(), lineno=2257, col_offset=42), 'adjusted', Load(), lineno=2257, col_offset=42), [], [], None, None, lineno=2257, col_offset=42), lineno=2257, col_offset=16), lineno=2257, col_offset=8), If(Compare(Compare(Name('self_adj', Load(), lineno=2258, col_offset=12), [GtE()], [Num(0, lineno=2258, col_offset=24)], lineno=2258, col_offset=12), [Eq()], [Compare(Attribute(Name('other', Load(), lineno=2258, col_offset=31), '_sign', Load(), lineno=2258, col_offset=31), [Eq()], [Num(0, lineno=2258, col_offset=46)], lineno=2258, col_offset=31)], lineno=2258, col_offset=11), [If(Compare(Name('bound', Load(), lineno=2261, col_offset=15), [GtE()], [Call(Name('len', Load(), lineno=2261, col_offset=24), [Call(Name('str', Load(), lineno=2261, col_offset=28), [Attribute(Name('context', Load(), lineno=2261, col_offset=32), 'Emax', Load(), lineno=2261, col_offset=32)], [], None, None, lineno=2261, col_offset=28)], [], None, None, lineno=2261, col_offset=24)], lineno=2261, col_offset=15), [Assign([Name('ans', Store(), lineno=2262, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=2262, col_offset=22), [Name('result_sign', Load(), lineno=2262, col_offset=39), Str('1', lineno=2262, col_offset=52), BinOp(Attribute(Name('context', Load(), lineno=2262, col_offset=57), 'Emax', Load(), lineno=2262, col_offset=57), Add(), Num(1, lineno=2262, col_offset=70), lineno=2262, col_offset=57)], [], None, None, lineno=2262, col_offset=22), lineno=2262, col_offset=16)], [], lineno=2261, col_offset=12)], [Assign([Name('Etiny', Store(), lineno=2266, col_offset=12)], Call(Attribute(Name('context', Load(), lineno=2266, col_offset=20), 'Etiny', Load(), lineno=2266, col_offset=20), [], [], None, None, lineno=2266, col_offset=20), lineno=2266, col_offset=12), If(Compare(Name('bound', Load(), lineno=2267, col_offset=15), [GtE()], [Call(Name('len', Load(), lineno=2267, col_offset=24), [Call(Name('str', Load(), lineno=2267, col_offset=28), [UnaryOp(USub(), Name('Etiny', Load(), lineno=2267, col_offset=33), lineno=2267, col_offset=32)], [], None, None, lineno=2267, col_offset=28)], [], None, None, lineno=2267, col_offset=24)], lineno=2267, col_offset=15), [Assign([Name('ans', Store(), lineno=2268, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=2268, col_offset=22), [Name('result_sign', Load(), lineno=2268, col_offset=39), Str('1', lineno=2268, col_offset=52), BinOp(Name('Etiny', Load(), lineno=2268, col_offset=57), Sub(), Num(1, lineno=2268, col_offset=63), lineno=2268, col_offset=57)], [], None, None, lineno=2268, col_offset=22), lineno=2268, col_offset=16)], [], lineno=2267, col_offset=12)], lineno=2258, col_offset=8), If(Compare(Name('ans', Load(), lineno=2271, col_offset=11), [Is()], [Name('None', Load(), lineno=2271, col_offset=18)], lineno=2271, col_offset=11), [Assign([Name('ans', Store(), lineno=2272, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2272, col_offset=18), '_power_exact', Load(), lineno=2272, col_offset=18), [Name('other', Load(), lineno=2272, col_offset=36), BinOp(Attribute(Name('context', Load(), lineno=2272, col_offset=43), 'prec', Load(), lineno=2272, col_offset=43), Add(), Num(1, lineno=2272, col_offset=58), lineno=2272, col_offset=43)], [], None, None, lineno=2272, col_offset=18), lineno=2272, col_offset=12), If(Compare(Name('ans', Load(), lineno=2273, col_offset=15), [IsNot()], [Name('None', Load(), lineno=2273, col_offset=26)], lineno=2273, col_offset=15), [If(Compare(Name('result_sign', Load(), lineno=2274, col_offset=19), [Eq()], [Num(1, lineno=2274, col_offset=34)], lineno=2274, col_offset=19), [Assign([Name('ans', Store(), lineno=2275, col_offset=20)], Call(Name('_dec_from_triple', Load(), lineno=2275, col_offset=26), [Num(1, lineno=2275, col_offset=43), Attribute(Name('ans', Load(), lineno=2275, col_offset=46), '_int', Load(), lineno=2275, col_offset=46), Attribute(Name('ans', Load(), lineno=2275, col_offset=56), '_exp', Load(), lineno=2275, col_offset=56)], [], None, None, lineno=2275, col_offset=26), lineno=2275, col_offset=20)], [], lineno=2274, col_offset=16), Assign([Name('exact', Store(), lineno=2276, col_offset=16)], Name('True', Load(), lineno=2276, col_offset=24), lineno=2276, col_offset=16)], [], lineno=2273, col_offset=12)], [], lineno=2271, col_offset=8), If(Compare(Name('ans', Load(), lineno=2279, col_offset=11), [Is()], [Name('None', Load(), lineno=2279, col_offset=18)], lineno=2279, col_offset=11), [Assign([Name('p', Store(), lineno=2280, col_offset=12)], Attribute(Name('context', Load(), lineno=2280, col_offset=16), 'prec', Load(), lineno=2280, col_offset=16), lineno=2280, col_offset=12), Assign([Name('x', Store(), lineno=2281, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=2281, col_offset=16), [Name('self', Load(), lineno=2281, col_offset=25)], [], None, None, lineno=2281, col_offset=16), lineno=2281, col_offset=12), Assign([Tuple([Name('xc', Store(), lineno=2282, col_offset=12), Name('xe', Store(), lineno=2282, col_offset=16)], Store(), lineno=2282, col_offset=12)], Tuple([Attribute(Name('x', Load(), lineno=2282, col_offset=21), 'int', Load(), lineno=2282, col_offset=21), Attribute(Name('x', Load(), lineno=2282, col_offset=28), 'exp', Load(), lineno=2282, col_offset=28)], Load(), lineno=2282, col_offset=21), lineno=2282, col_offset=12), Assign([Name('y', Store(), lineno=2283, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=2283, col_offset=16), [Name('other', Load(), lineno=2283, col_offset=25)], [], None, None, lineno=2283, col_offset=16), lineno=2283, col_offset=12), Assign([Tuple([Name('yc', Store(), lineno=2284, col_offset=12), Name('ye', Store(), lineno=2284, col_offset=16)], Store(), lineno=2284, col_offset=12)], Tuple([Attribute(Name('y', Load(), lineno=2284, col_offset=21), 'int', Load(), lineno=2284, col_offset=21), Attribute(Name('y', Load(), lineno=2284, col_offset=28), 'exp', Load(), lineno=2284, col_offset=28)], Load(), lineno=2284, col_offset=21), lineno=2284, col_offset=12), If(Compare(Attribute(Name('y', Load(), lineno=2285, col_offset=15), 'sign', Load(), lineno=2285, col_offset=15), [Eq()], [Num(1, lineno=2285, col_offset=25)], lineno=2285, col_offset=15), [Assign([Name('yc', Store(), lineno=2286, col_offset=16)], UnaryOp(USub(), Name('yc', Load(), lineno=2286, col_offset=22), lineno=2286, col_offset=21), lineno=2286, col_offset=16)], [], lineno=2285, col_offset=12), Assign([Name('extra', Store(), lineno=2290, col_offset=12)], Num(3, lineno=2290, col_offset=20), lineno=2290, col_offset=12), While(Name('True', Load(), lineno=2291, col_offset=18), [Assign([Tuple([Name('coeff', Store(), lineno=2292, col_offset=16), Name('exp', Store(), lineno=2292, col_offset=23)], Store(), lineno=2292, col_offset=16)], Call(Name('_dpower', Load(), lineno=2292, col_offset=29), [Name('xc', Load(), lineno=2292, col_offset=37), Name('xe', Load(), lineno=2292, col_offset=41), Name('yc', Load(), lineno=2292, col_offset=45), Name('ye', Load(), lineno=2292, col_offset=49), BinOp(Name('p', Load(), lineno=2292, col_offset=53), Add(), Name('extra', Load(), lineno=2292, col_offset=55), lineno=2292, col_offset=53)], [], None, None, lineno=2292, col_offset=29), lineno=2292, col_offset=16), If(BinOp(Name('coeff', Load(), lineno=2293, col_offset=19), Mod(), BinOp(Num(5, lineno=2293, col_offset=28), Mult(), BinOp(Num(10, lineno=2293, col_offset=30), Pow(), BinOp(BinOp(Call(Name('len', Load(), lineno=2293, col_offset=35), [Call(Name('str', Load(), lineno=2293, col_offset=39), [Name('coeff', Load(), lineno=2293, col_offset=43)], [], None, None, lineno=2293, col_offset=39)], [], None, None, lineno=2293, col_offset=35), Sub(), Name('p', Load(), lineno=2293, col_offset=51), lineno=2293, col_offset=35), Sub(), Num(1, lineno=2293, col_offset=53), lineno=2293, col_offset=52), lineno=2293, col_offset=30), lineno=2293, col_offset=28), lineno=2293, col_offset=19), [Break( lineno=2294, col_offset=20)], [], lineno=2293, col_offset=16), AugAssign(Name('extra', Store(), lineno=2295, col_offset=16), Add(), Num(3, lineno=2295, col_offset=25), lineno=2295, col_offset=16)], [], lineno=2291, col_offset=12), Assign([Name('ans', Store(), lineno=2297, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2297, col_offset=18), [Name('result_sign', Load(), lineno=2297, col_offset=35), Call(Name('str', Load(), lineno=2297, col_offset=48), [Name('coeff', Load(), lineno=2297, col_offset=52)], [], None, None, lineno=2297, col_offset=48), Name('exp', Load(), lineno=2297, col_offset=60)], [], None, None, lineno=2297, col_offset=18), lineno=2297, col_offset=12)], [], lineno=2279, col_offset=8), If(BoolOp(And(), [Name('exact', Load(), lineno=2312, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('other', Load(), lineno=2312, col_offset=25), '_isinteger', Load(), lineno=2312, col_offset=25), [], [], None, None, lineno=2312, col_offset=25), lineno=2312, col_offset=21)], lineno=2312, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=2315, col_offset=15), [Attribute(Name('ans', Load(), lineno=2315, col_offset=19), '_int', Load(), lineno=2315, col_offset=19)], [], None, None, lineno=2315, col_offset=15), [LtE()], [Attribute(Name('context', Load(), lineno=2315, col_offset=32), 'prec', Load(), lineno=2315, col_offset=32)], lineno=2315, col_offset=15), [Assign([Name('expdiff', Store(), lineno=2316, col_offset=16)], BinOp(BinOp(Attribute(Name('context', Load(), lineno=2316, col_offset=26), 'prec', Load(), lineno=2316, col_offset=26), Add(), Num(1, lineno=2316, col_offset=41), lineno=2316, col_offset=26), Sub(), Call(Name('len', Load(), lineno=2316, col_offset=45), [Attribute(Name('ans', Load(), lineno=2316, col_offset=49), '_int', Load(), lineno=2316, col_offset=49)], [], None, None, lineno=2316, col_offset=45), lineno=2316, col_offset=43), lineno=2316, col_offset=16), Assign([Name('ans', Store(), lineno=2317, col_offset=16)], Call(Name('_dec_from_triple', Load(), lineno=2317, col_offset=22), [Attribute(Name('ans', Load(), lineno=2317, col_offset=39), '_sign', Load(), lineno=2317, col_offset=39), BinOp(Attribute(Name('ans', Load(), lineno=2317, col_offset=50), '_int', Load(), lineno=2317, col_offset=50), Add(), BinOp(Str('0', lineno=2317, col_offset=59), Mult(), Name('expdiff', Load(), lineno=2317, col_offset=63), lineno=2317, col_offset=59), lineno=2317, col_offset=50), BinOp(Attribute(Name('ans', Load(), lineno=2318, col_offset=39), '_exp', Load(), lineno=2318, col_offset=39), Sub(), Name('expdiff', Load(), lineno=2318, col_offset=48), lineno=2318, col_offset=39)], [], None, None, lineno=2317, col_offset=22), lineno=2317, col_offset=16)], [], lineno=2315, col_offset=12), Assign([Name('newcontext', Store(), lineno=2321, col_offset=12)], Call(Attribute(Name('context', Load(), lineno=2321, col_offset=25), 'copy', Load(), lineno=2321, col_offset=25), [], [], None, None, lineno=2321, col_offset=25), lineno=2321, col_offset=12), Expr(Call(Attribute(Name('newcontext', Load(), lineno=2322, col_offset=12), 'clear_flags', Load(), lineno=2322, col_offset=12), [], [], None, None, lineno=2322, col_offset=12), lineno=2322, col_offset=12), For(Name('exception', Store(), lineno=2323, col_offset=16), Name('_signals', Load(), lineno=2323, col_offset=29), [Assign([Subscript(Attribute(Name('newcontext', Load(), lineno=2324, col_offset=16), 'traps', Load(), lineno=2324, col_offset=16), Index(Name('exception', Load(), lineno=2324, col_offset=33)), Store(), lineno=2324, col_offset=16)], Num(0, lineno=2324, col_offset=46), lineno=2324, col_offset=16)], [], lineno=2323, col_offset=12), Assign([Name('ans', Store(), lineno=2327, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=2327, col_offset=18), '_fix', Load(), lineno=2327, col_offset=18), [Name('newcontext', Load(), lineno=2327, col_offset=27)], [], None, None, lineno=2327, col_offset=18), lineno=2327, col_offset=12), Expr(Call(Attribute(Name('newcontext', Load(), lineno=2330, col_offset=12), '_raise_error', Load(), lineno=2330, col_offset=12), [Name('Inexact', Load(), lineno=2330, col_offset=36)], [], None, None, lineno=2330, col_offset=12), lineno=2330, col_offset=12), If(Subscript(Attribute(Name('newcontext', Load(), lineno=2331, col_offset=15), 'flags', Load(), lineno=2331, col_offset=15), Index(Name('Subnormal', Load(), lineno=2331, col_offset=32)), Load(), lineno=2331, col_offset=15), [Expr(Call(Attribute(Name('newcontext', Load(), lineno=2332, col_offset=16), '_raise_error', Load(), lineno=2332, col_offset=16), [Name('Underflow', Load(), lineno=2332, col_offset=40)], [], None, None, lineno=2332, col_offset=16), lineno=2332, col_offset=16)], [], lineno=2331, col_offset=12), If(Subscript(Attribute(Name('newcontext', Load(), lineno=2339, col_offset=15), 'flags', Load(), lineno=2339, col_offset=15), Index(Name('Overflow', Load(), lineno=2339, col_offset=32)), Load(), lineno=2339, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=2340, col_offset=16), '_raise_error', Load(), lineno=2340, col_offset=16), [Name('Overflow', Load(), lineno=2340, col_offset=37), Str('above Emax', lineno=2340, col_offset=47), Attribute(Name('ans', Load(), lineno=2340, col_offset=61), '_sign', Load(), lineno=2340, col_offset=61)], [], None, None, lineno=2340, col_offset=16), lineno=2340, col_offset=16)], [], lineno=2339, col_offset=12), For(Name('exception', Store(), lineno=2341, col_offset=16), Tuple([Name('Underflow', Load(), lineno=2341, col_offset=29), Name('Subnormal', Load(), lineno=2341, col_offset=40), Name('Inexact', Load(), lineno=2341, col_offset=51), Name('Rounded', Load(), lineno=2341, col_offset=60), Name('Clamped', Load(), lineno=2341, col_offset=69)], Load(), lineno=2341, col_offset=29), [If(Subscript(Attribute(Name('newcontext', Load(), lineno=2342, col_offset=19), 'flags', Load(), lineno=2342, col_offset=19), Index(Name('exception', Load(), lineno=2342, col_offset=36)), Load(), lineno=2342, col_offset=19), [Expr(Call(Attribute(Name('context', Load(), lineno=2343, col_offset=20), '_raise_error', Load(), lineno=2343, col_offset=20), [Name('exception', Load(), lineno=2343, col_offset=41)], [], None, None, lineno=2343, col_offset=20), lineno=2343, col_offset=20)], [], lineno=2342, col_offset=16)], [], lineno=2341, col_offset=12)], [Assign([Name('ans', Store(), lineno=2346, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=2346, col_offset=18), '_fix', Load(), lineno=2346, col_offset=18), [Name('context', Load(), lineno=2346, col_offset=27)], [], None, None, lineno=2346, col_offset=18), lineno=2346, col_offset=12)], lineno=2312, col_offset=8), Return(Name('ans', Load(), lineno=2348, col_offset=15), lineno=2348, col_offset=8)], [], lineno=2134, col_offset=4), FunctionDef('__rpow__', arguments([Name('self', Param(), lineno=2350, col_offset=17), Name('other', Param(), lineno=2350, col_offset=23), Name('context', Param(), lineno=2350, col_offset=30)], None, None, [Name('None', Load(), lineno=2350, col_offset=38)]), [Expr(Str('Swaps self/other and returns __pow__.', lineno=2351, col_offset=8), lineno=2351, col_offset=8), Assign([Name('other', Store(), lineno=2352, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2352, col_offset=16), [Name('other', Load(), lineno=2352, col_offset=31)], [], None, None, lineno=2352, col_offset=16), lineno=2352, col_offset=8), If(Compare(Name('other', Load(), lineno=2353, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=2353, col_offset=20)], lineno=2353, col_offset=11), [Return(Name('other', Load(), lineno=2354, col_offset=19), lineno=2354, col_offset=12)], [], lineno=2353, col_offset=8), Return(Call(Attribute(Name('other', Load(), lineno=2355, col_offset=15), '__pow__', Load(), lineno=2355, col_offset=15), [Name('self', Load(), lineno=2355, col_offset=29)], [keyword('context', Name('context', Load(), lineno=2355, col_offset=43))], None, None, lineno=2355, col_offset=15), lineno=2355, col_offset=8)], [], lineno=2350, col_offset=4), FunctionDef('normalize', arguments([Name('self', Param(), lineno=2357, col_offset=18), Name('context', Param(), lineno=2357, col_offset=24)], None, None, [Name('None', Load(), lineno=2357, col_offset=32)]), [Expr(Str('Normalize- strip trailing 0s, change anything equal to 0 to 0e0', lineno=2358, col_offset=8), lineno=2358, col_offset=8), If(Compare(Name('context', Load(), lineno=2360, col_offset=11), [Is()], [Name('None', Load(), lineno=2360, col_offset=22)], lineno=2360, col_offset=11), [Assign([Name('context', Store(), lineno=2361, col_offset=12)], Call(Name('getcontext', Load(), lineno=2361, col_offset=22), [], [], None, None, lineno=2361, col_offset=22), lineno=2361, col_offset=12)], [], lineno=2360, col_offset=8), If(Attribute(Name('self', Load(), lineno=2363, col_offset=11), '_is_special', Load(), lineno=2363, col_offset=11), [Assign([Name('ans', Store(), lineno=2364, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2364, col_offset=18), '_check_nans', Load(), lineno=2364, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=2364, col_offset=43))], None, None, lineno=2364, col_offset=18), lineno=2364, col_offset=12), If(Name('ans', Load(), lineno=2365, col_offset=15), [Return(Name('ans', Load(), lineno=2366, col_offset=23), lineno=2366, col_offset=16)], [], lineno=2365, col_offset=12)], [], lineno=2363, col_offset=8), Assign([Name('dup', Store(), lineno=2368, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2368, col_offset=14), '_fix', Load(), lineno=2368, col_offset=14), [Name('context', Load(), lineno=2368, col_offset=24)], [], None, None, lineno=2368, col_offset=14), lineno=2368, col_offset=8), If(Call(Attribute(Name('dup', Load(), lineno=2369, col_offset=11), '_isinfinity', Load(), lineno=2369, col_offset=11), [], [], None, None, lineno=2369, col_offset=11), [Return(Name('dup', Load(), lineno=2370, col_offset=19), lineno=2370, col_offset=12)], [], lineno=2369, col_offset=8), If(UnaryOp(Not(), Name('dup', Load(), lineno=2372, col_offset=15), lineno=2372, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=2373, col_offset=19), [Attribute(Name('dup', Load(), lineno=2373, col_offset=36), '_sign', Load(), lineno=2373, col_offset=36), Str('0', lineno=2373, col_offset=47), Num(0, lineno=2373, col_offset=52)], [], None, None, lineno=2373, col_offset=19), lineno=2373, col_offset=12)], [], lineno=2372, col_offset=8), Assign([Name('exp_max', Store(), lineno=2374, col_offset=8)], Subscript(List([Attribute(Name('context', Load(), lineno=2374, col_offset=19), 'Emax', Load(), lineno=2374, col_offset=19), Call(Attribute(Name('context', Load(), lineno=2374, col_offset=33), 'Etop', Load(), lineno=2374, col_offset=33), [], [], None, None, lineno=2374, col_offset=33)], Load(), lineno=2374, col_offset=18), Index(Attribute(Name('context', Load(), lineno=2374, col_offset=49), '_clamp', Load(), lineno=2374, col_offset=49)), Load(), lineno=2374, col_offset=18), lineno=2374, col_offset=8), Assign([Name('end', Store(), lineno=2375, col_offset=8)], Call(Name('len', Load(), lineno=2375, col_offset=14), [Attribute(Name('dup', Load(), lineno=2375, col_offset=18), '_int', Load(), lineno=2375, col_offset=18)], [], None, None, lineno=2375, col_offset=14), lineno=2375, col_offset=8), Assign([Name('exp', Store(), lineno=2376, col_offset=8)], Attribute(Name('dup', Load(), lineno=2376, col_offset=14), '_exp', Load(), lineno=2376, col_offset=14), lineno=2376, col_offset=8), While(BoolOp(And(), [Compare(Subscript(Attribute(Name('dup', Load(), lineno=2377, col_offset=14), '_int', Load(), lineno=2377, col_offset=14), Index(BinOp(Name('end', Load(), lineno=2377, col_offset=23), Sub(), Num(1, lineno=2377, col_offset=27), lineno=2377, col_offset=23)), Load(), lineno=2377, col_offset=14), [Eq()], [Str('0', lineno=2377, col_offset=33)], lineno=2377, col_offset=14), Compare(Name('exp', Load(), lineno=2377, col_offset=41), [Lt()], [Name('exp_max', Load(), lineno=2377, col_offset=47)], lineno=2377, col_offset=41)], lineno=2377, col_offset=14), [AugAssign(Name('exp', Store(), lineno=2378, col_offset=12), Add(), Num(1, lineno=2378, col_offset=19), lineno=2378, col_offset=12), AugAssign(Name('end', Store(), lineno=2379, col_offset=12), Sub(), Num(1, lineno=2379, col_offset=19), lineno=2379, col_offset=12)], [], lineno=2377, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=2380, col_offset=15), [Attribute(Name('dup', Load(), lineno=2380, col_offset=32), '_sign', Load(), lineno=2380, col_offset=32), Subscript(Attribute(Name('dup', Load(), lineno=2380, col_offset=43), '_int', Load(), lineno=2380, col_offset=43), Slice(None, Name('end', Load(), lineno=2380, col_offset=53), None), Load(), lineno=2380, col_offset=43), Name('exp', Load(), lineno=2380, col_offset=59)], [], None, None, lineno=2380, col_offset=15), lineno=2380, col_offset=8)], [], lineno=2357, col_offset=4), FunctionDef('quantize', arguments([Name('self', Param(), lineno=2382, col_offset=17), Name('exp', Param(), lineno=2382, col_offset=23), Name('rounding', Param(), lineno=2382, col_offset=28), Name('context', Param(), lineno=2382, col_offset=43), Name('watchexp', Param(), lineno=2382, col_offset=57)], None, None, [Name('None', Load(), lineno=2382, col_offset=37), Name('None', Load(), lineno=2382, col_offset=51), Name('True', Load(), lineno=2382, col_offset=66)]), [Expr(Str('Quantize self so its exponent is the same as that of exp.\n\n        Similar to self._rescale(exp._exp) but with error checking.\n        ', lineno=2386, col_offset=-1), lineno=2386, col_offset=-1), Assign([Name('exp', Store(), lineno=2387, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2387, col_offset=14), [Name('exp', Load(), lineno=2387, col_offset=29)], [keyword('raiseit', Name('True', Load(), lineno=2387, col_offset=42))], None, None, lineno=2387, col_offset=14), lineno=2387, col_offset=8), If(Compare(Name('context', Load(), lineno=2389, col_offset=11), [Is()], [Name('None', Load(), lineno=2389, col_offset=22)], lineno=2389, col_offset=11), [Assign([Name('context', Store(), lineno=2390, col_offset=12)], Call(Name('getcontext', Load(), lineno=2390, col_offset=22), [], [], None, None, lineno=2390, col_offset=22), lineno=2390, col_offset=12)], [], lineno=2389, col_offset=8), If(Compare(Name('rounding', Load(), lineno=2391, col_offset=11), [Is()], [Name('None', Load(), lineno=2391, col_offset=23)], lineno=2391, col_offset=11), [Assign([Name('rounding', Store(), lineno=2392, col_offset=12)], Attribute(Name('context', Load(), lineno=2392, col_offset=23), 'rounding', Load(), lineno=2392, col_offset=23), lineno=2392, col_offset=12)], [], lineno=2391, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2394, col_offset=11), '_is_special', Load(), lineno=2394, col_offset=11), Attribute(Name('exp', Load(), lineno=2394, col_offset=31), '_is_special', Load(), lineno=2394, col_offset=31)], lineno=2394, col_offset=11), [Assign([Name('ans', Store(), lineno=2395, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2395, col_offset=18), '_check_nans', Load(), lineno=2395, col_offset=18), [Name('exp', Load(), lineno=2395, col_offset=35), Name('context', Load(), lineno=2395, col_offset=40)], [], None, None, lineno=2395, col_offset=18), lineno=2395, col_offset=12), If(Name('ans', Load(), lineno=2396, col_offset=15), [Return(Name('ans', Load(), lineno=2397, col_offset=23), lineno=2397, col_offset=16)], [], lineno=2396, col_offset=12), If(BoolOp(Or(), [Call(Attribute(Name('exp', Load(), lineno=2399, col_offset=15), '_isinfinity', Load(), lineno=2399, col_offset=15), [], [], None, None, lineno=2399, col_offset=15), Call(Attribute(Name('self', Load(), lineno=2399, col_offset=36), '_isinfinity', Load(), lineno=2399, col_offset=36), [], [], None, None, lineno=2399, col_offset=36)], lineno=2399, col_offset=15), [If(BoolOp(And(), [Call(Attribute(Name('exp', Load(), lineno=2400, col_offset=19), '_isinfinity', Load(), lineno=2400, col_offset=19), [], [], None, None, lineno=2400, col_offset=19), Call(Attribute(Name('self', Load(), lineno=2400, col_offset=41), '_isinfinity', Load(), lineno=2400, col_offset=41), [], [], None, None, lineno=2400, col_offset=41)], lineno=2400, col_offset=19), [Return(Call(Name('Decimal', Load(), lineno=2401, col_offset=27), [Name('self', Load(), lineno=2401, col_offset=35)], [], None, None, lineno=2401, col_offset=27), lineno=2401, col_offset=20)], [], lineno=2400, col_offset=16), Return(Call(Attribute(Name('context', Load(), lineno=2402, col_offset=23), '_raise_error', Load(), lineno=2402, col_offset=23), [Name('InvalidOperation', Load(), lineno=2402, col_offset=44), Str('quantize with one INF', lineno=2403, col_offset=40)], [], None, None, lineno=2402, col_offset=23), lineno=2402, col_offset=16)], [], lineno=2399, col_offset=12)], [], lineno=2394, col_offset=8), If(UnaryOp(Not(), Name('watchexp', Load(), lineno=2406, col_offset=15), lineno=2406, col_offset=11), [Assign([Name('ans', Store(), lineno=2407, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2407, col_offset=18), '_rescale', Load(), lineno=2407, col_offset=18), [Attribute(Name('exp', Load(), lineno=2407, col_offset=32), '_exp', Load(), lineno=2407, col_offset=32), Name('rounding', Load(), lineno=2407, col_offset=42)], [], None, None, lineno=2407, col_offset=18), lineno=2407, col_offset=12), If(Compare(Attribute(Name('ans', Load(), lineno=2409, col_offset=15), '_exp', Load(), lineno=2409, col_offset=15), [Gt()], [Attribute(Name('self', Load(), lineno=2409, col_offset=26), '_exp', Load(), lineno=2409, col_offset=26)], lineno=2409, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=2410, col_offset=16), '_raise_error', Load(), lineno=2410, col_offset=16), [Name('Rounded', Load(), lineno=2410, col_offset=37)], [], None, None, lineno=2410, col_offset=16), lineno=2410, col_offset=16), If(Compare(Name('ans', Load(), lineno=2411, col_offset=19), [NotEq()], [Name('self', Load(), lineno=2411, col_offset=26)], lineno=2411, col_offset=19), [Expr(Call(Attribute(Name('context', Load(), lineno=2412, col_offset=20), '_raise_error', Load(), lineno=2412, col_offset=20), [Name('Inexact', Load(), lineno=2412, col_offset=41)], [], None, None, lineno=2412, col_offset=20), lineno=2412, col_offset=20)], [], lineno=2411, col_offset=16)], [], lineno=2409, col_offset=12), Return(Name('ans', Load(), lineno=2413, col_offset=19), lineno=2413, col_offset=12)], [], lineno=2406, col_offset=8), If(UnaryOp(Not(), Compare(Call(Attribute(Name('context', Load(), lineno=2416, col_offset=16), 'Etiny', Load(), lineno=2416, col_offset=16), [], [], None, None, lineno=2416, col_offset=16), [LtE(), LtE()], [Attribute(Name('exp', Load(), lineno=2416, col_offset=35), '_exp', Load(), lineno=2416, col_offset=35), Attribute(Name('context', Load(), lineno=2416, col_offset=47), 'Emax', Load(), lineno=2416, col_offset=47)], lineno=2416, col_offset=16), lineno=2416, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2417, col_offset=19), '_raise_error', Load(), lineno=2417, col_offset=19), [Name('InvalidOperation', Load(), lineno=2417, col_offset=40), Str('target exponent out of bounds in quantize', lineno=2418, col_offset=19)], [], None, None, lineno=2417, col_offset=19), lineno=2417, col_offset=12)], [], lineno=2416, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2420, col_offset=15), lineno=2420, col_offset=11), [Assign([Name('ans', Store(), lineno=2421, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2421, col_offset=18), [Attribute(Name('self', Load(), lineno=2421, col_offset=35), '_sign', Load(), lineno=2421, col_offset=35), Str('0', lineno=2421, col_offset=47), Attribute(Name('exp', Load(), lineno=2421, col_offset=52), '_exp', Load(), lineno=2421, col_offset=52)], [], None, None, lineno=2421, col_offset=18), lineno=2421, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=2422, col_offset=19), '_fix', Load(), lineno=2422, col_offset=19), [Name('context', Load(), lineno=2422, col_offset=28)], [], None, None, lineno=2422, col_offset=19), lineno=2422, col_offset=12)], [], lineno=2420, col_offset=8), Assign([Name('self_adjusted', Store(), lineno=2424, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2424, col_offset=24), 'adjusted', Load(), lineno=2424, col_offset=24), [], [], None, None, lineno=2424, col_offset=24), lineno=2424, col_offset=8), If(Compare(Name('self_adjusted', Load(), lineno=2425, col_offset=11), [Gt()], [Attribute(Name('context', Load(), lineno=2425, col_offset=27), 'Emax', Load(), lineno=2425, col_offset=27)], lineno=2425, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2426, col_offset=19), '_raise_error', Load(), lineno=2426, col_offset=19), [Name('InvalidOperation', Load(), lineno=2426, col_offset=40), Str('exponent of quantize result too large for current context', lineno=2427, col_offset=40)], [], None, None, lineno=2426, col_offset=19), lineno=2426, col_offset=12)], [], lineno=2425, col_offset=8), If(Compare(BinOp(BinOp(Name('self_adjusted', Load(), lineno=2428, col_offset=11), Sub(), Attribute(Name('exp', Load(), lineno=2428, col_offset=27), '_exp', Load(), lineno=2428, col_offset=27), lineno=2428, col_offset=11), Add(), Num(1, lineno=2428, col_offset=38), lineno=2428, col_offset=36), [Gt()], [Attribute(Name('context', Load(), lineno=2428, col_offset=42), 'prec', Load(), lineno=2428, col_offset=42)], lineno=2428, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2429, col_offset=19), '_raise_error', Load(), lineno=2429, col_offset=19), [Name('InvalidOperation', Load(), lineno=2429, col_offset=40), Str('quantize result has too many digits for current context', lineno=2430, col_offset=40)], [], None, None, lineno=2429, col_offset=19), lineno=2429, col_offset=12)], [], lineno=2428, col_offset=8), Assign([Name('ans', Store(), lineno=2432, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2432, col_offset=14), '_rescale', Load(), lineno=2432, col_offset=14), [Attribute(Name('exp', Load(), lineno=2432, col_offset=28), '_exp', Load(), lineno=2432, col_offset=28), Name('rounding', Load(), lineno=2432, col_offset=38)], [], None, None, lineno=2432, col_offset=14), lineno=2432, col_offset=8), If(Compare(Call(Attribute(Name('ans', Load(), lineno=2433, col_offset=11), 'adjusted', Load(), lineno=2433, col_offset=11), [], [], None, None, lineno=2433, col_offset=11), [Gt()], [Attribute(Name('context', Load(), lineno=2433, col_offset=28), 'Emax', Load(), lineno=2433, col_offset=28)], lineno=2433, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2434, col_offset=19), '_raise_error', Load(), lineno=2434, col_offset=19), [Name('InvalidOperation', Load(), lineno=2434, col_offset=40), Str('exponent of quantize result too large for current context', lineno=2435, col_offset=40)], [], None, None, lineno=2434, col_offset=19), lineno=2434, col_offset=12)], [], lineno=2433, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=2436, col_offset=11), [Attribute(Name('ans', Load(), lineno=2436, col_offset=15), '_int', Load(), lineno=2436, col_offset=15)], [], None, None, lineno=2436, col_offset=11), [Gt()], [Attribute(Name('context', Load(), lineno=2436, col_offset=27), 'prec', Load(), lineno=2436, col_offset=27)], lineno=2436, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2437, col_offset=19), '_raise_error', Load(), lineno=2437, col_offset=19), [Name('InvalidOperation', Load(), lineno=2437, col_offset=40), Str('quantize result has too many digits for current context', lineno=2438, col_offset=40)], [], None, None, lineno=2437, col_offset=19), lineno=2437, col_offset=12)], [], lineno=2436, col_offset=8), If(BoolOp(And(), [Name('ans', Load(), lineno=2441, col_offset=11), Compare(Call(Attribute(Name('ans', Load(), lineno=2441, col_offset=19), 'adjusted', Load(), lineno=2441, col_offset=19), [], [], None, None, lineno=2441, col_offset=19), [Lt()], [Attribute(Name('context', Load(), lineno=2441, col_offset=36), 'Emin', Load(), lineno=2441, col_offset=36)], lineno=2441, col_offset=19)], lineno=2441, col_offset=11), [Expr(Call(Attribute(Name('context', Load(), lineno=2442, col_offset=12), '_raise_error', Load(), lineno=2442, col_offset=12), [Name('Subnormal', Load(), lineno=2442, col_offset=33)], [], None, None, lineno=2442, col_offset=12), lineno=2442, col_offset=12)], [], lineno=2441, col_offset=8), If(Compare(Attribute(Name('ans', Load(), lineno=2443, col_offset=11), '_exp', Load(), lineno=2443, col_offset=11), [Gt()], [Attribute(Name('self', Load(), lineno=2443, col_offset=22), '_exp', Load(), lineno=2443, col_offset=22)], lineno=2443, col_offset=11), [If(Compare(Name('ans', Load(), lineno=2444, col_offset=15), [NotEq()], [Name('self', Load(), lineno=2444, col_offset=22)], lineno=2444, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=2445, col_offset=16), '_raise_error', Load(), lineno=2445, col_offset=16), [Name('Inexact', Load(), lineno=2445, col_offset=37)], [], None, None, lineno=2445, col_offset=16), lineno=2445, col_offset=16)], [], lineno=2444, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=2446, col_offset=12), '_raise_error', Load(), lineno=2446, col_offset=12), [Name('Rounded', Load(), lineno=2446, col_offset=33)], [], None, None, lineno=2446, col_offset=12), lineno=2446, col_offset=12)], [], lineno=2443, col_offset=8), Assign([Name('ans', Store(), lineno=2450, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=2450, col_offset=14), '_fix', Load(), lineno=2450, col_offset=14), [Name('context', Load(), lineno=2450, col_offset=23)], [], None, None, lineno=2450, col_offset=14), lineno=2450, col_offset=8), Return(Name('ans', Load(), lineno=2451, col_offset=15), lineno=2451, col_offset=8)], [], lineno=2382, col_offset=4), FunctionDef('same_quantum', arguments([Name('self', Param(), lineno=2453, col_offset=21), Name('other', Param(), lineno=2453, col_offset=27)], None, None, []), [Expr(Str('Return True if self and other have the same exponent; otherwise\n        return False.\n\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        ', lineno=2461, col_offset=-1), lineno=2461, col_offset=-1), Assign([Name('other', Store(), lineno=2462, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2462, col_offset=16), [Name('other', Load(), lineno=2462, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2462, col_offset=46))], None, None, lineno=2462, col_offset=16), lineno=2462, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2463, col_offset=11), '_is_special', Load(), lineno=2463, col_offset=11), Attribute(Name('other', Load(), lineno=2463, col_offset=31), '_is_special', Load(), lineno=2463, col_offset=31)], lineno=2463, col_offset=11), [Return(BoolOp(Or(), [BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=2464, col_offset=20), 'is_nan', Load(), lineno=2464, col_offset=20), [], [], None, None, lineno=2464, col_offset=20), Call(Attribute(Name('other', Load(), lineno=2464, col_offset=38), 'is_nan', Load(), lineno=2464, col_offset=38), [], [], None, None, lineno=2464, col_offset=38)], lineno=2464, col_offset=20), BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=2465, col_offset=20), 'is_infinite', Load(), lineno=2465, col_offset=20), [], [], None, None, lineno=2465, col_offset=20), Call(Attribute(Name('other', Load(), lineno=2465, col_offset=43), 'is_infinite', Load(), lineno=2465, col_offset=43), [], [], None, None, lineno=2465, col_offset=43)], lineno=2465, col_offset=20)], lineno=2464, col_offset=20), lineno=2464, col_offset=12)], [], lineno=2463, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=2466, col_offset=15), '_exp', Load(), lineno=2466, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=2466, col_offset=28), '_exp', Load(), lineno=2466, col_offset=28)], lineno=2466, col_offset=15), lineno=2466, col_offset=8)], [], lineno=2453, col_offset=4), FunctionDef('_rescale', arguments([Name('self', Param(), lineno=2468, col_offset=17), Name('exp', Param(), lineno=2468, col_offset=23), Name('rounding', Param(), lineno=2468, col_offset=28)], None, None, []), [Expr(Str('Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        ', lineno=2478, col_offset=-1), lineno=2478, col_offset=-1), If(Attribute(Name('self', Load(), lineno=2479, col_offset=11), '_is_special', Load(), lineno=2479, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=2480, col_offset=19), [Name('self', Load(), lineno=2480, col_offset=27)], [], None, None, lineno=2480, col_offset=19), lineno=2480, col_offset=12)], [], lineno=2479, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2481, col_offset=15), lineno=2481, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=2482, col_offset=19), [Attribute(Name('self', Load(), lineno=2482, col_offset=36), '_sign', Load(), lineno=2482, col_offset=36), Str('0', lineno=2482, col_offset=48), Name('exp', Load(), lineno=2482, col_offset=53)], [], None, None, lineno=2482, col_offset=19), lineno=2482, col_offset=12)], [], lineno=2481, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2484, col_offset=11), '_exp', Load(), lineno=2484, col_offset=11), [GtE()], [Name('exp', Load(), lineno=2484, col_offset=24)], lineno=2484, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=2486, col_offset=19), [Attribute(Name('self', Load(), lineno=2486, col_offset=36), '_sign', Load(), lineno=2486, col_offset=36), BinOp(Attribute(Name('self', Load(), lineno=2487, col_offset=40), '_int', Load(), lineno=2487, col_offset=40), Add(), BinOp(Str('0', lineno=2487, col_offset=52), Mult(), BinOp(Attribute(Name('self', Load(), lineno=2487, col_offset=57), '_exp', Load(), lineno=2487, col_offset=57), Sub(), Name('exp', Load(), lineno=2487, col_offset=69), lineno=2487, col_offset=57), lineno=2487, col_offset=52), lineno=2487, col_offset=40), Name('exp', Load(), lineno=2487, col_offset=75)], [], None, None, lineno=2486, col_offset=19), lineno=2486, col_offset=12)], [], lineno=2484, col_offset=8), Assign([Name('digits', Store(), lineno=2491, col_offset=8)], BinOp(BinOp(Call(Name('len', Load(), lineno=2491, col_offset=17), [Attribute(Name('self', Load(), lineno=2491, col_offset=21), '_int', Load(), lineno=2491, col_offset=21)], [], None, None, lineno=2491, col_offset=17), Add(), Attribute(Name('self', Load(), lineno=2491, col_offset=34), '_exp', Load(), lineno=2491, col_offset=34), lineno=2491, col_offset=17), Sub(), Name('exp', Load(), lineno=2491, col_offset=46), lineno=2491, col_offset=44), lineno=2491, col_offset=8), If(Compare(Name('digits', Load(), lineno=2492, col_offset=11), [Lt()], [Num(0, lineno=2492, col_offset=20)], lineno=2492, col_offset=11), [Assign([Name('self', Store(), lineno=2493, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2493, col_offset=19), [Attribute(Name('self', Load(), lineno=2493, col_offset=36), '_sign', Load(), lineno=2493, col_offset=36), Str('1', lineno=2493, col_offset=48), BinOp(Name('exp', Load(), lineno=2493, col_offset=53), Sub(), Num(1, lineno=2493, col_offset=57), lineno=2493, col_offset=53)], [], None, None, lineno=2493, col_offset=19), lineno=2493, col_offset=12), Assign([Name('digits', Store(), lineno=2494, col_offset=12)], Num(0, lineno=2494, col_offset=21), lineno=2494, col_offset=12)], [], lineno=2492, col_offset=8), Assign([Name('this_function', Store(), lineno=2495, col_offset=8)], Call(Name('getattr', Load(), lineno=2495, col_offset=24), [Name('self', Load(), lineno=2495, col_offset=32), Subscript(Attribute(Name('self', Load(), lineno=2495, col_offset=38), '_pick_rounding_function', Load(), lineno=2495, col_offset=38), Index(Name('rounding', Load(), lineno=2495, col_offset=67)), Load(), lineno=2495, col_offset=38)], [], None, None, lineno=2495, col_offset=24), lineno=2495, col_offset=8), Assign([Name('changed', Store(), lineno=2496, col_offset=8)], Call(Name('this_function', Load(), lineno=2496, col_offset=18), [Name('digits', Load(), lineno=2496, col_offset=32)], [], None, None, lineno=2496, col_offset=18), lineno=2496, col_offset=8), Assign([Name('coeff', Store(), lineno=2497, col_offset=8)], BoolOp(Or(), [Subscript(Attribute(Name('self', Load(), lineno=2497, col_offset=16), '_int', Load(), lineno=2497, col_offset=16), Slice(None, Name('digits', Load(), lineno=2497, col_offset=27), None), Load(), lineno=2497, col_offset=16), Str('0', lineno=2497, col_offset=38)], lineno=2497, col_offset=16), lineno=2497, col_offset=8), If(Compare(Name('changed', Load(), lineno=2498, col_offset=11), [Eq()], [Num(1, lineno=2498, col_offset=22)], lineno=2498, col_offset=11), [Assign([Name('coeff', Store(), lineno=2499, col_offset=12)], Call(Name('str', Load(), lineno=2499, col_offset=20), [BinOp(Call(Name('int', Load(), lineno=2499, col_offset=24), [Name('coeff', Load(), lineno=2499, col_offset=28)], [], None, None, lineno=2499, col_offset=24), Add(), Num(1, lineno=2499, col_offset=35), lineno=2499, col_offset=24)], [], None, None, lineno=2499, col_offset=20), lineno=2499, col_offset=12)], [], lineno=2498, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=2500, col_offset=15), [Attribute(Name('self', Load(), lineno=2500, col_offset=32), '_sign', Load(), lineno=2500, col_offset=32), Name('coeff', Load(), lineno=2500, col_offset=44), Name('exp', Load(), lineno=2500, col_offset=51)], [], None, None, lineno=2500, col_offset=15), lineno=2500, col_offset=8)], [], lineno=2468, col_offset=4), FunctionDef('_round', arguments([Name('self', Param(), lineno=2502, col_offset=15), Name('places', Param(), lineno=2502, col_offset=21), Name('rounding', Param(), lineno=2502, col_offset=29)], None, None, []), [Expr(Str('Round a nonzero, nonspecial Decimal to a fixed number of\n        significant figures, using the given rounding mode.\n\n        Infinities, NaNs and zeros are returned unaltered.\n\n        This operation is quiet: it raises no flags, and uses no\n        information from the context.\n\n        ', lineno=2511, col_offset=-1), lineno=2511, col_offset=-1), If(Compare(Name('places', Load(), lineno=2512, col_offset=11), [LtE()], [Num(0, lineno=2512, col_offset=21)], lineno=2512, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=2513, col_offset=18), [Str('argument should be at least 1 in _round', lineno=2513, col_offset=29)], [], None, None, lineno=2513, col_offset=18), None, None, lineno=2513, col_offset=12)], [], lineno=2512, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2514, col_offset=11), '_is_special', Load(), lineno=2514, col_offset=11), UnaryOp(Not(), Name('self', Load(), lineno=2514, col_offset=35), lineno=2514, col_offset=31)], lineno=2514, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=2515, col_offset=19), [Name('self', Load(), lineno=2515, col_offset=27)], [], None, None, lineno=2515, col_offset=19), lineno=2515, col_offset=12)], [], lineno=2514, col_offset=8), Assign([Name('ans', Store(), lineno=2516, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2516, col_offset=14), '_rescale', Load(), lineno=2516, col_offset=14), [BinOp(BinOp(Call(Attribute(Name('self', Load(), lineno=2516, col_offset=28), 'adjusted', Load(), lineno=2516, col_offset=28), [], [], None, None, lineno=2516, col_offset=28), Add(), Num(1, lineno=2516, col_offset=44), lineno=2516, col_offset=28), Sub(), Name('places', Load(), lineno=2516, col_offset=46), lineno=2516, col_offset=45), Name('rounding', Load(), lineno=2516, col_offset=54)], [], None, None, lineno=2516, col_offset=14), lineno=2516, col_offset=8), If(Compare(Call(Attribute(Name('ans', Load(), lineno=2521, col_offset=11), 'adjusted', Load(), lineno=2521, col_offset=11), [], [], None, None, lineno=2521, col_offset=11), [NotEq()], [Call(Attribute(Name('self', Load(), lineno=2521, col_offset=29), 'adjusted', Load(), lineno=2521, col_offset=29), [], [], None, None, lineno=2521, col_offset=29)], lineno=2521, col_offset=11), [Assign([Name('ans', Store(), lineno=2522, col_offset=12)], Call(Attribute(Name('ans', Load(), lineno=2522, col_offset=18), '_rescale', Load(), lineno=2522, col_offset=18), [BinOp(BinOp(Call(Attribute(Name('ans', Load(), lineno=2522, col_offset=31), 'adjusted', Load(), lineno=2522, col_offset=31), [], [], None, None, lineno=2522, col_offset=31), Add(), Num(1, lineno=2522, col_offset=46), lineno=2522, col_offset=31), Sub(), Name('places', Load(), lineno=2522, col_offset=48), lineno=2522, col_offset=47), Name('rounding', Load(), lineno=2522, col_offset=56)], [], None, None, lineno=2522, col_offset=18), lineno=2522, col_offset=12)], [], lineno=2521, col_offset=8), Return(Name('ans', Load(), lineno=2523, col_offset=15), lineno=2523, col_offset=8)], [], lineno=2502, col_offset=4), FunctionDef('to_integral_exact', arguments([Name('self', Param(), lineno=2525, col_offset=26), Name('rounding', Param(), lineno=2525, col_offset=32), Name('context', Param(), lineno=2525, col_offset=47)], None, None, [Name('None', Load(), lineno=2525, col_offset=41), Name('None', Load(), lineno=2525, col_offset=55)]), [Expr(Str("Rounds to a nearby integer.\n\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        ", lineno=2534, col_offset=-1), lineno=2534, col_offset=-1), If(Attribute(Name('self', Load(), lineno=2535, col_offset=11), '_is_special', Load(), lineno=2535, col_offset=11), [Assign([Name('ans', Store(), lineno=2536, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2536, col_offset=18), '_check_nans', Load(), lineno=2536, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=2536, col_offset=43))], None, None, lineno=2536, col_offset=18), lineno=2536, col_offset=12), If(Name('ans', Load(), lineno=2537, col_offset=15), [Return(Name('ans', Load(), lineno=2538, col_offset=23), lineno=2538, col_offset=16)], [], lineno=2537, col_offset=12), Return(Call(Name('Decimal', Load(), lineno=2539, col_offset=19), [Name('self', Load(), lineno=2539, col_offset=27)], [], None, None, lineno=2539, col_offset=19), lineno=2539, col_offset=12)], [], lineno=2535, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2540, col_offset=11), '_exp', Load(), lineno=2540, col_offset=11), [GtE()], [Num(0, lineno=2540, col_offset=24)], lineno=2540, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=2541, col_offset=19), [Name('self', Load(), lineno=2541, col_offset=27)], [], None, None, lineno=2541, col_offset=19), lineno=2541, col_offset=12)], [], lineno=2540, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2542, col_offset=15), lineno=2542, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=2543, col_offset=19), [Attribute(Name('self', Load(), lineno=2543, col_offset=36), '_sign', Load(), lineno=2543, col_offset=36), Str('0', lineno=2543, col_offset=48), Num(0, lineno=2543, col_offset=53)], [], None, None, lineno=2543, col_offset=19), lineno=2543, col_offset=12)], [], lineno=2542, col_offset=8), If(Compare(Name('context', Load(), lineno=2544, col_offset=11), [Is()], [Name('None', Load(), lineno=2544, col_offset=22)], lineno=2544, col_offset=11), [Assign([Name('context', Store(), lineno=2545, col_offset=12)], Call(Name('getcontext', Load(), lineno=2545, col_offset=22), [], [], None, None, lineno=2545, col_offset=22), lineno=2545, col_offset=12)], [], lineno=2544, col_offset=8), If(Compare(Name('rounding', Load(), lineno=2546, col_offset=11), [Is()], [Name('None', Load(), lineno=2546, col_offset=23)], lineno=2546, col_offset=11), [Assign([Name('rounding', Store(), lineno=2547, col_offset=12)], Attribute(Name('context', Load(), lineno=2547, col_offset=23), 'rounding', Load(), lineno=2547, col_offset=23), lineno=2547, col_offset=12)], [], lineno=2546, col_offset=8), Assign([Name('ans', Store(), lineno=2548, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2548, col_offset=14), '_rescale', Load(), lineno=2548, col_offset=14), [Num(0, lineno=2548, col_offset=28), Name('rounding', Load(), lineno=2548, col_offset=31)], [], None, None, lineno=2548, col_offset=14), lineno=2548, col_offset=8), If(Compare(Name('ans', Load(), lineno=2549, col_offset=11), [NotEq()], [Name('self', Load(), lineno=2549, col_offset=18)], lineno=2549, col_offset=11), [Expr(Call(Attribute(Name('context', Load(), lineno=2550, col_offset=12), '_raise_error', Load(), lineno=2550, col_offset=12), [Name('Inexact', Load(), lineno=2550, col_offset=33)], [], None, None, lineno=2550, col_offset=12), lineno=2550, col_offset=12)], [], lineno=2549, col_offset=8), Expr(Call(Attribute(Name('context', Load(), lineno=2551, col_offset=8), '_raise_error', Load(), lineno=2551, col_offset=8), [Name('Rounded', Load(), lineno=2551, col_offset=29)], [], None, None, lineno=2551, col_offset=8), lineno=2551, col_offset=8), Return(Name('ans', Load(), lineno=2552, col_offset=15), lineno=2552, col_offset=8)], [], lineno=2525, col_offset=4), FunctionDef('to_integral_value', arguments([Name('self', Param(), lineno=2554, col_offset=26), Name('rounding', Param(), lineno=2554, col_offset=32), Name('context', Param(), lineno=2554, col_offset=47)], None, None, [Name('None', Load(), lineno=2554, col_offset=41), Name('None', Load(), lineno=2554, col_offset=55)]), [Expr(Str('Rounds to the nearest integer, without raising inexact, rounded.', lineno=2555, col_offset=8), lineno=2555, col_offset=8), If(Compare(Name('context', Load(), lineno=2556, col_offset=11), [Is()], [Name('None', Load(), lineno=2556, col_offset=22)], lineno=2556, col_offset=11), [Assign([Name('context', Store(), lineno=2557, col_offset=12)], Call(Name('getcontext', Load(), lineno=2557, col_offset=22), [], [], None, None, lineno=2557, col_offset=22), lineno=2557, col_offset=12)], [], lineno=2556, col_offset=8), If(Compare(Name('rounding', Load(), lineno=2558, col_offset=11), [Is()], [Name('None', Load(), lineno=2558, col_offset=23)], lineno=2558, col_offset=11), [Assign([Name('rounding', Store(), lineno=2559, col_offset=12)], Attribute(Name('context', Load(), lineno=2559, col_offset=23), 'rounding', Load(), lineno=2559, col_offset=23), lineno=2559, col_offset=12)], [], lineno=2558, col_offset=8), If(Attribute(Name('self', Load(), lineno=2560, col_offset=11), '_is_special', Load(), lineno=2560, col_offset=11), [Assign([Name('ans', Store(), lineno=2561, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2561, col_offset=18), '_check_nans', Load(), lineno=2561, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=2561, col_offset=43))], None, None, lineno=2561, col_offset=18), lineno=2561, col_offset=12), If(Name('ans', Load(), lineno=2562, col_offset=15), [Return(Name('ans', Load(), lineno=2563, col_offset=23), lineno=2563, col_offset=16)], [], lineno=2562, col_offset=12), Return(Call(Name('Decimal', Load(), lineno=2564, col_offset=19), [Name('self', Load(), lineno=2564, col_offset=27)], [], None, None, lineno=2564, col_offset=19), lineno=2564, col_offset=12)], [], lineno=2560, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2565, col_offset=11), '_exp', Load(), lineno=2565, col_offset=11), [GtE()], [Num(0, lineno=2565, col_offset=24)], lineno=2565, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=2566, col_offset=19), [Name('self', Load(), lineno=2566, col_offset=27)], [], None, None, lineno=2566, col_offset=19), lineno=2566, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=2568, col_offset=19), '_rescale', Load(), lineno=2568, col_offset=19), [Num(0, lineno=2568, col_offset=33), Name('rounding', Load(), lineno=2568, col_offset=36)], [], None, None, lineno=2568, col_offset=19), lineno=2568, col_offset=12)], lineno=2565, col_offset=8)], [], lineno=2554, col_offset=4), Assign([Name('to_integral', Store(), lineno=2571, col_offset=4)], Name('to_integral_value', Load(), lineno=2571, col_offset=18), lineno=2571, col_offset=4), FunctionDef('sqrt', arguments([Name('self', Param(), lineno=2573, col_offset=13), Name('context', Param(), lineno=2573, col_offset=19)], None, None, [Name('None', Load(), lineno=2573, col_offset=27)]), [Expr(Str('Return the square root of self.', lineno=2574, col_offset=8), lineno=2574, col_offset=8), If(Compare(Name('context', Load(), lineno=2575, col_offset=11), [Is()], [Name('None', Load(), lineno=2575, col_offset=22)], lineno=2575, col_offset=11), [Assign([Name('context', Store(), lineno=2576, col_offset=12)], Call(Name('getcontext', Load(), lineno=2576, col_offset=22), [], [], None, None, lineno=2576, col_offset=22), lineno=2576, col_offset=12)], [], lineno=2575, col_offset=8), If(Attribute(Name('self', Load(), lineno=2578, col_offset=11), '_is_special', Load(), lineno=2578, col_offset=11), [Assign([Name('ans', Store(), lineno=2579, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2579, col_offset=18), '_check_nans', Load(), lineno=2579, col_offset=18), [], [keyword('context', Name('context', Load(), lineno=2579, col_offset=43))], None, None, lineno=2579, col_offset=18), lineno=2579, col_offset=12), If(Name('ans', Load(), lineno=2580, col_offset=15), [Return(Name('ans', Load(), lineno=2581, col_offset=23), lineno=2581, col_offset=16)], [], lineno=2580, col_offset=12), If(BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=2583, col_offset=15), '_isinfinity', Load(), lineno=2583, col_offset=15), [], [], None, None, lineno=2583, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=2583, col_offset=38), '_sign', Load(), lineno=2583, col_offset=38), [Eq()], [Num(0, lineno=2583, col_offset=52)], lineno=2583, col_offset=38)], lineno=2583, col_offset=15), [Return(Call(Name('Decimal', Load(), lineno=2584, col_offset=23), [Name('self', Load(), lineno=2584, col_offset=31)], [], None, None, lineno=2584, col_offset=23), lineno=2584, col_offset=16)], [], lineno=2583, col_offset=12)], [], lineno=2578, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2586, col_offset=15), lineno=2586, col_offset=11), [Assign([Name('ans', Store(), lineno=2588, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2588, col_offset=18), [Attribute(Name('self', Load(), lineno=2588, col_offset=35), '_sign', Load(), lineno=2588, col_offset=35), Str('0', lineno=2588, col_offset=47), BinOp(Attribute(Name('self', Load(), lineno=2588, col_offset=52), '_exp', Load(), lineno=2588, col_offset=52), FloorDiv(), Num(2, lineno=2588, col_offset=65), lineno=2588, col_offset=52)], [], None, None, lineno=2588, col_offset=18), lineno=2588, col_offset=12), Return(Call(Attribute(Name('ans', Load(), lineno=2589, col_offset=19), '_fix', Load(), lineno=2589, col_offset=19), [Name('context', Load(), lineno=2589, col_offset=28)], [], None, None, lineno=2589, col_offset=19), lineno=2589, col_offset=12)], [], lineno=2586, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2591, col_offset=11), '_sign', Load(), lineno=2591, col_offset=11), [Eq()], [Num(1, lineno=2591, col_offset=25)], lineno=2591, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=2592, col_offset=19), '_raise_error', Load(), lineno=2592, col_offset=19), [Name('InvalidOperation', Load(), lineno=2592, col_offset=40), Str('sqrt(-x), x > 0', lineno=2592, col_offset=58)], [], None, None, lineno=2592, col_offset=19), lineno=2592, col_offset=12)], [], lineno=2591, col_offset=8), Assign([Name('prec', Store(), lineno=2614, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=2614, col_offset=15), 'prec', Load(), lineno=2614, col_offset=15), Add(), Num(1, lineno=2614, col_offset=28), lineno=2614, col_offset=15), lineno=2614, col_offset=8), Assign([Name('op', Store(), lineno=2620, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=2620, col_offset=13), [Name('self', Load(), lineno=2620, col_offset=22)], [], None, None, lineno=2620, col_offset=13), lineno=2620, col_offset=8), Assign([Name('e', Store(), lineno=2621, col_offset=8)], BinOp(Attribute(Name('op', Load(), lineno=2621, col_offset=12), 'exp', Load(), lineno=2621, col_offset=12), RShift(), Num(1, lineno=2621, col_offset=22), lineno=2621, col_offset=12), lineno=2621, col_offset=8), If(BinOp(Attribute(Name('op', Load(), lineno=2622, col_offset=11), 'exp', Load(), lineno=2622, col_offset=11), BitAnd(), Num(1, lineno=2622, col_offset=20), lineno=2622, col_offset=11), [Assign([Name('c', Store(), lineno=2623, col_offset=12)], BinOp(Attribute(Name('op', Load(), lineno=2623, col_offset=16), 'int', Load(), lineno=2623, col_offset=16), Mult(), Num(10, lineno=2623, col_offset=25), lineno=2623, col_offset=16), lineno=2623, col_offset=12), Assign([Name('l', Store(), lineno=2624, col_offset=12)], BinOp(BinOp(Call(Name('len', Load(), lineno=2624, col_offset=17), [Attribute(Name('self', Load(), lineno=2624, col_offset=21), '_int', Load(), lineno=2624, col_offset=21)], [], None, None, lineno=2624, col_offset=17), RShift(), Num(1, lineno=2624, col_offset=35), lineno=2624, col_offset=17), Add(), Num(1, lineno=2624, col_offset=40), lineno=2624, col_offset=16), lineno=2624, col_offset=12)], [Assign([Name('c', Store(), lineno=2626, col_offset=12)], Attribute(Name('op', Load(), lineno=2626, col_offset=16), 'int', Load(), lineno=2626, col_offset=16), lineno=2626, col_offset=12), Assign([Name('l', Store(), lineno=2627, col_offset=12)], BinOp(BinOp(Call(Name('len', Load(), lineno=2627, col_offset=16), [Attribute(Name('self', Load(), lineno=2627, col_offset=20), '_int', Load(), lineno=2627, col_offset=20)], [], None, None, lineno=2627, col_offset=16), Add(), Num(1, lineno=2627, col_offset=31), lineno=2627, col_offset=16), RShift(), Num(1, lineno=2627, col_offset=36), lineno=2627, col_offset=16), lineno=2627, col_offset=12)], lineno=2622, col_offset=8), Assign([Name('shift', Store(), lineno=2630, col_offset=8)], BinOp(Name('prec', Load(), lineno=2630, col_offset=16), Sub(), Name('l', Load(), lineno=2630, col_offset=21), lineno=2630, col_offset=16), lineno=2630, col_offset=8), If(Compare(Name('shift', Load(), lineno=2631, col_offset=11), [GtE()], [Num(0, lineno=2631, col_offset=20)], lineno=2631, col_offset=11), [AugAssign(Name('c', Store(), lineno=2632, col_offset=12), Mult(), BinOp(Num(100, lineno=2632, col_offset=17), Pow(), Name('shift', Load(), lineno=2632, col_offset=22), lineno=2632, col_offset=17), lineno=2632, col_offset=12), Assign([Name('exact', Store(), lineno=2633, col_offset=12)], Name('True', Load(), lineno=2633, col_offset=20), lineno=2633, col_offset=12)], [Assign([Tuple([Name('c', Store(), lineno=2635, col_offset=12), Name('remainder', Store(), lineno=2635, col_offset=15)], Store(), lineno=2635, col_offset=12)], Call(Name('divmod', Load(), lineno=2635, col_offset=27), [Name('c', Load(), lineno=2635, col_offset=34), BinOp(Num(100, lineno=2635, col_offset=37), Pow(), UnaryOp(USub(), Name('shift', Load(), lineno=2635, col_offset=43), lineno=2635, col_offset=42), lineno=2635, col_offset=37)], [], None, None, lineno=2635, col_offset=27), lineno=2635, col_offset=12), Assign([Name('exact', Store(), lineno=2636, col_offset=12)], UnaryOp(Not(), Name('remainder', Load(), lineno=2636, col_offset=24), lineno=2636, col_offset=20), lineno=2636, col_offset=12)], lineno=2631, col_offset=8), AugAssign(Name('e', Store(), lineno=2637, col_offset=8), Sub(), Name('shift', Load(), lineno=2637, col_offset=13), lineno=2637, col_offset=8), Assign([Name('n', Store(), lineno=2640, col_offset=8)], BinOp(Num(10, lineno=2640, col_offset=12), Pow(), Name('prec', Load(), lineno=2640, col_offset=16), lineno=2640, col_offset=12), lineno=2640, col_offset=8), While(Name('True', Load(), lineno=2641, col_offset=14), [Assign([Name('q', Store(), lineno=2642, col_offset=12)], BinOp(Name('c', Load(), lineno=2642, col_offset=16), FloorDiv(), Name('n', Load(), lineno=2642, col_offset=19), lineno=2642, col_offset=16), lineno=2642, col_offset=12), If(Compare(Name('n', Load(), lineno=2643, col_offset=15), [LtE()], [Name('q', Load(), lineno=2643, col_offset=20)], lineno=2643, col_offset=15), [Break( lineno=2644, col_offset=16)], [Assign([Name('n', Store(), lineno=2646, col_offset=16)], BinOp(BinOp(Name('n', Load(), lineno=2646, col_offset=20), Add(), Name('q', Load(), lineno=2646, col_offset=24), lineno=2646, col_offset=20), RShift(), Num(1, lineno=2646, col_offset=29), lineno=2646, col_offset=20), lineno=2646, col_offset=16)], lineno=2643, col_offset=12)], [], lineno=2641, col_offset=8), Assign([Name('exact', Store(), lineno=2647, col_offset=8)], BoolOp(And(), [Name('exact', Load(), lineno=2647, col_offset=16), Compare(BinOp(Name('n', Load(), lineno=2647, col_offset=26), Mult(), Name('n', Load(), lineno=2647, col_offset=28), lineno=2647, col_offset=26), [Eq()], [Name('c', Load(), lineno=2647, col_offset=33)], lineno=2647, col_offset=26)], lineno=2647, col_offset=16), lineno=2647, col_offset=8), If(Name('exact', Load(), lineno=2649, col_offset=11), [If(Compare(Name('shift', Load(), lineno=2651, col_offset=15), [GtE()], [Num(0, lineno=2651, col_offset=24)], lineno=2651, col_offset=15), [AugAssign(Name('n', Store(), lineno=2653, col_offset=16), FloorDiv(), BinOp(Num(10, lineno=2653, col_offset=22), Pow(), Name('shift', Load(), lineno=2653, col_offset=26), lineno=2653, col_offset=22), lineno=2653, col_offset=16)], [AugAssign(Name('n', Store(), lineno=2655, col_offset=16), Mult(), BinOp(Num(10, lineno=2655, col_offset=21), Pow(), UnaryOp(USub(), Name('shift', Load(), lineno=2655, col_offset=26), lineno=2655, col_offset=25), lineno=2655, col_offset=21), lineno=2655, col_offset=16)], lineno=2651, col_offset=12), AugAssign(Name('e', Store(), lineno=2656, col_offset=12), Add(), Name('shift', Load(), lineno=2656, col_offset=17), lineno=2656, col_offset=12)], [If(Compare(BinOp(Name('n', Load(), lineno=2659, col_offset=15), Mod(), Num(5, lineno=2659, col_offset=19), lineno=2659, col_offset=15), [Eq()], [Num(0, lineno=2659, col_offset=24)], lineno=2659, col_offset=15), [AugAssign(Name('n', Store(), lineno=2660, col_offset=16), Add(), Num(1, lineno=2660, col_offset=21), lineno=2660, col_offset=16)], [], lineno=2659, col_offset=12)], lineno=2649, col_offset=8), Assign([Name('ans', Store(), lineno=2662, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=2662, col_offset=14), [Num(0, lineno=2662, col_offset=31), Call(Name('str', Load(), lineno=2662, col_offset=34), [Name('n', Load(), lineno=2662, col_offset=38)], [], None, None, lineno=2662, col_offset=34), Name('e', Load(), lineno=2662, col_offset=42)], [], None, None, lineno=2662, col_offset=14), lineno=2662, col_offset=8), Assign([Name('context', Store(), lineno=2665, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=2665, col_offset=18), '_shallow_copy', Load(), lineno=2665, col_offset=18), [], [], None, None, lineno=2665, col_offset=18), lineno=2665, col_offset=8), Assign([Name('rounding', Store(), lineno=2666, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=2666, col_offset=19), '_set_rounding', Load(), lineno=2666, col_offset=19), [Name('ROUND_HALF_EVEN', Load(), lineno=2666, col_offset=41)], [], None, None, lineno=2666, col_offset=19), lineno=2666, col_offset=8), Assign([Name('ans', Store(), lineno=2667, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=2667, col_offset=14), '_fix', Load(), lineno=2667, col_offset=14), [Name('context', Load(), lineno=2667, col_offset=23)], [], None, None, lineno=2667, col_offset=14), lineno=2667, col_offset=8), Assign([Attribute(Name('context', Load(), lineno=2668, col_offset=8), 'rounding', Store(), lineno=2668, col_offset=8)], Name('rounding', Load(), lineno=2668, col_offset=27), lineno=2668, col_offset=8), Return(Name('ans', Load(), lineno=2670, col_offset=15), lineno=2670, col_offset=8)], [], lineno=2573, col_offset=4), FunctionDef('max', arguments([Name('self', Param(), lineno=2672, col_offset=12), Name('other', Param(), lineno=2672, col_offset=18), Name('context', Param(), lineno=2672, col_offset=25)], None, None, [Name('None', Load(), lineno=2672, col_offset=33)]), [Expr(Str('Returns the larger value.\n\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        ', lineno=2677, col_offset=-1), lineno=2677, col_offset=-1), Assign([Name('other', Store(), lineno=2678, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2678, col_offset=16), [Name('other', Load(), lineno=2678, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2678, col_offset=46))], None, None, lineno=2678, col_offset=16), lineno=2678, col_offset=8), If(Compare(Name('context', Load(), lineno=2680, col_offset=11), [Is()], [Name('None', Load(), lineno=2680, col_offset=22)], lineno=2680, col_offset=11), [Assign([Name('context', Store(), lineno=2681, col_offset=12)], Call(Name('getcontext', Load(), lineno=2681, col_offset=22), [], [], None, None, lineno=2681, col_offset=22), lineno=2681, col_offset=12)], [], lineno=2680, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2683, col_offset=11), '_is_special', Load(), lineno=2683, col_offset=11), Attribute(Name('other', Load(), lineno=2683, col_offset=31), '_is_special', Load(), lineno=2683, col_offset=31)], lineno=2683, col_offset=11), [Assign([Name('sn', Store(), lineno=2686, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2686, col_offset=17), '_isnan', Load(), lineno=2686, col_offset=17), [], [], None, None, lineno=2686, col_offset=17), lineno=2686, col_offset=12), Assign([Name('on', Store(), lineno=2687, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=2687, col_offset=17), '_isnan', Load(), lineno=2687, col_offset=17), [], [], None, None, lineno=2687, col_offset=17), lineno=2687, col_offset=12), If(BoolOp(Or(), [Name('sn', Load(), lineno=2688, col_offset=15), Name('on', Load(), lineno=2688, col_offset=21)], lineno=2688, col_offset=15), [If(BoolOp(And(), [Compare(Name('on', Load(), lineno=2689, col_offset=19), [Eq()], [Num(1, lineno=2689, col_offset=25)], lineno=2689, col_offset=19), Compare(Name('sn', Load(), lineno=2689, col_offset=31), [Eq()], [Num(0, lineno=2689, col_offset=37)], lineno=2689, col_offset=31)], lineno=2689, col_offset=19), [Return(Call(Attribute(Name('self', Load(), lineno=2690, col_offset=27), '_fix', Load(), lineno=2690, col_offset=27), [Name('context', Load(), lineno=2690, col_offset=37)], [], None, None, lineno=2690, col_offset=27), lineno=2690, col_offset=20)], [], lineno=2689, col_offset=16), If(BoolOp(And(), [Compare(Name('sn', Load(), lineno=2691, col_offset=19), [Eq()], [Num(1, lineno=2691, col_offset=25)], lineno=2691, col_offset=19), Compare(Name('on', Load(), lineno=2691, col_offset=31), [Eq()], [Num(0, lineno=2691, col_offset=37)], lineno=2691, col_offset=31)], lineno=2691, col_offset=19), [Return(Call(Attribute(Name('other', Load(), lineno=2692, col_offset=27), '_fix', Load(), lineno=2692, col_offset=27), [Name('context', Load(), lineno=2692, col_offset=38)], [], None, None, lineno=2692, col_offset=27), lineno=2692, col_offset=20)], [], lineno=2691, col_offset=16), Return(Call(Attribute(Name('self', Load(), lineno=2693, col_offset=23), '_check_nans', Load(), lineno=2693, col_offset=23), [Name('other', Load(), lineno=2693, col_offset=40), Name('context', Load(), lineno=2693, col_offset=47)], [], None, None, lineno=2693, col_offset=23), lineno=2693, col_offset=16)], [], lineno=2688, col_offset=12)], [], lineno=2683, col_offset=8), Assign([Name('c', Store(), lineno=2695, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2695, col_offset=12), '_cmp', Load(), lineno=2695, col_offset=12), [Name('other', Load(), lineno=2695, col_offset=22)], [], None, None, lineno=2695, col_offset=12), lineno=2695, col_offset=8), If(Compare(Name('c', Load(), lineno=2696, col_offset=11), [Eq()], [Num(0, lineno=2696, col_offset=16)], lineno=2696, col_offset=11), [Assign([Name('c', Store(), lineno=2705, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2705, col_offset=16), 'compare_total', Load(), lineno=2705, col_offset=16), [Name('other', Load(), lineno=2705, col_offset=35)], [], None, None, lineno=2705, col_offset=16), lineno=2705, col_offset=12)], [], lineno=2696, col_offset=8), If(Compare(Name('c', Load(), lineno=2707, col_offset=11), [Eq()], [Num(-1, lineno=2707, col_offset=17)], lineno=2707, col_offset=11), [Assign([Name('ans', Store(), lineno=2708, col_offset=12)], Name('other', Load(), lineno=2708, col_offset=18), lineno=2708, col_offset=12)], [Assign([Name('ans', Store(), lineno=2710, col_offset=12)], Name('self', Load(), lineno=2710, col_offset=18), lineno=2710, col_offset=12)], lineno=2707, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=2712, col_offset=15), '_fix', Load(), lineno=2712, col_offset=15), [Name('context', Load(), lineno=2712, col_offset=24)], [], None, None, lineno=2712, col_offset=15), lineno=2712, col_offset=8)], [], lineno=2672, col_offset=4), FunctionDef('min', arguments([Name('self', Param(), lineno=2714, col_offset=12), Name('other', Param(), lineno=2714, col_offset=18), Name('context', Param(), lineno=2714, col_offset=25)], None, None, [Name('None', Load(), lineno=2714, col_offset=33)]), [Expr(Str('Returns the smaller value.\n\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        ', lineno=2719, col_offset=-1), lineno=2719, col_offset=-1), Assign([Name('other', Store(), lineno=2720, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2720, col_offset=16), [Name('other', Load(), lineno=2720, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2720, col_offset=46))], None, None, lineno=2720, col_offset=16), lineno=2720, col_offset=8), If(Compare(Name('context', Load(), lineno=2722, col_offset=11), [Is()], [Name('None', Load(), lineno=2722, col_offset=22)], lineno=2722, col_offset=11), [Assign([Name('context', Store(), lineno=2723, col_offset=12)], Call(Name('getcontext', Load(), lineno=2723, col_offset=22), [], [], None, None, lineno=2723, col_offset=22), lineno=2723, col_offset=12)], [], lineno=2722, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2725, col_offset=11), '_is_special', Load(), lineno=2725, col_offset=11), Attribute(Name('other', Load(), lineno=2725, col_offset=31), '_is_special', Load(), lineno=2725, col_offset=31)], lineno=2725, col_offset=11), [Assign([Name('sn', Store(), lineno=2728, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2728, col_offset=17), '_isnan', Load(), lineno=2728, col_offset=17), [], [], None, None, lineno=2728, col_offset=17), lineno=2728, col_offset=12), Assign([Name('on', Store(), lineno=2729, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=2729, col_offset=17), '_isnan', Load(), lineno=2729, col_offset=17), [], [], None, None, lineno=2729, col_offset=17), lineno=2729, col_offset=12), If(BoolOp(Or(), [Name('sn', Load(), lineno=2730, col_offset=15), Name('on', Load(), lineno=2730, col_offset=21)], lineno=2730, col_offset=15), [If(BoolOp(And(), [Compare(Name('on', Load(), lineno=2731, col_offset=19), [Eq()], [Num(1, lineno=2731, col_offset=25)], lineno=2731, col_offset=19), Compare(Name('sn', Load(), lineno=2731, col_offset=31), [Eq()], [Num(0, lineno=2731, col_offset=37)], lineno=2731, col_offset=31)], lineno=2731, col_offset=19), [Return(Call(Attribute(Name('self', Load(), lineno=2732, col_offset=27), '_fix', Load(), lineno=2732, col_offset=27), [Name('context', Load(), lineno=2732, col_offset=37)], [], None, None, lineno=2732, col_offset=27), lineno=2732, col_offset=20)], [], lineno=2731, col_offset=16), If(BoolOp(And(), [Compare(Name('sn', Load(), lineno=2733, col_offset=19), [Eq()], [Num(1, lineno=2733, col_offset=25)], lineno=2733, col_offset=19), Compare(Name('on', Load(), lineno=2733, col_offset=31), [Eq()], [Num(0, lineno=2733, col_offset=37)], lineno=2733, col_offset=31)], lineno=2733, col_offset=19), [Return(Call(Attribute(Name('other', Load(), lineno=2734, col_offset=27), '_fix', Load(), lineno=2734, col_offset=27), [Name('context', Load(), lineno=2734, col_offset=38)], [], None, None, lineno=2734, col_offset=27), lineno=2734, col_offset=20)], [], lineno=2733, col_offset=16), Return(Call(Attribute(Name('self', Load(), lineno=2735, col_offset=23), '_check_nans', Load(), lineno=2735, col_offset=23), [Name('other', Load(), lineno=2735, col_offset=40), Name('context', Load(), lineno=2735, col_offset=47)], [], None, None, lineno=2735, col_offset=23), lineno=2735, col_offset=16)], [], lineno=2730, col_offset=12)], [], lineno=2725, col_offset=8), Assign([Name('c', Store(), lineno=2737, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2737, col_offset=12), '_cmp', Load(), lineno=2737, col_offset=12), [Name('other', Load(), lineno=2737, col_offset=22)], [], None, None, lineno=2737, col_offset=12), lineno=2737, col_offset=8), If(Compare(Name('c', Load(), lineno=2738, col_offset=11), [Eq()], [Num(0, lineno=2738, col_offset=16)], lineno=2738, col_offset=11), [Assign([Name('c', Store(), lineno=2739, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2739, col_offset=16), 'compare_total', Load(), lineno=2739, col_offset=16), [Name('other', Load(), lineno=2739, col_offset=35)], [], None, None, lineno=2739, col_offset=16), lineno=2739, col_offset=12)], [], lineno=2738, col_offset=8), If(Compare(Name('c', Load(), lineno=2741, col_offset=11), [Eq()], [Num(-1, lineno=2741, col_offset=17)], lineno=2741, col_offset=11), [Assign([Name('ans', Store(), lineno=2742, col_offset=12)], Name('self', Load(), lineno=2742, col_offset=18), lineno=2742, col_offset=12)], [Assign([Name('ans', Store(), lineno=2744, col_offset=12)], Name('other', Load(), lineno=2744, col_offset=18), lineno=2744, col_offset=12)], lineno=2741, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=2746, col_offset=15), '_fix', Load(), lineno=2746, col_offset=15), [Name('context', Load(), lineno=2746, col_offset=24)], [], None, None, lineno=2746, col_offset=15), lineno=2746, col_offset=8)], [], lineno=2714, col_offset=4), FunctionDef('_isinteger', arguments([Name('self', Param(), lineno=2748, col_offset=19)], None, None, []), [Expr(Str('Returns whether self is an integer', lineno=2749, col_offset=8), lineno=2749, col_offset=8), If(Attribute(Name('self', Load(), lineno=2750, col_offset=11), '_is_special', Load(), lineno=2750, col_offset=11), [Return(Name('False', Load(), lineno=2751, col_offset=19), lineno=2751, col_offset=12)], [], lineno=2750, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2752, col_offset=11), '_exp', Load(), lineno=2752, col_offset=11), [GtE()], [Num(0, lineno=2752, col_offset=24)], lineno=2752, col_offset=11), [Return(Name('True', Load(), lineno=2753, col_offset=19), lineno=2753, col_offset=12)], [], lineno=2752, col_offset=8), Assign([Name('rest', Store(), lineno=2754, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=2754, col_offset=15), '_int', Load(), lineno=2754, col_offset=15), Slice(Attribute(Name('self', Load(), lineno=2754, col_offset=25), '_exp', Load(), lineno=2754, col_offset=25), None, None), Load(), lineno=2754, col_offset=15), lineno=2754, col_offset=8), Return(Compare(Name('rest', Load(), lineno=2755, col_offset=15), [Eq()], [BinOp(Str('0', lineno=2755, col_offset=23), Mult(), Call(Name('len', Load(), lineno=2755, col_offset=27), [Name('rest', Load(), lineno=2755, col_offset=31)], [], None, None, lineno=2755, col_offset=27), lineno=2755, col_offset=23)], lineno=2755, col_offset=15), lineno=2755, col_offset=8)], [], lineno=2748, col_offset=4), FunctionDef('_iseven', arguments([Name('self', Param(), lineno=2757, col_offset=16)], None, None, []), [Expr(Str('Returns True if self is even.  Assumes self is an integer.', lineno=2758, col_offset=8), lineno=2758, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('self', Load(), lineno=2759, col_offset=15), lineno=2759, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=2759, col_offset=23), '_exp', Load(), lineno=2759, col_offset=23), [Gt()], [Num(0, lineno=2759, col_offset=35)], lineno=2759, col_offset=23)], lineno=2759, col_offset=11), [Return(Name('True', Load(), lineno=2760, col_offset=19), lineno=2760, col_offset=12)], [], lineno=2759, col_offset=8), Return(Compare(Subscript(Attribute(Name('self', Load(), lineno=2761, col_offset=15), '_int', Load(), lineno=2761, col_offset=15), Index(BinOp(Num(-1, lineno=2761, col_offset=26), Add(), Attribute(Name('self', Load(), lineno=2761, col_offset=28), '_exp', Load(), lineno=2761, col_offset=28), lineno=2761, col_offset=25)), Load(), lineno=2761, col_offset=15), [In()], [Str('02468', lineno=2761, col_offset=42)], lineno=2761, col_offset=15), lineno=2761, col_offset=8)], [], lineno=2757, col_offset=4), FunctionDef('adjusted', arguments([Name('self', Param(), lineno=2763, col_offset=17)], None, None, []), [Expr(Str('Return the adjusted exponent of self', lineno=2764, col_offset=8), lineno=2764, col_offset=8), TryExcept([Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=2766, col_offset=19), '_exp', Load(), lineno=2766, col_offset=19), Add(), Call(Name('len', Load(), lineno=2766, col_offset=31), [Attribute(Name('self', Load(), lineno=2766, col_offset=35), '_int', Load(), lineno=2766, col_offset=35)], [], None, None, lineno=2766, col_offset=31), lineno=2766, col_offset=19), Sub(), Num(1, lineno=2766, col_offset=48), lineno=2766, col_offset=46), lineno=2766, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=2768, col_offset=15), None, [Return(Num(0, lineno=2769, col_offset=19), lineno=2769, col_offset=12)], lineno=2768, col_offset=8)], [], lineno=2765, col_offset=8)], [], lineno=2763, col_offset=4), FunctionDef('canonical', arguments([Name('self', Param(), lineno=2771, col_offset=18), Name('context', Param(), lineno=2771, col_offset=24)], None, None, [Name('None', Load(), lineno=2771, col_offset=32)]), [Expr(Str('Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        ', lineno=2776, col_offset=-1), lineno=2776, col_offset=-1), Return(Name('self', Load(), lineno=2777, col_offset=15), lineno=2777, col_offset=8)], [], lineno=2771, col_offset=4), FunctionDef('compare_signal', arguments([Name('self', Param(), lineno=2779, col_offset=23), Name('other', Param(), lineno=2779, col_offset=29), Name('context', Param(), lineno=2779, col_offset=36)], None, None, [Name('None', Load(), lineno=2779, col_offset=44)]), [Expr(Str("Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        ", lineno=2784, col_offset=-1), lineno=2784, col_offset=-1), Assign([Name('other', Store(), lineno=2785, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2785, col_offset=16), [Name('other', Load(), lineno=2785, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2785, col_offset=48))], None, None, lineno=2785, col_offset=16), lineno=2785, col_offset=8), Assign([Name('ans', Store(), lineno=2786, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2786, col_offset=14), '_compare_check_nans', Load(), lineno=2786, col_offset=14), [Name('other', Load(), lineno=2786, col_offset=39), Name('context', Load(), lineno=2786, col_offset=46)], [], None, None, lineno=2786, col_offset=14), lineno=2786, col_offset=8), If(Name('ans', Load(), lineno=2787, col_offset=11), [Return(Name('ans', Load(), lineno=2788, col_offset=19), lineno=2788, col_offset=12)], [], lineno=2787, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2789, col_offset=15), 'compare', Load(), lineno=2789, col_offset=15), [Name('other', Load(), lineno=2789, col_offset=28)], [keyword('context', Name('context', Load(), lineno=2789, col_offset=43))], None, None, lineno=2789, col_offset=15), lineno=2789, col_offset=8)], [], lineno=2779, col_offset=4), FunctionDef('compare_total', arguments([Name('self', Param(), lineno=2791, col_offset=22), Name('other', Param(), lineno=2791, col_offset=28)], None, None, []), [Expr(Str('Compares self to other using the abstract representations.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        ', lineno=2797, col_offset=-1), lineno=2797, col_offset=-1), Assign([Name('other', Store(), lineno=2798, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2798, col_offset=16), [Name('other', Load(), lineno=2798, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2798, col_offset=46))], None, None, lineno=2798, col_offset=16), lineno=2798, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=2801, col_offset=11), '_sign', Load(), lineno=2801, col_offset=11), UnaryOp(Not(), Attribute(Name('other', Load(), lineno=2801, col_offset=30), '_sign', Load(), lineno=2801, col_offset=30), lineno=2801, col_offset=26)], lineno=2801, col_offset=11), [Return(Name('_NegativeOne', Load(), lineno=2802, col_offset=19), lineno=2802, col_offset=12)], [], lineno=2801, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=2803, col_offset=15), '_sign', Load(), lineno=2803, col_offset=15), lineno=2803, col_offset=11), Attribute(Name('other', Load(), lineno=2803, col_offset=30), '_sign', Load(), lineno=2803, col_offset=30)], lineno=2803, col_offset=11), [Return(Name('_One', Load(), lineno=2804, col_offset=19), lineno=2804, col_offset=12)], [], lineno=2803, col_offset=8), Assign([Name('sign', Store(), lineno=2805, col_offset=8)], Attribute(Name('self', Load(), lineno=2805, col_offset=15), '_sign', Load(), lineno=2805, col_offset=15), lineno=2805, col_offset=8), Assign([Name('self_nan', Store(), lineno=2808, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2808, col_offset=19), '_isnan', Load(), lineno=2808, col_offset=19), [], [], None, None, lineno=2808, col_offset=19), lineno=2808, col_offset=8), Assign([Name('other_nan', Store(), lineno=2809, col_offset=8)], Call(Attribute(Name('other', Load(), lineno=2809, col_offset=20), '_isnan', Load(), lineno=2809, col_offset=20), [], [], None, None, lineno=2809, col_offset=20), lineno=2809, col_offset=8), If(BoolOp(Or(), [Name('self_nan', Load(), lineno=2810, col_offset=11), Name('other_nan', Load(), lineno=2810, col_offset=23)], lineno=2810, col_offset=11), [If(Compare(Name('self_nan', Load(), lineno=2811, col_offset=15), [Eq()], [Name('other_nan', Load(), lineno=2811, col_offset=27)], lineno=2811, col_offset=15), [Assign([Name('self_key', Store(), lineno=2813, col_offset=16)], Tuple([Call(Name('len', Load(), lineno=2813, col_offset=27), [Attribute(Name('self', Load(), lineno=2813, col_offset=31), '_int', Load(), lineno=2813, col_offset=31)], [], None, None, lineno=2813, col_offset=27), Attribute(Name('self', Load(), lineno=2813, col_offset=43), '_int', Load(), lineno=2813, col_offset=43)], Load(), lineno=2813, col_offset=27), lineno=2813, col_offset=16), Assign([Name('other_key', Store(), lineno=2814, col_offset=16)], Tuple([Call(Name('len', Load(), lineno=2814, col_offset=28), [Attribute(Name('other', Load(), lineno=2814, col_offset=32), '_int', Load(), lineno=2814, col_offset=32)], [], None, None, lineno=2814, col_offset=28), Attribute(Name('other', Load(), lineno=2814, col_offset=45), '_int', Load(), lineno=2814, col_offset=45)], Load(), lineno=2814, col_offset=28), lineno=2814, col_offset=16), If(Compare(Name('self_key', Load(), lineno=2815, col_offset=19), [Lt()], [Name('other_key', Load(), lineno=2815, col_offset=30)], lineno=2815, col_offset=19), [If(Name('sign', Load(), lineno=2816, col_offset=23), [Return(Name('_One', Load(), lineno=2817, col_offset=31), lineno=2817, col_offset=24)], [Return(Name('_NegativeOne', Load(), lineno=2819, col_offset=31), lineno=2819, col_offset=24)], lineno=2816, col_offset=20)], [], lineno=2815, col_offset=16), If(Compare(Name('self_key', Load(), lineno=2820, col_offset=19), [Gt()], [Name('other_key', Load(), lineno=2820, col_offset=30)], lineno=2820, col_offset=19), [If(Name('sign', Load(), lineno=2821, col_offset=23), [Return(Name('_NegativeOne', Load(), lineno=2822, col_offset=31), lineno=2822, col_offset=24)], [Return(Name('_One', Load(), lineno=2824, col_offset=31), lineno=2824, col_offset=24)], lineno=2821, col_offset=20)], [], lineno=2820, col_offset=16), Return(Name('_Zero', Load(), lineno=2825, col_offset=23), lineno=2825, col_offset=16)], [], lineno=2811, col_offset=12), If(Name('sign', Load(), lineno=2827, col_offset=15), [If(Compare(Name('self_nan', Load(), lineno=2828, col_offset=19), [Eq()], [Num(1, lineno=2828, col_offset=31)], lineno=2828, col_offset=19), [Return(Name('_NegativeOne', Load(), lineno=2829, col_offset=27), lineno=2829, col_offset=20)], [], lineno=2828, col_offset=16), If(Compare(Name('other_nan', Load(), lineno=2830, col_offset=19), [Eq()], [Num(1, lineno=2830, col_offset=32)], lineno=2830, col_offset=19), [Return(Name('_One', Load(), lineno=2831, col_offset=27), lineno=2831, col_offset=20)], [], lineno=2830, col_offset=16), If(Compare(Name('self_nan', Load(), lineno=2832, col_offset=19), [Eq()], [Num(2, lineno=2832, col_offset=31)], lineno=2832, col_offset=19), [Return(Name('_NegativeOne', Load(), lineno=2833, col_offset=27), lineno=2833, col_offset=20)], [], lineno=2832, col_offset=16), If(Compare(Name('other_nan', Load(), lineno=2834, col_offset=19), [Eq()], [Num(2, lineno=2834, col_offset=32)], lineno=2834, col_offset=19), [Return(Name('_One', Load(), lineno=2835, col_offset=27), lineno=2835, col_offset=20)], [], lineno=2834, col_offset=16)], [If(Compare(Name('self_nan', Load(), lineno=2837, col_offset=19), [Eq()], [Num(1, lineno=2837, col_offset=31)], lineno=2837, col_offset=19), [Return(Name('_One', Load(), lineno=2838, col_offset=27), lineno=2838, col_offset=20)], [], lineno=2837, col_offset=16), If(Compare(Name('other_nan', Load(), lineno=2839, col_offset=19), [Eq()], [Num(1, lineno=2839, col_offset=32)], lineno=2839, col_offset=19), [Return(Name('_NegativeOne', Load(), lineno=2840, col_offset=27), lineno=2840, col_offset=20)], [], lineno=2839, col_offset=16), If(Compare(Name('self_nan', Load(), lineno=2841, col_offset=19), [Eq()], [Num(2, lineno=2841, col_offset=31)], lineno=2841, col_offset=19), [Return(Name('_One', Load(), lineno=2842, col_offset=27), lineno=2842, col_offset=20)], [], lineno=2841, col_offset=16), If(Compare(Name('other_nan', Load(), lineno=2843, col_offset=19), [Eq()], [Num(2, lineno=2843, col_offset=32)], lineno=2843, col_offset=19), [Return(Name('_NegativeOne', Load(), lineno=2844, col_offset=27), lineno=2844, col_offset=20)], [], lineno=2843, col_offset=16)], lineno=2827, col_offset=12)], [], lineno=2810, col_offset=8), If(Compare(Name('self', Load(), lineno=2846, col_offset=11), [Lt()], [Name('other', Load(), lineno=2846, col_offset=18)], lineno=2846, col_offset=11), [Return(Name('_NegativeOne', Load(), lineno=2847, col_offset=19), lineno=2847, col_offset=12)], [], lineno=2846, col_offset=8), If(Compare(Name('self', Load(), lineno=2848, col_offset=11), [Gt()], [Name('other', Load(), lineno=2848, col_offset=18)], lineno=2848, col_offset=11), [Return(Name('_One', Load(), lineno=2849, col_offset=19), lineno=2849, col_offset=12)], [], lineno=2848, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2851, col_offset=11), '_exp', Load(), lineno=2851, col_offset=11), [Lt()], [Attribute(Name('other', Load(), lineno=2851, col_offset=23), '_exp', Load(), lineno=2851, col_offset=23)], lineno=2851, col_offset=11), [If(Name('sign', Load(), lineno=2852, col_offset=15), [Return(Name('_One', Load(), lineno=2853, col_offset=23), lineno=2853, col_offset=16)], [Return(Name('_NegativeOne', Load(), lineno=2855, col_offset=23), lineno=2855, col_offset=16)], lineno=2852, col_offset=12)], [], lineno=2851, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2856, col_offset=11), '_exp', Load(), lineno=2856, col_offset=11), [Gt()], [Attribute(Name('other', Load(), lineno=2856, col_offset=23), '_exp', Load(), lineno=2856, col_offset=23)], lineno=2856, col_offset=11), [If(Name('sign', Load(), lineno=2857, col_offset=15), [Return(Name('_NegativeOne', Load(), lineno=2858, col_offset=23), lineno=2858, col_offset=16)], [Return(Name('_One', Load(), lineno=2860, col_offset=23), lineno=2860, col_offset=16)], lineno=2857, col_offset=12)], [], lineno=2856, col_offset=8), Return(Name('_Zero', Load(), lineno=2861, col_offset=15), lineno=2861, col_offset=8)], [], lineno=2791, col_offset=4), FunctionDef('compare_total_mag', arguments([Name('self', Param(), lineno=2864, col_offset=26), Name('other', Param(), lineno=2864, col_offset=32)], None, None, []), [Expr(Str("Compares self to other using abstract repr., ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        ", lineno=2868, col_offset=-1), lineno=2868, col_offset=-1), Assign([Name('other', Store(), lineno=2869, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2869, col_offset=16), [Name('other', Load(), lineno=2869, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2869, col_offset=46))], None, None, lineno=2869, col_offset=16), lineno=2869, col_offset=8), Assign([Name('s', Store(), lineno=2871, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2871, col_offset=12), 'copy_abs', Load(), lineno=2871, col_offset=12), [], [], None, None, lineno=2871, col_offset=12), lineno=2871, col_offset=8), Assign([Name('o', Store(), lineno=2872, col_offset=8)], Call(Attribute(Name('other', Load(), lineno=2872, col_offset=12), 'copy_abs', Load(), lineno=2872, col_offset=12), [], [], None, None, lineno=2872, col_offset=12), lineno=2872, col_offset=8), Return(Call(Attribute(Name('s', Load(), lineno=2873, col_offset=15), 'compare_total', Load(), lineno=2873, col_offset=15), [Name('o', Load(), lineno=2873, col_offset=31)], [], None, None, lineno=2873, col_offset=15), lineno=2873, col_offset=8)], [], lineno=2864, col_offset=4), FunctionDef('copy_abs', arguments([Name('self', Param(), lineno=2875, col_offset=17)], None, None, []), [Expr(Str('Returns a copy with the sign set to 0. ', lineno=2876, col_offset=8), lineno=2876, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=2877, col_offset=15), [Num(0, lineno=2877, col_offset=32), Attribute(Name('self', Load(), lineno=2877, col_offset=35), '_int', Load(), lineno=2877, col_offset=35), Attribute(Name('self', Load(), lineno=2877, col_offset=46), '_exp', Load(), lineno=2877, col_offset=46), Attribute(Name('self', Load(), lineno=2877, col_offset=57), '_is_special', Load(), lineno=2877, col_offset=57)], [], None, None, lineno=2877, col_offset=15), lineno=2877, col_offset=8)], [], lineno=2875, col_offset=4), FunctionDef('copy_negate', arguments([Name('self', Param(), lineno=2879, col_offset=20)], None, None, []), [Expr(Str('Returns a copy with the sign inverted.', lineno=2880, col_offset=8), lineno=2880, col_offset=8), If(Attribute(Name('self', Load(), lineno=2881, col_offset=11), '_sign', Load(), lineno=2881, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=2882, col_offset=19), [Num(0, lineno=2882, col_offset=36), Attribute(Name('self', Load(), lineno=2882, col_offset=39), '_int', Load(), lineno=2882, col_offset=39), Attribute(Name('self', Load(), lineno=2882, col_offset=50), '_exp', Load(), lineno=2882, col_offset=50), Attribute(Name('self', Load(), lineno=2882, col_offset=61), '_is_special', Load(), lineno=2882, col_offset=61)], [], None, None, lineno=2882, col_offset=19), lineno=2882, col_offset=12)], [Return(Call(Name('_dec_from_triple', Load(), lineno=2884, col_offset=19), [Num(1, lineno=2884, col_offset=36), Attribute(Name('self', Load(), lineno=2884, col_offset=39), '_int', Load(), lineno=2884, col_offset=39), Attribute(Name('self', Load(), lineno=2884, col_offset=50), '_exp', Load(), lineno=2884, col_offset=50), Attribute(Name('self', Load(), lineno=2884, col_offset=61), '_is_special', Load(), lineno=2884, col_offset=61)], [], None, None, lineno=2884, col_offset=19), lineno=2884, col_offset=12)], lineno=2881, col_offset=8)], [], lineno=2879, col_offset=4), FunctionDef('copy_sign', arguments([Name('self', Param(), lineno=2886, col_offset=18), Name('other', Param(), lineno=2886, col_offset=24)], None, None, []), [Expr(Str('Returns self with the sign of other.', lineno=2887, col_offset=8), lineno=2887, col_offset=8), Assign([Name('other', Store(), lineno=2888, col_offset=8)], Call(Name('_convert_other', Load(), lineno=2888, col_offset=16), [Name('other', Load(), lineno=2888, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=2888, col_offset=46))], None, None, lineno=2888, col_offset=16), lineno=2888, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=2889, col_offset=15), [Attribute(Name('other', Load(), lineno=2889, col_offset=32), '_sign', Load(), lineno=2889, col_offset=32), Attribute(Name('self', Load(), lineno=2889, col_offset=45), '_int', Load(), lineno=2889, col_offset=45), Attribute(Name('self', Load(), lineno=2890, col_offset=32), '_exp', Load(), lineno=2890, col_offset=32), Attribute(Name('self', Load(), lineno=2890, col_offset=43), '_is_special', Load(), lineno=2890, col_offset=43)], [], None, None, lineno=2889, col_offset=15), lineno=2889, col_offset=8)], [], lineno=2886, col_offset=4), FunctionDef('exp', arguments([Name('self', Param(), lineno=2892, col_offset=12), Name('context', Param(), lineno=2892, col_offset=18)], None, None, [Name('None', Load(), lineno=2892, col_offset=26)]), [Expr(Str('Returns e ** self.', lineno=2893, col_offset=8), lineno=2893, col_offset=8), If(Compare(Name('context', Load(), lineno=2895, col_offset=11), [Is()], [Name('None', Load(), lineno=2895, col_offset=22)], lineno=2895, col_offset=11), [Assign([Name('context', Store(), lineno=2896, col_offset=12)], Call(Name('getcontext', Load(), lineno=2896, col_offset=22), [], [], None, None, lineno=2896, col_offset=22), lineno=2896, col_offset=12)], [], lineno=2895, col_offset=8), Assign([Name('ans', Store(), lineno=2899, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2899, col_offset=14), '_check_nans', Load(), lineno=2899, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=2899, col_offset=39))], None, None, lineno=2899, col_offset=14), lineno=2899, col_offset=8), If(Name('ans', Load(), lineno=2900, col_offset=11), [Return(Name('ans', Load(), lineno=2901, col_offset=19), lineno=2901, col_offset=12)], [], lineno=2900, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=2904, col_offset=11), '_isinfinity', Load(), lineno=2904, col_offset=11), [], [], None, None, lineno=2904, col_offset=11), [Eq()], [Num(-1, lineno=2904, col_offset=34)], lineno=2904, col_offset=11), [Return(Name('_Zero', Load(), lineno=2905, col_offset=19), lineno=2905, col_offset=12)], [], lineno=2904, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=2908, col_offset=15), lineno=2908, col_offset=11), [Return(Name('_One', Load(), lineno=2909, col_offset=19), lineno=2909, col_offset=12)], [], lineno=2908, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=2912, col_offset=11), '_isinfinity', Load(), lineno=2912, col_offset=11), [], [], None, None, lineno=2912, col_offset=11), [Eq()], [Num(1, lineno=2912, col_offset=33)], lineno=2912, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=2913, col_offset=19), [Name('self', Load(), lineno=2913, col_offset=27)], [], None, None, lineno=2913, col_offset=19), lineno=2913, col_offset=12)], [], lineno=2912, col_offset=8), Assign([Name('p', Store(), lineno=2919, col_offset=8)], Attribute(Name('context', Load(), lineno=2919, col_offset=12), 'prec', Load(), lineno=2919, col_offset=12), lineno=2919, col_offset=8), Assign([Name('adj', Store(), lineno=2920, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2920, col_offset=14), 'adjusted', Load(), lineno=2920, col_offset=14), [], [], None, None, lineno=2920, col_offset=14), lineno=2920, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=2927, col_offset=11), '_sign', Load(), lineno=2927, col_offset=11), [Eq()], [Num(0, lineno=2927, col_offset=25)], lineno=2927, col_offset=11), Compare(Name('adj', Load(), lineno=2927, col_offset=31), [Gt()], [Call(Name('len', Load(), lineno=2927, col_offset=37), [Call(Name('str', Load(), lineno=2927, col_offset=41), [BinOp(BinOp(Attribute(Name('context', Load(), lineno=2927, col_offset=46), 'Emax', Load(), lineno=2927, col_offset=46), Add(), Num(1, lineno=2927, col_offset=59), lineno=2927, col_offset=46), Mult(), Num(3, lineno=2927, col_offset=62), lineno=2927, col_offset=45)], [], None, None, lineno=2927, col_offset=41)], [], None, None, lineno=2927, col_offset=37)], lineno=2927, col_offset=31)], lineno=2927, col_offset=11), [Assign([Name('ans', Store(), lineno=2929, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2929, col_offset=18), [Num(0, lineno=2929, col_offset=35), Str('1', lineno=2929, col_offset=38), BinOp(Attribute(Name('context', Load(), lineno=2929, col_offset=43), 'Emax', Load(), lineno=2929, col_offset=43), Add(), Num(1, lineno=2929, col_offset=56), lineno=2929, col_offset=43)], [], None, None, lineno=2929, col_offset=18), lineno=2929, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=2930, col_offset=13), '_sign', Load(), lineno=2930, col_offset=13), [Eq()], [Num(1, lineno=2930, col_offset=27)], lineno=2930, col_offset=13), Compare(Name('adj', Load(), lineno=2930, col_offset=33), [Gt()], [Call(Name('len', Load(), lineno=2930, col_offset=39), [Call(Name('str', Load(), lineno=2930, col_offset=43), [BinOp(BinOp(UnaryOp(USub(), Call(Attribute(Name('context', Load(), lineno=2930, col_offset=49), 'Etiny', Load(), lineno=2930, col_offset=49), [], [], None, None, lineno=2930, col_offset=49), lineno=2930, col_offset=48), Add(), Num(1, lineno=2930, col_offset=65), lineno=2930, col_offset=48), Mult(), Num(3, lineno=2930, col_offset=68), lineno=2930, col_offset=47)], [], None, None, lineno=2930, col_offset=43)], [], None, None, lineno=2930, col_offset=39)], lineno=2930, col_offset=33)], lineno=2930, col_offset=13), [Assign([Name('ans', Store(), lineno=2932, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2932, col_offset=18), [Num(0, lineno=2932, col_offset=35), Str('1', lineno=2932, col_offset=38), BinOp(Call(Attribute(Name('context', Load(), lineno=2932, col_offset=43), 'Etiny', Load(), lineno=2932, col_offset=43), [], [], None, None, lineno=2932, col_offset=43), Sub(), Num(1, lineno=2932, col_offset=59), lineno=2932, col_offset=43)], [], None, None, lineno=2932, col_offset=18), lineno=2932, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=2933, col_offset=13), '_sign', Load(), lineno=2933, col_offset=13), [Eq()], [Num(0, lineno=2933, col_offset=27)], lineno=2933, col_offset=13), Compare(Name('adj', Load(), lineno=2933, col_offset=33), [Lt()], [UnaryOp(USub(), Name('p', Load(), lineno=2933, col_offset=40), lineno=2933, col_offset=39)], lineno=2933, col_offset=33)], lineno=2933, col_offset=13), [Assign([Name('ans', Store(), lineno=2935, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2935, col_offset=18), [Num(0, lineno=2935, col_offset=35), BinOp(BinOp(Str('1', lineno=2935, col_offset=38), Add(), BinOp(Str('0', lineno=2935, col_offset=44), Mult(), BinOp(Name('p', Load(), lineno=2935, col_offset=49), Sub(), Num(1, lineno=2935, col_offset=51), lineno=2935, col_offset=49), lineno=2935, col_offset=44), lineno=2935, col_offset=38), Add(), Str('1', lineno=2935, col_offset=56), lineno=2935, col_offset=54), UnaryOp(USub(), Name('p', Load(), lineno=2935, col_offset=62), lineno=2935, col_offset=61)], [], None, None, lineno=2935, col_offset=18), lineno=2935, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=2936, col_offset=13), '_sign', Load(), lineno=2936, col_offset=13), [Eq()], [Num(1, lineno=2936, col_offset=27)], lineno=2936, col_offset=13), Compare(Name('adj', Load(), lineno=2936, col_offset=33), [Lt()], [BinOp(UnaryOp(USub(), Name('p', Load(), lineno=2936, col_offset=40), lineno=2936, col_offset=39), Sub(), Num(1, lineno=2936, col_offset=42), lineno=2936, col_offset=39)], lineno=2936, col_offset=33)], lineno=2936, col_offset=13), [Assign([Name('ans', Store(), lineno=2938, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2938, col_offset=18), [Num(0, lineno=2938, col_offset=35), BinOp(Str('9', lineno=2938, col_offset=38), Mult(), BinOp(Name('p', Load(), lineno=2938, col_offset=43), Add(), Num(1, lineno=2938, col_offset=45), lineno=2938, col_offset=43), lineno=2938, col_offset=38), BinOp(UnaryOp(USub(), Name('p', Load(), lineno=2938, col_offset=50), lineno=2938, col_offset=49), Sub(), Num(1, lineno=2938, col_offset=52), lineno=2938, col_offset=49)], [], None, None, lineno=2938, col_offset=18), lineno=2938, col_offset=12)], [Assign([Name('op', Store(), lineno=2941, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=2941, col_offset=17), [Name('self', Load(), lineno=2941, col_offset=26)], [], None, None, lineno=2941, col_offset=17), lineno=2941, col_offset=12), Assign([Tuple([Name('c', Store(), lineno=2942, col_offset=12), Name('e', Store(), lineno=2942, col_offset=15)], Store(), lineno=2942, col_offset=12)], Tuple([Attribute(Name('op', Load(), lineno=2942, col_offset=19), 'int', Load(), lineno=2942, col_offset=19), Attribute(Name('op', Load(), lineno=2942, col_offset=27), 'exp', Load(), lineno=2942, col_offset=27)], Load(), lineno=2942, col_offset=19), lineno=2942, col_offset=12), If(Compare(Attribute(Name('op', Load(), lineno=2943, col_offset=15), 'sign', Load(), lineno=2943, col_offset=15), [Eq()], [Num(1, lineno=2943, col_offset=26)], lineno=2943, col_offset=15), [Assign([Name('c', Store(), lineno=2944, col_offset=16)], UnaryOp(USub(), Name('c', Load(), lineno=2944, col_offset=21), lineno=2944, col_offset=20), lineno=2944, col_offset=16)], [], lineno=2943, col_offset=12), Assign([Name('extra', Store(), lineno=2949, col_offset=12)], Num(3, lineno=2949, col_offset=20), lineno=2949, col_offset=12), While(Name('True', Load(), lineno=2950, col_offset=18), [Assign([Tuple([Name('coeff', Store(), lineno=2951, col_offset=16), Name('exp', Store(), lineno=2951, col_offset=23)], Store(), lineno=2951, col_offset=16)], Call(Name('_dexp', Load(), lineno=2951, col_offset=29), [Name('c', Load(), lineno=2951, col_offset=35), Name('e', Load(), lineno=2951, col_offset=38), BinOp(Name('p', Load(), lineno=2951, col_offset=41), Add(), Name('extra', Load(), lineno=2951, col_offset=43), lineno=2951, col_offset=41)], [], None, None, lineno=2951, col_offset=29), lineno=2951, col_offset=16), If(BinOp(Name('coeff', Load(), lineno=2952, col_offset=19), Mod(), BinOp(Num(5, lineno=2952, col_offset=28), Mult(), BinOp(Num(10, lineno=2952, col_offset=30), Pow(), BinOp(BinOp(Call(Name('len', Load(), lineno=2952, col_offset=35), [Call(Name('str', Load(), lineno=2952, col_offset=39), [Name('coeff', Load(), lineno=2952, col_offset=43)], [], None, None, lineno=2952, col_offset=39)], [], None, None, lineno=2952, col_offset=35), Sub(), Name('p', Load(), lineno=2952, col_offset=51), lineno=2952, col_offset=35), Sub(), Num(1, lineno=2952, col_offset=53), lineno=2952, col_offset=52), lineno=2952, col_offset=30), lineno=2952, col_offset=28), lineno=2952, col_offset=19), [Break( lineno=2953, col_offset=20)], [], lineno=2952, col_offset=16), AugAssign(Name('extra', Store(), lineno=2954, col_offset=16), Add(), Num(3, lineno=2954, col_offset=25), lineno=2954, col_offset=16)], [], lineno=2950, col_offset=12), Assign([Name('ans', Store(), lineno=2956, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=2956, col_offset=18), [Num(0, lineno=2956, col_offset=35), Call(Name('str', Load(), lineno=2956, col_offset=38), [Name('coeff', Load(), lineno=2956, col_offset=42)], [], None, None, lineno=2956, col_offset=38), Name('exp', Load(), lineno=2956, col_offset=50)], [], None, None, lineno=2956, col_offset=18), lineno=2956, col_offset=12)], lineno=2936, col_offset=13)], lineno=2933, col_offset=13)], lineno=2930, col_offset=13)], lineno=2927, col_offset=8), Assign([Name('context', Store(), lineno=2960, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=2960, col_offset=18), '_shallow_copy', Load(), lineno=2960, col_offset=18), [], [], None, None, lineno=2960, col_offset=18), lineno=2960, col_offset=8), Assign([Name('rounding', Store(), lineno=2961, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=2961, col_offset=19), '_set_rounding', Load(), lineno=2961, col_offset=19), [Name('ROUND_HALF_EVEN', Load(), lineno=2961, col_offset=41)], [], None, None, lineno=2961, col_offset=19), lineno=2961, col_offset=8), Assign([Name('ans', Store(), lineno=2962, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=2962, col_offset=14), '_fix', Load(), lineno=2962, col_offset=14), [Name('context', Load(), lineno=2962, col_offset=23)], [], None, None, lineno=2962, col_offset=14), lineno=2962, col_offset=8), Assign([Attribute(Name('context', Load(), lineno=2963, col_offset=8), 'rounding', Store(), lineno=2963, col_offset=8)], Name('rounding', Load(), lineno=2963, col_offset=27), lineno=2963, col_offset=8), Return(Name('ans', Load(), lineno=2965, col_offset=15), lineno=2965, col_offset=8)], [], lineno=2892, col_offset=4), FunctionDef('is_canonical', arguments([Name('self', Param(), lineno=2967, col_offset=21)], None, None, []), [Expr(Str('Return True if self is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        ', lineno=2972, col_offset=-1), lineno=2972, col_offset=-1), Return(Name('True', Load(), lineno=2973, col_offset=15), lineno=2973, col_offset=8)], [], lineno=2967, col_offset=4), FunctionDef('is_finite', arguments([Name('self', Param(), lineno=2975, col_offset=18)], None, None, []), [Expr(Str('Return True if self is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        ', lineno=2980, col_offset=-1), lineno=2980, col_offset=-1), Return(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=2981, col_offset=19), '_is_special', Load(), lineno=2981, col_offset=19), lineno=2981, col_offset=15), lineno=2981, col_offset=8)], [], lineno=2975, col_offset=4), FunctionDef('is_infinite', arguments([Name('self', Param(), lineno=2983, col_offset=20)], None, None, []), [Expr(Str('Return True if self is infinite; otherwise return False.', lineno=2984, col_offset=8), lineno=2984, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=2985, col_offset=15), '_exp', Load(), lineno=2985, col_offset=15), [Eq()], [Str('F', lineno=2985, col_offset=28)], lineno=2985, col_offset=15), lineno=2985, col_offset=8)], [], lineno=2983, col_offset=4), FunctionDef('is_nan', arguments([Name('self', Param(), lineno=2987, col_offset=15)], None, None, []), [Expr(Str('Return True if self is a qNaN or sNaN; otherwise return False.', lineno=2988, col_offset=8), lineno=2988, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=2989, col_offset=15), '_exp', Load(), lineno=2989, col_offset=15), [In()], [Tuple([Str('n', lineno=2989, col_offset=29), Str('N', lineno=2989, col_offset=34)], Load(), lineno=2989, col_offset=29)], lineno=2989, col_offset=15), lineno=2989, col_offset=8)], [], lineno=2987, col_offset=4), FunctionDef('is_normal', arguments([Name('self', Param(), lineno=2991, col_offset=18), Name('context', Param(), lineno=2991, col_offset=24)], None, None, [Name('None', Load(), lineno=2991, col_offset=32)]), [Expr(Str('Return True if self is a normal number; otherwise return False.', lineno=2992, col_offset=8), lineno=2992, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=2993, col_offset=11), '_is_special', Load(), lineno=2993, col_offset=11), UnaryOp(Not(), Name('self', Load(), lineno=2993, col_offset=35), lineno=2993, col_offset=31)], lineno=2993, col_offset=11), [Return(Name('False', Load(), lineno=2994, col_offset=19), lineno=2994, col_offset=12)], [], lineno=2993, col_offset=8), If(Compare(Name('context', Load(), lineno=2995, col_offset=11), [Is()], [Name('None', Load(), lineno=2995, col_offset=22)], lineno=2995, col_offset=11), [Assign([Name('context', Store(), lineno=2996, col_offset=12)], Call(Name('getcontext', Load(), lineno=2996, col_offset=22), [], [], None, None, lineno=2996, col_offset=22), lineno=2996, col_offset=12)], [], lineno=2995, col_offset=8), Return(Compare(Attribute(Name('context', Load(), lineno=2997, col_offset=15), 'Emin', Load(), lineno=2997, col_offset=15), [LtE()], [Call(Attribute(Name('self', Load(), lineno=2997, col_offset=31), 'adjusted', Load(), lineno=2997, col_offset=31), [], [], None, None, lineno=2997, col_offset=31)], lineno=2997, col_offset=15), lineno=2997, col_offset=8)], [], lineno=2991, col_offset=4), FunctionDef('is_qnan', arguments([Name('self', Param(), lineno=2999, col_offset=16)], None, None, []), [Expr(Str('Return True if self is a quiet NaN; otherwise return False.', lineno=3000, col_offset=8), lineno=3000, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=3001, col_offset=15), '_exp', Load(), lineno=3001, col_offset=15), [Eq()], [Str('n', lineno=3001, col_offset=28)], lineno=3001, col_offset=15), lineno=3001, col_offset=8)], [], lineno=2999, col_offset=4), FunctionDef('is_signed', arguments([Name('self', Param(), lineno=3003, col_offset=18)], None, None, []), [Expr(Str('Return True if self is negative; otherwise return False.', lineno=3004, col_offset=8), lineno=3004, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=3005, col_offset=15), '_sign', Load(), lineno=3005, col_offset=15), [Eq()], [Num(1, lineno=3005, col_offset=29)], lineno=3005, col_offset=15), lineno=3005, col_offset=8)], [], lineno=3003, col_offset=4), FunctionDef('is_snan', arguments([Name('self', Param(), lineno=3007, col_offset=16)], None, None, []), [Expr(Str('Return True if self is a signaling NaN; otherwise return False.', lineno=3008, col_offset=8), lineno=3008, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=3009, col_offset=15), '_exp', Load(), lineno=3009, col_offset=15), [Eq()], [Str('N', lineno=3009, col_offset=28)], lineno=3009, col_offset=15), lineno=3009, col_offset=8)], [], lineno=3007, col_offset=4), FunctionDef('is_subnormal', arguments([Name('self', Param(), lineno=3011, col_offset=21), Name('context', Param(), lineno=3011, col_offset=27)], None, None, [Name('None', Load(), lineno=3011, col_offset=35)]), [Expr(Str('Return True if self is subnormal; otherwise return False.', lineno=3012, col_offset=8), lineno=3012, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=3013, col_offset=11), '_is_special', Load(), lineno=3013, col_offset=11), UnaryOp(Not(), Name('self', Load(), lineno=3013, col_offset=35), lineno=3013, col_offset=31)], lineno=3013, col_offset=11), [Return(Name('False', Load(), lineno=3014, col_offset=19), lineno=3014, col_offset=12)], [], lineno=3013, col_offset=8), If(Compare(Name('context', Load(), lineno=3015, col_offset=11), [Is()], [Name('None', Load(), lineno=3015, col_offset=22)], lineno=3015, col_offset=11), [Assign([Name('context', Store(), lineno=3016, col_offset=12)], Call(Name('getcontext', Load(), lineno=3016, col_offset=22), [], [], None, None, lineno=3016, col_offset=22), lineno=3016, col_offset=12)], [], lineno=3015, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=3017, col_offset=15), 'adjusted', Load(), lineno=3017, col_offset=15), [], [], None, None, lineno=3017, col_offset=15), [Lt()], [Attribute(Name('context', Load(), lineno=3017, col_offset=33), 'Emin', Load(), lineno=3017, col_offset=33)], lineno=3017, col_offset=15), lineno=3017, col_offset=8)], [], lineno=3011, col_offset=4), FunctionDef('is_zero', arguments([Name('self', Param(), lineno=3019, col_offset=16)], None, None, []), [Expr(Str('Return True if self is a zero; otherwise return False.', lineno=3020, col_offset=8), lineno=3020, col_offset=8), Return(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=3021, col_offset=19), '_is_special', Load(), lineno=3021, col_offset=19), lineno=3021, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=3021, col_offset=40), '_int', Load(), lineno=3021, col_offset=40), [Eq()], [Str('0', lineno=3021, col_offset=53)], lineno=3021, col_offset=40)], lineno=3021, col_offset=15), lineno=3021, col_offset=8)], [], lineno=3019, col_offset=4), FunctionDef('_ln_exp_bound', arguments([Name('self', Param(), lineno=3023, col_offset=22)], None, None, []), [Expr(Str('Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        ', lineno=3027, col_offset=-1), lineno=3027, col_offset=-1), Assign([Name('adj', Store(), lineno=3030, col_offset=8)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=3030, col_offset=14), '_exp', Load(), lineno=3030, col_offset=14), Add(), Call(Name('len', Load(), lineno=3030, col_offset=26), [Attribute(Name('self', Load(), lineno=3030, col_offset=30), '_int', Load(), lineno=3030, col_offset=30)], [], None, None, lineno=3030, col_offset=26), lineno=3030, col_offset=14), Sub(), Num(1, lineno=3030, col_offset=43), lineno=3030, col_offset=41), lineno=3030, col_offset=8), If(Compare(Name('adj', Load(), lineno=3031, col_offset=11), [GtE()], [Num(1, lineno=3031, col_offset=18)], lineno=3031, col_offset=11), [Return(BinOp(Call(Name('len', Load(), lineno=3033, col_offset=19), [Call(Name('str', Load(), lineno=3033, col_offset=23), [BinOp(BinOp(Name('adj', Load(), lineno=3033, col_offset=27), Mult(), Num(23, lineno=3033, col_offset=31), lineno=3033, col_offset=27), FloorDiv(), Num(10, lineno=3033, col_offset=35), lineno=3033, col_offset=33)], [], None, None, lineno=3033, col_offset=23)], [], None, None, lineno=3033, col_offset=19), Sub(), Num(1, lineno=3033, col_offset=42), lineno=3033, col_offset=19), lineno=3033, col_offset=12)], [], lineno=3031, col_offset=8), If(Compare(Name('adj', Load(), lineno=3034, col_offset=11), [LtE()], [Num(-2, lineno=3034, col_offset=19)], lineno=3034, col_offset=11), [Return(BinOp(Call(Name('len', Load(), lineno=3036, col_offset=19), [Call(Name('str', Load(), lineno=3036, col_offset=23), [BinOp(BinOp(BinOp(Num(-1, lineno=3036, col_offset=29), Sub(), Name('adj', Load(), lineno=3036, col_offset=31), lineno=3036, col_offset=28), Mult(), Num(23, lineno=3036, col_offset=36), lineno=3036, col_offset=27), FloorDiv(), Num(10, lineno=3036, col_offset=40), lineno=3036, col_offset=38)], [], None, None, lineno=3036, col_offset=23)], [], None, None, lineno=3036, col_offset=19), Sub(), Num(1, lineno=3036, col_offset=47), lineno=3036, col_offset=19), lineno=3036, col_offset=12)], [], lineno=3034, col_offset=8), Assign([Name('op', Store(), lineno=3037, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=3037, col_offset=13), [Name('self', Load(), lineno=3037, col_offset=22)], [], None, None, lineno=3037, col_offset=13), lineno=3037, col_offset=8), Assign([Tuple([Name('c', Store(), lineno=3038, col_offset=8), Name('e', Store(), lineno=3038, col_offset=11)], Store(), lineno=3038, col_offset=8)], Tuple([Attribute(Name('op', Load(), lineno=3038, col_offset=15), 'int', Load(), lineno=3038, col_offset=15), Attribute(Name('op', Load(), lineno=3038, col_offset=23), 'exp', Load(), lineno=3038, col_offset=23)], Load(), lineno=3038, col_offset=15), lineno=3038, col_offset=8), If(Compare(Name('adj', Load(), lineno=3039, col_offset=11), [Eq()], [Num(0, lineno=3039, col_offset=18)], lineno=3039, col_offset=11), [Assign([Name('num', Store(), lineno=3041, col_offset=12)], Call(Name('str', Load(), lineno=3041, col_offset=18), [BinOp(Name('c', Load(), lineno=3041, col_offset=22), Sub(), BinOp(Num(10, lineno=3041, col_offset=24), Pow(), UnaryOp(USub(), Name('e', Load(), lineno=3041, col_offset=29), lineno=3041, col_offset=28), lineno=3041, col_offset=24), lineno=3041, col_offset=22)], [], None, None, lineno=3041, col_offset=18), lineno=3041, col_offset=12), Assign([Name('den', Store(), lineno=3042, col_offset=12)], Call(Name('str', Load(), lineno=3042, col_offset=18), [Name('c', Load(), lineno=3042, col_offset=22)], [], None, None, lineno=3042, col_offset=18), lineno=3042, col_offset=12), Return(BinOp(BinOp(Call(Name('len', Load(), lineno=3043, col_offset=19), [Name('num', Load(), lineno=3043, col_offset=23)], [], None, None, lineno=3043, col_offset=19), Sub(), Call(Name('len', Load(), lineno=3043, col_offset=30), [Name('den', Load(), lineno=3043, col_offset=34)], [], None, None, lineno=3043, col_offset=30), lineno=3043, col_offset=19), Sub(), Compare(Name('num', Load(), lineno=3043, col_offset=42), [Lt()], [Name('den', Load(), lineno=3043, col_offset=48)], lineno=3043, col_offset=42), lineno=3043, col_offset=39), lineno=3043, col_offset=12)], [], lineno=3039, col_offset=8), Return(BinOp(BinOp(Name('e', Load(), lineno=3045, col_offset=15), Add(), Call(Name('len', Load(), lineno=3045, col_offset=19), [Call(Name('str', Load(), lineno=3045, col_offset=23), [BinOp(BinOp(Num(10, lineno=3045, col_offset=27), Pow(), UnaryOp(USub(), Name('e', Load(), lineno=3045, col_offset=32), lineno=3045, col_offset=31), lineno=3045, col_offset=27), Sub(), Name('c', Load(), lineno=3045, col_offset=36), lineno=3045, col_offset=27)], [], None, None, lineno=3045, col_offset=23)], [], None, None, lineno=3045, col_offset=19), lineno=3045, col_offset=15), Sub(), Num(1, lineno=3045, col_offset=42), lineno=3045, col_offset=40), lineno=3045, col_offset=8)], [], lineno=3023, col_offset=4), FunctionDef('ln', arguments([Name('self', Param(), lineno=3048, col_offset=11), Name('context', Param(), lineno=3048, col_offset=17)], None, None, [Name('None', Load(), lineno=3048, col_offset=25)]), [Expr(Str('Returns the natural (base e) logarithm of self.', lineno=3049, col_offset=8), lineno=3049, col_offset=8), If(Compare(Name('context', Load(), lineno=3051, col_offset=11), [Is()], [Name('None', Load(), lineno=3051, col_offset=22)], lineno=3051, col_offset=11), [Assign([Name('context', Store(), lineno=3052, col_offset=12)], Call(Name('getcontext', Load(), lineno=3052, col_offset=22), [], [], None, None, lineno=3052, col_offset=22), lineno=3052, col_offset=12)], [], lineno=3051, col_offset=8), Assign([Name('ans', Store(), lineno=3055, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3055, col_offset=14), '_check_nans', Load(), lineno=3055, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=3055, col_offset=39))], None, None, lineno=3055, col_offset=14), lineno=3055, col_offset=8), If(Name('ans', Load(), lineno=3056, col_offset=11), [Return(Name('ans', Load(), lineno=3057, col_offset=19), lineno=3057, col_offset=12)], [], lineno=3056, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=3060, col_offset=15), lineno=3060, col_offset=11), [Return(Name('_NegativeInfinity', Load(), lineno=3061, col_offset=19), lineno=3061, col_offset=12)], [], lineno=3060, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3064, col_offset=11), '_isinfinity', Load(), lineno=3064, col_offset=11), [], [], None, None, lineno=3064, col_offset=11), [Eq()], [Num(1, lineno=3064, col_offset=33)], lineno=3064, col_offset=11), [Return(Name('_Infinity', Load(), lineno=3065, col_offset=19), lineno=3065, col_offset=12)], [], lineno=3064, col_offset=8), If(Compare(Name('self', Load(), lineno=3068, col_offset=11), [Eq()], [Name('_One', Load(), lineno=3068, col_offset=19)], lineno=3068, col_offset=11), [Return(Name('_Zero', Load(), lineno=3069, col_offset=19), lineno=3069, col_offset=12)], [], lineno=3068, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=3072, col_offset=11), '_sign', Load(), lineno=3072, col_offset=11), [Eq()], [Num(1, lineno=3072, col_offset=25)], lineno=3072, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3073, col_offset=19), '_raise_error', Load(), lineno=3073, col_offset=19), [Name('InvalidOperation', Load(), lineno=3073, col_offset=40), Str('ln of a negative value', lineno=3074, col_offset=40)], [], None, None, lineno=3073, col_offset=19), lineno=3073, col_offset=12)], [], lineno=3072, col_offset=8), Assign([Name('op', Store(), lineno=3077, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=3077, col_offset=13), [Name('self', Load(), lineno=3077, col_offset=22)], [], None, None, lineno=3077, col_offset=13), lineno=3077, col_offset=8), Assign([Tuple([Name('c', Store(), lineno=3078, col_offset=8), Name('e', Store(), lineno=3078, col_offset=11)], Store(), lineno=3078, col_offset=8)], Tuple([Attribute(Name('op', Load(), lineno=3078, col_offset=15), 'int', Load(), lineno=3078, col_offset=15), Attribute(Name('op', Load(), lineno=3078, col_offset=23), 'exp', Load(), lineno=3078, col_offset=23)], Load(), lineno=3078, col_offset=15), lineno=3078, col_offset=8), Assign([Name('p', Store(), lineno=3079, col_offset=8)], Attribute(Name('context', Load(), lineno=3079, col_offset=12), 'prec', Load(), lineno=3079, col_offset=12), lineno=3079, col_offset=8), Assign([Name('places', Store(), lineno=3083, col_offset=8)], BinOp(BinOp(Name('p', Load(), lineno=3083, col_offset=17), Sub(), Call(Attribute(Name('self', Load(), lineno=3083, col_offset=21), '_ln_exp_bound', Load(), lineno=3083, col_offset=21), [], [], None, None, lineno=3083, col_offset=21), lineno=3083, col_offset=17), Add(), Num(2, lineno=3083, col_offset=44), lineno=3083, col_offset=42), lineno=3083, col_offset=8), While(Name('True', Load(), lineno=3084, col_offset=14), [Assign([Name('coeff', Store(), lineno=3085, col_offset=12)], Call(Name('_dlog', Load(), lineno=3085, col_offset=20), [Name('c', Load(), lineno=3085, col_offset=26), Name('e', Load(), lineno=3085, col_offset=29), Name('places', Load(), lineno=3085, col_offset=32)], [], None, None, lineno=3085, col_offset=20), lineno=3085, col_offset=12), If(BinOp(Name('coeff', Load(), lineno=3087, col_offset=15), Mod(), BinOp(Num(5, lineno=3087, col_offset=24), Mult(), BinOp(Num(10, lineno=3087, col_offset=26), Pow(), BinOp(BinOp(Call(Name('len', Load(), lineno=3087, col_offset=31), [Call(Name('str', Load(), lineno=3087, col_offset=35), [Call(Name('abs', Load(), lineno=3087, col_offset=39), [Name('coeff', Load(), lineno=3087, col_offset=43)], [], None, None, lineno=3087, col_offset=39)], [], None, None, lineno=3087, col_offset=35)], [], None, None, lineno=3087, col_offset=31), Sub(), Name('p', Load(), lineno=3087, col_offset=52), lineno=3087, col_offset=31), Sub(), Num(1, lineno=3087, col_offset=54), lineno=3087, col_offset=53), lineno=3087, col_offset=26), lineno=3087, col_offset=24), lineno=3087, col_offset=15), [Break( lineno=3088, col_offset=16)], [], lineno=3087, col_offset=12), AugAssign(Name('places', Store(), lineno=3089, col_offset=12), Add(), Num(3, lineno=3089, col_offset=22), lineno=3089, col_offset=12)], [], lineno=3084, col_offset=8), Assign([Name('ans', Store(), lineno=3090, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=3090, col_offset=14), [Call(Name('int', Load(), lineno=3090, col_offset=31), [Compare(Name('coeff', Load(), lineno=3090, col_offset=35), [Lt()], [Num(0, lineno=3090, col_offset=41)], lineno=3090, col_offset=35)], [], None, None, lineno=3090, col_offset=31), Call(Name('str', Load(), lineno=3090, col_offset=45), [Call(Name('abs', Load(), lineno=3090, col_offset=49), [Name('coeff', Load(), lineno=3090, col_offset=53)], [], None, None, lineno=3090, col_offset=49)], [], None, None, lineno=3090, col_offset=45), UnaryOp(USub(), Name('places', Load(), lineno=3090, col_offset=63), lineno=3090, col_offset=62)], [], None, None, lineno=3090, col_offset=14), lineno=3090, col_offset=8), Assign([Name('context', Store(), lineno=3092, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3092, col_offset=18), '_shallow_copy', Load(), lineno=3092, col_offset=18), [], [], None, None, lineno=3092, col_offset=18), lineno=3092, col_offset=8), Assign([Name('rounding', Store(), lineno=3093, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3093, col_offset=19), '_set_rounding', Load(), lineno=3093, col_offset=19), [Name('ROUND_HALF_EVEN', Load(), lineno=3093, col_offset=41)], [], None, None, lineno=3093, col_offset=19), lineno=3093, col_offset=8), Assign([Name('ans', Store(), lineno=3094, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=3094, col_offset=14), '_fix', Load(), lineno=3094, col_offset=14), [Name('context', Load(), lineno=3094, col_offset=23)], [], None, None, lineno=3094, col_offset=14), lineno=3094, col_offset=8), Assign([Attribute(Name('context', Load(), lineno=3095, col_offset=8), 'rounding', Store(), lineno=3095, col_offset=8)], Name('rounding', Load(), lineno=3095, col_offset=27), lineno=3095, col_offset=8), Return(Name('ans', Load(), lineno=3096, col_offset=15), lineno=3096, col_offset=8)], [], lineno=3048, col_offset=4), FunctionDef('_log10_exp_bound', arguments([Name('self', Param(), lineno=3098, col_offset=25)], None, None, []), [Expr(Str('Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        ', lineno=3102, col_offset=-1), lineno=3102, col_offset=-1), Assign([Name('adj', Store(), lineno=3110, col_offset=8)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=3110, col_offset=14), '_exp', Load(), lineno=3110, col_offset=14), Add(), Call(Name('len', Load(), lineno=3110, col_offset=26), [Attribute(Name('self', Load(), lineno=3110, col_offset=30), '_int', Load(), lineno=3110, col_offset=30)], [], None, None, lineno=3110, col_offset=26), lineno=3110, col_offset=14), Sub(), Num(1, lineno=3110, col_offset=43), lineno=3110, col_offset=41), lineno=3110, col_offset=8), If(Compare(Name('adj', Load(), lineno=3111, col_offset=11), [GtE()], [Num(1, lineno=3111, col_offset=18)], lineno=3111, col_offset=11), [Return(BinOp(Call(Name('len', Load(), lineno=3113, col_offset=19), [Call(Name('str', Load(), lineno=3113, col_offset=23), [Name('adj', Load(), lineno=3113, col_offset=27)], [], None, None, lineno=3113, col_offset=23)], [], None, None, lineno=3113, col_offset=19), Sub(), Num(1, lineno=3113, col_offset=33), lineno=3113, col_offset=19), lineno=3113, col_offset=12)], [], lineno=3111, col_offset=8), If(Compare(Name('adj', Load(), lineno=3114, col_offset=11), [LtE()], [Num(-2, lineno=3114, col_offset=19)], lineno=3114, col_offset=11), [Return(BinOp(Call(Name('len', Load(), lineno=3116, col_offset=19), [Call(Name('str', Load(), lineno=3116, col_offset=23), [BinOp(Num(-1, lineno=3116, col_offset=28), Sub(), Name('adj', Load(), lineno=3116, col_offset=30), lineno=3116, col_offset=27)], [], None, None, lineno=3116, col_offset=23)], [], None, None, lineno=3116, col_offset=19), Sub(), Num(1, lineno=3116, col_offset=36), lineno=3116, col_offset=19), lineno=3116, col_offset=12)], [], lineno=3114, col_offset=8), Assign([Name('op', Store(), lineno=3117, col_offset=8)], Call(Name('_WorkRep', Load(), lineno=3117, col_offset=13), [Name('self', Load(), lineno=3117, col_offset=22)], [], None, None, lineno=3117, col_offset=13), lineno=3117, col_offset=8), Assign([Tuple([Name('c', Store(), lineno=3118, col_offset=8), Name('e', Store(), lineno=3118, col_offset=11)], Store(), lineno=3118, col_offset=8)], Tuple([Attribute(Name('op', Load(), lineno=3118, col_offset=15), 'int', Load(), lineno=3118, col_offset=15), Attribute(Name('op', Load(), lineno=3118, col_offset=23), 'exp', Load(), lineno=3118, col_offset=23)], Load(), lineno=3118, col_offset=15), lineno=3118, col_offset=8), If(Compare(Name('adj', Load(), lineno=3119, col_offset=11), [Eq()], [Num(0, lineno=3119, col_offset=18)], lineno=3119, col_offset=11), [Assign([Name('num', Store(), lineno=3121, col_offset=12)], Call(Name('str', Load(), lineno=3121, col_offset=18), [BinOp(Name('c', Load(), lineno=3121, col_offset=22), Sub(), BinOp(Num(10, lineno=3121, col_offset=24), Pow(), UnaryOp(USub(), Name('e', Load(), lineno=3121, col_offset=29), lineno=3121, col_offset=28), lineno=3121, col_offset=24), lineno=3121, col_offset=22)], [], None, None, lineno=3121, col_offset=18), lineno=3121, col_offset=12), Assign([Name('den', Store(), lineno=3122, col_offset=12)], Call(Name('str', Load(), lineno=3122, col_offset=18), [BinOp(Num(231, lineno=3122, col_offset=22), Mult(), Name('c', Load(), lineno=3122, col_offset=26), lineno=3122, col_offset=22)], [], None, None, lineno=3122, col_offset=18), lineno=3122, col_offset=12), Return(BinOp(BinOp(BinOp(Call(Name('len', Load(), lineno=3123, col_offset=19), [Name('num', Load(), lineno=3123, col_offset=23)], [], None, None, lineno=3123, col_offset=19), Sub(), Call(Name('len', Load(), lineno=3123, col_offset=30), [Name('den', Load(), lineno=3123, col_offset=34)], [], None, None, lineno=3123, col_offset=30), lineno=3123, col_offset=19), Sub(), Compare(Name('num', Load(), lineno=3123, col_offset=42), [Lt()], [Name('den', Load(), lineno=3123, col_offset=48)], lineno=3123, col_offset=42), lineno=3123, col_offset=39), Add(), Num(2, lineno=3123, col_offset=55), lineno=3123, col_offset=53), lineno=3123, col_offset=12)], [], lineno=3119, col_offset=8), Assign([Name('num', Store(), lineno=3125, col_offset=8)], Call(Name('str', Load(), lineno=3125, col_offset=14), [BinOp(BinOp(Num(10, lineno=3125, col_offset=18), Pow(), UnaryOp(USub(), Name('e', Load(), lineno=3125, col_offset=23), lineno=3125, col_offset=22), lineno=3125, col_offset=18), Sub(), Name('c', Load(), lineno=3125, col_offset=25), lineno=3125, col_offset=18)], [], None, None, lineno=3125, col_offset=14), lineno=3125, col_offset=8), Return(BinOp(BinOp(BinOp(Call(Name('len', Load(), lineno=3126, col_offset=15), [Name('num', Load(), lineno=3126, col_offset=19)], [], None, None, lineno=3126, col_offset=15), Add(), Name('e', Load(), lineno=3126, col_offset=26), lineno=3126, col_offset=15), Sub(), Compare(Name('num', Load(), lineno=3126, col_offset=31), [Lt()], [Str('231', lineno=3126, col_offset=37)], lineno=3126, col_offset=31), lineno=3126, col_offset=28), Sub(), Num(1, lineno=3126, col_offset=46), lineno=3126, col_offset=44), lineno=3126, col_offset=8)], [], lineno=3098, col_offset=4), FunctionDef('log10', arguments([Name('self', Param(), lineno=3128, col_offset=14), Name('context', Param(), lineno=3128, col_offset=20)], None, None, [Name('None', Load(), lineno=3128, col_offset=28)]), [Expr(Str('Returns the base 10 logarithm of self.', lineno=3129, col_offset=8), lineno=3129, col_offset=8), If(Compare(Name('context', Load(), lineno=3131, col_offset=11), [Is()], [Name('None', Load(), lineno=3131, col_offset=22)], lineno=3131, col_offset=11), [Assign([Name('context', Store(), lineno=3132, col_offset=12)], Call(Name('getcontext', Load(), lineno=3132, col_offset=22), [], [], None, None, lineno=3132, col_offset=22), lineno=3132, col_offset=12)], [], lineno=3131, col_offset=8), Assign([Name('ans', Store(), lineno=3135, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3135, col_offset=14), '_check_nans', Load(), lineno=3135, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=3135, col_offset=39))], None, None, lineno=3135, col_offset=14), lineno=3135, col_offset=8), If(Name('ans', Load(), lineno=3136, col_offset=11), [Return(Name('ans', Load(), lineno=3137, col_offset=19), lineno=3137, col_offset=12)], [], lineno=3136, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=3140, col_offset=15), lineno=3140, col_offset=11), [Return(Name('_NegativeInfinity', Load(), lineno=3141, col_offset=19), lineno=3141, col_offset=12)], [], lineno=3140, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3144, col_offset=11), '_isinfinity', Load(), lineno=3144, col_offset=11), [], [], None, None, lineno=3144, col_offset=11), [Eq()], [Num(1, lineno=3144, col_offset=33)], lineno=3144, col_offset=11), [Return(Name('_Infinity', Load(), lineno=3145, col_offset=19), lineno=3145, col_offset=12)], [], lineno=3144, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=3148, col_offset=11), '_sign', Load(), lineno=3148, col_offset=11), [Eq()], [Num(1, lineno=3148, col_offset=25)], lineno=3148, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3149, col_offset=19), '_raise_error', Load(), lineno=3149, col_offset=19), [Name('InvalidOperation', Load(), lineno=3149, col_offset=40), Str('log10 of a negative value', lineno=3150, col_offset=40)], [], None, None, lineno=3149, col_offset=19), lineno=3149, col_offset=12)], [], lineno=3148, col_offset=8), If(BoolOp(And(), [Compare(Subscript(Attribute(Name('self', Load(), lineno=3153, col_offset=11), '_int', Load(), lineno=3153, col_offset=11), Index(Num(0, lineno=3153, col_offset=21)), Load(), lineno=3153, col_offset=11), [Eq()], [Str('1', lineno=3153, col_offset=27)], lineno=3153, col_offset=11), Compare(Subscript(Attribute(Name('self', Load(), lineno=3153, col_offset=35), '_int', Load(), lineno=3153, col_offset=35), Slice(Num(1, lineno=3153, col_offset=45), None, None), Load(), lineno=3153, col_offset=35), [Eq()], [BinOp(Str('0', lineno=3153, col_offset=52), Mult(), BinOp(Call(Name('len', Load(), lineno=3153, col_offset=57), [Attribute(Name('self', Load(), lineno=3153, col_offset=61), '_int', Load(), lineno=3153, col_offset=61)], [], None, None, lineno=3153, col_offset=57), Sub(), Num(1, lineno=3153, col_offset=74), lineno=3153, col_offset=57), lineno=3153, col_offset=52)], lineno=3153, col_offset=35)], lineno=3153, col_offset=11), [Assign([Name('ans', Store(), lineno=3155, col_offset=12)], Call(Name('Decimal', Load(), lineno=3155, col_offset=18), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=3155, col_offset=26), '_exp', Load(), lineno=3155, col_offset=26), Add(), Call(Name('len', Load(), lineno=3155, col_offset=38), [Attribute(Name('self', Load(), lineno=3155, col_offset=42), '_int', Load(), lineno=3155, col_offset=42)], [], None, None, lineno=3155, col_offset=38), lineno=3155, col_offset=26), Sub(), Num(1, lineno=3155, col_offset=55), lineno=3155, col_offset=53)], [], None, None, lineno=3155, col_offset=18), lineno=3155, col_offset=12)], [Assign([Name('op', Store(), lineno=3158, col_offset=12)], Call(Name('_WorkRep', Load(), lineno=3158, col_offset=17), [Name('self', Load(), lineno=3158, col_offset=26)], [], None, None, lineno=3158, col_offset=17), lineno=3158, col_offset=12), Assign([Tuple([Name('c', Store(), lineno=3159, col_offset=12), Name('e', Store(), lineno=3159, col_offset=15)], Store(), lineno=3159, col_offset=12)], Tuple([Attribute(Name('op', Load(), lineno=3159, col_offset=19), 'int', Load(), lineno=3159, col_offset=19), Attribute(Name('op', Load(), lineno=3159, col_offset=27), 'exp', Load(), lineno=3159, col_offset=27)], Load(), lineno=3159, col_offset=19), lineno=3159, col_offset=12), Assign([Name('p', Store(), lineno=3160, col_offset=12)], Attribute(Name('context', Load(), lineno=3160, col_offset=16), 'prec', Load(), lineno=3160, col_offset=16), lineno=3160, col_offset=12), Assign([Name('places', Store(), lineno=3164, col_offset=12)], BinOp(BinOp(Name('p', Load(), lineno=3164, col_offset=21), Sub(), Call(Attribute(Name('self', Load(), lineno=3164, col_offset=23), '_log10_exp_bound', Load(), lineno=3164, col_offset=23), [], [], None, None, lineno=3164, col_offset=23), lineno=3164, col_offset=21), Add(), Num(2, lineno=3164, col_offset=47), lineno=3164, col_offset=46), lineno=3164, col_offset=12), While(Name('True', Load(), lineno=3165, col_offset=18), [Assign([Name('coeff', Store(), lineno=3166, col_offset=16)], Call(Name('_dlog10', Load(), lineno=3166, col_offset=24), [Name('c', Load(), lineno=3166, col_offset=32), Name('e', Load(), lineno=3166, col_offset=35), Name('places', Load(), lineno=3166, col_offset=38)], [], None, None, lineno=3166, col_offset=24), lineno=3166, col_offset=16), If(BinOp(Name('coeff', Load(), lineno=3168, col_offset=19), Mod(), BinOp(Num(5, lineno=3168, col_offset=28), Mult(), BinOp(Num(10, lineno=3168, col_offset=30), Pow(), BinOp(BinOp(Call(Name('len', Load(), lineno=3168, col_offset=35), [Call(Name('str', Load(), lineno=3168, col_offset=39), [Call(Name('abs', Load(), lineno=3168, col_offset=43), [Name('coeff', Load(), lineno=3168, col_offset=47)], [], None, None, lineno=3168, col_offset=43)], [], None, None, lineno=3168, col_offset=39)], [], None, None, lineno=3168, col_offset=35), Sub(), Name('p', Load(), lineno=3168, col_offset=56), lineno=3168, col_offset=35), Sub(), Num(1, lineno=3168, col_offset=58), lineno=3168, col_offset=57), lineno=3168, col_offset=30), lineno=3168, col_offset=28), lineno=3168, col_offset=19), [Break( lineno=3169, col_offset=20)], [], lineno=3168, col_offset=16), AugAssign(Name('places', Store(), lineno=3170, col_offset=16), Add(), Num(3, lineno=3170, col_offset=26), lineno=3170, col_offset=16)], [], lineno=3165, col_offset=12), Assign([Name('ans', Store(), lineno=3171, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=3171, col_offset=18), [Call(Name('int', Load(), lineno=3171, col_offset=35), [Compare(Name('coeff', Load(), lineno=3171, col_offset=39), [Lt()], [Num(0, lineno=3171, col_offset=45)], lineno=3171, col_offset=39)], [], None, None, lineno=3171, col_offset=35), Call(Name('str', Load(), lineno=3171, col_offset=49), [Call(Name('abs', Load(), lineno=3171, col_offset=53), [Name('coeff', Load(), lineno=3171, col_offset=57)], [], None, None, lineno=3171, col_offset=53)], [], None, None, lineno=3171, col_offset=49), UnaryOp(USub(), Name('places', Load(), lineno=3171, col_offset=67), lineno=3171, col_offset=66)], [], None, None, lineno=3171, col_offset=18), lineno=3171, col_offset=12)], lineno=3153, col_offset=8), Assign([Name('context', Store(), lineno=3173, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3173, col_offset=18), '_shallow_copy', Load(), lineno=3173, col_offset=18), [], [], None, None, lineno=3173, col_offset=18), lineno=3173, col_offset=8), Assign([Name('rounding', Store(), lineno=3174, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3174, col_offset=19), '_set_rounding', Load(), lineno=3174, col_offset=19), [Name('ROUND_HALF_EVEN', Load(), lineno=3174, col_offset=41)], [], None, None, lineno=3174, col_offset=19), lineno=3174, col_offset=8), Assign([Name('ans', Store(), lineno=3175, col_offset=8)], Call(Attribute(Name('ans', Load(), lineno=3175, col_offset=14), '_fix', Load(), lineno=3175, col_offset=14), [Name('context', Load(), lineno=3175, col_offset=23)], [], None, None, lineno=3175, col_offset=14), lineno=3175, col_offset=8), Assign([Attribute(Name('context', Load(), lineno=3176, col_offset=8), 'rounding', Store(), lineno=3176, col_offset=8)], Name('rounding', Load(), lineno=3176, col_offset=27), lineno=3176, col_offset=8), Return(Name('ans', Load(), lineno=3177, col_offset=15), lineno=3177, col_offset=8)], [], lineno=3128, col_offset=4), FunctionDef('logb', arguments([Name('self', Param(), lineno=3179, col_offset=13), Name('context', Param(), lineno=3179, col_offset=19)], None, None, [Name('None', Load(), lineno=3179, col_offset=27)]), [Expr(Str(" Returns the exponent of the magnitude of self's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        ", lineno=3186, col_offset=-1), lineno=3186, col_offset=-1), Assign([Name('ans', Store(), lineno=3188, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3188, col_offset=14), '_check_nans', Load(), lineno=3188, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=3188, col_offset=39))], None, None, lineno=3188, col_offset=14), lineno=3188, col_offset=8), If(Name('ans', Load(), lineno=3189, col_offset=11), [Return(Name('ans', Load(), lineno=3190, col_offset=19), lineno=3190, col_offset=12)], [], lineno=3189, col_offset=8), If(Compare(Name('context', Load(), lineno=3192, col_offset=11), [Is()], [Name('None', Load(), lineno=3192, col_offset=22)], lineno=3192, col_offset=11), [Assign([Name('context', Store(), lineno=3193, col_offset=12)], Call(Name('getcontext', Load(), lineno=3193, col_offset=22), [], [], None, None, lineno=3193, col_offset=22), lineno=3193, col_offset=12)], [], lineno=3192, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3196, col_offset=11), '_isinfinity', Load(), lineno=3196, col_offset=11), [], [], None, None, lineno=3196, col_offset=11), [Return(Name('_Infinity', Load(), lineno=3197, col_offset=19), lineno=3197, col_offset=12)], [], lineno=3196, col_offset=8), If(UnaryOp(Not(), Name('self', Load(), lineno=3200, col_offset=15), lineno=3200, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3201, col_offset=19), '_raise_error', Load(), lineno=3201, col_offset=19), [Name('DivisionByZero', Load(), lineno=3201, col_offset=40), Str('logb(0)', lineno=3201, col_offset=56), Num(1, lineno=3201, col_offset=67)], [], None, None, lineno=3201, col_offset=19), lineno=3201, col_offset=12)], [], lineno=3200, col_offset=8), Assign([Name('ans', Store(), lineno=3206, col_offset=8)], Call(Name('Decimal', Load(), lineno=3206, col_offset=14), [Call(Attribute(Name('self', Load(), lineno=3206, col_offset=22), 'adjusted', Load(), lineno=3206, col_offset=22), [], [], None, None, lineno=3206, col_offset=22)], [], None, None, lineno=3206, col_offset=14), lineno=3206, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=3207, col_offset=15), '_fix', Load(), lineno=3207, col_offset=15), [Name('context', Load(), lineno=3207, col_offset=24)], [], None, None, lineno=3207, col_offset=15), lineno=3207, col_offset=8)], [], lineno=3179, col_offset=4), FunctionDef('_islogical', arguments([Name('self', Param(), lineno=3209, col_offset=19)], None, None, []), [Expr(Str('Return True if self is a logical operand.\n\n        For being logical, it must be a finite number with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        ', lineno=3215, col_offset=-1), lineno=3215, col_offset=-1), If(BoolOp(Or(), [Compare(Attribute(Name('self', Load(), lineno=3216, col_offset=11), '_sign', Load(), lineno=3216, col_offset=11), [NotEq()], [Num(0, lineno=3216, col_offset=25)], lineno=3216, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=3216, col_offset=30), '_exp', Load(), lineno=3216, col_offset=30), [NotEq()], [Num(0, lineno=3216, col_offset=43)], lineno=3216, col_offset=30)], lineno=3216, col_offset=11), [Return(Name('False', Load(), lineno=3217, col_offset=19), lineno=3217, col_offset=12)], [], lineno=3216, col_offset=8), For(Name('dig', Store(), lineno=3218, col_offset=12), Attribute(Name('self', Load(), lineno=3218, col_offset=19), '_int', Load(), lineno=3218, col_offset=19), [If(Compare(Name('dig', Load(), lineno=3219, col_offset=15), [NotIn()], [Str('01', lineno=3219, col_offset=26)], lineno=3219, col_offset=15), [Return(Name('False', Load(), lineno=3220, col_offset=23), lineno=3220, col_offset=16)], [], lineno=3219, col_offset=12)], [], lineno=3218, col_offset=8), Return(Name('True', Load(), lineno=3221, col_offset=15), lineno=3221, col_offset=8)], [], lineno=3209, col_offset=4), FunctionDef('_fill_logical', arguments([Name('self', Param(), lineno=3223, col_offset=22), Name('context', Param(), lineno=3223, col_offset=28), Name('opa', Param(), lineno=3223, col_offset=37), Name('opb', Param(), lineno=3223, col_offset=42)], None, None, []), [Assign([Name('dif', Store(), lineno=3224, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=3224, col_offset=14), 'prec', Load(), lineno=3224, col_offset=14), Sub(), Call(Name('len', Load(), lineno=3224, col_offset=29), [Name('opa', Load(), lineno=3224, col_offset=33)], [], None, None, lineno=3224, col_offset=29), lineno=3224, col_offset=14), lineno=3224, col_offset=8), If(Compare(Name('dif', Load(), lineno=3225, col_offset=11), [Gt()], [Num(0, lineno=3225, col_offset=17)], lineno=3225, col_offset=11), [Assign([Name('opa', Store(), lineno=3226, col_offset=12)], BinOp(BinOp(Str('0', lineno=3226, col_offset=18), Mult(), Name('dif', Load(), lineno=3226, col_offset=22), lineno=3226, col_offset=18), Add(), Name('opa', Load(), lineno=3226, col_offset=28), lineno=3226, col_offset=18), lineno=3226, col_offset=12)], [If(Compare(Name('dif', Load(), lineno=3227, col_offset=13), [Lt()], [Num(0, lineno=3227, col_offset=19)], lineno=3227, col_offset=13), [Assign([Name('opa', Store(), lineno=3228, col_offset=12)], Subscript(Name('opa', Load(), lineno=3228, col_offset=18), Slice(UnaryOp(USub(), Attribute(Name('context', Load(), lineno=3228, col_offset=23), 'prec', Load(), lineno=3228, col_offset=23), lineno=3228, col_offset=22), None, None), Load(), lineno=3228, col_offset=18), lineno=3228, col_offset=12)], [], lineno=3227, col_offset=13)], lineno=3225, col_offset=8), Assign([Name('dif', Store(), lineno=3229, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=3229, col_offset=14), 'prec', Load(), lineno=3229, col_offset=14), Sub(), Call(Name('len', Load(), lineno=3229, col_offset=29), [Name('opb', Load(), lineno=3229, col_offset=33)], [], None, None, lineno=3229, col_offset=29), lineno=3229, col_offset=14), lineno=3229, col_offset=8), If(Compare(Name('dif', Load(), lineno=3230, col_offset=11), [Gt()], [Num(0, lineno=3230, col_offset=17)], lineno=3230, col_offset=11), [Assign([Name('opb', Store(), lineno=3231, col_offset=12)], BinOp(BinOp(Str('0', lineno=3231, col_offset=18), Mult(), Name('dif', Load(), lineno=3231, col_offset=22), lineno=3231, col_offset=18), Add(), Name('opb', Load(), lineno=3231, col_offset=28), lineno=3231, col_offset=18), lineno=3231, col_offset=12)], [If(Compare(Name('dif', Load(), lineno=3232, col_offset=13), [Lt()], [Num(0, lineno=3232, col_offset=19)], lineno=3232, col_offset=13), [Assign([Name('opb', Store(), lineno=3233, col_offset=12)], Subscript(Name('opb', Load(), lineno=3233, col_offset=18), Slice(UnaryOp(USub(), Attribute(Name('context', Load(), lineno=3233, col_offset=23), 'prec', Load(), lineno=3233, col_offset=23), lineno=3233, col_offset=22), None, None), Load(), lineno=3233, col_offset=18), lineno=3233, col_offset=12)], [], lineno=3232, col_offset=13)], lineno=3230, col_offset=8), Return(Tuple([Name('opa', Load(), lineno=3234, col_offset=15), Name('opb', Load(), lineno=3234, col_offset=20)], Load(), lineno=3234, col_offset=15), lineno=3234, col_offset=8)], [], lineno=3223, col_offset=4), FunctionDef('logical_and', arguments([Name('self', Param(), lineno=3236, col_offset=20), Name('other', Param(), lineno=3236, col_offset=26), Name('context', Param(), lineno=3236, col_offset=33)], None, None, [Name('None', Load(), lineno=3236, col_offset=41)]), [Expr(Str("Applies an 'and' operation between self and other's digits.", lineno=3237, col_offset=8), lineno=3237, col_offset=8), If(Compare(Name('context', Load(), lineno=3238, col_offset=11), [Is()], [Name('None', Load(), lineno=3238, col_offset=22)], lineno=3238, col_offset=11), [Assign([Name('context', Store(), lineno=3239, col_offset=12)], Call(Name('getcontext', Load(), lineno=3239, col_offset=22), [], [], None, None, lineno=3239, col_offset=22), lineno=3239, col_offset=12)], [], lineno=3238, col_offset=8), Assign([Name('other', Store(), lineno=3241, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3241, col_offset=16), [Name('other', Load(), lineno=3241, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3241, col_offset=46))], None, None, lineno=3241, col_offset=16), lineno=3241, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=3243, col_offset=15), '_islogical', Load(), lineno=3243, col_offset=15), [], [], None, None, lineno=3243, col_offset=15), lineno=3243, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('other', Load(), lineno=3243, col_offset=40), '_islogical', Load(), lineno=3243, col_offset=40), [], [], None, None, lineno=3243, col_offset=40), lineno=3243, col_offset=36)], lineno=3243, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3244, col_offset=19), '_raise_error', Load(), lineno=3244, col_offset=19), [Name('InvalidOperation', Load(), lineno=3244, col_offset=40)], [], None, None, lineno=3244, col_offset=19), lineno=3244, col_offset=12)], [], lineno=3243, col_offset=8), Assign([Tuple([Name('opa', Store(), lineno=3247, col_offset=9), Name('opb', Store(), lineno=3247, col_offset=14)], Store(), lineno=3247, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=3247, col_offset=21), '_fill_logical', Load(), lineno=3247, col_offset=21), [Name('context', Load(), lineno=3247, col_offset=40), Attribute(Name('self', Load(), lineno=3247, col_offset=49), '_int', Load(), lineno=3247, col_offset=49), Attribute(Name('other', Load(), lineno=3247, col_offset=60), '_int', Load(), lineno=3247, col_offset=60)], [], None, None, lineno=3247, col_offset=21), lineno=3247, col_offset=8), Assign([Name('result', Store(), lineno=3250, col_offset=8)], Call(Attribute(Str('', lineno=3250, col_offset=17), 'join', Load(), lineno=3250, col_offset=17), [ListComp(Call(Name('str', Load(), lineno=3250, col_offset=26), [BinOp(Call(Name('int', Load(), lineno=3250, col_offset=30), [Name('a', Load(), lineno=3250, col_offset=34)], [], None, None, lineno=3250, col_offset=30), BitAnd(), Call(Name('int', Load(), lineno=3250, col_offset=37), [Name('b', Load(), lineno=3250, col_offset=41)], [], None, None, lineno=3250, col_offset=37), lineno=3250, col_offset=30)], [], None, None, lineno=3250, col_offset=26), [comprehension(Tuple([Name('a', Store(), lineno=3250, col_offset=49), Name('b', Store(), lineno=3250, col_offset=51)], Store(), lineno=3250, col_offset=49), Call(Name('zip', Load(), lineno=3250, col_offset=56), [Name('opa', Load(), lineno=3250, col_offset=60), Name('opb', Load(), lineno=3250, col_offset=64)], [], None, None, lineno=3250, col_offset=56), [])], lineno=3250, col_offset=26)], [], None, None, lineno=3250, col_offset=17), lineno=3250, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=3251, col_offset=15), [Num(0, lineno=3251, col_offset=32), BoolOp(Or(), [Call(Attribute(Name('result', Load(), lineno=3251, col_offset=35), 'lstrip', Load(), lineno=3251, col_offset=35), [Str('0', lineno=3251, col_offset=49)], [], None, None, lineno=3251, col_offset=35), Str('0', lineno=3251, col_offset=57)], lineno=3251, col_offset=35), Num(0, lineno=3251, col_offset=62)], [], None, None, lineno=3251, col_offset=15), lineno=3251, col_offset=8)], [], lineno=3236, col_offset=4), FunctionDef('logical_invert', arguments([Name('self', Param(), lineno=3253, col_offset=23), Name('context', Param(), lineno=3253, col_offset=29)], None, None, [Name('None', Load(), lineno=3253, col_offset=37)]), [Expr(Str('Invert all its digits.', lineno=3254, col_offset=8), lineno=3254, col_offset=8), If(Compare(Name('context', Load(), lineno=3255, col_offset=11), [Is()], [Name('None', Load(), lineno=3255, col_offset=22)], lineno=3255, col_offset=11), [Assign([Name('context', Store(), lineno=3256, col_offset=12)], Call(Name('getcontext', Load(), lineno=3256, col_offset=22), [], [], None, None, lineno=3256, col_offset=22), lineno=3256, col_offset=12)], [], lineno=3255, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3257, col_offset=15), 'logical_xor', Load(), lineno=3257, col_offset=15), [Call(Name('_dec_from_triple', Load(), lineno=3257, col_offset=32), [Num(0, lineno=3257, col_offset=49), BinOp(Str('1', lineno=3257, col_offset=51), Mult(), Attribute(Name('context', Load(), lineno=3257, col_offset=55), 'prec', Load(), lineno=3257, col_offset=55), lineno=3257, col_offset=51), Num(0, lineno=3257, col_offset=68)], [], None, None, lineno=3257, col_offset=32), Name('context', Load(), lineno=3258, col_offset=32)], [], None, None, lineno=3257, col_offset=15), lineno=3257, col_offset=8)], [], lineno=3253, col_offset=4), FunctionDef('logical_or', arguments([Name('self', Param(), lineno=3260, col_offset=19), Name('other', Param(), lineno=3260, col_offset=25), Name('context', Param(), lineno=3260, col_offset=32)], None, None, [Name('None', Load(), lineno=3260, col_offset=40)]), [Expr(Str("Applies an 'or' operation between self and other's digits.", lineno=3261, col_offset=8), lineno=3261, col_offset=8), If(Compare(Name('context', Load(), lineno=3262, col_offset=11), [Is()], [Name('None', Load(), lineno=3262, col_offset=22)], lineno=3262, col_offset=11), [Assign([Name('context', Store(), lineno=3263, col_offset=12)], Call(Name('getcontext', Load(), lineno=3263, col_offset=22), [], [], None, None, lineno=3263, col_offset=22), lineno=3263, col_offset=12)], [], lineno=3262, col_offset=8), Assign([Name('other', Store(), lineno=3265, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3265, col_offset=16), [Name('other', Load(), lineno=3265, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3265, col_offset=46))], None, None, lineno=3265, col_offset=16), lineno=3265, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=3267, col_offset=15), '_islogical', Load(), lineno=3267, col_offset=15), [], [], None, None, lineno=3267, col_offset=15), lineno=3267, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('other', Load(), lineno=3267, col_offset=40), '_islogical', Load(), lineno=3267, col_offset=40), [], [], None, None, lineno=3267, col_offset=40), lineno=3267, col_offset=36)], lineno=3267, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3268, col_offset=19), '_raise_error', Load(), lineno=3268, col_offset=19), [Name('InvalidOperation', Load(), lineno=3268, col_offset=40)], [], None, None, lineno=3268, col_offset=19), lineno=3268, col_offset=12)], [], lineno=3267, col_offset=8), Assign([Tuple([Name('opa', Store(), lineno=3271, col_offset=9), Name('opb', Store(), lineno=3271, col_offset=14)], Store(), lineno=3271, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=3271, col_offset=21), '_fill_logical', Load(), lineno=3271, col_offset=21), [Name('context', Load(), lineno=3271, col_offset=40), Attribute(Name('self', Load(), lineno=3271, col_offset=49), '_int', Load(), lineno=3271, col_offset=49), Attribute(Name('other', Load(), lineno=3271, col_offset=60), '_int', Load(), lineno=3271, col_offset=60)], [], None, None, lineno=3271, col_offset=21), lineno=3271, col_offset=8), Assign([Name('result', Store(), lineno=3274, col_offset=8)], Call(Attribute(Str('', lineno=3274, col_offset=17), 'join', Load(), lineno=3274, col_offset=17), [ListComp(Call(Name('str', Load(), lineno=3274, col_offset=26), [BinOp(Call(Name('int', Load(), lineno=3274, col_offset=30), [Name('a', Load(), lineno=3274, col_offset=34)], [], None, None, lineno=3274, col_offset=30), BitOr(), Call(Name('int', Load(), lineno=3274, col_offset=37), [Name('b', Load(), lineno=3274, col_offset=41)], [], None, None, lineno=3274, col_offset=37), lineno=3274, col_offset=30)], [], None, None, lineno=3274, col_offset=26), [comprehension(Tuple([Name('a', Store(), lineno=3274, col_offset=49), Name('b', Store(), lineno=3274, col_offset=51)], Store(), lineno=3274, col_offset=49), Call(Name('zip', Load(), lineno=3274, col_offset=56), [Name('opa', Load(), lineno=3274, col_offset=60), Name('opb', Load(), lineno=3274, col_offset=64)], [], None, None, lineno=3274, col_offset=56), [])], lineno=3274, col_offset=26)], [], None, None, lineno=3274, col_offset=17), lineno=3274, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=3275, col_offset=15), [Num(0, lineno=3275, col_offset=32), BoolOp(Or(), [Call(Attribute(Name('result', Load(), lineno=3275, col_offset=35), 'lstrip', Load(), lineno=3275, col_offset=35), [Str('0', lineno=3275, col_offset=49)], [], None, None, lineno=3275, col_offset=35), Str('0', lineno=3275, col_offset=57)], lineno=3275, col_offset=35), Num(0, lineno=3275, col_offset=62)], [], None, None, lineno=3275, col_offset=15), lineno=3275, col_offset=8)], [], lineno=3260, col_offset=4), FunctionDef('logical_xor', arguments([Name('self', Param(), lineno=3277, col_offset=20), Name('other', Param(), lineno=3277, col_offset=26), Name('context', Param(), lineno=3277, col_offset=33)], None, None, [Name('None', Load(), lineno=3277, col_offset=41)]), [Expr(Str("Applies an 'xor' operation between self and other's digits.", lineno=3278, col_offset=8), lineno=3278, col_offset=8), If(Compare(Name('context', Load(), lineno=3279, col_offset=11), [Is()], [Name('None', Load(), lineno=3279, col_offset=22)], lineno=3279, col_offset=11), [Assign([Name('context', Store(), lineno=3280, col_offset=12)], Call(Name('getcontext', Load(), lineno=3280, col_offset=22), [], [], None, None, lineno=3280, col_offset=22), lineno=3280, col_offset=12)], [], lineno=3279, col_offset=8), Assign([Name('other', Store(), lineno=3282, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3282, col_offset=16), [Name('other', Load(), lineno=3282, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3282, col_offset=46))], None, None, lineno=3282, col_offset=16), lineno=3282, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=3284, col_offset=15), '_islogical', Load(), lineno=3284, col_offset=15), [], [], None, None, lineno=3284, col_offset=15), lineno=3284, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('other', Load(), lineno=3284, col_offset=40), '_islogical', Load(), lineno=3284, col_offset=40), [], [], None, None, lineno=3284, col_offset=40), lineno=3284, col_offset=36)], lineno=3284, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3285, col_offset=19), '_raise_error', Load(), lineno=3285, col_offset=19), [Name('InvalidOperation', Load(), lineno=3285, col_offset=40)], [], None, None, lineno=3285, col_offset=19), lineno=3285, col_offset=12)], [], lineno=3284, col_offset=8), Assign([Tuple([Name('opa', Store(), lineno=3288, col_offset=9), Name('opb', Store(), lineno=3288, col_offset=14)], Store(), lineno=3288, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=3288, col_offset=21), '_fill_logical', Load(), lineno=3288, col_offset=21), [Name('context', Load(), lineno=3288, col_offset=40), Attribute(Name('self', Load(), lineno=3288, col_offset=49), '_int', Load(), lineno=3288, col_offset=49), Attribute(Name('other', Load(), lineno=3288, col_offset=60), '_int', Load(), lineno=3288, col_offset=60)], [], None, None, lineno=3288, col_offset=21), lineno=3288, col_offset=8), Assign([Name('result', Store(), lineno=3291, col_offset=8)], Call(Attribute(Str('', lineno=3291, col_offset=17), 'join', Load(), lineno=3291, col_offset=17), [ListComp(Call(Name('str', Load(), lineno=3291, col_offset=26), [BinOp(Call(Name('int', Load(), lineno=3291, col_offset=30), [Name('a', Load(), lineno=3291, col_offset=34)], [], None, None, lineno=3291, col_offset=30), BitXor(), Call(Name('int', Load(), lineno=3291, col_offset=37), [Name('b', Load(), lineno=3291, col_offset=41)], [], None, None, lineno=3291, col_offset=37), lineno=3291, col_offset=30)], [], None, None, lineno=3291, col_offset=26), [comprehension(Tuple([Name('a', Store(), lineno=3291, col_offset=49), Name('b', Store(), lineno=3291, col_offset=51)], Store(), lineno=3291, col_offset=49), Call(Name('zip', Load(), lineno=3291, col_offset=56), [Name('opa', Load(), lineno=3291, col_offset=60), Name('opb', Load(), lineno=3291, col_offset=64)], [], None, None, lineno=3291, col_offset=56), [])], lineno=3291, col_offset=26)], [], None, None, lineno=3291, col_offset=17), lineno=3291, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=3292, col_offset=15), [Num(0, lineno=3292, col_offset=32), BoolOp(Or(), [Call(Attribute(Name('result', Load(), lineno=3292, col_offset=35), 'lstrip', Load(), lineno=3292, col_offset=35), [Str('0', lineno=3292, col_offset=49)], [], None, None, lineno=3292, col_offset=35), Str('0', lineno=3292, col_offset=57)], lineno=3292, col_offset=35), Num(0, lineno=3292, col_offset=62)], [], None, None, lineno=3292, col_offset=15), lineno=3292, col_offset=8)], [], lineno=3277, col_offset=4), FunctionDef('max_mag', arguments([Name('self', Param(), lineno=3294, col_offset=16), Name('other', Param(), lineno=3294, col_offset=22), Name('context', Param(), lineno=3294, col_offset=29)], None, None, [Name('None', Load(), lineno=3294, col_offset=37)]), [Expr(Str('Compares the values numerically with their sign ignored.', lineno=3295, col_offset=8), lineno=3295, col_offset=8), Assign([Name('other', Store(), lineno=3296, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3296, col_offset=16), [Name('other', Load(), lineno=3296, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3296, col_offset=46))], None, None, lineno=3296, col_offset=16), lineno=3296, col_offset=8), If(Compare(Name('context', Load(), lineno=3298, col_offset=11), [Is()], [Name('None', Load(), lineno=3298, col_offset=22)], lineno=3298, col_offset=11), [Assign([Name('context', Store(), lineno=3299, col_offset=12)], Call(Name('getcontext', Load(), lineno=3299, col_offset=22), [], [], None, None, lineno=3299, col_offset=22), lineno=3299, col_offset=12)], [], lineno=3298, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=3301, col_offset=11), '_is_special', Load(), lineno=3301, col_offset=11), Attribute(Name('other', Load(), lineno=3301, col_offset=31), '_is_special', Load(), lineno=3301, col_offset=31)], lineno=3301, col_offset=11), [Assign([Name('sn', Store(), lineno=3304, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3304, col_offset=17), '_isnan', Load(), lineno=3304, col_offset=17), [], [], None, None, lineno=3304, col_offset=17), lineno=3304, col_offset=12), Assign([Name('on', Store(), lineno=3305, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=3305, col_offset=17), '_isnan', Load(), lineno=3305, col_offset=17), [], [], None, None, lineno=3305, col_offset=17), lineno=3305, col_offset=12), If(BoolOp(Or(), [Name('sn', Load(), lineno=3306, col_offset=15), Name('on', Load(), lineno=3306, col_offset=21)], lineno=3306, col_offset=15), [If(BoolOp(And(), [Compare(Name('on', Load(), lineno=3307, col_offset=19), [Eq()], [Num(1, lineno=3307, col_offset=25)], lineno=3307, col_offset=19), Compare(Name('sn', Load(), lineno=3307, col_offset=31), [Eq()], [Num(0, lineno=3307, col_offset=37)], lineno=3307, col_offset=31)], lineno=3307, col_offset=19), [Return(Call(Attribute(Name('self', Load(), lineno=3308, col_offset=27), '_fix', Load(), lineno=3308, col_offset=27), [Name('context', Load(), lineno=3308, col_offset=37)], [], None, None, lineno=3308, col_offset=27), lineno=3308, col_offset=20)], [], lineno=3307, col_offset=16), If(BoolOp(And(), [Compare(Name('sn', Load(), lineno=3309, col_offset=19), [Eq()], [Num(1, lineno=3309, col_offset=25)], lineno=3309, col_offset=19), Compare(Name('on', Load(), lineno=3309, col_offset=31), [Eq()], [Num(0, lineno=3309, col_offset=37)], lineno=3309, col_offset=31)], lineno=3309, col_offset=19), [Return(Call(Attribute(Name('other', Load(), lineno=3310, col_offset=27), '_fix', Load(), lineno=3310, col_offset=27), [Name('context', Load(), lineno=3310, col_offset=38)], [], None, None, lineno=3310, col_offset=27), lineno=3310, col_offset=20)], [], lineno=3309, col_offset=16), Return(Call(Attribute(Name('self', Load(), lineno=3311, col_offset=23), '_check_nans', Load(), lineno=3311, col_offset=23), [Name('other', Load(), lineno=3311, col_offset=40), Name('context', Load(), lineno=3311, col_offset=47)], [], None, None, lineno=3311, col_offset=23), lineno=3311, col_offset=16)], [], lineno=3306, col_offset=12)], [], lineno=3301, col_offset=8), Assign([Name('c', Store(), lineno=3313, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=3313, col_offset=12), 'copy_abs', Load(), lineno=3313, col_offset=12), [], [], None, None, lineno=3313, col_offset=12), '_cmp', Load(), lineno=3313, col_offset=12), [Call(Attribute(Name('other', Load(), lineno=3313, col_offset=33), 'copy_abs', Load(), lineno=3313, col_offset=33), [], [], None, None, lineno=3313, col_offset=33)], [], None, None, lineno=3313, col_offset=12), lineno=3313, col_offset=8), If(Compare(Name('c', Load(), lineno=3314, col_offset=11), [Eq()], [Num(0, lineno=3314, col_offset=16)], lineno=3314, col_offset=11), [Assign([Name('c', Store(), lineno=3315, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3315, col_offset=16), 'compare_total', Load(), lineno=3315, col_offset=16), [Name('other', Load(), lineno=3315, col_offset=35)], [], None, None, lineno=3315, col_offset=16), lineno=3315, col_offset=12)], [], lineno=3314, col_offset=8), If(Compare(Name('c', Load(), lineno=3317, col_offset=11), [Eq()], [Num(-1, lineno=3317, col_offset=17)], lineno=3317, col_offset=11), [Assign([Name('ans', Store(), lineno=3318, col_offset=12)], Name('other', Load(), lineno=3318, col_offset=18), lineno=3318, col_offset=12)], [Assign([Name('ans', Store(), lineno=3320, col_offset=12)], Name('self', Load(), lineno=3320, col_offset=18), lineno=3320, col_offset=12)], lineno=3317, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=3322, col_offset=15), '_fix', Load(), lineno=3322, col_offset=15), [Name('context', Load(), lineno=3322, col_offset=24)], [], None, None, lineno=3322, col_offset=15), lineno=3322, col_offset=8)], [], lineno=3294, col_offset=4), FunctionDef('min_mag', arguments([Name('self', Param(), lineno=3324, col_offset=16), Name('other', Param(), lineno=3324, col_offset=22), Name('context', Param(), lineno=3324, col_offset=29)], None, None, [Name('None', Load(), lineno=3324, col_offset=37)]), [Expr(Str('Compares the values numerically with their sign ignored.', lineno=3325, col_offset=8), lineno=3325, col_offset=8), Assign([Name('other', Store(), lineno=3326, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3326, col_offset=16), [Name('other', Load(), lineno=3326, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3326, col_offset=46))], None, None, lineno=3326, col_offset=16), lineno=3326, col_offset=8), If(Compare(Name('context', Load(), lineno=3328, col_offset=11), [Is()], [Name('None', Load(), lineno=3328, col_offset=22)], lineno=3328, col_offset=11), [Assign([Name('context', Store(), lineno=3329, col_offset=12)], Call(Name('getcontext', Load(), lineno=3329, col_offset=22), [], [], None, None, lineno=3329, col_offset=22), lineno=3329, col_offset=12)], [], lineno=3328, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=3331, col_offset=11), '_is_special', Load(), lineno=3331, col_offset=11), Attribute(Name('other', Load(), lineno=3331, col_offset=31), '_is_special', Load(), lineno=3331, col_offset=31)], lineno=3331, col_offset=11), [Assign([Name('sn', Store(), lineno=3334, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3334, col_offset=17), '_isnan', Load(), lineno=3334, col_offset=17), [], [], None, None, lineno=3334, col_offset=17), lineno=3334, col_offset=12), Assign([Name('on', Store(), lineno=3335, col_offset=12)], Call(Attribute(Name('other', Load(), lineno=3335, col_offset=17), '_isnan', Load(), lineno=3335, col_offset=17), [], [], None, None, lineno=3335, col_offset=17), lineno=3335, col_offset=12), If(BoolOp(Or(), [Name('sn', Load(), lineno=3336, col_offset=15), Name('on', Load(), lineno=3336, col_offset=21)], lineno=3336, col_offset=15), [If(BoolOp(And(), [Compare(Name('on', Load(), lineno=3337, col_offset=19), [Eq()], [Num(1, lineno=3337, col_offset=25)], lineno=3337, col_offset=19), Compare(Name('sn', Load(), lineno=3337, col_offset=31), [Eq()], [Num(0, lineno=3337, col_offset=37)], lineno=3337, col_offset=31)], lineno=3337, col_offset=19), [Return(Call(Attribute(Name('self', Load(), lineno=3338, col_offset=27), '_fix', Load(), lineno=3338, col_offset=27), [Name('context', Load(), lineno=3338, col_offset=37)], [], None, None, lineno=3338, col_offset=27), lineno=3338, col_offset=20)], [], lineno=3337, col_offset=16), If(BoolOp(And(), [Compare(Name('sn', Load(), lineno=3339, col_offset=19), [Eq()], [Num(1, lineno=3339, col_offset=25)], lineno=3339, col_offset=19), Compare(Name('on', Load(), lineno=3339, col_offset=31), [Eq()], [Num(0, lineno=3339, col_offset=37)], lineno=3339, col_offset=31)], lineno=3339, col_offset=19), [Return(Call(Attribute(Name('other', Load(), lineno=3340, col_offset=27), '_fix', Load(), lineno=3340, col_offset=27), [Name('context', Load(), lineno=3340, col_offset=38)], [], None, None, lineno=3340, col_offset=27), lineno=3340, col_offset=20)], [], lineno=3339, col_offset=16), Return(Call(Attribute(Name('self', Load(), lineno=3341, col_offset=23), '_check_nans', Load(), lineno=3341, col_offset=23), [Name('other', Load(), lineno=3341, col_offset=40), Name('context', Load(), lineno=3341, col_offset=47)], [], None, None, lineno=3341, col_offset=23), lineno=3341, col_offset=16)], [], lineno=3336, col_offset=12)], [], lineno=3331, col_offset=8), Assign([Name('c', Store(), lineno=3343, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=3343, col_offset=12), 'copy_abs', Load(), lineno=3343, col_offset=12), [], [], None, None, lineno=3343, col_offset=12), '_cmp', Load(), lineno=3343, col_offset=12), [Call(Attribute(Name('other', Load(), lineno=3343, col_offset=33), 'copy_abs', Load(), lineno=3343, col_offset=33), [], [], None, None, lineno=3343, col_offset=33)], [], None, None, lineno=3343, col_offset=12), lineno=3343, col_offset=8), If(Compare(Name('c', Load(), lineno=3344, col_offset=11), [Eq()], [Num(0, lineno=3344, col_offset=16)], lineno=3344, col_offset=11), [Assign([Name('c', Store(), lineno=3345, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3345, col_offset=16), 'compare_total', Load(), lineno=3345, col_offset=16), [Name('other', Load(), lineno=3345, col_offset=35)], [], None, None, lineno=3345, col_offset=16), lineno=3345, col_offset=12)], [], lineno=3344, col_offset=8), If(Compare(Name('c', Load(), lineno=3347, col_offset=11), [Eq()], [Num(-1, lineno=3347, col_offset=17)], lineno=3347, col_offset=11), [Assign([Name('ans', Store(), lineno=3348, col_offset=12)], Name('self', Load(), lineno=3348, col_offset=18), lineno=3348, col_offset=12)], [Assign([Name('ans', Store(), lineno=3350, col_offset=12)], Name('other', Load(), lineno=3350, col_offset=18), lineno=3350, col_offset=12)], lineno=3347, col_offset=8), Return(Call(Attribute(Name('ans', Load(), lineno=3352, col_offset=15), '_fix', Load(), lineno=3352, col_offset=15), [Name('context', Load(), lineno=3352, col_offset=24)], [], None, None, lineno=3352, col_offset=15), lineno=3352, col_offset=8)], [], lineno=3324, col_offset=4), FunctionDef('next_minus', arguments([Name('self', Param(), lineno=3354, col_offset=19), Name('context', Param(), lineno=3354, col_offset=25)], None, None, [Name('None', Load(), lineno=3354, col_offset=33)]), [Expr(Str('Returns the largest representable number smaller than itself.', lineno=3355, col_offset=8), lineno=3355, col_offset=8), If(Compare(Name('context', Load(), lineno=3356, col_offset=11), [Is()], [Name('None', Load(), lineno=3356, col_offset=22)], lineno=3356, col_offset=11), [Assign([Name('context', Store(), lineno=3357, col_offset=12)], Call(Name('getcontext', Load(), lineno=3357, col_offset=22), [], [], None, None, lineno=3357, col_offset=22), lineno=3357, col_offset=12)], [], lineno=3356, col_offset=8), Assign([Name('ans', Store(), lineno=3359, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3359, col_offset=14), '_check_nans', Load(), lineno=3359, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=3359, col_offset=39))], None, None, lineno=3359, col_offset=14), lineno=3359, col_offset=8), If(Name('ans', Load(), lineno=3360, col_offset=11), [Return(Name('ans', Load(), lineno=3361, col_offset=19), lineno=3361, col_offset=12)], [], lineno=3360, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3363, col_offset=11), '_isinfinity', Load(), lineno=3363, col_offset=11), [], [], None, None, lineno=3363, col_offset=11), [Eq()], [Num(-1, lineno=3363, col_offset=34)], lineno=3363, col_offset=11), [Return(Name('_NegativeInfinity', Load(), lineno=3364, col_offset=19), lineno=3364, col_offset=12)], [], lineno=3363, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3365, col_offset=11), '_isinfinity', Load(), lineno=3365, col_offset=11), [], [], None, None, lineno=3365, col_offset=11), [Eq()], [Num(1, lineno=3365, col_offset=33)], lineno=3365, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=3366, col_offset=19), [Num(0, lineno=3366, col_offset=36), BinOp(Str('9', lineno=3366, col_offset=39), Mult(), Attribute(Name('context', Load(), lineno=3366, col_offset=43), 'prec', Load(), lineno=3366, col_offset=43), lineno=3366, col_offset=39), Call(Attribute(Name('context', Load(), lineno=3366, col_offset=57), 'Etop', Load(), lineno=3366, col_offset=57), [], [], None, None, lineno=3366, col_offset=57)], [], None, None, lineno=3366, col_offset=19), lineno=3366, col_offset=12)], [], lineno=3365, col_offset=8), Assign([Name('context', Store(), lineno=3368, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3368, col_offset=18), 'copy', Load(), lineno=3368, col_offset=18), [], [], None, None, lineno=3368, col_offset=18), lineno=3368, col_offset=8), Expr(Call(Attribute(Name('context', Load(), lineno=3369, col_offset=8), '_set_rounding', Load(), lineno=3369, col_offset=8), [Name('ROUND_FLOOR', Load(), lineno=3369, col_offset=30)], [], None, None, lineno=3369, col_offset=8), lineno=3369, col_offset=8), Expr(Call(Attribute(Name('context', Load(), lineno=3370, col_offset=8), '_ignore_all_flags', Load(), lineno=3370, col_offset=8), [], [], None, None, lineno=3370, col_offset=8), lineno=3370, col_offset=8), Assign([Name('new_self', Store(), lineno=3371, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3371, col_offset=19), '_fix', Load(), lineno=3371, col_offset=19), [Name('context', Load(), lineno=3371, col_offset=29)], [], None, None, lineno=3371, col_offset=19), lineno=3371, col_offset=8), If(Compare(Name('new_self', Load(), lineno=3372, col_offset=11), [NotEq()], [Name('self', Load(), lineno=3372, col_offset=23)], lineno=3372, col_offset=11), [Return(Name('new_self', Load(), lineno=3373, col_offset=19), lineno=3373, col_offset=12)], [], lineno=3372, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3374, col_offset=15), '__sub__', Load(), lineno=3374, col_offset=15), [Call(Name('_dec_from_triple', Load(), lineno=3374, col_offset=28), [Num(0, lineno=3374, col_offset=45), Str('1', lineno=3374, col_offset=48), BinOp(Call(Attribute(Name('context', Load(), lineno=3374, col_offset=53), 'Etiny', Load(), lineno=3374, col_offset=53), [], [], None, None, lineno=3374, col_offset=53), Sub(), Num(1, lineno=3374, col_offset=69), lineno=3374, col_offset=53)], [], None, None, lineno=3374, col_offset=28), Name('context', Load(), lineno=3375, col_offset=28)], [], None, None, lineno=3374, col_offset=15), lineno=3374, col_offset=8)], [], lineno=3354, col_offset=4), FunctionDef('next_plus', arguments([Name('self', Param(), lineno=3377, col_offset=18), Name('context', Param(), lineno=3377, col_offset=24)], None, None, [Name('None', Load(), lineno=3377, col_offset=32)]), [Expr(Str('Returns the smallest representable number larger than itself.', lineno=3378, col_offset=8), lineno=3378, col_offset=8), If(Compare(Name('context', Load(), lineno=3379, col_offset=11), [Is()], [Name('None', Load(), lineno=3379, col_offset=22)], lineno=3379, col_offset=11), [Assign([Name('context', Store(), lineno=3380, col_offset=12)], Call(Name('getcontext', Load(), lineno=3380, col_offset=22), [], [], None, None, lineno=3380, col_offset=22), lineno=3380, col_offset=12)], [], lineno=3379, col_offset=8), Assign([Name('ans', Store(), lineno=3382, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3382, col_offset=14), '_check_nans', Load(), lineno=3382, col_offset=14), [], [keyword('context', Name('context', Load(), lineno=3382, col_offset=39))], None, None, lineno=3382, col_offset=14), lineno=3382, col_offset=8), If(Name('ans', Load(), lineno=3383, col_offset=11), [Return(Name('ans', Load(), lineno=3384, col_offset=19), lineno=3384, col_offset=12)], [], lineno=3383, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3386, col_offset=11), '_isinfinity', Load(), lineno=3386, col_offset=11), [], [], None, None, lineno=3386, col_offset=11), [Eq()], [Num(1, lineno=3386, col_offset=33)], lineno=3386, col_offset=11), [Return(Name('_Infinity', Load(), lineno=3387, col_offset=19), lineno=3387, col_offset=12)], [], lineno=3386, col_offset=8), If(Compare(Call(Attribute(Name('self', Load(), lineno=3388, col_offset=11), '_isinfinity', Load(), lineno=3388, col_offset=11), [], [], None, None, lineno=3388, col_offset=11), [Eq()], [Num(-1, lineno=3388, col_offset=34)], lineno=3388, col_offset=11), [Return(Call(Name('_dec_from_triple', Load(), lineno=3389, col_offset=19), [Num(1, lineno=3389, col_offset=36), BinOp(Str('9', lineno=3389, col_offset=39), Mult(), Attribute(Name('context', Load(), lineno=3389, col_offset=43), 'prec', Load(), lineno=3389, col_offset=43), lineno=3389, col_offset=39), Call(Attribute(Name('context', Load(), lineno=3389, col_offset=57), 'Etop', Load(), lineno=3389, col_offset=57), [], [], None, None, lineno=3389, col_offset=57)], [], None, None, lineno=3389, col_offset=19), lineno=3389, col_offset=12)], [], lineno=3388, col_offset=8), Assign([Name('context', Store(), lineno=3391, col_offset=8)], Call(Attribute(Name('context', Load(), lineno=3391, col_offset=18), 'copy', Load(), lineno=3391, col_offset=18), [], [], None, None, lineno=3391, col_offset=18), lineno=3391, col_offset=8), Expr(Call(Attribute(Name('context', Load(), lineno=3392, col_offset=8), '_set_rounding', Load(), lineno=3392, col_offset=8), [Name('ROUND_CEILING', Load(), lineno=3392, col_offset=30)], [], None, None, lineno=3392, col_offset=8), lineno=3392, col_offset=8), Expr(Call(Attribute(Name('context', Load(), lineno=3393, col_offset=8), '_ignore_all_flags', Load(), lineno=3393, col_offset=8), [], [], None, None, lineno=3393, col_offset=8), lineno=3393, col_offset=8), Assign([Name('new_self', Store(), lineno=3394, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3394, col_offset=19), '_fix', Load(), lineno=3394, col_offset=19), [Name('context', Load(), lineno=3394, col_offset=29)], [], None, None, lineno=3394, col_offset=19), lineno=3394, col_offset=8), If(Compare(Name('new_self', Load(), lineno=3395, col_offset=11), [NotEq()], [Name('self', Load(), lineno=3395, col_offset=23)], lineno=3395, col_offset=11), [Return(Name('new_self', Load(), lineno=3396, col_offset=19), lineno=3396, col_offset=12)], [], lineno=3395, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3397, col_offset=15), '__add__', Load(), lineno=3397, col_offset=15), [Call(Name('_dec_from_triple', Load(), lineno=3397, col_offset=28), [Num(0, lineno=3397, col_offset=45), Str('1', lineno=3397, col_offset=48), BinOp(Call(Attribute(Name('context', Load(), lineno=3397, col_offset=53), 'Etiny', Load(), lineno=3397, col_offset=53), [], [], None, None, lineno=3397, col_offset=53), Sub(), Num(1, lineno=3397, col_offset=69), lineno=3397, col_offset=53)], [], None, None, lineno=3397, col_offset=28), Name('context', Load(), lineno=3398, col_offset=28)], [], None, None, lineno=3397, col_offset=15), lineno=3397, col_offset=8)], [], lineno=3377, col_offset=4), FunctionDef('next_toward', arguments([Name('self', Param(), lineno=3400, col_offset=20), Name('other', Param(), lineno=3400, col_offset=26), Name('context', Param(), lineno=3400, col_offset=33)], None, None, [Name('None', Load(), lineno=3400, col_offset=41)]), [Expr(Str('Returns the number closest to self, in the direction towards other.\n\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        ', lineno=3408, col_offset=-1), lineno=3408, col_offset=-1), Assign([Name('other', Store(), lineno=3409, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3409, col_offset=16), [Name('other', Load(), lineno=3409, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3409, col_offset=46))], None, None, lineno=3409, col_offset=16), lineno=3409, col_offset=8), If(Compare(Name('context', Load(), lineno=3411, col_offset=11), [Is()], [Name('None', Load(), lineno=3411, col_offset=22)], lineno=3411, col_offset=11), [Assign([Name('context', Store(), lineno=3412, col_offset=12)], Call(Name('getcontext', Load(), lineno=3412, col_offset=22), [], [], None, None, lineno=3412, col_offset=22), lineno=3412, col_offset=12)], [], lineno=3411, col_offset=8), Assign([Name('ans', Store(), lineno=3414, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3414, col_offset=14), '_check_nans', Load(), lineno=3414, col_offset=14), [Name('other', Load(), lineno=3414, col_offset=31), Name('context', Load(), lineno=3414, col_offset=38)], [], None, None, lineno=3414, col_offset=14), lineno=3414, col_offset=8), If(Name('ans', Load(), lineno=3415, col_offset=11), [Return(Name('ans', Load(), lineno=3416, col_offset=19), lineno=3416, col_offset=12)], [], lineno=3415, col_offset=8), Assign([Name('comparison', Store(), lineno=3418, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3418, col_offset=21), '_cmp', Load(), lineno=3418, col_offset=21), [Name('other', Load(), lineno=3418, col_offset=31)], [], None, None, lineno=3418, col_offset=21), lineno=3418, col_offset=8), If(Compare(Name('comparison', Load(), lineno=3419, col_offset=11), [Eq()], [Num(0, lineno=3419, col_offset=25)], lineno=3419, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=3420, col_offset=19), 'copy_sign', Load(), lineno=3420, col_offset=19), [Name('other', Load(), lineno=3420, col_offset=34)], [], None, None, lineno=3420, col_offset=19), lineno=3420, col_offset=12)], [], lineno=3419, col_offset=8), If(Compare(Name('comparison', Load(), lineno=3422, col_offset=11), [Eq()], [Num(-1, lineno=3422, col_offset=26)], lineno=3422, col_offset=11), [Assign([Name('ans', Store(), lineno=3423, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3423, col_offset=18), 'next_plus', Load(), lineno=3423, col_offset=18), [Name('context', Load(), lineno=3423, col_offset=33)], [], None, None, lineno=3423, col_offset=18), lineno=3423, col_offset=12)], [Assign([Name('ans', Store(), lineno=3425, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3425, col_offset=18), 'next_minus', Load(), lineno=3425, col_offset=18), [Name('context', Load(), lineno=3425, col_offset=34)], [], None, None, lineno=3425, col_offset=18), lineno=3425, col_offset=12)], lineno=3422, col_offset=8), If(Call(Attribute(Name('ans', Load(), lineno=3428, col_offset=11), '_isinfinity', Load(), lineno=3428, col_offset=11), [], [], None, None, lineno=3428, col_offset=11), [Expr(Call(Attribute(Name('context', Load(), lineno=3429, col_offset=12), '_raise_error', Load(), lineno=3429, col_offset=12), [Name('Overflow', Load(), lineno=3429, col_offset=33), Str('Infinite result from next_toward', lineno=3430, col_offset=33), Attribute(Name('ans', Load(), lineno=3431, col_offset=33), '_sign', Load(), lineno=3431, col_offset=33)], [], None, None, lineno=3429, col_offset=12), lineno=3429, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=3432, col_offset=12), '_raise_error', Load(), lineno=3432, col_offset=12), [Name('Inexact', Load(), lineno=3432, col_offset=33)], [], None, None, lineno=3432, col_offset=12), lineno=3432, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=3433, col_offset=12), '_raise_error', Load(), lineno=3433, col_offset=12), [Name('Rounded', Load(), lineno=3433, col_offset=33)], [], None, None, lineno=3433, col_offset=12), lineno=3433, col_offset=12)], [If(Compare(Call(Attribute(Name('ans', Load(), lineno=3434, col_offset=13), 'adjusted', Load(), lineno=3434, col_offset=13), [], [], None, None, lineno=3434, col_offset=13), [Lt()], [Attribute(Name('context', Load(), lineno=3434, col_offset=30), 'Emin', Load(), lineno=3434, col_offset=30)], lineno=3434, col_offset=13), [Expr(Call(Attribute(Name('context', Load(), lineno=3435, col_offset=12), '_raise_error', Load(), lineno=3435, col_offset=12), [Name('Underflow', Load(), lineno=3435, col_offset=33)], [], None, None, lineno=3435, col_offset=12), lineno=3435, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=3436, col_offset=12), '_raise_error', Load(), lineno=3436, col_offset=12), [Name('Subnormal', Load(), lineno=3436, col_offset=33)], [], None, None, lineno=3436, col_offset=12), lineno=3436, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=3437, col_offset=12), '_raise_error', Load(), lineno=3437, col_offset=12), [Name('Inexact', Load(), lineno=3437, col_offset=33)], [], None, None, lineno=3437, col_offset=12), lineno=3437, col_offset=12), Expr(Call(Attribute(Name('context', Load(), lineno=3438, col_offset=12), '_raise_error', Load(), lineno=3438, col_offset=12), [Name('Rounded', Load(), lineno=3438, col_offset=33)], [], None, None, lineno=3438, col_offset=12), lineno=3438, col_offset=12), If(UnaryOp(Not(), Name('ans', Load(), lineno=3441, col_offset=19), lineno=3441, col_offset=15), [Expr(Call(Attribute(Name('context', Load(), lineno=3442, col_offset=16), '_raise_error', Load(), lineno=3442, col_offset=16), [Name('Clamped', Load(), lineno=3442, col_offset=37)], [], None, None, lineno=3442, col_offset=16), lineno=3442, col_offset=16)], [], lineno=3441, col_offset=12)], [], lineno=3434, col_offset=13)], lineno=3428, col_offset=8), Return(Name('ans', Load(), lineno=3444, col_offset=15), lineno=3444, col_offset=8)], [], lineno=3400, col_offset=4), FunctionDef('number_class', arguments([Name('self', Param(), lineno=3446, col_offset=21), Name('context', Param(), lineno=3446, col_offset=27)], None, None, [Name('None', Load(), lineno=3446, col_offset=35)]), [Expr(Str('Returns an indication of the class of self.\n\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        ', lineno=3460, col_offset=-1), lineno=3460, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=3461, col_offset=11), 'is_snan', Load(), lineno=3461, col_offset=11), [], [], None, None, lineno=3461, col_offset=11), [Return(Str('sNaN', lineno=3462, col_offset=19), lineno=3462, col_offset=12)], [], lineno=3461, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3463, col_offset=11), 'is_qnan', Load(), lineno=3463, col_offset=11), [], [], None, None, lineno=3463, col_offset=11), [Return(Str('NaN', lineno=3464, col_offset=19), lineno=3464, col_offset=12)], [], lineno=3463, col_offset=8), Assign([Name('inf', Store(), lineno=3465, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3465, col_offset=14), '_isinfinity', Load(), lineno=3465, col_offset=14), [], [], None, None, lineno=3465, col_offset=14), lineno=3465, col_offset=8), If(Compare(Name('inf', Load(), lineno=3466, col_offset=11), [Eq()], [Num(1, lineno=3466, col_offset=18)], lineno=3466, col_offset=11), [Return(Str('+Infinity', lineno=3467, col_offset=19), lineno=3467, col_offset=12)], [], lineno=3466, col_offset=8), If(Compare(Name('inf', Load(), lineno=3468, col_offset=11), [Eq()], [Num(-1, lineno=3468, col_offset=19)], lineno=3468, col_offset=11), [Return(Str('-Infinity', lineno=3469, col_offset=19), lineno=3469, col_offset=12)], [], lineno=3468, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3470, col_offset=11), 'is_zero', Load(), lineno=3470, col_offset=11), [], [], None, None, lineno=3470, col_offset=11), [If(Attribute(Name('self', Load(), lineno=3471, col_offset=15), '_sign', Load(), lineno=3471, col_offset=15), [Return(Str('-Zero', lineno=3472, col_offset=23), lineno=3472, col_offset=16)], [Return(Str('+Zero', lineno=3474, col_offset=23), lineno=3474, col_offset=16)], lineno=3471, col_offset=12)], [], lineno=3470, col_offset=8), If(Compare(Name('context', Load(), lineno=3475, col_offset=11), [Is()], [Name('None', Load(), lineno=3475, col_offset=22)], lineno=3475, col_offset=11), [Assign([Name('context', Store(), lineno=3476, col_offset=12)], Call(Name('getcontext', Load(), lineno=3476, col_offset=22), [], [], None, None, lineno=3476, col_offset=22), lineno=3476, col_offset=12)], [], lineno=3475, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3477, col_offset=11), 'is_subnormal', Load(), lineno=3477, col_offset=11), [], [keyword('context', Name('context', Load(), lineno=3477, col_offset=37))], None, None, lineno=3477, col_offset=11), [If(Attribute(Name('self', Load(), lineno=3478, col_offset=15), '_sign', Load(), lineno=3478, col_offset=15), [Return(Str('-Subnormal', lineno=3479, col_offset=23), lineno=3479, col_offset=16)], [Return(Str('+Subnormal', lineno=3481, col_offset=23), lineno=3481, col_offset=16)], lineno=3478, col_offset=12)], [], lineno=3477, col_offset=8), If(Attribute(Name('self', Load(), lineno=3483, col_offset=11), '_sign', Load(), lineno=3483, col_offset=11), [Return(Str('-Normal', lineno=3484, col_offset=19), lineno=3484, col_offset=12)], [Return(Str('+Normal', lineno=3486, col_offset=19), lineno=3486, col_offset=12)], lineno=3483, col_offset=8)], [], lineno=3446, col_offset=4), FunctionDef('radix', arguments([Name('self', Param(), lineno=3488, col_offset=14)], None, None, []), [Expr(Str('Just returns 10, as this is Decimal, :)', lineno=3489, col_offset=8), lineno=3489, col_offset=8), Return(Call(Name('Decimal', Load(), lineno=3490, col_offset=15), [Num(10, lineno=3490, col_offset=23)], [], None, None, lineno=3490, col_offset=15), lineno=3490, col_offset=8)], [], lineno=3488, col_offset=4), FunctionDef('rotate', arguments([Name('self', Param(), lineno=3492, col_offset=15), Name('other', Param(), lineno=3492, col_offset=21), Name('context', Param(), lineno=3492, col_offset=28)], None, None, [Name('None', Load(), lineno=3492, col_offset=36)]), [Expr(Str('Returns a rotated copy of self, value-of-other times.', lineno=3493, col_offset=8), lineno=3493, col_offset=8), If(Compare(Name('context', Load(), lineno=3494, col_offset=11), [Is()], [Name('None', Load(), lineno=3494, col_offset=22)], lineno=3494, col_offset=11), [Assign([Name('context', Store(), lineno=3495, col_offset=12)], Call(Name('getcontext', Load(), lineno=3495, col_offset=22), [], [], None, None, lineno=3495, col_offset=22), lineno=3495, col_offset=12)], [], lineno=3494, col_offset=8), Assign([Name('other', Store(), lineno=3497, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3497, col_offset=16), [Name('other', Load(), lineno=3497, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3497, col_offset=46))], None, None, lineno=3497, col_offset=16), lineno=3497, col_offset=8), Assign([Name('ans', Store(), lineno=3499, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3499, col_offset=14), '_check_nans', Load(), lineno=3499, col_offset=14), [Name('other', Load(), lineno=3499, col_offset=31), Name('context', Load(), lineno=3499, col_offset=38)], [], None, None, lineno=3499, col_offset=14), lineno=3499, col_offset=8), If(Name('ans', Load(), lineno=3500, col_offset=11), [Return(Name('ans', Load(), lineno=3501, col_offset=19), lineno=3501, col_offset=12)], [], lineno=3500, col_offset=8), If(Compare(Attribute(Name('other', Load(), lineno=3503, col_offset=11), '_exp', Load(), lineno=3503, col_offset=11), [NotEq()], [Num(0, lineno=3503, col_offset=25)], lineno=3503, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3504, col_offset=19), '_raise_error', Load(), lineno=3504, col_offset=19), [Name('InvalidOperation', Load(), lineno=3504, col_offset=40)], [], None, None, lineno=3504, col_offset=19), lineno=3504, col_offset=12)], [], lineno=3503, col_offset=8), If(UnaryOp(Not(), Compare(UnaryOp(USub(), Attribute(Name('context', Load(), lineno=3505, col_offset=17), 'prec', Load(), lineno=3505, col_offset=17), lineno=3505, col_offset=16), [LtE(), LtE()], [Call(Name('int', Load(), lineno=3505, col_offset=33), [Name('other', Load(), lineno=3505, col_offset=37)], [], None, None, lineno=3505, col_offset=33), Attribute(Name('context', Load(), lineno=3505, col_offset=47), 'prec', Load(), lineno=3505, col_offset=47)], lineno=3505, col_offset=16), lineno=3505, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3506, col_offset=19), '_raise_error', Load(), lineno=3506, col_offset=19), [Name('InvalidOperation', Load(), lineno=3506, col_offset=40)], [], None, None, lineno=3506, col_offset=19), lineno=3506, col_offset=12)], [], lineno=3505, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3508, col_offset=11), '_isinfinity', Load(), lineno=3508, col_offset=11), [], [], None, None, lineno=3508, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=3509, col_offset=19), [Name('self', Load(), lineno=3509, col_offset=27)], [], None, None, lineno=3509, col_offset=19), lineno=3509, col_offset=12)], [], lineno=3508, col_offset=8), Assign([Name('torot', Store(), lineno=3512, col_offset=8)], Call(Name('int', Load(), lineno=3512, col_offset=16), [Name('other', Load(), lineno=3512, col_offset=20)], [], None, None, lineno=3512, col_offset=16), lineno=3512, col_offset=8), Assign([Name('rotdig', Store(), lineno=3513, col_offset=8)], Attribute(Name('self', Load(), lineno=3513, col_offset=17), '_int', Load(), lineno=3513, col_offset=17), lineno=3513, col_offset=8), Assign([Name('topad', Store(), lineno=3514, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=3514, col_offset=16), 'prec', Load(), lineno=3514, col_offset=16), Sub(), Call(Name('len', Load(), lineno=3514, col_offset=31), [Name('rotdig', Load(), lineno=3514, col_offset=35)], [], None, None, lineno=3514, col_offset=31), lineno=3514, col_offset=16), lineno=3514, col_offset=8), If(Compare(Name('topad', Load(), lineno=3515, col_offset=11), [Gt()], [Num(0, lineno=3515, col_offset=19)], lineno=3515, col_offset=11), [Assign([Name('rotdig', Store(), lineno=3516, col_offset=12)], BinOp(BinOp(Str('0', lineno=3516, col_offset=21), Mult(), Name('topad', Load(), lineno=3516, col_offset=25), lineno=3516, col_offset=21), Add(), Name('rotdig', Load(), lineno=3516, col_offset=33), lineno=3516, col_offset=21), lineno=3516, col_offset=12)], [If(Compare(Name('topad', Load(), lineno=3517, col_offset=13), [Lt()], [Num(0, lineno=3517, col_offset=21)], lineno=3517, col_offset=13), [Assign([Name('rotdig', Store(), lineno=3518, col_offset=12)], Subscript(Name('rotdig', Load(), lineno=3518, col_offset=21), Slice(UnaryOp(USub(), Name('topad', Load(), lineno=3518, col_offset=29), lineno=3518, col_offset=28), None, None), Load(), lineno=3518, col_offset=21), lineno=3518, col_offset=12)], [], lineno=3517, col_offset=13)], lineno=3515, col_offset=8), Assign([Name('rotated', Store(), lineno=3521, col_offset=8)], BinOp(Subscript(Name('rotdig', Load(), lineno=3521, col_offset=18), Slice(Name('torot', Load(), lineno=3521, col_offset=25), None, None), Load(), lineno=3521, col_offset=18), Add(), Subscript(Name('rotdig', Load(), lineno=3521, col_offset=35), Slice(None, Name('torot', Load(), lineno=3521, col_offset=43), None), Load(), lineno=3521, col_offset=35), lineno=3521, col_offset=18), lineno=3521, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=3522, col_offset=15), [Attribute(Name('self', Load(), lineno=3522, col_offset=32), '_sign', Load(), lineno=3522, col_offset=32), BoolOp(Or(), [Call(Attribute(Name('rotated', Load(), lineno=3523, col_offset=32), 'lstrip', Load(), lineno=3523, col_offset=32), [Str('0', lineno=3523, col_offset=47)], [], None, None, lineno=3523, col_offset=32), Str('0', lineno=3523, col_offset=55)], lineno=3523, col_offset=32), Attribute(Name('self', Load(), lineno=3523, col_offset=60), '_exp', Load(), lineno=3523, col_offset=60)], [], None, None, lineno=3522, col_offset=15), lineno=3522, col_offset=8)], [], lineno=3492, col_offset=4), FunctionDef('scaleb', arguments([Name('self', Param(), lineno=3525, col_offset=15), Name('other', Param(), lineno=3525, col_offset=21), Name('context', Param(), lineno=3525, col_offset=28)], None, None, [Name('None', Load(), lineno=3525, col_offset=36)]), [Expr(Str('Returns self operand after adding the second value to its exp.', lineno=3526, col_offset=8), lineno=3526, col_offset=8), If(Compare(Name('context', Load(), lineno=3527, col_offset=11), [Is()], [Name('None', Load(), lineno=3527, col_offset=22)], lineno=3527, col_offset=11), [Assign([Name('context', Store(), lineno=3528, col_offset=12)], Call(Name('getcontext', Load(), lineno=3528, col_offset=22), [], [], None, None, lineno=3528, col_offset=22), lineno=3528, col_offset=12)], [], lineno=3527, col_offset=8), Assign([Name('other', Store(), lineno=3530, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3530, col_offset=16), [Name('other', Load(), lineno=3530, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3530, col_offset=46))], None, None, lineno=3530, col_offset=16), lineno=3530, col_offset=8), Assign([Name('ans', Store(), lineno=3532, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3532, col_offset=14), '_check_nans', Load(), lineno=3532, col_offset=14), [Name('other', Load(), lineno=3532, col_offset=31), Name('context', Load(), lineno=3532, col_offset=38)], [], None, None, lineno=3532, col_offset=14), lineno=3532, col_offset=8), If(Name('ans', Load(), lineno=3533, col_offset=11), [Return(Name('ans', Load(), lineno=3534, col_offset=19), lineno=3534, col_offset=12)], [], lineno=3533, col_offset=8), If(Compare(Attribute(Name('other', Load(), lineno=3536, col_offset=11), '_exp', Load(), lineno=3536, col_offset=11), [NotEq()], [Num(0, lineno=3536, col_offset=25)], lineno=3536, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3537, col_offset=19), '_raise_error', Load(), lineno=3537, col_offset=19), [Name('InvalidOperation', Load(), lineno=3537, col_offset=40)], [], None, None, lineno=3537, col_offset=19), lineno=3537, col_offset=12)], [], lineno=3536, col_offset=8), Assign([Name('liminf', Store(), lineno=3538, col_offset=8)], BinOp(Num(-2, lineno=3538, col_offset=18), Mult(), BinOp(Attribute(Name('context', Load(), lineno=3538, col_offset=23), 'Emax', Load(), lineno=3538, col_offset=23), Add(), Attribute(Name('context', Load(), lineno=3538, col_offset=38), 'prec', Load(), lineno=3538, col_offset=38), lineno=3538, col_offset=23), lineno=3538, col_offset=17), lineno=3538, col_offset=8), Assign([Name('limsup', Store(), lineno=3539, col_offset=8)], BinOp(Num(2, lineno=3539, col_offset=18), Mult(), BinOp(Attribute(Name('context', Load(), lineno=3539, col_offset=23), 'Emax', Load(), lineno=3539, col_offset=23), Add(), Attribute(Name('context', Load(), lineno=3539, col_offset=38), 'prec', Load(), lineno=3539, col_offset=38), lineno=3539, col_offset=23), lineno=3539, col_offset=18), lineno=3539, col_offset=8), If(UnaryOp(Not(), Compare(Name('liminf', Load(), lineno=3540, col_offset=16), [LtE(), LtE()], [Call(Name('int', Load(), lineno=3540, col_offset=26), [Name('other', Load(), lineno=3540, col_offset=30)], [], None, None, lineno=3540, col_offset=26), Name('limsup', Load(), lineno=3540, col_offset=40)], lineno=3540, col_offset=16), lineno=3540, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3541, col_offset=19), '_raise_error', Load(), lineno=3541, col_offset=19), [Name('InvalidOperation', Load(), lineno=3541, col_offset=40)], [], None, None, lineno=3541, col_offset=19), lineno=3541, col_offset=12)], [], lineno=3540, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3543, col_offset=11), '_isinfinity', Load(), lineno=3543, col_offset=11), [], [], None, None, lineno=3543, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=3544, col_offset=19), [Name('self', Load(), lineno=3544, col_offset=27)], [], None, None, lineno=3544, col_offset=19), lineno=3544, col_offset=12)], [], lineno=3543, col_offset=8), Assign([Name('d', Store(), lineno=3546, col_offset=8)], Call(Name('_dec_from_triple', Load(), lineno=3546, col_offset=12), [Attribute(Name('self', Load(), lineno=3546, col_offset=29), '_sign', Load(), lineno=3546, col_offset=29), Attribute(Name('self', Load(), lineno=3546, col_offset=41), '_int', Load(), lineno=3546, col_offset=41), BinOp(Attribute(Name('self', Load(), lineno=3546, col_offset=52), '_exp', Load(), lineno=3546, col_offset=52), Add(), Call(Name('int', Load(), lineno=3546, col_offset=64), [Name('other', Load(), lineno=3546, col_offset=68)], [], None, None, lineno=3546, col_offset=64), lineno=3546, col_offset=52)], [], None, None, lineno=3546, col_offset=12), lineno=3546, col_offset=8), Assign([Name('d', Store(), lineno=3547, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=3547, col_offset=12), '_fix', Load(), lineno=3547, col_offset=12), [Name('context', Load(), lineno=3547, col_offset=19)], [], None, None, lineno=3547, col_offset=12), lineno=3547, col_offset=8), Return(Name('d', Load(), lineno=3548, col_offset=15), lineno=3548, col_offset=8)], [], lineno=3525, col_offset=4), FunctionDef('shift', arguments([Name('self', Param(), lineno=3550, col_offset=14), Name('other', Param(), lineno=3550, col_offset=20), Name('context', Param(), lineno=3550, col_offset=27)], None, None, [Name('None', Load(), lineno=3550, col_offset=35)]), [Expr(Str('Returns a shifted copy of self, value-of-other times.', lineno=3551, col_offset=8), lineno=3551, col_offset=8), If(Compare(Name('context', Load(), lineno=3552, col_offset=11), [Is()], [Name('None', Load(), lineno=3552, col_offset=22)], lineno=3552, col_offset=11), [Assign([Name('context', Store(), lineno=3553, col_offset=12)], Call(Name('getcontext', Load(), lineno=3553, col_offset=22), [], [], None, None, lineno=3553, col_offset=22), lineno=3553, col_offset=12)], [], lineno=3552, col_offset=8), Assign([Name('other', Store(), lineno=3555, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3555, col_offset=16), [Name('other', Load(), lineno=3555, col_offset=31)], [keyword('raiseit', Name('True', Load(), lineno=3555, col_offset=46))], None, None, lineno=3555, col_offset=16), lineno=3555, col_offset=8), Assign([Name('ans', Store(), lineno=3557, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3557, col_offset=14), '_check_nans', Load(), lineno=3557, col_offset=14), [Name('other', Load(), lineno=3557, col_offset=31), Name('context', Load(), lineno=3557, col_offset=38)], [], None, None, lineno=3557, col_offset=14), lineno=3557, col_offset=8), If(Name('ans', Load(), lineno=3558, col_offset=11), [Return(Name('ans', Load(), lineno=3559, col_offset=19), lineno=3559, col_offset=12)], [], lineno=3558, col_offset=8), If(Compare(Attribute(Name('other', Load(), lineno=3561, col_offset=11), '_exp', Load(), lineno=3561, col_offset=11), [NotEq()], [Num(0, lineno=3561, col_offset=25)], lineno=3561, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3562, col_offset=19), '_raise_error', Load(), lineno=3562, col_offset=19), [Name('InvalidOperation', Load(), lineno=3562, col_offset=40)], [], None, None, lineno=3562, col_offset=19), lineno=3562, col_offset=12)], [], lineno=3561, col_offset=8), If(UnaryOp(Not(), Compare(UnaryOp(USub(), Attribute(Name('context', Load(), lineno=3563, col_offset=17), 'prec', Load(), lineno=3563, col_offset=17), lineno=3563, col_offset=16), [LtE(), LtE()], [Call(Name('int', Load(), lineno=3563, col_offset=33), [Name('other', Load(), lineno=3563, col_offset=37)], [], None, None, lineno=3563, col_offset=33), Attribute(Name('context', Load(), lineno=3563, col_offset=47), 'prec', Load(), lineno=3563, col_offset=47)], lineno=3563, col_offset=16), lineno=3563, col_offset=11), [Return(Call(Attribute(Name('context', Load(), lineno=3564, col_offset=19), '_raise_error', Load(), lineno=3564, col_offset=19), [Name('InvalidOperation', Load(), lineno=3564, col_offset=40)], [], None, None, lineno=3564, col_offset=19), lineno=3564, col_offset=12)], [], lineno=3563, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=3566, col_offset=11), '_isinfinity', Load(), lineno=3566, col_offset=11), [], [], None, None, lineno=3566, col_offset=11), [Return(Call(Name('Decimal', Load(), lineno=3567, col_offset=19), [Name('self', Load(), lineno=3567, col_offset=27)], [], None, None, lineno=3567, col_offset=19), lineno=3567, col_offset=12)], [], lineno=3566, col_offset=8), Assign([Name('torot', Store(), lineno=3570, col_offset=8)], Call(Name('int', Load(), lineno=3570, col_offset=16), [Name('other', Load(), lineno=3570, col_offset=20)], [], None, None, lineno=3570, col_offset=16), lineno=3570, col_offset=8), Assign([Name('rotdig', Store(), lineno=3571, col_offset=8)], Attribute(Name('self', Load(), lineno=3571, col_offset=17), '_int', Load(), lineno=3571, col_offset=17), lineno=3571, col_offset=8), Assign([Name('topad', Store(), lineno=3572, col_offset=8)], BinOp(Attribute(Name('context', Load(), lineno=3572, col_offset=16), 'prec', Load(), lineno=3572, col_offset=16), Sub(), Call(Name('len', Load(), lineno=3572, col_offset=31), [Name('rotdig', Load(), lineno=3572, col_offset=35)], [], None, None, lineno=3572, col_offset=31), lineno=3572, col_offset=16), lineno=3572, col_offset=8), If(Compare(Name('topad', Load(), lineno=3573, col_offset=11), [Gt()], [Num(0, lineno=3573, col_offset=19)], lineno=3573, col_offset=11), [Assign([Name('rotdig', Store(), lineno=3574, col_offset=12)], BinOp(BinOp(Str('0', lineno=3574, col_offset=21), Mult(), Name('topad', Load(), lineno=3574, col_offset=25), lineno=3574, col_offset=21), Add(), Name('rotdig', Load(), lineno=3574, col_offset=33), lineno=3574, col_offset=21), lineno=3574, col_offset=12)], [If(Compare(Name('topad', Load(), lineno=3575, col_offset=13), [Lt()], [Num(0, lineno=3575, col_offset=21)], lineno=3575, col_offset=13), [Assign([Name('rotdig', Store(), lineno=3576, col_offset=12)], Subscript(Name('rotdig', Load(), lineno=3576, col_offset=21), Slice(UnaryOp(USub(), Name('topad', Load(), lineno=3576, col_offset=29), lineno=3576, col_offset=28), None, None), Load(), lineno=3576, col_offset=21), lineno=3576, col_offset=12)], [], lineno=3575, col_offset=13)], lineno=3573, col_offset=8), If(Compare(Name('torot', Load(), lineno=3579, col_offset=11), [Lt()], [Num(0, lineno=3579, col_offset=19)], lineno=3579, col_offset=11), [Assign([Name('shifted', Store(), lineno=3580, col_offset=12)], Subscript(Name('rotdig', Load(), lineno=3580, col_offset=22), Slice(None, Name('torot', Load(), lineno=3580, col_offset=30), None), Load(), lineno=3580, col_offset=22), lineno=3580, col_offset=12)], [Assign([Name('shifted', Store(), lineno=3582, col_offset=12)], BinOp(Name('rotdig', Load(), lineno=3582, col_offset=22), Add(), BinOp(Str('0', lineno=3582, col_offset=31), Mult(), Name('torot', Load(), lineno=3582, col_offset=35), lineno=3582, col_offset=31), lineno=3582, col_offset=22), lineno=3582, col_offset=12), Assign([Name('shifted', Store(), lineno=3583, col_offset=12)], Subscript(Name('shifted', Load(), lineno=3583, col_offset=22), Slice(UnaryOp(USub(), Attribute(Name('context', Load(), lineno=3583, col_offset=31), 'prec', Load(), lineno=3583, col_offset=31), lineno=3583, col_offset=30), None, None), Load(), lineno=3583, col_offset=22), lineno=3583, col_offset=12)], lineno=3579, col_offset=8), Return(Call(Name('_dec_from_triple', Load(), lineno=3585, col_offset=15), [Attribute(Name('self', Load(), lineno=3585, col_offset=32), '_sign', Load(), lineno=3585, col_offset=32), BoolOp(Or(), [Call(Attribute(Name('shifted', Load(), lineno=3586, col_offset=36), 'lstrip', Load(), lineno=3586, col_offset=36), [Str('0', lineno=3586, col_offset=51)], [], None, None, lineno=3586, col_offset=36), Str('0', lineno=3586, col_offset=59)], lineno=3586, col_offset=36), Attribute(Name('self', Load(), lineno=3586, col_offset=64), '_exp', Load(), lineno=3586, col_offset=64)], [], None, None, lineno=3585, col_offset=15), lineno=3585, col_offset=8)], [], lineno=3550, col_offset=4), FunctionDef('__reduce__', arguments([Name('self', Param(), lineno=3589, col_offset=19)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=3590, col_offset=16), '__class__', Load(), lineno=3590, col_offset=16), Tuple([Call(Name('str', Load(), lineno=3590, col_offset=33), [Name('self', Load(), lineno=3590, col_offset=37)], [], None, None, lineno=3590, col_offset=33)], Load(), lineno=3590, col_offset=33)], Load(), lineno=3590, col_offset=16), lineno=3590, col_offset=8)], [], lineno=3589, col_offset=4), FunctionDef('__copy__', arguments([Name('self', Param(), lineno=3592, col_offset=17)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=3593, col_offset=11), [Name('self', Load(), lineno=3593, col_offset=16)], [], None, None, lineno=3593, col_offset=11), [Is()], [Name('Decimal', Load(), lineno=3593, col_offset=25)], lineno=3593, col_offset=11), [Return(Name('self', Load(), lineno=3594, col_offset=19), lineno=3594, col_offset=12)], [], lineno=3593, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3595, col_offset=15), '__class__', Load(), lineno=3595, col_offset=15), [Call(Name('str', Load(), lineno=3595, col_offset=30), [Name('self', Load(), lineno=3595, col_offset=34)], [], None, None, lineno=3595, col_offset=30)], [], None, None, lineno=3595, col_offset=15), lineno=3595, col_offset=8)], [], lineno=3592, col_offset=4), FunctionDef('__deepcopy__', arguments([Name('self', Param(), lineno=3597, col_offset=21), Name('memo', Param(), lineno=3597, col_offset=27)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=3598, col_offset=11), [Name('self', Load(), lineno=3598, col_offset=16)], [], None, None, lineno=3598, col_offset=11), [Is()], [Name('Decimal', Load(), lineno=3598, col_offset=25)], lineno=3598, col_offset=11), [Return(Name('self', Load(), lineno=3599, col_offset=19), lineno=3599, col_offset=12)], [], lineno=3598, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3600, col_offset=15), '__class__', Load(), lineno=3600, col_offset=15), [Call(Name('str', Load(), lineno=3600, col_offset=30), [Name('self', Load(), lineno=3600, col_offset=34)], [], None, None, lineno=3600, col_offset=30)], [], None, None, lineno=3600, col_offset=15), lineno=3600, col_offset=8)], [], lineno=3597, col_offset=4), FunctionDef('__format__', arguments([Name('self', Param(), lineno=3604, col_offset=19), Name('specifier', Param(), lineno=3604, col_offset=25), Name('context', Param(), lineno=3604, col_offset=36), Name('_localeconv', Param(), lineno=3604, col_offset=50)], None, None, [Name('None', Load(), lineno=3604, col_offset=44), Name('None', Load(), lineno=3604, col_offset=62)]), [Expr(Str("Format a Decimal instance according to the given specifier.\n\n        The specifier should be a standard format specifier, with the\n        form described in PEP 3101.  Formatting types 'e', 'E', 'f',\n        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting\n        type is omitted it defaults to 'g' or 'G', depending on the\n        value of context.capitals.\n        ", lineno=3612, col_offset=-1), lineno=3612, col_offset=-1), If(Compare(Name('context', Load(), lineno=3619, col_offset=11), [Is()], [Name('None', Load(), lineno=3619, col_offset=22)], lineno=3619, col_offset=11), [Assign([Name('context', Store(), lineno=3620, col_offset=12)], Call(Name('getcontext', Load(), lineno=3620, col_offset=22), [], [], None, None, lineno=3620, col_offset=22), lineno=3620, col_offset=12)], [], lineno=3619, col_offset=8), Assign([Name('spec', Store(), lineno=3622, col_offset=8)], Call(Name('_parse_format_specifier', Load(), lineno=3622, col_offset=15), [Name('specifier', Load(), lineno=3622, col_offset=39)], [keyword('_localeconv', Name('_localeconv', Load(), lineno=3622, col_offset=62))], None, None, lineno=3622, col_offset=15), lineno=3622, col_offset=8), If(Attribute(Name('self', Load(), lineno=3625, col_offset=11), '_is_special', Load(), lineno=3625, col_offset=11), [Assign([Name('sign', Store(), lineno=3626, col_offset=12)], Call(Name('_format_sign', Load(), lineno=3626, col_offset=19), [Attribute(Name('self', Load(), lineno=3626, col_offset=32), '_sign', Load(), lineno=3626, col_offset=32), Name('spec', Load(), lineno=3626, col_offset=44)], [], None, None, lineno=3626, col_offset=19), lineno=3626, col_offset=12), Assign([Name('body', Store(), lineno=3627, col_offset=12)], Call(Name('str', Load(), lineno=3627, col_offset=19), [Call(Attribute(Name('self', Load(), lineno=3627, col_offset=23), 'copy_abs', Load(), lineno=3627, col_offset=23), [], [], None, None, lineno=3627, col_offset=23)], [], None, None, lineno=3627, col_offset=19), lineno=3627, col_offset=12), Return(Call(Name('_format_align', Load(), lineno=3628, col_offset=19), [Name('sign', Load(), lineno=3628, col_offset=33), Name('body', Load(), lineno=3628, col_offset=39), Name('spec', Load(), lineno=3628, col_offset=45)], [], None, None, lineno=3628, col_offset=19), lineno=3628, col_offset=12)], [], lineno=3625, col_offset=8), If(Compare(Subscript(Name('spec', Load(), lineno=3631, col_offset=11), Index(Str('type', lineno=3631, col_offset=16)), Load(), lineno=3631, col_offset=11), [Is()], [Name('None', Load(), lineno=3631, col_offset=27)], lineno=3631, col_offset=11), [Assign([Subscript(Name('spec', Load(), lineno=3632, col_offset=12), Index(Str('type', lineno=3632, col_offset=17)), Store(), lineno=3632, col_offset=12)], Subscript(List([Str('g', lineno=3632, col_offset=28), Str('G', lineno=3632, col_offset=33)], Load(), lineno=3632, col_offset=27), Index(Attribute(Name('context', Load(), lineno=3632, col_offset=38), 'capitals', Load(), lineno=3632, col_offset=38)), Load(), lineno=3632, col_offset=27), lineno=3632, col_offset=12)], [], lineno=3631, col_offset=8), If(Compare(Subscript(Name('spec', Load(), lineno=3635, col_offset=11), Index(Str('type', lineno=3635, col_offset=16)), Load(), lineno=3635, col_offset=11), [Eq()], [Str('%', lineno=3635, col_offset=27)], lineno=3635, col_offset=11), [Assign([Name('self', Store(), lineno=3636, col_offset=12)], Call(Name('_dec_from_triple', Load(), lineno=3636, col_offset=19), [Attribute(Name('self', Load(), lineno=3636, col_offset=36), '_sign', Load(), lineno=3636, col_offset=36), Attribute(Name('self', Load(), lineno=3636, col_offset=48), '_int', Load(), lineno=3636, col_offset=48), BinOp(Attribute(Name('self', Load(), lineno=3636, col_offset=59), '_exp', Load(), lineno=3636, col_offset=59), Add(), Num(2, lineno=3636, col_offset=69), lineno=3636, col_offset=59)], [], None, None, lineno=3636, col_offset=19), lineno=3636, col_offset=12)], [], lineno=3635, col_offset=8), Assign([Name('rounding', Store(), lineno=3639, col_offset=8)], Attribute(Name('context', Load(), lineno=3639, col_offset=19), 'rounding', Load(), lineno=3639, col_offset=19), lineno=3639, col_offset=8), Assign([Name('precision', Store(), lineno=3640, col_offset=8)], Subscript(Name('spec', Load(), lineno=3640, col_offset=20), Index(Str('precision', lineno=3640, col_offset=25)), Load(), lineno=3640, col_offset=20), lineno=3640, col_offset=8), If(Compare(Name('precision', Load(), lineno=3641, col_offset=11), [IsNot()], [Name('None', Load(), lineno=3641, col_offset=28)], lineno=3641, col_offset=11), [If(Compare(Subscript(Name('spec', Load(), lineno=3642, col_offset=15), Index(Str('type', lineno=3642, col_offset=20)), Load(), lineno=3642, col_offset=15), [In()], [Str('eE', lineno=3642, col_offset=31)], lineno=3642, col_offset=15), [Assign([Name('self', Store(), lineno=3643, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=3643, col_offset=23), '_round', Load(), lineno=3643, col_offset=23), [BinOp(Name('precision', Load(), lineno=3643, col_offset=35), Add(), Num(1, lineno=3643, col_offset=45), lineno=3643, col_offset=35), Name('rounding', Load(), lineno=3643, col_offset=48)], [], None, None, lineno=3643, col_offset=23), lineno=3643, col_offset=16)], [If(Compare(Subscript(Name('spec', Load(), lineno=3644, col_offset=17), Index(Str('type', lineno=3644, col_offset=22)), Load(), lineno=3644, col_offset=17), [In()], [Str('fF%', lineno=3644, col_offset=33)], lineno=3644, col_offset=17), [Assign([Name('self', Store(), lineno=3645, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=3645, col_offset=23), '_rescale', Load(), lineno=3645, col_offset=23), [UnaryOp(USub(), Name('precision', Load(), lineno=3645, col_offset=38), lineno=3645, col_offset=37), Name('rounding', Load(), lineno=3645, col_offset=49)], [], None, None, lineno=3645, col_offset=23), lineno=3645, col_offset=16)], [If(BoolOp(And(), [Compare(Subscript(Name('spec', Load(), lineno=3646, col_offset=17), Index(Str('type', lineno=3646, col_offset=22)), Load(), lineno=3646, col_offset=17), [In()], [Str('gG', lineno=3646, col_offset=33)], lineno=3646, col_offset=17), Compare(Call(Name('len', Load(), lineno=3646, col_offset=42), [Attribute(Name('self', Load(), lineno=3646, col_offset=46), '_int', Load(), lineno=3646, col_offset=46)], [], None, None, lineno=3646, col_offset=42), [Gt()], [Name('precision', Load(), lineno=3646, col_offset=59)], lineno=3646, col_offset=42)], lineno=3646, col_offset=17), [Assign([Name('self', Store(), lineno=3647, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=3647, col_offset=23), '_round', Load(), lineno=3647, col_offset=23), [Name('precision', Load(), lineno=3647, col_offset=35), Name('rounding', Load(), lineno=3647, col_offset=46)], [], None, None, lineno=3647, col_offset=23), lineno=3647, col_offset=16)], [], lineno=3646, col_offset=17)], lineno=3644, col_offset=17)], lineno=3642, col_offset=12)], [], lineno=3641, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('self', Load(), lineno=3650, col_offset=15), lineno=3650, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=3650, col_offset=24), '_exp', Load(), lineno=3650, col_offset=24), [Gt()], [Num(0, lineno=3650, col_offset=36)], lineno=3650, col_offset=24), Compare(Subscript(Name('spec', Load(), lineno=3650, col_offset=42), Index(Str('type', lineno=3650, col_offset=47)), Load(), lineno=3650, col_offset=42), [In()], [Str('fF%', lineno=3650, col_offset=58)], lineno=3650, col_offset=42)], lineno=3650, col_offset=11), [Assign([Name('self', Store(), lineno=3651, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3651, col_offset=19), '_rescale', Load(), lineno=3651, col_offset=19), [Num(0, lineno=3651, col_offset=33), Name('rounding', Load(), lineno=3651, col_offset=36)], [], None, None, lineno=3651, col_offset=19), lineno=3651, col_offset=12)], [], lineno=3650, col_offset=8), Assign([Name('leftdigits', Store(), lineno=3654, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=3654, col_offset=21), '_exp', Load(), lineno=3654, col_offset=21), Add(), Call(Name('len', Load(), lineno=3654, col_offset=33), [Attribute(Name('self', Load(), lineno=3654, col_offset=37), '_int', Load(), lineno=3654, col_offset=37)], [], None, None, lineno=3654, col_offset=33), lineno=3654, col_offset=21), lineno=3654, col_offset=8), If(Compare(Subscript(Name('spec', Load(), lineno=3655, col_offset=11), Index(Str('type', lineno=3655, col_offset=16)), Load(), lineno=3655, col_offset=11), [In()], [Str('eE', lineno=3655, col_offset=27)], lineno=3655, col_offset=11), [If(BoolOp(And(), [UnaryOp(Not(), Name('self', Load(), lineno=3656, col_offset=19), lineno=3656, col_offset=15), Compare(Name('precision', Load(), lineno=3656, col_offset=28), [IsNot()], [Name('None', Load(), lineno=3656, col_offset=45)], lineno=3656, col_offset=28)], lineno=3656, col_offset=15), [Assign([Name('dotplace', Store(), lineno=3657, col_offset=16)], BinOp(Num(1, lineno=3657, col_offset=27), Sub(), Name('precision', Load(), lineno=3657, col_offset=31), lineno=3657, col_offset=27), lineno=3657, col_offset=16)], [Assign([Name('dotplace', Store(), lineno=3659, col_offset=16)], Num(1, lineno=3659, col_offset=27), lineno=3659, col_offset=16)], lineno=3656, col_offset=12)], [If(Compare(Subscript(Name('spec', Load(), lineno=3660, col_offset=13), Index(Str('type', lineno=3660, col_offset=18)), Load(), lineno=3660, col_offset=13), [In()], [Str('fF%', lineno=3660, col_offset=29)], lineno=3660, col_offset=13), [Assign([Name('dotplace', Store(), lineno=3661, col_offset=12)], Name('leftdigits', Load(), lineno=3661, col_offset=23), lineno=3661, col_offset=12)], [If(Compare(Subscript(Name('spec', Load(), lineno=3662, col_offset=13), Index(Str('type', lineno=3662, col_offset=18)), Load(), lineno=3662, col_offset=13), [In()], [Str('gG', lineno=3662, col_offset=29)], lineno=3662, col_offset=13), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=3663, col_offset=15), '_exp', Load(), lineno=3663, col_offset=15), [LtE()], [Num(0, lineno=3663, col_offset=28)], lineno=3663, col_offset=15), Compare(Name('leftdigits', Load(), lineno=3663, col_offset=34), [Gt()], [Num(-6, lineno=3663, col_offset=48)], lineno=3663, col_offset=34)], lineno=3663, col_offset=15), [Assign([Name('dotplace', Store(), lineno=3664, col_offset=16)], Name('leftdigits', Load(), lineno=3664, col_offset=27), lineno=3664, col_offset=16)], [Assign([Name('dotplace', Store(), lineno=3666, col_offset=16)], Num(1, lineno=3666, col_offset=27), lineno=3666, col_offset=16)], lineno=3663, col_offset=12)], [], lineno=3662, col_offset=13)], lineno=3660, col_offset=13)], lineno=3655, col_offset=8), If(Compare(Name('dotplace', Load(), lineno=3669, col_offset=11), [Lt()], [Num(0, lineno=3669, col_offset=22)], lineno=3669, col_offset=11), [Assign([Name('intpart', Store(), lineno=3670, col_offset=12)], Str('0', lineno=3670, col_offset=22), lineno=3670, col_offset=12), Assign([Name('fracpart', Store(), lineno=3671, col_offset=12)], BinOp(BinOp(Str('0', lineno=3671, col_offset=23), Mult(), UnaryOp(USub(), Name('dotplace', Load(), lineno=3671, col_offset=29), lineno=3671, col_offset=28), lineno=3671, col_offset=23), Add(), Attribute(Name('self', Load(), lineno=3671, col_offset=41), '_int', Load(), lineno=3671, col_offset=41), lineno=3671, col_offset=23), lineno=3671, col_offset=12)], [If(Compare(Name('dotplace', Load(), lineno=3672, col_offset=13), [Gt()], [Call(Name('len', Load(), lineno=3672, col_offset=24), [Attribute(Name('self', Load(), lineno=3672, col_offset=28), '_int', Load(), lineno=3672, col_offset=28)], [], None, None, lineno=3672, col_offset=24)], lineno=3672, col_offset=13), [Assign([Name('intpart', Store(), lineno=3673, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=3673, col_offset=22), '_int', Load(), lineno=3673, col_offset=22), Add(), BinOp(Str('0', lineno=3673, col_offset=34), Mult(), BinOp(Name('dotplace', Load(), lineno=3673, col_offset=39), Sub(), Call(Name('len', Load(), lineno=3673, col_offset=48), [Attribute(Name('self', Load(), lineno=3673, col_offset=52), '_int', Load(), lineno=3673, col_offset=52)], [], None, None, lineno=3673, col_offset=48), lineno=3673, col_offset=39), lineno=3673, col_offset=34), lineno=3673, col_offset=22), lineno=3673, col_offset=12), Assign([Name('fracpart', Store(), lineno=3674, col_offset=12)], Str('', lineno=3674, col_offset=23), lineno=3674, col_offset=12)], [Assign([Name('intpart', Store(), lineno=3676, col_offset=12)], BoolOp(Or(), [Subscript(Attribute(Name('self', Load(), lineno=3676, col_offset=22), '_int', Load(), lineno=3676, col_offset=22), Slice(None, Name('dotplace', Load(), lineno=3676, col_offset=33), None), Load(), lineno=3676, col_offset=22), Str('0', lineno=3676, col_offset=46)], lineno=3676, col_offset=22), lineno=3676, col_offset=12), Assign([Name('fracpart', Store(), lineno=3677, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=3677, col_offset=23), '_int', Load(), lineno=3677, col_offset=23), Slice(Name('dotplace', Load(), lineno=3677, col_offset=33), None, None), Load(), lineno=3677, col_offset=23), lineno=3677, col_offset=12)], lineno=3672, col_offset=13)], lineno=3669, col_offset=8), Assign([Name('exp', Store(), lineno=3678, col_offset=8)], BinOp(Name('leftdigits', Load(), lineno=3678, col_offset=14), Sub(), Name('dotplace', Load(), lineno=3678, col_offset=25), lineno=3678, col_offset=14), lineno=3678, col_offset=8), Return(Call(Name('_format_number', Load(), lineno=3682, col_offset=15), [Attribute(Name('self', Load(), lineno=3682, col_offset=30), '_sign', Load(), lineno=3682, col_offset=30), Name('intpart', Load(), lineno=3682, col_offset=42), Name('fracpart', Load(), lineno=3682, col_offset=51), Name('exp', Load(), lineno=3682, col_offset=61), Name('spec', Load(), lineno=3682, col_offset=66)], [], None, None, lineno=3682, col_offset=15), lineno=3682, col_offset=8)], [], lineno=3604, col_offset=4)], [], lineno=506, col_offset=0), FunctionDef('_dec_from_triple', arguments([Name('sign', Param(), lineno=3684, col_offset=21), Name('coefficient', Param(), lineno=3684, col_offset=27), Name('exponent', Param(), lineno=3684, col_offset=40), Name('special', Param(), lineno=3684, col_offset=50)], None, None, [Name('False', Load(), lineno=3684, col_offset=58)]), [Expr(Str('Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n\n    This function is for *internal use only*.\n    ', lineno=3690, col_offset=-1), lineno=3690, col_offset=-1), Assign([Name('self', Store(), lineno=3692, col_offset=4)], Call(Attribute(Name('object', Load(), lineno=3692, col_offset=11), '__new__', Load(), lineno=3692, col_offset=11), [Name('Decimal', Load(), lineno=3692, col_offset=26)], [], None, None, lineno=3692, col_offset=11), lineno=3692, col_offset=4), Assign([Attribute(Name('self', Load(), lineno=3693, col_offset=4), '_sign', Store(), lineno=3693, col_offset=4)], Name('sign', Load(), lineno=3693, col_offset=17), lineno=3693, col_offset=4), Assign([Attribute(Name('self', Load(), lineno=3694, col_offset=4), '_int', Store(), lineno=3694, col_offset=4)], Name('coefficient', Load(), lineno=3694, col_offset=16), lineno=3694, col_offset=4), Assign([Attribute(Name('self', Load(), lineno=3695, col_offset=4), '_exp', Store(), lineno=3695, col_offset=4)], Name('exponent', Load(), lineno=3695, col_offset=16), lineno=3695, col_offset=4), Assign([Attribute(Name('self', Load(), lineno=3696, col_offset=4), '_is_special', Store(), lineno=3696, col_offset=4)], Name('special', Load(), lineno=3696, col_offset=23), lineno=3696, col_offset=4), Return(Name('self', Load(), lineno=3698, col_offset=11), lineno=3698, col_offset=4)], [], lineno=3684, col_offset=0), Expr(Call(Attribute(Attribute(Name('_numbers', Load(), lineno=3703, col_offset=0), 'Number', Load(), lineno=3703, col_offset=0), 'register', Load(), lineno=3703, col_offset=0), [Name('Decimal', Load(), lineno=3703, col_offset=25)], [], None, None, lineno=3703, col_offset=0), lineno=3703, col_offset=0), Assign([Name('rounding_functions', Store(), lineno=3710, col_offset=0)], ListComp(Name('name', Load(), lineno=3710, col_offset=22), [comprehension(Name('name', Store(), lineno=3710, col_offset=31), Call(Attribute(Attribute(Name('Decimal', Load(), lineno=3710, col_offset=39), '__dict__', Load(), lineno=3710, col_offset=39), 'keys', Load(), lineno=3710, col_offset=39), [], [], None, None, lineno=3710, col_offset=39), [Call(Attribute(Name('name', Load(), lineno=3711, col_offset=39), 'startswith', Load(), lineno=3711, col_offset=39), [Str('_round_', lineno=3711, col_offset=55)], [], None, None, lineno=3711, col_offset=39)])], lineno=3710, col_offset=22), lineno=3710, col_offset=0), For(Name('name', Store(), lineno=3712, col_offset=4), Name('rounding_functions', Load(), lineno=3712, col_offset=12), [Assign([Name('globalname', Store(), lineno=3714, col_offset=4)], Call(Attribute(Subscript(Name('name', Load(), lineno=3714, col_offset=17), Slice(Num(1, lineno=3714, col_offset=22), None, None), Load(), lineno=3714, col_offset=17), 'upper', Load(), lineno=3714, col_offset=17), [], [], None, None, lineno=3714, col_offset=17), lineno=3714, col_offset=4), Assign([Name('val', Store(), lineno=3715, col_offset=4)], Subscript(Call(Name('globals', Load(), lineno=3715, col_offset=10), [], [], None, None, lineno=3715, col_offset=10), Index(Name('globalname', Load(), lineno=3715, col_offset=20)), Load(), lineno=3715, col_offset=10), lineno=3715, col_offset=4), Assign([Subscript(Attribute(Name('Decimal', Load(), lineno=3716, col_offset=4), '_pick_rounding_function', Load(), lineno=3716, col_offset=4), Index(Name('val', Load(), lineno=3716, col_offset=36)), Store(), lineno=3716, col_offset=4)], Name('name', Load(), lineno=3716, col_offset=43), lineno=3716, col_offset=4)], [], lineno=3712, col_offset=0), Delete([Name('name', Del(), lineno=3718, col_offset=4), Name('val', Del(), lineno=3718, col_offset=10), Name('globalname', Del(), lineno=3718, col_offset=15), Name('rounding_functions', Del(), lineno=3718, col_offset=27)], lineno=3718, col_offset=0), ClassDef('_ContextManager', [Name('object', Load(), lineno=3720, col_offset=22)], [Expr(Str('Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    ', lineno=3725, col_offset=-1), lineno=3725, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3726, col_offset=17), Name('new_context', Param(), lineno=3726, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=3727, col_offset=8), 'new_context', Store(), lineno=3727, col_offset=8)], Call(Attribute(Name('new_context', Load(), lineno=3727, col_offset=27), 'copy', Load(), lineno=3727, col_offset=27), [], [], None, None, lineno=3727, col_offset=27), lineno=3727, col_offset=8)], [], lineno=3726, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=3728, col_offset=18)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=3729, col_offset=8), 'saved_context', Store(), lineno=3729, col_offset=8)], Call(Name('getcontext', Load(), lineno=3729, col_offset=29), [], [], None, None, lineno=3729, col_offset=29), lineno=3729, col_offset=8), Expr(Call(Name('setcontext', Load(), lineno=3730, col_offset=8), [Attribute(Name('self', Load(), lineno=3730, col_offset=19), 'new_context', Load(), lineno=3730, col_offset=19)], [], None, None, lineno=3730, col_offset=8), lineno=3730, col_offset=8), Return(Attribute(Name('self', Load(), lineno=3731, col_offset=15), 'new_context', Load(), lineno=3731, col_offset=15), lineno=3731, col_offset=8)], [], lineno=3728, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=3732, col_offset=17), Name('t', Param(), lineno=3732, col_offset=23), Name('v', Param(), lineno=3732, col_offset=26), Name('tb', Param(), lineno=3732, col_offset=29)], None, None, []), [Expr(Call(Name('setcontext', Load(), lineno=3733, col_offset=8), [Attribute(Name('self', Load(), lineno=3733, col_offset=19), 'saved_context', Load(), lineno=3733, col_offset=19)], [], None, None, lineno=3733, col_offset=8), lineno=3733, col_offset=8)], [], lineno=3732, col_offset=4)], [], lineno=3720, col_offset=0), ClassDef('Context', [Name('object', Load(), lineno=3735, col_offset=14)], [Expr(Str('Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    _clamp - If 1, change exponents if too high (Default 0)\n    ', lineno=3752, col_offset=-1), lineno=3752, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3754, col_offset=17), Name('prec', Param(), lineno=3754, col_offset=23), Name('rounding', Param(), lineno=3754, col_offset=34), Name('traps', Param(), lineno=3755, col_offset=17), Name('flags', Param(), lineno=3755, col_offset=29), Name('Emin', Param(), lineno=3756, col_offset=17), Name('Emax', Param(), lineno=3756, col_offset=28), Name('capitals', Param(), lineno=3757, col_offset=17), Name('_clamp', Param(), lineno=3757, col_offset=32), Name('_ignored_flags', Param(), lineno=3758, col_offset=17)], None, None, [Name('None', Load(), lineno=3754, col_offset=28), Name('None', Load(), lineno=3754, col_offset=43), Name('None', Load(), lineno=3755, col_offset=23), Name('None', Load(), lineno=3755, col_offset=35), Name('None', Load(), lineno=3756, col_offset=22), Name('None', Load(), lineno=3756, col_offset=33), Name('None', Load(), lineno=3757, col_offset=26), Num(0, lineno=3757, col_offset=39), Name('None', Load(), lineno=3758, col_offset=32)]), [TryExcept([Assign([Name('dc', Store(), lineno=3762, col_offset=12)], Name('DefaultContext', Load(), lineno=3762, col_offset=17), lineno=3762, col_offset=12)], [ExceptHandler(Name('NameError', Load(), lineno=3763, col_offset=15), None, [Pass( lineno=3764, col_offset=12)], lineno=3763, col_offset=8)], [], lineno=3761, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3766, col_offset=8), 'prec', Store(), lineno=3766, col_offset=8)], IfExp(Compare(Name('prec', Load(), lineno=3766, col_offset=28), [IsNot()], [Name('None', Load(), lineno=3766, col_offset=40)], lineno=3766, col_offset=28), Name('prec', Load(), lineno=3766, col_offset=20), Attribute(Name('dc', Load(), lineno=3766, col_offset=50), 'prec', Load(), lineno=3766, col_offset=50), lineno=3766, col_offset=20), lineno=3766, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3767, col_offset=8), 'rounding', Store(), lineno=3767, col_offset=8)], IfExp(Compare(Name('rounding', Load(), lineno=3767, col_offset=36), [IsNot()], [Name('None', Load(), lineno=3767, col_offset=52)], lineno=3767, col_offset=36), Name('rounding', Load(), lineno=3767, col_offset=24), Attribute(Name('dc', Load(), lineno=3767, col_offset=62), 'rounding', Load(), lineno=3767, col_offset=62), lineno=3767, col_offset=24), lineno=3767, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3768, col_offset=8), 'Emin', Store(), lineno=3768, col_offset=8)], IfExp(Compare(Name('Emin', Load(), lineno=3768, col_offset=28), [IsNot()], [Name('None', Load(), lineno=3768, col_offset=40)], lineno=3768, col_offset=28), Name('Emin', Load(), lineno=3768, col_offset=20), Attribute(Name('dc', Load(), lineno=3768, col_offset=50), 'Emin', Load(), lineno=3768, col_offset=50), lineno=3768, col_offset=20), lineno=3768, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3769, col_offset=8), 'Emax', Store(), lineno=3769, col_offset=8)], IfExp(Compare(Name('Emax', Load(), lineno=3769, col_offset=28), [IsNot()], [Name('None', Load(), lineno=3769, col_offset=40)], lineno=3769, col_offset=28), Name('Emax', Load(), lineno=3769, col_offset=20), Attribute(Name('dc', Load(), lineno=3769, col_offset=50), 'Emax', Load(), lineno=3769, col_offset=50), lineno=3769, col_offset=20), lineno=3769, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3770, col_offset=8), 'capitals', Store(), lineno=3770, col_offset=8)], IfExp(Compare(Name('capitals', Load(), lineno=3770, col_offset=36), [IsNot()], [Name('None', Load(), lineno=3770, col_offset=52)], lineno=3770, col_offset=36), Name('capitals', Load(), lineno=3770, col_offset=24), Attribute(Name('dc', Load(), lineno=3770, col_offset=62), 'capitals', Load(), lineno=3770, col_offset=62), lineno=3770, col_offset=24), lineno=3770, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3771, col_offset=8), '_clamp', Store(), lineno=3771, col_offset=8)], IfExp(Compare(Name('_clamp', Load(), lineno=3771, col_offset=32), [IsNot()], [Name('None', Load(), lineno=3771, col_offset=46)], lineno=3771, col_offset=32), Name('_clamp', Load(), lineno=3771, col_offset=22), Attribute(Name('dc', Load(), lineno=3771, col_offset=56), '_clamp', Load(), lineno=3771, col_offset=56), lineno=3771, col_offset=22), lineno=3771, col_offset=8), If(Compare(Name('_ignored_flags', Load(), lineno=3773, col_offset=11), [Is()], [Name('None', Load(), lineno=3773, col_offset=29)], lineno=3773, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=3774, col_offset=12), '_ignored_flags', Store(), lineno=3774, col_offset=12)], List([], Load(), lineno=3774, col_offset=34), lineno=3774, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=3776, col_offset=12), '_ignored_flags', Store(), lineno=3776, col_offset=12)], Name('_ignored_flags', Load(), lineno=3776, col_offset=34), lineno=3776, col_offset=12)], lineno=3773, col_offset=8), If(Compare(Name('traps', Load(), lineno=3778, col_offset=11), [Is()], [Name('None', Load(), lineno=3778, col_offset=20)], lineno=3778, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=3779, col_offset=12), 'traps', Store(), lineno=3779, col_offset=12)], Call(Attribute(Attribute(Name('dc', Load(), lineno=3779, col_offset=25), 'traps', Load(), lineno=3779, col_offset=25), 'copy', Load(), lineno=3779, col_offset=25), [], [], None, None, lineno=3779, col_offset=25), lineno=3779, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=3780, col_offset=17), [Name('traps', Load(), lineno=3780, col_offset=28), Name('dict', Load(), lineno=3780, col_offset=35)], [], None, None, lineno=3780, col_offset=17), lineno=3780, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=3781, col_offset=12), 'traps', Store(), lineno=3781, col_offset=12)], Call(Name('dict', Load(), lineno=3781, col_offset=25), [GeneratorExp(Tuple([Name('s', Load(), lineno=3781, col_offset=31), Call(Name('int', Load(), lineno=3781, col_offset=34), [Compare(Name('s', Load(), lineno=3781, col_offset=38), [In()], [Name('traps', Load(), lineno=3781, col_offset=43)], lineno=3781, col_offset=38)], [], None, None, lineno=3781, col_offset=34)], Load(), lineno=3781, col_offset=31), [comprehension(Name('s', Store(), lineno=3781, col_offset=55), Name('_signals', Load(), lineno=3781, col_offset=60), [])], lineno=3781, col_offset=30)], [], None, None, lineno=3781, col_offset=25), lineno=3781, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=3783, col_offset=12), 'traps', Store(), lineno=3783, col_offset=12)], Name('traps', Load(), lineno=3783, col_offset=25), lineno=3783, col_offset=12)], lineno=3780, col_offset=13)], lineno=3778, col_offset=8), If(Compare(Name('flags', Load(), lineno=3785, col_offset=11), [Is()], [Name('None', Load(), lineno=3785, col_offset=20)], lineno=3785, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=3786, col_offset=12), 'flags', Store(), lineno=3786, col_offset=12)], Call(Attribute(Name('dict', Load(), lineno=3786, col_offset=25), 'fromkeys', Load(), lineno=3786, col_offset=25), [Name('_signals', Load(), lineno=3786, col_offset=39), Num(0, lineno=3786, col_offset=49)], [], None, None, lineno=3786, col_offset=25), lineno=3786, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=3787, col_offset=17), [Name('flags', Load(), lineno=3787, col_offset=28), Name('dict', Load(), lineno=3787, col_offset=35)], [], None, None, lineno=3787, col_offset=17), lineno=3787, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=3788, col_offset=12), 'flags', Store(), lineno=3788, col_offset=12)], Call(Name('dict', Load(), lineno=3788, col_offset=25), [GeneratorExp(Tuple([Name('s', Load(), lineno=3788, col_offset=31), Call(Name('int', Load(), lineno=3788, col_offset=34), [Compare(Name('s', Load(), lineno=3788, col_offset=38), [In()], [Name('flags', Load(), lineno=3788, col_offset=43)], lineno=3788, col_offset=38)], [], None, None, lineno=3788, col_offset=34)], Load(), lineno=3788, col_offset=31), [comprehension(Name('s', Store(), lineno=3788, col_offset=55), Name('_signals', Load(), lineno=3788, col_offset=60), [])], lineno=3788, col_offset=30)], [], None, None, lineno=3788, col_offset=25), lineno=3788, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=3790, col_offset=12), 'flags', Store(), lineno=3790, col_offset=12)], Name('flags', Load(), lineno=3790, col_offset=25), lineno=3790, col_offset=12)], lineno=3787, col_offset=13)], lineno=3785, col_offset=8)], [], lineno=3754, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=3792, col_offset=17)], None, None, []), [Expr(Str('Show the current context.', lineno=3793, col_offset=8), lineno=3793, col_offset=8), Assign([Name('s', Store(), lineno=3794, col_offset=8)], List([], Load(), lineno=3794, col_offset=12), lineno=3794, col_offset=8), Expr(Call(Attribute(Name('s', Load(), lineno=3795, col_offset=8), 'append', Load(), lineno=3795, col_offset=8), [BinOp(Str('Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d', lineno=3795, col_offset=17), Mod(), Call(Name('vars', Load(), lineno=3797, col_offset=19), [Name('self', Load(), lineno=3797, col_offset=24)], [], None, None, lineno=3797, col_offset=19), lineno=3795, col_offset=17)], [], None, None, lineno=3795, col_offset=8), lineno=3795, col_offset=8), Assign([Name('names', Store(), lineno=3798, col_offset=8)], ListComp(Attribute(Name('f', Load(), lineno=3798, col_offset=17), '__name__', Load(), lineno=3798, col_offset=17), [comprehension(Tuple([Name('f', Store(), lineno=3798, col_offset=32), Name('v', Store(), lineno=3798, col_offset=35)], Store(), lineno=3798, col_offset=32), Call(Attribute(Attribute(Name('self', Load(), lineno=3798, col_offset=40), 'flags', Load(), lineno=3798, col_offset=40), 'items', Load(), lineno=3798, col_offset=40), [], [], None, None, lineno=3798, col_offset=40), [Name('v', Load(), lineno=3798, col_offset=62)])], lineno=3798, col_offset=17), lineno=3798, col_offset=8), Expr(Call(Attribute(Name('s', Load(), lineno=3799, col_offset=8), 'append', Load(), lineno=3799, col_offset=8), [BinOp(BinOp(Str('flags=[', lineno=3799, col_offset=17), Add(), Call(Attribute(Str(', ', lineno=3799, col_offset=29), 'join', Load(), lineno=3799, col_offset=29), [Name('names', Load(), lineno=3799, col_offset=39)], [], None, None, lineno=3799, col_offset=29), lineno=3799, col_offset=17), Add(), Str(']', lineno=3799, col_offset=48), lineno=3799, col_offset=46)], [], None, None, lineno=3799, col_offset=8), lineno=3799, col_offset=8), Assign([Name('names', Store(), lineno=3800, col_offset=8)], ListComp(Attribute(Name('t', Load(), lineno=3800, col_offset=17), '__name__', Load(), lineno=3800, col_offset=17), [comprehension(Tuple([Name('t', Store(), lineno=3800, col_offset=32), Name('v', Store(), lineno=3800, col_offset=35)], Store(), lineno=3800, col_offset=32), Call(Attribute(Attribute(Name('self', Load(), lineno=3800, col_offset=40), 'traps', Load(), lineno=3800, col_offset=40), 'items', Load(), lineno=3800, col_offset=40), [], [], None, None, lineno=3800, col_offset=40), [Name('v', Load(), lineno=3800, col_offset=62)])], lineno=3800, col_offset=17), lineno=3800, col_offset=8), Expr(Call(Attribute(Name('s', Load(), lineno=3801, col_offset=8), 'append', Load(), lineno=3801, col_offset=8), [BinOp(BinOp(Str('traps=[', lineno=3801, col_offset=17), Add(), Call(Attribute(Str(', ', lineno=3801, col_offset=29), 'join', Load(), lineno=3801, col_offset=29), [Name('names', Load(), lineno=3801, col_offset=39)], [], None, None, lineno=3801, col_offset=29), lineno=3801, col_offset=17), Add(), Str(']', lineno=3801, col_offset=48), lineno=3801, col_offset=46)], [], None, None, lineno=3801, col_offset=8), lineno=3801, col_offset=8), Return(BinOp(Call(Attribute(Str(', ', lineno=3802, col_offset=15), 'join', Load(), lineno=3802, col_offset=15), [Name('s', Load(), lineno=3802, col_offset=25)], [], None, None, lineno=3802, col_offset=15), Add(), Str(')', lineno=3802, col_offset=30), lineno=3802, col_offset=15), lineno=3802, col_offset=8)], [], lineno=3792, col_offset=4), FunctionDef('clear_flags', arguments([Name('self', Param(), lineno=3804, col_offset=20)], None, None, []), [Expr(Str('Reset all flags to zero', lineno=3805, col_offset=8), lineno=3805, col_offset=8), For(Name('flag', Store(), lineno=3806, col_offset=12), Attribute(Name('self', Load(), lineno=3806, col_offset=20), 'flags', Load(), lineno=3806, col_offset=20), [Assign([Subscript(Attribute(Name('self', Load(), lineno=3807, col_offset=12), 'flags', Load(), lineno=3807, col_offset=12), Index(Name('flag', Load(), lineno=3807, col_offset=23)), Store(), lineno=3807, col_offset=12)], Num(0, lineno=3807, col_offset=31), lineno=3807, col_offset=12)], [], lineno=3806, col_offset=8)], [], lineno=3804, col_offset=4), FunctionDef('_shallow_copy', arguments([Name('self', Param(), lineno=3809, col_offset=22)], None, None, []), [Expr(Str('Returns a shallow copy from self.', lineno=3810, col_offset=8), lineno=3810, col_offset=8), Assign([Name('nc', Store(), lineno=3811, col_offset=8)], Call(Name('Context', Load(), lineno=3811, col_offset=13), [Attribute(Name('self', Load(), lineno=3811, col_offset=21), 'prec', Load(), lineno=3811, col_offset=21), Attribute(Name('self', Load(), lineno=3811, col_offset=32), 'rounding', Load(), lineno=3811, col_offset=32), Attribute(Name('self', Load(), lineno=3811, col_offset=47), 'traps', Load(), lineno=3811, col_offset=47), Attribute(Name('self', Load(), lineno=3812, col_offset=21), 'flags', Load(), lineno=3812, col_offset=21), Attribute(Name('self', Load(), lineno=3812, col_offset=33), 'Emin', Load(), lineno=3812, col_offset=33), Attribute(Name('self', Load(), lineno=3812, col_offset=44), 'Emax', Load(), lineno=3812, col_offset=44), Attribute(Name('self', Load(), lineno=3813, col_offset=21), 'capitals', Load(), lineno=3813, col_offset=21), Attribute(Name('self', Load(), lineno=3813, col_offset=36), '_clamp', Load(), lineno=3813, col_offset=36), Attribute(Name('self', Load(), lineno=3813, col_offset=49), '_ignored_flags', Load(), lineno=3813, col_offset=49)], [], None, None, lineno=3811, col_offset=13), lineno=3811, col_offset=8), Return(Name('nc', Load(), lineno=3814, col_offset=15), lineno=3814, col_offset=8)], [], lineno=3809, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=3816, col_offset=13)], None, None, []), [Expr(Str('Returns a deep copy from self.', lineno=3817, col_offset=8), lineno=3817, col_offset=8), Assign([Name('nc', Store(), lineno=3818, col_offset=8)], Call(Name('Context', Load(), lineno=3818, col_offset=13), [Attribute(Name('self', Load(), lineno=3818, col_offset=21), 'prec', Load(), lineno=3818, col_offset=21), Attribute(Name('self', Load(), lineno=3818, col_offset=32), 'rounding', Load(), lineno=3818, col_offset=32), Call(Attribute(Attribute(Name('self', Load(), lineno=3818, col_offset=47), 'traps', Load(), lineno=3818, col_offset=47), 'copy', Load(), lineno=3818, col_offset=47), [], [], None, None, lineno=3818, col_offset=47), Call(Attribute(Attribute(Name('self', Load(), lineno=3819, col_offset=21), 'flags', Load(), lineno=3819, col_offset=21), 'copy', Load(), lineno=3819, col_offset=21), [], [], None, None, lineno=3819, col_offset=21), Attribute(Name('self', Load(), lineno=3819, col_offset=40), 'Emin', Load(), lineno=3819, col_offset=40), Attribute(Name('self', Load(), lineno=3819, col_offset=51), 'Emax', Load(), lineno=3819, col_offset=51), Attribute(Name('self', Load(), lineno=3820, col_offset=21), 'capitals', Load(), lineno=3820, col_offset=21), Attribute(Name('self', Load(), lineno=3820, col_offset=36), '_clamp', Load(), lineno=3820, col_offset=36), Attribute(Name('self', Load(), lineno=3820, col_offset=49), '_ignored_flags', Load(), lineno=3820, col_offset=49)], [], None, None, lineno=3818, col_offset=13), lineno=3818, col_offset=8), Return(Name('nc', Load(), lineno=3821, col_offset=15), lineno=3821, col_offset=8)], [], lineno=3816, col_offset=4), Assign([Name('__copy__', Store(), lineno=3822, col_offset=4)], Name('copy', Load(), lineno=3822, col_offset=15), lineno=3822, col_offset=4), FunctionDef('_raise_error', arguments([Name('self', Param(), lineno=3824, col_offset=21), Name('condition', Param(), lineno=3824, col_offset=27), Name('explanation', Param(), lineno=3824, col_offset=38)], 'args', None, [Name('None', Load(), lineno=3824, col_offset=52)]), [Expr(Str('Handles an error\n\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it sets the flag, then, if the corresponding\n        trap_enabler is set, it reraises the exception.  Otherwise, it returns\n        the default value after setting the flag.\n        ', lineno=3831, col_offset=-1), lineno=3831, col_offset=-1), Assign([Name('error', Store(), lineno=3832, col_offset=8)], Call(Attribute(Name('_condition_map', Load(), lineno=3832, col_offset=16), 'get', Load(), lineno=3832, col_offset=16), [Name('condition', Load(), lineno=3832, col_offset=35), Name('condition', Load(), lineno=3832, col_offset=46)], [], None, None, lineno=3832, col_offset=16), lineno=3832, col_offset=8), If(Compare(Name('error', Load(), lineno=3833, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=3833, col_offset=20), '_ignored_flags', Load(), lineno=3833, col_offset=20)], lineno=3833, col_offset=11), [Return(Call(Attribute(Call(Name('error', Load(), lineno=3835, col_offset=19), [], [], None, None, lineno=3835, col_offset=19), 'handle', Load(), lineno=3835, col_offset=19), [Name('self', Load(), lineno=3835, col_offset=34)], [], Name('args', Load(), lineno=3835, col_offset=41), None, lineno=3835, col_offset=19), lineno=3835, col_offset=12)], [], lineno=3833, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=3837, col_offset=8), 'flags', Load(), lineno=3837, col_offset=8), Index(Name('error', Load(), lineno=3837, col_offset=19)), Store(), lineno=3837, col_offset=8)], Num(1, lineno=3837, col_offset=28), lineno=3837, col_offset=8), If(UnaryOp(Not(), Subscript(Attribute(Name('self', Load(), lineno=3838, col_offset=15), 'traps', Load(), lineno=3838, col_offset=15), Index(Name('error', Load(), lineno=3838, col_offset=26)), Load(), lineno=3838, col_offset=15), lineno=3838, col_offset=11), [Return(Call(Attribute(Call(Name('condition', Load(), lineno=3840, col_offset=19), [], [], None, None, lineno=3840, col_offset=19), 'handle', Load(), lineno=3840, col_offset=19), [Name('self', Load(), lineno=3840, col_offset=38)], [], Name('args', Load(), lineno=3840, col_offset=45), None, lineno=3840, col_offset=19), lineno=3840, col_offset=12)], [], lineno=3838, col_offset=8), Raise(Call(Name('error', Load(), lineno=3844, col_offset=14), [Name('explanation', Load(), lineno=3844, col_offset=20)], [], None, None, lineno=3844, col_offset=14), None, None, lineno=3844, col_offset=8)], [], lineno=3824, col_offset=4), FunctionDef('_ignore_all_flags', arguments([Name('self', Param(), lineno=3846, col_offset=26)], None, None, []), [Expr(Str('Ignore all flags, if they are raised', lineno=3847, col_offset=8), lineno=3847, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3848, col_offset=15), '_ignore_flags', Load(), lineno=3848, col_offset=15), [], [], Name('_signals', Load(), lineno=3848, col_offset=35), None, lineno=3848, col_offset=15), lineno=3848, col_offset=8)], [], lineno=3846, col_offset=4), FunctionDef('_ignore_flags', arguments([Name('self', Param(), lineno=3850, col_offset=22)], 'flags', None, []), [Expr(Str('Ignore the flags, if they are raised', lineno=3851, col_offset=8), lineno=3851, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3854, col_offset=8), '_ignored_flags', Store(), lineno=3854, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=3854, col_offset=31), '_ignored_flags', Load(), lineno=3854, col_offset=31), Add(), Call(Name('list', Load(), lineno=3854, col_offset=53), [Name('flags', Load(), lineno=3854, col_offset=58)], [], None, None, lineno=3854, col_offset=53), lineno=3854, col_offset=31), lineno=3854, col_offset=8), Return(Call(Name('list', Load(), lineno=3855, col_offset=15), [Name('flags', Load(), lineno=3855, col_offset=20)], [], None, None, lineno=3855, col_offset=15), lineno=3855, col_offset=8)], [], lineno=3850, col_offset=4), FunctionDef('_regard_flags', arguments([Name('self', Param(), lineno=3857, col_offset=22)], 'flags', None, []), [Expr(Str('Stop ignoring the flags, if they are raised', lineno=3858, col_offset=8), lineno=3858, col_offset=8), If(BoolOp(And(), [Name('flags', Load(), lineno=3859, col_offset=11), Call(Name('isinstance', Load(), lineno=3859, col_offset=21), [Subscript(Name('flags', Load(), lineno=3859, col_offset=32), Index(Num(0, lineno=3859, col_offset=38)), Load(), lineno=3859, col_offset=32), Tuple([Name('tuple', Load(), lineno=3859, col_offset=43), Name('list', Load(), lineno=3859, col_offset=49)], Load(), lineno=3859, col_offset=43)], [], None, None, lineno=3859, col_offset=21)], lineno=3859, col_offset=11), [Assign([Name('flags', Store(), lineno=3860, col_offset=12)], Subscript(Name('flags', Load(), lineno=3860, col_offset=20), Index(Num(0, lineno=3860, col_offset=26)), Load(), lineno=3860, col_offset=20), lineno=3860, col_offset=12)], [], lineno=3859, col_offset=8), For(Name('flag', Store(), lineno=3861, col_offset=12), Name('flags', Load(), lineno=3861, col_offset=20), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3862, col_offset=12), '_ignored_flags', Load(), lineno=3862, col_offset=12), 'remove', Load(), lineno=3862, col_offset=12), [Name('flag', Load(), lineno=3862, col_offset=39)], [], None, None, lineno=3862, col_offset=12), lineno=3862, col_offset=12)], [], lineno=3861, col_offset=8)], [], lineno=3857, col_offset=4), Assign([Name('__hash__', Store(), lineno=3865, col_offset=4)], Name('None', Load(), lineno=3865, col_offset=15), lineno=3865, col_offset=4), FunctionDef('Etiny', arguments([Name('self', Param(), lineno=3867, col_offset=14)], None, None, []), [Expr(Str('Returns Etiny (= Emin - prec + 1)', lineno=3868, col_offset=8), lineno=3868, col_offset=8), Return(Call(Name('int', Load(), lineno=3869, col_offset=15), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=3869, col_offset=19), 'Emin', Load(), lineno=3869, col_offset=19), Sub(), Attribute(Name('self', Load(), lineno=3869, col_offset=31), 'prec', Load(), lineno=3869, col_offset=31), lineno=3869, col_offset=19), Add(), Num(1, lineno=3869, col_offset=43), lineno=3869, col_offset=41)], [], None, None, lineno=3869, col_offset=15), lineno=3869, col_offset=8)], [], lineno=3867, col_offset=4), FunctionDef('Etop', arguments([Name('self', Param(), lineno=3871, col_offset=13)], None, None, []), [Expr(Str('Returns maximum exponent (= Emax - prec + 1)', lineno=3872, col_offset=8), lineno=3872, col_offset=8), Return(Call(Name('int', Load(), lineno=3873, col_offset=15), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=3873, col_offset=19), 'Emax', Load(), lineno=3873, col_offset=19), Sub(), Attribute(Name('self', Load(), lineno=3873, col_offset=31), 'prec', Load(), lineno=3873, col_offset=31), lineno=3873, col_offset=19), Add(), Num(1, lineno=3873, col_offset=43), lineno=3873, col_offset=41)], [], None, None, lineno=3873, col_offset=15), lineno=3873, col_offset=8)], [], lineno=3871, col_offset=4), FunctionDef('_set_rounding', arguments([Name('self', Param(), lineno=3875, col_offset=22), Name('type', Param(), lineno=3875, col_offset=28)], None, None, []), [Expr(Str("Sets the rounding type.\n\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n\n        context = context.copy()\n        # so you don't change the calling context\n        # if an error occurs in the middle.\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n\n        This will make it round up for that operation.\n        ", lineno=3889, col_offset=-1), lineno=3889, col_offset=-1), Assign([Name('rounding', Store(), lineno=3890, col_offset=8)], Attribute(Name('self', Load(), lineno=3890, col_offset=19), 'rounding', Load(), lineno=3890, col_offset=19), lineno=3890, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3891, col_offset=8), 'rounding', Store(), lineno=3891, col_offset=8)], Name('type', Load(), lineno=3891, col_offset=23), lineno=3891, col_offset=8), Return(Name('rounding', Load(), lineno=3892, col_offset=15), lineno=3892, col_offset=8)], [], lineno=3875, col_offset=4), FunctionDef('create_decimal', arguments([Name('self', Param(), lineno=3894, col_offset=23), Name('num', Param(), lineno=3894, col_offset=29)], None, None, [Str('0', lineno=3894, col_offset=33)]), [Expr(Str('Creates a new Decimal instance but using self as context.\n\n        This method implements the to-number operation of the\n        IBM Decimal specification.', lineno=3898, col_offset=-1), lineno=3898, col_offset=-1), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=3900, col_offset=11), [Name('num', Load(), lineno=3900, col_offset=22), Name('basestring', Load(), lineno=3900, col_offset=27)], [], None, None, lineno=3900, col_offset=11), Compare(Name('num', Load(), lineno=3900, col_offset=43), [NotEq()], [Call(Attribute(Name('num', Load(), lineno=3900, col_offset=50), 'strip', Load(), lineno=3900, col_offset=50), [], [], None, None, lineno=3900, col_offset=50)], lineno=3900, col_offset=43)], lineno=3900, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=3901, col_offset=19), '_raise_error', Load(), lineno=3901, col_offset=19), [Name('ConversionSyntax', Load(), lineno=3901, col_offset=37), Str('no trailing or leading whitespace is permitted.', lineno=3902, col_offset=37)], [], None, None, lineno=3901, col_offset=19), lineno=3901, col_offset=12)], [], lineno=3900, col_offset=8), Assign([Name('d', Store(), lineno=3905, col_offset=8)], Call(Name('Decimal', Load(), lineno=3905, col_offset=12), [Name('num', Load(), lineno=3905, col_offset=20)], [keyword('context', Name('self', Load(), lineno=3905, col_offset=33))], None, None, lineno=3905, col_offset=12), lineno=3905, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('d', Load(), lineno=3906, col_offset=11), '_isnan', Load(), lineno=3906, col_offset=11), [], [], None, None, lineno=3906, col_offset=11), Compare(Call(Name('len', Load(), lineno=3906, col_offset=26), [Attribute(Name('d', Load(), lineno=3906, col_offset=30), '_int', Load(), lineno=3906, col_offset=30)], [], None, None, lineno=3906, col_offset=26), [Gt()], [BinOp(Attribute(Name('self', Load(), lineno=3906, col_offset=40), 'prec', Load(), lineno=3906, col_offset=40), Sub(), Attribute(Name('self', Load(), lineno=3906, col_offset=52), '_clamp', Load(), lineno=3906, col_offset=52), lineno=3906, col_offset=40)], lineno=3906, col_offset=26)], lineno=3906, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=3907, col_offset=19), '_raise_error', Load(), lineno=3907, col_offset=19), [Name('ConversionSyntax', Load(), lineno=3907, col_offset=37), Str('diagnostic info too long in NaN', lineno=3908, col_offset=37)], [], None, None, lineno=3907, col_offset=19), lineno=3907, col_offset=12)], [], lineno=3906, col_offset=8), Return(Call(Attribute(Name('d', Load(), lineno=3909, col_offset=15), '_fix', Load(), lineno=3909, col_offset=15), [Name('self', Load(), lineno=3909, col_offset=22)], [], None, None, lineno=3909, col_offset=15), lineno=3909, col_offset=8)], [], lineno=3894, col_offset=4), FunctionDef('create_decimal_from_float', arguments([Name('self', Param(), lineno=3911, col_offset=34), Name('f', Param(), lineno=3911, col_offset=40)], None, None, []), [Expr(Str("Creates a new Decimal instance from a float but rounding using self\n        as the context.\n\n        >>> context = Context(prec=5, rounding=ROUND_DOWN)\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Decimal('3.1415')\n        >>> context = Context(prec=5, traps=[Inexact])\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Traceback (most recent call last):\n            ...\n        Inexact: None\n\n        ", lineno=3924, col_offset=-1), lineno=3924, col_offset=-1), Assign([Name('d', Store(), lineno=3925, col_offset=8)], Call(Attribute(Name('Decimal', Load(), lineno=3925, col_offset=12), 'from_float', Load(), lineno=3925, col_offset=12), [Name('f', Load(), lineno=3925, col_offset=31)], [], None, None, lineno=3925, col_offset=12), lineno=3925, col_offset=8), Return(Call(Attribute(Name('d', Load(), lineno=3926, col_offset=15), '_fix', Load(), lineno=3926, col_offset=15), [Name('self', Load(), lineno=3926, col_offset=22)], [], None, None, lineno=3926, col_offset=15), lineno=3926, col_offset=8)], [], lineno=3911, col_offset=4), FunctionDef('abs', arguments([Name('self', Param(), lineno=3929, col_offset=12), Name('a', Param(), lineno=3929, col_offset=18)], None, None, []), [Expr(Str("Returns the absolute value of the operand.\n\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n\n        >>> ExtendedContext.abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.abs(Decimal('101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(-1)\n        Decimal('1')\n        ", lineno=3946, col_offset=-1), lineno=3946, col_offset=-1), Assign([Name('a', Store(), lineno=3947, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3947, col_offset=12), [Name('a', Load(), lineno=3947, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=3947, col_offset=38))], None, None, lineno=3947, col_offset=12), lineno=3947, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=3948, col_offset=15), '__abs__', Load(), lineno=3948, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=3948, col_offset=33))], None, None, lineno=3948, col_offset=15), lineno=3948, col_offset=8)], [], lineno=3929, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=3950, col_offset=12), Name('a', Param(), lineno=3950, col_offset=18), Name('b', Param(), lineno=3950, col_offset=21)], None, None, []), [Expr(Str("Return the sum of the two operands.\n\n        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))\n        Decimal('19.00')\n        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))\n        Decimal('1.02E+4')\n        >>> ExtendedContext.add(1, Decimal(2))\n        Decimal('3')\n        >>> ExtendedContext.add(Decimal(8), 5)\n        Decimal('13')\n        >>> ExtendedContext.add(5, 5)\n        Decimal('10')\n        ", lineno=3963, col_offset=-1), lineno=3963, col_offset=-1), Assign([Name('a', Store(), lineno=3964, col_offset=8)], Call(Name('_convert_other', Load(), lineno=3964, col_offset=12), [Name('a', Load(), lineno=3964, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=3964, col_offset=38))], None, None, lineno=3964, col_offset=12), lineno=3964, col_offset=8), Assign([Name('r', Store(), lineno=3965, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=3965, col_offset=12), '__add__', Load(), lineno=3965, col_offset=12), [Name('b', Load(), lineno=3965, col_offset=22)], [keyword('context', Name('self', Load(), lineno=3965, col_offset=33))], None, None, lineno=3965, col_offset=12), lineno=3965, col_offset=8), If(Compare(Name('r', Load(), lineno=3966, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=3966, col_offset=16)], lineno=3966, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=3967, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=3967, col_offset=28), Mod(), Name('b', Load(), lineno=3967, col_offset=64), lineno=3967, col_offset=28)], [], None, None, lineno=3967, col_offset=18), None, None, lineno=3967, col_offset=12)], [Return(Name('r', Load(), lineno=3969, col_offset=19), lineno=3969, col_offset=12)], lineno=3966, col_offset=8)], [], lineno=3950, col_offset=4), FunctionDef('_apply', arguments([Name('self', Param(), lineno=3971, col_offset=15), Name('a', Param(), lineno=3971, col_offset=21)], None, None, []), [Return(Call(Name('str', Load(), lineno=3972, col_offset=15), [Call(Attribute(Name('a', Load(), lineno=3972, col_offset=19), '_fix', Load(), lineno=3972, col_offset=19), [Name('self', Load(), lineno=3972, col_offset=26)], [], None, None, lineno=3972, col_offset=19)], [], None, None, lineno=3972, col_offset=15), lineno=3972, col_offset=8)], [], lineno=3971, col_offset=4), FunctionDef('canonical', arguments([Name('self', Param(), lineno=3974, col_offset=18), Name('a', Param(), lineno=3974, col_offset=24)], None, None, []), [Expr(Str("Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n\n        >>> ExtendedContext.canonical(Decimal('2.50'))\n        Decimal('2.50')\n        ", lineno=3982, col_offset=-1), lineno=3982, col_offset=-1), Return(Call(Attribute(Name('a', Load(), lineno=3983, col_offset=15), 'canonical', Load(), lineno=3983, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=3983, col_offset=35))], None, None, lineno=3983, col_offset=15), lineno=3983, col_offset=8)], [], lineno=3974, col_offset=4), FunctionDef('compare', arguments([Name('self', Param(), lineno=3985, col_offset=16), Name('a', Param(), lineno=3985, col_offset=22), Name('b', Param(), lineno=3985, col_offset=25)], None, None, []), [Expr(Str("Compares values numerically.\n\n        If the signs of the operands differ, a value representing each operand\n        ('-1' if the operand is less than zero, '0' if the operand is zero or\n        negative zero, or '1' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: '-1' if the result is less than zero, '0' if the result is\n        zero or negative zero, or '1' if the result is greater than zero.\n\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, Decimal(2))\n        Decimal('-1')\n        ", lineno=4017, col_offset=-1), lineno=4017, col_offset=-1), Assign([Name('a', Store(), lineno=4018, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4018, col_offset=12), [Name('a', Load(), lineno=4018, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4018, col_offset=38))], None, None, lineno=4018, col_offset=12), lineno=4018, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4019, col_offset=15), 'compare', Load(), lineno=4019, col_offset=15), [Name('b', Load(), lineno=4019, col_offset=25)], [keyword('context', Name('self', Load(), lineno=4019, col_offset=36))], None, None, lineno=4019, col_offset=15), lineno=4019, col_offset=8)], [], lineno=3985, col_offset=4), FunctionDef('compare_signal', arguments([Name('self', Param(), lineno=4021, col_offset=23), Name('a', Param(), lineno=4021, col_offset=29), Name('b', Param(), lineno=4021, col_offset=32)], None, None, []), [Expr(Str("Compares the values of the two operands numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print c.flags[InvalidOperation]\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print c.flags[InvalidOperation]\n        1\n        >>> c.compare_signal(-1, 2)\n        Decimal('-1')\n        >>> c.compare_signal(Decimal(-1), 2)\n        Decimal('-1')\n        >>> c.compare_signal(-1, Decimal(2))\n        Decimal('-1')\n        ", lineno=4052, col_offset=-1), lineno=4052, col_offset=-1), Assign([Name('a', Store(), lineno=4053, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4053, col_offset=12), [Name('a', Load(), lineno=4053, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4053, col_offset=38))], None, None, lineno=4053, col_offset=12), lineno=4053, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4054, col_offset=15), 'compare_signal', Load(), lineno=4054, col_offset=15), [Name('b', Load(), lineno=4054, col_offset=32)], [keyword('context', Name('self', Load(), lineno=4054, col_offset=43))], None, None, lineno=4054, col_offset=15), lineno=4054, col_offset=8)], [], lineno=4021, col_offset=4), FunctionDef('compare_total', arguments([Name('self', Param(), lineno=4056, col_offset=22), Name('a', Param(), lineno=4056, col_offset=28), Name('b', Param(), lineno=4056, col_offset=31)], None, None, []), [Expr(Str("Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))\n        Decimal('0')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))\n        Decimal('1')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, Decimal(2))\n        Decimal('-1')\n        ", lineno=4081, col_offset=-1), lineno=4081, col_offset=-1), Assign([Name('a', Store(), lineno=4082, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4082, col_offset=12), [Name('a', Load(), lineno=4082, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4082, col_offset=38))], None, None, lineno=4082, col_offset=12), lineno=4082, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4083, col_offset=15), 'compare_total', Load(), lineno=4083, col_offset=15), [Name('b', Load(), lineno=4083, col_offset=31)], [], None, None, lineno=4083, col_offset=15), lineno=4083, col_offset=8)], [], lineno=4056, col_offset=4), FunctionDef('compare_total_mag', arguments([Name('self', Param(), lineno=4085, col_offset=26), Name('a', Param(), lineno=4085, col_offset=32), Name('b', Param(), lineno=4085, col_offset=35)], None, None, []), [Expr(Str("Compares two operands using their abstract representation ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        ", lineno=4089, col_offset=-1), lineno=4089, col_offset=-1), Assign([Name('a', Store(), lineno=4090, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4090, col_offset=12), [Name('a', Load(), lineno=4090, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4090, col_offset=38))], None, None, lineno=4090, col_offset=12), lineno=4090, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4091, col_offset=15), 'compare_total_mag', Load(), lineno=4091, col_offset=15), [Name('b', Load(), lineno=4091, col_offset=35)], [], None, None, lineno=4091, col_offset=15), lineno=4091, col_offset=8)], [], lineno=4085, col_offset=4), FunctionDef('copy_abs', arguments([Name('self', Param(), lineno=4093, col_offset=17), Name('a', Param(), lineno=4093, col_offset=23)], None, None, []), [Expr(Str("Returns a copy of the operand with the sign set to 0.\n\n        >>> ExtendedContext.copy_abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.copy_abs(-1)\n        Decimal('1')\n        ", lineno=4102, col_offset=-1), lineno=4102, col_offset=-1), Assign([Name('a', Store(), lineno=4103, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4103, col_offset=12), [Name('a', Load(), lineno=4103, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4103, col_offset=38))], None, None, lineno=4103, col_offset=12), lineno=4103, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4104, col_offset=15), 'copy_abs', Load(), lineno=4104, col_offset=15), [], [], None, None, lineno=4104, col_offset=15), lineno=4104, col_offset=8)], [], lineno=4093, col_offset=4), FunctionDef('copy_decimal', arguments([Name('self', Param(), lineno=4106, col_offset=21), Name('a', Param(), lineno=4106, col_offset=27)], None, None, []), [Expr(Str("Returns a copy of the decimal object.\n\n        >>> ExtendedContext.copy_decimal(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))\n        Decimal('-1.00')\n        >>> ExtendedContext.copy_decimal(1)\n        Decimal('1')\n        ", lineno=4115, col_offset=-1), lineno=4115, col_offset=-1), Assign([Name('a', Store(), lineno=4116, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4116, col_offset=12), [Name('a', Load(), lineno=4116, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4116, col_offset=38))], None, None, lineno=4116, col_offset=12), lineno=4116, col_offset=8), Return(Call(Name('Decimal', Load(), lineno=4117, col_offset=15), [Name('a', Load(), lineno=4117, col_offset=23)], [], None, None, lineno=4117, col_offset=15), lineno=4117, col_offset=8)], [], lineno=4106, col_offset=4), FunctionDef('copy_negate', arguments([Name('self', Param(), lineno=4119, col_offset=20), Name('a', Param(), lineno=4119, col_offset=26)], None, None, []), [Expr(Str("Returns a copy of the operand with the sign inverted.\n\n        >>> ExtendedContext.copy_negate(Decimal('101.5'))\n        Decimal('-101.5')\n        >>> ExtendedContext.copy_negate(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.copy_negate(1)\n        Decimal('-1')\n        ", lineno=4128, col_offset=-1), lineno=4128, col_offset=-1), Assign([Name('a', Store(), lineno=4129, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4129, col_offset=12), [Name('a', Load(), lineno=4129, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4129, col_offset=38))], None, None, lineno=4129, col_offset=12), lineno=4129, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4130, col_offset=15), 'copy_negate', Load(), lineno=4130, col_offset=15), [], [], None, None, lineno=4130, col_offset=15), lineno=4130, col_offset=8)], [], lineno=4119, col_offset=4), FunctionDef('copy_sign', arguments([Name('self', Param(), lineno=4132, col_offset=18), Name('a', Param(), lineno=4132, col_offset=24), Name('b', Param(), lineno=4132, col_offset=27)], None, None, []), [Expr(Str("Copies the second operand's sign to the first one.\n\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(1, -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(Decimal(1), -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(1, Decimal(-2))\n        Decimal('-1')\n        ", lineno=4152, col_offset=-1), lineno=4152, col_offset=-1), Assign([Name('a', Store(), lineno=4153, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4153, col_offset=12), [Name('a', Load(), lineno=4153, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4153, col_offset=38))], None, None, lineno=4153, col_offset=12), lineno=4153, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4154, col_offset=15), 'copy_sign', Load(), lineno=4154, col_offset=15), [Name('b', Load(), lineno=4154, col_offset=27)], [], None, None, lineno=4154, col_offset=15), lineno=4154, col_offset=8)], [], lineno=4132, col_offset=4), FunctionDef('divide', arguments([Name('self', Param(), lineno=4156, col_offset=15), Name('a', Param(), lineno=4156, col_offset=21), Name('b', Param(), lineno=4156, col_offset=24)], None, None, []), [Expr(Str("Decimal division in a specified context.\n\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))\n        Decimal('0.333333333')\n        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))\n        Decimal('0.666666667')\n        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))\n        Decimal('2.5')\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))\n        Decimal('0.1')\n        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))\n        Decimal('4.00')\n        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))\n        Decimal('1.20')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))\n        Decimal('1000')\n        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))\n        Decimal('1.20E+6')\n        >>> ExtendedContext.divide(5, 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal(5), 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(5, Decimal(5))\n        Decimal('1')\n        ", lineno=4185, col_offset=-1), lineno=4185, col_offset=-1), Assign([Name('a', Store(), lineno=4186, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4186, col_offset=12), [Name('a', Load(), lineno=4186, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4186, col_offset=38))], None, None, lineno=4186, col_offset=12), lineno=4186, col_offset=8), Assign([Name('r', Store(), lineno=4187, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=4187, col_offset=12), '__div__', Load(), lineno=4187, col_offset=12), [Name('b', Load(), lineno=4187, col_offset=22)], [keyword('context', Name('self', Load(), lineno=4187, col_offset=33))], None, None, lineno=4187, col_offset=12), lineno=4187, col_offset=8), If(Compare(Name('r', Load(), lineno=4188, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=4188, col_offset=16)], lineno=4188, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=4189, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=4189, col_offset=28), Mod(), Name('b', Load(), lineno=4189, col_offset=64), lineno=4189, col_offset=28)], [], None, None, lineno=4189, col_offset=18), None, None, lineno=4189, col_offset=12)], [Return(Name('r', Load(), lineno=4191, col_offset=19), lineno=4191, col_offset=12)], lineno=4188, col_offset=8)], [], lineno=4156, col_offset=4), FunctionDef('divide_int', arguments([Name('self', Param(), lineno=4193, col_offset=19), Name('a', Param(), lineno=4193, col_offset=25), Name('b', Param(), lineno=4193, col_offset=28)], None, None, []), [Expr(Str("Divides two numbers and returns the integer part of the result.\n\n        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))\n        Decimal('0')\n        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal(10), 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, Decimal(3))\n        Decimal('3')\n        ", lineno=4208, col_offset=-1), lineno=4208, col_offset=-1), Assign([Name('a', Store(), lineno=4209, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4209, col_offset=12), [Name('a', Load(), lineno=4209, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4209, col_offset=38))], None, None, lineno=4209, col_offset=12), lineno=4209, col_offset=8), Assign([Name('r', Store(), lineno=4210, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=4210, col_offset=12), '__floordiv__', Load(), lineno=4210, col_offset=12), [Name('b', Load(), lineno=4210, col_offset=27)], [keyword('context', Name('self', Load(), lineno=4210, col_offset=38))], None, None, lineno=4210, col_offset=12), lineno=4210, col_offset=8), If(Compare(Name('r', Load(), lineno=4211, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=4211, col_offset=16)], lineno=4211, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=4212, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=4212, col_offset=28), Mod(), Name('b', Load(), lineno=4212, col_offset=64), lineno=4212, col_offset=28)], [], None, None, lineno=4212, col_offset=18), None, None, lineno=4212, col_offset=12)], [Return(Name('r', Load(), lineno=4214, col_offset=19), lineno=4214, col_offset=12)], lineno=4211, col_offset=8)], [], lineno=4193, col_offset=4), FunctionDef('divmod', arguments([Name('self', Param(), lineno=4216, col_offset=15), Name('a', Param(), lineno=4216, col_offset=21), Name('b', Param(), lineno=4216, col_offset=24)], None, None, []), [Expr(Str("Return (a // b, a % b).\n\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))\n        (Decimal('2'), Decimal('2'))\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(Decimal(8), 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        ", lineno=4229, col_offset=-1), lineno=4229, col_offset=-1), Assign([Name('a', Store(), lineno=4230, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4230, col_offset=12), [Name('a', Load(), lineno=4230, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4230, col_offset=38))], None, None, lineno=4230, col_offset=12), lineno=4230, col_offset=8), Assign([Name('r', Store(), lineno=4231, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=4231, col_offset=12), '__divmod__', Load(), lineno=4231, col_offset=12), [Name('b', Load(), lineno=4231, col_offset=25)], [keyword('context', Name('self', Load(), lineno=4231, col_offset=36))], None, None, lineno=4231, col_offset=12), lineno=4231, col_offset=8), If(Compare(Name('r', Load(), lineno=4232, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=4232, col_offset=16)], lineno=4232, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=4233, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=4233, col_offset=28), Mod(), Name('b', Load(), lineno=4233, col_offset=64), lineno=4233, col_offset=28)], [], None, None, lineno=4233, col_offset=18), None, None, lineno=4233, col_offset=12)], [Return(Name('r', Load(), lineno=4235, col_offset=19), lineno=4235, col_offset=12)], lineno=4232, col_offset=8)], [], lineno=4216, col_offset=4), FunctionDef('exp', arguments([Name('self', Param(), lineno=4237, col_offset=12), Name('a', Param(), lineno=4237, col_offset=18)], None, None, []), [Expr(Str("Returns e ** a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal('-Infinity'))\n        Decimal('0')\n        >>> c.exp(Decimal('-1'))\n        Decimal('0.367879441')\n        >>> c.exp(Decimal('0'))\n        Decimal('1')\n        >>> c.exp(Decimal('1'))\n        Decimal('2.71828183')\n        >>> c.exp(Decimal('0.693147181'))\n        Decimal('2.00000000')\n        >>> c.exp(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.exp(10)\n        Decimal('22026.4658')\n        ", lineno=4257, col_offset=-1), lineno=4257, col_offset=-1), Assign([Name('a', Store(), lineno=4258, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4258, col_offset=11), [Name('a', Load(), lineno=4258, col_offset=26)], [keyword('raiseit', Name('True', Load(), lineno=4258, col_offset=37))], None, None, lineno=4258, col_offset=11), lineno=4258, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4259, col_offset=15), 'exp', Load(), lineno=4259, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4259, col_offset=29))], None, None, lineno=4259, col_offset=15), lineno=4259, col_offset=8)], [], lineno=4237, col_offset=4), FunctionDef('fma', arguments([Name('self', Param(), lineno=4261, col_offset=12), Name('a', Param(), lineno=4261, col_offset=18), Name('b', Param(), lineno=4261, col_offset=21), Name('c', Param(), lineno=4261, col_offset=24)], None, None, []), [Expr(Str("Returns a multiplied by b, plus c.\n\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))\n        Decimal('22')\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))\n        Decimal('-8')\n        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))\n        Decimal('1.38435736E+12')\n        >>> ExtendedContext.fma(1, 3, 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, Decimal(3), 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, 3, Decimal(4))\n        Decimal('7')\n        ", lineno=4280, col_offset=-1), lineno=4280, col_offset=-1), Assign([Name('a', Store(), lineno=4281, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4281, col_offset=12), [Name('a', Load(), lineno=4281, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4281, col_offset=38))], None, None, lineno=4281, col_offset=12), lineno=4281, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4282, col_offset=15), 'fma', Load(), lineno=4282, col_offset=15), [Name('b', Load(), lineno=4282, col_offset=21), Name('c', Load(), lineno=4282, col_offset=24)], [keyword('context', Name('self', Load(), lineno=4282, col_offset=35))], None, None, lineno=4282, col_offset=15), lineno=4282, col_offset=8)], [], lineno=4261, col_offset=4), FunctionDef('is_canonical', arguments([Name('self', Param(), lineno=4284, col_offset=21), Name('a', Param(), lineno=4284, col_offset=27)], None, None, []), [Expr(Str("Return True if the operand is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        ", lineno=4292, col_offset=-1), lineno=4292, col_offset=-1), Return(Call(Attribute(Name('a', Load(), lineno=4293, col_offset=15), 'is_canonical', Load(), lineno=4293, col_offset=15), [], [], None, None, lineno=4293, col_offset=15), lineno=4293, col_offset=8)], [], lineno=4284, col_offset=4), FunctionDef('is_finite', arguments([Name('self', Param(), lineno=4295, col_offset=18), Name('a', Param(), lineno=4295, col_offset=24)], None, None, []), [Expr(Str("Return True if the operand is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_finite(1)\n        True\n        ", lineno=4313, col_offset=-1), lineno=4313, col_offset=-1), Assign([Name('a', Store(), lineno=4314, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4314, col_offset=12), [Name('a', Load(), lineno=4314, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4314, col_offset=38))], None, None, lineno=4314, col_offset=12), lineno=4314, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4315, col_offset=15), 'is_finite', Load(), lineno=4315, col_offset=15), [], [], None, None, lineno=4315, col_offset=15), lineno=4315, col_offset=8)], [], lineno=4295, col_offset=4), FunctionDef('is_infinite', arguments([Name('self', Param(), lineno=4317, col_offset=20), Name('a', Param(), lineno=4317, col_offset=26)], None, None, []), [Expr(Str("Return True if the operand is infinite; otherwise return False.\n\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_infinite(1)\n        False\n        ", lineno=4328, col_offset=-1), lineno=4328, col_offset=-1), Assign([Name('a', Store(), lineno=4329, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4329, col_offset=12), [Name('a', Load(), lineno=4329, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4329, col_offset=38))], None, None, lineno=4329, col_offset=12), lineno=4329, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4330, col_offset=15), 'is_infinite', Load(), lineno=4330, col_offset=15), [], [], None, None, lineno=4330, col_offset=15), lineno=4330, col_offset=8)], [], lineno=4317, col_offset=4), FunctionDef('is_nan', arguments([Name('self', Param(), lineno=4332, col_offset=15), Name('a', Param(), lineno=4332, col_offset=21)], None, None, []), [Expr(Str("Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        >>> ExtendedContext.is_nan(1)\n        False\n        ", lineno=4344, col_offset=-1), lineno=4344, col_offset=-1), Assign([Name('a', Store(), lineno=4345, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4345, col_offset=12), [Name('a', Load(), lineno=4345, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4345, col_offset=38))], None, None, lineno=4345, col_offset=12), lineno=4345, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4346, col_offset=15), 'is_nan', Load(), lineno=4346, col_offset=15), [], [], None, None, lineno=4346, col_offset=15), lineno=4346, col_offset=8)], [], lineno=4332, col_offset=4), FunctionDef('is_normal', arguments([Name('self', Param(), lineno=4348, col_offset=18), Name('a', Param(), lineno=4348, col_offset=24)], None, None, []), [Expr(Str("Return True if the operand is a normal number;\n        otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        >>> c.is_normal(1)\n        True\n        ", lineno=4367, col_offset=-1), lineno=4367, col_offset=-1), Assign([Name('a', Store(), lineno=4368, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4368, col_offset=12), [Name('a', Load(), lineno=4368, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4368, col_offset=38))], None, None, lineno=4368, col_offset=12), lineno=4368, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4369, col_offset=15), 'is_normal', Load(), lineno=4369, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4369, col_offset=35))], None, None, lineno=4369, col_offset=15), lineno=4369, col_offset=8)], [], lineno=4348, col_offset=4), FunctionDef('is_qnan', arguments([Name('self', Param(), lineno=4371, col_offset=16), Name('a', Param(), lineno=4371, col_offset=22)], None, None, []), [Expr(Str("Return True if the operand is a quiet NaN; otherwise return False.\n\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        >>> ExtendedContext.is_qnan(1)\n        False\n        ", lineno=4382, col_offset=-1), lineno=4382, col_offset=-1), Assign([Name('a', Store(), lineno=4383, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4383, col_offset=12), [Name('a', Load(), lineno=4383, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4383, col_offset=38))], None, None, lineno=4383, col_offset=12), lineno=4383, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4384, col_offset=15), 'is_qnan', Load(), lineno=4384, col_offset=15), [], [], None, None, lineno=4384, col_offset=15), lineno=4384, col_offset=8)], [], lineno=4371, col_offset=4), FunctionDef('is_signed', arguments([Name('self', Param(), lineno=4386, col_offset=18), Name('a', Param(), lineno=4386, col_offset=24)], None, None, []), [Expr(Str("Return True if the operand is negative; otherwise return False.\n\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        >>> ExtendedContext.is_signed(8)\n        False\n        >>> ExtendedContext.is_signed(-8)\n        True\n        ", lineno=4399, col_offset=-1), lineno=4399, col_offset=-1), Assign([Name('a', Store(), lineno=4400, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4400, col_offset=12), [Name('a', Load(), lineno=4400, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4400, col_offset=38))], None, None, lineno=4400, col_offset=12), lineno=4400, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4401, col_offset=15), 'is_signed', Load(), lineno=4401, col_offset=15), [], [], None, None, lineno=4401, col_offset=15), lineno=4401, col_offset=8)], [], lineno=4386, col_offset=4), FunctionDef('is_snan', arguments([Name('self', Param(), lineno=4403, col_offset=16), Name('a', Param(), lineno=4403, col_offset=22)], None, None, []), [Expr(Str("Return True if the operand is a signaling NaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        >>> ExtendedContext.is_snan(1)\n        False\n        ", lineno=4415, col_offset=-1), lineno=4415, col_offset=-1), Assign([Name('a', Store(), lineno=4416, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4416, col_offset=12), [Name('a', Load(), lineno=4416, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4416, col_offset=38))], None, None, lineno=4416, col_offset=12), lineno=4416, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4417, col_offset=15), 'is_snan', Load(), lineno=4417, col_offset=15), [], [], None, None, lineno=4417, col_offset=15), lineno=4417, col_offset=8)], [], lineno=4403, col_offset=4), FunctionDef('is_subnormal', arguments([Name('self', Param(), lineno=4419, col_offset=21), Name('a', Param(), lineno=4419, col_offset=27)], None, None, []), [Expr(Str("Return True if the operand is subnormal; otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        >>> c.is_subnormal(1)\n        False\n        ", lineno=4437, col_offset=-1), lineno=4437, col_offset=-1), Assign([Name('a', Store(), lineno=4438, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4438, col_offset=12), [Name('a', Load(), lineno=4438, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4438, col_offset=38))], None, None, lineno=4438, col_offset=12), lineno=4438, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4439, col_offset=15), 'is_subnormal', Load(), lineno=4439, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4439, col_offset=38))], None, None, lineno=4439, col_offset=15), lineno=4439, col_offset=8)], [], lineno=4419, col_offset=4), FunctionDef('is_zero', arguments([Name('self', Param(), lineno=4441, col_offset=16), Name('a', Param(), lineno=4441, col_offset=22)], None, None, []), [Expr(Str("Return True if the operand is a zero; otherwise return False.\n\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        >>> ExtendedContext.is_zero(1)\n        False\n        >>> ExtendedContext.is_zero(0)\n        True\n        ", lineno=4454, col_offset=-1), lineno=4454, col_offset=-1), Assign([Name('a', Store(), lineno=4455, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4455, col_offset=12), [Name('a', Load(), lineno=4455, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4455, col_offset=38))], None, None, lineno=4455, col_offset=12), lineno=4455, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4456, col_offset=15), 'is_zero', Load(), lineno=4456, col_offset=15), [], [], None, None, lineno=4456, col_offset=15), lineno=4456, col_offset=8)], [], lineno=4441, col_offset=4), FunctionDef('ln', arguments([Name('self', Param(), lineno=4458, col_offset=11), Name('a', Param(), lineno=4458, col_offset=17)], None, None, []), [Expr(Str("Returns the natural (base e) logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.ln(Decimal('1.000'))\n        Decimal('0')\n        >>> c.ln(Decimal('2.71828183'))\n        Decimal('1.00000000')\n        >>> c.ln(Decimal('10'))\n        Decimal('2.30258509')\n        >>> c.ln(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.ln(1)\n        Decimal('0')\n        ", lineno=4476, col_offset=-1), lineno=4476, col_offset=-1), Assign([Name('a', Store(), lineno=4477, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4477, col_offset=12), [Name('a', Load(), lineno=4477, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4477, col_offset=38))], None, None, lineno=4477, col_offset=12), lineno=4477, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4478, col_offset=15), 'ln', Load(), lineno=4478, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4478, col_offset=28))], None, None, lineno=4478, col_offset=15), lineno=4478, col_offset=8)], [], lineno=4458, col_offset=4), FunctionDef('log10', arguments([Name('self', Param(), lineno=4480, col_offset=14), Name('a', Param(), lineno=4480, col_offset=20)], None, None, []), [Expr(Str("Returns the base 10 logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.log10(Decimal('0.001'))\n        Decimal('-3')\n        >>> c.log10(Decimal('1.000'))\n        Decimal('0')\n        >>> c.log10(Decimal('2'))\n        Decimal('0.301029996')\n        >>> c.log10(Decimal('10'))\n        Decimal('1')\n        >>> c.log10(Decimal('70'))\n        Decimal('1.84509804')\n        >>> c.log10(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.log10(0)\n        Decimal('-Infinity')\n        >>> c.log10(1)\n        Decimal('0')\n        ", lineno=4504, col_offset=-1), lineno=4504, col_offset=-1), Assign([Name('a', Store(), lineno=4505, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4505, col_offset=12), [Name('a', Load(), lineno=4505, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4505, col_offset=38))], None, None, lineno=4505, col_offset=12), lineno=4505, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4506, col_offset=15), 'log10', Load(), lineno=4506, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4506, col_offset=31))], None, None, lineno=4506, col_offset=15), lineno=4506, col_offset=8)], [], lineno=4480, col_offset=4), FunctionDef('logb', arguments([Name('self', Param(), lineno=4508, col_offset=13), Name('a', Param(), lineno=4508, col_offset=19)], None, None, []), [Expr(Str(" Returns the exponent of the magnitude of the operand's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n\n        >>> ExtendedContext.logb(Decimal('250'))\n        Decimal('2')\n        >>> ExtendedContext.logb(Decimal('2.50'))\n        Decimal('0')\n        >>> ExtendedContext.logb(Decimal('0.03'))\n        Decimal('-2')\n        >>> ExtendedContext.logb(Decimal('0'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.logb(1)\n        Decimal('0')\n        >>> ExtendedContext.logb(10)\n        Decimal('1')\n        >>> ExtendedContext.logb(100)\n        Decimal('2')\n        ", lineno=4530, col_offset=-1), lineno=4530, col_offset=-1), Assign([Name('a', Store(), lineno=4531, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4531, col_offset=12), [Name('a', Load(), lineno=4531, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4531, col_offset=38))], None, None, lineno=4531, col_offset=12), lineno=4531, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4532, col_offset=15), 'logb', Load(), lineno=4532, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4532, col_offset=30))], None, None, lineno=4532, col_offset=15), lineno=4532, col_offset=8)], [], lineno=4508, col_offset=4), FunctionDef('logical_and', arguments([Name('self', Param(), lineno=4534, col_offset=20), Name('a', Param(), lineno=4534, col_offset=26), Name('b', Param(), lineno=4534, col_offset=29)], None, None, []), [Expr(Str("Applies the logical operation 'and' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))\n        Decimal('1000')\n        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))\n        Decimal('10')\n        >>> ExtendedContext.logical_and(110, 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(Decimal(110), 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(110, Decimal(1101))\n        Decimal('100')\n        ", lineno=4557, col_offset=-1), lineno=4557, col_offset=-1), Assign([Name('a', Store(), lineno=4558, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4558, col_offset=12), [Name('a', Load(), lineno=4558, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4558, col_offset=38))], None, None, lineno=4558, col_offset=12), lineno=4558, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4559, col_offset=15), 'logical_and', Load(), lineno=4559, col_offset=15), [Name('b', Load(), lineno=4559, col_offset=29)], [keyword('context', Name('self', Load(), lineno=4559, col_offset=40))], None, None, lineno=4559, col_offset=15), lineno=4559, col_offset=8)], [], lineno=4534, col_offset=4), FunctionDef('logical_invert', arguments([Name('self', Param(), lineno=4561, col_offset=23), Name('a', Param(), lineno=4561, col_offset=29)], None, None, []), [Expr(Str("Invert all the digits in the operand.\n\n        The operand must be a logical number.\n\n        >>> ExtendedContext.logical_invert(Decimal('0'))\n        Decimal('111111111')\n        >>> ExtendedContext.logical_invert(Decimal('1'))\n        Decimal('111111110')\n        >>> ExtendedContext.logical_invert(Decimal('111111111'))\n        Decimal('0')\n        >>> ExtendedContext.logical_invert(Decimal('101010101'))\n        Decimal('10101010')\n        >>> ExtendedContext.logical_invert(1101)\n        Decimal('111110010')\n        ", lineno=4576, col_offset=-1), lineno=4576, col_offset=-1), Assign([Name('a', Store(), lineno=4577, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4577, col_offset=12), [Name('a', Load(), lineno=4577, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4577, col_offset=38))], None, None, lineno=4577, col_offset=12), lineno=4577, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4578, col_offset=15), 'logical_invert', Load(), lineno=4578, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4578, col_offset=40))], None, None, lineno=4578, col_offset=15), lineno=4578, col_offset=8)], [], lineno=4561, col_offset=4), FunctionDef('logical_or', arguments([Name('self', Param(), lineno=4580, col_offset=19), Name('a', Param(), lineno=4580, col_offset=25), Name('b', Param(), lineno=4580, col_offset=28)], None, None, []), [Expr(Str("Applies the logical operation 'or' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(110, 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(Decimal(110), 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(110, Decimal(1101))\n        Decimal('1111')\n        ", lineno=4603, col_offset=-1), lineno=4603, col_offset=-1), Assign([Name('a', Store(), lineno=4604, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4604, col_offset=12), [Name('a', Load(), lineno=4604, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4604, col_offset=38))], None, None, lineno=4604, col_offset=12), lineno=4604, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4605, col_offset=15), 'logical_or', Load(), lineno=4605, col_offset=15), [Name('b', Load(), lineno=4605, col_offset=28)], [keyword('context', Name('self', Load(), lineno=4605, col_offset=39))], None, None, lineno=4605, col_offset=15), lineno=4605, col_offset=8)], [], lineno=4580, col_offset=4), FunctionDef('logical_xor', arguments([Name('self', Param(), lineno=4607, col_offset=20), Name('a', Param(), lineno=4607, col_offset=26), Name('b', Param(), lineno=4607, col_offset=29)], None, None, []), [Expr(Str("Applies the logical operation 'xor' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))\n        Decimal('110')\n        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))\n        Decimal('1101')\n        >>> ExtendedContext.logical_xor(110, 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(Decimal(110), 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(110, Decimal(1101))\n        Decimal('1011')\n        ", lineno=4630, col_offset=-1), lineno=4630, col_offset=-1), Assign([Name('a', Store(), lineno=4631, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4631, col_offset=12), [Name('a', Load(), lineno=4631, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4631, col_offset=38))], None, None, lineno=4631, col_offset=12), lineno=4631, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4632, col_offset=15), 'logical_xor', Load(), lineno=4632, col_offset=15), [Name('b', Load(), lineno=4632, col_offset=29)], [keyword('context', Name('self', Load(), lineno=4632, col_offset=40))], None, None, lineno=4632, col_offset=15), lineno=4632, col_offset=8)], [], lineno=4607, col_offset=4), FunctionDef('max', arguments([Name('self', Param(), lineno=4634, col_offset=12), Name('a', Param(), lineno=4634, col_offset=18), Name('b', Param(), lineno=4634, col_offset=21)], None, None, []), [Expr(Str("max compares two values numerically and returns the maximum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max(1, 2)\n        Decimal('2')\n        >>> ExtendedContext.max(Decimal(1), 2)\n        Decimal('2')\n        >>> ExtendedContext.max(1, Decimal(2))\n        Decimal('2')\n        ", lineno=4657, col_offset=-1), lineno=4657, col_offset=-1), Assign([Name('a', Store(), lineno=4658, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4658, col_offset=12), [Name('a', Load(), lineno=4658, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4658, col_offset=38))], None, None, lineno=4658, col_offset=12), lineno=4658, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4659, col_offset=15), 'max', Load(), lineno=4659, col_offset=15), [Name('b', Load(), lineno=4659, col_offset=21)], [keyword('context', Name('self', Load(), lineno=4659, col_offset=32))], None, None, lineno=4659, col_offset=15), lineno=4659, col_offset=8)], [], lineno=4634, col_offset=4), FunctionDef('max_mag', arguments([Name('self', Param(), lineno=4661, col_offset=16), Name('a', Param(), lineno=4661, col_offset=22), Name('b', Param(), lineno=4661, col_offset=25)], None, None, []), [Expr(Str("Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))\n        Decimal('-10')\n        >>> ExtendedContext.max_mag(1, -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(Decimal(1), -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(1, Decimal(-2))\n        Decimal('-2')\n        ", lineno=4674, col_offset=-1), lineno=4674, col_offset=-1), Assign([Name('a', Store(), lineno=4675, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4675, col_offset=12), [Name('a', Load(), lineno=4675, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4675, col_offset=38))], None, None, lineno=4675, col_offset=12), lineno=4675, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4676, col_offset=15), 'max_mag', Load(), lineno=4676, col_offset=15), [Name('b', Load(), lineno=4676, col_offset=25)], [keyword('context', Name('self', Load(), lineno=4676, col_offset=36))], None, None, lineno=4676, col_offset=15), lineno=4676, col_offset=8)], [], lineno=4661, col_offset=4), FunctionDef('min', arguments([Name('self', Param(), lineno=4678, col_offset=12), Name('a', Param(), lineno=4678, col_offset=18), Name('b', Param(), lineno=4678, col_offset=21)], None, None, []), [Expr(Str("min compares two values numerically and returns the minimum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))\n        Decimal('2')\n        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))\n        Decimal('-10')\n        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))\n        Decimal('1.0')\n        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.min(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.min(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.min(1, Decimal(29))\n        Decimal('1')\n        ", lineno=4701, col_offset=-1), lineno=4701, col_offset=-1), Assign([Name('a', Store(), lineno=4702, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4702, col_offset=12), [Name('a', Load(), lineno=4702, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4702, col_offset=38))], None, None, lineno=4702, col_offset=12), lineno=4702, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4703, col_offset=15), 'min', Load(), lineno=4703, col_offset=15), [Name('b', Load(), lineno=4703, col_offset=21)], [keyword('context', Name('self', Load(), lineno=4703, col_offset=32))], None, None, lineno=4703, col_offset=15), lineno=4703, col_offset=8)], [], lineno=4678, col_offset=4), FunctionDef('min_mag', arguments([Name('self', Param(), lineno=4705, col_offset=16), Name('a', Param(), lineno=4705, col_offset=22), Name('b', Param(), lineno=4705, col_offset=25)], None, None, []), [Expr(Str("Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))\n        Decimal('-2')\n        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))\n        Decimal('-3')\n        >>> ExtendedContext.min_mag(1, -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(Decimal(1), -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(1, Decimal(-2))\n        Decimal('1')\n        ", lineno=4718, col_offset=-1), lineno=4718, col_offset=-1), Assign([Name('a', Store(), lineno=4719, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4719, col_offset=12), [Name('a', Load(), lineno=4719, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4719, col_offset=38))], None, None, lineno=4719, col_offset=12), lineno=4719, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4720, col_offset=15), 'min_mag', Load(), lineno=4720, col_offset=15), [Name('b', Load(), lineno=4720, col_offset=25)], [keyword('context', Name('self', Load(), lineno=4720, col_offset=36))], None, None, lineno=4720, col_offset=15), lineno=4720, col_offset=8)], [], lineno=4705, col_offset=4), FunctionDef('minus', arguments([Name('self', Param(), lineno=4722, col_offset=14), Name('a', Param(), lineno=4722, col_offset=20)], None, None, []), [Expr(Str("Minus corresponds to unary prefix minus in Python.\n\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.minus(Decimal('1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.minus(Decimal('-1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.minus(1)\n        Decimal('-1')\n        ", lineno=4735, col_offset=-1), lineno=4735, col_offset=-1), Assign([Name('a', Store(), lineno=4736, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4736, col_offset=12), [Name('a', Load(), lineno=4736, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4736, col_offset=38))], None, None, lineno=4736, col_offset=12), lineno=4736, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4737, col_offset=15), '__neg__', Load(), lineno=4737, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4737, col_offset=33))], None, None, lineno=4737, col_offset=15), lineno=4737, col_offset=8)], [], lineno=4722, col_offset=4), FunctionDef('multiply', arguments([Name('self', Param(), lineno=4739, col_offset=17), Name('a', Param(), lineno=4739, col_offset=23), Name('b', Param(), lineno=4739, col_offset=26)], None, None, []), [Expr(Str("multiply multiplies two operands.\n\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together\n        ('long multiplication'), resulting in a number which may be as long as\n        the sum of the lengths of the two operands.\n\n        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))\n        Decimal('3.60')\n        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))\n        Decimal('21')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))\n        Decimal('0.72')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))\n        Decimal('-0.0')\n        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))\n        Decimal('4.28135971E+11')\n        >>> ExtendedContext.multiply(7, 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(Decimal(7), 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(7, Decimal(7))\n        Decimal('49')\n        ", lineno=4763, col_offset=-1), lineno=4763, col_offset=-1), Assign([Name('a', Store(), lineno=4764, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4764, col_offset=12), [Name('a', Load(), lineno=4764, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4764, col_offset=38))], None, None, lineno=4764, col_offset=12), lineno=4764, col_offset=8), Assign([Name('r', Store(), lineno=4765, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=4765, col_offset=12), '__mul__', Load(), lineno=4765, col_offset=12), [Name('b', Load(), lineno=4765, col_offset=22)], [keyword('context', Name('self', Load(), lineno=4765, col_offset=33))], None, None, lineno=4765, col_offset=12), lineno=4765, col_offset=8), If(Compare(Name('r', Load(), lineno=4766, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=4766, col_offset=16)], lineno=4766, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=4767, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=4767, col_offset=28), Mod(), Name('b', Load(), lineno=4767, col_offset=64), lineno=4767, col_offset=28)], [], None, None, lineno=4767, col_offset=18), None, None, lineno=4767, col_offset=12)], [Return(Name('r', Load(), lineno=4769, col_offset=19), lineno=4769, col_offset=12)], lineno=4766, col_offset=8)], [], lineno=4739, col_offset=4), FunctionDef('next_minus', arguments([Name('self', Param(), lineno=4771, col_offset=19), Name('a', Param(), lineno=4771, col_offset=25)], None, None, []), [Expr(Str("Returns the largest representable number smaller than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal('1'))\n        Decimal('0.999999999')\n        >>> c.next_minus(Decimal('1E-1007'))\n        Decimal('0E-1007')\n        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))\n        Decimal('-1.00000004')\n        >>> c.next_minus(Decimal('Infinity'))\n        Decimal('9.99999999E+999')\n        >>> c.next_minus(1)\n        Decimal('0.999999999')\n        ", lineno=4787, col_offset=-1), lineno=4787, col_offset=-1), Assign([Name('a', Store(), lineno=4788, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4788, col_offset=12), [Name('a', Load(), lineno=4788, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4788, col_offset=38))], None, None, lineno=4788, col_offset=12), lineno=4788, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4789, col_offset=15), 'next_minus', Load(), lineno=4789, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4789, col_offset=36))], None, None, lineno=4789, col_offset=15), lineno=4789, col_offset=8)], [], lineno=4771, col_offset=4), FunctionDef('next_plus', arguments([Name('self', Param(), lineno=4791, col_offset=18), Name('a', Param(), lineno=4791, col_offset=24)], None, None, []), [Expr(Str("Returns the smallest representable number larger than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal('1'))\n        Decimal('1.00000001')\n        >>> c.next_plus(Decimal('-1E-1007'))\n        Decimal('-0E-1007')\n        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))\n        Decimal('-1.00000002')\n        >>> c.next_plus(Decimal('-Infinity'))\n        Decimal('-9.99999999E+999')\n        >>> c.next_plus(1)\n        Decimal('1.00000001')\n        ", lineno=4807, col_offset=-1), lineno=4807, col_offset=-1), Assign([Name('a', Store(), lineno=4808, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4808, col_offset=12), [Name('a', Load(), lineno=4808, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4808, col_offset=38))], None, None, lineno=4808, col_offset=12), lineno=4808, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4809, col_offset=15), 'next_plus', Load(), lineno=4809, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4809, col_offset=35))], None, None, lineno=4809, col_offset=15), lineno=4809, col_offset=8)], [], lineno=4791, col_offset=4), FunctionDef('next_toward', arguments([Name('self', Param(), lineno=4811, col_offset=20), Name('a', Param(), lineno=4811, col_offset=26), Name('b', Param(), lineno=4811, col_offset=29)], None, None, []), [Expr(Str("Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal('1'), Decimal('2'))\n        Decimal('1.00000001')\n        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))\n        Decimal('-0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))\n        Decimal('-1.00000002')\n        >>> c.next_toward(Decimal('1'), Decimal('0'))\n        Decimal('0.999999999')\n        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))\n        Decimal('0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))\n        Decimal('-1.00000004')\n        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))\n        Decimal('-0.00')\n        >>> c.next_toward(0, 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(Decimal(0), 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(0, Decimal(1))\n        Decimal('1E-1007')\n        ", lineno=4842, col_offset=-1), lineno=4842, col_offset=-1), Assign([Name('a', Store(), lineno=4843, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4843, col_offset=12), [Name('a', Load(), lineno=4843, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4843, col_offset=38))], None, None, lineno=4843, col_offset=12), lineno=4843, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4844, col_offset=15), 'next_toward', Load(), lineno=4844, col_offset=15), [Name('b', Load(), lineno=4844, col_offset=29)], [keyword('context', Name('self', Load(), lineno=4844, col_offset=40))], None, None, lineno=4844, col_offset=15), lineno=4844, col_offset=8)], [], lineno=4811, col_offset=4), FunctionDef('normalize', arguments([Name('self', Param(), lineno=4846, col_offset=18), Name('a', Param(), lineno=4846, col_offset=24)], None, None, []), [Expr(Str("normalize reduces an operand to its simplest form.\n\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n\n        >>> ExtendedContext.normalize(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.normalize(Decimal('-2.0'))\n        Decimal('-2')\n        >>> ExtendedContext.normalize(Decimal('1.200'))\n        Decimal('1.2')\n        >>> ExtendedContext.normalize(Decimal('-120'))\n        Decimal('-1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('120.00'))\n        Decimal('1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('0.00'))\n        Decimal('0')\n        >>> ExtendedContext.normalize(6)\n        Decimal('6')\n        ", lineno=4866, col_offset=-1), lineno=4866, col_offset=-1), Assign([Name('a', Store(), lineno=4867, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4867, col_offset=12), [Name('a', Load(), lineno=4867, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4867, col_offset=38))], None, None, lineno=4867, col_offset=12), lineno=4867, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4868, col_offset=15), 'normalize', Load(), lineno=4868, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4868, col_offset=35))], None, None, lineno=4868, col_offset=15), lineno=4868, col_offset=8)], [], lineno=4846, col_offset=4), FunctionDef('number_class', arguments([Name('self', Param(), lineno=4870, col_offset=21), Name('a', Param(), lineno=4870, col_offset=27)], None, None, []), [Expr(Str("Returns an indication of the class of the operand.\n\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n\n        >>> c = Context(ExtendedContext)\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        >>> c.number_class(123)\n        '+Normal'\n        ", lineno=4916, col_offset=-1), lineno=4916, col_offset=-1), Assign([Name('a', Store(), lineno=4917, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4917, col_offset=12), [Name('a', Load(), lineno=4917, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4917, col_offset=38))], None, None, lineno=4917, col_offset=12), lineno=4917, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4918, col_offset=15), 'number_class', Load(), lineno=4918, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4918, col_offset=38))], None, None, lineno=4918, col_offset=15), lineno=4918, col_offset=8)], [], lineno=4870, col_offset=4), FunctionDef('plus', arguments([Name('self', Param(), lineno=4920, col_offset=13), Name('a', Param(), lineno=4920, col_offset=19)], None, None, []), [Expr(Str("Plus corresponds to unary prefix plus in Python.\n\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.plus(Decimal('1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.plus(Decimal('-1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.plus(-1)\n        Decimal('-1')\n        ", lineno=4933, col_offset=-1), lineno=4933, col_offset=-1), Assign([Name('a', Store(), lineno=4934, col_offset=8)], Call(Name('_convert_other', Load(), lineno=4934, col_offset=12), [Name('a', Load(), lineno=4934, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=4934, col_offset=38))], None, None, lineno=4934, col_offset=12), lineno=4934, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=4935, col_offset=15), '__pos__', Load(), lineno=4935, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=4935, col_offset=33))], None, None, lineno=4935, col_offset=15), lineno=4935, col_offset=8)], [], lineno=4920, col_offset=4), FunctionDef('power', arguments([Name('self', Param(), lineno=4937, col_offset=14), Name('a', Param(), lineno=4937, col_offset=20), Name('b', Param(), lineno=4937, col_offset=23), Name('modulo', Param(), lineno=4937, col_offset=26)], None, None, [Name('None', Load(), lineno=4937, col_offset=33)]), [Expr(Str("Raises a to the power of b, to modulo if given.\n\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in 'precision' digits.\n\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most 'precision' digits\n\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal('2'), Decimal('3'))\n        Decimal('8')\n        >>> c.power(Decimal('-2'), Decimal('3'))\n        Decimal('-8')\n        >>> c.power(Decimal('2'), Decimal('-3'))\n        Decimal('0.125')\n        >>> c.power(Decimal('1.7'), Decimal('8'))\n        Decimal('69.7575744')\n        >>> c.power(Decimal('10'), Decimal('0.301029996'))\n        Decimal('2.00000000')\n        >>> c.power(Decimal('Infinity'), Decimal('-1'))\n        Decimal('0')\n        >>> c.power(Decimal('Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('Infinity'), Decimal('1'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('-1'))\n        Decimal('-0')\n        >>> c.power(Decimal('-Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('-Infinity'), Decimal('1'))\n        Decimal('-Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('2'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('0'), Decimal('0'))\n        Decimal('NaN')\n\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))\n        Decimal('11')\n        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))\n        Decimal('-11')\n        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))\n        Decimal('1')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))\n        Decimal('11')\n        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))\n        Decimal('11729830')\n        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))\n        Decimal('-0')\n        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))\n        Decimal('1')\n        >>> ExtendedContext.power(7, 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(Decimal(7), 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(7, Decimal(7), 2)\n        Decimal('1')\n        ", lineno=5009, col_offset=-1), lineno=5009, col_offset=-1), Assign([Name('a', Store(), lineno=5010, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5010, col_offset=12), [Name('a', Load(), lineno=5010, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5010, col_offset=38))], None, None, lineno=5010, col_offset=12), lineno=5010, col_offset=8), Assign([Name('r', Store(), lineno=5011, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=5011, col_offset=12), '__pow__', Load(), lineno=5011, col_offset=12), [Name('b', Load(), lineno=5011, col_offset=22), Name('modulo', Load(), lineno=5011, col_offset=25)], [keyword('context', Name('self', Load(), lineno=5011, col_offset=41))], None, None, lineno=5011, col_offset=12), lineno=5011, col_offset=8), If(Compare(Name('r', Load(), lineno=5012, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=5012, col_offset=16)], lineno=5012, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=5013, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=5013, col_offset=28), Mod(), Name('b', Load(), lineno=5013, col_offset=64), lineno=5013, col_offset=28)], [], None, None, lineno=5013, col_offset=18), None, None, lineno=5013, col_offset=12)], [Return(Name('r', Load(), lineno=5015, col_offset=19), lineno=5015, col_offset=12)], lineno=5012, col_offset=8)], [], lineno=4937, col_offset=4), FunctionDef('quantize', arguments([Name('self', Param(), lineno=5017, col_offset=17), Name('a', Param(), lineno=5017, col_offset=23), Name('b', Param(), lineno=5017, col_offset=26)], None, None, []), [Expr(Str("Returns a value equal to 'a' (rounded), having the exponent of 'b'.\n\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))\n        Decimal('2.170')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))\n        Decimal('2.17')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))\n        Decimal('2.2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))\n        Decimal('2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))\n        Decimal('0E+1')\n        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))\n        Decimal('-0')\n        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))\n        Decimal('-0E+5')\n        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))\n        Decimal('217.0')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))\n        Decimal('217')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))\n        Decimal('2.2E+2')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))\n        Decimal('2E+2')\n        >>> ExtendedContext.quantize(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(1, Decimal(2))\n        Decimal('1')\n        ", lineno=5071, col_offset=-1), lineno=5071, col_offset=-1), Assign([Name('a', Store(), lineno=5072, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5072, col_offset=12), [Name('a', Load(), lineno=5072, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5072, col_offset=38))], None, None, lineno=5072, col_offset=12), lineno=5072, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5073, col_offset=15), 'quantize', Load(), lineno=5073, col_offset=15), [Name('b', Load(), lineno=5073, col_offset=26)], [keyword('context', Name('self', Load(), lineno=5073, col_offset=37))], None, None, lineno=5073, col_offset=15), lineno=5073, col_offset=8)], [], lineno=5017, col_offset=4), FunctionDef('radix', arguments([Name('self', Param(), lineno=5075, col_offset=14)], None, None, []), [Expr(Str("Just returns 10, as this is Decimal, :)\n\n        >>> ExtendedContext.radix()\n        Decimal('10')\n        ", lineno=5080, col_offset=-1), lineno=5080, col_offset=-1), Return(Call(Name('Decimal', Load(), lineno=5081, col_offset=15), [Num(10, lineno=5081, col_offset=23)], [], None, None, lineno=5081, col_offset=15), lineno=5081, col_offset=8)], [], lineno=5075, col_offset=4), FunctionDef('remainder', arguments([Name('self', Param(), lineno=5083, col_offset=18), Name('a', Param(), lineno=5083, col_offset=24), Name('b', Param(), lineno=5083, col_offset=27)], None, None, []), [Expr(Str("Returns the remainder from integer division.\n\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))\n        Decimal('2.1')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))\n        Decimal('1.0')\n        >>> ExtendedContext.remainder(22, 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(Decimal(22), 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(22, Decimal(6))\n        Decimal('4')\n        ", lineno=5113, col_offset=-1), lineno=5113, col_offset=-1), Assign([Name('a', Store(), lineno=5114, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5114, col_offset=12), [Name('a', Load(), lineno=5114, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5114, col_offset=38))], None, None, lineno=5114, col_offset=12), lineno=5114, col_offset=8), Assign([Name('r', Store(), lineno=5115, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=5115, col_offset=12), '__mod__', Load(), lineno=5115, col_offset=12), [Name('b', Load(), lineno=5115, col_offset=22)], [keyword('context', Name('self', Load(), lineno=5115, col_offset=33))], None, None, lineno=5115, col_offset=12), lineno=5115, col_offset=8), If(Compare(Name('r', Load(), lineno=5116, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=5116, col_offset=16)], lineno=5116, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=5117, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=5117, col_offset=28), Mod(), Name('b', Load(), lineno=5117, col_offset=64), lineno=5117, col_offset=28)], [], None, None, lineno=5117, col_offset=18), None, None, lineno=5117, col_offset=12)], [Return(Name('r', Load(), lineno=5119, col_offset=19), lineno=5119, col_offset=12)], lineno=5116, col_offset=8)], [], lineno=5083, col_offset=4), FunctionDef('remainder_near', arguments([Name('self', Param(), lineno=5121, col_offset=23), Name('a', Param(), lineno=5121, col_offset=29), Name('b', Param(), lineno=5121, col_offset=32)], None, None, []), [Expr(Str('Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal(\'-0.9\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'6\'))\n        Decimal(\'-2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal(\'1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal(\'-1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal(\'0.2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal(\'0.1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal(\'-0.3\')\n        >>> ExtendedContext.remainder_near(3, 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(Decimal(3), 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(3, Decimal(11))\n        Decimal(\'3\')\n        ', lineno=5151, col_offset=-1), lineno=5151, col_offset=-1), Assign([Name('a', Store(), lineno=5152, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5152, col_offset=12), [Name('a', Load(), lineno=5152, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5152, col_offset=38))], None, None, lineno=5152, col_offset=12), lineno=5152, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5153, col_offset=15), 'remainder_near', Load(), lineno=5153, col_offset=15), [Name('b', Load(), lineno=5153, col_offset=32)], [keyword('context', Name('self', Load(), lineno=5153, col_offset=43))], None, None, lineno=5153, col_offset=15), lineno=5153, col_offset=8)], [], lineno=5121, col_offset=4), FunctionDef('rotate', arguments([Name('self', Param(), lineno=5155, col_offset=15), Name('a', Param(), lineno=5155, col_offset=21), Name('b', Param(), lineno=5155, col_offset=24)], None, None, []), [Expr(Str("Returns a rotated copy of a, b times.\n\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n\n        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))\n        Decimal('400000003')\n        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))\n        Decimal('12')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))\n        Decimal('891234567')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678912')\n        >>> ExtendedContext.rotate(1333333, 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(Decimal(1333333), 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(1333333, Decimal(1))\n        Decimal('13333330')\n        ", lineno=5180, col_offset=-1), lineno=5180, col_offset=-1), Assign([Name('a', Store(), lineno=5181, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5181, col_offset=12), [Name('a', Load(), lineno=5181, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5181, col_offset=38))], None, None, lineno=5181, col_offset=12), lineno=5181, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5182, col_offset=15), 'rotate', Load(), lineno=5182, col_offset=15), [Name('b', Load(), lineno=5182, col_offset=24)], [keyword('context', Name('self', Load(), lineno=5182, col_offset=35))], None, None, lineno=5182, col_offset=15), lineno=5182, col_offset=8)], [], lineno=5155, col_offset=4), FunctionDef('same_quantum', arguments([Name('self', Param(), lineno=5184, col_offset=21), Name('a', Param(), lineno=5184, col_offset=27), Name('b', Param(), lineno=5184, col_offset=30)], None, None, []), [Expr(Str("Returns True if the two operands have the same exponent.\n\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        >>> ExtendedContext.same_quantum(10000, -1)\n        True\n        >>> ExtendedContext.same_quantum(Decimal(10000), -1)\n        True\n        >>> ExtendedContext.same_quantum(10000, Decimal(-1))\n        True\n        ", lineno=5204, col_offset=-1), lineno=5204, col_offset=-1), Assign([Name('a', Store(), lineno=5205, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5205, col_offset=12), [Name('a', Load(), lineno=5205, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5205, col_offset=38))], None, None, lineno=5205, col_offset=12), lineno=5205, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5206, col_offset=15), 'same_quantum', Load(), lineno=5206, col_offset=15), [Name('b', Load(), lineno=5206, col_offset=30)], [], None, None, lineno=5206, col_offset=15), lineno=5206, col_offset=8)], [], lineno=5184, col_offset=4), FunctionDef('scaleb', arguments([Name('self', Param(), lineno=5208, col_offset=16), Name('a', Param(), lineno=5208, col_offset=22), Name('b', Param(), lineno=5208, col_offset=25)], None, None, []), [Expr(Str("Returns the first operand after adding the second value its exp.\n\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))\n        Decimal('0.0750')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))\n        Decimal('7.50')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))\n        Decimal('7.50E+3')\n        >>> ExtendedContext.scaleb(1, 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(Decimal(1), 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(1, Decimal(4))\n        Decimal('1E+4')\n        ", lineno=5223, col_offset=-1), lineno=5223, col_offset=-1), Assign([Name('a', Store(), lineno=5224, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5224, col_offset=12), [Name('a', Load(), lineno=5224, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5224, col_offset=38))], None, None, lineno=5224, col_offset=12), lineno=5224, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5225, col_offset=15), 'scaleb', Load(), lineno=5225, col_offset=15), [Name('b', Load(), lineno=5225, col_offset=24)], [keyword('context', Name('self', Load(), lineno=5225, col_offset=35))], None, None, lineno=5225, col_offset=15), lineno=5225, col_offset=8)], [], lineno=5208, col_offset=4), FunctionDef('shift', arguments([Name('self', Param(), lineno=5227, col_offset=14), Name('a', Param(), lineno=5227, col_offset=20), Name('b', Param(), lineno=5227, col_offset=23)], None, None, []), [Expr(Str("Returns a shifted copy of a, b times.\n\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n\n        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))\n        Decimal('400000000')\n        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))\n        Decimal('0')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))\n        Decimal('1234567')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678900')\n        >>> ExtendedContext.shift(88888888, 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(Decimal(88888888), 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(88888888, Decimal(2))\n        Decimal('888888800')\n        ", lineno=5253, col_offset=-1), lineno=5253, col_offset=-1), Assign([Name('a', Store(), lineno=5254, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5254, col_offset=12), [Name('a', Load(), lineno=5254, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5254, col_offset=38))], None, None, lineno=5254, col_offset=12), lineno=5254, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5255, col_offset=15), 'shift', Load(), lineno=5255, col_offset=15), [Name('b', Load(), lineno=5255, col_offset=23)], [keyword('context', Name('self', Load(), lineno=5255, col_offset=34))], None, None, lineno=5255, col_offset=15), lineno=5255, col_offset=8)], [], lineno=5227, col_offset=4), FunctionDef('sqrt', arguments([Name('self', Param(), lineno=5257, col_offset=13), Name('a', Param(), lineno=5257, col_offset=19)], None, None, []), [Expr(Str("Square root of a non-negative number to context precision.\n\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n\n        >>> ExtendedContext.sqrt(Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.sqrt(Decimal('-0'))\n        Decimal('-0')\n        >>> ExtendedContext.sqrt(Decimal('0.39'))\n        Decimal('0.624499800')\n        >>> ExtendedContext.sqrt(Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.sqrt(Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.sqrt(Decimal('1.0'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('1.00'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('7'))\n        Decimal('2.64575131')\n        >>> ExtendedContext.sqrt(Decimal('10'))\n        Decimal('3.16227766')\n        >>> ExtendedContext.sqrt(2)\n        Decimal('1.41421356')\n        >>> ExtendedContext.prec\n        9\n        ", lineno=5285, col_offset=-1), lineno=5285, col_offset=-1), Assign([Name('a', Store(), lineno=5286, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5286, col_offset=12), [Name('a', Load(), lineno=5286, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5286, col_offset=38))], None, None, lineno=5286, col_offset=12), lineno=5286, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5287, col_offset=15), 'sqrt', Load(), lineno=5287, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=5287, col_offset=30))], None, None, lineno=5287, col_offset=15), lineno=5287, col_offset=8)], [], lineno=5257, col_offset=4), FunctionDef('subtract', arguments([Name('self', Param(), lineno=5289, col_offset=17), Name('a', Param(), lineno=5289, col_offset=23), Name('b', Param(), lineno=5289, col_offset=26)], None, None, []), [Expr(Str("Return the difference between the two operands.\n\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))\n        Decimal('0.23')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))\n        Decimal('0.00')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))\n        Decimal('-0.77')\n        >>> ExtendedContext.subtract(8, 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(Decimal(8), 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(8, Decimal(5))\n        Decimal('3')\n        ", lineno=5304, col_offset=-1), lineno=5304, col_offset=-1), Assign([Name('a', Store(), lineno=5305, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5305, col_offset=12), [Name('a', Load(), lineno=5305, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5305, col_offset=38))], None, None, lineno=5305, col_offset=12), lineno=5305, col_offset=8), Assign([Name('r', Store(), lineno=5306, col_offset=8)], Call(Attribute(Name('a', Load(), lineno=5306, col_offset=12), '__sub__', Load(), lineno=5306, col_offset=12), [Name('b', Load(), lineno=5306, col_offset=22)], [keyword('context', Name('self', Load(), lineno=5306, col_offset=33))], None, None, lineno=5306, col_offset=12), lineno=5306, col_offset=8), If(Compare(Name('r', Load(), lineno=5307, col_offset=11), [Is()], [Name('NotImplemented', Load(), lineno=5307, col_offset=16)], lineno=5307, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=5308, col_offset=18), [BinOp(Str('Unable to convert %s to Decimal', lineno=5308, col_offset=28), Mod(), Name('b', Load(), lineno=5308, col_offset=64), lineno=5308, col_offset=28)], [], None, None, lineno=5308, col_offset=18), None, None, lineno=5308, col_offset=12)], [Return(Name('r', Load(), lineno=5310, col_offset=19), lineno=5310, col_offset=12)], lineno=5307, col_offset=8)], [], lineno=5289, col_offset=4), FunctionDef('to_eng_string', arguments([Name('self', Param(), lineno=5312, col_offset=22), Name('a', Param(), lineno=5312, col_offset=28)], None, None, []), [Expr(Str('Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        ', lineno=5316, col_offset=-1), lineno=5316, col_offset=-1), Assign([Name('a', Store(), lineno=5317, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5317, col_offset=12), [Name('a', Load(), lineno=5317, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5317, col_offset=38))], None, None, lineno=5317, col_offset=12), lineno=5317, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5318, col_offset=15), 'to_eng_string', Load(), lineno=5318, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=5318, col_offset=39))], None, None, lineno=5318, col_offset=15), lineno=5318, col_offset=8)], [], lineno=5312, col_offset=4), FunctionDef('to_sci_string', arguments([Name('self', Param(), lineno=5320, col_offset=22), Name('a', Param(), lineno=5320, col_offset=28)], None, None, []), [Expr(Str('Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        ', lineno=5324, col_offset=-1), lineno=5324, col_offset=-1), Assign([Name('a', Store(), lineno=5325, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5325, col_offset=12), [Name('a', Load(), lineno=5325, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5325, col_offset=38))], None, None, lineno=5325, col_offset=12), lineno=5325, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5326, col_offset=15), '__str__', Load(), lineno=5326, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=5326, col_offset=33))], None, None, lineno=5326, col_offset=15), lineno=5326, col_offset=8)], [], lineno=5320, col_offset=4), FunctionDef('to_integral_exact', arguments([Name('self', Param(), lineno=5328, col_offset=26), Name('a', Param(), lineno=5328, col_offset=32)], None, None, []), [Expr(Str("Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n\n        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_exact(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))\n        Decimal('-Infinity')\n        ", lineno=5354, col_offset=-1), lineno=5354, col_offset=-1), Assign([Name('a', Store(), lineno=5355, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5355, col_offset=12), [Name('a', Load(), lineno=5355, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5355, col_offset=38))], None, None, lineno=5355, col_offset=12), lineno=5355, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5356, col_offset=15), 'to_integral_exact', Load(), lineno=5356, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=5356, col_offset=43))], None, None, lineno=5356, col_offset=15), lineno=5356, col_offset=8)], [], lineno=5328, col_offset=4), FunctionDef('to_integral_value', arguments([Name('self', Param(), lineno=5358, col_offset=26), Name('a', Param(), lineno=5358, col_offset=32)], None, None, []), [Expr(Str("Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n\n        >>> ExtendedContext.to_integral_value(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_value(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))\n        Decimal('-Infinity')\n        ", lineno=5383, col_offset=-1), lineno=5383, col_offset=-1), Assign([Name('a', Store(), lineno=5384, col_offset=8)], Call(Name('_convert_other', Load(), lineno=5384, col_offset=12), [Name('a', Load(), lineno=5384, col_offset=27)], [keyword('raiseit', Name('True', Load(), lineno=5384, col_offset=38))], None, None, lineno=5384, col_offset=12), lineno=5384, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=5385, col_offset=15), 'to_integral_value', Load(), lineno=5385, col_offset=15), [], [keyword('context', Name('self', Load(), lineno=5385, col_offset=43))], None, None, lineno=5385, col_offset=15), lineno=5385, col_offset=8)], [], lineno=5358, col_offset=4), Assign([Name('to_integral', Store(), lineno=5388, col_offset=4)], Name('to_integral_value', Load(), lineno=5388, col_offset=18), lineno=5388, col_offset=4)], [], lineno=3735, col_offset=0), ClassDef('_WorkRep', [Name('object', Load(), lineno=5390, col_offset=15)], [Assign([Name('__slots__', Store(), lineno=5391, col_offset=4)], Tuple([Str('sign', lineno=5391, col_offset=17), Str('int', lineno=5391, col_offset=24), Str('exp', lineno=5391, col_offset=30)], Load(), lineno=5391, col_offset=17), lineno=5391, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=5396, col_offset=17), Name('value', Param(), lineno=5396, col_offset=23)], None, None, [Name('None', Load(), lineno=5396, col_offset=29)]), [If(Compare(Name('value', Load(), lineno=5397, col_offset=11), [Is()], [Name('None', Load(), lineno=5397, col_offset=20)], lineno=5397, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=5398, col_offset=12), 'sign', Store(), lineno=5398, col_offset=12)], Name('None', Load(), lineno=5398, col_offset=24), lineno=5398, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5399, col_offset=12), 'int', Store(), lineno=5399, col_offset=12)], Num(0, lineno=5399, col_offset=23), lineno=5399, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5400, col_offset=12), 'exp', Store(), lineno=5400, col_offset=12)], Name('None', Load(), lineno=5400, col_offset=23), lineno=5400, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=5401, col_offset=13), [Name('value', Load(), lineno=5401, col_offset=24), Name('Decimal', Load(), lineno=5401, col_offset=31)], [], None, None, lineno=5401, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=5402, col_offset=12), 'sign', Store(), lineno=5402, col_offset=12)], Attribute(Name('value', Load(), lineno=5402, col_offset=24), '_sign', Load(), lineno=5402, col_offset=24), lineno=5402, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5403, col_offset=12), 'int', Store(), lineno=5403, col_offset=12)], Call(Name('int', Load(), lineno=5403, col_offset=23), [Attribute(Name('value', Load(), lineno=5403, col_offset=27), '_int', Load(), lineno=5403, col_offset=27)], [], None, None, lineno=5403, col_offset=23), lineno=5403, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5404, col_offset=12), 'exp', Store(), lineno=5404, col_offset=12)], Attribute(Name('value', Load(), lineno=5404, col_offset=23), '_exp', Load(), lineno=5404, col_offset=23), lineno=5404, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=5407, col_offset=12), 'sign', Store(), lineno=5407, col_offset=12)], Subscript(Name('value', Load(), lineno=5407, col_offset=24), Index(Num(0, lineno=5407, col_offset=30)), Load(), lineno=5407, col_offset=24), lineno=5407, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5408, col_offset=12), 'int', Store(), lineno=5408, col_offset=12)], Subscript(Name('value', Load(), lineno=5408, col_offset=23), Index(Num(1, lineno=5408, col_offset=29)), Load(), lineno=5408, col_offset=23), lineno=5408, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5409, col_offset=12), 'exp', Store(), lineno=5409, col_offset=12)], Subscript(Name('value', Load(), lineno=5409, col_offset=23), Index(Num(2, lineno=5409, col_offset=29)), Load(), lineno=5409, col_offset=23), lineno=5409, col_offset=12)], lineno=5401, col_offset=13)], lineno=5397, col_offset=8)], [], lineno=5396, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=5411, col_offset=17)], None, None, []), [Return(BinOp(Str('(%r, %r, %r)', lineno=5412, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=5412, col_offset=33), 'sign', Load(), lineno=5412, col_offset=33), Attribute(Name('self', Load(), lineno=5412, col_offset=44), 'int', Load(), lineno=5412, col_offset=44), Attribute(Name('self', Load(), lineno=5412, col_offset=54), 'exp', Load(), lineno=5412, col_offset=54)], Load(), lineno=5412, col_offset=33), lineno=5412, col_offset=15), lineno=5412, col_offset=8)], [], lineno=5411, col_offset=4), Assign([Name('__str__', Store(), lineno=5414, col_offset=4)], Name('__repr__', Load(), lineno=5414, col_offset=14), lineno=5414, col_offset=4)], [], lineno=5390, col_offset=0), FunctionDef('_normalize', arguments([Name('op1', Param(), lineno=5418, col_offset=15), Name('op2', Param(), lineno=5418, col_offset=20), Name('prec', Param(), lineno=5418, col_offset=25)], None, None, [Num(0, lineno=5418, col_offset=32)]), [Expr(Str('Normalizes op1, op2 to have the same exp and length of coefficient.\n\n    Done during addition.\n    ', lineno=5422, col_offset=-1), lineno=5422, col_offset=-1), If(Compare(Attribute(Name('op1', Load(), lineno=5423, col_offset=7), 'exp', Load(), lineno=5423, col_offset=7), [Lt()], [Attribute(Name('op2', Load(), lineno=5423, col_offset=17), 'exp', Load(), lineno=5423, col_offset=17)], lineno=5423, col_offset=7), [Assign([Name('tmp', Store(), lineno=5424, col_offset=8)], Name('op2', Load(), lineno=5424, col_offset=14), lineno=5424, col_offset=8), Assign([Name('other', Store(), lineno=5425, col_offset=8)], Name('op1', Load(), lineno=5425, col_offset=16), lineno=5425, col_offset=8)], [Assign([Name('tmp', Store(), lineno=5427, col_offset=8)], Name('op1', Load(), lineno=5427, col_offset=14), lineno=5427, col_offset=8), Assign([Name('other', Store(), lineno=5428, col_offset=8)], Name('op2', Load(), lineno=5428, col_offset=16), lineno=5428, col_offset=8)], lineno=5423, col_offset=4), Assign([Name('tmp_len', Store(), lineno=5435, col_offset=4)], Call(Name('len', Load(), lineno=5435, col_offset=14), [Call(Name('str', Load(), lineno=5435, col_offset=18), [Attribute(Name('tmp', Load(), lineno=5435, col_offset=22), 'int', Load(), lineno=5435, col_offset=22)], [], None, None, lineno=5435, col_offset=18)], [], None, None, lineno=5435, col_offset=14), lineno=5435, col_offset=4), Assign([Name('other_len', Store(), lineno=5436, col_offset=4)], Call(Name('len', Load(), lineno=5436, col_offset=16), [Call(Name('str', Load(), lineno=5436, col_offset=20), [Attribute(Name('other', Load(), lineno=5436, col_offset=24), 'int', Load(), lineno=5436, col_offset=24)], [], None, None, lineno=5436, col_offset=20)], [], None, None, lineno=5436, col_offset=16), lineno=5436, col_offset=4), Assign([Name('exp', Store(), lineno=5437, col_offset=4)], BinOp(Attribute(Name('tmp', Load(), lineno=5437, col_offset=10), 'exp', Load(), lineno=5437, col_offset=10), Add(), Call(Name('min', Load(), lineno=5437, col_offset=20), [Num(-1, lineno=5437, col_offset=25), BinOp(BinOp(Name('tmp_len', Load(), lineno=5437, col_offset=28), Sub(), Name('prec', Load(), lineno=5437, col_offset=38), lineno=5437, col_offset=28), Sub(), Num(2, lineno=5437, col_offset=45), lineno=5437, col_offset=43)], [], None, None, lineno=5437, col_offset=20), lineno=5437, col_offset=10), lineno=5437, col_offset=4), If(Compare(BinOp(BinOp(Name('other_len', Load(), lineno=5438, col_offset=7), Add(), Attribute(Name('other', Load(), lineno=5438, col_offset=19), 'exp', Load(), lineno=5438, col_offset=19), lineno=5438, col_offset=7), Sub(), Num(1, lineno=5438, col_offset=31), lineno=5438, col_offset=29), [Lt()], [Name('exp', Load(), lineno=5438, col_offset=35)], lineno=5438, col_offset=7), [Assign([Attribute(Name('other', Load(), lineno=5439, col_offset=8), 'int', Store(), lineno=5439, col_offset=8)], Num(1, lineno=5439, col_offset=20), lineno=5439, col_offset=8), Assign([Attribute(Name('other', Load(), lineno=5440, col_offset=8), 'exp', Store(), lineno=5440, col_offset=8)], Name('exp', Load(), lineno=5440, col_offset=20), lineno=5440, col_offset=8)], [], lineno=5438, col_offset=4), AugAssign(Attribute(Name('tmp', Load(), lineno=5442, col_offset=4), 'int', Store(), lineno=5442, col_offset=4), Mult(), BinOp(Num(10, lineno=5442, col_offset=15), Pow(), BinOp(Attribute(Name('tmp', Load(), lineno=5442, col_offset=22), 'exp', Load(), lineno=5442, col_offset=22), Sub(), Attribute(Name('other', Load(), lineno=5442, col_offset=32), 'exp', Load(), lineno=5442, col_offset=32), lineno=5442, col_offset=22), lineno=5442, col_offset=15), lineno=5442, col_offset=4), Assign([Attribute(Name('tmp', Load(), lineno=5443, col_offset=4), 'exp', Store(), lineno=5443, col_offset=4)], Attribute(Name('other', Load(), lineno=5443, col_offset=14), 'exp', Load(), lineno=5443, col_offset=14), lineno=5443, col_offset=4), Return(Tuple([Name('op1', Load(), lineno=5444, col_offset=11), Name('op2', Load(), lineno=5444, col_offset=16)], Load(), lineno=5444, col_offset=11), lineno=5444, col_offset=4)], [], lineno=5418, col_offset=0), FunctionDef('_nbits', arguments([Name('n', Param(), lineno=5453, col_offset=11), Name('correction', Param(), lineno=5453, col_offset=14)], None, None, [Dict([Str('0', lineno=5454, col_offset=8), Str('1', lineno=5454, col_offset=16), Str('2', lineno=5454, col_offset=24), Str('3', lineno=5454, col_offset=32), Str('4', lineno=5455, col_offset=8), Str('5', lineno=5455, col_offset=16), Str('6', lineno=5455, col_offset=24), Str('7', lineno=5455, col_offset=32), Str('8', lineno=5456, col_offset=8), Str('9', lineno=5456, col_offset=16), Str('a', lineno=5456, col_offset=24), Str('b', lineno=5456, col_offset=32), Str('c', lineno=5457, col_offset=8), Str('d', lineno=5457, col_offset=16), Str('e', lineno=5457, col_offset=24), Str('f', lineno=5457, col_offset=32)], [Num(4, lineno=5454, col_offset=13), Num(3, lineno=5454, col_offset=21), Num(2, lineno=5454, col_offset=29), Num(2, lineno=5454, col_offset=37), Num(1, lineno=5455, col_offset=13), Num(1, lineno=5455, col_offset=21), Num(1, lineno=5455, col_offset=29), Num(1, lineno=5455, col_offset=37), Num(0, lineno=5456, col_offset=13), Num(0, lineno=5456, col_offset=21), Num(0, lineno=5456, col_offset=29), Num(0, lineno=5456, col_offset=37), Num(0, lineno=5457, col_offset=13), Num(0, lineno=5457, col_offset=21), Num(0, lineno=5457, col_offset=29), Num(0, lineno=5457, col_offset=37)], lineno=5453, col_offset=27)]), [Expr(Str('Number of bits in binary representation of the positive integer n,\n    or 0 if n == 0.\n    ', lineno=5460, col_offset=-1), lineno=5460, col_offset=-1), If(Compare(Name('n', Load(), lineno=5461, col_offset=7), [Lt()], [Num(0, lineno=5461, col_offset=11)], lineno=5461, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=5462, col_offset=14), [Str('The argument to _nbits should be nonnegative.', lineno=5462, col_offset=25)], [], None, None, lineno=5462, col_offset=14), None, None, lineno=5462, col_offset=8)], [], lineno=5461, col_offset=4), Assign([Name('hex_n', Store(), lineno=5463, col_offset=4)], BinOp(Str('%x', lineno=5463, col_offset=12), Mod(), Name('n', Load(), lineno=5463, col_offset=19), lineno=5463, col_offset=12), lineno=5463, col_offset=4), Return(BinOp(BinOp(Num(4, lineno=5464, col_offset=11), Mult(), Call(Name('len', Load(), lineno=5464, col_offset=13), [Name('hex_n', Load(), lineno=5464, col_offset=17)], [], None, None, lineno=5464, col_offset=13), lineno=5464, col_offset=11), Sub(), Subscript(Name('correction', Load(), lineno=5464, col_offset=26), Index(Subscript(Name('hex_n', Load(), lineno=5464, col_offset=37), Index(Num(0, lineno=5464, col_offset=43)), Load(), lineno=5464, col_offset=37)), Load(), lineno=5464, col_offset=26), lineno=5464, col_offset=11), lineno=5464, col_offset=4)], [], lineno=5453, col_offset=0), FunctionDef('_sqrt_nearest', arguments([Name('n', Param(), lineno=5466, col_offset=18), Name('a', Param(), lineno=5466, col_offset=21)], None, None, []), [Expr(Str('Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n\n    ', lineno=5472, col_offset=-1), lineno=5472, col_offset=-1), If(BoolOp(Or(), [Compare(Name('n', Load(), lineno=5473, col_offset=7), [LtE()], [Num(0, lineno=5473, col_offset=12)], lineno=5473, col_offset=7), Compare(Name('a', Load(), lineno=5473, col_offset=17), [LtE()], [Num(0, lineno=5473, col_offset=22)], lineno=5473, col_offset=17)], lineno=5473, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=5474, col_offset=14), [Str('Both arguments to _sqrt_nearest should be positive.', lineno=5474, col_offset=25)], [], None, None, lineno=5474, col_offset=14), None, None, lineno=5474, col_offset=8)], [], lineno=5473, col_offset=4), Assign([Name('b', Store(), lineno=5476, col_offset=4)], Num(0, lineno=5476, col_offset=6), lineno=5476, col_offset=4), While(Compare(Name('a', Load(), lineno=5477, col_offset=10), [NotEq()], [Name('b', Load(), lineno=5477, col_offset=15)], lineno=5477, col_offset=10), [Assign([Tuple([Name('b', Store(), lineno=5478, col_offset=8), Name('a', Store(), lineno=5478, col_offset=11)], Store(), lineno=5478, col_offset=8)], Tuple([Name('a', Load(), lineno=5478, col_offset=15), BinOp(BinOp(Name('a', Load(), lineno=5478, col_offset=18), Sub(), BinOp(UnaryOp(USub(), Name('n', Load(), lineno=5478, col_offset=21), lineno=5478, col_offset=20), FloorDiv(), Name('a', Load(), lineno=5478, col_offset=24), lineno=5478, col_offset=20), lineno=5478, col_offset=18), RShift(), Num(1, lineno=5478, col_offset=27), lineno=5478, col_offset=18)], Load(), lineno=5478, col_offset=15), lineno=5478, col_offset=8)], [], lineno=5477, col_offset=4), Return(Name('a', Load(), lineno=5479, col_offset=11), lineno=5479, col_offset=4)], [], lineno=5466, col_offset=0), FunctionDef('_rshift_nearest', arguments([Name('x', Param(), lineno=5481, col_offset=20), Name('shift', Param(), lineno=5481, col_offset=23)], None, None, []), [Expr(Str('Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n\n    ', lineno=5485, col_offset=-1), lineno=5485, col_offset=-1), Assign([Tuple([Name('b', Store(), lineno=5486, col_offset=4), Name('q', Store(), lineno=5486, col_offset=7)], Store(), lineno=5486, col_offset=4)], Tuple([BinOp(Num(1L, lineno=5486, col_offset=11), LShift(), Name('shift', Load(), lineno=5486, col_offset=17), lineno=5486, col_offset=11), BinOp(Name('x', Load(), lineno=5486, col_offset=24), RShift(), Name('shift', Load(), lineno=5486, col_offset=29), lineno=5486, col_offset=24)], Load(), lineno=5486, col_offset=11), lineno=5486, col_offset=4), Return(BinOp(Name('q', Load(), lineno=5487, col_offset=11), Add(), Compare(BinOp(BinOp(Num(2, lineno=5487, col_offset=16), Mult(), BinOp(Name('x', Load(), lineno=5487, col_offset=19), BitAnd(), BinOp(Name('b', Load(), lineno=5487, col_offset=24), Sub(), Num(1, lineno=5487, col_offset=26), lineno=5487, col_offset=24), lineno=5487, col_offset=19), lineno=5487, col_offset=16), Add(), BinOp(Name('q', Load(), lineno=5487, col_offset=33), BitAnd(), Num(1, lineno=5487, col_offset=35), lineno=5487, col_offset=33), lineno=5487, col_offset=16), [Gt()], [Name('b', Load(), lineno=5487, col_offset=40)], lineno=5487, col_offset=16), lineno=5487, col_offset=11), lineno=5487, col_offset=4)], [], lineno=5481, col_offset=0), FunctionDef('_div_nearest', arguments([Name('a', Param(), lineno=5489, col_offset=17), Name('b', Param(), lineno=5489, col_offset=20)], None, None, []), [Expr(Str('Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n\n    ', lineno=5493, col_offset=-1), lineno=5493, col_offset=-1), Assign([Tuple([Name('q', Store(), lineno=5494, col_offset=4), Name('r', Store(), lineno=5494, col_offset=7)], Store(), lineno=5494, col_offset=4)], Call(Name('divmod', Load(), lineno=5494, col_offset=11), [Name('a', Load(), lineno=5494, col_offset=18), Name('b', Load(), lineno=5494, col_offset=21)], [], None, None, lineno=5494, col_offset=11), lineno=5494, col_offset=4), Return(BinOp(Name('q', Load(), lineno=5495, col_offset=11), Add(), Compare(BinOp(BinOp(Num(2, lineno=5495, col_offset=16), Mult(), Name('r', Load(), lineno=5495, col_offset=18), lineno=5495, col_offset=16), Add(), BinOp(Name('q', Load(), lineno=5495, col_offset=23), BitAnd(), Num(1, lineno=5495, col_offset=25), lineno=5495, col_offset=23), lineno=5495, col_offset=16), [Gt()], [Name('b', Load(), lineno=5495, col_offset=30)], lineno=5495, col_offset=16), lineno=5495, col_offset=11), lineno=5495, col_offset=4)], [], lineno=5489, col_offset=0), FunctionDef('_ilog', arguments([Name('x', Param(), lineno=5497, col_offset=10), Name('M', Param(), lineno=5497, col_offset=13), Name('L', Param(), lineno=5497, col_offset=16)], None, None, [Num(8, lineno=5497, col_offset=20)]), [Expr(Str('Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller.', lineno=5506, col_offset=-1), lineno=5506, col_offset=-1), Assign([Name('y', Store(), lineno=5527, col_offset=4)], BinOp(Name('x', Load(), lineno=5527, col_offset=8), Sub(), Name('M', Load(), lineno=5527, col_offset=10), lineno=5527, col_offset=8), lineno=5527, col_offset=4), Assign([Name('R', Store(), lineno=5529, col_offset=4)], Num(0, lineno=5529, col_offset=8), lineno=5529, col_offset=4), While(BoolOp(Or(), [BoolOp(And(), [Compare(Name('R', Load(), lineno=5530, col_offset=11), [LtE()], [Name('L', Load(), lineno=5530, col_offset=16)], lineno=5530, col_offset=11), Compare(BinOp(Call(Name('long', Load(), lineno=5530, col_offset=22), [Call(Name('abs', Load(), lineno=5530, col_offset=27), [Name('y', Load(), lineno=5530, col_offset=31)], [], None, None, lineno=5530, col_offset=27)], [], None, None, lineno=5530, col_offset=22), LShift(), BinOp(Name('L', Load(), lineno=5530, col_offset=38), Sub(), Name('R', Load(), lineno=5530, col_offset=40), lineno=5530, col_offset=38), lineno=5530, col_offset=22), [GtE()], [Name('M', Load(), lineno=5530, col_offset=45)], lineno=5530, col_offset=22)], lineno=5530, col_offset=11), BoolOp(And(), [Compare(Name('R', Load(), lineno=5531, col_offset=11), [Gt()], [Name('L', Load(), lineno=5531, col_offset=15)], lineno=5531, col_offset=11), Compare(BinOp(Call(Name('abs', Load(), lineno=5531, col_offset=21), [Name('y', Load(), lineno=5531, col_offset=25)], [], None, None, lineno=5531, col_offset=21), RShift(), BinOp(Name('R', Load(), lineno=5531, col_offset=31), Sub(), Name('L', Load(), lineno=5531, col_offset=33), lineno=5531, col_offset=31), lineno=5531, col_offset=21), [GtE()], [Name('M', Load(), lineno=5531, col_offset=38)], lineno=5531, col_offset=21)], lineno=5531, col_offset=11)], lineno=5530, col_offset=11), [Assign([Name('y', Store(), lineno=5532, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5532, col_offset=12), [BinOp(Call(Name('long', Load(), lineno=5532, col_offset=25), [BinOp(Name('M', Load(), lineno=5532, col_offset=30), Mult(), Name('y', Load(), lineno=5532, col_offset=32), lineno=5532, col_offset=30)], [], None, None, lineno=5532, col_offset=25), LShift(), Num(1, lineno=5532, col_offset=38), lineno=5532, col_offset=25), BinOp(Name('M', Load(), lineno=5533, col_offset=25), Add(), Call(Name('_sqrt_nearest', Load(), lineno=5533, col_offset=29), [BinOp(Name('M', Load(), lineno=5533, col_offset=43), Mult(), BinOp(Name('M', Load(), lineno=5533, col_offset=46), Add(), Call(Name('_rshift_nearest', Load(), lineno=5533, col_offset=48), [Name('y', Load(), lineno=5533, col_offset=64), Name('R', Load(), lineno=5533, col_offset=67)], [], None, None, lineno=5533, col_offset=48), lineno=5533, col_offset=46), lineno=5533, col_offset=43), Name('M', Load(), lineno=5533, col_offset=72)], [], None, None, lineno=5533, col_offset=29), lineno=5533, col_offset=25)], [], None, None, lineno=5532, col_offset=12), lineno=5532, col_offset=8), AugAssign(Name('R', Store(), lineno=5534, col_offset=8), Add(), Num(1, lineno=5534, col_offset=13), lineno=5534, col_offset=8)], [], lineno=5530, col_offset=4), Assign([Name('T', Store(), lineno=5537, col_offset=4)], UnaryOp(USub(), Call(Name('int', Load(), lineno=5537, col_offset=9), [BinOp(BinOp(Num(-10, lineno=5537, col_offset=14), Mult(), Call(Name('len', Load(), lineno=5537, col_offset=17), [Call(Name('str', Load(), lineno=5537, col_offset=21), [Name('M', Load(), lineno=5537, col_offset=25)], [], None, None, lineno=5537, col_offset=21)], [], None, None, lineno=5537, col_offset=17), lineno=5537, col_offset=13), FloorDiv(), BinOp(Num(3, lineno=5537, col_offset=31), Mult(), Name('L', Load(), lineno=5537, col_offset=33), lineno=5537, col_offset=31), lineno=5537, col_offset=28)], [], None, None, lineno=5537, col_offset=9), lineno=5537, col_offset=8), lineno=5537, col_offset=4), Assign([Name('yshift', Store(), lineno=5538, col_offset=4)], Call(Name('_rshift_nearest', Load(), lineno=5538, col_offset=13), [Name('y', Load(), lineno=5538, col_offset=29), Name('R', Load(), lineno=5538, col_offset=32)], [], None, None, lineno=5538, col_offset=13), lineno=5538, col_offset=4), Assign([Name('w', Store(), lineno=5539, col_offset=4)], Call(Name('_div_nearest', Load(), lineno=5539, col_offset=8), [Name('M', Load(), lineno=5539, col_offset=21), Name('T', Load(), lineno=5539, col_offset=24)], [], None, None, lineno=5539, col_offset=8), lineno=5539, col_offset=4), For(Name('k', Store(), lineno=5540, col_offset=8), Call(Name('xrange', Load(), lineno=5540, col_offset=13), [BinOp(Name('T', Load(), lineno=5540, col_offset=20), Sub(), Num(1, lineno=5540, col_offset=22), lineno=5540, col_offset=20), Num(0, lineno=5540, col_offset=25), Num(-1, lineno=5540, col_offset=29)], [], None, None, lineno=5540, col_offset=13), [Assign([Name('w', Store(), lineno=5541, col_offset=8)], BinOp(Call(Name('_div_nearest', Load(), lineno=5541, col_offset=12), [Name('M', Load(), lineno=5541, col_offset=25), Name('k', Load(), lineno=5541, col_offset=28)], [], None, None, lineno=5541, col_offset=12), Sub(), Call(Name('_div_nearest', Load(), lineno=5541, col_offset=33), [BinOp(Name('yshift', Load(), lineno=5541, col_offset=46), Mult(), Name('w', Load(), lineno=5541, col_offset=53), lineno=5541, col_offset=46), Name('M', Load(), lineno=5541, col_offset=56)], [], None, None, lineno=5541, col_offset=33), lineno=5541, col_offset=12), lineno=5541, col_offset=8)], [], lineno=5540, col_offset=4), Return(Call(Name('_div_nearest', Load(), lineno=5543, col_offset=11), [BinOp(Name('w', Load(), lineno=5543, col_offset=24), Mult(), Name('y', Load(), lineno=5543, col_offset=26), lineno=5543, col_offset=24), Name('M', Load(), lineno=5543, col_offset=29)], [], None, None, lineno=5543, col_offset=11), lineno=5543, col_offset=4)], [], lineno=5497, col_offset=0), FunctionDef('_dlog10', arguments([Name('c', Param(), lineno=5545, col_offset=12), Name('e', Param(), lineno=5545, col_offset=15), Name('p', Param(), lineno=5545, col_offset=18)], None, None, []), [Expr(Str('Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.', lineno=5548, col_offset=-1), lineno=5548, col_offset=-1), AugAssign(Name('p', Store(), lineno=5552, col_offset=4), Add(), Num(2, lineno=5552, col_offset=9), lineno=5552, col_offset=4), Assign([Name('l', Store(), lineno=5558, col_offset=4)], Call(Name('len', Load(), lineno=5558, col_offset=8), [Call(Name('str', Load(), lineno=5558, col_offset=12), [Name('c', Load(), lineno=5558, col_offset=16)], [], None, None, lineno=5558, col_offset=12)], [], None, None, lineno=5558, col_offset=8), lineno=5558, col_offset=4), Assign([Name('f', Store(), lineno=5559, col_offset=4)], BinOp(BinOp(Name('e', Load(), lineno=5559, col_offset=8), Add(), Name('l', Load(), lineno=5559, col_offset=10), lineno=5559, col_offset=8), Sub(), Compare(BinOp(Name('e', Load(), lineno=5559, col_offset=15), Add(), Name('l', Load(), lineno=5559, col_offset=17), lineno=5559, col_offset=15), [GtE()], [Num(1, lineno=5559, col_offset=22)], lineno=5559, col_offset=15), lineno=5559, col_offset=12), lineno=5559, col_offset=4), If(Compare(Name('p', Load(), lineno=5561, col_offset=7), [Gt()], [Num(0, lineno=5561, col_offset=11)], lineno=5561, col_offset=7), [Assign([Name('M', Store(), lineno=5562, col_offset=8)], BinOp(Num(10, lineno=5562, col_offset=12), Pow(), Name('p', Load(), lineno=5562, col_offset=16), lineno=5562, col_offset=12), lineno=5562, col_offset=8), Assign([Name('k', Store(), lineno=5563, col_offset=8)], BinOp(BinOp(Name('e', Load(), lineno=5563, col_offset=12), Add(), Name('p', Load(), lineno=5563, col_offset=14), lineno=5563, col_offset=12), Sub(), Name('f', Load(), lineno=5563, col_offset=16), lineno=5563, col_offset=15), lineno=5563, col_offset=8), If(Compare(Name('k', Load(), lineno=5564, col_offset=11), [GtE()], [Num(0, lineno=5564, col_offset=16)], lineno=5564, col_offset=11), [AugAssign(Name('c', Store(), lineno=5565, col_offset=12), Mult(), BinOp(Num(10, lineno=5565, col_offset=17), Pow(), Name('k', Load(), lineno=5565, col_offset=21), lineno=5565, col_offset=17), lineno=5565, col_offset=12)], [Assign([Name('c', Store(), lineno=5567, col_offset=12)], Call(Name('_div_nearest', Load(), lineno=5567, col_offset=16), [Name('c', Load(), lineno=5567, col_offset=29), BinOp(Num(10, lineno=5567, col_offset=32), Pow(), UnaryOp(USub(), Name('k', Load(), lineno=5567, col_offset=37), lineno=5567, col_offset=36), lineno=5567, col_offset=32)], [], None, None, lineno=5567, col_offset=16), lineno=5567, col_offset=12)], lineno=5564, col_offset=8), Assign([Name('log_d', Store(), lineno=5569, col_offset=8)], Call(Name('_ilog', Load(), lineno=5569, col_offset=16), [Name('c', Load(), lineno=5569, col_offset=22), Name('M', Load(), lineno=5569, col_offset=25)], [], None, None, lineno=5569, col_offset=16), lineno=5569, col_offset=8), Assign([Name('log_10', Store(), lineno=5570, col_offset=8)], Call(Name('_log10_digits', Load(), lineno=5570, col_offset=17), [Name('p', Load(), lineno=5570, col_offset=31)], [], None, None, lineno=5570, col_offset=17), lineno=5570, col_offset=8), Assign([Name('log_d', Store(), lineno=5571, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5571, col_offset=16), [BinOp(Name('log_d', Load(), lineno=5571, col_offset=29), Mult(), Name('M', Load(), lineno=5571, col_offset=35), lineno=5571, col_offset=29), Name('log_10', Load(), lineno=5571, col_offset=38)], [], None, None, lineno=5571, col_offset=16), lineno=5571, col_offset=8), Assign([Name('log_tenpower', Store(), lineno=5572, col_offset=8)], BinOp(Name('f', Load(), lineno=5572, col_offset=23), Mult(), Name('M', Load(), lineno=5572, col_offset=25), lineno=5572, col_offset=23), lineno=5572, col_offset=8)], [Assign([Name('log_d', Store(), lineno=5574, col_offset=8)], Num(0, lineno=5574, col_offset=16), lineno=5574, col_offset=8), Assign([Name('log_tenpower', Store(), lineno=5575, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5575, col_offset=23), [Name('f', Load(), lineno=5575, col_offset=36), BinOp(Num(10, lineno=5575, col_offset=39), Pow(), UnaryOp(USub(), Name('p', Load(), lineno=5575, col_offset=44), lineno=5575, col_offset=43), lineno=5575, col_offset=39)], [], None, None, lineno=5575, col_offset=23), lineno=5575, col_offset=8)], lineno=5561, col_offset=4), Return(Call(Name('_div_nearest', Load(), lineno=5577, col_offset=11), [BinOp(Name('log_tenpower', Load(), lineno=5577, col_offset=24), Add(), Name('log_d', Load(), lineno=5577, col_offset=37), lineno=5577, col_offset=24), Num(100, lineno=5577, col_offset=44)], [], None, None, lineno=5577, col_offset=11), lineno=5577, col_offset=4)], [], lineno=5545, col_offset=0), FunctionDef('_dlog', arguments([Name('c', Param(), lineno=5579, col_offset=10), Name('e', Param(), lineno=5579, col_offset=13), Name('p', Param(), lineno=5579, col_offset=16)], None, None, []), [Expr(Str('Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.', lineno=5582, col_offset=-1), lineno=5582, col_offset=-1), AugAssign(Name('p', Store(), lineno=5586, col_offset=4), Add(), Num(2, lineno=5586, col_offset=9), lineno=5586, col_offset=4), Assign([Name('l', Store(), lineno=5591, col_offset=4)], Call(Name('len', Load(), lineno=5591, col_offset=8), [Call(Name('str', Load(), lineno=5591, col_offset=12), [Name('c', Load(), lineno=5591, col_offset=16)], [], None, None, lineno=5591, col_offset=12)], [], None, None, lineno=5591, col_offset=8), lineno=5591, col_offset=4), Assign([Name('f', Store(), lineno=5592, col_offset=4)], BinOp(BinOp(Name('e', Load(), lineno=5592, col_offset=8), Add(), Name('l', Load(), lineno=5592, col_offset=10), lineno=5592, col_offset=8), Sub(), Compare(BinOp(Name('e', Load(), lineno=5592, col_offset=15), Add(), Name('l', Load(), lineno=5592, col_offset=17), lineno=5592, col_offset=15), [GtE()], [Num(1, lineno=5592, col_offset=22)], lineno=5592, col_offset=15), lineno=5592, col_offset=12), lineno=5592, col_offset=4), If(Compare(Name('p', Load(), lineno=5595, col_offset=7), [Gt()], [Num(0, lineno=5595, col_offset=11)], lineno=5595, col_offset=7), [Assign([Name('k', Store(), lineno=5596, col_offset=8)], BinOp(BinOp(Name('e', Load(), lineno=5596, col_offset=12), Add(), Name('p', Load(), lineno=5596, col_offset=14), lineno=5596, col_offset=12), Sub(), Name('f', Load(), lineno=5596, col_offset=16), lineno=5596, col_offset=15), lineno=5596, col_offset=8), If(Compare(Name('k', Load(), lineno=5597, col_offset=11), [GtE()], [Num(0, lineno=5597, col_offset=16)], lineno=5597, col_offset=11), [AugAssign(Name('c', Store(), lineno=5598, col_offset=12), Mult(), BinOp(Num(10, lineno=5598, col_offset=17), Pow(), Name('k', Load(), lineno=5598, col_offset=21), lineno=5598, col_offset=17), lineno=5598, col_offset=12)], [Assign([Name('c', Store(), lineno=5600, col_offset=12)], Call(Name('_div_nearest', Load(), lineno=5600, col_offset=16), [Name('c', Load(), lineno=5600, col_offset=29), BinOp(Num(10, lineno=5600, col_offset=32), Pow(), UnaryOp(USub(), Name('k', Load(), lineno=5600, col_offset=37), lineno=5600, col_offset=36), lineno=5600, col_offset=32)], [], None, None, lineno=5600, col_offset=16), lineno=5600, col_offset=12)], lineno=5597, col_offset=8), Assign([Name('log_d', Store(), lineno=5603, col_offset=8)], Call(Name('_ilog', Load(), lineno=5603, col_offset=16), [Name('c', Load(), lineno=5603, col_offset=22), BinOp(Num(10, lineno=5603, col_offset=25), Pow(), Name('p', Load(), lineno=5603, col_offset=29), lineno=5603, col_offset=25)], [], None, None, lineno=5603, col_offset=16), lineno=5603, col_offset=8)], [Assign([Name('log_d', Store(), lineno=5606, col_offset=8)], Num(0, lineno=5606, col_offset=16), lineno=5606, col_offset=8)], lineno=5595, col_offset=4), If(Name('f', Load(), lineno=5609, col_offset=7), [Assign([Name('extra', Store(), lineno=5610, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=5610, col_offset=16), [Call(Name('str', Load(), lineno=5610, col_offset=20), [Call(Name('abs', Load(), lineno=5610, col_offset=24), [Name('f', Load(), lineno=5610, col_offset=28)], [], None, None, lineno=5610, col_offset=24)], [], None, None, lineno=5610, col_offset=20)], [], None, None, lineno=5610, col_offset=16), Sub(), Num(1, lineno=5610, col_offset=33), lineno=5610, col_offset=16), lineno=5610, col_offset=8), If(Compare(BinOp(Name('p', Load(), lineno=5611, col_offset=11), Add(), Name('extra', Load(), lineno=5611, col_offset=15), lineno=5611, col_offset=11), [GtE()], [Num(0, lineno=5611, col_offset=24)], lineno=5611, col_offset=11), [Assign([Name('f_log_ten', Store(), lineno=5614, col_offset=12)], Call(Name('_div_nearest', Load(), lineno=5614, col_offset=24), [BinOp(Name('f', Load(), lineno=5614, col_offset=37), Mult(), Call(Name('_log10_digits', Load(), lineno=5614, col_offset=39), [BinOp(Name('p', Load(), lineno=5614, col_offset=53), Add(), Name('extra', Load(), lineno=5614, col_offset=55), lineno=5614, col_offset=53)], [], None, None, lineno=5614, col_offset=39), lineno=5614, col_offset=37), BinOp(Num(10, lineno=5614, col_offset=63), Pow(), Name('extra', Load(), lineno=5614, col_offset=67), lineno=5614, col_offset=63)], [], None, None, lineno=5614, col_offset=24), lineno=5614, col_offset=12)], [Assign([Name('f_log_ten', Store(), lineno=5616, col_offset=12)], Num(0, lineno=5616, col_offset=24), lineno=5616, col_offset=12)], lineno=5611, col_offset=8)], [Assign([Name('f_log_ten', Store(), lineno=5618, col_offset=8)], Num(0, lineno=5618, col_offset=20), lineno=5618, col_offset=8)], lineno=5609, col_offset=4), Return(Call(Name('_div_nearest', Load(), lineno=5621, col_offset=11), [BinOp(Name('f_log_ten', Load(), lineno=5621, col_offset=24), Add(), Name('log_d', Load(), lineno=5621, col_offset=36), lineno=5621, col_offset=24), Num(100, lineno=5621, col_offset=43)], [], None, None, lineno=5621, col_offset=11), lineno=5621, col_offset=4)], [], lineno=5579, col_offset=0), ClassDef('_Log10Memoize', [Name('object', Load(), lineno=5623, col_offset=20)], [Expr(Str('Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.', lineno=5626, col_offset=-1), lineno=5626, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=5627, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=5628, col_offset=8), 'digits', Store(), lineno=5628, col_offset=8)], Str('23025850929940456840179914546843642076011014886', lineno=5628, col_offset=22), lineno=5628, col_offset=8)], [], lineno=5627, col_offset=4), FunctionDef('getdigits', arguments([Name('self', Param(), lineno=5630, col_offset=18), Name('p', Param(), lineno=5630, col_offset=24)], None, None, []), [Expr(Str('Given an integer p >= 0, return floor(10**p)*log(10).\n\n        For example, self.getdigits(3) returns 2302.\n        ', lineno=5634, col_offset=-1), lineno=5634, col_offset=-1), If(Compare(Name('p', Load(), lineno=5639, col_offset=11), [Lt()], [Num(0, lineno=5639, col_offset=15)], lineno=5639, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=5640, col_offset=18), [Str('p should be nonnegative', lineno=5640, col_offset=29)], [], None, None, lineno=5640, col_offset=18), None, None, lineno=5640, col_offset=12)], [], lineno=5639, col_offset=8), If(Compare(Name('p', Load(), lineno=5642, col_offset=11), [GtE()], [Call(Name('len', Load(), lineno=5642, col_offset=16), [Attribute(Name('self', Load(), lineno=5642, col_offset=20), 'digits', Load(), lineno=5642, col_offset=20)], [], None, None, lineno=5642, col_offset=16)], lineno=5642, col_offset=11), [Assign([Name('extra', Store(), lineno=5645, col_offset=12)], Num(3, lineno=5645, col_offset=20), lineno=5645, col_offset=12), While(Name('True', Load(), lineno=5646, col_offset=18), [Assign([Name('M', Store(), lineno=5648, col_offset=16)], BinOp(Num(10, lineno=5648, col_offset=20), Pow(), BinOp(BinOp(Name('p', Load(), lineno=5648, col_offset=25), Add(), Name('extra', Load(), lineno=5648, col_offset=27), lineno=5648, col_offset=25), Add(), Num(2, lineno=5648, col_offset=33), lineno=5648, col_offset=32), lineno=5648, col_offset=20), lineno=5648, col_offset=16), Assign([Name('digits', Store(), lineno=5649, col_offset=16)], Call(Name('str', Load(), lineno=5649, col_offset=25), [Call(Name('_div_nearest', Load(), lineno=5649, col_offset=29), [Call(Name('_ilog', Load(), lineno=5649, col_offset=42), [BinOp(Num(10, lineno=5649, col_offset=48), Mult(), Name('M', Load(), lineno=5649, col_offset=51), lineno=5649, col_offset=48), Name('M', Load(), lineno=5649, col_offset=54)], [], None, None, lineno=5649, col_offset=42), Num(100, lineno=5649, col_offset=58)], [], None, None, lineno=5649, col_offset=29)], [], None, None, lineno=5649, col_offset=25), lineno=5649, col_offset=16), If(Compare(Subscript(Name('digits', Load(), lineno=5650, col_offset=19), Slice(UnaryOp(USub(), Name('extra', Load(), lineno=5650, col_offset=27), lineno=5650, col_offset=26), None, None), Load(), lineno=5650, col_offset=19), [NotEq()], [BinOp(Str('0', lineno=5650, col_offset=38), Mult(), Name('extra', Load(), lineno=5650, col_offset=42), lineno=5650, col_offset=38)], lineno=5650, col_offset=19), [Break( lineno=5651, col_offset=20)], [], lineno=5650, col_offset=16), AugAssign(Name('extra', Store(), lineno=5652, col_offset=16), Add(), Num(3, lineno=5652, col_offset=25), lineno=5652, col_offset=16)], [], lineno=5646, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=5655, col_offset=12), 'digits', Store(), lineno=5655, col_offset=12)], Subscript(Call(Attribute(Name('digits', Load(), lineno=5655, col_offset=26), 'rstrip', Load(), lineno=5655, col_offset=26), [Str('0', lineno=5655, col_offset=40)], [], None, None, lineno=5655, col_offset=26), Slice(None, Num(-1, lineno=5655, col_offset=47), None), Load(), lineno=5655, col_offset=26), lineno=5655, col_offset=12)], [], lineno=5642, col_offset=8), Return(Call(Name('int', Load(), lineno=5656, col_offset=15), [Subscript(Attribute(Name('self', Load(), lineno=5656, col_offset=19), 'digits', Load(), lineno=5656, col_offset=19), Slice(None, BinOp(Name('p', Load(), lineno=5656, col_offset=32), Add(), Num(1, lineno=5656, col_offset=34), lineno=5656, col_offset=32), None), Load(), lineno=5656, col_offset=19)], [], None, None, lineno=5656, col_offset=15), lineno=5656, col_offset=8)], [], lineno=5630, col_offset=4)], [], lineno=5623, col_offset=0), Assign([Name('_log10_digits', Store(), lineno=5658, col_offset=0)], Attribute(Call(Name('_Log10Memoize', Load(), lineno=5658, col_offset=16), [], [], None, None, lineno=5658, col_offset=16), 'getdigits', Load(), lineno=5658, col_offset=16), lineno=5658, col_offset=0), FunctionDef('_iexp', arguments([Name('x', Param(), lineno=5660, col_offset=10), Name('M', Param(), lineno=5660, col_offset=13), Name('L', Param(), lineno=5660, col_offset=16)], None, None, [Num(8, lineno=5660, col_offset=18)]), [Expr(Str('Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller).', lineno=5664, col_offset=-1), lineno=5664, col_offset=-1), Assign([Name('R', Store(), lineno=5681, col_offset=4)], Call(Name('_nbits', Load(), lineno=5681, col_offset=8), [BinOp(BinOp(Call(Name('long', Load(), lineno=5681, col_offset=16), [Name('x', Load(), lineno=5681, col_offset=21)], [], None, None, lineno=5681, col_offset=16), LShift(), Name('L', Load(), lineno=5681, col_offset=25), lineno=5681, col_offset=16), FloorDiv(), Name('M', Load(), lineno=5681, col_offset=29), lineno=5681, col_offset=15)], [], None, None, lineno=5681, col_offset=8), lineno=5681, col_offset=4), Assign([Name('T', Store(), lineno=5684, col_offset=4)], UnaryOp(USub(), Call(Name('int', Load(), lineno=5684, col_offset=9), [BinOp(BinOp(Num(-10, lineno=5684, col_offset=14), Mult(), Call(Name('len', Load(), lineno=5684, col_offset=17), [Call(Name('str', Load(), lineno=5684, col_offset=21), [Name('M', Load(), lineno=5684, col_offset=25)], [], None, None, lineno=5684, col_offset=21)], [], None, None, lineno=5684, col_offset=17), lineno=5684, col_offset=13), FloorDiv(), BinOp(Num(3, lineno=5684, col_offset=31), Mult(), Name('L', Load(), lineno=5684, col_offset=33), lineno=5684, col_offset=31), lineno=5684, col_offset=28)], [], None, None, lineno=5684, col_offset=9), lineno=5684, col_offset=8), lineno=5684, col_offset=4), Assign([Name('y', Store(), lineno=5685, col_offset=4)], Call(Name('_div_nearest', Load(), lineno=5685, col_offset=8), [Name('x', Load(), lineno=5685, col_offset=21), Name('T', Load(), lineno=5685, col_offset=24)], [], None, None, lineno=5685, col_offset=8), lineno=5685, col_offset=4), Assign([Name('Mshift', Store(), lineno=5686, col_offset=4)], BinOp(Call(Name('long', Load(), lineno=5686, col_offset=13), [Name('M', Load(), lineno=5686, col_offset=18)], [], None, None, lineno=5686, col_offset=13), LShift(), Name('R', Load(), lineno=5686, col_offset=22), lineno=5686, col_offset=13), lineno=5686, col_offset=4), For(Name('i', Store(), lineno=5687, col_offset=8), Call(Name('xrange', Load(), lineno=5687, col_offset=13), [BinOp(Name('T', Load(), lineno=5687, col_offset=20), Sub(), Num(1, lineno=5687, col_offset=22), lineno=5687, col_offset=20), Num(0, lineno=5687, col_offset=25), Num(-1, lineno=5687, col_offset=29)], [], None, None, lineno=5687, col_offset=13), [Assign([Name('y', Store(), lineno=5688, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5688, col_offset=12), [BinOp(Name('x', Load(), lineno=5688, col_offset=25), Mult(), BinOp(Name('Mshift', Load(), lineno=5688, col_offset=28), Add(), Name('y', Load(), lineno=5688, col_offset=37), lineno=5688, col_offset=28), lineno=5688, col_offset=25), BinOp(Name('Mshift', Load(), lineno=5688, col_offset=41), Mult(), Name('i', Load(), lineno=5688, col_offset=50), lineno=5688, col_offset=41)], [], None, None, lineno=5688, col_offset=12), lineno=5688, col_offset=8)], [], lineno=5687, col_offset=4), For(Name('k', Store(), lineno=5691, col_offset=8), Call(Name('xrange', Load(), lineno=5691, col_offset=13), [BinOp(Name('R', Load(), lineno=5691, col_offset=20), Sub(), Num(1, lineno=5691, col_offset=22), lineno=5691, col_offset=20), Num(-1, lineno=5691, col_offset=26), Num(-1, lineno=5691, col_offset=30)], [], None, None, lineno=5691, col_offset=13), [Assign([Name('Mshift', Store(), lineno=5692, col_offset=8)], BinOp(Call(Name('long', Load(), lineno=5692, col_offset=17), [Name('M', Load(), lineno=5692, col_offset=22)], [], None, None, lineno=5692, col_offset=17), LShift(), BinOp(Name('k', Load(), lineno=5692, col_offset=27), Add(), Num(2, lineno=5692, col_offset=29), lineno=5692, col_offset=27), lineno=5692, col_offset=17), lineno=5692, col_offset=8), Assign([Name('y', Store(), lineno=5693, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5693, col_offset=12), [BinOp(Name('y', Load(), lineno=5693, col_offset=25), Mult(), BinOp(Name('y', Load(), lineno=5693, col_offset=28), Add(), Name('Mshift', Load(), lineno=5693, col_offset=30), lineno=5693, col_offset=28), lineno=5693, col_offset=25), Name('Mshift', Load(), lineno=5693, col_offset=39)], [], None, None, lineno=5693, col_offset=12), lineno=5693, col_offset=8)], [], lineno=5691, col_offset=4), Return(BinOp(Name('M', Load(), lineno=5695, col_offset=11), Add(), Name('y', Load(), lineno=5695, col_offset=13), lineno=5695, col_offset=11), lineno=5695, col_offset=4)], [], lineno=5660, col_offset=0), FunctionDef('_dexp', arguments([Name('c', Param(), lineno=5697, col_offset=10), Name('e', Param(), lineno=5697, col_offset=13), Name('p', Param(), lineno=5697, col_offset=16)], None, None, []), [Expr(Str('Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n\n    Returns integers d, f such that:\n\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp.', lineno=5709, col_offset=-1), lineno=5709, col_offset=-1), AugAssign(Name('p', Store(), lineno=5712, col_offset=4), Add(), Num(2, lineno=5712, col_offset=9), lineno=5712, col_offset=4), Assign([Name('extra', Store(), lineno=5715, col_offset=4)], Call(Name('max', Load(), lineno=5715, col_offset=12), [Num(0, lineno=5715, col_offset=16), BinOp(BinOp(Name('e', Load(), lineno=5715, col_offset=19), Add(), Call(Name('len', Load(), lineno=5715, col_offset=23), [Call(Name('str', Load(), lineno=5715, col_offset=27), [Name('c', Load(), lineno=5715, col_offset=31)], [], None, None, lineno=5715, col_offset=27)], [], None, None, lineno=5715, col_offset=23), lineno=5715, col_offset=19), Sub(), Num(1, lineno=5715, col_offset=37), lineno=5715, col_offset=35)], [], None, None, lineno=5715, col_offset=12), lineno=5715, col_offset=4), Assign([Name('q', Store(), lineno=5716, col_offset=4)], BinOp(Name('p', Load(), lineno=5716, col_offset=8), Add(), Name('extra', Load(), lineno=5716, col_offset=12), lineno=5716, col_offset=8), lineno=5716, col_offset=4), Assign([Name('shift', Store(), lineno=5720, col_offset=4)], BinOp(Name('e', Load(), lineno=5720, col_offset=12), Add(), Name('q', Load(), lineno=5720, col_offset=14), lineno=5720, col_offset=12), lineno=5720, col_offset=4), If(Compare(Name('shift', Load(), lineno=5721, col_offset=7), [GtE()], [Num(0, lineno=5721, col_offset=16)], lineno=5721, col_offset=7), [Assign([Name('cshift', Store(), lineno=5722, col_offset=8)], BinOp(Name('c', Load(), lineno=5722, col_offset=17), Mult(), BinOp(Num(10, lineno=5722, col_offset=19), Pow(), Name('shift', Load(), lineno=5722, col_offset=23), lineno=5722, col_offset=19), lineno=5722, col_offset=17), lineno=5722, col_offset=8)], [Assign([Name('cshift', Store(), lineno=5724, col_offset=8)], BinOp(Name('c', Load(), lineno=5724, col_offset=17), FloorDiv(), BinOp(Num(10, lineno=5724, col_offset=20), Pow(), UnaryOp(USub(), Name('shift', Load(), lineno=5724, col_offset=25), lineno=5724, col_offset=24), lineno=5724, col_offset=20), lineno=5724, col_offset=17), lineno=5724, col_offset=8)], lineno=5721, col_offset=4), Assign([Tuple([Name('quot', Store(), lineno=5725, col_offset=4), Name('rem', Store(), lineno=5725, col_offset=10)], Store(), lineno=5725, col_offset=4)], Call(Name('divmod', Load(), lineno=5725, col_offset=16), [Name('cshift', Load(), lineno=5725, col_offset=23), Call(Name('_log10_digits', Load(), lineno=5725, col_offset=31), [Name('q', Load(), lineno=5725, col_offset=45)], [], None, None, lineno=5725, col_offset=31)], [], None, None, lineno=5725, col_offset=16), lineno=5725, col_offset=4), Assign([Name('rem', Store(), lineno=5728, col_offset=4)], Call(Name('_div_nearest', Load(), lineno=5728, col_offset=10), [Name('rem', Load(), lineno=5728, col_offset=23), BinOp(Num(10, lineno=5728, col_offset=28), Pow(), Name('extra', Load(), lineno=5728, col_offset=32), lineno=5728, col_offset=28)], [], None, None, lineno=5728, col_offset=10), lineno=5728, col_offset=4), Return(Tuple([Call(Name('_div_nearest', Load(), lineno=5731, col_offset=11), [Call(Name('_iexp', Load(), lineno=5731, col_offset=24), [Name('rem', Load(), lineno=5731, col_offset=30), BinOp(Num(10, lineno=5731, col_offset=35), Pow(), Name('p', Load(), lineno=5731, col_offset=39), lineno=5731, col_offset=35)], [], None, None, lineno=5731, col_offset=24), Num(1000, lineno=5731, col_offset=43)], [], None, None, lineno=5731, col_offset=11), BinOp(BinOp(Name('quot', Load(), lineno=5731, col_offset=50), Sub(), Name('p', Load(), lineno=5731, col_offset=57), lineno=5731, col_offset=50), Add(), Num(3, lineno=5731, col_offset=61), lineno=5731, col_offset=59)], Load(), lineno=5731, col_offset=11), lineno=5731, col_offset=4)], [], lineno=5697, col_offset=0), FunctionDef('_dpower', arguments([Name('xc', Param(), lineno=5733, col_offset=12), Name('xe', Param(), lineno=5733, col_offset=16), Name('yc', Param(), lineno=5733, col_offset=20), Name('ye', Param(), lineno=5733, col_offset=24), Name('p', Param(), lineno=5733, col_offset=28)], None, None, []), [Expr(Str('Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    ', lineno=5746, col_offset=-1), lineno=5746, col_offset=-1), Assign([Name('b', Store(), lineno=5749, col_offset=4)], BinOp(Call(Name('len', Load(), lineno=5749, col_offset=8), [Call(Name('str', Load(), lineno=5749, col_offset=12), [Call(Name('abs', Load(), lineno=5749, col_offset=16), [Name('yc', Load(), lineno=5749, col_offset=20)], [], None, None, lineno=5749, col_offset=16)], [], None, None, lineno=5749, col_offset=12)], [], None, None, lineno=5749, col_offset=8), Add(), Name('ye', Load(), lineno=5749, col_offset=28), lineno=5749, col_offset=8), lineno=5749, col_offset=4), Assign([Name('lxc', Store(), lineno=5752, col_offset=4)], Call(Name('_dlog', Load(), lineno=5752, col_offset=10), [Name('xc', Load(), lineno=5752, col_offset=16), Name('xe', Load(), lineno=5752, col_offset=20), BinOp(BinOp(Name('p', Load(), lineno=5752, col_offset=24), Add(), Name('b', Load(), lineno=5752, col_offset=26), lineno=5752, col_offset=24), Add(), Num(1, lineno=5752, col_offset=28), lineno=5752, col_offset=27)], [], None, None, lineno=5752, col_offset=10), lineno=5752, col_offset=4), Assign([Name('shift', Store(), lineno=5755, col_offset=4)], BinOp(Name('ye', Load(), lineno=5755, col_offset=12), Sub(), Name('b', Load(), lineno=5755, col_offset=15), lineno=5755, col_offset=12), lineno=5755, col_offset=4), If(Compare(Name('shift', Load(), lineno=5756, col_offset=7), [GtE()], [Num(0, lineno=5756, col_offset=16)], lineno=5756, col_offset=7), [Assign([Name('pc', Store(), lineno=5757, col_offset=8)], BinOp(BinOp(Name('lxc', Load(), lineno=5757, col_offset=13), Mult(), Name('yc', Load(), lineno=5757, col_offset=17), lineno=5757, col_offset=13), Mult(), BinOp(Num(10, lineno=5757, col_offset=20), Pow(), Name('shift', Load(), lineno=5757, col_offset=24), lineno=5757, col_offset=20), lineno=5757, col_offset=19), lineno=5757, col_offset=8)], [Assign([Name('pc', Store(), lineno=5759, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5759, col_offset=13), [BinOp(Name('lxc', Load(), lineno=5759, col_offset=26), Mult(), Name('yc', Load(), lineno=5759, col_offset=30), lineno=5759, col_offset=26), BinOp(Num(10, lineno=5759, col_offset=34), Pow(), UnaryOp(USub(), Name('shift', Load(), lineno=5759, col_offset=39), lineno=5759, col_offset=38), lineno=5759, col_offset=34)], [], None, None, lineno=5759, col_offset=13), lineno=5759, col_offset=8)], lineno=5756, col_offset=4), If(Compare(Name('pc', Load(), lineno=5761, col_offset=7), [Eq()], [Num(0, lineno=5761, col_offset=13)], lineno=5761, col_offset=7), [If(Compare(Compare(BinOp(Call(Name('len', Load(), lineno=5764, col_offset=13), [Call(Name('str', Load(), lineno=5764, col_offset=17), [Name('xc', Load(), lineno=5764, col_offset=21)], [], None, None, lineno=5764, col_offset=17)], [], None, None, lineno=5764, col_offset=13), Add(), Name('xe', Load(), lineno=5764, col_offset=28), lineno=5764, col_offset=13), [GtE()], [Num(1, lineno=5764, col_offset=34)], lineno=5764, col_offset=13), [Eq()], [Compare(Name('yc', Load(), lineno=5764, col_offset=41), [Gt()], [Num(0, lineno=5764, col_offset=46)], lineno=5764, col_offset=41)], lineno=5764, col_offset=12), [Assign([Tuple([Name('coeff', Store(), lineno=5765, col_offset=12), Name('exp', Store(), lineno=5765, col_offset=19)], Store(), lineno=5765, col_offset=12)], Tuple([BinOp(BinOp(Num(10, lineno=5765, col_offset=25), Pow(), BinOp(Name('p', Load(), lineno=5765, col_offset=30), Sub(), Num(1, lineno=5765, col_offset=32), lineno=5765, col_offset=30), lineno=5765, col_offset=25), Add(), Num(1, lineno=5765, col_offset=35), lineno=5765, col_offset=25), BinOp(Num(1, lineno=5765, col_offset=38), Sub(), Name('p', Load(), lineno=5765, col_offset=40), lineno=5765, col_offset=38)], Load(), lineno=5765, col_offset=25), lineno=5765, col_offset=12)], [Assign([Tuple([Name('coeff', Store(), lineno=5767, col_offset=12), Name('exp', Store(), lineno=5767, col_offset=19)], Store(), lineno=5767, col_offset=12)], Tuple([BinOp(BinOp(Num(10, lineno=5767, col_offset=25), Pow(), Name('p', Load(), lineno=5767, col_offset=29), lineno=5767, col_offset=25), Sub(), Num(1, lineno=5767, col_offset=31), lineno=5767, col_offset=25), UnaryOp(USub(), Name('p', Load(), lineno=5767, col_offset=35), lineno=5767, col_offset=34)], Load(), lineno=5767, col_offset=25), lineno=5767, col_offset=12)], lineno=5764, col_offset=8)], [Assign([Tuple([Name('coeff', Store(), lineno=5769, col_offset=8), Name('exp', Store(), lineno=5769, col_offset=15)], Store(), lineno=5769, col_offset=8)], Call(Name('_dexp', Load(), lineno=5769, col_offset=21), [Name('pc', Load(), lineno=5769, col_offset=27), UnaryOp(USub(), BinOp(Name('p', Load(), lineno=5769, col_offset=33), Add(), Num(1, lineno=5769, col_offset=35), lineno=5769, col_offset=33), lineno=5769, col_offset=31), BinOp(Name('p', Load(), lineno=5769, col_offset=39), Add(), Num(1, lineno=5769, col_offset=41), lineno=5769, col_offset=39)], [], None, None, lineno=5769, col_offset=21), lineno=5769, col_offset=8), Assign([Name('coeff', Store(), lineno=5770, col_offset=8)], Call(Name('_div_nearest', Load(), lineno=5770, col_offset=16), [Name('coeff', Load(), lineno=5770, col_offset=29), Num(10, lineno=5770, col_offset=36)], [], None, None, lineno=5770, col_offset=16), lineno=5770, col_offset=8), AugAssign(Name('exp', Store(), lineno=5771, col_offset=8), Add(), Num(1, lineno=5771, col_offset=15), lineno=5771, col_offset=8)], lineno=5761, col_offset=4), Return(Tuple([Name('coeff', Load(), lineno=5773, col_offset=11), Name('exp', Load(), lineno=5773, col_offset=18)], Load(), lineno=5773, col_offset=11), lineno=5773, col_offset=4)], [], lineno=5733, col_offset=0), FunctionDef('_log10_lb', arguments([Name('c', Param(), lineno=5775, col_offset=14), Name('correction', Param(), lineno=5775, col_offset=17)], None, None, [Dict([Str('1', lineno=5776, col_offset=8), Str('2', lineno=5776, col_offset=18), Str('3', lineno=5776, col_offset=27), Str('4', lineno=5776, col_offset=36), Str('5', lineno=5776, col_offset=45), Str('6', lineno=5777, col_offset=8), Str('7', lineno=5777, col_offset=17), Str('8', lineno=5777, col_offset=26), Str('9', lineno=5777, col_offset=35)], [Num(100, lineno=5776, col_offset=13), Num(70, lineno=5776, col_offset=23), Num(53, lineno=5776, col_offset=32), Num(40, lineno=5776, col_offset=41), Num(31, lineno=5776, col_offset=50), Num(23, lineno=5777, col_offset=13), Num(16, lineno=5777, col_offset=22), Num(10, lineno=5777, col_offset=31), Num(5, lineno=5777, col_offset=40)], lineno=5775, col_offset=30)]), [Expr(Str('Compute a lower bound for 100*log10(c) for a positive integer c.', lineno=5778, col_offset=4), lineno=5778, col_offset=4), If(Compare(Name('c', Load(), lineno=5779, col_offset=7), [LtE()], [Num(0, lineno=5779, col_offset=12)], lineno=5779, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=5780, col_offset=14), [Str('The argument to _log10_lb should be nonnegative.', lineno=5780, col_offset=25)], [], None, None, lineno=5780, col_offset=14), None, None, lineno=5780, col_offset=8)], [], lineno=5779, col_offset=4), Assign([Name('str_c', Store(), lineno=5781, col_offset=4)], Call(Name('str', Load(), lineno=5781, col_offset=12), [Name('c', Load(), lineno=5781, col_offset=16)], [], None, None, lineno=5781, col_offset=12), lineno=5781, col_offset=4), Return(BinOp(BinOp(Num(100, lineno=5782, col_offset=11), Mult(), Call(Name('len', Load(), lineno=5782, col_offset=15), [Name('str_c', Load(), lineno=5782, col_offset=19)], [], None, None, lineno=5782, col_offset=15), lineno=5782, col_offset=11), Sub(), Subscript(Name('correction', Load(), lineno=5782, col_offset=28), Index(Subscript(Name('str_c', Load(), lineno=5782, col_offset=39), Index(Num(0, lineno=5782, col_offset=45)), Load(), lineno=5782, col_offset=39)), Load(), lineno=5782, col_offset=28), lineno=5782, col_offset=11), lineno=5782, col_offset=4)], [], lineno=5775, col_offset=0), FunctionDef('_convert_other', arguments([Name('other', Param(), lineno=5786, col_offset=19), Name('raiseit', Param(), lineno=5786, col_offset=26), Name('allow_float', Param(), lineno=5786, col_offset=41)], None, None, [Name('False', Load(), lineno=5786, col_offset=34), Name('False', Load(), lineno=5786, col_offset=53)]), [Expr(Str("Convert other to Decimal.\n\n    Verifies that it's ok to use in an implicit construction.\n    If allow_float is true, allow conversion from float;  this\n    is used in the comparison methods (__eq__ and friends).\n\n    ", lineno=5793, col_offset=-1), lineno=5793, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=5794, col_offset=7), [Name('other', Load(), lineno=5794, col_offset=18), Name('Decimal', Load(), lineno=5794, col_offset=25)], [], None, None, lineno=5794, col_offset=7), [Return(Name('other', Load(), lineno=5795, col_offset=15), lineno=5795, col_offset=8)], [], lineno=5794, col_offset=4), If(Call(Name('isinstance', Load(), lineno=5796, col_offset=7), [Name('other', Load(), lineno=5796, col_offset=18), Tuple([Name('int', Load(), lineno=5796, col_offset=26), Name('long', Load(), lineno=5796, col_offset=31)], Load(), lineno=5796, col_offset=26)], [], None, None, lineno=5796, col_offset=7), [Return(Call(Name('Decimal', Load(), lineno=5797, col_offset=15), [Name('other', Load(), lineno=5797, col_offset=23)], [], None, None, lineno=5797, col_offset=15), lineno=5797, col_offset=8)], [], lineno=5796, col_offset=4), If(BoolOp(And(), [Name('allow_float', Load(), lineno=5798, col_offset=7), Call(Name('isinstance', Load(), lineno=5798, col_offset=23), [Name('other', Load(), lineno=5798, col_offset=34), Name('float', Load(), lineno=5798, col_offset=41)], [], None, None, lineno=5798, col_offset=23)], lineno=5798, col_offset=7), [Return(Call(Attribute(Name('Decimal', Load(), lineno=5799, col_offset=15), 'from_float', Load(), lineno=5799, col_offset=15), [Name('other', Load(), lineno=5799, col_offset=34)], [], None, None, lineno=5799, col_offset=15), lineno=5799, col_offset=8)], [], lineno=5798, col_offset=4), If(Name('raiseit', Load(), lineno=5801, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=5802, col_offset=14), [BinOp(Str('Unable to convert %s to Decimal', lineno=5802, col_offset=24), Mod(), Name('other', Load(), lineno=5802, col_offset=60), lineno=5802, col_offset=24)], [], None, None, lineno=5802, col_offset=14), None, None, lineno=5802, col_offset=8)], [], lineno=5801, col_offset=4), Return(Name('NotImplemented', Load(), lineno=5803, col_offset=11), lineno=5803, col_offset=4)], [], lineno=5786, col_offset=0), Assign([Name('DefaultContext', Store(), lineno=5810, col_offset=0)], Call(Name('Context', Load(), lineno=5810, col_offset=17), [], [keyword('prec', Num(28, lineno=5811, col_offset=13)), keyword('rounding', Name('ROUND_HALF_EVEN', Load(), lineno=5811, col_offset=26)), keyword('traps', List([Name('DivisionByZero', Load(), lineno=5812, col_offset=15), Name('Overflow', Load(), lineno=5812, col_offset=31), Name('InvalidOperation', Load(), lineno=5812, col_offset=41)], Load(), lineno=5812, col_offset=14)), keyword('flags', List([], Load(), lineno=5813, col_offset=14)), keyword('Emax', Num(999999999, lineno=5814, col_offset=13)), keyword('Emin', Num(-999999999, lineno=5815, col_offset=14)), keyword('capitals', Num(1, lineno=5816, col_offset=17))], None, None, lineno=5810, col_offset=17), lineno=5810, col_offset=0), Assign([Name('BasicContext', Store(), lineno=5824, col_offset=0)], Call(Name('Context', Load(), lineno=5824, col_offset=15), [], [keyword('prec', Num(9, lineno=5825, col_offset=13)), keyword('rounding', Name('ROUND_HALF_UP', Load(), lineno=5825, col_offset=25)), keyword('traps', List([Name('DivisionByZero', Load(), lineno=5826, col_offset=15), Name('Overflow', Load(), lineno=5826, col_offset=31), Name('InvalidOperation', Load(), lineno=5826, col_offset=41), Name('Clamped', Load(), lineno=5826, col_offset=59), Name('Underflow', Load(), lineno=5826, col_offset=68)], Load(), lineno=5826, col_offset=14)), keyword('flags', List([], Load(), lineno=5827, col_offset=14))], None, None, lineno=5824, col_offset=15), lineno=5824, col_offset=0), Assign([Name('ExtendedContext', Store(), lineno=5830, col_offset=0)], Call(Name('Context', Load(), lineno=5830, col_offset=18), [], [keyword('prec', Num(9, lineno=5831, col_offset=13)), keyword('rounding', Name('ROUND_HALF_EVEN', Load(), lineno=5831, col_offset=25)), keyword('traps', List([], Load(), lineno=5832, col_offset=14)), keyword('flags', List([], Load(), lineno=5833, col_offset=14))], None, None, lineno=5830, col_offset=18), lineno=5830, col_offset=0), Import([alias('re', None)], lineno=5851, col_offset=0), Assign([Name('_parser', Store(), lineno=5852, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=5852, col_offset=10), 'compile', Load(), lineno=5852, col_offset=10), [Str('        # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \\s*\n    \\Z\n', lineno=5869, col_offset=-1), BinOp(BinOp(Attribute(Name('re', Load(), lineno=5869, col_offset=5), 'VERBOSE', Load(), lineno=5869, col_offset=5), BitOr(), Attribute(Name('re', Load(), lineno=5869, col_offset=18), 'IGNORECASE', Load(), lineno=5869, col_offset=18), lineno=5869, col_offset=5), BitOr(), Attribute(Name('re', Load(), lineno=5869, col_offset=34), 'UNICODE', Load(), lineno=5869, col_offset=34), lineno=5869, col_offset=32)], [], None, None, lineno=5852, col_offset=10), 'match', Load(), lineno=5852, col_offset=10), lineno=5852, col_offset=0), Assign([Name('_all_zeros', Store(), lineno=5871, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=5871, col_offset=13), 'compile', Load(), lineno=5871, col_offset=13), [Str('0*$', lineno=5871, col_offset=24)], [], None, None, lineno=5871, col_offset=13), 'match', Load(), lineno=5871, col_offset=13), lineno=5871, col_offset=0), Assign([Name('_exact_half', Store(), lineno=5872, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=5872, col_offset=14), 'compile', Load(), lineno=5872, col_offset=14), [Str('50*$', lineno=5872, col_offset=25)], [], None, None, lineno=5872, col_offset=14), 'match', Load(), lineno=5872, col_offset=14), lineno=5872, col_offset=0), Assign([Name('_parse_format_specifier_regex', Store(), lineno=5883, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=5883, col_offset=32), 'compile', Load(), lineno=5883, col_offset=32), [Str('\\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\\d+)?\n(?P<thousands_sep>,)?\n(?:\\.(?P<precision>0|(?!0)\\d+))?\n(?P<type>[eEfFgGn%])?\n\\Z\n', lineno=5895, col_offset=-1), Attribute(Name('re', Load(), lineno=5895, col_offset=5), 'VERBOSE', Load(), lineno=5895, col_offset=5)], [], None, None, lineno=5883, col_offset=32), lineno=5883, col_offset=0), Delete([Name('re', Del(), lineno=5897, col_offset=4)], lineno=5897, col_offset=0), TryExcept([Import([alias('locale', '_locale')], lineno=5903, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=5904, col_offset=7), None, [Pass( lineno=5905, col_offset=4)], lineno=5904, col_offset=0)], [], lineno=5902, col_offset=0), FunctionDef('_parse_format_specifier', arguments([Name('format_spec', Param(), lineno=5907, col_offset=28), Name('_localeconv', Param(), lineno=5907, col_offset=41)], None, None, [Name('None', Load(), lineno=5907, col_offset=53)]), [Expr(Str("Parse and validate a format specifier.\n\n    Turns a standard numeric format specifier into a dict, with the\n    following entries:\n\n      fill: fill character to pad field to minimum width\n      align: alignment type, either '<', '>', '=' or '^'\n      sign: either '+', '-' or ' '\n      minimumwidth: nonnegative integer giving minimum width\n      zeropad: boolean, indicating whether to pad with zeros\n      thousands_sep: string to use as thousands separator, or ''\n      grouping: grouping for thousands separators, in format\n        used by localeconv\n      decimal_point: string to use for decimal point\n      precision: nonnegative integer giving precision, or None\n      type: one of the characters 'eEfFgG%', or None\n      unicode: boolean (always True for Python 3.x)\n\n    ", lineno=5926, col_offset=-1), lineno=5926, col_offset=-1), Assign([Name('m', Store(), lineno=5927, col_offset=4)], Call(Attribute(Name('_parse_format_specifier_regex', Load(), lineno=5927, col_offset=8), 'match', Load(), lineno=5927, col_offset=8), [Name('format_spec', Load(), lineno=5927, col_offset=44)], [], None, None, lineno=5927, col_offset=8), lineno=5927, col_offset=4), If(Compare(Name('m', Load(), lineno=5928, col_offset=7), [Is()], [Name('None', Load(), lineno=5928, col_offset=12)], lineno=5928, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=5929, col_offset=14), [BinOp(Str('Invalid format specifier: ', lineno=5929, col_offset=25), Add(), Name('format_spec', Load(), lineno=5929, col_offset=56), lineno=5929, col_offset=25)], [], None, None, lineno=5929, col_offset=14), None, None, lineno=5929, col_offset=8)], [], lineno=5928, col_offset=4), Assign([Name('format_dict', Store(), lineno=5932, col_offset=4)], Call(Attribute(Name('m', Load(), lineno=5932, col_offset=18), 'groupdict', Load(), lineno=5932, col_offset=18), [], [], None, None, lineno=5932, col_offset=18), lineno=5932, col_offset=4), Assign([Name('fill', Store(), lineno=5936, col_offset=4)], Subscript(Name('format_dict', Load(), lineno=5936, col_offset=11), Index(Str('fill', lineno=5936, col_offset=23)), Load(), lineno=5936, col_offset=11), lineno=5936, col_offset=4), Assign([Name('align', Store(), lineno=5937, col_offset=4)], Subscript(Name('format_dict', Load(), lineno=5937, col_offset=12), Index(Str('align', lineno=5937, col_offset=24)), Load(), lineno=5937, col_offset=12), lineno=5937, col_offset=4), Assign([Subscript(Name('format_dict', Load(), lineno=5938, col_offset=4), Index(Str('zeropad', lineno=5938, col_offset=16)), Store(), lineno=5938, col_offset=4)], Compare(Subscript(Name('format_dict', Load(), lineno=5938, col_offset=30), Index(Str('zeropad', lineno=5938, col_offset=42)), Load(), lineno=5938, col_offset=30), [IsNot()], [Name('None', Load(), lineno=5938, col_offset=60)], lineno=5938, col_offset=30), lineno=5938, col_offset=4), If(Subscript(Name('format_dict', Load(), lineno=5939, col_offset=7), Index(Str('zeropad', lineno=5939, col_offset=19)), Load(), lineno=5939, col_offset=7), [If(Compare(Name('fill', Load(), lineno=5940, col_offset=11), [IsNot()], [Name('None', Load(), lineno=5940, col_offset=23)], lineno=5940, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=5941, col_offset=18), [BinOp(Str("Fill character conflicts with '0' in format specifier: ", lineno=5941, col_offset=29), Add(), Name('format_spec', Load(), lineno=5942, col_offset=56), lineno=5941, col_offset=29)], [], None, None, lineno=5941, col_offset=18), None, None, lineno=5941, col_offset=12)], [], lineno=5940, col_offset=8), If(Compare(Name('align', Load(), lineno=5943, col_offset=11), [IsNot()], [Name('None', Load(), lineno=5943, col_offset=24)], lineno=5943, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=5944, col_offset=18), [BinOp(Str("Alignment conflicts with '0' in format specifier: ", lineno=5944, col_offset=29), Add(), Name('format_spec', Load(), lineno=5945, col_offset=52), lineno=5944, col_offset=29)], [], None, None, lineno=5944, col_offset=18), None, None, lineno=5944, col_offset=12)], [], lineno=5943, col_offset=8)], [], lineno=5939, col_offset=4), Assign([Subscript(Name('format_dict', Load(), lineno=5946, col_offset=4), Index(Str('fill', lineno=5946, col_offset=16)), Store(), lineno=5946, col_offset=4)], BoolOp(Or(), [Name('fill', Load(), lineno=5946, col_offset=26), Str(' ', lineno=5946, col_offset=34)], lineno=5946, col_offset=26), lineno=5946, col_offset=4), Assign([Subscript(Name('format_dict', Load(), lineno=5950, col_offset=4), Index(Str('align', lineno=5950, col_offset=16)), Store(), lineno=5950, col_offset=4)], BoolOp(Or(), [Name('align', Load(), lineno=5950, col_offset=27), Str('>', lineno=5950, col_offset=36)], lineno=5950, col_offset=27), lineno=5950, col_offset=4), If(Compare(Subscript(Name('format_dict', Load(), lineno=5953, col_offset=7), Index(Str('sign', lineno=5953, col_offset=19)), Load(), lineno=5953, col_offset=7), [Is()], [Name('None', Load(), lineno=5953, col_offset=30)], lineno=5953, col_offset=7), [Assign([Subscript(Name('format_dict', Load(), lineno=5954, col_offset=8), Index(Str('sign', lineno=5954, col_offset=20)), Store(), lineno=5954, col_offset=8)], Str('-', lineno=5954, col_offset=30), lineno=5954, col_offset=8)], [], lineno=5953, col_offset=4), Assign([Subscript(Name('format_dict', Load(), lineno=5957, col_offset=4), Index(Str('minimumwidth', lineno=5957, col_offset=16)), Store(), lineno=5957, col_offset=4)], Call(Name('int', Load(), lineno=5957, col_offset=34), [BoolOp(Or(), [Subscript(Name('format_dict', Load(), lineno=5957, col_offset=38), Index(Str('minimumwidth', lineno=5957, col_offset=50)), Load(), lineno=5957, col_offset=38), Str('0', lineno=5957, col_offset=69)], lineno=5957, col_offset=38)], [], None, None, lineno=5957, col_offset=34), lineno=5957, col_offset=4), If(Compare(Subscript(Name('format_dict', Load(), lineno=5958, col_offset=7), Index(Str('precision', lineno=5958, col_offset=19)), Load(), lineno=5958, col_offset=7), [IsNot()], [Name('None', Load(), lineno=5958, col_offset=39)], lineno=5958, col_offset=7), [Assign([Subscript(Name('format_dict', Load(), lineno=5959, col_offset=8), Index(Str('precision', lineno=5959, col_offset=20)), Store(), lineno=5959, col_offset=8)], Call(Name('int', Load(), lineno=5959, col_offset=35), [Subscript(Name('format_dict', Load(), lineno=5959, col_offset=39), Index(Str('precision', lineno=5959, col_offset=51)), Load(), lineno=5959, col_offset=39)], [], None, None, lineno=5959, col_offset=35), lineno=5959, col_offset=8)], [], lineno=5958, col_offset=4), If(Compare(Subscript(Name('format_dict', Load(), lineno=5963, col_offset=7), Index(Str('precision', lineno=5963, col_offset=19)), Load(), lineno=5963, col_offset=7), [Eq()], [Num(0, lineno=5963, col_offset=35)], lineno=5963, col_offset=7), [If(BoolOp(Or(), [Compare(Subscript(Name('format_dict', Load(), lineno=5964, col_offset=11), Index(Str('type', lineno=5964, col_offset=23)), Load(), lineno=5964, col_offset=11), [Is()], [Name('None', Load(), lineno=5964, col_offset=34)], lineno=5964, col_offset=11), Compare(Subscript(Name('format_dict', Load(), lineno=5964, col_offset=42), Index(Str('type', lineno=5964, col_offset=54)), Load(), lineno=5964, col_offset=42), [In()], [Str('gG', lineno=5964, col_offset=65)], lineno=5964, col_offset=42)], lineno=5964, col_offset=11), [Assign([Subscript(Name('format_dict', Load(), lineno=5965, col_offset=12), Index(Str('precision', lineno=5965, col_offset=24)), Store(), lineno=5965, col_offset=12)], Num(1, lineno=5965, col_offset=39), lineno=5965, col_offset=12)], [], lineno=5964, col_offset=8)], [], lineno=5963, col_offset=4), If(Compare(Subscript(Name('format_dict', Load(), lineno=5969, col_offset=7), Index(Str('type', lineno=5969, col_offset=19)), Load(), lineno=5969, col_offset=7), [Eq()], [Str('n', lineno=5969, col_offset=30)], lineno=5969, col_offset=7), [Assign([Subscript(Name('format_dict', Load(), lineno=5971, col_offset=8), Index(Str('type', lineno=5971, col_offset=20)), Store(), lineno=5971, col_offset=8)], Str('g', lineno=5971, col_offset=30), lineno=5971, col_offset=8), If(Compare(Name('_localeconv', Load(), lineno=5972, col_offset=11), [Is()], [Name('None', Load(), lineno=5972, col_offset=26)], lineno=5972, col_offset=11), [Assign([Name('_localeconv', Store(), lineno=5973, col_offset=12)], Call(Attribute(Name('_locale', Load(), lineno=5973, col_offset=26), 'localeconv', Load(), lineno=5973, col_offset=26), [], [], None, None, lineno=5973, col_offset=26), lineno=5973, col_offset=12)], [], lineno=5972, col_offset=8), If(Compare(Subscript(Name('format_dict', Load(), lineno=5974, col_offset=11), Index(Str('thousands_sep', lineno=5974, col_offset=23)), Load(), lineno=5974, col_offset=11), [IsNot()], [Name('None', Load(), lineno=5974, col_offset=47)], lineno=5974, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=5975, col_offset=18), [BinOp(Str("Explicit thousands separator conflicts with 'n' type in format specifier: ", lineno=5975, col_offset=29), Add(), Name('format_spec', Load(), lineno=5976, col_offset=64), lineno=5975, col_offset=29)], [], None, None, lineno=5975, col_offset=18), None, None, lineno=5975, col_offset=12)], [], lineno=5974, col_offset=8), Assign([Subscript(Name('format_dict', Load(), lineno=5977, col_offset=8), Index(Str('thousands_sep', lineno=5977, col_offset=20)), Store(), lineno=5977, col_offset=8)], Subscript(Name('_localeconv', Load(), lineno=5977, col_offset=39), Index(Str('thousands_sep', lineno=5977, col_offset=51)), Load(), lineno=5977, col_offset=39), lineno=5977, col_offset=8), Assign([Subscript(Name('format_dict', Load(), lineno=5978, col_offset=8), Index(Str('grouping', lineno=5978, col_offset=20)), Store(), lineno=5978, col_offset=8)], Subscript(Name('_localeconv', Load(), lineno=5978, col_offset=34), Index(Str('grouping', lineno=5978, col_offset=46)), Load(), lineno=5978, col_offset=34), lineno=5978, col_offset=8), Assign([Subscript(Name('format_dict', Load(), lineno=5979, col_offset=8), Index(Str('decimal_point', lineno=5979, col_offset=20)), Store(), lineno=5979, col_offset=8)], Subscript(Name('_localeconv', Load(), lineno=5979, col_offset=39), Index(Str('decimal_point', lineno=5979, col_offset=51)), Load(), lineno=5979, col_offset=39), lineno=5979, col_offset=8)], [If(Compare(Subscript(Name('format_dict', Load(), lineno=5981, col_offset=11), Index(Str('thousands_sep', lineno=5981, col_offset=23)), Load(), lineno=5981, col_offset=11), [Is()], [Name('None', Load(), lineno=5981, col_offset=43)], lineno=5981, col_offset=11), [Assign([Subscript(Name('format_dict', Load(), lineno=5982, col_offset=12), Index(Str('thousands_sep', lineno=5982, col_offset=24)), Store(), lineno=5982, col_offset=12)], Str('', lineno=5982, col_offset=43), lineno=5982, col_offset=12)], [], lineno=5981, col_offset=8), Assign([Subscript(Name('format_dict', Load(), lineno=5983, col_offset=8), Index(Str('grouping', lineno=5983, col_offset=20)), Store(), lineno=5983, col_offset=8)], List([Num(3, lineno=5983, col_offset=35), Num(0, lineno=5983, col_offset=38)], Load(), lineno=5983, col_offset=34), lineno=5983, col_offset=8), Assign([Subscript(Name('format_dict', Load(), lineno=5984, col_offset=8), Index(Str('decimal_point', lineno=5984, col_offset=20)), Store(), lineno=5984, col_offset=8)], Str('.', lineno=5984, col_offset=39), lineno=5984, col_offset=8)], lineno=5969, col_offset=4), Assign([Subscript(Name('format_dict', Load(), lineno=5987, col_offset=4), Index(Str('unicode', lineno=5987, col_offset=16)), Store(), lineno=5987, col_offset=4)], Call(Name('isinstance', Load(), lineno=5987, col_offset=29), [Name('format_spec', Load(), lineno=5987, col_offset=40), Name('unicode', Load(), lineno=5987, col_offset=53)], [], None, None, lineno=5987, col_offset=29), lineno=5987, col_offset=4), Return(Name('format_dict', Load(), lineno=5989, col_offset=11), lineno=5989, col_offset=4)], [], lineno=5907, col_offset=0), FunctionDef('_format_align', arguments([Name('sign', Param(), lineno=5991, col_offset=18), Name('body', Param(), lineno=5991, col_offset=24), Name('spec', Param(), lineno=5991, col_offset=30)], None, None, []), [Expr(Str("Given an unpadded, non-aligned numeric string 'body' and sign\n    string 'sign', add padding and aligment conforming to the given\n    format specifier dictionary 'spec' (as produced by\n    parse_format_specifier).\n\n    Also converts result to unicode if necessary.\n\n    ", lineno=5999, col_offset=-1), lineno=5999, col_offset=-1), Assign([Name('minimumwidth', Store(), lineno=6001, col_offset=4)], Subscript(Name('spec', Load(), lineno=6001, col_offset=19), Index(Str('minimumwidth', lineno=6001, col_offset=24)), Load(), lineno=6001, col_offset=19), lineno=6001, col_offset=4), Assign([Name('fill', Store(), lineno=6002, col_offset=4)], Subscript(Name('spec', Load(), lineno=6002, col_offset=11), Index(Str('fill', lineno=6002, col_offset=16)), Load(), lineno=6002, col_offset=11), lineno=6002, col_offset=4), Assign([Name('padding', Store(), lineno=6003, col_offset=4)], BinOp(Name('fill', Load(), lineno=6003, col_offset=14), Mult(), BinOp(BinOp(Name('minimumwidth', Load(), lineno=6003, col_offset=20), Sub(), Call(Name('len', Load(), lineno=6003, col_offset=35), [Name('sign', Load(), lineno=6003, col_offset=39)], [], None, None, lineno=6003, col_offset=35), lineno=6003, col_offset=20), Sub(), Call(Name('len', Load(), lineno=6003, col_offset=47), [Name('body', Load(), lineno=6003, col_offset=51)], [], None, None, lineno=6003, col_offset=47), lineno=6003, col_offset=45), lineno=6003, col_offset=14), lineno=6003, col_offset=4), Assign([Name('align', Store(), lineno=6005, col_offset=4)], Subscript(Name('spec', Load(), lineno=6005, col_offset=12), Index(Str('align', lineno=6005, col_offset=17)), Load(), lineno=6005, col_offset=12), lineno=6005, col_offset=4), If(Compare(Name('align', Load(), lineno=6006, col_offset=7), [Eq()], [Str('<', lineno=6006, col_offset=16)], lineno=6006, col_offset=7), [Assign([Name('result', Store(), lineno=6007, col_offset=8)], BinOp(BinOp(Name('sign', Load(), lineno=6007, col_offset=17), Add(), Name('body', Load(), lineno=6007, col_offset=24), lineno=6007, col_offset=17), Add(), Name('padding', Load(), lineno=6007, col_offset=31), lineno=6007, col_offset=29), lineno=6007, col_offset=8)], [If(Compare(Name('align', Load(), lineno=6008, col_offset=9), [Eq()], [Str('>', lineno=6008, col_offset=18)], lineno=6008, col_offset=9), [Assign([Name('result', Store(), lineno=6009, col_offset=8)], BinOp(BinOp(Name('padding', Load(), lineno=6009, col_offset=17), Add(), Name('sign', Load(), lineno=6009, col_offset=27), lineno=6009, col_offset=17), Add(), Name('body', Load(), lineno=6009, col_offset=34), lineno=6009, col_offset=32), lineno=6009, col_offset=8)], [If(Compare(Name('align', Load(), lineno=6010, col_offset=9), [Eq()], [Str('=', lineno=6010, col_offset=18)], lineno=6010, col_offset=9), [Assign([Name('result', Store(), lineno=6011, col_offset=8)], BinOp(BinOp(Name('sign', Load(), lineno=6011, col_offset=17), Add(), Name('padding', Load(), lineno=6011, col_offset=24), lineno=6011, col_offset=17), Add(), Name('body', Load(), lineno=6011, col_offset=34), lineno=6011, col_offset=32), lineno=6011, col_offset=8)], [If(Compare(Name('align', Load(), lineno=6012, col_offset=9), [Eq()], [Str('^', lineno=6012, col_offset=18)], lineno=6012, col_offset=9), [Assign([Name('half', Store(), lineno=6013, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=6013, col_offset=15), [Name('padding', Load(), lineno=6013, col_offset=19)], [], None, None, lineno=6013, col_offset=15), FloorDiv(), Num(2, lineno=6013, col_offset=29), lineno=6013, col_offset=15), lineno=6013, col_offset=8), Assign([Name('result', Store(), lineno=6014, col_offset=8)], BinOp(BinOp(BinOp(Subscript(Name('padding', Load(), lineno=6014, col_offset=17), Slice(None, Name('half', Load(), lineno=6014, col_offset=26), None), Load(), lineno=6014, col_offset=17), Add(), Name('sign', Load(), lineno=6014, col_offset=34), lineno=6014, col_offset=17), Add(), Name('body', Load(), lineno=6014, col_offset=41), lineno=6014, col_offset=39), Add(), Subscript(Name('padding', Load(), lineno=6014, col_offset=48), Slice(Name('half', Load(), lineno=6014, col_offset=56), None, None), Load(), lineno=6014, col_offset=48), lineno=6014, col_offset=46), lineno=6014, col_offset=8)], [Raise(Call(Name('ValueError', Load(), lineno=6016, col_offset=14), [Str('Unrecognised alignment field', lineno=6016, col_offset=25)], [], None, None, lineno=6016, col_offset=14), None, None, lineno=6016, col_offset=8)], lineno=6012, col_offset=9)], lineno=6010, col_offset=9)], lineno=6008, col_offset=9)], lineno=6006, col_offset=4), If(Subscript(Name('spec', Load(), lineno=6019, col_offset=7), Index(Str('unicode', lineno=6019, col_offset=12)), Load(), lineno=6019, col_offset=7), [Assign([Name('result', Store(), lineno=6020, col_offset=8)], Call(Name('unicode', Load(), lineno=6020, col_offset=17), [Name('result', Load(), lineno=6020, col_offset=25)], [], None, None, lineno=6020, col_offset=17), lineno=6020, col_offset=8)], [], lineno=6019, col_offset=4), Return(Name('result', Load(), lineno=6022, col_offset=11), lineno=6022, col_offset=4)], [], lineno=5991, col_offset=0), FunctionDef('_group_lengths', arguments([Name('grouping', Param(), lineno=6024, col_offset=19)], None, None, []), [Expr(Str('Convert a localeconv-style grouping into a (possibly infinite)\n    iterable of integers representing group lengths.\n\n    ', lineno=6028, col_offset=-1), lineno=6028, col_offset=-1), ImportFrom('itertools', [alias('chain', None), alias('repeat', None)], 0, lineno=6037, col_offset=4), If(UnaryOp(Not(), Name('grouping', Load(), lineno=6038, col_offset=11), lineno=6038, col_offset=7), [Return(List([], Load(), lineno=6039, col_offset=15), lineno=6039, col_offset=8)], [If(BoolOp(And(), [Compare(Subscript(Name('grouping', Load(), lineno=6040, col_offset=9), Index(Num(-1, lineno=6040, col_offset=19)), Load(), lineno=6040, col_offset=9), [Eq()], [Num(0, lineno=6040, col_offset=25)], lineno=6040, col_offset=9), Compare(Call(Name('len', Load(), lineno=6040, col_offset=31), [Name('grouping', Load(), lineno=6040, col_offset=35)], [], None, None, lineno=6040, col_offset=31), [GtE()], [Num(2, lineno=6040, col_offset=48)], lineno=6040, col_offset=31)], lineno=6040, col_offset=9), [Return(Call(Name('chain', Load(), lineno=6041, col_offset=15), [Subscript(Name('grouping', Load(), lineno=6041, col_offset=21), Slice(None, Num(-1, lineno=6041, col_offset=32), None), Load(), lineno=6041, col_offset=21), Call(Name('repeat', Load(), lineno=6041, col_offset=36), [Subscript(Name('grouping', Load(), lineno=6041, col_offset=43), Index(Num(-2, lineno=6041, col_offset=53)), Load(), lineno=6041, col_offset=43)], [], None, None, lineno=6041, col_offset=36)], [], None, None, lineno=6041, col_offset=15), lineno=6041, col_offset=8)], [If(Compare(Subscript(Name('grouping', Load(), lineno=6042, col_offset=9), Index(Num(-1, lineno=6042, col_offset=19)), Load(), lineno=6042, col_offset=9), [Eq()], [Attribute(Name('_locale', Load(), lineno=6042, col_offset=25), 'CHAR_MAX', Load(), lineno=6042, col_offset=25)], lineno=6042, col_offset=9), [Return(Subscript(Name('grouping', Load(), lineno=6043, col_offset=15), Slice(None, Num(-1, lineno=6043, col_offset=26), None), Load(), lineno=6043, col_offset=15), lineno=6043, col_offset=8)], [Raise(Call(Name('ValueError', Load(), lineno=6045, col_offset=14), [Str('unrecognised format for grouping', lineno=6045, col_offset=25)], [], None, None, lineno=6045, col_offset=14), None, None, lineno=6045, col_offset=8)], lineno=6042, col_offset=9)], lineno=6040, col_offset=9)], lineno=6038, col_offset=4)], [], lineno=6024, col_offset=0), FunctionDef('_insert_thousands_sep', arguments([Name('digits', Param(), lineno=6047, col_offset=26), Name('spec', Param(), lineno=6047, col_offset=34), Name('min_width', Param(), lineno=6047, col_offset=40)], None, None, [Num(1, lineno=6047, col_offset=50)]), [Expr(Str("Insert thousands separators into a digit string.\n\n    spec is a dictionary whose keys should include 'thousands_sep' and\n    'grouping'; typically it's the result of parsing the format\n    specifier using _parse_format_specifier.\n\n    The min_width keyword argument gives the minimum length of the\n    result, which will be padded on the left with zeros if necessary.\n\n    If necessary, the zero padding adds an extra '0' on the left to\n    avoid a leading thousands separator.  For example, inserting\n    commas every three digits in '123456', with min_width=8, gives\n    '0,123,456', even though that has length 9.\n\n    ", lineno=6062, col_offset=-1), lineno=6062, col_offset=-1), Assign([Name('sep', Store(), lineno=6064, col_offset=4)], Subscript(Name('spec', Load(), lineno=6064, col_offset=10), Index(Str('thousands_sep', lineno=6064, col_offset=15)), Load(), lineno=6064, col_offset=10), lineno=6064, col_offset=4), Assign([Name('grouping', Store(), lineno=6065, col_offset=4)], Subscript(Name('spec', Load(), lineno=6065, col_offset=15), Index(Str('grouping', lineno=6065, col_offset=20)), Load(), lineno=6065, col_offset=15), lineno=6065, col_offset=4), Assign([Name('groups', Store(), lineno=6067, col_offset=4)], List([], Load(), lineno=6067, col_offset=13), lineno=6067, col_offset=4), For(Name('l', Store(), lineno=6068, col_offset=8), Call(Name('_group_lengths', Load(), lineno=6068, col_offset=13), [Name('grouping', Load(), lineno=6068, col_offset=28)], [], None, None, lineno=6068, col_offset=13), [If(Compare(Name('l', Load(), lineno=6069, col_offset=11), [LtE()], [Num(0, lineno=6069, col_offset=16)], lineno=6069, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=6070, col_offset=18), [Str('group length should be positive', lineno=6070, col_offset=29)], [], None, None, lineno=6070, col_offset=18), None, None, lineno=6070, col_offset=12)], [], lineno=6069, col_offset=8), Assign([Name('l', Store(), lineno=6072, col_offset=8)], Call(Name('min', Load(), lineno=6072, col_offset=12), [Call(Name('max', Load(), lineno=6072, col_offset=16), [Call(Name('len', Load(), lineno=6072, col_offset=20), [Name('digits', Load(), lineno=6072, col_offset=24)], [], None, None, lineno=6072, col_offset=20), Name('min_width', Load(), lineno=6072, col_offset=33), Num(1, lineno=6072, col_offset=44)], [], None, None, lineno=6072, col_offset=16), Name('l', Load(), lineno=6072, col_offset=48)], [], None, None, lineno=6072, col_offset=12), lineno=6072, col_offset=8), Expr(Call(Attribute(Name('groups', Load(), lineno=6073, col_offset=8), 'append', Load(), lineno=6073, col_offset=8), [BinOp(BinOp(Str('0', lineno=6073, col_offset=22), Mult(), BinOp(Name('l', Load(), lineno=6073, col_offset=27), Sub(), Call(Name('len', Load(), lineno=6073, col_offset=31), [Name('digits', Load(), lineno=6073, col_offset=35)], [], None, None, lineno=6073, col_offset=31), lineno=6073, col_offset=27), lineno=6073, col_offset=22), Add(), Subscript(Name('digits', Load(), lineno=6073, col_offset=46), Slice(UnaryOp(USub(), Name('l', Load(), lineno=6073, col_offset=54), lineno=6073, col_offset=53), None, None), Load(), lineno=6073, col_offset=46), lineno=6073, col_offset=22)], [], None, None, lineno=6073, col_offset=8), lineno=6073, col_offset=8), Assign([Name('digits', Store(), lineno=6074, col_offset=8)], Subscript(Name('digits', Load(), lineno=6074, col_offset=17), Slice(None, UnaryOp(USub(), Name('l', Load(), lineno=6074, col_offset=26), lineno=6074, col_offset=25), None), Load(), lineno=6074, col_offset=17), lineno=6074, col_offset=8), AugAssign(Name('min_width', Store(), lineno=6075, col_offset=8), Sub(), Name('l', Load(), lineno=6075, col_offset=21), lineno=6075, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('digits', Load(), lineno=6076, col_offset=15), lineno=6076, col_offset=11), Compare(Name('min_width', Load(), lineno=6076, col_offset=26), [LtE()], [Num(0, lineno=6076, col_offset=39)], lineno=6076, col_offset=26)], lineno=6076, col_offset=11), [Break( lineno=6077, col_offset=12)], [], lineno=6076, col_offset=8), AugAssign(Name('min_width', Store(), lineno=6078, col_offset=8), Sub(), Call(Name('len', Load(), lineno=6078, col_offset=21), [Name('sep', Load(), lineno=6078, col_offset=25)], [], None, None, lineno=6078, col_offset=21), lineno=6078, col_offset=8)], [Assign([Name('l', Store(), lineno=6080, col_offset=8)], Call(Name('max', Load(), lineno=6080, col_offset=12), [Call(Name('len', Load(), lineno=6080, col_offset=16), [Name('digits', Load(), lineno=6080, col_offset=20)], [], None, None, lineno=6080, col_offset=16), Name('min_width', Load(), lineno=6080, col_offset=29), Num(1, lineno=6080, col_offset=40)], [], None, None, lineno=6080, col_offset=12), lineno=6080, col_offset=8), Expr(Call(Attribute(Name('groups', Load(), lineno=6081, col_offset=8), 'append', Load(), lineno=6081, col_offset=8), [BinOp(BinOp(Str('0', lineno=6081, col_offset=22), Mult(), BinOp(Name('l', Load(), lineno=6081, col_offset=27), Sub(), Call(Name('len', Load(), lineno=6081, col_offset=31), [Name('digits', Load(), lineno=6081, col_offset=35)], [], None, None, lineno=6081, col_offset=31), lineno=6081, col_offset=27), lineno=6081, col_offset=22), Add(), Subscript(Name('digits', Load(), lineno=6081, col_offset=46), Slice(UnaryOp(USub(), Name('l', Load(), lineno=6081, col_offset=54), lineno=6081, col_offset=53), None, None), Load(), lineno=6081, col_offset=46), lineno=6081, col_offset=22)], [], None, None, lineno=6081, col_offset=8), lineno=6081, col_offset=8)], lineno=6068, col_offset=4), Return(Call(Attribute(Name('sep', Load(), lineno=6082, col_offset=11), 'join', Load(), lineno=6082, col_offset=11), [Call(Name('reversed', Load(), lineno=6082, col_offset=20), [Name('groups', Load(), lineno=6082, col_offset=29)], [], None, None, lineno=6082, col_offset=20)], [], None, None, lineno=6082, col_offset=11), lineno=6082, col_offset=4)], [], lineno=6047, col_offset=0), FunctionDef('_format_sign', arguments([Name('is_negative', Param(), lineno=6084, col_offset=17), Name('spec', Param(), lineno=6084, col_offset=30)], None, None, []), [Expr(Str('Determine sign character.', lineno=6085, col_offset=4), lineno=6085, col_offset=4), If(Name('is_negative', Load(), lineno=6087, col_offset=7), [Return(Str('-', lineno=6088, col_offset=15), lineno=6088, col_offset=8)], [If(Compare(Subscript(Name('spec', Load(), lineno=6089, col_offset=9), Index(Str('sign', lineno=6089, col_offset=14)), Load(), lineno=6089, col_offset=9), [In()], [Str(' +', lineno=6089, col_offset=25)], lineno=6089, col_offset=9), [Return(Subscript(Name('spec', Load(), lineno=6090, col_offset=15), Index(Str('sign', lineno=6090, col_offset=20)), Load(), lineno=6090, col_offset=15), lineno=6090, col_offset=8)], [Return(Str('', lineno=6092, col_offset=15), lineno=6092, col_offset=8)], lineno=6089, col_offset=9)], lineno=6087, col_offset=4)], [], lineno=6084, col_offset=0), FunctionDef('_format_number', arguments([Name('is_negative', Param(), lineno=6094, col_offset=19), Name('intpart', Param(), lineno=6094, col_offset=32), Name('fracpart', Param(), lineno=6094, col_offset=41), Name('exp', Param(), lineno=6094, col_offset=51), Name('spec', Param(), lineno=6094, col_offset=56)], None, None, []), [Expr(Str("Format a number, given the following data:\n\n    is_negative: true if the number is negative, else false\n    intpart: string of digits that must appear before the decimal point\n    fracpart: string of digits that must come after the point\n    exp: exponent, as an integer\n    spec: dictionary resulting from parsing the format specifier\n\n    This function uses the information in spec to:\n      insert separators (decimal separator and thousands separators)\n      format the sign\n      format the exponent\n      add trailing '%' for the '%' type\n      zero-pad if necessary\n      fill and align if necessary\n    ", lineno=6110, col_offset=-1), lineno=6110, col_offset=-1), Assign([Name('sign', Store(), lineno=6112, col_offset=4)], Call(Name('_format_sign', Load(), lineno=6112, col_offset=11), [Name('is_negative', Load(), lineno=6112, col_offset=24), Name('spec', Load(), lineno=6112, col_offset=37)], [], None, None, lineno=6112, col_offset=11), lineno=6112, col_offset=4), If(Name('fracpart', Load(), lineno=6114, col_offset=7), [Assign([Name('fracpart', Store(), lineno=6115, col_offset=8)], BinOp(Subscript(Name('spec', Load(), lineno=6115, col_offset=19), Index(Str('decimal_point', lineno=6115, col_offset=24)), Load(), lineno=6115, col_offset=19), Add(), Name('fracpart', Load(), lineno=6115, col_offset=43), lineno=6115, col_offset=19), lineno=6115, col_offset=8)], [], lineno=6114, col_offset=4), If(BoolOp(Or(), [Compare(Name('exp', Load(), lineno=6117, col_offset=7), [NotEq()], [Num(0, lineno=6117, col_offset=14)], lineno=6117, col_offset=7), Compare(Subscript(Name('spec', Load(), lineno=6117, col_offset=19), Index(Str('type', lineno=6117, col_offset=24)), Load(), lineno=6117, col_offset=19), [In()], [Str('eE', lineno=6117, col_offset=35)], lineno=6117, col_offset=19)], lineno=6117, col_offset=7), [Assign([Name('echar', Store(), lineno=6118, col_offset=8)], Subscript(Dict([Str('E', lineno=6118, col_offset=17), Str('e', lineno=6118, col_offset=27), Str('G', lineno=6118, col_offset=37), Str('g', lineno=6118, col_offset=47)], [Str('E', lineno=6118, col_offset=22), Str('e', lineno=6118, col_offset=32), Str('E', lineno=6118, col_offset=42), Str('e', lineno=6118, col_offset=52)], lineno=6118, col_offset=16), Index(Subscript(Name('spec', Load(), lineno=6118, col_offset=57), Index(Str('type', lineno=6118, col_offset=62)), Load(), lineno=6118, col_offset=57)), Load(), lineno=6118, col_offset=16), lineno=6118, col_offset=8), AugAssign(Name('fracpart', Store(), lineno=6119, col_offset=8), Add(), Call(Attribute(Str('{0}{1:+}', lineno=6119, col_offset=20), 'format', Load(), lineno=6119, col_offset=20), [Name('echar', Load(), lineno=6119, col_offset=38), Name('exp', Load(), lineno=6119, col_offset=45)], [], None, None, lineno=6119, col_offset=20), lineno=6119, col_offset=8)], [], lineno=6117, col_offset=4), If(Compare(Subscript(Name('spec', Load(), lineno=6120, col_offset=7), Index(Str('type', lineno=6120, col_offset=12)), Load(), lineno=6120, col_offset=7), [Eq()], [Str('%', lineno=6120, col_offset=23)], lineno=6120, col_offset=7), [AugAssign(Name('fracpart', Store(), lineno=6121, col_offset=8), Add(), Str('%', lineno=6121, col_offset=20), lineno=6121, col_offset=8)], [], lineno=6120, col_offset=4), If(Subscript(Name('spec', Load(), lineno=6123, col_offset=7), Index(Str('zeropad', lineno=6123, col_offset=12)), Load(), lineno=6123, col_offset=7), [Assign([Name('min_width', Store(), lineno=6124, col_offset=8)], BinOp(BinOp(Subscript(Name('spec', Load(), lineno=6124, col_offset=20), Index(Str('minimumwidth', lineno=6124, col_offset=25)), Load(), lineno=6124, col_offset=20), Sub(), Call(Name('len', Load(), lineno=6124, col_offset=43), [Name('fracpart', Load(), lineno=6124, col_offset=47)], [], None, None, lineno=6124, col_offset=43), lineno=6124, col_offset=20), Sub(), Call(Name('len', Load(), lineno=6124, col_offset=59), [Name('sign', Load(), lineno=6124, col_offset=63)], [], None, None, lineno=6124, col_offset=59), lineno=6124, col_offset=57), lineno=6124, col_offset=8)], [Assign([Name('min_width', Store(), lineno=6126, col_offset=8)], Num(0, lineno=6126, col_offset=20), lineno=6126, col_offset=8)], lineno=6123, col_offset=4), Assign([Name('intpart', Store(), lineno=6127, col_offset=4)], Call(Name('_insert_thousands_sep', Load(), lineno=6127, col_offset=14), [Name('intpart', Load(), lineno=6127, col_offset=36), Name('spec', Load(), lineno=6127, col_offset=45), Name('min_width', Load(), lineno=6127, col_offset=51)], [], None, None, lineno=6127, col_offset=14), lineno=6127, col_offset=4), Return(Call(Name('_format_align', Load(), lineno=6129, col_offset=11), [Name('sign', Load(), lineno=6129, col_offset=25), BinOp(Name('intpart', Load(), lineno=6129, col_offset=31), Add(), Name('fracpart', Load(), lineno=6129, col_offset=39), lineno=6129, col_offset=31), Name('spec', Load(), lineno=6129, col_offset=49)], [], None, None, lineno=6129, col_offset=11), lineno=6129, col_offset=4)], [], lineno=6094, col_offset=0), Assign([Name('_Infinity', Store(), lineno=6135, col_offset=0)], Call(Name('Decimal', Load(), lineno=6135, col_offset=12), [Str('Inf', lineno=6135, col_offset=20)], [], None, None, lineno=6135, col_offset=12), lineno=6135, col_offset=0), Assign([Name('_NegativeInfinity', Store(), lineno=6136, col_offset=0)], Call(Name('Decimal', Load(), lineno=6136, col_offset=20), [Str('-Inf', lineno=6136, col_offset=28)], [], None, None, lineno=6136, col_offset=20), lineno=6136, col_offset=0), Assign([Name('_NaN', Store(), lineno=6137, col_offset=0)], Call(Name('Decimal', Load(), lineno=6137, col_offset=7), [Str('NaN', lineno=6137, col_offset=15)], [], None, None, lineno=6137, col_offset=7), lineno=6137, col_offset=0), Assign([Name('_Zero', Store(), lineno=6138, col_offset=0)], Call(Name('Decimal', Load(), lineno=6138, col_offset=8), [Num(0, lineno=6138, col_offset=16)], [], None, None, lineno=6138, col_offset=8), lineno=6138, col_offset=0), Assign([Name('_One', Store(), lineno=6139, col_offset=0)], Call(Name('Decimal', Load(), lineno=6139, col_offset=7), [Num(1, lineno=6139, col_offset=15)], [], None, None, lineno=6139, col_offset=7), lineno=6139, col_offset=0), Assign([Name('_NegativeOne', Store(), lineno=6140, col_offset=0)], Call(Name('Decimal', Load(), lineno=6140, col_offset=15), [Num(-1, lineno=6140, col_offset=24)], [], None, None, lineno=6140, col_offset=15), lineno=6140, col_offset=0), Assign([Name('_SignedInfinity', Store(), lineno=6143, col_offset=0)], Tuple([Name('_Infinity', Load(), lineno=6143, col_offset=19), Name('_NegativeInfinity', Load(), lineno=6143, col_offset=30)], Load(), lineno=6143, col_offset=19), lineno=6143, col_offset=0), If(Compare(Name('__name__', Load(), lineno=6147, col_offset=3), [Eq()], [Str('__main__', lineno=6147, col_offset=15)], lineno=6147, col_offset=3), [Import([alias('doctest', None), alias('sys', None)], lineno=6148, col_offset=4), Expr(Call(Attribute(Name('doctest', Load(), lineno=6149, col_offset=4), 'testmod', Load(), lineno=6149, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=6149, col_offset=20), 'modules', Load(), lineno=6149, col_offset=20), Index(Name('__name__', Load(), lineno=6149, col_offset=32)), Load(), lineno=6149, col_offset=20)], [], None, None, lineno=6149, col_offset=4), lineno=6149, col_offset=4)], [], lineno=6147, col_offset=0)])
