Module([Expr(Str(" Python 'base64_codec' Codec - base64 content transfer encoding\n\n    Unlike most of the other codecs which target Unicode, this codec\n    will return Python string objects for both encode and decode.\n\n    Written by Marc-Andre Lemburg (mal@lemburg.com).\n\n", lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('codecs', None), alias('base64', None)], lineno=9, col_offset=0), FunctionDef('base64_encode', arguments([Name('input', Param(), lineno=13, col_offset=18), Name('errors', Param(), lineno=13, col_offset=24)], None, None, [Str('strict', lineno=13, col_offset=31)]), [Expr(Str(" Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    ", lineno=22, col_offset=-1), lineno=22, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=23, col_offset=11), [Eq()], [Str('strict', lineno=23, col_offset=21)], lineno=23, col_offset=11), None, lineno=23, col_offset=4), Assign([Name('output', Store(), lineno=24, col_offset=4)], Call(Attribute(Name('base64', Load(), lineno=24, col_offset=13), 'encodestring', Load(), lineno=24, col_offset=13), [Name('input', Load(), lineno=24, col_offset=33)], [], None, None, lineno=24, col_offset=13), lineno=24, col_offset=4), Return(Tuple([Name('output', Load(), lineno=25, col_offset=12), Call(Name('len', Load(), lineno=25, col_offset=20), [Name('input', Load(), lineno=25, col_offset=24)], [], None, None, lineno=25, col_offset=20)], Load(), lineno=25, col_offset=12), lineno=25, col_offset=4)], [], lineno=13, col_offset=0), FunctionDef('base64_decode', arguments([Name('input', Param(), lineno=27, col_offset=18), Name('errors', Param(), lineno=27, col_offset=24)], None, None, [Str('strict', lineno=27, col_offset=31)]), [Expr(Str(" Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    ", lineno=40, col_offset=-1), lineno=40, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=41, col_offset=11), [Eq()], [Str('strict', lineno=41, col_offset=21)], lineno=41, col_offset=11), None, lineno=41, col_offset=4), Assign([Name('output', Store(), lineno=42, col_offset=4)], Call(Attribute(Name('base64', Load(), lineno=42, col_offset=13), 'decodestring', Load(), lineno=42, col_offset=13), [Name('input', Load(), lineno=42, col_offset=33)], [], None, None, lineno=42, col_offset=13), lineno=42, col_offset=4), Return(Tuple([Name('output', Load(), lineno=43, col_offset=12), Call(Name('len', Load(), lineno=43, col_offset=20), [Name('input', Load(), lineno=43, col_offset=24)], [], None, None, lineno=43, col_offset=20)], Load(), lineno=43, col_offset=12), lineno=43, col_offset=4)], [], lineno=27, col_offset=0), ClassDef('Codec', [Attribute(Name('codecs', Load(), lineno=45, col_offset=12), 'Codec', Load(), lineno=45, col_offset=12)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=47, col_offset=15), Name('input', Param(), lineno=47, col_offset=21), Name('errors', Param(), lineno=47, col_offset=27)], None, None, [Str('strict', lineno=47, col_offset=34)]), [Return(Call(Name('base64_encode', Load(), lineno=48, col_offset=15), [Name('input', Load(), lineno=48, col_offset=29), Name('errors', Load(), lineno=48, col_offset=35)], [], None, None, lineno=48, col_offset=15), lineno=48, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=49, col_offset=15), Name('input', Param(), lineno=49, col_offset=21), Name('errors', Param(), lineno=49, col_offset=27)], None, None, [Str('strict', lineno=49, col_offset=34)]), [Return(Call(Name('base64_decode', Load(), lineno=50, col_offset=15), [Name('input', Load(), lineno=50, col_offset=29), Name('errors', Load(), lineno=50, col_offset=35)], [], None, None, lineno=50, col_offset=15), lineno=50, col_offset=8)], [], lineno=49, col_offset=4)], [], lineno=45, col_offset=0), ClassDef('IncrementalEncoder', [Attribute(Name('codecs', Load(), lineno=52, col_offset=25), 'IncrementalEncoder', Load(), lineno=52, col_offset=25)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=53, col_offset=15), Name('input', Param(), lineno=53, col_offset=21), Name('final', Param(), lineno=53, col_offset=28)], None, None, [Name('False', Load(), lineno=53, col_offset=34)]), [Assert(Compare(Attribute(Name('self', Load(), lineno=54, col_offset=15), 'errors', Load(), lineno=54, col_offset=15), [Eq()], [Str('strict', lineno=54, col_offset=30)], lineno=54, col_offset=15), None, lineno=54, col_offset=8), Return(Call(Attribute(Name('base64', Load(), lineno=55, col_offset=15), 'encodestring', Load(), lineno=55, col_offset=15), [Name('input', Load(), lineno=55, col_offset=35)], [], None, None, lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=53, col_offset=4)], [], lineno=52, col_offset=0), ClassDef('IncrementalDecoder', [Attribute(Name('codecs', Load(), lineno=57, col_offset=25), 'IncrementalDecoder', Load(), lineno=57, col_offset=25)], [FunctionDef('decode', arguments([Name('self', Param(), lineno=58, col_offset=15), Name('input', Param(), lineno=58, col_offset=21), Name('final', Param(), lineno=58, col_offset=28)], None, None, [Name('False', Load(), lineno=58, col_offset=34)]), [Assert(Compare(Attribute(Name('self', Load(), lineno=59, col_offset=15), 'errors', Load(), lineno=59, col_offset=15), [Eq()], [Str('strict', lineno=59, col_offset=30)], lineno=59, col_offset=15), None, lineno=59, col_offset=8), Return(Call(Attribute(Name('base64', Load(), lineno=60, col_offset=15), 'decodestring', Load(), lineno=60, col_offset=15), [Name('input', Load(), lineno=60, col_offset=35)], [], None, None, lineno=60, col_offset=15), lineno=60, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=57, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=62, col_offset=19), Attribute(Name('codecs', Load(), lineno=62, col_offset=25), 'StreamWriter', Load(), lineno=62, col_offset=25)], [Pass( lineno=63, col_offset=4)], [], lineno=62, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=65, col_offset=19), Attribute(Name('codecs', Load(), lineno=65, col_offset=25), 'StreamReader', Load(), lineno=65, col_offset=25)], [Pass( lineno=66, col_offset=4)], [], lineno=65, col_offset=0), FunctionDef('getregentry', arguments([], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=71, col_offset=11), 'CodecInfo', Load(), lineno=71, col_offset=11), [], [keyword('name', Str('base64', lineno=72, col_offset=13)), keyword('encode', Name('base64_encode', Load(), lineno=73, col_offset=15)), keyword('decode', Name('base64_decode', Load(), lineno=74, col_offset=15)), keyword('incrementalencoder', Name('IncrementalEncoder', Load(), lineno=75, col_offset=27)), keyword('incrementaldecoder', Name('IncrementalDecoder', Load(), lineno=76, col_offset=27)), keyword('streamwriter', Name('StreamWriter', Load(), lineno=77, col_offset=21)), keyword('streamreader', Name('StreamReader', Load(), lineno=78, col_offset=21))], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=70, col_offset=0)])
