Module([Expr(Str('test script for a few new invalid token catches', lineno=2, col_offset=0), lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=4, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=5, col_offset=0), ClassDef('EOFTestCase', [Attribute(Name('unittest', Load(), lineno=7, col_offset=18), 'TestCase', Load(), lineno=7, col_offset=18)], [FunctionDef('test_EOFC', arguments([Name('self', Param(), lineno=8, col_offset=18)], None, None, []), [Assign([Name('expect', Store(), lineno=9, col_offset=8)], Str('EOL while scanning string literal (<string>, line 1)', lineno=9, col_offset=17), lineno=9, col_offset=8), TryExcept([Expr(Call(Name('eval', Load(), lineno=11, col_offset=12), [Str("'this is a test            ", lineno=12, col_offset=-1)], [], None, None, lineno=11, col_offset=12), lineno=11, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=13, col_offset=15), Name('msg', Store(), lineno=13, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=14, col_offset=12), 'assertEqual', Load(), lineno=14, col_offset=12), [Call(Name('str', Load(), lineno=14, col_offset=29), [Name('msg', Load(), lineno=14, col_offset=33)], [], None, None, lineno=14, col_offset=29), Name('expect', Load(), lineno=14, col_offset=39)], [], None, None, lineno=14, col_offset=12), lineno=14, col_offset=12)], lineno=13, col_offset=8)], [Raise(Attribute(Name('test_support', Load(), lineno=16, col_offset=18), 'TestFailed', Load(), lineno=16, col_offset=18), None, None, lineno=16, col_offset=12)], lineno=10, col_offset=8)], [], lineno=8, col_offset=4), FunctionDef('test_EOFS', arguments([Name('self', Param(), lineno=18, col_offset=18)], None, None, []), [Assign([Name('expect', Store(), lineno=19, col_offset=8)], Str('EOF while scanning triple-quoted string literal (<string>, line 1)', lineno=19, col_offset=18), lineno=19, col_offset=8), TryExcept([Expr(Call(Name('eval', Load(), lineno=22, col_offset=12), [Str("'''this is a test", lineno=22, col_offset=17)], [], None, None, lineno=22, col_offset=12), lineno=22, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=23, col_offset=15), Name('msg', Store(), lineno=23, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=24, col_offset=12), 'assertEqual', Load(), lineno=24, col_offset=12), [Call(Name('str', Load(), lineno=24, col_offset=29), [Name('msg', Load(), lineno=24, col_offset=33)], [], None, None, lineno=24, col_offset=29), Name('expect', Load(), lineno=24, col_offset=39)], [], None, None, lineno=24, col_offset=12), lineno=24, col_offset=12)], lineno=23, col_offset=8)], [Raise(Attribute(Name('test_support', Load(), lineno=26, col_offset=18), 'TestFailed', Load(), lineno=26, col_offset=18), None, None, lineno=26, col_offset=12)], lineno=21, col_offset=8)], [], lineno=18, col_offset=4)], [], lineno=7, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=29, col_offset=4), 'run_unittest', Load(), lineno=29, col_offset=4), [Name('EOFTestCase', Load(), lineno=29, col_offset=30)], [], None, None, lineno=29, col_offset=4), lineno=29, col_offset=4)], [], lineno=28, col_offset=0), If(Compare(Name('__name__', Load(), lineno=31, col_offset=3), [Eq()], [Str('__main__', lineno=31, col_offset=15)], lineno=31, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=32, col_offset=4), [], [], None, None, lineno=32, col_offset=4), lineno=32, col_offset=4)], [], lineno=31, col_offset=0)])
