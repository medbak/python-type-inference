Module([Expr(Str('Implementation of JSONDecoder\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), Import([alias('re', None)], lineno=3, col_offset=0), Import([alias('sys', None)], lineno=4, col_offset=0), Import([alias('struct', None)], lineno=5, col_offset=0), ImportFrom('json.scanner', [alias('make_scanner', None)], 0, lineno=7, col_offset=0), TryExcept([ImportFrom('_json', [alias('scanstring', 'c_scanstring')], 0, lineno=9, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=10, col_offset=7), None, [Assign([Name('c_scanstring', Store(), lineno=11, col_offset=4)], Name('None', Load(), lineno=11, col_offset=19), lineno=11, col_offset=4)], lineno=10, col_offset=0)], [], lineno=8, col_offset=0), Assign([Name('__all__', Store(), lineno=13, col_offset=0)], List([Str('JSONDecoder', lineno=13, col_offset=11)], Load(), lineno=13, col_offset=10), lineno=13, col_offset=0), Assign([Name('FLAGS', Store(), lineno=15, col_offset=0)], BinOp(BinOp(Attribute(Name('re', Load(), lineno=15, col_offset=8), 'VERBOSE', Load(), lineno=15, col_offset=8), BitOr(), Attribute(Name('re', Load(), lineno=15, col_offset=21), 'MULTILINE', Load(), lineno=15, col_offset=21), lineno=15, col_offset=8), BitOr(), Attribute(Name('re', Load(), lineno=15, col_offset=36), 'DOTALL', Load(), lineno=15, col_offset=36), lineno=15, col_offset=34), lineno=15, col_offset=0), FunctionDef('_floatconstants', arguments([], None, None, []), [Assign([Name('_BYTES', Store(), lineno=18, col_offset=4)], Call(Attribute(Str('7FF80000000000007FF0000000000000', lineno=18, col_offset=13), 'decode', Load(), lineno=18, col_offset=13), [Str('hex', lineno=18, col_offset=55)], [], None, None, lineno=18, col_offset=13), lineno=18, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=19, col_offset=7), 'byteorder', Load(), lineno=19, col_offset=7), [NotEq()], [Str('big', lineno=19, col_offset=24)], lineno=19, col_offset=7), [Assign([Name('_BYTES', Store(), lineno=20, col_offset=8)], BinOp(Subscript(Subscript(Name('_BYTES', Load(), lineno=20, col_offset=17), Slice(None, Num(8, lineno=20, col_offset=25), None), Load(), lineno=20, col_offset=17), Slice(None, None, Num(-1, lineno=20, col_offset=31)), Load(), lineno=20, col_offset=17), Add(), Subscript(Subscript(Name('_BYTES', Load(), lineno=20, col_offset=36), Slice(Num(8, lineno=20, col_offset=43), None, None), Load(), lineno=20, col_offset=36), Slice(None, None, Num(-1, lineno=20, col_offset=50)), Load(), lineno=20, col_offset=36), lineno=20, col_offset=17), lineno=20, col_offset=8)], [], lineno=19, col_offset=4), Assign([Tuple([Name('nan', Store(), lineno=21, col_offset=4), Name('inf', Store(), lineno=21, col_offset=9)], Store(), lineno=21, col_offset=4)], Call(Attribute(Name('struct', Load(), lineno=21, col_offset=15), 'unpack', Load(), lineno=21, col_offset=15), [Str('dd', lineno=21, col_offset=29), Name('_BYTES', Load(), lineno=21, col_offset=35)], [], None, None, lineno=21, col_offset=15), lineno=21, col_offset=4), Return(Tuple([Name('nan', Load(), lineno=22, col_offset=11), Name('inf', Load(), lineno=22, col_offset=16), UnaryOp(USub(), Name('inf', Load(), lineno=22, col_offset=22), lineno=22, col_offset=21)], Load(), lineno=22, col_offset=11), lineno=22, col_offset=4)], [], lineno=17, col_offset=0), Assign([Tuple([Name('NaN', Store(), lineno=24, col_offset=0), Name('PosInf', Store(), lineno=24, col_offset=5), Name('NegInf', Store(), lineno=24, col_offset=13)], Store(), lineno=24, col_offset=0)], Call(Name('_floatconstants', Load(), lineno=24, col_offset=22), [], [], None, None, lineno=24, col_offset=22), lineno=24, col_offset=0), FunctionDef('linecol', arguments([Name('doc', Param(), lineno=27, col_offset=12), Name('pos', Param(), lineno=27, col_offset=17)], None, None, []), [Assign([Name('lineno', Store(), lineno=28, col_offset=4)], BinOp(Call(Attribute(Name('doc', Load(), lineno=28, col_offset=13), 'count', Load(), lineno=28, col_offset=13), [Str('\n', lineno=28, col_offset=23), Num(0, lineno=28, col_offset=29), Name('pos', Load(), lineno=28, col_offset=32)], [], None, None, lineno=28, col_offset=13), Add(), Num(1, lineno=28, col_offset=39), lineno=28, col_offset=13), lineno=28, col_offset=4), If(Compare(Name('lineno', Load(), lineno=29, col_offset=7), [Eq()], [Num(1, lineno=29, col_offset=17)], lineno=29, col_offset=7), [Assign([Name('colno', Store(), lineno=30, col_offset=8)], Name('pos', Load(), lineno=30, col_offset=16), lineno=30, col_offset=8)], [Assign([Name('colno', Store(), lineno=32, col_offset=8)], BinOp(Name('pos', Load(), lineno=32, col_offset=16), Sub(), Call(Attribute(Name('doc', Load(), lineno=32, col_offset=22), 'rindex', Load(), lineno=32, col_offset=22), [Str('\n', lineno=32, col_offset=33), Num(0, lineno=32, col_offset=39), Name('pos', Load(), lineno=32, col_offset=42)], [], None, None, lineno=32, col_offset=22), lineno=32, col_offset=16), lineno=32, col_offset=8)], lineno=29, col_offset=4), Return(Tuple([Name('lineno', Load(), lineno=33, col_offset=11), Name('colno', Load(), lineno=33, col_offset=19)], Load(), lineno=33, col_offset=11), lineno=33, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('errmsg', arguments([Name('msg', Param(), lineno=36, col_offset=11), Name('doc', Param(), lineno=36, col_offset=16), Name('pos', Param(), lineno=36, col_offset=21), Name('end', Param(), lineno=36, col_offset=26)], None, None, [Name('None', Load(), lineno=36, col_offset=30)]), [Assign([Tuple([Name('lineno', Store(), lineno=38, col_offset=4), Name('colno', Store(), lineno=38, col_offset=12)], Store(), lineno=38, col_offset=4)], Call(Name('linecol', Load(), lineno=38, col_offset=20), [Name('doc', Load(), lineno=38, col_offset=28), Name('pos', Load(), lineno=38, col_offset=33)], [], None, None, lineno=38, col_offset=20), lineno=38, col_offset=4), If(Compare(Name('end', Load(), lineno=39, col_offset=7), [Is()], [Name('None', Load(), lineno=39, col_offset=14)], lineno=39, col_offset=7), [Assign([Name('fmt', Store(), lineno=40, col_offset=8)], Str('{0}: line {1} column {2} (char {3})', lineno=40, col_offset=14), lineno=40, col_offset=8), Return(Call(Attribute(Name('fmt', Load(), lineno=41, col_offset=15), 'format', Load(), lineno=41, col_offset=15), [Name('msg', Load(), lineno=41, col_offset=26), Name('lineno', Load(), lineno=41, col_offset=31), Name('colno', Load(), lineno=41, col_offset=39), Name('pos', Load(), lineno=41, col_offset=46)], [], None, None, lineno=41, col_offset=15), lineno=41, col_offset=8)], [], lineno=39, col_offset=4), Assign([Tuple([Name('endlineno', Store(), lineno=44, col_offset=4), Name('endcolno', Store(), lineno=44, col_offset=15)], Store(), lineno=44, col_offset=4)], Call(Name('linecol', Load(), lineno=44, col_offset=26), [Name('doc', Load(), lineno=44, col_offset=34), Name('end', Load(), lineno=44, col_offset=39)], [], None, None, lineno=44, col_offset=26), lineno=44, col_offset=4), Assign([Name('fmt', Store(), lineno=45, col_offset=4)], Str('{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})', lineno=45, col_offset=10), lineno=45, col_offset=4), Return(Call(Attribute(Name('fmt', Load(), lineno=46, col_offset=11), 'format', Load(), lineno=46, col_offset=11), [Name('msg', Load(), lineno=46, col_offset=22), Name('lineno', Load(), lineno=46, col_offset=27), Name('colno', Load(), lineno=46, col_offset=35), Name('endlineno', Load(), lineno=46, col_offset=42), Name('endcolno', Load(), lineno=46, col_offset=53), Name('pos', Load(), lineno=46, col_offset=63), Name('end', Load(), lineno=46, col_offset=68)], [], None, None, lineno=46, col_offset=11), lineno=46, col_offset=4)], [], lineno=36, col_offset=0), Assign([Name('_CONSTANTS', Store(), lineno=51, col_offset=0)], Dict([Str('-Infinity', lineno=52, col_offset=4), Str('Infinity', lineno=53, col_offset=4), Str('NaN', lineno=54, col_offset=4)], [Name('NegInf', Load(), lineno=52, col_offset=17), Name('PosInf', Load(), lineno=53, col_offset=16), Name('NaN', Load(), lineno=54, col_offset=11)], lineno=51, col_offset=13), lineno=51, col_offset=0), Assign([Name('STRINGCHUNK', Store(), lineno=57, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=57, col_offset=14), 'compile', Load(), lineno=57, col_offset=14), [Str('(.*?)(["\\\\\\x00-\\x1f])', lineno=57, col_offset=25), Name('FLAGS', Load(), lineno=57, col_offset=51)], [], None, None, lineno=57, col_offset=14), lineno=57, col_offset=0), Assign([Name('BACKSLASH', Store(), lineno=58, col_offset=0)], Dict([Str('"', lineno=59, col_offset=4), Str('\\', lineno=59, col_offset=15), Str('/', lineno=59, col_offset=28), Str('b', lineno=60, col_offset=4), Str('f', lineno=60, col_offset=16), Str('n', lineno=60, col_offset=28), Str('r', lineno=60, col_offset=40), Str('t', lineno=60, col_offset=52)], [Str(u'"', lineno=59, col_offset=9), Str(u'\\', lineno=59, col_offset=21), Str(u'/', lineno=59, col_offset=33), Str(u'\x08', lineno=60, col_offset=9), Str(u'\x0c', lineno=60, col_offset=21), Str(u'\n', lineno=60, col_offset=33), Str(u'\r', lineno=60, col_offset=45), Str(u'\t', lineno=60, col_offset=57)], lineno=58, col_offset=12), lineno=58, col_offset=0), Assign([Name('DEFAULT_ENCODING', Store(), lineno=63, col_offset=0)], Str('utf-8', lineno=63, col_offset=19), lineno=63, col_offset=0), FunctionDef('py_scanstring', arguments([Name('s', Param(), lineno=65, col_offset=18), Name('end', Param(), lineno=65, col_offset=21), Name('encoding', Param(), lineno=65, col_offset=26), Name('strict', Param(), lineno=65, col_offset=41), Name('_b', Param(), lineno=66, col_offset=8), Name('_m', Param(), lineno=66, col_offset=22)], None, None, [Name('None', Load(), lineno=65, col_offset=35), Name('True', Load(), lineno=65, col_offset=48), Name('BACKSLASH', Load(), lineno=66, col_offset=11), Attribute(Name('STRINGCHUNK', Load(), lineno=66, col_offset=25), 'match', Load(), lineno=66, col_offset=25)]), [Expr(Str('Scan the string s for a JSON string. End is the index of the\n    character in s after the quote that started the JSON string.\n    Unescapes all valid JSON string escape sequences and raises ValueError\n    on attempt to decode an invalid string. If strict is False then literal\n    control characters are allowed in the string.\n\n    Returns a tuple of the decoded string and the index of the character in s\n    after the end quote.', lineno=74, col_offset=-1), lineno=74, col_offset=-1), If(Compare(Name('encoding', Load(), lineno=75, col_offset=7), [Is()], [Name('None', Load(), lineno=75, col_offset=19)], lineno=75, col_offset=7), [Assign([Name('encoding', Store(), lineno=76, col_offset=8)], Name('DEFAULT_ENCODING', Load(), lineno=76, col_offset=19), lineno=76, col_offset=8)], [], lineno=75, col_offset=4), Assign([Name('chunks', Store(), lineno=77, col_offset=4)], List([], Load(), lineno=77, col_offset=13), lineno=77, col_offset=4), Assign([Name('_append', Store(), lineno=78, col_offset=4)], Attribute(Name('chunks', Load(), lineno=78, col_offset=14), 'append', Load(), lineno=78, col_offset=14), lineno=78, col_offset=4), Assign([Name('begin', Store(), lineno=79, col_offset=4)], BinOp(Name('end', Load(), lineno=79, col_offset=12), Sub(), Num(1, lineno=79, col_offset=18), lineno=79, col_offset=12), lineno=79, col_offset=4), While(Num(1, lineno=80, col_offset=10), [Assign([Name('chunk', Store(), lineno=81, col_offset=8)], Call(Name('_m', Load(), lineno=81, col_offset=16), [Name('s', Load(), lineno=81, col_offset=19), Name('end', Load(), lineno=81, col_offset=22)], [], None, None, lineno=81, col_offset=16), lineno=81, col_offset=8), If(Compare(Name('chunk', Load(), lineno=82, col_offset=11), [Is()], [Name('None', Load(), lineno=82, col_offset=20)], lineno=82, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=83, col_offset=18), [Call(Name('errmsg', Load(), lineno=84, col_offset=16), [Str('Unterminated string starting at', lineno=84, col_offset=23), Name('s', Load(), lineno=84, col_offset=58), Name('begin', Load(), lineno=84, col_offset=61)], [], None, None, lineno=84, col_offset=16)], [], None, None, lineno=83, col_offset=18), None, None, lineno=83, col_offset=12)], [], lineno=82, col_offset=8), Assign([Name('end', Store(), lineno=85, col_offset=8)], Call(Attribute(Name('chunk', Load(), lineno=85, col_offset=14), 'end', Load(), lineno=85, col_offset=14), [], [], None, None, lineno=85, col_offset=14), lineno=85, col_offset=8), Assign([Tuple([Name('content', Store(), lineno=86, col_offset=8), Name('terminator', Store(), lineno=86, col_offset=17)], Store(), lineno=86, col_offset=8)], Call(Attribute(Name('chunk', Load(), lineno=86, col_offset=30), 'groups', Load(), lineno=86, col_offset=30), [], [], None, None, lineno=86, col_offset=30), lineno=86, col_offset=8), If(Name('content', Load(), lineno=88, col_offset=11), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=89, col_offset=19), [Name('content', Load(), lineno=89, col_offset=30), Name('unicode', Load(), lineno=89, col_offset=39)], [], None, None, lineno=89, col_offset=19), lineno=89, col_offset=15), [Assign([Name('content', Store(), lineno=90, col_offset=16)], Call(Name('unicode', Load(), lineno=90, col_offset=26), [Name('content', Load(), lineno=90, col_offset=34), Name('encoding', Load(), lineno=90, col_offset=43)], [], None, None, lineno=90, col_offset=26), lineno=90, col_offset=16)], [], lineno=89, col_offset=12), Expr(Call(Name('_append', Load(), lineno=91, col_offset=12), [Name('content', Load(), lineno=91, col_offset=20)], [], None, None, lineno=91, col_offset=12), lineno=91, col_offset=12)], [], lineno=88, col_offset=8), If(Compare(Name('terminator', Load(), lineno=94, col_offset=11), [Eq()], [Str('"', lineno=94, col_offset=25)], lineno=94, col_offset=11), [Break( lineno=95, col_offset=12)], [If(Compare(Name('terminator', Load(), lineno=96, col_offset=13), [NotEq()], [Str('\\', lineno=96, col_offset=27)], lineno=96, col_offset=13), [If(Name('strict', Load(), lineno=97, col_offset=15), [Assign([Name('msg', Store(), lineno=99, col_offset=16)], Call(Attribute(Str('Invalid control character {0!r} at', lineno=99, col_offset=22), 'format', Load(), lineno=99, col_offset=22), [Name('terminator', Load(), lineno=99, col_offset=66)], [], None, None, lineno=99, col_offset=22), lineno=99, col_offset=16), Raise(Call(Name('ValueError', Load(), lineno=100, col_offset=22), [Call(Name('errmsg', Load(), lineno=100, col_offset=33), [Name('msg', Load(), lineno=100, col_offset=40), Name('s', Load(), lineno=100, col_offset=45), Name('end', Load(), lineno=100, col_offset=48)], [], None, None, lineno=100, col_offset=33)], [], None, None, lineno=100, col_offset=22), None, None, lineno=100, col_offset=16)], [Expr(Call(Name('_append', Load(), lineno=102, col_offset=16), [Name('terminator', Load(), lineno=102, col_offset=24)], [], None, None, lineno=102, col_offset=16), lineno=102, col_offset=16), Continue( lineno=103, col_offset=16)], lineno=97, col_offset=12)], [], lineno=96, col_offset=13)], lineno=94, col_offset=8), TryExcept([Assign([Name('esc', Store(), lineno=105, col_offset=12)], Subscript(Name('s', Load(), lineno=105, col_offset=18), Index(Name('end', Load(), lineno=105, col_offset=20)), Load(), lineno=105, col_offset=18), lineno=105, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=106, col_offset=15), None, [Raise(Call(Name('ValueError', Load(), lineno=107, col_offset=18), [Call(Name('errmsg', Load(), lineno=108, col_offset=16), [Str('Unterminated string starting at', lineno=108, col_offset=23), Name('s', Load(), lineno=108, col_offset=58), Name('begin', Load(), lineno=108, col_offset=61)], [], None, None, lineno=108, col_offset=16)], [], None, None, lineno=107, col_offset=18), None, None, lineno=107, col_offset=12)], lineno=106, col_offset=8)], [], lineno=104, col_offset=8), If(Compare(Name('esc', Load(), lineno=110, col_offset=11), [NotEq()], [Str('u', lineno=110, col_offset=18)], lineno=110, col_offset=11), [TryExcept([Assign([Name('char', Store(), lineno=112, col_offset=16)], Subscript(Name('_b', Load(), lineno=112, col_offset=23), Index(Name('esc', Load(), lineno=112, col_offset=26)), Load(), lineno=112, col_offset=23), lineno=112, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=113, col_offset=19), None, [Assign([Name('msg', Store(), lineno=114, col_offset=16)], BinOp(Str('Invalid \\escape: ', lineno=114, col_offset=22), Add(), Call(Name('repr', Load(), lineno=114, col_offset=45), [Name('esc', Load(), lineno=114, col_offset=50)], [], None, None, lineno=114, col_offset=45), lineno=114, col_offset=22), lineno=114, col_offset=16), Raise(Call(Name('ValueError', Load(), lineno=115, col_offset=22), [Call(Name('errmsg', Load(), lineno=115, col_offset=33), [Name('msg', Load(), lineno=115, col_offset=40), Name('s', Load(), lineno=115, col_offset=45), Name('end', Load(), lineno=115, col_offset=48)], [], None, None, lineno=115, col_offset=33)], [], None, None, lineno=115, col_offset=22), None, None, lineno=115, col_offset=16)], lineno=113, col_offset=12)], [], lineno=111, col_offset=12), AugAssign(Name('end', Store(), lineno=116, col_offset=12), Add(), Num(1, lineno=116, col_offset=19), lineno=116, col_offset=12)], [Assign([Name('esc', Store(), lineno=119, col_offset=12)], Subscript(Name('s', Load(), lineno=119, col_offset=18), Slice(BinOp(Name('end', Load(), lineno=119, col_offset=20), Add(), Num(1, lineno=119, col_offset=26), lineno=119, col_offset=20), BinOp(Name('end', Load(), lineno=119, col_offset=28), Add(), Num(5, lineno=119, col_offset=34), lineno=119, col_offset=28), None), Load(), lineno=119, col_offset=18), lineno=119, col_offset=12), Assign([Name('next_end', Store(), lineno=120, col_offset=12)], BinOp(Name('end', Load(), lineno=120, col_offset=23), Add(), Num(5, lineno=120, col_offset=29), lineno=120, col_offset=23), lineno=120, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=121, col_offset=15), [Name('esc', Load(), lineno=121, col_offset=19)], [], None, None, lineno=121, col_offset=15), [NotEq()], [Num(4, lineno=121, col_offset=27)], lineno=121, col_offset=15), [Assign([Name('msg', Store(), lineno=122, col_offset=16)], Str('Invalid \\uXXXX escape', lineno=122, col_offset=22), lineno=122, col_offset=16), Raise(Call(Name('ValueError', Load(), lineno=123, col_offset=22), [Call(Name('errmsg', Load(), lineno=123, col_offset=33), [Name('msg', Load(), lineno=123, col_offset=40), Name('s', Load(), lineno=123, col_offset=45), Name('end', Load(), lineno=123, col_offset=48)], [], None, None, lineno=123, col_offset=33)], [], None, None, lineno=123, col_offset=22), None, None, lineno=123, col_offset=16)], [], lineno=121, col_offset=12), Assign([Name('uni', Store(), lineno=124, col_offset=12)], Call(Name('int', Load(), lineno=124, col_offset=18), [Name('esc', Load(), lineno=124, col_offset=22), Num(16, lineno=124, col_offset=27)], [], None, None, lineno=124, col_offset=18), lineno=124, col_offset=12), If(BoolOp(And(), [Compare(Num(55296, lineno=126, col_offset=15), [LtE(), LtE()], [Name('uni', Load(), lineno=126, col_offset=25), Num(56319, lineno=126, col_offset=32)], lineno=126, col_offset=15), Compare(Attribute(Name('sys', Load(), lineno=126, col_offset=43), 'maxunicode', Load(), lineno=126, col_offset=43), [Gt()], [Num(65535, lineno=126, col_offset=60)], lineno=126, col_offset=43)], lineno=126, col_offset=15), [Assign([Name('msg', Store(), lineno=127, col_offset=16)], Str('Invalid \\uXXXX\\uXXXX surrogate pair', lineno=127, col_offset=22), lineno=127, col_offset=16), If(UnaryOp(Not(), Compare(Subscript(Name('s', Load(), lineno=128, col_offset=23), Slice(BinOp(Name('end', Load(), lineno=128, col_offset=25), Add(), Num(5, lineno=128, col_offset=31), lineno=128, col_offset=25), BinOp(Name('end', Load(), lineno=128, col_offset=33), Add(), Num(7, lineno=128, col_offset=39), lineno=128, col_offset=33), None), Load(), lineno=128, col_offset=23), [Eq()], [Str('\\u', lineno=128, col_offset=45)], lineno=128, col_offset=23), lineno=128, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=129, col_offset=26), [Call(Name('errmsg', Load(), lineno=129, col_offset=37), [Name('msg', Load(), lineno=129, col_offset=44), Name('s', Load(), lineno=129, col_offset=49), Name('end', Load(), lineno=129, col_offset=52)], [], None, None, lineno=129, col_offset=37)], [], None, None, lineno=129, col_offset=26), None, None, lineno=129, col_offset=20)], [], lineno=128, col_offset=16), Assign([Name('esc2', Store(), lineno=130, col_offset=16)], Subscript(Name('s', Load(), lineno=130, col_offset=23), Slice(BinOp(Name('end', Load(), lineno=130, col_offset=25), Add(), Num(7, lineno=130, col_offset=31), lineno=130, col_offset=25), BinOp(Name('end', Load(), lineno=130, col_offset=33), Add(), Num(11, lineno=130, col_offset=39), lineno=130, col_offset=33), None), Load(), lineno=130, col_offset=23), lineno=130, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=131, col_offset=19), [Name('esc2', Load(), lineno=131, col_offset=23)], [], None, None, lineno=131, col_offset=19), [NotEq()], [Num(4, lineno=131, col_offset=32)], lineno=131, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=132, col_offset=26), [Call(Name('errmsg', Load(), lineno=132, col_offset=37), [Name('msg', Load(), lineno=132, col_offset=44), Name('s', Load(), lineno=132, col_offset=49), Name('end', Load(), lineno=132, col_offset=52)], [], None, None, lineno=132, col_offset=37)], [], None, None, lineno=132, col_offset=26), None, None, lineno=132, col_offset=20)], [], lineno=131, col_offset=16), Assign([Name('uni2', Store(), lineno=133, col_offset=16)], Call(Name('int', Load(), lineno=133, col_offset=23), [Name('esc2', Load(), lineno=133, col_offset=27), Num(16, lineno=133, col_offset=33)], [], None, None, lineno=133, col_offset=23), lineno=133, col_offset=16), Assign([Name('uni', Store(), lineno=134, col_offset=16)], BinOp(Num(65536, lineno=134, col_offset=22), Add(), BinOp(BinOp(BinOp(Name('uni', Load(), lineno=134, col_offset=35), Sub(), Num(55296, lineno=134, col_offset=41), lineno=134, col_offset=35), LShift(), Num(10, lineno=134, col_offset=52), lineno=134, col_offset=34), BitOr(), BinOp(Name('uni2', Load(), lineno=134, col_offset=59), Sub(), Num(56320, lineno=134, col_offset=66), lineno=134, col_offset=59), lineno=134, col_offset=33), lineno=134, col_offset=22), lineno=134, col_offset=16), AugAssign(Name('next_end', Store(), lineno=135, col_offset=16), Add(), Num(6, lineno=135, col_offset=28), lineno=135, col_offset=16)], [], lineno=126, col_offset=12), Assign([Name('char', Store(), lineno=136, col_offset=12)], Call(Name('unichr', Load(), lineno=136, col_offset=19), [Name('uni', Load(), lineno=136, col_offset=26)], [], None, None, lineno=136, col_offset=19), lineno=136, col_offset=12), Assign([Name('end', Store(), lineno=137, col_offset=12)], Name('next_end', Load(), lineno=137, col_offset=18), lineno=137, col_offset=12)], lineno=110, col_offset=8), Expr(Call(Name('_append', Load(), lineno=139, col_offset=8), [Name('char', Load(), lineno=139, col_offset=16)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8)], [], lineno=80, col_offset=4), Return(Tuple([Call(Attribute(Str(u'', lineno=140, col_offset=11), 'join', Load(), lineno=140, col_offset=11), [Name('chunks', Load(), lineno=140, col_offset=20)], [], None, None, lineno=140, col_offset=11), Name('end', Load(), lineno=140, col_offset=29)], Load(), lineno=140, col_offset=11), lineno=140, col_offset=4)], [], lineno=65, col_offset=0), Assign([Name('scanstring', Store(), lineno=144, col_offset=0)], BoolOp(Or(), [Name('c_scanstring', Load(), lineno=144, col_offset=13), Name('py_scanstring', Load(), lineno=144, col_offset=29)], lineno=144, col_offset=13), lineno=144, col_offset=0), Assign([Name('WHITESPACE', Store(), lineno=146, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=146, col_offset=13), 'compile', Load(), lineno=146, col_offset=13), [Str('[ \\t\\n\\r]*', lineno=146, col_offset=24), Name('FLAGS', Load(), lineno=146, col_offset=39)], [], None, None, lineno=146, col_offset=13), lineno=146, col_offset=0), Assign([Name('WHITESPACE_STR', Store(), lineno=147, col_offset=0)], Str(' \t\n\r', lineno=147, col_offset=17), lineno=147, col_offset=0), FunctionDef('JSONObject', arguments([Name('s_and_end', Param(), lineno=149, col_offset=15), Name('encoding', Param(), lineno=149, col_offset=26), Name('strict', Param(), lineno=149, col_offset=36), Name('scan_once', Param(), lineno=149, col_offset=44), Name('object_hook', Param(), lineno=149, col_offset=55), Name('object_pairs_hook', Param(), lineno=150, col_offset=15), Name('_w', Param(), lineno=150, col_offset=34), Name('_ws', Param(), lineno=150, col_offset=55)], None, None, [Attribute(Name('WHITESPACE', Load(), lineno=150, col_offset=37), 'match', Load(), lineno=150, col_offset=37), Name('WHITESPACE_STR', Load(), lineno=150, col_offset=59)]), [Assign([Tuple([Name('s', Store(), lineno=151, col_offset=4), Name('end', Store(), lineno=151, col_offset=7)], Store(), lineno=151, col_offset=4)], Name('s_and_end', Load(), lineno=151, col_offset=13), lineno=151, col_offset=4), Assign([Name('pairs', Store(), lineno=152, col_offset=4)], List([], Load(), lineno=152, col_offset=12), lineno=152, col_offset=4), Assign([Name('pairs_append', Store(), lineno=153, col_offset=4)], Attribute(Name('pairs', Load(), lineno=153, col_offset=19), 'append', Load(), lineno=153, col_offset=19), lineno=153, col_offset=4), Assign([Name('nextchar', Store(), lineno=156, col_offset=4)], Subscript(Name('s', Load(), lineno=156, col_offset=15), Slice(Name('end', Load(), lineno=156, col_offset=17), BinOp(Name('end', Load(), lineno=156, col_offset=21), Add(), Num(1, lineno=156, col_offset=27), lineno=156, col_offset=21), None), Load(), lineno=156, col_offset=15), lineno=156, col_offset=4), If(Compare(Name('nextchar', Load(), lineno=158, col_offset=7), [NotEq()], [Str('"', lineno=158, col_offset=19)], lineno=158, col_offset=7), [If(Compare(Name('nextchar', Load(), lineno=159, col_offset=11), [In()], [Name('_ws', Load(), lineno=159, col_offset=23)], lineno=159, col_offset=11), [Assign([Name('end', Store(), lineno=160, col_offset=12)], Call(Attribute(Call(Name('_w', Load(), lineno=160, col_offset=18), [Name('s', Load(), lineno=160, col_offset=21), Name('end', Load(), lineno=160, col_offset=24)], [], None, None, lineno=160, col_offset=18), 'end', Load(), lineno=160, col_offset=18), [], [], None, None, lineno=160, col_offset=18), lineno=160, col_offset=12), Assign([Name('nextchar', Store(), lineno=161, col_offset=12)], Subscript(Name('s', Load(), lineno=161, col_offset=23), Slice(Name('end', Load(), lineno=161, col_offset=25), BinOp(Name('end', Load(), lineno=161, col_offset=29), Add(), Num(1, lineno=161, col_offset=35), lineno=161, col_offset=29), None), Load(), lineno=161, col_offset=23), lineno=161, col_offset=12)], [], lineno=159, col_offset=8), If(Compare(Name('nextchar', Load(), lineno=163, col_offset=11), [Eq()], [Str('}', lineno=163, col_offset=23)], lineno=163, col_offset=11), [Return(Tuple([Name('pairs', Load(), lineno=164, col_offset=19), BinOp(Name('end', Load(), lineno=164, col_offset=26), Add(), Num(1, lineno=164, col_offset=32), lineno=164, col_offset=26)], Load(), lineno=164, col_offset=19), lineno=164, col_offset=12)], [If(Compare(Name('nextchar', Load(), lineno=165, col_offset=13), [NotEq()], [Str('"', lineno=165, col_offset=25)], lineno=165, col_offset=13), [Raise(Call(Name('ValueError', Load(), lineno=166, col_offset=18), [Call(Name('errmsg', Load(), lineno=166, col_offset=29), [Str('Expecting property name', lineno=166, col_offset=36), Name('s', Load(), lineno=166, col_offset=63), Name('end', Load(), lineno=166, col_offset=66)], [], None, None, lineno=166, col_offset=29)], [], None, None, lineno=166, col_offset=18), None, None, lineno=166, col_offset=12)], [], lineno=165, col_offset=13)], lineno=163, col_offset=8)], [], lineno=158, col_offset=4), AugAssign(Name('end', Store(), lineno=167, col_offset=4), Add(), Num(1, lineno=167, col_offset=11), lineno=167, col_offset=4), While(Name('True', Load(), lineno=168, col_offset=10), [Assign([Tuple([Name('key', Store(), lineno=169, col_offset=8), Name('end', Store(), lineno=169, col_offset=13)], Store(), lineno=169, col_offset=8)], Call(Name('scanstring', Load(), lineno=169, col_offset=19), [Name('s', Load(), lineno=169, col_offset=30), Name('end', Load(), lineno=169, col_offset=33), Name('encoding', Load(), lineno=169, col_offset=38), Name('strict', Load(), lineno=169, col_offset=48)], [], None, None, lineno=169, col_offset=19), lineno=169, col_offset=8), If(Compare(Subscript(Name('s', Load(), lineno=173, col_offset=11), Slice(Name('end', Load(), lineno=173, col_offset=13), BinOp(Name('end', Load(), lineno=173, col_offset=17), Add(), Num(1, lineno=173, col_offset=23), lineno=173, col_offset=17), None), Load(), lineno=173, col_offset=11), [NotEq()], [Str(':', lineno=173, col_offset=29)], lineno=173, col_offset=11), [Assign([Name('end', Store(), lineno=174, col_offset=12)], Call(Attribute(Call(Name('_w', Load(), lineno=174, col_offset=18), [Name('s', Load(), lineno=174, col_offset=21), Name('end', Load(), lineno=174, col_offset=24)], [], None, None, lineno=174, col_offset=18), 'end', Load(), lineno=174, col_offset=18), [], [], None, None, lineno=174, col_offset=18), lineno=174, col_offset=12), If(Compare(Subscript(Name('s', Load(), lineno=175, col_offset=15), Slice(Name('end', Load(), lineno=175, col_offset=17), BinOp(Name('end', Load(), lineno=175, col_offset=21), Add(), Num(1, lineno=175, col_offset=27), lineno=175, col_offset=21), None), Load(), lineno=175, col_offset=15), [NotEq()], [Str(':', lineno=175, col_offset=33)], lineno=175, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=176, col_offset=22), [Call(Name('errmsg', Load(), lineno=176, col_offset=33), [Str('Expecting : delimiter', lineno=176, col_offset=40), Name('s', Load(), lineno=176, col_offset=65), Name('end', Load(), lineno=176, col_offset=68)], [], None, None, lineno=176, col_offset=33)], [], None, None, lineno=176, col_offset=22), None, None, lineno=176, col_offset=16)], [], lineno=175, col_offset=12)], [], lineno=173, col_offset=8), AugAssign(Name('end', Store(), lineno=178, col_offset=8), Add(), Num(1, lineno=178, col_offset=15), lineno=178, col_offset=8), TryExcept([If(Compare(Subscript(Name('s', Load(), lineno=181, col_offset=15), Index(Name('end', Load(), lineno=181, col_offset=17)), Load(), lineno=181, col_offset=15), [In()], [Name('_ws', Load(), lineno=181, col_offset=25)], lineno=181, col_offset=15), [AugAssign(Name('end', Store(), lineno=182, col_offset=16), Add(), Num(1, lineno=182, col_offset=23), lineno=182, col_offset=16), If(Compare(Subscript(Name('s', Load(), lineno=183, col_offset=19), Index(Name('end', Load(), lineno=183, col_offset=21)), Load(), lineno=183, col_offset=19), [In()], [Name('_ws', Load(), lineno=183, col_offset=29)], lineno=183, col_offset=19), [Assign([Name('end', Store(), lineno=184, col_offset=20)], Call(Attribute(Call(Name('_w', Load(), lineno=184, col_offset=26), [Name('s', Load(), lineno=184, col_offset=29), BinOp(Name('end', Load(), lineno=184, col_offset=32), Add(), Num(1, lineno=184, col_offset=38), lineno=184, col_offset=32)], [], None, None, lineno=184, col_offset=26), 'end', Load(), lineno=184, col_offset=26), [], [], None, None, lineno=184, col_offset=26), lineno=184, col_offset=20)], [], lineno=183, col_offset=16)], [], lineno=181, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=185, col_offset=15), None, [Pass( lineno=186, col_offset=12)], lineno=185, col_offset=8)], [], lineno=180, col_offset=8), TryExcept([Assign([Tuple([Name('value', Store(), lineno=189, col_offset=12), Name('end', Store(), lineno=189, col_offset=19)], Store(), lineno=189, col_offset=12)], Call(Name('scan_once', Load(), lineno=189, col_offset=25), [Name('s', Load(), lineno=189, col_offset=35), Name('end', Load(), lineno=189, col_offset=38)], [], None, None, lineno=189, col_offset=25), lineno=189, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=190, col_offset=15), None, [Raise(Call(Name('ValueError', Load(), lineno=191, col_offset=18), [Call(Name('errmsg', Load(), lineno=191, col_offset=29), [Str('Expecting object', lineno=191, col_offset=36), Name('s', Load(), lineno=191, col_offset=56), Name('end', Load(), lineno=191, col_offset=59)], [], None, None, lineno=191, col_offset=29)], [], None, None, lineno=191, col_offset=18), None, None, lineno=191, col_offset=12)], lineno=190, col_offset=8)], [], lineno=188, col_offset=8), Expr(Call(Name('pairs_append', Load(), lineno=192, col_offset=8), [Tuple([Name('key', Load(), lineno=192, col_offset=22), Name('value', Load(), lineno=192, col_offset=27)], Load(), lineno=192, col_offset=22)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), TryExcept([Assign([Name('nextchar', Store(), lineno=195, col_offset=12)], Subscript(Name('s', Load(), lineno=195, col_offset=23), Index(Name('end', Load(), lineno=195, col_offset=25)), Load(), lineno=195, col_offset=23), lineno=195, col_offset=12), If(Compare(Name('nextchar', Load(), lineno=196, col_offset=15), [In()], [Name('_ws', Load(), lineno=196, col_offset=27)], lineno=196, col_offset=15), [Assign([Name('end', Store(), lineno=197, col_offset=16)], Call(Attribute(Call(Name('_w', Load(), lineno=197, col_offset=22), [Name('s', Load(), lineno=197, col_offset=25), BinOp(Name('end', Load(), lineno=197, col_offset=28), Add(), Num(1, lineno=197, col_offset=34), lineno=197, col_offset=28)], [], None, None, lineno=197, col_offset=22), 'end', Load(), lineno=197, col_offset=22), [], [], None, None, lineno=197, col_offset=22), lineno=197, col_offset=16), Assign([Name('nextchar', Store(), lineno=198, col_offset=16)], Subscript(Name('s', Load(), lineno=198, col_offset=27), Index(Name('end', Load(), lineno=198, col_offset=29)), Load(), lineno=198, col_offset=27), lineno=198, col_offset=16)], [], lineno=196, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=199, col_offset=15), None, [Assign([Name('nextchar', Store(), lineno=200, col_offset=12)], Str('', lineno=200, col_offset=23), lineno=200, col_offset=12)], lineno=199, col_offset=8)], [], lineno=194, col_offset=8), AugAssign(Name('end', Store(), lineno=201, col_offset=8), Add(), Num(1, lineno=201, col_offset=15), lineno=201, col_offset=8), If(Compare(Name('nextchar', Load(), lineno=203, col_offset=11), [Eq()], [Str('}', lineno=203, col_offset=23)], lineno=203, col_offset=11), [Break( lineno=204, col_offset=12)], [If(Compare(Name('nextchar', Load(), lineno=205, col_offset=13), [NotEq()], [Str(',', lineno=205, col_offset=25)], lineno=205, col_offset=13), [Raise(Call(Name('ValueError', Load(), lineno=206, col_offset=18), [Call(Name('errmsg', Load(), lineno=206, col_offset=29), [Str('Expecting , delimiter', lineno=206, col_offset=36), Name('s', Load(), lineno=206, col_offset=61), BinOp(Name('end', Load(), lineno=206, col_offset=64), Sub(), Num(1, lineno=206, col_offset=70), lineno=206, col_offset=64)], [], None, None, lineno=206, col_offset=29)], [], None, None, lineno=206, col_offset=18), None, None, lineno=206, col_offset=12)], [], lineno=205, col_offset=13)], lineno=203, col_offset=8), TryExcept([Assign([Name('nextchar', Store(), lineno=209, col_offset=12)], Subscript(Name('s', Load(), lineno=209, col_offset=23), Index(Name('end', Load(), lineno=209, col_offset=25)), Load(), lineno=209, col_offset=23), lineno=209, col_offset=12), If(Compare(Name('nextchar', Load(), lineno=210, col_offset=15), [In()], [Name('_ws', Load(), lineno=210, col_offset=27)], lineno=210, col_offset=15), [AugAssign(Name('end', Store(), lineno=211, col_offset=16), Add(), Num(1, lineno=211, col_offset=23), lineno=211, col_offset=16), Assign([Name('nextchar', Store(), lineno=212, col_offset=16)], Subscript(Name('s', Load(), lineno=212, col_offset=27), Index(Name('end', Load(), lineno=212, col_offset=29)), Load(), lineno=212, col_offset=27), lineno=212, col_offset=16), If(Compare(Name('nextchar', Load(), lineno=213, col_offset=19), [In()], [Name('_ws', Load(), lineno=213, col_offset=31)], lineno=213, col_offset=19), [Assign([Name('end', Store(), lineno=214, col_offset=20)], Call(Attribute(Call(Name('_w', Load(), lineno=214, col_offset=26), [Name('s', Load(), lineno=214, col_offset=29), BinOp(Name('end', Load(), lineno=214, col_offset=32), Add(), Num(1, lineno=214, col_offset=38), lineno=214, col_offset=32)], [], None, None, lineno=214, col_offset=26), 'end', Load(), lineno=214, col_offset=26), [], [], None, None, lineno=214, col_offset=26), lineno=214, col_offset=20), Assign([Name('nextchar', Store(), lineno=215, col_offset=20)], Subscript(Name('s', Load(), lineno=215, col_offset=31), Index(Name('end', Load(), lineno=215, col_offset=33)), Load(), lineno=215, col_offset=31), lineno=215, col_offset=20)], [], lineno=213, col_offset=16)], [], lineno=210, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=216, col_offset=15), None, [Assign([Name('nextchar', Store(), lineno=217, col_offset=12)], Str('', lineno=217, col_offset=23), lineno=217, col_offset=12)], lineno=216, col_offset=8)], [], lineno=208, col_offset=8), AugAssign(Name('end', Store(), lineno=219, col_offset=8), Add(), Num(1, lineno=219, col_offset=15), lineno=219, col_offset=8), If(Compare(Name('nextchar', Load(), lineno=220, col_offset=11), [NotEq()], [Str('"', lineno=220, col_offset=23)], lineno=220, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=221, col_offset=18), [Call(Name('errmsg', Load(), lineno=221, col_offset=29), [Str('Expecting property name', lineno=221, col_offset=36), Name('s', Load(), lineno=221, col_offset=63), BinOp(Name('end', Load(), lineno=221, col_offset=66), Sub(), Num(1, lineno=221, col_offset=72), lineno=221, col_offset=66)], [], None, None, lineno=221, col_offset=29)], [], None, None, lineno=221, col_offset=18), None, None, lineno=221, col_offset=12)], [], lineno=220, col_offset=8)], [], lineno=168, col_offset=4), If(Compare(Name('object_pairs_hook', Load(), lineno=223, col_offset=7), [IsNot()], [Name('None', Load(), lineno=223, col_offset=32)], lineno=223, col_offset=7), [Assign([Name('result', Store(), lineno=224, col_offset=8)], Call(Name('object_pairs_hook', Load(), lineno=224, col_offset=17), [Name('pairs', Load(), lineno=224, col_offset=35)], [], None, None, lineno=224, col_offset=17), lineno=224, col_offset=8), Return(Tuple([Name('result', Load(), lineno=225, col_offset=15), Name('end', Load(), lineno=225, col_offset=23)], Load(), lineno=225, col_offset=15), lineno=225, col_offset=8)], [], lineno=223, col_offset=4), Assign([Name('pairs', Store(), lineno=226, col_offset=4)], Call(Name('dict', Load(), lineno=226, col_offset=12), [Name('pairs', Load(), lineno=226, col_offset=17)], [], None, None, lineno=226, col_offset=12), lineno=226, col_offset=4), If(Compare(Name('object_hook', Load(), lineno=227, col_offset=7), [IsNot()], [Name('None', Load(), lineno=227, col_offset=26)], lineno=227, col_offset=7), [Assign([Name('pairs', Store(), lineno=228, col_offset=8)], Call(Name('object_hook', Load(), lineno=228, col_offset=16), [Name('pairs', Load(), lineno=228, col_offset=28)], [], None, None, lineno=228, col_offset=16), lineno=228, col_offset=8)], [], lineno=227, col_offset=4), Return(Tuple([Name('pairs', Load(), lineno=229, col_offset=11), Name('end', Load(), lineno=229, col_offset=18)], Load(), lineno=229, col_offset=11), lineno=229, col_offset=4)], [], lineno=149, col_offset=0), FunctionDef('JSONArray', arguments([Name('s_and_end', Param(), lineno=231, col_offset=14), Name('scan_once', Param(), lineno=231, col_offset=25), Name('_w', Param(), lineno=231, col_offset=36), Name('_ws', Param(), lineno=231, col_offset=57)], None, None, [Attribute(Name('WHITESPACE', Load(), lineno=231, col_offset=39), 'match', Load(), lineno=231, col_offset=39), Name('WHITESPACE_STR', Load(), lineno=231, col_offset=61)]), [Assign([Tuple([Name('s', Store(), lineno=232, col_offset=4), Name('end', Store(), lineno=232, col_offset=7)], Store(), lineno=232, col_offset=4)], Name('s_and_end', Load(), lineno=232, col_offset=13), lineno=232, col_offset=4), Assign([Name('values', Store(), lineno=233, col_offset=4)], List([], Load(), lineno=233, col_offset=13), lineno=233, col_offset=4), Assign([Name('nextchar', Store(), lineno=234, col_offset=4)], Subscript(Name('s', Load(), lineno=234, col_offset=15), Slice(Name('end', Load(), lineno=234, col_offset=17), BinOp(Name('end', Load(), lineno=234, col_offset=21), Add(), Num(1, lineno=234, col_offset=27), lineno=234, col_offset=21), None), Load(), lineno=234, col_offset=15), lineno=234, col_offset=4), If(Compare(Name('nextchar', Load(), lineno=235, col_offset=7), [In()], [Name('_ws', Load(), lineno=235, col_offset=19)], lineno=235, col_offset=7), [Assign([Name('end', Store(), lineno=236, col_offset=8)], Call(Attribute(Call(Name('_w', Load(), lineno=236, col_offset=14), [Name('s', Load(), lineno=236, col_offset=17), BinOp(Name('end', Load(), lineno=236, col_offset=20), Add(), Num(1, lineno=236, col_offset=26), lineno=236, col_offset=20)], [], None, None, lineno=236, col_offset=14), 'end', Load(), lineno=236, col_offset=14), [], [], None, None, lineno=236, col_offset=14), lineno=236, col_offset=8), Assign([Name('nextchar', Store(), lineno=237, col_offset=8)], Subscript(Name('s', Load(), lineno=237, col_offset=19), Slice(Name('end', Load(), lineno=237, col_offset=21), BinOp(Name('end', Load(), lineno=237, col_offset=25), Add(), Num(1, lineno=237, col_offset=31), lineno=237, col_offset=25), None), Load(), lineno=237, col_offset=19), lineno=237, col_offset=8)], [], lineno=235, col_offset=4), If(Compare(Name('nextchar', Load(), lineno=239, col_offset=7), [Eq()], [Str(']', lineno=239, col_offset=19)], lineno=239, col_offset=7), [Return(Tuple([Name('values', Load(), lineno=240, col_offset=15), BinOp(Name('end', Load(), lineno=240, col_offset=23), Add(), Num(1, lineno=240, col_offset=29), lineno=240, col_offset=23)], Load(), lineno=240, col_offset=15), lineno=240, col_offset=8)], [], lineno=239, col_offset=4), Assign([Name('_append', Store(), lineno=241, col_offset=4)], Attribute(Name('values', Load(), lineno=241, col_offset=14), 'append', Load(), lineno=241, col_offset=14), lineno=241, col_offset=4), While(Name('True', Load(), lineno=242, col_offset=10), [TryExcept([Assign([Tuple([Name('value', Store(), lineno=244, col_offset=12), Name('end', Store(), lineno=244, col_offset=19)], Store(), lineno=244, col_offset=12)], Call(Name('scan_once', Load(), lineno=244, col_offset=25), [Name('s', Load(), lineno=244, col_offset=35), Name('end', Load(), lineno=244, col_offset=38)], [], None, None, lineno=244, col_offset=25), lineno=244, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=245, col_offset=15), None, [Raise(Call(Name('ValueError', Load(), lineno=246, col_offset=18), [Call(Name('errmsg', Load(), lineno=246, col_offset=29), [Str('Expecting object', lineno=246, col_offset=36), Name('s', Load(), lineno=246, col_offset=56), Name('end', Load(), lineno=246, col_offset=59)], [], None, None, lineno=246, col_offset=29)], [], None, None, lineno=246, col_offset=18), None, None, lineno=246, col_offset=12)], lineno=245, col_offset=8)], [], lineno=243, col_offset=8), Expr(Call(Name('_append', Load(), lineno=247, col_offset=8), [Name('value', Load(), lineno=247, col_offset=16)], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8), Assign([Name('nextchar', Store(), lineno=248, col_offset=8)], Subscript(Name('s', Load(), lineno=248, col_offset=19), Slice(Name('end', Load(), lineno=248, col_offset=21), BinOp(Name('end', Load(), lineno=248, col_offset=25), Add(), Num(1, lineno=248, col_offset=31), lineno=248, col_offset=25), None), Load(), lineno=248, col_offset=19), lineno=248, col_offset=8), If(Compare(Name('nextchar', Load(), lineno=249, col_offset=11), [In()], [Name('_ws', Load(), lineno=249, col_offset=23)], lineno=249, col_offset=11), [Assign([Name('end', Store(), lineno=250, col_offset=12)], Call(Attribute(Call(Name('_w', Load(), lineno=250, col_offset=18), [Name('s', Load(), lineno=250, col_offset=21), BinOp(Name('end', Load(), lineno=250, col_offset=24), Add(), Num(1, lineno=250, col_offset=30), lineno=250, col_offset=24)], [], None, None, lineno=250, col_offset=18), 'end', Load(), lineno=250, col_offset=18), [], [], None, None, lineno=250, col_offset=18), lineno=250, col_offset=12), Assign([Name('nextchar', Store(), lineno=251, col_offset=12)], Subscript(Name('s', Load(), lineno=251, col_offset=23), Slice(Name('end', Load(), lineno=251, col_offset=25), BinOp(Name('end', Load(), lineno=251, col_offset=29), Add(), Num(1, lineno=251, col_offset=35), lineno=251, col_offset=29), None), Load(), lineno=251, col_offset=23), lineno=251, col_offset=12)], [], lineno=249, col_offset=8), AugAssign(Name('end', Store(), lineno=252, col_offset=8), Add(), Num(1, lineno=252, col_offset=15), lineno=252, col_offset=8), If(Compare(Name('nextchar', Load(), lineno=253, col_offset=11), [Eq()], [Str(']', lineno=253, col_offset=23)], lineno=253, col_offset=11), [Break( lineno=254, col_offset=12)], [If(Compare(Name('nextchar', Load(), lineno=255, col_offset=13), [NotEq()], [Str(',', lineno=255, col_offset=25)], lineno=255, col_offset=13), [Raise(Call(Name('ValueError', Load(), lineno=256, col_offset=18), [Call(Name('errmsg', Load(), lineno=256, col_offset=29), [Str('Expecting , delimiter', lineno=256, col_offset=36), Name('s', Load(), lineno=256, col_offset=61), Name('end', Load(), lineno=256, col_offset=64)], [], None, None, lineno=256, col_offset=29)], [], None, None, lineno=256, col_offset=18), None, None, lineno=256, col_offset=12)], [], lineno=255, col_offset=13)], lineno=253, col_offset=8), TryExcept([If(Compare(Subscript(Name('s', Load(), lineno=259, col_offset=15), Index(Name('end', Load(), lineno=259, col_offset=17)), Load(), lineno=259, col_offset=15), [In()], [Name('_ws', Load(), lineno=259, col_offset=25)], lineno=259, col_offset=15), [AugAssign(Name('end', Store(), lineno=260, col_offset=16), Add(), Num(1, lineno=260, col_offset=23), lineno=260, col_offset=16), If(Compare(Subscript(Name('s', Load(), lineno=261, col_offset=19), Index(Name('end', Load(), lineno=261, col_offset=21)), Load(), lineno=261, col_offset=19), [In()], [Name('_ws', Load(), lineno=261, col_offset=29)], lineno=261, col_offset=19), [Assign([Name('end', Store(), lineno=262, col_offset=20)], Call(Attribute(Call(Name('_w', Load(), lineno=262, col_offset=26), [Name('s', Load(), lineno=262, col_offset=29), BinOp(Name('end', Load(), lineno=262, col_offset=32), Add(), Num(1, lineno=262, col_offset=38), lineno=262, col_offset=32)], [], None, None, lineno=262, col_offset=26), 'end', Load(), lineno=262, col_offset=26), [], [], None, None, lineno=262, col_offset=26), lineno=262, col_offset=20)], [], lineno=261, col_offset=16)], [], lineno=259, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=263, col_offset=15), None, [Pass( lineno=264, col_offset=12)], lineno=263, col_offset=8)], [], lineno=258, col_offset=8)], [], lineno=242, col_offset=4), Return(Tuple([Name('values', Load(), lineno=266, col_offset=11), Name('end', Load(), lineno=266, col_offset=19)], Load(), lineno=266, col_offset=11), lineno=266, col_offset=4)], [], lineno=231, col_offset=0), ClassDef('JSONDecoder', [Name('object', Load(), lineno=268, col_offset=18)], [Expr(Str('Simple JSON <http://json.org> decoder\n\n    Performs the following translations in decoding by default:\n\n    +---------------+-------------------+\n    | JSON          | Python            |\n    +===============+===================+\n    | object        | dict              |\n    +---------------+-------------------+\n    | array         | list              |\n    +---------------+-------------------+\n    | string        | unicode           |\n    +---------------+-------------------+\n    | number (int)  | int, long         |\n    +---------------+-------------------+\n    | number (real) | float             |\n    +---------------+-------------------+\n    | true          | True              |\n    +---------------+-------------------+\n    | false         | False             |\n    +---------------+-------------------+\n    | null          | None              |\n    +---------------+-------------------+\n\n    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n    their corresponding ``float`` values, which is outside the JSON spec.\n\n    ', lineno=296, col_offset=-1), lineno=296, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=298, col_offset=17), Name('encoding', Param(), lineno=298, col_offset=23), Name('object_hook', Param(), lineno=298, col_offset=38), Name('parse_float', Param(), lineno=298, col_offset=56), Name('parse_int', Param(), lineno=299, col_offset=12), Name('parse_constant', Param(), lineno=299, col_offset=28), Name('strict', Param(), lineno=299, col_offset=49), Name('object_pairs_hook', Param(), lineno=300, col_offset=12)], None, None, [Name('None', Load(), lineno=298, col_offset=32), Name('None', Load(), lineno=298, col_offset=50), Name('None', Load(), lineno=298, col_offset=68), Name('None', Load(), lineno=299, col_offset=22), Name('None', Load(), lineno=299, col_offset=43), Name('True', Load(), lineno=299, col_offset=56), Name('None', Load(), lineno=300, col_offset=30)]), [Expr(Str("``encoding`` determines the encoding used to interpret any ``str``\n        objects decoded by this instance (utf-8 by default).  It has no\n        effect when decoding ``unicode`` objects.\n\n        Note that currently only encodings that are a superset of ASCII work,\n        strings of other encodings should be passed in as ``unicode``.\n\n        ``object_hook``, if specified, will be called with the result\n        of every JSON object decoded and its return value will be used in\n        place of the given ``dict``.  This can be used to provide custom\n        deserializations (e.g. to support JSON-RPC class hinting).\n\n        ``object_pairs_hook``, if specified will be called with the result of\n        every JSON object decoded with an ordered list of pairs.  The return\n        value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes\n        priority.\n\n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n\n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n\n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n\n        If ``strict`` is false (true is the default), then control\n        characters will be allowed inside strings.  Control characters in\n        this context are those with character codes in the 0-31 range,\n        including ``'\\t'`` (tab), ``'\\n'``, ``'\\r'`` and ``'\\0'``.\n\n        ", lineno=342, col_offset=-1), lineno=342, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=343, col_offset=8), 'encoding', Store(), lineno=343, col_offset=8)], Name('encoding', Load(), lineno=343, col_offset=24), lineno=343, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=344, col_offset=8), 'object_hook', Store(), lineno=344, col_offset=8)], Name('object_hook', Load(), lineno=344, col_offset=27), lineno=344, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=345, col_offset=8), 'object_pairs_hook', Store(), lineno=345, col_offset=8)], Name('object_pairs_hook', Load(), lineno=345, col_offset=33), lineno=345, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=346, col_offset=8), 'parse_float', Store(), lineno=346, col_offset=8)], BoolOp(Or(), [Name('parse_float', Load(), lineno=346, col_offset=27), Name('float', Load(), lineno=346, col_offset=42)], lineno=346, col_offset=27), lineno=346, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=347, col_offset=8), 'parse_int', Store(), lineno=347, col_offset=8)], BoolOp(Or(), [Name('parse_int', Load(), lineno=347, col_offset=25), Name('int', Load(), lineno=347, col_offset=38)], lineno=347, col_offset=25), lineno=347, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=348, col_offset=8), 'parse_constant', Store(), lineno=348, col_offset=8)], BoolOp(Or(), [Name('parse_constant', Load(), lineno=348, col_offset=30), Attribute(Name('_CONSTANTS', Load(), lineno=348, col_offset=48), '__getitem__', Load(), lineno=348, col_offset=48)], lineno=348, col_offset=30), lineno=348, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=349, col_offset=8), 'strict', Store(), lineno=349, col_offset=8)], Name('strict', Load(), lineno=349, col_offset=22), lineno=349, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=350, col_offset=8), 'parse_object', Store(), lineno=350, col_offset=8)], Name('JSONObject', Load(), lineno=350, col_offset=28), lineno=350, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=351, col_offset=8), 'parse_array', Store(), lineno=351, col_offset=8)], Name('JSONArray', Load(), lineno=351, col_offset=27), lineno=351, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=352, col_offset=8), 'parse_string', Store(), lineno=352, col_offset=8)], Name('scanstring', Load(), lineno=352, col_offset=28), lineno=352, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=353, col_offset=8), 'scan_once', Store(), lineno=353, col_offset=8)], Call(Name('make_scanner', Load(), lineno=353, col_offset=25), [Name('self', Load(), lineno=353, col_offset=38)], [], None, None, lineno=353, col_offset=25), lineno=353, col_offset=8)], [], lineno=298, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=355, col_offset=15), Name('s', Param(), lineno=355, col_offset=21), Name('_w', Param(), lineno=355, col_offset=24)], None, None, [Attribute(Name('WHITESPACE', Load(), lineno=355, col_offset=27), 'match', Load(), lineno=355, col_offset=27)]), [Expr(Str('Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n\n        ', lineno=359, col_offset=-1), lineno=359, col_offset=-1), Assign([Tuple([Name('obj', Store(), lineno=360, col_offset=8), Name('end', Store(), lineno=360, col_offset=13)], Store(), lineno=360, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=360, col_offset=19), 'raw_decode', Load(), lineno=360, col_offset=19), [Name('s', Load(), lineno=360, col_offset=35)], [keyword('idx', Call(Attribute(Call(Name('_w', Load(), lineno=360, col_offset=42), [Name('s', Load(), lineno=360, col_offset=45), Num(0, lineno=360, col_offset=48)], [], None, None, lineno=360, col_offset=42), 'end', Load(), lineno=360, col_offset=42), [], [], None, None, lineno=360, col_offset=42))], None, None, lineno=360, col_offset=19), lineno=360, col_offset=8), Assign([Name('end', Store(), lineno=361, col_offset=8)], Call(Attribute(Call(Name('_w', Load(), lineno=361, col_offset=14), [Name('s', Load(), lineno=361, col_offset=17), Name('end', Load(), lineno=361, col_offset=20)], [], None, None, lineno=361, col_offset=14), 'end', Load(), lineno=361, col_offset=14), [], [], None, None, lineno=361, col_offset=14), lineno=361, col_offset=8), If(Compare(Name('end', Load(), lineno=362, col_offset=11), [NotEq()], [Call(Name('len', Load(), lineno=362, col_offset=18), [Name('s', Load(), lineno=362, col_offset=22)], [], None, None, lineno=362, col_offset=18)], lineno=362, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=363, col_offset=18), [Call(Name('errmsg', Load(), lineno=363, col_offset=29), [Str('Extra data', lineno=363, col_offset=36), Name('s', Load(), lineno=363, col_offset=50), Name('end', Load(), lineno=363, col_offset=53), Call(Name('len', Load(), lineno=363, col_offset=58), [Name('s', Load(), lineno=363, col_offset=62)], [], None, None, lineno=363, col_offset=58)], [], None, None, lineno=363, col_offset=29)], [], None, None, lineno=363, col_offset=18), None, None, lineno=363, col_offset=12)], [], lineno=362, col_offset=8), Return(Name('obj', Load(), lineno=364, col_offset=15), lineno=364, col_offset=8)], [], lineno=355, col_offset=4), FunctionDef('raw_decode', arguments([Name('self', Param(), lineno=366, col_offset=19), Name('s', Param(), lineno=366, col_offset=25), Name('idx', Param(), lineno=366, col_offset=28)], None, None, [Num(0, lineno=366, col_offset=32)]), [Expr(Str('Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n\n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n\n        ', lineno=374, col_offset=-1), lineno=374, col_offset=-1), TryExcept([Assign([Tuple([Name('obj', Store(), lineno=376, col_offset=12), Name('end', Store(), lineno=376, col_offset=17)], Store(), lineno=376, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=376, col_offset=23), 'scan_once', Load(), lineno=376, col_offset=23), [Name('s', Load(), lineno=376, col_offset=38), Name('idx', Load(), lineno=376, col_offset=41)], [], None, None, lineno=376, col_offset=23), lineno=376, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=377, col_offset=15), None, [Raise(Call(Name('ValueError', Load(), lineno=378, col_offset=18), [Str('No JSON object could be decoded', lineno=378, col_offset=29)], [], None, None, lineno=378, col_offset=18), None, None, lineno=378, col_offset=12)], lineno=377, col_offset=8)], [], lineno=375, col_offset=8), Return(Tuple([Name('obj', Load(), lineno=379, col_offset=15), Name('end', Load(), lineno=379, col_offset=20)], Load(), lineno=379, col_offset=15), lineno=379, col_offset=8)], [], lineno=366, col_offset=4)], [], lineno=268, col_offset=0)])
