Module([Expr(Str('Convert to and from Roman numerals', lineno=1, col_offset=0), lineno=1, col_offset=0), Assign([Name('__author__', Store(), lineno=3, col_offset=0)], Str('Mark Pilgrim (f8dy@diveintopython.org)', lineno=3, col_offset=13), lineno=3, col_offset=0), Assign([Name('__version__', Store(), lineno=4, col_offset=0)], Str('1.4', lineno=4, col_offset=14), lineno=4, col_offset=0), Assign([Name('__date__', Store(), lineno=5, col_offset=0)], Str('8 August 2001', lineno=5, col_offset=11), lineno=5, col_offset=0), Assign([Name('__copyright__', Store(), lineno=6, col_offset=0)], Str('Copyright (c) 2001 Mark Pilgrim\n\nThis program is part of "Dive Into Python", a free Python tutorial for\nexperienced programmers.  Visit http://diveintopython.org/ for the\nlatest version.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the Python 2.1.1 license, available at\nhttp://www.python.org/2.1.1/license.html\n', lineno=15, col_offset=-1), lineno=6, col_offset=0), Import([alias('re', None)], lineno=17, col_offset=0), ClassDef('RomanError', [Name('Exception', Load(), lineno=20, col_offset=17)], [Pass( lineno=20, col_offset=29)], [], lineno=20, col_offset=0), ClassDef('OutOfRangeError', [Name('RomanError', Load(), lineno=21, col_offset=22)], [Pass( lineno=21, col_offset=35)], [], lineno=21, col_offset=0), ClassDef('NotIntegerError', [Name('RomanError', Load(), lineno=22, col_offset=22)], [Pass( lineno=22, col_offset=35)], [], lineno=22, col_offset=0), ClassDef('InvalidRomanNumeralError', [Name('RomanError', Load(), lineno=23, col_offset=31)], [Pass( lineno=23, col_offset=44)], [], lineno=23, col_offset=0), Assign([Name('romanNumeralMap', Store(), lineno=26, col_offset=0)], Tuple([Tuple([Str('M', lineno=26, col_offset=20), Num(1000, lineno=26, col_offset=26)], Load(), lineno=26, col_offset=20), Tuple([Str('CM', lineno=27, col_offset=20), Num(900, lineno=27, col_offset=26)], Load(), lineno=27, col_offset=20), Tuple([Str('D', lineno=28, col_offset=20), Num(500, lineno=28, col_offset=26)], Load(), lineno=28, col_offset=20), Tuple([Str('CD', lineno=29, col_offset=20), Num(400, lineno=29, col_offset=26)], Load(), lineno=29, col_offset=20), Tuple([Str('C', lineno=30, col_offset=20), Num(100, lineno=30, col_offset=26)], Load(), lineno=30, col_offset=20), Tuple([Str('XC', lineno=31, col_offset=20), Num(90, lineno=31, col_offset=26)], Load(), lineno=31, col_offset=20), Tuple([Str('L', lineno=32, col_offset=20), Num(50, lineno=32, col_offset=26)], Load(), lineno=32, col_offset=20), Tuple([Str('XL', lineno=33, col_offset=20), Num(40, lineno=33, col_offset=26)], Load(), lineno=33, col_offset=20), Tuple([Str('X', lineno=34, col_offset=20), Num(10, lineno=34, col_offset=26)], Load(), lineno=34, col_offset=20), Tuple([Str('IX', lineno=35, col_offset=20), Num(9, lineno=35, col_offset=26)], Load(), lineno=35, col_offset=20), Tuple([Str('V', lineno=36, col_offset=20), Num(5, lineno=36, col_offset=26)], Load(), lineno=36, col_offset=20), Tuple([Str('IV', lineno=37, col_offset=20), Num(4, lineno=37, col_offset=26)], Load(), lineno=37, col_offset=20), Tuple([Str('I', lineno=38, col_offset=20), Num(1, lineno=38, col_offset=26)], Load(), lineno=38, col_offset=20)], Load(), lineno=26, col_offset=19), lineno=26, col_offset=0), FunctionDef('toRoman', arguments([Name('n', Param(), lineno=40, col_offset=12)], None, None, []), [Expr(Str('convert integer to Roman numeral', lineno=41, col_offset=4), lineno=41, col_offset=4), If(UnaryOp(Not(), Compare(Num(0, lineno=42, col_offset=12), [Lt(), Lt()], [Name('n', Load(), lineno=42, col_offset=16), Num(5000, lineno=42, col_offset=20)], lineno=42, col_offset=12), lineno=42, col_offset=7), [Raise(Call(Name('OutOfRangeError', Load(), lineno=43, col_offset=14), [Str('number out of range (must be 1..4999)', lineno=43, col_offset=30)], [], None, None, lineno=43, col_offset=14), None, None, lineno=43, col_offset=8)], [], lineno=42, col_offset=4), If(Compare(Call(Name('int', Load(), lineno=44, col_offset=7), [Name('n', Load(), lineno=44, col_offset=11)], [], None, None, lineno=44, col_offset=7), [NotEq()], [Name('n', Load(), lineno=44, col_offset=17)], lineno=44, col_offset=7), [Raise(Call(Name('NotIntegerError', Load(), lineno=45, col_offset=14), [Str('decimals can not be converted', lineno=45, col_offset=30)], [], None, None, lineno=45, col_offset=14), None, None, lineno=45, col_offset=8)], [], lineno=44, col_offset=4), Assign([Name('result', Store(), lineno=47, col_offset=4)], Str('', lineno=47, col_offset=13), lineno=47, col_offset=4), For(Tuple([Name('numeral', Store(), lineno=48, col_offset=8), Name('integer', Store(), lineno=48, col_offset=17)], Store(), lineno=48, col_offset=8), Name('romanNumeralMap', Load(), lineno=48, col_offset=28), [While(Compare(Name('n', Load(), lineno=49, col_offset=14), [GtE()], [Name('integer', Load(), lineno=49, col_offset=19)], lineno=49, col_offset=14), [AugAssign(Name('result', Store(), lineno=50, col_offset=12), Add(), Name('numeral', Load(), lineno=50, col_offset=22), lineno=50, col_offset=12), AugAssign(Name('n', Store(), lineno=51, col_offset=12), Sub(), Name('integer', Load(), lineno=51, col_offset=17), lineno=51, col_offset=12)], [], lineno=49, col_offset=8)], [], lineno=48, col_offset=4), Return(Name('result', Load(), lineno=52, col_offset=11), lineno=52, col_offset=4)], [], lineno=40, col_offset=0), Assign([Name('romanNumeralPattern', Store(), lineno=55, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=55, col_offset=22), 'compile', Load(), lineno=55, col_offset=22), [Str("\n    ^                   # beginning of string\n    M{0,4}              # thousands - 0 to 4 M's\n    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),\n                        #            or 500-800 (D, followed by 0 to 3 C's)\n    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),\n                        #        or 50-80 (L, followed by 0 to 3 X's)\n    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),\n                        #        or 5-8 (V, followed by 0 to 3 I's)\n    $                   # end of string\n    ", lineno=65, col_offset=-1), Attribute(Name('re', Load(), lineno=65, col_offset=9), 'VERBOSE', Load(), lineno=65, col_offset=9)], [], None, None, lineno=55, col_offset=22), lineno=55, col_offset=0), FunctionDef('fromRoman', arguments([Name('s', Param(), lineno=67, col_offset=14)], None, None, []), [Expr(Str('convert Roman numeral to integer', lineno=68, col_offset=4), lineno=68, col_offset=4), If(UnaryOp(Not(), Name('s', Load(), lineno=69, col_offset=11), lineno=69, col_offset=7), [Raise(Call(Name('InvalidRomanNumeralError', Load(), lineno=70, col_offset=14), [Str('Input can not be blank', lineno=70, col_offset=39)], [], None, None, lineno=70, col_offset=14), None, None, lineno=70, col_offset=8)], [], lineno=69, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('romanNumeralPattern', Load(), lineno=71, col_offset=11), 'search', Load(), lineno=71, col_offset=11), [Name('s', Load(), lineno=71, col_offset=38)], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=7), [Raise(Call(Name('InvalidRomanNumeralError', Load(), lineno=72, col_offset=14), [BinOp(Str('Invalid Roman numeral: %s', lineno=72, col_offset=39), Mod(), Name('s', Load(), lineno=72, col_offset=69), lineno=72, col_offset=39)], [], None, None, lineno=72, col_offset=14), None, None, lineno=72, col_offset=8)], [], lineno=71, col_offset=4), Assign([Name('result', Store(), lineno=74, col_offset=4)], Num(0, lineno=74, col_offset=13), lineno=74, col_offset=4), Assign([Name('index', Store(), lineno=75, col_offset=4)], Num(0, lineno=75, col_offset=12), lineno=75, col_offset=4), For(Tuple([Name('numeral', Store(), lineno=76, col_offset=8), Name('integer', Store(), lineno=76, col_offset=17)], Store(), lineno=76, col_offset=8), Name('romanNumeralMap', Load(), lineno=76, col_offset=28), [While(Compare(Subscript(Name('s', Load(), lineno=77, col_offset=14), Slice(Name('index', Load(), lineno=77, col_offset=16), BinOp(Name('index', Load(), lineno=77, col_offset=22), Add(), Call(Name('len', Load(), lineno=77, col_offset=28), [Name('numeral', Load(), lineno=77, col_offset=32)], [], None, None, lineno=77, col_offset=28), lineno=77, col_offset=22), None), Load(), lineno=77, col_offset=14), [Eq()], [Name('numeral', Load(), lineno=77, col_offset=45)], lineno=77, col_offset=14), [AugAssign(Name('result', Store(), lineno=78, col_offset=12), Add(), Name('integer', Load(), lineno=78, col_offset=22), lineno=78, col_offset=12), AugAssign(Name('index', Store(), lineno=79, col_offset=12), Add(), Call(Name('len', Load(), lineno=79, col_offset=21), [Name('numeral', Load(), lineno=79, col_offset=25)], [], None, None, lineno=79, col_offset=21), lineno=79, col_offset=12)], [], lineno=77, col_offset=8)], [], lineno=76, col_offset=4), Return(Name('result', Load(), lineno=80, col_offset=11), lineno=80, col_offset=4)], [], lineno=67, col_offset=0)])
