Module([ImportFrom('distutils.core', [alias('Extension', '_Extension')], 0, lineno=1, col_offset=0), ImportFrom('distutils.core', [alias('Distribution', '_Distribution')], 0, lineno=2, col_offset=0), FunctionDef('_get_unpatched', arguments([Name('cls', Param(), lineno=4, col_offset=19)], None, None, []), [Expr(Str('Protect against re-patching the distutils if reloaded\n\n    Also ensures that no other distutils extension monkeypatched the distutils\n    first.\n    ', lineno=9, col_offset=-1), lineno=9, col_offset=-1), While(Call(Attribute(Attribute(Name('cls', Load(), lineno=10, col_offset=10), '__module__', Load(), lineno=10, col_offset=10), 'startswith', Load(), lineno=10, col_offset=10), [Str('setuptools', lineno=10, col_offset=36)], [], None, None, lineno=10, col_offset=10), [Assign([Tuple([Name('cls', Store(), lineno=11, col_offset=8)], Store(), lineno=11, col_offset=8)], Attribute(Name('cls', Load(), lineno=11, col_offset=15), '__bases__', Load(), lineno=11, col_offset=15), lineno=11, col_offset=8)], [], lineno=10, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('cls', Load(), lineno=12, col_offset=11), '__module__', Load(), lineno=12, col_offset=11), 'startswith', Load(), lineno=12, col_offset=11), [Str('distutils', lineno=12, col_offset=37)], [], None, None, lineno=12, col_offset=11), lineno=12, col_offset=7), [Raise(Call(Name('AssertionError', Load(), lineno=13, col_offset=14), [BinOp(Str('distutils has already been patched by %r', lineno=14, col_offset=12), Mod(), Name('cls', Load(), lineno=14, col_offset=57), lineno=14, col_offset=12)], [], None, None, lineno=13, col_offset=14), None, None, lineno=13, col_offset=8)], [], lineno=12, col_offset=4), Return(Name('cls', Load(), lineno=16, col_offset=11), lineno=16, col_offset=4)], [], lineno=4, col_offset=0), Assign([Name('_Distribution', Store(), lineno=18, col_offset=0)], Call(Name('_get_unpatched', Load(), lineno=18, col_offset=16), [Name('_Distribution', Load(), lineno=18, col_offset=31)], [], None, None, lineno=18, col_offset=16), lineno=18, col_offset=0), Assign([Name('_Extension', Store(), lineno=19, col_offset=0)], Call(Name('_get_unpatched', Load(), lineno=19, col_offset=13), [Name('_Extension', Load(), lineno=19, col_offset=28)], [], None, None, lineno=19, col_offset=13), lineno=19, col_offset=0), TryExcept([ImportFrom('Pyrex.Distutils.build_ext', [alias('build_ext', None)], 0, lineno=22, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=23, col_offset=7), None, [Assign([Name('have_pyrex', Store(), lineno=24, col_offset=4)], Name('False', Load(), lineno=24, col_offset=17), lineno=24, col_offset=4)], lineno=23, col_offset=0)], [Assign([Name('have_pyrex', Store(), lineno=26, col_offset=4)], Name('True', Load(), lineno=26, col_offset=17), lineno=26, col_offset=4)], lineno=21, col_offset=0), ClassDef('Extension', [Name('_Extension', Load(), lineno=29, col_offset=16)], [Expr(Str("Extension that uses '.c' files in place of '.pyx' files", lineno=30, col_offset=4), lineno=30, col_offset=4), If(UnaryOp(Not(), Name('have_pyrex', Load(), lineno=32, col_offset=11), lineno=32, col_offset=7), [FunctionDef('__init__', arguments([Name('self', Param(), lineno=34, col_offset=21)], 'args', 'kw', []), [Expr(Call(Attribute(Name('_Extension', Load(), lineno=35, col_offset=12), '__init__', Load(), lineno=35, col_offset=12), [Name('self', Load(), lineno=35, col_offset=32)], [], Name('args', Load(), lineno=35, col_offset=38), Name('kw', Load(), lineno=35, col_offset=45), lineno=35, col_offset=12), lineno=35, col_offset=12), Assign([Name('sources', Store(), lineno=36, col_offset=12)], List([], Load(), lineno=36, col_offset=22), lineno=36, col_offset=12), For(Name('s', Store(), lineno=37, col_offset=16), Attribute(Name('self', Load(), lineno=37, col_offset=21), 'sources', Load(), lineno=37, col_offset=21), [If(Call(Attribute(Name('s', Load(), lineno=38, col_offset=19), 'endswith', Load(), lineno=38, col_offset=19), [Str('.pyx', lineno=38, col_offset=30)], [], None, None, lineno=38, col_offset=19), [Expr(Call(Attribute(Name('sources', Load(), lineno=39, col_offset=20), 'append', Load(), lineno=39, col_offset=20), [BinOp(Subscript(Name('s', Load(), lineno=39, col_offset=35), Slice(None, Num(-3, lineno=39, col_offset=39), None), Load(), lineno=39, col_offset=35), Add(), Str('c', lineno=39, col_offset=42), lineno=39, col_offset=35)], [], None, None, lineno=39, col_offset=20), lineno=39, col_offset=20)], [Expr(Call(Attribute(Name('sources', Load(), lineno=41, col_offset=20), 'append', Load(), lineno=41, col_offset=20), [Name('s', Load(), lineno=41, col_offset=35)], [], None, None, lineno=41, col_offset=20), lineno=41, col_offset=20)], lineno=38, col_offset=16)], [], lineno=37, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=12), 'sources', Store(), lineno=42, col_offset=12)], Name('sources', Load(), lineno=42, col_offset=27), lineno=42, col_offset=12)], [], lineno=34, col_offset=8)], [], lineno=32, col_offset=4)], [], lineno=29, col_offset=0), ClassDef('Library', [Name('Extension', Load(), lineno=44, col_offset=14)], [Expr(Str('Just like a regular Extension, but built as a library instead', lineno=45, col_offset=4), lineno=45, col_offset=4)], [], lineno=44, col_offset=0), Import([alias('sys', None), alias('distutils.core', None), alias('distutils.extension', None)], lineno=47, col_offset=0), Assign([Attribute(Attribute(Name('distutils', Load(), lineno=48, col_offset=0), 'core', Load(), lineno=48, col_offset=0), 'Extension', Store(), lineno=48, col_offset=0)], Name('Extension', Load(), lineno=48, col_offset=27), lineno=48, col_offset=0), Assign([Attribute(Attribute(Name('distutils', Load(), lineno=49, col_offset=0), 'extension', Load(), lineno=49, col_offset=0), 'Extension', Store(), lineno=49, col_offset=0)], Name('Extension', Load(), lineno=49, col_offset=32), lineno=49, col_offset=0), If(Compare(Str('distutils.command.build_ext', lineno=50, col_offset=3), [In()], [Attribute(Name('sys', Load(), lineno=50, col_offset=36), 'modules', Load(), lineno=50, col_offset=36)], lineno=50, col_offset=3), [Assign([Attribute(Subscript(Attribute(Name('sys', Load(), lineno=51, col_offset=4), 'modules', Load(), lineno=51, col_offset=4), Index(Str('distutils.command.build_ext', lineno=51, col_offset=16)), Load(), lineno=51, col_offset=4), 'Extension', Store(), lineno=51, col_offset=4)], Name('Extension', Load(), lineno=51, col_offset=59), lineno=51, col_offset=4)], [], lineno=50, col_offset=0)])
