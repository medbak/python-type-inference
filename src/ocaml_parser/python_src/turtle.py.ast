Module([Expr(Str('\nTurtle graphics is a popular way for introducing programming to\nkids. It was part of the original Logo programming language developed\nby Wally Feurzig and Seymour Papert in 1966.\n\nImagine a robotic turtle starting at (0, 0) in the x-y plane. Give it\nthe command turtle.forward(15), and it moves (on-screen!) 15 pixels in\nthe direction it is facing, drawing a line as it moves. Give it the\ncommand turtle.left(25), and it rotates in-place 25 degrees clockwise.\n\nBy combining together these and similar commands, intricate shapes and\npictures can easily be drawn.\n\n----- turtle.py\n\nThis module is an extended reimplementation of turtle.py from the\nPython standard distribution up to Python 2.5. (See: http://www.python.org)\n\nIt tries to keep the merits of turtle.py and to be (nearly) 100%\ncompatible with it. This means in the first place to enable the\nlearning programmer to use all the commands, classes and methods\ninteractively when using the module from within IDLE run with\nthe -n switch.\n\nRoughly it has the following features added:\n\n- Better animation of the turtle movements, especially of turning the\n  turtle. So the turtles can more easily be used as a visual feedback\n  instrument by the (beginning) programmer.\n\n- Different turtle shapes, gif-images as turtle shapes, user defined\n  and user controllable turtle shapes, among them compound\n  (multicolored) shapes. Turtle shapes can be stretched and tilted, which\n  makes turtles very versatile geometrical objects.\n\n- Fine control over turtle movement and screen updates via delay(),\n  and enhanced tracer() and speed() methods.\n\n- Aliases for the most commonly used commands, like fd for forward etc.,\n  following the early Logo traditions. This reduces the boring work of\n  typing long sequences of commands, which often occur in a natural way\n  when kids try to program fancy pictures on their first encounter with\n  turtle graphics.\n\n- Turtles now have an undo()-method with configurable undo-buffer.\n\n- Some simple commands/methods for creating event driven programs\n  (mouse-, key-, timer-events). Especially useful for programming games.\n\n- A scrollable Canvas class. The default scrollable Canvas can be\n  extended interactively as needed while playing around with the turtle(s).\n\n- A TurtleScreen class with methods controlling background color or\n  background image, window and canvas size and other properties of the\n  TurtleScreen.\n\n- There is a method, setworldcoordinates(), to install a user defined\n  coordinate-system for the TurtleScreen.\n\n- The implementation uses a 2-vector class named Vec2D, derived from tuple.\n  This class is public, so it can be imported by the application programmer,\n  which makes certain types of computations very natural and compact.\n\n- Appearance of the TurtleScreen and the Turtles at startup/import can be\n  configured by means of a turtle.cfg configuration file.\n  The default configuration mimics the appearance of the old turtle module.\n\n- If configured appropriately the module reads in docstrings from a docstring\n  dictionary in some different language, supplied separately  and replaces\n  the English ones by those read in. There is a utility function\n  write_docstringdict() to write a dictionary with the original (English)\n  docstrings to disc, so it can serve as a template for translations.\n\nBehind the scenes there are some features included with possible\nextensions in in mind. These will be commented and documented elsewhere.\n\n', lineno=101, col_offset=-1), lineno=101, col_offset=-1), Assign([Name('_ver', Store(), lineno=103, col_offset=0)], Str('turtle 1.0b1 - for Python 2.6   -  30. 5. 2008, 18:08', lineno=103, col_offset=7), lineno=103, col_offset=0), Import([alias('Tkinter', 'TK')], lineno=107, col_offset=0), Import([alias('types', None)], lineno=108, col_offset=0), Import([alias('math', None)], lineno=109, col_offset=0), Import([alias('time', None)], lineno=110, col_offset=0), Import([alias('os', None)], lineno=111, col_offset=0), ImportFrom('os.path', [alias('isfile', None), alias('split', None), alias('join', None)], 0, lineno=113, col_offset=0), ImportFrom('copy', [alias('deepcopy', None)], 0, lineno=114, col_offset=0), ImportFrom('math', [alias('*', None)], 0, lineno=116, col_offset=0), Assign([Name('_tg_classes', Store(), lineno=118, col_offset=0)], List([Str('ScrolledCanvas', lineno=118, col_offset=15), Str('TurtleScreen', lineno=118, col_offset=33), Str('Screen', lineno=118, col_offset=49), Str('RawTurtle', lineno=119, col_offset=15), Str('Turtle', lineno=119, col_offset=28), Str('RawPen', lineno=119, col_offset=38), Str('Pen', lineno=119, col_offset=48), Str('Shape', lineno=119, col_offset=55), Str('Vec2D', lineno=119, col_offset=64)], Load(), lineno=118, col_offset=14), lineno=118, col_offset=0), Assign([Name('_tg_screen_functions', Store(), lineno=120, col_offset=0)], List([Str('addshape', lineno=120, col_offset=24), Str('bgcolor', lineno=120, col_offset=36), Str('bgpic', lineno=120, col_offset=47), Str('bye', lineno=120, col_offset=56), Str('clearscreen', lineno=121, col_offset=8), Str('colormode', lineno=121, col_offset=23), Str('delay', lineno=121, col_offset=36), Str('exitonclick', lineno=121, col_offset=45), Str('getcanvas', lineno=121, col_offset=60), Str('getshapes', lineno=122, col_offset=8), Str('listen', lineno=122, col_offset=21), Str('mode', lineno=122, col_offset=31), Str('onkey', lineno=122, col_offset=39), Str('onscreenclick', lineno=122, col_offset=48), Str('ontimer', lineno=122, col_offset=65), Str('register_shape', lineno=123, col_offset=8), Str('resetscreen', lineno=123, col_offset=26), Str('screensize', lineno=123, col_offset=41), Str('setup', lineno=123, col_offset=55), Str('setworldcoordinates', lineno=124, col_offset=8), Str('title', lineno=124, col_offset=31), Str('tracer', lineno=124, col_offset=40), Str('turtles', lineno=124, col_offset=50), Str('update', lineno=124, col_offset=61), Str('window_height', lineno=125, col_offset=8), Str('window_width', lineno=125, col_offset=25)], Load(), lineno=120, col_offset=23), lineno=120, col_offset=0), Assign([Name('_tg_turtle_functions', Store(), lineno=126, col_offset=0)], List([Str('back', lineno=126, col_offset=24), Str('backward', lineno=126, col_offset=32), Str('begin_fill', lineno=126, col_offset=44), Str('begin_poly', lineno=126, col_offset=58), Str('bk', lineno=126, col_offset=72), Str('circle', lineno=127, col_offset=8), Str('clear', lineno=127, col_offset=18), Str('clearstamp', lineno=127, col_offset=27), Str('clearstamps', lineno=127, col_offset=41), Str('clone', lineno=127, col_offset=56), Str('color', lineno=127, col_offset=65), Str('degrees', lineno=128, col_offset=8), Str('distance', lineno=128, col_offset=19), Str('dot', lineno=128, col_offset=31), Str('down', lineno=128, col_offset=38), Str('end_fill', lineno=128, col_offset=46), Str('end_poly', lineno=128, col_offset=58), Str('fd', lineno=128, col_offset=70), Str('fill', lineno=129, col_offset=8), Str('fillcolor', lineno=129, col_offset=16), Str('forward', lineno=129, col_offset=29), Str('get_poly', lineno=129, col_offset=40), Str('getpen', lineno=129, col_offset=52), Str('getscreen', lineno=129, col_offset=62), Str('getturtle', lineno=130, col_offset=8), Str('goto', lineno=130, col_offset=21), Str('heading', lineno=130, col_offset=29), Str('hideturtle', lineno=130, col_offset=40), Str('home', lineno=130, col_offset=54), Str('ht', lineno=130, col_offset=62), Str('isdown', lineno=130, col_offset=68), Str('isvisible', lineno=131, col_offset=8), Str('left', lineno=131, col_offset=21), Str('lt', lineno=131, col_offset=29), Str('onclick', lineno=131, col_offset=35), Str('ondrag', lineno=131, col_offset=46), Str('onrelease', lineno=131, col_offset=56), Str('pd', lineno=131, col_offset=69), Str('pen', lineno=132, col_offset=8), Str('pencolor', lineno=132, col_offset=15), Str('pendown', lineno=132, col_offset=27), Str('pensize', lineno=132, col_offset=38), Str('penup', lineno=132, col_offset=49), Str('pos', lineno=132, col_offset=58), Str('position', lineno=132, col_offset=65), Str('pu', lineno=133, col_offset=8), Str('radians', lineno=133, col_offset=14), Str('right', lineno=133, col_offset=25), Str('reset', lineno=133, col_offset=34), Str('resizemode', lineno=133, col_offset=43), Str('rt', lineno=133, col_offset=57), Str('seth', lineno=134, col_offset=8), Str('setheading', lineno=134, col_offset=16), Str('setpos', lineno=134, col_offset=30), Str('setposition', lineno=134, col_offset=40), Str('settiltangle', lineno=134, col_offset=55), Str('setundobuffer', lineno=135, col_offset=8), Str('setx', lineno=135, col_offset=25), Str('sety', lineno=135, col_offset=33), Str('shape', lineno=135, col_offset=41), Str('shapesize', lineno=135, col_offset=50), Str('showturtle', lineno=135, col_offset=63), Str('speed', lineno=136, col_offset=8), Str('st', lineno=136, col_offset=17), Str('stamp', lineno=136, col_offset=23), Str('tilt', lineno=136, col_offset=32), Str('tiltangle', lineno=136, col_offset=40), Str('towards', lineno=136, col_offset=53), Str('tracer', lineno=136, col_offset=64), Str('turtlesize', lineno=137, col_offset=8), Str('undo', lineno=137, col_offset=22), Str('undobufferentries', lineno=137, col_offset=30), Str('up', lineno=137, col_offset=51), Str('width', lineno=137, col_offset=57), Str('window_height', lineno=138, col_offset=8), Str('window_width', lineno=138, col_offset=25), Str('write', lineno=138, col_offset=41), Str('xcor', lineno=138, col_offset=50), Str('ycor', lineno=138, col_offset=58)], Load(), lineno=126, col_offset=23), lineno=126, col_offset=0), Assign([Name('_tg_utilities', Store(), lineno=139, col_offset=0)], List([Str('write_docstringdict', lineno=139, col_offset=17), Str('done', lineno=139, col_offset=40), Str('mainloop', lineno=139, col_offset=48)], Load(), lineno=139, col_offset=16), lineno=139, col_offset=0), Assign([Name('_math_functions', Store(), lineno=140, col_offset=0)], List([Str('acos', lineno=140, col_offset=19), Str('asin', lineno=140, col_offset=27), Str('atan', lineno=140, col_offset=35), Str('atan2', lineno=140, col_offset=43), Str('ceil', lineno=140, col_offset=52), Str('cos', lineno=140, col_offset=60), Str('cosh', lineno=140, col_offset=67), Str('e', lineno=141, col_offset=8), Str('exp', lineno=141, col_offset=13), Str('fabs', lineno=141, col_offset=20), Str('floor', lineno=141, col_offset=28), Str('fmod', lineno=141, col_offset=37), Str('frexp', lineno=141, col_offset=45), Str('hypot', lineno=141, col_offset=54), Str('ldexp', lineno=141, col_offset=63), Str('log', lineno=141, col_offset=72), Str('log10', lineno=142, col_offset=8), Str('modf', lineno=142, col_offset=17), Str('pi', lineno=142, col_offset=25), Str('pow', lineno=142, col_offset=31), Str('sin', lineno=142, col_offset=38), Str('sinh', lineno=142, col_offset=45), Str('sqrt', lineno=142, col_offset=53), Str('tan', lineno=142, col_offset=61), Str('tanh', lineno=142, col_offset=68)], Load(), lineno=140, col_offset=18), lineno=140, col_offset=0), Assign([Name('__all__', Store(), lineno=144, col_offset=0)], BinOp(BinOp(BinOp(BinOp(Name('_tg_classes', Load(), lineno=144, col_offset=11), Add(), Name('_tg_screen_functions', Load(), lineno=144, col_offset=25), lineno=144, col_offset=11), Add(), Name('_tg_turtle_functions', Load(), lineno=144, col_offset=48), lineno=144, col_offset=46), Add(), Name('_tg_utilities', Load(), lineno=145, col_offset=11), lineno=144, col_offset=69), Add(), Name('_math_functions', Load(), lineno=145, col_offset=27), lineno=145, col_offset=25), lineno=144, col_offset=0), Assign([Name('_alias_list', Store(), lineno=147, col_offset=0)], List([Str('addshape', lineno=147, col_offset=15), Str('backward', lineno=147, col_offset=27), Str('bk', lineno=147, col_offset=39), Str('fd', lineno=147, col_offset=45), Str('ht', lineno=147, col_offset=51), Str('lt', lineno=147, col_offset=57), Str('pd', lineno=147, col_offset=63), Str('pos', lineno=147, col_offset=69), Str('pu', lineno=148, col_offset=15), Str('rt', lineno=148, col_offset=21), Str('seth', lineno=148, col_offset=27), Str('setpos', lineno=148, col_offset=35), Str('setposition', lineno=148, col_offset=45), Str('st', lineno=148, col_offset=60), Str('turtlesize', lineno=149, col_offset=15), Str('up', lineno=149, col_offset=29), Str('width', lineno=149, col_offset=35)], Load(), lineno=147, col_offset=14), lineno=147, col_offset=0), Assign([Name('_CFG', Store(), lineno=151, col_offset=0)], Dict([Str('width', lineno=151, col_offset=8), Str('height', lineno=152, col_offset=8), Str('canvwidth', lineno=153, col_offset=8), Str('canvheight', lineno=154, col_offset=8), Str('leftright', lineno=155, col_offset=8), Str('topbottom', lineno=156, col_offset=8), Str('mode', lineno=157, col_offset=8), Str('colormode', lineno=158, col_offset=8), Str('delay', lineno=159, col_offset=8), Str('undobuffersize', lineno=160, col_offset=8), Str('shape', lineno=161, col_offset=8), Str('pencolor', lineno=162, col_offset=8), Str('fillcolor', lineno=163, col_offset=8), Str('resizemode', lineno=164, col_offset=8), Str('visible', lineno=165, col_offset=8), Str('language', lineno=166, col_offset=8), Str('exampleturtle', lineno=167, col_offset=8), Str('examplescreen', lineno=168, col_offset=8), Str('title', lineno=169, col_offset=8), Str('using_IDLE', lineno=170, col_offset=8)], [Num(0.5, lineno=151, col_offset=18), Num(0.75, lineno=152, col_offset=19), Num(400, lineno=153, col_offset=22), Num(300, lineno=154, col_offset=22), Name('None', Load(), lineno=155, col_offset=21), Name('None', Load(), lineno=156, col_offset=21), Str('standard', lineno=157, col_offset=16), Num(1.0, lineno=158, col_offset=21), Num(10, lineno=159, col_offset=17), Num(1000, lineno=160, col_offset=26), Str('classic', lineno=161, col_offset=17), Str('black', lineno=162, col_offset=21), Str('black', lineno=163, col_offset=22), Str('noresize', lineno=164, col_offset=23), Name('True', Load(), lineno=165, col_offset=20), Str('english', lineno=166, col_offset=20), Str('turtle', lineno=167, col_offset=25), Str('screen', lineno=168, col_offset=25), Str('Python Turtle Graphics', lineno=169, col_offset=17), Name('False', Load(), lineno=170, col_offset=22)], lineno=151, col_offset=7), lineno=151, col_offset=0), FunctionDef('config_dict', arguments([Name('filename', Param(), lineno=183, col_offset=16)], None, None, []), [Expr(Str('Convert content of config-file into dictionary.', lineno=184, col_offset=4), lineno=184, col_offset=4), Assign([Name('f', Store(), lineno=185, col_offset=4)], Call(Name('open', Load(), lineno=185, col_offset=8), [Name('filename', Load(), lineno=185, col_offset=13), Str('r', lineno=185, col_offset=23)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=4), Assign([Name('cfglines', Store(), lineno=186, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=186, col_offset=15), 'readlines', Load(), lineno=186, col_offset=15), [], [], None, None, lineno=186, col_offset=15), lineno=186, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=187, col_offset=4), 'close', Load(), lineno=187, col_offset=4), [], [], None, None, lineno=187, col_offset=4), lineno=187, col_offset=4), Assign([Name('cfgdict', Store(), lineno=188, col_offset=4)], Dict([], [], lineno=188, col_offset=14), lineno=188, col_offset=4), For(Name('line', Store(), lineno=189, col_offset=8), Name('cfglines', Load(), lineno=189, col_offset=16), [Assign([Name('line', Store(), lineno=190, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=190, col_offset=15), 'strip', Load(), lineno=190, col_offset=15), [], [], None, None, lineno=190, col_offset=15), lineno=190, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('line', Load(), lineno=191, col_offset=15), lineno=191, col_offset=11), Call(Attribute(Name('line', Load(), lineno=191, col_offset=23), 'startswith', Load(), lineno=191, col_offset=23), [Str('#', lineno=191, col_offset=39)], [], None, None, lineno=191, col_offset=23)], lineno=191, col_offset=11), [Continue( lineno=192, col_offset=12)], [], lineno=191, col_offset=8), TryExcept([Assign([Tuple([Name('key', Store(), lineno=194, col_offset=12), Name('value', Store(), lineno=194, col_offset=17)], Store(), lineno=194, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=194, col_offset=25), 'split', Load(), lineno=194, col_offset=25), [Str('=', lineno=194, col_offset=36)], [], None, None, lineno=194, col_offset=25), lineno=194, col_offset=12)], [ExceptHandler(None, None, [Print(None, [BinOp(Str('Bad line in config-file %s:\n%s', lineno=196, col_offset=18), Mod(), Tuple([Name('filename', Load(), lineno=196, col_offset=55), Name('line', Load(), lineno=196, col_offset=64)], Load(), lineno=196, col_offset=55), lineno=196, col_offset=18)], True, lineno=196, col_offset=12), Continue( lineno=197, col_offset=12)], lineno=195, col_offset=8)], [], lineno=193, col_offset=8), Assign([Name('key', Store(), lineno=198, col_offset=8)], Call(Attribute(Name('key', Load(), lineno=198, col_offset=14), 'strip', Load(), lineno=198, col_offset=14), [], [], None, None, lineno=198, col_offset=14), lineno=198, col_offset=8), Assign([Name('value', Store(), lineno=199, col_offset=8)], Call(Attribute(Name('value', Load(), lineno=199, col_offset=16), 'strip', Load(), lineno=199, col_offset=16), [], [], None, None, lineno=199, col_offset=16), lineno=199, col_offset=8), If(Compare(Name('value', Load(), lineno=200, col_offset=11), [In()], [List([Str('True', lineno=200, col_offset=21), Str('False', lineno=200, col_offset=29), Str('None', lineno=200, col_offset=38), Str("''", lineno=200, col_offset=46), Str('""', lineno=200, col_offset=52)], Load(), lineno=200, col_offset=20)], lineno=200, col_offset=11), [Assign([Name('value', Store(), lineno=201, col_offset=12)], Call(Name('eval', Load(), lineno=201, col_offset=20), [Name('value', Load(), lineno=201, col_offset=25)], [], None, None, lineno=201, col_offset=20), lineno=201, col_offset=12)], [TryExcept([If(Compare(Str('.', lineno=204, col_offset=19), [In()], [Name('value', Load(), lineno=204, col_offset=26)], lineno=204, col_offset=19), [Assign([Name('value', Store(), lineno=205, col_offset=20)], Call(Name('float', Load(), lineno=205, col_offset=28), [Name('value', Load(), lineno=205, col_offset=34)], [], None, None, lineno=205, col_offset=28), lineno=205, col_offset=20)], [Assign([Name('value', Store(), lineno=207, col_offset=20)], Call(Name('int', Load(), lineno=207, col_offset=28), [Name('value', Load(), lineno=207, col_offset=32)], [], None, None, lineno=207, col_offset=28), lineno=207, col_offset=20)], lineno=204, col_offset=16)], [ExceptHandler(None, None, [Pass( lineno=209, col_offset=16)], lineno=208, col_offset=12)], [], lineno=203, col_offset=12)], lineno=200, col_offset=8), Assign([Subscript(Name('cfgdict', Load(), lineno=210, col_offset=8), Index(Name('key', Load(), lineno=210, col_offset=16)), Store(), lineno=210, col_offset=8)], Name('value', Load(), lineno=210, col_offset=23), lineno=210, col_offset=8)], [], lineno=189, col_offset=4), Return(Name('cfgdict', Load(), lineno=211, col_offset=11), lineno=211, col_offset=4)], [], lineno=183, col_offset=0), FunctionDef('readconfig', arguments([Name('cfgdict', Param(), lineno=213, col_offset=15)], None, None, []), [Expr(Str("Read config-files, change configuration-dict accordingly.\n\n    If there is a turtle.cfg file in the current working directory,\n    read it from there. If this contains an importconfig-value,\n    say 'myway', construct filename turtle_mayway.cfg else use\n    turtle.cfg and read it from the import-directory, where\n    turtle.py is located.\n    Update configuration dictionary first according to config-file,\n    in the import directory, then according to config-file in the\n    current working directory.\n    If no config-file is found, the default configuration is used.\n    ", lineno=225, col_offset=-1), lineno=225, col_offset=-1), Assign([Name('default_cfg', Store(), lineno=226, col_offset=4)], Str('turtle.cfg', lineno=226, col_offset=18), lineno=226, col_offset=4), Assign([Name('cfgdict1', Store(), lineno=227, col_offset=4)], Dict([], [], lineno=227, col_offset=15), lineno=227, col_offset=4), Assign([Name('cfgdict2', Store(), lineno=228, col_offset=4)], Dict([], [], lineno=228, col_offset=15), lineno=228, col_offset=4), If(Call(Name('isfile', Load(), lineno=229, col_offset=7), [Name('default_cfg', Load(), lineno=229, col_offset=14)], [], None, None, lineno=229, col_offset=7), [Assign([Name('cfgdict1', Store(), lineno=230, col_offset=8)], Call(Name('config_dict', Load(), lineno=230, col_offset=19), [Name('default_cfg', Load(), lineno=230, col_offset=31)], [], None, None, lineno=230, col_offset=19), lineno=230, col_offset=8)], [], lineno=229, col_offset=4), If(Compare(Str('importconfig', lineno=232, col_offset=7), [In()], [Name('cfgdict1', Load(), lineno=232, col_offset=25)], lineno=232, col_offset=7), [Assign([Name('default_cfg', Store(), lineno=233, col_offset=8)], BinOp(Str('turtle_%s.cfg', lineno=233, col_offset=22), Mod(), Subscript(Name('cfgdict1', Load(), lineno=233, col_offset=40), Index(Str('importconfig', lineno=233, col_offset=49)), Load(), lineno=233, col_offset=40), lineno=233, col_offset=22), lineno=233, col_offset=8)], [], lineno=232, col_offset=4), TryExcept([Assign([Tuple([Name('head', Store(), lineno=235, col_offset=8), Name('tail', Store(), lineno=235, col_offset=14)], Store(), lineno=235, col_offset=8)], Call(Name('split', Load(), lineno=235, col_offset=21), [Name('__file__', Load(), lineno=235, col_offset=27)], [], None, None, lineno=235, col_offset=21), lineno=235, col_offset=8), Assign([Name('cfg_file2', Store(), lineno=236, col_offset=8)], Call(Name('join', Load(), lineno=236, col_offset=20), [Name('head', Load(), lineno=236, col_offset=25), Name('default_cfg', Load(), lineno=236, col_offset=31)], [], None, None, lineno=236, col_offset=20), lineno=236, col_offset=8)], [ExceptHandler(None, None, [Assign([Name('cfg_file2', Store(), lineno=238, col_offset=8)], Str('', lineno=238, col_offset=20), lineno=238, col_offset=8)], lineno=237, col_offset=4)], [], lineno=234, col_offset=4), If(Call(Name('isfile', Load(), lineno=239, col_offset=7), [Name('cfg_file2', Load(), lineno=239, col_offset=14)], [], None, None, lineno=239, col_offset=7), [Assign([Name('cfgdict2', Store(), lineno=241, col_offset=8)], Call(Name('config_dict', Load(), lineno=241, col_offset=19), [Name('cfg_file2', Load(), lineno=241, col_offset=31)], [], None, None, lineno=241, col_offset=19), lineno=241, col_offset=8)], [], lineno=239, col_offset=4), Expr(Call(Attribute(Name('_CFG', Load(), lineno=244, col_offset=4), 'update', Load(), lineno=244, col_offset=4), [Name('cfgdict2', Load(), lineno=244, col_offset=16)], [], None, None, lineno=244, col_offset=4), lineno=244, col_offset=4), Expr(Call(Attribute(Name('_CFG', Load(), lineno=247, col_offset=4), 'update', Load(), lineno=247, col_offset=4), [Name('cfgdict1', Load(), lineno=247, col_offset=16)], [], None, None, lineno=247, col_offset=4), lineno=247, col_offset=4)], [], lineno=213, col_offset=0), TryExcept([Expr(Call(Name('readconfig', Load(), lineno=251, col_offset=4), [Name('_CFG', Load(), lineno=251, col_offset=15)], [], None, None, lineno=251, col_offset=4), lineno=251, col_offset=4)], [ExceptHandler(None, None, [Print(None, [Str('No configfile read, reason unknown', lineno=253, col_offset=10)], True, lineno=253, col_offset=4)], lineno=252, col_offset=0)], [], lineno=250, col_offset=0), ClassDef('Vec2D', [Name('tuple', Load(), lineno=256, col_offset=12)], [Expr(Str('A 2 dimensional vector class, used as a helper class\n    for implementing turtle graphics.\n    May be useful for turtle graphics programs also.\n    Derived from tuple, so a vector is a tuple!\n\n    Provides (for a, b vectors, k number):\n       a+b vector addition\n       a-b vector subtraction\n       a*b inner product\n       k*a and a*k multiplication with scalar\n       |a| absolute value of a\n       a.rotate(angle) rotation\n    ', lineno=269, col_offset=-1), lineno=269, col_offset=-1), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=270, col_offset=16), Name('x', Param(), lineno=270, col_offset=21), Name('y', Param(), lineno=270, col_offset=24)], None, None, []), [Return(Call(Attribute(Name('tuple', Load(), lineno=271, col_offset=15), '__new__', Load(), lineno=271, col_offset=15), [Name('cls', Load(), lineno=271, col_offset=29), Tuple([Name('x', Load(), lineno=271, col_offset=35), Name('y', Load(), lineno=271, col_offset=38)], Load(), lineno=271, col_offset=35)], [], None, None, lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4), FunctionDef('__add__', arguments([Name('self', Param(), lineno=272, col_offset=16), Name('other', Param(), lineno=272, col_offset=22)], None, None, []), [Return(Call(Name('Vec2D', Load(), lineno=273, col_offset=15), [BinOp(Subscript(Name('self', Load(), lineno=273, col_offset=21), Index(Num(0, lineno=273, col_offset=26)), Load(), lineno=273, col_offset=21), Add(), Subscript(Name('other', Load(), lineno=273, col_offset=29), Index(Num(0, lineno=273, col_offset=35)), Load(), lineno=273, col_offset=29), lineno=273, col_offset=21), BinOp(Subscript(Name('self', Load(), lineno=273, col_offset=39), Index(Num(1, lineno=273, col_offset=44)), Load(), lineno=273, col_offset=39), Add(), Subscript(Name('other', Load(), lineno=273, col_offset=47), Index(Num(1, lineno=273, col_offset=53)), Load(), lineno=273, col_offset=47), lineno=273, col_offset=39)], [], None, None, lineno=273, col_offset=15), lineno=273, col_offset=8)], [], lineno=272, col_offset=4), FunctionDef('__mul__', arguments([Name('self', Param(), lineno=274, col_offset=16), Name('other', Param(), lineno=274, col_offset=22)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=275, col_offset=11), [Name('other', Load(), lineno=275, col_offset=22), Name('Vec2D', Load(), lineno=275, col_offset=29)], [], None, None, lineno=275, col_offset=11), [Return(BinOp(BinOp(Subscript(Name('self', Load(), lineno=276, col_offset=19), Index(Num(0, lineno=276, col_offset=24)), Load(), lineno=276, col_offset=19), Mult(), Subscript(Name('other', Load(), lineno=276, col_offset=27), Index(Num(0, lineno=276, col_offset=33)), Load(), lineno=276, col_offset=27), lineno=276, col_offset=19), Add(), BinOp(Subscript(Name('self', Load(), lineno=276, col_offset=36), Index(Num(1, lineno=276, col_offset=41)), Load(), lineno=276, col_offset=36), Mult(), Subscript(Name('other', Load(), lineno=276, col_offset=44), Index(Num(1, lineno=276, col_offset=50)), Load(), lineno=276, col_offset=44), lineno=276, col_offset=36), lineno=276, col_offset=19), lineno=276, col_offset=12)], [], lineno=275, col_offset=8), Return(Call(Name('Vec2D', Load(), lineno=277, col_offset=15), [BinOp(Subscript(Name('self', Load(), lineno=277, col_offset=21), Index(Num(0, lineno=277, col_offset=26)), Load(), lineno=277, col_offset=21), Mult(), Name('other', Load(), lineno=277, col_offset=29), lineno=277, col_offset=21), BinOp(Subscript(Name('self', Load(), lineno=277, col_offset=36), Index(Num(1, lineno=277, col_offset=41)), Load(), lineno=277, col_offset=36), Mult(), Name('other', Load(), lineno=277, col_offset=44), lineno=277, col_offset=36)], [], None, None, lineno=277, col_offset=15), lineno=277, col_offset=8)], [], lineno=274, col_offset=4), FunctionDef('__rmul__', arguments([Name('self', Param(), lineno=278, col_offset=17), Name('other', Param(), lineno=278, col_offset=23)], None, None, []), [If(BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=279, col_offset=11), [Name('other', Load(), lineno=279, col_offset=22), Name('int', Load(), lineno=279, col_offset=29)], [], None, None, lineno=279, col_offset=11), Call(Name('isinstance', Load(), lineno=279, col_offset=37), [Name('other', Load(), lineno=279, col_offset=48), Name('float', Load(), lineno=279, col_offset=55)], [], None, None, lineno=279, col_offset=37)], lineno=279, col_offset=11), [Return(Call(Name('Vec2D', Load(), lineno=280, col_offset=19), [BinOp(Subscript(Name('self', Load(), lineno=280, col_offset=25), Index(Num(0, lineno=280, col_offset=30)), Load(), lineno=280, col_offset=25), Mult(), Name('other', Load(), lineno=280, col_offset=33), lineno=280, col_offset=25), BinOp(Subscript(Name('self', Load(), lineno=280, col_offset=40), Index(Num(1, lineno=280, col_offset=45)), Load(), lineno=280, col_offset=40), Mult(), Name('other', Load(), lineno=280, col_offset=48), lineno=280, col_offset=40)], [], None, None, lineno=280, col_offset=19), lineno=280, col_offset=12)], [], lineno=279, col_offset=8)], [], lineno=278, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=281, col_offset=16), Name('other', Param(), lineno=281, col_offset=22)], None, None, []), [Return(Call(Name('Vec2D', Load(), lineno=282, col_offset=15), [BinOp(Subscript(Name('self', Load(), lineno=282, col_offset=21), Index(Num(0, lineno=282, col_offset=26)), Load(), lineno=282, col_offset=21), Sub(), Subscript(Name('other', Load(), lineno=282, col_offset=29), Index(Num(0, lineno=282, col_offset=35)), Load(), lineno=282, col_offset=29), lineno=282, col_offset=21), BinOp(Subscript(Name('self', Load(), lineno=282, col_offset=39), Index(Num(1, lineno=282, col_offset=44)), Load(), lineno=282, col_offset=39), Sub(), Subscript(Name('other', Load(), lineno=282, col_offset=47), Index(Num(1, lineno=282, col_offset=53)), Load(), lineno=282, col_offset=47), lineno=282, col_offset=39)], [], None, None, lineno=282, col_offset=15), lineno=282, col_offset=8)], [], lineno=281, col_offset=4), FunctionDef('__neg__', arguments([Name('self', Param(), lineno=283, col_offset=16)], None, None, []), [Return(Call(Name('Vec2D', Load(), lineno=284, col_offset=15), [UnaryOp(USub(), Subscript(Name('self', Load(), lineno=284, col_offset=22), Index(Num(0, lineno=284, col_offset=27)), Load(), lineno=284, col_offset=22), lineno=284, col_offset=21), UnaryOp(USub(), Subscript(Name('self', Load(), lineno=284, col_offset=32), Index(Num(1, lineno=284, col_offset=37)), Load(), lineno=284, col_offset=32), lineno=284, col_offset=31)], [], None, None, lineno=284, col_offset=15), lineno=284, col_offset=8)], [], lineno=283, col_offset=4), FunctionDef('__abs__', arguments([Name('self', Param(), lineno=285, col_offset=16)], None, None, []), [Return(BinOp(BinOp(BinOp(Subscript(Name('self', Load(), lineno=286, col_offset=16), Index(Num(0, lineno=286, col_offset=21)), Load(), lineno=286, col_offset=16), Pow(), Num(2, lineno=286, col_offset=25), lineno=286, col_offset=16), Add(), BinOp(Subscript(Name('self', Load(), lineno=286, col_offset=29), Index(Num(1, lineno=286, col_offset=34)), Load(), lineno=286, col_offset=29), Pow(), Num(2, lineno=286, col_offset=38), lineno=286, col_offset=29), lineno=286, col_offset=16), Pow(), Num(0.5, lineno=286, col_offset=42), lineno=286, col_offset=15), lineno=286, col_offset=8)], [], lineno=285, col_offset=4), FunctionDef('rotate', arguments([Name('self', Param(), lineno=287, col_offset=15), Name('angle', Param(), lineno=287, col_offset=21)], None, None, []), [Expr(Str('rotate self counterclockwise by angle\n        ', lineno=289, col_offset=-1), lineno=289, col_offset=-1), Assign([Name('perp', Store(), lineno=290, col_offset=8)], Call(Name('Vec2D', Load(), lineno=290, col_offset=15), [UnaryOp(USub(), Subscript(Name('self', Load(), lineno=290, col_offset=22), Index(Num(1, lineno=290, col_offset=27)), Load(), lineno=290, col_offset=22), lineno=290, col_offset=21), Subscript(Name('self', Load(), lineno=290, col_offset=31), Index(Num(0, lineno=290, col_offset=36)), Load(), lineno=290, col_offset=31)], [], None, None, lineno=290, col_offset=15), lineno=290, col_offset=8), Assign([Name('angle', Store(), lineno=291, col_offset=8)], BinOp(BinOp(Name('angle', Load(), lineno=291, col_offset=16), Mult(), Attribute(Name('math', Load(), lineno=291, col_offset=24), 'pi', Load(), lineno=291, col_offset=24), lineno=291, col_offset=16), Div(), Num(180.0, lineno=291, col_offset=34), lineno=291, col_offset=32), lineno=291, col_offset=8), Assign([Tuple([Name('c', Store(), lineno=292, col_offset=8), Name('s', Store(), lineno=292, col_offset=11)], Store(), lineno=292, col_offset=8)], Tuple([Call(Attribute(Name('math', Load(), lineno=292, col_offset=15), 'cos', Load(), lineno=292, col_offset=15), [Name('angle', Load(), lineno=292, col_offset=24)], [], None, None, lineno=292, col_offset=15), Call(Attribute(Name('math', Load(), lineno=292, col_offset=32), 'sin', Load(), lineno=292, col_offset=32), [Name('angle', Load(), lineno=292, col_offset=41)], [], None, None, lineno=292, col_offset=32)], Load(), lineno=292, col_offset=15), lineno=292, col_offset=8), Return(Call(Name('Vec2D', Load(), lineno=293, col_offset=15), [BinOp(BinOp(Subscript(Name('self', Load(), lineno=293, col_offset=21), Index(Num(0, lineno=293, col_offset=26)), Load(), lineno=293, col_offset=21), Mult(), Name('c', Load(), lineno=293, col_offset=29), lineno=293, col_offset=21), Add(), BinOp(Subscript(Name('perp', Load(), lineno=293, col_offset=31), Index(Num(0, lineno=293, col_offset=36)), Load(), lineno=293, col_offset=31), Mult(), Name('s', Load(), lineno=293, col_offset=39), lineno=293, col_offset=31), lineno=293, col_offset=21), BinOp(BinOp(Subscript(Name('self', Load(), lineno=293, col_offset=42), Index(Num(1, lineno=293, col_offset=47)), Load(), lineno=293, col_offset=42), Mult(), Name('c', Load(), lineno=293, col_offset=50), lineno=293, col_offset=42), Add(), BinOp(Subscript(Name('perp', Load(), lineno=293, col_offset=52), Index(Num(1, lineno=293, col_offset=57)), Load(), lineno=293, col_offset=52), Mult(), Name('s', Load(), lineno=293, col_offset=60), lineno=293, col_offset=52), lineno=293, col_offset=42)], [], None, None, lineno=293, col_offset=15), lineno=293, col_offset=8)], [], lineno=287, col_offset=4), FunctionDef('__getnewargs__', arguments([Name('self', Param(), lineno=294, col_offset=23)], None, None, []), [Return(Tuple([Subscript(Name('self', Load(), lineno=295, col_offset=16), Index(Num(0, lineno=295, col_offset=21)), Load(), lineno=295, col_offset=16), Subscript(Name('self', Load(), lineno=295, col_offset=25), Index(Num(1, lineno=295, col_offset=30)), Load(), lineno=295, col_offset=25)], Load(), lineno=295, col_offset=16), lineno=295, col_offset=8)], [], lineno=294, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=296, col_offset=17)], None, None, []), [Return(BinOp(Str('(%.2f,%.2f)', lineno=297, col_offset=15), Mod(), Name('self', Load(), lineno=297, col_offset=31), lineno=297, col_offset=15), lineno=297, col_offset=8)], [], lineno=296, col_offset=4)], [], lineno=256, col_offset=0), FunctionDef('__methodDict', arguments([Name('cls', Param(), lineno=308, col_offset=17), Name('_dict', Param(), lineno=308, col_offset=22)], None, None, []), [Expr(Str('helper function for Scrolled Canvas', lineno=309, col_offset=4), lineno=309, col_offset=4), Assign([Name('baseList', Store(), lineno=310, col_offset=4)], Call(Name('list', Load(), lineno=310, col_offset=15), [Attribute(Name('cls', Load(), lineno=310, col_offset=20), '__bases__', Load(), lineno=310, col_offset=20)], [], None, None, lineno=310, col_offset=15), lineno=310, col_offset=4), Expr(Call(Attribute(Name('baseList', Load(), lineno=311, col_offset=4), 'reverse', Load(), lineno=311, col_offset=4), [], [], None, None, lineno=311, col_offset=4), lineno=311, col_offset=4), For(Name('_super', Store(), lineno=312, col_offset=8), Name('baseList', Load(), lineno=312, col_offset=18), [Expr(Call(Name('__methodDict', Load(), lineno=313, col_offset=8), [Name('_super', Load(), lineno=313, col_offset=21), Name('_dict', Load(), lineno=313, col_offset=29)], [], None, None, lineno=313, col_offset=8), lineno=313, col_offset=8)], [], lineno=312, col_offset=4), For(Tuple([Name('key', Store(), lineno=314, col_offset=8), Name('value', Store(), lineno=314, col_offset=13)], Store(), lineno=314, col_offset=8), Call(Attribute(Attribute(Name('cls', Load(), lineno=314, col_offset=22), '__dict__', Load(), lineno=314, col_offset=22), 'items', Load(), lineno=314, col_offset=22), [], [], None, None, lineno=314, col_offset=22), [If(Compare(Call(Name('type', Load(), lineno=315, col_offset=11), [Name('value', Load(), lineno=315, col_offset=16)], [], None, None, lineno=315, col_offset=11), [Eq()], [Attribute(Name('types', Load(), lineno=315, col_offset=26), 'FunctionType', Load(), lineno=315, col_offset=26)], lineno=315, col_offset=11), [Assign([Subscript(Name('_dict', Load(), lineno=316, col_offset=12), Index(Name('key', Load(), lineno=316, col_offset=18)), Store(), lineno=316, col_offset=12)], Name('value', Load(), lineno=316, col_offset=25), lineno=316, col_offset=12)], [], lineno=315, col_offset=8)], [], lineno=314, col_offset=4)], [], lineno=308, col_offset=0), FunctionDef('__methods', arguments([Name('cls', Param(), lineno=318, col_offset=14)], None, None, []), [Expr(Str('helper function for Scrolled Canvas', lineno=319, col_offset=4), lineno=319, col_offset=4), Assign([Name('_dict', Store(), lineno=320, col_offset=4)], Dict([], [], lineno=320, col_offset=12), lineno=320, col_offset=4), Expr(Call(Name('__methodDict', Load(), lineno=321, col_offset=4), [Name('cls', Load(), lineno=321, col_offset=17), Name('_dict', Load(), lineno=321, col_offset=22)], [], None, None, lineno=321, col_offset=4), lineno=321, col_offset=4), Return(Call(Attribute(Name('_dict', Load(), lineno=322, col_offset=11), 'keys', Load(), lineno=322, col_offset=11), [], [], None, None, lineno=322, col_offset=11), lineno=322, col_offset=4)], [], lineno=318, col_offset=0), Assign([Name('__stringBody', Store(), lineno=324, col_offset=0)], BinOp(Str('def %(method)s(self, *args, **kw): return ', lineno=325, col_offset=4), Add(), Str('self.%(attribute)s.%(method)s(*args, **kw)', lineno=326, col_offset=4), lineno=325, col_offset=4), lineno=324, col_offset=0), FunctionDef('__forwardmethods', arguments([Name('fromClass', Param(), lineno=328, col_offset=21), Name('toClass', Param(), lineno=328, col_offset=32), Name('toPart', Param(), lineno=328, col_offset=41), Name('exclude', Param(), lineno=328, col_offset=49)], None, None, [Tuple([], Load(), lineno=328, col_offset=59)]), [Expr(Str('Helper functions for Scrolled Canvas, used to forward\n    ScrolledCanvas-methods to Tkinter.Canvas class.\n    ', lineno=331, col_offset=-1), lineno=331, col_offset=-1), Assign([Name('_dict', Store(), lineno=332, col_offset=4)], Dict([], [], lineno=332, col_offset=12), lineno=332, col_offset=4), Expr(Call(Name('__methodDict', Load(), lineno=333, col_offset=4), [Name('toClass', Load(), lineno=333, col_offset=17), Name('_dict', Load(), lineno=333, col_offset=26)], [], None, None, lineno=333, col_offset=4), lineno=333, col_offset=4), For(Name('ex', Store(), lineno=334, col_offset=8), Call(Attribute(Name('_dict', Load(), lineno=334, col_offset=14), 'keys', Load(), lineno=334, col_offset=14), [], [], None, None, lineno=334, col_offset=14), [If(BoolOp(Or(), [Compare(Subscript(Name('ex', Load(), lineno=335, col_offset=11), Slice(None, Num(1, lineno=335, col_offset=15), None), Load(), lineno=335, col_offset=11), [Eq()], [Str('_', lineno=335, col_offset=21)], lineno=335, col_offset=11), Compare(Subscript(Name('ex', Load(), lineno=335, col_offset=28), Slice(Num(-1, lineno=335, col_offset=32), None, None), Load(), lineno=335, col_offset=28), [Eq()], [Str('_', lineno=335, col_offset=39)], lineno=335, col_offset=28)], lineno=335, col_offset=11), [Delete([Subscript(Name('_dict', Load(), lineno=336, col_offset=16), Index(Name('ex', Load(), lineno=336, col_offset=22)), Del(), lineno=336, col_offset=16)], lineno=336, col_offset=12)], [], lineno=335, col_offset=8)], [], lineno=334, col_offset=4), For(Name('ex', Store(), lineno=337, col_offset=8), Name('exclude', Load(), lineno=337, col_offset=14), [If(Compare(Name('ex', Load(), lineno=338, col_offset=11), [In()], [Name('_dict', Load(), lineno=338, col_offset=17)], lineno=338, col_offset=11), [Delete([Subscript(Name('_dict', Load(), lineno=339, col_offset=16), Index(Name('ex', Load(), lineno=339, col_offset=22)), Del(), lineno=339, col_offset=16)], lineno=339, col_offset=12)], [], lineno=338, col_offset=8)], [], lineno=337, col_offset=4), For(Name('ex', Store(), lineno=340, col_offset=8), Call(Name('__methods', Load(), lineno=340, col_offset=14), [Name('fromClass', Load(), lineno=340, col_offset=24)], [], None, None, lineno=340, col_offset=14), [If(Compare(Name('ex', Load(), lineno=341, col_offset=11), [In()], [Name('_dict', Load(), lineno=341, col_offset=17)], lineno=341, col_offset=11), [Delete([Subscript(Name('_dict', Load(), lineno=342, col_offset=16), Index(Name('ex', Load(), lineno=342, col_offset=22)), Del(), lineno=342, col_offset=16)], lineno=342, col_offset=12)], [], lineno=341, col_offset=8)], [], lineno=340, col_offset=4), For(Tuple([Name('method', Store(), lineno=344, col_offset=8), Name('func', Store(), lineno=344, col_offset=16)], Store(), lineno=344, col_offset=8), Call(Attribute(Name('_dict', Load(), lineno=344, col_offset=24), 'items', Load(), lineno=344, col_offset=24), [], [], None, None, lineno=344, col_offset=24), [Assign([Name('d', Store(), lineno=345, col_offset=8)], Dict([Str('method', lineno=345, col_offset=13), Str('func', lineno=345, col_offset=31)], [Name('method', Load(), lineno=345, col_offset=23), Name('func', Load(), lineno=345, col_offset=39)], lineno=345, col_offset=12), lineno=345, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=346, col_offset=11), [Name('toPart', Load(), lineno=346, col_offset=16)], [], None, None, lineno=346, col_offset=11), [Eq()], [Attribute(Name('types', Load(), lineno=346, col_offset=27), 'StringType', Load(), lineno=346, col_offset=27)], lineno=346, col_offset=11), [Assign([Name('execString', Store(), lineno=347, col_offset=12)], BinOp(Name('__stringBody', Load(), lineno=348, col_offset=16), Mod(), Dict([Str('method', lineno=348, col_offset=32), Str('attribute', lineno=348, col_offset=51)], [Name('method', Load(), lineno=348, col_offset=43), Name('toPart', Load(), lineno=348, col_offset=65)], lineno=348, col_offset=31), lineno=348, col_offset=16), lineno=347, col_offset=12)], [], lineno=346, col_offset=8), Exec(Name('execString', Load(), lineno=349, col_offset=13), Name('d', Load(), lineno=349, col_offset=27), None, lineno=349, col_offset=8), Assign([Subscript(Attribute(Name('fromClass', Load(), lineno=350, col_offset=8), '__dict__', Load(), lineno=350, col_offset=8), Index(Name('method', Load(), lineno=350, col_offset=27)), Store(), lineno=350, col_offset=8)], Subscript(Name('d', Load(), lineno=350, col_offset=37), Index(Name('method', Load(), lineno=350, col_offset=39)), Load(), lineno=350, col_offset=37), lineno=350, col_offset=8)], [], lineno=344, col_offset=4)], [], lineno=328, col_offset=0), ClassDef('ScrolledCanvas', [Attribute(Name('TK', Load(), lineno=353, col_offset=21), 'Frame', Load(), lineno=353, col_offset=21)], [Expr(Str("Modeled after the scrolled canvas class from Grayons's Tkinter book.\n\n    Used as the default canvas, which pops up automatically when\n    using turtle graphics functions or the Turtle class.\n    ", lineno=358, col_offset=-1), lineno=358, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=359, col_offset=17), Name('master', Param(), lineno=359, col_offset=23), Name('width', Param(), lineno=359, col_offset=31), Name('height', Param(), lineno=359, col_offset=42), Name('canvwidth', Param(), lineno=360, col_offset=42), Name('canvheight', Param(), lineno=360, col_offset=57)], None, None, [Num(500, lineno=359, col_offset=37), Num(350, lineno=359, col_offset=49), Num(600, lineno=360, col_offset=52), Num(500, lineno=360, col_offset=68)]), [Expr(Call(Attribute(Attribute(Name('TK', Load(), lineno=361, col_offset=8), 'Frame', Load(), lineno=361, col_offset=8), '__init__', Load(), lineno=361, col_offset=8), [Name('self', Load(), lineno=361, col_offset=26), Name('master', Load(), lineno=361, col_offset=32)], [keyword('width', Name('width', Load(), lineno=361, col_offset=46)), keyword('height', Name('height', Load(), lineno=361, col_offset=60))], None, None, lineno=361, col_offset=8), lineno=361, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=362, col_offset=8), '_rootwindow', Store(), lineno=362, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=362, col_offset=27), 'winfo_toplevel', Load(), lineno=362, col_offset=27), [], [], None, None, lineno=362, col_offset=27), lineno=362, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=363, col_offset=8), 'width', Store(), lineno=363, col_offset=8), Attribute(Name('self', Load(), lineno=363, col_offset=20), 'height', Store(), lineno=363, col_offset=20)], Store(), lineno=363, col_offset=8)], Tuple([Name('width', Load(), lineno=363, col_offset=34), Name('height', Load(), lineno=363, col_offset=41)], Load(), lineno=363, col_offset=34), lineno=363, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=364, col_offset=8), 'canvwidth', Store(), lineno=364, col_offset=8), Attribute(Name('self', Load(), lineno=364, col_offset=24), 'canvheight', Store(), lineno=364, col_offset=24)], Store(), lineno=364, col_offset=8)], Tuple([Name('canvwidth', Load(), lineno=364, col_offset=42), Name('canvheight', Load(), lineno=364, col_offset=53)], Load(), lineno=364, col_offset=42), lineno=364, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=365, col_offset=8), 'bg', Store(), lineno=365, col_offset=8)], Str('white', lineno=365, col_offset=18), lineno=365, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=366, col_offset=8), '_canvas', Store(), lineno=366, col_offset=8)], Call(Attribute(Name('TK', Load(), lineno=366, col_offset=23), 'Canvas', Load(), lineno=366, col_offset=23), [Name('master', Load(), lineno=366, col_offset=33)], [keyword('width', Name('width', Load(), lineno=366, col_offset=47)), keyword('height', Name('height', Load(), lineno=366, col_offset=61)), keyword('bg', Attribute(Name('self', Load(), lineno=367, col_offset=36), 'bg', Load(), lineno=367, col_offset=36)), keyword('relief', Attribute(Name('TK', Load(), lineno=367, col_offset=52), 'SUNKEN', Load(), lineno=367, col_offset=52)), keyword('borderwidth', Num(2, lineno=367, col_offset=75))], None, None, lineno=366, col_offset=23), lineno=366, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=368, col_offset=8), 'hscroll', Store(), lineno=368, col_offset=8)], Call(Attribute(Name('TK', Load(), lineno=368, col_offset=23), 'Scrollbar', Load(), lineno=368, col_offset=23), [Name('master', Load(), lineno=368, col_offset=36)], [keyword('command', Attribute(Attribute(Name('self', Load(), lineno=368, col_offset=52), '_canvas', Load(), lineno=368, col_offset=52), 'xview', Load(), lineno=368, col_offset=52)), keyword('orient', Attribute(Name('TK', Load(), lineno=369, col_offset=43), 'HORIZONTAL', Load(), lineno=369, col_offset=43))], None, None, lineno=368, col_offset=23), lineno=368, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=370, col_offset=8), 'vscroll', Store(), lineno=370, col_offset=8)], Call(Attribute(Name('TK', Load(), lineno=370, col_offset=23), 'Scrollbar', Load(), lineno=370, col_offset=23), [Name('master', Load(), lineno=370, col_offset=36)], [keyword('command', Attribute(Attribute(Name('self', Load(), lineno=370, col_offset=52), '_canvas', Load(), lineno=370, col_offset=52), 'yview', Load(), lineno=370, col_offset=52))], None, None, lineno=370, col_offset=23), lineno=370, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=371, col_offset=8), '_canvas', Load(), lineno=371, col_offset=8), 'configure', Load(), lineno=371, col_offset=8), [], [keyword('xscrollcommand', Attribute(Attribute(Name('self', Load(), lineno=371, col_offset=46), 'hscroll', Load(), lineno=371, col_offset=46), 'set', Load(), lineno=371, col_offset=46)), keyword('yscrollcommand', Attribute(Attribute(Name('self', Load(), lineno=372, col_offset=46), 'vscroll', Load(), lineno=372, col_offset=46), 'set', Load(), lineno=372, col_offset=46))], None, None, lineno=371, col_offset=8), lineno=371, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=373, col_offset=8), 'rowconfigure', Load(), lineno=373, col_offset=8), [Num(0, lineno=373, col_offset=26)], [keyword('weight', Num(1, lineno=373, col_offset=36)), keyword('minsize', Num(0, lineno=373, col_offset=47))], None, None, lineno=373, col_offset=8), lineno=373, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=374, col_offset=8), 'columnconfigure', Load(), lineno=374, col_offset=8), [Num(0, lineno=374, col_offset=29)], [keyword('weight', Num(1, lineno=374, col_offset=39)), keyword('minsize', Num(0, lineno=374, col_offset=50))], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=375, col_offset=8), '_canvas', Load(), lineno=375, col_offset=8), 'grid', Load(), lineno=375, col_offset=8), [], [keyword('padx', Num(1, lineno=375, col_offset=31)), keyword('in_', Name('self', Load(), lineno=375, col_offset=40)), keyword('pady', Num(1, lineno=375, col_offset=51)), keyword('row', Num(0, lineno=375, col_offset=58)), keyword('column', Num(0, lineno=376, col_offset=23)), keyword('rowspan', Num(1, lineno=376, col_offset=34)), keyword('columnspan', Num(1, lineno=376, col_offset=48)), keyword('sticky', Str('news', lineno=376, col_offset=58))], None, None, lineno=375, col_offset=8), lineno=375, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=377, col_offset=8), 'vscroll', Load(), lineno=377, col_offset=8), 'grid', Load(), lineno=377, col_offset=8), [], [keyword('padx', Num(1, lineno=377, col_offset=31)), keyword('in_', Name('self', Load(), lineno=377, col_offset=40)), keyword('pady', Num(1, lineno=377, col_offset=51)), keyword('row', Num(0, lineno=377, col_offset=58)), keyword('column', Num(1, lineno=378, col_offset=23)), keyword('rowspan', Num(1, lineno=378, col_offset=34)), keyword('columnspan', Num(1, lineno=378, col_offset=48)), keyword('sticky', Str('news', lineno=378, col_offset=58))], None, None, lineno=377, col_offset=8), lineno=377, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=379, col_offset=8), 'hscroll', Load(), lineno=379, col_offset=8), 'grid', Load(), lineno=379, col_offset=8), [], [keyword('padx', Num(1, lineno=379, col_offset=31)), keyword('in_', Name('self', Load(), lineno=379, col_offset=40)), keyword('pady', Num(1, lineno=379, col_offset=51)), keyword('row', Num(1, lineno=379, col_offset=58)), keyword('column', Num(0, lineno=380, col_offset=23)), keyword('rowspan', Num(1, lineno=380, col_offset=34)), keyword('columnspan', Num(1, lineno=380, col_offset=48)), keyword('sticky', Str('news', lineno=380, col_offset=58))], None, None, lineno=379, col_offset=8), lineno=379, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=381, col_offset=8), 'reset', Load(), lineno=381, col_offset=8), [], [], None, None, lineno=381, col_offset=8), lineno=381, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=382, col_offset=8), '_rootwindow', Load(), lineno=382, col_offset=8), 'bind', Load(), lineno=382, col_offset=8), [Str('<Configure>', lineno=382, col_offset=30), Attribute(Name('self', Load(), lineno=382, col_offset=45), 'onResize', Load(), lineno=382, col_offset=45)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8)], [], lineno=359, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=384, col_offset=14), Name('canvwidth', Param(), lineno=384, col_offset=20), Name('canvheight', Param(), lineno=384, col_offset=36), Name('bg', Param(), lineno=384, col_offset=53)], None, None, [Name('None', Load(), lineno=384, col_offset=30), Name('None', Load(), lineno=384, col_offset=47), Name('None', Load(), lineno=384, col_offset=58)]), [Expr(Str('Adjust canvas and scrollbars according to given canvas size.', lineno=385, col_offset=8), lineno=385, col_offset=8), If(Name('canvwidth', Load(), lineno=386, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=387, col_offset=12), 'canvwidth', Store(), lineno=387, col_offset=12)], Name('canvwidth', Load(), lineno=387, col_offset=29), lineno=387, col_offset=12)], [], lineno=386, col_offset=8), If(Name('canvheight', Load(), lineno=388, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=389, col_offset=12), 'canvheight', Store(), lineno=389, col_offset=12)], Name('canvheight', Load(), lineno=389, col_offset=30), lineno=389, col_offset=12)], [], lineno=388, col_offset=8), If(Name('bg', Load(), lineno=390, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=391, col_offset=12), 'bg', Store(), lineno=391, col_offset=12)], Name('bg', Load(), lineno=391, col_offset=22), lineno=391, col_offset=12)], [], lineno=390, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=392, col_offset=8), '_canvas', Load(), lineno=392, col_offset=8), 'config', Load(), lineno=392, col_offset=8), [], [keyword('bg', Name('bg', Load(), lineno=392, col_offset=31)), keyword('scrollregion', Tuple([BinOp(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=393, col_offset=39), 'canvwidth', Load(), lineno=393, col_offset=39), lineno=393, col_offset=38), FloorDiv(), Num(2, lineno=393, col_offset=55), lineno=393, col_offset=38), BinOp(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=393, col_offset=59), 'canvheight', Load(), lineno=393, col_offset=59), lineno=393, col_offset=58), FloorDiv(), Num(2, lineno=393, col_offset=76), lineno=393, col_offset=58), BinOp(Attribute(Name('self', Load(), lineno=394, col_offset=39), 'canvwidth', Load(), lineno=394, col_offset=39), FloorDiv(), Num(2, lineno=394, col_offset=55), lineno=394, col_offset=39), BinOp(Attribute(Name('self', Load(), lineno=394, col_offset=58), 'canvheight', Load(), lineno=394, col_offset=58), FloorDiv(), Num(2, lineno=394, col_offset=75), lineno=394, col_offset=58)], Load(), lineno=393, col_offset=38))], None, None, lineno=392, col_offset=8), lineno=392, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=395, col_offset=8), '_canvas', Load(), lineno=395, col_offset=8), 'xview_moveto', Load(), lineno=395, col_offset=8), [BinOp(BinOp(Num(0.5, lineno=395, col_offset=34), Mult(), BinOp(BinOp(Attribute(Name('self', Load(), lineno=395, col_offset=39), 'canvwidth', Load(), lineno=395, col_offset=39), Sub(), Attribute(Name('self', Load(), lineno=395, col_offset=56), 'width', Load(), lineno=395, col_offset=56), lineno=395, col_offset=39), Add(), Num(30, lineno=395, col_offset=69), lineno=395, col_offset=67), lineno=395, col_offset=34), Div(), Attribute(Name('self', Load(), lineno=396, col_offset=63), 'canvwidth', Load(), lineno=396, col_offset=63), lineno=395, col_offset=73)], [], None, None, lineno=395, col_offset=8), lineno=395, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=397, col_offset=8), '_canvas', Load(), lineno=397, col_offset=8), 'yview_moveto', Load(), lineno=397, col_offset=8), [BinOp(BinOp(Num(0.5, lineno=397, col_offset=34), Mult(), BinOp(BinOp(Attribute(Name('self', Load(), lineno=397, col_offset=39), 'canvheight', Load(), lineno=397, col_offset=39), Sub(), Attribute(Name('self', Load(), lineno=397, col_offset=56), 'height', Load(), lineno=397, col_offset=56), lineno=397, col_offset=39), Add(), Num(30, lineno=397, col_offset=70), lineno=397, col_offset=68), lineno=397, col_offset=34), Div(), Attribute(Name('self', Load(), lineno=398, col_offset=62), 'canvheight', Load(), lineno=398, col_offset=62), lineno=397, col_offset=74)], [], None, None, lineno=397, col_offset=8), lineno=397, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=399, col_offset=8), 'adjustScrolls', Load(), lineno=399, col_offset=8), [], [], None, None, lineno=399, col_offset=8), lineno=399, col_offset=8)], [], lineno=384, col_offset=4), FunctionDef('adjustScrolls', arguments([Name('self', Param(), lineno=402, col_offset=22)], None, None, []), [Expr(Str(' Adjust scrollbars according to window- and canvas-size.\n        ', lineno=404, col_offset=-1), lineno=404, col_offset=-1), Assign([Name('cwidth', Store(), lineno=405, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=405, col_offset=17), '_canvas', Load(), lineno=405, col_offset=17), 'winfo_width', Load(), lineno=405, col_offset=17), [], [], None, None, lineno=405, col_offset=17), lineno=405, col_offset=8), Assign([Name('cheight', Store(), lineno=406, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=406, col_offset=18), '_canvas', Load(), lineno=406, col_offset=18), 'winfo_height', Load(), lineno=406, col_offset=18), [], [], None, None, lineno=406, col_offset=18), lineno=406, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=407, col_offset=8), '_canvas', Load(), lineno=407, col_offset=8), 'xview_moveto', Load(), lineno=407, col_offset=8), [BinOp(BinOp(Num(0.5, lineno=407, col_offset=34), Mult(), BinOp(Attribute(Name('self', Load(), lineno=407, col_offset=39), 'canvwidth', Load(), lineno=407, col_offset=39), Sub(), Name('cwidth', Load(), lineno=407, col_offset=54), lineno=407, col_offset=39), lineno=407, col_offset=34), Div(), Attribute(Name('self', Load(), lineno=407, col_offset=62), 'canvwidth', Load(), lineno=407, col_offset=62), lineno=407, col_offset=61)], [], None, None, lineno=407, col_offset=8), lineno=407, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=408, col_offset=8), '_canvas', Load(), lineno=408, col_offset=8), 'yview_moveto', Load(), lineno=408, col_offset=8), [BinOp(BinOp(Num(0.5, lineno=408, col_offset=34), Mult(), BinOp(Attribute(Name('self', Load(), lineno=408, col_offset=39), 'canvheight', Load(), lineno=408, col_offset=39), Sub(), Name('cheight', Load(), lineno=408, col_offset=55), lineno=408, col_offset=39), lineno=408, col_offset=34), Div(), Attribute(Name('self', Load(), lineno=408, col_offset=64), 'canvheight', Load(), lineno=408, col_offset=64), lineno=408, col_offset=63)], [], None, None, lineno=408, col_offset=8), lineno=408, col_offset=8), If(BoolOp(Or(), [Compare(Name('cwidth', Load(), lineno=409, col_offset=11), [Lt()], [Attribute(Name('self', Load(), lineno=409, col_offset=20), 'canvwidth', Load(), lineno=409, col_offset=20)], lineno=409, col_offset=11), Compare(Name('cheight', Load(), lineno=409, col_offset=38), [Lt()], [Attribute(Name('self', Load(), lineno=409, col_offset=48), 'canvheight', Load(), lineno=409, col_offset=48)], lineno=409, col_offset=38)], lineno=409, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=410, col_offset=12), 'hscroll', Load(), lineno=410, col_offset=12), 'grid', Load(), lineno=410, col_offset=12), [], [keyword('padx', Num(1, lineno=410, col_offset=35)), keyword('in_', Name('self', Load(), lineno=410, col_offset=44)), keyword('pady', Num(1, lineno=410, col_offset=55)), keyword('row', Num(1, lineno=410, col_offset=62)), keyword('column', Num(0, lineno=411, col_offset=37)), keyword('rowspan', Num(1, lineno=411, col_offset=48)), keyword('columnspan', Num(1, lineno=411, col_offset=62)), keyword('sticky', Str('news', lineno=411, col_offset=72))], None, None, lineno=410, col_offset=12), lineno=410, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=412, col_offset=12), 'vscroll', Load(), lineno=412, col_offset=12), 'grid', Load(), lineno=412, col_offset=12), [], [keyword('padx', Num(1, lineno=412, col_offset=35)), keyword('in_', Name('self', Load(), lineno=412, col_offset=44)), keyword('pady', Num(1, lineno=412, col_offset=55)), keyword('row', Num(0, lineno=412, col_offset=62)), keyword('column', Num(1, lineno=413, col_offset=37)), keyword('rowspan', Num(1, lineno=413, col_offset=48)), keyword('columnspan', Num(1, lineno=413, col_offset=62)), keyword('sticky', Str('news', lineno=413, col_offset=72))], None, None, lineno=412, col_offset=12), lineno=412, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=415, col_offset=12), 'hscroll', Load(), lineno=415, col_offset=12), 'grid_forget', Load(), lineno=415, col_offset=12), [], [], None, None, lineno=415, col_offset=12), lineno=415, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=416, col_offset=12), 'vscroll', Load(), lineno=416, col_offset=12), 'grid_forget', Load(), lineno=416, col_offset=12), [], [], None, None, lineno=416, col_offset=12), lineno=416, col_offset=12)], lineno=409, col_offset=8)], [], lineno=402, col_offset=4), FunctionDef('onResize', arguments([Name('self', Param(), lineno=418, col_offset=17), Name('event', Param(), lineno=418, col_offset=23)], None, None, []), [Expr(Str('self-explanatory', lineno=419, col_offset=8), lineno=419, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=420, col_offset=8), 'adjustScrolls', Load(), lineno=420, col_offset=8), [], [], None, None, lineno=420, col_offset=8), lineno=420, col_offset=8)], [], lineno=418, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=422, col_offset=13)], 'args', None, []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=424, col_offset=-1), lineno=424, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=425, col_offset=15), '_canvas', Load(), lineno=425, col_offset=15), 'bbox', Load(), lineno=425, col_offset=15), [], [], Name('args', Load(), lineno=425, col_offset=34), None, lineno=425, col_offset=15), lineno=425, col_offset=8)], [], lineno=422, col_offset=4), FunctionDef('cget', arguments([Name('self', Param(), lineno=427, col_offset=13)], 'args', 'kwargs', []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=429, col_offset=-1), lineno=429, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=430, col_offset=15), '_canvas', Load(), lineno=430, col_offset=15), 'cget', Load(), lineno=430, col_offset=15), [], [], Name('args', Load(), lineno=430, col_offset=34), Name('kwargs', Load(), lineno=430, col_offset=42), lineno=430, col_offset=15), lineno=430, col_offset=8)], [], lineno=427, col_offset=4), FunctionDef('config', arguments([Name('self', Param(), lineno=432, col_offset=15)], 'args', 'kwargs', []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=434, col_offset=-1), lineno=434, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=435, col_offset=8), '_canvas', Load(), lineno=435, col_offset=8), 'config', Load(), lineno=435, col_offset=8), [], [], Name('args', Load(), lineno=435, col_offset=29), Name('kwargs', Load(), lineno=435, col_offset=37), lineno=435, col_offset=8), lineno=435, col_offset=8)], [], lineno=432, col_offset=4), FunctionDef('bind', arguments([Name('self', Param(), lineno=437, col_offset=13)], 'args', 'kwargs', []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=439, col_offset=-1), lineno=439, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=440, col_offset=8), '_canvas', Load(), lineno=440, col_offset=8), 'bind', Load(), lineno=440, col_offset=8), [], [], Name('args', Load(), lineno=440, col_offset=27), Name('kwargs', Load(), lineno=440, col_offset=35), lineno=440, col_offset=8), lineno=440, col_offset=8)], [], lineno=437, col_offset=4), FunctionDef('unbind', arguments([Name('self', Param(), lineno=442, col_offset=15)], 'args', 'kwargs', []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=444, col_offset=-1), lineno=444, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=445, col_offset=8), '_canvas', Load(), lineno=445, col_offset=8), 'unbind', Load(), lineno=445, col_offset=8), [], [], Name('args', Load(), lineno=445, col_offset=29), Name('kwargs', Load(), lineno=445, col_offset=37), lineno=445, col_offset=8), lineno=445, col_offset=8)], [], lineno=442, col_offset=4), FunctionDef('focus_force', arguments([Name('self', Param(), lineno=447, col_offset=20)], None, None, []), [Expr(Str(" 'forward' method, which canvas itself has inherited...\n        ", lineno=449, col_offset=-1), lineno=449, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=450, col_offset=8), '_canvas', Load(), lineno=450, col_offset=8), 'focus_force', Load(), lineno=450, col_offset=8), [], [], None, None, lineno=450, col_offset=8), lineno=450, col_offset=8)], [], lineno=447, col_offset=4)], [], lineno=353, col_offset=0), Expr(Call(Name('__forwardmethods', Load(), lineno=452, col_offset=0), [Name('ScrolledCanvas', Load(), lineno=452, col_offset=17), Attribute(Name('TK', Load(), lineno=452, col_offset=33), 'Canvas', Load(), lineno=452, col_offset=33), Str('_canvas', lineno=452, col_offset=44)], [], None, None, lineno=452, col_offset=0), lineno=452, col_offset=0), ClassDef('_Root', [Attribute(Name('TK', Load(), lineno=455, col_offset=12), 'Tk', Load(), lineno=455, col_offset=12)], [Expr(Str('Root class for Screen based on Tkinter.', lineno=456, col_offset=4), lineno=456, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=457, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('TK', Load(), lineno=458, col_offset=8), 'Tk', Load(), lineno=458, col_offset=8), '__init__', Load(), lineno=458, col_offset=8), [Name('self', Load(), lineno=458, col_offset=23)], [], None, None, lineno=458, col_offset=8), lineno=458, col_offset=8)], [], lineno=457, col_offset=4), FunctionDef('setupcanvas', arguments([Name('self', Param(), lineno=460, col_offset=20), Name('width', Param(), lineno=460, col_offset=26), Name('height', Param(), lineno=460, col_offset=33), Name('cwidth', Param(), lineno=460, col_offset=41), Name('cheight', Param(), lineno=460, col_offset=49)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=461, col_offset=8), '_canvas', Store(), lineno=461, col_offset=8)], Call(Name('ScrolledCanvas', Load(), lineno=461, col_offset=23), [Name('self', Load(), lineno=461, col_offset=38), Name('width', Load(), lineno=461, col_offset=44), Name('height', Load(), lineno=461, col_offset=51), Name('cwidth', Load(), lineno=461, col_offset=59), Name('cheight', Load(), lineno=461, col_offset=67)], [], None, None, lineno=461, col_offset=23), lineno=461, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=462, col_offset=8), '_canvas', Load(), lineno=462, col_offset=8), 'pack', Load(), lineno=462, col_offset=8), [], [keyword('expand', Num(1, lineno=462, col_offset=33)), keyword('fill', Str('both', lineno=462, col_offset=41))], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8)], [], lineno=460, col_offset=4), FunctionDef('_getcanvas', arguments([Name('self', Param(), lineno=464, col_offset=19)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=465, col_offset=15), '_canvas', Load(), lineno=465, col_offset=15), lineno=465, col_offset=8)], [], lineno=464, col_offset=4), FunctionDef('set_geometry', arguments([Name('self', Param(), lineno=467, col_offset=21), Name('width', Param(), lineno=467, col_offset=27), Name('height', Param(), lineno=467, col_offset=34), Name('startx', Param(), lineno=467, col_offset=42), Name('starty', Param(), lineno=467, col_offset=50)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=468, col_offset=8), 'geometry', Load(), lineno=468, col_offset=8), [BinOp(Str('%dx%d%+d%+d', lineno=468, col_offset=22), Mod(), Tuple([Name('width', Load(), lineno=468, col_offset=37), Name('height', Load(), lineno=468, col_offset=44), Name('startx', Load(), lineno=468, col_offset=52), Name('starty', Load(), lineno=468, col_offset=60)], Load(), lineno=468, col_offset=37), lineno=468, col_offset=22)], [], None, None, lineno=468, col_offset=8), lineno=468, col_offset=8)], [], lineno=467, col_offset=4), FunctionDef('ondestroy', arguments([Name('self', Param(), lineno=470, col_offset=18), Name('destroy', Param(), lineno=470, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=471, col_offset=8), 'wm_protocol', Load(), lineno=471, col_offset=8), [Str('WM_DELETE_WINDOW', lineno=471, col_offset=25), Name('destroy', Load(), lineno=471, col_offset=45)], [], None, None, lineno=471, col_offset=8), lineno=471, col_offset=8)], [], lineno=470, col_offset=4), FunctionDef('win_width', arguments([Name('self', Param(), lineno=473, col_offset=18)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=474, col_offset=15), 'winfo_screenwidth', Load(), lineno=474, col_offset=15), [], [], None, None, lineno=474, col_offset=15), lineno=474, col_offset=8)], [], lineno=473, col_offset=4), FunctionDef('win_height', arguments([Name('self', Param(), lineno=476, col_offset=19)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=477, col_offset=15), 'winfo_screenheight', Load(), lineno=477, col_offset=15), [], [], None, None, lineno=477, col_offset=15), lineno=477, col_offset=8)], [], lineno=476, col_offset=4)], [], lineno=455, col_offset=0), Assign([Name('Canvas', Store(), lineno=479, col_offset=0)], Attribute(Name('TK', Load(), lineno=479, col_offset=9), 'Canvas', Load(), lineno=479, col_offset=9), lineno=479, col_offset=0), ClassDef('TurtleScreenBase', [Name('object', Load(), lineno=482, col_offset=23)], [Expr(Str('Provide the basic graphics functionality.\n       Interface between Tkinter and turtle.py.\n\n       To port turtle.py to some different graphics toolkit\n       a corresponding TurtleScreenBase class has to be implemented.\n    ', lineno=488, col_offset=-1), lineno=488, col_offset=-1), FunctionDef('_blankimage', arguments([], None, None, []), [Expr(Str('return a blank image object\n        ', lineno=493, col_offset=-1), lineno=493, col_offset=-1), Assign([Name('img', Store(), lineno=494, col_offset=8)], Call(Attribute(Name('TK', Load(), lineno=494, col_offset=14), 'PhotoImage', Load(), lineno=494, col_offset=14), [], [keyword('width', Num(1, lineno=494, col_offset=34)), keyword('height', Num(1, lineno=494, col_offset=44))], None, None, lineno=494, col_offset=14), lineno=494, col_offset=8), Expr(Call(Attribute(Name('img', Load(), lineno=495, col_offset=8), 'blank', Load(), lineno=495, col_offset=8), [], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8), Return(Name('img', Load(), lineno=496, col_offset=15), lineno=496, col_offset=8)], [Name('staticmethod', Load(), lineno=490, col_offset=5)], lineno=490, col_offset=4), FunctionDef('_image', arguments([Name('filename', Param(), lineno=499, col_offset=15)], None, None, []), [Expr(Str('return an image object containing the\n        imagedata from a gif-file named filename.\n        ', lineno=502, col_offset=-1), lineno=502, col_offset=-1), Return(Call(Attribute(Name('TK', Load(), lineno=503, col_offset=15), 'PhotoImage', Load(), lineno=503, col_offset=15), [], [keyword('file', Name('filename', Load(), lineno=503, col_offset=34))], None, None, lineno=503, col_offset=15), lineno=503, col_offset=8)], [Name('staticmethod', Load(), lineno=498, col_offset=5)], lineno=498, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=505, col_offset=17), Name('cv', Param(), lineno=505, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=506, col_offset=8), 'cv', Store(), lineno=506, col_offset=8)], Name('cv', Load(), lineno=506, col_offset=18), lineno=506, col_offset=8), If(Call(Name('isinstance', Load(), lineno=507, col_offset=11), [Name('cv', Load(), lineno=507, col_offset=22), Name('ScrolledCanvas', Load(), lineno=507, col_offset=26)], [], None, None, lineno=507, col_offset=11), [Assign([Name('w', Store(), lineno=508, col_offset=12)], Attribute(Attribute(Name('self', Load(), lineno=508, col_offset=16), 'cv', Load(), lineno=508, col_offset=16), 'canvwidth', Load(), lineno=508, col_offset=16), lineno=508, col_offset=12), Assign([Name('h', Store(), lineno=509, col_offset=12)], Attribute(Attribute(Name('self', Load(), lineno=509, col_offset=16), 'cv', Load(), lineno=509, col_offset=16), 'canvheight', Load(), lineno=509, col_offset=16), lineno=509, col_offset=12)], [Assign([Name('w', Store(), lineno=511, col_offset=12)], Call(Name('int', Load(), lineno=511, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=511, col_offset=20), 'cv', Load(), lineno=511, col_offset=20), 'cget', Load(), lineno=511, col_offset=20), [Str('width', lineno=511, col_offset=33)], [], None, None, lineno=511, col_offset=20)], [], None, None, lineno=511, col_offset=16), lineno=511, col_offset=12), Assign([Name('h', Store(), lineno=512, col_offset=12)], Call(Name('int', Load(), lineno=512, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=512, col_offset=20), 'cv', Load(), lineno=512, col_offset=20), 'cget', Load(), lineno=512, col_offset=20), [Str('height', lineno=512, col_offset=33)], [], None, None, lineno=512, col_offset=20)], [], None, None, lineno=512, col_offset=16), lineno=512, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=513, col_offset=12), 'cv', Load(), lineno=513, col_offset=12), 'config', Load(), lineno=513, col_offset=12), [], [keyword('scrollregion', Tuple([BinOp(UnaryOp(USub(), Name('w', Load(), lineno=513, col_offset=44), lineno=513, col_offset=43), FloorDiv(), Num(2, lineno=513, col_offset=47), lineno=513, col_offset=43), BinOp(UnaryOp(USub(), Name('h', Load(), lineno=513, col_offset=51), lineno=513, col_offset=50), FloorDiv(), Num(2, lineno=513, col_offset=54), lineno=513, col_offset=50), BinOp(Name('w', Load(), lineno=513, col_offset=57), FloorDiv(), Num(2, lineno=513, col_offset=60), lineno=513, col_offset=57), BinOp(Name('h', Load(), lineno=513, col_offset=63), FloorDiv(), Num(2, lineno=513, col_offset=66), lineno=513, col_offset=63)], Load(), lineno=513, col_offset=43))], None, None, lineno=513, col_offset=12), lineno=513, col_offset=12)], lineno=507, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=514, col_offset=8), 'canvwidth', Store(), lineno=514, col_offset=8)], Name('w', Load(), lineno=514, col_offset=25), lineno=514, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=515, col_offset=8), 'canvheight', Store(), lineno=515, col_offset=8)], Name('h', Load(), lineno=515, col_offset=26), lineno=515, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=516, col_offset=8), 'xscale', Store(), lineno=516, col_offset=8), Attribute(Name('self', Load(), lineno=516, col_offset=22), 'yscale', Store(), lineno=516, col_offset=22)], Num(1.0, lineno=516, col_offset=36), lineno=516, col_offset=8)], [], lineno=505, col_offset=4), FunctionDef('_createpoly', arguments([Name('self', Param(), lineno=518, col_offset=20)], None, None, []), [Expr(Str('Create an invisible polygon item on canvas self.cv)\n        ', lineno=520, col_offset=-1), lineno=520, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=521, col_offset=15), 'cv', Load(), lineno=521, col_offset=15), 'create_polygon', Load(), lineno=521, col_offset=15), [Tuple([Num(0, lineno=521, col_offset=39), Num(0, lineno=521, col_offset=42), Num(0, lineno=521, col_offset=45), Num(0, lineno=521, col_offset=48), Num(0, lineno=521, col_offset=51), Num(0, lineno=521, col_offset=54)], Load(), lineno=521, col_offset=39)], [keyword('fill', Str('', lineno=521, col_offset=63)), keyword('outline', Str('', lineno=521, col_offset=75))], None, None, lineno=521, col_offset=15), lineno=521, col_offset=8)], [], lineno=518, col_offset=4), FunctionDef('_drawpoly', arguments([Name('self', Param(), lineno=523, col_offset=18), Name('polyitem', Param(), lineno=523, col_offset=24), Name('coordlist', Param(), lineno=523, col_offset=34), Name('fill', Param(), lineno=523, col_offset=45), Name('outline', Param(), lineno=524, col_offset=18), Name('width', Param(), lineno=524, col_offset=32), Name('top', Param(), lineno=524, col_offset=44)], None, None, [Name('None', Load(), lineno=523, col_offset=50), Name('None', Load(), lineno=524, col_offset=26), Name('None', Load(), lineno=524, col_offset=38), Name('False', Load(), lineno=524, col_offset=48)]), [Expr(Str("Configure polygonitem polyitem according to provided\n        arguments:\n        coordlist is sequence of coordinates\n        fill is filling color\n        outline is outline color\n        top is a boolean value, which specifies if polyitem\n        will be put on top of the canvas' displaylist so it\n        will not be covered by other items.\n        ", lineno=533, col_offset=-1), lineno=533, col_offset=-1), Assign([Name('cl', Store(), lineno=534, col_offset=8)], List([], Load(), lineno=534, col_offset=13), lineno=534, col_offset=8), For(Tuple([Name('x', Store(), lineno=535, col_offset=12), Name('y', Store(), lineno=535, col_offset=15)], Store(), lineno=535, col_offset=12), Name('coordlist', Load(), lineno=535, col_offset=20), [Expr(Call(Attribute(Name('cl', Load(), lineno=536, col_offset=12), 'append', Load(), lineno=536, col_offset=12), [BinOp(Name('x', Load(), lineno=536, col_offset=22), Mult(), Attribute(Name('self', Load(), lineno=536, col_offset=26), 'xscale', Load(), lineno=536, col_offset=26), lineno=536, col_offset=22)], [], None, None, lineno=536, col_offset=12), lineno=536, col_offset=12), Expr(Call(Attribute(Name('cl', Load(), lineno=537, col_offset=12), 'append', Load(), lineno=537, col_offset=12), [BinOp(UnaryOp(USub(), Name('y', Load(), lineno=537, col_offset=23), lineno=537, col_offset=22), Mult(), Attribute(Name('self', Load(), lineno=537, col_offset=27), 'yscale', Load(), lineno=537, col_offset=27), lineno=537, col_offset=22)], [], None, None, lineno=537, col_offset=12), lineno=537, col_offset=12)], [], lineno=535, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=538, col_offset=8), 'cv', Load(), lineno=538, col_offset=8), 'coords', Load(), lineno=538, col_offset=8), [Name('polyitem', Load(), lineno=538, col_offset=23)], [], Name('cl', Load(), lineno=538, col_offset=34), None, lineno=538, col_offset=8), lineno=538, col_offset=8), If(Compare(Name('fill', Load(), lineno=539, col_offset=11), [IsNot()], [Name('None', Load(), lineno=539, col_offset=23)], lineno=539, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=540, col_offset=12), 'cv', Load(), lineno=540, col_offset=12), 'itemconfigure', Load(), lineno=540, col_offset=12), [Name('polyitem', Load(), lineno=540, col_offset=34)], [keyword('fill', Name('fill', Load(), lineno=540, col_offset=49))], None, None, lineno=540, col_offset=12), lineno=540, col_offset=12)], [], lineno=539, col_offset=8), If(Compare(Name('outline', Load(), lineno=541, col_offset=11), [IsNot()], [Name('None', Load(), lineno=541, col_offset=26)], lineno=541, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=542, col_offset=12), 'cv', Load(), lineno=542, col_offset=12), 'itemconfigure', Load(), lineno=542, col_offset=12), [Name('polyitem', Load(), lineno=542, col_offset=34)], [keyword('outline', Name('outline', Load(), lineno=542, col_offset=52))], None, None, lineno=542, col_offset=12), lineno=542, col_offset=12)], [], lineno=541, col_offset=8), If(Compare(Name('width', Load(), lineno=543, col_offset=11), [IsNot()], [Name('None', Load(), lineno=543, col_offset=24)], lineno=543, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=544, col_offset=12), 'cv', Load(), lineno=544, col_offset=12), 'itemconfigure', Load(), lineno=544, col_offset=12), [Name('polyitem', Load(), lineno=544, col_offset=34)], [keyword('width', Name('width', Load(), lineno=544, col_offset=50))], None, None, lineno=544, col_offset=12), lineno=544, col_offset=12)], [], lineno=543, col_offset=8), If(Name('top', Load(), lineno=545, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=546, col_offset=12), 'cv', Load(), lineno=546, col_offset=12), 'tag_raise', Load(), lineno=546, col_offset=12), [Name('polyitem', Load(), lineno=546, col_offset=30)], [], None, None, lineno=546, col_offset=12), lineno=546, col_offset=12)], [], lineno=545, col_offset=8)], [], lineno=523, col_offset=4), FunctionDef('_createline', arguments([Name('self', Param(), lineno=548, col_offset=20)], None, None, []), [Expr(Str('Create an invisible line item on canvas self.cv)\n        ', lineno=550, col_offset=-1), lineno=550, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=551, col_offset=15), 'cv', Load(), lineno=551, col_offset=15), 'create_line', Load(), lineno=551, col_offset=15), [Num(0, lineno=551, col_offset=35), Num(0, lineno=551, col_offset=38), Num(0, lineno=551, col_offset=41), Num(0, lineno=551, col_offset=44)], [keyword('fill', Str('', lineno=551, col_offset=52)), keyword('width', Num(2, lineno=551, col_offset=62)), keyword('capstyle', Attribute(Name('TK', Load(), lineno=552, col_offset=46), 'ROUND', Load(), lineno=552, col_offset=46))], None, None, lineno=551, col_offset=15), lineno=551, col_offset=8)], [], lineno=548, col_offset=4), FunctionDef('_drawline', arguments([Name('self', Param(), lineno=554, col_offset=18), Name('lineitem', Param(), lineno=554, col_offset=24), Name('coordlist', Param(), lineno=554, col_offset=34), Name('fill', Param(), lineno=555, col_offset=18), Name('width', Param(), lineno=555, col_offset=29), Name('top', Param(), lineno=555, col_offset=41)], None, None, [Name('None', Load(), lineno=554, col_offset=44), Name('None', Load(), lineno=555, col_offset=23), Name('None', Load(), lineno=555, col_offset=35), Name('False', Load(), lineno=555, col_offset=45)]), [Expr(Str("Configure lineitem according to provided arguments:\n        coordlist is sequence of coordinates\n        fill is drawing color\n        width is width of drawn line.\n        top is a boolean value, which specifies if polyitem\n        will be put on top of the canvas' displaylist so it\n        will not be covered by other items.\n        ", lineno=563, col_offset=-1), lineno=563, col_offset=-1), If(Compare(Name('coordlist', Load(), lineno=564, col_offset=11), [IsNot()], [Name('None', Load(), lineno=564, col_offset=28)], lineno=564, col_offset=11), [Assign([Name('cl', Store(), lineno=565, col_offset=12)], List([], Load(), lineno=565, col_offset=17), lineno=565, col_offset=12), For(Tuple([Name('x', Store(), lineno=566, col_offset=16), Name('y', Store(), lineno=566, col_offset=19)], Store(), lineno=566, col_offset=16), Name('coordlist', Load(), lineno=566, col_offset=24), [Expr(Call(Attribute(Name('cl', Load(), lineno=567, col_offset=16), 'append', Load(), lineno=567, col_offset=16), [BinOp(Name('x', Load(), lineno=567, col_offset=26), Mult(), Attribute(Name('self', Load(), lineno=567, col_offset=30), 'xscale', Load(), lineno=567, col_offset=30), lineno=567, col_offset=26)], [], None, None, lineno=567, col_offset=16), lineno=567, col_offset=16), Expr(Call(Attribute(Name('cl', Load(), lineno=568, col_offset=16), 'append', Load(), lineno=568, col_offset=16), [BinOp(UnaryOp(USub(), Name('y', Load(), lineno=568, col_offset=27), lineno=568, col_offset=26), Mult(), Attribute(Name('self', Load(), lineno=568, col_offset=31), 'yscale', Load(), lineno=568, col_offset=31), lineno=568, col_offset=26)], [], None, None, lineno=568, col_offset=16), lineno=568, col_offset=16)], [], lineno=566, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=569, col_offset=12), 'cv', Load(), lineno=569, col_offset=12), 'coords', Load(), lineno=569, col_offset=12), [Name('lineitem', Load(), lineno=569, col_offset=27)], [], Name('cl', Load(), lineno=569, col_offset=38), None, lineno=569, col_offset=12), lineno=569, col_offset=12)], [], lineno=564, col_offset=8), If(Compare(Name('fill', Load(), lineno=570, col_offset=11), [IsNot()], [Name('None', Load(), lineno=570, col_offset=23)], lineno=570, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=571, col_offset=12), 'cv', Load(), lineno=571, col_offset=12), 'itemconfigure', Load(), lineno=571, col_offset=12), [Name('lineitem', Load(), lineno=571, col_offset=34)], [keyword('fill', Name('fill', Load(), lineno=571, col_offset=49))], None, None, lineno=571, col_offset=12), lineno=571, col_offset=12)], [], lineno=570, col_offset=8), If(Compare(Name('width', Load(), lineno=572, col_offset=11), [IsNot()], [Name('None', Load(), lineno=572, col_offset=24)], lineno=572, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=573, col_offset=12), 'cv', Load(), lineno=573, col_offset=12), 'itemconfigure', Load(), lineno=573, col_offset=12), [Name('lineitem', Load(), lineno=573, col_offset=34)], [keyword('width', Name('width', Load(), lineno=573, col_offset=50))], None, None, lineno=573, col_offset=12), lineno=573, col_offset=12)], [], lineno=572, col_offset=8), If(Name('top', Load(), lineno=574, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=575, col_offset=12), 'cv', Load(), lineno=575, col_offset=12), 'tag_raise', Load(), lineno=575, col_offset=12), [Name('lineitem', Load(), lineno=575, col_offset=30)], [], None, None, lineno=575, col_offset=12), lineno=575, col_offset=12)], [], lineno=574, col_offset=8)], [], lineno=554, col_offset=4), FunctionDef('_delete', arguments([Name('self', Param(), lineno=577, col_offset=16), Name('item', Param(), lineno=577, col_offset=22)], None, None, []), [Expr(Str('Delete graphics item from canvas.\n        If item is"all" delete all graphics items.\n        ', lineno=580, col_offset=-1), lineno=580, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=581, col_offset=8), 'cv', Load(), lineno=581, col_offset=8), 'delete', Load(), lineno=581, col_offset=8), [Name('item', Load(), lineno=581, col_offset=23)], [], None, None, lineno=581, col_offset=8), lineno=581, col_offset=8)], [], lineno=577, col_offset=4), FunctionDef('_update', arguments([Name('self', Param(), lineno=583, col_offset=16)], None, None, []), [Expr(Str('Redraw graphics items on canvas\n        ', lineno=585, col_offset=-1), lineno=585, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=586, col_offset=8), 'cv', Load(), lineno=586, col_offset=8), 'update', Load(), lineno=586, col_offset=8), [], [], None, None, lineno=586, col_offset=8), lineno=586, col_offset=8)], [], lineno=583, col_offset=4), FunctionDef('_delay', arguments([Name('self', Param(), lineno=588, col_offset=15), Name('delay', Param(), lineno=588, col_offset=21)], None, None, []), [Expr(Str('Delay subsequent canvas actions for delay ms.', lineno=589, col_offset=8), lineno=589, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=590, col_offset=8), 'cv', Load(), lineno=590, col_offset=8), 'after', Load(), lineno=590, col_offset=8), [Name('delay', Load(), lineno=590, col_offset=22)], [], None, None, lineno=590, col_offset=8), lineno=590, col_offset=8)], [], lineno=588, col_offset=4), FunctionDef('_iscolorstring', arguments([Name('self', Param(), lineno=592, col_offset=23), Name('color', Param(), lineno=592, col_offset=29)], None, None, []), [Expr(Str('Check if the string color is a legal Tkinter color string.\n        ', lineno=594, col_offset=-1), lineno=594, col_offset=-1), TryExcept([Assign([Name('rgb', Store(), lineno=596, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=596, col_offset=18), 'cv', Load(), lineno=596, col_offset=18), 'winfo_rgb', Load(), lineno=596, col_offset=18), [Name('color', Load(), lineno=596, col_offset=36)], [], None, None, lineno=596, col_offset=18), lineno=596, col_offset=12), Assign([Name('ok', Store(), lineno=597, col_offset=12)], Name('True', Load(), lineno=597, col_offset=17), lineno=597, col_offset=12)], [ExceptHandler(Attribute(Name('TK', Load(), lineno=598, col_offset=15), 'TclError', Load(), lineno=598, col_offset=15), None, [Assign([Name('ok', Store(), lineno=599, col_offset=12)], Name('False', Load(), lineno=599, col_offset=17), lineno=599, col_offset=12)], lineno=598, col_offset=8)], [], lineno=595, col_offset=8), Return(Name('ok', Load(), lineno=600, col_offset=15), lineno=600, col_offset=8)], [], lineno=592, col_offset=4), FunctionDef('_bgcolor', arguments([Name('self', Param(), lineno=602, col_offset=17), Name('color', Param(), lineno=602, col_offset=23)], None, None, [Name('None', Load(), lineno=602, col_offset=29)]), [Expr(Str("Set canvas' backgroundcolor if color is not None,\n        else return backgroundcolor.", lineno=604, col_offset=-1), lineno=604, col_offset=-1), If(Compare(Name('color', Load(), lineno=605, col_offset=11), [IsNot()], [Name('None', Load(), lineno=605, col_offset=24)], lineno=605, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=606, col_offset=12), 'cv', Load(), lineno=606, col_offset=12), 'config', Load(), lineno=606, col_offset=12), [], [keyword('bg', Name('color', Load(), lineno=606, col_offset=32))], None, None, lineno=606, col_offset=12), lineno=606, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=607, col_offset=12), '_update', Load(), lineno=607, col_offset=12), [], [], None, None, lineno=607, col_offset=12), lineno=607, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=609, col_offset=19), 'cv', Load(), lineno=609, col_offset=19), 'cget', Load(), lineno=609, col_offset=19), [Str('bg', lineno=609, col_offset=32)], [], None, None, lineno=609, col_offset=19), lineno=609, col_offset=12)], lineno=605, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('_write', arguments([Name('self', Param(), lineno=611, col_offset=15), Name('pos', Param(), lineno=611, col_offset=21), Name('txt', Param(), lineno=611, col_offset=26), Name('align', Param(), lineno=611, col_offset=31), Name('font', Param(), lineno=611, col_offset=38), Name('pencolor', Param(), lineno=611, col_offset=44)], None, None, []), [Expr(Str("Write txt at pos in canvas with specified font\n        and color.\n        Return text item and x-coord of right bottom corner\n        of text's bounding box.", lineno=615, col_offset=-1), lineno=615, col_offset=-1), Assign([Tuple([Name('x', Store(), lineno=616, col_offset=8), Name('y', Store(), lineno=616, col_offset=11)], Store(), lineno=616, col_offset=8)], Name('pos', Load(), lineno=616, col_offset=15), lineno=616, col_offset=8), Assign([Name('x', Store(), lineno=617, col_offset=8)], BinOp(Name('x', Load(), lineno=617, col_offset=12), Mult(), Attribute(Name('self', Load(), lineno=617, col_offset=16), 'xscale', Load(), lineno=617, col_offset=16), lineno=617, col_offset=12), lineno=617, col_offset=8), Assign([Name('y', Store(), lineno=618, col_offset=8)], BinOp(Name('y', Load(), lineno=618, col_offset=12), Mult(), Attribute(Name('self', Load(), lineno=618, col_offset=16), 'yscale', Load(), lineno=618, col_offset=16), lineno=618, col_offset=12), lineno=618, col_offset=8), Assign([Name('anchor', Store(), lineno=619, col_offset=8)], Dict([Str('left', lineno=619, col_offset=18), Str('center', lineno=619, col_offset=31), Str('right', lineno=619, col_offset=45)], [Str('sw', lineno=619, col_offset=25), Str('s', lineno=619, col_offset=40), Str('se', lineno=619, col_offset=53)], lineno=619, col_offset=17), lineno=619, col_offset=8), Assign([Name('item', Store(), lineno=620, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=620, col_offset=15), 'cv', Load(), lineno=620, col_offset=15), 'create_text', Load(), lineno=620, col_offset=15), [BinOp(Name('x', Load(), lineno=620, col_offset=35), Sub(), Num(1, lineno=620, col_offset=37), lineno=620, col_offset=35), UnaryOp(USub(), Name('y', Load(), lineno=620, col_offset=41), lineno=620, col_offset=40)], [keyword('text', Name('txt', Load(), lineno=620, col_offset=51)), keyword('anchor', Subscript(Name('anchor', Load(), lineno=620, col_offset=65), Index(Name('align', Load(), lineno=620, col_offset=72)), Load(), lineno=620, col_offset=65)), keyword('fill', Name('pencolor', Load(), lineno=621, col_offset=47)), keyword('font', Name('font', Load(), lineno=621, col_offset=64))], None, None, lineno=620, col_offset=15), lineno=620, col_offset=8), Assign([Tuple([Name('x0', Store(), lineno=622, col_offset=8), Name('y0', Store(), lineno=622, col_offset=12), Name('x1', Store(), lineno=622, col_offset=16), Name('y1', Store(), lineno=622, col_offset=20)], Store(), lineno=622, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=622, col_offset=25), 'cv', Load(), lineno=622, col_offset=25), 'bbox', Load(), lineno=622, col_offset=25), [Name('item', Load(), lineno=622, col_offset=38)], [], None, None, lineno=622, col_offset=25), lineno=622, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=623, col_offset=8), 'cv', Load(), lineno=623, col_offset=8), 'update', Load(), lineno=623, col_offset=8), [], [], None, None, lineno=623, col_offset=8), lineno=623, col_offset=8), Return(Tuple([Name('item', Load(), lineno=624, col_offset=15), BinOp(Name('x1', Load(), lineno=624, col_offset=21), Sub(), Num(1, lineno=624, col_offset=24), lineno=624, col_offset=21)], Load(), lineno=624, col_offset=15), lineno=624, col_offset=8)], [], lineno=611, col_offset=4), FunctionDef('_onclick', arguments([Name('self', Param(), lineno=629, col_offset=17), Name('item', Param(), lineno=629, col_offset=23), Name('fun', Param(), lineno=629, col_offset=29), Name('num', Param(), lineno=629, col_offset=34), Name('add', Param(), lineno=629, col_offset=41)], None, None, [Num(1, lineno=629, col_offset=38), Name('None', Load(), lineno=629, col_offset=45)]), [Expr(Str('Bind fun to mouse-click event on turtle.\n        fun must be a function with two arguments, the coordinates\n        of the clicked point on the canvas.\n        num, the number of the mouse-button defaults to 1\n        ', lineno=634, col_offset=-1), lineno=634, col_offset=-1), If(Compare(Name('fun', Load(), lineno=635, col_offset=11), [Is()], [Name('None', Load(), lineno=635, col_offset=18)], lineno=635, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=636, col_offset=12), 'cv', Load(), lineno=636, col_offset=12), 'tag_unbind', Load(), lineno=636, col_offset=12), [Name('item', Load(), lineno=636, col_offset=31), BinOp(Str('<Button-%s>', lineno=636, col_offset=37), Mod(), Name('num', Load(), lineno=636, col_offset=53), lineno=636, col_offset=37)], [], None, None, lineno=636, col_offset=12), lineno=636, col_offset=12)], [FunctionDef('eventfun', arguments([Name('event', Param(), lineno=638, col_offset=25)], None, None, []), [Assign([Tuple([Name('x', Store(), lineno=639, col_offset=16), Name('y', Store(), lineno=639, col_offset=19)], Store(), lineno=639, col_offset=16)], Tuple([BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=639, col_offset=24), 'cv', Load(), lineno=639, col_offset=24), 'canvasx', Load(), lineno=639, col_offset=24), [Attribute(Name('event', Load(), lineno=639, col_offset=40), 'x', Load(), lineno=639, col_offset=40)], [], None, None, lineno=639, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=639, col_offset=49), 'xscale', Load(), lineno=639, col_offset=49), lineno=639, col_offset=24), BinOp(UnaryOp(USub(), Call(Attribute(Attribute(Name('self', Load(), lineno=640, col_offset=25), 'cv', Load(), lineno=640, col_offset=25), 'canvasy', Load(), lineno=640, col_offset=25), [Attribute(Name('event', Load(), lineno=640, col_offset=41), 'y', Load(), lineno=640, col_offset=41)], [], None, None, lineno=640, col_offset=25), lineno=640, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=640, col_offset=50), 'yscale', Load(), lineno=640, col_offset=50), lineno=640, col_offset=24)], Load(), lineno=639, col_offset=24), lineno=639, col_offset=16), Expr(Call(Name('fun', Load(), lineno=641, col_offset=16), [Name('x', Load(), lineno=641, col_offset=20), Name('y', Load(), lineno=641, col_offset=23)], [], None, None, lineno=641, col_offset=16), lineno=641, col_offset=16)], [], lineno=638, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=642, col_offset=12), 'cv', Load(), lineno=642, col_offset=12), 'tag_bind', Load(), lineno=642, col_offset=12), [Name('item', Load(), lineno=642, col_offset=29), BinOp(Str('<Button-%s>', lineno=642, col_offset=35), Mod(), Name('num', Load(), lineno=642, col_offset=51), lineno=642, col_offset=35), Name('eventfun', Load(), lineno=642, col_offset=56), Name('add', Load(), lineno=642, col_offset=66)], [], None, None, lineno=642, col_offset=12), lineno=642, col_offset=12)], lineno=635, col_offset=8)], [], lineno=629, col_offset=4), FunctionDef('_onrelease', arguments([Name('self', Param(), lineno=644, col_offset=19), Name('item', Param(), lineno=644, col_offset=25), Name('fun', Param(), lineno=644, col_offset=31), Name('num', Param(), lineno=644, col_offset=36), Name('add', Param(), lineno=644, col_offset=43)], None, None, [Num(1, lineno=644, col_offset=40), Name('None', Load(), lineno=644, col_offset=47)]), [Expr(Str('Bind fun to mouse-button-release event on turtle.\n        fun must be a function with two arguments, the coordinates\n        of the point on the canvas where mouse button is released.\n        num, the number of the mouse-button defaults to 1\n\n        If a turtle is clicked, first _onclick-event will be performed,\n        then _onscreensclick-event.\n        ', lineno=652, col_offset=-1), lineno=652, col_offset=-1), If(Compare(Name('fun', Load(), lineno=653, col_offset=11), [Is()], [Name('None', Load(), lineno=653, col_offset=18)], lineno=653, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=654, col_offset=12), 'cv', Load(), lineno=654, col_offset=12), 'tag_unbind', Load(), lineno=654, col_offset=12), [Name('item', Load(), lineno=654, col_offset=31), BinOp(Str('<Button%s-ButtonRelease>', lineno=654, col_offset=37), Mod(), Name('num', Load(), lineno=654, col_offset=66), lineno=654, col_offset=37)], [], None, None, lineno=654, col_offset=12), lineno=654, col_offset=12)], [FunctionDef('eventfun', arguments([Name('event', Param(), lineno=656, col_offset=25)], None, None, []), [Assign([Tuple([Name('x', Store(), lineno=657, col_offset=16), Name('y', Store(), lineno=657, col_offset=19)], Store(), lineno=657, col_offset=16)], Tuple([BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=657, col_offset=24), 'cv', Load(), lineno=657, col_offset=24), 'canvasx', Load(), lineno=657, col_offset=24), [Attribute(Name('event', Load(), lineno=657, col_offset=40), 'x', Load(), lineno=657, col_offset=40)], [], None, None, lineno=657, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=657, col_offset=49), 'xscale', Load(), lineno=657, col_offset=49), lineno=657, col_offset=24), BinOp(UnaryOp(USub(), Call(Attribute(Attribute(Name('self', Load(), lineno=658, col_offset=25), 'cv', Load(), lineno=658, col_offset=25), 'canvasy', Load(), lineno=658, col_offset=25), [Attribute(Name('event', Load(), lineno=658, col_offset=41), 'y', Load(), lineno=658, col_offset=41)], [], None, None, lineno=658, col_offset=25), lineno=658, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=658, col_offset=50), 'yscale', Load(), lineno=658, col_offset=50), lineno=658, col_offset=24)], Load(), lineno=657, col_offset=24), lineno=657, col_offset=16), Expr(Call(Name('fun', Load(), lineno=659, col_offset=16), [Name('x', Load(), lineno=659, col_offset=20), Name('y', Load(), lineno=659, col_offset=23)], [], None, None, lineno=659, col_offset=16), lineno=659, col_offset=16)], [], lineno=656, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=660, col_offset=12), 'cv', Load(), lineno=660, col_offset=12), 'tag_bind', Load(), lineno=660, col_offset=12), [Name('item', Load(), lineno=660, col_offset=29), BinOp(Str('<Button%s-ButtonRelease>', lineno=660, col_offset=35), Mod(), Name('num', Load(), lineno=660, col_offset=64), lineno=660, col_offset=35), Name('eventfun', Load(), lineno=661, col_offset=29), Name('add', Load(), lineno=661, col_offset=39)], [], None, None, lineno=660, col_offset=12), lineno=660, col_offset=12)], lineno=653, col_offset=8)], [], lineno=644, col_offset=4), FunctionDef('_ondrag', arguments([Name('self', Param(), lineno=663, col_offset=16), Name('item', Param(), lineno=663, col_offset=22), Name('fun', Param(), lineno=663, col_offset=28), Name('num', Param(), lineno=663, col_offset=33), Name('add', Param(), lineno=663, col_offset=40)], None, None, [Num(1, lineno=663, col_offset=37), Name('None', Load(), lineno=663, col_offset=44)]), [Expr(Str('Bind fun to mouse-move-event (with pressed mouse button) on turtle.\n        fun must be a function with two arguments, the coordinates of the\n        actual mouse position on the canvas.\n        num, the number of the mouse-button defaults to 1\n\n        Every sequence of mouse-move-events on a turtle is preceded by a\n        mouse-click event on that turtle.\n        ', lineno=671, col_offset=-1), lineno=671, col_offset=-1), If(Compare(Name('fun', Load(), lineno=672, col_offset=11), [Is()], [Name('None', Load(), lineno=672, col_offset=18)], lineno=672, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=673, col_offset=12), 'cv', Load(), lineno=673, col_offset=12), 'tag_unbind', Load(), lineno=673, col_offset=12), [Name('item', Load(), lineno=673, col_offset=31), BinOp(Str('<Button%s-Motion>', lineno=673, col_offset=37), Mod(), Name('num', Load(), lineno=673, col_offset=59), lineno=673, col_offset=37)], [], None, None, lineno=673, col_offset=12), lineno=673, col_offset=12)], [FunctionDef('eventfun', arguments([Name('event', Param(), lineno=675, col_offset=25)], None, None, []), [TryExcept([Assign([Tuple([Name('x', Store(), lineno=677, col_offset=20), Name('y', Store(), lineno=677, col_offset=23)], Store(), lineno=677, col_offset=20)], Tuple([BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=677, col_offset=28), 'cv', Load(), lineno=677, col_offset=28), 'canvasx', Load(), lineno=677, col_offset=28), [Attribute(Name('event', Load(), lineno=677, col_offset=44), 'x', Load(), lineno=677, col_offset=44)], [], None, None, lineno=677, col_offset=28), Div(), Attribute(Name('self', Load(), lineno=677, col_offset=53), 'xscale', Load(), lineno=677, col_offset=53), lineno=677, col_offset=28), BinOp(UnaryOp(USub(), Call(Attribute(Attribute(Name('self', Load(), lineno=678, col_offset=28), 'cv', Load(), lineno=678, col_offset=28), 'canvasy', Load(), lineno=678, col_offset=28), [Attribute(Name('event', Load(), lineno=678, col_offset=44), 'y', Load(), lineno=678, col_offset=44)], [], None, None, lineno=678, col_offset=28), lineno=678, col_offset=27), Div(), Attribute(Name('self', Load(), lineno=678, col_offset=53), 'yscale', Load(), lineno=678, col_offset=53), lineno=678, col_offset=27)], Load(), lineno=677, col_offset=28), lineno=677, col_offset=20), Expr(Call(Name('fun', Load(), lineno=679, col_offset=20), [Name('x', Load(), lineno=679, col_offset=24), Name('y', Load(), lineno=679, col_offset=27)], [], None, None, lineno=679, col_offset=20), lineno=679, col_offset=20)], [ExceptHandler(None, None, [Pass( lineno=681, col_offset=20)], lineno=680, col_offset=16)], [], lineno=676, col_offset=16)], [], lineno=675, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=682, col_offset=12), 'cv', Load(), lineno=682, col_offset=12), 'tag_bind', Load(), lineno=682, col_offset=12), [Name('item', Load(), lineno=682, col_offset=29), BinOp(Str('<Button%s-Motion>', lineno=682, col_offset=35), Mod(), Name('num', Load(), lineno=682, col_offset=57), lineno=682, col_offset=35), Name('eventfun', Load(), lineno=682, col_offset=62), Name('add', Load(), lineno=682, col_offset=72)], [], None, None, lineno=682, col_offset=12), lineno=682, col_offset=12)], lineno=672, col_offset=8)], [], lineno=663, col_offset=4), FunctionDef('_onscreenclick', arguments([Name('self', Param(), lineno=684, col_offset=23), Name('fun', Param(), lineno=684, col_offset=29), Name('num', Param(), lineno=684, col_offset=34), Name('add', Param(), lineno=684, col_offset=41)], None, None, [Num(1, lineno=684, col_offset=38), Name('None', Load(), lineno=684, col_offset=45)]), [Expr(Str('Bind fun to mouse-click event on canvas.\n        fun must be a function with two arguments, the coordinates\n        of the clicked point on the canvas.\n        num, the number of the mouse-button defaults to 1\n\n        If a turtle is clicked, first _onclick-event will be performed,\n        then _onscreensclick-event.\n        ', lineno=692, col_offset=-1), lineno=692, col_offset=-1), If(Compare(Name('fun', Load(), lineno=693, col_offset=11), [Is()], [Name('None', Load(), lineno=693, col_offset=18)], lineno=693, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=694, col_offset=12), 'cv', Load(), lineno=694, col_offset=12), 'unbind', Load(), lineno=694, col_offset=12), [BinOp(Str('<Button-%s>', lineno=694, col_offset=27), Mod(), Name('num', Load(), lineno=694, col_offset=43), lineno=694, col_offset=27)], [], None, None, lineno=694, col_offset=12), lineno=694, col_offset=12)], [FunctionDef('eventfun', arguments([Name('event', Param(), lineno=696, col_offset=25)], None, None, []), [Assign([Tuple([Name('x', Store(), lineno=697, col_offset=16), Name('y', Store(), lineno=697, col_offset=19)], Store(), lineno=697, col_offset=16)], Tuple([BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=697, col_offset=24), 'cv', Load(), lineno=697, col_offset=24), 'canvasx', Load(), lineno=697, col_offset=24), [Attribute(Name('event', Load(), lineno=697, col_offset=40), 'x', Load(), lineno=697, col_offset=40)], [], None, None, lineno=697, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=697, col_offset=49), 'xscale', Load(), lineno=697, col_offset=49), lineno=697, col_offset=24), BinOp(UnaryOp(USub(), Call(Attribute(Attribute(Name('self', Load(), lineno=698, col_offset=25), 'cv', Load(), lineno=698, col_offset=25), 'canvasy', Load(), lineno=698, col_offset=25), [Attribute(Name('event', Load(), lineno=698, col_offset=41), 'y', Load(), lineno=698, col_offset=41)], [], None, None, lineno=698, col_offset=25), lineno=698, col_offset=24), Div(), Attribute(Name('self', Load(), lineno=698, col_offset=50), 'yscale', Load(), lineno=698, col_offset=50), lineno=698, col_offset=24)], Load(), lineno=697, col_offset=24), lineno=697, col_offset=16), Expr(Call(Name('fun', Load(), lineno=699, col_offset=16), [Name('x', Load(), lineno=699, col_offset=20), Name('y', Load(), lineno=699, col_offset=23)], [], None, None, lineno=699, col_offset=16), lineno=699, col_offset=16)], [], lineno=696, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=700, col_offset=12), 'cv', Load(), lineno=700, col_offset=12), 'bind', Load(), lineno=700, col_offset=12), [BinOp(Str('<Button-%s>', lineno=700, col_offset=25), Mod(), Name('num', Load(), lineno=700, col_offset=41), lineno=700, col_offset=25), Name('eventfun', Load(), lineno=700, col_offset=46), Name('add', Load(), lineno=700, col_offset=56)], [], None, None, lineno=700, col_offset=12), lineno=700, col_offset=12)], lineno=693, col_offset=8)], [], lineno=684, col_offset=4), FunctionDef('_onkey', arguments([Name('self', Param(), lineno=702, col_offset=15), Name('fun', Param(), lineno=702, col_offset=21), Name('key', Param(), lineno=702, col_offset=26)], None, None, []), [Expr(Str('Bind fun to key-release event of key.\n        Canvas must have focus. See method listen\n        ', lineno=705, col_offset=-1), lineno=705, col_offset=-1), If(Compare(Name('fun', Load(), lineno=706, col_offset=11), [Is()], [Name('None', Load(), lineno=706, col_offset=18)], lineno=706, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=707, col_offset=12), 'cv', Load(), lineno=707, col_offset=12), 'unbind', Load(), lineno=707, col_offset=12), [BinOp(Str('<KeyRelease-%s>', lineno=707, col_offset=27), Mod(), Name('key', Load(), lineno=707, col_offset=47), lineno=707, col_offset=27), Name('None', Load(), lineno=707, col_offset=52)], [], None, None, lineno=707, col_offset=12), lineno=707, col_offset=12)], [FunctionDef('eventfun', arguments([Name('event', Param(), lineno=709, col_offset=25)], None, None, []), [Expr(Call(Name('fun', Load(), lineno=710, col_offset=16), [], [], None, None, lineno=710, col_offset=16), lineno=710, col_offset=16)], [], lineno=709, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=711, col_offset=12), 'cv', Load(), lineno=711, col_offset=12), 'bind', Load(), lineno=711, col_offset=12), [BinOp(Str('<KeyRelease-%s>', lineno=711, col_offset=25), Mod(), Name('key', Load(), lineno=711, col_offset=45), lineno=711, col_offset=25), Name('eventfun', Load(), lineno=711, col_offset=50)], [], None, None, lineno=711, col_offset=12), lineno=711, col_offset=12)], lineno=706, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('_listen', arguments([Name('self', Param(), lineno=713, col_offset=16)], None, None, []), [Expr(Str('Set focus on canvas (in order to collect key-events)\n        ', lineno=715, col_offset=-1), lineno=715, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=716, col_offset=8), 'cv', Load(), lineno=716, col_offset=8), 'focus_force', Load(), lineno=716, col_offset=8), [], [], None, None, lineno=716, col_offset=8), lineno=716, col_offset=8)], [], lineno=713, col_offset=4), FunctionDef('_ontimer', arguments([Name('self', Param(), lineno=718, col_offset=17), Name('fun', Param(), lineno=718, col_offset=23), Name('t', Param(), lineno=718, col_offset=28)], None, None, []), [Expr(Str('Install a timer, which calls fun after t milliseconds.\n        ', lineno=720, col_offset=-1), lineno=720, col_offset=-1), If(Compare(Name('t', Load(), lineno=721, col_offset=11), [Eq()], [Num(0, lineno=721, col_offset=16)], lineno=721, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=722, col_offset=12), 'cv', Load(), lineno=722, col_offset=12), 'after_idle', Load(), lineno=722, col_offset=12), [Name('fun', Load(), lineno=722, col_offset=31)], [], None, None, lineno=722, col_offset=12), lineno=722, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=724, col_offset=12), 'cv', Load(), lineno=724, col_offset=12), 'after', Load(), lineno=724, col_offset=12), [Name('t', Load(), lineno=724, col_offset=26), Name('fun', Load(), lineno=724, col_offset=29)], [], None, None, lineno=724, col_offset=12), lineno=724, col_offset=12)], lineno=721, col_offset=8)], [], lineno=718, col_offset=4), FunctionDef('_createimage', arguments([Name('self', Param(), lineno=726, col_offset=21), Name('image', Param(), lineno=726, col_offset=27)], None, None, []), [Expr(Str('Create and return image item on canvas.\n        ', lineno=728, col_offset=-1), lineno=728, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=729, col_offset=15), 'cv', Load(), lineno=729, col_offset=15), 'create_image', Load(), lineno=729, col_offset=15), [Num(0, lineno=729, col_offset=36), Num(0, lineno=729, col_offset=39)], [keyword('image', Name('image', Load(), lineno=729, col_offset=48))], None, None, lineno=729, col_offset=15), lineno=729, col_offset=8)], [], lineno=726, col_offset=4), FunctionDef('_drawimage', arguments([Name('self', Param(), lineno=731, col_offset=19), Name('item', Param(), lineno=731, col_offset=25), Tuple([Name('x', Store(), lineno=731, col_offset=32), Name('y', Store(), lineno=731, col_offset=35)], Store(), lineno=731, col_offset=32), Name('image', Param(), lineno=731, col_offset=39)], None, None, []), [Expr(Str('Configure image item as to draw image object\n        at position (x,y) on canvas)\n        ', lineno=734, col_offset=-1), lineno=734, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=735, col_offset=8), 'cv', Load(), lineno=735, col_offset=8), 'coords', Load(), lineno=735, col_offset=8), [Name('item', Load(), lineno=735, col_offset=23), Tuple([BinOp(Name('x', Load(), lineno=735, col_offset=30), Mult(), Attribute(Name('self', Load(), lineno=735, col_offset=34), 'xscale', Load(), lineno=735, col_offset=34), lineno=735, col_offset=30), BinOp(UnaryOp(USub(), Name('y', Load(), lineno=735, col_offset=48), lineno=735, col_offset=47), Mult(), Attribute(Name('self', Load(), lineno=735, col_offset=52), 'yscale', Load(), lineno=735, col_offset=52), lineno=735, col_offset=47)], Load(), lineno=735, col_offset=30)], [], None, None, lineno=735, col_offset=8), lineno=735, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=736, col_offset=8), 'cv', Load(), lineno=736, col_offset=8), 'itemconfig', Load(), lineno=736, col_offset=8), [Name('item', Load(), lineno=736, col_offset=27)], [keyword('image', Name('image', Load(), lineno=736, col_offset=39))], None, None, lineno=736, col_offset=8), lineno=736, col_offset=8)], [], lineno=731, col_offset=4), FunctionDef('_setbgpic', arguments([Name('self', Param(), lineno=738, col_offset=18), Name('item', Param(), lineno=738, col_offset=24), Name('image', Param(), lineno=738, col_offset=30)], None, None, []), [Expr(Str('Configure image item as to draw image object\n        at center of canvas. Set item to the first item\n        in the displaylist, so it will be drawn below\n        any other item .', lineno=742, col_offset=-1), lineno=742, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=743, col_offset=8), 'cv', Load(), lineno=743, col_offset=8), 'itemconfig', Load(), lineno=743, col_offset=8), [Name('item', Load(), lineno=743, col_offset=27)], [keyword('image', Name('image', Load(), lineno=743, col_offset=39))], None, None, lineno=743, col_offset=8), lineno=743, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=744, col_offset=8), 'cv', Load(), lineno=744, col_offset=8), 'tag_lower', Load(), lineno=744, col_offset=8), [Name('item', Load(), lineno=744, col_offset=26)], [], None, None, lineno=744, col_offset=8), lineno=744, col_offset=8)], [], lineno=738, col_offset=4), FunctionDef('_type', arguments([Name('self', Param(), lineno=746, col_offset=14), Name('item', Param(), lineno=746, col_offset=20)], None, None, []), [Expr(Str("Return 'line' or 'polygon' or 'image' depending on\n        type of item.\n        ", lineno=749, col_offset=-1), lineno=749, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=750, col_offset=15), 'cv', Load(), lineno=750, col_offset=15), 'type', Load(), lineno=750, col_offset=15), [Name('item', Load(), lineno=750, col_offset=28)], [], None, None, lineno=750, col_offset=15), lineno=750, col_offset=8)], [], lineno=746, col_offset=4), FunctionDef('_pointlist', arguments([Name('self', Param(), lineno=752, col_offset=19), Name('item', Param(), lineno=752, col_offset=25)], None, None, []), [Expr(Str('returns list of coordinate-pairs of points of item\n        Example (for insiders):\n        >>> from turtle import *\n        >>> getscreen()._pointlist(getturtle().turtle._item)\n        [(0.0, 9.9999999999999982), (0.0, -9.9999999999999982),\n        (9.9999999999999982, 0.0)]\n        >>> ', lineno=759, col_offset=-1), lineno=759, col_offset=-1), Assign([Name('cl', Store(), lineno=760, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=760, col_offset=13), 'cv', Load(), lineno=760, col_offset=13), 'coords', Load(), lineno=760, col_offset=13), [Name('item', Load(), lineno=760, col_offset=28)], [], None, None, lineno=760, col_offset=13), lineno=760, col_offset=8), Assign([Name('pl', Store(), lineno=761, col_offset=8)], ListComp(Tuple([Subscript(Name('cl', Load(), lineno=761, col_offset=15), Index(Name('i', Load(), lineno=761, col_offset=18)), Load(), lineno=761, col_offset=15), UnaryOp(USub(), Subscript(Name('cl', Load(), lineno=761, col_offset=23), Index(BinOp(Name('i', Load(), lineno=761, col_offset=26), Add(), Num(1, lineno=761, col_offset=28), lineno=761, col_offset=26)), Load(), lineno=761, col_offset=23), lineno=761, col_offset=22)], Load(), lineno=761, col_offset=15), [comprehension(Name('i', Store(), lineno=761, col_offset=36), Call(Name('range', Load(), lineno=761, col_offset=41), [Num(0, lineno=761, col_offset=47), Call(Name('len', Load(), lineno=761, col_offset=50), [Name('cl', Load(), lineno=761, col_offset=54)], [], None, None, lineno=761, col_offset=50), Num(2, lineno=761, col_offset=59)], [], None, None, lineno=761, col_offset=41), [])], lineno=761, col_offset=14), lineno=761, col_offset=8), Return(Name('pl', Load(), lineno=762, col_offset=16), lineno=762, col_offset=8)], [], lineno=752, col_offset=4), FunctionDef('_setscrollregion', arguments([Name('self', Param(), lineno=764, col_offset=25), Name('srx1', Param(), lineno=764, col_offset=31), Name('sry1', Param(), lineno=764, col_offset=37), Name('srx2', Param(), lineno=764, col_offset=43), Name('sry2', Param(), lineno=764, col_offset=49)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=765, col_offset=8), 'cv', Load(), lineno=765, col_offset=8), 'config', Load(), lineno=765, col_offset=8), [], [keyword('scrollregion', Tuple([Name('srx1', Load(), lineno=765, col_offset=37), Name('sry1', Load(), lineno=765, col_offset=43), Name('srx2', Load(), lineno=765, col_offset=49), Name('sry2', Load(), lineno=765, col_offset=55)], Load(), lineno=765, col_offset=37))], None, None, lineno=765, col_offset=8), lineno=765, col_offset=8)], [], lineno=764, col_offset=4), FunctionDef('_rescale', arguments([Name('self', Param(), lineno=767, col_offset=17), Name('xscalefactor', Param(), lineno=767, col_offset=23), Name('yscalefactor', Param(), lineno=767, col_offset=37)], None, None, []), [Assign([Name('items', Store(), lineno=768, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=768, col_offset=16), 'cv', Load(), lineno=768, col_offset=16), 'find_all', Load(), lineno=768, col_offset=16), [], [], None, None, lineno=768, col_offset=16), lineno=768, col_offset=8), For(Name('item', Store(), lineno=769, col_offset=12), Name('items', Load(), lineno=769, col_offset=20), [Assign([Name('coordinates', Store(), lineno=770, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=770, col_offset=26), 'cv', Load(), lineno=770, col_offset=26), 'coords', Load(), lineno=770, col_offset=26), [Name('item', Load(), lineno=770, col_offset=41)], [], None, None, lineno=770, col_offset=26), lineno=770, col_offset=12), Assign([Name('newcoordlist', Store(), lineno=771, col_offset=12)], List([], Load(), lineno=771, col_offset=27), lineno=771, col_offset=12), While(Name('coordinates', Load(), lineno=772, col_offset=18), [Assign([Tuple([Name('x', Store(), lineno=773, col_offset=16), Name('y', Store(), lineno=773, col_offset=19)], Store(), lineno=773, col_offset=16)], Subscript(Name('coordinates', Load(), lineno=773, col_offset=23), Slice(None, Num(2, lineno=773, col_offset=36), None), Load(), lineno=773, col_offset=23), lineno=773, col_offset=16), Expr(Call(Attribute(Name('newcoordlist', Load(), lineno=774, col_offset=16), 'append', Load(), lineno=774, col_offset=16), [BinOp(Name('x', Load(), lineno=774, col_offset=36), Mult(), Name('xscalefactor', Load(), lineno=774, col_offset=40), lineno=774, col_offset=36)], [], None, None, lineno=774, col_offset=16), lineno=774, col_offset=16), Expr(Call(Attribute(Name('newcoordlist', Load(), lineno=775, col_offset=16), 'append', Load(), lineno=775, col_offset=16), [BinOp(Name('y', Load(), lineno=775, col_offset=36), Mult(), Name('yscalefactor', Load(), lineno=775, col_offset=40), lineno=775, col_offset=36)], [], None, None, lineno=775, col_offset=16), lineno=775, col_offset=16), Assign([Name('coordinates', Store(), lineno=776, col_offset=16)], Subscript(Name('coordinates', Load(), lineno=776, col_offset=30), Slice(Num(2, lineno=776, col_offset=42), None, None), Load(), lineno=776, col_offset=30), lineno=776, col_offset=16)], [], lineno=772, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=777, col_offset=12), 'cv', Load(), lineno=777, col_offset=12), 'coords', Load(), lineno=777, col_offset=12), [Name('item', Load(), lineno=777, col_offset=27)], [], Name('newcoordlist', Load(), lineno=777, col_offset=34), None, lineno=777, col_offset=12), lineno=777, col_offset=12)], [], lineno=769, col_offset=8)], [], lineno=767, col_offset=4), FunctionDef('_resize', arguments([Name('self', Param(), lineno=779, col_offset=16), Name('canvwidth', Param(), lineno=779, col_offset=22), Name('canvheight', Param(), lineno=779, col_offset=38), Name('bg', Param(), lineno=779, col_offset=55)], None, None, [Name('None', Load(), lineno=779, col_offset=32), Name('None', Load(), lineno=779, col_offset=49), Name('None', Load(), lineno=779, col_offset=58)]), [Expr(Str('Resize the canvas the turtles are drawing on. Does\n        not alter the drawing window.\n        ', lineno=782, col_offset=-1), lineno=782, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=784, col_offset=15), [Attribute(Name('self', Load(), lineno=784, col_offset=26), 'cv', Load(), lineno=784, col_offset=26), Name('ScrolledCanvas', Load(), lineno=784, col_offset=35)], [], None, None, lineno=784, col_offset=15), lineno=784, col_offset=11), [Return(Tuple([Attribute(Name('self', Load(), lineno=785, col_offset=19), 'canvwidth', Load(), lineno=785, col_offset=19), Attribute(Name('self', Load(), lineno=785, col_offset=35), 'canvheight', Load(), lineno=785, col_offset=35)], Load(), lineno=785, col_offset=19), lineno=785, col_offset=12)], [], lineno=784, col_offset=8), If(Compare(Name('canvwidth', Load(), lineno=786, col_offset=11), [Is(), Is(), Is()], [Name('canvheight', Load(), lineno=786, col_offset=24), Name('bg', Load(), lineno=786, col_offset=38), Name('None', Load(), lineno=786, col_offset=44)], lineno=786, col_offset=11), [Return(Tuple([Attribute(Attribute(Name('self', Load(), lineno=787, col_offset=19), 'cv', Load(), lineno=787, col_offset=19), 'canvwidth', Load(), lineno=787, col_offset=19), Attribute(Attribute(Name('self', Load(), lineno=787, col_offset=38), 'cv', Load(), lineno=787, col_offset=38), 'canvheight', Load(), lineno=787, col_offset=38)], Load(), lineno=787, col_offset=19), lineno=787, col_offset=12)], [], lineno=786, col_offset=8), If(Compare(Name('canvwidth', Load(), lineno=788, col_offset=11), [IsNot()], [Name('None', Load(), lineno=788, col_offset=28)], lineno=788, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=789, col_offset=12), 'canvwidth', Store(), lineno=789, col_offset=12)], Name('canvwidth', Load(), lineno=789, col_offset=29), lineno=789, col_offset=12)], [], lineno=788, col_offset=8), If(Compare(Name('canvheight', Load(), lineno=790, col_offset=11), [IsNot()], [Name('None', Load(), lineno=790, col_offset=29)], lineno=790, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=791, col_offset=12), 'canvheight', Store(), lineno=791, col_offset=12)], Name('canvheight', Load(), lineno=791, col_offset=30), lineno=791, col_offset=12)], [], lineno=790, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=792, col_offset=8), 'cv', Load(), lineno=792, col_offset=8), 'reset', Load(), lineno=792, col_offset=8), [Name('canvwidth', Load(), lineno=792, col_offset=22), Name('canvheight', Load(), lineno=792, col_offset=33), Name('bg', Load(), lineno=792, col_offset=45)], [], None, None, lineno=792, col_offset=8), lineno=792, col_offset=8)], [], lineno=779, col_offset=4), FunctionDef('_window_size', arguments([Name('self', Param(), lineno=794, col_offset=21)], None, None, []), [Expr(Str(' Return the width and height of the turtle window.\n        ', lineno=796, col_offset=-1), lineno=796, col_offset=-1), Assign([Name('width', Store(), lineno=797, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=797, col_offset=16), 'cv', Load(), lineno=797, col_offset=16), 'winfo_width', Load(), lineno=797, col_offset=16), [], [], None, None, lineno=797, col_offset=16), lineno=797, col_offset=8), If(Compare(Name('width', Load(), lineno=798, col_offset=11), [LtE()], [Num(1, lineno=798, col_offset=20)], lineno=798, col_offset=11), [Assign([Name('width', Store(), lineno=799, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=799, col_offset=20), 'cv', Load(), lineno=799, col_offset=20), Index(Str('width', lineno=799, col_offset=28)), Load(), lineno=799, col_offset=20), lineno=799, col_offset=12)], [], lineno=798, col_offset=8), Assign([Name('height', Store(), lineno=800, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=800, col_offset=17), 'cv', Load(), lineno=800, col_offset=17), 'winfo_height', Load(), lineno=800, col_offset=17), [], [], None, None, lineno=800, col_offset=17), lineno=800, col_offset=8), If(Compare(Name('height', Load(), lineno=801, col_offset=11), [LtE()], [Num(1, lineno=801, col_offset=21)], lineno=801, col_offset=11), [Assign([Name('height', Store(), lineno=802, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=802, col_offset=21), 'cv', Load(), lineno=802, col_offset=21), Index(Str('height', lineno=802, col_offset=29)), Load(), lineno=802, col_offset=21), lineno=802, col_offset=12)], [], lineno=801, col_offset=8), Return(Tuple([Name('width', Load(), lineno=803, col_offset=15), Name('height', Load(), lineno=803, col_offset=22)], Load(), lineno=803, col_offset=15), lineno=803, col_offset=8)], [], lineno=794, col_offset=4)], [], lineno=482, col_offset=0), ClassDef('Terminator', [Name('Exception', Load(), lineno=811, col_offset=18)], [Expr(Str('Will be raised in TurtleScreen.update, if _RUNNING becomes False.\n\n    Thus stops execution of turtle graphics script. Main purpose: use in\n    in the Demo-Viewer turtle.Demo.py.\n    ', lineno=816, col_offset=-1), lineno=816, col_offset=-1), Pass( lineno=817, col_offset=4)], [], lineno=811, col_offset=0), ClassDef('TurtleGraphicsError', [Name('Exception', Load(), lineno=820, col_offset=26)], [Expr(Str('Some TurtleGraphics Error\n    ', lineno=822, col_offset=-1), lineno=822, col_offset=-1)], [], lineno=820, col_offset=0), ClassDef('Shape', [Name('object', Load(), lineno=825, col_offset=12)], [Expr(Str('Data structure modeling shapes.\n\n    attribute _type is one of "polygon", "image", "compound"\n    attribute _data is - depending on _type a poygon-tuple,\n    an image or a list constructed using the addcomponent method.\n    ', lineno=831, col_offset=-1), lineno=831, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=832, col_offset=17), Name('type_', Param(), lineno=832, col_offset=23), Name('data', Param(), lineno=832, col_offset=30)], None, None, [Name('None', Load(), lineno=832, col_offset=35)]), [Assign([Attribute(Name('self', Load(), lineno=833, col_offset=8), '_type', Store(), lineno=833, col_offset=8)], Name('type_', Load(), lineno=833, col_offset=21), lineno=833, col_offset=8), If(Compare(Name('type_', Load(), lineno=834, col_offset=11), [Eq()], [Str('polygon', lineno=834, col_offset=20)], lineno=834, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=835, col_offset=15), [Name('data', Load(), lineno=835, col_offset=26), Name('list', Load(), lineno=835, col_offset=32)], [], None, None, lineno=835, col_offset=15), [Assign([Name('data', Store(), lineno=836, col_offset=16)], Call(Name('tuple', Load(), lineno=836, col_offset=23), [Name('data', Load(), lineno=836, col_offset=29)], [], None, None, lineno=836, col_offset=23), lineno=836, col_offset=16)], [], lineno=835, col_offset=12)], [If(Compare(Name('type_', Load(), lineno=837, col_offset=13), [Eq()], [Str('image', lineno=837, col_offset=22)], lineno=837, col_offset=13), [If(Call(Name('isinstance', Load(), lineno=838, col_offset=15), [Name('data', Load(), lineno=838, col_offset=26), Name('str', Load(), lineno=838, col_offset=32)], [], None, None, lineno=838, col_offset=15), [If(BoolOp(And(), [Call(Attribute(Call(Attribute(Name('data', Load(), lineno=839, col_offset=19), 'lower', Load(), lineno=839, col_offset=19), [], [], None, None, lineno=839, col_offset=19), 'endswith', Load(), lineno=839, col_offset=19), [Str('.gif', lineno=839, col_offset=41)], [], None, None, lineno=839, col_offset=19), Call(Name('isfile', Load(), lineno=839, col_offset=53), [Name('data', Load(), lineno=839, col_offset=60)], [], None, None, lineno=839, col_offset=53)], lineno=839, col_offset=19), [Assign([Name('data', Store(), lineno=840, col_offset=20)], Call(Attribute(Name('TurtleScreen', Load(), lineno=840, col_offset=27), '_image', Load(), lineno=840, col_offset=27), [Name('data', Load(), lineno=840, col_offset=47)], [], None, None, lineno=840, col_offset=27), lineno=840, col_offset=20)], [], lineno=839, col_offset=16)], [], lineno=838, col_offset=12)], [If(Compare(Name('type_', Load(), lineno=842, col_offset=13), [Eq()], [Str('compound', lineno=842, col_offset=22)], lineno=842, col_offset=13), [Assign([Name('data', Store(), lineno=843, col_offset=12)], List([], Load(), lineno=843, col_offset=19), lineno=843, col_offset=12)], [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=845, col_offset=18), [BinOp(Str('There is no shape type %s', lineno=845, col_offset=38), Mod(), Name('type_', Load(), lineno=845, col_offset=68), lineno=845, col_offset=38)], [], None, None, lineno=845, col_offset=18), None, None, lineno=845, col_offset=12)], lineno=842, col_offset=13)], lineno=837, col_offset=13)], lineno=834, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=846, col_offset=8), '_data', Store(), lineno=846, col_offset=8)], Name('data', Load(), lineno=846, col_offset=21), lineno=846, col_offset=8)], [], lineno=832, col_offset=4), FunctionDef('addcomponent', arguments([Name('self', Param(), lineno=848, col_offset=21), Name('poly', Param(), lineno=848, col_offset=27), Name('fill', Param(), lineno=848, col_offset=33), Name('outline', Param(), lineno=848, col_offset=39)], None, None, [Name('None', Load(), lineno=848, col_offset=47)]), [Expr(Str('Add component to a shape of type compound.\n\n        Arguments: poly is a polygon, i. e. a tuple of number pairs.\n        fill is the fillcolor of the component,\n        outline is the outline color of the component.\n\n        call (for a Shapeobject namend s):\n        --   s.addcomponent(((0,0), (10,10), (-10,10)), "red", "blue")\n\n        Example:\n        >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n        >>> s = Shape("compound")\n        >>> s.addcomponent(poly, "red", "blue")\n        ### .. add more components and then use register_shape()\n        ', lineno=863, col_offset=-1), lineno=863, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=864, col_offset=11), '_type', Load(), lineno=864, col_offset=11), [NotEq()], [Str('compound', lineno=864, col_offset=25)], lineno=864, col_offset=11), [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=865, col_offset=18), [BinOp(Str('Cannot add component to %s Shape', lineno=865, col_offset=38), Mod(), Attribute(Name('self', Load(), lineno=866, col_offset=66), '_type', Load(), lineno=866, col_offset=66), lineno=865, col_offset=38)], [], None, None, lineno=865, col_offset=18), None, None, lineno=865, col_offset=12)], [], lineno=864, col_offset=8), If(Compare(Name('outline', Load(), lineno=867, col_offset=11), [Is()], [Name('None', Load(), lineno=867, col_offset=22)], lineno=867, col_offset=11), [Assign([Name('outline', Store(), lineno=868, col_offset=12)], Name('fill', Load(), lineno=868, col_offset=22), lineno=868, col_offset=12)], [], lineno=867, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=869, col_offset=8), '_data', Load(), lineno=869, col_offset=8), 'append', Load(), lineno=869, col_offset=8), [List([Name('poly', Load(), lineno=869, col_offset=27), Name('fill', Load(), lineno=869, col_offset=33), Name('outline', Load(), lineno=869, col_offset=39)], Load(), lineno=869, col_offset=26)], [], None, None, lineno=869, col_offset=8), lineno=869, col_offset=8)], [], lineno=848, col_offset=4)], [], lineno=825, col_offset=0), ClassDef('Tbuffer', [Name('object', Load(), lineno=872, col_offset=14)], [Expr(Str('Ring buffer used as undobuffer for RawTurtle objects.', lineno=873, col_offset=4), lineno=873, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=874, col_offset=17), Name('bufsize', Param(), lineno=874, col_offset=23)], None, None, [Num(10, lineno=874, col_offset=31)]), [Assign([Attribute(Name('self', Load(), lineno=875, col_offset=8), 'bufsize', Store(), lineno=875, col_offset=8)], Name('bufsize', Load(), lineno=875, col_offset=23), lineno=875, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=876, col_offset=8), 'buffer', Store(), lineno=876, col_offset=8)], BinOp(List([List([Name('None', Load(), lineno=876, col_offset=24)], Load(), lineno=876, col_offset=23)], Load(), lineno=876, col_offset=22), Mult(), Name('bufsize', Load(), lineno=876, col_offset=33), lineno=876, col_offset=22), lineno=876, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=877, col_offset=8), 'ptr', Store(), lineno=877, col_offset=8)], Num(-1, lineno=877, col_offset=20), lineno=877, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=878, col_offset=8), 'cumulate', Store(), lineno=878, col_offset=8)], Name('False', Load(), lineno=878, col_offset=24), lineno=878, col_offset=8)], [], lineno=874, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=879, col_offset=14), Name('bufsize', Param(), lineno=879, col_offset=20)], None, None, [Name('None', Load(), lineno=879, col_offset=28)]), [If(Compare(Name('bufsize', Load(), lineno=880, col_offset=11), [Is()], [Name('None', Load(), lineno=880, col_offset=22)], lineno=880, col_offset=11), [For(Name('i', Store(), lineno=881, col_offset=16), Call(Name('range', Load(), lineno=881, col_offset=21), [Attribute(Name('self', Load(), lineno=881, col_offset=27), 'bufsize', Load(), lineno=881, col_offset=27)], [], None, None, lineno=881, col_offset=21), [Assign([Subscript(Attribute(Name('self', Load(), lineno=882, col_offset=16), 'buffer', Load(), lineno=882, col_offset=16), Index(Name('i', Load(), lineno=882, col_offset=28)), Store(), lineno=882, col_offset=16)], List([Name('None', Load(), lineno=882, col_offset=34)], Load(), lineno=882, col_offset=33), lineno=882, col_offset=16)], [], lineno=881, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=884, col_offset=12), 'bufsize', Store(), lineno=884, col_offset=12)], Name('bufsize', Load(), lineno=884, col_offset=27), lineno=884, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=885, col_offset=12), 'buffer', Store(), lineno=885, col_offset=12)], BinOp(List([List([Name('None', Load(), lineno=885, col_offset=28)], Load(), lineno=885, col_offset=27)], Load(), lineno=885, col_offset=26), Mult(), Name('bufsize', Load(), lineno=885, col_offset=37), lineno=885, col_offset=26), lineno=885, col_offset=12)], lineno=880, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=886, col_offset=8), 'ptr', Store(), lineno=886, col_offset=8)], Num(-1, lineno=886, col_offset=20), lineno=886, col_offset=8)], [], lineno=879, col_offset=4), FunctionDef('push', arguments([Name('self', Param(), lineno=887, col_offset=13), Name('item', Param(), lineno=887, col_offset=19)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=888, col_offset=11), 'bufsize', Load(), lineno=888, col_offset=11), [Gt()], [Num(0, lineno=888, col_offset=26)], lineno=888, col_offset=11), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=889, col_offset=19), 'cumulate', Load(), lineno=889, col_offset=19), lineno=889, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=890, col_offset=16), 'ptr', Store(), lineno=890, col_offset=16)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=890, col_offset=28), 'ptr', Load(), lineno=890, col_offset=28), Add(), Num(1, lineno=890, col_offset=39), lineno=890, col_offset=28), Mod(), Attribute(Name('self', Load(), lineno=890, col_offset=44), 'bufsize', Load(), lineno=890, col_offset=44), lineno=890, col_offset=27), lineno=890, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=891, col_offset=16), 'buffer', Load(), lineno=891, col_offset=16), Index(Attribute(Name('self', Load(), lineno=891, col_offset=28), 'ptr', Load(), lineno=891, col_offset=28)), Store(), lineno=891, col_offset=16)], Name('item', Load(), lineno=891, col_offset=40), lineno=891, col_offset=16)], [Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=893, col_offset=16), 'buffer', Load(), lineno=893, col_offset=16), Index(Attribute(Name('self', Load(), lineno=893, col_offset=28), 'ptr', Load(), lineno=893, col_offset=28)), Load(), lineno=893, col_offset=16), 'append', Load(), lineno=893, col_offset=16), [Name('item', Load(), lineno=893, col_offset=45)], [], None, None, lineno=893, col_offset=16), lineno=893, col_offset=16)], lineno=889, col_offset=12)], [], lineno=888, col_offset=8)], [], lineno=887, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=894, col_offset=12)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=895, col_offset=11), 'bufsize', Load(), lineno=895, col_offset=11), [Gt()], [Num(0, lineno=895, col_offset=26)], lineno=895, col_offset=11), [Assign([Name('item', Store(), lineno=896, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=896, col_offset=19), 'buffer', Load(), lineno=896, col_offset=19), Index(Attribute(Name('self', Load(), lineno=896, col_offset=31), 'ptr', Load(), lineno=896, col_offset=31)), Load(), lineno=896, col_offset=19), lineno=896, col_offset=12), If(Compare(Name('item', Load(), lineno=897, col_offset=15), [Is()], [Name('None', Load(), lineno=897, col_offset=23)], lineno=897, col_offset=15), [Return(Name('None', Load(), lineno=898, col_offset=23), lineno=898, col_offset=16)], [Assign([Subscript(Attribute(Name('self', Load(), lineno=900, col_offset=16), 'buffer', Load(), lineno=900, col_offset=16), Index(Attribute(Name('self', Load(), lineno=900, col_offset=28), 'ptr', Load(), lineno=900, col_offset=28)), Store(), lineno=900, col_offset=16)], List([Name('None', Load(), lineno=900, col_offset=41)], Load(), lineno=900, col_offset=40), lineno=900, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=901, col_offset=16), 'ptr', Store(), lineno=901, col_offset=16)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=901, col_offset=28), 'ptr', Load(), lineno=901, col_offset=28), Sub(), Num(1, lineno=901, col_offset=39), lineno=901, col_offset=28), Mod(), Attribute(Name('self', Load(), lineno=901, col_offset=44), 'bufsize', Load(), lineno=901, col_offset=44), lineno=901, col_offset=27), lineno=901, col_offset=16), Return(Name('item', Load(), lineno=902, col_offset=24), lineno=902, col_offset=16)], lineno=897, col_offset=12)], [], lineno=895, col_offset=8)], [], lineno=894, col_offset=4), FunctionDef('nr_of_items', arguments([Name('self', Param(), lineno=903, col_offset=20)], None, None, []), [Return(BinOp(Attribute(Name('self', Load(), lineno=904, col_offset=15), 'bufsize', Load(), lineno=904, col_offset=15), Sub(), Call(Attribute(Attribute(Name('self', Load(), lineno=904, col_offset=30), 'buffer', Load(), lineno=904, col_offset=30), 'count', Load(), lineno=904, col_offset=30), [List([Name('None', Load(), lineno=904, col_offset=49)], Load(), lineno=904, col_offset=48)], [], None, None, lineno=904, col_offset=30), lineno=904, col_offset=15), lineno=904, col_offset=8)], [], lineno=903, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=905, col_offset=17)], None, None, []), [Return(BinOp(BinOp(Call(Name('str', Load(), lineno=906, col_offset=15), [Attribute(Name('self', Load(), lineno=906, col_offset=19), 'buffer', Load(), lineno=906, col_offset=19)], [], None, None, lineno=906, col_offset=15), Add(), Str(' ', lineno=906, col_offset=34), lineno=906, col_offset=15), Add(), Call(Name('str', Load(), lineno=906, col_offset=40), [Attribute(Name('self', Load(), lineno=906, col_offset=44), 'ptr', Load(), lineno=906, col_offset=44)], [], None, None, lineno=906, col_offset=40), lineno=906, col_offset=38), lineno=906, col_offset=8)], [], lineno=905, col_offset=4)], [], lineno=872, col_offset=0), ClassDef('TurtleScreen', [Name('TurtleScreenBase', Load(), lineno=910, col_offset=19)], [Expr(Str('Provides screen oriented methods like setbg etc.\n\n    Only relies upon the methods of TurtleScreenBase and NOT\n    upon components of the underlying graphics toolkit -\n    which is Tkinter in this case.\n    ', lineno=916, col_offset=-1), lineno=916, col_offset=-1), Assign([Name('_RUNNING', Store(), lineno=918, col_offset=4)], Name('True', Load(), lineno=918, col_offset=15), lineno=918, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=920, col_offset=17), Name('cv', Param(), lineno=920, col_offset=23), Name('mode', Param(), lineno=920, col_offset=27), Name('colormode', Param(), lineno=921, col_offset=17), Name('delay', Param(), lineno=921, col_offset=46)], None, None, [Subscript(Name('_CFG', Load(), lineno=920, col_offset=32), Index(Str('mode', lineno=920, col_offset=37)), Load(), lineno=920, col_offset=32), Subscript(Name('_CFG', Load(), lineno=921, col_offset=27), Index(Str('colormode', lineno=921, col_offset=32)), Load(), lineno=921, col_offset=27), Subscript(Name('_CFG', Load(), lineno=921, col_offset=52), Index(Str('delay', lineno=921, col_offset=57)), Load(), lineno=921, col_offset=52)]), [Assign([Attribute(Name('self', Load(), lineno=922, col_offset=8), '_shapes', Store(), lineno=922, col_offset=8)], Dict([Str('arrow', lineno=923, col_offset=19), Str('turtle', lineno=924, col_offset=18), Str('circle', lineno=929, col_offset=18), Str('square', lineno=935, col_offset=18), Str('triangle', lineno=937, col_offset=16), Str('classic', lineno=939, col_offset=18), Str('blank', lineno=940, col_offset=19)], [Call(Name('Shape', Load(), lineno=923, col_offset=29), [Str('polygon', lineno=923, col_offset=35), Tuple([Tuple([Num(-10, lineno=923, col_offset=49), Num(0, lineno=923, col_offset=52)], Load(), lineno=923, col_offset=48), Tuple([Num(10, lineno=923, col_offset=57), Num(0, lineno=923, col_offset=60)], Load(), lineno=923, col_offset=57), Tuple([Num(0, lineno=923, col_offset=65), Num(10, lineno=923, col_offset=67)], Load(), lineno=923, col_offset=65)], Load(), lineno=923, col_offset=47)], [], None, None, lineno=923, col_offset=29), Call(Name('Shape', Load(), lineno=924, col_offset=29), [Str('polygon', lineno=924, col_offset=35), Tuple([Tuple([Num(0, lineno=924, col_offset=48), Num(16, lineno=924, col_offset=50)], Load(), lineno=924, col_offset=48), Tuple([Num(-2, lineno=924, col_offset=57), Num(14, lineno=924, col_offset=59)], Load(), lineno=924, col_offset=56), Tuple([Num(-1, lineno=924, col_offset=66), Num(10, lineno=924, col_offset=68)], Load(), lineno=924, col_offset=65), Tuple([Num(-4, lineno=924, col_offset=75), Num(7, lineno=924, col_offset=77)], Load(), lineno=924, col_offset=74), Tuple([Num(-7, lineno=925, col_offset=32), Num(9, lineno=925, col_offset=34)], Load(), lineno=925, col_offset=31), Tuple([Num(-9, lineno=925, col_offset=40), Num(8, lineno=925, col_offset=42)], Load(), lineno=925, col_offset=39), Tuple([Num(-6, lineno=925, col_offset=48), Num(5, lineno=925, col_offset=50)], Load(), lineno=925, col_offset=47), Tuple([Num(-7, lineno=925, col_offset=56), Num(1, lineno=925, col_offset=58)], Load(), lineno=925, col_offset=55), Tuple([Num(-5, lineno=925, col_offset=64), Num(-3, lineno=925, col_offset=67)], Load(), lineno=925, col_offset=63), Tuple([Num(-8, lineno=925, col_offset=73), Num(-6, lineno=925, col_offset=76)], Load(), lineno=925, col_offset=72), Tuple([Num(-6, lineno=926, col_offset=32), Num(-8, lineno=926, col_offset=35)], Load(), lineno=926, col_offset=31), Tuple([Num(-4, lineno=926, col_offset=41), Num(-5, lineno=926, col_offset=44)], Load(), lineno=926, col_offset=40), Tuple([Num(0, lineno=926, col_offset=49), Num(-7, lineno=926, col_offset=52)], Load(), lineno=926, col_offset=49), Tuple([Num(4, lineno=926, col_offset=57), Num(-5, lineno=926, col_offset=60)], Load(), lineno=926, col_offset=57), Tuple([Num(6, lineno=926, col_offset=65), Num(-8, lineno=926, col_offset=68)], Load(), lineno=926, col_offset=65), Tuple([Num(8, lineno=926, col_offset=73), Num(-6, lineno=926, col_offset=76)], Load(), lineno=926, col_offset=73), Tuple([Num(5, lineno=927, col_offset=31), Num(-3, lineno=927, col_offset=34)], Load(), lineno=927, col_offset=31), Tuple([Num(7, lineno=927, col_offset=39), Num(1, lineno=927, col_offset=41)], Load(), lineno=927, col_offset=39), Tuple([Num(6, lineno=927, col_offset=46), Num(5, lineno=927, col_offset=48)], Load(), lineno=927, col_offset=46), Tuple([Num(9, lineno=927, col_offset=53), Num(8, lineno=927, col_offset=55)], Load(), lineno=927, col_offset=53), Tuple([Num(7, lineno=927, col_offset=60), Num(9, lineno=927, col_offset=62)], Load(), lineno=927, col_offset=60), Tuple([Num(4, lineno=927, col_offset=67), Num(7, lineno=927, col_offset=69)], Load(), lineno=927, col_offset=67), Tuple([Num(1, lineno=927, col_offset=74), Num(10, lineno=927, col_offset=76)], Load(), lineno=927, col_offset=74), Tuple([Num(2, lineno=928, col_offset=31), Num(14, lineno=928, col_offset=33)], Load(), lineno=928, col_offset=31)], Load(), lineno=924, col_offset=47)], [], None, None, lineno=924, col_offset=29), Call(Name('Shape', Load(), lineno=929, col_offset=29), [Str('polygon', lineno=929, col_offset=35), Tuple([Tuple([Num(10, lineno=929, col_offset=48), Num(0, lineno=929, col_offset=51)], Load(), lineno=929, col_offset=48), Tuple([Num(9.51, lineno=929, col_offset=56), Num(3.09, lineno=929, col_offset=61)], Load(), lineno=929, col_offset=56), Tuple([Num(8.09, lineno=929, col_offset=69), Num(5.88, lineno=929, col_offset=74)], Load(), lineno=929, col_offset=69), Tuple([Num(5.88, lineno=930, col_offset=31), Num(8.09, lineno=930, col_offset=36)], Load(), lineno=930, col_offset=31), Tuple([Num(3.09, lineno=930, col_offset=44), Num(9.51, lineno=930, col_offset=49)], Load(), lineno=930, col_offset=44), Tuple([Num(0, lineno=930, col_offset=57), Num(10, lineno=930, col_offset=59)], Load(), lineno=930, col_offset=57), Tuple([Num(-3.09, lineno=930, col_offset=66), Num(9.51, lineno=930, col_offset=71)], Load(), lineno=930, col_offset=65), Tuple([Num(-5.88, lineno=931, col_offset=32), Num(8.09, lineno=931, col_offset=37)], Load(), lineno=931, col_offset=31), Tuple([Num(-8.09, lineno=931, col_offset=46), Num(5.88, lineno=931, col_offset=51)], Load(), lineno=931, col_offset=45), Tuple([Num(-9.51, lineno=931, col_offset=60), Num(3.09, lineno=931, col_offset=65)], Load(), lineno=931, col_offset=59), Tuple([Num(-10, lineno=931, col_offset=74), Num(0, lineno=931, col_offset=77)], Load(), lineno=931, col_offset=73), Tuple([Num(-9.51, lineno=932, col_offset=32), Num(-3.09, lineno=932, col_offset=38)], Load(), lineno=932, col_offset=31), Tuple([Num(-8.09, lineno=932, col_offset=47), Num(-5.88, lineno=932, col_offset=53)], Load(), lineno=932, col_offset=46), Tuple([Num(-5.88, lineno=932, col_offset=62), Num(-8.09, lineno=932, col_offset=68)], Load(), lineno=932, col_offset=61), Tuple([Num(-3.09, lineno=933, col_offset=32), Num(-9.51, lineno=933, col_offset=38)], Load(), lineno=933, col_offset=31), Tuple([Num(-0.0, lineno=933, col_offset=47), Num(-10.0, lineno=933, col_offset=53)], Load(), lineno=933, col_offset=46), Tuple([Num(3.09, lineno=933, col_offset=62), Num(-9.51, lineno=933, col_offset=68)], Load(), lineno=933, col_offset=62), Tuple([Num(5.88, lineno=934, col_offset=31), Num(-8.09, lineno=934, col_offset=37)], Load(), lineno=934, col_offset=31), Tuple([Num(8.09, lineno=934, col_offset=45), Num(-5.88, lineno=934, col_offset=51)], Load(), lineno=934, col_offset=45), Tuple([Num(9.51, lineno=934, col_offset=59), Num(-3.09, lineno=934, col_offset=65)], Load(), lineno=934, col_offset=59)], Load(), lineno=929, col_offset=47)], [], None, None, lineno=929, col_offset=29), Call(Name('Shape', Load(), lineno=935, col_offset=29), [Str('polygon', lineno=935, col_offset=35), Tuple([Tuple([Num(10, lineno=935, col_offset=48), Num(-10, lineno=935, col_offset=52)], Load(), lineno=935, col_offset=48), Tuple([Num(10, lineno=935, col_offset=58), Num(10, lineno=935, col_offset=61)], Load(), lineno=935, col_offset=58), Tuple([Num(-10, lineno=935, col_offset=68), Num(10, lineno=935, col_offset=71)], Load(), lineno=935, col_offset=67), Tuple([Num(-10, lineno=936, col_offset=32), Num(-10, lineno=936, col_offset=36)], Load(), lineno=936, col_offset=31)], Load(), lineno=935, col_offset=47)], [], None, None, lineno=935, col_offset=29), Call(Name('Shape', Load(), lineno=937, col_offset=29), [Str('polygon', lineno=937, col_offset=35), Tuple([Tuple([Num(10, lineno=937, col_offset=48), Num(-5.77, lineno=937, col_offset=52)], Load(), lineno=937, col_offset=48), Tuple([Num(0, lineno=937, col_offset=60), Num(11.55, lineno=937, col_offset=62)], Load(), lineno=937, col_offset=60), Tuple([Num(-10, lineno=938, col_offset=32), Num(-5.77, lineno=938, col_offset=36)], Load(), lineno=938, col_offset=31)], Load(), lineno=937, col_offset=47)], [], None, None, lineno=937, col_offset=29), Call(Name('Shape', Load(), lineno=939, col_offset=29), [Str('polygon', lineno=939, col_offset=35), Tuple([Tuple([Num(0, lineno=939, col_offset=48), Num(0, lineno=939, col_offset=50)], Load(), lineno=939, col_offset=48), Tuple([Num(-5, lineno=939, col_offset=55), Num(-9, lineno=939, col_offset=58)], Load(), lineno=939, col_offset=54), Tuple([Num(0, lineno=939, col_offset=62), Num(-7, lineno=939, col_offset=65)], Load(), lineno=939, col_offset=62), Tuple([Num(5, lineno=939, col_offset=69), Num(-9, lineno=939, col_offset=72)], Load(), lineno=939, col_offset=69)], Load(), lineno=939, col_offset=47)], [], None, None, lineno=939, col_offset=29), Call(Name('Shape', Load(), lineno=940, col_offset=29), [Str('image', lineno=940, col_offset=35), Call(Attribute(Name('self', Load(), lineno=940, col_offset=44), '_blankimage', Load(), lineno=940, col_offset=44), [], [], None, None, lineno=940, col_offset=44)], [], None, None, lineno=940, col_offset=29)], lineno=922, col_offset=23), lineno=922, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=943, col_offset=8), '_bgpics', Store(), lineno=943, col_offset=8)], Dict([Str('nopic', lineno=943, col_offset=24)], [Str('', lineno=943, col_offset=34)], lineno=943, col_offset=23), lineno=943, col_offset=8), Expr(Call(Attribute(Name('TurtleScreenBase', Load(), lineno=945, col_offset=8), '__init__', Load(), lineno=945, col_offset=8), [Name('self', Load(), lineno=945, col_offset=34), Name('cv', Load(), lineno=945, col_offset=40)], [], None, None, lineno=945, col_offset=8), lineno=945, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=946, col_offset=8), '_mode', Store(), lineno=946, col_offset=8)], Name('mode', Load(), lineno=946, col_offset=21), lineno=946, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=947, col_offset=8), '_delayvalue', Store(), lineno=947, col_offset=8)], Name('delay', Load(), lineno=947, col_offset=27), lineno=947, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=948, col_offset=8), '_colormode', Store(), lineno=948, col_offset=8)], Subscript(Name('_CFG', Load(), lineno=948, col_offset=26), Index(Str('colormode', lineno=948, col_offset=31)), Load(), lineno=948, col_offset=26), lineno=948, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=949, col_offset=8), '_keys', Store(), lineno=949, col_offset=8)], List([], Load(), lineno=949, col_offset=21), lineno=949, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=950, col_offset=8), 'clear', Load(), lineno=950, col_offset=8), [], [], None, None, lineno=950, col_offset=8), lineno=950, col_offset=8)], [], lineno=920, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=952, col_offset=14)], None, None, []), [Expr(Str('Delete all drawings and all turtles from the TurtleScreen.\n\n        Reset empty TurtleScreen to its initial state: white background,\n        no backgroundimage, no eventbindings and tracing on.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        screen.clear()\n\n        Note: this method is not available as function.\n        ', lineno=964, col_offset=-1), lineno=964, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=965, col_offset=8), '_delayvalue', Store(), lineno=965, col_offset=8)], Subscript(Name('_CFG', Load(), lineno=965, col_offset=27), Index(Str('delay', lineno=965, col_offset=32)), Load(), lineno=965, col_offset=27), lineno=965, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=966, col_offset=8), '_colormode', Store(), lineno=966, col_offset=8)], Subscript(Name('_CFG', Load(), lineno=966, col_offset=26), Index(Str('colormode', lineno=966, col_offset=31)), Load(), lineno=966, col_offset=26), lineno=966, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=967, col_offset=8), '_delete', Load(), lineno=967, col_offset=8), [Str('all', lineno=967, col_offset=21)], [], None, None, lineno=967, col_offset=8), lineno=967, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=968, col_offset=8), '_bgpic', Store(), lineno=968, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=968, col_offset=22), '_createimage', Load(), lineno=968, col_offset=22), [Str('', lineno=968, col_offset=40)], [], None, None, lineno=968, col_offset=22), lineno=968, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=969, col_offset=8), '_bgpicname', Store(), lineno=969, col_offset=8)], Str('nopic', lineno=969, col_offset=26), lineno=969, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=970, col_offset=8), '_tracing', Store(), lineno=970, col_offset=8)], Num(1, lineno=970, col_offset=24), lineno=970, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=971, col_offset=8), '_updatecounter', Store(), lineno=971, col_offset=8)], Num(0, lineno=971, col_offset=30), lineno=971, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=972, col_offset=8), '_turtles', Store(), lineno=972, col_offset=8)], List([], Load(), lineno=972, col_offset=24), lineno=972, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=973, col_offset=8), 'bgcolor', Load(), lineno=973, col_offset=8), [Str('white', lineno=973, col_offset=21)], [], None, None, lineno=973, col_offset=8), lineno=973, col_offset=8), For(Name('btn', Store(), lineno=974, col_offset=12), Tuple([Num(1, lineno=974, col_offset=19), Num(2, lineno=974, col_offset=22), Num(3, lineno=974, col_offset=25)], Load(), lineno=974, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=975, col_offset=12), 'onclick', Load(), lineno=975, col_offset=12), [Name('None', Load(), lineno=975, col_offset=25), Name('btn', Load(), lineno=975, col_offset=31)], [], None, None, lineno=975, col_offset=12), lineno=975, col_offset=12)], [], lineno=974, col_offset=8), For(Name('key', Store(), lineno=976, col_offset=12), Subscript(Attribute(Name('self', Load(), lineno=976, col_offset=19), '_keys', Load(), lineno=976, col_offset=19), Slice(None, None, None), Load(), lineno=976, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=977, col_offset=12), 'onkey', Load(), lineno=977, col_offset=12), [Name('None', Load(), lineno=977, col_offset=23), Name('key', Load(), lineno=977, col_offset=29)], [], None, None, lineno=977, col_offset=12), lineno=977, col_offset=12)], [], lineno=976, col_offset=8), Assign([Attribute(Name('Turtle', Load(), lineno=978, col_offset=8), '_pen', Store(), lineno=978, col_offset=8)], Name('None', Load(), lineno=978, col_offset=22), lineno=978, col_offset=8)], [], lineno=952, col_offset=4), FunctionDef('mode', arguments([Name('self', Param(), lineno=980, col_offset=13), Name('mode', Param(), lineno=980, col_offset=19)], None, None, [Name('None', Load(), lineno=980, col_offset=24)]), [Expr(Str("Set turtle-mode ('standard', 'logo' or 'world') and perform reset.\n\n        Optional argument:\n        mode -- on of the strings 'standard', 'logo' or 'world'\n\n        Mode 'standard' is compatible with turtle.py.\n        Mode 'logo' is compatible with most Logo-Turtle-Graphics.\n        Mode 'world' uses userdefined 'worldcoordinates'. *Attention*: in\n        this mode angles appear distorted if x/y unit-ratio doesn't equal 1.\n        If mode is not given, return the current mode.\n\n             Mode      Initial turtle heading     positive angles\n         ------------|-------------------------|-------------------\n          'standard'    to the right (east)       counterclockwise\n            'logo'        upward    (north)         clockwise\n\n        Examples:\n        >>> mode('logo')   # resets turtle heading to north\n        >>> mode()\n        'logo'\n        ", lineno=1001, col_offset=-1), lineno=1001, col_offset=-1), If(Compare(Name('mode', Load(), lineno=1002, col_offset=11), [Is()], [Name('None', Load(), lineno=1002, col_offset=19)], lineno=1002, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1003, col_offset=19), '_mode', Load(), lineno=1003, col_offset=19), lineno=1003, col_offset=12)], [], lineno=1002, col_offset=8), Assign([Name('mode', Store(), lineno=1004, col_offset=8)], Call(Attribute(Name('mode', Load(), lineno=1004, col_offset=15), 'lower', Load(), lineno=1004, col_offset=15), [], [], None, None, lineno=1004, col_offset=15), lineno=1004, col_offset=8), If(Compare(Name('mode', Load(), lineno=1005, col_offset=11), [NotIn()], [List([Str('standard', lineno=1005, col_offset=24), Str('logo', lineno=1005, col_offset=36), Str('world', lineno=1005, col_offset=44)], Load(), lineno=1005, col_offset=23)], lineno=1005, col_offset=11), [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1006, col_offset=18), [BinOp(Str('No turtle-graphics-mode %s', lineno=1006, col_offset=38), Mod(), Name('mode', Load(), lineno=1006, col_offset=69), lineno=1006, col_offset=38)], [], None, None, lineno=1006, col_offset=18), None, None, lineno=1006, col_offset=12)], [], lineno=1005, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1007, col_offset=8), '_mode', Store(), lineno=1007, col_offset=8)], Name('mode', Load(), lineno=1007, col_offset=21), lineno=1007, col_offset=8), If(Compare(Name('mode', Load(), lineno=1008, col_offset=11), [In()], [List([Str('standard', lineno=1008, col_offset=20), Str('logo', lineno=1008, col_offset=32)], Load(), lineno=1008, col_offset=19)], lineno=1008, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1009, col_offset=12), '_setscrollregion', Load(), lineno=1009, col_offset=12), [BinOp(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=1009, col_offset=35), 'canvwidth', Load(), lineno=1009, col_offset=35), lineno=1009, col_offset=34), FloorDiv(), Num(2, lineno=1009, col_offset=51), lineno=1009, col_offset=34), BinOp(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=1009, col_offset=55), 'canvheight', Load(), lineno=1009, col_offset=55), lineno=1009, col_offset=54), FloorDiv(), Num(2, lineno=1009, col_offset=72), lineno=1009, col_offset=54), BinOp(Attribute(Name('self', Load(), lineno=1010, col_offset=39), 'canvwidth', Load(), lineno=1010, col_offset=39), FloorDiv(), Num(2, lineno=1010, col_offset=55), lineno=1010, col_offset=39), BinOp(Attribute(Name('self', Load(), lineno=1010, col_offset=58), 'canvheight', Load(), lineno=1010, col_offset=58), FloorDiv(), Num(2, lineno=1010, col_offset=75), lineno=1010, col_offset=58)], [], None, None, lineno=1009, col_offset=12), lineno=1009, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1011, col_offset=12), 'xscale', Store(), lineno=1011, col_offset=12), Attribute(Name('self', Load(), lineno=1011, col_offset=26), 'yscale', Store(), lineno=1011, col_offset=26)], Num(1.0, lineno=1011, col_offset=40), lineno=1011, col_offset=12)], [], lineno=1008, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1012, col_offset=8), 'reset', Load(), lineno=1012, col_offset=8), [], [], None, None, lineno=1012, col_offset=8), lineno=1012, col_offset=8)], [], lineno=980, col_offset=4), FunctionDef('setworldcoordinates', arguments([Name('self', Param(), lineno=1014, col_offset=28), Name('llx', Param(), lineno=1014, col_offset=34), Name('lly', Param(), lineno=1014, col_offset=39), Name('urx', Param(), lineno=1014, col_offset=44), Name('ury', Param(), lineno=1014, col_offset=49)], None, None, []), [Expr(Str("Set up a user defined coordinate-system.\n\n        Arguments:\n        llx -- a number, x-coordinate of lower left corner of canvas\n        lly -- a number, y-coordinate of lower left corner of canvas\n        urx -- a number, x-coordinate of upper right corner of canvas\n        ury -- a number, y-coordinate of upper right corner of canvas\n\n        Set up user coodinat-system and switch to mode 'world' if necessary.\n        This performs a screen.reset. If mode 'world' is already active,\n        all drawings are redrawn according to the new coordinates.\n\n        But ATTENTION: in user-defined coordinatesystems angles may appear\n        distorted. (see Screen.mode())\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.setworldcoordinates(-10,-0.5,50,1.5)\n        >>> for _ in range(36):\n                left(10)\n                forward(0.5)\n        ", lineno=1035, col_offset=-1), lineno=1035, col_offset=-1), If(Compare(Call(Attribute(Name('self', Load(), lineno=1036, col_offset=11), 'mode', Load(), lineno=1036, col_offset=11), [], [], None, None, lineno=1036, col_offset=11), [NotEq()], [Str('world', lineno=1036, col_offset=26)], lineno=1036, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1037, col_offset=12), 'mode', Load(), lineno=1037, col_offset=12), [Str('world', lineno=1037, col_offset=22)], [], None, None, lineno=1037, col_offset=12), lineno=1037, col_offset=12)], [], lineno=1036, col_offset=8), Assign([Name('xspan', Store(), lineno=1038, col_offset=8)], Call(Name('float', Load(), lineno=1038, col_offset=16), [BinOp(Name('urx', Load(), lineno=1038, col_offset=22), Sub(), Name('llx', Load(), lineno=1038, col_offset=28), lineno=1038, col_offset=22)], [], None, None, lineno=1038, col_offset=16), lineno=1038, col_offset=8), Assign([Name('yspan', Store(), lineno=1039, col_offset=8)], Call(Name('float', Load(), lineno=1039, col_offset=16), [BinOp(Name('ury', Load(), lineno=1039, col_offset=22), Sub(), Name('lly', Load(), lineno=1039, col_offset=28), lineno=1039, col_offset=22)], [], None, None, lineno=1039, col_offset=16), lineno=1039, col_offset=8), Assign([Tuple([Name('wx', Store(), lineno=1040, col_offset=8), Name('wy', Store(), lineno=1040, col_offset=12)], Store(), lineno=1040, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1040, col_offset=17), '_window_size', Load(), lineno=1040, col_offset=17), [], [], None, None, lineno=1040, col_offset=17), lineno=1040, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1041, col_offset=8), 'screensize', Load(), lineno=1041, col_offset=8), [BinOp(Name('wx', Load(), lineno=1041, col_offset=24), Sub(), Num(20, lineno=1041, col_offset=27), lineno=1041, col_offset=24), BinOp(Name('wy', Load(), lineno=1041, col_offset=31), Sub(), Num(20, lineno=1041, col_offset=34), lineno=1041, col_offset=31)], [], None, None, lineno=1041, col_offset=8), lineno=1041, col_offset=8), Assign([Tuple([Name('oldxscale', Store(), lineno=1042, col_offset=8), Name('oldyscale', Store(), lineno=1042, col_offset=19)], Store(), lineno=1042, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=1042, col_offset=31), 'xscale', Load(), lineno=1042, col_offset=31), Attribute(Name('self', Load(), lineno=1042, col_offset=44), 'yscale', Load(), lineno=1042, col_offset=44)], Load(), lineno=1042, col_offset=31), lineno=1042, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1043, col_offset=8), 'xscale', Store(), lineno=1043, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1043, col_offset=22), 'canvwidth', Load(), lineno=1043, col_offset=22), Div(), Name('xspan', Load(), lineno=1043, col_offset=39), lineno=1043, col_offset=22), lineno=1043, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1044, col_offset=8), 'yscale', Store(), lineno=1044, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1044, col_offset=22), 'canvheight', Load(), lineno=1044, col_offset=22), Div(), Name('yspan', Load(), lineno=1044, col_offset=40), lineno=1044, col_offset=22), lineno=1044, col_offset=8), Assign([Name('srx1', Store(), lineno=1045, col_offset=8)], BinOp(Name('llx', Load(), lineno=1045, col_offset=15), Mult(), Attribute(Name('self', Load(), lineno=1045, col_offset=21), 'xscale', Load(), lineno=1045, col_offset=21), lineno=1045, col_offset=15), lineno=1045, col_offset=8), Assign([Name('sry1', Store(), lineno=1046, col_offset=8)], BinOp(UnaryOp(USub(), Name('ury', Load(), lineno=1046, col_offset=16), lineno=1046, col_offset=15), Mult(), Attribute(Name('self', Load(), lineno=1046, col_offset=22), 'yscale', Load(), lineno=1046, col_offset=22), lineno=1046, col_offset=15), lineno=1046, col_offset=8), Assign([Name('srx2', Store(), lineno=1047, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1047, col_offset=15), 'canvwidth', Load(), lineno=1047, col_offset=15), Add(), Name('srx1', Load(), lineno=1047, col_offset=32), lineno=1047, col_offset=15), lineno=1047, col_offset=8), Assign([Name('sry2', Store(), lineno=1048, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1048, col_offset=15), 'canvheight', Load(), lineno=1048, col_offset=15), Add(), Name('sry1', Load(), lineno=1048, col_offset=33), lineno=1048, col_offset=15), lineno=1048, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1049, col_offset=8), '_setscrollregion', Load(), lineno=1049, col_offset=8), [Name('srx1', Load(), lineno=1049, col_offset=30), Name('sry1', Load(), lineno=1049, col_offset=36), Name('srx2', Load(), lineno=1049, col_offset=42), Name('sry2', Load(), lineno=1049, col_offset=48)], [], None, None, lineno=1049, col_offset=8), lineno=1049, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1050, col_offset=8), '_rescale', Load(), lineno=1050, col_offset=8), [BinOp(Attribute(Name('self', Load(), lineno=1050, col_offset=22), 'xscale', Load(), lineno=1050, col_offset=22), Div(), Name('oldxscale', Load(), lineno=1050, col_offset=34), lineno=1050, col_offset=22), BinOp(Attribute(Name('self', Load(), lineno=1050, col_offset=45), 'yscale', Load(), lineno=1050, col_offset=45), Div(), Name('oldyscale', Load(), lineno=1050, col_offset=57), lineno=1050, col_offset=45)], [], None, None, lineno=1050, col_offset=8), lineno=1050, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1051, col_offset=8), 'update', Load(), lineno=1051, col_offset=8), [], [], None, None, lineno=1051, col_offset=8), lineno=1051, col_offset=8)], [], lineno=1014, col_offset=4), FunctionDef('register_shape', arguments([Name('self', Param(), lineno=1053, col_offset=23), Name('name', Param(), lineno=1053, col_offset=29), Name('shape', Param(), lineno=1053, col_offset=35)], None, None, [Name('None', Load(), lineno=1053, col_offset=41)]), [Expr(Str('Adds a turtle shape to TurtleScreen\'s shapelist.\n\n        Arguments:\n        (1) name is the name of a gif-file and shape is None.\n            Installs the corresponding image shape.\n            !! Image-shapes DO NOT rotate when turning the turtle,\n            !! so they do not display the heading of the turtle!\n        (2) name is an arbitrary string and shape is a tuple\n            of pairs of coordinates. Installs the corresponding\n            polygon shape\n        (3) name is an arbitrary string and shape is a\n            (compound) Shape object. Installs the corresponding\n            compound shape.\n        To use a shape, you have to issue the command shape(shapename).\n\n        call: register_shape("turtle.gif")\n        --or: register_shape("tri", ((0,0), (10,10), (-10,10)))\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.register_shape("triangle", ((5,-3),(0,5),(-5,-3)))\n\n        ', lineno=1075, col_offset=-1), lineno=1075, col_offset=-1), If(Compare(Name('shape', Load(), lineno=1076, col_offset=11), [Is()], [Name('None', Load(), lineno=1076, col_offset=20)], lineno=1076, col_offset=11), [If(Call(Attribute(Call(Attribute(Name('name', Load(), lineno=1078, col_offset=15), 'lower', Load(), lineno=1078, col_offset=15), [], [], None, None, lineno=1078, col_offset=15), 'endswith', Load(), lineno=1078, col_offset=15), [Str('.gif', lineno=1078, col_offset=37)], [], None, None, lineno=1078, col_offset=15), [Assign([Name('shape', Store(), lineno=1079, col_offset=16)], Call(Name('Shape', Load(), lineno=1079, col_offset=24), [Str('image', lineno=1079, col_offset=30), Call(Attribute(Name('self', Load(), lineno=1079, col_offset=39), '_image', Load(), lineno=1079, col_offset=39), [Name('name', Load(), lineno=1079, col_offset=51)], [], None, None, lineno=1079, col_offset=39)], [], None, None, lineno=1079, col_offset=24), lineno=1079, col_offset=16)], [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1081, col_offset=22), [BinOp(Str('Bad arguments for register_shape.\n', lineno=1081, col_offset=42), Add(), Str('Use  help(register_shape)', lineno=1082, col_offset=44), lineno=1081, col_offset=42)], [], None, None, lineno=1081, col_offset=22), None, None, lineno=1081, col_offset=16)], lineno=1078, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1083, col_offset=13), [Name('shape', Load(), lineno=1083, col_offset=24), Name('tuple', Load(), lineno=1083, col_offset=31)], [], None, None, lineno=1083, col_offset=13), [Assign([Name('shape', Store(), lineno=1084, col_offset=12)], Call(Name('Shape', Load(), lineno=1084, col_offset=20), [Str('polygon', lineno=1084, col_offset=26), Name('shape', Load(), lineno=1084, col_offset=37)], [], None, None, lineno=1084, col_offset=20), lineno=1084, col_offset=12)], [], lineno=1083, col_offset=13)], lineno=1076, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=1086, col_offset=8), '_shapes', Load(), lineno=1086, col_offset=8), Index(Name('name', Load(), lineno=1086, col_offset=21)), Store(), lineno=1086, col_offset=8)], Name('shape', Load(), lineno=1086, col_offset=29), lineno=1086, col_offset=8)], [], lineno=1053, col_offset=4), FunctionDef('_colorstr', arguments([Name('self', Param(), lineno=1089, col_offset=18), Name('color', Param(), lineno=1089, col_offset=24)], None, None, []), [Expr(Str("Return color string corresponding to args.\n\n        Argument may be a string or a tuple of three\n        numbers corresponding to actual colormode,\n        i.e. in the range 0<=n<=colormode.\n\n        If the argument doesn't represent a color,\n        an error is raised.\n        ", lineno=1098, col_offset=-1), lineno=1098, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=1099, col_offset=11), [Name('color', Load(), lineno=1099, col_offset=15)], [], None, None, lineno=1099, col_offset=11), [Eq()], [Num(1, lineno=1099, col_offset=25)], lineno=1099, col_offset=11), [Assign([Name('color', Store(), lineno=1100, col_offset=12)], Subscript(Name('color', Load(), lineno=1100, col_offset=20), Index(Num(0, lineno=1100, col_offset=26)), Load(), lineno=1100, col_offset=20), lineno=1100, col_offset=12)], [], lineno=1099, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1101, col_offset=11), [Name('color', Load(), lineno=1101, col_offset=22), Name('str', Load(), lineno=1101, col_offset=29)], [], None, None, lineno=1101, col_offset=11), [If(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1102, col_offset=15), '_iscolorstring', Load(), lineno=1102, col_offset=15), [Name('color', Load(), lineno=1102, col_offset=35)], [], None, None, lineno=1102, col_offset=15), Compare(Name('color', Load(), lineno=1102, col_offset=45), [Eq()], [Str('', lineno=1102, col_offset=54)], lineno=1102, col_offset=45)], lineno=1102, col_offset=15), [Return(Name('color', Load(), lineno=1103, col_offset=23), lineno=1103, col_offset=16)], [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1105, col_offset=22), [BinOp(Str('bad color string: %s', lineno=1105, col_offset=42), Mod(), Call(Name('str', Load(), lineno=1105, col_offset=67), [Name('color', Load(), lineno=1105, col_offset=71)], [], None, None, lineno=1105, col_offset=67), lineno=1105, col_offset=42)], [], None, None, lineno=1105, col_offset=22), None, None, lineno=1105, col_offset=16)], lineno=1102, col_offset=12)], [], lineno=1101, col_offset=8), TryExcept([Assign([Tuple([Name('r', Store(), lineno=1107, col_offset=12), Name('g', Store(), lineno=1107, col_offset=15), Name('b', Store(), lineno=1107, col_offset=18)], Store(), lineno=1107, col_offset=12)], Name('color', Load(), lineno=1107, col_offset=22), lineno=1107, col_offset=12)], [ExceptHandler(None, None, [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1109, col_offset=18), [BinOp(Str('bad color arguments: %s', lineno=1109, col_offset=38), Mod(), Call(Name('str', Load(), lineno=1109, col_offset=66), [Name('color', Load(), lineno=1109, col_offset=70)], [], None, None, lineno=1109, col_offset=66), lineno=1109, col_offset=38)], [], None, None, lineno=1109, col_offset=18), None, None, lineno=1109, col_offset=12)], lineno=1108, col_offset=8)], [], lineno=1106, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1110, col_offset=11), '_colormode', Load(), lineno=1110, col_offset=11), [Eq()], [Num(1.0, lineno=1110, col_offset=30)], lineno=1110, col_offset=11), [Assign([Tuple([Name('r', Store(), lineno=1111, col_offset=12), Name('g', Store(), lineno=1111, col_offset=15), Name('b', Store(), lineno=1111, col_offset=18)], Store(), lineno=1111, col_offset=12)], ListComp(Call(Name('round', Load(), lineno=1111, col_offset=23), [BinOp(Num(255.0, lineno=1111, col_offset=29), Mult(), Name('x', Load(), lineno=1111, col_offset=35), lineno=1111, col_offset=29)], [], None, None, lineno=1111, col_offset=23), [comprehension(Name('x', Store(), lineno=1111, col_offset=42), Tuple([Name('r', Load(), lineno=1111, col_offset=48), Name('g', Load(), lineno=1111, col_offset=51), Name('b', Load(), lineno=1111, col_offset=54)], Load(), lineno=1111, col_offset=48), [])], lineno=1111, col_offset=23), lineno=1111, col_offset=12)], [], lineno=1110, col_offset=8), If(UnaryOp(Not(), BoolOp(And(), [Compare(Num(0, lineno=1112, col_offset=17), [LtE(), LtE()], [Name('r', Load(), lineno=1112, col_offset=22), Num(255, lineno=1112, col_offset=27)], lineno=1112, col_offset=17), Compare(Num(0, lineno=1112, col_offset=37), [LtE(), LtE()], [Name('g', Load(), lineno=1112, col_offset=42), Num(255, lineno=1112, col_offset=47)], lineno=1112, col_offset=37), Compare(Num(0, lineno=1112, col_offset=57), [LtE(), LtE()], [Name('b', Load(), lineno=1112, col_offset=62), Num(255, lineno=1112, col_offset=67)], lineno=1112, col_offset=57)], lineno=1112, col_offset=16), lineno=1112, col_offset=11), [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1113, col_offset=18), [BinOp(Str('bad color sequence: %s', lineno=1113, col_offset=38), Mod(), Call(Name('str', Load(), lineno=1113, col_offset=65), [Name('color', Load(), lineno=1113, col_offset=69)], [], None, None, lineno=1113, col_offset=65), lineno=1113, col_offset=38)], [], None, None, lineno=1113, col_offset=18), None, None, lineno=1113, col_offset=12)], [], lineno=1112, col_offset=8), Return(BinOp(Str('#%02x%02x%02x', lineno=1114, col_offset=15), Mod(), Tuple([Name('r', Load(), lineno=1114, col_offset=34), Name('g', Load(), lineno=1114, col_offset=37), Name('b', Load(), lineno=1114, col_offset=40)], Load(), lineno=1114, col_offset=34), lineno=1114, col_offset=15), lineno=1114, col_offset=8)], [], lineno=1089, col_offset=4), FunctionDef('_color', arguments([Name('self', Param(), lineno=1116, col_offset=15), Name('cstr', Param(), lineno=1116, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Attribute(Name('cstr', Load(), lineno=1117, col_offset=15), 'startswith', Load(), lineno=1117, col_offset=15), [Str('#', lineno=1117, col_offset=31)], [], None, None, lineno=1117, col_offset=15), lineno=1117, col_offset=11), [Return(Name('cstr', Load(), lineno=1118, col_offset=19), lineno=1118, col_offset=12)], [], lineno=1117, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=1119, col_offset=11), [Name('cstr', Load(), lineno=1119, col_offset=15)], [], None, None, lineno=1119, col_offset=11), [Eq()], [Num(7, lineno=1119, col_offset=24)], lineno=1119, col_offset=11), [Assign([Name('cl', Store(), lineno=1120, col_offset=12)], ListComp(Call(Name('int', Load(), lineno=1120, col_offset=18), [Subscript(Name('cstr', Load(), lineno=1120, col_offset=22), Slice(Name('i', Load(), lineno=1120, col_offset=27), BinOp(Name('i', Load(), lineno=1120, col_offset=29), Add(), Num(2, lineno=1120, col_offset=31), lineno=1120, col_offset=29), None), Load(), lineno=1120, col_offset=22), Num(16, lineno=1120, col_offset=35)], [], None, None, lineno=1120, col_offset=18), [comprehension(Name('i', Store(), lineno=1120, col_offset=43), Tuple([Num(1, lineno=1120, col_offset=49), Num(3, lineno=1120, col_offset=52), Num(5, lineno=1120, col_offset=55)], Load(), lineno=1120, col_offset=49), [])], lineno=1120, col_offset=18), lineno=1120, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=1121, col_offset=13), [Name('cstr', Load(), lineno=1121, col_offset=17)], [], None, None, lineno=1121, col_offset=13), [Eq()], [Num(4, lineno=1121, col_offset=26)], lineno=1121, col_offset=13), [Assign([Name('cl', Store(), lineno=1122, col_offset=12)], ListComp(BinOp(Num(16, lineno=1122, col_offset=18), Mult(), Call(Name('int', Load(), lineno=1122, col_offset=21), [Subscript(Name('cstr', Load(), lineno=1122, col_offset=25), Index(Name('h', Load(), lineno=1122, col_offset=30)), Load(), lineno=1122, col_offset=25), Num(16, lineno=1122, col_offset=34)], [], None, None, lineno=1122, col_offset=21), lineno=1122, col_offset=18), [comprehension(Name('h', Store(), lineno=1122, col_offset=42), Subscript(Name('cstr', Load(), lineno=1122, col_offset=47), Slice(Num(1, lineno=1122, col_offset=52), None, None), Load(), lineno=1122, col_offset=47), [])], lineno=1122, col_offset=18), lineno=1122, col_offset=12)], [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=1124, col_offset=18), [BinOp(Str('bad colorstring: %s', lineno=1124, col_offset=38), Mod(), Name('cstr', Load(), lineno=1124, col_offset=62), lineno=1124, col_offset=38)], [], None, None, lineno=1124, col_offset=18), None, None, lineno=1124, col_offset=12)], lineno=1121, col_offset=13)], lineno=1119, col_offset=8), Return(Call(Name('tuple', Load(), lineno=1125, col_offset=15), [ListComp(BinOp(BinOp(Name('c', Load(), lineno=1125, col_offset=22), Mult(), Attribute(Name('self', Load(), lineno=1125, col_offset=26), '_colormode', Load(), lineno=1125, col_offset=26), lineno=1125, col_offset=22), Div(), Num(255, lineno=1125, col_offset=42), lineno=1125, col_offset=41), [comprehension(Name('c', Store(), lineno=1125, col_offset=50), Name('cl', Load(), lineno=1125, col_offset=55), [])], lineno=1125, col_offset=22)], [], None, None, lineno=1125, col_offset=15), lineno=1125, col_offset=8)], [], lineno=1116, col_offset=4), FunctionDef('colormode', arguments([Name('self', Param(), lineno=1127, col_offset=18), Name('cmode', Param(), lineno=1127, col_offset=24)], None, None, [Name('None', Load(), lineno=1127, col_offset=30)]), [Expr(Str('Return the colormode or set it to 1.0 or 255.\n\n        Optional argument:\n        cmode -- one of the values 1.0 or 255\n\n        r, g, b values of colortriples have to be in range 0..cmode.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.colormode()\n        1.0\n        >>> screen.colormode(255)\n        >>> turtle.pencolor(240,160,80)\n        ', lineno=1140, col_offset=-1), lineno=1140, col_offset=-1), If(Compare(Name('cmode', Load(), lineno=1141, col_offset=11), [Is()], [Name('None', Load(), lineno=1141, col_offset=20)], lineno=1141, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1142, col_offset=19), '_colormode', Load(), lineno=1142, col_offset=19), lineno=1142, col_offset=12)], [], lineno=1141, col_offset=8), If(Compare(Name('cmode', Load(), lineno=1143, col_offset=11), [Eq()], [Num(1.0, lineno=1143, col_offset=20)], lineno=1143, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1144, col_offset=12), '_colormode', Store(), lineno=1144, col_offset=12)], Call(Name('float', Load(), lineno=1144, col_offset=30), [Name('cmode', Load(), lineno=1144, col_offset=36)], [], None, None, lineno=1144, col_offset=30), lineno=1144, col_offset=12)], [If(Compare(Name('cmode', Load(), lineno=1145, col_offset=13), [Eq()], [Num(255, lineno=1145, col_offset=22)], lineno=1145, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=1146, col_offset=12), '_colormode', Store(), lineno=1146, col_offset=12)], Call(Name('int', Load(), lineno=1146, col_offset=30), [Name('cmode', Load(), lineno=1146, col_offset=34)], [], None, None, lineno=1146, col_offset=30), lineno=1146, col_offset=12)], [], lineno=1145, col_offset=13)], lineno=1143, col_offset=8)], [], lineno=1127, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=1148, col_offset=14)], None, None, []), [Expr(Str('Reset all Turtles on the Screen to their initial state.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.reset()\n        ', lineno=1155, col_offset=-1), lineno=1155, col_offset=-1), For(Name('turtle', Store(), lineno=1156, col_offset=12), Attribute(Name('self', Load(), lineno=1156, col_offset=22), '_turtles', Load(), lineno=1156, col_offset=22), [Expr(Call(Attribute(Name('turtle', Load(), lineno=1157, col_offset=12), '_setmode', Load(), lineno=1157, col_offset=12), [Attribute(Name('self', Load(), lineno=1157, col_offset=28), '_mode', Load(), lineno=1157, col_offset=28)], [], None, None, lineno=1157, col_offset=12), lineno=1157, col_offset=12), Expr(Call(Attribute(Name('turtle', Load(), lineno=1158, col_offset=12), 'reset', Load(), lineno=1158, col_offset=12), [], [], None, None, lineno=1158, col_offset=12), lineno=1158, col_offset=12)], [], lineno=1156, col_offset=8)], [], lineno=1148, col_offset=4), FunctionDef('turtles', arguments([Name('self', Param(), lineno=1160, col_offset=16)], None, None, []), [Expr(Str('Return the list of turtles on the screen.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.turtles()\n        [<turtle.Turtle object at 0x00E11FB0>]\n        ', lineno=1166, col_offset=-1), lineno=1166, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=1167, col_offset=15), '_turtles', Load(), lineno=1167, col_offset=15), lineno=1167, col_offset=8)], [], lineno=1160, col_offset=4), FunctionDef('bgcolor', arguments([Name('self', Param(), lineno=1169, col_offset=16)], 'args', None, []), [Expr(Str('Set or return backgroundcolor of the TurtleScreen.\n\n        Arguments (if given): a color string or three numbers\n        in the range 0..colormode or a 3-tuple of such numbers.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bgcolor("orange")\n        >>> screen.bgcolor()\n        \'orange\'\n        >>> screen.bgcolor(0.5,0,0.5)\n        >>> screen.bgcolor()\n        \'#800080\'\n        ', lineno=1182, col_offset=-1), lineno=1182, col_offset=-1), If(Name('args', Load(), lineno=1183, col_offset=11), [Assign([Name('color', Store(), lineno=1184, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1184, col_offset=20), '_colorstr', Load(), lineno=1184, col_offset=20), [Name('args', Load(), lineno=1184, col_offset=35)], [], None, None, lineno=1184, col_offset=20), lineno=1184, col_offset=12)], [Assign([Name('color', Store(), lineno=1186, col_offset=12)], Name('None', Load(), lineno=1186, col_offset=20), lineno=1186, col_offset=12)], lineno=1183, col_offset=8), Assign([Name('color', Store(), lineno=1187, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1187, col_offset=16), '_bgcolor', Load(), lineno=1187, col_offset=16), [Name('color', Load(), lineno=1187, col_offset=30)], [], None, None, lineno=1187, col_offset=16), lineno=1187, col_offset=8), If(Compare(Name('color', Load(), lineno=1188, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1188, col_offset=24)], lineno=1188, col_offset=11), [Assign([Name('color', Store(), lineno=1189, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1189, col_offset=20), '_color', Load(), lineno=1189, col_offset=20), [Name('color', Load(), lineno=1189, col_offset=32)], [], None, None, lineno=1189, col_offset=20), lineno=1189, col_offset=12)], [], lineno=1188, col_offset=8), Return(Name('color', Load(), lineno=1190, col_offset=15), lineno=1190, col_offset=8)], [], lineno=1169, col_offset=4), FunctionDef('tracer', arguments([Name('self', Param(), lineno=1192, col_offset=15), Name('n', Param(), lineno=1192, col_offset=21), Name('delay', Param(), lineno=1192, col_offset=29)], None, None, [Name('None', Load(), lineno=1192, col_offset=23), Name('None', Load(), lineno=1192, col_offset=35)]), [Expr(Str('Turns turtle animation on/off and set delay for update drawings.\n\n        Optional arguments:\n        n -- nonnegative  integer\n        delay -- nonnegative  integer\n\n        If n is given, only each n-th regular screen update is really performed.\n        (Can be used to accelerate the drawing of complex graphics.)\n        Second arguments sets delay value (see RawTurtle.delay())\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.tracer(8, 25)\n        >>> dist = 2\n        >>> for i in range(200):\n                fd(dist)\n                rt(90)\n                dist += 2\n        ', lineno=1210, col_offset=-1), lineno=1210, col_offset=-1), If(Compare(Name('n', Load(), lineno=1211, col_offset=11), [Is()], [Name('None', Load(), lineno=1211, col_offset=16)], lineno=1211, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1212, col_offset=19), '_tracing', Load(), lineno=1212, col_offset=19), lineno=1212, col_offset=12)], [], lineno=1211, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1213, col_offset=8), '_tracing', Store(), lineno=1213, col_offset=8)], Call(Name('int', Load(), lineno=1213, col_offset=24), [Name('n', Load(), lineno=1213, col_offset=28)], [], None, None, lineno=1213, col_offset=24), lineno=1213, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1214, col_offset=8), '_updatecounter', Store(), lineno=1214, col_offset=8)], Num(0, lineno=1214, col_offset=30), lineno=1214, col_offset=8), If(Compare(Name('delay', Load(), lineno=1215, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1215, col_offset=24)], lineno=1215, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1216, col_offset=12), '_delayvalue', Store(), lineno=1216, col_offset=12)], Call(Name('int', Load(), lineno=1216, col_offset=31), [Name('delay', Load(), lineno=1216, col_offset=35)], [], None, None, lineno=1216, col_offset=31), lineno=1216, col_offset=12)], [], lineno=1215, col_offset=8), If(Attribute(Name('self', Load(), lineno=1217, col_offset=11), '_tracing', Load(), lineno=1217, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1218, col_offset=12), 'update', Load(), lineno=1218, col_offset=12), [], [], None, None, lineno=1218, col_offset=12), lineno=1218, col_offset=12)], [], lineno=1217, col_offset=8)], [], lineno=1192, col_offset=4), FunctionDef('delay', arguments([Name('self', Param(), lineno=1220, col_offset=14), Name('delay', Param(), lineno=1220, col_offset=20)], None, None, [Name('None', Load(), lineno=1220, col_offset=26)]), [Expr(Str(' Return or set the drawing delay in milliseconds.\n\n        Optional argument:\n        delay -- positive integer\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.delay(15)\n        >>> screen.delay()\n        15\n        ', lineno=1230, col_offset=-1), lineno=1230, col_offset=-1), If(Compare(Name('delay', Load(), lineno=1231, col_offset=11), [Is()], [Name('None', Load(), lineno=1231, col_offset=20)], lineno=1231, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1232, col_offset=19), '_delayvalue', Load(), lineno=1232, col_offset=19), lineno=1232, col_offset=12)], [], lineno=1231, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1233, col_offset=8), '_delayvalue', Store(), lineno=1233, col_offset=8)], Call(Name('int', Load(), lineno=1233, col_offset=27), [Name('delay', Load(), lineno=1233, col_offset=31)], [], None, None, lineno=1233, col_offset=27), lineno=1233, col_offset=8)], [], lineno=1220, col_offset=4), FunctionDef('_incrementudc', arguments([Name('self', Param(), lineno=1235, col_offset=22)], None, None, []), [Expr(Str('Increment upadate counter.', lineno=1236, col_offset=8), lineno=1236, col_offset=8), If(UnaryOp(Not(), Attribute(Name('TurtleScreen', Load(), lineno=1237, col_offset=15), '_RUNNING', Load(), lineno=1237, col_offset=15), lineno=1237, col_offset=11), [Assign([Attribute(Name('TurtleScreen', Load(), lineno=1238, col_offset=12), '_RUNNNING', Store(), lineno=1238, col_offset=12)], Name('True', Load(), lineno=1238, col_offset=37), lineno=1238, col_offset=12), Raise(Name('Terminator', Load(), lineno=1239, col_offset=18), None, None, lineno=1239, col_offset=12)], [], lineno=1237, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1240, col_offset=11), '_tracing', Load(), lineno=1240, col_offset=11), [Gt()], [Num(0, lineno=1240, col_offset=27)], lineno=1240, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=1241, col_offset=12), '_updatecounter', Store(), lineno=1241, col_offset=12), Add(), Num(1, lineno=1241, col_offset=35), lineno=1241, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=1242, col_offset=12), '_updatecounter', Store(), lineno=1242, col_offset=12), Mod(), Attribute(Name('self', Load(), lineno=1242, col_offset=35), '_tracing', Load(), lineno=1242, col_offset=35), lineno=1242, col_offset=12)], [], lineno=1240, col_offset=8)], [], lineno=1235, col_offset=4), FunctionDef('update', arguments([Name('self', Param(), lineno=1244, col_offset=15)], None, None, []), [Expr(Str('Perform a TurtleScreen update.\n        ', lineno=1246, col_offset=-1), lineno=1246, col_offset=-1), Assign([Name('tracing', Store(), lineno=1247, col_offset=8)], Attribute(Name('self', Load(), lineno=1247, col_offset=18), '_tracing', Load(), lineno=1247, col_offset=18), lineno=1247, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1248, col_offset=8), '_tracing', Store(), lineno=1248, col_offset=8)], Name('True', Load(), lineno=1248, col_offset=24), lineno=1248, col_offset=8), For(Name('t', Store(), lineno=1249, col_offset=12), Call(Attribute(Name('self', Load(), lineno=1249, col_offset=17), 'turtles', Load(), lineno=1249, col_offset=17), [], [], None, None, lineno=1249, col_offset=17), [Expr(Call(Attribute(Name('t', Load(), lineno=1250, col_offset=12), '_update_data', Load(), lineno=1250, col_offset=12), [], [], None, None, lineno=1250, col_offset=12), lineno=1250, col_offset=12), Expr(Call(Attribute(Name('t', Load(), lineno=1251, col_offset=12), '_drawturtle', Load(), lineno=1251, col_offset=12), [], [], None, None, lineno=1251, col_offset=12), lineno=1251, col_offset=12)], [], lineno=1249, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1252, col_offset=8), '_tracing', Store(), lineno=1252, col_offset=8)], Name('tracing', Load(), lineno=1252, col_offset=24), lineno=1252, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1253, col_offset=8), '_update', Load(), lineno=1253, col_offset=8), [], [], None, None, lineno=1253, col_offset=8), lineno=1253, col_offset=8)], [], lineno=1244, col_offset=4), FunctionDef('window_width', arguments([Name('self', Param(), lineno=1255, col_offset=21)], None, None, []), [Expr(Str(' Return the width of the turtle window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_width()\n        640\n        ', lineno=1261, col_offset=-1), lineno=1261, col_offset=-1), Return(Subscript(Call(Attribute(Name('self', Load(), lineno=1262, col_offset=15), '_window_size', Load(), lineno=1262, col_offset=15), [], [], None, None, lineno=1262, col_offset=15), Index(Num(0, lineno=1262, col_offset=35)), Load(), lineno=1262, col_offset=15), lineno=1262, col_offset=8)], [], lineno=1255, col_offset=4), FunctionDef('window_height', arguments([Name('self', Param(), lineno=1264, col_offset=22)], None, None, []), [Expr(Str(' Return the height of the turtle window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_height()\n        480\n        ', lineno=1270, col_offset=-1), lineno=1270, col_offset=-1), Return(Subscript(Call(Attribute(Name('self', Load(), lineno=1271, col_offset=15), '_window_size', Load(), lineno=1271, col_offset=15), [], [], None, None, lineno=1271, col_offset=15), Index(Num(1, lineno=1271, col_offset=35)), Load(), lineno=1271, col_offset=15), lineno=1271, col_offset=8)], [], lineno=1264, col_offset=4), FunctionDef('getcanvas', arguments([Name('self', Param(), lineno=1273, col_offset=18)], None, None, []), [Expr(Str('Return the Canvas of this TurtleScreen.\n\n        No argument.\n\n        Example (for a Screen instance named screen):\n        >>> cv = screen.getcanvas()\n        >>> cv\n        <turtle.ScrolledCanvas instance at 0x010742D8>\n        ', lineno=1282, col_offset=-1), lineno=1282, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=1283, col_offset=15), 'cv', Load(), lineno=1283, col_offset=15), lineno=1283, col_offset=8)], [], lineno=1273, col_offset=4), FunctionDef('getshapes', arguments([Name('self', Param(), lineno=1285, col_offset=18)], None, None, []), [Expr(Str("Return a list of names of all currently available turtle shapes.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.getshapes()\n        ['arrow', 'blank', 'circle', ... , 'turtle']\n        ", lineno=1293, col_offset=-1), lineno=1293, col_offset=-1), Return(Call(Name('sorted', Load(), lineno=1294, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1294, col_offset=22), '_shapes', Load(), lineno=1294, col_offset=22), 'keys', Load(), lineno=1294, col_offset=22), [], [], None, None, lineno=1294, col_offset=22)], [], None, None, lineno=1294, col_offset=15), lineno=1294, col_offset=8)], [], lineno=1285, col_offset=4), FunctionDef('onclick', arguments([Name('self', Param(), lineno=1296, col_offset=16), Name('fun', Param(), lineno=1296, col_offset=22), Name('btn', Param(), lineno=1296, col_offset=27), Name('add', Param(), lineno=1296, col_offset=34)], None, None, [Num(1, lineno=1296, col_offset=31), Name('None', Load(), lineno=1296, col_offset=38)]), [Expr(Str('Bind fun to mouse-click event on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, the coordinates of the\n               clicked point on the canvas.\n        num -- the number of the mouse-button, defaults to 1\n\n        Example (for a TurtleScreen instance named screen\n        and a Turtle instance named turtle):\n\n        >>> screen.onclick(turtle.goto)\n\n        ### Subsequently clicking into the TurtleScreen will\n        ### make the turtle move to the clicked point.\n        >>> screen.onclick(None)\n\n        ### event-binding will be removed\n        ', lineno=1314, col_offset=-1), lineno=1314, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1315, col_offset=8), '_onscreenclick', Load(), lineno=1315, col_offset=8), [Name('fun', Load(), lineno=1315, col_offset=28), Name('btn', Load(), lineno=1315, col_offset=33), Name('add', Load(), lineno=1315, col_offset=38)], [], None, None, lineno=1315, col_offset=8), lineno=1315, col_offset=8)], [], lineno=1296, col_offset=4), FunctionDef('onkey', arguments([Name('self', Param(), lineno=1317, col_offset=14), Name('fun', Param(), lineno=1317, col_offset=20), Name('key', Param(), lineno=1317, col_offset=25)], None, None, []), [Expr(Str('Bind fun to key-release event of key.\n\n        Arguments:\n        fun -- a function with no arguments\n        key -- a string: key (e.g. "a") or key-symbol (e.g. "space")\n\n        In order to be able to register key-events, TurtleScreen\n        must have focus. (See method listen.)\n\n        Example (for a TurtleScreen instance named screen\n        and a Turtle instance named turtle):\n\n        >>> def f():\n                fd(50)\n                lt(60)\n\n\n        >>> screen.onkey(f, "Up")\n        >>> screen.listen()\n\n        ### Subsequently the turtle can be moved by\n        ### repeatedly pressing the up-arrow key,\n        ### consequently drawing a hexagon\n        ', lineno=1341, col_offset=-1), lineno=1341, col_offset=-1), If(Compare(Name('fun', Load(), lineno=1342, col_offset=11), [Is()], [Name('None', Load(), lineno=1342, col_offset=18)], lineno=1342, col_offset=11), [If(Compare(Name('key', Load(), lineno=1343, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=1343, col_offset=22), '_keys', Load(), lineno=1343, col_offset=22)], lineno=1343, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1344, col_offset=16), '_keys', Load(), lineno=1344, col_offset=16), 'remove', Load(), lineno=1344, col_offset=16), [Name('key', Load(), lineno=1344, col_offset=34)], [], None, None, lineno=1344, col_offset=16), lineno=1344, col_offset=16)], [], lineno=1343, col_offset=12)], [If(Compare(Name('key', Load(), lineno=1345, col_offset=13), [NotIn()], [Attribute(Name('self', Load(), lineno=1345, col_offset=24), '_keys', Load(), lineno=1345, col_offset=24)], lineno=1345, col_offset=13), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1346, col_offset=12), '_keys', Load(), lineno=1346, col_offset=12), 'append', Load(), lineno=1346, col_offset=12), [Name('key', Load(), lineno=1346, col_offset=30)], [], None, None, lineno=1346, col_offset=12), lineno=1346, col_offset=12)], [], lineno=1345, col_offset=13)], lineno=1342, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1347, col_offset=8), '_onkey', Load(), lineno=1347, col_offset=8), [Name('fun', Load(), lineno=1347, col_offset=20), Name('key', Load(), lineno=1347, col_offset=25)], [], None, None, lineno=1347, col_offset=8), lineno=1347, col_offset=8)], [], lineno=1317, col_offset=4), FunctionDef('listen', arguments([Name('self', Param(), lineno=1349, col_offset=15), Name('xdummy', Param(), lineno=1349, col_offset=21), Name('ydummy', Param(), lineno=1349, col_offset=34)], None, None, [Name('None', Load(), lineno=1349, col_offset=28), Name('None', Load(), lineno=1349, col_offset=41)]), [Expr(Str('Set focus on TurtleScreen (in order to collect key-events)\n\n        No arguments.\n        Dummy arguments are provided in order\n        to be able to pass listen to the onclick method.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.listen()\n        ', lineno=1358, col_offset=-1), lineno=1358, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1359, col_offset=8), '_listen', Load(), lineno=1359, col_offset=8), [], [], None, None, lineno=1359, col_offset=8), lineno=1359, col_offset=8)], [], lineno=1349, col_offset=4), FunctionDef('ontimer', arguments([Name('self', Param(), lineno=1361, col_offset=16), Name('fun', Param(), lineno=1361, col_offset=22), Name('t', Param(), lineno=1361, col_offset=27)], None, None, [Num(0, lineno=1361, col_offset=29)]), [Expr(Str('Install a timer, which calls fun after t milliseconds.\n\n        Arguments:\n        fun -- a function with no arguments.\n        t -- a number >= 0\n\n        Example (for a TurtleScreen instance named screen):\n\n        >>> running = True\n        >>> def f():\n                if running:\n                        fd(50)\n                        lt(60)\n                        screen.ontimer(f, 250)\n\n        >>> f()   ### makes the turtle marching around\n        >>> running = False\n        ', lineno=1379, col_offset=-1), lineno=1379, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1380, col_offset=8), '_ontimer', Load(), lineno=1380, col_offset=8), [Name('fun', Load(), lineno=1380, col_offset=22), Name('t', Load(), lineno=1380, col_offset=27)], [], None, None, lineno=1380, col_offset=8), lineno=1380, col_offset=8)], [], lineno=1361, col_offset=4), FunctionDef('bgpic', arguments([Name('self', Param(), lineno=1382, col_offset=14), Name('picname', Param(), lineno=1382, col_offset=20)], None, None, [Name('None', Load(), lineno=1382, col_offset=28)]), [Expr(Str('Set background image or return name of current backgroundimage.\n\n        Optional argument:\n        picname -- a string, name of a gif-file or "nopic".\n\n        If picname is a filename, set the corresponing image as background.\n        If picname is "nopic", delete backgroundimage, if present.\n        If picname is None, return the filename of the current backgroundimage.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bgpic()\n        \'nopic\'\n        >>> screen.bgpic("landscape.gif")\n        >>> screen.bgpic()\n        \'landscape.gif\'\n        ', lineno=1398, col_offset=-1), lineno=1398, col_offset=-1), If(Compare(Name('picname', Load(), lineno=1399, col_offset=11), [Is()], [Name('None', Load(), lineno=1399, col_offset=22)], lineno=1399, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1400, col_offset=19), '_bgpicname', Load(), lineno=1400, col_offset=19), lineno=1400, col_offset=12)], [], lineno=1399, col_offset=8), If(Compare(Name('picname', Load(), lineno=1401, col_offset=11), [NotIn()], [Attribute(Name('self', Load(), lineno=1401, col_offset=26), '_bgpics', Load(), lineno=1401, col_offset=26)], lineno=1401, col_offset=11), [Assign([Subscript(Attribute(Name('self', Load(), lineno=1402, col_offset=12), '_bgpics', Load(), lineno=1402, col_offset=12), Index(Name('picname', Load(), lineno=1402, col_offset=25)), Store(), lineno=1402, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1402, col_offset=36), '_image', Load(), lineno=1402, col_offset=36), [Name('picname', Load(), lineno=1402, col_offset=48)], [], None, None, lineno=1402, col_offset=36), lineno=1402, col_offset=12)], [], lineno=1401, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1403, col_offset=8), '_setbgpic', Load(), lineno=1403, col_offset=8), [Attribute(Name('self', Load(), lineno=1403, col_offset=23), '_bgpic', Load(), lineno=1403, col_offset=23), Subscript(Attribute(Name('self', Load(), lineno=1403, col_offset=36), '_bgpics', Load(), lineno=1403, col_offset=36), Index(Name('picname', Load(), lineno=1403, col_offset=49)), Load(), lineno=1403, col_offset=36)], [], None, None, lineno=1403, col_offset=8), lineno=1403, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1404, col_offset=8), '_bgpicname', Store(), lineno=1404, col_offset=8)], Name('picname', Load(), lineno=1404, col_offset=26), lineno=1404, col_offset=8)], [], lineno=1382, col_offset=4), FunctionDef('screensize', arguments([Name('self', Param(), lineno=1406, col_offset=19), Name('canvwidth', Param(), lineno=1406, col_offset=25), Name('canvheight', Param(), lineno=1406, col_offset=41), Name('bg', Param(), lineno=1406, col_offset=58)], None, None, [Name('None', Load(), lineno=1406, col_offset=35), Name('None', Load(), lineno=1406, col_offset=52), Name('None', Load(), lineno=1406, col_offset=61)]), [Expr(Str('Resize the canvas the turtles are drawing on.\n\n        Optional arguments:\n        canvwidth -- positive integer, new width of canvas in pixels\n        canvheight --  positive integer, new height of canvas in pixels\n        bg -- colorstring or color-tupel, new backgroundcolor\n        If no arguments are given, return current (canvaswidth, canvasheight)\n\n        Do not alter the drawing window. To observe hidden parts of\n        the canvas use the scrollbars. (Can make visible those parts\n        of a drawing, which were outside the canvas before!)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.screensize(2000,1500)\n            ### e. g. to search for an erroneously escaped turtle ;-)\n        ', lineno=1422, col_offset=-1), lineno=1422, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1423, col_offset=15), '_resize', Load(), lineno=1423, col_offset=15), [Name('canvwidth', Load(), lineno=1423, col_offset=28), Name('canvheight', Load(), lineno=1423, col_offset=39), Name('bg', Load(), lineno=1423, col_offset=51)], [], None, None, lineno=1423, col_offset=15), lineno=1423, col_offset=8)], [], lineno=1406, col_offset=4), Assign([Name('onscreenclick', Store(), lineno=1425, col_offset=4)], Name('onclick', Load(), lineno=1425, col_offset=20), lineno=1425, col_offset=4), Assign([Name('resetscreen', Store(), lineno=1426, col_offset=4)], Name('reset', Load(), lineno=1426, col_offset=18), lineno=1426, col_offset=4), Assign([Name('clearscreen', Store(), lineno=1427, col_offset=4)], Name('clear', Load(), lineno=1427, col_offset=18), lineno=1427, col_offset=4), Assign([Name('addshape', Store(), lineno=1428, col_offset=4)], Name('register_shape', Load(), lineno=1428, col_offset=15), lineno=1428, col_offset=4)], [], lineno=910, col_offset=0), ClassDef('TNavigator', [Name('object', Load(), lineno=1430, col_offset=17)], [Expr(Str('Navigation part of the RawTurtle.\n    Implements methods for turtle movement.\n    ', lineno=1433, col_offset=-1), lineno=1433, col_offset=-1), Assign([Name('START_ORIENTATION', Store(), lineno=1434, col_offset=4)], Dict([Str('standard', lineno=1435, col_offset=8), Str('world', lineno=1436, col_offset=8), Str('logo', lineno=1437, col_offset=8)], [Call(Name('Vec2D', Load(), lineno=1435, col_offset=20), [Num(1.0, lineno=1435, col_offset=26), Num(0.0, lineno=1435, col_offset=31)], [], None, None, lineno=1435, col_offset=20), Call(Name('Vec2D', Load(), lineno=1436, col_offset=20), [Num(1.0, lineno=1436, col_offset=26), Num(0.0, lineno=1436, col_offset=31)], [], None, None, lineno=1436, col_offset=20), Call(Name('Vec2D', Load(), lineno=1437, col_offset=20), [Num(0.0, lineno=1437, col_offset=26), Num(1.0, lineno=1437, col_offset=31)], [], None, None, lineno=1437, col_offset=20)], lineno=1434, col_offset=24), lineno=1434, col_offset=4), Assign([Name('DEFAULT_MODE', Store(), lineno=1438, col_offset=4)], Str('standard', lineno=1438, col_offset=19), lineno=1438, col_offset=4), Assign([Name('DEFAULT_ANGLEOFFSET', Store(), lineno=1439, col_offset=4)], Num(0, lineno=1439, col_offset=26), lineno=1439, col_offset=4), Assign([Name('DEFAULT_ANGLEORIENT', Store(), lineno=1440, col_offset=4)], Num(1, lineno=1440, col_offset=26), lineno=1440, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1442, col_offset=17), Name('mode', Param(), lineno=1442, col_offset=23)], None, None, [Name('DEFAULT_MODE', Load(), lineno=1442, col_offset=28)]), [Assign([Attribute(Name('self', Load(), lineno=1443, col_offset=8), '_angleOffset', Store(), lineno=1443, col_offset=8)], Attribute(Name('self', Load(), lineno=1443, col_offset=28), 'DEFAULT_ANGLEOFFSET', Load(), lineno=1443, col_offset=28), lineno=1443, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1444, col_offset=8), '_angleOrient', Store(), lineno=1444, col_offset=8)], Attribute(Name('self', Load(), lineno=1444, col_offset=28), 'DEFAULT_ANGLEORIENT', Load(), lineno=1444, col_offset=28), lineno=1444, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1445, col_offset=8), '_mode', Store(), lineno=1445, col_offset=8)], Name('mode', Load(), lineno=1445, col_offset=21), lineno=1445, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1446, col_offset=8), 'undobuffer', Store(), lineno=1446, col_offset=8)], Name('None', Load(), lineno=1446, col_offset=26), lineno=1446, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1447, col_offset=8), 'degrees', Load(), lineno=1447, col_offset=8), [], [], None, None, lineno=1447, col_offset=8), lineno=1447, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1448, col_offset=8), '_mode', Store(), lineno=1448, col_offset=8)], Name('None', Load(), lineno=1448, col_offset=21), lineno=1448, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1449, col_offset=8), '_setmode', Load(), lineno=1449, col_offset=8), [Name('mode', Load(), lineno=1449, col_offset=22)], [], None, None, lineno=1449, col_offset=8), lineno=1449, col_offset=8), Expr(Call(Attribute(Name('TNavigator', Load(), lineno=1450, col_offset=8), 'reset', Load(), lineno=1450, col_offset=8), [Name('self', Load(), lineno=1450, col_offset=25)], [], None, None, lineno=1450, col_offset=8), lineno=1450, col_offset=8)], [], lineno=1442, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=1452, col_offset=14)], None, None, []), [Expr(Str('reset turtle to its initial values\n\n        Will be overwritten by parent class\n        ', lineno=1456, col_offset=-1), lineno=1456, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1457, col_offset=8), '_position', Store(), lineno=1457, col_offset=8)], Call(Name('Vec2D', Load(), lineno=1457, col_offset=25), [Num(0.0, lineno=1457, col_offset=31), Num(0.0, lineno=1457, col_offset=36)], [], None, None, lineno=1457, col_offset=25), lineno=1457, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1458, col_offset=8), '_orient', Store(), lineno=1458, col_offset=8)], Subscript(Attribute(Name('TNavigator', Load(), lineno=1458, col_offset=24), 'START_ORIENTATION', Load(), lineno=1458, col_offset=24), Index(Attribute(Name('self', Load(), lineno=1458, col_offset=53), '_mode', Load(), lineno=1458, col_offset=53)), Load(), lineno=1458, col_offset=24), lineno=1458, col_offset=8)], [], lineno=1452, col_offset=4), FunctionDef('_setmode', arguments([Name('self', Param(), lineno=1460, col_offset=17), Name('mode', Param(), lineno=1460, col_offset=23)], None, None, [Name('None', Load(), lineno=1460, col_offset=28)]), [Expr(Str("Set turtle-mode to 'standard', 'world' or 'logo'.\n        ", lineno=1462, col_offset=-1), lineno=1462, col_offset=-1), If(Compare(Name('mode', Load(), lineno=1463, col_offset=11), [Is()], [Name('None', Load(), lineno=1463, col_offset=19)], lineno=1463, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1464, col_offset=19), '_mode', Load(), lineno=1464, col_offset=19), lineno=1464, col_offset=12)], [], lineno=1463, col_offset=8), If(Compare(Name('mode', Load(), lineno=1465, col_offset=11), [NotIn()], [List([Str('standard', lineno=1465, col_offset=24), Str('logo', lineno=1465, col_offset=36), Str('world', lineno=1465, col_offset=44)], Load(), lineno=1465, col_offset=23)], lineno=1465, col_offset=11), [Return(None, lineno=1466, col_offset=12)], [], lineno=1465, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1467, col_offset=8), '_mode', Store(), lineno=1467, col_offset=8)], Name('mode', Load(), lineno=1467, col_offset=21), lineno=1467, col_offset=8), If(Compare(Name('mode', Load(), lineno=1468, col_offset=11), [In()], [List([Str('standard', lineno=1468, col_offset=20), Str('world', lineno=1468, col_offset=32)], Load(), lineno=1468, col_offset=19)], lineno=1468, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1469, col_offset=12), '_angleOffset', Store(), lineno=1469, col_offset=12)], Num(0, lineno=1469, col_offset=32), lineno=1469, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1470, col_offset=12), '_angleOrient', Store(), lineno=1470, col_offset=12)], Num(1, lineno=1470, col_offset=32), lineno=1470, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1472, col_offset=12), '_angleOffset', Store(), lineno=1472, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=1472, col_offset=32), '_fullcircle', Load(), lineno=1472, col_offset=32), Div(), Num(4.0, lineno=1472, col_offset=49), lineno=1472, col_offset=32), lineno=1472, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1473, col_offset=12), '_angleOrient', Store(), lineno=1473, col_offset=12)], Num(-1, lineno=1473, col_offset=33), lineno=1473, col_offset=12)], lineno=1468, col_offset=8)], [], lineno=1460, col_offset=4), FunctionDef('_setDegreesPerAU', arguments([Name('self', Param(), lineno=1475, col_offset=25), Name('fullcircle', Param(), lineno=1475, col_offset=31)], None, None, []), [Expr(Str('Helper function for degrees() and radians()', lineno=1476, col_offset=8), lineno=1476, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1477, col_offset=8), '_fullcircle', Store(), lineno=1477, col_offset=8)], Name('fullcircle', Load(), lineno=1477, col_offset=27), lineno=1477, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1478, col_offset=8), '_degreesPerAU', Store(), lineno=1478, col_offset=8)], BinOp(Num(360, lineno=1478, col_offset=29), Div(), Name('fullcircle', Load(), lineno=1478, col_offset=33), lineno=1478, col_offset=29), lineno=1478, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1479, col_offset=11), '_mode', Load(), lineno=1479, col_offset=11), [Eq()], [Str('standard', lineno=1479, col_offset=25)], lineno=1479, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1480, col_offset=12), '_angleOffset', Store(), lineno=1480, col_offset=12)], Num(0, lineno=1480, col_offset=32), lineno=1480, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1482, col_offset=12), '_angleOffset', Store(), lineno=1482, col_offset=12)], BinOp(Name('fullcircle', Load(), lineno=1482, col_offset=32), Div(), Num(4.0, lineno=1482, col_offset=43), lineno=1482, col_offset=32), lineno=1482, col_offset=12)], lineno=1479, col_offset=8)], [], lineno=1475, col_offset=4), FunctionDef('degrees', arguments([Name('self', Param(), lineno=1484, col_offset=16), Name('fullcircle', Param(), lineno=1484, col_offset=22)], None, None, [Num(360.0, lineno=1484, col_offset=33)]), [Expr(Str(" Set angle measurement units to degrees.\n\n        Optional argument:\n        fullcircle -  a number\n\n        Set angle measurement units, i. e. set number\n        of 'degrees' for a full circle. Dafault value is\n        360 degrees.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.left(90)\n        >>> turtle.heading()\n        90\n\n        Change angle measurement unit to grad (also known as gon,\n        grade, or gradian and equals 1/100-th of the right angle.)\n        >>> turtle.degrees(400.0)\n        >>> turtle.heading()\n        100\n\n        ", lineno=1505, col_offset=-1), lineno=1505, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1506, col_offset=8), '_setDegreesPerAU', Load(), lineno=1506, col_offset=8), [Name('fullcircle', Load(), lineno=1506, col_offset=30)], [], None, None, lineno=1506, col_offset=8), lineno=1506, col_offset=8)], [], lineno=1484, col_offset=4), FunctionDef('radians', arguments([Name('self', Param(), lineno=1508, col_offset=16)], None, None, []), [Expr(Str(' Set the angle measurement units to radians.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        90\n        >>> turtle.radians()\n        >>> turtle.heading()\n        1.5707963267948966\n        ', lineno=1519, col_offset=-1), lineno=1519, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1520, col_offset=8), '_setDegreesPerAU', Load(), lineno=1520, col_offset=8), [BinOp(Num(2, lineno=1520, col_offset=30), Mult(), Attribute(Name('math', Load(), lineno=1520, col_offset=32), 'pi', Load(), lineno=1520, col_offset=32), lineno=1520, col_offset=30)], [], None, None, lineno=1520, col_offset=8), lineno=1520, col_offset=8)], [], lineno=1508, col_offset=4), FunctionDef('_go', arguments([Name('self', Param(), lineno=1522, col_offset=12), Name('distance', Param(), lineno=1522, col_offset=18)], None, None, []), [Expr(Str('move turtle forward by specified distance', lineno=1523, col_offset=8), lineno=1523, col_offset=8), Assign([Name('ende', Store(), lineno=1524, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1524, col_offset=15), '_position', Load(), lineno=1524, col_offset=15), Add(), BinOp(Attribute(Name('self', Load(), lineno=1524, col_offset=32), '_orient', Load(), lineno=1524, col_offset=32), Mult(), Name('distance', Load(), lineno=1524, col_offset=47), lineno=1524, col_offset=32), lineno=1524, col_offset=15), lineno=1524, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1525, col_offset=8), '_goto', Load(), lineno=1525, col_offset=8), [Name('ende', Load(), lineno=1525, col_offset=19)], [], None, None, lineno=1525, col_offset=8), lineno=1525, col_offset=8)], [], lineno=1522, col_offset=4), FunctionDef('_rotate', arguments([Name('self', Param(), lineno=1527, col_offset=16), Name('angle', Param(), lineno=1527, col_offset=22)], None, None, []), [Expr(Str('Turn turtle counterclockwise by specified angle if angle > 0.', lineno=1528, col_offset=8), lineno=1528, col_offset=8), AugAssign(Name('angle', Store(), lineno=1529, col_offset=8), Mult(), Attribute(Name('self', Load(), lineno=1529, col_offset=17), '_degreesPerAU', Load(), lineno=1529, col_offset=17), lineno=1529, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1530, col_offset=8), '_orient', Store(), lineno=1530, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1530, col_offset=23), '_orient', Load(), lineno=1530, col_offset=23), 'rotate', Load(), lineno=1530, col_offset=23), [Name('angle', Load(), lineno=1530, col_offset=43)], [], None, None, lineno=1530, col_offset=23), lineno=1530, col_offset=8)], [], lineno=1527, col_offset=4), FunctionDef('_goto', arguments([Name('self', Param(), lineno=1532, col_offset=14), Name('end', Param(), lineno=1532, col_offset=20)], None, None, []), [Expr(Str('move turtle to position end.', lineno=1533, col_offset=8), lineno=1533, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1534, col_offset=8), '_position', Store(), lineno=1534, col_offset=8)], Name('end', Load(), lineno=1534, col_offset=25), lineno=1534, col_offset=8)], [], lineno=1532, col_offset=4), FunctionDef('forward', arguments([Name('self', Param(), lineno=1536, col_offset=16), Name('distance', Param(), lineno=1536, col_offset=22)], None, None, []), [Expr(Str('Move the turtle forward by the specified distance.\n\n        Aliases: forward | fd\n\n        Argument:\n        distance -- a number (integer or float)\n\n        Move the turtle forward by the specified distance, in the direction\n        the turtle is headed.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 0.00)\n        >>> turtle.forward(25)\n        >>> turtle.position()\n        (25.00,0.00)\n        >>> turtle.forward(-75)\n        >>> turtle.position()\n        (-50.00,0.00)\n        ', lineno=1556, col_offset=-1), lineno=1556, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1557, col_offset=8), '_go', Load(), lineno=1557, col_offset=8), [Name('distance', Load(), lineno=1557, col_offset=17)], [], None, None, lineno=1557, col_offset=8), lineno=1557, col_offset=8)], [], lineno=1536, col_offset=4), FunctionDef('back', arguments([Name('self', Param(), lineno=1559, col_offset=13), Name('distance', Param(), lineno=1559, col_offset=19)], None, None, []), [Expr(Str("Move the turtle backward by distance.\n\n        Aliases: back | backward | bk\n\n        Argument:\n        distance -- a number\n\n        Move the turtle backward by distance ,opposite to the direction the\n        turtle is headed. Do not change the turtle's heading.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 0.00)\n        >>> turtle.backward(30)\n        >>> turtle.position()\n        (-30.00, 0.00)\n        ", lineno=1576, col_offset=-1), lineno=1576, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1577, col_offset=8), '_go', Load(), lineno=1577, col_offset=8), [UnaryOp(USub(), Name('distance', Load(), lineno=1577, col_offset=18), lineno=1577, col_offset=17)], [], None, None, lineno=1577, col_offset=8), lineno=1577, col_offset=8)], [], lineno=1559, col_offset=4), FunctionDef('right', arguments([Name('self', Param(), lineno=1579, col_offset=14), Name('angle', Param(), lineno=1579, col_offset=20)], None, None, []), [Expr(Str('Turn turtle right by angle units.\n\n        Aliases: right | rt\n\n        Argument:\n        angle -- a number (integer or float)\n\n        Turn turtle right by angle units. (Units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n        Angle orientation depends on mode. (See this.)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        22.0\n        >>> turtle.right(45)\n        >>> turtle.heading()\n        337.0\n        ', lineno=1597, col_offset=-1), lineno=1597, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1598, col_offset=8), '_rotate', Load(), lineno=1598, col_offset=8), [UnaryOp(USub(), Name('angle', Load(), lineno=1598, col_offset=22), lineno=1598, col_offset=21)], [], None, None, lineno=1598, col_offset=8), lineno=1598, col_offset=8)], [], lineno=1579, col_offset=4), FunctionDef('left', arguments([Name('self', Param(), lineno=1600, col_offset=13), Name('angle', Param(), lineno=1600, col_offset=19)], None, None, []), [Expr(Str('Turn turtle left by angle units.\n\n        Aliases: left | lt\n\n        Argument:\n        angle -- a number (integer or float)\n\n        Turn turtle left by angle units. (Units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n        Angle orientation depends on mode. (See this.)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        22.0\n        >>> turtle.left(45)\n        >>> turtle.heading()\n        67.0\n        ', lineno=1618, col_offset=-1), lineno=1618, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1619, col_offset=8), '_rotate', Load(), lineno=1619, col_offset=8), [Name('angle', Load(), lineno=1619, col_offset=21)], [], None, None, lineno=1619, col_offset=8), lineno=1619, col_offset=8)], [], lineno=1600, col_offset=4), FunctionDef('pos', arguments([Name('self', Param(), lineno=1621, col_offset=12)], None, None, []), [Expr(Str("Return the turtle's current location (x,y), as a Vec2D-vector.\n\n        Aliases: pos | position\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (0.00, 240.00)\n        ", lineno=1631, col_offset=-1), lineno=1631, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=1632, col_offset=15), '_position', Load(), lineno=1632, col_offset=15), lineno=1632, col_offset=8)], [], lineno=1621, col_offset=4), FunctionDef('xcor', arguments([Name('self', Param(), lineno=1634, col_offset=13)], None, None, []), [Expr(Str(" Return the turtle's x coordinate.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> reset()\n        >>> turtle.left(60)\n        >>> turtle.forward(100)\n        >>> print turtle.xcor()\n        50.0\n        ", lineno=1645, col_offset=-1), lineno=1645, col_offset=-1), Return(Subscript(Attribute(Name('self', Load(), lineno=1646, col_offset=15), '_position', Load(), lineno=1646, col_offset=15), Index(Num(0, lineno=1646, col_offset=30)), Load(), lineno=1646, col_offset=15), lineno=1646, col_offset=8)], [], lineno=1634, col_offset=4), FunctionDef('ycor', arguments([Name('self', Param(), lineno=1648, col_offset=13)], None, None, []), [Expr(Str(" Return the turtle's y coordinate\n        ---\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> reset()\n        >>> turtle.left(60)\n        >>> turtle.forward(100)\n        >>> print turtle.ycor()\n        86.6025403784\n        ", lineno=1659, col_offset=-1), lineno=1659, col_offset=-1), Return(Subscript(Attribute(Name('self', Load(), lineno=1660, col_offset=15), '_position', Load(), lineno=1660, col_offset=15), Index(Num(1, lineno=1660, col_offset=30)), Load(), lineno=1660, col_offset=15), lineno=1660, col_offset=8)], [], lineno=1648, col_offset=4), FunctionDef('goto', arguments([Name('self', Param(), lineno=1663, col_offset=13), Name('x', Param(), lineno=1663, col_offset=19), Name('y', Param(), lineno=1663, col_offset=22)], None, None, [Name('None', Load(), lineno=1663, col_offset=24)]), [Expr(Str("Move turtle to an absolute position.\n\n        Aliases: setpos | setposition | goto:\n\n        Arguments:\n        x -- a number      or     a pair/vector of numbers\n        y -- a number             None\n\n        call: goto(x, y)         # two coordinates\n        --or: goto((x, y))       # a pair (tuple) of coordinates\n        --or: goto(vec)          # e.g. as returned by pos()\n\n        Move turtle to an absolute position. If the pen is down,\n        a line will be drawn. The turtle's orientation does not change.\n\n        Example (for a Turtle instance named turtle):\n        >>> tp = turtle.pos()\n        >>> tp\n        (0.00, 0.00)\n        >>> turtle.setpos(60,30)\n        >>> turtle.pos()\n        (60.00,30.00)\n        >>> turtle.setpos((20,80))\n        >>> turtle.pos()\n        (20.00,80.00)\n        >>> turtle.setpos(tp)\n        >>> turtle.pos()\n        (0.00,0.00)\n        ", lineno=1692, col_offset=-1), lineno=1692, col_offset=-1), If(Compare(Name('y', Load(), lineno=1693, col_offset=11), [Is()], [Name('None', Load(), lineno=1693, col_offset=16)], lineno=1693, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1694, col_offset=12), '_goto', Load(), lineno=1694, col_offset=12), [Call(Name('Vec2D', Load(), lineno=1694, col_offset=23), [], [], Name('x', Load(), lineno=1694, col_offset=30), None, lineno=1694, col_offset=23)], [], None, None, lineno=1694, col_offset=12), lineno=1694, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=1696, col_offset=12), '_goto', Load(), lineno=1696, col_offset=12), [Call(Name('Vec2D', Load(), lineno=1696, col_offset=23), [Name('x', Load(), lineno=1696, col_offset=29), Name('y', Load(), lineno=1696, col_offset=32)], [], None, None, lineno=1696, col_offset=23)], [], None, None, lineno=1696, col_offset=12), lineno=1696, col_offset=12)], lineno=1693, col_offset=8)], [], lineno=1663, col_offset=4), FunctionDef('home', arguments([Name('self', Param(), lineno=1698, col_offset=13)], None, None, []), [Expr(Str('Move turtle to the origin - coordinates (0,0).\n\n        No arguments.\n\n        Move turtle to the origin - coordinates (0,0) and set its\n        heading to its start-orientation (which depends on mode).\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.home()\n        ', lineno=1708, col_offset=-1), lineno=1708, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1709, col_offset=8), 'goto', Load(), lineno=1709, col_offset=8), [Num(0, lineno=1709, col_offset=18), Num(0, lineno=1709, col_offset=21)], [], None, None, lineno=1709, col_offset=8), lineno=1709, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1710, col_offset=8), 'setheading', Load(), lineno=1710, col_offset=8), [Num(0, lineno=1710, col_offset=24)], [], None, None, lineno=1710, col_offset=8), lineno=1710, col_offset=8)], [], lineno=1698, col_offset=4), FunctionDef('setx', arguments([Name('self', Param(), lineno=1712, col_offset=13), Name('x', Param(), lineno=1712, col_offset=19)], None, None, []), [Expr(Str("Set the turtle's first coordinate to x\n\n        Argument:\n        x -- a number (integer or float)\n\n        Set the turtle's first coordinate to x, leave second coordinate\n        unchanged.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 240.00)\n        >>> turtle.setx(10)\n        >>> turtle.position()\n        (10.00, 240.00)\n        ", lineno=1727, col_offset=-1), lineno=1727, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1728, col_offset=8), '_goto', Load(), lineno=1728, col_offset=8), [Call(Name('Vec2D', Load(), lineno=1728, col_offset=19), [Name('x', Load(), lineno=1728, col_offset=25), Subscript(Attribute(Name('self', Load(), lineno=1728, col_offset=28), '_position', Load(), lineno=1728, col_offset=28), Index(Num(1, lineno=1728, col_offset=43)), Load(), lineno=1728, col_offset=28)], [], None, None, lineno=1728, col_offset=19)], [], None, None, lineno=1728, col_offset=8), lineno=1728, col_offset=8)], [], lineno=1712, col_offset=4), FunctionDef('sety', arguments([Name('self', Param(), lineno=1730, col_offset=13), Name('y', Param(), lineno=1730, col_offset=19)], None, None, []), [Expr(Str("Set the turtle's second coordinate to y\n\n        Argument:\n        y -- a number (integer or float)\n\n        Set the turtle's first coordinate to x, second coordinate remains\n        unchanged.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 40.00)\n        >>> turtle.sety(-10)\n        >>> turtle.position()\n        (0.00, -10.00)\n        ", lineno=1745, col_offset=-1), lineno=1745, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1746, col_offset=8), '_goto', Load(), lineno=1746, col_offset=8), [Call(Name('Vec2D', Load(), lineno=1746, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=1746, col_offset=25), '_position', Load(), lineno=1746, col_offset=25), Index(Num(0, lineno=1746, col_offset=40)), Load(), lineno=1746, col_offset=25), Name('y', Load(), lineno=1746, col_offset=44)], [], None, None, lineno=1746, col_offset=19)], [], None, None, lineno=1746, col_offset=8), lineno=1746, col_offset=8)], [], lineno=1730, col_offset=4), FunctionDef('distance', arguments([Name('self', Param(), lineno=1748, col_offset=17), Name('x', Param(), lineno=1748, col_offset=23), Name('y', Param(), lineno=1748, col_offset=26)], None, None, [Name('None', Load(), lineno=1748, col_offset=28)]), [Expr(Str('Return the distance from the turtle to (x,y) in turtle step units.\n\n        Arguments:\n        x -- a number   or  a pair/vector of numbers   or   a turtle instance\n        y -- a number       None                            None\n\n        call: distance(x, y)         # two coordinates\n        --or: distance((x, y))       # a pair (tuple) of coordinates\n        --or: distance(vec)          # e.g. as returned by pos()\n        --or: distance(mypen)        # where mypen is another turtle\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (0.00, 0.00)\n        >>> turtle.distance(30,40)\n        50.0\n        >>> pen = Turtle()\n        >>> pen.forward(77)\n        >>> turtle.distance(pen)\n        77.0\n        ', lineno=1769, col_offset=-1), lineno=1769, col_offset=-1), If(Compare(Name('y', Load(), lineno=1770, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1770, col_offset=20)], lineno=1770, col_offset=11), [Assign([Name('pos', Store(), lineno=1771, col_offset=12)], Call(Name('Vec2D', Load(), lineno=1771, col_offset=18), [Name('x', Load(), lineno=1771, col_offset=24), Name('y', Load(), lineno=1771, col_offset=27)], [], None, None, lineno=1771, col_offset=18), lineno=1771, col_offset=12)], [], lineno=1770, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1772, col_offset=11), [Name('x', Load(), lineno=1772, col_offset=22), Name('Vec2D', Load(), lineno=1772, col_offset=25)], [], None, None, lineno=1772, col_offset=11), [Assign([Name('pos', Store(), lineno=1773, col_offset=12)], Name('x', Load(), lineno=1773, col_offset=18), lineno=1773, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1774, col_offset=13), [Name('x', Load(), lineno=1774, col_offset=24), Name('tuple', Load(), lineno=1774, col_offset=27)], [], None, None, lineno=1774, col_offset=13), [Assign([Name('pos', Store(), lineno=1775, col_offset=12)], Call(Name('Vec2D', Load(), lineno=1775, col_offset=18), [], [], Name('x', Load(), lineno=1775, col_offset=25), None, lineno=1775, col_offset=18), lineno=1775, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1776, col_offset=13), [Name('x', Load(), lineno=1776, col_offset=24), Name('TNavigator', Load(), lineno=1776, col_offset=27)], [], None, None, lineno=1776, col_offset=13), [Assign([Name('pos', Store(), lineno=1777, col_offset=12)], Attribute(Name('x', Load(), lineno=1777, col_offset=18), '_position', Load(), lineno=1777, col_offset=18), lineno=1777, col_offset=12)], [], lineno=1776, col_offset=13)], lineno=1774, col_offset=13)], lineno=1772, col_offset=8), Return(Call(Name('abs', Load(), lineno=1778, col_offset=15), [BinOp(Name('pos', Load(), lineno=1778, col_offset=19), Sub(), Attribute(Name('self', Load(), lineno=1778, col_offset=25), '_position', Load(), lineno=1778, col_offset=25), lineno=1778, col_offset=19)], [], None, None, lineno=1778, col_offset=15), lineno=1778, col_offset=8)], [], lineno=1748, col_offset=4), FunctionDef('towards', arguments([Name('self', Param(), lineno=1780, col_offset=16), Name('x', Param(), lineno=1780, col_offset=22), Name('y', Param(), lineno=1780, col_offset=25)], None, None, [Name('None', Load(), lineno=1780, col_offset=27)]), [Expr(Str('Return the angle of the line from the turtle\'s position to (x, y).\n\n        Arguments:\n        x -- a number   or  a pair/vector of numbers   or   a turtle instance\n        y -- a number       None                            None\n\n        call: distance(x, y)         # two coordinates\n        --or: distance((x, y))       # a pair (tuple) of coordinates\n        --or: distance(vec)          # e.g. as returned by pos()\n        --or: distance(mypen)        # where mypen is another turtle\n\n        Return the angle, between the line from turtle-position to position\n        specified by x, y and the turtle\'s start orientation. (Depends on\n        modes - "standard" or "logo")\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (10.00, 10.00)\n        >>> turtle.towards(0,0)\n        225.0\n        ', lineno=1801, col_offset=-1), lineno=1801, col_offset=-1), If(Compare(Name('y', Load(), lineno=1802, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1802, col_offset=20)], lineno=1802, col_offset=11), [Assign([Name('pos', Store(), lineno=1803, col_offset=12)], Call(Name('Vec2D', Load(), lineno=1803, col_offset=18), [Name('x', Load(), lineno=1803, col_offset=24), Name('y', Load(), lineno=1803, col_offset=27)], [], None, None, lineno=1803, col_offset=18), lineno=1803, col_offset=12)], [], lineno=1802, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1804, col_offset=11), [Name('x', Load(), lineno=1804, col_offset=22), Name('Vec2D', Load(), lineno=1804, col_offset=25)], [], None, None, lineno=1804, col_offset=11), [Assign([Name('pos', Store(), lineno=1805, col_offset=12)], Name('x', Load(), lineno=1805, col_offset=18), lineno=1805, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1806, col_offset=13), [Name('x', Load(), lineno=1806, col_offset=24), Name('tuple', Load(), lineno=1806, col_offset=27)], [], None, None, lineno=1806, col_offset=13), [Assign([Name('pos', Store(), lineno=1807, col_offset=12)], Call(Name('Vec2D', Load(), lineno=1807, col_offset=18), [], [], Name('x', Load(), lineno=1807, col_offset=25), None, lineno=1807, col_offset=18), lineno=1807, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1808, col_offset=13), [Name('x', Load(), lineno=1808, col_offset=24), Name('TNavigator', Load(), lineno=1808, col_offset=27)], [], None, None, lineno=1808, col_offset=13), [Assign([Name('pos', Store(), lineno=1809, col_offset=12)], Attribute(Name('x', Load(), lineno=1809, col_offset=18), '_position', Load(), lineno=1809, col_offset=18), lineno=1809, col_offset=12)], [], lineno=1808, col_offset=13)], lineno=1806, col_offset=13)], lineno=1804, col_offset=8), Assign([Tuple([Name('x', Store(), lineno=1810, col_offset=8), Name('y', Store(), lineno=1810, col_offset=11)], Store(), lineno=1810, col_offset=8)], BinOp(Name('pos', Load(), lineno=1810, col_offset=15), Sub(), Attribute(Name('self', Load(), lineno=1810, col_offset=21), '_position', Load(), lineno=1810, col_offset=21), lineno=1810, col_offset=15), lineno=1810, col_offset=8), Assign([Name('result', Store(), lineno=1811, col_offset=8)], BinOp(Call(Name('round', Load(), lineno=1811, col_offset=17), [BinOp(BinOp(Call(Attribute(Name('math', Load(), lineno=1811, col_offset=23), 'atan2', Load(), lineno=1811, col_offset=23), [Name('y', Load(), lineno=1811, col_offset=34), Name('x', Load(), lineno=1811, col_offset=37)], [], None, None, lineno=1811, col_offset=23), Mult(), Num(180.0, lineno=1811, col_offset=40), lineno=1811, col_offset=23), Div(), Attribute(Name('math', Load(), lineno=1811, col_offset=46), 'pi', Load(), lineno=1811, col_offset=46), lineno=1811, col_offset=45), Num(10, lineno=1811, col_offset=55)], [], None, None, lineno=1811, col_offset=17), Mod(), Num(360.0, lineno=1811, col_offset=61), lineno=1811, col_offset=17), lineno=1811, col_offset=8), AugAssign(Name('result', Store(), lineno=1812, col_offset=8), Div(), Attribute(Name('self', Load(), lineno=1812, col_offset=18), '_degreesPerAU', Load(), lineno=1812, col_offset=18), lineno=1812, col_offset=8), Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=1813, col_offset=16), '_angleOffset', Load(), lineno=1813, col_offset=16), Add(), BinOp(Attribute(Name('self', Load(), lineno=1813, col_offset=36), '_angleOrient', Load(), lineno=1813, col_offset=36), Mult(), Name('result', Load(), lineno=1813, col_offset=54), lineno=1813, col_offset=36), lineno=1813, col_offset=16), Mod(), Attribute(Name('self', Load(), lineno=1813, col_offset=64), '_fullcircle', Load(), lineno=1813, col_offset=64), lineno=1813, col_offset=15), lineno=1813, col_offset=8)], [], lineno=1780, col_offset=4), FunctionDef('heading', arguments([Name('self', Param(), lineno=1815, col_offset=16)], None, None, []), [Expr(Str(" Return the turtle's current heading.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.left(67)\n        >>> turtle.heading()\n        67.0\n        ", lineno=1824, col_offset=-1), lineno=1824, col_offset=-1), Assign([Tuple([Name('x', Store(), lineno=1825, col_offset=8), Name('y', Store(), lineno=1825, col_offset=11)], Store(), lineno=1825, col_offset=8)], Attribute(Name('self', Load(), lineno=1825, col_offset=15), '_orient', Load(), lineno=1825, col_offset=15), lineno=1825, col_offset=8), Assign([Name('result', Store(), lineno=1826, col_offset=8)], BinOp(Call(Name('round', Load(), lineno=1826, col_offset=17), [BinOp(BinOp(Call(Attribute(Name('math', Load(), lineno=1826, col_offset=23), 'atan2', Load(), lineno=1826, col_offset=23), [Name('y', Load(), lineno=1826, col_offset=34), Name('x', Load(), lineno=1826, col_offset=37)], [], None, None, lineno=1826, col_offset=23), Mult(), Num(180.0, lineno=1826, col_offset=40), lineno=1826, col_offset=23), Div(), Attribute(Name('math', Load(), lineno=1826, col_offset=46), 'pi', Load(), lineno=1826, col_offset=46), lineno=1826, col_offset=45), Num(10, lineno=1826, col_offset=55)], [], None, None, lineno=1826, col_offset=17), Mod(), Num(360.0, lineno=1826, col_offset=61), lineno=1826, col_offset=17), lineno=1826, col_offset=8), AugAssign(Name('result', Store(), lineno=1827, col_offset=8), Div(), Attribute(Name('self', Load(), lineno=1827, col_offset=18), '_degreesPerAU', Load(), lineno=1827, col_offset=18), lineno=1827, col_offset=8), Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=1828, col_offset=16), '_angleOffset', Load(), lineno=1828, col_offset=16), Add(), BinOp(Attribute(Name('self', Load(), lineno=1828, col_offset=36), '_angleOrient', Load(), lineno=1828, col_offset=36), Mult(), Name('result', Load(), lineno=1828, col_offset=54), lineno=1828, col_offset=36), lineno=1828, col_offset=16), Mod(), Attribute(Name('self', Load(), lineno=1828, col_offset=64), '_fullcircle', Load(), lineno=1828, col_offset=64), lineno=1828, col_offset=15), lineno=1828, col_offset=8)], [], lineno=1815, col_offset=4), FunctionDef('setheading', arguments([Name('self', Param(), lineno=1830, col_offset=19), Name('to_angle', Param(), lineno=1830, col_offset=25)], None, None, []), [Expr(Str('Set the orientation of the turtle to to_angle.\n\n        Aliases:  setheading | seth\n\n        Argument:\n        to_angle -- a number (integer or float)\n\n        Set the orientation of the turtle to to_angle.\n        Here are some common directions in degrees:\n\n         standard - mode:          logo-mode:\n        -------------------|--------------------\n           0 - east                0 - north\n          90 - north              90 - east\n         180 - west              180 - south\n         270 - south             270 - west\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.setheading(90)\n        >>> turtle.heading()\n        90\n        ', lineno=1852, col_offset=-1), lineno=1852, col_offset=-1), Assign([Name('angle', Store(), lineno=1853, col_offset=8)], BinOp(BinOp(Name('to_angle', Load(), lineno=1853, col_offset=17), Sub(), Call(Attribute(Name('self', Load(), lineno=1853, col_offset=28), 'heading', Load(), lineno=1853, col_offset=28), [], [], None, None, lineno=1853, col_offset=28), lineno=1853, col_offset=17), Mult(), Attribute(Name('self', Load(), lineno=1853, col_offset=44), '_angleOrient', Load(), lineno=1853, col_offset=44), lineno=1853, col_offset=16), lineno=1853, col_offset=8), Assign([Name('full', Store(), lineno=1854, col_offset=8)], Attribute(Name('self', Load(), lineno=1854, col_offset=15), '_fullcircle', Load(), lineno=1854, col_offset=15), lineno=1854, col_offset=8), Assign([Name('angle', Store(), lineno=1855, col_offset=8)], BinOp(BinOp(BinOp(Name('angle', Load(), lineno=1855, col_offset=17), Add(), BinOp(Name('full', Load(), lineno=1855, col_offset=23), Div(), Num(2.0, lineno=1855, col_offset=28), lineno=1855, col_offset=23), lineno=1855, col_offset=17), Mod(), Name('full', Load(), lineno=1855, col_offset=32), lineno=1855, col_offset=16), Sub(), BinOp(Name('full', Load(), lineno=1855, col_offset=39), Div(), Num(2.0, lineno=1855, col_offset=44), lineno=1855, col_offset=39), lineno=1855, col_offset=16), lineno=1855, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1856, col_offset=8), '_rotate', Load(), lineno=1856, col_offset=8), [Name('angle', Load(), lineno=1856, col_offset=21)], [], None, None, lineno=1856, col_offset=8), lineno=1856, col_offset=8)], [], lineno=1830, col_offset=4), FunctionDef('circle', arguments([Name('self', Param(), lineno=1858, col_offset=15), Name('radius', Param(), lineno=1858, col_offset=21), Name('extent', Param(), lineno=1858, col_offset=29), Name('steps', Param(), lineno=1858, col_offset=44)], None, None, [Name('None', Load(), lineno=1858, col_offset=38), Name('None', Load(), lineno=1858, col_offset=52)]), [Expr(Str(' Draw a circle with given radius.\n\n        Arguments:\n        radius -- a number\n        extent (optional) -- a number\n        steps (optional) -- an integer\n\n        Draw a circle with given radius. The center is radius units left\n        of the turtle; extent - an angle - determines which part of the\n        circle is drawn. If extent is not given, draw the entire circle.\n        If extent is not a full circle, one endpoint of the arc is the\n        current pen position. Draw the arc in counterclockwise direction\n        if radius is positive, otherwise in clockwise direction. Finally\n        the direction of the turtle is changed by the amount of extent.\n\n        As the circle is approximated by an inscribed regular polygon,\n        steps determines the number of steps to use. If not given,\n        it will be calculated automatically. Maybe used to draw regular\n        polygons.\n\n        call: circle(radius)                  # full circle\n        --or: circle(radius, extent)          # arc\n        --or: circle(radius, extent, steps)\n        --or: circle(radius, steps=6)         # 6-sided polygon\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.circle(50)\n        >>> turtle.circle(120, 180)  # semicircle\n        ', lineno=1887, col_offset=-1), lineno=1887, col_offset=-1), If(Attribute(Name('self', Load(), lineno=1888, col_offset=11), 'undobuffer', Load(), lineno=1888, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1889, col_offset=12), 'undobuffer', Load(), lineno=1889, col_offset=12), 'push', Load(), lineno=1889, col_offset=12), [List([Str('seq', lineno=1889, col_offset=34)], Load(), lineno=1889, col_offset=33)], [], None, None, lineno=1889, col_offset=12), lineno=1889, col_offset=12), Assign([Attribute(Attribute(Name('self', Load(), lineno=1890, col_offset=12), 'undobuffer', Load(), lineno=1890, col_offset=12), 'cumulate', Store(), lineno=1890, col_offset=12)], Name('True', Load(), lineno=1890, col_offset=39), lineno=1890, col_offset=12)], [], lineno=1888, col_offset=8), Assign([Name('speed', Store(), lineno=1891, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1891, col_offset=16), 'speed', Load(), lineno=1891, col_offset=16), [], [], None, None, lineno=1891, col_offset=16), lineno=1891, col_offset=8), If(Compare(Name('extent', Load(), lineno=1892, col_offset=11), [Is()], [Name('None', Load(), lineno=1892, col_offset=21)], lineno=1892, col_offset=11), [Assign([Name('extent', Store(), lineno=1893, col_offset=12)], Attribute(Name('self', Load(), lineno=1893, col_offset=21), '_fullcircle', Load(), lineno=1893, col_offset=21), lineno=1893, col_offset=12)], [], lineno=1892, col_offset=8), If(Compare(Name('steps', Load(), lineno=1894, col_offset=11), [Is()], [Name('None', Load(), lineno=1894, col_offset=20)], lineno=1894, col_offset=11), [Assign([Name('frac', Store(), lineno=1895, col_offset=12)], BinOp(Call(Name('abs', Load(), lineno=1895, col_offset=19), [Name('extent', Load(), lineno=1895, col_offset=23)], [], None, None, lineno=1895, col_offset=19), Div(), Attribute(Name('self', Load(), lineno=1895, col_offset=31), '_fullcircle', Load(), lineno=1895, col_offset=31), lineno=1895, col_offset=19), lineno=1895, col_offset=12), Assign([Name('steps', Store(), lineno=1896, col_offset=12)], BinOp(Num(1, lineno=1896, col_offset=20), Add(), Call(Name('int', Load(), lineno=1896, col_offset=22), [BinOp(Call(Name('min', Load(), lineno=1896, col_offset=26), [BinOp(Num(11, lineno=1896, col_offset=30), Add(), BinOp(Call(Name('abs', Load(), lineno=1896, col_offset=33), [Name('radius', Load(), lineno=1896, col_offset=37)], [], None, None, lineno=1896, col_offset=33), Div(), Num(6.0, lineno=1896, col_offset=45), lineno=1896, col_offset=33), lineno=1896, col_offset=30), Num(59.0, lineno=1896, col_offset=50)], [], None, None, lineno=1896, col_offset=26), Mult(), Name('frac', Load(), lineno=1896, col_offset=56), lineno=1896, col_offset=26)], [], None, None, lineno=1896, col_offset=22), lineno=1896, col_offset=20), lineno=1896, col_offset=12)], [], lineno=1894, col_offset=8), Assign([Name('w', Store(), lineno=1897, col_offset=8)], BinOp(BinOp(Num(1.0, lineno=1897, col_offset=12), Mult(), Name('extent', Load(), lineno=1897, col_offset=18), lineno=1897, col_offset=12), Div(), Name('steps', Load(), lineno=1897, col_offset=27), lineno=1897, col_offset=25), lineno=1897, col_offset=8), Assign([Name('w2', Store(), lineno=1898, col_offset=8)], BinOp(Num(0.5, lineno=1898, col_offset=13), Mult(), Name('w', Load(), lineno=1898, col_offset=19), lineno=1898, col_offset=13), lineno=1898, col_offset=8), Assign([Name('l', Store(), lineno=1899, col_offset=8)], BinOp(BinOp(Num(2.0, lineno=1899, col_offset=12), Mult(), Name('radius', Load(), lineno=1899, col_offset=18), lineno=1899, col_offset=12), Mult(), Call(Attribute(Name('math', Load(), lineno=1899, col_offset=27), 'sin', Load(), lineno=1899, col_offset=27), [BinOp(BinOp(BinOp(Name('w2', Load(), lineno=1899, col_offset=36), Mult(), Attribute(Name('math', Load(), lineno=1899, col_offset=39), 'pi', Load(), lineno=1899, col_offset=39), lineno=1899, col_offset=36), Div(), Num(180.0, lineno=1899, col_offset=47), lineno=1899, col_offset=46), Mult(), Attribute(Name('self', Load(), lineno=1899, col_offset=53), '_degreesPerAU', Load(), lineno=1899, col_offset=53), lineno=1899, col_offset=52)], [], None, None, lineno=1899, col_offset=27), lineno=1899, col_offset=25), lineno=1899, col_offset=8), If(Compare(Name('radius', Load(), lineno=1900, col_offset=11), [Lt()], [Num(0, lineno=1900, col_offset=20)], lineno=1900, col_offset=11), [Assign([Tuple([Name('l', Store(), lineno=1901, col_offset=12), Name('w', Store(), lineno=1901, col_offset=15), Name('w2', Store(), lineno=1901, col_offset=18)], Store(), lineno=1901, col_offset=12)], Tuple([UnaryOp(USub(), Name('l', Load(), lineno=1901, col_offset=24), lineno=1901, col_offset=23), UnaryOp(USub(), Name('w', Load(), lineno=1901, col_offset=28), lineno=1901, col_offset=27), UnaryOp(USub(), Name('w2', Load(), lineno=1901, col_offset=32), lineno=1901, col_offset=31)], Load(), lineno=1901, col_offset=23), lineno=1901, col_offset=12)], [], lineno=1900, col_offset=8), Assign([Name('tr', Store(), lineno=1902, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1902, col_offset=13), 'tracer', Load(), lineno=1902, col_offset=13), [], [], None, None, lineno=1902, col_offset=13), lineno=1902, col_offset=8), Assign([Name('dl', Store(), lineno=1903, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1903, col_offset=13), '_delay', Load(), lineno=1903, col_offset=13), [], [], None, None, lineno=1903, col_offset=13), lineno=1903, col_offset=8), If(Compare(Name('speed', Load(), lineno=1904, col_offset=11), [Eq()], [Num(0, lineno=1904, col_offset=20)], lineno=1904, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1905, col_offset=12), 'tracer', Load(), lineno=1905, col_offset=12), [Num(0, lineno=1905, col_offset=24), Num(0, lineno=1905, col_offset=27)], [], None, None, lineno=1905, col_offset=12), lineno=1905, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=1907, col_offset=12), 'speed', Load(), lineno=1907, col_offset=12), [Num(0, lineno=1907, col_offset=23)], [], None, None, lineno=1907, col_offset=12), lineno=1907, col_offset=12)], lineno=1904, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1908, col_offset=8), '_rotate', Load(), lineno=1908, col_offset=8), [Name('w2', Load(), lineno=1908, col_offset=21)], [], None, None, lineno=1908, col_offset=8), lineno=1908, col_offset=8), For(Name('i', Store(), lineno=1909, col_offset=12), Call(Name('range', Load(), lineno=1909, col_offset=17), [Name('steps', Load(), lineno=1909, col_offset=23)], [], None, None, lineno=1909, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=1910, col_offset=12), 'speed', Load(), lineno=1910, col_offset=12), [Name('speed', Load(), lineno=1910, col_offset=23)], [], None, None, lineno=1910, col_offset=12), lineno=1910, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1911, col_offset=12), '_go', Load(), lineno=1911, col_offset=12), [Name('l', Load(), lineno=1911, col_offset=21)], [], None, None, lineno=1911, col_offset=12), lineno=1911, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1912, col_offset=12), 'speed', Load(), lineno=1912, col_offset=12), [Num(0, lineno=1912, col_offset=23)], [], None, None, lineno=1912, col_offset=12), lineno=1912, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1913, col_offset=12), '_rotate', Load(), lineno=1913, col_offset=12), [Name('w', Load(), lineno=1913, col_offset=25)], [], None, None, lineno=1913, col_offset=12), lineno=1913, col_offset=12)], [], lineno=1909, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1914, col_offset=8), '_rotate', Load(), lineno=1914, col_offset=8), [UnaryOp(USub(), Name('w2', Load(), lineno=1914, col_offset=22), lineno=1914, col_offset=21)], [], None, None, lineno=1914, col_offset=8), lineno=1914, col_offset=8), If(Compare(Name('speed', Load(), lineno=1915, col_offset=11), [Eq()], [Num(0, lineno=1915, col_offset=20)], lineno=1915, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1916, col_offset=12), 'tracer', Load(), lineno=1916, col_offset=12), [Name('tr', Load(), lineno=1916, col_offset=24), Name('dl', Load(), lineno=1916, col_offset=28)], [], None, None, lineno=1916, col_offset=12), lineno=1916, col_offset=12)], [], lineno=1915, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1917, col_offset=8), 'speed', Load(), lineno=1917, col_offset=8), [Name('speed', Load(), lineno=1917, col_offset=19)], [], None, None, lineno=1917, col_offset=8), lineno=1917, col_offset=8), If(Attribute(Name('self', Load(), lineno=1918, col_offset=11), 'undobuffer', Load(), lineno=1918, col_offset=11), [Assign([Attribute(Attribute(Name('self', Load(), lineno=1919, col_offset=12), 'undobuffer', Load(), lineno=1919, col_offset=12), 'cumulate', Store(), lineno=1919, col_offset=12)], Name('False', Load(), lineno=1919, col_offset=39), lineno=1919, col_offset=12)], [], lineno=1918, col_offset=8)], [], lineno=1858, col_offset=4), FunctionDef('speed', arguments([Name('self', Param(), lineno=1923, col_offset=14), Name('s', Param(), lineno=1923, col_offset=20)], None, None, [Num(0, lineno=1923, col_offset=22)]), [Expr(Str('dummy method - to be overwritten by child class', lineno=1924, col_offset=8), lineno=1924, col_offset=8)], [], lineno=1923, col_offset=4), FunctionDef('tracer', arguments([Name('self', Param(), lineno=1925, col_offset=15), Name('a', Param(), lineno=1925, col_offset=21), Name('b', Param(), lineno=1925, col_offset=29)], None, None, [Name('None', Load(), lineno=1925, col_offset=23), Name('None', Load(), lineno=1925, col_offset=31)]), [Expr(Str('dummy method - to be overwritten by child class', lineno=1926, col_offset=8), lineno=1926, col_offset=8)], [], lineno=1925, col_offset=4), FunctionDef('_delay', arguments([Name('self', Param(), lineno=1927, col_offset=15), Name('n', Param(), lineno=1927, col_offset=21)], None, None, [Name('None', Load(), lineno=1927, col_offset=23)]), [Expr(Str('dummy method - to be overwritten by child class', lineno=1928, col_offset=8), lineno=1928, col_offset=8)], [], lineno=1927, col_offset=4), Assign([Name('fd', Store(), lineno=1930, col_offset=4)], Name('forward', Load(), lineno=1930, col_offset=9), lineno=1930, col_offset=4), Assign([Name('bk', Store(), lineno=1931, col_offset=4)], Name('back', Load(), lineno=1931, col_offset=9), lineno=1931, col_offset=4), Assign([Name('backward', Store(), lineno=1932, col_offset=4)], Name('back', Load(), lineno=1932, col_offset=15), lineno=1932, col_offset=4), Assign([Name('rt', Store(), lineno=1933, col_offset=4)], Name('right', Load(), lineno=1933, col_offset=9), lineno=1933, col_offset=4), Assign([Name('lt', Store(), lineno=1934, col_offset=4)], Name('left', Load(), lineno=1934, col_offset=9), lineno=1934, col_offset=4), Assign([Name('position', Store(), lineno=1935, col_offset=4)], Name('pos', Load(), lineno=1935, col_offset=15), lineno=1935, col_offset=4), Assign([Name('setpos', Store(), lineno=1936, col_offset=4)], Name('goto', Load(), lineno=1936, col_offset=13), lineno=1936, col_offset=4), Assign([Name('setposition', Store(), lineno=1937, col_offset=4)], Name('goto', Load(), lineno=1937, col_offset=18), lineno=1937, col_offset=4), Assign([Name('seth', Store(), lineno=1938, col_offset=4)], Name('setheading', Load(), lineno=1938, col_offset=11), lineno=1938, col_offset=4)], [], lineno=1430, col_offset=0), ClassDef('TPen', [Name('object', Load(), lineno=1941, col_offset=11)], [Expr(Str('Drawing part of the RawTurtle.\n    Implements drawing properties.\n    ', lineno=1944, col_offset=-1), lineno=1944, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1945, col_offset=17), Name('resizemode', Param(), lineno=1945, col_offset=23)], None, None, [Subscript(Name('_CFG', Load(), lineno=1945, col_offset=34), Index(Str('resizemode', lineno=1945, col_offset=39)), Load(), lineno=1945, col_offset=34)]), [Assign([Attribute(Name('self', Load(), lineno=1946, col_offset=8), '_resizemode', Store(), lineno=1946, col_offset=8)], Name('resizemode', Load(), lineno=1946, col_offset=27), lineno=1946, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1947, col_offset=8), 'undobuffer', Store(), lineno=1947, col_offset=8)], Name('None', Load(), lineno=1947, col_offset=26), lineno=1947, col_offset=8), Expr(Call(Attribute(Name('TPen', Load(), lineno=1948, col_offset=8), '_reset', Load(), lineno=1948, col_offset=8), [Name('self', Load(), lineno=1948, col_offset=20)], [], None, None, lineno=1948, col_offset=8), lineno=1948, col_offset=8)], [], lineno=1945, col_offset=4), FunctionDef('_reset', arguments([Name('self', Param(), lineno=1950, col_offset=15), Name('pencolor', Param(), lineno=1950, col_offset=21), Name('fillcolor', Param(), lineno=1951, col_offset=21)], None, None, [Subscript(Name('_CFG', Load(), lineno=1950, col_offset=30), Index(Str('pencolor', lineno=1950, col_offset=35)), Load(), lineno=1950, col_offset=30), Subscript(Name('_CFG', Load(), lineno=1951, col_offset=31), Index(Str('fillcolor', lineno=1951, col_offset=36)), Load(), lineno=1951, col_offset=31)]), [Assign([Attribute(Name('self', Load(), lineno=1952, col_offset=8), '_pensize', Store(), lineno=1952, col_offset=8)], Num(1, lineno=1952, col_offset=24), lineno=1952, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1953, col_offset=8), '_shown', Store(), lineno=1953, col_offset=8)], Name('True', Load(), lineno=1953, col_offset=22), lineno=1953, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1954, col_offset=8), '_pencolor', Store(), lineno=1954, col_offset=8)], Name('pencolor', Load(), lineno=1954, col_offset=25), lineno=1954, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1955, col_offset=8), '_fillcolor', Store(), lineno=1955, col_offset=8)], Name('fillcolor', Load(), lineno=1955, col_offset=26), lineno=1955, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1956, col_offset=8), '_drawing', Store(), lineno=1956, col_offset=8)], Name('True', Load(), lineno=1956, col_offset=24), lineno=1956, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1957, col_offset=8), '_speed', Store(), lineno=1957, col_offset=8)], Num(3, lineno=1957, col_offset=22), lineno=1957, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1958, col_offset=8), '_stretchfactor', Store(), lineno=1958, col_offset=8)], Tuple([Num(1, lineno=1958, col_offset=31), Num(1, lineno=1958, col_offset=34)], Load(), lineno=1958, col_offset=31), lineno=1958, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1959, col_offset=8), '_tilt', Store(), lineno=1959, col_offset=8)], Num(0, lineno=1959, col_offset=21), lineno=1959, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1960, col_offset=8), '_outlinewidth', Store(), lineno=1960, col_offset=8)], Num(1, lineno=1960, col_offset=29), lineno=1960, col_offset=8)], [], lineno=1950, col_offset=4), FunctionDef('resizemode', arguments([Name('self', Param(), lineno=1963, col_offset=19), Name('rmode', Param(), lineno=1963, col_offset=25)], None, None, [Name('None', Load(), lineno=1963, col_offset=31)]), [Expr(Str('Set resizemode to one of the values: "auto", "user", "noresize".\n\n        (Optional) Argument:\n        rmode -- one of the strings "auto", "user", "noresize"\n\n        Different resizemodes have the following effects:\n          - "auto" adapts the appearance of the turtle\n                   corresponding to the value of pensize.\n          - "user" adapts the appearance of the turtle according to the\n                   values of stretchfactor and outlinewidth (outline),\n                   which are set by shapesize()\n          - "noresize" no adaption of the turtle\'s appearance takes place.\n        If no argument is given, return current resizemode.\n        resizemode("user") is called by a call of shapesize with arguments.\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.resizemode("noresize")\n        >>> turtle.resizemode()\n        \'noresize\'\n        ', lineno=1984, col_offset=-1), lineno=1984, col_offset=-1), If(Compare(Name('rmode', Load(), lineno=1985, col_offset=11), [Is()], [Name('None', Load(), lineno=1985, col_offset=20)], lineno=1985, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1986, col_offset=19), '_resizemode', Load(), lineno=1986, col_offset=19), lineno=1986, col_offset=12)], [], lineno=1985, col_offset=8), Assign([Name('rmode', Store(), lineno=1987, col_offset=8)], Call(Attribute(Name('rmode', Load(), lineno=1987, col_offset=16), 'lower', Load(), lineno=1987, col_offset=16), [], [], None, None, lineno=1987, col_offset=16), lineno=1987, col_offset=8), If(Compare(Name('rmode', Load(), lineno=1988, col_offset=11), [In()], [List([Str('auto', lineno=1988, col_offset=21), Str('user', lineno=1988, col_offset=29), Str('noresize', lineno=1988, col_offset=37)], Load(), lineno=1988, col_offset=20)], lineno=1988, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1989, col_offset=12), 'pen', Load(), lineno=1989, col_offset=12), [], [keyword('resizemode', Name('rmode', Load(), lineno=1989, col_offset=32))], None, None, lineno=1989, col_offset=12), lineno=1989, col_offset=12)], [], lineno=1988, col_offset=8)], [], lineno=1963, col_offset=4), FunctionDef('pensize', arguments([Name('self', Param(), lineno=1991, col_offset=16), Name('width', Param(), lineno=1991, col_offset=22)], None, None, [Name('None', Load(), lineno=1991, col_offset=28)]), [Expr(Str('Set or return the line thickness.\n\n        Aliases:  pensize | width\n\n        Argument:\n        width -- positive number\n\n        Set the line thickness to width or return it. If resizemode is set\n        to "auto" and turtleshape is a polygon, that polygon is drawn with\n        the same line thickness. If no argument is given, current pensize\n        is returned.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pensize()\n        1\n        turtle.pensize(10)   # from here on lines of width 10 are drawn\n        ', lineno=2008, col_offset=-1), lineno=2008, col_offset=-1), If(Compare(Name('width', Load(), lineno=2009, col_offset=11), [Is()], [Name('None', Load(), lineno=2009, col_offset=20)], lineno=2009, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=2010, col_offset=19), '_pensize', Load(), lineno=2010, col_offset=19), lineno=2010, col_offset=12)], [], lineno=2009, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2011, col_offset=8), 'pen', Load(), lineno=2011, col_offset=8), [], [keyword('pensize', Name('width', Load(), lineno=2011, col_offset=25))], None, None, lineno=2011, col_offset=8), lineno=2011, col_offset=8)], [], lineno=1991, col_offset=4), FunctionDef('penup', arguments([Name('self', Param(), lineno=2014, col_offset=14)], None, None, []), [Expr(Str('Pull the pen up -- no drawing when moving.\n\n        Aliases: penup | pu | up\n\n        No argument\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.penup()\n        ', lineno=2023, col_offset=-1), lineno=2023, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=2024, col_offset=15), '_drawing', Load(), lineno=2024, col_offset=15), lineno=2024, col_offset=11), [Return(None, lineno=2025, col_offset=12)], [], lineno=2024, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2026, col_offset=8), 'pen', Load(), lineno=2026, col_offset=8), [], [keyword('pendown', Name('False', Load(), lineno=2026, col_offset=25))], None, None, lineno=2026, col_offset=8), lineno=2026, col_offset=8)], [], lineno=2014, col_offset=4), FunctionDef('pendown', arguments([Name('self', Param(), lineno=2028, col_offset=16)], None, None, []), [Expr(Str('Pull the pen down -- drawing when moving.\n\n        Aliases: pendown | pd | down\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pendown()\n        ', lineno=2037, col_offset=-1), lineno=2037, col_offset=-1), If(Attribute(Name('self', Load(), lineno=2038, col_offset=11), '_drawing', Load(), lineno=2038, col_offset=11), [Return(None, lineno=2039, col_offset=12)], [], lineno=2038, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2040, col_offset=8), 'pen', Load(), lineno=2040, col_offset=8), [], [keyword('pendown', Name('True', Load(), lineno=2040, col_offset=25))], None, None, lineno=2040, col_offset=8), lineno=2040, col_offset=8)], [], lineno=2028, col_offset=4), FunctionDef('isdown', arguments([Name('self', Param(), lineno=2042, col_offset=15)], None, None, []), [Expr(Str("Return True if pen is down, False if it's up.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.penup()\n        >>> turtle.isdown()\n        False\n        >>> turtle.pendown()\n        >>> turtle.isdown()\n        True\n        ", lineno=2054, col_offset=-1), lineno=2054, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=2055, col_offset=15), '_drawing', Load(), lineno=2055, col_offset=15), lineno=2055, col_offset=8)], [], lineno=2042, col_offset=4), FunctionDef('speed', arguments([Name('self', Param(), lineno=2057, col_offset=14), Name('speed', Param(), lineno=2057, col_offset=20)], None, None, [Name('None', Load(), lineno=2057, col_offset=26)]), [Expr(Str(" Return or set the turtle's speed.\n\n        Optional argument:\n        speed -- an integer in the range 0..10 or a speedstring (see below)\n\n        Set the turtle's speed to an integer value in the range 0 .. 10.\n        If no argument is given: return current speed.\n\n        If input is a number greater than 10 or smaller than 0.5,\n        speed is set to 0.\n        Speedstrings  are mapped to speedvalues in the following way:\n            'fastest' :  0\n            'fast'    :  10\n            'normal'  :  6\n            'slow'    :  3\n            'slowest' :  1\n        speeds from 1 to 10 enforce increasingly faster animation of\n        line drawing and turtle turning.\n\n        Attention:\n        speed = 0 : *no* animation takes place. forward/back makes turtle jump\n        and likewise left/right make the turtle turn instantly.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.speed(3)\n        ", lineno=2083, col_offset=-1), lineno=2083, col_offset=-1), Assign([Name('speeds', Store(), lineno=2084, col_offset=8)], Dict([Str('fastest', lineno=2084, col_offset=18), Str('fast', lineno=2084, col_offset=31), Str('normal', lineno=2084, col_offset=42), Str('slow', lineno=2084, col_offset=54), Str('slowest', lineno=2084, col_offset=64)], [Num(0, lineno=2084, col_offset=28), Num(10, lineno=2084, col_offset=38), Num(6, lineno=2084, col_offset=51), Num(3, lineno=2084, col_offset=61), Num(1, lineno=2084, col_offset=74)], lineno=2084, col_offset=17), lineno=2084, col_offset=8), If(Compare(Name('speed', Load(), lineno=2085, col_offset=11), [Is()], [Name('None', Load(), lineno=2085, col_offset=20)], lineno=2085, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=2086, col_offset=19), '_speed', Load(), lineno=2086, col_offset=19), lineno=2086, col_offset=12)], [], lineno=2085, col_offset=8), If(Compare(Name('speed', Load(), lineno=2087, col_offset=11), [In()], [Name('speeds', Load(), lineno=2087, col_offset=20)], lineno=2087, col_offset=11), [Assign([Name('speed', Store(), lineno=2088, col_offset=12)], Subscript(Name('speeds', Load(), lineno=2088, col_offset=20), Index(Name('speed', Load(), lineno=2088, col_offset=27)), Load(), lineno=2088, col_offset=20), lineno=2088, col_offset=12)], [If(Compare(Num(0.5, lineno=2089, col_offset=13), [Lt(), Lt()], [Name('speed', Load(), lineno=2089, col_offset=19), Num(10.5, lineno=2089, col_offset=27)], lineno=2089, col_offset=13), [Assign([Name('speed', Store(), lineno=2090, col_offset=12)], Call(Name('int', Load(), lineno=2090, col_offset=20), [Call(Name('round', Load(), lineno=2090, col_offset=24), [Name('speed', Load(), lineno=2090, col_offset=30)], [], None, None, lineno=2090, col_offset=24)], [], None, None, lineno=2090, col_offset=20), lineno=2090, col_offset=12)], [Assign([Name('speed', Store(), lineno=2092, col_offset=12)], Num(0, lineno=2092, col_offset=20), lineno=2092, col_offset=12)], lineno=2089, col_offset=13)], lineno=2087, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2093, col_offset=8), 'pen', Load(), lineno=2093, col_offset=8), [], [keyword('speed', Name('speed', Load(), lineno=2093, col_offset=23))], None, None, lineno=2093, col_offset=8), lineno=2093, col_offset=8)], [], lineno=2057, col_offset=4), FunctionDef('color', arguments([Name('self', Param(), lineno=2095, col_offset=14)], 'args', None, []), [Expr(Str("Return or set the pencolor and fillcolor.\n\n        Arguments:\n        Several input formats are allowed.\n        They use 0, 1, 2, or 3 arguments as follows:\n\n        color()\n            Return the current pencolor and the current fillcolor\n            as a pair of color specification strings as are returned\n            by pencolor and fillcolor.\n        color(colorstring), color((r,g,b)), color(r,g,b)\n            inputs as in pencolor, set both, fillcolor and pencolor,\n            to the given value.\n        color(colorstring1, colorstring2),\n        color((r1,g1,b1), (r2,g2,b2))\n            equivalent to pencolor(colorstring1) and fillcolor(colorstring2)\n            and analogously, if the other input format is used.\n\n        If turtleshape is a polygon, outline and interior of that polygon\n        is drawn with the newly set colors.\n        For mor info see: pencolor, fillcolor\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color('red', 'green')\n        >>> turtle.color()\n        ('red', 'green')\n        >>> colormode(255)\n        >>> color((40, 80, 120), (160, 200, 240))\n        >>> color()\n        ('#285078', '#a0c8f0')\n        ", lineno=2126, col_offset=-1), lineno=2126, col_offset=-1), If(Name('args', Load(), lineno=2127, col_offset=11), [Assign([Name('l', Store(), lineno=2128, col_offset=12)], Call(Name('len', Load(), lineno=2128, col_offset=16), [Name('args', Load(), lineno=2128, col_offset=20)], [], None, None, lineno=2128, col_offset=16), lineno=2128, col_offset=12), If(Compare(Name('l', Load(), lineno=2129, col_offset=15), [Eq()], [Num(1, lineno=2129, col_offset=20)], lineno=2129, col_offset=15), [Assign([Name('pcolor', Store(), lineno=2130, col_offset=16), Name('fcolor', Store(), lineno=2130, col_offset=25)], Subscript(Name('args', Load(), lineno=2130, col_offset=34), Index(Num(0, lineno=2130, col_offset=39)), Load(), lineno=2130, col_offset=34), lineno=2130, col_offset=16)], [If(Compare(Name('l', Load(), lineno=2131, col_offset=17), [Eq()], [Num(2, lineno=2131, col_offset=22)], lineno=2131, col_offset=17), [Assign([Tuple([Name('pcolor', Store(), lineno=2132, col_offset=16), Name('fcolor', Store(), lineno=2132, col_offset=24)], Store(), lineno=2132, col_offset=16)], Name('args', Load(), lineno=2132, col_offset=33), lineno=2132, col_offset=16)], [If(Compare(Name('l', Load(), lineno=2133, col_offset=17), [Eq()], [Num(3, lineno=2133, col_offset=22)], lineno=2133, col_offset=17), [Assign([Name('pcolor', Store(), lineno=2134, col_offset=16), Name('fcolor', Store(), lineno=2134, col_offset=25)], Name('args', Load(), lineno=2134, col_offset=34), lineno=2134, col_offset=16)], [], lineno=2133, col_offset=17)], lineno=2131, col_offset=17)], lineno=2129, col_offset=12), Assign([Name('pcolor', Store(), lineno=2135, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2135, col_offset=21), '_colorstr', Load(), lineno=2135, col_offset=21), [Name('pcolor', Load(), lineno=2135, col_offset=36)], [], None, None, lineno=2135, col_offset=21), lineno=2135, col_offset=12), Assign([Name('fcolor', Store(), lineno=2136, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2136, col_offset=21), '_colorstr', Load(), lineno=2136, col_offset=21), [Name('fcolor', Load(), lineno=2136, col_offset=36)], [], None, None, lineno=2136, col_offset=21), lineno=2136, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=2137, col_offset=12), 'pen', Load(), lineno=2137, col_offset=12), [], [keyword('pencolor', Name('pcolor', Load(), lineno=2137, col_offset=30)), keyword('fillcolor', Name('fcolor', Load(), lineno=2137, col_offset=48))], None, None, lineno=2137, col_offset=12), lineno=2137, col_offset=12)], [Return(Tuple([Call(Attribute(Name('self', Load(), lineno=2139, col_offset=19), '_color', Load(), lineno=2139, col_offset=19), [Attribute(Name('self', Load(), lineno=2139, col_offset=31), '_pencolor', Load(), lineno=2139, col_offset=31)], [], None, None, lineno=2139, col_offset=19), Call(Attribute(Name('self', Load(), lineno=2139, col_offset=48), '_color', Load(), lineno=2139, col_offset=48), [Attribute(Name('self', Load(), lineno=2139, col_offset=60), '_fillcolor', Load(), lineno=2139, col_offset=60)], [], None, None, lineno=2139, col_offset=48)], Load(), lineno=2139, col_offset=19), lineno=2139, col_offset=12)], lineno=2127, col_offset=8)], [], lineno=2095, col_offset=4), FunctionDef('pencolor', arguments([Name('self', Param(), lineno=2141, col_offset=17)], 'args', None, []), [Expr(Str(' Return or set the pencolor.\n\n        Arguments:\n        Four input formats are allowed:\n          - pencolor()\n            Return the current pencolor as color specification string,\n            possibly in hex-number format (see example).\n            May be used as input to another color/pencolor/fillcolor call.\n          - pencolor(colorstring)\n            s is a Tk color specification string, such as "red" or "yellow"\n          - pencolor((r, g, b))\n            *a tuple* of r, g, and b, which represent, an RGB color,\n            and each of r, g, and b are in the range 0..colormode,\n            where colormode is either 1.0 or 255\n          - pencolor(r, g, b)\n            r, g, and b represent an RGB color, and each of r, g, and b\n            are in the range 0..colormode\n\n        If turtleshape is a polygon, the outline of that polygon is drawn\n        with the newly set pencolor.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pencolor(\'brown\')\n        >>> tup = (0.2, 0.8, 0.55)\n        >>> turtle.pencolor(tup)\n        >>> turtle.pencolor()\n        \'#33cc8c\'\n        ', lineno=2169, col_offset=-1), lineno=2169, col_offset=-1), If(Name('args', Load(), lineno=2170, col_offset=11), [Assign([Name('color', Store(), lineno=2171, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2171, col_offset=20), '_colorstr', Load(), lineno=2171, col_offset=20), [Name('args', Load(), lineno=2171, col_offset=35)], [], None, None, lineno=2171, col_offset=20), lineno=2171, col_offset=12), If(Compare(Name('color', Load(), lineno=2172, col_offset=15), [Eq()], [Attribute(Name('self', Load(), lineno=2172, col_offset=24), '_pencolor', Load(), lineno=2172, col_offset=24)], lineno=2172, col_offset=15), [Return(None, lineno=2173, col_offset=16)], [], lineno=2172, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=2174, col_offset=12), 'pen', Load(), lineno=2174, col_offset=12), [], [keyword('pencolor', Name('color', Load(), lineno=2174, col_offset=30))], None, None, lineno=2174, col_offset=12), lineno=2174, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=2176, col_offset=19), '_color', Load(), lineno=2176, col_offset=19), [Attribute(Name('self', Load(), lineno=2176, col_offset=31), '_pencolor', Load(), lineno=2176, col_offset=31)], [], None, None, lineno=2176, col_offset=19), lineno=2176, col_offset=12)], lineno=2170, col_offset=8)], [], lineno=2141, col_offset=4), FunctionDef('fillcolor', arguments([Name('self', Param(), lineno=2178, col_offset=18)], 'args', None, []), [Expr(Str(' Return or set the fillcolor.\n\n        Arguments:\n        Four input formats are allowed:\n          - fillcolor()\n            Return the current fillcolor as color specification string,\n            possibly in hex-number format (see example).\n            May be used as input to another color/pencolor/fillcolor call.\n          - fillcolor(colorstring)\n            s is a Tk color specification string, such as "red" or "yellow"\n          - fillcolor((r, g, b))\n            *a tuple* of r, g, and b, which represent, an RGB color,\n            and each of r, g, and b are in the range 0..colormode,\n            where colormode is either 1.0 or 255\n          - fillcolor(r, g, b)\n            r, g, and b represent an RGB color, and each of r, g, and b\n            are in the range 0..colormode\n\n        If turtleshape is a polygon, the interior of that polygon is drawn\n        with the newly set fillcolor.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.fillcolor(\'violet\')\n        >>> col = turtle.pencolor()\n        >>> turtle.fillcolor(col)\n        >>> turtle.fillcolor(0, .5, 0)\n        ', lineno=2205, col_offset=-1), lineno=2205, col_offset=-1), If(Name('args', Load(), lineno=2206, col_offset=11), [Assign([Name('color', Store(), lineno=2207, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2207, col_offset=20), '_colorstr', Load(), lineno=2207, col_offset=20), [Name('args', Load(), lineno=2207, col_offset=35)], [], None, None, lineno=2207, col_offset=20), lineno=2207, col_offset=12), If(Compare(Name('color', Load(), lineno=2208, col_offset=15), [Eq()], [Attribute(Name('self', Load(), lineno=2208, col_offset=24), '_fillcolor', Load(), lineno=2208, col_offset=24)], lineno=2208, col_offset=15), [Return(None, lineno=2209, col_offset=16)], [], lineno=2208, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=2210, col_offset=12), 'pen', Load(), lineno=2210, col_offset=12), [], [keyword('fillcolor', Name('color', Load(), lineno=2210, col_offset=31))], None, None, lineno=2210, col_offset=12), lineno=2210, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=2212, col_offset=19), '_color', Load(), lineno=2212, col_offset=19), [Attribute(Name('self', Load(), lineno=2212, col_offset=31), '_fillcolor', Load(), lineno=2212, col_offset=31)], [], None, None, lineno=2212, col_offset=19), lineno=2212, col_offset=12)], lineno=2206, col_offset=8)], [], lineno=2178, col_offset=4), FunctionDef('showturtle', arguments([Name('self', Param(), lineno=2214, col_offset=19)], None, None, []), [Expr(Str('Makes the turtle visible.\n\n        Aliases: showturtle | st\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        >>> turtle.showturtle()\n        ', lineno=2224, col_offset=-1), lineno=2224, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2225, col_offset=8), 'pen', Load(), lineno=2225, col_offset=8), [], [keyword('shown', Name('True', Load(), lineno=2225, col_offset=23))], None, None, lineno=2225, col_offset=8), lineno=2225, col_offset=8)], [], lineno=2214, col_offset=4), FunctionDef('hideturtle', arguments([Name('self', Param(), lineno=2227, col_offset=19)], None, None, []), [Expr(Str("Makes the turtle invisible.\n\n        Aliases: hideturtle | ht\n\n        No argument.\n\n        It's a good idea to do this while you're in the\n        middle of a complicated drawing, because hiding\n        the turtle speeds up the drawing observably.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        ", lineno=2240, col_offset=-1), lineno=2240, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2241, col_offset=8), 'pen', Load(), lineno=2241, col_offset=8), [], [keyword('shown', Name('False', Load(), lineno=2241, col_offset=23))], None, None, lineno=2241, col_offset=8), lineno=2241, col_offset=8)], [], lineno=2227, col_offset=4), FunctionDef('isvisible', arguments([Name('self', Param(), lineno=2243, col_offset=18)], None, None, []), [Expr(Str("Return True if the Turtle is shown, False if it's hidden.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        >>> print turtle.isvisible():\n        False\n        ", lineno=2252, col_offset=-1), lineno=2252, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=2253, col_offset=15), '_shown', Load(), lineno=2253, col_offset=15), lineno=2253, col_offset=8)], [], lineno=2243, col_offset=4), FunctionDef('pen', arguments([Name('self', Param(), lineno=2255, col_offset=12), Name('pen', Param(), lineno=2255, col_offset=18)], None, 'pendict', [Name('None', Load(), lineno=2255, col_offset=22)]), [Expr(Str('Return or set the pen\'s attributes.\n\n        Arguments:\n            pen -- a dictionary with some or all of the below listed keys.\n            **pendict -- one or more keyword-arguments with the below\n                         listed keys as keywords.\n\n        Return or set the pen\'s attributes in a \'pen-dictionary\'\n        with the following key/value pairs:\n           "shown"      :   True/False\n           "pendown"    :   True/False\n           "pencolor"   :   color-string or color-tuple\n           "fillcolor"  :   color-string or color-tuple\n           "pensize"    :   positive number\n           "speed"      :   number in range 0..10\n           "resizemode" :   "auto" or "user" or "noresize"\n           "stretchfactor": (positive number, positive number)\n           "outline"    :   positive number\n           "tilt"       :   number\n\n        This dictionary can be used as argument for a subsequent\n        pen()-call to restore the former pen-state. Moreover one\n        or more of these attributes can be provided as keyword-arguments.\n        This can be used to set several pen attributes in one statement.\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)\n        >>> turtle.pen()\n        {\'pensize\': 10, \'shown\': True, \'resizemode\': \'auto\', \'outline\': 1,\n        \'pencolor\': \'red\', \'pendown\': True, \'fillcolor\': \'black\',\n        \'stretchfactor\': (1,1), \'speed\': 3}\n        >>> penstate=turtle.pen()\n        >>> turtle.color("yellow","")\n        >>> turtle.penup()\n        >>> turtle.pen()\n        {\'pensize\': 10, \'shown\': True, \'resizemode\': \'auto\', \'outline\': 1,\n        \'pencolor\': \'yellow\', \'pendown\': False, \'fillcolor\': \'\',\n        \'stretchfactor\': (1,1), \'speed\': 3}\n        >>> p.pen(penstate, fillcolor="green")\n        >>> p.pen()\n        {\'pensize\': 10, \'shown\': True, \'resizemode\': \'auto\', \'outline\': 1,\n        \'pencolor\': \'red\', \'pendown\': True, \'fillcolor\': \'green\',\n        \'stretchfactor\': (1,1), \'speed\': 3}\n        ', lineno=2300, col_offset=-1), lineno=2300, col_offset=-1), Assign([Name('_pd', Store(), lineno=2301, col_offset=8)], Dict([Str('shown', lineno=2301, col_offset=16), Str('pendown', lineno=2302, col_offset=16), Str('pencolor', lineno=2303, col_offset=16), Str('fillcolor', lineno=2304, col_offset=16), Str('pensize', lineno=2305, col_offset=16), Str('speed', lineno=2306, col_offset=16), Str('resizemode', lineno=2307, col_offset=16), Str('stretchfactor', lineno=2308, col_offset=16), Str('outline', lineno=2309, col_offset=16), Str('tilt', lineno=2310, col_offset=16)], [Attribute(Name('self', Load(), lineno=2301, col_offset=34), '_shown', Load(), lineno=2301, col_offset=34), Attribute(Name('self', Load(), lineno=2302, col_offset=34), '_drawing', Load(), lineno=2302, col_offset=34), Attribute(Name('self', Load(), lineno=2303, col_offset=34), '_pencolor', Load(), lineno=2303, col_offset=34), Attribute(Name('self', Load(), lineno=2304, col_offset=34), '_fillcolor', Load(), lineno=2304, col_offset=34), Attribute(Name('self', Load(), lineno=2305, col_offset=34), '_pensize', Load(), lineno=2305, col_offset=34), Attribute(Name('self', Load(), lineno=2306, col_offset=34), '_speed', Load(), lineno=2306, col_offset=34), Attribute(Name('self', Load(), lineno=2307, col_offset=34), '_resizemode', Load(), lineno=2307, col_offset=34), Attribute(Name('self', Load(), lineno=2308, col_offset=34), '_stretchfactor', Load(), lineno=2308, col_offset=34), Attribute(Name('self', Load(), lineno=2309, col_offset=34), '_outlinewidth', Load(), lineno=2309, col_offset=34), Attribute(Name('self', Load(), lineno=2310, col_offset=34), '_tilt', Load(), lineno=2310, col_offset=34)], lineno=2301, col_offset=15), lineno=2301, col_offset=8), If(UnaryOp(Not(), BoolOp(Or(), [Name('pen', Load(), lineno=2313, col_offset=16), Name('pendict', Load(), lineno=2313, col_offset=23)], lineno=2313, col_offset=16), lineno=2313, col_offset=11), [Return(Name('_pd', Load(), lineno=2314, col_offset=19), lineno=2314, col_offset=12)], [], lineno=2313, col_offset=8), If(Call(Name('isinstance', Load(), lineno=2316, col_offset=11), [Name('pen', Load(), lineno=2316, col_offset=22), Name('dict', Load(), lineno=2316, col_offset=27)], [], None, None, lineno=2316, col_offset=11), [Assign([Name('p', Store(), lineno=2317, col_offset=12)], Name('pen', Load(), lineno=2317, col_offset=16), lineno=2317, col_offset=12)], [Assign([Name('p', Store(), lineno=2319, col_offset=12)], Dict([], [], lineno=2319, col_offset=16), lineno=2319, col_offset=12)], lineno=2316, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=2320, col_offset=8), 'update', Load(), lineno=2320, col_offset=8), [Name('pendict', Load(), lineno=2320, col_offset=17)], [], None, None, lineno=2320, col_offset=8), lineno=2320, col_offset=8), Assign([Name('_p_buf', Store(), lineno=2322, col_offset=8)], Dict([], [], lineno=2322, col_offset=17), lineno=2322, col_offset=8), For(Name('key', Store(), lineno=2323, col_offset=12), Name('p', Load(), lineno=2323, col_offset=19), [Assign([Subscript(Name('_p_buf', Load(), lineno=2324, col_offset=12), Index(Name('key', Load(), lineno=2324, col_offset=19)), Store(), lineno=2324, col_offset=12)], Subscript(Name('_pd', Load(), lineno=2324, col_offset=26), Index(Name('key', Load(), lineno=2324, col_offset=30)), Load(), lineno=2324, col_offset=26), lineno=2324, col_offset=12)], [], lineno=2323, col_offset=8), If(Attribute(Name('self', Load(), lineno=2326, col_offset=11), 'undobuffer', Load(), lineno=2326, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2327, col_offset=12), 'undobuffer', Load(), lineno=2327, col_offset=12), 'push', Load(), lineno=2327, col_offset=12), [Tuple([Str('pen', lineno=2327, col_offset=34), Name('_p_buf', Load(), lineno=2327, col_offset=41)], Load(), lineno=2327, col_offset=34)], [], None, None, lineno=2327, col_offset=12), lineno=2327, col_offset=12)], [], lineno=2326, col_offset=8), Assign([Name('newLine', Store(), lineno=2329, col_offset=8)], Name('False', Load(), lineno=2329, col_offset=18), lineno=2329, col_offset=8), If(Compare(Str('pendown', lineno=2330, col_offset=11), [In()], [Name('p', Load(), lineno=2330, col_offset=24)], lineno=2330, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=2331, col_offset=15), '_drawing', Load(), lineno=2331, col_offset=15), [NotEq()], [Subscript(Name('p', Load(), lineno=2331, col_offset=32), Index(Str('pendown', lineno=2331, col_offset=34)), Load(), lineno=2331, col_offset=32)], lineno=2331, col_offset=15), [Assign([Name('newLine', Store(), lineno=2332, col_offset=16)], Name('True', Load(), lineno=2332, col_offset=26), lineno=2332, col_offset=16)], [], lineno=2331, col_offset=12)], [], lineno=2330, col_offset=8), If(Compare(Str('pencolor', lineno=2333, col_offset=11), [In()], [Name('p', Load(), lineno=2333, col_offset=25)], lineno=2333, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=2334, col_offset=15), [Subscript(Name('p', Load(), lineno=2334, col_offset=26), Index(Str('pencolor', lineno=2334, col_offset=28)), Load(), lineno=2334, col_offset=26), Name('tuple', Load(), lineno=2334, col_offset=41)], [], None, None, lineno=2334, col_offset=15), [Assign([Subscript(Name('p', Load(), lineno=2335, col_offset=16), Index(Str('pencolor', lineno=2335, col_offset=18)), Store(), lineno=2335, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=2335, col_offset=32), '_colorstr', Load(), lineno=2335, col_offset=32), [Tuple([Subscript(Name('p', Load(), lineno=2335, col_offset=48), Index(Str('pencolor', lineno=2335, col_offset=50)), Load(), lineno=2335, col_offset=48)], Load(), lineno=2335, col_offset=48)], [], None, None, lineno=2335, col_offset=32), lineno=2335, col_offset=16)], [], lineno=2334, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=2336, col_offset=15), '_pencolor', Load(), lineno=2336, col_offset=15), [NotEq()], [Subscript(Name('p', Load(), lineno=2336, col_offset=33), Index(Str('pencolor', lineno=2336, col_offset=35)), Load(), lineno=2336, col_offset=33)], lineno=2336, col_offset=15), [Assign([Name('newLine', Store(), lineno=2337, col_offset=16)], Name('True', Load(), lineno=2337, col_offset=26), lineno=2337, col_offset=16)], [], lineno=2336, col_offset=12)], [], lineno=2333, col_offset=8), If(Compare(Str('pensize', lineno=2338, col_offset=11), [In()], [Name('p', Load(), lineno=2338, col_offset=24)], lineno=2338, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=2339, col_offset=15), '_pensize', Load(), lineno=2339, col_offset=15), [NotEq()], [Subscript(Name('p', Load(), lineno=2339, col_offset=32), Index(Str('pensize', lineno=2339, col_offset=34)), Load(), lineno=2339, col_offset=32)], lineno=2339, col_offset=15), [Assign([Name('newLine', Store(), lineno=2340, col_offset=16)], Name('True', Load(), lineno=2340, col_offset=26), lineno=2340, col_offset=16)], [], lineno=2339, col_offset=12)], [], lineno=2338, col_offset=8), If(Name('newLine', Load(), lineno=2341, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=2342, col_offset=12), '_newLine', Load(), lineno=2342, col_offset=12), [], [], None, None, lineno=2342, col_offset=12), lineno=2342, col_offset=12)], [], lineno=2341, col_offset=8), If(Compare(Str('pendown', lineno=2343, col_offset=11), [In()], [Name('p', Load(), lineno=2343, col_offset=24)], lineno=2343, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2344, col_offset=12), '_drawing', Store(), lineno=2344, col_offset=12)], Subscript(Name('p', Load(), lineno=2344, col_offset=28), Index(Str('pendown', lineno=2344, col_offset=30)), Load(), lineno=2344, col_offset=28), lineno=2344, col_offset=12)], [], lineno=2343, col_offset=8), If(Compare(Str('pencolor', lineno=2345, col_offset=11), [In()], [Name('p', Load(), lineno=2345, col_offset=25)], lineno=2345, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2346, col_offset=12), '_pencolor', Store(), lineno=2346, col_offset=12)], Subscript(Name('p', Load(), lineno=2346, col_offset=29), Index(Str('pencolor', lineno=2346, col_offset=31)), Load(), lineno=2346, col_offset=29), lineno=2346, col_offset=12)], [], lineno=2345, col_offset=8), If(Compare(Str('pensize', lineno=2347, col_offset=11), [In()], [Name('p', Load(), lineno=2347, col_offset=24)], lineno=2347, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2348, col_offset=12), '_pensize', Store(), lineno=2348, col_offset=12)], Subscript(Name('p', Load(), lineno=2348, col_offset=28), Index(Str('pensize', lineno=2348, col_offset=30)), Load(), lineno=2348, col_offset=28), lineno=2348, col_offset=12)], [], lineno=2347, col_offset=8), If(Compare(Str('fillcolor', lineno=2349, col_offset=11), [In()], [Name('p', Load(), lineno=2349, col_offset=26)], lineno=2349, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=2350, col_offset=15), [Subscript(Name('p', Load(), lineno=2350, col_offset=26), Index(Str('fillcolor', lineno=2350, col_offset=28)), Load(), lineno=2350, col_offset=26), Name('tuple', Load(), lineno=2350, col_offset=42)], [], None, None, lineno=2350, col_offset=15), [Assign([Subscript(Name('p', Load(), lineno=2351, col_offset=16), Index(Str('fillcolor', lineno=2351, col_offset=18)), Store(), lineno=2351, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=2351, col_offset=33), '_colorstr', Load(), lineno=2351, col_offset=33), [Tuple([Subscript(Name('p', Load(), lineno=2351, col_offset=49), Index(Str('fillcolor', lineno=2351, col_offset=51)), Load(), lineno=2351, col_offset=49)], Load(), lineno=2351, col_offset=49)], [], None, None, lineno=2351, col_offset=33), lineno=2351, col_offset=16)], [], lineno=2350, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=2352, col_offset=12), '_fillcolor', Store(), lineno=2352, col_offset=12)], Subscript(Name('p', Load(), lineno=2352, col_offset=30), Index(Str('fillcolor', lineno=2352, col_offset=32)), Load(), lineno=2352, col_offset=30), lineno=2352, col_offset=12)], [], lineno=2349, col_offset=8), If(Compare(Str('speed', lineno=2353, col_offset=11), [In()], [Name('p', Load(), lineno=2353, col_offset=22)], lineno=2353, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2354, col_offset=12), '_speed', Store(), lineno=2354, col_offset=12)], Subscript(Name('p', Load(), lineno=2354, col_offset=26), Index(Str('speed', lineno=2354, col_offset=28)), Load(), lineno=2354, col_offset=26), lineno=2354, col_offset=12)], [], lineno=2353, col_offset=8), If(Compare(Str('resizemode', lineno=2355, col_offset=11), [In()], [Name('p', Load(), lineno=2355, col_offset=27)], lineno=2355, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2356, col_offset=12), '_resizemode', Store(), lineno=2356, col_offset=12)], Subscript(Name('p', Load(), lineno=2356, col_offset=31), Index(Str('resizemode', lineno=2356, col_offset=33)), Load(), lineno=2356, col_offset=31), lineno=2356, col_offset=12)], [], lineno=2355, col_offset=8), If(Compare(Str('stretchfactor', lineno=2357, col_offset=11), [In()], [Name('p', Load(), lineno=2357, col_offset=30)], lineno=2357, col_offset=11), [Assign([Name('sf', Store(), lineno=2358, col_offset=12)], Subscript(Name('p', Load(), lineno=2358, col_offset=17), Index(Str('stretchfactor', lineno=2358, col_offset=19)), Load(), lineno=2358, col_offset=17), lineno=2358, col_offset=12), If(Call(Name('isinstance', Load(), lineno=2359, col_offset=15), [Name('sf', Load(), lineno=2359, col_offset=26), Tuple([Name('int', Load(), lineno=2359, col_offset=31), Name('float', Load(), lineno=2359, col_offset=36)], Load(), lineno=2359, col_offset=31)], [], None, None, lineno=2359, col_offset=15), [Assign([Name('sf', Store(), lineno=2360, col_offset=16)], Tuple([Name('sf', Load(), lineno=2360, col_offset=22), Name('sf', Load(), lineno=2360, col_offset=26)], Load(), lineno=2360, col_offset=22), lineno=2360, col_offset=16)], [], lineno=2359, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=2361, col_offset=12), '_stretchfactor', Store(), lineno=2361, col_offset=12)], Name('sf', Load(), lineno=2361, col_offset=34), lineno=2361, col_offset=12)], [], lineno=2357, col_offset=8), If(Compare(Str('outline', lineno=2362, col_offset=11), [In()], [Name('p', Load(), lineno=2362, col_offset=24)], lineno=2362, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2363, col_offset=12), '_outlinewidth', Store(), lineno=2363, col_offset=12)], Subscript(Name('p', Load(), lineno=2363, col_offset=33), Index(Str('outline', lineno=2363, col_offset=35)), Load(), lineno=2363, col_offset=33), lineno=2363, col_offset=12)], [], lineno=2362, col_offset=8), If(Compare(Str('shown', lineno=2364, col_offset=11), [In()], [Name('p', Load(), lineno=2364, col_offset=22)], lineno=2364, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2365, col_offset=12), '_shown', Store(), lineno=2365, col_offset=12)], Subscript(Name('p', Load(), lineno=2365, col_offset=26), Index(Str('shown', lineno=2365, col_offset=28)), Load(), lineno=2365, col_offset=26), lineno=2365, col_offset=12)], [], lineno=2364, col_offset=8), If(Compare(Str('tilt', lineno=2366, col_offset=11), [In()], [Name('p', Load(), lineno=2366, col_offset=21)], lineno=2366, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2367, col_offset=12), '_tilt', Store(), lineno=2367, col_offset=12)], Subscript(Name('p', Load(), lineno=2367, col_offset=25), Index(Str('tilt', lineno=2367, col_offset=27)), Load(), lineno=2367, col_offset=25), lineno=2367, col_offset=12)], [], lineno=2366, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2368, col_offset=8), '_update', Load(), lineno=2368, col_offset=8), [], [], None, None, lineno=2368, col_offset=8), lineno=2368, col_offset=8)], [], lineno=2255, col_offset=4), FunctionDef('_newLine', arguments([Name('self', Param(), lineno=2372, col_offset=17), Name('usePos', Param(), lineno=2372, col_offset=23)], None, None, [Name('True', Load(), lineno=2372, col_offset=32)]), [Expr(Str('dummy method - to be overwritten by child class', lineno=2373, col_offset=8), lineno=2373, col_offset=8)], [], lineno=2372, col_offset=4), FunctionDef('_update', arguments([Name('self', Param(), lineno=2374, col_offset=16), Name('count', Param(), lineno=2374, col_offset=22), Name('forced', Param(), lineno=2374, col_offset=34)], None, None, [Name('True', Load(), lineno=2374, col_offset=28), Name('False', Load(), lineno=2374, col_offset=41)]), [Expr(Str('dummy method - to be overwritten by child class', lineno=2375, col_offset=8), lineno=2375, col_offset=8)], [], lineno=2374, col_offset=4), FunctionDef('_color', arguments([Name('self', Param(), lineno=2376, col_offset=15), Name('args', Param(), lineno=2376, col_offset=21)], None, None, []), [Expr(Str('dummy method - to be overwritten by child class', lineno=2377, col_offset=8), lineno=2377, col_offset=8)], [], lineno=2376, col_offset=4), FunctionDef('_colorstr', arguments([Name('self', Param(), lineno=2378, col_offset=18), Name('args', Param(), lineno=2378, col_offset=24)], None, None, []), [Expr(Str('dummy method - to be overwritten by child class', lineno=2379, col_offset=8), lineno=2379, col_offset=8)], [], lineno=2378, col_offset=4), Assign([Name('width', Store(), lineno=2381, col_offset=4)], Name('pensize', Load(), lineno=2381, col_offset=12), lineno=2381, col_offset=4), Assign([Name('up', Store(), lineno=2382, col_offset=4)], Name('penup', Load(), lineno=2382, col_offset=9), lineno=2382, col_offset=4), Assign([Name('pu', Store(), lineno=2383, col_offset=4)], Name('penup', Load(), lineno=2383, col_offset=9), lineno=2383, col_offset=4), Assign([Name('pd', Store(), lineno=2384, col_offset=4)], Name('pendown', Load(), lineno=2384, col_offset=9), lineno=2384, col_offset=4), Assign([Name('down', Store(), lineno=2385, col_offset=4)], Name('pendown', Load(), lineno=2385, col_offset=11), lineno=2385, col_offset=4), Assign([Name('st', Store(), lineno=2386, col_offset=4)], Name('showturtle', Load(), lineno=2386, col_offset=9), lineno=2386, col_offset=4), Assign([Name('ht', Store(), lineno=2387, col_offset=4)], Name('hideturtle', Load(), lineno=2387, col_offset=9), lineno=2387, col_offset=4)], [], lineno=1941, col_offset=0), ClassDef('_TurtleImage', [Name('object', Load(), lineno=2390, col_offset=19)], [Expr(Str('Helper class: Datatype to store Turtle attributes\n    ', lineno=2392, col_offset=-1), lineno=2392, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2394, col_offset=17), Name('screen', Param(), lineno=2394, col_offset=23), Name('shapeIndex', Param(), lineno=2394, col_offset=31)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=2395, col_offset=8), 'screen', Store(), lineno=2395, col_offset=8)], Name('screen', Load(), lineno=2395, col_offset=22), lineno=2395, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2396, col_offset=8), '_type', Store(), lineno=2396, col_offset=8)], Name('None', Load(), lineno=2396, col_offset=21), lineno=2396, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2397, col_offset=8), '_setshape', Load(), lineno=2397, col_offset=8), [Name('shapeIndex', Load(), lineno=2397, col_offset=23)], [], None, None, lineno=2397, col_offset=8), lineno=2397, col_offset=8)], [], lineno=2394, col_offset=4), FunctionDef('_setshape', arguments([Name('self', Param(), lineno=2399, col_offset=18), Name('shapeIndex', Param(), lineno=2399, col_offset=24)], None, None, []), [Assign([Name('screen', Store(), lineno=2400, col_offset=8)], Attribute(Name('self', Load(), lineno=2400, col_offset=17), 'screen', Load(), lineno=2400, col_offset=17), lineno=2400, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2401, col_offset=8), 'shapeIndex', Store(), lineno=2401, col_offset=8)], Name('shapeIndex', Load(), lineno=2401, col_offset=26), lineno=2401, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2402, col_offset=11), '_type', Load(), lineno=2402, col_offset=11), [Eq(), Eq()], [Str('polygon', lineno=2402, col_offset=25), Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2402, col_offset=38), '_shapes', Load(), lineno=2402, col_offset=38), Index(Name('shapeIndex', Load(), lineno=2402, col_offset=53)), Load(), lineno=2402, col_offset=38), '_type', Load(), lineno=2402, col_offset=38)], lineno=2402, col_offset=11), [Return(None, lineno=2403, col_offset=12)], [], lineno=2402, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2404, col_offset=11), '_type', Load(), lineno=2404, col_offset=11), [Eq(), Eq()], [Str('image', lineno=2404, col_offset=25), Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2404, col_offset=36), '_shapes', Load(), lineno=2404, col_offset=36), Index(Name('shapeIndex', Load(), lineno=2404, col_offset=51)), Load(), lineno=2404, col_offset=36), '_type', Load(), lineno=2404, col_offset=36)], lineno=2404, col_offset=11), [Return(None, lineno=2405, col_offset=12)], [], lineno=2404, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2406, col_offset=11), '_type', Load(), lineno=2406, col_offset=11), [In()], [List([Str('image', lineno=2406, col_offset=26), Str('polygon', lineno=2406, col_offset=35)], Load(), lineno=2406, col_offset=25)], lineno=2406, col_offset=11), [Expr(Call(Attribute(Name('screen', Load(), lineno=2407, col_offset=12), '_delete', Load(), lineno=2407, col_offset=12), [Attribute(Name('self', Load(), lineno=2407, col_offset=27), '_item', Load(), lineno=2407, col_offset=27)], [], None, None, lineno=2407, col_offset=12), lineno=2407, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=2408, col_offset=13), '_type', Load(), lineno=2408, col_offset=13), [Eq()], [Str('compound', lineno=2408, col_offset=27)], lineno=2408, col_offset=13), [For(Name('item', Store(), lineno=2409, col_offset=16), Attribute(Name('self', Load(), lineno=2409, col_offset=24), '_item', Load(), lineno=2409, col_offset=24), [Expr(Call(Attribute(Name('screen', Load(), lineno=2410, col_offset=16), '_delete', Load(), lineno=2410, col_offset=16), [Name('item', Load(), lineno=2410, col_offset=31)], [], None, None, lineno=2410, col_offset=16), lineno=2410, col_offset=16)], [], lineno=2409, col_offset=12)], [], lineno=2408, col_offset=13)], lineno=2406, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2411, col_offset=8), '_type', Store(), lineno=2411, col_offset=8)], Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2411, col_offset=21), '_shapes', Load(), lineno=2411, col_offset=21), Index(Name('shapeIndex', Load(), lineno=2411, col_offset=36)), Load(), lineno=2411, col_offset=21), '_type', Load(), lineno=2411, col_offset=21), lineno=2411, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=2412, col_offset=11), '_type', Load(), lineno=2412, col_offset=11), [Eq()], [Str('polygon', lineno=2412, col_offset=25)], lineno=2412, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2413, col_offset=12), '_item', Store(), lineno=2413, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2413, col_offset=25), '_createpoly', Load(), lineno=2413, col_offset=25), [], [], None, None, lineno=2413, col_offset=25), lineno=2413, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=2414, col_offset=13), '_type', Load(), lineno=2414, col_offset=13), [Eq()], [Str('image', lineno=2414, col_offset=27)], lineno=2414, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=2415, col_offset=12), '_item', Store(), lineno=2415, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2415, col_offset=25), '_createimage', Load(), lineno=2415, col_offset=25), [Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2415, col_offset=45), '_shapes', Load(), lineno=2415, col_offset=45), Index(Str('blank', lineno=2415, col_offset=60)), Load(), lineno=2415, col_offset=45), '_data', Load(), lineno=2415, col_offset=45)], [], None, None, lineno=2415, col_offset=25), lineno=2415, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=2416, col_offset=13), '_type', Load(), lineno=2416, col_offset=13), [Eq()], [Str('compound', lineno=2416, col_offset=27)], lineno=2416, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=2417, col_offset=12), '_item', Store(), lineno=2417, col_offset=12)], ListComp(Call(Attribute(Name('screen', Load(), lineno=2417, col_offset=26), '_createpoly', Load(), lineno=2417, col_offset=26), [], [], None, None, lineno=2417, col_offset=26), [comprehension(Name('item', Store(), lineno=2417, col_offset=51), Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2418, col_offset=42), '_shapes', Load(), lineno=2418, col_offset=42), Index(Name('shapeIndex', Load(), lineno=2418, col_offset=57)), Load(), lineno=2418, col_offset=42), '_data', Load(), lineno=2418, col_offset=42), [])], lineno=2417, col_offset=26), lineno=2417, col_offset=12)], [], lineno=2416, col_offset=13)], lineno=2414, col_offset=13)], lineno=2412, col_offset=8)], [], lineno=2399, col_offset=4)], [], lineno=2390, col_offset=0), ClassDef('RawTurtle', [Name('TPen', Load(), lineno=2421, col_offset=16), Name('TNavigator', Load(), lineno=2421, col_offset=22)], [Expr(Str('Animation part of the RawTurtle.\n    Puts RawTurtle upon a TurtleScreen and provides tools for\n    its animation.\n    ', lineno=2425, col_offset=-1), lineno=2425, col_offset=-1), Assign([Name('screens', Store(), lineno=2426, col_offset=4)], List([], Load(), lineno=2426, col_offset=14), lineno=2426, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2428, col_offset=17), Name('canvas', Param(), lineno=2428, col_offset=23), Name('shape', Param(), lineno=2429, col_offset=17), Name('undobuffersize', Param(), lineno=2430, col_offset=17), Name('visible', Param(), lineno=2431, col_offset=17)], None, None, [Name('None', Load(), lineno=2428, col_offset=30), Subscript(Name('_CFG', Load(), lineno=2429, col_offset=23), Index(Str('shape', lineno=2429, col_offset=28)), Load(), lineno=2429, col_offset=23), Subscript(Name('_CFG', Load(), lineno=2430, col_offset=32), Index(Str('undobuffersize', lineno=2430, col_offset=37)), Load(), lineno=2430, col_offset=32), Subscript(Name('_CFG', Load(), lineno=2431, col_offset=25), Index(Str('visible', lineno=2431, col_offset=30)), Load(), lineno=2431, col_offset=25)]), [If(Call(Name('isinstance', Load(), lineno=2432, col_offset=11), [Name('canvas', Load(), lineno=2432, col_offset=22), Name('_Screen', Load(), lineno=2432, col_offset=30)], [], None, None, lineno=2432, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2433, col_offset=12), 'screen', Store(), lineno=2433, col_offset=12)], Name('canvas', Load(), lineno=2433, col_offset=26), lineno=2433, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=2434, col_offset=13), [Name('canvas', Load(), lineno=2434, col_offset=24), Name('TurtleScreen', Load(), lineno=2434, col_offset=32)], [], None, None, lineno=2434, col_offset=13), [If(Compare(Name('canvas', Load(), lineno=2435, col_offset=15), [NotIn()], [Attribute(Name('RawTurtle', Load(), lineno=2435, col_offset=29), 'screens', Load(), lineno=2435, col_offset=29)], lineno=2435, col_offset=15), [Expr(Call(Attribute(Attribute(Name('RawTurtle', Load(), lineno=2436, col_offset=16), 'screens', Load(), lineno=2436, col_offset=16), 'append', Load(), lineno=2436, col_offset=16), [Name('canvas', Load(), lineno=2436, col_offset=41)], [], None, None, lineno=2436, col_offset=16), lineno=2436, col_offset=16)], [], lineno=2435, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=2437, col_offset=12), 'screen', Store(), lineno=2437, col_offset=12)], Name('canvas', Load(), lineno=2437, col_offset=26), lineno=2437, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=2438, col_offset=13), [Name('canvas', Load(), lineno=2438, col_offset=24), Tuple([Name('ScrolledCanvas', Load(), lineno=2438, col_offset=33), Name('Canvas', Load(), lineno=2438, col_offset=49)], Load(), lineno=2438, col_offset=33)], [], None, None, lineno=2438, col_offset=13), [For(Name('screen', Store(), lineno=2439, col_offset=16), Attribute(Name('RawTurtle', Load(), lineno=2439, col_offset=26), 'screens', Load(), lineno=2439, col_offset=26), [If(Compare(Attribute(Name('screen', Load(), lineno=2440, col_offset=19), 'cv', Load(), lineno=2440, col_offset=19), [Eq()], [Name('canvas', Load(), lineno=2440, col_offset=32)], lineno=2440, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=2441, col_offset=20), 'screen', Store(), lineno=2441, col_offset=20)], Name('screen', Load(), lineno=2441, col_offset=34), lineno=2441, col_offset=20), Break( lineno=2442, col_offset=20)], [], lineno=2440, col_offset=16)], [Assign([Attribute(Name('self', Load(), lineno=2444, col_offset=16), 'screen', Store(), lineno=2444, col_offset=16)], Call(Name('TurtleScreen', Load(), lineno=2444, col_offset=30), [Name('canvas', Load(), lineno=2444, col_offset=43)], [], None, None, lineno=2444, col_offset=30), lineno=2444, col_offset=16), Expr(Call(Attribute(Attribute(Name('RawTurtle', Load(), lineno=2445, col_offset=16), 'screens', Load(), lineno=2445, col_offset=16), 'append', Load(), lineno=2445, col_offset=16), [Attribute(Name('self', Load(), lineno=2445, col_offset=41), 'screen', Load(), lineno=2445, col_offset=41)], [], None, None, lineno=2445, col_offset=16), lineno=2445, col_offset=16)], lineno=2439, col_offset=12)], [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=2447, col_offset=18), [BinOp(Str('bad cavas argument %s', lineno=2447, col_offset=38), Mod(), Name('canvas', Load(), lineno=2447, col_offset=64), lineno=2447, col_offset=38)], [], None, None, lineno=2447, col_offset=18), None, None, lineno=2447, col_offset=12)], lineno=2438, col_offset=13)], lineno=2434, col_offset=13)], lineno=2432, col_offset=8), Assign([Name('screen', Store(), lineno=2449, col_offset=8)], Attribute(Name('self', Load(), lineno=2449, col_offset=17), 'screen', Load(), lineno=2449, col_offset=17), lineno=2449, col_offset=8), Expr(Call(Attribute(Name('TNavigator', Load(), lineno=2450, col_offset=8), '__init__', Load(), lineno=2450, col_offset=8), [Name('self', Load(), lineno=2450, col_offset=28), Call(Attribute(Name('screen', Load(), lineno=2450, col_offset=34), 'mode', Load(), lineno=2450, col_offset=34), [], [], None, None, lineno=2450, col_offset=34)], [], None, None, lineno=2450, col_offset=8), lineno=2450, col_offset=8), Expr(Call(Attribute(Name('TPen', Load(), lineno=2451, col_offset=8), '__init__', Load(), lineno=2451, col_offset=8), [Name('self', Load(), lineno=2451, col_offset=22)], [], None, None, lineno=2451, col_offset=8), lineno=2451, col_offset=8), Expr(Call(Attribute(Attribute(Name('screen', Load(), lineno=2452, col_offset=8), '_turtles', Load(), lineno=2452, col_offset=8), 'append', Load(), lineno=2452, col_offset=8), [Name('self', Load(), lineno=2452, col_offset=31)], [], None, None, lineno=2452, col_offset=8), lineno=2452, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2453, col_offset=8), 'drawingLineItem', Store(), lineno=2453, col_offset=8)], Call(Attribute(Name('screen', Load(), lineno=2453, col_offset=31), '_createline', Load(), lineno=2453, col_offset=31), [], [], None, None, lineno=2453, col_offset=31), lineno=2453, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2454, col_offset=8), 'turtle', Store(), lineno=2454, col_offset=8)], Call(Name('_TurtleImage', Load(), lineno=2454, col_offset=22), [Name('screen', Load(), lineno=2454, col_offset=35), Name('shape', Load(), lineno=2454, col_offset=43)], [], None, None, lineno=2454, col_offset=22), lineno=2454, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2455, col_offset=8), '_poly', Store(), lineno=2455, col_offset=8)], Name('None', Load(), lineno=2455, col_offset=21), lineno=2455, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2456, col_offset=8), '_creatingPoly', Store(), lineno=2456, col_offset=8)], Name('False', Load(), lineno=2456, col_offset=29), lineno=2456, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2457, col_offset=8), '_fillitem', Store(), lineno=2457, col_offset=8), Attribute(Name('self', Load(), lineno=2457, col_offset=25), '_fillpath', Store(), lineno=2457, col_offset=25)], Name('None', Load(), lineno=2457, col_offset=42), lineno=2457, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2458, col_offset=8), '_shown', Store(), lineno=2458, col_offset=8)], Name('visible', Load(), lineno=2458, col_offset=22), lineno=2458, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2459, col_offset=8), '_hidden_from_screen', Store(), lineno=2459, col_offset=8)], Name('False', Load(), lineno=2459, col_offset=35), lineno=2459, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2460, col_offset=8), 'currentLineItem', Store(), lineno=2460, col_offset=8)], Call(Attribute(Name('screen', Load(), lineno=2460, col_offset=31), '_createline', Load(), lineno=2460, col_offset=31), [], [], None, None, lineno=2460, col_offset=31), lineno=2460, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2461, col_offset=8), 'currentLine', Store(), lineno=2461, col_offset=8)], List([Attribute(Name('self', Load(), lineno=2461, col_offset=28), '_position', Load(), lineno=2461, col_offset=28)], Load(), lineno=2461, col_offset=27), lineno=2461, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2462, col_offset=8), 'items', Store(), lineno=2462, col_offset=8)], List([Attribute(Name('self', Load(), lineno=2462, col_offset=22), 'currentLineItem', Load(), lineno=2462, col_offset=22)], Load(), lineno=2462, col_offset=21), lineno=2462, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2463, col_offset=8), 'stampItems', Store(), lineno=2463, col_offset=8)], List([], Load(), lineno=2463, col_offset=26), lineno=2463, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2464, col_offset=8), '_undobuffersize', Store(), lineno=2464, col_offset=8)], Name('undobuffersize', Load(), lineno=2464, col_offset=31), lineno=2464, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2465, col_offset=8), 'undobuffer', Store(), lineno=2465, col_offset=8)], Call(Name('Tbuffer', Load(), lineno=2465, col_offset=26), [Name('undobuffersize', Load(), lineno=2465, col_offset=34)], [], None, None, lineno=2465, col_offset=26), lineno=2465, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2466, col_offset=8), '_update', Load(), lineno=2466, col_offset=8), [], [], None, None, lineno=2466, col_offset=8), lineno=2466, col_offset=8)], [], lineno=2428, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=2468, col_offset=14)], None, None, []), [Expr(Str("Delete the turtle's drawings and restore its default values.\n\n        No argument.\n,\n        Delete the turtle's drawings from the screen, re-center the turtle\n        and set variables to the default values.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00,-22.00)\n        >>> turtle.heading()\n        100.0\n        >>> turtle.reset()\n        >>> turtle.position()\n        (0.00,0.00)\n        >>> turtle.heading()\n        0.0\n        ", lineno=2486, col_offset=-1), lineno=2486, col_offset=-1), Expr(Call(Attribute(Name('TNavigator', Load(), lineno=2487, col_offset=8), 'reset', Load(), lineno=2487, col_offset=8), [Name('self', Load(), lineno=2487, col_offset=25)], [], None, None, lineno=2487, col_offset=8), lineno=2487, col_offset=8), Expr(Call(Attribute(Name('TPen', Load(), lineno=2488, col_offset=8), '_reset', Load(), lineno=2488, col_offset=8), [Name('self', Load(), lineno=2488, col_offset=20)], [], None, None, lineno=2488, col_offset=8), lineno=2488, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2489, col_offset=8), '_clear', Load(), lineno=2489, col_offset=8), [], [], None, None, lineno=2489, col_offset=8), lineno=2489, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2490, col_offset=8), '_drawturtle', Load(), lineno=2490, col_offset=8), [], [], None, None, lineno=2490, col_offset=8), lineno=2490, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2491, col_offset=8), '_update', Load(), lineno=2491, col_offset=8), [], [], None, None, lineno=2491, col_offset=8), lineno=2491, col_offset=8)], [], lineno=2468, col_offset=4), FunctionDef('setundobuffer', arguments([Name('self', Param(), lineno=2493, col_offset=22), Name('size', Param(), lineno=2493, col_offset=28)], None, None, []), [Expr(Str('Set or disable undobuffer.\n\n        Argument:\n        size -- an integer or None\n\n        If size is an integer an empty undobuffer of given size is installed.\n        Size gives the maximum number of turtle-actions that can be undone\n        by the undo() function.\n        If size is None, no undobuffer is present.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.setundobuffer(42)\n        ', lineno=2506, col_offset=-1), lineno=2506, col_offset=-1), If(Compare(Name('size', Load(), lineno=2507, col_offset=11), [Is()], [Name('None', Load(), lineno=2507, col_offset=19)], lineno=2507, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2508, col_offset=12), 'undobuffer', Store(), lineno=2508, col_offset=12)], Name('None', Load(), lineno=2508, col_offset=30), lineno=2508, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=2510, col_offset=12), 'undobuffer', Store(), lineno=2510, col_offset=12)], Call(Name('Tbuffer', Load(), lineno=2510, col_offset=30), [Name('size', Load(), lineno=2510, col_offset=38)], [], None, None, lineno=2510, col_offset=30), lineno=2510, col_offset=12)], lineno=2507, col_offset=8)], [], lineno=2493, col_offset=4), FunctionDef('undobufferentries', arguments([Name('self', Param(), lineno=2512, col_offset=26)], None, None, []), [Expr(Str('Return count of entries in the undobuffer.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> while undobufferentries():\n                undo()\n        ', lineno=2520, col_offset=-1), lineno=2520, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=2521, col_offset=11), 'undobuffer', Load(), lineno=2521, col_offset=11), [Is()], [Name('None', Load(), lineno=2521, col_offset=30)], lineno=2521, col_offset=11), [Return(Num(0, lineno=2522, col_offset=19), lineno=2522, col_offset=12)], [], lineno=2521, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2523, col_offset=15), 'undobuffer', Load(), lineno=2523, col_offset=15), 'nr_of_items', Load(), lineno=2523, col_offset=15), [], [], None, None, lineno=2523, col_offset=15), lineno=2523, col_offset=8)], [], lineno=2512, col_offset=4), FunctionDef('_clear', arguments([Name('self', Param(), lineno=2525, col_offset=15)], None, None, []), [Expr(Str("Delete all of pen's drawings", lineno=2526, col_offset=8), lineno=2526, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2527, col_offset=8), '_fillitem', Store(), lineno=2527, col_offset=8), Attribute(Name('self', Load(), lineno=2527, col_offset=25), '_fillpath', Store(), lineno=2527, col_offset=25)], Name('None', Load(), lineno=2527, col_offset=42), lineno=2527, col_offset=8), For(Name('item', Store(), lineno=2528, col_offset=12), Attribute(Name('self', Load(), lineno=2528, col_offset=20), 'items', Load(), lineno=2528, col_offset=20), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2529, col_offset=12), 'screen', Load(), lineno=2529, col_offset=12), '_delete', Load(), lineno=2529, col_offset=12), [Name('item', Load(), lineno=2529, col_offset=32)], [], None, None, lineno=2529, col_offset=12), lineno=2529, col_offset=12)], [], lineno=2528, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2530, col_offset=8), 'currentLineItem', Store(), lineno=2530, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=2530, col_offset=31), 'screen', Load(), lineno=2530, col_offset=31), '_createline', Load(), lineno=2530, col_offset=31), [], [], None, None, lineno=2530, col_offset=31), lineno=2530, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2531, col_offset=8), 'currentLine', Store(), lineno=2531, col_offset=8)], List([], Load(), lineno=2531, col_offset=27), lineno=2531, col_offset=8), If(Attribute(Name('self', Load(), lineno=2532, col_offset=11), '_drawing', Load(), lineno=2532, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2533, col_offset=12), 'currentLine', Load(), lineno=2533, col_offset=12), 'append', Load(), lineno=2533, col_offset=12), [Attribute(Name('self', Load(), lineno=2533, col_offset=36), '_position', Load(), lineno=2533, col_offset=36)], [], None, None, lineno=2533, col_offset=12), lineno=2533, col_offset=12)], [], lineno=2532, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2534, col_offset=8), 'items', Store(), lineno=2534, col_offset=8)], List([Attribute(Name('self', Load(), lineno=2534, col_offset=22), 'currentLineItem', Load(), lineno=2534, col_offset=22)], Load(), lineno=2534, col_offset=21), lineno=2534, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2535, col_offset=8), 'clearstamps', Load(), lineno=2535, col_offset=8), [], [], None, None, lineno=2535, col_offset=8), lineno=2535, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2536, col_offset=8), 'setundobuffer', Load(), lineno=2536, col_offset=8), [Attribute(Name('self', Load(), lineno=2536, col_offset=27), '_undobuffersize', Load(), lineno=2536, col_offset=27)], [], None, None, lineno=2536, col_offset=8), lineno=2536, col_offset=8)], [], lineno=2525, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=2539, col_offset=14)], None, None, []), [Expr(Str("Delete the turtle's drawings from the screen. Do not move turtle.\n\n        No arguments.\n\n        Delete the turtle's drawings from the screen. Do not move turtle.\n        State and position of the turtle as well as drawings of other\n        turtles are not affected.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.clear()\n        ", lineno=2550, col_offset=-1), lineno=2550, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2551, col_offset=8), '_clear', Load(), lineno=2551, col_offset=8), [], [], None, None, lineno=2551, col_offset=8), lineno=2551, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2552, col_offset=8), '_update', Load(), lineno=2552, col_offset=8), [], [], None, None, lineno=2552, col_offset=8), lineno=2552, col_offset=8)], [], lineno=2539, col_offset=4), FunctionDef('_update_data', arguments([Name('self', Param(), lineno=2554, col_offset=21)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2555, col_offset=8), 'screen', Load(), lineno=2555, col_offset=8), '_incrementudc', Load(), lineno=2555, col_offset=8), [], [], None, None, lineno=2555, col_offset=8), lineno=2555, col_offset=8), If(Compare(Attribute(Attribute(Name('self', Load(), lineno=2556, col_offset=11), 'screen', Load(), lineno=2556, col_offset=11), '_updatecounter', Load(), lineno=2556, col_offset=11), [NotEq()], [Num(0, lineno=2556, col_offset=41)], lineno=2556, col_offset=11), [Return(None, lineno=2557, col_offset=12)], [], lineno=2556, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=2558, col_offset=11), [Attribute(Name('self', Load(), lineno=2558, col_offset=15), 'currentLine', Load(), lineno=2558, col_offset=15)], [], None, None, lineno=2558, col_offset=11), [Gt()], [Num(1, lineno=2558, col_offset=33)], lineno=2558, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2559, col_offset=12), 'screen', Load(), lineno=2559, col_offset=12), '_drawline', Load(), lineno=2559, col_offset=12), [Attribute(Name('self', Load(), lineno=2559, col_offset=34), 'currentLineItem', Load(), lineno=2559, col_offset=34), Attribute(Name('self', Load(), lineno=2559, col_offset=56), 'currentLine', Load(), lineno=2559, col_offset=56), Attribute(Name('self', Load(), lineno=2560, col_offset=34), '_pencolor', Load(), lineno=2560, col_offset=34), Attribute(Name('self', Load(), lineno=2560, col_offset=50), '_pensize', Load(), lineno=2560, col_offset=50)], [], None, None, lineno=2559, col_offset=12), lineno=2559, col_offset=12)], [], lineno=2558, col_offset=8)], [], lineno=2554, col_offset=4), FunctionDef('_update', arguments([Name('self', Param(), lineno=2562, col_offset=16)], None, None, []), [Expr(Str('Perform a Turtle-data update.\n        ', lineno=2564, col_offset=-1), lineno=2564, col_offset=-1), Assign([Name('screen', Store(), lineno=2565, col_offset=8)], Attribute(Name('self', Load(), lineno=2565, col_offset=17), 'screen', Load(), lineno=2565, col_offset=17), lineno=2565, col_offset=8), If(Compare(Attribute(Name('screen', Load(), lineno=2566, col_offset=11), '_tracing', Load(), lineno=2566, col_offset=11), [Eq()], [Num(0, lineno=2566, col_offset=30)], lineno=2566, col_offset=11), [Return(None, lineno=2567, col_offset=12)], [If(Compare(Attribute(Name('screen', Load(), lineno=2568, col_offset=13), '_tracing', Load(), lineno=2568, col_offset=13), [Eq()], [Num(1, lineno=2568, col_offset=32)], lineno=2568, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=2569, col_offset=12), '_update_data', Load(), lineno=2569, col_offset=12), [], [], None, None, lineno=2569, col_offset=12), lineno=2569, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=2570, col_offset=12), '_drawturtle', Load(), lineno=2570, col_offset=12), [], [], None, None, lineno=2570, col_offset=12), lineno=2570, col_offset=12), Expr(Call(Attribute(Name('screen', Load(), lineno=2571, col_offset=12), '_update', Load(), lineno=2571, col_offset=12), [], [], None, None, lineno=2571, col_offset=12), lineno=2571, col_offset=12), Expr(Call(Attribute(Name('screen', Load(), lineno=2572, col_offset=12), '_delay', Load(), lineno=2572, col_offset=12), [Attribute(Name('screen', Load(), lineno=2572, col_offset=26), '_delayvalue', Load(), lineno=2572, col_offset=26)], [], None, None, lineno=2572, col_offset=12), lineno=2572, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=2574, col_offset=12), '_update_data', Load(), lineno=2574, col_offset=12), [], [], None, None, lineno=2574, col_offset=12), lineno=2574, col_offset=12), If(Compare(Attribute(Name('screen', Load(), lineno=2575, col_offset=15), '_updatecounter', Load(), lineno=2575, col_offset=15), [Eq()], [Num(0, lineno=2575, col_offset=40)], lineno=2575, col_offset=15), [For(Name('t', Store(), lineno=2576, col_offset=20), Call(Attribute(Name('screen', Load(), lineno=2576, col_offset=25), 'turtles', Load(), lineno=2576, col_offset=25), [], [], None, None, lineno=2576, col_offset=25), [Expr(Call(Attribute(Name('t', Load(), lineno=2577, col_offset=20), '_drawturtle', Load(), lineno=2577, col_offset=20), [], [], None, None, lineno=2577, col_offset=20), lineno=2577, col_offset=20)], [], lineno=2576, col_offset=16), Expr(Call(Attribute(Name('screen', Load(), lineno=2578, col_offset=16), '_update', Load(), lineno=2578, col_offset=16), [], [], None, None, lineno=2578, col_offset=16), lineno=2578, col_offset=16)], [], lineno=2575, col_offset=12)], lineno=2568, col_offset=13)], lineno=2566, col_offset=8)], [], lineno=2562, col_offset=4), FunctionDef('tracer', arguments([Name('self', Param(), lineno=2580, col_offset=15), Name('flag', Param(), lineno=2580, col_offset=21), Name('delay', Param(), lineno=2580, col_offset=32)], None, None, [Name('None', Load(), lineno=2580, col_offset=26), Name('None', Load(), lineno=2580, col_offset=38)]), [Expr(Str('Turns turtle animation on/off and set delay for update drawings.\n\n        Optional arguments:\n        n -- nonnegative  integer\n        delay -- nonnegative  integer\n\n        If n is given, only each n-th regular screen update is really performed.\n        (Can be used to accelerate the drawing of complex graphics.)\n        Second arguments sets delay value (see RawTurtle.delay())\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.tracer(8, 25)\n        >>> dist = 2\n        >>> for i in range(200):\n                turtle.fd(dist)\n                turtle.rt(90)\n                dist += 2\n        ', lineno=2598, col_offset=-1), lineno=2598, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2599, col_offset=15), 'screen', Load(), lineno=2599, col_offset=15), 'tracer', Load(), lineno=2599, col_offset=15), [Name('flag', Load(), lineno=2599, col_offset=34), Name('delay', Load(), lineno=2599, col_offset=40)], [], None, None, lineno=2599, col_offset=15), lineno=2599, col_offset=8)], [], lineno=2580, col_offset=4), FunctionDef('_color', arguments([Name('self', Param(), lineno=2601, col_offset=15), Name('args', Param(), lineno=2601, col_offset=21)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2602, col_offset=15), 'screen', Load(), lineno=2602, col_offset=15), '_color', Load(), lineno=2602, col_offset=15), [Name('args', Load(), lineno=2602, col_offset=34)], [], None, None, lineno=2602, col_offset=15), lineno=2602, col_offset=8)], [], lineno=2601, col_offset=4), FunctionDef('_colorstr', arguments([Name('self', Param(), lineno=2604, col_offset=18), Name('args', Param(), lineno=2604, col_offset=24)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2605, col_offset=15), 'screen', Load(), lineno=2605, col_offset=15), '_colorstr', Load(), lineno=2605, col_offset=15), [Name('args', Load(), lineno=2605, col_offset=37)], [], None, None, lineno=2605, col_offset=15), lineno=2605, col_offset=8)], [], lineno=2604, col_offset=4), FunctionDef('_cc', arguments([Name('self', Param(), lineno=2607, col_offset=12), Name('args', Param(), lineno=2607, col_offset=18)], None, None, []), [Expr(Str('Convert colortriples to hexstrings.\n        ', lineno=2609, col_offset=-1), lineno=2609, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=2610, col_offset=11), [Name('args', Load(), lineno=2610, col_offset=22), Name('str', Load(), lineno=2610, col_offset=28)], [], None, None, lineno=2610, col_offset=11), [Return(Name('args', Load(), lineno=2611, col_offset=19), lineno=2611, col_offset=12)], [], lineno=2610, col_offset=8), TryExcept([Assign([Tuple([Name('r', Store(), lineno=2613, col_offset=12), Name('g', Store(), lineno=2613, col_offset=15), Name('b', Store(), lineno=2613, col_offset=18)], Store(), lineno=2613, col_offset=12)], Name('args', Load(), lineno=2613, col_offset=22), lineno=2613, col_offset=12)], [ExceptHandler(None, None, [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=2615, col_offset=18), [BinOp(Str('bad color arguments: %s', lineno=2615, col_offset=38), Mod(), Call(Name('str', Load(), lineno=2615, col_offset=66), [Name('args', Load(), lineno=2615, col_offset=70)], [], None, None, lineno=2615, col_offset=66), lineno=2615, col_offset=38)], [], None, None, lineno=2615, col_offset=18), None, None, lineno=2615, col_offset=12)], lineno=2614, col_offset=8)], [], lineno=2612, col_offset=8), If(Compare(Attribute(Attribute(Name('self', Load(), lineno=2616, col_offset=11), 'screen', Load(), lineno=2616, col_offset=11), '_colormode', Load(), lineno=2616, col_offset=11), [Eq()], [Num(1.0, lineno=2616, col_offset=37)], lineno=2616, col_offset=11), [Assign([Tuple([Name('r', Store(), lineno=2617, col_offset=12), Name('g', Store(), lineno=2617, col_offset=15), Name('b', Store(), lineno=2617, col_offset=18)], Store(), lineno=2617, col_offset=12)], ListComp(Call(Name('round', Load(), lineno=2617, col_offset=23), [BinOp(Num(255.0, lineno=2617, col_offset=29), Mult(), Name('x', Load(), lineno=2617, col_offset=35), lineno=2617, col_offset=29)], [], None, None, lineno=2617, col_offset=23), [comprehension(Name('x', Store(), lineno=2617, col_offset=42), Tuple([Name('r', Load(), lineno=2617, col_offset=48), Name('g', Load(), lineno=2617, col_offset=51), Name('b', Load(), lineno=2617, col_offset=54)], Load(), lineno=2617, col_offset=48), [])], lineno=2617, col_offset=23), lineno=2617, col_offset=12)], [], lineno=2616, col_offset=8), If(UnaryOp(Not(), BoolOp(And(), [Compare(Num(0, lineno=2618, col_offset=17), [LtE(), LtE()], [Name('r', Load(), lineno=2618, col_offset=22), Num(255, lineno=2618, col_offset=27)], lineno=2618, col_offset=17), Compare(Num(0, lineno=2618, col_offset=37), [LtE(), LtE()], [Name('g', Load(), lineno=2618, col_offset=42), Num(255, lineno=2618, col_offset=47)], lineno=2618, col_offset=37), Compare(Num(0, lineno=2618, col_offset=57), [LtE(), LtE()], [Name('b', Load(), lineno=2618, col_offset=62), Num(255, lineno=2618, col_offset=67)], lineno=2618, col_offset=57)], lineno=2618, col_offset=16), lineno=2618, col_offset=11), [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=2619, col_offset=18), [BinOp(Str('bad color sequence: %s', lineno=2619, col_offset=38), Mod(), Call(Name('str', Load(), lineno=2619, col_offset=65), [Name('args', Load(), lineno=2619, col_offset=69)], [], None, None, lineno=2619, col_offset=65), lineno=2619, col_offset=38)], [], None, None, lineno=2619, col_offset=18), None, None, lineno=2619, col_offset=12)], [], lineno=2618, col_offset=8), Return(BinOp(Str('#%02x%02x%02x', lineno=2620, col_offset=15), Mod(), Tuple([Name('r', Load(), lineno=2620, col_offset=34), Name('g', Load(), lineno=2620, col_offset=37), Name('b', Load(), lineno=2620, col_offset=40)], Load(), lineno=2620, col_offset=34), lineno=2620, col_offset=15), lineno=2620, col_offset=8)], [], lineno=2607, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=2622, col_offset=14)], None, None, []), [Expr(Str('Create and return a clone of the turtle.\n\n        No argument.\n\n        Create and return a clone of the turtle with same position, heading\n        and turtle properties.\n\n        Example (for a Turtle instance named mick):\n        mick = Turtle()\n        joe = mick.clone()\n        ', lineno=2633, col_offset=-1), lineno=2633, col_offset=-1), Assign([Name('screen', Store(), lineno=2634, col_offset=8)], Attribute(Name('self', Load(), lineno=2634, col_offset=17), 'screen', Load(), lineno=2634, col_offset=17), lineno=2634, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2635, col_offset=8), '_newLine', Load(), lineno=2635, col_offset=8), [Attribute(Name('self', Load(), lineno=2635, col_offset=22), '_drawing', Load(), lineno=2635, col_offset=22)], [], None, None, lineno=2635, col_offset=8), lineno=2635, col_offset=8), Assign([Name('turtle', Store(), lineno=2637, col_offset=8)], Attribute(Name('self', Load(), lineno=2637, col_offset=17), 'turtle', Load(), lineno=2637, col_offset=17), lineno=2637, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2638, col_offset=8), 'screen', Store(), lineno=2638, col_offset=8)], Name('None', Load(), lineno=2638, col_offset=22), lineno=2638, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2639, col_offset=8), 'turtle', Store(), lineno=2639, col_offset=8)], Name('None', Load(), lineno=2639, col_offset=22), lineno=2639, col_offset=8), Assign([Name('q', Store(), lineno=2641, col_offset=8)], Call(Name('deepcopy', Load(), lineno=2641, col_offset=12), [Name('self', Load(), lineno=2641, col_offset=21)], [], None, None, lineno=2641, col_offset=12), lineno=2641, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2643, col_offset=8), 'screen', Store(), lineno=2643, col_offset=8)], Name('screen', Load(), lineno=2643, col_offset=22), lineno=2643, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=2644, col_offset=8), 'turtle', Store(), lineno=2644, col_offset=8)], Name('turtle', Load(), lineno=2644, col_offset=22), lineno=2644, col_offset=8), Assign([Attribute(Name('q', Load(), lineno=2646, col_offset=8), 'screen', Store(), lineno=2646, col_offset=8)], Name('screen', Load(), lineno=2646, col_offset=19), lineno=2646, col_offset=8), Assign([Attribute(Name('q', Load(), lineno=2647, col_offset=8), 'turtle', Store(), lineno=2647, col_offset=8)], Call(Name('_TurtleImage', Load(), lineno=2647, col_offset=19), [Name('screen', Load(), lineno=2647, col_offset=32), Attribute(Attribute(Name('self', Load(), lineno=2647, col_offset=40), 'turtle', Load(), lineno=2647, col_offset=40), 'shapeIndex', Load(), lineno=2647, col_offset=40)], [], None, None, lineno=2647, col_offset=19), lineno=2647, col_offset=8), Expr(Call(Attribute(Attribute(Name('screen', Load(), lineno=2649, col_offset=8), '_turtles', Load(), lineno=2649, col_offset=8), 'append', Load(), lineno=2649, col_offset=8), [Name('q', Load(), lineno=2649, col_offset=31)], [], None, None, lineno=2649, col_offset=8), lineno=2649, col_offset=8), Assign([Name('ttype', Store(), lineno=2650, col_offset=8)], Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2650, col_offset=16), '_shapes', Load(), lineno=2650, col_offset=16), Index(Attribute(Attribute(Name('self', Load(), lineno=2650, col_offset=31), 'turtle', Load(), lineno=2650, col_offset=31), 'shapeIndex', Load(), lineno=2650, col_offset=31)), Load(), lineno=2650, col_offset=16), '_type', Load(), lineno=2650, col_offset=16), lineno=2650, col_offset=8), If(Compare(Name('ttype', Load(), lineno=2651, col_offset=11), [Eq()], [Str('polygon', lineno=2651, col_offset=20)], lineno=2651, col_offset=11), [Assign([Attribute(Attribute(Name('q', Load(), lineno=2652, col_offset=12), 'turtle', Load(), lineno=2652, col_offset=12), '_item', Store(), lineno=2652, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2652, col_offset=29), '_createpoly', Load(), lineno=2652, col_offset=29), [], [], None, None, lineno=2652, col_offset=29), lineno=2652, col_offset=12)], [If(Compare(Name('ttype', Load(), lineno=2653, col_offset=13), [Eq()], [Str('image', lineno=2653, col_offset=22)], lineno=2653, col_offset=13), [Assign([Attribute(Attribute(Name('q', Load(), lineno=2654, col_offset=12), 'turtle', Load(), lineno=2654, col_offset=12), '_item', Store(), lineno=2654, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2654, col_offset=29), '_createimage', Load(), lineno=2654, col_offset=29), [Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2654, col_offset=49), '_shapes', Load(), lineno=2654, col_offset=49), Index(Str('blank', lineno=2654, col_offset=64)), Load(), lineno=2654, col_offset=49), '_data', Load(), lineno=2654, col_offset=49)], [], None, None, lineno=2654, col_offset=29), lineno=2654, col_offset=12)], [If(Compare(Name('ttype', Load(), lineno=2655, col_offset=13), [Eq()], [Str('compound', lineno=2655, col_offset=22)], lineno=2655, col_offset=13), [Assign([Attribute(Attribute(Name('q', Load(), lineno=2656, col_offset=12), 'turtle', Load(), lineno=2656, col_offset=12), '_item', Store(), lineno=2656, col_offset=12)], ListComp(Call(Attribute(Name('screen', Load(), lineno=2656, col_offset=30), '_createpoly', Load(), lineno=2656, col_offset=30), [], [], None, None, lineno=2656, col_offset=30), [comprehension(Name('item', Store(), lineno=2656, col_offset=55), Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2657, col_offset=30), '_shapes', Load(), lineno=2657, col_offset=30), Index(Attribute(Attribute(Name('self', Load(), lineno=2657, col_offset=45), 'turtle', Load(), lineno=2657, col_offset=45), 'shapeIndex', Load(), lineno=2657, col_offset=45)), Load(), lineno=2657, col_offset=30), '_data', Load(), lineno=2657, col_offset=30), [])], lineno=2656, col_offset=30), lineno=2656, col_offset=12)], [], lineno=2655, col_offset=13)], lineno=2653, col_offset=13)], lineno=2651, col_offset=8), Assign([Attribute(Name('q', Load(), lineno=2658, col_offset=8), 'currentLineItem', Store(), lineno=2658, col_offset=8)], Call(Attribute(Name('screen', Load(), lineno=2658, col_offset=28), '_createline', Load(), lineno=2658, col_offset=28), [], [], None, None, lineno=2658, col_offset=28), lineno=2658, col_offset=8), Expr(Call(Attribute(Name('q', Load(), lineno=2659, col_offset=8), '_update', Load(), lineno=2659, col_offset=8), [], [], None, None, lineno=2659, col_offset=8), lineno=2659, col_offset=8), Return(Name('q', Load(), lineno=2660, col_offset=15), lineno=2660, col_offset=8)], [], lineno=2622, col_offset=4), FunctionDef('shape', arguments([Name('self', Param(), lineno=2662, col_offset=14), Name('name', Param(), lineno=2662, col_offset=20)], None, None, [Name('None', Load(), lineno=2662, col_offset=25)]), [Expr(Str('Set turtle shape to shape with given name / return current shapename.\n\n        Optional argument:\n        name -- a string, which is a valid shapename\n\n        Set turtle shape to shape with given name or, if name is not given,\n        return name of current shape.\n        Shape with name must exist in the TurtleScreen\'s shape dictionary.\n        Initially there are the following polygon shapes:\n        \'arrow\', \'turtle\', \'circle\', \'square\', \'triangle\', \'classic\'.\n        To learn about how to deal with shapes see Screen-method register_shape.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.shape()\n        \'arrow\'\n        >>> turtle.shape("turtle")\n        >>> turtle.shape()\n        \'turtle\'\n        ', lineno=2681, col_offset=-1), lineno=2681, col_offset=-1), If(Compare(Name('name', Load(), lineno=2682, col_offset=11), [Is()], [Name('None', Load(), lineno=2682, col_offset=19)], lineno=2682, col_offset=11), [Return(Attribute(Attribute(Name('self', Load(), lineno=2683, col_offset=19), 'turtle', Load(), lineno=2683, col_offset=19), 'shapeIndex', Load(), lineno=2683, col_offset=19), lineno=2683, col_offset=12)], [], lineno=2682, col_offset=8), If(UnaryOp(Not(), Compare(Name('name', Load(), lineno=2684, col_offset=15), [In()], [Call(Attribute(Attribute(Name('self', Load(), lineno=2684, col_offset=23), 'screen', Load(), lineno=2684, col_offset=23), 'getshapes', Load(), lineno=2684, col_offset=23), [], [], None, None, lineno=2684, col_offset=23)], lineno=2684, col_offset=15), lineno=2684, col_offset=11), [Raise(Call(Name('TurtleGraphicsError', Load(), lineno=2685, col_offset=18), [BinOp(Str('There is no shape named %s', lineno=2685, col_offset=38), Mod(), Name('name', Load(), lineno=2685, col_offset=69), lineno=2685, col_offset=38)], [], None, None, lineno=2685, col_offset=18), None, None, lineno=2685, col_offset=12)], [], lineno=2684, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2686, col_offset=8), 'turtle', Load(), lineno=2686, col_offset=8), '_setshape', Load(), lineno=2686, col_offset=8), [Name('name', Load(), lineno=2686, col_offset=30)], [], None, None, lineno=2686, col_offset=8), lineno=2686, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2687, col_offset=8), '_update', Load(), lineno=2687, col_offset=8), [], [], None, None, lineno=2687, col_offset=8), lineno=2687, col_offset=8)], [], lineno=2662, col_offset=4), FunctionDef('shapesize', arguments([Name('self', Param(), lineno=2689, col_offset=18), Name('stretch_wid', Param(), lineno=2689, col_offset=24), Name('stretch_len', Param(), lineno=2689, col_offset=42), Name('outline', Param(), lineno=2689, col_offset=60)], None, None, [Name('None', Load(), lineno=2689, col_offset=36), Name('None', Load(), lineno=2689, col_offset=54), Name('None', Load(), lineno=2689, col_offset=68)]), [Expr(Str('Set/return turtle\'s stretchfactors/outline. Set resizemode to "user".\n\n        Optinonal arguments:\n           stretch_wid : positive number\n           stretch_len : positive number\n           outline  : positive number\n\n        Return or set the pen\'s attributes x/y-stretchfactors and/or outline.\n        Set resizemode to "user".\n        If and only if resizemode is set to "user", the turtle will be displayed\n        stretched according to its stretchfactors:\n        stretch_wid is stretchfactor perpendicular to orientation\n        stretch_len is stretchfactor in direction of turtles orientation.\n        outline determines the width of the shapes\'s outline.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.resizemode("user")\n        >>> turtle.shapesize(5, 5, 12)\n        >>> turtle.shapesize(outline=8)\n        ', lineno=2709, col_offset=-1), lineno=2709, col_offset=-1), If(Compare(Name('stretch_wid', Load(), lineno=2710, col_offset=11), [Is(), Is(), Is()], [Name('stretch_len', Load(), lineno=2710, col_offset=26), Name('outline', Load(), lineno=2710, col_offset=41), Name('None', Load(), lineno=2710, col_offset=52)], lineno=2710, col_offset=11), [Assign([Tuple([Name('stretch_wid', Store(), lineno=2711, col_offset=12), Name('stretch_len', Store(), lineno=2711, col_offset=25)], Store(), lineno=2711, col_offset=12)], Attribute(Name('self', Load(), lineno=2711, col_offset=39), '_stretchfactor', Load(), lineno=2711, col_offset=39), lineno=2711, col_offset=12), Return(Tuple([Name('stretch_wid', Load(), lineno=2712, col_offset=19), Name('stretch_len', Load(), lineno=2712, col_offset=32), Attribute(Name('self', Load(), lineno=2712, col_offset=45), '_outlinewidth', Load(), lineno=2712, col_offset=45)], Load(), lineno=2712, col_offset=19), lineno=2712, col_offset=12)], [], lineno=2710, col_offset=8), If(Compare(Name('stretch_wid', Load(), lineno=2713, col_offset=11), [IsNot()], [Name('None', Load(), lineno=2713, col_offset=30)], lineno=2713, col_offset=11), [If(Compare(Name('stretch_len', Load(), lineno=2714, col_offset=15), [Is()], [Name('None', Load(), lineno=2714, col_offset=30)], lineno=2714, col_offset=15), [Assign([Name('stretchfactor', Store(), lineno=2715, col_offset=16)], Tuple([Name('stretch_wid', Load(), lineno=2715, col_offset=32), Name('stretch_wid', Load(), lineno=2715, col_offset=45)], Load(), lineno=2715, col_offset=32), lineno=2715, col_offset=16)], [Assign([Name('stretchfactor', Store(), lineno=2717, col_offset=16)], Tuple([Name('stretch_wid', Load(), lineno=2717, col_offset=32), Name('stretch_len', Load(), lineno=2717, col_offset=45)], Load(), lineno=2717, col_offset=32), lineno=2717, col_offset=16)], lineno=2714, col_offset=12)], [If(Compare(Name('stretch_len', Load(), lineno=2718, col_offset=13), [IsNot()], [Name('None', Load(), lineno=2718, col_offset=32)], lineno=2718, col_offset=13), [Assign([Name('stretchfactor', Store(), lineno=2719, col_offset=12)], Tuple([Subscript(Attribute(Name('self', Load(), lineno=2719, col_offset=28), '_stretchfactor', Load(), lineno=2719, col_offset=28), Index(Num(0, lineno=2719, col_offset=48)), Load(), lineno=2719, col_offset=28), Name('stretch_len', Load(), lineno=2719, col_offset=52)], Load(), lineno=2719, col_offset=28), lineno=2719, col_offset=12)], [Assign([Name('stretchfactor', Store(), lineno=2721, col_offset=12)], Attribute(Name('self', Load(), lineno=2721, col_offset=28), '_stretchfactor', Load(), lineno=2721, col_offset=28), lineno=2721, col_offset=12)], lineno=2718, col_offset=13)], lineno=2713, col_offset=8), If(Compare(Name('outline', Load(), lineno=2722, col_offset=11), [Is()], [Name('None', Load(), lineno=2722, col_offset=22)], lineno=2722, col_offset=11), [Assign([Name('outline', Store(), lineno=2723, col_offset=12)], Attribute(Name('self', Load(), lineno=2723, col_offset=22), '_outlinewidth', Load(), lineno=2723, col_offset=22), lineno=2723, col_offset=12)], [], lineno=2722, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2724, col_offset=8), 'pen', Load(), lineno=2724, col_offset=8), [], [keyword('resizemode', Str('user', lineno=2724, col_offset=28)), keyword('stretchfactor', Name('stretchfactor', Load(), lineno=2725, col_offset=31)), keyword('outline', Name('outline', Load(), lineno=2725, col_offset=54))], None, None, lineno=2724, col_offset=8), lineno=2724, col_offset=8)], [], lineno=2689, col_offset=4), FunctionDef('settiltangle', arguments([Name('self', Param(), lineno=2727, col_offset=21), Name('angle', Param(), lineno=2727, col_offset=27)], None, None, []), [Expr(Str('Rotate the turtleshape to point in the specified direction\n\n        Optional argument:\n        angle -- number\n\n        Rotate the turtleshape to point in the direction specified by angle,\n        regardless of its current tilt-angle. DO NOT change the turtle\'s\n        heading (direction of movement).\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape("circle")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.settiltangle(45)\n        >>> stamp()\n        >>> turtle.fd(50)\n        >>> turtle.settiltangle(-45)\n        >>> stamp()\n        >>> turtle.fd(50)\n        ', lineno=2747, col_offset=-1), lineno=2747, col_offset=-1), Assign([Name('tilt', Store(), lineno=2748, col_offset=8)], BinOp(BinOp(UnaryOp(USub(), Name('angle', Load(), lineno=2748, col_offset=16), lineno=2748, col_offset=15), Mult(), Attribute(Name('self', Load(), lineno=2748, col_offset=24), '_degreesPerAU', Load(), lineno=2748, col_offset=24), lineno=2748, col_offset=15), Mult(), Attribute(Name('self', Load(), lineno=2748, col_offset=45), '_angleOrient', Load(), lineno=2748, col_offset=45), lineno=2748, col_offset=43), lineno=2748, col_offset=8), Assign([Name('tilt', Store(), lineno=2749, col_offset=8)], BinOp(BinOp(BinOp(Name('tilt', Load(), lineno=2749, col_offset=16), Mult(), Attribute(Name('math', Load(), lineno=2749, col_offset=23), 'pi', Load(), lineno=2749, col_offset=23), lineno=2749, col_offset=16), Div(), Num(180.0, lineno=2749, col_offset=33), lineno=2749, col_offset=31), Mod(), BinOp(Num(2, lineno=2749, col_offset=43), Mult(), Attribute(Name('math', Load(), lineno=2749, col_offset=45), 'pi', Load(), lineno=2749, col_offset=45), lineno=2749, col_offset=43), lineno=2749, col_offset=15), lineno=2749, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2750, col_offset=8), 'pen', Load(), lineno=2750, col_offset=8), [], [keyword('resizemode', Str('user', lineno=2750, col_offset=28)), keyword('tilt', Name('tilt', Load(), lineno=2750, col_offset=41))], None, None, lineno=2750, col_offset=8), lineno=2750, col_offset=8)], [], lineno=2727, col_offset=4), FunctionDef('tiltangle', arguments([Name('self', Param(), lineno=2752, col_offset=18)], None, None, []), [Expr(Str('Return the current tilt-angle.\n\n        No argument.\n\n        Return the current tilt-angle, i. e. the angle between the\n        orientation of the turtleshape and the heading of the turtle\n        (its direction of movement).\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape("circle")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.tilt(45)\n        >>> turtle.tiltangle()\n        >>>\n        ', lineno=2767, col_offset=-1), lineno=2767, col_offset=-1), Assign([Name('tilt', Store(), lineno=2768, col_offset=8)], BinOp(BinOp(UnaryOp(USub(), Attribute(Name('self', Load(), lineno=2768, col_offset=16), '_tilt', Load(), lineno=2768, col_offset=16), lineno=2768, col_offset=15), Mult(), BinOp(Num(180.0, lineno=2768, col_offset=30), Div(), Attribute(Name('math', Load(), lineno=2768, col_offset=36), 'pi', Load(), lineno=2768, col_offset=36), lineno=2768, col_offset=30), lineno=2768, col_offset=15), Mult(), Attribute(Name('self', Load(), lineno=2768, col_offset=47), '_angleOrient', Load(), lineno=2768, col_offset=47), lineno=2768, col_offset=45), lineno=2768, col_offset=8), Return(BinOp(BinOp(Name('tilt', Load(), lineno=2769, col_offset=16), Div(), Attribute(Name('self', Load(), lineno=2769, col_offset=23), '_degreesPerAU', Load(), lineno=2769, col_offset=23), lineno=2769, col_offset=16), Mod(), Attribute(Name('self', Load(), lineno=2769, col_offset=45), '_fullcircle', Load(), lineno=2769, col_offset=45), lineno=2769, col_offset=15), lineno=2769, col_offset=8)], [], lineno=2752, col_offset=4), FunctionDef('tilt', arguments([Name('self', Param(), lineno=2771, col_offset=13), Name('angle', Param(), lineno=2771, col_offset=19)], None, None, []), [Expr(Str('Rotate the turtleshape by angle.\n\n        Argument:\n        angle - a number\n\n        Rotate the turtleshape by angle from its current tilt-angle,\n        but do NOT change the turtle\'s heading (direction of movement).\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape("circle")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.tilt(30)\n        >>> turtle.fd(50)\n        >>> turtle.tilt(30)\n        >>> turtle.fd(50)\n        ', lineno=2787, col_offset=-1), lineno=2787, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2788, col_offset=8), 'settiltangle', Load(), lineno=2788, col_offset=8), [BinOp(Name('angle', Load(), lineno=2788, col_offset=26), Add(), Call(Attribute(Name('self', Load(), lineno=2788, col_offset=34), 'tiltangle', Load(), lineno=2788, col_offset=34), [], [], None, None, lineno=2788, col_offset=34), lineno=2788, col_offset=26)], [], None, None, lineno=2788, col_offset=8), lineno=2788, col_offset=8)], [], lineno=2771, col_offset=4), FunctionDef('_polytrafo', arguments([Name('self', Param(), lineno=2790, col_offset=19), Name('poly', Param(), lineno=2790, col_offset=25)], None, None, []), [Expr(Str('Computes transformed polygon shapes from a shape\n        according to current position and heading.\n        ', lineno=2793, col_offset=-1), lineno=2793, col_offset=-1), Assign([Name('screen', Store(), lineno=2794, col_offset=8)], Attribute(Name('self', Load(), lineno=2794, col_offset=17), 'screen', Load(), lineno=2794, col_offset=17), lineno=2794, col_offset=8), Assign([Tuple([Name('p0', Store(), lineno=2795, col_offset=8), Name('p1', Store(), lineno=2795, col_offset=12)], Store(), lineno=2795, col_offset=8)], Attribute(Name('self', Load(), lineno=2795, col_offset=17), '_position', Load(), lineno=2795, col_offset=17), lineno=2795, col_offset=8), Assign([Tuple([Name('e0', Store(), lineno=2796, col_offset=8), Name('e1', Store(), lineno=2796, col_offset=12)], Store(), lineno=2796, col_offset=8)], Attribute(Name('self', Load(), lineno=2796, col_offset=17), '_orient', Load(), lineno=2796, col_offset=17), lineno=2796, col_offset=8), Assign([Name('e', Store(), lineno=2797, col_offset=8)], Call(Name('Vec2D', Load(), lineno=2797, col_offset=12), [Name('e0', Load(), lineno=2797, col_offset=18), BinOp(BinOp(Name('e1', Load(), lineno=2797, col_offset=22), Mult(), Attribute(Name('screen', Load(), lineno=2797, col_offset=27), 'yscale', Load(), lineno=2797, col_offset=27), lineno=2797, col_offset=22), Div(), Attribute(Name('screen', Load(), lineno=2797, col_offset=43), 'xscale', Load(), lineno=2797, col_offset=43), lineno=2797, col_offset=41)], [], None, None, lineno=2797, col_offset=12), lineno=2797, col_offset=8), Assign([Tuple([Name('e0', Store(), lineno=2798, col_offset=8), Name('e1', Store(), lineno=2798, col_offset=12)], Store(), lineno=2798, col_offset=8)], BinOp(BinOp(Num(1.0, lineno=2798, col_offset=18), Div(), Call(Name('abs', Load(), lineno=2798, col_offset=24), [Name('e', Load(), lineno=2798, col_offset=28)], [], None, None, lineno=2798, col_offset=24), lineno=2798, col_offset=18), Mult(), Name('e', Load(), lineno=2798, col_offset=34), lineno=2798, col_offset=17), lineno=2798, col_offset=8), Return(ListComp(Tuple([BinOp(Name('p0', Load(), lineno=2799, col_offset=17), Add(), BinOp(BinOp(BinOp(Name('e1', Load(), lineno=2799, col_offset=21), Mult(), Name('x', Load(), lineno=2799, col_offset=24), lineno=2799, col_offset=21), Add(), BinOp(Name('e0', Load(), lineno=2799, col_offset=26), Mult(), Name('y', Load(), lineno=2799, col_offset=29), lineno=2799, col_offset=26), lineno=2799, col_offset=21), Div(), Attribute(Name('screen', Load(), lineno=2799, col_offset=32), 'xscale', Load(), lineno=2799, col_offset=32), lineno=2799, col_offset=20), lineno=2799, col_offset=17), BinOp(Name('p1', Load(), lineno=2799, col_offset=47), Add(), BinOp(BinOp(BinOp(UnaryOp(USub(), Name('e0', Load(), lineno=2799, col_offset=52), lineno=2799, col_offset=51), Mult(), Name('x', Load(), lineno=2799, col_offset=55), lineno=2799, col_offset=51), Add(), BinOp(Name('e1', Load(), lineno=2799, col_offset=57), Mult(), Name('y', Load(), lineno=2799, col_offset=60), lineno=2799, col_offset=57), lineno=2799, col_offset=51), Div(), Attribute(Name('screen', Load(), lineno=2799, col_offset=63), 'yscale', Load(), lineno=2799, col_offset=63), lineno=2799, col_offset=50), lineno=2799, col_offset=47)], Load(), lineno=2799, col_offset=17), [comprehension(Tuple([Name('x', Store(), lineno=2800, col_offset=64), Name('y', Store(), lineno=2800, col_offset=67)], Store(), lineno=2800, col_offset=64), Name('poly', Load(), lineno=2800, col_offset=73), [])], lineno=2799, col_offset=16), lineno=2799, col_offset=8)], [], lineno=2790, col_offset=4), FunctionDef('_drawturtle', arguments([Name('self', Param(), lineno=2802, col_offset=20)], None, None, []), [Expr(Str('Manages the correct rendering of the turtle with respect to\n        its shape, resizemode, stretch and tilt etc.', lineno=2804, col_offset=-1), lineno=2804, col_offset=-1), Assign([Name('screen', Store(), lineno=2805, col_offset=8)], Attribute(Name('self', Load(), lineno=2805, col_offset=17), 'screen', Load(), lineno=2805, col_offset=17), lineno=2805, col_offset=8), Assign([Name('shape', Store(), lineno=2806, col_offset=8)], Subscript(Attribute(Name('screen', Load(), lineno=2806, col_offset=16), '_shapes', Load(), lineno=2806, col_offset=16), Index(Attribute(Attribute(Name('self', Load(), lineno=2806, col_offset=31), 'turtle', Load(), lineno=2806, col_offset=31), 'shapeIndex', Load(), lineno=2806, col_offset=31)), Load(), lineno=2806, col_offset=16), lineno=2806, col_offset=8), Assign([Name('ttype', Store(), lineno=2807, col_offset=8)], Attribute(Name('shape', Load(), lineno=2807, col_offset=16), '_type', Load(), lineno=2807, col_offset=16), lineno=2807, col_offset=8), Assign([Name('titem', Store(), lineno=2808, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=2808, col_offset=16), 'turtle', Load(), lineno=2808, col_offset=16), '_item', Load(), lineno=2808, col_offset=16), lineno=2808, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=2809, col_offset=11), '_shown', Load(), lineno=2809, col_offset=11), Compare(Attribute(Name('screen', Load(), lineno=2809, col_offset=27), '_updatecounter', Load(), lineno=2809, col_offset=27), [Eq()], [Num(0, lineno=2809, col_offset=52)], lineno=2809, col_offset=27), Compare(Attribute(Name('screen', Load(), lineno=2809, col_offset=58), '_tracing', Load(), lineno=2809, col_offset=58), [Gt()], [Num(0, lineno=2809, col_offset=76)], lineno=2809, col_offset=58)], lineno=2809, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=2810, col_offset=12), '_hidden_from_screen', Store(), lineno=2810, col_offset=12)], Name('False', Load(), lineno=2810, col_offset=39), lineno=2810, col_offset=12), Assign([Name('tshape', Store(), lineno=2811, col_offset=12)], Attribute(Name('shape', Load(), lineno=2811, col_offset=21), '_data', Load(), lineno=2811, col_offset=21), lineno=2811, col_offset=12), If(Compare(Name('ttype', Load(), lineno=2812, col_offset=15), [Eq()], [Str('polygon', lineno=2812, col_offset=24)], lineno=2812, col_offset=15), [If(Compare(Attribute(Name('self', Load(), lineno=2813, col_offset=19), '_resizemode', Load(), lineno=2813, col_offset=19), [Eq()], [Str('noresize', lineno=2813, col_offset=39)], lineno=2813, col_offset=19), [Assign([Name('w', Store(), lineno=2814, col_offset=20)], Num(1, lineno=2814, col_offset=24), lineno=2814, col_offset=20), Assign([Name('shape', Store(), lineno=2815, col_offset=20)], Name('tshape', Load(), lineno=2815, col_offset=28), lineno=2815, col_offset=20)], [If(Compare(Attribute(Name('self', Load(), lineno=2817, col_offset=23), '_resizemode', Load(), lineno=2817, col_offset=23), [Eq()], [Str('auto', lineno=2817, col_offset=43)], lineno=2817, col_offset=23), [Assign([Name('lx', Store(), lineno=2818, col_offset=24), Name('ly', Store(), lineno=2818, col_offset=29)], Call(Name('max', Load(), lineno=2818, col_offset=34), [Num(1, lineno=2818, col_offset=38), BinOp(Attribute(Name('self', Load(), lineno=2818, col_offset=41), '_pensize', Load(), lineno=2818, col_offset=41), Div(), Num(5.0, lineno=2818, col_offset=55), lineno=2818, col_offset=41)], [], None, None, lineno=2818, col_offset=34), lineno=2818, col_offset=24), Assign([Name('w', Store(), lineno=2819, col_offset=24)], Attribute(Name('self', Load(), lineno=2819, col_offset=28), '_pensize', Load(), lineno=2819, col_offset=28), lineno=2819, col_offset=24), Assign([Name('tiltangle', Store(), lineno=2820, col_offset=24)], Num(0, lineno=2820, col_offset=36), lineno=2820, col_offset=24)], [If(Compare(Attribute(Name('self', Load(), lineno=2821, col_offset=25), '_resizemode', Load(), lineno=2821, col_offset=25), [Eq()], [Str('user', lineno=2821, col_offset=45)], lineno=2821, col_offset=25), [Assign([Tuple([Name('lx', Store(), lineno=2822, col_offset=24), Name('ly', Store(), lineno=2822, col_offset=28)], Store(), lineno=2822, col_offset=24)], Attribute(Name('self', Load(), lineno=2822, col_offset=33), '_stretchfactor', Load(), lineno=2822, col_offset=33), lineno=2822, col_offset=24), Assign([Name('w', Store(), lineno=2823, col_offset=24)], Attribute(Name('self', Load(), lineno=2823, col_offset=28), '_outlinewidth', Load(), lineno=2823, col_offset=28), lineno=2823, col_offset=24), Assign([Name('tiltangle', Store(), lineno=2824, col_offset=24)], Attribute(Name('self', Load(), lineno=2824, col_offset=36), '_tilt', Load(), lineno=2824, col_offset=36), lineno=2824, col_offset=24)], [], lineno=2821, col_offset=25)], lineno=2817, col_offset=20), Assign([Name('shape', Store(), lineno=2825, col_offset=20)], ListComp(Tuple([BinOp(Name('lx', Load(), lineno=2825, col_offset=30), Mult(), Name('x', Load(), lineno=2825, col_offset=33), lineno=2825, col_offset=30), BinOp(Name('ly', Load(), lineno=2825, col_offset=36), Mult(), Name('y', Load(), lineno=2825, col_offset=39), lineno=2825, col_offset=36)], Load(), lineno=2825, col_offset=30), [comprehension(Tuple([Name('x', Store(), lineno=2825, col_offset=47), Name('y', Store(), lineno=2825, col_offset=50)], Store(), lineno=2825, col_offset=47), Name('tshape', Load(), lineno=2825, col_offset=56), [])], lineno=2825, col_offset=29), lineno=2825, col_offset=20), Assign([Tuple([Name('t0', Store(), lineno=2826, col_offset=20), Name('t1', Store(), lineno=2826, col_offset=24)], Store(), lineno=2826, col_offset=20)], Tuple([Call(Attribute(Name('math', Load(), lineno=2826, col_offset=29), 'sin', Load(), lineno=2826, col_offset=29), [Name('tiltangle', Load(), lineno=2826, col_offset=38)], [], None, None, lineno=2826, col_offset=29), Call(Attribute(Name('math', Load(), lineno=2826, col_offset=50), 'cos', Load(), lineno=2826, col_offset=50), [Name('tiltangle', Load(), lineno=2826, col_offset=59)], [], None, None, lineno=2826, col_offset=50)], Load(), lineno=2826, col_offset=29), lineno=2826, col_offset=20), Assign([Name('shape', Store(), lineno=2827, col_offset=20)], ListComp(Tuple([BinOp(BinOp(Name('t1', Load(), lineno=2827, col_offset=30), Mult(), Name('x', Load(), lineno=2827, col_offset=33), lineno=2827, col_offset=30), Add(), BinOp(Name('t0', Load(), lineno=2827, col_offset=35), Mult(), Name('y', Load(), lineno=2827, col_offset=38), lineno=2827, col_offset=35), lineno=2827, col_offset=30), BinOp(BinOp(UnaryOp(USub(), Name('t0', Load(), lineno=2827, col_offset=42), lineno=2827, col_offset=41), Mult(), Name('x', Load(), lineno=2827, col_offset=45), lineno=2827, col_offset=41), Add(), BinOp(Name('t1', Load(), lineno=2827, col_offset=47), Mult(), Name('y', Load(), lineno=2827, col_offset=50), lineno=2827, col_offset=47), lineno=2827, col_offset=41)], Load(), lineno=2827, col_offset=30), [comprehension(Tuple([Name('x', Store(), lineno=2827, col_offset=58), Name('y', Store(), lineno=2827, col_offset=61)], Store(), lineno=2827, col_offset=58), Name('shape', Load(), lineno=2827, col_offset=67), [])], lineno=2827, col_offset=29), lineno=2827, col_offset=20)], lineno=2813, col_offset=16), Assign([Name('shape', Store(), lineno=2828, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=2828, col_offset=24), '_polytrafo', Load(), lineno=2828, col_offset=24), [Name('shape', Load(), lineno=2828, col_offset=40)], [], None, None, lineno=2828, col_offset=24), lineno=2828, col_offset=16), Assign([Tuple([Name('fc', Store(), lineno=2829, col_offset=16), Name('oc', Store(), lineno=2829, col_offset=20)], Store(), lineno=2829, col_offset=16)], Tuple([Attribute(Name('self', Load(), lineno=2829, col_offset=25), '_fillcolor', Load(), lineno=2829, col_offset=25), Attribute(Name('self', Load(), lineno=2829, col_offset=42), '_pencolor', Load(), lineno=2829, col_offset=42)], Load(), lineno=2829, col_offset=25), lineno=2829, col_offset=16), Expr(Call(Attribute(Name('screen', Load(), lineno=2830, col_offset=16), '_drawpoly', Load(), lineno=2830, col_offset=16), [Name('titem', Load(), lineno=2830, col_offset=33), Name('shape', Load(), lineno=2830, col_offset=40)], [keyword('fill', Name('fc', Load(), lineno=2830, col_offset=52)), keyword('outline', Name('oc', Load(), lineno=2830, col_offset=64)), keyword('width', Name('w', Load(), lineno=2831, col_offset=60)), keyword('top', Name('True', Load(), lineno=2831, col_offset=67))], None, None, lineno=2830, col_offset=16), lineno=2830, col_offset=16)], [If(Compare(Name('ttype', Load(), lineno=2832, col_offset=17), [Eq()], [Str('image', lineno=2832, col_offset=26)], lineno=2832, col_offset=17), [Expr(Call(Attribute(Name('screen', Load(), lineno=2833, col_offset=16), '_drawimage', Load(), lineno=2833, col_offset=16), [Name('titem', Load(), lineno=2833, col_offset=34), Attribute(Name('self', Load(), lineno=2833, col_offset=41), '_position', Load(), lineno=2833, col_offset=41), Name('tshape', Load(), lineno=2833, col_offset=57)], [], None, None, lineno=2833, col_offset=16), lineno=2833, col_offset=16)], [If(Compare(Name('ttype', Load(), lineno=2834, col_offset=17), [Eq()], [Str('compound', lineno=2834, col_offset=26)], lineno=2834, col_offset=17), [Assign([Tuple([Name('lx', Store(), lineno=2835, col_offset=16), Name('ly', Store(), lineno=2835, col_offset=20)], Store(), lineno=2835, col_offset=16)], Attribute(Name('self', Load(), lineno=2835, col_offset=25), '_stretchfactor', Load(), lineno=2835, col_offset=25), lineno=2835, col_offset=16), Assign([Name('w', Store(), lineno=2836, col_offset=16)], Attribute(Name('self', Load(), lineno=2836, col_offset=20), '_outlinewidth', Load(), lineno=2836, col_offset=20), lineno=2836, col_offset=16), For(Tuple([Name('item', Store(), lineno=2837, col_offset=20), Tuple([Name('poly', Store(), lineno=2837, col_offset=27), Name('fc', Store(), lineno=2837, col_offset=33), Name('oc', Store(), lineno=2837, col_offset=37)], Store(), lineno=2837, col_offset=27)], Store(), lineno=2837, col_offset=20), Call(Name('zip', Load(), lineno=2837, col_offset=44), [Name('titem', Load(), lineno=2837, col_offset=48), Name('tshape', Load(), lineno=2837, col_offset=55)], [], None, None, lineno=2837, col_offset=44), [Assign([Name('poly', Store(), lineno=2838, col_offset=20)], ListComp(Tuple([BinOp(Name('lx', Load(), lineno=2838, col_offset=29), Mult(), Name('x', Load(), lineno=2838, col_offset=32), lineno=2838, col_offset=29), BinOp(Name('ly', Load(), lineno=2838, col_offset=35), Mult(), Name('y', Load(), lineno=2838, col_offset=38), lineno=2838, col_offset=35)], Load(), lineno=2838, col_offset=29), [comprehension(Tuple([Name('x', Store(), lineno=2838, col_offset=46), Name('y', Store(), lineno=2838, col_offset=49)], Store(), lineno=2838, col_offset=46), Name('poly', Load(), lineno=2838, col_offset=55), [])], lineno=2838, col_offset=28), lineno=2838, col_offset=20), Assign([Name('poly', Store(), lineno=2839, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=2839, col_offset=27), '_polytrafo', Load(), lineno=2839, col_offset=27), [Name('poly', Load(), lineno=2839, col_offset=43)], [], None, None, lineno=2839, col_offset=27), lineno=2839, col_offset=20), Expr(Call(Attribute(Name('screen', Load(), lineno=2840, col_offset=20), '_drawpoly', Load(), lineno=2840, col_offset=20), [Name('item', Load(), lineno=2840, col_offset=37), Name('poly', Load(), lineno=2840, col_offset=43)], [keyword('fill', Call(Attribute(Name('self', Load(), lineno=2840, col_offset=54), '_cc', Load(), lineno=2840, col_offset=54), [Name('fc', Load(), lineno=2840, col_offset=63)], [], None, None, lineno=2840, col_offset=54)), keyword('outline', Call(Attribute(Name('self', Load(), lineno=2841, col_offset=45), '_cc', Load(), lineno=2841, col_offset=45), [Name('oc', Load(), lineno=2841, col_offset=54)], [], None, None, lineno=2841, col_offset=45)), keyword('width', Name('w', Load(), lineno=2841, col_offset=65)), keyword('top', Name('True', Load(), lineno=2841, col_offset=72))], None, None, lineno=2840, col_offset=20), lineno=2840, col_offset=20)], [], lineno=2837, col_offset=16)], [], lineno=2834, col_offset=17)], lineno=2832, col_offset=17)], lineno=2812, col_offset=12)], [If(Attribute(Name('self', Load(), lineno=2843, col_offset=15), '_hidden_from_screen', Load(), lineno=2843, col_offset=15), [Return(None, lineno=2844, col_offset=16)], [], lineno=2843, col_offset=12), If(Compare(Name('ttype', Load(), lineno=2845, col_offset=15), [Eq()], [Str('polygon', lineno=2845, col_offset=24)], lineno=2845, col_offset=15), [Expr(Call(Attribute(Name('screen', Load(), lineno=2846, col_offset=16), '_drawpoly', Load(), lineno=2846, col_offset=16), [Name('titem', Load(), lineno=2846, col_offset=33), Tuple([Tuple([Num(0, lineno=2846, col_offset=42), Num(0, lineno=2846, col_offset=45)], Load(), lineno=2846, col_offset=42), Tuple([Num(0, lineno=2846, col_offset=50), Num(0, lineno=2846, col_offset=53)], Load(), lineno=2846, col_offset=50), Tuple([Num(0, lineno=2846, col_offset=58), Num(0, lineno=2846, col_offset=61)], Load(), lineno=2846, col_offset=58)], Load(), lineno=2846, col_offset=41), Str('', lineno=2846, col_offset=66), Str('', lineno=2846, col_offset=70)], [], None, None, lineno=2846, col_offset=16), lineno=2846, col_offset=16)], [If(Compare(Name('ttype', Load(), lineno=2847, col_offset=17), [Eq()], [Str('image', lineno=2847, col_offset=26)], lineno=2847, col_offset=17), [Expr(Call(Attribute(Name('screen', Load(), lineno=2848, col_offset=16), '_drawimage', Load(), lineno=2848, col_offset=16), [Name('titem', Load(), lineno=2848, col_offset=34), Attribute(Name('self', Load(), lineno=2848, col_offset=41), '_position', Load(), lineno=2848, col_offset=41), Attribute(Subscript(Attribute(Name('screen', Load(), lineno=2849, col_offset=42), '_shapes', Load(), lineno=2849, col_offset=42), Index(Str('blank', lineno=2849, col_offset=57)), Load(), lineno=2849, col_offset=42), '_data', Load(), lineno=2849, col_offset=42)], [], None, None, lineno=2848, col_offset=16), lineno=2848, col_offset=16)], [If(Compare(Name('ttype', Load(), lineno=2850, col_offset=17), [Eq()], [Str('compound', lineno=2850, col_offset=26)], lineno=2850, col_offset=17), [For(Name('item', Store(), lineno=2851, col_offset=20), Name('titem', Load(), lineno=2851, col_offset=28), [Expr(Call(Attribute(Name('screen', Load(), lineno=2852, col_offset=20), '_drawpoly', Load(), lineno=2852, col_offset=20), [Name('item', Load(), lineno=2852, col_offset=37), Tuple([Tuple([Num(0, lineno=2852, col_offset=45), Num(0, lineno=2852, col_offset=48)], Load(), lineno=2852, col_offset=45), Tuple([Num(0, lineno=2852, col_offset=53), Num(0, lineno=2852, col_offset=56)], Load(), lineno=2852, col_offset=53), Tuple([Num(0, lineno=2852, col_offset=61), Num(0, lineno=2852, col_offset=64)], Load(), lineno=2852, col_offset=61)], Load(), lineno=2852, col_offset=44), Str('', lineno=2852, col_offset=69), Str('', lineno=2852, col_offset=73)], [], None, None, lineno=2852, col_offset=20), lineno=2852, col_offset=20)], [], lineno=2851, col_offset=16)], [], lineno=2850, col_offset=17)], lineno=2847, col_offset=17)], lineno=2845, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=2853, col_offset=12), '_hidden_from_screen', Store(), lineno=2853, col_offset=12)], Name('True', Load(), lineno=2853, col_offset=39), lineno=2853, col_offset=12)], lineno=2809, col_offset=8)], [], lineno=2802, col_offset=4), FunctionDef('stamp', arguments([Name('self', Param(), lineno=2857, col_offset=14)], None, None, []), [Expr(Str('Stamp a copy of the turtleshape onto the canvas and return its id.\n\n        No argument.\n\n        Stamp a copy of the turtle shape onto the canvas at the current\n        turtle position. Return a stamp_id for that stamp, which can be\n        used to delete it by calling clearstamp(stamp_id).\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color("blue")\n        >>> turtle.stamp()\n        13\n        >>> turtle.fd(50)\n        ', lineno=2871, col_offset=-1), lineno=2871, col_offset=-1), Assign([Name('screen', Store(), lineno=2872, col_offset=8)], Attribute(Name('self', Load(), lineno=2872, col_offset=17), 'screen', Load(), lineno=2872, col_offset=17), lineno=2872, col_offset=8), Assign([Name('shape', Store(), lineno=2873, col_offset=8)], Subscript(Attribute(Name('screen', Load(), lineno=2873, col_offset=16), '_shapes', Load(), lineno=2873, col_offset=16), Index(Attribute(Attribute(Name('self', Load(), lineno=2873, col_offset=31), 'turtle', Load(), lineno=2873, col_offset=31), 'shapeIndex', Load(), lineno=2873, col_offset=31)), Load(), lineno=2873, col_offset=16), lineno=2873, col_offset=8), Assign([Name('ttype', Store(), lineno=2874, col_offset=8)], Attribute(Name('shape', Load(), lineno=2874, col_offset=16), '_type', Load(), lineno=2874, col_offset=16), lineno=2874, col_offset=8), Assign([Name('tshape', Store(), lineno=2875, col_offset=8)], Attribute(Name('shape', Load(), lineno=2875, col_offset=17), '_data', Load(), lineno=2875, col_offset=17), lineno=2875, col_offset=8), If(Compare(Name('ttype', Load(), lineno=2876, col_offset=11), [Eq()], [Str('polygon', lineno=2876, col_offset=20)], lineno=2876, col_offset=11), [Assign([Name('stitem', Store(), lineno=2877, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2877, col_offset=21), '_createpoly', Load(), lineno=2877, col_offset=21), [], [], None, None, lineno=2877, col_offset=21), lineno=2877, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=2878, col_offset=15), '_resizemode', Load(), lineno=2878, col_offset=15), [Eq()], [Str('noresize', lineno=2878, col_offset=35)], lineno=2878, col_offset=15), [Assign([Name('w', Store(), lineno=2879, col_offset=16)], Num(1, lineno=2879, col_offset=20), lineno=2879, col_offset=16), Assign([Name('shape', Store(), lineno=2880, col_offset=16)], Name('tshape', Load(), lineno=2880, col_offset=24), lineno=2880, col_offset=16)], [If(Compare(Attribute(Name('self', Load(), lineno=2882, col_offset=19), '_resizemode', Load(), lineno=2882, col_offset=19), [Eq()], [Str('auto', lineno=2882, col_offset=39)], lineno=2882, col_offset=19), [Assign([Name('lx', Store(), lineno=2883, col_offset=20), Name('ly', Store(), lineno=2883, col_offset=25)], Call(Name('max', Load(), lineno=2883, col_offset=30), [Num(1, lineno=2883, col_offset=34), BinOp(Attribute(Name('self', Load(), lineno=2883, col_offset=37), '_pensize', Load(), lineno=2883, col_offset=37), Div(), Num(5.0, lineno=2883, col_offset=51), lineno=2883, col_offset=37)], [], None, None, lineno=2883, col_offset=30), lineno=2883, col_offset=20), Assign([Name('w', Store(), lineno=2884, col_offset=20)], Attribute(Name('self', Load(), lineno=2884, col_offset=24), '_pensize', Load(), lineno=2884, col_offset=24), lineno=2884, col_offset=20), Assign([Name('tiltangle', Store(), lineno=2885, col_offset=20)], Num(0, lineno=2885, col_offset=32), lineno=2885, col_offset=20)], [If(Compare(Attribute(Name('self', Load(), lineno=2886, col_offset=21), '_resizemode', Load(), lineno=2886, col_offset=21), [Eq()], [Str('user', lineno=2886, col_offset=41)], lineno=2886, col_offset=21), [Assign([Tuple([Name('lx', Store(), lineno=2887, col_offset=20), Name('ly', Store(), lineno=2887, col_offset=24)], Store(), lineno=2887, col_offset=20)], Attribute(Name('self', Load(), lineno=2887, col_offset=29), '_stretchfactor', Load(), lineno=2887, col_offset=29), lineno=2887, col_offset=20), Assign([Name('w', Store(), lineno=2888, col_offset=20)], Attribute(Name('self', Load(), lineno=2888, col_offset=24), '_outlinewidth', Load(), lineno=2888, col_offset=24), lineno=2888, col_offset=20), Assign([Name('tiltangle', Store(), lineno=2889, col_offset=20)], Attribute(Name('self', Load(), lineno=2889, col_offset=32), '_tilt', Load(), lineno=2889, col_offset=32), lineno=2889, col_offset=20)], [], lineno=2886, col_offset=21)], lineno=2882, col_offset=16), Assign([Name('shape', Store(), lineno=2890, col_offset=16)], ListComp(Tuple([BinOp(Name('lx', Load(), lineno=2890, col_offset=26), Mult(), Name('x', Load(), lineno=2890, col_offset=29), lineno=2890, col_offset=26), BinOp(Name('ly', Load(), lineno=2890, col_offset=32), Mult(), Name('y', Load(), lineno=2890, col_offset=35), lineno=2890, col_offset=32)], Load(), lineno=2890, col_offset=26), [comprehension(Tuple([Name('x', Store(), lineno=2890, col_offset=43), Name('y', Store(), lineno=2890, col_offset=46)], Store(), lineno=2890, col_offset=43), Name('tshape', Load(), lineno=2890, col_offset=52), [])], lineno=2890, col_offset=25), lineno=2890, col_offset=16), Assign([Tuple([Name('t0', Store(), lineno=2891, col_offset=16), Name('t1', Store(), lineno=2891, col_offset=20)], Store(), lineno=2891, col_offset=16)], Tuple([Call(Attribute(Name('math', Load(), lineno=2891, col_offset=25), 'sin', Load(), lineno=2891, col_offset=25), [Name('tiltangle', Load(), lineno=2891, col_offset=34)], [], None, None, lineno=2891, col_offset=25), Call(Attribute(Name('math', Load(), lineno=2891, col_offset=46), 'cos', Load(), lineno=2891, col_offset=46), [Name('tiltangle', Load(), lineno=2891, col_offset=55)], [], None, None, lineno=2891, col_offset=46)], Load(), lineno=2891, col_offset=25), lineno=2891, col_offset=16), Assign([Name('shape', Store(), lineno=2892, col_offset=16)], ListComp(Tuple([BinOp(BinOp(Name('t1', Load(), lineno=2892, col_offset=26), Mult(), Name('x', Load(), lineno=2892, col_offset=29), lineno=2892, col_offset=26), Add(), BinOp(Name('t0', Load(), lineno=2892, col_offset=31), Mult(), Name('y', Load(), lineno=2892, col_offset=34), lineno=2892, col_offset=31), lineno=2892, col_offset=26), BinOp(BinOp(UnaryOp(USub(), Name('t0', Load(), lineno=2892, col_offset=38), lineno=2892, col_offset=37), Mult(), Name('x', Load(), lineno=2892, col_offset=41), lineno=2892, col_offset=37), Add(), BinOp(Name('t1', Load(), lineno=2892, col_offset=43), Mult(), Name('y', Load(), lineno=2892, col_offset=46), lineno=2892, col_offset=43), lineno=2892, col_offset=37)], Load(), lineno=2892, col_offset=26), [comprehension(Tuple([Name('x', Store(), lineno=2892, col_offset=54), Name('y', Store(), lineno=2892, col_offset=57)], Store(), lineno=2892, col_offset=54), Name('shape', Load(), lineno=2892, col_offset=63), [])], lineno=2892, col_offset=25), lineno=2892, col_offset=16)], lineno=2878, col_offset=12), Assign([Name('shape', Store(), lineno=2893, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=2893, col_offset=20), '_polytrafo', Load(), lineno=2893, col_offset=20), [Name('shape', Load(), lineno=2893, col_offset=36)], [], None, None, lineno=2893, col_offset=20), lineno=2893, col_offset=12), Assign([Tuple([Name('fc', Store(), lineno=2894, col_offset=12), Name('oc', Store(), lineno=2894, col_offset=16)], Store(), lineno=2894, col_offset=12)], Tuple([Attribute(Name('self', Load(), lineno=2894, col_offset=21), '_fillcolor', Load(), lineno=2894, col_offset=21), Attribute(Name('self', Load(), lineno=2894, col_offset=38), '_pencolor', Load(), lineno=2894, col_offset=38)], Load(), lineno=2894, col_offset=21), lineno=2894, col_offset=12), Expr(Call(Attribute(Name('screen', Load(), lineno=2895, col_offset=12), '_drawpoly', Load(), lineno=2895, col_offset=12), [Name('stitem', Load(), lineno=2895, col_offset=29), Name('shape', Load(), lineno=2895, col_offset=37)], [keyword('fill', Name('fc', Load(), lineno=2895, col_offset=49)), keyword('outline', Name('oc', Load(), lineno=2895, col_offset=61)), keyword('width', Name('w', Load(), lineno=2896, col_offset=56)), keyword('top', Name('True', Load(), lineno=2896, col_offset=63))], None, None, lineno=2895, col_offset=12), lineno=2895, col_offset=12)], [If(Compare(Name('ttype', Load(), lineno=2897, col_offset=13), [Eq()], [Str('image', lineno=2897, col_offset=22)], lineno=2897, col_offset=13), [Assign([Name('stitem', Store(), lineno=2898, col_offset=12)], Call(Attribute(Name('screen', Load(), lineno=2898, col_offset=21), '_createimage', Load(), lineno=2898, col_offset=21), [Str('', lineno=2898, col_offset=41)], [], None, None, lineno=2898, col_offset=21), lineno=2898, col_offset=12), Expr(Call(Attribute(Name('screen', Load(), lineno=2899, col_offset=12), '_drawimage', Load(), lineno=2899, col_offset=12), [Name('stitem', Load(), lineno=2899, col_offset=30), Attribute(Name('self', Load(), lineno=2899, col_offset=38), '_position', Load(), lineno=2899, col_offset=38), Name('tshape', Load(), lineno=2899, col_offset=54)], [], None, None, lineno=2899, col_offset=12), lineno=2899, col_offset=12)], [If(Compare(Name('ttype', Load(), lineno=2900, col_offset=13), [Eq()], [Str('compound', lineno=2900, col_offset=22)], lineno=2900, col_offset=13), [Assign([Name('stitem', Store(), lineno=2901, col_offset=12)], List([], Load(), lineno=2901, col_offset=21), lineno=2901, col_offset=12), For(Name('element', Store(), lineno=2902, col_offset=16), Name('tshape', Load(), lineno=2902, col_offset=27), [Assign([Name('item', Store(), lineno=2903, col_offset=16)], Call(Attribute(Name('screen', Load(), lineno=2903, col_offset=23), '_createpoly', Load(), lineno=2903, col_offset=23), [], [], None, None, lineno=2903, col_offset=23), lineno=2903, col_offset=16), Expr(Call(Attribute(Name('stitem', Load(), lineno=2904, col_offset=16), 'append', Load(), lineno=2904, col_offset=16), [Name('item', Load(), lineno=2904, col_offset=30)], [], None, None, lineno=2904, col_offset=16), lineno=2904, col_offset=16)], [], lineno=2902, col_offset=12), Assign([Name('stitem', Store(), lineno=2905, col_offset=12)], Call(Name('tuple', Load(), lineno=2905, col_offset=21), [Name('stitem', Load(), lineno=2905, col_offset=27)], [], None, None, lineno=2905, col_offset=21), lineno=2905, col_offset=12), Assign([Tuple([Name('lx', Store(), lineno=2906, col_offset=12), Name('ly', Store(), lineno=2906, col_offset=16)], Store(), lineno=2906, col_offset=12)], Attribute(Name('self', Load(), lineno=2906, col_offset=21), '_stretchfactor', Load(), lineno=2906, col_offset=21), lineno=2906, col_offset=12), Assign([Name('w', Store(), lineno=2907, col_offset=12)], Attribute(Name('self', Load(), lineno=2907, col_offset=16), '_outlinewidth', Load(), lineno=2907, col_offset=16), lineno=2907, col_offset=12), For(Tuple([Name('item', Store(), lineno=2908, col_offset=16), Tuple([Name('poly', Store(), lineno=2908, col_offset=23), Name('fc', Store(), lineno=2908, col_offset=29), Name('oc', Store(), lineno=2908, col_offset=33)], Store(), lineno=2908, col_offset=23)], Store(), lineno=2908, col_offset=16), Call(Name('zip', Load(), lineno=2908, col_offset=40), [Name('stitem', Load(), lineno=2908, col_offset=44), Name('tshape', Load(), lineno=2908, col_offset=52)], [], None, None, lineno=2908, col_offset=40), [Assign([Name('poly', Store(), lineno=2909, col_offset=16)], ListComp(Tuple([BinOp(Name('lx', Load(), lineno=2909, col_offset=25), Mult(), Name('x', Load(), lineno=2909, col_offset=28), lineno=2909, col_offset=25), BinOp(Name('ly', Load(), lineno=2909, col_offset=31), Mult(), Name('y', Load(), lineno=2909, col_offset=34), lineno=2909, col_offset=31)], Load(), lineno=2909, col_offset=25), [comprehension(Tuple([Name('x', Store(), lineno=2909, col_offset=42), Name('y', Store(), lineno=2909, col_offset=45)], Store(), lineno=2909, col_offset=42), Name('poly', Load(), lineno=2909, col_offset=51), [])], lineno=2909, col_offset=24), lineno=2909, col_offset=16), Assign([Name('poly', Store(), lineno=2910, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=2910, col_offset=23), '_polytrafo', Load(), lineno=2910, col_offset=23), [Name('poly', Load(), lineno=2910, col_offset=39)], [], None, None, lineno=2910, col_offset=23), lineno=2910, col_offset=16), Expr(Call(Attribute(Name('screen', Load(), lineno=2911, col_offset=16), '_drawpoly', Load(), lineno=2911, col_offset=16), [Name('item', Load(), lineno=2911, col_offset=33), Name('poly', Load(), lineno=2911, col_offset=39)], [keyword('fill', Call(Attribute(Name('self', Load(), lineno=2911, col_offset=50), '_cc', Load(), lineno=2911, col_offset=50), [Name('fc', Load(), lineno=2911, col_offset=59)], [], None, None, lineno=2911, col_offset=50)), keyword('outline', Call(Attribute(Name('self', Load(), lineno=2912, col_offset=41), '_cc', Load(), lineno=2912, col_offset=41), [Name('oc', Load(), lineno=2912, col_offset=50)], [], None, None, lineno=2912, col_offset=41)), keyword('width', Name('w', Load(), lineno=2912, col_offset=61)), keyword('top', Name('True', Load(), lineno=2912, col_offset=68))], None, None, lineno=2911, col_offset=16), lineno=2911, col_offset=16)], [], lineno=2908, col_offset=12)], [], lineno=2900, col_offset=13)], lineno=2897, col_offset=13)], lineno=2876, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2913, col_offset=8), 'stampItems', Load(), lineno=2913, col_offset=8), 'append', Load(), lineno=2913, col_offset=8), [Name('stitem', Load(), lineno=2913, col_offset=31)], [], None, None, lineno=2913, col_offset=8), lineno=2913, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2914, col_offset=8), 'undobuffer', Load(), lineno=2914, col_offset=8), 'push', Load(), lineno=2914, col_offset=8), [Tuple([Str('stamp', lineno=2914, col_offset=30), Name('stitem', Load(), lineno=2914, col_offset=39)], Load(), lineno=2914, col_offset=30)], [], None, None, lineno=2914, col_offset=8), lineno=2914, col_offset=8), Return(Name('stitem', Load(), lineno=2915, col_offset=15), lineno=2915, col_offset=8)], [], lineno=2857, col_offset=4), FunctionDef('_clearstamp', arguments([Name('self', Param(), lineno=2917, col_offset=20), Name('stampid', Param(), lineno=2917, col_offset=26)], None, None, []), [Expr(Str('does the work for clearstamp() and clearstamps()\n        ', lineno=2919, col_offset=-1), lineno=2919, col_offset=-1), If(Compare(Name('stampid', Load(), lineno=2920, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=2920, col_offset=22), 'stampItems', Load(), lineno=2920, col_offset=22)], lineno=2920, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=2921, col_offset=15), [Name('stampid', Load(), lineno=2921, col_offset=26), Name('tuple', Load(), lineno=2921, col_offset=35)], [], None, None, lineno=2921, col_offset=15), [For(Name('subitem', Store(), lineno=2922, col_offset=20), Name('stampid', Load(), lineno=2922, col_offset=31), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2923, col_offset=20), 'screen', Load(), lineno=2923, col_offset=20), '_delete', Load(), lineno=2923, col_offset=20), [Name('subitem', Load(), lineno=2923, col_offset=40)], [], None, None, lineno=2923, col_offset=20), lineno=2923, col_offset=20)], [], lineno=2922, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2925, col_offset=16), 'screen', Load(), lineno=2925, col_offset=16), '_delete', Load(), lineno=2925, col_offset=16), [Name('stampid', Load(), lineno=2925, col_offset=36)], [], None, None, lineno=2925, col_offset=16), lineno=2925, col_offset=16)], lineno=2921, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2926, col_offset=12), 'stampItems', Load(), lineno=2926, col_offset=12), 'remove', Load(), lineno=2926, col_offset=12), [Name('stampid', Load(), lineno=2926, col_offset=35)], [], None, None, lineno=2926, col_offset=12), lineno=2926, col_offset=12)], [], lineno=2920, col_offset=8), Assign([Name('item', Store(), lineno=2929, col_offset=8)], Tuple([Str('stamp', lineno=2929, col_offset=16), Name('stampid', Load(), lineno=2929, col_offset=25)], Load(), lineno=2929, col_offset=16), lineno=2929, col_offset=8), Assign([Name('buf', Store(), lineno=2930, col_offset=8)], Attribute(Name('self', Load(), lineno=2930, col_offset=14), 'undobuffer', Load(), lineno=2930, col_offset=14), lineno=2930, col_offset=8), If(Compare(Name('item', Load(), lineno=2931, col_offset=11), [NotIn()], [Attribute(Name('buf', Load(), lineno=2931, col_offset=23), 'buffer', Load(), lineno=2931, col_offset=23)], lineno=2931, col_offset=11), [Return(None, lineno=2932, col_offset=12)], [], lineno=2931, col_offset=8), Assign([Name('index', Store(), lineno=2933, col_offset=8)], Call(Attribute(Attribute(Name('buf', Load(), lineno=2933, col_offset=16), 'buffer', Load(), lineno=2933, col_offset=16), 'index', Load(), lineno=2933, col_offset=16), [Name('item', Load(), lineno=2933, col_offset=33)], [], None, None, lineno=2933, col_offset=16), lineno=2933, col_offset=8), Expr(Call(Attribute(Attribute(Name('buf', Load(), lineno=2934, col_offset=8), 'buffer', Load(), lineno=2934, col_offset=8), 'remove', Load(), lineno=2934, col_offset=8), [Name('item', Load(), lineno=2934, col_offset=26)], [], None, None, lineno=2934, col_offset=8), lineno=2934, col_offset=8), If(Compare(Name('index', Load(), lineno=2935, col_offset=11), [LtE()], [Attribute(Name('buf', Load(), lineno=2935, col_offset=20), 'ptr', Load(), lineno=2935, col_offset=20)], lineno=2935, col_offset=11), [Assign([Attribute(Name('buf', Load(), lineno=2936, col_offset=12), 'ptr', Store(), lineno=2936, col_offset=12)], BinOp(BinOp(Attribute(Name('buf', Load(), lineno=2936, col_offset=23), 'ptr', Load(), lineno=2936, col_offset=23), Sub(), Num(1, lineno=2936, col_offset=33), lineno=2936, col_offset=23), Mod(), Attribute(Name('buf', Load(), lineno=2936, col_offset=38), 'bufsize', Load(), lineno=2936, col_offset=38), lineno=2936, col_offset=22), lineno=2936, col_offset=12)], [], lineno=2935, col_offset=8), Expr(Call(Attribute(Attribute(Name('buf', Load(), lineno=2937, col_offset=8), 'buffer', Load(), lineno=2937, col_offset=8), 'insert', Load(), lineno=2937, col_offset=8), [BinOp(BinOp(Attribute(Name('buf', Load(), lineno=2937, col_offset=27), 'ptr', Load(), lineno=2937, col_offset=27), Add(), Num(1, lineno=2937, col_offset=35), lineno=2937, col_offset=27), Mod(), Attribute(Name('buf', Load(), lineno=2937, col_offset=38), 'bufsize', Load(), lineno=2937, col_offset=38), lineno=2937, col_offset=26), List([Name('None', Load(), lineno=2937, col_offset=52)], Load(), lineno=2937, col_offset=51)], [], None, None, lineno=2937, col_offset=8), lineno=2937, col_offset=8)], [], lineno=2917, col_offset=4), FunctionDef('clearstamp', arguments([Name('self', Param(), lineno=2939, col_offset=19), Name('stampid', Param(), lineno=2939, col_offset=25)], None, None, []), [Expr(Str('Delete stamp with given stampid\n\n        Argument:\n        stampid - an integer, must be return value of previous stamp() call.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color("blue")\n        >>> astamp = turtle.stamp()\n        >>> turtle.fd(50)\n        >>> turtle.clearstamp(astamp)\n        ', lineno=2950, col_offset=-1), lineno=2950, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2951, col_offset=8), '_clearstamp', Load(), lineno=2951, col_offset=8), [Name('stampid', Load(), lineno=2951, col_offset=25)], [], None, None, lineno=2951, col_offset=8), lineno=2951, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2952, col_offset=8), '_update', Load(), lineno=2952, col_offset=8), [], [], None, None, lineno=2952, col_offset=8), lineno=2952, col_offset=8)], [], lineno=2939, col_offset=4), FunctionDef('clearstamps', arguments([Name('self', Param(), lineno=2954, col_offset=20), Name('n', Param(), lineno=2954, col_offset=26)], None, None, [Name('None', Load(), lineno=2954, col_offset=28)]), [Expr(Str("Delete all or first/last n of turtle's stamps.\n\n        Optional argument:\n        n -- an integer\n\n        If n is None, delete all of pen's stamps,\n        else if n > 0 delete first n stamps\n        else if n < 0 delete last n stamps.\n\n        Example (for a Turtle instance named turtle):\n        >>> for i in range(8):\n                turtle.stamp(); turtle.fd(30)\n        ...\n        >>> turtle.clearstamps(2)\n        >>> turtle.clearstamps(-2)\n        >>> turtle.clearstamps()\n        ", lineno=2971, col_offset=-1), lineno=2971, col_offset=-1), If(Compare(Name('n', Load(), lineno=2972, col_offset=11), [Is()], [Name('None', Load(), lineno=2972, col_offset=16)], lineno=2972, col_offset=11), [Assign([Name('toDelete', Store(), lineno=2973, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=2973, col_offset=23), 'stampItems', Load(), lineno=2973, col_offset=23), Slice(None, None, None), Load(), lineno=2973, col_offset=23), lineno=2973, col_offset=12)], [If(Compare(Name('n', Load(), lineno=2974, col_offset=13), [GtE()], [Num(0, lineno=2974, col_offset=18)], lineno=2974, col_offset=13), [Assign([Name('toDelete', Store(), lineno=2975, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=2975, col_offset=23), 'stampItems', Load(), lineno=2975, col_offset=23), Slice(None, Name('n', Load(), lineno=2975, col_offset=40), None), Load(), lineno=2975, col_offset=23), lineno=2975, col_offset=12)], [Assign([Name('toDelete', Store(), lineno=2977, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=2977, col_offset=23), 'stampItems', Load(), lineno=2977, col_offset=23), Slice(Name('n', Load(), lineno=2977, col_offset=39), None, None), Load(), lineno=2977, col_offset=23), lineno=2977, col_offset=12)], lineno=2974, col_offset=13)], lineno=2972, col_offset=8), For(Name('item', Store(), lineno=2978, col_offset=12), Name('toDelete', Load(), lineno=2978, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=2979, col_offset=12), '_clearstamp', Load(), lineno=2979, col_offset=12), [Name('item', Load(), lineno=2979, col_offset=29)], [], None, None, lineno=2979, col_offset=12), lineno=2979, col_offset=12)], [], lineno=2978, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2980, col_offset=8), '_update', Load(), lineno=2980, col_offset=8), [], [], None, None, lineno=2980, col_offset=8), lineno=2980, col_offset=8)], [], lineno=2954, col_offset=4), FunctionDef('_goto', arguments([Name('self', Param(), lineno=2982, col_offset=14), Name('end', Param(), lineno=2982, col_offset=20)], None, None, []), [Expr(Str('Move the pen to the point end, thereby drawing a line\n        if pen is down. All other methodes for turtle movement depend\n        on this one.\n        ', lineno=2986, col_offset=-1), lineno=2986, col_offset=-1), Assign([Name('go_modes', Store(), lineno=2988, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=2988, col_offset=21), '_drawing', Load(), lineno=2988, col_offset=21), Attribute(Name('self', Load(), lineno=2989, col_offset=21), '_pencolor', Load(), lineno=2989, col_offset=21), Attribute(Name('self', Load(), lineno=2990, col_offset=21), '_pensize', Load(), lineno=2990, col_offset=21), Call(Name('isinstance', Load(), lineno=2991, col_offset=21), [Attribute(Name('self', Load(), lineno=2991, col_offset=32), '_fillpath', Load(), lineno=2991, col_offset=32), Name('list', Load(), lineno=2991, col_offset=48)], [], None, None, lineno=2991, col_offset=21)], Load(), lineno=2988, col_offset=21), lineno=2988, col_offset=8), Assign([Name('screen', Store(), lineno=2992, col_offset=8)], Attribute(Name('self', Load(), lineno=2992, col_offset=17), 'screen', Load(), lineno=2992, col_offset=17), lineno=2992, col_offset=8), Assign([Name('undo_entry', Store(), lineno=2993, col_offset=8)], Tuple([Str('go', lineno=2993, col_offset=22), Attribute(Name('self', Load(), lineno=2993, col_offset=28), '_position', Load(), lineno=2993, col_offset=28), Name('end', Load(), lineno=2993, col_offset=44), Name('go_modes', Load(), lineno=2993, col_offset=49), Tuple([Attribute(Name('self', Load(), lineno=2994, col_offset=23), 'currentLineItem', Load(), lineno=2994, col_offset=23), Subscript(Attribute(Name('self', Load(), lineno=2995, col_offset=22), 'currentLine', Load(), lineno=2995, col_offset=22), Slice(None, None, None), Load(), lineno=2995, col_offset=22), Call(Attribute(Name('screen', Load(), lineno=2996, col_offset=22), '_pointlist', Load(), lineno=2996, col_offset=22), [Attribute(Name('self', Load(), lineno=2996, col_offset=40), 'currentLineItem', Load(), lineno=2996, col_offset=40)], [], None, None, lineno=2996, col_offset=22), Subscript(Attribute(Name('self', Load(), lineno=2997, col_offset=22), 'items', Load(), lineno=2997, col_offset=22), Slice(None, None, None), Load(), lineno=2997, col_offset=22)], Load(), lineno=2994, col_offset=23)], Load(), lineno=2993, col_offset=22), lineno=2993, col_offset=8), If(Attribute(Name('self', Load(), lineno=2999, col_offset=11), 'undobuffer', Load(), lineno=2999, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3000, col_offset=12), 'undobuffer', Load(), lineno=3000, col_offset=12), 'push', Load(), lineno=3000, col_offset=12), [Name('undo_entry', Load(), lineno=3000, col_offset=33)], [], None, None, lineno=3000, col_offset=12), lineno=3000, col_offset=12)], [], lineno=2999, col_offset=8), Assign([Name('start', Store(), lineno=3001, col_offset=8)], Attribute(Name('self', Load(), lineno=3001, col_offset=16), '_position', Load(), lineno=3001, col_offset=16), lineno=3001, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=3002, col_offset=11), '_speed', Load(), lineno=3002, col_offset=11), Compare(Attribute(Name('screen', Load(), lineno=3002, col_offset=27), '_tracing', Load(), lineno=3002, col_offset=27), [Eq()], [Num(1, lineno=3002, col_offset=46)], lineno=3002, col_offset=27)], lineno=3002, col_offset=11), [Assign([Name('diff', Store(), lineno=3003, col_offset=12)], BinOp(Name('end', Load(), lineno=3003, col_offset=20), Sub(), Name('start', Load(), lineno=3003, col_offset=24), lineno=3003, col_offset=20), lineno=3003, col_offset=12), Assign([Name('diffsq', Store(), lineno=3004, col_offset=12)], BinOp(BinOp(BinOp(Subscript(Name('diff', Load(), lineno=3004, col_offset=22), Index(Num(0, lineno=3004, col_offset=27)), Load(), lineno=3004, col_offset=22), Mult(), Attribute(Name('screen', Load(), lineno=3004, col_offset=30), 'xscale', Load(), lineno=3004, col_offset=30), lineno=3004, col_offset=22), Pow(), Num(2, lineno=3004, col_offset=46), lineno=3004, col_offset=21), Add(), BinOp(BinOp(Subscript(Name('diff', Load(), lineno=3004, col_offset=51), Index(Num(1, lineno=3004, col_offset=56)), Load(), lineno=3004, col_offset=51), Mult(), Attribute(Name('screen', Load(), lineno=3004, col_offset=59), 'yscale', Load(), lineno=3004, col_offset=59), lineno=3004, col_offset=51), Pow(), Num(2, lineno=3004, col_offset=75), lineno=3004, col_offset=50), lineno=3004, col_offset=21), lineno=3004, col_offset=12), Assign([Name('nhops', Store(), lineno=3005, col_offset=12)], BinOp(Num(1, lineno=3005, col_offset=20), Add(), Call(Name('int', Load(), lineno=3005, col_offset=22), [BinOp(BinOp(Name('diffsq', Load(), lineno=3005, col_offset=27), Pow(), Num(0.5, lineno=3005, col_offset=35), lineno=3005, col_offset=27), Div(), BinOp(BinOp(Num(3, lineno=3005, col_offset=41), Mult(), BinOp(Num(1.1, lineno=3005, col_offset=44), Pow(), Attribute(Name('self', Load(), lineno=3005, col_offset=49), '_speed', Load(), lineno=3005, col_offset=49), lineno=3005, col_offset=44), lineno=3005, col_offset=41), Mult(), Attribute(Name('self', Load(), lineno=3005, col_offset=62), '_speed', Load(), lineno=3005, col_offset=62), lineno=3005, col_offset=61), lineno=3005, col_offset=26)], [], None, None, lineno=3005, col_offset=22), lineno=3005, col_offset=20), lineno=3005, col_offset=12), Assign([Name('delta', Store(), lineno=3006, col_offset=12)], BinOp(Name('diff', Load(), lineno=3006, col_offset=20), Mult(), BinOp(Num(1.0, lineno=3006, col_offset=28), Div(), Name('nhops', Load(), lineno=3006, col_offset=32), lineno=3006, col_offset=28), lineno=3006, col_offset=20), lineno=3006, col_offset=12), For(Name('n', Store(), lineno=3007, col_offset=16), Call(Name('range', Load(), lineno=3007, col_offset=21), [Num(1, lineno=3007, col_offset=27), Name('nhops', Load(), lineno=3007, col_offset=30)], [], None, None, lineno=3007, col_offset=21), [If(Compare(Name('n', Load(), lineno=3008, col_offset=19), [Eq()], [Num(1, lineno=3008, col_offset=24)], lineno=3008, col_offset=19), [Assign([Name('top', Store(), lineno=3009, col_offset=20)], Name('True', Load(), lineno=3009, col_offset=26), lineno=3009, col_offset=20)], [Assign([Name('top', Store(), lineno=3011, col_offset=20)], Name('False', Load(), lineno=3011, col_offset=26), lineno=3011, col_offset=20)], lineno=3008, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=3012, col_offset=16), '_position', Store(), lineno=3012, col_offset=16)], BinOp(Name('start', Load(), lineno=3012, col_offset=33), Add(), BinOp(Name('delta', Load(), lineno=3012, col_offset=41), Mult(), Name('n', Load(), lineno=3012, col_offset=49), lineno=3012, col_offset=41), lineno=3012, col_offset=33), lineno=3012, col_offset=16), If(Attribute(Name('self', Load(), lineno=3013, col_offset=19), '_drawing', Load(), lineno=3013, col_offset=19), [Expr(Call(Attribute(Name('screen', Load(), lineno=3014, col_offset=20), '_drawline', Load(), lineno=3014, col_offset=20), [Attribute(Name('self', Load(), lineno=3014, col_offset=37), 'drawingLineItem', Load(), lineno=3014, col_offset=37), Tuple([Name('start', Load(), lineno=3015, col_offset=38), Attribute(Name('self', Load(), lineno=3015, col_offset=45), '_position', Load(), lineno=3015, col_offset=45)], Load(), lineno=3015, col_offset=38), Attribute(Name('self', Load(), lineno=3016, col_offset=37), '_pencolor', Load(), lineno=3016, col_offset=37), Attribute(Name('self', Load(), lineno=3016, col_offset=53), '_pensize', Load(), lineno=3016, col_offset=53), Name('top', Load(), lineno=3016, col_offset=68)], [], None, None, lineno=3014, col_offset=20), lineno=3014, col_offset=20)], [], lineno=3013, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3017, col_offset=16), '_update', Load(), lineno=3017, col_offset=16), [], [], None, None, lineno=3017, col_offset=16), lineno=3017, col_offset=16)], [], lineno=3007, col_offset=12), If(Attribute(Name('self', Load(), lineno=3018, col_offset=15), '_drawing', Load(), lineno=3018, col_offset=15), [Expr(Call(Attribute(Name('screen', Load(), lineno=3019, col_offset=16), '_drawline', Load(), lineno=3019, col_offset=16), [Attribute(Name('self', Load(), lineno=3019, col_offset=33), 'drawingLineItem', Load(), lineno=3019, col_offset=33), Tuple([Tuple([Num(0, lineno=3019, col_offset=57), Num(0, lineno=3019, col_offset=60)], Load(), lineno=3019, col_offset=57), Tuple([Num(0, lineno=3019, col_offset=65), Num(0, lineno=3019, col_offset=68)], Load(), lineno=3019, col_offset=65)], Load(), lineno=3019, col_offset=56)], [keyword('fill', Str('', lineno=3020, col_offset=52)), keyword('width', Attribute(Name('self', Load(), lineno=3020, col_offset=62), '_pensize', Load(), lineno=3020, col_offset=62))], None, None, lineno=3019, col_offset=16), lineno=3019, col_offset=16)], [], lineno=3018, col_offset=12)], [], lineno=3002, col_offset=8), If(Attribute(Name('self', Load(), lineno=3022, col_offset=11), '_drawing', Load(), lineno=3022, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3023, col_offset=12), 'currentLine', Load(), lineno=3023, col_offset=12), 'append', Load(), lineno=3023, col_offset=12), [Name('end', Load(), lineno=3023, col_offset=36)], [], None, None, lineno=3023, col_offset=12), lineno=3023, col_offset=12)], [], lineno=3022, col_offset=8), If(Call(Name('isinstance', Load(), lineno=3024, col_offset=11), [Attribute(Name('self', Load(), lineno=3024, col_offset=22), '_fillpath', Load(), lineno=3024, col_offset=22), Name('list', Load(), lineno=3024, col_offset=38)], [], None, None, lineno=3024, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3025, col_offset=12), '_fillpath', Load(), lineno=3025, col_offset=12), 'append', Load(), lineno=3025, col_offset=12), [Name('end', Load(), lineno=3025, col_offset=34)], [], None, None, lineno=3025, col_offset=12), lineno=3025, col_offset=12)], [], lineno=3024, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3027, col_offset=8), '_position', Store(), lineno=3027, col_offset=8)], Name('end', Load(), lineno=3027, col_offset=25), lineno=3027, col_offset=8), If(Attribute(Name('self', Load(), lineno=3028, col_offset=11), '_creatingPoly', Load(), lineno=3028, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3029, col_offset=12), '_poly', Load(), lineno=3029, col_offset=12), 'append', Load(), lineno=3029, col_offset=12), [Name('end', Load(), lineno=3029, col_offset=30)], [], None, None, lineno=3029, col_offset=12), lineno=3029, col_offset=12)], [], lineno=3028, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=3030, col_offset=11), [Attribute(Name('self', Load(), lineno=3030, col_offset=15), 'currentLine', Load(), lineno=3030, col_offset=15)], [], None, None, lineno=3030, col_offset=11), [Gt()], [Num(42, lineno=3030, col_offset=35)], lineno=3030, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=3032, col_offset=12), '_newLine', Load(), lineno=3032, col_offset=12), [], [], None, None, lineno=3032, col_offset=12), lineno=3032, col_offset=12)], [], lineno=3030, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3033, col_offset=8), '_update', Load(), lineno=3033, col_offset=8), [], [], None, None, lineno=3033, col_offset=8), lineno=3033, col_offset=8)], [], lineno=2982, col_offset=4), FunctionDef('_undogoto', arguments([Name('self', Param(), lineno=3035, col_offset=18), Name('entry', Param(), lineno=3035, col_offset=24)], None, None, []), [Expr(Str('Reverse a _goto. Used for undo()\n        ', lineno=3037, col_offset=-1), lineno=3037, col_offset=-1), Assign([Tuple([Name('old', Store(), lineno=3038, col_offset=8), Name('new', Store(), lineno=3038, col_offset=13), Name('go_modes', Store(), lineno=3038, col_offset=18), Name('coodata', Store(), lineno=3038, col_offset=28)], Store(), lineno=3038, col_offset=8)], Name('entry', Load(), lineno=3038, col_offset=38), lineno=3038, col_offset=8), Assign([Tuple([Name('drawing', Store(), lineno=3039, col_offset=8), Name('pc', Store(), lineno=3039, col_offset=17), Name('ps', Store(), lineno=3039, col_offset=21), Name('filling', Store(), lineno=3039, col_offset=25)], Store(), lineno=3039, col_offset=8)], Name('go_modes', Load(), lineno=3039, col_offset=35), lineno=3039, col_offset=8), Assign([Tuple([Name('cLI', Store(), lineno=3040, col_offset=8), Name('cL', Store(), lineno=3040, col_offset=13), Name('pl', Store(), lineno=3040, col_offset=17), Name('items', Store(), lineno=3040, col_offset=21)], Store(), lineno=3040, col_offset=8)], Name('coodata', Load(), lineno=3040, col_offset=29), lineno=3040, col_offset=8), Assign([Name('screen', Store(), lineno=3041, col_offset=8)], Attribute(Name('self', Load(), lineno=3041, col_offset=17), 'screen', Load(), lineno=3041, col_offset=17), lineno=3041, col_offset=8), If(Compare(Call(Name('abs', Load(), lineno=3042, col_offset=11), [BinOp(Attribute(Name('self', Load(), lineno=3042, col_offset=15), '_position', Load(), lineno=3042, col_offset=15), Sub(), Name('new', Load(), lineno=3042, col_offset=32), lineno=3042, col_offset=15)], [], None, None, lineno=3042, col_offset=11), [Gt()], [Num(0.5, lineno=3042, col_offset=39)], lineno=3042, col_offset=11), [Print(None, [Str('undogoto: HALLO-DA-STIMMT-WAS-NICHT!', lineno=3043, col_offset=18)], True, lineno=3043, col_offset=12)], [], lineno=3042, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3045, col_offset=8), 'currentLineItem', Store(), lineno=3045, col_offset=8)], Name('cLI', Load(), lineno=3045, col_offset=31), lineno=3045, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3046, col_offset=8), 'currentLine', Store(), lineno=3046, col_offset=8)], Name('cL', Load(), lineno=3046, col_offset=27), lineno=3046, col_offset=8), If(Compare(Name('pl', Load(), lineno=3048, col_offset=11), [Eq()], [List([Tuple([Num(0, lineno=3048, col_offset=19), Num(0, lineno=3048, col_offset=22)], Load(), lineno=3048, col_offset=19), Tuple([Num(0, lineno=3048, col_offset=27), Num(0, lineno=3048, col_offset=30)], Load(), lineno=3048, col_offset=27)], Load(), lineno=3048, col_offset=17)], lineno=3048, col_offset=11), [Assign([Name('usepc', Store(), lineno=3049, col_offset=12)], Str('', lineno=3049, col_offset=20), lineno=3049, col_offset=12)], [Assign([Name('usepc', Store(), lineno=3051, col_offset=12)], Name('pc', Load(), lineno=3051, col_offset=20), lineno=3051, col_offset=12)], lineno=3048, col_offset=8), Expr(Call(Attribute(Name('screen', Load(), lineno=3052, col_offset=8), '_drawline', Load(), lineno=3052, col_offset=8), [Name('cLI', Load(), lineno=3052, col_offset=25), Name('pl', Load(), lineno=3052, col_offset=30)], [keyword('fill', Name('usepc', Load(), lineno=3052, col_offset=39)), keyword('width', Name('ps', Load(), lineno=3052, col_offset=52))], None, None, lineno=3052, col_offset=8), lineno=3052, col_offset=8), Assign([Name('todelete', Store(), lineno=3054, col_offset=8)], ListComp(Name('i', Load(), lineno=3054, col_offset=20), [comprehension(Name('i', Store(), lineno=3054, col_offset=26), Attribute(Name('self', Load(), lineno=3054, col_offset=31), 'items', Load(), lineno=3054, col_offset=31), [BoolOp(And(), [Compare(Name('i', Load(), lineno=3054, col_offset=46), [NotIn()], [Name('items', Load(), lineno=3054, col_offset=55)], lineno=3054, col_offset=46), Compare(Call(Attribute(Name('screen', Load(), lineno=3055, col_offset=40), '_type', Load(), lineno=3055, col_offset=40), [Name('i', Load(), lineno=3055, col_offset=53)], [], None, None, lineno=3055, col_offset=40), [Eq()], [Str('line', lineno=3055, col_offset=59)], lineno=3055, col_offset=40)], lineno=3054, col_offset=45)])], lineno=3054, col_offset=20), lineno=3054, col_offset=8), For(Name('i', Store(), lineno=3056, col_offset=12), Name('todelete', Load(), lineno=3056, col_offset=17), [Expr(Call(Attribute(Name('screen', Load(), lineno=3057, col_offset=12), '_delete', Load(), lineno=3057, col_offset=12), [Name('i', Load(), lineno=3057, col_offset=27)], [], None, None, lineno=3057, col_offset=12), lineno=3057, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3058, col_offset=12), 'items', Load(), lineno=3058, col_offset=12), 'remove', Load(), lineno=3058, col_offset=12), [Name('i', Load(), lineno=3058, col_offset=30)], [], None, None, lineno=3058, col_offset=12), lineno=3058, col_offset=12)], [], lineno=3056, col_offset=8), Assign([Name('start', Store(), lineno=3060, col_offset=8)], Name('old', Load(), lineno=3060, col_offset=16), lineno=3060, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=3061, col_offset=11), '_speed', Load(), lineno=3061, col_offset=11), Compare(Attribute(Name('screen', Load(), lineno=3061, col_offset=27), '_tracing', Load(), lineno=3061, col_offset=27), [Eq()], [Num(1, lineno=3061, col_offset=46)], lineno=3061, col_offset=27)], lineno=3061, col_offset=11), [Assign([Name('diff', Store(), lineno=3062, col_offset=12)], BinOp(Name('old', Load(), lineno=3062, col_offset=19), Sub(), Name('new', Load(), lineno=3062, col_offset=25), lineno=3062, col_offset=19), lineno=3062, col_offset=12), Assign([Name('diffsq', Store(), lineno=3063, col_offset=12)], BinOp(BinOp(BinOp(Subscript(Name('diff', Load(), lineno=3063, col_offset=22), Index(Num(0, lineno=3063, col_offset=27)), Load(), lineno=3063, col_offset=22), Mult(), Attribute(Name('screen', Load(), lineno=3063, col_offset=30), 'xscale', Load(), lineno=3063, col_offset=30), lineno=3063, col_offset=22), Pow(), Num(2, lineno=3063, col_offset=46), lineno=3063, col_offset=21), Add(), BinOp(BinOp(Subscript(Name('diff', Load(), lineno=3063, col_offset=51), Index(Num(1, lineno=3063, col_offset=56)), Load(), lineno=3063, col_offset=51), Mult(), Attribute(Name('screen', Load(), lineno=3063, col_offset=59), 'yscale', Load(), lineno=3063, col_offset=59), lineno=3063, col_offset=51), Pow(), Num(2, lineno=3063, col_offset=75), lineno=3063, col_offset=50), lineno=3063, col_offset=21), lineno=3063, col_offset=12), Assign([Name('nhops', Store(), lineno=3064, col_offset=12)], BinOp(Num(1, lineno=3064, col_offset=20), Add(), Call(Name('int', Load(), lineno=3064, col_offset=22), [BinOp(BinOp(Name('diffsq', Load(), lineno=3064, col_offset=27), Pow(), Num(0.5, lineno=3064, col_offset=35), lineno=3064, col_offset=27), Div(), BinOp(BinOp(Num(3, lineno=3064, col_offset=41), Mult(), BinOp(Num(1.1, lineno=3064, col_offset=44), Pow(), Attribute(Name('self', Load(), lineno=3064, col_offset=49), '_speed', Load(), lineno=3064, col_offset=49), lineno=3064, col_offset=44), lineno=3064, col_offset=41), Mult(), Attribute(Name('self', Load(), lineno=3064, col_offset=62), '_speed', Load(), lineno=3064, col_offset=62), lineno=3064, col_offset=61), lineno=3064, col_offset=26)], [], None, None, lineno=3064, col_offset=22), lineno=3064, col_offset=20), lineno=3064, col_offset=12), Assign([Name('delta', Store(), lineno=3065, col_offset=12)], BinOp(Name('diff', Load(), lineno=3065, col_offset=20), Mult(), BinOp(Num(1.0, lineno=3065, col_offset=28), Div(), Name('nhops', Load(), lineno=3065, col_offset=32), lineno=3065, col_offset=28), lineno=3065, col_offset=20), lineno=3065, col_offset=12), For(Name('n', Store(), lineno=3066, col_offset=16), Call(Name('range', Load(), lineno=3066, col_offset=21), [Num(1, lineno=3066, col_offset=27), Name('nhops', Load(), lineno=3066, col_offset=30)], [], None, None, lineno=3066, col_offset=21), [If(Compare(Name('n', Load(), lineno=3067, col_offset=19), [Eq()], [Num(1, lineno=3067, col_offset=24)], lineno=3067, col_offset=19), [Assign([Name('top', Store(), lineno=3068, col_offset=20)], Name('True', Load(), lineno=3068, col_offset=26), lineno=3068, col_offset=20)], [Assign([Name('top', Store(), lineno=3070, col_offset=20)], Name('False', Load(), lineno=3070, col_offset=26), lineno=3070, col_offset=20)], lineno=3067, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=3071, col_offset=16), '_position', Store(), lineno=3071, col_offset=16)], BinOp(Name('new', Load(), lineno=3071, col_offset=33), Add(), BinOp(Name('delta', Load(), lineno=3071, col_offset=39), Mult(), Name('n', Load(), lineno=3071, col_offset=47), lineno=3071, col_offset=39), lineno=3071, col_offset=33), lineno=3071, col_offset=16), If(Name('drawing', Load(), lineno=3072, col_offset=19), [Expr(Call(Attribute(Name('screen', Load(), lineno=3073, col_offset=20), '_drawline', Load(), lineno=3073, col_offset=20), [Attribute(Name('self', Load(), lineno=3073, col_offset=37), 'drawingLineItem', Load(), lineno=3073, col_offset=37), Tuple([Name('start', Load(), lineno=3074, col_offset=38), Attribute(Name('self', Load(), lineno=3074, col_offset=45), '_position', Load(), lineno=3074, col_offset=45)], Load(), lineno=3074, col_offset=38), Name('pc', Load(), lineno=3075, col_offset=37), Name('ps', Load(), lineno=3075, col_offset=41), Name('top', Load(), lineno=3075, col_offset=45)], [], None, None, lineno=3073, col_offset=20), lineno=3073, col_offset=20)], [], lineno=3072, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3076, col_offset=16), '_update', Load(), lineno=3076, col_offset=16), [], [], None, None, lineno=3076, col_offset=16), lineno=3076, col_offset=16)], [], lineno=3066, col_offset=12), If(Name('drawing', Load(), lineno=3077, col_offset=15), [Expr(Call(Attribute(Name('screen', Load(), lineno=3078, col_offset=16), '_drawline', Load(), lineno=3078, col_offset=16), [Attribute(Name('self', Load(), lineno=3078, col_offset=33), 'drawingLineItem', Load(), lineno=3078, col_offset=33), Tuple([Tuple([Num(0, lineno=3078, col_offset=57), Num(0, lineno=3078, col_offset=60)], Load(), lineno=3078, col_offset=57), Tuple([Num(0, lineno=3078, col_offset=65), Num(0, lineno=3078, col_offset=68)], Load(), lineno=3078, col_offset=65)], Load(), lineno=3078, col_offset=56)], [keyword('fill', Str('', lineno=3079, col_offset=52)), keyword('width', Name('ps', Load(), lineno=3079, col_offset=62))], None, None, lineno=3078, col_offset=16), lineno=3078, col_offset=16)], [], lineno=3077, col_offset=12)], [], lineno=3061, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3081, col_offset=8), '_position', Store(), lineno=3081, col_offset=8)], Name('old', Load(), lineno=3081, col_offset=25), lineno=3081, col_offset=8), If(Attribute(Name('self', Load(), lineno=3086, col_offset=11), '_creatingPoly', Load(), lineno=3086, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=3087, col_offset=15), [Attribute(Name('self', Load(), lineno=3087, col_offset=19), '_poly', Load(), lineno=3087, col_offset=19)], [], None, None, lineno=3087, col_offset=15), [Gt()], [Num(0, lineno=3087, col_offset=33)], lineno=3087, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3088, col_offset=16), '_poly', Load(), lineno=3088, col_offset=16), 'pop', Load(), lineno=3088, col_offset=16), [], [], None, None, lineno=3088, col_offset=16), lineno=3088, col_offset=16)], [], lineno=3087, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=3089, col_offset=15), '_poly', Load(), lineno=3089, col_offset=15), [Eq()], [List([], Load(), lineno=3089, col_offset=29)], lineno=3089, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=3090, col_offset=16), '_creatingPoly', Store(), lineno=3090, col_offset=16)], Name('False', Load(), lineno=3090, col_offset=37), lineno=3090, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=3091, col_offset=16), '_poly', Store(), lineno=3091, col_offset=16)], Name('None', Load(), lineno=3091, col_offset=29), lineno=3091, col_offset=16)], [], lineno=3089, col_offset=12)], [], lineno=3086, col_offset=8), If(Name('filling', Load(), lineno=3092, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=3093, col_offset=15), '_fillpath', Load(), lineno=3093, col_offset=15), [Eq()], [List([], Load(), lineno=3093, col_offset=33)], lineno=3093, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=3094, col_offset=16), '_fillpath', Store(), lineno=3094, col_offset=16)], Name('None', Load(), lineno=3094, col_offset=33), lineno=3094, col_offset=16), Print(None, [Str('Unwahrscheinlich in _undogoto!', lineno=3095, col_offset=22)], True, lineno=3095, col_offset=16)], [If(Compare(Attribute(Name('self', Load(), lineno=3096, col_offset=17), '_fillpath', Load(), lineno=3096, col_offset=17), [IsNot()], [Name('None', Load(), lineno=3096, col_offset=39)], lineno=3096, col_offset=17), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3097, col_offset=16), '_fillpath', Load(), lineno=3097, col_offset=16), 'pop', Load(), lineno=3097, col_offset=16), [], [], None, None, lineno=3097, col_offset=16), lineno=3097, col_offset=16)], [], lineno=3096, col_offset=17)], lineno=3093, col_offset=12)], [], lineno=3092, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3098, col_offset=8), '_update', Load(), lineno=3098, col_offset=8), [], [], None, None, lineno=3098, col_offset=8), lineno=3098, col_offset=8)], [], lineno=3035, col_offset=4), FunctionDef('_rotate', arguments([Name('self', Param(), lineno=3100, col_offset=16), Name('angle', Param(), lineno=3100, col_offset=22)], None, None, []), [Expr(Str('Turns pen clockwise by angle.\n        ', lineno=3102, col_offset=-1), lineno=3102, col_offset=-1), If(Attribute(Name('self', Load(), lineno=3103, col_offset=11), 'undobuffer', Load(), lineno=3103, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3104, col_offset=12), 'undobuffer', Load(), lineno=3104, col_offset=12), 'push', Load(), lineno=3104, col_offset=12), [Tuple([Str('rot', lineno=3104, col_offset=34), Name('angle', Load(), lineno=3104, col_offset=41), Attribute(Name('self', Load(), lineno=3104, col_offset=48), '_degreesPerAU', Load(), lineno=3104, col_offset=48)], Load(), lineno=3104, col_offset=34)], [], None, None, lineno=3104, col_offset=12), lineno=3104, col_offset=12)], [], lineno=3103, col_offset=8), AugAssign(Name('angle', Store(), lineno=3105, col_offset=8), Mult(), Attribute(Name('self', Load(), lineno=3105, col_offset=17), '_degreesPerAU', Load(), lineno=3105, col_offset=17), lineno=3105, col_offset=8), Assign([Name('neworient', Store(), lineno=3106, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=3106, col_offset=20), '_orient', Load(), lineno=3106, col_offset=20), 'rotate', Load(), lineno=3106, col_offset=20), [Name('angle', Load(), lineno=3106, col_offset=40)], [], None, None, lineno=3106, col_offset=20), lineno=3106, col_offset=8), Assign([Name('tracing', Store(), lineno=3107, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=3107, col_offset=18), 'screen', Load(), lineno=3107, col_offset=18), '_tracing', Load(), lineno=3107, col_offset=18), lineno=3107, col_offset=8), If(BoolOp(And(), [Compare(Name('tracing', Load(), lineno=3108, col_offset=11), [Eq()], [Num(1, lineno=3108, col_offset=22)], lineno=3108, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=3108, col_offset=28), '_speed', Load(), lineno=3108, col_offset=28), [Gt()], [Num(0, lineno=3108, col_offset=42)], lineno=3108, col_offset=28)], lineno=3108, col_offset=11), [Assign([Name('anglevel', Store(), lineno=3109, col_offset=12)], BinOp(Num(3.0, lineno=3109, col_offset=23), Mult(), Attribute(Name('self', Load(), lineno=3109, col_offset=29), '_speed', Load(), lineno=3109, col_offset=29), lineno=3109, col_offset=23), lineno=3109, col_offset=12), Assign([Name('steps', Store(), lineno=3110, col_offset=12)], BinOp(Num(1, lineno=3110, col_offset=20), Add(), Call(Name('int', Load(), lineno=3110, col_offset=24), [BinOp(Call(Name('abs', Load(), lineno=3110, col_offset=28), [Name('angle', Load(), lineno=3110, col_offset=32)], [], None, None, lineno=3110, col_offset=28), Div(), Name('anglevel', Load(), lineno=3110, col_offset=39), lineno=3110, col_offset=28)], [], None, None, lineno=3110, col_offset=24), lineno=3110, col_offset=20), lineno=3110, col_offset=12), Assign([Name('delta', Store(), lineno=3111, col_offset=12)], BinOp(BinOp(Num(1.0, lineno=3111, col_offset=20), Mult(), Name('angle', Load(), lineno=3111, col_offset=24), lineno=3111, col_offset=20), Div(), Name('steps', Load(), lineno=3111, col_offset=30), lineno=3111, col_offset=29), lineno=3111, col_offset=12), For(Name('_', Store(), lineno=3112, col_offset=16), Call(Name('range', Load(), lineno=3112, col_offset=21), [Name('steps', Load(), lineno=3112, col_offset=27)], [], None, None, lineno=3112, col_offset=21), [Assign([Attribute(Name('self', Load(), lineno=3113, col_offset=16), '_orient', Store(), lineno=3113, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=3113, col_offset=31), '_orient', Load(), lineno=3113, col_offset=31), 'rotate', Load(), lineno=3113, col_offset=31), [Name('delta', Load(), lineno=3113, col_offset=51)], [], None, None, lineno=3113, col_offset=31), lineno=3113, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3114, col_offset=16), '_update', Load(), lineno=3114, col_offset=16), [], [], None, None, lineno=3114, col_offset=16), lineno=3114, col_offset=16)], [], lineno=3112, col_offset=12)], [], lineno=3108, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3115, col_offset=8), '_orient', Store(), lineno=3115, col_offset=8)], Name('neworient', Load(), lineno=3115, col_offset=23), lineno=3115, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3116, col_offset=8), '_update', Load(), lineno=3116, col_offset=8), [], [], None, None, lineno=3116, col_offset=8), lineno=3116, col_offset=8)], [], lineno=3100, col_offset=4), FunctionDef('_newLine', arguments([Name('self', Param(), lineno=3118, col_offset=17), Name('usePos', Param(), lineno=3118, col_offset=23)], None, None, [Name('True', Load(), lineno=3118, col_offset=30)]), [Expr(Str('Closes current line item and starts a new one.\n           Remark: if current line became too long, animation\n           performance (via _drawline) slowed down considerably.\n        ', lineno=3122, col_offset=-1), lineno=3122, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=3123, col_offset=11), [Attribute(Name('self', Load(), lineno=3123, col_offset=15), 'currentLine', Load(), lineno=3123, col_offset=15)], [], None, None, lineno=3123, col_offset=11), [Gt()], [Num(1, lineno=3123, col_offset=35)], lineno=3123, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3124, col_offset=12), 'screen', Load(), lineno=3124, col_offset=12), '_drawline', Load(), lineno=3124, col_offset=12), [Attribute(Name('self', Load(), lineno=3124, col_offset=34), 'currentLineItem', Load(), lineno=3124, col_offset=34), Attribute(Name('self', Load(), lineno=3124, col_offset=56), 'currentLine', Load(), lineno=3124, col_offset=56), Attribute(Name('self', Load(), lineno=3125, col_offset=38), '_pencolor', Load(), lineno=3125, col_offset=38), Attribute(Name('self', Load(), lineno=3125, col_offset=54), '_pensize', Load(), lineno=3125, col_offset=54)], [], None, None, lineno=3124, col_offset=12), lineno=3124, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=3126, col_offset=12), 'currentLineItem', Store(), lineno=3126, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3126, col_offset=35), 'screen', Load(), lineno=3126, col_offset=35), '_createline', Load(), lineno=3126, col_offset=35), [], [], None, None, lineno=3126, col_offset=35), lineno=3126, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3127, col_offset=12), 'items', Load(), lineno=3127, col_offset=12), 'append', Load(), lineno=3127, col_offset=12), [Attribute(Name('self', Load(), lineno=3127, col_offset=30), 'currentLineItem', Load(), lineno=3127, col_offset=30)], [], None, None, lineno=3127, col_offset=12), lineno=3127, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3129, col_offset=12), 'screen', Load(), lineno=3129, col_offset=12), '_drawline', Load(), lineno=3129, col_offset=12), [Attribute(Name('self', Load(), lineno=3129, col_offset=34), 'currentLineItem', Load(), lineno=3129, col_offset=34)], [keyword('top', Name('True', Load(), lineno=3129, col_offset=60))], None, None, lineno=3129, col_offset=12), lineno=3129, col_offset=12)], lineno=3123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3130, col_offset=8), 'currentLine', Store(), lineno=3130, col_offset=8)], List([], Load(), lineno=3130, col_offset=27), lineno=3130, col_offset=8), If(Name('usePos', Load(), lineno=3131, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=3132, col_offset=12), 'currentLine', Store(), lineno=3132, col_offset=12)], List([Attribute(Name('self', Load(), lineno=3132, col_offset=32), '_position', Load(), lineno=3132, col_offset=32)], Load(), lineno=3132, col_offset=31), lineno=3132, col_offset=12)], [], lineno=3131, col_offset=8)], [], lineno=3118, col_offset=4), FunctionDef('fill', arguments([Name('self', Param(), lineno=3134, col_offset=13), Name('flag', Param(), lineno=3134, col_offset=19)], None, None, [Name('None', Load(), lineno=3134, col_offset=24)]), [Expr(Str('Call fill(True) before drawing a shape to fill, fill(False) when done.\n\n        Optional argument:\n        flag -- True/False (or 1/0 respectively)\n\n        Call fill(True) before drawing the shape you want to fill,\n        and  fill(False) when done.\n        When used without argument: return fillstate (True if filling,\n        False else)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.fill(True)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.fill(False)\n        ', lineno=3155, col_offset=-1), lineno=3155, col_offset=-1), Assign([Name('filling', Store(), lineno=3156, col_offset=8)], Call(Name('isinstance', Load(), lineno=3156, col_offset=18), [Attribute(Name('self', Load(), lineno=3156, col_offset=29), '_fillpath', Load(), lineno=3156, col_offset=29), Name('list', Load(), lineno=3156, col_offset=45)], [], None, None, lineno=3156, col_offset=18), lineno=3156, col_offset=8), If(Compare(Name('flag', Load(), lineno=3157, col_offset=11), [Is()], [Name('None', Load(), lineno=3157, col_offset=19)], lineno=3157, col_offset=11), [Return(Name('filling', Load(), lineno=3158, col_offset=19), lineno=3158, col_offset=12)], [], lineno=3157, col_offset=8), Assign([Name('screen', Store(), lineno=3159, col_offset=8)], Attribute(Name('self', Load(), lineno=3159, col_offset=17), 'screen', Load(), lineno=3159, col_offset=17), lineno=3159, col_offset=8), Assign([Name('entry1', Store(), lineno=3160, col_offset=8), Name('entry2', Store(), lineno=3160, col_offset=17)], Tuple([], Load(), lineno=3160, col_offset=26), lineno=3160, col_offset=8), If(Name('filling', Load(), lineno=3161, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=3162, col_offset=15), [Attribute(Name('self', Load(), lineno=3162, col_offset=19), '_fillpath', Load(), lineno=3162, col_offset=19)], [], None, None, lineno=3162, col_offset=15), [Gt()], [Num(2, lineno=3162, col_offset=37)], lineno=3162, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3163, col_offset=16), 'screen', Load(), lineno=3163, col_offset=16), '_drawpoly', Load(), lineno=3163, col_offset=16), [Attribute(Name('self', Load(), lineno=3163, col_offset=38), '_fillitem', Load(), lineno=3163, col_offset=38), Attribute(Name('self', Load(), lineno=3163, col_offset=54), '_fillpath', Load(), lineno=3163, col_offset=54)], [keyword('fill', Attribute(Name('self', Load(), lineno=3164, col_offset=43), '_fillcolor', Load(), lineno=3164, col_offset=43))], None, None, lineno=3163, col_offset=16), lineno=3163, col_offset=16), Assign([Name('entry1', Store(), lineno=3165, col_offset=16)], Tuple([Str('dofill', lineno=3165, col_offset=26), Attribute(Name('self', Load(), lineno=3165, col_offset=36), '_fillitem', Load(), lineno=3165, col_offset=36)], Load(), lineno=3165, col_offset=26), lineno=3165, col_offset=16)], [], lineno=3162, col_offset=12)], [], lineno=3161, col_offset=8), If(Name('flag', Load(), lineno=3166, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=3167, col_offset=12), '_fillitem', Store(), lineno=3167, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3167, col_offset=29), 'screen', Load(), lineno=3167, col_offset=29), '_createpoly', Load(), lineno=3167, col_offset=29), [], [], None, None, lineno=3167, col_offset=29), lineno=3167, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3168, col_offset=12), 'items', Load(), lineno=3168, col_offset=12), 'append', Load(), lineno=3168, col_offset=12), [Attribute(Name('self', Load(), lineno=3168, col_offset=30), '_fillitem', Load(), lineno=3168, col_offset=30)], [], None, None, lineno=3168, col_offset=12), lineno=3168, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=3169, col_offset=12), '_fillpath', Store(), lineno=3169, col_offset=12)], List([Attribute(Name('self', Load(), lineno=3169, col_offset=30), '_position', Load(), lineno=3169, col_offset=30)], Load(), lineno=3169, col_offset=29), lineno=3169, col_offset=12), Assign([Name('entry2', Store(), lineno=3170, col_offset=12)], Tuple([Str('beginfill', lineno=3170, col_offset=22), Attribute(Name('self', Load(), lineno=3170, col_offset=35), '_fillitem', Load(), lineno=3170, col_offset=35)], Load(), lineno=3170, col_offset=22), lineno=3170, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3171, col_offset=12), '_newLine', Load(), lineno=3171, col_offset=12), [], [], None, None, lineno=3171, col_offset=12), lineno=3171, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=3173, col_offset=12), '_fillitem', Store(), lineno=3173, col_offset=12), Attribute(Name('self', Load(), lineno=3173, col_offset=29), '_fillpath', Store(), lineno=3173, col_offset=29)], Name('None', Load(), lineno=3173, col_offset=46), lineno=3173, col_offset=12)], lineno=3166, col_offset=8), If(Attribute(Name('self', Load(), lineno=3174, col_offset=11), 'undobuffer', Load(), lineno=3174, col_offset=11), [If(Compare(Name('entry1', Load(), lineno=3175, col_offset=15), [Eq()], [Tuple([], Load(), lineno=3175, col_offset=25)], lineno=3175, col_offset=15), [If(Compare(Name('entry2', Load(), lineno=3176, col_offset=19), [NotEq()], [Tuple([], Load(), lineno=3176, col_offset=29)], lineno=3176, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3177, col_offset=20), 'undobuffer', Load(), lineno=3177, col_offset=20), 'push', Load(), lineno=3177, col_offset=20), [Name('entry2', Load(), lineno=3177, col_offset=41)], [], None, None, lineno=3177, col_offset=20), lineno=3177, col_offset=20)], [], lineno=3176, col_offset=16)], [If(Compare(Name('entry2', Load(), lineno=3179, col_offset=19), [Eq()], [Tuple([], Load(), lineno=3179, col_offset=29)], lineno=3179, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3180, col_offset=20), 'undobuffer', Load(), lineno=3180, col_offset=20), 'push', Load(), lineno=3180, col_offset=20), [Name('entry1', Load(), lineno=3180, col_offset=41)], [], None, None, lineno=3180, col_offset=20), lineno=3180, col_offset=20)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3182, col_offset=20), 'undobuffer', Load(), lineno=3182, col_offset=20), 'push', Load(), lineno=3182, col_offset=20), [List([Str('seq', lineno=3182, col_offset=42), Name('entry1', Load(), lineno=3182, col_offset=49), Name('entry2', Load(), lineno=3182, col_offset=57)], Load(), lineno=3182, col_offset=41)], [], None, None, lineno=3182, col_offset=20), lineno=3182, col_offset=20)], lineno=3179, col_offset=16)], lineno=3175, col_offset=12)], [], lineno=3174, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3183, col_offset=8), '_update', Load(), lineno=3183, col_offset=8), [], [], None, None, lineno=3183, col_offset=8), lineno=3183, col_offset=8)], [], lineno=3134, col_offset=4), FunctionDef('begin_fill', arguments([Name('self', Param(), lineno=3185, col_offset=19)], None, None, []), [Expr(Str('Called just before drawing a shape to be filled.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.begin_fill()\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.end_fill()\n        ', lineno=3200, col_offset=-1), lineno=3200, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=3201, col_offset=8), 'fill', Load(), lineno=3201, col_offset=8), [Name('True', Load(), lineno=3201, col_offset=18)], [], None, None, lineno=3201, col_offset=8), lineno=3201, col_offset=8)], [], lineno=3185, col_offset=4), FunctionDef('end_fill', arguments([Name('self', Param(), lineno=3203, col_offset=17)], None, None, []), [Expr(Str('Fill the shape drawn after the call begin_fill().\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.begin_fill()\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.end_fill()\n        ', lineno=3218, col_offset=-1), lineno=3218, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=3219, col_offset=8), 'fill', Load(), lineno=3219, col_offset=8), [Name('False', Load(), lineno=3219, col_offset=18)], [], None, None, lineno=3219, col_offset=8), lineno=3219, col_offset=8)], [], lineno=3203, col_offset=4), FunctionDef('dot', arguments([Name('self', Param(), lineno=3221, col_offset=12), Name('size', Param(), lineno=3221, col_offset=18)], 'color', None, [Name('None', Load(), lineno=3221, col_offset=23)]), [Expr(Str('Draw a dot with diameter size, using color.\n\n        Optional argumentS:\n        size -- an integer >= 1 (if given)\n        color -- a colorstring or a numeric color tuple\n\n        Draw a circular dot with diameter size, using color.\n        If size is not given, the maximum of pensize+4 and 2*pensize is used.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.dot()\n        >>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)\n        ', lineno=3234, col_offset=-1), lineno=3234, col_offset=-1), If(UnaryOp(Not(), Name('color', Load(), lineno=3236, col_offset=15), lineno=3236, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=3237, col_offset=15), [Name('size', Load(), lineno=3237, col_offset=26), Tuple([Name('str', Load(), lineno=3237, col_offset=33), Name('tuple', Load(), lineno=3237, col_offset=38)], Load(), lineno=3237, col_offset=33)], [], None, None, lineno=3237, col_offset=15), [Assign([Name('color', Store(), lineno=3238, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=3238, col_offset=24), '_colorstr', Load(), lineno=3238, col_offset=24), [Name('size', Load(), lineno=3238, col_offset=39)], [], None, None, lineno=3238, col_offset=24), lineno=3238, col_offset=16), Assign([Name('size', Store(), lineno=3239, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=3239, col_offset=23), '_pensize', Load(), lineno=3239, col_offset=23), Add(), Call(Name('max', Load(), lineno=3239, col_offset=39), [Attribute(Name('self', Load(), lineno=3239, col_offset=43), '_pensize', Load(), lineno=3239, col_offset=43), Num(4, lineno=3239, col_offset=58)], [], None, None, lineno=3239, col_offset=39), lineno=3239, col_offset=23), lineno=3239, col_offset=16)], [Assign([Name('color', Store(), lineno=3241, col_offset=16)], Attribute(Name('self', Load(), lineno=3241, col_offset=24), '_pencolor', Load(), lineno=3241, col_offset=24), lineno=3241, col_offset=16), If(UnaryOp(Not(), Name('size', Load(), lineno=3242, col_offset=23), lineno=3242, col_offset=19), [Assign([Name('size', Store(), lineno=3243, col_offset=20)], BinOp(Attribute(Name('self', Load(), lineno=3243, col_offset=27), '_pensize', Load(), lineno=3243, col_offset=27), Add(), Call(Name('max', Load(), lineno=3243, col_offset=43), [Attribute(Name('self', Load(), lineno=3243, col_offset=47), '_pensize', Load(), lineno=3243, col_offset=47), Num(4, lineno=3243, col_offset=62)], [], None, None, lineno=3243, col_offset=43), lineno=3243, col_offset=27), lineno=3243, col_offset=20)], [], lineno=3242, col_offset=16)], lineno=3237, col_offset=12)], [If(Compare(Name('size', Load(), lineno=3245, col_offset=15), [Is()], [Name('None', Load(), lineno=3245, col_offset=23)], lineno=3245, col_offset=15), [Assign([Name('size', Store(), lineno=3246, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=3246, col_offset=23), '_pensize', Load(), lineno=3246, col_offset=23), Add(), Call(Name('max', Load(), lineno=3246, col_offset=39), [Attribute(Name('self', Load(), lineno=3246, col_offset=43), '_pensize', Load(), lineno=3246, col_offset=43), Num(4, lineno=3246, col_offset=58)], [], None, None, lineno=3246, col_offset=39), lineno=3246, col_offset=23), lineno=3246, col_offset=16)], [], lineno=3245, col_offset=12), Assign([Name('color', Store(), lineno=3247, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3247, col_offset=20), '_colorstr', Load(), lineno=3247, col_offset=20), [Name('color', Load(), lineno=3247, col_offset=35)], [], None, None, lineno=3247, col_offset=20), lineno=3247, col_offset=12)], lineno=3236, col_offset=8), If(Call(Name('hasattr', Load(), lineno=3249, col_offset=11), [Attribute(Name('self', Load(), lineno=3249, col_offset=19), 'screen', Load(), lineno=3249, col_offset=19), Str('_dot', lineno=3249, col_offset=32)], [], None, None, lineno=3249, col_offset=11), [Assign([Name('item', Store(), lineno=3250, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3250, col_offset=19), 'screen', Load(), lineno=3250, col_offset=19), '_dot', Load(), lineno=3250, col_offset=19), [Attribute(Name('self', Load(), lineno=3250, col_offset=36), '_position', Load(), lineno=3250, col_offset=36), Name('size', Load(), lineno=3250, col_offset=52), Name('color', Load(), lineno=3250, col_offset=58)], [], None, None, lineno=3250, col_offset=19), lineno=3250, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3252, col_offset=12), 'items', Load(), lineno=3252, col_offset=12), 'append', Load(), lineno=3252, col_offset=12), [Name('item', Load(), lineno=3252, col_offset=30)], [], None, None, lineno=3252, col_offset=12), lineno=3252, col_offset=12), If(Attribute(Name('self', Load(), lineno=3253, col_offset=15), 'undobuffer', Load(), lineno=3253, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3254, col_offset=16), 'undobuffer', Load(), lineno=3254, col_offset=16), 'push', Load(), lineno=3254, col_offset=16), [Tuple([Str('dot', lineno=3254, col_offset=38), Name('item', Load(), lineno=3254, col_offset=45)], Load(), lineno=3254, col_offset=38)], [], None, None, lineno=3254, col_offset=16), lineno=3254, col_offset=16)], [], lineno=3253, col_offset=12)], [Assign([Name('pen', Store(), lineno=3256, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3256, col_offset=18), 'pen', Load(), lineno=3256, col_offset=18), [], [], None, None, lineno=3256, col_offset=18), lineno=3256, col_offset=12), If(Attribute(Name('self', Load(), lineno=3257, col_offset=15), 'undobuffer', Load(), lineno=3257, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3258, col_offset=16), 'undobuffer', Load(), lineno=3258, col_offset=16), 'push', Load(), lineno=3258, col_offset=16), [List([Str('seq', lineno=3258, col_offset=38)], Load(), lineno=3258, col_offset=37)], [], None, None, lineno=3258, col_offset=16), lineno=3258, col_offset=16), Assign([Attribute(Attribute(Name('self', Load(), lineno=3259, col_offset=16), 'undobuffer', Load(), lineno=3259, col_offset=16), 'cumulate', Store(), lineno=3259, col_offset=16)], Name('True', Load(), lineno=3259, col_offset=43), lineno=3259, col_offset=16)], [], lineno=3257, col_offset=12), TryFinally([If(Compare(Call(Attribute(Name('self', Load(), lineno=3261, col_offset=19), 'resizemode', Load(), lineno=3261, col_offset=19), [], [], None, None, lineno=3261, col_offset=19), [Eq()], [Str('auto', lineno=3261, col_offset=40)], lineno=3261, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=3262, col_offset=20), 'ht', Load(), lineno=3262, col_offset=20), [], [], None, None, lineno=3262, col_offset=20), lineno=3262, col_offset=20)], [], lineno=3261, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3263, col_offset=16), 'pendown', Load(), lineno=3263, col_offset=16), [], [], None, None, lineno=3263, col_offset=16), lineno=3263, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3264, col_offset=16), 'pensize', Load(), lineno=3264, col_offset=16), [Name('size', Load(), lineno=3264, col_offset=29)], [], None, None, lineno=3264, col_offset=16), lineno=3264, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3265, col_offset=16), 'pencolor', Load(), lineno=3265, col_offset=16), [Name('color', Load(), lineno=3265, col_offset=30)], [], None, None, lineno=3265, col_offset=16), lineno=3265, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3266, col_offset=16), 'forward', Load(), lineno=3266, col_offset=16), [Num(0, lineno=3266, col_offset=29)], [], None, None, lineno=3266, col_offset=16), lineno=3266, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=3268, col_offset=16), 'pen', Load(), lineno=3268, col_offset=16), [Name('pen', Load(), lineno=3268, col_offset=25)], [], None, None, lineno=3268, col_offset=16), lineno=3268, col_offset=16)], lineno=3260, col_offset=12), If(Attribute(Name('self', Load(), lineno=3269, col_offset=15), 'undobuffer', Load(), lineno=3269, col_offset=15), [Assign([Attribute(Attribute(Name('self', Load(), lineno=3270, col_offset=16), 'undobuffer', Load(), lineno=3270, col_offset=16), 'cumulate', Store(), lineno=3270, col_offset=16)], Name('False', Load(), lineno=3270, col_offset=43), lineno=3270, col_offset=16)], [], lineno=3269, col_offset=12)], lineno=3249, col_offset=8)], [], lineno=3221, col_offset=4), FunctionDef('_write', arguments([Name('self', Param(), lineno=3272, col_offset=15), Name('txt', Param(), lineno=3272, col_offset=21), Name('align', Param(), lineno=3272, col_offset=26), Name('font', Param(), lineno=3272, col_offset=33)], None, None, []), [Expr(Str('Performs the writing for write()\n        ', lineno=3274, col_offset=-1), lineno=3274, col_offset=-1), Assign([Tuple([Name('item', Store(), lineno=3275, col_offset=8), Name('end', Store(), lineno=3275, col_offset=14)], Store(), lineno=3275, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=3275, col_offset=20), 'screen', Load(), lineno=3275, col_offset=20), '_write', Load(), lineno=3275, col_offset=20), [Attribute(Name('self', Load(), lineno=3275, col_offset=39), '_position', Load(), lineno=3275, col_offset=39), Name('txt', Load(), lineno=3275, col_offset=55), Name('align', Load(), lineno=3275, col_offset=60), Name('font', Load(), lineno=3275, col_offset=67), Attribute(Name('self', Load(), lineno=3276, col_offset=58), '_pencolor', Load(), lineno=3276, col_offset=58)], [], None, None, lineno=3275, col_offset=20), lineno=3275, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3277, col_offset=8), 'items', Load(), lineno=3277, col_offset=8), 'append', Load(), lineno=3277, col_offset=8), [Name('item', Load(), lineno=3277, col_offset=26)], [], None, None, lineno=3277, col_offset=8), lineno=3277, col_offset=8), If(Attribute(Name('self', Load(), lineno=3278, col_offset=11), 'undobuffer', Load(), lineno=3278, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3279, col_offset=12), 'undobuffer', Load(), lineno=3279, col_offset=12), 'push', Load(), lineno=3279, col_offset=12), [Tuple([Str('wri', lineno=3279, col_offset=34), Name('item', Load(), lineno=3279, col_offset=41)], Load(), lineno=3279, col_offset=34)], [], None, None, lineno=3279, col_offset=12), lineno=3279, col_offset=12)], [], lineno=3278, col_offset=8), Return(Name('end', Load(), lineno=3280, col_offset=15), lineno=3280, col_offset=8)], [], lineno=3272, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=3282, col_offset=14), Name('arg', Param(), lineno=3282, col_offset=20), Name('move', Param(), lineno=3282, col_offset=25), Name('align', Param(), lineno=3282, col_offset=37), Name('font', Param(), lineno=3282, col_offset=51)], None, None, [Name('False', Load(), lineno=3282, col_offset=30), Str('left', lineno=3282, col_offset=43), Tuple([Str('Arial', lineno=3282, col_offset=57), Num(8, lineno=3282, col_offset=66), Str('normal', lineno=3282, col_offset=69)], Load(), lineno=3282, col_offset=57)]), [Expr(Str('Write text at the current turtle position.\n\n        Arguments:\n        arg -- info, which is to be written to the TurtleScreen\n        move (optional) -- True/False\n        align (optional) -- one of the strings "left", "center" or right"\n        font (optional) -- a triple (fontname, fontsize, fonttype)\n\n        Write text - the string representation of arg - at the current\n        turtle position according to align ("left", "center" or right")\n        and with the given font.\n        If move is True, the pen is moved to the bottom-right corner\n        of the text. By default, move is False.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.write(\'Home = \', True, align="center")\n        >>> turtle.write((0,0), True)\n        ', lineno=3300, col_offset=-1), lineno=3300, col_offset=-1), If(Attribute(Name('self', Load(), lineno=3301, col_offset=11), 'undobuffer', Load(), lineno=3301, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3302, col_offset=12), 'undobuffer', Load(), lineno=3302, col_offset=12), 'push', Load(), lineno=3302, col_offset=12), [List([Str('seq', lineno=3302, col_offset=34)], Load(), lineno=3302, col_offset=33)], [], None, None, lineno=3302, col_offset=12), lineno=3302, col_offset=12), Assign([Attribute(Attribute(Name('self', Load(), lineno=3303, col_offset=12), 'undobuffer', Load(), lineno=3303, col_offset=12), 'cumulate', Store(), lineno=3303, col_offset=12)], Name('True', Load(), lineno=3303, col_offset=39), lineno=3303, col_offset=12)], [], lineno=3301, col_offset=8), Assign([Name('end', Store(), lineno=3304, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=3304, col_offset=14), '_write', Load(), lineno=3304, col_offset=14), [Call(Name('str', Load(), lineno=3304, col_offset=26), [Name('arg', Load(), lineno=3304, col_offset=30)], [], None, None, lineno=3304, col_offset=26), Call(Attribute(Name('align', Load(), lineno=3304, col_offset=36), 'lower', Load(), lineno=3304, col_offset=36), [], [], None, None, lineno=3304, col_offset=36), Name('font', Load(), lineno=3304, col_offset=51)], [], None, None, lineno=3304, col_offset=14), lineno=3304, col_offset=8), If(Name('move', Load(), lineno=3305, col_offset=11), [Assign([Tuple([Name('x', Store(), lineno=3306, col_offset=12), Name('y', Store(), lineno=3306, col_offset=15)], Store(), lineno=3306, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=3306, col_offset=19), 'pos', Load(), lineno=3306, col_offset=19), [], [], None, None, lineno=3306, col_offset=19), lineno=3306, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3307, col_offset=12), 'setpos', Load(), lineno=3307, col_offset=12), [Name('end', Load(), lineno=3307, col_offset=24), Name('y', Load(), lineno=3307, col_offset=29)], [], None, None, lineno=3307, col_offset=12), lineno=3307, col_offset=12)], [], lineno=3305, col_offset=8), If(Attribute(Name('self', Load(), lineno=3308, col_offset=11), 'undobuffer', Load(), lineno=3308, col_offset=11), [Assign([Attribute(Attribute(Name('self', Load(), lineno=3309, col_offset=12), 'undobuffer', Load(), lineno=3309, col_offset=12), 'cumulate', Store(), lineno=3309, col_offset=12)], Name('False', Load(), lineno=3309, col_offset=39), lineno=3309, col_offset=12)], [], lineno=3308, col_offset=8)], [], lineno=3282, col_offset=4), FunctionDef('begin_poly', arguments([Name('self', Param(), lineno=3311, col_offset=19)], None, None, []), [Expr(Str('Start recording the vertices of a polygon.\n\n        No argument.\n\n        Start recording the vertices of a polygon. Current turtle position\n        is first point of polygon.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.begin_poly()\n        ', lineno=3321, col_offset=-1), lineno=3321, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=3322, col_offset=8), '_poly', Store(), lineno=3322, col_offset=8)], List([Attribute(Name('self', Load(), lineno=3322, col_offset=22), '_position', Load(), lineno=3322, col_offset=22)], Load(), lineno=3322, col_offset=21), lineno=3322, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3323, col_offset=8), '_creatingPoly', Store(), lineno=3323, col_offset=8)], Name('True', Load(), lineno=3323, col_offset=29), lineno=3323, col_offset=8)], [], lineno=3311, col_offset=4), FunctionDef('end_poly', arguments([Name('self', Param(), lineno=3325, col_offset=17)], None, None, []), [Expr(Str('Stop recording the vertices of a polygon.\n\n        No argument.\n\n        Stop recording the vertices of a polygon. Current turtle position is\n        last point of polygon. This will be connected with the first point.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.end_poly()\n        ', lineno=3335, col_offset=-1), lineno=3335, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=3336, col_offset=8), '_creatingPoly', Store(), lineno=3336, col_offset=8)], Name('False', Load(), lineno=3336, col_offset=29), lineno=3336, col_offset=8)], [], lineno=3325, col_offset=4), FunctionDef('get_poly', arguments([Name('self', Param(), lineno=3338, col_offset=17)], None, None, []), [Expr(Str('Return the lastly recorded polygon.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> p = turtle.get_poly()\n        >>> turtle.register_shape("myFavouriteShape", p)\n        ', lineno=3346, col_offset=-1), lineno=3346, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=3348, col_offset=11), '_poly', Load(), lineno=3348, col_offset=11), [IsNot()], [Name('None', Load(), lineno=3348, col_offset=29)], lineno=3348, col_offset=11), [Return(Call(Name('tuple', Load(), lineno=3349, col_offset=19), [Attribute(Name('self', Load(), lineno=3349, col_offset=25), '_poly', Load(), lineno=3349, col_offset=25)], [], None, None, lineno=3349, col_offset=19), lineno=3349, col_offset=12)], [], lineno=3348, col_offset=8)], [], lineno=3338, col_offset=4), FunctionDef('getscreen', arguments([Name('self', Param(), lineno=3351, col_offset=18)], None, None, []), [Expr(Str('Return the TurtleScreen object, the turtle is drawing  on.\n\n        No argument.\n\n        Return the TurtleScreen object, the turtle is drawing  on.\n        So TurtleScreen-methods can be called for that object.\n\n        Example (for a Turtle instance named turtle):\n        >>> ts = turtle.getscreen()\n        >>> ts\n        <turtle.TurtleScreen object at 0x0106B770>\n        >>> ts.bgcolor("pink")\n        ', lineno=3364, col_offset=-1), lineno=3364, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=3365, col_offset=15), 'screen', Load(), lineno=3365, col_offset=15), lineno=3365, col_offset=8)], [], lineno=3351, col_offset=4), FunctionDef('getturtle', arguments([Name('self', Param(), lineno=3367, col_offset=18)], None, None, []), [Expr(Str("Return the Turtleobject itself.\n\n        No argument.\n\n        Only reasonable use: as a function to return the 'anonymous turtle':\n\n        Example:\n        >>> pet = getturtle()\n        >>> pet.fd(50)\n        >>> pet\n        <turtle.Turtle object at 0x0187D810>\n        >>> turtles()\n        [<turtle.Turtle object at 0x0187D810>]\n        ", lineno=3381, col_offset=-1), lineno=3381, col_offset=-1), Return(Name('self', Load(), lineno=3382, col_offset=15), lineno=3382, col_offset=8)], [], lineno=3367, col_offset=4), Assign([Name('getpen', Store(), lineno=3384, col_offset=4)], Name('getturtle', Load(), lineno=3384, col_offset=13), lineno=3384, col_offset=4), FunctionDef('window_width', arguments([Name('self', Param(), lineno=3391, col_offset=21)], None, None, []), [Expr(Str(' Returns the width of the turtle window.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_width()\n        640\n        ', lineno=3399, col_offset=-1), lineno=3399, col_offset=-1), Return(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=3400, col_offset=15), 'screen', Load(), lineno=3400, col_offset=15), '_window_size', Load(), lineno=3400, col_offset=15), [], [], None, None, lineno=3400, col_offset=15), Index(Num(0, lineno=3400, col_offset=42)), Load(), lineno=3400, col_offset=15), lineno=3400, col_offset=8)], [], lineno=3391, col_offset=4), FunctionDef('window_height', arguments([Name('self', Param(), lineno=3402, col_offset=22)], None, None, []), [Expr(Str(' Return the height of the turtle window.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_height()\n        480\n        ', lineno=3410, col_offset=-1), lineno=3410, col_offset=-1), Return(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=3411, col_offset=15), 'screen', Load(), lineno=3411, col_offset=15), '_window_size', Load(), lineno=3411, col_offset=15), [], [], None, None, lineno=3411, col_offset=15), Index(Num(1, lineno=3411, col_offset=42)), Load(), lineno=3411, col_offset=15), lineno=3411, col_offset=8)], [], lineno=3402, col_offset=4), FunctionDef('_delay', arguments([Name('self', Param(), lineno=3413, col_offset=15), Name('delay', Param(), lineno=3413, col_offset=21)], None, None, [Name('None', Load(), lineno=3413, col_offset=27)]), [Expr(Str('Set delay value which determines speed of turtle animation.\n        ', lineno=3415, col_offset=-1), lineno=3415, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3416, col_offset=15), 'screen', Load(), lineno=3416, col_offset=15), 'delay', Load(), lineno=3416, col_offset=15), [Name('delay', Load(), lineno=3416, col_offset=33)], [], None, None, lineno=3416, col_offset=15), lineno=3416, col_offset=8)], [], lineno=3413, col_offset=4), FunctionDef('onclick', arguments([Name('self', Param(), lineno=3420, col_offset=16), Name('fun', Param(), lineno=3420, col_offset=22), Name('btn', Param(), lineno=3420, col_offset=27), Name('add', Param(), lineno=3420, col_offset=34)], None, None, [Num(1, lineno=3420, col_offset=31), Name('None', Load(), lineno=3420, col_offset=38)]), [Expr(Str('Bind fun to mouse-click event on this turtle on canvas.\n\n        Arguments:\n        fun --  a function with two arguments, to which will be assigned\n                the coordinates of the clicked point on the canvas.\n        num --  number of the mouse-button defaults to 1 (left mouse button).\n        add --  True or False. If True, new binding will be added, otherwise\n                it will replace a former binding.\n\n        Example for the anonymous turtle, i. e. the procedural way:\n\n        >>> def turn(x, y):\n                left(360)\n\n        >>> onclick(turn) # Now clicking into the turtle will turn it.\n        >>> onclick(None)  # event-binding will be removed\n        ', lineno=3437, col_offset=-1), lineno=3437, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3438, col_offset=8), 'screen', Load(), lineno=3438, col_offset=8), '_onclick', Load(), lineno=3438, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=3438, col_offset=29), 'turtle', Load(), lineno=3438, col_offset=29), '_item', Load(), lineno=3438, col_offset=29), Name('fun', Load(), lineno=3438, col_offset=48), Name('btn', Load(), lineno=3438, col_offset=53), Name('add', Load(), lineno=3438, col_offset=58)], [], None, None, lineno=3438, col_offset=8), lineno=3438, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3439, col_offset=8), '_update', Load(), lineno=3439, col_offset=8), [], [], None, None, lineno=3439, col_offset=8), lineno=3439, col_offset=8)], [], lineno=3420, col_offset=4), FunctionDef('onrelease', arguments([Name('self', Param(), lineno=3441, col_offset=18), Name('fun', Param(), lineno=3441, col_offset=24), Name('btn', Param(), lineno=3441, col_offset=29), Name('add', Param(), lineno=3441, col_offset=36)], None, None, [Num(1, lineno=3441, col_offset=33), Name('None', Load(), lineno=3441, col_offset=40)]), [Expr(Str('Bind fun to mouse-button-release event on this turtle on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, to which will be assigned\n                the coordinates of the clicked point on the canvas.\n        num --  number of the mouse-button defaults to 1 (left mouse button).\n\n        Example (for a MyTurtle instance named joe):\n        >>> class MyTurtle(Turtle):\n                def glow(self,x,y):\n                        self.fillcolor("red")\n                def unglow(self,x,y):\n                        self.fillcolor("")\n\n        >>> joe = MyTurtle()\n        >>> joe.onclick(joe.glow)\n        >>> joe.onrelease(joe.unglow)\n        ### clicking on joe turns fillcolor red,\n        ### unclicking turns it to transparent.\n        ', lineno=3461, col_offset=-1), lineno=3461, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3462, col_offset=8), 'screen', Load(), lineno=3462, col_offset=8), '_onrelease', Load(), lineno=3462, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=3462, col_offset=31), 'turtle', Load(), lineno=3462, col_offset=31), '_item', Load(), lineno=3462, col_offset=31), Name('fun', Load(), lineno=3462, col_offset=50), Name('btn', Load(), lineno=3462, col_offset=55), Name('add', Load(), lineno=3462, col_offset=60)], [], None, None, lineno=3462, col_offset=8), lineno=3462, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3463, col_offset=8), '_update', Load(), lineno=3463, col_offset=8), [], [], None, None, lineno=3463, col_offset=8), lineno=3463, col_offset=8)], [], lineno=3441, col_offset=4), FunctionDef('ondrag', arguments([Name('self', Param(), lineno=3465, col_offset=15), Name('fun', Param(), lineno=3465, col_offset=21), Name('btn', Param(), lineno=3465, col_offset=26), Name('add', Param(), lineno=3465, col_offset=33)], None, None, [Num(1, lineno=3465, col_offset=30), Name('None', Load(), lineno=3465, col_offset=37)]), [Expr(Str('Bind fun to mouse-move event on this turtle on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, to which will be assigned\n               the coordinates of the clicked point on the canvas.\n        num -- number of the mouse-button defaults to 1 (left mouse button).\n\n        Every sequence of mouse-move-events on a turtle is preceded by a\n        mouse-click event on that turtle.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.ondrag(turtle.goto)\n\n        ### Subsequently clicking and dragging a Turtle will\n        ### move it across the screen thereby producing handdrawings\n        ### (if pen is down).\n        ', lineno=3482, col_offset=-1), lineno=3482, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3483, col_offset=8), 'screen', Load(), lineno=3483, col_offset=8), '_ondrag', Load(), lineno=3483, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=3483, col_offset=28), 'turtle', Load(), lineno=3483, col_offset=28), '_item', Load(), lineno=3483, col_offset=28), Name('fun', Load(), lineno=3483, col_offset=47), Name('btn', Load(), lineno=3483, col_offset=52), Name('add', Load(), lineno=3483, col_offset=57)], [], None, None, lineno=3483, col_offset=8), lineno=3483, col_offset=8)], [], lineno=3465, col_offset=4), FunctionDef('_undo', arguments([Name('self', Param(), lineno=3486, col_offset=14), Name('action', Param(), lineno=3486, col_offset=20), Name('data', Param(), lineno=3486, col_offset=28)], None, None, []), [Expr(Str('Does the main part of the work for undo()\n        ', lineno=3488, col_offset=-1), lineno=3488, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=3489, col_offset=11), 'undobuffer', Load(), lineno=3489, col_offset=11), [Is()], [Name('None', Load(), lineno=3489, col_offset=30)], lineno=3489, col_offset=11), [Return(None, lineno=3490, col_offset=12)], [], lineno=3489, col_offset=8), If(Compare(Name('action', Load(), lineno=3491, col_offset=11), [Eq()], [Str('rot', lineno=3491, col_offset=21)], lineno=3491, col_offset=11), [Assign([Tuple([Name('angle', Store(), lineno=3492, col_offset=12), Name('degPAU', Store(), lineno=3492, col_offset=19)], Store(), lineno=3492, col_offset=12)], Name('data', Load(), lineno=3492, col_offset=28), lineno=3492, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3493, col_offset=12), '_rotate', Load(), lineno=3493, col_offset=12), [BinOp(BinOp(UnaryOp(USub(), Name('angle', Load(), lineno=3493, col_offset=26), lineno=3493, col_offset=25), Mult(), Name('degPAU', Load(), lineno=3493, col_offset=32), lineno=3493, col_offset=25), Div(), Attribute(Name('self', Load(), lineno=3493, col_offset=39), '_degreesPerAU', Load(), lineno=3493, col_offset=39), lineno=3493, col_offset=38)], [], None, None, lineno=3493, col_offset=12), lineno=3493, col_offset=12), Assign([Name('dummy', Store(), lineno=3494, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3494, col_offset=20), 'undobuffer', Load(), lineno=3494, col_offset=20), 'pop', Load(), lineno=3494, col_offset=20), [], [], None, None, lineno=3494, col_offset=20), lineno=3494, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3495, col_offset=13), [Eq()], [Str('stamp', lineno=3495, col_offset=23)], lineno=3495, col_offset=13), [Assign([Name('stitem', Store(), lineno=3496, col_offset=12)], Subscript(Name('data', Load(), lineno=3496, col_offset=21), Index(Num(0, lineno=3496, col_offset=26)), Load(), lineno=3496, col_offset=21), lineno=3496, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3497, col_offset=12), 'clearstamp', Load(), lineno=3497, col_offset=12), [Name('stitem', Load(), lineno=3497, col_offset=28)], [], None, None, lineno=3497, col_offset=12), lineno=3497, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3498, col_offset=13), [Eq()], [Str('go', lineno=3498, col_offset=23)], lineno=3498, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=3499, col_offset=12), '_undogoto', Load(), lineno=3499, col_offset=12), [Name('data', Load(), lineno=3499, col_offset=27)], [], None, None, lineno=3499, col_offset=12), lineno=3499, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3500, col_offset=13), [In()], [List([Str('wri', lineno=3500, col_offset=24), Str('dot', lineno=3500, col_offset=31)], Load(), lineno=3500, col_offset=23)], lineno=3500, col_offset=13), [Assign([Name('item', Store(), lineno=3501, col_offset=12)], Subscript(Name('data', Load(), lineno=3501, col_offset=19), Index(Num(0, lineno=3501, col_offset=24)), Load(), lineno=3501, col_offset=19), lineno=3501, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3502, col_offset=12), 'screen', Load(), lineno=3502, col_offset=12), '_delete', Load(), lineno=3502, col_offset=12), [Name('item', Load(), lineno=3502, col_offset=32)], [], None, None, lineno=3502, col_offset=12), lineno=3502, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3503, col_offset=12), 'items', Load(), lineno=3503, col_offset=12), 'remove', Load(), lineno=3503, col_offset=12), [Name('item', Load(), lineno=3503, col_offset=30)], [], None, None, lineno=3503, col_offset=12), lineno=3503, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3504, col_offset=13), [Eq()], [Str('dofill', lineno=3504, col_offset=23)], lineno=3504, col_offset=13), [Assign([Name('item', Store(), lineno=3505, col_offset=12)], Subscript(Name('data', Load(), lineno=3505, col_offset=19), Index(Num(0, lineno=3505, col_offset=24)), Load(), lineno=3505, col_offset=19), lineno=3505, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3506, col_offset=12), 'screen', Load(), lineno=3506, col_offset=12), '_drawpoly', Load(), lineno=3506, col_offset=12), [Name('item', Load(), lineno=3506, col_offset=34), Tuple([Tuple([Num(0, lineno=3506, col_offset=42), Num(0, lineno=3506, col_offset=45)], Load(), lineno=3506, col_offset=42), Tuple([Num(0, lineno=3506, col_offset=49), Num(0, lineno=3506, col_offset=52)], Load(), lineno=3506, col_offset=49), Tuple([Num(0, lineno=3506, col_offset=56), Num(0, lineno=3506, col_offset=59)], Load(), lineno=3506, col_offset=56)], Load(), lineno=3506, col_offset=41)], [keyword('fill', Str('', lineno=3507, col_offset=39)), keyword('outline', Str('', lineno=3507, col_offset=51))], None, None, lineno=3506, col_offset=12), lineno=3506, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3508, col_offset=13), [Eq()], [Str('beginfill', lineno=3508, col_offset=23)], lineno=3508, col_offset=13), [Assign([Name('item', Store(), lineno=3509, col_offset=12)], Subscript(Name('data', Load(), lineno=3509, col_offset=19), Index(Num(0, lineno=3509, col_offset=24)), Load(), lineno=3509, col_offset=19), lineno=3509, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=3510, col_offset=12), '_fillitem', Store(), lineno=3510, col_offset=12), Attribute(Name('self', Load(), lineno=3510, col_offset=29), '_fillpath', Store(), lineno=3510, col_offset=29)], Name('None', Load(), lineno=3510, col_offset=46), lineno=3510, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3511, col_offset=12), 'screen', Load(), lineno=3511, col_offset=12), '_delete', Load(), lineno=3511, col_offset=12), [Name('item', Load(), lineno=3511, col_offset=32)], [], None, None, lineno=3511, col_offset=12), lineno=3511, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3512, col_offset=12), 'items', Load(), lineno=3512, col_offset=12), 'remove', Load(), lineno=3512, col_offset=12), [Name('item', Load(), lineno=3512, col_offset=30)], [], None, None, lineno=3512, col_offset=12), lineno=3512, col_offset=12)], [If(Compare(Name('action', Load(), lineno=3513, col_offset=13), [Eq()], [Str('pen', lineno=3513, col_offset=23)], lineno=3513, col_offset=13), [Expr(Call(Attribute(Name('TPen', Load(), lineno=3514, col_offset=12), 'pen', Load(), lineno=3514, col_offset=12), [Name('self', Load(), lineno=3514, col_offset=21), Subscript(Name('data', Load(), lineno=3514, col_offset=27), Index(Num(0, lineno=3514, col_offset=32)), Load(), lineno=3514, col_offset=27)], [], None, None, lineno=3514, col_offset=12), lineno=3514, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3515, col_offset=12), 'undobuffer', Load(), lineno=3515, col_offset=12), 'pop', Load(), lineno=3515, col_offset=12), [], [], None, None, lineno=3515, col_offset=12), lineno=3515, col_offset=12)], [], lineno=3513, col_offset=13)], lineno=3508, col_offset=13)], lineno=3504, col_offset=13)], lineno=3500, col_offset=13)], lineno=3498, col_offset=13)], lineno=3495, col_offset=13)], lineno=3491, col_offset=8)], [], lineno=3486, col_offset=4), FunctionDef('undo', arguments([Name('self', Param(), lineno=3517, col_offset=13)], None, None, []), [Expr(Str('undo (repeatedly) the last turtle action.\n\n        No argument.\n\n        undo (repeatedly) the last turtle action.\n        Number of available undo actions is determined by the size of\n        the undobuffer.\n\n        Example (for a Turtle instance named turtle):\n        >>> for i in range(4):\n                turtle.fd(50); turtle.lt(80)\n\n        >>> for i in range(8):\n                turtle.undo()\n        ', lineno=3532, col_offset=-1), lineno=3532, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=3533, col_offset=11), 'undobuffer', Load(), lineno=3533, col_offset=11), [Is()], [Name('None', Load(), lineno=3533, col_offset=30)], lineno=3533, col_offset=11), [Return(None, lineno=3534, col_offset=12)], [], lineno=3533, col_offset=8), Assign([Name('item', Store(), lineno=3535, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=3535, col_offset=15), 'undobuffer', Load(), lineno=3535, col_offset=15), 'pop', Load(), lineno=3535, col_offset=15), [], [], None, None, lineno=3535, col_offset=15), lineno=3535, col_offset=8), Assign([Name('action', Store(), lineno=3536, col_offset=8)], Subscript(Name('item', Load(), lineno=3536, col_offset=17), Index(Num(0, lineno=3536, col_offset=22)), Load(), lineno=3536, col_offset=17), lineno=3536, col_offset=8), Assign([Name('data', Store(), lineno=3537, col_offset=8)], Subscript(Name('item', Load(), lineno=3537, col_offset=15), Slice(Num(1, lineno=3537, col_offset=20), None, None), Load(), lineno=3537, col_offset=15), lineno=3537, col_offset=8), If(Compare(Name('action', Load(), lineno=3538, col_offset=11), [Eq()], [Str('seq', lineno=3538, col_offset=21)], lineno=3538, col_offset=11), [While(Name('data', Load(), lineno=3539, col_offset=18), [Assign([Name('item', Store(), lineno=3540, col_offset=16)], Call(Attribute(Name('data', Load(), lineno=3540, col_offset=23), 'pop', Load(), lineno=3540, col_offset=23), [], [], None, None, lineno=3540, col_offset=23), lineno=3540, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=3541, col_offset=16), '_undo', Load(), lineno=3541, col_offset=16), [Subscript(Name('item', Load(), lineno=3541, col_offset=27), Index(Num(0, lineno=3541, col_offset=32)), Load(), lineno=3541, col_offset=27), Subscript(Name('item', Load(), lineno=3541, col_offset=36), Slice(Num(1, lineno=3541, col_offset=41), None, None), Load(), lineno=3541, col_offset=36)], [], None, None, lineno=3541, col_offset=16), lineno=3541, col_offset=16)], [], lineno=3539, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=3543, col_offset=12), '_undo', Load(), lineno=3543, col_offset=12), [Name('action', Load(), lineno=3543, col_offset=23), Name('data', Load(), lineno=3543, col_offset=31)], [], None, None, lineno=3543, col_offset=12), lineno=3543, col_offset=12)], lineno=3538, col_offset=8)], [], lineno=3517, col_offset=4), Assign([Name('turtlesize', Store(), lineno=3545, col_offset=4)], Name('shapesize', Load(), lineno=3545, col_offset=17), lineno=3545, col_offset=4)], [], lineno=2421, col_offset=0), Assign([Name('RawPen', Store(), lineno=3547, col_offset=0)], Name('RawTurtle', Load(), lineno=3547, col_offset=9), lineno=3547, col_offset=0), FunctionDef('Screen', arguments([], None, None, []), [Expr(Str('Return the singleton screen object.\n    If none exists at the moment, create a new one and return it,\n    else return the existing one.', lineno=3554, col_offset=-1), lineno=3554, col_offset=-1), If(Compare(Attribute(Name('Turtle', Load(), lineno=3555, col_offset=7), '_screen', Load(), lineno=3555, col_offset=7), [Is()], [Name('None', Load(), lineno=3555, col_offset=25)], lineno=3555, col_offset=7), [Assign([Attribute(Name('Turtle', Load(), lineno=3556, col_offset=8), '_screen', Store(), lineno=3556, col_offset=8)], Call(Name('_Screen', Load(), lineno=3556, col_offset=25), [], [], None, None, lineno=3556, col_offset=25), lineno=3556, col_offset=8)], [], lineno=3555, col_offset=4), Return(Attribute(Name('Turtle', Load(), lineno=3557, col_offset=11), '_screen', Load(), lineno=3557, col_offset=11), lineno=3557, col_offset=4)], [], lineno=3551, col_offset=0), ClassDef('_Screen', [Name('TurtleScreen', Load(), lineno=3559, col_offset=14)], [Assign([Name('_root', Store(), lineno=3561, col_offset=4)], Name('None', Load(), lineno=3561, col_offset=12), lineno=3561, col_offset=4), Assign([Name('_canvas', Store(), lineno=3562, col_offset=4)], Name('None', Load(), lineno=3562, col_offset=14), lineno=3562, col_offset=4), Assign([Name('_title', Store(), lineno=3563, col_offset=4)], Subscript(Name('_CFG', Load(), lineno=3563, col_offset=13), Index(Str('title', lineno=3563, col_offset=18)), Load(), lineno=3563, col_offset=13), lineno=3563, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3565, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('_Screen', Load(), lineno=3571, col_offset=11), '_root', Load(), lineno=3571, col_offset=11), [Is()], [Name('None', Load(), lineno=3571, col_offset=28)], lineno=3571, col_offset=11), [Assign([Attribute(Name('_Screen', Load(), lineno=3572, col_offset=12), '_root', Store(), lineno=3572, col_offset=12), Attribute(Name('self', Load(), lineno=3572, col_offset=28), '_root', Store(), lineno=3572, col_offset=28)], Call(Name('_Root', Load(), lineno=3572, col_offset=41), [], [], None, None, lineno=3572, col_offset=41), lineno=3572, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3573, col_offset=12), '_root', Load(), lineno=3573, col_offset=12), 'title', Load(), lineno=3573, col_offset=12), [Attribute(Name('_Screen', Load(), lineno=3573, col_offset=29), '_title', Load(), lineno=3573, col_offset=29)], [], None, None, lineno=3573, col_offset=12), lineno=3573, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3574, col_offset=12), '_root', Load(), lineno=3574, col_offset=12), 'ondestroy', Load(), lineno=3574, col_offset=12), [Attribute(Name('self', Load(), lineno=3574, col_offset=33), '_destroy', Load(), lineno=3574, col_offset=33)], [], None, None, lineno=3574, col_offset=12), lineno=3574, col_offset=12)], [], lineno=3571, col_offset=8), If(Compare(Attribute(Name('_Screen', Load(), lineno=3575, col_offset=11), '_canvas', Load(), lineno=3575, col_offset=11), [Is()], [Name('None', Load(), lineno=3575, col_offset=30)], lineno=3575, col_offset=11), [Assign([Name('width', Store(), lineno=3576, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3576, col_offset=20), Index(Str('width', lineno=3576, col_offset=25)), Load(), lineno=3576, col_offset=20), lineno=3576, col_offset=12), Assign([Name('height', Store(), lineno=3577, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3577, col_offset=21), Index(Str('height', lineno=3577, col_offset=26)), Load(), lineno=3577, col_offset=21), lineno=3577, col_offset=12), Assign([Name('canvwidth', Store(), lineno=3578, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3578, col_offset=24), Index(Str('canvwidth', lineno=3578, col_offset=29)), Load(), lineno=3578, col_offset=24), lineno=3578, col_offset=12), Assign([Name('canvheight', Store(), lineno=3579, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3579, col_offset=25), Index(Str('canvheight', lineno=3579, col_offset=30)), Load(), lineno=3579, col_offset=25), lineno=3579, col_offset=12), Assign([Name('leftright', Store(), lineno=3580, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3580, col_offset=24), Index(Str('leftright', lineno=3580, col_offset=29)), Load(), lineno=3580, col_offset=24), lineno=3580, col_offset=12), Assign([Name('topbottom', Store(), lineno=3581, col_offset=12)], Subscript(Name('_CFG', Load(), lineno=3581, col_offset=24), Index(Str('topbottom', lineno=3581, col_offset=29)), Load(), lineno=3581, col_offset=24), lineno=3581, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3582, col_offset=12), '_root', Load(), lineno=3582, col_offset=12), 'setupcanvas', Load(), lineno=3582, col_offset=12), [Name('width', Load(), lineno=3582, col_offset=35), Name('height', Load(), lineno=3582, col_offset=42), Name('canvwidth', Load(), lineno=3582, col_offset=50), Name('canvheight', Load(), lineno=3582, col_offset=61)], [], None, None, lineno=3582, col_offset=12), lineno=3582, col_offset=12), Assign([Attribute(Name('_Screen', Load(), lineno=3583, col_offset=12), '_canvas', Store(), lineno=3583, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3583, col_offset=30), '_root', Load(), lineno=3583, col_offset=30), '_getcanvas', Load(), lineno=3583, col_offset=30), [], [], None, None, lineno=3583, col_offset=30), lineno=3583, col_offset=12), Expr(Call(Attribute(Name('TurtleScreen', Load(), lineno=3584, col_offset=12), '__init__', Load(), lineno=3584, col_offset=12), [Name('self', Load(), lineno=3584, col_offset=34), Attribute(Name('_Screen', Load(), lineno=3584, col_offset=40), '_canvas', Load(), lineno=3584, col_offset=40)], [], None, None, lineno=3584, col_offset=12), lineno=3584, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3585, col_offset=12), 'setup', Load(), lineno=3585, col_offset=12), [Name('width', Load(), lineno=3585, col_offset=23), Name('height', Load(), lineno=3585, col_offset=30), Name('leftright', Load(), lineno=3585, col_offset=38), Name('topbottom', Load(), lineno=3585, col_offset=49)], [], None, None, lineno=3585, col_offset=12), lineno=3585, col_offset=12)], [], lineno=3575, col_offset=8)], [], lineno=3565, col_offset=4), FunctionDef('setup', arguments([Name('self', Param(), lineno=3587, col_offset=14), Name('width', Param(), lineno=3587, col_offset=20), Name('height', Param(), lineno=3587, col_offset=41), Name('startx', Param(), lineno=3588, col_offset=14), Name('starty', Param(), lineno=3588, col_offset=40)], None, None, [Subscript(Name('_CFG', Load(), lineno=3587, col_offset=26), Index(Str('width', lineno=3587, col_offset=31)), Load(), lineno=3587, col_offset=26), Subscript(Name('_CFG', Load(), lineno=3587, col_offset=48), Index(Str('height', lineno=3587, col_offset=53)), Load(), lineno=3587, col_offset=48), Subscript(Name('_CFG', Load(), lineno=3588, col_offset=21), Index(Str('leftright', lineno=3588, col_offset=26)), Load(), lineno=3588, col_offset=21), Subscript(Name('_CFG', Load(), lineno=3588, col_offset=47), Index(Str('topbottom', lineno=3588, col_offset=52)), Load(), lineno=3588, col_offset=47)]), [Expr(Str(' Set the size and position of the main window.\n\n        Arguments:\n        width: as integer a size in pixels, as float a fraction of the screen.\n          Default is 50% of screen.\n        height: as integer the height in pixels, as float a fraction of the\n          screen. Default is 75% of screen.\n        startx: if positive, starting position in pixels from the left\n          edge of the screen, if negative from the right edge\n          Default, startx=None is to center window horizontally.\n        starty: if positive, starting position in pixels from the top\n          edge of the screen, if negative from the bottom edge\n          Default, starty=None is to center window vertically.\n\n        Examples (for a Screen instance named screen):\n        >>> screen.setup (width=200, height=200, startx=0, starty=0)\n\n        sets window to 200x200 pixels, in upper left of screen\n\n        >>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n\n        sets window to 75% of screen by 50% of screen and centers\n        ', lineno=3611, col_offset=-1), lineno=3611, col_offset=-1), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=3612, col_offset=15), [Attribute(Name('self', Load(), lineno=3612, col_offset=23), '_root', Load(), lineno=3612, col_offset=23), Str('set_geometry', lineno=3612, col_offset=35)], [], None, None, lineno=3612, col_offset=15), lineno=3612, col_offset=11), [Return(None, lineno=3613, col_offset=12)], [], lineno=3612, col_offset=8), Assign([Name('sw', Store(), lineno=3614, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=3614, col_offset=13), '_root', Load(), lineno=3614, col_offset=13), 'win_width', Load(), lineno=3614, col_offset=13), [], [], None, None, lineno=3614, col_offset=13), lineno=3614, col_offset=8), Assign([Name('sh', Store(), lineno=3615, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=3615, col_offset=13), '_root', Load(), lineno=3615, col_offset=13), 'win_height', Load(), lineno=3615, col_offset=13), [], [], None, None, lineno=3615, col_offset=13), lineno=3615, col_offset=8), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=3616, col_offset=11), [Name('width', Load(), lineno=3616, col_offset=22), Name('float', Load(), lineno=3616, col_offset=29)], [], None, None, lineno=3616, col_offset=11), Compare(Num(0, lineno=3616, col_offset=40), [LtE(), LtE()], [Name('width', Load(), lineno=3616, col_offset=45), Num(1, lineno=3616, col_offset=54)], lineno=3616, col_offset=40)], lineno=3616, col_offset=11), [Assign([Name('width', Store(), lineno=3617, col_offset=12)], BinOp(Name('sw', Load(), lineno=3617, col_offset=20), Mult(), Name('width', Load(), lineno=3617, col_offset=23), lineno=3617, col_offset=20), lineno=3617, col_offset=12)], [], lineno=3616, col_offset=8), If(Compare(Name('startx', Load(), lineno=3618, col_offset=11), [Is()], [Name('None', Load(), lineno=3618, col_offset=21)], lineno=3618, col_offset=11), [Assign([Name('startx', Store(), lineno=3619, col_offset=12)], BinOp(BinOp(Name('sw', Load(), lineno=3619, col_offset=22), Sub(), Name('width', Load(), lineno=3619, col_offset=27), lineno=3619, col_offset=22), Div(), Num(2, lineno=3619, col_offset=36), lineno=3619, col_offset=21), lineno=3619, col_offset=12)], [], lineno=3618, col_offset=8), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=3620, col_offset=11), [Name('height', Load(), lineno=3620, col_offset=22), Name('float', Load(), lineno=3620, col_offset=30)], [], None, None, lineno=3620, col_offset=11), Compare(Num(0, lineno=3620, col_offset=41), [LtE(), LtE()], [Name('height', Load(), lineno=3620, col_offset=46), Num(1, lineno=3620, col_offset=56)], lineno=3620, col_offset=41)], lineno=3620, col_offset=11), [Assign([Name('height', Store(), lineno=3621, col_offset=12)], BinOp(Name('sh', Load(), lineno=3621, col_offset=21), Mult(), Name('height', Load(), lineno=3621, col_offset=24), lineno=3621, col_offset=21), lineno=3621, col_offset=12)], [], lineno=3620, col_offset=8), If(Compare(Name('starty', Load(), lineno=3622, col_offset=11), [Is()], [Name('None', Load(), lineno=3622, col_offset=21)], lineno=3622, col_offset=11), [Assign([Name('starty', Store(), lineno=3623, col_offset=12)], BinOp(BinOp(Name('sh', Load(), lineno=3623, col_offset=22), Sub(), Name('height', Load(), lineno=3623, col_offset=27), lineno=3623, col_offset=22), Div(), Num(2, lineno=3623, col_offset=37), lineno=3623, col_offset=21), lineno=3623, col_offset=12)], [], lineno=3622, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3624, col_offset=8), '_root', Load(), lineno=3624, col_offset=8), 'set_geometry', Load(), lineno=3624, col_offset=8), [Name('width', Load(), lineno=3624, col_offset=32), Name('height', Load(), lineno=3624, col_offset=39), Name('startx', Load(), lineno=3624, col_offset=47), Name('starty', Load(), lineno=3624, col_offset=55)], [], None, None, lineno=3624, col_offset=8), lineno=3624, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3625, col_offset=8), 'update', Load(), lineno=3625, col_offset=8), [], [], None, None, lineno=3625, col_offset=8), lineno=3625, col_offset=8)], [], lineno=3587, col_offset=4), FunctionDef('title', arguments([Name('self', Param(), lineno=3627, col_offset=14), Name('titlestring', Param(), lineno=3627, col_offset=20)], None, None, []), [Expr(Str('Set title of turtle-window\n\n        Argument:\n        titlestring -- a string, to appear in the titlebar of the\n                       turtle graphics window.\n\n        This is a method of Screen-class. Not available for TurtleScreen-\n        objects.\n\n        Example (for a Screen instance named screen):\n        >>> screen.title("Welcome to the turtle-zoo!")\n        ', lineno=3639, col_offset=-1), lineno=3639, col_offset=-1), If(Compare(Attribute(Name('_Screen', Load(), lineno=3640, col_offset=11), '_root', Load(), lineno=3640, col_offset=11), [IsNot()], [Name('None', Load(), lineno=3640, col_offset=32)], lineno=3640, col_offset=11), [Expr(Call(Attribute(Attribute(Name('_Screen', Load(), lineno=3641, col_offset=12), '_root', Load(), lineno=3641, col_offset=12), 'title', Load(), lineno=3641, col_offset=12), [Name('titlestring', Load(), lineno=3641, col_offset=32)], [], None, None, lineno=3641, col_offset=12), lineno=3641, col_offset=12)], [], lineno=3640, col_offset=8), Assign([Attribute(Name('_Screen', Load(), lineno=3642, col_offset=8), '_title', Store(), lineno=3642, col_offset=8)], Name('titlestring', Load(), lineno=3642, col_offset=25), lineno=3642, col_offset=8)], [], lineno=3627, col_offset=4), FunctionDef('_destroy', arguments([Name('self', Param(), lineno=3644, col_offset=17)], None, None, []), [Assign([Name('root', Store(), lineno=3645, col_offset=8)], Attribute(Name('self', Load(), lineno=3645, col_offset=15), '_root', Load(), lineno=3645, col_offset=15), lineno=3645, col_offset=8), If(Compare(Name('root', Load(), lineno=3646, col_offset=11), [Is()], [Attribute(Name('_Screen', Load(), lineno=3646, col_offset=19), '_root', Load(), lineno=3646, col_offset=19)], lineno=3646, col_offset=11), [Assign([Attribute(Name('Turtle', Load(), lineno=3647, col_offset=12), '_pen', Store(), lineno=3647, col_offset=12)], Name('None', Load(), lineno=3647, col_offset=26), lineno=3647, col_offset=12), Assign([Attribute(Name('Turtle', Load(), lineno=3648, col_offset=12), '_screen', Store(), lineno=3648, col_offset=12)], Name('None', Load(), lineno=3648, col_offset=29), lineno=3648, col_offset=12), Assign([Attribute(Name('_Screen', Load(), lineno=3649, col_offset=12), '_root', Store(), lineno=3649, col_offset=12)], Name('None', Load(), lineno=3649, col_offset=28), lineno=3649, col_offset=12), Assign([Attribute(Name('_Screen', Load(), lineno=3650, col_offset=12), '_canvas', Store(), lineno=3650, col_offset=12)], Name('None', Load(), lineno=3650, col_offset=30), lineno=3650, col_offset=12)], [], lineno=3646, col_offset=8), Assign([Attribute(Name('TurtleScreen', Load(), lineno=3651, col_offset=8), '_RUNNING', Store(), lineno=3651, col_offset=8)], Name('True', Load(), lineno=3651, col_offset=32), lineno=3651, col_offset=8), Expr(Call(Attribute(Name('root', Load(), lineno=3652, col_offset=8), 'destroy', Load(), lineno=3652, col_offset=8), [], [], None, None, lineno=3652, col_offset=8), lineno=3652, col_offset=8)], [], lineno=3644, col_offset=4), FunctionDef('bye', arguments([Name('self', Param(), lineno=3654, col_offset=12)], None, None, []), [Expr(Str('Shut the turtlegraphics window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bye()\n        ', lineno=3659, col_offset=-1), lineno=3659, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=3660, col_offset=8), '_destroy', Load(), lineno=3660, col_offset=8), [], [], None, None, lineno=3660, col_offset=8), lineno=3660, col_offset=8)], [], lineno=3654, col_offset=4), FunctionDef('exitonclick', arguments([Name('self', Param(), lineno=3662, col_offset=20)], None, None, []), [Expr(Str('Go into mainloop until the mouse is clicked.\n\n        No arguments.\n\n        Bind bye() method to mouseclick on TurtleScreen.\n        If "using_IDLE" - value in configuration dictionary is False\n        (default value), enter mainloop.\n        If IDLE with -n switch (no subprocess) is used, this value should be\n        set to True in turtle.cfg. In this case IDLE\'s mainloop\n        is active also for the client script.\n\n        This is a method of the Screen-class and not available for\n        TurtleScreen instances.\n\n        Example (for a Screen instance named screen):\n        >>> screen.exitonclick()\n\n        ', lineno=3680, col_offset=-1), lineno=3680, col_offset=-1), FunctionDef('exitGracefully', arguments([Name('x', Param(), lineno=3681, col_offset=27), Name('y', Param(), lineno=3681, col_offset=30)], None, None, []), [Expr(Str('Screen.bye() with two dummy-parameters', lineno=3682, col_offset=12), lineno=3682, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=3683, col_offset=12), 'bye', Load(), lineno=3683, col_offset=12), [], [], None, None, lineno=3683, col_offset=12), lineno=3683, col_offset=12)], [], lineno=3681, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3684, col_offset=8), 'onclick', Load(), lineno=3684, col_offset=8), [Name('exitGracefully', Load(), lineno=3684, col_offset=21)], [], None, None, lineno=3684, col_offset=8), lineno=3684, col_offset=8), If(Subscript(Name('_CFG', Load(), lineno=3685, col_offset=11), Index(Str('using_IDLE', lineno=3685, col_offset=16)), Load(), lineno=3685, col_offset=11), [Return(None, lineno=3686, col_offset=12)], [], lineno=3685, col_offset=8), TryExcept([Expr(Call(Name('mainloop', Load(), lineno=3688, col_offset=12), [], [], None, None, lineno=3688, col_offset=12), lineno=3688, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=3689, col_offset=15), None, [Expr(Call(Name('exit', Load(), lineno=3690, col_offset=12), [Num(0, lineno=3690, col_offset=17)], [], None, None, lineno=3690, col_offset=12), lineno=3690, col_offset=12)], lineno=3689, col_offset=8)], [], lineno=3687, col_offset=8)], [], lineno=3662, col_offset=4)], [], lineno=3559, col_offset=0), ClassDef('Turtle', [Name('RawTurtle', Load(), lineno=3693, col_offset=13)], [Expr(Str('RawTurtle auto-crating (scrolled) canvas.\n\n    When a Turtle object is created or a function derived from some\n    Turtle method is called a TurtleScreen object is automatically created.\n    ', lineno=3698, col_offset=-1), lineno=3698, col_offset=-1), Assign([Name('_pen', Store(), lineno=3699, col_offset=4)], Name('None', Load(), lineno=3699, col_offset=11), lineno=3699, col_offset=4), Assign([Name('_screen', Store(), lineno=3700, col_offset=4)], Name('None', Load(), lineno=3700, col_offset=14), lineno=3700, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3702, col_offset=17), Name('shape', Param(), lineno=3703, col_offset=17), Name('undobuffersize', Param(), lineno=3704, col_offset=17), Name('visible', Param(), lineno=3705, col_offset=17)], None, None, [Subscript(Name('_CFG', Load(), lineno=3703, col_offset=23), Index(Str('shape', lineno=3703, col_offset=28)), Load(), lineno=3703, col_offset=23), Subscript(Name('_CFG', Load(), lineno=3704, col_offset=32), Index(Str('undobuffersize', lineno=3704, col_offset=37)), Load(), lineno=3704, col_offset=32), Subscript(Name('_CFG', Load(), lineno=3705, col_offset=25), Index(Str('visible', lineno=3705, col_offset=30)), Load(), lineno=3705, col_offset=25)]), [If(Compare(Attribute(Name('Turtle', Load(), lineno=3706, col_offset=11), '_screen', Load(), lineno=3706, col_offset=11), [Is()], [Name('None', Load(), lineno=3706, col_offset=29)], lineno=3706, col_offset=11), [Assign([Attribute(Name('Turtle', Load(), lineno=3707, col_offset=12), '_screen', Store(), lineno=3707, col_offset=12)], Call(Name('Screen', Load(), lineno=3707, col_offset=29), [], [], None, None, lineno=3707, col_offset=29), lineno=3707, col_offset=12)], [], lineno=3706, col_offset=8), Expr(Call(Attribute(Name('RawTurtle', Load(), lineno=3708, col_offset=8), '__init__', Load(), lineno=3708, col_offset=8), [Name('self', Load(), lineno=3708, col_offset=27), Attribute(Name('Turtle', Load(), lineno=3708, col_offset=33), '_screen', Load(), lineno=3708, col_offset=33)], [keyword('shape', Name('shape', Load(), lineno=3709, col_offset=33)), keyword('undobuffersize', Name('undobuffersize', Load(), lineno=3710, col_offset=42)), keyword('visible', Name('visible', Load(), lineno=3711, col_offset=35))], None, None, lineno=3708, col_offset=8), lineno=3708, col_offset=8)], [], lineno=3702, col_offset=4)], [], lineno=3693, col_offset=0), Assign([Name('Pen', Store(), lineno=3713, col_offset=0)], Name('Turtle', Load(), lineno=3713, col_offset=6), lineno=3713, col_offset=0), FunctionDef('_getpen', arguments([], None, None, []), [Expr(Str("Create the 'anonymous' turtle if not already present.", lineno=3716, col_offset=4), lineno=3716, col_offset=4), If(Compare(Attribute(Name('Turtle', Load(), lineno=3717, col_offset=7), '_pen', Load(), lineno=3717, col_offset=7), [Is()], [Name('None', Load(), lineno=3717, col_offset=22)], lineno=3717, col_offset=7), [Assign([Attribute(Name('Turtle', Load(), lineno=3718, col_offset=8), '_pen', Store(), lineno=3718, col_offset=8)], Call(Name('Turtle', Load(), lineno=3718, col_offset=22), [], [], None, None, lineno=3718, col_offset=22), lineno=3718, col_offset=8)], [], lineno=3717, col_offset=4), Return(Attribute(Name('Turtle', Load(), lineno=3719, col_offset=11), '_pen', Load(), lineno=3719, col_offset=11), lineno=3719, col_offset=4)], [], lineno=3715, col_offset=0), FunctionDef('_getscreen', arguments([], None, None, []), [Expr(Str('Create a TurtleScreen if not already present.', lineno=3722, col_offset=4), lineno=3722, col_offset=4), If(Compare(Attribute(Name('Turtle', Load(), lineno=3723, col_offset=7), '_screen', Load(), lineno=3723, col_offset=7), [Is()], [Name('None', Load(), lineno=3723, col_offset=25)], lineno=3723, col_offset=7), [Assign([Attribute(Name('Turtle', Load(), lineno=3724, col_offset=8), '_screen', Store(), lineno=3724, col_offset=8)], Call(Name('Screen', Load(), lineno=3724, col_offset=25), [], [], None, None, lineno=3724, col_offset=25), lineno=3724, col_offset=8)], [], lineno=3723, col_offset=4), Return(Attribute(Name('Turtle', Load(), lineno=3725, col_offset=11), '_screen', Load(), lineno=3725, col_offset=11), lineno=3725, col_offset=4)], [], lineno=3721, col_offset=0), FunctionDef('write_docstringdict', arguments([Name('filename', Param(), lineno=3727, col_offset=24)], None, None, [Str('turtle_docstringdict', lineno=3727, col_offset=33)]), [Expr(Str('Create and write docstring-dictionary to file.\n\n    Optional argument:\n    filename -- a string, used as filename\n                default value is turtle_docstringdict\n\n    Has to be called explicitely, (not used by the turtle-graphics classes)\n    The docstring dictionary will be written to the Python script <filname>.py\n    It is intended to serve as a template for translation of the docstrings\n    into different languages.\n    ', lineno=3738, col_offset=-1), lineno=3738, col_offset=-1), Assign([Name('docsdict', Store(), lineno=3739, col_offset=4)], Dict([], [], lineno=3739, col_offset=15), lineno=3739, col_offset=4), For(Name('methodname', Store(), lineno=3741, col_offset=8), Name('_tg_screen_functions', Load(), lineno=3741, col_offset=22), [Assign([Name('key', Store(), lineno=3742, col_offset=8)], BinOp(Str('_Screen.', lineno=3742, col_offset=14), Add(), Name('methodname', Load(), lineno=3742, col_offset=25), lineno=3742, col_offset=14), lineno=3742, col_offset=8), Assign([Subscript(Name('docsdict', Load(), lineno=3743, col_offset=8), Index(Name('key', Load(), lineno=3743, col_offset=17)), Store(), lineno=3743, col_offset=8)], Attribute(Call(Name('eval', Load(), lineno=3743, col_offset=24), [Name('key', Load(), lineno=3743, col_offset=29)], [], None, None, lineno=3743, col_offset=24), '__doc__', Load(), lineno=3743, col_offset=24), lineno=3743, col_offset=8)], [], lineno=3741, col_offset=4), For(Name('methodname', Store(), lineno=3744, col_offset=8), Name('_tg_turtle_functions', Load(), lineno=3744, col_offset=22), [Assign([Name('key', Store(), lineno=3745, col_offset=8)], BinOp(Str('Turtle.', lineno=3745, col_offset=14), Add(), Name('methodname', Load(), lineno=3745, col_offset=24), lineno=3745, col_offset=14), lineno=3745, col_offset=8), Assign([Subscript(Name('docsdict', Load(), lineno=3746, col_offset=8), Index(Name('key', Load(), lineno=3746, col_offset=17)), Store(), lineno=3746, col_offset=8)], Attribute(Call(Name('eval', Load(), lineno=3746, col_offset=24), [Name('key', Load(), lineno=3746, col_offset=29)], [], None, None, lineno=3746, col_offset=24), '__doc__', Load(), lineno=3746, col_offset=24), lineno=3746, col_offset=8)], [], lineno=3744, col_offset=4), Assign([Name('f', Store(), lineno=3748, col_offset=4)], Call(Name('open', Load(), lineno=3748, col_offset=8), [BinOp(Str('%s.py', lineno=3748, col_offset=13), Mod(), Name('filename', Load(), lineno=3748, col_offset=23), lineno=3748, col_offset=13), Str('w', lineno=3748, col_offset=32)], [], None, None, lineno=3748, col_offset=8), lineno=3748, col_offset=4), Assign([Name('keys', Store(), lineno=3749, col_offset=4)], Call(Name('sorted', Load(), lineno=3749, col_offset=11), [ListComp(Name('x', Load(), lineno=3749, col_offset=19), [comprehension(Name('x', Store(), lineno=3749, col_offset=25), Call(Attribute(Name('docsdict', Load(), lineno=3749, col_offset=30), 'keys', Load(), lineno=3749, col_offset=30), [], [], None, None, lineno=3749, col_offset=30), [Compare(Subscript(Call(Attribute(Name('x', Load(), lineno=3750, col_offset=27), 'split', Load(), lineno=3750, col_offset=27), [Str('.', lineno=3750, col_offset=35)], [], None, None, lineno=3750, col_offset=27), Index(Num(1, lineno=3750, col_offset=40)), Load(), lineno=3750, col_offset=27), [NotIn()], [Name('_alias_list', Load(), lineno=3750, col_offset=50)], lineno=3750, col_offset=27)])], lineno=3749, col_offset=19)], [], None, None, lineno=3749, col_offset=11), lineno=3749, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=3751, col_offset=4), 'write', Load(), lineno=3751, col_offset=4), [Str('docsdict = {\n\n', lineno=3751, col_offset=12)], [], None, None, lineno=3751, col_offset=4), lineno=3751, col_offset=4), For(Name('key', Store(), lineno=3752, col_offset=8), Subscript(Name('keys', Load(), lineno=3752, col_offset=15), Slice(None, Num(-1, lineno=3752, col_offset=22), None), Load(), lineno=3752, col_offset=15), [Expr(Call(Attribute(Name('f', Load(), lineno=3753, col_offset=8), 'write', Load(), lineno=3753, col_offset=8), [BinOp(Str('%s :\n', lineno=3753, col_offset=16), Mod(), Call(Name('repr', Load(), lineno=3753, col_offset=27), [Name('key', Load(), lineno=3753, col_offset=32)], [], None, None, lineno=3753, col_offset=27), lineno=3753, col_offset=16)], [], None, None, lineno=3753, col_offset=8), lineno=3753, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=3754, col_offset=8), 'write', Load(), lineno=3754, col_offset=8), [BinOp(Str('        """%s\n""",\n\n', lineno=3754, col_offset=16), Mod(), Subscript(Name('docsdict', Load(), lineno=3754, col_offset=44), Index(Name('key', Load(), lineno=3754, col_offset=53)), Load(), lineno=3754, col_offset=44), lineno=3754, col_offset=16)], [], None, None, lineno=3754, col_offset=8), lineno=3754, col_offset=8)], [], lineno=3752, col_offset=4), Assign([Name('key', Store(), lineno=3755, col_offset=4)], Subscript(Name('keys', Load(), lineno=3755, col_offset=10), Index(Num(-1, lineno=3755, col_offset=16)), Load(), lineno=3755, col_offset=10), lineno=3755, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=3756, col_offset=4), 'write', Load(), lineno=3756, col_offset=4), [BinOp(Str('%s :\n', lineno=3756, col_offset=12), Mod(), Call(Name('repr', Load(), lineno=3756, col_offset=23), [Name('key', Load(), lineno=3756, col_offset=28)], [], None, None, lineno=3756, col_offset=23), lineno=3756, col_offset=12)], [], None, None, lineno=3756, col_offset=4), lineno=3756, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=3757, col_offset=4), 'write', Load(), lineno=3757, col_offset=4), [BinOp(Str('        """%s\n"""\n\n', lineno=3757, col_offset=12), Mod(), Subscript(Name('docsdict', Load(), lineno=3757, col_offset=39), Index(Name('key', Load(), lineno=3757, col_offset=48)), Load(), lineno=3757, col_offset=39), lineno=3757, col_offset=12)], [], None, None, lineno=3757, col_offset=4), lineno=3757, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=3758, col_offset=4), 'write', Load(), lineno=3758, col_offset=4), [Str('}\n', lineno=3758, col_offset=12)], [], None, None, lineno=3758, col_offset=4), lineno=3758, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=3759, col_offset=4), 'close', Load(), lineno=3759, col_offset=4), [], [], None, None, lineno=3759, col_offset=4), lineno=3759, col_offset=4)], [], lineno=3727, col_offset=0), FunctionDef('read_docstrings', arguments([Name('lang', Param(), lineno=3761, col_offset=20)], None, None, []), [Expr(Str('Read in docstrings from lang-specific docstring dictionary.\n\n    Transfer docstrings, translated to lang, from a dictionary-file\n    to the methods of classes Screen and Turtle and - in revised form -\n    to the corresponding functions.\n    ', lineno=3767, col_offset=-1), lineno=3767, col_offset=-1), Assign([Name('modname', Store(), lineno=3768, col_offset=4)], BinOp(Str('turtle_docstringdict_%(language)s', lineno=3768, col_offset=14), Mod(), Dict([Str('language', lineno=3768, col_offset=53)], [Call(Attribute(Name('lang', Load(), lineno=3768, col_offset=64), 'lower', Load(), lineno=3768, col_offset=64), [], [], None, None, lineno=3768, col_offset=64)], lineno=3768, col_offset=52), lineno=3768, col_offset=14), lineno=3768, col_offset=4), Assign([Name('module', Store(), lineno=3769, col_offset=4)], Call(Name('__import__', Load(), lineno=3769, col_offset=13), [Name('modname', Load(), lineno=3769, col_offset=24)], [], None, None, lineno=3769, col_offset=13), lineno=3769, col_offset=4), Assign([Name('docsdict', Store(), lineno=3770, col_offset=4)], Attribute(Name('module', Load(), lineno=3770, col_offset=15), 'docsdict', Load(), lineno=3770, col_offset=15), lineno=3770, col_offset=4), For(Name('key', Store(), lineno=3771, col_offset=8), Name('docsdict', Load(), lineno=3771, col_offset=15), [TryExcept([Assign([Attribute(Attribute(Call(Name('eval', Load(), lineno=3774, col_offset=12), [Name('key', Load(), lineno=3774, col_offset=17)], [], None, None, lineno=3774, col_offset=12), 'im_func', Load(), lineno=3774, col_offset=12), '__doc__', Store(), lineno=3774, col_offset=12)], Subscript(Name('docsdict', Load(), lineno=3774, col_offset=40), Index(Name('key', Load(), lineno=3774, col_offset=49)), Load(), lineno=3774, col_offset=40), lineno=3774, col_offset=12)], [ExceptHandler(None, None, [Print(None, [BinOp(Str('Bad docstring-entry: %s', lineno=3776, col_offset=18), Mod(), Name('key', Load(), lineno=3776, col_offset=46), lineno=3776, col_offset=18)], True, lineno=3776, col_offset=12)], lineno=3775, col_offset=8)], [], lineno=3773, col_offset=8)], [], lineno=3771, col_offset=4)], [], lineno=3761, col_offset=0), Assign([Name('_LANGUAGE', Store(), lineno=3778, col_offset=0)], Subscript(Name('_CFG', Load(), lineno=3778, col_offset=12), Index(Str('language', lineno=3778, col_offset=17)), Load(), lineno=3778, col_offset=12), lineno=3778, col_offset=0), TryExcept([If(Compare(Name('_LANGUAGE', Load(), lineno=3781, col_offset=7), [NotEq()], [Str('english', lineno=3781, col_offset=20)], lineno=3781, col_offset=7), [Expr(Call(Name('read_docstrings', Load(), lineno=3782, col_offset=8), [Name('_LANGUAGE', Load(), lineno=3782, col_offset=24)], [], None, None, lineno=3782, col_offset=8), lineno=3782, col_offset=8)], [], lineno=3781, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=3783, col_offset=7), None, [Print(None, [Str('Cannot find docsdict for', lineno=3784, col_offset=10), Name('_LANGUAGE', Load(), lineno=3784, col_offset=38)], True, lineno=3784, col_offset=4)], lineno=3783, col_offset=0), ExceptHandler(None, None, [Print(None, [BinOp(Str('Unknown Error when trying to import %s-docstring-dictionary', lineno=3786, col_offset=11), Mod(), Name('_LANGUAGE', Load(), lineno=3787, col_offset=66), lineno=3786, col_offset=11)], True, lineno=3786, col_offset=4)], lineno=3785, col_offset=0)], [], lineno=3780, col_offset=0), FunctionDef('getmethparlist', arguments([Name('ob', Param(), lineno=3790, col_offset=19)], None, None, []), [Expr(Str('Get strings describing the arguments for the given object', lineno=3791, col_offset=4), lineno=3791, col_offset=4), Assign([Name('argText1', Store(), lineno=3792, col_offset=4), Name('argText2', Store(), lineno=3792, col_offset=15)], Str('', lineno=3792, col_offset=26), lineno=3792, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=3795, col_offset=7), [Name('ob', Load(), lineno=3795, col_offset=12)], [], None, None, lineno=3795, col_offset=7), [Eq()], [Attribute(Name('types', Load(), lineno=3795, col_offset=17), 'MethodType', Load(), lineno=3795, col_offset=17)], lineno=3795, col_offset=7), [Assign([Name('fob', Store(), lineno=3796, col_offset=8)], Attribute(Name('ob', Load(), lineno=3796, col_offset=14), 'im_func', Load(), lineno=3796, col_offset=14), lineno=3796, col_offset=8), Assign([Name('argOffset', Store(), lineno=3797, col_offset=8)], Num(1, lineno=3797, col_offset=20), lineno=3797, col_offset=8)], [Assign([Name('fob', Store(), lineno=3799, col_offset=8)], Name('ob', Load(), lineno=3799, col_offset=14), lineno=3799, col_offset=8), Assign([Name('argOffset', Store(), lineno=3800, col_offset=8)], Num(0, lineno=3800, col_offset=20), lineno=3800, col_offset=8)], lineno=3795, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=3802, col_offset=7), [Name('fob', Load(), lineno=3802, col_offset=12)], [], None, None, lineno=3802, col_offset=7), [In()], [List([Attribute(Name('types', Load(), lineno=3802, col_offset=21), 'FunctionType', Load(), lineno=3802, col_offset=21), Attribute(Name('types', Load(), lineno=3802, col_offset=41), 'LambdaType', Load(), lineno=3802, col_offset=41)], Load(), lineno=3802, col_offset=20)], lineno=3802, col_offset=7), [TryExcept([Assign([Name('counter', Store(), lineno=3804, col_offset=12)], Attribute(Attribute(Name('fob', Load(), lineno=3804, col_offset=22), 'func_code', Load(), lineno=3804, col_offset=22), 'co_argcount', Load(), lineno=3804, col_offset=22), lineno=3804, col_offset=12), Assign([Name('items2', Store(), lineno=3805, col_offset=12)], Call(Name('list', Load(), lineno=3805, col_offset=21), [Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3805, col_offset=26), 'func_code', Load(), lineno=3805, col_offset=26), 'co_varnames', Load(), lineno=3805, col_offset=26), Slice(Name('argOffset', Load(), lineno=3805, col_offset=52), Name('counter', Load(), lineno=3805, col_offset=62), None), Load(), lineno=3805, col_offset=26)], [], None, None, lineno=3805, col_offset=21), lineno=3805, col_offset=12), Assign([Name('realArgs', Store(), lineno=3806, col_offset=12)], Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3806, col_offset=23), 'func_code', Load(), lineno=3806, col_offset=23), 'co_varnames', Load(), lineno=3806, col_offset=23), Slice(Name('argOffset', Load(), lineno=3806, col_offset=49), Name('counter', Load(), lineno=3806, col_offset=59), None), Load(), lineno=3806, col_offset=23), lineno=3806, col_offset=12), Assign([Name('defaults', Store(), lineno=3807, col_offset=12)], BoolOp(Or(), [Attribute(Name('fob', Load(), lineno=3807, col_offset=23), 'func_defaults', Load(), lineno=3807, col_offset=23), List([], Load(), lineno=3807, col_offset=44)], lineno=3807, col_offset=23), lineno=3807, col_offset=12), Assign([Name('defaults', Store(), lineno=3808, col_offset=12)], Call(Name('list', Load(), lineno=3808, col_offset=23), [Call(Name('map', Load(), lineno=3808, col_offset=28), [Lambda(arguments([Name('name', Param(), lineno=3808, col_offset=39)], None, None, []), BinOp(Str('=%s', lineno=3808, col_offset=45), Mod(), Call(Name('repr', Load(), lineno=3808, col_offset=53), [Name('name', Load(), lineno=3808, col_offset=58)], [], None, None, lineno=3808, col_offset=53), lineno=3808, col_offset=45), lineno=3808, col_offset=32), Name('defaults', Load(), lineno=3808, col_offset=65)], [], None, None, lineno=3808, col_offset=28)], [], None, None, lineno=3808, col_offset=23), lineno=3808, col_offset=12), Assign([Name('defaults', Store(), lineno=3809, col_offset=12)], BinOp(BinOp(List([Str('', lineno=3809, col_offset=24)], Load(), lineno=3809, col_offset=23), Mult(), BinOp(Call(Name('len', Load(), lineno=3809, col_offset=31), [Name('realArgs', Load(), lineno=3809, col_offset=35)], [], None, None, lineno=3809, col_offset=31), Sub(), Call(Name('len', Load(), lineno=3809, col_offset=45), [Name('defaults', Load(), lineno=3809, col_offset=49)], [], None, None, lineno=3809, col_offset=45), lineno=3809, col_offset=31), lineno=3809, col_offset=23), Add(), Name('defaults', Load(), lineno=3809, col_offset=62), lineno=3809, col_offset=23), lineno=3809, col_offset=12), Assign([Name('items1', Store(), lineno=3810, col_offset=12)], Call(Name('map', Load(), lineno=3810, col_offset=21), [Lambda(arguments([Name('arg', Param(), lineno=3810, col_offset=32), Name('dflt', Param(), lineno=3810, col_offset=37)], None, None, []), BinOp(Name('arg', Load(), lineno=3810, col_offset=43), Add(), Name('dflt', Load(), lineno=3810, col_offset=47), lineno=3810, col_offset=43), lineno=3810, col_offset=25), Name('realArgs', Load(), lineno=3810, col_offset=53), Name('defaults', Load(), lineno=3810, col_offset=63)], [], None, None, lineno=3810, col_offset=21), lineno=3810, col_offset=12), If(BinOp(Attribute(Attribute(Name('fob', Load(), lineno=3811, col_offset=15), 'func_code', Load(), lineno=3811, col_offset=15), 'co_flags', Load(), lineno=3811, col_offset=15), BitAnd(), Num(4, lineno=3811, col_offset=40), lineno=3811, col_offset=15), [Expr(Call(Attribute(Name('items1', Load(), lineno=3812, col_offset=16), 'append', Load(), lineno=3812, col_offset=16), [BinOp(Str('*', lineno=3812, col_offset=30), Add(), Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3812, col_offset=34), 'func_code', Load(), lineno=3812, col_offset=34), 'co_varnames', Load(), lineno=3812, col_offset=34), Index(Name('counter', Load(), lineno=3812, col_offset=60)), Load(), lineno=3812, col_offset=34), lineno=3812, col_offset=30)], [], None, None, lineno=3812, col_offset=16), lineno=3812, col_offset=16), Expr(Call(Attribute(Name('items2', Load(), lineno=3813, col_offset=16), 'append', Load(), lineno=3813, col_offset=16), [BinOp(Str('*', lineno=3813, col_offset=30), Add(), Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3813, col_offset=34), 'func_code', Load(), lineno=3813, col_offset=34), 'co_varnames', Load(), lineno=3813, col_offset=34), Index(Name('counter', Load(), lineno=3813, col_offset=60)), Load(), lineno=3813, col_offset=34), lineno=3813, col_offset=30)], [], None, None, lineno=3813, col_offset=16), lineno=3813, col_offset=16), AugAssign(Name('counter', Store(), lineno=3814, col_offset=16), Add(), Num(1, lineno=3814, col_offset=27), lineno=3814, col_offset=16)], [], lineno=3811, col_offset=12), If(BinOp(Attribute(Attribute(Name('fob', Load(), lineno=3815, col_offset=15), 'func_code', Load(), lineno=3815, col_offset=15), 'co_flags', Load(), lineno=3815, col_offset=15), BitAnd(), Num(8, lineno=3815, col_offset=40), lineno=3815, col_offset=15), [Expr(Call(Attribute(Name('items1', Load(), lineno=3816, col_offset=16), 'append', Load(), lineno=3816, col_offset=16), [BinOp(Str('**', lineno=3816, col_offset=30), Add(), Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3816, col_offset=35), 'func_code', Load(), lineno=3816, col_offset=35), 'co_varnames', Load(), lineno=3816, col_offset=35), Index(Name('counter', Load(), lineno=3816, col_offset=61)), Load(), lineno=3816, col_offset=35), lineno=3816, col_offset=30)], [], None, None, lineno=3816, col_offset=16), lineno=3816, col_offset=16), Expr(Call(Attribute(Name('items2', Load(), lineno=3817, col_offset=16), 'append', Load(), lineno=3817, col_offset=16), [BinOp(Str('**', lineno=3817, col_offset=30), Add(), Subscript(Attribute(Attribute(Name('fob', Load(), lineno=3817, col_offset=35), 'func_code', Load(), lineno=3817, col_offset=35), 'co_varnames', Load(), lineno=3817, col_offset=35), Index(Name('counter', Load(), lineno=3817, col_offset=61)), Load(), lineno=3817, col_offset=35), lineno=3817, col_offset=30)], [], None, None, lineno=3817, col_offset=16), lineno=3817, col_offset=16)], [], lineno=3815, col_offset=12), Assign([Name('argText1', Store(), lineno=3818, col_offset=12)], Call(Attribute(Str(', ', lineno=3818, col_offset=23), 'join', Load(), lineno=3818, col_offset=23), [Name('items1', Load(), lineno=3818, col_offset=33)], [], None, None, lineno=3818, col_offset=23), lineno=3818, col_offset=12), Assign([Name('argText1', Store(), lineno=3819, col_offset=12)], BinOp(Str('(%s)', lineno=3819, col_offset=23), Mod(), Name('argText1', Load(), lineno=3819, col_offset=32), lineno=3819, col_offset=23), lineno=3819, col_offset=12), Assign([Name('argText2', Store(), lineno=3820, col_offset=12)], Call(Attribute(Str(', ', lineno=3820, col_offset=23), 'join', Load(), lineno=3820, col_offset=23), [Name('items2', Load(), lineno=3820, col_offset=33)], [], None, None, lineno=3820, col_offset=23), lineno=3820, col_offset=12), Assign([Name('argText2', Store(), lineno=3821, col_offset=12)], BinOp(Str('(%s)', lineno=3821, col_offset=23), Mod(), Name('argText2', Load(), lineno=3821, col_offset=32), lineno=3821, col_offset=23), lineno=3821, col_offset=12)], [ExceptHandler(None, None, [Pass( lineno=3823, col_offset=12)], lineno=3822, col_offset=8)], [], lineno=3803, col_offset=8)], [], lineno=3802, col_offset=4), Return(Tuple([Name('argText1', Load(), lineno=3824, col_offset=11), Name('argText2', Load(), lineno=3824, col_offset=21)], Load(), lineno=3824, col_offset=11), lineno=3824, col_offset=4)], [], lineno=3790, col_offset=0), FunctionDef('_turtle_docrevise', arguments([Name('docstr', Param(), lineno=3826, col_offset=22)], None, None, []), [Expr(Str('To reduce docstrings from RawTurtle class for functions\n    ', lineno=3828, col_offset=-1), lineno=3828, col_offset=-1), Import([alias('re', None)], lineno=3829, col_offset=4), If(Compare(Name('docstr', Load(), lineno=3830, col_offset=7), [Is()], [Name('None', Load(), lineno=3830, col_offset=17)], lineno=3830, col_offset=7), [Return(Name('None', Load(), lineno=3831, col_offset=15), lineno=3831, col_offset=8)], [], lineno=3830, col_offset=4), Assign([Name('turtlename', Store(), lineno=3832, col_offset=4)], Subscript(Name('_CFG', Load(), lineno=3832, col_offset=17), Index(Str('exampleturtle', lineno=3832, col_offset=22)), Load(), lineno=3832, col_offset=17), lineno=3832, col_offset=4), Assign([Name('newdocstr', Store(), lineno=3833, col_offset=4)], Call(Attribute(Name('docstr', Load(), lineno=3833, col_offset=16), 'replace', Load(), lineno=3833, col_offset=16), [BinOp(Str('%s.', lineno=3833, col_offset=31), Mod(), Name('turtlename', Load(), lineno=3833, col_offset=39), lineno=3833, col_offset=31), Str('', lineno=3833, col_offset=50)], [], None, None, lineno=3833, col_offset=16), lineno=3833, col_offset=4), Assign([Name('parexp', Store(), lineno=3834, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=3834, col_offset=13), 'compile', Load(), lineno=3834, col_offset=13), [BinOp(Str(' \\(.+ %s\\):', lineno=3834, col_offset=24), Mod(), Name('turtlename', Load(), lineno=3834, col_offset=41), lineno=3834, col_offset=24)], [], None, None, lineno=3834, col_offset=13), lineno=3834, col_offset=4), Assign([Name('newdocstr', Store(), lineno=3835, col_offset=4)], Call(Attribute(Name('parexp', Load(), lineno=3835, col_offset=16), 'sub', Load(), lineno=3835, col_offset=16), [Str(':', lineno=3835, col_offset=27), Name('newdocstr', Load(), lineno=3835, col_offset=32)], [], None, None, lineno=3835, col_offset=16), lineno=3835, col_offset=4), Return(Name('newdocstr', Load(), lineno=3836, col_offset=11), lineno=3836, col_offset=4)], [], lineno=3826, col_offset=0), FunctionDef('_screen_docrevise', arguments([Name('docstr', Param(), lineno=3838, col_offset=22)], None, None, []), [Expr(Str('To reduce docstrings from TurtleScreen class for functions\n    ', lineno=3840, col_offset=-1), lineno=3840, col_offset=-1), Import([alias('re', None)], lineno=3841, col_offset=4), If(Compare(Name('docstr', Load(), lineno=3842, col_offset=7), [Is()], [Name('None', Load(), lineno=3842, col_offset=17)], lineno=3842, col_offset=7), [Return(Name('None', Load(), lineno=3843, col_offset=15), lineno=3843, col_offset=8)], [], lineno=3842, col_offset=4), Assign([Name('screenname', Store(), lineno=3844, col_offset=4)], Subscript(Name('_CFG', Load(), lineno=3844, col_offset=17), Index(Str('examplescreen', lineno=3844, col_offset=22)), Load(), lineno=3844, col_offset=17), lineno=3844, col_offset=4), Assign([Name('newdocstr', Store(), lineno=3845, col_offset=4)], Call(Attribute(Name('docstr', Load(), lineno=3845, col_offset=16), 'replace', Load(), lineno=3845, col_offset=16), [BinOp(Str('%s.', lineno=3845, col_offset=31), Mod(), Name('screenname', Load(), lineno=3845, col_offset=39), lineno=3845, col_offset=31), Str('', lineno=3845, col_offset=50)], [], None, None, lineno=3845, col_offset=16), lineno=3845, col_offset=4), Assign([Name('parexp', Store(), lineno=3846, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=3846, col_offset=13), 'compile', Load(), lineno=3846, col_offset=13), [BinOp(Str(' \\(.+ %s\\):', lineno=3846, col_offset=24), Mod(), Name('screenname', Load(), lineno=3846, col_offset=41), lineno=3846, col_offset=24)], [], None, None, lineno=3846, col_offset=13), lineno=3846, col_offset=4), Assign([Name('newdocstr', Store(), lineno=3847, col_offset=4)], Call(Attribute(Name('parexp', Load(), lineno=3847, col_offset=16), 'sub', Load(), lineno=3847, col_offset=16), [Str(':', lineno=3847, col_offset=27), Name('newdocstr', Load(), lineno=3847, col_offset=32)], [], None, None, lineno=3847, col_offset=16), lineno=3847, col_offset=4), Return(Name('newdocstr', Load(), lineno=3848, col_offset=11), lineno=3848, col_offset=4)], [], lineno=3838, col_offset=0), For(Name('methodname', Store(), lineno=3855, col_offset=4), Name('_tg_screen_functions', Load(), lineno=3855, col_offset=18), [Assign([Tuple([Name('pl1', Store(), lineno=3856, col_offset=4), Name('pl2', Store(), lineno=3856, col_offset=9)], Store(), lineno=3856, col_offset=4)], Call(Name('getmethparlist', Load(), lineno=3856, col_offset=15), [Call(Name('eval', Load(), lineno=3856, col_offset=30), [BinOp(Str('_Screen.', lineno=3856, col_offset=35), Add(), Name('methodname', Load(), lineno=3856, col_offset=48), lineno=3856, col_offset=35)], [], None, None, lineno=3856, col_offset=30)], [], None, None, lineno=3856, col_offset=15), lineno=3856, col_offset=4), If(Compare(Name('pl1', Load(), lineno=3857, col_offset=7), [Eq()], [Str('', lineno=3857, col_offset=14)], lineno=3857, col_offset=7), [Print(None, [Str('>>>>>>', lineno=3858, col_offset=14), Name('pl1', Load(), lineno=3858, col_offset=24), Name('pl2', Load(), lineno=3858, col_offset=29)], True, lineno=3858, col_offset=8), Continue( lineno=3859, col_offset=8)], [], lineno=3857, col_offset=4), Assign([Name('defstr', Store(), lineno=3860, col_offset=4)], BinOp(Str('def %(key)s%(pl1)s: return _getscreen().%(key)s%(pl2)s', lineno=3860, col_offset=14), Mod(), Dict([Str('key', lineno=3861, col_offset=36), Str('pl1', lineno=3861, col_offset=54), Str('pl2', lineno=3861, col_offset=65)], [Name('methodname', Load(), lineno=3861, col_offset=42), Name('pl1', Load(), lineno=3861, col_offset=60), Name('pl2', Load(), lineno=3861, col_offset=71)], lineno=3861, col_offset=35), lineno=3860, col_offset=14), lineno=3860, col_offset=4), Exec(Name('defstr', Load(), lineno=3862, col_offset=9), None, None, lineno=3862, col_offset=4), Assign([Attribute(Call(Name('eval', Load(), lineno=3863, col_offset=4), [Name('methodname', Load(), lineno=3863, col_offset=9)], [], None, None, lineno=3863, col_offset=4), '__doc__', Store(), lineno=3863, col_offset=4)], Call(Name('_screen_docrevise', Load(), lineno=3863, col_offset=31), [Attribute(Call(Name('eval', Load(), lineno=3863, col_offset=49), [BinOp(Str('_Screen.', lineno=3863, col_offset=54), Add(), Name('methodname', Load(), lineno=3863, col_offset=65), lineno=3863, col_offset=54)], [], None, None, lineno=3863, col_offset=49), '__doc__', Load(), lineno=3863, col_offset=49)], [], None, None, lineno=3863, col_offset=31), lineno=3863, col_offset=4)], [], lineno=3855, col_offset=0), For(Name('methodname', Store(), lineno=3865, col_offset=4), Name('_tg_turtle_functions', Load(), lineno=3865, col_offset=18), [Assign([Tuple([Name('pl1', Store(), lineno=3866, col_offset=4), Name('pl2', Store(), lineno=3866, col_offset=9)], Store(), lineno=3866, col_offset=4)], Call(Name('getmethparlist', Load(), lineno=3866, col_offset=15), [Call(Name('eval', Load(), lineno=3866, col_offset=30), [BinOp(Str('Turtle.', lineno=3866, col_offset=35), Add(), Name('methodname', Load(), lineno=3866, col_offset=47), lineno=3866, col_offset=35)], [], None, None, lineno=3866, col_offset=30)], [], None, None, lineno=3866, col_offset=15), lineno=3866, col_offset=4), If(Compare(Name('pl1', Load(), lineno=3867, col_offset=7), [Eq()], [Str('', lineno=3867, col_offset=14)], lineno=3867, col_offset=7), [Print(None, [Str('>>>>>>', lineno=3868, col_offset=14), Name('pl1', Load(), lineno=3868, col_offset=24), Name('pl2', Load(), lineno=3868, col_offset=29)], True, lineno=3868, col_offset=8), Continue( lineno=3869, col_offset=8)], [], lineno=3867, col_offset=4), Assign([Name('defstr', Store(), lineno=3870, col_offset=4)], BinOp(Str('def %(key)s%(pl1)s: return _getpen().%(key)s%(pl2)s', lineno=3870, col_offset=14), Mod(), Dict([Str('key', lineno=3871, col_offset=36), Str('pl1', lineno=3871, col_offset=54), Str('pl2', lineno=3871, col_offset=65)], [Name('methodname', Load(), lineno=3871, col_offset=42), Name('pl1', Load(), lineno=3871, col_offset=60), Name('pl2', Load(), lineno=3871, col_offset=71)], lineno=3871, col_offset=35), lineno=3870, col_offset=14), lineno=3870, col_offset=4), Exec(Name('defstr', Load(), lineno=3872, col_offset=9), None, None, lineno=3872, col_offset=4), Assign([Attribute(Call(Name('eval', Load(), lineno=3873, col_offset=4), [Name('methodname', Load(), lineno=3873, col_offset=9)], [], None, None, lineno=3873, col_offset=4), '__doc__', Store(), lineno=3873, col_offset=4)], Call(Name('_turtle_docrevise', Load(), lineno=3873, col_offset=31), [Attribute(Call(Name('eval', Load(), lineno=3873, col_offset=49), [BinOp(Str('Turtle.', lineno=3873, col_offset=54), Add(), Name('methodname', Load(), lineno=3873, col_offset=64), lineno=3873, col_offset=54)], [], None, None, lineno=3873, col_offset=49), '__doc__', Load(), lineno=3873, col_offset=49)], [], None, None, lineno=3873, col_offset=31), lineno=3873, col_offset=4)], [], lineno=3865, col_offset=0), Assign([Name('done', Store(), lineno=3876, col_offset=0), Name('mainloop', Store(), lineno=3876, col_offset=7)], Attribute(Name('TK', Load(), lineno=3876, col_offset=18), 'mainloop', Load(), lineno=3876, col_offset=18), lineno=3876, col_offset=0), Delete([Name('pl1', Del(), lineno=3877, col_offset=4), Name('pl2', Del(), lineno=3877, col_offset=9), Name('defstr', Del(), lineno=3877, col_offset=14)], lineno=3877, col_offset=0), If(Compare(Name('__name__', Load(), lineno=3879, col_offset=3), [Eq()], [Str('__main__', lineno=3879, col_offset=15)], lineno=3879, col_offset=3), [FunctionDef('switchpen', arguments([], None, None, []), [If(Call(Name('isdown', Load(), lineno=3881, col_offset=11), [], [], None, None, lineno=3881, col_offset=11), [Expr(Call(Name('pu', Load(), lineno=3882, col_offset=12), [], [], None, None, lineno=3882, col_offset=12), lineno=3882, col_offset=12)], [Expr(Call(Name('pd', Load(), lineno=3884, col_offset=12), [], [], None, None, lineno=3884, col_offset=12), lineno=3884, col_offset=12)], lineno=3881, col_offset=8)], [], lineno=3880, col_offset=4), FunctionDef('demo1', arguments([], None, None, []), [Expr(Str('Demo of old turtle.py - module', lineno=3887, col_offset=8), lineno=3887, col_offset=8), Expr(Call(Name('reset', Load(), lineno=3888, col_offset=8), [], [], None, None, lineno=3888, col_offset=8), lineno=3888, col_offset=8), Expr(Call(Name('tracer', Load(), lineno=3889, col_offset=8), [Name('True', Load(), lineno=3889, col_offset=15)], [], None, None, lineno=3889, col_offset=8), lineno=3889, col_offset=8), Expr(Call(Name('up', Load(), lineno=3890, col_offset=8), [], [], None, None, lineno=3890, col_offset=8), lineno=3890, col_offset=8), Expr(Call(Name('backward', Load(), lineno=3891, col_offset=8), [Num(100, lineno=3891, col_offset=17)], [], None, None, lineno=3891, col_offset=8), lineno=3891, col_offset=8), Expr(Call(Name('down', Load(), lineno=3892, col_offset=8), [], [], None, None, lineno=3892, col_offset=8), lineno=3892, col_offset=8), Expr(Call(Name('width', Load(), lineno=3894, col_offset=8), [Num(3, lineno=3894, col_offset=14)], [], None, None, lineno=3894, col_offset=8), lineno=3894, col_offset=8), For(Name('i', Store(), lineno=3895, col_offset=12), Call(Name('range', Load(), lineno=3895, col_offset=17), [Num(3, lineno=3895, col_offset=23)], [], None, None, lineno=3895, col_offset=17), [If(Compare(Name('i', Load(), lineno=3896, col_offset=15), [Eq()], [Num(2, lineno=3896, col_offset=20)], lineno=3896, col_offset=15), [Expr(Call(Name('fill', Load(), lineno=3897, col_offset=16), [Num(1, lineno=3897, col_offset=21)], [], None, None, lineno=3897, col_offset=16), lineno=3897, col_offset=16)], [], lineno=3896, col_offset=12), For(Name('_', Store(), lineno=3898, col_offset=16), Call(Name('range', Load(), lineno=3898, col_offset=21), [Num(4, lineno=3898, col_offset=27)], [], None, None, lineno=3898, col_offset=21), [Expr(Call(Name('forward', Load(), lineno=3899, col_offset=16), [Num(20, lineno=3899, col_offset=24)], [], None, None, lineno=3899, col_offset=16), lineno=3899, col_offset=16), Expr(Call(Name('left', Load(), lineno=3900, col_offset=16), [Num(90, lineno=3900, col_offset=21)], [], None, None, lineno=3900, col_offset=16), lineno=3900, col_offset=16)], [], lineno=3898, col_offset=12), If(Compare(Name('i', Load(), lineno=3901, col_offset=15), [Eq()], [Num(2, lineno=3901, col_offset=20)], lineno=3901, col_offset=15), [Expr(Call(Name('color', Load(), lineno=3902, col_offset=16), [Str('maroon', lineno=3902, col_offset=22)], [], None, None, lineno=3902, col_offset=16), lineno=3902, col_offset=16), Expr(Call(Name('fill', Load(), lineno=3903, col_offset=16), [Num(0, lineno=3903, col_offset=21)], [], None, None, lineno=3903, col_offset=16), lineno=3903, col_offset=16)], [], lineno=3901, col_offset=12), Expr(Call(Name('up', Load(), lineno=3904, col_offset=12), [], [], None, None, lineno=3904, col_offset=12), lineno=3904, col_offset=12), Expr(Call(Name('forward', Load(), lineno=3905, col_offset=12), [Num(30, lineno=3905, col_offset=20)], [], None, None, lineno=3905, col_offset=12), lineno=3905, col_offset=12), Expr(Call(Name('down', Load(), lineno=3906, col_offset=12), [], [], None, None, lineno=3906, col_offset=12), lineno=3906, col_offset=12)], [], lineno=3895, col_offset=8), Expr(Call(Name('width', Load(), lineno=3907, col_offset=8), [Num(1, lineno=3907, col_offset=14)], [], None, None, lineno=3907, col_offset=8), lineno=3907, col_offset=8), Expr(Call(Name('color', Load(), lineno=3908, col_offset=8), [Str('black', lineno=3908, col_offset=14)], [], None, None, lineno=3908, col_offset=8), lineno=3908, col_offset=8), Expr(Call(Name('tracer', Load(), lineno=3910, col_offset=8), [Name('False', Load(), lineno=3910, col_offset=15)], [], None, None, lineno=3910, col_offset=8), lineno=3910, col_offset=8), Expr(Call(Name('up', Load(), lineno=3911, col_offset=8), [], [], None, None, lineno=3911, col_offset=8), lineno=3911, col_offset=8), Expr(Call(Name('right', Load(), lineno=3912, col_offset=8), [Num(90, lineno=3912, col_offset=14)], [], None, None, lineno=3912, col_offset=8), lineno=3912, col_offset=8), Expr(Call(Name('forward', Load(), lineno=3913, col_offset=8), [Num(100, lineno=3913, col_offset=16)], [], None, None, lineno=3913, col_offset=8), lineno=3913, col_offset=8), Expr(Call(Name('right', Load(), lineno=3914, col_offset=8), [Num(90, lineno=3914, col_offset=14)], [], None, None, lineno=3914, col_offset=8), lineno=3914, col_offset=8), Expr(Call(Name('forward', Load(), lineno=3915, col_offset=8), [Num(100, lineno=3915, col_offset=16)], [], None, None, lineno=3915, col_offset=8), lineno=3915, col_offset=8), Expr(Call(Name('right', Load(), lineno=3916, col_offset=8), [Num(180, lineno=3916, col_offset=14)], [], None, None, lineno=3916, col_offset=8), lineno=3916, col_offset=8), Expr(Call(Name('down', Load(), lineno=3917, col_offset=8), [], [], None, None, lineno=3917, col_offset=8), lineno=3917, col_offset=8), Expr(Call(Name('write', Load(), lineno=3919, col_offset=8), [Str('startstart', lineno=3919, col_offset=14), Num(1, lineno=3919, col_offset=28)], [], None, None, lineno=3919, col_offset=8), lineno=3919, col_offset=8), Expr(Call(Name('write', Load(), lineno=3920, col_offset=8), [Str('start', lineno=3920, col_offset=14), Num(1, lineno=3920, col_offset=23)], [], None, None, lineno=3920, col_offset=8), lineno=3920, col_offset=8), Expr(Call(Name('color', Load(), lineno=3921, col_offset=8), [Str('red', lineno=3921, col_offset=14)], [], None, None, lineno=3921, col_offset=8), lineno=3921, col_offset=8), For(Name('i', Store(), lineno=3923, col_offset=12), Call(Name('range', Load(), lineno=3923, col_offset=17), [Num(5, lineno=3923, col_offset=23)], [], None, None, lineno=3923, col_offset=17), [Expr(Call(Name('forward', Load(), lineno=3924, col_offset=12), [Num(20, lineno=3924, col_offset=20)], [], None, None, lineno=3924, col_offset=12), lineno=3924, col_offset=12), Expr(Call(Name('left', Load(), lineno=3925, col_offset=12), [Num(90, lineno=3925, col_offset=17)], [], None, None, lineno=3925, col_offset=12), lineno=3925, col_offset=12), Expr(Call(Name('forward', Load(), lineno=3926, col_offset=12), [Num(20, lineno=3926, col_offset=20)], [], None, None, lineno=3926, col_offset=12), lineno=3926, col_offset=12), Expr(Call(Name('right', Load(), lineno=3927, col_offset=12), [Num(90, lineno=3927, col_offset=18)], [], None, None, lineno=3927, col_offset=12), lineno=3927, col_offset=12)], [], lineno=3923, col_offset=8), Expr(Call(Name('tracer', Load(), lineno=3929, col_offset=8), [Name('True', Load(), lineno=3929, col_offset=15)], [], None, None, lineno=3929, col_offset=8), lineno=3929, col_offset=8), Expr(Call(Name('fill', Load(), lineno=3930, col_offset=8), [Num(1, lineno=3930, col_offset=13)], [], None, None, lineno=3930, col_offset=8), lineno=3930, col_offset=8), For(Name('i', Store(), lineno=3931, col_offset=12), Call(Name('range', Load(), lineno=3931, col_offset=17), [Num(5, lineno=3931, col_offset=23)], [], None, None, lineno=3931, col_offset=17), [Expr(Call(Name('forward', Load(), lineno=3932, col_offset=12), [Num(20, lineno=3932, col_offset=20)], [], None, None, lineno=3932, col_offset=12), lineno=3932, col_offset=12), Expr(Call(Name('left', Load(), lineno=3933, col_offset=12), [Num(90, lineno=3933, col_offset=17)], [], None, None, lineno=3933, col_offset=12), lineno=3933, col_offset=12), Expr(Call(Name('forward', Load(), lineno=3934, col_offset=12), [Num(20, lineno=3934, col_offset=20)], [], None, None, lineno=3934, col_offset=12), lineno=3934, col_offset=12), Expr(Call(Name('right', Load(), lineno=3935, col_offset=12), [Num(90, lineno=3935, col_offset=18)], [], None, None, lineno=3935, col_offset=12), lineno=3935, col_offset=12)], [], lineno=3931, col_offset=8), Expr(Call(Name('fill', Load(), lineno=3936, col_offset=8), [Num(0, lineno=3936, col_offset=13)], [], None, None, lineno=3936, col_offset=8), lineno=3936, col_offset=8)], [], lineno=3886, col_offset=4), FunctionDef('demo2', arguments([], None, None, []), [Expr(Str('Demo of some new features.', lineno=3940, col_offset=8), lineno=3940, col_offset=8), Expr(Call(Name('speed', Load(), lineno=3941, col_offset=8), [Num(1, lineno=3941, col_offset=14)], [], None, None, lineno=3941, col_offset=8), lineno=3941, col_offset=8), Expr(Call(Name('st', Load(), lineno=3942, col_offset=8), [], [], None, None, lineno=3942, col_offset=8), lineno=3942, col_offset=8), Expr(Call(Name('pensize', Load(), lineno=3943, col_offset=8), [Num(3, lineno=3943, col_offset=16)], [], None, None, lineno=3943, col_offset=8), lineno=3943, col_offset=8), Expr(Call(Name('setheading', Load(), lineno=3944, col_offset=8), [Call(Name('towards', Load(), lineno=3944, col_offset=19), [Num(0, lineno=3944, col_offset=27), Num(0, lineno=3944, col_offset=30)], [], None, None, lineno=3944, col_offset=19)], [], None, None, lineno=3944, col_offset=8), lineno=3944, col_offset=8), Assign([Name('radius', Store(), lineno=3945, col_offset=8)], BinOp(Call(Name('distance', Load(), lineno=3945, col_offset=17), [Num(0, lineno=3945, col_offset=26), Num(0, lineno=3945, col_offset=29)], [], None, None, lineno=3945, col_offset=17), Div(), Num(2.0, lineno=3945, col_offset=32), lineno=3945, col_offset=17), lineno=3945, col_offset=8), Expr(Call(Name('rt', Load(), lineno=3946, col_offset=8), [Num(90, lineno=3946, col_offset=11)], [], None, None, lineno=3946, col_offset=8), lineno=3946, col_offset=8), For(Name('_', Store(), lineno=3947, col_offset=12), Call(Name('range', Load(), lineno=3947, col_offset=17), [Num(18, lineno=3947, col_offset=23)], [], None, None, lineno=3947, col_offset=17), [Expr(Call(Name('switchpen', Load(), lineno=3948, col_offset=12), [], [], None, None, lineno=3948, col_offset=12), lineno=3948, col_offset=12), Expr(Call(Name('circle', Load(), lineno=3949, col_offset=12), [Name('radius', Load(), lineno=3949, col_offset=19), Num(10, lineno=3949, col_offset=27)], [], None, None, lineno=3949, col_offset=12), lineno=3949, col_offset=12)], [], lineno=3947, col_offset=8), Expr(Call(Name('write', Load(), lineno=3950, col_offset=8), [Str('wait a moment...', lineno=3950, col_offset=14)], [], None, None, lineno=3950, col_offset=8), lineno=3950, col_offset=8), While(Call(Name('undobufferentries', Load(), lineno=3951, col_offset=14), [], [], None, None, lineno=3951, col_offset=14), [Expr(Call(Name('undo', Load(), lineno=3952, col_offset=12), [], [], None, None, lineno=3952, col_offset=12), lineno=3952, col_offset=12)], [], lineno=3951, col_offset=8), Expr(Call(Name('reset', Load(), lineno=3953, col_offset=8), [], [], None, None, lineno=3953, col_offset=8), lineno=3953, col_offset=8), Expr(Call(Name('lt', Load(), lineno=3954, col_offset=8), [Num(90, lineno=3954, col_offset=11)], [], None, None, lineno=3954, col_offset=8), lineno=3954, col_offset=8), Expr(Call(Name('colormode', Load(), lineno=3955, col_offset=8), [Num(255, lineno=3955, col_offset=18)], [], None, None, lineno=3955, col_offset=8), lineno=3955, col_offset=8), Assign([Name('laenge', Store(), lineno=3956, col_offset=8)], Num(10, lineno=3956, col_offset=17), lineno=3956, col_offset=8), Expr(Call(Name('pencolor', Load(), lineno=3957, col_offset=8), [Str('green', lineno=3957, col_offset=17)], [], None, None, lineno=3957, col_offset=8), lineno=3957, col_offset=8), Expr(Call(Name('pensize', Load(), lineno=3958, col_offset=8), [Num(3, lineno=3958, col_offset=16)], [], None, None, lineno=3958, col_offset=8), lineno=3958, col_offset=8), Expr(Call(Name('lt', Load(), lineno=3959, col_offset=8), [Num(180, lineno=3959, col_offset=11)], [], None, None, lineno=3959, col_offset=8), lineno=3959, col_offset=8), For(Name('i', Store(), lineno=3960, col_offset=12), Call(Name('range', Load(), lineno=3960, col_offset=17), [Num(-2, lineno=3960, col_offset=24), Num(16, lineno=3960, col_offset=27)], [], None, None, lineno=3960, col_offset=17), [If(Compare(Name('i', Load(), lineno=3961, col_offset=15), [Gt()], [Num(0, lineno=3961, col_offset=19)], lineno=3961, col_offset=15), [Expr(Call(Name('begin_fill', Load(), lineno=3962, col_offset=16), [], [], None, None, lineno=3962, col_offset=16), lineno=3962, col_offset=16), Expr(Call(Name('fillcolor', Load(), lineno=3963, col_offset=16), [BinOp(Num(255, lineno=3963, col_offset=26), Sub(), BinOp(Num(15, lineno=3963, col_offset=30), Mult(), Name('i', Load(), lineno=3963, col_offset=33), lineno=3963, col_offset=30), lineno=3963, col_offset=26), Num(0, lineno=3963, col_offset=36), BinOp(Num(15, lineno=3963, col_offset=39), Mult(), Name('i', Load(), lineno=3963, col_offset=42), lineno=3963, col_offset=39)], [], None, None, lineno=3963, col_offset=16), lineno=3963, col_offset=16)], [], lineno=3961, col_offset=12), For(Name('_', Store(), lineno=3964, col_offset=16), Call(Name('range', Load(), lineno=3964, col_offset=21), [Num(3, lineno=3964, col_offset=27)], [], None, None, lineno=3964, col_offset=21), [Expr(Call(Name('fd', Load(), lineno=3965, col_offset=16), [Name('laenge', Load(), lineno=3965, col_offset=19)], [], None, None, lineno=3965, col_offset=16), lineno=3965, col_offset=16), Expr(Call(Name('lt', Load(), lineno=3966, col_offset=16), [Num(120, lineno=3966, col_offset=19)], [], None, None, lineno=3966, col_offset=16), lineno=3966, col_offset=16)], [], lineno=3964, col_offset=12), AugAssign(Name('laenge', Store(), lineno=3967, col_offset=12), Add(), Num(10, lineno=3967, col_offset=22), lineno=3967, col_offset=12), Expr(Call(Name('lt', Load(), lineno=3968, col_offset=12), [Num(15, lineno=3968, col_offset=15)], [], None, None, lineno=3968, col_offset=12), lineno=3968, col_offset=12), Expr(Call(Name('speed', Load(), lineno=3969, col_offset=12), [BinOp(BinOp(Call(Name('speed', Load(), lineno=3969, col_offset=19), [], [], None, None, lineno=3969, col_offset=19), Add(), Num(1, lineno=3969, col_offset=27), lineno=3969, col_offset=19), Mod(), Num(12, lineno=3969, col_offset=30), lineno=3969, col_offset=18)], [], None, None, lineno=3969, col_offset=12), lineno=3969, col_offset=12)], [], lineno=3960, col_offset=8), Expr(Call(Name('end_fill', Load(), lineno=3970, col_offset=8), [], [], None, None, lineno=3970, col_offset=8), lineno=3970, col_offset=8), Expr(Call(Name('lt', Load(), lineno=3972, col_offset=8), [Num(120, lineno=3972, col_offset=11)], [], None, None, lineno=3972, col_offset=8), lineno=3972, col_offset=8), Expr(Call(Name('pu', Load(), lineno=3973, col_offset=8), [], [], None, None, lineno=3973, col_offset=8), lineno=3973, col_offset=8), Expr(Call(Name('fd', Load(), lineno=3974, col_offset=8), [Num(70, lineno=3974, col_offset=11)], [], None, None, lineno=3974, col_offset=8), lineno=3974, col_offset=8), Expr(Call(Name('rt', Load(), lineno=3975, col_offset=8), [Num(30, lineno=3975, col_offset=11)], [], None, None, lineno=3975, col_offset=8), lineno=3975, col_offset=8), Expr(Call(Name('pd', Load(), lineno=3976, col_offset=8), [], [], None, None, lineno=3976, col_offset=8), lineno=3976, col_offset=8), Expr(Call(Name('color', Load(), lineno=3977, col_offset=8), [Str('red', lineno=3977, col_offset=14), Str('yellow', lineno=3977, col_offset=20)], [], None, None, lineno=3977, col_offset=8), lineno=3977, col_offset=8), Expr(Call(Name('speed', Load(), lineno=3978, col_offset=8), [Num(0, lineno=3978, col_offset=14)], [], None, None, lineno=3978, col_offset=8), lineno=3978, col_offset=8), Expr(Call(Name('fill', Load(), lineno=3979, col_offset=8), [Num(1, lineno=3979, col_offset=13)], [], None, None, lineno=3979, col_offset=8), lineno=3979, col_offset=8), For(Name('_', Store(), lineno=3980, col_offset=12), Call(Name('range', Load(), lineno=3980, col_offset=17), [Num(4, lineno=3980, col_offset=23)], [], None, None, lineno=3980, col_offset=17), [Expr(Call(Name('circle', Load(), lineno=3981, col_offset=12), [Num(50, lineno=3981, col_offset=19), Num(90, lineno=3981, col_offset=23)], [], None, None, lineno=3981, col_offset=12), lineno=3981, col_offset=12), Expr(Call(Name('rt', Load(), lineno=3982, col_offset=12), [Num(90, lineno=3982, col_offset=15)], [], None, None, lineno=3982, col_offset=12), lineno=3982, col_offset=12), Expr(Call(Name('fd', Load(), lineno=3983, col_offset=12), [Num(30, lineno=3983, col_offset=15)], [], None, None, lineno=3983, col_offset=12), lineno=3983, col_offset=12), Expr(Call(Name('rt', Load(), lineno=3984, col_offset=12), [Num(90, lineno=3984, col_offset=15)], [], None, None, lineno=3984, col_offset=12), lineno=3984, col_offset=12)], [], lineno=3980, col_offset=8), Expr(Call(Name('fill', Load(), lineno=3985, col_offset=8), [Num(0, lineno=3985, col_offset=13)], [], None, None, lineno=3985, col_offset=8), lineno=3985, col_offset=8), Expr(Call(Name('lt', Load(), lineno=3986, col_offset=8), [Num(90, lineno=3986, col_offset=11)], [], None, None, lineno=3986, col_offset=8), lineno=3986, col_offset=8), Expr(Call(Name('pu', Load(), lineno=3987, col_offset=8), [], [], None, None, lineno=3987, col_offset=8), lineno=3987, col_offset=8), Expr(Call(Name('fd', Load(), lineno=3988, col_offset=8), [Num(30, lineno=3988, col_offset=11)], [], None, None, lineno=3988, col_offset=8), lineno=3988, col_offset=8), Expr(Call(Name('pd', Load(), lineno=3989, col_offset=8), [], [], None, None, lineno=3989, col_offset=8), lineno=3989, col_offset=8), Expr(Call(Name('shape', Load(), lineno=3990, col_offset=8), [Str('turtle', lineno=3990, col_offset=14)], [], None, None, lineno=3990, col_offset=8), lineno=3990, col_offset=8), Assign([Name('tri', Store(), lineno=3992, col_offset=8)], Call(Name('getturtle', Load(), lineno=3992, col_offset=14), [], [], None, None, lineno=3992, col_offset=14), lineno=3992, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=3993, col_offset=8), 'resizemode', Load(), lineno=3993, col_offset=8), [Str('auto', lineno=3993, col_offset=23)], [], None, None, lineno=3993, col_offset=8), lineno=3993, col_offset=8), Assign([Name('turtle', Store(), lineno=3994, col_offset=8)], Call(Name('Turtle', Load(), lineno=3994, col_offset=17), [], [], None, None, lineno=3994, col_offset=17), lineno=3994, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=3995, col_offset=8), 'resizemode', Load(), lineno=3995, col_offset=8), [Str('auto', lineno=3995, col_offset=26)], [], None, None, lineno=3995, col_offset=8), lineno=3995, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=3996, col_offset=8), 'shape', Load(), lineno=3996, col_offset=8), [Str('turtle', lineno=3996, col_offset=21)], [], None, None, lineno=3996, col_offset=8), lineno=3996, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=3997, col_offset=8), 'reset', Load(), lineno=3997, col_offset=8), [], [], None, None, lineno=3997, col_offset=8), lineno=3997, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=3998, col_offset=8), 'left', Load(), lineno=3998, col_offset=8), [Num(90, lineno=3998, col_offset=20)], [], None, None, lineno=3998, col_offset=8), lineno=3998, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=3999, col_offset=8), 'speed', Load(), lineno=3999, col_offset=8), [Num(0, lineno=3999, col_offset=21)], [], None, None, lineno=3999, col_offset=8), lineno=3999, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4000, col_offset=8), 'up', Load(), lineno=4000, col_offset=8), [], [], None, None, lineno=4000, col_offset=8), lineno=4000, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4001, col_offset=8), 'goto', Load(), lineno=4001, col_offset=8), [Num(280, lineno=4001, col_offset=20), Num(40, lineno=4001, col_offset=25)], [], None, None, lineno=4001, col_offset=8), lineno=4001, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4002, col_offset=8), 'lt', Load(), lineno=4002, col_offset=8), [Num(30, lineno=4002, col_offset=18)], [], None, None, lineno=4002, col_offset=8), lineno=4002, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4003, col_offset=8), 'down', Load(), lineno=4003, col_offset=8), [], [], None, None, lineno=4003, col_offset=8), lineno=4003, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4004, col_offset=8), 'speed', Load(), lineno=4004, col_offset=8), [Num(6, lineno=4004, col_offset=21)], [], None, None, lineno=4004, col_offset=8), lineno=4004, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4005, col_offset=8), 'color', Load(), lineno=4005, col_offset=8), [Str('blue', lineno=4005, col_offset=21), Str('orange', lineno=4005, col_offset=28)], [], None, None, lineno=4005, col_offset=8), lineno=4005, col_offset=8), Expr(Call(Attribute(Name('turtle', Load(), lineno=4006, col_offset=8), 'pensize', Load(), lineno=4006, col_offset=8), [Num(2, lineno=4006, col_offset=23)], [], None, None, lineno=4006, col_offset=8), lineno=4006, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4007, col_offset=8), 'speed', Load(), lineno=4007, col_offset=8), [Num(6, lineno=4007, col_offset=18)], [], None, None, lineno=4007, col_offset=8), lineno=4007, col_offset=8), Expr(Call(Name('setheading', Load(), lineno=4008, col_offset=8), [Call(Name('towards', Load(), lineno=4008, col_offset=19), [Name('turtle', Load(), lineno=4008, col_offset=27)], [], None, None, lineno=4008, col_offset=19)], [], None, None, lineno=4008, col_offset=8), lineno=4008, col_offset=8), Assign([Name('count', Store(), lineno=4009, col_offset=8)], Num(1, lineno=4009, col_offset=16), lineno=4009, col_offset=8), While(Compare(Call(Attribute(Name('tri', Load(), lineno=4010, col_offset=14), 'distance', Load(), lineno=4010, col_offset=14), [Name('turtle', Load(), lineno=4010, col_offset=27)], [], None, None, lineno=4010, col_offset=14), [Gt()], [Num(4, lineno=4010, col_offset=37)], lineno=4010, col_offset=14), [Expr(Call(Attribute(Name('turtle', Load(), lineno=4011, col_offset=12), 'fd', Load(), lineno=4011, col_offset=12), [Num(3.5, lineno=4011, col_offset=22)], [], None, None, lineno=4011, col_offset=12), lineno=4011, col_offset=12), Expr(Call(Attribute(Name('turtle', Load(), lineno=4012, col_offset=12), 'lt', Load(), lineno=4012, col_offset=12), [Num(0.6, lineno=4012, col_offset=22)], [], None, None, lineno=4012, col_offset=12), lineno=4012, col_offset=12), Expr(Call(Attribute(Name('tri', Load(), lineno=4013, col_offset=12), 'setheading', Load(), lineno=4013, col_offset=12), [Call(Attribute(Name('tri', Load(), lineno=4013, col_offset=27), 'towards', Load(), lineno=4013, col_offset=27), [Name('turtle', Load(), lineno=4013, col_offset=39)], [], None, None, lineno=4013, col_offset=27)], [], None, None, lineno=4013, col_offset=12), lineno=4013, col_offset=12), Expr(Call(Attribute(Name('tri', Load(), lineno=4014, col_offset=12), 'fd', Load(), lineno=4014, col_offset=12), [Num(4, lineno=4014, col_offset=19)], [], None, None, lineno=4014, col_offset=12), lineno=4014, col_offset=12), If(Compare(BinOp(Name('count', Load(), lineno=4015, col_offset=15), Mod(), Num(20, lineno=4015, col_offset=23), lineno=4015, col_offset=15), [Eq()], [Num(0, lineno=4015, col_offset=29)], lineno=4015, col_offset=15), [Expr(Call(Attribute(Name('turtle', Load(), lineno=4016, col_offset=16), 'stamp', Load(), lineno=4016, col_offset=16), [], [], None, None, lineno=4016, col_offset=16), lineno=4016, col_offset=16), Expr(Call(Attribute(Name('tri', Load(), lineno=4017, col_offset=16), 'stamp', Load(), lineno=4017, col_offset=16), [], [], None, None, lineno=4017, col_offset=16), lineno=4017, col_offset=16), Expr(Call(Name('switchpen', Load(), lineno=4018, col_offset=16), [], [], None, None, lineno=4018, col_offset=16), lineno=4018, col_offset=16)], [], lineno=4015, col_offset=12), AugAssign(Name('count', Store(), lineno=4019, col_offset=12), Add(), Num(1, lineno=4019, col_offset=21), lineno=4019, col_offset=12)], [], lineno=4010, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4020, col_offset=8), 'write', Load(), lineno=4020, col_offset=8), [Str('CAUGHT! ', lineno=4020, col_offset=18)], [keyword('font', Tuple([Str('Arial', lineno=4020, col_offset=36), Num(16, lineno=4020, col_offset=45), Str('bold', lineno=4020, col_offset=49)], Load(), lineno=4020, col_offset=36)), keyword('align', Str('right', lineno=4020, col_offset=64))], None, None, lineno=4020, col_offset=8), lineno=4020, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4021, col_offset=8), 'pencolor', Load(), lineno=4021, col_offset=8), [Str('black', lineno=4021, col_offset=21)], [], None, None, lineno=4021, col_offset=8), lineno=4021, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4022, col_offset=8), 'pencolor', Load(), lineno=4022, col_offset=8), [Str('red', lineno=4022, col_offset=21)], [], None, None, lineno=4022, col_offset=8), lineno=4022, col_offset=8), FunctionDef('baba', arguments([Name('xdummy', Param(), lineno=4024, col_offset=17), Name('ydummy', Param(), lineno=4024, col_offset=25)], None, None, []), [Expr(Call(Name('clearscreen', Load(), lineno=4025, col_offset=12), [], [], None, None, lineno=4025, col_offset=12), lineno=4025, col_offset=12), Expr(Call(Name('bye', Load(), lineno=4026, col_offset=12), [], [], None, None, lineno=4026, col_offset=12), lineno=4026, col_offset=12)], [], lineno=4024, col_offset=8), Expr(Call(Attribute(Name('time', Load(), lineno=4028, col_offset=8), 'sleep', Load(), lineno=4028, col_offset=8), [Num(2, lineno=4028, col_offset=19)], [], None, None, lineno=4028, col_offset=8), lineno=4028, col_offset=8), While(Call(Name('undobufferentries', Load(), lineno=4030, col_offset=14), [], [], None, None, lineno=4030, col_offset=14), [Expr(Call(Attribute(Name('tri', Load(), lineno=4031, col_offset=12), 'undo', Load(), lineno=4031, col_offset=12), [], [], None, None, lineno=4031, col_offset=12), lineno=4031, col_offset=12), Expr(Call(Attribute(Name('turtle', Load(), lineno=4032, col_offset=12), 'undo', Load(), lineno=4032, col_offset=12), [], [], None, None, lineno=4032, col_offset=12), lineno=4032, col_offset=12)], [], lineno=4030, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4033, col_offset=8), 'fd', Load(), lineno=4033, col_offset=8), [Num(50, lineno=4033, col_offset=15)], [], None, None, lineno=4033, col_offset=8), lineno=4033, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4034, col_offset=8), 'write', Load(), lineno=4034, col_offset=8), [Str('  Click me!', lineno=4034, col_offset=18)], [keyword('font', Tuple([Str('Courier', lineno=4034, col_offset=41), Num(12, lineno=4034, col_offset=52), Str('bold', lineno=4034, col_offset=56)], Load(), lineno=4034, col_offset=41))], None, None, lineno=4034, col_offset=8), lineno=4034, col_offset=8), Expr(Call(Attribute(Name('tri', Load(), lineno=4035, col_offset=8), 'onclick', Load(), lineno=4035, col_offset=8), [Name('baba', Load(), lineno=4035, col_offset=20), Num(1, lineno=4035, col_offset=26)], [], None, None, lineno=4035, col_offset=8), lineno=4035, col_offset=8)], [], lineno=3939, col_offset=4), Expr(Call(Name('demo1', Load(), lineno=4037, col_offset=4), [], [], None, None, lineno=4037, col_offset=4), lineno=4037, col_offset=4), Expr(Call(Name('demo2', Load(), lineno=4038, col_offset=4), [], [], None, None, lineno=4038, col_offset=4), lineno=4038, col_offset=4), Expr(Call(Name('exitonclick', Load(), lineno=4039, col_offset=4), [], [], None, None, lineno=4039, col_offset=4), lineno=4039, col_offset=4)], [], lineno=3879, col_offset=0)])
