Module([Expr(Str("Quoted-printable content transfer encoding per RFCs 2045-2047.\n\nThis module handles the content transfer encoding method defined in RFC 2045\nto encode US ASCII-like 8-bit data called `quoted-printable'.  It is used to\nsafely encode text that is in a character set similar to the 7-bit US ASCII\ncharacter set, but that includes some 8-bit characters that are normally not\nallowed in email bodies or headers.\n\nQuoted-printable is very space-inefficient for encoding binary files; use the\nemail.base64mime module for that instead.\n\nThis module provides an interface to encode and decode both headers and bodies\nwith quoted-printable encoding.\n\nRFC 2045 defines a method for including character set information in an\n`encoded-word' in a header.  This method is commonly used for 8-bit real names\nin To:/From:/Cc: etc. fields, as well as Subject: lines.\n\nThis module does not do the line wrapping or end-of-line character\nconversion necessary for proper internationalized headers; it only\ndoes dumb encoding and decoding.  To deal with the various line\nwrapping issues, use the email.header module.\n", lineno=27, col_offset=-1), lineno=27, col_offset=-1), Assign([Name('__all__', Store(), lineno=29, col_offset=0)], List([Str('body_decode', lineno=30, col_offset=4), Str('body_encode', lineno=31, col_offset=4), Str('body_quopri_check', lineno=32, col_offset=4), Str('body_quopri_len', lineno=33, col_offset=4), Str('decode', lineno=34, col_offset=4), Str('decodestring', lineno=35, col_offset=4), Str('encode', lineno=36, col_offset=4), Str('encodestring', lineno=37, col_offset=4), Str('header_decode', lineno=38, col_offset=4), Str('header_encode', lineno=39, col_offset=4), Str('header_quopri_check', lineno=40, col_offset=4), Str('header_quopri_len', lineno=41, col_offset=4), Str('quote', lineno=42, col_offset=4), Str('unquote', lineno=43, col_offset=4)], Load(), lineno=29, col_offset=10), lineno=29, col_offset=0), Import([alias('re', None)], lineno=46, col_offset=0), ImportFrom('string', [alias('hexdigits', None)], 0, lineno=48, col_offset=0), ImportFrom('email.utils', [alias('fix_eols', None)], 0, lineno=49, col_offset=0), Assign([Name('CRLF', Store(), lineno=51, col_offset=0)], Str('\r\n', lineno=51, col_offset=7), lineno=51, col_offset=0), Assign([Name('NL', Store(), lineno=52, col_offset=0)], Str('\n', lineno=52, col_offset=5), lineno=52, col_offset=0), Assign([Name('MISC_LEN', Store(), lineno=55, col_offset=0)], Num(7, lineno=55, col_offset=11), lineno=55, col_offset=0), Assign([Name('hqre', Store(), lineno=57, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=57, col_offset=7), 'compile', Load(), lineno=57, col_offset=7), [Str('[^-a-zA-Z0-9!*+/ ]', lineno=57, col_offset=18)], [], None, None, lineno=57, col_offset=7), lineno=57, col_offset=0), Assign([Name('bqre', Store(), lineno=58, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=58, col_offset=7), 'compile', Load(), lineno=58, col_offset=7), [Str('[^ !-<>-~\\t]', lineno=58, col_offset=18)], [], None, None, lineno=58, col_offset=7), lineno=58, col_offset=0), FunctionDef('header_quopri_check', arguments([Name('c', Param(), lineno=63, col_offset=24)], None, None, []), [Expr(Str('Return True if the character should be escaped with header quopri.', lineno=64, col_offset=4), lineno=64, col_offset=4), Return(Call(Name('bool', Load(), lineno=65, col_offset=11), [Call(Attribute(Name('hqre', Load(), lineno=65, col_offset=16), 'match', Load(), lineno=65, col_offset=16), [Name('c', Load(), lineno=65, col_offset=27)], [], None, None, lineno=65, col_offset=16)], [], None, None, lineno=65, col_offset=11), lineno=65, col_offset=4)], [], lineno=63, col_offset=0), FunctionDef('body_quopri_check', arguments([Name('c', Param(), lineno=68, col_offset=22)], None, None, []), [Expr(Str('Return True if the character should be escaped with body quopri.', lineno=69, col_offset=4), lineno=69, col_offset=4), Return(Call(Name('bool', Load(), lineno=70, col_offset=11), [Call(Attribute(Name('bqre', Load(), lineno=70, col_offset=16), 'match', Load(), lineno=70, col_offset=16), [Name('c', Load(), lineno=70, col_offset=27)], [], None, None, lineno=70, col_offset=16)], [], None, None, lineno=70, col_offset=11), lineno=70, col_offset=4)], [], lineno=68, col_offset=0), FunctionDef('header_quopri_len', arguments([Name('s', Param(), lineno=73, col_offset=22)], None, None, []), [Expr(Str('Return the length of str when it is encoded with header quopri.', lineno=74, col_offset=4), lineno=74, col_offset=4), Assign([Name('count', Store(), lineno=75, col_offset=4)], Num(0, lineno=75, col_offset=12), lineno=75, col_offset=4), For(Name('c', Store(), lineno=76, col_offset=8), Name('s', Load(), lineno=76, col_offset=13), [If(Call(Attribute(Name('hqre', Load(), lineno=77, col_offset=11), 'match', Load(), lineno=77, col_offset=11), [Name('c', Load(), lineno=77, col_offset=22)], [], None, None, lineno=77, col_offset=11), [AugAssign(Name('count', Store(), lineno=78, col_offset=12), Add(), Num(3, lineno=78, col_offset=21), lineno=78, col_offset=12)], [AugAssign(Name('count', Store(), lineno=80, col_offset=12), Add(), Num(1, lineno=80, col_offset=21), lineno=80, col_offset=12)], lineno=77, col_offset=8)], [], lineno=76, col_offset=4), Return(Name('count', Load(), lineno=81, col_offset=11), lineno=81, col_offset=4)], [], lineno=73, col_offset=0), FunctionDef('body_quopri_len', arguments([Name('str', Param(), lineno=84, col_offset=20)], None, None, []), [Expr(Str('Return the length of str when it is encoded with body quopri.', lineno=85, col_offset=4), lineno=85, col_offset=4), Assign([Name('count', Store(), lineno=86, col_offset=4)], Num(0, lineno=86, col_offset=12), lineno=86, col_offset=4), For(Name('c', Store(), lineno=87, col_offset=8), Name('str', Load(), lineno=87, col_offset=13), [If(Call(Attribute(Name('bqre', Load(), lineno=88, col_offset=11), 'match', Load(), lineno=88, col_offset=11), [Name('c', Load(), lineno=88, col_offset=22)], [], None, None, lineno=88, col_offset=11), [AugAssign(Name('count', Store(), lineno=89, col_offset=12), Add(), Num(3, lineno=89, col_offset=21), lineno=89, col_offset=12)], [AugAssign(Name('count', Store(), lineno=91, col_offset=12), Add(), Num(1, lineno=91, col_offset=21), lineno=91, col_offset=12)], lineno=88, col_offset=8)], [], lineno=87, col_offset=4), Return(Name('count', Load(), lineno=92, col_offset=11), lineno=92, col_offset=4)], [], lineno=84, col_offset=0), FunctionDef('_max_append', arguments([Name('L', Param(), lineno=95, col_offset=16), Name('s', Param(), lineno=95, col_offset=19), Name('maxlen', Param(), lineno=95, col_offset=22), Name('extra', Param(), lineno=95, col_offset=30)], None, None, [Str('', lineno=95, col_offset=36)]), [If(UnaryOp(Not(), Name('L', Load(), lineno=96, col_offset=11), lineno=96, col_offset=7), [Expr(Call(Attribute(Name('L', Load(), lineno=97, col_offset=8), 'append', Load(), lineno=97, col_offset=8), [Call(Attribute(Name('s', Load(), lineno=97, col_offset=17), 'lstrip', Load(), lineno=97, col_offset=17), [], [], None, None, lineno=97, col_offset=17)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8)], [If(Compare(BinOp(Call(Name('len', Load(), lineno=98, col_offset=9), [Subscript(Name('L', Load(), lineno=98, col_offset=13), Index(Num(-1, lineno=98, col_offset=16)), Load(), lineno=98, col_offset=13)], [], None, None, lineno=98, col_offset=9), Add(), Call(Name('len', Load(), lineno=98, col_offset=22), [Name('s', Load(), lineno=98, col_offset=26)], [], None, None, lineno=98, col_offset=22), lineno=98, col_offset=9), [LtE()], [Name('maxlen', Load(), lineno=98, col_offset=32)], lineno=98, col_offset=9), [AugAssign(Subscript(Name('L', Load(), lineno=99, col_offset=8), Index(Num(-1, lineno=99, col_offset=11)), Store(), lineno=99, col_offset=8), Add(), BinOp(Name('extra', Load(), lineno=99, col_offset=17), Add(), Name('s', Load(), lineno=99, col_offset=25), lineno=99, col_offset=17), lineno=99, col_offset=8)], [Expr(Call(Attribute(Name('L', Load(), lineno=101, col_offset=8), 'append', Load(), lineno=101, col_offset=8), [Call(Attribute(Name('s', Load(), lineno=101, col_offset=17), 'lstrip', Load(), lineno=101, col_offset=17), [], [], None, None, lineno=101, col_offset=17)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8)], lineno=98, col_offset=9)], lineno=96, col_offset=4)], [], lineno=95, col_offset=0), FunctionDef('unquote', arguments([Name('s', Param(), lineno=104, col_offset=12)], None, None, []), [Expr(Str('Turn a string in the form =AB to the ASCII character with value 0xab', lineno=105, col_offset=4), lineno=105, col_offset=4), Return(Call(Name('chr', Load(), lineno=106, col_offset=11), [Call(Name('int', Load(), lineno=106, col_offset=15), [Subscript(Name('s', Load(), lineno=106, col_offset=19), Slice(Num(1, lineno=106, col_offset=21), Num(3, lineno=106, col_offset=23), None), Load(), lineno=106, col_offset=19), Num(16, lineno=106, col_offset=27)], [], None, None, lineno=106, col_offset=15)], [], None, None, lineno=106, col_offset=11), lineno=106, col_offset=4)], [], lineno=104, col_offset=0), FunctionDef('quote', arguments([Name('c', Param(), lineno=109, col_offset=10)], None, None, []), [Return(BinOp(Str('=%02X', lineno=110, col_offset=11), Mod(), Call(Name('ord', Load(), lineno=110, col_offset=21), [Name('c', Load(), lineno=110, col_offset=25)], [], None, None, lineno=110, col_offset=21), lineno=110, col_offset=11), lineno=110, col_offset=4)], [], lineno=109, col_offset=0), FunctionDef('header_encode', arguments([Name('header', Param(), lineno=114, col_offset=18), Name('charset', Param(), lineno=114, col_offset=26), Name('keep_eols', Param(), lineno=114, col_offset=48), Name('maxlinelen', Param(), lineno=115, col_offset=18), Name('eol', Param(), lineno=115, col_offset=33)], None, None, [Str('iso-8859-1', lineno=114, col_offset=34), Name('False', Load(), lineno=114, col_offset=58), Num(76, lineno=115, col_offset=29), Name('NL', Load(), lineno=115, col_offset=37)]), [Expr(Str('Encode a single header line with quoted-printable (like) encoding.\n\n    Defined in RFC 2045, this `Q\' encoding is similar to quoted-printable, but\n    used specifically for email header fields to allow charsets with mostly 7\n    bit characters (and some 8 bit) to remain more or less readable in non-RFC\n    2045 aware mail clients.\n\n    charset names the character set to use to encode the header.  It defaults\n    to iso-8859-1.\n\n    The resulting string will be in the form:\n\n    "=?charset?q?I_f=E2rt_in_your_g=E8n=E8ral_dire=E7tion?\\n\n      =?charset?q?Silly_=C8nglish_Kn=EEghts?="\n\n    with each line wrapped safely at, at most, maxlinelen characters (defaults\n    to 76 characters).  If maxlinelen is None, the entire string is encoded in\n    one chunk with no splitting.\n\n    End-of-line characters (\\r, \\n, \\r\\n) will be automatically converted\n    to the canonical email line separator \\r\\n unless the keep_eols\n    parameter is True (the default is False).\n\n    Each line of the header will be terminated in the value of eol, which\n    defaults to "\\n".  Set this to "\\r\\n" if you are using the result of\n    this function directly in email.\n    ', lineno=142, col_offset=-1), lineno=142, col_offset=-1), If(UnaryOp(Not(), Name('header', Load(), lineno=144, col_offset=11), lineno=144, col_offset=7), [Return(Name('header', Load(), lineno=145, col_offset=15), lineno=145, col_offset=8)], [], lineno=144, col_offset=4), If(UnaryOp(Not(), Name('keep_eols', Load(), lineno=147, col_offset=11), lineno=147, col_offset=7), [Assign([Name('header', Store(), lineno=148, col_offset=8)], Call(Name('fix_eols', Load(), lineno=148, col_offset=17), [Name('header', Load(), lineno=148, col_offset=26)], [], None, None, lineno=148, col_offset=17), lineno=148, col_offset=8)], [], lineno=147, col_offset=4), Assign([Name('quoted', Store(), lineno=152, col_offset=4)], List([], Load(), lineno=152, col_offset=13), lineno=152, col_offset=4), If(Compare(Name('maxlinelen', Load(), lineno=153, col_offset=7), [Is()], [Name('None', Load(), lineno=153, col_offset=21)], lineno=153, col_offset=7), [Assign([Name('max_encoded', Store(), lineno=155, col_offset=8)], Num(100000, lineno=155, col_offset=22), lineno=155, col_offset=8)], [Assign([Name('max_encoded', Store(), lineno=157, col_offset=8)], BinOp(BinOp(BinOp(Name('maxlinelen', Load(), lineno=157, col_offset=22), Sub(), Call(Name('len', Load(), lineno=157, col_offset=35), [Name('charset', Load(), lineno=157, col_offset=39)], [], None, None, lineno=157, col_offset=35), lineno=157, col_offset=22), Sub(), Name('MISC_LEN', Load(), lineno=157, col_offset=50), lineno=157, col_offset=48), Sub(), Num(1, lineno=157, col_offset=61), lineno=157, col_offset=59), lineno=157, col_offset=8)], lineno=153, col_offset=4), For(Name('c', Store(), lineno=159, col_offset=8), Name('header', Load(), lineno=159, col_offset=13), [If(Compare(Name('c', Load(), lineno=161, col_offset=11), [Eq()], [Str(' ', lineno=161, col_offset=16)], lineno=161, col_offset=11), [Expr(Call(Name('_max_append', Load(), lineno=162, col_offset=12), [Name('quoted', Load(), lineno=162, col_offset=24), Str('_', lineno=162, col_offset=32), Name('max_encoded', Load(), lineno=162, col_offset=37)], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=12)], [If(UnaryOp(Not(), Call(Attribute(Name('hqre', Load(), lineno=164, col_offset=17), 'match', Load(), lineno=164, col_offset=17), [Name('c', Load(), lineno=164, col_offset=28)], [], None, None, lineno=164, col_offset=17), lineno=164, col_offset=13), [Expr(Call(Name('_max_append', Load(), lineno=165, col_offset=12), [Name('quoted', Load(), lineno=165, col_offset=24), Name('c', Load(), lineno=165, col_offset=32), Name('max_encoded', Load(), lineno=165, col_offset=35)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12)], [Expr(Call(Name('_max_append', Load(), lineno=168, col_offset=12), [Name('quoted', Load(), lineno=168, col_offset=24), BinOp(Str('=%02X', lineno=168, col_offset=32), Mod(), Call(Name('ord', Load(), lineno=168, col_offset=42), [Name('c', Load(), lineno=168, col_offset=46)], [], None, None, lineno=168, col_offset=42), lineno=168, col_offset=32), Name('max_encoded', Load(), lineno=168, col_offset=50)], [], None, None, lineno=168, col_offset=12), lineno=168, col_offset=12)], lineno=164, col_offset=13)], lineno=161, col_offset=8)], [], lineno=159, col_offset=4), Assign([Name('joiner', Store(), lineno=173, col_offset=4)], BinOp(Name('eol', Load(), lineno=173, col_offset=13), Add(), Str(' ', lineno=173, col_offset=19), lineno=173, col_offset=13), lineno=173, col_offset=4), Return(Call(Attribute(Name('joiner', Load(), lineno=174, col_offset=11), 'join', Load(), lineno=174, col_offset=11), [ListComp(BinOp(Str('=?%s?q?%s?=', lineno=174, col_offset=24), Mod(), Tuple([Name('charset', Load(), lineno=174, col_offset=41), Name('line', Load(), lineno=174, col_offset=50)], Load(), lineno=174, col_offset=41), lineno=174, col_offset=24), [comprehension(Name('line', Store(), lineno=174, col_offset=60), Name('quoted', Load(), lineno=174, col_offset=68), [])], lineno=174, col_offset=24)], [], None, None, lineno=174, col_offset=11), lineno=174, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('encode', arguments([Name('body', Param(), lineno=178, col_offset=11), Name('binary', Param(), lineno=178, col_offset=17), Name('maxlinelen', Param(), lineno=178, col_offset=31), Name('eol', Param(), lineno=178, col_offset=46)], None, None, [Name('False', Load(), lineno=178, col_offset=24), Num(76, lineno=178, col_offset=42), Name('NL', Load(), lineno=178, col_offset=50)]), [Expr(Str('Encode with quoted-printable, wrapping at maxlinelen characters.\n\n    If binary is False (the default), end-of-line characters will be converted\n    to the canonical email end-of-line sequence \\r\\n.  Otherwise they will\n    be left verbatim.\n\n    Each line of encoded text will end with eol, which defaults to "\\n".  Set\n    this to "\\r\\n" if you will be using the result of this function directly\n    in an email.\n\n    Each line will be wrapped at, at most, maxlinelen characters (defaults to\n    76 characters).  Long lines will have the `soft linefeed\' quoted-printable\n    character "=" appended to them, so the decoded text will be identical to\n    the original text.\n    ', lineno=193, col_offset=-1), lineno=193, col_offset=-1), If(UnaryOp(Not(), Name('body', Load(), lineno=194, col_offset=11), lineno=194, col_offset=7), [Return(Name('body', Load(), lineno=195, col_offset=15), lineno=195, col_offset=8)], [], lineno=194, col_offset=4), If(UnaryOp(Not(), Name('binary', Load(), lineno=197, col_offset=11), lineno=197, col_offset=7), [Assign([Name('body', Store(), lineno=198, col_offset=8)], Call(Name('fix_eols', Load(), lineno=198, col_offset=15), [Name('body', Load(), lineno=198, col_offset=24)], [], None, None, lineno=198, col_offset=15), lineno=198, col_offset=8)], [], lineno=197, col_offset=4), Assign([Name('encoded_body', Store(), lineno=203, col_offset=4)], Str('', lineno=203, col_offset=19), lineno=203, col_offset=4), Assign([Name('lineno', Store(), lineno=204, col_offset=4)], Num(-1, lineno=204, col_offset=14), lineno=204, col_offset=4), Assign([Name('lines', Store(), lineno=207, col_offset=4)], Call(Attribute(Name('body', Load(), lineno=207, col_offset=12), 'splitlines', Load(), lineno=207, col_offset=12), [Num(1, lineno=207, col_offset=28)], [], None, None, lineno=207, col_offset=12), lineno=207, col_offset=4), For(Name('line', Store(), lineno=208, col_offset=8), Name('lines', Load(), lineno=208, col_offset=16), [If(Call(Attribute(Name('line', Load(), lineno=210, col_offset=11), 'endswith', Load(), lineno=210, col_offset=11), [Name('CRLF', Load(), lineno=210, col_offset=25)], [], None, None, lineno=210, col_offset=11), [Assign([Name('line', Store(), lineno=211, col_offset=12)], Subscript(Name('line', Load(), lineno=211, col_offset=19), Slice(None, Num(-2, lineno=211, col_offset=26), None), Load(), lineno=211, col_offset=19), lineno=211, col_offset=12)], [If(Compare(Subscript(Name('line', Load(), lineno=212, col_offset=13), Index(Num(-1, lineno=212, col_offset=19)), Load(), lineno=212, col_offset=13), [In()], [Name('CRLF', Load(), lineno=212, col_offset=25)], lineno=212, col_offset=13), [Assign([Name('line', Store(), lineno=213, col_offset=12)], Subscript(Name('line', Load(), lineno=213, col_offset=19), Slice(None, Num(-1, lineno=213, col_offset=26), None), Load(), lineno=213, col_offset=19), lineno=213, col_offset=12)], [], lineno=212, col_offset=13)], lineno=210, col_offset=8), AugAssign(Name('lineno', Store(), lineno=215, col_offset=8), Add(), Num(1, lineno=215, col_offset=18), lineno=215, col_offset=8), Assign([Name('encoded_line', Store(), lineno=216, col_offset=8)], Str('', lineno=216, col_offset=23), lineno=216, col_offset=8), Assign([Name('prev', Store(), lineno=217, col_offset=8)], Name('None', Load(), lineno=217, col_offset=15), lineno=217, col_offset=8), Assign([Name('linelen', Store(), lineno=218, col_offset=8)], Call(Name('len', Load(), lineno=218, col_offset=18), [Name('line', Load(), lineno=218, col_offset=22)], [], None, None, lineno=218, col_offset=18), lineno=218, col_offset=8), For(Name('j', Store(), lineno=221, col_offset=12), Call(Name('range', Load(), lineno=221, col_offset=17), [Name('linelen', Load(), lineno=221, col_offset=23)], [], None, None, lineno=221, col_offset=17), [Assign([Name('c', Store(), lineno=222, col_offset=12)], Subscript(Name('line', Load(), lineno=222, col_offset=16), Index(Name('j', Load(), lineno=222, col_offset=21)), Load(), lineno=222, col_offset=16), lineno=222, col_offset=12), Assign([Name('prev', Store(), lineno=223, col_offset=12)], Name('c', Load(), lineno=223, col_offset=19), lineno=223, col_offset=12), If(Call(Attribute(Name('bqre', Load(), lineno=224, col_offset=15), 'match', Load(), lineno=224, col_offset=15), [Name('c', Load(), lineno=224, col_offset=26)], [], None, None, lineno=224, col_offset=15), [Assign([Name('c', Store(), lineno=225, col_offset=16)], Call(Name('quote', Load(), lineno=225, col_offset=20), [Name('c', Load(), lineno=225, col_offset=26)], [], None, None, lineno=225, col_offset=20), lineno=225, col_offset=16)], [If(Compare(BinOp(Name('j', Load(), lineno=226, col_offset=17), Add(), Num(1, lineno=226, col_offset=19), lineno=226, col_offset=17), [Eq()], [Name('linelen', Load(), lineno=226, col_offset=24)], lineno=226, col_offset=17), [If(Compare(Name('c', Load(), lineno=228, col_offset=19), [NotIn()], [Str(' \t', lineno=228, col_offset=28)], lineno=228, col_offset=19), [AugAssign(Name('encoded_line', Store(), lineno=229, col_offset=20), Add(), Name('c', Load(), lineno=229, col_offset=36), lineno=229, col_offset=20)], [], lineno=228, col_offset=16), Assign([Name('prev', Store(), lineno=230, col_offset=16)], Name('c', Load(), lineno=230, col_offset=23), lineno=230, col_offset=16), Continue( lineno=231, col_offset=16)], [], lineno=226, col_offset=17)], lineno=224, col_offset=12), If(Compare(BinOp(Call(Name('len', Load(), lineno=233, col_offset=15), [Name('encoded_line', Load(), lineno=233, col_offset=19)], [], None, None, lineno=233, col_offset=15), Add(), Call(Name('len', Load(), lineno=233, col_offset=35), [Name('c', Load(), lineno=233, col_offset=39)], [], None, None, lineno=233, col_offset=35), lineno=233, col_offset=15), [GtE()], [Name('maxlinelen', Load(), lineno=233, col_offset=45)], lineno=233, col_offset=15), [AugAssign(Name('encoded_body', Store(), lineno=234, col_offset=16), Add(), BinOp(BinOp(Name('encoded_line', Load(), lineno=234, col_offset=32), Add(), Str('=', lineno=234, col_offset=47), lineno=234, col_offset=32), Add(), Name('eol', Load(), lineno=234, col_offset=53), lineno=234, col_offset=51), lineno=234, col_offset=16), Assign([Name('encoded_line', Store(), lineno=235, col_offset=16)], Str('', lineno=235, col_offset=31), lineno=235, col_offset=16)], [], lineno=233, col_offset=12), AugAssign(Name('encoded_line', Store(), lineno=236, col_offset=12), Add(), Name('c', Load(), lineno=236, col_offset=28), lineno=236, col_offset=12)], [], lineno=221, col_offset=8), If(BoolOp(And(), [Name('prev', Load(), lineno=238, col_offset=11), Compare(Name('prev', Load(), lineno=238, col_offset=20), [In()], [Str(' \t', lineno=238, col_offset=28)], lineno=238, col_offset=20)], lineno=238, col_offset=11), [If(Compare(BinOp(Name('lineno', Load(), lineno=240, col_offset=15), Add(), Num(1, lineno=240, col_offset=24), lineno=240, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=240, col_offset=29), [Name('lines', Load(), lineno=240, col_offset=33)], [], None, None, lineno=240, col_offset=29)], lineno=240, col_offset=15), [Assign([Name('prev', Store(), lineno=241, col_offset=16)], Call(Name('quote', Load(), lineno=241, col_offset=23), [Name('prev', Load(), lineno=241, col_offset=29)], [], None, None, lineno=241, col_offset=23), lineno=241, col_offset=16), If(Compare(BinOp(Call(Name('len', Load(), lineno=242, col_offset=19), [Name('encoded_line', Load(), lineno=242, col_offset=23)], [], None, None, lineno=242, col_offset=19), Add(), Call(Name('len', Load(), lineno=242, col_offset=39), [Name('prev', Load(), lineno=242, col_offset=43)], [], None, None, lineno=242, col_offset=39), lineno=242, col_offset=19), [Gt()], [Name('maxlinelen', Load(), lineno=242, col_offset=51)], lineno=242, col_offset=19), [AugAssign(Name('encoded_body', Store(), lineno=243, col_offset=20), Add(), BinOp(BinOp(BinOp(Name('encoded_line', Load(), lineno=243, col_offset=36), Add(), Str('=', lineno=243, col_offset=51), lineno=243, col_offset=36), Add(), Name('eol', Load(), lineno=243, col_offset=57), lineno=243, col_offset=55), Add(), Name('prev', Load(), lineno=243, col_offset=63), lineno=243, col_offset=61), lineno=243, col_offset=20)], [AugAssign(Name('encoded_body', Store(), lineno=245, col_offset=20), Add(), BinOp(Name('encoded_line', Load(), lineno=245, col_offset=36), Add(), Name('prev', Load(), lineno=245, col_offset=51), lineno=245, col_offset=36), lineno=245, col_offset=20)], lineno=242, col_offset=16)], [AugAssign(Name('encoded_body', Store(), lineno=248, col_offset=16), Add(), BinOp(BinOp(BinOp(Name('encoded_line', Load(), lineno=248, col_offset=32), Add(), Name('prev', Load(), lineno=248, col_offset=47), lineno=248, col_offset=32), Add(), Str('=', lineno=248, col_offset=54), lineno=248, col_offset=52), Add(), Name('eol', Load(), lineno=248, col_offset=60), lineno=248, col_offset=58), lineno=248, col_offset=16)], lineno=240, col_offset=12), Assign([Name('encoded_line', Store(), lineno=249, col_offset=12)], Str('', lineno=249, col_offset=27), lineno=249, col_offset=12)], [], lineno=238, col_offset=8), If(BoolOp(Or(), [Call(Attribute(Subscript(Name('lines', Load(), lineno=252, col_offset=11), Index(Name('lineno', Load(), lineno=252, col_offset=17)), Load(), lineno=252, col_offset=11), 'endswith', Load(), lineno=252, col_offset=11), [Name('CRLF', Load(), lineno=252, col_offset=34)], [], None, None, lineno=252, col_offset=11), Compare(Subscript(Subscript(Name('lines', Load(), lineno=252, col_offset=43), Index(Name('lineno', Load(), lineno=252, col_offset=49)), Load(), lineno=252, col_offset=43), Index(Num(-1, lineno=252, col_offset=58)), Load(), lineno=252, col_offset=43), [In()], [Name('CRLF', Load(), lineno=252, col_offset=64)], lineno=252, col_offset=43)], lineno=252, col_offset=11), [AugAssign(Name('encoded_body', Store(), lineno=253, col_offset=12), Add(), BinOp(Name('encoded_line', Load(), lineno=253, col_offset=28), Add(), Name('eol', Load(), lineno=253, col_offset=43), lineno=253, col_offset=28), lineno=253, col_offset=12)], [AugAssign(Name('encoded_body', Store(), lineno=255, col_offset=12), Add(), Name('encoded_line', Load(), lineno=255, col_offset=28), lineno=255, col_offset=12)], lineno=252, col_offset=8), Assign([Name('encoded_line', Store(), lineno=256, col_offset=8)], Str('', lineno=256, col_offset=23), lineno=256, col_offset=8)], [], lineno=208, col_offset=4), Return(Name('encoded_body', Load(), lineno=257, col_offset=11), lineno=257, col_offset=4)], [], lineno=178, col_offset=0), Assign([Name('body_encode', Store(), lineno=261, col_offset=0)], Name('encode', Load(), lineno=261, col_offset=14), lineno=261, col_offset=0), Assign([Name('encodestring', Store(), lineno=262, col_offset=0)], Name('encode', Load(), lineno=262, col_offset=15), lineno=262, col_offset=0), FunctionDef('decode', arguments([Name('encoded', Param(), lineno=268, col_offset=11), Name('eol', Param(), lineno=268, col_offset=20)], None, None, [Name('NL', Load(), lineno=268, col_offset=24)]), [Expr(Str('Decode a quoted-printable string.\n\n    Lines are separated with eol, which defaults to \\n.\n    ', lineno=272, col_offset=-1), lineno=272, col_offset=-1), If(UnaryOp(Not(), Name('encoded', Load(), lineno=273, col_offset=11), lineno=273, col_offset=7), [Return(Name('encoded', Load(), lineno=274, col_offset=15), lineno=274, col_offset=8)], [], lineno=273, col_offset=4), Assign([Name('decoded', Store(), lineno=278, col_offset=4)], Str('', lineno=278, col_offset=14), lineno=278, col_offset=4), For(Name('line', Store(), lineno=280, col_offset=8), Call(Attribute(Name('encoded', Load(), lineno=280, col_offset=16), 'splitlines', Load(), lineno=280, col_offset=16), [], [], None, None, lineno=280, col_offset=16), [Assign([Name('line', Store(), lineno=281, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=281, col_offset=15), 'rstrip', Load(), lineno=281, col_offset=15), [], [], None, None, lineno=281, col_offset=15), lineno=281, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=282, col_offset=15), lineno=282, col_offset=11), [AugAssign(Name('decoded', Store(), lineno=283, col_offset=12), Add(), Name('eol', Load(), lineno=283, col_offset=23), lineno=283, col_offset=12), Continue( lineno=284, col_offset=12)], [], lineno=282, col_offset=8), Assign([Name('i', Store(), lineno=286, col_offset=8)], Num(0, lineno=286, col_offset=12), lineno=286, col_offset=8), Assign([Name('n', Store(), lineno=287, col_offset=8)], Call(Name('len', Load(), lineno=287, col_offset=12), [Name('line', Load(), lineno=287, col_offset=16)], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=8), While(Compare(Name('i', Load(), lineno=288, col_offset=14), [Lt()], [Name('n', Load(), lineno=288, col_offset=18)], lineno=288, col_offset=14), [Assign([Name('c', Store(), lineno=289, col_offset=12)], Subscript(Name('line', Load(), lineno=289, col_offset=16), Index(Name('i', Load(), lineno=289, col_offset=21)), Load(), lineno=289, col_offset=16), lineno=289, col_offset=12), If(Compare(Name('c', Load(), lineno=290, col_offset=15), [NotEq()], [Str('=', lineno=290, col_offset=20)], lineno=290, col_offset=15), [AugAssign(Name('decoded', Store(), lineno=291, col_offset=16), Add(), Name('c', Load(), lineno=291, col_offset=27), lineno=291, col_offset=16), AugAssign(Name('i', Store(), lineno=292, col_offset=16), Add(), Num(1, lineno=292, col_offset=21), lineno=292, col_offset=16)], [If(Compare(BinOp(Name('i', Load(), lineno=295, col_offset=17), Add(), Num(1, lineno=295, col_offset=19), lineno=295, col_offset=17), [Eq()], [Name('n', Load(), lineno=295, col_offset=24)], lineno=295, col_offset=17), [AugAssign(Name('i', Store(), lineno=296, col_offset=16), Add(), Num(1, lineno=296, col_offset=21), lineno=296, col_offset=16), Continue( lineno=297, col_offset=16)], [If(BoolOp(And(), [Compare(BinOp(Name('i', Load(), lineno=299, col_offset=17), Add(), Num(2, lineno=299, col_offset=19), lineno=299, col_offset=17), [Lt()], [Name('n', Load(), lineno=299, col_offset=23)], lineno=299, col_offset=17), Compare(Subscript(Name('line', Load(), lineno=299, col_offset=29), Index(BinOp(Name('i', Load(), lineno=299, col_offset=34), Add(), Num(1, lineno=299, col_offset=36), lineno=299, col_offset=34)), Load(), lineno=299, col_offset=29), [In()], [Name('hexdigits', Load(), lineno=299, col_offset=42)], lineno=299, col_offset=29), Compare(Subscript(Name('line', Load(), lineno=299, col_offset=56), Index(BinOp(Name('i', Load(), lineno=299, col_offset=61), Add(), Num(2, lineno=299, col_offset=63), lineno=299, col_offset=61)), Load(), lineno=299, col_offset=56), [In()], [Name('hexdigits', Load(), lineno=299, col_offset=69)], lineno=299, col_offset=56)], lineno=299, col_offset=17), [AugAssign(Name('decoded', Store(), lineno=300, col_offset=16), Add(), Call(Name('unquote', Load(), lineno=300, col_offset=27), [Subscript(Name('line', Load(), lineno=300, col_offset=35), Slice(Name('i', Load(), lineno=300, col_offset=40), BinOp(Name('i', Load(), lineno=300, col_offset=42), Add(), Num(3, lineno=300, col_offset=44), lineno=300, col_offset=42), None), Load(), lineno=300, col_offset=35)], [], None, None, lineno=300, col_offset=27), lineno=300, col_offset=16), AugAssign(Name('i', Store(), lineno=301, col_offset=16), Add(), Num(3, lineno=301, col_offset=21), lineno=301, col_offset=16)], [AugAssign(Name('decoded', Store(), lineno=304, col_offset=16), Add(), Name('c', Load(), lineno=304, col_offset=27), lineno=304, col_offset=16), AugAssign(Name('i', Store(), lineno=305, col_offset=16), Add(), Num(1, lineno=305, col_offset=21), lineno=305, col_offset=16)], lineno=299, col_offset=17)], lineno=295, col_offset=17)], lineno=290, col_offset=12), If(Compare(Name('i', Load(), lineno=307, col_offset=15), [Eq()], [Name('n', Load(), lineno=307, col_offset=20)], lineno=307, col_offset=15), [AugAssign(Name('decoded', Store(), lineno=308, col_offset=16), Add(), Name('eol', Load(), lineno=308, col_offset=27), lineno=308, col_offset=16)], [], lineno=307, col_offset=12)], [], lineno=288, col_offset=8)], [], lineno=280, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('encoded', Load(), lineno=310, col_offset=11), 'endswith', Load(), lineno=310, col_offset=11), [Name('eol', Load(), lineno=310, col_offset=28)], [], None, None, lineno=310, col_offset=11), lineno=310, col_offset=7), Call(Attribute(Name('decoded', Load(), lineno=310, col_offset=37), 'endswith', Load(), lineno=310, col_offset=37), [Name('eol', Load(), lineno=310, col_offset=54)], [], None, None, lineno=310, col_offset=37)], lineno=310, col_offset=7), [Assign([Name('decoded', Store(), lineno=311, col_offset=8)], Subscript(Name('decoded', Load(), lineno=311, col_offset=18), Slice(None, Num(-1, lineno=311, col_offset=28), None), Load(), lineno=311, col_offset=18), lineno=311, col_offset=8)], [], lineno=310, col_offset=4), Return(Name('decoded', Load(), lineno=312, col_offset=11), lineno=312, col_offset=4)], [], lineno=268, col_offset=0), Assign([Name('body_decode', Store(), lineno=316, col_offset=0)], Name('decode', Load(), lineno=316, col_offset=14), lineno=316, col_offset=0), Assign([Name('decodestring', Store(), lineno=317, col_offset=0)], Name('decode', Load(), lineno=317, col_offset=15), lineno=317, col_offset=0), FunctionDef('_unquote_match', arguments([Name('match', Param(), lineno=321, col_offset=19)], None, None, []), [Expr(Str('Turn a match in the form =AB to the ASCII character with value 0xab', lineno=322, col_offset=4), lineno=322, col_offset=4), Assign([Name('s', Store(), lineno=323, col_offset=4)], Call(Attribute(Name('match', Load(), lineno=323, col_offset=8), 'group', Load(), lineno=323, col_offset=8), [Num(0, lineno=323, col_offset=20)], [], None, None, lineno=323, col_offset=8), lineno=323, col_offset=4), Return(Call(Name('unquote', Load(), lineno=324, col_offset=11), [Name('s', Load(), lineno=324, col_offset=19)], [], None, None, lineno=324, col_offset=11), lineno=324, col_offset=4)], [], lineno=321, col_offset=0), FunctionDef('header_decode', arguments([Name('s', Param(), lineno=328, col_offset=18)], None, None, []), [Expr(Str("Decode a string encoded with RFC 2045 MIME header `Q' encoding.\n\n    This function does not parse a full MIME header value encoded with\n    quoted-printable (like =?iso-8895-1?q?Hello_World?=) -- please use\n    the high level email.header class for that functionality.\n    ", lineno=334, col_offset=-1), lineno=334, col_offset=-1), Assign([Name('s', Store(), lineno=335, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=335, col_offset=8), 'replace', Load(), lineno=335, col_offset=8), [Str('_', lineno=335, col_offset=18), Str(' ', lineno=335, col_offset=23)], [], None, None, lineno=335, col_offset=8), lineno=335, col_offset=4), Return(Call(Attribute(Name('re', Load(), lineno=336, col_offset=11), 'sub', Load(), lineno=336, col_offset=11), [Str('=[a-fA-F0-9]{2}', lineno=336, col_offset=18), Name('_unquote_match', Load(), lineno=336, col_offset=38), Name('s', Load(), lineno=336, col_offset=54)], [], None, None, lineno=336, col_offset=11), lineno=336, col_offset=4)], [], lineno=328, col_offset=0)])
