Module([Expr(Str('Generic thread tests.\n\nMeant to be used by dummy_thread and thread.  To allow for different modules\nto be used, test_main() can be called with the module to use as the thread\nimplementation as its sole argument.\n\n', lineno=7, col_offset=-1), lineno=7, col_offset=-1), Import([alias('dummy_thread', '_thread')], lineno=8, col_offset=0), Import([alias('time', None)], lineno=9, col_offset=0), Import([alias('Queue', None)], lineno=10, col_offset=0), Import([alias('random', None)], lineno=11, col_offset=0), Import([alias('unittest', None)], lineno=12, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=13, col_offset=0), Assign([Name('DELAY', Store(), lineno=15, col_offset=0)], Num(0, lineno=15, col_offset=8), lineno=15, col_offset=0), ClassDef('LockTests', [Attribute(Name('unittest', Load(), lineno=18, col_offset=16), 'TestCase', Load(), lineno=18, col_offset=16)], [Expr(Str('Test lock objects.', lineno=19, col_offset=4), lineno=19, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=21, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'lock', Store(), lineno=23, col_offset=8)], Call(Attribute(Name('_thread', Load(), lineno=23, col_offset=20), 'allocate_lock', Load(), lineno=23, col_offset=20), [], [], None, None, lineno=23, col_offset=20), lineno=23, col_offset=8)], [], lineno=21, col_offset=4), FunctionDef('test_initlock', arguments([Name('self', Param(), lineno=25, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=27, col_offset=8), 'assertTrue', Load(), lineno=27, col_offset=8), [UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=27, col_offset=28), 'lock', Load(), lineno=27, col_offset=28), 'locked', Load(), lineno=27, col_offset=28), [], [], None, None, lineno=27, col_offset=28), lineno=27, col_offset=24), Str('Lock object is not initialized unlocked.', lineno=28, col_offset=24)], [], None, None, lineno=27, col_offset=8), lineno=27, col_offset=8)], [], lineno=25, col_offset=4), FunctionDef('test_release', arguments([Name('self', Param(), lineno=30, col_offset=21)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=32, col_offset=8), 'lock', Load(), lineno=32, col_offset=8), 'acquire', Load(), lineno=32, col_offset=8), [], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=33, col_offset=8), 'lock', Load(), lineno=33, col_offset=8), 'release', Load(), lineno=33, col_offset=8), [], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=34, col_offset=8), 'assertTrue', Load(), lineno=34, col_offset=8), [UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=34, col_offset=28), 'lock', Load(), lineno=34, col_offset=28), 'locked', Load(), lineno=34, col_offset=28), [], [], None, None, lineno=34, col_offset=28), lineno=34, col_offset=24), Str('Lock object did not release properly.', lineno=35, col_offset=24)], [], None, None, lineno=34, col_offset=8), lineno=34, col_offset=8)], [], lineno=30, col_offset=4), FunctionDef('test_improper_release', arguments([Name('self', Param(), lineno=37, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=8), 'assertRaises', Load(), lineno=39, col_offset=8), [Attribute(Name('_thread', Load(), lineno=39, col_offset=26), 'error', Load(), lineno=39, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=39, col_offset=41), 'lock', Load(), lineno=39, col_offset=41), 'release', Load(), lineno=39, col_offset=41)], [], None, None, lineno=39, col_offset=8), lineno=39, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('test_cond_acquire_success', arguments([Name('self', Param(), lineno=41, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=8), 'assertTrue', Load(), lineno=43, col_offset=8), [Call(Attribute(Attribute(Name('self', Load(), lineno=43, col_offset=24), 'lock', Load(), lineno=43, col_offset=24), 'acquire', Load(), lineno=43, col_offset=24), [Num(0, lineno=43, col_offset=42)], [], None, None, lineno=43, col_offset=24), Str('Conditional acquiring of the lock failed.', lineno=44, col_offset=24)], [], None, None, lineno=43, col_offset=8), lineno=43, col_offset=8)], [], lineno=41, col_offset=4), FunctionDef('test_cond_acquire_fail', arguments([Name('self', Param(), lineno=46, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'lock', Load(), lineno=48, col_offset=8), 'acquire', Load(), lineno=48, col_offset=8), [Num(0, lineno=48, col_offset=26)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=8), 'assertTrue', Load(), lineno=49, col_offset=8), [UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=49, col_offset=28), 'lock', Load(), lineno=49, col_offset=28), 'acquire', Load(), lineno=49, col_offset=28), [Num(0, lineno=49, col_offset=46)], [], None, None, lineno=49, col_offset=28), lineno=49, col_offset=24), Str('Conditional acquiring of a locked lock incorrectly succeeded.', lineno=50, col_offset=24)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], [], lineno=46, col_offset=4), FunctionDef('test_uncond_acquire_success', arguments([Name('self', Param(), lineno=53, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=55, col_offset=8), 'lock', Load(), lineno=55, col_offset=8), 'acquire', Load(), lineno=55, col_offset=8), [], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=8), 'assertTrue', Load(), lineno=56, col_offset=8), [Call(Attribute(Attribute(Name('self', Load(), lineno=56, col_offset=24), 'lock', Load(), lineno=56, col_offset=24), 'locked', Load(), lineno=56, col_offset=24), [], [], None, None, lineno=56, col_offset=24), Str('Uncondional locking failed.', lineno=57, col_offset=24)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('test_uncond_acquire_return_val', arguments([Name('self', Param(), lineno=59, col_offset=39)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertTrue', Load(), lineno=61, col_offset=8), [Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=61, col_offset=24), 'lock', Load(), lineno=61, col_offset=24), 'acquire', Load(), lineno=61, col_offset=24), [Num(1, lineno=61, col_offset=42)], [], None, None, lineno=61, col_offset=24), [Is()], [Name('True', Load(), lineno=61, col_offset=48)], lineno=61, col_offset=24), Str('Unconditional locking did not return True.', lineno=62, col_offset=24)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertTrue', Load(), lineno=63, col_offset=8), [Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=63, col_offset=24), 'lock', Load(), lineno=63, col_offset=24), 'acquire', Load(), lineno=63, col_offset=24), [], [], None, None, lineno=63, col_offset=24), [Is()], [Name('True', Load(), lineno=63, col_offset=47)], lineno=63, col_offset=24)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8)], [], lineno=59, col_offset=4), FunctionDef('test_uncond_acquire_blocking', arguments([Name('self', Param(), lineno=65, col_offset=37)], None, None, []), [FunctionDef('delay_unlock', arguments([Name('to_unlock', Param(), lineno=67, col_offset=25), Name('delay', Param(), lineno=67, col_offset=36)], None, None, []), [Expr(Str('Hold on to lock for a set amount of time before unlocking.', lineno=68, col_offset=12), lineno=68, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=69, col_offset=12), 'sleep', Load(), lineno=69, col_offset=12), [Name('delay', Load(), lineno=69, col_offset=23)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12), Expr(Call(Attribute(Name('to_unlock', Load(), lineno=70, col_offset=12), 'release', Load(), lineno=70, col_offset=12), [], [], None, None, lineno=70, col_offset=12), lineno=70, col_offset=12)], [], lineno=67, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=72, col_offset=8), 'lock', Load(), lineno=72, col_offset=8), 'acquire', Load(), lineno=72, col_offset=8), [], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Assign([Name('start_time', Store(), lineno=73, col_offset=8)], Call(Name('int', Load(), lineno=73, col_offset=21), [Call(Attribute(Name('time', Load(), lineno=73, col_offset=25), 'time', Load(), lineno=73, col_offset=25), [], [], None, None, lineno=73, col_offset=25)], [], None, None, lineno=73, col_offset=21), lineno=73, col_offset=8), Expr(Call(Attribute(Name('_thread', Load(), lineno=74, col_offset=8), 'start_new_thread', Load(), lineno=74, col_offset=8), [Name('delay_unlock', Load(), lineno=74, col_offset=33), Tuple([Attribute(Name('self', Load(), lineno=74, col_offset=47), 'lock', Load(), lineno=74, col_offset=47), Name('DELAY', Load(), lineno=74, col_offset=58)], Load(), lineno=74, col_offset=47)], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=75, col_offset=11), 'verbose', Load(), lineno=75, col_offset=11), [Print(None, [], True, lineno=76, col_offset=12), Print(None, [BinOp(Str('*** Waiting for thread to release the lock (approx. %s sec.) ***', lineno=77, col_offset=18), Mod(), Name('DELAY', Load(), lineno=78, col_offset=38), lineno=77, col_offset=18)], True, lineno=77, col_offset=12)], [], lineno=75, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=79, col_offset=8), 'lock', Load(), lineno=79, col_offset=8), 'acquire', Load(), lineno=79, col_offset=8), [], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), Assign([Name('end_time', Store(), lineno=80, col_offset=8)], Call(Name('int', Load(), lineno=80, col_offset=19), [Call(Attribute(Name('time', Load(), lineno=80, col_offset=23), 'time', Load(), lineno=80, col_offset=23), [], [], None, None, lineno=80, col_offset=23)], [], None, None, lineno=80, col_offset=19), lineno=80, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=81, col_offset=11), 'verbose', Load(), lineno=81, col_offset=11), [Print(None, [Str('done', lineno=82, col_offset=18)], True, lineno=82, col_offset=12)], [], lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=8), 'assertTrue', Load(), lineno=83, col_offset=8), [Compare(BinOp(Name('end_time', Load(), lineno=83, col_offset=25), Sub(), Name('start_time', Load(), lineno=83, col_offset=36), lineno=83, col_offset=25), [GtE()], [Name('DELAY', Load(), lineno=83, col_offset=51)], lineno=83, col_offset=24), Str('Blocking by unconditional acquiring failed.', lineno=84, col_offset=24)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [], lineno=65, col_offset=4)], [], lineno=18, col_offset=0), ClassDef('MiscTests', [Attribute(Name('unittest', Load(), lineno=86, col_offset=16), 'TestCase', Load(), lineno=86, col_offset=16)], [Expr(Str('Miscellaneous tests.', lineno=87, col_offset=4), lineno=87, col_offset=4), FunctionDef('test_exit', arguments([Name('self', Param(), lineno=89, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=8), 'assertRaises', Load(), lineno=91, col_offset=8), [Name('SystemExit', Load(), lineno=91, col_offset=26), Attribute(Name('_thread', Load(), lineno=91, col_offset=38), 'exit', Load(), lineno=91, col_offset=38)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('test_ident', arguments([Name('self', Param(), lineno=93, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertIsInstance', Load(), lineno=95, col_offset=8), [Call(Attribute(Name('_thread', Load(), lineno=95, col_offset=30), 'get_ident', Load(), lineno=95, col_offset=30), [], [], None, None, lineno=95, col_offset=30), Name('int', Load(), lineno=95, col_offset=51), Str('_thread.get_ident() returned a non-integer', lineno=96, col_offset=30)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'assertTrue', Load(), lineno=97, col_offset=8), [Compare(Call(Attribute(Name('_thread', Load(), lineno=97, col_offset=24), 'get_ident', Load(), lineno=97, col_offset=24), [], [], None, None, lineno=97, col_offset=24), [NotEq()], [Num(0, lineno=97, col_offset=47)], lineno=97, col_offset=24), Str('_thread.get_ident() returned 0', lineno=98, col_offset=24)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('test_LockType', arguments([Name('self', Param(), lineno=100, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=102, col_offset=8), 'assertIsInstance', Load(), lineno=102, col_offset=8), [Call(Attribute(Name('_thread', Load(), lineno=102, col_offset=30), 'allocate_lock', Load(), lineno=102, col_offset=30), [], [], None, None, lineno=102, col_offset=30), Attribute(Name('_thread', Load(), lineno=102, col_offset=55), 'LockType', Load(), lineno=102, col_offset=55), Str('_thread.LockType is not an instance of what is returned by _thread.allocate_lock()', lineno=103, col_offset=30)], [], None, None, lineno=102, col_offset=8), lineno=102, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('test_interrupt_main', arguments([Name('self', Param(), lineno=106, col_offset=28)], None, None, []), [FunctionDef('call_interrupt', arguments([], None, None, []), [Expr(Call(Attribute(Name('_thread', Load(), lineno=110, col_offset=12), 'interrupt_main', Load(), lineno=110, col_offset=12), [], [], None, None, lineno=110, col_offset=12), lineno=110, col_offset=12)], [], lineno=109, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=111, col_offset=8), 'assertRaises', Load(), lineno=111, col_offset=8), [Name('KeyboardInterrupt', Load(), lineno=111, col_offset=26), Attribute(Name('_thread', Load(), lineno=111, col_offset=45), 'start_new_thread', Load(), lineno=111, col_offset=45), Name('call_interrupt', Load(), lineno=112, col_offset=30), Call(Name('tuple', Load(), lineno=112, col_offset=46), [], [], None, None, lineno=112, col_offset=46)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('test_interrupt_in_main', arguments([Name('self', Param(), lineno=114, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=117, col_offset=8), 'assertRaises', Load(), lineno=117, col_offset=8), [Name('KeyboardInterrupt', Load(), lineno=117, col_offset=26), Attribute(Name('_thread', Load(), lineno=117, col_offset=45), 'interrupt_main', Load(), lineno=117, col_offset=45)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8)], [], lineno=114, col_offset=4)], [], lineno=86, col_offset=0), ClassDef('ThreadTests', [Attribute(Name('unittest', Load(), lineno=119, col_offset=18), 'TestCase', Load(), lineno=119, col_offset=18)], [Expr(Str('Test thread creation.', lineno=120, col_offset=4), lineno=120, col_offset=4), FunctionDef('test_arg_passing', arguments([Name('self', Param(), lineno=122, col_offset=25)], None, None, []), [FunctionDef('arg_tester', arguments([Name('queue', Param(), lineno=124, col_offset=23), Name('arg1', Param(), lineno=124, col_offset=30), Name('arg2', Param(), lineno=124, col_offset=42)], None, None, [Name('False', Load(), lineno=124, col_offset=35), Name('False', Load(), lineno=124, col_offset=47)]), [Expr(Str('Use to test _thread.start_new_thread() passes args properly.', lineno=125, col_offset=12), lineno=125, col_offset=12), Expr(Call(Attribute(Name('queue', Load(), lineno=126, col_offset=12), 'put', Load(), lineno=126, col_offset=12), [Tuple([Name('arg1', Load(), lineno=126, col_offset=23), Name('arg2', Load(), lineno=126, col_offset=29)], Load(), lineno=126, col_offset=23)], [], None, None, lineno=126, col_offset=12), lineno=126, col_offset=12)], [], lineno=124, col_offset=8), Assign([Name('testing_queue', Store(), lineno=128, col_offset=8)], Call(Attribute(Name('Queue', Load(), lineno=128, col_offset=24), 'Queue', Load(), lineno=128, col_offset=24), [Num(1, lineno=128, col_offset=36)], [], None, None, lineno=128, col_offset=24), lineno=128, col_offset=8), Expr(Call(Attribute(Name('_thread', Load(), lineno=129, col_offset=8), 'start_new_thread', Load(), lineno=129, col_offset=8), [Name('arg_tester', Load(), lineno=129, col_offset=33), Tuple([Name('testing_queue', Load(), lineno=129, col_offset=46), Name('True', Load(), lineno=129, col_offset=61), Name('True', Load(), lineno=129, col_offset=67)], Load(), lineno=129, col_offset=46)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8), Assign([Name('result', Store(), lineno=130, col_offset=8)], Call(Attribute(Name('testing_queue', Load(), lineno=130, col_offset=17), 'get', Load(), lineno=130, col_offset=17), [], [], None, None, lineno=130, col_offset=17), lineno=130, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=131, col_offset=8), 'assertTrue', Load(), lineno=131, col_offset=8), [BoolOp(And(), [Subscript(Name('result', Load(), lineno=131, col_offset=24), Index(Num(0, lineno=131, col_offset=31)), Load(), lineno=131, col_offset=24), Subscript(Name('result', Load(), lineno=131, col_offset=38), Index(Num(1, lineno=131, col_offset=45)), Load(), lineno=131, col_offset=38)], lineno=131, col_offset=24), Str('Argument passing for thread creation using tuple failed', lineno=132, col_offset=24)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8), Expr(Call(Attribute(Name('_thread', Load(), lineno=133, col_offset=8), 'start_new_thread', Load(), lineno=133, col_offset=8), [Name('arg_tester', Load(), lineno=133, col_offset=33), Call(Name('tuple', Load(), lineno=133, col_offset=45), [], [], None, None, lineno=133, col_offset=45), Dict([Str('queue', lineno=133, col_offset=55), Str('arg1', lineno=134, col_offset=55), Str('arg2', lineno=134, col_offset=68)], [Name('testing_queue', Load(), lineno=133, col_offset=63), Name('True', Load(), lineno=134, col_offset=62), Name('True', Load(), lineno=134, col_offset=75)], lineno=133, col_offset=54)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Assign([Name('result', Store(), lineno=135, col_offset=8)], Call(Attribute(Name('testing_queue', Load(), lineno=135, col_offset=17), 'get', Load(), lineno=135, col_offset=17), [], [], None, None, lineno=135, col_offset=17), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertTrue', Load(), lineno=136, col_offset=8), [BoolOp(And(), [Subscript(Name('result', Load(), lineno=136, col_offset=24), Index(Num(0, lineno=136, col_offset=31)), Load(), lineno=136, col_offset=24), Subscript(Name('result', Load(), lineno=136, col_offset=38), Index(Num(1, lineno=136, col_offset=45)), Load(), lineno=136, col_offset=38)], lineno=136, col_offset=24), Str('Argument passing for thread creation using kwargs failed', lineno=137, col_offset=24)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), Expr(Call(Attribute(Name('_thread', Load(), lineno=138, col_offset=8), 'start_new_thread', Load(), lineno=138, col_offset=8), [Name('arg_tester', Load(), lineno=138, col_offset=33), Tuple([Name('testing_queue', Load(), lineno=138, col_offset=46), Name('True', Load(), lineno=138, col_offset=61)], Load(), lineno=138, col_offset=46), Dict([Str('arg2', lineno=138, col_offset=69)], [Name('True', Load(), lineno=138, col_offset=76)], lineno=138, col_offset=68)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Assign([Name('result', Store(), lineno=139, col_offset=8)], Call(Attribute(Name('testing_queue', Load(), lineno=139, col_offset=17), 'get', Load(), lineno=139, col_offset=17), [], [], None, None, lineno=139, col_offset=17), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=140, col_offset=8), 'assertTrue', Load(), lineno=140, col_offset=8), [BoolOp(And(), [Subscript(Name('result', Load(), lineno=140, col_offset=24), Index(Num(0, lineno=140, col_offset=31)), Load(), lineno=140, col_offset=24), Subscript(Name('result', Load(), lineno=140, col_offset=38), Index(Num(1, lineno=140, col_offset=45)), Load(), lineno=140, col_offset=38)], lineno=140, col_offset=24), Str('Argument passing for thread creation using both tuple and kwargs failed', lineno=141, col_offset=24)], [], None, None, lineno=140, col_offset=8), lineno=140, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('test_multi_creation', arguments([Name('self', Param(), lineno=144, col_offset=28)], None, None, []), [FunctionDef('queue_mark', arguments([Name('queue', Param(), lineno=146, col_offset=23), Name('delay', Param(), lineno=146, col_offset=30)], None, None, []), [Expr(Str('Wait for ``delay`` seconds and then put something into ``queue``', lineno=147, col_offset=12), lineno=147, col_offset=12), Expr(Call(Attribute(Name('time', Load(), lineno=148, col_offset=12), 'sleep', Load(), lineno=148, col_offset=12), [Name('delay', Load(), lineno=148, col_offset=23)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12), Expr(Call(Attribute(Name('queue', Load(), lineno=149, col_offset=12), 'put', Load(), lineno=149, col_offset=12), [Call(Attribute(Name('_thread', Load(), lineno=149, col_offset=22), 'get_ident', Load(), lineno=149, col_offset=22), [], [], None, None, lineno=149, col_offset=22)], [], None, None, lineno=149, col_offset=12), lineno=149, col_offset=12)], [], lineno=146, col_offset=8), Assign([Name('thread_count', Store(), lineno=151, col_offset=8)], Num(5, lineno=151, col_offset=23), lineno=151, col_offset=8), Assign([Name('testing_queue', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('Queue', Load(), lineno=152, col_offset=24), 'Queue', Load(), lineno=152, col_offset=24), [Name('thread_count', Load(), lineno=152, col_offset=36)], [], None, None, lineno=152, col_offset=24), lineno=152, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=153, col_offset=11), 'verbose', Load(), lineno=153, col_offset=11), [Print(None, [], True, lineno=154, col_offset=12), Print(None, [BinOp(Str('*** Testing multiple thread creation (will take approx. %s to %s sec.) ***', lineno=155, col_offset=18), Mod(), Tuple([Name('DELAY', Load(), lineno=156, col_offset=55), Name('thread_count', Load(), lineno=156, col_offset=62)], Load(), lineno=156, col_offset=55), lineno=155, col_offset=18)], True, lineno=155, col_offset=12)], [], lineno=153, col_offset=8), For(Name('count', Store(), lineno=157, col_offset=12), Call(Name('xrange', Load(), lineno=157, col_offset=21), [Name('thread_count', Load(), lineno=157, col_offset=28)], [], None, None, lineno=157, col_offset=21), [If(Name('DELAY', Load(), lineno=158, col_offset=15), [Assign([Name('local_delay', Store(), lineno=159, col_offset=16)], Call(Name('round', Load(), lineno=159, col_offset=30), [Call(Attribute(Name('random', Load(), lineno=159, col_offset=36), 'random', Load(), lineno=159, col_offset=36), [], [], None, None, lineno=159, col_offset=36), Num(1, lineno=159, col_offset=53)], [], None, None, lineno=159, col_offset=30), lineno=159, col_offset=16)], [Assign([Name('local_delay', Store(), lineno=161, col_offset=16)], Num(0, lineno=161, col_offset=30), lineno=161, col_offset=16)], lineno=158, col_offset=12), Expr(Call(Attribute(Name('_thread', Load(), lineno=162, col_offset=12), 'start_new_thread', Load(), lineno=162, col_offset=12), [Name('queue_mark', Load(), lineno=162, col_offset=37), Tuple([Name('testing_queue', Load(), lineno=163, col_offset=38), Name('local_delay', Load(), lineno=163, col_offset=53)], Load(), lineno=163, col_offset=38)], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=12)], [], lineno=157, col_offset=8), Expr(Call(Attribute(Name('time', Load(), lineno=164, col_offset=8), 'sleep', Load(), lineno=164, col_offset=8), [Name('DELAY', Load(), lineno=164, col_offset=19)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8), If(Attribute(Name('test_support', Load(), lineno=165, col_offset=11), 'verbose', Load(), lineno=165, col_offset=11), [Print(None, [Str('done', lineno=166, col_offset=18)], True, lineno=166, col_offset=12)], [], lineno=165, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=167, col_offset=8), 'assertTrue', Load(), lineno=167, col_offset=8), [Compare(Call(Attribute(Name('testing_queue', Load(), lineno=167, col_offset=24), 'qsize', Load(), lineno=167, col_offset=24), [], [], None, None, lineno=167, col_offset=24), [Eq()], [Name('thread_count', Load(), lineno=167, col_offset=49)], lineno=167, col_offset=24), BinOp(Str('Not all %s threads executed properly after %s sec.', lineno=168, col_offset=24), Mod(), Tuple([Name('thread_count', Load(), lineno=169, col_offset=25), Name('DELAY', Load(), lineno=169, col_offset=39)], Load(), lineno=169, col_offset=25), lineno=168, col_offset=24)], [], None, None, lineno=167, col_offset=8), lineno=167, col_offset=8)], [], lineno=144, col_offset=4)], [], lineno=119, col_offset=0), FunctionDef('test_main', arguments([Name('imported_module', Param(), lineno=171, col_offset=14)], None, None, [Name('None', Load(), lineno=171, col_offset=30)]), [Global(['_thread', 'DELAY'], lineno=172, col_offset=4), If(Name('imported_module', Load(), lineno=173, col_offset=7), [Assign([Name('_thread', Store(), lineno=174, col_offset=8)], Name('imported_module', Load(), lineno=174, col_offset=18), lineno=174, col_offset=8), Assign([Name('DELAY', Store(), lineno=175, col_offset=8)], Num(2, lineno=175, col_offset=16), lineno=175, col_offset=8)], [], lineno=173, col_offset=4), If(Attribute(Name('test_support', Load(), lineno=176, col_offset=7), 'verbose', Load(), lineno=176, col_offset=7), [Print(None, [], True, lineno=177, col_offset=8), Print(None, [BinOp(Str('*** Using %s as _thread module ***', lineno=178, col_offset=14), Mod(), Name('_thread', Load(), lineno=178, col_offset=53), lineno=178, col_offset=14)], True, lineno=178, col_offset=8)], [], lineno=176, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=179, col_offset=4), 'run_unittest', Load(), lineno=179, col_offset=4), [Name('LockTests', Load(), lineno=179, col_offset=30), Name('MiscTests', Load(), lineno=179, col_offset=41), Name('ThreadTests', Load(), lineno=179, col_offset=52)], [], None, None, lineno=179, col_offset=4), lineno=179, col_offset=4)], [], lineno=171, col_offset=0), If(Compare(Name('__name__', Load(), lineno=181, col_offset=3), [Eq()], [Str('__main__', lineno=181, col_offset=15)], lineno=181, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=182, col_offset=4), [], [], None, None, lineno=182, col_offset=4), lineno=182, col_offset=4)], [], lineno=181, col_offset=0)])
