Module([Expr(Str('Simple XML-RPC Server.\n\nThis module can be used to create simple XML-RPC servers\nby creating a server and either installing functions, a\nclass instance, or by extending the SimpleXMLRPCServer\nclass.\n\nIt can also be used to handle XML-RPC requests in a CGI\nenvironment using CGIXMLRPCRequestHandler.\n\nA list of possible usage patterns follows:\n\n1. Install functions:\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, \'add\')\nserver.serve_forever()\n\n2. Install an instance:\n\nclass MyFuncs:\n    def __init__(self):\n        # make all of the string functions available through\n        # string.func_name\n        import string\n        self.string = string\n    def _listMethods(self):\n        # implement this method so that system.listMethods\n        # knows to advertise the strings methods\n        return list_public_methods(self) +                 [\'string.\' + method for method in list_public_methods(self.string)]\n    def pow(self, x, y): return pow(x, y)\n    def add(self, x, y) : return x + y\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_introspection_functions()\nserver.register_instance(MyFuncs())\nserver.serve_forever()\n\n3. Install an instance with custom dispatch method:\n\nclass Math:\n    def _listMethods(self):\n        # this method must be present for system.listMethods\n        # to work\n        return [\'add\', \'pow\']\n    def _methodHelp(self, method):\n        # this method must be present for system.methodHelp\n        # to work\n        if method == \'add\':\n            return "add(2,3) => 5"\n        elif method == \'pow\':\n            return "pow(x, y[, z]) => number"\n        else:\n            # By convention, return empty\n            # string if no help is available\n            return ""\n    def _dispatch(self, method, params):\n        if method == \'pow\':\n            return pow(*params)\n        elif method == \'add\':\n            return params[0] + params[1]\n        else:\n            raise \'bad method\'\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_introspection_functions()\nserver.register_instance(Math())\nserver.serve_forever()\n\n4. Subclass SimpleXMLRPCServer:\n\nclass MathServer(SimpleXMLRPCServer):\n    def _dispatch(self, method, params):\n        try:\n            # We are forcing the \'export_\' prefix on methods that are\n            # callable through XML-RPC to prevent potential security\n            # problems\n            func = getattr(self, \'export_\' + method)\n        except AttributeError:\n            raise Exception(\'method "%s" is not supported\' % method)\n        else:\n            return func(*params)\n\n    def export_add(self, x, y):\n        return x + y\n\nserver = MathServer(("localhost", 8000))\nserver.serve_forever()\n\n5. CGI script:\n\nserver = CGIXMLRPCRequestHandler()\nserver.register_function(pow)\nserver.handle_request()\n', lineno=97, col_offset=-1), lineno=97, col_offset=-1), Import([alias('xmlrpclib', None)], lineno=102, col_offset=0), ImportFrom('xmlrpclib', [alias('Fault', None)], 0, lineno=103, col_offset=0), Import([alias('SocketServer', None)], lineno=104, col_offset=0), Import([alias('BaseHTTPServer', None)], lineno=105, col_offset=0), Import([alias('sys', None)], lineno=106, col_offset=0), Import([alias('os', None)], lineno=107, col_offset=0), Import([alias('traceback', None)], lineno=108, col_offset=0), Import([alias('re', None)], lineno=109, col_offset=0), TryExcept([Import([alias('fcntl', None)], lineno=111, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=112, col_offset=7), None, [Assign([Name('fcntl', Store(), lineno=113, col_offset=4)], Name('None', Load(), lineno=113, col_offset=12), lineno=113, col_offset=4)], lineno=112, col_offset=0)], [], lineno=110, col_offset=0), FunctionDef('resolve_dotted_attribute', arguments([Name('obj', Param(), lineno=115, col_offset=29), Name('attr', Param(), lineno=115, col_offset=34), Name('allow_dotted_names', Param(), lineno=115, col_offset=40)], None, None, [Name('True', Load(), lineno=115, col_offset=59)]), [Expr(Str("resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d\n\n    Resolves a dotted attribute name to an object.  Raises\n    an AttributeError if any attribute in the chain starts with a '_'.\n\n    If the optional allow_dotted_names argument is false, dots are not\n    supported and this function operates similar to getattr(obj, attr).\n    ", lineno=123, col_offset=-1), lineno=123, col_offset=-1), If(Name('allow_dotted_names', Load(), lineno=125, col_offset=7), [Assign([Name('attrs', Store(), lineno=126, col_offset=8)], Call(Attribute(Name('attr', Load(), lineno=126, col_offset=16), 'split', Load(), lineno=126, col_offset=16), [Str('.', lineno=126, col_offset=27)], [], None, None, lineno=126, col_offset=16), lineno=126, col_offset=8)], [Assign([Name('attrs', Store(), lineno=128, col_offset=8)], List([Name('attr', Load(), lineno=128, col_offset=17)], Load(), lineno=128, col_offset=16), lineno=128, col_offset=8)], lineno=125, col_offset=4), For(Name('i', Store(), lineno=130, col_offset=8), Name('attrs', Load(), lineno=130, col_offset=13), [If(Call(Attribute(Name('i', Load(), lineno=131, col_offset=11), 'startswith', Load(), lineno=131, col_offset=11), [Str('_', lineno=131, col_offset=24)], [], None, None, lineno=131, col_offset=11), [Raise(Call(Name('AttributeError', Load(), lineno=132, col_offset=18), [BinOp(Str('attempt to access private attribute "%s"', lineno=133, col_offset=16), Mod(), Name('i', Load(), lineno=133, col_offset=61), lineno=133, col_offset=16)], [], None, None, lineno=132, col_offset=18), None, None, lineno=132, col_offset=12)], [Assign([Name('obj', Store(), lineno=136, col_offset=12)], Call(Name('getattr', Load(), lineno=136, col_offset=18), [Name('obj', Load(), lineno=136, col_offset=26), Name('i', Load(), lineno=136, col_offset=30)], [], None, None, lineno=136, col_offset=18), lineno=136, col_offset=12)], lineno=131, col_offset=8)], [], lineno=130, col_offset=4), Return(Name('obj', Load(), lineno=137, col_offset=11), lineno=137, col_offset=4)], [], lineno=115, col_offset=0), FunctionDef('list_public_methods', arguments([Name('obj', Param(), lineno=139, col_offset=24)], None, None, []), [Expr(Str('Returns a list of attribute strings, found in the specified\n    object, which represent callable attributes', lineno=141, col_offset=-1), lineno=141, col_offset=-1), Return(ListComp(Name('member', Load(), lineno=143, col_offset=12), [comprehension(Name('member', Store(), lineno=143, col_offset=23), Call(Name('dir', Load(), lineno=143, col_offset=33), [Name('obj', Load(), lineno=143, col_offset=37)], [], None, None, lineno=143, col_offset=33), [BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('member', Load(), lineno=144, col_offset=23), 'startswith', Load(), lineno=144, col_offset=23), [Str('_', lineno=144, col_offset=41)], [], None, None, lineno=144, col_offset=23), lineno=144, col_offset=19), Call(Name('hasattr', Load(), lineno=145, col_offset=20), [Call(Name('getattr', Load(), lineno=145, col_offset=28), [Name('obj', Load(), lineno=145, col_offset=36), Name('member', Load(), lineno=145, col_offset=41)], [], None, None, lineno=145, col_offset=28), Str('__call__', lineno=145, col_offset=50)], [], None, None, lineno=145, col_offset=20)], lineno=144, col_offset=19)])], lineno=143, col_offset=12), lineno=143, col_offset=4)], [], lineno=139, col_offset=0), FunctionDef('remove_duplicates', arguments([Name('lst', Param(), lineno=147, col_offset=22)], None, None, []), [Expr(Str('remove_duplicates([2,2,2,1,3,3]) => [3,1,2]\n\n    Returns a copy of a list without duplicates. Every list\n    item must be hashable and the order of the items in the\n    resulting list is not defined.\n    ', lineno=153, col_offset=-1), lineno=153, col_offset=-1), Assign([Name('u', Store(), lineno=154, col_offset=4)], Dict([], [], lineno=154, col_offset=8), lineno=154, col_offset=4), For(Name('x', Store(), lineno=155, col_offset=8), Name('lst', Load(), lineno=155, col_offset=13), [Assign([Subscript(Name('u', Load(), lineno=156, col_offset=8), Index(Name('x', Load(), lineno=156, col_offset=10)), Store(), lineno=156, col_offset=8)], Num(1, lineno=156, col_offset=15), lineno=156, col_offset=8)], [], lineno=155, col_offset=4), Return(Call(Attribute(Name('u', Load(), lineno=158, col_offset=11), 'keys', Load(), lineno=158, col_offset=11), [], [], None, None, lineno=158, col_offset=11), lineno=158, col_offset=4)], [], lineno=147, col_offset=0), ClassDef('SimpleXMLRPCDispatcher', [], [Expr(Str("Mix-in class that dispatches XML-RPC requests.\n\n    This class is used to register XML-RPC method handlers\n    and then to dispatch them. This class doesn't need to be\n    instanced directly when used by SimpleXMLRPCServer but it\n    can be instanced when used by the MultiPathXMLRPCServer.\n    ", lineno=167, col_offset=-1), lineno=167, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=169, col_offset=17), Name('allow_none', Param(), lineno=169, col_offset=23), Name('encoding', Param(), lineno=169, col_offset=41)], None, None, [Name('False', Load(), lineno=169, col_offset=34), Name('None', Load(), lineno=169, col_offset=50)]), [Assign([Attribute(Name('self', Load(), lineno=170, col_offset=8), 'funcs', Store(), lineno=170, col_offset=8)], Dict([], [], lineno=170, col_offset=21), lineno=170, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=171, col_offset=8), 'instance', Store(), lineno=171, col_offset=8)], Name('None', Load(), lineno=171, col_offset=24), lineno=171, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=172, col_offset=8), 'allow_none', Store(), lineno=172, col_offset=8)], Name('allow_none', Load(), lineno=172, col_offset=26), lineno=172, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=173, col_offset=8), 'encoding', Store(), lineno=173, col_offset=8)], Name('encoding', Load(), lineno=173, col_offset=24), lineno=173, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('register_instance', arguments([Name('self', Param(), lineno=175, col_offset=26), Name('instance', Param(), lineno=175, col_offset=32), Name('allow_dotted_names', Param(), lineno=175, col_offset=42)], None, None, [Name('False', Load(), lineno=175, col_offset=61)]), [Expr(Str("Registers an instance to respond to XML-RPC requests.\n\n        Only one instance can be installed at a time.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called. Methods beginning with an '_'\n        are considered private and will not be called by\n        SimpleXMLRPCServer.\n\n        If a registered function matches a XML-RPC request, then it\n        will be called instead of the registered instance.\n\n        If the optional allow_dotted_names argument is true and the\n        instance does not have a _dispatch method, method names\n        containing dots are supported and resolved, as long as none of\n        the name segments start with an '_'.\n\n            *** SECURITY WARNING: ***\n\n            Enabling the allow_dotted_names options allows intruders\n            to access your module's global variables and may allow\n            intruders to execute arbitrary code on your machine.  Only\n            use this option on a secure, closed network.\n\n        ", lineno=206, col_offset=-1), lineno=206, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=208, col_offset=8), 'instance', Store(), lineno=208, col_offset=8)], Name('instance', Load(), lineno=208, col_offset=24), lineno=208, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=209, col_offset=8), 'allow_dotted_names', Store(), lineno=209, col_offset=8)], Name('allow_dotted_names', Load(), lineno=209, col_offset=34), lineno=209, col_offset=8)], [], lineno=175, col_offset=4), FunctionDef('register_function', arguments([Name('self', Param(), lineno=211, col_offset=26), Name('function', Param(), lineno=211, col_offset=32), Name('name', Param(), lineno=211, col_offset=42)], None, None, [Name('None', Load(), lineno=211, col_offset=49)]), [Expr(Str('Registers a function to respond to XML-RPC requests.\n\n        The optional name argument can be used to set a Unicode name\n        for the function.\n        ', lineno=216, col_offset=-1), lineno=216, col_offset=-1), If(Compare(Name('name', Load(), lineno=218, col_offset=11), [Is()], [Name('None', Load(), lineno=218, col_offset=19)], lineno=218, col_offset=11), [Assign([Name('name', Store(), lineno=219, col_offset=12)], Attribute(Name('function', Load(), lineno=219, col_offset=19), '__name__', Load(), lineno=219, col_offset=19), lineno=219, col_offset=12)], [], lineno=218, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=220, col_offset=8), 'funcs', Load(), lineno=220, col_offset=8), Index(Name('name', Load(), lineno=220, col_offset=19)), Store(), lineno=220, col_offset=8)], Name('function', Load(), lineno=220, col_offset=27), lineno=220, col_offset=8)], [], lineno=211, col_offset=4), FunctionDef('register_introspection_functions', arguments([Name('self', Param(), lineno=222, col_offset=41)], None, None, []), [Expr(Str('Registers the XML-RPC introspection methods in the system\n        namespace.\n\n        see http://xmlrpc.usefulinc.com/doc/reserved.html\n        ', lineno=227, col_offset=-1), lineno=227, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=229, col_offset=8), 'funcs', Load(), lineno=229, col_offset=8), 'update', Load(), lineno=229, col_offset=8), [Dict([Str('system.listMethods', lineno=229, col_offset=27), Str('system.methodSignature', lineno=230, col_offset=22), Str('system.methodHelp', lineno=231, col_offset=22)], [Attribute(Name('self', Load(), lineno=229, col_offset=50), 'system_listMethods', Load(), lineno=229, col_offset=50), Attribute(Name('self', Load(), lineno=230, col_offset=49), 'system_methodSignature', Load(), lineno=230, col_offset=49), Attribute(Name('self', Load(), lineno=231, col_offset=44), 'system_methodHelp', Load(), lineno=231, col_offset=44)], lineno=229, col_offset=26)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8)], [], lineno=222, col_offset=4), FunctionDef('register_multicall_functions', arguments([Name('self', Param(), lineno=233, col_offset=37)], None, None, []), [Expr(Str('Registers the XML-RPC multicall method in the system\n        namespace.\n\n        see http://www.xmlrpc.com/discuss/msgReader$1208', lineno=237, col_offset=-1), lineno=237, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=239, col_offset=8), 'funcs', Load(), lineno=239, col_offset=8), 'update', Load(), lineno=239, col_offset=8), [Dict([Str('system.multicall', lineno=239, col_offset=27)], [Attribute(Name('self', Load(), lineno=239, col_offset=48), 'system_multicall', Load(), lineno=239, col_offset=48)], lineno=239, col_offset=26)], [], None, None, lineno=239, col_offset=8), lineno=239, col_offset=8)], [], lineno=233, col_offset=4), FunctionDef('_marshaled_dispatch', arguments([Name('self', Param(), lineno=241, col_offset=28), Name('data', Param(), lineno=241, col_offset=34), Name('dispatch_method', Param(), lineno=241, col_offset=40), Name('path', Param(), lineno=241, col_offset=64)], None, None, [Name('None', Load(), lineno=241, col_offset=58), Name('None', Load(), lineno=241, col_offset=71)]), [Expr(Str('Dispatches an XML-RPC method from marshalled (XML) data.\n\n        XML-RPC methods are dispatched from the marshalled (XML) data\n        using the _dispatch method and the result is returned as\n        marshalled data. For backwards compatibility, a dispatch\n        function can be provided as an argument (see comment in\n        SimpleXMLRPCRequestHandler.do_POST) but overriding the\n        existing method through subclassing is the prefered means\n        of changing method dispatch behavior.\n        ', lineno=251, col_offset=-1), lineno=251, col_offset=-1), TryExcept([Assign([Tuple([Name('params', Store(), lineno=254, col_offset=12), Name('method', Store(), lineno=254, col_offset=20)], Store(), lineno=254, col_offset=12)], Call(Attribute(Name('xmlrpclib', Load(), lineno=254, col_offset=29), 'loads', Load(), lineno=254, col_offset=29), [Name('data', Load(), lineno=254, col_offset=45)], [], None, None, lineno=254, col_offset=29), lineno=254, col_offset=12), If(Compare(Name('dispatch_method', Load(), lineno=257, col_offset=15), [IsNot()], [Name('None', Load(), lineno=257, col_offset=38)], lineno=257, col_offset=15), [Assign([Name('response', Store(), lineno=258, col_offset=16)], Call(Name('dispatch_method', Load(), lineno=258, col_offset=27), [Name('method', Load(), lineno=258, col_offset=43), Name('params', Load(), lineno=258, col_offset=51)], [], None, None, lineno=258, col_offset=27), lineno=258, col_offset=16)], [Assign([Name('response', Store(), lineno=260, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=260, col_offset=27), '_dispatch', Load(), lineno=260, col_offset=27), [Name('method', Load(), lineno=260, col_offset=42), Name('params', Load(), lineno=260, col_offset=50)], [], None, None, lineno=260, col_offset=27), lineno=260, col_offset=16)], lineno=257, col_offset=12), Assign([Name('response', Store(), lineno=262, col_offset=12)], Tuple([Name('response', Load(), lineno=262, col_offset=24)], Load(), lineno=262, col_offset=24), lineno=262, col_offset=12), Assign([Name('response', Store(), lineno=263, col_offset=12)], Call(Attribute(Name('xmlrpclib', Load(), lineno=263, col_offset=23), 'dumps', Load(), lineno=263, col_offset=23), [Name('response', Load(), lineno=263, col_offset=39)], [keyword('methodresponse', Num(1, lineno=263, col_offset=64)), keyword('allow_none', Attribute(Name('self', Load(), lineno=264, col_offset=50), 'allow_none', Load(), lineno=264, col_offset=50)), keyword('encoding', Attribute(Name('self', Load(), lineno=264, col_offset=76), 'encoding', Load(), lineno=264, col_offset=76))], None, None, lineno=263, col_offset=23), lineno=263, col_offset=12)], [ExceptHandler(Name('Fault', Load(), lineno=265, col_offset=15), Name('fault', Store(), lineno=265, col_offset=22), [Assign([Name('response', Store(), lineno=266, col_offset=12)], Call(Attribute(Name('xmlrpclib', Load(), lineno=266, col_offset=23), 'dumps', Load(), lineno=266, col_offset=23), [Name('fault', Load(), lineno=266, col_offset=39)], [keyword('allow_none', Attribute(Name('self', Load(), lineno=266, col_offset=57), 'allow_none', Load(), lineno=266, col_offset=57)), keyword('encoding', Attribute(Name('self', Load(), lineno=267, col_offset=48), 'encoding', Load(), lineno=267, col_offset=48))], None, None, lineno=266, col_offset=23), lineno=266, col_offset=12)], lineno=265, col_offset=8), ExceptHandler(None, None, [Assign([Tuple([Name('exc_type', Store(), lineno=270, col_offset=12), Name('exc_value', Store(), lineno=270, col_offset=22), Name('exc_tb', Store(), lineno=270, col_offset=33)], Store(), lineno=270, col_offset=12)], Call(Attribute(Name('sys', Load(), lineno=270, col_offset=42), 'exc_info', Load(), lineno=270, col_offset=42), [], [], None, None, lineno=270, col_offset=42), lineno=270, col_offset=12), Assign([Name('response', Store(), lineno=271, col_offset=12)], Call(Attribute(Name('xmlrpclib', Load(), lineno=271, col_offset=23), 'dumps', Load(), lineno=271, col_offset=23), [Call(Attribute(Name('xmlrpclib', Load(), lineno=272, col_offset=16), 'Fault', Load(), lineno=272, col_offset=16), [Num(1, lineno=272, col_offset=32), BinOp(Str('%s:%s', lineno=272, col_offset=35), Mod(), Tuple([Name('exc_type', Load(), lineno=272, col_offset=46), Name('exc_value', Load(), lineno=272, col_offset=56)], Load(), lineno=272, col_offset=46), lineno=272, col_offset=35)], [], None, None, lineno=272, col_offset=16)], [keyword('encoding', Attribute(Name('self', Load(), lineno=273, col_offset=25), 'encoding', Load(), lineno=273, col_offset=25)), keyword('allow_none', Attribute(Name('self', Load(), lineno=273, col_offset=51), 'allow_none', Load(), lineno=273, col_offset=51))], None, None, lineno=271, col_offset=23), lineno=271, col_offset=12)], lineno=268, col_offset=8)], [], lineno=253, col_offset=8), Return(Name('response', Load(), lineno=276, col_offset=15), lineno=276, col_offset=8)], [], lineno=241, col_offset=4), FunctionDef('system_listMethods', arguments([Name('self', Param(), lineno=278, col_offset=27)], None, None, []), [Expr(Str("system.listMethods() => ['add', 'subtract', 'multiple']\n\n        Returns a list of the methods supported by the server.", lineno=281, col_offset=-1), lineno=281, col_offset=-1), Assign([Name('methods', Store(), lineno=283, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=283, col_offset=18), 'funcs', Load(), lineno=283, col_offset=18), 'keys', Load(), lineno=283, col_offset=18), [], [], None, None, lineno=283, col_offset=18), lineno=283, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=284, col_offset=11), 'instance', Load(), lineno=284, col_offset=11), [IsNot()], [Name('None', Load(), lineno=284, col_offset=32)], lineno=284, col_offset=11), [If(Call(Name('hasattr', Load(), lineno=287, col_offset=15), [Attribute(Name('self', Load(), lineno=287, col_offset=23), 'instance', Load(), lineno=287, col_offset=23), Str('_listMethods', lineno=287, col_offset=38)], [], None, None, lineno=287, col_offset=15), [Assign([Name('methods', Store(), lineno=288, col_offset=16)], Call(Name('remove_duplicates', Load(), lineno=288, col_offset=26), [BinOp(Name('methods', Load(), lineno=289, col_offset=24), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=289, col_offset=34), 'instance', Load(), lineno=289, col_offset=34), '_listMethods', Load(), lineno=289, col_offset=34), [], [], None, None, lineno=289, col_offset=34), lineno=289, col_offset=24)], [], None, None, lineno=288, col_offset=26), lineno=288, col_offset=16)], [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=294, col_offset=21), [Attribute(Name('self', Load(), lineno=294, col_offset=29), 'instance', Load(), lineno=294, col_offset=29), Str('_dispatch', lineno=294, col_offset=44)], [], None, None, lineno=294, col_offset=21), lineno=294, col_offset=17), [Assign([Name('methods', Store(), lineno=295, col_offset=16)], Call(Name('remove_duplicates', Load(), lineno=295, col_offset=26), [BinOp(Name('methods', Load(), lineno=296, col_offset=24), Add(), Call(Name('list_public_methods', Load(), lineno=296, col_offset=34), [Attribute(Name('self', Load(), lineno=296, col_offset=54), 'instance', Load(), lineno=296, col_offset=54)], [], None, None, lineno=296, col_offset=34), lineno=296, col_offset=24)], [], None, None, lineno=295, col_offset=26), lineno=295, col_offset=16)], [], lineno=294, col_offset=17)], lineno=287, col_offset=12)], [], lineno=284, col_offset=8), Expr(Call(Attribute(Name('methods', Load(), lineno=298, col_offset=8), 'sort', Load(), lineno=298, col_offset=8), [], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8), Return(Name('methods', Load(), lineno=299, col_offset=15), lineno=299, col_offset=8)], [], lineno=278, col_offset=4), FunctionDef('system_methodSignature', arguments([Name('self', Param(), lineno=301, col_offset=31), Name('method_name', Param(), lineno=301, col_offset=37)], None, None, []), [Expr(Str("system.methodSignature('add') => [double, int, int]\n\n        Returns a list describing the signature of the method. In the\n        above example, the add method takes two integers as arguments\n        and returns a double result.\n\n        This server does NOT support system.methodSignature.", lineno=308, col_offset=-1), lineno=308, col_offset=-1), Return(Str('signatures not supported', lineno=312, col_offset=15), lineno=312, col_offset=8)], [], lineno=301, col_offset=4), FunctionDef('system_methodHelp', arguments([Name('self', Param(), lineno=314, col_offset=26), Name('method_name', Param(), lineno=314, col_offset=32)], None, None, []), [Expr(Str('system.methodHelp(\'add\') => "Adds two integers together"\n\n        Returns a string containing documentation for the specified method.', lineno=317, col_offset=-1), lineno=317, col_offset=-1), Assign([Name('method', Store(), lineno=319, col_offset=8)], Name('None', Load(), lineno=319, col_offset=17), lineno=319, col_offset=8), If(Compare(Name('method_name', Load(), lineno=320, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=320, col_offset=26), 'funcs', Load(), lineno=320, col_offset=26)], lineno=320, col_offset=11), [Assign([Name('method', Store(), lineno=321, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=321, col_offset=21), 'funcs', Load(), lineno=321, col_offset=21), Index(Name('method_name', Load(), lineno=321, col_offset=32)), Load(), lineno=321, col_offset=21), lineno=321, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=322, col_offset=13), 'instance', Load(), lineno=322, col_offset=13), [IsNot()], [Name('None', Load(), lineno=322, col_offset=34)], lineno=322, col_offset=13), [If(Call(Name('hasattr', Load(), lineno=324, col_offset=15), [Attribute(Name('self', Load(), lineno=324, col_offset=23), 'instance', Load(), lineno=324, col_offset=23), Str('_methodHelp', lineno=324, col_offset=38)], [], None, None, lineno=324, col_offset=15), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=325, col_offset=23), 'instance', Load(), lineno=325, col_offset=23), '_methodHelp', Load(), lineno=325, col_offset=23), [Name('method_name', Load(), lineno=325, col_offset=49)], [], None, None, lineno=325, col_offset=23), lineno=325, col_offset=16)], [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=328, col_offset=21), [Attribute(Name('self', Load(), lineno=328, col_offset=29), 'instance', Load(), lineno=328, col_offset=29), Str('_dispatch', lineno=328, col_offset=44)], [], None, None, lineno=328, col_offset=21), lineno=328, col_offset=17), [TryExcept([Assign([Name('method', Store(), lineno=330, col_offset=20)], Call(Name('resolve_dotted_attribute', Load(), lineno=330, col_offset=29), [Attribute(Name('self', Load(), lineno=331, col_offset=32), 'instance', Load(), lineno=331, col_offset=32), Name('method_name', Load(), lineno=332, col_offset=32), Attribute(Name('self', Load(), lineno=333, col_offset=32), 'allow_dotted_names', Load(), lineno=333, col_offset=32)], [], None, None, lineno=330, col_offset=29), lineno=330, col_offset=20)], [ExceptHandler(Name('AttributeError', Load(), lineno=335, col_offset=23), None, [Pass( lineno=336, col_offset=20)], lineno=335, col_offset=16)], [], lineno=329, col_offset=16)], [], lineno=328, col_offset=17)], lineno=324, col_offset=12)], [], lineno=322, col_offset=13)], lineno=320, col_offset=8), If(Compare(Name('method', Load(), lineno=340, col_offset=11), [Is()], [Name('None', Load(), lineno=340, col_offset=21)], lineno=340, col_offset=11), [Return(Str('', lineno=341, col_offset=19), lineno=341, col_offset=12)], [Import([alias('pydoc', None)], lineno=343, col_offset=12), Return(Call(Attribute(Name('pydoc', Load(), lineno=344, col_offset=19), 'getdoc', Load(), lineno=344, col_offset=19), [Name('method', Load(), lineno=344, col_offset=32)], [], None, None, lineno=344, col_offset=19), lineno=344, col_offset=12)], lineno=340, col_offset=8)], [], lineno=314, col_offset=4), FunctionDef('system_multicall', arguments([Name('self', Param(), lineno=346, col_offset=25), Name('call_list', Param(), lineno=346, col_offset=31)], None, None, []), [Expr(Str("system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) => [[4], ...]\n\n        Allows the caller to package multiple XML-RPC calls into a single\n        request.\n\n        See http://www.xmlrpc.com/discuss/msgReader$1208\n        ", lineno=354, col_offset=-1), lineno=354, col_offset=-1), Assign([Name('results', Store(), lineno=356, col_offset=8)], List([], Load(), lineno=356, col_offset=18), lineno=356, col_offset=8), For(Name('call', Store(), lineno=357, col_offset=12), Name('call_list', Load(), lineno=357, col_offset=20), [Assign([Name('method_name', Store(), lineno=358, col_offset=12)], Subscript(Name('call', Load(), lineno=358, col_offset=26), Index(Str('methodName', lineno=358, col_offset=31)), Load(), lineno=358, col_offset=26), lineno=358, col_offset=12), Assign([Name('params', Store(), lineno=359, col_offset=12)], Subscript(Name('call', Load(), lineno=359, col_offset=21), Index(Str('params', lineno=359, col_offset=26)), Load(), lineno=359, col_offset=21), lineno=359, col_offset=12), TryExcept([Expr(Call(Attribute(Name('results', Load(), lineno=364, col_offset=16), 'append', Load(), lineno=364, col_offset=16), [List([Call(Attribute(Name('self', Load(), lineno=364, col_offset=32), '_dispatch', Load(), lineno=364, col_offset=32), [Name('method_name', Load(), lineno=364, col_offset=47), Name('params', Load(), lineno=364, col_offset=60)], [], None, None, lineno=364, col_offset=32)], Load(), lineno=364, col_offset=31)], [], None, None, lineno=364, col_offset=16), lineno=364, col_offset=16)], [ExceptHandler(Name('Fault', Load(), lineno=365, col_offset=19), Name('fault', Store(), lineno=365, col_offset=26), [Expr(Call(Attribute(Name('results', Load(), lineno=366, col_offset=16), 'append', Load(), lineno=366, col_offset=16), [Dict([Str('faultCode', lineno=367, col_offset=21), Str('faultString', lineno=368, col_offset=21)], [Attribute(Name('fault', Load(), lineno=367, col_offset=35), 'faultCode', Load(), lineno=367, col_offset=35), Attribute(Name('fault', Load(), lineno=368, col_offset=37), 'faultString', Load(), lineno=368, col_offset=37)], lineno=367, col_offset=20)], [], None, None, lineno=366, col_offset=16), lineno=366, col_offset=16)], lineno=365, col_offset=12), ExceptHandler(None, None, [Assign([Tuple([Name('exc_type', Store(), lineno=371, col_offset=16), Name('exc_value', Store(), lineno=371, col_offset=26), Name('exc_tb', Store(), lineno=371, col_offset=37)], Store(), lineno=371, col_offset=16)], Call(Attribute(Name('sys', Load(), lineno=371, col_offset=46), 'exc_info', Load(), lineno=371, col_offset=46), [], [], None, None, lineno=371, col_offset=46), lineno=371, col_offset=16), Expr(Call(Attribute(Name('results', Load(), lineno=372, col_offset=16), 'append', Load(), lineno=372, col_offset=16), [Dict([Str('faultCode', lineno=373, col_offset=21), Str('faultString', lineno=374, col_offset=21)], [Num(1, lineno=373, col_offset=35), BinOp(Str('%s:%s', lineno=374, col_offset=37), Mod(), Tuple([Name('exc_type', Load(), lineno=374, col_offset=48), Name('exc_value', Load(), lineno=374, col_offset=58)], Load(), lineno=374, col_offset=48), lineno=374, col_offset=37)], lineno=373, col_offset=20)], [], None, None, lineno=372, col_offset=16), lineno=372, col_offset=16)], lineno=370, col_offset=12)], [], lineno=361, col_offset=12)], [], lineno=357, col_offset=8), Return(Name('results', Load(), lineno=376, col_offset=15), lineno=376, col_offset=8)], [], lineno=346, col_offset=4), FunctionDef('_dispatch', arguments([Name('self', Param(), lineno=378, col_offset=18), Name('method', Param(), lineno=378, col_offset=24), Name('params', Param(), lineno=378, col_offset=32)], None, None, []), [Expr(Str("Dispatches the XML-RPC method.\n\n        XML-RPC calls are forwarded to a registered function that\n        matches the called XML-RPC method name. If no such function\n        exists then the call is forwarded to the registered instance,\n        if available.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called.\n\n        Methods beginning with an '_' are considered private and will\n        not be called.\n        ", lineno=397, col_offset=-1), lineno=397, col_offset=-1), Assign([Name('func', Store(), lineno=399, col_offset=8)], Name('None', Load(), lineno=399, col_offset=15), lineno=399, col_offset=8), TryExcept([Assign([Name('func', Store(), lineno=402, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=402, col_offset=19), 'funcs', Load(), lineno=402, col_offset=19), Index(Name('method', Load(), lineno=402, col_offset=30)), Load(), lineno=402, col_offset=19), lineno=402, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=403, col_offset=15), None, [If(Compare(Attribute(Name('self', Load(), lineno=404, col_offset=15), 'instance', Load(), lineno=404, col_offset=15), [IsNot()], [Name('None', Load(), lineno=404, col_offset=36)], lineno=404, col_offset=15), [If(Call(Name('hasattr', Load(), lineno=406, col_offset=19), [Attribute(Name('self', Load(), lineno=406, col_offset=27), 'instance', Load(), lineno=406, col_offset=27), Str('_dispatch', lineno=406, col_offset=42)], [], None, None, lineno=406, col_offset=19), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=407, col_offset=27), 'instance', Load(), lineno=407, col_offset=27), '_dispatch', Load(), lineno=407, col_offset=27), [Name('method', Load(), lineno=407, col_offset=51), Name('params', Load(), lineno=407, col_offset=59)], [], None, None, lineno=407, col_offset=27), lineno=407, col_offset=20)], [TryExcept([Assign([Name('func', Store(), lineno=411, col_offset=24)], Call(Name('resolve_dotted_attribute', Load(), lineno=411, col_offset=31), [Attribute(Name('self', Load(), lineno=412, col_offset=28), 'instance', Load(), lineno=412, col_offset=28), Name('method', Load(), lineno=413, col_offset=28), Attribute(Name('self', Load(), lineno=414, col_offset=28), 'allow_dotted_names', Load(), lineno=414, col_offset=28)], [], None, None, lineno=411, col_offset=31), lineno=411, col_offset=24)], [ExceptHandler(Name('AttributeError', Load(), lineno=416, col_offset=27), None, [Pass( lineno=417, col_offset=24)], lineno=416, col_offset=20)], [], lineno=410, col_offset=20)], lineno=406, col_offset=16)], [], lineno=404, col_offset=12)], lineno=403, col_offset=8)], [], lineno=400, col_offset=8), If(Compare(Name('func', Load(), lineno=419, col_offset=11), [IsNot()], [Name('None', Load(), lineno=419, col_offset=23)], lineno=419, col_offset=11), [Return(Call(Name('func', Load(), lineno=420, col_offset=19), [], [], Name('params', Load(), lineno=420, col_offset=25), None, lineno=420, col_offset=19), lineno=420, col_offset=12)], [Raise(Call(Name('Exception', Load(), lineno=422, col_offset=18), [BinOp(Str('method "%s" is not supported', lineno=422, col_offset=28), Mod(), Name('method', Load(), lineno=422, col_offset=61), lineno=422, col_offset=28)], [], None, None, lineno=422, col_offset=18), None, None, lineno=422, col_offset=12)], lineno=419, col_offset=8)], [], lineno=378, col_offset=4)], [], lineno=160, col_offset=0), ClassDef('SimpleXMLRPCRequestHandler', [Attribute(Name('BaseHTTPServer', Load(), lineno=424, col_offset=33), 'BaseHTTPRequestHandler', Load(), lineno=424, col_offset=33)], [Expr(Str('Simple XML-RPC request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n    ', lineno=429, col_offset=-1), lineno=429, col_offset=-1), Assign([Name('rpc_paths', Store(), lineno=433, col_offset=4)], Tuple([Str('/', lineno=433, col_offset=17), Str('/RPC2', lineno=433, col_offset=22)], Load(), lineno=433, col_offset=17), lineno=433, col_offset=4), Assign([Name('encode_threshold', Store(), lineno=436, col_offset=4)], Num(1400, lineno=436, col_offset=23), lineno=436, col_offset=4), Assign([Name('wbufsize', Store(), lineno=440, col_offset=4)], Num(-1, lineno=440, col_offset=16), lineno=440, col_offset=4), Assign([Name('disable_nagle_algorithm', Store(), lineno=441, col_offset=4)], Name('True', Load(), lineno=441, col_offset=30), lineno=441, col_offset=4), Assign([Name('aepattern', Store(), lineno=444, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=444, col_offset=16), 'compile', Load(), lineno=444, col_offset=16), [Str('\n                            \\s* ([^\\s;]+) \\s*            #content-coding\n                            (;\\s* q \\s*=\\s* ([0-9\\.]+))? #q\n                            ', lineno=447, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=447, col_offset=33), 'VERBOSE', Load(), lineno=447, col_offset=33), BitOr(), Attribute(Name('re', Load(), lineno=447, col_offset=46), 'IGNORECASE', Load(), lineno=447, col_offset=46), lineno=447, col_offset=33)], [], None, None, lineno=444, col_offset=16), lineno=444, col_offset=4), FunctionDef('accept_encodings', arguments([Name('self', Param(), lineno=449, col_offset=25)], None, None, []), [Assign([Name('r', Store(), lineno=450, col_offset=8)], Dict([], [], lineno=450, col_offset=12), lineno=450, col_offset=8), Assign([Name('ae', Store(), lineno=451, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=451, col_offset=13), 'headers', Load(), lineno=451, col_offset=13), 'get', Load(), lineno=451, col_offset=13), [Str('Accept-Encoding', lineno=451, col_offset=30), Str('', lineno=451, col_offset=49)], [], None, None, lineno=451, col_offset=13), lineno=451, col_offset=8), For(Name('e', Store(), lineno=452, col_offset=12), Call(Attribute(Name('ae', Load(), lineno=452, col_offset=17), 'split', Load(), lineno=452, col_offset=17), [Str(',', lineno=452, col_offset=26)], [], None, None, lineno=452, col_offset=17), [Assign([Name('match', Store(), lineno=453, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=453, col_offset=20), 'aepattern', Load(), lineno=453, col_offset=20), 'match', Load(), lineno=453, col_offset=20), [Name('e', Load(), lineno=453, col_offset=41)], [], None, None, lineno=453, col_offset=20), lineno=453, col_offset=12), If(Name('match', Load(), lineno=454, col_offset=15), [Assign([Name('v', Store(), lineno=455, col_offset=16)], Call(Attribute(Name('match', Load(), lineno=455, col_offset=20), 'group', Load(), lineno=455, col_offset=20), [Num(3, lineno=455, col_offset=32)], [], None, None, lineno=455, col_offset=20), lineno=455, col_offset=16), Assign([Name('v', Store(), lineno=456, col_offset=16)], IfExp(Name('v', Load(), lineno=456, col_offset=32), Call(Name('float', Load(), lineno=456, col_offset=20), [Name('v', Load(), lineno=456, col_offset=26)], [], None, None, lineno=456, col_offset=20), Num(1.0, lineno=456, col_offset=39), lineno=456, col_offset=20), lineno=456, col_offset=16), Assign([Subscript(Name('r', Load(), lineno=457, col_offset=16), Index(Call(Attribute(Name('match', Load(), lineno=457, col_offset=18), 'group', Load(), lineno=457, col_offset=18), [Num(1, lineno=457, col_offset=30)], [], None, None, lineno=457, col_offset=18)), Store(), lineno=457, col_offset=16)], Name('v', Load(), lineno=457, col_offset=36), lineno=457, col_offset=16)], [], lineno=454, col_offset=12)], [], lineno=452, col_offset=8), Return(Name('r', Load(), lineno=458, col_offset=15), lineno=458, col_offset=8)], [], lineno=449, col_offset=4), FunctionDef('is_rpc_path_valid', arguments([Name('self', Param(), lineno=460, col_offset=26)], None, None, []), [If(Attribute(Name('self', Load(), lineno=461, col_offset=11), 'rpc_paths', Load(), lineno=461, col_offset=11), [Return(Compare(Attribute(Name('self', Load(), lineno=462, col_offset=19), 'path', Load(), lineno=462, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=462, col_offset=32), 'rpc_paths', Load(), lineno=462, col_offset=32)], lineno=462, col_offset=19), lineno=462, col_offset=12)], [Return(Name('True', Load(), lineno=465, col_offset=19), lineno=465, col_offset=12)], lineno=461, col_offset=8)], [], lineno=460, col_offset=4), FunctionDef('do_POST', arguments([Name('self', Param(), lineno=467, col_offset=16)], None, None, []), [Expr(Str("Handles the HTTP POST request.\n\n        Attempts to interpret all HTTP POST requests as XML-RPC calls,\n        which are forwarded to the server's _dispatch method for handling.\n        ", lineno=472, col_offset=-1), lineno=472, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=475, col_offset=15), 'is_rpc_path_valid', Load(), lineno=475, col_offset=15), [], [], None, None, lineno=475, col_offset=15), lineno=475, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=476, col_offset=12), 'report_404', Load(), lineno=476, col_offset=12), [], [], None, None, lineno=476, col_offset=12), lineno=476, col_offset=12), Return(None, lineno=477, col_offset=12)], [], lineno=475, col_offset=8), TryExcept([Assign([Name('max_chunk_size', Store(), lineno=484, col_offset=12)], BinOp(BinOp(Num(10, lineno=484, col_offset=29), Mult(), Num(1024, lineno=484, col_offset=32), lineno=484, col_offset=29), Mult(), Num(1024, lineno=484, col_offset=37), lineno=484, col_offset=36), lineno=484, col_offset=12), Assign([Name('size_remaining', Store(), lineno=485, col_offset=12)], Call(Name('int', Load(), lineno=485, col_offset=29), [Subscript(Attribute(Name('self', Load(), lineno=485, col_offset=33), 'headers', Load(), lineno=485, col_offset=33), Index(Str('content-length', lineno=485, col_offset=46)), Load(), lineno=485, col_offset=33)], [], None, None, lineno=485, col_offset=29), lineno=485, col_offset=12), Assign([Name('L', Store(), lineno=486, col_offset=12)], List([], Load(), lineno=486, col_offset=16), lineno=486, col_offset=12), While(Name('size_remaining', Load(), lineno=487, col_offset=18), [Assign([Name('chunk_size', Store(), lineno=488, col_offset=16)], Call(Name('min', Load(), lineno=488, col_offset=29), [Name('size_remaining', Load(), lineno=488, col_offset=33), Name('max_chunk_size', Load(), lineno=488, col_offset=49)], [], None, None, lineno=488, col_offset=29), lineno=488, col_offset=16), Expr(Call(Attribute(Name('L', Load(), lineno=489, col_offset=16), 'append', Load(), lineno=489, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=489, col_offset=25), 'rfile', Load(), lineno=489, col_offset=25), 'read', Load(), lineno=489, col_offset=25), [Name('chunk_size', Load(), lineno=489, col_offset=41)], [], None, None, lineno=489, col_offset=25)], [], None, None, lineno=489, col_offset=16), lineno=489, col_offset=16), AugAssign(Name('size_remaining', Store(), lineno=490, col_offset=16), Sub(), Call(Name('len', Load(), lineno=490, col_offset=34), [Subscript(Name('L', Load(), lineno=490, col_offset=38), Index(Num(-1, lineno=490, col_offset=41)), Load(), lineno=490, col_offset=38)], [], None, None, lineno=490, col_offset=34), lineno=490, col_offset=16)], [], lineno=487, col_offset=12), Assign([Name('data', Store(), lineno=491, col_offset=12)], Call(Attribute(Str('', lineno=491, col_offset=19), 'join', Load(), lineno=491, col_offset=19), [Name('L', Load(), lineno=491, col_offset=27)], [], None, None, lineno=491, col_offset=19), lineno=491, col_offset=12), Assign([Name('data', Store(), lineno=493, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=493, col_offset=19), 'decode_request_content', Load(), lineno=493, col_offset=19), [Name('data', Load(), lineno=493, col_offset=47)], [], None, None, lineno=493, col_offset=19), lineno=493, col_offset=12), If(Compare(Name('data', Load(), lineno=494, col_offset=15), [Is()], [Name('None', Load(), lineno=494, col_offset=23)], lineno=494, col_offset=15), [Return(None, lineno=495, col_offset=16)], [], lineno=494, col_offset=12), Assign([Name('response', Store(), lineno=502, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=502, col_offset=23), 'server', Load(), lineno=502, col_offset=23), '_marshaled_dispatch', Load(), lineno=502, col_offset=23), [Name('data', Load(), lineno=503, col_offset=20), Call(Name('getattr', Load(), lineno=503, col_offset=26), [Name('self', Load(), lineno=503, col_offset=34), Str('_dispatch', lineno=503, col_offset=40), Name('None', Load(), lineno=503, col_offset=53)], [], None, None, lineno=503, col_offset=26), Attribute(Name('self', Load(), lineno=503, col_offset=60), 'path', Load(), lineno=503, col_offset=60)], [], None, None, lineno=502, col_offset=23), lineno=502, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=505, col_offset=15), Name('e', Store(), lineno=505, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=507, col_offset=12), 'send_response', Load(), lineno=507, col_offset=12), [Num(500, lineno=507, col_offset=31)], [], None, None, lineno=507, col_offset=12), lineno=507, col_offset=12), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=510, col_offset=15), [Attribute(Name('self', Load(), lineno=510, col_offset=23), 'server', Load(), lineno=510, col_offset=23), Str('_send_traceback_header', lineno=510, col_offset=36)], [], None, None, lineno=510, col_offset=15), Attribute(Attribute(Name('self', Load(), lineno=511, col_offset=20), 'server', Load(), lineno=511, col_offset=20), '_send_traceback_header', Load(), lineno=511, col_offset=20)], lineno=510, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=512, col_offset=16), 'send_header', Load(), lineno=512, col_offset=16), [Str('X-exception', lineno=512, col_offset=33), Call(Name('str', Load(), lineno=512, col_offset=48), [Name('e', Load(), lineno=512, col_offset=52)], [], None, None, lineno=512, col_offset=48)], [], None, None, lineno=512, col_offset=16), lineno=512, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=513, col_offset=16), 'send_header', Load(), lineno=513, col_offset=16), [Str('X-traceback', lineno=513, col_offset=33), Call(Attribute(Name('traceback', Load(), lineno=513, col_offset=48), 'format_exc', Load(), lineno=513, col_offset=48), [], [], None, None, lineno=513, col_offset=48)], [], None, None, lineno=513, col_offset=16), lineno=513, col_offset=16)], [], lineno=510, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=515, col_offset=12), 'send_header', Load(), lineno=515, col_offset=12), [Str('Content-length', lineno=515, col_offset=29), Str('0', lineno=515, col_offset=47)], [], None, None, lineno=515, col_offset=12), lineno=515, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=516, col_offset=12), 'end_headers', Load(), lineno=516, col_offset=12), [], [], None, None, lineno=516, col_offset=12), lineno=516, col_offset=12)], lineno=505, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=519, col_offset=12), 'send_response', Load(), lineno=519, col_offset=12), [Num(200, lineno=519, col_offset=31)], [], None, None, lineno=519, col_offset=12), lineno=519, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=520, col_offset=12), 'send_header', Load(), lineno=520, col_offset=12), [Str('Content-type', lineno=520, col_offset=29), Str('text/xml', lineno=520, col_offset=45)], [], None, None, lineno=520, col_offset=12), lineno=520, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=521, col_offset=15), 'encode_threshold', Load(), lineno=521, col_offset=15), [IsNot()], [Name('None', Load(), lineno=521, col_offset=44)], lineno=521, col_offset=15), [If(Compare(Call(Name('len', Load(), lineno=522, col_offset=19), [Name('response', Load(), lineno=522, col_offset=23)], [], None, None, lineno=522, col_offset=19), [Gt()], [Attribute(Name('self', Load(), lineno=522, col_offset=35), 'encode_threshold', Load(), lineno=522, col_offset=35)], lineno=522, col_offset=19), [Assign([Name('q', Store(), lineno=523, col_offset=20)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=523, col_offset=24), 'accept_encodings', Load(), lineno=523, col_offset=24), [], [], None, None, lineno=523, col_offset=24), 'get', Load(), lineno=523, col_offset=24), [Str('gzip', lineno=523, col_offset=52), Num(0, lineno=523, col_offset=60)], [], None, None, lineno=523, col_offset=24), lineno=523, col_offset=20), If(Name('q', Load(), lineno=524, col_offset=23), [TryExcept([Assign([Name('response', Store(), lineno=526, col_offset=28)], Call(Attribute(Name('xmlrpclib', Load(), lineno=526, col_offset=39), 'gzip_encode', Load(), lineno=526, col_offset=39), [Name('response', Load(), lineno=526, col_offset=61)], [], None, None, lineno=526, col_offset=39), lineno=526, col_offset=28), Expr(Call(Attribute(Name('self', Load(), lineno=527, col_offset=28), 'send_header', Load(), lineno=527, col_offset=28), [Str('Content-Encoding', lineno=527, col_offset=45), Str('gzip', lineno=527, col_offset=65)], [], None, None, lineno=527, col_offset=28), lineno=527, col_offset=28)], [ExceptHandler(Name('NotImplementedError', Load(), lineno=528, col_offset=31), None, [Pass( lineno=529, col_offset=28)], lineno=528, col_offset=24)], [], lineno=525, col_offset=24)], [], lineno=524, col_offset=20)], [], lineno=522, col_offset=16)], [], lineno=521, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=530, col_offset=12), 'send_header', Load(), lineno=530, col_offset=12), [Str('Content-length', lineno=530, col_offset=29), Call(Name('str', Load(), lineno=530, col_offset=47), [Call(Name('len', Load(), lineno=530, col_offset=51), [Name('response', Load(), lineno=530, col_offset=55)], [], None, None, lineno=530, col_offset=51)], [], None, None, lineno=530, col_offset=47)], [], None, None, lineno=530, col_offset=12), lineno=530, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=531, col_offset=12), 'end_headers', Load(), lineno=531, col_offset=12), [], [], None, None, lineno=531, col_offset=12), lineno=531, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=532, col_offset=12), 'wfile', Load(), lineno=532, col_offset=12), 'write', Load(), lineno=532, col_offset=12), [Name('response', Load(), lineno=532, col_offset=29)], [], None, None, lineno=532, col_offset=12), lineno=532, col_offset=12)], lineno=479, col_offset=8)], [], lineno=467, col_offset=4), FunctionDef('decode_request_content', arguments([Name('self', Param(), lineno=534, col_offset=31), Name('data', Param(), lineno=534, col_offset=37)], None, None, []), [Assign([Name('encoding', Store(), lineno=536, col_offset=8)], Call(Attribute(Call(Attribute(Attribute(Name('self', Load(), lineno=536, col_offset=19), 'headers', Load(), lineno=536, col_offset=19), 'get', Load(), lineno=536, col_offset=19), [Str('content-encoding', lineno=536, col_offset=36), Str('identity', lineno=536, col_offset=56)], [], None, None, lineno=536, col_offset=19), 'lower', Load(), lineno=536, col_offset=19), [], [], None, None, lineno=536, col_offset=19), lineno=536, col_offset=8), If(Compare(Name('encoding', Load(), lineno=537, col_offset=11), [Eq()], [Str('identity', lineno=537, col_offset=23)], lineno=537, col_offset=11), [Return(Name('data', Load(), lineno=538, col_offset=19), lineno=538, col_offset=12)], [], lineno=537, col_offset=8), If(Compare(Name('encoding', Load(), lineno=539, col_offset=11), [Eq()], [Str('gzip', lineno=539, col_offset=23)], lineno=539, col_offset=11), [TryExcept([Return(Call(Attribute(Name('xmlrpclib', Load(), lineno=541, col_offset=23), 'gzip_decode', Load(), lineno=541, col_offset=23), [Name('data', Load(), lineno=541, col_offset=45)], [], None, None, lineno=541, col_offset=23), lineno=541, col_offset=16)], [ExceptHandler(Name('NotImplementedError', Load(), lineno=542, col_offset=19), None, [Expr(Call(Attribute(Name('self', Load(), lineno=543, col_offset=16), 'send_response', Load(), lineno=543, col_offset=16), [Num(501, lineno=543, col_offset=35), BinOp(Str('encoding %r not supported', lineno=543, col_offset=40), Mod(), Name('encoding', Load(), lineno=543, col_offset=70), lineno=543, col_offset=40)], [], None, None, lineno=543, col_offset=16), lineno=543, col_offset=16)], lineno=542, col_offset=12), ExceptHandler(Name('ValueError', Load(), lineno=544, col_offset=19), None, [Expr(Call(Attribute(Name('self', Load(), lineno=545, col_offset=16), 'send_response', Load(), lineno=545, col_offset=16), [Num(400, lineno=545, col_offset=35), Str('error decoding gzip content', lineno=545, col_offset=40)], [], None, None, lineno=545, col_offset=16), lineno=545, col_offset=16)], lineno=544, col_offset=12)], [], lineno=540, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=547, col_offset=12), 'send_response', Load(), lineno=547, col_offset=12), [Num(501, lineno=547, col_offset=31), BinOp(Str('encoding %r not supported', lineno=547, col_offset=36), Mod(), Name('encoding', Load(), lineno=547, col_offset=66), lineno=547, col_offset=36)], [], None, None, lineno=547, col_offset=12), lineno=547, col_offset=12)], lineno=539, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=548, col_offset=8), 'send_header', Load(), lineno=548, col_offset=8), [Str('Content-length', lineno=548, col_offset=25), Str('0', lineno=548, col_offset=43)], [], None, None, lineno=548, col_offset=8), lineno=548, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=549, col_offset=8), 'end_headers', Load(), lineno=549, col_offset=8), [], [], None, None, lineno=549, col_offset=8), lineno=549, col_offset=8)], [], lineno=534, col_offset=4), FunctionDef('report_404', arguments([Name('self', Param(), lineno=551, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=553, col_offset=8), 'send_response', Load(), lineno=553, col_offset=8), [Num(404, lineno=553, col_offset=27)], [], None, None, lineno=553, col_offset=8), lineno=553, col_offset=8), Assign([Name('response', Store(), lineno=554, col_offset=8)], Str('No such page', lineno=554, col_offset=19), lineno=554, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=555, col_offset=8), 'send_header', Load(), lineno=555, col_offset=8), [Str('Content-type', lineno=555, col_offset=25), Str('text/plain', lineno=555, col_offset=41)], [], None, None, lineno=555, col_offset=8), lineno=555, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=556, col_offset=8), 'send_header', Load(), lineno=556, col_offset=8), [Str('Content-length', lineno=556, col_offset=25), Call(Name('str', Load(), lineno=556, col_offset=43), [Call(Name('len', Load(), lineno=556, col_offset=47), [Name('response', Load(), lineno=556, col_offset=51)], [], None, None, lineno=556, col_offset=47)], [], None, None, lineno=556, col_offset=43)], [], None, None, lineno=556, col_offset=8), lineno=556, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=557, col_offset=8), 'end_headers', Load(), lineno=557, col_offset=8), [], [], None, None, lineno=557, col_offset=8), lineno=557, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=558, col_offset=8), 'wfile', Load(), lineno=558, col_offset=8), 'write', Load(), lineno=558, col_offset=8), [Name('response', Load(), lineno=558, col_offset=25)], [], None, None, lineno=558, col_offset=8), lineno=558, col_offset=8)], [], lineno=551, col_offset=4), FunctionDef('log_request', arguments([Name('self', Param(), lineno=560, col_offset=20), Name('code', Param(), lineno=560, col_offset=26), Name('size', Param(), lineno=560, col_offset=36)], None, None, [Str('-', lineno=560, col_offset=31), Str('-', lineno=560, col_offset=41)]), [Expr(Str('Selectively log an accepted request.', lineno=561, col_offset=8), lineno=561, col_offset=8), If(Attribute(Attribute(Name('self', Load(), lineno=563, col_offset=11), 'server', Load(), lineno=563, col_offset=11), 'logRequests', Load(), lineno=563, col_offset=11), [Expr(Call(Attribute(Attribute(Name('BaseHTTPServer', Load(), lineno=564, col_offset=12), 'BaseHTTPRequestHandler', Load(), lineno=564, col_offset=12), 'log_request', Load(), lineno=564, col_offset=12), [Name('self', Load(), lineno=564, col_offset=62), Name('code', Load(), lineno=564, col_offset=68), Name('size', Load(), lineno=564, col_offset=74)], [], None, None, lineno=564, col_offset=12), lineno=564, col_offset=12)], [], lineno=563, col_offset=8)], [], lineno=560, col_offset=4)], [], lineno=424, col_offset=0), ClassDef('SimpleXMLRPCServer', [Attribute(Name('SocketServer', Load(), lineno=566, col_offset=25), 'TCPServer', Load(), lineno=566, col_offset=25), Name('SimpleXMLRPCDispatcher', Load(), lineno=567, col_offset=25)], [Expr(Str('Simple XML-RPC server.\n\n    Simple XML-RPC server that allows functions and a single instance\n    to be installed to handle requests. The default implementation\n    attempts to dispatch XML-RPC calls to the functions or instance\n    installed in the server. Override the _dispatch method inhereted\n    from SimpleXMLRPCDispatcher to change this behavior.\n    ', lineno=575, col_offset=-1), lineno=575, col_offset=-1), Assign([Name('allow_reuse_address', Store(), lineno=577, col_offset=4)], Name('True', Load(), lineno=577, col_offset=26), lineno=577, col_offset=4), Assign([Name('_send_traceback_header', Store(), lineno=583, col_offset=4)], Name('False', Load(), lineno=583, col_offset=29), lineno=583, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=585, col_offset=17), Name('addr', Param(), lineno=585, col_offset=23), Name('requestHandler', Param(), lineno=585, col_offset=29), Name('logRequests', Param(), lineno=586, col_offset=17), Name('allow_none', Param(), lineno=586, col_offset=35), Name('encoding', Param(), lineno=586, col_offset=53), Name('bind_and_activate', Param(), lineno=586, col_offset=68)], None, None, [Name('SimpleXMLRPCRequestHandler', Load(), lineno=585, col_offset=44), Name('True', Load(), lineno=586, col_offset=29), Name('False', Load(), lineno=586, col_offset=46), Name('None', Load(), lineno=586, col_offset=62), Name('True', Load(), lineno=586, col_offset=86)]), [Assign([Attribute(Name('self', Load(), lineno=587, col_offset=8), 'logRequests', Store(), lineno=587, col_offset=8)], Name('logRequests', Load(), lineno=587, col_offset=27), lineno=587, col_offset=8), Expr(Call(Attribute(Name('SimpleXMLRPCDispatcher', Load(), lineno=589, col_offset=8), '__init__', Load(), lineno=589, col_offset=8), [Name('self', Load(), lineno=589, col_offset=40), Name('allow_none', Load(), lineno=589, col_offset=46), Name('encoding', Load(), lineno=589, col_offset=58)], [], None, None, lineno=589, col_offset=8), lineno=589, col_offset=8), Expr(Call(Attribute(Attribute(Name('SocketServer', Load(), lineno=590, col_offset=8), 'TCPServer', Load(), lineno=590, col_offset=8), '__init__', Load(), lineno=590, col_offset=8), [Name('self', Load(), lineno=590, col_offset=40), Name('addr', Load(), lineno=590, col_offset=46), Name('requestHandler', Load(), lineno=590, col_offset=52), Name('bind_and_activate', Load(), lineno=590, col_offset=68)], [], None, None, lineno=590, col_offset=8), lineno=590, col_offset=8), If(BoolOp(And(), [Compare(Name('fcntl', Load(), lineno=595, col_offset=11), [IsNot()], [Name('None', Load(), lineno=595, col_offset=24)], lineno=595, col_offset=11), Call(Name('hasattr', Load(), lineno=595, col_offset=33), [Name('fcntl', Load(), lineno=595, col_offset=41), Str('FD_CLOEXEC', lineno=595, col_offset=48)], [], None, None, lineno=595, col_offset=33)], lineno=595, col_offset=11), [Assign([Name('flags', Store(), lineno=596, col_offset=12)], Call(Attribute(Name('fcntl', Load(), lineno=596, col_offset=20), 'fcntl', Load(), lineno=596, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=596, col_offset=32), 'fileno', Load(), lineno=596, col_offset=32), [], [], None, None, lineno=596, col_offset=32), Attribute(Name('fcntl', Load(), lineno=596, col_offset=47), 'F_GETFD', Load(), lineno=596, col_offset=47)], [], None, None, lineno=596, col_offset=20), lineno=596, col_offset=12), AugAssign(Name('flags', Store(), lineno=597, col_offset=12), BitOr(), Attribute(Name('fcntl', Load(), lineno=597, col_offset=21), 'FD_CLOEXEC', Load(), lineno=597, col_offset=21), lineno=597, col_offset=12), Expr(Call(Attribute(Name('fcntl', Load(), lineno=598, col_offset=12), 'fcntl', Load(), lineno=598, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=598, col_offset=24), 'fileno', Load(), lineno=598, col_offset=24), [], [], None, None, lineno=598, col_offset=24), Attribute(Name('fcntl', Load(), lineno=598, col_offset=39), 'F_SETFD', Load(), lineno=598, col_offset=39), Name('flags', Load(), lineno=598, col_offset=54)], [], None, None, lineno=598, col_offset=12), lineno=598, col_offset=12)], [], lineno=595, col_offset=8)], [], lineno=585, col_offset=4)], [], lineno=566, col_offset=0), ClassDef('MultiPathXMLRPCServer', [Name('SimpleXMLRPCServer', Load(), lineno=600, col_offset=28)], [Expr(Str("Multipath XML-RPC Server\n    This specialization of SimpleXMLRPCServer allows the user to create\n    multiple Dispatcher instances and assign them to different\n    HTTP request paths.  This makes it possible to run two or more\n    'virtual XML-RPC servers' at the same port.\n    Make sure that the requestHandler accepts the paths in question.\n    ", lineno=607, col_offset=-1), lineno=607, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=608, col_offset=17), Name('addr', Param(), lineno=608, col_offset=23), Name('requestHandler', Param(), lineno=608, col_offset=29), Name('logRequests', Param(), lineno=609, col_offset=17), Name('allow_none', Param(), lineno=609, col_offset=35), Name('encoding', Param(), lineno=609, col_offset=53), Name('bind_and_activate', Param(), lineno=609, col_offset=68)], None, None, [Name('SimpleXMLRPCRequestHandler', Load(), lineno=608, col_offset=44), Name('True', Load(), lineno=609, col_offset=29), Name('False', Load(), lineno=609, col_offset=46), Name('None', Load(), lineno=609, col_offset=62), Name('True', Load(), lineno=609, col_offset=86)]), [Expr(Call(Attribute(Name('SimpleXMLRPCServer', Load(), lineno=611, col_offset=8), '__init__', Load(), lineno=611, col_offset=8), [Name('self', Load(), lineno=611, col_offset=36), Name('addr', Load(), lineno=611, col_offset=42), Name('requestHandler', Load(), lineno=611, col_offset=48), Name('logRequests', Load(), lineno=611, col_offset=64), Name('allow_none', Load(), lineno=611, col_offset=77), Name('encoding', Load(), lineno=612, col_offset=36), Name('bind_and_activate', Load(), lineno=612, col_offset=46)], [], None, None, lineno=611, col_offset=8), lineno=611, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=613, col_offset=8), 'dispatchers', Store(), lineno=613, col_offset=8)], Dict([], [], lineno=613, col_offset=27), lineno=613, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=614, col_offset=8), 'allow_none', Store(), lineno=614, col_offset=8)], Name('allow_none', Load(), lineno=614, col_offset=26), lineno=614, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=615, col_offset=8), 'encoding', Store(), lineno=615, col_offset=8)], Name('encoding', Load(), lineno=615, col_offset=24), lineno=615, col_offset=8)], [], lineno=608, col_offset=4), FunctionDef('add_dispatcher', arguments([Name('self', Param(), lineno=617, col_offset=23), Name('path', Param(), lineno=617, col_offset=29), Name('dispatcher', Param(), lineno=617, col_offset=35)], None, None, []), [Assign([Subscript(Attribute(Name('self', Load(), lineno=618, col_offset=8), 'dispatchers', Load(), lineno=618, col_offset=8), Index(Name('path', Load(), lineno=618, col_offset=25)), Store(), lineno=618, col_offset=8)], Name('dispatcher', Load(), lineno=618, col_offset=33), lineno=618, col_offset=8), Return(Name('dispatcher', Load(), lineno=619, col_offset=15), lineno=619, col_offset=8)], [], lineno=617, col_offset=4), FunctionDef('get_dispatcher', arguments([Name('self', Param(), lineno=621, col_offset=23), Name('path', Param(), lineno=621, col_offset=29)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=622, col_offset=15), 'dispatchers', Load(), lineno=622, col_offset=15), Index(Name('path', Load(), lineno=622, col_offset=32)), Load(), lineno=622, col_offset=15), lineno=622, col_offset=8)], [], lineno=621, col_offset=4), FunctionDef('_marshaled_dispatch', arguments([Name('self', Param(), lineno=624, col_offset=28), Name('data', Param(), lineno=624, col_offset=34), Name('dispatch_method', Param(), lineno=624, col_offset=40), Name('path', Param(), lineno=624, col_offset=64)], None, None, [Name('None', Load(), lineno=624, col_offset=58), Name('None', Load(), lineno=624, col_offset=71)]), [TryExcept([Assign([Name('response', Store(), lineno=626, col_offset=12)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=626, col_offset=23), 'dispatchers', Load(), lineno=626, col_offset=23), Index(Name('path', Load(), lineno=626, col_offset=40)), Load(), lineno=626, col_offset=23), '_marshaled_dispatch', Load(), lineno=626, col_offset=23), [Name('data', Load(), lineno=627, col_offset=15), Name('dispatch_method', Load(), lineno=627, col_offset=21), Name('path', Load(), lineno=627, col_offset=38)], [], None, None, lineno=626, col_offset=23), lineno=626, col_offset=12)], [ExceptHandler(None, None, [Assign([Tuple([Name('exc_type', Store(), lineno=632, col_offset=12), Name('exc_value', Store(), lineno=632, col_offset=22)], Store(), lineno=632, col_offset=12)], Subscript(Call(Attribute(Name('sys', Load(), lineno=632, col_offset=34), 'exc_info', Load(), lineno=632, col_offset=34), [], [], None, None, lineno=632, col_offset=34), Slice(None, Num(2, lineno=632, col_offset=50), None), Load(), lineno=632, col_offset=34), lineno=632, col_offset=12), Assign([Name('response', Store(), lineno=633, col_offset=12)], Call(Attribute(Name('xmlrpclib', Load(), lineno=633, col_offset=23), 'dumps', Load(), lineno=633, col_offset=23), [Call(Attribute(Name('xmlrpclib', Load(), lineno=634, col_offset=16), 'Fault', Load(), lineno=634, col_offset=16), [Num(1, lineno=634, col_offset=32), BinOp(Str('%s:%s', lineno=634, col_offset=35), Mod(), Tuple([Name('exc_type', Load(), lineno=634, col_offset=46), Name('exc_value', Load(), lineno=634, col_offset=56)], Load(), lineno=634, col_offset=46), lineno=634, col_offset=35)], [], None, None, lineno=634, col_offset=16)], [keyword('encoding', Attribute(Name('self', Load(), lineno=635, col_offset=25), 'encoding', Load(), lineno=635, col_offset=25)), keyword('allow_none', Attribute(Name('self', Load(), lineno=635, col_offset=51), 'allow_none', Load(), lineno=635, col_offset=51))], None, None, lineno=633, col_offset=23), lineno=633, col_offset=12)], lineno=628, col_offset=8)], [], lineno=625, col_offset=8), Return(Name('response', Load(), lineno=636, col_offset=15), lineno=636, col_offset=8)], [], lineno=624, col_offset=4)], [], lineno=600, col_offset=0), ClassDef('CGIXMLRPCRequestHandler', [Name('SimpleXMLRPCDispatcher', Load(), lineno=638, col_offset=30)], [Expr(Str('Simple handler for XML-RPC data passed through CGI.', lineno=639, col_offset=4), lineno=639, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=641, col_offset=17), Name('allow_none', Param(), lineno=641, col_offset=23), Name('encoding', Param(), lineno=641, col_offset=41)], None, None, [Name('False', Load(), lineno=641, col_offset=34), Name('None', Load(), lineno=641, col_offset=50)]), [Expr(Call(Attribute(Name('SimpleXMLRPCDispatcher', Load(), lineno=642, col_offset=8), '__init__', Load(), lineno=642, col_offset=8), [Name('self', Load(), lineno=642, col_offset=40), Name('allow_none', Load(), lineno=642, col_offset=46), Name('encoding', Load(), lineno=642, col_offset=58)], [], None, None, lineno=642, col_offset=8), lineno=642, col_offset=8)], [], lineno=641, col_offset=4), FunctionDef('handle_xmlrpc', arguments([Name('self', Param(), lineno=644, col_offset=22), Name('request_text', Param(), lineno=644, col_offset=28)], None, None, []), [Expr(Str('Handle a single XML-RPC request', lineno=645, col_offset=8), lineno=645, col_offset=8), Assign([Name('response', Store(), lineno=647, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=647, col_offset=19), '_marshaled_dispatch', Load(), lineno=647, col_offset=19), [Name('request_text', Load(), lineno=647, col_offset=44)], [], None, None, lineno=647, col_offset=19), lineno=647, col_offset=8), Print(None, [Str('Content-Type: text/xml', lineno=649, col_offset=14)], True, lineno=649, col_offset=8), Print(None, [BinOp(Str('Content-Length: %d', lineno=650, col_offset=14), Mod(), Call(Name('len', Load(), lineno=650, col_offset=37), [Name('response', Load(), lineno=650, col_offset=41)], [], None, None, lineno=650, col_offset=37), lineno=650, col_offset=14)], True, lineno=650, col_offset=8), Print(None, [], True, lineno=651, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=652, col_offset=8), 'stdout', Load(), lineno=652, col_offset=8), 'write', Load(), lineno=652, col_offset=8), [Name('response', Load(), lineno=652, col_offset=25)], [], None, None, lineno=652, col_offset=8), lineno=652, col_offset=8)], [], lineno=644, col_offset=4), FunctionDef('handle_get', arguments([Name('self', Param(), lineno=654, col_offset=19)], None, None, []), [Expr(Str('Handle a single HTTP GET request.\n\n        Default implementation indicates an error because\n        XML-RPC uses the POST method.\n        ', lineno=659, col_offset=-1), lineno=659, col_offset=-1), Assign([Name('code', Store(), lineno=661, col_offset=8)], Num(400, lineno=661, col_offset=15), lineno=661, col_offset=8), Assign([Tuple([Name('message', Store(), lineno=662, col_offset=8), Name('explain', Store(), lineno=662, col_offset=17)], Store(), lineno=662, col_offset=8)], Subscript(Attribute(Attribute(Name('BaseHTTPServer', Load(), lineno=663, col_offset=17), 'BaseHTTPRequestHandler', Load(), lineno=663, col_offset=17), 'responses', Load(), lineno=663, col_offset=17), Index(Name('code', Load(), lineno=663, col_offset=65)), Load(), lineno=663, col_offset=17), lineno=662, col_offset=8), Assign([Name('response', Store(), lineno=665, col_offset=8)], BinOp(Attribute(Name('BaseHTTPServer', Load(), lineno=665, col_offset=19), 'DEFAULT_ERROR_MESSAGE', Load(), lineno=665, col_offset=19), Mod(), Dict([Str('code', lineno=667, col_offset=13), Str('message', lineno=668, col_offset=13), Str('explain', lineno=669, col_offset=13)], [Name('code', Load(), lineno=667, col_offset=22), Name('message', Load(), lineno=668, col_offset=25), Name('explain', Load(), lineno=669, col_offset=25)], lineno=666, col_offset=12), lineno=665, col_offset=19), lineno=665, col_offset=8), Print(None, [BinOp(Str('Status: %d %s', lineno=671, col_offset=14), Mod(), Tuple([Name('code', Load(), lineno=671, col_offset=33), Name('message', Load(), lineno=671, col_offset=39)], Load(), lineno=671, col_offset=33), lineno=671, col_offset=14)], True, lineno=671, col_offset=8), Print(None, [BinOp(Str('Content-Type: %s', lineno=672, col_offset=14), Mod(), Attribute(Name('BaseHTTPServer', Load(), lineno=672, col_offset=35), 'DEFAULT_ERROR_CONTENT_TYPE', Load(), lineno=672, col_offset=35), lineno=672, col_offset=14)], True, lineno=672, col_offset=8), Print(None, [BinOp(Str('Content-Length: %d', lineno=673, col_offset=14), Mod(), Call(Name('len', Load(), lineno=673, col_offset=37), [Name('response', Load(), lineno=673, col_offset=41)], [], None, None, lineno=673, col_offset=37), lineno=673, col_offset=14)], True, lineno=673, col_offset=8), Print(None, [], True, lineno=674, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=675, col_offset=8), 'stdout', Load(), lineno=675, col_offset=8), 'write', Load(), lineno=675, col_offset=8), [Name('response', Load(), lineno=675, col_offset=25)], [], None, None, lineno=675, col_offset=8), lineno=675, col_offset=8)], [], lineno=654, col_offset=4), FunctionDef('handle_request', arguments([Name('self', Param(), lineno=677, col_offset=23), Name('request_text', Param(), lineno=677, col_offset=29)], None, None, [Name('None', Load(), lineno=677, col_offset=44)]), [Expr(Str('Handle a single XML-RPC request passed through a CGI post method.\n\n        If no XML data is given then it is read from stdin. The resulting\n        XML-RPC response is printed to stdout along with the correct HTTP\n        headers.\n        ', lineno=683, col_offset=-1), lineno=683, col_offset=-1), If(BoolOp(And(), [Compare(Name('request_text', Load(), lineno=685, col_offset=11), [Is()], [Name('None', Load(), lineno=685, col_offset=27)], lineno=685, col_offset=11), Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=686, col_offset=12), 'environ', Load(), lineno=686, col_offset=12), 'get', Load(), lineno=686, col_offset=12), [Str('REQUEST_METHOD', lineno=686, col_offset=27), Name('None', Load(), lineno=686, col_offset=45)], [], None, None, lineno=686, col_offset=12), [Eq()], [Str('GET', lineno=686, col_offset=54)], lineno=686, col_offset=12)], lineno=685, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=687, col_offset=12), 'handle_get', Load(), lineno=687, col_offset=12), [], [], None, None, lineno=687, col_offset=12), lineno=687, col_offset=12)], [TryExcept([Assign([Name('length', Store(), lineno=691, col_offset=16)], Call(Name('int', Load(), lineno=691, col_offset=25), [Call(Attribute(Attribute(Name('os', Load(), lineno=691, col_offset=29), 'environ', Load(), lineno=691, col_offset=29), 'get', Load(), lineno=691, col_offset=29), [Str('CONTENT_LENGTH', lineno=691, col_offset=44), Name('None', Load(), lineno=691, col_offset=62)], [], None, None, lineno=691, col_offset=29)], [], None, None, lineno=691, col_offset=25), lineno=691, col_offset=16)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=692, col_offset=20), Name('ValueError', Load(), lineno=692, col_offset=31)], Load(), lineno=692, col_offset=20), None, [Assign([Name('length', Store(), lineno=693, col_offset=16)], Num(-1, lineno=693, col_offset=26), lineno=693, col_offset=16)], lineno=692, col_offset=12)], [], lineno=690, col_offset=12), If(Compare(Name('request_text', Load(), lineno=694, col_offset=15), [Is()], [Name('None', Load(), lineno=694, col_offset=31)], lineno=694, col_offset=15), [Assign([Name('request_text', Store(), lineno=695, col_offset=16)], Call(Attribute(Attribute(Name('sys', Load(), lineno=695, col_offset=31), 'stdin', Load(), lineno=695, col_offset=31), 'read', Load(), lineno=695, col_offset=31), [Name('length', Load(), lineno=695, col_offset=46)], [], None, None, lineno=695, col_offset=31), lineno=695, col_offset=16)], [], lineno=694, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=697, col_offset=12), 'handle_xmlrpc', Load(), lineno=697, col_offset=12), [Name('request_text', Load(), lineno=697, col_offset=31)], [], None, None, lineno=697, col_offset=12), lineno=697, col_offset=12)], lineno=685, col_offset=8)], [], lineno=677, col_offset=4)], [], lineno=638, col_offset=0), If(Compare(Name('__name__', Load(), lineno=699, col_offset=3), [Eq()], [Str('__main__', lineno=699, col_offset=15)], lineno=699, col_offset=3), [Print(None, [Str('Running XML-RPC server on port 8000', lineno=700, col_offset=10)], True, lineno=700, col_offset=4), Assign([Name('server', Store(), lineno=701, col_offset=4)], Call(Name('SimpleXMLRPCServer', Load(), lineno=701, col_offset=13), [Tuple([Str('localhost', lineno=701, col_offset=33), Num(8000, lineno=701, col_offset=46)], Load(), lineno=701, col_offset=33)], [], None, None, lineno=701, col_offset=13), lineno=701, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=702, col_offset=4), 'register_function', Load(), lineno=702, col_offset=4), [Name('pow', Load(), lineno=702, col_offset=29)], [], None, None, lineno=702, col_offset=4), lineno=702, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=703, col_offset=4), 'register_function', Load(), lineno=703, col_offset=4), [Lambda(arguments([Name('x', Param(), lineno=703, col_offset=36), Name('y', Param(), lineno=703, col_offset=38)], None, None, []), BinOp(Name('x', Load(), lineno=703, col_offset=41), Add(), Name('y', Load(), lineno=703, col_offset=43), lineno=703, col_offset=41), lineno=703, col_offset=29), Str('add', lineno=703, col_offset=46)], [], None, None, lineno=703, col_offset=4), lineno=703, col_offset=4), Expr(Call(Attribute(Name('server', Load(), lineno=704, col_offset=4), 'serve_forever', Load(), lineno=704, col_offset=4), [], [], None, None, lineno=704, col_offset=4), lineno=704, col_offset=4)], [], lineno=699, col_offset=0)])
