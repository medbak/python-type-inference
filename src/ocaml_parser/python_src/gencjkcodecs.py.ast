Module([Import([alias('os', None), alias('string', None)], lineno=1, col_offset=0), Assign([Name('codecs', Store(), lineno=3, col_offset=0)], Dict([Str('cn', lineno=4, col_offset=4), Str('tw', lineno=5, col_offset=4), Str('hk', lineno=6, col_offset=4), Str('jp', lineno=7, col_offset=4), Str('kr', lineno=9, col_offset=4), Str('iso2022', lineno=10, col_offset=4)], [Tuple([Str('gb2312', lineno=4, col_offset=11), Str('gbk', lineno=4, col_offset=21), Str('gb18030', lineno=4, col_offset=28), Str('hz', lineno=4, col_offset=39)], Load(), lineno=4, col_offset=11), Tuple([Str('big5', lineno=5, col_offset=11), Str('cp950', lineno=5, col_offset=19)], Load(), lineno=5, col_offset=11), Tuple([Str('big5hkscs', lineno=6, col_offset=11)], Load(), lineno=6, col_offset=11), Tuple([Str('cp932', lineno=7, col_offset=11), Str('shift_jis', lineno=7, col_offset=20), Str('euc_jp', lineno=7, col_offset=33), Str('euc_jisx0213', lineno=7, col_offset=43), Str('shift_jisx0213', lineno=7, col_offset=59), Str('euc_jis_2004', lineno=8, col_offset=11), Str('shift_jis_2004', lineno=8, col_offset=27)], Load(), lineno=7, col_offset=11), Tuple([Str('cp949', lineno=9, col_offset=11), Str('euc_kr', lineno=9, col_offset=20), Str('johab', lineno=9, col_offset=30)], Load(), lineno=9, col_offset=11), Tuple([Str('iso2022_jp', lineno=10, col_offset=16), Str('iso2022_jp_1', lineno=10, col_offset=30), Str('iso2022_jp_2', lineno=10, col_offset=46), Str('iso2022_jp_2004', lineno=11, col_offset=16), Str('iso2022_jp_3', lineno=11, col_offset=35), Str('iso2022_jp_ext', lineno=11, col_offset=51), Str('iso2022_kr', lineno=12, col_offset=16)], Load(), lineno=10, col_offset=16)], lineno=3, col_offset=9), lineno=3, col_offset=0), Assign([Name('TEMPLATE', Store(), lineno=15, col_offset=0)], Call(Attribute(Name('string', Load(), lineno=15, col_offset=11), 'Template', Load(), lineno=15, col_offset=11), [Str("#\n# $encoding.py: Python Unicode Codec for $ENCODING\n#\n# Written by Hye-Shik Chang <perky@FreeBSD.org>\n#\n\nimport _codecs_$owner, codecs\nimport _multibytecodec as mbc\n\ncodec = _codecs_$owner.getcodec('$encoding')\n\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\n\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\n\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\n\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='$encoding',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n", lineno=55, col_offset=-1)], [], None, None, lineno=15, col_offset=11), lineno=15, col_offset=0), FunctionDef('gencodecs', arguments([Name('prefix', Param(), lineno=57, col_offset=14)], None, None, []), [For(Tuple([Name('loc', Store(), lineno=58, col_offset=8), Name('encodings', Store(), lineno=58, col_offset=13)], Store(), lineno=58, col_offset=8), Call(Attribute(Name('codecs', Load(), lineno=58, col_offset=26), 'iteritems', Load(), lineno=58, col_offset=26), [], [], None, None, lineno=58, col_offset=26), [For(Name('enc', Store(), lineno=59, col_offset=12), Name('encodings', Load(), lineno=59, col_offset=19), [Assign([Name('code', Store(), lineno=60, col_offset=12)], Call(Attribute(Name('TEMPLATE', Load(), lineno=60, col_offset=19), 'substitute', Load(), lineno=60, col_offset=19), [], [keyword('ENCODING', Call(Attribute(Name('enc', Load(), lineno=60, col_offset=48), 'upper', Load(), lineno=60, col_offset=48), [], [], None, None, lineno=60, col_offset=48)), keyword('encoding', Call(Attribute(Name('enc', Load(), lineno=61, col_offset=48), 'lower', Load(), lineno=61, col_offset=48), [], [], None, None, lineno=61, col_offset=48)), keyword('owner', Name('loc', Load(), lineno=62, col_offset=45))], None, None, lineno=60, col_offset=19), lineno=60, col_offset=12), Assign([Name('codecpath', Store(), lineno=63, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=63, col_offset=24), 'path', Load(), lineno=63, col_offset=24), 'join', Load(), lineno=63, col_offset=24), [Name('prefix', Load(), lineno=63, col_offset=37), BinOp(Name('enc', Load(), lineno=63, col_offset=45), Add(), Str('.py', lineno=63, col_offset=51), lineno=63, col_offset=45)], [], None, None, lineno=63, col_offset=24), lineno=63, col_offset=12), Expr(Call(Attribute(Call(Name('open', Load(), lineno=64, col_offset=12), [Name('codecpath', Load(), lineno=64, col_offset=17), Str('w', lineno=64, col_offset=28)], [], None, None, lineno=64, col_offset=12), 'write', Load(), lineno=64, col_offset=12), [Name('code', Load(), lineno=64, col_offset=39)], [], None, None, lineno=64, col_offset=12), lineno=64, col_offset=12)], [], lineno=59, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=57, col_offset=0), If(Compare(Name('__name__', Load(), lineno=66, col_offset=3), [Eq()], [Str('__main__', lineno=66, col_offset=15)], lineno=66, col_offset=3), [Import([alias('sys', None)], lineno=67, col_offset=4), Expr(Call(Name('gencodecs', Load(), lineno=68, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=68, col_offset=14), 'argv', Load(), lineno=68, col_offset=14), Index(Num(1, lineno=68, col_offset=23)), Load(), lineno=68, col_offset=14)], [], None, None, lineno=68, col_offset=4), lineno=68, col_offset=4)], [], lineno=66, col_offset=0)])
