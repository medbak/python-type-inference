Module([Expr(Str(' This module tries to retrieve as much platform-identifying data as\n    possible. It makes this information available via function APIs.\n\n    If called from the command line, it prints the platform\n    information concatenated as single string to stdout. The output\n    format is useable as part of a filename.\n\n', lineno=10, col_offset=-1), lineno=10, col_offset=-1), Assign([Name('__copyright__', Store(), lineno=93, col_offset=0)], Str('\n    Copyright (c) 1999-2000, Marc-Andre Lemburg; mailto:mal@lemburg.com\n    Copyright (c) 2000-2010, eGenix.com Software GmbH; mailto:info@egenix.com\n\n    Permission to use, copy, modify, and distribute this software and its\n    documentation for any purpose and without fee or royalty is hereby granted,\n    provided that the above copyright notice appear in all copies and that\n    both that copyright notice and this permission notice appear in\n    supporting documentation or portions thereof, including modifications,\n    that you make.\n\n    EGENIX.COM SOFTWARE GMBH DISCLAIMS ALL WARRANTIES WITH REGARD TO\n    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n    FITNESS, IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,\n    INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n    FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n    WITH THE USE OR PERFORMANCE OF THIS SOFTWARE !\n\n', lineno=112, col_offset=-1), lineno=93, col_offset=0), Assign([Name('__version__', Store(), lineno=114, col_offset=0)], Str('1.0.7', lineno=114, col_offset=14), lineno=114, col_offset=0), Import([alias('sys', None), alias('string', None), alias('os', None), alias('re', None)], lineno=116, col_offset=0), TryExcept([Assign([Name('DEV_NULL', Store(), lineno=122, col_offset=4)], Attribute(Name('os', Load(), lineno=122, col_offset=15), 'devnull', Load(), lineno=122, col_offset=15), lineno=122, col_offset=4)], [ExceptHandler(Name('AttributeError', Load(), lineno=123, col_offset=7), None, [If(Compare(Attribute(Name('sys', Load(), lineno=126, col_offset=7), 'platform', Load(), lineno=126, col_offset=7), [In()], [Tuple([Str('dos', lineno=126, col_offset=24), Str('win32', lineno=126, col_offset=30), Str('win16', lineno=126, col_offset=38), Str('os2', lineno=126, col_offset=46)], Load(), lineno=126, col_offset=24)], lineno=126, col_offset=7), [Assign([Name('DEV_NULL', Store(), lineno=128, col_offset=8)], Str('NUL', lineno=128, col_offset=19), lineno=128, col_offset=8)], [Assign([Name('DEV_NULL', Store(), lineno=131, col_offset=8)], Str('/dev/null', lineno=131, col_offset=19), lineno=131, col_offset=8)], lineno=126, col_offset=4)], lineno=123, col_offset=0)], [], lineno=121, col_offset=0), Assign([Name('_libc_search', Store(), lineno=135, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=135, col_offset=15), 'compile', Load(), lineno=135, col_offset=15), [Str('(__libc_init)|(GLIBC_([0-9.]+))|(libc(_\\w+)?\\.so(?:\\.(\\d[0-9.]*))?)', lineno=135, col_offset=26)], [], None, None, lineno=135, col_offset=15), lineno=135, col_offset=0), FunctionDef('libc_ver', arguments([Name('executable', Param(), lineno=141, col_offset=13), Name('lib', Param(), lineno=141, col_offset=39), Name('version', Param(), lineno=141, col_offset=46), Name('chunksize', Param(), lineno=143, col_offset=13)], None, None, [Attribute(Name('sys', Load(), lineno=141, col_offset=24), 'executable', Load(), lineno=141, col_offset=24), Str('', lineno=141, col_offset=43), Str('', lineno=141, col_offset=54), Num(2048, lineno=143, col_offset=23)]), [Expr(Str(' Tries to determine the libc version that the file executable\n        (which defaults to the Python interpreter) is linked against.\n\n        Returns a tuple of strings (lib,version) which default to the\n        given parameters in case the lookup fails.\n\n        Note that the function has intimate knowledge of how different\n        libc versions add symbols to the executable and thus is probably\n        only useable for executables compiled using gcc.\n\n        The file is read and scanned in chunks of chunksize bytes.\n\n    ', lineno=157, col_offset=-1), lineno=157, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=158, col_offset=7), [Attribute(Name('os', Load(), lineno=158, col_offset=15), 'path', Load(), lineno=158, col_offset=15), Str('realpath', lineno=158, col_offset=24)], [], None, None, lineno=158, col_offset=7), [Assign([Name('executable', Store(), lineno=162, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=162, col_offset=21), 'path', Load(), lineno=162, col_offset=21), 'realpath', Load(), lineno=162, col_offset=21), [Name('executable', Load(), lineno=162, col_offset=38)], [], None, None, lineno=162, col_offset=21), lineno=162, col_offset=8)], [], lineno=158, col_offset=4), Assign([Name('f', Store(), lineno=163, col_offset=4)], Call(Name('open', Load(), lineno=163, col_offset=8), [Name('executable', Load(), lineno=163, col_offset=13), Str('rb', lineno=163, col_offset=24)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=4), Assign([Name('binary', Store(), lineno=164, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=164, col_offset=13), 'read', Load(), lineno=164, col_offset=13), [Name('chunksize', Load(), lineno=164, col_offset=20)], [], None, None, lineno=164, col_offset=13), lineno=164, col_offset=4), Assign([Name('pos', Store(), lineno=165, col_offset=4)], Num(0, lineno=165, col_offset=10), lineno=165, col_offset=4), While(Num(1, lineno=166, col_offset=10), [Assign([Name('m', Store(), lineno=167, col_offset=8)], Call(Attribute(Name('_libc_search', Load(), lineno=167, col_offset=12), 'search', Load(), lineno=167, col_offset=12), [Name('binary', Load(), lineno=167, col_offset=32), Name('pos', Load(), lineno=167, col_offset=39)], [], None, None, lineno=167, col_offset=12), lineno=167, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=168, col_offset=15), lineno=168, col_offset=11), [Assign([Name('binary', Store(), lineno=169, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=169, col_offset=21), 'read', Load(), lineno=169, col_offset=21), [Name('chunksize', Load(), lineno=169, col_offset=28)], [], None, None, lineno=169, col_offset=21), lineno=169, col_offset=12), If(UnaryOp(Not(), Name('binary', Load(), lineno=170, col_offset=19), lineno=170, col_offset=15), [Break( lineno=171, col_offset=16)], [], lineno=170, col_offset=12), Assign([Name('pos', Store(), lineno=172, col_offset=12)], Num(0, lineno=172, col_offset=18), lineno=172, col_offset=12), Continue( lineno=173, col_offset=12)], [], lineno=168, col_offset=8), Assign([Tuple([Name('libcinit', Store(), lineno=174, col_offset=8), Name('glibc', Store(), lineno=174, col_offset=17), Name('glibcversion', Store(), lineno=174, col_offset=23), Name('so', Store(), lineno=174, col_offset=36), Name('threads', Store(), lineno=174, col_offset=39), Name('soversion', Store(), lineno=174, col_offset=47)], Store(), lineno=174, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=174, col_offset=59), 'groups', Load(), lineno=174, col_offset=59), [], [], None, None, lineno=174, col_offset=59), lineno=174, col_offset=8), If(BoolOp(And(), [Name('libcinit', Load(), lineno=175, col_offset=11), UnaryOp(Not(), Name('lib', Load(), lineno=175, col_offset=28), lineno=175, col_offset=24)], lineno=175, col_offset=11), [Assign([Name('lib', Store(), lineno=176, col_offset=12)], Str('libc', lineno=176, col_offset=18), lineno=176, col_offset=12)], [If(Name('glibc', Load(), lineno=177, col_offset=13), [If(Compare(Name('lib', Load(), lineno=178, col_offset=15), [NotEq()], [Str('glibc', lineno=178, col_offset=22)], lineno=178, col_offset=15), [Assign([Name('lib', Store(), lineno=179, col_offset=16)], Str('glibc', lineno=179, col_offset=22), lineno=179, col_offset=16), Assign([Name('version', Store(), lineno=180, col_offset=16)], Name('glibcversion', Load(), lineno=180, col_offset=26), lineno=180, col_offset=16)], [If(Compare(Name('glibcversion', Load(), lineno=181, col_offset=17), [Gt()], [Name('version', Load(), lineno=181, col_offset=32)], lineno=181, col_offset=17), [Assign([Name('version', Store(), lineno=182, col_offset=16)], Name('glibcversion', Load(), lineno=182, col_offset=26), lineno=182, col_offset=16)], [], lineno=181, col_offset=17)], lineno=178, col_offset=12)], [If(Name('so', Load(), lineno=183, col_offset=13), [If(Compare(Name('lib', Load(), lineno=184, col_offset=15), [NotEq()], [Str('glibc', lineno=184, col_offset=22)], lineno=184, col_offset=15), [Assign([Name('lib', Store(), lineno=185, col_offset=16)], Str('libc', lineno=185, col_offset=22), lineno=185, col_offset=16), If(Compare(Name('soversion', Load(), lineno=186, col_offset=19), [Gt()], [Name('version', Load(), lineno=186, col_offset=31)], lineno=186, col_offset=19), [Assign([Name('version', Store(), lineno=187, col_offset=20)], Name('soversion', Load(), lineno=187, col_offset=30), lineno=187, col_offset=20)], [], lineno=186, col_offset=16), If(BoolOp(And(), [Name('threads', Load(), lineno=188, col_offset=19), Compare(Subscript(Name('version', Load(), lineno=188, col_offset=31), Slice(UnaryOp(USub(), Call(Name('len', Load(), lineno=188, col_offset=40), [Name('threads', Load(), lineno=188, col_offset=44)], [], None, None, lineno=188, col_offset=40), lineno=188, col_offset=39), None, None), Load(), lineno=188, col_offset=31), [NotEq()], [Name('threads', Load(), lineno=188, col_offset=58)], lineno=188, col_offset=31)], lineno=188, col_offset=19), [Assign([Name('version', Store(), lineno=189, col_offset=20)], BinOp(Name('version', Load(), lineno=189, col_offset=30), Add(), Name('threads', Load(), lineno=189, col_offset=40), lineno=189, col_offset=30), lineno=189, col_offset=20)], [], lineno=188, col_offset=16)], [], lineno=184, col_offset=12)], [], lineno=183, col_offset=13)], lineno=177, col_offset=13)], lineno=175, col_offset=8), Assign([Name('pos', Store(), lineno=190, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=190, col_offset=14), 'end', Load(), lineno=190, col_offset=14), [], [], None, None, lineno=190, col_offset=14), lineno=190, col_offset=8)], [], lineno=166, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=191, col_offset=4), 'close', Load(), lineno=191, col_offset=4), [], [], None, None, lineno=191, col_offset=4), lineno=191, col_offset=4), Return(Tuple([Name('lib', Load(), lineno=192, col_offset=11), Name('version', Load(), lineno=192, col_offset=15)], Load(), lineno=192, col_offset=11), lineno=192, col_offset=4)], [], lineno=141, col_offset=0), FunctionDef('_dist_try_harder', arguments([Name('distname', Param(), lineno=194, col_offset=21), Name('version', Param(), lineno=194, col_offset=30), Name('id', Param(), lineno=194, col_offset=38)], None, None, []), [Expr(Str(' Tries some special tricks to get the distribution\n        information in case the default method fails.\n\n        Currently supports older SuSE Linux, Caldera OpenLinux and\n        Slackware Linux distributions.\n\n    ', lineno=202, col_offset=-1), lineno=202, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=203, col_offset=7), 'path', Load(), lineno=203, col_offset=7), 'exists', Load(), lineno=203, col_offset=7), [Str('/var/adm/inst-log/info', lineno=203, col_offset=22)], [], None, None, lineno=203, col_offset=7), [Assign([Name('info', Store(), lineno=205, col_offset=8)], Call(Attribute(Call(Name('open', Load(), lineno=205, col_offset=15), [Str('/var/adm/inst-log/info', lineno=205, col_offset=20)], [], None, None, lineno=205, col_offset=15), 'readlines', Load(), lineno=205, col_offset=15), [], [], None, None, lineno=205, col_offset=15), lineno=205, col_offset=8), Assign([Name('distname', Store(), lineno=206, col_offset=8)], Str('SuSE', lineno=206, col_offset=19), lineno=206, col_offset=8), For(Name('line', Store(), lineno=207, col_offset=12), Name('info', Load(), lineno=207, col_offset=20), [Assign([Name('tv', Store(), lineno=208, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=208, col_offset=17), 'split', Load(), lineno=208, col_offset=17), [Name('line', Load(), lineno=208, col_offset=30)], [], None, None, lineno=208, col_offset=17), lineno=208, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=209, col_offset=15), [Name('tv', Load(), lineno=209, col_offset=19)], [], None, None, lineno=209, col_offset=15), [Eq()], [Num(2, lineno=209, col_offset=26)], lineno=209, col_offset=15), [Assign([Tuple([Name('tag', Store(), lineno=210, col_offset=16), Name('value', Store(), lineno=210, col_offset=20)], Store(), lineno=210, col_offset=16)], Name('tv', Load(), lineno=210, col_offset=28), lineno=210, col_offset=16)], [Continue( lineno=212, col_offset=16)], lineno=209, col_offset=12), If(Compare(Name('tag', Load(), lineno=213, col_offset=15), [Eq()], [Str('MIN_DIST_VERSION', lineno=213, col_offset=22)], lineno=213, col_offset=15), [Assign([Name('version', Store(), lineno=214, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=214, col_offset=26), 'strip', Load(), lineno=214, col_offset=26), [Name('value', Load(), lineno=214, col_offset=39)], [], None, None, lineno=214, col_offset=26), lineno=214, col_offset=16)], [If(Compare(Name('tag', Load(), lineno=215, col_offset=17), [Eq()], [Str('DIST_IDENT', lineno=215, col_offset=24)], lineno=215, col_offset=17), [Assign([Name('values', Store(), lineno=216, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=216, col_offset=25), 'split', Load(), lineno=216, col_offset=25), [Name('value', Load(), lineno=216, col_offset=38), Str('-', lineno=216, col_offset=44)], [], None, None, lineno=216, col_offset=25), lineno=216, col_offset=16), Assign([Name('id', Store(), lineno=217, col_offset=16)], Subscript(Name('values', Load(), lineno=217, col_offset=21), Index(Num(2, lineno=217, col_offset=28)), Load(), lineno=217, col_offset=21), lineno=217, col_offset=16)], [], lineno=215, col_offset=17)], lineno=213, col_offset=12)], [], lineno=207, col_offset=8), Return(Tuple([Name('distname', Load(), lineno=218, col_offset=15), Name('version', Load(), lineno=218, col_offset=24), Name('id', Load(), lineno=218, col_offset=32)], Load(), lineno=218, col_offset=15), lineno=218, col_offset=8)], [], lineno=203, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=220, col_offset=7), 'path', Load(), lineno=220, col_offset=7), 'exists', Load(), lineno=220, col_offset=7), [Str('/etc/.installed', lineno=220, col_offset=22)], [], None, None, lineno=220, col_offset=7), [Assign([Name('info', Store(), lineno=222, col_offset=8)], Call(Attribute(Call(Name('open', Load(), lineno=222, col_offset=15), [Str('/etc/.installed', lineno=222, col_offset=20)], [], None, None, lineno=222, col_offset=15), 'readlines', Load(), lineno=222, col_offset=15), [], [], None, None, lineno=222, col_offset=15), lineno=222, col_offset=8), For(Name('line', Store(), lineno=223, col_offset=12), Name('info', Load(), lineno=223, col_offset=20), [Assign([Name('pkg', Store(), lineno=224, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=224, col_offset=18), 'split', Load(), lineno=224, col_offset=18), [Name('line', Load(), lineno=224, col_offset=31), Str('-', lineno=224, col_offset=36)], [], None, None, lineno=224, col_offset=18), lineno=224, col_offset=12), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=225, col_offset=15), [Name('pkg', Load(), lineno=225, col_offset=19)], [], None, None, lineno=225, col_offset=15), [GtE()], [Num(2, lineno=225, col_offset=27)], lineno=225, col_offset=15), Compare(Subscript(Name('pkg', Load(), lineno=225, col_offset=33), Index(Num(0, lineno=225, col_offset=37)), Load(), lineno=225, col_offset=33), [Eq()], [Str('OpenLinux', lineno=225, col_offset=43)], lineno=225, col_offset=33)], lineno=225, col_offset=15), [Return(Tuple([Str('OpenLinux', lineno=228, col_offset=23), Subscript(Name('pkg', Load(), lineno=228, col_offset=35), Index(Num(1, lineno=228, col_offset=39)), Load(), lineno=228, col_offset=35), Name('id', Load(), lineno=228, col_offset=42)], Load(), lineno=228, col_offset=23), lineno=228, col_offset=16)], [], lineno=225, col_offset=12)], [], lineno=223, col_offset=8)], [], lineno=220, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=230, col_offset=7), 'path', Load(), lineno=230, col_offset=7), 'isdir', Load(), lineno=230, col_offset=7), [Str('/usr/lib/setup', lineno=230, col_offset=21)], [], None, None, lineno=230, col_offset=7), [Assign([Name('verfiles', Store(), lineno=232, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=232, col_offset=19), 'listdir', Load(), lineno=232, col_offset=19), [Str('/usr/lib/setup', lineno=232, col_offset=30)], [], None, None, lineno=232, col_offset=19), lineno=232, col_offset=8), For(Name('n', Store(), lineno=233, col_offset=12), Call(Name('range', Load(), lineno=233, col_offset=17), [BinOp(Call(Name('len', Load(), lineno=233, col_offset=23), [Name('verfiles', Load(), lineno=233, col_offset=27)], [], None, None, lineno=233, col_offset=23), Sub(), Num(1, lineno=233, col_offset=37), lineno=233, col_offset=23), Num(-1, lineno=233, col_offset=41), Num(-1, lineno=233, col_offset=45)], [], None, None, lineno=233, col_offset=17), [If(Compare(Subscript(Subscript(Name('verfiles', Load(), lineno=234, col_offset=15), Index(Name('n', Load(), lineno=234, col_offset=24)), Load(), lineno=234, col_offset=15), Slice(None, Num(14, lineno=234, col_offset=28), None), Load(), lineno=234, col_offset=15), [NotEq()], [Str('slack-version-', lineno=234, col_offset=35)], lineno=234, col_offset=15), [Delete([Subscript(Name('verfiles', Load(), lineno=235, col_offset=20), Index(Name('n', Load(), lineno=235, col_offset=29)), Del(), lineno=235, col_offset=20)], lineno=235, col_offset=16)], [], lineno=234, col_offset=12)], [], lineno=233, col_offset=8), If(Name('verfiles', Load(), lineno=236, col_offset=11), [Expr(Call(Attribute(Name('verfiles', Load(), lineno=237, col_offset=12), 'sort', Load(), lineno=237, col_offset=12), [], [], None, None, lineno=237, col_offset=12), lineno=237, col_offset=12), Assign([Name('distname', Store(), lineno=238, col_offset=12)], Str('slackware', lineno=238, col_offset=23), lineno=238, col_offset=12), Assign([Name('version', Store(), lineno=239, col_offset=12)], Subscript(Subscript(Name('verfiles', Load(), lineno=239, col_offset=22), Index(Num(-1, lineno=239, col_offset=32)), Load(), lineno=239, col_offset=22), Slice(Num(14, lineno=239, col_offset=35), None, None), Load(), lineno=239, col_offset=22), lineno=239, col_offset=12), Return(Tuple([Name('distname', Load(), lineno=240, col_offset=19), Name('version', Load(), lineno=240, col_offset=28), Name('id', Load(), lineno=240, col_offset=36)], Load(), lineno=240, col_offset=19), lineno=240, col_offset=12)], [], lineno=236, col_offset=8)], [], lineno=230, col_offset=4), Return(Tuple([Name('distname', Load(), lineno=242, col_offset=11), Name('version', Load(), lineno=242, col_offset=20), Name('id', Load(), lineno=242, col_offset=28)], Load(), lineno=242, col_offset=11), lineno=242, col_offset=4)], [], lineno=194, col_offset=0), Assign([Name('_release_filename', Store(), lineno=244, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=244, col_offset=20), 'compile', Load(), lineno=244, col_offset=20), [Str('(\\w+)[-_](release|version)', lineno=244, col_offset=31)], [], None, None, lineno=244, col_offset=20), lineno=244, col_offset=0), Assign([Name('_lsb_release_version', Store(), lineno=245, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=245, col_offset=23), 'compile', Load(), lineno=245, col_offset=23), [Str('(.+) release ([\\d.]+)[^(]*(?:\\((.+)\\))?', lineno=245, col_offset=34)], [], None, None, lineno=245, col_offset=23), lineno=245, col_offset=0), Assign([Name('_release_version', Store(), lineno=249, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=249, col_offset=19), 'compile', Load(), lineno=249, col_offset=19), [Str('([^0-9]+)(?: release )?([\\d.]+)[^(]*(?:\\((.+)\\))?', lineno=249, col_offset=30)], [], None, None, lineno=249, col_offset=19), lineno=249, col_offset=0), Assign([Name('_supported_dists', Store(), lineno=259, col_offset=0)], Tuple([Str('SuSE', lineno=260, col_offset=4), Str('debian', lineno=260, col_offset=12), Str('fedora', lineno=260, col_offset=22), Str('redhat', lineno=260, col_offset=32), Str('centos', lineno=260, col_offset=42), Str('mandrake', lineno=261, col_offset=4), Str('mandriva', lineno=261, col_offset=16), Str('rocks', lineno=261, col_offset=28), Str('slackware', lineno=261, col_offset=37), Str('yellowdog', lineno=261, col_offset=50), Str('gentoo', lineno=261, col_offset=63), Str('UnitedLinux', lineno=262, col_offset=4), Str('turbolinux', lineno=262, col_offset=19)], Load(), lineno=260, col_offset=4), lineno=259, col_offset=0), FunctionDef('_parse_release_file', arguments([Name('firstline', Param(), lineno=264, col_offset=24)], None, None, []), [Assign([Name('version', Store(), lineno=269, col_offset=4)], Str('', lineno=269, col_offset=14), lineno=269, col_offset=4), Assign([Name('id', Store(), lineno=270, col_offset=4)], Str('', lineno=270, col_offset=9), lineno=270, col_offset=4), Assign([Name('m', Store(), lineno=273, col_offset=4)], Call(Attribute(Name('_lsb_release_version', Load(), lineno=273, col_offset=8), 'match', Load(), lineno=273, col_offset=8), [Name('firstline', Load(), lineno=273, col_offset=35)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=4), If(Compare(Name('m', Load(), lineno=274, col_offset=7), [IsNot()], [Name('None', Load(), lineno=274, col_offset=16)], lineno=274, col_offset=7), [Return(Call(Name('tuple', Load(), lineno=276, col_offset=15), [Call(Attribute(Name('m', Load(), lineno=276, col_offset=21), 'groups', Load(), lineno=276, col_offset=21), [], [], None, None, lineno=276, col_offset=21)], [], None, None, lineno=276, col_offset=15), lineno=276, col_offset=8)], [], lineno=274, col_offset=4), Assign([Name('m', Store(), lineno=279, col_offset=4)], Call(Attribute(Name('_release_version', Load(), lineno=279, col_offset=8), 'match', Load(), lineno=279, col_offset=8), [Name('firstline', Load(), lineno=279, col_offset=31)], [], None, None, lineno=279, col_offset=8), lineno=279, col_offset=4), If(Compare(Name('m', Load(), lineno=280, col_offset=7), [IsNot()], [Name('None', Load(), lineno=280, col_offset=16)], lineno=280, col_offset=7), [Return(Call(Name('tuple', Load(), lineno=281, col_offset=15), [Call(Attribute(Name('m', Load(), lineno=281, col_offset=21), 'groups', Load(), lineno=281, col_offset=21), [], [], None, None, lineno=281, col_offset=21)], [], None, None, lineno=281, col_offset=15), lineno=281, col_offset=8)], [], lineno=280, col_offset=4), Assign([Name('l', Store(), lineno=284, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=284, col_offset=8), 'split', Load(), lineno=284, col_offset=8), [Call(Attribute(Name('string', Load(), lineno=284, col_offset=21), 'strip', Load(), lineno=284, col_offset=21), [Name('firstline', Load(), lineno=284, col_offset=34)], [], None, None, lineno=284, col_offset=21)], [], None, None, lineno=284, col_offset=8), lineno=284, col_offset=4), If(Name('l', Load(), lineno=285, col_offset=7), [Assign([Name('version', Store(), lineno=286, col_offset=8)], Subscript(Name('l', Load(), lineno=286, col_offset=18), Index(Num(0, lineno=286, col_offset=20)), Load(), lineno=286, col_offset=18), lineno=286, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=287, col_offset=11), [Name('l', Load(), lineno=287, col_offset=15)], [], None, None, lineno=287, col_offset=11), [Gt()], [Num(1, lineno=287, col_offset=20)], lineno=287, col_offset=11), [Assign([Name('id', Store(), lineno=288, col_offset=12)], Subscript(Name('l', Load(), lineno=288, col_offset=17), Index(Num(1, lineno=288, col_offset=19)), Load(), lineno=288, col_offset=17), lineno=288, col_offset=12)], [], lineno=287, col_offset=8)], [], lineno=285, col_offset=4), Return(Tuple([Str('', lineno=289, col_offset=11), Name('version', Load(), lineno=289, col_offset=15), Name('id', Load(), lineno=289, col_offset=24)], Load(), lineno=289, col_offset=11), lineno=289, col_offset=4)], [], lineno=264, col_offset=0), FunctionDef('linux_distribution', arguments([Name('distname', Param(), lineno=291, col_offset=23), Name('version', Param(), lineno=291, col_offset=36), Name('id', Param(), lineno=291, col_offset=48), Name('supported_dists', Param(), lineno=293, col_offset=23), Name('full_distribution_name', Param(), lineno=294, col_offset=23)], None, None, [Str('', lineno=291, col_offset=32), Str('', lineno=291, col_offset=44), Str('', lineno=291, col_offset=51), Name('_supported_dists', Load(), lineno=293, col_offset=39), Num(1, lineno=294, col_offset=46)]), [Expr(Str(' Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        supported_dists may be given to define the set of Linux\n        distributions to look for. It defaults to a list of currently\n        supported Linux distributions identified by their release file\n        name.\n\n        If full_distribution_name is true (default), the full\n        distribution read from the OS is returned. Otherwise the short\n        name taken from supported_dists is used.\n\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n\n    ', lineno=314, col_offset=-1), lineno=314, col_offset=-1), TryExcept([Assign([Name('etc', Store(), lineno=316, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=316, col_offset=14), 'listdir', Load(), lineno=316, col_offset=14), [Str('/etc', lineno=316, col_offset=25)], [], None, None, lineno=316, col_offset=14), lineno=316, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=317, col_offset=11), 'error', Load(), lineno=317, col_offset=11), None, [Return(Tuple([Name('distname', Load(), lineno=319, col_offset=15), Name('version', Load(), lineno=319, col_offset=24), Name('id', Load(), lineno=319, col_offset=32)], Load(), lineno=319, col_offset=15), lineno=319, col_offset=8)], lineno=317, col_offset=4)], [], lineno=315, col_offset=4), Expr(Call(Attribute(Name('etc', Load(), lineno=320, col_offset=4), 'sort', Load(), lineno=320, col_offset=4), [], [], None, None, lineno=320, col_offset=4), lineno=320, col_offset=4), For(Name('file', Store(), lineno=321, col_offset=8), Name('etc', Load(), lineno=321, col_offset=16), [Assign([Name('m', Store(), lineno=322, col_offset=8)], Call(Attribute(Name('_release_filename', Load(), lineno=322, col_offset=12), 'match', Load(), lineno=322, col_offset=12), [Name('file', Load(), lineno=322, col_offset=36)], [], None, None, lineno=322, col_offset=12), lineno=322, col_offset=8), If(Compare(Name('m', Load(), lineno=323, col_offset=11), [IsNot()], [Name('None', Load(), lineno=323, col_offset=20)], lineno=323, col_offset=11), [Assign([Tuple([Name('_distname', Store(), lineno=324, col_offset=12), Name('dummy', Store(), lineno=324, col_offset=22)], Store(), lineno=324, col_offset=12)], Call(Attribute(Name('m', Load(), lineno=324, col_offset=30), 'groups', Load(), lineno=324, col_offset=30), [], [], None, None, lineno=324, col_offset=30), lineno=324, col_offset=12), If(Compare(Name('_distname', Load(), lineno=325, col_offset=15), [In()], [Name('supported_dists', Load(), lineno=325, col_offset=28)], lineno=325, col_offset=15), [Assign([Name('distname', Store(), lineno=326, col_offset=16)], Name('_distname', Load(), lineno=326, col_offset=27), lineno=326, col_offset=16), Break( lineno=327, col_offset=16)], [], lineno=325, col_offset=12)], [], lineno=323, col_offset=8)], [Return(Call(Name('_dist_try_harder', Load(), lineno=329, col_offset=15), [Name('distname', Load(), lineno=329, col_offset=32), Name('version', Load(), lineno=329, col_offset=41), Name('id', Load(), lineno=329, col_offset=49)], [], None, None, lineno=329, col_offset=15), lineno=329, col_offset=8)], lineno=321, col_offset=4), Assign([Name('f', Store(), lineno=332, col_offset=4)], Call(Name('open', Load(), lineno=332, col_offset=8), [BinOp(Str('/etc/', lineno=332, col_offset=13), Add(), Name('file', Load(), lineno=332, col_offset=21), lineno=332, col_offset=13), Str('r', lineno=332, col_offset=27)], [], None, None, lineno=332, col_offset=8), lineno=332, col_offset=4), Assign([Name('firstline', Store(), lineno=333, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=333, col_offset=16), 'readline', Load(), lineno=333, col_offset=16), [], [], None, None, lineno=333, col_offset=16), lineno=333, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=334, col_offset=4), 'close', Load(), lineno=334, col_offset=4), [], [], None, None, lineno=334, col_offset=4), lineno=334, col_offset=4), Assign([Tuple([Name('_distname', Store(), lineno=335, col_offset=4), Name('_version', Store(), lineno=335, col_offset=15), Name('_id', Store(), lineno=335, col_offset=25)], Store(), lineno=335, col_offset=4)], Call(Name('_parse_release_file', Load(), lineno=335, col_offset=31), [Name('firstline', Load(), lineno=335, col_offset=51)], [], None, None, lineno=335, col_offset=31), lineno=335, col_offset=4), If(BoolOp(And(), [Name('_distname', Load(), lineno=337, col_offset=7), Name('full_distribution_name', Load(), lineno=337, col_offset=21)], lineno=337, col_offset=7), [Assign([Name('distname', Store(), lineno=338, col_offset=8)], Name('_distname', Load(), lineno=338, col_offset=19), lineno=338, col_offset=8)], [], lineno=337, col_offset=4), If(Name('_version', Load(), lineno=339, col_offset=7), [Assign([Name('version', Store(), lineno=340, col_offset=8)], Name('_version', Load(), lineno=340, col_offset=18), lineno=340, col_offset=8)], [], lineno=339, col_offset=4), If(Name('_id', Load(), lineno=341, col_offset=7), [Assign([Name('id', Store(), lineno=342, col_offset=8)], Name('_id', Load(), lineno=342, col_offset=13), lineno=342, col_offset=8)], [], lineno=341, col_offset=4), Return(Tuple([Name('distname', Load(), lineno=343, col_offset=11), Name('version', Load(), lineno=343, col_offset=21), Name('id', Load(), lineno=343, col_offset=30)], Load(), lineno=343, col_offset=11), lineno=343, col_offset=4)], [], lineno=291, col_offset=0), FunctionDef('dist', arguments([Name('distname', Param(), lineno=347, col_offset=9), Name('version', Param(), lineno=347, col_offset=21), Name('id', Param(), lineno=347, col_offset=32), Name('supported_dists', Param(), lineno=349, col_offset=9)], None, None, [Str('', lineno=347, col_offset=18), Str('', lineno=347, col_offset=29), Str('', lineno=347, col_offset=35), Name('_supported_dists', Load(), lineno=349, col_offset=25)]), [Expr(Str(' Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n\n    ', lineno=360, col_offset=-1), lineno=360, col_offset=-1), Return(Call(Name('linux_distribution', Load(), lineno=361, col_offset=11), [Name('distname', Load(), lineno=361, col_offset=30), Name('version', Load(), lineno=361, col_offset=40), Name('id', Load(), lineno=361, col_offset=49)], [keyword('supported_dists', Name('supported_dists', Load(), lineno=362, col_offset=46)), keyword('full_distribution_name', Num(0, lineno=363, col_offset=53))], None, None, lineno=361, col_offset=11), lineno=361, col_offset=4)], [], lineno=347, col_offset=0), ClassDef('_popen', [], [Expr(Str(" Fairly portable (alternative) popen implementation.\n\n        This is mostly needed in case os.popen() is not available, or\n        doesn't work as advertised, e.g. in Win9X GUI programs like\n        PythonWin or IDLE.\n\n        Writing to the pipe is currently not supported.\n\n    ", lineno=375, col_offset=-1), lineno=375, col_offset=-1), Assign([Name('tmpfile', Store(), lineno=376, col_offset=4)], Str('', lineno=376, col_offset=14), lineno=376, col_offset=4), Assign([Name('pipe', Store(), lineno=377, col_offset=4)], Name('None', Load(), lineno=377, col_offset=11), lineno=377, col_offset=4), Assign([Name('bufsize', Store(), lineno=378, col_offset=4)], Name('None', Load(), lineno=378, col_offset=14), lineno=378, col_offset=4), Assign([Name('mode', Store(), lineno=379, col_offset=4)], Str('r', lineno=379, col_offset=11), lineno=379, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=381, col_offset=17), Name('cmd', Param(), lineno=381, col_offset=22), Name('mode', Param(), lineno=381, col_offset=26), Name('bufsize', Param(), lineno=381, col_offset=35)], None, None, [Str('r', lineno=381, col_offset=31), Name('None', Load(), lineno=381, col_offset=43)]), [If(Compare(Name('mode', Load(), lineno=383, col_offset=11), [NotEq()], [Str('r', lineno=383, col_offset=19)], lineno=383, col_offset=11), [Raise(Name('ValueError', Load(), lineno=384, col_offset=18), Str('popen()-emulation only supports read mode', lineno=384, col_offset=29), None, lineno=384, col_offset=12)], [], lineno=383, col_offset=8), Import([alias('tempfile', None)], lineno=385, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=386, col_offset=8), 'tmpfile', Store(), lineno=386, col_offset=8), Name('tmpfile', Store(), lineno=386, col_offset=23)], Call(Attribute(Name('tempfile', Load(), lineno=386, col_offset=33), 'mktemp', Load(), lineno=386, col_offset=33), [], [], None, None, lineno=386, col_offset=33), lineno=386, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=387, col_offset=8), 'system', Load(), lineno=387, col_offset=8), [BinOp(Name('cmd', Load(), lineno=387, col_offset=18), Add(), BinOp(Str(' > %s', lineno=387, col_offset=24), Mod(), Name('tmpfile', Load(), lineno=387, col_offset=34), lineno=387, col_offset=24), lineno=387, col_offset=18)], [], None, None, lineno=387, col_offset=8), lineno=387, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=388, col_offset=8), 'pipe', Store(), lineno=388, col_offset=8)], Call(Name('open', Load(), lineno=388, col_offset=20), [Name('tmpfile', Load(), lineno=388, col_offset=25), Str('rb', lineno=388, col_offset=33)], [], None, None, lineno=388, col_offset=20), lineno=388, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=389, col_offset=8), 'bufsize', Store(), lineno=389, col_offset=8)], Name('bufsize', Load(), lineno=389, col_offset=23), lineno=389, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=390, col_offset=8), 'mode', Store(), lineno=390, col_offset=8)], Name('mode', Load(), lineno=390, col_offset=20), lineno=390, col_offset=8)], [], lineno=381, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=392, col_offset=13)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=394, col_offset=15), 'pipe', Load(), lineno=394, col_offset=15), 'read', Load(), lineno=394, col_offset=15), [], [], None, None, lineno=394, col_offset=15), lineno=394, col_offset=8)], [], lineno=392, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=396, col_offset=18)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=398, col_offset=11), 'bufsize', Load(), lineno=398, col_offset=11), [IsNot()], [Name('None', Load(), lineno=398, col_offset=31)], lineno=398, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=399, col_offset=19), 'pipe', Load(), lineno=399, col_offset=19), 'readlines', Load(), lineno=399, col_offset=19), [], [], None, None, lineno=399, col_offset=19), lineno=399, col_offset=12)], [], lineno=398, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=401, col_offset=14), Name('remove', Param(), lineno=403, col_offset=14), Name('error', Param(), lineno=403, col_offset=31)], None, None, [Attribute(Name('os', Load(), lineno=403, col_offset=21), 'unlink', Load(), lineno=403, col_offset=21), Attribute(Name('os', Load(), lineno=403, col_offset=37), 'error', Load(), lineno=403, col_offset=37)]), [If(Attribute(Name('self', Load(), lineno=405, col_offset=11), 'pipe', Load(), lineno=405, col_offset=11), [Assign([Name('rc', Store(), lineno=406, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=406, col_offset=17), 'pipe', Load(), lineno=406, col_offset=17), 'close', Load(), lineno=406, col_offset=17), [], [], None, None, lineno=406, col_offset=17), lineno=406, col_offset=12)], [Assign([Name('rc', Store(), lineno=408, col_offset=12)], Num(255, lineno=408, col_offset=17), lineno=408, col_offset=12)], lineno=405, col_offset=8), If(Attribute(Name('self', Load(), lineno=409, col_offset=11), 'tmpfile', Load(), lineno=409, col_offset=11), [TryExcept([Expr(Call(Name('remove', Load(), lineno=411, col_offset=16), [Attribute(Name('self', Load(), lineno=411, col_offset=23), 'tmpfile', Load(), lineno=411, col_offset=23)], [], None, None, lineno=411, col_offset=16), lineno=411, col_offset=16)], [ExceptHandler(Name('error', Load(), lineno=412, col_offset=19), None, [Pass( lineno=413, col_offset=16)], lineno=412, col_offset=12)], [], lineno=410, col_offset=12)], [], lineno=409, col_offset=8), Return(Name('rc', Load(), lineno=414, col_offset=15), lineno=414, col_offset=8)], [], lineno=401, col_offset=4), Assign([Name('__del__', Store(), lineno=417, col_offset=4)], Name('close', Load(), lineno=417, col_offset=14), lineno=417, col_offset=4)], [], lineno=365, col_offset=0), FunctionDef('popen', arguments([Name('cmd', Param(), lineno=419, col_offset=10), Name('mode', Param(), lineno=419, col_offset=15), Name('bufsize', Param(), lineno=419, col_offset=25)], None, None, [Str('r', lineno=419, col_offset=20), Name('None', Load(), lineno=419, col_offset=33)]), [Expr(Str(' Portable popen() interface.\n    ', lineno=422, col_offset=-1), lineno=422, col_offset=-1), Assign([Name('popen', Store(), lineno=425, col_offset=4)], Name('None', Load(), lineno=425, col_offset=12), lineno=425, col_offset=4), If(Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=426, col_offset=7), 'environ', Load(), lineno=426, col_offset=7), 'get', Load(), lineno=426, col_offset=7), [Str('OS', lineno=426, col_offset=22), Str('', lineno=426, col_offset=27)], [], None, None, lineno=426, col_offset=7), [Eq()], [Str('Windows_NT', lineno=426, col_offset=34)], lineno=426, col_offset=7), [TryExcept([Import([alias('win32pipe', None)], lineno=430, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=431, col_offset=15), None, [Pass( lineno=432, col_offset=12)], lineno=431, col_offset=8)], [Assign([Name('popen', Store(), lineno=434, col_offset=12)], Attribute(Name('win32pipe', Load(), lineno=434, col_offset=20), 'popen', Load(), lineno=434, col_offset=20), lineno=434, col_offset=12)], lineno=429, col_offset=8)], [], lineno=426, col_offset=4), If(Compare(Name('popen', Load(), lineno=435, col_offset=7), [Is()], [Name('None', Load(), lineno=435, col_offset=16)], lineno=435, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=436, col_offset=11), [Name('os', Load(), lineno=436, col_offset=19), Str('popen', lineno=436, col_offset=22)], [], None, None, lineno=436, col_offset=11), [Assign([Name('popen', Store(), lineno=437, col_offset=12)], Attribute(Name('os', Load(), lineno=437, col_offset=20), 'popen', Load(), lineno=437, col_offset=20), lineno=437, col_offset=12), If(Compare(Attribute(Name('sys', Load(), lineno=440, col_offset=15), 'platform', Load(), lineno=440, col_offset=15), [Eq()], [Str('win32', lineno=440, col_offset=31)], lineno=440, col_offset=15), [TryExcept([Expr(Call(Name('popen', Load(), lineno=442, col_offset=20), [Str('', lineno=442, col_offset=26)], [], None, None, lineno=442, col_offset=20), lineno=442, col_offset=20)], [ExceptHandler(Attribute(Name('os', Load(), lineno=443, col_offset=23), 'error', Load(), lineno=443, col_offset=23), None, [Assign([Name('popen', Store(), lineno=444, col_offset=20)], Name('_popen', Load(), lineno=444, col_offset=28), lineno=444, col_offset=20)], lineno=443, col_offset=16)], [], lineno=441, col_offset=16)], [], lineno=440, col_offset=12)], [Assign([Name('popen', Store(), lineno=446, col_offset=12)], Name('_popen', Load(), lineno=446, col_offset=20), lineno=446, col_offset=12)], lineno=436, col_offset=8)], [], lineno=435, col_offset=4), If(Compare(Name('bufsize', Load(), lineno=447, col_offset=7), [Is()], [Name('None', Load(), lineno=447, col_offset=18)], lineno=447, col_offset=7), [Return(Call(Name('popen', Load(), lineno=448, col_offset=15), [Name('cmd', Load(), lineno=448, col_offset=21), Name('mode', Load(), lineno=448, col_offset=25)], [], None, None, lineno=448, col_offset=15), lineno=448, col_offset=8)], [Return(Call(Name('popen', Load(), lineno=450, col_offset=15), [Name('cmd', Load(), lineno=450, col_offset=21), Name('mode', Load(), lineno=450, col_offset=25), Name('bufsize', Load(), lineno=450, col_offset=30)], [], None, None, lineno=450, col_offset=15), lineno=450, col_offset=8)], lineno=447, col_offset=4)], [], lineno=419, col_offset=0), FunctionDef('_norm_version', arguments([Name('version', Param(), lineno=452, col_offset=18), Name('build', Param(), lineno=452, col_offset=27)], None, None, [Str('', lineno=452, col_offset=33)]), [Expr(Str(' Normalize the version and build strings and return a single\n        version string using the format major.minor.build (or patchlevel).\n    ', lineno=456, col_offset=-1), lineno=456, col_offset=-1), Assign([Name('l', Store(), lineno=457, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=457, col_offset=8), 'split', Load(), lineno=457, col_offset=8), [Name('version', Load(), lineno=457, col_offset=21), Str('.', lineno=457, col_offset=29)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=4), If(Name('build', Load(), lineno=458, col_offset=7), [Expr(Call(Attribute(Name('l', Load(), lineno=459, col_offset=8), 'append', Load(), lineno=459, col_offset=8), [Name('build', Load(), lineno=459, col_offset=17)], [], None, None, lineno=459, col_offset=8), lineno=459, col_offset=8)], [], lineno=458, col_offset=4), TryExcept([Assign([Name('ints', Store(), lineno=461, col_offset=8)], Call(Name('map', Load(), lineno=461, col_offset=15), [Name('int', Load(), lineno=461, col_offset=19), Name('l', Load(), lineno=461, col_offset=23)], [], None, None, lineno=461, col_offset=15), lineno=461, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=462, col_offset=11), None, [Assign([Name('strings', Store(), lineno=463, col_offset=8)], Name('l', Load(), lineno=463, col_offset=18), lineno=463, col_offset=8)], lineno=462, col_offset=4)], [Assign([Name('strings', Store(), lineno=465, col_offset=8)], Call(Name('map', Load(), lineno=465, col_offset=18), [Name('str', Load(), lineno=465, col_offset=22), Name('ints', Load(), lineno=465, col_offset=26)], [], None, None, lineno=465, col_offset=18), lineno=465, col_offset=8)], lineno=460, col_offset=4), Assign([Name('version', Store(), lineno=466, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=466, col_offset=14), 'join', Load(), lineno=466, col_offset=14), [Subscript(Name('strings', Load(), lineno=466, col_offset=26), Slice(None, Num(3, lineno=466, col_offset=35), None), Load(), lineno=466, col_offset=26), Str('.', lineno=466, col_offset=38)], [], None, None, lineno=466, col_offset=14), lineno=466, col_offset=4), Return(Name('version', Load(), lineno=467, col_offset=11), lineno=467, col_offset=4)], [], lineno=452, col_offset=0), Assign([Name('_ver_output', Store(), lineno=469, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=469, col_offset=14), 'compile', Load(), lineno=469, col_offset=14), [Str('(?:([\\w ]+) ([\\w.]+) .*\\[.* ([\\d.]+)\\])', lineno=469, col_offset=25)], [], None, None, lineno=469, col_offset=14), lineno=469, col_offset=0), FunctionDef('_syscmd_ver', arguments([Name('system', Param(), lineno=482, col_offset=16), Name('release', Param(), lineno=482, col_offset=27), Name('version', Param(), lineno=482, col_offset=39), Name('supported_platforms', Param(), lineno=484, col_offset=15)], None, None, [Str('', lineno=482, col_offset=23), Str('', lineno=482, col_offset=35), Str('', lineno=482, col_offset=47), Tuple([Str('win32', lineno=484, col_offset=36), Str('win16', lineno=484, col_offset=44), Str('dos', lineno=484, col_offset=52), Str('os2', lineno=484, col_offset=58)], Load(), lineno=484, col_offset=36)]), [Expr(Str(' Tries to figure out the OS version used and returns\n        a tuple (system,release,version).\n\n        It uses the "ver" shell command for this which is known\n        to exists on Windows, DOS and OS/2. XXX Others too ?\n\n        In case this fails, the given parameters are used as\n        defaults.\n\n    ', lineno=495, col_offset=-1), lineno=495, col_offset=-1), If(Compare(Attribute(Name('sys', Load(), lineno=496, col_offset=7), 'platform', Load(), lineno=496, col_offset=7), [NotIn()], [Name('supported_platforms', Load(), lineno=496, col_offset=27)], lineno=496, col_offset=7), [Return(Tuple([Name('system', Load(), lineno=497, col_offset=15), Name('release', Load(), lineno=497, col_offset=22), Name('version', Load(), lineno=497, col_offset=30)], Load(), lineno=497, col_offset=15), lineno=497, col_offset=8)], [], lineno=496, col_offset=4), For(Name('cmd', Store(), lineno=500, col_offset=8), Tuple([Str('ver', lineno=500, col_offset=16), Str('command /c ver', lineno=500, col_offset=22), Str('cmd /c ver', lineno=500, col_offset=39)], Load(), lineno=500, col_offset=16), [TryExcept([Assign([Name('pipe', Store(), lineno=502, col_offset=12)], Call(Name('popen', Load(), lineno=502, col_offset=19), [Name('cmd', Load(), lineno=502, col_offset=25)], [], None, None, lineno=502, col_offset=19), lineno=502, col_offset=12), Assign([Name('info', Store(), lineno=503, col_offset=12)], Call(Attribute(Name('pipe', Load(), lineno=503, col_offset=19), 'read', Load(), lineno=503, col_offset=19), [], [], None, None, lineno=503, col_offset=19), lineno=503, col_offset=12), If(Call(Attribute(Name('pipe', Load(), lineno=504, col_offset=15), 'close', Load(), lineno=504, col_offset=15), [], [], None, None, lineno=504, col_offset=15), [Raise(Attribute(Name('os', Load(), lineno=505, col_offset=22), 'error', Load(), lineno=505, col_offset=22), Str('command failed', lineno=505, col_offset=31), None, lineno=505, col_offset=16)], [], lineno=504, col_offset=12)], [ExceptHandler(Attribute(Name('os', Load(), lineno=508, col_offset=15), 'error', Load(), lineno=508, col_offset=15), Name('why', Store(), lineno=508, col_offset=24), [Continue( lineno=510, col_offset=12)], lineno=508, col_offset=8), ExceptHandler(Name('IOError', Load(), lineno=511, col_offset=15), Name('why', Store(), lineno=511, col_offset=23), [Continue( lineno=513, col_offset=12)], lineno=511, col_offset=8)], [Break( lineno=515, col_offset=12)], lineno=501, col_offset=8)], [Return(Tuple([Name('system', Load(), lineno=517, col_offset=15), Name('release', Load(), lineno=517, col_offset=22), Name('version', Load(), lineno=517, col_offset=30)], Load(), lineno=517, col_offset=15), lineno=517, col_offset=8)], lineno=500, col_offset=4), Assign([Name('info', Store(), lineno=520, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=520, col_offset=11), 'strip', Load(), lineno=520, col_offset=11), [Name('info', Load(), lineno=520, col_offset=24)], [], None, None, lineno=520, col_offset=11), lineno=520, col_offset=4), Assign([Name('m', Store(), lineno=521, col_offset=4)], Call(Attribute(Name('_ver_output', Load(), lineno=521, col_offset=8), 'match', Load(), lineno=521, col_offset=8), [Name('info', Load(), lineno=521, col_offset=26)], [], None, None, lineno=521, col_offset=8), lineno=521, col_offset=4), If(Compare(Name('m', Load(), lineno=522, col_offset=7), [IsNot()], [Name('None', Load(), lineno=522, col_offset=16)], lineno=522, col_offset=7), [Assign([Tuple([Name('system', Store(), lineno=523, col_offset=8), Name('release', Store(), lineno=523, col_offset=15), Name('version', Store(), lineno=523, col_offset=23)], Store(), lineno=523, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=523, col_offset=33), 'groups', Load(), lineno=523, col_offset=33), [], [], None, None, lineno=523, col_offset=33), lineno=523, col_offset=8), If(Compare(Subscript(Name('release', Load(), lineno=525, col_offset=11), Index(Num(-1, lineno=525, col_offset=20)), Load(), lineno=525, col_offset=11), [Eq()], [Str('.', lineno=525, col_offset=26)], lineno=525, col_offset=11), [Assign([Name('release', Store(), lineno=526, col_offset=12)], Subscript(Name('release', Load(), lineno=526, col_offset=22), Slice(None, Num(-1, lineno=526, col_offset=32), None), Load(), lineno=526, col_offset=22), lineno=526, col_offset=12)], [], lineno=525, col_offset=8), If(Compare(Subscript(Name('version', Load(), lineno=527, col_offset=11), Index(Num(-1, lineno=527, col_offset=20)), Load(), lineno=527, col_offset=11), [Eq()], [Str('.', lineno=527, col_offset=26)], lineno=527, col_offset=11), [Assign([Name('version', Store(), lineno=528, col_offset=12)], Subscript(Name('version', Load(), lineno=528, col_offset=22), Slice(None, Num(-1, lineno=528, col_offset=32), None), Load(), lineno=528, col_offset=22), lineno=528, col_offset=12)], [], lineno=527, col_offset=8), Assign([Name('version', Store(), lineno=531, col_offset=8)], Call(Name('_norm_version', Load(), lineno=531, col_offset=18), [Name('version', Load(), lineno=531, col_offset=32)], [], None, None, lineno=531, col_offset=18), lineno=531, col_offset=8)], [], lineno=522, col_offset=4), Return(Tuple([Name('system', Load(), lineno=532, col_offset=11), Name('release', Load(), lineno=532, col_offset=18), Name('version', Load(), lineno=532, col_offset=26)], Load(), lineno=532, col_offset=11), lineno=532, col_offset=4)], [], lineno=482, col_offset=0), FunctionDef('_win32_getvalue', arguments([Name('key', Param(), lineno=534, col_offset=20), Name('name', Param(), lineno=534, col_offset=24), Name('default', Param(), lineno=534, col_offset=29)], None, None, [Str('', lineno=534, col_offset=37)]), [Expr(Str(' Read a value for name from the registry key.\n\n        In case this fails, default is returned.\n\n    ', lineno=540, col_offset=-1), lineno=540, col_offset=-1), TryExcept([ImportFrom('win32api', [alias('RegQueryValueEx', None)], 0, lineno=543, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=544, col_offset=11), None, [Import([alias('_winreg', None)], lineno=546, col_offset=8), Assign([Name('RegQueryValueEx', Store(), lineno=547, col_offset=8)], Attribute(Name('_winreg', Load(), lineno=547, col_offset=26), 'QueryValueEx', Load(), lineno=547, col_offset=26), lineno=547, col_offset=8)], lineno=544, col_offset=4)], [], lineno=541, col_offset=4), TryExcept([Return(Call(Name('RegQueryValueEx', Load(), lineno=549, col_offset=15), [Name('key', Load(), lineno=549, col_offset=31), Name('name', Load(), lineno=549, col_offset=35)], [], None, None, lineno=549, col_offset=15), lineno=549, col_offset=8)], [ExceptHandler(None, None, [Return(Name('default', Load(), lineno=551, col_offset=15), lineno=551, col_offset=8)], lineno=550, col_offset=4)], [], lineno=548, col_offset=4)], [], lineno=534, col_offset=0), FunctionDef('win32_ver', arguments([Name('release', Param(), lineno=553, col_offset=14), Name('version', Param(), lineno=553, col_offset=25), Name('csd', Param(), lineno=553, col_offset=36), Name('ptype', Param(), lineno=553, col_offset=43)], None, None, [Str('', lineno=553, col_offset=22), Str('', lineno=553, col_offset=33), Str('', lineno=553, col_offset=40), Str('', lineno=553, col_offset=49)]), [Expr(Str(" Get additional version information from the Windows Registry\n        and return a tuple (version,csd,ptype) referring to version\n        number, CSD level and OS type (multi/single\n        processor).\n\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n\n        Note: this function works best with Mark Hammond's win32\n        package installed, but also on Python 2.3 and later. It\n        obviously only runs on Win32 compatible platforms.\n\n    ", lineno=571, col_offset=-1), lineno=571, col_offset=-1), TryExcept([Import([alias('win32api', None)], lineno=582, col_offset=8), ImportFrom('win32api', [alias('RegQueryValueEx', None), alias('RegOpenKeyEx', None), alias('RegCloseKey', None), alias('GetVersionEx', None)], 0, lineno=583, col_offset=8), ImportFrom('win32con', [alias('HKEY_LOCAL_MACHINE', None), alias('VER_PLATFORM_WIN32_NT', None), alias('VER_PLATFORM_WIN32_WINDOWS', None), alias('VER_NT_WORKSTATION', None)], 0, lineno=585, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=587, col_offset=11), None, [TryExcept([Expr(Attribute(Name('sys', Load(), lineno=590, col_offset=12), 'getwindowsversion', Load(), lineno=590, col_offset=12), lineno=590, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=591, col_offset=15), None, [Return(Tuple([Name('release', Load(), lineno=593, col_offset=19), Name('version', Load(), lineno=593, col_offset=27), Name('csd', Load(), lineno=593, col_offset=35), Name('ptype', Load(), lineno=593, col_offset=39)], Load(), lineno=593, col_offset=19), lineno=593, col_offset=12)], lineno=591, col_offset=8)], [Import([alias('_winreg', None)], lineno=597, col_offset=12), Assign([Name('GetVersionEx', Store(), lineno=598, col_offset=12)], Attribute(Name('sys', Load(), lineno=598, col_offset=27), 'getwindowsversion', Load(), lineno=598, col_offset=27), lineno=598, col_offset=12), Assign([Name('RegQueryValueEx', Store(), lineno=599, col_offset=12)], Attribute(Name('_winreg', Load(), lineno=599, col_offset=30), 'QueryValueEx', Load(), lineno=599, col_offset=30), lineno=599, col_offset=12), Assign([Name('RegOpenKeyEx', Store(), lineno=600, col_offset=12)], Attribute(Name('_winreg', Load(), lineno=600, col_offset=27), 'OpenKeyEx', Load(), lineno=600, col_offset=27), lineno=600, col_offset=12), Assign([Name('RegCloseKey', Store(), lineno=601, col_offset=12)], Attribute(Name('_winreg', Load(), lineno=601, col_offset=26), 'CloseKey', Load(), lineno=601, col_offset=26), lineno=601, col_offset=12), Assign([Name('HKEY_LOCAL_MACHINE', Store(), lineno=602, col_offset=12)], Attribute(Name('_winreg', Load(), lineno=602, col_offset=33), 'HKEY_LOCAL_MACHINE', Load(), lineno=602, col_offset=33), lineno=602, col_offset=12), Assign([Name('VER_PLATFORM_WIN32_WINDOWS', Store(), lineno=603, col_offset=12)], Num(1, lineno=603, col_offset=41), lineno=603, col_offset=12), Assign([Name('VER_PLATFORM_WIN32_NT', Store(), lineno=604, col_offset=12)], Num(2, lineno=604, col_offset=36), lineno=604, col_offset=12), Assign([Name('VER_NT_WORKSTATION', Store(), lineno=605, col_offset=12)], Num(1, lineno=605, col_offset=33), lineno=605, col_offset=12), Assign([Name('VER_NT_SERVER', Store(), lineno=606, col_offset=12)], Num(3, lineno=606, col_offset=28), lineno=606, col_offset=12), Assign([Name('REG_SZ', Store(), lineno=607, col_offset=12)], Num(1, lineno=607, col_offset=21), lineno=607, col_offset=12)], lineno=589, col_offset=8)], lineno=587, col_offset=4)], [], lineno=581, col_offset=4), Assign([Name('winver', Store(), lineno=610, col_offset=4)], Call(Name('GetVersionEx', Load(), lineno=610, col_offset=13), [], [], None, None, lineno=610, col_offset=13), lineno=610, col_offset=4), Assign([Tuple([Name('maj', Store(), lineno=611, col_offset=4), Name('min', Store(), lineno=611, col_offset=8), Name('buildno', Store(), lineno=611, col_offset=12), Name('plat', Store(), lineno=611, col_offset=20), Name('csd', Store(), lineno=611, col_offset=25)], Store(), lineno=611, col_offset=4)], Name('winver', Load(), lineno=611, col_offset=31), lineno=611, col_offset=4), Assign([Name('version', Store(), lineno=612, col_offset=4)], BinOp(Str('%i.%i.%i', lineno=612, col_offset=14), Mod(), Tuple([Name('maj', Load(), lineno=612, col_offset=28), Name('min', Load(), lineno=612, col_offset=32), BinOp(Name('buildno', Load(), lineno=612, col_offset=36), BitAnd(), Num(65535, lineno=612, col_offset=46), lineno=612, col_offset=36)], Load(), lineno=612, col_offset=28), lineno=612, col_offset=14), lineno=612, col_offset=4), If(Call(Name('hasattr', Load(), lineno=613, col_offset=7), [Name('winver', Load(), lineno=613, col_offset=15), Str('service_pack', lineno=613, col_offset=23)], [], None, None, lineno=613, col_offset=7), [If(Compare(Attribute(Name('winver', Load(), lineno=614, col_offset=11), 'service_pack', Load(), lineno=614, col_offset=11), [NotEq()], [Str('', lineno=614, col_offset=34)], lineno=614, col_offset=11), [Assign([Name('csd', Store(), lineno=615, col_offset=12)], BinOp(Str('SP%s', lineno=615, col_offset=18), Mod(), Attribute(Name('winver', Load(), lineno=615, col_offset=27), 'service_pack_major', Load(), lineno=615, col_offset=27), lineno=615, col_offset=18), lineno=615, col_offset=12)], [], lineno=614, col_offset=8)], [If(Compare(Subscript(Name('csd', Load(), lineno=617, col_offset=11), Slice(None, Num(13, lineno=617, col_offset=16), None), Load(), lineno=617, col_offset=11), [Eq()], [Str('Service Pack ', lineno=617, col_offset=23)], lineno=617, col_offset=11), [Assign([Name('csd', Store(), lineno=618, col_offset=12)], BinOp(Str('SP', lineno=618, col_offset=18), Add(), Subscript(Name('csd', Load(), lineno=618, col_offset=25), Slice(Num(13, lineno=618, col_offset=29), None, None), Load(), lineno=618, col_offset=25), lineno=618, col_offset=18), lineno=618, col_offset=12)], [], lineno=617, col_offset=8)], lineno=613, col_offset=4), If(Compare(Name('plat', Load(), lineno=620, col_offset=7), [Eq()], [Name('VER_PLATFORM_WIN32_WINDOWS', Load(), lineno=620, col_offset=15)], lineno=620, col_offset=7), [Assign([Name('regkey', Store(), lineno=621, col_offset=8)], Str('SOFTWARE\\Microsoft\\Windows\\CurrentVersion', lineno=621, col_offset=17), lineno=621, col_offset=8), If(Compare(Name('maj', Load(), lineno=623, col_offset=11), [Eq()], [Num(4, lineno=623, col_offset=18)], lineno=623, col_offset=11), [If(Compare(Name('min', Load(), lineno=624, col_offset=15), [Eq()], [Num(0, lineno=624, col_offset=22)], lineno=624, col_offset=15), [Assign([Name('release', Store(), lineno=625, col_offset=16)], Str('95', lineno=625, col_offset=26), lineno=625, col_offset=16)], [If(Compare(Name('min', Load(), lineno=626, col_offset=17), [Eq()], [Num(10, lineno=626, col_offset=24)], lineno=626, col_offset=17), [Assign([Name('release', Store(), lineno=627, col_offset=16)], Str('98', lineno=627, col_offset=26), lineno=627, col_offset=16)], [If(Compare(Name('min', Load(), lineno=628, col_offset=17), [Eq()], [Num(90, lineno=628, col_offset=24)], lineno=628, col_offset=17), [Assign([Name('release', Store(), lineno=629, col_offset=16)], Str('Me', lineno=629, col_offset=26), lineno=629, col_offset=16)], [Assign([Name('release', Store(), lineno=631, col_offset=16)], Str('postMe', lineno=631, col_offset=26), lineno=631, col_offset=16)], lineno=628, col_offset=17)], lineno=626, col_offset=17)], lineno=624, col_offset=12)], [If(Compare(Name('maj', Load(), lineno=632, col_offset=13), [Eq()], [Num(5, lineno=632, col_offset=20)], lineno=632, col_offset=13), [Assign([Name('release', Store(), lineno=633, col_offset=12)], Str('2000', lineno=633, col_offset=22), lineno=633, col_offset=12)], [], lineno=632, col_offset=13)], lineno=623, col_offset=8)], [If(Compare(Name('plat', Load(), lineno=635, col_offset=9), [Eq()], [Name('VER_PLATFORM_WIN32_NT', Load(), lineno=635, col_offset=17)], lineno=635, col_offset=9), [Assign([Name('regkey', Store(), lineno=636, col_offset=8)], Str('SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion', lineno=636, col_offset=17), lineno=636, col_offset=8), If(Compare(Name('maj', Load(), lineno=637, col_offset=11), [LtE()], [Num(4, lineno=637, col_offset=18)], lineno=637, col_offset=11), [Assign([Name('release', Store(), lineno=638, col_offset=12)], Str('NT', lineno=638, col_offset=22), lineno=638, col_offset=12)], [If(Compare(Name('maj', Load(), lineno=639, col_offset=13), [Eq()], [Num(5, lineno=639, col_offset=20)], lineno=639, col_offset=13), [If(Compare(Name('min', Load(), lineno=640, col_offset=15), [Eq()], [Num(0, lineno=640, col_offset=22)], lineno=640, col_offset=15), [Assign([Name('release', Store(), lineno=641, col_offset=16)], Str('2000', lineno=641, col_offset=26), lineno=641, col_offset=16)], [If(Compare(Name('min', Load(), lineno=642, col_offset=17), [Eq()], [Num(1, lineno=642, col_offset=24)], lineno=642, col_offset=17), [Assign([Name('release', Store(), lineno=643, col_offset=16)], Str('XP', lineno=643, col_offset=26), lineno=643, col_offset=16)], [If(Compare(Name('min', Load(), lineno=644, col_offset=17), [Eq()], [Num(2, lineno=644, col_offset=24)], lineno=644, col_offset=17), [Assign([Name('release', Store(), lineno=645, col_offset=16)], Str('2003Server', lineno=645, col_offset=26), lineno=645, col_offset=16)], [Assign([Name('release', Store(), lineno=647, col_offset=16)], Str('post2003', lineno=647, col_offset=26), lineno=647, col_offset=16)], lineno=644, col_offset=17)], lineno=642, col_offset=17)], lineno=640, col_offset=12)], [If(Compare(Name('maj', Load(), lineno=648, col_offset=13), [Eq()], [Num(6, lineno=648, col_offset=20)], lineno=648, col_offset=13), [If(Call(Name('hasattr', Load(), lineno=649, col_offset=15), [Name('winver', Load(), lineno=649, col_offset=23), Str('product_type', lineno=649, col_offset=31)], [], None, None, lineno=649, col_offset=15), [Assign([Name('product_type', Store(), lineno=650, col_offset=16)], Attribute(Name('winver', Load(), lineno=650, col_offset=31), 'product_type', Load(), lineno=650, col_offset=31), lineno=650, col_offset=16)], [Assign([Name('product_type', Store(), lineno=652, col_offset=16)], Name('VER_NT_WORKSTATION', Load(), lineno=652, col_offset=31), lineno=652, col_offset=16), TryExcept([Assign([Name('key', Store(), lineno=657, col_offset=20)], Call(Name('RegOpenKeyEx', Load(), lineno=657, col_offset=26), [Name('HKEY_LOCAL_MACHINE', Load(), lineno=657, col_offset=39), Name('regkey', Load(), lineno=657, col_offset=59)], [], None, None, lineno=657, col_offset=26), lineno=657, col_offset=20), Assign([Tuple([Name('name', Store(), lineno=658, col_offset=20), Name('type', Store(), lineno=658, col_offset=26)], Store(), lineno=658, col_offset=20)], Call(Name('RegQueryValueEx', Load(), lineno=658, col_offset=33), [Name('key', Load(), lineno=658, col_offset=49), Str('ProductName', lineno=658, col_offset=54)], [], None, None, lineno=658, col_offset=33), lineno=658, col_offset=20), If(BoolOp(And(), [Compare(Name('type', Load(), lineno=660, col_offset=23), [Eq()], [Name('REG_SZ', Load(), lineno=660, col_offset=31)], lineno=660, col_offset=23), Compare(Call(Attribute(Name('name', Load(), lineno=660, col_offset=42), 'find', Load(), lineno=660, col_offset=42), [Str('Server', lineno=660, col_offset=52)], [], None, None, lineno=660, col_offset=42), [NotEq()], [Num(-1, lineno=660, col_offset=66)], lineno=660, col_offset=42)], lineno=660, col_offset=23), [Assign([Name('product_type', Store(), lineno=661, col_offset=24)], Name('VER_NT_SERVER', Load(), lineno=661, col_offset=39), lineno=661, col_offset=24)], [], lineno=660, col_offset=20)], [ExceptHandler(Name('WindowsError', Load(), lineno=662, col_offset=23), None, [Pass( lineno=664, col_offset=20)], lineno=662, col_offset=16)], [], lineno=656, col_offset=16)], lineno=649, col_offset=12), If(Compare(Name('min', Load(), lineno=666, col_offset=15), [Eq()], [Num(0, lineno=666, col_offset=22)], lineno=666, col_offset=15), [If(Compare(Name('product_type', Load(), lineno=667, col_offset=19), [Eq()], [Name('VER_NT_WORKSTATION', Load(), lineno=667, col_offset=35)], lineno=667, col_offset=19), [Assign([Name('release', Store(), lineno=668, col_offset=20)], Str('Vista', lineno=668, col_offset=30), lineno=668, col_offset=20)], [Assign([Name('release', Store(), lineno=670, col_offset=20)], Str('2008Server', lineno=670, col_offset=30), lineno=670, col_offset=20)], lineno=667, col_offset=16)], [If(Compare(Name('min', Load(), lineno=671, col_offset=17), [Eq()], [Num(1, lineno=671, col_offset=24)], lineno=671, col_offset=17), [If(Compare(Name('product_type', Load(), lineno=672, col_offset=19), [Eq()], [Name('VER_NT_WORKSTATION', Load(), lineno=672, col_offset=35)], lineno=672, col_offset=19), [Assign([Name('release', Store(), lineno=673, col_offset=20)], Str('7', lineno=673, col_offset=30), lineno=673, col_offset=20)], [Assign([Name('release', Store(), lineno=675, col_offset=20)], Str('2008ServerR2', lineno=675, col_offset=30), lineno=675, col_offset=20)], lineno=672, col_offset=16)], [Assign([Name('release', Store(), lineno=677, col_offset=16)], Str('post2008Server', lineno=677, col_offset=26), lineno=677, col_offset=16)], lineno=671, col_offset=17)], lineno=666, col_offset=12)], [], lineno=648, col_offset=13)], lineno=639, col_offset=13)], lineno=637, col_offset=8)], [If(UnaryOp(Not(), Name('release', Load(), lineno=680, col_offset=15), lineno=680, col_offset=11), [Assign([Name('release', Store(), lineno=682, col_offset=12)], BinOp(Str('%i.%i', lineno=682, col_offset=22), Mod(), Tuple([Name('maj', Load(), lineno=682, col_offset=33), Name('min', Load(), lineno=682, col_offset=37)], Load(), lineno=682, col_offset=33), lineno=682, col_offset=22), lineno=682, col_offset=12)], [], lineno=680, col_offset=8), Return(Tuple([Name('release', Load(), lineno=683, col_offset=15), Name('version', Load(), lineno=683, col_offset=23), Name('csd', Load(), lineno=683, col_offset=31), Name('ptype', Load(), lineno=683, col_offset=35)], Load(), lineno=683, col_offset=15), lineno=683, col_offset=8)], lineno=635, col_offset=9)], lineno=620, col_offset=4), TryExcept([Assign([Name('keyCurVer', Store(), lineno=687, col_offset=8)], Call(Name('RegOpenKeyEx', Load(), lineno=687, col_offset=20), [Name('HKEY_LOCAL_MACHINE', Load(), lineno=687, col_offset=33), Name('regkey', Load(), lineno=687, col_offset=53)], [], None, None, lineno=687, col_offset=20), lineno=687, col_offset=8), Expr(Call(Name('RegQueryValueEx', Load(), lineno=689, col_offset=8), [Name('keyCurVer', Load(), lineno=689, col_offset=24), Str('SystemRoot', lineno=689, col_offset=35)], [], None, None, lineno=689, col_offset=8), lineno=689, col_offset=8)], [ExceptHandler(None, None, [Return(Tuple([Name('release', Load(), lineno=691, col_offset=15), Name('version', Load(), lineno=691, col_offset=23), Name('csd', Load(), lineno=691, col_offset=31), Name('ptype', Load(), lineno=691, col_offset=35)], Load(), lineno=691, col_offset=15), lineno=691, col_offset=8)], lineno=690, col_offset=4)], [], lineno=686, col_offset=4), Assign([Name('build', Store(), lineno=699, col_offset=4)], Subscript(Call(Name('_win32_getvalue', Load(), lineno=699, col_offset=12), [Name('keyCurVer', Load(), lineno=699, col_offset=28), Str('CurrentBuildNumber', lineno=700, col_offset=28), Tuple([Str('', lineno=701, col_offset=29), Num(1, lineno=701, col_offset=32)], Load(), lineno=701, col_offset=29)], [], None, None, lineno=699, col_offset=12), Index(Num(0, lineno=701, col_offset=36)), Load(), lineno=699, col_offset=12), lineno=699, col_offset=4), Assign([Name('ptype', Store(), lineno=702, col_offset=4)], Subscript(Call(Name('_win32_getvalue', Load(), lineno=702, col_offset=12), [Name('keyCurVer', Load(), lineno=702, col_offset=28), Str('CurrentType', lineno=703, col_offset=27), Tuple([Name('ptype', Load(), lineno=704, col_offset=28), Num(1, lineno=704, col_offset=34)], Load(), lineno=704, col_offset=28)], [], None, None, lineno=702, col_offset=12), Index(Num(0, lineno=704, col_offset=38)), Load(), lineno=702, col_offset=12), lineno=702, col_offset=4), Assign([Name('version', Store(), lineno=707, col_offset=4)], Call(Name('_norm_version', Load(), lineno=707, col_offset=14), [Name('version', Load(), lineno=707, col_offset=28), Name('build', Load(), lineno=707, col_offset=36)], [], None, None, lineno=707, col_offset=14), lineno=707, col_offset=4), Expr(Call(Name('RegCloseKey', Load(), lineno=710, col_offset=4), [Name('keyCurVer', Load(), lineno=710, col_offset=16)], [], None, None, lineno=710, col_offset=4), lineno=710, col_offset=4), Return(Tuple([Name('release', Load(), lineno=711, col_offset=11), Name('version', Load(), lineno=711, col_offset=19), Name('csd', Load(), lineno=711, col_offset=27), Name('ptype', Load(), lineno=711, col_offset=31)], Load(), lineno=711, col_offset=11), lineno=711, col_offset=4)], [], lineno=553, col_offset=0), FunctionDef('_mac_ver_lookup', arguments([Name('selectors', Param(), lineno=713, col_offset=20), Name('default', Param(), lineno=713, col_offset=30)], None, None, [Name('None', Load(), lineno=713, col_offset=38)]), [ImportFrom('gestalt', [alias('gestalt', None)], 0, lineno=715, col_offset=4), Import([alias('MacOS', None)], lineno=716, col_offset=4), Assign([Name('l', Store(), lineno=717, col_offset=4)], List([], Load(), lineno=717, col_offset=8), lineno=717, col_offset=4), Assign([Name('append', Store(), lineno=718, col_offset=4)], Attribute(Name('l', Load(), lineno=718, col_offset=13), 'append', Load(), lineno=718, col_offset=13), lineno=718, col_offset=4), For(Name('selector', Store(), lineno=719, col_offset=8), Name('selectors', Load(), lineno=719, col_offset=20), [TryExcept([Expr(Call(Name('append', Load(), lineno=721, col_offset=12), [Call(Name('gestalt', Load(), lineno=721, col_offset=19), [Name('selector', Load(), lineno=721, col_offset=27)], [], None, None, lineno=721, col_offset=19)], [], None, None, lineno=721, col_offset=12), lineno=721, col_offset=12)], [ExceptHandler(Tuple([Name('RuntimeError', Load(), lineno=722, col_offset=16), Attribute(Name('MacOS', Load(), lineno=722, col_offset=30), 'Error', Load(), lineno=722, col_offset=30)], Load(), lineno=722, col_offset=16), None, [Expr(Call(Name('append', Load(), lineno=723, col_offset=12), [Name('default', Load(), lineno=723, col_offset=19)], [], None, None, lineno=723, col_offset=12), lineno=723, col_offset=12)], lineno=722, col_offset=8)], [], lineno=720, col_offset=8)], [], lineno=719, col_offset=4), Return(Name('l', Load(), lineno=724, col_offset=11), lineno=724, col_offset=4)], [], lineno=713, col_offset=0), FunctionDef('_bcd2str', arguments([Name('bcd', Param(), lineno=726, col_offset=13)], None, None, []), [Return(Subscript(Call(Name('hex', Load(), lineno=728, col_offset=11), [Name('bcd', Load(), lineno=728, col_offset=15)], [], None, None, lineno=728, col_offset=11), Slice(Num(2, lineno=728, col_offset=20), None, None), Load(), lineno=728, col_offset=11), lineno=728, col_offset=4)], [], lineno=726, col_offset=0), FunctionDef('_mac_ver_gestalt', arguments([], None, None, []), [Expr(Str('\n        Thanks to Mark R. Levinson for mailing documentation links and\n        code examples for this function. Documentation for the\n        gestalt() API is available online at:\n\n           http://www.rgaros.nl/gestalt/\n    ', lineno=737, col_offset=-1), lineno=737, col_offset=-1), TryExcept([Import([alias('gestalt', None)], lineno=740, col_offset=8), Import([alias('MacOS', None)], lineno=741, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=742, col_offset=11), None, [Return(Name('None', Load(), lineno=743, col_offset=15), lineno=743, col_offset=8)], lineno=742, col_offset=4)], [], lineno=739, col_offset=4), Assign([Tuple([Name('sysv', Store(), lineno=745, col_offset=4), Name('sysa', Store(), lineno=745, col_offset=9)], Store(), lineno=745, col_offset=4)], Call(Name('_mac_ver_lookup', Load(), lineno=745, col_offset=16), [Tuple([Str('sysv', lineno=745, col_offset=33), Str('sysa', lineno=745, col_offset=40)], Load(), lineno=745, col_offset=33)], [], None, None, lineno=745, col_offset=16), lineno=745, col_offset=4), If(Name('sysv', Load(), lineno=747, col_offset=7), [Assign([Name('major', Store(), lineno=748, col_offset=8)], BinOp(BinOp(Name('sysv', Load(), lineno=748, col_offset=17), BitAnd(), Num(65280, lineno=748, col_offset=24), lineno=748, col_offset=17), RShift(), Num(8, lineno=748, col_offset=35), lineno=748, col_offset=16), lineno=748, col_offset=8), Assign([Name('minor', Store(), lineno=749, col_offset=8)], BinOp(BinOp(Name('sysv', Load(), lineno=749, col_offset=17), BitAnd(), Num(240, lineno=749, col_offset=24), lineno=749, col_offset=17), RShift(), Num(4, lineno=749, col_offset=35), lineno=749, col_offset=16), lineno=749, col_offset=8), Assign([Name('patch', Store(), lineno=750, col_offset=8)], BinOp(Name('sysv', Load(), lineno=750, col_offset=17), BitAnd(), Num(15, lineno=750, col_offset=24), lineno=750, col_offset=17), lineno=750, col_offset=8), If(Compare(Tuple([Name('major', Load(), lineno=752, col_offset=12), Name('minor', Load(), lineno=752, col_offset=19)], Load(), lineno=752, col_offset=12), [GtE()], [Tuple([Num(10, lineno=752, col_offset=30), Num(4, lineno=752, col_offset=34)], Load(), lineno=752, col_offset=30)], lineno=752, col_offset=11), [Assign([Tuple([Name('major', Store(), lineno=758, col_offset=12), Name('minor', Store(), lineno=758, col_offset=18), Name('patch', Store(), lineno=758, col_offset=24)], Store(), lineno=758, col_offset=12)], Call(Name('_mac_ver_lookup', Load(), lineno=758, col_offset=32), [Tuple([Str('sys1', lineno=758, col_offset=49), Str('sys2', lineno=758, col_offset=56), Str('sys3', lineno=758, col_offset=63)], Load(), lineno=758, col_offset=49)], [], None, None, lineno=758, col_offset=32), lineno=758, col_offset=12), Assign([Name('release', Store(), lineno=759, col_offset=12)], BinOp(Str('%i.%i.%i', lineno=759, col_offset=22), Mod(), Tuple([Name('major', Load(), lineno=759, col_offset=35), Name('minor', Load(), lineno=759, col_offset=42), Name('patch', Load(), lineno=759, col_offset=49)], Load(), lineno=759, col_offset=35), lineno=759, col_offset=22), lineno=759, col_offset=12)], [Assign([Name('release', Store(), lineno=761, col_offset=12)], BinOp(Str('%s.%i.%i', lineno=761, col_offset=22), Mod(), Tuple([Call(Name('_bcd2str', Load(), lineno=761, col_offset=36), [Name('major', Load(), lineno=761, col_offset=45)], [], None, None, lineno=761, col_offset=36), Name('minor', Load(), lineno=761, col_offset=52), Name('patch', Load(), lineno=761, col_offset=58)], Load(), lineno=761, col_offset=36), lineno=761, col_offset=22), lineno=761, col_offset=12)], lineno=752, col_offset=8)], [], lineno=747, col_offset=4), If(Name('sysa', Load(), lineno=763, col_offset=7), [Assign([Name('machine', Store(), lineno=764, col_offset=8)], Call(Attribute(Dict([Num(1, lineno=764, col_offset=19), Num(2, lineno=765, col_offset=19), Num(10, lineno=766, col_offset=19)], [Str('68k', lineno=764, col_offset=24), Str('PowerPC', lineno=765, col_offset=24), Str('i386', lineno=766, col_offset=24)], lineno=764, col_offset=18), 'get', Load(), lineno=764, col_offset=18), [Name('sysa', Load(), lineno=766, col_offset=36), Str('', lineno=766, col_offset=41)], [], None, None, lineno=764, col_offset=18), lineno=764, col_offset=8)], [], lineno=763, col_offset=4), Return(Tuple([Name('release', Load(), lineno=768, col_offset=11), Name('versioninfo', Load(), lineno=768, col_offset=19), Name('machine', Load(), lineno=768, col_offset=31)], Load(), lineno=768, col_offset=11), lineno=768, col_offset=4)], [], lineno=730, col_offset=0), FunctionDef('_mac_ver_xml', arguments([], None, None, []), [Assign([Name('fn', Store(), lineno=771, col_offset=4)], Str('/System/Library/CoreServices/SystemVersion.plist', lineno=771, col_offset=9), lineno=771, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=772, col_offset=11), 'path', Load(), lineno=772, col_offset=11), 'exists', Load(), lineno=772, col_offset=11), [Name('fn', Load(), lineno=772, col_offset=26)], [], None, None, lineno=772, col_offset=11), lineno=772, col_offset=7), [Return(Name('None', Load(), lineno=773, col_offset=15), lineno=773, col_offset=8)], [], lineno=772, col_offset=4), TryExcept([Import([alias('plistlib', None)], lineno=776, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=777, col_offset=11), None, [Return(Name('None', Load(), lineno=778, col_offset=15), lineno=778, col_offset=8)], lineno=777, col_offset=4)], [], lineno=775, col_offset=4), Assign([Name('pl', Store(), lineno=780, col_offset=4)], Call(Attribute(Name('plistlib', Load(), lineno=780, col_offset=9), 'readPlist', Load(), lineno=780, col_offset=9), [Name('fn', Load(), lineno=780, col_offset=28)], [], None, None, lineno=780, col_offset=9), lineno=780, col_offset=4), Assign([Name('release', Store(), lineno=781, col_offset=4)], Subscript(Name('pl', Load(), lineno=781, col_offset=14), Index(Str('ProductVersion', lineno=781, col_offset=17)), Load(), lineno=781, col_offset=14), lineno=781, col_offset=4), Assign([Name('versioninfo', Store(), lineno=782, col_offset=4)], Tuple([Str('', lineno=782, col_offset=17), Str('', lineno=782, col_offset=21), Str('', lineno=782, col_offset=25)], Load(), lineno=782, col_offset=17), lineno=782, col_offset=4), Assign([Name('machine', Store(), lineno=783, col_offset=4)], Subscript(Call(Attribute(Name('os', Load(), lineno=783, col_offset=14), 'uname', Load(), lineno=783, col_offset=14), [], [], None, None, lineno=783, col_offset=14), Index(Num(4, lineno=783, col_offset=25)), Load(), lineno=783, col_offset=14), lineno=783, col_offset=4), If(Compare(Name('machine', Load(), lineno=784, col_offset=7), [In()], [Tuple([Str('ppc', lineno=784, col_offset=19), Str('Power Macintosh', lineno=784, col_offset=26)], Load(), lineno=784, col_offset=19)], lineno=784, col_offset=7), [Assign([Name('machine', Store(), lineno=786, col_offset=8)], Str('PowerPC', lineno=786, col_offset=18), lineno=786, col_offset=8)], [], lineno=784, col_offset=4), Return(Tuple([Name('release', Load(), lineno=788, col_offset=11), Name('versioninfo', Load(), lineno=788, col_offset=19), Name('machine', Load(), lineno=788, col_offset=31)], Load(), lineno=788, col_offset=11), lineno=788, col_offset=4)], [], lineno=770, col_offset=0), FunctionDef('mac_ver', arguments([Name('release', Param(), lineno=791, col_offset=12), Name('versioninfo', Param(), lineno=791, col_offset=23), Name('machine', Param(), lineno=791, col_offset=46)], None, None, [Str('', lineno=791, col_offset=20), Tuple([Str('', lineno=791, col_offset=36), Str('', lineno=791, col_offset=39), Str('', lineno=791, col_offset=42)], Load(), lineno=791, col_offset=36), Str('', lineno=791, col_offset=54)]), [Expr(Str(" Get MacOS version information and return it as tuple (release,\n        versioninfo, machine) with versioninfo being a tuple (version,\n        dev_stage, non_release_version).\n\n        Entries which cannot be determined are set to the paramter values\n        which default to ''. All tuple entries are strings.\n    ", lineno=799, col_offset=-1), lineno=799, col_offset=-1), Assign([Name('info', Store(), lineno=803, col_offset=4)], Call(Name('_mac_ver_xml', Load(), lineno=803, col_offset=11), [], [], None, None, lineno=803, col_offset=11), lineno=803, col_offset=4), If(Compare(Name('info', Load(), lineno=804, col_offset=7), [IsNot()], [Name('None', Load(), lineno=804, col_offset=19)], lineno=804, col_offset=7), [Return(Name('info', Load(), lineno=805, col_offset=15), lineno=805, col_offset=8)], [], lineno=804, col_offset=4), Assign([Name('info', Store(), lineno=809, col_offset=4)], Call(Name('_mac_ver_gestalt', Load(), lineno=809, col_offset=11), [], [], None, None, lineno=809, col_offset=11), lineno=809, col_offset=4), If(Compare(Name('info', Load(), lineno=810, col_offset=7), [IsNot()], [Name('None', Load(), lineno=810, col_offset=19)], lineno=810, col_offset=7), [Return(Name('info', Load(), lineno=811, col_offset=15), lineno=811, col_offset=8)], [], lineno=810, col_offset=4), Return(Tuple([Name('release', Load(), lineno=814, col_offset=11), Name('versioninfo', Load(), lineno=814, col_offset=19), Name('machine', Load(), lineno=814, col_offset=31)], Load(), lineno=814, col_offset=11), lineno=814, col_offset=4)], [], lineno=791, col_offset=0), FunctionDef('_java_getprop', arguments([Name('name', Param(), lineno=816, col_offset=18), Name('default', Param(), lineno=816, col_offset=23)], None, None, []), [ImportFrom('java.lang', [alias('System', None)], 0, lineno=818, col_offset=4), TryExcept([Assign([Name('value', Store(), lineno=820, col_offset=8)], Call(Attribute(Name('System', Load(), lineno=820, col_offset=16), 'getProperty', Load(), lineno=820, col_offset=16), [Name('name', Load(), lineno=820, col_offset=35)], [], None, None, lineno=820, col_offset=16), lineno=820, col_offset=8), If(Compare(Name('value', Load(), lineno=821, col_offset=11), [Is()], [Name('None', Load(), lineno=821, col_offset=20)], lineno=821, col_offset=11), [Return(Name('default', Load(), lineno=822, col_offset=19), lineno=822, col_offset=12)], [], lineno=821, col_offset=8), Return(Name('value', Load(), lineno=823, col_offset=15), lineno=823, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=824, col_offset=11), None, [Return(Name('default', Load(), lineno=825, col_offset=15), lineno=825, col_offset=8)], lineno=824, col_offset=4)], [], lineno=819, col_offset=4)], [], lineno=816, col_offset=0), FunctionDef('java_ver', arguments([Name('release', Param(), lineno=827, col_offset=13), Name('vendor', Param(), lineno=827, col_offset=24), Name('vminfo', Param(), lineno=827, col_offset=34), Name('osinfo', Param(), lineno=827, col_offset=52)], None, None, [Str('', lineno=827, col_offset=21), Str('', lineno=827, col_offset=31), Tuple([Str('', lineno=827, col_offset=42), Str('', lineno=827, col_offset=45), Str('', lineno=827, col_offset=48)], Load(), lineno=827, col_offset=42), Tuple([Str('', lineno=827, col_offset=60), Str('', lineno=827, col_offset=63), Str('', lineno=827, col_offset=66)], Load(), lineno=827, col_offset=60)]), [Expr(Str(" Version interface for Jython.\n\n        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being\n        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a\n        tuple (os_name,os_version,os_arch).\n\n        Values which cannot be determined are set to the defaults\n        given as parameters (which all default to '').\n\n    ", lineno=838, col_offset=-1), lineno=838, col_offset=-1), TryExcept([Import([alias('java.lang', None)], lineno=841, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=842, col_offset=11), None, [Return(Tuple([Name('release', Load(), lineno=843, col_offset=15), Name('vendor', Load(), lineno=843, col_offset=23), Name('vminfo', Load(), lineno=843, col_offset=30), Name('osinfo', Load(), lineno=843, col_offset=37)], Load(), lineno=843, col_offset=15), lineno=843, col_offset=8)], lineno=842, col_offset=4)], [], lineno=840, col_offset=4), Assign([Name('vendor', Store(), lineno=845, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=845, col_offset=13), [Str('java.vendor', lineno=845, col_offset=27), Name('vendor', Load(), lineno=845, col_offset=42)], [], None, None, lineno=845, col_offset=13), lineno=845, col_offset=4), Assign([Name('release', Store(), lineno=846, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=846, col_offset=14), [Str('java.version', lineno=846, col_offset=28), Name('release', Load(), lineno=846, col_offset=44)], [], None, None, lineno=846, col_offset=14), lineno=846, col_offset=4), Assign([Tuple([Name('vm_name', Store(), lineno=847, col_offset=4), Name('vm_release', Store(), lineno=847, col_offset=13), Name('vm_vendor', Store(), lineno=847, col_offset=25)], Store(), lineno=847, col_offset=4)], Name('vminfo', Load(), lineno=847, col_offset=37), lineno=847, col_offset=4), Assign([Name('vm_name', Store(), lineno=848, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=848, col_offset=14), [Str('java.vm.name', lineno=848, col_offset=28), Name('vm_name', Load(), lineno=848, col_offset=44)], [], None, None, lineno=848, col_offset=14), lineno=848, col_offset=4), Assign([Name('vm_vendor', Store(), lineno=849, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=849, col_offset=16), [Str('java.vm.vendor', lineno=849, col_offset=30), Name('vm_vendor', Load(), lineno=849, col_offset=48)], [], None, None, lineno=849, col_offset=16), lineno=849, col_offset=4), Assign([Name('vm_release', Store(), lineno=850, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=850, col_offset=17), [Str('java.vm.version', lineno=850, col_offset=31), Name('vm_release', Load(), lineno=850, col_offset=50)], [], None, None, lineno=850, col_offset=17), lineno=850, col_offset=4), Assign([Name('vminfo', Store(), lineno=851, col_offset=4)], Tuple([Name('vm_name', Load(), lineno=851, col_offset=13), Name('vm_release', Load(), lineno=851, col_offset=22), Name('vm_vendor', Load(), lineno=851, col_offset=34)], Load(), lineno=851, col_offset=13), lineno=851, col_offset=4), Assign([Tuple([Name('os_name', Store(), lineno=852, col_offset=4), Name('os_version', Store(), lineno=852, col_offset=13), Name('os_arch', Store(), lineno=852, col_offset=25)], Store(), lineno=852, col_offset=4)], Name('osinfo', Load(), lineno=852, col_offset=35), lineno=852, col_offset=4), Assign([Name('os_arch', Store(), lineno=853, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=853, col_offset=14), [Str('java.os.arch', lineno=853, col_offset=28), Name('os_arch', Load(), lineno=853, col_offset=44)], [], None, None, lineno=853, col_offset=14), lineno=853, col_offset=4), Assign([Name('os_name', Store(), lineno=854, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=854, col_offset=14), [Str('java.os.name', lineno=854, col_offset=28), Name('os_name', Load(), lineno=854, col_offset=44)], [], None, None, lineno=854, col_offset=14), lineno=854, col_offset=4), Assign([Name('os_version', Store(), lineno=855, col_offset=4)], Call(Name('_java_getprop', Load(), lineno=855, col_offset=17), [Str('java.os.version', lineno=855, col_offset=31), Name('os_version', Load(), lineno=855, col_offset=50)], [], None, None, lineno=855, col_offset=17), lineno=855, col_offset=4), Assign([Name('osinfo', Store(), lineno=856, col_offset=4)], Tuple([Name('os_name', Load(), lineno=856, col_offset=13), Name('os_version', Load(), lineno=856, col_offset=22), Name('os_arch', Load(), lineno=856, col_offset=34)], Load(), lineno=856, col_offset=13), lineno=856, col_offset=4), Return(Tuple([Name('release', Load(), lineno=858, col_offset=11), Name('vendor', Load(), lineno=858, col_offset=20), Name('vminfo', Load(), lineno=858, col_offset=28), Name('osinfo', Load(), lineno=858, col_offset=36)], Load(), lineno=858, col_offset=11), lineno=858, col_offset=4)], [], lineno=827, col_offset=0), FunctionDef('system_alias', arguments([Name('system', Param(), lineno=862, col_offset=17), Name('release', Param(), lineno=862, col_offset=24), Name('version', Param(), lineno=862, col_offset=32)], None, None, []), [Expr(Str(' Returns (system,release,version) aliased to common\n        marketing names used for some systems.\n\n        It also does some reordering of the information in some cases\n        where it would otherwise cause confusion.\n\n    ', lineno=870, col_offset=-1), lineno=870, col_offset=-1), If(Compare(Name('system', Load(), lineno=871, col_offset=7), [Eq()], [Str('Rhapsody', lineno=871, col_offset=17)], lineno=871, col_offset=7), [Return(Tuple([Str('MacOS X Server', lineno=874, col_offset=15), BinOp(Name('system', Load(), lineno=874, col_offset=32), Add(), Name('release', Load(), lineno=874, col_offset=39), lineno=874, col_offset=32), Name('version', Load(), lineno=874, col_offset=47)], Load(), lineno=874, col_offset=15), lineno=874, col_offset=8)], [If(Compare(Name('system', Load(), lineno=876, col_offset=9), [Eq()], [Str('SunOS', lineno=876, col_offset=19)], lineno=876, col_offset=9), [If(Compare(Name('release', Load(), lineno=878, col_offset=11), [Lt()], [Str('5', lineno=878, col_offset=21)], lineno=878, col_offset=11), [Return(Tuple([Name('system', Load(), lineno=880, col_offset=19), Name('release', Load(), lineno=880, col_offset=26), Name('version', Load(), lineno=880, col_offset=34)], Load(), lineno=880, col_offset=19), lineno=880, col_offset=12)], [], lineno=878, col_offset=8), Assign([Name('l', Store(), lineno=882, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=882, col_offset=12), 'split', Load(), lineno=882, col_offset=12), [Name('release', Load(), lineno=882, col_offset=25), Str('.', lineno=882, col_offset=33)], [], None, None, lineno=882, col_offset=12), lineno=882, col_offset=8), If(Name('l', Load(), lineno=883, col_offset=11), [TryExcept([Assign([Name('major', Store(), lineno=885, col_offset=16)], Call(Name('int', Load(), lineno=885, col_offset=24), [Subscript(Name('l', Load(), lineno=885, col_offset=28), Index(Num(0, lineno=885, col_offset=30)), Load(), lineno=885, col_offset=28)], [], None, None, lineno=885, col_offset=24), lineno=885, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=886, col_offset=19), None, [Pass( lineno=887, col_offset=16)], lineno=886, col_offset=12)], [Assign([Name('major', Store(), lineno=889, col_offset=16)], BinOp(Name('major', Load(), lineno=889, col_offset=24), Sub(), Num(3, lineno=889, col_offset=32), lineno=889, col_offset=24), lineno=889, col_offset=16), Assign([Subscript(Name('l', Load(), lineno=890, col_offset=16), Index(Num(0, lineno=890, col_offset=18)), Store(), lineno=890, col_offset=16)], Call(Name('str', Load(), lineno=890, col_offset=23), [Name('major', Load(), lineno=890, col_offset=27)], [], None, None, lineno=890, col_offset=23), lineno=890, col_offset=16), Assign([Name('release', Store(), lineno=891, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=891, col_offset=26), 'join', Load(), lineno=891, col_offset=26), [Name('l', Load(), lineno=891, col_offset=38), Str('.', lineno=891, col_offset=40)], [], None, None, lineno=891, col_offset=26), lineno=891, col_offset=16)], lineno=884, col_offset=12)], [], lineno=883, col_offset=8), If(Compare(Name('release', Load(), lineno=892, col_offset=11), [Lt()], [Str('6', lineno=892, col_offset=21)], lineno=892, col_offset=11), [Assign([Name('system', Store(), lineno=893, col_offset=12)], Str('Solaris', lineno=893, col_offset=21), lineno=893, col_offset=12)], [Assign([Name('system', Store(), lineno=896, col_offset=12)], Str('Solaris', lineno=896, col_offset=21), lineno=896, col_offset=12)], lineno=892, col_offset=8)], [If(Compare(Name('system', Load(), lineno=898, col_offset=9), [Eq()], [Str('IRIX64', lineno=898, col_offset=19)], lineno=898, col_offset=9), [Assign([Name('system', Store(), lineno=902, col_offset=8)], Str('IRIX', lineno=902, col_offset=17), lineno=902, col_offset=8), If(Name('version', Load(), lineno=903, col_offset=11), [Assign([Name('version', Store(), lineno=904, col_offset=12)], BinOp(Name('version', Load(), lineno=904, col_offset=22), Add(), Str(' (64bit)', lineno=904, col_offset=32), lineno=904, col_offset=22), lineno=904, col_offset=12)], [Assign([Name('version', Store(), lineno=906, col_offset=12)], Str('64bit', lineno=906, col_offset=22), lineno=906, col_offset=12)], lineno=903, col_offset=8)], [If(Compare(Name('system', Load(), lineno=908, col_offset=9), [In()], [Tuple([Str('win32', lineno=908, col_offset=20), Str('win16', lineno=908, col_offset=28)], Load(), lineno=908, col_offset=20)], lineno=908, col_offset=9), [Assign([Name('system', Store(), lineno=910, col_offset=8)], Str('Windows', lineno=910, col_offset=17), lineno=910, col_offset=8)], [], lineno=908, col_offset=9)], lineno=898, col_offset=9)], lineno=876, col_offset=9)], lineno=871, col_offset=4), Return(Tuple([Name('system', Load(), lineno=912, col_offset=11), Name('release', Load(), lineno=912, col_offset=18), Name('version', Load(), lineno=912, col_offset=26)], Load(), lineno=912, col_offset=11), lineno=912, col_offset=4)], [], lineno=862, col_offset=0), FunctionDef('_platform', arguments([], 'args', None, []), [Expr(Str(' Helper to format the platform string in a filename\n        compatible format e.g. "system-version-machine".\n    ', lineno=920, col_offset=-1), lineno=920, col_offset=-1), Assign([Name('platform', Store(), lineno=922, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=922, col_offset=15), 'join', Load(), lineno=922, col_offset=15), [Call(Name('map', Load(), lineno=923, col_offset=8), [Attribute(Name('string', Load(), lineno=923, col_offset=12), 'strip', Load(), lineno=923, col_offset=12), Call(Name('filter', Load(), lineno=924, col_offset=12), [Name('len', Load(), lineno=924, col_offset=19), Name('args', Load(), lineno=924, col_offset=24)], [], None, None, lineno=924, col_offset=12)], [], None, None, lineno=923, col_offset=8), Str('-', lineno=925, col_offset=8)], [], None, None, lineno=922, col_offset=15), lineno=922, col_offset=4), Assign([Name('replace', Store(), lineno=928, col_offset=4)], Attribute(Name('string', Load(), lineno=928, col_offset=14), 'replace', Load(), lineno=928, col_offset=14), lineno=928, col_offset=4), Assign([Name('platform', Store(), lineno=929, col_offset=4)], Call(Name('replace', Load(), lineno=929, col_offset=15), [Name('platform', Load(), lineno=929, col_offset=23), Str(' ', lineno=929, col_offset=32), Str('_', lineno=929, col_offset=36)], [], None, None, lineno=929, col_offset=15), lineno=929, col_offset=4), Assign([Name('platform', Store(), lineno=930, col_offset=4)], Call(Name('replace', Load(), lineno=930, col_offset=15), [Name('platform', Load(), lineno=930, col_offset=23), Str('/', lineno=930, col_offset=32), Str('-', lineno=930, col_offset=36)], [], None, None, lineno=930, col_offset=15), lineno=930, col_offset=4), Assign([Name('platform', Store(), lineno=931, col_offset=4)], Call(Name('replace', Load(), lineno=931, col_offset=15), [Name('platform', Load(), lineno=931, col_offset=23), Str('\\', lineno=931, col_offset=32), Str('-', lineno=931, col_offset=37)], [], None, None, lineno=931, col_offset=15), lineno=931, col_offset=4), Assign([Name('platform', Store(), lineno=932, col_offset=4)], Call(Name('replace', Load(), lineno=932, col_offset=15), [Name('platform', Load(), lineno=932, col_offset=23), Str(':', lineno=932, col_offset=32), Str('-', lineno=932, col_offset=36)], [], None, None, lineno=932, col_offset=15), lineno=932, col_offset=4), Assign([Name('platform', Store(), lineno=933, col_offset=4)], Call(Name('replace', Load(), lineno=933, col_offset=15), [Name('platform', Load(), lineno=933, col_offset=23), Str(';', lineno=933, col_offset=32), Str('-', lineno=933, col_offset=36)], [], None, None, lineno=933, col_offset=15), lineno=933, col_offset=4), Assign([Name('platform', Store(), lineno=934, col_offset=4)], Call(Name('replace', Load(), lineno=934, col_offset=15), [Name('platform', Load(), lineno=934, col_offset=23), Str('"', lineno=934, col_offset=32), Str('-', lineno=934, col_offset=36)], [], None, None, lineno=934, col_offset=15), lineno=934, col_offset=4), Assign([Name('platform', Store(), lineno=935, col_offset=4)], Call(Name('replace', Load(), lineno=935, col_offset=15), [Name('platform', Load(), lineno=935, col_offset=23), Str('(', lineno=935, col_offset=32), Str('-', lineno=935, col_offset=36)], [], None, None, lineno=935, col_offset=15), lineno=935, col_offset=4), Assign([Name('platform', Store(), lineno=936, col_offset=4)], Call(Name('replace', Load(), lineno=936, col_offset=15), [Name('platform', Load(), lineno=936, col_offset=23), Str(')', lineno=936, col_offset=32), Str('-', lineno=936, col_offset=36)], [], None, None, lineno=936, col_offset=15), lineno=936, col_offset=4), Assign([Name('platform', Store(), lineno=939, col_offset=4)], Call(Name('replace', Load(), lineno=939, col_offset=15), [Name('platform', Load(), lineno=939, col_offset=23), Str('unknown', lineno=939, col_offset=32), Str('', lineno=939, col_offset=42)], [], None, None, lineno=939, col_offset=15), lineno=939, col_offset=4), While(Num(1, lineno=942, col_offset=10), [Assign([Name('cleaned', Store(), lineno=943, col_offset=8)], Call(Name('replace', Load(), lineno=943, col_offset=18), [Name('platform', Load(), lineno=943, col_offset=26), Str('--', lineno=943, col_offset=35), Str('-', lineno=943, col_offset=40)], [], None, None, lineno=943, col_offset=18), lineno=943, col_offset=8), If(Compare(Name('cleaned', Load(), lineno=944, col_offset=11), [Eq()], [Name('platform', Load(), lineno=944, col_offset=22)], lineno=944, col_offset=11), [Break( lineno=945, col_offset=12)], [], lineno=944, col_offset=8), Assign([Name('platform', Store(), lineno=946, col_offset=8)], Name('cleaned', Load(), lineno=946, col_offset=19), lineno=946, col_offset=8)], [], lineno=942, col_offset=4), While(Compare(Subscript(Name('platform', Load(), lineno=947, col_offset=10), Index(Num(-1, lineno=947, col_offset=20)), Load(), lineno=947, col_offset=10), [Eq()], [Str('-', lineno=947, col_offset=26)], lineno=947, col_offset=10), [Assign([Name('platform', Store(), lineno=948, col_offset=8)], Subscript(Name('platform', Load(), lineno=948, col_offset=19), Slice(None, Num(-1, lineno=948, col_offset=30), None), Load(), lineno=948, col_offset=19), lineno=948, col_offset=8)], [], lineno=947, col_offset=4), Return(Name('platform', Load(), lineno=950, col_offset=11), lineno=950, col_offset=4)], [], lineno=916, col_offset=0), FunctionDef('_node', arguments([Name('default', Param(), lineno=952, col_offset=10)], None, None, [Str('', lineno=952, col_offset=18)]), [Expr(Str(' Helper to determine the node name of this machine.\n    ', lineno=955, col_offset=-1), lineno=955, col_offset=-1), TryExcept([Import([alias('socket', None)], lineno=957, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=958, col_offset=11), None, [Return(Name('default', Load(), lineno=960, col_offset=15), lineno=960, col_offset=8)], lineno=958, col_offset=4)], [], lineno=956, col_offset=4), TryExcept([Return(Call(Attribute(Name('socket', Load(), lineno=962, col_offset=15), 'gethostname', Load(), lineno=962, col_offset=15), [], [], None, None, lineno=962, col_offset=15), lineno=962, col_offset=8)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=963, col_offset=11), 'error', Load(), lineno=963, col_offset=11), None, [Return(Name('default', Load(), lineno=965, col_offset=15), lineno=965, col_offset=8)], lineno=963, col_offset=4)], [], lineno=961, col_offset=4)], [], lineno=952, col_offset=0), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=968, col_offset=7), [Attribute(Name('os', Load(), lineno=968, col_offset=15), 'path', Load(), lineno=968, col_offset=15), Str('abspath', lineno=968, col_offset=23)], [], None, None, lineno=968, col_offset=7), lineno=968, col_offset=3), [FunctionDef('_abspath', arguments([Name('path', Param(), lineno=970, col_offset=17), Name('isabs', Param(), lineno=972, col_offset=17), Name('join', Param(), lineno=972, col_offset=37), Name('getcwd', Param(), lineno=972, col_offset=55), Name('normpath', Param(), lineno=973, col_offset=17)], None, None, [Attribute(Attribute(Name('os', Load(), lineno=972, col_offset=23), 'path', Load(), lineno=972, col_offset=23), 'isabs', Load(), lineno=972, col_offset=23), Attribute(Attribute(Name('os', Load(), lineno=972, col_offset=42), 'path', Load(), lineno=972, col_offset=42), 'join', Load(), lineno=972, col_offset=42), Attribute(Name('os', Load(), lineno=972, col_offset=62), 'getcwd', Load(), lineno=972, col_offset=62), Attribute(Attribute(Name('os', Load(), lineno=973, col_offset=26), 'path', Load(), lineno=973, col_offset=26), 'normpath', Load(), lineno=973, col_offset=26)]), [If(UnaryOp(Not(), Call(Name('isabs', Load(), lineno=975, col_offset=15), [Name('path', Load(), lineno=975, col_offset=21)], [], None, None, lineno=975, col_offset=15), lineno=975, col_offset=11), [Assign([Name('path', Store(), lineno=976, col_offset=12)], Call(Name('join', Load(), lineno=976, col_offset=19), [Call(Name('getcwd', Load(), lineno=976, col_offset=24), [], [], None, None, lineno=976, col_offset=24), Name('path', Load(), lineno=976, col_offset=34)], [], None, None, lineno=976, col_offset=19), lineno=976, col_offset=12)], [], lineno=975, col_offset=8), Return(Call(Name('normpath', Load(), lineno=977, col_offset=15), [Name('path', Load(), lineno=977, col_offset=24)], [], None, None, lineno=977, col_offset=15), lineno=977, col_offset=8)], [], lineno=970, col_offset=4)], [Assign([Name('_abspath', Store(), lineno=981, col_offset=4)], Attribute(Attribute(Name('os', Load(), lineno=981, col_offset=15), 'path', Load(), lineno=981, col_offset=15), 'abspath', Load(), lineno=981, col_offset=15), lineno=981, col_offset=4)], lineno=968, col_offset=0), FunctionDef('_follow_symlinks', arguments([Name('filepath', Param(), lineno=983, col_offset=21)], None, None, []), [Expr(Str(' In case filepath is a symlink, follow it until a\n        real file is reached.\n    ', lineno=987, col_offset=-1), lineno=987, col_offset=-1), Assign([Name('filepath', Store(), lineno=988, col_offset=4)], Call(Name('_abspath', Load(), lineno=988, col_offset=15), [Name('filepath', Load(), lineno=988, col_offset=24)], [], None, None, lineno=988, col_offset=15), lineno=988, col_offset=4), While(Call(Attribute(Attribute(Name('os', Load(), lineno=989, col_offset=10), 'path', Load(), lineno=989, col_offset=10), 'islink', Load(), lineno=989, col_offset=10), [Name('filepath', Load(), lineno=989, col_offset=25)], [], None, None, lineno=989, col_offset=10), [Assign([Name('filepath', Store(), lineno=990, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=990, col_offset=19), 'path', Load(), lineno=990, col_offset=19), 'normpath', Load(), lineno=990, col_offset=19), [Call(Attribute(Attribute(Name('os', Load(), lineno=991, col_offset=12), 'path', Load(), lineno=991, col_offset=12), 'join', Load(), lineno=991, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=991, col_offset=25), 'path', Load(), lineno=991, col_offset=25), 'dirname', Load(), lineno=991, col_offset=25), [Name('filepath', Load(), lineno=991, col_offset=41)], [], None, None, lineno=991, col_offset=25), Call(Attribute(Name('os', Load(), lineno=991, col_offset=51), 'readlink', Load(), lineno=991, col_offset=51), [Name('filepath', Load(), lineno=991, col_offset=63)], [], None, None, lineno=991, col_offset=51)], [], None, None, lineno=991, col_offset=12)], [], None, None, lineno=990, col_offset=19), lineno=990, col_offset=8)], [], lineno=989, col_offset=4), Return(Name('filepath', Load(), lineno=992, col_offset=11), lineno=992, col_offset=4)], [], lineno=983, col_offset=0), FunctionDef('_syscmd_uname', arguments([Name('option', Param(), lineno=994, col_offset=18), Name('default', Param(), lineno=994, col_offset=25)], None, None, [Str('', lineno=994, col_offset=33)]), [Expr(Str(" Interface to the system's uname command.\n    ", lineno=997, col_offset=-1), lineno=997, col_offset=-1), If(Compare(Attribute(Name('sys', Load(), lineno=998, col_offset=7), 'platform', Load(), lineno=998, col_offset=7), [In()], [Tuple([Str('dos', lineno=998, col_offset=24), Str('win32', lineno=998, col_offset=30), Str('win16', lineno=998, col_offset=38), Str('os2', lineno=998, col_offset=46)], Load(), lineno=998, col_offset=24)], lineno=998, col_offset=7), [Return(Name('default', Load(), lineno=1000, col_offset=15), lineno=1000, col_offset=8)], [], lineno=998, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=1002, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=1002, col_offset=12), 'popen', Load(), lineno=1002, col_offset=12), [BinOp(Str('uname %s 2> %s', lineno=1002, col_offset=21), Mod(), Tuple([Name('option', Load(), lineno=1002, col_offset=41), Name('DEV_NULL', Load(), lineno=1002, col_offset=49)], Load(), lineno=1002, col_offset=41), lineno=1002, col_offset=21)], [], None, None, lineno=1002, col_offset=12), lineno=1002, col_offset=8)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=1003, col_offset=12), Attribute(Name('os', Load(), lineno=1003, col_offset=27), 'error', Load(), lineno=1003, col_offset=27)], Load(), lineno=1003, col_offset=12), None, [Return(Name('default', Load(), lineno=1004, col_offset=15), lineno=1004, col_offset=8)], lineno=1003, col_offset=4)], [], lineno=1001, col_offset=4), Assign([Name('output', Store(), lineno=1005, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=1005, col_offset=13), 'strip', Load(), lineno=1005, col_offset=13), [Call(Attribute(Name('f', Load(), lineno=1005, col_offset=26), 'read', Load(), lineno=1005, col_offset=26), [], [], None, None, lineno=1005, col_offset=26)], [], None, None, lineno=1005, col_offset=13), lineno=1005, col_offset=4), Assign([Name('rc', Store(), lineno=1006, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=1006, col_offset=9), 'close', Load(), lineno=1006, col_offset=9), [], [], None, None, lineno=1006, col_offset=9), lineno=1006, col_offset=4), If(BoolOp(Or(), [UnaryOp(Not(), Name('output', Load(), lineno=1007, col_offset=11), lineno=1007, col_offset=7), Name('rc', Load(), lineno=1007, col_offset=21)], lineno=1007, col_offset=7), [Return(Name('default', Load(), lineno=1008, col_offset=15), lineno=1008, col_offset=8)], [Return(Name('output', Load(), lineno=1010, col_offset=15), lineno=1010, col_offset=8)], lineno=1007, col_offset=4)], [], lineno=994, col_offset=0), FunctionDef('_syscmd_file', arguments([Name('target', Param(), lineno=1012, col_offset=17), Name('default', Param(), lineno=1012, col_offset=24)], None, None, [Str('', lineno=1012, col_offset=32)]), [Expr(Str(" Interface to the system's file command.\n\n        The function uses the -b option of the file command to have it\n        ommit the filename in its output and if possible the -L option\n        to have the command follow symlinks. It returns default in\n        case the command should fail.\n\n    ", lineno=1021, col_offset=-1), lineno=1021, col_offset=-1), If(Compare(Attribute(Name('sys', Load(), lineno=1022, col_offset=7), 'platform', Load(), lineno=1022, col_offset=7), [In()], [Tuple([Str('dos', lineno=1022, col_offset=24), Str('win32', lineno=1022, col_offset=30), Str('win16', lineno=1022, col_offset=38), Str('os2', lineno=1022, col_offset=46)], Load(), lineno=1022, col_offset=24)], lineno=1022, col_offset=7), [Return(Name('default', Load(), lineno=1024, col_offset=15), lineno=1024, col_offset=8)], [], lineno=1022, col_offset=4), Assign([Name('target', Store(), lineno=1025, col_offset=4)], Call(Attribute(Call(Name('_follow_symlinks', Load(), lineno=1025, col_offset=13), [Name('target', Load(), lineno=1025, col_offset=30)], [], None, None, lineno=1025, col_offset=13), 'replace', Load(), lineno=1025, col_offset=13), [Str('"', lineno=1025, col_offset=46), Str('\\"', lineno=1025, col_offset=51)], [], None, None, lineno=1025, col_offset=13), lineno=1025, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=1027, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=1027, col_offset=12), 'popen', Load(), lineno=1027, col_offset=12), [BinOp(Str('file "%s" 2> %s', lineno=1027, col_offset=21), Mod(), Tuple([Name('target', Load(), lineno=1027, col_offset=42), Name('DEV_NULL', Load(), lineno=1027, col_offset=50)], Load(), lineno=1027, col_offset=42), lineno=1027, col_offset=21)], [], None, None, lineno=1027, col_offset=12), lineno=1027, col_offset=8)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=1028, col_offset=12), Attribute(Name('os', Load(), lineno=1028, col_offset=27), 'error', Load(), lineno=1028, col_offset=27)], Load(), lineno=1028, col_offset=12), None, [Return(Name('default', Load(), lineno=1029, col_offset=15), lineno=1029, col_offset=8)], lineno=1028, col_offset=4)], [], lineno=1026, col_offset=4), Assign([Name('output', Store(), lineno=1030, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=1030, col_offset=13), 'strip', Load(), lineno=1030, col_offset=13), [Call(Attribute(Name('f', Load(), lineno=1030, col_offset=26), 'read', Load(), lineno=1030, col_offset=26), [], [], None, None, lineno=1030, col_offset=26)], [], None, None, lineno=1030, col_offset=13), lineno=1030, col_offset=4), Assign([Name('rc', Store(), lineno=1031, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=1031, col_offset=9), 'close', Load(), lineno=1031, col_offset=9), [], [], None, None, lineno=1031, col_offset=9), lineno=1031, col_offset=4), If(BoolOp(Or(), [UnaryOp(Not(), Name('output', Load(), lineno=1032, col_offset=11), lineno=1032, col_offset=7), Name('rc', Load(), lineno=1032, col_offset=21)], lineno=1032, col_offset=7), [Return(Name('default', Load(), lineno=1033, col_offset=15), lineno=1033, col_offset=8)], [Return(Name('output', Load(), lineno=1035, col_offset=15), lineno=1035, col_offset=8)], lineno=1032, col_offset=4)], [], lineno=1012, col_offset=0), Assign([Name('_default_architecture', Store(), lineno=1041, col_offset=0)], Dict([Str('win32', lineno=1042, col_offset=4), Str('win16', lineno=1043, col_offset=4), Str('dos', lineno=1044, col_offset=4)], [Tuple([Str('', lineno=1042, col_offset=14), Str('WindowsPE', lineno=1042, col_offset=17)], Load(), lineno=1042, col_offset=14), Tuple([Str('', lineno=1043, col_offset=14), Str('Windows', lineno=1043, col_offset=17)], Load(), lineno=1043, col_offset=14), Tuple([Str('', lineno=1044, col_offset=12), Str('MSDOS', lineno=1044, col_offset=15)], Load(), lineno=1044, col_offset=12)], lineno=1041, col_offset=24), lineno=1041, col_offset=0), Assign([Name('_architecture_split', Store(), lineno=1047, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=1047, col_offset=22), 'compile', Load(), lineno=1047, col_offset=22), [Str('[\\s,]', lineno=1047, col_offset=33)], [], None, None, lineno=1047, col_offset=22), 'split', Load(), lineno=1047, col_offset=22), lineno=1047, col_offset=0), FunctionDef('architecture', arguments([Name('executable', Param(), lineno=1049, col_offset=17), Name('bits', Param(), lineno=1049, col_offset=43), Name('linkage', Param(), lineno=1049, col_offset=51)], None, None, [Attribute(Name('sys', Load(), lineno=1049, col_offset=28), 'executable', Load(), lineno=1049, col_offset=28), Str('', lineno=1049, col_offset=48), Str('', lineno=1049, col_offset=59)]), [Expr(Str(' Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n\n        Returns a tuple (bits,linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as \'\', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n\n        The function relies on the system\'s "file" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the "file" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n\n    ', lineno=1069, col_offset=-1), lineno=1069, col_offset=-1), If(UnaryOp(Not(), Name('bits', Load(), lineno=1072, col_offset=11), lineno=1072, col_offset=7), [Import([alias('struct', None)], lineno=1073, col_offset=8), TryExcept([Assign([Name('size', Store(), lineno=1075, col_offset=12)], Call(Attribute(Name('struct', Load(), lineno=1075, col_offset=19), 'calcsize', Load(), lineno=1075, col_offset=19), [Str('P', lineno=1075, col_offset=35)], [], None, None, lineno=1075, col_offset=19), lineno=1075, col_offset=12)], [ExceptHandler(Attribute(Name('struct', Load(), lineno=1076, col_offset=15), 'error', Load(), lineno=1076, col_offset=15), None, [Assign([Name('size', Store(), lineno=1078, col_offset=12)], Call(Attribute(Name('struct', Load(), lineno=1078, col_offset=19), 'calcsize', Load(), lineno=1078, col_offset=19), [Str('l', lineno=1078, col_offset=35)], [], None, None, lineno=1078, col_offset=19), lineno=1078, col_offset=12)], lineno=1076, col_offset=8)], [], lineno=1074, col_offset=8), Assign([Name('bits', Store(), lineno=1079, col_offset=8)], BinOp(Call(Name('str', Load(), lineno=1079, col_offset=15), [BinOp(Name('size', Load(), lineno=1079, col_offset=19), Mult(), Num(8, lineno=1079, col_offset=24), lineno=1079, col_offset=19)], [], None, None, lineno=1079, col_offset=15), Add(), Str('bit', lineno=1079, col_offset=29), lineno=1079, col_offset=15), lineno=1079, col_offset=8)], [], lineno=1072, col_offset=4), If(Name('executable', Load(), lineno=1082, col_offset=7), [Assign([Name('output', Store(), lineno=1083, col_offset=8)], Call(Name('_syscmd_file', Load(), lineno=1083, col_offset=17), [Name('executable', Load(), lineno=1083, col_offset=30), Str('', lineno=1083, col_offset=42)], [], None, None, lineno=1083, col_offset=17), lineno=1083, col_offset=8)], [Assign([Name('output', Store(), lineno=1085, col_offset=8)], Str('', lineno=1085, col_offset=17), lineno=1085, col_offset=8)], lineno=1082, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Name('output', Load(), lineno=1087, col_offset=11), lineno=1087, col_offset=7), Compare(Name('executable', Load(), lineno=1088, col_offset=7), [Eq()], [Attribute(Name('sys', Load(), lineno=1088, col_offset=21), 'executable', Load(), lineno=1088, col_offset=21)], lineno=1088, col_offset=7)], lineno=1087, col_offset=7), [If(Compare(Attribute(Name('sys', Load(), lineno=1091, col_offset=11), 'platform', Load(), lineno=1091, col_offset=11), [In()], [Name('_default_architecture', Load(), lineno=1091, col_offset=27)], lineno=1091, col_offset=11), [Assign([Tuple([Name('b', Store(), lineno=1092, col_offset=12), Name('l', Store(), lineno=1092, col_offset=15)], Store(), lineno=1092, col_offset=12)], Subscript(Name('_default_architecture', Load(), lineno=1092, col_offset=19), Index(Attribute(Name('sys', Load(), lineno=1092, col_offset=41), 'platform', Load(), lineno=1092, col_offset=41)), Load(), lineno=1092, col_offset=19), lineno=1092, col_offset=12), If(Name('b', Load(), lineno=1093, col_offset=15), [Assign([Name('bits', Store(), lineno=1094, col_offset=16)], Name('b', Load(), lineno=1094, col_offset=23), lineno=1094, col_offset=16)], [], lineno=1093, col_offset=12), If(Name('l', Load(), lineno=1095, col_offset=15), [Assign([Name('linkage', Store(), lineno=1096, col_offset=16)], Name('l', Load(), lineno=1096, col_offset=26), lineno=1096, col_offset=16)], [], lineno=1095, col_offset=12)], [], lineno=1091, col_offset=8), Return(Tuple([Name('bits', Load(), lineno=1097, col_offset=15), Name('linkage', Load(), lineno=1097, col_offset=21)], Load(), lineno=1097, col_offset=15), lineno=1097, col_offset=8)], [], lineno=1087, col_offset=4), Assign([Name('fileout', Store(), lineno=1100, col_offset=4)], Subscript(Call(Name('_architecture_split', Load(), lineno=1100, col_offset=14), [Name('output', Load(), lineno=1100, col_offset=34)], [], None, None, lineno=1100, col_offset=14), Slice(Num(1, lineno=1100, col_offset=42), None, None), Load(), lineno=1100, col_offset=14), lineno=1100, col_offset=4), If(Compare(Str('executable', lineno=1102, col_offset=7), [NotIn()], [Name('fileout', Load(), lineno=1102, col_offset=27)], lineno=1102, col_offset=7), [Return(Tuple([Name('bits', Load(), lineno=1104, col_offset=15), Name('linkage', Load(), lineno=1104, col_offset=20)], Load(), lineno=1104, col_offset=15), lineno=1104, col_offset=8)], [], lineno=1102, col_offset=4), If(Compare(Str('32-bit', lineno=1107, col_offset=7), [In()], [Name('fileout', Load(), lineno=1107, col_offset=19)], lineno=1107, col_offset=7), [Assign([Name('bits', Store(), lineno=1108, col_offset=8)], Str('32bit', lineno=1108, col_offset=15), lineno=1108, col_offset=8)], [If(Compare(Str('N32', lineno=1109, col_offset=9), [In()], [Name('fileout', Load(), lineno=1109, col_offset=18)], lineno=1109, col_offset=9), [Assign([Name('bits', Store(), lineno=1111, col_offset=8)], Str('n32bit', lineno=1111, col_offset=15), lineno=1111, col_offset=8)], [If(Compare(Str('64-bit', lineno=1112, col_offset=9), [In()], [Name('fileout', Load(), lineno=1112, col_offset=21)], lineno=1112, col_offset=9), [Assign([Name('bits', Store(), lineno=1113, col_offset=8)], Str('64bit', lineno=1113, col_offset=15), lineno=1113, col_offset=8)], [], lineno=1112, col_offset=9)], lineno=1109, col_offset=9)], lineno=1107, col_offset=4), If(Compare(Str('ELF', lineno=1116, col_offset=7), [In()], [Name('fileout', Load(), lineno=1116, col_offset=16)], lineno=1116, col_offset=7), [Assign([Name('linkage', Store(), lineno=1117, col_offset=8)], Str('ELF', lineno=1117, col_offset=18), lineno=1117, col_offset=8)], [If(Compare(Str('PE', lineno=1118, col_offset=9), [In()], [Name('fileout', Load(), lineno=1118, col_offset=17)], lineno=1118, col_offset=9), [If(Compare(Str('Windows', lineno=1120, col_offset=11), [In()], [Name('fileout', Load(), lineno=1120, col_offset=24)], lineno=1120, col_offset=11), [Assign([Name('linkage', Store(), lineno=1121, col_offset=12)], Str('WindowsPE', lineno=1121, col_offset=22), lineno=1121, col_offset=12)], [Assign([Name('linkage', Store(), lineno=1123, col_offset=12)], Str('PE', lineno=1123, col_offset=22), lineno=1123, col_offset=12)], lineno=1120, col_offset=8)], [If(Compare(Str('COFF', lineno=1124, col_offset=9), [In()], [Name('fileout', Load(), lineno=1124, col_offset=19)], lineno=1124, col_offset=9), [Assign([Name('linkage', Store(), lineno=1125, col_offset=8)], Str('COFF', lineno=1125, col_offset=18), lineno=1125, col_offset=8)], [If(Compare(Str('MS-DOS', lineno=1126, col_offset=9), [In()], [Name('fileout', Load(), lineno=1126, col_offset=21)], lineno=1126, col_offset=9), [Assign([Name('linkage', Store(), lineno=1127, col_offset=8)], Str('MSDOS', lineno=1127, col_offset=18), lineno=1127, col_offset=8)], [Pass( lineno=1130, col_offset=8)], lineno=1126, col_offset=9)], lineno=1124, col_offset=9)], lineno=1118, col_offset=9)], lineno=1116, col_offset=4), Return(Tuple([Name('bits', Load(), lineno=1132, col_offset=11), Name('linkage', Load(), lineno=1132, col_offset=16)], Load(), lineno=1132, col_offset=11), lineno=1132, col_offset=4)], [], lineno=1049, col_offset=0), Assign([Name('_uname_cache', Store(), lineno=1136, col_offset=0)], Name('None', Load(), lineno=1136, col_offset=15), lineno=1136, col_offset=0), FunctionDef('uname', arguments([], None, None, []), [Expr(Str(" Fairly portable uname interface. Returns a tuple\n        of strings (system,node,release,version,machine,processor)\n        identifying the underlying platform.\n\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n\n        Entries which cannot be determined are set to ''.\n\n    ", lineno=1149, col_offset=-1), lineno=1149, col_offset=-1), Global(['_uname_cache'], lineno=1150, col_offset=4), Assign([Name('no_os_uname', Store(), lineno=1151, col_offset=4)], Num(0, lineno=1151, col_offset=18), lineno=1151, col_offset=4), If(Compare(Name('_uname_cache', Load(), lineno=1153, col_offset=7), [IsNot()], [Name('None', Load(), lineno=1153, col_offset=27)], lineno=1153, col_offset=7), [Return(Name('_uname_cache', Load(), lineno=1154, col_offset=15), lineno=1154, col_offset=8)], [], lineno=1153, col_offset=4), Assign([Name('processor', Store(), lineno=1156, col_offset=4)], Str('', lineno=1156, col_offset=16), lineno=1156, col_offset=4), TryExcept([Assign([Tuple([Name('system', Store(), lineno=1160, col_offset=8), Name('node', Store(), lineno=1160, col_offset=15), Name('release', Store(), lineno=1160, col_offset=20), Name('version', Store(), lineno=1160, col_offset=28), Name('machine', Store(), lineno=1160, col_offset=36)], Store(), lineno=1160, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=1160, col_offset=46), 'uname', Load(), lineno=1160, col_offset=46), [], [], None, None, lineno=1160, col_offset=46), lineno=1160, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=1161, col_offset=11), None, [Assign([Name('no_os_uname', Store(), lineno=1162, col_offset=8)], Num(1, lineno=1162, col_offset=22), lineno=1162, col_offset=8)], lineno=1161, col_offset=4)], [], lineno=1159, col_offset=4), If(BoolOp(Or(), [Name('no_os_uname', Load(), lineno=1164, col_offset=7), UnaryOp(Not(), Call(Name('filter', Load(), lineno=1164, col_offset=26), [Name('None', Load(), lineno=1164, col_offset=33), Tuple([Name('system', Load(), lineno=1164, col_offset=40), Name('node', Load(), lineno=1164, col_offset=48), Name('release', Load(), lineno=1164, col_offset=54), Name('version', Load(), lineno=1164, col_offset=63), Name('machine', Load(), lineno=1164, col_offset=72)], Load(), lineno=1164, col_offset=40)], [], None, None, lineno=1164, col_offset=26), lineno=1164, col_offset=22)], lineno=1164, col_offset=7), [If(Name('no_os_uname', Load(), lineno=1167, col_offset=11), [Assign([Name('system', Store(), lineno=1168, col_offset=12)], Attribute(Name('sys', Load(), lineno=1168, col_offset=21), 'platform', Load(), lineno=1168, col_offset=21), lineno=1168, col_offset=12), Assign([Name('release', Store(), lineno=1169, col_offset=12)], Str('', lineno=1169, col_offset=22), lineno=1169, col_offset=12), Assign([Name('version', Store(), lineno=1170, col_offset=12)], Str('', lineno=1170, col_offset=22), lineno=1170, col_offset=12), Assign([Name('node', Store(), lineno=1171, col_offset=12)], Call(Name('_node', Load(), lineno=1171, col_offset=19), [], [], None, None, lineno=1171, col_offset=19), lineno=1171, col_offset=12), Assign([Name('machine', Store(), lineno=1172, col_offset=12)], Str('', lineno=1172, col_offset=22), lineno=1172, col_offset=12)], [], lineno=1167, col_offset=8), Assign([Name('use_syscmd_ver', Store(), lineno=1174, col_offset=8)], Num(1, lineno=1174, col_offset=25), lineno=1174, col_offset=8), If(Compare(Name('system', Load(), lineno=1177, col_offset=11), [Eq()], [Str('win32', lineno=1177, col_offset=21)], lineno=1177, col_offset=11), [Assign([Tuple([Name('release', Store(), lineno=1178, col_offset=12), Name('version', Store(), lineno=1178, col_offset=20), Name('csd', Store(), lineno=1178, col_offset=28), Name('ptype', Store(), lineno=1178, col_offset=32)], Store(), lineno=1178, col_offset=12)], Call(Name('win32_ver', Load(), lineno=1178, col_offset=40), [], [], None, None, lineno=1178, col_offset=40), lineno=1178, col_offset=12), If(BoolOp(And(), [Name('release', Load(), lineno=1179, col_offset=15), Name('version', Load(), lineno=1179, col_offset=27)], lineno=1179, col_offset=15), [Assign([Name('use_syscmd_ver', Store(), lineno=1180, col_offset=16)], Num(0, lineno=1180, col_offset=33), lineno=1180, col_offset=16)], [], lineno=1179, col_offset=12), If(UnaryOp(Not(), Name('machine', Load(), lineno=1185, col_offset=19), lineno=1185, col_offset=15), [If(Compare(Str('PROCESSOR_ARCHITEW6432', lineno=1187, col_offset=19), [In()], [Attribute(Name('os', Load(), lineno=1187, col_offset=47), 'environ', Load(), lineno=1187, col_offset=47)], lineno=1187, col_offset=19), [Assign([Name('machine', Store(), lineno=1188, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=1188, col_offset=30), 'environ', Load(), lineno=1188, col_offset=30), 'get', Load(), lineno=1188, col_offset=30), [Str('PROCESSOR_ARCHITEW6432', lineno=1188, col_offset=45), Str('', lineno=1188, col_offset=71)], [], None, None, lineno=1188, col_offset=30), lineno=1188, col_offset=20)], [Assign([Name('machine', Store(), lineno=1190, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=1190, col_offset=30), 'environ', Load(), lineno=1190, col_offset=30), 'get', Load(), lineno=1190, col_offset=30), [Str('PROCESSOR_ARCHITECTURE', lineno=1190, col_offset=45), Str('', lineno=1190, col_offset=71)], [], None, None, lineno=1190, col_offset=30), lineno=1190, col_offset=20)], lineno=1187, col_offset=16)], [], lineno=1185, col_offset=12), If(UnaryOp(Not(), Name('processor', Load(), lineno=1191, col_offset=19), lineno=1191, col_offset=15), [Assign([Name('processor', Store(), lineno=1192, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=1192, col_offset=28), 'environ', Load(), lineno=1192, col_offset=28), 'get', Load(), lineno=1192, col_offset=28), [Str('PROCESSOR_IDENTIFIER', lineno=1192, col_offset=43), Name('machine', Load(), lineno=1192, col_offset=67)], [], None, None, lineno=1192, col_offset=28), lineno=1192, col_offset=16)], [], lineno=1191, col_offset=12)], [], lineno=1177, col_offset=8), If(Name('use_syscmd_ver', Load(), lineno=1196, col_offset=11), [Assign([Tuple([Name('system', Store(), lineno=1197, col_offset=12), Name('release', Store(), lineno=1197, col_offset=19), Name('version', Store(), lineno=1197, col_offset=27)], Store(), lineno=1197, col_offset=12)], Call(Name('_syscmd_ver', Load(), lineno=1197, col_offset=37), [Name('system', Load(), lineno=1197, col_offset=49)], [], None, None, lineno=1197, col_offset=37), lineno=1197, col_offset=12), If(Compare(Name('system', Load(), lineno=1200, col_offset=15), [Eq()], [Str('Microsoft Windows', lineno=1200, col_offset=25)], lineno=1200, col_offset=15), [Assign([Name('system', Store(), lineno=1201, col_offset=16)], Str('Windows', lineno=1201, col_offset=25), lineno=1201, col_offset=16)], [If(BoolOp(And(), [Compare(Name('system', Load(), lineno=1202, col_offset=17), [Eq()], [Str('Microsoft', lineno=1202, col_offset=27)], lineno=1202, col_offset=17), Compare(Name('release', Load(), lineno=1202, col_offset=43), [Eq()], [Str('Windows', lineno=1202, col_offset=54)], lineno=1202, col_offset=43)], lineno=1202, col_offset=17), [Assign([Name('system', Store(), lineno=1207, col_offset=16)], Str('Windows', lineno=1207, col_offset=25), lineno=1207, col_offset=16), If(Compare(Str('6.0', lineno=1208, col_offset=19), [Eq()], [Subscript(Name('version', Load(), lineno=1208, col_offset=28), Slice(None, Num(3, lineno=1208, col_offset=37), None), Load(), lineno=1208, col_offset=28)], lineno=1208, col_offset=19), [Assign([Name('release', Store(), lineno=1209, col_offset=20)], Str('Vista', lineno=1209, col_offset=30), lineno=1209, col_offset=20)], [Assign([Name('release', Store(), lineno=1211, col_offset=20)], Str('', lineno=1211, col_offset=30), lineno=1211, col_offset=20)], lineno=1208, col_offset=16)], [], lineno=1202, col_offset=17)], lineno=1200, col_offset=12)], [], lineno=1196, col_offset=8), If(Compare(Name('system', Load(), lineno=1215, col_offset=11), [In()], [Tuple([Str('win32', lineno=1215, col_offset=22), Str('win16', lineno=1215, col_offset=30)], Load(), lineno=1215, col_offset=22)], lineno=1215, col_offset=11), [If(UnaryOp(Not(), Name('version', Load(), lineno=1216, col_offset=19), lineno=1216, col_offset=15), [If(Compare(Name('system', Load(), lineno=1217, col_offset=19), [Eq()], [Str('win32', lineno=1217, col_offset=29)], lineno=1217, col_offset=19), [Assign([Name('version', Store(), lineno=1218, col_offset=20)], Str('32bit', lineno=1218, col_offset=30), lineno=1218, col_offset=20)], [Assign([Name('version', Store(), lineno=1220, col_offset=20)], Str('16bit', lineno=1220, col_offset=30), lineno=1220, col_offset=20)], lineno=1217, col_offset=16)], [], lineno=1216, col_offset=12), Assign([Name('system', Store(), lineno=1221, col_offset=12)], Str('Windows', lineno=1221, col_offset=21), lineno=1221, col_offset=12)], [If(Compare(Subscript(Name('system', Load(), lineno=1223, col_offset=13), Slice(None, Num(4, lineno=1223, col_offset=21), None), Load(), lineno=1223, col_offset=13), [Eq()], [Str('java', lineno=1223, col_offset=27)], lineno=1223, col_offset=13), [Assign([Tuple([Name('release', Store(), lineno=1224, col_offset=12), Name('vendor', Store(), lineno=1224, col_offset=20), Name('vminfo', Store(), lineno=1224, col_offset=27), Name('osinfo', Store(), lineno=1224, col_offset=34)], Store(), lineno=1224, col_offset=12)], Call(Name('java_ver', Load(), lineno=1224, col_offset=43), [], [], None, None, lineno=1224, col_offset=43), lineno=1224, col_offset=12), Assign([Name('system', Store(), lineno=1225, col_offset=12)], Str('Java', lineno=1225, col_offset=21), lineno=1225, col_offset=12), Assign([Name('version', Store(), lineno=1226, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=1226, col_offset=22), 'join', Load(), lineno=1226, col_offset=22), [Name('vminfo', Load(), lineno=1226, col_offset=34), Str(', ', lineno=1226, col_offset=41)], [], None, None, lineno=1226, col_offset=22), lineno=1226, col_offset=12), If(UnaryOp(Not(), Name('version', Load(), lineno=1227, col_offset=19), lineno=1227, col_offset=15), [Assign([Name('version', Store(), lineno=1228, col_offset=16)], Name('vendor', Load(), lineno=1228, col_offset=26), lineno=1228, col_offset=16)], [], lineno=1227, col_offset=12)], [], lineno=1223, col_offset=13)], lineno=1215, col_offset=8)], [], lineno=1164, col_offset=4), If(Compare(Name('system', Load(), lineno=1231, col_offset=7), [Eq()], [Str('OpenVMS', lineno=1231, col_offset=17)], lineno=1231, col_offset=7), [If(BoolOp(Or(), [UnaryOp(Not(), Name('release', Load(), lineno=1233, col_offset=15), lineno=1233, col_offset=11), Compare(Name('release', Load(), lineno=1233, col_offset=26), [Eq()], [Str('0', lineno=1233, col_offset=37)], lineno=1233, col_offset=26)], lineno=1233, col_offset=11), [Assign([Name('release', Store(), lineno=1234, col_offset=12)], Name('version', Load(), lineno=1234, col_offset=22), lineno=1234, col_offset=12), Assign([Name('version', Store(), lineno=1235, col_offset=12)], Str('', lineno=1235, col_offset=22), lineno=1235, col_offset=12)], [], lineno=1233, col_offset=8), TryExcept([Import([alias('vms_lib', None)], lineno=1238, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=1239, col_offset=15), None, [Pass( lineno=1240, col_offset=12)], lineno=1239, col_offset=8)], [Assign([Tuple([Name('csid', Store(), lineno=1242, col_offset=12), Name('cpu_number', Store(), lineno=1242, col_offset=18)], Store(), lineno=1242, col_offset=12)], Call(Attribute(Name('vms_lib', Load(), lineno=1242, col_offset=31), 'getsyi', Load(), lineno=1242, col_offset=31), [Str('SYI$_CPU', lineno=1242, col_offset=46), Num(0, lineno=1242, col_offset=57)], [], None, None, lineno=1242, col_offset=31), lineno=1242, col_offset=12), If(Compare(Name('cpu_number', Load(), lineno=1243, col_offset=16), [GtE()], [Num(128, lineno=1243, col_offset=30)], lineno=1243, col_offset=16), [Assign([Name('processor', Store(), lineno=1244, col_offset=16)], Str('Alpha', lineno=1244, col_offset=28), lineno=1244, col_offset=16)], [Assign([Name('processor', Store(), lineno=1246, col_offset=16)], Str('VAX', lineno=1246, col_offset=28), lineno=1246, col_offset=16)], lineno=1243, col_offset=12)], lineno=1237, col_offset=8)], [], lineno=1231, col_offset=4), If(UnaryOp(Not(), Name('processor', Load(), lineno=1247, col_offset=11), lineno=1247, col_offset=7), [Assign([Name('processor', Store(), lineno=1249, col_offset=8)], Call(Name('_syscmd_uname', Load(), lineno=1249, col_offset=20), [Str('-p', lineno=1249, col_offset=34), Str('', lineno=1249, col_offset=39)], [], None, None, lineno=1249, col_offset=20), lineno=1249, col_offset=8)], [], lineno=1247, col_offset=4), If(Compare(Name('system', Load(), lineno=1252, col_offset=7), [Eq()], [Str('unknown', lineno=1252, col_offset=17)], lineno=1252, col_offset=7), [Assign([Name('system', Store(), lineno=1253, col_offset=8)], Str('', lineno=1253, col_offset=17), lineno=1253, col_offset=8)], [], lineno=1252, col_offset=4), If(Compare(Name('node', Load(), lineno=1254, col_offset=7), [Eq()], [Str('unknown', lineno=1254, col_offset=15)], lineno=1254, col_offset=7), [Assign([Name('node', Store(), lineno=1255, col_offset=8)], Str('', lineno=1255, col_offset=15), lineno=1255, col_offset=8)], [], lineno=1254, col_offset=4), If(Compare(Name('release', Load(), lineno=1256, col_offset=7), [Eq()], [Str('unknown', lineno=1256, col_offset=18)], lineno=1256, col_offset=7), [Assign([Name('release', Store(), lineno=1257, col_offset=8)], Str('', lineno=1257, col_offset=18), lineno=1257, col_offset=8)], [], lineno=1256, col_offset=4), If(Compare(Name('version', Load(), lineno=1258, col_offset=7), [Eq()], [Str('unknown', lineno=1258, col_offset=18)], lineno=1258, col_offset=7), [Assign([Name('version', Store(), lineno=1259, col_offset=8)], Str('', lineno=1259, col_offset=18), lineno=1259, col_offset=8)], [], lineno=1258, col_offset=4), If(Compare(Name('machine', Load(), lineno=1260, col_offset=7), [Eq()], [Str('unknown', lineno=1260, col_offset=18)], lineno=1260, col_offset=7), [Assign([Name('machine', Store(), lineno=1261, col_offset=8)], Str('', lineno=1261, col_offset=18), lineno=1261, col_offset=8)], [], lineno=1260, col_offset=4), If(Compare(Name('processor', Load(), lineno=1262, col_offset=7), [Eq()], [Str('unknown', lineno=1262, col_offset=20)], lineno=1262, col_offset=7), [Assign([Name('processor', Store(), lineno=1263, col_offset=8)], Str('', lineno=1263, col_offset=20), lineno=1263, col_offset=8)], [], lineno=1262, col_offset=4), If(BoolOp(And(), [Compare(Name('system', Load(), lineno=1266, col_offset=7), [Eq()], [Str('Microsoft', lineno=1266, col_offset=17)], lineno=1266, col_offset=7), Compare(Name('release', Load(), lineno=1266, col_offset=33), [Eq()], [Str('Windows', lineno=1266, col_offset=44)], lineno=1266, col_offset=33)], lineno=1266, col_offset=7), [Assign([Name('system', Store(), lineno=1267, col_offset=8)], Str('Windows', lineno=1267, col_offset=17), lineno=1267, col_offset=8), Assign([Name('release', Store(), lineno=1268, col_offset=8)], Str('Vista', lineno=1268, col_offset=18), lineno=1268, col_offset=8)], [], lineno=1266, col_offset=4), Assign([Name('_uname_cache', Store(), lineno=1270, col_offset=4)], Tuple([Name('system', Load(), lineno=1270, col_offset=19), Name('node', Load(), lineno=1270, col_offset=26), Name('release', Load(), lineno=1270, col_offset=31), Name('version', Load(), lineno=1270, col_offset=39), Name('machine', Load(), lineno=1270, col_offset=47), Name('processor', Load(), lineno=1270, col_offset=55)], Load(), lineno=1270, col_offset=19), lineno=1270, col_offset=4), Return(Name('_uname_cache', Load(), lineno=1271, col_offset=11), lineno=1271, col_offset=4)], [], lineno=1138, col_offset=0), FunctionDef('system', arguments([], None, None, []), [Expr(Str(" Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\n        An empty string is returned if the value cannot be determined.\n\n    ", lineno=1281, col_offset=-1), lineno=1281, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1282, col_offset=11), [], [], None, None, lineno=1282, col_offset=11), Index(Num(0, lineno=1282, col_offset=19)), Load(), lineno=1282, col_offset=11), lineno=1282, col_offset=4)], [], lineno=1275, col_offset=0), FunctionDef('node', arguments([], None, None, []), [Expr(Str(" Returns the computer's network name (which may not be fully\n        qualified)\n\n        An empty string is returned if the value cannot be determined.\n\n    ", lineno=1291, col_offset=-1), lineno=1291, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1292, col_offset=11), [], [], None, None, lineno=1292, col_offset=11), Index(Num(1, lineno=1292, col_offset=19)), Load(), lineno=1292, col_offset=11), lineno=1292, col_offset=4)], [], lineno=1284, col_offset=0), FunctionDef('release', arguments([], None, None, []), [Expr(Str(" Returns the system's release, e.g. '2.2.0' or 'NT'\n\n        An empty string is returned if the value cannot be determined.\n\n    ", lineno=1300, col_offset=-1), lineno=1300, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1301, col_offset=11), [], [], None, None, lineno=1301, col_offset=11), Index(Num(2, lineno=1301, col_offset=19)), Load(), lineno=1301, col_offset=11), lineno=1301, col_offset=4)], [], lineno=1294, col_offset=0), FunctionDef('version', arguments([], None, None, []), [Expr(Str(" Returns the system's release version, e.g. '#3 on degas'\n\n        An empty string is returned if the value cannot be determined.\n\n    ", lineno=1309, col_offset=-1), lineno=1309, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1310, col_offset=11), [], [], None, None, lineno=1310, col_offset=11), Index(Num(3, lineno=1310, col_offset=19)), Load(), lineno=1310, col_offset=11), lineno=1310, col_offset=4)], [], lineno=1303, col_offset=0), FunctionDef('machine', arguments([], None, None, []), [Expr(Str(" Returns the machine type, e.g. 'i386'\n\n        An empty string is returned if the value cannot be determined.\n\n    ", lineno=1318, col_offset=-1), lineno=1318, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1319, col_offset=11), [], [], None, None, lineno=1319, col_offset=11), Index(Num(4, lineno=1319, col_offset=19)), Load(), lineno=1319, col_offset=11), lineno=1319, col_offset=4)], [], lineno=1312, col_offset=0), FunctionDef('processor', arguments([], None, None, []), [Expr(Str(" Returns the (true) processor name, e.g. 'amdk6'\n\n        An empty string is returned if the value cannot be\n        determined. Note that many platforms do not provide this\n        information or simply return the same value as for machine(),\n        e.g.  NetBSD does this.\n\n    ", lineno=1330, col_offset=-1), lineno=1330, col_offset=-1), Return(Subscript(Call(Name('uname', Load(), lineno=1331, col_offset=11), [], [], None, None, lineno=1331, col_offset=11), Index(Num(5, lineno=1331, col_offset=19)), Load(), lineno=1331, col_offset=11), lineno=1331, col_offset=4)], [], lineno=1321, col_offset=0), Assign([Name('_sys_version_parser', Store(), lineno=1335, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=1335, col_offset=22), 'compile', Load(), lineno=1335, col_offset=22), [Str('([\\w.+]+)\\s*\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*\\[([^\\]]+)\\]?', lineno=1336, col_offset=4)], [], None, None, lineno=1335, col_offset=22), lineno=1335, col_offset=0), Assign([Name('_ironpython_sys_version_parser', Store(), lineno=1340, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=1340, col_offset=33), 'compile', Load(), lineno=1340, col_offset=33), [Str('IronPython\\s*([\\d\\.]+)(?: \\(([\\d\\.]+)\\))? on (.NET [\\d\\.]+)', lineno=1341, col_offset=4)], [], None, None, lineno=1340, col_offset=33), lineno=1340, col_offset=0), Assign([Name('_pypy_sys_version_parser', Store(), lineno=1346, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=1346, col_offset=27), 'compile', Load(), lineno=1346, col_offset=27), [Str('([\\w.+]+)\\s*\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*\\[PyPy [^\\]]+\\]?', lineno=1347, col_offset=4)], [], None, None, lineno=1346, col_offset=27), lineno=1346, col_offset=0), Assign([Name('_sys_version_cache', Store(), lineno=1351, col_offset=0)], Dict([], [], lineno=1351, col_offset=21), lineno=1351, col_offset=0), FunctionDef('_sys_version', arguments([Name('sys_version', Param(), lineno=1353, col_offset=17)], None, None, [Name('None', Load(), lineno=1353, col_offset=29)]), [Expr(Str(" Returns a parsed version of Python's sys.version as tuple\n        (name, version, branch, revision, buildno, builddate, compiler)\n        referring to the Python implementation name, version, branch,\n        revision, build number, build date/time as string and the compiler\n        identification string.\n\n        Note that unlike the Python sys.version, the returned value\n        for the Python version will always include the patchlevel (it\n        defaults to '.0').\n\n        The function returns empty strings for tuple entries that\n        cannot be determined.\n\n        sys_version may be given to parse an alternative version\n        string, e.g. if the version was read from a different Python\n        interpreter.\n\n    ", lineno=1372, col_offset=-1), lineno=1372, col_offset=-1), If(Compare(Name('sys_version', Load(), lineno=1374, col_offset=7), [Is()], [Name('None', Load(), lineno=1374, col_offset=22)], lineno=1374, col_offset=7), [Assign([Name('sys_version', Store(), lineno=1375, col_offset=8)], Attribute(Name('sys', Load(), lineno=1375, col_offset=22), 'version', Load(), lineno=1375, col_offset=22), lineno=1375, col_offset=8)], [], lineno=1374, col_offset=4), Assign([Name('result', Store(), lineno=1378, col_offset=4)], Call(Attribute(Name('_sys_version_cache', Load(), lineno=1378, col_offset=13), 'get', Load(), lineno=1378, col_offset=13), [Name('sys_version', Load(), lineno=1378, col_offset=36), Name('None', Load(), lineno=1378, col_offset=49)], [], None, None, lineno=1378, col_offset=13), lineno=1378, col_offset=4), If(Compare(Name('result', Load(), lineno=1379, col_offset=7), [IsNot()], [Name('None', Load(), lineno=1379, col_offset=21)], lineno=1379, col_offset=7), [Return(Name('result', Load(), lineno=1380, col_offset=15), lineno=1380, col_offset=8)], [], lineno=1379, col_offset=4), If(Compare(Subscript(Name('sys_version', Load(), lineno=1383, col_offset=7), Slice(None, Num(10, lineno=1383, col_offset=20), None), Load(), lineno=1383, col_offset=7), [Eq()], [Str('IronPython', lineno=1383, col_offset=27)], lineno=1383, col_offset=7), [Assign([Name('name', Store(), lineno=1385, col_offset=8)], Str('IronPython', lineno=1385, col_offset=15), lineno=1385, col_offset=8), Assign([Name('match', Store(), lineno=1386, col_offset=8)], Call(Attribute(Name('_ironpython_sys_version_parser', Load(), lineno=1386, col_offset=16), 'match', Load(), lineno=1386, col_offset=16), [Name('sys_version', Load(), lineno=1386, col_offset=53)], [], None, None, lineno=1386, col_offset=16), lineno=1386, col_offset=8), If(Compare(Name('match', Load(), lineno=1387, col_offset=11), [Is()], [Name('None', Load(), lineno=1387, col_offset=20)], lineno=1387, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1388, col_offset=18), [BinOp(Str('failed to parse IronPython sys.version: %s', lineno=1389, col_offset=16), Mod(), Call(Name('repr', Load(), lineno=1390, col_offset=16), [Name('sys_version', Load(), lineno=1390, col_offset=21)], [], None, None, lineno=1390, col_offset=16), lineno=1389, col_offset=16)], [], None, None, lineno=1388, col_offset=18), None, None, lineno=1388, col_offset=12)], [], lineno=1387, col_offset=8), Assign([Tuple([Name('version', Store(), lineno=1391, col_offset=8), Name('alt_version', Store(), lineno=1391, col_offset=17), Name('compiler', Store(), lineno=1391, col_offset=30)], Store(), lineno=1391, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=1391, col_offset=41), 'groups', Load(), lineno=1391, col_offset=41), [], [], None, None, lineno=1391, col_offset=41), lineno=1391, col_offset=8), Assign([Name('buildno', Store(), lineno=1392, col_offset=8)], Str('', lineno=1392, col_offset=18), lineno=1392, col_offset=8), Assign([Name('builddate', Store(), lineno=1393, col_offset=8)], Str('', lineno=1393, col_offset=20), lineno=1393, col_offset=8)], [If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=1395, col_offset=9), 'platform', Load(), lineno=1395, col_offset=9), Slice(None, Num(4, lineno=1395, col_offset=23), None), Load(), lineno=1395, col_offset=9), [Eq()], [Str('java', lineno=1395, col_offset=29)], lineno=1395, col_offset=9), [Assign([Name('name', Store(), lineno=1397, col_offset=8)], Str('Jython', lineno=1397, col_offset=15), lineno=1397, col_offset=8), Assign([Name('match', Store(), lineno=1398, col_offset=8)], Call(Attribute(Name('_sys_version_parser', Load(), lineno=1398, col_offset=16), 'match', Load(), lineno=1398, col_offset=16), [Name('sys_version', Load(), lineno=1398, col_offset=42)], [], None, None, lineno=1398, col_offset=16), lineno=1398, col_offset=8), If(Compare(Name('match', Load(), lineno=1399, col_offset=11), [Is()], [Name('None', Load(), lineno=1399, col_offset=20)], lineno=1399, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1400, col_offset=18), [BinOp(Str('failed to parse Jython sys.version: %s', lineno=1401, col_offset=16), Mod(), Call(Name('repr', Load(), lineno=1402, col_offset=16), [Name('sys_version', Load(), lineno=1402, col_offset=21)], [], None, None, lineno=1402, col_offset=16), lineno=1401, col_offset=16)], [], None, None, lineno=1400, col_offset=18), None, None, lineno=1400, col_offset=12)], [], lineno=1399, col_offset=8), Assign([Tuple([Name('version', Store(), lineno=1403, col_offset=8), Name('buildno', Store(), lineno=1403, col_offset=17), Name('builddate', Store(), lineno=1403, col_offset=26), Name('buildtime', Store(), lineno=1403, col_offset=37), Name('_', Store(), lineno=1403, col_offset=48)], Store(), lineno=1403, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=1403, col_offset=52), 'groups', Load(), lineno=1403, col_offset=52), [], [], None, None, lineno=1403, col_offset=52), lineno=1403, col_offset=8), Assign([Name('compiler', Store(), lineno=1404, col_offset=8)], Attribute(Name('sys', Load(), lineno=1404, col_offset=19), 'platform', Load(), lineno=1404, col_offset=19), lineno=1404, col_offset=8)], [If(Compare(Str('PyPy', lineno=1406, col_offset=9), [In()], [Name('sys_version', Load(), lineno=1406, col_offset=19)], lineno=1406, col_offset=9), [Assign([Name('name', Store(), lineno=1408, col_offset=8)], Str('PyPy', lineno=1408, col_offset=15), lineno=1408, col_offset=8), Assign([Name('match', Store(), lineno=1409, col_offset=8)], Call(Attribute(Name('_pypy_sys_version_parser', Load(), lineno=1409, col_offset=16), 'match', Load(), lineno=1409, col_offset=16), [Name('sys_version', Load(), lineno=1409, col_offset=47)], [], None, None, lineno=1409, col_offset=16), lineno=1409, col_offset=8), If(Compare(Name('match', Load(), lineno=1410, col_offset=11), [Is()], [Name('None', Load(), lineno=1410, col_offset=20)], lineno=1410, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1411, col_offset=18), [BinOp(Str('failed to parse PyPy sys.version: %s', lineno=1411, col_offset=29), Mod(), Call(Name('repr', Load(), lineno=1412, col_offset=29), [Name('sys_version', Load(), lineno=1412, col_offset=34)], [], None, None, lineno=1412, col_offset=29), lineno=1411, col_offset=29)], [], None, None, lineno=1411, col_offset=18), None, None, lineno=1411, col_offset=12)], [], lineno=1410, col_offset=8), Assign([Tuple([Name('version', Store(), lineno=1413, col_offset=8), Name('buildno', Store(), lineno=1413, col_offset=17), Name('builddate', Store(), lineno=1413, col_offset=26), Name('buildtime', Store(), lineno=1413, col_offset=37)], Store(), lineno=1413, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=1413, col_offset=49), 'groups', Load(), lineno=1413, col_offset=49), [], [], None, None, lineno=1413, col_offset=49), lineno=1413, col_offset=8), Assign([Name('compiler', Store(), lineno=1414, col_offset=8)], Str('', lineno=1414, col_offset=19), lineno=1414, col_offset=8)], [Assign([Name('match', Store(), lineno=1418, col_offset=8)], Call(Attribute(Name('_sys_version_parser', Load(), lineno=1418, col_offset=16), 'match', Load(), lineno=1418, col_offset=16), [Name('sys_version', Load(), lineno=1418, col_offset=42)], [], None, None, lineno=1418, col_offset=16), lineno=1418, col_offset=8), If(Compare(Name('match', Load(), lineno=1419, col_offset=11), [Is()], [Name('None', Load(), lineno=1419, col_offset=20)], lineno=1419, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1420, col_offset=18), [BinOp(Str('failed to parse CPython sys.version: %s', lineno=1421, col_offset=16), Mod(), Call(Name('repr', Load(), lineno=1422, col_offset=16), [Name('sys_version', Load(), lineno=1422, col_offset=21)], [], None, None, lineno=1422, col_offset=16), lineno=1421, col_offset=16)], [], None, None, lineno=1420, col_offset=18), None, None, lineno=1420, col_offset=12)], [], lineno=1419, col_offset=8), Assign([Tuple([Name('version', Store(), lineno=1423, col_offset=8), Name('buildno', Store(), lineno=1423, col_offset=17), Name('builddate', Store(), lineno=1423, col_offset=26), Name('buildtime', Store(), lineno=1423, col_offset=37), Name('compiler', Store(), lineno=1423, col_offset=48)], Store(), lineno=1423, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=1424, col_offset=14), 'groups', Load(), lineno=1424, col_offset=14), [], [], None, None, lineno=1424, col_offset=14), lineno=1423, col_offset=8), Assign([Name('name', Store(), lineno=1425, col_offset=8)], Str('CPython', lineno=1425, col_offset=15), lineno=1425, col_offset=8), Assign([Name('builddate', Store(), lineno=1426, col_offset=8)], BinOp(BinOp(Name('builddate', Load(), lineno=1426, col_offset=20), Add(), Str(' ', lineno=1426, col_offset=32), lineno=1426, col_offset=20), Add(), Name('buildtime', Load(), lineno=1426, col_offset=38), lineno=1426, col_offset=36), lineno=1426, col_offset=8)], lineno=1406, col_offset=9)], lineno=1395, col_offset=9)], lineno=1383, col_offset=4), If(Call(Name('hasattr', Load(), lineno=1428, col_offset=7), [Name('sys', Load(), lineno=1428, col_offset=15), Str('subversion', lineno=1428, col_offset=20)], [], None, None, lineno=1428, col_offset=7), [Assign([Tuple([Name('_', Store(), lineno=1430, col_offset=8), Name('branch', Store(), lineno=1430, col_offset=11), Name('revision', Store(), lineno=1430, col_offset=19)], Store(), lineno=1430, col_offset=8)], Attribute(Name('sys', Load(), lineno=1430, col_offset=30), 'subversion', Load(), lineno=1430, col_offset=30), lineno=1430, col_offset=8)], [Assign([Name('branch', Store(), lineno=1432, col_offset=8)], Str('', lineno=1432, col_offset=17), lineno=1432, col_offset=8), Assign([Name('revision', Store(), lineno=1433, col_offset=8)], Str('', lineno=1433, col_offset=19), lineno=1433, col_offset=8)], lineno=1428, col_offset=4), Assign([Name('l', Store(), lineno=1436, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=1436, col_offset=8), 'split', Load(), lineno=1436, col_offset=8), [Name('version', Load(), lineno=1436, col_offset=21), Str('.', lineno=1436, col_offset=30)], [], None, None, lineno=1436, col_offset=8), lineno=1436, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=1437, col_offset=7), [Name('l', Load(), lineno=1437, col_offset=11)], [], None, None, lineno=1437, col_offset=7), [Eq()], [Num(2, lineno=1437, col_offset=17)], lineno=1437, col_offset=7), [Expr(Call(Attribute(Name('l', Load(), lineno=1438, col_offset=8), 'append', Load(), lineno=1438, col_offset=8), [Str('0', lineno=1438, col_offset=17)], [], None, None, lineno=1438, col_offset=8), lineno=1438, col_offset=8), Assign([Name('version', Store(), lineno=1439, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=1439, col_offset=18), 'join', Load(), lineno=1439, col_offset=18), [Name('l', Load(), lineno=1439, col_offset=30), Str('.', lineno=1439, col_offset=33)], [], None, None, lineno=1439, col_offset=18), lineno=1439, col_offset=8)], [], lineno=1437, col_offset=4), Assign([Name('result', Store(), lineno=1442, col_offset=4)], Tuple([Name('name', Load(), lineno=1442, col_offset=14), Name('version', Load(), lineno=1442, col_offset=20), Name('branch', Load(), lineno=1442, col_offset=29), Name('revision', Load(), lineno=1442, col_offset=37), Name('buildno', Load(), lineno=1442, col_offset=47), Name('builddate', Load(), lineno=1442, col_offset=56), Name('compiler', Load(), lineno=1442, col_offset=67)], Load(), lineno=1442, col_offset=14), lineno=1442, col_offset=4), Assign([Subscript(Name('_sys_version_cache', Load(), lineno=1443, col_offset=4), Index(Name('sys_version', Load(), lineno=1443, col_offset=23)), Store(), lineno=1443, col_offset=4)], Name('result', Load(), lineno=1443, col_offset=38), lineno=1443, col_offset=4), Return(Name('result', Load(), lineno=1444, col_offset=11), lineno=1444, col_offset=4)], [], lineno=1353, col_offset=0), FunctionDef('python_implementation', arguments([], None, None, []), [Expr(Str(" Returns a string identifying the Python implementation.\n\n        Currently, the following implementations are identified:\n        'CPython' (C implementation of Python),\n        'IronPython' (.NET implementation of Python),\n        'Jython' (Java implementation of Python).\n\n    ", lineno=1455, col_offset=-1), lineno=1455, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1456, col_offset=11), [], [], None, None, lineno=1456, col_offset=11), Index(Num(0, lineno=1456, col_offset=26)), Load(), lineno=1456, col_offset=11), lineno=1456, col_offset=4)], [], lineno=1446, col_offset=0), FunctionDef('python_version', arguments([], None, None, []), [Expr(Str(" Returns the Python version as string 'major.minor.patchlevel'\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    ", lineno=1465, col_offset=-1), lineno=1465, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1466, col_offset=11), [], [], None, None, lineno=1466, col_offset=11), Index(Num(1, lineno=1466, col_offset=26)), Load(), lineno=1466, col_offset=11), lineno=1466, col_offset=4)], [], lineno=1458, col_offset=0), FunctionDef('python_version_tuple', arguments([], None, None, []), [Expr(Str(' Returns the Python version as tuple (major, minor, patchlevel)\n        of strings.\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    ', lineno=1476, col_offset=-1), lineno=1476, col_offset=-1), Return(Call(Name('tuple', Load(), lineno=1477, col_offset=11), [Call(Attribute(Name('string', Load(), lineno=1477, col_offset=17), 'split', Load(), lineno=1477, col_offset=17), [Subscript(Call(Name('_sys_version', Load(), lineno=1477, col_offset=30), [], [], None, None, lineno=1477, col_offset=30), Index(Num(1, lineno=1477, col_offset=45)), Load(), lineno=1477, col_offset=30), Str('.', lineno=1477, col_offset=49)], [], None, None, lineno=1477, col_offset=17)], [], None, None, lineno=1477, col_offset=11), lineno=1477, col_offset=4)], [], lineno=1468, col_offset=0), FunctionDef('python_branch', arguments([], None, None, []), [Expr(Str(' Returns a string identifying the Python implementation\n        branch.\n\n        For CPython this is the Subversion branch from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    ', lineno=1489, col_offset=-1), lineno=1489, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1491, col_offset=11), [], [], None, None, lineno=1491, col_offset=11), Index(Num(2, lineno=1491, col_offset=26)), Load(), lineno=1491, col_offset=11), lineno=1491, col_offset=4)], [], lineno=1479, col_offset=0), FunctionDef('python_revision', arguments([], None, None, []), [Expr(Str(' Returns a string identifying the Python implementation\n        revision.\n\n        For CPython this is the Subversion revision from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    ', lineno=1503, col_offset=-1), lineno=1503, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1504, col_offset=11), [], [], None, None, lineno=1504, col_offset=11), Index(Num(3, lineno=1504, col_offset=26)), Load(), lineno=1504, col_offset=11), lineno=1504, col_offset=4)], [], lineno=1493, col_offset=0), FunctionDef('python_build', arguments([], None, None, []), [Expr(Str(' Returns a tuple (buildno, builddate) stating the Python\n        build number and date as strings.\n\n    ', lineno=1511, col_offset=-1), lineno=1511, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1512, col_offset=11), [], [], None, None, lineno=1512, col_offset=11), Slice(Num(4, lineno=1512, col_offset=26), Num(6, lineno=1512, col_offset=28), None), Load(), lineno=1512, col_offset=11), lineno=1512, col_offset=4)], [], lineno=1506, col_offset=0), FunctionDef('python_compiler', arguments([], None, None, []), [Expr(Str(' Returns a string identifying the compiler used for compiling\n        Python.\n\n    ', lineno=1519, col_offset=-1), lineno=1519, col_offset=-1), Return(Subscript(Call(Name('_sys_version', Load(), lineno=1520, col_offset=11), [], [], None, None, lineno=1520, col_offset=11), Index(Num(6, lineno=1520, col_offset=26)), Load(), lineno=1520, col_offset=11), lineno=1520, col_offset=4)], [], lineno=1514, col_offset=0), Assign([Name('_platform_cache', Store(), lineno=1524, col_offset=0)], Dict([], [], lineno=1524, col_offset=18), lineno=1524, col_offset=0), FunctionDef('platform', arguments([Name('aliased', Param(), lineno=1526, col_offset=13), Name('terse', Param(), lineno=1526, col_offset=24)], None, None, [Num(0, lineno=1526, col_offset=21), Num(0, lineno=1526, col_offset=30)]), [Expr(Str(' Returns a single string identifying the underlying platform\n        with as much useful information as possible (but no more :).\n\n        The output is intended to be human readable rather than\n        machine parseable. It may look different on different\n        platforms and this is intended.\n\n        If "aliased" is true, the function will use aliases for\n        various platforms that report system names which differ from\n        their common names, e.g. SunOS will be reported as\n        Solaris. The system_alias() function is used to implement\n        this.\n\n        Setting terse to true causes the function to return only the\n        absolute minimum information needed to identify the platform.\n\n    ', lineno=1544, col_offset=-1), lineno=1544, col_offset=-1), Assign([Name('result', Store(), lineno=1545, col_offset=4)], Call(Attribute(Name('_platform_cache', Load(), lineno=1545, col_offset=13), 'get', Load(), lineno=1545, col_offset=13), [Tuple([Name('aliased', Load(), lineno=1545, col_offset=34), Name('terse', Load(), lineno=1545, col_offset=43)], Load(), lineno=1545, col_offset=34), Name('None', Load(), lineno=1545, col_offset=51)], [], None, None, lineno=1545, col_offset=13), lineno=1545, col_offset=4), If(Compare(Name('result', Load(), lineno=1546, col_offset=7), [IsNot()], [Name('None', Load(), lineno=1546, col_offset=21)], lineno=1546, col_offset=7), [Return(Name('result', Load(), lineno=1547, col_offset=15), lineno=1547, col_offset=8)], [], lineno=1546, col_offset=4), Assign([Tuple([Name('system', Store(), lineno=1551, col_offset=4), Name('node', Store(), lineno=1551, col_offset=11), Name('release', Store(), lineno=1551, col_offset=16), Name('version', Store(), lineno=1551, col_offset=24), Name('machine', Store(), lineno=1551, col_offset=32), Name('processor', Store(), lineno=1551, col_offset=40)], Store(), lineno=1551, col_offset=4)], Call(Name('uname', Load(), lineno=1551, col_offset=52), [], [], None, None, lineno=1551, col_offset=52), lineno=1551, col_offset=4), If(Compare(Name('machine', Load(), lineno=1552, col_offset=7), [Eq()], [Name('processor', Load(), lineno=1552, col_offset=18)], lineno=1552, col_offset=7), [Assign([Name('processor', Store(), lineno=1553, col_offset=8)], Str('', lineno=1553, col_offset=20), lineno=1553, col_offset=8)], [], lineno=1552, col_offset=4), If(Name('aliased', Load(), lineno=1554, col_offset=7), [Assign([Tuple([Name('system', Store(), lineno=1555, col_offset=8), Name('release', Store(), lineno=1555, col_offset=15), Name('version', Store(), lineno=1555, col_offset=23)], Store(), lineno=1555, col_offset=8)], Call(Name('system_alias', Load(), lineno=1555, col_offset=33), [Name('system', Load(), lineno=1555, col_offset=46), Name('release', Load(), lineno=1555, col_offset=53), Name('version', Load(), lineno=1555, col_offset=61)], [], None, None, lineno=1555, col_offset=33), lineno=1555, col_offset=8)], [], lineno=1554, col_offset=4), If(Compare(Name('system', Load(), lineno=1557, col_offset=7), [Eq()], [Str('Windows', lineno=1557, col_offset=17)], lineno=1557, col_offset=7), [Assign([Tuple([Name('rel', Store(), lineno=1559, col_offset=8), Name('vers', Store(), lineno=1559, col_offset=12), Name('csd', Store(), lineno=1559, col_offset=17), Name('ptype', Store(), lineno=1559, col_offset=21)], Store(), lineno=1559, col_offset=8)], Call(Name('win32_ver', Load(), lineno=1559, col_offset=29), [Name('version', Load(), lineno=1559, col_offset=39)], [], None, None, lineno=1559, col_offset=29), lineno=1559, col_offset=8), If(Name('terse', Load(), lineno=1560, col_offset=11), [Assign([Name('platform', Store(), lineno=1561, col_offset=12)], Call(Name('_platform', Load(), lineno=1561, col_offset=23), [Name('system', Load(), lineno=1561, col_offset=33), Name('release', Load(), lineno=1561, col_offset=40)], [], None, None, lineno=1561, col_offset=23), lineno=1561, col_offset=12)], [Assign([Name('platform', Store(), lineno=1563, col_offset=12)], Call(Name('_platform', Load(), lineno=1563, col_offset=23), [Name('system', Load(), lineno=1563, col_offset=33), Name('release', Load(), lineno=1563, col_offset=40), Name('version', Load(), lineno=1563, col_offset=48), Name('csd', Load(), lineno=1563, col_offset=56)], [], None, None, lineno=1563, col_offset=23), lineno=1563, col_offset=12)], lineno=1560, col_offset=8)], [If(Compare(Name('system', Load(), lineno=1565, col_offset=9), [In()], [Tuple([Str('Linux', lineno=1565, col_offset=20)], Load(), lineno=1565, col_offset=20)], lineno=1565, col_offset=9), [Assign([Tuple([Name('distname', Store(), lineno=1567, col_offset=8), Name('distversion', Store(), lineno=1567, col_offset=17), Name('distid', Store(), lineno=1567, col_offset=29)], Store(), lineno=1567, col_offset=8)], Call(Name('dist', Load(), lineno=1567, col_offset=38), [Str('', lineno=1567, col_offset=43)], [], None, None, lineno=1567, col_offset=38), lineno=1567, col_offset=8), If(BoolOp(And(), [Name('distname', Load(), lineno=1568, col_offset=11), UnaryOp(Not(), Name('terse', Load(), lineno=1568, col_offset=28), lineno=1568, col_offset=24)], lineno=1568, col_offset=11), [Assign([Name('platform', Store(), lineno=1569, col_offset=12)], Call(Name('_platform', Load(), lineno=1569, col_offset=23), [Name('system', Load(), lineno=1569, col_offset=33), Name('release', Load(), lineno=1569, col_offset=40), Name('machine', Load(), lineno=1569, col_offset=48), Name('processor', Load(), lineno=1569, col_offset=56), Str('with', lineno=1570, col_offset=33), Name('distname', Load(), lineno=1571, col_offset=33), Name('distversion', Load(), lineno=1571, col_offset=42), Name('distid', Load(), lineno=1571, col_offset=54)], [], None, None, lineno=1569, col_offset=23), lineno=1569, col_offset=12)], [Assign([Tuple([Name('libcname', Store(), lineno=1574, col_offset=12), Name('libcversion', Store(), lineno=1574, col_offset=21)], Store(), lineno=1574, col_offset=12)], Call(Name('libc_ver', Load(), lineno=1574, col_offset=35), [Attribute(Name('sys', Load(), lineno=1574, col_offset=44), 'executable', Load(), lineno=1574, col_offset=44)], [], None, None, lineno=1574, col_offset=35), lineno=1574, col_offset=12), Assign([Name('platform', Store(), lineno=1575, col_offset=12)], Call(Name('_platform', Load(), lineno=1575, col_offset=23), [Name('system', Load(), lineno=1575, col_offset=33), Name('release', Load(), lineno=1575, col_offset=40), Name('machine', Load(), lineno=1575, col_offset=48), Name('processor', Load(), lineno=1575, col_offset=56), Str('with', lineno=1576, col_offset=33), BinOp(Name('libcname', Load(), lineno=1577, col_offset=33), Add(), Name('libcversion', Load(), lineno=1577, col_offset=42), lineno=1577, col_offset=33)], [], None, None, lineno=1575, col_offset=23), lineno=1575, col_offset=12)], lineno=1568, col_offset=8)], [If(Compare(Name('system', Load(), lineno=1578, col_offset=9), [Eq()], [Str('Java', lineno=1578, col_offset=19)], lineno=1578, col_offset=9), [Assign([Tuple([Name('r', Store(), lineno=1580, col_offset=8), Name('v', Store(), lineno=1580, col_offset=10), Name('vminfo', Store(), lineno=1580, col_offset=12), Tuple([Name('os_name', Store(), lineno=1580, col_offset=20), Name('os_version', Store(), lineno=1580, col_offset=28), Name('os_arch', Store(), lineno=1580, col_offset=39)], Store(), lineno=1580, col_offset=20)], Store(), lineno=1580, col_offset=8)], Call(Name('java_ver', Load(), lineno=1580, col_offset=50), [], [], None, None, lineno=1580, col_offset=50), lineno=1580, col_offset=8), If(BoolOp(Or(), [Name('terse', Load(), lineno=1581, col_offset=11), UnaryOp(Not(), Name('os_name', Load(), lineno=1581, col_offset=24), lineno=1581, col_offset=20)], lineno=1581, col_offset=11), [Assign([Name('platform', Store(), lineno=1582, col_offset=12)], Call(Name('_platform', Load(), lineno=1582, col_offset=23), [Name('system', Load(), lineno=1582, col_offset=33), Name('release', Load(), lineno=1582, col_offset=40), Name('version', Load(), lineno=1582, col_offset=48)], [], None, None, lineno=1582, col_offset=23), lineno=1582, col_offset=12)], [Assign([Name('platform', Store(), lineno=1584, col_offset=12)], Call(Name('_platform', Load(), lineno=1584, col_offset=23), [Name('system', Load(), lineno=1584, col_offset=33), Name('release', Load(), lineno=1584, col_offset=40), Name('version', Load(), lineno=1584, col_offset=48), Str('on', lineno=1585, col_offset=33), Name('os_name', Load(), lineno=1586, col_offset=33), Name('os_version', Load(), lineno=1586, col_offset=41), Name('os_arch', Load(), lineno=1586, col_offset=52)], [], None, None, lineno=1584, col_offset=23), lineno=1584, col_offset=12)], lineno=1581, col_offset=8)], [If(Compare(Name('system', Load(), lineno=1588, col_offset=9), [Eq()], [Str('MacOS', lineno=1588, col_offset=19)], lineno=1588, col_offset=9), [If(Name('terse', Load(), lineno=1590, col_offset=11), [Assign([Name('platform', Store(), lineno=1591, col_offset=12)], Call(Name('_platform', Load(), lineno=1591, col_offset=23), [Name('system', Load(), lineno=1591, col_offset=33), Name('release', Load(), lineno=1591, col_offset=40)], [], None, None, lineno=1591, col_offset=23), lineno=1591, col_offset=12)], [Assign([Name('platform', Store(), lineno=1593, col_offset=12)], Call(Name('_platform', Load(), lineno=1593, col_offset=23), [Name('system', Load(), lineno=1593, col_offset=33), Name('release', Load(), lineno=1593, col_offset=40), Name('machine', Load(), lineno=1593, col_offset=48)], [], None, None, lineno=1593, col_offset=23), lineno=1593, col_offset=12)], lineno=1590, col_offset=8)], [If(Name('terse', Load(), lineno=1597, col_offset=11), [Assign([Name('platform', Store(), lineno=1598, col_offset=12)], Call(Name('_platform', Load(), lineno=1598, col_offset=23), [Name('system', Load(), lineno=1598, col_offset=33), Name('release', Load(), lineno=1598, col_offset=40)], [], None, None, lineno=1598, col_offset=23), lineno=1598, col_offset=12)], [Assign([Tuple([Name('bits', Store(), lineno=1600, col_offset=12), Name('linkage', Store(), lineno=1600, col_offset=17)], Store(), lineno=1600, col_offset=12)], Call(Name('architecture', Load(), lineno=1600, col_offset=27), [Attribute(Name('sys', Load(), lineno=1600, col_offset=40), 'executable', Load(), lineno=1600, col_offset=40)], [], None, None, lineno=1600, col_offset=27), lineno=1600, col_offset=12), Assign([Name('platform', Store(), lineno=1601, col_offset=12)], Call(Name('_platform', Load(), lineno=1601, col_offset=23), [Name('system', Load(), lineno=1601, col_offset=33), Name('release', Load(), lineno=1601, col_offset=40), Name('machine', Load(), lineno=1601, col_offset=48), Name('processor', Load(), lineno=1601, col_offset=56), Name('bits', Load(), lineno=1601, col_offset=66), Name('linkage', Load(), lineno=1601, col_offset=71)], [], None, None, lineno=1601, col_offset=23), lineno=1601, col_offset=12)], lineno=1597, col_offset=8)], lineno=1588, col_offset=9)], lineno=1578, col_offset=9)], lineno=1565, col_offset=9)], lineno=1557, col_offset=4), Assign([Subscript(Name('_platform_cache', Load(), lineno=1603, col_offset=4), Index(Tuple([Name('aliased', Load(), lineno=1603, col_offset=21), Name('terse', Load(), lineno=1603, col_offset=30)], Load(), lineno=1603, col_offset=21)), Store(), lineno=1603, col_offset=4)], Name('platform', Load(), lineno=1603, col_offset=40), lineno=1603, col_offset=4), Return(Name('platform', Load(), lineno=1604, col_offset=11), lineno=1604, col_offset=4)], [], lineno=1526, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1608, col_offset=3), [Eq()], [Str('__main__', lineno=1608, col_offset=15)], lineno=1608, col_offset=3), [Assign([Name('terse', Store(), lineno=1610, col_offset=4)], BoolOp(Or(), [Compare(Str('terse', lineno=1610, col_offset=13), [In()], [Attribute(Name('sys', Load(), lineno=1610, col_offset=24), 'argv', Load(), lineno=1610, col_offset=24)], lineno=1610, col_offset=13), Compare(Str('--terse', lineno=1610, col_offset=36), [In()], [Attribute(Name('sys', Load(), lineno=1610, col_offset=49), 'argv', Load(), lineno=1610, col_offset=49)], lineno=1610, col_offset=36)], lineno=1610, col_offset=13), lineno=1610, col_offset=4), Assign([Name('aliased', Store(), lineno=1611, col_offset=4)], BoolOp(And(), [UnaryOp(Not(), Compare(Str('nonaliased', lineno=1611, col_offset=19), [In()], [Attribute(Name('sys', Load(), lineno=1611, col_offset=35), 'argv', Load(), lineno=1611, col_offset=35)], lineno=1611, col_offset=19), lineno=1611, col_offset=15), UnaryOp(Not(), Compare(Str('--nonaliased', lineno=1611, col_offset=52), [In()], [Attribute(Name('sys', Load(), lineno=1611, col_offset=70), 'argv', Load(), lineno=1611, col_offset=70)], lineno=1611, col_offset=52), lineno=1611, col_offset=48)], lineno=1611, col_offset=15), lineno=1611, col_offset=4), Print(None, [Call(Name('platform', Load(), lineno=1612, col_offset=10), [Name('aliased', Load(), lineno=1612, col_offset=19), Name('terse', Load(), lineno=1612, col_offset=27)], [], None, None, lineno=1612, col_offset=10)], True, lineno=1612, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=1613, col_offset=4), 'exit', Load(), lineno=1613, col_offset=4), [Num(0, lineno=1613, col_offset=13)], [], None, None, lineno=1613, col_offset=4), lineno=1613, col_offset=4)], [], lineno=1608, col_offset=0)])
