Module([Expr(Str("(Ostensibly) fix copyright notices in files.\n\nActually, this sript will simply replace a block of text in a file from one\nstring to another.  It will only do this once though, i.e. not globally\nthroughout the file.  It writes a backup file and then does an os.rename()\ndance for atomicity.\n\nUsage: fixnotices.py [options] [filenames]\nOptions:\n    -h / --help\n        Print this message and exit\n\n    --oldnotice=file\n        Use the notice in the file as the old (to be replaced) string, instead\n        of the hard coded value in the script.\n\n    --newnotice=file\n        Use the notice in the file as the new (replacement) string, instead of\n        the hard coded value in the script.\n\n    --dry-run\n        Don't actually make the changes, but print out the list of files that\n        would change.  When used with -v, a status will be printed for every\n        file.\n\n    -v / --verbose\n        Print a message for every file looked at, indicating whether the file\n        is changed or not.\n", lineno=31, col_offset=-1), lineno=31, col_offset=-1), Assign([Name('OLD_NOTICE', Store(), lineno=33, col_offset=0)], Str('/***********************************************************\nCopyright (c) 2000, BeOpen.com.\nCopyright (c) 1995-2000, Corporation for National Research Initiatives.\nCopyright (c) 1990-1995, Stichting Mathematisch Centrum.\nAll rights reserved.\n\nSee the file "Misc/COPYRIGHT" for information on usage and\nredistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.\n******************************************************************/\n', lineno=42, col_offset=-1), lineno=33, col_offset=0), Import([alias('os', None)], lineno=43, col_offset=0), Import([alias('sys', None)], lineno=44, col_offset=0), Import([alias('getopt', None)], lineno=45, col_offset=0), Assign([Name('NEW_NOTICE', Store(), lineno=47, col_offset=0)], Str('', lineno=47, col_offset=13), lineno=47, col_offset=0), Assign([Name('DRYRUN', Store(), lineno=48, col_offset=0)], Num(0, lineno=48, col_offset=9), lineno=48, col_offset=0), Assign([Name('VERBOSE', Store(), lineno=49, col_offset=0)], Num(0, lineno=49, col_offset=10), lineno=49, col_offset=0), FunctionDef('usage', arguments([Name('code', Param(), lineno=52, col_offset=10), Name('msg', Param(), lineno=52, col_offset=16)], None, None, [Str('', lineno=52, col_offset=20)]), [Print(None, [BinOp(Name('__doc__', Load(), lineno=53, col_offset=10), Mod(), Call(Name('globals', Load(), lineno=53, col_offset=20), [], [], None, None, lineno=53, col_offset=20), lineno=53, col_offset=10)], True, lineno=53, col_offset=4), If(Name('msg', Load(), lineno=54, col_offset=7), [Print(None, [Name('msg', Load(), lineno=55, col_offset=14)], True, lineno=55, col_offset=8)], [], lineno=54, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=56, col_offset=4), 'exit', Load(), lineno=56, col_offset=4), [Name('code', Load(), lineno=56, col_offset=13)], [], None, None, lineno=56, col_offset=4), lineno=56, col_offset=4)], [], lineno=52, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Global(['DRYRUN', 'OLD_NOTICE', 'NEW_NOTICE', 'VERBOSE'], lineno=60, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=62, col_offset=8), Name('args', Store(), lineno=62, col_offset=14)], Store(), lineno=62, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=62, col_offset=21), 'getopt', Load(), lineno=62, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=62, col_offset=35), 'argv', Load(), lineno=62, col_offset=35), Slice(Num(1, lineno=62, col_offset=44), None, None), Load(), lineno=62, col_offset=35), Str('hv', lineno=62, col_offset=49), List([Str('help', lineno=63, col_offset=36), Str('oldnotice=', lineno=63, col_offset=44), Str('newnotice=', lineno=63, col_offset=58), Str('dry-run', lineno=64, col_offset=36), Str('verbose', lineno=64, col_offset=47)], Load(), lineno=63, col_offset=35)], [], None, None, lineno=62, col_offset=21), lineno=62, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=65, col_offset=11), 'error', Load(), lineno=65, col_offset=11), Name('msg', Store(), lineno=65, col_offset=25), [Expr(Call(Name('usage', Load(), lineno=66, col_offset=8), [Num(1, lineno=66, col_offset=14), Name('msg', Load(), lineno=66, col_offset=17)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8)], lineno=65, col_offset=4)], [], lineno=61, col_offset=4), For(Tuple([Name('opt', Store(), lineno=68, col_offset=8), Name('arg', Store(), lineno=68, col_offset=13)], Store(), lineno=68, col_offset=8), Name('opts', Load(), lineno=68, col_offset=20), [If(Compare(Name('opt', Load(), lineno=69, col_offset=11), [In()], [Tuple([Str('-h', lineno=69, col_offset=19), Str('--help', lineno=69, col_offset=25)], Load(), lineno=69, col_offset=19)], lineno=69, col_offset=11), [Expr(Call(Name('usage', Load(), lineno=70, col_offset=12), [Num(0, lineno=70, col_offset=18)], [], None, None, lineno=70, col_offset=12), lineno=70, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=71, col_offset=13), [In()], [Tuple([Str('-v', lineno=71, col_offset=21), Str('--verbose', lineno=71, col_offset=27)], Load(), lineno=71, col_offset=21)], lineno=71, col_offset=13), [Assign([Name('VERBOSE', Store(), lineno=72, col_offset=12)], Num(1, lineno=72, col_offset=22), lineno=72, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=73, col_offset=13), [Eq()], [Str('--dry-run', lineno=73, col_offset=20)], lineno=73, col_offset=13), [Assign([Name('DRYRUN', Store(), lineno=74, col_offset=12)], Num(1, lineno=74, col_offset=21), lineno=74, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=75, col_offset=13), [Eq()], [Str('--oldnotice', lineno=75, col_offset=20)], lineno=75, col_offset=13), [Assign([Name('fp', Store(), lineno=76, col_offset=12)], Call(Name('open', Load(), lineno=76, col_offset=17), [Name('arg', Load(), lineno=76, col_offset=22)], [], None, None, lineno=76, col_offset=17), lineno=76, col_offset=12), Assign([Name('OLD_NOTICE', Store(), lineno=77, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=77, col_offset=25), 'read', Load(), lineno=77, col_offset=25), [], [], None, None, lineno=77, col_offset=25), lineno=77, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=78, col_offset=12), 'close', Load(), lineno=78, col_offset=12), [], [], None, None, lineno=78, col_offset=12), lineno=78, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=79, col_offset=13), [Eq()], [Str('--newnotice', lineno=79, col_offset=20)], lineno=79, col_offset=13), [Assign([Name('fp', Store(), lineno=80, col_offset=12)], Call(Name('open', Load(), lineno=80, col_offset=17), [Name('arg', Load(), lineno=80, col_offset=22)], [], None, None, lineno=80, col_offset=17), lineno=80, col_offset=12), Assign([Name('NEW_NOTICE', Store(), lineno=81, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=81, col_offset=25), 'read', Load(), lineno=81, col_offset=25), [], [], None, None, lineno=81, col_offset=25), lineno=81, col_offset=12), Expr(Call(Attribute(Name('fp', Load(), lineno=82, col_offset=12), 'close', Load(), lineno=82, col_offset=12), [], [], None, None, lineno=82, col_offset=12), lineno=82, col_offset=12)], [], lineno=79, col_offset=13)], lineno=75, col_offset=13)], lineno=73, col_offset=13)], lineno=71, col_offset=13)], lineno=69, col_offset=8)], [], lineno=68, col_offset=4), For(Name('arg', Store(), lineno=84, col_offset=8), Name('args', Load(), lineno=84, col_offset=15), [Expr(Call(Name('process', Load(), lineno=85, col_offset=8), [Name('arg', Load(), lineno=85, col_offset=16)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8)], [], lineno=84, col_offset=4)], [], lineno=59, col_offset=0), FunctionDef('process', arguments([Name('file', Param(), lineno=88, col_offset=12)], None, None, []), [Assign([Name('f', Store(), lineno=89, col_offset=4)], Call(Name('open', Load(), lineno=89, col_offset=8), [Name('file', Load(), lineno=89, col_offset=13)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=4), Assign([Name('data', Store(), lineno=90, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=90, col_offset=11), 'read', Load(), lineno=90, col_offset=11), [], [], None, None, lineno=90, col_offset=11), lineno=90, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=91, col_offset=4), 'close', Load(), lineno=91, col_offset=4), [], [], None, None, lineno=91, col_offset=4), lineno=91, col_offset=4), Assign([Name('i', Store(), lineno=92, col_offset=4)], Call(Attribute(Name('data', Load(), lineno=92, col_offset=8), 'find', Load(), lineno=92, col_offset=8), [Name('OLD_NOTICE', Load(), lineno=92, col_offset=18)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=4), If(Compare(Name('i', Load(), lineno=93, col_offset=7), [Lt()], [Num(0, lineno=93, col_offset=11)], lineno=93, col_offset=7), [If(Name('VERBOSE', Load(), lineno=94, col_offset=11), [Print(None, [Str('no change:', lineno=95, col_offset=18), Name('file', Load(), lineno=95, col_offset=32)], True, lineno=95, col_offset=12)], [], lineno=94, col_offset=8), Return(None, lineno=96, col_offset=8)], [If(BoolOp(Or(), [Name('DRYRUN', Load(), lineno=97, col_offset=9), Name('VERBOSE', Load(), lineno=97, col_offset=19)], lineno=97, col_offset=9), [Print(None, [Str('   change:', lineno=98, col_offset=14), Name('file', Load(), lineno=98, col_offset=28)], True, lineno=98, col_offset=8)], [], lineno=97, col_offset=9)], lineno=93, col_offset=4), If(Name('DRYRUN', Load(), lineno=99, col_offset=7), [Return(None, lineno=101, col_offset=8)], [], lineno=99, col_offset=4), Assign([Name('data', Store(), lineno=102, col_offset=4)], BinOp(BinOp(Subscript(Name('data', Load(), lineno=102, col_offset=11), Slice(None, Name('i', Load(), lineno=102, col_offset=17), None), Load(), lineno=102, col_offset=11), Add(), Name('NEW_NOTICE', Load(), lineno=102, col_offset=22), lineno=102, col_offset=11), Add(), Subscript(Name('data', Load(), lineno=102, col_offset=35), Slice(BinOp(Name('i', Load(), lineno=102, col_offset=40), Add(), Call(Name('len', Load(), lineno=102, col_offset=42), [Name('OLD_NOTICE', Load(), lineno=102, col_offset=46)], [], None, None, lineno=102, col_offset=42), lineno=102, col_offset=40), None, None), Load(), lineno=102, col_offset=35), lineno=102, col_offset=33), lineno=102, col_offset=4), Assign([Name('new', Store(), lineno=103, col_offset=4)], BinOp(Name('file', Load(), lineno=103, col_offset=10), Add(), Str('.new', lineno=103, col_offset=17), lineno=103, col_offset=10), lineno=103, col_offset=4), Assign([Name('backup', Store(), lineno=104, col_offset=4)], BinOp(Name('file', Load(), lineno=104, col_offset=13), Add(), Str('.bak', lineno=104, col_offset=20), lineno=104, col_offset=13), lineno=104, col_offset=4), Assign([Name('f', Store(), lineno=105, col_offset=4)], Call(Name('open', Load(), lineno=105, col_offset=8), [Name('new', Load(), lineno=105, col_offset=13), Str('w', lineno=105, col_offset=18)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=106, col_offset=4), 'write', Load(), lineno=106, col_offset=4), [Name('data', Load(), lineno=106, col_offset=12)], [], None, None, lineno=106, col_offset=4), lineno=106, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=107, col_offset=4), 'close', Load(), lineno=107, col_offset=4), [], [], None, None, lineno=107, col_offset=4), lineno=107, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=108, col_offset=4), 'rename', Load(), lineno=108, col_offset=4), [Name('file', Load(), lineno=108, col_offset=14), Name('backup', Load(), lineno=108, col_offset=20)], [], None, None, lineno=108, col_offset=4), lineno=108, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=109, col_offset=4), 'rename', Load(), lineno=109, col_offset=4), [Name('new', Load(), lineno=109, col_offset=14), Name('file', Load(), lineno=109, col_offset=19)], [], None, None, lineno=109, col_offset=4), lineno=109, col_offset=4)], [], lineno=88, col_offset=0), If(Compare(Name('__name__', Load(), lineno=112, col_offset=3), [Eq()], [Str('__main__', lineno=112, col_offset=15)], lineno=112, col_offset=3), [Expr(Call(Name('main', Load(), lineno=113, col_offset=4), [], [], None, None, lineno=113, col_offset=4), lineno=113, col_offset=4)], [], lineno=112, col_offset=0)])
