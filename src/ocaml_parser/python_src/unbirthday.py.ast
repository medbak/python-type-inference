Module([Import([alias('sys', None)], lineno=8, col_offset=0), Import([alias('time', None)], lineno=9, col_offset=0), Import([alias('calendar', None)], lineno=10, col_offset=0), FunctionDef('main', arguments([], None, None, []), [If(Subscript(Attribute(Name('sys', Load(), lineno=13, col_offset=7), 'argv', Load(), lineno=13, col_offset=7), Slice(Num(1, lineno=13, col_offset=16), None, None), Load(), lineno=13, col_offset=7), [Assign([Name('year', Store(), lineno=14, col_offset=8)], Call(Name('int', Load(), lineno=14, col_offset=15), [Subscript(Attribute(Name('sys', Load(), lineno=14, col_offset=19), 'argv', Load(), lineno=14, col_offset=19), Index(Num(1, lineno=14, col_offset=28)), Load(), lineno=14, col_offset=19)], [], None, None, lineno=14, col_offset=15), lineno=14, col_offset=8)], [Assign([Name('year', Store(), lineno=16, col_offset=8)], Call(Name('int', Load(), lineno=16, col_offset=15), [Call(Name('raw_input', Load(), lineno=16, col_offset=19), [Str('In which year were you born? ', lineno=16, col_offset=29)], [], None, None, lineno=16, col_offset=19)], [], None, None, lineno=16, col_offset=15), lineno=16, col_offset=8)], lineno=13, col_offset=4), If(Compare(Num(0, lineno=17, col_offset=7), [LtE(), Lt()], [Name('year', Load(), lineno=17, col_offset=12), Num(100, lineno=17, col_offset=19)], lineno=17, col_offset=7), [Print(None, [Str("I'll assume that by", lineno=18, col_offset=14), Name('year', Load(), lineno=18, col_offset=37)], False, lineno=18, col_offset=8), Assign([Name('year', Store(), lineno=19, col_offset=8)], BinOp(Name('year', Load(), lineno=19, col_offset=15), Add(), Num(1900, lineno=19, col_offset=22), lineno=19, col_offset=15), lineno=19, col_offset=8), Print(None, [Str('you mean', lineno=20, col_offset=14), Name('year', Load(), lineno=20, col_offset=26), Str('and not the early Christian era', lineno=20, col_offset=32)], True, lineno=20, col_offset=8)], [If(UnaryOp(Not(), Compare(Num(1850, lineno=21, col_offset=14), [LtE(), LtE()], [Name('year', Load(), lineno=21, col_offset=22), Subscript(Call(Attribute(Name('time', Load(), lineno=21, col_offset=30), 'localtime', Load(), lineno=21, col_offset=30), [], [], None, None, lineno=21, col_offset=30), Index(Num(0, lineno=21, col_offset=47)), Load(), lineno=21, col_offset=30)], lineno=21, col_offset=14), lineno=21, col_offset=9), [Print(None, [Str("It's hard to believe you were born in", lineno=22, col_offset=14), Name('year', Load(), lineno=22, col_offset=55)], True, lineno=22, col_offset=8), Return(None, lineno=23, col_offset=8)], [], lineno=21, col_offset=9)], lineno=17, col_offset=4), If(Subscript(Attribute(Name('sys', Load(), lineno=25, col_offset=7), 'argv', Load(), lineno=25, col_offset=7), Slice(Num(2, lineno=25, col_offset=16), None, None), Load(), lineno=25, col_offset=7), [Assign([Name('month', Store(), lineno=26, col_offset=8)], Call(Name('int', Load(), lineno=26, col_offset=16), [Subscript(Attribute(Name('sys', Load(), lineno=26, col_offset=20), 'argv', Load(), lineno=26, col_offset=20), Index(Num(2, lineno=26, col_offset=29)), Load(), lineno=26, col_offset=20)], [], None, None, lineno=26, col_offset=16), lineno=26, col_offset=8)], [Assign([Name('month', Store(), lineno=28, col_offset=8)], Call(Name('int', Load(), lineno=28, col_offset=16), [Call(Name('raw_input', Load(), lineno=28, col_offset=20), [Str('And in which month? (1-12) ', lineno=28, col_offset=30)], [], None, None, lineno=28, col_offset=20)], [], None, None, lineno=28, col_offset=16), lineno=28, col_offset=8)], lineno=25, col_offset=4), If(UnaryOp(Not(), Compare(Num(1, lineno=29, col_offset=12), [LtE(), LtE()], [Name('month', Load(), lineno=29, col_offset=17), Num(12, lineno=29, col_offset=26)], lineno=29, col_offset=12), lineno=29, col_offset=7), [Print(None, [Str('There is no month numbered', lineno=30, col_offset=14), Name('month', Load(), lineno=30, col_offset=44)], True, lineno=30, col_offset=8), Return(None, lineno=31, col_offset=8)], [], lineno=29, col_offset=4), If(Subscript(Attribute(Name('sys', Load(), lineno=33, col_offset=7), 'argv', Load(), lineno=33, col_offset=7), Slice(Num(3, lineno=33, col_offset=16), None, None), Load(), lineno=33, col_offset=7), [Assign([Name('day', Store(), lineno=34, col_offset=8)], Call(Name('int', Load(), lineno=34, col_offset=14), [Subscript(Attribute(Name('sys', Load(), lineno=34, col_offset=18), 'argv', Load(), lineno=34, col_offset=18), Index(Num(3, lineno=34, col_offset=27)), Load(), lineno=34, col_offset=18)], [], None, None, lineno=34, col_offset=14), lineno=34, col_offset=8)], [Assign([Name('day', Store(), lineno=36, col_offset=8)], Call(Name('int', Load(), lineno=36, col_offset=14), [Call(Name('raw_input', Load(), lineno=36, col_offset=18), [Str('And on what day of that month? (1-31) ', lineno=36, col_offset=28)], [], None, None, lineno=36, col_offset=18)], [], None, None, lineno=36, col_offset=14), lineno=36, col_offset=8)], lineno=33, col_offset=4), If(BoolOp(And(), [Compare(Name('month', Load(), lineno=37, col_offset=7), [Eq()], [Num(2, lineno=37, col_offset=16)], lineno=37, col_offset=7), Call(Attribute(Name('calendar', Load(), lineno=37, col_offset=22), 'isleap', Load(), lineno=37, col_offset=22), [Name('year', Load(), lineno=37, col_offset=38)], [], None, None, lineno=37, col_offset=22)], lineno=37, col_offset=7), [Assign([Name('maxday', Store(), lineno=38, col_offset=8)], Num(29, lineno=38, col_offset=17), lineno=38, col_offset=8)], [Assign([Name('maxday', Store(), lineno=40, col_offset=8)], Subscript(Attribute(Name('calendar', Load(), lineno=40, col_offset=17), 'mdays', Load(), lineno=40, col_offset=17), Index(Name('month', Load(), lineno=40, col_offset=32)), Load(), lineno=40, col_offset=17), lineno=40, col_offset=8)], lineno=37, col_offset=4), If(UnaryOp(Not(), Compare(Num(1, lineno=41, col_offset=12), [LtE(), LtE()], [Name('day', Load(), lineno=41, col_offset=17), Name('maxday', Load(), lineno=41, col_offset=24)], lineno=41, col_offset=12), lineno=41, col_offset=7), [Print(None, [Str('There are no', lineno=42, col_offset=14), Name('day', Load(), lineno=42, col_offset=30), Str('days in that month!', lineno=42, col_offset=35)], True, lineno=42, col_offset=8), Return(None, lineno=43, col_offset=8)], [], lineno=41, col_offset=4), Assign([Name('bdaytuple', Store(), lineno=45, col_offset=4)], Tuple([Name('year', Load(), lineno=45, col_offset=17), Name('month', Load(), lineno=45, col_offset=23), Name('day', Load(), lineno=45, col_offset=30)], Load(), lineno=45, col_offset=17), lineno=45, col_offset=4), Assign([Name('bdaydate', Store(), lineno=46, col_offset=4)], Call(Name('mkdate', Load(), lineno=46, col_offset=15), [Name('bdaytuple', Load(), lineno=46, col_offset=22)], [], None, None, lineno=46, col_offset=15), lineno=46, col_offset=4), Print(None, [Str('You were born on', lineno=47, col_offset=10), Call(Name('format', Load(), lineno=47, col_offset=30), [Name('bdaytuple', Load(), lineno=47, col_offset=37)], [], None, None, lineno=47, col_offset=30)], True, lineno=47, col_offset=4), Assign([Name('todaytuple', Store(), lineno=49, col_offset=4)], Subscript(Call(Attribute(Name('time', Load(), lineno=49, col_offset=17), 'localtime', Load(), lineno=49, col_offset=17), [], [], None, None, lineno=49, col_offset=17), Slice(None, Num(3, lineno=49, col_offset=35), None), Load(), lineno=49, col_offset=17), lineno=49, col_offset=4), Assign([Name('todaydate', Store(), lineno=50, col_offset=4)], Call(Name('mkdate', Load(), lineno=50, col_offset=16), [Name('todaytuple', Load(), lineno=50, col_offset=23)], [], None, None, lineno=50, col_offset=16), lineno=50, col_offset=4), Print(None, [Str('Today is', lineno=51, col_offset=10), Call(Name('format', Load(), lineno=51, col_offset=22), [Name('todaytuple', Load(), lineno=51, col_offset=29)], [], None, None, lineno=51, col_offset=22)], True, lineno=51, col_offset=4), If(Compare(Name('bdaytuple', Load(), lineno=53, col_offset=7), [Gt()], [Name('todaytuple', Load(), lineno=53, col_offset=19)], lineno=53, col_offset=7), [Print(None, [Str('You are a time traveler.  Go back to the future!', lineno=54, col_offset=14)], True, lineno=54, col_offset=8), Return(None, lineno=55, col_offset=8)], [], lineno=53, col_offset=4), If(Compare(Name('bdaytuple', Load(), lineno=57, col_offset=7), [Eq()], [Name('todaytuple', Load(), lineno=57, col_offset=20)], lineno=57, col_offset=7), [Print(None, [Str('You were born today.  Have a nice life!', lineno=58, col_offset=14)], True, lineno=58, col_offset=8), Return(None, lineno=59, col_offset=8)], [], lineno=57, col_offset=4), Assign([Name('days', Store(), lineno=61, col_offset=4)], BinOp(Name('todaydate', Load(), lineno=61, col_offset=11), Sub(), Name('bdaydate', Load(), lineno=61, col_offset=23), lineno=61, col_offset=11), lineno=61, col_offset=4), Print(None, [Str('You have lived', lineno=62, col_offset=10), Name('days', Load(), lineno=62, col_offset=28), Str('days', lineno=62, col_offset=34)], True, lineno=62, col_offset=4), Assign([Name('age', Store(), lineno=64, col_offset=4)], Num(0, lineno=64, col_offset=10), lineno=64, col_offset=4), For(Name('y', Store(), lineno=65, col_offset=8), Call(Name('range', Load(), lineno=65, col_offset=13), [Name('year', Load(), lineno=65, col_offset=19), BinOp(Subscript(Name('todaytuple', Load(), lineno=65, col_offset=25), Index(Num(0, lineno=65, col_offset=36)), Load(), lineno=65, col_offset=25), Add(), Num(1, lineno=65, col_offset=41), lineno=65, col_offset=25)], [], None, None, lineno=65, col_offset=13), [If(Compare(Name('bdaytuple', Load(), lineno=66, col_offset=11), [Lt(), LtE()], [Tuple([Name('y', Load(), lineno=66, col_offset=24), Name('month', Load(), lineno=66, col_offset=27), Name('day', Load(), lineno=66, col_offset=34)], Load(), lineno=66, col_offset=24), Name('todaytuple', Load(), lineno=66, col_offset=42)], lineno=66, col_offset=11), [Assign([Name('age', Store(), lineno=67, col_offset=12)], BinOp(Name('age', Load(), lineno=67, col_offset=18), Add(), Num(1, lineno=67, col_offset=24), lineno=67, col_offset=18), lineno=67, col_offset=12)], [], lineno=66, col_offset=8)], [], lineno=65, col_offset=4), Print(None, [Str('You are', lineno=69, col_offset=10), Name('age', Load(), lineno=69, col_offset=21), Str('years old', lineno=69, col_offset=26)], True, lineno=69, col_offset=4), If(Compare(Subscript(Name('todaytuple', Load(), lineno=71, col_offset=7), Slice(Num(1, lineno=71, col_offset=18), None, None), Load(), lineno=71, col_offset=7), [Eq()], [Subscript(Name('bdaytuple', Load(), lineno=71, col_offset=25), Slice(Num(1, lineno=71, col_offset=35), None, None), Load(), lineno=71, col_offset=25)], lineno=71, col_offset=7), [Print(None, [Str('Congratulations!  Today is your', lineno=72, col_offset=14), Call(Name('nth', Load(), lineno=72, col_offset=49), [Name('age', Load(), lineno=72, col_offset=53)], [], None, None, lineno=72, col_offset=49), Str('birthday', lineno=72, col_offset=59)], True, lineno=72, col_offset=8), Print(None, [Str('Yesterday was your', lineno=73, col_offset=14)], False, lineno=73, col_offset=8)], [Print(None, [Str('Today is your', lineno=75, col_offset=14)], False, lineno=75, col_offset=8)], lineno=71, col_offset=4), Print(None, [Call(Name('nth', Load(), lineno=76, col_offset=10), [BinOp(Name('days', Load(), lineno=76, col_offset=14), Sub(), Name('age', Load(), lineno=76, col_offset=21), lineno=76, col_offset=14)], [], None, None, lineno=76, col_offset=10), Str('unbirthday', lineno=76, col_offset=27)], True, lineno=76, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('format', arguments([Tuple([Name('year', Store(), lineno=78, col_offset=12), Name('month', Store(), lineno=78, col_offset=18), Name('day', Store(), lineno=78, col_offset=25)], Store(), lineno=78, col_offset=12)], None, None, []), [Return(BinOp(Str('%d %s %d', lineno=79, col_offset=11), Mod(), Tuple([Name('day', Load(), lineno=79, col_offset=25), Subscript(Attribute(Name('calendar', Load(), lineno=79, col_offset=30), 'month_name', Load(), lineno=79, col_offset=30), Index(Name('month', Load(), lineno=79, col_offset=50)), Load(), lineno=79, col_offset=30), Name('year', Load(), lineno=79, col_offset=58)], Load(), lineno=79, col_offset=25), lineno=79, col_offset=11), lineno=79, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('nth', arguments([Name('n', Param(), lineno=81, col_offset=8)], None, None, []), [If(Compare(Name('n', Load(), lineno=82, col_offset=7), [Eq()], [Num(1, lineno=82, col_offset=12)], lineno=82, col_offset=7), [Return(Str('1st', lineno=82, col_offset=22), lineno=82, col_offset=15)], [], lineno=82, col_offset=4), If(Compare(Name('n', Load(), lineno=83, col_offset=7), [Eq()], [Num(2, lineno=83, col_offset=12)], lineno=83, col_offset=7), [Return(Str('2nd', lineno=83, col_offset=22), lineno=83, col_offset=15)], [], lineno=83, col_offset=4), If(Compare(Name('n', Load(), lineno=84, col_offset=7), [Eq()], [Num(3, lineno=84, col_offset=12)], lineno=84, col_offset=7), [Return(Str('3rd', lineno=84, col_offset=22), lineno=84, col_offset=15)], [], lineno=84, col_offset=4), Return(BinOp(Str('%dth', lineno=85, col_offset=11), Mod(), Name('n', Load(), lineno=85, col_offset=20), lineno=85, col_offset=11), lineno=85, col_offset=4)], [], lineno=81, col_offset=0), FunctionDef('mkdate', arguments([Tuple([Name('year', Store(), lineno=87, col_offset=12), Name('month', Store(), lineno=87, col_offset=18), Name('day', Store(), lineno=87, col_offset=25)], Store(), lineno=87, col_offset=12)], None, None, []), [Assign([Name('days', Store(), lineno=91, col_offset=4)], BinOp(Name('year', Load(), lineno=91, col_offset=11), Mult(), Num(365, lineno=91, col_offset=16), lineno=91, col_offset=11), lineno=91, col_offset=4), Assign([Name('days', Store(), lineno=92, col_offset=4)], BinOp(Name('days', Load(), lineno=92, col_offset=11), Add(), BinOp(BinOp(Name('year', Load(), lineno=92, col_offset=19), Add(), Num(3, lineno=92, col_offset=24), lineno=92, col_offset=19), FloorDiv(), Num(4, lineno=92, col_offset=28), lineno=92, col_offset=18), lineno=92, col_offset=11), lineno=92, col_offset=4), Assign([Name('days', Store(), lineno=93, col_offset=4)], BinOp(Name('days', Load(), lineno=93, col_offset=11), Sub(), BinOp(BinOp(Name('year', Load(), lineno=93, col_offset=19), Add(), Num(99, lineno=93, col_offset=24), lineno=93, col_offset=19), FloorDiv(), Num(100, lineno=93, col_offset=29), lineno=93, col_offset=18), lineno=93, col_offset=11), lineno=93, col_offset=4), Assign([Name('days', Store(), lineno=94, col_offset=4)], BinOp(Name('days', Load(), lineno=94, col_offset=11), Add(), BinOp(BinOp(Name('year', Load(), lineno=94, col_offset=19), Add(), Num(399, lineno=94, col_offset=24), lineno=94, col_offset=19), FloorDiv(), Num(400, lineno=94, col_offset=30), lineno=94, col_offset=18), lineno=94, col_offset=11), lineno=94, col_offset=4), For(Name('i', Store(), lineno=95, col_offset=8), Call(Name('range', Load(), lineno=95, col_offset=13), [Num(1, lineno=95, col_offset=19), Name('month', Load(), lineno=95, col_offset=22)], [], None, None, lineno=95, col_offset=13), [If(BoolOp(And(), [Compare(Name('i', Load(), lineno=96, col_offset=11), [Eq()], [Num(2, lineno=96, col_offset=16)], lineno=96, col_offset=11), Call(Attribute(Name('calendar', Load(), lineno=96, col_offset=22), 'isleap', Load(), lineno=96, col_offset=22), [Name('year', Load(), lineno=96, col_offset=38)], [], None, None, lineno=96, col_offset=22)], lineno=96, col_offset=11), [Assign([Name('days', Store(), lineno=97, col_offset=12)], BinOp(Name('days', Load(), lineno=97, col_offset=19), Add(), Num(29, lineno=97, col_offset=26), lineno=97, col_offset=19), lineno=97, col_offset=12)], [Assign([Name('days', Store(), lineno=99, col_offset=12)], BinOp(Name('days', Load(), lineno=99, col_offset=19), Add(), Subscript(Attribute(Name('calendar', Load(), lineno=99, col_offset=26), 'mdays', Load(), lineno=99, col_offset=26), Index(Name('i', Load(), lineno=99, col_offset=41)), Load(), lineno=99, col_offset=26), lineno=99, col_offset=19), lineno=99, col_offset=12)], lineno=96, col_offset=8)], [], lineno=95, col_offset=4), Assign([Name('days', Store(), lineno=100, col_offset=4)], BinOp(Name('days', Load(), lineno=100, col_offset=11), Add(), Name('day', Load(), lineno=100, col_offset=18), lineno=100, col_offset=11), lineno=100, col_offset=4), Return(Name('days', Load(), lineno=101, col_offset=11), lineno=101, col_offset=4)], [], lineno=87, col_offset=0), If(Compare(Name('__name__', Load(), lineno=103, col_offset=3), [Eq()], [Str('__main__', lineno=103, col_offset=15)], lineno=103, col_offset=3), [Expr(Call(Name('main', Load(), lineno=104, col_offset=4), [], [], None, None, lineno=104, col_offset=4), lineno=104, col_offset=4)], [], lineno=103, col_offset=0)])
