Module([Expr(Str("Tool for measuring execution time of small code snippets.\n\nThis module avoids a number of common traps for measuring execution\ntimes.  See also Tim Peters' introduction to the Algorithms chapter in\nthe Python Cookbook, published by O'Reilly.\n\nLibrary usage: see the Timer class.\n\nCommand line usage:\n    python timeit.py [-n N] [-r N] [-s S] [-t] [-c] [-h] [--] [statement]\n\nOptions:\n  -n/--number N: how many times to execute 'statement' (default: see below)\n  -r/--repeat N: how many times to repeat the timer (default 3)\n  -s/--setup S: statement to be executed once initially (default 'pass')\n  -t/--time: use time.time() (default on Unix)\n  -c/--clock: use time.clock() (default on Windows)\n  -v/--verbose: print raw timing results; repeat for more digits precision\n  -h/--help: print this usage message and exit\n  --: separate options from statement, use when statement starts with -\n  statement: statement to be timed (default 'pass')\n\nA multi-line statement may be given by specifying each line as a\nseparate argument; indented lines are possible by enclosing an\nargument in quotes and using leading spaces.  Multiple -s options are\ntreated similarly.\n\nIf -n is not given, a suitable number of loops is calculated by trying\nsuccessive powers of 10 until the total time is at least 0.2 seconds.\n\nThe difference in default timer function is because on Windows,\nclock() has microsecond granularity but time()'s granularity is 1/60th\nof a second; on Unix, clock() has 1/100th of a second granularity and\ntime() is much more precise.  On either platform, the default timer\nfunctions measure wall clock time, not the CPU time.  This means that\nother processes running on the same computer may interfere with the\ntiming.  The best thing to do when accurate timing is necessary is to\nrepeat the timing a few times and use the best time.  The -r option is\ngood for this; the default of 3 repetitions is probably enough in most\ncases.  On Unix, you can use clock() to measure CPU time.\n\nNote: there is a certain baseline overhead associated with executing a\npass statement.  The code here doesn't try to hide it, but you should\nbe aware of it.  The baseline overhead can be measured by invoking the\nprogram without arguments.\n\nThe baseline overhead differs between Python versions!  Also, to\nfairly compare older Python versions to Python 2.3, you may want to\nuse python -O for the older versions to avoid timing SET_LINENO\ninstructions.\n", lineno=53, col_offset=-1), lineno=53, col_offset=-1), Import([alias('gc', None)], lineno=55, col_offset=0), Import([alias('sys', None)], lineno=56, col_offset=0), Import([alias('time', None)], lineno=57, col_offset=0), TryExcept([Import([alias('itertools', None)], lineno=59, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=60, col_offset=7), None, [Assign([Name('itertools', Store(), lineno=62, col_offset=4)], Name('None', Load(), lineno=62, col_offset=16), lineno=62, col_offset=4)], lineno=60, col_offset=0)], [], lineno=58, col_offset=0), Assign([Name('__all__', Store(), lineno=64, col_offset=0)], List([Str('Timer', lineno=64, col_offset=11)], Load(), lineno=64, col_offset=10), lineno=64, col_offset=0), Assign([Name('dummy_src_name', Store(), lineno=66, col_offset=0)], Str('<timeit-src>', lineno=66, col_offset=17), lineno=66, col_offset=0), Assign([Name('default_number', Store(), lineno=67, col_offset=0)], Num(1000000, lineno=67, col_offset=17), lineno=67, col_offset=0), Assign([Name('default_repeat', Store(), lineno=68, col_offset=0)], Num(3, lineno=68, col_offset=17), lineno=68, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=70, col_offset=3), 'platform', Load(), lineno=70, col_offset=3), [Eq()], [Str('win32', lineno=70, col_offset=19)], lineno=70, col_offset=3), [Assign([Name('default_timer', Store(), lineno=72, col_offset=4)], Attribute(Name('time', Load(), lineno=72, col_offset=20), 'clock', Load(), lineno=72, col_offset=20), lineno=72, col_offset=4)], [Assign([Name('default_timer', Store(), lineno=75, col_offset=4)], Attribute(Name('time', Load(), lineno=75, col_offset=20), 'time', Load(), lineno=75, col_offset=20), lineno=75, col_offset=4)], lineno=70, col_offset=0), Assign([Name('template', Store(), lineno=80, col_offset=0)], Str('\ndef inner(_it, _timer):\n    %(setup)s\n    _t0 = _timer()\n    for _i in _it:\n        %(stmt)s\n    _t1 = _timer()\n    return _t1 - _t0\n', lineno=88, col_offset=-1), lineno=80, col_offset=0), FunctionDef('reindent', arguments([Name('src', Param(), lineno=90, col_offset=13), Name('indent', Param(), lineno=90, col_offset=18)], None, None, []), [Expr(Str('Helper to reindent a multi-line statement.', lineno=91, col_offset=4), lineno=91, col_offset=4), Return(Call(Attribute(Name('src', Load(), lineno=92, col_offset=11), 'replace', Load(), lineno=92, col_offset=11), [Str('\n', lineno=92, col_offset=23), BinOp(Str('\n', lineno=92, col_offset=29), Add(), BinOp(Str(' ', lineno=92, col_offset=36), Mult(), Name('indent', Load(), lineno=92, col_offset=40), lineno=92, col_offset=36), lineno=92, col_offset=29)], [], None, None, lineno=92, col_offset=11), lineno=92, col_offset=4)], [], lineno=90, col_offset=0), FunctionDef('_template_func', arguments([Name('setup', Param(), lineno=94, col_offset=19), Name('func', Param(), lineno=94, col_offset=26)], None, None, []), [Expr(Str('Create a timer function. Used if the "statement" is a callable.', lineno=95, col_offset=4), lineno=95, col_offset=4), FunctionDef('inner', arguments([Name('_it', Param(), lineno=96, col_offset=14), Name('_timer', Param(), lineno=96, col_offset=19), Name('_func', Param(), lineno=96, col_offset=27)], None, None, [Name('func', Load(), lineno=96, col_offset=33)]), [Expr(Call(Name('setup', Load(), lineno=97, col_offset=8), [], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Name('_t0', Store(), lineno=98, col_offset=8)], Call(Name('_timer', Load(), lineno=98, col_offset=14), [], [], None, None, lineno=98, col_offset=14), lineno=98, col_offset=8), For(Name('_i', Store(), lineno=99, col_offset=12), Name('_it', Load(), lineno=99, col_offset=18), [Expr(Call(Name('_func', Load(), lineno=100, col_offset=12), [], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=12)], [], lineno=99, col_offset=8), Assign([Name('_t1', Store(), lineno=101, col_offset=8)], Call(Name('_timer', Load(), lineno=101, col_offset=14), [], [], None, None, lineno=101, col_offset=14), lineno=101, col_offset=8), Return(BinOp(Name('_t1', Load(), lineno=102, col_offset=15), Sub(), Name('_t0', Load(), lineno=102, col_offset=21), lineno=102, col_offset=15), lineno=102, col_offset=8)], [], lineno=96, col_offset=4), Return(Name('inner', Load(), lineno=103, col_offset=11), lineno=103, col_offset=4)], [], lineno=94, col_offset=0), ClassDef('Timer', [], [Expr(Str("Class for timing execution speed of small code snippets.\n\n    The constructor takes a statement to be timed, an additional\n    statement used for setup, and a timer function.  Both statements\n    default to 'pass'; the timer function is platform-dependent (see\n    module doc string).\n\n    To measure the execution time of the first statement, use the\n    timeit() method.  The repeat() method is a convenience to call\n    timeit() multiple times and return a list of results.\n\n    The statements may contain newlines, as long as they don't contain\n    multi-line string literals.\n    ", lineno=119, col_offset=-1), lineno=119, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=121, col_offset=17), Name('stmt', Param(), lineno=121, col_offset=23), Name('setup', Param(), lineno=121, col_offset=36), Name('timer', Param(), lineno=121, col_offset=50)], None, None, [Str('pass', lineno=121, col_offset=28), Str('pass', lineno=121, col_offset=42), Name('default_timer', Load(), lineno=121, col_offset=56)]), [Expr(Str('Constructor.  See class doc string.', lineno=122, col_offset=8), lineno=122, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=123, col_offset=8), 'timer', Store(), lineno=123, col_offset=8)], Name('timer', Load(), lineno=123, col_offset=21), lineno=123, col_offset=8), Assign([Name('ns', Store(), lineno=124, col_offset=8)], Dict([], [], lineno=124, col_offset=13), lineno=124, col_offset=8), If(Call(Name('isinstance', Load(), lineno=125, col_offset=11), [Name('stmt', Load(), lineno=125, col_offset=22), Name('basestring', Load(), lineno=125, col_offset=28)], [], None, None, lineno=125, col_offset=11), [Assign([Name('stmt', Store(), lineno=126, col_offset=12)], Call(Name('reindent', Load(), lineno=126, col_offset=19), [Name('stmt', Load(), lineno=126, col_offset=28), Num(8, lineno=126, col_offset=34)], [], None, None, lineno=126, col_offset=19), lineno=126, col_offset=12), If(Call(Name('isinstance', Load(), lineno=127, col_offset=15), [Name('setup', Load(), lineno=127, col_offset=26), Name('basestring', Load(), lineno=127, col_offset=33)], [], None, None, lineno=127, col_offset=15), [Assign([Name('setup', Store(), lineno=128, col_offset=16)], Call(Name('reindent', Load(), lineno=128, col_offset=24), [Name('setup', Load(), lineno=128, col_offset=33), Num(4, lineno=128, col_offset=40)], [], None, None, lineno=128, col_offset=24), lineno=128, col_offset=16), Assign([Name('src', Store(), lineno=129, col_offset=16)], BinOp(Name('template', Load(), lineno=129, col_offset=22), Mod(), Dict([Str('stmt', lineno=129, col_offset=34), Str('setup', lineno=129, col_offset=48)], [Name('stmt', Load(), lineno=129, col_offset=42), Name('setup', Load(), lineno=129, col_offset=57)], lineno=129, col_offset=33), lineno=129, col_offset=22), lineno=129, col_offset=16)], [If(Call(Name('hasattr', Load(), lineno=130, col_offset=17), [Name('setup', Load(), lineno=130, col_offset=25), Str('__call__', lineno=130, col_offset=32)], [], None, None, lineno=130, col_offset=17), [Assign([Name('src', Store(), lineno=131, col_offset=16)], BinOp(Name('template', Load(), lineno=131, col_offset=22), Mod(), Dict([Str('stmt', lineno=131, col_offset=34), Str('setup', lineno=131, col_offset=48)], [Name('stmt', Load(), lineno=131, col_offset=42), Str('_setup()', lineno=131, col_offset=57)], lineno=131, col_offset=33), lineno=131, col_offset=22), lineno=131, col_offset=16), Assign([Subscript(Name('ns', Load(), lineno=132, col_offset=16), Index(Str('_setup', lineno=132, col_offset=19)), Store(), lineno=132, col_offset=16)], Name('setup', Load(), lineno=132, col_offset=31), lineno=132, col_offset=16)], [Raise(Call(Name('ValueError', Load(), lineno=134, col_offset=22), [Str('setup is neither a string nor callable', lineno=134, col_offset=33)], [], None, None, lineno=134, col_offset=22), None, None, lineno=134, col_offset=16)], lineno=130, col_offset=17)], lineno=127, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=135, col_offset=12), 'src', Store(), lineno=135, col_offset=12)], Name('src', Load(), lineno=135, col_offset=23), lineno=135, col_offset=12), Assign([Name('code', Store(), lineno=136, col_offset=12)], Call(Name('compile', Load(), lineno=136, col_offset=19), [Name('src', Load(), lineno=136, col_offset=27), Name('dummy_src_name', Load(), lineno=136, col_offset=32), Str('exec', lineno=136, col_offset=48)], [], None, None, lineno=136, col_offset=19), lineno=136, col_offset=12), Exec(Name('code', Load(), lineno=137, col_offset=17), Call(Name('globals', Load(), lineno=137, col_offset=25), [], [], None, None, lineno=137, col_offset=25), Name('ns', Load(), lineno=137, col_offset=36), lineno=137, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=138, col_offset=12), 'inner', Store(), lineno=138, col_offset=12)], Subscript(Name('ns', Load(), lineno=138, col_offset=25), Index(Str('inner', lineno=138, col_offset=28)), Load(), lineno=138, col_offset=25), lineno=138, col_offset=12)], [If(Call(Name('hasattr', Load(), lineno=139, col_offset=13), [Name('stmt', Load(), lineno=139, col_offset=21), Str('__call__', lineno=139, col_offset=27)], [], None, None, lineno=139, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=140, col_offset=12), 'src', Store(), lineno=140, col_offset=12)], Name('None', Load(), lineno=140, col_offset=23), lineno=140, col_offset=12), If(Call(Name('isinstance', Load(), lineno=141, col_offset=15), [Name('setup', Load(), lineno=141, col_offset=26), Name('basestring', Load(), lineno=141, col_offset=33)], [], None, None, lineno=141, col_offset=15), [Assign([Name('_setup', Store(), lineno=142, col_offset=16)], Name('setup', Load(), lineno=142, col_offset=25), lineno=142, col_offset=16), FunctionDef('setup', arguments([], None, None, []), [Exec(Name('_setup', Load(), lineno=144, col_offset=25), Call(Name('globals', Load(), lineno=144, col_offset=35), [], [], None, None, lineno=144, col_offset=35), Name('ns', Load(), lineno=144, col_offset=46), lineno=144, col_offset=20)], [], lineno=143, col_offset=16)], [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=145, col_offset=21), [Name('setup', Load(), lineno=145, col_offset=29), Str('__call__', lineno=145, col_offset=36)], [], None, None, lineno=145, col_offset=21), lineno=145, col_offset=17), [Raise(Call(Name('ValueError', Load(), lineno=146, col_offset=22), [Str('setup is neither a string nor callable', lineno=146, col_offset=33)], [], None, None, lineno=146, col_offset=22), None, None, lineno=146, col_offset=16)], [], lineno=145, col_offset=17)], lineno=141, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=147, col_offset=12), 'inner', Store(), lineno=147, col_offset=12)], Call(Name('_template_func', Load(), lineno=147, col_offset=25), [Name('setup', Load(), lineno=147, col_offset=40), Name('stmt', Load(), lineno=147, col_offset=47)], [], None, None, lineno=147, col_offset=25), lineno=147, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=149, col_offset=18), [Str('stmt is neither a string nor callable', lineno=149, col_offset=29)], [], None, None, lineno=149, col_offset=18), None, None, lineno=149, col_offset=12)], lineno=139, col_offset=13)], lineno=125, col_offset=8)], [], lineno=121, col_offset=4), FunctionDef('print_exc', arguments([Name('self', Param(), lineno=151, col_offset=18), Name('file', Param(), lineno=151, col_offset=24)], None, None, [Name('None', Load(), lineno=151, col_offset=29)]), [Expr(Str('Helper to print a traceback from the timed code.\n\n        Typical use:\n\n            t = Timer(...)       # outside the try/except\n            try:\n                t.timeit(...)    # or t.repeat(...)\n            except:\n                t.print_exc()\n\n        The advantage over the standard traceback is that source lines\n        in the compiled template will be displayed.\n\n        The optional file argument directs where the traceback is\n        sent; it defaults to sys.stderr.\n        ', lineno=167, col_offset=-1), lineno=167, col_offset=-1), Import([alias('linecache', None), alias('traceback', None)], lineno=168, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=169, col_offset=11), 'src', Load(), lineno=169, col_offset=11), [IsNot()], [Name('None', Load(), lineno=169, col_offset=27)], lineno=169, col_offset=11), [Assign([Subscript(Attribute(Name('linecache', Load(), lineno=170, col_offset=12), 'cache', Load(), lineno=170, col_offset=12), Index(Name('dummy_src_name', Load(), lineno=170, col_offset=28)), Store(), lineno=170, col_offset=12)], Tuple([Call(Name('len', Load(), lineno=170, col_offset=47), [Attribute(Name('self', Load(), lineno=170, col_offset=51), 'src', Load(), lineno=170, col_offset=51)], [], None, None, lineno=170, col_offset=47), Name('None', Load(), lineno=171, col_offset=47), Call(Attribute(Attribute(Name('self', Load(), lineno=172, col_offset=47), 'src', Load(), lineno=172, col_offset=47), 'split', Load(), lineno=172, col_offset=47), [Str('\n', lineno=172, col_offset=62)], [], None, None, lineno=172, col_offset=47), Name('dummy_src_name', Load(), lineno=173, col_offset=47)], Load(), lineno=170, col_offset=47), lineno=170, col_offset=12)], [], lineno=169, col_offset=8), Expr(Call(Attribute(Name('traceback', Load(), lineno=176, col_offset=8), 'print_exc', Load(), lineno=176, col_offset=8), [], [keyword('file', Name('file', Load(), lineno=176, col_offset=33))], None, None, lineno=176, col_offset=8), lineno=176, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('timeit', arguments([Name('self', Param(), lineno=178, col_offset=15), Name('number', Param(), lineno=178, col_offset=21)], None, None, [Name('default_number', Load(), lineno=178, col_offset=28)]), [Expr(Str("Time 'number' executions of the main statement.\n\n        To be precise, this executes the setup statement once, and\n        then returns the time it takes to execute the main statement\n        a number of times, as a float measured in seconds.  The\n        argument is the number of times through the loop, defaulting\n        to one million.  The main statement, the setup statement and\n        the timer function to be used are passed to the constructor.\n        ", lineno=187, col_offset=-1), lineno=187, col_offset=-1), If(Name('itertools', Load(), lineno=188, col_offset=11), [Assign([Name('it', Store(), lineno=189, col_offset=12)], Call(Attribute(Name('itertools', Load(), lineno=189, col_offset=17), 'repeat', Load(), lineno=189, col_offset=17), [Name('None', Load(), lineno=189, col_offset=34), Name('number', Load(), lineno=189, col_offset=40)], [], None, None, lineno=189, col_offset=17), lineno=189, col_offset=12)], [Assign([Name('it', Store(), lineno=191, col_offset=12)], BinOp(List([Name('None', Load(), lineno=191, col_offset=18)], Load(), lineno=191, col_offset=17), Mult(), Name('number', Load(), lineno=191, col_offset=26), lineno=191, col_offset=17), lineno=191, col_offset=12)], lineno=188, col_offset=8), Assign([Name('gcold', Store(), lineno=192, col_offset=8)], Call(Attribute(Name('gc', Load(), lineno=192, col_offset=16), 'isenabled', Load(), lineno=192, col_offset=16), [], [], None, None, lineno=192, col_offset=16), lineno=192, col_offset=8), Expr(Call(Attribute(Name('gc', Load(), lineno=193, col_offset=8), 'disable', Load(), lineno=193, col_offset=8), [], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Assign([Name('timing', Store(), lineno=194, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=194, col_offset=17), 'inner', Load(), lineno=194, col_offset=17), [Name('it', Load(), lineno=194, col_offset=28), Attribute(Name('self', Load(), lineno=194, col_offset=32), 'timer', Load(), lineno=194, col_offset=32)], [], None, None, lineno=194, col_offset=17), lineno=194, col_offset=8), If(Name('gcold', Load(), lineno=195, col_offset=11), [Expr(Call(Attribute(Name('gc', Load(), lineno=196, col_offset=12), 'enable', Load(), lineno=196, col_offset=12), [], [], None, None, lineno=196, col_offset=12), lineno=196, col_offset=12)], [], lineno=195, col_offset=8), Return(Name('timing', Load(), lineno=197, col_offset=15), lineno=197, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('repeat', arguments([Name('self', Param(), lineno=199, col_offset=15), Name('repeat', Param(), lineno=199, col_offset=21), Name('number', Param(), lineno=199, col_offset=44)], None, None, [Name('default_repeat', Load(), lineno=199, col_offset=28), Name('default_number', Load(), lineno=199, col_offset=51)]), [Expr(Str("Call timeit() a few times.\n\n        This is a convenience function that calls the timeit()\n        repeatedly, returning a list of results.  The first argument\n        specifies how many times to call timeit(), defaulting to 3;\n        the second argument specifies the timer argument, defaulting\n        to one million.\n\n        Note: it's tempting to calculate mean and standard deviation\n        from the result vector and report these.  However, this is not\n        very useful.  In a typical case, the lowest value gives a\n        lower bound for how fast your machine can run the given code\n        snippet; higher values in the result vector are typically not\n        caused by variability in Python's speed, but by other\n        processes interfering with your timing accuracy.  So the min()\n        of the result is probably the only number you should be\n        interested in.  After that, you should look at the entire\n        vector and apply common sense rather than statistics.\n        ", lineno=218, col_offset=-1), lineno=218, col_offset=-1), Assign([Name('r', Store(), lineno=219, col_offset=8)], List([], Load(), lineno=219, col_offset=12), lineno=219, col_offset=8), For(Name('i', Store(), lineno=220, col_offset=12), Call(Name('range', Load(), lineno=220, col_offset=17), [Name('repeat', Load(), lineno=220, col_offset=23)], [], None, None, lineno=220, col_offset=17), [Assign([Name('t', Store(), lineno=221, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=221, col_offset=16), 'timeit', Load(), lineno=221, col_offset=16), [Name('number', Load(), lineno=221, col_offset=28)], [], None, None, lineno=221, col_offset=16), lineno=221, col_offset=12), Expr(Call(Attribute(Name('r', Load(), lineno=222, col_offset=12), 'append', Load(), lineno=222, col_offset=12), [Name('t', Load(), lineno=222, col_offset=21)], [], None, None, lineno=222, col_offset=12), lineno=222, col_offset=12)], [], lineno=220, col_offset=8), Return(Name('r', Load(), lineno=223, col_offset=15), lineno=223, col_offset=8)], [], lineno=199, col_offset=4)], [], lineno=105, col_offset=0), FunctionDef('timeit', arguments([Name('stmt', Param(), lineno=225, col_offset=11), Name('setup', Param(), lineno=225, col_offset=24), Name('timer', Param(), lineno=225, col_offset=38), Name('number', Param(), lineno=226, col_offset=11)], None, None, [Str('pass', lineno=225, col_offset=16), Str('pass', lineno=225, col_offset=30), Name('default_timer', Load(), lineno=225, col_offset=44), Name('default_number', Load(), lineno=226, col_offset=18)]), [Expr(Str('Convenience function to create Timer object and call timeit method.', lineno=227, col_offset=4), lineno=227, col_offset=4), Return(Call(Attribute(Call(Name('Timer', Load(), lineno=228, col_offset=11), [Name('stmt', Load(), lineno=228, col_offset=17), Name('setup', Load(), lineno=228, col_offset=23), Name('timer', Load(), lineno=228, col_offset=30)], [], None, None, lineno=228, col_offset=11), 'timeit', Load(), lineno=228, col_offset=11), [Name('number', Load(), lineno=228, col_offset=44)], [], None, None, lineno=228, col_offset=11), lineno=228, col_offset=4)], [], lineno=225, col_offset=0), FunctionDef('repeat', arguments([Name('stmt', Param(), lineno=230, col_offset=11), Name('setup', Param(), lineno=230, col_offset=24), Name('timer', Param(), lineno=230, col_offset=38), Name('repeat', Param(), lineno=231, col_offset=11), Name('number', Param(), lineno=231, col_offset=34)], None, None, [Str('pass', lineno=230, col_offset=16), Str('pass', lineno=230, col_offset=30), Name('default_timer', Load(), lineno=230, col_offset=44), Name('default_repeat', Load(), lineno=231, col_offset=18), Name('default_number', Load(), lineno=231, col_offset=41)]), [Expr(Str('Convenience function to create Timer object and call repeat method.', lineno=232, col_offset=4), lineno=232, col_offset=4), Return(Call(Attribute(Call(Name('Timer', Load(), lineno=233, col_offset=11), [Name('stmt', Load(), lineno=233, col_offset=17), Name('setup', Load(), lineno=233, col_offset=23), Name('timer', Load(), lineno=233, col_offset=30)], [], None, None, lineno=233, col_offset=11), 'repeat', Load(), lineno=233, col_offset=11), [Name('repeat', Load(), lineno=233, col_offset=44), Name('number', Load(), lineno=233, col_offset=52)], [], None, None, lineno=233, col_offset=11), lineno=233, col_offset=4)], [], lineno=230, col_offset=0), FunctionDef('main', arguments([Name('args', Param(), lineno=235, col_offset=9)], None, None, [Name('None', Load(), lineno=235, col_offset=14)]), [Expr(Str('Main program, used when run as a script.\n\n    The optional argument specifies the command line to be parsed,\n    defaulting to sys.argv[1:].\n\n    The return value is an exit code to be passed to sys.exit(); it\n    may be None to indicate success.\n\n    When an exception happens during timing, a traceback is printed to\n    stderr and the return value is 1.  Exceptions at other times\n    (including the template compilation) are not caught.\n    ', lineno=247, col_offset=-1), lineno=247, col_offset=-1), If(Compare(Name('args', Load(), lineno=248, col_offset=7), [Is()], [Name('None', Load(), lineno=248, col_offset=15)], lineno=248, col_offset=7), [Assign([Name('args', Store(), lineno=249, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=249, col_offset=15), 'argv', Load(), lineno=249, col_offset=15), Slice(Num(1, lineno=249, col_offset=24), None, None), Load(), lineno=249, col_offset=15), lineno=249, col_offset=8)], [], lineno=248, col_offset=4), Import([alias('getopt', None)], lineno=250, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=252, col_offset=8), Name('args', Store(), lineno=252, col_offset=14)], Store(), lineno=252, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=252, col_offset=21), 'getopt', Load(), lineno=252, col_offset=21), [Name('args', Load(), lineno=252, col_offset=35), Str('n:s:r:tcvh', lineno=252, col_offset=41), List([Str('number=', lineno=253, col_offset=36), Str('setup=', lineno=253, col_offset=47), Str('repeat=', lineno=253, col_offset=57), Str('time', lineno=254, col_offset=36), Str('clock', lineno=254, col_offset=44), Str('verbose', lineno=254, col_offset=53), Str('help', lineno=254, col_offset=64)], Load(), lineno=253, col_offset=35)], [], None, None, lineno=252, col_offset=21), lineno=252, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=255, col_offset=11), 'error', Load(), lineno=255, col_offset=11), Name('err', Store(), lineno=255, col_offset=25), [Print(None, [Name('err', Load(), lineno=256, col_offset=14)], True, lineno=256, col_offset=8), Print(None, [Str('use -h/--help for command line help', lineno=257, col_offset=14)], True, lineno=257, col_offset=8), Return(Num(2, lineno=258, col_offset=15), lineno=258, col_offset=8)], lineno=255, col_offset=4)], [], lineno=251, col_offset=4), Assign([Name('timer', Store(), lineno=259, col_offset=4)], Name('default_timer', Load(), lineno=259, col_offset=12), lineno=259, col_offset=4), Assign([Name('stmt', Store(), lineno=260, col_offset=4)], BoolOp(Or(), [Call(Attribute(Str('\n', lineno=260, col_offset=11), 'join', Load(), lineno=260, col_offset=11), [Name('args', Load(), lineno=260, col_offset=21)], [], None, None, lineno=260, col_offset=11), Str('pass', lineno=260, col_offset=30)], lineno=260, col_offset=11), lineno=260, col_offset=4), Assign([Name('number', Store(), lineno=261, col_offset=4)], Num(0, lineno=261, col_offset=13), lineno=261, col_offset=4), Assign([Name('setup', Store(), lineno=262, col_offset=4)], List([], Load(), lineno=262, col_offset=12), lineno=262, col_offset=4), Assign([Name('repeat', Store(), lineno=263, col_offset=4)], Name('default_repeat', Load(), lineno=263, col_offset=13), lineno=263, col_offset=4), Assign([Name('verbose', Store(), lineno=264, col_offset=4)], Num(0, lineno=264, col_offset=14), lineno=264, col_offset=4), Assign([Name('precision', Store(), lineno=265, col_offset=4)], Num(3, lineno=265, col_offset=16), lineno=265, col_offset=4), For(Tuple([Name('o', Store(), lineno=266, col_offset=8), Name('a', Store(), lineno=266, col_offset=11)], Store(), lineno=266, col_offset=8), Name('opts', Load(), lineno=266, col_offset=16), [If(Compare(Name('o', Load(), lineno=267, col_offset=11), [In()], [Tuple([Str('-n', lineno=267, col_offset=17), Str('--number', lineno=267, col_offset=23)], Load(), lineno=267, col_offset=17)], lineno=267, col_offset=11), [Assign([Name('number', Store(), lineno=268, col_offset=12)], Call(Name('int', Load(), lineno=268, col_offset=21), [Name('a', Load(), lineno=268, col_offset=25)], [], None, None, lineno=268, col_offset=21), lineno=268, col_offset=12)], [], lineno=267, col_offset=8), If(Compare(Name('o', Load(), lineno=269, col_offset=11), [In()], [Tuple([Str('-s', lineno=269, col_offset=17), Str('--setup', lineno=269, col_offset=23)], Load(), lineno=269, col_offset=17)], lineno=269, col_offset=11), [Expr(Call(Attribute(Name('setup', Load(), lineno=270, col_offset=12), 'append', Load(), lineno=270, col_offset=12), [Name('a', Load(), lineno=270, col_offset=25)], [], None, None, lineno=270, col_offset=12), lineno=270, col_offset=12)], [], lineno=269, col_offset=8), If(Compare(Name('o', Load(), lineno=271, col_offset=11), [In()], [Tuple([Str('-r', lineno=271, col_offset=17), Str('--repeat', lineno=271, col_offset=23)], Load(), lineno=271, col_offset=17)], lineno=271, col_offset=11), [Assign([Name('repeat', Store(), lineno=272, col_offset=12)], Call(Name('int', Load(), lineno=272, col_offset=21), [Name('a', Load(), lineno=272, col_offset=25)], [], None, None, lineno=272, col_offset=21), lineno=272, col_offset=12), If(Compare(Name('repeat', Load(), lineno=273, col_offset=15), [LtE()], [Num(0, lineno=273, col_offset=25)], lineno=273, col_offset=15), [Assign([Name('repeat', Store(), lineno=274, col_offset=16)], Num(1, lineno=274, col_offset=25), lineno=274, col_offset=16)], [], lineno=273, col_offset=12)], [], lineno=271, col_offset=8), If(Compare(Name('o', Load(), lineno=275, col_offset=11), [In()], [Tuple([Str('-t', lineno=275, col_offset=17), Str('--time', lineno=275, col_offset=23)], Load(), lineno=275, col_offset=17)], lineno=275, col_offset=11), [Assign([Name('timer', Store(), lineno=276, col_offset=12)], Attribute(Name('time', Load(), lineno=276, col_offset=20), 'time', Load(), lineno=276, col_offset=20), lineno=276, col_offset=12)], [], lineno=275, col_offset=8), If(Compare(Name('o', Load(), lineno=277, col_offset=11), [In()], [Tuple([Str('-c', lineno=277, col_offset=17), Str('--clock', lineno=277, col_offset=23)], Load(), lineno=277, col_offset=17)], lineno=277, col_offset=11), [Assign([Name('timer', Store(), lineno=278, col_offset=12)], Attribute(Name('time', Load(), lineno=278, col_offset=20), 'clock', Load(), lineno=278, col_offset=20), lineno=278, col_offset=12)], [], lineno=277, col_offset=8), If(Compare(Name('o', Load(), lineno=279, col_offset=11), [In()], [Tuple([Str('-v', lineno=279, col_offset=17), Str('--verbose', lineno=279, col_offset=23)], Load(), lineno=279, col_offset=17)], lineno=279, col_offset=11), [If(Name('verbose', Load(), lineno=280, col_offset=15), [AugAssign(Name('precision', Store(), lineno=281, col_offset=16), Add(), Num(1, lineno=281, col_offset=29), lineno=281, col_offset=16)], [], lineno=280, col_offset=12), AugAssign(Name('verbose', Store(), lineno=282, col_offset=12), Add(), Num(1, lineno=282, col_offset=23), lineno=282, col_offset=12)], [], lineno=279, col_offset=8), If(Compare(Name('o', Load(), lineno=283, col_offset=11), [In()], [Tuple([Str('-h', lineno=283, col_offset=17), Str('--help', lineno=283, col_offset=23)], Load(), lineno=283, col_offset=17)], lineno=283, col_offset=11), [Print(None, [Name('__doc__', Load(), lineno=284, col_offset=18)], False, lineno=284, col_offset=12), Return(Num(0, lineno=285, col_offset=19), lineno=285, col_offset=12)], [], lineno=283, col_offset=8)], [], lineno=266, col_offset=4), Assign([Name('setup', Store(), lineno=286, col_offset=4)], BoolOp(Or(), [Call(Attribute(Str('\n', lineno=286, col_offset=12), 'join', Load(), lineno=286, col_offset=12), [Name('setup', Load(), lineno=286, col_offset=22)], [], None, None, lineno=286, col_offset=12), Str('pass', lineno=286, col_offset=32)], lineno=286, col_offset=12), lineno=286, col_offset=4), Import([alias('os', None)], lineno=290, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=291, col_offset=4), 'path', Load(), lineno=291, col_offset=4), 'insert', Load(), lineno=291, col_offset=4), [Num(0, lineno=291, col_offset=20), Attribute(Name('os', Load(), lineno=291, col_offset=23), 'curdir', Load(), lineno=291, col_offset=23)], [], None, None, lineno=291, col_offset=4), lineno=291, col_offset=4), Assign([Name('t', Store(), lineno=292, col_offset=4)], Call(Name('Timer', Load(), lineno=292, col_offset=8), [Name('stmt', Load(), lineno=292, col_offset=14), Name('setup', Load(), lineno=292, col_offset=20), Name('timer', Load(), lineno=292, col_offset=27)], [], None, None, lineno=292, col_offset=8), lineno=292, col_offset=4), If(Compare(Name('number', Load(), lineno=293, col_offset=7), [Eq()], [Num(0, lineno=293, col_offset=17)], lineno=293, col_offset=7), [For(Name('i', Store(), lineno=295, col_offset=12), Call(Name('range', Load(), lineno=295, col_offset=17), [Num(1, lineno=295, col_offset=23), Num(10, lineno=295, col_offset=26)], [], None, None, lineno=295, col_offset=17), [Assign([Name('number', Store(), lineno=296, col_offset=12)], BinOp(Num(10, lineno=296, col_offset=21), Pow(), Name('i', Load(), lineno=296, col_offset=25), lineno=296, col_offset=21), lineno=296, col_offset=12), TryExcept([Assign([Name('x', Store(), lineno=298, col_offset=16)], Call(Attribute(Name('t', Load(), lineno=298, col_offset=20), 'timeit', Load(), lineno=298, col_offset=20), [Name('number', Load(), lineno=298, col_offset=29)], [], None, None, lineno=298, col_offset=20), lineno=298, col_offset=16)], [ExceptHandler(None, None, [Expr(Call(Attribute(Name('t', Load(), lineno=300, col_offset=16), 'print_exc', Load(), lineno=300, col_offset=16), [], [], None, None, lineno=300, col_offset=16), lineno=300, col_offset=16), Return(Num(1, lineno=301, col_offset=23), lineno=301, col_offset=16)], lineno=299, col_offset=12)], [], lineno=297, col_offset=12), If(Name('verbose', Load(), lineno=302, col_offset=15), [Print(None, [BinOp(Str('%d loops -> %.*g secs', lineno=303, col_offset=22), Mod(), Tuple([Name('number', Load(), lineno=303, col_offset=49), Name('precision', Load(), lineno=303, col_offset=57), Name('x', Load(), lineno=303, col_offset=68)], Load(), lineno=303, col_offset=49), lineno=303, col_offset=22)], True, lineno=303, col_offset=16)], [], lineno=302, col_offset=12), If(Compare(Name('x', Load(), lineno=304, col_offset=15), [GtE()], [Num(0.2, lineno=304, col_offset=20)], lineno=304, col_offset=15), [Break( lineno=305, col_offset=16)], [], lineno=304, col_offset=12)], [], lineno=295, col_offset=8)], [], lineno=293, col_offset=4), TryExcept([Assign([Name('r', Store(), lineno=307, col_offset=8)], Call(Attribute(Name('t', Load(), lineno=307, col_offset=12), 'repeat', Load(), lineno=307, col_offset=12), [Name('repeat', Load(), lineno=307, col_offset=21), Name('number', Load(), lineno=307, col_offset=29)], [], None, None, lineno=307, col_offset=12), lineno=307, col_offset=8)], [ExceptHandler(None, None, [Expr(Call(Attribute(Name('t', Load(), lineno=309, col_offset=8), 'print_exc', Load(), lineno=309, col_offset=8), [], [], None, None, lineno=309, col_offset=8), lineno=309, col_offset=8), Return(Num(1, lineno=310, col_offset=15), lineno=310, col_offset=8)], lineno=308, col_offset=4)], [], lineno=306, col_offset=4), Assign([Name('best', Store(), lineno=311, col_offset=4)], Call(Name('min', Load(), lineno=311, col_offset=11), [Name('r', Load(), lineno=311, col_offset=15)], [], None, None, lineno=311, col_offset=11), lineno=311, col_offset=4), If(Name('verbose', Load(), lineno=312, col_offset=7), [Print(None, [Str('raw times:', lineno=313, col_offset=14), Call(Attribute(Str(' ', lineno=313, col_offset=28), 'join', Load(), lineno=313, col_offset=28), [ListComp(BinOp(Str('%.*g', lineno=313, col_offset=38), Mod(), Tuple([Name('precision', Load(), lineno=313, col_offset=48), Name('x', Load(), lineno=313, col_offset=59)], Load(), lineno=313, col_offset=48), lineno=313, col_offset=38), [comprehension(Name('x', Store(), lineno=313, col_offset=66), Name('r', Load(), lineno=313, col_offset=71), [])], lineno=313, col_offset=38)], [], None, None, lineno=313, col_offset=28)], True, lineno=313, col_offset=8)], [], lineno=312, col_offset=4), Print(None, [BinOp(Str('%d loops,', lineno=314, col_offset=10), Mod(), Name('number', Load(), lineno=314, col_offset=24), lineno=314, col_offset=10)], False, lineno=314, col_offset=4), Assign([Name('usec', Store(), lineno=315, col_offset=4)], BinOp(BinOp(Name('best', Load(), lineno=315, col_offset=11), Mult(), Num(1000000.0, lineno=315, col_offset=18), lineno=315, col_offset=11), Div(), Name('number', Load(), lineno=315, col_offset=24), lineno=315, col_offset=22), lineno=315, col_offset=4), If(Compare(Name('usec', Load(), lineno=316, col_offset=7), [Lt()], [Num(1000, lineno=316, col_offset=14)], lineno=316, col_offset=7), [Print(None, [BinOp(Str('best of %d: %.*g usec per loop', lineno=317, col_offset=14), Mod(), Tuple([Name('repeat', Load(), lineno=317, col_offset=50), Name('precision', Load(), lineno=317, col_offset=58), Name('usec', Load(), lineno=317, col_offset=69)], Load(), lineno=317, col_offset=50), lineno=317, col_offset=14)], True, lineno=317, col_offset=8)], [Assign([Name('msec', Store(), lineno=319, col_offset=8)], BinOp(Name('usec', Load(), lineno=319, col_offset=15), Div(), Num(1000, lineno=319, col_offset=22), lineno=319, col_offset=15), lineno=319, col_offset=8), If(Compare(Name('msec', Load(), lineno=320, col_offset=11), [Lt()], [Num(1000, lineno=320, col_offset=18)], lineno=320, col_offset=11), [Print(None, [BinOp(Str('best of %d: %.*g msec per loop', lineno=321, col_offset=18), Mod(), Tuple([Name('repeat', Load(), lineno=321, col_offset=54), Name('precision', Load(), lineno=321, col_offset=62), Name('msec', Load(), lineno=321, col_offset=73)], Load(), lineno=321, col_offset=54), lineno=321, col_offset=18)], True, lineno=321, col_offset=12)], [Assign([Name('sec', Store(), lineno=323, col_offset=12)], BinOp(Name('msec', Load(), lineno=323, col_offset=18), Div(), Num(1000, lineno=323, col_offset=25), lineno=323, col_offset=18), lineno=323, col_offset=12), Print(None, [BinOp(Str('best of %d: %.*g sec per loop', lineno=324, col_offset=18), Mod(), Tuple([Name('repeat', Load(), lineno=324, col_offset=53), Name('precision', Load(), lineno=324, col_offset=61), Name('sec', Load(), lineno=324, col_offset=72)], Load(), lineno=324, col_offset=53), lineno=324, col_offset=18)], True, lineno=324, col_offset=12)], lineno=320, col_offset=8)], lineno=316, col_offset=4), Return(Name('None', Load(), lineno=325, col_offset=11), lineno=325, col_offset=4)], [], lineno=235, col_offset=0), If(Compare(Name('__name__', Load(), lineno=327, col_offset=3), [Eq()], [Str('__main__', lineno=327, col_offset=15)], lineno=327, col_offset=3), [Expr(Call(Attribute(Name('sys', Load(), lineno=328, col_offset=4), 'exit', Load(), lineno=328, col_offset=4), [Call(Name('main', Load(), lineno=328, col_offset=13), [], [], None, None, lineno=328, col_offset=13)], [], None, None, lineno=328, col_offset=4), lineno=328, col_offset=4)], [], lineno=327, col_offset=0)])
