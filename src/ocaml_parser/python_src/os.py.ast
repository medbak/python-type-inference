Module([Expr(Str("OS routines for Mac, NT, or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.\n  - os.path is one of the modules posixpath, or ntpath\n  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'\n  - os.curdir is a string representing the current directory ('.' or ':')\n  - os.pardir is a string representing the parent directory ('..' or '::')\n  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')\n  - os.extsep is the extension separator ('.' or '/')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n", lineno=22, col_offset=-1), lineno=22, col_offset=-1), Import([alias('sys', None), alias('errno', None)], lineno=26, col_offset=0), Assign([Name('_names', Store(), lineno=28, col_offset=0)], Attribute(Name('sys', Load(), lineno=28, col_offset=9), 'builtin_module_names', Load(), lineno=28, col_offset=9), lineno=28, col_offset=0), Assign([Name('__all__', Store(), lineno=31, col_offset=0)], List([Str('altsep', lineno=31, col_offset=11), Str('curdir', lineno=31, col_offset=21), Str('pardir', lineno=31, col_offset=31), Str('sep', lineno=31, col_offset=41), Str('extsep', lineno=31, col_offset=48), Str('pathsep', lineno=31, col_offset=58), Str('linesep', lineno=31, col_offset=69), Str('defpath', lineno=32, col_offset=11), Str('name', lineno=32, col_offset=22), Str('path', lineno=32, col_offset=30), Str('devnull', lineno=32, col_offset=38), Str('SEEK_SET', lineno=33, col_offset=11), Str('SEEK_CUR', lineno=33, col_offset=23), Str('SEEK_END', lineno=33, col_offset=35)], Load(), lineno=31, col_offset=10), lineno=31, col_offset=0), FunctionDef('_get_exports_list', arguments([Name('module', Param(), lineno=35, col_offset=22)], None, None, []), [TryExcept([Return(Call(Name('list', Load(), lineno=37, col_offset=15), [Attribute(Name('module', Load(), lineno=37, col_offset=20), '__all__', Load(), lineno=37, col_offset=20)], [], None, None, lineno=37, col_offset=15), lineno=37, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=38, col_offset=11), None, [Return(ListComp(Name('n', Load(), lineno=39, col_offset=16), [comprehension(Name('n', Store(), lineno=39, col_offset=22), Call(Name('dir', Load(), lineno=39, col_offset=27), [Name('module', Load(), lineno=39, col_offset=31)], [], None, None, lineno=39, col_offset=27), [Compare(Subscript(Name('n', Load(), lineno=39, col_offset=42), Index(Num(0, lineno=39, col_offset=44)), Load(), lineno=39, col_offset=42), [NotEq()], [Str('_', lineno=39, col_offset=50)], lineno=39, col_offset=42)])], lineno=39, col_offset=16), lineno=39, col_offset=8)], lineno=38, col_offset=4)], [], lineno=36, col_offset=4)], [], lineno=35, col_offset=0), If(Compare(Str('posix', lineno=41, col_offset=3), [In()], [Name('_names', Load(), lineno=41, col_offset=14)], lineno=41, col_offset=3), [Assign([Name('name', Store(), lineno=42, col_offset=4)], Str('posix', lineno=42, col_offset=11), lineno=42, col_offset=4), Assign([Name('linesep', Store(), lineno=43, col_offset=4)], Str('\n', lineno=43, col_offset=14), lineno=43, col_offset=4), ImportFrom('posix', [alias('*', None)], 0, lineno=44, col_offset=4), TryExcept([ImportFrom('posix', [alias('_exit', None)], 0, lineno=46, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=47, col_offset=11), None, [Pass( lineno=48, col_offset=8)], lineno=47, col_offset=4)], [], lineno=45, col_offset=4), Import([alias('posixpath', 'path')], lineno=49, col_offset=4), Import([alias('posix', None)], lineno=51, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=52, col_offset=4), 'extend', Load(), lineno=52, col_offset=4), [Call(Name('_get_exports_list', Load(), lineno=52, col_offset=19), [Name('posix', Load(), lineno=52, col_offset=37)], [], None, None, lineno=52, col_offset=19)], [], None, None, lineno=52, col_offset=4), lineno=52, col_offset=4), Delete([Name('posix', Del(), lineno=53, col_offset=8)], lineno=53, col_offset=4)], [If(Compare(Str('nt', lineno=55, col_offset=5), [In()], [Name('_names', Load(), lineno=55, col_offset=13)], lineno=55, col_offset=5), [Assign([Name('name', Store(), lineno=56, col_offset=4)], Str('nt', lineno=56, col_offset=11), lineno=56, col_offset=4), Assign([Name('linesep', Store(), lineno=57, col_offset=4)], Str('\r\n', lineno=57, col_offset=14), lineno=57, col_offset=4), ImportFrom('nt', [alias('*', None)], 0, lineno=58, col_offset=4), TryExcept([ImportFrom('nt', [alias('_exit', None)], 0, lineno=60, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=61, col_offset=11), None, [Pass( lineno=62, col_offset=8)], lineno=61, col_offset=4)], [], lineno=59, col_offset=4), Import([alias('ntpath', 'path')], lineno=63, col_offset=4), Import([alias('nt', None)], lineno=65, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=66, col_offset=4), 'extend', Load(), lineno=66, col_offset=4), [Call(Name('_get_exports_list', Load(), lineno=66, col_offset=19), [Name('nt', Load(), lineno=66, col_offset=37)], [], None, None, lineno=66, col_offset=19)], [], None, None, lineno=66, col_offset=4), lineno=66, col_offset=4), Delete([Name('nt', Del(), lineno=67, col_offset=8)], lineno=67, col_offset=4)], [If(Compare(Str('os2', lineno=69, col_offset=5), [In()], [Name('_names', Load(), lineno=69, col_offset=14)], lineno=69, col_offset=5), [Assign([Name('name', Store(), lineno=70, col_offset=4)], Str('os2', lineno=70, col_offset=11), lineno=70, col_offset=4), Assign([Name('linesep', Store(), lineno=71, col_offset=4)], Str('\r\n', lineno=71, col_offset=14), lineno=71, col_offset=4), ImportFrom('os2', [alias('*', None)], 0, lineno=72, col_offset=4), TryExcept([ImportFrom('os2', [alias('_exit', None)], 0, lineno=74, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=75, col_offset=11), None, [Pass( lineno=76, col_offset=8)], lineno=75, col_offset=4)], [], lineno=73, col_offset=4), If(Compare(Call(Attribute(Attribute(Name('sys', Load(), lineno=77, col_offset=7), 'version', Load(), lineno=77, col_offset=7), 'find', Load(), lineno=77, col_offset=7), [Str('EMX GCC', lineno=77, col_offset=24)], [], None, None, lineno=77, col_offset=7), [Eq()], [Num(-1, lineno=77, col_offset=39)], lineno=77, col_offset=7), [Import([alias('ntpath', 'path')], lineno=78, col_offset=8)], [Import([alias('os2emxpath', 'path')], lineno=80, col_offset=8), ImportFrom('_emx_link', [alias('link', None)], 0, lineno=81, col_offset=8)], lineno=77, col_offset=4), Import([alias('os2', None)], lineno=83, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=84, col_offset=4), 'extend', Load(), lineno=84, col_offset=4), [Call(Name('_get_exports_list', Load(), lineno=84, col_offset=19), [Name('os2', Load(), lineno=84, col_offset=37)], [], None, None, lineno=84, col_offset=19)], [], None, None, lineno=84, col_offset=4), lineno=84, col_offset=4), Delete([Name('os2', Del(), lineno=85, col_offset=8)], lineno=85, col_offset=4)], [If(Compare(Str('ce', lineno=87, col_offset=5), [In()], [Name('_names', Load(), lineno=87, col_offset=13)], lineno=87, col_offset=5), [Assign([Name('name', Store(), lineno=88, col_offset=4)], Str('ce', lineno=88, col_offset=11), lineno=88, col_offset=4), Assign([Name('linesep', Store(), lineno=89, col_offset=4)], Str('\r\n', lineno=89, col_offset=14), lineno=89, col_offset=4), ImportFrom('ce', [alias('*', None)], 0, lineno=90, col_offset=4), TryExcept([ImportFrom('ce', [alias('_exit', None)], 0, lineno=92, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=93, col_offset=11), None, [Pass( lineno=94, col_offset=8)], lineno=93, col_offset=4)], [], lineno=91, col_offset=4), Import([alias('ntpath', 'path')], lineno=96, col_offset=4), Import([alias('ce', None)], lineno=98, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=99, col_offset=4), 'extend', Load(), lineno=99, col_offset=4), [Call(Name('_get_exports_list', Load(), lineno=99, col_offset=19), [Name('ce', Load(), lineno=99, col_offset=37)], [], None, None, lineno=99, col_offset=19)], [], None, None, lineno=99, col_offset=4), lineno=99, col_offset=4), Delete([Name('ce', Del(), lineno=100, col_offset=8)], lineno=100, col_offset=4)], [If(Compare(Str('riscos', lineno=102, col_offset=5), [In()], [Name('_names', Load(), lineno=102, col_offset=17)], lineno=102, col_offset=5), [Assign([Name('name', Store(), lineno=103, col_offset=4)], Str('riscos', lineno=103, col_offset=11), lineno=103, col_offset=4), Assign([Name('linesep', Store(), lineno=104, col_offset=4)], Str('\n', lineno=104, col_offset=14), lineno=104, col_offset=4), ImportFrom('riscos', [alias('*', None)], 0, lineno=105, col_offset=4), TryExcept([ImportFrom('riscos', [alias('_exit', None)], 0, lineno=107, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=108, col_offset=11), None, [Pass( lineno=109, col_offset=8)], lineno=108, col_offset=4)], [], lineno=106, col_offset=4), Import([alias('riscospath', 'path')], lineno=110, col_offset=4), Import([alias('riscos', None)], lineno=112, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=113, col_offset=4), 'extend', Load(), lineno=113, col_offset=4), [Call(Name('_get_exports_list', Load(), lineno=113, col_offset=19), [Name('riscos', Load(), lineno=113, col_offset=37)], [], None, None, lineno=113, col_offset=19)], [], None, None, lineno=113, col_offset=4), lineno=113, col_offset=4), Delete([Name('riscos', Del(), lineno=114, col_offset=8)], lineno=114, col_offset=4)], [Raise(Name('ImportError', Load(), lineno=117, col_offset=10), Str('no os specific module found', lineno=117, col_offset=23), None, lineno=117, col_offset=4)], lineno=102, col_offset=5)], lineno=87, col_offset=5)], lineno=69, col_offset=5)], lineno=55, col_offset=5)], lineno=41, col_offset=0), Assign([Subscript(Attribute(Name('sys', Load(), lineno=119, col_offset=0), 'modules', Load(), lineno=119, col_offset=0), Index(Str('os.path', lineno=119, col_offset=12)), Store(), lineno=119, col_offset=0)], Name('path', Load(), lineno=119, col_offset=25), lineno=119, col_offset=0), ImportFrom('os.path', [alias('curdir', None), alias('pardir', None), alias('sep', None), alias('pathsep', None), alias('defpath', None), alias('extsep', None), alias('altsep', None), alias('devnull', None)], 0, lineno=120, col_offset=0), Delete([Name('_names', Del(), lineno=123, col_offset=4)], lineno=123, col_offset=0), Assign([Name('SEEK_SET', Store(), lineno=127, col_offset=0)], Num(0, lineno=127, col_offset=11), lineno=127, col_offset=0), Assign([Name('SEEK_CUR', Store(), lineno=128, col_offset=0)], Num(1, lineno=128, col_offset=11), lineno=128, col_offset=0), Assign([Name('SEEK_END', Store(), lineno=129, col_offset=0)], Num(2, lineno=129, col_offset=11), lineno=129, col_offset=0), FunctionDef('makedirs', arguments([Name('name', Param(), lineno=136, col_offset=13), Name('mode', Param(), lineno=136, col_offset=19)], None, None, [Num(511, lineno=136, col_offset=24)]), [Expr(Str('makedirs(path [, mode=0777])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n\n    ', lineno=144, col_offset=-1), lineno=144, col_offset=-1), Assign([Tuple([Name('head', Store(), lineno=145, col_offset=4), Name('tail', Store(), lineno=145, col_offset=10)], Store(), lineno=145, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=145, col_offset=17), 'split', Load(), lineno=145, col_offset=17), [Name('name', Load(), lineno=145, col_offset=28)], [], None, None, lineno=145, col_offset=17), lineno=145, col_offset=4), If(UnaryOp(Not(), Name('tail', Load(), lineno=146, col_offset=11), lineno=146, col_offset=7), [Assign([Tuple([Name('head', Store(), lineno=147, col_offset=8), Name('tail', Store(), lineno=147, col_offset=14)], Store(), lineno=147, col_offset=8)], Call(Attribute(Name('path', Load(), lineno=147, col_offset=21), 'split', Load(), lineno=147, col_offset=21), [Name('head', Load(), lineno=147, col_offset=32)], [], None, None, lineno=147, col_offset=21), lineno=147, col_offset=8)], [], lineno=146, col_offset=4), If(BoolOp(And(), [Name('head', Load(), lineno=148, col_offset=7), Name('tail', Load(), lineno=148, col_offset=16), UnaryOp(Not(), Call(Attribute(Name('path', Load(), lineno=148, col_offset=29), 'exists', Load(), lineno=148, col_offset=29), [Name('head', Load(), lineno=148, col_offset=41)], [], None, None, lineno=148, col_offset=29), lineno=148, col_offset=25)], lineno=148, col_offset=7), [TryExcept([Expr(Call(Name('makedirs', Load(), lineno=150, col_offset=12), [Name('head', Load(), lineno=150, col_offset=21), Name('mode', Load(), lineno=150, col_offset=27)], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=151, col_offset=15), Name('e', Store(), lineno=151, col_offset=24), [If(Compare(Attribute(Name('e', Load(), lineno=153, col_offset=15), 'errno', Load(), lineno=153, col_offset=15), [NotEq()], [Attribute(Name('errno', Load(), lineno=153, col_offset=26), 'EEXIST', Load(), lineno=153, col_offset=26)], lineno=153, col_offset=15), [Raise(None, None, None, lineno=154, col_offset=16)], [], lineno=153, col_offset=12)], lineno=151, col_offset=8)], [], lineno=149, col_offset=8), If(Compare(Name('tail', Load(), lineno=155, col_offset=11), [Eq()], [Name('curdir', Load(), lineno=155, col_offset=19)], lineno=155, col_offset=11), [Return(None, lineno=156, col_offset=12)], [], lineno=155, col_offset=8)], [], lineno=148, col_offset=4), Expr(Call(Name('mkdir', Load(), lineno=157, col_offset=4), [Name('name', Load(), lineno=157, col_offset=10), Name('mode', Load(), lineno=157, col_offset=16)], [], None, None, lineno=157, col_offset=4), lineno=157, col_offset=4)], [], lineno=136, col_offset=0), FunctionDef('removedirs', arguments([Name('name', Param(), lineno=159, col_offset=15)], None, None, []), [Expr(Str('removedirs(path)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    ', lineno=169, col_offset=-1), lineno=169, col_offset=-1), Expr(Call(Name('rmdir', Load(), lineno=170, col_offset=4), [Name('name', Load(), lineno=170, col_offset=10)], [], None, None, lineno=170, col_offset=4), lineno=170, col_offset=4), Assign([Tuple([Name('head', Store(), lineno=171, col_offset=4), Name('tail', Store(), lineno=171, col_offset=10)], Store(), lineno=171, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=171, col_offset=17), 'split', Load(), lineno=171, col_offset=17), [Name('name', Load(), lineno=171, col_offset=28)], [], None, None, lineno=171, col_offset=17), lineno=171, col_offset=4), If(UnaryOp(Not(), Name('tail', Load(), lineno=172, col_offset=11), lineno=172, col_offset=7), [Assign([Tuple([Name('head', Store(), lineno=173, col_offset=8), Name('tail', Store(), lineno=173, col_offset=14)], Store(), lineno=173, col_offset=8)], Call(Attribute(Name('path', Load(), lineno=173, col_offset=21), 'split', Load(), lineno=173, col_offset=21), [Name('head', Load(), lineno=173, col_offset=32)], [], None, None, lineno=173, col_offset=21), lineno=173, col_offset=8)], [], lineno=172, col_offset=4), While(BoolOp(And(), [Name('head', Load(), lineno=174, col_offset=10), Name('tail', Load(), lineno=174, col_offset=19)], lineno=174, col_offset=10), [TryExcept([Expr(Call(Name('rmdir', Load(), lineno=176, col_offset=12), [Name('head', Load(), lineno=176, col_offset=18)], [], None, None, lineno=176, col_offset=12), lineno=176, col_offset=12)], [ExceptHandler(Name('error', Load(), lineno=177, col_offset=15), None, [Break( lineno=178, col_offset=12)], lineno=177, col_offset=8)], [], lineno=175, col_offset=8), Assign([Tuple([Name('head', Store(), lineno=179, col_offset=8), Name('tail', Store(), lineno=179, col_offset=14)], Store(), lineno=179, col_offset=8)], Call(Attribute(Name('path', Load(), lineno=179, col_offset=21), 'split', Load(), lineno=179, col_offset=21), [Name('head', Load(), lineno=179, col_offset=32)], [], None, None, lineno=179, col_offset=21), lineno=179, col_offset=8)], [], lineno=174, col_offset=4)], [], lineno=159, col_offset=0), FunctionDef('renames', arguments([Name('old', Param(), lineno=181, col_offset=12), Name('new', Param(), lineno=181, col_offset=17)], None, None, []), [Expr(Str('renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned way until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    ', lineno=195, col_offset=-1), lineno=195, col_offset=-1), Assign([Tuple([Name('head', Store(), lineno=196, col_offset=4), Name('tail', Store(), lineno=196, col_offset=10)], Store(), lineno=196, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=196, col_offset=17), 'split', Load(), lineno=196, col_offset=17), [Name('new', Load(), lineno=196, col_offset=28)], [], None, None, lineno=196, col_offset=17), lineno=196, col_offset=4), If(BoolOp(And(), [Name('head', Load(), lineno=197, col_offset=7), Name('tail', Load(), lineno=197, col_offset=16), UnaryOp(Not(), Call(Attribute(Name('path', Load(), lineno=197, col_offset=29), 'exists', Load(), lineno=197, col_offset=29), [Name('head', Load(), lineno=197, col_offset=41)], [], None, None, lineno=197, col_offset=29), lineno=197, col_offset=25)], lineno=197, col_offset=7), [Expr(Call(Name('makedirs', Load(), lineno=198, col_offset=8), [Name('head', Load(), lineno=198, col_offset=17)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8)], [], lineno=197, col_offset=4), Expr(Call(Name('rename', Load(), lineno=199, col_offset=4), [Name('old', Load(), lineno=199, col_offset=11), Name('new', Load(), lineno=199, col_offset=16)], [], None, None, lineno=199, col_offset=4), lineno=199, col_offset=4), Assign([Tuple([Name('head', Store(), lineno=200, col_offset=4), Name('tail', Store(), lineno=200, col_offset=10)], Store(), lineno=200, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=200, col_offset=17), 'split', Load(), lineno=200, col_offset=17), [Name('old', Load(), lineno=200, col_offset=28)], [], None, None, lineno=200, col_offset=17), lineno=200, col_offset=4), If(BoolOp(And(), [Name('head', Load(), lineno=201, col_offset=7), Name('tail', Load(), lineno=201, col_offset=16)], lineno=201, col_offset=7), [TryExcept([Expr(Call(Name('removedirs', Load(), lineno=203, col_offset=12), [Name('head', Load(), lineno=203, col_offset=23)], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=12)], [ExceptHandler(Name('error', Load(), lineno=204, col_offset=15), None, [Pass( lineno=205, col_offset=12)], lineno=204, col_offset=8)], [], lineno=202, col_offset=8)], [], lineno=201, col_offset=4)], [], lineno=181, col_offset=0), Expr(Call(Attribute(Name('__all__', Load(), lineno=207, col_offset=0), 'extend', Load(), lineno=207, col_offset=0), [List([Str('makedirs', lineno=207, col_offset=16), Str('removedirs', lineno=207, col_offset=28), Str('renames', lineno=207, col_offset=42)], Load(), lineno=207, col_offset=15)], [], None, None, lineno=207, col_offset=0), lineno=207, col_offset=0), FunctionDef('walk', arguments([Name('top', Param(), lineno=209, col_offset=9), Name('topdown', Param(), lineno=209, col_offset=14), Name('onerror', Param(), lineno=209, col_offset=28), Name('followlinks', Param(), lineno=209, col_offset=42)], None, None, [Name('True', Load(), lineno=209, col_offset=22), Name('None', Load(), lineno=209, col_offset=36), Name('False', Load(), lineno=209, col_offset=54)]), [Expr(Str('Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune\n    the search, or to impose a specific order of visiting.  Modifying\n    dirnames when topdown is false is ineffective, since the directories in\n    dirnames have already been generated by the time dirnames itself is\n    generated.\n\n    By default errors from the os.listdir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an os.error instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument \'followlinks\' to true.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print root, "consumes",\n        print sum([getsize(join(root, name)) for name in files]),\n        print "bytes in", len(files), "non-directory files"\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n    ', lineno=264, col_offset=-1), lineno=264, col_offset=-1), Assign([Tuple([Name('islink', Store(), lineno=266, col_offset=4), Name('join', Store(), lineno=266, col_offset=12), Name('isdir', Store(), lineno=266, col_offset=18)], Store(), lineno=266, col_offset=4)], Tuple([Attribute(Name('path', Load(), lineno=266, col_offset=26), 'islink', Load(), lineno=266, col_offset=26), Attribute(Name('path', Load(), lineno=266, col_offset=39), 'join', Load(), lineno=266, col_offset=39), Attribute(Name('path', Load(), lineno=266, col_offset=50), 'isdir', Load(), lineno=266, col_offset=50)], Load(), lineno=266, col_offset=26), lineno=266, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=276, col_offset=8)], Call(Name('listdir', Load(), lineno=276, col_offset=16), [Name('top', Load(), lineno=276, col_offset=24)], [], None, None, lineno=276, col_offset=16), lineno=276, col_offset=8)], [ExceptHandler(Name('error', Load(), lineno=277, col_offset=11), Name('err', Store(), lineno=277, col_offset=18), [If(Compare(Name('onerror', Load(), lineno=278, col_offset=11), [IsNot()], [Name('None', Load(), lineno=278, col_offset=26)], lineno=278, col_offset=11), [Expr(Call(Name('onerror', Load(), lineno=279, col_offset=12), [Name('err', Load(), lineno=279, col_offset=20)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=12)], [], lineno=278, col_offset=8), Return(None, lineno=280, col_offset=8)], lineno=277, col_offset=4)], [], lineno=273, col_offset=4), Assign([Tuple([Name('dirs', Store(), lineno=282, col_offset=4), Name('nondirs', Store(), lineno=282, col_offset=10)], Store(), lineno=282, col_offset=4)], Tuple([List([], Load(), lineno=282, col_offset=20), List([], Load(), lineno=282, col_offset=24)], Load(), lineno=282, col_offset=20), lineno=282, col_offset=4), For(Name('name', Store(), lineno=283, col_offset=8), Name('names', Load(), lineno=283, col_offset=16), [If(Call(Name('isdir', Load(), lineno=284, col_offset=11), [Call(Name('join', Load(), lineno=284, col_offset=17), [Name('top', Load(), lineno=284, col_offset=22), Name('name', Load(), lineno=284, col_offset=27)], [], None, None, lineno=284, col_offset=17)], [], None, None, lineno=284, col_offset=11), [Expr(Call(Attribute(Name('dirs', Load(), lineno=285, col_offset=12), 'append', Load(), lineno=285, col_offset=12), [Name('name', Load(), lineno=285, col_offset=24)], [], None, None, lineno=285, col_offset=12), lineno=285, col_offset=12)], [Expr(Call(Attribute(Name('nondirs', Load(), lineno=287, col_offset=12), 'append', Load(), lineno=287, col_offset=12), [Name('name', Load(), lineno=287, col_offset=27)], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=12)], lineno=284, col_offset=8)], [], lineno=283, col_offset=4), If(Name('topdown', Load(), lineno=289, col_offset=7), [Expr(Yield(Tuple([Name('top', Load(), lineno=290, col_offset=14), Name('dirs', Load(), lineno=290, col_offset=19), Name('nondirs', Load(), lineno=290, col_offset=25)], Load(), lineno=290, col_offset=14), lineno=290, col_offset=8), lineno=290, col_offset=8)], [], lineno=289, col_offset=4), For(Name('name', Store(), lineno=291, col_offset=8), Name('dirs', Load(), lineno=291, col_offset=16), [Assign([Name('new_path', Store(), lineno=292, col_offset=8)], Call(Name('join', Load(), lineno=292, col_offset=19), [Name('top', Load(), lineno=292, col_offset=24), Name('name', Load(), lineno=292, col_offset=29)], [], None, None, lineno=292, col_offset=19), lineno=292, col_offset=8), If(BoolOp(Or(), [Name('followlinks', Load(), lineno=293, col_offset=11), UnaryOp(Not(), Call(Name('islink', Load(), lineno=293, col_offset=30), [Name('new_path', Load(), lineno=293, col_offset=37)], [], None, None, lineno=293, col_offset=30), lineno=293, col_offset=26)], lineno=293, col_offset=11), [For(Name('x', Store(), lineno=294, col_offset=16), Call(Name('walk', Load(), lineno=294, col_offset=21), [Name('new_path', Load(), lineno=294, col_offset=26), Name('topdown', Load(), lineno=294, col_offset=36), Name('onerror', Load(), lineno=294, col_offset=45), Name('followlinks', Load(), lineno=294, col_offset=54)], [], None, None, lineno=294, col_offset=21), [Expr(Yield(Name('x', Load(), lineno=295, col_offset=22), lineno=295, col_offset=16), lineno=295, col_offset=16)], [], lineno=294, col_offset=12)], [], lineno=293, col_offset=8)], [], lineno=291, col_offset=4), If(UnaryOp(Not(), Name('topdown', Load(), lineno=296, col_offset=11), lineno=296, col_offset=7), [Expr(Yield(Tuple([Name('top', Load(), lineno=297, col_offset=14), Name('dirs', Load(), lineno=297, col_offset=19), Name('nondirs', Load(), lineno=297, col_offset=25)], Load(), lineno=297, col_offset=14), lineno=297, col_offset=8), lineno=297, col_offset=8)], [], lineno=296, col_offset=4)], [], lineno=209, col_offset=0), Expr(Call(Attribute(Name('__all__', Load(), lineno=299, col_offset=0), 'append', Load(), lineno=299, col_offset=0), [Str('walk', lineno=299, col_offset=15)], [], None, None, lineno=299, col_offset=0), lineno=299, col_offset=0), TryExcept([Expr(Name('environ', Load(), lineno=303, col_offset=4), lineno=303, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=304, col_offset=7), None, [Assign([Name('environ', Store(), lineno=305, col_offset=4)], Dict([], [], lineno=305, col_offset=14), lineno=305, col_offset=4)], lineno=304, col_offset=0)], [], lineno=302, col_offset=0), FunctionDef('execl', arguments([Name('file', Param(), lineno=307, col_offset=10)], 'args', None, []), [Expr(Str('execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. ', lineno=311, col_offset=-1), lineno=311, col_offset=-1), Expr(Call(Name('execv', Load(), lineno=312, col_offset=4), [Name('file', Load(), lineno=312, col_offset=10), Name('args', Load(), lineno=312, col_offset=16)], [], None, None, lineno=312, col_offset=4), lineno=312, col_offset=4)], [], lineno=307, col_offset=0), FunctionDef('execle', arguments([Name('file', Param(), lineno=314, col_offset=11)], 'args', None, []), [Expr(Str('execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. ', lineno=318, col_offset=-1), lineno=318, col_offset=-1), Assign([Name('env', Store(), lineno=319, col_offset=4)], Subscript(Name('args', Load(), lineno=319, col_offset=10), Index(Num(-1, lineno=319, col_offset=16)), Load(), lineno=319, col_offset=10), lineno=319, col_offset=4), Expr(Call(Name('execve', Load(), lineno=320, col_offset=4), [Name('file', Load(), lineno=320, col_offset=11), Subscript(Name('args', Load(), lineno=320, col_offset=17), Slice(None, Num(-1, lineno=320, col_offset=24), None), Load(), lineno=320, col_offset=17), Name('env', Load(), lineno=320, col_offset=28)], [], None, None, lineno=320, col_offset=4), lineno=320, col_offset=4)], [], lineno=314, col_offset=0), FunctionDef('execlp', arguments([Name('file', Param(), lineno=322, col_offset=11)], 'args', None, []), [Expr(Str('execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. ', lineno=326, col_offset=-1), lineno=326, col_offset=-1), Expr(Call(Name('execvp', Load(), lineno=327, col_offset=4), [Name('file', Load(), lineno=327, col_offset=11), Name('args', Load(), lineno=327, col_offset=17)], [], None, None, lineno=327, col_offset=4), lineno=327, col_offset=4)], [], lineno=322, col_offset=0), FunctionDef('execlpe', arguments([Name('file', Param(), lineno=329, col_offset=12)], 'args', None, []), [Expr(Str('execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. ', lineno=334, col_offset=-1), lineno=334, col_offset=-1), Assign([Name('env', Store(), lineno=335, col_offset=4)], Subscript(Name('args', Load(), lineno=335, col_offset=10), Index(Num(-1, lineno=335, col_offset=16)), Load(), lineno=335, col_offset=10), lineno=335, col_offset=4), Expr(Call(Name('execvpe', Load(), lineno=336, col_offset=4), [Name('file', Load(), lineno=336, col_offset=12), Subscript(Name('args', Load(), lineno=336, col_offset=18), Slice(None, Num(-1, lineno=336, col_offset=25), None), Load(), lineno=336, col_offset=18), Name('env', Load(), lineno=336, col_offset=29)], [], None, None, lineno=336, col_offset=4), lineno=336, col_offset=4)], [], lineno=329, col_offset=0), FunctionDef('execvp', arguments([Name('file', Param(), lineno=338, col_offset=11), Name('args', Param(), lineno=338, col_offset=17)], None, None, []), [Expr(Str('execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. ', lineno=343, col_offset=-1), lineno=343, col_offset=-1), Expr(Call(Name('_execvpe', Load(), lineno=344, col_offset=4), [Name('file', Load(), lineno=344, col_offset=13), Name('args', Load(), lineno=344, col_offset=19)], [], None, None, lineno=344, col_offset=4), lineno=344, col_offset=4)], [], lineno=338, col_offset=0), FunctionDef('execvpe', arguments([Name('file', Param(), lineno=346, col_offset=12), Name('args', Param(), lineno=346, col_offset=18), Name('env', Param(), lineno=346, col_offset=24)], None, None, []), [Expr(Str('execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. ', lineno=352, col_offset=-1), lineno=352, col_offset=-1), Expr(Call(Name('_execvpe', Load(), lineno=353, col_offset=4), [Name('file', Load(), lineno=353, col_offset=13), Name('args', Load(), lineno=353, col_offset=19), Name('env', Load(), lineno=353, col_offset=25)], [], None, None, lineno=353, col_offset=4), lineno=353, col_offset=4)], [], lineno=346, col_offset=0), Expr(Call(Attribute(Name('__all__', Load(), lineno=355, col_offset=0), 'extend', Load(), lineno=355, col_offset=0), [List([Str('execl', lineno=355, col_offset=16), Str('execle', lineno=355, col_offset=24), Str('execlp', lineno=355, col_offset=33), Str('execlpe', lineno=355, col_offset=42), Str('execvp', lineno=355, col_offset=52), Str('execvpe', lineno=355, col_offset=61)], Load(), lineno=355, col_offset=15)], [], None, None, lineno=355, col_offset=0), lineno=355, col_offset=0), FunctionDef('_execvpe', arguments([Name('file', Param(), lineno=357, col_offset=13), Name('args', Param(), lineno=357, col_offset=19), Name('env', Param(), lineno=357, col_offset=25)], None, None, [Name('None', Load(), lineno=357, col_offset=29)]), [If(Compare(Name('env', Load(), lineno=358, col_offset=7), [IsNot()], [Name('None', Load(), lineno=358, col_offset=18)], lineno=358, col_offset=7), [Assign([Name('func', Store(), lineno=359, col_offset=8)], Name('execve', Load(), lineno=359, col_offset=15), lineno=359, col_offset=8), Assign([Name('argrest', Store(), lineno=360, col_offset=8)], Tuple([Name('args', Load(), lineno=360, col_offset=19), Name('env', Load(), lineno=360, col_offset=25)], Load(), lineno=360, col_offset=19), lineno=360, col_offset=8)], [Assign([Name('func', Store(), lineno=362, col_offset=8)], Name('execv', Load(), lineno=362, col_offset=15), lineno=362, col_offset=8), Assign([Name('argrest', Store(), lineno=363, col_offset=8)], Tuple([Name('args', Load(), lineno=363, col_offset=19)], Load(), lineno=363, col_offset=19), lineno=363, col_offset=8), Assign([Name('env', Store(), lineno=364, col_offset=8)], Name('environ', Load(), lineno=364, col_offset=14), lineno=364, col_offset=8)], lineno=358, col_offset=4), Assign([Tuple([Name('head', Store(), lineno=366, col_offset=4), Name('tail', Store(), lineno=366, col_offset=10)], Store(), lineno=366, col_offset=4)], Call(Attribute(Name('path', Load(), lineno=366, col_offset=17), 'split', Load(), lineno=366, col_offset=17), [Name('file', Load(), lineno=366, col_offset=28)], [], None, None, lineno=366, col_offset=17), lineno=366, col_offset=4), If(Name('head', Load(), lineno=367, col_offset=7), [Expr(Call(Name('func', Load(), lineno=368, col_offset=8), [Name('file', Load(), lineno=368, col_offset=13)], [], Name('argrest', Load(), lineno=368, col_offset=20), None, lineno=368, col_offset=8), lineno=368, col_offset=8), Return(None, lineno=369, col_offset=8)], [], lineno=367, col_offset=4), If(Compare(Str('PATH', lineno=370, col_offset=7), [In()], [Name('env', Load(), lineno=370, col_offset=17)], lineno=370, col_offset=7), [Assign([Name('envpath', Store(), lineno=371, col_offset=8)], Subscript(Name('env', Load(), lineno=371, col_offset=18), Index(Str('PATH', lineno=371, col_offset=22)), Load(), lineno=371, col_offset=18), lineno=371, col_offset=8)], [Assign([Name('envpath', Store(), lineno=373, col_offset=8)], Name('defpath', Load(), lineno=373, col_offset=18), lineno=373, col_offset=8)], lineno=370, col_offset=4), Assign([Name('PATH', Store(), lineno=374, col_offset=4)], Call(Attribute(Name('envpath', Load(), lineno=374, col_offset=11), 'split', Load(), lineno=374, col_offset=11), [Name('pathsep', Load(), lineno=374, col_offset=25)], [], None, None, lineno=374, col_offset=11), lineno=374, col_offset=4), Assign([Name('saved_exc', Store(), lineno=375, col_offset=4)], Name('None', Load(), lineno=375, col_offset=16), lineno=375, col_offset=4), Assign([Name('saved_tb', Store(), lineno=376, col_offset=4)], Name('None', Load(), lineno=376, col_offset=15), lineno=376, col_offset=4), For(Name('dir', Store(), lineno=377, col_offset=8), Name('PATH', Load(), lineno=377, col_offset=15), [Assign([Name('fullname', Store(), lineno=378, col_offset=8)], Call(Attribute(Name('path', Load(), lineno=378, col_offset=19), 'join', Load(), lineno=378, col_offset=19), [Name('dir', Load(), lineno=378, col_offset=29), Name('file', Load(), lineno=378, col_offset=34)], [], None, None, lineno=378, col_offset=19), lineno=378, col_offset=8), TryExcept([Expr(Call(Name('func', Load(), lineno=380, col_offset=12), [Name('fullname', Load(), lineno=380, col_offset=17)], [], Name('argrest', Load(), lineno=380, col_offset=28), None, lineno=380, col_offset=12), lineno=380, col_offset=12)], [ExceptHandler(Name('error', Load(), lineno=381, col_offset=15), Name('e', Store(), lineno=381, col_offset=22), [Assign([Name('tb', Store(), lineno=382, col_offset=12)], Subscript(Call(Attribute(Name('sys', Load(), lineno=382, col_offset=17), 'exc_info', Load(), lineno=382, col_offset=17), [], [], None, None, lineno=382, col_offset=17), Index(Num(2, lineno=382, col_offset=32)), Load(), lineno=382, col_offset=17), lineno=382, col_offset=12), If(BoolOp(And(), [Compare(Attribute(Name('e', Load(), lineno=383, col_offset=16), 'errno', Load(), lineno=383, col_offset=16), [NotEq()], [Attribute(Name('errno', Load(), lineno=383, col_offset=27), 'ENOENT', Load(), lineno=383, col_offset=27)], lineno=383, col_offset=16), Compare(Attribute(Name('e', Load(), lineno=383, col_offset=44), 'errno', Load(), lineno=383, col_offset=44), [NotEq()], [Attribute(Name('errno', Load(), lineno=383, col_offset=55), 'ENOTDIR', Load(), lineno=383, col_offset=55)], lineno=383, col_offset=44), Compare(Name('saved_exc', Load(), lineno=384, col_offset=20), [Is()], [Name('None', Load(), lineno=384, col_offset=33)], lineno=384, col_offset=20)], lineno=383, col_offset=16), [Assign([Name('saved_exc', Store(), lineno=385, col_offset=16)], Name('e', Load(), lineno=385, col_offset=28), lineno=385, col_offset=16), Assign([Name('saved_tb', Store(), lineno=386, col_offset=16)], Name('tb', Load(), lineno=386, col_offset=27), lineno=386, col_offset=16)], [], lineno=383, col_offset=12)], lineno=381, col_offset=8)], [], lineno=379, col_offset=8)], [], lineno=377, col_offset=4), If(Name('saved_exc', Load(), lineno=387, col_offset=7), [Raise(Name('error', Load(), lineno=388, col_offset=14), Name('saved_exc', Load(), lineno=388, col_offset=21), Name('saved_tb', Load(), lineno=388, col_offset=32), lineno=388, col_offset=8)], [], lineno=387, col_offset=4), Raise(Name('error', Load(), lineno=389, col_offset=10), Name('e', Load(), lineno=389, col_offset=17), Name('tb', Load(), lineno=389, col_offset=20), lineno=389, col_offset=4)], [], lineno=357, col_offset=0), TryExcept([Expr(Name('putenv', Load(), lineno=394, col_offset=4), lineno=394, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=395, col_offset=7), None, [Pass( lineno=396, col_offset=4)], lineno=395, col_offset=0)], [Import([alias('UserDict', None)], lineno=398, col_offset=4), If(Compare(Name('name', Load(), lineno=404, col_offset=7), [In()], [Tuple([Str('os2', lineno=404, col_offset=16), Str('nt', lineno=404, col_offset=23)], Load(), lineno=404, col_offset=16)], lineno=404, col_offset=7), [FunctionDef('unsetenv', arguments([Name('key', Param(), lineno=405, col_offset=21)], None, None, []), [Expr(Call(Name('putenv', Load(), lineno=406, col_offset=12), [Name('key', Load(), lineno=406, col_offset=19), Str('', lineno=406, col_offset=24)], [], None, None, lineno=406, col_offset=12), lineno=406, col_offset=12)], [], lineno=405, col_offset=8)], [], lineno=404, col_offset=4), If(Compare(Name('name', Load(), lineno=408, col_offset=7), [Eq()], [Str('riscos', lineno=408, col_offset=15)], lineno=408, col_offset=7), [ImportFrom('riscosenviron', [alias('_Environ', None)], 0, lineno=410, col_offset=8)], [If(Compare(Name('name', Load(), lineno=411, col_offset=9), [In()], [Tuple([Str('os2', lineno=411, col_offset=18), Str('nt', lineno=411, col_offset=25)], Load(), lineno=411, col_offset=18)], lineno=411, col_offset=9), [ClassDef('_Environ', [Attribute(Name('UserDict', Load(), lineno=413, col_offset=23), 'IterableUserDict', Load(), lineno=413, col_offset=23)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=414, col_offset=25), Name('environ', Param(), lineno=414, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('UserDict', Load(), lineno=415, col_offset=16), 'UserDict', Load(), lineno=415, col_offset=16), '__init__', Load(), lineno=415, col_offset=16), [Name('self', Load(), lineno=415, col_offset=43)], [], None, None, lineno=415, col_offset=16), lineno=415, col_offset=16), Assign([Name('data', Store(), lineno=416, col_offset=16)], Attribute(Name('self', Load(), lineno=416, col_offset=23), 'data', Load(), lineno=416, col_offset=23), lineno=416, col_offset=16), For(Tuple([Name('k', Store(), lineno=417, col_offset=20), Name('v', Store(), lineno=417, col_offset=23)], Store(), lineno=417, col_offset=20), Call(Attribute(Name('environ', Load(), lineno=417, col_offset=28), 'items', Load(), lineno=417, col_offset=28), [], [], None, None, lineno=417, col_offset=28), [Assign([Subscript(Name('data', Load(), lineno=418, col_offset=20), Index(Call(Attribute(Name('k', Load(), lineno=418, col_offset=25), 'upper', Load(), lineno=418, col_offset=25), [], [], None, None, lineno=418, col_offset=25)), Store(), lineno=418, col_offset=20)], Name('v', Load(), lineno=418, col_offset=38), lineno=418, col_offset=20)], [], lineno=417, col_offset=16)], [], lineno=414, col_offset=12), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=419, col_offset=28), Name('key', Param(), lineno=419, col_offset=34), Name('item', Param(), lineno=419, col_offset=39)], None, None, []), [Expr(Call(Name('putenv', Load(), lineno=420, col_offset=16), [Name('key', Load(), lineno=420, col_offset=23), Name('item', Load(), lineno=420, col_offset=28)], [], None, None, lineno=420, col_offset=16), lineno=420, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=421, col_offset=16), 'data', Load(), lineno=421, col_offset=16), Index(Call(Attribute(Name('key', Load(), lineno=421, col_offset=26), 'upper', Load(), lineno=421, col_offset=26), [], [], None, None, lineno=421, col_offset=26)), Store(), lineno=421, col_offset=16)], Name('item', Load(), lineno=421, col_offset=41), lineno=421, col_offset=16)], [], lineno=419, col_offset=12), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=422, col_offset=28), Name('key', Param(), lineno=422, col_offset=34)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=423, col_offset=23), 'data', Load(), lineno=423, col_offset=23), Index(Call(Attribute(Name('key', Load(), lineno=423, col_offset=33), 'upper', Load(), lineno=423, col_offset=33), [], [], None, None, lineno=423, col_offset=33)), Load(), lineno=423, col_offset=23), lineno=423, col_offset=16)], [], lineno=422, col_offset=12), TryExcept([Expr(Name('unsetenv', Load(), lineno=425, col_offset=16), lineno=425, col_offset=16)], [ExceptHandler(Name('NameError', Load(), lineno=426, col_offset=19), None, [FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=427, col_offset=32), Name('key', Param(), lineno=427, col_offset=38)], None, None, []), [Delete([Subscript(Attribute(Name('self', Load(), lineno=428, col_offset=24), 'data', Load(), lineno=428, col_offset=24), Index(Call(Attribute(Name('key', Load(), lineno=428, col_offset=34), 'upper', Load(), lineno=428, col_offset=34), [], [], None, None, lineno=428, col_offset=34)), Del(), lineno=428, col_offset=24)], lineno=428, col_offset=20)], [], lineno=427, col_offset=16)], lineno=426, col_offset=12)], [FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=430, col_offset=32), Name('key', Param(), lineno=430, col_offset=38)], None, None, []), [Expr(Call(Name('unsetenv', Load(), lineno=431, col_offset=20), [Name('key', Load(), lineno=431, col_offset=29)], [], None, None, lineno=431, col_offset=20), lineno=431, col_offset=20), Delete([Subscript(Attribute(Name('self', Load(), lineno=432, col_offset=24), 'data', Load(), lineno=432, col_offset=24), Index(Call(Attribute(Name('key', Load(), lineno=432, col_offset=34), 'upper', Load(), lineno=432, col_offset=34), [], [], None, None, lineno=432, col_offset=34)), Del(), lineno=432, col_offset=24)], lineno=432, col_offset=20)], [], lineno=430, col_offset=16), FunctionDef('clear', arguments([Name('self', Param(), lineno=433, col_offset=26)], None, None, []), [For(Name('key', Store(), lineno=434, col_offset=24), Call(Attribute(Attribute(Name('self', Load(), lineno=434, col_offset=31), 'data', Load(), lineno=434, col_offset=31), 'keys', Load(), lineno=434, col_offset=31), [], [], None, None, lineno=434, col_offset=31), [Expr(Call(Name('unsetenv', Load(), lineno=435, col_offset=24), [Name('key', Load(), lineno=435, col_offset=33)], [], None, None, lineno=435, col_offset=24), lineno=435, col_offset=24), Delete([Subscript(Attribute(Name('self', Load(), lineno=436, col_offset=28), 'data', Load(), lineno=436, col_offset=28), Index(Name('key', Load(), lineno=436, col_offset=38)), Del(), lineno=436, col_offset=28)], lineno=436, col_offset=24)], [], lineno=434, col_offset=20)], [], lineno=433, col_offset=16), FunctionDef('pop', arguments([Name('self', Param(), lineno=437, col_offset=24), Name('key', Param(), lineno=437, col_offset=30)], 'args', None, []), [Expr(Call(Name('unsetenv', Load(), lineno=438, col_offset=20), [Name('key', Load(), lineno=438, col_offset=29)], [], None, None, lineno=438, col_offset=20), lineno=438, col_offset=20), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=439, col_offset=27), 'data', Load(), lineno=439, col_offset=27), 'pop', Load(), lineno=439, col_offset=27), [Call(Attribute(Name('key', Load(), lineno=439, col_offset=41), 'upper', Load(), lineno=439, col_offset=41), [], [], None, None, lineno=439, col_offset=41)], [], Name('args', Load(), lineno=439, col_offset=55), None, lineno=439, col_offset=27), lineno=439, col_offset=20)], [], lineno=437, col_offset=16)], lineno=424, col_offset=12), FunctionDef('has_key', arguments([Name('self', Param(), lineno=440, col_offset=24), Name('key', Param(), lineno=440, col_offset=30)], None, None, []), [Return(Compare(Call(Attribute(Name('key', Load(), lineno=441, col_offset=23), 'upper', Load(), lineno=441, col_offset=23), [], [], None, None, lineno=441, col_offset=23), [In()], [Attribute(Name('self', Load(), lineno=441, col_offset=38), 'data', Load(), lineno=441, col_offset=38)], lineno=441, col_offset=23), lineno=441, col_offset=16)], [], lineno=440, col_offset=12), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=442, col_offset=29), Name('key', Param(), lineno=442, col_offset=35)], None, None, []), [Return(Compare(Call(Attribute(Name('key', Load(), lineno=443, col_offset=23), 'upper', Load(), lineno=443, col_offset=23), [], [], None, None, lineno=443, col_offset=23), [In()], [Attribute(Name('self', Load(), lineno=443, col_offset=38), 'data', Load(), lineno=443, col_offset=38)], lineno=443, col_offset=23), lineno=443, col_offset=16)], [], lineno=442, col_offset=12), FunctionDef('get', arguments([Name('self', Param(), lineno=444, col_offset=20), Name('key', Param(), lineno=444, col_offset=26), Name('failobj', Param(), lineno=444, col_offset=31)], None, None, [Name('None', Load(), lineno=444, col_offset=39)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=445, col_offset=23), 'data', Load(), lineno=445, col_offset=23), 'get', Load(), lineno=445, col_offset=23), [Call(Attribute(Name('key', Load(), lineno=445, col_offset=37), 'upper', Load(), lineno=445, col_offset=37), [], [], None, None, lineno=445, col_offset=37), Name('failobj', Load(), lineno=445, col_offset=50)], [], None, None, lineno=445, col_offset=23), lineno=445, col_offset=16)], [], lineno=444, col_offset=12), FunctionDef('update', arguments([Name('self', Param(), lineno=446, col_offset=23), Name('dict', Param(), lineno=446, col_offset=29)], None, 'kwargs', [Name('None', Load(), lineno=446, col_offset=34)]), [If(Name('dict', Load(), lineno=447, col_offset=19), [TryExcept([Assign([Name('keys', Store(), lineno=449, col_offset=24)], Call(Attribute(Name('dict', Load(), lineno=449, col_offset=31), 'keys', Load(), lineno=449, col_offset=31), [], [], None, None, lineno=449, col_offset=31), lineno=449, col_offset=24)], [ExceptHandler(Name('AttributeError', Load(), lineno=450, col_offset=27), None, [For(Tuple([Name('k', Store(), lineno=452, col_offset=28), Name('v', Store(), lineno=452, col_offset=31)], Store(), lineno=452, col_offset=28), Name('dict', Load(), lineno=452, col_offset=36), [Assign([Subscript(Name('self', Load(), lineno=453, col_offset=28), Index(Name('k', Load(), lineno=453, col_offset=33)), Store(), lineno=453, col_offset=28)], Name('v', Load(), lineno=453, col_offset=38), lineno=453, col_offset=28)], [], lineno=452, col_offset=24)], lineno=450, col_offset=20)], [For(Name('k', Store(), lineno=458, col_offset=28), Name('keys', Load(), lineno=458, col_offset=33), [Assign([Subscript(Name('self', Load(), lineno=459, col_offset=28), Index(Name('k', Load(), lineno=459, col_offset=33)), Store(), lineno=459, col_offset=28)], Subscript(Name('dict', Load(), lineno=459, col_offset=38), Index(Name('k', Load(), lineno=459, col_offset=43)), Load(), lineno=459, col_offset=38), lineno=459, col_offset=28)], [], lineno=458, col_offset=24)], lineno=448, col_offset=20)], [], lineno=447, col_offset=16), If(Name('kwargs', Load(), lineno=460, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=461, col_offset=20), 'update', Load(), lineno=461, col_offset=20), [Name('kwargs', Load(), lineno=461, col_offset=32)], [], None, None, lineno=461, col_offset=20), lineno=461, col_offset=20)], [], lineno=460, col_offset=16)], [], lineno=446, col_offset=12), FunctionDef('copy', arguments([Name('self', Param(), lineno=462, col_offset=21)], None, None, []), [Return(Call(Name('dict', Load(), lineno=463, col_offset=23), [Name('self', Load(), lineno=463, col_offset=28)], [], None, None, lineno=463, col_offset=23), lineno=463, col_offset=16)], [], lineno=462, col_offset=12)], [], lineno=413, col_offset=8)], [ClassDef('_Environ', [Attribute(Name('UserDict', Load(), lineno=466, col_offset=23), 'IterableUserDict', Load(), lineno=466, col_offset=23)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=467, col_offset=25), Name('environ', Param(), lineno=467, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('UserDict', Load(), lineno=468, col_offset=16), 'UserDict', Load(), lineno=468, col_offset=16), '__init__', Load(), lineno=468, col_offset=16), [Name('self', Load(), lineno=468, col_offset=43)], [], None, None, lineno=468, col_offset=16), lineno=468, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=469, col_offset=16), 'data', Store(), lineno=469, col_offset=16)], Name('environ', Load(), lineno=469, col_offset=28), lineno=469, col_offset=16)], [], lineno=467, col_offset=12), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=470, col_offset=28), Name('key', Param(), lineno=470, col_offset=34), Name('item', Param(), lineno=470, col_offset=39)], None, None, []), [Expr(Call(Name('putenv', Load(), lineno=471, col_offset=16), [Name('key', Load(), lineno=471, col_offset=23), Name('item', Load(), lineno=471, col_offset=28)], [], None, None, lineno=471, col_offset=16), lineno=471, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=472, col_offset=16), 'data', Load(), lineno=472, col_offset=16), Index(Name('key', Load(), lineno=472, col_offset=26)), Store(), lineno=472, col_offset=16)], Name('item', Load(), lineno=472, col_offset=33), lineno=472, col_offset=16)], [], lineno=470, col_offset=12), FunctionDef('update', arguments([Name('self', Param(), lineno=473, col_offset=23), Name('dict', Param(), lineno=473, col_offset=30)], None, 'kwargs', [Name('None', Load(), lineno=473, col_offset=35)]), [If(Name('dict', Load(), lineno=474, col_offset=19), [TryExcept([Assign([Name('keys', Store(), lineno=476, col_offset=24)], Call(Attribute(Name('dict', Load(), lineno=476, col_offset=31), 'keys', Load(), lineno=476, col_offset=31), [], [], None, None, lineno=476, col_offset=31), lineno=476, col_offset=24)], [ExceptHandler(Name('AttributeError', Load(), lineno=477, col_offset=27), None, [For(Tuple([Name('k', Store(), lineno=479, col_offset=28), Name('v', Store(), lineno=479, col_offset=31)], Store(), lineno=479, col_offset=28), Name('dict', Load(), lineno=479, col_offset=36), [Assign([Subscript(Name('self', Load(), lineno=480, col_offset=28), Index(Name('k', Load(), lineno=480, col_offset=33)), Store(), lineno=480, col_offset=28)], Name('v', Load(), lineno=480, col_offset=38), lineno=480, col_offset=28)], [], lineno=479, col_offset=24)], lineno=477, col_offset=20)], [For(Name('k', Store(), lineno=485, col_offset=28), Name('keys', Load(), lineno=485, col_offset=33), [Assign([Subscript(Name('self', Load(), lineno=486, col_offset=28), Index(Name('k', Load(), lineno=486, col_offset=33)), Store(), lineno=486, col_offset=28)], Subscript(Name('dict', Load(), lineno=486, col_offset=38), Index(Name('k', Load(), lineno=486, col_offset=43)), Load(), lineno=486, col_offset=38), lineno=486, col_offset=28)], [], lineno=485, col_offset=24)], lineno=475, col_offset=20)], [], lineno=474, col_offset=16), If(Name('kwargs', Load(), lineno=487, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=488, col_offset=20), 'update', Load(), lineno=488, col_offset=20), [Name('kwargs', Load(), lineno=488, col_offset=32)], [], None, None, lineno=488, col_offset=20), lineno=488, col_offset=20)], [], lineno=487, col_offset=16)], [], lineno=473, col_offset=12), TryExcept([Expr(Name('unsetenv', Load(), lineno=490, col_offset=16), lineno=490, col_offset=16)], [ExceptHandler(Name('NameError', Load(), lineno=491, col_offset=19), None, [Pass( lineno=492, col_offset=16)], lineno=491, col_offset=12)], [FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=494, col_offset=32), Name('key', Param(), lineno=494, col_offset=38)], None, None, []), [Expr(Call(Name('unsetenv', Load(), lineno=495, col_offset=20), [Name('key', Load(), lineno=495, col_offset=29)], [], None, None, lineno=495, col_offset=20), lineno=495, col_offset=20), Delete([Subscript(Attribute(Name('self', Load(), lineno=496, col_offset=24), 'data', Load(), lineno=496, col_offset=24), Index(Name('key', Load(), lineno=496, col_offset=34)), Del(), lineno=496, col_offset=24)], lineno=496, col_offset=20)], [], lineno=494, col_offset=16), FunctionDef('clear', arguments([Name('self', Param(), lineno=497, col_offset=26)], None, None, []), [For(Name('key', Store(), lineno=498, col_offset=24), Call(Attribute(Attribute(Name('self', Load(), lineno=498, col_offset=31), 'data', Load(), lineno=498, col_offset=31), 'keys', Load(), lineno=498, col_offset=31), [], [], None, None, lineno=498, col_offset=31), [Expr(Call(Name('unsetenv', Load(), lineno=499, col_offset=24), [Name('key', Load(), lineno=499, col_offset=33)], [], None, None, lineno=499, col_offset=24), lineno=499, col_offset=24), Delete([Subscript(Attribute(Name('self', Load(), lineno=500, col_offset=28), 'data', Load(), lineno=500, col_offset=28), Index(Name('key', Load(), lineno=500, col_offset=38)), Del(), lineno=500, col_offset=28)], lineno=500, col_offset=24)], [], lineno=498, col_offset=20)], [], lineno=497, col_offset=16), FunctionDef('pop', arguments([Name('self', Param(), lineno=501, col_offset=24), Name('key', Param(), lineno=501, col_offset=30)], 'args', None, []), [Expr(Call(Name('unsetenv', Load(), lineno=502, col_offset=20), [Name('key', Load(), lineno=502, col_offset=29)], [], None, None, lineno=502, col_offset=20), lineno=502, col_offset=20), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=503, col_offset=27), 'data', Load(), lineno=503, col_offset=27), 'pop', Load(), lineno=503, col_offset=27), [Name('key', Load(), lineno=503, col_offset=41)], [], Name('args', Load(), lineno=503, col_offset=47), None, lineno=503, col_offset=27), lineno=503, col_offset=20)], [], lineno=501, col_offset=16)], lineno=489, col_offset=12), FunctionDef('copy', arguments([Name('self', Param(), lineno=504, col_offset=21)], None, None, []), [Return(Call(Name('dict', Load(), lineno=505, col_offset=23), [Name('self', Load(), lineno=505, col_offset=28)], [], None, None, lineno=505, col_offset=23), lineno=505, col_offset=16)], [], lineno=504, col_offset=12)], [], lineno=466, col_offset=8)], lineno=411, col_offset=9)], lineno=408, col_offset=4), Assign([Name('environ', Store(), lineno=508, col_offset=4)], Call(Name('_Environ', Load(), lineno=508, col_offset=14), [Name('environ', Load(), lineno=508, col_offset=23)], [], None, None, lineno=508, col_offset=14), lineno=508, col_offset=4)], lineno=392, col_offset=0), FunctionDef('getenv', arguments([Name('key', Param(), lineno=510, col_offset=11), Name('default', Param(), lineno=510, col_offset=16)], None, None, [Name('None', Load(), lineno=510, col_offset=24)]), [Expr(Str("Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.", lineno=512, col_offset=-1), lineno=512, col_offset=-1), Return(Call(Attribute(Name('environ', Load(), lineno=513, col_offset=11), 'get', Load(), lineno=513, col_offset=11), [Name('key', Load(), lineno=513, col_offset=23), Name('default', Load(), lineno=513, col_offset=28)], [], None, None, lineno=513, col_offset=11), lineno=513, col_offset=4)], [], lineno=510, col_offset=0), Expr(Call(Attribute(Name('__all__', Load(), lineno=514, col_offset=0), 'append', Load(), lineno=514, col_offset=0), [Str('getenv', lineno=514, col_offset=15)], [], None, None, lineno=514, col_offset=0), lineno=514, col_offset=0), FunctionDef('_exists', arguments([Name('name', Param(), lineno=516, col_offset=12)], None, None, []), [Return(Compare(Name('name', Load(), lineno=517, col_offset=11), [In()], [Call(Name('globals', Load(), lineno=517, col_offset=19), [], [], None, None, lineno=517, col_offset=19)], lineno=517, col_offset=11), lineno=517, col_offset=4)], [], lineno=516, col_offset=0), If(BoolOp(And(), [Call(Name('_exists', Load(), lineno=520, col_offset=3), [Str('fork', lineno=520, col_offset=11)], [], None, None, lineno=520, col_offset=3), UnaryOp(Not(), Call(Name('_exists', Load(), lineno=520, col_offset=27), [Str('spawnv', lineno=520, col_offset=35)], [], None, None, lineno=520, col_offset=27), lineno=520, col_offset=23), Call(Name('_exists', Load(), lineno=520, col_offset=49), [Str('execv', lineno=520, col_offset=57)], [], None, None, lineno=520, col_offset=49)], lineno=520, col_offset=3), [Assign([Name('P_WAIT', Store(), lineno=522, col_offset=4)], Num(0, lineno=522, col_offset=13), lineno=522, col_offset=4), Assign([Name('P_NOWAIT', Store(), lineno=523, col_offset=4), Name('P_NOWAITO', Store(), lineno=523, col_offset=15)], Num(1, lineno=523, col_offset=27), lineno=523, col_offset=4), FunctionDef('_spawnvef', arguments([Name('mode', Param(), lineno=529, col_offset=18), Name('file', Param(), lineno=529, col_offset=24), Name('args', Param(), lineno=529, col_offset=30), Name('env', Param(), lineno=529, col_offset=36), Name('func', Param(), lineno=529, col_offset=41)], None, None, []), [Assign([Name('pid', Store(), lineno=531, col_offset=8)], Call(Name('fork', Load(), lineno=531, col_offset=14), [], [], None, None, lineno=531, col_offset=14), lineno=531, col_offset=8), If(UnaryOp(Not(), Name('pid', Load(), lineno=532, col_offset=15), lineno=532, col_offset=11), [TryExcept([If(Compare(Name('env', Load(), lineno=535, col_offset=19), [Is()], [Name('None', Load(), lineno=535, col_offset=26)], lineno=535, col_offset=19), [Expr(Call(Name('func', Load(), lineno=536, col_offset=20), [Name('file', Load(), lineno=536, col_offset=25), Name('args', Load(), lineno=536, col_offset=31)], [], None, None, lineno=536, col_offset=20), lineno=536, col_offset=20)], [Expr(Call(Name('func', Load(), lineno=538, col_offset=20), [Name('file', Load(), lineno=538, col_offset=25), Name('args', Load(), lineno=538, col_offset=31), Name('env', Load(), lineno=538, col_offset=37)], [], None, None, lineno=538, col_offset=20), lineno=538, col_offset=20)], lineno=535, col_offset=16)], [ExceptHandler(None, None, [Expr(Call(Name('_exit', Load(), lineno=540, col_offset=16), [Num(127, lineno=540, col_offset=22)], [], None, None, lineno=540, col_offset=16), lineno=540, col_offset=16)], lineno=539, col_offset=12)], [], lineno=534, col_offset=12)], [If(Compare(Name('mode', Load(), lineno=543, col_offset=15), [Eq()], [Name('P_NOWAIT', Load(), lineno=543, col_offset=23)], lineno=543, col_offset=15), [Return(Name('pid', Load(), lineno=544, col_offset=23), lineno=544, col_offset=16)], [], lineno=543, col_offset=12), While(Num(1, lineno=545, col_offset=18), [Assign([Tuple([Name('wpid', Store(), lineno=546, col_offset=16), Name('sts', Store(), lineno=546, col_offset=22)], Store(), lineno=546, col_offset=16)], Call(Name('waitpid', Load(), lineno=546, col_offset=28), [Name('pid', Load(), lineno=546, col_offset=36), Num(0, lineno=546, col_offset=41)], [], None, None, lineno=546, col_offset=28), lineno=546, col_offset=16), If(Call(Name('WIFSTOPPED', Load(), lineno=547, col_offset=19), [Name('sts', Load(), lineno=547, col_offset=30)], [], None, None, lineno=547, col_offset=19), [Continue( lineno=548, col_offset=20)], [If(Call(Name('WIFSIGNALED', Load(), lineno=549, col_offset=21), [Name('sts', Load(), lineno=549, col_offset=33)], [], None, None, lineno=549, col_offset=21), [Return(UnaryOp(USub(), Call(Name('WTERMSIG', Load(), lineno=550, col_offset=28), [Name('sts', Load(), lineno=550, col_offset=37)], [], None, None, lineno=550, col_offset=28), lineno=550, col_offset=27), lineno=550, col_offset=20)], [If(Call(Name('WIFEXITED', Load(), lineno=551, col_offset=21), [Name('sts', Load(), lineno=551, col_offset=31)], [], None, None, lineno=551, col_offset=21), [Return(Call(Name('WEXITSTATUS', Load(), lineno=552, col_offset=27), [Name('sts', Load(), lineno=552, col_offset=39)], [], None, None, lineno=552, col_offset=27), lineno=552, col_offset=20)], [Raise(Name('error', Load(), lineno=554, col_offset=26), Str('Not stopped, signaled or exited???', lineno=554, col_offset=33), None, lineno=554, col_offset=20)], lineno=551, col_offset=21)], lineno=549, col_offset=21)], lineno=547, col_offset=16)], [], lineno=545, col_offset=12)], lineno=532, col_offset=8)], [], lineno=529, col_offset=4), FunctionDef('spawnv', arguments([Name('mode', Param(), lineno=556, col_offset=15), Name('file', Param(), lineno=556, col_offset=21), Name('args', Param(), lineno=556, col_offset=27)], None, None, []), [Expr(Str("spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=562, col_offset=-1), lineno=562, col_offset=-1), Return(Call(Name('_spawnvef', Load(), lineno=563, col_offset=15), [Name('mode', Load(), lineno=563, col_offset=25), Name('file', Load(), lineno=563, col_offset=31), Name('args', Load(), lineno=563, col_offset=37), Name('None', Load(), lineno=563, col_offset=43), Name('execv', Load(), lineno=563, col_offset=49)], [], None, None, lineno=563, col_offset=15), lineno=563, col_offset=8)], [], lineno=556, col_offset=4), FunctionDef('spawnve', arguments([Name('mode', Param(), lineno=565, col_offset=16), Name('file', Param(), lineno=565, col_offset=22), Name('args', Param(), lineno=565, col_offset=28), Name('env', Param(), lineno=565, col_offset=34)], None, None, []), [Expr(Str("spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=572, col_offset=-1), lineno=572, col_offset=-1), Return(Call(Name('_spawnvef', Load(), lineno=573, col_offset=15), [Name('mode', Load(), lineno=573, col_offset=25), Name('file', Load(), lineno=573, col_offset=31), Name('args', Load(), lineno=573, col_offset=37), Name('env', Load(), lineno=573, col_offset=43), Name('execve', Load(), lineno=573, col_offset=48)], [], None, None, lineno=573, col_offset=15), lineno=573, col_offset=8)], [], lineno=565, col_offset=4), FunctionDef('spawnvp', arguments([Name('mode', Param(), lineno=577, col_offset=16), Name('file', Param(), lineno=577, col_offset=22), Name('args', Param(), lineno=577, col_offset=28)], None, None, []), [Expr(Str("spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=584, col_offset=-1), lineno=584, col_offset=-1), Return(Call(Name('_spawnvef', Load(), lineno=585, col_offset=15), [Name('mode', Load(), lineno=585, col_offset=25), Name('file', Load(), lineno=585, col_offset=31), Name('args', Load(), lineno=585, col_offset=37), Name('None', Load(), lineno=585, col_offset=43), Name('execvp', Load(), lineno=585, col_offset=49)], [], None, None, lineno=585, col_offset=15), lineno=585, col_offset=8)], [], lineno=577, col_offset=4), FunctionDef('spawnvpe', arguments([Name('mode', Param(), lineno=587, col_offset=17), Name('file', Param(), lineno=587, col_offset=23), Name('args', Param(), lineno=587, col_offset=29), Name('env', Param(), lineno=587, col_offset=35)], None, None, []), [Expr(Str("spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=594, col_offset=-1), lineno=594, col_offset=-1), Return(Call(Name('_spawnvef', Load(), lineno=595, col_offset=15), [Name('mode', Load(), lineno=595, col_offset=25), Name('file', Load(), lineno=595, col_offset=31), Name('args', Load(), lineno=595, col_offset=37), Name('env', Load(), lineno=595, col_offset=43), Name('execvpe', Load(), lineno=595, col_offset=48)], [], None, None, lineno=595, col_offset=15), lineno=595, col_offset=8)], [], lineno=587, col_offset=4)], [], lineno=520, col_offset=0), If(Call(Name('_exists', Load(), lineno=597, col_offset=3), [Str('spawnv', lineno=597, col_offset=11)], [], None, None, lineno=597, col_offset=3), [FunctionDef('spawnl', arguments([Name('mode', Param(), lineno=601, col_offset=15), Name('file', Param(), lineno=601, col_offset=21)], 'args', None, []), [Expr(Str("spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=607, col_offset=-1), lineno=607, col_offset=-1), Return(Call(Name('spawnv', Load(), lineno=608, col_offset=15), [Name('mode', Load(), lineno=608, col_offset=22), Name('file', Load(), lineno=608, col_offset=28), Name('args', Load(), lineno=608, col_offset=34)], [], None, None, lineno=608, col_offset=15), lineno=608, col_offset=8)], [], lineno=601, col_offset=4), FunctionDef('spawnle', arguments([Name('mode', Param(), lineno=610, col_offset=16), Name('file', Param(), lineno=610, col_offset=22)], 'args', None, []), [Expr(Str("spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=617, col_offset=-1), lineno=617, col_offset=-1), Assign([Name('env', Store(), lineno=618, col_offset=8)], Subscript(Name('args', Load(), lineno=618, col_offset=14), Index(Num(-1, lineno=618, col_offset=20)), Load(), lineno=618, col_offset=14), lineno=618, col_offset=8), Return(Call(Name('spawnve', Load(), lineno=619, col_offset=15), [Name('mode', Load(), lineno=619, col_offset=23), Name('file', Load(), lineno=619, col_offset=29), Subscript(Name('args', Load(), lineno=619, col_offset=35), Slice(None, Num(-1, lineno=619, col_offset=42), None), Load(), lineno=619, col_offset=35), Name('env', Load(), lineno=619, col_offset=46)], [], None, None, lineno=619, col_offset=15), lineno=619, col_offset=8)], [], lineno=610, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=622, col_offset=4), 'extend', Load(), lineno=622, col_offset=4), [List([Str('spawnv', lineno=622, col_offset=20), Str('spawnve', lineno=622, col_offset=30), Str('spawnl', lineno=622, col_offset=41), Str('spawnle', lineno=622, col_offset=51)], Load(), lineno=622, col_offset=19)], [], None, None, lineno=622, col_offset=4), lineno=622, col_offset=4)], [], lineno=597, col_offset=0), If(Call(Name('_exists', Load(), lineno=625, col_offset=3), [Str('spawnvp', lineno=625, col_offset=11)], [], None, None, lineno=625, col_offset=3), [FunctionDef('spawnlp', arguments([Name('mode', Param(), lineno=628, col_offset=16), Name('file', Param(), lineno=628, col_offset=22)], 'args', None, []), [Expr(Str("spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=635, col_offset=-1), lineno=635, col_offset=-1), Return(Call(Name('spawnvp', Load(), lineno=636, col_offset=15), [Name('mode', Load(), lineno=636, col_offset=23), Name('file', Load(), lineno=636, col_offset=29), Name('args', Load(), lineno=636, col_offset=35)], [], None, None, lineno=636, col_offset=15), lineno=636, col_offset=8)], [], lineno=628, col_offset=4), FunctionDef('spawnlpe', arguments([Name('mode', Param(), lineno=638, col_offset=17), Name('file', Param(), lineno=638, col_offset=23)], 'args', None, []), [Expr(Str("spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. ", lineno=645, col_offset=-1), lineno=645, col_offset=-1), Assign([Name('env', Store(), lineno=646, col_offset=8)], Subscript(Name('args', Load(), lineno=646, col_offset=14), Index(Num(-1, lineno=646, col_offset=20)), Load(), lineno=646, col_offset=14), lineno=646, col_offset=8), Return(Call(Name('spawnvpe', Load(), lineno=647, col_offset=15), [Name('mode', Load(), lineno=647, col_offset=24), Name('file', Load(), lineno=647, col_offset=30), Subscript(Name('args', Load(), lineno=647, col_offset=36), Slice(None, Num(-1, lineno=647, col_offset=43), None), Load(), lineno=647, col_offset=36), Name('env', Load(), lineno=647, col_offset=47)], [], None, None, lineno=647, col_offset=15), lineno=647, col_offset=8)], [], lineno=638, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=650, col_offset=4), 'extend', Load(), lineno=650, col_offset=4), [List([Str('spawnvp', lineno=650, col_offset=20), Str('spawnvpe', lineno=650, col_offset=31), Str('spawnlp', lineno=650, col_offset=43), Str('spawnlpe', lineno=650, col_offset=54)], Load(), lineno=650, col_offset=19)], [], None, None, lineno=650, col_offset=4), lineno=650, col_offset=4)], [], lineno=625, col_offset=0), If(Call(Name('_exists', Load(), lineno=654, col_offset=3), [Str('fork', lineno=654, col_offset=11)], [], None, None, lineno=654, col_offset=3), [If(UnaryOp(Not(), Call(Name('_exists', Load(), lineno=655, col_offset=11), [Str('popen2', lineno=655, col_offset=19)], [], None, None, lineno=655, col_offset=11), lineno=655, col_offset=7), [FunctionDef('popen2', arguments([Name('cmd', Param(), lineno=656, col_offset=19), Name('mode', Param(), lineno=656, col_offset=24), Name('bufsize', Param(), lineno=656, col_offset=34)], None, None, [Str('t', lineno=656, col_offset=29), Num(-1, lineno=656, col_offset=43)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout) are returned.", lineno=662, col_offset=-1), lineno=662, col_offset=-1), Import([alias('warnings', None)], lineno=663, col_offset=12), Assign([Name('msg', Store(), lineno=664, col_offset=12)], Str('os.popen2 is deprecated.  Use the subprocess module.', lineno=664, col_offset=18), lineno=664, col_offset=12), Expr(Call(Attribute(Name('warnings', Load(), lineno=665, col_offset=12), 'warn', Load(), lineno=665, col_offset=12), [Name('msg', Load(), lineno=665, col_offset=26), Name('DeprecationWarning', Load(), lineno=665, col_offset=31)], [keyword('stacklevel', Num(2, lineno=665, col_offset=62))], None, None, lineno=665, col_offset=12), lineno=665, col_offset=12), Import([alias('subprocess', None)], lineno=667, col_offset=12), Assign([Name('PIPE', Store(), lineno=668, col_offset=12)], Attribute(Name('subprocess', Load(), lineno=668, col_offset=19), 'PIPE', Load(), lineno=668, col_offset=19), lineno=668, col_offset=12), Assign([Name('p', Store(), lineno=669, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=669, col_offset=16), 'Popen', Load(), lineno=669, col_offset=16), [Name('cmd', Load(), lineno=669, col_offset=33)], [keyword('shell', Call(Name('isinstance', Load(), lineno=669, col_offset=44), [Name('cmd', Load(), lineno=669, col_offset=55), Name('basestring', Load(), lineno=669, col_offset=60)], [], None, None, lineno=669, col_offset=44)), keyword('bufsize', Name('bufsize', Load(), lineno=670, col_offset=41)), keyword('stdin', Name('PIPE', Load(), lineno=670, col_offset=56)), keyword('stdout', Name('PIPE', Load(), lineno=670, col_offset=69)), keyword('close_fds', Name('True', Load(), lineno=671, col_offset=43))], None, None, lineno=669, col_offset=16), lineno=669, col_offset=12), Return(Tuple([Attribute(Name('p', Load(), lineno=672, col_offset=19), 'stdin', Load(), lineno=672, col_offset=19), Attribute(Name('p', Load(), lineno=672, col_offset=28), 'stdout', Load(), lineno=672, col_offset=28)], Load(), lineno=672, col_offset=19), lineno=672, col_offset=12)], [], lineno=656, col_offset=8), Expr(Call(Attribute(Name('__all__', Load(), lineno=673, col_offset=8), 'append', Load(), lineno=673, col_offset=8), [Str('popen2', lineno=673, col_offset=23)], [], None, None, lineno=673, col_offset=8), lineno=673, col_offset=8)], [], lineno=655, col_offset=4), If(UnaryOp(Not(), Call(Name('_exists', Load(), lineno=675, col_offset=11), [Str('popen3', lineno=675, col_offset=19)], [], None, None, lineno=675, col_offset=11), lineno=675, col_offset=7), [FunctionDef('popen3', arguments([Name('cmd', Param(), lineno=676, col_offset=19), Name('mode', Param(), lineno=676, col_offset=24), Name('bufsize', Param(), lineno=676, col_offset=34)], None, None, [Str('t', lineno=676, col_offset=29), Num(-1, lineno=676, col_offset=43)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout, child_stderr) are returned.", lineno=682, col_offset=-1), lineno=682, col_offset=-1), Import([alias('warnings', None)], lineno=683, col_offset=12), Assign([Name('msg', Store(), lineno=684, col_offset=12)], Str('os.popen3 is deprecated.  Use the subprocess module.', lineno=684, col_offset=18), lineno=684, col_offset=12), Expr(Call(Attribute(Name('warnings', Load(), lineno=685, col_offset=12), 'warn', Load(), lineno=685, col_offset=12), [Name('msg', Load(), lineno=685, col_offset=26), Name('DeprecationWarning', Load(), lineno=685, col_offset=31)], [keyword('stacklevel', Num(2, lineno=685, col_offset=62))], None, None, lineno=685, col_offset=12), lineno=685, col_offset=12), Import([alias('subprocess', None)], lineno=687, col_offset=12), Assign([Name('PIPE', Store(), lineno=688, col_offset=12)], Attribute(Name('subprocess', Load(), lineno=688, col_offset=19), 'PIPE', Load(), lineno=688, col_offset=19), lineno=688, col_offset=12), Assign([Name('p', Store(), lineno=689, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=689, col_offset=16), 'Popen', Load(), lineno=689, col_offset=16), [Name('cmd', Load(), lineno=689, col_offset=33)], [keyword('shell', Call(Name('isinstance', Load(), lineno=689, col_offset=44), [Name('cmd', Load(), lineno=689, col_offset=55), Name('basestring', Load(), lineno=689, col_offset=60)], [], None, None, lineno=689, col_offset=44)), keyword('bufsize', Name('bufsize', Load(), lineno=690, col_offset=41)), keyword('stdin', Name('PIPE', Load(), lineno=690, col_offset=56)), keyword('stdout', Name('PIPE', Load(), lineno=690, col_offset=69)), keyword('stderr', Name('PIPE', Load(), lineno=691, col_offset=40)), keyword('close_fds', Name('True', Load(), lineno=691, col_offset=56))], None, None, lineno=689, col_offset=16), lineno=689, col_offset=12), Return(Tuple([Attribute(Name('p', Load(), lineno=692, col_offset=19), 'stdin', Load(), lineno=692, col_offset=19), Attribute(Name('p', Load(), lineno=692, col_offset=28), 'stdout', Load(), lineno=692, col_offset=28), Attribute(Name('p', Load(), lineno=692, col_offset=38), 'stderr', Load(), lineno=692, col_offset=38)], Load(), lineno=692, col_offset=19), lineno=692, col_offset=12)], [], lineno=676, col_offset=8), Expr(Call(Attribute(Name('__all__', Load(), lineno=693, col_offset=8), 'append', Load(), lineno=693, col_offset=8), [Str('popen3', lineno=693, col_offset=23)], [], None, None, lineno=693, col_offset=8), lineno=693, col_offset=8)], [], lineno=675, col_offset=4), If(UnaryOp(Not(), Call(Name('_exists', Load(), lineno=695, col_offset=11), [Str('popen4', lineno=695, col_offset=19)], [], None, None, lineno=695, col_offset=11), lineno=695, col_offset=7), [FunctionDef('popen4', arguments([Name('cmd', Param(), lineno=696, col_offset=19), Name('mode', Param(), lineno=696, col_offset=24), Name('bufsize', Param(), lineno=696, col_offset=34)], None, None, [Str('t', lineno=696, col_offset=29), Num(-1, lineno=696, col_offset=43)]), [Expr(Str("Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout_stderr) are returned.", lineno=702, col_offset=-1), lineno=702, col_offset=-1), Import([alias('warnings', None)], lineno=703, col_offset=12), Assign([Name('msg', Store(), lineno=704, col_offset=12)], Str('os.popen4 is deprecated.  Use the subprocess module.', lineno=704, col_offset=18), lineno=704, col_offset=12), Expr(Call(Attribute(Name('warnings', Load(), lineno=705, col_offset=12), 'warn', Load(), lineno=705, col_offset=12), [Name('msg', Load(), lineno=705, col_offset=26), Name('DeprecationWarning', Load(), lineno=705, col_offset=31)], [keyword('stacklevel', Num(2, lineno=705, col_offset=62))], None, None, lineno=705, col_offset=12), lineno=705, col_offset=12), Import([alias('subprocess', None)], lineno=707, col_offset=12), Assign([Name('PIPE', Store(), lineno=708, col_offset=12)], Attribute(Name('subprocess', Load(), lineno=708, col_offset=19), 'PIPE', Load(), lineno=708, col_offset=19), lineno=708, col_offset=12), Assign([Name('p', Store(), lineno=709, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=709, col_offset=16), 'Popen', Load(), lineno=709, col_offset=16), [Name('cmd', Load(), lineno=709, col_offset=33)], [keyword('shell', Call(Name('isinstance', Load(), lineno=709, col_offset=44), [Name('cmd', Load(), lineno=709, col_offset=55), Name('basestring', Load(), lineno=709, col_offset=60)], [], None, None, lineno=709, col_offset=44)), keyword('bufsize', Name('bufsize', Load(), lineno=710, col_offset=41)), keyword('stdin', Name('PIPE', Load(), lineno=710, col_offset=56)), keyword('stdout', Name('PIPE', Load(), lineno=710, col_offset=69)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=711, col_offset=40), 'STDOUT', Load(), lineno=711, col_offset=40)), keyword('close_fds', Name('True', Load(), lineno=711, col_offset=69))], None, None, lineno=709, col_offset=16), lineno=709, col_offset=12), Return(Tuple([Attribute(Name('p', Load(), lineno=712, col_offset=19), 'stdin', Load(), lineno=712, col_offset=19), Attribute(Name('p', Load(), lineno=712, col_offset=28), 'stdout', Load(), lineno=712, col_offset=28)], Load(), lineno=712, col_offset=19), lineno=712, col_offset=12)], [], lineno=696, col_offset=8), Expr(Call(Attribute(Name('__all__', Load(), lineno=713, col_offset=8), 'append', Load(), lineno=713, col_offset=8), [Str('popen4', lineno=713, col_offset=23)], [], None, None, lineno=713, col_offset=8), lineno=713, col_offset=8)], [], lineno=695, col_offset=4)], [], lineno=654, col_offset=0), Import([alias('copy_reg', '_copy_reg')], lineno=715, col_offset=0), FunctionDef('_make_stat_result', arguments([Name('tup', Param(), lineno=717, col_offset=22), Name('dict', Param(), lineno=717, col_offset=27)], None, None, []), [Return(Call(Name('stat_result', Load(), lineno=718, col_offset=11), [Name('tup', Load(), lineno=718, col_offset=23), Name('dict', Load(), lineno=718, col_offset=28)], [], None, None, lineno=718, col_offset=11), lineno=718, col_offset=4)], [], lineno=717, col_offset=0), FunctionDef('_pickle_stat_result', arguments([Name('sr', Param(), lineno=720, col_offset=24)], None, None, []), [Assign([Tuple([Name('type', Store(), lineno=721, col_offset=5), Name('args', Store(), lineno=721, col_offset=11)], Store(), lineno=721, col_offset=5)], Call(Attribute(Name('sr', Load(), lineno=721, col_offset=19), '__reduce__', Load(), lineno=721, col_offset=19), [], [], None, None, lineno=721, col_offset=19), lineno=721, col_offset=4), Return(Tuple([Name('_make_stat_result', Load(), lineno=722, col_offset=12), Name('args', Load(), lineno=722, col_offset=31)], Load(), lineno=722, col_offset=12), lineno=722, col_offset=4)], [], lineno=720, col_offset=0), TryExcept([Expr(Call(Attribute(Name('_copy_reg', Load(), lineno=725, col_offset=4), 'pickle', Load(), lineno=725, col_offset=4), [Name('stat_result', Load(), lineno=725, col_offset=21), Name('_pickle_stat_result', Load(), lineno=725, col_offset=34), Name('_make_stat_result', Load(), lineno=725, col_offset=55)], [], None, None, lineno=725, col_offset=4), lineno=725, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=726, col_offset=7), None, [Pass( lineno=727, col_offset=4)], lineno=726, col_offset=0)], [], lineno=724, col_offset=0), FunctionDef('_make_statvfs_result', arguments([Name('tup', Param(), lineno=729, col_offset=25), Name('dict', Param(), lineno=729, col_offset=30)], None, None, []), [Return(Call(Name('statvfs_result', Load(), lineno=730, col_offset=11), [Name('tup', Load(), lineno=730, col_offset=26), Name('dict', Load(), lineno=730, col_offset=31)], [], None, None, lineno=730, col_offset=11), lineno=730, col_offset=4)], [], lineno=729, col_offset=0), FunctionDef('_pickle_statvfs_result', arguments([Name('sr', Param(), lineno=732, col_offset=27)], None, None, []), [Assign([Tuple([Name('type', Store(), lineno=733, col_offset=5), Name('args', Store(), lineno=733, col_offset=11)], Store(), lineno=733, col_offset=5)], Call(Attribute(Name('sr', Load(), lineno=733, col_offset=19), '__reduce__', Load(), lineno=733, col_offset=19), [], [], None, None, lineno=733, col_offset=19), lineno=733, col_offset=4), Return(Tuple([Name('_make_statvfs_result', Load(), lineno=734, col_offset=12), Name('args', Load(), lineno=734, col_offset=34)], Load(), lineno=734, col_offset=12), lineno=734, col_offset=4)], [], lineno=732, col_offset=0), TryExcept([Expr(Call(Attribute(Name('_copy_reg', Load(), lineno=737, col_offset=4), 'pickle', Load(), lineno=737, col_offset=4), [Name('statvfs_result', Load(), lineno=737, col_offset=21), Name('_pickle_statvfs_result', Load(), lineno=737, col_offset=37), Name('_make_statvfs_result', Load(), lineno=738, col_offset=21)], [], None, None, lineno=737, col_offset=4), lineno=737, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=739, col_offset=7), None, [Pass( lineno=740, col_offset=4)], lineno=739, col_offset=0)], [], lineno=736, col_offset=0), If(UnaryOp(Not(), Call(Name('_exists', Load(), lineno=742, col_offset=7), [Str('urandom', lineno=742, col_offset=15)], [], None, None, lineno=742, col_offset=7), lineno=742, col_offset=3), [FunctionDef('urandom', arguments([Name('n', Param(), lineno=743, col_offset=16)], None, None, []), [Expr(Str('urandom(n) -> str\n\n        Return a string of n random bytes suitable for cryptographic use.\n\n        ', lineno=748, col_offset=-1), lineno=748, col_offset=-1), TryExcept([Assign([Name('_urandomfd', Store(), lineno=750, col_offset=12)], Call(Name('open', Load(), lineno=750, col_offset=25), [Str('/dev/urandom', lineno=750, col_offset=30), Name('O_RDONLY', Load(), lineno=750, col_offset=46)], [], None, None, lineno=750, col_offset=25), lineno=750, col_offset=12)], [ExceptHandler(Tuple([Name('OSError', Load(), lineno=751, col_offset=16), Name('IOError', Load(), lineno=751, col_offset=25)], Load(), lineno=751, col_offset=16), None, [Raise(Call(Name('NotImplementedError', Load(), lineno=752, col_offset=18), [Str('/dev/urandom (or equivalent) not found', lineno=752, col_offset=38)], [], None, None, lineno=752, col_offset=18), None, None, lineno=752, col_offset=12)], lineno=751, col_offset=8)], [], lineno=749, col_offset=8), TryFinally([Assign([Name('bs', Store(), lineno=754, col_offset=12)], Str('', lineno=754, col_offset=17), lineno=754, col_offset=12), While(Compare(Name('n', Load(), lineno=755, col_offset=18), [Gt()], [Call(Name('len', Load(), lineno=755, col_offset=22), [Name('bs', Load(), lineno=755, col_offset=26)], [], None, None, lineno=755, col_offset=22)], lineno=755, col_offset=18), [AugAssign(Name('bs', Store(), lineno=756, col_offset=16), Add(), Call(Name('read', Load(), lineno=756, col_offset=22), [Name('_urandomfd', Load(), lineno=756, col_offset=27), BinOp(Name('n', Load(), lineno=756, col_offset=39), Sub(), Call(Name('len', Load(), lineno=756, col_offset=43), [Name('bs', Load(), lineno=756, col_offset=47)], [], None, None, lineno=756, col_offset=43), lineno=756, col_offset=39)], [], None, None, lineno=756, col_offset=22), lineno=756, col_offset=16)], [], lineno=755, col_offset=12)], [Expr(Call(Name('close', Load(), lineno=758, col_offset=12), [Name('_urandomfd', Load(), lineno=758, col_offset=18)], [], None, None, lineno=758, col_offset=12), lineno=758, col_offset=12)], lineno=753, col_offset=8), Return(Name('bs', Load(), lineno=759, col_offset=15), lineno=759, col_offset=8)], [], lineno=743, col_offset=4)], [], lineno=742, col_offset=0)])
