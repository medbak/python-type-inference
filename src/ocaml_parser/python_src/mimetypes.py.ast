Module([Expr(Str('Guess the MIME type of a file.\n\nThis module defines two useful functions:\n\nguess_type(url, strict=1) -- guess the MIME type and encoding of a URL.\n\nguess_extension(type, strict=1) -- guess the extension for a given MIME type.\n\nIt also contains the following, for tuning the behavior:\n\nData:\n\nknownfiles -- list of files to parse\ninited -- flag set when init() has been called\nsuffix_map -- dictionary mapping suffixes to suffixes\nencodings_map -- dictionary mapping suffixes to encodings\ntypes_map -- dictionary mapping suffixes to types\n\nFunctions:\n\ninit([files]) -- parse a list of files, default knownfiles (on Windows, the\n  default values are taken from the registry)\nread_mime_types(file) -- parse one file, return a dictionary or None\n', lineno=24, col_offset=-1), lineno=24, col_offset=-1), Import([alias('os', None)], lineno=26, col_offset=0), Import([alias('sys', None)], lineno=27, col_offset=0), Import([alias('posixpath', None)], lineno=28, col_offset=0), Import([alias('urllib', None)], lineno=29, col_offset=0), TryExcept([Import([alias('_winreg', None)], lineno=31, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=32, col_offset=7), None, [Assign([Name('_winreg', Store(), lineno=33, col_offset=4)], Name('None', Load(), lineno=33, col_offset=14), lineno=33, col_offset=4)], lineno=32, col_offset=0)], [], lineno=30, col_offset=0), Assign([Name('__all__', Store(), lineno=35, col_offset=0)], List([Str('guess_type', lineno=36, col_offset=4), Str('guess_extension', lineno=36, col_offset=17), Str('guess_all_extensions', lineno=36, col_offset=35), Str('add_type', lineno=37, col_offset=4), Str('read_mime_types', lineno=37, col_offset=15), Str('init', lineno=37, col_offset=33)], Load(), lineno=35, col_offset=10), lineno=35, col_offset=0), Assign([Name('knownfiles', Store(), lineno=40, col_offset=0)], List([Str('/etc/mime.types', lineno=41, col_offset=4), Str('/etc/httpd/mime.types', lineno=42, col_offset=4), Str('/etc/httpd/conf/mime.types', lineno=43, col_offset=4), Str('/etc/apache/mime.types', lineno=44, col_offset=4), Str('/etc/apache2/mime.types', lineno=45, col_offset=4), Str('/usr/local/etc/httpd/conf/mime.types', lineno=46, col_offset=4), Str('/usr/local/lib/netscape/mime.types', lineno=47, col_offset=4), Str('/usr/local/etc/httpd/conf/mime.types', lineno=48, col_offset=4), Str('/usr/local/etc/mime.types', lineno=49, col_offset=4)], Load(), lineno=40, col_offset=13), lineno=40, col_offset=0), Assign([Name('inited', Store(), lineno=52, col_offset=0)], Name('False', Load(), lineno=52, col_offset=9), lineno=52, col_offset=0), Assign([Name('_db', Store(), lineno=53, col_offset=0)], Name('None', Load(), lineno=53, col_offset=6), lineno=53, col_offset=0), ClassDef('MimeTypes', [], [Expr(Str('MIME-types datastore.\n\n    This datastore can handle information from mime.types-style files\n    and supports basic determination of MIME type from a filename or\n    URL, and can guess a reasonable extension given a MIME type.\n    ', lineno=62, col_offset=-1), lineno=62, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=64, col_offset=17), Name('filenames', Param(), lineno=64, col_offset=23), Name('strict', Param(), lineno=64, col_offset=37)], None, None, [Tuple([], Load(), lineno=64, col_offset=33), Name('True', Load(), lineno=64, col_offset=44)]), [If(UnaryOp(Not(), Name('inited', Load(), lineno=65, col_offset=15), lineno=65, col_offset=11), [Expr(Call(Name('init', Load(), lineno=66, col_offset=12), [], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=12)], [], lineno=65, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=67, col_offset=8), 'encodings_map', Store(), lineno=67, col_offset=8)], Call(Attribute(Name('encodings_map', Load(), lineno=67, col_offset=29), 'copy', Load(), lineno=67, col_offset=29), [], [], None, None, lineno=67, col_offset=29), lineno=67, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=68, col_offset=8), 'suffix_map', Store(), lineno=68, col_offset=8)], Call(Attribute(Name('suffix_map', Load(), lineno=68, col_offset=26), 'copy', Load(), lineno=68, col_offset=26), [], [], None, None, lineno=68, col_offset=26), lineno=68, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=69, col_offset=8), 'types_map', Store(), lineno=69, col_offset=8)], Tuple([Dict([], [], lineno=69, col_offset=26), Dict([], [], lineno=69, col_offset=30)], Load(), lineno=69, col_offset=26), lineno=69, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=70, col_offset=8), 'types_map_inv', Store(), lineno=70, col_offset=8)], Tuple([Dict([], [], lineno=70, col_offset=30), Dict([], [], lineno=70, col_offset=34)], Load(), lineno=70, col_offset=30), lineno=70, col_offset=8), For(Tuple([Name('ext', Store(), lineno=71, col_offset=13), Name('type', Store(), lineno=71, col_offset=18)], Store(), lineno=71, col_offset=13), Call(Attribute(Name('types_map', Load(), lineno=71, col_offset=27), 'items', Load(), lineno=71, col_offset=27), [], [], None, None, lineno=71, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=72, col_offset=12), 'add_type', Load(), lineno=72, col_offset=12), [Name('type', Load(), lineno=72, col_offset=26), Name('ext', Load(), lineno=72, col_offset=32), Name('True', Load(), lineno=72, col_offset=37)], [], None, None, lineno=72, col_offset=12), lineno=72, col_offset=12)], [], lineno=71, col_offset=8), For(Tuple([Name('ext', Store(), lineno=73, col_offset=13), Name('type', Store(), lineno=73, col_offset=18)], Store(), lineno=73, col_offset=13), Call(Attribute(Name('common_types', Load(), lineno=73, col_offset=27), 'items', Load(), lineno=73, col_offset=27), [], [], None, None, lineno=73, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=74, col_offset=12), 'add_type', Load(), lineno=74, col_offset=12), [Name('type', Load(), lineno=74, col_offset=26), Name('ext', Load(), lineno=74, col_offset=32), Name('False', Load(), lineno=74, col_offset=37)], [], None, None, lineno=74, col_offset=12), lineno=74, col_offset=12)], [], lineno=73, col_offset=8), For(Name('name', Store(), lineno=75, col_offset=12), Name('filenames', Load(), lineno=75, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'read', Load(), lineno=76, col_offset=12), [Name('name', Load(), lineno=76, col_offset=22), Name('strict', Load(), lineno=76, col_offset=28)], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=12)], [], lineno=75, col_offset=8)], [], lineno=64, col_offset=4), FunctionDef('add_type', arguments([Name('self', Param(), lineno=78, col_offset=17), Name('type', Param(), lineno=78, col_offset=23), Name('ext', Param(), lineno=78, col_offset=29), Name('strict', Param(), lineno=78, col_offset=34)], None, None, [Name('True', Load(), lineno=78, col_offset=41)]), [Expr(Str('Add a mapping between a type and an extension.\n\n        When the extension is already known, the new\n        type will replace the old one. When the type\n        is already known the extension will be added\n        to the list of known extensions.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ', lineno=89, col_offset=-1), lineno=89, col_offset=-1), Assign([Subscript(Subscript(Attribute(Name('self', Load(), lineno=90, col_offset=8), 'types_map', Load(), lineno=90, col_offset=8), Index(Name('strict', Load(), lineno=90, col_offset=23)), Load(), lineno=90, col_offset=8), Index(Name('ext', Load(), lineno=90, col_offset=31)), Store(), lineno=90, col_offset=8)], Name('type', Load(), lineno=90, col_offset=38), lineno=90, col_offset=8), Assign([Name('exts', Store(), lineno=91, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=91, col_offset=15), 'types_map_inv', Load(), lineno=91, col_offset=15), Index(Name('strict', Load(), lineno=91, col_offset=34)), Load(), lineno=91, col_offset=15), 'setdefault', Load(), lineno=91, col_offset=15), [Name('type', Load(), lineno=91, col_offset=53), List([], Load(), lineno=91, col_offset=59)], [], None, None, lineno=91, col_offset=15), lineno=91, col_offset=8), If(Compare(Name('ext', Load(), lineno=92, col_offset=11), [NotIn()], [Name('exts', Load(), lineno=92, col_offset=22)], lineno=92, col_offset=11), [Expr(Call(Attribute(Name('exts', Load(), lineno=93, col_offset=12), 'append', Load(), lineno=93, col_offset=12), [Name('ext', Load(), lineno=93, col_offset=24)], [], None, None, lineno=93, col_offset=12), lineno=93, col_offset=12)], [], lineno=92, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('guess_type', arguments([Name('self', Param(), lineno=95, col_offset=19), Name('url', Param(), lineno=95, col_offset=25), Name('strict', Param(), lineno=95, col_offset=30)], None, None, [Name('True', Load(), lineno=95, col_offset=37)]), [Expr(Str("Guess the type of a file based on its URL.\n\n        Return value is a tuple (type, encoding) where type is None if\n        the type can't be guessed (no or unknown suffix) or a string\n        of the form type/subtype, usable for a MIME Content-type\n        header; and encoding is None for no encoding or the name of\n        the program used to encode (e.g. compress or gzip).  The\n        mappings are table driven.  Encoding suffixes are case\n        sensitive; type suffixes are first tried case sensitive, then\n        case insensitive.\n\n        The suffixes .tgz, .taz and .tz (case sensitive!) are all\n        mapped to '.tar.gz'.  (This is table-driven too, using the\n        dictionary suffix_map.)\n\n        Optional `strict' argument when False adds a bunch of commonly found,\n        but non-standard types.\n        ", lineno=113, col_offset=-1), lineno=113, col_offset=-1), Assign([Tuple([Name('scheme', Store(), lineno=114, col_offset=8), Name('url', Store(), lineno=114, col_offset=16)], Store(), lineno=114, col_offset=8)], Call(Attribute(Name('urllib', Load(), lineno=114, col_offset=22), 'splittype', Load(), lineno=114, col_offset=22), [Name('url', Load(), lineno=114, col_offset=39)], [], None, None, lineno=114, col_offset=22), lineno=114, col_offset=8), If(Compare(Name('scheme', Load(), lineno=115, col_offset=11), [Eq()], [Str('data', lineno=115, col_offset=21)], lineno=115, col_offset=11), [Assign([Name('comma', Store(), lineno=122, col_offset=12)], Call(Attribute(Name('url', Load(), lineno=122, col_offset=20), 'find', Load(), lineno=122, col_offset=20), [Str(',', lineno=122, col_offset=29)], [], None, None, lineno=122, col_offset=20), lineno=122, col_offset=12), If(Compare(Name('comma', Load(), lineno=123, col_offset=15), [Lt()], [Num(0, lineno=123, col_offset=23)], lineno=123, col_offset=15), [Return(Tuple([Name('None', Load(), lineno=125, col_offset=23), Name('None', Load(), lineno=125, col_offset=29)], Load(), lineno=125, col_offset=23), lineno=125, col_offset=16)], [], lineno=123, col_offset=12), Assign([Name('semi', Store(), lineno=126, col_offset=12)], Call(Attribute(Name('url', Load(), lineno=126, col_offset=19), 'find', Load(), lineno=126, col_offset=19), [Str(';', lineno=126, col_offset=28), Num(0, lineno=126, col_offset=33), Name('comma', Load(), lineno=126, col_offset=36)], [], None, None, lineno=126, col_offset=19), lineno=126, col_offset=12), If(Compare(Name('semi', Load(), lineno=127, col_offset=15), [GtE()], [Num(0, lineno=127, col_offset=23)], lineno=127, col_offset=15), [Assign([Name('type', Store(), lineno=128, col_offset=16)], Subscript(Name('url', Load(), lineno=128, col_offset=23), Slice(None, Name('semi', Load(), lineno=128, col_offset=28), None), Load(), lineno=128, col_offset=23), lineno=128, col_offset=16)], [Assign([Name('type', Store(), lineno=130, col_offset=16)], Subscript(Name('url', Load(), lineno=130, col_offset=23), Slice(None, Name('comma', Load(), lineno=130, col_offset=28), None), Load(), lineno=130, col_offset=23), lineno=130, col_offset=16)], lineno=127, col_offset=12), If(BoolOp(Or(), [Compare(Str('=', lineno=131, col_offset=15), [In()], [Name('type', Load(), lineno=131, col_offset=22)], lineno=131, col_offset=15), Compare(Str('/', lineno=131, col_offset=30), [NotIn()], [Name('type', Load(), lineno=131, col_offset=41)], lineno=131, col_offset=30)], lineno=131, col_offset=15), [Assign([Name('type', Store(), lineno=132, col_offset=16)], Str('text/plain', lineno=132, col_offset=23), lineno=132, col_offset=16)], [], lineno=131, col_offset=12), Return(Tuple([Name('type', Load(), lineno=133, col_offset=19), Name('None', Load(), lineno=133, col_offset=25)], Load(), lineno=133, col_offset=19), lineno=133, col_offset=12)], [], lineno=115, col_offset=8), Assign([Tuple([Name('base', Store(), lineno=134, col_offset=8), Name('ext', Store(), lineno=134, col_offset=14)], Store(), lineno=134, col_offset=8)], Call(Attribute(Name('posixpath', Load(), lineno=134, col_offset=20), 'splitext', Load(), lineno=134, col_offset=20), [Name('url', Load(), lineno=134, col_offset=39)], [], None, None, lineno=134, col_offset=20), lineno=134, col_offset=8), While(Compare(Name('ext', Load(), lineno=135, col_offset=14), [In()], [Attribute(Name('self', Load(), lineno=135, col_offset=21), 'suffix_map', Load(), lineno=135, col_offset=21)], lineno=135, col_offset=14), [Assign([Tuple([Name('base', Store(), lineno=136, col_offset=12), Name('ext', Store(), lineno=136, col_offset=18)], Store(), lineno=136, col_offset=12)], Call(Attribute(Name('posixpath', Load(), lineno=136, col_offset=24), 'splitext', Load(), lineno=136, col_offset=24), [BinOp(Name('base', Load(), lineno=136, col_offset=43), Add(), Subscript(Attribute(Name('self', Load(), lineno=136, col_offset=50), 'suffix_map', Load(), lineno=136, col_offset=50), Index(Name('ext', Load(), lineno=136, col_offset=66)), Load(), lineno=136, col_offset=50), lineno=136, col_offset=43)], [], None, None, lineno=136, col_offset=24), lineno=136, col_offset=12)], [], lineno=135, col_offset=8), If(Compare(Name('ext', Load(), lineno=137, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=137, col_offset=18), 'encodings_map', Load(), lineno=137, col_offset=18)], lineno=137, col_offset=11), [Assign([Name('encoding', Store(), lineno=138, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=138, col_offset=23), 'encodings_map', Load(), lineno=138, col_offset=23), Index(Name('ext', Load(), lineno=138, col_offset=42)), Load(), lineno=138, col_offset=23), lineno=138, col_offset=12), Assign([Tuple([Name('base', Store(), lineno=139, col_offset=12), Name('ext', Store(), lineno=139, col_offset=18)], Store(), lineno=139, col_offset=12)], Call(Attribute(Name('posixpath', Load(), lineno=139, col_offset=24), 'splitext', Load(), lineno=139, col_offset=24), [Name('base', Load(), lineno=139, col_offset=43)], [], None, None, lineno=139, col_offset=24), lineno=139, col_offset=12)], [Assign([Name('encoding', Store(), lineno=141, col_offset=12)], Name('None', Load(), lineno=141, col_offset=23), lineno=141, col_offset=12)], lineno=137, col_offset=8), Assign([Name('types_map', Store(), lineno=142, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=142, col_offset=20), 'types_map', Load(), lineno=142, col_offset=20), Index(Name('True', Load(), lineno=142, col_offset=35)), Load(), lineno=142, col_offset=20), lineno=142, col_offset=8), If(Compare(Name('ext', Load(), lineno=143, col_offset=11), [In()], [Name('types_map', Load(), lineno=143, col_offset=18)], lineno=143, col_offset=11), [Return(Tuple([Subscript(Name('types_map', Load(), lineno=144, col_offset=19), Index(Name('ext', Load(), lineno=144, col_offset=29)), Load(), lineno=144, col_offset=19), Name('encoding', Load(), lineno=144, col_offset=35)], Load(), lineno=144, col_offset=19), lineno=144, col_offset=12)], [If(Compare(Call(Attribute(Name('ext', Load(), lineno=145, col_offset=13), 'lower', Load(), lineno=145, col_offset=13), [], [], None, None, lineno=145, col_offset=13), [In()], [Name('types_map', Load(), lineno=145, col_offset=28)], lineno=145, col_offset=13), [Return(Tuple([Subscript(Name('types_map', Load(), lineno=146, col_offset=19), Index(Call(Attribute(Name('ext', Load(), lineno=146, col_offset=29), 'lower', Load(), lineno=146, col_offset=29), [], [], None, None, lineno=146, col_offset=29)), Load(), lineno=146, col_offset=19), Name('encoding', Load(), lineno=146, col_offset=43)], Load(), lineno=146, col_offset=19), lineno=146, col_offset=12)], [If(Name('strict', Load(), lineno=147, col_offset=13), [Return(Tuple([Name('None', Load(), lineno=148, col_offset=19), Name('encoding', Load(), lineno=148, col_offset=25)], Load(), lineno=148, col_offset=19), lineno=148, col_offset=12)], [], lineno=147, col_offset=13)], lineno=145, col_offset=13)], lineno=143, col_offset=8), Assign([Name('types_map', Store(), lineno=149, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=149, col_offset=20), 'types_map', Load(), lineno=149, col_offset=20), Index(Name('False', Load(), lineno=149, col_offset=35)), Load(), lineno=149, col_offset=20), lineno=149, col_offset=8), If(Compare(Name('ext', Load(), lineno=150, col_offset=11), [In()], [Name('types_map', Load(), lineno=150, col_offset=18)], lineno=150, col_offset=11), [Return(Tuple([Subscript(Name('types_map', Load(), lineno=151, col_offset=19), Index(Name('ext', Load(), lineno=151, col_offset=29)), Load(), lineno=151, col_offset=19), Name('encoding', Load(), lineno=151, col_offset=35)], Load(), lineno=151, col_offset=19), lineno=151, col_offset=12)], [If(Compare(Call(Attribute(Name('ext', Load(), lineno=152, col_offset=13), 'lower', Load(), lineno=152, col_offset=13), [], [], None, None, lineno=152, col_offset=13), [In()], [Name('types_map', Load(), lineno=152, col_offset=28)], lineno=152, col_offset=13), [Return(Tuple([Subscript(Name('types_map', Load(), lineno=153, col_offset=19), Index(Call(Attribute(Name('ext', Load(), lineno=153, col_offset=29), 'lower', Load(), lineno=153, col_offset=29), [], [], None, None, lineno=153, col_offset=29)), Load(), lineno=153, col_offset=19), Name('encoding', Load(), lineno=153, col_offset=43)], Load(), lineno=153, col_offset=19), lineno=153, col_offset=12)], [Return(Tuple([Name('None', Load(), lineno=155, col_offset=19), Name('encoding', Load(), lineno=155, col_offset=25)], Load(), lineno=155, col_offset=19), lineno=155, col_offset=12)], lineno=152, col_offset=13)], lineno=150, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('guess_all_extensions', arguments([Name('self', Param(), lineno=157, col_offset=29), Name('type', Param(), lineno=157, col_offset=35), Name('strict', Param(), lineno=157, col_offset=41)], None, None, [Name('True', Load(), lineno=157, col_offset=48)]), [Expr(Str("Guess the extensions for a file based on its MIME type.\n\n        Return value is a list of strings giving the possible filename\n        extensions, including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data stream,\n        but would be mapped to the MIME type `type' by guess_type().\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ", lineno=167, col_offset=-1), lineno=167, col_offset=-1), Assign([Name('type', Store(), lineno=168, col_offset=8)], Call(Attribute(Name('type', Load(), lineno=168, col_offset=15), 'lower', Load(), lineno=168, col_offset=15), [], [], None, None, lineno=168, col_offset=15), lineno=168, col_offset=8), Assign([Name('extensions', Store(), lineno=169, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=169, col_offset=21), 'types_map_inv', Load(), lineno=169, col_offset=21), Index(Name('True', Load(), lineno=169, col_offset=40)), Load(), lineno=169, col_offset=21), 'get', Load(), lineno=169, col_offset=21), [Name('type', Load(), lineno=169, col_offset=50), List([], Load(), lineno=169, col_offset=56)], [], None, None, lineno=169, col_offset=21), lineno=169, col_offset=8), If(UnaryOp(Not(), Name('strict', Load(), lineno=170, col_offset=15), lineno=170, col_offset=11), [For(Name('ext', Store(), lineno=171, col_offset=16), Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=171, col_offset=23), 'types_map_inv', Load(), lineno=171, col_offset=23), Index(Name('False', Load(), lineno=171, col_offset=42)), Load(), lineno=171, col_offset=23), 'get', Load(), lineno=171, col_offset=23), [Name('type', Load(), lineno=171, col_offset=53), List([], Load(), lineno=171, col_offset=59)], [], None, None, lineno=171, col_offset=23), [If(Compare(Name('ext', Load(), lineno=172, col_offset=19), [NotIn()], [Name('extensions', Load(), lineno=172, col_offset=30)], lineno=172, col_offset=19), [Expr(Call(Attribute(Name('extensions', Load(), lineno=173, col_offset=20), 'append', Load(), lineno=173, col_offset=20), [Name('ext', Load(), lineno=173, col_offset=38)], [], None, None, lineno=173, col_offset=20), lineno=173, col_offset=20)], [], lineno=172, col_offset=16)], [], lineno=171, col_offset=12)], [], lineno=170, col_offset=8), Return(Name('extensions', Load(), lineno=174, col_offset=15), lineno=174, col_offset=8)], [], lineno=157, col_offset=4), FunctionDef('guess_extension', arguments([Name('self', Param(), lineno=176, col_offset=24), Name('type', Param(), lineno=176, col_offset=30), Name('strict', Param(), lineno=176, col_offset=36)], None, None, [Name('True', Load(), lineno=176, col_offset=43)]), [Expr(Str("Guess the extension for a file based on its MIME type.\n\n        Return value is a string giving a filename extension,\n        including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data\n        stream, but would be mapped to the MIME type `type' by\n        guess_type().  If no extension can be guessed for `type', None\n        is returned.\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ", lineno=188, col_offset=-1), lineno=188, col_offset=-1), Assign([Name('extensions', Store(), lineno=189, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=189, col_offset=21), 'guess_all_extensions', Load(), lineno=189, col_offset=21), [Name('type', Load(), lineno=189, col_offset=47), Name('strict', Load(), lineno=189, col_offset=53)], [], None, None, lineno=189, col_offset=21), lineno=189, col_offset=8), If(UnaryOp(Not(), Name('extensions', Load(), lineno=190, col_offset=15), lineno=190, col_offset=11), [Return(Name('None', Load(), lineno=191, col_offset=19), lineno=191, col_offset=12)], [], lineno=190, col_offset=8), Return(Subscript(Name('extensions', Load(), lineno=192, col_offset=15), Index(Num(0, lineno=192, col_offset=26)), Load(), lineno=192, col_offset=15), lineno=192, col_offset=8)], [], lineno=176, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=194, col_offset=13), Name('filename', Param(), lineno=194, col_offset=19), Name('strict', Param(), lineno=194, col_offset=29)], None, None, [Name('True', Load(), lineno=194, col_offset=36)]), [Expr(Str('\n        Read a single mime.types-format file, specified by pathname.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ', lineno=201, col_offset=-1), lineno=201, col_offset=-1), With(Call(Name('open', Load(), lineno=202, col_offset=13), [Name('filename', Load(), lineno=202, col_offset=18)], [], None, None, lineno=202, col_offset=13), Name('fp', Store(), lineno=202, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=12), 'readfp', Load(), lineno=203, col_offset=12), [Name('fp', Load(), lineno=203, col_offset=24), Name('strict', Load(), lineno=203, col_offset=28)], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=12)], lineno=202, col_offset=13)], [], lineno=194, col_offset=4), FunctionDef('readfp', arguments([Name('self', Param(), lineno=205, col_offset=15), Name('fp', Param(), lineno=205, col_offset=21), Name('strict', Param(), lineno=205, col_offset=25)], None, None, [Name('True', Load(), lineno=205, col_offset=32)]), [Expr(Str('\n        Read a single mime.types-format file.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ', lineno=212, col_offset=-1), lineno=212, col_offset=-1), While(Num(1, lineno=213, col_offset=14), [Assign([Name('line', Store(), lineno=214, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=214, col_offset=19), 'readline', Load(), lineno=214, col_offset=19), [], [], None, None, lineno=214, col_offset=19), lineno=214, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=215, col_offset=19), lineno=215, col_offset=15), [Break( lineno=216, col_offset=16)], [], lineno=215, col_offset=12), Assign([Name('words', Store(), lineno=217, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=217, col_offset=20), 'split', Load(), lineno=217, col_offset=20), [], [], None, None, lineno=217, col_offset=20), lineno=217, col_offset=12), For(Name('i', Store(), lineno=218, col_offset=16), Call(Name('range', Load(), lineno=218, col_offset=21), [Call(Name('len', Load(), lineno=218, col_offset=27), [Name('words', Load(), lineno=218, col_offset=31)], [], None, None, lineno=218, col_offset=27)], [], None, None, lineno=218, col_offset=21), [If(Compare(Subscript(Subscript(Name('words', Load(), lineno=219, col_offset=19), Index(Name('i', Load(), lineno=219, col_offset=25)), Load(), lineno=219, col_offset=19), Index(Num(0, lineno=219, col_offset=28)), Load(), lineno=219, col_offset=19), [Eq()], [Str('#', lineno=219, col_offset=34)], lineno=219, col_offset=19), [Delete([Subscript(Name('words', Load(), lineno=220, col_offset=24), Slice(Name('i', Load(), lineno=220, col_offset=30), None, None), Del(), lineno=220, col_offset=24)], lineno=220, col_offset=20), Break( lineno=221, col_offset=20)], [], lineno=219, col_offset=16)], [], lineno=218, col_offset=12), If(UnaryOp(Not(), Name('words', Load(), lineno=222, col_offset=19), lineno=222, col_offset=15), [Continue( lineno=223, col_offset=16)], [], lineno=222, col_offset=12), Assign([Tuple([Name('type', Store(), lineno=224, col_offset=12), Name('suffixes', Store(), lineno=224, col_offset=18)], Store(), lineno=224, col_offset=12)], Tuple([Subscript(Name('words', Load(), lineno=224, col_offset=29), Index(Num(0, lineno=224, col_offset=35)), Load(), lineno=224, col_offset=29), Subscript(Name('words', Load(), lineno=224, col_offset=39), Slice(Num(1, lineno=224, col_offset=45), None, None), Load(), lineno=224, col_offset=39)], Load(), lineno=224, col_offset=29), lineno=224, col_offset=12), For(Name('suff', Store(), lineno=225, col_offset=16), Name('suffixes', Load(), lineno=225, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=226, col_offset=16), 'add_type', Load(), lineno=226, col_offset=16), [Name('type', Load(), lineno=226, col_offset=30), BinOp(Str('.', lineno=226, col_offset=36), Add(), Name('suff', Load(), lineno=226, col_offset=42), lineno=226, col_offset=36), Name('strict', Load(), lineno=226, col_offset=48)], [], None, None, lineno=226, col_offset=16), lineno=226, col_offset=16)], [], lineno=225, col_offset=12)], [], lineno=213, col_offset=8)], [], lineno=205, col_offset=4), FunctionDef('read_windows_registry', arguments([Name('self', Param(), lineno=228, col_offset=30), Name('strict', Param(), lineno=228, col_offset=36)], None, None, [Name('True', Load(), lineno=228, col_offset=43)]), [Expr(Str('\n        Load the MIME types database from Windows registry.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ', lineno=235, col_offset=-1), lineno=235, col_offset=-1), If(UnaryOp(Not(), Name('_winreg', Load(), lineno=238, col_offset=15), lineno=238, col_offset=11), [Return(None, lineno=239, col_offset=12)], [], lineno=238, col_offset=8), FunctionDef('enum_types', arguments([Name('mimedb', Param(), lineno=241, col_offset=23)], None, None, []), [Assign([Name('i', Store(), lineno=242, col_offset=12)], Num(0, lineno=242, col_offset=16), lineno=242, col_offset=12), While(Name('True', Load(), lineno=243, col_offset=18), [TryExcept([Assign([Name('ctype', Store(), lineno=245, col_offset=20)], Call(Attribute(Name('_winreg', Load(), lineno=245, col_offset=28), 'EnumKey', Load(), lineno=245, col_offset=28), [Name('mimedb', Load(), lineno=245, col_offset=44), Name('i', Load(), lineno=245, col_offset=52)], [], None, None, lineno=245, col_offset=28), lineno=245, col_offset=20)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=246, col_offset=23), None, [Break( lineno=247, col_offset=20)], lineno=246, col_offset=16)], [], lineno=244, col_offset=16), TryExcept([Assign([Name('ctype', Store(), lineno=249, col_offset=20)], Call(Attribute(Name('ctype', Load(), lineno=249, col_offset=28), 'encode', Load(), lineno=249, col_offset=28), [Name('default_encoding', Load(), lineno=249, col_offset=41)], [], None, None, lineno=249, col_offset=28), lineno=249, col_offset=20)], [ExceptHandler(Name('UnicodeEncodeError', Load(), lineno=250, col_offset=23), None, [Pass( lineno=251, col_offset=20)], lineno=250, col_offset=16)], [Expr(Yield(Name('ctype', Load(), lineno=253, col_offset=26), lineno=253, col_offset=20), lineno=253, col_offset=20)], lineno=248, col_offset=16), AugAssign(Name('i', Store(), lineno=254, col_offset=16), Add(), Num(1, lineno=254, col_offset=21), lineno=254, col_offset=16)], [], lineno=243, col_offset=12)], [], lineno=241, col_offset=8), Assign([Name('default_encoding', Store(), lineno=256, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=256, col_offset=27), 'getdefaultencoding', Load(), lineno=256, col_offset=27), [], [], None, None, lineno=256, col_offset=27), lineno=256, col_offset=8), With(Call(Attribute(Name('_winreg', Load(), lineno=257, col_offset=13), 'OpenKey', Load(), lineno=257, col_offset=13), [Attribute(Name('_winreg', Load(), lineno=257, col_offset=29), 'HKEY_CLASSES_ROOT', Load(), lineno=257, col_offset=29), Str('MIME\\Database\\Content Type', lineno=258, col_offset=29)], [], None, None, lineno=257, col_offset=13), Name('mimedb', Store(), lineno=258, col_offset=63), [For(Name('ctype', Store(), lineno=259, col_offset=16), Call(Name('enum_types', Load(), lineno=259, col_offset=25), [Name('mimedb', Load(), lineno=259, col_offset=36)], [], None, None, lineno=259, col_offset=25), [TryExcept([With(Call(Attribute(Name('_winreg', Load(), lineno=261, col_offset=25), 'OpenKey', Load(), lineno=261, col_offset=25), [Name('mimedb', Load(), lineno=261, col_offset=41), Name('ctype', Load(), lineno=261, col_offset=49)], [], None, None, lineno=261, col_offset=25), Name('key', Store(), lineno=261, col_offset=59), [Assign([Tuple([Name('suffix', Store(), lineno=262, col_offset=24), Name('datatype', Store(), lineno=262, col_offset=32)], Store(), lineno=262, col_offset=24)], Call(Attribute(Name('_winreg', Load(), lineno=262, col_offset=43), 'QueryValueEx', Load(), lineno=262, col_offset=43), [Name('key', Load(), lineno=262, col_offset=64), Str('Extension', lineno=263, col_offset=64)], [], None, None, lineno=262, col_offset=43), lineno=262, col_offset=24)], lineno=261, col_offset=25)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=264, col_offset=23), None, [Continue( lineno=265, col_offset=20)], lineno=264, col_offset=16)], [], lineno=260, col_offset=16), If(Compare(Name('datatype', Load(), lineno=266, col_offset=19), [NotEq()], [Attribute(Name('_winreg', Load(), lineno=266, col_offset=31), 'REG_SZ', Load(), lineno=266, col_offset=31)], lineno=266, col_offset=19), [Continue( lineno=267, col_offset=20)], [], lineno=266, col_offset=16), TryExcept([Assign([Name('suffix', Store(), lineno=269, col_offset=20)], Call(Attribute(Name('suffix', Load(), lineno=269, col_offset=29), 'encode', Load(), lineno=269, col_offset=29), [Name('default_encoding', Load(), lineno=269, col_offset=43)], [], None, None, lineno=269, col_offset=29), lineno=269, col_offset=20)], [ExceptHandler(Name('UnicodeEncodeError', Load(), lineno=270, col_offset=23), None, [Continue( lineno=271, col_offset=20)], lineno=270, col_offset=16)], [], lineno=268, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=272, col_offset=16), 'add_type', Load(), lineno=272, col_offset=16), [Name('ctype', Load(), lineno=272, col_offset=30), Name('suffix', Load(), lineno=272, col_offset=37), Name('strict', Load(), lineno=272, col_offset=45)], [], None, None, lineno=272, col_offset=16), lineno=272, col_offset=16)], [], lineno=259, col_offset=12)], lineno=257, col_offset=13)], [], lineno=228, col_offset=4)], [], lineno=56, col_offset=0), FunctionDef('guess_type', arguments([Name('url', Param(), lineno=275, col_offset=15), Name('strict', Param(), lineno=275, col_offset=20)], None, None, [Name('True', Load(), lineno=275, col_offset=27)]), [Expr(Str('Guess the type of a file based on its URL.\n\n    Return value is a tuple (type, encoding) where type is None if the\n    type can\'t be guessed (no or unknown suffix) or a string of the\n    form type/subtype, usable for a MIME Content-type header; and\n    encoding is None for no encoding or the name of the program used\n    to encode (e.g. compress or gzip).  The mappings are table\n    driven.  Encoding suffixes are case sensitive; type suffixes are\n    first tried case sensitive, then case insensitive.\n\n    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped\n    to ".tar.gz".  (This is table-driven too, using the dictionary\n    suffix_map).\n\n    Optional `strict\' argument when false adds a bunch of commonly found, but\n    non-standard types.\n    ', lineno=292, col_offset=-1), lineno=292, col_offset=-1), If(Compare(Name('_db', Load(), lineno=293, col_offset=7), [Is()], [Name('None', Load(), lineno=293, col_offset=14)], lineno=293, col_offset=7), [Expr(Call(Name('init', Load(), lineno=294, col_offset=8), [], [], None, None, lineno=294, col_offset=8), lineno=294, col_offset=8)], [], lineno=293, col_offset=4), Return(Call(Attribute(Name('_db', Load(), lineno=295, col_offset=11), 'guess_type', Load(), lineno=295, col_offset=11), [Name('url', Load(), lineno=295, col_offset=26), Name('strict', Load(), lineno=295, col_offset=31)], [], None, None, lineno=295, col_offset=11), lineno=295, col_offset=4)], [], lineno=275, col_offset=0), FunctionDef('guess_all_extensions', arguments([Name('type', Param(), lineno=298, col_offset=25), Name('strict', Param(), lineno=298, col_offset=31)], None, None, [Name('True', Load(), lineno=298, col_offset=38)]), [Expr(Str("Guess the extensions for a file based on its MIME type.\n\n    Return value is a list of strings giving the possible filename\n    extensions, including the leading dot ('.').  The extension is not\n    guaranteed to have been associated with any particular data\n    stream, but would be mapped to the MIME type `type' by\n    guess_type().  If no extension can be guessed for `type', None\n    is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    ", lineno=310, col_offset=-1), lineno=310, col_offset=-1), If(Compare(Name('_db', Load(), lineno=311, col_offset=7), [Is()], [Name('None', Load(), lineno=311, col_offset=14)], lineno=311, col_offset=7), [Expr(Call(Name('init', Load(), lineno=312, col_offset=8), [], [], None, None, lineno=312, col_offset=8), lineno=312, col_offset=8)], [], lineno=311, col_offset=4), Return(Call(Attribute(Name('_db', Load(), lineno=313, col_offset=11), 'guess_all_extensions', Load(), lineno=313, col_offset=11), [Name('type', Load(), lineno=313, col_offset=36), Name('strict', Load(), lineno=313, col_offset=42)], [], None, None, lineno=313, col_offset=11), lineno=313, col_offset=4)], [], lineno=298, col_offset=0), FunctionDef('guess_extension', arguments([Name('type', Param(), lineno=315, col_offset=20), Name('strict', Param(), lineno=315, col_offset=26)], None, None, [Name('True', Load(), lineno=315, col_offset=33)]), [Expr(Str("Guess the extension for a file based on its MIME type.\n\n    Return value is a string giving a filename extension, including the\n    leading dot ('.').  The extension is not guaranteed to have been\n    associated with any particular data stream, but would be mapped to the\n    MIME type `type' by guess_type().  If no extension can be guessed for\n    `type', None is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    ", lineno=326, col_offset=-1), lineno=326, col_offset=-1), If(Compare(Name('_db', Load(), lineno=327, col_offset=7), [Is()], [Name('None', Load(), lineno=327, col_offset=14)], lineno=327, col_offset=7), [Expr(Call(Name('init', Load(), lineno=328, col_offset=8), [], [], None, None, lineno=328, col_offset=8), lineno=328, col_offset=8)], [], lineno=327, col_offset=4), Return(Call(Attribute(Name('_db', Load(), lineno=329, col_offset=11), 'guess_extension', Load(), lineno=329, col_offset=11), [Name('type', Load(), lineno=329, col_offset=31), Name('strict', Load(), lineno=329, col_offset=37)], [], None, None, lineno=329, col_offset=11), lineno=329, col_offset=4)], [], lineno=315, col_offset=0), FunctionDef('add_type', arguments([Name('type', Param(), lineno=331, col_offset=13), Name('ext', Param(), lineno=331, col_offset=19), Name('strict', Param(), lineno=331, col_offset=24)], None, None, [Name('True', Load(), lineno=331, col_offset=31)]), [Expr(Str('Add a mapping between a type and an extension.\n\n    When the extension is already known, the new\n    type will replace the old one. When the type\n    is already known the extension will be added\n    to the list of known extensions.\n\n    If strict is true, information will be added to\n    list of standard types, else to the list of non-standard\n    types.\n    ', lineno=342, col_offset=-1), lineno=342, col_offset=-1), If(Compare(Name('_db', Load(), lineno=343, col_offset=7), [Is()], [Name('None', Load(), lineno=343, col_offset=14)], lineno=343, col_offset=7), [Expr(Call(Name('init', Load(), lineno=344, col_offset=8), [], [], None, None, lineno=344, col_offset=8), lineno=344, col_offset=8)], [], lineno=343, col_offset=4), Return(Call(Attribute(Name('_db', Load(), lineno=345, col_offset=11), 'add_type', Load(), lineno=345, col_offset=11), [Name('type', Load(), lineno=345, col_offset=24), Name('ext', Load(), lineno=345, col_offset=30), Name('strict', Load(), lineno=345, col_offset=35)], [], None, None, lineno=345, col_offset=11), lineno=345, col_offset=4)], [], lineno=331, col_offset=0), FunctionDef('init', arguments([Name('files', Param(), lineno=348, col_offset=9)], None, None, [Name('None', Load(), lineno=348, col_offset=15)]), [Global(['suffix_map', 'types_map', 'encodings_map', 'common_types'], lineno=349, col_offset=4), Global(['inited', '_db'], lineno=350, col_offset=4), Assign([Name('inited', Store(), lineno=351, col_offset=4)], Name('True', Load(), lineno=351, col_offset=13), lineno=351, col_offset=4), Assign([Name('db', Store(), lineno=352, col_offset=4)], Call(Name('MimeTypes', Load(), lineno=352, col_offset=9), [], [], None, None, lineno=352, col_offset=9), lineno=352, col_offset=4), If(Compare(Name('files', Load(), lineno=353, col_offset=7), [Is()], [Name('None', Load(), lineno=353, col_offset=16)], lineno=353, col_offset=7), [If(Name('_winreg', Load(), lineno=354, col_offset=11), [Expr(Call(Attribute(Name('db', Load(), lineno=355, col_offset=12), 'read_windows_registry', Load(), lineno=355, col_offset=12), [], [], None, None, lineno=355, col_offset=12), lineno=355, col_offset=12)], [], lineno=354, col_offset=8), Assign([Name('files', Store(), lineno=356, col_offset=8)], Name('knownfiles', Load(), lineno=356, col_offset=16), lineno=356, col_offset=8)], [], lineno=353, col_offset=4), For(Name('file', Store(), lineno=357, col_offset=8), Name('files', Load(), lineno=357, col_offset=16), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=358, col_offset=11), 'path', Load(), lineno=358, col_offset=11), 'isfile', Load(), lineno=358, col_offset=11), [Name('file', Load(), lineno=358, col_offset=26)], [], None, None, lineno=358, col_offset=11), [Expr(Call(Attribute(Name('db', Load(), lineno=359, col_offset=12), 'read', Load(), lineno=359, col_offset=12), [Name('file', Load(), lineno=359, col_offset=20)], [], None, None, lineno=359, col_offset=12), lineno=359, col_offset=12)], [], lineno=358, col_offset=8)], [], lineno=357, col_offset=4), Assign([Name('encodings_map', Store(), lineno=360, col_offset=4)], Attribute(Name('db', Load(), lineno=360, col_offset=20), 'encodings_map', Load(), lineno=360, col_offset=20), lineno=360, col_offset=4), Assign([Name('suffix_map', Store(), lineno=361, col_offset=4)], Attribute(Name('db', Load(), lineno=361, col_offset=17), 'suffix_map', Load(), lineno=361, col_offset=17), lineno=361, col_offset=4), Assign([Name('types_map', Store(), lineno=362, col_offset=4)], Subscript(Attribute(Name('db', Load(), lineno=362, col_offset=16), 'types_map', Load(), lineno=362, col_offset=16), Index(Name('True', Load(), lineno=362, col_offset=29)), Load(), lineno=362, col_offset=16), lineno=362, col_offset=4), Assign([Name('common_types', Store(), lineno=363, col_offset=4)], Subscript(Attribute(Name('db', Load(), lineno=363, col_offset=19), 'types_map', Load(), lineno=363, col_offset=19), Index(Name('False', Load(), lineno=363, col_offset=32)), Load(), lineno=363, col_offset=19), lineno=363, col_offset=4), Assign([Name('_db', Store(), lineno=365, col_offset=4)], Name('db', Load(), lineno=365, col_offset=10), lineno=365, col_offset=4)], [], lineno=348, col_offset=0), FunctionDef('read_mime_types', arguments([Name('file', Param(), lineno=368, col_offset=20)], None, None, []), [TryExcept([Assign([Name('f', Store(), lineno=370, col_offset=8)], Call(Name('open', Load(), lineno=370, col_offset=12), [Name('file', Load(), lineno=370, col_offset=17)], [], None, None, lineno=370, col_offset=12), lineno=370, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=371, col_offset=11), None, [Return(Name('None', Load(), lineno=372, col_offset=15), lineno=372, col_offset=8)], lineno=371, col_offset=4)], [], lineno=369, col_offset=4), Assign([Name('db', Store(), lineno=373, col_offset=4)], Call(Name('MimeTypes', Load(), lineno=373, col_offset=9), [], [], None, None, lineno=373, col_offset=9), lineno=373, col_offset=4), Expr(Call(Attribute(Name('db', Load(), lineno=374, col_offset=4), 'readfp', Load(), lineno=374, col_offset=4), [Name('f', Load(), lineno=374, col_offset=14), Name('True', Load(), lineno=374, col_offset=17)], [], None, None, lineno=374, col_offset=4), lineno=374, col_offset=4), Return(Subscript(Attribute(Name('db', Load(), lineno=375, col_offset=11), 'types_map', Load(), lineno=375, col_offset=11), Index(Name('True', Load(), lineno=375, col_offset=24)), Load(), lineno=375, col_offset=11), lineno=375, col_offset=4)], [], lineno=368, col_offset=0), FunctionDef('_default_mime_types', arguments([], None, None, []), [Global(['suffix_map'], lineno=379, col_offset=4), Global(['encodings_map'], lineno=380, col_offset=4), Global(['types_map'], lineno=381, col_offset=4), Global(['common_types'], lineno=382, col_offset=4), Assign([Name('suffix_map', Store(), lineno=384, col_offset=4)], Dict([Str('.tgz', lineno=385, col_offset=8), Str('.taz', lineno=386, col_offset=8), Str('.tz', lineno=387, col_offset=8), Str('.tbz2', lineno=388, col_offset=8)], [Str('.tar.gz', lineno=385, col_offset=16), Str('.tar.gz', lineno=386, col_offset=16), Str('.tar.gz', lineno=387, col_offset=15), Str('.tar.bz2', lineno=388, col_offset=17)], lineno=384, col_offset=17), lineno=384, col_offset=4), Assign([Name('encodings_map', Store(), lineno=391, col_offset=4)], Dict([Str('.gz', lineno=392, col_offset=8), Str('.Z', lineno=393, col_offset=8), Str('.bz2', lineno=394, col_offset=8)], [Str('gzip', lineno=392, col_offset=15), Str('compress', lineno=393, col_offset=14), Str('bzip2', lineno=394, col_offset=16)], lineno=391, col_offset=20), lineno=391, col_offset=4), Assign([Name('types_map', Store(), lineno=402, col_offset=4)], Dict([Str('.a', lineno=403, col_offset=8), Str('.ai', lineno=404, col_offset=8), Str('.aif', lineno=405, col_offset=8), Str('.aifc', lineno=406, col_offset=8), Str('.aiff', lineno=407, col_offset=8), Str('.au', lineno=408, col_offset=8), Str('.avi', lineno=409, col_offset=8), Str('.bat', lineno=410, col_offset=8), Str('.bcpio', lineno=411, col_offset=8), Str('.bin', lineno=412, col_offset=8), Str('.bmp', lineno=413, col_offset=8), Str('.c', lineno=414, col_offset=8), Str('.cdf', lineno=416, col_offset=8), Str('.cdf', lineno=417, col_offset=8), Str('.cpio', lineno=418, col_offset=8), Str('.csh', lineno=419, col_offset=8), Str('.css', lineno=420, col_offset=8), Str('.dll', lineno=421, col_offset=8), Str('.doc', lineno=422, col_offset=8), Str('.dot', lineno=423, col_offset=8), Str('.dvi', lineno=424, col_offset=8), Str('.eml', lineno=425, col_offset=8), Str('.eps', lineno=426, col_offset=8), Str('.etx', lineno=427, col_offset=8), Str('.exe', lineno=428, col_offset=8), Str('.gif', lineno=429, col_offset=8), Str('.gtar', lineno=430, col_offset=8), Str('.h', lineno=431, col_offset=8), Str('.hdf', lineno=432, col_offset=8), Str('.htm', lineno=433, col_offset=8), Str('.html', lineno=434, col_offset=8), Str('.ief', lineno=435, col_offset=8), Str('.jpe', lineno=436, col_offset=8), Str('.jpeg', lineno=437, col_offset=8), Str('.jpg', lineno=438, col_offset=8), Str('.js', lineno=439, col_offset=8), Str('.ksh', lineno=440, col_offset=8), Str('.latex', lineno=441, col_offset=8), Str('.m1v', lineno=442, col_offset=8), Str('.man', lineno=443, col_offset=8), Str('.me', lineno=444, col_offset=8), Str('.mht', lineno=445, col_offset=8), Str('.mhtml', lineno=446, col_offset=8), Str('.mif', lineno=447, col_offset=8), Str('.mov', lineno=448, col_offset=8), Str('.movie', lineno=449, col_offset=8), Str('.mp2', lineno=450, col_offset=8), Str('.mp3', lineno=451, col_offset=8), Str('.mp4', lineno=452, col_offset=8), Str('.mpa', lineno=453, col_offset=8), Str('.mpe', lineno=454, col_offset=8), Str('.mpeg', lineno=455, col_offset=8), Str('.mpg', lineno=456, col_offset=8), Str('.ms', lineno=457, col_offset=8), Str('.nc', lineno=458, col_offset=8), Str('.nws', lineno=459, col_offset=8), Str('.o', lineno=460, col_offset=8), Str('.obj', lineno=461, col_offset=8), Str('.oda', lineno=462, col_offset=8), Str('.p12', lineno=463, col_offset=8), Str('.p7c', lineno=464, col_offset=8), Str('.pbm', lineno=465, col_offset=8), Str('.pdf', lineno=466, col_offset=8), Str('.pfx', lineno=467, col_offset=8), Str('.pgm', lineno=468, col_offset=8), Str('.pl', lineno=469, col_offset=8), Str('.png', lineno=470, col_offset=8), Str('.pnm', lineno=471, col_offset=8), Str('.pot', lineno=472, col_offset=8), Str('.ppa', lineno=473, col_offset=8), Str('.ppm', lineno=474, col_offset=8), Str('.pps', lineno=475, col_offset=8), Str('.ppt', lineno=476, col_offset=8), Str('.ps', lineno=477, col_offset=8), Str('.pwz', lineno=478, col_offset=8), Str('.py', lineno=479, col_offset=8), Str('.pyc', lineno=480, col_offset=8), Str('.pyo', lineno=481, col_offset=8), Str('.qt', lineno=482, col_offset=8), Str('.ra', lineno=483, col_offset=8), Str('.ram', lineno=484, col_offset=8), Str('.ras', lineno=485, col_offset=8), Str('.rdf', lineno=486, col_offset=8), Str('.rgb', lineno=487, col_offset=8), Str('.roff', lineno=488, col_offset=8), Str('.rtx', lineno=489, col_offset=8), Str('.sgm', lineno=490, col_offset=8), Str('.sgml', lineno=491, col_offset=8), Str('.sh', lineno=492, col_offset=8), Str('.shar', lineno=493, col_offset=8), Str('.snd', lineno=494, col_offset=8), Str('.so', lineno=495, col_offset=8), Str('.src', lineno=496, col_offset=8), Str('.sv4cpio', lineno=497, col_offset=8), Str('.sv4crc', lineno=498, col_offset=8), Str('.swf', lineno=499, col_offset=8), Str('.t', lineno=500, col_offset=8), Str('.tar', lineno=501, col_offset=8), Str('.tcl', lineno=502, col_offset=8), Str('.tex', lineno=503, col_offset=8), Str('.texi', lineno=504, col_offset=8), Str('.texinfo', lineno=505, col_offset=8), Str('.tif', lineno=506, col_offset=8), Str('.tiff', lineno=507, col_offset=8), Str('.tr', lineno=508, col_offset=8), Str('.tsv', lineno=509, col_offset=8), Str('.txt', lineno=510, col_offset=8), Str('.ustar', lineno=511, col_offset=8), Str('.vcf', lineno=512, col_offset=8), Str('.wav', lineno=513, col_offset=8), Str('.wiz', lineno=514, col_offset=8), Str('.wsdl', lineno=515, col_offset=8), Str('.xbm', lineno=516, col_offset=8), Str('.xlb', lineno=517, col_offset=8), Str('.xls', lineno=519, col_offset=8), Str('.xls', lineno=520, col_offset=8), Str('.xml', lineno=521, col_offset=8), Str('.xpdl', lineno=522, col_offset=8), Str('.xpm', lineno=523, col_offset=8), Str('.xsl', lineno=524, col_offset=8), Str('.xwd', lineno=525, col_offset=8), Str('.zip', lineno=526, col_offset=8)], [Str('application/octet-stream', lineno=403, col_offset=20), Str('application/postscript', lineno=404, col_offset=20), Str('audio/x-aiff', lineno=405, col_offset=20), Str('audio/x-aiff', lineno=406, col_offset=20), Str('audio/x-aiff', lineno=407, col_offset=20), Str('audio/basic', lineno=408, col_offset=20), Str('video/x-msvideo', lineno=409, col_offset=20), Str('text/plain', lineno=410, col_offset=20), Str('application/x-bcpio', lineno=411, col_offset=20), Str('application/octet-stream', lineno=412, col_offset=20), Str('image/x-ms-bmp', lineno=413, col_offset=20), Str('text/plain', lineno=414, col_offset=20), Str('application/x-cdf', lineno=416, col_offset=20), Str('application/x-netcdf', lineno=417, col_offset=20), Str('application/x-cpio', lineno=418, col_offset=20), Str('application/x-csh', lineno=419, col_offset=20), Str('text/css', lineno=420, col_offset=20), Str('application/octet-stream', lineno=421, col_offset=20), Str('application/msword', lineno=422, col_offset=20), Str('application/msword', lineno=423, col_offset=20), Str('application/x-dvi', lineno=424, col_offset=20), Str('message/rfc822', lineno=425, col_offset=20), Str('application/postscript', lineno=426, col_offset=20), Str('text/x-setext', lineno=427, col_offset=20), Str('application/octet-stream', lineno=428, col_offset=20), Str('image/gif', lineno=429, col_offset=20), Str('application/x-gtar', lineno=430, col_offset=20), Str('text/plain', lineno=431, col_offset=20), Str('application/x-hdf', lineno=432, col_offset=20), Str('text/html', lineno=433, col_offset=20), Str('text/html', lineno=434, col_offset=20), Str('image/ief', lineno=435, col_offset=20), Str('image/jpeg', lineno=436, col_offset=20), Str('image/jpeg', lineno=437, col_offset=20), Str('image/jpeg', lineno=438, col_offset=20), Str('application/x-javascript', lineno=439, col_offset=20), Str('text/plain', lineno=440, col_offset=20), Str('application/x-latex', lineno=441, col_offset=20), Str('video/mpeg', lineno=442, col_offset=20), Str('application/x-troff-man', lineno=443, col_offset=20), Str('application/x-troff-me', lineno=444, col_offset=20), Str('message/rfc822', lineno=445, col_offset=20), Str('message/rfc822', lineno=446, col_offset=20), Str('application/x-mif', lineno=447, col_offset=20), Str('video/quicktime', lineno=448, col_offset=20), Str('video/x-sgi-movie', lineno=449, col_offset=20), Str('audio/mpeg', lineno=450, col_offset=20), Str('audio/mpeg', lineno=451, col_offset=20), Str('video/mp4', lineno=452, col_offset=20), Str('video/mpeg', lineno=453, col_offset=20), Str('video/mpeg', lineno=454, col_offset=20), Str('video/mpeg', lineno=455, col_offset=20), Str('video/mpeg', lineno=456, col_offset=20), Str('application/x-troff-ms', lineno=457, col_offset=20), Str('application/x-netcdf', lineno=458, col_offset=20), Str('message/rfc822', lineno=459, col_offset=20), Str('application/octet-stream', lineno=460, col_offset=20), Str('application/octet-stream', lineno=461, col_offset=20), Str('application/oda', lineno=462, col_offset=20), Str('application/x-pkcs12', lineno=463, col_offset=20), Str('application/pkcs7-mime', lineno=464, col_offset=20), Str('image/x-portable-bitmap', lineno=465, col_offset=20), Str('application/pdf', lineno=466, col_offset=20), Str('application/x-pkcs12', lineno=467, col_offset=20), Str('image/x-portable-graymap', lineno=468, col_offset=20), Str('text/plain', lineno=469, col_offset=20), Str('image/png', lineno=470, col_offset=20), Str('image/x-portable-anymap', lineno=471, col_offset=20), Str('application/vnd.ms-powerpoint', lineno=472, col_offset=20), Str('application/vnd.ms-powerpoint', lineno=473, col_offset=20), Str('image/x-portable-pixmap', lineno=474, col_offset=20), Str('application/vnd.ms-powerpoint', lineno=475, col_offset=20), Str('application/vnd.ms-powerpoint', lineno=476, col_offset=20), Str('application/postscript', lineno=477, col_offset=20), Str('application/vnd.ms-powerpoint', lineno=478, col_offset=20), Str('text/x-python', lineno=479, col_offset=20), Str('application/x-python-code', lineno=480, col_offset=20), Str('application/x-python-code', lineno=481, col_offset=20), Str('video/quicktime', lineno=482, col_offset=20), Str('audio/x-pn-realaudio', lineno=483, col_offset=20), Str('application/x-pn-realaudio', lineno=484, col_offset=20), Str('image/x-cmu-raster', lineno=485, col_offset=20), Str('application/xml', lineno=486, col_offset=20), Str('image/x-rgb', lineno=487, col_offset=20), Str('application/x-troff', lineno=488, col_offset=20), Str('text/richtext', lineno=489, col_offset=20), Str('text/x-sgml', lineno=490, col_offset=20), Str('text/x-sgml', lineno=491, col_offset=20), Str('application/x-sh', lineno=492, col_offset=20), Str('application/x-shar', lineno=493, col_offset=20), Str('audio/basic', lineno=494, col_offset=20), Str('application/octet-stream', lineno=495, col_offset=20), Str('application/x-wais-source', lineno=496, col_offset=20), Str('application/x-sv4cpio', lineno=497, col_offset=20), Str('application/x-sv4crc', lineno=498, col_offset=20), Str('application/x-shockwave-flash', lineno=499, col_offset=20), Str('application/x-troff', lineno=500, col_offset=20), Str('application/x-tar', lineno=501, col_offset=20), Str('application/x-tcl', lineno=502, col_offset=20), Str('application/x-tex', lineno=503, col_offset=20), Str('application/x-texinfo', lineno=504, col_offset=20), Str('application/x-texinfo', lineno=505, col_offset=20), Str('image/tiff', lineno=506, col_offset=20), Str('image/tiff', lineno=507, col_offset=20), Str('application/x-troff', lineno=508, col_offset=20), Str('text/tab-separated-values', lineno=509, col_offset=20), Str('text/plain', lineno=510, col_offset=20), Str('application/x-ustar', lineno=511, col_offset=20), Str('text/x-vcard', lineno=512, col_offset=20), Str('audio/x-wav', lineno=513, col_offset=20), Str('application/msword', lineno=514, col_offset=20), Str('application/xml', lineno=515, col_offset=20), Str('image/x-xbitmap', lineno=516, col_offset=20), Str('application/vnd.ms-excel', lineno=517, col_offset=20), Str('application/excel', lineno=519, col_offset=20), Str('application/vnd.ms-excel', lineno=520, col_offset=20), Str('text/xml', lineno=521, col_offset=20), Str('application/xml', lineno=522, col_offset=20), Str('image/x-xpixmap', lineno=523, col_offset=20), Str('application/xml', lineno=524, col_offset=20), Str('image/x-xwindowdump', lineno=525, col_offset=20), Str('application/zip', lineno=526, col_offset=20)], lineno=402, col_offset=16), lineno=402, col_offset=4), Assign([Name('common_types', Store(), lineno=533, col_offset=4)], Dict([Str('.jpg', lineno=534, col_offset=8), Str('.mid', lineno=535, col_offset=8), Str('.midi', lineno=536, col_offset=8), Str('.pct', lineno=537, col_offset=8), Str('.pic', lineno=538, col_offset=8), Str('.pict', lineno=539, col_offset=8), Str('.rtf', lineno=540, col_offset=8), Str('.xul', lineno=541, col_offset=8)], [Str('image/jpg', lineno=534, col_offset=17), Str('audio/midi', lineno=535, col_offset=17), Str('audio/midi', lineno=536, col_offset=17), Str('image/pict', lineno=537, col_offset=17), Str('image/pict', lineno=538, col_offset=17), Str('image/pict', lineno=539, col_offset=17), Str('application/rtf', lineno=540, col_offset=17), Str('text/xul', lineno=541, col_offset=17)], lineno=533, col_offset=19), lineno=533, col_offset=4)], [], lineno=378, col_offset=0), Expr(Call(Name('_default_mime_types', Load(), lineno=545, col_offset=0), [], [], None, None, lineno=545, col_offset=0), lineno=545, col_offset=0), If(Compare(Name('__name__', Load(), lineno=548, col_offset=3), [Eq()], [Str('__main__', lineno=548, col_offset=15)], lineno=548, col_offset=3), [Import([alias('getopt', None)], lineno=549, col_offset=4), Assign([Name('USAGE', Store(), lineno=551, col_offset=4)], Str('Usage: mimetypes.py [options] type\n\nOptions:\n    --help / -h       -- print this message and exit\n    --lenient / -l    -- additionally search of some common, but non-standard\n                         types.\n    --extension / -e  -- guess extension instead of type\n\nMore than one type argument may be given.\n', lineno=561, col_offset=-1), lineno=551, col_offset=4), FunctionDef('usage', arguments([Name('code', Param(), lineno=563, col_offset=14), Name('msg', Param(), lineno=563, col_offset=20)], None, None, [Str('', lineno=563, col_offset=24)]), [Print(None, [Name('USAGE', Load(), lineno=564, col_offset=14)], True, lineno=564, col_offset=8), If(Name('msg', Load(), lineno=565, col_offset=11), [Print(None, [Name('msg', Load(), lineno=565, col_offset=22)], True, lineno=565, col_offset=16)], [], lineno=565, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=566, col_offset=8), 'exit', Load(), lineno=566, col_offset=8), [Name('code', Load(), lineno=566, col_offset=17)], [], None, None, lineno=566, col_offset=8), lineno=566, col_offset=8)], [], lineno=563, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=569, col_offset=8), Name('args', Store(), lineno=569, col_offset=14)], Store(), lineno=569, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=569, col_offset=21), 'getopt', Load(), lineno=569, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=569, col_offset=35), 'argv', Load(), lineno=569, col_offset=35), Slice(Num(1, lineno=569, col_offset=44), None, None), Load(), lineno=569, col_offset=35), Str('hle', lineno=569, col_offset=49), List([Str('help', lineno=570, col_offset=36), Str('lenient', lineno=570, col_offset=44), Str('extension', lineno=570, col_offset=55)], Load(), lineno=570, col_offset=35)], [], None, None, lineno=569, col_offset=21), lineno=569, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=571, col_offset=11), 'error', Load(), lineno=571, col_offset=11), Name('msg', Store(), lineno=571, col_offset=25), [Expr(Call(Name('usage', Load(), lineno=572, col_offset=8), [Num(1, lineno=572, col_offset=14), Name('msg', Load(), lineno=572, col_offset=17)], [], None, None, lineno=572, col_offset=8), lineno=572, col_offset=8)], lineno=571, col_offset=4)], [], lineno=568, col_offset=4), Assign([Name('strict', Store(), lineno=574, col_offset=4)], Num(1, lineno=574, col_offset=13), lineno=574, col_offset=4), Assign([Name('extension', Store(), lineno=575, col_offset=4)], Num(0, lineno=575, col_offset=16), lineno=575, col_offset=4), For(Tuple([Name('opt', Store(), lineno=576, col_offset=8), Name('arg', Store(), lineno=576, col_offset=13)], Store(), lineno=576, col_offset=8), Name('opts', Load(), lineno=576, col_offset=20), [If(Compare(Name('opt', Load(), lineno=577, col_offset=11), [In()], [Tuple([Str('-h', lineno=577, col_offset=19), Str('--help', lineno=577, col_offset=25)], Load(), lineno=577, col_offset=19)], lineno=577, col_offset=11), [Expr(Call(Name('usage', Load(), lineno=578, col_offset=12), [Num(0, lineno=578, col_offset=18)], [], None, None, lineno=578, col_offset=12), lineno=578, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=579, col_offset=13), [In()], [Tuple([Str('-l', lineno=579, col_offset=21), Str('--lenient', lineno=579, col_offset=27)], Load(), lineno=579, col_offset=21)], lineno=579, col_offset=13), [Assign([Name('strict', Store(), lineno=580, col_offset=12)], Num(0, lineno=580, col_offset=21), lineno=580, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=581, col_offset=13), [In()], [Tuple([Str('-e', lineno=581, col_offset=21), Str('--extension', lineno=581, col_offset=27)], Load(), lineno=581, col_offset=21)], lineno=581, col_offset=13), [Assign([Name('extension', Store(), lineno=582, col_offset=12)], Num(1, lineno=582, col_offset=24), lineno=582, col_offset=12)], [], lineno=581, col_offset=13)], lineno=579, col_offset=13)], lineno=577, col_offset=8)], [], lineno=576, col_offset=4), For(Name('gtype', Store(), lineno=583, col_offset=8), Name('args', Load(), lineno=583, col_offset=17), [If(Name('extension', Load(), lineno=584, col_offset=11), [Assign([Name('guess', Store(), lineno=585, col_offset=12)], Call(Name('guess_extension', Load(), lineno=585, col_offset=20), [Name('gtype', Load(), lineno=585, col_offset=36), Name('strict', Load(), lineno=585, col_offset=43)], [], None, None, lineno=585, col_offset=20), lineno=585, col_offset=12), If(UnaryOp(Not(), Name('guess', Load(), lineno=586, col_offset=19), lineno=586, col_offset=15), [Print(None, [Str("I don't know anything about type", lineno=586, col_offset=32), Name('gtype', Load(), lineno=586, col_offset=68)], True, lineno=586, col_offset=26)], [Print(None, [Name('guess', Load(), lineno=587, col_offset=24)], True, lineno=587, col_offset=18)], lineno=586, col_offset=12)], [Assign([Tuple([Name('guess', Store(), lineno=589, col_offset=12), Name('encoding', Store(), lineno=589, col_offset=19)], Store(), lineno=589, col_offset=12)], Call(Name('guess_type', Load(), lineno=589, col_offset=30), [Name('gtype', Load(), lineno=589, col_offset=41), Name('strict', Load(), lineno=589, col_offset=48)], [], None, None, lineno=589, col_offset=30), lineno=589, col_offset=12), If(UnaryOp(Not(), Name('guess', Load(), lineno=590, col_offset=19), lineno=590, col_offset=15), [Print(None, [Str("I don't know anything about type", lineno=590, col_offset=32), Name('gtype', Load(), lineno=590, col_offset=68)], True, lineno=590, col_offset=26)], [Print(None, [Str('type:', lineno=591, col_offset=24), Name('guess', Load(), lineno=591, col_offset=33), Str('encoding:', lineno=591, col_offset=40), Name('encoding', Load(), lineno=591, col_offset=53)], True, lineno=591, col_offset=18)], lineno=590, col_offset=12)], lineno=584, col_offset=8)], [], lineno=583, col_offset=4)], [], lineno=548, col_offset=0)])
