Module([Expr(Str('A parser of RFC 2822 and MIME email messages.', lineno=5, col_offset=0), lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('Parser', lineno=7, col_offset=11), Str('HeaderParser', lineno=7, col_offset=21)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), Import([alias('warnings', None)], lineno=9, col_offset=0), ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=10, col_offset=0), ImportFrom('email.feedparser', [alias('FeedParser', None)], 0, lineno=12, col_offset=0), ImportFrom('email.message', [alias('Message', None)], 0, lineno=13, col_offset=0), ClassDef('Parser', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=18, col_offset=17)], 'args', 'kws', []), [Expr(Str("Parser of RFC 2822 and MIME email messages.\n\n        Creates an in-memory object tree representing the email message, which\n        can then be manipulated and turned over to a Generator to return the\n        textual representation of the message.\n\n        The string must be formatted as a block of RFC 2822 headers and header\n        continuation lines, optionally preceeded by a `Unix-from' header.  The\n        header block is terminated either by the end of the string or by a\n        blank line.\n\n        _class is the class to instantiate for new message objects when they\n        must be created.  This class must have a constructor that can take\n        zero arguments.  Default is Message.Message.\n        ", lineno=33, col_offset=-1), lineno=33, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=34, col_offset=11), [Name('args', Load(), lineno=34, col_offset=15)], [], None, None, lineno=34, col_offset=11), [GtE()], [Num(1, lineno=34, col_offset=24)], lineno=34, col_offset=11), [If(Compare(Str('_class', lineno=35, col_offset=15), [In()], [Name('kws', Load(), lineno=35, col_offset=27)], lineno=35, col_offset=15), [Raise(Call(Name('TypeError', Load(), lineno=36, col_offset=22), [Str("Multiple values for keyword arg '_class'", lineno=36, col_offset=32)], [], None, None, lineno=36, col_offset=22), None, None, lineno=36, col_offset=16)], [], lineno=35, col_offset=12), Assign([Subscript(Name('kws', Load(), lineno=37, col_offset=12), Index(Str('_class', lineno=37, col_offset=16)), Store(), lineno=37, col_offset=12)], Subscript(Name('args', Load(), lineno=37, col_offset=28), Index(Num(0, lineno=37, col_offset=33)), Load(), lineno=37, col_offset=28), lineno=37, col_offset=12)], [], lineno=34, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=38, col_offset=11), [Name('args', Load(), lineno=38, col_offset=15)], [], None, None, lineno=38, col_offset=11), [Eq()], [Num(2, lineno=38, col_offset=24)], lineno=38, col_offset=11), [If(Compare(Str('strict', lineno=39, col_offset=15), [In()], [Name('kws', Load(), lineno=39, col_offset=27)], lineno=39, col_offset=15), [Raise(Call(Name('TypeError', Load(), lineno=40, col_offset=22), [Str("Multiple values for keyword arg 'strict'", lineno=40, col_offset=32)], [], None, None, lineno=40, col_offset=22), None, None, lineno=40, col_offset=16)], [], lineno=39, col_offset=12), Assign([Subscript(Name('kws', Load(), lineno=41, col_offset=12), Index(Str('strict', lineno=41, col_offset=16)), Store(), lineno=41, col_offset=12)], Subscript(Name('args', Load(), lineno=41, col_offset=28), Index(Num(1, lineno=41, col_offset=33)), Load(), lineno=41, col_offset=28), lineno=41, col_offset=12)], [], lineno=38, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=42, col_offset=11), [Name('args', Load(), lineno=42, col_offset=15)], [], None, None, lineno=42, col_offset=11), [Gt()], [Num(2, lineno=42, col_offset=23)], lineno=42, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=43, col_offset=18), [Str('Too many arguments', lineno=43, col_offset=28)], [], None, None, lineno=43, col_offset=18), None, None, lineno=43, col_offset=12)], [], lineno=42, col_offset=8), If(Compare(Str('_class', lineno=44, col_offset=11), [In()], [Name('kws', Load(), lineno=44, col_offset=23)], lineno=44, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=45, col_offset=12), '_class', Store(), lineno=45, col_offset=12)], Subscript(Name('kws', Load(), lineno=45, col_offset=26), Index(Str('_class', lineno=45, col_offset=30)), Load(), lineno=45, col_offset=26), lineno=45, col_offset=12), Delete([Subscript(Name('kws', Load(), lineno=46, col_offset=16), Index(Str('_class', lineno=46, col_offset=20)), Del(), lineno=46, col_offset=16)], lineno=46, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=48, col_offset=12), '_class', Store(), lineno=48, col_offset=12)], Name('Message', Load(), lineno=48, col_offset=26), lineno=48, col_offset=12)], lineno=44, col_offset=8), If(Compare(Str('strict', lineno=49, col_offset=11), [In()], [Name('kws', Load(), lineno=49, col_offset=23)], lineno=49, col_offset=11), [Expr(Call(Attribute(Name('warnings', Load(), lineno=50, col_offset=12), 'warn', Load(), lineno=50, col_offset=12), [Str("'strict' argument is deprecated (and ignored)", lineno=50, col_offset=26), Name('DeprecationWarning', Load(), lineno=51, col_offset=26), Num(2, lineno=51, col_offset=46)], [], None, None, lineno=50, col_offset=12), lineno=50, col_offset=12), Delete([Subscript(Name('kws', Load(), lineno=52, col_offset=16), Index(Str('strict', lineno=52, col_offset=20)), Del(), lineno=52, col_offset=16)], lineno=52, col_offset=12)], [], lineno=49, col_offset=8), If(Name('kws', Load(), lineno=53, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=54, col_offset=18), [Str('Unexpected keyword arguments', lineno=54, col_offset=28)], [], None, None, lineno=54, col_offset=18), None, None, lineno=54, col_offset=12)], [], lineno=53, col_offset=8)], [], lineno=18, col_offset=4), FunctionDef('parse', arguments([Name('self', Param(), lineno=56, col_offset=14), Name('fp', Param(), lineno=56, col_offset=20), Name('headersonly', Param(), lineno=56, col_offset=24)], None, None, [Name('False', Load(), lineno=56, col_offset=36)]), [Expr(Str('Create a message structure from the data in a file.\n\n        Reads all the data from the file and returns the root of the message\n        structure.  Optional headersonly is a flag specifying whether to stop\n        parsing after reading the headers or not.  The default is False,\n        meaning it parses the entire contents of the file.\n        ', lineno=63, col_offset=-1), lineno=63, col_offset=-1), Assign([Name('feedparser', Store(), lineno=64, col_offset=8)], Call(Name('FeedParser', Load(), lineno=64, col_offset=21), [Attribute(Name('self', Load(), lineno=64, col_offset=32), '_class', Load(), lineno=64, col_offset=32)], [], None, None, lineno=64, col_offset=21), lineno=64, col_offset=8), If(Name('headersonly', Load(), lineno=65, col_offset=11), [Expr(Call(Attribute(Name('feedparser', Load(), lineno=66, col_offset=12), '_set_headersonly', Load(), lineno=66, col_offset=12), [], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=12)], [], lineno=65, col_offset=8), While(Name('True', Load(), lineno=67, col_offset=14), [Assign([Name('data', Store(), lineno=68, col_offset=12)], Call(Attribute(Name('fp', Load(), lineno=68, col_offset=19), 'read', Load(), lineno=68, col_offset=19), [Num(8192, lineno=68, col_offset=27)], [], None, None, lineno=68, col_offset=19), lineno=68, col_offset=12), If(UnaryOp(Not(), Name('data', Load(), lineno=69, col_offset=19), lineno=69, col_offset=15), [Break( lineno=70, col_offset=16)], [], lineno=69, col_offset=12), Expr(Call(Attribute(Name('feedparser', Load(), lineno=71, col_offset=12), 'feed', Load(), lineno=71, col_offset=12), [Name('data', Load(), lineno=71, col_offset=28)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=12)], [], lineno=67, col_offset=8), Return(Call(Attribute(Name('feedparser', Load(), lineno=72, col_offset=15), 'close', Load(), lineno=72, col_offset=15), [], [], None, None, lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=56, col_offset=4), FunctionDef('parsestr', arguments([Name('self', Param(), lineno=74, col_offset=17), Name('text', Param(), lineno=74, col_offset=23), Name('headersonly', Param(), lineno=74, col_offset=29)], None, None, [Name('False', Load(), lineno=74, col_offset=41)]), [Expr(Str('Create a message structure from a string.\n\n        Returns the root of the message structure.  Optional headersonly is a\n        flag specifying whether to stop parsing after reading the headers or\n        not.  The default is False, meaning it parses the entire contents of\n        the file.\n        ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=82, col_offset=15), 'parse', Load(), lineno=82, col_offset=15), [Call(Name('StringIO', Load(), lineno=82, col_offset=26), [Name('text', Load(), lineno=82, col_offset=35)], [], None, None, lineno=82, col_offset=26)], [keyword('headersonly', Name('headersonly', Load(), lineno=82, col_offset=54))], None, None, lineno=82, col_offset=15), lineno=82, col_offset=8)], [], lineno=74, col_offset=4)], [], lineno=17, col_offset=0), ClassDef('HeaderParser', [Name('Parser', Load(), lineno=86, col_offset=19)], [FunctionDef('parse', arguments([Name('self', Param(), lineno=87, col_offset=14), Name('fp', Param(), lineno=87, col_offset=20), Name('headersonly', Param(), lineno=87, col_offset=24)], None, None, [Name('True', Load(), lineno=87, col_offset=36)]), [Return(Call(Attribute(Name('Parser', Load(), lineno=88, col_offset=15), 'parse', Load(), lineno=88, col_offset=15), [Name('self', Load(), lineno=88, col_offset=28), Name('fp', Load(), lineno=88, col_offset=34), Name('True', Load(), lineno=88, col_offset=38)], [], None, None, lineno=88, col_offset=15), lineno=88, col_offset=8)], [], lineno=87, col_offset=4), FunctionDef('parsestr', arguments([Name('self', Param(), lineno=90, col_offset=17), Name('text', Param(), lineno=90, col_offset=23), Name('headersonly', Param(), lineno=90, col_offset=29)], None, None, [Name('True', Load(), lineno=90, col_offset=41)]), [Return(Call(Attribute(Name('Parser', Load(), lineno=91, col_offset=15), 'parsestr', Load(), lineno=91, col_offset=15), [Name('self', Load(), lineno=91, col_offset=31), Name('text', Load(), lineno=91, col_offset=37), Name('True', Load(), lineno=91, col_offset=43)], [], None, None, lineno=91, col_offset=15), lineno=91, col_offset=8)], [], lineno=90, col_offset=4)], [], lineno=86, col_offset=0)])
