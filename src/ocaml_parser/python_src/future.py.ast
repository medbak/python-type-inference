Module([Expr(Str('Parser for future statements\n\n', lineno=3, col_offset=-1), lineno=3, col_offset=-1), ImportFrom('compiler', [alias('ast', None), alias('walk', None)], 0, lineno=5, col_offset=0), FunctionDef('is_future', arguments([Name('stmt', Param(), lineno=7, col_offset=14)], None, None, []), [Expr(Str('Return true if statement is a well-formed future statement', lineno=8, col_offset=4), lineno=8, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=9, col_offset=11), [Name('stmt', Load(), lineno=9, col_offset=22), Attribute(Name('ast', Load(), lineno=9, col_offset=28), 'From', Load(), lineno=9, col_offset=28)], [], None, None, lineno=9, col_offset=11), lineno=9, col_offset=7), [Return(Num(0, lineno=10, col_offset=15), lineno=10, col_offset=8)], [], lineno=9, col_offset=4), If(Compare(Attribute(Name('stmt', Load(), lineno=11, col_offset=7), 'modname', Load(), lineno=11, col_offset=7), [Eq()], [Str('__future__', lineno=11, col_offset=23)], lineno=11, col_offset=7), [Return(Num(1, lineno=12, col_offset=15), lineno=12, col_offset=8)], [Return(Num(0, lineno=14, col_offset=15), lineno=14, col_offset=8)], lineno=11, col_offset=4)], [], lineno=7, col_offset=0), ClassDef('FutureParser', [], [Assign([Name('features', Store(), lineno=18, col_offset=4)], Tuple([Str('nested_scopes', lineno=18, col_offset=16), Str('generators', lineno=18, col_offset=33), Str('division', lineno=18, col_offset=47), Str('absolute_import', lineno=19, col_offset=16), Str('with_statement', lineno=19, col_offset=35), Str('print_function', lineno=19, col_offset=53), Str('unicode_literals', lineno=20, col_offset=16)], Load(), lineno=18, col_offset=16), lineno=18, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=22, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'found', Store(), lineno=23, col_offset=8)], Dict([], [], lineno=23, col_offset=21), lineno=23, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('visitModule', arguments([Name('self', Param(), lineno=25, col_offset=20), Name('node', Param(), lineno=25, col_offset=26)], None, None, []), [Assign([Name('stmt', Store(), lineno=26, col_offset=8)], Attribute(Name('node', Load(), lineno=26, col_offset=15), 'node', Load(), lineno=26, col_offset=15), lineno=26, col_offset=8), For(Name('s', Store(), lineno=27, col_offset=12), Attribute(Name('stmt', Load(), lineno=27, col_offset=17), 'nodes', Load(), lineno=27, col_offset=17), [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=28, col_offset=19), 'check_stmt', Load(), lineno=28, col_offset=19), [Name('s', Load(), lineno=28, col_offset=35)], [], None, None, lineno=28, col_offset=19), lineno=28, col_offset=15), [Break( lineno=29, col_offset=16)], [], lineno=28, col_offset=12)], [], lineno=27, col_offset=8)], [], lineno=25, col_offset=4), FunctionDef('check_stmt', arguments([Name('self', Param(), lineno=31, col_offset=19), Name('stmt', Param(), lineno=31, col_offset=25)], None, None, []), [If(Call(Name('is_future', Load(), lineno=32, col_offset=11), [Name('stmt', Load(), lineno=32, col_offset=21)], [], None, None, lineno=32, col_offset=11), [For(Tuple([Name('name', Store(), lineno=33, col_offset=16), Name('asname', Store(), lineno=33, col_offset=22)], Store(), lineno=33, col_offset=16), Attribute(Name('stmt', Load(), lineno=33, col_offset=32), 'names', Load(), lineno=33, col_offset=32), [If(Compare(Name('name', Load(), lineno=34, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=34, col_offset=27), 'features', Load(), lineno=34, col_offset=27)], lineno=34, col_offset=19), [Assign([Subscript(Attribute(Name('self', Load(), lineno=35, col_offset=20), 'found', Load(), lineno=35, col_offset=20), Index(Name('name', Load(), lineno=35, col_offset=31)), Store(), lineno=35, col_offset=20)], Num(1, lineno=35, col_offset=39), lineno=35, col_offset=20)], [Raise(Name('SyntaxError', Load(), lineno=37, col_offset=26), BinOp(Str('future feature %s is not defined', lineno=38, col_offset=26), Mod(), Name('name', Load(), lineno=38, col_offset=63), lineno=38, col_offset=26), None, lineno=37, col_offset=20)], lineno=34, col_offset=16)], [], lineno=33, col_offset=12), Assign([Attribute(Name('stmt', Load(), lineno=39, col_offset=12), 'valid_future', Store(), lineno=39, col_offset=12)], Num(1, lineno=39, col_offset=32), lineno=39, col_offset=12), Return(Num(1, lineno=40, col_offset=19), lineno=40, col_offset=12)], [], lineno=32, col_offset=8), Return(Num(0, lineno=41, col_offset=15), lineno=41, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('get_features', arguments([Name('self', Param(), lineno=43, col_offset=21)], None, None, []), [Expr(Str('Return list of features enabled by future statements', lineno=44, col_offset=8), lineno=44, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=45, col_offset=15), 'found', Load(), lineno=45, col_offset=15), 'keys', Load(), lineno=45, col_offset=15), [], [], None, None, lineno=45, col_offset=15), lineno=45, col_offset=8)], [], lineno=43, col_offset=4)], [], lineno=16, col_offset=0), ClassDef('BadFutureParser', [], [Expr(Str('Check for invalid future statements', lineno=48, col_offset=4), lineno=48, col_offset=4), FunctionDef('visitFrom', arguments([Name('self', Param(), lineno=50, col_offset=18), Name('node', Param(), lineno=50, col_offset=24)], None, None, []), [If(Call(Name('hasattr', Load(), lineno=51, col_offset=11), [Name('node', Load(), lineno=51, col_offset=19), Str('valid_future', lineno=51, col_offset=25)], [], None, None, lineno=51, col_offset=11), [Return(None, lineno=52, col_offset=12)], [], lineno=51, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=53, col_offset=11), 'modname', Load(), lineno=53, col_offset=11), [NotEq()], [Str('__future__', lineno=53, col_offset=27)], lineno=53, col_offset=11), [Return(None, lineno=54, col_offset=12)], [], lineno=53, col_offset=8), Raise(Name('SyntaxError', Load(), lineno=55, col_offset=14), BinOp(Str('invalid future statement ', lineno=55, col_offset=27), Add(), Call(Name('repr', Load(), lineno=55, col_offset=57), [Name('node', Load(), lineno=55, col_offset=62)], [], None, None, lineno=55, col_offset=57), lineno=55, col_offset=27), None, lineno=55, col_offset=8)], [], lineno=50, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('find_futures', arguments([Name('node', Param(), lineno=57, col_offset=17)], None, None, []), [Assign([Name('p1', Store(), lineno=58, col_offset=4)], Call(Name('FutureParser', Load(), lineno=58, col_offset=9), [], [], None, None, lineno=58, col_offset=9), lineno=58, col_offset=4), Assign([Name('p2', Store(), lineno=59, col_offset=4)], Call(Name('BadFutureParser', Load(), lineno=59, col_offset=9), [], [], None, None, lineno=59, col_offset=9), lineno=59, col_offset=4), Expr(Call(Name('walk', Load(), lineno=60, col_offset=4), [Name('node', Load(), lineno=60, col_offset=9), Name('p1', Load(), lineno=60, col_offset=15)], [], None, None, lineno=60, col_offset=4), lineno=60, col_offset=4), Expr(Call(Name('walk', Load(), lineno=61, col_offset=4), [Name('node', Load(), lineno=61, col_offset=9), Name('p2', Load(), lineno=61, col_offset=15)], [], None, None, lineno=61, col_offset=4), lineno=61, col_offset=4), Return(Call(Attribute(Name('p1', Load(), lineno=62, col_offset=11), 'get_features', Load(), lineno=62, col_offset=11), [], [], None, None, lineno=62, col_offset=11), lineno=62, col_offset=4)], [], lineno=57, col_offset=0), If(Compare(Name('__name__', Load(), lineno=64, col_offset=3), [Eq()], [Str('__main__', lineno=64, col_offset=15)], lineno=64, col_offset=3), [Import([alias('sys', None)], lineno=65, col_offset=4), ImportFrom('compiler', [alias('parseFile', None), alias('walk', None)], 0, lineno=66, col_offset=4), For(Name('file', Store(), lineno=68, col_offset=8), Subscript(Attribute(Name('sys', Load(), lineno=68, col_offset=16), 'argv', Load(), lineno=68, col_offset=16), Slice(Num(1, lineno=68, col_offset=25), None, None), Load(), lineno=68, col_offset=16), [Print(None, [Name('file', Load(), lineno=69, col_offset=14)], True, lineno=69, col_offset=8), Assign([Name('tree', Store(), lineno=70, col_offset=8)], Call(Name('parseFile', Load(), lineno=70, col_offset=15), [Name('file', Load(), lineno=70, col_offset=25)], [], None, None, lineno=70, col_offset=15), lineno=70, col_offset=8), Assign([Name('v', Store(), lineno=71, col_offset=8)], Call(Name('FutureParser', Load(), lineno=71, col_offset=12), [], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=8), Expr(Call(Name('walk', Load(), lineno=72, col_offset=8), [Name('tree', Load(), lineno=72, col_offset=13), Name('v', Load(), lineno=72, col_offset=19)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Print(None, [Attribute(Name('v', Load(), lineno=73, col_offset=14), 'found', Load(), lineno=73, col_offset=14)], True, lineno=73, col_offset=8), Print(None, [], True, lineno=74, col_offset=8)], [], lineno=68, col_offset=4)], [], lineno=64, col_offset=0)])
