Module([Expr(Str('Tests for binary operators on subtypes of built-in types.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=4, col_offset=0), FunctionDef('gcd', arguments([Name('a', Param(), lineno=6, col_offset=8), Name('b', Param(), lineno=6, col_offset=11)], None, None, []), [Expr(Str("Greatest common divisor using Euclid's algorithm.", lineno=7, col_offset=4), lineno=7, col_offset=4), While(Name('a', Load(), lineno=8, col_offset=10), [Assign([Tuple([Name('a', Store(), lineno=9, col_offset=8), Name('b', Store(), lineno=9, col_offset=11)], Store(), lineno=9, col_offset=8)], Tuple([BinOp(Name('b', Load(), lineno=9, col_offset=15), Mod(), Name('a', Load(), lineno=9, col_offset=17), lineno=9, col_offset=15), Name('a', Load(), lineno=9, col_offset=20)], Load(), lineno=9, col_offset=15), lineno=9, col_offset=8)], [], lineno=8, col_offset=4), Return(Name('b', Load(), lineno=10, col_offset=11), lineno=10, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('isint', arguments([Name('x', Param(), lineno=12, col_offset=10)], None, None, []), [Expr(Str('Test whether an object is an instance of int or long.', lineno=13, col_offset=4), lineno=13, col_offset=4), Return(BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=14, col_offset=11), [Name('x', Load(), lineno=14, col_offset=22), Name('int', Load(), lineno=14, col_offset=25)], [], None, None, lineno=14, col_offset=11), Call(Name('isinstance', Load(), lineno=14, col_offset=33), [Name('x', Load(), lineno=14, col_offset=44), Name('long', Load(), lineno=14, col_offset=47)], [], None, None, lineno=14, col_offset=33)], lineno=14, col_offset=11), lineno=14, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('isnum', arguments([Name('x', Param(), lineno=16, col_offset=10)], None, None, []), [Expr(Str('Test whether an object is an instance of a built-in numeric type.', lineno=17, col_offset=4), lineno=17, col_offset=4), For(Name('T', Store(), lineno=18, col_offset=8), Tuple([Name('int', Load(), lineno=18, col_offset=13), Name('long', Load(), lineno=18, col_offset=18), Name('float', Load(), lineno=18, col_offset=24), Name('complex', Load(), lineno=18, col_offset=31)], Load(), lineno=18, col_offset=13), [If(Call(Name('isinstance', Load(), lineno=19, col_offset=11), [Name('x', Load(), lineno=19, col_offset=22), Name('T', Load(), lineno=19, col_offset=25)], [], None, None, lineno=19, col_offset=11), [Return(Num(1, lineno=20, col_offset=19), lineno=20, col_offset=12)], [], lineno=19, col_offset=8)], [], lineno=18, col_offset=4), Return(Num(0, lineno=21, col_offset=11), lineno=21, col_offset=4)], [], lineno=16, col_offset=0), FunctionDef('isRat', arguments([Name('x', Param(), lineno=23, col_offset=10)], None, None, []), [Expr(Str('Test wheter an object is an instance of the Rat class.', lineno=24, col_offset=4), lineno=24, col_offset=4), Return(Call(Name('isinstance', Load(), lineno=25, col_offset=11), [Name('x', Load(), lineno=25, col_offset=22), Name('Rat', Load(), lineno=25, col_offset=25)], [], None, None, lineno=25, col_offset=11), lineno=25, col_offset=4)], [], lineno=23, col_offset=0), ClassDef('Rat', [Name('object', Load(), lineno=27, col_offset=10)], [Expr(Str('Rational number implemented as a normalized pair of longs.', lineno=29, col_offset=4), lineno=29, col_offset=4), Assign([Name('__slots__', Store(), lineno=31, col_offset=4)], List([Str('_Rat__num', lineno=31, col_offset=17), Str('_Rat__den', lineno=31, col_offset=30)], Load(), lineno=31, col_offset=16), lineno=31, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=33, col_offset=17), Name('num', Param(), lineno=33, col_offset=23), Name('den', Param(), lineno=33, col_offset=31)], None, None, [Num(0L, lineno=33, col_offset=27), Num(1L, lineno=33, col_offset=35)]), [Expr(Str('Constructor: Rat([num[, den]]).\n\n        The arguments must be ints or longs, and default to (0, 1).', lineno=36, col_offset=-1), lineno=36, col_offset=-1), If(UnaryOp(Not(), Call(Name('isint', Load(), lineno=37, col_offset=15), [Name('num', Load(), lineno=37, col_offset=21)], [], None, None, lineno=37, col_offset=15), lineno=37, col_offset=11), [Raise(Name('TypeError', Load(), lineno=38, col_offset=18), BinOp(Str('Rat numerator must be int or long (%r)', lineno=38, col_offset=29), Mod(), Name('num', Load(), lineno=38, col_offset=72), lineno=38, col_offset=29), None, lineno=38, col_offset=12)], [], lineno=37, col_offset=8), If(UnaryOp(Not(), Call(Name('isint', Load(), lineno=39, col_offset=15), [Name('den', Load(), lineno=39, col_offset=21)], [], None, None, lineno=39, col_offset=15), lineno=39, col_offset=11), [Raise(Name('TypeError', Load(), lineno=40, col_offset=18), BinOp(Str('Rat denominator must be int or long (%r)', lineno=40, col_offset=29), Mod(), Name('den', Load(), lineno=40, col_offset=74), lineno=40, col_offset=29), None, lineno=40, col_offset=12)], [], lineno=39, col_offset=8), If(Compare(Name('den', Load(), lineno=42, col_offset=11), [Eq()], [Num(0, lineno=42, col_offset=18)], lineno=42, col_offset=11), [Raise(Name('ZeroDivisionError', Load(), lineno=43, col_offset=18), Str('zero denominator', lineno=43, col_offset=37), None, lineno=43, col_offset=12)], [], lineno=42, col_offset=8), Assign([Name('g', Store(), lineno=44, col_offset=8)], Call(Name('gcd', Load(), lineno=44, col_offset=12), [Name('den', Load(), lineno=44, col_offset=16), Name('num', Load(), lineno=44, col_offset=21)], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=45, col_offset=8), '__num', Store(), lineno=45, col_offset=8)], Call(Name('long', Load(), lineno=45, col_offset=21), [BinOp(Name('num', Load(), lineno=45, col_offset=26), FloorDiv(), Name('g', Load(), lineno=45, col_offset=31), lineno=45, col_offset=26)], [], None, None, lineno=45, col_offset=21), lineno=45, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=46, col_offset=8), '__den', Store(), lineno=46, col_offset=8)], Call(Name('long', Load(), lineno=46, col_offset=21), [BinOp(Name('den', Load(), lineno=46, col_offset=26), FloorDiv(), Name('g', Load(), lineno=46, col_offset=31), lineno=46, col_offset=26)], [], None, None, lineno=46, col_offset=21), lineno=46, col_offset=8)], [], lineno=33, col_offset=4), FunctionDef('_get_num', arguments([Name('self', Param(), lineno=48, col_offset=17)], None, None, []), [Expr(Str("Accessor function for read-only 'num' attribute of Rat.", lineno=49, col_offset=8), lineno=49, col_offset=8), Return(Attribute(Name('self', Load(), lineno=50, col_offset=15), '__num', Load(), lineno=50, col_offset=15), lineno=50, col_offset=8)], [], lineno=48, col_offset=4), Assign([Name('num', Store(), lineno=51, col_offset=4)], Call(Name('property', Load(), lineno=51, col_offset=10), [Name('_get_num', Load(), lineno=51, col_offset=19), Name('None', Load(), lineno=51, col_offset=29)], [], None, None, lineno=51, col_offset=10), lineno=51, col_offset=4), FunctionDef('_get_den', arguments([Name('self', Param(), lineno=53, col_offset=17)], None, None, []), [Expr(Str("Accessor function for read-only 'den' attribute of Rat.", lineno=54, col_offset=8), lineno=54, col_offset=8), Return(Attribute(Name('self', Load(), lineno=55, col_offset=15), '__den', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=53, col_offset=4), Assign([Name('den', Store(), lineno=56, col_offset=4)], Call(Name('property', Load(), lineno=56, col_offset=10), [Name('_get_den', Load(), lineno=56, col_offset=19), Name('None', Load(), lineno=56, col_offset=29)], [], None, None, lineno=56, col_offset=10), lineno=56, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=58, col_offset=17)], None, None, []), [Expr(Str('Convert a Rat to an string resembling a Rat constructor call.', lineno=59, col_offset=8), lineno=59, col_offset=8), Return(BinOp(Str('Rat(%d, %d)', lineno=60, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=60, col_offset=32), '__num', Load(), lineno=60, col_offset=32), Attribute(Name('self', Load(), lineno=60, col_offset=44), '__den', Load(), lineno=60, col_offset=44)], Load(), lineno=60, col_offset=32), lineno=60, col_offset=15), lineno=60, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=62, col_offset=16)], None, None, []), [Expr(Str('Convert a Rat to a string resembling a decimal numeric value.', lineno=63, col_offset=8), lineno=63, col_offset=8), Return(Call(Name('str', Load(), lineno=64, col_offset=15), [Call(Name('float', Load(), lineno=64, col_offset=19), [Name('self', Load(), lineno=64, col_offset=25)], [], None, None, lineno=64, col_offset=19)], [], None, None, lineno=64, col_offset=15), lineno=64, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('__float__', arguments([Name('self', Param(), lineno=66, col_offset=18)], None, None, []), [Expr(Str('Convert a Rat to a float.', lineno=67, col_offset=8), lineno=67, col_offset=8), Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=68, col_offset=15), '__num', Load(), lineno=68, col_offset=15), Mult(), Num(1.0, lineno=68, col_offset=26), lineno=68, col_offset=15), Div(), Attribute(Name('self', Load(), lineno=68, col_offset=30), '__den', Load(), lineno=68, col_offset=30), lineno=68, col_offset=29), lineno=68, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('__int__', arguments([Name('self', Param(), lineno=70, col_offset=16)], None, None, []), [Expr(Str('Convert a Rat to an int; self.den must be 1.', lineno=71, col_offset=8), lineno=71, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=72, col_offset=11), '__den', Load(), lineno=72, col_offset=11), [Eq()], [Num(1, lineno=72, col_offset=25)], lineno=72, col_offset=11), [TryExcept([Return(Call(Name('int', Load(), lineno=74, col_offset=23), [Attribute(Name('self', Load(), lineno=74, col_offset=27), '__num', Load(), lineno=74, col_offset=27)], [], None, None, lineno=74, col_offset=23), lineno=74, col_offset=16)], [ExceptHandler(Name('OverflowError', Load(), lineno=75, col_offset=19), None, [Raise(Name('OverflowError', Load(), lineno=76, col_offset=22), BinOp(Str('%s too large to convert to int', lineno=76, col_offset=38), Mod(), Call(Name('repr', Load(), lineno=77, col_offset=38), [Name('self', Load(), lineno=77, col_offset=43)], [], None, None, lineno=77, col_offset=38), lineno=76, col_offset=38), None, lineno=76, col_offset=16)], lineno=75, col_offset=12)], [], lineno=73, col_offset=12)], [], lineno=72, col_offset=8), Raise(Name('ValueError', Load(), lineno=78, col_offset=14), BinOp(Str("can't convert %s to int", lineno=78, col_offset=26), Mod(), Call(Name('repr', Load(), lineno=78, col_offset=54), [Name('self', Load(), lineno=78, col_offset=59)], [], None, None, lineno=78, col_offset=54), lineno=78, col_offset=26), None, lineno=78, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('__long__', arguments([Name('self', Param(), lineno=80, col_offset=17)], None, None, []), [Expr(Str('Convert a Rat to an long; self.den must be 1.', lineno=81, col_offset=8), lineno=81, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=82, col_offset=11), '__den', Load(), lineno=82, col_offset=11), [Eq()], [Num(1, lineno=82, col_offset=25)], lineno=82, col_offset=11), [Return(Call(Name('long', Load(), lineno=83, col_offset=19), [Attribute(Name('self', Load(), lineno=83, col_offset=24), '__num', Load(), lineno=83, col_offset=24)], [], None, None, lineno=83, col_offset=19), lineno=83, col_offset=12)], [], lineno=82, col_offset=8), Raise(Name('ValueError', Load(), lineno=84, col_offset=14), BinOp(Str("can't convert %s to long", lineno=84, col_offset=26), Mod(), Call(Name('repr', Load(), lineno=84, col_offset=55), [Name('self', Load(), lineno=84, col_offset=60)], [], None, None, lineno=84, col_offset=55), lineno=84, col_offset=26), None, lineno=84, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('__add__', arguments([Name('self', Param(), lineno=86, col_offset=16), Name('other', Param(), lineno=86, col_offset=22)], None, None, []), [Expr(Str('Add two Rats, or a Rat and a number.', lineno=87, col_offset=8), lineno=87, col_offset=8), If(Call(Name('isint', Load(), lineno=88, col_offset=11), [Name('other', Load(), lineno=88, col_offset=17)], [], None, None, lineno=88, col_offset=11), [Assign([Name('other', Store(), lineno=89, col_offset=12)], Call(Name('Rat', Load(), lineno=89, col_offset=20), [Name('other', Load(), lineno=89, col_offset=24)], [], None, None, lineno=89, col_offset=20), lineno=89, col_offset=12)], [], lineno=88, col_offset=8), If(Call(Name('isRat', Load(), lineno=90, col_offset=11), [Name('other', Load(), lineno=90, col_offset=17)], [], None, None, lineno=90, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=91, col_offset=19), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=91, col_offset=23), '__num', Load(), lineno=91, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=91, col_offset=34), '__den', Load(), lineno=91, col_offset=34), lineno=91, col_offset=23), Add(), BinOp(Attribute(Name('other', Load(), lineno=91, col_offset=48), '__num', Load(), lineno=91, col_offset=48), Mult(), Attribute(Name('self', Load(), lineno=91, col_offset=60), '__den', Load(), lineno=91, col_offset=60), lineno=91, col_offset=48), lineno=91, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=92, col_offset=23), '__den', Load(), lineno=92, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=92, col_offset=34), '__den', Load(), lineno=92, col_offset=34), lineno=92, col_offset=23)], [], None, None, lineno=91, col_offset=19), lineno=91, col_offset=12)], [], lineno=90, col_offset=8), If(Call(Name('isnum', Load(), lineno=93, col_offset=11), [Name('other', Load(), lineno=93, col_offset=17)], [], None, None, lineno=93, col_offset=11), [Return(BinOp(Call(Name('float', Load(), lineno=94, col_offset=19), [Name('self', Load(), lineno=94, col_offset=25)], [], None, None, lineno=94, col_offset=19), Add(), Name('other', Load(), lineno=94, col_offset=33), lineno=94, col_offset=19), lineno=94, col_offset=12)], [], lineno=93, col_offset=8), Return(Name('NotImplemented', Load(), lineno=95, col_offset=15), lineno=95, col_offset=8)], [], lineno=86, col_offset=4), Assign([Name('__radd__', Store(), lineno=97, col_offset=4)], Name('__add__', Load(), lineno=97, col_offset=15), lineno=97, col_offset=4), FunctionDef('__sub__', arguments([Name('self', Param(), lineno=99, col_offset=16), Name('other', Param(), lineno=99, col_offset=22)], None, None, []), [Expr(Str('Subtract two Rats, or a Rat and a number.', lineno=100, col_offset=8), lineno=100, col_offset=8), If(Call(Name('isint', Load(), lineno=101, col_offset=11), [Name('other', Load(), lineno=101, col_offset=17)], [], None, None, lineno=101, col_offset=11), [Assign([Name('other', Store(), lineno=102, col_offset=12)], Call(Name('Rat', Load(), lineno=102, col_offset=20), [Name('other', Load(), lineno=102, col_offset=24)], [], None, None, lineno=102, col_offset=20), lineno=102, col_offset=12)], [], lineno=101, col_offset=8), If(Call(Name('isRat', Load(), lineno=103, col_offset=11), [Name('other', Load(), lineno=103, col_offset=17)], [], None, None, lineno=103, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=104, col_offset=19), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=104, col_offset=23), '__num', Load(), lineno=104, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=104, col_offset=34), '__den', Load(), lineno=104, col_offset=34), lineno=104, col_offset=23), Sub(), BinOp(Attribute(Name('other', Load(), lineno=104, col_offset=48), '__num', Load(), lineno=104, col_offset=48), Mult(), Attribute(Name('self', Load(), lineno=104, col_offset=60), '__den', Load(), lineno=104, col_offset=60), lineno=104, col_offset=48), lineno=104, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=105, col_offset=23), '__den', Load(), lineno=105, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=105, col_offset=34), '__den', Load(), lineno=105, col_offset=34), lineno=105, col_offset=23)], [], None, None, lineno=104, col_offset=19), lineno=104, col_offset=12)], [], lineno=103, col_offset=8), If(Call(Name('isnum', Load(), lineno=106, col_offset=11), [Name('other', Load(), lineno=106, col_offset=17)], [], None, None, lineno=106, col_offset=11), [Return(BinOp(Call(Name('float', Load(), lineno=107, col_offset=19), [Name('self', Load(), lineno=107, col_offset=25)], [], None, None, lineno=107, col_offset=19), Sub(), Name('other', Load(), lineno=107, col_offset=33), lineno=107, col_offset=19), lineno=107, col_offset=12)], [], lineno=106, col_offset=8), Return(Name('NotImplemented', Load(), lineno=108, col_offset=15), lineno=108, col_offset=8)], [], lineno=99, col_offset=4), FunctionDef('__rsub__', arguments([Name('self', Param(), lineno=110, col_offset=17), Name('other', Param(), lineno=110, col_offset=23)], None, None, []), [Expr(Str('Subtract two Rats, or a Rat and a number (reversed args).', lineno=111, col_offset=8), lineno=111, col_offset=8), If(Call(Name('isint', Load(), lineno=112, col_offset=11), [Name('other', Load(), lineno=112, col_offset=17)], [], None, None, lineno=112, col_offset=11), [Assign([Name('other', Store(), lineno=113, col_offset=12)], Call(Name('Rat', Load(), lineno=113, col_offset=20), [Name('other', Load(), lineno=113, col_offset=24)], [], None, None, lineno=113, col_offset=20), lineno=113, col_offset=12)], [], lineno=112, col_offset=8), If(Call(Name('isRat', Load(), lineno=114, col_offset=11), [Name('other', Load(), lineno=114, col_offset=17)], [], None, None, lineno=114, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=115, col_offset=19), [BinOp(BinOp(Attribute(Name('other', Load(), lineno=115, col_offset=23), '__num', Load(), lineno=115, col_offset=23), Mult(), Attribute(Name('self', Load(), lineno=115, col_offset=35), '__den', Load(), lineno=115, col_offset=35), lineno=115, col_offset=23), Sub(), BinOp(Attribute(Name('self', Load(), lineno=115, col_offset=48), '__num', Load(), lineno=115, col_offset=48), Mult(), Attribute(Name('other', Load(), lineno=115, col_offset=59), '__den', Load(), lineno=115, col_offset=59), lineno=115, col_offset=48), lineno=115, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=116, col_offset=23), '__den', Load(), lineno=116, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=116, col_offset=34), '__den', Load(), lineno=116, col_offset=34), lineno=116, col_offset=23)], [], None, None, lineno=115, col_offset=19), lineno=115, col_offset=12)], [], lineno=114, col_offset=8), If(Call(Name('isnum', Load(), lineno=117, col_offset=11), [Name('other', Load(), lineno=117, col_offset=17)], [], None, None, lineno=117, col_offset=11), [Return(BinOp(Name('other', Load(), lineno=118, col_offset=19), Sub(), Call(Name('float', Load(), lineno=118, col_offset=27), [Name('self', Load(), lineno=118, col_offset=33)], [], None, None, lineno=118, col_offset=27), lineno=118, col_offset=19), lineno=118, col_offset=12)], [], lineno=117, col_offset=8), Return(Name('NotImplemented', Load(), lineno=119, col_offset=15), lineno=119, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('__mul__', arguments([Name('self', Param(), lineno=121, col_offset=16), Name('other', Param(), lineno=121, col_offset=22)], None, None, []), [Expr(Str('Multiply two Rats, or a Rat and a number.', lineno=122, col_offset=8), lineno=122, col_offset=8), If(Call(Name('isRat', Load(), lineno=123, col_offset=11), [Name('other', Load(), lineno=123, col_offset=17)], [], None, None, lineno=123, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=124, col_offset=19), [BinOp(Attribute(Name('self', Load(), lineno=124, col_offset=23), '__num', Load(), lineno=124, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=124, col_offset=34), '__num', Load(), lineno=124, col_offset=34), lineno=124, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=124, col_offset=47), '__den', Load(), lineno=124, col_offset=47), Mult(), Attribute(Name('other', Load(), lineno=124, col_offset=58), '__den', Load(), lineno=124, col_offset=58), lineno=124, col_offset=47)], [], None, None, lineno=124, col_offset=19), lineno=124, col_offset=12)], [], lineno=123, col_offset=8), If(Call(Name('isint', Load(), lineno=125, col_offset=11), [Name('other', Load(), lineno=125, col_offset=17)], [], None, None, lineno=125, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=126, col_offset=19), [BinOp(Attribute(Name('self', Load(), lineno=126, col_offset=23), '__num', Load(), lineno=126, col_offset=23), Mult(), Name('other', Load(), lineno=126, col_offset=34), lineno=126, col_offset=23), Attribute(Name('self', Load(), lineno=126, col_offset=41), '__den', Load(), lineno=126, col_offset=41)], [], None, None, lineno=126, col_offset=19), lineno=126, col_offset=12)], [], lineno=125, col_offset=8), If(Call(Name('isnum', Load(), lineno=127, col_offset=11), [Name('other', Load(), lineno=127, col_offset=17)], [], None, None, lineno=127, col_offset=11), [Return(BinOp(Call(Name('float', Load(), lineno=128, col_offset=19), [Name('self', Load(), lineno=128, col_offset=25)], [], None, None, lineno=128, col_offset=19), Mult(), Name('other', Load(), lineno=128, col_offset=31), lineno=128, col_offset=19), lineno=128, col_offset=12)], [], lineno=127, col_offset=8), Return(Name('NotImplemented', Load(), lineno=129, col_offset=15), lineno=129, col_offset=8)], [], lineno=121, col_offset=4), Assign([Name('__rmul__', Store(), lineno=131, col_offset=4)], Name('__mul__', Load(), lineno=131, col_offset=15), lineno=131, col_offset=4), FunctionDef('__truediv__', arguments([Name('self', Param(), lineno=133, col_offset=20), Name('other', Param(), lineno=133, col_offset=26)], None, None, []), [Expr(Str('Divide two Rats, or a Rat and a number.', lineno=134, col_offset=8), lineno=134, col_offset=8), If(Call(Name('isRat', Load(), lineno=135, col_offset=11), [Name('other', Load(), lineno=135, col_offset=17)], [], None, None, lineno=135, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=136, col_offset=19), [BinOp(Attribute(Name('self', Load(), lineno=136, col_offset=23), '__num', Load(), lineno=136, col_offset=23), Mult(), Attribute(Name('other', Load(), lineno=136, col_offset=34), '__den', Load(), lineno=136, col_offset=34), lineno=136, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=136, col_offset=47), '__den', Load(), lineno=136, col_offset=47), Mult(), Attribute(Name('other', Load(), lineno=136, col_offset=58), '__num', Load(), lineno=136, col_offset=58), lineno=136, col_offset=47)], [], None, None, lineno=136, col_offset=19), lineno=136, col_offset=12)], [], lineno=135, col_offset=8), If(Call(Name('isint', Load(), lineno=137, col_offset=11), [Name('other', Load(), lineno=137, col_offset=17)], [], None, None, lineno=137, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=138, col_offset=19), [Attribute(Name('self', Load(), lineno=138, col_offset=23), '__num', Load(), lineno=138, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=138, col_offset=35), '__den', Load(), lineno=138, col_offset=35), Mult(), Name('other', Load(), lineno=138, col_offset=46), lineno=138, col_offset=35)], [], None, None, lineno=138, col_offset=19), lineno=138, col_offset=12)], [], lineno=137, col_offset=8), If(Call(Name('isnum', Load(), lineno=139, col_offset=11), [Name('other', Load(), lineno=139, col_offset=17)], [], None, None, lineno=139, col_offset=11), [Return(BinOp(Call(Name('float', Load(), lineno=140, col_offset=19), [Name('self', Load(), lineno=140, col_offset=25)], [], None, None, lineno=140, col_offset=19), Div(), Name('other', Load(), lineno=140, col_offset=33), lineno=140, col_offset=19), lineno=140, col_offset=12)], [], lineno=139, col_offset=8), Return(Name('NotImplemented', Load(), lineno=141, col_offset=15), lineno=141, col_offset=8)], [], lineno=133, col_offset=4), Assign([Name('__div__', Store(), lineno=143, col_offset=4)], Name('__truediv__', Load(), lineno=143, col_offset=14), lineno=143, col_offset=4), FunctionDef('__rtruediv__', arguments([Name('self', Param(), lineno=145, col_offset=21), Name('other', Param(), lineno=145, col_offset=27)], None, None, []), [Expr(Str('Divide two Rats, or a Rat and a number (reversed args).', lineno=146, col_offset=8), lineno=146, col_offset=8), If(Call(Name('isRat', Load(), lineno=147, col_offset=11), [Name('other', Load(), lineno=147, col_offset=17)], [], None, None, lineno=147, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=148, col_offset=19), [BinOp(Attribute(Name('other', Load(), lineno=148, col_offset=23), '__num', Load(), lineno=148, col_offset=23), Mult(), Attribute(Name('self', Load(), lineno=148, col_offset=35), '__den', Load(), lineno=148, col_offset=35), lineno=148, col_offset=23), BinOp(Attribute(Name('other', Load(), lineno=148, col_offset=47), '__den', Load(), lineno=148, col_offset=47), Mult(), Attribute(Name('self', Load(), lineno=148, col_offset=59), '__num', Load(), lineno=148, col_offset=59), lineno=148, col_offset=47)], [], None, None, lineno=148, col_offset=19), lineno=148, col_offset=12)], [], lineno=147, col_offset=8), If(Call(Name('isint', Load(), lineno=149, col_offset=11), [Name('other', Load(), lineno=149, col_offset=17)], [], None, None, lineno=149, col_offset=11), [Return(Call(Name('Rat', Load(), lineno=150, col_offset=19), [BinOp(Name('other', Load(), lineno=150, col_offset=23), Mult(), Attribute(Name('self', Load(), lineno=150, col_offset=29), '__den', Load(), lineno=150, col_offset=29), lineno=150, col_offset=23), Attribute(Name('self', Load(), lineno=150, col_offset=41), '__num', Load(), lineno=150, col_offset=41)], [], None, None, lineno=150, col_offset=19), lineno=150, col_offset=12)], [], lineno=149, col_offset=8), If(Call(Name('isnum', Load(), lineno=151, col_offset=11), [Name('other', Load(), lineno=151, col_offset=17)], [], None, None, lineno=151, col_offset=11), [Return(BinOp(Name('other', Load(), lineno=152, col_offset=19), Div(), Call(Name('float', Load(), lineno=152, col_offset=27), [Name('self', Load(), lineno=152, col_offset=33)], [], None, None, lineno=152, col_offset=27), lineno=152, col_offset=19), lineno=152, col_offset=12)], [], lineno=151, col_offset=8), Return(Name('NotImplemented', Load(), lineno=153, col_offset=15), lineno=153, col_offset=8)], [], lineno=145, col_offset=4), Assign([Name('__rdiv__', Store(), lineno=155, col_offset=4)], Name('__rtruediv__', Load(), lineno=155, col_offset=15), lineno=155, col_offset=4), FunctionDef('__floordiv__', arguments([Name('self', Param(), lineno=157, col_offset=21), Name('other', Param(), lineno=157, col_offset=27)], None, None, []), [Expr(Str('Divide two Rats, returning the floored result.', lineno=158, col_offset=8), lineno=158, col_offset=8), If(Call(Name('isint', Load(), lineno=159, col_offset=11), [Name('other', Load(), lineno=159, col_offset=17)], [], None, None, lineno=159, col_offset=11), [Assign([Name('other', Store(), lineno=160, col_offset=12)], Call(Name('Rat', Load(), lineno=160, col_offset=20), [Name('other', Load(), lineno=160, col_offset=24)], [], None, None, lineno=160, col_offset=20), lineno=160, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isRat', Load(), lineno=161, col_offset=17), [Name('other', Load(), lineno=161, col_offset=23)], [], None, None, lineno=161, col_offset=17), lineno=161, col_offset=13), [Return(Name('NotImplemented', Load(), lineno=162, col_offset=19), lineno=162, col_offset=12)], [], lineno=161, col_offset=13)], lineno=159, col_offset=8), Assign([Name('x', Store(), lineno=163, col_offset=8)], BinOp(Name('self', Load(), lineno=163, col_offset=12), Div(), Name('other', Load(), lineno=163, col_offset=17), lineno=163, col_offset=12), lineno=163, col_offset=8), Return(BinOp(Attribute(Name('x', Load(), lineno=164, col_offset=15), '__num', Load(), lineno=164, col_offset=15), FloorDiv(), Attribute(Name('x', Load(), lineno=164, col_offset=26), '__den', Load(), lineno=164, col_offset=26), lineno=164, col_offset=15), lineno=164, col_offset=8)], [], lineno=157, col_offset=4), FunctionDef('__rfloordiv__', arguments([Name('self', Param(), lineno=166, col_offset=22), Name('other', Param(), lineno=166, col_offset=28)], None, None, []), [Expr(Str('Divide two Rats, returning the floored result (reversed args).', lineno=167, col_offset=8), lineno=167, col_offset=8), Assign([Name('x', Store(), lineno=168, col_offset=8)], BinOp(Name('other', Load(), lineno=168, col_offset=12), Div(), Name('self', Load(), lineno=168, col_offset=18), lineno=168, col_offset=12), lineno=168, col_offset=8), Return(BinOp(Attribute(Name('x', Load(), lineno=169, col_offset=15), '__num', Load(), lineno=169, col_offset=15), FloorDiv(), Attribute(Name('x', Load(), lineno=169, col_offset=26), '__den', Load(), lineno=169, col_offset=26), lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=166, col_offset=4), FunctionDef('__divmod__', arguments([Name('self', Param(), lineno=171, col_offset=19), Name('other', Param(), lineno=171, col_offset=25)], None, None, []), [Expr(Str('Divide two Rats, returning quotient and remainder.', lineno=172, col_offset=8), lineno=172, col_offset=8), If(Call(Name('isint', Load(), lineno=173, col_offset=11), [Name('other', Load(), lineno=173, col_offset=17)], [], None, None, lineno=173, col_offset=11), [Assign([Name('other', Store(), lineno=174, col_offset=12)], Call(Name('Rat', Load(), lineno=174, col_offset=20), [Name('other', Load(), lineno=174, col_offset=24)], [], None, None, lineno=174, col_offset=20), lineno=174, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isRat', Load(), lineno=175, col_offset=17), [Name('other', Load(), lineno=175, col_offset=23)], [], None, None, lineno=175, col_offset=17), lineno=175, col_offset=13), [Return(Name('NotImplemented', Load(), lineno=176, col_offset=19), lineno=176, col_offset=12)], [], lineno=175, col_offset=13)], lineno=173, col_offset=8), Assign([Name('x', Store(), lineno=177, col_offset=8)], BinOp(Name('self', Load(), lineno=177, col_offset=12), FloorDiv(), Name('other', Load(), lineno=177, col_offset=18), lineno=177, col_offset=12), lineno=177, col_offset=8), Return(Tuple([Name('x', Load(), lineno=178, col_offset=16), BinOp(Name('self', Load(), lineno=178, col_offset=19), Sub(), BinOp(Name('other', Load(), lineno=178, col_offset=26), Mult(), Name('x', Load(), lineno=178, col_offset=34), lineno=178, col_offset=26), lineno=178, col_offset=19)], Load(), lineno=178, col_offset=16), lineno=178, col_offset=8)], [], lineno=171, col_offset=4), FunctionDef('__rdivmod__', arguments([Name('self', Param(), lineno=180, col_offset=20), Name('other', Param(), lineno=180, col_offset=26)], None, None, []), [Expr(Str('Divide two Rats, returning quotient and remainder (reversed args).', lineno=181, col_offset=8), lineno=181, col_offset=8), If(Call(Name('isint', Load(), lineno=182, col_offset=11), [Name('other', Load(), lineno=182, col_offset=17)], [], None, None, lineno=182, col_offset=11), [Assign([Name('other', Store(), lineno=183, col_offset=12)], Call(Name('Rat', Load(), lineno=183, col_offset=20), [Name('other', Load(), lineno=183, col_offset=24)], [], None, None, lineno=183, col_offset=20), lineno=183, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isRat', Load(), lineno=184, col_offset=17), [Name('other', Load(), lineno=184, col_offset=23)], [], None, None, lineno=184, col_offset=17), lineno=184, col_offset=13), [Return(Name('NotImplemented', Load(), lineno=185, col_offset=19), lineno=185, col_offset=12)], [], lineno=184, col_offset=13)], lineno=182, col_offset=8), Return(Call(Name('divmod', Load(), lineno=186, col_offset=15), [Name('other', Load(), lineno=186, col_offset=22), Name('self', Load(), lineno=186, col_offset=29)], [], None, None, lineno=186, col_offset=15), lineno=186, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('__mod__', arguments([Name('self', Param(), lineno=188, col_offset=16), Name('other', Param(), lineno=188, col_offset=22)], None, None, []), [Expr(Str('Take one Rat modulo another.', lineno=189, col_offset=8), lineno=189, col_offset=8), Return(Subscript(Call(Name('divmod', Load(), lineno=190, col_offset=15), [Name('self', Load(), lineno=190, col_offset=22), Name('other', Load(), lineno=190, col_offset=28)], [], None, None, lineno=190, col_offset=15), Index(Num(1, lineno=190, col_offset=35)), Load(), lineno=190, col_offset=15), lineno=190, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('__rmod__', arguments([Name('self', Param(), lineno=192, col_offset=17), Name('other', Param(), lineno=192, col_offset=23)], None, None, []), [Expr(Str('Take one Rat modulo another (reversed args).', lineno=193, col_offset=8), lineno=193, col_offset=8), Return(Subscript(Call(Name('divmod', Load(), lineno=194, col_offset=15), [Name('other', Load(), lineno=194, col_offset=22), Name('self', Load(), lineno=194, col_offset=29)], [], None, None, lineno=194, col_offset=15), Index(Num(1, lineno=194, col_offset=35)), Load(), lineno=194, col_offset=15), lineno=194, col_offset=8)], [], lineno=192, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=196, col_offset=15), Name('other', Param(), lineno=196, col_offset=21)], None, None, []), [Expr(Str('Compare two Rats for equality.', lineno=197, col_offset=8), lineno=197, col_offset=8), If(Call(Name('isint', Load(), lineno=198, col_offset=11), [Name('other', Load(), lineno=198, col_offset=17)], [], None, None, lineno=198, col_offset=11), [Return(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=199, col_offset=19), '__den', Load(), lineno=199, col_offset=19), [Eq()], [Num(1, lineno=199, col_offset=33)], lineno=199, col_offset=19), Compare(Attribute(Name('self', Load(), lineno=199, col_offset=39), '__num', Load(), lineno=199, col_offset=39), [Eq()], [Name('other', Load(), lineno=199, col_offset=53)], lineno=199, col_offset=39)], lineno=199, col_offset=19), lineno=199, col_offset=12)], [], lineno=198, col_offset=8), If(Call(Name('isRat', Load(), lineno=200, col_offset=11), [Name('other', Load(), lineno=200, col_offset=17)], [], None, None, lineno=200, col_offset=11), [Return(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=201, col_offset=19), '__num', Load(), lineno=201, col_offset=19), [Eq()], [Attribute(Name('other', Load(), lineno=201, col_offset=33), '__num', Load(), lineno=201, col_offset=33)], lineno=201, col_offset=19), Compare(Attribute(Name('self', Load(), lineno=201, col_offset=49), '__den', Load(), lineno=201, col_offset=49), [Eq()], [Attribute(Name('other', Load(), lineno=201, col_offset=63), '__den', Load(), lineno=201, col_offset=63)], lineno=201, col_offset=49)], lineno=201, col_offset=19), lineno=201, col_offset=12)], [], lineno=200, col_offset=8), If(Call(Name('isnum', Load(), lineno=202, col_offset=11), [Name('other', Load(), lineno=202, col_offset=17)], [], None, None, lineno=202, col_offset=11), [Return(Compare(Call(Name('float', Load(), lineno=203, col_offset=19), [Name('self', Load(), lineno=203, col_offset=25)], [], None, None, lineno=203, col_offset=19), [Eq()], [Name('other', Load(), lineno=203, col_offset=34)], lineno=203, col_offset=19), lineno=203, col_offset=12)], [], lineno=202, col_offset=8), Return(Name('NotImplemented', Load(), lineno=204, col_offset=15), lineno=204, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=206, col_offset=15), Name('other', Param(), lineno=206, col_offset=21)], None, None, []), [Expr(Str('Compare two Rats for inequality.', lineno=207, col_offset=8), lineno=207, col_offset=8), Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=208, col_offset=19), [Eq()], [Name('other', Load(), lineno=208, col_offset=27)], lineno=208, col_offset=19), lineno=208, col_offset=15), lineno=208, col_offset=8)], [], lineno=206, col_offset=4), Assign([Name('__hash__', Store(), lineno=211, col_offset=4)], Name('None', Load(), lineno=211, col_offset=15), lineno=211, col_offset=4)], [], lineno=27, col_offset=0), ClassDef('RatTestCase', [Attribute(Name('unittest', Load(), lineno=213, col_offset=18), 'TestCase', Load(), lineno=213, col_offset=18)], [Expr(Str('Unit tests for Rat class and its support utilities.', lineno=214, col_offset=4), lineno=214, col_offset=4), FunctionDef('test_gcd', arguments([Name('self', Param(), lineno=216, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=217, col_offset=8), 'assertEqual', Load(), lineno=217, col_offset=8), [Call(Name('gcd', Load(), lineno=217, col_offset=25), [Num(10, lineno=217, col_offset=29), Num(12, lineno=217, col_offset=33)], [], None, None, lineno=217, col_offset=25), Num(2, lineno=217, col_offset=38)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=218, col_offset=8), 'assertEqual', Load(), lineno=218, col_offset=8), [Call(Name('gcd', Load(), lineno=218, col_offset=25), [Num(10, lineno=218, col_offset=29), Num(15, lineno=218, col_offset=33)], [], None, None, lineno=218, col_offset=25), Num(5, lineno=218, col_offset=38)], [], None, None, lineno=218, col_offset=8), lineno=218, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertEqual', Load(), lineno=219, col_offset=8), [Call(Name('gcd', Load(), lineno=219, col_offset=25), [Num(10, lineno=219, col_offset=29), Num(11, lineno=219, col_offset=33)], [], None, None, lineno=219, col_offset=25), Num(1, lineno=219, col_offset=38)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=220, col_offset=8), 'assertEqual', Load(), lineno=220, col_offset=8), [Call(Name('gcd', Load(), lineno=220, col_offset=25), [Num(100, lineno=220, col_offset=29), Num(15, lineno=220, col_offset=34)], [], None, None, lineno=220, col_offset=25), Num(5, lineno=220, col_offset=39)], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=8), 'assertEqual', Load(), lineno=221, col_offset=8), [Call(Name('gcd', Load(), lineno=221, col_offset=25), [Num(-10, lineno=221, col_offset=30), Num(2, lineno=221, col_offset=34)], [], None, None, lineno=221, col_offset=25), Num(-2, lineno=221, col_offset=39)], [], None, None, lineno=221, col_offset=8), lineno=221, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=222, col_offset=8), 'assertEqual', Load(), lineno=222, col_offset=8), [Call(Name('gcd', Load(), lineno=222, col_offset=25), [Num(10, lineno=222, col_offset=29), Num(-2, lineno=222, col_offset=34)], [], None, None, lineno=222, col_offset=25), Num(2, lineno=222, col_offset=38)], [], None, None, lineno=222, col_offset=8), lineno=222, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), 'assertEqual', Load(), lineno=223, col_offset=8), [Call(Name('gcd', Load(), lineno=223, col_offset=25), [Num(-10, lineno=223, col_offset=30), Num(-2, lineno=223, col_offset=35)], [], None, None, lineno=223, col_offset=25), Num(-2, lineno=223, col_offset=40)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), For(Name('i', Store(), lineno=224, col_offset=12), Call(Name('range', Load(), lineno=224, col_offset=17), [Num(1, lineno=224, col_offset=23), Num(20, lineno=224, col_offset=26)], [], None, None, lineno=224, col_offset=17), [For(Name('j', Store(), lineno=225, col_offset=16), Call(Name('range', Load(), lineno=225, col_offset=21), [Num(1, lineno=225, col_offset=27), Num(20, lineno=225, col_offset=30)], [], None, None, lineno=225, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=226, col_offset=16), 'assertTrue', Load(), lineno=226, col_offset=16), [Compare(Call(Name('gcd', Load(), lineno=226, col_offset=32), [Name('i', Load(), lineno=226, col_offset=36), Name('j', Load(), lineno=226, col_offset=39)], [], None, None, lineno=226, col_offset=32), [Gt()], [Num(0, lineno=226, col_offset=44)], lineno=226, col_offset=32)], [], None, None, lineno=226, col_offset=16), lineno=226, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=227, col_offset=16), 'assertTrue', Load(), lineno=227, col_offset=16), [Compare(Call(Name('gcd', Load(), lineno=227, col_offset=32), [UnaryOp(USub(), Name('i', Load(), lineno=227, col_offset=37), lineno=227, col_offset=36), Name('j', Load(), lineno=227, col_offset=40)], [], None, None, lineno=227, col_offset=32), [Lt()], [Num(0, lineno=227, col_offset=45)], lineno=227, col_offset=32)], [], None, None, lineno=227, col_offset=16), lineno=227, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=16), 'assertTrue', Load(), lineno=228, col_offset=16), [Compare(Call(Name('gcd', Load(), lineno=228, col_offset=32), [Name('i', Load(), lineno=228, col_offset=36), UnaryOp(USub(), Name('j', Load(), lineno=228, col_offset=40), lineno=228, col_offset=39)], [], None, None, lineno=228, col_offset=32), [Gt()], [Num(0, lineno=228, col_offset=45)], lineno=228, col_offset=32)], [], None, None, lineno=228, col_offset=16), lineno=228, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=229, col_offset=16), 'assertTrue', Load(), lineno=229, col_offset=16), [Compare(Call(Name('gcd', Load(), lineno=229, col_offset=32), [UnaryOp(USub(), Name('i', Load(), lineno=229, col_offset=37), lineno=229, col_offset=36), UnaryOp(USub(), Name('j', Load(), lineno=229, col_offset=41), lineno=229, col_offset=40)], [], None, None, lineno=229, col_offset=32), [Lt()], [Num(0, lineno=229, col_offset=46)], lineno=229, col_offset=32)], [], None, None, lineno=229, col_offset=16), lineno=229, col_offset=16)], [], lineno=225, col_offset=12)], [], lineno=224, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('test_constructor', arguments([Name('self', Param(), lineno=231, col_offset=25)], None, None, []), [Assign([Name('a', Store(), lineno=232, col_offset=8)], Call(Name('Rat', Load(), lineno=232, col_offset=12), [Num(10, lineno=232, col_offset=16), Num(15, lineno=232, col_offset=20)], [], None, None, lineno=232, col_offset=12), lineno=232, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=233, col_offset=8), 'assertEqual', Load(), lineno=233, col_offset=8), [Attribute(Name('a', Load(), lineno=233, col_offset=25), 'num', Load(), lineno=233, col_offset=25), Num(2, lineno=233, col_offset=32)], [], None, None, lineno=233, col_offset=8), lineno=233, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=8), 'assertEqual', Load(), lineno=234, col_offset=8), [Attribute(Name('a', Load(), lineno=234, col_offset=25), 'den', Load(), lineno=234, col_offset=25), Num(3, lineno=234, col_offset=32)], [], None, None, lineno=234, col_offset=8), lineno=234, col_offset=8), Assign([Name('a', Store(), lineno=235, col_offset=8)], Call(Name('Rat', Load(), lineno=235, col_offset=12), [Num(10L, lineno=235, col_offset=16), Num(15L, lineno=235, col_offset=21)], [], None, None, lineno=235, col_offset=12), lineno=235, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=236, col_offset=8), 'assertEqual', Load(), lineno=236, col_offset=8), [Attribute(Name('a', Load(), lineno=236, col_offset=25), 'num', Load(), lineno=236, col_offset=25), Num(2, lineno=236, col_offset=32)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=237, col_offset=8), 'assertEqual', Load(), lineno=237, col_offset=8), [Attribute(Name('a', Load(), lineno=237, col_offset=25), 'den', Load(), lineno=237, col_offset=25), Num(3, lineno=237, col_offset=32)], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8), Assign([Name('a', Store(), lineno=238, col_offset=8)], Call(Name('Rat', Load(), lineno=238, col_offset=12), [Num(10, lineno=238, col_offset=16), Num(-15, lineno=238, col_offset=21)], [], None, None, lineno=238, col_offset=12), lineno=238, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=239, col_offset=8), 'assertEqual', Load(), lineno=239, col_offset=8), [Attribute(Name('a', Load(), lineno=239, col_offset=25), 'num', Load(), lineno=239, col_offset=25), Num(-2, lineno=239, col_offset=33)], [], None, None, lineno=239, col_offset=8), lineno=239, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=240, col_offset=8), 'assertEqual', Load(), lineno=240, col_offset=8), [Attribute(Name('a', Load(), lineno=240, col_offset=25), 'den', Load(), lineno=240, col_offset=25), Num(3, lineno=240, col_offset=32)], [], None, None, lineno=240, col_offset=8), lineno=240, col_offset=8), Assign([Name('a', Store(), lineno=241, col_offset=8)], Call(Name('Rat', Load(), lineno=241, col_offset=12), [Num(-10, lineno=241, col_offset=17), Num(15, lineno=241, col_offset=21)], [], None, None, lineno=241, col_offset=12), lineno=241, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=242, col_offset=8), 'assertEqual', Load(), lineno=242, col_offset=8), [Attribute(Name('a', Load(), lineno=242, col_offset=25), 'num', Load(), lineno=242, col_offset=25), Num(-2, lineno=242, col_offset=33)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=243, col_offset=8), 'assertEqual', Load(), lineno=243, col_offset=8), [Attribute(Name('a', Load(), lineno=243, col_offset=25), 'den', Load(), lineno=243, col_offset=25), Num(3, lineno=243, col_offset=32)], [], None, None, lineno=243, col_offset=8), lineno=243, col_offset=8), Assign([Name('a', Store(), lineno=244, col_offset=8)], Call(Name('Rat', Load(), lineno=244, col_offset=12), [Num(-10, lineno=244, col_offset=17), Num(-15, lineno=244, col_offset=22)], [], None, None, lineno=244, col_offset=12), lineno=244, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=245, col_offset=8), 'assertEqual', Load(), lineno=245, col_offset=8), [Attribute(Name('a', Load(), lineno=245, col_offset=25), 'num', Load(), lineno=245, col_offset=25), Num(2, lineno=245, col_offset=32)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=8), 'assertEqual', Load(), lineno=246, col_offset=8), [Attribute(Name('a', Load(), lineno=246, col_offset=25), 'den', Load(), lineno=246, col_offset=25), Num(3, lineno=246, col_offset=32)], [], None, None, lineno=246, col_offset=8), lineno=246, col_offset=8), Assign([Name('a', Store(), lineno=247, col_offset=8)], Call(Name('Rat', Load(), lineno=247, col_offset=12), [Num(7, lineno=247, col_offset=16)], [], None, None, lineno=247, col_offset=12), lineno=247, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=248, col_offset=8), 'assertEqual', Load(), lineno=248, col_offset=8), [Attribute(Name('a', Load(), lineno=248, col_offset=25), 'num', Load(), lineno=248, col_offset=25), Num(7, lineno=248, col_offset=32)], [], None, None, lineno=248, col_offset=8), lineno=248, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=249, col_offset=8), 'assertEqual', Load(), lineno=249, col_offset=8), [Attribute(Name('a', Load(), lineno=249, col_offset=25), 'den', Load(), lineno=249, col_offset=25), Num(1, lineno=249, col_offset=32)], [], None, None, lineno=249, col_offset=8), lineno=249, col_offset=8), TryExcept([Assign([Name('a', Store(), lineno=251, col_offset=12)], Call(Name('Rat', Load(), lineno=251, col_offset=16), [Num(1, lineno=251, col_offset=20), Num(0, lineno=251, col_offset=23)], [], None, None, lineno=251, col_offset=16), lineno=251, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=252, col_offset=15), None, [Pass( lineno=253, col_offset=12)], lineno=252, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=255, col_offset=12), 'fail', Load(), lineno=255, col_offset=12), [Str("Rat(1, 0) didn't raise ZeroDivisionError", lineno=255, col_offset=22)], [], None, None, lineno=255, col_offset=12), lineno=255, col_offset=12)], lineno=250, col_offset=8), For(Name('bad', Store(), lineno=256, col_offset=12), Tuple([Str('0', lineno=256, col_offset=19), Num(0.0, lineno=256, col_offset=24), Num(0j, lineno=256, col_offset=29), Tuple([], Load(), lineno=256, col_offset=33), List([], Load(), lineno=256, col_offset=37), Dict([], [], lineno=256, col_offset=41), Name('None', Load(), lineno=256, col_offset=45), Name('Rat', Load(), lineno=256, col_offset=51), Name('unittest', Load(), lineno=256, col_offset=56)], Load(), lineno=256, col_offset=19), [TryExcept([Assign([Name('a', Store(), lineno=258, col_offset=16)], Call(Name('Rat', Load(), lineno=258, col_offset=20), [Name('bad', Load(), lineno=258, col_offset=24)], [], None, None, lineno=258, col_offset=20), lineno=258, col_offset=16)], [ExceptHandler(Name('TypeError', Load(), lineno=259, col_offset=19), None, [Pass( lineno=260, col_offset=16)], lineno=259, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=262, col_offset=16), 'fail', Load(), lineno=262, col_offset=16), [BinOp(Str("Rat(%r) didn't raise TypeError", lineno=262, col_offset=26), Mod(), Name('bad', Load(), lineno=262, col_offset=61), lineno=262, col_offset=26)], [], None, None, lineno=262, col_offset=16), lineno=262, col_offset=16)], lineno=257, col_offset=12), TryExcept([Assign([Name('a', Store(), lineno=264, col_offset=16)], Call(Name('Rat', Load(), lineno=264, col_offset=20), [Num(1, lineno=264, col_offset=24), Name('bad', Load(), lineno=264, col_offset=27)], [], None, None, lineno=264, col_offset=20), lineno=264, col_offset=16)], [ExceptHandler(Name('TypeError', Load(), lineno=265, col_offset=19), None, [Pass( lineno=266, col_offset=16)], lineno=265, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=268, col_offset=16), 'fail', Load(), lineno=268, col_offset=16), [BinOp(Str("Rat(1, %r) didn't raise TypeError", lineno=268, col_offset=26), Mod(), Name('bad', Load(), lineno=268, col_offset=64), lineno=268, col_offset=26)], [], None, None, lineno=268, col_offset=16), lineno=268, col_offset=16)], lineno=263, col_offset=12)], [], lineno=256, col_offset=8)], [], lineno=231, col_offset=4), FunctionDef('test_add', arguments([Name('self', Param(), lineno=270, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=271, col_offset=8), 'assertEqual', Load(), lineno=271, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=271, col_offset=25), [Num(2, lineno=271, col_offset=29), Num(3, lineno=271, col_offset=32)], [], None, None, lineno=271, col_offset=25), Add(), Call(Name('Rat', Load(), lineno=271, col_offset=37), [Num(1, lineno=271, col_offset=41), Num(3, lineno=271, col_offset=44)], [], None, None, lineno=271, col_offset=37), lineno=271, col_offset=25), Num(1, lineno=271, col_offset=48)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=272, col_offset=8), 'assertEqual', Load(), lineno=272, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=272, col_offset=25), [Num(2, lineno=272, col_offset=29), Num(3, lineno=272, col_offset=32)], [], None, None, lineno=272, col_offset=25), Add(), Num(1, lineno=272, col_offset=37), lineno=272, col_offset=25), Call(Name('Rat', Load(), lineno=272, col_offset=40), [Num(5, lineno=272, col_offset=44), Num(3, lineno=272, col_offset=47)], [], None, None, lineno=272, col_offset=40)], [], None, None, lineno=272, col_offset=8), lineno=272, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=273, col_offset=8), 'assertEqual', Load(), lineno=273, col_offset=8), [BinOp(Num(1, lineno=273, col_offset=25), Add(), Call(Name('Rat', Load(), lineno=273, col_offset=29), [Num(2, lineno=273, col_offset=33), Num(3, lineno=273, col_offset=36)], [], None, None, lineno=273, col_offset=29), lineno=273, col_offset=25), Call(Name('Rat', Load(), lineno=273, col_offset=40), [Num(5, lineno=273, col_offset=44), Num(3, lineno=273, col_offset=47)], [], None, None, lineno=273, col_offset=40)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=8), 'assertEqual', Load(), lineno=274, col_offset=8), [BinOp(Num(1.0, lineno=274, col_offset=25), Add(), Call(Name('Rat', Load(), lineno=274, col_offset=31), [Num(1, lineno=274, col_offset=35), Num(2, lineno=274, col_offset=38)], [], None, None, lineno=274, col_offset=31), lineno=274, col_offset=25), Num(1.5, lineno=274, col_offset=42)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=275, col_offset=8), 'assertEqual', Load(), lineno=275, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=275, col_offset=25), [Num(1, lineno=275, col_offset=29), Num(2, lineno=275, col_offset=32)], [], None, None, lineno=275, col_offset=25), Add(), Num(1.0, lineno=275, col_offset=37), lineno=275, col_offset=25), Num(1.5, lineno=275, col_offset=42)], [], None, None, lineno=275, col_offset=8), lineno=275, col_offset=8)], [], lineno=270, col_offset=4), FunctionDef('test_sub', arguments([Name('self', Param(), lineno=277, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=278, col_offset=8), 'assertEqual', Load(), lineno=278, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=278, col_offset=25), [Num(7, lineno=278, col_offset=29), Num(2, lineno=278, col_offset=32)], [], None, None, lineno=278, col_offset=25), Sub(), Call(Name('Rat', Load(), lineno=278, col_offset=37), [Num(7, lineno=278, col_offset=41), Num(5, lineno=278, col_offset=44)], [], None, None, lineno=278, col_offset=37), lineno=278, col_offset=25), Call(Name('Rat', Load(), lineno=278, col_offset=48), [Num(21, lineno=278, col_offset=52), Num(10, lineno=278, col_offset=56)], [], None, None, lineno=278, col_offset=48)], [], None, None, lineno=278, col_offset=8), lineno=278, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=8), 'assertEqual', Load(), lineno=279, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=279, col_offset=25), [Num(7, lineno=279, col_offset=29), Num(5, lineno=279, col_offset=32)], [], None, None, lineno=279, col_offset=25), Sub(), Num(1, lineno=279, col_offset=37), lineno=279, col_offset=25), Call(Name('Rat', Load(), lineno=279, col_offset=40), [Num(2, lineno=279, col_offset=44), Num(5, lineno=279, col_offset=47)], [], None, None, lineno=279, col_offset=40)], [], None, None, lineno=279, col_offset=8), lineno=279, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=8), 'assertEqual', Load(), lineno=280, col_offset=8), [BinOp(Num(1, lineno=280, col_offset=25), Sub(), Call(Name('Rat', Load(), lineno=280, col_offset=29), [Num(3, lineno=280, col_offset=33), Num(5, lineno=280, col_offset=36)], [], None, None, lineno=280, col_offset=29), lineno=280, col_offset=25), Call(Name('Rat', Load(), lineno=280, col_offset=40), [Num(2, lineno=280, col_offset=44), Num(5, lineno=280, col_offset=47)], [], None, None, lineno=280, col_offset=40)], [], None, None, lineno=280, col_offset=8), lineno=280, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=8), 'assertEqual', Load(), lineno=281, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=281, col_offset=25), [Num(3, lineno=281, col_offset=29), Num(2, lineno=281, col_offset=32)], [], None, None, lineno=281, col_offset=25), Sub(), Num(1.0, lineno=281, col_offset=37), lineno=281, col_offset=25), Num(0.5, lineno=281, col_offset=42)], [], None, None, lineno=281, col_offset=8), lineno=281, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=282, col_offset=8), 'assertEqual', Load(), lineno=282, col_offset=8), [BinOp(Num(1.0, lineno=282, col_offset=25), Sub(), Call(Name('Rat', Load(), lineno=282, col_offset=31), [Num(1, lineno=282, col_offset=35), Num(2, lineno=282, col_offset=38)], [], None, None, lineno=282, col_offset=31), lineno=282, col_offset=25), Num(0.5, lineno=282, col_offset=42)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8)], [], lineno=277, col_offset=4), FunctionDef('test_mul', arguments([Name('self', Param(), lineno=284, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=285, col_offset=8), 'assertEqual', Load(), lineno=285, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=285, col_offset=25), [Num(2, lineno=285, col_offset=29), Num(3, lineno=285, col_offset=32)], [], None, None, lineno=285, col_offset=25), Mult(), Call(Name('Rat', Load(), lineno=285, col_offset=37), [Num(5, lineno=285, col_offset=41), Num(7, lineno=285, col_offset=44)], [], None, None, lineno=285, col_offset=37), lineno=285, col_offset=25), Call(Name('Rat', Load(), lineno=285, col_offset=48), [Num(10, lineno=285, col_offset=52), Num(21, lineno=285, col_offset=56)], [], None, None, lineno=285, col_offset=48)], [], None, None, lineno=285, col_offset=8), lineno=285, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=8), 'assertEqual', Load(), lineno=286, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=286, col_offset=25), [Num(10, lineno=286, col_offset=29), Num(3, lineno=286, col_offset=33)], [], None, None, lineno=286, col_offset=25), Mult(), Num(3, lineno=286, col_offset=38), lineno=286, col_offset=25), Num(10, lineno=286, col_offset=41)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=287, col_offset=8), 'assertEqual', Load(), lineno=287, col_offset=8), [BinOp(Num(3, lineno=287, col_offset=25), Mult(), Call(Name('Rat', Load(), lineno=287, col_offset=29), [Num(10, lineno=287, col_offset=33), Num(3, lineno=287, col_offset=37)], [], None, None, lineno=287, col_offset=29), lineno=287, col_offset=25), Num(10, lineno=287, col_offset=41)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=288, col_offset=8), 'assertEqual', Load(), lineno=288, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=288, col_offset=25), [Num(10, lineno=288, col_offset=29), Num(5, lineno=288, col_offset=33)], [], None, None, lineno=288, col_offset=25), Mult(), Num(0.5, lineno=288, col_offset=38), lineno=288, col_offset=25), Num(1.0, lineno=288, col_offset=43)], [], None, None, lineno=288, col_offset=8), lineno=288, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=289, col_offset=8), 'assertEqual', Load(), lineno=289, col_offset=8), [BinOp(Num(0.5, lineno=289, col_offset=25), Mult(), Call(Name('Rat', Load(), lineno=289, col_offset=31), [Num(10, lineno=289, col_offset=35), Num(5, lineno=289, col_offset=39)], [], None, None, lineno=289, col_offset=31), lineno=289, col_offset=25), Num(1.0, lineno=289, col_offset=43)], [], None, None, lineno=289, col_offset=8), lineno=289, col_offset=8)], [], lineno=284, col_offset=4), FunctionDef('test_div', arguments([Name('self', Param(), lineno=291, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=292, col_offset=8), 'assertEqual', Load(), lineno=292, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=292, col_offset=25), [Num(10, lineno=292, col_offset=29), Num(3, lineno=292, col_offset=33)], [], None, None, lineno=292, col_offset=25), Div(), Call(Name('Rat', Load(), lineno=292, col_offset=38), [Num(5, lineno=292, col_offset=42), Num(7, lineno=292, col_offset=45)], [], None, None, lineno=292, col_offset=38), lineno=292, col_offset=25), Call(Name('Rat', Load(), lineno=292, col_offset=49), [Num(14, lineno=292, col_offset=53), Num(3, lineno=292, col_offset=57)], [], None, None, lineno=292, col_offset=49)], [], None, None, lineno=292, col_offset=8), lineno=292, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=293, col_offset=8), 'assertEqual', Load(), lineno=293, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=293, col_offset=25), [Num(10, lineno=293, col_offset=29), Num(3, lineno=293, col_offset=33)], [], None, None, lineno=293, col_offset=25), Div(), Num(3, lineno=293, col_offset=38), lineno=293, col_offset=25), Call(Name('Rat', Load(), lineno=293, col_offset=41), [Num(10, lineno=293, col_offset=45), Num(9, lineno=293, col_offset=49)], [], None, None, lineno=293, col_offset=41)], [], None, None, lineno=293, col_offset=8), lineno=293, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=294, col_offset=8), 'assertEqual', Load(), lineno=294, col_offset=8), [BinOp(Num(2, lineno=294, col_offset=25), Div(), Call(Name('Rat', Load(), lineno=294, col_offset=29), [Num(5, lineno=294, col_offset=33)], [], None, None, lineno=294, col_offset=29), lineno=294, col_offset=25), Call(Name('Rat', Load(), lineno=294, col_offset=37), [Num(2, lineno=294, col_offset=41), Num(5, lineno=294, col_offset=44)], [], None, None, lineno=294, col_offset=37)], [], None, None, lineno=294, col_offset=8), lineno=294, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=295, col_offset=8), 'assertEqual', Load(), lineno=295, col_offset=8), [BinOp(Num(3.0, lineno=295, col_offset=25), Mult(), Call(Name('Rat', Load(), lineno=295, col_offset=31), [Num(1, lineno=295, col_offset=35), Num(2, lineno=295, col_offset=38)], [], None, None, lineno=295, col_offset=31), lineno=295, col_offset=25), Num(1.5, lineno=295, col_offset=42)], [], None, None, lineno=295, col_offset=8), lineno=295, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=296, col_offset=8), 'assertEqual', Load(), lineno=296, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=296, col_offset=25), [Num(1, lineno=296, col_offset=29), Num(2, lineno=296, col_offset=32)], [], None, None, lineno=296, col_offset=25), Mult(), Num(3.0, lineno=296, col_offset=37), lineno=296, col_offset=25), Num(1.5, lineno=296, col_offset=42)], [], None, None, lineno=296, col_offset=8), lineno=296, col_offset=8)], [], lineno=291, col_offset=4), FunctionDef('test_floordiv', arguments([Name('self', Param(), lineno=298, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=299, col_offset=8), 'assertEqual', Load(), lineno=299, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=299, col_offset=25), [Num(10, lineno=299, col_offset=29)], [], None, None, lineno=299, col_offset=25), FloorDiv(), Call(Name('Rat', Load(), lineno=299, col_offset=36), [Num(4, lineno=299, col_offset=40)], [], None, None, lineno=299, col_offset=36), lineno=299, col_offset=25), Num(2, lineno=299, col_offset=44)], [], None, None, lineno=299, col_offset=8), lineno=299, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=300, col_offset=8), 'assertEqual', Load(), lineno=300, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=300, col_offset=25), [Num(10, lineno=300, col_offset=29), Num(3, lineno=300, col_offset=33)], [], None, None, lineno=300, col_offset=25), FloorDiv(), Call(Name('Rat', Load(), lineno=300, col_offset=39), [Num(4, lineno=300, col_offset=43), Num(3, lineno=300, col_offset=46)], [], None, None, lineno=300, col_offset=39), lineno=300, col_offset=25), Num(2, lineno=300, col_offset=50)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=301, col_offset=8), 'assertEqual', Load(), lineno=301, col_offset=8), [BinOp(Call(Name('Rat', Load(), lineno=301, col_offset=25), [Num(10, lineno=301, col_offset=29)], [], None, None, lineno=301, col_offset=25), FloorDiv(), Num(4, lineno=301, col_offset=36), lineno=301, col_offset=25), Num(2, lineno=301, col_offset=39)], [], None, None, lineno=301, col_offset=8), lineno=301, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=302, col_offset=8), 'assertEqual', Load(), lineno=302, col_offset=8), [BinOp(Num(10, lineno=302, col_offset=25), FloorDiv(), Call(Name('Rat', Load(), lineno=302, col_offset=31), [Num(4, lineno=302, col_offset=35)], [], None, None, lineno=302, col_offset=31), lineno=302, col_offset=25), Num(2, lineno=302, col_offset=39)], [], None, None, lineno=302, col_offset=8), lineno=302, col_offset=8)], [], lineno=298, col_offset=4), FunctionDef('test_eq', arguments([Name('self', Param(), lineno=304, col_offset=16)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=305, col_offset=8), 'assertEqual', Load(), lineno=305, col_offset=8), [Call(Name('Rat', Load(), lineno=305, col_offset=25), [Num(10, lineno=305, col_offset=29)], [], None, None, lineno=305, col_offset=25), Call(Name('Rat', Load(), lineno=305, col_offset=34), [Num(20, lineno=305, col_offset=38), Num(2, lineno=305, col_offset=42)], [], None, None, lineno=305, col_offset=34)], [], None, None, lineno=305, col_offset=8), lineno=305, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=8), 'assertEqual', Load(), lineno=306, col_offset=8), [Call(Name('Rat', Load(), lineno=306, col_offset=25), [Num(10, lineno=306, col_offset=29)], [], None, None, lineno=306, col_offset=25), Num(10, lineno=306, col_offset=34)], [], None, None, lineno=306, col_offset=8), lineno=306, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=307, col_offset=8), 'assertEqual', Load(), lineno=307, col_offset=8), [Num(10, lineno=307, col_offset=25), Call(Name('Rat', Load(), lineno=307, col_offset=29), [Num(10, lineno=307, col_offset=33)], [], None, None, lineno=307, col_offset=29)], [], None, None, lineno=307, col_offset=8), lineno=307, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=308, col_offset=8), 'assertEqual', Load(), lineno=308, col_offset=8), [Call(Name('Rat', Load(), lineno=308, col_offset=25), [Num(10, lineno=308, col_offset=29)], [], None, None, lineno=308, col_offset=25), Num(10.0, lineno=308, col_offset=34)], [], None, None, lineno=308, col_offset=8), lineno=308, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=309, col_offset=8), 'assertEqual', Load(), lineno=309, col_offset=8), [Num(10.0, lineno=309, col_offset=25), Call(Name('Rat', Load(), lineno=309, col_offset=31), [Num(10, lineno=309, col_offset=35)], [], None, None, lineno=309, col_offset=31)], [], None, None, lineno=309, col_offset=8), lineno=309, col_offset=8)], [], lineno=304, col_offset=4), FunctionDef('test_future_div', arguments([Name('self', Param(), lineno=311, col_offset=24)], None, None, []), [Exec(Name('future_test', Load(), lineno=312, col_offset=13), None, None, lineno=312, col_offset=8)], [], lineno=311, col_offset=4)], [], lineno=213, col_offset=0), Assign([Name('future_test', Store(), lineno=316, col_offset=0)], Str("\nfrom __future__ import division\nself.assertEqual(Rat(10, 3) / Rat(5, 7), Rat(14, 3))\nself.assertEqual(Rat(10, 3) / 3, Rat(10, 9))\nself.assertEqual(2 / Rat(5), Rat(2, 5))\nself.assertEqual(3.0 * Rat(1, 2), 1.5)\nself.assertEqual(Rat(1, 2) * 3.0, 1.5)\nself.assertEqual(eval('1/2'), 0.5)\n", lineno=324, col_offset=-1), lineno=316, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=327, col_offset=4), 'run_unittest', Load(), lineno=327, col_offset=4), [Name('RatTestCase', Load(), lineno=327, col_offset=30)], [], None, None, lineno=327, col_offset=4), lineno=327, col_offset=4)], [], lineno=326, col_offset=0), If(Compare(Name('__name__', Load(), lineno=330, col_offset=3), [Eq()], [Str('__main__', lineno=330, col_offset=15)], lineno=330, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=331, col_offset=4), [], [], None, None, lineno=331, col_offset=4), lineno=331, col_offset=4)], [], lineno=330, col_offset=0)])
