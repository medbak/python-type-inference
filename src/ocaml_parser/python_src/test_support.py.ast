Module([Expr(Str('Supporting definitions for the Python regression tests.', lineno=1, col_offset=0), lineno=1, col_offset=0), If(Compare(Name('__name__', Load(), lineno=3, col_offset=3), [NotEq()], [Str('test.test_support', lineno=3, col_offset=15)], lineno=3, col_offset=3), [Raise(Call(Name('ImportError', Load(), lineno=4, col_offset=10), [Str('test_support must be imported from the test package', lineno=4, col_offset=22)], [], None, None, lineno=4, col_offset=10), None, None, lineno=4, col_offset=4)], [], lineno=3, col_offset=0), Import([alias('contextlib', None)], lineno=6, col_offset=0), Import([alias('errno', None)], lineno=7, col_offset=0), Import([alias('functools', None)], lineno=8, col_offset=0), Import([alias('gc', None)], lineno=9, col_offset=0), Import([alias('socket', None)], lineno=10, col_offset=0), Import([alias('sys', None)], lineno=11, col_offset=0), Import([alias('os', None)], lineno=12, col_offset=0), Import([alias('platform', None)], lineno=13, col_offset=0), Import([alias('shutil', None)], lineno=14, col_offset=0), Import([alias('warnings', None)], lineno=15, col_offset=0), Import([alias('unittest', None)], lineno=16, col_offset=0), Import([alias('importlib', None)], lineno=17, col_offset=0), Import([alias('UserDict', None)], lineno=18, col_offset=0), Import([alias('re', None)], lineno=19, col_offset=0), Import([alias('time', None)], lineno=20, col_offset=0), TryExcept([Import([alias('thread', None)], lineno=22, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=23, col_offset=7), None, [Assign([Name('thread', Store(), lineno=24, col_offset=4)], Name('None', Load(), lineno=24, col_offset=13), lineno=24, col_offset=4)], lineno=23, col_offset=0)], [], lineno=21, col_offset=0), Assign([Name('__all__', Store(), lineno=26, col_offset=0)], List([Str('Error', lineno=26, col_offset=11), Str('TestFailed', lineno=26, col_offset=20), Str('ResourceDenied', lineno=26, col_offset=34), Str('import_module', lineno=26, col_offset=52), Str('verbose', lineno=27, col_offset=11), Str('use_resources', lineno=27, col_offset=22), Str('max_memuse', lineno=27, col_offset=39), Str('record_original_stdout', lineno=27, col_offset=53), Str('get_original_stdout', lineno=28, col_offset=11), Str('unload', lineno=28, col_offset=34), Str('unlink', lineno=28, col_offset=44), Str('rmtree', lineno=28, col_offset=54), Str('forget', lineno=28, col_offset=64), Str('is_resource_enabled', lineno=29, col_offset=11), Str('requires', lineno=29, col_offset=34), Str('find_unused_port', lineno=29, col_offset=46), Str('bind_port', lineno=29, col_offset=66), Str('fcmp', lineno=30, col_offset=11), Str('have_unicode', lineno=30, col_offset=19), Str('is_jython', lineno=30, col_offset=35), Str('TESTFN', lineno=30, col_offset=48), Str('HOST', lineno=30, col_offset=58), Str('FUZZ', lineno=30, col_offset=66), Str('SAVEDCWD', lineno=31, col_offset=11), Str('temp_cwd', lineno=31, col_offset=23), Str('findfile', lineno=31, col_offset=35), Str('sortdict', lineno=31, col_offset=47), Str('check_syntax_error', lineno=31, col_offset=59), Str('open_urlresource', lineno=32, col_offset=11), Str('check_warnings', lineno=32, col_offset=31), Str('check_py3k_warnings', lineno=32, col_offset=49), Str('CleanImport', lineno=33, col_offset=11), Str('EnvironmentVarGuard', lineno=33, col_offset=26), Str('captured_output', lineno=33, col_offset=49), Str('captured_stdout', lineno=34, col_offset=11), Str('TransientResource', lineno=34, col_offset=30), Str('transient_internet', lineno=34, col_offset=51), Str('run_with_locale', lineno=35, col_offset=11), Str('set_memlimit', lineno=35, col_offset=30), Str('bigmemtest', lineno=35, col_offset=46), Str('bigaddrspacetest', lineno=35, col_offset=60), Str('BasicTestRunner', lineno=36, col_offset=11), Str('run_unittest', lineno=36, col_offset=30), Str('run_doctest', lineno=36, col_offset=46), Str('threading_setup', lineno=36, col_offset=61), Str('threading_cleanup', lineno=37, col_offset=11), Str('reap_children', lineno=37, col_offset=32), Str('cpython_only', lineno=37, col_offset=49), Str('check_impl_detail', lineno=38, col_offset=11), Str('get_attribute', lineno=38, col_offset=32), Str('py3k_bytes', lineno=38, col_offset=49)], Load(), lineno=26, col_offset=10), lineno=26, col_offset=0), ClassDef('Error', [Name('Exception', Load(), lineno=41, col_offset=12)], [Expr(Str('Base class for regression test exceptions.', lineno=42, col_offset=4), lineno=42, col_offset=4)], [], lineno=41, col_offset=0), ClassDef('TestFailed', [Name('Error', Load(), lineno=44, col_offset=17)], [Expr(Str('Test failed.', lineno=45, col_offset=4), lineno=45, col_offset=4)], [], lineno=44, col_offset=0), ClassDef('ResourceDenied', [Attribute(Name('unittest', Load(), lineno=47, col_offset=21), 'SkipTest', Load(), lineno=47, col_offset=21)], [Expr(Str('Test skipped because it requested a disallowed resource.\n\n    This is raised when a test calls requires() for a resource that\n    has not been enabled.  It is used to distinguish between expected\n    and unexpected skips.\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1)], [], lineno=47, col_offset=0), FunctionDef('_ignore_deprecated_imports', arguments([Name('ignore', Param(), lineno=56, col_offset=31)], None, None, [Name('True', Load(), lineno=56, col_offset=38)]), [Expr(Str('Context manager to suppress package and module deprecation\n    warnings when importing them.\n\n    If ignore is False, this context manager has no effect.', lineno=60, col_offset=-1), lineno=60, col_offset=-1), If(Name('ignore', Load(), lineno=61, col_offset=7), [With(Call(Attribute(Name('warnings', Load(), lineno=62, col_offset=13), 'catch_warnings', Load(), lineno=62, col_offset=13), [], [], None, None, lineno=62, col_offset=13), None, [Expr(Call(Attribute(Name('warnings', Load(), lineno=63, col_offset=12), 'filterwarnings', Load(), lineno=63, col_offset=12), [Str('ignore', lineno=63, col_offset=36), Str('.+ (module|package)', lineno=63, col_offset=46), Name('DeprecationWarning', Load(), lineno=64, col_offset=36)], [], None, None, lineno=63, col_offset=12), lineno=63, col_offset=12), Expr(Yield(None, lineno=65, col_offset=12), lineno=65, col_offset=12)], lineno=62, col_offset=13)], [Expr(Yield(None, lineno=67, col_offset=8), lineno=67, col_offset=8)], lineno=61, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=55, col_offset=1), 'contextmanager', Load(), lineno=55, col_offset=1)], lineno=55, col_offset=0), FunctionDef('import_module', arguments([Name('name', Param(), lineno=70, col_offset=18), Name('deprecated', Param(), lineno=70, col_offset=24)], None, None, [Name('False', Load(), lineno=70, col_offset=35)]), [Expr(Str('Import and return the module to be tested, raising SkipTest if\n    it is not available.\n\n    If deprecated is True, any module or package deprecation messages\n    will be suppressed.', lineno=75, col_offset=-1), lineno=75, col_offset=-1), With(Call(Name('_ignore_deprecated_imports', Load(), lineno=76, col_offset=9), [Name('deprecated', Load(), lineno=76, col_offset=36)], [], None, None, lineno=76, col_offset=9), None, [TryExcept([Return(Call(Attribute(Name('importlib', Load(), lineno=78, col_offset=19), 'import_module', Load(), lineno=78, col_offset=19), [Name('name', Load(), lineno=78, col_offset=43)], [], None, None, lineno=78, col_offset=19), lineno=78, col_offset=12)], [ExceptHandler(Name('ImportError', Load(), lineno=79, col_offset=15), Name('msg', Store(), lineno=79, col_offset=28), [Raise(Call(Attribute(Name('unittest', Load(), lineno=80, col_offset=18), 'SkipTest', Load(), lineno=80, col_offset=18), [Call(Name('str', Load(), lineno=80, col_offset=36), [Name('msg', Load(), lineno=80, col_offset=40)], [], None, None, lineno=80, col_offset=36)], [], None, None, lineno=80, col_offset=18), None, None, lineno=80, col_offset=12)], lineno=79, col_offset=8)], [], lineno=77, col_offset=8)], lineno=76, col_offset=9)], [], lineno=70, col_offset=0), FunctionDef('_save_and_remove_module', arguments([Name('name', Param(), lineno=83, col_offset=28), Name('orig_modules', Param(), lineno=83, col_offset=34)], None, None, []), [Expr(Str('Helper function to save and remove a module from sys.modules\n\n       Return value is True if the module was in sys.modules and\n       False otherwise.', lineno=87, col_offset=-1), lineno=87, col_offset=-1), Assign([Name('saved', Store(), lineno=88, col_offset=4)], Name('True', Load(), lineno=88, col_offset=12), lineno=88, col_offset=4), TryExcept([Assign([Subscript(Name('orig_modules', Load(), lineno=90, col_offset=8), Index(Name('name', Load(), lineno=90, col_offset=21)), Store(), lineno=90, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=90, col_offset=29), 'modules', Load(), lineno=90, col_offset=29), Index(Name('name', Load(), lineno=90, col_offset=41)), Load(), lineno=90, col_offset=29), lineno=90, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=91, col_offset=11), None, [Assign([Name('saved', Store(), lineno=92, col_offset=8)], Name('False', Load(), lineno=92, col_offset=16), lineno=92, col_offset=8)], lineno=91, col_offset=4)], [Delete([Subscript(Attribute(Name('sys', Load(), lineno=94, col_offset=12), 'modules', Load(), lineno=94, col_offset=12), Index(Name('name', Load(), lineno=94, col_offset=24)), Del(), lineno=94, col_offset=12)], lineno=94, col_offset=8)], lineno=89, col_offset=4), Return(Name('saved', Load(), lineno=95, col_offset=11), lineno=95, col_offset=4)], [], lineno=83, col_offset=0), FunctionDef('_save_and_block_module', arguments([Name('name', Param(), lineno=98, col_offset=27), Name('orig_modules', Param(), lineno=98, col_offset=33)], None, None, []), [Expr(Str('Helper function to save and block a module in sys.modules\n\n       Return value is True if the module was in sys.modules and\n       False otherwise.', lineno=102, col_offset=-1), lineno=102, col_offset=-1), Assign([Name('saved', Store(), lineno=103, col_offset=4)], Name('True', Load(), lineno=103, col_offset=12), lineno=103, col_offset=4), TryExcept([Assign([Subscript(Name('orig_modules', Load(), lineno=105, col_offset=8), Index(Name('name', Load(), lineno=105, col_offset=21)), Store(), lineno=105, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=105, col_offset=29), 'modules', Load(), lineno=105, col_offset=29), Index(Name('name', Load(), lineno=105, col_offset=41)), Load(), lineno=105, col_offset=29), lineno=105, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=106, col_offset=11), None, [Assign([Name('saved', Store(), lineno=107, col_offset=8)], Name('False', Load(), lineno=107, col_offset=16), lineno=107, col_offset=8)], lineno=106, col_offset=4)], [], lineno=104, col_offset=4), Assign([Subscript(Attribute(Name('sys', Load(), lineno=108, col_offset=4), 'modules', Load(), lineno=108, col_offset=4), Index(Name('name', Load(), lineno=108, col_offset=16)), Store(), lineno=108, col_offset=4)], Name('None', Load(), lineno=108, col_offset=24), lineno=108, col_offset=4), Return(Name('saved', Load(), lineno=109, col_offset=11), lineno=109, col_offset=4)], [], lineno=98, col_offset=0), FunctionDef('import_fresh_module', arguments([Name('name', Param(), lineno=112, col_offset=24), Name('fresh', Param(), lineno=112, col_offset=30), Name('blocked', Param(), lineno=112, col_offset=40), Name('deprecated', Param(), lineno=112, col_offset=52)], None, None, [Tuple([], Load(), lineno=112, col_offset=36), Tuple([], Load(), lineno=112, col_offset=48), Name('False', Load(), lineno=112, col_offset=63)]), [Expr(Str('Imports and returns a module, deliberately bypassing the sys.modules cache\n    and importing a fresh copy of the module. Once the import is complete,\n    the sys.modules cache is restored to its original state.\n\n    Modules named in fresh are also imported anew if needed by the import.\n\n    Importing of modules named in blocked is prevented while the fresh import\n    takes place.\n\n    If deprecated is True, any module or package deprecation messages\n    will be suppressed.', lineno=123, col_offset=-1), lineno=123, col_offset=-1), With(Call(Name('_ignore_deprecated_imports', Load(), lineno=126, col_offset=9), [Name('deprecated', Load(), lineno=126, col_offset=36)], [], None, None, lineno=126, col_offset=9), None, [Assign([Name('orig_modules', Store(), lineno=129, col_offset=8)], Dict([], [], lineno=129, col_offset=23), lineno=129, col_offset=8), Assign([Name('names_to_remove', Store(), lineno=130, col_offset=8)], List([], Load(), lineno=130, col_offset=26), lineno=130, col_offset=8), Expr(Call(Name('_save_and_remove_module', Load(), lineno=131, col_offset=8), [Name('name', Load(), lineno=131, col_offset=32), Name('orig_modules', Load(), lineno=131, col_offset=38)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8), TryFinally([For(Name('fresh_name', Store(), lineno=133, col_offset=16), Name('fresh', Load(), lineno=133, col_offset=30), [Expr(Call(Name('_save_and_remove_module', Load(), lineno=134, col_offset=16), [Name('fresh_name', Load(), lineno=134, col_offset=40), Name('orig_modules', Load(), lineno=134, col_offset=52)], [], None, None, lineno=134, col_offset=16), lineno=134, col_offset=16)], [], lineno=133, col_offset=12), For(Name('blocked_name', Store(), lineno=135, col_offset=16), Name('blocked', Load(), lineno=135, col_offset=32), [If(UnaryOp(Not(), Call(Name('_save_and_block_module', Load(), lineno=136, col_offset=23), [Name('blocked_name', Load(), lineno=136, col_offset=46), Name('orig_modules', Load(), lineno=136, col_offset=60)], [], None, None, lineno=136, col_offset=23), lineno=136, col_offset=19), [Expr(Call(Attribute(Name('names_to_remove', Load(), lineno=137, col_offset=20), 'append', Load(), lineno=137, col_offset=20), [Name('blocked_name', Load(), lineno=137, col_offset=43)], [], None, None, lineno=137, col_offset=20), lineno=137, col_offset=20)], [], lineno=136, col_offset=16)], [], lineno=135, col_offset=12), Assign([Name('fresh_module', Store(), lineno=138, col_offset=12)], Call(Attribute(Name('importlib', Load(), lineno=138, col_offset=27), 'import_module', Load(), lineno=138, col_offset=27), [Name('name', Load(), lineno=138, col_offset=51)], [], None, None, lineno=138, col_offset=27), lineno=138, col_offset=12)], [For(Tuple([Name('orig_name', Store(), lineno=140, col_offset=16), Name('module', Store(), lineno=140, col_offset=27)], Store(), lineno=140, col_offset=16), Call(Attribute(Name('orig_modules', Load(), lineno=140, col_offset=37), 'items', Load(), lineno=140, col_offset=37), [], [], None, None, lineno=140, col_offset=37), [Assign([Subscript(Attribute(Name('sys', Load(), lineno=141, col_offset=16), 'modules', Load(), lineno=141, col_offset=16), Index(Name('orig_name', Load(), lineno=141, col_offset=28)), Store(), lineno=141, col_offset=16)], Name('module', Load(), lineno=141, col_offset=41), lineno=141, col_offset=16)], [], lineno=140, col_offset=12), For(Name('name_to_remove', Store(), lineno=142, col_offset=16), Name('names_to_remove', Load(), lineno=142, col_offset=34), [Delete([Subscript(Attribute(Name('sys', Load(), lineno=143, col_offset=20), 'modules', Load(), lineno=143, col_offset=20), Index(Name('name_to_remove', Load(), lineno=143, col_offset=32)), Del(), lineno=143, col_offset=20)], lineno=143, col_offset=16)], [], lineno=142, col_offset=12)], lineno=132, col_offset=8), Return(Name('fresh_module', Load(), lineno=144, col_offset=15), lineno=144, col_offset=8)], lineno=126, col_offset=9)], [], lineno=112, col_offset=0), FunctionDef('get_attribute', arguments([Name('obj', Param(), lineno=147, col_offset=18), Name('name', Param(), lineno=147, col_offset=23)], None, None, []), [Expr(Str('Get an attribute, raising SkipTest if AttributeError is raised.', lineno=148, col_offset=4), lineno=148, col_offset=4), TryExcept([Assign([Name('attribute', Store(), lineno=150, col_offset=8)], Call(Name('getattr', Load(), lineno=150, col_offset=20), [Name('obj', Load(), lineno=150, col_offset=28), Name('name', Load(), lineno=150, col_offset=33)], [], None, None, lineno=150, col_offset=20), lineno=150, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=151, col_offset=11), None, [Raise(Call(Attribute(Name('unittest', Load(), lineno=152, col_offset=14), 'SkipTest', Load(), lineno=152, col_offset=14), [BinOp(Str('module %s has no attribute %s', lineno=152, col_offset=32), Mod(), Tuple([Attribute(Name('obj', Load(), lineno=153, col_offset=12), '__name__', Load(), lineno=153, col_offset=12), Name('name', Load(), lineno=153, col_offset=26)], Load(), lineno=153, col_offset=12), lineno=152, col_offset=32)], [], None, None, lineno=152, col_offset=14), None, None, lineno=152, col_offset=8)], lineno=151, col_offset=4)], [Return(Name('attribute', Load(), lineno=155, col_offset=15), lineno=155, col_offset=8)], lineno=149, col_offset=4)], [], lineno=147, col_offset=0), Assign([Name('verbose', Store(), lineno=158, col_offset=0)], Num(1, lineno=158, col_offset=10), lineno=158, col_offset=0), Assign([Name('use_resources', Store(), lineno=159, col_offset=0)], Name('None', Load(), lineno=159, col_offset=16), lineno=159, col_offset=0), Assign([Name('max_memuse', Store(), lineno=160, col_offset=0)], Num(0, lineno=160, col_offset=13), lineno=160, col_offset=0), Assign([Name('real_max_memuse', Store(), lineno=162, col_offset=0)], Num(0, lineno=162, col_offset=18), lineno=162, col_offset=0), Assign([Name('_original_stdout', Store(), lineno=167, col_offset=0)], Name('None', Load(), lineno=167, col_offset=19), lineno=167, col_offset=0), FunctionDef('record_original_stdout', arguments([Name('stdout', Param(), lineno=168, col_offset=27)], None, None, []), [Global(['_original_stdout'], lineno=169, col_offset=4), Assign([Name('_original_stdout', Store(), lineno=170, col_offset=4)], Name('stdout', Load(), lineno=170, col_offset=23), lineno=170, col_offset=4)], [], lineno=168, col_offset=0), FunctionDef('get_original_stdout', arguments([], None, None, []), [Return(BoolOp(Or(), [Name('_original_stdout', Load(), lineno=173, col_offset=11), Attribute(Name('sys', Load(), lineno=173, col_offset=31), 'stdout', Load(), lineno=173, col_offset=31)], lineno=173, col_offset=11), lineno=173, col_offset=4)], [], lineno=172, col_offset=0), FunctionDef('unload', arguments([Name('name', Param(), lineno=175, col_offset=11)], None, None, []), [TryExcept([Delete([Subscript(Attribute(Name('sys', Load(), lineno=177, col_offset=12), 'modules', Load(), lineno=177, col_offset=12), Index(Name('name', Load(), lineno=177, col_offset=24)), Del(), lineno=177, col_offset=12)], lineno=177, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=178, col_offset=11), None, [Pass( lineno=179, col_offset=8)], lineno=178, col_offset=4)], [], lineno=176, col_offset=4)], [], lineno=175, col_offset=0), FunctionDef('unlink', arguments([Name('filename', Param(), lineno=181, col_offset=11)], None, None, []), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=183, col_offset=8), 'unlink', Load(), lineno=183, col_offset=8), [Name('filename', Load(), lineno=183, col_offset=18)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=184, col_offset=11), None, [Pass( lineno=185, col_offset=8)], lineno=184, col_offset=4)], [], lineno=182, col_offset=4)], [], lineno=181, col_offset=0), FunctionDef('rmtree', arguments([Name('path', Param(), lineno=187, col_offset=11)], None, None, []), [TryExcept([Expr(Call(Attribute(Name('shutil', Load(), lineno=189, col_offset=8), 'rmtree', Load(), lineno=189, col_offset=8), [Name('path', Load(), lineno=189, col_offset=22)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=190, col_offset=11), Name('e', Store(), lineno=190, col_offset=20), [If(Compare(Attribute(Name('e', Load(), lineno=192, col_offset=11), 'errno', Load(), lineno=192, col_offset=11), [NotIn()], [Tuple([Attribute(Name('errno', Load(), lineno=192, col_offset=27), 'ENOENT', Load(), lineno=192, col_offset=27), Attribute(Name('errno', Load(), lineno=192, col_offset=41), 'ESRCH', Load(), lineno=192, col_offset=41)], Load(), lineno=192, col_offset=27)], lineno=192, col_offset=11), [Raise(None, None, None, lineno=193, col_offset=12)], [], lineno=192, col_offset=8)], lineno=190, col_offset=4)], [], lineno=188, col_offset=4)], [], lineno=187, col_offset=0), FunctionDef('forget', arguments([Name('modname', Param(), lineno=195, col_offset=11)], None, None, []), [Expr(Str('"Forget" a module was ever imported by removing it from sys.modules and\n    deleting any .pyc and .pyo files.', lineno=197, col_offset=-1), lineno=197, col_offset=-1), Expr(Call(Name('unload', Load(), lineno=198, col_offset=4), [Name('modname', Load(), lineno=198, col_offset=11)], [], None, None, lineno=198, col_offset=4), lineno=198, col_offset=4), For(Name('dirname', Store(), lineno=199, col_offset=8), Attribute(Name('sys', Load(), lineno=199, col_offset=19), 'path', Load(), lineno=199, col_offset=19), [Expr(Call(Name('unlink', Load(), lineno=200, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=200, col_offset=15), 'path', Load(), lineno=200, col_offset=15), 'join', Load(), lineno=200, col_offset=15), [Name('dirname', Load(), lineno=200, col_offset=28), BinOp(BinOp(Name('modname', Load(), lineno=200, col_offset=37), Add(), Attribute(Name('os', Load(), lineno=200, col_offset=47), 'extsep', Load(), lineno=200, col_offset=47), lineno=200, col_offset=37), Add(), Str('pyc', lineno=200, col_offset=59), lineno=200, col_offset=57)], [], None, None, lineno=200, col_offset=15)], [], None, None, lineno=200, col_offset=8), lineno=200, col_offset=8), Expr(Call(Name('unlink', Load(), lineno=204, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=204, col_offset=15), 'path', Load(), lineno=204, col_offset=15), 'join', Load(), lineno=204, col_offset=15), [Name('dirname', Load(), lineno=204, col_offset=28), BinOp(BinOp(Name('modname', Load(), lineno=204, col_offset=37), Add(), Attribute(Name('os', Load(), lineno=204, col_offset=47), 'extsep', Load(), lineno=204, col_offset=47), lineno=204, col_offset=37), Add(), Str('pyo', lineno=204, col_offset=59), lineno=204, col_offset=57)], [], None, None, lineno=204, col_offset=15)], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8)], [], lineno=199, col_offset=4)], [], lineno=195, col_offset=0), FunctionDef('is_resource_enabled', arguments([Name('resource', Param(), lineno=206, col_offset=24)], None, None, []), [Expr(Str('Test whether a resource is enabled.  Known resources are set by\n    regrtest.py.', lineno=208, col_offset=-1), lineno=208, col_offset=-1), Return(BoolOp(And(), [Compare(Name('use_resources', Load(), lineno=209, col_offset=11), [IsNot()], [Name('None', Load(), lineno=209, col_offset=32)], lineno=209, col_offset=11), Compare(Name('resource', Load(), lineno=209, col_offset=41), [In()], [Name('use_resources', Load(), lineno=209, col_offset=53)], lineno=209, col_offset=41)], lineno=209, col_offset=11), lineno=209, col_offset=4)], [], lineno=206, col_offset=0), FunctionDef('requires', arguments([Name('resource', Param(), lineno=211, col_offset=13), Name('msg', Param(), lineno=211, col_offset=23)], None, None, [Name('None', Load(), lineno=211, col_offset=27)]), [Expr(Str("Raise ResourceDenied if the specified resource is not available.\n\n    If the caller's module is __main__ then automatically return True.  The\n    possibility of False being returned occurs when regrtest.py is executing.", lineno=215, col_offset=-1), lineno=215, col_offset=-1), If(Compare(Call(Attribute(Attribute(Call(Attribute(Name('sys', Load(), lineno=218, col_offset=7), '_getframe', Load(), lineno=218, col_offset=7), [Num(1, lineno=218, col_offset=21)], [], None, None, lineno=218, col_offset=7), 'f_globals', Load(), lineno=218, col_offset=7), 'get', Load(), lineno=218, col_offset=7), [Str('__name__', lineno=218, col_offset=38)], [], None, None, lineno=218, col_offset=7), [Eq()], [Str('__main__', lineno=218, col_offset=53)], lineno=218, col_offset=7), [Return(None, lineno=219, col_offset=8)], [], lineno=218, col_offset=4), If(UnaryOp(Not(), Call(Name('is_resource_enabled', Load(), lineno=220, col_offset=11), [Name('resource', Load(), lineno=220, col_offset=31)], [], None, None, lineno=220, col_offset=11), lineno=220, col_offset=7), [If(Compare(Name('msg', Load(), lineno=221, col_offset=11), [Is()], [Name('None', Load(), lineno=221, col_offset=18)], lineno=221, col_offset=11), [Assign([Name('msg', Store(), lineno=222, col_offset=12)], BinOp(Str("Use of the `%s' resource not enabled", lineno=222, col_offset=18), Mod(), Name('resource', Load(), lineno=222, col_offset=59), lineno=222, col_offset=18), lineno=222, col_offset=12)], [], lineno=221, col_offset=8), Raise(Call(Name('ResourceDenied', Load(), lineno=223, col_offset=14), [Name('msg', Load(), lineno=223, col_offset=29)], [], None, None, lineno=223, col_offset=14), None, None, lineno=223, col_offset=8)], [], lineno=220, col_offset=4)], [], lineno=211, col_offset=0), Assign([Name('HOST', Store(), lineno=225, col_offset=0)], Str('localhost', lineno=225, col_offset=7), lineno=225, col_offset=0), FunctionDef('find_unused_port', arguments([Name('family', Param(), lineno=227, col_offset=21), Name('socktype', Param(), lineno=227, col_offset=44)], None, None, [Attribute(Name('socket', Load(), lineno=227, col_offset=28), 'AF_INET', Load(), lineno=227, col_offset=28), Attribute(Name('socket', Load(), lineno=227, col_offset=53), 'SOCK_STREAM', Load(), lineno=227, col_offset=53)]), [Expr(Str("Returns an unused port that should be suitable for binding.  This is\n    achieved by creating a temporary socket with the same family and type as\n    the 'sock' parameter (default is AF_INET, SOCK_STREAM), and binding it to\n    the specified host address (defaults to 0.0.0.0) with the port set to 0,\n    eliciting an unused ephemeral port from the OS.  The temporary socket is\n    then closed and deleted, and the ephemeral port is returned.\n\n    Either this method or bind_port() should be used for any tests where a\n    server socket needs to be bound to a particular port for the duration of\n    the test.  Which one to use depends on whether the calling code is creating\n    a python socket, or if an unused port needs to be provided in a constructor\n    or passed to an external program (i.e. the -accept argument to openssl's\n    s_server mode).  Always prefer bind_port() over find_unused_port() where\n    possible.  Hard coded ports should *NEVER* be used.  As soon as a server\n    socket is bound to a hard coded port, the ability to run multiple instances\n    of the test simultaneously on the same host is compromised, which makes the\n    test a ticking time bomb in a buildbot environment. On Unix buildbots, this\n    may simply manifest as a failed test, which can be recovered from without\n    intervention in most cases, but on Windows, the entire python process can\n    completely and utterly wedge, requiring someone to log in to the buildbot\n    and manually kill the affected process.\n\n    (This is easy to reproduce on Windows, unfortunately, and can be traced to\n    the SO_REUSEADDR socket option having different semantics on Windows versus\n    Unix/Linux.  On Unix, you can't have two AF_INET SOCK_STREAM sockets bind,\n    listen and then accept connections on identical host/ports.  An EADDRINUSE\n    socket.error will be raised at some point (depending on the platform and\n    the order bind and listen were called on each socket).\n\n    However, on Windows, if SO_REUSEADDR is set on the sockets, no EADDRINUSE\n    will ever be raised when attempting to bind two identical host/ports. When\n    accept() is called on each socket, the second caller's process will steal\n    the port from the first caller, leaving them both in an awkwardly wedged\n    state where they'll no longer respond to any signals or graceful kills, and\n    must be forcibly killed via OpenProcess()/TerminateProcess().\n\n    The solution on Windows is to use the SO_EXCLUSIVEADDRUSE socket option\n    instead of SO_REUSEADDR, which effectively affords the same semantics as\n    SO_REUSEADDR on Unix.  Given the propensity of Unix developers in the Open\n    Source world compared to Windows ones, this is a common mistake.  A quick\n    look over OpenSSL's 0.9.8g source shows that they use SO_REUSEADDR when\n    openssl.exe is called with the 's_server' option, for example. See\n    http://bugs.python.org/issue2550 for more info.  The following site also\n    has a very thorough description about the implications of both REUSEADDR\n    and EXCLUSIVEADDRUSE on Windows:\n    http://msdn2.microsoft.com/en-us/library/ms740621(VS.85).aspx)\n\n    XXX: although this approach is a vast improvement on previous attempts to\n    elicit unused ports, it rests heavily on the assumption that the ephemeral\n    port returned to us by the OS won't immediately be dished back out to some\n    other process when we close and delete our temporary socket but before our\n    calling code has a chance to bind the returned port.  We can deal with this\n    issue if/when we come across it.", lineno=280, col_offset=-1), lineno=280, col_offset=-1), Assign([Name('tempsock', Store(), lineno=281, col_offset=4)], Call(Attribute(Name('socket', Load(), lineno=281, col_offset=15), 'socket', Load(), lineno=281, col_offset=15), [Name('family', Load(), lineno=281, col_offset=29), Name('socktype', Load(), lineno=281, col_offset=37)], [], None, None, lineno=281, col_offset=15), lineno=281, col_offset=4), Assign([Name('port', Store(), lineno=282, col_offset=4)], Call(Name('bind_port', Load(), lineno=282, col_offset=11), [Name('tempsock', Load(), lineno=282, col_offset=21)], [], None, None, lineno=282, col_offset=11), lineno=282, col_offset=4), Expr(Call(Attribute(Name('tempsock', Load(), lineno=283, col_offset=4), 'close', Load(), lineno=283, col_offset=4), [], [], None, None, lineno=283, col_offset=4), lineno=283, col_offset=4), Delete([Name('tempsock', Del(), lineno=284, col_offset=8)], lineno=284, col_offset=4), Return(Name('port', Load(), lineno=285, col_offset=11), lineno=285, col_offset=4)], [], lineno=227, col_offset=0), FunctionDef('bind_port', arguments([Name('sock', Param(), lineno=287, col_offset=14), Name('host', Param(), lineno=287, col_offset=20)], None, None, [Name('HOST', Load(), lineno=287, col_offset=25)]), [Expr(Str("Bind the socket to a free port and return the port number.  Relies on\n    ephemeral ports in order to ensure we are using an unbound port.  This is\n    important as many tests may be running simultaneously, especially in a\n    buildbot environment.  This method raises an exception if the sock.family\n    is AF_INET and sock.type is SOCK_STREAM, *and* the socket has SO_REUSEADDR\n    or SO_REUSEPORT set on it.  Tests should *never* set these socket options\n    for TCP/IP sockets.  The only case for setting these options is testing\n    multicasting via multiple UDP sockets.\n\n    Additionally, if the SO_EXCLUSIVEADDRUSE socket option is available (i.e.\n    on Windows), it will be set on the socket.  This will prevent anyone else\n    from bind()'ing to our host/port for the duration of the test.\n    ", lineno=300, col_offset=-1), lineno=300, col_offset=-1), If(BoolOp(And(), [Compare(Attribute(Name('sock', Load(), lineno=301, col_offset=7), 'family', Load(), lineno=301, col_offset=7), [Eq()], [Attribute(Name('socket', Load(), lineno=301, col_offset=22), 'AF_INET', Load(), lineno=301, col_offset=22)], lineno=301, col_offset=7), Compare(Attribute(Name('sock', Load(), lineno=301, col_offset=41), 'type', Load(), lineno=301, col_offset=41), [Eq()], [Attribute(Name('socket', Load(), lineno=301, col_offset=54), 'SOCK_STREAM', Load(), lineno=301, col_offset=54)], lineno=301, col_offset=41)], lineno=301, col_offset=7), [If(Call(Name('hasattr', Load(), lineno=302, col_offset=11), [Name('socket', Load(), lineno=302, col_offset=19), Str('SO_REUSEADDR', lineno=302, col_offset=27)], [], None, None, lineno=302, col_offset=11), [If(Compare(Call(Attribute(Name('sock', Load(), lineno=303, col_offset=15), 'getsockopt', Load(), lineno=303, col_offset=15), [Attribute(Name('socket', Load(), lineno=303, col_offset=31), 'SOL_SOCKET', Load(), lineno=303, col_offset=31), Attribute(Name('socket', Load(), lineno=303, col_offset=50), 'SO_REUSEADDR', Load(), lineno=303, col_offset=50)], [], None, None, lineno=303, col_offset=15), [Eq()], [Num(1, lineno=303, col_offset=74)], lineno=303, col_offset=15), [Raise(Call(Name('TestFailed', Load(), lineno=304, col_offset=22), [Str('tests should never set the SO_REUSEADDR socket option on TCP/IP sockets!', lineno=304, col_offset=33)], [], None, None, lineno=304, col_offset=22), None, None, lineno=304, col_offset=16)], [], lineno=303, col_offset=12)], [], lineno=302, col_offset=8), If(Call(Name('hasattr', Load(), lineno=306, col_offset=11), [Name('socket', Load(), lineno=306, col_offset=19), Str('SO_REUSEPORT', lineno=306, col_offset=27)], [], None, None, lineno=306, col_offset=11), [If(Compare(Call(Attribute(Name('sock', Load(), lineno=307, col_offset=15), 'getsockopt', Load(), lineno=307, col_offset=15), [Attribute(Name('socket', Load(), lineno=307, col_offset=31), 'SOL_SOCKET', Load(), lineno=307, col_offset=31), Attribute(Name('socket', Load(), lineno=307, col_offset=50), 'SO_REUSEPORT', Load(), lineno=307, col_offset=50)], [], None, None, lineno=307, col_offset=15), [Eq()], [Num(1, lineno=307, col_offset=74)], lineno=307, col_offset=15), [Raise(Call(Name('TestFailed', Load(), lineno=308, col_offset=22), [Str('tests should never set the SO_REUSEPORT socket option on TCP/IP sockets!', lineno=308, col_offset=33)], [], None, None, lineno=308, col_offset=22), None, None, lineno=308, col_offset=16)], [], lineno=307, col_offset=12)], [], lineno=306, col_offset=8), If(Call(Name('hasattr', Load(), lineno=310, col_offset=11), [Name('socket', Load(), lineno=310, col_offset=19), Str('SO_EXCLUSIVEADDRUSE', lineno=310, col_offset=27)], [], None, None, lineno=310, col_offset=11), [Expr(Call(Attribute(Name('sock', Load(), lineno=311, col_offset=12), 'setsockopt', Load(), lineno=311, col_offset=12), [Attribute(Name('socket', Load(), lineno=311, col_offset=28), 'SOL_SOCKET', Load(), lineno=311, col_offset=28), Attribute(Name('socket', Load(), lineno=311, col_offset=47), 'SO_EXCLUSIVEADDRUSE', Load(), lineno=311, col_offset=47), Num(1, lineno=311, col_offset=75)], [], None, None, lineno=311, col_offset=12), lineno=311, col_offset=12)], [], lineno=310, col_offset=8)], [], lineno=301, col_offset=4), Expr(Call(Attribute(Name('sock', Load(), lineno=313, col_offset=4), 'bind', Load(), lineno=313, col_offset=4), [Tuple([Name('host', Load(), lineno=313, col_offset=15), Num(0, lineno=313, col_offset=21)], Load(), lineno=313, col_offset=15)], [], None, None, lineno=313, col_offset=4), lineno=313, col_offset=4), Assign([Name('port', Store(), lineno=314, col_offset=4)], Subscript(Call(Attribute(Name('sock', Load(), lineno=314, col_offset=11), 'getsockname', Load(), lineno=314, col_offset=11), [], [], None, None, lineno=314, col_offset=11), Index(Num(1, lineno=314, col_offset=30)), Load(), lineno=314, col_offset=11), lineno=314, col_offset=4), Return(Name('port', Load(), lineno=315, col_offset=11), lineno=315, col_offset=4)], [], lineno=287, col_offset=0), Assign([Name('FUZZ', Store(), lineno=317, col_offset=0)], Num(1e-06, lineno=317, col_offset=7), lineno=317, col_offset=0), FunctionDef('fcmp', arguments([Name('x', Param(), lineno=319, col_offset=9), Name('y', Param(), lineno=319, col_offset=12)], None, None, []), [If(BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=320, col_offset=7), [Name('x', Load(), lineno=320, col_offset=18), Name('float', Load(), lineno=320, col_offset=21)], [], None, None, lineno=320, col_offset=7), Call(Name('isinstance', Load(), lineno=320, col_offset=31), [Name('y', Load(), lineno=320, col_offset=42), Name('float', Load(), lineno=320, col_offset=45)], [], None, None, lineno=320, col_offset=31)], lineno=320, col_offset=7), [TryExcept([Assign([Name('fuzz', Store(), lineno=322, col_offset=12)], BinOp(BinOp(Call(Name('abs', Load(), lineno=322, col_offset=20), [Name('x', Load(), lineno=322, col_offset=24)], [], None, None, lineno=322, col_offset=20), Add(), Call(Name('abs', Load(), lineno=322, col_offset=29), [Name('y', Load(), lineno=322, col_offset=33)], [], None, None, lineno=322, col_offset=29), lineno=322, col_offset=20), Mult(), Name('FUZZ', Load(), lineno=322, col_offset=39), lineno=322, col_offset=19), lineno=322, col_offset=12), If(Compare(Call(Name('abs', Load(), lineno=323, col_offset=15), [BinOp(Name('x', Load(), lineno=323, col_offset=19), Sub(), Name('y', Load(), lineno=323, col_offset=21), lineno=323, col_offset=19)], [], None, None, lineno=323, col_offset=15), [LtE()], [Name('fuzz', Load(), lineno=323, col_offset=27)], lineno=323, col_offset=15), [Return(Num(0, lineno=324, col_offset=23), lineno=324, col_offset=16)], [], lineno=323, col_offset=12)], [ExceptHandler(None, None, [Pass( lineno=326, col_offset=12)], lineno=325, col_offset=8)], [], lineno=321, col_offset=8)], [If(BoolOp(And(), [Compare(Call(Name('type', Load(), lineno=327, col_offset=9), [Name('x', Load(), lineno=327, col_offset=14)], [], None, None, lineno=327, col_offset=9), [Eq()], [Call(Name('type', Load(), lineno=327, col_offset=20), [Name('y', Load(), lineno=327, col_offset=25)], [], None, None, lineno=327, col_offset=20)], lineno=327, col_offset=9), Call(Name('isinstance', Load(), lineno=327, col_offset=32), [Name('x', Load(), lineno=327, col_offset=43), Tuple([Name('tuple', Load(), lineno=327, col_offset=47), Name('list', Load(), lineno=327, col_offset=54)], Load(), lineno=327, col_offset=47)], [], None, None, lineno=327, col_offset=32)], lineno=327, col_offset=9), [For(Name('i', Store(), lineno=328, col_offset=12), Call(Name('range', Load(), lineno=328, col_offset=17), [Call(Name('min', Load(), lineno=328, col_offset=23), [Call(Name('len', Load(), lineno=328, col_offset=27), [Name('x', Load(), lineno=328, col_offset=31)], [], None, None, lineno=328, col_offset=27), Call(Name('len', Load(), lineno=328, col_offset=35), [Name('y', Load(), lineno=328, col_offset=39)], [], None, None, lineno=328, col_offset=35)], [], None, None, lineno=328, col_offset=23)], [], None, None, lineno=328, col_offset=17), [Assign([Name('outcome', Store(), lineno=329, col_offset=12)], Call(Name('fcmp', Load(), lineno=329, col_offset=22), [Subscript(Name('x', Load(), lineno=329, col_offset=27), Index(Name('i', Load(), lineno=329, col_offset=29)), Load(), lineno=329, col_offset=27), Subscript(Name('y', Load(), lineno=329, col_offset=33), Index(Name('i', Load(), lineno=329, col_offset=35)), Load(), lineno=329, col_offset=33)], [], None, None, lineno=329, col_offset=22), lineno=329, col_offset=12), If(Compare(Name('outcome', Load(), lineno=330, col_offset=15), [NotEq()], [Num(0, lineno=330, col_offset=26)], lineno=330, col_offset=15), [Return(Name('outcome', Load(), lineno=331, col_offset=23), lineno=331, col_offset=16)], [], lineno=330, col_offset=12)], [], lineno=328, col_offset=8), Return(BinOp(Compare(Call(Name('len', Load(), lineno=332, col_offset=16), [Name('x', Load(), lineno=332, col_offset=20)], [], None, None, lineno=332, col_offset=16), [Gt()], [Call(Name('len', Load(), lineno=332, col_offset=25), [Name('y', Load(), lineno=332, col_offset=29)], [], None, None, lineno=332, col_offset=25)], lineno=332, col_offset=16), Sub(), Compare(Call(Name('len', Load(), lineno=332, col_offset=36), [Name('x', Load(), lineno=332, col_offset=40)], [], None, None, lineno=332, col_offset=36), [Lt()], [Call(Name('len', Load(), lineno=332, col_offset=45), [Name('y', Load(), lineno=332, col_offset=49)], [], None, None, lineno=332, col_offset=45)], lineno=332, col_offset=36), lineno=332, col_offset=15), lineno=332, col_offset=8)], [], lineno=327, col_offset=9)], lineno=320, col_offset=4), Return(BinOp(Compare(Name('x', Load(), lineno=333, col_offset=12), [Gt()], [Name('y', Load(), lineno=333, col_offset=16)], lineno=333, col_offset=12), Sub(), Compare(Name('x', Load(), lineno=333, col_offset=22), [Lt()], [Name('y', Load(), lineno=333, col_offset=26)], lineno=333, col_offset=22), lineno=333, col_offset=11), lineno=333, col_offset=4)], [], lineno=319, col_offset=0), TryExcept([Expr(Name('unicode', Load(), lineno=336, col_offset=4), lineno=336, col_offset=4), Assign([Name('have_unicode', Store(), lineno=337, col_offset=4)], Name('True', Load(), lineno=337, col_offset=19), lineno=337, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=338, col_offset=7), None, [Assign([Name('have_unicode', Store(), lineno=339, col_offset=4)], Name('False', Load(), lineno=339, col_offset=19), lineno=339, col_offset=4)], lineno=338, col_offset=0)], [], lineno=335, col_offset=0), Assign([Name('is_jython', Store(), lineno=341, col_offset=0)], Call(Attribute(Attribute(Name('sys', Load(), lineno=341, col_offset=12), 'platform', Load(), lineno=341, col_offset=12), 'startswith', Load(), lineno=341, col_offset=12), [Str('java', lineno=341, col_offset=36)], [], None, None, lineno=341, col_offset=12), lineno=341, col_offset=0), If(Compare(Attribute(Name('os', Load(), lineno=344, col_offset=3), 'name', Load(), lineno=344, col_offset=3), [Eq()], [Str('java', lineno=344, col_offset=14)], lineno=344, col_offset=3), [Assign([Name('TESTFN', Store(), lineno=346, col_offset=4)], Str('$test', lineno=346, col_offset=13), lineno=346, col_offset=4)], [If(Compare(Attribute(Name('os', Load(), lineno=347, col_offset=5), 'name', Load(), lineno=347, col_offset=5), [Eq()], [Str('riscos', lineno=347, col_offset=16)], lineno=347, col_offset=5), [Assign([Name('TESTFN', Store(), lineno=348, col_offset=4)], Str('testfile', lineno=348, col_offset=13), lineno=348, col_offset=4)], [Assign([Name('TESTFN', Store(), lineno=350, col_offset=4)], Str('@test', lineno=350, col_offset=13), lineno=350, col_offset=4), If(Name('have_unicode', Load(), lineno=352, col_offset=7), [If(Call(Name('isinstance', Load(), lineno=356, col_offset=11), [Str('', lineno=356, col_offset=22), Name('unicode', Load(), lineno=356, col_offset=26)], [], None, None, lineno=356, col_offset=11), [Assign([Name('TESTFN_UNICODE', Store(), lineno=359, col_offset=12)], Str('@test-\xe0\xf2', lineno=359, col_offset=29), lineno=359, col_offset=12)], [Assign([Name('TESTFN_UNICODE', Store(), lineno=362, col_offset=12)], Call(Name('unicode', Load(), lineno=362, col_offset=29), [Str('@test-\xe0\xf2', lineno=362, col_offset=37), Str('latin-1', lineno=362, col_offset=55)], [], None, None, lineno=362, col_offset=29), lineno=362, col_offset=12)], lineno=356, col_offset=8), Assign([Name('TESTFN_ENCODING', Store(), lineno=363, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=363, col_offset=26), 'getfilesystemencoding', Load(), lineno=363, col_offset=26), [], [], None, None, lineno=363, col_offset=26), lineno=363, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=368, col_offset=16), [Name('sys', Load(), lineno=368, col_offset=24), Str('getwindowsversion', lineno=368, col_offset=29)], [], None, None, lineno=368, col_offset=16), lineno=368, col_offset=12), Compare(Subscript(Call(Attribute(Name('sys', Load(), lineno=369, col_offset=16), 'getwindowsversion', Load(), lineno=369, col_offset=16), [], [], None, None, lineno=369, col_offset=16), Index(Num(3, lineno=369, col_offset=40)), Load(), lineno=369, col_offset=16), [Lt()], [Num(2, lineno=369, col_offset=45)], lineno=369, col_offset=16)], lineno=368, col_offset=12), [Assign([Name('TESTFN_UNENCODABLE', Store(), lineno=370, col_offset=12)], Name('None', Load(), lineno=370, col_offset=33), lineno=370, col_offset=12)], [Assign([Name('TESTFN_UNENCODABLE', Store(), lineno=373, col_offset=12)], Call(Name('eval', Load(), lineno=373, col_offset=33), [Str('u"@test-\\u5171\\u6709\\u3055\\u308c\\u308b"', lineno=373, col_offset=38)], [], None, None, lineno=373, col_offset=33), lineno=373, col_offset=12), TryExcept([Expr(Call(Attribute(Name('TESTFN_UNENCODABLE', Load(), lineno=380, col_offset=16), 'encode', Load(), lineno=380, col_offset=16), [Str('Latin1', lineno=380, col_offset=42)], [], None, None, lineno=380, col_offset=16), lineno=380, col_offset=16)], [ExceptHandler(Name('UnicodeEncodeError', Load(), lineno=381, col_offset=19), None, [Pass( lineno=382, col_offset=16)], lineno=381, col_offset=12)], [Print(None, [BinOp(Str('WARNING: The filename %r CAN be encoded by the filesystem.  Unicode filename tests may not be effective', lineno=385, col_offset=16), Mod(), Name('TESTFN_UNENCODABLE', Load(), lineno=387, col_offset=18), lineno=385, col_offset=16)], True, lineno=384, col_offset=16)], lineno=374, col_offset=12)], lineno=368, col_offset=8)], [], lineno=352, col_offset=4)], lineno=347, col_offset=5)], lineno=344, col_offset=0), Assign([Name('TESTFN', Store(), lineno=392, col_offset=0)], Call(Attribute(Str('{}_{}_tmp', lineno=392, col_offset=9), 'format', Load(), lineno=392, col_offset=9), [Name('TESTFN', Load(), lineno=392, col_offset=28), Call(Attribute(Name('os', Load(), lineno=392, col_offset=36), 'getpid', Load(), lineno=392, col_offset=36), [], [], None, None, lineno=392, col_offset=36)], [], None, None, lineno=392, col_offset=9), lineno=392, col_offset=0), Assign([Name('SAVEDCWD', Store(), lineno=395, col_offset=0)], Call(Attribute(Name('os', Load(), lineno=395, col_offset=11), 'getcwd', Load(), lineno=395, col_offset=11), [], [], None, None, lineno=395, col_offset=11), lineno=395, col_offset=0), FunctionDef('temp_cwd', arguments([Name('name', Param(), lineno=398, col_offset=13), Name('quiet', Param(), lineno=398, col_offset=29)], None, None, [Str('tempcwd', lineno=398, col_offset=18), Name('False', Load(), lineno=398, col_offset=35)]), [Expr(Str("\n    Context manager that creates a temporary directory and set it as CWD.\n\n    The new CWD is created in the current directory and it's named *name*.\n    If *quiet* is False (default) and it's not possible to create or change\n    the CWD, an error is raised.  If it's True, only a warning is raised\n    and the original CWD is used.\n    ", lineno=406, col_offset=-1), lineno=406, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=407, col_offset=7), [Name('name', Load(), lineno=407, col_offset=18), Name('unicode', Load(), lineno=407, col_offset=24)], [], None, None, lineno=407, col_offset=7), [TryExcept([Assign([Name('name', Store(), lineno=409, col_offset=12)], Call(Attribute(Name('name', Load(), lineno=409, col_offset=19), 'encode', Load(), lineno=409, col_offset=19), [BoolOp(Or(), [Call(Attribute(Name('sys', Load(), lineno=409, col_offset=31), 'getfilesystemencoding', Load(), lineno=409, col_offset=31), [], [], None, None, lineno=409, col_offset=31), Str('ascii', lineno=409, col_offset=62)], lineno=409, col_offset=31)], [], None, None, lineno=409, col_offset=19), lineno=409, col_offset=12)], [ExceptHandler(Name('UnicodeEncodeError', Load(), lineno=410, col_offset=15), None, [If(UnaryOp(Not(), Name('quiet', Load(), lineno=411, col_offset=19), lineno=411, col_offset=15), [Raise(Call(Attribute(Name('unittest', Load(), lineno=412, col_offset=22), 'SkipTest', Load(), lineno=412, col_offset=22), [Str('unable to encode the cwd name with the filesystem encoding.', lineno=412, col_offset=40)], [], None, None, lineno=412, col_offset=22), None, None, lineno=412, col_offset=16)], [], lineno=411, col_offset=12)], lineno=410, col_offset=8)], [], lineno=408, col_offset=8)], [], lineno=407, col_offset=4), Assign([Name('saved_dir', Store(), lineno=414, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=414, col_offset=16), 'getcwd', Load(), lineno=414, col_offset=16), [], [], None, None, lineno=414, col_offset=16), lineno=414, col_offset=4), Assign([Name('is_temporary', Store(), lineno=415, col_offset=4)], Name('False', Load(), lineno=415, col_offset=19), lineno=415, col_offset=4), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=417, col_offset=8), 'mkdir', Load(), lineno=417, col_offset=8), [Name('name', Load(), lineno=417, col_offset=17)], [], None, None, lineno=417, col_offset=8), lineno=417, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=418, col_offset=8), 'chdir', Load(), lineno=418, col_offset=8), [Name('name', Load(), lineno=418, col_offset=17)], [], None, None, lineno=418, col_offset=8), lineno=418, col_offset=8), Assign([Name('is_temporary', Store(), lineno=419, col_offset=8)], Name('True', Load(), lineno=419, col_offset=23), lineno=419, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=420, col_offset=11), None, [If(UnaryOp(Not(), Name('quiet', Load(), lineno=421, col_offset=15), lineno=421, col_offset=11), [Raise(None, None, None, lineno=422, col_offset=12)], [], lineno=421, col_offset=8), Expr(Call(Attribute(Name('warnings', Load(), lineno=423, col_offset=8), 'warn', Load(), lineno=423, col_offset=8), [BinOp(Str('tests may fail, unable to change the CWD to ', lineno=423, col_offset=22), Add(), Name('name', Load(), lineno=423, col_offset=71), lineno=423, col_offset=22), Name('RuntimeWarning', Load(), lineno=424, col_offset=22)], [keyword('stacklevel', Num(3, lineno=424, col_offset=49))], None, None, lineno=423, col_offset=8), lineno=423, col_offset=8)], lineno=420, col_offset=4)], [], lineno=416, col_offset=4), TryFinally([Expr(Yield(Call(Attribute(Name('os', Load(), lineno=426, col_offset=14), 'getcwd', Load(), lineno=426, col_offset=14), [], [], None, None, lineno=426, col_offset=14), lineno=426, col_offset=8), lineno=426, col_offset=8)], [Expr(Call(Attribute(Name('os', Load(), lineno=428, col_offset=8), 'chdir', Load(), lineno=428, col_offset=8), [Name('saved_dir', Load(), lineno=428, col_offset=17)], [], None, None, lineno=428, col_offset=8), lineno=428, col_offset=8), If(Name('is_temporary', Load(), lineno=429, col_offset=11), [Expr(Call(Name('rmtree', Load(), lineno=430, col_offset=12), [Name('name', Load(), lineno=430, col_offset=19)], [], None, None, lineno=430, col_offset=12), lineno=430, col_offset=12)], [], lineno=429, col_offset=8)], lineno=425, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=397, col_offset=1), 'contextmanager', Load(), lineno=397, col_offset=1)], lineno=397, col_offset=0), FunctionDef('findfile', arguments([Name('file', Param(), lineno=433, col_offset=13), Name('here', Param(), lineno=433, col_offset=19), Name('subdir', Param(), lineno=433, col_offset=34)], None, None, [Name('__file__', Load(), lineno=433, col_offset=24), Name('None', Load(), lineno=433, col_offset=41)]), [Expr(Str('Try to find a file on sys.path and the working directory.  If it is not\n    found the argument passed to the function is returned (this does not\n    necessarily signal failure; could still be the legitimate path).', lineno=436, col_offset=-1), lineno=436, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=437, col_offset=7), 'path', Load(), lineno=437, col_offset=7), 'isabs', Load(), lineno=437, col_offset=7), [Name('file', Load(), lineno=437, col_offset=21)], [], None, None, lineno=437, col_offset=7), [Return(Name('file', Load(), lineno=438, col_offset=15), lineno=438, col_offset=8)], [], lineno=437, col_offset=4), If(Compare(Name('subdir', Load(), lineno=439, col_offset=7), [IsNot()], [Name('None', Load(), lineno=439, col_offset=21)], lineno=439, col_offset=7), [Assign([Name('file', Store(), lineno=440, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=440, col_offset=15), 'path', Load(), lineno=440, col_offset=15), 'join', Load(), lineno=440, col_offset=15), [Name('subdir', Load(), lineno=440, col_offset=28), Name('file', Load(), lineno=440, col_offset=36)], [], None, None, lineno=440, col_offset=15), lineno=440, col_offset=8)], [], lineno=439, col_offset=4), Assign([Name('path', Store(), lineno=441, col_offset=4)], Attribute(Name('sys', Load(), lineno=441, col_offset=11), 'path', Load(), lineno=441, col_offset=11), lineno=441, col_offset=4), Assign([Name('path', Store(), lineno=442, col_offset=4)], BinOp(List([Call(Attribute(Attribute(Name('os', Load(), lineno=442, col_offset=12), 'path', Load(), lineno=442, col_offset=12), 'dirname', Load(), lineno=442, col_offset=12), [Name('here', Load(), lineno=442, col_offset=28)], [], None, None, lineno=442, col_offset=12)], Load(), lineno=442, col_offset=11), Add(), Name('path', Load(), lineno=442, col_offset=37), lineno=442, col_offset=11), lineno=442, col_offset=4), For(Name('dn', Store(), lineno=443, col_offset=8), Name('path', Load(), lineno=443, col_offset=14), [Assign([Name('fn', Store(), lineno=444, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=444, col_offset=13), 'path', Load(), lineno=444, col_offset=13), 'join', Load(), lineno=444, col_offset=13), [Name('dn', Load(), lineno=444, col_offset=26), Name('file', Load(), lineno=444, col_offset=30)], [], None, None, lineno=444, col_offset=13), lineno=444, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=445, col_offset=11), 'path', Load(), lineno=445, col_offset=11), 'exists', Load(), lineno=445, col_offset=11), [Name('fn', Load(), lineno=445, col_offset=26)], [], None, None, lineno=445, col_offset=11), [Return(Name('fn', Load(), lineno=445, col_offset=38), lineno=445, col_offset=31)], [], lineno=445, col_offset=8)], [], lineno=443, col_offset=4), Return(Name('file', Load(), lineno=446, col_offset=11), lineno=446, col_offset=4)], [], lineno=433, col_offset=0), FunctionDef('sortdict', arguments([Name('dict', Param(), lineno=448, col_offset=13)], None, None, []), [Expr(Str('Like repr(dict), but in sorted order.', lineno=449, col_offset=4), lineno=449, col_offset=4), Assign([Name('items', Store(), lineno=450, col_offset=4)], Call(Attribute(Name('dict', Load(), lineno=450, col_offset=12), 'items', Load(), lineno=450, col_offset=12), [], [], None, None, lineno=450, col_offset=12), lineno=450, col_offset=4), Expr(Call(Attribute(Name('items', Load(), lineno=451, col_offset=4), 'sort', Load(), lineno=451, col_offset=4), [], [], None, None, lineno=451, col_offset=4), lineno=451, col_offset=4), Assign([Name('reprpairs', Store(), lineno=452, col_offset=4)], ListComp(BinOp(Str('%r: %r', lineno=452, col_offset=17), Mod(), Name('pair', Load(), lineno=452, col_offset=28), lineno=452, col_offset=17), [comprehension(Name('pair', Store(), lineno=452, col_offset=37), Name('items', Load(), lineno=452, col_offset=45), [])], lineno=452, col_offset=17), lineno=452, col_offset=4), Assign([Name('withcommas', Store(), lineno=453, col_offset=4)], Call(Attribute(Str(', ', lineno=453, col_offset=17), 'join', Load(), lineno=453, col_offset=17), [Name('reprpairs', Load(), lineno=453, col_offset=27)], [], None, None, lineno=453, col_offset=17), lineno=453, col_offset=4), Return(BinOp(Str('{%s}', lineno=454, col_offset=11), Mod(), Name('withcommas', Load(), lineno=454, col_offset=20), lineno=454, col_offset=11), lineno=454, col_offset=4)], [], lineno=448, col_offset=0), FunctionDef('make_bad_fd', arguments([], None, None, []), [Expr(Str('\n    Create an invalid file descriptor by opening and closing a file and return\n    its fd.\n    ', lineno=460, col_offset=-1), lineno=460, col_offset=-1), Assign([Name('file', Store(), lineno=461, col_offset=4)], Call(Name('open', Load(), lineno=461, col_offset=11), [Name('TESTFN', Load(), lineno=461, col_offset=16), Str('wb', lineno=461, col_offset=24)], [], None, None, lineno=461, col_offset=11), lineno=461, col_offset=4), TryFinally([Return(Call(Attribute(Name('file', Load(), lineno=463, col_offset=15), 'fileno', Load(), lineno=463, col_offset=15), [], [], None, None, lineno=463, col_offset=15), lineno=463, col_offset=8)], [Expr(Call(Attribute(Name('file', Load(), lineno=465, col_offset=8), 'close', Load(), lineno=465, col_offset=8), [], [], None, None, lineno=465, col_offset=8), lineno=465, col_offset=8), Expr(Call(Name('unlink', Load(), lineno=466, col_offset=8), [Name('TESTFN', Load(), lineno=466, col_offset=15)], [], None, None, lineno=466, col_offset=8), lineno=466, col_offset=8)], lineno=462, col_offset=4)], [], lineno=456, col_offset=0), FunctionDef('check_syntax_error', arguments([Name('testcase', Param(), lineno=468, col_offset=23), Name('statement', Param(), lineno=468, col_offset=33)], None, None, []), [Expr(Call(Attribute(Name('testcase', Load(), lineno=469, col_offset=4), 'assertRaises', Load(), lineno=469, col_offset=4), [Name('SyntaxError', Load(), lineno=469, col_offset=26), Name('compile', Load(), lineno=469, col_offset=39), Name('statement', Load(), lineno=469, col_offset=48), Str('<test string>', lineno=470, col_offset=26), Str('exec', lineno=470, col_offset=43)], [], None, None, lineno=469, col_offset=4), lineno=469, col_offset=4)], [], lineno=468, col_offset=0), FunctionDef('open_urlresource', arguments([Name('url', Param(), lineno=472, col_offset=21), Name('check', Param(), lineno=472, col_offset=26)], None, None, [Name('None', Load(), lineno=472, col_offset=32)]), [Import([alias('urlparse', None), alias('urllib2', None)], lineno=473, col_offset=4), Assign([Name('filename', Store(), lineno=475, col_offset=4)], Subscript(Call(Attribute(Subscript(Call(Attribute(Name('urlparse', Load(), lineno=475, col_offset=15), 'urlparse', Load(), lineno=475, col_offset=15), [Name('url', Load(), lineno=475, col_offset=33)], [], None, None, lineno=475, col_offset=15), Index(Num(2, lineno=475, col_offset=38)), Load(), lineno=475, col_offset=15), 'split', Load(), lineno=475, col_offset=15), [Str('/', lineno=475, col_offset=47)], [], None, None, lineno=475, col_offset=15), Index(Num(-1, lineno=475, col_offset=53)), Load(), lineno=475, col_offset=15), lineno=475, col_offset=4), Assign([Name('fn', Store(), lineno=477, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=477, col_offset=9), 'path', Load(), lineno=477, col_offset=9), 'join', Load(), lineno=477, col_offset=9), [Call(Attribute(Attribute(Name('os', Load(), lineno=477, col_offset=22), 'path', Load(), lineno=477, col_offset=22), 'dirname', Load(), lineno=477, col_offset=22), [Name('__file__', Load(), lineno=477, col_offset=38)], [], None, None, lineno=477, col_offset=22), Str('data', lineno=477, col_offset=49), Name('filename', Load(), lineno=477, col_offset=57)], [], None, None, lineno=477, col_offset=9), lineno=477, col_offset=4), FunctionDef('check_valid_file', arguments([Name('fn', Param(), lineno=479, col_offset=25)], None, None, []), [Assign([Name('f', Store(), lineno=480, col_offset=8)], Call(Name('open', Load(), lineno=480, col_offset=12), [Name('fn', Load(), lineno=480, col_offset=17)], [], None, None, lineno=480, col_offset=12), lineno=480, col_offset=8), If(Compare(Name('check', Load(), lineno=481, col_offset=11), [Is()], [Name('None', Load(), lineno=481, col_offset=20)], lineno=481, col_offset=11), [Return(Name('f', Load(), lineno=482, col_offset=19), lineno=482, col_offset=12)], [If(Call(Name('check', Load(), lineno=483, col_offset=13), [Name('f', Load(), lineno=483, col_offset=19)], [], None, None, lineno=483, col_offset=13), [Expr(Call(Attribute(Name('f', Load(), lineno=484, col_offset=12), 'seek', Load(), lineno=484, col_offset=12), [Num(0, lineno=484, col_offset=19)], [], None, None, lineno=484, col_offset=12), lineno=484, col_offset=12), Return(Name('f', Load(), lineno=485, col_offset=19), lineno=485, col_offset=12)], [], lineno=483, col_offset=13)], lineno=481, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=486, col_offset=8), 'close', Load(), lineno=486, col_offset=8), [], [], None, None, lineno=486, col_offset=8), lineno=486, col_offset=8)], [], lineno=479, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=488, col_offset=7), 'path', Load(), lineno=488, col_offset=7), 'exists', Load(), lineno=488, col_offset=7), [Name('fn', Load(), lineno=488, col_offset=22)], [], None, None, lineno=488, col_offset=7), [Assign([Name('f', Store(), lineno=489, col_offset=8)], Call(Name('check_valid_file', Load(), lineno=489, col_offset=12), [Name('fn', Load(), lineno=489, col_offset=29)], [], None, None, lineno=489, col_offset=12), lineno=489, col_offset=8), If(Compare(Name('f', Load(), lineno=490, col_offset=11), [IsNot()], [Name('None', Load(), lineno=490, col_offset=20)], lineno=490, col_offset=11), [Return(Name('f', Load(), lineno=491, col_offset=19), lineno=491, col_offset=12)], [], lineno=490, col_offset=8), Expr(Call(Name('unlink', Load(), lineno=492, col_offset=8), [Name('fn', Load(), lineno=492, col_offset=15)], [], None, None, lineno=492, col_offset=8), lineno=492, col_offset=8)], [], lineno=488, col_offset=4), Expr(Call(Name('requires', Load(), lineno=495, col_offset=4), [Str('urlfetch', lineno=495, col_offset=13)], [], None, None, lineno=495, col_offset=4), lineno=495, col_offset=4), Print(Call(Name('get_original_stdout', Load(), lineno=497, col_offset=13), [], [], None, None, lineno=497, col_offset=13), [BinOp(Str('\tfetching %s ...', lineno=497, col_offset=36), Mod(), Name('url', Load(), lineno=497, col_offset=58), lineno=497, col_offset=36)], True, lineno=497, col_offset=4), Assign([Name('f', Store(), lineno=498, col_offset=4)], Call(Attribute(Name('urllib2', Load(), lineno=498, col_offset=8), 'urlopen', Load(), lineno=498, col_offset=8), [Name('url', Load(), lineno=498, col_offset=24)], [keyword('timeout', Num(15, lineno=498, col_offset=37))], None, None, lineno=498, col_offset=8), lineno=498, col_offset=4), TryFinally([With(Call(Name('open', Load(), lineno=500, col_offset=13), [Name('fn', Load(), lineno=500, col_offset=18), Str('wb', lineno=500, col_offset=22)], [], None, None, lineno=500, col_offset=13), Name('out', Store(), lineno=500, col_offset=31), [Assign([Name('s', Store(), lineno=501, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=501, col_offset=16), 'read', Load(), lineno=501, col_offset=16), [], [], None, None, lineno=501, col_offset=16), lineno=501, col_offset=12), While(Name('s', Load(), lineno=502, col_offset=18), [Expr(Call(Attribute(Name('out', Load(), lineno=503, col_offset=16), 'write', Load(), lineno=503, col_offset=16), [Name('s', Load(), lineno=503, col_offset=26)], [], None, None, lineno=503, col_offset=16), lineno=503, col_offset=16), Assign([Name('s', Store(), lineno=504, col_offset=16)], Call(Attribute(Name('f', Load(), lineno=504, col_offset=20), 'read', Load(), lineno=504, col_offset=20), [], [], None, None, lineno=504, col_offset=20), lineno=504, col_offset=16)], [], lineno=502, col_offset=12)], lineno=500, col_offset=13)], [Expr(Call(Attribute(Name('f', Load(), lineno=506, col_offset=8), 'close', Load(), lineno=506, col_offset=8), [], [], None, None, lineno=506, col_offset=8), lineno=506, col_offset=8)], lineno=499, col_offset=4), Assign([Name('f', Store(), lineno=508, col_offset=4)], Call(Name('check_valid_file', Load(), lineno=508, col_offset=8), [Name('fn', Load(), lineno=508, col_offset=25)], [], None, None, lineno=508, col_offset=8), lineno=508, col_offset=4), If(Compare(Name('f', Load(), lineno=509, col_offset=7), [IsNot()], [Name('None', Load(), lineno=509, col_offset=16)], lineno=509, col_offset=7), [Return(Name('f', Load(), lineno=510, col_offset=15), lineno=510, col_offset=8)], [], lineno=509, col_offset=4), Raise(Call(Name('TestFailed', Load(), lineno=511, col_offset=10), [BinOp(Str('invalid resource "%s"', lineno=511, col_offset=21), Mod(), Name('fn', Load(), lineno=511, col_offset=47), lineno=511, col_offset=21)], [], None, None, lineno=511, col_offset=10), None, None, lineno=511, col_offset=4)], [], lineno=472, col_offset=0), ClassDef('WarningsRecorder', [Name('object', Load(), lineno=514, col_offset=23)], [Expr(Str('Convenience wrapper for the warnings list returned on\n       entry to the warnings.catch_warnings() context manager.\n    ', lineno=517, col_offset=-1), lineno=517, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=518, col_offset=17), Name('warnings_list', Param(), lineno=518, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=519, col_offset=8), '_warnings', Store(), lineno=519, col_offset=8)], Name('warnings_list', Load(), lineno=519, col_offset=25), lineno=519, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=520, col_offset=8), '_last', Store(), lineno=520, col_offset=8)], Num(0, lineno=520, col_offset=21), lineno=520, col_offset=8)], [], lineno=518, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=522, col_offset=20), Name('attr', Param(), lineno=522, col_offset=26)], None, None, []), [If(Compare(Call(Name('len', Load(), lineno=523, col_offset=11), [Attribute(Name('self', Load(), lineno=523, col_offset=15), '_warnings', Load(), lineno=523, col_offset=15)], [], None, None, lineno=523, col_offset=11), [Gt()], [Attribute(Name('self', Load(), lineno=523, col_offset=33), '_last', Load(), lineno=523, col_offset=33)], lineno=523, col_offset=11), [Return(Call(Name('getattr', Load(), lineno=524, col_offset=19), [Subscript(Attribute(Name('self', Load(), lineno=524, col_offset=27), '_warnings', Load(), lineno=524, col_offset=27), Index(Num(-1, lineno=524, col_offset=43)), Load(), lineno=524, col_offset=27), Name('attr', Load(), lineno=524, col_offset=47)], [], None, None, lineno=524, col_offset=19), lineno=524, col_offset=12)], [If(Compare(Name('attr', Load(), lineno=525, col_offset=13), [In()], [Attribute(Attribute(Name('warnings', Load(), lineno=525, col_offset=21), 'WarningMessage', Load(), lineno=525, col_offset=21), '_WARNING_DETAILS', Load(), lineno=525, col_offset=21)], lineno=525, col_offset=13), [Return(Name('None', Load(), lineno=526, col_offset=19), lineno=526, col_offset=12)], [], lineno=525, col_offset=13)], lineno=523, col_offset=8), Raise(Call(Name('AttributeError', Load(), lineno=527, col_offset=14), [BinOp(Str('%r has no attribute %r', lineno=527, col_offset=29), Mod(), Tuple([Name('self', Load(), lineno=527, col_offset=57), Name('attr', Load(), lineno=527, col_offset=63)], Load(), lineno=527, col_offset=57), lineno=527, col_offset=29)], [], None, None, lineno=527, col_offset=14), None, None, lineno=527, col_offset=8)], [], lineno=522, col_offset=4), FunctionDef('warnings', arguments([Name('self', Param(), lineno=530, col_offset=17)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=531, col_offset=15), '_warnings', Load(), lineno=531, col_offset=15), Slice(Attribute(Name('self', Load(), lineno=531, col_offset=30), '_last', Load(), lineno=531, col_offset=30), None, None), Load(), lineno=531, col_offset=15), lineno=531, col_offset=8)], [Name('property', Load(), lineno=529, col_offset=5)], lineno=529, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=533, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=534, col_offset=8), '_last', Store(), lineno=534, col_offset=8)], Call(Name('len', Load(), lineno=534, col_offset=21), [Attribute(Name('self', Load(), lineno=534, col_offset=25), '_warnings', Load(), lineno=534, col_offset=25)], [], None, None, lineno=534, col_offset=21), lineno=534, col_offset=8)], [], lineno=533, col_offset=4)], [], lineno=514, col_offset=0), FunctionDef('_filterwarnings', arguments([Name('filters', Param(), lineno=537, col_offset=20), Name('quiet', Param(), lineno=537, col_offset=29)], None, None, [Name('False', Load(), lineno=537, col_offset=35)]), [Expr(Str("Catch the warnings, then check if all the expected\n    warnings have been raised and re-raise unexpected warnings.\n    If 'quiet' is True, only re-raise the unexpected warnings.\n    ", lineno=541, col_offset=-1), lineno=541, col_offset=-1), Assign([Name('frame', Store(), lineno=544, col_offset=4)], Call(Attribute(Name('sys', Load(), lineno=544, col_offset=12), '_getframe', Load(), lineno=544, col_offset=12), [Num(2, lineno=544, col_offset=26)], [], None, None, lineno=544, col_offset=12), lineno=544, col_offset=4), Assign([Name('registry', Store(), lineno=545, col_offset=4)], Call(Attribute(Attribute(Name('frame', Load(), lineno=545, col_offset=15), 'f_globals', Load(), lineno=545, col_offset=15), 'get', Load(), lineno=545, col_offset=15), [Str('__warningregistry__', lineno=545, col_offset=35)], [], None, None, lineno=545, col_offset=15), lineno=545, col_offset=4), If(Name('registry', Load(), lineno=546, col_offset=7), [Expr(Call(Attribute(Name('registry', Load(), lineno=547, col_offset=8), 'clear', Load(), lineno=547, col_offset=8), [], [], None, None, lineno=547, col_offset=8), lineno=547, col_offset=8)], [], lineno=546, col_offset=4), With(Call(Attribute(Name('warnings', Load(), lineno=548, col_offset=9), 'catch_warnings', Load(), lineno=548, col_offset=9), [], [keyword('record', Name('True', Load(), lineno=548, col_offset=40))], None, None, lineno=548, col_offset=9), Name('w', Store(), lineno=548, col_offset=49), [Expr(Call(Attribute(Subscript(Attribute(Name('sys', Load(), lineno=552, col_offset=8), 'modules', Load(), lineno=552, col_offset=8), Index(Str('warnings', lineno=552, col_offset=20)), Load(), lineno=552, col_offset=8), 'simplefilter', Load(), lineno=552, col_offset=8), [Str('always', lineno=552, col_offset=45)], [], None, None, lineno=552, col_offset=8), lineno=552, col_offset=8), Expr(Yield(Call(Name('WarningsRecorder', Load(), lineno=553, col_offset=14), [Name('w', Load(), lineno=553, col_offset=31)], [], None, None, lineno=553, col_offset=14), lineno=553, col_offset=8), lineno=553, col_offset=8)], lineno=548, col_offset=9), Assign([Name('reraise', Store(), lineno=555, col_offset=4)], ListComp(Attribute(Name('warning', Load(), lineno=555, col_offset=15), 'message', Load(), lineno=555, col_offset=15), [comprehension(Name('warning', Store(), lineno=555, col_offset=35), Name('w', Load(), lineno=555, col_offset=46), [])], lineno=555, col_offset=15), lineno=555, col_offset=4), Assign([Name('missing', Store(), lineno=556, col_offset=4)], List([], Load(), lineno=556, col_offset=14), lineno=556, col_offset=4), For(Tuple([Name('msg', Store(), lineno=557, col_offset=8), Name('cat', Store(), lineno=557, col_offset=13)], Store(), lineno=557, col_offset=8), Name('filters', Load(), lineno=557, col_offset=20), [Assign([Name('seen', Store(), lineno=558, col_offset=8)], Name('False', Load(), lineno=558, col_offset=15), lineno=558, col_offset=8), For(Name('exc', Store(), lineno=559, col_offset=12), Subscript(Name('reraise', Load(), lineno=559, col_offset=19), Slice(None, None, None), Load(), lineno=559, col_offset=19), [Assign([Name('message', Store(), lineno=560, col_offset=12)], Call(Name('str', Load(), lineno=560, col_offset=22), [Name('exc', Load(), lineno=560, col_offset=26)], [], None, None, lineno=560, col_offset=22), lineno=560, col_offset=12), If(BoolOp(And(), [Call(Attribute(Name('re', Load(), lineno=562, col_offset=16), 'match', Load(), lineno=562, col_offset=16), [Name('msg', Load(), lineno=562, col_offset=25), Name('message', Load(), lineno=562, col_offset=30), Attribute(Name('re', Load(), lineno=562, col_offset=39), 'I', Load(), lineno=562, col_offset=39)], [], None, None, lineno=562, col_offset=16), Call(Name('issubclass', Load(), lineno=563, col_offset=16), [Attribute(Name('exc', Load(), lineno=563, col_offset=27), '__class__', Load(), lineno=563, col_offset=27), Name('cat', Load(), lineno=563, col_offset=42)], [], None, None, lineno=563, col_offset=16)], lineno=562, col_offset=16), [Assign([Name('seen', Store(), lineno=564, col_offset=16)], Name('True', Load(), lineno=564, col_offset=23), lineno=564, col_offset=16), Expr(Call(Attribute(Name('reraise', Load(), lineno=565, col_offset=16), 'remove', Load(), lineno=565, col_offset=16), [Name('exc', Load(), lineno=565, col_offset=31)], [], None, None, lineno=565, col_offset=16), lineno=565, col_offset=16)], [], lineno=562, col_offset=12)], [], lineno=559, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('seen', Load(), lineno=566, col_offset=15), lineno=566, col_offset=11), UnaryOp(Not(), Name('quiet', Load(), lineno=566, col_offset=28), lineno=566, col_offset=24)], lineno=566, col_offset=11), [Expr(Call(Attribute(Name('missing', Load(), lineno=568, col_offset=12), 'append', Load(), lineno=568, col_offset=12), [Tuple([Name('msg', Load(), lineno=568, col_offset=28), Attribute(Name('cat', Load(), lineno=568, col_offset=33), '__name__', Load(), lineno=568, col_offset=33)], Load(), lineno=568, col_offset=28)], [], None, None, lineno=568, col_offset=12), lineno=568, col_offset=12)], [], lineno=566, col_offset=8)], [], lineno=557, col_offset=4), If(Name('reraise', Load(), lineno=569, col_offset=7), [Raise(Call(Name('AssertionError', Load(), lineno=570, col_offset=14), [BinOp(Str('unhandled warning %r', lineno=570, col_offset=29), Mod(), Subscript(Name('reraise', Load(), lineno=570, col_offset=54), Index(Num(0, lineno=570, col_offset=62)), Load(), lineno=570, col_offset=54), lineno=570, col_offset=29)], [], None, None, lineno=570, col_offset=14), None, None, lineno=570, col_offset=8)], [], lineno=569, col_offset=4), If(Name('missing', Load(), lineno=571, col_offset=7), [Raise(Call(Name('AssertionError', Load(), lineno=572, col_offset=14), [BinOp(Str('filter (%r, %s) did not catch any warning', lineno=572, col_offset=29), Mod(), Subscript(Name('missing', Load(), lineno=573, col_offset=29), Index(Num(0, lineno=573, col_offset=37)), Load(), lineno=573, col_offset=29), lineno=572, col_offset=29)], [], None, None, lineno=572, col_offset=14), None, None, lineno=572, col_offset=8)], [], lineno=571, col_offset=4)], [], lineno=537, col_offset=0), FunctionDef('check_warnings', arguments([], 'filters', 'kwargs', []), [Expr(Str('Context manager to silence warnings.\n\n    Accept 2-tuples as positional arguments:\n        ("message regexp", WarningCategory)\n\n    Optional argument:\n     - if \'quiet\' is True, it does not fail if a filter catches nothing\n        (default True without argument,\n         default False if some filters are defined)\n\n    Without argument, it defaults to:\n        check_warnings(("", Warning), quiet=True)\n    ', lineno=590, col_offset=-1), lineno=590, col_offset=-1), Assign([Name('quiet', Store(), lineno=591, col_offset=4)], Call(Attribute(Name('kwargs', Load(), lineno=591, col_offset=12), 'get', Load(), lineno=591, col_offset=12), [Str('quiet', lineno=591, col_offset=23)], [], None, None, lineno=591, col_offset=12), lineno=591, col_offset=4), If(UnaryOp(Not(), Name('filters', Load(), lineno=592, col_offset=11), lineno=592, col_offset=7), [Assign([Name('filters', Store(), lineno=593, col_offset=8)], Tuple([Tuple([Str('', lineno=593, col_offset=20), Name('Warning', Load(), lineno=593, col_offset=24)], Load(), lineno=593, col_offset=20)], Load(), lineno=593, col_offset=19), lineno=593, col_offset=8), If(Compare(Name('quiet', Load(), lineno=595, col_offset=11), [Is()], [Name('None', Load(), lineno=595, col_offset=20)], lineno=595, col_offset=11), [Assign([Name('quiet', Store(), lineno=596, col_offset=12)], Name('True', Load(), lineno=596, col_offset=20), lineno=596, col_offset=12)], [], lineno=595, col_offset=8)], [], lineno=592, col_offset=4), Return(Call(Name('_filterwarnings', Load(), lineno=597, col_offset=11), [Name('filters', Load(), lineno=597, col_offset=27), Name('quiet', Load(), lineno=597, col_offset=36)], [], None, None, lineno=597, col_offset=11), lineno=597, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=576, col_offset=1), 'contextmanager', Load(), lineno=576, col_offset=1)], lineno=576, col_offset=0), FunctionDef('check_py3k_warnings', arguments([], 'filters', 'kwargs', []), [Expr(Str('Context manager to silence py3k warnings.\n\n    Accept 2-tuples as positional arguments:\n        ("message regexp", WarningCategory)\n\n    Optional argument:\n     - if \'quiet\' is True, it does not fail if a filter catches nothing\n        (default False)\n\n    Without argument, it defaults to:\n        check_py3k_warnings(("", DeprecationWarning), quiet=False)\n    ', lineno=613, col_offset=-1), lineno=613, col_offset=-1), If(Attribute(Name('sys', Load(), lineno=614, col_offset=7), 'py3kwarning', Load(), lineno=614, col_offset=7), [If(UnaryOp(Not(), Name('filters', Load(), lineno=615, col_offset=15), lineno=615, col_offset=11), [Assign([Name('filters', Store(), lineno=616, col_offset=12)], Tuple([Tuple([Str('', lineno=616, col_offset=24), Name('DeprecationWarning', Load(), lineno=616, col_offset=28)], Load(), lineno=616, col_offset=24)], Load(), lineno=616, col_offset=23), lineno=616, col_offset=12)], [], lineno=615, col_offset=8)], [Assign([Name('filters', Store(), lineno=619, col_offset=8)], Tuple([], Load(), lineno=619, col_offset=18), lineno=619, col_offset=8)], lineno=614, col_offset=4), Return(Call(Name('_filterwarnings', Load(), lineno=620, col_offset=11), [Name('filters', Load(), lineno=620, col_offset=27), Call(Attribute(Name('kwargs', Load(), lineno=620, col_offset=36), 'get', Load(), lineno=620, col_offset=36), [Str('quiet', lineno=620, col_offset=47)], [], None, None, lineno=620, col_offset=36)], [], None, None, lineno=620, col_offset=11), lineno=620, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=600, col_offset=1), 'contextmanager', Load(), lineno=600, col_offset=1)], lineno=600, col_offset=0), ClassDef('CleanImport', [Name('object', Load(), lineno=623, col_offset=18)], [Expr(Str('Context manager to force import to return a new module reference.\n\n    This is useful for testing module-level behaviours, such as\n    the emission of a DeprecationWarning on import.\n\n    Use like this:\n\n        with CleanImport("foo"):\n            importlib.import_module("foo") # new reference\n    ', lineno=633, col_offset=-1), lineno=633, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=635, col_offset=17)], 'module_names', None, []), [Assign([Attribute(Name('self', Load(), lineno=636, col_offset=8), 'original_modules', Store(), lineno=636, col_offset=8)], Call(Attribute(Attribute(Name('sys', Load(), lineno=636, col_offset=32), 'modules', Load(), lineno=636, col_offset=32), 'copy', Load(), lineno=636, col_offset=32), [], [], None, None, lineno=636, col_offset=32), lineno=636, col_offset=8), For(Name('module_name', Store(), lineno=637, col_offset=12), Name('module_names', Load(), lineno=637, col_offset=27), [If(Compare(Name('module_name', Load(), lineno=638, col_offset=15), [In()], [Attribute(Name('sys', Load(), lineno=638, col_offset=30), 'modules', Load(), lineno=638, col_offset=30)], lineno=638, col_offset=15), [Assign([Name('module', Store(), lineno=639, col_offset=16)], Subscript(Attribute(Name('sys', Load(), lineno=639, col_offset=25), 'modules', Load(), lineno=639, col_offset=25), Index(Name('module_name', Load(), lineno=639, col_offset=37)), Load(), lineno=639, col_offset=25), lineno=639, col_offset=16), If(Compare(Attribute(Name('module', Load(), lineno=644, col_offset=19), '__name__', Load(), lineno=644, col_offset=19), [NotEq()], [Name('module_name', Load(), lineno=644, col_offset=38)], lineno=644, col_offset=19), [Delete([Subscript(Attribute(Name('sys', Load(), lineno=645, col_offset=24), 'modules', Load(), lineno=645, col_offset=24), Index(Attribute(Name('module', Load(), lineno=645, col_offset=36), '__name__', Load(), lineno=645, col_offset=36)), Del(), lineno=645, col_offset=24)], lineno=645, col_offset=20)], [], lineno=644, col_offset=16), Delete([Subscript(Attribute(Name('sys', Load(), lineno=646, col_offset=20), 'modules', Load(), lineno=646, col_offset=20), Index(Name('module_name', Load(), lineno=646, col_offset=32)), Del(), lineno=646, col_offset=20)], lineno=646, col_offset=16)], [], lineno=638, col_offset=12)], [], lineno=637, col_offset=8)], [], lineno=635, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=648, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=649, col_offset=15), lineno=649, col_offset=8)], [], lineno=648, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=651, col_offset=17)], 'ignore_exc', None, []), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=652, col_offset=8), 'modules', Load(), lineno=652, col_offset=8), 'update', Load(), lineno=652, col_offset=8), [Attribute(Name('self', Load(), lineno=652, col_offset=27), 'original_modules', Load(), lineno=652, col_offset=27)], [], None, None, lineno=652, col_offset=8), lineno=652, col_offset=8)], [], lineno=651, col_offset=4)], [], lineno=623, col_offset=0), ClassDef('EnvironmentVarGuard', [Attribute(Name('UserDict', Load(), lineno=655, col_offset=26), 'DictMixin', Load(), lineno=655, col_offset=26)], [Expr(Str('Class to help protect the environment variable properly.  Can be used as\n    a context manager.', lineno=658, col_offset=-1), lineno=658, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=660, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=661, col_offset=8), '_environ', Store(), lineno=661, col_offset=8)], Attribute(Name('os', Load(), lineno=661, col_offset=24), 'environ', Load(), lineno=661, col_offset=24), lineno=661, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=662, col_offset=8), '_changed', Store(), lineno=662, col_offset=8)], Dict([], [], lineno=662, col_offset=24), lineno=662, col_offset=8)], [], lineno=660, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=664, col_offset=20), Name('envvar', Param(), lineno=664, col_offset=26)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=665, col_offset=15), '_environ', Load(), lineno=665, col_offset=15), Index(Name('envvar', Load(), lineno=665, col_offset=29)), Load(), lineno=665, col_offset=15), lineno=665, col_offset=8)], [], lineno=664, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=667, col_offset=20), Name('envvar', Param(), lineno=667, col_offset=26), Name('value', Param(), lineno=667, col_offset=34)], None, None, []), [If(Compare(Name('envvar', Load(), lineno=669, col_offset=11), [NotIn()], [Attribute(Name('self', Load(), lineno=669, col_offset=25), '_changed', Load(), lineno=669, col_offset=25)], lineno=669, col_offset=11), [Assign([Subscript(Attribute(Name('self', Load(), lineno=670, col_offset=12), '_changed', Load(), lineno=670, col_offset=12), Index(Name('envvar', Load(), lineno=670, col_offset=26)), Store(), lineno=670, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=670, col_offset=36), '_environ', Load(), lineno=670, col_offset=36), 'get', Load(), lineno=670, col_offset=36), [Name('envvar', Load(), lineno=670, col_offset=54)], [], None, None, lineno=670, col_offset=36), lineno=670, col_offset=12)], [], lineno=669, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=671, col_offset=8), '_environ', Load(), lineno=671, col_offset=8), Index(Name('envvar', Load(), lineno=671, col_offset=22)), Store(), lineno=671, col_offset=8)], Name('value', Load(), lineno=671, col_offset=32), lineno=671, col_offset=8)], [], lineno=667, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=673, col_offset=20), Name('envvar', Param(), lineno=673, col_offset=26)], None, None, []), [If(Compare(Name('envvar', Load(), lineno=675, col_offset=11), [NotIn()], [Attribute(Name('self', Load(), lineno=675, col_offset=25), '_changed', Load(), lineno=675, col_offset=25)], lineno=675, col_offset=11), [Assign([Subscript(Attribute(Name('self', Load(), lineno=676, col_offset=12), '_changed', Load(), lineno=676, col_offset=12), Index(Name('envvar', Load(), lineno=676, col_offset=26)), Store(), lineno=676, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=676, col_offset=36), '_environ', Load(), lineno=676, col_offset=36), 'get', Load(), lineno=676, col_offset=36), [Name('envvar', Load(), lineno=676, col_offset=54)], [], None, None, lineno=676, col_offset=36), lineno=676, col_offset=12)], [], lineno=675, col_offset=8), If(Compare(Name('envvar', Load(), lineno=677, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=677, col_offset=21), '_environ', Load(), lineno=677, col_offset=21)], lineno=677, col_offset=11), [Delete([Subscript(Attribute(Name('self', Load(), lineno=678, col_offset=16), '_environ', Load(), lineno=678, col_offset=16), Index(Name('envvar', Load(), lineno=678, col_offset=30)), Del(), lineno=678, col_offset=16)], lineno=678, col_offset=12)], [], lineno=677, col_offset=8)], [], lineno=673, col_offset=4), FunctionDef('keys', arguments([Name('self', Param(), lineno=680, col_offset=13)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=681, col_offset=15), '_environ', Load(), lineno=681, col_offset=15), 'keys', Load(), lineno=681, col_offset=15), [], [], None, None, lineno=681, col_offset=15), lineno=681, col_offset=8)], [], lineno=680, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=683, col_offset=12), Name('envvar', Param(), lineno=683, col_offset=18), Name('value', Param(), lineno=683, col_offset=26)], None, None, []), [Assign([Subscript(Name('self', Load(), lineno=684, col_offset=8), Index(Name('envvar', Load(), lineno=684, col_offset=13)), Store(), lineno=684, col_offset=8)], Name('value', Load(), lineno=684, col_offset=23), lineno=684, col_offset=8)], [], lineno=683, col_offset=4), FunctionDef('unset', arguments([Name('self', Param(), lineno=686, col_offset=14), Name('envvar', Param(), lineno=686, col_offset=20)], None, None, []), [Delete([Subscript(Name('self', Load(), lineno=687, col_offset=12), Index(Name('envvar', Load(), lineno=687, col_offset=17)), Del(), lineno=687, col_offset=12)], lineno=687, col_offset=8)], [], lineno=686, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=689, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=690, col_offset=15), lineno=690, col_offset=8)], [], lineno=689, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=692, col_offset=17)], 'ignore_exc', None, []), [For(Tuple([Name('k', Store(), lineno=693, col_offset=13), Name('v', Store(), lineno=693, col_offset=16)], Store(), lineno=693, col_offset=13), Call(Attribute(Attribute(Name('self', Load(), lineno=693, col_offset=22), '_changed', Load(), lineno=693, col_offset=22), 'items', Load(), lineno=693, col_offset=22), [], [], None, None, lineno=693, col_offset=22), [If(Compare(Name('v', Load(), lineno=694, col_offset=15), [Is()], [Name('None', Load(), lineno=694, col_offset=20)], lineno=694, col_offset=15), [If(Compare(Name('k', Load(), lineno=695, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=695, col_offset=24), '_environ', Load(), lineno=695, col_offset=24)], lineno=695, col_offset=19), [Delete([Subscript(Attribute(Name('self', Load(), lineno=696, col_offset=24), '_environ', Load(), lineno=696, col_offset=24), Index(Name('k', Load(), lineno=696, col_offset=38)), Del(), lineno=696, col_offset=24)], lineno=696, col_offset=20)], [], lineno=695, col_offset=16)], [Assign([Subscript(Attribute(Name('self', Load(), lineno=698, col_offset=16), '_environ', Load(), lineno=698, col_offset=16), Index(Name('k', Load(), lineno=698, col_offset=30)), Store(), lineno=698, col_offset=16)], Name('v', Load(), lineno=698, col_offset=35), lineno=698, col_offset=16)], lineno=694, col_offset=12)], [], lineno=693, col_offset=8), Assign([Attribute(Name('os', Load(), lineno=699, col_offset=8), 'environ', Store(), lineno=699, col_offset=8)], Attribute(Name('self', Load(), lineno=699, col_offset=21), '_environ', Load(), lineno=699, col_offset=21), lineno=699, col_offset=8)], [], lineno=692, col_offset=4)], [], lineno=655, col_offset=0), ClassDef('DirsOnSysPath', [Name('object', Load(), lineno=702, col_offset=20)], [Expr(Str('Context manager to temporarily add directories to sys.path.\n\n    This makes a copy of sys.path, appends any directories given\n    as positional arguments, then reverts sys.path to the copied\n    settings when the context ends.\n\n    Note that *all* sys.path modifications in the body of the\n    context manager, including replacement of the object,\n    will be reverted at the end of the block.\n    ', lineno=712, col_offset=-1), lineno=712, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=714, col_offset=17)], 'paths', None, []), [Assign([Attribute(Name('self', Load(), lineno=715, col_offset=8), 'original_value', Store(), lineno=715, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=715, col_offset=30), 'path', Load(), lineno=715, col_offset=30), Slice(None, None, None), Load(), lineno=715, col_offset=30), lineno=715, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=716, col_offset=8), 'original_object', Store(), lineno=716, col_offset=8)], Attribute(Name('sys', Load(), lineno=716, col_offset=31), 'path', Load(), lineno=716, col_offset=31), lineno=716, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=717, col_offset=8), 'path', Load(), lineno=717, col_offset=8), 'extend', Load(), lineno=717, col_offset=8), [Name('paths', Load(), lineno=717, col_offset=24)], [], None, None, lineno=717, col_offset=8), lineno=717, col_offset=8)], [], lineno=714, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=719, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=720, col_offset=15), lineno=720, col_offset=8)], [], lineno=719, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=722, col_offset=17)], 'ignore_exc', None, []), [Assign([Attribute(Name('sys', Load(), lineno=723, col_offset=8), 'path', Store(), lineno=723, col_offset=8)], Attribute(Name('self', Load(), lineno=723, col_offset=19), 'original_object', Load(), lineno=723, col_offset=19), lineno=723, col_offset=8), Assign([Subscript(Attribute(Name('sys', Load(), lineno=724, col_offset=8), 'path', Load(), lineno=724, col_offset=8), Slice(None, None, None), Store(), lineno=724, col_offset=8)], Attribute(Name('self', Load(), lineno=724, col_offset=22), 'original_value', Load(), lineno=724, col_offset=22), lineno=724, col_offset=8)], [], lineno=722, col_offset=4)], [], lineno=702, col_offset=0), ClassDef('TransientResource', [Name('object', Load(), lineno=727, col_offset=24)], [Expr(Str('Raise ResourceDenied if an exception is raised while the context manager\n    is in effect that matches the specified exception and attributes.', lineno=730, col_offset=-1), lineno=730, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=732, col_offset=17), Name('exc', Param(), lineno=732, col_offset=23)], None, 'kwargs', []), [Assign([Attribute(Name('self', Load(), lineno=733, col_offset=8), 'exc', Store(), lineno=733, col_offset=8)], Name('exc', Load(), lineno=733, col_offset=19), lineno=733, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=734, col_offset=8), 'attrs', Store(), lineno=734, col_offset=8)], Name('kwargs', Load(), lineno=734, col_offset=21), lineno=734, col_offset=8)], [], lineno=732, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=736, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=737, col_offset=15), lineno=737, col_offset=8)], [], lineno=736, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=739, col_offset=17), Name('type_', Param(), lineno=739, col_offset=23), Name('value', Param(), lineno=739, col_offset=35), Name('traceback', Param(), lineno=739, col_offset=47)], None, None, [Name('None', Load(), lineno=739, col_offset=29), Name('None', Load(), lineno=739, col_offset=41), Name('None', Load(), lineno=739, col_offset=57)]), [Expr(Str('If type_ is a subclass of self.exc and value has attributes matching\n        self.attrs, raise ResourceDenied.  Otherwise let the exception\n        propagate (if any).', lineno=742, col_offset=-1), lineno=742, col_offset=-1), If(BoolOp(And(), [Compare(Name('type_', Load(), lineno=743, col_offset=11), [IsNot()], [Name('None', Load(), lineno=743, col_offset=24)], lineno=743, col_offset=11), Call(Name('issubclass', Load(), lineno=743, col_offset=33), [Attribute(Name('self', Load(), lineno=743, col_offset=44), 'exc', Load(), lineno=743, col_offset=44), Name('type_', Load(), lineno=743, col_offset=54)], [], None, None, lineno=743, col_offset=33)], lineno=743, col_offset=11), [For(Tuple([Name('attr', Store(), lineno=744, col_offset=16), Name('attr_value', Store(), lineno=744, col_offset=22)], Store(), lineno=744, col_offset=16), Call(Attribute(Attribute(Name('self', Load(), lineno=744, col_offset=36), 'attrs', Load(), lineno=744, col_offset=36), 'iteritems', Load(), lineno=744, col_offset=36), [], [], None, None, lineno=744, col_offset=36), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=745, col_offset=23), [Name('value', Load(), lineno=745, col_offset=31), Name('attr', Load(), lineno=745, col_offset=38)], [], None, None, lineno=745, col_offset=23), lineno=745, col_offset=19), [Break( lineno=746, col_offset=20)], [], lineno=745, col_offset=16), If(Compare(Call(Name('getattr', Load(), lineno=747, col_offset=19), [Name('value', Load(), lineno=747, col_offset=27), Name('attr', Load(), lineno=747, col_offset=34)], [], None, None, lineno=747, col_offset=19), [NotEq()], [Name('attr_value', Load(), lineno=747, col_offset=43)], lineno=747, col_offset=19), [Break( lineno=748, col_offset=20)], [], lineno=747, col_offset=16)], [Raise(Call(Name('ResourceDenied', Load(), lineno=750, col_offset=22), [Str('an optional resource is not available', lineno=750, col_offset=37)], [], None, None, lineno=750, col_offset=22), None, None, lineno=750, col_offset=16)], lineno=744, col_offset=12)], [], lineno=743, col_offset=8)], [], lineno=739, col_offset=4)], [], lineno=727, col_offset=0), FunctionDef('transient_internet', arguments([Name('resource_name', Param(), lineno=754, col_offset=23), Name('timeout', Param(), lineno=754, col_offset=38), Name('errnos', Param(), lineno=754, col_offset=52)], None, None, [Num(30.0, lineno=754, col_offset=46), Tuple([], Load(), lineno=754, col_offset=59)]), [Expr(Str('Return a context manager that raises ResourceDenied when various issues\n    with the Internet connection manifest themselves as exceptions.', lineno=756, col_offset=-1), lineno=756, col_offset=-1), Assign([Name('default_errnos', Store(), lineno=757, col_offset=4)], List([Tuple([Str('ECONNREFUSED', lineno=758, col_offset=9), Num(111, lineno=758, col_offset=25)], Load(), lineno=758, col_offset=9), Tuple([Str('ECONNRESET', lineno=759, col_offset=9), Num(104, lineno=759, col_offset=23)], Load(), lineno=759, col_offset=9), Tuple([Str('ENETUNREACH', lineno=760, col_offset=9), Num(101, lineno=760, col_offset=24)], Load(), lineno=760, col_offset=9), Tuple([Str('ETIMEDOUT', lineno=761, col_offset=9), Num(110, lineno=761, col_offset=22)], Load(), lineno=761, col_offset=9)], Load(), lineno=757, col_offset=21), lineno=757, col_offset=4), Assign([Name('default_gai_errnos', Store(), lineno=763, col_offset=4)], List([Tuple([Str('EAI_NONAME', lineno=764, col_offset=9), Num(-2, lineno=764, col_offset=24)], Load(), lineno=764, col_offset=9), Tuple([Str('EAI_NODATA', lineno=765, col_offset=9), Num(-5, lineno=765, col_offset=24)], Load(), lineno=765, col_offset=9)], Load(), lineno=763, col_offset=25), lineno=763, col_offset=4), Assign([Name('denied', Store(), lineno=768, col_offset=4)], Call(Name('ResourceDenied', Load(), lineno=768, col_offset=13), [BinOp(Str("Resource '%s' is not available", lineno=768, col_offset=28), Mod(), Name('resource_name', Load(), lineno=768, col_offset=63), lineno=768, col_offset=28)], [], None, None, lineno=768, col_offset=13), lineno=768, col_offset=4), Assign([Name('captured_errnos', Store(), lineno=769, col_offset=4)], Name('errnos', Load(), lineno=769, col_offset=22), lineno=769, col_offset=4), Assign([Name('gai_errnos', Store(), lineno=770, col_offset=4)], List([], Load(), lineno=770, col_offset=17), lineno=770, col_offset=4), If(UnaryOp(Not(), Name('captured_errnos', Load(), lineno=771, col_offset=11), lineno=771, col_offset=7), [Assign([Name('captured_errnos', Store(), lineno=772, col_offset=8)], ListComp(Call(Name('getattr', Load(), lineno=772, col_offset=27), [Name('errno', Load(), lineno=772, col_offset=35), Name('name', Load(), lineno=772, col_offset=42), Name('num', Load(), lineno=772, col_offset=48)], [], None, None, lineno=772, col_offset=27), [comprehension(Tuple([Name('name', Store(), lineno=773, col_offset=32), Name('num', Store(), lineno=773, col_offset=38)], Store(), lineno=773, col_offset=32), Name('default_errnos', Load(), lineno=773, col_offset=46), [])], lineno=772, col_offset=27), lineno=772, col_offset=8), Assign([Name('gai_errnos', Store(), lineno=774, col_offset=8)], ListComp(Call(Name('getattr', Load(), lineno=774, col_offset=22), [Name('socket', Load(), lineno=774, col_offset=30), Name('name', Load(), lineno=774, col_offset=38), Name('num', Load(), lineno=774, col_offset=44)], [], None, None, lineno=774, col_offset=22), [comprehension(Tuple([Name('name', Store(), lineno=775, col_offset=27), Name('num', Store(), lineno=775, col_offset=33)], Store(), lineno=775, col_offset=27), Name('default_gai_errnos', Load(), lineno=775, col_offset=41), [])], lineno=774, col_offset=22), lineno=774, col_offset=8)], [], lineno=771, col_offset=4), FunctionDef('filter_error', arguments([Name('err', Param(), lineno=777, col_offset=21)], None, None, []), [Assign([Name('n', Store(), lineno=778, col_offset=8)], Call(Name('getattr', Load(), lineno=778, col_offset=12), [Name('err', Load(), lineno=778, col_offset=20), Str('errno', lineno=778, col_offset=25), Name('None', Load(), lineno=778, col_offset=34)], [], None, None, lineno=778, col_offset=12), lineno=778, col_offset=8), If(BoolOp(Or(), [Call(Name('isinstance', Load(), lineno=779, col_offset=12), [Name('err', Load(), lineno=779, col_offset=23), Attribute(Name('socket', Load(), lineno=779, col_offset=28), 'timeout', Load(), lineno=779, col_offset=28)], [], None, None, lineno=779, col_offset=12), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=780, col_offset=13), [Name('err', Load(), lineno=780, col_offset=24), Attribute(Name('socket', Load(), lineno=780, col_offset=29), 'gaierror', Load(), lineno=780, col_offset=29)], [], None, None, lineno=780, col_offset=13), Compare(Name('n', Load(), lineno=780, col_offset=50), [In()], [Name('gai_errnos', Load(), lineno=780, col_offset=55)], lineno=780, col_offset=50)], lineno=780, col_offset=13), Compare(Name('n', Load(), lineno=781, col_offset=12), [In()], [Name('captured_errnos', Load(), lineno=781, col_offset=17)], lineno=781, col_offset=12)], lineno=779, col_offset=12), [If(UnaryOp(Not(), Name('verbose', Load(), lineno=782, col_offset=19), lineno=782, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=783, col_offset=16), 'stderr', Load(), lineno=783, col_offset=16), 'write', Load(), lineno=783, col_offset=16), [BinOp(Subscript(Attribute(Name('denied', Load(), lineno=783, col_offset=33), 'args', Load(), lineno=783, col_offset=33), Index(Num(0, lineno=783, col_offset=45)), Load(), lineno=783, col_offset=33), Add(), Str('\n', lineno=783, col_offset=50), lineno=783, col_offset=33)], [], None, None, lineno=783, col_offset=16), lineno=783, col_offset=16)], [], lineno=782, col_offset=12), Raise(Name('denied', Load(), lineno=784, col_offset=18), None, None, lineno=784, col_offset=12)], [], lineno=779, col_offset=8)], [], lineno=777, col_offset=4), Assign([Name('old_timeout', Store(), lineno=786, col_offset=4)], Call(Attribute(Name('socket', Load(), lineno=786, col_offset=18), 'getdefaulttimeout', Load(), lineno=786, col_offset=18), [], [], None, None, lineno=786, col_offset=18), lineno=786, col_offset=4), TryFinally([TryExcept([If(Compare(Name('timeout', Load(), lineno=788, col_offset=11), [IsNot()], [Name('None', Load(), lineno=788, col_offset=26)], lineno=788, col_offset=11), [Expr(Call(Attribute(Name('socket', Load(), lineno=789, col_offset=12), 'setdefaulttimeout', Load(), lineno=789, col_offset=12), [Name('timeout', Load(), lineno=789, col_offset=37)], [], None, None, lineno=789, col_offset=12), lineno=789, col_offset=12)], [], lineno=788, col_offset=8), Expr(Yield(None, lineno=790, col_offset=8), lineno=790, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=791, col_offset=11), Name('err', Store(), lineno=791, col_offset=22), [While(Name('True', Load(), lineno=794, col_offset=14), [Assign([Name('a', Store(), lineno=795, col_offset=12)], Attribute(Name('err', Load(), lineno=795, col_offset=16), 'args', Load(), lineno=795, col_offset=16), lineno=795, col_offset=12), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=796, col_offset=15), [Name('a', Load(), lineno=796, col_offset=19)], [], None, None, lineno=796, col_offset=15), [GtE()], [Num(1, lineno=796, col_offset=25)], lineno=796, col_offset=15), Call(Name('isinstance', Load(), lineno=796, col_offset=31), [Subscript(Name('a', Load(), lineno=796, col_offset=42), Index(Num(0, lineno=796, col_offset=44)), Load(), lineno=796, col_offset=42), Name('IOError', Load(), lineno=796, col_offset=48)], [], None, None, lineno=796, col_offset=31)], lineno=796, col_offset=15), [Assign([Name('err', Store(), lineno=797, col_offset=16)], Subscript(Name('a', Load(), lineno=797, col_offset=22), Index(Num(0, lineno=797, col_offset=24)), Load(), lineno=797, col_offset=22), lineno=797, col_offset=16)], [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=801, col_offset=17), [Name('a', Load(), lineno=801, col_offset=21)], [], None, None, lineno=801, col_offset=17), [GtE()], [Num(2, lineno=801, col_offset=27)], lineno=801, col_offset=17), Call(Name('isinstance', Load(), lineno=801, col_offset=33), [Subscript(Name('a', Load(), lineno=801, col_offset=44), Index(Num(1, lineno=801, col_offset=46)), Load(), lineno=801, col_offset=44), Name('IOError', Load(), lineno=801, col_offset=50)], [], None, None, lineno=801, col_offset=33)], lineno=801, col_offset=17), [Assign([Name('err', Store(), lineno=802, col_offset=16)], Subscript(Name('a', Load(), lineno=802, col_offset=22), Index(Num(1, lineno=802, col_offset=24)), Load(), lineno=802, col_offset=22), lineno=802, col_offset=16)], [Break( lineno=804, col_offset=16)], lineno=801, col_offset=17)], lineno=796, col_offset=12)], [], lineno=794, col_offset=8), Expr(Call(Name('filter_error', Load(), lineno=805, col_offset=8), [Name('err', Load(), lineno=805, col_offset=21)], [], None, None, lineno=805, col_offset=8), lineno=805, col_offset=8), Raise(None, None, None, lineno=806, col_offset=8)], lineno=791, col_offset=4)], [], lineno=787, col_offset=4)], [Expr(Call(Attribute(Name('socket', Load(), lineno=810, col_offset=8), 'setdefaulttimeout', Load(), lineno=810, col_offset=8), [Name('old_timeout', Load(), lineno=810, col_offset=33)], [], None, None, lineno=810, col_offset=8), lineno=810, col_offset=8)], lineno=787, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=753, col_offset=1), 'contextmanager', Load(), lineno=753, col_offset=1)], lineno=753, col_offset=0), FunctionDef('captured_output', arguments([Name('stream_name', Param(), lineno=814, col_offset=20)], None, None, []), [Expr(Str('Run the \'with\' statement body using a StringIO object in place of a\n    specific attribute on the sys module.\n    Example use (with \'stream_name=stdout\')::\n\n       with captured_stdout() as s:\n           print "hello"\n       assert s.getvalue() == "hello"\n    ', lineno=822, col_offset=-1), lineno=822, col_offset=-1), Import([alias('StringIO', None)], lineno=823, col_offset=4), Assign([Name('orig_stdout', Store(), lineno=824, col_offset=4)], Call(Name('getattr', Load(), lineno=824, col_offset=18), [Name('sys', Load(), lineno=824, col_offset=26), Name('stream_name', Load(), lineno=824, col_offset=31)], [], None, None, lineno=824, col_offset=18), lineno=824, col_offset=4), Expr(Call(Name('setattr', Load(), lineno=825, col_offset=4), [Name('sys', Load(), lineno=825, col_offset=12), Name('stream_name', Load(), lineno=825, col_offset=17), Call(Attribute(Name('StringIO', Load(), lineno=825, col_offset=30), 'StringIO', Load(), lineno=825, col_offset=30), [], [], None, None, lineno=825, col_offset=30)], [], None, None, lineno=825, col_offset=4), lineno=825, col_offset=4), TryFinally([Expr(Yield(Call(Name('getattr', Load(), lineno=827, col_offset=14), [Name('sys', Load(), lineno=827, col_offset=22), Name('stream_name', Load(), lineno=827, col_offset=27)], [], None, None, lineno=827, col_offset=14), lineno=827, col_offset=8), lineno=827, col_offset=8)], [Expr(Call(Name('setattr', Load(), lineno=829, col_offset=8), [Name('sys', Load(), lineno=829, col_offset=16), Name('stream_name', Load(), lineno=829, col_offset=21), Name('orig_stdout', Load(), lineno=829, col_offset=34)], [], None, None, lineno=829, col_offset=8), lineno=829, col_offset=8)], lineno=826, col_offset=4)], [Attribute(Name('contextlib', Load(), lineno=813, col_offset=1), 'contextmanager', Load(), lineno=813, col_offset=1)], lineno=813, col_offset=0), FunctionDef('captured_stdout', arguments([], None, None, []), [Return(Call(Name('captured_output', Load(), lineno=832, col_offset=11), [Str('stdout', lineno=832, col_offset=27)], [], None, None, lineno=832, col_offset=11), lineno=832, col_offset=4)], [], lineno=831, col_offset=0), FunctionDef('captured_stdin', arguments([], None, None, []), [Return(Call(Name('captured_output', Load(), lineno=835, col_offset=11), [Str('stdin', lineno=835, col_offset=27)], [], None, None, lineno=835, col_offset=11), lineno=835, col_offset=4)], [], lineno=834, col_offset=0), FunctionDef('gc_collect', arguments([], None, None, []), [Expr(Str('Force as many objects as possible to be collected.\n\n    In non-CPython implementations of Python, this is needed because timely\n    deallocation is not guaranteed by the garbage collector.  (Even in CPython\n    this can be the case in case of reference cycles.)  This means that __del__\n    methods may be called later than expected and weakrefs may remain alive for\n    longer than expected.  This function tries its best to force all garbage\n    objects to disappear.\n    ', lineno=846, col_offset=-1), lineno=846, col_offset=-1), Expr(Call(Attribute(Name('gc', Load(), lineno=847, col_offset=4), 'collect', Load(), lineno=847, col_offset=4), [], [], None, None, lineno=847, col_offset=4), lineno=847, col_offset=4), If(Name('is_jython', Load(), lineno=848, col_offset=7), [Expr(Call(Attribute(Name('time', Load(), lineno=849, col_offset=8), 'sleep', Load(), lineno=849, col_offset=8), [Num(0.1, lineno=849, col_offset=19)], [], None, None, lineno=849, col_offset=8), lineno=849, col_offset=8)], [], lineno=848, col_offset=4), Expr(Call(Attribute(Name('gc', Load(), lineno=850, col_offset=4), 'collect', Load(), lineno=850, col_offset=4), [], [], None, None, lineno=850, col_offset=4), lineno=850, col_offset=4), Expr(Call(Attribute(Name('gc', Load(), lineno=851, col_offset=4), 'collect', Load(), lineno=851, col_offset=4), [], [], None, None, lineno=851, col_offset=4), lineno=851, col_offset=4)], [], lineno=837, col_offset=0), FunctionDef('run_with_locale', arguments([Name('catstr', Param(), lineno=858, col_offset=20)], 'locales', None, []), [FunctionDef('decorator', arguments([Name('func', Param(), lineno=859, col_offset=18)], None, None, []), [FunctionDef('inner', arguments([], 'args', 'kwds', []), [TryExcept([Import([alias('locale', None)], lineno=862, col_offset=16), Assign([Name('category', Store(), lineno=863, col_offset=16)], Call(Name('getattr', Load(), lineno=863, col_offset=27), [Name('locale', Load(), lineno=863, col_offset=35), Name('catstr', Load(), lineno=863, col_offset=43)], [], None, None, lineno=863, col_offset=27), lineno=863, col_offset=16), Assign([Name('orig_locale', Store(), lineno=864, col_offset=16)], Call(Attribute(Name('locale', Load(), lineno=864, col_offset=30), 'setlocale', Load(), lineno=864, col_offset=30), [Name('category', Load(), lineno=864, col_offset=47)], [], None, None, lineno=864, col_offset=30), lineno=864, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=865, col_offset=19), None, [Raise(None, None, None, lineno=867, col_offset=16)], lineno=865, col_offset=12), ExceptHandler(None, None, [Assign([Name('locale', Store(), lineno=870, col_offset=16), Name('orig_locale', Store(), lineno=870, col_offset=25)], Name('None', Load(), lineno=870, col_offset=39), lineno=870, col_offset=16)], lineno=868, col_offset=12)], [For(Name('loc', Store(), lineno=872, col_offset=20), Name('locales', Load(), lineno=872, col_offset=27), [TryExcept([Expr(Call(Attribute(Name('locale', Load(), lineno=874, col_offset=24), 'setlocale', Load(), lineno=874, col_offset=24), [Name('category', Load(), lineno=874, col_offset=41), Name('loc', Load(), lineno=874, col_offset=51)], [], None, None, lineno=874, col_offset=24), lineno=874, col_offset=24), Break( lineno=875, col_offset=24)], [ExceptHandler(None, None, [Pass( lineno=877, col_offset=24)], lineno=876, col_offset=20)], [], lineno=873, col_offset=20)], [], lineno=872, col_offset=16)], lineno=861, col_offset=12), TryFinally([Return(Call(Name('func', Load(), lineno=881, col_offset=23), [], [], Name('args', Load(), lineno=881, col_offset=29), Name('kwds', Load(), lineno=881, col_offset=37), lineno=881, col_offset=23), lineno=881, col_offset=16)], [If(BoolOp(And(), [Name('locale', Load(), lineno=883, col_offset=19), Name('orig_locale', Load(), lineno=883, col_offset=30)], lineno=883, col_offset=19), [Expr(Call(Attribute(Name('locale', Load(), lineno=884, col_offset=20), 'setlocale', Load(), lineno=884, col_offset=20), [Name('category', Load(), lineno=884, col_offset=37), Name('orig_locale', Load(), lineno=884, col_offset=47)], [], None, None, lineno=884, col_offset=20), lineno=884, col_offset=20)], [], lineno=883, col_offset=16)], lineno=880, col_offset=12)], [], lineno=860, col_offset=8), Assign([Attribute(Name('inner', Load(), lineno=885, col_offset=8), 'func_name', Store(), lineno=885, col_offset=8)], Attribute(Name('func', Load(), lineno=885, col_offset=26), 'func_name', Load(), lineno=885, col_offset=26), lineno=885, col_offset=8), Assign([Attribute(Name('inner', Load(), lineno=886, col_offset=8), '__doc__', Store(), lineno=886, col_offset=8)], Attribute(Name('func', Load(), lineno=886, col_offset=24), '__doc__', Load(), lineno=886, col_offset=24), lineno=886, col_offset=8), Return(Name('inner', Load(), lineno=887, col_offset=15), lineno=887, col_offset=8)], [], lineno=859, col_offset=4), Return(Name('decorator', Load(), lineno=888, col_offset=11), lineno=888, col_offset=4)], [], lineno=858, col_offset=0), Assign([Name('_1M', Store(), lineno=895, col_offset=0)], BinOp(Num(1024, lineno=895, col_offset=6), Mult(), Num(1024, lineno=895, col_offset=11), lineno=895, col_offset=6), lineno=895, col_offset=0), Assign([Name('_1G', Store(), lineno=896, col_offset=0)], BinOp(Num(1024, lineno=896, col_offset=6), Mult(), Name('_1M', Load(), lineno=896, col_offset=13), lineno=896, col_offset=6), lineno=896, col_offset=0), Assign([Name('_2G', Store(), lineno=897, col_offset=0)], BinOp(Num(2, lineno=897, col_offset=6), Mult(), Name('_1G', Load(), lineno=897, col_offset=10), lineno=897, col_offset=6), lineno=897, col_offset=0), Assign([Name('_4G', Store(), lineno=898, col_offset=0)], BinOp(Num(4, lineno=898, col_offset=6), Mult(), Name('_1G', Load(), lineno=898, col_offset=10), lineno=898, col_offset=6), lineno=898, col_offset=0), Assign([Name('MAX_Py_ssize_t', Store(), lineno=900, col_offset=0)], Attribute(Name('sys', Load(), lineno=900, col_offset=17), 'maxsize', Load(), lineno=900, col_offset=17), lineno=900, col_offset=0), FunctionDef('set_memlimit', arguments([Name('limit', Param(), lineno=902, col_offset=17)], None, None, []), [Global(['max_memuse'], lineno=903, col_offset=4), Global(['real_max_memuse'], lineno=904, col_offset=4), Assign([Name('sizes', Store(), lineno=905, col_offset=4)], Dict([Str('k', lineno=906, col_offset=8), Str('m', lineno=907, col_offset=8), Str('g', lineno=908, col_offset=8), Str('t', lineno=909, col_offset=8)], [Num(1024, lineno=906, col_offset=13), Name('_1M', Load(), lineno=907, col_offset=13), Name('_1G', Load(), lineno=908, col_offset=13), BinOp(Num(1024, lineno=909, col_offset=13), Mult(), Name('_1G', Load(), lineno=909, col_offset=18), lineno=909, col_offset=13)], lineno=905, col_offset=12), lineno=905, col_offset=4), Assign([Name('m', Store(), lineno=911, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=911, col_offset=8), 'match', Load(), lineno=911, col_offset=8), [Str('(\\d+(\\.\\d+)?) (K|M|G|T)b?$', lineno=911, col_offset=17), Name('limit', Load(), lineno=911, col_offset=48), BinOp(Attribute(Name('re', Load(), lineno=912, col_offset=17), 'IGNORECASE', Load(), lineno=912, col_offset=17), BitOr(), Attribute(Name('re', Load(), lineno=912, col_offset=33), 'VERBOSE', Load(), lineno=912, col_offset=33), lineno=912, col_offset=17)], [], None, None, lineno=911, col_offset=8), lineno=911, col_offset=4), If(Compare(Name('m', Load(), lineno=913, col_offset=7), [Is()], [Name('None', Load(), lineno=913, col_offset=12)], lineno=913, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=914, col_offset=14), [BinOp(Str('Invalid memory limit %r', lineno=914, col_offset=25), Mod(), Tuple([Name('limit', Load(), lineno=914, col_offset=54)], Load(), lineno=914, col_offset=54), lineno=914, col_offset=25)], [], None, None, lineno=914, col_offset=14), None, None, lineno=914, col_offset=8)], [], lineno=913, col_offset=4), Assign([Name('memlimit', Store(), lineno=915, col_offset=4)], Call(Name('int', Load(), lineno=915, col_offset=15), [BinOp(Call(Name('float', Load(), lineno=915, col_offset=19), [Call(Attribute(Name('m', Load(), lineno=915, col_offset=25), 'group', Load(), lineno=915, col_offset=25), [Num(1, lineno=915, col_offset=33)], [], None, None, lineno=915, col_offset=25)], [], None, None, lineno=915, col_offset=19), Mult(), Subscript(Name('sizes', Load(), lineno=915, col_offset=39), Index(Call(Attribute(Call(Attribute(Name('m', Load(), lineno=915, col_offset=45), 'group', Load(), lineno=915, col_offset=45), [Num(3, lineno=915, col_offset=53)], [], None, None, lineno=915, col_offset=45), 'lower', Load(), lineno=915, col_offset=45), [], [], None, None, lineno=915, col_offset=45)), Load(), lineno=915, col_offset=39), lineno=915, col_offset=19)], [], None, None, lineno=915, col_offset=15), lineno=915, col_offset=4), Assign([Name('real_max_memuse', Store(), lineno=916, col_offset=4)], Name('memlimit', Load(), lineno=916, col_offset=22), lineno=916, col_offset=4), If(Compare(Name('memlimit', Load(), lineno=917, col_offset=7), [Gt()], [Name('MAX_Py_ssize_t', Load(), lineno=917, col_offset=18)], lineno=917, col_offset=7), [Assign([Name('memlimit', Store(), lineno=918, col_offset=8)], Name('MAX_Py_ssize_t', Load(), lineno=918, col_offset=19), lineno=918, col_offset=8)], [], lineno=917, col_offset=4), If(Compare(Name('memlimit', Load(), lineno=919, col_offset=7), [Lt()], [BinOp(Name('_2G', Load(), lineno=919, col_offset=18), Sub(), Num(1, lineno=919, col_offset=24), lineno=919, col_offset=18)], lineno=919, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=920, col_offset=14), [BinOp(Str('Memory limit %r too low to be useful', lineno=920, col_offset=25), Mod(), Tuple([Name('limit', Load(), lineno=920, col_offset=67)], Load(), lineno=920, col_offset=67), lineno=920, col_offset=25)], [], None, None, lineno=920, col_offset=14), None, None, lineno=920, col_offset=8)], [], lineno=919, col_offset=4), Assign([Name('max_memuse', Store(), lineno=921, col_offset=4)], Name('memlimit', Load(), lineno=921, col_offset=17), lineno=921, col_offset=4)], [], lineno=902, col_offset=0), FunctionDef('bigmemtest', arguments([Name('minsize', Param(), lineno=923, col_offset=15), Name('memuse', Param(), lineno=923, col_offset=24), Name('overhead', Param(), lineno=923, col_offset=32)], None, None, [BinOp(Num(5, lineno=923, col_offset=41), Mult(), Name('_1M', Load(), lineno=923, col_offset=43), lineno=923, col_offset=41)]), [Expr(Str("Decorator for bigmem tests.\n\n    'minsize' is the minimum useful size for the test (in arbitrary,\n    test-interpreted units.) 'memuse' is the number of 'bytes per size' for\n    the test, or a good estimate of it. 'overhead' specifies fixed overhead,\n    independent of the testsize, and defaults to 5Mb.\n\n    The decorator tries to guess a good value for 'size' and passes it to\n    the decorated test function. If minsize * memuse is more than the\n    allowed memory use (as defined by max_memuse), the test is skipped.\n    Otherwise, minsize is adjusted upward to use up to max_memuse.\n    ", lineno=935, col_offset=-1), lineno=935, col_offset=-1), FunctionDef('decorator', arguments([Name('f', Param(), lineno=936, col_offset=18)], None, None, []), [FunctionDef('wrapper', arguments([Name('self', Param(), lineno=937, col_offset=20)], None, None, []), [If(UnaryOp(Not(), Name('max_memuse', Load(), lineno=938, col_offset=19), lineno=938, col_offset=15), [Assign([Name('maxsize', Store(), lineno=943, col_offset=16)], Num(5147, lineno=943, col_offset=26), lineno=943, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=944, col_offset=16), 'assertFalse', Load(), lineno=944, col_offset=16), [Compare(BinOp(BinOp(Name('maxsize', Load(), lineno=944, col_offset=33), Mult(), Name('memuse', Load(), lineno=944, col_offset=43), lineno=944, col_offset=33), Add(), Name('overhead', Load(), lineno=944, col_offset=52), lineno=944, col_offset=33), [Gt()], [BinOp(Num(20, lineno=944, col_offset=63), Mult(), Name('_1M', Load(), lineno=944, col_offset=68), lineno=944, col_offset=63)], lineno=944, col_offset=33)], [], None, None, lineno=944, col_offset=16), lineno=944, col_offset=16)], [Assign([Name('maxsize', Store(), lineno=946, col_offset=16)], Call(Name('int', Load(), lineno=946, col_offset=26), [BinOp(BinOp(Name('max_memuse', Load(), lineno=946, col_offset=31), Sub(), Name('overhead', Load(), lineno=946, col_offset=44), lineno=946, col_offset=31), Div(), Name('memuse', Load(), lineno=946, col_offset=56), lineno=946, col_offset=30)], [], None, None, lineno=946, col_offset=26), lineno=946, col_offset=16), If(Compare(Name('maxsize', Load(), lineno=947, col_offset=19), [Lt()], [Name('minsize', Load(), lineno=947, col_offset=29)], lineno=947, col_offset=19), [If(Name('verbose', Load(), lineno=949, col_offset=23), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=950, col_offset=24), 'stderr', Load(), lineno=950, col_offset=24), 'write', Load(), lineno=950, col_offset=24), [BinOp(Str('Skipping %s because of memory constraint\n', lineno=950, col_offset=41), Mod(), Tuple([Attribute(Name('f', Load(), lineno=951, col_offset=59), '__name__', Load(), lineno=951, col_offset=59)], Load(), lineno=951, col_offset=59), lineno=950, col_offset=41)], [], None, None, lineno=950, col_offset=24), lineno=950, col_offset=24)], [], lineno=949, col_offset=20), Return(None, lineno=952, col_offset=20)], [], lineno=947, col_offset=16), Assign([Name('maxsize', Store(), lineno=954, col_offset=16)], Call(Name('max', Load(), lineno=954, col_offset=26), [BinOp(Name('maxsize', Load(), lineno=954, col_offset=30), Sub(), BinOp(Num(50, lineno=954, col_offset=40), Mult(), Name('_1M', Load(), lineno=954, col_offset=45), lineno=954, col_offset=40), lineno=954, col_offset=30), Name('minsize', Load(), lineno=954, col_offset=50)], [], None, None, lineno=954, col_offset=26), lineno=954, col_offset=16)], lineno=938, col_offset=12), Return(Call(Name('f', Load(), lineno=955, col_offset=19), [Name('self', Load(), lineno=955, col_offset=21), Name('maxsize', Load(), lineno=955, col_offset=27)], [], None, None, lineno=955, col_offset=19), lineno=955, col_offset=12)], [], lineno=937, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=956, col_offset=8), 'minsize', Store(), lineno=956, col_offset=8)], Name('minsize', Load(), lineno=956, col_offset=26), lineno=956, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=957, col_offset=8), 'memuse', Store(), lineno=957, col_offset=8)], Name('memuse', Load(), lineno=957, col_offset=25), lineno=957, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=958, col_offset=8), 'overhead', Store(), lineno=958, col_offset=8)], Name('overhead', Load(), lineno=958, col_offset=27), lineno=958, col_offset=8), Return(Name('wrapper', Load(), lineno=959, col_offset=15), lineno=959, col_offset=8)], [], lineno=936, col_offset=4), Return(Name('decorator', Load(), lineno=960, col_offset=11), lineno=960, col_offset=4)], [], lineno=923, col_offset=0), FunctionDef('precisionbigmemtest', arguments([Name('size', Param(), lineno=962, col_offset=24), Name('memuse', Param(), lineno=962, col_offset=30), Name('overhead', Param(), lineno=962, col_offset=38)], None, None, [BinOp(Num(5, lineno=962, col_offset=47), Mult(), Name('_1M', Load(), lineno=962, col_offset=49), lineno=962, col_offset=47)]), [FunctionDef('decorator', arguments([Name('f', Param(), lineno=963, col_offset=18)], None, None, []), [FunctionDef('wrapper', arguments([Name('self', Param(), lineno=964, col_offset=20)], None, None, []), [If(UnaryOp(Not(), Name('real_max_memuse', Load(), lineno=965, col_offset=19), lineno=965, col_offset=15), [Assign([Name('maxsize', Store(), lineno=966, col_offset=16)], Num(5147, lineno=966, col_offset=26), lineno=966, col_offset=16)], [Assign([Name('maxsize', Store(), lineno=968, col_offset=16)], Name('size', Load(), lineno=968, col_offset=26), lineno=968, col_offset=16), If(BoolOp(And(), [Name('real_max_memuse', Load(), lineno=970, col_offset=19), Compare(Name('real_max_memuse', Load(), lineno=970, col_offset=39), [Lt()], [BinOp(Name('maxsize', Load(), lineno=970, col_offset=57), Mult(), Name('memuse', Load(), lineno=970, col_offset=67), lineno=970, col_offset=57)], lineno=970, col_offset=39)], lineno=970, col_offset=19), [If(Name('verbose', Load(), lineno=971, col_offset=23), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=972, col_offset=24), 'stderr', Load(), lineno=972, col_offset=24), 'write', Load(), lineno=972, col_offset=24), [BinOp(Str('Skipping %s because of memory constraint\n', lineno=972, col_offset=41), Mod(), Tuple([Attribute(Name('f', Load(), lineno=973, col_offset=59), '__name__', Load(), lineno=973, col_offset=59)], Load(), lineno=973, col_offset=59), lineno=972, col_offset=41)], [], None, None, lineno=972, col_offset=24), lineno=972, col_offset=24)], [], lineno=971, col_offset=20), Return(None, lineno=974, col_offset=20)], [], lineno=970, col_offset=16)], lineno=965, col_offset=12), Return(Call(Name('f', Load(), lineno=976, col_offset=19), [Name('self', Load(), lineno=976, col_offset=21), Name('maxsize', Load(), lineno=976, col_offset=27)], [], None, None, lineno=976, col_offset=19), lineno=976, col_offset=12)], [], lineno=964, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=977, col_offset=8), 'size', Store(), lineno=977, col_offset=8)], Name('size', Load(), lineno=977, col_offset=23), lineno=977, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=978, col_offset=8), 'memuse', Store(), lineno=978, col_offset=8)], Name('memuse', Load(), lineno=978, col_offset=25), lineno=978, col_offset=8), Assign([Attribute(Name('wrapper', Load(), lineno=979, col_offset=8), 'overhead', Store(), lineno=979, col_offset=8)], Name('overhead', Load(), lineno=979, col_offset=27), lineno=979, col_offset=8), Return(Name('wrapper', Load(), lineno=980, col_offset=15), lineno=980, col_offset=8)], [], lineno=963, col_offset=4), Return(Name('decorator', Load(), lineno=981, col_offset=11), lineno=981, col_offset=4)], [], lineno=962, col_offset=0), FunctionDef('bigaddrspacetest', arguments([Name('f', Param(), lineno=983, col_offset=21)], None, None, []), [Expr(Str('Decorator for tests that fill the address space.', lineno=984, col_offset=4), lineno=984, col_offset=4), FunctionDef('wrapper', arguments([Name('self', Param(), lineno=985, col_offset=16)], None, None, []), [If(Compare(Name('max_memuse', Load(), lineno=986, col_offset=11), [Lt()], [Name('MAX_Py_ssize_t', Load(), lineno=986, col_offset=24)], lineno=986, col_offset=11), [If(Name('verbose', Load(), lineno=987, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=988, col_offset=16), 'stderr', Load(), lineno=988, col_offset=16), 'write', Load(), lineno=988, col_offset=16), [BinOp(Str('Skipping %s because of memory constraint\n', lineno=988, col_offset=33), Mod(), Tuple([Attribute(Name('f', Load(), lineno=989, col_offset=51), '__name__', Load(), lineno=989, col_offset=51)], Load(), lineno=989, col_offset=51), lineno=988, col_offset=33)], [], None, None, lineno=988, col_offset=16), lineno=988, col_offset=16)], [], lineno=987, col_offset=12)], [Return(Call(Name('f', Load(), lineno=991, col_offset=19), [Name('self', Load(), lineno=991, col_offset=21)], [], None, None, lineno=991, col_offset=19), lineno=991, col_offset=12)], lineno=986, col_offset=8)], [], lineno=985, col_offset=4), Return(Name('wrapper', Load(), lineno=992, col_offset=11), lineno=992, col_offset=4)], [], lineno=983, col_offset=0), ClassDef('BasicTestRunner', [], [FunctionDef('run', arguments([Name('self', Param(), lineno=998, col_offset=12), Name('test', Param(), lineno=998, col_offset=18)], None, None, []), [Assign([Name('result', Store(), lineno=999, col_offset=8)], Call(Attribute(Name('unittest', Load(), lineno=999, col_offset=17), 'TestResult', Load(), lineno=999, col_offset=17), [], [], None, None, lineno=999, col_offset=17), lineno=999, col_offset=8), Expr(Call(Name('test', Load(), lineno=1000, col_offset=8), [Name('result', Load(), lineno=1000, col_offset=13)], [], None, None, lineno=1000, col_offset=8), lineno=1000, col_offset=8), Return(Name('result', Load(), lineno=1001, col_offset=15), lineno=1001, col_offset=8)], [], lineno=998, col_offset=4)], [], lineno=997, col_offset=0), FunctionDef('_id', arguments([Name('obj', Param(), lineno=1003, col_offset=8)], None, None, []), [Return(Name('obj', Load(), lineno=1004, col_offset=11), lineno=1004, col_offset=4)], [], lineno=1003, col_offset=0), FunctionDef('requires_resource', arguments([Name('resource', Param(), lineno=1006, col_offset=22)], None, None, []), [If(Call(Name('is_resource_enabled', Load(), lineno=1007, col_offset=7), [Name('resource', Load(), lineno=1007, col_offset=27)], [], None, None, lineno=1007, col_offset=7), [Return(Name('_id', Load(), lineno=1008, col_offset=15), lineno=1008, col_offset=8)], [Return(Call(Attribute(Name('unittest', Load(), lineno=1010, col_offset=15), 'skip', Load(), lineno=1010, col_offset=15), [Call(Attribute(Str('resource {0!r} is not enabled', lineno=1010, col_offset=29), 'format', Load(), lineno=1010, col_offset=29), [Name('resource', Load(), lineno=1010, col_offset=68)], [], None, None, lineno=1010, col_offset=29)], [], None, None, lineno=1010, col_offset=15), lineno=1010, col_offset=8)], lineno=1007, col_offset=4)], [], lineno=1006, col_offset=0), FunctionDef('cpython_only', arguments([Name('test', Param(), lineno=1012, col_offset=17)], None, None, []), [Expr(Str('\n    Decorator for tests only applicable on CPython.\n    ', lineno=1015, col_offset=-1), lineno=1015, col_offset=-1), Return(Call(Call(Name('impl_detail', Load(), lineno=1016, col_offset=11), [], [keyword('cpython', Name('True', Load(), lineno=1016, col_offset=31))], None, None, lineno=1016, col_offset=11), [Name('test', Load(), lineno=1016, col_offset=37)], [], None, None, lineno=1016, col_offset=11), lineno=1016, col_offset=4)], [], lineno=1012, col_offset=0), FunctionDef('impl_detail', arguments([Name('msg', Param(), lineno=1018, col_offset=16)], None, 'guards', [Name('None', Load(), lineno=1018, col_offset=20)]), [If(Call(Name('check_impl_detail', Load(), lineno=1019, col_offset=7), [], [], None, Name('guards', Load(), lineno=1019, col_offset=27), lineno=1019, col_offset=7), [Return(Name('_id', Load(), lineno=1020, col_offset=15), lineno=1020, col_offset=8)], [], lineno=1019, col_offset=4), If(Compare(Name('msg', Load(), lineno=1021, col_offset=7), [Is()], [Name('None', Load(), lineno=1021, col_offset=14)], lineno=1021, col_offset=7), [Assign([Tuple([Name('guardnames', Store(), lineno=1022, col_offset=8), Name('default', Store(), lineno=1022, col_offset=20)], Store(), lineno=1022, col_offset=8)], Call(Name('_parse_guards', Load(), lineno=1022, col_offset=30), [Name('guards', Load(), lineno=1022, col_offset=44)], [], None, None, lineno=1022, col_offset=30), lineno=1022, col_offset=8), If(Name('default', Load(), lineno=1023, col_offset=11), [Assign([Name('msg', Store(), lineno=1024, col_offset=12)], Str('implementation detail not available on {0}', lineno=1024, col_offset=18), lineno=1024, col_offset=12)], [Assign([Name('msg', Store(), lineno=1026, col_offset=12)], Str('implementation detail specific to {0}', lineno=1026, col_offset=18), lineno=1026, col_offset=12)], lineno=1023, col_offset=8), Assign([Name('guardnames', Store(), lineno=1027, col_offset=8)], Call(Name('sorted', Load(), lineno=1027, col_offset=21), [Call(Attribute(Name('guardnames', Load(), lineno=1027, col_offset=28), 'keys', Load(), lineno=1027, col_offset=28), [], [], None, None, lineno=1027, col_offset=28)], [], None, None, lineno=1027, col_offset=21), lineno=1027, col_offset=8), Assign([Name('msg', Store(), lineno=1028, col_offset=8)], Call(Attribute(Name('msg', Load(), lineno=1028, col_offset=14), 'format', Load(), lineno=1028, col_offset=14), [Call(Attribute(Str(' or ', lineno=1028, col_offset=25), 'join', Load(), lineno=1028, col_offset=25), [Name('guardnames', Load(), lineno=1028, col_offset=37)], [], None, None, lineno=1028, col_offset=25)], [], None, None, lineno=1028, col_offset=14), lineno=1028, col_offset=8)], [], lineno=1021, col_offset=4), Return(Call(Attribute(Name('unittest', Load(), lineno=1029, col_offset=11), 'skip', Load(), lineno=1029, col_offset=11), [Name('msg', Load(), lineno=1029, col_offset=25)], [], None, None, lineno=1029, col_offset=11), lineno=1029, col_offset=4)], [], lineno=1018, col_offset=0), FunctionDef('_parse_guards', arguments([Name('guards', Param(), lineno=1031, col_offset=18)], None, None, []), [If(UnaryOp(Not(), Name('guards', Load(), lineno=1033, col_offset=11), lineno=1033, col_offset=7), [Return(Tuple([Dict([Str('cpython', lineno=1034, col_offset=17)], [Name('True', Load(), lineno=1034, col_offset=28)], lineno=1034, col_offset=16), Name('False', Load(), lineno=1034, col_offset=35)], Load(), lineno=1034, col_offset=16), lineno=1034, col_offset=8)], [], lineno=1033, col_offset=4), Assign([Name('is_true', Store(), lineno=1035, col_offset=4)], Subscript(Call(Attribute(Name('guards', Load(), lineno=1035, col_offset=14), 'values', Load(), lineno=1035, col_offset=14), [], [], None, None, lineno=1035, col_offset=14), Index(Num(0, lineno=1035, col_offset=30)), Load(), lineno=1035, col_offset=14), lineno=1035, col_offset=4), Assert(Compare(Call(Attribute(Name('guards', Load(), lineno=1036, col_offset=11), 'values', Load(), lineno=1036, col_offset=11), [], [], None, None, lineno=1036, col_offset=11), [Eq()], [BinOp(List([Name('is_true', Load(), lineno=1036, col_offset=31)], Load(), lineno=1036, col_offset=30), Mult(), Call(Name('len', Load(), lineno=1036, col_offset=42), [Name('guards', Load(), lineno=1036, col_offset=46)], [], None, None, lineno=1036, col_offset=42), lineno=1036, col_offset=30)], lineno=1036, col_offset=11), None, lineno=1036, col_offset=4), Return(Tuple([Name('guards', Load(), lineno=1037, col_offset=12), UnaryOp(Not(), Name('is_true', Load(), lineno=1037, col_offset=24), lineno=1037, col_offset=20)], Load(), lineno=1037, col_offset=12), lineno=1037, col_offset=4)], [], lineno=1031, col_offset=0), FunctionDef('check_impl_detail', arguments([], None, 'guards', []), [Expr(Str('This function returns True or False depending on the host platform.\n       Examples:\n          if check_impl_detail():               # only on CPython (default)\n          if check_impl_detail(jython=True):    # only on Jython\n          if check_impl_detail(cpython=False):  # everywhere except on CPython\n    ', lineno=1047, col_offset=-1), lineno=1047, col_offset=-1), Assign([Tuple([Name('guards', Store(), lineno=1048, col_offset=4), Name('default', Store(), lineno=1048, col_offset=12)], Store(), lineno=1048, col_offset=4)], Call(Name('_parse_guards', Load(), lineno=1048, col_offset=22), [Name('guards', Load(), lineno=1048, col_offset=36)], [], None, None, lineno=1048, col_offset=22), lineno=1048, col_offset=4), Return(Call(Attribute(Name('guards', Load(), lineno=1049, col_offset=11), 'get', Load(), lineno=1049, col_offset=11), [Call(Attribute(Call(Attribute(Name('platform', Load(), lineno=1049, col_offset=22), 'python_implementation', Load(), lineno=1049, col_offset=22), [], [], None, None, lineno=1049, col_offset=22), 'lower', Load(), lineno=1049, col_offset=22), [], [], None, None, lineno=1049, col_offset=22), Name('default', Load(), lineno=1049, col_offset=64)], [], None, None, lineno=1049, col_offset=11), lineno=1049, col_offset=4)], [], lineno=1041, col_offset=0), FunctionDef('_run_suite', arguments([Name('suite', Param(), lineno=1053, col_offset=15)], None, None, []), [Expr(Str('Run tests from a unittest.TestSuite-derived class.', lineno=1054, col_offset=4), lineno=1054, col_offset=4), If(Name('verbose', Load(), lineno=1055, col_offset=7), [Assign([Name('runner', Store(), lineno=1056, col_offset=8)], Call(Attribute(Name('unittest', Load(), lineno=1056, col_offset=17), 'TextTestRunner', Load(), lineno=1056, col_offset=17), [Attribute(Name('sys', Load(), lineno=1056, col_offset=41), 'stdout', Load(), lineno=1056, col_offset=41)], [keyword('verbosity', Num(2, lineno=1056, col_offset=63))], None, None, lineno=1056, col_offset=17), lineno=1056, col_offset=8)], [Assign([Name('runner', Store(), lineno=1058, col_offset=8)], Call(Name('BasicTestRunner', Load(), lineno=1058, col_offset=17), [], [], None, None, lineno=1058, col_offset=17), lineno=1058, col_offset=8)], lineno=1055, col_offset=4), Assign([Name('result', Store(), lineno=1060, col_offset=4)], Call(Attribute(Name('runner', Load(), lineno=1060, col_offset=13), 'run', Load(), lineno=1060, col_offset=13), [Name('suite', Load(), lineno=1060, col_offset=24)], [], None, None, lineno=1060, col_offset=13), lineno=1060, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('result', Load(), lineno=1061, col_offset=11), 'wasSuccessful', Load(), lineno=1061, col_offset=11), [], [], None, None, lineno=1061, col_offset=11), lineno=1061, col_offset=7), [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=1062, col_offset=11), [Attribute(Name('result', Load(), lineno=1062, col_offset=15), 'errors', Load(), lineno=1062, col_offset=15)], [], None, None, lineno=1062, col_offset=11), [Eq()], [Num(1, lineno=1062, col_offset=33)], lineno=1062, col_offset=11), UnaryOp(Not(), Attribute(Name('result', Load(), lineno=1062, col_offset=43), 'failures', Load(), lineno=1062, col_offset=43), lineno=1062, col_offset=39)], lineno=1062, col_offset=11), [Assign([Name('err', Store(), lineno=1063, col_offset=12)], Subscript(Subscript(Attribute(Name('result', Load(), lineno=1063, col_offset=18), 'errors', Load(), lineno=1063, col_offset=18), Index(Num(0, lineno=1063, col_offset=32)), Load(), lineno=1063, col_offset=18), Index(Num(1, lineno=1063, col_offset=35)), Load(), lineno=1063, col_offset=18), lineno=1063, col_offset=12)], [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=1064, col_offset=13), [Attribute(Name('result', Load(), lineno=1064, col_offset=17), 'failures', Load(), lineno=1064, col_offset=17)], [], None, None, lineno=1064, col_offset=13), [Eq()], [Num(1, lineno=1064, col_offset=37)], lineno=1064, col_offset=13), UnaryOp(Not(), Attribute(Name('result', Load(), lineno=1064, col_offset=47), 'errors', Load(), lineno=1064, col_offset=47), lineno=1064, col_offset=43)], lineno=1064, col_offset=13), [Assign([Name('err', Store(), lineno=1065, col_offset=12)], Subscript(Subscript(Attribute(Name('result', Load(), lineno=1065, col_offset=18), 'failures', Load(), lineno=1065, col_offset=18), Index(Num(0, lineno=1065, col_offset=34)), Load(), lineno=1065, col_offset=18), Index(Num(1, lineno=1065, col_offset=37)), Load(), lineno=1065, col_offset=18), lineno=1065, col_offset=12)], [Assign([Name('err', Store(), lineno=1067, col_offset=12)], Str('multiple errors occurred', lineno=1067, col_offset=18), lineno=1067, col_offset=12), If(UnaryOp(Not(), Name('verbose', Load(), lineno=1068, col_offset=19), lineno=1068, col_offset=15), [AugAssign(Name('err', Store(), lineno=1069, col_offset=16), Add(), Str('; run in verbose mode for details', lineno=1069, col_offset=23), lineno=1069, col_offset=16)], [], lineno=1068, col_offset=12)], lineno=1064, col_offset=13)], lineno=1062, col_offset=8), Raise(Call(Name('TestFailed', Load(), lineno=1070, col_offset=14), [Name('err', Load(), lineno=1070, col_offset=25)], [], None, None, lineno=1070, col_offset=14), None, None, lineno=1070, col_offset=8)], [], lineno=1061, col_offset=4)], [], lineno=1053, col_offset=0), FunctionDef('run_unittest', arguments([], 'classes', None, []), [Expr(Str('Run tests from unittest.TestCase-derived classes.', lineno=1074, col_offset=4), lineno=1074, col_offset=4), Assign([Name('valid_types', Store(), lineno=1075, col_offset=4)], Tuple([Attribute(Name('unittest', Load(), lineno=1075, col_offset=19), 'TestSuite', Load(), lineno=1075, col_offset=19), Attribute(Name('unittest', Load(), lineno=1075, col_offset=39), 'TestCase', Load(), lineno=1075, col_offset=39)], Load(), lineno=1075, col_offset=19), lineno=1075, col_offset=4), Assign([Name('suite', Store(), lineno=1076, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=1076, col_offset=12), 'TestSuite', Load(), lineno=1076, col_offset=12), [], [], None, None, lineno=1076, col_offset=12), lineno=1076, col_offset=4), For(Name('cls', Store(), lineno=1077, col_offset=8), Name('classes', Load(), lineno=1077, col_offset=15), [If(Call(Name('isinstance', Load(), lineno=1078, col_offset=11), [Name('cls', Load(), lineno=1078, col_offset=22), Name('str', Load(), lineno=1078, col_offset=27)], [], None, None, lineno=1078, col_offset=11), [If(Compare(Name('cls', Load(), lineno=1079, col_offset=15), [In()], [Attribute(Name('sys', Load(), lineno=1079, col_offset=22), 'modules', Load(), lineno=1079, col_offset=22)], lineno=1079, col_offset=15), [Expr(Call(Attribute(Name('suite', Load(), lineno=1080, col_offset=16), 'addTest', Load(), lineno=1080, col_offset=16), [Call(Attribute(Name('unittest', Load(), lineno=1080, col_offset=30), 'findTestCases', Load(), lineno=1080, col_offset=30), [Subscript(Attribute(Name('sys', Load(), lineno=1080, col_offset=53), 'modules', Load(), lineno=1080, col_offset=53), Index(Name('cls', Load(), lineno=1080, col_offset=65)), Load(), lineno=1080, col_offset=53)], [], None, None, lineno=1080, col_offset=30)], [], None, None, lineno=1080, col_offset=16), lineno=1080, col_offset=16)], [Raise(Call(Name('ValueError', Load(), lineno=1082, col_offset=22), [Str('str arguments must be keys in sys.modules', lineno=1082, col_offset=33)], [], None, None, lineno=1082, col_offset=22), None, None, lineno=1082, col_offset=16)], lineno=1079, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=1083, col_offset=13), [Name('cls', Load(), lineno=1083, col_offset=24), Name('valid_types', Load(), lineno=1083, col_offset=29)], [], None, None, lineno=1083, col_offset=13), [Expr(Call(Attribute(Name('suite', Load(), lineno=1084, col_offset=12), 'addTest', Load(), lineno=1084, col_offset=12), [Name('cls', Load(), lineno=1084, col_offset=26)], [], None, None, lineno=1084, col_offset=12), lineno=1084, col_offset=12)], [Expr(Call(Attribute(Name('suite', Load(), lineno=1086, col_offset=12), 'addTest', Load(), lineno=1086, col_offset=12), [Call(Attribute(Name('unittest', Load(), lineno=1086, col_offset=26), 'makeSuite', Load(), lineno=1086, col_offset=26), [Name('cls', Load(), lineno=1086, col_offset=45)], [], None, None, lineno=1086, col_offset=26)], [], None, None, lineno=1086, col_offset=12), lineno=1086, col_offset=12)], lineno=1083, col_offset=13)], lineno=1078, col_offset=8)], [], lineno=1077, col_offset=4), Expr(Call(Name('_run_suite', Load(), lineno=1087, col_offset=4), [Name('suite', Load(), lineno=1087, col_offset=15)], [], None, None, lineno=1087, col_offset=4), lineno=1087, col_offset=4)], [], lineno=1073, col_offset=0), FunctionDef('run_doctest', arguments([Name('module', Param(), lineno=1093, col_offset=16), Name('verbosity', Param(), lineno=1093, col_offset=24)], None, None, [Name('None', Load(), lineno=1093, col_offset=34)]), [Expr(Str("Run doctest on the given module.  Return (#failures, #tests).\n\n    If optional argument verbosity is not specified (or is None), pass\n    test_support's belief about verbosity on to doctest.  Else doctest's\n    usual behavior is used (it searches sys.argv for -v).\n    ", lineno=1099, col_offset=-1), lineno=1099, col_offset=-1), Import([alias('doctest', None)], lineno=1101, col_offset=4), If(Compare(Name('verbosity', Load(), lineno=1103, col_offset=7), [Is()], [Name('None', Load(), lineno=1103, col_offset=20)], lineno=1103, col_offset=7), [Assign([Name('verbosity', Store(), lineno=1104, col_offset=8)], Name('verbose', Load(), lineno=1104, col_offset=20), lineno=1104, col_offset=8)], [Assign([Name('verbosity', Store(), lineno=1106, col_offset=8)], Name('None', Load(), lineno=1106, col_offset=20), lineno=1106, col_offset=8)], lineno=1103, col_offset=4), Assign([Name('save_stdout', Store(), lineno=1110, col_offset=4)], Attribute(Name('sys', Load(), lineno=1110, col_offset=18), 'stdout', Load(), lineno=1110, col_offset=18), lineno=1110, col_offset=4), Assign([Attribute(Name('sys', Load(), lineno=1111, col_offset=4), 'stdout', Store(), lineno=1111, col_offset=4)], Call(Name('get_original_stdout', Load(), lineno=1111, col_offset=17), [], [], None, None, lineno=1111, col_offset=17), lineno=1111, col_offset=4), TryFinally([Assign([Tuple([Name('f', Store(), lineno=1113, col_offset=8), Name('t', Store(), lineno=1113, col_offset=11)], Store(), lineno=1113, col_offset=8)], Call(Attribute(Name('doctest', Load(), lineno=1113, col_offset=15), 'testmod', Load(), lineno=1113, col_offset=15), [Name('module', Load(), lineno=1113, col_offset=31)], [keyword('verbose', Name('verbosity', Load(), lineno=1113, col_offset=47))], None, None, lineno=1113, col_offset=15), lineno=1113, col_offset=8), If(Name('f', Load(), lineno=1114, col_offset=11), [Raise(Call(Name('TestFailed', Load(), lineno=1115, col_offset=18), [BinOp(Str('%d of %d doctests failed', lineno=1115, col_offset=29), Mod(), Tuple([Name('f', Load(), lineno=1115, col_offset=59), Name('t', Load(), lineno=1115, col_offset=62)], Load(), lineno=1115, col_offset=59), lineno=1115, col_offset=29)], [], None, None, lineno=1115, col_offset=18), None, None, lineno=1115, col_offset=12)], [], lineno=1114, col_offset=8)], [Assign([Attribute(Name('sys', Load(), lineno=1117, col_offset=8), 'stdout', Store(), lineno=1117, col_offset=8)], Name('save_stdout', Load(), lineno=1117, col_offset=21), lineno=1117, col_offset=8)], lineno=1112, col_offset=4), If(Name('verbose', Load(), lineno=1118, col_offset=7), [Print(None, [BinOp(Str('doctest (%s) ... %d tests with zero failures', lineno=1119, col_offset=14), Mod(), Tuple([Attribute(Name('module', Load(), lineno=1119, col_offset=64), '__name__', Load(), lineno=1119, col_offset=64), Name('t', Load(), lineno=1119, col_offset=81)], Load(), lineno=1119, col_offset=64), lineno=1119, col_offset=14)], True, lineno=1119, col_offset=8)], [], lineno=1118, col_offset=4), Return(Tuple([Name('f', Load(), lineno=1120, col_offset=11), Name('t', Load(), lineno=1120, col_offset=14)], Load(), lineno=1120, col_offset=11), lineno=1120, col_offset=4)], [], lineno=1093, col_offset=0), FunctionDef('threading_setup', arguments([], None, None, []), [If(Name('thread', Load(), lineno=1134, col_offset=7), [Return(Tuple([Call(Attribute(Name('thread', Load(), lineno=1135, col_offset=15), '_count', Load(), lineno=1135, col_offset=15), [], [], None, None, lineno=1135, col_offset=15)], Load(), lineno=1135, col_offset=15), lineno=1135, col_offset=8)], [Return(Tuple([Num(1, lineno=1137, col_offset=15)], Load(), lineno=1137, col_offset=15), lineno=1137, col_offset=8)], lineno=1134, col_offset=4)], [], lineno=1133, col_offset=0), FunctionDef('threading_cleanup', arguments([Name('nb_threads', Param(), lineno=1139, col_offset=22)], None, None, []), [If(UnaryOp(Not(), Name('thread', Load(), lineno=1140, col_offset=11), lineno=1140, col_offset=7), [Return(None, lineno=1141, col_offset=8)], [], lineno=1140, col_offset=4), Assign([Name('_MAX_COUNT', Store(), lineno=1143, col_offset=4)], Num(10, lineno=1143, col_offset=17), lineno=1143, col_offset=4), For(Name('count', Store(), lineno=1144, col_offset=8), Call(Name('range', Load(), lineno=1144, col_offset=17), [Name('_MAX_COUNT', Load(), lineno=1144, col_offset=23)], [], None, None, lineno=1144, col_offset=17), [Assign([Name('n', Store(), lineno=1145, col_offset=8)], Call(Attribute(Name('thread', Load(), lineno=1145, col_offset=12), '_count', Load(), lineno=1145, col_offset=12), [], [], None, None, lineno=1145, col_offset=12), lineno=1145, col_offset=8), If(Compare(Name('n', Load(), lineno=1146, col_offset=11), [Eq()], [Name('nb_threads', Load(), lineno=1146, col_offset=16)], lineno=1146, col_offset=11), [Break( lineno=1147, col_offset=12)], [], lineno=1146, col_offset=8), Expr(Call(Attribute(Name('time', Load(), lineno=1148, col_offset=8), 'sleep', Load(), lineno=1148, col_offset=8), [Num(0.1, lineno=1148, col_offset=19)], [], None, None, lineno=1148, col_offset=8), lineno=1148, col_offset=8)], [], lineno=1144, col_offset=4)], [], lineno=1139, col_offset=0), FunctionDef('reap_threads', arguments([Name('func', Param(), lineno=1151, col_offset=17)], None, None, []), [Expr(Str('Use this function when threads are being used.  This will\n    ensure that the threads are cleaned up even when the test fails.\n    If threading is unavailable this function does nothing.\n    ', lineno=1155, col_offset=-1), lineno=1155, col_offset=-1), If(UnaryOp(Not(), Name('thread', Load(), lineno=1156, col_offset=11), lineno=1156, col_offset=7), [Return(Name('func', Load(), lineno=1157, col_offset=15), lineno=1157, col_offset=8)], [], lineno=1156, col_offset=4), FunctionDef('decorator', arguments([], 'args', None, []), [Assign([Name('key', Store(), lineno=1161, col_offset=8)], Call(Name('threading_setup', Load(), lineno=1161, col_offset=14), [], [], None, None, lineno=1161, col_offset=14), lineno=1161, col_offset=8), TryFinally([Return(Call(Name('func', Load(), lineno=1163, col_offset=19), [], [], Name('args', Load(), lineno=1163, col_offset=25), None, lineno=1163, col_offset=19), lineno=1163, col_offset=12)], [Expr(Call(Name('threading_cleanup', Load(), lineno=1165, col_offset=12), [], [], Name('key', Load(), lineno=1165, col_offset=31), None, lineno=1165, col_offset=12), lineno=1165, col_offset=12)], lineno=1162, col_offset=8)], [Call(Attribute(Name('functools', Load(), lineno=1159, col_offset=5), 'wraps', Load(), lineno=1159, col_offset=5), [Name('func', Load(), lineno=1159, col_offset=21)], [], None, None, lineno=1159, col_offset=5)], lineno=1159, col_offset=4), Return(Name('decorator', Load(), lineno=1166, col_offset=11), lineno=1166, col_offset=4)], [], lineno=1151, col_offset=0), FunctionDef('reap_children', arguments([], None, None, []), [Expr(Str('Use this function at the end of test_main() whenever sub-processes\n    are started.  This will help ensure that no extra children (zombies)\n    stick around to hog resources and create problems when looking\n    for refleaks.\n    ', lineno=1173, col_offset=-1), lineno=1173, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=1177, col_offset=7), [Name('os', Load(), lineno=1177, col_offset=15), Str('waitpid', lineno=1177, col_offset=19)], [], None, None, lineno=1177, col_offset=7), [Assign([Name('any_process', Store(), lineno=1178, col_offset=8)], Num(-1, lineno=1178, col_offset=23), lineno=1178, col_offset=8), While(Name('True', Load(), lineno=1179, col_offset=14), [TryExcept([Assign([Tuple([Name('pid', Store(), lineno=1182, col_offset=16), Name('status', Store(), lineno=1182, col_offset=21)], Store(), lineno=1182, col_offset=16)], Call(Attribute(Name('os', Load(), lineno=1182, col_offset=30), 'waitpid', Load(), lineno=1182, col_offset=30), [Name('any_process', Load(), lineno=1182, col_offset=41), Attribute(Name('os', Load(), lineno=1182, col_offset=54), 'WNOHANG', Load(), lineno=1182, col_offset=54)], [], None, None, lineno=1182, col_offset=30), lineno=1182, col_offset=16), If(Compare(Name('pid', Load(), lineno=1183, col_offset=19), [Eq()], [Num(0, lineno=1183, col_offset=26)], lineno=1183, col_offset=19), [Break( lineno=1184, col_offset=20)], [], lineno=1183, col_offset=16)], [ExceptHandler(None, None, [Break( lineno=1186, col_offset=16)], lineno=1185, col_offset=12)], [], lineno=1180, col_offset=12)], [], lineno=1179, col_offset=8)], [], lineno=1177, col_offset=4)], [], lineno=1168, col_offset=0), FunctionDef('py3k_bytes', arguments([Name('b', Param(), lineno=1188, col_offset=15)], None, None, []), [Expr(Str('Emulate the py3k bytes() constructor.\n\n    NOTE: This is only a best effort function.\n    ', lineno=1192, col_offset=-1), lineno=1192, col_offset=-1), TryExcept([Return(Call(Attribute(Name('b', Load(), lineno=1195, col_offset=15), 'tobytes', Load(), lineno=1195, col_offset=15), [], [], None, None, lineno=1195, col_offset=15), lineno=1195, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=1196, col_offset=11), None, [TryExcept([Return(Call(Attribute(Str('', lineno=1199, col_offset=19), 'join', Load(), lineno=1199, col_offset=19), [GeneratorExp(Call(Name('chr', Load(), lineno=1199, col_offset=28), [Name('x', Load(), lineno=1199, col_offset=32)], [], None, None, lineno=1199, col_offset=28), [comprehension(Name('x', Store(), lineno=1199, col_offset=39), Name('b', Load(), lineno=1199, col_offset=44), [])], lineno=1199, col_offset=28)], [], None, None, lineno=1199, col_offset=19), lineno=1199, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=1200, col_offset=15), None, [Return(Call(Name('bytes', Load(), lineno=1201, col_offset=19), [Name('b', Load(), lineno=1201, col_offset=25)], [], None, None, lineno=1201, col_offset=19), lineno=1201, col_offset=12)], lineno=1200, col_offset=8)], [], lineno=1197, col_offset=8)], lineno=1196, col_offset=4)], [], lineno=1193, col_offset=4)], [], lineno=1188, col_offset=0), FunctionDef('args_from_interpreter_flags', arguments([], None, None, []), [Expr(Str('Return a list of command-line arguments reproducing the current\n    settings in sys.flags.', lineno=1205, col_offset=-1), lineno=1205, col_offset=-1), Assign([Name('flag_opt_map', Store(), lineno=1206, col_offset=4)], Dict([Str('bytes_warning', lineno=1207, col_offset=8), Str('dont_write_bytecode', lineno=1208, col_offset=8), Str('ignore_environment', lineno=1209, col_offset=8), Str('no_user_site', lineno=1210, col_offset=8), Str('no_site', lineno=1211, col_offset=8), Str('optimize', lineno=1212, col_offset=8), Str('py3k_warning', lineno=1213, col_offset=8), Str('verbose', lineno=1214, col_offset=8)], [Str('b', lineno=1207, col_offset=25), Str('B', lineno=1208, col_offset=31), Str('E', lineno=1209, col_offset=30), Str('s', lineno=1210, col_offset=24), Str('S', lineno=1211, col_offset=19), Str('O', lineno=1212, col_offset=20), Str('3', lineno=1213, col_offset=24), Str('v', lineno=1214, col_offset=19)], lineno=1206, col_offset=19), lineno=1206, col_offset=4), Assign([Name('args', Store(), lineno=1216, col_offset=4)], List([], Load(), lineno=1216, col_offset=11), lineno=1216, col_offset=4), For(Tuple([Name('flag', Store(), lineno=1217, col_offset=8), Name('opt', Store(), lineno=1217, col_offset=14)], Store(), lineno=1217, col_offset=8), Call(Attribute(Name('flag_opt_map', Load(), lineno=1217, col_offset=21), 'items', Load(), lineno=1217, col_offset=21), [], [], None, None, lineno=1217, col_offset=21), [Assign([Name('v', Store(), lineno=1218, col_offset=8)], Call(Name('getattr', Load(), lineno=1218, col_offset=12), [Attribute(Name('sys', Load(), lineno=1218, col_offset=20), 'flags', Load(), lineno=1218, col_offset=20), Name('flag', Load(), lineno=1218, col_offset=31)], [], None, None, lineno=1218, col_offset=12), lineno=1218, col_offset=8), If(Compare(Name('v', Load(), lineno=1219, col_offset=11), [Gt()], [Num(0, lineno=1219, col_offset=15)], lineno=1219, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=1220, col_offset=12), 'append', Load(), lineno=1220, col_offset=12), [BinOp(Str('-', lineno=1220, col_offset=24), Add(), BinOp(Name('opt', Load(), lineno=1220, col_offset=30), Mult(), Name('v', Load(), lineno=1220, col_offset=36), lineno=1220, col_offset=30), lineno=1220, col_offset=24)], [], None, None, lineno=1220, col_offset=12), lineno=1220, col_offset=12)], [], lineno=1219, col_offset=8)], [], lineno=1217, col_offset=4), Return(Name('args', Load(), lineno=1221, col_offset=11), lineno=1221, col_offset=4)], [], lineno=1203, col_offset=0)])
