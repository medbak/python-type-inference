Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ImportFrom('ctypes', [alias('*', None)], 0, lineno=2, col_offset=0), Import([alias('re', None), alias('sys', None)], lineno=3, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=5, col_offset=3), 'byteorder', Load(), lineno=5, col_offset=3), [Eq()], [Str('little', lineno=5, col_offset=20)], lineno=5, col_offset=3), [Assign([Name('THIS_ENDIAN', Store(), lineno=6, col_offset=4)], Str('<', lineno=6, col_offset=18), lineno=6, col_offset=4), Assign([Name('OTHER_ENDIAN', Store(), lineno=7, col_offset=4)], Str('>', lineno=7, col_offset=19), lineno=7, col_offset=4)], [Assign([Name('THIS_ENDIAN', Store(), lineno=9, col_offset=4)], Str('>', lineno=9, col_offset=18), lineno=9, col_offset=4), Assign([Name('OTHER_ENDIAN', Store(), lineno=10, col_offset=4)], Str('<', lineno=10, col_offset=19), lineno=10, col_offset=4)], lineno=5, col_offset=0), FunctionDef('normalize', arguments([Name('format', Param(), lineno=12, col_offset=14)], None, None, []), [If(Compare(Name('format', Load(), lineno=15, col_offset=7), [Is()], [Name('None', Load(), lineno=15, col_offset=17)], lineno=15, col_offset=7), [Return(Str('', lineno=16, col_offset=15), lineno=16, col_offset=8)], [], lineno=15, col_offset=4), Assign([Name('format', Store(), lineno=17, col_offset=4)], Call(Attribute(Name('format', Load(), lineno=17, col_offset=13), 'replace', Load(), lineno=17, col_offset=13), [Name('OTHER_ENDIAN', Load(), lineno=17, col_offset=28), Name('THIS_ENDIAN', Load(), lineno=17, col_offset=42)], [], None, None, lineno=17, col_offset=13), lineno=17, col_offset=4), Return(Call(Attribute(Name('re', Load(), lineno=18, col_offset=11), 'sub', Load(), lineno=18, col_offset=11), [Str('\\s', lineno=18, col_offset=18), Str('', lineno=18, col_offset=25), Name('format', Load(), lineno=18, col_offset=29)], [], None, None, lineno=18, col_offset=11), lineno=18, col_offset=4)], [], lineno=12, col_offset=0), ClassDef('Test', [Attribute(Name('unittest', Load(), lineno=20, col_offset=11), 'TestCase', Load(), lineno=20, col_offset=11)], [FunctionDef('test_native_types', arguments([Name('self', Param(), lineno=22, col_offset=26)], None, None, []), [For(Tuple([Name('tp', Store(), lineno=23, col_offset=12), Name('fmt', Store(), lineno=23, col_offset=16), Name('shape', Store(), lineno=23, col_offset=21), Name('itemtp', Store(), lineno=23, col_offset=28)], Store(), lineno=23, col_offset=12), Name('native_types', Load(), lineno=23, col_offset=38), [Assign([Name('ob', Store(), lineno=24, col_offset=12)], Call(Name('tp', Load(), lineno=24, col_offset=17), [], [], None, None, lineno=24, col_offset=17), lineno=24, col_offset=12), Assign([Name('v', Store(), lineno=25, col_offset=12)], Call(Name('memoryview', Load(), lineno=25, col_offset=16), [Name('ob', Load(), lineno=25, col_offset=27)], [], None, None, lineno=25, col_offset=16), lineno=25, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=27, col_offset=16), 'assertEqual', Load(), lineno=27, col_offset=16), [Call(Name('normalize', Load(), lineno=27, col_offset=33), [Attribute(Name('v', Load(), lineno=27, col_offset=43), 'format', Load(), lineno=27, col_offset=43)], [], None, None, lineno=27, col_offset=33), Call(Name('normalize', Load(), lineno=27, col_offset=54), [Name('fmt', Load(), lineno=27, col_offset=64)], [], None, None, lineno=27, col_offset=54)], [], None, None, lineno=27, col_offset=16), lineno=27, col_offset=16), If(Compare(Name('shape', Load(), lineno=28, col_offset=19), [IsNot()], [Name('None', Load(), lineno=28, col_offset=32)], lineno=28, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=29, col_offset=20), 'assertEqual', Load(), lineno=29, col_offset=20), [Call(Name('len', Load(), lineno=29, col_offset=37), [Name('v', Load(), lineno=29, col_offset=41)], [], None, None, lineno=29, col_offset=37), Subscript(Name('shape', Load(), lineno=29, col_offset=45), Index(Num(0, lineno=29, col_offset=51)), Load(), lineno=29, col_offset=45)], [], None, None, lineno=29, col_offset=20), lineno=29, col_offset=20)], [Expr(Call(Attribute(Name('self', Load(), lineno=31, col_offset=20), 'assertEqual', Load(), lineno=31, col_offset=20), [BinOp(Call(Name('len', Load(), lineno=31, col_offset=37), [Name('v', Load(), lineno=31, col_offset=41)], [], None, None, lineno=31, col_offset=37), Mult(), Call(Name('sizeof', Load(), lineno=31, col_offset=46), [Name('itemtp', Load(), lineno=31, col_offset=53)], [], None, None, lineno=31, col_offset=46), lineno=31, col_offset=37), Call(Name('sizeof', Load(), lineno=31, col_offset=62), [Name('ob', Load(), lineno=31, col_offset=69)], [], None, None, lineno=31, col_offset=62)], [], None, None, lineno=31, col_offset=20), lineno=31, col_offset=20)], lineno=28, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=32, col_offset=16), 'assertEqual', Load(), lineno=32, col_offset=16), [Attribute(Name('v', Load(), lineno=32, col_offset=33), 'itemsize', Load(), lineno=32, col_offset=33), Call(Name('sizeof', Load(), lineno=32, col_offset=45), [Name('itemtp', Load(), lineno=32, col_offset=52)], [], None, None, lineno=32, col_offset=45)], [], None, None, lineno=32, col_offset=16), lineno=32, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=16), 'assertEqual', Load(), lineno=33, col_offset=16), [Attribute(Name('v', Load(), lineno=33, col_offset=33), 'shape', Load(), lineno=33, col_offset=33), Name('shape', Load(), lineno=33, col_offset=42)], [], None, None, lineno=33, col_offset=16), lineno=33, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=35, col_offset=16), 'assertEqual', Load(), lineno=35, col_offset=16), [Attribute(Name('v', Load(), lineno=35, col_offset=33), 'strides', Load(), lineno=35, col_offset=33), Name('None', Load(), lineno=35, col_offset=44)], [], None, None, lineno=35, col_offset=16), lineno=35, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=16), 'assertFalse', Load(), lineno=37, col_offset=16), [Attribute(Name('v', Load(), lineno=37, col_offset=33), 'readonly', Load(), lineno=37, col_offset=33)], [], None, None, lineno=37, col_offset=16), lineno=37, col_offset=16), If(Attribute(Name('v', Load(), lineno=39, col_offset=19), 'shape', Load(), lineno=39, col_offset=19), [Assign([Name('n', Store(), lineno=40, col_offset=20)], Num(1, lineno=40, col_offset=24), lineno=40, col_offset=20), For(Name('dim', Store(), lineno=41, col_offset=24), Attribute(Name('v', Load(), lineno=41, col_offset=31), 'shape', Load(), lineno=41, col_offset=31), [Assign([Name('n', Store(), lineno=42, col_offset=24)], BinOp(Name('n', Load(), lineno=42, col_offset=28), Mult(), Name('dim', Load(), lineno=42, col_offset=32), lineno=42, col_offset=28), lineno=42, col_offset=24)], [], lineno=41, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=20), 'assertEqual', Load(), lineno=43, col_offset=20), [BinOp(Name('n', Load(), lineno=43, col_offset=37), Mult(), Attribute(Name('v', Load(), lineno=43, col_offset=41), 'itemsize', Load(), lineno=43, col_offset=41), lineno=43, col_offset=37), Call(Name('len', Load(), lineno=43, col_offset=53), [Call(Attribute(Name('v', Load(), lineno=43, col_offset=57), 'tobytes', Load(), lineno=43, col_offset=57), [], [], None, None, lineno=43, col_offset=57)], [], None, None, lineno=43, col_offset=53)], [], None, None, lineno=43, col_offset=20), lineno=43, col_offset=20)], [], lineno=39, col_offset=16)], [ExceptHandler(None, None, [Print(None, [Name('tp', Load(), lineno=46, col_offset=22)], True, lineno=46, col_offset=16), Raise(None, None, None, lineno=47, col_offset=16)], lineno=44, col_offset=12)], [], lineno=26, col_offset=12)], [], lineno=23, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('test_endian_types', arguments([Name('self', Param(), lineno=49, col_offset=26)], None, None, []), [For(Tuple([Name('tp', Store(), lineno=50, col_offset=12), Name('fmt', Store(), lineno=50, col_offset=16), Name('shape', Store(), lineno=50, col_offset=21), Name('itemtp', Store(), lineno=50, col_offset=28)], Store(), lineno=50, col_offset=12), Name('endian_types', Load(), lineno=50, col_offset=38), [Assign([Name('ob', Store(), lineno=51, col_offset=12)], Call(Name('tp', Load(), lineno=51, col_offset=17), [], [], None, None, lineno=51, col_offset=17), lineno=51, col_offset=12), Assign([Name('v', Store(), lineno=52, col_offset=12)], Call(Name('memoryview', Load(), lineno=52, col_offset=16), [Name('ob', Load(), lineno=52, col_offset=27)], [], None, None, lineno=52, col_offset=16), lineno=52, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=54, col_offset=16), 'assertEqual', Load(), lineno=54, col_offset=16), [Attribute(Name('v', Load(), lineno=54, col_offset=33), 'format', Load(), lineno=54, col_offset=33), Name('fmt', Load(), lineno=54, col_offset=43)], [], None, None, lineno=54, col_offset=16), lineno=54, col_offset=16), If(Compare(Name('shape', Load(), lineno=55, col_offset=19), [IsNot()], [Name('None', Load(), lineno=55, col_offset=32)], lineno=55, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=20), 'assertEqual', Load(), lineno=56, col_offset=20), [Call(Name('len', Load(), lineno=56, col_offset=37), [Name('v', Load(), lineno=56, col_offset=41)], [], None, None, lineno=56, col_offset=37), Subscript(Name('shape', Load(), lineno=56, col_offset=45), Index(Num(0, lineno=56, col_offset=51)), Load(), lineno=56, col_offset=45)], [], None, None, lineno=56, col_offset=20), lineno=56, col_offset=20)], [Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=20), 'assertEqual', Load(), lineno=58, col_offset=20), [BinOp(Call(Name('len', Load(), lineno=58, col_offset=37), [Name('v', Load(), lineno=58, col_offset=41)], [], None, None, lineno=58, col_offset=37), Mult(), Call(Name('sizeof', Load(), lineno=58, col_offset=46), [Name('itemtp', Load(), lineno=58, col_offset=53)], [], None, None, lineno=58, col_offset=46), lineno=58, col_offset=37), Call(Name('sizeof', Load(), lineno=58, col_offset=62), [Name('ob', Load(), lineno=58, col_offset=69)], [], None, None, lineno=58, col_offset=62)], [], None, None, lineno=58, col_offset=20), lineno=58, col_offset=20)], lineno=55, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=16), 'assertEqual', Load(), lineno=59, col_offset=16), [Attribute(Name('v', Load(), lineno=59, col_offset=33), 'itemsize', Load(), lineno=59, col_offset=33), Call(Name('sizeof', Load(), lineno=59, col_offset=45), [Name('itemtp', Load(), lineno=59, col_offset=52)], [], None, None, lineno=59, col_offset=45)], [], None, None, lineno=59, col_offset=16), lineno=59, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=16), 'assertEqual', Load(), lineno=60, col_offset=16), [Attribute(Name('v', Load(), lineno=60, col_offset=33), 'shape', Load(), lineno=60, col_offset=33), Name('shape', Load(), lineno=60, col_offset=42)], [], None, None, lineno=60, col_offset=16), lineno=60, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=16), 'assertEqual', Load(), lineno=62, col_offset=16), [Attribute(Name('v', Load(), lineno=62, col_offset=33), 'strides', Load(), lineno=62, col_offset=33), Name('None', Load(), lineno=62, col_offset=44)], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=16), 'assertFalse', Load(), lineno=64, col_offset=16), [Attribute(Name('v', Load(), lineno=64, col_offset=33), 'readonly', Load(), lineno=64, col_offset=33)], [], None, None, lineno=64, col_offset=16), lineno=64, col_offset=16), If(Attribute(Name('v', Load(), lineno=66, col_offset=19), 'shape', Load(), lineno=66, col_offset=19), [Assign([Name('n', Store(), lineno=67, col_offset=20)], Num(1, lineno=67, col_offset=24), lineno=67, col_offset=20), For(Name('dim', Store(), lineno=68, col_offset=24), Attribute(Name('v', Load(), lineno=68, col_offset=31), 'shape', Load(), lineno=68, col_offset=31), [Assign([Name('n', Store(), lineno=69, col_offset=24)], BinOp(Name('n', Load(), lineno=69, col_offset=28), Mult(), Name('dim', Load(), lineno=69, col_offset=32), lineno=69, col_offset=28), lineno=69, col_offset=24)], [], lineno=68, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=20), 'assertEqual', Load(), lineno=70, col_offset=20), [Name('n', Load(), lineno=70, col_offset=37), Call(Name('len', Load(), lineno=70, col_offset=40), [Name('v', Load(), lineno=70, col_offset=44)], [], None, None, lineno=70, col_offset=40)], [], None, None, lineno=70, col_offset=20), lineno=70, col_offset=20)], [], lineno=66, col_offset=16)], [ExceptHandler(None, None, [Print(None, [Name('tp', Load(), lineno=73, col_offset=22)], True, lineno=73, col_offset=16), Raise(None, None, None, lineno=74, col_offset=16)], lineno=71, col_offset=12)], [], lineno=53, col_offset=12)], [], lineno=50, col_offset=8)], [], lineno=49, col_offset=4)], [], lineno=20, col_offset=0), ClassDef('Point', [Name('Structure', Load(), lineno=78, col_offset=12)], [Assign([Name('_fields_', Store(), lineno=79, col_offset=4)], List([Tuple([Str('x', lineno=79, col_offset=17), Name('c_long', Load(), lineno=79, col_offset=22)], Load(), lineno=79, col_offset=17), Tuple([Str('y', lineno=79, col_offset=32), Name('c_long', Load(), lineno=79, col_offset=37)], Load(), lineno=79, col_offset=32)], Load(), lineno=79, col_offset=15), lineno=79, col_offset=4)], [], lineno=78, col_offset=0), ClassDef('PackedPoint', [Name('Structure', Load(), lineno=81, col_offset=18)], [Assign([Name('_pack_', Store(), lineno=82, col_offset=4)], Num(2, lineno=82, col_offset=13), lineno=82, col_offset=4), Assign([Name('_fields_', Store(), lineno=83, col_offset=4)], List([Tuple([Str('x', lineno=83, col_offset=17), Name('c_long', Load(), lineno=83, col_offset=22)], Load(), lineno=83, col_offset=17), Tuple([Str('y', lineno=83, col_offset=32), Name('c_long', Load(), lineno=83, col_offset=37)], Load(), lineno=83, col_offset=32)], Load(), lineno=83, col_offset=15), lineno=83, col_offset=4)], [], lineno=81, col_offset=0), ClassDef('Point2', [Name('Structure', Load(), lineno=85, col_offset=13)], [Pass( lineno=86, col_offset=4)], [], lineno=85, col_offset=0), Assign([Attribute(Name('Point2', Load(), lineno=87, col_offset=0), '_fields_', Store(), lineno=87, col_offset=0)], List([Tuple([Str('x', lineno=87, col_offset=20), Name('c_long', Load(), lineno=87, col_offset=25)], Load(), lineno=87, col_offset=20), Tuple([Str('y', lineno=87, col_offset=35), Name('c_long', Load(), lineno=87, col_offset=40)], Load(), lineno=87, col_offset=35)], Load(), lineno=87, col_offset=18), lineno=87, col_offset=0), ClassDef('EmptyStruct', [Name('Structure', Load(), lineno=89, col_offset=18)], [Assign([Name('_fields_', Store(), lineno=90, col_offset=4)], List([], Load(), lineno=90, col_offset=15), lineno=90, col_offset=4)], [], lineno=89, col_offset=0), ClassDef('aUnion', [Name('Union', Load(), lineno=92, col_offset=13)], [Assign([Name('_fields_', Store(), lineno=93, col_offset=4)], List([Tuple([Str('a', lineno=93, col_offset=17), Name('c_int', Load(), lineno=93, col_offset=22)], Load(), lineno=93, col_offset=17)], Load(), lineno=93, col_offset=15), lineno=93, col_offset=4)], [], lineno=92, col_offset=0), ClassDef('Incomplete', [Name('Structure', Load(), lineno=95, col_offset=17)], [Pass( lineno=96, col_offset=4)], [], lineno=95, col_offset=0), ClassDef('Complete', [Name('Structure', Load(), lineno=98, col_offset=15)], [Pass( lineno=99, col_offset=4)], [], lineno=98, col_offset=0), Assign([Name('PComplete', Store(), lineno=100, col_offset=0)], Call(Name('POINTER', Load(), lineno=100, col_offset=12), [Name('Complete', Load(), lineno=100, col_offset=20)], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=0), Assign([Attribute(Name('Complete', Load(), lineno=101, col_offset=0), '_fields_', Store(), lineno=101, col_offset=0)], List([Tuple([Str('a', lineno=101, col_offset=22), Name('c_long', Load(), lineno=101, col_offset=27)], Load(), lineno=101, col_offset=22)], Load(), lineno=101, col_offset=20), lineno=101, col_offset=0), Assign([Name('native_types', Store(), lineno=108, col_offset=0)], List([Tuple([Name('c_char', Load(), lineno=113, col_offset=5), Str('<c', lineno=113, col_offset=32), Name('None', Load(), lineno=113, col_offset=56), Name('c_char', Load(), lineno=113, col_offset=72)], Load(), lineno=113, col_offset=5), Tuple([Name('c_byte', Load(), lineno=114, col_offset=5), Str('<b', lineno=114, col_offset=32), Name('None', Load(), lineno=114, col_offset=56), Name('c_byte', Load(), lineno=114, col_offset=72)], Load(), lineno=114, col_offset=5), Tuple([Name('c_ubyte', Load(), lineno=115, col_offset=5), Str('<B', lineno=115, col_offset=32), Name('None', Load(), lineno=115, col_offset=56), Name('c_ubyte', Load(), lineno=115, col_offset=72)], Load(), lineno=115, col_offset=5), Tuple([Name('c_short', Load(), lineno=116, col_offset=5), Str('<h', lineno=116, col_offset=32), Name('None', Load(), lineno=116, col_offset=56), Name('c_short', Load(), lineno=116, col_offset=72)], Load(), lineno=116, col_offset=5), Tuple([Name('c_ushort', Load(), lineno=117, col_offset=5), Str('<H', lineno=117, col_offset=32), Name('None', Load(), lineno=117, col_offset=56), Name('c_ushort', Load(), lineno=117, col_offset=72)], Load(), lineno=117, col_offset=5), Tuple([Name('c_long', Load(), lineno=123, col_offset=5), Str('<l', lineno=123, col_offset=32), Name('None', Load(), lineno=123, col_offset=56), Name('c_long', Load(), lineno=123, col_offset=72)], Load(), lineno=123, col_offset=5), Tuple([Name('c_ulong', Load(), lineno=124, col_offset=5), Str('<L', lineno=124, col_offset=32), Name('None', Load(), lineno=124, col_offset=56), Name('c_ulong', Load(), lineno=124, col_offset=72)], Load(), lineno=124, col_offset=5), Tuple([Name('c_float', Load(), lineno=130, col_offset=5), Str('<f', lineno=130, col_offset=32), Name('None', Load(), lineno=130, col_offset=56), Name('c_float', Load(), lineno=130, col_offset=72)], Load(), lineno=130, col_offset=5), Tuple([Name('c_double', Load(), lineno=131, col_offset=5), Str('<d', lineno=131, col_offset=32), Name('None', Load(), lineno=131, col_offset=56), Name('c_double', Load(), lineno=131, col_offset=72)], Load(), lineno=131, col_offset=5), Tuple([Name('c_bool', Load(), lineno=134, col_offset=5), Str('<?', lineno=134, col_offset=32), Name('None', Load(), lineno=134, col_offset=56), Name('c_bool', Load(), lineno=134, col_offset=72)], Load(), lineno=134, col_offset=5), Tuple([Name('py_object', Load(), lineno=135, col_offset=5), Str('<O', lineno=135, col_offset=32), Name('None', Load(), lineno=135, col_offset=56), Name('py_object', Load(), lineno=135, col_offset=72)], Load(), lineno=135, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=139, col_offset=5), [Name('c_byte', Load(), lineno=139, col_offset=13)], [], None, None, lineno=139, col_offset=5), Str('&<b', lineno=139, col_offset=32), Name('None', Load(), lineno=139, col_offset=56), Call(Name('POINTER', Load(), lineno=139, col_offset=72), [Name('c_byte', Load(), lineno=139, col_offset=80)], [], None, None, lineno=139, col_offset=72)], Load(), lineno=139, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=140, col_offset=5), [Call(Name('POINTER', Load(), lineno=140, col_offset=13), [Name('c_long', Load(), lineno=140, col_offset=21)], [], None, None, lineno=140, col_offset=13)], [], None, None, lineno=140, col_offset=5), Str('&&<l', lineno=140, col_offset=32), Name('None', Load(), lineno=140, col_offset=56), Call(Name('POINTER', Load(), lineno=140, col_offset=72), [Call(Name('POINTER', Load(), lineno=140, col_offset=80), [Name('c_long', Load(), lineno=140, col_offset=88)], [], None, None, lineno=140, col_offset=80)], [], None, None, lineno=140, col_offset=72)], Load(), lineno=140, col_offset=5), Tuple([BinOp(Name('c_double', Load(), lineno=144, col_offset=5), Mult(), Num(4, lineno=144, col_offset=16), lineno=144, col_offset=5), Str('(4)<d', lineno=144, col_offset=32), Tuple([Num(4, lineno=144, col_offset=57)], Load(), lineno=144, col_offset=57), Name('c_double', Load(), lineno=144, col_offset=72)], Load(), lineno=144, col_offset=5), Tuple([BinOp(BinOp(BinOp(Name('c_float', Load(), lineno=145, col_offset=5), Mult(), Num(4, lineno=145, col_offset=15), lineno=145, col_offset=5), Mult(), Num(3, lineno=145, col_offset=19), lineno=145, col_offset=17), Mult(), Num(2, lineno=145, col_offset=23), lineno=145, col_offset=21), Str('(2,3,4)<f', lineno=145, col_offset=32), Tuple([Num(2, lineno=145, col_offset=57), Num(3, lineno=145, col_offset=59), Num(4, lineno=145, col_offset=61)], Load(), lineno=145, col_offset=57), Name('c_float', Load(), lineno=145, col_offset=72)], Load(), lineno=145, col_offset=5), Tuple([BinOp(Call(Name('POINTER', Load(), lineno=146, col_offset=5), [Name('c_short', Load(), lineno=146, col_offset=13)], [], None, None, lineno=146, col_offset=5), Mult(), Num(2, lineno=146, col_offset=24), lineno=146, col_offset=5), Str('(2)&<h', lineno=146, col_offset=32), Tuple([Num(2, lineno=146, col_offset=57)], Load(), lineno=146, col_offset=57), Call(Name('POINTER', Load(), lineno=146, col_offset=72), [Name('c_short', Load(), lineno=146, col_offset=80)], [], None, None, lineno=146, col_offset=72)], Load(), lineno=146, col_offset=5), Tuple([BinOp(BinOp(Call(Name('POINTER', Load(), lineno=147, col_offset=5), [Name('c_short', Load(), lineno=147, col_offset=13)], [], None, None, lineno=147, col_offset=5), Mult(), Num(2, lineno=147, col_offset=24), lineno=147, col_offset=5), Mult(), Num(3, lineno=147, col_offset=28), lineno=147, col_offset=26), Str('(3,2)&<h', lineno=147, col_offset=32), Tuple([Num(3, lineno=147, col_offset=57), Num(2, lineno=147, col_offset=59)], Load(), lineno=147, col_offset=57), Call(Name('POINTER', Load(), lineno=147, col_offset=72), [Name('c_short', Load(), lineno=147, col_offset=80)], [], None, None, lineno=147, col_offset=72)], Load(), lineno=147, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=148, col_offset=5), [BinOp(Name('c_short', Load(), lineno=148, col_offset=13), Mult(), Num(2, lineno=148, col_offset=23), lineno=148, col_offset=13)], [], None, None, lineno=148, col_offset=5), Str('&(2)<h', lineno=148, col_offset=32), Name('None', Load(), lineno=148, col_offset=56), Call(Name('POINTER', Load(), lineno=148, col_offset=72), [Name('c_short', Load(), lineno=148, col_offset=80)], [], None, None, lineno=148, col_offset=72)], Load(), lineno=148, col_offset=5), Tuple([Name('Point', Load(), lineno=152, col_offset=5), Str('T{<l:x:<l:y:}', lineno=152, col_offset=32), Name('None', Load(), lineno=152, col_offset=56), Name('Point', Load(), lineno=152, col_offset=72)], Load(), lineno=152, col_offset=5), Tuple([Name('PackedPoint', Load(), lineno=154, col_offset=5), Str('B', lineno=154, col_offset=32), Name('None', Load(), lineno=154, col_offset=56), Name('PackedPoint', Load(), lineno=154, col_offset=72)], Load(), lineno=154, col_offset=5), Tuple([Name('Point2', Load(), lineno=155, col_offset=5), Str('T{<l:x:<l:y:}', lineno=155, col_offset=32), Name('None', Load(), lineno=155, col_offset=56), Name('Point2', Load(), lineno=155, col_offset=72)], Load(), lineno=155, col_offset=5), Tuple([Name('EmptyStruct', Load(), lineno=156, col_offset=5), Str('T{}', lineno=156, col_offset=32), Name('None', Load(), lineno=156, col_offset=56), Name('EmptyStruct', Load(), lineno=156, col_offset=72)], Load(), lineno=156, col_offset=5), Tuple([Name('aUnion', Load(), lineno=158, col_offset=5), Str('B', lineno=158, col_offset=32), Name('None', Load(), lineno=158, col_offset=56), Name('aUnion', Load(), lineno=158, col_offset=72)], Load(), lineno=158, col_offset=5), Tuple([Name('Incomplete', Load(), lineno=161, col_offset=5), Str('B', lineno=161, col_offset=32), Name('None', Load(), lineno=161, col_offset=56), Name('Incomplete', Load(), lineno=161, col_offset=72)], Load(), lineno=161, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=162, col_offset=5), [Name('Incomplete', Load(), lineno=162, col_offset=13)], [], None, None, lineno=162, col_offset=5), Str('&B', lineno=162, col_offset=32), Name('None', Load(), lineno=162, col_offset=56), Call(Name('POINTER', Load(), lineno=162, col_offset=72), [Name('Incomplete', Load(), lineno=162, col_offset=80)], [], None, None, lineno=162, col_offset=72)], Load(), lineno=162, col_offset=5), Tuple([Name('Complete', Load(), lineno=166, col_offset=5), Str('T{<l:a:}', lineno=166, col_offset=32), Name('None', Load(), lineno=166, col_offset=56), Name('Complete', Load(), lineno=166, col_offset=72)], Load(), lineno=166, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=168, col_offset=5), [Name('Complete', Load(), lineno=168, col_offset=13)], [], None, None, lineno=168, col_offset=5), Str('&B', lineno=168, col_offset=32), Name('None', Load(), lineno=168, col_offset=56), Call(Name('POINTER', Load(), lineno=168, col_offset=72), [Name('Complete', Load(), lineno=168, col_offset=80)], [], None, None, lineno=168, col_offset=72)], Load(), lineno=168, col_offset=5), Tuple([Call(Name('CFUNCTYPE', Load(), lineno=173, col_offset=5), [Name('None', Load(), lineno=173, col_offset=15)], [], None, None, lineno=173, col_offset=5), Str('X{}', lineno=173, col_offset=32), Name('None', Load(), lineno=173, col_offset=56), Call(Name('CFUNCTYPE', Load(), lineno=173, col_offset=72), [Name('None', Load(), lineno=173, col_offset=82)], [], None, None, lineno=173, col_offset=72)], Load(), lineno=173, col_offset=5)], Load(), lineno=108, col_offset=15), lineno=108, col_offset=0), ClassDef('BEPoint', [Name('BigEndianStructure', Load(), lineno=177, col_offset=14)], [Assign([Name('_fields_', Store(), lineno=178, col_offset=4)], List([Tuple([Str('x', lineno=178, col_offset=17), Name('c_long', Load(), lineno=178, col_offset=22)], Load(), lineno=178, col_offset=17), Tuple([Str('y', lineno=178, col_offset=32), Name('c_long', Load(), lineno=178, col_offset=37)], Load(), lineno=178, col_offset=32)], Load(), lineno=178, col_offset=15), lineno=178, col_offset=4)], [], lineno=177, col_offset=0), ClassDef('LEPoint', [Name('LittleEndianStructure', Load(), lineno=180, col_offset=14)], [Assign([Name('_fields_', Store(), lineno=181, col_offset=4)], List([Tuple([Str('x', lineno=181, col_offset=17), Name('c_long', Load(), lineno=181, col_offset=22)], Load(), lineno=181, col_offset=17), Tuple([Str('y', lineno=181, col_offset=32), Name('c_long', Load(), lineno=181, col_offset=37)], Load(), lineno=181, col_offset=32)], Load(), lineno=181, col_offset=15), lineno=181, col_offset=4)], [], lineno=180, col_offset=0), Assign([Name('endian_types', Store(), lineno=188, col_offset=0)], List([Tuple([Name('BEPoint', Load(), lineno=189, col_offset=5), Str('T{>l:x:>l:y:}', lineno=189, col_offset=32), Name('None', Load(), lineno=189, col_offset=56), Name('BEPoint', Load(), lineno=189, col_offset=72)], Load(), lineno=189, col_offset=5), Tuple([Name('LEPoint', Load(), lineno=190, col_offset=5), Str('T{<l:x:<l:y:}', lineno=190, col_offset=32), Name('None', Load(), lineno=190, col_offset=56), Name('LEPoint', Load(), lineno=190, col_offset=72)], Load(), lineno=190, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=191, col_offset=5), [Name('BEPoint', Load(), lineno=191, col_offset=13)], [], None, None, lineno=191, col_offset=5), Str('&T{>l:x:>l:y:}', lineno=191, col_offset=32), Name('None', Load(), lineno=191, col_offset=56), Call(Name('POINTER', Load(), lineno=191, col_offset=72), [Name('BEPoint', Load(), lineno=191, col_offset=80)], [], None, None, lineno=191, col_offset=72)], Load(), lineno=191, col_offset=5), Tuple([Call(Name('POINTER', Load(), lineno=192, col_offset=5), [Name('LEPoint', Load(), lineno=192, col_offset=13)], [], None, None, lineno=192, col_offset=5), Str('&T{<l:x:<l:y:}', lineno=192, col_offset=32), Name('None', Load(), lineno=192, col_offset=56), Call(Name('POINTER', Load(), lineno=192, col_offset=72), [Name('LEPoint', Load(), lineno=192, col_offset=80)], [], None, None, lineno=192, col_offset=72)], Load(), lineno=192, col_offset=5)], Load(), lineno=188, col_offset=15), lineno=188, col_offset=0), If(Compare(Name('__name__', Load(), lineno=195, col_offset=3), [Eq()], [Str('__main__', lineno=195, col_offset=15)], lineno=195, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=196, col_offset=4), 'main', Load(), lineno=196, col_offset=4), [], [], None, None, lineno=196, col_offset=4), lineno=196, col_offset=4)], [], lineno=195, col_offset=0)])
