Module([Expr(Str("\nFixer that changes zip(seq0, seq1, ...) into list(zip(seq0, seq1, ...)\nunless there exists a 'from future_builtins import zip' statement in the\ntop-level namespace.\n\nWe avoid the transformation if the zip() call is directly contained in\niter(<>), list(<>), tuple(<>), sorted(<>), ...join(<>), or for V in <>:.\n", lineno=8, col_offset=-1), lineno=8, col_offset=-1), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=11, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('Call', None), alias('in_special_context', None)], 2, lineno=12, col_offset=0), ClassDef('FixZip', [Attribute(Name('fixer_base', Load(), lineno=14, col_offset=13), 'ConditionalFix', Load(), lineno=14, col_offset=13)], [Assign([Name('BM_compatible', Store(), lineno=16, col_offset=4)], Name('True', Load(), lineno=16, col_offset=20), lineno=16, col_offset=4), Assign([Name('PATTERN', Store(), lineno=17, col_offset=4)], Str("\n    power< 'zip' args=trailer< '(' [any] ')' >\n    >\n    ", lineno=20, col_offset=-1), lineno=17, col_offset=4), Assign([Name('skip_on', Store(), lineno=22, col_offset=4)], Str('future_builtins.zip', lineno=22, col_offset=14), lineno=22, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=24, col_offset=18), Name('node', Param(), lineno=24, col_offset=24), Name('results', Param(), lineno=24, col_offset=30)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=25, col_offset=11), 'should_skip', Load(), lineno=25, col_offset=11), [Name('node', Load(), lineno=25, col_offset=28)], [], None, None, lineno=25, col_offset=11), [Return(None, lineno=26, col_offset=12)], [], lineno=25, col_offset=8), If(Call(Name('in_special_context', Load(), lineno=28, col_offset=11), [Name('node', Load(), lineno=28, col_offset=30)], [], None, None, lineno=28, col_offset=11), [Return(Name('None', Load(), lineno=29, col_offset=19), lineno=29, col_offset=12)], [], lineno=28, col_offset=8), Assign([Name('new', Store(), lineno=31, col_offset=8)], Call(Attribute(Name('node', Load(), lineno=31, col_offset=14), 'clone', Load(), lineno=31, col_offset=14), [], [], None, None, lineno=31, col_offset=14), lineno=31, col_offset=8), Assign([Attribute(Name('new', Load(), lineno=32, col_offset=8), 'prefix', Store(), lineno=32, col_offset=8)], Str(u'', lineno=32, col_offset=21), lineno=32, col_offset=8), Assign([Name('new', Store(), lineno=33, col_offset=8)], Call(Name('Call', Load(), lineno=33, col_offset=14), [Call(Name('Name', Load(), lineno=33, col_offset=19), [Str(u'list', lineno=33, col_offset=24)], [], None, None, lineno=33, col_offset=19), List([Name('new', Load(), lineno=33, col_offset=35)], Load(), lineno=33, col_offset=34)], [], None, None, lineno=33, col_offset=14), lineno=33, col_offset=8), Assign([Attribute(Name('new', Load(), lineno=34, col_offset=8), 'prefix', Store(), lineno=34, col_offset=8)], Attribute(Name('node', Load(), lineno=34, col_offset=21), 'prefix', Load(), lineno=34, col_offset=21), lineno=34, col_offset=8), Return(Name('new', Load(), lineno=35, col_offset=15), lineno=35, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=14, col_offset=0)])
