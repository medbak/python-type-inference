Module([Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('sqlite3', 'sqlite')], lineno=4, col_offset=0), ClassDef('DumpTests', [Attribute(Name('unittest', Load(), lineno=6, col_offset=16), 'TestCase', Load(), lineno=6, col_offset=16)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=7, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=8, col_offset=8), 'cx', Store(), lineno=8, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=8, col_offset=18), 'connect', Load(), lineno=8, col_offset=18), [Str(':memory:', lineno=8, col_offset=33)], [], None, None, lineno=8, col_offset=18), lineno=8, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=9, col_offset=8), 'cu', Store(), lineno=9, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=9, col_offset=18), 'cx', Load(), lineno=9, col_offset=18), 'cursor', Load(), lineno=9, col_offset=18), [], [], None, None, lineno=9, col_offset=18), lineno=9, col_offset=8)], [], lineno=7, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=11, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=12, col_offset=8), 'cx', Load(), lineno=12, col_offset=8), 'close', Load(), lineno=12, col_offset=8), [], [], None, None, lineno=12, col_offset=8), lineno=12, col_offset=8)], [], lineno=11, col_offset=4), FunctionDef('CheckTableDump', arguments([Name('self', Param(), lineno=14, col_offset=23)], None, None, []), [Assign([Name('expected_sqls', Store(), lineno=15, col_offset=8)], List([Str('CREATE TABLE t1(id integer primary key, s1 text, t1_i1 integer not null, i2 integer, unique (s1), constraint t1_idx1 unique (i2));', lineno=16, col_offset=16), Str('INSERT INTO "t1" VALUES(1,\'foo\',10,20);', lineno=20, col_offset=16), Str('INSERT INTO "t1" VALUES(2,\'foo2\',30,30);', lineno=22, col_offset=16), Str('CREATE TABLE t2(id integer, t2_i1 integer, t2_i2 integer, primary key (id),foreign key(t2_i1) references t1(t1_i1));', lineno=24, col_offset=16), Str('CREATE TRIGGER trigger_1 update of t1_i1 on t1 begin update t2 set t2_i1 = new.t1_i1 where t2_i1 = old.t1_i1; end;', lineno=28, col_offset=16), Str('CREATE VIEW v1 as select * from t1 left join t2 using (id);', lineno=33, col_offset=16)], Load(), lineno=15, col_offset=24), lineno=15, col_offset=8), Expr(ListComp(Call(Attribute(Attribute(Name('self', Load(), lineno=36, col_offset=9), 'cu', Load(), lineno=36, col_offset=9), 'execute', Load(), lineno=36, col_offset=9), [Name('s', Load(), lineno=36, col_offset=25)], [], None, None, lineno=36, col_offset=9), [comprehension(Name('s', Store(), lineno=36, col_offset=32), Name('expected_sqls', Load(), lineno=36, col_offset=37), [])], lineno=36, col_offset=9), lineno=36, col_offset=8), Assign([Name('i', Store(), lineno=37, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=37, col_offset=12), 'cx', Load(), lineno=37, col_offset=12), 'iterdump', Load(), lineno=37, col_offset=12), [], [], None, None, lineno=37, col_offset=12), lineno=37, col_offset=8), Assign([Name('actual_sqls', Store(), lineno=38, col_offset=8)], ListComp(Name('s', Load(), lineno=38, col_offset=23), [comprehension(Name('s', Store(), lineno=38, col_offset=29), Name('i', Load(), lineno=38, col_offset=34), [])], lineno=38, col_offset=23), lineno=38, col_offset=8), Assign([Name('expected_sqls', Store(), lineno=39, col_offset=8)], BinOp(BinOp(List([Str('BEGIN TRANSACTION;', lineno=39, col_offset=25)], Load(), lineno=39, col_offset=24), Add(), Name('expected_sqls', Load(), lineno=39, col_offset=49), lineno=39, col_offset=24), Add(), List([Str('COMMIT;', lineno=40, col_offset=13)], Load(), lineno=40, col_offset=12), lineno=39, col_offset=63), lineno=39, col_offset=8), Expr(ListComp(Call(Attribute(Name('self', Load(), lineno=41, col_offset=9), 'assertEqual', Load(), lineno=41, col_offset=9), [Subscript(Name('expected_sqls', Load(), lineno=41, col_offset=26), Index(Name('i', Load(), lineno=41, col_offset=40)), Load(), lineno=41, col_offset=26), Subscript(Name('actual_sqls', Load(), lineno=41, col_offset=44), Index(Name('i', Load(), lineno=41, col_offset=56)), Load(), lineno=41, col_offset=44)], [], None, None, lineno=41, col_offset=9), [comprehension(Name('i', Store(), lineno=42, col_offset=16), Call(Name('xrange', Load(), lineno=42, col_offset=21), [Call(Name('len', Load(), lineno=42, col_offset=28), [Name('expected_sqls', Load(), lineno=42, col_offset=32)], [], None, None, lineno=42, col_offset=28)], [], None, None, lineno=42, col_offset=21), [])], lineno=41, col_offset=9), lineno=41, col_offset=8)], [], lineno=14, col_offset=4)], [], lineno=6, col_offset=0), FunctionDef('suite', arguments([], None, None, []), [Return(Call(Attribute(Name('unittest', Load(), lineno=45, col_offset=11), 'TestSuite', Load(), lineno=45, col_offset=11), [Call(Attribute(Name('unittest', Load(), lineno=45, col_offset=30), 'makeSuite', Load(), lineno=45, col_offset=30), [Name('DumpTests', Load(), lineno=45, col_offset=49), Str('Check', lineno=45, col_offset=60)], [], None, None, lineno=45, col_offset=30)], [], None, None, lineno=45, col_offset=11), lineno=45, col_offset=4)], [], lineno=44, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Assign([Name('runner', Store(), lineno=48, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=48, col_offset=13), 'TextTestRunner', Load(), lineno=48, col_offset=13), [], [], None, None, lineno=48, col_offset=13), lineno=48, col_offset=4), Expr(Call(Attribute(Name('runner', Load(), lineno=49, col_offset=4), 'run', Load(), lineno=49, col_offset=4), [Call(Name('suite', Load(), lineno=49, col_offset=15), [], [], None, None, lineno=49, col_offset=15)], [], None, None, lineno=49, col_offset=4), lineno=49, col_offset=4)], [], lineno=47, col_offset=0), If(Compare(Name('__name__', Load(), lineno=51, col_offset=3), [Eq()], [Str('__main__', lineno=51, col_offset=15)], lineno=51, col_offset=3), [Expr(Call(Name('test', Load(), lineno=52, col_offset=4), [], [], None, None, lineno=52, col_offset=4), lineno=52, col_offset=4)], [], lineno=51, col_offset=0)])
