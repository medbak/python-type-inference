Module([Expr(Str('Base class for MIME multipart/* type messages.', lineno=5, col_offset=0), lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('MIMEMultipart', lineno=7, col_offset=11)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), ImportFrom('email.mime.base', [alias('MIMEBase', None)], 0, lineno=9, col_offset=0), ClassDef('MIMEMultipart', [Name('MIMEBase', Load(), lineno=13, col_offset=20)], [Expr(Str('Base class for MIME multipart/* type messages.', lineno=14, col_offset=4), lineno=14, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=16, col_offset=17), Name('_subtype', Param(), lineno=16, col_offset=23), Name('boundary', Param(), lineno=16, col_offset=41), Name('_subparts', Param(), lineno=16, col_offset=56)], None, '_params', [Str('mixed', lineno=16, col_offset=32), Name('None', Load(), lineno=16, col_offset=50), Name('None', Load(), lineno=16, col_offset=66)]), [Expr(Str("Creates a multipart/* type message.\n\n        By default, creates a multipart/mixed message, with proper\n        Content-Type and MIME-Version headers.\n\n        _subtype is the subtype of the multipart content type, defaulting to\n        `mixed'.\n\n        boundary is the multipart boundary string.  By default it is\n        calculated as needed.\n\n        _subparts is a sequence of initial subparts for the payload.  It\n        must be an iterable object, such as a list.  You can always\n        attach new subparts to the message by using the attach() method.\n\n        Additional parameters for the Content-Type header are taken from the\n        keyword arguments (or passed into the _params argument).\n        ", lineno=35, col_offset=-1), lineno=35, col_offset=-1), Expr(Call(Attribute(Name('MIMEBase', Load(), lineno=36, col_offset=8), '__init__', Load(), lineno=36, col_offset=8), [Name('self', Load(), lineno=36, col_offset=26), Str('multipart', lineno=36, col_offset=32), Name('_subtype', Load(), lineno=36, col_offset=45)], [], None, Name('_params', Load(), lineno=36, col_offset=57), lineno=36, col_offset=8), lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=41, col_offset=8), '_payload', Store(), lineno=41, col_offset=8)], List([], Load(), lineno=41, col_offset=24), lineno=41, col_offset=8), If(Name('_subparts', Load(), lineno=43, col_offset=11), [For(Name('p', Store(), lineno=44, col_offset=16), Name('_subparts', Load(), lineno=44, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=45, col_offset=16), 'attach', Load(), lineno=45, col_offset=16), [Name('p', Load(), lineno=45, col_offset=28)], [], None, None, lineno=45, col_offset=16), lineno=45, col_offset=16)], [], lineno=44, col_offset=12)], [], lineno=43, col_offset=8), If(Name('boundary', Load(), lineno=46, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=47, col_offset=12), 'set_boundary', Load(), lineno=47, col_offset=12), [Name('boundary', Load(), lineno=47, col_offset=30)], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=12)], [], lineno=46, col_offset=8)], [], lineno=16, col_offset=4)], [], lineno=13, col_offset=0)])
