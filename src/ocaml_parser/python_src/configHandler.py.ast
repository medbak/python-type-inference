Module([Expr(Str("Provides access to stored IDLE configuration information.\n\nRefer to the comments at the beginning of config-main.def for a description of\nthe available configuration files and the design implemented to update user\nconfiguration information.  In particular, user configuration choices which\nduplicate the defaults will be removed from the user's configuration files,\nand if a file becomes empty, it will be deleted.\n\nThe contents of the user files may be altered using the Options/Configure IDLE\nmenu to access the configuration GUI (configDialog.py), or manually.\n\nThroughout this module there is an emphasis on returning useable defaults\nwhen a problem occurs in returning a requested configuration value back to\nidle. This is to allow IDLE to continue to function in spite of errors in\nthe retrieval of config information. When a default is returned instead of\na requested config value, a message is printed to stderr to aid in\nconfiguration problem notification and resolution.\n\n", lineno=19, col_offset=-1), lineno=19, col_offset=-1), Import([alias('os', None)], lineno=20, col_offset=0), Import([alias('sys', None)], lineno=21, col_offset=0), Import([alias('string', None)], lineno=22, col_offset=0), ImportFrom('idlelib', [alias('macosxSupport', None)], 0, lineno=23, col_offset=0), ImportFrom('ConfigParser', [alias('ConfigParser', None), alias('NoOptionError', None), alias('NoSectionError', None)], 0, lineno=24, col_offset=0), ClassDef('InvalidConfigType', [Name('Exception', Load(), lineno=26, col_offset=24)], [Pass( lineno=26, col_offset=36)], [], lineno=26, col_offset=0), ClassDef('InvalidConfigSet', [Name('Exception', Load(), lineno=27, col_offset=23)], [Pass( lineno=27, col_offset=35)], [], lineno=27, col_offset=0), ClassDef('InvalidFgBg', [Name('Exception', Load(), lineno=28, col_offset=18)], [Pass( lineno=28, col_offset=30)], [], lineno=28, col_offset=0), ClassDef('InvalidTheme', [Name('Exception', Load(), lineno=29, col_offset=19)], [Pass( lineno=29, col_offset=31)], [], lineno=29, col_offset=0), ClassDef('IdleConfParser', [Name('ConfigParser', Load(), lineno=31, col_offset=21)], [Expr(Str('\n    A ConfigParser specialised for idle configuration file handling\n    ', lineno=34, col_offset=-1), lineno=34, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=35, col_offset=17), Name('cfgFile', Param(), lineno=35, col_offset=23), Name('cfgDefaults', Param(), lineno=35, col_offset=32)], None, None, [Name('None', Load(), lineno=35, col_offset=44)]), [Expr(Str('\n        cfgFile - string, fully specified configuration file name\n        ', lineno=38, col_offset=-1), lineno=38, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'file', Store(), lineno=39, col_offset=8)], Name('cfgFile', Load(), lineno=39, col_offset=18), lineno=39, col_offset=8), Expr(Call(Attribute(Name('ConfigParser', Load(), lineno=40, col_offset=8), '__init__', Load(), lineno=40, col_offset=8), [Name('self', Load(), lineno=40, col_offset=30)], [keyword('defaults', Name('cfgDefaults', Load(), lineno=40, col_offset=44))], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('Get', arguments([Name('self', Param(), lineno=42, col_offset=12), Name('section', Param(), lineno=42, col_offset=18), Name('option', Param(), lineno=42, col_offset=27), Name('type', Param(), lineno=42, col_offset=35), Name('default', Param(), lineno=42, col_offset=46), Name('raw', Param(), lineno=42, col_offset=60)], None, None, [Name('None', Load(), lineno=42, col_offset=40), Name('None', Load(), lineno=42, col_offset=54), Name('False', Load(), lineno=42, col_offset=64)]), [Expr(Str('\n        Get an option value for given section/option or return default.\n        If type is specified, return as type.\n        ', lineno=46, col_offset=-1), lineno=46, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=47, col_offset=15), 'has_option', Load(), lineno=47, col_offset=15), [Name('section', Load(), lineno=47, col_offset=31), Name('option', Load(), lineno=47, col_offset=40)], [], None, None, lineno=47, col_offset=15), lineno=47, col_offset=11), [Return(Name('default', Load(), lineno=48, col_offset=19), lineno=48, col_offset=12)], [], lineno=47, col_offset=8), If(Compare(Name('type', Load(), lineno=49, col_offset=11), [Eq()], [Str('bool', lineno=49, col_offset=17)], lineno=49, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=50, col_offset=19), 'getboolean', Load(), lineno=50, col_offset=19), [Name('section', Load(), lineno=50, col_offset=35), Name('option', Load(), lineno=50, col_offset=44)], [], None, None, lineno=50, col_offset=19), lineno=50, col_offset=12)], [If(Compare(Name('type', Load(), lineno=51, col_offset=13), [Eq()], [Str('int', lineno=51, col_offset=19)], lineno=51, col_offset=13), [Return(Call(Attribute(Name('self', Load(), lineno=52, col_offset=19), 'getint', Load(), lineno=52, col_offset=19), [Name('section', Load(), lineno=52, col_offset=31), Name('option', Load(), lineno=52, col_offset=40)], [], None, None, lineno=52, col_offset=19), lineno=52, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=54, col_offset=19), 'get', Load(), lineno=54, col_offset=19), [Name('section', Load(), lineno=54, col_offset=28), Name('option', Load(), lineno=54, col_offset=37)], [keyword('raw', Name('raw', Load(), lineno=54, col_offset=49))], None, None, lineno=54, col_offset=19), lineno=54, col_offset=12)], lineno=51, col_offset=13)], lineno=49, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('GetOptionList', arguments([Name('self', Param(), lineno=56, col_offset=22), Name('section', Param(), lineno=56, col_offset=27)], None, None, []), [Expr(Str('\n        Get an option list for given section\n        ', lineno=59, col_offset=-1), lineno=59, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=60, col_offset=11), 'has_section', Load(), lineno=60, col_offset=11), [Name('section', Load(), lineno=60, col_offset=28)], [], None, None, lineno=60, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=61, col_offset=19), 'options', Load(), lineno=61, col_offset=19), [Name('section', Load(), lineno=61, col_offset=32)], [], None, None, lineno=61, col_offset=19), lineno=61, col_offset=12)], [Return(List([], Load(), lineno=63, col_offset=19), lineno=63, col_offset=12)], lineno=60, col_offset=8)], [], lineno=56, col_offset=4), FunctionDef('Load', arguments([Name('self', Param(), lineno=65, col_offset=13)], None, None, []), [Expr(Str('\n        Load the configuration file from disk\n        ', lineno=68, col_offset=-1), lineno=68, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=69, col_offset=8), 'read', Load(), lineno=69, col_offset=8), [Attribute(Name('self', Load(), lineno=69, col_offset=18), 'file', Load(), lineno=69, col_offset=18)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=8)], [], lineno=65, col_offset=4)], [], lineno=31, col_offset=0), ClassDef('IdleUserConfParser', [Name('IdleConfParser', Load(), lineno=71, col_offset=25)], [Expr(Str('\n    IdleConfigParser specialised for user configuration handling.\n    ', lineno=74, col_offset=-1), lineno=74, col_offset=-1), FunctionDef('AddSection', arguments([Name('self', Param(), lineno=76, col_offset=19), Name('section', Param(), lineno=76, col_offset=24)], None, None, []), [Expr(Str("\n        if section doesn't exist, add it\n        ", lineno=79, col_offset=-1), lineno=79, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=80, col_offset=15), 'has_section', Load(), lineno=80, col_offset=15), [Name('section', Load(), lineno=80, col_offset=32)], [], None, None, lineno=80, col_offset=15), lineno=80, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=12), 'add_section', Load(), lineno=81, col_offset=12), [Name('section', Load(), lineno=81, col_offset=29)], [], None, None, lineno=81, col_offset=12), lineno=81, col_offset=12)], [], lineno=80, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('RemoveEmptySections', arguments([Name('self', Param(), lineno=83, col_offset=28)], None, None, []), [Expr(Str('\n        remove any sections that have no options\n        ', lineno=86, col_offset=-1), lineno=86, col_offset=-1), For(Name('section', Store(), lineno=87, col_offset=12), Call(Attribute(Name('self', Load(), lineno=87, col_offset=23), 'sections', Load(), lineno=87, col_offset=23), [], [], None, None, lineno=87, col_offset=23), [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=88, col_offset=19), 'GetOptionList', Load(), lineno=88, col_offset=19), [Name('section', Load(), lineno=88, col_offset=38)], [], None, None, lineno=88, col_offset=19), lineno=88, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=16), 'remove_section', Load(), lineno=89, col_offset=16), [Name('section', Load(), lineno=89, col_offset=36)], [], None, None, lineno=89, col_offset=16), lineno=89, col_offset=16)], [], lineno=88, col_offset=12)], [], lineno=87, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('IsEmpty', arguments([Name('self', Param(), lineno=91, col_offset=16)], None, None, []), [Expr(Str('\n        Remove empty sections and then return 1 if parser has no sections\n        left, else return 0.\n        ', lineno=95, col_offset=-1), lineno=95, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=8), 'RemoveEmptySections', Load(), lineno=96, col_offset=8), [], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=97, col_offset=11), 'sections', Load(), lineno=97, col_offset=11), [], [], None, None, lineno=97, col_offset=11), [Return(Num(0, lineno=98, col_offset=19), lineno=98, col_offset=12)], [Return(Num(1, lineno=100, col_offset=19), lineno=100, col_offset=12)], lineno=97, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('RemoveOption', arguments([Name('self', Param(), lineno=102, col_offset=21), Name('section', Param(), lineno=102, col_offset=26), Name('option', Param(), lineno=102, col_offset=34)], None, None, []), [Expr(Str('\n        If section/option exists, remove it.\n        Returns 1 if option was removed, 0 otherwise.\n        ', lineno=106, col_offset=-1), lineno=106, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=107, col_offset=11), 'has_section', Load(), lineno=107, col_offset=11), [Name('section', Load(), lineno=107, col_offset=28)], [], None, None, lineno=107, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=108, col_offset=19), 'remove_option', Load(), lineno=108, col_offset=19), [Name('section', Load(), lineno=108, col_offset=38), Name('option', Load(), lineno=108, col_offset=46)], [], None, None, lineno=108, col_offset=19), lineno=108, col_offset=12)], [], lineno=107, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('SetOption', arguments([Name('self', Param(), lineno=110, col_offset=18), Name('section', Param(), lineno=110, col_offset=23), Name('option', Param(), lineno=110, col_offset=31), Name('value', Param(), lineno=110, col_offset=38)], None, None, []), [Expr(Str('\n        Sets option to value, adding section if required.\n        Returns 1 if option was added or changed, otherwise 0.\n        ', lineno=114, col_offset=-1), lineno=114, col_offset=-1), If(Call(Attribute(Name('self', Load(), lineno=115, col_offset=11), 'has_option', Load(), lineno=115, col_offset=11), [Name('section', Load(), lineno=115, col_offset=27), Name('option', Load(), lineno=115, col_offset=35)], [], None, None, lineno=115, col_offset=11), [If(Compare(Call(Attribute(Name('self', Load(), lineno=116, col_offset=15), 'get', Load(), lineno=116, col_offset=15), [Name('section', Load(), lineno=116, col_offset=24), Name('option', Load(), lineno=116, col_offset=32)], [], None, None, lineno=116, col_offset=15), [Eq()], [Name('value', Load(), lineno=116, col_offset=41)], lineno=116, col_offset=15), [Return(Num(0, lineno=117, col_offset=23), lineno=117, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=119, col_offset=16), 'set', Load(), lineno=119, col_offset=16), [Name('section', Load(), lineno=119, col_offset=25), Name('option', Load(), lineno=119, col_offset=33), Name('value', Load(), lineno=119, col_offset=40)], [], None, None, lineno=119, col_offset=16), lineno=119, col_offset=16), Return(Num(1, lineno=120, col_offset=23), lineno=120, col_offset=16)], lineno=116, col_offset=12)], [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=122, col_offset=19), 'has_section', Load(), lineno=122, col_offset=19), [Name('section', Load(), lineno=122, col_offset=36)], [], None, None, lineno=122, col_offset=19), lineno=122, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=16), 'add_section', Load(), lineno=123, col_offset=16), [Name('section', Load(), lineno=123, col_offset=33)], [], None, None, lineno=123, col_offset=16), lineno=123, col_offset=16)], [], lineno=122, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=124, col_offset=12), 'set', Load(), lineno=124, col_offset=12), [Name('section', Load(), lineno=124, col_offset=21), Name('option', Load(), lineno=124, col_offset=29), Name('value', Load(), lineno=124, col_offset=36)], [], None, None, lineno=124, col_offset=12), lineno=124, col_offset=12), Return(Num(1, lineno=125, col_offset=19), lineno=125, col_offset=12)], lineno=115, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('RemoveFile', arguments([Name('self', Param(), lineno=127, col_offset=19)], None, None, []), [Expr(Str('\n        Removes the user config file from disk if it exists.\n        ', lineno=130, col_offset=-1), lineno=130, col_offset=-1), If(Call(Attribute(Attribute(Name('os', Load(), lineno=131, col_offset=11), 'path', Load(), lineno=131, col_offset=11), 'exists', Load(), lineno=131, col_offset=11), [Attribute(Name('self', Load(), lineno=131, col_offset=26), 'file', Load(), lineno=131, col_offset=26)], [], None, None, lineno=131, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=132, col_offset=12), 'remove', Load(), lineno=132, col_offset=12), [Attribute(Name('self', Load(), lineno=132, col_offset=22), 'file', Load(), lineno=132, col_offset=22)], [], None, None, lineno=132, col_offset=12), lineno=132, col_offset=12)], [], lineno=131, col_offset=8)], [], lineno=127, col_offset=4), FunctionDef('Save', arguments([Name('self', Param(), lineno=134, col_offset=13)], None, None, []), [Expr(Str("Update user configuration file.\n\n        Remove empty sections. If resulting config isn't empty, write the file\n        to disk. If config is empty, remove the file from disk if it exists.\n\n        ", lineno=140, col_offset=-1), lineno=140, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=141, col_offset=15), 'IsEmpty', Load(), lineno=141, col_offset=15), [], [], None, None, lineno=141, col_offset=15), lineno=141, col_offset=11), [Assign([Name('fname', Store(), lineno=142, col_offset=12)], Attribute(Name('self', Load(), lineno=142, col_offset=20), 'file', Load(), lineno=142, col_offset=20), lineno=142, col_offset=12), TryExcept([Assign([Name('cfgFile', Store(), lineno=144, col_offset=16)], Call(Name('open', Load(), lineno=144, col_offset=26), [Name('fname', Load(), lineno=144, col_offset=31), Str('w', lineno=144, col_offset=38)], [], None, None, lineno=144, col_offset=26), lineno=144, col_offset=16)], [ExceptHandler(Name('IOError', Load(), lineno=145, col_offset=19), None, [Expr(Call(Attribute(Name('os', Load(), lineno=146, col_offset=16), 'unlink', Load(), lineno=146, col_offset=16), [Name('fname', Load(), lineno=146, col_offset=26)], [], None, None, lineno=146, col_offset=16), lineno=146, col_offset=16), Assign([Name('cfgFile', Store(), lineno=147, col_offset=16)], Call(Name('open', Load(), lineno=147, col_offset=26), [Name('fname', Load(), lineno=147, col_offset=31), Str('w', lineno=147, col_offset=38)], [], None, None, lineno=147, col_offset=26), lineno=147, col_offset=16)], lineno=145, col_offset=12)], [], lineno=143, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=12), 'write', Load(), lineno=148, col_offset=12), [Name('cfgFile', Load(), lineno=148, col_offset=23)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=150, col_offset=12), 'RemoveFile', Load(), lineno=150, col_offset=12), [], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=12)], lineno=141, col_offset=8)], [], lineno=134, col_offset=4)], [], lineno=71, col_offset=0), ClassDef('IdleConf', [], [Expr(Str('\n    holds config parsers for all idle config files:\n    default config files\n        (idle install dir)/config-main.def\n        (idle install dir)/config-extensions.def\n        (idle install dir)/config-highlight.def\n        (idle install dir)/config-keys.def\n    user config  files\n        (user home dir)/.idlerc/config-main.cfg\n        (user home dir)/.idlerc/config-extensions.cfg\n        (user home dir)/.idlerc/config-highlight.cfg\n        (user home dir)/.idlerc/config-keys.cfg\n    ', lineno=165, col_offset=-1), lineno=165, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=166, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=167, col_offset=8), 'defaultCfg', Store(), lineno=167, col_offset=8)], Dict([], [], lineno=167, col_offset=24), lineno=167, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=168, col_offset=8), 'userCfg', Store(), lineno=168, col_offset=8)], Dict([], [], lineno=168, col_offset=21), lineno=168, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=169, col_offset=8), 'cfg', Store(), lineno=169, col_offset=8)], Dict([], [], lineno=169, col_offset=17), lineno=169, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=170, col_offset=8), 'CreateConfigHandlers', Load(), lineno=170, col_offset=8), [], [], None, None, lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=171, col_offset=8), 'LoadCfgFiles', Load(), lineno=171, col_offset=8), [], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8)], [], lineno=166, col_offset=4), FunctionDef('CreateConfigHandlers', arguments([Name('self', Param(), lineno=174, col_offset=29)], None, None, []), [Expr(Str('\n        set up a dictionary of config parsers for default and user\n        configurations respectively\n        ', lineno=178, col_offset=-1), lineno=178, col_offset=-1), If(Compare(Name('__name__', Load(), lineno=180, col_offset=11), [NotEq()], [Str('__main__', lineno=180, col_offset=23)], lineno=180, col_offset=11), [Assign([Name('idleDir', Store(), lineno=181, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=181, col_offset=20), 'path', Load(), lineno=181, col_offset=20), 'dirname', Load(), lineno=181, col_offset=20), [Name('__file__', Load(), lineno=181, col_offset=36)], [], None, None, lineno=181, col_offset=20), lineno=181, col_offset=12)], [Assign([Name('idleDir', Store(), lineno=183, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=183, col_offset=20), 'path', Load(), lineno=183, col_offset=20), 'abspath', Load(), lineno=183, col_offset=20), [Subscript(Attribute(Name('sys', Load(), lineno=183, col_offset=36), 'path', Load(), lineno=183, col_offset=36), Index(Num(0, lineno=183, col_offset=45)), Load(), lineno=183, col_offset=36)], [], None, None, lineno=183, col_offset=20), lineno=183, col_offset=12)], lineno=180, col_offset=8), Assign([Name('userDir', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=184, col_offset=16), 'GetUserCfgDir', Load(), lineno=184, col_offset=16), [], [], None, None, lineno=184, col_offset=16), lineno=184, col_offset=8), Assign([Name('configTypes', Store(), lineno=185, col_offset=8)], Tuple([Str('main', lineno=185, col_offset=21), Str('extensions', lineno=185, col_offset=28), Str('highlight', lineno=185, col_offset=41), Str('keys', lineno=185, col_offset=53)], Load(), lineno=185, col_offset=21), lineno=185, col_offset=8), Assign([Name('defCfgFiles', Store(), lineno=186, col_offset=8)], Dict([], [], lineno=186, col_offset=20), lineno=186, col_offset=8), Assign([Name('usrCfgFiles', Store(), lineno=187, col_offset=8)], Dict([], [], lineno=187, col_offset=20), lineno=187, col_offset=8), For(Name('cfgType', Store(), lineno=188, col_offset=12), Name('configTypes', Load(), lineno=188, col_offset=23), [Assign([Subscript(Name('defCfgFiles', Load(), lineno=189, col_offset=12), Index(Name('cfgType', Load(), lineno=189, col_offset=24)), Store(), lineno=189, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=189, col_offset=33), 'path', Load(), lineno=189, col_offset=33), 'join', Load(), lineno=189, col_offset=33), [Name('idleDir', Load(), lineno=189, col_offset=46), BinOp(BinOp(Str('config-', lineno=189, col_offset=54), Add(), Name('cfgType', Load(), lineno=189, col_offset=64), lineno=189, col_offset=54), Add(), Str('.def', lineno=189, col_offset=72), lineno=189, col_offset=71)], [], None, None, lineno=189, col_offset=33), lineno=189, col_offset=12), Assign([Subscript(Name('usrCfgFiles', Load(), lineno=190, col_offset=12), Index(Name('cfgType', Load(), lineno=190, col_offset=24)), Store(), lineno=190, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=190, col_offset=33), 'path', Load(), lineno=190, col_offset=33), 'join', Load(), lineno=190, col_offset=33), [Name('userDir', Load(), lineno=190, col_offset=46), BinOp(BinOp(Str('config-', lineno=190, col_offset=54), Add(), Name('cfgType', Load(), lineno=190, col_offset=64), lineno=190, col_offset=54), Add(), Str('.cfg', lineno=190, col_offset=72), lineno=190, col_offset=71)], [], None, None, lineno=190, col_offset=33), lineno=190, col_offset=12)], [], lineno=188, col_offset=8), For(Name('cfgType', Store(), lineno=191, col_offset=12), Name('configTypes', Load(), lineno=191, col_offset=23), [Assign([Subscript(Attribute(Name('self', Load(), lineno=192, col_offset=12), 'defaultCfg', Load(), lineno=192, col_offset=12), Index(Name('cfgType', Load(), lineno=192, col_offset=28)), Store(), lineno=192, col_offset=12)], Call(Name('IdleConfParser', Load(), lineno=192, col_offset=37), [Subscript(Name('defCfgFiles', Load(), lineno=192, col_offset=52), Index(Name('cfgType', Load(), lineno=192, col_offset=64)), Load(), lineno=192, col_offset=52)], [], None, None, lineno=192, col_offset=37), lineno=192, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=193, col_offset=12), 'userCfg', Load(), lineno=193, col_offset=12), Index(Name('cfgType', Load(), lineno=193, col_offset=25)), Store(), lineno=193, col_offset=12)], Call(Name('IdleUserConfParser', Load(), lineno=193, col_offset=34), [Subscript(Name('usrCfgFiles', Load(), lineno=193, col_offset=53), Index(Name('cfgType', Load(), lineno=193, col_offset=65)), Load(), lineno=193, col_offset=53)], [], None, None, lineno=193, col_offset=34), lineno=193, col_offset=12)], [], lineno=191, col_offset=8)], [], lineno=174, col_offset=4), FunctionDef('GetUserCfgDir', arguments([Name('self', Param(), lineno=195, col_offset=22)], None, None, []), [Expr(Str('\n        Creates (if required) and returns a filesystem directory for storing\n        user config files.\n\n        ', lineno=200, col_offset=-1), lineno=200, col_offset=-1), Assign([Name('cfgDir', Store(), lineno=201, col_offset=8)], Str('.idlerc', lineno=201, col_offset=17), lineno=201, col_offset=8), Assign([Name('userDir', Store(), lineno=202, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=202, col_offset=18), 'path', Load(), lineno=202, col_offset=18), 'expanduser', Load(), lineno=202, col_offset=18), [Str('~', lineno=202, col_offset=37)], [], None, None, lineno=202, col_offset=18), lineno=202, col_offset=8), If(Compare(Name('userDir', Load(), lineno=203, col_offset=11), [NotEq()], [Str('~', lineno=203, col_offset=22)], lineno=203, col_offset=11), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=204, col_offset=19), 'path', Load(), lineno=204, col_offset=19), 'exists', Load(), lineno=204, col_offset=19), [Name('userDir', Load(), lineno=204, col_offset=34)], [], None, None, lineno=204, col_offset=19), lineno=204, col_offset=15), [Assign([Name('warn', Store(), lineno=205, col_offset=16)], BinOp(BinOp(Str('\n Warning: os.path.expanduser("~") points to\n ', lineno=205, col_offset=24), Add(), Name('userDir', Load(), lineno=206, col_offset=24), lineno=205, col_offset=24), Add(), Str(',\n but the path does not exist.\n', lineno=206, col_offset=32), lineno=206, col_offset=31), lineno=205, col_offset=16), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=208, col_offset=20), 'stderr', Load(), lineno=208, col_offset=20), 'write', Load(), lineno=208, col_offset=20), [Name('warn', Load(), lineno=208, col_offset=37)], [], None, None, lineno=208, col_offset=20), lineno=208, col_offset=20)], [ExceptHandler(Name('IOError', Load(), lineno=209, col_offset=23), None, [Pass( lineno=210, col_offset=20)], lineno=209, col_offset=16)], [], lineno=207, col_offset=16), Assign([Name('userDir', Store(), lineno=211, col_offset=16)], Str('~', lineno=211, col_offset=26), lineno=211, col_offset=16)], [], lineno=204, col_offset=12)], [], lineno=203, col_offset=8), If(Compare(Name('userDir', Load(), lineno=212, col_offset=11), [Eq()], [Str('~', lineno=212, col_offset=22)], lineno=212, col_offset=11), [Assign([Name('userDir', Store(), lineno=214, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=214, col_offset=22), 'getcwd', Load(), lineno=214, col_offset=22), [], [], None, None, lineno=214, col_offset=22), lineno=214, col_offset=12)], [], lineno=212, col_offset=8), Assign([Name('userDir', Store(), lineno=215, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=215, col_offset=18), 'path', Load(), lineno=215, col_offset=18), 'join', Load(), lineno=215, col_offset=18), [Name('userDir', Load(), lineno=215, col_offset=31), Name('cfgDir', Load(), lineno=215, col_offset=40)], [], None, None, lineno=215, col_offset=18), lineno=215, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=216, col_offset=15), 'path', Load(), lineno=216, col_offset=15), 'exists', Load(), lineno=216, col_offset=15), [Name('userDir', Load(), lineno=216, col_offset=30)], [], None, None, lineno=216, col_offset=15), lineno=216, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=218, col_offset=16), 'mkdir', Load(), lineno=218, col_offset=16), [Name('userDir', Load(), lineno=218, col_offset=25)], [], None, None, lineno=218, col_offset=16), lineno=218, col_offset=16)], [ExceptHandler(Tuple([Name('OSError', Load(), lineno=219, col_offset=20), Name('IOError', Load(), lineno=219, col_offset=29)], Load(), lineno=219, col_offset=20), None, [Assign([Name('warn', Store(), lineno=220, col_offset=16)], BinOp(BinOp(Str('\n Warning: unable to create user config directory\n', lineno=220, col_offset=24), Add(), Name('userDir', Load(), lineno=221, col_offset=24), lineno=220, col_offset=24), Add(), Str('\n Check path and permissions.\n Exiting!\n\n', lineno=221, col_offset=32), lineno=221, col_offset=31), lineno=220, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=222, col_offset=16), 'stderr', Load(), lineno=222, col_offset=16), 'write', Load(), lineno=222, col_offset=16), [Name('warn', Load(), lineno=222, col_offset=33)], [], None, None, lineno=222, col_offset=16), lineno=222, col_offset=16), Raise(Name('SystemExit', Load(), lineno=223, col_offset=22), None, None, lineno=223, col_offset=16)], lineno=219, col_offset=12)], [], lineno=217, col_offset=12)], [], lineno=216, col_offset=8), Return(Name('userDir', Load(), lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('GetOption', arguments([Name('self', Param(), lineno=226, col_offset=18), Name('configType', Param(), lineno=226, col_offset=24), Name('section', Param(), lineno=226, col_offset=36), Name('option', Param(), lineno=226, col_offset=45), Name('default', Param(), lineno=226, col_offset=53), Name('type', Param(), lineno=226, col_offset=67), Name('warn_on_default', Param(), lineno=227, col_offset=18), Name('raw', Param(), lineno=227, col_offset=40)], None, None, [Name('None', Load(), lineno=226, col_offset=61), Name('None', Load(), lineno=226, col_offset=72), Name('True', Load(), lineno=227, col_offset=34), Name('False', Load(), lineno=227, col_offset=44)]), [Expr(Str("\n        Get an option value for given config type and given general\n        configuration section/option or return a default. If type is specified,\n        return as type. Firstly the user configuration is checked, with a\n        fallback to the default configuration, and a final 'catch all'\n        fallback to a useable passed-in default if the option isn't present in\n        either the user or the default configuration.\n        configType must be one of ('main','extensions','highlight','keys')\n        If a default is returned, and warn_on_default is True, a warning is\n        printed to stderr.\n\n        ", lineno=239, col_offset=-1), lineno=239, col_offset=-1), If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=240, col_offset=11), 'userCfg', Load(), lineno=240, col_offset=11), Index(Name('configType', Load(), lineno=240, col_offset=24)), Load(), lineno=240, col_offset=11), 'has_option', Load(), lineno=240, col_offset=11), [Name('section', Load(), lineno=240, col_offset=47), Name('option', Load(), lineno=240, col_offset=55)], [], None, None, lineno=240, col_offset=11), [Return(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=241, col_offset=19), 'userCfg', Load(), lineno=241, col_offset=19), Index(Name('configType', Load(), lineno=241, col_offset=32)), Load(), lineno=241, col_offset=19), 'Get', Load(), lineno=241, col_offset=19), [Name('section', Load(), lineno=241, col_offset=48), Name('option', Load(), lineno=241, col_offset=57)], [keyword('type', Name('type', Load(), lineno=242, col_offset=53)), keyword('raw', Name('raw', Load(), lineno=242, col_offset=63))], None, None, lineno=241, col_offset=19), lineno=241, col_offset=12)], [If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=243, col_offset=13), 'defaultCfg', Load(), lineno=243, col_offset=13), Index(Name('configType', Load(), lineno=243, col_offset=29)), Load(), lineno=243, col_offset=13), 'has_option', Load(), lineno=243, col_offset=13), [Name('section', Load(), lineno=243, col_offset=52), Name('option', Load(), lineno=243, col_offset=60)], [], None, None, lineno=243, col_offset=13), [Return(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=244, col_offset=19), 'defaultCfg', Load(), lineno=244, col_offset=19), Index(Name('configType', Load(), lineno=244, col_offset=35)), Load(), lineno=244, col_offset=19), 'Get', Load(), lineno=244, col_offset=19), [Name('section', Load(), lineno=244, col_offset=51), Name('option', Load(), lineno=244, col_offset=60)], [keyword('type', Name('type', Load(), lineno=245, col_offset=56)), keyword('raw', Name('raw', Load(), lineno=245, col_offset=66))], None, None, lineno=244, col_offset=19), lineno=244, col_offset=12)], [If(Name('warn_on_default', Load(), lineno=247, col_offset=15), [Assign([Name('warning', Store(), lineno=248, col_offset=16)], BinOp(Str('\n Warning: configHandler.py - IdleConf.GetOption -\n problem retrieving configuration option %r\n from section %r.\n returning default value: %r\n', lineno=248, col_offset=27), Mod(), Tuple([Name('option', Load(), lineno=252, col_offset=28), Name('section', Load(), lineno=252, col_offset=36), Name('default', Load(), lineno=252, col_offset=45)], Load(), lineno=252, col_offset=28), lineno=248, col_offset=27), lineno=248, col_offset=16), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=254, col_offset=20), 'stderr', Load(), lineno=254, col_offset=20), 'write', Load(), lineno=254, col_offset=20), [Name('warning', Load(), lineno=254, col_offset=37)], [], None, None, lineno=254, col_offset=20), lineno=254, col_offset=20)], [ExceptHandler(Name('IOError', Load(), lineno=255, col_offset=23), None, [Pass( lineno=256, col_offset=20)], lineno=255, col_offset=16)], [], lineno=253, col_offset=16)], [], lineno=247, col_offset=12), Return(Name('default', Load(), lineno=257, col_offset=19), lineno=257, col_offset=12)], lineno=243, col_offset=13)], lineno=240, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('SetOption', arguments([Name('self', Param(), lineno=259, col_offset=18), Name('configType', Param(), lineno=259, col_offset=24), Name('section', Param(), lineno=259, col_offset=36), Name('option', Param(), lineno=259, col_offset=45), Name('value', Param(), lineno=259, col_offset=53)], None, None, []), [Expr(Str("In user's config file, set section's option to value.\n\n        ", lineno=262, col_offset=-1), lineno=262, col_offset=-1), Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'userCfg', Load(), lineno=263, col_offset=8), Index(Name('configType', Load(), lineno=263, col_offset=21)), Load(), lineno=263, col_offset=8), 'SetOption', Load(), lineno=263, col_offset=8), [Name('section', Load(), lineno=263, col_offset=43), Name('option', Load(), lineno=263, col_offset=52), Name('value', Load(), lineno=263, col_offset=60)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8)], [], lineno=259, col_offset=4), FunctionDef('GetSectionList', arguments([Name('self', Param(), lineno=265, col_offset=23), Name('configSet', Param(), lineno=265, col_offset=29), Name('configType', Param(), lineno=265, col_offset=40)], None, None, []), [Expr(Str("\n        Get a list of sections from either the user or default config for\n        the given config type.\n        configSet must be either 'user' or 'default'\n        configType must be one of ('main','extensions','highlight','keys')\n        ", lineno=271, col_offset=-1), lineno=271, col_offset=-1), If(UnaryOp(Not(), Compare(Name('configType', Load(), lineno=272, col_offset=16), [In()], [Tuple([Str('main', lineno=272, col_offset=31), Str('extensions', lineno=272, col_offset=38), Str('highlight', lineno=272, col_offset=51), Str('keys', lineno=272, col_offset=63)], Load(), lineno=272, col_offset=31)], lineno=272, col_offset=16), lineno=272, col_offset=11), [Raise(Name('InvalidConfigType', Load(), lineno=273, col_offset=18), Str('Invalid configType specified', lineno=273, col_offset=37), None, lineno=273, col_offset=12)], [], lineno=272, col_offset=8), If(Compare(Name('configSet', Load(), lineno=274, col_offset=11), [Eq()], [Str('user', lineno=274, col_offset=24)], lineno=274, col_offset=11), [Assign([Name('cfgParser', Store(), lineno=275, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=275, col_offset=22), 'userCfg', Load(), lineno=275, col_offset=22), Index(Name('configType', Load(), lineno=275, col_offset=35)), Load(), lineno=275, col_offset=22), lineno=275, col_offset=12)], [If(Compare(Name('configSet', Load(), lineno=276, col_offset=13), [Eq()], [Str('default', lineno=276, col_offset=26)], lineno=276, col_offset=13), [Assign([Name('cfgParser', Store(), lineno=277, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=277, col_offset=22), 'defaultCfg', Load(), lineno=277, col_offset=22), Index(Name('configType', Load(), lineno=277, col_offset=38)), Load(), lineno=277, col_offset=22), lineno=277, col_offset=12)], [Raise(Name('InvalidConfigSet', Load(), lineno=279, col_offset=18), Str('Invalid configSet specified', lineno=279, col_offset=36), None, lineno=279, col_offset=12)], lineno=276, col_offset=13)], lineno=274, col_offset=8), Return(Call(Attribute(Name('cfgParser', Load(), lineno=280, col_offset=15), 'sections', Load(), lineno=280, col_offset=15), [], [], None, None, lineno=280, col_offset=15), lineno=280, col_offset=8)], [], lineno=265, col_offset=4), FunctionDef('GetHighlight', arguments([Name('self', Param(), lineno=282, col_offset=21), Name('theme', Param(), lineno=282, col_offset=27), Name('element', Param(), lineno=282, col_offset=34), Name('fgBg', Param(), lineno=282, col_offset=43)], None, None, [Name('None', Load(), lineno=282, col_offset=48)]), [Expr(Str("\n        return individual highlighting theme elements.\n        fgBg - string ('fg'or'bg') or None, if None return a dictionary\n        containing fg and bg colours (appropriate for passing to Tkinter in,\n        e.g., a tag_config call), otherwise fg or bg colour only as specified.\n        ", lineno=288, col_offset=-1), lineno=288, col_offset=-1), If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=289, col_offset=11), 'defaultCfg', Load(), lineno=289, col_offset=11), Index(Str('highlight', lineno=289, col_offset=27)), Load(), lineno=289, col_offset=11), 'has_section', Load(), lineno=289, col_offset=11), [Name('theme', Load(), lineno=289, col_offset=52)], [], None, None, lineno=289, col_offset=11), [Assign([Name('themeDict', Store(), lineno=290, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=290, col_offset=22), 'GetThemeDict', Load(), lineno=290, col_offset=22), [Str('default', lineno=290, col_offset=40), Name('theme', Load(), lineno=290, col_offset=50)], [], None, None, lineno=290, col_offset=22), lineno=290, col_offset=12)], [Assign([Name('themeDict', Store(), lineno=292, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=292, col_offset=22), 'GetThemeDict', Load(), lineno=292, col_offset=22), [Str('user', lineno=292, col_offset=40), Name('theme', Load(), lineno=292, col_offset=47)], [], None, None, lineno=292, col_offset=22), lineno=292, col_offset=12)], lineno=289, col_offset=8), Assign([Name('fore', Store(), lineno=293, col_offset=8)], Subscript(Name('themeDict', Load(), lineno=293, col_offset=13), Index(BinOp(Name('element', Load(), lineno=293, col_offset=23), Add(), Str('-foreground', lineno=293, col_offset=31), lineno=293, col_offset=23)), Load(), lineno=293, col_offset=13), lineno=293, col_offset=8), If(Compare(Name('element', Load(), lineno=294, col_offset=11), [Eq()], [Str('cursor', lineno=294, col_offset=20)], lineno=294, col_offset=11), [Assign([Name('back', Store(), lineno=295, col_offset=12)], Subscript(Name('themeDict', Load(), lineno=295, col_offset=17), Index(Str('normal-background', lineno=295, col_offset=27)), Load(), lineno=295, col_offset=17), lineno=295, col_offset=12)], [Assign([Name('back', Store(), lineno=297, col_offset=12)], Subscript(Name('themeDict', Load(), lineno=297, col_offset=17), Index(BinOp(Name('element', Load(), lineno=297, col_offset=27), Add(), Str('-background', lineno=297, col_offset=35), lineno=297, col_offset=27)), Load(), lineno=297, col_offset=17), lineno=297, col_offset=12)], lineno=294, col_offset=8), Assign([Name('highlight', Store(), lineno=298, col_offset=8)], Dict([Str('foreground', lineno=298, col_offset=19), Str('background', lineno=298, col_offset=38)], [Name('fore', Load(), lineno=298, col_offset=33), Name('back', Load(), lineno=298, col_offset=52)], lineno=298, col_offset=18), lineno=298, col_offset=8), If(UnaryOp(Not(), Name('fgBg', Load(), lineno=299, col_offset=15), lineno=299, col_offset=11), [Return(Name('highlight', Load(), lineno=300, col_offset=19), lineno=300, col_offset=12)], [If(Compare(Name('fgBg', Load(), lineno=302, col_offset=15), [Eq()], [Str('fg', lineno=302, col_offset=23)], lineno=302, col_offset=15), [Return(Subscript(Name('highlight', Load(), lineno=303, col_offset=23), Index(Str('foreground', lineno=303, col_offset=33)), Load(), lineno=303, col_offset=23), lineno=303, col_offset=16)], [], lineno=302, col_offset=12), If(Compare(Name('fgBg', Load(), lineno=304, col_offset=15), [Eq()], [Str('bg', lineno=304, col_offset=23)], lineno=304, col_offset=15), [Return(Subscript(Name('highlight', Load(), lineno=305, col_offset=23), Index(Str('background', lineno=305, col_offset=33)), Load(), lineno=305, col_offset=23), lineno=305, col_offset=16)], [Raise(Name('InvalidFgBg', Load(), lineno=307, col_offset=22), Str('Invalid fgBg specified', lineno=307, col_offset=35), None, lineno=307, col_offset=16)], lineno=304, col_offset=12)], lineno=299, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('GetThemeDict', arguments([Name('self', Param(), lineno=309, col_offset=21), Name('type', Param(), lineno=309, col_offset=26), Name('themeName', Param(), lineno=309, col_offset=31)], None, None, []), [Expr(Str("\n        type - string, 'default' or 'user' theme type\n        themeName - string, theme name\n        Returns a dictionary which holds {option:value} for each element\n        in the specified theme. Values are loaded over a set of ultimate last\n        fallback defaults to guarantee that all theme elements are present in\n        a newly created theme.\n        ", lineno=317, col_offset=-1), lineno=317, col_offset=-1), If(Compare(Name('type', Load(), lineno=318, col_offset=11), [Eq()], [Str('user', lineno=318, col_offset=19)], lineno=318, col_offset=11), [Assign([Name('cfgParser', Store(), lineno=319, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=319, col_offset=22), 'userCfg', Load(), lineno=319, col_offset=22), Index(Str('highlight', lineno=319, col_offset=35)), Load(), lineno=319, col_offset=22), lineno=319, col_offset=12)], [If(Compare(Name('type', Load(), lineno=320, col_offset=13), [Eq()], [Str('default', lineno=320, col_offset=21)], lineno=320, col_offset=13), [Assign([Name('cfgParser', Store(), lineno=321, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=321, col_offset=22), 'defaultCfg', Load(), lineno=321, col_offset=22), Index(Str('highlight', lineno=321, col_offset=38)), Load(), lineno=321, col_offset=22), lineno=321, col_offset=12)], [Raise(Name('InvalidTheme', Load(), lineno=323, col_offset=18), Str('Invalid theme type specified', lineno=323, col_offset=32), None, lineno=323, col_offset=12)], lineno=320, col_offset=13)], lineno=318, col_offset=8), Assign([Name('theme', Store(), lineno=328, col_offset=8)], Dict([Str('normal-foreground', lineno=328, col_offset=16), Str('normal-background', lineno=329, col_offset=16), Str('keyword-foreground', lineno=330, col_offset=16), Str('keyword-background', lineno=331, col_offset=16), Str('builtin-foreground', lineno=332, col_offset=16), Str('builtin-background', lineno=333, col_offset=16), Str('comment-foreground', lineno=334, col_offset=16), Str('comment-background', lineno=335, col_offset=16), Str('string-foreground', lineno=336, col_offset=16), Str('string-background', lineno=337, col_offset=16), Str('definition-foreground', lineno=338, col_offset=16), Str('definition-background', lineno=339, col_offset=16), Str('hilite-foreground', lineno=340, col_offset=16), Str('hilite-background', lineno=341, col_offset=16), Str('break-foreground', lineno=342, col_offset=16), Str('break-background', lineno=343, col_offset=16), Str('hit-foreground', lineno=344, col_offset=16), Str('hit-background', lineno=345, col_offset=16), Str('error-foreground', lineno=346, col_offset=16), Str('error-background', lineno=347, col_offset=16), Str('cursor-foreground', lineno=349, col_offset=16), Str('stdout-foreground', lineno=351, col_offset=16), Str('stdout-background', lineno=352, col_offset=16), Str('stderr-foreground', lineno=353, col_offset=16), Str('stderr-background', lineno=354, col_offset=16), Str('console-foreground', lineno=355, col_offset=16), Str('console-background', lineno=356, col_offset=16)], [Str('#000000', lineno=328, col_offset=36), Str('#ffffff', lineno=329, col_offset=36), Str('#000000', lineno=330, col_offset=37), Str('#ffffff', lineno=331, col_offset=37), Str('#000000', lineno=332, col_offset=37), Str('#ffffff', lineno=333, col_offset=37), Str('#000000', lineno=334, col_offset=37), Str('#ffffff', lineno=335, col_offset=37), Str('#000000', lineno=336, col_offset=36), Str('#ffffff', lineno=337, col_offset=36), Str('#000000', lineno=338, col_offset=40), Str('#ffffff', lineno=339, col_offset=40), Str('#000000', lineno=340, col_offset=36), Str('gray', lineno=341, col_offset=36), Str('#ffffff', lineno=342, col_offset=35), Str('#000000', lineno=343, col_offset=35), Str('#ffffff', lineno=344, col_offset=33), Str('#000000', lineno=345, col_offset=33), Str('#ffffff', lineno=346, col_offset=35), Str('#000000', lineno=347, col_offset=35), Str('#000000', lineno=349, col_offset=36), Str('#000000', lineno=351, col_offset=36), Str('#ffffff', lineno=352, col_offset=36), Str('#000000', lineno=353, col_offset=36), Str('#ffffff', lineno=354, col_offset=36), Str('#000000', lineno=355, col_offset=37), Str('#ffffff', lineno=356, col_offset=37)], lineno=328, col_offset=14), lineno=328, col_offset=8), For(Name('element', Store(), lineno=357, col_offset=12), Call(Attribute(Name('theme', Load(), lineno=357, col_offset=23), 'keys', Load(), lineno=357, col_offset=23), [], [], None, None, lineno=357, col_offset=23), [If(UnaryOp(Not(), Call(Attribute(Name('cfgParser', Load(), lineno=358, col_offset=19), 'has_option', Load(), lineno=358, col_offset=19), [Name('themeName', Load(), lineno=358, col_offset=40), Name('element', Load(), lineno=358, col_offset=50)], [], None, None, lineno=358, col_offset=19), lineno=358, col_offset=15), [Assign([Name('warning', Store(), lineno=360, col_offset=16)], BinOp(Str('\n Warning: configHandler.py - IdleConf.GetThemeDict -\n problem retrieving theme element %r\n from theme %r.\n returning default value: %r\n', lineno=360, col_offset=25), Mod(), Tuple([Name('element', Load(), lineno=364, col_offset=28), Name('themeName', Load(), lineno=364, col_offset=37), Subscript(Name('theme', Load(), lineno=364, col_offset=48), Index(Name('element', Load(), lineno=364, col_offset=54)), Load(), lineno=364, col_offset=48)], Load(), lineno=364, col_offset=28), lineno=360, col_offset=25), lineno=360, col_offset=16), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=366, col_offset=20), 'stderr', Load(), lineno=366, col_offset=20), 'write', Load(), lineno=366, col_offset=20), [Name('warning', Load(), lineno=366, col_offset=37)], [], None, None, lineno=366, col_offset=20), lineno=366, col_offset=20)], [ExceptHandler(Name('IOError', Load(), lineno=367, col_offset=23), None, [Pass( lineno=368, col_offset=20)], lineno=367, col_offset=16)], [], lineno=365, col_offset=16)], [], lineno=358, col_offset=12), Assign([Name('colour', Store(), lineno=369, col_offset=12)], Call(Attribute(Name('cfgParser', Load(), lineno=369, col_offset=19), 'Get', Load(), lineno=369, col_offset=19), [Name('themeName', Load(), lineno=369, col_offset=33), Name('element', Load(), lineno=369, col_offset=43)], [keyword('default', Subscript(Name('theme', Load(), lineno=369, col_offset=59), Index(Name('element', Load(), lineno=369, col_offset=65)), Load(), lineno=369, col_offset=59))], None, None, lineno=369, col_offset=19), lineno=369, col_offset=12), Assign([Subscript(Name('theme', Load(), lineno=370, col_offset=12), Index(Name('element', Load(), lineno=370, col_offset=18)), Store(), lineno=370, col_offset=12)], Name('colour', Load(), lineno=370, col_offset=27), lineno=370, col_offset=12)], [], lineno=357, col_offset=8), Return(Name('theme', Load(), lineno=371, col_offset=15), lineno=371, col_offset=8)], [], lineno=309, col_offset=4), FunctionDef('CurrentTheme', arguments([Name('self', Param(), lineno=373, col_offset=21)], None, None, []), [Expr(Str('\n        Returns the name of the currently active theme\n        ', lineno=376, col_offset=-1), lineno=376, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=377, col_offset=15), 'GetOption', Load(), lineno=377, col_offset=15), [Str('main', lineno=377, col_offset=30), Str('Theme', lineno=377, col_offset=37), Str('name', lineno=377, col_offset=45)], [keyword('default', Str('', lineno=377, col_offset=60))], None, None, lineno=377, col_offset=15), lineno=377, col_offset=8)], [], lineno=373, col_offset=4), FunctionDef('CurrentKeys', arguments([Name('self', Param(), lineno=379, col_offset=20)], None, None, []), [Expr(Str('\n        Returns the name of the currently active key set\n        ', lineno=382, col_offset=-1), lineno=382, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=383, col_offset=15), 'GetOption', Load(), lineno=383, col_offset=15), [Str('main', lineno=383, col_offset=30), Str('Keys', lineno=383, col_offset=37), Str('name', lineno=383, col_offset=44)], [keyword('default', Str('', lineno=383, col_offset=59))], None, None, lineno=383, col_offset=15), lineno=383, col_offset=8)], [], lineno=379, col_offset=4), FunctionDef('GetExtensions', arguments([Name('self', Param(), lineno=385, col_offset=22), Name('active_only', Param(), lineno=385, col_offset=28), Name('editor_only', Param(), lineno=385, col_offset=46), Name('shell_only', Param(), lineno=385, col_offset=65)], None, None, [Name('True', Load(), lineno=385, col_offset=40), Name('False', Load(), lineno=385, col_offset=58), Name('False', Load(), lineno=385, col_offset=76)]), [Expr(Str('\n        Gets a list of all idle extensions declared in the config files.\n        active_only - boolean, if true only return active (enabled) extensions\n        ', lineno=389, col_offset=-1), lineno=389, col_offset=-1), Assign([Name('extns', Store(), lineno=390, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=390, col_offset=14), 'RemoveKeyBindNames', Load(), lineno=390, col_offset=14), [Call(Attribute(Name('self', Load(), lineno=391, col_offset=16), 'GetSectionList', Load(), lineno=391, col_offset=16), [Str('default', lineno=391, col_offset=36), Str('extensions', lineno=391, col_offset=46)], [], None, None, lineno=391, col_offset=16)], [], None, None, lineno=390, col_offset=14), lineno=390, col_offset=8), Assign([Name('userExtns', Store(), lineno=392, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=392, col_offset=18), 'RemoveKeyBindNames', Load(), lineno=392, col_offset=18), [Call(Attribute(Name('self', Load(), lineno=393, col_offset=16), 'GetSectionList', Load(), lineno=393, col_offset=16), [Str('user', lineno=393, col_offset=36), Str('extensions', lineno=393, col_offset=43)], [], None, None, lineno=393, col_offset=16)], [], None, None, lineno=392, col_offset=18), lineno=392, col_offset=8), For(Name('extn', Store(), lineno=394, col_offset=12), Name('userExtns', Load(), lineno=394, col_offset=20), [If(Compare(Name('extn', Load(), lineno=395, col_offset=15), [NotIn()], [Name('extns', Load(), lineno=395, col_offset=27)], lineno=395, col_offset=15), [Expr(Call(Attribute(Name('extns', Load(), lineno=396, col_offset=16), 'append', Load(), lineno=396, col_offset=16), [Name('extn', Load(), lineno=396, col_offset=29)], [], None, None, lineno=396, col_offset=16), lineno=396, col_offset=16)], [], lineno=395, col_offset=12)], [], lineno=394, col_offset=8), If(Name('active_only', Load(), lineno=397, col_offset=11), [Assign([Name('activeExtns', Store(), lineno=398, col_offset=12)], List([], Load(), lineno=398, col_offset=24), lineno=398, col_offset=12), For(Name('extn', Store(), lineno=399, col_offset=16), Name('extns', Load(), lineno=399, col_offset=24), [If(Call(Attribute(Name('self', Load(), lineno=400, col_offset=19), 'GetOption', Load(), lineno=400, col_offset=19), [Str('extensions', lineno=400, col_offset=34), Name('extn', Load(), lineno=400, col_offset=48), Str('enable', lineno=400, col_offset=54)], [keyword('default', Name('True', Load(), lineno=400, col_offset=72)), keyword('type', Str('bool', lineno=401, col_offset=39))], None, None, lineno=400, col_offset=19), [If(BoolOp(Or(), [Name('editor_only', Load(), lineno=403, col_offset=23), Name('shell_only', Load(), lineno=403, col_offset=38)], lineno=403, col_offset=23), [If(Name('editor_only', Load(), lineno=404, col_offset=27), [Assign([Name('option', Store(), lineno=405, col_offset=28)], Str('enable_editor', lineno=405, col_offset=37), lineno=405, col_offset=28)], [Assign([Name('option', Store(), lineno=407, col_offset=28)], Str('enable_shell', lineno=407, col_offset=37), lineno=407, col_offset=28)], lineno=404, col_offset=24), If(Call(Attribute(Name('self', Load(), lineno=408, col_offset=27), 'GetOption', Load(), lineno=408, col_offset=27), [Str('extensions', lineno=408, col_offset=42), Name('extn', Load(), lineno=408, col_offset=56), Name('option', Load(), lineno=408, col_offset=61)], [keyword('default', Name('True', Load(), lineno=409, col_offset=50)), keyword('type', Str('bool', lineno=409, col_offset=61)), keyword('warn_on_default', Name('False', Load(), lineno=410, col_offset=58))], None, None, lineno=408, col_offset=27), [Expr(Call(Attribute(Name('activeExtns', Load(), lineno=411, col_offset=28), 'append', Load(), lineno=411, col_offset=28), [Name('extn', Load(), lineno=411, col_offset=47)], [], None, None, lineno=411, col_offset=28), lineno=411, col_offset=28)], [], lineno=408, col_offset=24)], [Expr(Call(Attribute(Name('activeExtns', Load(), lineno=413, col_offset=24), 'append', Load(), lineno=413, col_offset=24), [Name('extn', Load(), lineno=413, col_offset=43)], [], None, None, lineno=413, col_offset=24), lineno=413, col_offset=24)], lineno=403, col_offset=20)], [], lineno=400, col_offset=16)], [], lineno=399, col_offset=12), Return(Name('activeExtns', Load(), lineno=414, col_offset=19), lineno=414, col_offset=12)], [Return(Name('extns', Load(), lineno=416, col_offset=19), lineno=416, col_offset=12)], lineno=397, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('RemoveKeyBindNames', arguments([Name('self', Param(), lineno=418, col_offset=27), Name('extnNameList', Param(), lineno=418, col_offset=32)], None, None, []), [Assign([Name('names', Store(), lineno=420, col_offset=8)], Name('extnNameList', Load(), lineno=420, col_offset=14), lineno=420, col_offset=8), Assign([Name('kbNameIndicies', Store(), lineno=421, col_offset=8)], List([], Load(), lineno=421, col_offset=23), lineno=421, col_offset=8), For(Name('name', Store(), lineno=422, col_offset=12), Name('names', Load(), lineno=422, col_offset=20), [If(Call(Attribute(Name('name', Load(), lineno=423, col_offset=15), 'endswith', Load(), lineno=423, col_offset=15), [Tuple([Str('_bindings', lineno=423, col_offset=30), Str('_cfgBindings', lineno=423, col_offset=43)], Load(), lineno=423, col_offset=30)], [], None, None, lineno=423, col_offset=15), [Expr(Call(Attribute(Name('kbNameIndicies', Load(), lineno=424, col_offset=16), 'append', Load(), lineno=424, col_offset=16), [Call(Attribute(Name('names', Load(), lineno=424, col_offset=38), 'index', Load(), lineno=424, col_offset=38), [Name('name', Load(), lineno=424, col_offset=50)], [], None, None, lineno=424, col_offset=38)], [], None, None, lineno=424, col_offset=16), lineno=424, col_offset=16)], [], lineno=423, col_offset=12)], [], lineno=422, col_offset=8), Expr(Call(Attribute(Name('kbNameIndicies', Load(), lineno=425, col_offset=8), 'sort', Load(), lineno=425, col_offset=8), [], [], None, None, lineno=425, col_offset=8), lineno=425, col_offset=8), Expr(Call(Attribute(Name('kbNameIndicies', Load(), lineno=426, col_offset=8), 'reverse', Load(), lineno=426, col_offset=8), [], [], None, None, lineno=426, col_offset=8), lineno=426, col_offset=8), For(Name('index', Store(), lineno=427, col_offset=12), Name('kbNameIndicies', Load(), lineno=427, col_offset=21), [Delete([Subscript(Name('names', Load(), lineno=428, col_offset=16), Index(Name('index', Load(), lineno=428, col_offset=22)), Del(), lineno=428, col_offset=16)], lineno=428, col_offset=12)], [], lineno=427, col_offset=8), Return(Name('names', Load(), lineno=429, col_offset=15), lineno=429, col_offset=8)], [], lineno=418, col_offset=4), FunctionDef('GetExtnNameForEvent', arguments([Name('self', Param(), lineno=431, col_offset=28), Name('virtualEvent', Param(), lineno=431, col_offset=33)], None, None, []), [Expr(Str("\n        Returns the name of the extension that virtualEvent is bound in, or\n        None if not bound in any extension.\n        virtualEvent - string, name of the virtual event to test for, without\n                       the enclosing '<< >>'\n        ", lineno=437, col_offset=-1), lineno=437, col_offset=-1), Assign([Name('extName', Store(), lineno=438, col_offset=8)], Name('None', Load(), lineno=438, col_offset=16), lineno=438, col_offset=8), Assign([Name('vEvent', Store(), lineno=439, col_offset=8)], BinOp(BinOp(Str('<<', lineno=439, col_offset=15), Add(), Name('virtualEvent', Load(), lineno=439, col_offset=20), lineno=439, col_offset=15), Add(), Str('>>', lineno=439, col_offset=33), lineno=439, col_offset=32), lineno=439, col_offset=8), For(Name('extn', Store(), lineno=440, col_offset=12), Call(Attribute(Name('self', Load(), lineno=440, col_offset=20), 'GetExtensions', Load(), lineno=440, col_offset=20), [], [keyword('active_only', Num(0, lineno=440, col_offset=51))], None, None, lineno=440, col_offset=20), [For(Name('event', Store(), lineno=441, col_offset=16), Call(Attribute(Call(Attribute(Name('self', Load(), lineno=441, col_offset=25), 'GetExtensionKeys', Load(), lineno=441, col_offset=25), [Name('extn', Load(), lineno=441, col_offset=47)], [], None, None, lineno=441, col_offset=25), 'keys', Load(), lineno=441, col_offset=25), [], [], None, None, lineno=441, col_offset=25), [If(Compare(Name('event', Load(), lineno=442, col_offset=19), [Eq()], [Name('vEvent', Load(), lineno=442, col_offset=28)], lineno=442, col_offset=19), [Assign([Name('extName', Store(), lineno=443, col_offset=20)], Name('extn', Load(), lineno=443, col_offset=28), lineno=443, col_offset=20)], [], lineno=442, col_offset=16)], [], lineno=441, col_offset=12)], [], lineno=440, col_offset=8), Return(Name('extName', Load(), lineno=444, col_offset=15), lineno=444, col_offset=8)], [], lineno=431, col_offset=4), FunctionDef('GetExtensionKeys', arguments([Name('self', Param(), lineno=446, col_offset=25), Name('extensionName', Param(), lineno=446, col_offset=30)], None, None, []), [Expr(Str('\n        returns a dictionary of the configurable keybindings for a particular\n        extension,as they exist in the dictionary returned by GetCurrentKeySet;\n        that is, where previously used bindings are disabled.\n        ', lineno=451, col_offset=-1), lineno=451, col_offset=-1), Assign([Name('keysName', Store(), lineno=452, col_offset=8)], BinOp(Name('extensionName', Load(), lineno=452, col_offset=17), Add(), Str('_cfgBindings', lineno=452, col_offset=31), lineno=452, col_offset=17), lineno=452, col_offset=8), Assign([Name('activeKeys', Store(), lineno=453, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=453, col_offset=19), 'GetCurrentKeySet', Load(), lineno=453, col_offset=19), [], [], None, None, lineno=453, col_offset=19), lineno=453, col_offset=8), Assign([Name('extKeys', Store(), lineno=454, col_offset=8)], Dict([], [], lineno=454, col_offset=16), lineno=454, col_offset=8), If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=455, col_offset=11), 'defaultCfg', Load(), lineno=455, col_offset=11), Index(Str('extensions', lineno=455, col_offset=27)), Load(), lineno=455, col_offset=11), 'has_section', Load(), lineno=455, col_offset=11), [Name('keysName', Load(), lineno=455, col_offset=53)], [], None, None, lineno=455, col_offset=11), [Assign([Name('eventNames', Store(), lineno=456, col_offset=12)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=456, col_offset=23), 'defaultCfg', Load(), lineno=456, col_offset=23), Index(Str('extensions', lineno=456, col_offset=39)), Load(), lineno=456, col_offset=23), 'GetOptionList', Load(), lineno=456, col_offset=23), [Name('keysName', Load(), lineno=456, col_offset=67)], [], None, None, lineno=456, col_offset=23), lineno=456, col_offset=12), For(Name('eventName', Store(), lineno=457, col_offset=16), Name('eventNames', Load(), lineno=457, col_offset=29), [Assign([Name('event', Store(), lineno=458, col_offset=16)], BinOp(BinOp(Str('<<', lineno=458, col_offset=22), Add(), Name('eventName', Load(), lineno=458, col_offset=27), lineno=458, col_offset=22), Add(), Str('>>', lineno=458, col_offset=37), lineno=458, col_offset=36), lineno=458, col_offset=16), Assign([Name('binding', Store(), lineno=459, col_offset=16)], Subscript(Name('activeKeys', Load(), lineno=459, col_offset=24), Index(Name('event', Load(), lineno=459, col_offset=35)), Load(), lineno=459, col_offset=24), lineno=459, col_offset=16), Assign([Subscript(Name('extKeys', Load(), lineno=460, col_offset=16), Index(Name('event', Load(), lineno=460, col_offset=24)), Store(), lineno=460, col_offset=16)], Name('binding', Load(), lineno=460, col_offset=31), lineno=460, col_offset=16)], [], lineno=457, col_offset=12)], [], lineno=455, col_offset=8), Return(Name('extKeys', Load(), lineno=461, col_offset=15), lineno=461, col_offset=8)], [], lineno=446, col_offset=4), FunctionDef('__GetRawExtensionKeys', arguments([Name('self', Param(), lineno=463, col_offset=30), Name('extensionName', Param(), lineno=463, col_offset=35)], None, None, []), [Expr(Str('\n        returns a dictionary of the configurable keybindings for a particular\n        extension, as defined in the configuration files, or an empty dictionary\n        if no bindings are found\n        ', lineno=468, col_offset=-1), lineno=468, col_offset=-1), Assign([Name('keysName', Store(), lineno=469, col_offset=8)], BinOp(Name('extensionName', Load(), lineno=469, col_offset=17), Add(), Str('_cfgBindings', lineno=469, col_offset=31), lineno=469, col_offset=17), lineno=469, col_offset=8), Assign([Name('extKeys', Store(), lineno=470, col_offset=8)], Dict([], [], lineno=470, col_offset=16), lineno=470, col_offset=8), If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=471, col_offset=11), 'defaultCfg', Load(), lineno=471, col_offset=11), Index(Str('extensions', lineno=471, col_offset=27)), Load(), lineno=471, col_offset=11), 'has_section', Load(), lineno=471, col_offset=11), [Name('keysName', Load(), lineno=471, col_offset=53)], [], None, None, lineno=471, col_offset=11), [Assign([Name('eventNames', Store(), lineno=472, col_offset=12)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=472, col_offset=23), 'defaultCfg', Load(), lineno=472, col_offset=23), Index(Str('extensions', lineno=472, col_offset=39)), Load(), lineno=472, col_offset=23), 'GetOptionList', Load(), lineno=472, col_offset=23), [Name('keysName', Load(), lineno=472, col_offset=67)], [], None, None, lineno=472, col_offset=23), lineno=472, col_offset=12), For(Name('eventName', Store(), lineno=473, col_offset=16), Name('eventNames', Load(), lineno=473, col_offset=29), [Assign([Name('binding', Store(), lineno=474, col_offset=16)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=474, col_offset=24), 'GetOption', Load(), lineno=474, col_offset=24), [Str('extensions', lineno=474, col_offset=39), Name('keysName', Load(), lineno=474, col_offset=52), Name('eventName', Load(), lineno=475, col_offset=24)], [keyword('default', Str('', lineno=475, col_offset=42))], None, None, lineno=474, col_offset=24), 'split', Load(), lineno=474, col_offset=24), [], [], None, None, lineno=474, col_offset=24), lineno=474, col_offset=16), Assign([Name('event', Store(), lineno=476, col_offset=16)], BinOp(BinOp(Str('<<', lineno=476, col_offset=22), Add(), Name('eventName', Load(), lineno=476, col_offset=27), lineno=476, col_offset=22), Add(), Str('>>', lineno=476, col_offset=37), lineno=476, col_offset=36), lineno=476, col_offset=16), Assign([Subscript(Name('extKeys', Load(), lineno=477, col_offset=16), Index(Name('event', Load(), lineno=477, col_offset=24)), Store(), lineno=477, col_offset=16)], Name('binding', Load(), lineno=477, col_offset=31), lineno=477, col_offset=16)], [], lineno=473, col_offset=12)], [], lineno=471, col_offset=8), Return(Name('extKeys', Load(), lineno=478, col_offset=15), lineno=478, col_offset=8)], [], lineno=463, col_offset=4), FunctionDef('GetExtensionBindings', arguments([Name('self', Param(), lineno=480, col_offset=29), Name('extensionName', Param(), lineno=480, col_offset=34)], None, None, []), [Expr(Str('\n        Returns a dictionary of all the event bindings for a particular\n        extension. The configurable keybindings are returned as they exist in\n        the dictionary returned by GetCurrentKeySet; that is, where re-used\n        keybindings are disabled.\n        ', lineno=486, col_offset=-1), lineno=486, col_offset=-1), Assign([Name('bindsName', Store(), lineno=487, col_offset=8)], BinOp(Name('extensionName', Load(), lineno=487, col_offset=18), Add(), Str('_bindings', lineno=487, col_offset=32), lineno=487, col_offset=18), lineno=487, col_offset=8), Assign([Name('extBinds', Store(), lineno=488, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=488, col_offset=17), 'GetExtensionKeys', Load(), lineno=488, col_offset=17), [Name('extensionName', Load(), lineno=488, col_offset=39)], [], None, None, lineno=488, col_offset=17), lineno=488, col_offset=8), If(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=490, col_offset=11), 'defaultCfg', Load(), lineno=490, col_offset=11), Index(Str('extensions', lineno=490, col_offset=27)), Load(), lineno=490, col_offset=11), 'has_section', Load(), lineno=490, col_offset=11), [Name('bindsName', Load(), lineno=490, col_offset=53)], [], None, None, lineno=490, col_offset=11), [Assign([Name('eventNames', Store(), lineno=491, col_offset=12)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=491, col_offset=23), 'defaultCfg', Load(), lineno=491, col_offset=23), Index(Str('extensions', lineno=491, col_offset=39)), Load(), lineno=491, col_offset=23), 'GetOptionList', Load(), lineno=491, col_offset=23), [Name('bindsName', Load(), lineno=491, col_offset=67)], [], None, None, lineno=491, col_offset=23), lineno=491, col_offset=12), For(Name('eventName', Store(), lineno=492, col_offset=16), Name('eventNames', Load(), lineno=492, col_offset=29), [Assign([Name('binding', Store(), lineno=493, col_offset=16)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=493, col_offset=24), 'GetOption', Load(), lineno=493, col_offset=24), [Str('extensions', lineno=493, col_offset=39), Name('bindsName', Load(), lineno=493, col_offset=52), Name('eventName', Load(), lineno=494, col_offset=24)], [keyword('default', Str('', lineno=494, col_offset=42))], None, None, lineno=493, col_offset=24), 'split', Load(), lineno=493, col_offset=24), [], [], None, None, lineno=493, col_offset=24), lineno=493, col_offset=16), Assign([Name('event', Store(), lineno=495, col_offset=16)], BinOp(BinOp(Str('<<', lineno=495, col_offset=22), Add(), Name('eventName', Load(), lineno=495, col_offset=27), lineno=495, col_offset=22), Add(), Str('>>', lineno=495, col_offset=37), lineno=495, col_offset=36), lineno=495, col_offset=16), Assign([Subscript(Name('extBinds', Load(), lineno=496, col_offset=16), Index(Name('event', Load(), lineno=496, col_offset=25)), Store(), lineno=496, col_offset=16)], Name('binding', Load(), lineno=496, col_offset=32), lineno=496, col_offset=16)], [], lineno=492, col_offset=12)], [], lineno=490, col_offset=8), Return(Name('extBinds', Load(), lineno=498, col_offset=15), lineno=498, col_offset=8)], [], lineno=480, col_offset=4), FunctionDef('GetKeyBinding', arguments([Name('self', Param(), lineno=500, col_offset=22), Name('keySetName', Param(), lineno=500, col_offset=28), Name('eventStr', Param(), lineno=500, col_offset=40)], None, None, []), [Expr(Str("\n        returns the keybinding for a specific event.\n        keySetName - string, name of key binding set\n        eventStr - string, the virtual event we want the binding for,\n                   represented as a string, eg. '<<event>>'\n        ", lineno=506, col_offset=-1), lineno=506, col_offset=-1), Assign([Name('eventName', Store(), lineno=507, col_offset=8)], Subscript(Name('eventStr', Load(), lineno=507, col_offset=18), Slice(Num(2, lineno=507, col_offset=27), Num(-2, lineno=507, col_offset=30), None), Load(), lineno=507, col_offset=18), lineno=507, col_offset=8), Assign([Name('binding', Store(), lineno=508, col_offset=8)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=508, col_offset=16), 'GetOption', Load(), lineno=508, col_offset=16), [Str('keys', lineno=508, col_offset=31), Name('keySetName', Load(), lineno=508, col_offset=38), Name('eventName', Load(), lineno=508, col_offset=49)], [keyword('default', Str('', lineno=508, col_offset=67))], None, None, lineno=508, col_offset=16), 'split', Load(), lineno=508, col_offset=16), [], [], None, None, lineno=508, col_offset=16), lineno=508, col_offset=8), Return(Name('binding', Load(), lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=500, col_offset=4), FunctionDef('GetCurrentKeySet', arguments([Name('self', Param(), lineno=511, col_offset=25)], None, None, []), [Assign([Name('result', Store(), lineno=512, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=512, col_offset=17), 'GetKeySet', Load(), lineno=512, col_offset=17), [Call(Attribute(Name('self', Load(), lineno=512, col_offset=32), 'CurrentKeys', Load(), lineno=512, col_offset=32), [], [], None, None, lineno=512, col_offset=32)], [], None, None, lineno=512, col_offset=17), lineno=512, col_offset=8), If(Call(Attribute(Name('macosxSupport', Load(), lineno=514, col_offset=11), 'runningAsOSXApp', Load(), lineno=514, col_offset=11), [], [], None, None, lineno=514, col_offset=11), [For(Tuple([Name('k', Store(), lineno=518, col_offset=16), Name('v', Store(), lineno=518, col_offset=19)], Store(), lineno=518, col_offset=16), Call(Attribute(Name('result', Load(), lineno=518, col_offset=24), 'items', Load(), lineno=518, col_offset=24), [], [], None, None, lineno=518, col_offset=24), [Assign([Name('v2', Store(), lineno=519, col_offset=16)], ListComp(Call(Attribute(Name('x', Load(), lineno=519, col_offset=23), 'replace', Load(), lineno=519, col_offset=23), [Str('<Alt-', lineno=519, col_offset=33), Str('<Option-', lineno=519, col_offset=42)], [], None, None, lineno=519, col_offset=23), [comprehension(Name('x', Store(), lineno=519, col_offset=58), Name('v', Load(), lineno=519, col_offset=63), [])], lineno=519, col_offset=23), lineno=519, col_offset=16), If(Compare(Name('v', Load(), lineno=520, col_offset=19), [NotEq()], [Name('v2', Load(), lineno=520, col_offset=24)], lineno=520, col_offset=19), [Assign([Subscript(Name('result', Load(), lineno=521, col_offset=20), Index(Name('k', Load(), lineno=521, col_offset=27)), Store(), lineno=521, col_offset=20)], Name('v2', Load(), lineno=521, col_offset=32), lineno=521, col_offset=20)], [], lineno=520, col_offset=16)], [], lineno=518, col_offset=12)], [], lineno=514, col_offset=8), Return(Name('result', Load(), lineno=523, col_offset=15), lineno=523, col_offset=8)], [], lineno=511, col_offset=4), FunctionDef('GetKeySet', arguments([Name('self', Param(), lineno=525, col_offset=18), Name('keySetName', Param(), lineno=525, col_offset=23)], None, None, []), [Expr(Str('\n        Returns a dictionary of: all requested core keybindings, plus the\n        keybindings for all currently active extensions. If a binding defined\n        in an extension is already in use, that binding is disabled.\n        ', lineno=530, col_offset=-1), lineno=530, col_offset=-1), Assign([Name('keySet', Store(), lineno=531, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=531, col_offset=15), 'GetCoreKeys', Load(), lineno=531, col_offset=15), [Name('keySetName', Load(), lineno=531, col_offset=32)], [], None, None, lineno=531, col_offset=15), lineno=531, col_offset=8), Assign([Name('activeExtns', Store(), lineno=532, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=532, col_offset=20), 'GetExtensions', Load(), lineno=532, col_offset=20), [], [keyword('active_only', Num(1, lineno=532, col_offset=51))], None, None, lineno=532, col_offset=20), lineno=532, col_offset=8), For(Name('extn', Store(), lineno=533, col_offset=12), Name('activeExtns', Load(), lineno=533, col_offset=20), [Assign([Name('extKeys', Store(), lineno=534, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=534, col_offset=20), '__GetRawExtensionKeys', Load(), lineno=534, col_offset=20), [Name('extn', Load(), lineno=534, col_offset=47)], [], None, None, lineno=534, col_offset=20), lineno=534, col_offset=12), If(Name('extKeys', Load(), lineno=535, col_offset=15), [For(Name('event', Store(), lineno=536, col_offset=20), Call(Attribute(Name('extKeys', Load(), lineno=536, col_offset=29), 'keys', Load(), lineno=536, col_offset=29), [], [], None, None, lineno=536, col_offset=29), [If(Compare(Subscript(Name('extKeys', Load(), lineno=537, col_offset=23), Index(Name('event', Load(), lineno=537, col_offset=31)), Load(), lineno=537, col_offset=23), [In()], [Call(Attribute(Name('keySet', Load(), lineno=537, col_offset=41), 'values', Load(), lineno=537, col_offset=41), [], [], None, None, lineno=537, col_offset=41)], lineno=537, col_offset=23), [Assign([Subscript(Name('extKeys', Load(), lineno=539, col_offset=24), Index(Name('event', Load(), lineno=539, col_offset=32)), Store(), lineno=539, col_offset=24)], Str('', lineno=539, col_offset=39), lineno=539, col_offset=24)], [], lineno=537, col_offset=20), Assign([Subscript(Name('keySet', Load(), lineno=540, col_offset=20), Index(Name('event', Load(), lineno=540, col_offset=27)), Store(), lineno=540, col_offset=20)], Subscript(Name('extKeys', Load(), lineno=540, col_offset=34), Index(Name('event', Load(), lineno=540, col_offset=42)), Load(), lineno=540, col_offset=34), lineno=540, col_offset=20)], [], lineno=536, col_offset=16)], [], lineno=535, col_offset=12)], [], lineno=533, col_offset=8), Return(Name('keySet', Load(), lineno=541, col_offset=15), lineno=541, col_offset=8)], [], lineno=525, col_offset=4), FunctionDef('IsCoreBinding', arguments([Name('self', Param(), lineno=543, col_offset=22), Name('virtualEvent', Param(), lineno=543, col_offset=27)], None, None, []), [Expr(Str("\n        returns true if the virtual event is bound in the core idle keybindings.\n        virtualEvent - string, name of the virtual event to test for, without\n                       the enclosing '<< >>'\n        ", lineno=548, col_offset=-1), lineno=548, col_offset=-1), Return(Compare(BinOp(BinOp(Str('<<', lineno=549, col_offset=16), Add(), Name('virtualEvent', Load(), lineno=549, col_offset=21), lineno=549, col_offset=16), Add(), Str('>>', lineno=549, col_offset=34), lineno=549, col_offset=33), [In()], [Call(Attribute(Call(Attribute(Name('self', Load(), lineno=549, col_offset=43), 'GetCoreKeys', Load(), lineno=549, col_offset=43), [], [], None, None, lineno=549, col_offset=43), 'keys', Load(), lineno=549, col_offset=43), [], [], None, None, lineno=549, col_offset=43)], lineno=549, col_offset=15), lineno=549, col_offset=8)], [], lineno=543, col_offset=4), FunctionDef('GetCoreKeys', arguments([Name('self', Param(), lineno=551, col_offset=20), Name('keySetName', Param(), lineno=551, col_offset=26)], None, None, [Name('None', Load(), lineno=551, col_offset=37)]), [Expr(Str("\n        returns the requested set of core keybindings, with fallbacks if\n        required.\n        Keybindings loaded from the config file(s) are loaded _over_ these\n        defaults, so if there is a problem getting any core binding there will\n        be an 'ultimate last resort fallback' to the CUA-ish bindings\n        defined here.\n        ", lineno=559, col_offset=-1), lineno=559, col_offset=-1), Assign([Name('keyBindings', Store(), lineno=560, col_offset=8)], Dict([Str('<<copy>>', lineno=561, col_offset=12), Str('<<cut>>', lineno=562, col_offset=12), Str('<<paste>>', lineno=563, col_offset=12), Str('<<beginning-of-line>>', lineno=564, col_offset=12), Str('<<center-insert>>', lineno=565, col_offset=12), Str('<<close-all-windows>>', lineno=566, col_offset=12), Str('<<close-window>>', lineno=567, col_offset=12), Str('<<do-nothing>>', lineno=568, col_offset=12), Str('<<end-of-file>>', lineno=569, col_offset=12), Str('<<python-docs>>', lineno=570, col_offset=12), Str('<<python-context-help>>', lineno=571, col_offset=12), Str('<<history-next>>', lineno=572, col_offset=12), Str('<<history-previous>>', lineno=573, col_offset=12), Str('<<interrupt-execution>>', lineno=574, col_offset=12), Str('<<view-restart>>', lineno=575, col_offset=12), Str('<<restart-shell>>', lineno=576, col_offset=12), Str('<<open-class-browser>>', lineno=577, col_offset=12), Str('<<open-module>>', lineno=578, col_offset=12), Str('<<open-new-window>>', lineno=579, col_offset=12), Str('<<open-window-from-file>>', lineno=580, col_offset=12), Str('<<plain-newline-and-indent>>', lineno=581, col_offset=12), Str('<<print-window>>', lineno=582, col_offset=12), Str('<<redo>>', lineno=583, col_offset=12), Str('<<remove-selection>>', lineno=584, col_offset=12), Str('<<save-copy-of-window-as-file>>', lineno=585, col_offset=12), Str('<<save-window-as-file>>', lineno=586, col_offset=12), Str('<<save-window>>', lineno=587, col_offset=12), Str('<<select-all>>', lineno=588, col_offset=12), Str('<<toggle-auto-coloring>>', lineno=589, col_offset=12), Str('<<undo>>', lineno=590, col_offset=12), Str('<<find-again>>', lineno=591, col_offset=12), Str('<<find-in-files>>', lineno=592, col_offset=12), Str('<<find-selection>>', lineno=593, col_offset=12), Str('<<find>>', lineno=594, col_offset=12), Str('<<replace>>', lineno=595, col_offset=12), Str('<<goto-line>>', lineno=596, col_offset=12), Str('<<smart-backspace>>', lineno=597, col_offset=12), Str('<<newline-and-indent>>', lineno=598, col_offset=12), Str('<<smart-indent>>', lineno=599, col_offset=12), Str('<<indent-region>>', lineno=600, col_offset=12), Str('<<dedent-region>>', lineno=601, col_offset=12), Str('<<comment-region>>', lineno=602, col_offset=12), Str('<<uncomment-region>>', lineno=603, col_offset=12), Str('<<tabify-region>>', lineno=604, col_offset=12), Str('<<untabify-region>>', lineno=605, col_offset=12), Str('<<toggle-tabs>>', lineno=606, col_offset=12), Str('<<change-indentwidth>>', lineno=607, col_offset=12), Str('<<del-word-left>>', lineno=608, col_offset=12), Str('<<del-word-right>>', lineno=609, col_offset=12)], [List([Str('<Control-c>', lineno=561, col_offset=25), Str('<Control-C>', lineno=561, col_offset=40)], Load(), lineno=561, col_offset=24), List([Str('<Control-x>', lineno=562, col_offset=24), Str('<Control-X>', lineno=562, col_offset=39)], Load(), lineno=562, col_offset=23), List([Str('<Control-v>', lineno=563, col_offset=26), Str('<Control-V>', lineno=563, col_offset=41)], Load(), lineno=563, col_offset=25), List([Str('<Control-a>', lineno=564, col_offset=38), Str('<Home>', lineno=564, col_offset=53)], Load(), lineno=564, col_offset=37), List([Str('<Control-l>', lineno=565, col_offset=34)], Load(), lineno=565, col_offset=33), List([Str('<Control-q>', lineno=566, col_offset=38)], Load(), lineno=566, col_offset=37), List([Str('<Alt-F4>', lineno=567, col_offset=33)], Load(), lineno=567, col_offset=32), List([Str('<Control-x>', lineno=568, col_offset=31)], Load(), lineno=568, col_offset=30), List([Str('<Control-d>', lineno=569, col_offset=32)], Load(), lineno=569, col_offset=31), List([Str('<F1>', lineno=570, col_offset=32)], Load(), lineno=570, col_offset=31), List([Str('<Shift-F1>', lineno=571, col_offset=40)], Load(), lineno=571, col_offset=39), List([Str('<Alt-n>', lineno=572, col_offset=33)], Load(), lineno=572, col_offset=32), List([Str('<Alt-p>', lineno=573, col_offset=37)], Load(), lineno=573, col_offset=36), List([Str('<Control-c>', lineno=574, col_offset=40)], Load(), lineno=574, col_offset=39), List([Str('<F6>', lineno=575, col_offset=33)], Load(), lineno=575, col_offset=32), List([Str('<Control-F6>', lineno=576, col_offset=34)], Load(), lineno=576, col_offset=33), List([Str('<Alt-c>', lineno=577, col_offset=39)], Load(), lineno=577, col_offset=38), List([Str('<Alt-m>', lineno=578, col_offset=32)], Load(), lineno=578, col_offset=31), List([Str('<Control-n>', lineno=579, col_offset=36)], Load(), lineno=579, col_offset=35), List([Str('<Control-o>', lineno=580, col_offset=42)], Load(), lineno=580, col_offset=41), List([Str('<Control-j>', lineno=581, col_offset=45)], Load(), lineno=581, col_offset=44), List([Str('<Control-p>', lineno=582, col_offset=33)], Load(), lineno=582, col_offset=32), List([Str('<Control-y>', lineno=583, col_offset=25)], Load(), lineno=583, col_offset=24), List([Str('<Escape>', lineno=584, col_offset=37)], Load(), lineno=584, col_offset=36), List([Str('<Alt-Shift-S>', lineno=585, col_offset=48)], Load(), lineno=585, col_offset=47), List([Str('<Alt-s>', lineno=586, col_offset=40)], Load(), lineno=586, col_offset=39), List([Str('<Control-s>', lineno=587, col_offset=32)], Load(), lineno=587, col_offset=31), List([Str('<Alt-a>', lineno=588, col_offset=31)], Load(), lineno=588, col_offset=30), List([Str('<Control-slash>', lineno=589, col_offset=41)], Load(), lineno=589, col_offset=40), List([Str('<Control-z>', lineno=590, col_offset=25)], Load(), lineno=590, col_offset=24), List([Str('<Control-g>', lineno=591, col_offset=31), Str('<F3>', lineno=591, col_offset=46)], Load(), lineno=591, col_offset=30), List([Str('<Alt-F3>', lineno=592, col_offset=34)], Load(), lineno=592, col_offset=33), List([Str('<Control-F3>', lineno=593, col_offset=35)], Load(), lineno=593, col_offset=34), List([Str('<Control-f>', lineno=594, col_offset=25)], Load(), lineno=594, col_offset=24), List([Str('<Control-h>', lineno=595, col_offset=28)], Load(), lineno=595, col_offset=27), List([Str('<Alt-g>', lineno=596, col_offset=30)], Load(), lineno=596, col_offset=29), List([Str('<Key-BackSpace>', lineno=597, col_offset=36)], Load(), lineno=597, col_offset=35), List([Str('<Key-Return> <Key-KP_Enter>', lineno=598, col_offset=39)], Load(), lineno=598, col_offset=38), List([Str('<Key-Tab>', lineno=599, col_offset=33)], Load(), lineno=599, col_offset=32), List([Str('<Control-Key-bracketright>', lineno=600, col_offset=34)], Load(), lineno=600, col_offset=33), List([Str('<Control-Key-bracketleft>', lineno=601, col_offset=34)], Load(), lineno=601, col_offset=33), List([Str('<Alt-Key-3>', lineno=602, col_offset=35)], Load(), lineno=602, col_offset=34), List([Str('<Alt-Key-4>', lineno=603, col_offset=37)], Load(), lineno=603, col_offset=36), List([Str('<Alt-Key-5>', lineno=604, col_offset=34)], Load(), lineno=604, col_offset=33), List([Str('<Alt-Key-6>', lineno=605, col_offset=36)], Load(), lineno=605, col_offset=35), List([Str('<Alt-Key-t>', lineno=606, col_offset=32)], Load(), lineno=606, col_offset=31), List([Str('<Alt-Key-u>', lineno=607, col_offset=39)], Load(), lineno=607, col_offset=38), List([Str('<Control-Key-BackSpace>', lineno=608, col_offset=34)], Load(), lineno=608, col_offset=33), List([Str('<Control-Key-Delete>', lineno=609, col_offset=35)], Load(), lineno=609, col_offset=34)], lineno=560, col_offset=20), lineno=560, col_offset=8), If(Name('keySetName', Load(), lineno=611, col_offset=11), [For(Name('event', Store(), lineno=612, col_offset=16), Call(Attribute(Name('keyBindings', Load(), lineno=612, col_offset=25), 'keys', Load(), lineno=612, col_offset=25), [], [], None, None, lineno=612, col_offset=25), [Assign([Name('binding', Store(), lineno=613, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=613, col_offset=24), 'GetKeyBinding', Load(), lineno=613, col_offset=24), [Name('keySetName', Load(), lineno=613, col_offset=43), Name('event', Load(), lineno=613, col_offset=54)], [], None, None, lineno=613, col_offset=24), lineno=613, col_offset=16), If(Name('binding', Load(), lineno=614, col_offset=19), [Assign([Subscript(Name('keyBindings', Load(), lineno=615, col_offset=20), Index(Name('event', Load(), lineno=615, col_offset=32)), Store(), lineno=615, col_offset=20)], Name('binding', Load(), lineno=615, col_offset=39), lineno=615, col_offset=20)], [Assign([Name('warning', Store(), lineno=617, col_offset=20)], BinOp(Str('\n Warning: configHandler.py - IdleConf.GetCoreKeys -\n problem retrieving key binding for event %r\n from key set %r.\n returning default value: %r\n', lineno=617, col_offset=29), Mod(), Tuple([Name('event', Load(), lineno=621, col_offset=32), Name('keySetName', Load(), lineno=621, col_offset=39), Subscript(Name('keyBindings', Load(), lineno=621, col_offset=51), Index(Name('event', Load(), lineno=621, col_offset=63)), Load(), lineno=621, col_offset=51)], Load(), lineno=621, col_offset=32), lineno=617, col_offset=29), lineno=617, col_offset=20), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=623, col_offset=24), 'stderr', Load(), lineno=623, col_offset=24), 'write', Load(), lineno=623, col_offset=24), [Name('warning', Load(), lineno=623, col_offset=41)], [], None, None, lineno=623, col_offset=24), lineno=623, col_offset=24)], [ExceptHandler(Name('IOError', Load(), lineno=624, col_offset=27), None, [Pass( lineno=625, col_offset=24)], lineno=624, col_offset=20)], [], lineno=622, col_offset=20)], lineno=614, col_offset=16)], [], lineno=612, col_offset=12)], [], lineno=611, col_offset=8), Return(Name('keyBindings', Load(), lineno=626, col_offset=15), lineno=626, col_offset=8)], [], lineno=551, col_offset=4), FunctionDef('GetExtraHelpSourceList', arguments([Name('self', Param(), lineno=628, col_offset=31), Name('configSet', Param(), lineno=628, col_offset=36)], None, None, []), [Expr(Str("Fetch list of extra help sources from a given configSet.\n\n        Valid configSets are 'user' or 'default'.  Return a list of tuples of\n        the form (menu_item , path_to_help_file , option), or return the empty\n        list.  'option' is the sequence number of the help resource.  'option'\n        values determine the position of the menu items on the Help menu,\n        therefore the returned list must be sorted by 'option'.\n\n        ", lineno=637, col_offset=-1), lineno=637, col_offset=-1), Assign([Name('helpSources', Store(), lineno=638, col_offset=8)], List([], Load(), lineno=638, col_offset=20), lineno=638, col_offset=8), If(Compare(Name('configSet', Load(), lineno=639, col_offset=11), [Eq()], [Str('user', lineno=639, col_offset=22)], lineno=639, col_offset=11), [Assign([Name('cfgParser', Store(), lineno=640, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=640, col_offset=22), 'userCfg', Load(), lineno=640, col_offset=22), Index(Str('main', lineno=640, col_offset=35)), Load(), lineno=640, col_offset=22), lineno=640, col_offset=12)], [If(Compare(Name('configSet', Load(), lineno=641, col_offset=13), [Eq()], [Str('default', lineno=641, col_offset=24)], lineno=641, col_offset=13), [Assign([Name('cfgParser', Store(), lineno=642, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=642, col_offset=22), 'defaultCfg', Load(), lineno=642, col_offset=22), Index(Str('main', lineno=642, col_offset=38)), Load(), lineno=642, col_offset=22), lineno=642, col_offset=12)], [Raise(Name('InvalidConfigSet', Load(), lineno=644, col_offset=18), Str('Invalid configSet specified', lineno=644, col_offset=36), None, lineno=644, col_offset=12)], lineno=641, col_offset=13)], lineno=639, col_offset=8), Assign([Name('options', Store(), lineno=645, col_offset=8)], Call(Attribute(Name('cfgParser', Load(), lineno=645, col_offset=16), 'GetOptionList', Load(), lineno=645, col_offset=16), [Str('HelpFiles', lineno=645, col_offset=40)], [], None, None, lineno=645, col_offset=16), lineno=645, col_offset=8), For(Name('option', Store(), lineno=646, col_offset=12), Name('options', Load(), lineno=646, col_offset=22), [Assign([Name('value', Store(), lineno=647, col_offset=12)], Call(Attribute(Name('cfgParser', Load(), lineno=647, col_offset=18), 'Get', Load(), lineno=647, col_offset=18), [Str('HelpFiles', lineno=647, col_offset=32), Name('option', Load(), lineno=647, col_offset=44)], [keyword('default', Str(';', lineno=647, col_offset=59))], None, None, lineno=647, col_offset=18), lineno=647, col_offset=12), If(Compare(Call(Attribute(Name('value', Load(), lineno=648, col_offset=15), 'find', Load(), lineno=648, col_offset=15), [Str(';', lineno=648, col_offset=26)], [], None, None, lineno=648, col_offset=15), [Eq()], [Num(-1, lineno=648, col_offset=33)], lineno=648, col_offset=15), [Assign([Name('menuItem', Store(), lineno=649, col_offset=16)], Str('', lineno=649, col_offset=25), lineno=649, col_offset=16), Assign([Name('helpPath', Store(), lineno=650, col_offset=16)], Str('', lineno=650, col_offset=25), lineno=650, col_offset=16)], [Assign([Name('value', Store(), lineno=652, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=652, col_offset=22), 'split', Load(), lineno=652, col_offset=22), [Name('value', Load(), lineno=652, col_offset=35), Str(';', lineno=652, col_offset=41)], [], None, None, lineno=652, col_offset=22), lineno=652, col_offset=16), Assign([Name('menuItem', Store(), lineno=653, col_offset=16)], Call(Attribute(Subscript(Name('value', Load(), lineno=653, col_offset=25), Index(Num(0, lineno=653, col_offset=31)), Load(), lineno=653, col_offset=25), 'strip', Load(), lineno=653, col_offset=25), [], [], None, None, lineno=653, col_offset=25), lineno=653, col_offset=16), Assign([Name('helpPath', Store(), lineno=654, col_offset=16)], Call(Attribute(Subscript(Name('value', Load(), lineno=654, col_offset=25), Index(Num(1, lineno=654, col_offset=31)), Load(), lineno=654, col_offset=25), 'strip', Load(), lineno=654, col_offset=25), [], [], None, None, lineno=654, col_offset=25), lineno=654, col_offset=16)], lineno=648, col_offset=12), If(BoolOp(And(), [Name('menuItem', Load(), lineno=655, col_offset=15), Name('helpPath', Load(), lineno=655, col_offset=28)], lineno=655, col_offset=15), [Expr(Call(Attribute(Name('helpSources', Load(), lineno=656, col_offset=16), 'append', Load(), lineno=656, col_offset=16), [Tuple([Name('menuItem', Load(), lineno=656, col_offset=37), Name('helpPath', Load(), lineno=656, col_offset=46), Name('option', Load(), lineno=656, col_offset=55)], Load(), lineno=656, col_offset=37)], [], None, None, lineno=656, col_offset=16), lineno=656, col_offset=16)], [], lineno=655, col_offset=12)], [], lineno=646, col_offset=8), Expr(Call(Attribute(Name('helpSources', Load(), lineno=657, col_offset=8), 'sort', Load(), lineno=657, col_offset=8), [], [keyword('key', Lambda(arguments([Name('x', Param(), lineno=657, col_offset=36)], None, None, []), Call(Name('int', Load(), lineno=657, col_offset=39), [Subscript(Name('x', Load(), lineno=657, col_offset=43), Index(Num(2, lineno=657, col_offset=45)), Load(), lineno=657, col_offset=43)], [], None, None, lineno=657, col_offset=39), lineno=657, col_offset=29))], None, None, lineno=657, col_offset=8), lineno=657, col_offset=8), Return(Name('helpSources', Load(), lineno=658, col_offset=15), lineno=658, col_offset=8)], [], lineno=628, col_offset=4), FunctionDef('GetAllExtraHelpSourcesList', arguments([Name('self', Param(), lineno=660, col_offset=35)], None, None, []), [Expr(Str('\n        Returns a list of tuples containing the details of all additional help\n        sources configured, or an empty list if there are none. Tuples are of\n        the format returned by GetExtraHelpSourceList.\n        ', lineno=665, col_offset=-1), lineno=665, col_offset=-1), Assign([Name('allHelpSources', Store(), lineno=666, col_offset=8)], BinOp(Call(Attribute(Name('self', Load(), lineno=666, col_offset=25), 'GetExtraHelpSourceList', Load(), lineno=666, col_offset=25), [Str('default', lineno=666, col_offset=53)], [], None, None, lineno=666, col_offset=25), Add(), Call(Attribute(Name('self', Load(), lineno=667, col_offset=16), 'GetExtraHelpSourceList', Load(), lineno=667, col_offset=16), [Str('user', lineno=667, col_offset=44)], [], None, None, lineno=667, col_offset=16), lineno=666, col_offset=25), lineno=666, col_offset=8), Return(Name('allHelpSources', Load(), lineno=668, col_offset=15), lineno=668, col_offset=8)], [], lineno=660, col_offset=4), FunctionDef('LoadCfgFiles', arguments([Name('self', Param(), lineno=670, col_offset=21)], None, None, []), [Expr(Str('\n        load all configuration files.\n        ', lineno=673, col_offset=-1), lineno=673, col_offset=-1), For(Name('key', Store(), lineno=674, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=674, col_offset=19), 'defaultCfg', Load(), lineno=674, col_offset=19), 'keys', Load(), lineno=674, col_offset=19), [], [], None, None, lineno=674, col_offset=19), [Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=675, col_offset=12), 'defaultCfg', Load(), lineno=675, col_offset=12), Index(Name('key', Load(), lineno=675, col_offset=28)), Load(), lineno=675, col_offset=12), 'Load', Load(), lineno=675, col_offset=12), [], [], None, None, lineno=675, col_offset=12), lineno=675, col_offset=12), Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=676, col_offset=12), 'userCfg', Load(), lineno=676, col_offset=12), Index(Name('key', Load(), lineno=676, col_offset=25)), Load(), lineno=676, col_offset=12), 'Load', Load(), lineno=676, col_offset=12), [], [], None, None, lineno=676, col_offset=12), lineno=676, col_offset=12)], [], lineno=674, col_offset=8)], [], lineno=670, col_offset=4), FunctionDef('SaveUserCfgFiles', arguments([Name('self', Param(), lineno=678, col_offset=25)], None, None, []), [Expr(Str('\n        write all loaded user configuration files back to disk\n        ', lineno=681, col_offset=-1), lineno=681, col_offset=-1), For(Name('key', Store(), lineno=682, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=682, col_offset=19), 'userCfg', Load(), lineno=682, col_offset=19), 'keys', Load(), lineno=682, col_offset=19), [], [], None, None, lineno=682, col_offset=19), [Expr(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=683, col_offset=12), 'userCfg', Load(), lineno=683, col_offset=12), Index(Name('key', Load(), lineno=683, col_offset=25)), Load(), lineno=683, col_offset=12), 'Save', Load(), lineno=683, col_offset=12), [], [], None, None, lineno=683, col_offset=12), lineno=683, col_offset=12)], [], lineno=682, col_offset=8)], [], lineno=678, col_offset=4)], [], lineno=152, col_offset=0), Assign([Name('idleConf', Store(), lineno=685, col_offset=0)], Call(Name('IdleConf', Load(), lineno=685, col_offset=9), [], [], None, None, lineno=685, col_offset=9), lineno=685, col_offset=0), If(Compare(Name('__name__', Load(), lineno=688, col_offset=3), [Eq()], [Str('__main__', lineno=688, col_offset=15)], lineno=688, col_offset=3), [FunctionDef('dumpCfg', arguments([Name('cfg', Param(), lineno=689, col_offset=16)], None, None, []), [Print(None, [Str('\n', lineno=690, col_offset=14), Name('cfg', Load(), lineno=690, col_offset=19), Str('\n', lineno=690, col_offset=23)], True, lineno=690, col_offset=8), For(Name('key', Store(), lineno=691, col_offset=12), Call(Attribute(Name('cfg', Load(), lineno=691, col_offset=19), 'keys', Load(), lineno=691, col_offset=19), [], [], None, None, lineno=691, col_offset=19), [Assign([Name('sections', Store(), lineno=692, col_offset=12)], Call(Attribute(Subscript(Name('cfg', Load(), lineno=692, col_offset=21), Index(Name('key', Load(), lineno=692, col_offset=25)), Load(), lineno=692, col_offset=21), 'sections', Load(), lineno=692, col_offset=21), [], [], None, None, lineno=692, col_offset=21), lineno=692, col_offset=12), Print(None, [Name('key', Load(), lineno=693, col_offset=18)], True, lineno=693, col_offset=12), Print(None, [Name('sections', Load(), lineno=694, col_offset=18)], True, lineno=694, col_offset=12), For(Name('section', Store(), lineno=695, col_offset=16), Name('sections', Load(), lineno=695, col_offset=27), [Assign([Name('options', Store(), lineno=696, col_offset=16)], Call(Attribute(Subscript(Name('cfg', Load(), lineno=696, col_offset=24), Index(Name('key', Load(), lineno=696, col_offset=28)), Load(), lineno=696, col_offset=24), 'options', Load(), lineno=696, col_offset=24), [Name('section', Load(), lineno=696, col_offset=41)], [], None, None, lineno=696, col_offset=24), lineno=696, col_offset=16), Print(None, [Name('section', Load(), lineno=697, col_offset=22)], True, lineno=697, col_offset=16), Print(None, [Name('options', Load(), lineno=698, col_offset=22)], True, lineno=698, col_offset=16), For(Name('option', Store(), lineno=699, col_offset=20), Name('options', Load(), lineno=699, col_offset=30), [Print(None, [Name('option', Load(), lineno=700, col_offset=26), Str('=', lineno=700, col_offset=34), Call(Attribute(Subscript(Name('cfg', Load(), lineno=700, col_offset=39), Index(Name('key', Load(), lineno=700, col_offset=43)), Load(), lineno=700, col_offset=39), 'Get', Load(), lineno=700, col_offset=39), [Name('section', Load(), lineno=700, col_offset=52), Name('option', Load(), lineno=700, col_offset=60)], [], None, None, lineno=700, col_offset=39)], True, lineno=700, col_offset=20)], [], lineno=699, col_offset=16)], [], lineno=695, col_offset=12)], [], lineno=691, col_offset=8)], [], lineno=689, col_offset=4), Expr(Call(Name('dumpCfg', Load(), lineno=701, col_offset=4), [Attribute(Name('idleConf', Load(), lineno=701, col_offset=12), 'defaultCfg', Load(), lineno=701, col_offset=12)], [], None, None, lineno=701, col_offset=4), lineno=701, col_offset=4), Expr(Call(Name('dumpCfg', Load(), lineno=702, col_offset=4), [Attribute(Name('idleConf', Load(), lineno=702, col_offset=12), 'userCfg', Load(), lineno=702, col_offset=12)], [], None, None, lineno=702, col_offset=4), lineno=702, col_offset=4), Print(None, [Call(Attribute(Subscript(Attribute(Name('idleConf', Load(), lineno=703, col_offset=10), 'userCfg', Load(), lineno=703, col_offset=10), Index(Str('main', lineno=703, col_offset=27)), Load(), lineno=703, col_offset=10), 'Get', Load(), lineno=703, col_offset=10), [Str('Theme', lineno=703, col_offset=39), Str('name', lineno=703, col_offset=47)], [], None, None, lineno=703, col_offset=10)], True, lineno=703, col_offset=4)], [], lineno=688, col_offset=0)])
