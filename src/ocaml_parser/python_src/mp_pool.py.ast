Module([Import([alias('multiprocessing', None)], lineno=8, col_offset=0), Import([alias('time', None)], lineno=9, col_offset=0), Import([alias('random', None)], lineno=10, col_offset=0), Import([alias('sys', None)], lineno=11, col_offset=0), FunctionDef('calculate', arguments([Name('func', Param(), lineno=17, col_offset=14), Name('args', Param(), lineno=17, col_offset=20)], None, None, []), [Assign([Name('result', Store(), lineno=18, col_offset=4)], Call(Name('func', Load(), lineno=18, col_offset=13), [], [], Name('args', Load(), lineno=18, col_offset=19), None, lineno=18, col_offset=13), lineno=18, col_offset=4), Return(BinOp(Str('%s says that %s%s = %s', lineno=19, col_offset=11), Mod(), Tuple([Attribute(Call(Attribute(Name('multiprocessing', Load(), lineno=20, col_offset=8), 'current_process', Load(), lineno=20, col_offset=8), [], [], None, None, lineno=20, col_offset=8), 'name', Load(), lineno=20, col_offset=8), Attribute(Name('func', Load(), lineno=21, col_offset=8), '__name__', Load(), lineno=21, col_offset=8), Name('args', Load(), lineno=21, col_offset=23), Name('result', Load(), lineno=21, col_offset=29)], Load(), lineno=20, col_offset=8), lineno=19, col_offset=11), lineno=19, col_offset=4)], [], lineno=17, col_offset=0), FunctionDef('calculatestar', arguments([Name('args', Param(), lineno=24, col_offset=18)], None, None, []), [Return(Call(Name('calculate', Load(), lineno=25, col_offset=11), [], [], Name('args', Load(), lineno=25, col_offset=22), None, lineno=25, col_offset=11), lineno=25, col_offset=4)], [], lineno=24, col_offset=0), FunctionDef('mul', arguments([Name('a', Param(), lineno=27, col_offset=8), Name('b', Param(), lineno=27, col_offset=11)], None, None, []), [Expr(Call(Attribute(Name('time', Load(), lineno=28, col_offset=4), 'sleep', Load(), lineno=28, col_offset=4), [BinOp(Num(0.5, lineno=28, col_offset=15), Mult(), Call(Attribute(Name('random', Load(), lineno=28, col_offset=19), 'random', Load(), lineno=28, col_offset=19), [], [], None, None, lineno=28, col_offset=19), lineno=28, col_offset=15)], [], None, None, lineno=28, col_offset=4), lineno=28, col_offset=4), Return(BinOp(Name('a', Load(), lineno=29, col_offset=11), Mult(), Name('b', Load(), lineno=29, col_offset=15), lineno=29, col_offset=11), lineno=29, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('plus', arguments([Name('a', Param(), lineno=31, col_offset=9), Name('b', Param(), lineno=31, col_offset=12)], None, None, []), [Expr(Call(Attribute(Name('time', Load(), lineno=32, col_offset=4), 'sleep', Load(), lineno=32, col_offset=4), [BinOp(Num(0.5, lineno=32, col_offset=15), Mult(), Call(Attribute(Name('random', Load(), lineno=32, col_offset=19), 'random', Load(), lineno=32, col_offset=19), [], [], None, None, lineno=32, col_offset=19), lineno=32, col_offset=15)], [], None, None, lineno=32, col_offset=4), lineno=32, col_offset=4), Return(BinOp(Name('a', Load(), lineno=33, col_offset=11), Add(), Name('b', Load(), lineno=33, col_offset=15), lineno=33, col_offset=11), lineno=33, col_offset=4)], [], lineno=31, col_offset=0), FunctionDef('f', arguments([Name('x', Param(), lineno=35, col_offset=6)], None, None, []), [Return(BinOp(Num(1.0, lineno=36, col_offset=11), Div(), BinOp(Name('x', Load(), lineno=36, col_offset=18), Sub(), Num(5.0, lineno=36, col_offset=20), lineno=36, col_offset=18), lineno=36, col_offset=11), lineno=36, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('pow3', arguments([Name('x', Param(), lineno=38, col_offset=9)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=39, col_offset=11), Pow(), Num(3, lineno=39, col_offset=14), lineno=39, col_offset=11), lineno=39, col_offset=4)], [], lineno=38, col_offset=0), FunctionDef('noop', arguments([Name('x', Param(), lineno=41, col_offset=9)], None, None, []), [Pass( lineno=42, col_offset=4)], [], lineno=41, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Print(None, [BinOp(Str('cpu_count() = %d\n', lineno=49, col_offset=10), Mod(), Call(Attribute(Name('multiprocessing', Load(), lineno=49, col_offset=33), 'cpu_count', Load(), lineno=49, col_offset=33), [], [], None, None, lineno=49, col_offset=33), lineno=49, col_offset=10)], True, lineno=49, col_offset=4), Assign([Name('PROCESSES', Store(), lineno=55, col_offset=4)], Num(4, lineno=55, col_offset=16), lineno=55, col_offset=4), Print(None, [BinOp(Str('Creating pool with %d processes\n', lineno=56, col_offset=10), Mod(), Name('PROCESSES', Load(), lineno=56, col_offset=48), lineno=56, col_offset=10)], True, lineno=56, col_offset=4), Assign([Name('pool', Store(), lineno=57, col_offset=4)], Call(Attribute(Name('multiprocessing', Load(), lineno=57, col_offset=11), 'Pool', Load(), lineno=57, col_offset=11), [Name('PROCESSES', Load(), lineno=57, col_offset=32)], [], None, None, lineno=57, col_offset=11), lineno=57, col_offset=4), Print(None, [BinOp(Str('pool = %s', lineno=58, col_offset=10), Mod(), Name('pool', Load(), lineno=58, col_offset=24), lineno=58, col_offset=10)], True, lineno=58, col_offset=4), Print(None, [], True, lineno=59, col_offset=4), Assign([Name('TASKS', Store(), lineno=65, col_offset=4)], BinOp(ListComp(Tuple([Name('mul', Load(), lineno=65, col_offset=14), Tuple([Name('i', Load(), lineno=65, col_offset=20), Num(7, lineno=65, col_offset=23)], Load(), lineno=65, col_offset=20)], Load(), lineno=65, col_offset=14), [comprehension(Name('i', Store(), lineno=65, col_offset=31), Call(Name('range', Load(), lineno=65, col_offset=36), [Num(10, lineno=65, col_offset=42)], [], None, None, lineno=65, col_offset=36), [])], lineno=65, col_offset=13), Add(), ListComp(Tuple([Name('plus', Load(), lineno=66, col_offset=14), Tuple([Name('i', Load(), lineno=66, col_offset=21), Num(8, lineno=66, col_offset=24)], Load(), lineno=66, col_offset=21)], Load(), lineno=66, col_offset=14), [comprehension(Name('i', Store(), lineno=66, col_offset=32), Call(Name('range', Load(), lineno=66, col_offset=37), [Num(10, lineno=66, col_offset=43)], [], None, None, lineno=66, col_offset=37), [])], lineno=66, col_offset=13), lineno=65, col_offset=12), lineno=65, col_offset=4), Assign([Name('results', Store(), lineno=68, col_offset=4)], ListComp(Call(Attribute(Name('pool', Load(), lineno=68, col_offset=15), 'apply_async', Load(), lineno=68, col_offset=15), [Name('calculate', Load(), lineno=68, col_offset=32), Name('t', Load(), lineno=68, col_offset=43)], [], None, None, lineno=68, col_offset=15), [comprehension(Name('t', Store(), lineno=68, col_offset=50), Name('TASKS', Load(), lineno=68, col_offset=55), [])], lineno=68, col_offset=15), lineno=68, col_offset=4), Assign([Name('imap_it', Store(), lineno=69, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=69, col_offset=14), 'imap', Load(), lineno=69, col_offset=14), [Name('calculatestar', Load(), lineno=69, col_offset=24), Name('TASKS', Load(), lineno=69, col_offset=39)], [], None, None, lineno=69, col_offset=14), lineno=69, col_offset=4), Assign([Name('imap_unordered_it', Store(), lineno=70, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=70, col_offset=24), 'imap_unordered', Load(), lineno=70, col_offset=24), [Name('calculatestar', Load(), lineno=70, col_offset=44), Name('TASKS', Load(), lineno=70, col_offset=59)], [], None, None, lineno=70, col_offset=24), lineno=70, col_offset=4), Print(None, [Str('Ordered results using pool.apply_async():', lineno=72, col_offset=10)], True, lineno=72, col_offset=4), For(Name('r', Store(), lineno=73, col_offset=8), Name('results', Load(), lineno=73, col_offset=13), [Print(None, [Str('\t', lineno=74, col_offset=14), Call(Attribute(Name('r', Load(), lineno=74, col_offset=20), 'get', Load(), lineno=74, col_offset=20), [], [], None, None, lineno=74, col_offset=20)], True, lineno=74, col_offset=8)], [], lineno=73, col_offset=4), Print(None, [], True, lineno=75, col_offset=4), Print(None, [Str('Ordered results using pool.imap():', lineno=77, col_offset=10)], True, lineno=77, col_offset=4), For(Name('x', Store(), lineno=78, col_offset=8), Name('imap_it', Load(), lineno=78, col_offset=13), [Print(None, [Str('\t', lineno=79, col_offset=14), Name('x', Load(), lineno=79, col_offset=20)], True, lineno=79, col_offset=8)], [], lineno=78, col_offset=4), Print(None, [], True, lineno=80, col_offset=4), Print(None, [Str('Unordered results using pool.imap_unordered():', lineno=82, col_offset=10)], True, lineno=82, col_offset=4), For(Name('x', Store(), lineno=83, col_offset=8), Name('imap_unordered_it', Load(), lineno=83, col_offset=13), [Print(None, [Str('\t', lineno=84, col_offset=14), Name('x', Load(), lineno=84, col_offset=20)], True, lineno=84, col_offset=8)], [], lineno=83, col_offset=4), Print(None, [], True, lineno=85, col_offset=4), Print(None, [Str('Ordered results using pool.map() --- will block till complete:', lineno=87, col_offset=10)], True, lineno=87, col_offset=4), For(Name('x', Store(), lineno=88, col_offset=8), Call(Attribute(Name('pool', Load(), lineno=88, col_offset=13), 'map', Load(), lineno=88, col_offset=13), [Name('calculatestar', Load(), lineno=88, col_offset=22), Name('TASKS', Load(), lineno=88, col_offset=37)], [], None, None, lineno=88, col_offset=13), [Print(None, [Str('\t', lineno=89, col_offset=14), Name('x', Load(), lineno=89, col_offset=20)], True, lineno=89, col_offset=8)], [], lineno=88, col_offset=4), Print(None, [], True, lineno=90, col_offset=4), Assign([Name('N', Store(), lineno=96, col_offset=4)], Num(100000, lineno=96, col_offset=8), lineno=96, col_offset=4), Print(None, [Str('def pow3(x): return x**3', lineno=97, col_offset=10)], True, lineno=97, col_offset=4), Assign([Name('t', Store(), lineno=99, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=99, col_offset=8), 'time', Load(), lineno=99, col_offset=8), [], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=4), Assign([Name('A', Store(), lineno=100, col_offset=4)], Call(Name('map', Load(), lineno=100, col_offset=8), [Name('pow3', Load(), lineno=100, col_offset=12), Call(Name('xrange', Load(), lineno=100, col_offset=18), [Name('N', Load(), lineno=100, col_offset=25)], [], None, None, lineno=100, col_offset=18)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=4), Print(None, [BinOp(Str('\tmap(pow3, xrange(%d)):\n\t\t%s seconds', lineno=101, col_offset=10), Mod(), Tuple([Name('N', Load(), lineno=102, col_offset=11), BinOp(Call(Attribute(Name('time', Load(), lineno=102, col_offset=14), 'time', Load(), lineno=102, col_offset=14), [], [], None, None, lineno=102, col_offset=14), Sub(), Name('t', Load(), lineno=102, col_offset=28), lineno=102, col_offset=14)], Load(), lineno=102, col_offset=11), lineno=101, col_offset=10)], True, lineno=101, col_offset=4), Assign([Name('t', Store(), lineno=104, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=104, col_offset=8), 'time', Load(), lineno=104, col_offset=8), [], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=4), Assign([Name('B', Store(), lineno=105, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=105, col_offset=8), 'map', Load(), lineno=105, col_offset=8), [Name('pow3', Load(), lineno=105, col_offset=17), Call(Name('xrange', Load(), lineno=105, col_offset=23), [Name('N', Load(), lineno=105, col_offset=30)], [], None, None, lineno=105, col_offset=23)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=4), Print(None, [BinOp(Str('\tpool.map(pow3, xrange(%d)):\n\t\t%s seconds', lineno=106, col_offset=10), Mod(), Tuple([Name('N', Load(), lineno=107, col_offset=11), BinOp(Call(Attribute(Name('time', Load(), lineno=107, col_offset=14), 'time', Load(), lineno=107, col_offset=14), [], [], None, None, lineno=107, col_offset=14), Sub(), Name('t', Load(), lineno=107, col_offset=28), lineno=107, col_offset=14)], Load(), lineno=107, col_offset=11), lineno=106, col_offset=10)], True, lineno=106, col_offset=4), Assign([Name('t', Store(), lineno=109, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=109, col_offset=8), 'time', Load(), lineno=109, col_offset=8), [], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=4), Assign([Name('C', Store(), lineno=110, col_offset=4)], Call(Name('list', Load(), lineno=110, col_offset=8), [Call(Attribute(Name('pool', Load(), lineno=110, col_offset=13), 'imap', Load(), lineno=110, col_offset=13), [Name('pow3', Load(), lineno=110, col_offset=23), Call(Name('xrange', Load(), lineno=110, col_offset=29), [Name('N', Load(), lineno=110, col_offset=36)], [], None, None, lineno=110, col_offset=29)], [keyword('chunksize', BinOp(Name('N', Load(), lineno=110, col_offset=50), FloorDiv(), Num(8, lineno=110, col_offset=53), lineno=110, col_offset=50))], None, None, lineno=110, col_offset=13)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=4), Print(None, [BinOp(Str('\tlist(pool.imap(pow3, xrange(%d), chunksize=%d)):\n\t\t%s seconds', lineno=111, col_offset=10), Mod(), Tuple([Name('N', Load(), lineno=112, col_offset=24), BinOp(Name('N', Load(), lineno=112, col_offset=27), FloorDiv(), Num(8, lineno=112, col_offset=30), lineno=112, col_offset=27), BinOp(Call(Attribute(Name('time', Load(), lineno=112, col_offset=33), 'time', Load(), lineno=112, col_offset=33), [], [], None, None, lineno=112, col_offset=33), Sub(), Name('t', Load(), lineno=112, col_offset=47), lineno=112, col_offset=33)], Load(), lineno=112, col_offset=24), lineno=111, col_offset=10)], True, lineno=111, col_offset=4), Assert(Compare(Name('A', Load(), lineno=114, col_offset=11), [Eq(), Eq()], [Name('B', Load(), lineno=114, col_offset=16), Name('C', Load(), lineno=114, col_offset=21)], lineno=114, col_offset=11), Tuple([Call(Name('len', Load(), lineno=114, col_offset=25), [Name('A', Load(), lineno=114, col_offset=29)], [], None, None, lineno=114, col_offset=25), Call(Name('len', Load(), lineno=114, col_offset=33), [Name('B', Load(), lineno=114, col_offset=37)], [], None, None, lineno=114, col_offset=33), Call(Name('len', Load(), lineno=114, col_offset=41), [Name('C', Load(), lineno=114, col_offset=45)], [], None, None, lineno=114, col_offset=41)], Load(), lineno=114, col_offset=25), lineno=114, col_offset=4), Print(None, [], True, lineno=115, col_offset=4), Assign([Name('L', Store(), lineno=117, col_offset=4)], BinOp(List([Name('None', Load(), lineno=117, col_offset=9)], Load(), lineno=117, col_offset=8), Mult(), Num(1000000, lineno=117, col_offset=17), lineno=117, col_offset=8), lineno=117, col_offset=4), Print(None, [Str('def noop(x): pass', lineno=118, col_offset=10)], True, lineno=118, col_offset=4), Print(None, [Str('L = [None] * 1000000', lineno=119, col_offset=10)], True, lineno=119, col_offset=4), Assign([Name('t', Store(), lineno=121, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=121, col_offset=8), 'time', Load(), lineno=121, col_offset=8), [], [], None, None, lineno=121, col_offset=8), lineno=121, col_offset=4), Assign([Name('A', Store(), lineno=122, col_offset=4)], Call(Name('map', Load(), lineno=122, col_offset=8), [Name('noop', Load(), lineno=122, col_offset=12), Name('L', Load(), lineno=122, col_offset=18)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=4), Print(None, [BinOp(Str('\tmap(noop, L):\n\t\t%s seconds', lineno=123, col_offset=10), Mod(), BinOp(Call(Attribute(Name('time', Load(), lineno=124, col_offset=11), 'time', Load(), lineno=124, col_offset=11), [], [], None, None, lineno=124, col_offset=11), Sub(), Name('t', Load(), lineno=124, col_offset=25), lineno=124, col_offset=11), lineno=123, col_offset=10)], True, lineno=123, col_offset=4), Assign([Name('t', Store(), lineno=126, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=126, col_offset=8), 'time', Load(), lineno=126, col_offset=8), [], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=4), Assign([Name('B', Store(), lineno=127, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=127, col_offset=8), 'map', Load(), lineno=127, col_offset=8), [Name('noop', Load(), lineno=127, col_offset=17), Name('L', Load(), lineno=127, col_offset=23)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=4), Print(None, [BinOp(Str('\tpool.map(noop, L):\n\t\t%s seconds', lineno=128, col_offset=10), Mod(), BinOp(Call(Attribute(Name('time', Load(), lineno=129, col_offset=11), 'time', Load(), lineno=129, col_offset=11), [], [], None, None, lineno=129, col_offset=11), Sub(), Name('t', Load(), lineno=129, col_offset=25), lineno=129, col_offset=11), lineno=128, col_offset=10)], True, lineno=128, col_offset=4), Assign([Name('t', Store(), lineno=131, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=131, col_offset=8), 'time', Load(), lineno=131, col_offset=8), [], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=4), Assign([Name('C', Store(), lineno=132, col_offset=4)], Call(Name('list', Load(), lineno=132, col_offset=8), [Call(Attribute(Name('pool', Load(), lineno=132, col_offset=13), 'imap', Load(), lineno=132, col_offset=13), [Name('noop', Load(), lineno=132, col_offset=23), Name('L', Load(), lineno=132, col_offset=29)], [keyword('chunksize', BinOp(Call(Name('len', Load(), lineno=132, col_offset=42), [Name('L', Load(), lineno=132, col_offset=46)], [], None, None, lineno=132, col_offset=42), FloorDiv(), Num(8, lineno=132, col_offset=50), lineno=132, col_offset=42))], None, None, lineno=132, col_offset=13)], [], None, None, lineno=132, col_offset=8), lineno=132, col_offset=4), Print(None, [BinOp(Str('\tlist(pool.imap(noop, L, chunksize=%d)):\n\t\t%s seconds', lineno=133, col_offset=10), Mod(), Tuple([BinOp(Call(Name('len', Load(), lineno=134, col_offset=11), [Name('L', Load(), lineno=134, col_offset=15)], [], None, None, lineno=134, col_offset=11), FloorDiv(), Num(8, lineno=134, col_offset=19), lineno=134, col_offset=11), BinOp(Call(Attribute(Name('time', Load(), lineno=134, col_offset=22), 'time', Load(), lineno=134, col_offset=22), [], [], None, None, lineno=134, col_offset=22), Sub(), Name('t', Load(), lineno=134, col_offset=36), lineno=134, col_offset=22)], Load(), lineno=134, col_offset=11), lineno=133, col_offset=10)], True, lineno=133, col_offset=4), Assert(Compare(Name('A', Load(), lineno=136, col_offset=11), [Eq(), Eq()], [Name('B', Load(), lineno=136, col_offset=16), Name('C', Load(), lineno=136, col_offset=21)], lineno=136, col_offset=11), Tuple([Call(Name('len', Load(), lineno=136, col_offset=25), [Name('A', Load(), lineno=136, col_offset=29)], [], None, None, lineno=136, col_offset=25), Call(Name('len', Load(), lineno=136, col_offset=33), [Name('B', Load(), lineno=136, col_offset=37)], [], None, None, lineno=136, col_offset=33), Call(Name('len', Load(), lineno=136, col_offset=41), [Name('C', Load(), lineno=136, col_offset=45)], [], None, None, lineno=136, col_offset=41)], Load(), lineno=136, col_offset=25), lineno=136, col_offset=4), Print(None, [], True, lineno=137, col_offset=4), Delete([Name('A', Del(), lineno=139, col_offset=8), Name('B', Del(), lineno=139, col_offset=11), Name('C', Del(), lineno=139, col_offset=14), Name('L', Del(), lineno=139, col_offset=17)], lineno=139, col_offset=4), Print(None, [Str('Testing error handling:', lineno=145, col_offset=10)], True, lineno=145, col_offset=4), TryExcept([Print(None, [Call(Attribute(Name('pool', Load(), lineno=148, col_offset=14), 'apply', Load(), lineno=148, col_offset=14), [Name('f', Load(), lineno=148, col_offset=25), Tuple([Num(5, lineno=148, col_offset=29)], Load(), lineno=148, col_offset=29)], [], None, None, lineno=148, col_offset=14)], True, lineno=148, col_offset=8)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=149, col_offset=11), None, [Print(None, [Str('\tGot ZeroDivisionError as expected from pool.apply()', lineno=150, col_offset=14)], True, lineno=150, col_offset=8)], lineno=149, col_offset=4)], [Raise(Call(Name('AssertionError', Load(), lineno=152, col_offset=14), [Str('expected ZeroDivisionError', lineno=152, col_offset=29)], [], None, None, lineno=152, col_offset=14), None, None, lineno=152, col_offset=8)], lineno=147, col_offset=4), TryExcept([Print(None, [Call(Attribute(Name('pool', Load(), lineno=155, col_offset=14), 'map', Load(), lineno=155, col_offset=14), [Name('f', Load(), lineno=155, col_offset=23), Call(Name('range', Load(), lineno=155, col_offset=26), [Num(10, lineno=155, col_offset=32)], [], None, None, lineno=155, col_offset=26)], [], None, None, lineno=155, col_offset=14)], True, lineno=155, col_offset=8)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=156, col_offset=11), None, [Print(None, [Str('\tGot ZeroDivisionError as expected from pool.map()', lineno=157, col_offset=14)], True, lineno=157, col_offset=8)], lineno=156, col_offset=4)], [Raise(Call(Name('AssertionError', Load(), lineno=159, col_offset=14), [Str('expected ZeroDivisionError', lineno=159, col_offset=29)], [], None, None, lineno=159, col_offset=14), None, None, lineno=159, col_offset=8)], lineno=154, col_offset=4), TryExcept([Print(None, [Call(Name('list', Load(), lineno=162, col_offset=14), [Call(Attribute(Name('pool', Load(), lineno=162, col_offset=19), 'imap', Load(), lineno=162, col_offset=19), [Name('f', Load(), lineno=162, col_offset=29), Call(Name('range', Load(), lineno=162, col_offset=32), [Num(10, lineno=162, col_offset=38)], [], None, None, lineno=162, col_offset=32)], [], None, None, lineno=162, col_offset=19)], [], None, None, lineno=162, col_offset=14)], True, lineno=162, col_offset=8)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=163, col_offset=11), None, [Print(None, [Str('\tGot ZeroDivisionError as expected from list(pool.imap())', lineno=164, col_offset=14)], True, lineno=164, col_offset=8)], lineno=163, col_offset=4)], [Raise(Call(Name('AssertionError', Load(), lineno=166, col_offset=14), [Str('expected ZeroDivisionError', lineno=166, col_offset=29)], [], None, None, lineno=166, col_offset=14), None, None, lineno=166, col_offset=8)], lineno=161, col_offset=4), Assign([Name('it', Store(), lineno=168, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=168, col_offset=9), 'imap', Load(), lineno=168, col_offset=9), [Name('f', Load(), lineno=168, col_offset=19), Call(Name('range', Load(), lineno=168, col_offset=22), [Num(10, lineno=168, col_offset=28)], [], None, None, lineno=168, col_offset=22)], [], None, None, lineno=168, col_offset=9), lineno=168, col_offset=4), For(Name('i', Store(), lineno=169, col_offset=8), Call(Name('range', Load(), lineno=169, col_offset=13), [Num(10, lineno=169, col_offset=19)], [], None, None, lineno=169, col_offset=13), [TryExcept([Assign([Name('x', Store(), lineno=171, col_offset=12)], Call(Attribute(Name('it', Load(), lineno=171, col_offset=16), 'next', Load(), lineno=171, col_offset=16), [], [], None, None, lineno=171, col_offset=16), lineno=171, col_offset=12)], [ExceptHandler(Name('ZeroDivisionError', Load(), lineno=172, col_offset=15), None, [If(Compare(Name('i', Load(), lineno=173, col_offset=15), [Eq()], [Num(5, lineno=173, col_offset=20)], lineno=173, col_offset=15), [Pass( lineno=174, col_offset=16)], [], lineno=173, col_offset=12)], lineno=172, col_offset=8), ExceptHandler(Name('StopIteration', Load(), lineno=175, col_offset=15), None, [Break( lineno=176, col_offset=12)], lineno=175, col_offset=8)], [If(Compare(Name('i', Load(), lineno=178, col_offset=15), [Eq()], [Num(5, lineno=178, col_offset=20)], lineno=178, col_offset=15), [Raise(Call(Name('AssertionError', Load(), lineno=179, col_offset=22), [Str('expected ZeroDivisionError', lineno=179, col_offset=37)], [], None, None, lineno=179, col_offset=22), None, None, lineno=179, col_offset=16)], [], lineno=178, col_offset=12)], lineno=170, col_offset=8)], [], lineno=169, col_offset=4), Assert(Compare(Name('i', Load(), lineno=181, col_offset=11), [Eq()], [Num(9, lineno=181, col_offset=16)], lineno=181, col_offset=11), None, lineno=181, col_offset=4), Print(None, [Str('\tGot ZeroDivisionError as expected from IMapIterator.next()', lineno=182, col_offset=10)], True, lineno=182, col_offset=4), Print(None, [], True, lineno=183, col_offset=4), Print(None, [Str('Testing ApplyResult.get() with timeout:', lineno=189, col_offset=10)], False, lineno=189, col_offset=4), Assign([Name('res', Store(), lineno=190, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=190, col_offset=10), 'apply_async', Load(), lineno=190, col_offset=10), [Name('calculate', Load(), lineno=190, col_offset=27), Subscript(Name('TASKS', Load(), lineno=190, col_offset=38), Index(Num(0, lineno=190, col_offset=44)), Load(), lineno=190, col_offset=38)], [], None, None, lineno=190, col_offset=10), lineno=190, col_offset=4), While(Num(1, lineno=191, col_offset=10), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=192, col_offset=8), 'stdout', Load(), lineno=192, col_offset=8), 'flush', Load(), lineno=192, col_offset=8), [], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=194, col_offset=12), 'stdout', Load(), lineno=194, col_offset=12), 'write', Load(), lineno=194, col_offset=12), [BinOp(Str('\n\t%s', lineno=194, col_offset=29), Mod(), Call(Attribute(Name('res', Load(), lineno=194, col_offset=40), 'get', Load(), lineno=194, col_offset=40), [Num(0.02, lineno=194, col_offset=48)], [], None, None, lineno=194, col_offset=40), lineno=194, col_offset=29)], [], None, None, lineno=194, col_offset=12), lineno=194, col_offset=12), Break( lineno=195, col_offset=12)], [ExceptHandler(Attribute(Name('multiprocessing', Load(), lineno=196, col_offset=15), 'TimeoutError', Load(), lineno=196, col_offset=15), None, [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=197, col_offset=12), 'stdout', Load(), lineno=197, col_offset=12), 'write', Load(), lineno=197, col_offset=12), [Str('.', lineno=197, col_offset=29)], [], None, None, lineno=197, col_offset=12), lineno=197, col_offset=12)], lineno=196, col_offset=8)], [], lineno=193, col_offset=8)], [], lineno=191, col_offset=4), Print(None, [], True, lineno=198, col_offset=4), Print(None, [], True, lineno=199, col_offset=4), Print(None, [Str('Testing IMapIterator.next() with timeout:', lineno=201, col_offset=10)], False, lineno=201, col_offset=4), Assign([Name('it', Store(), lineno=202, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=202, col_offset=9), 'imap', Load(), lineno=202, col_offset=9), [Name('calculatestar', Load(), lineno=202, col_offset=19), Name('TASKS', Load(), lineno=202, col_offset=34)], [], None, None, lineno=202, col_offset=9), lineno=202, col_offset=4), While(Num(1, lineno=203, col_offset=10), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=204, col_offset=8), 'stdout', Load(), lineno=204, col_offset=8), 'flush', Load(), lineno=204, col_offset=8), [], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8), TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=206, col_offset=12), 'stdout', Load(), lineno=206, col_offset=12), 'write', Load(), lineno=206, col_offset=12), [BinOp(Str('\n\t%s', lineno=206, col_offset=29), Mod(), Call(Attribute(Name('it', Load(), lineno=206, col_offset=40), 'next', Load(), lineno=206, col_offset=40), [Num(0.02, lineno=206, col_offset=48)], [], None, None, lineno=206, col_offset=40), lineno=206, col_offset=29)], [], None, None, lineno=206, col_offset=12), lineno=206, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=207, col_offset=15), None, [Break( lineno=208, col_offset=12)], lineno=207, col_offset=8), ExceptHandler(Attribute(Name('multiprocessing', Load(), lineno=209, col_offset=15), 'TimeoutError', Load(), lineno=209, col_offset=15), None, [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=210, col_offset=12), 'stdout', Load(), lineno=210, col_offset=12), 'write', Load(), lineno=210, col_offset=12), [Str('.', lineno=210, col_offset=29)], [], None, None, lineno=210, col_offset=12), lineno=210, col_offset=12)], lineno=209, col_offset=8)], [], lineno=205, col_offset=8)], [], lineno=203, col_offset=4), Print(None, [], True, lineno=211, col_offset=4), Print(None, [], True, lineno=212, col_offset=4), Print(None, [Str('Testing callback:', lineno=218, col_offset=10)], True, lineno=218, col_offset=4), Assign([Name('A', Store(), lineno=220, col_offset=4)], List([], Load(), lineno=220, col_offset=8), lineno=220, col_offset=4), Assign([Name('B', Store(), lineno=221, col_offset=4)], List([Num(56, lineno=221, col_offset=9), Num(0, lineno=221, col_offset=13), Num(1, lineno=221, col_offset=16), Num(8, lineno=221, col_offset=19), Num(27, lineno=221, col_offset=22), Num(64, lineno=221, col_offset=26), Num(125, lineno=221, col_offset=30), Num(216, lineno=221, col_offset=35), Num(343, lineno=221, col_offset=40), Num(512, lineno=221, col_offset=45), Num(729, lineno=221, col_offset=50)], Load(), lineno=221, col_offset=8), lineno=221, col_offset=4), Assign([Name('r', Store(), lineno=223, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=223, col_offset=8), 'apply_async', Load(), lineno=223, col_offset=8), [Name('mul', Load(), lineno=223, col_offset=25), Tuple([Num(7, lineno=223, col_offset=31), Num(8, lineno=223, col_offset=34)], Load(), lineno=223, col_offset=31)], [keyword('callback', Attribute(Name('A', Load(), lineno=223, col_offset=47), 'append', Load(), lineno=223, col_offset=47))], None, None, lineno=223, col_offset=8), lineno=223, col_offset=4), Expr(Call(Attribute(Name('r', Load(), lineno=224, col_offset=4), 'wait', Load(), lineno=224, col_offset=4), [], [], None, None, lineno=224, col_offset=4), lineno=224, col_offset=4), Assign([Name('r', Store(), lineno=226, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=226, col_offset=8), 'map_async', Load(), lineno=226, col_offset=8), [Name('pow3', Load(), lineno=226, col_offset=23), Call(Name('range', Load(), lineno=226, col_offset=29), [Num(10, lineno=226, col_offset=35)], [], None, None, lineno=226, col_offset=29)], [keyword('callback', Attribute(Name('A', Load(), lineno=226, col_offset=49), 'extend', Load(), lineno=226, col_offset=49))], None, None, lineno=226, col_offset=8), lineno=226, col_offset=4), Expr(Call(Attribute(Name('r', Load(), lineno=227, col_offset=4), 'wait', Load(), lineno=227, col_offset=4), [], [], None, None, lineno=227, col_offset=4), lineno=227, col_offset=4), If(Compare(Name('A', Load(), lineno=229, col_offset=7), [Eq()], [Name('B', Load(), lineno=229, col_offset=12)], lineno=229, col_offset=7), [Print(None, [Str('\tcallbacks succeeded\n', lineno=230, col_offset=14)], True, lineno=230, col_offset=8)], [Print(None, [BinOp(Str('\t*** callbacks failed\n\t\t%s != %s\n', lineno=232, col_offset=14), Mod(), Tuple([Name('A', Load(), lineno=232, col_offset=58), Name('B', Load(), lineno=232, col_offset=61)], Load(), lineno=232, col_offset=58), lineno=232, col_offset=14)], True, lineno=232, col_offset=8)], lineno=229, col_offset=4), Assert(UnaryOp(Not(), Attribute(Name('pool', Load(), lineno=238, col_offset=15), '_cache', Load(), lineno=238, col_offset=15), lineno=238, col_offset=11), BinOp(Str('cache = %r', lineno=238, col_offset=28), Mod(), Attribute(Name('pool', Load(), lineno=238, col_offset=43), '_cache', Load(), lineno=238, col_offset=43), lineno=238, col_offset=28), lineno=238, col_offset=4), Print(None, [Str('Testing close():', lineno=244, col_offset=10)], True, lineno=244, col_offset=4), For(Name('worker', Store(), lineno=246, col_offset=8), Attribute(Name('pool', Load(), lineno=246, col_offset=18), '_pool', Load(), lineno=246, col_offset=18), [Assert(Call(Attribute(Name('worker', Load(), lineno=247, col_offset=15), 'is_alive', Load(), lineno=247, col_offset=15), [], [], None, None, lineno=247, col_offset=15), None, lineno=247, col_offset=8)], [], lineno=246, col_offset=4), Assign([Name('result', Store(), lineno=249, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=249, col_offset=13), 'apply_async', Load(), lineno=249, col_offset=13), [Attribute(Name('time', Load(), lineno=249, col_offset=30), 'sleep', Load(), lineno=249, col_offset=30), List([Num(0.5, lineno=249, col_offset=43)], Load(), lineno=249, col_offset=42)], [], None, None, lineno=249, col_offset=13), lineno=249, col_offset=4), Expr(Call(Attribute(Name('pool', Load(), lineno=250, col_offset=4), 'close', Load(), lineno=250, col_offset=4), [], [], None, None, lineno=250, col_offset=4), lineno=250, col_offset=4), Expr(Call(Attribute(Name('pool', Load(), lineno=251, col_offset=4), 'join', Load(), lineno=251, col_offset=4), [], [], None, None, lineno=251, col_offset=4), lineno=251, col_offset=4), Assert(Compare(Call(Attribute(Name('result', Load(), lineno=253, col_offset=11), 'get', Load(), lineno=253, col_offset=11), [], [], None, None, lineno=253, col_offset=11), [Is()], [Name('None', Load(), lineno=253, col_offset=27)], lineno=253, col_offset=11), None, lineno=253, col_offset=4), For(Name('worker', Store(), lineno=255, col_offset=8), Attribute(Name('pool', Load(), lineno=255, col_offset=18), '_pool', Load(), lineno=255, col_offset=18), [Assert(UnaryOp(Not(), Call(Attribute(Name('worker', Load(), lineno=256, col_offset=19), 'is_alive', Load(), lineno=256, col_offset=19), [], [], None, None, lineno=256, col_offset=19), lineno=256, col_offset=15), None, lineno=256, col_offset=8)], [], lineno=255, col_offset=4), Print(None, [Str('\tclose() succeeded\n', lineno=258, col_offset=10)], True, lineno=258, col_offset=4), Print(None, [Str('Testing terminate():', lineno=264, col_offset=10)], True, lineno=264, col_offset=4), Assign([Name('pool', Store(), lineno=266, col_offset=4)], Call(Attribute(Name('multiprocessing', Load(), lineno=266, col_offset=11), 'Pool', Load(), lineno=266, col_offset=11), [Num(2, lineno=266, col_offset=32)], [], None, None, lineno=266, col_offset=11), lineno=266, col_offset=4), Assign([Name('DELTA', Store(), lineno=267, col_offset=4)], Num(0.1, lineno=267, col_offset=12), lineno=267, col_offset=4), Assign([Name('ignore', Store(), lineno=268, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=268, col_offset=13), 'apply', Load(), lineno=268, col_offset=13), [Name('pow3', Load(), lineno=268, col_offset=24), List([Num(2, lineno=268, col_offset=31)], Load(), lineno=268, col_offset=30)], [], None, None, lineno=268, col_offset=13), lineno=268, col_offset=4), Assign([Name('results', Store(), lineno=269, col_offset=4)], ListComp(Call(Attribute(Name('pool', Load(), lineno=269, col_offset=15), 'apply_async', Load(), lineno=269, col_offset=15), [Attribute(Name('time', Load(), lineno=269, col_offset=32), 'sleep', Load(), lineno=269, col_offset=32), List([Name('DELTA', Load(), lineno=269, col_offset=45)], Load(), lineno=269, col_offset=44)], [], None, None, lineno=269, col_offset=15), [comprehension(Name('i', Store(), lineno=269, col_offset=57), Call(Name('range', Load(), lineno=269, col_offset=62), [Num(100, lineno=269, col_offset=68)], [], None, None, lineno=269, col_offset=62), [])], lineno=269, col_offset=15), lineno=269, col_offset=4), Expr(Call(Attribute(Name('pool', Load(), lineno=270, col_offset=4), 'terminate', Load(), lineno=270, col_offset=4), [], [], None, None, lineno=270, col_offset=4), lineno=270, col_offset=4), Expr(Call(Attribute(Name('pool', Load(), lineno=271, col_offset=4), 'join', Load(), lineno=271, col_offset=4), [], [], None, None, lineno=271, col_offset=4), lineno=271, col_offset=4), For(Name('worker', Store(), lineno=273, col_offset=8), Attribute(Name('pool', Load(), lineno=273, col_offset=18), '_pool', Load(), lineno=273, col_offset=18), [Assert(UnaryOp(Not(), Call(Attribute(Name('worker', Load(), lineno=274, col_offset=19), 'is_alive', Load(), lineno=274, col_offset=19), [], [], None, None, lineno=274, col_offset=19), lineno=274, col_offset=15), None, lineno=274, col_offset=8)], [], lineno=273, col_offset=4), Print(None, [Str('\tterminate() succeeded\n', lineno=276, col_offset=10)], True, lineno=276, col_offset=4), Print(None, [Str('Testing garbage collection:', lineno=282, col_offset=10)], True, lineno=282, col_offset=4), Assign([Name('pool', Store(), lineno=284, col_offset=4)], Call(Attribute(Name('multiprocessing', Load(), lineno=284, col_offset=11), 'Pool', Load(), lineno=284, col_offset=11), [Num(2, lineno=284, col_offset=32)], [], None, None, lineno=284, col_offset=11), lineno=284, col_offset=4), Assign([Name('DELTA', Store(), lineno=285, col_offset=4)], Num(0.1, lineno=285, col_offset=12), lineno=285, col_offset=4), Assign([Name('processes', Store(), lineno=286, col_offset=4)], Attribute(Name('pool', Load(), lineno=286, col_offset=16), '_pool', Load(), lineno=286, col_offset=16), lineno=286, col_offset=4), Assign([Name('ignore', Store(), lineno=287, col_offset=4)], Call(Attribute(Name('pool', Load(), lineno=287, col_offset=13), 'apply', Load(), lineno=287, col_offset=13), [Name('pow3', Load(), lineno=287, col_offset=24), List([Num(2, lineno=287, col_offset=31)], Load(), lineno=287, col_offset=30)], [], None, None, lineno=287, col_offset=13), lineno=287, col_offset=4), Assign([Name('results', Store(), lineno=288, col_offset=4)], ListComp(Call(Attribute(Name('pool', Load(), lineno=288, col_offset=15), 'apply_async', Load(), lineno=288, col_offset=15), [Attribute(Name('time', Load(), lineno=288, col_offset=32), 'sleep', Load(), lineno=288, col_offset=32), List([Name('DELTA', Load(), lineno=288, col_offset=45)], Load(), lineno=288, col_offset=44)], [], None, None, lineno=288, col_offset=15), [comprehension(Name('i', Store(), lineno=288, col_offset=57), Call(Name('range', Load(), lineno=288, col_offset=62), [Num(100, lineno=288, col_offset=68)], [], None, None, lineno=288, col_offset=62), [])], lineno=288, col_offset=15), lineno=288, col_offset=4), Assign([Name('results', Store(), lineno=290, col_offset=4), Name('pool', Store(), lineno=290, col_offset=14)], Name('None', Load(), lineno=290, col_offset=21), lineno=290, col_offset=4), Expr(Call(Attribute(Name('time', Load(), lineno=292, col_offset=4), 'sleep', Load(), lineno=292, col_offset=4), [BinOp(Name('DELTA', Load(), lineno=292, col_offset=15), Mult(), Num(2, lineno=292, col_offset=23), lineno=292, col_offset=15)], [], None, None, lineno=292, col_offset=4), lineno=292, col_offset=4), For(Name('worker', Store(), lineno=294, col_offset=8), Name('processes', Load(), lineno=294, col_offset=18), [Assert(UnaryOp(Not(), Call(Attribute(Name('worker', Load(), lineno=295, col_offset=19), 'is_alive', Load(), lineno=295, col_offset=19), [], [], None, None, lineno=295, col_offset=19), lineno=295, col_offset=15), None, lineno=295, col_offset=8)], [], lineno=294, col_offset=4), Print(None, [Str('\tgarbage collection succeeded\n', lineno=297, col_offset=10)], True, lineno=297, col_offset=4)], [], lineno=48, col_offset=0), If(Compare(Name('__name__', Load(), lineno=300, col_offset=3), [Eq()], [Str('__main__', lineno=300, col_offset=15)], lineno=300, col_offset=3), [Expr(Call(Attribute(Name('multiprocessing', Load(), lineno=301, col_offset=4), 'freeze_support', Load(), lineno=301, col_offset=4), [], [], None, None, lineno=301, col_offset=4), lineno=301, col_offset=4), Assert(Compare(Call(Name('len', Load(), lineno=303, col_offset=11), [Attribute(Name('sys', Load(), lineno=303, col_offset=15), 'argv', Load(), lineno=303, col_offset=15)], [], None, None, lineno=303, col_offset=11), [In()], [Tuple([Num(1, lineno=303, col_offset=29), Num(2, lineno=303, col_offset=32)], Load(), lineno=303, col_offset=29)], lineno=303, col_offset=11), None, lineno=303, col_offset=4), If(BoolOp(Or(), [Compare(Call(Name('len', Load(), lineno=305, col_offset=7), [Attribute(Name('sys', Load(), lineno=305, col_offset=11), 'argv', Load(), lineno=305, col_offset=11)], [], None, None, lineno=305, col_offset=7), [Eq()], [Num(1, lineno=305, col_offset=24)], lineno=305, col_offset=7), Compare(Subscript(Attribute(Name('sys', Load(), lineno=305, col_offset=29), 'argv', Load(), lineno=305, col_offset=29), Index(Num(1, lineno=305, col_offset=38)), Load(), lineno=305, col_offset=29), [Eq()], [Str('processes', lineno=305, col_offset=44)], lineno=305, col_offset=29)], lineno=305, col_offset=7), [Print(None, [Call(Attribute(Str(' Using processes ', lineno=306, col_offset=14), 'center', Load(), lineno=306, col_offset=14), [Num(79, lineno=306, col_offset=41), Str('-', lineno=306, col_offset=45)], [], None, None, lineno=306, col_offset=14)], True, lineno=306, col_offset=8)], [If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=307, col_offset=9), 'argv', Load(), lineno=307, col_offset=9), Index(Num(1, lineno=307, col_offset=18)), Load(), lineno=307, col_offset=9), [Eq()], [Str('threads', lineno=307, col_offset=24)], lineno=307, col_offset=9), [Print(None, [Call(Attribute(Str(' Using threads ', lineno=308, col_offset=14), 'center', Load(), lineno=308, col_offset=14), [Num(79, lineno=308, col_offset=39), Str('-', lineno=308, col_offset=43)], [], None, None, lineno=308, col_offset=14)], True, lineno=308, col_offset=8), Import([alias('multiprocessing.dummy', 'multiprocessing')], lineno=309, col_offset=8)], [Print(None, [BinOp(Str('Usage:\n\t%s [processes | threads]', lineno=311, col_offset=14), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=311, col_offset=53), 'argv', Load(), lineno=311, col_offset=53), Index(Num(0, lineno=311, col_offset=62)), Load(), lineno=311, col_offset=53), lineno=311, col_offset=14)], True, lineno=311, col_offset=8), Raise(Call(Name('SystemExit', Load(), lineno=312, col_offset=14), [Num(2, lineno=312, col_offset=25)], [], None, None, lineno=312, col_offset=14), None, None, lineno=312, col_offset=8)], lineno=307, col_offset=9)], lineno=305, col_offset=4), Expr(Call(Name('test', Load(), lineno=314, col_offset=4), [], [], None, None, lineno=314, col_offset=4), lineno=314, col_offset=4)], [], lineno=300, col_offset=0)])
