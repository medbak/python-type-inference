Module([Expr(Str('Framework for command line interfaces like CVS.  See class CmdFrameWork.', lineno=1, col_offset=0), lineno=1, col_offset=0), ClassDef('CommandFrameWork', [], [Expr(Str("Framework class for command line interfaces like CVS.\n\n    The general command line structure is\n\n            command [flags] subcommand [subflags] [argument] ...\n\n    There's a class variable GlobalFlags which specifies the\n    global flags options.  Subcommands are defined by defining\n    methods named do_<subcommand>.  Flags for the subcommand are\n    defined by defining class or instance variables named\n    flags_<subcommand>.  If there's no command, method default()\n    is called.  The __doc__ strings for the do_ methods are used\n    for the usage message, printed after the general usage message\n    which is the class variable UsageMessage.  The class variable\n    PostUsageMessage is printed after all the do_ methods' __doc__\n    strings.  The method's return value can be a suggested exit\n    status.  [XXX Need to rewrite this to clarify it.]\n\n    Common usage is to derive a class, instantiate it, and then call its\n    run() method; by default this takes its arguments from sys.argv[1:].\n    ", lineno=26, col_offset=-1), lineno=26, col_offset=-1), Assign([Name('UsageMessage', Store(), lineno=28, col_offset=4)], Str('usage: (name)s [flags] subcommand [subflags] [argument] ...', lineno=29, col_offset=6), lineno=28, col_offset=4), Assign([Name('PostUsageMessage', Store(), lineno=31, col_offset=4)], Name('None', Load(), lineno=31, col_offset=23), lineno=31, col_offset=4), Assign([Name('GlobalFlags', Store(), lineno=33, col_offset=4)], Str('', lineno=33, col_offset=18), lineno=33, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=35, col_offset=17)], None, None, []), [Expr(Str('Constructor, present for completeness.', lineno=36, col_offset=8), lineno=36, col_offset=8), Pass( lineno=37, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=39, col_offset=12), Name('args', Param(), lineno=39, col_offset=18)], None, None, [Name('None', Load(), lineno=39, col_offset=25)]), [Expr(Str('Process flags, subcommand and options, then run it.', lineno=40, col_offset=8), lineno=40, col_offset=8), Import([alias('getopt', None), alias('sys', None)], lineno=41, col_offset=8), If(Compare(Name('args', Load(), lineno=42, col_offset=11), [Is()], [Name('None', Load(), lineno=42, col_offset=19)], lineno=42, col_offset=11), [Assign([Name('args', Store(), lineno=42, col_offset=25)], Subscript(Attribute(Name('sys', Load(), lineno=42, col_offset=32), 'argv', Load(), lineno=42, col_offset=32), Slice(Num(1, lineno=42, col_offset=41), None, None), Load(), lineno=42, col_offset=32), lineno=42, col_offset=25)], [], lineno=42, col_offset=8), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=44, col_offset=12), Name('args', Store(), lineno=44, col_offset=18)], Store(), lineno=44, col_offset=12)], Call(Attribute(Name('getopt', Load(), lineno=44, col_offset=25), 'getopt', Load(), lineno=44, col_offset=25), [Name('args', Load(), lineno=44, col_offset=39), Attribute(Name('self', Load(), lineno=44, col_offset=45), 'GlobalFlags', Load(), lineno=44, col_offset=45)], [], None, None, lineno=44, col_offset=25), lineno=44, col_offset=12)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=45, col_offset=15), 'error', Load(), lineno=45, col_offset=15), Name('msg', Store(), lineno=45, col_offset=29), [Return(Call(Attribute(Name('self', Load(), lineno=46, col_offset=19), 'usage', Load(), lineno=46, col_offset=19), [Name('msg', Load(), lineno=46, col_offset=30)], [], None, None, lineno=46, col_offset=19), lineno=46, col_offset=12)], lineno=45, col_offset=8)], [], lineno=43, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=47, col_offset=8), 'options', Load(), lineno=47, col_offset=8), [Name('opts', Load(), lineno=47, col_offset=21)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), If(UnaryOp(Not(), Name('args', Load(), lineno=48, col_offset=15), lineno=48, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=12), 'ready', Load(), lineno=49, col_offset=12), [], [], None, None, lineno=49, col_offset=12), lineno=49, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=50, col_offset=19), 'default', Load(), lineno=50, col_offset=19), [], [], None, None, lineno=50, col_offset=19), lineno=50, col_offset=12)], [Assign([Name('cmd', Store(), lineno=52, col_offset=12)], Subscript(Name('args', Load(), lineno=52, col_offset=18), Index(Num(0, lineno=52, col_offset=23)), Load(), lineno=52, col_offset=18), lineno=52, col_offset=12), Assign([Name('mname', Store(), lineno=53, col_offset=12)], BinOp(Str('do_', lineno=53, col_offset=20), Add(), Name('cmd', Load(), lineno=53, col_offset=28), lineno=53, col_offset=20), lineno=53, col_offset=12), Assign([Name('fname', Store(), lineno=54, col_offset=12)], BinOp(Str('flags_', lineno=54, col_offset=20), Add(), Name('cmd', Load(), lineno=54, col_offset=31), lineno=54, col_offset=20), lineno=54, col_offset=12), TryExcept([Assign([Name('method', Store(), lineno=56, col_offset=16)], Call(Name('getattr', Load(), lineno=56, col_offset=25), [Name('self', Load(), lineno=56, col_offset=33), Name('mname', Load(), lineno=56, col_offset=39)], [], None, None, lineno=56, col_offset=25), lineno=56, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=57, col_offset=19), None, [Return(Call(Attribute(Name('self', Load(), lineno=58, col_offset=23), 'usage', Load(), lineno=58, col_offset=23), [BinOp(Str('command %r unknown', lineno=58, col_offset=34), Mod(), Tuple([Name('cmd', Load(), lineno=58, col_offset=58)], Load(), lineno=58, col_offset=58), lineno=58, col_offset=34)], [], None, None, lineno=58, col_offset=23), lineno=58, col_offset=16)], lineno=57, col_offset=12)], [], lineno=55, col_offset=12), TryExcept([Assign([Name('flags', Store(), lineno=60, col_offset=16)], Call(Name('getattr', Load(), lineno=60, col_offset=24), [Name('self', Load(), lineno=60, col_offset=32), Name('fname', Load(), lineno=60, col_offset=38)], [], None, None, lineno=60, col_offset=24), lineno=60, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=61, col_offset=19), None, [Assign([Name('flags', Store(), lineno=62, col_offset=16)], Str('', lineno=62, col_offset=24), lineno=62, col_offset=16)], lineno=61, col_offset=12)], [], lineno=59, col_offset=12), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=64, col_offset=16), Name('args', Store(), lineno=64, col_offset=22)], Store(), lineno=64, col_offset=16)], Call(Attribute(Name('getopt', Load(), lineno=64, col_offset=29), 'getopt', Load(), lineno=64, col_offset=29), [Subscript(Name('args', Load(), lineno=64, col_offset=43), Slice(Num(1, lineno=64, col_offset=48), None, None), Load(), lineno=64, col_offset=43), Name('flags', Load(), lineno=64, col_offset=53)], [], None, None, lineno=64, col_offset=29), lineno=64, col_offset=16)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=65, col_offset=19), 'error', Load(), lineno=65, col_offset=19), Name('msg', Store(), lineno=65, col_offset=33), [Return(Call(Attribute(Name('self', Load(), lineno=66, col_offset=23), 'usage', Load(), lineno=66, col_offset=23), [BinOp(BinOp(Str('subcommand %s: ', lineno=67, col_offset=24), Mod(), Name('cmd', Load(), lineno=67, col_offset=44), lineno=67, col_offset=24), Add(), Call(Name('str', Load(), lineno=67, col_offset=50), [Name('msg', Load(), lineno=67, col_offset=54)], [], None, None, lineno=67, col_offset=50), lineno=67, col_offset=24)], [], None, None, lineno=66, col_offset=23), lineno=66, col_offset=16)], lineno=65, col_offset=12)], [], lineno=63, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=12), 'ready', Load(), lineno=68, col_offset=12), [], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12), Return(Call(Name('method', Load(), lineno=69, col_offset=19), [Name('opts', Load(), lineno=69, col_offset=26), Name('args', Load(), lineno=69, col_offset=32)], [], None, None, lineno=69, col_offset=19), lineno=69, col_offset=12)], lineno=48, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('options', arguments([Name('self', Param(), lineno=71, col_offset=16), Name('opts', Param(), lineno=71, col_offset=22)], None, None, []), [Expr(Str('Process the options retrieved by getopt.\n        Override this if you have any options.', lineno=73, col_offset=-1), lineno=73, col_offset=-1), If(Name('opts', Load(), lineno=74, col_offset=11), [Print(None, [BinOp(Str('-', lineno=75, col_offset=18), Mult(), Num(40, lineno=75, col_offset=22), lineno=75, col_offset=18)], True, lineno=75, col_offset=12), Print(None, [Str('Options:', lineno=76, col_offset=18)], True, lineno=76, col_offset=12), For(Tuple([Name('o', Store(), lineno=77, col_offset=16), Name('a', Store(), lineno=77, col_offset=19)], Store(), lineno=77, col_offset=16), Name('opts', Load(), lineno=77, col_offset=24), [Print(None, [Str('option', lineno=78, col_offset=22), Name('o', Load(), lineno=78, col_offset=32), Str('value', lineno=78, col_offset=35), Call(Name('repr', Load(), lineno=78, col_offset=44), [Name('a', Load(), lineno=78, col_offset=49)], [], None, None, lineno=78, col_offset=44)], True, lineno=78, col_offset=16)], [], lineno=77, col_offset=12), Print(None, [BinOp(Str('-', lineno=79, col_offset=18), Mult(), Num(40, lineno=79, col_offset=22), lineno=79, col_offset=18)], True, lineno=79, col_offset=12)], [], lineno=74, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('ready', arguments([Name('self', Param(), lineno=81, col_offset=14)], None, None, []), [Expr(Str('Called just before calling the subcommand.', lineno=82, col_offset=8), lineno=82, col_offset=8), Pass( lineno=83, col_offset=8)], [], lineno=81, col_offset=4), FunctionDef('usage', arguments([Name('self', Param(), lineno=85, col_offset=14), Name('msg', Param(), lineno=85, col_offset=20)], None, None, [Name('None', Load(), lineno=85, col_offset=26)]), [Expr(Str('Print usage message.  Return suitable exit code (2).', lineno=86, col_offset=8), lineno=86, col_offset=8), If(Name('msg', Load(), lineno=87, col_offset=11), [Print(None, [Name('msg', Load(), lineno=87, col_offset=22)], True, lineno=87, col_offset=16)], [], lineno=87, col_offset=8), Print(None, [BinOp(Attribute(Name('self', Load(), lineno=88, col_offset=14), 'UsageMessage', Load(), lineno=88, col_offset=14), Mod(), Dict([Str('name', lineno=88, col_offset=35)], [Attribute(Attribute(Name('self', Load(), lineno=88, col_offset=43), '__class__', Load(), lineno=88, col_offset=43), '__name__', Load(), lineno=88, col_offset=43)], lineno=88, col_offset=34), lineno=88, col_offset=14)], True, lineno=88, col_offset=8), Assign([Name('docstrings', Store(), lineno=89, col_offset=8)], Dict([], [], lineno=89, col_offset=21), lineno=89, col_offset=8), Assign([Name('c', Store(), lineno=90, col_offset=8)], Attribute(Name('self', Load(), lineno=90, col_offset=12), '__class__', Load(), lineno=90, col_offset=12), lineno=90, col_offset=8), While(Num(1, lineno=91, col_offset=14), [For(Name('name', Store(), lineno=92, col_offset=16), Call(Name('dir', Load(), lineno=92, col_offset=24), [Name('c', Load(), lineno=92, col_offset=28)], [], None, None, lineno=92, col_offset=24), [If(Compare(Subscript(Name('name', Load(), lineno=93, col_offset=19), Slice(None, Num(3, lineno=93, col_offset=25), None), Load(), lineno=93, col_offset=19), [Eq()], [Str('do_', lineno=93, col_offset=31)], lineno=93, col_offset=19), [If(Call(Attribute(Name('docstrings', Load(), lineno=94, col_offset=23), 'has_key', Load(), lineno=94, col_offset=23), [Name('name', Load(), lineno=94, col_offset=42)], [], None, None, lineno=94, col_offset=23), [Continue( lineno=95, col_offset=24)], [], lineno=94, col_offset=20), TryExcept([Assign([Name('doc', Store(), lineno=97, col_offset=24)], Attribute(Call(Name('getattr', Load(), lineno=97, col_offset=30), [Name('c', Load(), lineno=97, col_offset=38), Name('name', Load(), lineno=97, col_offset=41)], [], None, None, lineno=97, col_offset=30), '__doc__', Load(), lineno=97, col_offset=30), lineno=97, col_offset=24)], [ExceptHandler(None, None, [Assign([Name('doc', Store(), lineno=99, col_offset=24)], Name('None', Load(), lineno=99, col_offset=30), lineno=99, col_offset=24)], lineno=98, col_offset=20)], [], lineno=96, col_offset=20), If(Name('doc', Load(), lineno=100, col_offset=23), [Assign([Subscript(Name('docstrings', Load(), lineno=101, col_offset=24), Index(Name('name', Load(), lineno=101, col_offset=35)), Store(), lineno=101, col_offset=24)], Name('doc', Load(), lineno=101, col_offset=43), lineno=101, col_offset=24)], [], lineno=100, col_offset=20)], [], lineno=93, col_offset=16)], [], lineno=92, col_offset=12), If(UnaryOp(Not(), Attribute(Name('c', Load(), lineno=102, col_offset=19), '__bases__', Load(), lineno=102, col_offset=19), lineno=102, col_offset=15), [Break( lineno=103, col_offset=16)], [], lineno=102, col_offset=12), Assign([Name('c', Store(), lineno=104, col_offset=12)], Subscript(Attribute(Name('c', Load(), lineno=104, col_offset=16), '__bases__', Load(), lineno=104, col_offset=16), Index(Num(0, lineno=104, col_offset=28)), Load(), lineno=104, col_offset=16), lineno=104, col_offset=12)], [], lineno=91, col_offset=8), If(Name('docstrings', Load(), lineno=105, col_offset=11), [Print(None, [Str('where subcommand can be:', lineno=106, col_offset=18)], True, lineno=106, col_offset=12), Assign([Name('names', Store(), lineno=107, col_offset=12)], Call(Attribute(Name('docstrings', Load(), lineno=107, col_offset=20), 'keys', Load(), lineno=107, col_offset=20), [], [], None, None, lineno=107, col_offset=20), lineno=107, col_offset=12), Expr(Call(Attribute(Name('names', Load(), lineno=108, col_offset=12), 'sort', Load(), lineno=108, col_offset=12), [], [], None, None, lineno=108, col_offset=12), lineno=108, col_offset=12), For(Name('name', Store(), lineno=109, col_offset=16), Name('names', Load(), lineno=109, col_offset=24), [Print(None, [Subscript(Name('docstrings', Load(), lineno=110, col_offset=22), Index(Name('name', Load(), lineno=110, col_offset=33)), Load(), lineno=110, col_offset=22)], True, lineno=110, col_offset=16)], [], lineno=109, col_offset=12)], [], lineno=105, col_offset=8), If(Attribute(Name('self', Load(), lineno=111, col_offset=11), 'PostUsageMessage', Load(), lineno=111, col_offset=11), [Print(None, [Attribute(Name('self', Load(), lineno=112, col_offset=18), 'PostUsageMessage', Load(), lineno=112, col_offset=18)], True, lineno=112, col_offset=12)], [], lineno=111, col_offset=8), Return(Num(2, lineno=113, col_offset=15), lineno=113, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('default', arguments([Name('self', Param(), lineno=115, col_offset=16)], None, None, []), [Expr(Str('Default method, called when no subcommand is given.\n        You should always override this.', lineno=117, col_offset=-1), lineno=117, col_offset=-1), Print(None, [Str('Nobody expects the Spanish Inquisition!', lineno=118, col_offset=14)], True, lineno=118, col_offset=8)], [], lineno=115, col_offset=4)], [], lineno=4, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Expr(Str('Test script -- called when this module is run as a script.', lineno=122, col_offset=4), lineno=122, col_offset=4), Import([alias('sys', None)], lineno=123, col_offset=4), ClassDef('Hello', [Name('CommandFrameWork', Load(), lineno=124, col_offset=16)], [FunctionDef('do_hello', arguments([Name('self', Param(), lineno=125, col_offset=21), Name('opts', Param(), lineno=125, col_offset=27), Name('args', Param(), lineno=125, col_offset=33)], None, None, []), [Expr(Str("hello -- print 'hello world', needs no arguments", lineno=126, col_offset=12), lineno=126, col_offset=12), Print(None, [Str('Hello, world', lineno=127, col_offset=18)], True, lineno=127, col_offset=12)], [], lineno=125, col_offset=8)], [], lineno=124, col_offset=4), Assign([Name('x', Store(), lineno=128, col_offset=4)], Call(Name('Hello', Load(), lineno=128, col_offset=8), [], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=4), Assign([Name('tests', Store(), lineno=129, col_offset=4)], List([List([], Load(), lineno=130, col_offset=12), List([Str('hello', lineno=131, col_offset=13)], Load(), lineno=131, col_offset=12), List([Str('spam', lineno=132, col_offset=13)], Load(), lineno=132, col_offset=12), List([Str('-x', lineno=133, col_offset=13)], Load(), lineno=133, col_offset=12), List([Str('hello', lineno=134, col_offset=13), Str('-x', lineno=134, col_offset=22)], Load(), lineno=134, col_offset=12), Name('None', Load(), lineno=135, col_offset=12)], Load(), lineno=129, col_offset=12), lineno=129, col_offset=4), For(Name('t', Store(), lineno=137, col_offset=8), Name('tests', Load(), lineno=137, col_offset=13), [Print(None, [BinOp(Str('-', lineno=138, col_offset=14), Mult(), Num(10, lineno=138, col_offset=18), lineno=138, col_offset=14), Name('t', Load(), lineno=138, col_offset=22), BinOp(Str('-', lineno=138, col_offset=25), Mult(), Num(10, lineno=138, col_offset=29), lineno=138, col_offset=25)], True, lineno=138, col_offset=8), Assign([Name('sts', Store(), lineno=139, col_offset=8)], Call(Attribute(Name('x', Load(), lineno=139, col_offset=14), 'run', Load(), lineno=139, col_offset=14), [Name('t', Load(), lineno=139, col_offset=20)], [], None, None, lineno=139, col_offset=14), lineno=139, col_offset=8), Print(None, [Str('Exit status:', lineno=140, col_offset=14), Call(Name('repr', Load(), lineno=140, col_offset=30), [Name('sts', Load(), lineno=140, col_offset=35)], [], None, None, lineno=140, col_offset=30)], True, lineno=140, col_offset=8)], [], lineno=137, col_offset=4)], [], lineno=121, col_offset=0), If(Compare(Name('__name__', Load(), lineno=143, col_offset=3), [Eq()], [Str('__main__', lineno=143, col_offset=15)], lineno=143, col_offset=3), [Expr(Call(Name('test', Load(), lineno=144, col_offset=4), [], [], None, None, lineno=144, col_offset=4), lineno=144, col_offset=4)], [], lineno=143, col_offset=0)])
