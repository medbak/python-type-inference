Module([Expr(Str('distutils.dir_util\n\nUtility functions for manipulating directories and directory trees.', lineno=3, col_offset=-1), lineno=3, col_offset=-1), Assign([Name('__revision__', Store(), lineno=5, col_offset=0)], Str('$Id: dir_util.py 86609 2010-11-20 20:02:41Z eric.araujo $', lineno=5, col_offset=15), lineno=5, col_offset=0), Import([alias('os', None)], lineno=7, col_offset=0), Import([alias('errno', None)], lineno=8, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsFileError', None), alias('DistutilsInternalError', None)], 0, lineno=9, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=10, col_offset=0), Assign([Name('_path_created', Store(), lineno=14, col_offset=0)], Dict([], [], lineno=14, col_offset=16), lineno=14, col_offset=0), FunctionDef('mkpath', arguments([Name('name', Param(), lineno=19, col_offset=11), Name('mode', Param(), lineno=19, col_offset=17), Name('verbose', Param(), lineno=19, col_offset=28), Name('dry_run', Param(), lineno=19, col_offset=39)], None, None, [Num(511, lineno=19, col_offset=22), Num(1, lineno=19, col_offset=36), Num(0, lineno=19, col_offset=47)]), [Expr(Str("Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, print a one-line summary of each mkdir to stdout.\n    Return the list of directories actually created.\n    ", lineno=28, col_offset=-1), lineno=28, col_offset=-1), Global(['_path_created'], lineno=30, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=33, col_offset=11), [Name('name', Load(), lineno=33, col_offset=22), Name('basestring', Load(), lineno=33, col_offset=28)], [], None, None, lineno=33, col_offset=11), lineno=33, col_offset=7), [Raise(Name('DistutilsInternalError', Load(), lineno=34, col_offset=14), BinOp(Str("mkpath: 'name' must be a string (got %r)", lineno=35, col_offset=14), Mod(), Tuple([Name('name', Load(), lineno=35, col_offset=60)], Load(), lineno=35, col_offset=60), lineno=35, col_offset=14), None, lineno=34, col_offset=8)], [], lineno=33, col_offset=4), Assign([Name('name', Store(), lineno=42, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=42, col_offset=11), 'path', Load(), lineno=42, col_offset=11), 'normpath', Load(), lineno=42, col_offset=11), [Name('name', Load(), lineno=42, col_offset=28)], [], None, None, lineno=42, col_offset=11), lineno=42, col_offset=4), Assign([Name('created_dirs', Store(), lineno=43, col_offset=4)], List([], Load(), lineno=43, col_offset=19), lineno=43, col_offset=4), If(BoolOp(Or(), [Call(Attribute(Attribute(Name('os', Load(), lineno=44, col_offset=7), 'path', Load(), lineno=44, col_offset=7), 'isdir', Load(), lineno=44, col_offset=7), [Name('name', Load(), lineno=44, col_offset=21)], [], None, None, lineno=44, col_offset=7), Compare(Name('name', Load(), lineno=44, col_offset=30), [Eq()], [Str('', lineno=44, col_offset=38)], lineno=44, col_offset=30)], lineno=44, col_offset=7), [Return(Name('created_dirs', Load(), lineno=45, col_offset=15), lineno=45, col_offset=8)], [], lineno=44, col_offset=4), If(Call(Attribute(Name('_path_created', Load(), lineno=46, col_offset=7), 'get', Load(), lineno=46, col_offset=7), [Call(Attribute(Attribute(Name('os', Load(), lineno=46, col_offset=25), 'path', Load(), lineno=46, col_offset=25), 'abspath', Load(), lineno=46, col_offset=25), [Name('name', Load(), lineno=46, col_offset=41)], [], None, None, lineno=46, col_offset=25)], [], None, None, lineno=46, col_offset=7), [Return(Name('created_dirs', Load(), lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=46, col_offset=4), Assign([Tuple([Name('head', Store(), lineno=49, col_offset=5), Name('tail', Store(), lineno=49, col_offset=11)], Store(), lineno=49, col_offset=5)], Call(Attribute(Attribute(Name('os', Load(), lineno=49, col_offset=19), 'path', Load(), lineno=49, col_offset=19), 'split', Load(), lineno=49, col_offset=19), [Name('name', Load(), lineno=49, col_offset=33)], [], None, None, lineno=49, col_offset=19), lineno=49, col_offset=4), Assign([Name('tails', Store(), lineno=50, col_offset=4)], List([Name('tail', Load(), lineno=50, col_offset=13)], Load(), lineno=50, col_offset=12), lineno=50, col_offset=4), While(BoolOp(And(), [Name('head', Load(), lineno=52, col_offset=10), Name('tail', Load(), lineno=52, col_offset=19), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=52, col_offset=32), 'path', Load(), lineno=52, col_offset=32), 'isdir', Load(), lineno=52, col_offset=32), [Name('head', Load(), lineno=52, col_offset=46)], [], None, None, lineno=52, col_offset=32), lineno=52, col_offset=28)], lineno=52, col_offset=10), [Assign([Tuple([Name('head', Store(), lineno=53, col_offset=9), Name('tail', Store(), lineno=53, col_offset=15)], Store(), lineno=53, col_offset=9)], Call(Attribute(Attribute(Name('os', Load(), lineno=53, col_offset=23), 'path', Load(), lineno=53, col_offset=23), 'split', Load(), lineno=53, col_offset=23), [Name('head', Load(), lineno=53, col_offset=37)], [], None, None, lineno=53, col_offset=23), lineno=53, col_offset=8), Expr(Call(Attribute(Name('tails', Load(), lineno=54, col_offset=8), 'insert', Load(), lineno=54, col_offset=8), [Num(0, lineno=54, col_offset=21), Name('tail', Load(), lineno=54, col_offset=24)], [], None, None, lineno=54, col_offset=8), lineno=54, col_offset=8)], [], lineno=52, col_offset=4), For(Name('d', Store(), lineno=59, col_offset=8), Name('tails', Load(), lineno=59, col_offset=13), [Assign([Name('head', Store(), lineno=61, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=61, col_offset=15), 'path', Load(), lineno=61, col_offset=15), 'join', Load(), lineno=61, col_offset=15), [Name('head', Load(), lineno=61, col_offset=28), Name('d', Load(), lineno=61, col_offset=34)], [], None, None, lineno=61, col_offset=15), lineno=61, col_offset=8), Assign([Name('abs_head', Store(), lineno=62, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=62, col_offset=19), 'path', Load(), lineno=62, col_offset=19), 'abspath', Load(), lineno=62, col_offset=19), [Name('head', Load(), lineno=62, col_offset=35)], [], None, None, lineno=62, col_offset=19), lineno=62, col_offset=8), If(Call(Attribute(Name('_path_created', Load(), lineno=64, col_offset=11), 'get', Load(), lineno=64, col_offset=11), [Name('abs_head', Load(), lineno=64, col_offset=29)], [], None, None, lineno=64, col_offset=11), [Continue( lineno=65, col_offset=12)], [], lineno=64, col_offset=8), If(Compare(Name('verbose', Load(), lineno=67, col_offset=11), [GtE()], [Num(1, lineno=67, col_offset=22)], lineno=67, col_offset=11), [Expr(Call(Attribute(Name('log', Load(), lineno=68, col_offset=12), 'info', Load(), lineno=68, col_offset=12), [Str('creating %s', lineno=68, col_offset=21), Name('head', Load(), lineno=68, col_offset=36)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12)], [], lineno=67, col_offset=8), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=70, col_offset=15), lineno=70, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=72, col_offset=16), 'mkdir', Load(), lineno=72, col_offset=16), [Name('head', Load(), lineno=72, col_offset=25), Name('mode', Load(), lineno=72, col_offset=31)], [], None, None, lineno=72, col_offset=16), lineno=72, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=73, col_offset=19), Name('exc', Store(), lineno=73, col_offset=28), [If(UnaryOp(Not(), BoolOp(And(), [Compare(Attribute(Name('exc', Load(), lineno=74, col_offset=24), 'errno', Load(), lineno=74, col_offset=24), [Eq()], [Attribute(Name('errno', Load(), lineno=74, col_offset=37), 'EEXIST', Load(), lineno=74, col_offset=37)], lineno=74, col_offset=24), Call(Attribute(Attribute(Name('os', Load(), lineno=74, col_offset=54), 'path', Load(), lineno=74, col_offset=54), 'isdir', Load(), lineno=74, col_offset=54), [Name('head', Load(), lineno=74, col_offset=68)], [], None, None, lineno=74, col_offset=54)], lineno=74, col_offset=24), lineno=74, col_offset=19), [Raise(Call(Name('DistutilsFileError', Load(), lineno=75, col_offset=26), [BinOp(Str("could not create '%s': %s", lineno=76, col_offset=26), Mod(), Tuple([Name('head', Load(), lineno=76, col_offset=57), Subscript(Attribute(Name('exc', Load(), lineno=76, col_offset=63), 'args', Load(), lineno=76, col_offset=63), Index(Num(-1, lineno=76, col_offset=73)), Load(), lineno=76, col_offset=63)], Load(), lineno=76, col_offset=57), lineno=76, col_offset=26)], [], None, None, lineno=75, col_offset=26), None, None, lineno=75, col_offset=20)], [], lineno=74, col_offset=16)], lineno=73, col_offset=12)], [], lineno=71, col_offset=12), Expr(Call(Attribute(Name('created_dirs', Load(), lineno=77, col_offset=12), 'append', Load(), lineno=77, col_offset=12), [Name('head', Load(), lineno=77, col_offset=32)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12)], [], lineno=70, col_offset=8), Assign([Subscript(Name('_path_created', Load(), lineno=79, col_offset=8), Index(Name('abs_head', Load(), lineno=79, col_offset=22)), Store(), lineno=79, col_offset=8)], Num(1, lineno=79, col_offset=34), lineno=79, col_offset=8)], [], lineno=59, col_offset=4), Return(Name('created_dirs', Load(), lineno=80, col_offset=11), lineno=80, col_offset=4)], [], lineno=19, col_offset=0), FunctionDef('create_tree', arguments([Name('base_dir', Param(), lineno=82, col_offset=16), Name('files', Param(), lineno=82, col_offset=26), Name('mode', Param(), lineno=82, col_offset=33), Name('verbose', Param(), lineno=82, col_offset=44), Name('dry_run', Param(), lineno=82, col_offset=55)], None, None, [Num(511, lineno=82, col_offset=38), Num(1, lineno=82, col_offset=52), Num(0, lineno=82, col_offset=63)]), [Expr(Str("Create all the empty directories under 'base_dir' needed to put 'files'\n    there.\n\n    'base_dir' is just the a name of a directory which doesn't necessarily\n    exist yet; 'files' is a list of filenames to be interpreted relative to\n    'base_dir'.  'base_dir' + the directory portion of every file in 'files'\n    will be created if it doesn't already exist.  'mode', 'verbose' and\n    'dry_run' flags are as for 'mkpath()'.\n    ", lineno=91, col_offset=-1), lineno=91, col_offset=-1), Assign([Name('need_dir', Store(), lineno=93, col_offset=4)], Dict([], [], lineno=93, col_offset=15), lineno=93, col_offset=4), For(Name('file', Store(), lineno=94, col_offset=8), Name('files', Load(), lineno=94, col_offset=16), [Assign([Subscript(Name('need_dir', Load(), lineno=95, col_offset=8), Index(Call(Attribute(Attribute(Name('os', Load(), lineno=95, col_offset=17), 'path', Load(), lineno=95, col_offset=17), 'join', Load(), lineno=95, col_offset=17), [Name('base_dir', Load(), lineno=95, col_offset=30), Call(Attribute(Attribute(Name('os', Load(), lineno=95, col_offset=40), 'path', Load(), lineno=95, col_offset=40), 'dirname', Load(), lineno=95, col_offset=40), [Name('file', Load(), lineno=95, col_offset=56)], [], None, None, lineno=95, col_offset=40)], [], None, None, lineno=95, col_offset=17)), Store(), lineno=95, col_offset=8)], Num(1, lineno=95, col_offset=66), lineno=95, col_offset=8)], [], lineno=94, col_offset=4), Assign([Name('need_dirs', Store(), lineno=96, col_offset=4)], Call(Attribute(Name('need_dir', Load(), lineno=96, col_offset=16), 'keys', Load(), lineno=96, col_offset=16), [], [], None, None, lineno=96, col_offset=16), lineno=96, col_offset=4), Expr(Call(Attribute(Name('need_dirs', Load(), lineno=97, col_offset=4), 'sort', Load(), lineno=97, col_offset=4), [], [], None, None, lineno=97, col_offset=4), lineno=97, col_offset=4), For(Name('dir', Store(), lineno=100, col_offset=8), Name('need_dirs', Load(), lineno=100, col_offset=15), [Expr(Call(Name('mkpath', Load(), lineno=101, col_offset=8), [Name('dir', Load(), lineno=101, col_offset=15), Name('mode', Load(), lineno=101, col_offset=20)], [keyword('verbose', Name('verbose', Load(), lineno=101, col_offset=34)), keyword('dry_run', Name('dry_run', Load(), lineno=101, col_offset=51))], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8)], [], lineno=100, col_offset=4)], [], lineno=82, col_offset=0), FunctionDef('copy_tree', arguments([Name('src', Param(), lineno=103, col_offset=14), Name('dst', Param(), lineno=103, col_offset=19), Name('preserve_mode', Param(), lineno=103, col_offset=24), Name('preserve_times', Param(), lineno=103, col_offset=41), Name('preserve_symlinks', Param(), lineno=104, col_offset=14), Name('update', Param(), lineno=104, col_offset=35), Name('verbose', Param(), lineno=104, col_offset=45), Name('dry_run', Param(), lineno=104, col_offset=56)], None, None, [Num(1, lineno=103, col_offset=38), Num(1, lineno=103, col_offset=56), Num(0, lineno=104, col_offset=32), Num(0, lineno=104, col_offset=42), Num(1, lineno=104, col_offset=53), Num(0, lineno=104, col_offset=64)]), [Expr(Str("Copy an entire directory tree 'src' to a new location 'dst'.\n\n    Both 'src' and 'dst' must be directory names.  If 'src' is not a\n    directory, raise DistutilsFileError.  If 'dst' does not exist, it is\n    created with 'mkpath()'.  The end result of the copy is that every\n    file in 'src' is copied to 'dst', and directories under 'src' are\n    recursively copied to 'dst'.  Return the list of files that were\n    copied or might have been copied, using their output name.  The\n    return value is unaffected by 'update' or 'dry_run': it is simply\n    the list of all files under 'src', with the names changed to be\n    under 'dst'.\n\n    'preserve_mode' and 'preserve_times' are the same as for\n    'copy_file'; note that they only apply to regular files, not to\n    directories.  If 'preserve_symlinks' is true, symlinks will be\n    copied as symlinks (on platforms that support them!); otherwise\n    (the default), the destination of the symlink will be copied.\n    'update' and 'verbose' are the same as for 'copy_file'.\n    ", lineno=123, col_offset=-1), lineno=123, col_offset=-1), ImportFrom('distutils.file_util', [alias('copy_file', None)], 0, lineno=124, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Name('dry_run', Load(), lineno=126, col_offset=11), lineno=126, col_offset=7), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=126, col_offset=27), 'path', Load(), lineno=126, col_offset=27), 'isdir', Load(), lineno=126, col_offset=27), [Name('src', Load(), lineno=126, col_offset=41)], [], None, None, lineno=126, col_offset=27), lineno=126, col_offset=23)], lineno=126, col_offset=7), [Raise(Name('DistutilsFileError', Load(), lineno=127, col_offset=14), BinOp(Str("cannot copy tree '%s': not a directory", lineno=128, col_offset=14), Mod(), Name('src', Load(), lineno=128, col_offset=57), lineno=128, col_offset=14), None, lineno=127, col_offset=8)], [], lineno=126, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=130, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=130, col_offset=16), 'listdir', Load(), lineno=130, col_offset=16), [Name('src', Load(), lineno=130, col_offset=27)], [], None, None, lineno=130, col_offset=16), lineno=130, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=131, col_offset=11), 'error', Load(), lineno=131, col_offset=11), Tuple([Name('errno', Store(), lineno=131, col_offset=22), Name('errstr', Store(), lineno=131, col_offset=29)], Store(), lineno=131, col_offset=22), [If(Name('dry_run', Load(), lineno=132, col_offset=11), [Assign([Name('names', Store(), lineno=133, col_offset=12)], List([], Load(), lineno=133, col_offset=20), lineno=133, col_offset=12)], [Raise(Name('DistutilsFileError', Load(), lineno=135, col_offset=18), BinOp(Str("error listing files in '%s': %s", lineno=136, col_offset=18), Mod(), Tuple([Name('src', Load(), lineno=136, col_offset=55), Name('errstr', Load(), lineno=136, col_offset=60)], Load(), lineno=136, col_offset=55), lineno=136, col_offset=18), None, lineno=135, col_offset=12)], lineno=132, col_offset=8)], lineno=131, col_offset=4)], [], lineno=129, col_offset=4), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=138, col_offset=11), lineno=138, col_offset=7), [Expr(Call(Name('mkpath', Load(), lineno=139, col_offset=8), [Name('dst', Load(), lineno=139, col_offset=15)], [keyword('verbose', Name('verbose', Load(), lineno=139, col_offset=28))], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8)], [], lineno=138, col_offset=4), Assign([Name('outputs', Store(), lineno=141, col_offset=4)], List([], Load(), lineno=141, col_offset=14), lineno=141, col_offset=4), For(Name('n', Store(), lineno=143, col_offset=8), Name('names', Load(), lineno=143, col_offset=13), [Assign([Name('src_name', Store(), lineno=144, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=144, col_offset=19), 'path', Load(), lineno=144, col_offset=19), 'join', Load(), lineno=144, col_offset=19), [Name('src', Load(), lineno=144, col_offset=32), Name('n', Load(), lineno=144, col_offset=37)], [], None, None, lineno=144, col_offset=19), lineno=144, col_offset=8), Assign([Name('dst_name', Store(), lineno=145, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=145, col_offset=19), 'path', Load(), lineno=145, col_offset=19), 'join', Load(), lineno=145, col_offset=19), [Name('dst', Load(), lineno=145, col_offset=32), Name('n', Load(), lineno=145, col_offset=37)], [], None, None, lineno=145, col_offset=19), lineno=145, col_offset=8), If(BoolOp(And(), [Name('preserve_symlinks', Load(), lineno=147, col_offset=11), Call(Attribute(Attribute(Name('os', Load(), lineno=147, col_offset=33), 'path', Load(), lineno=147, col_offset=33), 'islink', Load(), lineno=147, col_offset=33), [Name('src_name', Load(), lineno=147, col_offset=48)], [], None, None, lineno=147, col_offset=33)], lineno=147, col_offset=11), [Assign([Name('link_dest', Store(), lineno=148, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=148, col_offset=24), 'readlink', Load(), lineno=148, col_offset=24), [Name('src_name', Load(), lineno=148, col_offset=36)], [], None, None, lineno=148, col_offset=24), lineno=148, col_offset=12), If(Compare(Name('verbose', Load(), lineno=149, col_offset=15), [GtE()], [Num(1, lineno=149, col_offset=26)], lineno=149, col_offset=15), [Expr(Call(Attribute(Name('log', Load(), lineno=150, col_offset=16), 'info', Load(), lineno=150, col_offset=16), [Str('linking %s -> %s', lineno=150, col_offset=25), Name('dst_name', Load(), lineno=150, col_offset=45), Name('link_dest', Load(), lineno=150, col_offset=55)], [], None, None, lineno=150, col_offset=16), lineno=150, col_offset=16)], [], lineno=149, col_offset=12), If(UnaryOp(Not(), Name('dry_run', Load(), lineno=151, col_offset=19), lineno=151, col_offset=15), [Expr(Call(Attribute(Name('os', Load(), lineno=152, col_offset=16), 'symlink', Load(), lineno=152, col_offset=16), [Name('link_dest', Load(), lineno=152, col_offset=27), Name('dst_name', Load(), lineno=152, col_offset=38)], [], None, None, lineno=152, col_offset=16), lineno=152, col_offset=16)], [], lineno=151, col_offset=12), Expr(Call(Attribute(Name('outputs', Load(), lineno=153, col_offset=12), 'append', Load(), lineno=153, col_offset=12), [Name('dst_name', Load(), lineno=153, col_offset=27)], [], None, None, lineno=153, col_offset=12), lineno=153, col_offset=12)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=155, col_offset=13), 'path', Load(), lineno=155, col_offset=13), 'isdir', Load(), lineno=155, col_offset=13), [Name('src_name', Load(), lineno=155, col_offset=27)], [], None, None, lineno=155, col_offset=13), [Expr(Call(Attribute(Name('outputs', Load(), lineno=156, col_offset=12), 'extend', Load(), lineno=156, col_offset=12), [Call(Name('copy_tree', Load(), lineno=157, col_offset=16), [Name('src_name', Load(), lineno=157, col_offset=26), Name('dst_name', Load(), lineno=157, col_offset=36), Name('preserve_mode', Load(), lineno=157, col_offset=46), Name('preserve_times', Load(), lineno=158, col_offset=26), Name('preserve_symlinks', Load(), lineno=158, col_offset=42), Name('update', Load(), lineno=158, col_offset=61)], [keyword('verbose', Name('verbose', Load(), lineno=159, col_offset=34)), keyword('dry_run', Name('dry_run', Load(), lineno=159, col_offset=51))], None, None, lineno=157, col_offset=16)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12)], [Expr(Call(Name('copy_file', Load(), lineno=161, col_offset=12), [Name('src_name', Load(), lineno=161, col_offset=22), Name('dst_name', Load(), lineno=161, col_offset=32), Name('preserve_mode', Load(), lineno=161, col_offset=42), Name('preserve_times', Load(), lineno=162, col_offset=22), Name('update', Load(), lineno=162, col_offset=38)], [keyword('verbose', Name('verbose', Load(), lineno=162, col_offset=54)), keyword('dry_run', Name('dry_run', Load(), lineno=163, col_offset=30))], None, None, lineno=161, col_offset=12), lineno=161, col_offset=12), Expr(Call(Attribute(Name('outputs', Load(), lineno=164, col_offset=12), 'append', Load(), lineno=164, col_offset=12), [Name('dst_name', Load(), lineno=164, col_offset=27)], [], None, None, lineno=164, col_offset=12), lineno=164, col_offset=12)], lineno=155, col_offset=13)], lineno=147, col_offset=8)], [], lineno=143, col_offset=4), Return(Name('outputs', Load(), lineno=166, col_offset=11), lineno=166, col_offset=4)], [], lineno=103, col_offset=0), FunctionDef('_build_cmdtuple', arguments([Name('path', Param(), lineno=168, col_offset=20), Name('cmdtuples', Param(), lineno=168, col_offset=26)], None, None, []), [Expr(Str('Helper for remove_tree().', lineno=169, col_offset=4), lineno=169, col_offset=4), For(Name('f', Store(), lineno=170, col_offset=8), Call(Attribute(Name('os', Load(), lineno=170, col_offset=13), 'listdir', Load(), lineno=170, col_offset=13), [Name('path', Load(), lineno=170, col_offset=24)], [], None, None, lineno=170, col_offset=13), [Assign([Name('real_f', Store(), lineno=171, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=171, col_offset=17), 'path', Load(), lineno=171, col_offset=17), 'join', Load(), lineno=171, col_offset=17), [Name('path', Load(), lineno=171, col_offset=30), Name('f', Load(), lineno=171, col_offset=35)], [], None, None, lineno=171, col_offset=17), lineno=171, col_offset=8), If(BoolOp(And(), [Call(Attribute(Attribute(Name('os', Load(), lineno=172, col_offset=11), 'path', Load(), lineno=172, col_offset=11), 'isdir', Load(), lineno=172, col_offset=11), [Name('real_f', Load(), lineno=172, col_offset=25)], [], None, None, lineno=172, col_offset=11), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=172, col_offset=41), 'path', Load(), lineno=172, col_offset=41), 'islink', Load(), lineno=172, col_offset=41), [Name('real_f', Load(), lineno=172, col_offset=56)], [], None, None, lineno=172, col_offset=41), lineno=172, col_offset=37)], lineno=172, col_offset=11), [Expr(Call(Name('_build_cmdtuple', Load(), lineno=173, col_offset=12), [Name('real_f', Load(), lineno=173, col_offset=28), Name('cmdtuples', Load(), lineno=173, col_offset=36)], [], None, None, lineno=173, col_offset=12), lineno=173, col_offset=12)], [Expr(Call(Attribute(Name('cmdtuples', Load(), lineno=175, col_offset=12), 'append', Load(), lineno=175, col_offset=12), [Tuple([Attribute(Name('os', Load(), lineno=175, col_offset=30), 'remove', Load(), lineno=175, col_offset=30), Name('real_f', Load(), lineno=175, col_offset=41)], Load(), lineno=175, col_offset=30)], [], None, None, lineno=175, col_offset=12), lineno=175, col_offset=12)], lineno=172, col_offset=8)], [], lineno=170, col_offset=4), Expr(Call(Attribute(Name('cmdtuples', Load(), lineno=176, col_offset=4), 'append', Load(), lineno=176, col_offset=4), [Tuple([Attribute(Name('os', Load(), lineno=176, col_offset=22), 'rmdir', Load(), lineno=176, col_offset=22), Name('path', Load(), lineno=176, col_offset=32)], Load(), lineno=176, col_offset=22)], [], None, None, lineno=176, col_offset=4), lineno=176, col_offset=4)], [], lineno=168, col_offset=0), FunctionDef('remove_tree', arguments([Name('directory', Param(), lineno=178, col_offset=16), Name('verbose', Param(), lineno=178, col_offset=27), Name('dry_run', Param(), lineno=178, col_offset=38)], None, None, [Num(1, lineno=178, col_offset=35), Num(0, lineno=178, col_offset=46)]), [Expr(Str("Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    ", lineno=183, col_offset=-1), lineno=183, col_offset=-1), ImportFrom('distutils.util', [alias('grok_environment_error', None)], 0, lineno=184, col_offset=4), Global(['_path_created'], lineno=185, col_offset=4), If(Compare(Name('verbose', Load(), lineno=187, col_offset=7), [GtE()], [Num(1, lineno=187, col_offset=18)], lineno=187, col_offset=7), [Expr(Call(Attribute(Name('log', Load(), lineno=188, col_offset=8), 'info', Load(), lineno=188, col_offset=8), [Str("removing '%s' (and everything under it)", lineno=188, col_offset=17), Name('directory', Load(), lineno=188, col_offset=60)], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8)], [], lineno=187, col_offset=4), If(Name('dry_run', Load(), lineno=189, col_offset=7), [Return(None, lineno=190, col_offset=8)], [], lineno=189, col_offset=4), Assign([Name('cmdtuples', Store(), lineno=191, col_offset=4)], List([], Load(), lineno=191, col_offset=16), lineno=191, col_offset=4), Expr(Call(Name('_build_cmdtuple', Load(), lineno=192, col_offset=4), [Name('directory', Load(), lineno=192, col_offset=20), Name('cmdtuples', Load(), lineno=192, col_offset=31)], [], None, None, lineno=192, col_offset=4), lineno=192, col_offset=4), For(Name('cmd', Store(), lineno=193, col_offset=8), Name('cmdtuples', Load(), lineno=193, col_offset=15), [TryExcept([Expr(Call(Subscript(Name('cmd', Load(), lineno=195, col_offset=12), Index(Num(0, lineno=195, col_offset=16)), Load(), lineno=195, col_offset=12), [Subscript(Name('cmd', Load(), lineno=195, col_offset=19), Index(Num(1, lineno=195, col_offset=23)), Load(), lineno=195, col_offset=19)], [], None, None, lineno=195, col_offset=12), lineno=195, col_offset=12), Assign([Name('abspath', Store(), lineno=197, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=197, col_offset=22), 'path', Load(), lineno=197, col_offset=22), 'abspath', Load(), lineno=197, col_offset=22), [Subscript(Name('cmd', Load(), lineno=197, col_offset=38), Index(Num(1, lineno=197, col_offset=42)), Load(), lineno=197, col_offset=38)], [], None, None, lineno=197, col_offset=22), lineno=197, col_offset=12), If(Compare(Name('abspath', Load(), lineno=198, col_offset=15), [In()], [Name('_path_created', Load(), lineno=198, col_offset=26)], lineno=198, col_offset=15), [Delete([Subscript(Name('_path_created', Load(), lineno=199, col_offset=20), Index(Name('abspath', Load(), lineno=199, col_offset=34)), Del(), lineno=199, col_offset=20)], lineno=199, col_offset=16)], [], lineno=198, col_offset=12)], [ExceptHandler(Tuple([Name('IOError', Load(), lineno=200, col_offset=16), Name('OSError', Load(), lineno=200, col_offset=25)], Load(), lineno=200, col_offset=16), Name('exc', Store(), lineno=200, col_offset=35), [Expr(Call(Attribute(Name('log', Load(), lineno=201, col_offset=12), 'warn', Load(), lineno=201, col_offset=12), [Call(Name('grok_environment_error', Load(), lineno=201, col_offset=21), [Name('exc', Load(), lineno=202, col_offset=20), BinOp(Str('error removing %s: ', lineno=202, col_offset=25), Mod(), Name('directory', Load(), lineno=202, col_offset=49), lineno=202, col_offset=25)], [], None, None, lineno=201, col_offset=21)], [], None, None, lineno=201, col_offset=12), lineno=201, col_offset=12)], lineno=200, col_offset=8)], [], lineno=194, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=178, col_offset=0), FunctionDef('ensure_relative', arguments([Name('path', Param(), lineno=204, col_offset=20)], None, None, []), [Expr(Str("Take the full path 'path', and make it a relative path.\n\n    This is useful to make 'path' the second argument to os.path.join().\n    ", lineno=208, col_offset=-1), lineno=208, col_offset=-1), Assign([Tuple([Name('drive', Store(), lineno=209, col_offset=4), Name('path', Store(), lineno=209, col_offset=11)], Store(), lineno=209, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=209, col_offset=18), 'path', Load(), lineno=209, col_offset=18), 'splitdrive', Load(), lineno=209, col_offset=18), [Name('path', Load(), lineno=209, col_offset=37)], [], None, None, lineno=209, col_offset=18), lineno=209, col_offset=4), If(Compare(Subscript(Name('path', Load(), lineno=210, col_offset=7), Slice(Num(0, lineno=210, col_offset=12), Num(1, lineno=210, col_offset=14), None), Load(), lineno=210, col_offset=7), [Eq()], [Attribute(Name('os', Load(), lineno=210, col_offset=20), 'sep', Load(), lineno=210, col_offset=20)], lineno=210, col_offset=7), [Assign([Name('path', Store(), lineno=211, col_offset=8)], BinOp(Name('drive', Load(), lineno=211, col_offset=15), Add(), Subscript(Name('path', Load(), lineno=211, col_offset=23), Slice(Num(1, lineno=211, col_offset=28), None, None), Load(), lineno=211, col_offset=23), lineno=211, col_offset=15), lineno=211, col_offset=8)], [], lineno=210, col_offset=4), Return(Name('path', Load(), lineno=212, col_offset=11), lineno=212, col_offset=4)], [], lineno=204, col_offset=0)])
