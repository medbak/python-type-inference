Module([Expr(Str('Tests for distutils.msvc9compiler.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('sys', None)], lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('os', None)], lineno=4, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsPlatformError', None)], 0, lineno=6, col_offset=0), ImportFrom('distutils.tests', [alias('support', None)], 0, lineno=7, col_offset=0), Assign([Name('_MANIFEST', Store(), lineno=9, col_offset=0)], Str('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<assembly xmlns="urn:schemas-microsoft-com:asm.v1"\n          manifestVersion="1.0">\n  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">\n    <security>\n      <requestedPrivileges>\n        <requestedExecutionLevel level="asInvoker" uiAccess="false">\n        </requestedExecutionLevel>\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n  <dependency>\n    <dependentAssembly>\n      <assemblyIdentity type="win32" name="Microsoft.VC90.CRT"\n         version="9.0.21022.8" processorArchitecture="x86"\n         publicKeyToken="XXXX">\n      </assemblyIdentity>\n    </dependentAssembly>\n  </dependency>\n  <dependency>\n    <dependentAssembly>\n      <assemblyIdentity type="win32" name="Microsoft.VC90.MFC"\n        version="9.0.21022.8" processorArchitecture="x86"\n        publicKeyToken="XXXX"></assemblyIdentity>\n    </dependentAssembly>\n  </dependency>\n</assembly>\n', lineno=37, col_offset=-1), lineno=9, col_offset=0), Assign([Name('_CLEANED_MANIFEST', Store(), lineno=39, col_offset=0)], Str('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<assembly xmlns="urn:schemas-microsoft-com:asm.v1"\n          manifestVersion="1.0">\n  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">\n    <security>\n      <requestedPrivileges>\n        <requestedExecutionLevel level="asInvoker" uiAccess="false">\n        </requestedExecutionLevel>\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n  <dependency>\n\n  </dependency>\n  <dependency>\n    <dependentAssembly>\n      <assemblyIdentity type="win32" name="Microsoft.VC90.MFC"\n        version="9.0.21022.8" processorArchitecture="x86"\n        publicKeyToken="XXXX"></assemblyIdentity>\n    </dependentAssembly>\n  </dependency>\n</assembly>', lineno=61, col_offset=-1), lineno=39, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=63, col_offset=3), 'platform', Load(), lineno=63, col_offset=3), [Eq()], [Str('win32', lineno=63, col_offset=17)], lineno=63, col_offset=3), [ImportFrom('distutils.msvccompiler', [alias('get_build_version', None)], 0, lineno=64, col_offset=4), If(Compare(Call(Name('get_build_version', Load(), lineno=65, col_offset=7), [], [], None, None, lineno=65, col_offset=7), [GtE()], [Num(8.0, lineno=65, col_offset=28)], lineno=65, col_offset=7), [Assign([Name('SKIP_MESSAGE', Store(), lineno=66, col_offset=8)], Name('None', Load(), lineno=66, col_offset=23), lineno=66, col_offset=8)], [Assign([Name('SKIP_MESSAGE', Store(), lineno=68, col_offset=8)], Str('These tests are only for MSVC8.0 or above', lineno=68, col_offset=23), lineno=68, col_offset=8)], lineno=65, col_offset=4)], [Assign([Name('SKIP_MESSAGE', Store(), lineno=70, col_offset=4)], Str('These tests are only for win32', lineno=70, col_offset=19), lineno=70, col_offset=4)], lineno=63, col_offset=0), ClassDef('msvc9compilerTestCase', [Attribute(Name('support', Load(), lineno=73, col_offset=28), 'TempdirManager', Load(), lineno=73, col_offset=28), Attribute(Name('unittest', Load(), lineno=74, col_offset=28), 'TestCase', Load(), lineno=74, col_offset=28)], [FunctionDef('test_no_compiler', arguments([Name('self', Param(), lineno=76, col_offset=25)], None, None, []), [ImportFrom('distutils.msvc9compiler', [alias('query_vcvarsall', None)], 0, lineno=80, col_offset=8), FunctionDef('_find_vcvarsall', arguments([Name('version', Param(), lineno=81, col_offset=28)], None, None, []), [Return(Name('None', Load(), lineno=82, col_offset=19), lineno=82, col_offset=12)], [], lineno=81, col_offset=8), ImportFrom('distutils', [alias('msvc9compiler', None)], 0, lineno=84, col_offset=8), Assign([Name('old_find_vcvarsall', Store(), lineno=85, col_offset=8)], Attribute(Name('msvc9compiler', Load(), lineno=85, col_offset=29), 'find_vcvarsall', Load(), lineno=85, col_offset=29), lineno=85, col_offset=8), Assign([Attribute(Name('msvc9compiler', Load(), lineno=86, col_offset=8), 'find_vcvarsall', Store(), lineno=86, col_offset=8)], Name('_find_vcvarsall', Load(), lineno=86, col_offset=39), lineno=86, col_offset=8), TryFinally([Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=12), 'assertRaises', Load(), lineno=88, col_offset=12), [Name('DistutilsPlatformError', Load(), lineno=88, col_offset=30), Name('query_vcvarsall', Load(), lineno=88, col_offset=54), Str('wont find this version', lineno=89, col_offset=29)], [], None, None, lineno=88, col_offset=12), lineno=88, col_offset=12)], [Assign([Attribute(Name('msvc9compiler', Load(), lineno=91, col_offset=12), 'find_vcvarsall', Store(), lineno=91, col_offset=12)], Name('old_find_vcvarsall', Load(), lineno=91, col_offset=43), lineno=91, col_offset=12)], lineno=87, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('test_reg_class', arguments([Name('self', Param(), lineno=93, col_offset=23)], None, None, []), [ImportFrom('distutils.msvc9compiler', [alias('Reg', None)], 0, lineno=94, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertRaises', Load(), lineno=95, col_offset=8), [Name('KeyError', Load(), lineno=95, col_offset=26), Attribute(Name('Reg', Load(), lineno=95, col_offset=36), 'get_value', Load(), lineno=95, col_offset=36), Str('xxx', lineno=95, col_offset=51), Str('xxx', lineno=95, col_offset=58)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Name('path', Store(), lineno=99, col_offset=8)], Str('Control Panel\\Desktop', lineno=99, col_offset=15), lineno=99, col_offset=8), Assign([Name('v', Store(), lineno=100, col_offset=8)], Call(Attribute(Name('Reg', Load(), lineno=100, col_offset=12), 'get_value', Load(), lineno=100, col_offset=12), [Name('path', Load(), lineno=100, col_offset=26), Str(u'dragfullwindows', lineno=100, col_offset=32)], [], None, None, lineno=100, col_offset=12), lineno=100, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=8), 'assertTrue', Load(), lineno=101, col_offset=8), [Compare(Name('v', Load(), lineno=101, col_offset=24), [In()], [Tuple([Str(u'0', lineno=101, col_offset=30), Str(u'1', lineno=101, col_offset=36), Str(u'2', lineno=101, col_offset=42)], Load(), lineno=101, col_offset=30)], lineno=101, col_offset=24)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8), Import([alias('_winreg', None)], lineno=103, col_offset=8), Assign([Name('HKCU', Store(), lineno=104, col_offset=8)], Attribute(Name('_winreg', Load(), lineno=104, col_offset=15), 'HKEY_CURRENT_USER', Load(), lineno=104, col_offset=15), lineno=104, col_offset=8), Assign([Name('keys', Store(), lineno=105, col_offset=8)], Call(Attribute(Name('Reg', Load(), lineno=105, col_offset=15), 'read_keys', Load(), lineno=105, col_offset=15), [Name('HKCU', Load(), lineno=105, col_offset=29), Str('xxxx', lineno=105, col_offset=35)], [], None, None, lineno=105, col_offset=15), lineno=105, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=8), 'assertEqual', Load(), lineno=106, col_offset=8), [Name('keys', Load(), lineno=106, col_offset=25), Name('None', Load(), lineno=106, col_offset=31)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), Assign([Name('keys', Store(), lineno=108, col_offset=8)], Call(Attribute(Name('Reg', Load(), lineno=108, col_offset=15), 'read_keys', Load(), lineno=108, col_offset=15), [Name('HKCU', Load(), lineno=108, col_offset=29), Str('Control Panel', lineno=108, col_offset=35)], [], None, None, lineno=108, col_offset=15), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'assertTrue', Load(), lineno=109, col_offset=8), [Compare(Str('Desktop', lineno=109, col_offset=24), [In()], [Name('keys', Load(), lineno=109, col_offset=37)], lineno=109, col_offset=24)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('test_remove_visual_c_ref', arguments([Name('self', Param(), lineno=111, col_offset=33)], None, None, []), [ImportFrom('distutils.msvc9compiler', [alias('MSVCCompiler', None)], 0, lineno=112, col_offset=8), Assign([Name('tempdir', Store(), lineno=113, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=113, col_offset=18), 'mkdtemp', Load(), lineno=113, col_offset=18), [], [], None, None, lineno=113, col_offset=18), lineno=113, col_offset=8), Assign([Name('manifest', Store(), lineno=114, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=114, col_offset=19), 'path', Load(), lineno=114, col_offset=19), 'join', Load(), lineno=114, col_offset=19), [Name('tempdir', Load(), lineno=114, col_offset=32), Str('manifest', lineno=114, col_offset=41)], [], None, None, lineno=114, col_offset=19), lineno=114, col_offset=8), Assign([Name('f', Store(), lineno=115, col_offset=8)], Call(Name('open', Load(), lineno=115, col_offset=12), [Name('manifest', Load(), lineno=115, col_offset=17), Str('w', lineno=115, col_offset=27)], [], None, None, lineno=115, col_offset=12), lineno=115, col_offset=8), TryFinally([Expr(Call(Attribute(Name('f', Load(), lineno=117, col_offset=12), 'write', Load(), lineno=117, col_offset=12), [Name('_MANIFEST', Load(), lineno=117, col_offset=20)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=119, col_offset=12), 'close', Load(), lineno=119, col_offset=12), [], [], None, None, lineno=119, col_offset=12), lineno=119, col_offset=12)], lineno=116, col_offset=8), Assign([Name('compiler', Store(), lineno=121, col_offset=8)], Call(Name('MSVCCompiler', Load(), lineno=121, col_offset=19), [], [], None, None, lineno=121, col_offset=19), lineno=121, col_offset=8), Expr(Call(Attribute(Name('compiler', Load(), lineno=122, col_offset=8), '_remove_visual_c_ref', Load(), lineno=122, col_offset=8), [Name('manifest', Load(), lineno=122, col_offset=38)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8), Assign([Name('f', Store(), lineno=125, col_offset=8)], Call(Name('open', Load(), lineno=125, col_offset=12), [Name('manifest', Load(), lineno=125, col_offset=17)], [], None, None, lineno=125, col_offset=12), lineno=125, col_offset=8), TryFinally([Assign([Name('content', Store(), lineno=128, col_offset=12)], Call(Attribute(Str('\n', lineno=128, col_offset=22), 'join', Load(), lineno=128, col_offset=22), [ListComp(Call(Attribute(Name('line', Load(), lineno=128, col_offset=33), 'rstrip', Load(), lineno=128, col_offset=33), [], [], None, None, lineno=128, col_offset=33), [comprehension(Name('line', Store(), lineno=128, col_offset=51), Call(Attribute(Name('f', Load(), lineno=128, col_offset=59), 'readlines', Load(), lineno=128, col_offset=59), [], [], None, None, lineno=128, col_offset=59), [])], lineno=128, col_offset=33)], [], None, None, lineno=128, col_offset=22), lineno=128, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=130, col_offset=12), 'close', Load(), lineno=130, col_offset=12), [], [], None, None, lineno=130, col_offset=12), lineno=130, col_offset=12)], lineno=126, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'assertEqual', Load(), lineno=133, col_offset=8), [Name('content', Load(), lineno=133, col_offset=25), Name('_CLEANED_MANIFEST', Load(), lineno=133, col_offset=34)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8)], [], lineno=111, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=72, col_offset=1), 'skipUnless', Load(), lineno=72, col_offset=1), [Compare(Name('SKIP_MESSAGE', Load(), lineno=72, col_offset=21), [Is()], [Name('None', Load(), lineno=72, col_offset=37)], lineno=72, col_offset=21), Name('SKIP_MESSAGE', Load(), lineno=72, col_offset=43)], [], None, None, lineno=72, col_offset=1)], lineno=72, col_offset=0), FunctionDef('test_suite', arguments([], None, None, []), [Return(Call(Attribute(Name('unittest', Load(), lineno=137, col_offset=11), 'makeSuite', Load(), lineno=137, col_offset=11), [Name('msvc9compilerTestCase', Load(), lineno=137, col_offset=30)], [], None, None, lineno=137, col_offset=11), lineno=137, col_offset=4)], [], lineno=136, col_offset=0), If(Compare(Name('__name__', Load(), lineno=139, col_offset=3), [Eq()], [Str('__main__', lineno=139, col_offset=15)], lineno=139, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=140, col_offset=4), 'main', Load(), lineno=140, col_offset=4), [], [keyword('defaultTest', Str('test_suite', lineno=140, col_offset=30))], None, None, lineno=140, col_offset=4), lineno=140, col_offset=4)], [], lineno=139, col_offset=0)])
