Module([Expr(Str('This module tests SyntaxErrors.\n\nHere\'s an example of the sort of thing that is tested.\n\n>>> def f(x):\n...     global x\nTraceback (most recent call last):\nSyntaxError: name \'x\' is local and global (<doctest test.test_syntax[0]>, line 1)\n\nThe tests are all raise SyntaxErrors.  They were created by checking\neach C call that raises SyntaxError.  There are several modules that\nraise these exceptions-- ast.c, compile.c, future.c, pythonrun.c, and\nsymtable.c.\n\nThe parser itself outlaws a lot of invalid syntax.  None of these\nerrors are tested here at the moment.  We should add some tests; since\nthere are infinitely many programs with invalid syntax, we would need\nto be judicious in selecting some.\n\nThe compiler generates a synthetic module name for code executed by\ndoctest.  Since all the code comes from the same module, a suffix like\n[1] is appended to the module name, As a consequence, changing the\norder of tests in this module means renumbering all the errors after\nit.  (Maybe we should enable the ellipsis option for these tests.)\n\nIn ast.c, syntax errors are raised by calling ast_error().\n\nErrors from set_context():\n\n>>> obj.None = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[1]>", line 1\nSyntaxError: cannot assign to None\n\n>>> None = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[2]>", line 1\nSyntaxError: cannot assign to None\n\nIt\'s a syntax error to assign to the empty tuple.  Why isn\'t it an\nerror to assign to the empty list?  It will always raise some error at\nruntime.\n\n>>> () = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[3]>", line 1\nSyntaxError: can\'t assign to ()\n\n>>> f() = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[4]>", line 1\nSyntaxError: can\'t assign to function call\n\n>>> del f()\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[5]>", line 1\nSyntaxError: can\'t delete function call\n\n>>> a + 1 = 2\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[6]>", line 1\nSyntaxError: can\'t assign to operator\n\n>>> (x for x in x) = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[7]>", line 1\nSyntaxError: can\'t assign to generator expression\n\n>>> 1 = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[8]>", line 1\nSyntaxError: can\'t assign to literal\n\n>>> "abc" = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[8]>", line 1\nSyntaxError: can\'t assign to literal\n\n>>> `1` = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[10]>", line 1\nSyntaxError: can\'t assign to repr\n\nIf the left-hand side of an assignment is a list or tuple, an illegal\nexpression inside that contain should still cause a syntax error.\nThis test just checks a couple of cases rather than enumerating all of\nthem.\n\n>>> (a, "b", c) = (1, 2, 3)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[11]>", line 1\nSyntaxError: can\'t assign to literal\n\n>>> [a, b, c + 1] = [1, 2, 3]\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[12]>", line 1\nSyntaxError: can\'t assign to operator\n\n>>> a if 1 else b = 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[13]>", line 1\nSyntaxError: can\'t assign to conditional expression\n\nFrom compiler_complex_args():\n\n>>> def f(None=1):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[14]>", line 1\nSyntaxError: cannot assign to None\n\n\nFrom ast_for_arguments():\n\n>>> def f(x, y=1, z):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[15]>", line 1\nSyntaxError: non-default argument follows default argument\n\n>>> def f(x, None):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[16]>", line 1\nSyntaxError: cannot assign to None\n\n>>> def f(*None):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[17]>", line 1\nSyntaxError: cannot assign to None\n\n>>> def f(**None):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[18]>", line 1\nSyntaxError: cannot assign to None\n\n\nFrom ast_for_funcdef():\n\n>>> def None(x):\n...     pass\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[19]>", line 1\nSyntaxError: cannot assign to None\n\n\nFrom ast_for_call():\n\n>>> def f(it, *varargs):\n...     return list(it)\n>>> L = range(10)\n>>> f(x for x in L)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> f(x for x in L, 1)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[23]>", line 1\nSyntaxError: Generator expression must be parenthesized if not sole argument\n>>> f((x for x in L), 1)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> f(i0,  i1,  i2,  i3,  i4,  i5,  i6,  i7,  i8,  i9,  i10,  i11,\n...   i12,  i13,  i14,  i15,  i16,  i17,  i18,  i19,  i20,  i21,  i22,\n...   i23,  i24,  i25,  i26,  i27,  i28,  i29,  i30,  i31,  i32,  i33,\n...   i34,  i35,  i36,  i37,  i38,  i39,  i40,  i41,  i42,  i43,  i44,\n...   i45,  i46,  i47,  i48,  i49,  i50,  i51,  i52,  i53,  i54,  i55,\n...   i56,  i57,  i58,  i59,  i60,  i61,  i62,  i63,  i64,  i65,  i66,\n...   i67,  i68,  i69,  i70,  i71,  i72,  i73,  i74,  i75,  i76,  i77,\n...   i78,  i79,  i80,  i81,  i82,  i83,  i84,  i85,  i86,  i87,  i88,\n...   i89,  i90,  i91,  i92,  i93,  i94,  i95,  i96,  i97,  i98,  i99,\n...   i100,  i101,  i102,  i103,  i104,  i105,  i106,  i107,  i108,\n...   i109,  i110,  i111,  i112,  i113,  i114,  i115,  i116,  i117,\n...   i118,  i119,  i120,  i121,  i122,  i123,  i124,  i125,  i126,\n...   i127,  i128,  i129,  i130,  i131,  i132,  i133,  i134,  i135,\n...   i136,  i137,  i138,  i139,  i140,  i141,  i142,  i143,  i144,\n...   i145,  i146,  i147,  i148,  i149,  i150,  i151,  i152,  i153,\n...   i154,  i155,  i156,  i157,  i158,  i159,  i160,  i161,  i162,\n...   i163,  i164,  i165,  i166,  i167,  i168,  i169,  i170,  i171,\n...   i172,  i173,  i174,  i175,  i176,  i177,  i178,  i179,  i180,\n...   i181,  i182,  i183,  i184,  i185,  i186,  i187,  i188,  i189,\n...   i190,  i191,  i192,  i193,  i194,  i195,  i196,  i197,  i198,\n...   i199,  i200,  i201,  i202,  i203,  i204,  i205,  i206,  i207,\n...   i208,  i209,  i210,  i211,  i212,  i213,  i214,  i215,  i216,\n...   i217,  i218,  i219,  i220,  i221,  i222,  i223,  i224,  i225,\n...   i226,  i227,  i228,  i229,  i230,  i231,  i232,  i233,  i234,\n...   i235,  i236,  i237,  i238,  i239,  i240,  i241,  i242,  i243,\n...   i244,  i245,  i246,  i247,  i248,  i249,  i250,  i251,  i252,\n...   i253,  i254,  i255)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[25]>", line 1\nSyntaxError: more than 255 arguments\n\nThe actual error cases counts positional arguments, keyword arguments,\nand generator expression arguments separately.  This test combines the\nthree.\n\n>>> f(i0,  i1,  i2,  i3,  i4,  i5,  i6,  i7,  i8,  i9,  i10,  i11,\n...   i12,  i13,  i14,  i15,  i16,  i17,  i18,  i19,  i20,  i21,  i22,\n...   i23,  i24,  i25,  i26,  i27,  i28,  i29,  i30,  i31,  i32,  i33,\n...   i34,  i35,  i36,  i37,  i38,  i39,  i40,  i41,  i42,  i43,  i44,\n...   i45,  i46,  i47,  i48,  i49,  i50,  i51,  i52,  i53,  i54,  i55,\n...   i56,  i57,  i58,  i59,  i60,  i61,  i62,  i63,  i64,  i65,  i66,\n...   i67,  i68,  i69,  i70,  i71,  i72,  i73,  i74,  i75,  i76,  i77,\n...   i78,  i79,  i80,  i81,  i82,  i83,  i84,  i85,  i86,  i87,  i88,\n...   i89,  i90,  i91,  i92,  i93,  i94,  i95,  i96,  i97,  i98,  i99,\n...   i100,  i101,  i102,  i103,  i104,  i105,  i106,  i107,  i108,\n...   i109,  i110,  i111,  i112,  i113,  i114,  i115,  i116,  i117,\n...   i118,  i119,  i120,  i121,  i122,  i123,  i124,  i125,  i126,\n...   i127,  i128,  i129,  i130,  i131,  i132,  i133,  i134,  i135,\n...   i136,  i137,  i138,  i139,  i140,  i141,  i142,  i143,  i144,\n...   i145,  i146,  i147,  i148,  i149,  i150,  i151,  i152,  i153,\n...   i154,  i155,  i156,  i157,  i158,  i159,  i160,  i161,  i162,\n...   i163,  i164,  i165,  i166,  i167,  i168,  i169,  i170,  i171,\n...   i172,  i173,  i174,  i175,  i176,  i177,  i178,  i179,  i180,\n...   i181,  i182,  i183,  i184,  i185,  i186,  i187,  i188,  i189,\n...   i190,  i191,  i192,  i193,  i194,  i195,  i196,  i197,  i198,\n...   i199,  i200,  i201,  i202,  i203,  i204,  i205,  i206,  i207,\n...   i208,  i209,  i210,  i211,  i212,  i213,  i214,  i215,  i216,\n...   i217,  i218,  i219,  i220,  i221,  i222,  i223,  i224,  i225,\n...   i226,  i227,  i228,  i229,  i230,  i231,  i232,  i233,  i234,\n...   i235, i236,  i237,  i238,  i239,  i240,  i241,  i242,  i243,\n...   (x for x in i244),  i245,  i246,  i247,  i248,  i249,  i250,  i251,\n...    i252=1, i253=1,  i254=1,  i255=1)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[26]>", line 1\nSyntaxError: more than 255 arguments\n\n>>> f(lambda x: x[0] = 3)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[27]>", line 1\nSyntaxError: lambda cannot contain assignment\n\nThe grammar accepts any test (basically, any expression) in the\nkeyword slot of a call site.  Test a few different options.\n\n>>> f(x()=2)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[28]>", line 1\nSyntaxError: keyword can\'t be an expression\n>>> f(a or b=1)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[29]>", line 1\nSyntaxError: keyword can\'t be an expression\n>>> f(x.y=1)\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[30]>", line 1\nSyntaxError: keyword can\'t be an expression\n\n\nMore set_context():\n\n>>> (x for x in x) += 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[31]>", line 1\nSyntaxError: can\'t assign to generator expression\n>>> None += 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[32]>", line 1\nSyntaxError: cannot assign to None\n>>> f() += 1\nTraceback (most recent call last):\n  File "<doctest test.test_syntax[33]>", line 1\nSyntaxError: can\'t assign to function call\n\n\nTest continue in finally in weird combinations.\n\ncontinue in for loop under finally shouuld be ok.\n\n    >>> def test():\n    ...     try:\n    ...         pass\n    ...     finally:\n    ...         for abc in range(10):\n    ...             continue\n    ...     print abc\n    >>> test()\n    9\n\nStart simple, a continue in a finally should not be allowed.\n\n    >>> def test():\n    ...    for abc in range(10):\n    ...        try:\n    ...            pass\n    ...        finally:\n    ...            continue\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[36]>", line 6\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\nThis is essentially a continue in a finally which should not be allowed.\n\n    >>> def test():\n    ...    for abc in range(10):\n    ...        try:\n    ...            pass\n    ...        finally:\n    ...            try:\n    ...                continue\n    ...            except:\n    ...                pass\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[37]>", line 6\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\n    >>> def foo():\n    ...     try:\n    ...         pass\n    ...     finally:\n    ...         continue\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[38]>", line 5\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\n    >>> def foo():\n    ...     for a in ():\n    ...       try:\n    ...           pass\n    ...       finally:\n    ...           continue\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[39]>", line 6\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\n    >>> def foo():\n    ...     for a in ():\n    ...         try:\n    ...             pass\n    ...         finally:\n    ...             try:\n    ...                 continue\n    ...             finally:\n    ...                 pass\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[40]>", line 7\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\n    >>> def foo():\n    ...  for a in ():\n    ...   try: pass\n    ...   finally:\n    ...    try:\n    ...     pass\n    ...    except:\n    ...     continue\n    Traceback (most recent call last):\n      ...\n      File "<doctest test.test_syntax[41]>", line 8\n    SyntaxError: \'continue\' not supported inside \'finally\' clause\n\nThere is one test for a break that is not in a loop.  The compiler\nuses a single data structure to keep track of try-finally and loops,\nso we need to be sure that a break is actually inside a loop.  If it\nisn\'t, there should be a syntax error.\n\n   >>> try:\n   ...     print 1\n   ...     break\n   ...     print 2\n   ... finally:\n   ...     print 3\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[42]>", line 3\n   SyntaxError: \'break\' outside loop\n\nThis should probably raise a better error than a SystemError (or none at all).\nIn 2.5 there was a missing exception and an assert was triggered in a debug\nbuild.  The number of blocks must be greater than CO_MAXBLOCKS.  SF #1565514\n\n   >>> while 1:\n   ...  while 2:\n   ...   while 3:\n   ...    while 4:\n   ...     while 5:\n   ...      while 6:\n   ...       while 8:\n   ...        while 9:\n   ...         while 10:\n   ...          while 11:\n   ...           while 12:\n   ...            while 13:\n   ...             while 14:\n   ...              while 15:\n   ...               while 16:\n   ...                while 17:\n   ...                 while 18:\n   ...                  while 19:\n   ...                   while 20:\n   ...                    while 21:\n   ...                     while 22:\n   ...                      break\n   Traceback (most recent call last):\n     ...\n   SystemError: too many statically nested blocks\n\nThis tests assignment-context; there was a bug in Python 2.5 where compiling\na complex \'if\' (one with \'elif\') would fail to notice an invalid suite,\nleading to spurious errors.\n\n   >>> if 1:\n   ...   x() = 1\n   ... elif 1:\n   ...   pass\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[44]>", line 2\n   SyntaxError: can\'t assign to function call\n\n   >>> if 1:\n   ...   pass\n   ... elif 1:\n   ...   x() = 1\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[45]>", line 4\n   SyntaxError: can\'t assign to function call\n\n   >>> if 1:\n   ...   x() = 1\n   ... elif 1:\n   ...   pass\n   ... else:\n   ...   pass\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[46]>", line 2\n   SyntaxError: can\'t assign to function call\n\n   >>> if 1:\n   ...   pass\n   ... elif 1:\n   ...   x() = 1\n   ... else:\n   ...   pass\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[47]>", line 4\n   SyntaxError: can\'t assign to function call\n\n   >>> if 1:\n   ...   pass\n   ... elif 1:\n   ...   pass\n   ... else:\n   ...   x() = 1\n   Traceback (most recent call last):\n     ...\n     File "<doctest test.test_syntax[48]>", line 6\n   SyntaxError: can\'t assign to function call\n\n>>> f(a=23, a=234)\nTraceback (most recent call last):\n   ...\n  File "<doctest test.test_syntax[49]>", line 1\nSyntaxError: keyword argument repeated\n\n>>> del ()\nTraceback (most recent call last):\n   ...\n  File "<doctest test.test_syntax[50]>", line 1\nSyntaxError: can\'t delete ()\n\n>>> {1, 2, 3} = 42\nTraceback (most recent call last):\n   ...\n   File "<doctest test.test_syntax[50]>", line 1\nSyntaxError: can\'t assign to literal\n\nCorner-case that used to crash:\n\n    >>> def f(*xx, **__debug__): pass\n    Traceback (most recent call last):\n    SyntaxError: cannot assign to __debug__\n\n', lineno=483, col_offset=-1), lineno=483, col_offset=-1), Import([alias('re', None)], lineno=485, col_offset=0), Import([alias('unittest', None)], lineno=486, col_offset=0), Import([alias('warnings', None)], lineno=487, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=489, col_offset=0), ClassDef('SyntaxTestCase', [Attribute(Name('unittest', Load(), lineno=491, col_offset=21), 'TestCase', Load(), lineno=491, col_offset=21)], [FunctionDef('_check_error', arguments([Name('self', Param(), lineno=493, col_offset=21), Name('code', Param(), lineno=493, col_offset=27), Name('errtext', Param(), lineno=493, col_offset=33), Name('filename', Param(), lineno=494, col_offset=21), Name('mode', Param(), lineno=494, col_offset=44), Name('subclass', Param(), lineno=494, col_offset=57)], None, None, [Str('<testcase>', lineno=494, col_offset=30), Str('exec', lineno=494, col_offset=49), Name('None', Load(), lineno=494, col_offset=66)]), [Expr(Str('Check that compiling code raises SyntaxError with errtext.\n\n        errtest is a regular expression that must be present in the\n        test of the exception raised.  If subclass is specified it\n        is the expected subclass of SyntaxError (e.g. IndentationError).\n        ', lineno=500, col_offset=-1), lineno=500, col_offset=-1), TryExcept([Expr(Call(Name('compile', Load(), lineno=502, col_offset=12), [Name('code', Load(), lineno=502, col_offset=20), Name('filename', Load(), lineno=502, col_offset=26), Name('mode', Load(), lineno=502, col_offset=36)], [], None, None, lineno=502, col_offset=12), lineno=502, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=503, col_offset=15), Name('err', Store(), lineno=503, col_offset=28), [If(BoolOp(And(), [Name('subclass', Load(), lineno=504, col_offset=15), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=504, col_offset=32), [Name('err', Load(), lineno=504, col_offset=43), Name('subclass', Load(), lineno=504, col_offset=48)], [], None, None, lineno=504, col_offset=32), lineno=504, col_offset=28)], lineno=504, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=505, col_offset=16), 'fail', Load(), lineno=505, col_offset=16), [BinOp(Str('SyntaxError is not a %s', lineno=505, col_offset=26), Mod(), Attribute(Name('subclass', Load(), lineno=505, col_offset=54), '__name__', Load(), lineno=505, col_offset=54), lineno=505, col_offset=26)], [], None, None, lineno=505, col_offset=16), lineno=505, col_offset=16)], [], lineno=504, col_offset=12), Assign([Name('mo', Store(), lineno=506, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=506, col_offset=17), 'search', Load(), lineno=506, col_offset=17), [Name('errtext', Load(), lineno=506, col_offset=27), Call(Name('str', Load(), lineno=506, col_offset=36), [Name('err', Load(), lineno=506, col_offset=40)], [], None, None, lineno=506, col_offset=36)], [], None, None, lineno=506, col_offset=17), lineno=506, col_offset=12), If(Compare(Name('mo', Load(), lineno=507, col_offset=15), [Is()], [Name('None', Load(), lineno=507, col_offset=21)], lineno=507, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=508, col_offset=16), 'fail', Load(), lineno=508, col_offset=16), [BinOp(Str("%s did not contain '%r'", lineno=508, col_offset=26), Mod(), Tuple([Name('err', Load(), lineno=508, col_offset=55), Name('errtext', Load(), lineno=508, col_offset=60)], Load(), lineno=508, col_offset=55), lineno=508, col_offset=26)], [], None, None, lineno=508, col_offset=16), lineno=508, col_offset=16)], [], lineno=507, col_offset=12)], lineno=503, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=12), 'fail', Load(), lineno=510, col_offset=12), [Str('compile() did not raise SyntaxError', lineno=510, col_offset=22)], [], None, None, lineno=510, col_offset=12), lineno=510, col_offset=12)], lineno=501, col_offset=8)], [], lineno=493, col_offset=4), FunctionDef('test_paren_arg_with_default', arguments([Name('self', Param(), lineno=512, col_offset=36)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=513, col_offset=8), '_check_error', Load(), lineno=513, col_offset=8), [Str('def f((x)=23): pass', lineno=513, col_offset=26), Str('parenthesized arg with default', lineno=514, col_offset=26)], [], None, None, lineno=513, col_offset=8), lineno=513, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('test_assign_call', arguments([Name('self', Param(), lineno=516, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=517, col_offset=8), '_check_error', Load(), lineno=517, col_offset=8), [Str('f() = 1', lineno=517, col_offset=26), Str('assign', lineno=517, col_offset=37)], [], None, None, lineno=517, col_offset=8), lineno=517, col_offset=8)], [], lineno=516, col_offset=4), FunctionDef('test_assign_del', arguments([Name('self', Param(), lineno=519, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=520, col_offset=8), '_check_error', Load(), lineno=520, col_offset=8), [Str('del f()', lineno=520, col_offset=26), Str('delete', lineno=520, col_offset=37)], [], None, None, lineno=520, col_offset=8), lineno=520, col_offset=8)], [], lineno=519, col_offset=4), FunctionDef('test_global_err_then_warn', arguments([Name('self', Param(), lineno=522, col_offset=34)], None, None, []), [Assign([Name('source', Store(), lineno=525, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=525, col_offset=17), 'sub', Load(), lineno=525, col_offset=17), [Str('(?m)^ *:', lineno=525, col_offset=24), Str('', lineno=525, col_offset=36), Str('            :def error(a):\n            :    global a  # SyntaxError\n            :def warning():\n            :    b = 1\n            :    global b  # SyntaxWarning\n            :', lineno=531, col_offset=-1)], [], None, None, lineno=525, col_offset=17), lineno=525, col_offset=8), Expr(Call(Attribute(Name('warnings', Load(), lineno=532, col_offset=8), 'filterwarnings', Load(), lineno=532, col_offset=8), [], [keyword('action', Str('ignore', lineno=532, col_offset=39)), keyword('category', Name('SyntaxWarning', Load(), lineno=532, col_offset=58))], None, None, lineno=532, col_offset=8), lineno=532, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=533, col_offset=8), '_check_error', Load(), lineno=533, col_offset=8), [Name('source', Load(), lineno=533, col_offset=26), Str('global', lineno=533, col_offset=34)], [], None, None, lineno=533, col_offset=8), lineno=533, col_offset=8), Expr(Call(Attribute(Attribute(Name('warnings', Load(), lineno=534, col_offset=8), 'filters', Load(), lineno=534, col_offset=8), 'pop', Load(), lineno=534, col_offset=8), [Num(0, lineno=534, col_offset=29)], [], None, None, lineno=534, col_offset=8), lineno=534, col_offset=8)], [], lineno=522, col_offset=4), FunctionDef('test_break_outside_loop', arguments([Name('self', Param(), lineno=536, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=537, col_offset=8), '_check_error', Load(), lineno=537, col_offset=8), [Str('break', lineno=537, col_offset=26), Str('outside loop', lineno=537, col_offset=35)], [], None, None, lineno=537, col_offset=8), lineno=537, col_offset=8)], [], lineno=536, col_offset=4), FunctionDef('test_delete_deref', arguments([Name('self', Param(), lineno=539, col_offset=26)], None, None, []), [Assign([Name('source', Store(), lineno=540, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=540, col_offset=17), 'sub', Load(), lineno=540, col_offset=17), [Str('(?m)^ *:', lineno=540, col_offset=24), Str('', lineno=540, col_offset=36), Str('            :def foo(x):\n            :  def bar():\n            :    print x\n            :  del x\n            :', lineno=545, col_offset=-1)], [], None, None, lineno=540, col_offset=17), lineno=540, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=546, col_offset=8), '_check_error', Load(), lineno=546, col_offset=8), [Name('source', Load(), lineno=546, col_offset=26), Str('nested scope', lineno=546, col_offset=34)], [], None, None, lineno=546, col_offset=8), lineno=546, col_offset=8)], [], lineno=539, col_offset=4), FunctionDef('test_unexpected_indent', arguments([Name('self', Param(), lineno=548, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=549, col_offset=8), '_check_error', Load(), lineno=549, col_offset=8), [Str('foo()\n bar()\n', lineno=549, col_offset=26), Str('unexpected indent', lineno=549, col_offset=45)], [keyword('subclass', Name('IndentationError', Load(), lineno=550, col_offset=35))], None, None, lineno=549, col_offset=8), lineno=549, col_offset=8)], [], lineno=548, col_offset=4), FunctionDef('test_no_indent', arguments([Name('self', Param(), lineno=552, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=553, col_offset=8), '_check_error', Load(), lineno=553, col_offset=8), [Str('if 1:\nfoo()', lineno=553, col_offset=26), Str('expected an indented block', lineno=553, col_offset=42)], [keyword('subclass', Name('IndentationError', Load(), lineno=554, col_offset=35))], None, None, lineno=553, col_offset=8), lineno=553, col_offset=8)], [], lineno=552, col_offset=4), FunctionDef('test_bad_outdent', arguments([Name('self', Param(), lineno=556, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=557, col_offset=8), '_check_error', Load(), lineno=557, col_offset=8), [Str('if 1:\n  foo()\n bar()', lineno=557, col_offset=26), Str('unindent does not match .* level', lineno=558, col_offset=26)], [keyword('subclass', Name('IndentationError', Load(), lineno=559, col_offset=35))], None, None, lineno=557, col_offset=8), lineno=557, col_offset=8)], [], lineno=556, col_offset=4), FunctionDef('test_kwargs_last', arguments([Name('self', Param(), lineno=561, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=562, col_offset=8), '_check_error', Load(), lineno=562, col_offset=8), [Str("int(base=10, '2')", lineno=562, col_offset=26), Str('non-keyword arg', lineno=562, col_offset=47)], [], None, None, lineno=562, col_offset=8), lineno=562, col_offset=8)], [], lineno=561, col_offset=4)], [], lineno=491, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=565, col_offset=4), 'run_unittest', Load(), lineno=565, col_offset=4), [Name('SyntaxTestCase', Load(), lineno=565, col_offset=30)], [], None, None, lineno=565, col_offset=4), lineno=565, col_offset=4), ImportFrom('test', [alias('test_syntax', None)], 0, lineno=566, col_offset=4), With(Call(Attribute(Name('test_support', Load(), lineno=567, col_offset=9), 'check_py3k_warnings', Load(), lineno=567, col_offset=9), [Tuple([Str('backquote not supported', lineno=567, col_offset=43), Name('SyntaxWarning', Load(), lineno=568, col_offset=45)], Load(), lineno=567, col_offset=43)], [], None, None, lineno=567, col_offset=9), None, [Expr(Call(Attribute(Name('test_support', Load(), lineno=569, col_offset=8), 'run_doctest', Load(), lineno=569, col_offset=8), [Name('test_syntax', Load(), lineno=569, col_offset=33)], [keyword('verbosity', Name('True', Load(), lineno=569, col_offset=56))], None, None, lineno=569, col_offset=8), lineno=569, col_offset=8)], lineno=567, col_offset=9)], [], lineno=564, col_offset=0), If(Compare(Name('__name__', Load(), lineno=571, col_offset=3), [Eq()], [Str('__main__', lineno=571, col_offset=15)], lineno=571, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=572, col_offset=4), [], [], None, None, lineno=572, col_offset=4), lineno=572, col_offset=4)], [], lineno=571, col_offset=0)])
