Module([Expr(Str('Base classes for server/gateway implementations', lineno=1, col_offset=0), lineno=1, col_offset=0), ImportFrom('types', [alias('StringType', None)], 0, lineno=3, col_offset=0), ImportFrom('util', [alias('FileWrapper', None), alias('guess_scheme', None), alias('is_hop_by_hop', None)], 0, lineno=4, col_offset=0), ImportFrom('headers', [alias('Headers', None)], 0, lineno=5, col_offset=0), Import([alias('sys', None), alias('os', None), alias('time', None)], lineno=7, col_offset=0), Assign([Name('__all__', Store(), lineno=9, col_offset=0)], List([Str('BaseHandler', lineno=9, col_offset=11), Str('SimpleHandler', lineno=9, col_offset=26), Str('BaseCGIHandler', lineno=9, col_offset=43), Str('CGIHandler', lineno=9, col_offset=61)], Load(), lineno=9, col_offset=10), lineno=9, col_offset=0), TryExcept([Expr(Name('dict', Load(), lineno=12, col_offset=4), lineno=12, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=13, col_offset=7), None, [FunctionDef('dict', arguments([Name('items', Param(), lineno=14, col_offset=13)], None, None, []), [Assign([Name('d', Store(), lineno=15, col_offset=8)], Dict([], [], lineno=15, col_offset=12), lineno=15, col_offset=8), For(Tuple([Name('k', Store(), lineno=16, col_offset=12), Name('v', Store(), lineno=16, col_offset=14)], Store(), lineno=16, col_offset=12), Name('items', Load(), lineno=16, col_offset=19), [Assign([Subscript(Name('d', Load(), lineno=17, col_offset=12), Index(Name('k', Load(), lineno=17, col_offset=14)), Store(), lineno=17, col_offset=12)], Name('v', Load(), lineno=17, col_offset=19), lineno=17, col_offset=12)], [], lineno=16, col_offset=8), Return(Name('d', Load(), lineno=18, col_offset=15), lineno=18, col_offset=8)], [], lineno=14, col_offset=4)], lineno=13, col_offset=0)], [], lineno=11, col_offset=0), Assign([Name('_weekdayname', Store(), lineno=30, col_offset=0)], List([Str('Mon', lineno=30, col_offset=16), Str('Tue', lineno=30, col_offset=23), Str('Wed', lineno=30, col_offset=30), Str('Thu', lineno=30, col_offset=37), Str('Fri', lineno=30, col_offset=44), Str('Sat', lineno=30, col_offset=51), Str('Sun', lineno=30, col_offset=58)], Load(), lineno=30, col_offset=15), lineno=30, col_offset=0), Assign([Name('_monthname', Store(), lineno=31, col_offset=0)], List([Name('None', Load(), lineno=31, col_offset=14), Str('Jan', lineno=32, col_offset=14), Str('Feb', lineno=32, col_offset=21), Str('Mar', lineno=32, col_offset=28), Str('Apr', lineno=32, col_offset=35), Str('May', lineno=32, col_offset=42), Str('Jun', lineno=32, col_offset=49), Str('Jul', lineno=33, col_offset=14), Str('Aug', lineno=33, col_offset=21), Str('Sep', lineno=33, col_offset=28), Str('Oct', lineno=33, col_offset=35), Str('Nov', lineno=33, col_offset=42), Str('Dec', lineno=33, col_offset=49)], Load(), lineno=31, col_offset=13), lineno=31, col_offset=0), FunctionDef('format_date_time', arguments([Name('timestamp', Param(), lineno=35, col_offset=21)], None, None, []), [Assign([Tuple([Name('year', Store(), lineno=36, col_offset=4), Name('month', Store(), lineno=36, col_offset=10), Name('day', Store(), lineno=36, col_offset=17), Name('hh', Store(), lineno=36, col_offset=22), Name('mm', Store(), lineno=36, col_offset=26), Name('ss', Store(), lineno=36, col_offset=30), Name('wd', Store(), lineno=36, col_offset=34), Name('y', Store(), lineno=36, col_offset=38), Name('z', Store(), lineno=36, col_offset=41)], Store(), lineno=36, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=36, col_offset=45), 'gmtime', Load(), lineno=36, col_offset=45), [Name('timestamp', Load(), lineno=36, col_offset=57)], [], None, None, lineno=36, col_offset=45), lineno=36, col_offset=4), Return(BinOp(Str('%s, %02d %3s %4d %02d:%02d:%02d GMT', lineno=37, col_offset=11), Mod(), Tuple([Subscript(Name('_weekdayname', Load(), lineno=38, col_offset=8), Index(Name('wd', Load(), lineno=38, col_offset=21)), Load(), lineno=38, col_offset=8), Name('day', Load(), lineno=38, col_offset=26), Subscript(Name('_monthname', Load(), lineno=38, col_offset=31), Index(Name('month', Load(), lineno=38, col_offset=42)), Load(), lineno=38, col_offset=31), Name('year', Load(), lineno=38, col_offset=50), Name('hh', Load(), lineno=38, col_offset=56), Name('mm', Load(), lineno=38, col_offset=60), Name('ss', Load(), lineno=38, col_offset=64)], Load(), lineno=38, col_offset=8), lineno=37, col_offset=11), lineno=37, col_offset=4)], [], lineno=35, col_offset=0), ClassDef('BaseHandler', [], [Expr(Str('Manage the invocation of a WSGI application', lineno=43, col_offset=4), lineno=43, col_offset=4), Assign([Name('wsgi_version', Store(), lineno=46, col_offset=4)], Tuple([Num(1, lineno=46, col_offset=20), Num(0, lineno=46, col_offset=22)], Load(), lineno=46, col_offset=20), lineno=46, col_offset=4), Assign([Name('wsgi_multithread', Store(), lineno=47, col_offset=4)], Name('True', Load(), lineno=47, col_offset=23), lineno=47, col_offset=4), Assign([Name('wsgi_multiprocess', Store(), lineno=48, col_offset=4)], Name('True', Load(), lineno=48, col_offset=24), lineno=48, col_offset=4), Assign([Name('wsgi_run_once', Store(), lineno=49, col_offset=4)], Name('False', Load(), lineno=49, col_offset=20), lineno=49, col_offset=4), Assign([Name('origin_server', Store(), lineno=51, col_offset=4)], Name('True', Load(), lineno=51, col_offset=20), lineno=51, col_offset=4), Assign([Name('http_version', Store(), lineno=52, col_offset=4)], Str('1.0', lineno=52, col_offset=20), lineno=52, col_offset=4), Assign([Name('server_software', Store(), lineno=53, col_offset=4)], Name('None', Load(), lineno=53, col_offset=22), lineno=53, col_offset=4), Assign([Name('os_environ', Store(), lineno=58, col_offset=4)], Call(Name('dict', Load(), lineno=58, col_offset=17), [Call(Attribute(Attribute(Name('os', Load(), lineno=58, col_offset=22), 'environ', Load(), lineno=58, col_offset=22), 'items', Load(), lineno=58, col_offset=22), [], [], None, None, lineno=58, col_offset=22)], [], None, None, lineno=58, col_offset=17), lineno=58, col_offset=4), Assign([Name('wsgi_file_wrapper', Store(), lineno=61, col_offset=4)], Name('FileWrapper', Load(), lineno=61, col_offset=24), lineno=61, col_offset=4), Assign([Name('headers_class', Store(), lineno=62, col_offset=4)], Name('Headers', Load(), lineno=62, col_offset=20), lineno=62, col_offset=4), Assign([Name('traceback_limit', Store(), lineno=65, col_offset=4)], Name('None', Load(), lineno=65, col_offset=22), lineno=65, col_offset=4), Assign([Name('error_status', Store(), lineno=66, col_offset=4)], Str('500 Internal Server Error', lineno=66, col_offset=19), lineno=66, col_offset=4), Assign([Name('error_headers', Store(), lineno=67, col_offset=4)], List([Tuple([Str('Content-Type', lineno=67, col_offset=22), Str('text/plain', lineno=67, col_offset=37)], Load(), lineno=67, col_offset=22)], Load(), lineno=67, col_offset=20), lineno=67, col_offset=4), Assign([Name('error_body', Store(), lineno=68, col_offset=4)], Str('A server error occurred.  Please contact the administrator.', lineno=68, col_offset=17), lineno=68, col_offset=4), Assign([Name('status', Store(), lineno=71, col_offset=4), Name('result', Store(), lineno=71, col_offset=13)], Name('None', Load(), lineno=71, col_offset=22), lineno=71, col_offset=4), Assign([Name('headers_sent', Store(), lineno=72, col_offset=4)], Name('False', Load(), lineno=72, col_offset=19), lineno=72, col_offset=4), Assign([Name('headers', Store(), lineno=73, col_offset=4)], Name('None', Load(), lineno=73, col_offset=14), lineno=73, col_offset=4), Assign([Name('bytes_sent', Store(), lineno=74, col_offset=4)], Num(0, lineno=74, col_offset=17), lineno=74, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=76, col_offset=12), Name('application', Param(), lineno=76, col_offset=18)], None, None, []), [Expr(Str('Invoke the application', lineno=77, col_offset=8), lineno=77, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=12), 'setup_environ', Load(), lineno=84, col_offset=12), [], [], None, None, lineno=84, col_offset=12), lineno=84, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=85, col_offset=12), 'result', Store(), lineno=85, col_offset=12)], Call(Name('application', Load(), lineno=85, col_offset=26), [Attribute(Name('self', Load(), lineno=85, col_offset=38), 'environ', Load(), lineno=85, col_offset=38), Attribute(Name('self', Load(), lineno=85, col_offset=52), 'start_response', Load(), lineno=85, col_offset=52)], [], None, None, lineno=85, col_offset=26), lineno=85, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=86, col_offset=12), 'finish_response', Load(), lineno=86, col_offset=12), [], [], None, None, lineno=86, col_offset=12), lineno=86, col_offset=12)], [ExceptHandler(None, None, [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=16), 'handle_error', Load(), lineno=89, col_offset=16), [], [], None, None, lineno=89, col_offset=16), lineno=89, col_offset=16)], [ExceptHandler(None, None, [Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=16), 'close', Load(), lineno=92, col_offset=16), [], [], None, None, lineno=92, col_offset=16), lineno=92, col_offset=16), Raise(None, None, None, lineno=93, col_offset=16)], lineno=90, col_offset=12)], [], lineno=88, col_offset=12)], lineno=87, col_offset=8)], [], lineno=83, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('setup_environ', arguments([Name('self', Param(), lineno=96, col_offset=22)], None, None, []), [Expr(Str('Set up the environment for one request', lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Name('env', Store(), lineno=99, col_offset=8), Attribute(Name('self', Load(), lineno=99, col_offset=14), 'environ', Store(), lineno=99, col_offset=14)], Call(Attribute(Attribute(Name('self', Load(), lineno=99, col_offset=29), 'os_environ', Load(), lineno=99, col_offset=29), 'copy', Load(), lineno=99, col_offset=29), [], [], None, None, lineno=99, col_offset=29), lineno=99, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=8), 'add_cgi_vars', Load(), lineno=100, col_offset=8), [], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=102, col_offset=8), Index(Str('wsgi.input', lineno=102, col_offset=12)), Store(), lineno=102, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=102, col_offset=35), 'get_stdin', Load(), lineno=102, col_offset=35), [], [], None, None, lineno=102, col_offset=35), lineno=102, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=103, col_offset=8), Index(Str('wsgi.errors', lineno=103, col_offset=12)), Store(), lineno=103, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=103, col_offset=35), 'get_stderr', Load(), lineno=103, col_offset=35), [], [], None, None, lineno=103, col_offset=35), lineno=103, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=104, col_offset=8), Index(Str('wsgi.version', lineno=104, col_offset=12)), Store(), lineno=104, col_offset=8)], Attribute(Name('self', Load(), lineno=104, col_offset=35), 'wsgi_version', Load(), lineno=104, col_offset=35), lineno=104, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=105, col_offset=8), Index(Str('wsgi.run_once', lineno=105, col_offset=12)), Store(), lineno=105, col_offset=8)], Attribute(Name('self', Load(), lineno=105, col_offset=35), 'wsgi_run_once', Load(), lineno=105, col_offset=35), lineno=105, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=106, col_offset=8), Index(Str('wsgi.url_scheme', lineno=106, col_offset=12)), Store(), lineno=106, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=106, col_offset=35), 'get_scheme', Load(), lineno=106, col_offset=35), [], [], None, None, lineno=106, col_offset=35), lineno=106, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=107, col_offset=8), Index(Str('wsgi.multithread', lineno=107, col_offset=12)), Store(), lineno=107, col_offset=8)], Attribute(Name('self', Load(), lineno=107, col_offset=35), 'wsgi_multithread', Load(), lineno=107, col_offset=35), lineno=107, col_offset=8), Assign([Subscript(Name('env', Load(), lineno=108, col_offset=8), Index(Str('wsgi.multiprocess', lineno=108, col_offset=12)), Store(), lineno=108, col_offset=8)], Attribute(Name('self', Load(), lineno=108, col_offset=35), 'wsgi_multiprocess', Load(), lineno=108, col_offset=35), lineno=108, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=110, col_offset=11), 'wsgi_file_wrapper', Load(), lineno=110, col_offset=11), [IsNot()], [Name('None', Load(), lineno=110, col_offset=41)], lineno=110, col_offset=11), [Assign([Subscript(Name('env', Load(), lineno=111, col_offset=12), Index(Str('wsgi.file_wrapper', lineno=111, col_offset=16)), Store(), lineno=111, col_offset=12)], Attribute(Name('self', Load(), lineno=111, col_offset=39), 'wsgi_file_wrapper', Load(), lineno=111, col_offset=39), lineno=111, col_offset=12)], [], lineno=110, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=113, col_offset=11), 'origin_server', Load(), lineno=113, col_offset=11), Attribute(Name('self', Load(), lineno=113, col_offset=34), 'server_software', Load(), lineno=113, col_offset=34)], lineno=113, col_offset=11), [Expr(Call(Attribute(Name('env', Load(), lineno=114, col_offset=12), 'setdefault', Load(), lineno=114, col_offset=12), [Str('SERVER_SOFTWARE', lineno=114, col_offset=27), Attribute(Name('self', Load(), lineno=114, col_offset=45), 'server_software', Load(), lineno=114, col_offset=45)], [], None, None, lineno=114, col_offset=12), lineno=114, col_offset=12)], [], lineno=113, col_offset=8)], [], lineno=96, col_offset=4), FunctionDef('finish_response', arguments([Name('self', Param(), lineno=117, col_offset=24)], None, None, []), [Expr(Str("Send any iterable data, then close self and the iterable\n\n        Subclasses intended for use in asynchronous servers will\n        want to redefine this method, such that it sets up callbacks\n        in the event loop to iterate over the data, and to call\n        'self.close()' once the response is finished.\n        ", lineno=124, col_offset=-1), lineno=124, col_offset=-1), If(BoolOp(Or(), [UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=125, col_offset=15), 'result_is_file', Load(), lineno=125, col_offset=15), [], [], None, None, lineno=125, col_offset=15), lineno=125, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=125, col_offset=44), 'sendfile', Load(), lineno=125, col_offset=44), [], [], None, None, lineno=125, col_offset=44), lineno=125, col_offset=40)], lineno=125, col_offset=11), [For(Name('data', Store(), lineno=126, col_offset=16), Attribute(Name('self', Load(), lineno=126, col_offset=24), 'result', Load(), lineno=126, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=127, col_offset=16), 'write', Load(), lineno=127, col_offset=16), [Name('data', Load(), lineno=127, col_offset=27)], [], None, None, lineno=127, col_offset=16), lineno=127, col_offset=16)], [], lineno=126, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=12), 'finish_content', Load(), lineno=128, col_offset=12), [], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=12)], [], lineno=125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=129, col_offset=8), 'close', Load(), lineno=129, col_offset=8), [], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8)], [], lineno=117, col_offset=4), FunctionDef('get_scheme', arguments([Name('self', Param(), lineno=132, col_offset=19)], None, None, []), [Expr(Str('Return the URL scheme being used', lineno=133, col_offset=8), lineno=133, col_offset=8), Return(Call(Name('guess_scheme', Load(), lineno=134, col_offset=15), [Attribute(Name('self', Load(), lineno=134, col_offset=28), 'environ', Load(), lineno=134, col_offset=28)], [], None, None, lineno=134, col_offset=15), lineno=134, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('set_content_length', arguments([Name('self', Param(), lineno=137, col_offset=27)], None, None, []), [Expr(Str('Compute Content-Length or switch to chunked encoding if possible', lineno=138, col_offset=8), lineno=138, col_offset=8), TryExcept([Assign([Name('blocks', Store(), lineno=140, col_offset=12)], Call(Name('len', Load(), lineno=140, col_offset=21), [Attribute(Name('self', Load(), lineno=140, col_offset=25), 'result', Load(), lineno=140, col_offset=25)], [], None, None, lineno=140, col_offset=21), lineno=140, col_offset=12)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=141, col_offset=16), Name('AttributeError', Load(), lineno=141, col_offset=26), Name('NotImplementedError', Load(), lineno=141, col_offset=41)], Load(), lineno=141, col_offset=16), None, [Pass( lineno=142, col_offset=12)], lineno=141, col_offset=8)], [If(Compare(Name('blocks', Load(), lineno=144, col_offset=15), [Eq()], [Num(1, lineno=144, col_offset=23)], lineno=144, col_offset=15), [Assign([Subscript(Attribute(Name('self', Load(), lineno=145, col_offset=16), 'headers', Load(), lineno=145, col_offset=16), Index(Str('Content-Length', lineno=145, col_offset=29)), Store(), lineno=145, col_offset=16)], Call(Name('str', Load(), lineno=145, col_offset=49), [Attribute(Name('self', Load(), lineno=145, col_offset=53), 'bytes_sent', Load(), lineno=145, col_offset=53)], [], None, None, lineno=145, col_offset=49), lineno=145, col_offset=16), Return(None, lineno=146, col_offset=16)], [], lineno=144, col_offset=12)], lineno=139, col_offset=8)], [], lineno=137, col_offset=4), FunctionDef('cleanup_headers', arguments([Name('self', Param(), lineno=150, col_offset=24)], None, None, []), [Expr(Str('Make any necessary header changes or defaults\n\n        Subclasses can extend this to add other defaults.\n        ', lineno=154, col_offset=-1), lineno=154, col_offset=-1), If(Compare(Str('Content-Length', lineno=155, col_offset=11), [NotIn()], [Attribute(Name('self', Load(), lineno=155, col_offset=35), 'headers', Load(), lineno=155, col_offset=35)], lineno=155, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=12), 'set_content_length', Load(), lineno=156, col_offset=12), [], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=12)], [], lineno=155, col_offset=8)], [], lineno=150, col_offset=4), FunctionDef('start_response', arguments([Name('self', Param(), lineno=158, col_offset=23), Name('status', Param(), lineno=158, col_offset=29), Name('headers', Param(), lineno=158, col_offset=37), Name('exc_info', Param(), lineno=158, col_offset=45)], None, None, [Name('None', Load(), lineno=158, col_offset=54)]), [Expr(Str("'start_response()' callable as specified by PEP 333", lineno=159, col_offset=8), lineno=159, col_offset=8), If(Name('exc_info', Load(), lineno=161, col_offset=11), [TryFinally([If(Attribute(Name('self', Load(), lineno=163, col_offset=19), 'headers_sent', Load(), lineno=163, col_offset=19), [Raise(Subscript(Name('exc_info', Load(), lineno=165, col_offset=26), Index(Num(0, lineno=165, col_offset=35)), Load(), lineno=165, col_offset=26), Subscript(Name('exc_info', Load(), lineno=165, col_offset=39), Index(Num(1, lineno=165, col_offset=48)), Load(), lineno=165, col_offset=39), Subscript(Name('exc_info', Load(), lineno=165, col_offset=52), Index(Num(2, lineno=165, col_offset=61)), Load(), lineno=165, col_offset=52), lineno=165, col_offset=20)], [], lineno=163, col_offset=16)], [Assign([Name('exc_info', Store(), lineno=167, col_offset=16)], Name('None', Load(), lineno=167, col_offset=27), lineno=167, col_offset=16)], lineno=162, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=168, col_offset=13), 'headers', Load(), lineno=168, col_offset=13), [IsNot()], [Name('None', Load(), lineno=168, col_offset=33)], lineno=168, col_offset=13), [Raise(Call(Name('AssertionError', Load(), lineno=169, col_offset=18), [Str('Headers already set!', lineno=169, col_offset=33)], [], None, None, lineno=169, col_offset=18), None, None, lineno=169, col_offset=12)], [], lineno=168, col_offset=13)], lineno=161, col_offset=8), Assert(Compare(Call(Name('type', Load(), lineno=171, col_offset=15), [Name('status', Load(), lineno=171, col_offset=20)], [], None, None, lineno=171, col_offset=15), [Is()], [Name('StringType', Load(), lineno=171, col_offset=31)], lineno=171, col_offset=15), Str('Status must be a string', lineno=171, col_offset=42), lineno=171, col_offset=8), Assert(Compare(Call(Name('len', Load(), lineno=172, col_offset=15), [Name('status', Load(), lineno=172, col_offset=19)], [], None, None, lineno=172, col_offset=15), [GtE()], [Num(4, lineno=172, col_offset=28)], lineno=172, col_offset=15), Str('Status must be at least 4 characters', lineno=172, col_offset=30), lineno=172, col_offset=8), Assert(Call(Name('int', Load(), lineno=173, col_offset=15), [Subscript(Name('status', Load(), lineno=173, col_offset=19), Slice(None, Num(3, lineno=173, col_offset=27), None), Load(), lineno=173, col_offset=19)], [], None, None, lineno=173, col_offset=15), Str('Status message must begin w/3-digit code', lineno=173, col_offset=31), lineno=173, col_offset=8), Assert(Compare(Subscript(Name('status', Load(), lineno=174, col_offset=15), Index(Num(3, lineno=174, col_offset=22)), Load(), lineno=174, col_offset=15), [Eq()], [Str(' ', lineno=174, col_offset=26)], lineno=174, col_offset=15), Str('Status message must have a space after code', lineno=174, col_offset=31), lineno=174, col_offset=8), If(Name('__debug__', Load(), lineno=175, col_offset=11), [For(Tuple([Name('name', Store(), lineno=176, col_offset=16), Name('val', Store(), lineno=176, col_offset=21)], Store(), lineno=176, col_offset=16), Name('headers', Load(), lineno=176, col_offset=28), [Assert(Compare(Call(Name('type', Load(), lineno=177, col_offset=23), [Name('name', Load(), lineno=177, col_offset=28)], [], None, None, lineno=177, col_offset=23), [Is()], [Name('StringType', Load(), lineno=177, col_offset=37)], lineno=177, col_offset=23), Str('Header names must be strings', lineno=177, col_offset=48), lineno=177, col_offset=16), Assert(Compare(Call(Name('type', Load(), lineno=178, col_offset=23), [Name('val', Load(), lineno=178, col_offset=28)], [], None, None, lineno=178, col_offset=23), [Is()], [Name('StringType', Load(), lineno=178, col_offset=36)], lineno=178, col_offset=23), Str('Header values must be strings', lineno=178, col_offset=47), lineno=178, col_offset=16), Assert(UnaryOp(Not(), Call(Name('is_hop_by_hop', Load(), lineno=179, col_offset=27), [Name('name', Load(), lineno=179, col_offset=41)], [], None, None, lineno=179, col_offset=27), lineno=179, col_offset=23), Str('Hop-by-hop headers not allowed', lineno=179, col_offset=47), lineno=179, col_offset=16)], [], lineno=176, col_offset=12)], [], lineno=175, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=180, col_offset=8), 'status', Store(), lineno=180, col_offset=8)], Name('status', Load(), lineno=180, col_offset=22), lineno=180, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=181, col_offset=8), 'headers', Store(), lineno=181, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=181, col_offset=23), 'headers_class', Load(), lineno=181, col_offset=23), [Name('headers', Load(), lineno=181, col_offset=42)], [], None, None, lineno=181, col_offset=23), lineno=181, col_offset=8), Return(Attribute(Name('self', Load(), lineno=182, col_offset=15), 'write', Load(), lineno=182, col_offset=15), lineno=182, col_offset=8)], [], lineno=158, col_offset=4), FunctionDef('send_preamble', arguments([Name('self', Param(), lineno=185, col_offset=22)], None, None, []), [Expr(Str('Transmit version/status/date/server, via self._write()', lineno=186, col_offset=8), lineno=186, col_offset=8), If(Attribute(Name('self', Load(), lineno=187, col_offset=11), 'origin_server', Load(), lineno=187, col_offset=11), [If(Call(Attribute(Name('self', Load(), lineno=188, col_offset=15), 'client_is_modern', Load(), lineno=188, col_offset=15), [], [], None, None, lineno=188, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=16), '_write', Load(), lineno=189, col_offset=16), [BinOp(Str('HTTP/%s %s\r\n', lineno=189, col_offset=28), Mod(), Tuple([Attribute(Name('self', Load(), lineno=189, col_offset=48), 'http_version', Load(), lineno=189, col_offset=48), Attribute(Name('self', Load(), lineno=189, col_offset=66), 'status', Load(), lineno=189, col_offset=66)], Load(), lineno=189, col_offset=48), lineno=189, col_offset=28)], [], None, None, lineno=189, col_offset=16), lineno=189, col_offset=16), If(Compare(Str('Date', lineno=190, col_offset=19), [NotIn()], [Attribute(Name('self', Load(), lineno=190, col_offset=33), 'headers', Load(), lineno=190, col_offset=33)], lineno=190, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=20), '_write', Load(), lineno=191, col_offset=20), [BinOp(Str('Date: %s\r\n', lineno=192, col_offset=24), Mod(), Call(Name('format_date_time', Load(), lineno=192, col_offset=41), [Call(Attribute(Name('time', Load(), lineno=192, col_offset=58), 'time', Load(), lineno=192, col_offset=58), [], [], None, None, lineno=192, col_offset=58)], [], None, None, lineno=192, col_offset=41), lineno=192, col_offset=24)], [], None, None, lineno=191, col_offset=20), lineno=191, col_offset=20)], [], lineno=190, col_offset=16), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=194, col_offset=19), 'server_software', Load(), lineno=194, col_offset=19), Compare(Str('Server', lineno=194, col_offset=44), [NotIn()], [Attribute(Name('self', Load(), lineno=194, col_offset=60), 'headers', Load(), lineno=194, col_offset=60)], lineno=194, col_offset=44)], lineno=194, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=195, col_offset=20), '_write', Load(), lineno=195, col_offset=20), [BinOp(Str('Server: %s\r\n', lineno=195, col_offset=32), Mod(), Attribute(Name('self', Load(), lineno=195, col_offset=51), 'server_software', Load(), lineno=195, col_offset=51), lineno=195, col_offset=32)], [], None, None, lineno=195, col_offset=20), lineno=195, col_offset=20)], [], lineno=194, col_offset=16)], [], lineno=188, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=12), '_write', Load(), lineno=197, col_offset=12), [BinOp(Str('Status: %s\r\n', lineno=197, col_offset=24), Mod(), Attribute(Name('self', Load(), lineno=197, col_offset=43), 'status', Load(), lineno=197, col_offset=43), lineno=197, col_offset=24)], [], None, None, lineno=197, col_offset=12), lineno=197, col_offset=12)], lineno=187, col_offset=8)], [], lineno=185, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=199, col_offset=14), Name('data', Param(), lineno=199, col_offset=20)], None, None, []), [Expr(Str("'write()' callable as specified by PEP 333", lineno=200, col_offset=8), lineno=200, col_offset=8), Assert(Compare(Call(Name('type', Load(), lineno=202, col_offset=15), [Name('data', Load(), lineno=202, col_offset=20)], [], None, None, lineno=202, col_offset=15), [Is()], [Name('StringType', Load(), lineno=202, col_offset=29)], lineno=202, col_offset=15), Str('write() argument must be string', lineno=202, col_offset=40), lineno=202, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=204, col_offset=15), 'status', Load(), lineno=204, col_offset=15), lineno=204, col_offset=11), [Raise(Call(Name('AssertionError', Load(), lineno=205, col_offset=18), [Str('write() before start_response()', lineno=205, col_offset=33)], [], None, None, lineno=205, col_offset=18), None, None, lineno=205, col_offset=12)], [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=207, col_offset=17), 'headers_sent', Load(), lineno=207, col_offset=17), lineno=207, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=209, col_offset=12), 'bytes_sent', Store(), lineno=209, col_offset=12)], Call(Name('len', Load(), lineno=209, col_offset=30), [Name('data', Load(), lineno=209, col_offset=34)], [], None, None, lineno=209, col_offset=30), lineno=209, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=12), 'send_headers', Load(), lineno=210, col_offset=12), [], [], None, None, lineno=210, col_offset=12), lineno=210, col_offset=12)], [AugAssign(Attribute(Name('self', Load(), lineno=212, col_offset=12), 'bytes_sent', Store(), lineno=212, col_offset=12), Add(), Call(Name('len', Load(), lineno=212, col_offset=31), [Name('data', Load(), lineno=212, col_offset=35)], [], None, None, lineno=212, col_offset=31), lineno=212, col_offset=12)], lineno=207, col_offset=13)], lineno=204, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=215, col_offset=8), '_write', Load(), lineno=215, col_offset=8), [Name('data', Load(), lineno=215, col_offset=20)], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=216, col_offset=8), '_flush', Load(), lineno=216, col_offset=8), [], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8)], [], lineno=199, col_offset=4), FunctionDef('sendfile', arguments([Name('self', Param(), lineno=219, col_offset=17)], None, None, []), [Expr(Str("Platform-specific file transmission\n\n        Override this method in subclasses to support platform-specific\n        file transmission.  It is only called if the application's\n        return iterable ('self.result') is an instance of\n        'self.wsgi_file_wrapper'.\n\n        This method should return a true value if it was able to actually\n        transmit the wrapped file-like object using a platform-specific\n        approach.  It should return a false value if normal iteration\n        should be used instead.  An exception can be raised to indicate\n        that transmission was attempted, but failed.\n\n        NOTE: this method should call 'self.send_headers()' if\n        'self.headers_sent' is false and it is going to attempt direct\n        transmission of the file.\n        ", lineno=236, col_offset=-1), lineno=236, col_offset=-1), Return(Name('False', Load(), lineno=237, col_offset=15), lineno=237, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('finish_content', arguments([Name('self', Param(), lineno=240, col_offset=23)], None, None, []), [Expr(Str('Ensure headers and content have both been sent', lineno=241, col_offset=8), lineno=241, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=242, col_offset=15), 'headers_sent', Load(), lineno=242, col_offset=15), lineno=242, col_offset=11), [Assign([Subscript(Attribute(Name('self', Load(), lineno=243, col_offset=12), 'headers', Load(), lineno=243, col_offset=12), Index(Str('Content-Length', lineno=243, col_offset=25)), Store(), lineno=243, col_offset=12)], Str('0', lineno=243, col_offset=45), lineno=243, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=12), 'send_headers', Load(), lineno=244, col_offset=12), [], [], None, None, lineno=244, col_offset=12), lineno=244, col_offset=12)], [Pass( lineno=246, col_offset=12)], lineno=242, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=248, col_offset=14)], None, None, []), [Expr(Str('Close the iterable (if needed) and reset all instance vars\n\n        Subclasses may want to also drop the client connection.\n        ', lineno=252, col_offset=-1), lineno=252, col_offset=-1), TryFinally([If(Call(Name('hasattr', Load(), lineno=254, col_offset=15), [Attribute(Name('self', Load(), lineno=254, col_offset=23), 'result', Load(), lineno=254, col_offset=23), Str('close', lineno=254, col_offset=35)], [], None, None, lineno=254, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=255, col_offset=16), 'result', Load(), lineno=255, col_offset=16), 'close', Load(), lineno=255, col_offset=16), [], [], None, None, lineno=255, col_offset=16), lineno=255, col_offset=16)], [], lineno=254, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=257, col_offset=12), 'result', Store(), lineno=257, col_offset=12), Attribute(Name('self', Load(), lineno=257, col_offset=26), 'headers', Store(), lineno=257, col_offset=26), Attribute(Name('self', Load(), lineno=257, col_offset=41), 'status', Store(), lineno=257, col_offset=41), Attribute(Name('self', Load(), lineno=257, col_offset=55), 'environ', Store(), lineno=257, col_offset=55)], Name('None', Load(), lineno=257, col_offset=70), lineno=257, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=12), 'bytes_sent', Store(), lineno=258, col_offset=12)], Num(0, lineno=258, col_offset=30), lineno=258, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=33), 'headers_sent', Store(), lineno=258, col_offset=33)], Name('False', Load(), lineno=258, col_offset=53), lineno=258, col_offset=33)], lineno=253, col_offset=8)], [], lineno=248, col_offset=4), FunctionDef('send_headers', arguments([Name('self', Param(), lineno=261, col_offset=21)], None, None, []), [Expr(Str('Transmit headers to the client, via self._write()', lineno=262, col_offset=8), lineno=262, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=263, col_offset=8), 'cleanup_headers', Load(), lineno=263, col_offset=8), [], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=264, col_offset=8), 'headers_sent', Store(), lineno=264, col_offset=8)], Name('True', Load(), lineno=264, col_offset=28), lineno=264, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=265, col_offset=15), 'origin_server', Load(), lineno=265, col_offset=15), lineno=265, col_offset=11), Call(Attribute(Name('self', Load(), lineno=265, col_offset=37), 'client_is_modern', Load(), lineno=265, col_offset=37), [], [], None, None, lineno=265, col_offset=37)], lineno=265, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=12), 'send_preamble', Load(), lineno=266, col_offset=12), [], [], None, None, lineno=266, col_offset=12), lineno=266, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=12), '_write', Load(), lineno=267, col_offset=12), [Call(Name('str', Load(), lineno=267, col_offset=24), [Attribute(Name('self', Load(), lineno=267, col_offset=28), 'headers', Load(), lineno=267, col_offset=28)], [], None, None, lineno=267, col_offset=24)], [], None, None, lineno=267, col_offset=12), lineno=267, col_offset=12)], [], lineno=265, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('result_is_file', arguments([Name('self', Param(), lineno=270, col_offset=23)], None, None, []), [Expr(Str("True if 'self.result' is an instance of 'self.wsgi_file_wrapper'", lineno=271, col_offset=8), lineno=271, col_offset=8), Assign([Name('wrapper', Store(), lineno=272, col_offset=8)], Attribute(Name('self', Load(), lineno=272, col_offset=18), 'wsgi_file_wrapper', Load(), lineno=272, col_offset=18), lineno=272, col_offset=8), Return(BoolOp(And(), [Compare(Name('wrapper', Load(), lineno=273, col_offset=15), [IsNot()], [Name('None', Load(), lineno=273, col_offset=30)], lineno=273, col_offset=15), Call(Name('isinstance', Load(), lineno=273, col_offset=39), [Attribute(Name('self', Load(), lineno=273, col_offset=50), 'result', Load(), lineno=273, col_offset=50), Name('wrapper', Load(), lineno=273, col_offset=62)], [], None, None, lineno=273, col_offset=39)], lineno=273, col_offset=15), lineno=273, col_offset=8)], [], lineno=270, col_offset=4), FunctionDef('client_is_modern', arguments([Name('self', Param(), lineno=276, col_offset=25)], None, None, []), [Expr(Str('True if client can accept status and headers', lineno=277, col_offset=8), lineno=277, col_offset=8), Return(Compare(Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=278, col_offset=15), 'environ', Load(), lineno=278, col_offset=15), Index(Str('SERVER_PROTOCOL', lineno=278, col_offset=28)), Load(), lineno=278, col_offset=15), 'upper', Load(), lineno=278, col_offset=15), [], [], None, None, lineno=278, col_offset=15), [NotEq()], [Str('HTTP/0.9', lineno=278, col_offset=58)], lineno=278, col_offset=15), lineno=278, col_offset=8)], [], lineno=276, col_offset=4), FunctionDef('log_exception', arguments([Name('self', Param(), lineno=281, col_offset=22), Name('exc_info', Param(), lineno=281, col_offset=27)], None, None, []), [Expr(Str("Log the 'exc_info' tuple in the server log\n\n        Subclasses may override to retarget the output or change its format.\n        ", lineno=285, col_offset=-1), lineno=285, col_offset=-1), TryFinally([ImportFrom('traceback', [alias('print_exception', None)], 0, lineno=287, col_offset=12), Assign([Name('stderr', Store(), lineno=288, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=288, col_offset=21), 'get_stderr', Load(), lineno=288, col_offset=21), [], [], None, None, lineno=288, col_offset=21), lineno=288, col_offset=12), Expr(Call(Name('print_exception', Load(), lineno=289, col_offset=12), [Subscript(Name('exc_info', Load(), lineno=290, col_offset=16), Index(Num(0, lineno=290, col_offset=25)), Load(), lineno=290, col_offset=16), Subscript(Name('exc_info', Load(), lineno=290, col_offset=29), Index(Num(1, lineno=290, col_offset=38)), Load(), lineno=290, col_offset=29), Subscript(Name('exc_info', Load(), lineno=290, col_offset=42), Index(Num(2, lineno=290, col_offset=51)), Load(), lineno=290, col_offset=42), Attribute(Name('self', Load(), lineno=291, col_offset=16), 'traceback_limit', Load(), lineno=291, col_offset=16), Name('stderr', Load(), lineno=291, col_offset=38)], [], None, None, lineno=289, col_offset=12), lineno=289, col_offset=12), Expr(Call(Attribute(Name('stderr', Load(), lineno=293, col_offset=12), 'flush', Load(), lineno=293, col_offset=12), [], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=12)], [Assign([Name('exc_info', Store(), lineno=295, col_offset=12)], Name('None', Load(), lineno=295, col_offset=23), lineno=295, col_offset=12)], lineno=286, col_offset=8)], [], lineno=281, col_offset=4), FunctionDef('handle_error', arguments([Name('self', Param(), lineno=297, col_offset=21)], None, None, []), [Expr(Str('Log current error, and send error output to client if possible', lineno=298, col_offset=8), lineno=298, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=299, col_offset=8), 'log_exception', Load(), lineno=299, col_offset=8), [Call(Attribute(Name('sys', Load(), lineno=299, col_offset=27), 'exc_info', Load(), lineno=299, col_offset=27), [], [], None, None, lineno=299, col_offset=27)], [], None, None, lineno=299, col_offset=8), lineno=299, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=300, col_offset=15), 'headers_sent', Load(), lineno=300, col_offset=15), lineno=300, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=301, col_offset=12), 'result', Store(), lineno=301, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=301, col_offset=26), 'error_output', Load(), lineno=301, col_offset=26), [Attribute(Name('self', Load(), lineno=301, col_offset=44), 'environ', Load(), lineno=301, col_offset=44), Attribute(Name('self', Load(), lineno=301, col_offset=58), 'start_response', Load(), lineno=301, col_offset=58)], [], None, None, lineno=301, col_offset=26), lineno=301, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=302, col_offset=12), 'finish_response', Load(), lineno=302, col_offset=12), [], [], None, None, lineno=302, col_offset=12), lineno=302, col_offset=12)], [], lineno=300, col_offset=8)], [], lineno=297, col_offset=4), FunctionDef('error_output', arguments([Name('self', Param(), lineno=305, col_offset=21), Name('environ', Param(), lineno=305, col_offset=27), Name('start_response', Param(), lineno=305, col_offset=36)], None, None, []), [Expr(Str("WSGI mini-app to create error output\n\n        By default, this just uses the 'error_status', 'error_headers',\n        and 'error_body' attributes to generate an output page.  It can\n        be overridden in a subclass to dynamically generate diagnostics,\n        choose an appropriate message for the user's preferred language, etc.\n\n        Note, however, that it's not recommended from a security perspective to\n        spit out diagnostics to any old user; ideally, you should have to do\n        something special to enable diagnostic output, which is why we don't\n        include any here!\n        ", lineno=317, col_offset=-1), lineno=317, col_offset=-1), Expr(Call(Name('start_response', Load(), lineno=318, col_offset=8), [Attribute(Name('self', Load(), lineno=318, col_offset=23), 'error_status', Load(), lineno=318, col_offset=23), Subscript(Attribute(Name('self', Load(), lineno=318, col_offset=41), 'error_headers', Load(), lineno=318, col_offset=41), Slice(None, None, None), Load(), lineno=318, col_offset=41), Call(Attribute(Name('sys', Load(), lineno=318, col_offset=63), 'exc_info', Load(), lineno=318, col_offset=63), [], [], None, None, lineno=318, col_offset=63)], [], None, None, lineno=318, col_offset=8), lineno=318, col_offset=8), Return(List([Attribute(Name('self', Load(), lineno=319, col_offset=16), 'error_body', Load(), lineno=319, col_offset=16)], Load(), lineno=319, col_offset=15), lineno=319, col_offset=8)], [], lineno=305, col_offset=4), FunctionDef('_write', arguments([Name('self', Param(), lineno=324, col_offset=15), Name('data', Param(), lineno=324, col_offset=20)], None, None, []), [Expr(Str("Override in subclass to buffer data for send to client\n\n        It's okay if this method actually transmits the data; BaseHandler\n        just separates write and flush operations for greater efficiency\n        when the underlying system actually has such a distinction.\n        ", lineno=330, col_offset=-1), lineno=330, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=331, col_offset=14), None, None, lineno=331, col_offset=8)], [], lineno=324, col_offset=4), FunctionDef('_flush', arguments([Name('self', Param(), lineno=333, col_offset=15)], None, None, []), [Expr(Str("Override in subclass to force sending of recent '_write()' calls\n\n        It's okay if this method is a no-op (i.e., if '_write()' actually\n        sends the data.\n        ", lineno=338, col_offset=-1), lineno=338, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=339, col_offset=14), None, None, lineno=339, col_offset=8)], [], lineno=333, col_offset=4), FunctionDef('get_stdin', arguments([Name('self', Param(), lineno=341, col_offset=18)], None, None, []), [Expr(Str("Override in subclass to return suitable 'wsgi.input'", lineno=342, col_offset=8), lineno=342, col_offset=8), Raise(Name('NotImplementedError', Load(), lineno=343, col_offset=14), None, None, lineno=343, col_offset=8)], [], lineno=341, col_offset=4), FunctionDef('get_stderr', arguments([Name('self', Param(), lineno=345, col_offset=19)], None, None, []), [Expr(Str("Override in subclass to return suitable 'wsgi.errors'", lineno=346, col_offset=8), lineno=346, col_offset=8), Raise(Name('NotImplementedError', Load(), lineno=347, col_offset=14), None, None, lineno=347, col_offset=8)], [], lineno=345, col_offset=4), FunctionDef('add_cgi_vars', arguments([Name('self', Param(), lineno=349, col_offset=21)], None, None, []), [Expr(Str("Override in subclass to insert CGI variables in 'self.environ'", lineno=350, col_offset=8), lineno=350, col_offset=8), Raise(Name('NotImplementedError', Load(), lineno=351, col_offset=14), None, None, lineno=351, col_offset=8)], [], lineno=349, col_offset=4)], [], lineno=42, col_offset=0), ClassDef('SimpleHandler', [Name('BaseHandler', Load(), lineno=354, col_offset=20)], [Expr(Str("Handler that's just initialized with streams, environment, etc.\n\n    This handler subclass is intended for synchronous HTTP/1.0 origin servers,\n    and handles sending the entire response output, given the correct inputs.\n\n    Usage::\n\n        handler = SimpleHandler(\n            inp,out,err,env, multithread=False, multiprocess=True\n        )\n        handler.run(app)", lineno=365, col_offset=-1), lineno=365, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=367, col_offset=17), Name('stdin', Param(), lineno=367, col_offset=22), Name('stdout', Param(), lineno=367, col_offset=28), Name('stderr', Param(), lineno=367, col_offset=35), Name('environ', Param(), lineno=367, col_offset=42), Name('multithread', Param(), lineno=368, col_offset=8), Name('multiprocess', Param(), lineno=368, col_offset=26)], None, None, [Name('True', Load(), lineno=368, col_offset=20), Name('False', Load(), lineno=368, col_offset=39)]), [Assign([Attribute(Name('self', Load(), lineno=370, col_offset=8), 'stdin', Store(), lineno=370, col_offset=8)], Name('stdin', Load(), lineno=370, col_offset=21), lineno=370, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=371, col_offset=8), 'stdout', Store(), lineno=371, col_offset=8)], Name('stdout', Load(), lineno=371, col_offset=22), lineno=371, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=372, col_offset=8), 'stderr', Store(), lineno=372, col_offset=8)], Name('stderr', Load(), lineno=372, col_offset=22), lineno=372, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=373, col_offset=8), 'base_env', Store(), lineno=373, col_offset=8)], Name('environ', Load(), lineno=373, col_offset=24), lineno=373, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=374, col_offset=8), 'wsgi_multithread', Store(), lineno=374, col_offset=8)], Name('multithread', Load(), lineno=374, col_offset=32), lineno=374, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=375, col_offset=8), 'wsgi_multiprocess', Store(), lineno=375, col_offset=8)], Name('multiprocess', Load(), lineno=375, col_offset=33), lineno=375, col_offset=8)], [], lineno=367, col_offset=4), FunctionDef('get_stdin', arguments([Name('self', Param(), lineno=377, col_offset=18)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=378, col_offset=15), 'stdin', Load(), lineno=378, col_offset=15), lineno=378, col_offset=8)], [], lineno=377, col_offset=4), FunctionDef('get_stderr', arguments([Name('self', Param(), lineno=380, col_offset=19)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=381, col_offset=15), 'stderr', Load(), lineno=381, col_offset=15), lineno=381, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('add_cgi_vars', arguments([Name('self', Param(), lineno=383, col_offset=21)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=384, col_offset=8), 'environ', Load(), lineno=384, col_offset=8), 'update', Load(), lineno=384, col_offset=8), [Attribute(Name('self', Load(), lineno=384, col_offset=28), 'base_env', Load(), lineno=384, col_offset=28)], [], None, None, lineno=384, col_offset=8), lineno=384, col_offset=8)], [], lineno=383, col_offset=4), FunctionDef('_write', arguments([Name('self', Param(), lineno=386, col_offset=15), Name('data', Param(), lineno=386, col_offset=20)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=387, col_offset=8), 'stdout', Load(), lineno=387, col_offset=8), 'write', Load(), lineno=387, col_offset=8), [Name('data', Load(), lineno=387, col_offset=26)], [], None, None, lineno=387, col_offset=8), lineno=387, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=388, col_offset=8), '_write', Store(), lineno=388, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=388, col_offset=22), 'stdout', Load(), lineno=388, col_offset=22), 'write', Load(), lineno=388, col_offset=22), lineno=388, col_offset=8)], [], lineno=386, col_offset=4), FunctionDef('_flush', arguments([Name('self', Param(), lineno=390, col_offset=15)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=391, col_offset=8), 'stdout', Load(), lineno=391, col_offset=8), 'flush', Load(), lineno=391, col_offset=8), [], [], None, None, lineno=391, col_offset=8), lineno=391, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=392, col_offset=8), '_flush', Store(), lineno=392, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=392, col_offset=22), 'stdout', Load(), lineno=392, col_offset=22), 'flush', Load(), lineno=392, col_offset=22), lineno=392, col_offset=8)], [], lineno=390, col_offset=4)], [], lineno=354, col_offset=0), ClassDef('BaseCGIHandler', [Name('SimpleHandler', Load(), lineno=395, col_offset=21)], [Expr(Str("CGI-like systems using input/output/error streams and environ mapping\n\n    Usage::\n\n        handler = BaseCGIHandler(inp,out,err,env)\n        handler.run(app)\n\n    This handler class is useful for gateway protocols like ReadyExec and\n    FastCGI, that have usable input/output/error streams and an environment\n    mapping.  It's also the base class for CGIHandler, which just uses\n    sys.stdin, os.environ, and so on.\n\n    The constructor also takes keyword arguments 'multithread' and\n    'multiprocess' (defaulting to 'True' and 'False' respectively) to control\n    the configuration sent to the application.  It sets 'origin_server' to\n    False (to enable CGI-like output), and assumes that 'wsgi.run_once' is\n    False.\n    ", lineno=414, col_offset=-1), lineno=414, col_offset=-1), Assign([Name('origin_server', Store(), lineno=416, col_offset=4)], Name('False', Load(), lineno=416, col_offset=20), lineno=416, col_offset=4)], [], lineno=395, col_offset=0), ClassDef('CGIHandler', [Name('BaseCGIHandler', Load(), lineno=419, col_offset=17)], [Expr(Str("CGI-based invocation via sys.stdin/stdout/stderr and os.environ\n\n    Usage::\n\n        CGIHandler().run(app)\n\n    The difference between this class and BaseCGIHandler is that it always\n    uses 'wsgi.run_once' of 'True', 'wsgi.multithread' of 'False', and\n    'wsgi.multiprocess' of 'True'.  It does not take any initialization\n    parameters, but always uses 'sys.stdin', 'os.environ', and friends.\n\n    If you need to override any of these parameters, use BaseCGIHandler\n    instead.\n    ", lineno=434, col_offset=-1), lineno=434, col_offset=-1), Assign([Name('wsgi_run_once', Store(), lineno=436, col_offset=4)], Name('True', Load(), lineno=436, col_offset=20), lineno=436, col_offset=4), Assign([Name('os_environ', Store(), lineno=440, col_offset=4)], Dict([], [], lineno=440, col_offset=17), lineno=440, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=442, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('BaseCGIHandler', Load(), lineno=443, col_offset=8), '__init__', Load(), lineno=443, col_offset=8), [Name('self', Load(), lineno=444, col_offset=12), Attribute(Name('sys', Load(), lineno=444, col_offset=18), 'stdin', Load(), lineno=444, col_offset=18), Attribute(Name('sys', Load(), lineno=444, col_offset=29), 'stdout', Load(), lineno=444, col_offset=29), Attribute(Name('sys', Load(), lineno=444, col_offset=41), 'stderr', Load(), lineno=444, col_offset=41), Call(Name('dict', Load(), lineno=444, col_offset=53), [Call(Attribute(Attribute(Name('os', Load(), lineno=444, col_offset=58), 'environ', Load(), lineno=444, col_offset=58), 'items', Load(), lineno=444, col_offset=58), [], [], None, None, lineno=444, col_offset=58)], [], None, None, lineno=444, col_offset=53)], [keyword('multithread', Name('False', Load(), lineno=445, col_offset=24)), keyword('multiprocess', Name('True', Load(), lineno=445, col_offset=44))], None, None, lineno=443, col_offset=8), lineno=443, col_offset=8)], [], lineno=442, col_offset=4)], [], lineno=419, col_offset=0)])
