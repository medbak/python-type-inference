Module([Expr(Str("Fixer for has_key().\n\nCalls to .has_key() methods are expressed in terms of the 'in'\noperator:\n\n    d.has_key(k) -> k in d\n\nCAVEATS:\n1) While the primary target of this fixer is dict.has_key(), the\n   fixer will change any has_key() method call, regardless of its\n   class.\n\n2) Cases like this will not be converted:\n\n    m = d.has_key\n    if m(k):\n        ...\n\n   Only *calls* to has_key() are converted. While it is possible to\n   convert the above to something like\n\n    m = d.__contains__\n    if m(k):\n        ...\n\n   this is currently not done.\n", lineno=30, col_offset=-1), lineno=30, col_offset=-1), ImportFrom(None, [alias('pytree', None)], 2, lineno=33, col_offset=0), ImportFrom('pgen2', [alias('token', None)], 2, lineno=34, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=35, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('parenthesize', None)], 2, lineno=36, col_offset=0), ClassDef('FixHasKey', [Attribute(Name('fixer_base', Load(), lineno=39, col_offset=16), 'BaseFix', Load(), lineno=39, col_offset=16)], [Assign([Name('BM_compatible', Store(), lineno=40, col_offset=4)], Name('True', Load(), lineno=40, col_offset=20), lineno=40, col_offset=4), Assign([Name('PATTERN', Store(), lineno=42, col_offset=4)], Str("\n    anchor=power<\n        before=any+\n        trailer< '.' 'has_key' >\n        trailer<\n            '('\n            ( not(arglist | argument<any '=' any>) arg=any\n            | arglist<(not argument<any '=' any>) arg=any ','>\n            )\n            ')'\n        >\n        after=any*\n    >\n    |\n    negation=not_test<\n        'not'\n        anchor=power<\n            before=any+\n            trailer< '.' 'has_key' >\n            trailer<\n                '('\n                ( not(arglist | argument<any '=' any>) arg=any\n                | arglist<(not argument<any '=' any>) arg=any ','>\n                )\n                ')'\n            >\n        >\n    >\n    ", lineno=70, col_offset=-1), lineno=42, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=72, col_offset=18), Name('node', Param(), lineno=72, col_offset=24), Name('results', Param(), lineno=72, col_offset=30)], None, None, []), [Assert(Name('results', Load(), lineno=73, col_offset=15), None, lineno=73, col_offset=8), Assign([Name('syms', Store(), lineno=74, col_offset=8)], Attribute(Name('self', Load(), lineno=74, col_offset=15), 'syms', Load(), lineno=74, col_offset=15), lineno=74, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Attribute(Name('node', Load(), lineno=75, col_offset=12), 'parent', Load(), lineno=75, col_offset=12), 'type', Load(), lineno=75, col_offset=12), [Eq()], [Attribute(Name('syms', Load(), lineno=75, col_offset=32), 'not_test', Load(), lineno=75, col_offset=32)], lineno=75, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'pattern', Load(), lineno=76, col_offset=12), 'match', Load(), lineno=76, col_offset=12), [Attribute(Name('node', Load(), lineno=76, col_offset=31), 'parent', Load(), lineno=76, col_offset=31)], [], None, None, lineno=76, col_offset=12)], lineno=75, col_offset=12), [Return(Name('None', Load(), lineno=79, col_offset=19), lineno=79, col_offset=12)], [], lineno=75, col_offset=8), Assign([Name('negation', Store(), lineno=80, col_offset=8)], Call(Attribute(Name('results', Load(), lineno=80, col_offset=19), 'get', Load(), lineno=80, col_offset=19), [Str('negation', lineno=80, col_offset=31)], [], None, None, lineno=80, col_offset=19), lineno=80, col_offset=8), Assign([Name('anchor', Store(), lineno=81, col_offset=8)], Subscript(Name('results', Load(), lineno=81, col_offset=17), Index(Str('anchor', lineno=81, col_offset=25)), Load(), lineno=81, col_offset=17), lineno=81, col_offset=8), Assign([Name('prefix', Store(), lineno=82, col_offset=8)], Attribute(Name('node', Load(), lineno=82, col_offset=17), 'prefix', Load(), lineno=82, col_offset=17), lineno=82, col_offset=8), Assign([Name('before', Store(), lineno=83, col_offset=8)], ListComp(Call(Attribute(Name('n', Load(), lineno=83, col_offset=18), 'clone', Load(), lineno=83, col_offset=18), [], [], None, None, lineno=83, col_offset=18), [comprehension(Name('n', Store(), lineno=83, col_offset=32), Subscript(Name('results', Load(), lineno=83, col_offset=37), Index(Str('before', lineno=83, col_offset=45)), Load(), lineno=83, col_offset=37), [])], lineno=83, col_offset=18), lineno=83, col_offset=8), Assign([Name('arg', Store(), lineno=84, col_offset=8)], Call(Attribute(Subscript(Name('results', Load(), lineno=84, col_offset=14), Index(Str('arg', lineno=84, col_offset=22)), Load(), lineno=84, col_offset=14), 'clone', Load(), lineno=84, col_offset=14), [], [], None, None, lineno=84, col_offset=14), lineno=84, col_offset=8), Assign([Name('after', Store(), lineno=85, col_offset=8)], Call(Attribute(Name('results', Load(), lineno=85, col_offset=16), 'get', Load(), lineno=85, col_offset=16), [Str('after', lineno=85, col_offset=28)], [], None, None, lineno=85, col_offset=16), lineno=85, col_offset=8), If(Name('after', Load(), lineno=86, col_offset=11), [Assign([Name('after', Store(), lineno=87, col_offset=12)], ListComp(Call(Attribute(Name('n', Load(), lineno=87, col_offset=21), 'clone', Load(), lineno=87, col_offset=21), [], [], None, None, lineno=87, col_offset=21), [comprehension(Name('n', Store(), lineno=87, col_offset=35), Name('after', Load(), lineno=87, col_offset=40), [])], lineno=87, col_offset=21), lineno=87, col_offset=12)], [], lineno=86, col_offset=8), If(Compare(Attribute(Name('arg', Load(), lineno=88, col_offset=11), 'type', Load(), lineno=88, col_offset=11), [In()], [Tuple([Attribute(Name('syms', Load(), lineno=88, col_offset=24), 'comparison', Load(), lineno=88, col_offset=24), Attribute(Name('syms', Load(), lineno=88, col_offset=41), 'not_test', Load(), lineno=88, col_offset=41), Attribute(Name('syms', Load(), lineno=88, col_offset=56), 'and_test', Load(), lineno=88, col_offset=56), Attribute(Name('syms', Load(), lineno=89, col_offset=24), 'or_test', Load(), lineno=89, col_offset=24), Attribute(Name('syms', Load(), lineno=89, col_offset=38), 'test', Load(), lineno=89, col_offset=38), Attribute(Name('syms', Load(), lineno=89, col_offset=49), 'lambdef', Load(), lineno=89, col_offset=49), Attribute(Name('syms', Load(), lineno=89, col_offset=63), 'argument', Load(), lineno=89, col_offset=63)], Load(), lineno=88, col_offset=24)], lineno=88, col_offset=11), [Assign([Name('arg', Store(), lineno=90, col_offset=12)], Call(Name('parenthesize', Load(), lineno=90, col_offset=18), [Name('arg', Load(), lineno=90, col_offset=31)], [], None, None, lineno=90, col_offset=18), lineno=90, col_offset=12)], [], lineno=88, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=91, col_offset=11), [Name('before', Load(), lineno=91, col_offset=15)], [], None, None, lineno=91, col_offset=11), [Eq()], [Num(1, lineno=91, col_offset=26)], lineno=91, col_offset=11), [Assign([Name('before', Store(), lineno=92, col_offset=12)], Subscript(Name('before', Load(), lineno=92, col_offset=21), Index(Num(0, lineno=92, col_offset=28)), Load(), lineno=92, col_offset=21), lineno=92, col_offset=12)], [Assign([Name('before', Store(), lineno=94, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=94, col_offset=21), 'Node', Load(), lineno=94, col_offset=21), [Attribute(Name('syms', Load(), lineno=94, col_offset=33), 'power', Load(), lineno=94, col_offset=33), Name('before', Load(), lineno=94, col_offset=45)], [], None, None, lineno=94, col_offset=21), lineno=94, col_offset=12)], lineno=91, col_offset=8), Assign([Attribute(Name('before', Load(), lineno=95, col_offset=8), 'prefix', Store(), lineno=95, col_offset=8)], Str(u' ', lineno=95, col_offset=24), lineno=95, col_offset=8), Assign([Name('n_op', Store(), lineno=96, col_offset=8)], Call(Name('Name', Load(), lineno=96, col_offset=15), [Str(u'in', lineno=96, col_offset=20)], [keyword('prefix', Str(u' ', lineno=96, col_offset=34))], None, None, lineno=96, col_offset=15), lineno=96, col_offset=8), If(Name('negation', Load(), lineno=97, col_offset=11), [Assign([Name('n_not', Store(), lineno=98, col_offset=12)], Call(Name('Name', Load(), lineno=98, col_offset=20), [Str(u'not', lineno=98, col_offset=25)], [keyword('prefix', Str(u' ', lineno=98, col_offset=40))], None, None, lineno=98, col_offset=20), lineno=98, col_offset=12), Assign([Name('n_op', Store(), lineno=99, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=99, col_offset=19), 'Node', Load(), lineno=99, col_offset=19), [Attribute(Name('syms', Load(), lineno=99, col_offset=31), 'comp_op', Load(), lineno=99, col_offset=31), Tuple([Name('n_not', Load(), lineno=99, col_offset=46), Name('n_op', Load(), lineno=99, col_offset=53)], Load(), lineno=99, col_offset=46)], [], None, None, lineno=99, col_offset=19), lineno=99, col_offset=12)], [], lineno=97, col_offset=8), Assign([Name('new', Store(), lineno=100, col_offset=8)], Call(Attribute(Name('pytree', Load(), lineno=100, col_offset=14), 'Node', Load(), lineno=100, col_offset=14), [Attribute(Name('syms', Load(), lineno=100, col_offset=26), 'comparison', Load(), lineno=100, col_offset=26), Tuple([Name('arg', Load(), lineno=100, col_offset=44), Name('n_op', Load(), lineno=100, col_offset=49), Name('before', Load(), lineno=100, col_offset=55)], Load(), lineno=100, col_offset=44)], [], None, None, lineno=100, col_offset=14), lineno=100, col_offset=8), If(Name('after', Load(), lineno=101, col_offset=11), [Assign([Name('new', Store(), lineno=102, col_offset=12)], Call(Name('parenthesize', Load(), lineno=102, col_offset=18), [Name('new', Load(), lineno=102, col_offset=31)], [], None, None, lineno=102, col_offset=18), lineno=102, col_offset=12), Assign([Name('new', Store(), lineno=103, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=103, col_offset=18), 'Node', Load(), lineno=103, col_offset=18), [Attribute(Name('syms', Load(), lineno=103, col_offset=30), 'power', Load(), lineno=103, col_offset=30), BinOp(Tuple([Name('new', Load(), lineno=103, col_offset=43)], Load(), lineno=103, col_offset=43), Add(), Call(Name('tuple', Load(), lineno=103, col_offset=51), [Name('after', Load(), lineno=103, col_offset=57)], [], None, None, lineno=103, col_offset=51), lineno=103, col_offset=42)], [], None, None, lineno=103, col_offset=18), lineno=103, col_offset=12)], [], lineno=101, col_offset=8), If(Compare(Attribute(Attribute(Name('node', Load(), lineno=104, col_offset=11), 'parent', Load(), lineno=104, col_offset=11), 'type', Load(), lineno=104, col_offset=11), [In()], [Tuple([Attribute(Name('syms', Load(), lineno=104, col_offset=32), 'comparison', Load(), lineno=104, col_offset=32), Attribute(Name('syms', Load(), lineno=104, col_offset=49), 'expr', Load(), lineno=104, col_offset=49), Attribute(Name('syms', Load(), lineno=104, col_offset=60), 'xor_expr', Load(), lineno=104, col_offset=60), Attribute(Name('syms', Load(), lineno=105, col_offset=32), 'and_expr', Load(), lineno=105, col_offset=32), Attribute(Name('syms', Load(), lineno=105, col_offset=47), 'shift_expr', Load(), lineno=105, col_offset=47), Attribute(Name('syms', Load(), lineno=106, col_offset=32), 'arith_expr', Load(), lineno=106, col_offset=32), Attribute(Name('syms', Load(), lineno=106, col_offset=49), 'term', Load(), lineno=106, col_offset=49), Attribute(Name('syms', Load(), lineno=107, col_offset=32), 'factor', Load(), lineno=107, col_offset=32), Attribute(Name('syms', Load(), lineno=107, col_offset=45), 'power', Load(), lineno=107, col_offset=45)], Load(), lineno=104, col_offset=32)], lineno=104, col_offset=11), [Assign([Name('new', Store(), lineno=108, col_offset=12)], Call(Name('parenthesize', Load(), lineno=108, col_offset=18), [Name('new', Load(), lineno=108, col_offset=31)], [], None, None, lineno=108, col_offset=18), lineno=108, col_offset=12)], [], lineno=104, col_offset=8), Assign([Attribute(Name('new', Load(), lineno=109, col_offset=8), 'prefix', Store(), lineno=109, col_offset=8)], Name('prefix', Load(), lineno=109, col_offset=21), lineno=109, col_offset=8), Return(Name('new', Load(), lineno=110, col_offset=15), lineno=110, col_offset=8)], [], lineno=72, col_offset=4)], [], lineno=39, col_offset=0)])
