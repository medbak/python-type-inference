Module([Expr(Str('This module includes tests of the code object representation.\n\n>>> def f(x):\n...     def g(y):\n...         return x + y\n...     return g\n...\n\n>>> dump(f.func_code)\nname: f\nargcount: 1\nnames: ()\nvarnames: (\'x\', \'g\')\ncellvars: (\'x\',)\nfreevars: ()\nnlocals: 2\nflags: 3\nconsts: (\'None\', \'<code object g>\')\n\n>>> dump(f(4).func_code)\nname: g\nargcount: 1\nnames: ()\nvarnames: (\'y\',)\ncellvars: ()\nfreevars: (\'x\',)\nnlocals: 1\nflags: 19\nconsts: (\'None\',)\n\n>>> def h(x, y):\n...     a = x + y\n...     b = x - y\n...     c = a * b\n...     return c\n...\n>>> dump(h.func_code)\nname: h\nargcount: 2\nnames: ()\nvarnames: (\'x\', \'y\', \'a\', \'b\', \'c\')\ncellvars: ()\nfreevars: ()\nnlocals: 5\nflags: 67\nconsts: (\'None\',)\n\n>>> def attrs(obj):\n...     print obj.attr1\n...     print obj.attr2\n...     print obj.attr3\n\n>>> dump(attrs.func_code)\nname: attrs\nargcount: 1\nnames: (\'attr1\', \'attr2\', \'attr3\')\nvarnames: (\'obj\',)\ncellvars: ()\nfreevars: ()\nnlocals: 1\nflags: 67\nconsts: (\'None\',)\n\n>>> def optimize_away():\n...     \'doc string\'\n...     \'not a docstring\'\n...     53\n...     53L\n\n>>> dump(optimize_away.func_code)\nname: optimize_away\nargcount: 0\nnames: ()\nvarnames: ()\ncellvars: ()\nfreevars: ()\nnlocals: 0\nflags: 67\nconsts: ("\'doc string\'", \'None\')\n\n', lineno=81, col_offset=-1), lineno=81, col_offset=-1), Import([alias('unittest', None)], lineno=83, col_offset=0), Import([alias('weakref', None)], lineno=84, col_offset=0), Import([alias('_testcapi', None)], lineno=85, col_offset=0), FunctionDef('consts', arguments([Name('t', Param(), lineno=88, col_offset=11)], None, None, []), [Expr(Str('Yield a doctest-safe sequence of object reprs.', lineno=89, col_offset=4), lineno=89, col_offset=4), For(Name('elt', Store(), lineno=90, col_offset=8), Name('t', Load(), lineno=90, col_offset=15), [Assign([Name('r', Store(), lineno=91, col_offset=8)], Call(Name('repr', Load(), lineno=91, col_offset=12), [Name('elt', Load(), lineno=91, col_offset=17)], [], None, None, lineno=91, col_offset=12), lineno=91, col_offset=8), If(Call(Attribute(Name('r', Load(), lineno=92, col_offset=11), 'startswith', Load(), lineno=92, col_offset=11), [Str('<code object', lineno=92, col_offset=24)], [], None, None, lineno=92, col_offset=11), [Expr(Yield(BinOp(Str('<code object %s>', lineno=93, col_offset=18), Mod(), Attribute(Name('elt', Load(), lineno=93, col_offset=39), 'co_name', Load(), lineno=93, col_offset=39), lineno=93, col_offset=18), lineno=93, col_offset=12), lineno=93, col_offset=12)], [Expr(Yield(Name('r', Load(), lineno=95, col_offset=18), lineno=95, col_offset=12), lineno=95, col_offset=12)], lineno=92, col_offset=8)], [], lineno=90, col_offset=4)], [], lineno=88, col_offset=0), FunctionDef('dump', arguments([Name('co', Param(), lineno=97, col_offset=9)], None, None, []), [Expr(Str('Print out a text representation of a code object.', lineno=98, col_offset=4), lineno=98, col_offset=4), For(Name('attr', Store(), lineno=99, col_offset=8), List([Str('name', lineno=99, col_offset=17), Str('argcount', lineno=99, col_offset=25), Str('names', lineno=99, col_offset=37), Str('varnames', lineno=99, col_offset=46), Str('cellvars', lineno=99, col_offset=58), Str('freevars', lineno=100, col_offset=17), Str('nlocals', lineno=100, col_offset=29), Str('flags', lineno=100, col_offset=40)], Load(), lineno=99, col_offset=16), [Print(None, [BinOp(Str('%s: %s', lineno=101, col_offset=14), Mod(), Tuple([Name('attr', Load(), lineno=101, col_offset=26), Call(Name('getattr', Load(), lineno=101, col_offset=32), [Name('co', Load(), lineno=101, col_offset=40), BinOp(Str('co_', lineno=101, col_offset=44), Add(), Name('attr', Load(), lineno=101, col_offset=52), lineno=101, col_offset=44)], [], None, None, lineno=101, col_offset=32)], Load(), lineno=101, col_offset=26), lineno=101, col_offset=14)], True, lineno=101, col_offset=8)], [], lineno=99, col_offset=4), Print(None, [Str('consts:', lineno=102, col_offset=10), Call(Name('tuple', Load(), lineno=102, col_offset=21), [Call(Name('consts', Load(), lineno=102, col_offset=27), [Attribute(Name('co', Load(), lineno=102, col_offset=34), 'co_consts', Load(), lineno=102, col_offset=34)], [], None, None, lineno=102, col_offset=27)], [], None, None, lineno=102, col_offset=21)], True, lineno=102, col_offset=4)], [], lineno=97, col_offset=0), ClassDef('CodeTest', [Attribute(Name('unittest', Load(), lineno=105, col_offset=15), 'TestCase', Load(), lineno=105, col_offset=15)], [FunctionDef('test_newempty', arguments([Name('self', Param(), lineno=107, col_offset=22)], None, None, []), [Assign([Name('co', Store(), lineno=108, col_offset=8)], Call(Attribute(Name('_testcapi', Load(), lineno=108, col_offset=13), 'code_newempty', Load(), lineno=108, col_offset=13), [Str('filename', lineno=108, col_offset=37), Str('funcname', lineno=108, col_offset=49), Num(15, lineno=108, col_offset=61)], [], None, None, lineno=108, col_offset=13), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=8), 'assertEqual', Load(), lineno=109, col_offset=8), [Attribute(Name('co', Load(), lineno=109, col_offset=25), 'co_filename', Load(), lineno=109, col_offset=25), Str('filename', lineno=109, col_offset=41)], [], None, None, lineno=109, col_offset=8), lineno=109, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=8), 'assertEqual', Load(), lineno=110, col_offset=8), [Attribute(Name('co', Load(), lineno=110, col_offset=25), 'co_name', Load(), lineno=110, col_offset=25), Str('funcname', lineno=110, col_offset=37)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=111, col_offset=8), 'assertEqual', Load(), lineno=111, col_offset=8), [Attribute(Name('co', Load(), lineno=111, col_offset=25), 'co_firstlineno', Load(), lineno=111, col_offset=25), Num(15, lineno=111, col_offset=44)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8)], [], lineno=107, col_offset=4)], [], lineno=105, col_offset=0), ClassDef('CodeWeakRefTest', [Attribute(Name('unittest', Load(), lineno=114, col_offset=22), 'TestCase', Load(), lineno=114, col_offset=22)], [FunctionDef('test_basic', arguments([Name('self', Param(), lineno=116, col_offset=19)], None, None, []), [Assign([Name('namespace', Store(), lineno=119, col_offset=8)], Dict([], [], lineno=119, col_offset=20), lineno=119, col_offset=8), Exec(Str('def f(): pass', lineno=120, col_offset=13), Call(Name('globals', Load(), lineno=120, col_offset=32), [], [], None, None, lineno=120, col_offset=32), Name('namespace', Load(), lineno=120, col_offset=43), lineno=120, col_offset=8), Assign([Name('f', Store(), lineno=121, col_offset=8)], Subscript(Name('namespace', Load(), lineno=121, col_offset=12), Index(Str('f', lineno=121, col_offset=22)), Load(), lineno=121, col_offset=12), lineno=121, col_offset=8), Delete([Name('namespace', Del(), lineno=122, col_offset=12)], lineno=122, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=124, col_offset=8), 'called', Store(), lineno=124, col_offset=8)], Name('False', Load(), lineno=124, col_offset=22), lineno=124, col_offset=8), FunctionDef('callback', arguments([Name('code', Param(), lineno=125, col_offset=21)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=126, col_offset=12), 'called', Store(), lineno=126, col_offset=12)], Name('True', Load(), lineno=126, col_offset=26), lineno=126, col_offset=12)], [], lineno=125, col_offset=8), Assign([Name('coderef', Store(), lineno=132, col_offset=8)], Call(Attribute(Name('weakref', Load(), lineno=132, col_offset=18), 'ref', Load(), lineno=132, col_offset=18), [Attribute(Name('f', Load(), lineno=132, col_offset=30), '__code__', Load(), lineno=132, col_offset=30), Name('callback', Load(), lineno=132, col_offset=42)], [], None, None, lineno=132, col_offset=18), lineno=132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'assertTrue', Load(), lineno=133, col_offset=8), [Call(Name('bool', Load(), lineno=133, col_offset=24), [Call(Name('coderef', Load(), lineno=133, col_offset=29), [], [], None, None, lineno=133, col_offset=29)], [], None, None, lineno=133, col_offset=24)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Delete([Name('f', Del(), lineno=134, col_offset=12)], lineno=134, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=8), 'assertFalse', Load(), lineno=135, col_offset=8), [Call(Name('bool', Load(), lineno=135, col_offset=25), [Call(Name('coderef', Load(), lineno=135, col_offset=30), [], [], None, None, lineno=135, col_offset=30)], [], None, None, lineno=135, col_offset=25)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertTrue', Load(), lineno=136, col_offset=8), [Attribute(Name('self', Load(), lineno=136, col_offset=24), 'called', Load(), lineno=136, col_offset=24)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8)], [], lineno=116, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('test_main', arguments([Name('verbose', Param(), lineno=139, col_offset=14)], None, None, [Name('None', Load(), lineno=139, col_offset=22)]), [ImportFrom('test.test_support', [alias('run_doctest', None), alias('run_unittest', None)], 0, lineno=140, col_offset=4), ImportFrom('test', [alias('test_code', None)], 0, lineno=141, col_offset=4), Expr(Call(Name('run_doctest', Load(), lineno=142, col_offset=4), [Name('test_code', Load(), lineno=142, col_offset=16), Name('verbose', Load(), lineno=142, col_offset=27)], [], None, None, lineno=142, col_offset=4), lineno=142, col_offset=4), Expr(Call(Name('run_unittest', Load(), lineno=143, col_offset=4), [Name('CodeTest', Load(), lineno=143, col_offset=17), Name('CodeWeakRefTest', Load(), lineno=143, col_offset=27)], [], None, None, lineno=143, col_offset=4), lineno=143, col_offset=4)], [], lineno=139, col_offset=0), If(Compare(Name('__name__', Load(), lineno=146, col_offset=3), [Eq()], [Str('__main__', lineno=146, col_offset=15)], lineno=146, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=147, col_offset=4), [], [], None, None, lineno=147, col_offset=4), lineno=147, col_offset=4)], [], lineno=146, col_offset=0)])
