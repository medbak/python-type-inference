Module([Import([alias('unittest', None)], lineno=2, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=3, col_offset=0), Import([alias('__future__', None)], lineno=4, col_offset=0), Assign([Name('GOOD_SERIALS', Store(), lineno=6, col_offset=0)], Tuple([Str('alpha', lineno=6, col_offset=16), Str('beta', lineno=6, col_offset=25), Str('candidate', lineno=6, col_offset=33), Str('final', lineno=6, col_offset=46)], Load(), lineno=6, col_offset=16), lineno=6, col_offset=0), Assign([Name('features', Store(), lineno=8, col_offset=0)], Attribute(Name('__future__', Load(), lineno=8, col_offset=11), 'all_feature_names', Load(), lineno=8, col_offset=11), lineno=8, col_offset=0), ClassDef('FutureTest', [Attribute(Name('unittest', Load(), lineno=10, col_offset=17), 'TestCase', Load(), lineno=10, col_offset=17)], [FunctionDef('test_names', arguments([Name('self', Param(), lineno=12, col_offset=19)], None, None, []), [Assign([Name('given_feature_names', Store(), lineno=14, col_offset=8)], Subscript(Name('features', Load(), lineno=14, col_offset=30), Slice(None, None, None), Load(), lineno=14, col_offset=30), lineno=14, col_offset=8), For(Name('name', Store(), lineno=15, col_offset=12), Call(Name('dir', Load(), lineno=15, col_offset=20), [Name('__future__', Load(), lineno=15, col_offset=24)], [], None, None, lineno=15, col_offset=20), [Assign([Name('obj', Store(), lineno=16, col_offset=12)], Call(Name('getattr', Load(), lineno=16, col_offset=18), [Name('__future__', Load(), lineno=16, col_offset=26), Name('name', Load(), lineno=16, col_offset=38), Name('None', Load(), lineno=16, col_offset=44)], [], None, None, lineno=16, col_offset=18), lineno=16, col_offset=12), If(BoolOp(And(), [Compare(Name('obj', Load(), lineno=17, col_offset=15), [IsNot()], [Name('None', Load(), lineno=17, col_offset=26)], lineno=17, col_offset=15), Call(Name('isinstance', Load(), lineno=17, col_offset=35), [Name('obj', Load(), lineno=17, col_offset=46), Attribute(Name('__future__', Load(), lineno=17, col_offset=51), '_Feature', Load(), lineno=17, col_offset=51)], [], None, None, lineno=17, col_offset=35)], lineno=17, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=18, col_offset=16), 'assertTrue', Load(), lineno=18, col_offset=16), [Compare(Name('name', Load(), lineno=19, col_offset=20), [In()], [Name('given_feature_names', Load(), lineno=19, col_offset=28)], lineno=19, col_offset=20), BinOp(Str('%r should have been in all_feature_names', lineno=20, col_offset=20), Mod(), Name('name', Load(), lineno=20, col_offset=65), lineno=20, col_offset=20)], [], None, None, lineno=18, col_offset=16), lineno=18, col_offset=16), Expr(Call(Attribute(Name('given_feature_names', Load(), lineno=22, col_offset=16), 'remove', Load(), lineno=22, col_offset=16), [Name('name', Load(), lineno=22, col_offset=43)], [], None, None, lineno=22, col_offset=16), lineno=22, col_offset=16)], [], lineno=17, col_offset=12)], [], lineno=15, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=23, col_offset=8), 'assertEqual', Load(), lineno=23, col_offset=8), [Call(Name('len', Load(), lineno=23, col_offset=25), [Name('given_feature_names', Load(), lineno=23, col_offset=29)], [], None, None, lineno=23, col_offset=25), Num(0, lineno=23, col_offset=51), BinOp(Str('all_feature_names has too much: %r', lineno=24, col_offset=15), Mod(), Name('given_feature_names', Load(), lineno=24, col_offset=54), lineno=24, col_offset=15)], [], None, None, lineno=23, col_offset=8), lineno=23, col_offset=8)], [], lineno=12, col_offset=4), FunctionDef('test_attributes', arguments([Name('self', Param(), lineno=26, col_offset=24)], None, None, []), [For(Name('feature', Store(), lineno=27, col_offset=12), Name('features', Load(), lineno=27, col_offset=23), [Assign([Name('value', Store(), lineno=28, col_offset=12)], Call(Name('getattr', Load(), lineno=28, col_offset=20), [Name('__future__', Load(), lineno=28, col_offset=28), Name('feature', Load(), lineno=28, col_offset=40)], [], None, None, lineno=28, col_offset=20), lineno=28, col_offset=12), Assign([Name('optional', Store(), lineno=30, col_offset=12)], Call(Attribute(Name('value', Load(), lineno=30, col_offset=23), 'getOptionalRelease', Load(), lineno=30, col_offset=23), [], [], None, None, lineno=30, col_offset=23), lineno=30, col_offset=12), Assign([Name('mandatory', Store(), lineno=31, col_offset=12)], Call(Attribute(Name('value', Load(), lineno=31, col_offset=24), 'getMandatoryRelease', Load(), lineno=31, col_offset=24), [], [], None, None, lineno=31, col_offset=24), lineno=31, col_offset=12), Assign([Name('a', Store(), lineno=33, col_offset=12)], Attribute(Name('self', Load(), lineno=33, col_offset=16), 'assertTrue', Load(), lineno=33, col_offset=16), lineno=33, col_offset=12), Assign([Name('e', Store(), lineno=34, col_offset=12)], Attribute(Name('self', Load(), lineno=34, col_offset=16), 'assertEqual', Load(), lineno=34, col_offset=16), lineno=34, col_offset=12), FunctionDef('check', arguments([Name('t', Param(), lineno=35, col_offset=22), Name('name', Param(), lineno=35, col_offset=25)], None, None, []), [Expr(Call(Name('a', Load(), lineno=36, col_offset=16), [Call(Name('isinstance', Load(), lineno=36, col_offset=18), [Name('t', Load(), lineno=36, col_offset=29), Name('tuple', Load(), lineno=36, col_offset=32)], [], None, None, lineno=36, col_offset=18), BinOp(Str("%s isn't tuple", lineno=36, col_offset=40), Mod(), Name('name', Load(), lineno=36, col_offset=59), lineno=36, col_offset=40)], [], None, None, lineno=36, col_offset=16), lineno=36, col_offset=16), Expr(Call(Name('e', Load(), lineno=37, col_offset=16), [Call(Name('len', Load(), lineno=37, col_offset=18), [Name('t', Load(), lineno=37, col_offset=22)], [], None, None, lineno=37, col_offset=18), Num(5, lineno=37, col_offset=26), BinOp(Str("%s isn't 5-tuple", lineno=37, col_offset=29), Mod(), Name('name', Load(), lineno=37, col_offset=50), lineno=37, col_offset=29)], [], None, None, lineno=37, col_offset=16), lineno=37, col_offset=16), Assign([Tuple([Name('major', Store(), lineno=38, col_offset=17), Name('minor', Store(), lineno=38, col_offset=24), Name('micro', Store(), lineno=38, col_offset=31), Name('level', Store(), lineno=38, col_offset=38), Name('serial', Store(), lineno=38, col_offset=45)], Store(), lineno=38, col_offset=17)], Name('t', Load(), lineno=38, col_offset=55), lineno=38, col_offset=16), Expr(Call(Name('a', Load(), lineno=39, col_offset=16), [Call(Name('isinstance', Load(), lineno=39, col_offset=18), [Name('major', Load(), lineno=39, col_offset=29), Name('int', Load(), lineno=39, col_offset=36)], [], None, None, lineno=39, col_offset=18), BinOp(Str("%s major isn't int", lineno=39, col_offset=42), Mod(), Name('name', Load(), lineno=39, col_offset=66), lineno=39, col_offset=42)], [], None, None, lineno=39, col_offset=16), lineno=39, col_offset=16), Expr(Call(Name('a', Load(), lineno=40, col_offset=16), [Call(Name('isinstance', Load(), lineno=40, col_offset=18), [Name('minor', Load(), lineno=40, col_offset=29), Name('int', Load(), lineno=40, col_offset=36)], [], None, None, lineno=40, col_offset=18), BinOp(Str("%s minor isn't int", lineno=40, col_offset=42), Mod(), Name('name', Load(), lineno=40, col_offset=65), lineno=40, col_offset=42)], [], None, None, lineno=40, col_offset=16), lineno=40, col_offset=16), Expr(Call(Name('a', Load(), lineno=41, col_offset=16), [Call(Name('isinstance', Load(), lineno=41, col_offset=18), [Name('micro', Load(), lineno=41, col_offset=29), Name('int', Load(), lineno=41, col_offset=36)], [], None, None, lineno=41, col_offset=18), BinOp(Str("%s micro isn't int", lineno=41, col_offset=42), Mod(), Name('name', Load(), lineno=41, col_offset=65), lineno=41, col_offset=42)], [], None, None, lineno=41, col_offset=16), lineno=41, col_offset=16), Expr(Call(Name('a', Load(), lineno=42, col_offset=16), [Call(Name('isinstance', Load(), lineno=42, col_offset=18), [Name('level', Load(), lineno=42, col_offset=29), Name('basestring', Load(), lineno=42, col_offset=36)], [], None, None, lineno=42, col_offset=18), BinOp(Str("%s level isn't string", lineno=43, col_offset=20), Mod(), Name('name', Load(), lineno=43, col_offset=46), lineno=43, col_offset=20)], [], None, None, lineno=42, col_offset=16), lineno=42, col_offset=16), Expr(Call(Name('a', Load(), lineno=44, col_offset=16), [Compare(Name('level', Load(), lineno=44, col_offset=18), [In()], [Name('GOOD_SERIALS', Load(), lineno=44, col_offset=27)], lineno=44, col_offset=18), BinOp(Str('%s level string has unknown value', lineno=45, col_offset=23), Mod(), Name('name', Load(), lineno=45, col_offset=61), lineno=45, col_offset=23)], [], None, None, lineno=44, col_offset=16), lineno=44, col_offset=16), Expr(Call(Name('a', Load(), lineno=46, col_offset=16), [Call(Name('isinstance', Load(), lineno=46, col_offset=18), [Name('serial', Load(), lineno=46, col_offset=29), Name('int', Load(), lineno=46, col_offset=37)], [], None, None, lineno=46, col_offset=18), BinOp(Str("%s serial isn't int", lineno=46, col_offset=43), Mod(), Name('name', Load(), lineno=46, col_offset=67), lineno=46, col_offset=43)], [], None, None, lineno=46, col_offset=16), lineno=46, col_offset=16)], [], lineno=35, col_offset=12), Expr(Call(Name('check', Load(), lineno=48, col_offset=12), [Name('optional', Load(), lineno=48, col_offset=18), Str('optional', lineno=48, col_offset=28)], [], None, None, lineno=48, col_offset=12), lineno=48, col_offset=12), If(Compare(Name('mandatory', Load(), lineno=49, col_offset=15), [IsNot()], [Name('None', Load(), lineno=49, col_offset=32)], lineno=49, col_offset=15), [Expr(Call(Name('check', Load(), lineno=50, col_offset=16), [Name('mandatory', Load(), lineno=50, col_offset=22), Str('mandatory', lineno=50, col_offset=33)], [], None, None, lineno=50, col_offset=16), lineno=50, col_offset=16), Expr(Call(Name('a', Load(), lineno=51, col_offset=16), [Compare(Name('optional', Load(), lineno=51, col_offset=18), [Lt()], [Name('mandatory', Load(), lineno=51, col_offset=29)], lineno=51, col_offset=18), Str('optional not less than mandatory, and mandatory not None', lineno=52, col_offset=23)], [], None, None, lineno=51, col_offset=16), lineno=51, col_offset=16)], [], lineno=49, col_offset=12), Expr(Call(Name('a', Load(), lineno=54, col_offset=12), [Call(Name('hasattr', Load(), lineno=54, col_offset=14), [Name('value', Load(), lineno=54, col_offset=22), Str('compiler_flag', lineno=54, col_offset=29)], [], None, None, lineno=54, col_offset=14), Str('feature is missing a .compiler_flag attr', lineno=55, col_offset=19)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=12), Expr(Call(Name('compile', Load(), lineno=57, col_offset=12), [Str('', lineno=57, col_offset=20), Str('<test>', lineno=57, col_offset=24), Str('exec', lineno=57, col_offset=34), Attribute(Name('value', Load(), lineno=57, col_offset=42), 'compiler_flag', Load(), lineno=57, col_offset=42)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=12), Expr(Call(Name('a', Load(), lineno=58, col_offset=12), [Call(Name('isinstance', Load(), lineno=58, col_offset=14), [Call(Name('getattr', Load(), lineno=58, col_offset=25), [Name('value', Load(), lineno=58, col_offset=33), Str('compiler_flag', lineno=58, col_offset=40)], [], None, None, lineno=58, col_offset=25), Name('int', Load(), lineno=58, col_offset=58)], [], None, None, lineno=58, col_offset=14), Str(".compiler_flag isn't int", lineno=59, col_offset=19)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], [], lineno=27, col_offset=8)], [], lineno=26, col_offset=4)], [], lineno=10, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=63, col_offset=4), 'run_unittest', Load(), lineno=63, col_offset=4), [Name('FutureTest', Load(), lineno=63, col_offset=30)], [], None, None, lineno=63, col_offset=4), lineno=63, col_offset=4)], [], lineno=62, col_offset=0), If(Compare(Name('__name__', Load(), lineno=65, col_offset=3), [Eq()], [Str('__main__', lineno=65, col_offset=15)], lineno=65, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=66, col_offset=4), [], [], None, None, lineno=66, col_offset=4), lineno=66, col_offset=4)], [], lineno=65, col_offset=0)])
