Module([Expr(Str('Miscellaneous utilities.', lineno=5, col_offset=0), lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('collapse_rfc2231_value', lineno=8, col_offset=4), Str('decode_params', lineno=9, col_offset=4), Str('decode_rfc2231', lineno=10, col_offset=4), Str('encode_rfc2231', lineno=11, col_offset=4), Str('formataddr', lineno=12, col_offset=4), Str('formatdate', lineno=13, col_offset=4), Str('getaddresses', lineno=14, col_offset=4), Str('make_msgid', lineno=15, col_offset=4), Str('mktime_tz', lineno=16, col_offset=4), Str('parseaddr', lineno=17, col_offset=4), Str('parsedate', lineno=18, col_offset=4), Str('parsedate_tz', lineno=19, col_offset=4), Str('unquote', lineno=20, col_offset=4)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), Import([alias('os', None)], lineno=23, col_offset=0), Import([alias('re', None)], lineno=24, col_offset=0), Import([alias('time', None)], lineno=25, col_offset=0), Import([alias('base64', None)], lineno=26, col_offset=0), Import([alias('random', None)], lineno=27, col_offset=0), Import([alias('socket', None)], lineno=28, col_offset=0), Import([alias('urllib', None)], lineno=29, col_offset=0), Import([alias('warnings', None)], lineno=30, col_offset=0), ImportFrom('email._parseaddr', [alias('quote', None)], 0, lineno=32, col_offset=0), ImportFrom('email._parseaddr', [alias('AddressList', '_AddressList')], 0, lineno=33, col_offset=0), ImportFrom('email._parseaddr', [alias('mktime_tz', None)], 0, lineno=34, col_offset=0), ImportFrom('email._parseaddr', [alias('parsedate', '_parsedate')], 0, lineno=37, col_offset=0), ImportFrom('email._parseaddr', [alias('parsedate_tz', '_parsedate_tz')], 0, lineno=38, col_offset=0), ImportFrom('quopri', [alias('decodestring', '_qdecode')], 0, lineno=40, col_offset=0), ImportFrom('email.encoders', [alias('_bencode', None), alias('_qencode', None)], 0, lineno=43, col_offset=0), Assign([Name('COMMASPACE', Store(), lineno=45, col_offset=0)], Str(', ', lineno=45, col_offset=13), lineno=45, col_offset=0), Assign([Name('EMPTYSTRING', Store(), lineno=46, col_offset=0)], Str('', lineno=46, col_offset=14), lineno=46, col_offset=0), Assign([Name('UEMPTYSTRING', Store(), lineno=47, col_offset=0)], Str(u'', lineno=47, col_offset=15), lineno=47, col_offset=0), Assign([Name('CRLF', Store(), lineno=48, col_offset=0)], Str('\r\n', lineno=48, col_offset=7), lineno=48, col_offset=0), Assign([Name('TICK', Store(), lineno=49, col_offset=0)], Str("'", lineno=49, col_offset=7), lineno=49, col_offset=0), Assign([Name('specialsre', Store(), lineno=51, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=51, col_offset=13), 'compile', Load(), lineno=51, col_offset=13), [Str('[][\\\\()<>@,:;".]', lineno=51, col_offset=24)], [], None, None, lineno=51, col_offset=13), lineno=51, col_offset=0), Assign([Name('escapesre', Store(), lineno=52, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=52, col_offset=12), 'compile', Load(), lineno=52, col_offset=12), [Str('[][\\\\()"]', lineno=52, col_offset=23)], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=0), FunctionDef('_identity', arguments([Name('s', Param(), lineno=58, col_offset=14)], None, None, []), [Return(Name('s', Load(), lineno=59, col_offset=11), lineno=59, col_offset=4)], [], lineno=58, col_offset=0), FunctionDef('_bdecode', arguments([Name('s', Param(), lineno=62, col_offset=13)], None, None, []), [Expr(Str("Decodes a base64 string.\n\n    This function is equivalent to base64.decodestring and it's retained only\n    for backward compatibility. It used to remove the last \n of the decoded\n    string, if it had any (see issue 7143).\n    ", lineno=68, col_offset=-1), lineno=68, col_offset=-1), If(UnaryOp(Not(), Name('s', Load(), lineno=69, col_offset=11), lineno=69, col_offset=7), [Return(Name('s', Load(), lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=69, col_offset=4), Return(Call(Attribute(Name('base64', Load(), lineno=71, col_offset=11), 'decodestring', Load(), lineno=71, col_offset=11), [Name('s', Load(), lineno=71, col_offset=31)], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=62, col_offset=0), FunctionDef('fix_eols', arguments([Name('s', Param(), lineno=75, col_offset=13)], None, None, []), [Expr(Str('Replace all line-ending characters with \r\n.', lineno=76, col_offset=4), lineno=76, col_offset=4), Assign([Name('s', Store(), lineno=78, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=78, col_offset=8), 'sub', Load(), lineno=78, col_offset=8), [Str('(?<!\\r)\\n', lineno=78, col_offset=15), Name('CRLF', Load(), lineno=78, col_offset=29), Name('s', Load(), lineno=78, col_offset=35)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=4), Assign([Name('s', Store(), lineno=80, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=80, col_offset=8), 'sub', Load(), lineno=80, col_offset=8), [Str('\\r(?!\\n)', lineno=80, col_offset=15), Name('CRLF', Load(), lineno=80, col_offset=28), Name('s', Load(), lineno=80, col_offset=34)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=4), Return(Name('s', Load(), lineno=81, col_offset=11), lineno=81, col_offset=4)], [], lineno=75, col_offset=0), FunctionDef('formataddr', arguments([Name('pair', Param(), lineno=85, col_offset=15)], None, None, []), [Expr(Str('The inverse of parseaddr(), this takes a 2-tuple of the form\n    (realname, email_address) and returns the string value suitable\n    for an RFC 2822 From, To or Cc header.\n\n    If the first element of pair is false, then the second element is\n    returned unmodified.\n    ', lineno=92, col_offset=-1), lineno=92, col_offset=-1), Assign([Tuple([Name('name', Store(), lineno=93, col_offset=4), Name('address', Store(), lineno=93, col_offset=10)], Store(), lineno=93, col_offset=4)], Name('pair', Load(), lineno=93, col_offset=20), lineno=93, col_offset=4), If(Name('name', Load(), lineno=94, col_offset=7), [Assign([Name('quotes', Store(), lineno=95, col_offset=8)], Str('', lineno=95, col_offset=17), lineno=95, col_offset=8), If(Call(Attribute(Name('specialsre', Load(), lineno=96, col_offset=11), 'search', Load(), lineno=96, col_offset=11), [Name('name', Load(), lineno=96, col_offset=29)], [], None, None, lineno=96, col_offset=11), [Assign([Name('quotes', Store(), lineno=97, col_offset=12)], Str('"', lineno=97, col_offset=21), lineno=97, col_offset=12)], [], lineno=96, col_offset=8), Assign([Name('name', Store(), lineno=98, col_offset=8)], Call(Attribute(Name('escapesre', Load(), lineno=98, col_offset=15), 'sub', Load(), lineno=98, col_offset=15), [Str('\\\\\\g<0>', lineno=98, col_offset=29), Name('name', Load(), lineno=98, col_offset=41)], [], None, None, lineno=98, col_offset=15), lineno=98, col_offset=8), Return(BinOp(Str('%s%s%s <%s>', lineno=99, col_offset=15), Mod(), Tuple([Name('quotes', Load(), lineno=99, col_offset=32), Name('name', Load(), lineno=99, col_offset=40), Name('quotes', Load(), lineno=99, col_offset=46), Name('address', Load(), lineno=99, col_offset=54)], Load(), lineno=99, col_offset=32), lineno=99, col_offset=15), lineno=99, col_offset=8)], [], lineno=94, col_offset=4), Return(Name('address', Load(), lineno=100, col_offset=11), lineno=100, col_offset=4)], [], lineno=85, col_offset=0), FunctionDef('getaddresses', arguments([Name('fieldvalues', Param(), lineno=104, col_offset=17)], None, None, []), [Expr(Str('Return a list of (REALNAME, EMAIL) for each fieldvalue.', lineno=105, col_offset=4), lineno=105, col_offset=4), Assign([Name('all', Store(), lineno=106, col_offset=4)], Call(Attribute(Name('COMMASPACE', Load(), lineno=106, col_offset=10), 'join', Load(), lineno=106, col_offset=10), [Name('fieldvalues', Load(), lineno=106, col_offset=26)], [], None, None, lineno=106, col_offset=10), lineno=106, col_offset=4), Assign([Name('a', Store(), lineno=107, col_offset=4)], Call(Name('_AddressList', Load(), lineno=107, col_offset=8), [Name('all', Load(), lineno=107, col_offset=21)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=4), Return(Attribute(Name('a', Load(), lineno=108, col_offset=11), 'addresslist', Load(), lineno=108, col_offset=11), lineno=108, col_offset=4)], [], lineno=104, col_offset=0), Assign([Name('ecre', Store(), lineno=112, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=112, col_offset=7), 'compile', Load(), lineno=112, col_offset=7), [Str('\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<atom>.*?)         # non-greedy up to the next ?= is the atom\n  \\?=                   # literal ?=\n  ', lineno=120, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=120, col_offset=7), 'VERBOSE', Load(), lineno=120, col_offset=7), BitOr(), Attribute(Name('re', Load(), lineno=120, col_offset=20), 'IGNORECASE', Load(), lineno=120, col_offset=20), lineno=120, col_offset=7)], [], None, None, lineno=112, col_offset=7), lineno=112, col_offset=0), FunctionDef('formatdate', arguments([Name('timeval', Param(), lineno=124, col_offset=15), Name('localtime', Param(), lineno=124, col_offset=29), Name('usegmt', Param(), lineno=124, col_offset=46)], None, None, [Name('None', Load(), lineno=124, col_offset=23), Name('False', Load(), lineno=124, col_offset=39), Name('False', Load(), lineno=124, col_offset=53)]), [Expr(Str('Returns a date string as specified by RFC 2822, e.g.:\n\n    Fri, 09 Nov 2001 01:08:47 -0000\n\n    Optional timeval if given is a floating point time value as accepted by\n    gmtime() and localtime(), otherwise the current time is used.\n\n    Optional localtime is a flag that when True, interprets timeval, and\n    returns a date relative to the local timezone instead of UTC, properly\n    taking daylight savings time into account.\n\n    Optional argument usegmt means that the timezone is written out as\n    an ascii string, not numeric one (so "GMT" instead of "+0000"). This\n    is needed for HTTP, and is only used when localtime==False.\n    ', lineno=139, col_offset=-1), lineno=139, col_offset=-1), If(Compare(Name('timeval', Load(), lineno=142, col_offset=7), [Is()], [Name('None', Load(), lineno=142, col_offset=18)], lineno=142, col_offset=7), [Assign([Name('timeval', Store(), lineno=143, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=143, col_offset=18), 'time', Load(), lineno=143, col_offset=18), [], [], None, None, lineno=143, col_offset=18), lineno=143, col_offset=8)], [], lineno=142, col_offset=4), If(Name('localtime', Load(), lineno=144, col_offset=7), [Assign([Name('now', Store(), lineno=145, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=145, col_offset=14), 'localtime', Load(), lineno=145, col_offset=14), [Name('timeval', Load(), lineno=145, col_offset=29)], [], None, None, lineno=145, col_offset=14), lineno=145, col_offset=8), If(BoolOp(And(), [Attribute(Name('time', Load(), lineno=148, col_offset=11), 'daylight', Load(), lineno=148, col_offset=11), Subscript(Name('now', Load(), lineno=148, col_offset=29), Index(Num(-1, lineno=148, col_offset=34)), Load(), lineno=148, col_offset=29)], lineno=148, col_offset=11), [Assign([Name('offset', Store(), lineno=149, col_offset=12)], Attribute(Name('time', Load(), lineno=149, col_offset=21), 'altzone', Load(), lineno=149, col_offset=21), lineno=149, col_offset=12)], [Assign([Name('offset', Store(), lineno=151, col_offset=12)], Attribute(Name('time', Load(), lineno=151, col_offset=21), 'timezone', Load(), lineno=151, col_offset=21), lineno=151, col_offset=12)], lineno=148, col_offset=8), Assign([Tuple([Name('hours', Store(), lineno=152, col_offset=8), Name('minutes', Store(), lineno=152, col_offset=15)], Store(), lineno=152, col_offset=8)], Call(Name('divmod', Load(), lineno=152, col_offset=25), [Call(Name('abs', Load(), lineno=152, col_offset=32), [Name('offset', Load(), lineno=152, col_offset=36)], [], None, None, lineno=152, col_offset=32), Num(3600, lineno=152, col_offset=45)], [], None, None, lineno=152, col_offset=25), lineno=152, col_offset=8), If(Compare(Name('offset', Load(), lineno=155, col_offset=11), [Gt()], [Num(0, lineno=155, col_offset=20)], lineno=155, col_offset=11), [Assign([Name('sign', Store(), lineno=156, col_offset=12)], Str('-', lineno=156, col_offset=19), lineno=156, col_offset=12)], [Assign([Name('sign', Store(), lineno=158, col_offset=12)], Str('+', lineno=158, col_offset=19), lineno=158, col_offset=12)], lineno=155, col_offset=8), Assign([Name('zone', Store(), lineno=159, col_offset=8)], BinOp(Str('%s%02d%02d', lineno=159, col_offset=15), Mod(), Tuple([Name('sign', Load(), lineno=159, col_offset=31), Name('hours', Load(), lineno=159, col_offset=37), BinOp(Name('minutes', Load(), lineno=159, col_offset=44), FloorDiv(), Num(60, lineno=159, col_offset=55), lineno=159, col_offset=44)], Load(), lineno=159, col_offset=31), lineno=159, col_offset=15), lineno=159, col_offset=8)], [Assign([Name('now', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=161, col_offset=14), 'gmtime', Load(), lineno=161, col_offset=14), [Name('timeval', Load(), lineno=161, col_offset=26)], [], None, None, lineno=161, col_offset=14), lineno=161, col_offset=8), If(Name('usegmt', Load(), lineno=163, col_offset=11), [Assign([Name('zone', Store(), lineno=164, col_offset=12)], Str('GMT', lineno=164, col_offset=19), lineno=164, col_offset=12)], [Assign([Name('zone', Store(), lineno=166, col_offset=12)], Str('-0000', lineno=166, col_offset=19), lineno=166, col_offset=12)], lineno=163, col_offset=8)], lineno=144, col_offset=4), Return(BinOp(Str('%s, %02d %s %04d %02d:%02d:%02d %s', lineno=167, col_offset=11), Mod(), Tuple([Subscript(List([Str('Mon', lineno=168, col_offset=9), Str('Tue', lineno=168, col_offset=16), Str('Wed', lineno=168, col_offset=23), Str('Thu', lineno=168, col_offset=30), Str('Fri', lineno=168, col_offset=37), Str('Sat', lineno=168, col_offset=44), Str('Sun', lineno=168, col_offset=51)], Load(), lineno=168, col_offset=8), Index(Subscript(Name('now', Load(), lineno=168, col_offset=58), Index(Num(6, lineno=168, col_offset=62)), Load(), lineno=168, col_offset=58)), Load(), lineno=168, col_offset=8), Subscript(Name('now', Load(), lineno=169, col_offset=8), Index(Num(2, lineno=169, col_offset=12)), Load(), lineno=169, col_offset=8), Subscript(List([Str('Jan', lineno=170, col_offset=9), Str('Feb', lineno=170, col_offset=16), Str('Mar', lineno=170, col_offset=23), Str('Apr', lineno=170, col_offset=30), Str('May', lineno=170, col_offset=37), Str('Jun', lineno=170, col_offset=44), Str('Jul', lineno=171, col_offset=9), Str('Aug', lineno=171, col_offset=16), Str('Sep', lineno=171, col_offset=23), Str('Oct', lineno=171, col_offset=30), Str('Nov', lineno=171, col_offset=37), Str('Dec', lineno=171, col_offset=44)], Load(), lineno=170, col_offset=8), Index(BinOp(Subscript(Name('now', Load(), lineno=171, col_offset=51), Index(Num(1, lineno=171, col_offset=55)), Load(), lineno=171, col_offset=51), Sub(), Num(1, lineno=171, col_offset=60), lineno=171, col_offset=51)), Load(), lineno=170, col_offset=8), Subscript(Name('now', Load(), lineno=172, col_offset=8), Index(Num(0, lineno=172, col_offset=12)), Load(), lineno=172, col_offset=8), Subscript(Name('now', Load(), lineno=172, col_offset=16), Index(Num(3, lineno=172, col_offset=20)), Load(), lineno=172, col_offset=16), Subscript(Name('now', Load(), lineno=172, col_offset=24), Index(Num(4, lineno=172, col_offset=28)), Load(), lineno=172, col_offset=24), Subscript(Name('now', Load(), lineno=172, col_offset=32), Index(Num(5, lineno=172, col_offset=36)), Load(), lineno=172, col_offset=32), Name('zone', Load(), lineno=173, col_offset=8)], Load(), lineno=168, col_offset=8), lineno=167, col_offset=11), lineno=167, col_offset=4)], [], lineno=124, col_offset=0), FunctionDef('make_msgid', arguments([Name('idstring', Param(), lineno=177, col_offset=15)], None, None, [Name('None', Load(), lineno=177, col_offset=24)]), [Expr(Str('Returns a string suitable for RFC 2822 compliant Message-ID, e.g:\n\n    <20020201195627.33539.96671@nightshade.la.mastaler.com>\n\n    Optional idstring if given is a string used to strengthen the\n    uniqueness of the message id.\n    ', lineno=184, col_offset=-1), lineno=184, col_offset=-1), Assign([Name('timeval', Store(), lineno=185, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=185, col_offset=14), 'time', Load(), lineno=185, col_offset=14), [], [], None, None, lineno=185, col_offset=14), lineno=185, col_offset=4), Assign([Name('utcdate', Store(), lineno=186, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=186, col_offset=14), 'strftime', Load(), lineno=186, col_offset=14), [Str('%Y%m%d%H%M%S', lineno=186, col_offset=28), Call(Attribute(Name('time', Load(), lineno=186, col_offset=44), 'gmtime', Load(), lineno=186, col_offset=44), [Name('timeval', Load(), lineno=186, col_offset=56)], [], None, None, lineno=186, col_offset=44)], [], None, None, lineno=186, col_offset=14), lineno=186, col_offset=4), Assign([Name('pid', Store(), lineno=187, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=187, col_offset=10), 'getpid', Load(), lineno=187, col_offset=10), [], [], None, None, lineno=187, col_offset=10), lineno=187, col_offset=4), Assign([Name('randint', Store(), lineno=188, col_offset=4)], Call(Attribute(Name('random', Load(), lineno=188, col_offset=14), 'randrange', Load(), lineno=188, col_offset=14), [Num(100000, lineno=188, col_offset=31)], [], None, None, lineno=188, col_offset=14), lineno=188, col_offset=4), If(Compare(Name('idstring', Load(), lineno=189, col_offset=7), [Is()], [Name('None', Load(), lineno=189, col_offset=19)], lineno=189, col_offset=7), [Assign([Name('idstring', Store(), lineno=190, col_offset=8)], Str('', lineno=190, col_offset=19), lineno=190, col_offset=8)], [Assign([Name('idstring', Store(), lineno=192, col_offset=8)], BinOp(Str('.', lineno=192, col_offset=19), Add(), Name('idstring', Load(), lineno=192, col_offset=25), lineno=192, col_offset=19), lineno=192, col_offset=8)], lineno=189, col_offset=4), Assign([Name('idhost', Store(), lineno=193, col_offset=4)], Call(Attribute(Name('socket', Load(), lineno=193, col_offset=13), 'getfqdn', Load(), lineno=193, col_offset=13), [], [], None, None, lineno=193, col_offset=13), lineno=193, col_offset=4), Assign([Name('msgid', Store(), lineno=194, col_offset=4)], BinOp(Str('<%s.%s.%s%s@%s>', lineno=194, col_offset=12), Mod(), Tuple([Name('utcdate', Load(), lineno=194, col_offset=33), Name('pid', Load(), lineno=194, col_offset=42), Name('randint', Load(), lineno=194, col_offset=47), Name('idstring', Load(), lineno=194, col_offset=56), Name('idhost', Load(), lineno=194, col_offset=66)], Load(), lineno=194, col_offset=33), lineno=194, col_offset=12), lineno=194, col_offset=4), Return(Name('msgid', Load(), lineno=195, col_offset=11), lineno=195, col_offset=4)], [], lineno=177, col_offset=0), FunctionDef('parsedate', arguments([Name('data', Param(), lineno=202, col_offset=14)], None, None, []), [If(UnaryOp(Not(), Name('data', Load(), lineno=203, col_offset=11), lineno=203, col_offset=7), [Return(Name('None', Load(), lineno=204, col_offset=15), lineno=204, col_offset=8)], [], lineno=203, col_offset=4), Return(Call(Name('_parsedate', Load(), lineno=205, col_offset=11), [Name('data', Load(), lineno=205, col_offset=22)], [], None, None, lineno=205, col_offset=11), lineno=205, col_offset=4)], [], lineno=202, col_offset=0), FunctionDef('parsedate_tz', arguments([Name('data', Param(), lineno=208, col_offset=17)], None, None, []), [If(UnaryOp(Not(), Name('data', Load(), lineno=209, col_offset=11), lineno=209, col_offset=7), [Return(Name('None', Load(), lineno=210, col_offset=15), lineno=210, col_offset=8)], [], lineno=209, col_offset=4), Return(Call(Name('_parsedate_tz', Load(), lineno=211, col_offset=11), [Name('data', Load(), lineno=211, col_offset=25)], [], None, None, lineno=211, col_offset=11), lineno=211, col_offset=4)], [], lineno=208, col_offset=0), FunctionDef('parseaddr', arguments([Name('addr', Param(), lineno=214, col_offset=14)], None, None, []), [Assign([Name('addrs', Store(), lineno=215, col_offset=4)], Attribute(Call(Name('_AddressList', Load(), lineno=215, col_offset=12), [Name('addr', Load(), lineno=215, col_offset=25)], [], None, None, lineno=215, col_offset=12), 'addresslist', Load(), lineno=215, col_offset=12), lineno=215, col_offset=4), If(UnaryOp(Not(), Name('addrs', Load(), lineno=216, col_offset=11), lineno=216, col_offset=7), [Return(Tuple([Str('', lineno=217, col_offset=15), Str('', lineno=217, col_offset=19)], Load(), lineno=217, col_offset=15), lineno=217, col_offset=8)], [], lineno=216, col_offset=4), Return(Subscript(Name('addrs', Load(), lineno=218, col_offset=11), Index(Num(0, lineno=218, col_offset=17)), Load(), lineno=218, col_offset=11), lineno=218, col_offset=4)], [], lineno=214, col_offset=0), FunctionDef('unquote', arguments([Name('str', Param(), lineno=222, col_offset=12)], None, None, []), [Expr(Str('Remove quotes from a string.', lineno=223, col_offset=4), lineno=223, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=224, col_offset=7), [Name('str', Load(), lineno=224, col_offset=11)], [], None, None, lineno=224, col_offset=7), [Gt()], [Num(1, lineno=224, col_offset=18)], lineno=224, col_offset=7), [If(BoolOp(And(), [Call(Attribute(Name('str', Load(), lineno=225, col_offset=11), 'startswith', Load(), lineno=225, col_offset=11), [Str('"', lineno=225, col_offset=26)], [], None, None, lineno=225, col_offset=11), Call(Attribute(Name('str', Load(), lineno=225, col_offset=35), 'endswith', Load(), lineno=225, col_offset=35), [Str('"', lineno=225, col_offset=48)], [], None, None, lineno=225, col_offset=35)], lineno=225, col_offset=11), [Return(Call(Attribute(Call(Attribute(Subscript(Name('str', Load(), lineno=226, col_offset=19), Slice(Num(1, lineno=226, col_offset=23), Num(-1, lineno=226, col_offset=26), None), Load(), lineno=226, col_offset=19), 'replace', Load(), lineno=226, col_offset=19), [Str('\\\\', lineno=226, col_offset=37), Str('\\', lineno=226, col_offset=45)], [], None, None, lineno=226, col_offset=19), 'replace', Load(), lineno=226, col_offset=19), [Str('\\"', lineno=226, col_offset=59), Str('"', lineno=226, col_offset=66)], [], None, None, lineno=226, col_offset=19), lineno=226, col_offset=12)], [], lineno=225, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('str', Load(), lineno=227, col_offset=11), 'startswith', Load(), lineno=227, col_offset=11), [Str('<', lineno=227, col_offset=26)], [], None, None, lineno=227, col_offset=11), Call(Attribute(Name('str', Load(), lineno=227, col_offset=35), 'endswith', Load(), lineno=227, col_offset=35), [Str('>', lineno=227, col_offset=48)], [], None, None, lineno=227, col_offset=35)], lineno=227, col_offset=11), [Return(Subscript(Name('str', Load(), lineno=228, col_offset=19), Slice(Num(1, lineno=228, col_offset=23), Num(-1, lineno=228, col_offset=26), None), Load(), lineno=228, col_offset=19), lineno=228, col_offset=12)], [], lineno=227, col_offset=8)], [], lineno=224, col_offset=4), Return(Name('str', Load(), lineno=229, col_offset=11), lineno=229, col_offset=4)], [], lineno=222, col_offset=0), FunctionDef('decode_rfc2231', arguments([Name('s', Param(), lineno=234, col_offset=19)], None, None, []), [Expr(Str('Decode string according to RFC 2231', lineno=235, col_offset=4), lineno=235, col_offset=4), Assign([Name('parts', Store(), lineno=236, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=236, col_offset=12), 'split', Load(), lineno=236, col_offset=12), [Name('TICK', Load(), lineno=236, col_offset=20), Num(2, lineno=236, col_offset=26)], [], None, None, lineno=236, col_offset=12), lineno=236, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=237, col_offset=7), [Name('parts', Load(), lineno=237, col_offset=11)], [], None, None, lineno=237, col_offset=7), [LtE()], [Num(2, lineno=237, col_offset=21)], lineno=237, col_offset=7), [Return(Tuple([Name('None', Load(), lineno=238, col_offset=15), Name('None', Load(), lineno=238, col_offset=21), Name('s', Load(), lineno=238, col_offset=27)], Load(), lineno=238, col_offset=15), lineno=238, col_offset=8)], [], lineno=237, col_offset=4), Return(Name('parts', Load(), lineno=239, col_offset=11), lineno=239, col_offset=4)], [], lineno=234, col_offset=0), FunctionDef('encode_rfc2231', arguments([Name('s', Param(), lineno=242, col_offset=19), Name('charset', Param(), lineno=242, col_offset=22), Name('language', Param(), lineno=242, col_offset=36)], None, None, [Name('None', Load(), lineno=242, col_offset=30), Name('None', Load(), lineno=242, col_offset=45)]), [Expr(Str('Encode string according to RFC 2231.\n\n    If neither charset nor language is given, then s is returned as-is.  If\n    charset is given but not language, the string is encoded using the empty\n    string for language.\n    ', lineno=248, col_offset=-1), lineno=248, col_offset=-1), Import([alias('urllib', None)], lineno=249, col_offset=4), Assign([Name('s', Store(), lineno=250, col_offset=4)], Call(Attribute(Name('urllib', Load(), lineno=250, col_offset=8), 'quote', Load(), lineno=250, col_offset=8), [Name('s', Load(), lineno=250, col_offset=21)], [keyword('safe', Str('', lineno=250, col_offset=29))], None, None, lineno=250, col_offset=8), lineno=250, col_offset=4), If(BoolOp(And(), [Compare(Name('charset', Load(), lineno=251, col_offset=7), [Is()], [Name('None', Load(), lineno=251, col_offset=18)], lineno=251, col_offset=7), Compare(Name('language', Load(), lineno=251, col_offset=27), [Is()], [Name('None', Load(), lineno=251, col_offset=39)], lineno=251, col_offset=27)], lineno=251, col_offset=7), [Return(Name('s', Load(), lineno=252, col_offset=15), lineno=252, col_offset=8)], [], lineno=251, col_offset=4), If(Compare(Name('language', Load(), lineno=253, col_offset=7), [Is()], [Name('None', Load(), lineno=253, col_offset=19)], lineno=253, col_offset=7), [Assign([Name('language', Store(), lineno=254, col_offset=8)], Str('', lineno=254, col_offset=19), lineno=254, col_offset=8)], [], lineno=253, col_offset=4), Return(BinOp(Str("%s'%s'%s", lineno=255, col_offset=11), Mod(), Tuple([Name('charset', Load(), lineno=255, col_offset=25), Name('language', Load(), lineno=255, col_offset=34), Name('s', Load(), lineno=255, col_offset=44)], Load(), lineno=255, col_offset=25), lineno=255, col_offset=11), lineno=255, col_offset=4)], [], lineno=242, col_offset=0), Assign([Name('rfc2231_continuation', Store(), lineno=258, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=258, col_offset=23), 'compile', Load(), lineno=258, col_offset=23), [Str('^(?P<name>\\w+)\\*((?P<num>[0-9]+)\\*?)?$', lineno=258, col_offset=34)], [], None, None, lineno=258, col_offset=23), lineno=258, col_offset=0), FunctionDef('decode_params', arguments([Name('params', Param(), lineno=260, col_offset=18)], None, None, []), [Expr(Str('Decode parameters list according to RFC 2231.\n\n    params is a sequence of 2-tuples containing (param name, string value).\n    ', lineno=264, col_offset=-1), lineno=264, col_offset=-1), Assign([Name('params', Store(), lineno=266, col_offset=4)], Subscript(Name('params', Load(), lineno=266, col_offset=13), Slice(None, None, None), Load(), lineno=266, col_offset=13), lineno=266, col_offset=4), Assign([Name('new_params', Store(), lineno=267, col_offset=4)], List([], Load(), lineno=267, col_offset=17), lineno=267, col_offset=4), Assign([Name('rfc2231_params', Store(), lineno=271, col_offset=4)], Dict([], [], lineno=271, col_offset=21), lineno=271, col_offset=4), Assign([Tuple([Name('name', Store(), lineno=272, col_offset=4), Name('value', Store(), lineno=272, col_offset=10)], Store(), lineno=272, col_offset=4)], Call(Attribute(Name('params', Load(), lineno=272, col_offset=18), 'pop', Load(), lineno=272, col_offset=18), [Num(0, lineno=272, col_offset=29)], [], None, None, lineno=272, col_offset=18), lineno=272, col_offset=4), Expr(Call(Attribute(Name('new_params', Load(), lineno=273, col_offset=4), 'append', Load(), lineno=273, col_offset=4), [Tuple([Name('name', Load(), lineno=273, col_offset=23), Name('value', Load(), lineno=273, col_offset=29)], Load(), lineno=273, col_offset=23)], [], None, None, lineno=273, col_offset=4), lineno=273, col_offset=4), While(Name('params', Load(), lineno=274, col_offset=10), [Assign([Tuple([Name('name', Store(), lineno=275, col_offset=8), Name('value', Store(), lineno=275, col_offset=14)], Store(), lineno=275, col_offset=8)], Call(Attribute(Name('params', Load(), lineno=275, col_offset=22), 'pop', Load(), lineno=275, col_offset=22), [Num(0, lineno=275, col_offset=33)], [], None, None, lineno=275, col_offset=22), lineno=275, col_offset=8), If(Call(Attribute(Name('name', Load(), lineno=276, col_offset=11), 'endswith', Load(), lineno=276, col_offset=11), [Str('*', lineno=276, col_offset=25)], [], None, None, lineno=276, col_offset=11), [Assign([Name('encoded', Store(), lineno=277, col_offset=12)], Name('True', Load(), lineno=277, col_offset=22), lineno=277, col_offset=12)], [Assign([Name('encoded', Store(), lineno=279, col_offset=12)], Name('False', Load(), lineno=279, col_offset=22), lineno=279, col_offset=12)], lineno=276, col_offset=8), Assign([Name('value', Store(), lineno=280, col_offset=8)], Call(Name('unquote', Load(), lineno=280, col_offset=16), [Name('value', Load(), lineno=280, col_offset=24)], [], None, None, lineno=280, col_offset=16), lineno=280, col_offset=8), Assign([Name('mo', Store(), lineno=281, col_offset=8)], Call(Attribute(Name('rfc2231_continuation', Load(), lineno=281, col_offset=13), 'match', Load(), lineno=281, col_offset=13), [Name('name', Load(), lineno=281, col_offset=40)], [], None, None, lineno=281, col_offset=13), lineno=281, col_offset=8), If(Name('mo', Load(), lineno=282, col_offset=11), [Assign([Tuple([Name('name', Store(), lineno=283, col_offset=12), Name('num', Store(), lineno=283, col_offset=18)], Store(), lineno=283, col_offset=12)], Call(Attribute(Name('mo', Load(), lineno=283, col_offset=24), 'group', Load(), lineno=283, col_offset=24), [Str('name', lineno=283, col_offset=33), Str('num', lineno=283, col_offset=41)], [], None, None, lineno=283, col_offset=24), lineno=283, col_offset=12), If(Compare(Name('num', Load(), lineno=284, col_offset=15), [IsNot()], [Name('None', Load(), lineno=284, col_offset=26)], lineno=284, col_offset=15), [Assign([Name('num', Store(), lineno=285, col_offset=16)], Call(Name('int', Load(), lineno=285, col_offset=22), [Name('num', Load(), lineno=285, col_offset=26)], [], None, None, lineno=285, col_offset=22), lineno=285, col_offset=16)], [], lineno=284, col_offset=12), Expr(Call(Attribute(Call(Attribute(Name('rfc2231_params', Load(), lineno=286, col_offset=12), 'setdefault', Load(), lineno=286, col_offset=12), [Name('name', Load(), lineno=286, col_offset=38), List([], Load(), lineno=286, col_offset=44)], [], None, None, lineno=286, col_offset=12), 'append', Load(), lineno=286, col_offset=12), [Tuple([Name('num', Load(), lineno=286, col_offset=56), Name('value', Load(), lineno=286, col_offset=61), Name('encoded', Load(), lineno=286, col_offset=68)], Load(), lineno=286, col_offset=56)], [], None, None, lineno=286, col_offset=12), lineno=286, col_offset=12)], [Expr(Call(Attribute(Name('new_params', Load(), lineno=288, col_offset=12), 'append', Load(), lineno=288, col_offset=12), [Tuple([Name('name', Load(), lineno=288, col_offset=31), BinOp(Str('"%s"', lineno=288, col_offset=37), Mod(), Call(Name('quote', Load(), lineno=288, col_offset=46), [Name('value', Load(), lineno=288, col_offset=52)], [], None, None, lineno=288, col_offset=46), lineno=288, col_offset=37)], Load(), lineno=288, col_offset=31)], [], None, None, lineno=288, col_offset=12), lineno=288, col_offset=12)], lineno=282, col_offset=8)], [], lineno=274, col_offset=4), If(Name('rfc2231_params', Load(), lineno=289, col_offset=7), [For(Tuple([Name('name', Store(), lineno=290, col_offset=12), Name('continuations', Store(), lineno=290, col_offset=18)], Store(), lineno=290, col_offset=12), Call(Attribute(Name('rfc2231_params', Load(), lineno=290, col_offset=35), 'items', Load(), lineno=290, col_offset=35), [], [], None, None, lineno=290, col_offset=35), [Assign([Name('value', Store(), lineno=291, col_offset=12)], List([], Load(), lineno=291, col_offset=20), lineno=291, col_offset=12), Assign([Name('extended', Store(), lineno=292, col_offset=12)], Name('False', Load(), lineno=292, col_offset=23), lineno=292, col_offset=12), Expr(Call(Attribute(Name('continuations', Load(), lineno=294, col_offset=12), 'sort', Load(), lineno=294, col_offset=12), [], [], None, None, lineno=294, col_offset=12), lineno=294, col_offset=12), For(Tuple([Name('num', Store(), lineno=300, col_offset=16), Name('s', Store(), lineno=300, col_offset=21), Name('encoded', Store(), lineno=300, col_offset=24)], Store(), lineno=300, col_offset=16), Name('continuations', Load(), lineno=300, col_offset=35), [If(Name('encoded', Load(), lineno=301, col_offset=19), [Assign([Name('s', Store(), lineno=302, col_offset=20)], Call(Attribute(Name('urllib', Load(), lineno=302, col_offset=24), 'unquote', Load(), lineno=302, col_offset=24), [Name('s', Load(), lineno=302, col_offset=39)], [], None, None, lineno=302, col_offset=24), lineno=302, col_offset=20), Assign([Name('extended', Store(), lineno=303, col_offset=20)], Name('True', Load(), lineno=303, col_offset=31), lineno=303, col_offset=20)], [], lineno=301, col_offset=16), Expr(Call(Attribute(Name('value', Load(), lineno=304, col_offset=16), 'append', Load(), lineno=304, col_offset=16), [Name('s', Load(), lineno=304, col_offset=29)], [], None, None, lineno=304, col_offset=16), lineno=304, col_offset=16)], [], lineno=300, col_offset=12), Assign([Name('value', Store(), lineno=305, col_offset=12)], Call(Name('quote', Load(), lineno=305, col_offset=20), [Call(Attribute(Name('EMPTYSTRING', Load(), lineno=305, col_offset=26), 'join', Load(), lineno=305, col_offset=26), [Name('value', Load(), lineno=305, col_offset=43)], [], None, None, lineno=305, col_offset=26)], [], None, None, lineno=305, col_offset=20), lineno=305, col_offset=12), If(Name('extended', Load(), lineno=306, col_offset=15), [Assign([Tuple([Name('charset', Store(), lineno=307, col_offset=16), Name('language', Store(), lineno=307, col_offset=25), Name('value', Store(), lineno=307, col_offset=35)], Store(), lineno=307, col_offset=16)], Call(Name('decode_rfc2231', Load(), lineno=307, col_offset=43), [Name('value', Load(), lineno=307, col_offset=58)], [], None, None, lineno=307, col_offset=43), lineno=307, col_offset=16), Expr(Call(Attribute(Name('new_params', Load(), lineno=308, col_offset=16), 'append', Load(), lineno=308, col_offset=16), [Tuple([Name('name', Load(), lineno=308, col_offset=35), Tuple([Name('charset', Load(), lineno=308, col_offset=42), Name('language', Load(), lineno=308, col_offset=51), BinOp(Str('"%s"', lineno=308, col_offset=61), Mod(), Name('value', Load(), lineno=308, col_offset=70), lineno=308, col_offset=61)], Load(), lineno=308, col_offset=42)], Load(), lineno=308, col_offset=35)], [], None, None, lineno=308, col_offset=16), lineno=308, col_offset=16)], [Expr(Call(Attribute(Name('new_params', Load(), lineno=310, col_offset=16), 'append', Load(), lineno=310, col_offset=16), [Tuple([Name('name', Load(), lineno=310, col_offset=35), BinOp(Str('"%s"', lineno=310, col_offset=41), Mod(), Name('value', Load(), lineno=310, col_offset=50), lineno=310, col_offset=41)], Load(), lineno=310, col_offset=35)], [], None, None, lineno=310, col_offset=16), lineno=310, col_offset=16)], lineno=306, col_offset=12)], [], lineno=290, col_offset=8)], [], lineno=289, col_offset=4), Return(Name('new_params', Load(), lineno=311, col_offset=11), lineno=311, col_offset=4)], [], lineno=260, col_offset=0), FunctionDef('collapse_rfc2231_value', arguments([Name('value', Param(), lineno=313, col_offset=27), Name('errors', Param(), lineno=313, col_offset=34), Name('fallback_charset', Param(), lineno=314, col_offset=27)], None, None, [Str('replace', lineno=313, col_offset=41), Str('us-ascii', lineno=314, col_offset=44)]), [If(Call(Name('isinstance', Load(), lineno=315, col_offset=7), [Name('value', Load(), lineno=315, col_offset=18), Name('tuple', Load(), lineno=315, col_offset=25)], [], None, None, lineno=315, col_offset=7), [Assign([Name('rawval', Store(), lineno=316, col_offset=8)], Call(Name('unquote', Load(), lineno=316, col_offset=17), [Subscript(Name('value', Load(), lineno=316, col_offset=25), Index(Num(2, lineno=316, col_offset=31)), Load(), lineno=316, col_offset=25)], [], None, None, lineno=316, col_offset=17), lineno=316, col_offset=8), Assign([Name('charset', Store(), lineno=317, col_offset=8)], BoolOp(Or(), [Subscript(Name('value', Load(), lineno=317, col_offset=18), Index(Num(0, lineno=317, col_offset=24)), Load(), lineno=317, col_offset=18), Str('us-ascii', lineno=317, col_offset=30)], lineno=317, col_offset=18), lineno=317, col_offset=8), TryExcept([Return(Call(Name('unicode', Load(), lineno=319, col_offset=19), [Name('rawval', Load(), lineno=319, col_offset=27), Name('charset', Load(), lineno=319, col_offset=35), Name('errors', Load(), lineno=319, col_offset=44)], [], None, None, lineno=319, col_offset=19), lineno=319, col_offset=12)], [ExceptHandler(Name('LookupError', Load(), lineno=320, col_offset=15), None, [Return(Call(Name('unicode', Load(), lineno=322, col_offset=19), [Name('rawval', Load(), lineno=322, col_offset=27), Name('fallback_charset', Load(), lineno=322, col_offset=35), Name('errors', Load(), lineno=322, col_offset=53)], [], None, None, lineno=322, col_offset=19), lineno=322, col_offset=12)], lineno=320, col_offset=8)], [], lineno=318, col_offset=8)], [Return(Call(Name('unquote', Load(), lineno=324, col_offset=15), [Name('value', Load(), lineno=324, col_offset=23)], [], None, None, lineno=324, col_offset=15), lineno=324, col_offset=8)], lineno=315, col_offset=4)], [], lineno=313, col_offset=0)])
