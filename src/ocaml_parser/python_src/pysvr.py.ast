Module([Expr(Str('A multi-threaded telnet-like server that gives a Python prompt.\n\nThis is really a prototype for the same thing in C.\n\nUsage: pysvr.py [port]\n\nFor security reasons, it only accepts requests from the current host.\nThis can still be insecure, but restricts violations from people who\ncan log in on your machine.  Use with caution!\n\n', lineno=13, col_offset=-1), lineno=13, col_offset=-1), Import([alias('sys', None), alias('os', None), alias('string', None), alias('getopt', None), alias('thread', None), alias('socket', None), alias('traceback', None)], lineno=15, col_offset=0), Assign([Name('PORT', Store(), lineno=17, col_offset=0)], Num(4000, lineno=17, col_offset=7), lineno=17, col_offset=0), FunctionDef('main', arguments([], None, None, []), [TryExcept([Assign([Tuple([Name('opts', Store(), lineno=21, col_offset=8), Name('args', Store(), lineno=21, col_offset=14)], Store(), lineno=21, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=21, col_offset=21), 'getopt', Load(), lineno=21, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=21, col_offset=35), 'argv', Load(), lineno=21, col_offset=35), Slice(Num(1, lineno=21, col_offset=44), None, None), Load(), lineno=21, col_offset=35), Str('', lineno=21, col_offset=49)], [], None, None, lineno=21, col_offset=21), lineno=21, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=22, col_offset=11), [Name('args', Load(), lineno=22, col_offset=15)], [], None, None, lineno=22, col_offset=11), [Gt()], [Num(1, lineno=22, col_offset=23)], lineno=22, col_offset=11), [Raise(Attribute(Name('getopt', Load(), lineno=23, col_offset=18), 'error', Load(), lineno=23, col_offset=18), Str('Too many arguments.', lineno=23, col_offset=32), None, lineno=23, col_offset=12)], [], lineno=22, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=24, col_offset=11), 'error', Load(), lineno=24, col_offset=11), Name('msg', Store(), lineno=24, col_offset=25), [Expr(Call(Name('usage', Load(), lineno=25, col_offset=8), [Name('msg', Load(), lineno=25, col_offset=14)], [], None, None, lineno=25, col_offset=8), lineno=25, col_offset=8)], lineno=24, col_offset=4)], [], lineno=20, col_offset=4), For(Tuple([Name('o', Store(), lineno=26, col_offset=8), Name('a', Store(), lineno=26, col_offset=11)], Store(), lineno=26, col_offset=8), Name('opts', Load(), lineno=26, col_offset=16), [Pass( lineno=27, col_offset=8)], [], lineno=26, col_offset=4), If(Name('args', Load(), lineno=28, col_offset=7), [TryExcept([Assign([Name('port', Store(), lineno=30, col_offset=12)], Call(Attribute(Name('string', Load(), lineno=30, col_offset=19), 'atoi', Load(), lineno=30, col_offset=19), [Subscript(Name('args', Load(), lineno=30, col_offset=31), Index(Num(0, lineno=30, col_offset=36)), Load(), lineno=30, col_offset=31)], [], None, None, lineno=30, col_offset=19), lineno=30, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=31, col_offset=15), Name('msg', Store(), lineno=31, col_offset=27), [Expr(Call(Name('usage', Load(), lineno=32, col_offset=12), [Name('msg', Load(), lineno=32, col_offset=18)], [], None, None, lineno=32, col_offset=12), lineno=32, col_offset=12)], lineno=31, col_offset=8)], [], lineno=29, col_offset=8)], [Assign([Name('port', Store(), lineno=34, col_offset=8)], Name('PORT', Load(), lineno=34, col_offset=15), lineno=34, col_offset=8)], lineno=28, col_offset=4), Expr(Call(Name('main_thread', Load(), lineno=35, col_offset=4), [Name('port', Load(), lineno=35, col_offset=16)], [], None, None, lineno=35, col_offset=4), lineno=35, col_offset=4)], [], lineno=19, col_offset=0), FunctionDef('usage', arguments([Name('msg', Param(), lineno=37, col_offset=10)], None, None, [Name('None', Load(), lineno=37, col_offset=14)]), [Assign([Attribute(Name('sys', Load(), lineno=38, col_offset=4), 'stdout', Store(), lineno=38, col_offset=4)], Attribute(Name('sys', Load(), lineno=38, col_offset=17), 'stderr', Load(), lineno=38, col_offset=17), lineno=38, col_offset=4), If(Name('msg', Load(), lineno=39, col_offset=7), [Print(None, [Name('msg', Load(), lineno=40, col_offset=14)], True, lineno=40, col_offset=8)], [], lineno=39, col_offset=4), Print(None, [Str('\n', lineno=41, col_offset=10), Name('__doc__', Load(), lineno=41, col_offset=16)], False, lineno=41, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=42, col_offset=4), 'exit', Load(), lineno=42, col_offset=4), [Num(2, lineno=42, col_offset=13)], [], None, None, lineno=42, col_offset=4), lineno=42, col_offset=4)], [], lineno=37, col_offset=0), FunctionDef('main_thread', arguments([Name('port', Param(), lineno=44, col_offset=16)], None, None, []), [Assign([Name('sock', Store(), lineno=45, col_offset=4)], Call(Attribute(Name('socket', Load(), lineno=45, col_offset=11), 'socket', Load(), lineno=45, col_offset=11), [Attribute(Name('socket', Load(), lineno=45, col_offset=25), 'AF_INET', Load(), lineno=45, col_offset=25), Attribute(Name('socket', Load(), lineno=45, col_offset=41), 'SOCK_STREAM', Load(), lineno=45, col_offset=41)], [], None, None, lineno=45, col_offset=11), lineno=45, col_offset=4), Expr(Call(Attribute(Name('sock', Load(), lineno=46, col_offset=4), 'bind', Load(), lineno=46, col_offset=4), [Tuple([Str('', lineno=46, col_offset=15), Name('port', Load(), lineno=46, col_offset=19)], Load(), lineno=46, col_offset=15)], [], None, None, lineno=46, col_offset=4), lineno=46, col_offset=4), Expr(Call(Attribute(Name('sock', Load(), lineno=47, col_offset=4), 'listen', Load(), lineno=47, col_offset=4), [Num(5, lineno=47, col_offset=16)], [], None, None, lineno=47, col_offset=4), lineno=47, col_offset=4), Print(None, [Str('Listening on port', lineno=48, col_offset=10), Name('port', Load(), lineno=48, col_offset=31), Str('...', lineno=48, col_offset=37)], True, lineno=48, col_offset=4), While(Num(1, lineno=49, col_offset=10), [Assign([Tuple([Name('conn', Store(), lineno=50, col_offset=9), Name('addr', Store(), lineno=50, col_offset=15)], Store(), lineno=50, col_offset=9)], Call(Attribute(Name('sock', Load(), lineno=50, col_offset=23), 'accept', Load(), lineno=50, col_offset=23), [], [], None, None, lineno=50, col_offset=23), lineno=50, col_offset=8), If(Compare(Subscript(Name('addr', Load(), lineno=51, col_offset=11), Index(Num(0, lineno=51, col_offset=16)), Load(), lineno=51, col_offset=11), [NotEq()], [Subscript(Call(Attribute(Name('conn', Load(), lineno=51, col_offset=22), 'getsockname', Load(), lineno=51, col_offset=22), [], [], None, None, lineno=51, col_offset=22), Index(Num(0, lineno=51, col_offset=41)), Load(), lineno=51, col_offset=22)], lineno=51, col_offset=11), [Expr(Call(Attribute(Name('conn', Load(), lineno=52, col_offset=12), 'close', Load(), lineno=52, col_offset=12), [], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=12), Print(None, [Str('Refusing connection from non-local host', lineno=53, col_offset=18), Subscript(Name('addr', Load(), lineno=53, col_offset=61), Index(Num(0, lineno=53, col_offset=66)), Load(), lineno=53, col_offset=61), Str('.', lineno=53, col_offset=70)], True, lineno=53, col_offset=12), Continue( lineno=54, col_offset=12)], [], lineno=51, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=55, col_offset=8), 'start_new_thread', Load(), lineno=55, col_offset=8), [Name('service_thread', Load(), lineno=55, col_offset=32), Tuple([Name('conn', Load(), lineno=55, col_offset=49), Name('addr', Load(), lineno=55, col_offset=55)], Load(), lineno=55, col_offset=49)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8), Delete([Name('conn', Del(), lineno=56, col_offset=12), Name('addr', Del(), lineno=56, col_offset=18)], lineno=56, col_offset=8)], [], lineno=49, col_offset=4)], [], lineno=44, col_offset=0), FunctionDef('service_thread', arguments([Name('conn', Param(), lineno=58, col_offset=19), Name('addr', Param(), lineno=58, col_offset=25)], None, None, []), [Assign([Tuple([Name('caddr', Store(), lineno=59, col_offset=5), Name('cport', Store(), lineno=59, col_offset=12)], Store(), lineno=59, col_offset=5)], Name('addr', Load(), lineno=59, col_offset=21), lineno=59, col_offset=4), Print(None, [BinOp(Str('Thread %s has connection from %s.\n', lineno=60, col_offset=10), Mod(), Tuple([Call(Name('str', Load(), lineno=60, col_offset=51), [Call(Attribute(Name('thread', Load(), lineno=60, col_offset=55), 'get_ident', Load(), lineno=60, col_offset=55), [], [], None, None, lineno=60, col_offset=55)], [], None, None, lineno=60, col_offset=51), Name('caddr', Load(), lineno=61, col_offset=51)], Load(), lineno=60, col_offset=51), lineno=60, col_offset=10)], False, lineno=60, col_offset=4), Assign([Name('stdin', Store(), lineno=62, col_offset=4)], Call(Attribute(Name('conn', Load(), lineno=62, col_offset=12), 'makefile', Load(), lineno=62, col_offset=12), [Str('r', lineno=62, col_offset=26)], [], None, None, lineno=62, col_offset=12), lineno=62, col_offset=4), Assign([Name('stdout', Store(), lineno=63, col_offset=4)], Call(Attribute(Name('conn', Load(), lineno=63, col_offset=13), 'makefile', Load(), lineno=63, col_offset=13), [Str('w', lineno=63, col_offset=27), Num(0, lineno=63, col_offset=32)], [], None, None, lineno=63, col_offset=13), lineno=63, col_offset=4), Expr(Call(Name('run_interpreter', Load(), lineno=64, col_offset=4), [Name('stdin', Load(), lineno=64, col_offset=20), Name('stdout', Load(), lineno=64, col_offset=27)], [], None, None, lineno=64, col_offset=4), lineno=64, col_offset=4), Print(None, [BinOp(Str('Thread %s is done.\n', lineno=65, col_offset=10), Mod(), Call(Name('str', Load(), lineno=65, col_offset=35), [Call(Attribute(Name('thread', Load(), lineno=65, col_offset=39), 'get_ident', Load(), lineno=65, col_offset=39), [], [], None, None, lineno=65, col_offset=39)], [], None, None, lineno=65, col_offset=35), lineno=65, col_offset=10)], False, lineno=65, col_offset=4)], [], lineno=58, col_offset=0), FunctionDef('run_interpreter', arguments([Name('stdin', Param(), lineno=67, col_offset=20), Name('stdout', Param(), lineno=67, col_offset=27)], None, None, []), [Assign([Name('globals', Store(), lineno=68, col_offset=4)], Dict([], [], lineno=68, col_offset=14), lineno=68, col_offset=4), TryExcept([Expr(Call(Name('str', Load(), lineno=70, col_offset=8), [Attribute(Name('sys', Load(), lineno=70, col_offset=12), 'ps1', Load(), lineno=70, col_offset=12)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8)], [ExceptHandler(None, None, [Assign([Attribute(Name('sys', Load(), lineno=72, col_offset=8), 'ps1', Store(), lineno=72, col_offset=8)], Str('>>> ', lineno=72, col_offset=18), lineno=72, col_offset=8)], lineno=71, col_offset=4)], [], lineno=69, col_offset=4), Assign([Name('source', Store(), lineno=73, col_offset=4)], Str('', lineno=73, col_offset=13), lineno=73, col_offset=4), While(Num(1, lineno=74, col_offset=10), [Expr(Call(Attribute(Name('stdout', Load(), lineno=75, col_offset=8), 'write', Load(), lineno=75, col_offset=8), [Attribute(Name('sys', Load(), lineno=75, col_offset=21), 'ps1', Load(), lineno=75, col_offset=21)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Assign([Name('line', Store(), lineno=76, col_offset=8)], Call(Attribute(Name('stdin', Load(), lineno=76, col_offset=15), 'readline', Load(), lineno=76, col_offset=15), [], [], None, None, lineno=76, col_offset=15), lineno=76, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=77, col_offset=11), Slice(None, Num(2, lineno=77, col_offset=17), None), Load(), lineno=77, col_offset=11), [Eq()], [Str('\xff\xec', lineno=77, col_offset=23)], lineno=77, col_offset=11), [Assign([Name('line', Store(), lineno=78, col_offset=12)], Str('', lineno=78, col_offset=19), lineno=78, col_offset=12)], [], lineno=77, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('line', Load(), lineno=79, col_offset=15), lineno=79, col_offset=11), UnaryOp(Not(), Name('source', Load(), lineno=79, col_offset=28), lineno=79, col_offset=24)], lineno=79, col_offset=11), [Break( lineno=80, col_offset=12)], [], lineno=79, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=81, col_offset=11), Slice(Num(-2, lineno=81, col_offset=17), None, None), Load(), lineno=81, col_offset=11), [Eq()], [Str('\r\n', lineno=81, col_offset=24)], lineno=81, col_offset=11), [Assign([Name('line', Store(), lineno=82, col_offset=12)], BinOp(Subscript(Name('line', Load(), lineno=82, col_offset=19), Slice(None, Num(-2, lineno=82, col_offset=26), None), Load(), lineno=82, col_offset=19), Add(), Str('\n', lineno=82, col_offset=31), lineno=82, col_offset=19), lineno=82, col_offset=12)], [], lineno=81, col_offset=8), Assign([Name('source', Store(), lineno=83, col_offset=8)], BinOp(Name('source', Load(), lineno=83, col_offset=17), Add(), Name('line', Load(), lineno=83, col_offset=26), lineno=83, col_offset=17), lineno=83, col_offset=8), TryExcept([Assign([Name('code', Store(), lineno=85, col_offset=12)], Call(Name('compile_command', Load(), lineno=85, col_offset=19), [Name('source', Load(), lineno=85, col_offset=35)], [], None, None, lineno=85, col_offset=19), lineno=85, col_offset=12)], [ExceptHandler(Name('SyntaxError', Load(), lineno=86, col_offset=15), Name('err', Store(), lineno=86, col_offset=28), [Assign([Name('source', Store(), lineno=87, col_offset=12)], Str('', lineno=87, col_offset=21), lineno=87, col_offset=12), Expr(Call(Attribute(Name('traceback', Load(), lineno=88, col_offset=12), 'print_exception', Load(), lineno=88, col_offset=12), [Name('SyntaxError', Load(), lineno=88, col_offset=38), Name('err', Load(), lineno=88, col_offset=51), Name('None', Load(), lineno=88, col_offset=56)], [keyword('file', Name('stdout', Load(), lineno=88, col_offset=67))], None, None, lineno=88, col_offset=12), lineno=88, col_offset=12), Continue( lineno=89, col_offset=12)], lineno=86, col_offset=8)], [], lineno=84, col_offset=8), If(UnaryOp(Not(), Name('code', Load(), lineno=90, col_offset=15), lineno=90, col_offset=11), [Continue( lineno=91, col_offset=12)], [], lineno=90, col_offset=8), Assign([Name('source', Store(), lineno=92, col_offset=8)], Str('', lineno=92, col_offset=17), lineno=92, col_offset=8), TryExcept([Expr(Call(Name('run_command', Load(), lineno=94, col_offset=12), [Name('code', Load(), lineno=94, col_offset=24), Name('stdin', Load(), lineno=94, col_offset=30), Name('stdout', Load(), lineno=94, col_offset=37), Name('globals', Load(), lineno=94, col_offset=45)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], [ExceptHandler(Name('SystemExit', Load(), lineno=95, col_offset=15), Name('how', Store(), lineno=95, col_offset=27), [If(Name('how', Load(), lineno=96, col_offset=15), [TryExcept([Assign([Name('how', Store(), lineno=98, col_offset=20)], Call(Name('str', Load(), lineno=98, col_offset=26), [Name('how', Load(), lineno=98, col_offset=30)], [], None, None, lineno=98, col_offset=26), lineno=98, col_offset=20)], [ExceptHandler(None, None, [Assign([Name('how', Store(), lineno=100, col_offset=20)], Str('', lineno=100, col_offset=26), lineno=100, col_offset=20)], lineno=99, col_offset=16)], [], lineno=97, col_offset=16), Expr(Call(Attribute(Name('stdout', Load(), lineno=101, col_offset=16), 'write', Load(), lineno=101, col_offset=16), [BinOp(Str('Exit %s\n', lineno=101, col_offset=29), Mod(), Name('how', Load(), lineno=101, col_offset=43), lineno=101, col_offset=29)], [], None, None, lineno=101, col_offset=16), lineno=101, col_offset=16)], [], lineno=96, col_offset=12), Break( lineno=102, col_offset=12)], lineno=95, col_offset=8)], [], lineno=93, col_offset=8)], [], lineno=74, col_offset=4), Expr(Call(Attribute(Name('stdout', Load(), lineno=103, col_offset=4), 'write', Load(), lineno=103, col_offset=4), [Str('\nGoodbye.\n', lineno=103, col_offset=17)], [], None, None, lineno=103, col_offset=4), lineno=103, col_offset=4)], [], lineno=67, col_offset=0), FunctionDef('run_command', arguments([Name('code', Param(), lineno=105, col_offset=16), Name('stdin', Param(), lineno=105, col_offset=22), Name('stdout', Param(), lineno=105, col_offset=29), Name('globals', Param(), lineno=105, col_offset=37)], None, None, []), [Assign([Name('save', Store(), lineno=106, col_offset=4)], Tuple([Attribute(Name('sys', Load(), lineno=106, col_offset=11), 'stdin', Load(), lineno=106, col_offset=11), Attribute(Name('sys', Load(), lineno=106, col_offset=22), 'stdout', Load(), lineno=106, col_offset=22), Attribute(Name('sys', Load(), lineno=106, col_offset=34), 'stderr', Load(), lineno=106, col_offset=34)], Load(), lineno=106, col_offset=11), lineno=106, col_offset=4), TryFinally([Assign([Attribute(Name('sys', Load(), lineno=108, col_offset=8), 'stdout', Store(), lineno=108, col_offset=8), Attribute(Name('sys', Load(), lineno=108, col_offset=21), 'stderr', Store(), lineno=108, col_offset=21)], Name('stdout', Load(), lineno=108, col_offset=34), lineno=108, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=109, col_offset=8), 'stdin', Store(), lineno=109, col_offset=8)], Name('stdin', Load(), lineno=109, col_offset=20), lineno=109, col_offset=8), TryExcept([Exec(Name('code', Load(), lineno=111, col_offset=17), Name('globals', Load(), lineno=111, col_offset=25), None, lineno=111, col_offset=12)], [ExceptHandler(Name('SystemExit', Load(), lineno=112, col_offset=15), Name('how', Store(), lineno=112, col_offset=27), [Raise(Name('SystemExit', Load(), lineno=113, col_offset=18), Name('how', Load(), lineno=113, col_offset=30), Subscript(Call(Attribute(Name('sys', Load(), lineno=113, col_offset=35), 'exc_info', Load(), lineno=113, col_offset=35), [], [], None, None, lineno=113, col_offset=35), Index(Num(2, lineno=113, col_offset=50)), Load(), lineno=113, col_offset=35), lineno=113, col_offset=12)], lineno=112, col_offset=8), ExceptHandler(None, None, [Assign([Tuple([Name('type', Store(), lineno=115, col_offset=12), Name('value', Store(), lineno=115, col_offset=18), Name('tb', Store(), lineno=115, col_offset=25)], Store(), lineno=115, col_offset=12)], Call(Attribute(Name('sys', Load(), lineno=115, col_offset=30), 'exc_info', Load(), lineno=115, col_offset=30), [], [], None, None, lineno=115, col_offset=30), lineno=115, col_offset=12), If(Name('tb', Load(), lineno=116, col_offset=15), [Assign([Name('tb', Store(), lineno=116, col_offset=19)], Attribute(Name('tb', Load(), lineno=116, col_offset=24), 'tb_next', Load(), lineno=116, col_offset=24), lineno=116, col_offset=19)], [], lineno=116, col_offset=12), Expr(Call(Attribute(Name('traceback', Load(), lineno=117, col_offset=12), 'print_exception', Load(), lineno=117, col_offset=12), [Name('type', Load(), lineno=117, col_offset=38), Name('value', Load(), lineno=117, col_offset=44), Name('tb', Load(), lineno=117, col_offset=51)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12), Delete([Name('tb', Del(), lineno=118, col_offset=16)], lineno=118, col_offset=12)], lineno=114, col_offset=8)], [], lineno=110, col_offset=8)], [Assign([Tuple([Attribute(Name('sys', Load(), lineno=120, col_offset=8), 'stdin', Store(), lineno=120, col_offset=8), Attribute(Name('sys', Load(), lineno=120, col_offset=19), 'stdout', Store(), lineno=120, col_offset=19), Attribute(Name('sys', Load(), lineno=120, col_offset=31), 'stderr', Store(), lineno=120, col_offset=31)], Store(), lineno=120, col_offset=8)], Name('save', Load(), lineno=120, col_offset=44), lineno=120, col_offset=8)], lineno=107, col_offset=4)], [], lineno=105, col_offset=0), ImportFrom('code', [alias('compile_command', None)], 0, lineno=122, col_offset=0), Expr(Call(Name('main', Load(), lineno=124, col_offset=0), [], [], None, None, lineno=124, col_offset=0), lineno=124, col_offset=0)])
