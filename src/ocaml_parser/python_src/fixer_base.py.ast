Module([Expr(Str('Base class for fixers (optional, but recommended).', lineno=4, col_offset=0), lineno=4, col_offset=0), Import([alias('logging', None)], lineno=7, col_offset=0), Import([alias('itertools', None)], lineno=8, col_offset=0), ImportFrom('patcomp', [alias('PatternCompiler', None)], 1, lineno=11, col_offset=0), ImportFrom(None, [alias('pygram', None)], 1, lineno=12, col_offset=0), ImportFrom('fixer_util', [alias('does_tree_import', None)], 1, lineno=13, col_offset=0), ClassDef('BaseFix', [Name('object', Load(), lineno=15, col_offset=14)], [Expr(Str("Optional base class for fixers.\n\n    The subclass name must be FixFooBar where FooBar is the result of\n    removing underscores and capitalizing the words of the fix name.\n    For example, the class name for a fixer named 'has_key' should be\n    FixHasKey.\n    ", lineno=23, col_offset=-1), lineno=23, col_offset=-1), Assign([Name('PATTERN', Store(), lineno=25, col_offset=4)], Name('None', Load(), lineno=25, col_offset=14), lineno=25, col_offset=4), Assign([Name('pattern', Store(), lineno=26, col_offset=4)], Name('None', Load(), lineno=26, col_offset=14), lineno=26, col_offset=4), Assign([Name('pattern_tree', Store(), lineno=27, col_offset=4)], Name('None', Load(), lineno=27, col_offset=19), lineno=27, col_offset=4), Assign([Name('options', Store(), lineno=28, col_offset=4)], Name('None', Load(), lineno=28, col_offset=14), lineno=28, col_offset=4), Assign([Name('filename', Store(), lineno=29, col_offset=4)], Name('None', Load(), lineno=29, col_offset=15), lineno=29, col_offset=4), Assign([Name('logger', Store(), lineno=30, col_offset=4)], Name('None', Load(), lineno=30, col_offset=13), lineno=30, col_offset=4), Assign([Name('numbers', Store(), lineno=31, col_offset=4)], Call(Attribute(Name('itertools', Load(), lineno=31, col_offset=14), 'count', Load(), lineno=31, col_offset=14), [Num(1, lineno=31, col_offset=30)], [], None, None, lineno=31, col_offset=14), lineno=31, col_offset=4), Assign([Name('used_names', Store(), lineno=32, col_offset=4)], Call(Name('set', Load(), lineno=32, col_offset=17), [], [], None, None, lineno=32, col_offset=17), lineno=32, col_offset=4), Assign([Name('order', Store(), lineno=33, col_offset=4)], Str('post', lineno=33, col_offset=12), lineno=33, col_offset=4), Assign([Name('explicit', Store(), lineno=34, col_offset=4)], Name('False', Load(), lineno=34, col_offset=15), lineno=34, col_offset=4), Assign([Name('run_order', Store(), lineno=35, col_offset=4)], Num(5, lineno=35, col_offset=16), lineno=35, col_offset=4), Assign([Name('_accept_type', Store(), lineno=37, col_offset=4)], Name('None', Load(), lineno=37, col_offset=19), lineno=37, col_offset=4), Assign([Name('keep_line_order', Store(), lineno=40, col_offset=4)], Name('False', Load(), lineno=40, col_offset=22), lineno=40, col_offset=4), Assign([Name('BM_compatible', Store(), lineno=42, col_offset=4)], Name('False', Load(), lineno=42, col_offset=20), lineno=42, col_offset=4), Assign([Name('syms', Store(), lineno=47, col_offset=4)], Attribute(Name('pygram', Load(), lineno=47, col_offset=11), 'python_symbols', Load(), lineno=47, col_offset=11), lineno=47, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=49, col_offset=17), Name('options', Param(), lineno=49, col_offset=23), Name('log', Param(), lineno=49, col_offset=32)], None, None, []), [Expr(Str('Initializer.  Subclass may override.\n\n        Args:\n            options: an dict containing the options passed to RefactoringTool\n            that could be used to customize the fixer through the command line.\n            log: a list to append warnings and other messages to.\n        ', lineno=56, col_offset=-1), lineno=56, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=57, col_offset=8), 'options', Store(), lineno=57, col_offset=8)], Name('options', Load(), lineno=57, col_offset=23), lineno=57, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=58, col_offset=8), 'log', Store(), lineno=58, col_offset=8)], Name('log', Load(), lineno=58, col_offset=19), lineno=58, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=8), 'compile_pattern', Load(), lineno=59, col_offset=8), [], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('compile_pattern', arguments([Name('self', Param(), lineno=61, col_offset=24)], None, None, []), [Expr(Str("Compiles self.PATTERN into self.pattern.\n\n        Subclass may override if it doesn't want to use\n        self.{pattern,PATTERN} in .match().\n        ", lineno=66, col_offset=-1), lineno=66, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=67, col_offset=11), 'PATTERN', Load(), lineno=67, col_offset=11), [IsNot()], [Name('None', Load(), lineno=67, col_offset=31)], lineno=67, col_offset=11), [Assign([Name('PC', Store(), lineno=68, col_offset=12)], Call(Name('PatternCompiler', Load(), lineno=68, col_offset=17), [], [], None, None, lineno=68, col_offset=17), lineno=68, col_offset=12), Assign([Tuple([Attribute(Name('self', Load(), lineno=69, col_offset=12), 'pattern', Store(), lineno=69, col_offset=12), Attribute(Name('self', Load(), lineno=69, col_offset=26), 'pattern_tree', Store(), lineno=69, col_offset=26)], Store(), lineno=69, col_offset=12)], Call(Attribute(Name('PC', Load(), lineno=69, col_offset=46), 'compile_pattern', Load(), lineno=69, col_offset=46), [Attribute(Name('self', Load(), lineno=69, col_offset=65), 'PATTERN', Load(), lineno=69, col_offset=65)], [keyword('with_tree', Name('True', Load(), lineno=70, col_offset=75))], None, None, lineno=69, col_offset=46), lineno=69, col_offset=12)], [], lineno=67, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('set_filename', arguments([Name('self', Param(), lineno=72, col_offset=21), Name('filename', Param(), lineno=72, col_offset=27)], None, None, []), [Expr(Str('Set the filename, and a logger derived from it.\n\n        The main refactoring tool should call this.\n        ', lineno=76, col_offset=-1), lineno=76, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=77, col_offset=8), 'filename', Store(), lineno=77, col_offset=8)], Name('filename', Load(), lineno=77, col_offset=24), lineno=77, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=8), 'logger', Store(), lineno=78, col_offset=8)], Call(Attribute(Name('logging', Load(), lineno=78, col_offset=22), 'getLogger', Load(), lineno=78, col_offset=22), [Name('filename', Load(), lineno=78, col_offset=40)], [], None, None, lineno=78, col_offset=22), lineno=78, col_offset=8)], [], lineno=72, col_offset=4), FunctionDef('match', arguments([Name('self', Param(), lineno=80, col_offset=14), Name('node', Param(), lineno=80, col_offset=20)], None, None, []), [Expr(Str('Returns match for a given parse tree node.\n\n        Should return a true or false object (not necessarily a bool).\n        It may return a non-empty dict of matching sub-nodes as\n        returned by a matching pattern.\n\n        Subclass may override.\n        ', lineno=88, col_offset=-1), lineno=88, col_offset=-1), Assign([Name('results', Store(), lineno=89, col_offset=8)], Dict([Str('node', lineno=89, col_offset=19)], [Name('node', Load(), lineno=89, col_offset=27)], lineno=89, col_offset=18), lineno=89, col_offset=8), Return(BoolOp(And(), [Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=15), 'pattern', Load(), lineno=90, col_offset=15), 'match', Load(), lineno=90, col_offset=15), [Name('node', Load(), lineno=90, col_offset=34), Name('results', Load(), lineno=90, col_offset=40)], [], None, None, lineno=90, col_offset=15), Name('results', Load(), lineno=90, col_offset=53)], lineno=90, col_offset=15), lineno=90, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=92, col_offset=18), Name('node', Param(), lineno=92, col_offset=24), Name('results', Param(), lineno=92, col_offset=30)], None, None, []), [Expr(Str('Returns the transformation for a given parse tree node.\n\n        Args:\n          node: the root of the parse tree that matched the fixer.\n          results: a dict mapping symbolic names to part of the match.\n\n        Returns:\n          None, or a node that is a modified copy of the\n          argument node.  The node argument may also be modified in-place to\n          effect the same change.\n\n        Subclass *must* override.\n        ', lineno=105, col_offset=-1), lineno=105, col_offset=-1), Raise(Call(Name('NotImplementedError', Load(), lineno=106, col_offset=14), [], [], None, None, lineno=106, col_offset=14), None, None, lineno=106, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('new_name', arguments([Name('self', Param(), lineno=108, col_offset=17), Name('template', Param(), lineno=108, col_offset=23)], None, None, [Str(u'xxx_todo_changeme', lineno=108, col_offset=32)]), [Expr(Str('Return a string suitable for use as an identifier\n\n        The new name is guaranteed not to conflict with other identifiers.\n        ', lineno=112, col_offset=-1), lineno=112, col_offset=-1), Assign([Name('name', Store(), lineno=113, col_offset=8)], Name('template', Load(), lineno=113, col_offset=15), lineno=113, col_offset=8), While(Compare(Name('name', Load(), lineno=114, col_offset=14), [In()], [Attribute(Name('self', Load(), lineno=114, col_offset=22), 'used_names', Load(), lineno=114, col_offset=22)], lineno=114, col_offset=14), [Assign([Name('name', Store(), lineno=115, col_offset=12)], BinOp(Name('template', Load(), lineno=115, col_offset=19), Add(), Call(Name('unicode', Load(), lineno=115, col_offset=30), [Call(Attribute(Attribute(Name('self', Load(), lineno=115, col_offset=38), 'numbers', Load(), lineno=115, col_offset=38), 'next', Load(), lineno=115, col_offset=38), [], [], None, None, lineno=115, col_offset=38)], [], None, None, lineno=115, col_offset=30), lineno=115, col_offset=19), lineno=115, col_offset=12)], [], lineno=114, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=116, col_offset=8), 'used_names', Load(), lineno=116, col_offset=8), 'add', Load(), lineno=116, col_offset=8), [Name('name', Load(), lineno=116, col_offset=28)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8), Return(Name('name', Load(), lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=108, col_offset=4), FunctionDef('log_message', arguments([Name('self', Param(), lineno=119, col_offset=20), Name('message', Param(), lineno=119, col_offset=26)], None, None, []), [If(Attribute(Name('self', Load(), lineno=120, col_offset=11), 'first_log', Load(), lineno=120, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=121, col_offset=12), 'first_log', Store(), lineno=121, col_offset=12)], Name('False', Load(), lineno=121, col_offset=29), lineno=121, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=122, col_offset=12), 'log', Load(), lineno=122, col_offset=12), 'append', Load(), lineno=122, col_offset=12), [BinOp(Str('### In file %s ###', lineno=122, col_offset=28), Mod(), Attribute(Name('self', Load(), lineno=122, col_offset=51), 'filename', Load(), lineno=122, col_offset=51), lineno=122, col_offset=28)], [], None, None, lineno=122, col_offset=12), lineno=122, col_offset=12)], [], lineno=120, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=123, col_offset=8), 'log', Load(), lineno=123, col_offset=8), 'append', Load(), lineno=123, col_offset=8), [Name('message', Load(), lineno=123, col_offset=24)], [], None, None, lineno=123, col_offset=8), lineno=123, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('cannot_convert', arguments([Name('self', Param(), lineno=125, col_offset=23), Name('node', Param(), lineno=125, col_offset=29), Name('reason', Param(), lineno=125, col_offset=35)], None, None, [Name('None', Load(), lineno=125, col_offset=42)]), [Expr(Str("Warn the user that a given chunk of code is not valid Python 3,\n        but that it cannot be converted automatically.\n\n        First argument is the top-level node for the code in question.\n        Optional second argument is why it can't be converted.\n        ", lineno=131, col_offset=-1), lineno=131, col_offset=-1), Assign([Name('lineno', Store(), lineno=132, col_offset=8)], Call(Attribute(Name('node', Load(), lineno=132, col_offset=17), 'get_lineno', Load(), lineno=132, col_offset=17), [], [], None, None, lineno=132, col_offset=17), lineno=132, col_offset=8), Assign([Name('for_output', Store(), lineno=133, col_offset=8)], Call(Attribute(Name('node', Load(), lineno=133, col_offset=21), 'clone', Load(), lineno=133, col_offset=21), [], [], None, None, lineno=133, col_offset=21), lineno=133, col_offset=8), Assign([Attribute(Name('for_output', Load(), lineno=134, col_offset=8), 'prefix', Store(), lineno=134, col_offset=8)], Str(u'', lineno=134, col_offset=28), lineno=134, col_offset=8), Assign([Name('msg', Store(), lineno=135, col_offset=8)], Str('Line %d: could not convert: %s', lineno=135, col_offset=14), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'log_message', Load(), lineno=136, col_offset=8), [BinOp(Name('msg', Load(), lineno=136, col_offset=25), Mod(), Tuple([Name('lineno', Load(), lineno=136, col_offset=32), Name('for_output', Load(), lineno=136, col_offset=40)], Load(), lineno=136, col_offset=32), lineno=136, col_offset=25)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), If(Name('reason', Load(), lineno=137, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'log_message', Load(), lineno=138, col_offset=12), [Name('reason', Load(), lineno=138, col_offset=29)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12)], [], lineno=137, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('warning', arguments([Name('self', Param(), lineno=140, col_offset=16), Name('node', Param(), lineno=140, col_offset=22), Name('reason', Param(), lineno=140, col_offset=28)], None, None, []), [Expr(Str("Used for warning the user about possible uncertainty in the\n        translation.\n\n        First argument is the top-level node for the code in question.\n        Optional second argument is why it can't be converted.\n        ", lineno=146, col_offset=-1), lineno=146, col_offset=-1), Assign([Name('lineno', Store(), lineno=147, col_offset=8)], Call(Attribute(Name('node', Load(), lineno=147, col_offset=17), 'get_lineno', Load(), lineno=147, col_offset=17), [], [], None, None, lineno=147, col_offset=17), lineno=147, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=8), 'log_message', Load(), lineno=148, col_offset=8), [BinOp(Str('Line %d: %s', lineno=148, col_offset=25), Mod(), Tuple([Name('lineno', Load(), lineno=148, col_offset=42), Name('reason', Load(), lineno=148, col_offset=50)], Load(), lineno=148, col_offset=42), lineno=148, col_offset=25)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8)], [], lineno=140, col_offset=4), FunctionDef('start_tree', arguments([Name('self', Param(), lineno=150, col_offset=19), Name('tree', Param(), lineno=150, col_offset=25), Name('filename', Param(), lineno=150, col_offset=31)], None, None, []), [Expr(Str('Some fixers need to maintain tree-wide state.\n        This method is called once, at the start of tree fix-up.\n\n        tree - the root node of the tree to be processed.\n        filename - the name of the file the tree came from.\n        ', lineno=156, col_offset=-1), lineno=156, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=157, col_offset=8), 'used_names', Store(), lineno=157, col_offset=8)], Attribute(Name('tree', Load(), lineno=157, col_offset=26), 'used_names', Load(), lineno=157, col_offset=26), lineno=157, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=158, col_offset=8), 'set_filename', Load(), lineno=158, col_offset=8), [Name('filename', Load(), lineno=158, col_offset=26)], [], None, None, lineno=158, col_offset=8), lineno=158, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=159, col_offset=8), 'numbers', Store(), lineno=159, col_offset=8)], Call(Attribute(Name('itertools', Load(), lineno=159, col_offset=23), 'count', Load(), lineno=159, col_offset=23), [Num(1, lineno=159, col_offset=39)], [], None, None, lineno=159, col_offset=23), lineno=159, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=160, col_offset=8), 'first_log', Store(), lineno=160, col_offset=8)], Name('True', Load(), lineno=160, col_offset=25), lineno=160, col_offset=8)], [], lineno=150, col_offset=4), FunctionDef('finish_tree', arguments([Name('self', Param(), lineno=162, col_offset=20), Name('tree', Param(), lineno=162, col_offset=26), Name('filename', Param(), lineno=162, col_offset=32)], None, None, []), [Expr(Str('Some fixers need to maintain tree-wide state.\n        This method is called once, at the conclusion of tree fix-up.\n\n        tree - the root node of the tree to be processed.\n        filename - the name of the file the tree came from.\n        ', lineno=168, col_offset=-1), lineno=168, col_offset=-1), Pass( lineno=169, col_offset=8)], [], lineno=162, col_offset=4)], [], lineno=15, col_offset=0), ClassDef('ConditionalFix', [Name('BaseFix', Load(), lineno=172, col_offset=21)], [Expr(Str(' Base class for fixers which not execute if an import is found. ', lineno=173, col_offset=4), lineno=173, col_offset=4), Assign([Name('skip_on', Store(), lineno=176, col_offset=4)], Name('None', Load(), lineno=176, col_offset=14), lineno=176, col_offset=4), FunctionDef('start_tree', arguments([Name('self', Param(), lineno=178, col_offset=19)], 'args', None, []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=179, col_offset=8), [Name('ConditionalFix', Load(), lineno=179, col_offset=14), Name('self', Load(), lineno=179, col_offset=30)], [], None, None, lineno=179, col_offset=8), 'start_tree', Load(), lineno=179, col_offset=8), [], [], Name('args', Load(), lineno=179, col_offset=48), None, lineno=179, col_offset=8), lineno=179, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=180, col_offset=8), '_should_skip', Store(), lineno=180, col_offset=8)], Name('None', Load(), lineno=180, col_offset=28), lineno=180, col_offset=8)], [], lineno=178, col_offset=4), FunctionDef('should_skip', arguments([Name('self', Param(), lineno=182, col_offset=20), Name('node', Param(), lineno=182, col_offset=26)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=183, col_offset=11), '_should_skip', Load(), lineno=183, col_offset=11), [IsNot()], [Name('None', Load(), lineno=183, col_offset=36)], lineno=183, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=184, col_offset=19), '_should_skip', Load(), lineno=184, col_offset=19), lineno=184, col_offset=12)], [], lineno=183, col_offset=8), Assign([Name('pkg', Store(), lineno=185, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=185, col_offset=14), 'skip_on', Load(), lineno=185, col_offset=14), 'split', Load(), lineno=185, col_offset=14), [Str('.', lineno=185, col_offset=33)], [], None, None, lineno=185, col_offset=14), lineno=185, col_offset=8), Assign([Name('name', Store(), lineno=186, col_offset=8)], Subscript(Name('pkg', Load(), lineno=186, col_offset=15), Index(Num(-1, lineno=186, col_offset=20)), Load(), lineno=186, col_offset=15), lineno=186, col_offset=8), Assign([Name('pkg', Store(), lineno=187, col_offset=8)], Call(Attribute(Str('.', lineno=187, col_offset=14), 'join', Load(), lineno=187, col_offset=14), [Subscript(Name('pkg', Load(), lineno=187, col_offset=23), Slice(None, Num(-1, lineno=187, col_offset=29), None), Load(), lineno=187, col_offset=23)], [], None, None, lineno=187, col_offset=14), lineno=187, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=188, col_offset=8), '_should_skip', Store(), lineno=188, col_offset=8)], Call(Name('does_tree_import', Load(), lineno=188, col_offset=28), [Name('pkg', Load(), lineno=188, col_offset=45), Name('name', Load(), lineno=188, col_offset=50), Name('node', Load(), lineno=188, col_offset=56)], [], None, None, lineno=188, col_offset=28), lineno=188, col_offset=8), Return(Attribute(Name('self', Load(), lineno=189, col_offset=15), '_should_skip', Load(), lineno=189, col_offset=15), lineno=189, col_offset=8)], [], lineno=182, col_offset=4)], [], lineno=172, col_offset=0)])
