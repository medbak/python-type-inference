Module([Expr(Str('Rational, infinite-precision, real numbers.', lineno=4, col_offset=0), lineno=4, col_offset=0), ImportFrom('__future__', [alias('division', None)], 0, lineno=6, col_offset=0), ImportFrom('decimal', [alias('Decimal', None)], 0, lineno=7, col_offset=0), Import([alias('math', None)], lineno=8, col_offset=0), Import([alias('numbers', None)], lineno=9, col_offset=0), Import([alias('operator', None)], lineno=10, col_offset=0), Import([alias('re', None)], lineno=11, col_offset=0), Assign([Name('__all__', Store(), lineno=13, col_offset=0)], List([Str('Fraction', lineno=13, col_offset=11), Str('gcd', lineno=13, col_offset=23)], Load(), lineno=13, col_offset=10), lineno=13, col_offset=0), Assign([Name('Rational', Store(), lineno=15, col_offset=0)], Attribute(Name('numbers', Load(), lineno=15, col_offset=11), 'Rational', Load(), lineno=15, col_offset=11), lineno=15, col_offset=0), FunctionDef('gcd', arguments([Name('a', Param(), lineno=18, col_offset=8), Name('b', Param(), lineno=18, col_offset=11)], None, None, []), [Expr(Str('Calculate the Greatest Common Divisor of a and b.\n\n    Unless b==0, the result will have the same sign as b (so that when\n    b is divided by it, the result comes out positive).\n    ', lineno=23, col_offset=-1), lineno=23, col_offset=-1), While(Name('b', Load(), lineno=24, col_offset=10), [Assign([Tuple([Name('a', Store(), lineno=25, col_offset=8), Name('b', Store(), lineno=25, col_offset=11)], Store(), lineno=25, col_offset=8)], Tuple([Name('b', Load(), lineno=25, col_offset=15), BinOp(Name('a', Load(), lineno=25, col_offset=18), Mod(), Name('b', Load(), lineno=25, col_offset=20), lineno=25, col_offset=18)], Load(), lineno=25, col_offset=15), lineno=25, col_offset=8)], [], lineno=24, col_offset=4), Return(Name('a', Load(), lineno=26, col_offset=11), lineno=26, col_offset=4)], [], lineno=18, col_offset=0), Assign([Name('_RATIONAL_FORMAT', Store(), lineno=29, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=29, col_offset=19), 'compile', Load(), lineno=29, col_offset=19), [Str('\n    \\A\\s*                      # optional whitespace at the start, then\n    (?P<sign>[-+]?)            # an optional sign, then\n    (?=\\d|\\.\\d)                # lookahead for digit or .digit\n    (?P<num>\\d*)               # numerator (possibly empty)\n    (?:                        # followed by\n       (?:/(?P<denom>\\d+))?    # an optional denominator\n    |                          # or\n       (?:\\.(?P<decimal>\\d*))? # an optional fractional part\n       (?:E(?P<exp>[-+]?\\d+))? # and optional exponent\n    )\n    \\s*\\Z                      # and optional whitespace to finish\n', lineno=41, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=41, col_offset=5), 'VERBOSE', Load(), lineno=41, col_offset=5), BitOr(), Attribute(Name('re', Load(), lineno=41, col_offset=18), 'IGNORECASE', Load(), lineno=41, col_offset=18), lineno=41, col_offset=5)], [], None, None, lineno=29, col_offset=19), lineno=29, col_offset=0), ClassDef('Fraction', [Name('Rational', Load(), lineno=44, col_offset=15)], [Expr(Str("This class implements rational numbers.\n\n    In the two-argument form of the constructor, Fraction(8, 6) will\n    produce a rational number equivalent to 4/3. Both arguments must\n    be Rational. The numerator defaults to 0 and the denominator\n    defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.\n\n    Fractions can also be constructed from:\n\n      - numeric strings similar to those accepted by the\n        float constructor (for example, '-2.3' or '1e10')\n\n      - strings of the form '123/456'\n\n      - float and Decimal instances\n\n      - other Rational instances (including integers)\n\n    ", lineno=63, col_offset=-1), lineno=63, col_offset=-1), Assign([Name('__slots__', Store(), lineno=65, col_offset=4)], Tuple([Str('_numerator', lineno=65, col_offset=17), Str('_denominator', lineno=65, col_offset=31)], Load(), lineno=65, col_offset=17), lineno=65, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=68, col_offset=16), Name('numerator', Param(), lineno=68, col_offset=21), Name('denominator', Param(), lineno=68, col_offset=34)], None, None, [Num(0, lineno=68, col_offset=31), Name('None', Load(), lineno=68, col_offset=46)]), [Expr(Str("Constructs a Fraction.\n\n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n\n        Examples\n        --------\n\n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n\n        ", lineno=98, col_offset=-1), lineno=98, col_offset=-1), Assign([Name('self', Store(), lineno=99, col_offset=8)], Call(Attribute(Call(Name('super', Load(), lineno=99, col_offset=15), [Name('Fraction', Load(), lineno=99, col_offset=21), Name('cls', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=15), '__new__', Load(), lineno=99, col_offset=15), [Name('cls', Load(), lineno=99, col_offset=44)], [], None, None, lineno=99, col_offset=15), lineno=99, col_offset=8), If(Compare(Name('denominator', Load(), lineno=101, col_offset=11), [Is()], [Name('None', Load(), lineno=101, col_offset=26)], lineno=101, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=102, col_offset=15), [Name('numerator', Load(), lineno=102, col_offset=26), Name('Rational', Load(), lineno=102, col_offset=37)], [], None, None, lineno=102, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=103, col_offset=16), '_numerator', Store(), lineno=103, col_offset=16)], Attribute(Name('numerator', Load(), lineno=103, col_offset=34), 'numerator', Load(), lineno=103, col_offset=34), lineno=103, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=104, col_offset=16), '_denominator', Store(), lineno=104, col_offset=16)], Attribute(Name('numerator', Load(), lineno=104, col_offset=36), 'denominator', Load(), lineno=104, col_offset=36), lineno=104, col_offset=16), Return(Name('self', Load(), lineno=105, col_offset=23), lineno=105, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=107, col_offset=17), [Name('numerator', Load(), lineno=107, col_offset=28), Name('float', Load(), lineno=107, col_offset=39)], [], None, None, lineno=107, col_offset=17), [Assign([Name('value', Store(), lineno=109, col_offset=16)], Call(Attribute(Name('Fraction', Load(), lineno=109, col_offset=24), 'from_float', Load(), lineno=109, col_offset=24), [Name('numerator', Load(), lineno=109, col_offset=44)], [], None, None, lineno=109, col_offset=24), lineno=109, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=110, col_offset=16), '_numerator', Store(), lineno=110, col_offset=16)], Attribute(Name('value', Load(), lineno=110, col_offset=34), '_numerator', Load(), lineno=110, col_offset=34), lineno=110, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=111, col_offset=16), '_denominator', Store(), lineno=111, col_offset=16)], Attribute(Name('value', Load(), lineno=111, col_offset=36), '_denominator', Load(), lineno=111, col_offset=36), lineno=111, col_offset=16), Return(Name('self', Load(), lineno=112, col_offset=23), lineno=112, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=114, col_offset=17), [Name('numerator', Load(), lineno=114, col_offset=28), Name('Decimal', Load(), lineno=114, col_offset=39)], [], None, None, lineno=114, col_offset=17), [Assign([Name('value', Store(), lineno=115, col_offset=16)], Call(Attribute(Name('Fraction', Load(), lineno=115, col_offset=24), 'from_decimal', Load(), lineno=115, col_offset=24), [Name('numerator', Load(), lineno=115, col_offset=46)], [], None, None, lineno=115, col_offset=24), lineno=115, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=116, col_offset=16), '_numerator', Store(), lineno=116, col_offset=16)], Attribute(Name('value', Load(), lineno=116, col_offset=34), '_numerator', Load(), lineno=116, col_offset=34), lineno=116, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=117, col_offset=16), '_denominator', Store(), lineno=117, col_offset=16)], Attribute(Name('value', Load(), lineno=117, col_offset=36), '_denominator', Load(), lineno=117, col_offset=36), lineno=117, col_offset=16), Return(Name('self', Load(), lineno=118, col_offset=23), lineno=118, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=120, col_offset=17), [Name('numerator', Load(), lineno=120, col_offset=28), Name('basestring', Load(), lineno=120, col_offset=39)], [], None, None, lineno=120, col_offset=17), [Assign([Name('m', Store(), lineno=122, col_offset=16)], Call(Attribute(Name('_RATIONAL_FORMAT', Load(), lineno=122, col_offset=20), 'match', Load(), lineno=122, col_offset=20), [Name('numerator', Load(), lineno=122, col_offset=43)], [], None, None, lineno=122, col_offset=20), lineno=122, col_offset=16), If(Compare(Name('m', Load(), lineno=123, col_offset=19), [Is()], [Name('None', Load(), lineno=123, col_offset=24)], lineno=123, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=124, col_offset=26), [BinOp(Str('Invalid literal for Fraction: %r', lineno=124, col_offset=37), Mod(), Name('numerator', Load(), lineno=125, col_offset=37), lineno=124, col_offset=37)], [], None, None, lineno=124, col_offset=26), None, None, lineno=124, col_offset=20)], [], lineno=123, col_offset=16), Assign([Name('numerator', Store(), lineno=126, col_offset=16)], Call(Name('int', Load(), lineno=126, col_offset=28), [BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=126, col_offset=32), 'group', Load(), lineno=126, col_offset=32), [Str('num', lineno=126, col_offset=40)], [], None, None, lineno=126, col_offset=32), Str('0', lineno=126, col_offset=50)], lineno=126, col_offset=32)], [], None, None, lineno=126, col_offset=28), lineno=126, col_offset=16), Assign([Name('denom', Store(), lineno=127, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=127, col_offset=24), 'group', Load(), lineno=127, col_offset=24), [Str('denom', lineno=127, col_offset=32)], [], None, None, lineno=127, col_offset=24), lineno=127, col_offset=16), If(Name('denom', Load(), lineno=128, col_offset=19), [Assign([Name('denominator', Store(), lineno=129, col_offset=20)], Call(Name('int', Load(), lineno=129, col_offset=34), [Name('denom', Load(), lineno=129, col_offset=38)], [], None, None, lineno=129, col_offset=34), lineno=129, col_offset=20)], [Assign([Name('denominator', Store(), lineno=131, col_offset=20)], Num(1, lineno=131, col_offset=34), lineno=131, col_offset=20), Assign([Name('decimal', Store(), lineno=132, col_offset=20)], Call(Attribute(Name('m', Load(), lineno=132, col_offset=30), 'group', Load(), lineno=132, col_offset=30), [Str('decimal', lineno=132, col_offset=38)], [], None, None, lineno=132, col_offset=30), lineno=132, col_offset=20), If(Name('decimal', Load(), lineno=133, col_offset=23), [Assign([Name('scale', Store(), lineno=134, col_offset=24)], BinOp(Num(10, lineno=134, col_offset=32), Pow(), Call(Name('len', Load(), lineno=134, col_offset=36), [Name('decimal', Load(), lineno=134, col_offset=40)], [], None, None, lineno=134, col_offset=36), lineno=134, col_offset=32), lineno=134, col_offset=24), Assign([Name('numerator', Store(), lineno=135, col_offset=24)], BinOp(BinOp(Name('numerator', Load(), lineno=135, col_offset=36), Mult(), Name('scale', Load(), lineno=135, col_offset=48), lineno=135, col_offset=36), Add(), Call(Name('int', Load(), lineno=135, col_offset=56), [Name('decimal', Load(), lineno=135, col_offset=60)], [], None, None, lineno=135, col_offset=56), lineno=135, col_offset=36), lineno=135, col_offset=24), AugAssign(Name('denominator', Store(), lineno=136, col_offset=24), Mult(), Name('scale', Load(), lineno=136, col_offset=39), lineno=136, col_offset=24)], [], lineno=133, col_offset=20), Assign([Name('exp', Store(), lineno=137, col_offset=20)], Call(Attribute(Name('m', Load(), lineno=137, col_offset=26), 'group', Load(), lineno=137, col_offset=26), [Str('exp', lineno=137, col_offset=34)], [], None, None, lineno=137, col_offset=26), lineno=137, col_offset=20), If(Name('exp', Load(), lineno=138, col_offset=23), [Assign([Name('exp', Store(), lineno=139, col_offset=24)], Call(Name('int', Load(), lineno=139, col_offset=30), [Name('exp', Load(), lineno=139, col_offset=34)], [], None, None, lineno=139, col_offset=30), lineno=139, col_offset=24), If(Compare(Name('exp', Load(), lineno=140, col_offset=27), [GtE()], [Num(0, lineno=140, col_offset=34)], lineno=140, col_offset=27), [AugAssign(Name('numerator', Store(), lineno=141, col_offset=28), Mult(), BinOp(Num(10, lineno=141, col_offset=41), Pow(), Name('exp', Load(), lineno=141, col_offset=45), lineno=141, col_offset=41), lineno=141, col_offset=28)], [AugAssign(Name('denominator', Store(), lineno=143, col_offset=28), Mult(), BinOp(Num(10, lineno=143, col_offset=43), Pow(), UnaryOp(USub(), Name('exp', Load(), lineno=143, col_offset=48), lineno=143, col_offset=47), lineno=143, col_offset=43), lineno=143, col_offset=28)], lineno=140, col_offset=24)], [], lineno=138, col_offset=20)], lineno=128, col_offset=16), If(Compare(Call(Attribute(Name('m', Load(), lineno=144, col_offset=19), 'group', Load(), lineno=144, col_offset=19), [Str('sign', lineno=144, col_offset=27)], [], None, None, lineno=144, col_offset=19), [Eq()], [Str('-', lineno=144, col_offset=38)], lineno=144, col_offset=19), [Assign([Name('numerator', Store(), lineno=145, col_offset=20)], UnaryOp(USub(), Name('numerator', Load(), lineno=145, col_offset=33), lineno=145, col_offset=32), lineno=145, col_offset=20)], [], lineno=144, col_offset=16)], [Raise(Call(Name('TypeError', Load(), lineno=148, col_offset=22), [Str('argument should be a string or a Rational instance', lineno=148, col_offset=32)], [], None, None, lineno=148, col_offset=22), None, None, lineno=148, col_offset=16)], lineno=120, col_offset=17)], lineno=114, col_offset=17)], lineno=107, col_offset=17)], lineno=102, col_offset=12)], [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=151, col_offset=14), [Name('numerator', Load(), lineno=151, col_offset=25), Name('Rational', Load(), lineno=151, col_offset=36)], [], None, None, lineno=151, col_offset=14), Call(Name('isinstance', Load(), lineno=152, col_offset=12), [Name('denominator', Load(), lineno=152, col_offset=23), Name('Rational', Load(), lineno=152, col_offset=36)], [], None, None, lineno=152, col_offset=12)], lineno=151, col_offset=14), [Assign([Tuple([Name('numerator', Store(), lineno=153, col_offset=12), Name('denominator', Store(), lineno=153, col_offset=23)], Store(), lineno=153, col_offset=12)], Tuple([BinOp(Attribute(Name('numerator', Load(), lineno=154, col_offset=16), 'numerator', Load(), lineno=154, col_offset=16), Mult(), Attribute(Name('denominator', Load(), lineno=154, col_offset=38), 'denominator', Load(), lineno=154, col_offset=38), lineno=154, col_offset=16), BinOp(Attribute(Name('denominator', Load(), lineno=155, col_offset=16), 'numerator', Load(), lineno=155, col_offset=16), Mult(), Attribute(Name('numerator', Load(), lineno=155, col_offset=40), 'denominator', Load(), lineno=155, col_offset=40), lineno=155, col_offset=16)], Load(), lineno=154, col_offset=16), lineno=153, col_offset=12)], [Raise(Call(Name('TypeError', Load(), lineno=158, col_offset=18), [Str('both arguments should be Rational instances', lineno=158, col_offset=28)], [], None, None, lineno=158, col_offset=18), None, None, lineno=158, col_offset=12)], lineno=151, col_offset=13)], lineno=101, col_offset=8), If(Compare(Name('denominator', Load(), lineno=161, col_offset=11), [Eq()], [Num(0, lineno=161, col_offset=26)], lineno=161, col_offset=11), [Raise(Call(Name('ZeroDivisionError', Load(), lineno=162, col_offset=18), [BinOp(Str('Fraction(%s, 0)', lineno=162, col_offset=36), Mod(), Name('numerator', Load(), lineno=162, col_offset=56), lineno=162, col_offset=36)], [], None, None, lineno=162, col_offset=18), None, None, lineno=162, col_offset=12)], [], lineno=161, col_offset=8), Assign([Name('g', Store(), lineno=163, col_offset=8)], Call(Name('gcd', Load(), lineno=163, col_offset=12), [Name('numerator', Load(), lineno=163, col_offset=16), Name('denominator', Load(), lineno=163, col_offset=27)], [], None, None, lineno=163, col_offset=12), lineno=163, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=164, col_offset=8), '_numerator', Store(), lineno=164, col_offset=8)], BinOp(Name('numerator', Load(), lineno=164, col_offset=26), FloorDiv(), Name('g', Load(), lineno=164, col_offset=39), lineno=164, col_offset=26), lineno=164, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=165, col_offset=8), '_denominator', Store(), lineno=165, col_offset=8)], BinOp(Name('denominator', Load(), lineno=165, col_offset=28), FloorDiv(), Name('g', Load(), lineno=165, col_offset=43), lineno=165, col_offset=28), lineno=165, col_offset=8), Return(Name('self', Load(), lineno=166, col_offset=15), lineno=166, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('from_float', arguments([Name('cls', Param(), lineno=169, col_offset=19), Name('f', Param(), lineno=169, col_offset=24)], None, None, []), [Expr(Str('Converts a finite float to a rational number, exactly.\n\n        Beware that Fraction.from_float(0.3) != Fraction(3, 10).\n\n        ', lineno=174, col_offset=-1), lineno=174, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=175, col_offset=11), [Name('f', Load(), lineno=175, col_offset=22), Attribute(Name('numbers', Load(), lineno=175, col_offset=25), 'Integral', Load(), lineno=175, col_offset=25)], [], None, None, lineno=175, col_offset=11), [Return(Call(Name('cls', Load(), lineno=176, col_offset=19), [Name('f', Load(), lineno=176, col_offset=23)], [], None, None, lineno=176, col_offset=19), lineno=176, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=177, col_offset=17), [Name('f', Load(), lineno=177, col_offset=28), Name('float', Load(), lineno=177, col_offset=31)], [], None, None, lineno=177, col_offset=17), lineno=177, col_offset=13), [Raise(Call(Name('TypeError', Load(), lineno=178, col_offset=18), [BinOp(Str('%s.from_float() only takes floats, not %r (%s)', lineno=178, col_offset=28), Mod(), Tuple([Attribute(Name('cls', Load(), lineno=179, col_offset=29), '__name__', Load(), lineno=179, col_offset=29), Name('f', Load(), lineno=179, col_offset=43), Attribute(Call(Name('type', Load(), lineno=179, col_offset=46), [Name('f', Load(), lineno=179, col_offset=51)], [], None, None, lineno=179, col_offset=46), '__name__', Load(), lineno=179, col_offset=46)], Load(), lineno=179, col_offset=29), lineno=178, col_offset=28)], [], None, None, lineno=178, col_offset=18), None, None, lineno=178, col_offset=12)], [], lineno=177, col_offset=13)], lineno=175, col_offset=8), If(BoolOp(Or(), [Call(Attribute(Name('math', Load(), lineno=180, col_offset=11), 'isnan', Load(), lineno=180, col_offset=11), [Name('f', Load(), lineno=180, col_offset=22)], [], None, None, lineno=180, col_offset=11), Call(Attribute(Name('math', Load(), lineno=180, col_offset=28), 'isinf', Load(), lineno=180, col_offset=28), [Name('f', Load(), lineno=180, col_offset=39)], [], None, None, lineno=180, col_offset=28)], lineno=180, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=181, col_offset=18), [BinOp(Str('Cannot convert %r to %s.', lineno=181, col_offset=28), Mod(), Tuple([Name('f', Load(), lineno=181, col_offset=58), Attribute(Name('cls', Load(), lineno=181, col_offset=61), '__name__', Load(), lineno=181, col_offset=61)], Load(), lineno=181, col_offset=58), lineno=181, col_offset=28)], [], None, None, lineno=181, col_offset=18), None, None, lineno=181, col_offset=12)], [], lineno=180, col_offset=8), Return(Call(Name('cls', Load(), lineno=182, col_offset=15), [], [], Call(Attribute(Name('f', Load(), lineno=182, col_offset=20), 'as_integer_ratio', Load(), lineno=182, col_offset=20), [], [], None, None, lineno=182, col_offset=20), None, lineno=182, col_offset=15), lineno=182, col_offset=8)], [Name('classmethod', Load(), lineno=168, col_offset=5)], lineno=168, col_offset=4), FunctionDef('from_decimal', arguments([Name('cls', Param(), lineno=185, col_offset=21), Name('dec', Param(), lineno=185, col_offset=26)], None, None, []), [Expr(Str('Converts a finite Decimal instance to a rational number, exactly.', lineno=186, col_offset=8), lineno=186, col_offset=8), ImportFrom('decimal', [alias('Decimal', None)], 0, lineno=187, col_offset=8), If(Call(Name('isinstance', Load(), lineno=188, col_offset=11), [Name('dec', Load(), lineno=188, col_offset=22), Attribute(Name('numbers', Load(), lineno=188, col_offset=27), 'Integral', Load(), lineno=188, col_offset=27)], [], None, None, lineno=188, col_offset=11), [Assign([Name('dec', Store(), lineno=189, col_offset=12)], Call(Name('Decimal', Load(), lineno=189, col_offset=18), [Call(Name('int', Load(), lineno=189, col_offset=26), [Name('dec', Load(), lineno=189, col_offset=30)], [], None, None, lineno=189, col_offset=26)], [], None, None, lineno=189, col_offset=18), lineno=189, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=190, col_offset=17), [Name('dec', Load(), lineno=190, col_offset=28), Name('Decimal', Load(), lineno=190, col_offset=33)], [], None, None, lineno=190, col_offset=17), lineno=190, col_offset=13), [Raise(Call(Name('TypeError', Load(), lineno=191, col_offset=18), [BinOp(Str('%s.from_decimal() only takes Decimals, not %r (%s)', lineno=192, col_offset=16), Mod(), Tuple([Attribute(Name('cls', Load(), lineno=193, col_offset=17), '__name__', Load(), lineno=193, col_offset=17), Name('dec', Load(), lineno=193, col_offset=31), Attribute(Call(Name('type', Load(), lineno=193, col_offset=36), [Name('dec', Load(), lineno=193, col_offset=41)], [], None, None, lineno=193, col_offset=36), '__name__', Load(), lineno=193, col_offset=36)], Load(), lineno=193, col_offset=17), lineno=192, col_offset=16)], [], None, None, lineno=191, col_offset=18), None, None, lineno=191, col_offset=12)], [], lineno=190, col_offset=13)], lineno=188, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('dec', Load(), lineno=194, col_offset=15), 'is_finite', Load(), lineno=194, col_offset=15), [], [], None, None, lineno=194, col_offset=15), lineno=194, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=196, col_offset=18), [BinOp(Str('Cannot convert %s to %s.', lineno=196, col_offset=28), Mod(), Tuple([Name('dec', Load(), lineno=196, col_offset=58), Attribute(Name('cls', Load(), lineno=196, col_offset=63), '__name__', Load(), lineno=196, col_offset=63)], Load(), lineno=196, col_offset=58), lineno=196, col_offset=28)], [], None, None, lineno=196, col_offset=18), None, None, lineno=196, col_offset=12)], [], lineno=194, col_offset=8), Assign([Tuple([Name('sign', Store(), lineno=197, col_offset=8), Name('digits', Store(), lineno=197, col_offset=14), Name('exp', Store(), lineno=197, col_offset=22)], Store(), lineno=197, col_offset=8)], Call(Attribute(Name('dec', Load(), lineno=197, col_offset=28), 'as_tuple', Load(), lineno=197, col_offset=28), [], [], None, None, lineno=197, col_offset=28), lineno=197, col_offset=8), Assign([Name('digits', Store(), lineno=198, col_offset=8)], Call(Name('int', Load(), lineno=198, col_offset=17), [Call(Attribute(Str('', lineno=198, col_offset=21), 'join', Load(), lineno=198, col_offset=21), [Call(Name('map', Load(), lineno=198, col_offset=29), [Name('str', Load(), lineno=198, col_offset=33), Name('digits', Load(), lineno=198, col_offset=38)], [], None, None, lineno=198, col_offset=29)], [], None, None, lineno=198, col_offset=21)], [], None, None, lineno=198, col_offset=17), lineno=198, col_offset=8), If(Name('sign', Load(), lineno=199, col_offset=11), [Assign([Name('digits', Store(), lineno=200, col_offset=12)], UnaryOp(USub(), Name('digits', Load(), lineno=200, col_offset=22), lineno=200, col_offset=21), lineno=200, col_offset=12)], [], lineno=199, col_offset=8), If(Compare(Name('exp', Load(), lineno=201, col_offset=11), [GtE()], [Num(0, lineno=201, col_offset=18)], lineno=201, col_offset=11), [Return(Call(Name('cls', Load(), lineno=202, col_offset=19), [BinOp(Name('digits', Load(), lineno=202, col_offset=23), Mult(), BinOp(Num(10, lineno=202, col_offset=32), Pow(), Name('exp', Load(), lineno=202, col_offset=38), lineno=202, col_offset=32), lineno=202, col_offset=23)], [], None, None, lineno=202, col_offset=19), lineno=202, col_offset=12)], [Return(Call(Name('cls', Load(), lineno=204, col_offset=19), [Name('digits', Load(), lineno=204, col_offset=23), BinOp(Num(10, lineno=204, col_offset=31), Pow(), UnaryOp(USub(), Name('exp', Load(), lineno=204, col_offset=38), lineno=204, col_offset=37), lineno=204, col_offset=31)], [], None, None, lineno=204, col_offset=19), lineno=204, col_offset=12)], lineno=201, col_offset=8)], [Name('classmethod', Load(), lineno=184, col_offset=5)], lineno=184, col_offset=4), FunctionDef('limit_denominator', arguments([Name('self', Param(), lineno=206, col_offset=26), Name('max_denominator', Param(), lineno=206, col_offset=32)], None, None, [Num(1000000, lineno=206, col_offset=48)]), [Expr(Str("Closest Fraction to self with denominator at most max_denominator.\n\n        >>> Fraction('3.141592653589793').limit_denominator(10)\n        Fraction(22, 7)\n        >>> Fraction('3.141592653589793').limit_denominator(100)\n        Fraction(311, 99)\n        >>> Fraction(4321, 8765).limit_denominator(10000)\n        Fraction(4321, 8765)\n\n        ", lineno=216, col_offset=-1), lineno=216, col_offset=-1), If(Compare(Name('max_denominator', Load(), lineno=238, col_offset=11), [Lt()], [Num(1, lineno=238, col_offset=29)], lineno=238, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=239, col_offset=18), [Str('max_denominator should be at least 1', lineno=239, col_offset=29)], [], None, None, lineno=239, col_offset=18), None, None, lineno=239, col_offset=12)], [], lineno=238, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=240, col_offset=11), '_denominator', Load(), lineno=240, col_offset=11), [LtE()], [Name('max_denominator', Load(), lineno=240, col_offset=32)], lineno=240, col_offset=11), [Return(Call(Name('Fraction', Load(), lineno=241, col_offset=19), [Name('self', Load(), lineno=241, col_offset=28)], [], None, None, lineno=241, col_offset=19), lineno=241, col_offset=12)], [], lineno=240, col_offset=8), Assign([Tuple([Name('p0', Store(), lineno=243, col_offset=8), Name('q0', Store(), lineno=243, col_offset=12), Name('p1', Store(), lineno=243, col_offset=16), Name('q1', Store(), lineno=243, col_offset=20)], Store(), lineno=243, col_offset=8)], Tuple([Num(0, lineno=243, col_offset=25), Num(1, lineno=243, col_offset=28), Num(1, lineno=243, col_offset=31), Num(0, lineno=243, col_offset=34)], Load(), lineno=243, col_offset=25), lineno=243, col_offset=8), Assign([Tuple([Name('n', Store(), lineno=244, col_offset=8), Name('d', Store(), lineno=244, col_offset=11)], Store(), lineno=244, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=244, col_offset=15), '_numerator', Load(), lineno=244, col_offset=15), Attribute(Name('self', Load(), lineno=244, col_offset=32), '_denominator', Load(), lineno=244, col_offset=32)], Load(), lineno=244, col_offset=15), lineno=244, col_offset=8), While(Name('True', Load(), lineno=245, col_offset=14), [Assign([Name('a', Store(), lineno=246, col_offset=12)], BinOp(Name('n', Load(), lineno=246, col_offset=16), FloorDiv(), Name('d', Load(), lineno=246, col_offset=19), lineno=246, col_offset=16), lineno=246, col_offset=12), Assign([Name('q2', Store(), lineno=247, col_offset=12)], BinOp(Name('q0', Load(), lineno=247, col_offset=17), Add(), BinOp(Name('a', Load(), lineno=247, col_offset=20), Mult(), Name('q1', Load(), lineno=247, col_offset=22), lineno=247, col_offset=20), lineno=247, col_offset=17), lineno=247, col_offset=12), If(Compare(Name('q2', Load(), lineno=248, col_offset=15), [Gt()], [Name('max_denominator', Load(), lineno=248, col_offset=20)], lineno=248, col_offset=15), [Break( lineno=249, col_offset=16)], [], lineno=248, col_offset=12), Assign([Tuple([Name('p0', Store(), lineno=250, col_offset=12), Name('q0', Store(), lineno=250, col_offset=16), Name('p1', Store(), lineno=250, col_offset=20), Name('q1', Store(), lineno=250, col_offset=24)], Store(), lineno=250, col_offset=12)], Tuple([Name('p1', Load(), lineno=250, col_offset=29), Name('q1', Load(), lineno=250, col_offset=33), BinOp(Name('p0', Load(), lineno=250, col_offset=37), Add(), BinOp(Name('a', Load(), lineno=250, col_offset=40), Mult(), Name('p1', Load(), lineno=250, col_offset=42), lineno=250, col_offset=40), lineno=250, col_offset=37), Name('q2', Load(), lineno=250, col_offset=46)], Load(), lineno=250, col_offset=29), lineno=250, col_offset=12), Assign([Tuple([Name('n', Store(), lineno=251, col_offset=12), Name('d', Store(), lineno=251, col_offset=15)], Store(), lineno=251, col_offset=12)], Tuple([Name('d', Load(), lineno=251, col_offset=19), BinOp(Name('n', Load(), lineno=251, col_offset=22), Sub(), BinOp(Name('a', Load(), lineno=251, col_offset=24), Mult(), Name('d', Load(), lineno=251, col_offset=26), lineno=251, col_offset=24), lineno=251, col_offset=22)], Load(), lineno=251, col_offset=19), lineno=251, col_offset=12)], [], lineno=245, col_offset=8), Assign([Name('k', Store(), lineno=253, col_offset=8)], BinOp(BinOp(Name('max_denominator', Load(), lineno=253, col_offset=13), Sub(), Name('q0', Load(), lineno=253, col_offset=29), lineno=253, col_offset=13), FloorDiv(), Name('q1', Load(), lineno=253, col_offset=34), lineno=253, col_offset=12), lineno=253, col_offset=8), Assign([Name('bound1', Store(), lineno=254, col_offset=8)], Call(Name('Fraction', Load(), lineno=254, col_offset=17), [BinOp(Name('p0', Load(), lineno=254, col_offset=26), Add(), BinOp(Name('k', Load(), lineno=254, col_offset=29), Mult(), Name('p1', Load(), lineno=254, col_offset=31), lineno=254, col_offset=29), lineno=254, col_offset=26), BinOp(Name('q0', Load(), lineno=254, col_offset=35), Add(), BinOp(Name('k', Load(), lineno=254, col_offset=38), Mult(), Name('q1', Load(), lineno=254, col_offset=40), lineno=254, col_offset=38), lineno=254, col_offset=35)], [], None, None, lineno=254, col_offset=17), lineno=254, col_offset=8), Assign([Name('bound2', Store(), lineno=255, col_offset=8)], Call(Name('Fraction', Load(), lineno=255, col_offset=17), [Name('p1', Load(), lineno=255, col_offset=26), Name('q1', Load(), lineno=255, col_offset=30)], [], None, None, lineno=255, col_offset=17), lineno=255, col_offset=8), If(Compare(Call(Name('abs', Load(), lineno=256, col_offset=11), [BinOp(Name('bound2', Load(), lineno=256, col_offset=15), Sub(), Name('self', Load(), lineno=256, col_offset=24), lineno=256, col_offset=15)], [], None, None, lineno=256, col_offset=11), [LtE()], [Call(Name('abs', Load(), lineno=256, col_offset=33), [BinOp(Name('bound1', Load(), lineno=256, col_offset=37), Sub(), Name('self', Load(), lineno=256, col_offset=44), lineno=256, col_offset=37)], [], None, None, lineno=256, col_offset=33)], lineno=256, col_offset=11), [Return(Name('bound2', Load(), lineno=257, col_offset=19), lineno=257, col_offset=12)], [Return(Name('bound1', Load(), lineno=259, col_offset=19), lineno=259, col_offset=12)], lineno=256, col_offset=8)], [], lineno=206, col_offset=4), FunctionDef('numerator', arguments([Name('a', Param(), lineno=262, col_offset=18)], None, None, []), [Return(Attribute(Name('a', Load(), lineno=263, col_offset=15), '_numerator', Load(), lineno=263, col_offset=15), lineno=263, col_offset=8)], [Name('property', Load(), lineno=261, col_offset=5)], lineno=261, col_offset=4), FunctionDef('denominator', arguments([Name('a', Param(), lineno=266, col_offset=20)], None, None, []), [Return(Attribute(Name('a', Load(), lineno=267, col_offset=15), '_denominator', Load(), lineno=267, col_offset=15), lineno=267, col_offset=8)], [Name('property', Load(), lineno=265, col_offset=5)], lineno=265, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=269, col_offset=17)], None, None, []), [Expr(Str('repr(self)', lineno=270, col_offset=8), lineno=270, col_offset=8), Return(BinOp(Str('Fraction(%s, %s)', lineno=271, col_offset=16), Mod(), Tuple([Attribute(Name('self', Load(), lineno=271, col_offset=38), '_numerator', Load(), lineno=271, col_offset=38), Attribute(Name('self', Load(), lineno=271, col_offset=55), '_denominator', Load(), lineno=271, col_offset=55)], Load(), lineno=271, col_offset=38), lineno=271, col_offset=16), lineno=271, col_offset=8)], [], lineno=269, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=273, col_offset=16)], None, None, []), [Expr(Str('str(self)', lineno=274, col_offset=8), lineno=274, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=275, col_offset=11), '_denominator', Load(), lineno=275, col_offset=11), [Eq()], [Num(1, lineno=275, col_offset=32)], lineno=275, col_offset=11), [Return(Call(Name('str', Load(), lineno=276, col_offset=19), [Attribute(Name('self', Load(), lineno=276, col_offset=23), '_numerator', Load(), lineno=276, col_offset=23)], [], None, None, lineno=276, col_offset=19), lineno=276, col_offset=12)], [Return(BinOp(Str('%s/%s', lineno=278, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=278, col_offset=30), '_numerator', Load(), lineno=278, col_offset=30), Attribute(Name('self', Load(), lineno=278, col_offset=47), '_denominator', Load(), lineno=278, col_offset=47)], Load(), lineno=278, col_offset=30), lineno=278, col_offset=19), lineno=278, col_offset=12)], lineno=275, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('_operator_fallbacks', arguments([Name('monomorphic_operator', Param(), lineno=280, col_offset=28), Name('fallback_operator', Param(), lineno=280, col_offset=50)], None, None, []), [Expr(Str('Generates forward and reverse operators given a purely-rational\n        operator and a function from the operator module.\n\n        Use this like:\n        __op__, __rop__ = _operator_fallbacks(just_rational_op, operator.op)\n\n        In general, we want to implement the arithmetic operations so\n        that mixed-mode operations either call an implementation whose\n        author knew about the types of both arguments, or convert both\n        to the nearest built in type and do the operation there. In\n        Fraction, that means that we define __add__ and __radd__ as:\n\n            def __add__(self, other):\n                # Both types have numerators/denominator attributes,\n                # so do the operation directly\n                if isinstance(other, (int, long, Fraction)):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                # float and complex don\'t have those operations, but we\n                # know about those types, so special case them.\n                elif isinstance(other, float):\n                    return float(self) + other\n                elif isinstance(other, complex):\n                    return complex(self) + other\n                # Let the other type take over.\n                return NotImplemented\n\n            def __radd__(self, other):\n                # radd handles more types than add because there\'s\n                # nothing left to fall back to.\n                if isinstance(other, Rational):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                elif isinstance(other, Real):\n                    return float(other) + float(self)\n                elif isinstance(other, Complex):\n                    return complex(other) + complex(self)\n                return NotImplemented\n\n\n        There are 5 different cases for a mixed-type addition on\n        Fraction. I\'ll refer to all of the above code that doesn\'t\n        refer to Fraction, float, or complex as "boilerplate". \'r\'\n        will be an instance of Fraction, which is a subtype of\n        Rational (r : Fraction <: Rational), and b : B <:\n        Complex. The first three involve \'r + b\':\n\n            1. If B <: Fraction, int, float, or complex, we handle\n               that specially, and all is well.\n            2. If Fraction falls back to the boilerplate code, and it\n               were to return a value from __add__, we\'d miss the\n               possibility that B defines a more intelligent __radd__,\n               so the boilerplate should return NotImplemented from\n               __add__. In particular, we don\'t handle Rational\n               here, even though we could get an exact answer, in case\n               the other type wants to do something special.\n            3. If B <: Fraction, Python tries B.__radd__ before\n               Fraction.__add__. This is ok, because it was\n               implemented with knowledge of Fraction, so it can\n               handle those instances before delegating to Real or\n               Complex.\n\n        The next two situations describe \'b + r\'. We assume that b\n        didn\'t know about Fraction in its implementation, and that it\n        uses similar boilerplate code:\n\n            4. If B <: Rational, then __radd_ converts both to the\n               builtin rational type (hey look, that\'s us) and\n               proceeds.\n            5. Otherwise, __radd__ tries to find the nearest common\n               base ABC, and fall back to its builtin type. Since this\n               class doesn\'t subclass a concrete type, there\'s no\n               implementation to fall back to, so we need to try as\n               hard as possible to return an actual value, or the user\n               will get a TypeError.\n\n        ', lineno=359, col_offset=-1), lineno=359, col_offset=-1), FunctionDef('forward', arguments([Name('a', Param(), lineno=360, col_offset=20), Name('b', Param(), lineno=360, col_offset=23)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=361, col_offset=15), [Name('b', Load(), lineno=361, col_offset=26), Tuple([Name('int', Load(), lineno=361, col_offset=30), Name('long', Load(), lineno=361, col_offset=35), Name('Fraction', Load(), lineno=361, col_offset=41)], Load(), lineno=361, col_offset=30)], [], None, None, lineno=361, col_offset=15), [Return(Call(Name('monomorphic_operator', Load(), lineno=362, col_offset=23), [Name('a', Load(), lineno=362, col_offset=44), Name('b', Load(), lineno=362, col_offset=47)], [], None, None, lineno=362, col_offset=23), lineno=362, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=363, col_offset=17), [Name('b', Load(), lineno=363, col_offset=28), Name('float', Load(), lineno=363, col_offset=31)], [], None, None, lineno=363, col_offset=17), [Return(Call(Name('fallback_operator', Load(), lineno=364, col_offset=23), [Call(Name('float', Load(), lineno=364, col_offset=41), [Name('a', Load(), lineno=364, col_offset=47)], [], None, None, lineno=364, col_offset=41), Name('b', Load(), lineno=364, col_offset=51)], [], None, None, lineno=364, col_offset=23), lineno=364, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=365, col_offset=17), [Name('b', Load(), lineno=365, col_offset=28), Name('complex', Load(), lineno=365, col_offset=31)], [], None, None, lineno=365, col_offset=17), [Return(Call(Name('fallback_operator', Load(), lineno=366, col_offset=23), [Call(Name('complex', Load(), lineno=366, col_offset=41), [Name('a', Load(), lineno=366, col_offset=49)], [], None, None, lineno=366, col_offset=41), Name('b', Load(), lineno=366, col_offset=53)], [], None, None, lineno=366, col_offset=23), lineno=366, col_offset=16)], [Return(Name('NotImplemented', Load(), lineno=368, col_offset=23), lineno=368, col_offset=16)], lineno=365, col_offset=17)], lineno=363, col_offset=17)], lineno=361, col_offset=12)], [], lineno=360, col_offset=8), Assign([Attribute(Name('forward', Load(), lineno=369, col_offset=8), '__name__', Store(), lineno=369, col_offset=8)], BinOp(BinOp(Str('__', lineno=369, col_offset=27), Add(), Attribute(Name('fallback_operator', Load(), lineno=369, col_offset=34), '__name__', Load(), lineno=369, col_offset=34), lineno=369, col_offset=27), Add(), Str('__', lineno=369, col_offset=63), lineno=369, col_offset=61), lineno=369, col_offset=8), Assign([Attribute(Name('forward', Load(), lineno=370, col_offset=8), '__doc__', Store(), lineno=370, col_offset=8)], Attribute(Name('monomorphic_operator', Load(), lineno=370, col_offset=26), '__doc__', Load(), lineno=370, col_offset=26), lineno=370, col_offset=8), FunctionDef('reverse', arguments([Name('b', Param(), lineno=372, col_offset=20), Name('a', Param(), lineno=372, col_offset=23)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=373, col_offset=15), [Name('a', Load(), lineno=373, col_offset=26), Name('Rational', Load(), lineno=373, col_offset=29)], [], None, None, lineno=373, col_offset=15), [Return(Call(Name('monomorphic_operator', Load(), lineno=375, col_offset=23), [Name('a', Load(), lineno=375, col_offset=44), Name('b', Load(), lineno=375, col_offset=47)], [], None, None, lineno=375, col_offset=23), lineno=375, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=376, col_offset=17), [Name('a', Load(), lineno=376, col_offset=28), Attribute(Name('numbers', Load(), lineno=376, col_offset=31), 'Real', Load(), lineno=376, col_offset=31)], [], None, None, lineno=376, col_offset=17), [Return(Call(Name('fallback_operator', Load(), lineno=377, col_offset=23), [Call(Name('float', Load(), lineno=377, col_offset=41), [Name('a', Load(), lineno=377, col_offset=47)], [], None, None, lineno=377, col_offset=41), Call(Name('float', Load(), lineno=377, col_offset=51), [Name('b', Load(), lineno=377, col_offset=57)], [], None, None, lineno=377, col_offset=51)], [], None, None, lineno=377, col_offset=23), lineno=377, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=378, col_offset=17), [Name('a', Load(), lineno=378, col_offset=28), Attribute(Name('numbers', Load(), lineno=378, col_offset=31), 'Complex', Load(), lineno=378, col_offset=31)], [], None, None, lineno=378, col_offset=17), [Return(Call(Name('fallback_operator', Load(), lineno=379, col_offset=23), [Call(Name('complex', Load(), lineno=379, col_offset=41), [Name('a', Load(), lineno=379, col_offset=49)], [], None, None, lineno=379, col_offset=41), Call(Name('complex', Load(), lineno=379, col_offset=53), [Name('b', Load(), lineno=379, col_offset=61)], [], None, None, lineno=379, col_offset=53)], [], None, None, lineno=379, col_offset=23), lineno=379, col_offset=16)], [Return(Name('NotImplemented', Load(), lineno=381, col_offset=23), lineno=381, col_offset=16)], lineno=378, col_offset=17)], lineno=376, col_offset=17)], lineno=373, col_offset=12)], [], lineno=372, col_offset=8), Assign([Attribute(Name('reverse', Load(), lineno=382, col_offset=8), '__name__', Store(), lineno=382, col_offset=8)], BinOp(BinOp(Str('__r', lineno=382, col_offset=27), Add(), Attribute(Name('fallback_operator', Load(), lineno=382, col_offset=35), '__name__', Load(), lineno=382, col_offset=35), lineno=382, col_offset=27), Add(), Str('__', lineno=382, col_offset=64), lineno=382, col_offset=62), lineno=382, col_offset=8), Assign([Attribute(Name('reverse', Load(), lineno=383, col_offset=8), '__doc__', Store(), lineno=383, col_offset=8)], Attribute(Name('monomorphic_operator', Load(), lineno=383, col_offset=26), '__doc__', Load(), lineno=383, col_offset=26), lineno=383, col_offset=8), Return(Tuple([Name('forward', Load(), lineno=385, col_offset=15), Name('reverse', Load(), lineno=385, col_offset=24)], Load(), lineno=385, col_offset=15), lineno=385, col_offset=8)], [], lineno=280, col_offset=4), FunctionDef('_add', arguments([Name('a', Param(), lineno=387, col_offset=13), Name('b', Param(), lineno=387, col_offset=16)], None, None, []), [Expr(Str('a + b', lineno=388, col_offset=8), lineno=388, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=389, col_offset=15), [BinOp(BinOp(Attribute(Name('a', Load(), lineno=389, col_offset=24), 'numerator', Load(), lineno=389, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=389, col_offset=38), 'denominator', Load(), lineno=389, col_offset=38), lineno=389, col_offset=24), Add(), BinOp(Attribute(Name('b', Load(), lineno=390, col_offset=24), 'numerator', Load(), lineno=390, col_offset=24), Mult(), Attribute(Name('a', Load(), lineno=390, col_offset=38), 'denominator', Load(), lineno=390, col_offset=38), lineno=390, col_offset=24), lineno=389, col_offset=24), BinOp(Attribute(Name('a', Load(), lineno=391, col_offset=24), 'denominator', Load(), lineno=391, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=391, col_offset=40), 'denominator', Load(), lineno=391, col_offset=40), lineno=391, col_offset=24)], [], None, None, lineno=389, col_offset=15), lineno=389, col_offset=8)], [], lineno=387, col_offset=4), Assign([Tuple([Name('__add__', Store(), lineno=393, col_offset=4), Name('__radd__', Store(), lineno=393, col_offset=13)], Store(), lineno=393, col_offset=4)], Call(Name('_operator_fallbacks', Load(), lineno=393, col_offset=24), [Name('_add', Load(), lineno=393, col_offset=44), Attribute(Name('operator', Load(), lineno=393, col_offset=50), 'add', Load(), lineno=393, col_offset=50)], [], None, None, lineno=393, col_offset=24), lineno=393, col_offset=4), FunctionDef('_sub', arguments([Name('a', Param(), lineno=395, col_offset=13), Name('b', Param(), lineno=395, col_offset=16)], None, None, []), [Expr(Str('a - b', lineno=396, col_offset=8), lineno=396, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=397, col_offset=15), [BinOp(BinOp(Attribute(Name('a', Load(), lineno=397, col_offset=24), 'numerator', Load(), lineno=397, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=397, col_offset=38), 'denominator', Load(), lineno=397, col_offset=38), lineno=397, col_offset=24), Sub(), BinOp(Attribute(Name('b', Load(), lineno=398, col_offset=24), 'numerator', Load(), lineno=398, col_offset=24), Mult(), Attribute(Name('a', Load(), lineno=398, col_offset=38), 'denominator', Load(), lineno=398, col_offset=38), lineno=398, col_offset=24), lineno=397, col_offset=24), BinOp(Attribute(Name('a', Load(), lineno=399, col_offset=24), 'denominator', Load(), lineno=399, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=399, col_offset=40), 'denominator', Load(), lineno=399, col_offset=40), lineno=399, col_offset=24)], [], None, None, lineno=397, col_offset=15), lineno=397, col_offset=8)], [], lineno=395, col_offset=4), Assign([Tuple([Name('__sub__', Store(), lineno=401, col_offset=4), Name('__rsub__', Store(), lineno=401, col_offset=13)], Store(), lineno=401, col_offset=4)], Call(Name('_operator_fallbacks', Load(), lineno=401, col_offset=24), [Name('_sub', Load(), lineno=401, col_offset=44), Attribute(Name('operator', Load(), lineno=401, col_offset=50), 'sub', Load(), lineno=401, col_offset=50)], [], None, None, lineno=401, col_offset=24), lineno=401, col_offset=4), FunctionDef('_mul', arguments([Name('a', Param(), lineno=403, col_offset=13), Name('b', Param(), lineno=403, col_offset=16)], None, None, []), [Expr(Str('a * b', lineno=404, col_offset=8), lineno=404, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=405, col_offset=15), [BinOp(Attribute(Name('a', Load(), lineno=405, col_offset=24), 'numerator', Load(), lineno=405, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=405, col_offset=38), 'numerator', Load(), lineno=405, col_offset=38), lineno=405, col_offset=24), BinOp(Attribute(Name('a', Load(), lineno=405, col_offset=51), 'denominator', Load(), lineno=405, col_offset=51), Mult(), Attribute(Name('b', Load(), lineno=405, col_offset=67), 'denominator', Load(), lineno=405, col_offset=67), lineno=405, col_offset=51)], [], None, None, lineno=405, col_offset=15), lineno=405, col_offset=8)], [], lineno=403, col_offset=4), Assign([Tuple([Name('__mul__', Store(), lineno=407, col_offset=4), Name('__rmul__', Store(), lineno=407, col_offset=13)], Store(), lineno=407, col_offset=4)], Call(Name('_operator_fallbacks', Load(), lineno=407, col_offset=24), [Name('_mul', Load(), lineno=407, col_offset=44), Attribute(Name('operator', Load(), lineno=407, col_offset=50), 'mul', Load(), lineno=407, col_offset=50)], [], None, None, lineno=407, col_offset=24), lineno=407, col_offset=4), FunctionDef('_div', arguments([Name('a', Param(), lineno=409, col_offset=13), Name('b', Param(), lineno=409, col_offset=16)], None, None, []), [Expr(Str('a / b', lineno=410, col_offset=8), lineno=410, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=411, col_offset=15), [BinOp(Attribute(Name('a', Load(), lineno=411, col_offset=24), 'numerator', Load(), lineno=411, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=411, col_offset=38), 'denominator', Load(), lineno=411, col_offset=38), lineno=411, col_offset=24), BinOp(Attribute(Name('a', Load(), lineno=412, col_offset=24), 'denominator', Load(), lineno=412, col_offset=24), Mult(), Attribute(Name('b', Load(), lineno=412, col_offset=40), 'numerator', Load(), lineno=412, col_offset=40), lineno=412, col_offset=24)], [], None, None, lineno=411, col_offset=15), lineno=411, col_offset=8)], [], lineno=409, col_offset=4), Assign([Tuple([Name('__truediv__', Store(), lineno=414, col_offset=4), Name('__rtruediv__', Store(), lineno=414, col_offset=17)], Store(), lineno=414, col_offset=4)], Call(Name('_operator_fallbacks', Load(), lineno=414, col_offset=32), [Name('_div', Load(), lineno=414, col_offset=52), Attribute(Name('operator', Load(), lineno=414, col_offset=58), 'truediv', Load(), lineno=414, col_offset=58)], [], None, None, lineno=414, col_offset=32), lineno=414, col_offset=4), Assign([Tuple([Name('__div__', Store(), lineno=415, col_offset=4), Name('__rdiv__', Store(), lineno=415, col_offset=13)], Store(), lineno=415, col_offset=4)], Call(Name('_operator_fallbacks', Load(), lineno=415, col_offset=24), [Name('_div', Load(), lineno=415, col_offset=44), Attribute(Name('operator', Load(), lineno=415, col_offset=50), 'div', Load(), lineno=415, col_offset=50)], [], None, None, lineno=415, col_offset=24), lineno=415, col_offset=4), FunctionDef('__floordiv__', arguments([Name('a', Param(), lineno=417, col_offset=21), Name('b', Param(), lineno=417, col_offset=24)], None, None, []), [Expr(Str('a // b', lineno=418, col_offset=8), lineno=418, col_offset=8), Assign([Name('div', Store(), lineno=420, col_offset=8)], BinOp(Name('a', Load(), lineno=420, col_offset=14), Div(), Name('b', Load(), lineno=420, col_offset=18), lineno=420, col_offset=14), lineno=420, col_offset=8), If(Call(Name('isinstance', Load(), lineno=421, col_offset=11), [Name('div', Load(), lineno=421, col_offset=22), Name('Rational', Load(), lineno=421, col_offset=27)], [], None, None, lineno=421, col_offset=11), [Return(BinOp(Attribute(Name('div', Load(), lineno=425, col_offset=19), 'numerator', Load(), lineno=425, col_offset=19), FloorDiv(), Attribute(Name('div', Load(), lineno=425, col_offset=36), 'denominator', Load(), lineno=425, col_offset=36), lineno=425, col_offset=19), lineno=425, col_offset=12)], [Return(Call(Attribute(Name('math', Load(), lineno=427, col_offset=19), 'floor', Load(), lineno=427, col_offset=19), [Name('div', Load(), lineno=427, col_offset=30)], [], None, None, lineno=427, col_offset=19), lineno=427, col_offset=12)], lineno=421, col_offset=8)], [], lineno=417, col_offset=4), FunctionDef('__rfloordiv__', arguments([Name('b', Param(), lineno=429, col_offset=22), Name('a', Param(), lineno=429, col_offset=25)], None, None, []), [Expr(Str('a // b', lineno=430, col_offset=8), lineno=430, col_offset=8), Assign([Name('div', Store(), lineno=432, col_offset=8)], BinOp(Name('a', Load(), lineno=432, col_offset=14), Div(), Name('b', Load(), lineno=432, col_offset=18), lineno=432, col_offset=14), lineno=432, col_offset=8), If(Call(Name('isinstance', Load(), lineno=433, col_offset=11), [Name('div', Load(), lineno=433, col_offset=22), Name('Rational', Load(), lineno=433, col_offset=27)], [], None, None, lineno=433, col_offset=11), [Return(BinOp(Attribute(Name('div', Load(), lineno=437, col_offset=19), 'numerator', Load(), lineno=437, col_offset=19), FloorDiv(), Attribute(Name('div', Load(), lineno=437, col_offset=36), 'denominator', Load(), lineno=437, col_offset=36), lineno=437, col_offset=19), lineno=437, col_offset=12)], [Return(Call(Attribute(Name('math', Load(), lineno=439, col_offset=19), 'floor', Load(), lineno=439, col_offset=19), [Name('div', Load(), lineno=439, col_offset=30)], [], None, None, lineno=439, col_offset=19), lineno=439, col_offset=12)], lineno=433, col_offset=8)], [], lineno=429, col_offset=4), FunctionDef('__mod__', arguments([Name('a', Param(), lineno=441, col_offset=16), Name('b', Param(), lineno=441, col_offset=19)], None, None, []), [Expr(Str('a % b', lineno=442, col_offset=8), lineno=442, col_offset=8), Assign([Name('div', Store(), lineno=443, col_offset=8)], BinOp(Name('a', Load(), lineno=443, col_offset=14), FloorDiv(), Name('b', Load(), lineno=443, col_offset=19), lineno=443, col_offset=14), lineno=443, col_offset=8), Return(BinOp(Name('a', Load(), lineno=444, col_offset=15), Sub(), BinOp(Name('b', Load(), lineno=444, col_offset=19), Mult(), Name('div', Load(), lineno=444, col_offset=23), lineno=444, col_offset=19), lineno=444, col_offset=15), lineno=444, col_offset=8)], [], lineno=441, col_offset=4), FunctionDef('__rmod__', arguments([Name('b', Param(), lineno=446, col_offset=17), Name('a', Param(), lineno=446, col_offset=20)], None, None, []), [Expr(Str('a % b', lineno=447, col_offset=8), lineno=447, col_offset=8), Assign([Name('div', Store(), lineno=448, col_offset=8)], BinOp(Name('a', Load(), lineno=448, col_offset=14), FloorDiv(), Name('b', Load(), lineno=448, col_offset=19), lineno=448, col_offset=14), lineno=448, col_offset=8), Return(BinOp(Name('a', Load(), lineno=449, col_offset=15), Sub(), BinOp(Name('b', Load(), lineno=449, col_offset=19), Mult(), Name('div', Load(), lineno=449, col_offset=23), lineno=449, col_offset=19), lineno=449, col_offset=15), lineno=449, col_offset=8)], [], lineno=446, col_offset=4), FunctionDef('__pow__', arguments([Name('a', Param(), lineno=451, col_offset=16), Name('b', Param(), lineno=451, col_offset=19)], None, None, []), [Expr(Str('a ** b\n\n        If b is not an integer, the result will be a float or complex\n        since roots are generally irrational. If b is an integer, the\n        result will be rational.\n\n        ', lineno=458, col_offset=-1), lineno=458, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=459, col_offset=11), [Name('b', Load(), lineno=459, col_offset=22), Name('Rational', Load(), lineno=459, col_offset=25)], [], None, None, lineno=459, col_offset=11), [If(Compare(Attribute(Name('b', Load(), lineno=460, col_offset=15), 'denominator', Load(), lineno=460, col_offset=15), [Eq()], [Num(1, lineno=460, col_offset=32)], lineno=460, col_offset=15), [Assign([Name('power', Store(), lineno=461, col_offset=16)], Attribute(Name('b', Load(), lineno=461, col_offset=24), 'numerator', Load(), lineno=461, col_offset=24), lineno=461, col_offset=16), If(Compare(Name('power', Load(), lineno=462, col_offset=19), [GtE()], [Num(0, lineno=462, col_offset=28)], lineno=462, col_offset=19), [Return(Call(Name('Fraction', Load(), lineno=463, col_offset=27), [BinOp(Attribute(Name('a', Load(), lineno=463, col_offset=36), '_numerator', Load(), lineno=463, col_offset=36), Pow(), Name('power', Load(), lineno=463, col_offset=52), lineno=463, col_offset=36), BinOp(Attribute(Name('a', Load(), lineno=464, col_offset=36), '_denominator', Load(), lineno=464, col_offset=36), Pow(), Name('power', Load(), lineno=464, col_offset=54), lineno=464, col_offset=36)], [], None, None, lineno=463, col_offset=27), lineno=463, col_offset=20)], [Return(Call(Name('Fraction', Load(), lineno=466, col_offset=27), [BinOp(Attribute(Name('a', Load(), lineno=466, col_offset=36), '_denominator', Load(), lineno=466, col_offset=36), Pow(), UnaryOp(USub(), Name('power', Load(), lineno=466, col_offset=55), lineno=466, col_offset=54), lineno=466, col_offset=36), BinOp(Attribute(Name('a', Load(), lineno=467, col_offset=36), '_numerator', Load(), lineno=467, col_offset=36), Pow(), UnaryOp(USub(), Name('power', Load(), lineno=467, col_offset=53), lineno=467, col_offset=52), lineno=467, col_offset=36)], [], None, None, lineno=466, col_offset=27), lineno=466, col_offset=20)], lineno=462, col_offset=16)], [Return(BinOp(Call(Name('float', Load(), lineno=471, col_offset=23), [Name('a', Load(), lineno=471, col_offset=29)], [], None, None, lineno=471, col_offset=23), Pow(), Call(Name('float', Load(), lineno=471, col_offset=35), [Name('b', Load(), lineno=471, col_offset=41)], [], None, None, lineno=471, col_offset=35), lineno=471, col_offset=23), lineno=471, col_offset=16)], lineno=460, col_offset=12)], [Return(BinOp(Call(Name('float', Load(), lineno=473, col_offset=19), [Name('a', Load(), lineno=473, col_offset=25)], [], None, None, lineno=473, col_offset=19), Pow(), Name('b', Load(), lineno=473, col_offset=31), lineno=473, col_offset=19), lineno=473, col_offset=12)], lineno=459, col_offset=8)], [], lineno=451, col_offset=4), FunctionDef('__rpow__', arguments([Name('b', Param(), lineno=475, col_offset=17), Name('a', Param(), lineno=475, col_offset=20)], None, None, []), [Expr(Str('a ** b', lineno=476, col_offset=8), lineno=476, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('b', Load(), lineno=477, col_offset=11), '_denominator', Load(), lineno=477, col_offset=11), [Eq()], [Num(1, lineno=477, col_offset=29)], lineno=477, col_offset=11), Compare(Attribute(Name('b', Load(), lineno=477, col_offset=35), '_numerator', Load(), lineno=477, col_offset=35), [GtE()], [Num(0, lineno=477, col_offset=51)], lineno=477, col_offset=35)], lineno=477, col_offset=11), [Return(BinOp(Name('a', Load(), lineno=479, col_offset=19), Pow(), Attribute(Name('b', Load(), lineno=479, col_offset=24), '_numerator', Load(), lineno=479, col_offset=24), lineno=479, col_offset=19), lineno=479, col_offset=12)], [], lineno=477, col_offset=8), If(Call(Name('isinstance', Load(), lineno=481, col_offset=11), [Name('a', Load(), lineno=481, col_offset=22), Name('Rational', Load(), lineno=481, col_offset=25)], [], None, None, lineno=481, col_offset=11), [Return(BinOp(Call(Name('Fraction', Load(), lineno=482, col_offset=19), [Attribute(Name('a', Load(), lineno=482, col_offset=28), 'numerator', Load(), lineno=482, col_offset=28), Attribute(Name('a', Load(), lineno=482, col_offset=41), 'denominator', Load(), lineno=482, col_offset=41)], [], None, None, lineno=482, col_offset=19), Pow(), Name('b', Load(), lineno=482, col_offset=59), lineno=482, col_offset=19), lineno=482, col_offset=12)], [], lineno=481, col_offset=8), If(Compare(Attribute(Name('b', Load(), lineno=484, col_offset=11), '_denominator', Load(), lineno=484, col_offset=11), [Eq()], [Num(1, lineno=484, col_offset=29)], lineno=484, col_offset=11), [Return(BinOp(Name('a', Load(), lineno=485, col_offset=19), Pow(), Attribute(Name('b', Load(), lineno=485, col_offset=24), '_numerator', Load(), lineno=485, col_offset=24), lineno=485, col_offset=19), lineno=485, col_offset=12)], [], lineno=484, col_offset=8), Return(BinOp(Name('a', Load(), lineno=487, col_offset=15), Pow(), Call(Name('float', Load(), lineno=487, col_offset=20), [Name('b', Load(), lineno=487, col_offset=26)], [], None, None, lineno=487, col_offset=20), lineno=487, col_offset=15), lineno=487, col_offset=8)], [], lineno=475, col_offset=4), FunctionDef('__pos__', arguments([Name('a', Param(), lineno=489, col_offset=16)], None, None, []), [Expr(Str('+a: Coerces a subclass instance to Fraction', lineno=490, col_offset=8), lineno=490, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=491, col_offset=15), [Attribute(Name('a', Load(), lineno=491, col_offset=24), '_numerator', Load(), lineno=491, col_offset=24), Attribute(Name('a', Load(), lineno=491, col_offset=38), '_denominator', Load(), lineno=491, col_offset=38)], [], None, None, lineno=491, col_offset=15), lineno=491, col_offset=8)], [], lineno=489, col_offset=4), FunctionDef('__neg__', arguments([Name('a', Param(), lineno=493, col_offset=16)], None, None, []), [Expr(Str('-a', lineno=494, col_offset=8), lineno=494, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=495, col_offset=15), [UnaryOp(USub(), Attribute(Name('a', Load(), lineno=495, col_offset=25), '_numerator', Load(), lineno=495, col_offset=25), lineno=495, col_offset=24), Attribute(Name('a', Load(), lineno=495, col_offset=39), '_denominator', Load(), lineno=495, col_offset=39)], [], None, None, lineno=495, col_offset=15), lineno=495, col_offset=8)], [], lineno=493, col_offset=4), FunctionDef('__abs__', arguments([Name('a', Param(), lineno=497, col_offset=16)], None, None, []), [Expr(Str('abs(a)', lineno=498, col_offset=8), lineno=498, col_offset=8), Return(Call(Name('Fraction', Load(), lineno=499, col_offset=15), [Call(Name('abs', Load(), lineno=499, col_offset=24), [Attribute(Name('a', Load(), lineno=499, col_offset=28), '_numerator', Load(), lineno=499, col_offset=28)], [], None, None, lineno=499, col_offset=24), Attribute(Name('a', Load(), lineno=499, col_offset=43), '_denominator', Load(), lineno=499, col_offset=43)], [], None, None, lineno=499, col_offset=15), lineno=499, col_offset=8)], [], lineno=497, col_offset=4), FunctionDef('__trunc__', arguments([Name('a', Param(), lineno=501, col_offset=18)], None, None, []), [Expr(Str('trunc(a)', lineno=502, col_offset=8), lineno=502, col_offset=8), If(Compare(Attribute(Name('a', Load(), lineno=503, col_offset=11), '_numerator', Load(), lineno=503, col_offset=11), [Lt()], [Num(0, lineno=503, col_offset=26)], lineno=503, col_offset=11), [Return(UnaryOp(USub(), BinOp(UnaryOp(USub(), Attribute(Name('a', Load(), lineno=504, col_offset=22), '_numerator', Load(), lineno=504, col_offset=22), lineno=504, col_offset=21), FloorDiv(), Attribute(Name('a', Load(), lineno=504, col_offset=38), '_denominator', Load(), lineno=504, col_offset=38), lineno=504, col_offset=21), lineno=504, col_offset=19), lineno=504, col_offset=12)], [Return(BinOp(Attribute(Name('a', Load(), lineno=506, col_offset=19), '_numerator', Load(), lineno=506, col_offset=19), FloorDiv(), Attribute(Name('a', Load(), lineno=506, col_offset=35), '_denominator', Load(), lineno=506, col_offset=35), lineno=506, col_offset=19), lineno=506, col_offset=12)], lineno=503, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=508, col_offset=17)], None, None, []), [Expr(Str('hash(self)\n\n        Tricky because values that are exactly representable as a\n        float must have the same hash as that float.\n\n        ', lineno=514, col_offset=-1), lineno=514, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=516, col_offset=11), '_denominator', Load(), lineno=516, col_offset=11), [Eq()], [Num(1, lineno=516, col_offset=32)], lineno=516, col_offset=11), [Return(Call(Name('hash', Load(), lineno=518, col_offset=19), [Attribute(Name('self', Load(), lineno=518, col_offset=24), '_numerator', Load(), lineno=518, col_offset=24)], [], None, None, lineno=518, col_offset=19), lineno=518, col_offset=12)], [], lineno=516, col_offset=8), If(Compare(Name('self', Load(), lineno=520, col_offset=11), [Eq()], [Call(Name('float', Load(), lineno=520, col_offset=19), [Name('self', Load(), lineno=520, col_offset=25)], [], None, None, lineno=520, col_offset=19)], lineno=520, col_offset=11), [Return(Call(Name('hash', Load(), lineno=521, col_offset=19), [Call(Name('float', Load(), lineno=521, col_offset=24), [Name('self', Load(), lineno=521, col_offset=30)], [], None, None, lineno=521, col_offset=24)], [], None, None, lineno=521, col_offset=19), lineno=521, col_offset=12)], [Return(Call(Name('hash', Load(), lineno=525, col_offset=19), [Tuple([Attribute(Name('self', Load(), lineno=525, col_offset=25), '_numerator', Load(), lineno=525, col_offset=25), Attribute(Name('self', Load(), lineno=525, col_offset=42), '_denominator', Load(), lineno=525, col_offset=42)], Load(), lineno=525, col_offset=25)], [], None, None, lineno=525, col_offset=19), lineno=525, col_offset=12)], lineno=520, col_offset=8)], [], lineno=508, col_offset=4), FunctionDef('__eq__', arguments([Name('a', Param(), lineno=527, col_offset=15), Name('b', Param(), lineno=527, col_offset=18)], None, None, []), [Expr(Str('a == b', lineno=528, col_offset=8), lineno=528, col_offset=8), If(Call(Name('isinstance', Load(), lineno=529, col_offset=11), [Name('b', Load(), lineno=529, col_offset=22), Name('Rational', Load(), lineno=529, col_offset=25)], [], None, None, lineno=529, col_offset=11), [Return(BoolOp(And(), [Compare(Attribute(Name('a', Load(), lineno=530, col_offset=20), '_numerator', Load(), lineno=530, col_offset=20), [Eq()], [Attribute(Name('b', Load(), lineno=530, col_offset=36), 'numerator', Load(), lineno=530, col_offset=36)], lineno=530, col_offset=20), Compare(Attribute(Name('a', Load(), lineno=531, col_offset=20), '_denominator', Load(), lineno=531, col_offset=20), [Eq()], [Attribute(Name('b', Load(), lineno=531, col_offset=38), 'denominator', Load(), lineno=531, col_offset=38)], lineno=531, col_offset=20)], lineno=530, col_offset=20), lineno=530, col_offset=12)], [], lineno=529, col_offset=8), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=532, col_offset=11), [Name('b', Load(), lineno=532, col_offset=22), Attribute(Name('numbers', Load(), lineno=532, col_offset=25), 'Complex', Load(), lineno=532, col_offset=25)], [], None, None, lineno=532, col_offset=11), Compare(Attribute(Name('b', Load(), lineno=532, col_offset=46), 'imag', Load(), lineno=532, col_offset=46), [Eq()], [Num(0, lineno=532, col_offset=56)], lineno=532, col_offset=46)], lineno=532, col_offset=11), [Assign([Name('b', Store(), lineno=533, col_offset=12)], Attribute(Name('b', Load(), lineno=533, col_offset=16), 'real', Load(), lineno=533, col_offset=16), lineno=533, col_offset=12)], [], lineno=532, col_offset=8), If(Call(Name('isinstance', Load(), lineno=534, col_offset=11), [Name('b', Load(), lineno=534, col_offset=22), Name('float', Load(), lineno=534, col_offset=25)], [], None, None, lineno=534, col_offset=11), [If(BoolOp(Or(), [Call(Attribute(Name('math', Load(), lineno=535, col_offset=15), 'isnan', Load(), lineno=535, col_offset=15), [Name('b', Load(), lineno=535, col_offset=26)], [], None, None, lineno=535, col_offset=15), Call(Attribute(Name('math', Load(), lineno=535, col_offset=32), 'isinf', Load(), lineno=535, col_offset=32), [Name('b', Load(), lineno=535, col_offset=43)], [], None, None, lineno=535, col_offset=32)], lineno=535, col_offset=15), [Return(Compare(Num(0.0, lineno=538, col_offset=23), [Eq()], [Name('b', Load(), lineno=538, col_offset=30)], lineno=538, col_offset=23), lineno=538, col_offset=16)], [Return(Compare(Name('a', Load(), lineno=540, col_offset=23), [Eq()], [Call(Attribute(Name('a', Load(), lineno=540, col_offset=28), 'from_float', Load(), lineno=540, col_offset=28), [Name('b', Load(), lineno=540, col_offset=41)], [], None, None, lineno=540, col_offset=28)], lineno=540, col_offset=23), lineno=540, col_offset=16)], lineno=535, col_offset=12)], [Return(Name('NotImplemented', Load(), lineno=544, col_offset=19), lineno=544, col_offset=12)], lineno=534, col_offset=8)], [], lineno=527, col_offset=4), FunctionDef('_richcmp', arguments([Name('self', Param(), lineno=546, col_offset=17), Name('other', Param(), lineno=546, col_offset=23), Name('op', Param(), lineno=546, col_offset=30)], None, None, []), [Expr(Str('Helper for comparison operators, for internal use only.\n\n        Implement comparison between a Rational instance `self`, and\n        either another Rational instance or a float `other`.  If\n        `other` is not a Rational instance or a float, return\n        NotImplemented. `op` should be one of the six standard\n        comparison operators.\n\n        ', lineno=555, col_offset=-1), lineno=555, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=557, col_offset=11), [Name('other', Load(), lineno=557, col_offset=22), Name('Rational', Load(), lineno=557, col_offset=29)], [], None, None, lineno=557, col_offset=11), [Return(Call(Name('op', Load(), lineno=558, col_offset=19), [BinOp(Attribute(Name('self', Load(), lineno=558, col_offset=22), '_numerator', Load(), lineno=558, col_offset=22), Mult(), Attribute(Name('other', Load(), lineno=558, col_offset=40), 'denominator', Load(), lineno=558, col_offset=40), lineno=558, col_offset=22), BinOp(Attribute(Name('self', Load(), lineno=559, col_offset=22), '_denominator', Load(), lineno=559, col_offset=22), Mult(), Attribute(Name('other', Load(), lineno=559, col_offset=42), 'numerator', Load(), lineno=559, col_offset=42), lineno=559, col_offset=22)], [], None, None, lineno=558, col_offset=19), lineno=558, col_offset=12)], [], lineno=557, col_offset=8), If(Call(Name('isinstance', Load(), lineno=562, col_offset=11), [Name('other', Load(), lineno=562, col_offset=22), Name('complex', Load(), lineno=562, col_offset=29)], [], None, None, lineno=562, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=563, col_offset=18), [Str('no ordering relation is defined for complex numbers', lineno=563, col_offset=28)], [], None, None, lineno=563, col_offset=18), None, None, lineno=563, col_offset=12)], [], lineno=562, col_offset=8), If(Call(Name('isinstance', Load(), lineno=564, col_offset=11), [Name('other', Load(), lineno=564, col_offset=22), Name('float', Load(), lineno=564, col_offset=29)], [], None, None, lineno=564, col_offset=11), [If(BoolOp(Or(), [Call(Attribute(Name('math', Load(), lineno=565, col_offset=15), 'isnan', Load(), lineno=565, col_offset=15), [Name('other', Load(), lineno=565, col_offset=26)], [], None, None, lineno=565, col_offset=15), Call(Attribute(Name('math', Load(), lineno=565, col_offset=36), 'isinf', Load(), lineno=565, col_offset=36), [Name('other', Load(), lineno=565, col_offset=47)], [], None, None, lineno=565, col_offset=36)], lineno=565, col_offset=15), [Return(Call(Name('op', Load(), lineno=566, col_offset=23), [Num(0.0, lineno=566, col_offset=26), Name('other', Load(), lineno=566, col_offset=31)], [], None, None, lineno=566, col_offset=23), lineno=566, col_offset=16)], [Return(Call(Name('op', Load(), lineno=568, col_offset=23), [Name('self', Load(), lineno=568, col_offset=26), Call(Attribute(Name('self', Load(), lineno=568, col_offset=32), 'from_float', Load(), lineno=568, col_offset=32), [Name('other', Load(), lineno=568, col_offset=48)], [], None, None, lineno=568, col_offset=32)], [], None, None, lineno=568, col_offset=23), lineno=568, col_offset=16)], lineno=565, col_offset=12)], [Return(Name('NotImplemented', Load(), lineno=570, col_offset=19), lineno=570, col_offset=12)], lineno=564, col_offset=8)], [], lineno=546, col_offset=4), FunctionDef('__lt__', arguments([Name('a', Param(), lineno=572, col_offset=15), Name('b', Param(), lineno=572, col_offset=18)], None, None, []), [Expr(Str('a < b', lineno=573, col_offset=8), lineno=573, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=574, col_offset=15), '_richcmp', Load(), lineno=574, col_offset=15), [Name('b', Load(), lineno=574, col_offset=26), Attribute(Name('operator', Load(), lineno=574, col_offset=29), 'lt', Load(), lineno=574, col_offset=29)], [], None, None, lineno=574, col_offset=15), lineno=574, col_offset=8)], [], lineno=572, col_offset=4), FunctionDef('__gt__', arguments([Name('a', Param(), lineno=576, col_offset=15), Name('b', Param(), lineno=576, col_offset=18)], None, None, []), [Expr(Str('a > b', lineno=577, col_offset=8), lineno=577, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=578, col_offset=15), '_richcmp', Load(), lineno=578, col_offset=15), [Name('b', Load(), lineno=578, col_offset=26), Attribute(Name('operator', Load(), lineno=578, col_offset=29), 'gt', Load(), lineno=578, col_offset=29)], [], None, None, lineno=578, col_offset=15), lineno=578, col_offset=8)], [], lineno=576, col_offset=4), FunctionDef('__le__', arguments([Name('a', Param(), lineno=580, col_offset=15), Name('b', Param(), lineno=580, col_offset=18)], None, None, []), [Expr(Str('a <= b', lineno=581, col_offset=8), lineno=581, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=582, col_offset=15), '_richcmp', Load(), lineno=582, col_offset=15), [Name('b', Load(), lineno=582, col_offset=26), Attribute(Name('operator', Load(), lineno=582, col_offset=29), 'le', Load(), lineno=582, col_offset=29)], [], None, None, lineno=582, col_offset=15), lineno=582, col_offset=8)], [], lineno=580, col_offset=4), FunctionDef('__ge__', arguments([Name('a', Param(), lineno=584, col_offset=15), Name('b', Param(), lineno=584, col_offset=18)], None, None, []), [Expr(Str('a >= b', lineno=585, col_offset=8), lineno=585, col_offset=8), Return(Call(Attribute(Name('a', Load(), lineno=586, col_offset=15), '_richcmp', Load(), lineno=586, col_offset=15), [Name('b', Load(), lineno=586, col_offset=26), Attribute(Name('operator', Load(), lineno=586, col_offset=29), 'ge', Load(), lineno=586, col_offset=29)], [], None, None, lineno=586, col_offset=15), lineno=586, col_offset=8)], [], lineno=584, col_offset=4), FunctionDef('__nonzero__', arguments([Name('a', Param(), lineno=588, col_offset=20)], None, None, []), [Expr(Str('a != 0', lineno=589, col_offset=8), lineno=589, col_offset=8), Return(Compare(Attribute(Name('a', Load(), lineno=590, col_offset=15), '_numerator', Load(), lineno=590, col_offset=15), [NotEq()], [Num(0, lineno=590, col_offset=31)], lineno=590, col_offset=15), lineno=590, col_offset=8)], [], lineno=588, col_offset=4), FunctionDef('__reduce__', arguments([Name('self', Param(), lineno=594, col_offset=19)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=595, col_offset=16), '__class__', Load(), lineno=595, col_offset=16), Tuple([Call(Name('str', Load(), lineno=595, col_offset=33), [Name('self', Load(), lineno=595, col_offset=37)], [], None, None, lineno=595, col_offset=33)], Load(), lineno=595, col_offset=33)], Load(), lineno=595, col_offset=16), lineno=595, col_offset=8)], [], lineno=594, col_offset=4), FunctionDef('__copy__', arguments([Name('self', Param(), lineno=597, col_offset=17)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=598, col_offset=11), [Name('self', Load(), lineno=598, col_offset=16)], [], None, None, lineno=598, col_offset=11), [Eq()], [Name('Fraction', Load(), lineno=598, col_offset=25)], lineno=598, col_offset=11), [Return(Name('self', Load(), lineno=599, col_offset=19), lineno=599, col_offset=12)], [], lineno=598, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=600, col_offset=15), '__class__', Load(), lineno=600, col_offset=15), [Attribute(Name('self', Load(), lineno=600, col_offset=30), '_numerator', Load(), lineno=600, col_offset=30), Attribute(Name('self', Load(), lineno=600, col_offset=47), '_denominator', Load(), lineno=600, col_offset=47)], [], None, None, lineno=600, col_offset=15), lineno=600, col_offset=8)], [], lineno=597, col_offset=4), FunctionDef('__deepcopy__', arguments([Name('self', Param(), lineno=602, col_offset=21), Name('memo', Param(), lineno=602, col_offset=27)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=603, col_offset=11), [Name('self', Load(), lineno=603, col_offset=16)], [], None, None, lineno=603, col_offset=11), [Eq()], [Name('Fraction', Load(), lineno=603, col_offset=25)], lineno=603, col_offset=11), [Return(Name('self', Load(), lineno=604, col_offset=19), lineno=604, col_offset=12)], [], lineno=603, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=605, col_offset=15), '__class__', Load(), lineno=605, col_offset=15), [Attribute(Name('self', Load(), lineno=605, col_offset=30), '_numerator', Load(), lineno=605, col_offset=30), Attribute(Name('self', Load(), lineno=605, col_offset=47), '_denominator', Load(), lineno=605, col_offset=47)], [], None, None, lineno=605, col_offset=15), lineno=605, col_offset=8)], [], lineno=602, col_offset=4)], [], lineno=44, col_offset=0)])
