Module([Expr(Str(' CommandLine - Get and parse command line options\n\n    NOTE: This still is very much work in progress !!!\n\n    Different version are likely to be incompatible.\n\n    TODO:\n\n    * Incorporate the changes made by (see Inbox)\n    * Add number range option using srange()\n\n', lineno=12, col_offset=-1), lineno=12, col_offset=-1), Assign([Name('__copyright__', Store(), lineno=14, col_offset=0)], Str('Copyright (c), 1997-2006, Marc-Andre Lemburg (mal@lemburg.com)\nCopyright (c), 2000-2006, eGenix.com Software GmbH (info@egenix.com)\nSee the documentation for further information on copyrights,\nor contact the author. All Rights Reserved.\n', lineno=19, col_offset=-1), lineno=14, col_offset=0), Assign([Name('__version__', Store(), lineno=21, col_offset=0)], Str('1.2', lineno=21, col_offset=14), lineno=21, col_offset=0), Import([alias('sys', None), alias('getopt', None), alias('string', None), alias('glob', None), alias('os', None), alias('re', None), alias('exceptions', None), alias('traceback', None)], lineno=23, col_offset=0), FunctionDef('_getopt_flags', arguments([Name('options', Param(), lineno=27, col_offset=18)], None, None, []), [Expr(Str(' Convert the option list to a getopt flag string and long opt\n        list\n\n    ', lineno=32, col_offset=-1), lineno=32, col_offset=-1), Assign([Name('s', Store(), lineno=33, col_offset=4)], List([], Load(), lineno=33, col_offset=8), lineno=33, col_offset=4), Assign([Name('l', Store(), lineno=34, col_offset=4)], List([], Load(), lineno=34, col_offset=8), lineno=34, col_offset=4), For(Name('o', Store(), lineno=35, col_offset=8), Name('options', Load(), lineno=35, col_offset=13), [If(Compare(Attribute(Name('o', Load(), lineno=36, col_offset=11), 'prefix', Load(), lineno=36, col_offset=11), [Eq()], [Str('-', lineno=36, col_offset=23)], lineno=36, col_offset=11), [Expr(Call(Attribute(Name('s', Load(), lineno=38, col_offset=12), 'append', Load(), lineno=38, col_offset=12), [Attribute(Name('o', Load(), lineno=38, col_offset=21), 'name', Load(), lineno=38, col_offset=21)], [], None, None, lineno=38, col_offset=12), lineno=38, col_offset=12), If(Attribute(Name('o', Load(), lineno=39, col_offset=15), 'takes_argument', Load(), lineno=39, col_offset=15), [Expr(Call(Attribute(Name('s', Load(), lineno=40, col_offset=16), 'append', Load(), lineno=40, col_offset=16), [Str(':', lineno=40, col_offset=25)], [], None, None, lineno=40, col_offset=16), lineno=40, col_offset=16)], [], lineno=39, col_offset=12)], [If(Attribute(Name('o', Load(), lineno=43, col_offset=15), 'takes_argument', Load(), lineno=43, col_offset=15), [Expr(Call(Attribute(Name('l', Load(), lineno=44, col_offset=16), 'append', Load(), lineno=44, col_offset=16), [BinOp(Attribute(Name('o', Load(), lineno=44, col_offset=25), 'name', Load(), lineno=44, col_offset=25), Add(), Str('=', lineno=44, col_offset=32), lineno=44, col_offset=25)], [], None, None, lineno=44, col_offset=16), lineno=44, col_offset=16)], [Expr(Call(Attribute(Name('l', Load(), lineno=46, col_offset=16), 'append', Load(), lineno=46, col_offset=16), [Attribute(Name('o', Load(), lineno=46, col_offset=25), 'name', Load(), lineno=46, col_offset=25)], [], None, None, lineno=46, col_offset=16), lineno=46, col_offset=16)], lineno=43, col_offset=12)], lineno=36, col_offset=8)], [], lineno=35, col_offset=4), Return(Tuple([Call(Attribute(Name('string', Load(), lineno=47, col_offset=11), 'join', Load(), lineno=47, col_offset=11), [Name('s', Load(), lineno=47, col_offset=23), Str('', lineno=47, col_offset=25)], [], None, None, lineno=47, col_offset=11), Name('l', Load(), lineno=47, col_offset=29)], Load(), lineno=47, col_offset=11), lineno=47, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('invisible_input', arguments([Name('prompt', Param(), lineno=49, col_offset=20)], None, None, [Str('>>> ', lineno=49, col_offset=27)]), [Expr(Str(' Get raw input from a terminal without echoing the characters to\n        the terminal, e.g. for password queries.\n\n    ', lineno=54, col_offset=-1), lineno=54, col_offset=-1), Import([alias('getpass', None)], lineno=55, col_offset=4), Assign([Name('entry', Store(), lineno=56, col_offset=4)], Call(Attribute(Name('getpass', Load(), lineno=56, col_offset=12), 'getpass', Load(), lineno=56, col_offset=12), [Name('prompt', Load(), lineno=56, col_offset=28)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=4), If(Compare(Name('entry', Load(), lineno=57, col_offset=7), [Is()], [Name('None', Load(), lineno=57, col_offset=16)], lineno=57, col_offset=7), [Raise(Name('KeyboardInterrupt', Load(), lineno=58, col_offset=14), None, None, lineno=58, col_offset=8)], [], lineno=57, col_offset=4), Return(Name('entry', Load(), lineno=59, col_offset=11), lineno=59, col_offset=4)], [], lineno=49, col_offset=0), FunctionDef('fileopen', arguments([Name('name', Param(), lineno=61, col_offset=13), Name('mode', Param(), lineno=61, col_offset=19), Name('encoding', Param(), lineno=61, col_offset=30)], None, None, [Str('wb', lineno=61, col_offset=24), Name('None', Load(), lineno=61, col_offset=39)]), [Expr(Str(" Open a file using mode.\n\n        Default mode is 'wb' meaning to open the file for writing in\n        binary mode. If encoding is given, I/O to and from the file is\n        transparently encoded using the given encoding.\n\n        Files opened for writing are chmod()ed to 0600.\n\n    ", lineno=71, col_offset=-1), lineno=71, col_offset=-1), If(Compare(Name('name', Load(), lineno=72, col_offset=7), [Eq()], [Str('stdout', lineno=72, col_offset=15)], lineno=72, col_offset=7), [Return(Attribute(Name('sys', Load(), lineno=73, col_offset=15), 'stdout', Load(), lineno=73, col_offset=15), lineno=73, col_offset=8)], [If(Compare(Name('name', Load(), lineno=74, col_offset=9), [Eq()], [Str('stderr', lineno=74, col_offset=17)], lineno=74, col_offset=9), [Return(Attribute(Name('sys', Load(), lineno=75, col_offset=15), 'stderr', Load(), lineno=75, col_offset=15), lineno=75, col_offset=8)], [If(Compare(Name('name', Load(), lineno=76, col_offset=9), [Eq()], [Str('stdin', lineno=76, col_offset=17)], lineno=76, col_offset=9), [Return(Attribute(Name('sys', Load(), lineno=77, col_offset=15), 'stdin', Load(), lineno=77, col_offset=15), lineno=77, col_offset=8)], [If(Compare(Name('encoding', Load(), lineno=79, col_offset=11), [IsNot()], [Name('None', Load(), lineno=79, col_offset=27)], lineno=79, col_offset=11), [Import([alias('codecs', None)], lineno=80, col_offset=12), Assign([Name('f', Store(), lineno=81, col_offset=12)], Call(Attribute(Name('codecs', Load(), lineno=81, col_offset=16), 'open', Load(), lineno=81, col_offset=16), [Name('name', Load(), lineno=81, col_offset=28), Name('mode', Load(), lineno=81, col_offset=34), Name('encoding', Load(), lineno=81, col_offset=40)], [], None, None, lineno=81, col_offset=16), lineno=81, col_offset=12)], [Assign([Name('f', Store(), lineno=83, col_offset=12)], Call(Name('open', Load(), lineno=83, col_offset=16), [Name('name', Load(), lineno=83, col_offset=21), Name('mode', Load(), lineno=83, col_offset=27)], [], None, None, lineno=83, col_offset=16), lineno=83, col_offset=12)], lineno=79, col_offset=8), If(Compare(Str('w', lineno=84, col_offset=11), [In()], [Name('mode', Load(), lineno=84, col_offset=18)], lineno=84, col_offset=11), [Expr(Call(Attribute(Name('os', Load(), lineno=85, col_offset=12), 'chmod', Load(), lineno=85, col_offset=12), [Name('name', Load(), lineno=85, col_offset=21), Num(384, lineno=85, col_offset=27)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=12)], [], lineno=84, col_offset=8), Return(Name('f', Load(), lineno=86, col_offset=15), lineno=86, col_offset=8)], lineno=76, col_offset=9)], lineno=74, col_offset=9)], lineno=72, col_offset=4)], [], lineno=61, col_offset=0), FunctionDef('option_dict', arguments([Name('options', Param(), lineno=88, col_offset=16)], None, None, []), [Expr(Str(' Return a dictionary mapping option names to Option instances.\n    ', lineno=91, col_offset=-1), lineno=91, col_offset=-1), Assign([Name('d', Store(), lineno=92, col_offset=4)], Dict([], [], lineno=92, col_offset=8), lineno=92, col_offset=4), For(Name('option', Store(), lineno=93, col_offset=8), Name('options', Load(), lineno=93, col_offset=18), [Assign([Subscript(Name('d', Load(), lineno=94, col_offset=8), Index(Attribute(Name('option', Load(), lineno=94, col_offset=10), 'name', Load(), lineno=94, col_offset=10)), Store(), lineno=94, col_offset=8)], Name('option', Load(), lineno=94, col_offset=25), lineno=94, col_offset=8)], [], lineno=93, col_offset=4), Return(Name('d', Load(), lineno=95, col_offset=11), lineno=95, col_offset=4)], [], lineno=88, col_offset=0), Assign([Name('getpasswd', Store(), lineno=98, col_offset=0)], Name('invisible_input', Load(), lineno=98, col_offset=12), lineno=98, col_offset=0), Assign([Name('_integerRE', Store(), lineno=100, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=100, col_offset=13), 'compile', Load(), lineno=100, col_offset=13), [Str('\\s*(-?\\d+)\\s*$', lineno=100, col_offset=24)], [], None, None, lineno=100, col_offset=13), lineno=100, col_offset=0), Assign([Name('_integerRangeRE', Store(), lineno=101, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=101, col_offset=18), 'compile', Load(), lineno=101, col_offset=18), [Str('\\s*(-?\\d+)\\s*-\\s*(-?\\d+)\\s*$', lineno=101, col_offset=29)], [], None, None, lineno=101, col_offset=18), lineno=101, col_offset=0), FunctionDef('srange', arguments([Name('s', Param(), lineno=103, col_offset=11), Name('split', Param(), lineno=105, col_offset=11), Name('integer', Param(), lineno=105, col_offset=30), Name('integerRange', Param(), lineno=106, col_offset=11)], None, None, [Attribute(Name('string', Load(), lineno=105, col_offset=17), 'split', Load(), lineno=105, col_offset=17), Name('_integerRE', Load(), lineno=105, col_offset=38), Name('_integerRangeRE', Load(), lineno=106, col_offset=24)]), [Expr(Str(' Converts a textual representation of integer numbers and ranges\n        to a Python list.\n\n        Supported formats: 2,3,4,2-10,-1 - -3, 5 - -2\n\n        Values are appended to the created list in the order specified\n        in the string.\n\n    ', lineno=116, col_offset=-1), lineno=116, col_offset=-1), Assign([Name('l', Store(), lineno=117, col_offset=4)], List([], Load(), lineno=117, col_offset=8), lineno=117, col_offset=4), Assign([Name('append', Store(), lineno=118, col_offset=4)], Attribute(Name('l', Load(), lineno=118, col_offset=13), 'append', Load(), lineno=118, col_offset=13), lineno=118, col_offset=4), For(Name('entry', Store(), lineno=119, col_offset=8), Call(Name('split', Load(), lineno=119, col_offset=17), [Name('s', Load(), lineno=119, col_offset=23), Str(',', lineno=119, col_offset=25)], [], None, None, lineno=119, col_offset=17), [Assign([Name('m', Store(), lineno=120, col_offset=8)], Call(Attribute(Name('integer', Load(), lineno=120, col_offset=12), 'match', Load(), lineno=120, col_offset=12), [Name('entry', Load(), lineno=120, col_offset=26)], [], None, None, lineno=120, col_offset=12), lineno=120, col_offset=8), If(Name('m', Load(), lineno=121, col_offset=11), [Expr(Call(Name('append', Load(), lineno=122, col_offset=12), [Call(Name('int', Load(), lineno=122, col_offset=19), [Subscript(Call(Attribute(Name('m', Load(), lineno=122, col_offset=23), 'groups', Load(), lineno=122, col_offset=23), [], [], None, None, lineno=122, col_offset=23), Index(Num(0, lineno=122, col_offset=34)), Load(), lineno=122, col_offset=23)], [], None, None, lineno=122, col_offset=19)], [], None, None, lineno=122, col_offset=12), lineno=122, col_offset=12), Continue( lineno=123, col_offset=12)], [], lineno=121, col_offset=8), Assign([Name('m', Store(), lineno=124, col_offset=8)], Call(Attribute(Name('integerRange', Load(), lineno=124, col_offset=12), 'match', Load(), lineno=124, col_offset=12), [Name('entry', Load(), lineno=124, col_offset=31)], [], None, None, lineno=124, col_offset=12), lineno=124, col_offset=8), If(Name('m', Load(), lineno=125, col_offset=11), [Assign([Tuple([Name('start', Store(), lineno=126, col_offset=12), Name('end', Store(), lineno=126, col_offset=18)], Store(), lineno=126, col_offset=12)], Call(Name('map', Load(), lineno=126, col_offset=24), [Name('int', Load(), lineno=126, col_offset=28), Call(Attribute(Name('m', Load(), lineno=126, col_offset=32), 'groups', Load(), lineno=126, col_offset=32), [], [], None, None, lineno=126, col_offset=32)], [], None, None, lineno=126, col_offset=24), lineno=126, col_offset=12), Assign([Subscript(Name('l', Load(), lineno=127, col_offset=12), Slice(Call(Name('len', Load(), lineno=127, col_offset=14), [Name('l', Load(), lineno=127, col_offset=18)], [], None, None, lineno=127, col_offset=14), None, None), Store(), lineno=127, col_offset=12)], Call(Name('range', Load(), lineno=127, col_offset=25), [Name('start', Load(), lineno=127, col_offset=31), BinOp(Name('end', Load(), lineno=127, col_offset=37), Add(), Num(1, lineno=127, col_offset=41), lineno=127, col_offset=37)], [], None, None, lineno=127, col_offset=25), lineno=127, col_offset=12)], [], lineno=125, col_offset=8)], [], lineno=119, col_offset=4), Return(Name('l', Load(), lineno=128, col_offset=11), lineno=128, col_offset=4)], [], lineno=103, col_offset=0), FunctionDef('abspath', arguments([Name('path', Param(), lineno=130, col_offset=12), Name('expandvars', Param(), lineno=132, col_offset=12), Name('expanduser', Param(), lineno=132, col_offset=42), Name('join', Param(), lineno=133, col_offset=12), Name('getcwd', Param(), lineno=133, col_offset=30)], None, None, [Attribute(Attribute(Name('os', Load(), lineno=132, col_offset=23), 'path', Load(), lineno=132, col_offset=23), 'expandvars', Load(), lineno=132, col_offset=23), Attribute(Attribute(Name('os', Load(), lineno=132, col_offset=53), 'path', Load(), lineno=132, col_offset=53), 'expanduser', Load(), lineno=132, col_offset=53), Attribute(Attribute(Name('os', Load(), lineno=133, col_offset=17), 'path', Load(), lineno=133, col_offset=17), 'join', Load(), lineno=133, col_offset=17), Attribute(Name('os', Load(), lineno=133, col_offset=37), 'getcwd', Load(), lineno=133, col_offset=37)]), [Expr(Str(' Return the corresponding absolute path for path.\n\n        path is expanded in the usual shell ways before\n        joining it with the current working directory.\n\n    ', lineno=140, col_offset=-1), lineno=140, col_offset=-1), TryExcept([Assign([Name('path', Store(), lineno=142, col_offset=8)], Call(Name('expandvars', Load(), lineno=142, col_offset=15), [Name('path', Load(), lineno=142, col_offset=26)], [], None, None, lineno=142, col_offset=15), lineno=142, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=143, col_offset=11), None, [Pass( lineno=144, col_offset=8)], lineno=143, col_offset=4)], [], lineno=141, col_offset=4), TryExcept([Assign([Name('path', Store(), lineno=146, col_offset=8)], Call(Name('expanduser', Load(), lineno=146, col_offset=15), [Name('path', Load(), lineno=146, col_offset=26)], [], None, None, lineno=146, col_offset=15), lineno=146, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=147, col_offset=11), None, [Pass( lineno=148, col_offset=8)], lineno=147, col_offset=4)], [], lineno=145, col_offset=4), Return(Call(Name('join', Load(), lineno=149, col_offset=11), [Call(Name('getcwd', Load(), lineno=149, col_offset=16), [], [], None, None, lineno=149, col_offset=16), Name('path', Load(), lineno=149, col_offset=26)], [], None, None, lineno=149, col_offset=11), lineno=149, col_offset=4)], [], lineno=130, col_offset=0), ClassDef('Option', [], [Expr(Str(' Option base class. Takes no argument.\n\n    ', lineno=157, col_offset=-1), lineno=157, col_offset=-1), Assign([Name('default', Store(), lineno=158, col_offset=4)], Name('None', Load(), lineno=158, col_offset=14), lineno=158, col_offset=4), Assign([Name('helptext', Store(), lineno=159, col_offset=4)], Str('', lineno=159, col_offset=15), lineno=159, col_offset=4), Assign([Name('prefix', Store(), lineno=160, col_offset=4)], Str('-', lineno=160, col_offset=13), lineno=160, col_offset=4), Assign([Name('takes_argument', Store(), lineno=161, col_offset=4)], Num(0, lineno=161, col_offset=21), lineno=161, col_offset=4), Assign([Name('has_default', Store(), lineno=162, col_offset=4)], Num(0, lineno=162, col_offset=18), lineno=162, col_offset=4), Assign([Name('tab', Store(), lineno=163, col_offset=4)], Num(15, lineno=163, col_offset=10), lineno=163, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=165, col_offset=17), Name('name', Param(), lineno=165, col_offset=22), Name('help', Param(), lineno=165, col_offset=27)], None, None, [Name('None', Load(), lineno=165, col_offset=32)]), [If(UnaryOp(Not(), Compare(Subscript(Name('name', Load(), lineno=167, col_offset=15), Slice(None, Num(1, lineno=167, col_offset=21), None), Load(), lineno=167, col_offset=15), [Eq()], [Str('-', lineno=167, col_offset=27)], lineno=167, col_offset=15), lineno=167, col_offset=11), [Raise(Name('TypeError', Load(), lineno=168, col_offset=18), Str('option names must start with "-"', lineno=168, col_offset=28), None, lineno=168, col_offset=12)], [], lineno=167, col_offset=8), If(Compare(Subscript(Name('name', Load(), lineno=169, col_offset=11), Slice(Num(1, lineno=169, col_offset=16), Num(2, lineno=169, col_offset=18), None), Load(), lineno=169, col_offset=11), [Eq()], [Str('-', lineno=169, col_offset=24)], lineno=169, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=170, col_offset=12), 'prefix', Store(), lineno=170, col_offset=12)], Str('--', lineno=170, col_offset=26), lineno=170, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=171, col_offset=12), 'name', Store(), lineno=171, col_offset=12)], Subscript(Name('name', Load(), lineno=171, col_offset=24), Slice(Num(2, lineno=171, col_offset=29), None, None), Load(), lineno=171, col_offset=24), lineno=171, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=173, col_offset=12), 'name', Store(), lineno=173, col_offset=12)], Subscript(Name('name', Load(), lineno=173, col_offset=24), Slice(Num(1, lineno=173, col_offset=29), None, None), Load(), lineno=173, col_offset=24), lineno=173, col_offset=12)], lineno=169, col_offset=8), If(Name('help', Load(), lineno=174, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=175, col_offset=12), 'help', Store(), lineno=175, col_offset=12)], Name('help', Load(), lineno=175, col_offset=24), lineno=175, col_offset=12)], [], lineno=174, col_offset=8)], [], lineno=165, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=177, col_offset=16)], None, None, []), [Assign([Name('o', Store(), lineno=179, col_offset=8)], Name('self', Load(), lineno=179, col_offset=12), lineno=179, col_offset=8), Assign([Name('name', Store(), lineno=180, col_offset=8)], BinOp(Attribute(Name('o', Load(), lineno=180, col_offset=15), 'prefix', Load(), lineno=180, col_offset=15), Add(), Attribute(Name('o', Load(), lineno=180, col_offset=26), 'name', Load(), lineno=180, col_offset=26), lineno=180, col_offset=15), lineno=180, col_offset=8), If(Attribute(Name('o', Load(), lineno=181, col_offset=11), 'takes_argument', Load(), lineno=181, col_offset=11), [Assign([Name('name', Store(), lineno=182, col_offset=12)], BinOp(Name('name', Load(), lineno=182, col_offset=19), Add(), Str(' arg', lineno=182, col_offset=26), lineno=182, col_offset=19), lineno=182, col_offset=12)], [], lineno=181, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=183, col_offset=11), [Name('name', Load(), lineno=183, col_offset=15)], [], None, None, lineno=183, col_offset=11), [Gt()], [Attribute(Name('self', Load(), lineno=183, col_offset=23), 'tab', Load(), lineno=183, col_offset=23)], lineno=183, col_offset=11), [Assign([Name('name', Store(), lineno=184, col_offset=12)], BinOp(BinOp(Name('name', Load(), lineno=184, col_offset=19), Add(), Str('\n', lineno=184, col_offset=26), lineno=184, col_offset=19), Add(), BinOp(Str(' ', lineno=184, col_offset=33), Mult(), BinOp(BinOp(Attribute(Name('self', Load(), lineno=184, col_offset=40), 'tab', Load(), lineno=184, col_offset=40), Add(), Num(1, lineno=184, col_offset=51), lineno=184, col_offset=40), Add(), Call(Name('len', Load(), lineno=184, col_offset=55), [Attribute(Name('o', Load(), lineno=184, col_offset=59), 'prefix', Load(), lineno=184, col_offset=59)], [], None, None, lineno=184, col_offset=55), lineno=184, col_offset=53), lineno=184, col_offset=33), lineno=184, col_offset=31), lineno=184, col_offset=12)], [Assign([Name('name', Store(), lineno=186, col_offset=12)], BinOp(Str('%-*s ', lineno=186, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=186, col_offset=30), 'tab', Load(), lineno=186, col_offset=30), Name('name', Load(), lineno=186, col_offset=40)], Load(), lineno=186, col_offset=30), lineno=186, col_offset=19), lineno=186, col_offset=12)], lineno=183, col_offset=8), Assign([Name('description', Store(), lineno=187, col_offset=8)], Attribute(Name('o', Load(), lineno=187, col_offset=22), 'help', Load(), lineno=187, col_offset=22), lineno=187, col_offset=8), If(Attribute(Name('o', Load(), lineno=188, col_offset=11), 'has_default', Load(), lineno=188, col_offset=11), [Assign([Name('description', Store(), lineno=189, col_offset=12)], BinOp(Name('description', Load(), lineno=189, col_offset=26), Add(), BinOp(Str(' (%s)', lineno=189, col_offset=40), Mod(), Attribute(Name('o', Load(), lineno=189, col_offset=50), 'default', Load(), lineno=189, col_offset=50), lineno=189, col_offset=40), lineno=189, col_offset=26), lineno=189, col_offset=12)], [], lineno=188, col_offset=8), Return(BinOp(Str('%s %s', lineno=190, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=190, col_offset=26), Name('description', Load(), lineno=190, col_offset=32)], Load(), lineno=190, col_offset=26), lineno=190, col_offset=15), lineno=190, col_offset=8)], [], lineno=177, col_offset=4)], [], lineno=153, col_offset=0), ClassDef('ArgumentOption', [Name('Option', Load(), lineno=192, col_offset=21)], [Expr(Str(' Option that takes an argument.\n\n        An optional default argument can be given.\n\n    ', lineno=198, col_offset=-1), lineno=198, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=199, col_offset=17), Name('name', Param(), lineno=199, col_offset=22), Name('help', Param(), lineno=199, col_offset=27), Name('default', Param(), lineno=199, col_offset=37)], None, None, [Name('None', Load(), lineno=199, col_offset=32), Name('None', Load(), lineno=199, col_offset=45)]), [Expr(Call(Attribute(Name('Option', Load(), lineno=202, col_offset=8), '__init__', Load(), lineno=202, col_offset=8), [Name('self', Load(), lineno=202, col_offset=24), Name('name', Load(), lineno=202, col_offset=29), Name('help', Load(), lineno=202, col_offset=34)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8), If(Compare(Name('default', Load(), lineno=204, col_offset=11), [IsNot()], [Name('None', Load(), lineno=204, col_offset=26)], lineno=204, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=205, col_offset=12), 'default', Store(), lineno=205, col_offset=12)], Name('default', Load(), lineno=205, col_offset=27), lineno=205, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=206, col_offset=12), 'has_default', Store(), lineno=206, col_offset=12)], Num(1, lineno=206, col_offset=31), lineno=206, col_offset=12)], [], lineno=204, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=207, col_offset=8), 'takes_argument', Store(), lineno=207, col_offset=8)], Num(1, lineno=207, col_offset=30), lineno=207, col_offset=8)], [], lineno=199, col_offset=4)], [], lineno=192, col_offset=0), ClassDef('SwitchOption', [Name('Option', Load(), lineno=209, col_offset=19)], [Expr(Str(' Options that can be on or off. Has an optional default value.\n\n    ', lineno=213, col_offset=-1), lineno=213, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=214, col_offset=17), Name('name', Param(), lineno=214, col_offset=22), Name('help', Param(), lineno=214, col_offset=27), Name('default', Param(), lineno=214, col_offset=37)], None, None, [Name('None', Load(), lineno=214, col_offset=32), Name('None', Load(), lineno=214, col_offset=45)]), [Expr(Call(Attribute(Name('Option', Load(), lineno=217, col_offset=8), '__init__', Load(), lineno=217, col_offset=8), [Name('self', Load(), lineno=217, col_offset=24), Name('name', Load(), lineno=217, col_offset=29), Name('help', Load(), lineno=217, col_offset=34)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), If(Compare(Name('default', Load(), lineno=219, col_offset=11), [IsNot()], [Name('None', Load(), lineno=219, col_offset=26)], lineno=219, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=220, col_offset=12), 'default', Store(), lineno=220, col_offset=12)], Name('default', Load(), lineno=220, col_offset=27), lineno=220, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=221, col_offset=12), 'has_default', Store(), lineno=221, col_offset=12)], Num(1, lineno=221, col_offset=31), lineno=221, col_offset=12)], [], lineno=219, col_offset=8)], [], lineno=214, col_offset=4)], [], lineno=209, col_offset=0), ClassDef('Application', [], [Expr(Str(' Command line application interface with builtin argument\n        parsing.\n\n    ', lineno=230, col_offset=-1), lineno=230, col_offset=-1), Assign([Name('options', Store(), lineno=232, col_offset=4)], List([], Load(), lineno=232, col_offset=14), lineno=232, col_offset=4), Assign([Name('preset_options', Store(), lineno=235, col_offset=4)], List([Call(Name('SwitchOption', Load(), lineno=235, col_offset=22), [Str('-v', lineno=235, col_offset=35), Str('generate verbose output', lineno=236, col_offset=35)], [], None, None, lineno=235, col_offset=22), Call(Name('SwitchOption', Load(), lineno=237, col_offset=22), [Str('-h', lineno=237, col_offset=35), Str('show this help text', lineno=238, col_offset=35)], [], None, None, lineno=237, col_offset=22), Call(Name('SwitchOption', Load(), lineno=239, col_offset=22), [Str('--help', lineno=239, col_offset=35), Str('show this help text', lineno=240, col_offset=35)], [], None, None, lineno=239, col_offset=22), Call(Name('SwitchOption', Load(), lineno=241, col_offset=22), [Str('--debug', lineno=241, col_offset=35), Str('enable debugging', lineno=242, col_offset=35)], [], None, None, lineno=241, col_offset=22), Call(Name('SwitchOption', Load(), lineno=243, col_offset=22), [Str('--copyright', lineno=243, col_offset=35), Str('show copyright', lineno=244, col_offset=35)], [], None, None, lineno=243, col_offset=22), Call(Name('SwitchOption', Load(), lineno=245, col_offset=22), [Str('--examples', lineno=245, col_offset=35), Str('show examples of usage', lineno=246, col_offset=35)], [], None, None, lineno=245, col_offset=22)], Load(), lineno=235, col_offset=21), lineno=235, col_offset=4), Assign([Name('header', Store(), lineno=266, col_offset=4)], Str('', lineno=266, col_offset=13), lineno=266, col_offset=4), Assign([Name('name', Store(), lineno=269, col_offset=4)], Str('', lineno=269, col_offset=11), lineno=269, col_offset=4), Assign([Name('synopsis', Store(), lineno=272, col_offset=4)], Str('%(name)s [option] files...', lineno=272, col_offset=15), lineno=272, col_offset=4), Assign([Name('version', Store(), lineno=275, col_offset=4)], Str('', lineno=275, col_offset=14), lineno=275, col_offset=4), Assign([Name('about', Store(), lineno=278, col_offset=4)], Str('', lineno=278, col_offset=12), lineno=278, col_offset=4), Assign([Name('examples', Store(), lineno=281, col_offset=4)], Str('', lineno=281, col_offset=15), lineno=281, col_offset=4), Assign([Name('copyright', Store(), lineno=284, col_offset=4)], Name('__copyright__', Load(), lineno=284, col_offset=16), lineno=284, col_offset=4), Assign([Name('globbing', Store(), lineno=287, col_offset=4)], Num(1, lineno=287, col_offset=15), lineno=287, col_offset=4), Assign([Name('debug', Store(), lineno=290, col_offset=4)], Num(0, lineno=290, col_offset=12), lineno=290, col_offset=4), Assign([Name('verbose', Store(), lineno=293, col_offset=4)], Num(0, lineno=293, col_offset=14), lineno=293, col_offset=4), Assign([Name('InternalError', Store(), lineno=296, col_offset=4)], Attribute(Name('exceptions', Load(), lineno=296, col_offset=20), 'Exception', Load(), lineno=296, col_offset=20), lineno=296, col_offset=4), Assign([Name('values', Store(), lineno=299, col_offset=4)], Name('None', Load(), lineno=299, col_offset=13), lineno=299, col_offset=4), Assign([Name('files', Store(), lineno=301, col_offset=4)], Name('None', Load(), lineno=301, col_offset=12), lineno=301, col_offset=4), Assign([Name('optionlist', Store(), lineno=302, col_offset=4)], Name('None', Load(), lineno=302, col_offset=17), lineno=302, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=304, col_offset=17), Name('argv', Param(), lineno=304, col_offset=22)], None, None, [Name('None', Load(), lineno=304, col_offset=27)]), [If(Compare(Name('argv', Load(), lineno=307, col_offset=11), [Is()], [Name('None', Load(), lineno=307, col_offset=19)], lineno=307, col_offset=11), [Assign([Name('argv', Store(), lineno=308, col_offset=12)], Attribute(Name('sys', Load(), lineno=308, col_offset=19), 'argv', Load(), lineno=308, col_offset=19), lineno=308, col_offset=12)], [], lineno=307, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=309, col_offset=8), 'filename', Store(), lineno=309, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=309, col_offset=24), 'path', Load(), lineno=309, col_offset=24), 'split', Load(), lineno=309, col_offset=24), [Subscript(Name('argv', Load(), lineno=309, col_offset=38), Index(Num(0, lineno=309, col_offset=43)), Load(), lineno=309, col_offset=38)], [], None, None, lineno=309, col_offset=24), Index(Num(1, lineno=309, col_offset=47)), Load(), lineno=309, col_offset=24), lineno=309, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=310, col_offset=15), 'name', Load(), lineno=310, col_offset=15), lineno=310, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=311, col_offset=12), 'name', Store(), lineno=311, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=311, col_offset=24), 'path', Load(), lineno=311, col_offset=24), 'split', Load(), lineno=311, col_offset=24), [Attribute(Name('self', Load(), lineno=311, col_offset=38), 'filename', Load(), lineno=311, col_offset=38)], [], None, None, lineno=311, col_offset=24), Index(Num(1, lineno=311, col_offset=53)), Load(), lineno=311, col_offset=24), lineno=311, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=313, col_offset=12), 'name', Store(), lineno=313, col_offset=12)], Attribute(Name('self', Load(), lineno=313, col_offset=24), 'name', Load(), lineno=313, col_offset=24), lineno=313, col_offset=12)], lineno=310, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=314, col_offset=15), 'header', Load(), lineno=314, col_offset=15), lineno=314, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=315, col_offset=12), 'header', Store(), lineno=315, col_offset=12)], Attribute(Name('self', Load(), lineno=315, col_offset=26), 'name', Load(), lineno=315, col_offset=26), lineno=315, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=317, col_offset=12), 'header', Store(), lineno=317, col_offset=12)], Attribute(Name('self', Load(), lineno=317, col_offset=26), 'header', Load(), lineno=317, col_offset=26), lineno=317, col_offset=12)], lineno=314, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=320, col_offset=8), 'arguments', Store(), lineno=320, col_offset=8)], Subscript(Name('argv', Load(), lineno=320, col_offset=25), Slice(Num(1, lineno=320, col_offset=30), None, None), Load(), lineno=320, col_offset=25), lineno=320, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=323, col_offset=8), 'option_map', Store(), lineno=323, col_offset=8)], Call(Name('option_dict', Load(), lineno=323, col_offset=26), [Attribute(Name('self', Load(), lineno=323, col_offset=38), 'options', Load(), lineno=323, col_offset=38)], [], None, None, lineno=323, col_offset=26), lineno=323, col_offset=8), For(Name('option', Store(), lineno=326, col_offset=12), Attribute(Name('self', Load(), lineno=326, col_offset=22), 'preset_options', Load(), lineno=326, col_offset=22), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=327, col_offset=19), 'option_map', Load(), lineno=327, col_offset=19), 'has_key', Load(), lineno=327, col_offset=19), [Attribute(Name('option', Load(), lineno=327, col_offset=43), 'name', Load(), lineno=327, col_offset=43)], [], None, None, lineno=327, col_offset=19), lineno=327, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=328, col_offset=16), 'add_option', Load(), lineno=328, col_offset=16), [Name('option', Load(), lineno=328, col_offset=32)], [], None, None, lineno=328, col_offset=16), lineno=328, col_offset=16)], [], lineno=327, col_offset=12)], [], lineno=326, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=331, col_offset=8), 'files', Store(), lineno=331, col_offset=8)], List([], Load(), lineno=331, col_offset=21), lineno=331, col_offset=8), TryExcept([Assign([Name('rc', Store(), lineno=336, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=336, col_offset=17), 'startup', Load(), lineno=336, col_offset=17), [], [], None, None, lineno=336, col_offset=17), lineno=336, col_offset=12), If(Compare(Name('rc', Load(), lineno=337, col_offset=15), [IsNot()], [Name('None', Load(), lineno=337, col_offset=25)], lineno=337, col_offset=15), [Raise(Name('SystemExit', Load(), lineno=338, col_offset=22), Name('rc', Load(), lineno=338, col_offset=33), None, lineno=338, col_offset=16)], [], lineno=337, col_offset=12), Assign([Name('rc', Store(), lineno=341, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=341, col_offset=17), 'parse', Load(), lineno=341, col_offset=17), [], [], None, None, lineno=341, col_offset=17), lineno=341, col_offset=12), If(Compare(Name('rc', Load(), lineno=342, col_offset=15), [IsNot()], [Name('None', Load(), lineno=342, col_offset=25)], lineno=342, col_offset=15), [Raise(Name('SystemExit', Load(), lineno=343, col_offset=22), Name('rc', Load(), lineno=343, col_offset=33), None, lineno=343, col_offset=16)], [], lineno=342, col_offset=12), Assign([Name('rc', Store(), lineno=346, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=346, col_offset=17), 'main', Load(), lineno=346, col_offset=17), [], [], None, None, lineno=346, col_offset=17), lineno=346, col_offset=12), If(Compare(Name('rc', Load(), lineno=347, col_offset=15), [Is()], [Name('None', Load(), lineno=347, col_offset=21)], lineno=347, col_offset=15), [Assign([Name('rc', Store(), lineno=348, col_offset=16)], Num(0, lineno=348, col_offset=21), lineno=348, col_offset=16)], [], lineno=347, col_offset=12)], [ExceptHandler(Name('SystemExit', Load(), lineno=350, col_offset=15), Name('rc', Store(), lineno=350, col_offset=26), [Pass( lineno=351, col_offset=12)], lineno=350, col_offset=8), ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=353, col_offset=15), None, [Print(None, [], True, lineno=354, col_offset=12), Print(None, [Str('* User Break', lineno=355, col_offset=18)], True, lineno=355, col_offset=12), Print(None, [], True, lineno=356, col_offset=12), Assign([Name('rc', Store(), lineno=357, col_offset=12)], Num(1, lineno=357, col_offset=17), lineno=357, col_offset=12)], lineno=353, col_offset=8), ExceptHandler(Attribute(Name('self', Load(), lineno=359, col_offset=15), 'InternalError', Load(), lineno=359, col_offset=15), None, [Print(None, [], True, lineno=360, col_offset=12), Print(None, [Str('* Internal Error (use --debug to display the traceback)', lineno=361, col_offset=18)], True, lineno=361, col_offset=12), If(Attribute(Name('self', Load(), lineno=362, col_offset=15), 'debug', Load(), lineno=362, col_offset=15), [Print(None, [], True, lineno=363, col_offset=16), Expr(Call(Attribute(Name('traceback', Load(), lineno=364, col_offset=16), 'print_exc', Load(), lineno=364, col_offset=16), [Num(20, lineno=364, col_offset=36), Attribute(Name('sys', Load(), lineno=364, col_offset=40), 'stdout', Load(), lineno=364, col_offset=40)], [], None, None, lineno=364, col_offset=16), lineno=364, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=365, col_offset=17), 'verbose', Load(), lineno=365, col_offset=17), [Print(None, [BinOp(Str('  %s: %s', lineno=366, col_offset=22), Mod(), Subscript(Call(Attribute(Name('sys', Load(), lineno=366, col_offset=35), 'exc_info', Load(), lineno=366, col_offset=35), [], [], None, None, lineno=366, col_offset=35), Slice(None, Num(2, lineno=366, col_offset=51), None), Load(), lineno=366, col_offset=35), lineno=366, col_offset=22)], True, lineno=366, col_offset=16)], [], lineno=365, col_offset=17)], lineno=362, col_offset=12), Print(None, [], True, lineno=367, col_offset=12), Assign([Name('rc', Store(), lineno=368, col_offset=12)], Num(1, lineno=368, col_offset=17), lineno=368, col_offset=12)], lineno=359, col_offset=8)], [], lineno=334, col_offset=8), Raise(Name('SystemExit', Load(), lineno=370, col_offset=14), Name('rc', Load(), lineno=370, col_offset=25), None, lineno=370, col_offset=8)], [], lineno=304, col_offset=4), FunctionDef('add_option', arguments([Name('self', Param(), lineno=372, col_offset=19), Name('option', Param(), lineno=372, col_offset=25)], None, None, []), [Expr(Str(' Add a new Option instance to the Application dynamically.\n\n            Note that this has to be done *before* .parse() is being\n            executed.\n\n        ', lineno=379, col_offset=-1), lineno=379, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=380, col_offset=8), 'options', Load(), lineno=380, col_offset=8), 'append', Load(), lineno=380, col_offset=8), [Name('option', Load(), lineno=380, col_offset=28)], [], None, None, lineno=380, col_offset=8), lineno=380, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=381, col_offset=8), 'option_map', Load(), lineno=381, col_offset=8), Index(Attribute(Name('option', Load(), lineno=381, col_offset=24), 'name', Load(), lineno=381, col_offset=24)), Store(), lineno=381, col_offset=8)], Name('option', Load(), lineno=381, col_offset=39), lineno=381, col_offset=8)], [], lineno=372, col_offset=4), FunctionDef('startup', arguments([Name('self', Param(), lineno=383, col_offset=16)], None, None, []), [Expr(Str(' Set user defined instance variables.\n\n            If this method returns anything other than None, the\n            process is terminated with the return value as exit code.\n\n        ', lineno=390, col_offset=-1), lineno=390, col_offset=-1), Return(Name('None', Load(), lineno=391, col_offset=15), lineno=391, col_offset=8)], [], lineno=383, col_offset=4), FunctionDef('exit', arguments([Name('self', Param(), lineno=393, col_offset=13), Name('rc', Param(), lineno=393, col_offset=19)], None, None, [Num(0, lineno=393, col_offset=22)]), [Expr(Str(' Exit the program.\n\n            rc is used as exit code and passed back to the calling\n            program. It defaults to 0 which usually means: OK.\n\n        ', lineno=400, col_offset=-1), lineno=400, col_offset=-1), Raise(Name('SystemExit', Load(), lineno=401, col_offset=14), Name('rc', Load(), lineno=401, col_offset=26), None, lineno=401, col_offset=8)], [], lineno=393, col_offset=4), FunctionDef('parse', arguments([Name('self', Param(), lineno=403, col_offset=14)], None, None, []), [Expr(Str(' Parse the command line and fill in self.values and self.files.\n\n            After having parsed the options, the remaining command line\n            arguments are interpreted as files and passed to .handle_files()\n            for processing.\n\n            As final step the option handlers are called in the order\n            of the options given on the command line.\n\n        ', lineno=414, col_offset=-1), lineno=414, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=416, col_offset=8), 'values', Store(), lineno=416, col_offset=8), Name('values', Store(), lineno=416, col_offset=22)], Dict([], [], lineno=416, col_offset=31), lineno=416, col_offset=8), For(Name('o', Store(), lineno=417, col_offset=12), Attribute(Name('self', Load(), lineno=417, col_offset=17), 'options', Load(), lineno=417, col_offset=17), [If(Attribute(Name('o', Load(), lineno=418, col_offset=15), 'has_default', Load(), lineno=418, col_offset=15), [Assign([Subscript(Name('values', Load(), lineno=419, col_offset=16), Index(BinOp(Attribute(Name('o', Load(), lineno=419, col_offset=23), 'prefix', Load(), lineno=419, col_offset=23), Add(), Attribute(Name('o', Load(), lineno=419, col_offset=32), 'name', Load(), lineno=419, col_offset=32), lineno=419, col_offset=23)), Store(), lineno=419, col_offset=16)], Attribute(Name('o', Load(), lineno=419, col_offset=42), 'default', Load(), lineno=419, col_offset=42), lineno=419, col_offset=16)], [Assign([Subscript(Name('values', Load(), lineno=421, col_offset=16), Index(BinOp(Attribute(Name('o', Load(), lineno=421, col_offset=23), 'prefix', Load(), lineno=421, col_offset=23), Add(), Attribute(Name('o', Load(), lineno=421, col_offset=32), 'name', Load(), lineno=421, col_offset=32), lineno=421, col_offset=23)), Store(), lineno=421, col_offset=16)], Num(0, lineno=421, col_offset=42), lineno=421, col_offset=16)], lineno=418, col_offset=12)], [], lineno=417, col_offset=8), Assign([Tuple([Name('flags', Store(), lineno=422, col_offset=8), Name('lflags', Store(), lineno=422, col_offset=14)], Store(), lineno=422, col_offset=8)], Call(Name('_getopt_flags', Load(), lineno=422, col_offset=23), [Attribute(Name('self', Load(), lineno=422, col_offset=37), 'options', Load(), lineno=422, col_offset=37)], [], None, None, lineno=422, col_offset=23), lineno=422, col_offset=8), TryExcept([Assign([Tuple([Name('optlist', Store(), lineno=424, col_offset=12), Name('files', Store(), lineno=424, col_offset=20)], Store(), lineno=424, col_offset=12)], Call(Attribute(Name('getopt', Load(), lineno=424, col_offset=28), 'getopt', Load(), lineno=424, col_offset=28), [Attribute(Name('self', Load(), lineno=424, col_offset=42), 'arguments', Load(), lineno=424, col_offset=42), Name('flags', Load(), lineno=424, col_offset=57), Name('lflags', Load(), lineno=424, col_offset=63)], [], None, None, lineno=424, col_offset=28), lineno=424, col_offset=12), If(Attribute(Name('self', Load(), lineno=425, col_offset=15), 'globbing', Load(), lineno=425, col_offset=15), [Assign([Name('l', Store(), lineno=426, col_offset=16)], List([], Load(), lineno=426, col_offset=20), lineno=426, col_offset=16), For(Name('f', Store(), lineno=427, col_offset=20), Name('files', Load(), lineno=427, col_offset=25), [Assign([Name('gf', Store(), lineno=428, col_offset=20)], Call(Attribute(Name('glob', Load(), lineno=428, col_offset=25), 'glob', Load(), lineno=428, col_offset=25), [Name('f', Load(), lineno=428, col_offset=35)], [], None, None, lineno=428, col_offset=25), lineno=428, col_offset=20), If(UnaryOp(Not(), Name('gf', Load(), lineno=429, col_offset=27), lineno=429, col_offset=23), [Expr(Call(Attribute(Name('l', Load(), lineno=430, col_offset=24), 'append', Load(), lineno=430, col_offset=24), [Name('f', Load(), lineno=430, col_offset=33)], [], None, None, lineno=430, col_offset=24), lineno=430, col_offset=24)], [Assign([Subscript(Name('l', Load(), lineno=432, col_offset=24), Slice(Call(Name('len', Load(), lineno=432, col_offset=26), [Name('l', Load(), lineno=432, col_offset=30)], [], None, None, lineno=432, col_offset=26), None, None), Store(), lineno=432, col_offset=24)], Name('gf', Load(), lineno=432, col_offset=37), lineno=432, col_offset=24)], lineno=429, col_offset=20)], [], lineno=427, col_offset=16), Assign([Name('files', Store(), lineno=433, col_offset=16)], Name('l', Load(), lineno=433, col_offset=24), lineno=433, col_offset=16)], [], lineno=425, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=434, col_offset=12), 'optionlist', Store(), lineno=434, col_offset=12)], Name('optlist', Load(), lineno=434, col_offset=30), lineno=434, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=435, col_offset=12), 'files', Store(), lineno=435, col_offset=12)], BinOp(Name('files', Load(), lineno=435, col_offset=25), Add(), Attribute(Name('self', Load(), lineno=435, col_offset=33), 'files', Load(), lineno=435, col_offset=33), lineno=435, col_offset=25), lineno=435, col_offset=12)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=436, col_offset=15), 'error', Load(), lineno=436, col_offset=15), Name('why', Store(), lineno=436, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=437, col_offset=12), 'help', Load(), lineno=437, col_offset=12), [Name('why', Load(), lineno=437, col_offset=22)], [], None, None, lineno=437, col_offset=12), lineno=437, col_offset=12), Expr(Call(Attribute(Name('sys', Load(), lineno=438, col_offset=12), 'exit', Load(), lineno=438, col_offset=12), [Num(1, lineno=438, col_offset=21)], [], None, None, lineno=438, col_offset=12), lineno=438, col_offset=12)], lineno=436, col_offset=8)], [], lineno=423, col_offset=8), Assign([Name('rc', Store(), lineno=441, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=441, col_offset=13), 'handle_files', Load(), lineno=441, col_offset=13), [Attribute(Name('self', Load(), lineno=441, col_offset=31), 'files', Load(), lineno=441, col_offset=31)], [], None, None, lineno=441, col_offset=13), lineno=441, col_offset=8), If(Compare(Name('rc', Load(), lineno=442, col_offset=11), [IsNot()], [Name('None', Load(), lineno=442, col_offset=21)], lineno=442, col_offset=11), [Expr(Call(Attribute(Name('sys', Load(), lineno=443, col_offset=12), 'exit', Load(), lineno=443, col_offset=12), [Name('rc', Load(), lineno=443, col_offset=21)], [], None, None, lineno=443, col_offset=12), lineno=443, col_offset=12)], [], lineno=442, col_offset=8), For(Tuple([Name('optionname', Store(), lineno=446, col_offset=12), Name('value', Store(), lineno=446, col_offset=24)], Store(), lineno=446, col_offset=12), Name('optlist', Load(), lineno=446, col_offset=33), [TryExcept([Assign([Name('value', Store(), lineno=450, col_offset=16)], Call(Attribute(Name('string', Load(), lineno=450, col_offset=24), 'atoi', Load(), lineno=450, col_offset=24), [Name('value', Load(), lineno=450, col_offset=36)], [], None, None, lineno=450, col_offset=24), lineno=450, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=451, col_offset=19), None, [Pass( lineno=452, col_offset=16)], lineno=451, col_offset=12)], [], lineno=449, col_offset=12), Assign([Name('handlername', Store(), lineno=456, col_offset=12)], BinOp(Str('handle', lineno=456, col_offset=26), Add(), Call(Attribute(Name('string', Load(), lineno=456, col_offset=37), 'replace', Load(), lineno=456, col_offset=37), [Name('optionname', Load(), lineno=456, col_offset=52), Str('-', lineno=456, col_offset=64), Str('_', lineno=456, col_offset=69)], [], None, None, lineno=456, col_offset=37), lineno=456, col_offset=26), lineno=456, col_offset=12), TryExcept([Assign([Name('handler', Store(), lineno=458, col_offset=16)], Call(Name('getattr', Load(), lineno=458, col_offset=26), [Name('self', Load(), lineno=458, col_offset=34), Name('handlername', Load(), lineno=458, col_offset=40)], [], None, None, lineno=458, col_offset=26), lineno=458, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=459, col_offset=19), None, [If(Compare(Name('value', Load(), lineno=460, col_offset=19), [Eq()], [Str('', lineno=460, col_offset=28)], lineno=460, col_offset=19), [If(Call(Attribute(Name('values', Load(), lineno=462, col_offset=23), 'has_key', Load(), lineno=462, col_offset=23), [Name('optionname', Load(), lineno=462, col_offset=38)], [], None, None, lineno=462, col_offset=23), [Assign([Subscript(Name('values', Load(), lineno=463, col_offset=24), Index(Name('optionname', Load(), lineno=463, col_offset=31)), Store(), lineno=463, col_offset=24)], BinOp(Subscript(Name('values', Load(), lineno=463, col_offset=45), Index(Name('optionname', Load(), lineno=463, col_offset=52)), Load(), lineno=463, col_offset=45), Add(), Num(1, lineno=463, col_offset=66), lineno=463, col_offset=45), lineno=463, col_offset=24)], [Assign([Subscript(Name('values', Load(), lineno=465, col_offset=24), Index(Name('optionname', Load(), lineno=465, col_offset=31)), Store(), lineno=465, col_offset=24)], Num(1, lineno=465, col_offset=45), lineno=465, col_offset=24)], lineno=462, col_offset=20)], [Assign([Subscript(Name('values', Load(), lineno=467, col_offset=20), Index(Name('optionname', Load(), lineno=467, col_offset=27)), Store(), lineno=467, col_offset=20)], Name('value', Load(), lineno=467, col_offset=41), lineno=467, col_offset=20)], lineno=460, col_offset=16)], lineno=459, col_offset=12)], [Assign([Name('rc', Store(), lineno=469, col_offset=16)], Call(Name('handler', Load(), lineno=469, col_offset=21), [Name('value', Load(), lineno=469, col_offset=29)], [], None, None, lineno=469, col_offset=21), lineno=469, col_offset=16), If(Compare(Name('rc', Load(), lineno=470, col_offset=19), [IsNot()], [Name('None', Load(), lineno=470, col_offset=29)], lineno=470, col_offset=19), [Raise(Name('SystemExit', Load(), lineno=471, col_offset=26), Name('rc', Load(), lineno=471, col_offset=38), None, lineno=471, col_offset=20)], [], lineno=470, col_offset=16)], lineno=457, col_offset=12)], [], lineno=446, col_offset=8), Assign([Name('rc', Store(), lineno=474, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=474, col_offset=13), 'check_files', Load(), lineno=474, col_offset=13), [Attribute(Name('self', Load(), lineno=474, col_offset=30), 'files', Load(), lineno=474, col_offset=30)], [], None, None, lineno=474, col_offset=13), lineno=474, col_offset=8), If(Compare(Name('rc', Load(), lineno=475, col_offset=11), [IsNot()], [Name('None', Load(), lineno=475, col_offset=21)], lineno=475, col_offset=11), [Expr(Call(Attribute(Name('sys', Load(), lineno=476, col_offset=12), 'exit', Load(), lineno=476, col_offset=12), [Name('rc', Load(), lineno=476, col_offset=21)], [], None, None, lineno=476, col_offset=12), lineno=476, col_offset=12)], [], lineno=475, col_offset=8)], [], lineno=403, col_offset=4), FunctionDef('check_files', arguments([Name('self', Param(), lineno=478, col_offset=20), Name('filelist', Param(), lineno=478, col_offset=25)], None, None, []), [Expr(Str(' Apply some user defined checks on the files given in filelist.\n\n            This may modify filelist in place. A typical application\n            is checking that at least n files are given.\n\n            If this method returns anything other than None, the\n            process is terminated with the return value as exit code.\n\n        ', lineno=488, col_offset=-1), lineno=488, col_offset=-1), Return(Name('None', Load(), lineno=489, col_offset=15), lineno=489, col_offset=8)], [], lineno=478, col_offset=4), FunctionDef('help', arguments([Name('self', Param(), lineno=491, col_offset=13), Name('note', Param(), lineno=491, col_offset=18)], None, None, [Str('', lineno=491, col_offset=23)]), [Expr(Call(Attribute(Name('self', Load(), lineno=493, col_offset=8), 'print_header', Load(), lineno=493, col_offset=8), [], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8), If(Attribute(Name('self', Load(), lineno=494, col_offset=11), 'synopsis', Load(), lineno=494, col_offset=11), [Print(None, [Str('Synopsis:', lineno=495, col_offset=18)], True, lineno=495, col_offset=12), TryExcept([Assign([Name('synopsis', Store(), lineno=498, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=498, col_offset=27), 'synopsis', Load(), lineno=498, col_offset=27), Mod(), Attribute(Name('self', Load(), lineno=498, col_offset=43), 'name', Load(), lineno=498, col_offset=43), lineno=498, col_offset=27), lineno=498, col_offset=16)], [ExceptHandler(Tuple([Name('NameError', Load(), lineno=499, col_offset=20), Name('KeyError', Load(), lineno=499, col_offset=31), Name('TypeError', Load(), lineno=499, col_offset=41)], Load(), lineno=499, col_offset=20), None, [Assign([Name('synopsis', Store(), lineno=500, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=500, col_offset=27), 'synopsis', Load(), lineno=500, col_offset=27), Mod(), Attribute(Name('self', Load(), lineno=500, col_offset=43), '__dict__', Load(), lineno=500, col_offset=43), lineno=500, col_offset=27), lineno=500, col_offset=16)], lineno=499, col_offset=12)], [], lineno=497, col_offset=12), Print(None, [BinOp(Str(' ', lineno=501, col_offset=18), Add(), Name('synopsis', Load(), lineno=501, col_offset=24), lineno=501, col_offset=18)], True, lineno=501, col_offset=12)], [], lineno=494, col_offset=8), Print(None, [], True, lineno=502, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=503, col_offset=8), 'print_options', Load(), lineno=503, col_offset=8), [], [], None, None, lineno=503, col_offset=8), lineno=503, col_offset=8), If(Attribute(Name('self', Load(), lineno=504, col_offset=11), 'version', Load(), lineno=504, col_offset=11), [Print(None, [Str('Version:', lineno=505, col_offset=18)], True, lineno=505, col_offset=12), Print(None, [BinOp(Str(' %s', lineno=506, col_offset=18), Mod(), Attribute(Name('self', Load(), lineno=506, col_offset=26), 'version', Load(), lineno=506, col_offset=26), lineno=506, col_offset=18)], True, lineno=506, col_offset=12), Print(None, [], True, lineno=507, col_offset=12)], [], lineno=504, col_offset=8), If(Attribute(Name('self', Load(), lineno=508, col_offset=11), 'about', Load(), lineno=508, col_offset=11), [Print(None, [Call(Attribute(Name('string', Load(), lineno=509, col_offset=18), 'strip', Load(), lineno=509, col_offset=18), [BinOp(Attribute(Name('self', Load(), lineno=509, col_offset=31), 'about', Load(), lineno=509, col_offset=31), Mod(), Attribute(Name('self', Load(), lineno=509, col_offset=44), '__dict__', Load(), lineno=509, col_offset=44), lineno=509, col_offset=31)], [], None, None, lineno=509, col_offset=18)], True, lineno=509, col_offset=12), Print(None, [], True, lineno=510, col_offset=12)], [], lineno=508, col_offset=8), If(Name('note', Load(), lineno=511, col_offset=11), [Print(None, [BinOp(Str('-', lineno=512, col_offset=18), Mult(), Num(72, lineno=512, col_offset=22), lineno=512, col_offset=18)], True, lineno=512, col_offset=12), Print(None, [Str('Note:', lineno=513, col_offset=18), Name('note', Load(), lineno=513, col_offset=26)], True, lineno=513, col_offset=12), Print(None, [], True, lineno=514, col_offset=12)], [], lineno=511, col_offset=8)], [], lineno=491, col_offset=4), FunctionDef('notice', arguments([Name('self', Param(), lineno=516, col_offset=15), Name('note', Param(), lineno=516, col_offset=20)], None, None, []), [Print(None, [BinOp(Str('-', lineno=518, col_offset=14), Mult(), Num(72, lineno=518, col_offset=18), lineno=518, col_offset=14)], True, lineno=518, col_offset=8), Print(None, [Str('Note:', lineno=519, col_offset=14), Name('note', Load(), lineno=519, col_offset=22)], True, lineno=519, col_offset=8), Print(None, [BinOp(Str('-', lineno=520, col_offset=14), Mult(), Num(72, lineno=520, col_offset=18), lineno=520, col_offset=14)], True, lineno=520, col_offset=8), Print(None, [], True, lineno=521, col_offset=8)], [], lineno=516, col_offset=4), FunctionDef('print_header', arguments([Name('self', Param(), lineno=523, col_offset=21)], None, None, []), [Print(None, [BinOp(Str('-', lineno=525, col_offset=14), Mult(), Num(72, lineno=525, col_offset=18), lineno=525, col_offset=14)], True, lineno=525, col_offset=8), Print(None, [BinOp(Attribute(Name('self', Load(), lineno=526, col_offset=14), 'header', Load(), lineno=526, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=526, col_offset=28), '__dict__', Load(), lineno=526, col_offset=28), lineno=526, col_offset=14)], True, lineno=526, col_offset=8), Print(None, [BinOp(Str('-', lineno=527, col_offset=14), Mult(), Num(72, lineno=527, col_offset=18), lineno=527, col_offset=14)], True, lineno=527, col_offset=8), Print(None, [], True, lineno=528, col_offset=8)], [], lineno=523, col_offset=4), FunctionDef('print_options', arguments([Name('self', Param(), lineno=530, col_offset=22)], None, None, []), [Assign([Name('options', Store(), lineno=532, col_offset=8)], Attribute(Name('self', Load(), lineno=532, col_offset=18), 'options', Load(), lineno=532, col_offset=18), lineno=532, col_offset=8), Print(None, [Str('Options and default settings:', lineno=533, col_offset=14)], True, lineno=533, col_offset=8), If(UnaryOp(Not(), Name('options', Load(), lineno=534, col_offset=15), lineno=534, col_offset=11), [Print(None, [Str('  None', lineno=535, col_offset=18)], True, lineno=535, col_offset=12), Return(None, lineno=536, col_offset=12)], [], lineno=534, col_offset=8), Assign([Name('long', Store(), lineno=537, col_offset=8)], Call(Name('filter', Load(), lineno=537, col_offset=15), [Lambda(arguments([Name('x', Param(), lineno=537, col_offset=29)], None, None, []), Compare(Attribute(Name('x', Load(), lineno=537, col_offset=32), 'prefix', Load(), lineno=537, col_offset=32), [Eq()], [Str('--', lineno=537, col_offset=44)], lineno=537, col_offset=32), lineno=537, col_offset=22), Name('options', Load(), lineno=537, col_offset=50)], [], None, None, lineno=537, col_offset=15), lineno=537, col_offset=8), Assign([Name('short', Store(), lineno=538, col_offset=8)], Call(Name('filter', Load(), lineno=538, col_offset=16), [Lambda(arguments([Name('x', Param(), lineno=538, col_offset=30)], None, None, []), Compare(Attribute(Name('x', Load(), lineno=538, col_offset=33), 'prefix', Load(), lineno=538, col_offset=33), [Eq()], [Str('-', lineno=538, col_offset=45)], lineno=538, col_offset=33), lineno=538, col_offset=23), Name('options', Load(), lineno=538, col_offset=50)], [], None, None, lineno=538, col_offset=16), lineno=538, col_offset=8), Assign([Name('items', Store(), lineno=539, col_offset=8)], BinOp(Name('short', Load(), lineno=539, col_offset=16), Add(), Name('long', Load(), lineno=539, col_offset=24), lineno=539, col_offset=16), lineno=539, col_offset=8), For(Name('o', Store(), lineno=540, col_offset=12), Name('options', Load(), lineno=540, col_offset=17), [Print(None, [Str(' ', lineno=541, col_offset=18), Name('o', Load(), lineno=541, col_offset=22)], True, lineno=541, col_offset=12)], [], lineno=540, col_offset=8), Print(None, [], True, lineno=542, col_offset=8)], [], lineno=530, col_offset=4), FunctionDef('handle_files', arguments([Name('self', Param(), lineno=552, col_offset=21), Name('files', Param(), lineno=552, col_offset=26)], None, None, []), [Expr(Str(' This may process the files list in place.\n        ', lineno=555, col_offset=-1), lineno=555, col_offset=-1), Return(Name('None', Load(), lineno=556, col_offset=15), lineno=556, col_offset=8)], [], lineno=552, col_offset=4), FunctionDef('handle_h', arguments([Name('self', Param(), lineno=559, col_offset=17), Name('arg', Param(), lineno=559, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=561, col_offset=8), 'help', Load(), lineno=561, col_offset=8), [], [], None, None, lineno=561, col_offset=8), lineno=561, col_offset=8), Return(Num(0, lineno=562, col_offset=15), lineno=562, col_offset=8)], [], lineno=559, col_offset=4), FunctionDef('handle_v', arguments([Name('self', Param(), lineno=564, col_offset=17), Name('value', Param(), lineno=564, col_offset=23)], None, None, []), [Expr(Str(' Turn on verbose output.\n        ', lineno=567, col_offset=-1), lineno=567, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=568, col_offset=8), 'verbose', Store(), lineno=568, col_offset=8)], Num(1, lineno=568, col_offset=23), lineno=568, col_offset=8)], [], lineno=564, col_offset=4), FunctionDef('handle__help', arguments([Name('self', Param(), lineno=571, col_offset=21), Name('arg', Param(), lineno=571, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=573, col_offset=8), 'help', Load(), lineno=573, col_offset=8), [], [], None, None, lineno=573, col_offset=8), lineno=573, col_offset=8), Return(Num(0, lineno=574, col_offset=15), lineno=574, col_offset=8)], [], lineno=571, col_offset=4), FunctionDef('handle__debug', arguments([Name('self', Param(), lineno=576, col_offset=22), Name('arg', Param(), lineno=576, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=578, col_offset=8), 'debug', Store(), lineno=578, col_offset=8)], Num(1, lineno=578, col_offset=21), lineno=578, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=580, col_offset=8), 'InternalError', Store(), lineno=580, col_offset=8)], Name('None', Load(), lineno=580, col_offset=29), lineno=580, col_offset=8)], [], lineno=576, col_offset=4), FunctionDef('handle__copyright', arguments([Name('self', Param(), lineno=582, col_offset=26), Name('arg', Param(), lineno=582, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=584, col_offset=8), 'print_header', Load(), lineno=584, col_offset=8), [], [], None, None, lineno=584, col_offset=8), lineno=584, col_offset=8), Print(None, [Call(Attribute(Name('string', Load(), lineno=585, col_offset=14), 'strip', Load(), lineno=585, col_offset=14), [BinOp(Attribute(Name('self', Load(), lineno=585, col_offset=27), 'copyright', Load(), lineno=585, col_offset=27), Mod(), Attribute(Name('self', Load(), lineno=585, col_offset=44), '__dict__', Load(), lineno=585, col_offset=44), lineno=585, col_offset=27)], [], None, None, lineno=585, col_offset=14)], True, lineno=585, col_offset=8), Print(None, [], True, lineno=586, col_offset=8), Return(Num(0, lineno=587, col_offset=15), lineno=587, col_offset=8)], [], lineno=582, col_offset=4), FunctionDef('handle__examples', arguments([Name('self', Param(), lineno=589, col_offset=25), Name('arg', Param(), lineno=589, col_offset=30)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=591, col_offset=8), 'print_header', Load(), lineno=591, col_offset=8), [], [], None, None, lineno=591, col_offset=8), lineno=591, col_offset=8), If(Attribute(Name('self', Load(), lineno=592, col_offset=11), 'examples', Load(), lineno=592, col_offset=11), [Print(None, [Str('Examples:', lineno=593, col_offset=18)], True, lineno=593, col_offset=12), Print(None, [], True, lineno=594, col_offset=12), Print(None, [Call(Attribute(Name('string', Load(), lineno=595, col_offset=18), 'strip', Load(), lineno=595, col_offset=18), [BinOp(Attribute(Name('self', Load(), lineno=595, col_offset=31), 'examples', Load(), lineno=595, col_offset=31), Mod(), Attribute(Name('self', Load(), lineno=595, col_offset=47), '__dict__', Load(), lineno=595, col_offset=47), lineno=595, col_offset=31)], [], None, None, lineno=595, col_offset=18)], True, lineno=595, col_offset=12), Print(None, [], True, lineno=596, col_offset=12)], [Print(None, [Str('No examples available.', lineno=598, col_offset=18)], True, lineno=598, col_offset=12), Print(None, [], True, lineno=599, col_offset=12)], lineno=592, col_offset=8), Return(Num(0, lineno=600, col_offset=15), lineno=600, col_offset=8)], [], lineno=589, col_offset=4), FunctionDef('main', arguments([Name('self', Param(), lineno=602, col_offset=13)], None, None, []), [Expr(Str(' Override this method as program entry point.\n\n            The return value is passed to sys.exit() as argument.  If\n            it is None, 0 is assumed (meaning OK). Unhandled\n            exceptions are reported with exit status code 1 (see\n            __init__ for further details).\n\n        ', lineno=611, col_offset=-1), lineno=611, col_offset=-1), Return(Name('None', Load(), lineno=612, col_offset=15), lineno=612, col_offset=8)], [], lineno=602, col_offset=4)], [], lineno=225, col_offset=0), Assign([Name('CommandLine', Store(), lineno=615, col_offset=0)], Name('Application', Load(), lineno=615, col_offset=14), lineno=615, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [ClassDef('MyApplication', [Name('Application', Load(), lineno=619, col_offset=24)], [Assign([Name('header', Store(), lineno=620, col_offset=8)], Str('Test Application', lineno=620, col_offset=17), lineno=620, col_offset=8), Assign([Name('version', Store(), lineno=621, col_offset=8)], Name('__version__', Load(), lineno=621, col_offset=18), lineno=621, col_offset=8), Assign([Name('options', Store(), lineno=622, col_offset=8)], List([Call(Name('Option', Load(), lineno=622, col_offset=19), [Str('-v', lineno=622, col_offset=26), Str('verbose', lineno=622, col_offset=31)], [], None, None, lineno=622, col_offset=19)], Load(), lineno=622, col_offset=18), lineno=622, col_offset=8), FunctionDef('handle_v', arguments([Name('self', Param(), lineno=624, col_offset=21), Name('arg', Param(), lineno=624, col_offset=26)], None, None, []), [Print(None, [Str('VERBOSE, Yeah !', lineno=625, col_offset=18)], True, lineno=625, col_offset=12)], [], lineno=624, col_offset=8)], [], lineno=619, col_offset=4), Assign([Name('cmd', Store(), lineno=627, col_offset=4)], Call(Name('MyApplication', Load(), lineno=627, col_offset=10), [], [], None, None, lineno=627, col_offset=10), lineno=627, col_offset=4), If(UnaryOp(Not(), Subscript(Attribute(Name('cmd', Load(), lineno=628, col_offset=11), 'values', Load(), lineno=628, col_offset=11), Index(Str('-h', lineno=628, col_offset=22)), Load(), lineno=628, col_offset=11), lineno=628, col_offset=7), [Expr(Call(Attribute(Name('cmd', Load(), lineno=629, col_offset=8), 'help', Load(), lineno=629, col_offset=8), [], [], None, None, lineno=629, col_offset=8), lineno=629, col_offset=8)], [], lineno=628, col_offset=4), Print(None, [Str('files:', lineno=630, col_offset=10), Attribute(Name('cmd', Load(), lineno=630, col_offset=19), 'files', Load(), lineno=630, col_offset=19)], True, lineno=630, col_offset=4), Print(None, [Str('Bye...', lineno=631, col_offset=10)], True, lineno=631, col_offset=4)], [], lineno=617, col_offset=0), If(Compare(Name('__name__', Load(), lineno=633, col_offset=3), [Eq()], [Str('__main__', lineno=633, col_offset=15)], lineno=633, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=634, col_offset=4), [], [], None, None, lineno=634, col_offset=4), lineno=634, col_offset=4)], [], lineno=633, col_offset=0)])
