Module([ImportFrom('DocXMLRPCServer', [alias('DocXMLRPCServer', None)], 0, lineno=1, col_offset=0), Import([alias('httplib', None)], lineno=2, col_offset=0), Import([alias('sys', None)], lineno=3, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=4, col_offset=0), Assign([Name('threading', Store(), lineno=5, col_offset=0)], Call(Attribute(Name('test_support', Load(), lineno=5, col_offset=12), 'import_module', Load(), lineno=5, col_offset=12), [Str('threading', lineno=5, col_offset=39)], [], None, None, lineno=5, col_offset=12), lineno=5, col_offset=0), Import([alias('time', None)], lineno=6, col_offset=0), Import([alias('socket', None)], lineno=7, col_offset=0), Import([alias('unittest', None)], lineno=8, col_offset=0), Assign([Name('PORT', Store(), lineno=10, col_offset=0)], Name('None', Load(), lineno=10, col_offset=7), lineno=10, col_offset=0), FunctionDef('make_request_and_skipIf', arguments([Name('condition', Param(), lineno=12, col_offset=28), Name('reason', Param(), lineno=12, col_offset=39)], None, None, []), [If(UnaryOp(Not(), Name('condition', Load(), lineno=15, col_offset=11), lineno=15, col_offset=7), [Return(Lambda(arguments([Name('func', Param(), lineno=16, col_offset=22)], None, None, []), Name('func', Load(), lineno=16, col_offset=28), lineno=16, col_offset=15), lineno=16, col_offset=8)], [], lineno=15, col_offset=4), FunctionDef('decorator', arguments([Name('func', Param(), lineno=17, col_offset=18)], None, None, []), [FunctionDef('make_request_and_skip', arguments([Name('self', Param(), lineno=18, col_offset=34)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=19, col_offset=12), 'client', Load(), lineno=19, col_offset=12), 'request', Load(), lineno=19, col_offset=12), [Str('GET', lineno=19, col_offset=32), Str('/', lineno=19, col_offset=39)], [], None, None, lineno=19, col_offset=12), lineno=19, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=20, col_offset=12), 'client', Load(), lineno=20, col_offset=12), 'getresponse', Load(), lineno=20, col_offset=12), [], [], None, None, lineno=20, col_offset=12), lineno=20, col_offset=12), Raise(Call(Attribute(Name('unittest', Load(), lineno=21, col_offset=18), 'SkipTest', Load(), lineno=21, col_offset=18), [Name('reason', Load(), lineno=21, col_offset=36)], [], None, None, lineno=21, col_offset=18), None, None, lineno=21, col_offset=12)], [], lineno=18, col_offset=8), Return(Name('make_request_and_skip', Load(), lineno=22, col_offset=15), lineno=22, col_offset=8)], [], lineno=17, col_offset=4), Return(Name('decorator', Load(), lineno=23, col_offset=11), lineno=23, col_offset=4)], [], lineno=12, col_offset=0), FunctionDef('server', arguments([Name('evt', Param(), lineno=26, col_offset=11), Name('numrequests', Param(), lineno=26, col_offset=16)], None, None, []), [Assign([Name('serv', Store(), lineno=27, col_offset=4)], Call(Name('DocXMLRPCServer', Load(), lineno=27, col_offset=11), [Tuple([Str('localhost', lineno=27, col_offset=28), Num(0, lineno=27, col_offset=41)], Load(), lineno=27, col_offset=28)], [keyword('logRequests', Name('False', Load(), lineno=27, col_offset=57))], None, None, lineno=27, col_offset=11), lineno=27, col_offset=4), TryFinally([TryExcept([Global(['PORT'], lineno=30, col_offset=8), Assign([Name('PORT', Store(), lineno=31, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('serv', Load(), lineno=31, col_offset=15), 'socket', Load(), lineno=31, col_offset=15), 'getsockname', Load(), lineno=31, col_offset=15), [], [], None, None, lineno=31, col_offset=15), Index(Num(1, lineno=31, col_offset=41)), Load(), lineno=31, col_offset=15), lineno=31, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=34, col_offset=8), 'set_server_title', Load(), lineno=34, col_offset=8), [Str('DocXMLRPCServer Test Documentation', lineno=34, col_offset=30)], [], None, None, lineno=34, col_offset=8), lineno=34, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=35, col_offset=8), 'set_server_name', Load(), lineno=35, col_offset=8), [Str('DocXMLRPCServer Test Docs', lineno=35, col_offset=29)], [], None, None, lineno=35, col_offset=8), lineno=35, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=36, col_offset=8), 'set_server_documentation', Load(), lineno=36, col_offset=8), [Str("This is an XML-RPC server's documentation, but the server can be used by POSTing to /RPC2. Try self.add, too.", lineno=37, col_offset=12)], [], None, None, lineno=36, col_offset=8), lineno=36, col_offset=8), ClassDef('TestClass', [Name('object', Load(), lineno=41, col_offset=24)], [FunctionDef('test_method', arguments([Name('self', Param(), lineno=42, col_offset=28), Name('arg', Param(), lineno=42, col_offset=34)], None, None, []), [Expr(Str("Test method's docs. This method truly does very little.", lineno=43, col_offset=16), lineno=43, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=44, col_offset=16), 'arg', Store(), lineno=44, col_offset=16)], Name('arg', Load(), lineno=44, col_offset=27), lineno=44, col_offset=16)], [], lineno=42, col_offset=12)], [], lineno=41, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=46, col_offset=8), 'register_introspection_functions', Load(), lineno=46, col_offset=8), [], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=47, col_offset=8), 'register_instance', Load(), lineno=47, col_offset=8), [Call(Name('TestClass', Load(), lineno=47, col_offset=31), [], [], None, None, lineno=47, col_offset=31)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), FunctionDef('add', arguments([Name('x', Param(), lineno=49, col_offset=16), Name('y', Param(), lineno=49, col_offset=19)], None, None, []), [Expr(Str('Add two instances together. This follows PEP008, but has nothing\n            to do with RFC1952. Case should matter: pEp008 and rFC1952.  Things\n            that start with http and ftp should be auto-linked, too:\n            http://google.com.\n            ', lineno=54, col_offset=-1), lineno=54, col_offset=-1), Return(BinOp(Name('x', Load(), lineno=55, col_offset=19), Add(), Name('y', Load(), lineno=55, col_offset=23), lineno=55, col_offset=19), lineno=55, col_offset=12)], [], lineno=49, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=57, col_offset=8), 'register_function', Load(), lineno=57, col_offset=8), [Name('add', Load(), lineno=57, col_offset=31)], [], None, None, lineno=57, col_offset=8), lineno=57, col_offset=8), Expr(Call(Attribute(Name('serv', Load(), lineno=58, col_offset=8), 'register_function', Load(), lineno=58, col_offset=8), [Lambda(arguments([Name('x', Param(), lineno=58, col_offset=38), Name('y', Param(), lineno=58, col_offset=41)], None, None, []), BinOp(Name('x', Load(), lineno=58, col_offset=44), Sub(), Name('y', Load(), lineno=58, col_offset=46), lineno=58, col_offset=44), lineno=58, col_offset=31)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), While(Compare(Name('numrequests', Load(), lineno=60, col_offset=14), [Gt()], [Num(0, lineno=60, col_offset=28)], lineno=60, col_offset=14), [Expr(Call(Attribute(Name('serv', Load(), lineno=61, col_offset=12), 'handle_request', Load(), lineno=61, col_offset=12), [], [], None, None, lineno=61, col_offset=12), lineno=61, col_offset=12), AugAssign(Name('numrequests', Store(), lineno=62, col_offset=12), Sub(), Num(1, lineno=62, col_offset=27), lineno=62, col_offset=12)], [], lineno=60, col_offset=8)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=63, col_offset=11), 'timeout', Load(), lineno=63, col_offset=11), None, [Pass( lineno=64, col_offset=8)], lineno=63, col_offset=4)], [], lineno=29, col_offset=4)], [Expr(Call(Attribute(Name('serv', Load(), lineno=66, col_offset=8), 'server_close', Load(), lineno=66, col_offset=8), [], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Assign([Name('PORT', Store(), lineno=67, col_offset=8)], Name('None', Load(), lineno=67, col_offset=15), lineno=67, col_offset=8), Expr(Call(Attribute(Name('evt', Load(), lineno=68, col_offset=8), 'set', Load(), lineno=68, col_offset=8), [], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], lineno=29, col_offset=4)], [], lineno=26, col_offset=0), ClassDef('DocXMLRPCHTTPGETServer', [Attribute(Name('unittest', Load(), lineno=70, col_offset=29), 'TestCase', Load(), lineno=70, col_offset=29)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=71, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=72, col_offset=8), '_threads', Store(), lineno=72, col_offset=8)], Call(Attribute(Name('test_support', Load(), lineno=72, col_offset=24), 'threading_setup', Load(), lineno=72, col_offset=24), [], [], None, None, lineno=72, col_offset=24), lineno=72, col_offset=8), Assign([Attribute(Name('DocXMLRPCServer', Load(), lineno=74, col_offset=8), '_send_traceback_header', Store(), lineno=74, col_offset=8)], Name('True', Load(), lineno=74, col_offset=49), lineno=74, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=76, col_offset=8), 'evt', Store(), lineno=76, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=76, col_offset=19), 'Event', Load(), lineno=76, col_offset=19), [], [], None, None, lineno=76, col_offset=19), lineno=76, col_offset=8), Expr(Call(Attribute(Call(Attribute(Name('threading', Load(), lineno=77, col_offset=8), 'Thread', Load(), lineno=77, col_offset=8), [], [keyword('target', Name('server', Load(), lineno=77, col_offset=32)), keyword('args', Tuple([Attribute(Name('self', Load(), lineno=77, col_offset=46), 'evt', Load(), lineno=77, col_offset=46), Num(1, lineno=77, col_offset=56)], Load(), lineno=77, col_offset=46))], None, None, lineno=77, col_offset=8), 'start', Load(), lineno=77, col_offset=8), [], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8), Assign([Name('n', Store(), lineno=80, col_offset=8)], Num(1000, lineno=80, col_offset=12), lineno=80, col_offset=8), While(BoolOp(And(), [Compare(Name('n', Load(), lineno=81, col_offset=14), [Gt()], [Num(0, lineno=81, col_offset=18)], lineno=81, col_offset=14), Compare(Name('PORT', Load(), lineno=81, col_offset=24), [Is()], [Name('None', Load(), lineno=81, col_offset=32)], lineno=81, col_offset=24)], lineno=81, col_offset=14), [Expr(Call(Attribute(Name('time', Load(), lineno=82, col_offset=12), 'sleep', Load(), lineno=82, col_offset=12), [Num(0.001, lineno=82, col_offset=23)], [], None, None, lineno=82, col_offset=12), lineno=82, col_offset=12), AugAssign(Name('n', Store(), lineno=83, col_offset=12), Sub(), Num(1, lineno=83, col_offset=17), lineno=83, col_offset=12)], [], lineno=81, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=85, col_offset=8), 'client', Store(), lineno=85, col_offset=8)], Call(Attribute(Name('httplib', Load(), lineno=85, col_offset=22), 'HTTPConnection', Load(), lineno=85, col_offset=22), [BinOp(Str('localhost:%d', lineno=85, col_offset=45), Mod(), Name('PORT', Load(), lineno=85, col_offset=62), lineno=85, col_offset=45)], [], None, None, lineno=85, col_offset=22), lineno=85, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=87, col_offset=17)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'client', Load(), lineno=88, col_offset=8), 'close', Load(), lineno=88, col_offset=8), [], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=8), 'evt', Load(), lineno=90, col_offset=8), 'wait', Load(), lineno=90, col_offset=8), [], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), Assign([Attribute(Name('DocXMLRPCServer', Load(), lineno=93, col_offset=8), '_send_traceback_header', Store(), lineno=93, col_offset=8)], Name('False', Load(), lineno=93, col_offset=49), lineno=93, col_offset=8), Expr(Call(Attribute(Name('test_support', Load(), lineno=94, col_offset=8), 'threading_cleanup', Load(), lineno=94, col_offset=8), [], [], Attribute(Name('self', Load(), lineno=94, col_offset=40), '_threads', Load(), lineno=94, col_offset=40), None, lineno=94, col_offset=8), lineno=94, col_offset=8)], [], lineno=87, col_offset=4), FunctionDef('test_valid_get_response', arguments([Name('self', Param(), lineno=96, col_offset=32)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'client', Load(), lineno=97, col_offset=8), 'request', Load(), lineno=97, col_offset=8), [Str('GET', lineno=97, col_offset=28), Str('/', lineno=97, col_offset=35)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Name('response', Store(), lineno=98, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=98, col_offset=19), 'client', Load(), lineno=98, col_offset=19), 'getresponse', Load(), lineno=98, col_offset=19), [], [], None, None, lineno=98, col_offset=19), lineno=98, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=8), 'assertEqual', Load(), lineno=100, col_offset=8), [Attribute(Name('response', Load(), lineno=100, col_offset=25), 'status', Load(), lineno=100, col_offset=25), Num(200, lineno=100, col_offset=42)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=8), 'assertEqual', Load(), lineno=101, col_offset=8), [Call(Attribute(Name('response', Load(), lineno=101, col_offset=25), 'getheader', Load(), lineno=101, col_offset=25), [Str('Content-type', lineno=101, col_offset=44)], [], None, None, lineno=101, col_offset=25), Str('text/html', lineno=101, col_offset=61)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8), Expr(Call(Attribute(Name('response', Load(), lineno=104, col_offset=8), 'read', Load(), lineno=104, col_offset=8), [], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8)], [], lineno=96, col_offset=4), FunctionDef('test_invalid_get_response', arguments([Name('self', Param(), lineno=106, col_offset=34)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=107, col_offset=8), 'client', Load(), lineno=107, col_offset=8), 'request', Load(), lineno=107, col_offset=8), [Str('GET', lineno=107, col_offset=28), Str('/spam', lineno=107, col_offset=35)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=8), Assign([Name('response', Store(), lineno=108, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=19), 'client', Load(), lineno=108, col_offset=19), 'getresponse', Load(), lineno=108, col_offset=19), [], [], None, None, lineno=108, col_offset=19), lineno=108, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=8), 'assertEqual', Load(), lineno=110, col_offset=8), [Attribute(Name('response', Load(), lineno=110, col_offset=25), 'status', Load(), lineno=110, col_offset=25), Num(404, lineno=110, col_offset=42)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=111, col_offset=8), 'assertEqual', Load(), lineno=111, col_offset=8), [Call(Attribute(Name('response', Load(), lineno=111, col_offset=25), 'getheader', Load(), lineno=111, col_offset=25), [Str('Content-type', lineno=111, col_offset=44)], [], None, None, lineno=111, col_offset=25), Str('text/plain', lineno=111, col_offset=61)], [], None, None, lineno=111, col_offset=8), lineno=111, col_offset=8), Expr(Call(Attribute(Name('response', Load(), lineno=113, col_offset=8), 'read', Load(), lineno=113, col_offset=8), [], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('test_lambda', arguments([Name('self', Param(), lineno=115, col_offset=20)], None, None, []), [Expr(Str('Test that lambda functionality stays the same.  The output produced\n        currently is, I suspect invalid because of the unencoded brackets in the\n        HTML, "<lambda>".\n\n        The subtraction lambda method is tested.\n        ', lineno=121, col_offset=-1), lineno=121, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=122, col_offset=8), 'client', Load(), lineno=122, col_offset=8), 'request', Load(), lineno=122, col_offset=8), [Str('GET', lineno=122, col_offset=28), Str('/', lineno=122, col_offset=35)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8), Assign([Name('response', Store(), lineno=123, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=123, col_offset=19), 'client', Load(), lineno=123, col_offset=19), 'getresponse', Load(), lineno=123, col_offset=19), [], [], None, None, lineno=123, col_offset=19), lineno=123, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=8), 'assertIn', Load(), lineno=125, col_offset=8), [Str('<dl><dt><a name="-&lt;lambda&gt;"><strong>&lt;lambda&gt;</strong></a>(x, y)</dt></dl>', lineno=125, col_offset=22), Call(Attribute(Name('response', Load(), lineno=127, col_offset=22), 'read', Load(), lineno=127, col_offset=22), [], [], None, None, lineno=127, col_offset=22)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('test_autolinking', arguments([Name('self', Param(), lineno=131, col_offset=25)], None, None, []), [Expr(Str('Test that the server correctly automatically wraps references to\n        PEPS and RFCs with links, and that it linkifies text starting with\n        http or ftp protocol prefixes.\n\n        The documentation for the "add" method contains the test material.\n        ', lineno=137, col_offset=-1), lineno=137, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'client', Load(), lineno=138, col_offset=8), 'request', Load(), lineno=138, col_offset=8), [Str('GET', lineno=138, col_offset=28), Str('/', lineno=138, col_offset=35)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Assign([Name('response', Store(), lineno=139, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=139, col_offset=19), 'client', Load(), lineno=139, col_offset=19), 'getresponse', Load(), lineno=139, col_offset=19), [], [], None, None, lineno=139, col_offset=19), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'assertIn', Load(), lineno=141, col_offset=8), [Str('<dl><dt><a name="-add"><strong>add</strong></a>(x, y)</dt><dd><tt>Add&nbsp;two&nbsp;instances&nbsp;together.&nbsp;This&nbsp;follows&nbsp;<a href="http://www.python.org/dev/peps/pep-0008/">PEP008</a>,&nbsp;but&nbsp;has&nbsp;nothing<br>\nto&nbsp;do&nbsp;with&nbsp;<a href="http://www.rfc-editor.org/rfc/rfc1952.txt">RFC1952</a>.&nbsp;Case&nbsp;should&nbsp;matter:&nbsp;pEp008&nbsp;and&nbsp;rFC1952.&nbsp;&nbsp;Things<br>\nthat&nbsp;start&nbsp;with&nbsp;http&nbsp;and&nbsp;ftp&nbsp;should&nbsp;be&nbsp;auto-linked,&nbsp;too:<br>\n<a href="http://google.com">http://google.com</a>.</tt></dd></dl>', lineno=142, col_offset=13), Call(Attribute(Name('response', Load(), lineno=151, col_offset=55), 'read', Load(), lineno=151, col_offset=55), [], [], None, None, lineno=151, col_offset=55)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8)], [Call(Name('make_request_and_skipIf', Load(), lineno=129, col_offset=5), [Compare(Attribute(Attribute(Name('sys', Load(), lineno=129, col_offset=29), 'flags', Load(), lineno=129, col_offset=29), 'optimize', Load(), lineno=129, col_offset=29), [GtE()], [Num(2, lineno=129, col_offset=51)], lineno=129, col_offset=29), Str('Docstrings are omitted with -O2 and above', lineno=130, col_offset=21)], [], None, None, lineno=129, col_offset=5)], lineno=129, col_offset=4), FunctionDef('test_system_methods', arguments([Name('self', Param(), lineno=155, col_offset=28)], None, None, []), [Expr(Str('Test the precense of three consecutive system.* methods.\n\n        This also tests their use of parameter type recognition and the\n        systems related to that process.\n        ', lineno=160, col_offset=-1), lineno=160, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=161, col_offset=8), 'client', Load(), lineno=161, col_offset=8), 'request', Load(), lineno=161, col_offset=8), [Str('GET', lineno=161, col_offset=28), Str('/', lineno=161, col_offset=35)], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8), Assign([Name('response', Store(), lineno=162, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=162, col_offset=19), 'client', Load(), lineno=162, col_offset=19), 'getresponse', Load(), lineno=162, col_offset=19), [], [], None, None, lineno=162, col_offset=19), lineno=162, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=8), 'assertIn', Load(), lineno=164, col_offset=8), [Str('<dl><dt><a name="-system.listMethods"><strong>system.listMethods</strong></a>()</dt><dd><tt><a href="#-system.listMethods">system.listMethods</a>()&nbsp;=&gt;&nbsp;[\'add\',&nbsp;\'subtract\',&nbsp;\'multiple\']<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;methods&nbsp;supported&nbsp;by&nbsp;the&nbsp;server.</tt></dd></dl>\n <dl><dt><a name="-system.methodHelp"><strong>system.methodHelp</strong></a>(method_name)</dt><dd><tt><a href="#-system.methodHelp">system.methodHelp</a>(\'add\')&nbsp;=&gt;&nbsp;"Adds&nbsp;two&nbsp;integers&nbsp;together"<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;string&nbsp;containing&nbsp;documentation&nbsp;for&nbsp;the&nbsp;specified&nbsp;method.</tt></dd></dl>\n <dl><dt><a name="-system.methodSignature"><strong>system.methodSignature</strong></a>(method_name)</dt><dd><tt><a href="#-system.methodSignature">system.methodSignature</a>(\'add\')&nbsp;=&gt;&nbsp;[double,&nbsp;int,&nbsp;int]<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;list&nbsp;describing&nbsp;the&nbsp;signature&nbsp;of&nbsp;the&nbsp;method.&nbsp;In&nbsp;the<br>\nabove&nbsp;example,&nbsp;the&nbsp;add&nbsp;method&nbsp;takes&nbsp;two&nbsp;integers&nbsp;as&nbsp;arguments<br>\nand&nbsp;returns&nbsp;a&nbsp;double&nbsp;result.<br>\n&nbsp;<br>\nThis&nbsp;server&nbsp;does&nbsp;NOT&nbsp;support&nbsp;system.methodSignature.</tt></dd></dl>', lineno=165, col_offset=13), Call(Attribute(Name('response', Load(), lineno=186, col_offset=12), 'read', Load(), lineno=186, col_offset=12), [], [], None, None, lineno=186, col_offset=12)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8)], [Call(Name('make_request_and_skipIf', Load(), lineno=153, col_offset=5), [Compare(Attribute(Attribute(Name('sys', Load(), lineno=153, col_offset=29), 'flags', Load(), lineno=153, col_offset=29), 'optimize', Load(), lineno=153, col_offset=29), [GtE()], [Num(2, lineno=153, col_offset=51)], lineno=153, col_offset=29), Str('Docstrings are omitted with -O2 and above', lineno=154, col_offset=21)], [], None, None, lineno=153, col_offset=5)], lineno=153, col_offset=4), FunctionDef('test_autolink_dotted_methods', arguments([Name('self', Param(), lineno=188, col_offset=37)], None, None, []), [Expr(Str('Test that selfdot values are made strong automatically in the\n        documentation.', lineno=190, col_offset=-1), lineno=190, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=191, col_offset=8), 'client', Load(), lineno=191, col_offset=8), 'request', Load(), lineno=191, col_offset=8), [Str('GET', lineno=191, col_offset=28), Str('/', lineno=191, col_offset=35)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Assign([Name('response', Store(), lineno=192, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=192, col_offset=19), 'client', Load(), lineno=192, col_offset=19), 'getresponse', Load(), lineno=192, col_offset=19), [], [], None, None, lineno=192, col_offset=19), lineno=192, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=8), 'assertIn', Load(), lineno=194, col_offset=8), [Str('Try&nbsp;self.<strong>add</strong>,&nbsp;too.', lineno=194, col_offset=22), Call(Attribute(Name('response', Load(), lineno=195, col_offset=22), 'read', Load(), lineno=195, col_offset=22), [], [], None, None, lineno=195, col_offset=22)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8)], [], lineno=188, col_offset=4)], [], lineno=70, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=198, col_offset=4), 'run_unittest', Load(), lineno=198, col_offset=4), [Name('DocXMLRPCHTTPGETServer', Load(), lineno=198, col_offset=30)], [], None, None, lineno=198, col_offset=4), lineno=198, col_offset=4)], [], lineno=197, col_offset=0), If(Compare(Name('__name__', Load(), lineno=200, col_offset=3), [Eq()], [Str('__main__', lineno=200, col_offset=15)], lineno=200, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=201, col_offset=4), [], [], None, None, lineno=201, col_offset=4), lineno=201, col_offset=4)], [], lineno=200, col_offset=0)])
