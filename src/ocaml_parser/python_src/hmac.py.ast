Module([Expr(Str('HMAC (Keyed-Hashing for Message Authentication) Python module.\n\nImplements the HMAC algorithm as described by RFC 2104.\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('warnings', '_warnings')], lineno=6, col_offset=0), Assign([Name('trans_5C', Store(), lineno=8, col_offset=0)], Call(Attribute(Str('', lineno=8, col_offset=11), 'join', Load(), lineno=8, col_offset=11), [ListComp(Call(Name('chr', Load(), lineno=8, col_offset=21), [BinOp(Name('x', Load(), lineno=8, col_offset=26), BitXor(), Num(92, lineno=8, col_offset=30), lineno=8, col_offset=26)], [], None, None, lineno=8, col_offset=21), [comprehension(Name('x', Store(), lineno=8, col_offset=40), Call(Name('xrange', Load(), lineno=8, col_offset=45), [Num(256, lineno=8, col_offset=52)], [], None, None, lineno=8, col_offset=45), [])], lineno=8, col_offset=21)], [], None, None, lineno=8, col_offset=11), lineno=8, col_offset=0), Assign([Name('trans_36', Store(), lineno=9, col_offset=0)], Call(Attribute(Str('', lineno=9, col_offset=11), 'join', Load(), lineno=9, col_offset=11), [ListComp(Call(Name('chr', Load(), lineno=9, col_offset=21), [BinOp(Name('x', Load(), lineno=9, col_offset=26), BitXor(), Num(54, lineno=9, col_offset=30), lineno=9, col_offset=26)], [], None, None, lineno=9, col_offset=21), [comprehension(Name('x', Store(), lineno=9, col_offset=40), Call(Name('xrange', Load(), lineno=9, col_offset=45), [Num(256, lineno=9, col_offset=52)], [], None, None, lineno=9, col_offset=45), [])], lineno=9, col_offset=21)], [], None, None, lineno=9, col_offset=11), lineno=9, col_offset=0), Assign([Name('digest_size', Store(), lineno=13, col_offset=0)], Name('None', Load(), lineno=13, col_offset=14), lineno=13, col_offset=0), Assign([Name('_secret_backdoor_key', Store(), lineno=18, col_offset=0)], List([], Load(), lineno=18, col_offset=23), lineno=18, col_offset=0), ClassDef('HMAC', [], [Expr(Str('RFC 2104 HMAC class.  Also complies with RFC 4231.\n\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    ', lineno=24, col_offset=-1), lineno=24, col_offset=-1), Assign([Name('blocksize', Store(), lineno=25, col_offset=4)], Num(64, lineno=25, col_offset=16), lineno=25, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=27, col_offset=17), Name('key', Param(), lineno=27, col_offset=23), Name('msg', Param(), lineno=27, col_offset=28), Name('digestmod', Param(), lineno=27, col_offset=40)], None, None, [Name('None', Load(), lineno=27, col_offset=34), Name('None', Load(), lineno=27, col_offset=52)]), [Expr(Str('Create a new HMAC object.\n\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n        digestmod: A module supporting PEP 247.  *OR*\n                   A hashlib constructor returning a new hash object.\n                   Defaults to hashlib.md5.\n        ', lineno=35, col_offset=-1), lineno=35, col_offset=-1), If(Compare(Name('key', Load(), lineno=37, col_offset=11), [Is()], [Name('_secret_backdoor_key', Load(), lineno=37, col_offset=18)], lineno=37, col_offset=11), [Return(None, lineno=38, col_offset=12)], [], lineno=37, col_offset=8), If(Compare(Name('digestmod', Load(), lineno=40, col_offset=11), [Is()], [Name('None', Load(), lineno=40, col_offset=24)], lineno=40, col_offset=11), [Import([alias('hashlib', None)], lineno=41, col_offset=12), Assign([Name('digestmod', Store(), lineno=42, col_offset=12)], Attribute(Name('hashlib', Load(), lineno=42, col_offset=24), 'md5', Load(), lineno=42, col_offset=24), lineno=42, col_offset=12)], [], lineno=40, col_offset=8), If(Call(Name('hasattr', Load(), lineno=44, col_offset=11), [Name('digestmod', Load(), lineno=44, col_offset=19), Str('__call__', lineno=44, col_offset=30)], [], None, None, lineno=44, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=45, col_offset=12), 'digest_cons', Store(), lineno=45, col_offset=12)], Name('digestmod', Load(), lineno=45, col_offset=31), lineno=45, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=47, col_offset=12), 'digest_cons', Store(), lineno=47, col_offset=12)], Lambda(arguments([Name('d', Param(), lineno=47, col_offset=38)], None, None, [Str('', lineno=47, col_offset=40)]), Call(Attribute(Name('digestmod', Load(), lineno=47, col_offset=44), 'new', Load(), lineno=47, col_offset=44), [Name('d', Load(), lineno=47, col_offset=58)], [], None, None, lineno=47, col_offset=44), lineno=47, col_offset=31), lineno=47, col_offset=12)], lineno=44, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=49, col_offset=8), 'outer', Store(), lineno=49, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=49, col_offset=21), 'digest_cons', Load(), lineno=49, col_offset=21), [], [], None, None, lineno=49, col_offset=21), lineno=49, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=50, col_offset=8), 'inner', Store(), lineno=50, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=50, col_offset=21), 'digest_cons', Load(), lineno=50, col_offset=21), [], [], None, None, lineno=50, col_offset=21), lineno=50, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=51, col_offset=8), 'digest_size', Store(), lineno=51, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=51, col_offset=27), 'inner', Load(), lineno=51, col_offset=27), 'digest_size', Load(), lineno=51, col_offset=27), lineno=51, col_offset=8), If(Call(Name('hasattr', Load(), lineno=53, col_offset=11), [Attribute(Name('self', Load(), lineno=53, col_offset=19), 'inner', Load(), lineno=53, col_offset=19), Str('block_size', lineno=53, col_offset=31)], [], None, None, lineno=53, col_offset=11), [Assign([Name('blocksize', Store(), lineno=54, col_offset=12)], Attribute(Attribute(Name('self', Load(), lineno=54, col_offset=24), 'inner', Load(), lineno=54, col_offset=24), 'block_size', Load(), lineno=54, col_offset=24), lineno=54, col_offset=12), If(Compare(Name('blocksize', Load(), lineno=55, col_offset=15), [Lt()], [Num(16, lineno=55, col_offset=27)], lineno=55, col_offset=15), [Expr(Call(Attribute(Name('_warnings', Load(), lineno=58, col_offset=16), 'warn', Load(), lineno=58, col_offset=16), [BinOp(Str('block_size of %d seems too small; using our default of %d.', lineno=58, col_offset=31), Mod(), Tuple([Name('blocksize', Load(), lineno=59, col_offset=51), Attribute(Name('self', Load(), lineno=59, col_offset=62), 'blocksize', Load(), lineno=59, col_offset=62)], Load(), lineno=59, col_offset=51), lineno=58, col_offset=31), Name('RuntimeWarning', Load(), lineno=60, col_offset=31), Num(2, lineno=60, col_offset=47)], [], None, None, lineno=58, col_offset=16), lineno=58, col_offset=16), Assign([Name('blocksize', Store(), lineno=61, col_offset=16)], Attribute(Name('self', Load(), lineno=61, col_offset=28), 'blocksize', Load(), lineno=61, col_offset=28), lineno=61, col_offset=16)], [], lineno=55, col_offset=12)], [Expr(Call(Attribute(Name('_warnings', Load(), lineno=63, col_offset=12), 'warn', Load(), lineno=63, col_offset=12), [BinOp(Str('No block_size attribute on given digest object; Assuming %d.', lineno=63, col_offset=27), Mod(), Attribute(Name('self', Load(), lineno=64, col_offset=45), 'blocksize', Load(), lineno=64, col_offset=45), lineno=63, col_offset=27), Name('RuntimeWarning', Load(), lineno=65, col_offset=27), Num(2, lineno=65, col_offset=43)], [], None, None, lineno=63, col_offset=12), lineno=63, col_offset=12), Assign([Name('blocksize', Store(), lineno=66, col_offset=12)], Attribute(Name('self', Load(), lineno=66, col_offset=24), 'blocksize', Load(), lineno=66, col_offset=24), lineno=66, col_offset=12)], lineno=53, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=68, col_offset=11), [Name('key', Load(), lineno=68, col_offset=15)], [], None, None, lineno=68, col_offset=11), [Gt()], [Name('blocksize', Load(), lineno=68, col_offset=22)], lineno=68, col_offset=11), [Assign([Name('key', Store(), lineno=69, col_offset=12)], Call(Attribute(Call(Attribute(Name('self', Load(), lineno=69, col_offset=18), 'digest_cons', Load(), lineno=69, col_offset=18), [Name('key', Load(), lineno=69, col_offset=35)], [], None, None, lineno=69, col_offset=18), 'digest', Load(), lineno=69, col_offset=18), [], [], None, None, lineno=69, col_offset=18), lineno=69, col_offset=12)], [], lineno=68, col_offset=8), Assign([Name('key', Store(), lineno=71, col_offset=8)], BinOp(Name('key', Load(), lineno=71, col_offset=14), Add(), BinOp(Call(Name('chr', Load(), lineno=71, col_offset=20), [Num(0, lineno=71, col_offset=24)], [], None, None, lineno=71, col_offset=20), Mult(), BinOp(Name('blocksize', Load(), lineno=71, col_offset=30), Sub(), Call(Name('len', Load(), lineno=71, col_offset=42), [Name('key', Load(), lineno=71, col_offset=46)], [], None, None, lineno=71, col_offset=42), lineno=71, col_offset=30), lineno=71, col_offset=20), lineno=71, col_offset=14), lineno=71, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=72, col_offset=8), 'outer', Load(), lineno=72, col_offset=8), 'update', Load(), lineno=72, col_offset=8), [Call(Attribute(Name('key', Load(), lineno=72, col_offset=26), 'translate', Load(), lineno=72, col_offset=26), [Name('trans_5C', Load(), lineno=72, col_offset=40)], [], None, None, lineno=72, col_offset=26)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=73, col_offset=8), 'inner', Load(), lineno=73, col_offset=8), 'update', Load(), lineno=73, col_offset=8), [Call(Attribute(Name('key', Load(), lineno=73, col_offset=26), 'translate', Load(), lineno=73, col_offset=26), [Name('trans_36', Load(), lineno=73, col_offset=40)], [], None, None, lineno=73, col_offset=26)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), If(Compare(Name('msg', Load(), lineno=74, col_offset=11), [IsNot()], [Name('None', Load(), lineno=74, col_offset=22)], lineno=74, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=12), 'update', Load(), lineno=75, col_offset=12), [Name('msg', Load(), lineno=75, col_offset=24)], [], None, None, lineno=75, col_offset=12), lineno=75, col_offset=12)], [], lineno=74, col_offset=8)], [], lineno=27, col_offset=4), FunctionDef('update', arguments([Name('self', Param(), lineno=80, col_offset=15), Name('msg', Param(), lineno=80, col_offset=21)], None, None, []), [Expr(Str('Update this hashing object with the string msg.\n        ', lineno=82, col_offset=-1), lineno=82, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=83, col_offset=8), 'inner', Load(), lineno=83, col_offset=8), 'update', Load(), lineno=83, col_offset=8), [Name('msg', Load(), lineno=83, col_offset=26)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=85, col_offset=13)], None, None, []), [Expr(Str("Return a separate copy of this hashing object.\n\n        An update to this copy won't affect the original object.\n        ", lineno=89, col_offset=-1), lineno=89, col_offset=-1), Assign([Name('other', Store(), lineno=90, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=90, col_offset=16), '__class__', Load(), lineno=90, col_offset=16), [Name('_secret_backdoor_key', Load(), lineno=90, col_offset=31)], [], None, None, lineno=90, col_offset=16), lineno=90, col_offset=8), Assign([Attribute(Name('other', Load(), lineno=91, col_offset=8), 'digest_cons', Store(), lineno=91, col_offset=8)], Attribute(Name('self', Load(), lineno=91, col_offset=28), 'digest_cons', Load(), lineno=91, col_offset=28), lineno=91, col_offset=8), Assign([Attribute(Name('other', Load(), lineno=92, col_offset=8), 'digest_size', Store(), lineno=92, col_offset=8)], Attribute(Name('self', Load(), lineno=92, col_offset=28), 'digest_size', Load(), lineno=92, col_offset=28), lineno=92, col_offset=8), Assign([Attribute(Name('other', Load(), lineno=93, col_offset=8), 'inner', Store(), lineno=93, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=93, col_offset=22), 'inner', Load(), lineno=93, col_offset=22), 'copy', Load(), lineno=93, col_offset=22), [], [], None, None, lineno=93, col_offset=22), lineno=93, col_offset=8), Assign([Attribute(Name('other', Load(), lineno=94, col_offset=8), 'outer', Store(), lineno=94, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=94, col_offset=22), 'outer', Load(), lineno=94, col_offset=22), 'copy', Load(), lineno=94, col_offset=22), [], [], None, None, lineno=94, col_offset=22), lineno=94, col_offset=8), Return(Name('other', Load(), lineno=95, col_offset=15), lineno=95, col_offset=8)], [], lineno=85, col_offset=4), FunctionDef('_current', arguments([Name('self', Param(), lineno=97, col_offset=17)], None, None, []), [Expr(Str('Return a hash object for the current state.\n\n        To be used only internally with digest() and hexdigest().\n        ', lineno=101, col_offset=-1), lineno=101, col_offset=-1), Assign([Name('h', Store(), lineno=102, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=102, col_offset=12), 'outer', Load(), lineno=102, col_offset=12), 'copy', Load(), lineno=102, col_offset=12), [], [], None, None, lineno=102, col_offset=12), lineno=102, col_offset=8), Expr(Call(Attribute(Name('h', Load(), lineno=103, col_offset=8), 'update', Load(), lineno=103, col_offset=8), [Call(Attribute(Attribute(Name('self', Load(), lineno=103, col_offset=17), 'inner', Load(), lineno=103, col_offset=17), 'digest', Load(), lineno=103, col_offset=17), [], [], None, None, lineno=103, col_offset=17)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8), Return(Name('h', Load(), lineno=104, col_offset=15), lineno=104, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('digest', arguments([Name('self', Param(), lineno=106, col_offset=15)], None, None, []), [Expr(Str('Return the hash value of this hashing object.\n\n        This returns a string containing 8-bit data.  The object is\n        not altered in any way by this function; you can continue\n        updating the object after calling this function.\n        ', lineno=112, col_offset=-1), lineno=112, col_offset=-1), Assign([Name('h', Store(), lineno=113, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=113, col_offset=12), '_current', Load(), lineno=113, col_offset=12), [], [], None, None, lineno=113, col_offset=12), lineno=113, col_offset=8), Return(Call(Attribute(Name('h', Load(), lineno=114, col_offset=15), 'digest', Load(), lineno=114, col_offset=15), [], [], None, None, lineno=114, col_offset=15), lineno=114, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('hexdigest', arguments([Name('self', Param(), lineno=116, col_offset=18)], None, None, []), [Expr(Str('Like digest(), but returns a string of hexadecimal digits instead.\n        ', lineno=118, col_offset=-1), lineno=118, col_offset=-1), Assign([Name('h', Store(), lineno=119, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=119, col_offset=12), '_current', Load(), lineno=119, col_offset=12), [], [], None, None, lineno=119, col_offset=12), lineno=119, col_offset=8), Return(Call(Attribute(Name('h', Load(), lineno=120, col_offset=15), 'hexdigest', Load(), lineno=120, col_offset=15), [], [], None, None, lineno=120, col_offset=15), lineno=120, col_offset=8)], [], lineno=116, col_offset=4)], [], lineno=20, col_offset=0), FunctionDef('new', arguments([Name('key', Param(), lineno=122, col_offset=8), Name('msg', Param(), lineno=122, col_offset=13), Name('digestmod', Param(), lineno=122, col_offset=25)], None, None, [Name('None', Load(), lineno=122, col_offset=19), Name('None', Load(), lineno=122, col_offset=37)]), [Expr(Str("Create a new hashing object and return it.\n\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    ", lineno=132, col_offset=-1), lineno=132, col_offset=-1), Return(Call(Name('HMAC', Load(), lineno=133, col_offset=11), [Name('key', Load(), lineno=133, col_offset=16), Name('msg', Load(), lineno=133, col_offset=21), Name('digestmod', Load(), lineno=133, col_offset=26)], [], None, None, lineno=133, col_offset=11), lineno=133, col_offset=4)], [], lineno=122, col_offset=0)])
