Module([Expr(Str('fixapplepython23 - Fix Apple-installed Python 2.3 (on Mac OS X 10.3)\n\nPython 2.3 (and 2.3.X for X<5) have the problem that building an extension\nfor a framework installation may accidentally pick up the framework\nof a newer Python, in stead of the one that was used to build the extension.\n\nThis script modifies the Makefile (in .../lib/python2.3/config) to use\nthe newer method of linking extensions with "-undefined dynamic_lookup"\nwhich fixes this problem.\n\nThe script will first check all prerequisites, and return a zero exit\nstatus also when nothing needs to be fixed.\n', lineno=14, col_offset=-1), lineno=14, col_offset=-1), Import([alias('sys', None)], lineno=15, col_offset=0), Import([alias('os', None)], lineno=16, col_offset=0), Import([alias('gestalt', None)], lineno=17, col_offset=0), Assign([Name('MAKEFILE', Store(), lineno=19, col_offset=0)], Str('/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/config/Makefile', lineno=19, col_offset=9), lineno=19, col_offset=0), Assign([Name('CHANGES', Store(), lineno=20, col_offset=0)], Tuple([Tuple([Str('LDSHARED=\t$(CC) $(LDFLAGS) -bundle -framework $(PYTHONFRAMEWORK)\n', lineno=21, col_offset=4), Str('LDSHARED=\t$(CC) $(LDFLAGS) -bundle -undefined dynamic_lookup\n', lineno=22, col_offset=4)], Load(), lineno=21, col_offset=4), Tuple([Str('BLDSHARED=\t$(CC) $(LDFLAGS) -bundle -framework $(PYTHONFRAMEWORK)\n', lineno=24, col_offset=4), Str('BLDSHARED=\t$(CC) $(LDFLAGS) -bundle -undefined dynamic_lookup\n', lineno=25, col_offset=4)], Load(), lineno=24, col_offset=4), Tuple([Str('CC=\t\tgcc\n', lineno=27, col_offset=4), Str('CC=\t\t/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/config/PantherPythonFix/run-gcc\n', lineno=28, col_offset=4)], Load(), lineno=27, col_offset=4), Tuple([Str('CXX=\t\tc++\n', lineno=30, col_offset=4), Str('CXX=\t\t/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/config/PantherPythonFix/run-g++\n', lineno=31, col_offset=4)], Load(), lineno=30, col_offset=4)], Load(), lineno=20, col_offset=9), lineno=20, col_offset=0), Assign([Name('GCC_SCRIPT', Store(), lineno=34, col_offset=0)], Str('/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/config/PantherPythonFix/run-gcc', lineno=34, col_offset=11), lineno=34, col_offset=0), Assign([Name('GXX_SCRIPT', Store(), lineno=35, col_offset=0)], Str('/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/config/PantherPythonFix/run-g++', lineno=35, col_offset=11), lineno=35, col_offset=0), Assign([Name('SCRIPT', Store(), lineno=36, col_offset=0)], Str('#!/bin/sh\nexport MACOSX_DEPLOYMENT_TARGET=10.3\nexec %s "${@}"\n', lineno=39, col_offset=-1), lineno=36, col_offset=0), FunctionDef('findline', arguments([Name('lines', Param(), lineno=41, col_offset=13), Name('start', Param(), lineno=41, col_offset=20)], None, None, []), [Expr(Str('return line starting with given string or -1', lineno=42, col_offset=4), lineno=42, col_offset=4), For(Name('i', Store(), lineno=43, col_offset=8), Call(Name('range', Load(), lineno=43, col_offset=13), [Call(Name('len', Load(), lineno=43, col_offset=19), [Name('lines', Load(), lineno=43, col_offset=23)], [], None, None, lineno=43, col_offset=19)], [], None, None, lineno=43, col_offset=13), [If(Compare(Subscript(Subscript(Name('lines', Load(), lineno=44, col_offset=11), Index(Name('i', Load(), lineno=44, col_offset=17)), Load(), lineno=44, col_offset=11), Slice(None, Call(Name('len', Load(), lineno=44, col_offset=21), [Name('start', Load(), lineno=44, col_offset=25)], [], None, None, lineno=44, col_offset=21), None), Load(), lineno=44, col_offset=11), [Eq()], [Name('start', Load(), lineno=44, col_offset=36)], lineno=44, col_offset=11), [Return(Name('i', Load(), lineno=45, col_offset=19), lineno=45, col_offset=12)], [], lineno=44, col_offset=8)], [], lineno=43, col_offset=4), Return(Num(-1, lineno=46, col_offset=12), lineno=46, col_offset=4)], [], lineno=41, col_offset=0), FunctionDef('fix', arguments([Name('makefile', Param(), lineno=48, col_offset=8), Name('do_apply', Param(), lineno=48, col_offset=18)], None, None, []), [Expr(Str('Fix the Makefile, if required.', lineno=49, col_offset=4), lineno=49, col_offset=4), Assign([Name('fixed', Store(), lineno=50, col_offset=4)], Name('False', Load(), lineno=50, col_offset=12), lineno=50, col_offset=4), Assign([Name('lines', Store(), lineno=51, col_offset=4)], Call(Attribute(Call(Name('open', Load(), lineno=51, col_offset=12), [Name('makefile', Load(), lineno=51, col_offset=17)], [], None, None, lineno=51, col_offset=12), 'readlines', Load(), lineno=51, col_offset=12), [], [], None, None, lineno=51, col_offset=12), lineno=51, col_offset=4), For(Tuple([Name('old', Store(), lineno=53, col_offset=8), Name('new', Store(), lineno=53, col_offset=13)], Store(), lineno=53, col_offset=8), Name('CHANGES', Load(), lineno=53, col_offset=20), [Assign([Name('i', Store(), lineno=54, col_offset=8)], Call(Name('findline', Load(), lineno=54, col_offset=12), [Name('lines', Load(), lineno=54, col_offset=21), Name('new', Load(), lineno=54, col_offset=28)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=8), If(Compare(Name('i', Load(), lineno=55, col_offset=11), [GtE()], [Num(0, lineno=55, col_offset=16)], lineno=55, col_offset=11), [Continue( lineno=57, col_offset=12)], [], lineno=55, col_offset=8), Assign([Name('i', Store(), lineno=58, col_offset=8)], Call(Name('findline', Load(), lineno=58, col_offset=12), [Name('lines', Load(), lineno=58, col_offset=21), Name('old', Load(), lineno=58, col_offset=28)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=8), If(Compare(Name('i', Load(), lineno=59, col_offset=11), [Lt()], [Num(0, lineno=59, col_offset=15)], lineno=59, col_offset=11), [Print(None, [Str('fixapplepython23: Python installation not fixed (appears broken)', lineno=60, col_offset=18)], True, lineno=60, col_offset=12), Print(None, [Str('fixapplepython23: missing line:', lineno=61, col_offset=18), Name('old', Load(), lineno=61, col_offset=53)], True, lineno=61, col_offset=12), Return(Num(2, lineno=62, col_offset=19), lineno=62, col_offset=12)], [], lineno=59, col_offset=8), Assign([Subscript(Name('lines', Load(), lineno=63, col_offset=8), Index(Name('i', Load(), lineno=63, col_offset=14)), Store(), lineno=63, col_offset=8)], Name('new', Load(), lineno=63, col_offset=19), lineno=63, col_offset=8), Assign([Name('fixed', Store(), lineno=64, col_offset=8)], Name('True', Load(), lineno=64, col_offset=16), lineno=64, col_offset=8)], [], lineno=53, col_offset=4), If(Name('fixed', Load(), lineno=66, col_offset=7), [If(Name('do_apply', Load(), lineno=67, col_offset=11), [Print(None, [Str('fixapplepython23: Fix to Apple-installed Python 2.3 applied', lineno=68, col_offset=18)], True, lineno=68, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=69, col_offset=12), 'rename', Load(), lineno=69, col_offset=12), [Name('makefile', Load(), lineno=69, col_offset=22), BinOp(Name('makefile', Load(), lineno=69, col_offset=32), Add(), Str('~', lineno=69, col_offset=43), lineno=69, col_offset=32)], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12), Expr(Call(Attribute(Call(Name('open', Load(), lineno=70, col_offset=12), [Name('makefile', Load(), lineno=70, col_offset=17), Str('w', lineno=70, col_offset=27)], [], None, None, lineno=70, col_offset=12), 'writelines', Load(), lineno=70, col_offset=12), [Name('lines', Load(), lineno=70, col_offset=43)], [], None, None, lineno=70, col_offset=12), lineno=70, col_offset=12), Return(Num(0, lineno=71, col_offset=19), lineno=71, col_offset=12)], [Print(None, [Str('fixapplepython23: Fix to Apple-installed Python 2.3 should be applied', lineno=73, col_offset=18)], True, lineno=73, col_offset=12), Return(Num(1, lineno=74, col_offset=19), lineno=74, col_offset=12)], lineno=67, col_offset=8)], [Print(None, [Str('fixapplepython23: No fix needed, appears to have been applied before', lineno=76, col_offset=14)], True, lineno=76, col_offset=8), Return(Num(0, lineno=77, col_offset=15), lineno=77, col_offset=8)], lineno=66, col_offset=4)], [], lineno=48, col_offset=0), FunctionDef('makescript', arguments([Name('filename', Param(), lineno=79, col_offset=15), Name('compiler', Param(), lineno=79, col_offset=25)], None, None, []), [Expr(Str('Create a wrapper script for a compiler', lineno=80, col_offset=4), lineno=80, col_offset=4), Assign([Name('dirname', Store(), lineno=81, col_offset=4)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=81, col_offset=14), 'path', Load(), lineno=81, col_offset=14), 'split', Load(), lineno=81, col_offset=14), [Name('filename', Load(), lineno=81, col_offset=28)], [], None, None, lineno=81, col_offset=14), Index(Num(0, lineno=81, col_offset=38)), Load(), lineno=81, col_offset=14), lineno=81, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('os', Load(), lineno=82, col_offset=11), 'access', Load(), lineno=82, col_offset=11), [Name('dirname', Load(), lineno=82, col_offset=21), Attribute(Name('os', Load(), lineno=82, col_offset=30), 'X_OK', Load(), lineno=82, col_offset=30)], [], None, None, lineno=82, col_offset=11), lineno=82, col_offset=7), [Expr(Call(Attribute(Name('os', Load(), lineno=83, col_offset=8), 'mkdir', Load(), lineno=83, col_offset=8), [Name('dirname', Load(), lineno=83, col_offset=17), Num(493, lineno=83, col_offset=26)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8)], [], lineno=82, col_offset=4), Assign([Name('fp', Store(), lineno=84, col_offset=4)], Call(Name('open', Load(), lineno=84, col_offset=9), [Name('filename', Load(), lineno=84, col_offset=14), Str('w', lineno=84, col_offset=24)], [], None, None, lineno=84, col_offset=9), lineno=84, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=85, col_offset=4), 'write', Load(), lineno=85, col_offset=4), [BinOp(Name('SCRIPT', Load(), lineno=85, col_offset=13), Mod(), Name('compiler', Load(), lineno=85, col_offset=22), lineno=85, col_offset=13)], [], None, None, lineno=85, col_offset=4), lineno=85, col_offset=4), Expr(Call(Attribute(Name('fp', Load(), lineno=86, col_offset=4), 'close', Load(), lineno=86, col_offset=4), [], [], None, None, lineno=86, col_offset=4), lineno=86, col_offset=4), Expr(Call(Attribute(Name('os', Load(), lineno=87, col_offset=4), 'chmod', Load(), lineno=87, col_offset=4), [Name('filename', Load(), lineno=87, col_offset=13), Num(493, lineno=87, col_offset=23)], [], None, None, lineno=87, col_offset=4), lineno=87, col_offset=4), Print(None, [Str('fixapplepython23: Created', lineno=88, col_offset=10), Name('filename', Load(), lineno=88, col_offset=39)], True, lineno=88, col_offset=4)], [], lineno=79, col_offset=0), FunctionDef('main', arguments([], None, None, []), [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=92, col_offset=7), [Attribute(Name('sys', Load(), lineno=92, col_offset=11), 'argv', Load(), lineno=92, col_offset=11)], [], None, None, lineno=92, col_offset=7), [Gt()], [Num(1, lineno=92, col_offset=23)], lineno=92, col_offset=7), Compare(Subscript(Attribute(Name('sys', Load(), lineno=92, col_offset=29), 'argv', Load(), lineno=92, col_offset=29), Index(Num(1, lineno=92, col_offset=38)), Load(), lineno=92, col_offset=29), [Eq()], [Str('-n', lineno=92, col_offset=44)], lineno=92, col_offset=29)], lineno=92, col_offset=7), [Assign([Name('do_apply', Store(), lineno=93, col_offset=8)], Name('False', Load(), lineno=93, col_offset=19), lineno=93, col_offset=8)], [Assign([Name('do_apply', Store(), lineno=95, col_offset=8)], Name('True', Load(), lineno=95, col_offset=19), lineno=95, col_offset=8)], lineno=92, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=97, col_offset=7), 'byteorder', Load(), lineno=97, col_offset=7), [Eq()], [Str('little', lineno=97, col_offset=24)], lineno=97, col_offset=7), [Print(None, [Str('fixapplypython23: no fix is needed on MacOSX on Intel', lineno=99, col_offset=14)], True, lineno=99, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=100, col_offset=8), 'exit', Load(), lineno=100, col_offset=8), [Num(0, lineno=100, col_offset=17)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8)], [], lineno=97, col_offset=4), If(Compare(Call(Attribute(Name('gestalt', Load(), lineno=102, col_offset=7), 'gestalt', Load(), lineno=102, col_offset=7), [Str('sysv', lineno=102, col_offset=23)], [], None, None, lineno=102, col_offset=7), [Lt()], [Num(4144, lineno=102, col_offset=33)], lineno=102, col_offset=7), [Print(None, [Str('fixapplepython23: no fix needed on MacOSX < 10.3', lineno=103, col_offset=14)], True, lineno=103, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=104, col_offset=8), 'exit', Load(), lineno=104, col_offset=8), [Num(0, lineno=104, col_offset=17)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8)], [], lineno=102, col_offset=4), If(Compare(Call(Attribute(Name('gestalt', Load(), lineno=106, col_offset=7), 'gestalt', Load(), lineno=106, col_offset=7), [Str('sysv', lineno=106, col_offset=23)], [], None, None, lineno=106, col_offset=7), [GtE()], [Num(4160, lineno=106, col_offset=34)], lineno=106, col_offset=7), [Print(None, [Str('fixapplepython23: no fix needed on MacOSX >= 10.4', lineno=107, col_offset=14)], True, lineno=107, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=108, col_offset=8), 'exit', Load(), lineno=108, col_offset=8), [Num(0, lineno=108, col_offset=17)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8)], [], lineno=106, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=111, col_offset=11), 'path', Load(), lineno=111, col_offset=11), 'exists', Load(), lineno=111, col_offset=11), [Name('MAKEFILE', Load(), lineno=111, col_offset=26)], [], None, None, lineno=111, col_offset=11), lineno=111, col_offset=7), [Print(None, [Str('fixapplepython23: Python framework does not appear to be installed (?), nothing fixed', lineno=112, col_offset=14)], True, lineno=112, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=113, col_offset=8), 'exit', Load(), lineno=113, col_offset=8), [Num(0, lineno=113, col_offset=17)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8)], [], lineno=111, col_offset=4), If(BoolOp(And(), [Name('do_apply', Load(), lineno=115, col_offset=7), UnaryOp(Not(), Call(Attribute(Name('os', Load(), lineno=115, col_offset=24), 'access', Load(), lineno=115, col_offset=24), [Name('MAKEFILE', Load(), lineno=115, col_offset=34), Attribute(Name('os', Load(), lineno=115, col_offset=44), 'W_OK', Load(), lineno=115, col_offset=44)], [], None, None, lineno=115, col_offset=24), lineno=115, col_offset=20)], lineno=115, col_offset=7), [Print(None, [Str('fixapplepython23: No write permission, please run with "sudo"', lineno=116, col_offset=14)], True, lineno=116, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=117, col_offset=8), 'exit', Load(), lineno=117, col_offset=8), [Num(2, lineno=117, col_offset=17)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8)], [], lineno=115, col_offset=4), If(Name('do_apply', Load(), lineno=119, col_offset=7), [If(UnaryOp(Not(), Call(Attribute(Name('os', Load(), lineno=120, col_offset=15), 'access', Load(), lineno=120, col_offset=15), [Name('GCC_SCRIPT', Load(), lineno=120, col_offset=25), Attribute(Name('os', Load(), lineno=120, col_offset=37), 'X_OK', Load(), lineno=120, col_offset=37)], [], None, None, lineno=120, col_offset=15), lineno=120, col_offset=11), [Expr(Call(Name('makescript', Load(), lineno=121, col_offset=12), [Name('GCC_SCRIPT', Load(), lineno=121, col_offset=23), Str('gcc', lineno=121, col_offset=35)], [], None, None, lineno=121, col_offset=12), lineno=121, col_offset=12)], [], lineno=120, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('os', Load(), lineno=122, col_offset=15), 'access', Load(), lineno=122, col_offset=15), [Name('GXX_SCRIPT', Load(), lineno=122, col_offset=25), Attribute(Name('os', Load(), lineno=122, col_offset=37), 'X_OK', Load(), lineno=122, col_offset=37)], [], None, None, lineno=122, col_offset=15), lineno=122, col_offset=11), [Expr(Call(Name('makescript', Load(), lineno=123, col_offset=12), [Name('GXX_SCRIPT', Load(), lineno=123, col_offset=23), Str('g++', lineno=123, col_offset=35)], [], None, None, lineno=123, col_offset=12), lineno=123, col_offset=12)], [], lineno=122, col_offset=8)], [], lineno=119, col_offset=4), Assign([Name('rv', Store(), lineno=125, col_offset=4)], Call(Name('fix', Load(), lineno=125, col_offset=9), [Name('MAKEFILE', Load(), lineno=125, col_offset=13), Name('do_apply', Load(), lineno=125, col_offset=23)], [], None, None, lineno=125, col_offset=9), lineno=125, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=127, col_offset=4), 'exit', Load(), lineno=127, col_offset=4), [Num(0, lineno=127, col_offset=13)], [], None, None, lineno=127, col_offset=4), lineno=127, col_offset=4)], [], lineno=90, col_offset=0), If(Compare(Name('__name__', Load(), lineno=129, col_offset=3), [Eq()], [Str('__main__', lineno=129, col_offset=15)], lineno=129, col_offset=3), [Expr(Call(Name('main', Load(), lineno=130, col_offset=4), [], [], None, None, lineno=130, col_offset=4), lineno=130, col_offset=4)], [], lineno=129, col_offset=0)])
