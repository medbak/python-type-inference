Module([ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=1, col_offset=0), Import([alias('json', None)], lineno=3, col_offset=0), Assign([Name('JSON', Store(), lineno=6, col_offset=0)], Str('\n{\n    "JSON Test Pattern pass3": {\n        "The outermost value": "must be an object or array.",\n        "In this test": "It is an object."\n    }\n}\n', lineno=13, col_offset=-1), lineno=6, col_offset=0), ClassDef('TestPass3', [Name('TestCase', Load(), lineno=15, col_offset=16)], [FunctionDef('test_parse', arguments([Name('self', Param(), lineno=16, col_offset=19)], None, None, []), [Assign([Name('res', Store(), lineno=18, col_offset=8)], Call(Attribute(Name('json', Load(), lineno=18, col_offset=14), 'loads', Load(), lineno=18, col_offset=14), [Name('JSON', Load(), lineno=18, col_offset=25)], [], None, None, lineno=18, col_offset=14), lineno=18, col_offset=8), Assign([Name('out', Store(), lineno=19, col_offset=8)], Call(Attribute(Name('json', Load(), lineno=19, col_offset=14), 'dumps', Load(), lineno=19, col_offset=14), [Name('res', Load(), lineno=19, col_offset=25)], [], None, None, lineno=19, col_offset=14), lineno=19, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=20, col_offset=8), 'assertEqual', Load(), lineno=20, col_offset=8), [Name('res', Load(), lineno=20, col_offset=25), Call(Attribute(Name('json', Load(), lineno=20, col_offset=30), 'loads', Load(), lineno=20, col_offset=30), [Name('out', Load(), lineno=20, col_offset=41)], [], None, None, lineno=20, col_offset=30)], [], None, None, lineno=20, col_offset=8), lineno=20, col_offset=8)], [], lineno=16, col_offset=4)], [], lineno=15, col_offset=0)])
