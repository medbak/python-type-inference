Module([Expr(Str(" Locale support.\n\n    The module provides low-level access to the C lib's locale APIs\n    and adds high level number formatting APIs as well as a locale\n    aliasing engine to complement these.\n\n    The aliasing engine includes support for many commonly used locale\n    names and maps them to values suitable for passing to the C lib's\n    setlocale() function. It also includes default encodings for all\n    supported locale names.\n\n", lineno=12, col_offset=-1), lineno=12, col_offset=-1), Import([alias('sys', None)], lineno=14, col_offset=0), Import([alias('encodings', None)], lineno=15, col_offset=0), Import([alias('encodings.aliases', None)], lineno=16, col_offset=0), Import([alias('re', None)], lineno=17, col_offset=0), Import([alias('operator', None)], lineno=18, col_offset=0), Import([alias('functools', None)], lineno=19, col_offset=0), Assign([Name('__all__', Store(), lineno=27, col_offset=0)], List([Str('getlocale', lineno=27, col_offset=11), Str('getdefaultlocale', lineno=27, col_offset=24), Str('getpreferredencoding', lineno=27, col_offset=44), Str('Error', lineno=27, col_offset=68), Str('setlocale', lineno=28, col_offset=11), Str('resetlocale', lineno=28, col_offset=24), Str('localeconv', lineno=28, col_offset=39), Str('strcoll', lineno=28, col_offset=53), Str('strxfrm', lineno=28, col_offset=64), Str('str', lineno=29, col_offset=11), Str('atof', lineno=29, col_offset=18), Str('atoi', lineno=29, col_offset=26), Str('format', lineno=29, col_offset=34), Str('format_string', lineno=29, col_offset=44), Str('currency', lineno=29, col_offset=61), Str('normalize', lineno=30, col_offset=11), Str('LC_CTYPE', lineno=30, col_offset=24), Str('LC_COLLATE', lineno=30, col_offset=36), Str('LC_TIME', lineno=30, col_offset=50), Str('LC_MONETARY', lineno=30, col_offset=61), Str('LC_NUMERIC', lineno=31, col_offset=11), Str('LC_ALL', lineno=31, col_offset=25), Str('CHAR_MAX', lineno=31, col_offset=35)], Load(), lineno=27, col_offset=10), lineno=27, col_offset=0), TryExcept([ImportFrom('_locale', [alias('*', None)], 0, lineno=35, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=37, col_offset=7), None, [Assign([Name('CHAR_MAX', Store(), lineno=41, col_offset=4)], Num(127, lineno=41, col_offset=15), lineno=41, col_offset=4), Assign([Name('LC_ALL', Store(), lineno=42, col_offset=4)], Num(6, lineno=42, col_offset=13), lineno=42, col_offset=4), Assign([Name('LC_COLLATE', Store(), lineno=43, col_offset=4)], Num(3, lineno=43, col_offset=17), lineno=43, col_offset=4), Assign([Name('LC_CTYPE', Store(), lineno=44, col_offset=4)], Num(0, lineno=44, col_offset=15), lineno=44, col_offset=4), Assign([Name('LC_MESSAGES', Store(), lineno=45, col_offset=4)], Num(5, lineno=45, col_offset=18), lineno=45, col_offset=4), Assign([Name('LC_MONETARY', Store(), lineno=46, col_offset=4)], Num(4, lineno=46, col_offset=18), lineno=46, col_offset=4), Assign([Name('LC_NUMERIC', Store(), lineno=47, col_offset=4)], Num(1, lineno=47, col_offset=17), lineno=47, col_offset=4), Assign([Name('LC_TIME', Store(), lineno=48, col_offset=4)], Num(2, lineno=48, col_offset=14), lineno=48, col_offset=4), Assign([Name('Error', Store(), lineno=49, col_offset=4)], Name('ValueError', Load(), lineno=49, col_offset=12), lineno=49, col_offset=4), FunctionDef('localeconv', arguments([], None, None, []), [Expr(Str(' localeconv() -> dict.\n            Returns numeric and monetary locale-specific parameters.\n        ', lineno=54, col_offset=-1), lineno=54, col_offset=-1), Return(Dict([Str('grouping', lineno=56, col_offset=16), Str('currency_symbol', lineno=57, col_offset=16), Str('n_sign_posn', lineno=58, col_offset=16), Str('p_cs_precedes', lineno=59, col_offset=16), Str('n_cs_precedes', lineno=60, col_offset=16), Str('mon_grouping', lineno=61, col_offset=16), Str('n_sep_by_space', lineno=62, col_offset=16), Str('decimal_point', lineno=63, col_offset=16), Str('negative_sign', lineno=64, col_offset=16), Str('positive_sign', lineno=65, col_offset=16), Str('p_sep_by_space', lineno=66, col_offset=16), Str('int_curr_symbol', lineno=67, col_offset=16), Str('p_sign_posn', lineno=68, col_offset=16), Str('thousands_sep', lineno=69, col_offset=16), Str('mon_thousands_sep', lineno=70, col_offset=16), Str('frac_digits', lineno=71, col_offset=16), Str('mon_decimal_point', lineno=72, col_offset=16), Str('int_frac_digits', lineno=73, col_offset=16)], [List([Num(127, lineno=56, col_offset=29)], Load(), lineno=56, col_offset=28), Str('', lineno=57, col_offset=35), Num(127, lineno=58, col_offset=31), Num(127, lineno=59, col_offset=33), Num(127, lineno=60, col_offset=33), List([], Load(), lineno=61, col_offset=32), Num(127, lineno=62, col_offset=34), Str('.', lineno=63, col_offset=33), Str('', lineno=64, col_offset=33), Str('', lineno=65, col_offset=33), Num(127, lineno=66, col_offset=34), Str('', lineno=67, col_offset=35), Num(127, lineno=68, col_offset=31), Str('', lineno=69, col_offset=33), Str('', lineno=70, col_offset=37), Num(127, lineno=71, col_offset=31), Str('', lineno=72, col_offset=37), Num(127, lineno=73, col_offset=35)], lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('setlocale', arguments([Name('category', Param(), lineno=75, col_offset=18), Name('value', Param(), lineno=75, col_offset=28)], None, None, [Name('None', Load(), lineno=75, col_offset=34)]), [Expr(Str(' setlocale(integer,string=None) -> string.\n            Activates/queries locale processing.\n        ', lineno=78, col_offset=-1), lineno=78, col_offset=-1), If(Compare(Name('value', Load(), lineno=79, col_offset=11), [NotIn()], [Tuple([Name('None', Load(), lineno=79, col_offset=25), Str('', lineno=79, col_offset=31), Str('C', lineno=79, col_offset=35)], Load(), lineno=79, col_offset=25)], lineno=79, col_offset=11), [Raise(Name('Error', Load(), lineno=80, col_offset=18), Str('_locale emulation only supports "C" locale', lineno=80, col_offset=25), None, lineno=80, col_offset=12)], [], lineno=79, col_offset=8), Return(Str('C', lineno=81, col_offset=15), lineno=81, col_offset=8)], [], lineno=75, col_offset=4), FunctionDef('strcoll', arguments([Name('a', Param(), lineno=83, col_offset=16), Name('b', Param(), lineno=83, col_offset=18)], None, None, []), [Expr(Str(' strcoll(string,string) -> int.\n            Compares two strings according to the locale.\n        ', lineno=86, col_offset=-1), lineno=86, col_offset=-1), Return(Call(Name('cmp', Load(), lineno=87, col_offset=15), [Name('a', Load(), lineno=87, col_offset=19), Name('b', Load(), lineno=87, col_offset=21)], [], None, None, lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('strxfrm', arguments([Name('s', Param(), lineno=89, col_offset=16)], None, None, []), [Expr(Str(' strxfrm(string) -> string.\n            Returns a string that behaves for cmp locale-aware.\n        ', lineno=92, col_offset=-1), lineno=92, col_offset=-1), Return(Name('s', Load(), lineno=93, col_offset=15), lineno=93, col_offset=8)], [], lineno=89, col_offset=4)], lineno=37, col_offset=0)], [], lineno=33, col_offset=0), Assign([Name('_localeconv', Store(), lineno=96, col_offset=0)], Name('localeconv', Load(), lineno=96, col_offset=14), lineno=96, col_offset=0), Assign([Name('_override_localeconv', Store(), lineno=100, col_offset=0)], Dict([], [], lineno=100, col_offset=23), lineno=100, col_offset=0), FunctionDef('localeconv', arguments([], None, None, []), [Assign([Name('d', Store(), lineno=104, col_offset=4)], Call(Name('_localeconv', Load(), lineno=104, col_offset=8), [], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=4), If(Name('_override_localeconv', Load(), lineno=105, col_offset=7), [Expr(Call(Attribute(Name('d', Load(), lineno=106, col_offset=8), 'update', Load(), lineno=106, col_offset=8), [Name('_override_localeconv', Load(), lineno=106, col_offset=17)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8)], [], lineno=105, col_offset=4), Return(Name('d', Load(), lineno=107, col_offset=11), lineno=107, col_offset=4)], [Call(Attribute(Name('functools', Load(), lineno=102, col_offset=1), 'wraps', Load(), lineno=102, col_offset=1), [Name('_localeconv', Load(), lineno=102, col_offset=17)], [], None, None, lineno=102, col_offset=1)], lineno=102, col_offset=0), FunctionDef('_grouping_intervals', arguments([Name('grouping', Param(), lineno=116, col_offset=24)], None, None, []), [Assign([Name('last_interval', Store(), lineno=117, col_offset=4)], Name('None', Load(), lineno=117, col_offset=20), lineno=117, col_offset=4), For(Name('interval', Store(), lineno=118, col_offset=8), Name('grouping', Load(), lineno=118, col_offset=20), [If(Compare(Name('interval', Load(), lineno=120, col_offset=11), [Eq()], [Name('CHAR_MAX', Load(), lineno=120, col_offset=23)], lineno=120, col_offset=11), [Return(None, lineno=121, col_offset=12)], [], lineno=120, col_offset=8), If(Compare(Name('interval', Load(), lineno=123, col_offset=11), [Eq()], [Num(0, lineno=123, col_offset=23)], lineno=123, col_offset=11), [If(Compare(Name('last_interval', Load(), lineno=124, col_offset=15), [Is()], [Name('None', Load(), lineno=124, col_offset=32)], lineno=124, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=125, col_offset=22), [Str('invalid grouping', lineno=125, col_offset=33)], [], None, None, lineno=125, col_offset=22), None, None, lineno=125, col_offset=16)], [], lineno=124, col_offset=12), While(Name('True', Load(), lineno=126, col_offset=18), [Expr(Yield(Name('last_interval', Load(), lineno=127, col_offset=22), lineno=127, col_offset=16), lineno=127, col_offset=16)], [], lineno=126, col_offset=12)], [], lineno=123, col_offset=8), Expr(Yield(Name('interval', Load(), lineno=128, col_offset=14), lineno=128, col_offset=8), lineno=128, col_offset=8), Assign([Name('last_interval', Store(), lineno=129, col_offset=8)], Name('interval', Load(), lineno=129, col_offset=24), lineno=129, col_offset=8)], [], lineno=118, col_offset=4)], [], lineno=116, col_offset=0), FunctionDef('_group', arguments([Name('s', Param(), lineno=132, col_offset=11), Name('monetary', Param(), lineno=132, col_offset=14)], None, None, [Name('False', Load(), lineno=132, col_offset=23)]), [Assign([Name('conv', Store(), lineno=133, col_offset=4)], Call(Name('localeconv', Load(), lineno=133, col_offset=11), [], [], None, None, lineno=133, col_offset=11), lineno=133, col_offset=4), Assign([Name('thousands_sep', Store(), lineno=134, col_offset=4)], Subscript(Name('conv', Load(), lineno=134, col_offset=20), Index(BoolOp(Or(), [BoolOp(And(), [Name('monetary', Load(), lineno=134, col_offset=25), Str('mon_thousands_sep', lineno=134, col_offset=38)], lineno=134, col_offset=25), Str('thousands_sep', lineno=134, col_offset=61)], lineno=134, col_offset=25)), Load(), lineno=134, col_offset=20), lineno=134, col_offset=4), Assign([Name('grouping', Store(), lineno=135, col_offset=4)], Subscript(Name('conv', Load(), lineno=135, col_offset=15), Index(BoolOp(Or(), [BoolOp(And(), [Name('monetary', Load(), lineno=135, col_offset=20), Str('mon_grouping', lineno=135, col_offset=33)], lineno=135, col_offset=20), Str('grouping', lineno=135, col_offset=51)], lineno=135, col_offset=20)), Load(), lineno=135, col_offset=15), lineno=135, col_offset=4), If(UnaryOp(Not(), Name('grouping', Load(), lineno=136, col_offset=11), lineno=136, col_offset=7), [Return(Tuple([Name('s', Load(), lineno=137, col_offset=16), Num(0, lineno=137, col_offset=19)], Load(), lineno=137, col_offset=16), lineno=137, col_offset=8)], [], lineno=136, col_offset=4), Assign([Name('result', Store(), lineno=138, col_offset=4)], Str('', lineno=138, col_offset=13), lineno=138, col_offset=4), Assign([Name('seps', Store(), lineno=139, col_offset=4)], Num(0, lineno=139, col_offset=11), lineno=139, col_offset=4), If(Compare(Subscript(Name('s', Load(), lineno=140, col_offset=7), Index(Num(-1, lineno=140, col_offset=10)), Load(), lineno=140, col_offset=7), [Eq()], [Str(' ', lineno=140, col_offset=16)], lineno=140, col_offset=7), [Assign([Name('stripped', Store(), lineno=141, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=141, col_offset=19), 'rstrip', Load(), lineno=141, col_offset=19), [], [], None, None, lineno=141, col_offset=19), lineno=141, col_offset=8), Assign([Name('right_spaces', Store(), lineno=142, col_offset=8)], Subscript(Name('s', Load(), lineno=142, col_offset=23), Slice(Call(Name('len', Load(), lineno=142, col_offset=25), [Name('stripped', Load(), lineno=142, col_offset=29)], [], None, None, lineno=142, col_offset=25), None, None), Load(), lineno=142, col_offset=23), lineno=142, col_offset=8), Assign([Name('s', Store(), lineno=143, col_offset=8)], Name('stripped', Load(), lineno=143, col_offset=12), lineno=143, col_offset=8)], [Assign([Name('right_spaces', Store(), lineno=145, col_offset=8)], Str('', lineno=145, col_offset=23), lineno=145, col_offset=8)], lineno=140, col_offset=4), Assign([Name('left_spaces', Store(), lineno=146, col_offset=4)], Str('', lineno=146, col_offset=18), lineno=146, col_offset=4), Assign([Name('groups', Store(), lineno=147, col_offset=4)], List([], Load(), lineno=147, col_offset=13), lineno=147, col_offset=4), For(Name('interval', Store(), lineno=148, col_offset=8), Call(Name('_grouping_intervals', Load(), lineno=148, col_offset=20), [Name('grouping', Load(), lineno=148, col_offset=40)], [], None, None, lineno=148, col_offset=20), [If(BoolOp(Or(), [UnaryOp(Not(), Name('s', Load(), lineno=149, col_offset=15), lineno=149, col_offset=11), Compare(Subscript(Name('s', Load(), lineno=149, col_offset=20), Index(Num(-1, lineno=149, col_offset=23)), Load(), lineno=149, col_offset=20), [NotIn()], [Str('0123456789', lineno=149, col_offset=33)], lineno=149, col_offset=20)], lineno=149, col_offset=11), [Assign([Name('left_spaces', Store(), lineno=151, col_offset=12)], Name('s', Load(), lineno=151, col_offset=26), lineno=151, col_offset=12), Assign([Name('s', Store(), lineno=152, col_offset=12)], Str('', lineno=152, col_offset=16), lineno=152, col_offset=12), Break( lineno=153, col_offset=12)], [], lineno=149, col_offset=8), Expr(Call(Attribute(Name('groups', Load(), lineno=154, col_offset=8), 'append', Load(), lineno=154, col_offset=8), [Subscript(Name('s', Load(), lineno=154, col_offset=22), Slice(UnaryOp(USub(), Name('interval', Load(), lineno=154, col_offset=25), lineno=154, col_offset=24), None, None), Load(), lineno=154, col_offset=22)], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8), Assign([Name('s', Store(), lineno=155, col_offset=8)], Subscript(Name('s', Load(), lineno=155, col_offset=12), Slice(None, UnaryOp(USub(), Name('interval', Load(), lineno=155, col_offset=16), lineno=155, col_offset=15), None), Load(), lineno=155, col_offset=12), lineno=155, col_offset=8)], [], lineno=148, col_offset=4), If(Name('s', Load(), lineno=156, col_offset=7), [Expr(Call(Attribute(Name('groups', Load(), lineno=157, col_offset=8), 'append', Load(), lineno=157, col_offset=8), [Name('s', Load(), lineno=157, col_offset=22)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=156, col_offset=4), Expr(Call(Attribute(Name('groups', Load(), lineno=158, col_offset=4), 'reverse', Load(), lineno=158, col_offset=4), [], [], None, None, lineno=158, col_offset=4), lineno=158, col_offset=4), Return(Tuple([BinOp(BinOp(Name('left_spaces', Load(), lineno=160, col_offset=8), Add(), Call(Attribute(Name('thousands_sep', Load(), lineno=160, col_offset=22), 'join', Load(), lineno=160, col_offset=22), [Name('groups', Load(), lineno=160, col_offset=41)], [], None, None, lineno=160, col_offset=22), lineno=160, col_offset=8), Add(), Name('right_spaces', Load(), lineno=160, col_offset=51), lineno=160, col_offset=49), BinOp(Call(Name('len', Load(), lineno=161, col_offset=8), [Name('thousands_sep', Load(), lineno=161, col_offset=12)], [], None, None, lineno=161, col_offset=8), Mult(), BinOp(Call(Name('len', Load(), lineno=161, col_offset=30), [Name('groups', Load(), lineno=161, col_offset=34)], [], None, None, lineno=161, col_offset=30), Sub(), Num(1, lineno=161, col_offset=44), lineno=161, col_offset=30), lineno=161, col_offset=8)], Load(), lineno=160, col_offset=8), lineno=159, col_offset=4)], [], lineno=132, col_offset=0), FunctionDef('_strip_padding', arguments([Name('s', Param(), lineno=165, col_offset=19), Name('amount', Param(), lineno=165, col_offset=22)], None, None, []), [Assign([Name('lpos', Store(), lineno=166, col_offset=4)], Num(0, lineno=166, col_offset=11), lineno=166, col_offset=4), While(BoolOp(And(), [Name('amount', Load(), lineno=167, col_offset=10), Compare(Subscript(Name('s', Load(), lineno=167, col_offset=21), Index(Name('lpos', Load(), lineno=167, col_offset=23)), Load(), lineno=167, col_offset=21), [Eq()], [Str(' ', lineno=167, col_offset=32)], lineno=167, col_offset=21)], lineno=167, col_offset=10), [AugAssign(Name('lpos', Store(), lineno=168, col_offset=8), Add(), Num(1, lineno=168, col_offset=16), lineno=168, col_offset=8), AugAssign(Name('amount', Store(), lineno=169, col_offset=8), Sub(), Num(1, lineno=169, col_offset=18), lineno=169, col_offset=8)], [], lineno=167, col_offset=4), Assign([Name('rpos', Store(), lineno=170, col_offset=4)], BinOp(Call(Name('len', Load(), lineno=170, col_offset=11), [Name('s', Load(), lineno=170, col_offset=15)], [], None, None, lineno=170, col_offset=11), Sub(), Num(1, lineno=170, col_offset=20), lineno=170, col_offset=11), lineno=170, col_offset=4), While(BoolOp(And(), [Name('amount', Load(), lineno=171, col_offset=10), Compare(Subscript(Name('s', Load(), lineno=171, col_offset=21), Index(Name('rpos', Load(), lineno=171, col_offset=23)), Load(), lineno=171, col_offset=21), [Eq()], [Str(' ', lineno=171, col_offset=32)], lineno=171, col_offset=21)], lineno=171, col_offset=10), [AugAssign(Name('rpos', Store(), lineno=172, col_offset=8), Sub(), Num(1, lineno=172, col_offset=16), lineno=172, col_offset=8), AugAssign(Name('amount', Store(), lineno=173, col_offset=8), Sub(), Num(1, lineno=173, col_offset=18), lineno=173, col_offset=8)], [], lineno=171, col_offset=4), Return(Subscript(Name('s', Load(), lineno=174, col_offset=11), Slice(Name('lpos', Load(), lineno=174, col_offset=13), BinOp(Name('rpos', Load(), lineno=174, col_offset=18), Add(), Num(1, lineno=174, col_offset=23), lineno=174, col_offset=18), None), Load(), lineno=174, col_offset=11), lineno=174, col_offset=4)], [], lineno=165, col_offset=0), Assign([Name('_percent_re', Store(), lineno=176, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=176, col_offset=14), 'compile', Load(), lineno=176, col_offset=14), [Str('%(?:\\((?P<key>.*?)\\))?(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]', lineno=176, col_offset=25)], [], None, None, lineno=176, col_offset=14), lineno=176, col_offset=0), FunctionDef('format', arguments([Name('percent', Param(), lineno=179, col_offset=11), Name('value', Param(), lineno=179, col_offset=20), Name('grouping', Param(), lineno=179, col_offset=27), Name('monetary', Param(), lineno=179, col_offset=43)], 'additional', None, [Name('False', Load(), lineno=179, col_offset=36), Name('False', Load(), lineno=179, col_offset=52)]), [Expr(Str("Returns the locale-aware substitution of a %? specifier\n    (percent).\n\n    additional is for format strings which contain one or more\n    '*' modifiers.", lineno=184, col_offset=-1), lineno=184, col_offset=-1), Assign([Name('match', Store(), lineno=186, col_offset=4)], Call(Attribute(Name('_percent_re', Load(), lineno=186, col_offset=12), 'match', Load(), lineno=186, col_offset=12), [Name('percent', Load(), lineno=186, col_offset=30)], [], None, None, lineno=186, col_offset=12), lineno=186, col_offset=4), If(BoolOp(Or(), [UnaryOp(Not(), Name('match', Load(), lineno=187, col_offset=11), lineno=187, col_offset=7), Compare(Call(Name('len', Load(), lineno=187, col_offset=20), [Call(Attribute(Name('match', Load(), lineno=187, col_offset=24), 'group', Load(), lineno=187, col_offset=24), [], [], None, None, lineno=187, col_offset=24)], [], None, None, lineno=187, col_offset=20), [NotEq()], [Call(Name('len', Load(), lineno=187, col_offset=41), [Name('percent', Load(), lineno=187, col_offset=45)], [], None, None, lineno=187, col_offset=41)], lineno=187, col_offset=20)], lineno=187, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=188, col_offset=14), [BinOp(Str('format() must be given exactly one %%char format specifier, %s not valid', lineno=188, col_offset=26), Mod(), Call(Name('repr', Load(), lineno=189, col_offset=61), [Name('percent', Load(), lineno=189, col_offset=66)], [], None, None, lineno=189, col_offset=61), lineno=188, col_offset=25)], [], None, None, lineno=188, col_offset=14), None, None, lineno=188, col_offset=8)], [], lineno=187, col_offset=4), Return(Call(Name('_format', Load(), lineno=190, col_offset=11), [Name('percent', Load(), lineno=190, col_offset=19), Name('value', Load(), lineno=190, col_offset=28), Name('grouping', Load(), lineno=190, col_offset=35), Name('monetary', Load(), lineno=190, col_offset=45)], [], Name('additional', Load(), lineno=190, col_offset=56), None, lineno=190, col_offset=11), lineno=190, col_offset=4)], [], lineno=179, col_offset=0), FunctionDef('_format', arguments([Name('percent', Param(), lineno=192, col_offset=12), Name('value', Param(), lineno=192, col_offset=21), Name('grouping', Param(), lineno=192, col_offset=28), Name('monetary', Param(), lineno=192, col_offset=44)], 'additional', None, [Name('False', Load(), lineno=192, col_offset=37), Name('False', Load(), lineno=192, col_offset=53)]), [If(Name('additional', Load(), lineno=193, col_offset=7), [Assign([Name('formatted', Store(), lineno=194, col_offset=8)], BinOp(Name('percent', Load(), lineno=194, col_offset=20), Mod(), BinOp(Tuple([Name('value', Load(), lineno=194, col_offset=32)], Load(), lineno=194, col_offset=32), Add(), Name('additional', Load(), lineno=194, col_offset=42), lineno=194, col_offset=31), lineno=194, col_offset=20), lineno=194, col_offset=8)], [Assign([Name('formatted', Store(), lineno=196, col_offset=8)], BinOp(Name('percent', Load(), lineno=196, col_offset=20), Mod(), Name('value', Load(), lineno=196, col_offset=30), lineno=196, col_offset=20), lineno=196, col_offset=8)], lineno=193, col_offset=4), If(Compare(Subscript(Name('percent', Load(), lineno=198, col_offset=7), Index(Num(-1, lineno=198, col_offset=16)), Load(), lineno=198, col_offset=7), [In()], [Str('eEfFgG', lineno=198, col_offset=22)], lineno=198, col_offset=7), [Assign([Name('seps', Store(), lineno=199, col_offset=8)], Num(0, lineno=199, col_offset=15), lineno=199, col_offset=8), Assign([Name('parts', Store(), lineno=200, col_offset=8)], Call(Attribute(Name('formatted', Load(), lineno=200, col_offset=16), 'split', Load(), lineno=200, col_offset=16), [Str('.', lineno=200, col_offset=32)], [], None, None, lineno=200, col_offset=16), lineno=200, col_offset=8), If(Name('grouping', Load(), lineno=201, col_offset=11), [Assign([Tuple([Subscript(Name('parts', Load(), lineno=202, col_offset=12), Index(Num(0, lineno=202, col_offset=18)), Store(), lineno=202, col_offset=12), Name('seps', Store(), lineno=202, col_offset=22)], Store(), lineno=202, col_offset=12)], Call(Name('_group', Load(), lineno=202, col_offset=29), [Subscript(Name('parts', Load(), lineno=202, col_offset=36), Index(Num(0, lineno=202, col_offset=42)), Load(), lineno=202, col_offset=36)], [keyword('monetary', Name('monetary', Load(), lineno=202, col_offset=55))], None, None, lineno=202, col_offset=29), lineno=202, col_offset=12)], [], lineno=201, col_offset=8), Assign([Name('decimal_point', Store(), lineno=203, col_offset=8)], Subscript(Call(Name('localeconv', Load(), lineno=203, col_offset=24), [], [], None, None, lineno=203, col_offset=24), Index(BoolOp(Or(), [BoolOp(And(), [Name('monetary', Load(), lineno=203, col_offset=37), Str('mon_decimal_point', lineno=203, col_offset=50)], lineno=203, col_offset=37), Str('decimal_point', lineno=204, col_offset=49)], lineno=203, col_offset=37)), Load(), lineno=203, col_offset=24), lineno=203, col_offset=8), Assign([Name('formatted', Store(), lineno=205, col_offset=8)], Call(Attribute(Name('decimal_point', Load(), lineno=205, col_offset=20), 'join', Load(), lineno=205, col_offset=20), [Name('parts', Load(), lineno=205, col_offset=39)], [], None, None, lineno=205, col_offset=20), lineno=205, col_offset=8), If(Name('seps', Load(), lineno=206, col_offset=11), [Assign([Name('formatted', Store(), lineno=207, col_offset=12)], Call(Name('_strip_padding', Load(), lineno=207, col_offset=24), [Name('formatted', Load(), lineno=207, col_offset=39), Name('seps', Load(), lineno=207, col_offset=50)], [], None, None, lineno=207, col_offset=24), lineno=207, col_offset=12)], [], lineno=206, col_offset=8)], [If(Compare(Subscript(Name('percent', Load(), lineno=208, col_offset=9), Index(Num(-1, lineno=208, col_offset=18)), Load(), lineno=208, col_offset=9), [In()], [Str('diu', lineno=208, col_offset=24)], lineno=208, col_offset=9), [Assign([Name('seps', Store(), lineno=209, col_offset=8)], Num(0, lineno=209, col_offset=15), lineno=209, col_offset=8), If(Name('grouping', Load(), lineno=210, col_offset=11), [Assign([Tuple([Name('formatted', Store(), lineno=211, col_offset=12), Name('seps', Store(), lineno=211, col_offset=23)], Store(), lineno=211, col_offset=12)], Call(Name('_group', Load(), lineno=211, col_offset=30), [Name('formatted', Load(), lineno=211, col_offset=37)], [keyword('monetary', Name('monetary', Load(), lineno=211, col_offset=57))], None, None, lineno=211, col_offset=30), lineno=211, col_offset=12)], [], lineno=210, col_offset=8), If(Name('seps', Load(), lineno=212, col_offset=11), [Assign([Name('formatted', Store(), lineno=213, col_offset=12)], Call(Name('_strip_padding', Load(), lineno=213, col_offset=24), [Name('formatted', Load(), lineno=213, col_offset=39), Name('seps', Load(), lineno=213, col_offset=50)], [], None, None, lineno=213, col_offset=24), lineno=213, col_offset=12)], [], lineno=212, col_offset=8)], [], lineno=208, col_offset=9)], lineno=198, col_offset=4), Return(Name('formatted', Load(), lineno=214, col_offset=11), lineno=214, col_offset=4)], [], lineno=192, col_offset=0), FunctionDef('format_string', arguments([Name('f', Param(), lineno=216, col_offset=18), Name('val', Param(), lineno=216, col_offset=21), Name('grouping', Param(), lineno=216, col_offset=26)], None, None, [Name('False', Load(), lineno=216, col_offset=35)]), [Expr(Str('Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.', lineno=219, col_offset=-1), lineno=219, col_offset=-1), Assign([Name('percents', Store(), lineno=220, col_offset=4)], Call(Name('list', Load(), lineno=220, col_offset=15), [Call(Attribute(Name('_percent_re', Load(), lineno=220, col_offset=20), 'finditer', Load(), lineno=220, col_offset=20), [Name('f', Load(), lineno=220, col_offset=41)], [], None, None, lineno=220, col_offset=20)], [], None, None, lineno=220, col_offset=15), lineno=220, col_offset=4), Assign([Name('new_f', Store(), lineno=221, col_offset=4)], Call(Attribute(Name('_percent_re', Load(), lineno=221, col_offset=12), 'sub', Load(), lineno=221, col_offset=12), [Str('%s', lineno=221, col_offset=28), Name('f', Load(), lineno=221, col_offset=34)], [], None, None, lineno=221, col_offset=12), lineno=221, col_offset=4), If(Call(Attribute(Name('operator', Load(), lineno=223, col_offset=7), 'isMappingType', Load(), lineno=223, col_offset=7), [Name('val', Load(), lineno=223, col_offset=30)], [], None, None, lineno=223, col_offset=7), [Assign([Name('new_val', Store(), lineno=224, col_offset=8)], List([], Load(), lineno=224, col_offset=18), lineno=224, col_offset=8), For(Name('perc', Store(), lineno=225, col_offset=12), Name('percents', Load(), lineno=225, col_offset=20), [If(Compare(Subscript(Call(Attribute(Name('perc', Load(), lineno=226, col_offset=15), 'group', Load(), lineno=226, col_offset=15), [], [], None, None, lineno=226, col_offset=15), Index(Num(-1, lineno=226, col_offset=29)), Load(), lineno=226, col_offset=15), [Eq()], [Str('%', lineno=226, col_offset=33)], lineno=226, col_offset=15), [Expr(Call(Attribute(Name('new_val', Load(), lineno=227, col_offset=16), 'append', Load(), lineno=227, col_offset=16), [Str('%', lineno=227, col_offset=31)], [], None, None, lineno=227, col_offset=16), lineno=227, col_offset=16)], [Expr(Call(Attribute(Name('new_val', Load(), lineno=229, col_offset=16), 'append', Load(), lineno=229, col_offset=16), [Call(Name('format', Load(), lineno=229, col_offset=31), [Call(Attribute(Name('perc', Load(), lineno=229, col_offset=38), 'group', Load(), lineno=229, col_offset=38), [], [], None, None, lineno=229, col_offset=38), Name('val', Load(), lineno=229, col_offset=52), Name('grouping', Load(), lineno=229, col_offset=57)], [], None, None, lineno=229, col_offset=31)], [], None, None, lineno=229, col_offset=16), lineno=229, col_offset=16)], lineno=226, col_offset=12)], [], lineno=225, col_offset=8)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=231, col_offset=15), [Name('val', Load(), lineno=231, col_offset=26), Name('tuple', Load(), lineno=231, col_offset=31)], [], None, None, lineno=231, col_offset=15), lineno=231, col_offset=11), [Assign([Name('val', Store(), lineno=232, col_offset=12)], Tuple([Name('val', Load(), lineno=232, col_offset=19)], Load(), lineno=232, col_offset=19), lineno=232, col_offset=12)], [], lineno=231, col_offset=8), Assign([Name('new_val', Store(), lineno=233, col_offset=8)], List([], Load(), lineno=233, col_offset=18), lineno=233, col_offset=8), Assign([Name('i', Store(), lineno=234, col_offset=8)], Num(0, lineno=234, col_offset=12), lineno=234, col_offset=8), For(Name('perc', Store(), lineno=235, col_offset=12), Name('percents', Load(), lineno=235, col_offset=20), [If(Compare(Subscript(Call(Attribute(Name('perc', Load(), lineno=236, col_offset=15), 'group', Load(), lineno=236, col_offset=15), [], [], None, None, lineno=236, col_offset=15), Index(Num(-1, lineno=236, col_offset=29)), Load(), lineno=236, col_offset=15), [Eq()], [Str('%', lineno=236, col_offset=33)], lineno=236, col_offset=15), [Expr(Call(Attribute(Name('new_val', Load(), lineno=237, col_offset=16), 'append', Load(), lineno=237, col_offset=16), [Str('%', lineno=237, col_offset=31)], [], None, None, lineno=237, col_offset=16), lineno=237, col_offset=16)], [Assign([Name('starcount', Store(), lineno=239, col_offset=16)], Call(Attribute(Call(Attribute(Name('perc', Load(), lineno=239, col_offset=28), 'group', Load(), lineno=239, col_offset=28), [Str('modifiers', lineno=239, col_offset=39)], [], None, None, lineno=239, col_offset=28), 'count', Load(), lineno=239, col_offset=28), [Str('*', lineno=239, col_offset=58)], [], None, None, lineno=239, col_offset=28), lineno=239, col_offset=16), Expr(Call(Attribute(Name('new_val', Load(), lineno=240, col_offset=16), 'append', Load(), lineno=240, col_offset=16), [Call(Name('_format', Load(), lineno=240, col_offset=31), [Call(Attribute(Name('perc', Load(), lineno=240, col_offset=39), 'group', Load(), lineno=240, col_offset=39), [], [], None, None, lineno=240, col_offset=39), Subscript(Name('val', Load(), lineno=241, col_offset=38), Index(Name('i', Load(), lineno=241, col_offset=42)), Load(), lineno=241, col_offset=38), Name('grouping', Load(), lineno=242, col_offset=38), Name('False', Load(), lineno=243, col_offset=38)], [], Subscript(Name('val', Load(), lineno=244, col_offset=39), Slice(BinOp(Name('i', Load(), lineno=244, col_offset=43), Add(), Num(1, lineno=244, col_offset=45), lineno=244, col_offset=43), BinOp(BinOp(Name('i', Load(), lineno=244, col_offset=47), Add(), Num(1, lineno=244, col_offset=49), lineno=244, col_offset=47), Add(), Name('starcount', Load(), lineno=244, col_offset=51), lineno=244, col_offset=50), None), Load(), lineno=244, col_offset=39), None, lineno=240, col_offset=31)], [], None, None, lineno=240, col_offset=16), lineno=240, col_offset=16), AugAssign(Name('i', Store(), lineno=245, col_offset=16), Add(), BinOp(Num(1, lineno=245, col_offset=22), Add(), Name('starcount', Load(), lineno=245, col_offset=26), lineno=245, col_offset=22), lineno=245, col_offset=16)], lineno=236, col_offset=12)], [], lineno=235, col_offset=8)], lineno=223, col_offset=4), Assign([Name('val', Store(), lineno=246, col_offset=4)], Call(Name('tuple', Load(), lineno=246, col_offset=10), [Name('new_val', Load(), lineno=246, col_offset=16)], [], None, None, lineno=246, col_offset=10), lineno=246, col_offset=4), Return(BinOp(Name('new_f', Load(), lineno=248, col_offset=11), Mod(), Name('val', Load(), lineno=248, col_offset=19), lineno=248, col_offset=11), lineno=248, col_offset=4)], [], lineno=216, col_offset=0), FunctionDef('currency', arguments([Name('val', Param(), lineno=250, col_offset=13), Name('symbol', Param(), lineno=250, col_offset=18), Name('grouping', Param(), lineno=250, col_offset=31), Name('international', Param(), lineno=250, col_offset=47)], None, None, [Name('True', Load(), lineno=250, col_offset=25), Name('False', Load(), lineno=250, col_offset=40), Name('False', Load(), lineno=250, col_offset=61)]), [Expr(Str('Formats val according to the currency settings\n    in the current locale.', lineno=252, col_offset=-1), lineno=252, col_offset=-1), Assign([Name('conv', Store(), lineno=253, col_offset=4)], Call(Name('localeconv', Load(), lineno=253, col_offset=11), [], [], None, None, lineno=253, col_offset=11), lineno=253, col_offset=4), Assign([Name('digits', Store(), lineno=256, col_offset=4)], Subscript(Name('conv', Load(), lineno=256, col_offset=13), Index(BoolOp(Or(), [BoolOp(And(), [Name('international', Load(), lineno=256, col_offset=18), Str('int_frac_digits', lineno=256, col_offset=36)], lineno=256, col_offset=18), Str('frac_digits', lineno=256, col_offset=57)], lineno=256, col_offset=18)), Load(), lineno=256, col_offset=13), lineno=256, col_offset=4), If(Compare(Name('digits', Load(), lineno=257, col_offset=7), [Eq()], [Num(127, lineno=257, col_offset=17)], lineno=257, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=258, col_offset=14), [Str("Currency formatting is not possible using the 'C' locale.", lineno=258, col_offset=25)], [], None, None, lineno=258, col_offset=14), None, None, lineno=258, col_offset=8)], [], lineno=257, col_offset=4), Assign([Name('s', Store(), lineno=261, col_offset=4)], Call(Name('format', Load(), lineno=261, col_offset=8), [BinOp(Str('%%.%if', lineno=261, col_offset=15), Mod(), Name('digits', Load(), lineno=261, col_offset=26), lineno=261, col_offset=15), Call(Name('abs', Load(), lineno=261, col_offset=34), [Name('val', Load(), lineno=261, col_offset=38)], [], None, None, lineno=261, col_offset=34), Name('grouping', Load(), lineno=261, col_offset=44)], [keyword('monetary', Name('True', Load(), lineno=261, col_offset=63))], None, None, lineno=261, col_offset=8), lineno=261, col_offset=4), Assign([Name('s', Store(), lineno=263, col_offset=4)], BinOp(BinOp(Str('<', lineno=263, col_offset=8), Add(), Name('s', Load(), lineno=263, col_offset=14), lineno=263, col_offset=8), Add(), Str('>', lineno=263, col_offset=18), lineno=263, col_offset=16), lineno=263, col_offset=4), If(Name('symbol', Load(), lineno=265, col_offset=7), [Assign([Name('smb', Store(), lineno=266, col_offset=8)], Subscript(Name('conv', Load(), lineno=266, col_offset=14), Index(BoolOp(Or(), [BoolOp(And(), [Name('international', Load(), lineno=266, col_offset=19), Str('int_curr_symbol', lineno=266, col_offset=37)], lineno=266, col_offset=19), Str('currency_symbol', lineno=266, col_offset=58)], lineno=266, col_offset=19)), Load(), lineno=266, col_offset=14), lineno=266, col_offset=8), Assign([Name('precedes', Store(), lineno=267, col_offset=8)], Subscript(Name('conv', Load(), lineno=267, col_offset=19), Index(BoolOp(Or(), [BoolOp(And(), [Compare(Name('val', Load(), lineno=267, col_offset=24), [Lt()], [Num(0, lineno=267, col_offset=28)], lineno=267, col_offset=24), Str('n_cs_precedes', lineno=267, col_offset=34)], lineno=267, col_offset=24), Str('p_cs_precedes', lineno=267, col_offset=53)], lineno=267, col_offset=24)), Load(), lineno=267, col_offset=19), lineno=267, col_offset=8), Assign([Name('separated', Store(), lineno=268, col_offset=8)], Subscript(Name('conv', Load(), lineno=268, col_offset=20), Index(BoolOp(Or(), [BoolOp(And(), [Compare(Name('val', Load(), lineno=268, col_offset=25), [Lt()], [Num(0, lineno=268, col_offset=29)], lineno=268, col_offset=25), Str('n_sep_by_space', lineno=268, col_offset=35)], lineno=268, col_offset=25), Str('p_sep_by_space', lineno=268, col_offset=55)], lineno=268, col_offset=25)), Load(), lineno=268, col_offset=20), lineno=268, col_offset=8), If(Name('precedes', Load(), lineno=270, col_offset=11), [Assign([Name('s', Store(), lineno=271, col_offset=12)], BinOp(BinOp(Name('smb', Load(), lineno=271, col_offset=16), Add(), BoolOp(Or(), [BoolOp(And(), [Name('separated', Load(), lineno=271, col_offset=23), Str(' ', lineno=271, col_offset=37)], lineno=271, col_offset=23), Str('', lineno=271, col_offset=44)], lineno=271, col_offset=23), lineno=271, col_offset=16), Add(), Name('s', Load(), lineno=271, col_offset=50), lineno=271, col_offset=48), lineno=271, col_offset=12)], [Assign([Name('s', Store(), lineno=273, col_offset=12)], BinOp(BinOp(Name('s', Load(), lineno=273, col_offset=16), Add(), BoolOp(Or(), [BoolOp(And(), [Name('separated', Load(), lineno=273, col_offset=21), Str(' ', lineno=273, col_offset=35)], lineno=273, col_offset=21), Str('', lineno=273, col_offset=42)], lineno=273, col_offset=21), lineno=273, col_offset=16), Add(), Name('smb', Load(), lineno=273, col_offset=48), lineno=273, col_offset=46), lineno=273, col_offset=12)], lineno=270, col_offset=8)], [], lineno=265, col_offset=4), Assign([Name('sign_pos', Store(), lineno=275, col_offset=4)], Subscript(Name('conv', Load(), lineno=275, col_offset=15), Index(BoolOp(Or(), [BoolOp(And(), [Compare(Name('val', Load(), lineno=275, col_offset=20), [Lt()], [Num(0, lineno=275, col_offset=24)], lineno=275, col_offset=20), Str('n_sign_posn', lineno=275, col_offset=30)], lineno=275, col_offset=20), Str('p_sign_posn', lineno=275, col_offset=47)], lineno=275, col_offset=20)), Load(), lineno=275, col_offset=15), lineno=275, col_offset=4), Assign([Name('sign', Store(), lineno=276, col_offset=4)], Subscript(Name('conv', Load(), lineno=276, col_offset=11), Index(BoolOp(Or(), [BoolOp(And(), [Compare(Name('val', Load(), lineno=276, col_offset=16), [Lt()], [Num(0, lineno=276, col_offset=20)], lineno=276, col_offset=16), Str('negative_sign', lineno=276, col_offset=26)], lineno=276, col_offset=16), Str('positive_sign', lineno=276, col_offset=45)], lineno=276, col_offset=16)), Load(), lineno=276, col_offset=11), lineno=276, col_offset=4), If(Compare(Name('sign_pos', Load(), lineno=278, col_offset=7), [Eq()], [Num(0, lineno=278, col_offset=19)], lineno=278, col_offset=7), [Assign([Name('s', Store(), lineno=279, col_offset=8)], BinOp(BinOp(Str('(', lineno=279, col_offset=12), Add(), Name('s', Load(), lineno=279, col_offset=18), lineno=279, col_offset=12), Add(), Str(')', lineno=279, col_offset=22), lineno=279, col_offset=20), lineno=279, col_offset=8)], [If(Compare(Name('sign_pos', Load(), lineno=280, col_offset=9), [Eq()], [Num(1, lineno=280, col_offset=21)], lineno=280, col_offset=9), [Assign([Name('s', Store(), lineno=281, col_offset=8)], BinOp(Name('sign', Load(), lineno=281, col_offset=12), Add(), Name('s', Load(), lineno=281, col_offset=19), lineno=281, col_offset=12), lineno=281, col_offset=8)], [If(Compare(Name('sign_pos', Load(), lineno=282, col_offset=9), [Eq()], [Num(2, lineno=282, col_offset=21)], lineno=282, col_offset=9), [Assign([Name('s', Store(), lineno=283, col_offset=8)], BinOp(Name('s', Load(), lineno=283, col_offset=12), Add(), Name('sign', Load(), lineno=283, col_offset=16), lineno=283, col_offset=12), lineno=283, col_offset=8)], [If(Compare(Name('sign_pos', Load(), lineno=284, col_offset=9), [Eq()], [Num(3, lineno=284, col_offset=21)], lineno=284, col_offset=9), [Assign([Name('s', Store(), lineno=285, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=285, col_offset=12), 'replace', Load(), lineno=285, col_offset=12), [Str('<', lineno=285, col_offset=22), Name('sign', Load(), lineno=285, col_offset=27)], [], None, None, lineno=285, col_offset=12), lineno=285, col_offset=8)], [If(Compare(Name('sign_pos', Load(), lineno=286, col_offset=9), [Eq()], [Num(4, lineno=286, col_offset=21)], lineno=286, col_offset=9), [Assign([Name('s', Store(), lineno=287, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=287, col_offset=12), 'replace', Load(), lineno=287, col_offset=12), [Str('>', lineno=287, col_offset=22), Name('sign', Load(), lineno=287, col_offset=27)], [], None, None, lineno=287, col_offset=12), lineno=287, col_offset=8)], [Assign([Name('s', Store(), lineno=291, col_offset=8)], BinOp(Name('sign', Load(), lineno=291, col_offset=12), Add(), Name('s', Load(), lineno=291, col_offset=19), lineno=291, col_offset=12), lineno=291, col_offset=8)], lineno=286, col_offset=9)], lineno=284, col_offset=9)], lineno=282, col_offset=9)], lineno=280, col_offset=9)], lineno=278, col_offset=4), Return(Call(Attribute(Call(Attribute(Name('s', Load(), lineno=293, col_offset=11), 'replace', Load(), lineno=293, col_offset=11), [Str('<', lineno=293, col_offset=21), Str('', lineno=293, col_offset=26)], [], None, None, lineno=293, col_offset=11), 'replace', Load(), lineno=293, col_offset=11), [Str('>', lineno=293, col_offset=38), Str('', lineno=293, col_offset=43)], [], None, None, lineno=293, col_offset=11), lineno=293, col_offset=4)], [], lineno=250, col_offset=0), FunctionDef('str', arguments([Name('val', Param(), lineno=295, col_offset=8)], None, None, []), [Expr(Str('Convert float to integer, taking the locale into account.', lineno=296, col_offset=4), lineno=296, col_offset=4), Return(Call(Name('format', Load(), lineno=297, col_offset=11), [Str('%.12g', lineno=297, col_offset=18), Name('val', Load(), lineno=297, col_offset=27)], [], None, None, lineno=297, col_offset=11), lineno=297, col_offset=4)], [], lineno=295, col_offset=0), FunctionDef('atof', arguments([Name('string', Param(), lineno=299, col_offset=9), Name('func', Param(), lineno=299, col_offset=17)], None, None, [Name('float', Load(), lineno=299, col_offset=22)]), [Expr(Str('Parses a string as a float according to the locale settings.', lineno=300, col_offset=4), lineno=300, col_offset=4), Assign([Name('ts', Store(), lineno=302, col_offset=4)], Subscript(Call(Name('localeconv', Load(), lineno=302, col_offset=9), [], [], None, None, lineno=302, col_offset=9), Index(Str('thousands_sep', lineno=302, col_offset=22)), Load(), lineno=302, col_offset=9), lineno=302, col_offset=4), If(Name('ts', Load(), lineno=303, col_offset=7), [Assign([Name('string', Store(), lineno=304, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=304, col_offset=17), 'replace', Load(), lineno=304, col_offset=17), [Name('ts', Load(), lineno=304, col_offset=32), Str('', lineno=304, col_offset=36)], [], None, None, lineno=304, col_offset=17), lineno=304, col_offset=8)], [], lineno=303, col_offset=4), Assign([Name('dd', Store(), lineno=306, col_offset=4)], Subscript(Call(Name('localeconv', Load(), lineno=306, col_offset=9), [], [], None, None, lineno=306, col_offset=9), Index(Str('decimal_point', lineno=306, col_offset=22)), Load(), lineno=306, col_offset=9), lineno=306, col_offset=4), If(Name('dd', Load(), lineno=307, col_offset=7), [Assign([Name('string', Store(), lineno=308, col_offset=8)], Call(Attribute(Name('string', Load(), lineno=308, col_offset=17), 'replace', Load(), lineno=308, col_offset=17), [Name('dd', Load(), lineno=308, col_offset=32), Str('.', lineno=308, col_offset=36)], [], None, None, lineno=308, col_offset=17), lineno=308, col_offset=8)], [], lineno=307, col_offset=4), Return(Call(Name('func', Load(), lineno=310, col_offset=11), [Name('string', Load(), lineno=310, col_offset=16)], [], None, None, lineno=310, col_offset=11), lineno=310, col_offset=4)], [], lineno=299, col_offset=0), FunctionDef('atoi', arguments([Name('str', Param(), lineno=312, col_offset=9)], None, None, []), [Expr(Str('Converts a string to an integer according to the locale settings.', lineno=313, col_offset=4), lineno=313, col_offset=4), Return(Call(Name('atof', Load(), lineno=314, col_offset=11), [Name('str', Load(), lineno=314, col_offset=16), Name('int', Load(), lineno=314, col_offset=21)], [], None, None, lineno=314, col_offset=11), lineno=314, col_offset=4)], [], lineno=312, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Expr(Call(Name('setlocale', Load(), lineno=317, col_offset=4), [Name('LC_ALL', Load(), lineno=317, col_offset=14), Str('', lineno=317, col_offset=22)], [], None, None, lineno=317, col_offset=4), lineno=317, col_offset=4), Assign([Name('s1', Store(), lineno=319, col_offset=4)], Call(Name('format', Load(), lineno=319, col_offset=9), [Str('%d', lineno=319, col_offset=16), Num(123456789, lineno=319, col_offset=22), Num(1, lineno=319, col_offset=32)], [], None, None, lineno=319, col_offset=9), lineno=319, col_offset=4), Print(None, [Name('s1', Load(), lineno=320, col_offset=10), Str('is', lineno=320, col_offset=14), Call(Name('atoi', Load(), lineno=320, col_offset=20), [Name('s1', Load(), lineno=320, col_offset=25)], [], None, None, lineno=320, col_offset=20)], True, lineno=320, col_offset=4), Assign([Name('s1', Store(), lineno=322, col_offset=4)], Call(Name('str', Load(), lineno=322, col_offset=9), [Num(3.14, lineno=322, col_offset=13)], [], None, None, lineno=322, col_offset=9), lineno=322, col_offset=4), Print(None, [Name('s1', Load(), lineno=323, col_offset=10), Str('is', lineno=323, col_offset=14), Call(Name('atof', Load(), lineno=323, col_offset=20), [Name('s1', Load(), lineno=323, col_offset=25)], [], None, None, lineno=323, col_offset=20)], True, lineno=323, col_offset=4)], [], lineno=316, col_offset=0), Assign([Name('_setlocale', Store(), lineno=332, col_offset=0)], Name('setlocale', Load(), lineno=332, col_offset=13), lineno=332, col_offset=0), FunctionDef('normalize', arguments([Name('localename', Param(), lineno=334, col_offset=14)], None, None, []), [Expr(Str(' Returns a normalized locale code for the given locale\n        name.\n\n        The returned locale code is formatted for use with\n        setlocale().\n\n        If normalization fails, the original name is returned\n        unchanged.\n\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.\n\n    ', lineno=349, col_offset=-1), lineno=349, col_offset=-1), Assign([Name('fullname', Store(), lineno=351, col_offset=4)], Call(Attribute(Name('localename', Load(), lineno=351, col_offset=15), 'lower', Load(), lineno=351, col_offset=15), [], [], None, None, lineno=351, col_offset=15), lineno=351, col_offset=4), If(Compare(Str(':', lineno=352, col_offset=7), [In()], [Name('fullname', Load(), lineno=352, col_offset=14)], lineno=352, col_offset=7), [Assign([Name('fullname', Store(), lineno=354, col_offset=8)], Call(Attribute(Name('fullname', Load(), lineno=354, col_offset=19), 'replace', Load(), lineno=354, col_offset=19), [Str(':', lineno=354, col_offset=36), Str('.', lineno=354, col_offset=41)], [], None, None, lineno=354, col_offset=19), lineno=354, col_offset=8)], [], lineno=352, col_offset=4), If(Compare(Str('.', lineno=355, col_offset=7), [In()], [Name('fullname', Load(), lineno=355, col_offset=14)], lineno=355, col_offset=7), [Assign([Tuple([Name('langname', Store(), lineno=356, col_offset=8), Name('encoding', Store(), lineno=356, col_offset=18)], Store(), lineno=356, col_offset=8)], Subscript(Call(Attribute(Name('fullname', Load(), lineno=356, col_offset=29), 'split', Load(), lineno=356, col_offset=29), [Str('.', lineno=356, col_offset=44)], [], None, None, lineno=356, col_offset=29), Slice(None, Num(2, lineno=356, col_offset=50), None), Load(), lineno=356, col_offset=29), lineno=356, col_offset=8), Assign([Name('fullname', Store(), lineno=357, col_offset=8)], BinOp(BinOp(Name('langname', Load(), lineno=357, col_offset=19), Add(), Str('.', lineno=357, col_offset=30), lineno=357, col_offset=19), Add(), Name('encoding', Load(), lineno=357, col_offset=36), lineno=357, col_offset=34), lineno=357, col_offset=8)], [Assign([Name('langname', Store(), lineno=359, col_offset=8)], Name('fullname', Load(), lineno=359, col_offset=19), lineno=359, col_offset=8), Assign([Name('encoding', Store(), lineno=360, col_offset=8)], Str('', lineno=360, col_offset=19), lineno=360, col_offset=8)], lineno=355, col_offset=4), Assign([Name('norm_encoding', Store(), lineno=363, col_offset=4)], Call(Attribute(Name('encoding', Load(), lineno=363, col_offset=20), 'replace', Load(), lineno=363, col_offset=20), [Str('-', lineno=363, col_offset=37), Str('', lineno=363, col_offset=42)], [], None, None, lineno=363, col_offset=20), lineno=363, col_offset=4), Assign([Name('norm_encoding', Store(), lineno=364, col_offset=4)], Call(Attribute(Name('norm_encoding', Load(), lineno=364, col_offset=20), 'replace', Load(), lineno=364, col_offset=20), [Str('_', lineno=364, col_offset=42), Str('', lineno=364, col_offset=47)], [], None, None, lineno=364, col_offset=20), lineno=364, col_offset=4), Assign([Name('lookup_name', Store(), lineno=365, col_offset=4)], BinOp(BinOp(Name('langname', Load(), lineno=365, col_offset=18), Add(), Str('.', lineno=365, col_offset=29), lineno=365, col_offset=18), Add(), Name('encoding', Load(), lineno=365, col_offset=35), lineno=365, col_offset=33), lineno=365, col_offset=4), Assign([Name('code', Store(), lineno=366, col_offset=4)], Call(Attribute(Name('locale_alias', Load(), lineno=366, col_offset=11), 'get', Load(), lineno=366, col_offset=11), [Name('lookup_name', Load(), lineno=366, col_offset=28), Name('None', Load(), lineno=366, col_offset=41)], [], None, None, lineno=366, col_offset=11), lineno=366, col_offset=4), If(Compare(Name('code', Load(), lineno=367, col_offset=7), [IsNot()], [Name('None', Load(), lineno=367, col_offset=19)], lineno=367, col_offset=7), [Return(Name('code', Load(), lineno=368, col_offset=15), lineno=368, col_offset=8)], [], lineno=367, col_offset=4), Assign([Name('code', Store(), lineno=372, col_offset=4)], Call(Attribute(Name('locale_alias', Load(), lineno=372, col_offset=11), 'get', Load(), lineno=372, col_offset=11), [Name('langname', Load(), lineno=372, col_offset=28), Name('None', Load(), lineno=372, col_offset=38)], [], None, None, lineno=372, col_offset=11), lineno=372, col_offset=4), If(Compare(Name('code', Load(), lineno=373, col_offset=7), [IsNot()], [Name('None', Load(), lineno=373, col_offset=19)], lineno=373, col_offset=7), [If(Compare(Str('.', lineno=375, col_offset=11), [In()], [Name('code', Load(), lineno=375, col_offset=18)], lineno=375, col_offset=11), [Assign([Tuple([Name('langname', Store(), lineno=376, col_offset=12), Name('defenc', Store(), lineno=376, col_offset=22)], Store(), lineno=376, col_offset=12)], Call(Attribute(Name('code', Load(), lineno=376, col_offset=31), 'split', Load(), lineno=376, col_offset=31), [Str('.', lineno=376, col_offset=42)], [], None, None, lineno=376, col_offset=31), lineno=376, col_offset=12)], [Assign([Name('langname', Store(), lineno=378, col_offset=12)], Name('code', Load(), lineno=378, col_offset=23), lineno=378, col_offset=12), Assign([Name('defenc', Store(), lineno=379, col_offset=12)], Str('', lineno=379, col_offset=21), lineno=379, col_offset=12)], lineno=375, col_offset=8), If(Name('encoding', Load(), lineno=380, col_offset=11), [Assign([Name('norm_encoding', Store(), lineno=382, col_offset=12)], Call(Attribute(Name('encodings', Load(), lineno=382, col_offset=28), 'normalize_encoding', Load(), lineno=382, col_offset=28), [Name('encoding', Load(), lineno=382, col_offset=57)], [], None, None, lineno=382, col_offset=28), lineno=382, col_offset=12), Assign([Name('norm_encoding', Store(), lineno=384, col_offset=12)], Call(Attribute(Attribute(Attribute(Name('encodings', Load(), lineno=384, col_offset=28), 'aliases', Load(), lineno=384, col_offset=28), 'aliases', Load(), lineno=384, col_offset=28), 'get', Load(), lineno=384, col_offset=28), [Name('norm_encoding', Load(), lineno=384, col_offset=58), Name('norm_encoding', Load(), lineno=385, col_offset=58)], [], None, None, lineno=384, col_offset=28), lineno=384, col_offset=12), Assign([Name('encoding', Store(), lineno=387, col_offset=12)], Call(Attribute(Name('locale_encoding_alias', Load(), lineno=387, col_offset=23), 'get', Load(), lineno=387, col_offset=23), [Name('norm_encoding', Load(), lineno=387, col_offset=49), Name('norm_encoding', Load(), lineno=388, col_offset=49)], [], None, None, lineno=387, col_offset=23), lineno=387, col_offset=12)], [Assign([Name('encoding', Store(), lineno=390, col_offset=12)], Name('defenc', Load(), lineno=390, col_offset=23), lineno=390, col_offset=12)], lineno=380, col_offset=8), If(Name('encoding', Load(), lineno=392, col_offset=11), [Return(BinOp(BinOp(Name('langname', Load(), lineno=393, col_offset=19), Add(), Str('.', lineno=393, col_offset=30), lineno=393, col_offset=19), Add(), Name('encoding', Load(), lineno=393, col_offset=36), lineno=393, col_offset=34), lineno=393, col_offset=12)], [Return(Name('langname', Load(), lineno=395, col_offset=19), lineno=395, col_offset=12)], lineno=392, col_offset=8)], [Return(Name('localename', Load(), lineno=398, col_offset=15), lineno=398, col_offset=8)], lineno=373, col_offset=4)], [], lineno=334, col_offset=0), FunctionDef('_parse_localename', arguments([Name('localename', Param(), lineno=400, col_offset=22)], None, None, []), [Expr(Str(' Parses the locale code for localename and returns the\n        result as tuple (language code, encoding).\n\n        The localename is normalized and passed through the locale\n        alias engine. A ValueError is raised in case the locale name\n        cannot be parsed.\n\n        The language code corresponds to RFC 1766.  code and encoding\n        can be None in case the values cannot be determined or are\n        unknown to this implementation.\n\n    ', lineno=413, col_offset=-1), lineno=413, col_offset=-1), Assign([Name('code', Store(), lineno=414, col_offset=4)], Call(Name('normalize', Load(), lineno=414, col_offset=11), [Name('localename', Load(), lineno=414, col_offset=21)], [], None, None, lineno=414, col_offset=11), lineno=414, col_offset=4), If(Compare(Str('@', lineno=415, col_offset=7), [In()], [Name('code', Load(), lineno=415, col_offset=14)], lineno=415, col_offset=7), [Assign([Tuple([Name('code', Store(), lineno=417, col_offset=8), Name('modifier', Store(), lineno=417, col_offset=14)], Store(), lineno=417, col_offset=8)], Call(Attribute(Name('code', Load(), lineno=417, col_offset=25), 'split', Load(), lineno=417, col_offset=25), [Str('@', lineno=417, col_offset=36)], [], None, None, lineno=417, col_offset=25), lineno=417, col_offset=8), If(BoolOp(And(), [Compare(Name('modifier', Load(), lineno=418, col_offset=11), [Eq()], [Str('euro', lineno=418, col_offset=23)], lineno=418, col_offset=11), Compare(Str('.', lineno=418, col_offset=34), [NotIn()], [Name('code', Load(), lineno=418, col_offset=45)], lineno=418, col_offset=34)], lineno=418, col_offset=11), [Return(Tuple([Name('code', Load(), lineno=422, col_offset=19), Str('iso-8859-15', lineno=422, col_offset=25)], Load(), lineno=422, col_offset=19), lineno=422, col_offset=12)], [], lineno=418, col_offset=8)], [], lineno=415, col_offset=4), If(Compare(Str('.', lineno=424, col_offset=7), [In()], [Name('code', Load(), lineno=424, col_offset=14)], lineno=424, col_offset=7), [Return(Call(Name('tuple', Load(), lineno=425, col_offset=15), [Subscript(Call(Attribute(Name('code', Load(), lineno=425, col_offset=21), 'split', Load(), lineno=425, col_offset=21), [Str('.', lineno=425, col_offset=32)], [], None, None, lineno=425, col_offset=21), Slice(None, Num(2, lineno=425, col_offset=38), None), Load(), lineno=425, col_offset=21)], [], None, None, lineno=425, col_offset=15), lineno=425, col_offset=8)], [If(Compare(Name('code', Load(), lineno=426, col_offset=9), [Eq()], [Str('C', lineno=426, col_offset=17)], lineno=426, col_offset=9), [Return(Tuple([Name('None', Load(), lineno=427, col_offset=15), Name('None', Load(), lineno=427, col_offset=21)], Load(), lineno=427, col_offset=15), lineno=427, col_offset=8)], [], lineno=426, col_offset=9)], lineno=424, col_offset=4), Raise(Name('ValueError', Load(), lineno=428, col_offset=10), BinOp(Str('unknown locale: %s', lineno=428, col_offset=22), Mod(), Name('localename', Load(), lineno=428, col_offset=45), lineno=428, col_offset=22), None, lineno=428, col_offset=4)], [], lineno=400, col_offset=0), FunctionDef('_build_localename', arguments([Name('localetuple', Param(), lineno=430, col_offset=22)], None, None, []), [Expr(Str(' Builds a locale code from the given tuple (language code,\n        encoding).\n\n        No aliasing or normalizing takes place.\n\n    ', lineno=437, col_offset=-1), lineno=437, col_offset=-1), Assign([Tuple([Name('language', Store(), lineno=438, col_offset=4), Name('encoding', Store(), lineno=438, col_offset=14)], Store(), lineno=438, col_offset=4)], Name('localetuple', Load(), lineno=438, col_offset=25), lineno=438, col_offset=4), If(Compare(Name('language', Load(), lineno=439, col_offset=7), [Is()], [Name('None', Load(), lineno=439, col_offset=19)], lineno=439, col_offset=7), [Assign([Name('language', Store(), lineno=440, col_offset=8)], Str('C', lineno=440, col_offset=19), lineno=440, col_offset=8)], [], lineno=439, col_offset=4), If(Compare(Name('encoding', Load(), lineno=441, col_offset=7), [Is()], [Name('None', Load(), lineno=441, col_offset=19)], lineno=441, col_offset=7), [Return(Name('language', Load(), lineno=442, col_offset=15), lineno=442, col_offset=8)], [Return(BinOp(BinOp(Name('language', Load(), lineno=444, col_offset=15), Add(), Str('.', lineno=444, col_offset=26), lineno=444, col_offset=15), Add(), Name('encoding', Load(), lineno=444, col_offset=32), lineno=444, col_offset=30), lineno=444, col_offset=8)], lineno=441, col_offset=4)], [], lineno=430, col_offset=0), FunctionDef('getdefaultlocale', arguments([Name('envvars', Param(), lineno=446, col_offset=21)], None, None, [Tuple([Str('LC_ALL', lineno=446, col_offset=30), Str('LC_CTYPE', lineno=446, col_offset=40), Str('LANG', lineno=446, col_offset=52), Str('LANGUAGE', lineno=446, col_offset=60)], Load(), lineno=446, col_offset=30)]), [Expr(Str(' Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, "") runs using the portable \'C\' locale.\n        Calling setlocale(LC_ALL, "") lets it use the default locale as\n        defined by the LANG variable. Since we don\'t want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n\n        To maintain compatibility with other platforms, not only the\n        LANG variable is tested, but a list of variables given as\n        envvars parameter. The first found to be defined will be\n        used. envvars defaults to the search path used in GNU gettext;\n        it must always contain the variable name \'LANG\'.\n\n        Except for the code \'C\', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    ', lineno=468, col_offset=-1), lineno=468, col_offset=-1), TryExcept([Import([alias('_locale', None)], lineno=472, col_offset=8), Assign([Tuple([Name('code', Store(), lineno=473, col_offset=8), Name('encoding', Store(), lineno=473, col_offset=14)], Store(), lineno=473, col_offset=8)], Call(Attribute(Name('_locale', Load(), lineno=473, col_offset=25), '_getdefaultlocale', Load(), lineno=473, col_offset=25), [], [], None, None, lineno=473, col_offset=25), lineno=473, col_offset=8)], [ExceptHandler(Tuple([Name('ImportError', Load(), lineno=474, col_offset=12), Name('AttributeError', Load(), lineno=474, col_offset=25)], Load(), lineno=474, col_offset=12), None, [Pass( lineno=475, col_offset=8)], lineno=474, col_offset=4)], [If(BoolOp(And(), [Compare(Attribute(Name('sys', Load(), lineno=478, col_offset=11), 'platform', Load(), lineno=478, col_offset=11), [Eq()], [Str('win32', lineno=478, col_offset=27)], lineno=478, col_offset=11), Name('code', Load(), lineno=478, col_offset=39), Compare(Subscript(Name('code', Load(), lineno=478, col_offset=48), Slice(None, Num(2, lineno=478, col_offset=54), None), Load(), lineno=478, col_offset=48), [Eq()], [Str('0x', lineno=478, col_offset=60)], lineno=478, col_offset=48)], lineno=478, col_offset=11), [Assign([Name('code', Store(), lineno=480, col_offset=12)], Call(Attribute(Name('windows_locale', Load(), lineno=480, col_offset=19), 'get', Load(), lineno=480, col_offset=19), [Call(Name('int', Load(), lineno=480, col_offset=38), [Name('code', Load(), lineno=480, col_offset=42), Num(0, lineno=480, col_offset=48)], [], None, None, lineno=480, col_offset=38)], [], None, None, lineno=480, col_offset=19), lineno=480, col_offset=12)], [], lineno=478, col_offset=8), Return(Tuple([Name('code', Load(), lineno=483, col_offset=15), Name('encoding', Load(), lineno=483, col_offset=21)], Load(), lineno=483, col_offset=15), lineno=483, col_offset=8)], lineno=470, col_offset=4), Import([alias('os', None)], lineno=486, col_offset=4), Assign([Name('lookup', Store(), lineno=487, col_offset=4)], Attribute(Attribute(Name('os', Load(), lineno=487, col_offset=13), 'environ', Load(), lineno=487, col_offset=13), 'get', Load(), lineno=487, col_offset=13), lineno=487, col_offset=4), For(Name('variable', Store(), lineno=488, col_offset=8), Name('envvars', Load(), lineno=488, col_offset=20), [Assign([Name('localename', Store(), lineno=489, col_offset=8)], Call(Name('lookup', Load(), lineno=489, col_offset=21), [Name('variable', Load(), lineno=489, col_offset=28), Name('None', Load(), lineno=489, col_offset=37)], [], None, None, lineno=489, col_offset=21), lineno=489, col_offset=8), If(Name('localename', Load(), lineno=490, col_offset=11), [If(Compare(Name('variable', Load(), lineno=491, col_offset=15), [Eq()], [Str('LANGUAGE', lineno=491, col_offset=27)], lineno=491, col_offset=15), [Assign([Name('localename', Store(), lineno=492, col_offset=16)], Subscript(Call(Attribute(Name('localename', Load(), lineno=492, col_offset=29), 'split', Load(), lineno=492, col_offset=29), [Str(':', lineno=492, col_offset=46)], [], None, None, lineno=492, col_offset=29), Index(Num(0, lineno=492, col_offset=51)), Load(), lineno=492, col_offset=29), lineno=492, col_offset=16)], [], lineno=491, col_offset=12), Break( lineno=493, col_offset=12)], [], lineno=490, col_offset=8)], [Assign([Name('localename', Store(), lineno=495, col_offset=8)], Str('C', lineno=495, col_offset=21), lineno=495, col_offset=8)], lineno=488, col_offset=4), Return(Call(Name('_parse_localename', Load(), lineno=496, col_offset=11), [Name('localename', Load(), lineno=496, col_offset=29)], [], None, None, lineno=496, col_offset=11), lineno=496, col_offset=4)], [], lineno=446, col_offset=0), FunctionDef('getlocale', arguments([Name('category', Param(), lineno=499, col_offset=14)], None, None, [Name('LC_CTYPE', Load(), lineno=499, col_offset=23)]), [Expr(Str(" Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    ", lineno=511, col_offset=-1), lineno=511, col_offset=-1), Assign([Name('localename', Store(), lineno=512, col_offset=4)], Call(Name('_setlocale', Load(), lineno=512, col_offset=17), [Name('category', Load(), lineno=512, col_offset=28)], [], None, None, lineno=512, col_offset=17), lineno=512, col_offset=4), If(BoolOp(And(), [Compare(Name('category', Load(), lineno=513, col_offset=7), [Eq()], [Name('LC_ALL', Load(), lineno=513, col_offset=19)], lineno=513, col_offset=7), Compare(Str(';', lineno=513, col_offset=30), [In()], [Name('localename', Load(), lineno=513, col_offset=37)], lineno=513, col_offset=30)], lineno=513, col_offset=7), [Raise(Name('TypeError', Load(), lineno=514, col_offset=14), Str('category LC_ALL is not supported', lineno=514, col_offset=25), None, lineno=514, col_offset=8)], [], lineno=513, col_offset=4), Return(Call(Name('_parse_localename', Load(), lineno=515, col_offset=11), [Name('localename', Load(), lineno=515, col_offset=29)], [], None, None, lineno=515, col_offset=11), lineno=515, col_offset=4)], [], lineno=499, col_offset=0), FunctionDef('setlocale', arguments([Name('category', Param(), lineno=517, col_offset=14), Name('locale', Param(), lineno=517, col_offset=24)], None, None, [Name('None', Load(), lineno=517, col_offset=31)]), [Expr(Str(' Set the locale for the given category.  The locale can be\n        a string, a locale tuple (language code, encoding), or None.\n\n        Locale tuples are converted to strings the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n\n        category may be given as one of the LC_* values.\n\n    ', lineno=527, col_offset=-1), lineno=527, col_offset=-1), If(BoolOp(And(), [Name('locale', Load(), lineno=528, col_offset=7), Compare(Call(Name('type', Load(), lineno=528, col_offset=18), [Name('locale', Load(), lineno=528, col_offset=23)], [], None, None, lineno=528, col_offset=18), [IsNot()], [Call(Name('type', Load(), lineno=528, col_offset=38), [Str('', lineno=528, col_offset=43)], [], None, None, lineno=528, col_offset=38)], lineno=528, col_offset=18)], lineno=528, col_offset=7), [Assign([Name('locale', Store(), lineno=530, col_offset=8)], Call(Name('normalize', Load(), lineno=530, col_offset=17), [Call(Name('_build_localename', Load(), lineno=530, col_offset=27), [Name('locale', Load(), lineno=530, col_offset=45)], [], None, None, lineno=530, col_offset=27)], [], None, None, lineno=530, col_offset=17), lineno=530, col_offset=8)], [], lineno=528, col_offset=4), Return(Call(Name('_setlocale', Load(), lineno=531, col_offset=11), [Name('category', Load(), lineno=531, col_offset=22), Name('locale', Load(), lineno=531, col_offset=32)], [], None, None, lineno=531, col_offset=11), lineno=531, col_offset=4)], [], lineno=517, col_offset=0), FunctionDef('resetlocale', arguments([Name('category', Param(), lineno=533, col_offset=16)], None, None, [Name('LC_ALL', Load(), lineno=533, col_offset=25)]), [Expr(Str(' Sets the locale for category to the default setting.\n\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n\n    ', lineno=540, col_offset=-1), lineno=540, col_offset=-1), Expr(Call(Name('_setlocale', Load(), lineno=541, col_offset=4), [Name('category', Load(), lineno=541, col_offset=15), Call(Name('_build_localename', Load(), lineno=541, col_offset=25), [Call(Name('getdefaultlocale', Load(), lineno=541, col_offset=43), [], [], None, None, lineno=541, col_offset=43)], [], None, None, lineno=541, col_offset=25)], [], None, None, lineno=541, col_offset=4), lineno=541, col_offset=4)], [], lineno=533, col_offset=0), If(Call(Attribute(Attribute(Name('sys', Load(), lineno=543, col_offset=3), 'platform', Load(), lineno=543, col_offset=3), 'startswith', Load(), lineno=543, col_offset=3), [Str('win', lineno=543, col_offset=27)], [], None, None, lineno=543, col_offset=3), [FunctionDef('getpreferredencoding', arguments([Name('do_setlocale', Param(), lineno=545, col_offset=29)], None, None, [Name('True', Load(), lineno=545, col_offset=44)]), [Expr(Str('Return the charset that the user is likely using.', lineno=546, col_offset=8), lineno=546, col_offset=8), Import([alias('_locale', None)], lineno=547, col_offset=8), Return(Subscript(Call(Attribute(Name('_locale', Load(), lineno=548, col_offset=15), '_getdefaultlocale', Load(), lineno=548, col_offset=15), [], [], None, None, lineno=548, col_offset=15), Index(Num(1, lineno=548, col_offset=43)), Load(), lineno=548, col_offset=15), lineno=548, col_offset=8)], [], lineno=545, col_offset=4)], [TryExcept([Expr(Name('CODESET', Load(), lineno=552, col_offset=8), lineno=552, col_offset=8)], [ExceptHandler(Name('NameError', Load(), lineno=553, col_offset=11), None, [FunctionDef('getpreferredencoding', arguments([Name('do_setlocale', Param(), lineno=555, col_offset=33)], None, None, [Name('True', Load(), lineno=555, col_offset=48)]), [Expr(Str('Return the charset that the user is likely using,\n            by looking at environment variables.', lineno=557, col_offset=-1), lineno=557, col_offset=-1), Return(Subscript(Call(Name('getdefaultlocale', Load(), lineno=558, col_offset=19), [], [], None, None, lineno=558, col_offset=19), Index(Num(1, lineno=558, col_offset=38)), Load(), lineno=558, col_offset=19), lineno=558, col_offset=12)], [], lineno=555, col_offset=8)], lineno=553, col_offset=4)], [FunctionDef('getpreferredencoding', arguments([Name('do_setlocale', Param(), lineno=560, col_offset=33)], None, None, [Name('True', Load(), lineno=560, col_offset=48)]), [Expr(Str('Return the charset that the user is likely using,\n            according to the system configuration.', lineno=562, col_offset=-1), lineno=562, col_offset=-1), If(Name('do_setlocale', Load(), lineno=563, col_offset=15), [Assign([Name('oldloc', Store(), lineno=564, col_offset=16)], Call(Name('setlocale', Load(), lineno=564, col_offset=25), [Name('LC_CTYPE', Load(), lineno=564, col_offset=35)], [], None, None, lineno=564, col_offset=25), lineno=564, col_offset=16), TryExcept([Expr(Call(Name('setlocale', Load(), lineno=566, col_offset=20), [Name('LC_CTYPE', Load(), lineno=566, col_offset=30), Str('', lineno=566, col_offset=40)], [], None, None, lineno=566, col_offset=20), lineno=566, col_offset=20)], [ExceptHandler(Name('Error', Load(), lineno=567, col_offset=23), None, [Pass( lineno=568, col_offset=20)], lineno=567, col_offset=16)], [], lineno=565, col_offset=16), Assign([Name('result', Store(), lineno=569, col_offset=16)], Call(Name('nl_langinfo', Load(), lineno=569, col_offset=25), [Name('CODESET', Load(), lineno=569, col_offset=37)], [], None, None, lineno=569, col_offset=25), lineno=569, col_offset=16), Expr(Call(Name('setlocale', Load(), lineno=570, col_offset=16), [Name('LC_CTYPE', Load(), lineno=570, col_offset=26), Name('oldloc', Load(), lineno=570, col_offset=36)], [], None, None, lineno=570, col_offset=16), lineno=570, col_offset=16), Return(Name('result', Load(), lineno=571, col_offset=23), lineno=571, col_offset=16)], [Return(Call(Name('nl_langinfo', Load(), lineno=573, col_offset=23), [Name('CODESET', Load(), lineno=573, col_offset=35)], [], None, None, lineno=573, col_offset=23), lineno=573, col_offset=16)], lineno=563, col_offset=12)], [], lineno=560, col_offset=8)], lineno=551, col_offset=4)], lineno=543, col_offset=0), Assign([Name('locale_encoding_alias', Store(), lineno=591, col_offset=0)], Dict([Str('437', lineno=594, col_offset=4), Str('c', lineno=595, col_offset=4), Str('en', lineno=596, col_offset=4), Str('jis', lineno=597, col_offset=4), Str('jis7', lineno=598, col_offset=4), Str('ajec', lineno=599, col_offset=4), Str('ascii', lineno=602, col_offset=4), Str('latin_1', lineno=603, col_offset=4), Str('iso8859_1', lineno=604, col_offset=4), Str('iso8859_10', lineno=605, col_offset=4), Str('iso8859_11', lineno=606, col_offset=4), Str('iso8859_13', lineno=607, col_offset=4), Str('iso8859_14', lineno=608, col_offset=4), Str('iso8859_15', lineno=609, col_offset=4), Str('iso8859_16', lineno=610, col_offset=4), Str('iso8859_2', lineno=611, col_offset=4), Str('iso8859_3', lineno=612, col_offset=4), Str('iso8859_4', lineno=613, col_offset=4), Str('iso8859_5', lineno=614, col_offset=4), Str('iso8859_6', lineno=615, col_offset=4), Str('iso8859_7', lineno=616, col_offset=4), Str('iso8859_8', lineno=617, col_offset=4), Str('iso8859_9', lineno=618, col_offset=4), Str('iso2022_jp', lineno=619, col_offset=4), Str('shift_jis', lineno=620, col_offset=4), Str('tactis', lineno=621, col_offset=4), Str('euc_jp', lineno=622, col_offset=4), Str('euc_kr', lineno=623, col_offset=4), Str('utf_8', lineno=624, col_offset=4), Str('koi8_r', lineno=625, col_offset=4), Str('koi8_u', lineno=626, col_offset=4)], [Str('C', lineno=594, col_offset=36), Str('C', lineno=595, col_offset=36), Str('ISO8859-1', lineno=596, col_offset=36), Str('JIS7', lineno=597, col_offset=36), Str('JIS7', lineno=598, col_offset=36), Str('eucJP', lineno=599, col_offset=36), Str('ISO8859-1', lineno=602, col_offset=36), Str('ISO8859-1', lineno=603, col_offset=36), Str('ISO8859-1', lineno=604, col_offset=36), Str('ISO8859-10', lineno=605, col_offset=36), Str('ISO8859-11', lineno=606, col_offset=36), Str('ISO8859-13', lineno=607, col_offset=36), Str('ISO8859-14', lineno=608, col_offset=36), Str('ISO8859-15', lineno=609, col_offset=36), Str('ISO8859-16', lineno=610, col_offset=36), Str('ISO8859-2', lineno=611, col_offset=36), Str('ISO8859-3', lineno=612, col_offset=36), Str('ISO8859-4', lineno=613, col_offset=36), Str('ISO8859-5', lineno=614, col_offset=36), Str('ISO8859-6', lineno=615, col_offset=36), Str('ISO8859-7', lineno=616, col_offset=36), Str('ISO8859-8', lineno=617, col_offset=36), Str('ISO8859-9', lineno=618, col_offset=36), Str('JIS7', lineno=619, col_offset=36), Str('SJIS', lineno=620, col_offset=36), Str('TACTIS', lineno=621, col_offset=36), Str('eucJP', lineno=622, col_offset=36), Str('eucKR', lineno=623, col_offset=36), Str('UTF8', lineno=624, col_offset=36), Str('KOI8-R', lineno=625, col_offset=36), Str('KOI8-U', lineno=626, col_offset=36)], lineno=591, col_offset=24), lineno=591, col_offset=0), Assign([Name('locale_alias', Store(), lineno=722, col_offset=0)], Dict([Str('a3', lineno=723, col_offset=4), Str('a3_az', lineno=724, col_offset=4), Str('a3_az.koi8c', lineno=725, col_offset=4), Str('af', lineno=726, col_offset=4), Str('af_za', lineno=727, col_offset=4), Str('af_za.iso88591', lineno=728, col_offset=4), Str('am', lineno=729, col_offset=4), Str('am_et', lineno=730, col_offset=4), Str('american', lineno=731, col_offset=4), Str('american.iso88591', lineno=732, col_offset=4), Str('ar', lineno=733, col_offset=4), Str('ar_aa', lineno=734, col_offset=4), Str('ar_aa.iso88596', lineno=735, col_offset=4), Str('ar_ae', lineno=736, col_offset=4), Str('ar_ae.iso88596', lineno=737, col_offset=4), Str('ar_bh', lineno=738, col_offset=4), Str('ar_bh.iso88596', lineno=739, col_offset=4), Str('ar_dz', lineno=740, col_offset=4), Str('ar_dz.iso88596', lineno=741, col_offset=4), Str('ar_eg', lineno=742, col_offset=4), Str('ar_eg.iso88596', lineno=743, col_offset=4), Str('ar_iq', lineno=744, col_offset=4), Str('ar_iq.iso88596', lineno=745, col_offset=4), Str('ar_jo', lineno=746, col_offset=4), Str('ar_jo.iso88596', lineno=747, col_offset=4), Str('ar_kw', lineno=748, col_offset=4), Str('ar_kw.iso88596', lineno=749, col_offset=4), Str('ar_lb', lineno=750, col_offset=4), Str('ar_lb.iso88596', lineno=751, col_offset=4), Str('ar_ly', lineno=752, col_offset=4), Str('ar_ly.iso88596', lineno=753, col_offset=4), Str('ar_ma', lineno=754, col_offset=4), Str('ar_ma.iso88596', lineno=755, col_offset=4), Str('ar_om', lineno=756, col_offset=4), Str('ar_om.iso88596', lineno=757, col_offset=4), Str('ar_qa', lineno=758, col_offset=4), Str('ar_qa.iso88596', lineno=759, col_offset=4), Str('ar_sa', lineno=760, col_offset=4), Str('ar_sa.iso88596', lineno=761, col_offset=4), Str('ar_sd', lineno=762, col_offset=4), Str('ar_sd.iso88596', lineno=763, col_offset=4), Str('ar_sy', lineno=764, col_offset=4), Str('ar_sy.iso88596', lineno=765, col_offset=4), Str('ar_tn', lineno=766, col_offset=4), Str('ar_tn.iso88596', lineno=767, col_offset=4), Str('ar_ye', lineno=768, col_offset=4), Str('ar_ye.iso88596', lineno=769, col_offset=4), Str('arabic', lineno=770, col_offset=4), Str('arabic.iso88596', lineno=771, col_offset=4), Str('as', lineno=772, col_offset=4), Str('az', lineno=773, col_offset=4), Str('az_az', lineno=774, col_offset=4), Str('az_az.iso88599e', lineno=775, col_offset=4), Str('be', lineno=776, col_offset=4), Str('be@latin', lineno=777, col_offset=4), Str('be_by', lineno=778, col_offset=4), Str('be_by.cp1251', lineno=779, col_offset=4), Str('be_by.microsoftcp1251', lineno=780, col_offset=4), Str('be_by.utf8@latin', lineno=781, col_offset=4), Str('be_by@latin', lineno=782, col_offset=4), Str('bg', lineno=783, col_offset=4), Str('bg_bg', lineno=784, col_offset=4), Str('bg_bg.cp1251', lineno=785, col_offset=4), Str('bg_bg.iso88595', lineno=786, col_offset=4), Str('bg_bg.koi8r', lineno=787, col_offset=4), Str('bg_bg.microsoftcp1251', lineno=788, col_offset=4), Str('bn_in', lineno=789, col_offset=4), Str('bokmal', lineno=790, col_offset=4), Str('bokm\xe5l', lineno=791, col_offset=4), Str('br', lineno=792, col_offset=4), Str('br_fr', lineno=793, col_offset=4), Str('br_fr.iso88591', lineno=794, col_offset=4), Str('br_fr.iso885914', lineno=795, col_offset=4), Str('br_fr.iso885915', lineno=796, col_offset=4), Str('br_fr.iso885915@euro', lineno=797, col_offset=4), Str('br_fr.utf8@euro', lineno=798, col_offset=4), Str('br_fr@euro', lineno=799, col_offset=4), Str('bs', lineno=800, col_offset=4), Str('bs_ba', lineno=801, col_offset=4), Str('bs_ba.iso88592', lineno=802, col_offset=4), Str('bulgarian', lineno=803, col_offset=4), Str('c', lineno=804, col_offset=4), Str('c-french', lineno=805, col_offset=4), Str('c-french.iso88591', lineno=806, col_offset=4), Str('c.en', lineno=807, col_offset=4), Str('c.iso88591', lineno=808, col_offset=4), Str('c_c', lineno=809, col_offset=4), Str('c_c.c', lineno=810, col_offset=4), Str('ca', lineno=811, col_offset=4), Str('ca_ad', lineno=812, col_offset=4), Str('ca_ad.iso88591', lineno=813, col_offset=4), Str('ca_ad.iso885915', lineno=814, col_offset=4), Str('ca_ad.iso885915@euro', lineno=815, col_offset=4), Str('ca_ad.utf8@euro', lineno=816, col_offset=4), Str('ca_ad@euro', lineno=817, col_offset=4), Str('ca_es', lineno=818, col_offset=4), Str('ca_es.iso88591', lineno=819, col_offset=4), Str('ca_es.iso885915', lineno=820, col_offset=4), Str('ca_es.iso885915@euro', lineno=821, col_offset=4), Str('ca_es.utf8@euro', lineno=822, col_offset=4), Str('ca_es@euro', lineno=823, col_offset=4), Str('ca_fr', lineno=824, col_offset=4), Str('ca_fr.iso88591', lineno=825, col_offset=4), Str('ca_fr.iso885915', lineno=826, col_offset=4), Str('ca_fr.iso885915@euro', lineno=827, col_offset=4), Str('ca_fr.utf8@euro', lineno=828, col_offset=4), Str('ca_fr@euro', lineno=829, col_offset=4), Str('ca_it', lineno=830, col_offset=4), Str('ca_it.iso88591', lineno=831, col_offset=4), Str('ca_it.iso885915', lineno=832, col_offset=4), Str('ca_it.iso885915@euro', lineno=833, col_offset=4), Str('ca_it.utf8@euro', lineno=834, col_offset=4), Str('ca_it@euro', lineno=835, col_offset=4), Str('catalan', lineno=836, col_offset=4), Str('cextend', lineno=837, col_offset=4), Str('cextend.en', lineno=838, col_offset=4), Str('chinese-s', lineno=839, col_offset=4), Str('chinese-t', lineno=840, col_offset=4), Str('croatian', lineno=841, col_offset=4), Str('cs', lineno=842, col_offset=4), Str('cs_cs', lineno=843, col_offset=4), Str('cs_cs.iso88592', lineno=844, col_offset=4), Str('cs_cz', lineno=845, col_offset=4), Str('cs_cz.iso88592', lineno=846, col_offset=4), Str('cy', lineno=847, col_offset=4), Str('cy_gb', lineno=848, col_offset=4), Str('cy_gb.iso88591', lineno=849, col_offset=4), Str('cy_gb.iso885914', lineno=850, col_offset=4), Str('cy_gb.iso885915', lineno=851, col_offset=4), Str('cy_gb@euro', lineno=852, col_offset=4), Str('cz', lineno=853, col_offset=4), Str('cz_cz', lineno=854, col_offset=4), Str('czech', lineno=855, col_offset=4), Str('da', lineno=856, col_offset=4), Str('da.iso885915', lineno=857, col_offset=4), Str('da_dk', lineno=858, col_offset=4), Str('da_dk.88591', lineno=859, col_offset=4), Str('da_dk.885915', lineno=860, col_offset=4), Str('da_dk.iso88591', lineno=861, col_offset=4), Str('da_dk.iso885915', lineno=862, col_offset=4), Str('da_dk@euro', lineno=863, col_offset=4), Str('danish', lineno=864, col_offset=4), Str('danish.iso88591', lineno=865, col_offset=4), Str('dansk', lineno=866, col_offset=4), Str('de', lineno=867, col_offset=4), Str('de.iso885915', lineno=868, col_offset=4), Str('de_at', lineno=869, col_offset=4), Str('de_at.iso88591', lineno=870, col_offset=4), Str('de_at.iso885915', lineno=871, col_offset=4), Str('de_at.iso885915@euro', lineno=872, col_offset=4), Str('de_at.utf8@euro', lineno=873, col_offset=4), Str('de_at@euro', lineno=874, col_offset=4), Str('de_be', lineno=875, col_offset=4), Str('de_be.iso88591', lineno=876, col_offset=4), Str('de_be.iso885915', lineno=877, col_offset=4), Str('de_be.iso885915@euro', lineno=878, col_offset=4), Str('de_be.utf8@euro', lineno=879, col_offset=4), Str('de_be@euro', lineno=880, col_offset=4), Str('de_ch', lineno=881, col_offset=4), Str('de_ch.iso88591', lineno=882, col_offset=4), Str('de_ch.iso885915', lineno=883, col_offset=4), Str('de_ch@euro', lineno=884, col_offset=4), Str('de_de', lineno=885, col_offset=4), Str('de_de.88591', lineno=886, col_offset=4), Str('de_de.885915', lineno=887, col_offset=4), Str('de_de.885915@euro', lineno=888, col_offset=4), Str('de_de.iso88591', lineno=889, col_offset=4), Str('de_de.iso885915', lineno=890, col_offset=4), Str('de_de.iso885915@euro', lineno=891, col_offset=4), Str('de_de.utf8@euro', lineno=892, col_offset=4), Str('de_de@euro', lineno=893, col_offset=4), Str('de_lu', lineno=894, col_offset=4), Str('de_lu.iso88591', lineno=895, col_offset=4), Str('de_lu.iso885915', lineno=896, col_offset=4), Str('de_lu.iso885915@euro', lineno=897, col_offset=4), Str('de_lu.utf8@euro', lineno=898, col_offset=4), Str('de_lu@euro', lineno=899, col_offset=4), Str('deutsch', lineno=900, col_offset=4), Str('dutch', lineno=901, col_offset=4), Str('dutch.iso88591', lineno=902, col_offset=4), Str('ee', lineno=903, col_offset=4), Str('ee_ee', lineno=904, col_offset=4), Str('ee_ee.iso88594', lineno=905, col_offset=4), Str('eesti', lineno=906, col_offset=4), Str('el', lineno=907, col_offset=4), Str('el_gr', lineno=908, col_offset=4), Str('el_gr.iso88597', lineno=909, col_offset=4), Str('el_gr@euro', lineno=910, col_offset=4), Str('en', lineno=911, col_offset=4), Str('en.iso88591', lineno=912, col_offset=4), Str('en_au', lineno=913, col_offset=4), Str('en_au.iso88591', lineno=914, col_offset=4), Str('en_be', lineno=915, col_offset=4), Str('en_be@euro', lineno=916, col_offset=4), Str('en_bw', lineno=917, col_offset=4), Str('en_bw.iso88591', lineno=918, col_offset=4), Str('en_ca', lineno=919, col_offset=4), Str('en_ca.iso88591', lineno=920, col_offset=4), Str('en_gb', lineno=921, col_offset=4), Str('en_gb.88591', lineno=922, col_offset=4), Str('en_gb.iso88591', lineno=923, col_offset=4), Str('en_gb.iso885915', lineno=924, col_offset=4), Str('en_gb@euro', lineno=925, col_offset=4), Str('en_hk', lineno=926, col_offset=4), Str('en_hk.iso88591', lineno=927, col_offset=4), Str('en_ie', lineno=928, col_offset=4), Str('en_ie.iso88591', lineno=929, col_offset=4), Str('en_ie.iso885915', lineno=930, col_offset=4), Str('en_ie.iso885915@euro', lineno=931, col_offset=4), Str('en_ie.utf8@euro', lineno=932, col_offset=4), Str('en_ie@euro', lineno=933, col_offset=4), Str('en_in', lineno=934, col_offset=4), Str('en_nz', lineno=935, col_offset=4), Str('en_nz.iso88591', lineno=936, col_offset=4), Str('en_ph', lineno=937, col_offset=4), Str('en_ph.iso88591', lineno=938, col_offset=4), Str('en_sg', lineno=939, col_offset=4), Str('en_sg.iso88591', lineno=940, col_offset=4), Str('en_uk', lineno=941, col_offset=4), Str('en_us', lineno=942, col_offset=4), Str('en_us.88591', lineno=943, col_offset=4), Str('en_us.885915', lineno=944, col_offset=4), Str('en_us.iso88591', lineno=945, col_offset=4), Str('en_us.iso885915', lineno=946, col_offset=4), Str('en_us.iso885915@euro', lineno=947, col_offset=4), Str('en_us@euro', lineno=948, col_offset=4), Str('en_us@euro@euro', lineno=949, col_offset=4), Str('en_za', lineno=950, col_offset=4), Str('en_za.88591', lineno=951, col_offset=4), Str('en_za.iso88591', lineno=952, col_offset=4), Str('en_za.iso885915', lineno=953, col_offset=4), Str('en_za@euro', lineno=954, col_offset=4), Str('en_zw', lineno=955, col_offset=4), Str('en_zw.iso88591', lineno=956, col_offset=4), Str('eng_gb', lineno=957, col_offset=4), Str('eng_gb.8859', lineno=958, col_offset=4), Str('english', lineno=959, col_offset=4), Str('english.iso88591', lineno=960, col_offset=4), Str('english_uk', lineno=961, col_offset=4), Str('english_uk.8859', lineno=962, col_offset=4), Str('english_united-states', lineno=963, col_offset=4), Str('english_united-states.437', lineno=964, col_offset=4), Str('english_us', lineno=965, col_offset=4), Str('english_us.8859', lineno=966, col_offset=4), Str('english_us.ascii', lineno=967, col_offset=4), Str('eo', lineno=968, col_offset=4), Str('eo_eo', lineno=969, col_offset=4), Str('eo_eo.iso88593', lineno=970, col_offset=4), Str('eo_xx', lineno=971, col_offset=4), Str('eo_xx.iso88593', lineno=972, col_offset=4), Str('es', lineno=973, col_offset=4), Str('es_ar', lineno=974, col_offset=4), Str('es_ar.iso88591', lineno=975, col_offset=4), Str('es_bo', lineno=976, col_offset=4), Str('es_bo.iso88591', lineno=977, col_offset=4), Str('es_cl', lineno=978, col_offset=4), Str('es_cl.iso88591', lineno=979, col_offset=4), Str('es_co', lineno=980, col_offset=4), Str('es_co.iso88591', lineno=981, col_offset=4), Str('es_cr', lineno=982, col_offset=4), Str('es_cr.iso88591', lineno=983, col_offset=4), Str('es_do', lineno=984, col_offset=4), Str('es_do.iso88591', lineno=985, col_offset=4), Str('es_ec', lineno=986, col_offset=4), Str('es_ec.iso88591', lineno=987, col_offset=4), Str('es_es', lineno=988, col_offset=4), Str('es_es.88591', lineno=989, col_offset=4), Str('es_es.iso88591', lineno=990, col_offset=4), Str('es_es.iso885915', lineno=991, col_offset=4), Str('es_es.iso885915@euro', lineno=992, col_offset=4), Str('es_es.utf8@euro', lineno=993, col_offset=4), Str('es_es@euro', lineno=994, col_offset=4), Str('es_gt', lineno=995, col_offset=4), Str('es_gt.iso88591', lineno=996, col_offset=4), Str('es_hn', lineno=997, col_offset=4), Str('es_hn.iso88591', lineno=998, col_offset=4), Str('es_mx', lineno=999, col_offset=4), Str('es_mx.iso88591', lineno=1000, col_offset=4), Str('es_ni', lineno=1001, col_offset=4), Str('es_ni.iso88591', lineno=1002, col_offset=4), Str('es_pa', lineno=1003, col_offset=4), Str('es_pa.iso88591', lineno=1004, col_offset=4), Str('es_pa.iso885915', lineno=1005, col_offset=4), Str('es_pa@euro', lineno=1006, col_offset=4), Str('es_pe', lineno=1007, col_offset=4), Str('es_pe.iso88591', lineno=1008, col_offset=4), Str('es_pe.iso885915', lineno=1009, col_offset=4), Str('es_pe@euro', lineno=1010, col_offset=4), Str('es_pr', lineno=1011, col_offset=4), Str('es_pr.iso88591', lineno=1012, col_offset=4), Str('es_py', lineno=1013, col_offset=4), Str('es_py.iso88591', lineno=1014, col_offset=4), Str('es_py.iso885915', lineno=1015, col_offset=4), Str('es_py@euro', lineno=1016, col_offset=4), Str('es_sv', lineno=1017, col_offset=4), Str('es_sv.iso88591', lineno=1018, col_offset=4), Str('es_sv.iso885915', lineno=1019, col_offset=4), Str('es_sv@euro', lineno=1020, col_offset=4), Str('es_us', lineno=1021, col_offset=4), Str('es_us.iso88591', lineno=1022, col_offset=4), Str('es_uy', lineno=1023, col_offset=4), Str('es_uy.iso88591', lineno=1024, col_offset=4), Str('es_uy.iso885915', lineno=1025, col_offset=4), Str('es_uy@euro', lineno=1026, col_offset=4), Str('es_ve', lineno=1027, col_offset=4), Str('es_ve.iso88591', lineno=1028, col_offset=4), Str('es_ve.iso885915', lineno=1029, col_offset=4), Str('es_ve@euro', lineno=1030, col_offset=4), Str('estonian', lineno=1031, col_offset=4), Str('et', lineno=1032, col_offset=4), Str('et_ee', lineno=1033, col_offset=4), Str('et_ee.iso88591', lineno=1034, col_offset=4), Str('et_ee.iso885913', lineno=1035, col_offset=4), Str('et_ee.iso885915', lineno=1036, col_offset=4), Str('et_ee.iso88594', lineno=1037, col_offset=4), Str('et_ee@euro', lineno=1038, col_offset=4), Str('eu', lineno=1039, col_offset=4), Str('eu_es', lineno=1040, col_offset=4), Str('eu_es.iso88591', lineno=1041, col_offset=4), Str('eu_es.iso885915', lineno=1042, col_offset=4), Str('eu_es.iso885915@euro', lineno=1043, col_offset=4), Str('eu_es.utf8@euro', lineno=1044, col_offset=4), Str('eu_es@euro', lineno=1045, col_offset=4), Str('fa', lineno=1046, col_offset=4), Str('fa_ir', lineno=1047, col_offset=4), Str('fa_ir.isiri3342', lineno=1048, col_offset=4), Str('fi', lineno=1049, col_offset=4), Str('fi.iso885915', lineno=1050, col_offset=4), Str('fi_fi', lineno=1051, col_offset=4), Str('fi_fi.88591', lineno=1052, col_offset=4), Str('fi_fi.iso88591', lineno=1053, col_offset=4), Str('fi_fi.iso885915', lineno=1054, col_offset=4), Str('fi_fi.iso885915@euro', lineno=1055, col_offset=4), Str('fi_fi.utf8@euro', lineno=1056, col_offset=4), Str('fi_fi@euro', lineno=1057, col_offset=4), Str('finnish', lineno=1058, col_offset=4), Str('finnish.iso88591', lineno=1059, col_offset=4), Str('fo', lineno=1060, col_offset=4), Str('fo_fo', lineno=1061, col_offset=4), Str('fo_fo.iso88591', lineno=1062, col_offset=4), Str('fo_fo.iso885915', lineno=1063, col_offset=4), Str('fo_fo@euro', lineno=1064, col_offset=4), Str('fr', lineno=1065, col_offset=4), Str('fr.iso885915', lineno=1066, col_offset=4), Str('fr_be', lineno=1067, col_offset=4), Str('fr_be.88591', lineno=1068, col_offset=4), Str('fr_be.iso88591', lineno=1069, col_offset=4), Str('fr_be.iso885915', lineno=1070, col_offset=4), Str('fr_be.iso885915@euro', lineno=1071, col_offset=4), Str('fr_be.utf8@euro', lineno=1072, col_offset=4), Str('fr_be@euro', lineno=1073, col_offset=4), Str('fr_ca', lineno=1074, col_offset=4), Str('fr_ca.88591', lineno=1075, col_offset=4), Str('fr_ca.iso88591', lineno=1076, col_offset=4), Str('fr_ca.iso885915', lineno=1077, col_offset=4), Str('fr_ca@euro', lineno=1078, col_offset=4), Str('fr_ch', lineno=1079, col_offset=4), Str('fr_ch.88591', lineno=1080, col_offset=4), Str('fr_ch.iso88591', lineno=1081, col_offset=4), Str('fr_ch.iso885915', lineno=1082, col_offset=4), Str('fr_ch@euro', lineno=1083, col_offset=4), Str('fr_fr', lineno=1084, col_offset=4), Str('fr_fr.88591', lineno=1085, col_offset=4), Str('fr_fr.iso88591', lineno=1086, col_offset=4), Str('fr_fr.iso885915', lineno=1087, col_offset=4), Str('fr_fr.iso885915@euro', lineno=1088, col_offset=4), Str('fr_fr.utf8@euro', lineno=1089, col_offset=4), Str('fr_fr@euro', lineno=1090, col_offset=4), Str('fr_lu', lineno=1091, col_offset=4), Str('fr_lu.88591', lineno=1092, col_offset=4), Str('fr_lu.iso88591', lineno=1093, col_offset=4), Str('fr_lu.iso885915', lineno=1094, col_offset=4), Str('fr_lu.iso885915@euro', lineno=1095, col_offset=4), Str('fr_lu.utf8@euro', lineno=1096, col_offset=4), Str('fr_lu@euro', lineno=1097, col_offset=4), Str('fran\xe7ais', lineno=1098, col_offset=4), Str('fre_fr', lineno=1099, col_offset=4), Str('fre_fr.8859', lineno=1100, col_offset=4), Str('french', lineno=1101, col_offset=4), Str('french.iso88591', lineno=1102, col_offset=4), Str('french_france', lineno=1103, col_offset=4), Str('french_france.8859', lineno=1104, col_offset=4), Str('ga', lineno=1105, col_offset=4), Str('ga_ie', lineno=1106, col_offset=4), Str('ga_ie.iso88591', lineno=1107, col_offset=4), Str('ga_ie.iso885914', lineno=1108, col_offset=4), Str('ga_ie.iso885915', lineno=1109, col_offset=4), Str('ga_ie.iso885915@euro', lineno=1110, col_offset=4), Str('ga_ie.utf8@euro', lineno=1111, col_offset=4), Str('ga_ie@euro', lineno=1112, col_offset=4), Str('galego', lineno=1113, col_offset=4), Str('galician', lineno=1114, col_offset=4), Str('gd', lineno=1115, col_offset=4), Str('gd_gb', lineno=1116, col_offset=4), Str('gd_gb.iso88591', lineno=1117, col_offset=4), Str('gd_gb.iso885914', lineno=1118, col_offset=4), Str('gd_gb.iso885915', lineno=1119, col_offset=4), Str('gd_gb@euro', lineno=1120, col_offset=4), Str('ger_de', lineno=1121, col_offset=4), Str('ger_de.8859', lineno=1122, col_offset=4), Str('german', lineno=1123, col_offset=4), Str('german.iso88591', lineno=1124, col_offset=4), Str('german_germany', lineno=1125, col_offset=4), Str('german_germany.8859', lineno=1126, col_offset=4), Str('gl', lineno=1127, col_offset=4), Str('gl_es', lineno=1128, col_offset=4), Str('gl_es.iso88591', lineno=1129, col_offset=4), Str('gl_es.iso885915', lineno=1130, col_offset=4), Str('gl_es.iso885915@euro', lineno=1131, col_offset=4), Str('gl_es.utf8@euro', lineno=1132, col_offset=4), Str('gl_es@euro', lineno=1133, col_offset=4), Str('greek', lineno=1134, col_offset=4), Str('greek.iso88597', lineno=1135, col_offset=4), Str('gu_in', lineno=1136, col_offset=4), Str('gv', lineno=1137, col_offset=4), Str('gv_gb', lineno=1138, col_offset=4), Str('gv_gb.iso88591', lineno=1139, col_offset=4), Str('gv_gb.iso885914', lineno=1140, col_offset=4), Str('gv_gb.iso885915', lineno=1141, col_offset=4), Str('gv_gb@euro', lineno=1142, col_offset=4), Str('he', lineno=1143, col_offset=4), Str('he_il', lineno=1144, col_offset=4), Str('he_il.cp1255', lineno=1145, col_offset=4), Str('he_il.iso88598', lineno=1146, col_offset=4), Str('he_il.microsoftcp1255', lineno=1147, col_offset=4), Str('hebrew', lineno=1148, col_offset=4), Str('hebrew.iso88598', lineno=1149, col_offset=4), Str('hi', lineno=1150, col_offset=4), Str('hi_in', lineno=1151, col_offset=4), Str('hi_in.isciidev', lineno=1152, col_offset=4), Str('hne', lineno=1153, col_offset=4), Str('hr', lineno=1154, col_offset=4), Str('hr_hr', lineno=1155, col_offset=4), Str('hr_hr.iso88592', lineno=1156, col_offset=4), Str('hrvatski', lineno=1157, col_offset=4), Str('hu', lineno=1158, col_offset=4), Str('hu_hu', lineno=1159, col_offset=4), Str('hu_hu.iso88592', lineno=1160, col_offset=4), Str('hungarian', lineno=1161, col_offset=4), Str('icelandic', lineno=1162, col_offset=4), Str('icelandic.iso88591', lineno=1163, col_offset=4), Str('id', lineno=1164, col_offset=4), Str('id_id', lineno=1165, col_offset=4), Str('in', lineno=1166, col_offset=4), Str('in_id', lineno=1167, col_offset=4), Str('is', lineno=1168, col_offset=4), Str('is_is', lineno=1169, col_offset=4), Str('is_is.iso88591', lineno=1170, col_offset=4), Str('is_is.iso885915', lineno=1171, col_offset=4), Str('is_is@euro', lineno=1172, col_offset=4), Str('iso-8859-1', lineno=1173, col_offset=4), Str('iso-8859-15', lineno=1174, col_offset=4), Str('iso8859-1', lineno=1175, col_offset=4), Str('iso8859-15', lineno=1176, col_offset=4), Str('iso_8859_1', lineno=1177, col_offset=4), Str('iso_8859_15', lineno=1178, col_offset=4), Str('it', lineno=1179, col_offset=4), Str('it.iso885915', lineno=1180, col_offset=4), Str('it_ch', lineno=1181, col_offset=4), Str('it_ch.iso88591', lineno=1182, col_offset=4), Str('it_ch.iso885915', lineno=1183, col_offset=4), Str('it_ch@euro', lineno=1184, col_offset=4), Str('it_it', lineno=1185, col_offset=4), Str('it_it.88591', lineno=1186, col_offset=4), Str('it_it.iso88591', lineno=1187, col_offset=4), Str('it_it.iso885915', lineno=1188, col_offset=4), Str('it_it.iso885915@euro', lineno=1189, col_offset=4), Str('it_it.utf8@euro', lineno=1190, col_offset=4), Str('it_it@euro', lineno=1191, col_offset=4), Str('italian', lineno=1192, col_offset=4), Str('italian.iso88591', lineno=1193, col_offset=4), Str('iu', lineno=1194, col_offset=4), Str('iu_ca', lineno=1195, col_offset=4), Str('iu_ca.nunacom8', lineno=1196, col_offset=4), Str('iw', lineno=1197, col_offset=4), Str('iw_il', lineno=1198, col_offset=4), Str('iw_il.iso88598', lineno=1199, col_offset=4), Str('ja', lineno=1200, col_offset=4), Str('ja.jis', lineno=1201, col_offset=4), Str('ja.sjis', lineno=1202, col_offset=4), Str('ja_jp', lineno=1203, col_offset=4), Str('ja_jp.ajec', lineno=1204, col_offset=4), Str('ja_jp.euc', lineno=1205, col_offset=4), Str('ja_jp.eucjp', lineno=1206, col_offset=4), Str('ja_jp.iso-2022-jp', lineno=1207, col_offset=4), Str('ja_jp.iso2022jp', lineno=1208, col_offset=4), Str('ja_jp.jis', lineno=1209, col_offset=4), Str('ja_jp.jis7', lineno=1210, col_offset=4), Str('ja_jp.mscode', lineno=1211, col_offset=4), Str('ja_jp.pck', lineno=1212, col_offset=4), Str('ja_jp.sjis', lineno=1213, col_offset=4), Str('ja_jp.ujis', lineno=1214, col_offset=4), Str('japan', lineno=1215, col_offset=4), Str('japanese', lineno=1216, col_offset=4), Str('japanese-euc', lineno=1217, col_offset=4), Str('japanese.euc', lineno=1218, col_offset=4), Str('japanese.sjis', lineno=1219, col_offset=4), Str('jp_jp', lineno=1220, col_offset=4), Str('ka', lineno=1221, col_offset=4), Str('ka_ge', lineno=1222, col_offset=4), Str('ka_ge.georgianacademy', lineno=1223, col_offset=4), Str('ka_ge.georgianps', lineno=1224, col_offset=4), Str('ka_ge.georgianrs', lineno=1225, col_offset=4), Str('kl', lineno=1226, col_offset=4), Str('kl_gl', lineno=1227, col_offset=4), Str('kl_gl.iso88591', lineno=1228, col_offset=4), Str('kl_gl.iso885915', lineno=1229, col_offset=4), Str('kl_gl@euro', lineno=1230, col_offset=4), Str('km_kh', lineno=1231, col_offset=4), Str('kn', lineno=1232, col_offset=4), Str('kn_in', lineno=1233, col_offset=4), Str('ko', lineno=1234, col_offset=4), Str('ko_kr', lineno=1235, col_offset=4), Str('ko_kr.euc', lineno=1236, col_offset=4), Str('ko_kr.euckr', lineno=1237, col_offset=4), Str('korean', lineno=1238, col_offset=4), Str('korean.euc', lineno=1239, col_offset=4), Str('ks', lineno=1240, col_offset=4), Str('ks_in@devanagari', lineno=1241, col_offset=4), Str('kw', lineno=1242, col_offset=4), Str('kw_gb', lineno=1243, col_offset=4), Str('kw_gb.iso88591', lineno=1244, col_offset=4), Str('kw_gb.iso885914', lineno=1245, col_offset=4), Str('kw_gb.iso885915', lineno=1246, col_offset=4), Str('kw_gb@euro', lineno=1247, col_offset=4), Str('ky', lineno=1248, col_offset=4), Str('ky_kg', lineno=1249, col_offset=4), Str('lithuanian', lineno=1250, col_offset=4), Str('lo', lineno=1251, col_offset=4), Str('lo_la', lineno=1252, col_offset=4), Str('lo_la.cp1133', lineno=1253, col_offset=4), Str('lo_la.ibmcp1133', lineno=1254, col_offset=4), Str('lo_la.mulelao1', lineno=1255, col_offset=4), Str('lt', lineno=1256, col_offset=4), Str('lt_lt', lineno=1257, col_offset=4), Str('lt_lt.iso885913', lineno=1258, col_offset=4), Str('lt_lt.iso88594', lineno=1259, col_offset=4), Str('lv', lineno=1260, col_offset=4), Str('lv_lv', lineno=1261, col_offset=4), Str('lv_lv.iso885913', lineno=1262, col_offset=4), Str('lv_lv.iso88594', lineno=1263, col_offset=4), Str('mai', lineno=1264, col_offset=4), Str('mi', lineno=1265, col_offset=4), Str('mi_nz', lineno=1266, col_offset=4), Str('mi_nz.iso88591', lineno=1267, col_offset=4), Str('mk', lineno=1268, col_offset=4), Str('mk_mk', lineno=1269, col_offset=4), Str('mk_mk.cp1251', lineno=1270, col_offset=4), Str('mk_mk.iso88595', lineno=1271, col_offset=4), Str('mk_mk.microsoftcp1251', lineno=1272, col_offset=4), Str('ml', lineno=1273, col_offset=4), Str('mr', lineno=1274, col_offset=4), Str('mr_in', lineno=1275, col_offset=4), Str('ms', lineno=1276, col_offset=4), Str('ms_my', lineno=1277, col_offset=4), Str('ms_my.iso88591', lineno=1278, col_offset=4), Str('mt', lineno=1279, col_offset=4), Str('mt_mt', lineno=1280, col_offset=4), Str('mt_mt.iso88593', lineno=1281, col_offset=4), Str('nb', lineno=1282, col_offset=4), Str('nb_no', lineno=1283, col_offset=4), Str('nb_no.88591', lineno=1284, col_offset=4), Str('nb_no.iso88591', lineno=1285, col_offset=4), Str('nb_no.iso885915', lineno=1286, col_offset=4), Str('nb_no@euro', lineno=1287, col_offset=4), Str('nl', lineno=1288, col_offset=4), Str('nl.iso885915', lineno=1289, col_offset=4), Str('nl_be', lineno=1290, col_offset=4), Str('nl_be.88591', lineno=1291, col_offset=4), Str('nl_be.iso88591', lineno=1292, col_offset=4), Str('nl_be.iso885915', lineno=1293, col_offset=4), Str('nl_be.iso885915@euro', lineno=1294, col_offset=4), Str('nl_be.utf8@euro', lineno=1295, col_offset=4), Str('nl_be@euro', lineno=1296, col_offset=4), Str('nl_nl', lineno=1297, col_offset=4), Str('nl_nl.88591', lineno=1298, col_offset=4), Str('nl_nl.iso88591', lineno=1299, col_offset=4), Str('nl_nl.iso885915', lineno=1300, col_offset=4), Str('nl_nl.iso885915@euro', lineno=1301, col_offset=4), Str('nl_nl.utf8@euro', lineno=1302, col_offset=4), Str('nl_nl@euro', lineno=1303, col_offset=4), Str('nn', lineno=1304, col_offset=4), Str('nn_no', lineno=1305, col_offset=4), Str('nn_no.88591', lineno=1306, col_offset=4), Str('nn_no.iso88591', lineno=1307, col_offset=4), Str('nn_no.iso885915', lineno=1308, col_offset=4), Str('nn_no@euro', lineno=1309, col_offset=4), Str('no', lineno=1310, col_offset=4), Str('no@nynorsk', lineno=1311, col_offset=4), Str('no_no', lineno=1312, col_offset=4), Str('no_no.88591', lineno=1313, col_offset=4), Str('no_no.iso88591', lineno=1314, col_offset=4), Str('no_no.iso885915', lineno=1315, col_offset=4), Str('no_no.iso88591@bokmal', lineno=1316, col_offset=4), Str('no_no.iso88591@nynorsk', lineno=1317, col_offset=4), Str('no_no@euro', lineno=1318, col_offset=4), Str('norwegian', lineno=1319, col_offset=4), Str('norwegian.iso88591', lineno=1320, col_offset=4), Str('nr', lineno=1321, col_offset=4), Str('nr_za', lineno=1322, col_offset=4), Str('nr_za.iso88591', lineno=1323, col_offset=4), Str('nso', lineno=1324, col_offset=4), Str('nso_za', lineno=1325, col_offset=4), Str('nso_za.iso885915', lineno=1326, col_offset=4), Str('ny', lineno=1327, col_offset=4), Str('ny_no', lineno=1328, col_offset=4), Str('ny_no.88591', lineno=1329, col_offset=4), Str('ny_no.iso88591', lineno=1330, col_offset=4), Str('ny_no.iso885915', lineno=1331, col_offset=4), Str('ny_no@euro', lineno=1332, col_offset=4), Str('nynorsk', lineno=1333, col_offset=4), Str('oc', lineno=1334, col_offset=4), Str('oc_fr', lineno=1335, col_offset=4), Str('oc_fr.iso88591', lineno=1336, col_offset=4), Str('oc_fr.iso885915', lineno=1337, col_offset=4), Str('oc_fr@euro', lineno=1338, col_offset=4), Str('or', lineno=1339, col_offset=4), Str('pa', lineno=1340, col_offset=4), Str('pa_in', lineno=1341, col_offset=4), Str('pd', lineno=1342, col_offset=4), Str('pd_de', lineno=1343, col_offset=4), Str('pd_de.iso88591', lineno=1344, col_offset=4), Str('pd_de.iso885915', lineno=1345, col_offset=4), Str('pd_de@euro', lineno=1346, col_offset=4), Str('pd_us', lineno=1347, col_offset=4), Str('pd_us.iso88591', lineno=1348, col_offset=4), Str('pd_us.iso885915', lineno=1349, col_offset=4), Str('pd_us@euro', lineno=1350, col_offset=4), Str('ph', lineno=1351, col_offset=4), Str('ph_ph', lineno=1352, col_offset=4), Str('ph_ph.iso88591', lineno=1353, col_offset=4), Str('pl', lineno=1354, col_offset=4), Str('pl_pl', lineno=1355, col_offset=4), Str('pl_pl.iso88592', lineno=1356, col_offset=4), Str('polish', lineno=1357, col_offset=4), Str('portuguese', lineno=1358, col_offset=4), Str('portuguese.iso88591', lineno=1359, col_offset=4), Str('portuguese_brazil', lineno=1360, col_offset=4), Str('portuguese_brazil.8859', lineno=1361, col_offset=4), Str('posix', lineno=1362, col_offset=4), Str('posix-utf2', lineno=1363, col_offset=4), Str('pp', lineno=1364, col_offset=4), Str('pp_an', lineno=1365, col_offset=4), Str('pp_an.iso88591', lineno=1366, col_offset=4), Str('pt', lineno=1367, col_offset=4), Str('pt.iso885915', lineno=1368, col_offset=4), Str('pt_br', lineno=1369, col_offset=4), Str('pt_br.88591', lineno=1370, col_offset=4), Str('pt_br.iso88591', lineno=1371, col_offset=4), Str('pt_br.iso885915', lineno=1372, col_offset=4), Str('pt_br@euro', lineno=1373, col_offset=4), Str('pt_pt', lineno=1374, col_offset=4), Str('pt_pt.88591', lineno=1375, col_offset=4), Str('pt_pt.iso88591', lineno=1376, col_offset=4), Str('pt_pt.iso885915', lineno=1377, col_offset=4), Str('pt_pt.iso885915@euro', lineno=1378, col_offset=4), Str('pt_pt.utf8@euro', lineno=1379, col_offset=4), Str('pt_pt@euro', lineno=1380, col_offset=4), Str('ro', lineno=1381, col_offset=4), Str('ro_ro', lineno=1382, col_offset=4), Str('ro_ro.iso88592', lineno=1383, col_offset=4), Str('romanian', lineno=1384, col_offset=4), Str('ru', lineno=1385, col_offset=4), Str('ru.koi8r', lineno=1386, col_offset=4), Str('ru_ru', lineno=1387, col_offset=4), Str('ru_ru.cp1251', lineno=1388, col_offset=4), Str('ru_ru.iso88595', lineno=1389, col_offset=4), Str('ru_ru.koi8r', lineno=1390, col_offset=4), Str('ru_ru.microsoftcp1251', lineno=1391, col_offset=4), Str('ru_ua', lineno=1392, col_offset=4), Str('ru_ua.cp1251', lineno=1393, col_offset=4), Str('ru_ua.koi8u', lineno=1394, col_offset=4), Str('ru_ua.microsoftcp1251', lineno=1395, col_offset=4), Str('rumanian', lineno=1396, col_offset=4), Str('russian', lineno=1397, col_offset=4), Str('rw', lineno=1398, col_offset=4), Str('rw_rw', lineno=1399, col_offset=4), Str('rw_rw.iso88591', lineno=1400, col_offset=4), Str('sd', lineno=1401, col_offset=4), Str('se_no', lineno=1402, col_offset=4), Str('serbocroatian', lineno=1403, col_offset=4), Str('sh', lineno=1404, col_offset=4), Str('sh_ba.iso88592@bosnia', lineno=1405, col_offset=4), Str('sh_hr', lineno=1406, col_offset=4), Str('sh_hr.iso88592', lineno=1407, col_offset=4), Str('sh_sp', lineno=1408, col_offset=4), Str('sh_yu', lineno=1409, col_offset=4), Str('si', lineno=1410, col_offset=4), Str('si_lk', lineno=1411, col_offset=4), Str('sinhala', lineno=1412, col_offset=4), Str('sk', lineno=1413, col_offset=4), Str('sk_sk', lineno=1414, col_offset=4), Str('sk_sk.iso88592', lineno=1415, col_offset=4), Str('sl', lineno=1416, col_offset=4), Str('sl_cs', lineno=1417, col_offset=4), Str('sl_si', lineno=1418, col_offset=4), Str('sl_si.iso88592', lineno=1419, col_offset=4), Str('slovak', lineno=1420, col_offset=4), Str('slovene', lineno=1421, col_offset=4), Str('slovenian', lineno=1422, col_offset=4), Str('sp', lineno=1423, col_offset=4), Str('sp_yu', lineno=1424, col_offset=4), Str('spanish', lineno=1425, col_offset=4), Str('spanish.iso88591', lineno=1426, col_offset=4), Str('spanish_spain', lineno=1427, col_offset=4), Str('spanish_spain.8859', lineno=1428, col_offset=4), Str('sq', lineno=1429, col_offset=4), Str('sq_al', lineno=1430, col_offset=4), Str('sq_al.iso88592', lineno=1431, col_offset=4), Str('sr', lineno=1432, col_offset=4), Str('sr@cyrillic', lineno=1433, col_offset=4), Str('sr@latin', lineno=1434, col_offset=4), Str('sr@latn', lineno=1435, col_offset=4), Str('sr_cs', lineno=1436, col_offset=4), Str('sr_cs.iso88592', lineno=1437, col_offset=4), Str('sr_cs.iso88592@latn', lineno=1438, col_offset=4), Str('sr_cs.iso88595', lineno=1439, col_offset=4), Str('sr_cs.utf8@latn', lineno=1440, col_offset=4), Str('sr_cs@latn', lineno=1441, col_offset=4), Str('sr_me', lineno=1442, col_offset=4), Str('sr_rs', lineno=1443, col_offset=4), Str('sr_rs.utf8@latn', lineno=1444, col_offset=4), Str('sr_rs@latin', lineno=1445, col_offset=4), Str('sr_rs@latn', lineno=1446, col_offset=4), Str('sr_sp', lineno=1447, col_offset=4), Str('sr_yu', lineno=1448, col_offset=4), Str('sr_yu.cp1251@cyrillic', lineno=1449, col_offset=4), Str('sr_yu.iso88592', lineno=1450, col_offset=4), Str('sr_yu.iso88595', lineno=1451, col_offset=4), Str('sr_yu.iso88595@cyrillic', lineno=1452, col_offset=4), Str('sr_yu.microsoftcp1251@cyrillic', lineno=1453, col_offset=4), Str('sr_yu.utf8@cyrillic', lineno=1454, col_offset=4), Str('sr_yu@cyrillic', lineno=1455, col_offset=4), Str('ss', lineno=1456, col_offset=4), Str('ss_za', lineno=1457, col_offset=4), Str('ss_za.iso88591', lineno=1458, col_offset=4), Str('st', lineno=1459, col_offset=4), Str('st_za', lineno=1460, col_offset=4), Str('st_za.iso88591', lineno=1461, col_offset=4), Str('sv', lineno=1462, col_offset=4), Str('sv.iso885915', lineno=1463, col_offset=4), Str('sv_fi', lineno=1464, col_offset=4), Str('sv_fi.iso88591', lineno=1465, col_offset=4), Str('sv_fi.iso885915', lineno=1466, col_offset=4), Str('sv_fi.iso885915@euro', lineno=1467, col_offset=4), Str('sv_fi.utf8@euro', lineno=1468, col_offset=4), Str('sv_fi@euro', lineno=1469, col_offset=4), Str('sv_se', lineno=1470, col_offset=4), Str('sv_se.88591', lineno=1471, col_offset=4), Str('sv_se.iso88591', lineno=1472, col_offset=4), Str('sv_se.iso885915', lineno=1473, col_offset=4), Str('sv_se@euro', lineno=1474, col_offset=4), Str('swedish', lineno=1475, col_offset=4), Str('swedish.iso88591', lineno=1476, col_offset=4), Str('ta', lineno=1477, col_offset=4), Str('ta_in', lineno=1478, col_offset=4), Str('ta_in.tscii', lineno=1479, col_offset=4), Str('ta_in.tscii0', lineno=1480, col_offset=4), Str('te', lineno=1481, col_offset=4), Str('tg', lineno=1482, col_offset=4), Str('tg_tj', lineno=1483, col_offset=4), Str('tg_tj.koi8c', lineno=1484, col_offset=4), Str('th', lineno=1485, col_offset=4), Str('th_th', lineno=1486, col_offset=4), Str('th_th.iso885911', lineno=1487, col_offset=4), Str('th_th.tactis', lineno=1488, col_offset=4), Str('th_th.tis620', lineno=1489, col_offset=4), Str('thai', lineno=1490, col_offset=4), Str('tl', lineno=1491, col_offset=4), Str('tl_ph', lineno=1492, col_offset=4), Str('tl_ph.iso88591', lineno=1493, col_offset=4), Str('tn', lineno=1494, col_offset=4), Str('tn_za', lineno=1495, col_offset=4), Str('tn_za.iso885915', lineno=1496, col_offset=4), Str('tr', lineno=1497, col_offset=4), Str('tr_tr', lineno=1498, col_offset=4), Str('tr_tr.iso88599', lineno=1499, col_offset=4), Str('ts', lineno=1500, col_offset=4), Str('ts_za', lineno=1501, col_offset=4), Str('ts_za.iso88591', lineno=1502, col_offset=4), Str('tt', lineno=1503, col_offset=4), Str('tt_ru', lineno=1504, col_offset=4), Str('tt_ru.koi8c', lineno=1505, col_offset=4), Str('tt_ru.tatarcyr', lineno=1506, col_offset=4), Str('turkish', lineno=1507, col_offset=4), Str('turkish.iso88599', lineno=1508, col_offset=4), Str('uk', lineno=1509, col_offset=4), Str('uk_ua', lineno=1510, col_offset=4), Str('uk_ua.cp1251', lineno=1511, col_offset=4), Str('uk_ua.iso88595', lineno=1512, col_offset=4), Str('uk_ua.koi8u', lineno=1513, col_offset=4), Str('uk_ua.microsoftcp1251', lineno=1514, col_offset=4), Str('univ', lineno=1515, col_offset=4), Str('universal', lineno=1516, col_offset=4), Str('universal.utf8@ucs4', lineno=1517, col_offset=4), Str('ur', lineno=1518, col_offset=4), Str('ur_pk', lineno=1519, col_offset=4), Str('ur_pk.cp1256', lineno=1520, col_offset=4), Str('ur_pk.microsoftcp1256', lineno=1521, col_offset=4), Str('uz', lineno=1522, col_offset=4), Str('uz_uz', lineno=1523, col_offset=4), Str('uz_uz.iso88591', lineno=1524, col_offset=4), Str('uz_uz.utf8@cyrillic', lineno=1525, col_offset=4), Str('uz_uz@cyrillic', lineno=1526, col_offset=4), Str('ve', lineno=1527, col_offset=4), Str('ve_za', lineno=1528, col_offset=4), Str('vi', lineno=1529, col_offset=4), Str('vi_vn', lineno=1530, col_offset=4), Str('vi_vn.tcvn', lineno=1531, col_offset=4), Str('vi_vn.tcvn5712', lineno=1532, col_offset=4), Str('vi_vn.viscii', lineno=1533, col_offset=4), Str('vi_vn.viscii111', lineno=1534, col_offset=4), Str('wa', lineno=1535, col_offset=4), Str('wa_be', lineno=1536, col_offset=4), Str('wa_be.iso88591', lineno=1537, col_offset=4), Str('wa_be.iso885915', lineno=1538, col_offset=4), Str('wa_be.iso885915@euro', lineno=1539, col_offset=4), Str('wa_be@euro', lineno=1540, col_offset=4), Str('xh', lineno=1541, col_offset=4), Str('xh_za', lineno=1542, col_offset=4), Str('xh_za.iso88591', lineno=1543, col_offset=4), Str('yi', lineno=1544, col_offset=4), Str('yi_us', lineno=1545, col_offset=4), Str('yi_us.cp1255', lineno=1546, col_offset=4), Str('yi_us.microsoftcp1255', lineno=1547, col_offset=4), Str('zh', lineno=1548, col_offset=4), Str('zh_cn', lineno=1549, col_offset=4), Str('zh_cn.big5', lineno=1550, col_offset=4), Str('zh_cn.euc', lineno=1551, col_offset=4), Str('zh_cn.gb18030', lineno=1552, col_offset=4), Str('zh_cn.gb2312', lineno=1553, col_offset=4), Str('zh_cn.gbk', lineno=1554, col_offset=4), Str('zh_hk', lineno=1555, col_offset=4), Str('zh_hk.big5', lineno=1556, col_offset=4), Str('zh_hk.big5hk', lineno=1557, col_offset=4), Str('zh_hk.big5hkscs', lineno=1558, col_offset=4), Str('zh_tw', lineno=1559, col_offset=4), Str('zh_tw.big5', lineno=1560, col_offset=4), Str('zh_tw.euc', lineno=1561, col_offset=4), Str('zh_tw.euctw', lineno=1562, col_offset=4), Str('zu', lineno=1563, col_offset=4), Str('zu_za', lineno=1564, col_offset=4), Str('zu_za.iso88591', lineno=1565, col_offset=4)], [Str('a3_AZ.KOI8-C', lineno=723, col_offset=44), Str('a3_AZ.KOI8-C', lineno=724, col_offset=44), Str('a3_AZ.KOI8-C', lineno=725, col_offset=44), Str('af_ZA.ISO8859-1', lineno=726, col_offset=44), Str('af_ZA.ISO8859-1', lineno=727, col_offset=44), Str('af_ZA.ISO8859-1', lineno=728, col_offset=44), Str('am_ET.UTF-8', lineno=729, col_offset=44), Str('am_ET.UTF-8', lineno=730, col_offset=44), Str('en_US.ISO8859-1', lineno=731, col_offset=44), Str('en_US.ISO8859-1', lineno=732, col_offset=44), Str('ar_AA.ISO8859-6', lineno=733, col_offset=44), Str('ar_AA.ISO8859-6', lineno=734, col_offset=44), Str('ar_AA.ISO8859-6', lineno=735, col_offset=44), Str('ar_AE.ISO8859-6', lineno=736, col_offset=44), Str('ar_AE.ISO8859-6', lineno=737, col_offset=44), Str('ar_BH.ISO8859-6', lineno=738, col_offset=44), Str('ar_BH.ISO8859-6', lineno=739, col_offset=44), Str('ar_DZ.ISO8859-6', lineno=740, col_offset=44), Str('ar_DZ.ISO8859-6', lineno=741, col_offset=44), Str('ar_EG.ISO8859-6', lineno=742, col_offset=44), Str('ar_EG.ISO8859-6', lineno=743, col_offset=44), Str('ar_IQ.ISO8859-6', lineno=744, col_offset=44), Str('ar_IQ.ISO8859-6', lineno=745, col_offset=44), Str('ar_JO.ISO8859-6', lineno=746, col_offset=44), Str('ar_JO.ISO8859-6', lineno=747, col_offset=44), Str('ar_KW.ISO8859-6', lineno=748, col_offset=44), Str('ar_KW.ISO8859-6', lineno=749, col_offset=44), Str('ar_LB.ISO8859-6', lineno=750, col_offset=44), Str('ar_LB.ISO8859-6', lineno=751, col_offset=44), Str('ar_LY.ISO8859-6', lineno=752, col_offset=44), Str('ar_LY.ISO8859-6', lineno=753, col_offset=44), Str('ar_MA.ISO8859-6', lineno=754, col_offset=44), Str('ar_MA.ISO8859-6', lineno=755, col_offset=44), Str('ar_OM.ISO8859-6', lineno=756, col_offset=44), Str('ar_OM.ISO8859-6', lineno=757, col_offset=44), Str('ar_QA.ISO8859-6', lineno=758, col_offset=44), Str('ar_QA.ISO8859-6', lineno=759, col_offset=44), Str('ar_SA.ISO8859-6', lineno=760, col_offset=44), Str('ar_SA.ISO8859-6', lineno=761, col_offset=44), Str('ar_SD.ISO8859-6', lineno=762, col_offset=44), Str('ar_SD.ISO8859-6', lineno=763, col_offset=44), Str('ar_SY.ISO8859-6', lineno=764, col_offset=44), Str('ar_SY.ISO8859-6', lineno=765, col_offset=44), Str('ar_TN.ISO8859-6', lineno=766, col_offset=44), Str('ar_TN.ISO8859-6', lineno=767, col_offset=44), Str('ar_YE.ISO8859-6', lineno=768, col_offset=44), Str('ar_YE.ISO8859-6', lineno=769, col_offset=44), Str('ar_AA.ISO8859-6', lineno=770, col_offset=44), Str('ar_AA.ISO8859-6', lineno=771, col_offset=44), Str('as_IN.UTF-8', lineno=772, col_offset=44), Str('az_AZ.ISO8859-9E', lineno=773, col_offset=44), Str('az_AZ.ISO8859-9E', lineno=774, col_offset=44), Str('az_AZ.ISO8859-9E', lineno=775, col_offset=44), Str('be_BY.CP1251', lineno=776, col_offset=44), Str('be_BY.UTF-8@latin', lineno=777, col_offset=44), Str('be_BY.CP1251', lineno=778, col_offset=44), Str('be_BY.CP1251', lineno=779, col_offset=44), Str('be_BY.CP1251', lineno=780, col_offset=44), Str('be_BY.UTF-8@latin', lineno=781, col_offset=44), Str('be_BY.UTF-8@latin', lineno=782, col_offset=44), Str('bg_BG.CP1251', lineno=783, col_offset=44), Str('bg_BG.CP1251', lineno=784, col_offset=44), Str('bg_BG.CP1251', lineno=785, col_offset=44), Str('bg_BG.ISO8859-5', lineno=786, col_offset=44), Str('bg_BG.KOI8-R', lineno=787, col_offset=44), Str('bg_BG.CP1251', lineno=788, col_offset=44), Str('bn_IN.UTF-8', lineno=789, col_offset=44), Str('nb_NO.ISO8859-1', lineno=790, col_offset=44), Str('nb_NO.ISO8859-1', lineno=791, col_offset=44), Str('br_FR.ISO8859-1', lineno=792, col_offset=44), Str('br_FR.ISO8859-1', lineno=793, col_offset=44), Str('br_FR.ISO8859-1', lineno=794, col_offset=44), Str('br_FR.ISO8859-14', lineno=795, col_offset=44), Str('br_FR.ISO8859-15', lineno=796, col_offset=44), Str('br_FR.ISO8859-15', lineno=797, col_offset=44), Str('br_FR.UTF-8', lineno=798, col_offset=44), Str('br_FR.ISO8859-15', lineno=799, col_offset=44), Str('bs_BA.ISO8859-2', lineno=800, col_offset=44), Str('bs_BA.ISO8859-2', lineno=801, col_offset=44), Str('bs_BA.ISO8859-2', lineno=802, col_offset=44), Str('bg_BG.CP1251', lineno=803, col_offset=44), Str('C', lineno=804, col_offset=44), Str('fr_CA.ISO8859-1', lineno=805, col_offset=44), Str('fr_CA.ISO8859-1', lineno=806, col_offset=44), Str('C', lineno=807, col_offset=44), Str('en_US.ISO8859-1', lineno=808, col_offset=44), Str('C', lineno=809, col_offset=44), Str('C', lineno=810, col_offset=44), Str('ca_ES.ISO8859-1', lineno=811, col_offset=44), Str('ca_AD.ISO8859-1', lineno=812, col_offset=44), Str('ca_AD.ISO8859-1', lineno=813, col_offset=44), Str('ca_AD.ISO8859-15', lineno=814, col_offset=44), Str('ca_AD.ISO8859-15', lineno=815, col_offset=44), Str('ca_AD.UTF-8', lineno=816, col_offset=44), Str('ca_AD.ISO8859-15', lineno=817, col_offset=44), Str('ca_ES.ISO8859-1', lineno=818, col_offset=44), Str('ca_ES.ISO8859-1', lineno=819, col_offset=44), Str('ca_ES.ISO8859-15', lineno=820, col_offset=44), Str('ca_ES.ISO8859-15', lineno=821, col_offset=44), Str('ca_ES.UTF-8', lineno=822, col_offset=44), Str('ca_ES.ISO8859-15', lineno=823, col_offset=44), Str('ca_FR.ISO8859-1', lineno=824, col_offset=44), Str('ca_FR.ISO8859-1', lineno=825, col_offset=44), Str('ca_FR.ISO8859-15', lineno=826, col_offset=44), Str('ca_FR.ISO8859-15', lineno=827, col_offset=44), Str('ca_FR.UTF-8', lineno=828, col_offset=44), Str('ca_FR.ISO8859-15', lineno=829, col_offset=44), Str('ca_IT.ISO8859-1', lineno=830, col_offset=44), Str('ca_IT.ISO8859-1', lineno=831, col_offset=44), Str('ca_IT.ISO8859-15', lineno=832, col_offset=44), Str('ca_IT.ISO8859-15', lineno=833, col_offset=44), Str('ca_IT.UTF-8', lineno=834, col_offset=44), Str('ca_IT.ISO8859-15', lineno=835, col_offset=44), Str('ca_ES.ISO8859-1', lineno=836, col_offset=44), Str('en_US.ISO8859-1', lineno=837, col_offset=44), Str('en_US.ISO8859-1', lineno=838, col_offset=44), Str('zh_CN.eucCN', lineno=839, col_offset=44), Str('zh_TW.eucTW', lineno=840, col_offset=44), Str('hr_HR.ISO8859-2', lineno=841, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=842, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=843, col_offset=44), Str('cs_CS.ISO8859-2', lineno=844, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=845, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=846, col_offset=44), Str('cy_GB.ISO8859-1', lineno=847, col_offset=44), Str('cy_GB.ISO8859-1', lineno=848, col_offset=44), Str('cy_GB.ISO8859-1', lineno=849, col_offset=44), Str('cy_GB.ISO8859-14', lineno=850, col_offset=44), Str('cy_GB.ISO8859-15', lineno=851, col_offset=44), Str('cy_GB.ISO8859-15', lineno=852, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=853, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=854, col_offset=44), Str('cs_CZ.ISO8859-2', lineno=855, col_offset=44), Str('da_DK.ISO8859-1', lineno=856, col_offset=44), Str('da_DK.ISO8859-15', lineno=857, col_offset=44), Str('da_DK.ISO8859-1', lineno=858, col_offset=44), Str('da_DK.ISO8859-1', lineno=859, col_offset=44), Str('da_DK.ISO8859-15', lineno=860, col_offset=44), Str('da_DK.ISO8859-1', lineno=861, col_offset=44), Str('da_DK.ISO8859-15', lineno=862, col_offset=44), Str('da_DK.ISO8859-15', lineno=863, col_offset=44), Str('da_DK.ISO8859-1', lineno=864, col_offset=44), Str('da_DK.ISO8859-1', lineno=865, col_offset=44), Str('da_DK.ISO8859-1', lineno=866, col_offset=44), Str('de_DE.ISO8859-1', lineno=867, col_offset=44), Str('de_DE.ISO8859-15', lineno=868, col_offset=44), Str('de_AT.ISO8859-1', lineno=869, col_offset=44), Str('de_AT.ISO8859-1', lineno=870, col_offset=44), Str('de_AT.ISO8859-15', lineno=871, col_offset=44), Str('de_AT.ISO8859-15', lineno=872, col_offset=44), Str('de_AT.UTF-8', lineno=873, col_offset=44), Str('de_AT.ISO8859-15', lineno=874, col_offset=44), Str('de_BE.ISO8859-1', lineno=875, col_offset=44), Str('de_BE.ISO8859-1', lineno=876, col_offset=44), Str('de_BE.ISO8859-15', lineno=877, col_offset=44), Str('de_BE.ISO8859-15', lineno=878, col_offset=44), Str('de_BE.UTF-8', lineno=879, col_offset=44), Str('de_BE.ISO8859-15', lineno=880, col_offset=44), Str('de_CH.ISO8859-1', lineno=881, col_offset=44), Str('de_CH.ISO8859-1', lineno=882, col_offset=44), Str('de_CH.ISO8859-15', lineno=883, col_offset=44), Str('de_CH.ISO8859-15', lineno=884, col_offset=44), Str('de_DE.ISO8859-1', lineno=885, col_offset=44), Str('de_DE.ISO8859-1', lineno=886, col_offset=44), Str('de_DE.ISO8859-15', lineno=887, col_offset=44), Str('de_DE.ISO8859-15', lineno=888, col_offset=44), Str('de_DE.ISO8859-1', lineno=889, col_offset=44), Str('de_DE.ISO8859-15', lineno=890, col_offset=44), Str('de_DE.ISO8859-15', lineno=891, col_offset=44), Str('de_DE.UTF-8', lineno=892, col_offset=44), Str('de_DE.ISO8859-15', lineno=893, col_offset=44), Str('de_LU.ISO8859-1', lineno=894, col_offset=44), Str('de_LU.ISO8859-1', lineno=895, col_offset=44), Str('de_LU.ISO8859-15', lineno=896, col_offset=44), Str('de_LU.ISO8859-15', lineno=897, col_offset=44), Str('de_LU.UTF-8', lineno=898, col_offset=44), Str('de_LU.ISO8859-15', lineno=899, col_offset=44), Str('de_DE.ISO8859-1', lineno=900, col_offset=44), Str('nl_NL.ISO8859-1', lineno=901, col_offset=44), Str('nl_BE.ISO8859-1', lineno=902, col_offset=44), Str('ee_EE.ISO8859-4', lineno=903, col_offset=44), Str('ee_EE.ISO8859-4', lineno=904, col_offset=44), Str('ee_EE.ISO8859-4', lineno=905, col_offset=44), Str('et_EE.ISO8859-1', lineno=906, col_offset=44), Str('el_GR.ISO8859-7', lineno=907, col_offset=44), Str('el_GR.ISO8859-7', lineno=908, col_offset=44), Str('el_GR.ISO8859-7', lineno=909, col_offset=44), Str('el_GR.ISO8859-15', lineno=910, col_offset=44), Str('en_US.ISO8859-1', lineno=911, col_offset=44), Str('en_US.ISO8859-1', lineno=912, col_offset=44), Str('en_AU.ISO8859-1', lineno=913, col_offset=44), Str('en_AU.ISO8859-1', lineno=914, col_offset=44), Str('en_BE.ISO8859-1', lineno=915, col_offset=44), Str('en_BE.ISO8859-15', lineno=916, col_offset=44), Str('en_BW.ISO8859-1', lineno=917, col_offset=44), Str('en_BW.ISO8859-1', lineno=918, col_offset=44), Str('en_CA.ISO8859-1', lineno=919, col_offset=44), Str('en_CA.ISO8859-1', lineno=920, col_offset=44), Str('en_GB.ISO8859-1', lineno=921, col_offset=44), Str('en_GB.ISO8859-1', lineno=922, col_offset=44), Str('en_GB.ISO8859-1', lineno=923, col_offset=44), Str('en_GB.ISO8859-15', lineno=924, col_offset=44), Str('en_GB.ISO8859-15', lineno=925, col_offset=44), Str('en_HK.ISO8859-1', lineno=926, col_offset=44), Str('en_HK.ISO8859-1', lineno=927, col_offset=44), Str('en_IE.ISO8859-1', lineno=928, col_offset=44), Str('en_IE.ISO8859-1', lineno=929, col_offset=44), Str('en_IE.ISO8859-15', lineno=930, col_offset=44), Str('en_IE.ISO8859-15', lineno=931, col_offset=44), Str('en_IE.UTF-8', lineno=932, col_offset=44), Str('en_IE.ISO8859-15', lineno=933, col_offset=44), Str('en_IN.ISO8859-1', lineno=934, col_offset=44), Str('en_NZ.ISO8859-1', lineno=935, col_offset=44), Str('en_NZ.ISO8859-1', lineno=936, col_offset=44), Str('en_PH.ISO8859-1', lineno=937, col_offset=44), Str('en_PH.ISO8859-1', lineno=938, col_offset=44), Str('en_SG.ISO8859-1', lineno=939, col_offset=44), Str('en_SG.ISO8859-1', lineno=940, col_offset=44), Str('en_GB.ISO8859-1', lineno=941, col_offset=44), Str('en_US.ISO8859-1', lineno=942, col_offset=44), Str('en_US.ISO8859-1', lineno=943, col_offset=44), Str('en_US.ISO8859-15', lineno=944, col_offset=44), Str('en_US.ISO8859-1', lineno=945, col_offset=44), Str('en_US.ISO8859-15', lineno=946, col_offset=44), Str('en_US.ISO8859-15', lineno=947, col_offset=44), Str('en_US.ISO8859-15', lineno=948, col_offset=44), Str('en_US.ISO8859-15', lineno=949, col_offset=44), Str('en_ZA.ISO8859-1', lineno=950, col_offset=44), Str('en_ZA.ISO8859-1', lineno=951, col_offset=44), Str('en_ZA.ISO8859-1', lineno=952, col_offset=44), Str('en_ZA.ISO8859-15', lineno=953, col_offset=44), Str('en_ZA.ISO8859-15', lineno=954, col_offset=44), Str('en_ZW.ISO8859-1', lineno=955, col_offset=44), Str('en_ZW.ISO8859-1', lineno=956, col_offset=44), Str('en_GB.ISO8859-1', lineno=957, col_offset=44), Str('en_GB.ISO8859-1', lineno=958, col_offset=44), Str('en_EN.ISO8859-1', lineno=959, col_offset=44), Str('en_EN.ISO8859-1', lineno=960, col_offset=44), Str('en_GB.ISO8859-1', lineno=961, col_offset=44), Str('en_GB.ISO8859-1', lineno=962, col_offset=44), Str('en_US.ISO8859-1', lineno=963, col_offset=44), Str('C', lineno=964, col_offset=44), Str('en_US.ISO8859-1', lineno=965, col_offset=44), Str('en_US.ISO8859-1', lineno=966, col_offset=44), Str('en_US.ISO8859-1', lineno=967, col_offset=44), Str('eo_XX.ISO8859-3', lineno=968, col_offset=44), Str('eo_EO.ISO8859-3', lineno=969, col_offset=44), Str('eo_EO.ISO8859-3', lineno=970, col_offset=44), Str('eo_XX.ISO8859-3', lineno=971, col_offset=44), Str('eo_XX.ISO8859-3', lineno=972, col_offset=44), Str('es_ES.ISO8859-1', lineno=973, col_offset=44), Str('es_AR.ISO8859-1', lineno=974, col_offset=44), Str('es_AR.ISO8859-1', lineno=975, col_offset=44), Str('es_BO.ISO8859-1', lineno=976, col_offset=44), Str('es_BO.ISO8859-1', lineno=977, col_offset=44), Str('es_CL.ISO8859-1', lineno=978, col_offset=44), Str('es_CL.ISO8859-1', lineno=979, col_offset=44), Str('es_CO.ISO8859-1', lineno=980, col_offset=44), Str('es_CO.ISO8859-1', lineno=981, col_offset=44), Str('es_CR.ISO8859-1', lineno=982, col_offset=44), Str('es_CR.ISO8859-1', lineno=983, col_offset=44), Str('es_DO.ISO8859-1', lineno=984, col_offset=44), Str('es_DO.ISO8859-1', lineno=985, col_offset=44), Str('es_EC.ISO8859-1', lineno=986, col_offset=44), Str('es_EC.ISO8859-1', lineno=987, col_offset=44), Str('es_ES.ISO8859-1', lineno=988, col_offset=44), Str('es_ES.ISO8859-1', lineno=989, col_offset=44), Str('es_ES.ISO8859-1', lineno=990, col_offset=44), Str('es_ES.ISO8859-15', lineno=991, col_offset=44), Str('es_ES.ISO8859-15', lineno=992, col_offset=44), Str('es_ES.UTF-8', lineno=993, col_offset=44), Str('es_ES.ISO8859-15', lineno=994, col_offset=44), Str('es_GT.ISO8859-1', lineno=995, col_offset=44), Str('es_GT.ISO8859-1', lineno=996, col_offset=44), Str('es_HN.ISO8859-1', lineno=997, col_offset=44), Str('es_HN.ISO8859-1', lineno=998, col_offset=44), Str('es_MX.ISO8859-1', lineno=999, col_offset=44), Str('es_MX.ISO8859-1', lineno=1000, col_offset=44), Str('es_NI.ISO8859-1', lineno=1001, col_offset=44), Str('es_NI.ISO8859-1', lineno=1002, col_offset=44), Str('es_PA.ISO8859-1', lineno=1003, col_offset=44), Str('es_PA.ISO8859-1', lineno=1004, col_offset=44), Str('es_PA.ISO8859-15', lineno=1005, col_offset=44), Str('es_PA.ISO8859-15', lineno=1006, col_offset=44), Str('es_PE.ISO8859-1', lineno=1007, col_offset=44), Str('es_PE.ISO8859-1', lineno=1008, col_offset=44), Str('es_PE.ISO8859-15', lineno=1009, col_offset=44), Str('es_PE.ISO8859-15', lineno=1010, col_offset=44), Str('es_PR.ISO8859-1', lineno=1011, col_offset=44), Str('es_PR.ISO8859-1', lineno=1012, col_offset=44), Str('es_PY.ISO8859-1', lineno=1013, col_offset=44), Str('es_PY.ISO8859-1', lineno=1014, col_offset=44), Str('es_PY.ISO8859-15', lineno=1015, col_offset=44), Str('es_PY.ISO8859-15', lineno=1016, col_offset=44), Str('es_SV.ISO8859-1', lineno=1017, col_offset=44), Str('es_SV.ISO8859-1', lineno=1018, col_offset=44), Str('es_SV.ISO8859-15', lineno=1019, col_offset=44), Str('es_SV.ISO8859-15', lineno=1020, col_offset=44), Str('es_US.ISO8859-1', lineno=1021, col_offset=44), Str('es_US.ISO8859-1', lineno=1022, col_offset=44), Str('es_UY.ISO8859-1', lineno=1023, col_offset=44), Str('es_UY.ISO8859-1', lineno=1024, col_offset=44), Str('es_UY.ISO8859-15', lineno=1025, col_offset=44), Str('es_UY.ISO8859-15', lineno=1026, col_offset=44), Str('es_VE.ISO8859-1', lineno=1027, col_offset=44), Str('es_VE.ISO8859-1', lineno=1028, col_offset=44), Str('es_VE.ISO8859-15', lineno=1029, col_offset=44), Str('es_VE.ISO8859-15', lineno=1030, col_offset=44), Str('et_EE.ISO8859-1', lineno=1031, col_offset=44), Str('et_EE.ISO8859-15', lineno=1032, col_offset=44), Str('et_EE.ISO8859-15', lineno=1033, col_offset=44), Str('et_EE.ISO8859-1', lineno=1034, col_offset=44), Str('et_EE.ISO8859-13', lineno=1035, col_offset=44), Str('et_EE.ISO8859-15', lineno=1036, col_offset=44), Str('et_EE.ISO8859-4', lineno=1037, col_offset=44), Str('et_EE.ISO8859-15', lineno=1038, col_offset=44), Str('eu_ES.ISO8859-1', lineno=1039, col_offset=44), Str('eu_ES.ISO8859-1', lineno=1040, col_offset=44), Str('eu_ES.ISO8859-1', lineno=1041, col_offset=44), Str('eu_ES.ISO8859-15', lineno=1042, col_offset=44), Str('eu_ES.ISO8859-15', lineno=1043, col_offset=44), Str('eu_ES.UTF-8', lineno=1044, col_offset=44), Str('eu_ES.ISO8859-15', lineno=1045, col_offset=44), Str('fa_IR.UTF-8', lineno=1046, col_offset=44), Str('fa_IR.UTF-8', lineno=1047, col_offset=44), Str('fa_IR.ISIRI-3342', lineno=1048, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1049, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1050, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1051, col_offset=44), Str('fi_FI.ISO8859-1', lineno=1052, col_offset=44), Str('fi_FI.ISO8859-1', lineno=1053, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1054, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1055, col_offset=44), Str('fi_FI.UTF-8', lineno=1056, col_offset=44), Str('fi_FI.ISO8859-15', lineno=1057, col_offset=44), Str('fi_FI.ISO8859-1', lineno=1058, col_offset=44), Str('fi_FI.ISO8859-1', lineno=1059, col_offset=44), Str('fo_FO.ISO8859-1', lineno=1060, col_offset=44), Str('fo_FO.ISO8859-1', lineno=1061, col_offset=44), Str('fo_FO.ISO8859-1', lineno=1062, col_offset=44), Str('fo_FO.ISO8859-15', lineno=1063, col_offset=44), Str('fo_FO.ISO8859-15', lineno=1064, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1065, col_offset=44), Str('fr_FR.ISO8859-15', lineno=1066, col_offset=44), Str('fr_BE.ISO8859-1', lineno=1067, col_offset=44), Str('fr_BE.ISO8859-1', lineno=1068, col_offset=44), Str('fr_BE.ISO8859-1', lineno=1069, col_offset=44), Str('fr_BE.ISO8859-15', lineno=1070, col_offset=44), Str('fr_BE.ISO8859-15', lineno=1071, col_offset=44), Str('fr_BE.UTF-8', lineno=1072, col_offset=44), Str('fr_BE.ISO8859-15', lineno=1073, col_offset=44), Str('fr_CA.ISO8859-1', lineno=1074, col_offset=44), Str('fr_CA.ISO8859-1', lineno=1075, col_offset=44), Str('fr_CA.ISO8859-1', lineno=1076, col_offset=44), Str('fr_CA.ISO8859-15', lineno=1077, col_offset=44), Str('fr_CA.ISO8859-15', lineno=1078, col_offset=44), Str('fr_CH.ISO8859-1', lineno=1079, col_offset=44), Str('fr_CH.ISO8859-1', lineno=1080, col_offset=44), Str('fr_CH.ISO8859-1', lineno=1081, col_offset=44), Str('fr_CH.ISO8859-15', lineno=1082, col_offset=44), Str('fr_CH.ISO8859-15', lineno=1083, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1084, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1085, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1086, col_offset=44), Str('fr_FR.ISO8859-15', lineno=1087, col_offset=44), Str('fr_FR.ISO8859-15', lineno=1088, col_offset=44), Str('fr_FR.UTF-8', lineno=1089, col_offset=44), Str('fr_FR.ISO8859-15', lineno=1090, col_offset=44), Str('fr_LU.ISO8859-1', lineno=1091, col_offset=44), Str('fr_LU.ISO8859-1', lineno=1092, col_offset=44), Str('fr_LU.ISO8859-1', lineno=1093, col_offset=44), Str('fr_LU.ISO8859-15', lineno=1094, col_offset=44), Str('fr_LU.ISO8859-15', lineno=1095, col_offset=44), Str('fr_LU.UTF-8', lineno=1096, col_offset=44), Str('fr_LU.ISO8859-15', lineno=1097, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1098, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1099, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1100, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1101, col_offset=44), Str('fr_CH.ISO8859-1', lineno=1102, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1103, col_offset=44), Str('fr_FR.ISO8859-1', lineno=1104, col_offset=44), Str('ga_IE.ISO8859-1', lineno=1105, col_offset=44), Str('ga_IE.ISO8859-1', lineno=1106, col_offset=44), Str('ga_IE.ISO8859-1', lineno=1107, col_offset=44), Str('ga_IE.ISO8859-14', lineno=1108, col_offset=44), Str('ga_IE.ISO8859-15', lineno=1109, col_offset=44), Str('ga_IE.ISO8859-15', lineno=1110, col_offset=44), Str('ga_IE.UTF-8', lineno=1111, col_offset=44), Str('ga_IE.ISO8859-15', lineno=1112, col_offset=44), Str('gl_ES.ISO8859-1', lineno=1113, col_offset=44), Str('gl_ES.ISO8859-1', lineno=1114, col_offset=44), Str('gd_GB.ISO8859-1', lineno=1115, col_offset=44), Str('gd_GB.ISO8859-1', lineno=1116, col_offset=44), Str('gd_GB.ISO8859-1', lineno=1117, col_offset=44), Str('gd_GB.ISO8859-14', lineno=1118, col_offset=44), Str('gd_GB.ISO8859-15', lineno=1119, col_offset=44), Str('gd_GB.ISO8859-15', lineno=1120, col_offset=44), Str('de_DE.ISO8859-1', lineno=1121, col_offset=44), Str('de_DE.ISO8859-1', lineno=1122, col_offset=44), Str('de_DE.ISO8859-1', lineno=1123, col_offset=44), Str('de_CH.ISO8859-1', lineno=1124, col_offset=44), Str('de_DE.ISO8859-1', lineno=1125, col_offset=44), Str('de_DE.ISO8859-1', lineno=1126, col_offset=44), Str('gl_ES.ISO8859-1', lineno=1127, col_offset=44), Str('gl_ES.ISO8859-1', lineno=1128, col_offset=44), Str('gl_ES.ISO8859-1', lineno=1129, col_offset=44), Str('gl_ES.ISO8859-15', lineno=1130, col_offset=44), Str('gl_ES.ISO8859-15', lineno=1131, col_offset=44), Str('gl_ES.UTF-8', lineno=1132, col_offset=44), Str('gl_ES.ISO8859-15', lineno=1133, col_offset=44), Str('el_GR.ISO8859-7', lineno=1134, col_offset=44), Str('el_GR.ISO8859-7', lineno=1135, col_offset=44), Str('gu_IN.UTF-8', lineno=1136, col_offset=44), Str('gv_GB.ISO8859-1', lineno=1137, col_offset=44), Str('gv_GB.ISO8859-1', lineno=1138, col_offset=44), Str('gv_GB.ISO8859-1', lineno=1139, col_offset=44), Str('gv_GB.ISO8859-14', lineno=1140, col_offset=44), Str('gv_GB.ISO8859-15', lineno=1141, col_offset=44), Str('gv_GB.ISO8859-15', lineno=1142, col_offset=44), Str('he_IL.ISO8859-8', lineno=1143, col_offset=44), Str('he_IL.ISO8859-8', lineno=1144, col_offset=44), Str('he_IL.CP1255', lineno=1145, col_offset=44), Str('he_IL.ISO8859-8', lineno=1146, col_offset=44), Str('he_IL.CP1255', lineno=1147, col_offset=44), Str('iw_IL.ISO8859-8', lineno=1148, col_offset=44), Str('iw_IL.ISO8859-8', lineno=1149, col_offset=44), Str('hi_IN.ISCII-DEV', lineno=1150, col_offset=44), Str('hi_IN.ISCII-DEV', lineno=1151, col_offset=44), Str('hi_IN.ISCII-DEV', lineno=1152, col_offset=44), Str('hne_IN.UTF-8', lineno=1153, col_offset=44), Str('hr_HR.ISO8859-2', lineno=1154, col_offset=44), Str('hr_HR.ISO8859-2', lineno=1155, col_offset=44), Str('hr_HR.ISO8859-2', lineno=1156, col_offset=44), Str('hr_HR.ISO8859-2', lineno=1157, col_offset=44), Str('hu_HU.ISO8859-2', lineno=1158, col_offset=44), Str('hu_HU.ISO8859-2', lineno=1159, col_offset=44), Str('hu_HU.ISO8859-2', lineno=1160, col_offset=44), Str('hu_HU.ISO8859-2', lineno=1161, col_offset=44), Str('is_IS.ISO8859-1', lineno=1162, col_offset=44), Str('is_IS.ISO8859-1', lineno=1163, col_offset=44), Str('id_ID.ISO8859-1', lineno=1164, col_offset=44), Str('id_ID.ISO8859-1', lineno=1165, col_offset=44), Str('id_ID.ISO8859-1', lineno=1166, col_offset=44), Str('id_ID.ISO8859-1', lineno=1167, col_offset=44), Str('is_IS.ISO8859-1', lineno=1168, col_offset=44), Str('is_IS.ISO8859-1', lineno=1169, col_offset=44), Str('is_IS.ISO8859-1', lineno=1170, col_offset=44), Str('is_IS.ISO8859-15', lineno=1171, col_offset=44), Str('is_IS.ISO8859-15', lineno=1172, col_offset=44), Str('en_US.ISO8859-1', lineno=1173, col_offset=44), Str('en_US.ISO8859-15', lineno=1174, col_offset=44), Str('en_US.ISO8859-1', lineno=1175, col_offset=44), Str('en_US.ISO8859-15', lineno=1176, col_offset=44), Str('en_US.ISO8859-1', lineno=1177, col_offset=44), Str('en_US.ISO8859-15', lineno=1178, col_offset=44), Str('it_IT.ISO8859-1', lineno=1179, col_offset=44), Str('it_IT.ISO8859-15', lineno=1180, col_offset=44), Str('it_CH.ISO8859-1', lineno=1181, col_offset=44), Str('it_CH.ISO8859-1', lineno=1182, col_offset=44), Str('it_CH.ISO8859-15', lineno=1183, col_offset=44), Str('it_CH.ISO8859-15', lineno=1184, col_offset=44), Str('it_IT.ISO8859-1', lineno=1185, col_offset=44), Str('it_IT.ISO8859-1', lineno=1186, col_offset=44), Str('it_IT.ISO8859-1', lineno=1187, col_offset=44), Str('it_IT.ISO8859-15', lineno=1188, col_offset=44), Str('it_IT.ISO8859-15', lineno=1189, col_offset=44), Str('it_IT.UTF-8', lineno=1190, col_offset=44), Str('it_IT.ISO8859-15', lineno=1191, col_offset=44), Str('it_IT.ISO8859-1', lineno=1192, col_offset=44), Str('it_IT.ISO8859-1', lineno=1193, col_offset=44), Str('iu_CA.NUNACOM-8', lineno=1194, col_offset=44), Str('iu_CA.NUNACOM-8', lineno=1195, col_offset=44), Str('iu_CA.NUNACOM-8', lineno=1196, col_offset=44), Str('he_IL.ISO8859-8', lineno=1197, col_offset=44), Str('he_IL.ISO8859-8', lineno=1198, col_offset=44), Str('he_IL.ISO8859-8', lineno=1199, col_offset=44), Str('ja_JP.eucJP', lineno=1200, col_offset=44), Str('ja_JP.JIS7', lineno=1201, col_offset=44), Str('ja_JP.SJIS', lineno=1202, col_offset=44), Str('ja_JP.eucJP', lineno=1203, col_offset=44), Str('ja_JP.eucJP', lineno=1204, col_offset=44), Str('ja_JP.eucJP', lineno=1205, col_offset=44), Str('ja_JP.eucJP', lineno=1206, col_offset=44), Str('ja_JP.JIS7', lineno=1207, col_offset=44), Str('ja_JP.JIS7', lineno=1208, col_offset=44), Str('ja_JP.JIS7', lineno=1209, col_offset=44), Str('ja_JP.JIS7', lineno=1210, col_offset=44), Str('ja_JP.SJIS', lineno=1211, col_offset=44), Str('ja_JP.SJIS', lineno=1212, col_offset=44), Str('ja_JP.SJIS', lineno=1213, col_offset=44), Str('ja_JP.eucJP', lineno=1214, col_offset=44), Str('ja_JP.eucJP', lineno=1215, col_offset=44), Str('ja_JP.eucJP', lineno=1216, col_offset=44), Str('ja_JP.eucJP', lineno=1217, col_offset=44), Str('ja_JP.eucJP', lineno=1218, col_offset=44), Str('ja_JP.SJIS', lineno=1219, col_offset=44), Str('ja_JP.eucJP', lineno=1220, col_offset=44), Str('ka_GE.GEORGIAN-ACADEMY', lineno=1221, col_offset=44), Str('ka_GE.GEORGIAN-ACADEMY', lineno=1222, col_offset=44), Str('ka_GE.GEORGIAN-ACADEMY', lineno=1223, col_offset=44), Str('ka_GE.GEORGIAN-PS', lineno=1224, col_offset=44), Str('ka_GE.GEORGIAN-ACADEMY', lineno=1225, col_offset=44), Str('kl_GL.ISO8859-1', lineno=1226, col_offset=44), Str('kl_GL.ISO8859-1', lineno=1227, col_offset=44), Str('kl_GL.ISO8859-1', lineno=1228, col_offset=44), Str('kl_GL.ISO8859-15', lineno=1229, col_offset=44), Str('kl_GL.ISO8859-15', lineno=1230, col_offset=44), Str('km_KH.UTF-8', lineno=1231, col_offset=44), Str('kn_IN.UTF-8', lineno=1232, col_offset=44), Str('kn_IN.UTF-8', lineno=1233, col_offset=44), Str('ko_KR.eucKR', lineno=1234, col_offset=44), Str('ko_KR.eucKR', lineno=1235, col_offset=44), Str('ko_KR.eucKR', lineno=1236, col_offset=44), Str('ko_KR.eucKR', lineno=1237, col_offset=44), Str('ko_KR.eucKR', lineno=1238, col_offset=44), Str('ko_KR.eucKR', lineno=1239, col_offset=44), Str('ks_IN.UTF-8', lineno=1240, col_offset=44), Str('ks_IN@devanagari.UTF-8', lineno=1241, col_offset=44), Str('kw_GB.ISO8859-1', lineno=1242, col_offset=44), Str('kw_GB.ISO8859-1', lineno=1243, col_offset=44), Str('kw_GB.ISO8859-1', lineno=1244, col_offset=44), Str('kw_GB.ISO8859-14', lineno=1245, col_offset=44), Str('kw_GB.ISO8859-15', lineno=1246, col_offset=44), Str('kw_GB.ISO8859-15', lineno=1247, col_offset=44), Str('ky_KG.UTF-8', lineno=1248, col_offset=44), Str('ky_KG.UTF-8', lineno=1249, col_offset=44), Str('lt_LT.ISO8859-13', lineno=1250, col_offset=44), Str('lo_LA.MULELAO-1', lineno=1251, col_offset=44), Str('lo_LA.MULELAO-1', lineno=1252, col_offset=44), Str('lo_LA.IBM-CP1133', lineno=1253, col_offset=44), Str('lo_LA.IBM-CP1133', lineno=1254, col_offset=44), Str('lo_LA.MULELAO-1', lineno=1255, col_offset=44), Str('lt_LT.ISO8859-13', lineno=1256, col_offset=44), Str('lt_LT.ISO8859-13', lineno=1257, col_offset=44), Str('lt_LT.ISO8859-13', lineno=1258, col_offset=44), Str('lt_LT.ISO8859-4', lineno=1259, col_offset=44), Str('lv_LV.ISO8859-13', lineno=1260, col_offset=44), Str('lv_LV.ISO8859-13', lineno=1261, col_offset=44), Str('lv_LV.ISO8859-13', lineno=1262, col_offset=44), Str('lv_LV.ISO8859-4', lineno=1263, col_offset=44), Str('mai_IN.UTF-8', lineno=1264, col_offset=44), Str('mi_NZ.ISO8859-1', lineno=1265, col_offset=44), Str('mi_NZ.ISO8859-1', lineno=1266, col_offset=44), Str('mi_NZ.ISO8859-1', lineno=1267, col_offset=44), Str('mk_MK.ISO8859-5', lineno=1268, col_offset=44), Str('mk_MK.ISO8859-5', lineno=1269, col_offset=44), Str('mk_MK.CP1251', lineno=1270, col_offset=44), Str('mk_MK.ISO8859-5', lineno=1271, col_offset=44), Str('mk_MK.CP1251', lineno=1272, col_offset=44), Str('ml_IN.UTF-8', lineno=1273, col_offset=44), Str('mr_IN.UTF-8', lineno=1274, col_offset=44), Str('mr_IN.UTF-8', lineno=1275, col_offset=44), Str('ms_MY.ISO8859-1', lineno=1276, col_offset=44), Str('ms_MY.ISO8859-1', lineno=1277, col_offset=44), Str('ms_MY.ISO8859-1', lineno=1278, col_offset=44), Str('mt_MT.ISO8859-3', lineno=1279, col_offset=44), Str('mt_MT.ISO8859-3', lineno=1280, col_offset=44), Str('mt_MT.ISO8859-3', lineno=1281, col_offset=44), Str('nb_NO.ISO8859-1', lineno=1282, col_offset=44), Str('nb_NO.ISO8859-1', lineno=1283, col_offset=44), Str('nb_NO.ISO8859-1', lineno=1284, col_offset=44), Str('nb_NO.ISO8859-1', lineno=1285, col_offset=44), Str('nb_NO.ISO8859-15', lineno=1286, col_offset=44), Str('nb_NO.ISO8859-15', lineno=1287, col_offset=44), Str('nl_NL.ISO8859-1', lineno=1288, col_offset=44), Str('nl_NL.ISO8859-15', lineno=1289, col_offset=44), Str('nl_BE.ISO8859-1', lineno=1290, col_offset=44), Str('nl_BE.ISO8859-1', lineno=1291, col_offset=44), Str('nl_BE.ISO8859-1', lineno=1292, col_offset=44), Str('nl_BE.ISO8859-15', lineno=1293, col_offset=44), Str('nl_BE.ISO8859-15', lineno=1294, col_offset=44), Str('nl_BE.UTF-8', lineno=1295, col_offset=44), Str('nl_BE.ISO8859-15', lineno=1296, col_offset=44), Str('nl_NL.ISO8859-1', lineno=1297, col_offset=44), Str('nl_NL.ISO8859-1', lineno=1298, col_offset=44), Str('nl_NL.ISO8859-1', lineno=1299, col_offset=44), Str('nl_NL.ISO8859-15', lineno=1300, col_offset=44), Str('nl_NL.ISO8859-15', lineno=1301, col_offset=44), Str('nl_NL.UTF-8', lineno=1302, col_offset=44), Str('nl_NL.ISO8859-15', lineno=1303, col_offset=44), Str('nn_NO.ISO8859-1', lineno=1304, col_offset=44), Str('nn_NO.ISO8859-1', lineno=1305, col_offset=44), Str('nn_NO.ISO8859-1', lineno=1306, col_offset=44), Str('nn_NO.ISO8859-1', lineno=1307, col_offset=44), Str('nn_NO.ISO8859-15', lineno=1308, col_offset=44), Str('nn_NO.ISO8859-15', lineno=1309, col_offset=44), Str('no_NO.ISO8859-1', lineno=1310, col_offset=44), Str('ny_NO.ISO8859-1', lineno=1311, col_offset=44), Str('no_NO.ISO8859-1', lineno=1312, col_offset=44), Str('no_NO.ISO8859-1', lineno=1313, col_offset=44), Str('no_NO.ISO8859-1', lineno=1314, col_offset=44), Str('no_NO.ISO8859-15', lineno=1315, col_offset=44), Str('no_NO.ISO8859-1', lineno=1316, col_offset=44), Str('no_NO.ISO8859-1', lineno=1317, col_offset=44), Str('no_NO.ISO8859-15', lineno=1318, col_offset=44), Str('no_NO.ISO8859-1', lineno=1319, col_offset=44), Str('no_NO.ISO8859-1', lineno=1320, col_offset=44), Str('nr_ZA.ISO8859-1', lineno=1321, col_offset=44), Str('nr_ZA.ISO8859-1', lineno=1322, col_offset=44), Str('nr_ZA.ISO8859-1', lineno=1323, col_offset=44), Str('nso_ZA.ISO8859-15', lineno=1324, col_offset=44), Str('nso_ZA.ISO8859-15', lineno=1325, col_offset=44), Str('nso_ZA.ISO8859-15', lineno=1326, col_offset=44), Str('ny_NO.ISO8859-1', lineno=1327, col_offset=44), Str('ny_NO.ISO8859-1', lineno=1328, col_offset=44), Str('ny_NO.ISO8859-1', lineno=1329, col_offset=44), Str('ny_NO.ISO8859-1', lineno=1330, col_offset=44), Str('ny_NO.ISO8859-15', lineno=1331, col_offset=44), Str('ny_NO.ISO8859-15', lineno=1332, col_offset=44), Str('nn_NO.ISO8859-1', lineno=1333, col_offset=44), Str('oc_FR.ISO8859-1', lineno=1334, col_offset=44), Str('oc_FR.ISO8859-1', lineno=1335, col_offset=44), Str('oc_FR.ISO8859-1', lineno=1336, col_offset=44), Str('oc_FR.ISO8859-15', lineno=1337, col_offset=44), Str('oc_FR.ISO8859-15', lineno=1338, col_offset=44), Str('or_IN.UTF-8', lineno=1339, col_offset=44), Str('pa_IN.UTF-8', lineno=1340, col_offset=44), Str('pa_IN.UTF-8', lineno=1341, col_offset=44), Str('pd_US.ISO8859-1', lineno=1342, col_offset=44), Str('pd_DE.ISO8859-1', lineno=1343, col_offset=44), Str('pd_DE.ISO8859-1', lineno=1344, col_offset=44), Str('pd_DE.ISO8859-15', lineno=1345, col_offset=44), Str('pd_DE.ISO8859-15', lineno=1346, col_offset=44), Str('pd_US.ISO8859-1', lineno=1347, col_offset=44), Str('pd_US.ISO8859-1', lineno=1348, col_offset=44), Str('pd_US.ISO8859-15', lineno=1349, col_offset=44), Str('pd_US.ISO8859-15', lineno=1350, col_offset=44), Str('ph_PH.ISO8859-1', lineno=1351, col_offset=44), Str('ph_PH.ISO8859-1', lineno=1352, col_offset=44), Str('ph_PH.ISO8859-1', lineno=1353, col_offset=44), Str('pl_PL.ISO8859-2', lineno=1354, col_offset=44), Str('pl_PL.ISO8859-2', lineno=1355, col_offset=44), Str('pl_PL.ISO8859-2', lineno=1356, col_offset=44), Str('pl_PL.ISO8859-2', lineno=1357, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1358, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1359, col_offset=44), Str('pt_BR.ISO8859-1', lineno=1360, col_offset=44), Str('pt_BR.ISO8859-1', lineno=1361, col_offset=44), Str('C', lineno=1362, col_offset=44), Str('C', lineno=1363, col_offset=44), Str('pp_AN.ISO8859-1', lineno=1364, col_offset=44), Str('pp_AN.ISO8859-1', lineno=1365, col_offset=44), Str('pp_AN.ISO8859-1', lineno=1366, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1367, col_offset=44), Str('pt_PT.ISO8859-15', lineno=1368, col_offset=44), Str('pt_BR.ISO8859-1', lineno=1369, col_offset=44), Str('pt_BR.ISO8859-1', lineno=1370, col_offset=44), Str('pt_BR.ISO8859-1', lineno=1371, col_offset=44), Str('pt_BR.ISO8859-15', lineno=1372, col_offset=44), Str('pt_BR.ISO8859-15', lineno=1373, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1374, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1375, col_offset=44), Str('pt_PT.ISO8859-1', lineno=1376, col_offset=44), Str('pt_PT.ISO8859-15', lineno=1377, col_offset=44), Str('pt_PT.ISO8859-15', lineno=1378, col_offset=44), Str('pt_PT.UTF-8', lineno=1379, col_offset=44), Str('pt_PT.ISO8859-15', lineno=1380, col_offset=44), Str('ro_RO.ISO8859-2', lineno=1381, col_offset=44), Str('ro_RO.ISO8859-2', lineno=1382, col_offset=44), Str('ro_RO.ISO8859-2', lineno=1383, col_offset=44), Str('ro_RO.ISO8859-2', lineno=1384, col_offset=44), Str('ru_RU.UTF-8', lineno=1385, col_offset=44), Str('ru_RU.KOI8-R', lineno=1386, col_offset=44), Str('ru_RU.UTF-8', lineno=1387, col_offset=44), Str('ru_RU.CP1251', lineno=1388, col_offset=44), Str('ru_RU.ISO8859-5', lineno=1389, col_offset=44), Str('ru_RU.KOI8-R', lineno=1390, col_offset=44), Str('ru_RU.CP1251', lineno=1391, col_offset=44), Str('ru_UA.KOI8-U', lineno=1392, col_offset=44), Str('ru_UA.CP1251', lineno=1393, col_offset=44), Str('ru_UA.KOI8-U', lineno=1394, col_offset=44), Str('ru_UA.CP1251', lineno=1395, col_offset=44), Str('ro_RO.ISO8859-2', lineno=1396, col_offset=44), Str('ru_RU.ISO8859-5', lineno=1397, col_offset=44), Str('rw_RW.ISO8859-1', lineno=1398, col_offset=44), Str('rw_RW.ISO8859-1', lineno=1399, col_offset=44), Str('rw_RW.ISO8859-1', lineno=1400, col_offset=44), Str('sd_IN@devanagari.UTF-8', lineno=1401, col_offset=44), Str('se_NO.UTF-8', lineno=1402, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1403, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1404, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1405, col_offset=44), Str('sh_HR.ISO8859-2', lineno=1406, col_offset=44), Str('hr_HR.ISO8859-2', lineno=1407, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1408, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1409, col_offset=44), Str('si_LK.UTF-8', lineno=1410, col_offset=44), Str('si_LK.UTF-8', lineno=1411, col_offset=44), Str('si_LK.UTF-8', lineno=1412, col_offset=44), Str('sk_SK.ISO8859-2', lineno=1413, col_offset=44), Str('sk_SK.ISO8859-2', lineno=1414, col_offset=44), Str('sk_SK.ISO8859-2', lineno=1415, col_offset=44), Str('sl_SI.ISO8859-2', lineno=1416, col_offset=44), Str('sl_CS.ISO8859-2', lineno=1417, col_offset=44), Str('sl_SI.ISO8859-2', lineno=1418, col_offset=44), Str('sl_SI.ISO8859-2', lineno=1419, col_offset=44), Str('sk_SK.ISO8859-2', lineno=1420, col_offset=44), Str('sl_SI.ISO8859-2', lineno=1421, col_offset=44), Str('sl_SI.ISO8859-2', lineno=1422, col_offset=44), Str('sr_CS.ISO8859-5', lineno=1423, col_offset=44), Str('sr_CS.ISO8859-5', lineno=1424, col_offset=44), Str('es_ES.ISO8859-1', lineno=1425, col_offset=44), Str('es_ES.ISO8859-1', lineno=1426, col_offset=44), Str('es_ES.ISO8859-1', lineno=1427, col_offset=44), Str('es_ES.ISO8859-1', lineno=1428, col_offset=44), Str('sq_AL.ISO8859-2', lineno=1429, col_offset=44), Str('sq_AL.ISO8859-2', lineno=1430, col_offset=44), Str('sq_AL.ISO8859-2', lineno=1431, col_offset=44), Str('sr_RS.UTF-8', lineno=1432, col_offset=44), Str('sr_RS.UTF-8', lineno=1433, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1434, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1435, col_offset=44), Str('sr_RS.UTF-8', lineno=1436, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1437, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1438, col_offset=44), Str('sr_CS.ISO8859-5', lineno=1439, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1440, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1441, col_offset=44), Str('sr_ME.UTF-8', lineno=1442, col_offset=44), Str('sr_RS.UTF-8', lineno=1443, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1444, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1445, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1446, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1447, col_offset=44), Str('sr_RS.UTF-8@latin', lineno=1448, col_offset=44), Str('sr_CS.CP1251', lineno=1449, col_offset=44), Str('sr_CS.ISO8859-2', lineno=1450, col_offset=44), Str('sr_CS.ISO8859-5', lineno=1451, col_offset=44), Str('sr_CS.ISO8859-5', lineno=1452, col_offset=44), Str('sr_CS.CP1251', lineno=1453, col_offset=44), Str('sr_RS.UTF-8', lineno=1454, col_offset=44), Str('sr_RS.UTF-8', lineno=1455, col_offset=44), Str('ss_ZA.ISO8859-1', lineno=1456, col_offset=44), Str('ss_ZA.ISO8859-1', lineno=1457, col_offset=44), Str('ss_ZA.ISO8859-1', lineno=1458, col_offset=44), Str('st_ZA.ISO8859-1', lineno=1459, col_offset=44), Str('st_ZA.ISO8859-1', lineno=1460, col_offset=44), Str('st_ZA.ISO8859-1', lineno=1461, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1462, col_offset=44), Str('sv_SE.ISO8859-15', lineno=1463, col_offset=44), Str('sv_FI.ISO8859-1', lineno=1464, col_offset=44), Str('sv_FI.ISO8859-1', lineno=1465, col_offset=44), Str('sv_FI.ISO8859-15', lineno=1466, col_offset=44), Str('sv_FI.ISO8859-15', lineno=1467, col_offset=44), Str('sv_FI.UTF-8', lineno=1468, col_offset=44), Str('sv_FI.ISO8859-15', lineno=1469, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1470, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1471, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1472, col_offset=44), Str('sv_SE.ISO8859-15', lineno=1473, col_offset=44), Str('sv_SE.ISO8859-15', lineno=1474, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1475, col_offset=44), Str('sv_SE.ISO8859-1', lineno=1476, col_offset=44), Str('ta_IN.TSCII-0', lineno=1477, col_offset=44), Str('ta_IN.TSCII-0', lineno=1478, col_offset=44), Str('ta_IN.TSCII-0', lineno=1479, col_offset=44), Str('ta_IN.TSCII-0', lineno=1480, col_offset=44), Str('te_IN.UTF-8', lineno=1481, col_offset=44), Str('tg_TJ.KOI8-C', lineno=1482, col_offset=44), Str('tg_TJ.KOI8-C', lineno=1483, col_offset=44), Str('tg_TJ.KOI8-C', lineno=1484, col_offset=44), Str('th_TH.ISO8859-11', lineno=1485, col_offset=44), Str('th_TH.ISO8859-11', lineno=1486, col_offset=44), Str('th_TH.ISO8859-11', lineno=1487, col_offset=44), Str('th_TH.TIS620', lineno=1488, col_offset=44), Str('th_TH.TIS620', lineno=1489, col_offset=44), Str('th_TH.ISO8859-11', lineno=1490, col_offset=44), Str('tl_PH.ISO8859-1', lineno=1491, col_offset=44), Str('tl_PH.ISO8859-1', lineno=1492, col_offset=44), Str('tl_PH.ISO8859-1', lineno=1493, col_offset=44), Str('tn_ZA.ISO8859-15', lineno=1494, col_offset=44), Str('tn_ZA.ISO8859-15', lineno=1495, col_offset=44), Str('tn_ZA.ISO8859-15', lineno=1496, col_offset=44), Str('tr_TR.ISO8859-9', lineno=1497, col_offset=44), Str('tr_TR.ISO8859-9', lineno=1498, col_offset=44), Str('tr_TR.ISO8859-9', lineno=1499, col_offset=44), Str('ts_ZA.ISO8859-1', lineno=1500, col_offset=44), Str('ts_ZA.ISO8859-1', lineno=1501, col_offset=44), Str('ts_ZA.ISO8859-1', lineno=1502, col_offset=44), Str('tt_RU.TATAR-CYR', lineno=1503, col_offset=44), Str('tt_RU.TATAR-CYR', lineno=1504, col_offset=44), Str('tt_RU.KOI8-C', lineno=1505, col_offset=44), Str('tt_RU.TATAR-CYR', lineno=1506, col_offset=44), Str('tr_TR.ISO8859-9', lineno=1507, col_offset=44), Str('tr_TR.ISO8859-9', lineno=1508, col_offset=44), Str('uk_UA.KOI8-U', lineno=1509, col_offset=44), Str('uk_UA.KOI8-U', lineno=1510, col_offset=44), Str('uk_UA.CP1251', lineno=1511, col_offset=44), Str('uk_UA.ISO8859-5', lineno=1512, col_offset=44), Str('uk_UA.KOI8-U', lineno=1513, col_offset=44), Str('uk_UA.CP1251', lineno=1514, col_offset=44), Str('en_US.utf', lineno=1515, col_offset=44), Str('en_US.utf', lineno=1516, col_offset=44), Str('en_US.UTF-8', lineno=1517, col_offset=44), Str('ur_PK.CP1256', lineno=1518, col_offset=44), Str('ur_PK.CP1256', lineno=1519, col_offset=44), Str('ur_PK.CP1256', lineno=1520, col_offset=44), Str('ur_PK.CP1256', lineno=1521, col_offset=44), Str('uz_UZ.UTF-8', lineno=1522, col_offset=44), Str('uz_UZ.UTF-8', lineno=1523, col_offset=44), Str('uz_UZ.ISO8859-1', lineno=1524, col_offset=44), Str('uz_UZ.UTF-8', lineno=1525, col_offset=44), Str('uz_UZ.UTF-8', lineno=1526, col_offset=44), Str('ve_ZA.UTF-8', lineno=1527, col_offset=44), Str('ve_ZA.UTF-8', lineno=1528, col_offset=44), Str('vi_VN.TCVN', lineno=1529, col_offset=44), Str('vi_VN.TCVN', lineno=1530, col_offset=44), Str('vi_VN.TCVN', lineno=1531, col_offset=44), Str('vi_VN.TCVN', lineno=1532, col_offset=44), Str('vi_VN.VISCII', lineno=1533, col_offset=44), Str('vi_VN.VISCII', lineno=1534, col_offset=44), Str('wa_BE.ISO8859-1', lineno=1535, col_offset=44), Str('wa_BE.ISO8859-1', lineno=1536, col_offset=44), Str('wa_BE.ISO8859-1', lineno=1537, col_offset=44), Str('wa_BE.ISO8859-15', lineno=1538, col_offset=44), Str('wa_BE.ISO8859-15', lineno=1539, col_offset=44), Str('wa_BE.ISO8859-15', lineno=1540, col_offset=44), Str('xh_ZA.ISO8859-1', lineno=1541, col_offset=44), Str('xh_ZA.ISO8859-1', lineno=1542, col_offset=44), Str('xh_ZA.ISO8859-1', lineno=1543, col_offset=44), Str('yi_US.CP1255', lineno=1544, col_offset=44), Str('yi_US.CP1255', lineno=1545, col_offset=44), Str('yi_US.CP1255', lineno=1546, col_offset=44), Str('yi_US.CP1255', lineno=1547, col_offset=44), Str('zh_CN.eucCN', lineno=1548, col_offset=44), Str('zh_CN.gb2312', lineno=1549, col_offset=44), Str('zh_TW.big5', lineno=1550, col_offset=44), Str('zh_CN.eucCN', lineno=1551, col_offset=44), Str('zh_CN.gb18030', lineno=1552, col_offset=44), Str('zh_CN.gb2312', lineno=1553, col_offset=44), Str('zh_CN.gbk', lineno=1554, col_offset=44), Str('zh_HK.big5hkscs', lineno=1555, col_offset=44), Str('zh_HK.big5', lineno=1556, col_offset=44), Str('zh_HK.big5hkscs', lineno=1557, col_offset=44), Str('zh_HK.big5hkscs', lineno=1558, col_offset=44), Str('zh_TW.big5', lineno=1559, col_offset=44), Str('zh_TW.big5', lineno=1560, col_offset=44), Str('zh_TW.eucTW', lineno=1561, col_offset=44), Str('zh_TW.eucTW', lineno=1562, col_offset=44), Str('zu_ZA.ISO8859-1', lineno=1563, col_offset=44), Str('zu_ZA.ISO8859-1', lineno=1564, col_offset=44), Str('zu_ZA.ISO8859-1', lineno=1565, col_offset=44)], lineno=722, col_offset=15), lineno=722, col_offset=0), Assign([Name('windows_locale', Store(), lineno=1582, col_offset=0)], Dict([Num(1078, lineno=1583, col_offset=4), Num(1052, lineno=1584, col_offset=4), Num(1156, lineno=1585, col_offset=4), Num(1118, lineno=1586, col_offset=4), Num(1025, lineno=1587, col_offset=4), Num(2049, lineno=1588, col_offset=4), Num(3073, lineno=1589, col_offset=4), Num(4097, lineno=1590, col_offset=4), Num(5121, lineno=1591, col_offset=4), Num(6145, lineno=1592, col_offset=4), Num(7169, lineno=1593, col_offset=4), Num(8193, lineno=1594, col_offset=4), Num(9217, lineno=1595, col_offset=4), Num(10241, lineno=1596, col_offset=4), Num(11265, lineno=1597, col_offset=4), Num(12289, lineno=1598, col_offset=4), Num(13313, lineno=1599, col_offset=4), Num(14337, lineno=1600, col_offset=4), Num(15361, lineno=1601, col_offset=4), Num(16385, lineno=1602, col_offset=4), Num(1067, lineno=1603, col_offset=4), Num(1101, lineno=1604, col_offset=4), Num(1068, lineno=1605, col_offset=4), Num(2092, lineno=1606, col_offset=4), Num(1133, lineno=1607, col_offset=4), Num(1069, lineno=1608, col_offset=4), Num(1059, lineno=1609, col_offset=4), Num(1093, lineno=1610, col_offset=4), Num(8218, lineno=1611, col_offset=4), Num(5146, lineno=1612, col_offset=4), Num(1150, lineno=1613, col_offset=4), Num(1026, lineno=1614, col_offset=4), Num(1027, lineno=1616, col_offset=4), Num(4, lineno=1617, col_offset=4), Num(1028, lineno=1618, col_offset=4), Num(2052, lineno=1619, col_offset=4), Num(3076, lineno=1620, col_offset=4), Num(4100, lineno=1621, col_offset=4), Num(5124, lineno=1622, col_offset=4), Num(31748, lineno=1623, col_offset=4), Num(1155, lineno=1624, col_offset=4), Num(1050, lineno=1625, col_offset=4), Num(4122, lineno=1626, col_offset=4), Num(1029, lineno=1627, col_offset=4), Num(1030, lineno=1628, col_offset=4), Num(1164, lineno=1629, col_offset=4), Num(1125, lineno=1630, col_offset=4), Num(1043, lineno=1631, col_offset=4), Num(2067, lineno=1632, col_offset=4), Num(1033, lineno=1633, col_offset=4), Num(2057, lineno=1634, col_offset=4), Num(3081, lineno=1635, col_offset=4), Num(4105, lineno=1636, col_offset=4), Num(5129, lineno=1637, col_offset=4), Num(6153, lineno=1638, col_offset=4), Num(7177, lineno=1639, col_offset=4), Num(8201, lineno=1640, col_offset=4), Num(9225, lineno=1641, col_offset=4), Num(10249, lineno=1642, col_offset=4), Num(11273, lineno=1643, col_offset=4), Num(12297, lineno=1644, col_offset=4), Num(13321, lineno=1645, col_offset=4), Num(16393, lineno=1646, col_offset=4), Num(17417, lineno=1647, col_offset=4), Num(18441, lineno=1648, col_offset=4), Num(1061, lineno=1649, col_offset=4), Num(1080, lineno=1650, col_offset=4), Num(1124, lineno=1651, col_offset=4), Num(1035, lineno=1652, col_offset=4), Num(1036, lineno=1653, col_offset=4), Num(2060, lineno=1654, col_offset=4), Num(3084, lineno=1655, col_offset=4), Num(4108, lineno=1656, col_offset=4), Num(5132, lineno=1657, col_offset=4), Num(6156, lineno=1658, col_offset=4), Num(1122, lineno=1659, col_offset=4), Num(1110, lineno=1660, col_offset=4), Num(1079, lineno=1661, col_offset=4), Num(1031, lineno=1662, col_offset=4), Num(2055, lineno=1663, col_offset=4), Num(3079, lineno=1664, col_offset=4), Num(4103, lineno=1665, col_offset=4), Num(5127, lineno=1666, col_offset=4), Num(1032, lineno=1667, col_offset=4), Num(1135, lineno=1668, col_offset=4), Num(1095, lineno=1669, col_offset=4), Num(1128, lineno=1670, col_offset=4), Num(1037, lineno=1671, col_offset=4), Num(1081, lineno=1672, col_offset=4), Num(1038, lineno=1673, col_offset=4), Num(1039, lineno=1674, col_offset=4), Num(1057, lineno=1675, col_offset=4), Num(1117, lineno=1676, col_offset=4), Num(2141, lineno=1677, col_offset=4), Num(2108, lineno=1678, col_offset=4), Num(1040, lineno=1679, col_offset=4), Num(2064, lineno=1680, col_offset=4), Num(1041, lineno=1681, col_offset=4), Num(1099, lineno=1682, col_offset=4), Num(1087, lineno=1683, col_offset=4), Num(1107, lineno=1684, col_offset=4), Num(1158, lineno=1685, col_offset=4), Num(1159, lineno=1686, col_offset=4), Num(1111, lineno=1687, col_offset=4), Num(1042, lineno=1688, col_offset=4), Num(1088, lineno=1689, col_offset=4), Num(1108, lineno=1690, col_offset=4), Num(1062, lineno=1691, col_offset=4), Num(1063, lineno=1692, col_offset=4), Num(2094, lineno=1693, col_offset=4), Num(1134, lineno=1694, col_offset=4), Num(1071, lineno=1695, col_offset=4), Num(1086, lineno=1696, col_offset=4), Num(2110, lineno=1697, col_offset=4), Num(1100, lineno=1698, col_offset=4), Num(1082, lineno=1699, col_offset=4), Num(1153, lineno=1700, col_offset=4), Num(1146, lineno=1701, col_offset=4), Num(1102, lineno=1702, col_offset=4), Num(1148, lineno=1703, col_offset=4), Num(1104, lineno=1704, col_offset=4), Num(2128, lineno=1705, col_offset=4), Num(1121, lineno=1706, col_offset=4), Num(1044, lineno=1707, col_offset=4), Num(2068, lineno=1708, col_offset=4), Num(1154, lineno=1709, col_offset=4), Num(1096, lineno=1710, col_offset=4), Num(1123, lineno=1711, col_offset=4), Num(1065, lineno=1712, col_offset=4), Num(1045, lineno=1713, col_offset=4), Num(1046, lineno=1714, col_offset=4), Num(2070, lineno=1715, col_offset=4), Num(1094, lineno=1716, col_offset=4), Num(1131, lineno=1717, col_offset=4), Num(2155, lineno=1718, col_offset=4), Num(3179, lineno=1719, col_offset=4), Num(1048, lineno=1720, col_offset=4), Num(1047, lineno=1721, col_offset=4), Num(1049, lineno=1722, col_offset=4), Num(9275, lineno=1723, col_offset=4), Num(4155, lineno=1724, col_offset=4), Num(5179, lineno=1725, col_offset=4), Num(1083, lineno=1726, col_offset=4), Num(2107, lineno=1727, col_offset=4), Num(3131, lineno=1728, col_offset=4), Num(8251, lineno=1729, col_offset=4), Num(6203, lineno=1730, col_offset=4), Num(7227, lineno=1731, col_offset=4), Num(1103, lineno=1732, col_offset=4), Num(3098, lineno=1733, col_offset=4), Num(7194, lineno=1734, col_offset=4), Num(2074, lineno=1735, col_offset=4), Num(6170, lineno=1736, col_offset=4), Num(1115, lineno=1737, col_offset=4), Num(1132, lineno=1738, col_offset=4), Num(1074, lineno=1739, col_offset=4), Num(1051, lineno=1740, col_offset=4), Num(1060, lineno=1741, col_offset=4), Num(1034, lineno=1742, col_offset=4), Num(2058, lineno=1743, col_offset=4), Num(3082, lineno=1744, col_offset=4), Num(4106, lineno=1745, col_offset=4), Num(5130, lineno=1746, col_offset=4), Num(6154, lineno=1747, col_offset=4), Num(7178, lineno=1748, col_offset=4), Num(8202, lineno=1749, col_offset=4), Num(9226, lineno=1750, col_offset=4), Num(10250, lineno=1751, col_offset=4), Num(11274, lineno=1752, col_offset=4), Num(12298, lineno=1753, col_offset=4), Num(13322, lineno=1754, col_offset=4), Num(14346, lineno=1755, col_offset=4), Num(15370, lineno=1756, col_offset=4), Num(16394, lineno=1757, col_offset=4), Num(17418, lineno=1758, col_offset=4), Num(18442, lineno=1759, col_offset=4), Num(19466, lineno=1760, col_offset=4), Num(20490, lineno=1761, col_offset=4), Num(21514, lineno=1762, col_offset=4), Num(1089, lineno=1764, col_offset=4), Num(1053, lineno=1765, col_offset=4), Num(2077, lineno=1766, col_offset=4), Num(1114, lineno=1767, col_offset=4), Num(1064, lineno=1768, col_offset=4), Num(2143, lineno=1769, col_offset=4), Num(1097, lineno=1770, col_offset=4), Num(1092, lineno=1771, col_offset=4), Num(1098, lineno=1772, col_offset=4), Num(1054, lineno=1773, col_offset=4), Num(2129, lineno=1774, col_offset=4), Num(1105, lineno=1775, col_offset=4), Num(1055, lineno=1776, col_offset=4), Num(1090, lineno=1777, col_offset=4), Num(1152, lineno=1778, col_offset=4), Num(1058, lineno=1779, col_offset=4), Num(1070, lineno=1780, col_offset=4), Num(1056, lineno=1781, col_offset=4), Num(2080, lineno=1782, col_offset=4), Num(1091, lineno=1783, col_offset=4), Num(2115, lineno=1784, col_offset=4), Num(1066, lineno=1785, col_offset=4), Num(1106, lineno=1786, col_offset=4), Num(1160, lineno=1787, col_offset=4), Num(1076, lineno=1788, col_offset=4), Num(1157, lineno=1789, col_offset=4), Num(1144, lineno=1790, col_offset=4), Num(1130, lineno=1791, col_offset=4), Num(1077, lineno=1792, col_offset=4)], [Str('af_ZA', lineno=1583, col_offset=12), Str('sq_AL', lineno=1584, col_offset=12), Str('gsw_FR', lineno=1585, col_offset=12), Str('am_ET', lineno=1586, col_offset=12), Str('ar_SA', lineno=1587, col_offset=12), Str('ar_IQ', lineno=1588, col_offset=12), Str('ar_EG', lineno=1589, col_offset=12), Str('ar_LY', lineno=1590, col_offset=12), Str('ar_DZ', lineno=1591, col_offset=12), Str('ar_MA', lineno=1592, col_offset=12), Str('ar_TN', lineno=1593, col_offset=12), Str('ar_OM', lineno=1594, col_offset=12), Str('ar_YE', lineno=1595, col_offset=12), Str('ar_SY', lineno=1596, col_offset=12), Str('ar_JO', lineno=1597, col_offset=12), Str('ar_LB', lineno=1598, col_offset=12), Str('ar_KW', lineno=1599, col_offset=12), Str('ar_AE', lineno=1600, col_offset=12), Str('ar_BH', lineno=1601, col_offset=12), Str('ar_QA', lineno=1602, col_offset=12), Str('hy_AM', lineno=1603, col_offset=12), Str('as_IN', lineno=1604, col_offset=12), Str('az_AZ', lineno=1605, col_offset=12), Str('az_AZ', lineno=1606, col_offset=12), Str('ba_RU', lineno=1607, col_offset=12), Str('eu_ES', lineno=1608, col_offset=12), Str('be_BY', lineno=1609, col_offset=12), Str('bn_IN', lineno=1610, col_offset=12), Str('bs_BA', lineno=1611, col_offset=12), Str('bs_BA', lineno=1612, col_offset=12), Str('br_FR', lineno=1613, col_offset=12), Str('bg_BG', lineno=1614, col_offset=12), Str('ca_ES', lineno=1616, col_offset=12), Str('zh_CHS', lineno=1617, col_offset=12), Str('zh_TW', lineno=1618, col_offset=12), Str('zh_CN', lineno=1619, col_offset=12), Str('zh_HK', lineno=1620, col_offset=12), Str('zh_SG', lineno=1621, col_offset=12), Str('zh_MO', lineno=1622, col_offset=12), Str('zh_CHT', lineno=1623, col_offset=12), Str('co_FR', lineno=1624, col_offset=12), Str('hr_HR', lineno=1625, col_offset=12), Str('hr_BA', lineno=1626, col_offset=12), Str('cs_CZ', lineno=1627, col_offset=12), Str('da_DK', lineno=1628, col_offset=12), Str('gbz_AF', lineno=1629, col_offset=12), Str('div_MV', lineno=1630, col_offset=12), Str('nl_NL', lineno=1631, col_offset=12), Str('nl_BE', lineno=1632, col_offset=12), Str('en_US', lineno=1633, col_offset=12), Str('en_GB', lineno=1634, col_offset=12), Str('en_AU', lineno=1635, col_offset=12), Str('en_CA', lineno=1636, col_offset=12), Str('en_NZ', lineno=1637, col_offset=12), Str('en_IE', lineno=1638, col_offset=12), Str('en_ZA', lineno=1639, col_offset=12), Str('en_JA', lineno=1640, col_offset=12), Str('en_CB', lineno=1641, col_offset=12), Str('en_BZ', lineno=1642, col_offset=12), Str('en_TT', lineno=1643, col_offset=12), Str('en_ZW', lineno=1644, col_offset=12), Str('en_PH', lineno=1645, col_offset=12), Str('en_IN', lineno=1646, col_offset=12), Str('en_MY', lineno=1647, col_offset=12), Str('en_IN', lineno=1648, col_offset=12), Str('et_EE', lineno=1649, col_offset=12), Str('fo_FO', lineno=1650, col_offset=12), Str('fil_PH', lineno=1651, col_offset=12), Str('fi_FI', lineno=1652, col_offset=12), Str('fr_FR', lineno=1653, col_offset=12), Str('fr_BE', lineno=1654, col_offset=12), Str('fr_CA', lineno=1655, col_offset=12), Str('fr_CH', lineno=1656, col_offset=12), Str('fr_LU', lineno=1657, col_offset=12), Str('fr_MC', lineno=1658, col_offset=12), Str('fy_NL', lineno=1659, col_offset=12), Str('gl_ES', lineno=1660, col_offset=12), Str('ka_GE', lineno=1661, col_offset=12), Str('de_DE', lineno=1662, col_offset=12), Str('de_CH', lineno=1663, col_offset=12), Str('de_AT', lineno=1664, col_offset=12), Str('de_LU', lineno=1665, col_offset=12), Str('de_LI', lineno=1666, col_offset=12), Str('el_GR', lineno=1667, col_offset=12), Str('kl_GL', lineno=1668, col_offset=12), Str('gu_IN', lineno=1669, col_offset=12), Str('ha_NG', lineno=1670, col_offset=12), Str('he_IL', lineno=1671, col_offset=12), Str('hi_IN', lineno=1672, col_offset=12), Str('hu_HU', lineno=1673, col_offset=12), Str('is_IS', lineno=1674, col_offset=12), Str('id_ID', lineno=1675, col_offset=12), Str('iu_CA', lineno=1676, col_offset=12), Str('iu_CA', lineno=1677, col_offset=12), Str('ga_IE', lineno=1678, col_offset=12), Str('it_IT', lineno=1679, col_offset=12), Str('it_CH', lineno=1680, col_offset=12), Str('ja_JP', lineno=1681, col_offset=12), Str('kn_IN', lineno=1682, col_offset=12), Str('kk_KZ', lineno=1683, col_offset=12), Str('kh_KH', lineno=1684, col_offset=12), Str('qut_GT', lineno=1685, col_offset=12), Str('rw_RW', lineno=1686, col_offset=12), Str('kok_IN', lineno=1687, col_offset=12), Str('ko_KR', lineno=1688, col_offset=12), Str('ky_KG', lineno=1689, col_offset=12), Str('lo_LA', lineno=1690, col_offset=12), Str('lv_LV', lineno=1691, col_offset=12), Str('lt_LT', lineno=1692, col_offset=12), Str('dsb_DE', lineno=1693, col_offset=12), Str('lb_LU', lineno=1694, col_offset=12), Str('mk_MK', lineno=1695, col_offset=12), Str('ms_MY', lineno=1696, col_offset=12), Str('ms_BN', lineno=1697, col_offset=12), Str('ml_IN', lineno=1698, col_offset=12), Str('mt_MT', lineno=1699, col_offset=12), Str('mi_NZ', lineno=1700, col_offset=12), Str('arn_CL', lineno=1701, col_offset=12), Str('mr_IN', lineno=1702, col_offset=12), Str('moh_CA', lineno=1703, col_offset=12), Str('mn_MN', lineno=1704, col_offset=12), Str('mn_CN', lineno=1705, col_offset=12), Str('ne_NP', lineno=1706, col_offset=12), Str('nb_NO', lineno=1707, col_offset=12), Str('nn_NO', lineno=1708, col_offset=12), Str('oc_FR', lineno=1709, col_offset=12), Str('or_IN', lineno=1710, col_offset=12), Str('ps_AF', lineno=1711, col_offset=12), Str('fa_IR', lineno=1712, col_offset=12), Str('pl_PL', lineno=1713, col_offset=12), Str('pt_BR', lineno=1714, col_offset=12), Str('pt_PT', lineno=1715, col_offset=12), Str('pa_IN', lineno=1716, col_offset=12), Str('quz_BO', lineno=1717, col_offset=12), Str('quz_EC', lineno=1718, col_offset=12), Str('quz_PE', lineno=1719, col_offset=12), Str('ro_RO', lineno=1720, col_offset=12), Str('rm_CH', lineno=1721, col_offset=12), Str('ru_RU', lineno=1722, col_offset=12), Str('smn_FI', lineno=1723, col_offset=12), Str('smj_NO', lineno=1724, col_offset=12), Str('smj_SE', lineno=1725, col_offset=12), Str('se_NO', lineno=1726, col_offset=12), Str('se_SE', lineno=1727, col_offset=12), Str('se_FI', lineno=1728, col_offset=12), Str('sms_FI', lineno=1729, col_offset=12), Str('sma_NO', lineno=1730, col_offset=12), Str('sma_SE', lineno=1731, col_offset=12), Str('sa_IN', lineno=1732, col_offset=12), Str('sr_SP', lineno=1733, col_offset=12), Str('sr_BA', lineno=1734, col_offset=12), Str('sr_SP', lineno=1735, col_offset=12), Str('sr_BA', lineno=1736, col_offset=12), Str('si_LK', lineno=1737, col_offset=12), Str('ns_ZA', lineno=1738, col_offset=12), Str('tn_ZA', lineno=1739, col_offset=12), Str('sk_SK', lineno=1740, col_offset=12), Str('sl_SI', lineno=1741, col_offset=12), Str('es_ES', lineno=1742, col_offset=12), Str('es_MX', lineno=1743, col_offset=12), Str('es_ES', lineno=1744, col_offset=12), Str('es_GT', lineno=1745, col_offset=12), Str('es_CR', lineno=1746, col_offset=12), Str('es_PA', lineno=1747, col_offset=12), Str('es_DO', lineno=1748, col_offset=12), Str('es_VE', lineno=1749, col_offset=12), Str('es_CO', lineno=1750, col_offset=12), Str('es_PE', lineno=1751, col_offset=12), Str('es_AR', lineno=1752, col_offset=12), Str('es_EC', lineno=1753, col_offset=12), Str('es_CL', lineno=1754, col_offset=12), Str('es_UR', lineno=1755, col_offset=12), Str('es_PY', lineno=1756, col_offset=12), Str('es_BO', lineno=1757, col_offset=12), Str('es_SV', lineno=1758, col_offset=12), Str('es_HN', lineno=1759, col_offset=12), Str('es_NI', lineno=1760, col_offset=12), Str('es_PR', lineno=1761, col_offset=12), Str('es_US', lineno=1762, col_offset=12), Str('sw_KE', lineno=1764, col_offset=12), Str('sv_SE', lineno=1765, col_offset=12), Str('sv_FI', lineno=1766, col_offset=12), Str('syr_SY', lineno=1767, col_offset=12), Str('tg_TJ', lineno=1768, col_offset=12), Str('tmz_DZ', lineno=1769, col_offset=12), Str('ta_IN', lineno=1770, col_offset=12), Str('tt_RU', lineno=1771, col_offset=12), Str('te_IN', lineno=1772, col_offset=12), Str('th_TH', lineno=1773, col_offset=12), Str('bo_BT', lineno=1774, col_offset=12), Str('bo_CN', lineno=1775, col_offset=12), Str('tr_TR', lineno=1776, col_offset=12), Str('tk_TM', lineno=1777, col_offset=12), Str('ug_CN', lineno=1778, col_offset=12), Str('uk_UA', lineno=1779, col_offset=12), Str('wen_DE', lineno=1780, col_offset=12), Str('ur_PK', lineno=1781, col_offset=12), Str('ur_IN', lineno=1782, col_offset=12), Str('uz_UZ', lineno=1783, col_offset=12), Str('uz_UZ', lineno=1784, col_offset=12), Str('vi_VN', lineno=1785, col_offset=12), Str('cy_GB', lineno=1786, col_offset=12), Str('wo_SN', lineno=1787, col_offset=12), Str('xh_ZA', lineno=1788, col_offset=12), Str('sah_RU', lineno=1789, col_offset=12), Str('ii_CN', lineno=1790, col_offset=12), Str('yo_NG', lineno=1791, col_offset=12), Str('zu_ZA', lineno=1792, col_offset=12)], lineno=1582, col_offset=17), lineno=1582, col_offset=0), FunctionDef('_print_locale', arguments([], None, None, []), [Expr(Str(' Test function.\n    ', lineno=1798, col_offset=-1), lineno=1798, col_offset=-1), Assign([Name('categories', Store(), lineno=1799, col_offset=4)], Dict([], [], lineno=1799, col_offset=17), lineno=1799, col_offset=4), FunctionDef('_init_categories', arguments([Name('categories', Param(), lineno=1800, col_offset=25)], None, None, [Name('categories', Load(), lineno=1800, col_offset=36)]), [For(Tuple([Name('k', Store(), lineno=1801, col_offset=12), Name('v', Store(), lineno=1801, col_offset=14)], Store(), lineno=1801, col_offset=12), Call(Attribute(Call(Name('globals', Load(), lineno=1801, col_offset=19), [], [], None, None, lineno=1801, col_offset=19), 'items', Load(), lineno=1801, col_offset=19), [], [], None, None, lineno=1801, col_offset=19), [If(Compare(Subscript(Name('k', Load(), lineno=1802, col_offset=15), Slice(None, Num(3, lineno=1802, col_offset=18), None), Load(), lineno=1802, col_offset=15), [Eq()], [Str('LC_', lineno=1802, col_offset=24)], lineno=1802, col_offset=15), [Assign([Subscript(Name('categories', Load(), lineno=1803, col_offset=16), Index(Name('k', Load(), lineno=1803, col_offset=27)), Store(), lineno=1803, col_offset=16)], Name('v', Load(), lineno=1803, col_offset=32), lineno=1803, col_offset=16)], [], lineno=1802, col_offset=12)], [], lineno=1801, col_offset=8)], [], lineno=1800, col_offset=4), Expr(Call(Name('_init_categories', Load(), lineno=1804, col_offset=4), [], [], None, None, lineno=1804, col_offset=4), lineno=1804, col_offset=4), Delete([Subscript(Name('categories', Load(), lineno=1805, col_offset=8), Index(Str('LC_ALL', lineno=1805, col_offset=19)), Del(), lineno=1805, col_offset=8)], lineno=1805, col_offset=4), Print(None, [Str('Locale defaults as determined by getdefaultlocale():', lineno=1807, col_offset=10)], True, lineno=1807, col_offset=4), Print(None, [BinOp(Str('-', lineno=1808, col_offset=10), Mult(), Num(72, lineno=1808, col_offset=14), lineno=1808, col_offset=10)], True, lineno=1808, col_offset=4), Assign([Tuple([Name('lang', Store(), lineno=1809, col_offset=4), Name('enc', Store(), lineno=1809, col_offset=10)], Store(), lineno=1809, col_offset=4)], Call(Name('getdefaultlocale', Load(), lineno=1809, col_offset=16), [], [], None, None, lineno=1809, col_offset=16), lineno=1809, col_offset=4), Print(None, [Str('Language: ', lineno=1810, col_offset=10), BoolOp(Or(), [Name('lang', Load(), lineno=1810, col_offset=24), Str('(undefined)', lineno=1810, col_offset=32)], lineno=1810, col_offset=24)], True, lineno=1810, col_offset=4), Print(None, [Str('Encoding: ', lineno=1811, col_offset=10), BoolOp(Or(), [Name('enc', Load(), lineno=1811, col_offset=24), Str('(undefined)', lineno=1811, col_offset=31)], lineno=1811, col_offset=24)], True, lineno=1811, col_offset=4), Print(None, [], True, lineno=1812, col_offset=4), Print(None, [Str('Locale settings on startup:', lineno=1814, col_offset=10)], True, lineno=1814, col_offset=4), Print(None, [BinOp(Str('-', lineno=1815, col_offset=10), Mult(), Num(72, lineno=1815, col_offset=14), lineno=1815, col_offset=10)], True, lineno=1815, col_offset=4), For(Tuple([Name('name', Store(), lineno=1816, col_offset=8), Name('category', Store(), lineno=1816, col_offset=13)], Store(), lineno=1816, col_offset=8), Call(Attribute(Name('categories', Load(), lineno=1816, col_offset=25), 'items', Load(), lineno=1816, col_offset=25), [], [], None, None, lineno=1816, col_offset=25), [Print(None, [Name('name', Load(), lineno=1817, col_offset=14), Str('...', lineno=1817, col_offset=20)], True, lineno=1817, col_offset=8), Assign([Tuple([Name('lang', Store(), lineno=1818, col_offset=8), Name('enc', Store(), lineno=1818, col_offset=14)], Store(), lineno=1818, col_offset=8)], Call(Name('getlocale', Load(), lineno=1818, col_offset=20), [Name('category', Load(), lineno=1818, col_offset=30)], [], None, None, lineno=1818, col_offset=20), lineno=1818, col_offset=8), Print(None, [Str('   Language: ', lineno=1819, col_offset=14), BoolOp(Or(), [Name('lang', Load(), lineno=1819, col_offset=31), Str('(undefined)', lineno=1819, col_offset=39)], lineno=1819, col_offset=31)], True, lineno=1819, col_offset=8), Print(None, [Str('   Encoding: ', lineno=1820, col_offset=14), BoolOp(Or(), [Name('enc', Load(), lineno=1820, col_offset=31), Str('(undefined)', lineno=1820, col_offset=38)], lineno=1820, col_offset=31)], True, lineno=1820, col_offset=8), Print(None, [], True, lineno=1821, col_offset=8)], [], lineno=1816, col_offset=4), Print(None, [], True, lineno=1823, col_offset=4), Print(None, [Str('Locale settings after calling resetlocale():', lineno=1824, col_offset=10)], True, lineno=1824, col_offset=4), Print(None, [BinOp(Str('-', lineno=1825, col_offset=10), Mult(), Num(72, lineno=1825, col_offset=14), lineno=1825, col_offset=10)], True, lineno=1825, col_offset=4), Expr(Call(Name('resetlocale', Load(), lineno=1826, col_offset=4), [], [], None, None, lineno=1826, col_offset=4), lineno=1826, col_offset=4), For(Tuple([Name('name', Store(), lineno=1827, col_offset=8), Name('category', Store(), lineno=1827, col_offset=13)], Store(), lineno=1827, col_offset=8), Call(Attribute(Name('categories', Load(), lineno=1827, col_offset=25), 'items', Load(), lineno=1827, col_offset=25), [], [], None, None, lineno=1827, col_offset=25), [Print(None, [Name('name', Load(), lineno=1828, col_offset=14), Str('...', lineno=1828, col_offset=20)], True, lineno=1828, col_offset=8), Assign([Tuple([Name('lang', Store(), lineno=1829, col_offset=8), Name('enc', Store(), lineno=1829, col_offset=14)], Store(), lineno=1829, col_offset=8)], Call(Name('getlocale', Load(), lineno=1829, col_offset=20), [Name('category', Load(), lineno=1829, col_offset=30)], [], None, None, lineno=1829, col_offset=20), lineno=1829, col_offset=8), Print(None, [Str('   Language: ', lineno=1830, col_offset=14), BoolOp(Or(), [Name('lang', Load(), lineno=1830, col_offset=31), Str('(undefined)', lineno=1830, col_offset=39)], lineno=1830, col_offset=31)], True, lineno=1830, col_offset=8), Print(None, [Str('   Encoding: ', lineno=1831, col_offset=14), BoolOp(Or(), [Name('enc', Load(), lineno=1831, col_offset=31), Str('(undefined)', lineno=1831, col_offset=38)], lineno=1831, col_offset=31)], True, lineno=1831, col_offset=8), Print(None, [], True, lineno=1832, col_offset=8)], [], lineno=1827, col_offset=4), TryExcept([Expr(Call(Name('setlocale', Load(), lineno=1835, col_offset=8), [Name('LC_ALL', Load(), lineno=1835, col_offset=18), Str('', lineno=1835, col_offset=26)], [], None, None, lineno=1835, col_offset=8), lineno=1835, col_offset=8)], [ExceptHandler(None, None, [Print(None, [Str('NOTE:', lineno=1837, col_offset=14)], True, lineno=1837, col_offset=8), Print(None, [Str('setlocale(LC_ALL, "") does not support the default locale', lineno=1838, col_offset=14)], True, lineno=1838, col_offset=8), Print(None, [Str('given in the OS environment variables.', lineno=1839, col_offset=14)], True, lineno=1839, col_offset=8)], lineno=1836, col_offset=4)], [Print(None, [], True, lineno=1841, col_offset=8), Print(None, [Str('Locale settings after calling setlocale(LC_ALL, ""):', lineno=1842, col_offset=14)], True, lineno=1842, col_offset=8), Print(None, [BinOp(Str('-', lineno=1843, col_offset=14), Mult(), Num(72, lineno=1843, col_offset=18), lineno=1843, col_offset=14)], True, lineno=1843, col_offset=8), For(Tuple([Name('name', Store(), lineno=1844, col_offset=12), Name('category', Store(), lineno=1844, col_offset=17)], Store(), lineno=1844, col_offset=12), Call(Attribute(Name('categories', Load(), lineno=1844, col_offset=29), 'items', Load(), lineno=1844, col_offset=29), [], [], None, None, lineno=1844, col_offset=29), [Print(None, [Name('name', Load(), lineno=1845, col_offset=18), Str('...', lineno=1845, col_offset=24)], True, lineno=1845, col_offset=12), Assign([Tuple([Name('lang', Store(), lineno=1846, col_offset=12), Name('enc', Store(), lineno=1846, col_offset=18)], Store(), lineno=1846, col_offset=12)], Call(Name('getlocale', Load(), lineno=1846, col_offset=24), [Name('category', Load(), lineno=1846, col_offset=34)], [], None, None, lineno=1846, col_offset=24), lineno=1846, col_offset=12), Print(None, [Str('   Language: ', lineno=1847, col_offset=18), BoolOp(Or(), [Name('lang', Load(), lineno=1847, col_offset=35), Str('(undefined)', lineno=1847, col_offset=43)], lineno=1847, col_offset=35)], True, lineno=1847, col_offset=12), Print(None, [Str('   Encoding: ', lineno=1848, col_offset=18), BoolOp(Or(), [Name('enc', Load(), lineno=1848, col_offset=35), Str('(undefined)', lineno=1848, col_offset=42)], lineno=1848, col_offset=35)], True, lineno=1848, col_offset=12), Print(None, [], True, lineno=1849, col_offset=12)], [], lineno=1844, col_offset=8)], lineno=1834, col_offset=4)], [], lineno=1795, col_offset=0), TryExcept([Expr(Name('LC_MESSAGES', Load(), lineno=1854, col_offset=4), lineno=1854, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=1855, col_offset=7), None, [Pass( lineno=1856, col_offset=4)], lineno=1855, col_offset=0)], [Expr(Call(Attribute(Name('__all__', Load(), lineno=1858, col_offset=4), 'append', Load(), lineno=1858, col_offset=4), [Str('LC_MESSAGES', lineno=1858, col_offset=19)], [], None, None, lineno=1858, col_offset=4), lineno=1858, col_offset=4)], lineno=1853, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1860, col_offset=3), [Eq()], [Str('__main__', lineno=1860, col_offset=13)], lineno=1860, col_offset=3), [Print(None, [Str('Locale aliasing:', lineno=1861, col_offset=10)], True, lineno=1861, col_offset=4), Print(None, [], True, lineno=1862, col_offset=4), Expr(Call(Name('_print_locale', Load(), lineno=1863, col_offset=4), [], [], None, None, lineno=1863, col_offset=4), lineno=1863, col_offset=4), Print(None, [], True, lineno=1864, col_offset=4), Print(None, [Str('Number formatting:', lineno=1865, col_offset=10)], True, lineno=1865, col_offset=4), Print(None, [], True, lineno=1866, col_offset=4), Expr(Call(Name('_test', Load(), lineno=1867, col_offset=4), [], [], None, None, lineno=1867, col_offset=4), lineno=1867, col_offset=4)], [], lineno=1860, col_offset=0)])
