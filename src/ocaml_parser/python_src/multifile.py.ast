Module([Expr(Str('A readline()-style interface to the parts of a multipart message.\n\nThe MultiFile class makes each part of a multipart message "feel" like\nan ordinary file, as long as you use fp.readline().  Allows recursive\nuse, for nested multipart messages.  Probably best used together\nwith module mimetools.\n\nSuggested use:\n\nreal_fp = open(...)\nfp = MultiFile(real_fp)\n\n"read some lines from fp"\nfp.push(separator)\nwhile 1:\n        "read lines from fp until it returns an empty string" (A)\n        if not fp.next(): break\nfp.pop()\n"read remaining lines from fp until it returns an empty string"\n\nThe latter sequence may be used recursively at (A).\nIt is also allowed to use multiple push()...pop() sequences.\n\nIf seekable is given as 0, the class code will not do the bookkeeping\nit normally attempts in order to make seeks relative to the beginning of the\ncurrent file part.  This may be useful when using MultiFile with a non-\nseekable stream object.\n', lineno=28, col_offset=-1), lineno=28, col_offset=-1), ImportFrom('warnings', [alias('warn', None)], 0, lineno=29, col_offset=0), Expr(Call(Name('warn', Load(), lineno=30, col_offset=0), [Str('the multifile module has been deprecated since Python 2.5', lineno=30, col_offset=5), Name('DeprecationWarning', Load(), lineno=31, col_offset=8)], [keyword('stacklevel', Num(2, lineno=31, col_offset=39))], None, None, lineno=30, col_offset=0), lineno=30, col_offset=0), Delete([Name('warn', Del(), lineno=32, col_offset=4)], lineno=32, col_offset=0), Assign([Name('__all__', Store(), lineno=34, col_offset=0)], List([Str('MultiFile', lineno=34, col_offset=11), Str('Error', lineno=34, col_offset=23)], Load(), lineno=34, col_offset=10), lineno=34, col_offset=0), ClassDef('Error', [Name('Exception', Load(), lineno=36, col_offset=12)], [Pass( lineno=37, col_offset=4)], [], lineno=36, col_offset=0), ClassDef('MultiFile', [], [Assign([Name('seekable', Store(), lineno=41, col_offset=4)], Num(0, lineno=41, col_offset=15), lineno=41, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=43, col_offset=17), Name('fp', Param(), lineno=43, col_offset=23), Name('seekable', Param(), lineno=43, col_offset=27)], None, None, [Num(1, lineno=43, col_offset=36)]), [Assign([Attribute(Name('self', Load(), lineno=44, col_offset=8), 'fp', Store(), lineno=44, col_offset=8)], Name('fp', Load(), lineno=44, col_offset=18), lineno=44, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=45, col_offset=8), 'stack', Store(), lineno=45, col_offset=8)], List([], Load(), lineno=45, col_offset=21), lineno=45, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=46, col_offset=8), 'level', Store(), lineno=46, col_offset=8)], Num(0, lineno=46, col_offset=21), lineno=46, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=47, col_offset=8), 'last', Store(), lineno=47, col_offset=8)], Num(0, lineno=47, col_offset=20), lineno=47, col_offset=8), If(Name('seekable', Load(), lineno=48, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=49, col_offset=12), 'seekable', Store(), lineno=49, col_offset=12)], Num(1, lineno=49, col_offset=28), lineno=49, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=50, col_offset=12), 'start', Store(), lineno=50, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=50, col_offset=25), 'fp', Load(), lineno=50, col_offset=25), 'tell', Load(), lineno=50, col_offset=25), [], [], None, None, lineno=50, col_offset=25), lineno=50, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=51, col_offset=12), 'posstack', Store(), lineno=51, col_offset=12)], List([], Load(), lineno=51, col_offset=28), lineno=51, col_offset=12)], [], lineno=48, col_offset=8)], [], lineno=43, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=53, col_offset=13)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=54, col_offset=11), 'level', Load(), lineno=54, col_offset=11), [Gt()], [Num(0, lineno=54, col_offset=24)], lineno=54, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=55, col_offset=19), 'lastpos', Load(), lineno=55, col_offset=19), lineno=55, col_offset=12)], [], lineno=54, col_offset=8), Return(BinOp(Call(Attribute(Attribute(Name('self', Load(), lineno=56, col_offset=15), 'fp', Load(), lineno=56, col_offset=15), 'tell', Load(), lineno=56, col_offset=15), [], [], None, None, lineno=56, col_offset=15), Sub(), Attribute(Name('self', Load(), lineno=56, col_offset=32), 'start', Load(), lineno=56, col_offset=32), lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=58, col_offset=13), Name('pos', Param(), lineno=58, col_offset=19), Name('whence', Param(), lineno=58, col_offset=24)], None, None, [Num(0, lineno=58, col_offset=31)]), [Assign([Name('here', Store(), lineno=59, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=59, col_offset=15), 'tell', Load(), lineno=59, col_offset=15), [], [], None, None, lineno=59, col_offset=15), lineno=59, col_offset=8), If(Name('whence', Load(), lineno=60, col_offset=11), [If(Compare(Name('whence', Load(), lineno=61, col_offset=15), [Eq()], [Num(1, lineno=61, col_offset=25)], lineno=61, col_offset=15), [Assign([Name('pos', Store(), lineno=62, col_offset=16)], BinOp(Name('pos', Load(), lineno=62, col_offset=22), Add(), Name('here', Load(), lineno=62, col_offset=28), lineno=62, col_offset=22), lineno=62, col_offset=16)], [If(Compare(Name('whence', Load(), lineno=63, col_offset=17), [Eq()], [Num(2, lineno=63, col_offset=27)], lineno=63, col_offset=17), [If(Compare(Attribute(Name('self', Load(), lineno=64, col_offset=19), 'level', Load(), lineno=64, col_offset=19), [Gt()], [Num(0, lineno=64, col_offset=32)], lineno=64, col_offset=19), [Assign([Name('pos', Store(), lineno=65, col_offset=20)], BinOp(Name('pos', Load(), lineno=65, col_offset=26), Add(), Attribute(Name('self', Load(), lineno=65, col_offset=32), 'lastpos', Load(), lineno=65, col_offset=32), lineno=65, col_offset=26), lineno=65, col_offset=20)], [Raise(Name('Error', Load(), lineno=67, col_offset=26), Str("can't use whence=2 yet", lineno=67, col_offset=33), None, lineno=67, col_offset=20)], lineno=64, col_offset=16)], [], lineno=63, col_offset=17)], lineno=61, col_offset=12)], [], lineno=60, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Compare(Num(0, lineno=68, col_offset=15), [LtE(), LtE()], [Name('pos', Load(), lineno=68, col_offset=20), Name('here', Load(), lineno=68, col_offset=27)], lineno=68, col_offset=15), lineno=68, col_offset=11), BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=69, col_offset=24), 'level', Load(), lineno=69, col_offset=24), [Gt()], [Num(0, lineno=69, col_offset=37)], lineno=69, col_offset=24), Compare(Name('pos', Load(), lineno=69, col_offset=43), [Gt()], [Attribute(Name('self', Load(), lineno=69, col_offset=49), 'lastpos', Load(), lineno=69, col_offset=49)], lineno=69, col_offset=43)], lineno=69, col_offset=24)], lineno=68, col_offset=11), [Raise(Name('Error', Load(), lineno=70, col_offset=18), Str('bad MultiFile.seek() call', lineno=70, col_offset=25), None, lineno=70, col_offset=12)], [], lineno=68, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'fp', Load(), lineno=71, col_offset=8), 'seek', Load(), lineno=71, col_offset=8), [BinOp(Name('pos', Load(), lineno=71, col_offset=21), Add(), Attribute(Name('self', Load(), lineno=71, col_offset=27), 'start', Load(), lineno=71, col_offset=27), lineno=71, col_offset=21)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=72, col_offset=8), 'level', Store(), lineno=72, col_offset=8)], Num(0, lineno=72, col_offset=21), lineno=72, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=73, col_offset=8), 'last', Store(), lineno=73, col_offset=8)], Num(0, lineno=73, col_offset=20), lineno=73, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=75, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=76, col_offset=11), 'level', Load(), lineno=76, col_offset=11), [Gt()], [Num(0, lineno=76, col_offset=24)], lineno=76, col_offset=11), [Return(Str('', lineno=77, col_offset=19), lineno=77, col_offset=12)], [], lineno=76, col_offset=8), Assign([Name('line', Store(), lineno=78, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=78, col_offset=15), 'fp', Load(), lineno=78, col_offset=15), 'readline', Load(), lineno=78, col_offset=15), [], [], None, None, lineno=78, col_offset=15), lineno=78, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=80, col_offset=15), lineno=80, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=81, col_offset=12), 'level', Store(), lineno=81, col_offset=12)], Call(Name('len', Load(), lineno=81, col_offset=25), [Attribute(Name('self', Load(), lineno=81, col_offset=29), 'stack', Load(), lineno=81, col_offset=29)], [], None, None, lineno=81, col_offset=25), lineno=81, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=82, col_offset=12), 'last', Store(), lineno=82, col_offset=12)], Compare(Attribute(Name('self', Load(), lineno=82, col_offset=25), 'level', Load(), lineno=82, col_offset=25), [Gt()], [Num(0, lineno=82, col_offset=38)], lineno=82, col_offset=25), lineno=82, col_offset=12), If(Attribute(Name('self', Load(), lineno=83, col_offset=15), 'last', Load(), lineno=83, col_offset=15), [Raise(Name('Error', Load(), lineno=84, col_offset=22), Str('sudden EOF in MultiFile.readline()', lineno=84, col_offset=29), None, lineno=84, col_offset=16)], [], lineno=83, col_offset=12), Return(Str('', lineno=85, col_offset=19), lineno=85, col_offset=12)], [], lineno=80, col_offset=8), Assert(Compare(Attribute(Name('self', Load(), lineno=86, col_offset=15), 'level', Load(), lineno=86, col_offset=15), [Eq()], [Num(0, lineno=86, col_offset=29)], lineno=86, col_offset=15), None, lineno=86, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=88, col_offset=11), 'is_data', Load(), lineno=88, col_offset=11), [Name('line', Load(), lineno=88, col_offset=24)], [], None, None, lineno=88, col_offset=11), [Return(Name('line', Load(), lineno=89, col_offset=19), lineno=89, col_offset=12)], [Assign([Name('marker', Store(), lineno=92, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=92, col_offset=21), 'rstrip', Load(), lineno=92, col_offset=21), [], [], None, None, lineno=92, col_offset=21), lineno=92, col_offset=12)], lineno=88, col_offset=8), For(Tuple([Name('i', Store(), lineno=95, col_offset=12), Name('sep', Store(), lineno=95, col_offset=15)], Store(), lineno=95, col_offset=12), Call(Name('enumerate', Load(), lineno=95, col_offset=22), [Call(Name('reversed', Load(), lineno=95, col_offset=32), [Attribute(Name('self', Load(), lineno=95, col_offset=41), 'stack', Load(), lineno=95, col_offset=41)], [], None, None, lineno=95, col_offset=32)], [], None, None, lineno=95, col_offset=22), [If(Compare(Name('marker', Load(), lineno=96, col_offset=15), [Eq()], [Call(Attribute(Name('self', Load(), lineno=96, col_offset=25), 'section_divider', Load(), lineno=96, col_offset=25), [Name('sep', Load(), lineno=96, col_offset=46)], [], None, None, lineno=96, col_offset=25)], lineno=96, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=97, col_offset=16), 'last', Store(), lineno=97, col_offset=16)], Num(0, lineno=97, col_offset=28), lineno=97, col_offset=16), Break( lineno=98, col_offset=16)], [If(Compare(Name('marker', Load(), lineno=99, col_offset=17), [Eq()], [Call(Attribute(Name('self', Load(), lineno=99, col_offset=27), 'end_marker', Load(), lineno=99, col_offset=27), [Name('sep', Load(), lineno=99, col_offset=43)], [], None, None, lineno=99, col_offset=27)], lineno=99, col_offset=17), [Assign([Attribute(Name('self', Load(), lineno=100, col_offset=16), 'last', Store(), lineno=100, col_offset=16)], Num(1, lineno=100, col_offset=28), lineno=100, col_offset=16), Break( lineno=101, col_offset=16)], [], lineno=99, col_offset=17)], lineno=96, col_offset=12)], [Return(Name('line', Load(), lineno=103, col_offset=19), lineno=103, col_offset=12)], lineno=95, col_offset=8), If(Attribute(Name('self', Load(), lineno=105, col_offset=11), 'seekable', Load(), lineno=105, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=106, col_offset=12), 'lastpos', Store(), lineno=106, col_offset=12)], BinOp(Call(Attribute(Name('self', Load(), lineno=106, col_offset=27), 'tell', Load(), lineno=106, col_offset=27), [], [], None, None, lineno=106, col_offset=27), Sub(), Call(Name('len', Load(), lineno=106, col_offset=41), [Name('line', Load(), lineno=106, col_offset=45)], [], None, None, lineno=106, col_offset=41), lineno=106, col_offset=27), lineno=106, col_offset=12)], [], lineno=105, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=107, col_offset=8), 'level', Store(), lineno=107, col_offset=8)], BinOp(Name('i', Load(), lineno=107, col_offset=21), Add(), Num(1, lineno=107, col_offset=23), lineno=107, col_offset=21), lineno=107, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=108, col_offset=11), 'level', Load(), lineno=108, col_offset=11), [Gt()], [Num(1, lineno=108, col_offset=24)], lineno=108, col_offset=11), [Raise(Name('Error', Load(), lineno=109, col_offset=18), Str('Missing endmarker in MultiFile.readline()', lineno=109, col_offset=24), None, lineno=109, col_offset=12)], [], lineno=108, col_offset=8), Return(Str('', lineno=110, col_offset=15), lineno=110, col_offset=8)], [], lineno=75, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=112, col_offset=18)], None, None, []), [Assign([Name('list', Store(), lineno=113, col_offset=8)], List([], Load(), lineno=113, col_offset=15), lineno=113, col_offset=8), While(Num(1, lineno=114, col_offset=14), [Assign([Name('line', Store(), lineno=115, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=115, col_offset=19), 'readline', Load(), lineno=115, col_offset=19), [], [], None, None, lineno=115, col_offset=19), lineno=115, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=116, col_offset=19), lineno=116, col_offset=15), [Break( lineno=116, col_offset=25)], [], lineno=116, col_offset=12), Expr(Call(Attribute(Name('list', Load(), lineno=117, col_offset=12), 'append', Load(), lineno=117, col_offset=12), [Name('line', Load(), lineno=117, col_offset=24)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12)], [], lineno=114, col_offset=8), Return(Name('list', Load(), lineno=118, col_offset=15), lineno=118, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=120, col_offset=13)], None, None, []), [Return(Call(Attribute(Str('', lineno=121, col_offset=15), 'join', Load(), lineno=121, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=121, col_offset=23), 'readlines', Load(), lineno=121, col_offset=23), [], [], None, None, lineno=121, col_offset=23)], [], None, None, lineno=121, col_offset=15), lineno=121, col_offset=8)], [], lineno=120, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=123, col_offset=13)], None, None, []), [While(Call(Attribute(Name('self', Load(), lineno=124, col_offset=14), 'readline', Load(), lineno=124, col_offset=14), [], [], None, None, lineno=124, col_offset=14), [Pass( lineno=124, col_offset=31)], [], lineno=124, col_offset=8), If(BoolOp(Or(), [Compare(Attribute(Name('self', Load(), lineno=125, col_offset=11), 'level', Load(), lineno=125, col_offset=11), [Gt()], [Num(1, lineno=125, col_offset=24)], lineno=125, col_offset=11), Attribute(Name('self', Load(), lineno=125, col_offset=29), 'last', Load(), lineno=125, col_offset=29)], lineno=125, col_offset=11), [Return(Num(0, lineno=126, col_offset=19), lineno=126, col_offset=12)], [], lineno=125, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=127, col_offset=8), 'level', Store(), lineno=127, col_offset=8)], Num(0, lineno=127, col_offset=21), lineno=127, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=128, col_offset=8), 'last', Store(), lineno=128, col_offset=8)], Num(0, lineno=128, col_offset=20), lineno=128, col_offset=8), If(Attribute(Name('self', Load(), lineno=129, col_offset=11), 'seekable', Load(), lineno=129, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=130, col_offset=12), 'start', Store(), lineno=130, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=130, col_offset=25), 'fp', Load(), lineno=130, col_offset=25), 'tell', Load(), lineno=130, col_offset=25), [], [], None, None, lineno=130, col_offset=25), lineno=130, col_offset=12)], [], lineno=129, col_offset=8), Return(Num(1, lineno=131, col_offset=15), lineno=131, col_offset=8)], [], lineno=123, col_offset=4), FunctionDef('push', arguments([Name('self', Param(), lineno=133, col_offset=13), Name('sep', Param(), lineno=133, col_offset=19)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=134, col_offset=11), 'level', Load(), lineno=134, col_offset=11), [Gt()], [Num(0, lineno=134, col_offset=24)], lineno=134, col_offset=11), [Raise(Name('Error', Load(), lineno=135, col_offset=18), Str('bad MultiFile.push() call', lineno=135, col_offset=25), None, lineno=135, col_offset=12)], [], lineno=134, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'stack', Load(), lineno=136, col_offset=8), 'append', Load(), lineno=136, col_offset=8), [Name('sep', Load(), lineno=136, col_offset=26)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), If(Attribute(Name('self', Load(), lineno=137, col_offset=11), 'seekable', Load(), lineno=137, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'posstack', Load(), lineno=138, col_offset=12), 'append', Load(), lineno=138, col_offset=12), [Attribute(Name('self', Load(), lineno=138, col_offset=33), 'start', Load(), lineno=138, col_offset=33)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=139, col_offset=12), 'start', Store(), lineno=139, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=139, col_offset=25), 'fp', Load(), lineno=139, col_offset=25), 'tell', Load(), lineno=139, col_offset=25), [], [], None, None, lineno=139, col_offset=25), lineno=139, col_offset=12)], [], lineno=137, col_offset=8)], [], lineno=133, col_offset=4), FunctionDef('pop', arguments([Name('self', Param(), lineno=141, col_offset=12)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=142, col_offset=11), 'stack', Load(), lineno=142, col_offset=11), [Eq()], [List([], Load(), lineno=142, col_offset=25)], lineno=142, col_offset=11), [Raise(Name('Error', Load(), lineno=143, col_offset=18), Str('bad MultiFile.pop() call', lineno=143, col_offset=25), None, lineno=143, col_offset=12)], [], lineno=142, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=144, col_offset=11), 'level', Load(), lineno=144, col_offset=11), [LtE()], [Num(1, lineno=144, col_offset=25)], lineno=144, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=145, col_offset=12), 'last', Store(), lineno=145, col_offset=12)], Num(0, lineno=145, col_offset=24), lineno=145, col_offset=12)], [Assign([Name('abslastpos', Store(), lineno=147, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=147, col_offset=25), 'lastpos', Load(), lineno=147, col_offset=25), Add(), Attribute(Name('self', Load(), lineno=147, col_offset=40), 'start', Load(), lineno=147, col_offset=40), lineno=147, col_offset=25), lineno=147, col_offset=12)], lineno=144, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=148, col_offset=8), 'level', Store(), lineno=148, col_offset=8)], Call(Name('max', Load(), lineno=148, col_offset=21), [Num(0, lineno=148, col_offset=25), BinOp(Attribute(Name('self', Load(), lineno=148, col_offset=28), 'level', Load(), lineno=148, col_offset=28), Sub(), Num(1, lineno=148, col_offset=41), lineno=148, col_offset=28)], [], None, None, lineno=148, col_offset=21), lineno=148, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=149, col_offset=8), 'stack', Load(), lineno=149, col_offset=8), 'pop', Load(), lineno=149, col_offset=8), [], [], None, None, lineno=149, col_offset=8), lineno=149, col_offset=8), If(Attribute(Name('self', Load(), lineno=150, col_offset=11), 'seekable', Load(), lineno=150, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=151, col_offset=12), 'start', Store(), lineno=151, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=151, col_offset=25), 'posstack', Load(), lineno=151, col_offset=25), 'pop', Load(), lineno=151, col_offset=25), [], [], None, None, lineno=151, col_offset=25), lineno=151, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=152, col_offset=15), 'level', Load(), lineno=152, col_offset=15), [Gt()], [Num(0, lineno=152, col_offset=28)], lineno=152, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=153, col_offset=16), 'lastpos', Store(), lineno=153, col_offset=16)], BinOp(Name('abslastpos', Load(), lineno=153, col_offset=31), Sub(), Attribute(Name('self', Load(), lineno=153, col_offset=44), 'start', Load(), lineno=153, col_offset=44), lineno=153, col_offset=31), lineno=153, col_offset=16)], [], lineno=152, col_offset=12)], [], lineno=150, col_offset=8)], [], lineno=141, col_offset=4), FunctionDef('is_data', arguments([Name('self', Param(), lineno=155, col_offset=16), Name('line', Param(), lineno=155, col_offset=22)], None, None, []), [Return(Compare(Subscript(Name('line', Load(), lineno=156, col_offset=15), Slice(None, Num(2, lineno=156, col_offset=21), None), Load(), lineno=156, col_offset=15), [NotEq()], [Str('--', lineno=156, col_offset=27)], lineno=156, col_offset=15), lineno=156, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('section_divider', arguments([Name('self', Param(), lineno=158, col_offset=24), Name('str', Param(), lineno=158, col_offset=30)], None, None, []), [Return(BinOp(Str('--', lineno=159, col_offset=15), Add(), Name('str', Load(), lineno=159, col_offset=22), lineno=159, col_offset=15), lineno=159, col_offset=8)], [], lineno=158, col_offset=4), FunctionDef('end_marker', arguments([Name('self', Param(), lineno=161, col_offset=19), Name('str', Param(), lineno=161, col_offset=25)], None, None, []), [Return(BinOp(BinOp(Str('--', lineno=162, col_offset=15), Add(), Name('str', Load(), lineno=162, col_offset=22), lineno=162, col_offset=15), Add(), Str('--', lineno=162, col_offset=28), lineno=162, col_offset=26), lineno=162, col_offset=8)], [], lineno=161, col_offset=4)], [], lineno=39, col_offset=0)])
