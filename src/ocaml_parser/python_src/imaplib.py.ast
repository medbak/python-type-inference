Module([Expr(Str('IMAP4 client.\n\nBased on RFC 2060.\n\nPublic class:           IMAP4\nPublic variable:        Debug\nPublic functions:       Internaldate2tuple\n                        Int2AP\n                        ParseFlags\n                        Time2Internaldate\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), Assign([Name('__version__', Store(), lineno=23, col_offset=0)], Str('2.58', lineno=23, col_offset=14), lineno=23, col_offset=0), Import([alias('binascii', None), alias('errno', None), alias('random', None), alias('re', None), alias('socket', None), alias('subprocess', None), alias('sys', None), alias('time', None)], lineno=25, col_offset=0), Assign([Name('__all__', Store(), lineno=27, col_offset=0)], List([Str('IMAP4', lineno=27, col_offset=11), Str('IMAP4_stream', lineno=27, col_offset=20), Str('Internaldate2tuple', lineno=27, col_offset=36), Str('Int2AP', lineno=28, col_offset=11), Str('ParseFlags', lineno=28, col_offset=21), Str('Time2Internaldate', lineno=28, col_offset=35)], Load(), lineno=27, col_offset=10), lineno=27, col_offset=0), Assign([Name('CRLF', Store(), lineno=32, col_offset=0)], Str('\r\n', lineno=32, col_offset=7), lineno=32, col_offset=0), Assign([Name('Debug', Store(), lineno=33, col_offset=0)], Num(0, lineno=33, col_offset=8), lineno=33, col_offset=0), Assign([Name('IMAP4_PORT', Store(), lineno=34, col_offset=0)], Num(143, lineno=34, col_offset=13), lineno=34, col_offset=0), Assign([Name('IMAP4_SSL_PORT', Store(), lineno=35, col_offset=0)], Num(993, lineno=35, col_offset=17), lineno=35, col_offset=0), Assign([Name('AllowedVersions', Store(), lineno=36, col_offset=0)], Tuple([Str('IMAP4REV1', lineno=36, col_offset=19), Str('IMAP4', lineno=36, col_offset=32)], Load(), lineno=36, col_offset=19), lineno=36, col_offset=0), Assign([Name('Commands', Store(), lineno=40, col_offset=0)], Dict([Str('APPEND', lineno=42, col_offset=8), Str('AUTHENTICATE', lineno=43, col_offset=8), Str('CAPABILITY', lineno=44, col_offset=8), Str('CHECK', lineno=45, col_offset=8), Str('CLOSE', lineno=46, col_offset=8), Str('COPY', lineno=47, col_offset=8), Str('CREATE', lineno=48, col_offset=8), Str('DELETE', lineno=49, col_offset=8), Str('DELETEACL', lineno=50, col_offset=8), Str('EXAMINE', lineno=51, col_offset=8), Str('EXPUNGE', lineno=52, col_offset=8), Str('FETCH', lineno=53, col_offset=8), Str('GETACL', lineno=54, col_offset=8), Str('GETANNOTATION', lineno=55, col_offset=8), Str('GETQUOTA', lineno=56, col_offset=8), Str('GETQUOTAROOT', lineno=57, col_offset=8), Str('MYRIGHTS', lineno=58, col_offset=8), Str('LIST', lineno=59, col_offset=8), Str('LOGIN', lineno=60, col_offset=8), Str('LOGOUT', lineno=61, col_offset=8), Str('LSUB', lineno=62, col_offset=8), Str('NAMESPACE', lineno=63, col_offset=8), Str('NOOP', lineno=64, col_offset=8), Str('PARTIAL', lineno=65, col_offset=8), Str('PROXYAUTH', lineno=66, col_offset=8), Str('RENAME', lineno=67, col_offset=8), Str('SEARCH', lineno=68, col_offset=8), Str('SELECT', lineno=69, col_offset=8), Str('SETACL', lineno=70, col_offset=8), Str('SETANNOTATION', lineno=71, col_offset=8), Str('SETQUOTA', lineno=72, col_offset=8), Str('SORT', lineno=73, col_offset=8), Str('STATUS', lineno=74, col_offset=8), Str('STORE', lineno=75, col_offset=8), Str('SUBSCRIBE', lineno=76, col_offset=8), Str('THREAD', lineno=77, col_offset=8), Str('UID', lineno=78, col_offset=8), Str('UNSUBSCRIBE', lineno=79, col_offset=8)], [Tuple([Str('AUTH', lineno=42, col_offset=25), Str('SELECTED', lineno=42, col_offset=33)], Load(), lineno=42, col_offset=25), Tuple([Str('NONAUTH', lineno=43, col_offset=25)], Load(), lineno=43, col_offset=25), Tuple([Str('NONAUTH', lineno=44, col_offset=25), Str('AUTH', lineno=44, col_offset=36), Str('SELECTED', lineno=44, col_offset=44), Str('LOGOUT', lineno=44, col_offset=56)], Load(), lineno=44, col_offset=25), Tuple([Str('SELECTED', lineno=45, col_offset=25)], Load(), lineno=45, col_offset=25), Tuple([Str('SELECTED', lineno=46, col_offset=25)], Load(), lineno=46, col_offset=25), Tuple([Str('SELECTED', lineno=47, col_offset=25)], Load(), lineno=47, col_offset=25), Tuple([Str('AUTH', lineno=48, col_offset=25), Str('SELECTED', lineno=48, col_offset=33)], Load(), lineno=48, col_offset=25), Tuple([Str('AUTH', lineno=49, col_offset=25), Str('SELECTED', lineno=49, col_offset=33)], Load(), lineno=49, col_offset=25), Tuple([Str('AUTH', lineno=50, col_offset=25), Str('SELECTED', lineno=50, col_offset=33)], Load(), lineno=50, col_offset=25), Tuple([Str('AUTH', lineno=51, col_offset=25), Str('SELECTED', lineno=51, col_offset=33)], Load(), lineno=51, col_offset=25), Tuple([Str('SELECTED', lineno=52, col_offset=25)], Load(), lineno=52, col_offset=25), Tuple([Str('SELECTED', lineno=53, col_offset=25)], Load(), lineno=53, col_offset=25), Tuple([Str('AUTH', lineno=54, col_offset=25), Str('SELECTED', lineno=54, col_offset=33)], Load(), lineno=54, col_offset=25), Tuple([Str('AUTH', lineno=55, col_offset=25), Str('SELECTED', lineno=55, col_offset=33)], Load(), lineno=55, col_offset=25), Tuple([Str('AUTH', lineno=56, col_offset=25), Str('SELECTED', lineno=56, col_offset=33)], Load(), lineno=56, col_offset=25), Tuple([Str('AUTH', lineno=57, col_offset=25), Str('SELECTED', lineno=57, col_offset=33)], Load(), lineno=57, col_offset=25), Tuple([Str('AUTH', lineno=58, col_offset=25), Str('SELECTED', lineno=58, col_offset=33)], Load(), lineno=58, col_offset=25), Tuple([Str('AUTH', lineno=59, col_offset=25), Str('SELECTED', lineno=59, col_offset=33)], Load(), lineno=59, col_offset=25), Tuple([Str('NONAUTH', lineno=60, col_offset=25)], Load(), lineno=60, col_offset=25), Tuple([Str('NONAUTH', lineno=61, col_offset=25), Str('AUTH', lineno=61, col_offset=36), Str('SELECTED', lineno=61, col_offset=44), Str('LOGOUT', lineno=61, col_offset=56)], Load(), lineno=61, col_offset=25), Tuple([Str('AUTH', lineno=62, col_offset=25), Str('SELECTED', lineno=62, col_offset=33)], Load(), lineno=62, col_offset=25), Tuple([Str('AUTH', lineno=63, col_offset=25), Str('SELECTED', lineno=63, col_offset=33)], Load(), lineno=63, col_offset=25), Tuple([Str('NONAUTH', lineno=64, col_offset=25), Str('AUTH', lineno=64, col_offset=36), Str('SELECTED', lineno=64, col_offset=44), Str('LOGOUT', lineno=64, col_offset=56)], Load(), lineno=64, col_offset=25), Tuple([Str('SELECTED', lineno=65, col_offset=25)], Load(), lineno=65, col_offset=25), Tuple([Str('AUTH', lineno=66, col_offset=25)], Load(), lineno=66, col_offset=25), Tuple([Str('AUTH', lineno=67, col_offset=25), Str('SELECTED', lineno=67, col_offset=33)], Load(), lineno=67, col_offset=25), Tuple([Str('SELECTED', lineno=68, col_offset=25)], Load(), lineno=68, col_offset=25), Tuple([Str('AUTH', lineno=69, col_offset=25), Str('SELECTED', lineno=69, col_offset=33)], Load(), lineno=69, col_offset=25), Tuple([Str('AUTH', lineno=70, col_offset=25), Str('SELECTED', lineno=70, col_offset=33)], Load(), lineno=70, col_offset=25), Tuple([Str('AUTH', lineno=71, col_offset=25), Str('SELECTED', lineno=71, col_offset=33)], Load(), lineno=71, col_offset=25), Tuple([Str('AUTH', lineno=72, col_offset=25), Str('SELECTED', lineno=72, col_offset=33)], Load(), lineno=72, col_offset=25), Tuple([Str('SELECTED', lineno=73, col_offset=25)], Load(), lineno=73, col_offset=25), Tuple([Str('AUTH', lineno=74, col_offset=25), Str('SELECTED', lineno=74, col_offset=33)], Load(), lineno=74, col_offset=25), Tuple([Str('SELECTED', lineno=75, col_offset=25)], Load(), lineno=75, col_offset=25), Tuple([Str('AUTH', lineno=76, col_offset=25), Str('SELECTED', lineno=76, col_offset=33)], Load(), lineno=76, col_offset=25), Tuple([Str('SELECTED', lineno=77, col_offset=25)], Load(), lineno=77, col_offset=25), Tuple([Str('SELECTED', lineno=78, col_offset=25)], Load(), lineno=78, col_offset=25), Tuple([Str('AUTH', lineno=79, col_offset=25), Str('SELECTED', lineno=79, col_offset=33)], Load(), lineno=79, col_offset=25)], lineno=40, col_offset=11), lineno=40, col_offset=0), Assign([Name('Continuation', Store(), lineno=84, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=84, col_offset=15), 'compile', Load(), lineno=84, col_offset=15), [Str('\\+( (?P<data>.*))?', lineno=84, col_offset=26)], [], None, None, lineno=84, col_offset=15), lineno=84, col_offset=0), Assign([Name('Flags', Store(), lineno=85, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=85, col_offset=8), 'compile', Load(), lineno=85, col_offset=8), [Str('.*FLAGS \\((?P<flags>[^\\)]*)\\)', lineno=85, col_offset=19)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=0), Assign([Name('InternalDate', Store(), lineno=86, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=86, col_offset=15), 'compile', Load(), lineno=86, col_offset=15), [Str('.*INTERNALDATE "(?P<day>[ 0123][0-9])-(?P<mon>[A-Z][a-z][a-z])-(?P<year>[0-9][0-9][0-9][0-9]) (?P<hour>[0-9][0-9]):(?P<min>[0-9][0-9]):(?P<sec>[0-9][0-9]) (?P<zonen>[-+])(?P<zoneh>[0-9][0-9])(?P<zonem>[0-9][0-9])"', lineno=86, col_offset=26)], [], None, None, lineno=86, col_offset=15), lineno=86, col_offset=0), Assign([Name('Literal', Store(), lineno=91, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=91, col_offset=10), 'compile', Load(), lineno=91, col_offset=10), [Str('.*{(?P<size>\\d+)}$', lineno=91, col_offset=21)], [], None, None, lineno=91, col_offset=10), lineno=91, col_offset=0), Assign([Name('MapCRLF', Store(), lineno=92, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=92, col_offset=10), 'compile', Load(), lineno=92, col_offset=10), [Str('\\r\\n|\\r|\\n', lineno=92, col_offset=21)], [], None, None, lineno=92, col_offset=10), lineno=92, col_offset=0), Assign([Name('Response_code', Store(), lineno=93, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=93, col_offset=16), 'compile', Load(), lineno=93, col_offset=16), [Str('\\[(?P<type>[A-Z-]+)( (?P<data>[^\\]]*))?\\]', lineno=93, col_offset=27)], [], None, None, lineno=93, col_offset=16), lineno=93, col_offset=0), Assign([Name('Untagged_response', Store(), lineno=94, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=94, col_offset=20), 'compile', Load(), lineno=94, col_offset=20), [Str('\\* (?P<type>[A-Z-]+)( (?P<data>.*))?', lineno=94, col_offset=31)], [], None, None, lineno=94, col_offset=20), lineno=94, col_offset=0), Assign([Name('Untagged_status', Store(), lineno=95, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=95, col_offset=18), 'compile', Load(), lineno=95, col_offset=18), [Str('\\* (?P<data>\\d+) (?P<type>[A-Z-]+)( (?P<data2>.*))?', lineno=95, col_offset=29)], [], None, None, lineno=95, col_offset=18), lineno=95, col_offset=0), ClassDef('IMAP4', [], [Expr(Str('IMAP4 client class.\n\n    Instantiate with: IMAP4([host[, port]])\n\n            host - host\'s name (default: localhost);\n            port - port number (default: standard IMAP4 port).\n\n    All IMAP4rev1 commands are supported by methods of the same\n    name (in lower-case).\n\n    All arguments to commands are converted to strings, except for\n    AUTHENTICATE, and the last argument to APPEND which is passed as\n    an IMAP4 literal.  If necessary (the string contains any\n    non-printing characters or white-space and isn\'t enclosed with\n    either parentheses or double quotes) each string is quoted.\n    However, the \'password\' argument to the LOGIN command is always\n    quoted.  If you want to avoid having an argument string quoted\n    (eg: the \'flags\' argument to STORE) then enclose the string in\n    parentheses (eg: "(\\Deleted)").\n\n    Each command returns a tuple: (type, [data, ...]) where \'type\'\n    is usually \'OK\' or \'NO\', and \'data\' is either the text from the\n    tagged response, or untagged results from command. Each \'data\'\n    is either a string, or a tuple. If a tuple, then the first part\n    is the header of the response, and the second part contains\n    the data (ie: \'literal\' value).\n\n    Errors raise the exception class <instance>.error("<reason>").\n    IMAP4 server errors raise <instance>.abort("<reason>"),\n    which is a sub-class of \'error\'. Mailbox status changes\n    from READ-WRITE to READ-ONLY raise the exception class\n    <instance>.readonly("<reason>"), which is a sub-class of \'abort\'.\n\n    "error" exceptions imply a program error.\n    "abort" exceptions imply the connection should be reset, and\n            the command re-tried.\n    "readonly" exceptions imply the command should be re-tried.\n\n    Note: to use this module, you must read the RFCs pertaining to the\n    IMAP4 protocol, as the semantics of the arguments to each IMAP4\n    command are left to the invoker, not to mention the results. Also,\n    most IMAP servers implement a sub-set of the commands available here.\n    ', lineno=143, col_offset=-1), lineno=143, col_offset=-1), ClassDef('error', [Name('Exception', Load(), lineno=145, col_offset=16)], [Pass( lineno=145, col_offset=28)], [], lineno=145, col_offset=4), ClassDef('abort', [Name('error', Load(), lineno=146, col_offset=16)], [Pass( lineno=146, col_offset=24)], [], lineno=146, col_offset=4), ClassDef('readonly', [Name('abort', Load(), lineno=147, col_offset=19)], [Pass( lineno=147, col_offset=27)], [], lineno=147, col_offset=4), Assign([Name('mustquote', Store(), lineno=149, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=149, col_offset=16), 'compile', Load(), lineno=149, col_offset=16), [Str("[^\\w!#$%&'*+,.:;<=>?^`|~-]", lineno=149, col_offset=27)], [], None, None, lineno=149, col_offset=16), lineno=149, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=151, col_offset=17), Name('host', Param(), lineno=151, col_offset=23), Name('port', Param(), lineno=151, col_offset=34)], None, None, [Str('', lineno=151, col_offset=30), Name('IMAP4_PORT', Load(), lineno=151, col_offset=41)]), [Assign([Attribute(Name('self', Load(), lineno=152, col_offset=8), 'debug', Store(), lineno=152, col_offset=8)], Name('Debug', Load(), lineno=152, col_offset=21), lineno=152, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=153, col_offset=8), 'state', Store(), lineno=153, col_offset=8)], Str('LOGOUT', lineno=153, col_offset=21), lineno=153, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=154, col_offset=8), 'literal', Store(), lineno=154, col_offset=8)], Name('None', Load(), lineno=154, col_offset=23), lineno=154, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=155, col_offset=8), 'tagged_commands', Store(), lineno=155, col_offset=8)], Dict([], [], lineno=155, col_offset=31), lineno=155, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'untagged_responses', Store(), lineno=156, col_offset=8)], Dict([], [], lineno=156, col_offset=34), lineno=156, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=157, col_offset=8), 'continuation_response', Store(), lineno=157, col_offset=8)], Str('', lineno=157, col_offset=37), lineno=157, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=158, col_offset=8), 'is_readonly', Store(), lineno=158, col_offset=8)], Name('False', Load(), lineno=158, col_offset=27), lineno=158, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=159, col_offset=8), 'tagnum', Store(), lineno=159, col_offset=8)], Num(0, lineno=159, col_offset=22), lineno=159, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), 'open', Load(), lineno=163, col_offset=8), [Name('host', Load(), lineno=163, col_offset=18), Name('port', Load(), lineno=163, col_offset=24)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=168, col_offset=8), 'tagpre', Store(), lineno=168, col_offset=8)], Call(Name('Int2AP', Load(), lineno=168, col_offset=22), [Call(Attribute(Name('random', Load(), lineno=168, col_offset=29), 'randint', Load(), lineno=168, col_offset=29), [Num(4096, lineno=168, col_offset=44), Num(65535, lineno=168, col_offset=50)], [], None, None, lineno=168, col_offset=29)], [], None, None, lineno=168, col_offset=22), lineno=168, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=169, col_offset=8), 'tagre', Store(), lineno=169, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=169, col_offset=21), 'compile', Load(), lineno=169, col_offset=21), [BinOp(BinOp(Str('(?P<tag>', lineno=169, col_offset=32), Add(), Attribute(Name('self', Load(), lineno=170, col_offset=26), 'tagpre', Load(), lineno=170, col_offset=26), lineno=169, col_offset=32), Add(), Str('\\d+) (?P<type>[A-Z]+) (?P<data>.*)', lineno=171, col_offset=26), lineno=171, col_offset=24)], [], None, None, lineno=169, col_offset=21), lineno=169, col_offset=8), If(Name('__debug__', Load(), lineno=176, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=177, col_offset=12), '_cmd_log_len', Store(), lineno=177, col_offset=12)], Num(10, lineno=177, col_offset=32), lineno=177, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=178, col_offset=12), '_cmd_log_idx', Store(), lineno=178, col_offset=12)], Num(0, lineno=178, col_offset=32), lineno=178, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=179, col_offset=12), '_cmd_log', Store(), lineno=179, col_offset=12)], Dict([], [], lineno=179, col_offset=28), lineno=179, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=180, col_offset=15), 'debug', Load(), lineno=180, col_offset=15), [GtE()], [Num(1, lineno=180, col_offset=29)], lineno=180, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=181, col_offset=16), '_mesg', Load(), lineno=181, col_offset=16), [BinOp(Str('imaplib version %s', lineno=181, col_offset=27), Mod(), Name('__version__', Load(), lineno=181, col_offset=50), lineno=181, col_offset=27)], [], None, None, lineno=181, col_offset=16), lineno=181, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=182, col_offset=16), '_mesg', Load(), lineno=182, col_offset=16), [BinOp(Str('new IMAP4 connection, tag=%s', lineno=182, col_offset=27), Mod(), Attribute(Name('self', Load(), lineno=182, col_offset=60), 'tagpre', Load(), lineno=182, col_offset=60), lineno=182, col_offset=27)], [], None, None, lineno=182, col_offset=16), lineno=182, col_offset=16)], [], lineno=180, col_offset=12)], [], lineno=176, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=184, col_offset=8), 'welcome', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=184, col_offset=23), '_get_response', Load(), lineno=184, col_offset=23), [], [], None, None, lineno=184, col_offset=23), lineno=184, col_offset=8), If(Compare(Str('PREAUTH', lineno=185, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=185, col_offset=24), 'untagged_responses', Load(), lineno=185, col_offset=24)], lineno=185, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=186, col_offset=12), 'state', Store(), lineno=186, col_offset=12)], Str('AUTH', lineno=186, col_offset=25), lineno=186, col_offset=12)], [If(Compare(Str('OK', lineno=187, col_offset=13), [In()], [Attribute(Name('self', Load(), lineno=187, col_offset=21), 'untagged_responses', Load(), lineno=187, col_offset=21)], lineno=187, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=188, col_offset=12), 'state', Store(), lineno=188, col_offset=12)], Str('NONAUTH', lineno=188, col_offset=25), lineno=188, col_offset=12)], [Raise(Call(Attribute(Name('self', Load(), lineno=190, col_offset=18), 'error', Load(), lineno=190, col_offset=18), [Attribute(Name('self', Load(), lineno=190, col_offset=29), 'welcome', Load(), lineno=190, col_offset=29)], [], None, None, lineno=190, col_offset=18), None, None, lineno=190, col_offset=12)], lineno=187, col_offset=13)], lineno=185, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=192, col_offset=8), Name('dat', Store(), lineno=192, col_offset=13)], Store(), lineno=192, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=192, col_offset=19), 'capability', Load(), lineno=192, col_offset=19), [], [], None, None, lineno=192, col_offset=19), lineno=192, col_offset=8), If(Compare(Name('dat', Load(), lineno=193, col_offset=11), [Eq()], [List([Name('None', Load(), lineno=193, col_offset=19)], Load(), lineno=193, col_offset=18)], lineno=193, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=194, col_offset=18), 'error', Load(), lineno=194, col_offset=18), [Str('no CAPABILITY response from server', lineno=194, col_offset=29)], [], None, None, lineno=194, col_offset=18), None, None, lineno=194, col_offset=12)], [], lineno=193, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=195, col_offset=8), 'capabilities', Store(), lineno=195, col_offset=8)], Call(Name('tuple', Load(), lineno=195, col_offset=28), [Call(Attribute(Call(Attribute(Subscript(Name('dat', Load(), lineno=195, col_offset=34), Index(Num(-1, lineno=195, col_offset=39)), Load(), lineno=195, col_offset=34), 'upper', Load(), lineno=195, col_offset=34), [], [], None, None, lineno=195, col_offset=34), 'split', Load(), lineno=195, col_offset=34), [], [], None, None, lineno=195, col_offset=34)], [], None, None, lineno=195, col_offset=28), lineno=195, col_offset=8), If(Name('__debug__', Load(), lineno=197, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=198, col_offset=15), 'debug', Load(), lineno=198, col_offset=15), [GtE()], [Num(3, lineno=198, col_offset=29)], lineno=198, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=16), '_mesg', Load(), lineno=199, col_offset=16), [BinOp(Str('CAPABILITIES: %r', lineno=199, col_offset=27), Mod(), Tuple([Attribute(Name('self', Load(), lineno=199, col_offset=49), 'capabilities', Load(), lineno=199, col_offset=49)], Load(), lineno=199, col_offset=49), lineno=199, col_offset=27)], [], None, None, lineno=199, col_offset=16), lineno=199, col_offset=16)], [], lineno=198, col_offset=12)], [], lineno=197, col_offset=8), For(Name('version', Store(), lineno=201, col_offset=12), Name('AllowedVersions', Load(), lineno=201, col_offset=23), [If(UnaryOp(Not(), Compare(Name('version', Load(), lineno=202, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=202, col_offset=30), 'capabilities', Load(), lineno=202, col_offset=30)], lineno=202, col_offset=19), lineno=202, col_offset=15), [Continue( lineno=203, col_offset=16)], [], lineno=202, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=204, col_offset=12), 'PROTOCOL_VERSION', Store(), lineno=204, col_offset=12)], Name('version', Load(), lineno=204, col_offset=36), lineno=204, col_offset=12), Return(None, lineno=205, col_offset=12)], [], lineno=201, col_offset=8), Raise(Call(Attribute(Name('self', Load(), lineno=207, col_offset=14), 'error', Load(), lineno=207, col_offset=14), [Str('server not IMAP4 compliant', lineno=207, col_offset=25)], [], None, None, lineno=207, col_offset=14), None, None, lineno=207, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=210, col_offset=20), Name('attr', Param(), lineno=210, col_offset=26)], None, None, []), [If(Compare(Name('attr', Load(), lineno=212, col_offset=11), [In()], [Name('Commands', Load(), lineno=212, col_offset=19)], lineno=212, col_offset=11), [Return(Call(Name('getattr', Load(), lineno=213, col_offset=19), [Name('self', Load(), lineno=213, col_offset=27), Call(Attribute(Name('attr', Load(), lineno=213, col_offset=33), 'lower', Load(), lineno=213, col_offset=33), [], [], None, None, lineno=213, col_offset=33)], [], None, None, lineno=213, col_offset=19), lineno=213, col_offset=12)], [], lineno=212, col_offset=8), Raise(Call(Name('AttributeError', Load(), lineno=214, col_offset=14), [BinOp(Str("Unknown IMAP4 command: '%s'", lineno=214, col_offset=29), Mod(), Name('attr', Load(), lineno=214, col_offset=61), lineno=214, col_offset=29)], [], None, None, lineno=214, col_offset=14), None, None, lineno=214, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('open', arguments([Name('self', Param(), lineno=221, col_offset=13), Name('host', Param(), lineno=221, col_offset=19), Name('port', Param(), lineno=221, col_offset=30)], None, None, [Str('', lineno=221, col_offset=26), Name('IMAP4_PORT', Load(), lineno=221, col_offset=37)]), [Expr(Str('Setup connection to remote server on "host:port"\n            (default: localhost:standard IMAP4 port).\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        ', lineno=226, col_offset=-1), lineno=226, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=227, col_offset=8), 'host', Store(), lineno=227, col_offset=8)], Name('host', Load(), lineno=227, col_offset=20), lineno=227, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=228, col_offset=8), 'port', Store(), lineno=228, col_offset=8)], Name('port', Load(), lineno=228, col_offset=20), lineno=228, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=229, col_offset=8), 'sock', Store(), lineno=229, col_offset=8)], Call(Attribute(Name('socket', Load(), lineno=229, col_offset=20), 'create_connection', Load(), lineno=229, col_offset=20), [Tuple([Name('host', Load(), lineno=229, col_offset=46), Name('port', Load(), lineno=229, col_offset=52)], Load(), lineno=229, col_offset=46)], [], None, None, lineno=229, col_offset=20), lineno=229, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=230, col_offset=8), 'file', Store(), lineno=230, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=230, col_offset=20), 'sock', Load(), lineno=230, col_offset=20), 'makefile', Load(), lineno=230, col_offset=20), [Str('rb', lineno=230, col_offset=39)], [], None, None, lineno=230, col_offset=20), lineno=230, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=233, col_offset=13), Name('size', Param(), lineno=233, col_offset=19)], None, None, []), [Expr(Str("Read 'size' bytes from remote.", lineno=234, col_offset=8), lineno=234, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=235, col_offset=15), 'file', Load(), lineno=235, col_offset=15), 'read', Load(), lineno=235, col_offset=15), [Name('size', Load(), lineno=235, col_offset=30)], [], None, None, lineno=235, col_offset=15), lineno=235, col_offset=8)], [], lineno=233, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=238, col_offset=17)], None, None, []), [Expr(Str('Read line from remote.', lineno=239, col_offset=8), lineno=239, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=240, col_offset=15), 'file', Load(), lineno=240, col_offset=15), 'readline', Load(), lineno=240, col_offset=15), [], [], None, None, lineno=240, col_offset=15), lineno=240, col_offset=8)], [], lineno=238, col_offset=4), FunctionDef('send', arguments([Name('self', Param(), lineno=243, col_offset=13), Name('data', Param(), lineno=243, col_offset=19)], None, None, []), [Expr(Str('Send data to remote.', lineno=244, col_offset=8), lineno=244, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=245, col_offset=8), 'sock', Load(), lineno=245, col_offset=8), 'sendall', Load(), lineno=245, col_offset=8), [Name('data', Load(), lineno=245, col_offset=26)], [], None, None, lineno=245, col_offset=8), lineno=245, col_offset=8)], [], lineno=243, col_offset=4), FunctionDef('shutdown', arguments([Name('self', Param(), lineno=248, col_offset=17)], None, None, []), [Expr(Str('Close I/O established in "open".', lineno=249, col_offset=8), lineno=249, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=250, col_offset=8), 'file', Load(), lineno=250, col_offset=8), 'close', Load(), lineno=250, col_offset=8), [], [], None, None, lineno=250, col_offset=8), lineno=250, col_offset=8), TryFinally([TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=252, col_offset=12), 'sock', Load(), lineno=252, col_offset=12), 'shutdown', Load(), lineno=252, col_offset=12), [Attribute(Name('socket', Load(), lineno=252, col_offset=31), 'SHUT_RDWR', Load(), lineno=252, col_offset=31)], [], None, None, lineno=252, col_offset=12), lineno=252, col_offset=12)], [ExceptHandler(Attribute(Name('socket', Load(), lineno=253, col_offset=15), 'error', Load(), lineno=253, col_offset=15), Name('e', Store(), lineno=253, col_offset=31), [If(Compare(Attribute(Name('e', Load(), lineno=255, col_offset=15), 'errno', Load(), lineno=255, col_offset=15), [NotEq()], [Attribute(Name('errno', Load(), lineno=255, col_offset=26), 'ENOTCONN', Load(), lineno=255, col_offset=26)], lineno=255, col_offset=15), [Raise(None, None, None, lineno=256, col_offset=16)], [], lineno=255, col_offset=12)], lineno=253, col_offset=8)], [], lineno=251, col_offset=8)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=258, col_offset=12), 'sock', Load(), lineno=258, col_offset=12), 'close', Load(), lineno=258, col_offset=12), [], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=12)], lineno=251, col_offset=8)], [], lineno=248, col_offset=4), FunctionDef('socket', arguments([Name('self', Param(), lineno=261, col_offset=15)], None, None, []), [Expr(Str('Return socket instance used to connect to IMAP4 server.\n\n        socket = <instance>.socket()\n        ', lineno=265, col_offset=-1), lineno=265, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=266, col_offset=15), 'sock', Load(), lineno=266, col_offset=15), lineno=266, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('recent', arguments([Name('self', Param(), lineno=273, col_offset=15)], None, None, []), [Expr(Str("Return most recent 'RECENT' responses if any exist,\n        else prompt server for an update using the 'NOOP' command.\n\n        (typ, [data]) = <instance>.recent()\n\n        'data' is None if no new messages,\n        else list of RECENT responses, most recent last.\n        ", lineno=281, col_offset=-1), lineno=281, col_offset=-1), Assign([Name('name', Store(), lineno=282, col_offset=8)], Str('RECENT', lineno=282, col_offset=15), lineno=282, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=283, col_offset=8), Name('dat', Store(), lineno=283, col_offset=13)], Store(), lineno=283, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=283, col_offset=19), '_untagged_response', Load(), lineno=283, col_offset=19), [Str('OK', lineno=283, col_offset=43), List([Name('None', Load(), lineno=283, col_offset=50)], Load(), lineno=283, col_offset=49), Name('name', Load(), lineno=283, col_offset=57)], [], None, None, lineno=283, col_offset=19), lineno=283, col_offset=8), If(Subscript(Name('dat', Load(), lineno=284, col_offset=11), Index(Num(-1, lineno=284, col_offset=16)), Load(), lineno=284, col_offset=11), [Return(Tuple([Name('typ', Load(), lineno=285, col_offset=19), Name('dat', Load(), lineno=285, col_offset=24)], Load(), lineno=285, col_offset=19), lineno=285, col_offset=12)], [], lineno=284, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=286, col_offset=8), Name('dat', Store(), lineno=286, col_offset=13)], Store(), lineno=286, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=286, col_offset=19), 'noop', Load(), lineno=286, col_offset=19), [], [], None, None, lineno=286, col_offset=19), lineno=286, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=287, col_offset=15), '_untagged_response', Load(), lineno=287, col_offset=15), [Name('typ', Load(), lineno=287, col_offset=39), Name('dat', Load(), lineno=287, col_offset=44), Name('name', Load(), lineno=287, col_offset=49)], [], None, None, lineno=287, col_offset=15), lineno=287, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('response', arguments([Name('self', Param(), lineno=290, col_offset=17), Name('code', Param(), lineno=290, col_offset=23)], None, None, []), [Expr(Str("Return data for response 'code' if received, or None.\n\n        Old value for response 'code' is cleared.\n\n        (code, [data]) = <instance>.response(code)\n        ", lineno=296, col_offset=-1), lineno=296, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=297, col_offset=15), '_untagged_response', Load(), lineno=297, col_offset=15), [Name('code', Load(), lineno=297, col_offset=39), List([Name('None', Load(), lineno=297, col_offset=46)], Load(), lineno=297, col_offset=45), Call(Attribute(Name('code', Load(), lineno=297, col_offset=53), 'upper', Load(), lineno=297, col_offset=53), [], [], None, None, lineno=297, col_offset=53)], [], None, None, lineno=297, col_offset=15), lineno=297, col_offset=8)], [], lineno=290, col_offset=4), FunctionDef('append', arguments([Name('self', Param(), lineno=304, col_offset=15), Name('mailbox', Param(), lineno=304, col_offset=21), Name('flags', Param(), lineno=304, col_offset=30), Name('date_time', Param(), lineno=304, col_offset=37), Name('message', Param(), lineno=304, col_offset=48)], None, None, []), [Expr(Str("Append message to named mailbox.\n\n        (typ, [data]) = <instance>.append(mailbox, flags, date_time, message)\n\n                All args except `message' can be None.\n        ", lineno=310, col_offset=-1), lineno=310, col_offset=-1), Assign([Name('name', Store(), lineno=311, col_offset=8)], Str('APPEND', lineno=311, col_offset=15), lineno=311, col_offset=8), If(UnaryOp(Not(), Name('mailbox', Load(), lineno=312, col_offset=15), lineno=312, col_offset=11), [Assign([Name('mailbox', Store(), lineno=313, col_offset=12)], Str('INBOX', lineno=313, col_offset=22), lineno=313, col_offset=12)], [], lineno=312, col_offset=8), If(Name('flags', Load(), lineno=314, col_offset=11), [If(Compare(Tuple([Subscript(Name('flags', Load(), lineno=315, col_offset=16), Index(Num(0, lineno=315, col_offset=22)), Load(), lineno=315, col_offset=16), Subscript(Name('flags', Load(), lineno=315, col_offset=25), Index(Num(-1, lineno=315, col_offset=32)), Load(), lineno=315, col_offset=25)], Load(), lineno=315, col_offset=16), [NotEq()], [Tuple([Str('(', lineno=315, col_offset=40), Str(')', lineno=315, col_offset=44)], Load(), lineno=315, col_offset=40)], lineno=315, col_offset=15), [Assign([Name('flags', Store(), lineno=316, col_offset=16)], BinOp(Str('(%s)', lineno=316, col_offset=24), Mod(), Name('flags', Load(), lineno=316, col_offset=33), lineno=316, col_offset=24), lineno=316, col_offset=16)], [], lineno=315, col_offset=12)], [Assign([Name('flags', Store(), lineno=318, col_offset=12)], Name('None', Load(), lineno=318, col_offset=20), lineno=318, col_offset=12)], lineno=314, col_offset=8), If(Name('date_time', Load(), lineno=319, col_offset=11), [Assign([Name('date_time', Store(), lineno=320, col_offset=12)], Call(Name('Time2Internaldate', Load(), lineno=320, col_offset=24), [Name('date_time', Load(), lineno=320, col_offset=42)], [], None, None, lineno=320, col_offset=24), lineno=320, col_offset=12)], [Assign([Name('date_time', Store(), lineno=322, col_offset=12)], Name('None', Load(), lineno=322, col_offset=24), lineno=322, col_offset=12)], lineno=319, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=323, col_offset=8), 'literal', Store(), lineno=323, col_offset=8)], Call(Attribute(Name('MapCRLF', Load(), lineno=323, col_offset=23), 'sub', Load(), lineno=323, col_offset=23), [Name('CRLF', Load(), lineno=323, col_offset=35), Name('message', Load(), lineno=323, col_offset=41)], [], None, None, lineno=323, col_offset=23), lineno=323, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=324, col_offset=15), '_simple_command', Load(), lineno=324, col_offset=15), [Name('name', Load(), lineno=324, col_offset=36), Name('mailbox', Load(), lineno=324, col_offset=42), Name('flags', Load(), lineno=324, col_offset=51), Name('date_time', Load(), lineno=324, col_offset=58)], [], None, None, lineno=324, col_offset=15), lineno=324, col_offset=8)], [], lineno=304, col_offset=4), FunctionDef('authenticate', arguments([Name('self', Param(), lineno=327, col_offset=21), Name('mechanism', Param(), lineno=327, col_offset=27), Name('authobject', Param(), lineno=327, col_offset=38)], None, None, []), [Expr(Str("Authenticate command - requires response processing.\n\n        'mechanism' specifies which authentication mechanism is to\n        be used - it must appear in <instance>.capabilities in the\n        form AUTH=<mechanism>.\n\n        'authobject' must be a callable object:\n\n                data = authobject(response)\n\n        It will be called to process server continuation responses.\n        It should return data that will be encoded and sent to server.\n        It should return None if the client abort response '*' should\n        be sent instead.\n        ", lineno=342, col_offset=-1), lineno=342, col_offset=-1), Assign([Name('mech', Store(), lineno=343, col_offset=8)], Call(Attribute(Name('mechanism', Load(), lineno=343, col_offset=15), 'upper', Load(), lineno=343, col_offset=15), [], [], None, None, lineno=343, col_offset=15), lineno=343, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=348, col_offset=8), 'literal', Store(), lineno=348, col_offset=8)], Attribute(Call(Name('_Authenticator', Load(), lineno=348, col_offset=23), [Name('authobject', Load(), lineno=348, col_offset=38)], [], None, None, lineno=348, col_offset=23), 'process', Load(), lineno=348, col_offset=23), lineno=348, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=349, col_offset=8), Name('dat', Store(), lineno=349, col_offset=13)], Store(), lineno=349, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=349, col_offset=19), '_simple_command', Load(), lineno=349, col_offset=19), [Str('AUTHENTICATE', lineno=349, col_offset=40), Name('mech', Load(), lineno=349, col_offset=56)], [], None, None, lineno=349, col_offset=19), lineno=349, col_offset=8), If(Compare(Name('typ', Load(), lineno=350, col_offset=11), [NotEq()], [Str('OK', lineno=350, col_offset=18)], lineno=350, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=351, col_offset=18), 'error', Load(), lineno=351, col_offset=18), [Subscript(Name('dat', Load(), lineno=351, col_offset=29), Index(Num(-1, lineno=351, col_offset=34)), Load(), lineno=351, col_offset=29)], [], None, None, lineno=351, col_offset=18), None, None, lineno=351, col_offset=12)], [], lineno=350, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=352, col_offset=8), 'state', Store(), lineno=352, col_offset=8)], Str('AUTH', lineno=352, col_offset=21), lineno=352, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=353, col_offset=15), Name('dat', Load(), lineno=353, col_offset=20)], Load(), lineno=353, col_offset=15), lineno=353, col_offset=8)], [], lineno=327, col_offset=4), FunctionDef('capability', arguments([Name('self', Param(), lineno=356, col_offset=19)], None, None, []), [Expr(Str('(typ, [data]) = <instance>.capability()\n        Fetch capabilities list from server.', lineno=358, col_offset=-1), lineno=358, col_offset=-1), Assign([Name('name', Store(), lineno=360, col_offset=8)], Str('CAPABILITY', lineno=360, col_offset=15), lineno=360, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=361, col_offset=8), Name('dat', Store(), lineno=361, col_offset=13)], Store(), lineno=361, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=361, col_offset=19), '_simple_command', Load(), lineno=361, col_offset=19), [Name('name', Load(), lineno=361, col_offset=40)], [], None, None, lineno=361, col_offset=19), lineno=361, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=362, col_offset=15), '_untagged_response', Load(), lineno=362, col_offset=15), [Name('typ', Load(), lineno=362, col_offset=39), Name('dat', Load(), lineno=362, col_offset=44), Name('name', Load(), lineno=362, col_offset=49)], [], None, None, lineno=362, col_offset=15), lineno=362, col_offset=8)], [], lineno=356, col_offset=4), FunctionDef('check', arguments([Name('self', Param(), lineno=365, col_offset=14)], None, None, []), [Expr(Str('Checkpoint mailbox on server.\n\n        (typ, [data]) = <instance>.check()\n        ', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=370, col_offset=15), '_simple_command', Load(), lineno=370, col_offset=15), [Str('CHECK', lineno=370, col_offset=36)], [], None, None, lineno=370, col_offset=15), lineno=370, col_offset=8)], [], lineno=365, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=373, col_offset=14)], None, None, []), [Expr(Str("Close currently selected mailbox.\n\n        Deleted messages are removed from writable mailbox.\n        This is the recommended command before 'LOGOUT'.\n\n        (typ, [data]) = <instance>.close()\n        ", lineno=380, col_offset=-1), lineno=380, col_offset=-1), TryFinally([Assign([Tuple([Name('typ', Store(), lineno=382, col_offset=12), Name('dat', Store(), lineno=382, col_offset=17)], Store(), lineno=382, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=382, col_offset=23), '_simple_command', Load(), lineno=382, col_offset=23), [Str('CLOSE', lineno=382, col_offset=44)], [], None, None, lineno=382, col_offset=23), lineno=382, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=384, col_offset=12), 'state', Store(), lineno=384, col_offset=12)], Str('AUTH', lineno=384, col_offset=25), lineno=384, col_offset=12)], lineno=381, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=385, col_offset=15), Name('dat', Load(), lineno=385, col_offset=20)], Load(), lineno=385, col_offset=15), lineno=385, col_offset=8)], [], lineno=373, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=388, col_offset=13), Name('message_set', Param(), lineno=388, col_offset=19), Name('new_mailbox', Param(), lineno=388, col_offset=32)], None, None, []), [Expr(Str("Copy 'message_set' messages onto end of 'new_mailbox'.\n\n        (typ, [data]) = <instance>.copy(message_set, new_mailbox)\n        ", lineno=392, col_offset=-1), lineno=392, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=393, col_offset=15), '_simple_command', Load(), lineno=393, col_offset=15), [Str('COPY', lineno=393, col_offset=36), Name('message_set', Load(), lineno=393, col_offset=44), Name('new_mailbox', Load(), lineno=393, col_offset=57)], [], None, None, lineno=393, col_offset=15), lineno=393, col_offset=8)], [], lineno=388, col_offset=4), FunctionDef('create', arguments([Name('self', Param(), lineno=396, col_offset=15), Name('mailbox', Param(), lineno=396, col_offset=21)], None, None, []), [Expr(Str('Create new mailbox.\n\n        (typ, [data]) = <instance>.create(mailbox)\n        ', lineno=400, col_offset=-1), lineno=400, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=401, col_offset=15), '_simple_command', Load(), lineno=401, col_offset=15), [Str('CREATE', lineno=401, col_offset=36), Name('mailbox', Load(), lineno=401, col_offset=46)], [], None, None, lineno=401, col_offset=15), lineno=401, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=404, col_offset=15), Name('mailbox', Param(), lineno=404, col_offset=21)], None, None, []), [Expr(Str('Delete old mailbox.\n\n        (typ, [data]) = <instance>.delete(mailbox)\n        ', lineno=408, col_offset=-1), lineno=408, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=409, col_offset=15), '_simple_command', Load(), lineno=409, col_offset=15), [Str('DELETE', lineno=409, col_offset=36), Name('mailbox', Load(), lineno=409, col_offset=46)], [], None, None, lineno=409, col_offset=15), lineno=409, col_offset=8)], [], lineno=404, col_offset=4), FunctionDef('deleteacl', arguments([Name('self', Param(), lineno=411, col_offset=18), Name('mailbox', Param(), lineno=411, col_offset=24), Name('who', Param(), lineno=411, col_offset=33)], None, None, []), [Expr(Str('Delete the ACLs (remove any rights) set for who on mailbox.\n\n        (typ, [data]) = <instance>.deleteacl(mailbox, who)\n        ', lineno=415, col_offset=-1), lineno=415, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=416, col_offset=15), '_simple_command', Load(), lineno=416, col_offset=15), [Str('DELETEACL', lineno=416, col_offset=36), Name('mailbox', Load(), lineno=416, col_offset=49), Name('who', Load(), lineno=416, col_offset=58)], [], None, None, lineno=416, col_offset=15), lineno=416, col_offset=8)], [], lineno=411, col_offset=4), FunctionDef('expunge', arguments([Name('self', Param(), lineno=418, col_offset=16)], None, None, []), [Expr(Str("Permanently remove deleted items from selected mailbox.\n\n        Generates 'EXPUNGE' response for each deleted message.\n\n        (typ, [data]) = <instance>.expunge()\n\n        'data' is list of 'EXPUNGE'd message numbers in order received.\n        ", lineno=426, col_offset=-1), lineno=426, col_offset=-1), Assign([Name('name', Store(), lineno=427, col_offset=8)], Str('EXPUNGE', lineno=427, col_offset=15), lineno=427, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=428, col_offset=8), Name('dat', Store(), lineno=428, col_offset=13)], Store(), lineno=428, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=428, col_offset=19), '_simple_command', Load(), lineno=428, col_offset=19), [Name('name', Load(), lineno=428, col_offset=40)], [], None, None, lineno=428, col_offset=19), lineno=428, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=429, col_offset=15), '_untagged_response', Load(), lineno=429, col_offset=15), [Name('typ', Load(), lineno=429, col_offset=39), Name('dat', Load(), lineno=429, col_offset=44), Name('name', Load(), lineno=429, col_offset=49)], [], None, None, lineno=429, col_offset=15), lineno=429, col_offset=8)], [], lineno=418, col_offset=4), FunctionDef('fetch', arguments([Name('self', Param(), lineno=432, col_offset=14), Name('message_set', Param(), lineno=432, col_offset=20), Name('message_parts', Param(), lineno=432, col_offset=33)], None, None, []), [Expr(Str('Fetch (parts of) messages.\n\n        (typ, [data, ...]) = <instance>.fetch(message_set, message_parts)\n\n        \'message_parts\' should be a string of selected parts\n        enclosed in parentheses, eg: "(UID BODY[TEXT])".\n\n        \'data\' are tuples of message part envelope and data.\n        ', lineno=441, col_offset=-1), lineno=441, col_offset=-1), Assign([Name('name', Store(), lineno=442, col_offset=8)], Str('FETCH', lineno=442, col_offset=15), lineno=442, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=443, col_offset=8), Name('dat', Store(), lineno=443, col_offset=13)], Store(), lineno=443, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=443, col_offset=19), '_simple_command', Load(), lineno=443, col_offset=19), [Name('name', Load(), lineno=443, col_offset=40), Name('message_set', Load(), lineno=443, col_offset=46), Name('message_parts', Load(), lineno=443, col_offset=59)], [], None, None, lineno=443, col_offset=19), lineno=443, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=444, col_offset=15), '_untagged_response', Load(), lineno=444, col_offset=15), [Name('typ', Load(), lineno=444, col_offset=39), Name('dat', Load(), lineno=444, col_offset=44), Name('name', Load(), lineno=444, col_offset=49)], [], None, None, lineno=444, col_offset=15), lineno=444, col_offset=8)], [], lineno=432, col_offset=4), FunctionDef('getacl', arguments([Name('self', Param(), lineno=447, col_offset=15), Name('mailbox', Param(), lineno=447, col_offset=21)], None, None, []), [Expr(Str('Get the ACLs for a mailbox.\n\n        (typ, [data]) = <instance>.getacl(mailbox)\n        ', lineno=451, col_offset=-1), lineno=451, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=452, col_offset=8), Name('dat', Store(), lineno=452, col_offset=13)], Store(), lineno=452, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=452, col_offset=19), '_simple_command', Load(), lineno=452, col_offset=19), [Str('GETACL', lineno=452, col_offset=40), Name('mailbox', Load(), lineno=452, col_offset=50)], [], None, None, lineno=452, col_offset=19), lineno=452, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=453, col_offset=15), '_untagged_response', Load(), lineno=453, col_offset=15), [Name('typ', Load(), lineno=453, col_offset=39), Name('dat', Load(), lineno=453, col_offset=44), Str('ACL', lineno=453, col_offset=49)], [], None, None, lineno=453, col_offset=15), lineno=453, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('getannotation', arguments([Name('self', Param(), lineno=456, col_offset=22), Name('mailbox', Param(), lineno=456, col_offset=28), Name('entry', Param(), lineno=456, col_offset=37), Name('attribute', Param(), lineno=456, col_offset=44)], None, None, []), [Expr(Str('(typ, [data]) = <instance>.getannotation(mailbox, entry, attribute)\n        Retrieve ANNOTATIONs.', lineno=458, col_offset=-1), lineno=458, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=460, col_offset=8), Name('dat', Store(), lineno=460, col_offset=13)], Store(), lineno=460, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=460, col_offset=19), '_simple_command', Load(), lineno=460, col_offset=19), [Str('GETANNOTATION', lineno=460, col_offset=40), Name('mailbox', Load(), lineno=460, col_offset=57), Name('entry', Load(), lineno=460, col_offset=66), Name('attribute', Load(), lineno=460, col_offset=73)], [], None, None, lineno=460, col_offset=19), lineno=460, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=461, col_offset=15), '_untagged_response', Load(), lineno=461, col_offset=15), [Name('typ', Load(), lineno=461, col_offset=39), Name('dat', Load(), lineno=461, col_offset=44), Str('ANNOTATION', lineno=461, col_offset=49)], [], None, None, lineno=461, col_offset=15), lineno=461, col_offset=8)], [], lineno=456, col_offset=4), FunctionDef('getquota', arguments([Name('self', Param(), lineno=464, col_offset=17), Name('root', Param(), lineno=464, col_offset=23)], None, None, []), [Expr(Str("Get the quota root's resource usage and limits.\n\n        Part of the IMAP4 QUOTA extension defined in rfc2087.\n\n        (typ, [data]) = <instance>.getquota(root)\n        ", lineno=470, col_offset=-1), lineno=470, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=471, col_offset=8), Name('dat', Store(), lineno=471, col_offset=13)], Store(), lineno=471, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=471, col_offset=19), '_simple_command', Load(), lineno=471, col_offset=19), [Str('GETQUOTA', lineno=471, col_offset=40), Name('root', Load(), lineno=471, col_offset=52)], [], None, None, lineno=471, col_offset=19), lineno=471, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=472, col_offset=15), '_untagged_response', Load(), lineno=472, col_offset=15), [Name('typ', Load(), lineno=472, col_offset=39), Name('dat', Load(), lineno=472, col_offset=44), Str('QUOTA', lineno=472, col_offset=49)], [], None, None, lineno=472, col_offset=15), lineno=472, col_offset=8)], [], lineno=464, col_offset=4), FunctionDef('getquotaroot', arguments([Name('self', Param(), lineno=475, col_offset=21), Name('mailbox', Param(), lineno=475, col_offset=27)], None, None, []), [Expr(Str('Get the list of quota roots for the named mailbox.\n\n        (typ, [[QUOTAROOT responses...], [QUOTA responses]]) = <instance>.getquotaroot(mailbox)\n        ', lineno=479, col_offset=-1), lineno=479, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=480, col_offset=8), Name('dat', Store(), lineno=480, col_offset=13)], Store(), lineno=480, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=480, col_offset=19), '_simple_command', Load(), lineno=480, col_offset=19), [Str('GETQUOTAROOT', lineno=480, col_offset=40), Name('mailbox', Load(), lineno=480, col_offset=56)], [], None, None, lineno=480, col_offset=19), lineno=480, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=481, col_offset=8), Name('quota', Store(), lineno=481, col_offset=13)], Store(), lineno=481, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=481, col_offset=21), '_untagged_response', Load(), lineno=481, col_offset=21), [Name('typ', Load(), lineno=481, col_offset=45), Name('dat', Load(), lineno=481, col_offset=50), Str('QUOTA', lineno=481, col_offset=55)], [], None, None, lineno=481, col_offset=21), lineno=481, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=482, col_offset=8), Name('quotaroot', Store(), lineno=482, col_offset=13)], Store(), lineno=482, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=482, col_offset=25), '_untagged_response', Load(), lineno=482, col_offset=25), [Name('typ', Load(), lineno=482, col_offset=49), Name('dat', Load(), lineno=482, col_offset=54), Str('QUOTAROOT', lineno=482, col_offset=59)], [], None, None, lineno=482, col_offset=25), lineno=482, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=483, col_offset=15), List([Name('quotaroot', Load(), lineno=483, col_offset=21), Name('quota', Load(), lineno=483, col_offset=32)], Load(), lineno=483, col_offset=20)], Load(), lineno=483, col_offset=15), lineno=483, col_offset=8)], [], lineno=475, col_offset=4), FunctionDef('list', arguments([Name('self', Param(), lineno=486, col_offset=13), Name('directory', Param(), lineno=486, col_offset=19), Name('pattern', Param(), lineno=486, col_offset=35)], None, None, [Str('""', lineno=486, col_offset=29), Str('*', lineno=486, col_offset=43)]), [Expr(Str('List mailbox names in directory matching pattern.\n\n        (typ, [data]) = <instance>.list(directory=\'""\', pattern=\'*\')\n\n        \'data\' is list of LIST responses.\n        ', lineno=492, col_offset=-1), lineno=492, col_offset=-1), Assign([Name('name', Store(), lineno=493, col_offset=8)], Str('LIST', lineno=493, col_offset=15), lineno=493, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=494, col_offset=8), Name('dat', Store(), lineno=494, col_offset=13)], Store(), lineno=494, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=494, col_offset=19), '_simple_command', Load(), lineno=494, col_offset=19), [Name('name', Load(), lineno=494, col_offset=40), Name('directory', Load(), lineno=494, col_offset=46), Name('pattern', Load(), lineno=494, col_offset=57)], [], None, None, lineno=494, col_offset=19), lineno=494, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=495, col_offset=15), '_untagged_response', Load(), lineno=495, col_offset=15), [Name('typ', Load(), lineno=495, col_offset=39), Name('dat', Load(), lineno=495, col_offset=44), Name('name', Load(), lineno=495, col_offset=49)], [], None, None, lineno=495, col_offset=15), lineno=495, col_offset=8)], [], lineno=486, col_offset=4), FunctionDef('login', arguments([Name('self', Param(), lineno=498, col_offset=14), Name('user', Param(), lineno=498, col_offset=20), Name('password', Param(), lineno=498, col_offset=26)], None, None, []), [Expr(Str("Identify client using plaintext password.\n\n        (typ, [data]) = <instance>.login(user, password)\n\n        NB: 'password' will be quoted.\n        ", lineno=504, col_offset=-1), lineno=504, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=505, col_offset=8), Name('dat', Store(), lineno=505, col_offset=13)], Store(), lineno=505, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=505, col_offset=19), '_simple_command', Load(), lineno=505, col_offset=19), [Str('LOGIN', lineno=505, col_offset=40), Name('user', Load(), lineno=505, col_offset=49), Call(Attribute(Name('self', Load(), lineno=505, col_offset=55), '_quote', Load(), lineno=505, col_offset=55), [Name('password', Load(), lineno=505, col_offset=67)], [], None, None, lineno=505, col_offset=55)], [], None, None, lineno=505, col_offset=19), lineno=505, col_offset=8), If(Compare(Name('typ', Load(), lineno=506, col_offset=11), [NotEq()], [Str('OK', lineno=506, col_offset=18)], lineno=506, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=507, col_offset=18), 'error', Load(), lineno=507, col_offset=18), [Subscript(Name('dat', Load(), lineno=507, col_offset=29), Index(Num(-1, lineno=507, col_offset=34)), Load(), lineno=507, col_offset=29)], [], None, None, lineno=507, col_offset=18), None, None, lineno=507, col_offset=12)], [], lineno=506, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=508, col_offset=8), 'state', Store(), lineno=508, col_offset=8)], Str('AUTH', lineno=508, col_offset=21), lineno=508, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=509, col_offset=15), Name('dat', Load(), lineno=509, col_offset=20)], Load(), lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=498, col_offset=4), FunctionDef('login_cram_md5', arguments([Name('self', Param(), lineno=512, col_offset=23), Name('user', Param(), lineno=512, col_offset=29), Name('password', Param(), lineno=512, col_offset=35)], None, None, []), [Expr(Str(' Force use of CRAM-MD5 authentication.\n\n        (typ, [data]) = <instance>.login_cram_md5(user, password)\n        ', lineno=516, col_offset=-1), lineno=516, col_offset=-1), Assign([Tuple([Attribute(Name('self', Load(), lineno=517, col_offset=8), 'user', Store(), lineno=517, col_offset=8), Attribute(Name('self', Load(), lineno=517, col_offset=19), 'password', Store(), lineno=517, col_offset=19)], Store(), lineno=517, col_offset=8)], Tuple([Name('user', Load(), lineno=517, col_offset=35), Name('password', Load(), lineno=517, col_offset=41)], Load(), lineno=517, col_offset=35), lineno=517, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=518, col_offset=15), 'authenticate', Load(), lineno=518, col_offset=15), [Str('CRAM-MD5', lineno=518, col_offset=33), Attribute(Name('self', Load(), lineno=518, col_offset=45), '_CRAM_MD5_AUTH', Load(), lineno=518, col_offset=45)], [], None, None, lineno=518, col_offset=15), lineno=518, col_offset=8)], [], lineno=512, col_offset=4), FunctionDef('_CRAM_MD5_AUTH', arguments([Name('self', Param(), lineno=521, col_offset=23), Name('challenge', Param(), lineno=521, col_offset=29)], None, None, []), [Expr(Str(' Authobject to use with CRAM-MD5 authentication. ', lineno=522, col_offset=8), lineno=522, col_offset=8), Import([alias('hmac', None)], lineno=523, col_offset=8), Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=524, col_offset=15), 'user', Load(), lineno=524, col_offset=15), Add(), Str(' ', lineno=524, col_offset=27), lineno=524, col_offset=15), Add(), Call(Attribute(Call(Attribute(Name('hmac', Load(), lineno=524, col_offset=33), 'HMAC', Load(), lineno=524, col_offset=33), [Attribute(Name('self', Load(), lineno=524, col_offset=43), 'password', Load(), lineno=524, col_offset=43), Name('challenge', Load(), lineno=524, col_offset=58)], [], None, None, lineno=524, col_offset=33), 'hexdigest', Load(), lineno=524, col_offset=33), [], [], None, None, lineno=524, col_offset=33), lineno=524, col_offset=31), lineno=524, col_offset=8)], [], lineno=521, col_offset=4), FunctionDef('logout', arguments([Name('self', Param(), lineno=527, col_offset=15)], None, None, []), [Expr(Str("Shutdown connection to server.\n\n        (typ, [data]) = <instance>.logout()\n\n        Returns server 'BYE' response.\n        ", lineno=533, col_offset=-1), lineno=533, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=534, col_offset=8), 'state', Store(), lineno=534, col_offset=8)], Str('LOGOUT', lineno=534, col_offset=21), lineno=534, col_offset=8), TryExcept([Assign([Tuple([Name('typ', Store(), lineno=535, col_offset=13), Name('dat', Store(), lineno=535, col_offset=18)], Store(), lineno=535, col_offset=13)], Call(Attribute(Name('self', Load(), lineno=535, col_offset=24), '_simple_command', Load(), lineno=535, col_offset=24), [Str('LOGOUT', lineno=535, col_offset=45)], [], None, None, lineno=535, col_offset=24), lineno=535, col_offset=13)], [ExceptHandler(None, None, [Assign([Tuple([Name('typ', Store(), lineno=536, col_offset=16), Name('dat', Store(), lineno=536, col_offset=21)], Store(), lineno=536, col_offset=16)], Tuple([Str('NO', lineno=536, col_offset=27), List([BinOp(Str('%s: %s', lineno=536, col_offset=34), Mod(), Subscript(Call(Attribute(Name('sys', Load(), lineno=536, col_offset=45), 'exc_info', Load(), lineno=536, col_offset=45), [], [], None, None, lineno=536, col_offset=45), Slice(None, Num(2, lineno=536, col_offset=61), None), Load(), lineno=536, col_offset=45), lineno=536, col_offset=34)], Load(), lineno=536, col_offset=33)], Load(), lineno=536, col_offset=27), lineno=536, col_offset=16)], lineno=536, col_offset=8)], [], lineno=535, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=537, col_offset=8), 'shutdown', Load(), lineno=537, col_offset=8), [], [], None, None, lineno=537, col_offset=8), lineno=537, col_offset=8), If(Compare(Str('BYE', lineno=538, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=538, col_offset=20), 'untagged_responses', Load(), lineno=538, col_offset=20)], lineno=538, col_offset=11), [Return(Tuple([Str('BYE', lineno=539, col_offset=19), Subscript(Attribute(Name('self', Load(), lineno=539, col_offset=26), 'untagged_responses', Load(), lineno=539, col_offset=26), Index(Str('BYE', lineno=539, col_offset=50)), Load(), lineno=539, col_offset=26)], Load(), lineno=539, col_offset=19), lineno=539, col_offset=12)], [], lineno=538, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=540, col_offset=15), Name('dat', Load(), lineno=540, col_offset=20)], Load(), lineno=540, col_offset=15), lineno=540, col_offset=8)], [], lineno=527, col_offset=4), FunctionDef('lsub', arguments([Name('self', Param(), lineno=543, col_offset=13), Name('directory', Param(), lineno=543, col_offset=19), Name('pattern', Param(), lineno=543, col_offset=35)], None, None, [Str('""', lineno=543, col_offset=29), Str('*', lineno=543, col_offset=43)]), [Expr(Str('List \'subscribed\' mailbox names in directory matching pattern.\n\n        (typ, [data, ...]) = <instance>.lsub(directory=\'""\', pattern=\'*\')\n\n        \'data\' are tuples of message part envelope and data.\n        ', lineno=549, col_offset=-1), lineno=549, col_offset=-1), Assign([Name('name', Store(), lineno=550, col_offset=8)], Str('LSUB', lineno=550, col_offset=15), lineno=550, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=551, col_offset=8), Name('dat', Store(), lineno=551, col_offset=13)], Store(), lineno=551, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=551, col_offset=19), '_simple_command', Load(), lineno=551, col_offset=19), [Name('name', Load(), lineno=551, col_offset=40), Name('directory', Load(), lineno=551, col_offset=46), Name('pattern', Load(), lineno=551, col_offset=57)], [], None, None, lineno=551, col_offset=19), lineno=551, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=552, col_offset=15), '_untagged_response', Load(), lineno=552, col_offset=15), [Name('typ', Load(), lineno=552, col_offset=39), Name('dat', Load(), lineno=552, col_offset=44), Name('name', Load(), lineno=552, col_offset=49)], [], None, None, lineno=552, col_offset=15), lineno=552, col_offset=8)], [], lineno=543, col_offset=4), FunctionDef('myrights', arguments([Name('self', Param(), lineno=554, col_offset=17), Name('mailbox', Param(), lineno=554, col_offset=23)], None, None, []), [Expr(Str('Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).\n\n        (typ, [data]) = <instance>.myrights(mailbox)\n        ', lineno=558, col_offset=-1), lineno=558, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=559, col_offset=8), Name('dat', Store(), lineno=559, col_offset=12)], Store(), lineno=559, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=559, col_offset=18), '_simple_command', Load(), lineno=559, col_offset=18), [Str('MYRIGHTS', lineno=559, col_offset=39), Name('mailbox', Load(), lineno=559, col_offset=51)], [], None, None, lineno=559, col_offset=18), lineno=559, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=560, col_offset=15), '_untagged_response', Load(), lineno=560, col_offset=15), [Name('typ', Load(), lineno=560, col_offset=39), Name('dat', Load(), lineno=560, col_offset=44), Str('MYRIGHTS', lineno=560, col_offset=49)], [], None, None, lineno=560, col_offset=15), lineno=560, col_offset=8)], [], lineno=554, col_offset=4), FunctionDef('namespace', arguments([Name('self', Param(), lineno=562, col_offset=18)], None, None, []), [Expr(Str(' Returns IMAP namespaces ala rfc2342\n\n        (typ, [data, ...]) = <instance>.namespace()\n        ', lineno=566, col_offset=-1), lineno=566, col_offset=-1), Assign([Name('name', Store(), lineno=567, col_offset=8)], Str('NAMESPACE', lineno=567, col_offset=15), lineno=567, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=568, col_offset=8), Name('dat', Store(), lineno=568, col_offset=13)], Store(), lineno=568, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=568, col_offset=19), '_simple_command', Load(), lineno=568, col_offset=19), [Name('name', Load(), lineno=568, col_offset=40)], [], None, None, lineno=568, col_offset=19), lineno=568, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=569, col_offset=15), '_untagged_response', Load(), lineno=569, col_offset=15), [Name('typ', Load(), lineno=569, col_offset=39), Name('dat', Load(), lineno=569, col_offset=44), Name('name', Load(), lineno=569, col_offset=49)], [], None, None, lineno=569, col_offset=15), lineno=569, col_offset=8)], [], lineno=562, col_offset=4), FunctionDef('noop', arguments([Name('self', Param(), lineno=572, col_offset=13)], None, None, []), [Expr(Str('Send NOOP command.\n\n        (typ, [data]) = <instance>.noop()\n        ', lineno=576, col_offset=-1), lineno=576, col_offset=-1), If(Name('__debug__', Load(), lineno=577, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=578, col_offset=15), 'debug', Load(), lineno=578, col_offset=15), [GtE()], [Num(3, lineno=578, col_offset=29)], lineno=578, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=579, col_offset=16), '_dump_ur', Load(), lineno=579, col_offset=16), [Attribute(Name('self', Load(), lineno=579, col_offset=30), 'untagged_responses', Load(), lineno=579, col_offset=30)], [], None, None, lineno=579, col_offset=16), lineno=579, col_offset=16)], [], lineno=578, col_offset=12)], [], lineno=577, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=580, col_offset=15), '_simple_command', Load(), lineno=580, col_offset=15), [Str('NOOP', lineno=580, col_offset=36)], [], None, None, lineno=580, col_offset=15), lineno=580, col_offset=8)], [], lineno=572, col_offset=4), FunctionDef('partial', arguments([Name('self', Param(), lineno=583, col_offset=16), Name('message_num', Param(), lineno=583, col_offset=22), Name('message_part', Param(), lineno=583, col_offset=35), Name('start', Param(), lineno=583, col_offset=49), Name('length', Param(), lineno=583, col_offset=56)], None, None, []), [Expr(Str("Fetch truncated part of a message.\n\n        (typ, [data, ...]) = <instance>.partial(message_num, message_part, start, length)\n\n        'data' is tuple of message part envelope and data.\n        ", lineno=589, col_offset=-1), lineno=589, col_offset=-1), Assign([Name('name', Store(), lineno=590, col_offset=8)], Str('PARTIAL', lineno=590, col_offset=15), lineno=590, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=591, col_offset=8), Name('dat', Store(), lineno=591, col_offset=13)], Store(), lineno=591, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=591, col_offset=19), '_simple_command', Load(), lineno=591, col_offset=19), [Name('name', Load(), lineno=591, col_offset=40), Name('message_num', Load(), lineno=591, col_offset=46), Name('message_part', Load(), lineno=591, col_offset=59), Name('start', Load(), lineno=591, col_offset=73), Name('length', Load(), lineno=591, col_offset=80)], [], None, None, lineno=591, col_offset=19), lineno=591, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=592, col_offset=15), '_untagged_response', Load(), lineno=592, col_offset=15), [Name('typ', Load(), lineno=592, col_offset=39), Name('dat', Load(), lineno=592, col_offset=44), Str('FETCH', lineno=592, col_offset=49)], [], None, None, lineno=592, col_offset=15), lineno=592, col_offset=8)], [], lineno=583, col_offset=4), FunctionDef('proxyauth', arguments([Name('self', Param(), lineno=595, col_offset=18), Name('user', Param(), lineno=595, col_offset=24)], None, None, []), [Expr(Str('Assume authentication as "user".\n\n        Allows an authorised administrator to proxy into any user\'s\n        mailbox.\n\n        (typ, [data]) = <instance>.proxyauth(user)\n        ', lineno=602, col_offset=-1), lineno=602, col_offset=-1), Assign([Name('name', Store(), lineno=604, col_offset=8)], Str('PROXYAUTH', lineno=604, col_offset=15), lineno=604, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=605, col_offset=15), '_simple_command', Load(), lineno=605, col_offset=15), [Str('PROXYAUTH', lineno=605, col_offset=36), Name('user', Load(), lineno=605, col_offset=49)], [], None, None, lineno=605, col_offset=15), lineno=605, col_offset=8)], [], lineno=595, col_offset=4), FunctionDef('rename', arguments([Name('self', Param(), lineno=608, col_offset=15), Name('oldmailbox', Param(), lineno=608, col_offset=21), Name('newmailbox', Param(), lineno=608, col_offset=33)], None, None, []), [Expr(Str('Rename old mailbox name to new.\n\n        (typ, [data]) = <instance>.rename(oldmailbox, newmailbox)\n        ', lineno=612, col_offset=-1), lineno=612, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=613, col_offset=15), '_simple_command', Load(), lineno=613, col_offset=15), [Str('RENAME', lineno=613, col_offset=36), Name('oldmailbox', Load(), lineno=613, col_offset=46), Name('newmailbox', Load(), lineno=613, col_offset=58)], [], None, None, lineno=613, col_offset=15), lineno=613, col_offset=8)], [], lineno=608, col_offset=4), FunctionDef('search', arguments([Name('self', Param(), lineno=616, col_offset=15), Name('charset', Param(), lineno=616, col_offset=21)], 'criteria', None, []), [Expr(Str("Search mailbox for matching messages.\n\n        (typ, [data]) = <instance>.search(charset, criterion, ...)\n\n        'data' is space separated list of matching message numbers.\n        ", lineno=622, col_offset=-1), lineno=622, col_offset=-1), Assign([Name('name', Store(), lineno=623, col_offset=8)], Str('SEARCH', lineno=623, col_offset=15), lineno=623, col_offset=8), If(Name('charset', Load(), lineno=624, col_offset=11), [Assign([Tuple([Name('typ', Store(), lineno=625, col_offset=12), Name('dat', Store(), lineno=625, col_offset=17)], Store(), lineno=625, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=625, col_offset=23), '_simple_command', Load(), lineno=625, col_offset=23), [Name('name', Load(), lineno=625, col_offset=44), Str('CHARSET', lineno=625, col_offset=50), Name('charset', Load(), lineno=625, col_offset=61)], [], Name('criteria', Load(), lineno=625, col_offset=71), None, lineno=625, col_offset=23), lineno=625, col_offset=12)], [Assign([Tuple([Name('typ', Store(), lineno=627, col_offset=12), Name('dat', Store(), lineno=627, col_offset=17)], Store(), lineno=627, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=627, col_offset=23), '_simple_command', Load(), lineno=627, col_offset=23), [Name('name', Load(), lineno=627, col_offset=44)], [], Name('criteria', Load(), lineno=627, col_offset=51), None, lineno=627, col_offset=23), lineno=627, col_offset=12)], lineno=624, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=628, col_offset=15), '_untagged_response', Load(), lineno=628, col_offset=15), [Name('typ', Load(), lineno=628, col_offset=39), Name('dat', Load(), lineno=628, col_offset=44), Name('name', Load(), lineno=628, col_offset=49)], [], None, None, lineno=628, col_offset=15), lineno=628, col_offset=8)], [], lineno=616, col_offset=4), FunctionDef('select', arguments([Name('self', Param(), lineno=631, col_offset=15), Name('mailbox', Param(), lineno=631, col_offset=21), Name('readonly', Param(), lineno=631, col_offset=38)], None, None, [Str('INBOX', lineno=631, col_offset=29), Name('False', Load(), lineno=631, col_offset=47)]), [Expr(Str("Select a mailbox.\n\n        Flush all untagged responses.\n\n        (typ, [data]) = <instance>.select(mailbox='INBOX', readonly=False)\n\n        'data' is count of messages in mailbox ('EXISTS' response).\n\n        Mandated responses are ('FLAGS', 'EXISTS', 'RECENT', 'UIDVALIDITY'), so\n        other responses should be obtained via <instance>.response('FLAGS') etc.\n        ", lineno=642, col_offset=-1), lineno=642, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=643, col_offset=8), 'untagged_responses', Store(), lineno=643, col_offset=8)], Dict([], [], lineno=643, col_offset=34), lineno=643, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=644, col_offset=8), 'is_readonly', Store(), lineno=644, col_offset=8)], Name('readonly', Load(), lineno=644, col_offset=27), lineno=644, col_offset=8), If(Name('readonly', Load(), lineno=645, col_offset=11), [Assign([Name('name', Store(), lineno=646, col_offset=12)], Str('EXAMINE', lineno=646, col_offset=19), lineno=646, col_offset=12)], [Assign([Name('name', Store(), lineno=648, col_offset=12)], Str('SELECT', lineno=648, col_offset=19), lineno=648, col_offset=12)], lineno=645, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=649, col_offset=8), Name('dat', Store(), lineno=649, col_offset=13)], Store(), lineno=649, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=649, col_offset=19), '_simple_command', Load(), lineno=649, col_offset=19), [Name('name', Load(), lineno=649, col_offset=40), Name('mailbox', Load(), lineno=649, col_offset=46)], [], None, None, lineno=649, col_offset=19), lineno=649, col_offset=8), If(Compare(Name('typ', Load(), lineno=650, col_offset=11), [NotEq()], [Str('OK', lineno=650, col_offset=18)], lineno=650, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=651, col_offset=12), 'state', Store(), lineno=651, col_offset=12)], Str('AUTH', lineno=651, col_offset=25), lineno=651, col_offset=12), Return(Tuple([Name('typ', Load(), lineno=652, col_offset=19), Name('dat', Load(), lineno=652, col_offset=24)], Load(), lineno=652, col_offset=19), lineno=652, col_offset=12)], [], lineno=650, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=653, col_offset=8), 'state', Store(), lineno=653, col_offset=8)], Str('SELECTED', lineno=653, col_offset=21), lineno=653, col_offset=8), If(BoolOp(And(), [Compare(Str('READ-ONLY', lineno=654, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=654, col_offset=26), 'untagged_responses', Load(), lineno=654, col_offset=26)], lineno=654, col_offset=11), UnaryOp(Not(), Name('readonly', Load(), lineno=655, col_offset=24), lineno=655, col_offset=20)], lineno=654, col_offset=11), [If(Name('__debug__', Load(), lineno=656, col_offset=15), [If(Compare(Attribute(Name('self', Load(), lineno=657, col_offset=19), 'debug', Load(), lineno=657, col_offset=19), [GtE()], [Num(1, lineno=657, col_offset=33)], lineno=657, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=658, col_offset=20), '_dump_ur', Load(), lineno=658, col_offset=20), [Attribute(Name('self', Load(), lineno=658, col_offset=34), 'untagged_responses', Load(), lineno=658, col_offset=34)], [], None, None, lineno=658, col_offset=20), lineno=658, col_offset=20)], [], lineno=657, col_offset=16)], [], lineno=656, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=659, col_offset=18), 'readonly', Load(), lineno=659, col_offset=18), [BinOp(Str('%s is not writable', lineno=659, col_offset=32), Mod(), Name('mailbox', Load(), lineno=659, col_offset=55), lineno=659, col_offset=32)], [], None, None, lineno=659, col_offset=18), None, None, lineno=659, col_offset=12)], [], lineno=654, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=660, col_offset=15), Call(Attribute(Attribute(Name('self', Load(), lineno=660, col_offset=20), 'untagged_responses', Load(), lineno=660, col_offset=20), 'get', Load(), lineno=660, col_offset=20), [Str('EXISTS', lineno=660, col_offset=48), List([Name('None', Load(), lineno=660, col_offset=59)], Load(), lineno=660, col_offset=58)], [], None, None, lineno=660, col_offset=20)], Load(), lineno=660, col_offset=15), lineno=660, col_offset=8)], [], lineno=631, col_offset=4), FunctionDef('setacl', arguments([Name('self', Param(), lineno=663, col_offset=15), Name('mailbox', Param(), lineno=663, col_offset=21), Name('who', Param(), lineno=663, col_offset=30), Name('what', Param(), lineno=663, col_offset=35)], None, None, []), [Expr(Str('Set a mailbox acl.\n\n        (typ, [data]) = <instance>.setacl(mailbox, who, what)\n        ', lineno=667, col_offset=-1), lineno=667, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=668, col_offset=15), '_simple_command', Load(), lineno=668, col_offset=15), [Str('SETACL', lineno=668, col_offset=36), Name('mailbox', Load(), lineno=668, col_offset=46), Name('who', Load(), lineno=668, col_offset=55), Name('what', Load(), lineno=668, col_offset=60)], [], None, None, lineno=668, col_offset=15), lineno=668, col_offset=8)], [], lineno=663, col_offset=4), FunctionDef('setannotation', arguments([Name('self', Param(), lineno=671, col_offset=22)], 'args', None, []), [Expr(Str('(typ, [data]) = <instance>.setannotation(mailbox[, entry, attribute]+)\n        Set ANNOTATIONs.', lineno=673, col_offset=-1), lineno=673, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=675, col_offset=8), Name('dat', Store(), lineno=675, col_offset=13)], Store(), lineno=675, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=675, col_offset=19), '_simple_command', Load(), lineno=675, col_offset=19), [Str('SETANNOTATION', lineno=675, col_offset=40)], [], Name('args', Load(), lineno=675, col_offset=58), None, lineno=675, col_offset=19), lineno=675, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=676, col_offset=15), '_untagged_response', Load(), lineno=676, col_offset=15), [Name('typ', Load(), lineno=676, col_offset=39), Name('dat', Load(), lineno=676, col_offset=44), Str('ANNOTATION', lineno=676, col_offset=49)], [], None, None, lineno=676, col_offset=15), lineno=676, col_offset=8)], [], lineno=671, col_offset=4), FunctionDef('setquota', arguments([Name('self', Param(), lineno=679, col_offset=17), Name('root', Param(), lineno=679, col_offset=23), Name('limits', Param(), lineno=679, col_offset=29)], None, None, []), [Expr(Str("Set the quota root's resource limits.\n\n        (typ, [data]) = <instance>.setquota(root, limits)\n        ", lineno=683, col_offset=-1), lineno=683, col_offset=-1), Assign([Tuple([Name('typ', Store(), lineno=684, col_offset=8), Name('dat', Store(), lineno=684, col_offset=13)], Store(), lineno=684, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=684, col_offset=19), '_simple_command', Load(), lineno=684, col_offset=19), [Str('SETQUOTA', lineno=684, col_offset=40), Name('root', Load(), lineno=684, col_offset=52), Name('limits', Load(), lineno=684, col_offset=58)], [], None, None, lineno=684, col_offset=19), lineno=684, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=685, col_offset=15), '_untagged_response', Load(), lineno=685, col_offset=15), [Name('typ', Load(), lineno=685, col_offset=39), Name('dat', Load(), lineno=685, col_offset=44), Str('QUOTA', lineno=685, col_offset=49)], [], None, None, lineno=685, col_offset=15), lineno=685, col_offset=8)], [], lineno=679, col_offset=4), FunctionDef('sort', arguments([Name('self', Param(), lineno=688, col_offset=13), Name('sort_criteria', Param(), lineno=688, col_offset=19), Name('charset', Param(), lineno=688, col_offset=34)], 'search_criteria', None, []), [Expr(Str('IMAP4rev1 extension SORT command.\n\n        (typ, [data]) = <instance>.sort(sort_criteria, charset, search_criteria, ...)\n        ', lineno=692, col_offset=-1), lineno=692, col_offset=-1), Assign([Name('name', Store(), lineno=693, col_offset=8)], Str('SORT', lineno=693, col_offset=15), lineno=693, col_offset=8), If(Compare(Tuple([Subscript(Name('sort_criteria', Load(), lineno=696, col_offset=12), Index(Num(0, lineno=696, col_offset=26)), Load(), lineno=696, col_offset=12), Subscript(Name('sort_criteria', Load(), lineno=696, col_offset=29), Index(Num(-1, lineno=696, col_offset=44)), Load(), lineno=696, col_offset=29)], Load(), lineno=696, col_offset=12), [NotEq()], [Tuple([Str('(', lineno=696, col_offset=52), Str(')', lineno=696, col_offset=56)], Load(), lineno=696, col_offset=52)], lineno=696, col_offset=11), [Assign([Name('sort_criteria', Store(), lineno=697, col_offset=12)], BinOp(Str('(%s)', lineno=697, col_offset=28), Mod(), Name('sort_criteria', Load(), lineno=697, col_offset=37), lineno=697, col_offset=28), lineno=697, col_offset=12)], [], lineno=696, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=698, col_offset=8), Name('dat', Store(), lineno=698, col_offset=13)], Store(), lineno=698, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=698, col_offset=19), '_simple_command', Load(), lineno=698, col_offset=19), [Name('name', Load(), lineno=698, col_offset=40), Name('sort_criteria', Load(), lineno=698, col_offset=46), Name('charset', Load(), lineno=698, col_offset=61)], [], Name('search_criteria', Load(), lineno=698, col_offset=71), None, lineno=698, col_offset=19), lineno=698, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=699, col_offset=15), '_untagged_response', Load(), lineno=699, col_offset=15), [Name('typ', Load(), lineno=699, col_offset=39), Name('dat', Load(), lineno=699, col_offset=44), Name('name', Load(), lineno=699, col_offset=49)], [], None, None, lineno=699, col_offset=15), lineno=699, col_offset=8)], [], lineno=688, col_offset=4), FunctionDef('status', arguments([Name('self', Param(), lineno=702, col_offset=15), Name('mailbox', Param(), lineno=702, col_offset=21), Name('names', Param(), lineno=702, col_offset=30)], None, None, []), [Expr(Str('Request named status conditions for mailbox.\n\n        (typ, [data]) = <instance>.status(mailbox, names)\n        ', lineno=706, col_offset=-1), lineno=706, col_offset=-1), Assign([Name('name', Store(), lineno=707, col_offset=8)], Str('STATUS', lineno=707, col_offset=15), lineno=707, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=710, col_offset=8), Name('dat', Store(), lineno=710, col_offset=13)], Store(), lineno=710, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=710, col_offset=19), '_simple_command', Load(), lineno=710, col_offset=19), [Name('name', Load(), lineno=710, col_offset=40), Name('mailbox', Load(), lineno=710, col_offset=46), Name('names', Load(), lineno=710, col_offset=55)], [], None, None, lineno=710, col_offset=19), lineno=710, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=711, col_offset=15), '_untagged_response', Load(), lineno=711, col_offset=15), [Name('typ', Load(), lineno=711, col_offset=39), Name('dat', Load(), lineno=711, col_offset=44), Name('name', Load(), lineno=711, col_offset=49)], [], None, None, lineno=711, col_offset=15), lineno=711, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('store', arguments([Name('self', Param(), lineno=714, col_offset=14), Name('message_set', Param(), lineno=714, col_offset=20), Name('command', Param(), lineno=714, col_offset=33), Name('flags', Param(), lineno=714, col_offset=42)], None, None, []), [Expr(Str('Alters flag dispositions for messages in mailbox.\n\n        (typ, [data]) = <instance>.store(message_set, command, flags)\n        ', lineno=718, col_offset=-1), lineno=718, col_offset=-1), If(Compare(Tuple([Subscript(Name('flags', Load(), lineno=719, col_offset=12), Index(Num(0, lineno=719, col_offset=18)), Load(), lineno=719, col_offset=12), Subscript(Name('flags', Load(), lineno=719, col_offset=21), Index(Num(-1, lineno=719, col_offset=28)), Load(), lineno=719, col_offset=21)], Load(), lineno=719, col_offset=12), [NotEq()], [Tuple([Str('(', lineno=719, col_offset=36), Str(')', lineno=719, col_offset=40)], Load(), lineno=719, col_offset=36)], lineno=719, col_offset=11), [Assign([Name('flags', Store(), lineno=720, col_offset=12)], BinOp(Str('(%s)', lineno=720, col_offset=20), Mod(), Name('flags', Load(), lineno=720, col_offset=29), lineno=720, col_offset=20), lineno=720, col_offset=12)], [], lineno=719, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=721, col_offset=8), Name('dat', Store(), lineno=721, col_offset=13)], Store(), lineno=721, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=721, col_offset=19), '_simple_command', Load(), lineno=721, col_offset=19), [Str('STORE', lineno=721, col_offset=40), Name('message_set', Load(), lineno=721, col_offset=49), Name('command', Load(), lineno=721, col_offset=62), Name('flags', Load(), lineno=721, col_offset=71)], [], None, None, lineno=721, col_offset=19), lineno=721, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=722, col_offset=15), '_untagged_response', Load(), lineno=722, col_offset=15), [Name('typ', Load(), lineno=722, col_offset=39), Name('dat', Load(), lineno=722, col_offset=44), Str('FETCH', lineno=722, col_offset=49)], [], None, None, lineno=722, col_offset=15), lineno=722, col_offset=8)], [], lineno=714, col_offset=4), FunctionDef('subscribe', arguments([Name('self', Param(), lineno=725, col_offset=18), Name('mailbox', Param(), lineno=725, col_offset=24)], None, None, []), [Expr(Str('Subscribe to new mailbox.\n\n        (typ, [data]) = <instance>.subscribe(mailbox)\n        ', lineno=729, col_offset=-1), lineno=729, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=730, col_offset=15), '_simple_command', Load(), lineno=730, col_offset=15), [Str('SUBSCRIBE', lineno=730, col_offset=36), Name('mailbox', Load(), lineno=730, col_offset=49)], [], None, None, lineno=730, col_offset=15), lineno=730, col_offset=8)], [], lineno=725, col_offset=4), FunctionDef('thread', arguments([Name('self', Param(), lineno=733, col_offset=15), Name('threading_algorithm', Param(), lineno=733, col_offset=21), Name('charset', Param(), lineno=733, col_offset=42)], 'search_criteria', None, []), [Expr(Str('IMAPrev1 extension THREAD command.\n\n        (type, [data]) = <instance>.thread(threading_algorithm, charset, search_criteria, ...)\n        ', lineno=737, col_offset=-1), lineno=737, col_offset=-1), Assign([Name('name', Store(), lineno=738, col_offset=8)], Str('THREAD', lineno=738, col_offset=15), lineno=738, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=739, col_offset=8), Name('dat', Store(), lineno=739, col_offset=13)], Store(), lineno=739, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=739, col_offset=19), '_simple_command', Load(), lineno=739, col_offset=19), [Name('name', Load(), lineno=739, col_offset=40), Name('threading_algorithm', Load(), lineno=739, col_offset=46), Name('charset', Load(), lineno=739, col_offset=67)], [], Name('search_criteria', Load(), lineno=739, col_offset=77), None, lineno=739, col_offset=19), lineno=739, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=740, col_offset=15), '_untagged_response', Load(), lineno=740, col_offset=15), [Name('typ', Load(), lineno=740, col_offset=39), Name('dat', Load(), lineno=740, col_offset=44), Name('name', Load(), lineno=740, col_offset=49)], [], None, None, lineno=740, col_offset=15), lineno=740, col_offset=8)], [], lineno=733, col_offset=4), FunctionDef('uid', arguments([Name('self', Param(), lineno=743, col_offset=12), Name('command', Param(), lineno=743, col_offset=18)], 'args', None, []), [Expr(Str('Execute "command arg ..." with messages identified by UID,\n                rather than message number.\n\n        (typ, [data]) = <instance>.uid(command, arg1, arg2, ...)\n\n        Returns response appropriate to \'command\'.\n        ', lineno=750, col_offset=-1), lineno=750, col_offset=-1), Assign([Name('command', Store(), lineno=751, col_offset=8)], Call(Attribute(Name('command', Load(), lineno=751, col_offset=18), 'upper', Load(), lineno=751, col_offset=18), [], [], None, None, lineno=751, col_offset=18), lineno=751, col_offset=8), If(UnaryOp(Not(), Compare(Name('command', Load(), lineno=752, col_offset=15), [In()], [Name('Commands', Load(), lineno=752, col_offset=26)], lineno=752, col_offset=15), lineno=752, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=753, col_offset=18), 'error', Load(), lineno=753, col_offset=18), [BinOp(Str('Unknown IMAP4 UID command: %s', lineno=753, col_offset=29), Mod(), Name('command', Load(), lineno=753, col_offset=63), lineno=753, col_offset=29)], [], None, None, lineno=753, col_offset=18), None, None, lineno=753, col_offset=12)], [], lineno=752, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=754, col_offset=11), 'state', Load(), lineno=754, col_offset=11), [NotIn()], [Subscript(Name('Commands', Load(), lineno=754, col_offset=29), Index(Name('command', Load(), lineno=754, col_offset=38)), Load(), lineno=754, col_offset=29)], lineno=754, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=755, col_offset=18), 'error', Load(), lineno=755, col_offset=18), [BinOp(Str('command %s illegal in state %s, only allowed in states %s', lineno=755, col_offset=29), Mod(), Tuple([Name('command', Load(), lineno=757, col_offset=30), Attribute(Name('self', Load(), lineno=757, col_offset=39), 'state', Load(), lineno=757, col_offset=39), Call(Attribute(Str(', ', lineno=758, col_offset=30), 'join', Load(), lineno=758, col_offset=30), [Subscript(Name('Commands', Load(), lineno=758, col_offset=40), Index(Name('command', Load(), lineno=758, col_offset=49)), Load(), lineno=758, col_offset=40)], [], None, None, lineno=758, col_offset=30)], Load(), lineno=757, col_offset=30), lineno=755, col_offset=29)], [], None, None, lineno=755, col_offset=18), None, None, lineno=755, col_offset=12)], [], lineno=754, col_offset=8), Assign([Name('name', Store(), lineno=759, col_offset=8)], Str('UID', lineno=759, col_offset=15), lineno=759, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=760, col_offset=8), Name('dat', Store(), lineno=760, col_offset=13)], Store(), lineno=760, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=760, col_offset=19), '_simple_command', Load(), lineno=760, col_offset=19), [Name('name', Load(), lineno=760, col_offset=40), Name('command', Load(), lineno=760, col_offset=46)], [], Name('args', Load(), lineno=760, col_offset=56), None, lineno=760, col_offset=19), lineno=760, col_offset=8), If(Compare(Name('command', Load(), lineno=761, col_offset=11), [In()], [Tuple([Str('SEARCH', lineno=761, col_offset=23), Str('SORT', lineno=761, col_offset=33), Str('THREAD', lineno=761, col_offset=41)], Load(), lineno=761, col_offset=23)], lineno=761, col_offset=11), [Assign([Name('name', Store(), lineno=762, col_offset=12)], Name('command', Load(), lineno=762, col_offset=19), lineno=762, col_offset=12)], [Assign([Name('name', Store(), lineno=764, col_offset=12)], Str('FETCH', lineno=764, col_offset=19), lineno=764, col_offset=12)], lineno=761, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=765, col_offset=15), '_untagged_response', Load(), lineno=765, col_offset=15), [Name('typ', Load(), lineno=765, col_offset=39), Name('dat', Load(), lineno=765, col_offset=44), Name('name', Load(), lineno=765, col_offset=49)], [], None, None, lineno=765, col_offset=15), lineno=765, col_offset=8)], [], lineno=743, col_offset=4), FunctionDef('unsubscribe', arguments([Name('self', Param(), lineno=768, col_offset=20), Name('mailbox', Param(), lineno=768, col_offset=26)], None, None, []), [Expr(Str('Unsubscribe from old mailbox.\n\n        (typ, [data]) = <instance>.unsubscribe(mailbox)\n        ', lineno=772, col_offset=-1), lineno=772, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=773, col_offset=15), '_simple_command', Load(), lineno=773, col_offset=15), [Str('UNSUBSCRIBE', lineno=773, col_offset=36), Name('mailbox', Load(), lineno=773, col_offset=51)], [], None, None, lineno=773, col_offset=15), lineno=773, col_offset=8)], [], lineno=768, col_offset=4), FunctionDef('xatom', arguments([Name('self', Param(), lineno=776, col_offset=14), Name('name', Param(), lineno=776, col_offset=20)], 'args', None, []), [Expr(Str("Allow simple extension commands\n                notified by server in CAPABILITY response.\n\n        Assumes command is legal in current state.\n\n        (typ, [data]) = <instance>.xatom(name, arg, ...)\n\n        Returns response appropriate to extension command `name'.\n        ", lineno=785, col_offset=-1), lineno=785, col_offset=-1), Assign([Name('name', Store(), lineno=786, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=786, col_offset=15), 'upper', Load(), lineno=786, col_offset=15), [], [], None, None, lineno=786, col_offset=15), lineno=786, col_offset=8), If(UnaryOp(Not(), Compare(Name('name', Load(), lineno=789, col_offset=15), [In()], [Name('Commands', Load(), lineno=789, col_offset=23)], lineno=789, col_offset=15), lineno=789, col_offset=11), [Assign([Subscript(Name('Commands', Load(), lineno=790, col_offset=12), Index(Name('name', Load(), lineno=790, col_offset=21)), Store(), lineno=790, col_offset=12)], Tuple([Attribute(Name('self', Load(), lineno=790, col_offset=30), 'state', Load(), lineno=790, col_offset=30)], Load(), lineno=790, col_offset=30), lineno=790, col_offset=12)], [], lineno=789, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=791, col_offset=15), '_simple_command', Load(), lineno=791, col_offset=15), [Name('name', Load(), lineno=791, col_offset=36)], [], Name('args', Load(), lineno=791, col_offset=43), None, lineno=791, col_offset=15), lineno=791, col_offset=8)], [], lineno=776, col_offset=4), FunctionDef('_append_untagged', arguments([Name('self', Param(), lineno=798, col_offset=25), Name('typ', Param(), lineno=798, col_offset=31), Name('dat', Param(), lineno=798, col_offset=36)], None, None, []), [If(Compare(Name('dat', Load(), lineno=800, col_offset=11), [Is()], [Name('None', Load(), lineno=800, col_offset=18)], lineno=800, col_offset=11), [Assign([Name('dat', Store(), lineno=800, col_offset=24)], Str('', lineno=800, col_offset=30), lineno=800, col_offset=24)], [], lineno=800, col_offset=8), Assign([Name('ur', Store(), lineno=801, col_offset=8)], Attribute(Name('self', Load(), lineno=801, col_offset=13), 'untagged_responses', Load(), lineno=801, col_offset=13), lineno=801, col_offset=8), If(Name('__debug__', Load(), lineno=802, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=803, col_offset=15), 'debug', Load(), lineno=803, col_offset=15), [GtE()], [Num(5, lineno=803, col_offset=29)], lineno=803, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=804, col_offset=16), '_mesg', Load(), lineno=804, col_offset=16), [BinOp(Str('untagged_responses[%s] %s += ["%s"]', lineno=804, col_offset=27), Mod(), Tuple([Name('typ', Load(), lineno=805, col_offset=25), Call(Name('len', Load(), lineno=805, col_offset=30), [Call(Attribute(Name('ur', Load(), lineno=805, col_offset=34), 'get', Load(), lineno=805, col_offset=34), [Name('typ', Load(), lineno=805, col_offset=41), Str('', lineno=805, col_offset=45)], [], None, None, lineno=805, col_offset=34)], [], None, None, lineno=805, col_offset=30), Name('dat', Load(), lineno=805, col_offset=51)], Load(), lineno=805, col_offset=25), lineno=804, col_offset=27)], [], None, None, lineno=804, col_offset=16), lineno=804, col_offset=16)], [], lineno=803, col_offset=12)], [], lineno=802, col_offset=8), If(Compare(Name('typ', Load(), lineno=806, col_offset=11), [In()], [Name('ur', Load(), lineno=806, col_offset=18)], lineno=806, col_offset=11), [Expr(Call(Attribute(Subscript(Name('ur', Load(), lineno=807, col_offset=12), Index(Name('typ', Load(), lineno=807, col_offset=15)), Load(), lineno=807, col_offset=12), 'append', Load(), lineno=807, col_offset=12), [Name('dat', Load(), lineno=807, col_offset=27)], [], None, None, lineno=807, col_offset=12), lineno=807, col_offset=12)], [Assign([Subscript(Name('ur', Load(), lineno=809, col_offset=12), Index(Name('typ', Load(), lineno=809, col_offset=15)), Store(), lineno=809, col_offset=12)], List([Name('dat', Load(), lineno=809, col_offset=23)], Load(), lineno=809, col_offset=22), lineno=809, col_offset=12)], lineno=806, col_offset=8)], [], lineno=798, col_offset=4), FunctionDef('_check_bye', arguments([Name('self', Param(), lineno=812, col_offset=19)], None, None, []), [Assign([Name('bye', Store(), lineno=813, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=813, col_offset=14), 'untagged_responses', Load(), lineno=813, col_offset=14), 'get', Load(), lineno=813, col_offset=14), [Str('BYE', lineno=813, col_offset=42)], [], None, None, lineno=813, col_offset=14), lineno=813, col_offset=8), If(Name('bye', Load(), lineno=814, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=815, col_offset=18), 'abort', Load(), lineno=815, col_offset=18), [Subscript(Name('bye', Load(), lineno=815, col_offset=29), Index(Num(-1, lineno=815, col_offset=34)), Load(), lineno=815, col_offset=29)], [], None, None, lineno=815, col_offset=18), None, None, lineno=815, col_offset=12)], [], lineno=814, col_offset=8)], [], lineno=812, col_offset=4), FunctionDef('_command', arguments([Name('self', Param(), lineno=818, col_offset=17), Name('name', Param(), lineno=818, col_offset=23)], 'args', None, []), [If(Compare(Attribute(Name('self', Load(), lineno=820, col_offset=11), 'state', Load(), lineno=820, col_offset=11), [NotIn()], [Subscript(Name('Commands', Load(), lineno=820, col_offset=29), Index(Name('name', Load(), lineno=820, col_offset=38)), Load(), lineno=820, col_offset=29)], lineno=820, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=821, col_offset=12), 'literal', Store(), lineno=821, col_offset=12)], Name('None', Load(), lineno=821, col_offset=27), lineno=821, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=822, col_offset=18), 'error', Load(), lineno=822, col_offset=18), [BinOp(Str('command %s illegal in state %s, only allowed in states %s', lineno=822, col_offset=29), Mod(), Tuple([Name('name', Load(), lineno=824, col_offset=30), Attribute(Name('self', Load(), lineno=824, col_offset=36), 'state', Load(), lineno=824, col_offset=36), Call(Attribute(Str(', ', lineno=825, col_offset=30), 'join', Load(), lineno=825, col_offset=30), [Subscript(Name('Commands', Load(), lineno=825, col_offset=40), Index(Name('name', Load(), lineno=825, col_offset=49)), Load(), lineno=825, col_offset=40)], [], None, None, lineno=825, col_offset=30)], Load(), lineno=824, col_offset=30), lineno=822, col_offset=29)], [], None, None, lineno=822, col_offset=18), None, None, lineno=822, col_offset=12)], [], lineno=820, col_offset=8), For(Name('typ', Store(), lineno=827, col_offset=12), Tuple([Str('OK', lineno=827, col_offset=20), Str('NO', lineno=827, col_offset=26), Str('BAD', lineno=827, col_offset=32)], Load(), lineno=827, col_offset=20), [If(Compare(Name('typ', Load(), lineno=828, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=828, col_offset=22), 'untagged_responses', Load(), lineno=828, col_offset=22)], lineno=828, col_offset=15), [Delete([Subscript(Attribute(Name('self', Load(), lineno=829, col_offset=20), 'untagged_responses', Load(), lineno=829, col_offset=20), Index(Name('typ', Load(), lineno=829, col_offset=44)), Del(), lineno=829, col_offset=20)], lineno=829, col_offset=16)], [], lineno=828, col_offset=12)], [], lineno=827, col_offset=8), If(BoolOp(And(), [Compare(Str('READ-ONLY', lineno=831, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=831, col_offset=26), 'untagged_responses', Load(), lineno=831, col_offset=26)], lineno=831, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=832, col_offset=16), 'is_readonly', Load(), lineno=832, col_offset=16), lineno=832, col_offset=12)], lineno=831, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=833, col_offset=18), 'readonly', Load(), lineno=833, col_offset=18), [Str('mailbox status changed to READ-ONLY', lineno=833, col_offset=32)], [], None, None, lineno=833, col_offset=18), None, None, lineno=833, col_offset=12)], [], lineno=831, col_offset=8), Assign([Name('tag', Store(), lineno=835, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=835, col_offset=14), '_new_tag', Load(), lineno=835, col_offset=14), [], [], None, None, lineno=835, col_offset=14), lineno=835, col_offset=8), Assign([Name('data', Store(), lineno=836, col_offset=8)], BinOp(Str('%s %s', lineno=836, col_offset=15), Mod(), Tuple([Name('tag', Load(), lineno=836, col_offset=26), Name('name', Load(), lineno=836, col_offset=31)], Load(), lineno=836, col_offset=26), lineno=836, col_offset=15), lineno=836, col_offset=8), For(Name('arg', Store(), lineno=837, col_offset=12), Name('args', Load(), lineno=837, col_offset=19), [If(Compare(Name('arg', Load(), lineno=838, col_offset=15), [Is()], [Name('None', Load(), lineno=838, col_offset=22)], lineno=838, col_offset=15), [Continue( lineno=838, col_offset=28)], [], lineno=838, col_offset=12), Assign([Name('data', Store(), lineno=839, col_offset=12)], BinOp(Str('%s %s', lineno=839, col_offset=19), Mod(), Tuple([Name('data', Load(), lineno=839, col_offset=30), Call(Attribute(Name('self', Load(), lineno=839, col_offset=36), '_checkquote', Load(), lineno=839, col_offset=36), [Name('arg', Load(), lineno=839, col_offset=53)], [], None, None, lineno=839, col_offset=36)], Load(), lineno=839, col_offset=30), lineno=839, col_offset=19), lineno=839, col_offset=12)], [], lineno=837, col_offset=8), Assign([Name('literal', Store(), lineno=841, col_offset=8)], Attribute(Name('self', Load(), lineno=841, col_offset=18), 'literal', Load(), lineno=841, col_offset=18), lineno=841, col_offset=8), If(Compare(Name('literal', Load(), lineno=842, col_offset=11), [IsNot()], [Name('None', Load(), lineno=842, col_offset=26)], lineno=842, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=843, col_offset=12), 'literal', Store(), lineno=843, col_offset=12)], Name('None', Load(), lineno=843, col_offset=27), lineno=843, col_offset=12), If(Compare(Call(Name('type', Load(), lineno=844, col_offset=15), [Name('literal', Load(), lineno=844, col_offset=20)], [], None, None, lineno=844, col_offset=15), [Is()], [Call(Name('type', Load(), lineno=844, col_offset=32), [Attribute(Name('self', Load(), lineno=844, col_offset=37), '_command', Load(), lineno=844, col_offset=37)], [], None, None, lineno=844, col_offset=32)], lineno=844, col_offset=15), [Assign([Name('literator', Store(), lineno=845, col_offset=16)], Name('literal', Load(), lineno=845, col_offset=28), lineno=845, col_offset=16)], [Assign([Name('literator', Store(), lineno=847, col_offset=16)], Name('None', Load(), lineno=847, col_offset=28), lineno=847, col_offset=16), Assign([Name('data', Store(), lineno=848, col_offset=16)], BinOp(Str('%s {%s}', lineno=848, col_offset=23), Mod(), Tuple([Name('data', Load(), lineno=848, col_offset=36), Call(Name('len', Load(), lineno=848, col_offset=42), [Name('literal', Load(), lineno=848, col_offset=46)], [], None, None, lineno=848, col_offset=42)], Load(), lineno=848, col_offset=36), lineno=848, col_offset=23), lineno=848, col_offset=16)], lineno=844, col_offset=12)], [], lineno=842, col_offset=8), If(Name('__debug__', Load(), lineno=850, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=851, col_offset=15), 'debug', Load(), lineno=851, col_offset=15), [GtE()], [Num(4, lineno=851, col_offset=29)], lineno=851, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=852, col_offset=16), '_mesg', Load(), lineno=852, col_offset=16), [BinOp(Str('> %s', lineno=852, col_offset=27), Mod(), Name('data', Load(), lineno=852, col_offset=36), lineno=852, col_offset=27)], [], None, None, lineno=852, col_offset=16), lineno=852, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=854, col_offset=16), '_log', Load(), lineno=854, col_offset=16), [BinOp(Str('> %s', lineno=854, col_offset=26), Mod(), Name('data', Load(), lineno=854, col_offset=35), lineno=854, col_offset=26)], [], None, None, lineno=854, col_offset=16), lineno=854, col_offset=16)], lineno=851, col_offset=12)], [], lineno=850, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=857, col_offset=12), 'send', Load(), lineno=857, col_offset=12), [BinOp(Str('%s%s', lineno=857, col_offset=22), Mod(), Tuple([Name('data', Load(), lineno=857, col_offset=32), Name('CRLF', Load(), lineno=857, col_offset=38)], Load(), lineno=857, col_offset=32), lineno=857, col_offset=22)], [], None, None, lineno=857, col_offset=12), lineno=857, col_offset=12)], [ExceptHandler(Tuple([Attribute(Name('socket', Load(), lineno=858, col_offset=16), 'error', Load(), lineno=858, col_offset=16), Name('OSError', Load(), lineno=858, col_offset=30)], Load(), lineno=858, col_offset=16), Name('val', Store(), lineno=858, col_offset=40), [Raise(Call(Attribute(Name('self', Load(), lineno=859, col_offset=18), 'abort', Load(), lineno=859, col_offset=18), [BinOp(Str('socket error: %s', lineno=859, col_offset=29), Mod(), Name('val', Load(), lineno=859, col_offset=50), lineno=859, col_offset=29)], [], None, None, lineno=859, col_offset=18), None, None, lineno=859, col_offset=12)], lineno=858, col_offset=8)], [], lineno=856, col_offset=8), If(Compare(Name('literal', Load(), lineno=861, col_offset=11), [Is()], [Name('None', Load(), lineno=861, col_offset=22)], lineno=861, col_offset=11), [Return(Name('tag', Load(), lineno=862, col_offset=19), lineno=862, col_offset=12)], [], lineno=861, col_offset=8), While(Num(1, lineno=864, col_offset=14), [While(Call(Attribute(Name('self', Load(), lineno=867, col_offset=18), '_get_response', Load(), lineno=867, col_offset=18), [], [], None, None, lineno=867, col_offset=18), [If(Subscript(Attribute(Name('self', Load(), lineno=868, col_offset=19), 'tagged_commands', Load(), lineno=868, col_offset=19), Index(Name('tag', Load(), lineno=868, col_offset=40)), Load(), lineno=868, col_offset=19), [Return(Name('tag', Load(), lineno=869, col_offset=27), lineno=869, col_offset=20)], [], lineno=868, col_offset=16)], [], lineno=867, col_offset=12), If(Name('literator', Load(), lineno=873, col_offset=15), [Assign([Name('literal', Store(), lineno=874, col_offset=16)], Call(Name('literator', Load(), lineno=874, col_offset=26), [Attribute(Name('self', Load(), lineno=874, col_offset=36), 'continuation_response', Load(), lineno=874, col_offset=36)], [], None, None, lineno=874, col_offset=26), lineno=874, col_offset=16)], [], lineno=873, col_offset=12), If(Name('__debug__', Load(), lineno=876, col_offset=15), [If(Compare(Attribute(Name('self', Load(), lineno=877, col_offset=19), 'debug', Load(), lineno=877, col_offset=19), [GtE()], [Num(4, lineno=877, col_offset=33)], lineno=877, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=878, col_offset=20), '_mesg', Load(), lineno=878, col_offset=20), [BinOp(Str('write literal size %s', lineno=878, col_offset=31), Mod(), Call(Name('len', Load(), lineno=878, col_offset=57), [Name('literal', Load(), lineno=878, col_offset=61)], [], None, None, lineno=878, col_offset=57), lineno=878, col_offset=31)], [], None, None, lineno=878, col_offset=20), lineno=878, col_offset=20)], [], lineno=877, col_offset=16)], [], lineno=876, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=881, col_offset=16), 'send', Load(), lineno=881, col_offset=16), [Name('literal', Load(), lineno=881, col_offset=26)], [], None, None, lineno=881, col_offset=16), lineno=881, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=882, col_offset=16), 'send', Load(), lineno=882, col_offset=16), [Name('CRLF', Load(), lineno=882, col_offset=26)], [], None, None, lineno=882, col_offset=16), lineno=882, col_offset=16)], [ExceptHandler(Tuple([Attribute(Name('socket', Load(), lineno=883, col_offset=20), 'error', Load(), lineno=883, col_offset=20), Name('OSError', Load(), lineno=883, col_offset=34)], Load(), lineno=883, col_offset=20), Name('val', Store(), lineno=883, col_offset=44), [Raise(Call(Attribute(Name('self', Load(), lineno=884, col_offset=22), 'abort', Load(), lineno=884, col_offset=22), [BinOp(Str('socket error: %s', lineno=884, col_offset=33), Mod(), Name('val', Load(), lineno=884, col_offset=54), lineno=884, col_offset=33)], [], None, None, lineno=884, col_offset=22), None, None, lineno=884, col_offset=16)], lineno=883, col_offset=12)], [], lineno=880, col_offset=12), If(UnaryOp(Not(), Name('literator', Load(), lineno=886, col_offset=19), lineno=886, col_offset=15), [Break( lineno=887, col_offset=16)], [], lineno=886, col_offset=12)], [], lineno=864, col_offset=8), Return(Name('tag', Load(), lineno=889, col_offset=15), lineno=889, col_offset=8)], [], lineno=818, col_offset=4), FunctionDef('_command_complete', arguments([Name('self', Param(), lineno=892, col_offset=26), Name('name', Param(), lineno=892, col_offset=32), Name('tag', Param(), lineno=892, col_offset=38)], None, None, []), [If(Compare(Name('name', Load(), lineno=894, col_offset=11), [NotEq()], [Str('LOGOUT', lineno=894, col_offset=19)], lineno=894, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=895, col_offset=12), '_check_bye', Load(), lineno=895, col_offset=12), [], [], None, None, lineno=895, col_offset=12), lineno=895, col_offset=12)], [], lineno=894, col_offset=8), TryExcept([Assign([Tuple([Name('typ', Store(), lineno=897, col_offset=12), Name('data', Store(), lineno=897, col_offset=17)], Store(), lineno=897, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=897, col_offset=24), '_get_tagged_response', Load(), lineno=897, col_offset=24), [Name('tag', Load(), lineno=897, col_offset=50)], [], None, None, lineno=897, col_offset=24), lineno=897, col_offset=12)], [ExceptHandler(Attribute(Name('self', Load(), lineno=898, col_offset=15), 'abort', Load(), lineno=898, col_offset=15), Name('val', Store(), lineno=898, col_offset=27), [Raise(Call(Attribute(Name('self', Load(), lineno=899, col_offset=18), 'abort', Load(), lineno=899, col_offset=18), [BinOp(Str('command: %s => %s', lineno=899, col_offset=29), Mod(), Tuple([Name('name', Load(), lineno=899, col_offset=52), Name('val', Load(), lineno=899, col_offset=58)], Load(), lineno=899, col_offset=52), lineno=899, col_offset=29)], [], None, None, lineno=899, col_offset=18), None, None, lineno=899, col_offset=12)], lineno=898, col_offset=8), ExceptHandler(Attribute(Name('self', Load(), lineno=900, col_offset=15), 'error', Load(), lineno=900, col_offset=15), Name('val', Store(), lineno=900, col_offset=27), [Raise(Call(Attribute(Name('self', Load(), lineno=901, col_offset=18), 'error', Load(), lineno=901, col_offset=18), [BinOp(Str('command: %s => %s', lineno=901, col_offset=29), Mod(), Tuple([Name('name', Load(), lineno=901, col_offset=52), Name('val', Load(), lineno=901, col_offset=58)], Load(), lineno=901, col_offset=52), lineno=901, col_offset=29)], [], None, None, lineno=901, col_offset=18), None, None, lineno=901, col_offset=12)], lineno=900, col_offset=8)], [], lineno=896, col_offset=8), If(Compare(Name('name', Load(), lineno=902, col_offset=11), [NotEq()], [Str('LOGOUT', lineno=902, col_offset=19)], lineno=902, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=903, col_offset=12), '_check_bye', Load(), lineno=903, col_offset=12), [], [], None, None, lineno=903, col_offset=12), lineno=903, col_offset=12)], [], lineno=902, col_offset=8), If(Compare(Name('typ', Load(), lineno=904, col_offset=11), [Eq()], [Str('BAD', lineno=904, col_offset=18)], lineno=904, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=905, col_offset=18), 'error', Load(), lineno=905, col_offset=18), [BinOp(Str('%s command error: %s %s', lineno=905, col_offset=29), Mod(), Tuple([Name('name', Load(), lineno=905, col_offset=58), Name('typ', Load(), lineno=905, col_offset=64), Name('data', Load(), lineno=905, col_offset=69)], Load(), lineno=905, col_offset=58), lineno=905, col_offset=29)], [], None, None, lineno=905, col_offset=18), None, None, lineno=905, col_offset=12)], [], lineno=904, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=906, col_offset=15), Name('data', Load(), lineno=906, col_offset=20)], Load(), lineno=906, col_offset=15), lineno=906, col_offset=8)], [], lineno=892, col_offset=4), FunctionDef('_get_response', arguments([Name('self', Param(), lineno=909, col_offset=22)], None, None, []), [Assign([Name('resp', Store(), lineno=916, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=916, col_offset=15), '_get_line', Load(), lineno=916, col_offset=15), [], [], None, None, lineno=916, col_offset=15), lineno=916, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=920, col_offset=11), '_match', Load(), lineno=920, col_offset=11), [Attribute(Name('self', Load(), lineno=920, col_offset=23), 'tagre', Load(), lineno=920, col_offset=23), Name('resp', Load(), lineno=920, col_offset=35)], [], None, None, lineno=920, col_offset=11), [Assign([Name('tag', Store(), lineno=921, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=921, col_offset=18), 'mo', Load(), lineno=921, col_offset=18), 'group', Load(), lineno=921, col_offset=18), [Str('tag', lineno=921, col_offset=32)], [], None, None, lineno=921, col_offset=18), lineno=921, col_offset=12), If(UnaryOp(Not(), Compare(Name('tag', Load(), lineno=922, col_offset=19), [In()], [Attribute(Name('self', Load(), lineno=922, col_offset=26), 'tagged_commands', Load(), lineno=922, col_offset=26)], lineno=922, col_offset=19), lineno=922, col_offset=15), [Raise(Call(Attribute(Name('self', Load(), lineno=923, col_offset=22), 'abort', Load(), lineno=923, col_offset=22), [BinOp(Str('unexpected tagged response: %s', lineno=923, col_offset=33), Mod(), Name('resp', Load(), lineno=923, col_offset=68), lineno=923, col_offset=33)], [], None, None, lineno=923, col_offset=22), None, None, lineno=923, col_offset=16)], [], lineno=922, col_offset=12), Assign([Name('typ', Store(), lineno=925, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=925, col_offset=18), 'mo', Load(), lineno=925, col_offset=18), 'group', Load(), lineno=925, col_offset=18), [Str('type', lineno=925, col_offset=32)], [], None, None, lineno=925, col_offset=18), lineno=925, col_offset=12), Assign([Name('dat', Store(), lineno=926, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=926, col_offset=18), 'mo', Load(), lineno=926, col_offset=18), 'group', Load(), lineno=926, col_offset=18), [Str('data', lineno=926, col_offset=32)], [], None, None, lineno=926, col_offset=18), lineno=926, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=927, col_offset=12), 'tagged_commands', Load(), lineno=927, col_offset=12), Index(Name('tag', Load(), lineno=927, col_offset=33)), Store(), lineno=927, col_offset=12)], Tuple([Name('typ', Load(), lineno=927, col_offset=41), List([Name('dat', Load(), lineno=927, col_offset=47)], Load(), lineno=927, col_offset=46)], Load(), lineno=927, col_offset=41), lineno=927, col_offset=12)], [Assign([Name('dat2', Store(), lineno=929, col_offset=12)], Name('None', Load(), lineno=929, col_offset=19), lineno=929, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=933, col_offset=19), '_match', Load(), lineno=933, col_offset=19), [Name('Untagged_response', Load(), lineno=933, col_offset=31), Name('resp', Load(), lineno=933, col_offset=50)], [], None, None, lineno=933, col_offset=19), lineno=933, col_offset=15), [If(Call(Attribute(Name('self', Load(), lineno=934, col_offset=19), '_match', Load(), lineno=934, col_offset=19), [Name('Untagged_status', Load(), lineno=934, col_offset=31), Name('resp', Load(), lineno=934, col_offset=48)], [], None, None, lineno=934, col_offset=19), [Assign([Name('dat2', Store(), lineno=935, col_offset=20)], Call(Attribute(Attribute(Name('self', Load(), lineno=935, col_offset=27), 'mo', Load(), lineno=935, col_offset=27), 'group', Load(), lineno=935, col_offset=27), [Str('data2', lineno=935, col_offset=41)], [], None, None, lineno=935, col_offset=27), lineno=935, col_offset=20)], [], lineno=934, col_offset=16)], [], lineno=933, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=937, col_offset=15), 'mo', Load(), lineno=937, col_offset=15), [Is()], [Name('None', Load(), lineno=937, col_offset=26)], lineno=937, col_offset=15), [If(Call(Attribute(Name('self', Load(), lineno=940, col_offset=19), '_match', Load(), lineno=940, col_offset=19), [Name('Continuation', Load(), lineno=940, col_offset=31), Name('resp', Load(), lineno=940, col_offset=45)], [], None, None, lineno=940, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=941, col_offset=20), 'continuation_response', Store(), lineno=941, col_offset=20)], Call(Attribute(Attribute(Name('self', Load(), lineno=941, col_offset=49), 'mo', Load(), lineno=941, col_offset=49), 'group', Load(), lineno=941, col_offset=49), [Str('data', lineno=941, col_offset=63)], [], None, None, lineno=941, col_offset=49), lineno=941, col_offset=20), Return(Name('None', Load(), lineno=942, col_offset=27), lineno=942, col_offset=20)], [], lineno=940, col_offset=16), Raise(Call(Attribute(Name('self', Load(), lineno=944, col_offset=22), 'abort', Load(), lineno=944, col_offset=22), [BinOp(Str("unexpected response: '%s'", lineno=944, col_offset=33), Mod(), Name('resp', Load(), lineno=944, col_offset=63), lineno=944, col_offset=33)], [], None, None, lineno=944, col_offset=22), None, None, lineno=944, col_offset=16)], [], lineno=937, col_offset=12), Assign([Name('typ', Store(), lineno=946, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=946, col_offset=18), 'mo', Load(), lineno=946, col_offset=18), 'group', Load(), lineno=946, col_offset=18), [Str('type', lineno=946, col_offset=32)], [], None, None, lineno=946, col_offset=18), lineno=946, col_offset=12), Assign([Name('dat', Store(), lineno=947, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=947, col_offset=18), 'mo', Load(), lineno=947, col_offset=18), 'group', Load(), lineno=947, col_offset=18), [Str('data', lineno=947, col_offset=32)], [], None, None, lineno=947, col_offset=18), lineno=947, col_offset=12), If(Compare(Name('dat', Load(), lineno=948, col_offset=15), [Is()], [Name('None', Load(), lineno=948, col_offset=22)], lineno=948, col_offset=15), [Assign([Name('dat', Store(), lineno=948, col_offset=28)], Str('', lineno=948, col_offset=34), lineno=948, col_offset=28)], [], lineno=948, col_offset=12), If(Name('dat2', Load(), lineno=949, col_offset=15), [Assign([Name('dat', Store(), lineno=949, col_offset=21)], BinOp(BinOp(Name('dat', Load(), lineno=949, col_offset=27), Add(), Str(' ', lineno=949, col_offset=33), lineno=949, col_offset=27), Add(), Name('dat2', Load(), lineno=949, col_offset=39), lineno=949, col_offset=37), lineno=949, col_offset=21)], [], lineno=949, col_offset=12), While(Call(Attribute(Name('self', Load(), lineno=953, col_offset=18), '_match', Load(), lineno=953, col_offset=18), [Name('Literal', Load(), lineno=953, col_offset=30), Name('dat', Load(), lineno=953, col_offset=39)], [], None, None, lineno=953, col_offset=18), [Assign([Name('size', Store(), lineno=957, col_offset=16)], Call(Name('int', Load(), lineno=957, col_offset=23), [Call(Attribute(Attribute(Name('self', Load(), lineno=957, col_offset=27), 'mo', Load(), lineno=957, col_offset=27), 'group', Load(), lineno=957, col_offset=27), [Str('size', lineno=957, col_offset=41)], [], None, None, lineno=957, col_offset=27)], [], None, None, lineno=957, col_offset=23), lineno=957, col_offset=16), If(Name('__debug__', Load(), lineno=958, col_offset=19), [If(Compare(Attribute(Name('self', Load(), lineno=959, col_offset=23), 'debug', Load(), lineno=959, col_offset=23), [GtE()], [Num(4, lineno=959, col_offset=37)], lineno=959, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=960, col_offset=24), '_mesg', Load(), lineno=960, col_offset=24), [BinOp(Str('read literal size %s', lineno=960, col_offset=35), Mod(), Name('size', Load(), lineno=960, col_offset=60), lineno=960, col_offset=35)], [], None, None, lineno=960, col_offset=24), lineno=960, col_offset=24)], [], lineno=959, col_offset=20)], [], lineno=958, col_offset=16), Assign([Name('data', Store(), lineno=961, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=961, col_offset=23), 'read', Load(), lineno=961, col_offset=23), [Name('size', Load(), lineno=961, col_offset=33)], [], None, None, lineno=961, col_offset=23), lineno=961, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=965, col_offset=16), '_append_untagged', Load(), lineno=965, col_offset=16), [Name('typ', Load(), lineno=965, col_offset=38), Tuple([Name('dat', Load(), lineno=965, col_offset=44), Name('data', Load(), lineno=965, col_offset=49)], Load(), lineno=965, col_offset=44)], [], None, None, lineno=965, col_offset=16), lineno=965, col_offset=16), Assign([Name('dat', Store(), lineno=969, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=969, col_offset=22), '_get_line', Load(), lineno=969, col_offset=22), [], [], None, None, lineno=969, col_offset=22), lineno=969, col_offset=16)], [], lineno=953, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=971, col_offset=12), '_append_untagged', Load(), lineno=971, col_offset=12), [Name('typ', Load(), lineno=971, col_offset=34), Name('dat', Load(), lineno=971, col_offset=39)], [], None, None, lineno=971, col_offset=12), lineno=971, col_offset=12)], lineno=920, col_offset=8), If(BoolOp(And(), [Compare(Name('typ', Load(), lineno=975, col_offset=11), [In()], [Tuple([Str('OK', lineno=975, col_offset=19), Str('NO', lineno=975, col_offset=25), Str('BAD', lineno=975, col_offset=31)], Load(), lineno=975, col_offset=19)], lineno=975, col_offset=11), Call(Attribute(Name('self', Load(), lineno=975, col_offset=42), '_match', Load(), lineno=975, col_offset=42), [Name('Response_code', Load(), lineno=975, col_offset=54), Name('dat', Load(), lineno=975, col_offset=69)], [], None, None, lineno=975, col_offset=42)], lineno=975, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=976, col_offset=12), '_append_untagged', Load(), lineno=976, col_offset=12), [Call(Attribute(Attribute(Name('self', Load(), lineno=976, col_offset=34), 'mo', Load(), lineno=976, col_offset=34), 'group', Load(), lineno=976, col_offset=34), [Str('type', lineno=976, col_offset=48)], [], None, None, lineno=976, col_offset=34), Call(Attribute(Attribute(Name('self', Load(), lineno=976, col_offset=57), 'mo', Load(), lineno=976, col_offset=57), 'group', Load(), lineno=976, col_offset=57), [Str('data', lineno=976, col_offset=71)], [], None, None, lineno=976, col_offset=57)], [], None, None, lineno=976, col_offset=12), lineno=976, col_offset=12)], [], lineno=975, col_offset=8), If(Name('__debug__', Load(), lineno=978, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=979, col_offset=15), 'debug', Load(), lineno=979, col_offset=15), [GtE()], [Num(1, lineno=979, col_offset=29)], lineno=979, col_offset=15), Compare(Name('typ', Load(), lineno=979, col_offset=35), [In()], [Tuple([Str('NO', lineno=979, col_offset=43), Str('BAD', lineno=979, col_offset=49), Str('BYE', lineno=979, col_offset=56)], Load(), lineno=979, col_offset=43)], lineno=979, col_offset=35)], lineno=979, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=980, col_offset=16), '_mesg', Load(), lineno=980, col_offset=16), [BinOp(Str('%s response: %s', lineno=980, col_offset=27), Mod(), Tuple([Name('typ', Load(), lineno=980, col_offset=48), Name('dat', Load(), lineno=980, col_offset=53)], Load(), lineno=980, col_offset=48), lineno=980, col_offset=27)], [], None, None, lineno=980, col_offset=16), lineno=980, col_offset=16)], [], lineno=979, col_offset=12)], [], lineno=978, col_offset=8), Return(Name('resp', Load(), lineno=982, col_offset=15), lineno=982, col_offset=8)], [], lineno=909, col_offset=4), FunctionDef('_get_tagged_response', arguments([Name('self', Param(), lineno=985, col_offset=29), Name('tag', Param(), lineno=985, col_offset=35)], None, None, []), [While(Num(1, lineno=987, col_offset=14), [Assign([Name('result', Store(), lineno=988, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=988, col_offset=21), 'tagged_commands', Load(), lineno=988, col_offset=21), Index(Name('tag', Load(), lineno=988, col_offset=42)), Load(), lineno=988, col_offset=21), lineno=988, col_offset=12), If(Compare(Name('result', Load(), lineno=989, col_offset=15), [IsNot()], [Name('None', Load(), lineno=989, col_offset=29)], lineno=989, col_offset=15), [Delete([Subscript(Attribute(Name('self', Load(), lineno=990, col_offset=20), 'tagged_commands', Load(), lineno=990, col_offset=20), Index(Name('tag', Load(), lineno=990, col_offset=41)), Del(), lineno=990, col_offset=20)], lineno=990, col_offset=16), Return(Name('result', Load(), lineno=991, col_offset=23), lineno=991, col_offset=16)], [], lineno=989, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=999, col_offset=16), '_get_response', Load(), lineno=999, col_offset=16), [], [], None, None, lineno=999, col_offset=16), lineno=999, col_offset=16)], [ExceptHandler(Attribute(Name('self', Load(), lineno=1000, col_offset=19), 'abort', Load(), lineno=1000, col_offset=19), Name('val', Store(), lineno=1000, col_offset=31), [If(Name('__debug__', Load(), lineno=1001, col_offset=19), [If(Compare(Attribute(Name('self', Load(), lineno=1002, col_offset=23), 'debug', Load(), lineno=1002, col_offset=23), [GtE()], [Num(1, lineno=1002, col_offset=37)], lineno=1002, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=1003, col_offset=24), 'print_log', Load(), lineno=1003, col_offset=24), [], [], None, None, lineno=1003, col_offset=24), lineno=1003, col_offset=24)], [], lineno=1002, col_offset=20)], [], lineno=1001, col_offset=16), Raise(None, None, None, lineno=1004, col_offset=16)], lineno=1000, col_offset=12)], [], lineno=998, col_offset=12)], [], lineno=987, col_offset=8)], [], lineno=985, col_offset=4), FunctionDef('_get_line', arguments([Name('self', Param(), lineno=1007, col_offset=18)], None, None, []), [Assign([Name('line', Store(), lineno=1009, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1009, col_offset=15), 'readline', Load(), lineno=1009, col_offset=15), [], [], None, None, lineno=1009, col_offset=15), lineno=1009, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=1010, col_offset=15), lineno=1010, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=1011, col_offset=18), 'abort', Load(), lineno=1011, col_offset=18), [Str('socket error: EOF', lineno=1011, col_offset=29)], [], None, None, lineno=1011, col_offset=18), None, None, lineno=1011, col_offset=12)], [], lineno=1010, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('line', Load(), lineno=1014, col_offset=15), 'endswith', Load(), lineno=1014, col_offset=15), [Str('\r\n', lineno=1014, col_offset=29)], [], None, None, lineno=1014, col_offset=15), lineno=1014, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=1015, col_offset=18), 'abort', Load(), lineno=1015, col_offset=18), [Str('socket error: unterminated line', lineno=1015, col_offset=29)], [], None, None, lineno=1015, col_offset=18), None, None, lineno=1015, col_offset=12)], [], lineno=1014, col_offset=8), Assign([Name('line', Store(), lineno=1017, col_offset=8)], Subscript(Name('line', Load(), lineno=1017, col_offset=15), Slice(None, Num(-2, lineno=1017, col_offset=22), None), Load(), lineno=1017, col_offset=15), lineno=1017, col_offset=8), If(Name('__debug__', Load(), lineno=1018, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1019, col_offset=15), 'debug', Load(), lineno=1019, col_offset=15), [GtE()], [Num(4, lineno=1019, col_offset=29)], lineno=1019, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=1020, col_offset=16), '_mesg', Load(), lineno=1020, col_offset=16), [BinOp(Str('< %s', lineno=1020, col_offset=27), Mod(), Name('line', Load(), lineno=1020, col_offset=36), lineno=1020, col_offset=27)], [], None, None, lineno=1020, col_offset=16), lineno=1020, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=1022, col_offset=16), '_log', Load(), lineno=1022, col_offset=16), [BinOp(Str('< %s', lineno=1022, col_offset=26), Mod(), Name('line', Load(), lineno=1022, col_offset=35), lineno=1022, col_offset=26)], [], None, None, lineno=1022, col_offset=16), lineno=1022, col_offset=16)], lineno=1019, col_offset=12)], [], lineno=1018, col_offset=8), Return(Name('line', Load(), lineno=1023, col_offset=15), lineno=1023, col_offset=8)], [], lineno=1007, col_offset=4), FunctionDef('_match', arguments([Name('self', Param(), lineno=1026, col_offset=15), Name('cre', Param(), lineno=1026, col_offset=21), Name('s', Param(), lineno=1026, col_offset=26)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1031, col_offset=8), 'mo', Store(), lineno=1031, col_offset=8)], Call(Attribute(Name('cre', Load(), lineno=1031, col_offset=18), 'match', Load(), lineno=1031, col_offset=18), [Name('s', Load(), lineno=1031, col_offset=28)], [], None, None, lineno=1031, col_offset=18), lineno=1031, col_offset=8), If(Name('__debug__', Load(), lineno=1032, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=1033, col_offset=15), 'mo', Load(), lineno=1033, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1033, col_offset=30)], lineno=1033, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=1033, col_offset=39), 'debug', Load(), lineno=1033, col_offset=39), [GtE()], [Num(5, lineno=1033, col_offset=53)], lineno=1033, col_offset=39)], lineno=1033, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=1034, col_offset=16), '_mesg', Load(), lineno=1034, col_offset=16), [BinOp(Str("\tmatched r'%s' => %r", lineno=1034, col_offset=27), Mod(), Tuple([Attribute(Name('cre', Load(), lineno=1034, col_offset=54), 'pattern', Load(), lineno=1034, col_offset=54), Call(Attribute(Attribute(Name('self', Load(), lineno=1034, col_offset=67), 'mo', Load(), lineno=1034, col_offset=67), 'groups', Load(), lineno=1034, col_offset=67), [], [], None, None, lineno=1034, col_offset=67)], Load(), lineno=1034, col_offset=54), lineno=1034, col_offset=27)], [], None, None, lineno=1034, col_offset=16), lineno=1034, col_offset=16)], [], lineno=1033, col_offset=12)], [], lineno=1032, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=1035, col_offset=15), 'mo', Load(), lineno=1035, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1035, col_offset=30)], lineno=1035, col_offset=15), lineno=1035, col_offset=8)], [], lineno=1026, col_offset=4), FunctionDef('_new_tag', arguments([Name('self', Param(), lineno=1038, col_offset=17)], None, None, []), [Assign([Name('tag', Store(), lineno=1040, col_offset=8)], BinOp(Str('%s%s', lineno=1040, col_offset=14), Mod(), Tuple([Attribute(Name('self', Load(), lineno=1040, col_offset=24), 'tagpre', Load(), lineno=1040, col_offset=24), Attribute(Name('self', Load(), lineno=1040, col_offset=37), 'tagnum', Load(), lineno=1040, col_offset=37)], Load(), lineno=1040, col_offset=24), lineno=1040, col_offset=14), lineno=1040, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1041, col_offset=8), 'tagnum', Store(), lineno=1041, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=1041, col_offset=22), 'tagnum', Load(), lineno=1041, col_offset=22), Add(), Num(1, lineno=1041, col_offset=36), lineno=1041, col_offset=22), lineno=1041, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=1042, col_offset=8), 'tagged_commands', Load(), lineno=1042, col_offset=8), Index(Name('tag', Load(), lineno=1042, col_offset=29)), Store(), lineno=1042, col_offset=8)], Name('None', Load(), lineno=1042, col_offset=36), lineno=1042, col_offset=8), Return(Name('tag', Load(), lineno=1043, col_offset=15), lineno=1043, col_offset=8)], [], lineno=1038, col_offset=4), FunctionDef('_checkquote', arguments([Name('self', Param(), lineno=1046, col_offset=20), Name('arg', Param(), lineno=1046, col_offset=26)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=1051, col_offset=11), [Name('arg', Load(), lineno=1051, col_offset=16)], [], None, None, lineno=1051, col_offset=11), [IsNot()], [Call(Name('type', Load(), lineno=1051, col_offset=28), [Str('', lineno=1051, col_offset=33)], [], None, None, lineno=1051, col_offset=28)], lineno=1051, col_offset=11), [Return(Name('arg', Load(), lineno=1052, col_offset=19), lineno=1052, col_offset=12)], [], lineno=1051, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=1053, col_offset=11), [Name('arg', Load(), lineno=1053, col_offset=15)], [], None, None, lineno=1053, col_offset=11), [GtE()], [Num(2, lineno=1053, col_offset=23)], lineno=1053, col_offset=11), Compare(Tuple([Subscript(Name('arg', Load(), lineno=1053, col_offset=30), Index(Num(0, lineno=1053, col_offset=34)), Load(), lineno=1053, col_offset=30), Subscript(Name('arg', Load(), lineno=1053, col_offset=37), Index(Num(-1, lineno=1053, col_offset=42)), Load(), lineno=1053, col_offset=37)], Load(), lineno=1053, col_offset=30), [In()], [Tuple([Tuple([Str('(', lineno=1053, col_offset=51), Str(')', lineno=1053, col_offset=55)], Load(), lineno=1053, col_offset=51), Tuple([Str('"', lineno=1053, col_offset=61), Str('"', lineno=1053, col_offset=65)], Load(), lineno=1053, col_offset=61)], Load(), lineno=1053, col_offset=50)], lineno=1053, col_offset=29)], lineno=1053, col_offset=11), [Return(Name('arg', Load(), lineno=1054, col_offset=19), lineno=1054, col_offset=12)], [], lineno=1053, col_offset=8), If(BoolOp(And(), [Name('arg', Load(), lineno=1055, col_offset=11), Compare(Call(Attribute(Attribute(Name('self', Load(), lineno=1055, col_offset=19), 'mustquote', Load(), lineno=1055, col_offset=19), 'search', Load(), lineno=1055, col_offset=19), [Name('arg', Load(), lineno=1055, col_offset=41)], [], None, None, lineno=1055, col_offset=19), [Is()], [Name('None', Load(), lineno=1055, col_offset=49)], lineno=1055, col_offset=19)], lineno=1055, col_offset=11), [Return(Name('arg', Load(), lineno=1056, col_offset=19), lineno=1056, col_offset=12)], [], lineno=1055, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=1057, col_offset=15), '_quote', Load(), lineno=1057, col_offset=15), [Name('arg', Load(), lineno=1057, col_offset=27)], [], None, None, lineno=1057, col_offset=15), lineno=1057, col_offset=8)], [], lineno=1046, col_offset=4), FunctionDef('_quote', arguments([Name('self', Param(), lineno=1060, col_offset=15), Name('arg', Param(), lineno=1060, col_offset=21)], None, None, []), [Assign([Name('arg', Store(), lineno=1062, col_offset=8)], Call(Attribute(Name('arg', Load(), lineno=1062, col_offset=14), 'replace', Load(), lineno=1062, col_offset=14), [Str('\\', lineno=1062, col_offset=26), Str('\\\\', lineno=1062, col_offset=32)], [], None, None, lineno=1062, col_offset=14), lineno=1062, col_offset=8), Assign([Name('arg', Store(), lineno=1063, col_offset=8)], Call(Attribute(Name('arg', Load(), lineno=1063, col_offset=14), 'replace', Load(), lineno=1063, col_offset=14), [Str('"', lineno=1063, col_offset=26), Str('\\"', lineno=1063, col_offset=31)], [], None, None, lineno=1063, col_offset=14), lineno=1063, col_offset=8), Return(BinOp(Str('"%s"', lineno=1065, col_offset=15), Mod(), Name('arg', Load(), lineno=1065, col_offset=24), lineno=1065, col_offset=15), lineno=1065, col_offset=8)], [], lineno=1060, col_offset=4), FunctionDef('_simple_command', arguments([Name('self', Param(), lineno=1068, col_offset=24), Name('name', Param(), lineno=1068, col_offset=30)], 'args', None, []), [Return(Call(Attribute(Name('self', Load(), lineno=1070, col_offset=15), '_command_complete', Load(), lineno=1070, col_offset=15), [Name('name', Load(), lineno=1070, col_offset=38), Call(Attribute(Name('self', Load(), lineno=1070, col_offset=44), '_command', Load(), lineno=1070, col_offset=44), [Name('name', Load(), lineno=1070, col_offset=58)], [], Name('args', Load(), lineno=1070, col_offset=65), None, lineno=1070, col_offset=44)], [], None, None, lineno=1070, col_offset=15), lineno=1070, col_offset=8)], [], lineno=1068, col_offset=4), FunctionDef('_untagged_response', arguments([Name('self', Param(), lineno=1073, col_offset=27), Name('typ', Param(), lineno=1073, col_offset=33), Name('dat', Param(), lineno=1073, col_offset=38), Name('name', Param(), lineno=1073, col_offset=43)], None, None, []), [If(Compare(Name('typ', Load(), lineno=1075, col_offset=11), [Eq()], [Str('NO', lineno=1075, col_offset=18)], lineno=1075, col_offset=11), [Return(Tuple([Name('typ', Load(), lineno=1076, col_offset=19), Name('dat', Load(), lineno=1076, col_offset=24)], Load(), lineno=1076, col_offset=19), lineno=1076, col_offset=12)], [], lineno=1075, col_offset=8), If(UnaryOp(Not(), Compare(Name('name', Load(), lineno=1077, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=1077, col_offset=23), 'untagged_responses', Load(), lineno=1077, col_offset=23)], lineno=1077, col_offset=15), lineno=1077, col_offset=11), [Return(Tuple([Name('typ', Load(), lineno=1078, col_offset=19), List([Name('None', Load(), lineno=1078, col_offset=25)], Load(), lineno=1078, col_offset=24)], Load(), lineno=1078, col_offset=19), lineno=1078, col_offset=12)], [], lineno=1077, col_offset=8), Assign([Name('data', Store(), lineno=1079, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1079, col_offset=15), 'untagged_responses', Load(), lineno=1079, col_offset=15), 'pop', Load(), lineno=1079, col_offset=15), [Name('name', Load(), lineno=1079, col_offset=43)], [], None, None, lineno=1079, col_offset=15), lineno=1079, col_offset=8), If(Name('__debug__', Load(), lineno=1080, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1081, col_offset=15), 'debug', Load(), lineno=1081, col_offset=15), [GtE()], [Num(5, lineno=1081, col_offset=29)], lineno=1081, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=1082, col_offset=16), '_mesg', Load(), lineno=1082, col_offset=16), [BinOp(Str('untagged_responses[%s] => %s', lineno=1082, col_offset=27), Mod(), Tuple([Name('name', Load(), lineno=1082, col_offset=61), Name('data', Load(), lineno=1082, col_offset=67)], Load(), lineno=1082, col_offset=61), lineno=1082, col_offset=27)], [], None, None, lineno=1082, col_offset=16), lineno=1082, col_offset=16)], [], lineno=1081, col_offset=12)], [], lineno=1080, col_offset=8), Return(Tuple([Name('typ', Load(), lineno=1083, col_offset=15), Name('data', Load(), lineno=1083, col_offset=20)], Load(), lineno=1083, col_offset=15), lineno=1083, col_offset=8)], [], lineno=1073, col_offset=4), If(Name('__debug__', Load(), lineno=1086, col_offset=7), [FunctionDef('_mesg', arguments([Name('self', Param(), lineno=1088, col_offset=18), Name('s', Param(), lineno=1088, col_offset=24), Name('secs', Param(), lineno=1088, col_offset=27)], None, None, [Name('None', Load(), lineno=1088, col_offset=32)]), [If(Compare(Name('secs', Load(), lineno=1089, col_offset=15), [Is()], [Name('None', Load(), lineno=1089, col_offset=23)], lineno=1089, col_offset=15), [Assign([Name('secs', Store(), lineno=1090, col_offset=16)], Call(Attribute(Name('time', Load(), lineno=1090, col_offset=23), 'time', Load(), lineno=1090, col_offset=23), [], [], None, None, lineno=1090, col_offset=23), lineno=1090, col_offset=16)], [], lineno=1089, col_offset=12), Assign([Name('tm', Store(), lineno=1091, col_offset=12)], Call(Attribute(Name('time', Load(), lineno=1091, col_offset=17), 'strftime', Load(), lineno=1091, col_offset=17), [Str('%M:%S', lineno=1091, col_offset=31), Call(Attribute(Name('time', Load(), lineno=1091, col_offset=40), 'localtime', Load(), lineno=1091, col_offset=40), [Name('secs', Load(), lineno=1091, col_offset=55)], [], None, None, lineno=1091, col_offset=40)], [], None, None, lineno=1091, col_offset=17), lineno=1091, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1092, col_offset=12), 'stderr', Load(), lineno=1092, col_offset=12), 'write', Load(), lineno=1092, col_offset=12), [BinOp(Str('  %s.%02d %s\n', lineno=1092, col_offset=29), Mod(), Tuple([Name('tm', Load(), lineno=1092, col_offset=49), BinOp(BinOp(Name('secs', Load(), lineno=1092, col_offset=54), Mult(), Num(100, lineno=1092, col_offset=59), lineno=1092, col_offset=54), Mod(), Num(100, lineno=1092, col_offset=64), lineno=1092, col_offset=53), Name('s', Load(), lineno=1092, col_offset=69)], Load(), lineno=1092, col_offset=49), lineno=1092, col_offset=29)], [], None, None, lineno=1092, col_offset=12), lineno=1092, col_offset=12), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1093, col_offset=12), 'stderr', Load(), lineno=1093, col_offset=12), 'flush', Load(), lineno=1093, col_offset=12), [], [], None, None, lineno=1093, col_offset=12), lineno=1093, col_offset=12)], [], lineno=1088, col_offset=8), FunctionDef('_dump_ur', arguments([Name('self', Param(), lineno=1095, col_offset=21), Name('dict', Param(), lineno=1095, col_offset=27)], None, None, []), [Assign([Name('l', Store(), lineno=1097, col_offset=12)], Call(Attribute(Name('dict', Load(), lineno=1097, col_offset=16), 'items', Load(), lineno=1097, col_offset=16), [], [], None, None, lineno=1097, col_offset=16), lineno=1097, col_offset=12), If(UnaryOp(Not(), Name('l', Load(), lineno=1098, col_offset=19), lineno=1098, col_offset=15), [Return(None, lineno=1098, col_offset=22)], [], lineno=1098, col_offset=12), Assign([Name('t', Store(), lineno=1099, col_offset=12)], Str('\n\t\t', lineno=1099, col_offset=16), lineno=1099, col_offset=12), Assign([Name('l', Store(), lineno=1100, col_offset=12)], Call(Name('map', Load(), lineno=1100, col_offset=16), [Lambda(arguments([Name('x', Param(), lineno=1100, col_offset=27)], None, None, []), BinOp(Str('%s: "%s"', lineno=1100, col_offset=29), Mod(), Tuple([Subscript(Name('x', Load(), lineno=1100, col_offset=43), Index(Num(0, lineno=1100, col_offset=45)), Load(), lineno=1100, col_offset=43), BoolOp(Or(), [BoolOp(And(), [Subscript(Subscript(Name('x', Load(), lineno=1100, col_offset=49), Index(Num(1, lineno=1100, col_offset=51)), Load(), lineno=1100, col_offset=49), Index(Num(0, lineno=1100, col_offset=54)), Load(), lineno=1100, col_offset=49), Call(Attribute(Str('" "', lineno=1100, col_offset=61), 'join', Load(), lineno=1100, col_offset=61), [Subscript(Name('x', Load(), lineno=1100, col_offset=72), Index(Num(1, lineno=1100, col_offset=74)), Load(), lineno=1100, col_offset=72)], [], None, None, lineno=1100, col_offset=61)], lineno=1100, col_offset=49), Str('', lineno=1100, col_offset=81)], lineno=1100, col_offset=49)], Load(), lineno=1100, col_offset=43), lineno=1100, col_offset=29), lineno=1100, col_offset=20), Name('l', Load(), lineno=1100, col_offset=86)], [], None, None, lineno=1100, col_offset=16), lineno=1100, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1101, col_offset=12), '_mesg', Load(), lineno=1101, col_offset=12), [BinOp(Str('untagged responses dump:%s%s', lineno=1101, col_offset=23), Mod(), Tuple([Name('t', Load(), lineno=1101, col_offset=57), Call(Attribute(Name('t', Load(), lineno=1101, col_offset=60), 'join', Load(), lineno=1101, col_offset=60), [Name('l', Load(), lineno=1101, col_offset=67)], [], None, None, lineno=1101, col_offset=60)], Load(), lineno=1101, col_offset=57), lineno=1101, col_offset=23)], [], None, None, lineno=1101, col_offset=12), lineno=1101, col_offset=12)], [], lineno=1095, col_offset=8), FunctionDef('_log', arguments([Name('self', Param(), lineno=1103, col_offset=17), Name('line', Param(), lineno=1103, col_offset=23)], None, None, []), [Assign([Subscript(Attribute(Name('self', Load(), lineno=1105, col_offset=12), '_cmd_log', Load(), lineno=1105, col_offset=12), Index(Attribute(Name('self', Load(), lineno=1105, col_offset=26), '_cmd_log_idx', Load(), lineno=1105, col_offset=26)), Store(), lineno=1105, col_offset=12)], Tuple([Name('line', Load(), lineno=1105, col_offset=48), Call(Attribute(Name('time', Load(), lineno=1105, col_offset=54), 'time', Load(), lineno=1105, col_offset=54), [], [], None, None, lineno=1105, col_offset=54)], Load(), lineno=1105, col_offset=48), lineno=1105, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=1106, col_offset=12), '_cmd_log_idx', Store(), lineno=1106, col_offset=12), Add(), Num(1, lineno=1106, col_offset=33), lineno=1106, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=1107, col_offset=15), '_cmd_log_idx', Load(), lineno=1107, col_offset=15), [GtE()], [Attribute(Name('self', Load(), lineno=1107, col_offset=36), '_cmd_log_len', Load(), lineno=1107, col_offset=36)], lineno=1107, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=1108, col_offset=16), '_cmd_log_idx', Store(), lineno=1108, col_offset=16)], Num(0, lineno=1108, col_offset=36), lineno=1108, col_offset=16)], [], lineno=1107, col_offset=12)], [], lineno=1103, col_offset=8), FunctionDef('print_log', arguments([Name('self', Param(), lineno=1110, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1111, col_offset=12), '_mesg', Load(), lineno=1111, col_offset=12), [BinOp(Str('last %d IMAP4 interactions:', lineno=1111, col_offset=23), Mod(), Call(Name('len', Load(), lineno=1111, col_offset=55), [Attribute(Name('self', Load(), lineno=1111, col_offset=59), '_cmd_log', Load(), lineno=1111, col_offset=59)], [], None, None, lineno=1111, col_offset=55), lineno=1111, col_offset=23)], [], None, None, lineno=1111, col_offset=12), lineno=1111, col_offset=12), Assign([Tuple([Name('i', Store(), lineno=1112, col_offset=12), Name('n', Store(), lineno=1112, col_offset=15)], Store(), lineno=1112, col_offset=12)], Tuple([Attribute(Name('self', Load(), lineno=1112, col_offset=19), '_cmd_log_idx', Load(), lineno=1112, col_offset=19), Attribute(Name('self', Load(), lineno=1112, col_offset=38), '_cmd_log_len', Load(), lineno=1112, col_offset=38)], Load(), lineno=1112, col_offset=19), lineno=1112, col_offset=12), While(Name('n', Load(), lineno=1113, col_offset=18), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=1115, col_offset=20), '_mesg', Load(), lineno=1115, col_offset=20), [], [], Subscript(Attribute(Name('self', Load(), lineno=1115, col_offset=32), '_cmd_log', Load(), lineno=1115, col_offset=32), Index(Name('i', Load(), lineno=1115, col_offset=46)), Load(), lineno=1115, col_offset=32), None, lineno=1115, col_offset=20), lineno=1115, col_offset=20)], [ExceptHandler(None, None, [Pass( lineno=1117, col_offset=20)], lineno=1116, col_offset=16)], [], lineno=1114, col_offset=16), AugAssign(Name('i', Store(), lineno=1118, col_offset=16), Add(), Num(1, lineno=1118, col_offset=21), lineno=1118, col_offset=16), If(Compare(Name('i', Load(), lineno=1119, col_offset=19), [GtE()], [Attribute(Name('self', Load(), lineno=1119, col_offset=24), '_cmd_log_len', Load(), lineno=1119, col_offset=24)], lineno=1119, col_offset=19), [Assign([Name('i', Store(), lineno=1120, col_offset=20)], Num(0, lineno=1120, col_offset=24), lineno=1120, col_offset=20)], [], lineno=1119, col_offset=16), AugAssign(Name('n', Store(), lineno=1121, col_offset=16), Sub(), Num(1, lineno=1121, col_offset=21), lineno=1121, col_offset=16)], [], lineno=1113, col_offset=12)], [], lineno=1110, col_offset=8)], [], lineno=1086, col_offset=4)], [], lineno=99, col_offset=0), TryExcept([Import([alias('ssl', None)], lineno=1126, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=1127, col_offset=7), None, [Pass( lineno=1128, col_offset=4)], lineno=1127, col_offset=0)], [ClassDef('IMAP4_SSL', [Name('IMAP4', Load(), lineno=1130, col_offset=20)], [Expr(Str("IMAP4 client class over SSL connection\n\n        Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile]]]])\n\n                host - host's name (default: localhost);\n                port - port number (default: standard IMAP4 SSL port).\n                keyfile - PEM formatted file that contains your private key (default: None);\n                certfile - PEM formatted certificate chain file (default: None);\n\n        for more documentation see the docstring of the parent class IMAP4.\n        ", lineno=1142, col_offset=-1), lineno=1142, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1145, col_offset=21), Name('host', Param(), lineno=1145, col_offset=27), Name('port', Param(), lineno=1145, col_offset=38), Name('keyfile', Param(), lineno=1145, col_offset=61), Name('certfile', Param(), lineno=1145, col_offset=77)], None, None, [Str('', lineno=1145, col_offset=34), Name('IMAP4_SSL_PORT', Load(), lineno=1145, col_offset=45), Name('None', Load(), lineno=1145, col_offset=71), Name('None', Load(), lineno=1145, col_offset=88)]), [Assign([Attribute(Name('self', Load(), lineno=1146, col_offset=12), 'keyfile', Store(), lineno=1146, col_offset=12)], Name('keyfile', Load(), lineno=1146, col_offset=27), lineno=1146, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1147, col_offset=12), 'certfile', Store(), lineno=1147, col_offset=12)], Name('certfile', Load(), lineno=1147, col_offset=28), lineno=1147, col_offset=12), Expr(Call(Attribute(Name('IMAP4', Load(), lineno=1148, col_offset=12), '__init__', Load(), lineno=1148, col_offset=12), [Name('self', Load(), lineno=1148, col_offset=27), Name('host', Load(), lineno=1148, col_offset=33), Name('port', Load(), lineno=1148, col_offset=39)], [], None, None, lineno=1148, col_offset=12), lineno=1148, col_offset=12)], [], lineno=1145, col_offset=8), FunctionDef('open', arguments([Name('self', Param(), lineno=1151, col_offset=17), Name('host', Param(), lineno=1151, col_offset=23), Name('port', Param(), lineno=1151, col_offset=34)], None, None, [Str('', lineno=1151, col_offset=30), Name('IMAP4_SSL_PORT', Load(), lineno=1151, col_offset=41)]), [Expr(Str('Setup connection to remote server on "host:port".\n                (default: localhost:standard IMAP4 SSL port).\n            This connection will be used by the routines:\n                read, readline, send, shutdown.\n            ', lineno=1156, col_offset=-1), lineno=1156, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1157, col_offset=12), 'host', Store(), lineno=1157, col_offset=12)], Name('host', Load(), lineno=1157, col_offset=24), lineno=1157, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1158, col_offset=12), 'port', Store(), lineno=1158, col_offset=12)], Name('port', Load(), lineno=1158, col_offset=24), lineno=1158, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1159, col_offset=12), 'sock', Store(), lineno=1159, col_offset=12)], Call(Attribute(Name('socket', Load(), lineno=1159, col_offset=24), 'create_connection', Load(), lineno=1159, col_offset=24), [Tuple([Name('host', Load(), lineno=1159, col_offset=50), Name('port', Load(), lineno=1159, col_offset=56)], Load(), lineno=1159, col_offset=50)], [], None, None, lineno=1159, col_offset=24), lineno=1159, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1160, col_offset=12), 'sslobj', Store(), lineno=1160, col_offset=12)], Call(Attribute(Name('ssl', Load(), lineno=1160, col_offset=26), 'wrap_socket', Load(), lineno=1160, col_offset=26), [Attribute(Name('self', Load(), lineno=1160, col_offset=42), 'sock', Load(), lineno=1160, col_offset=42), Attribute(Name('self', Load(), lineno=1160, col_offset=53), 'keyfile', Load(), lineno=1160, col_offset=53), Attribute(Name('self', Load(), lineno=1160, col_offset=67), 'certfile', Load(), lineno=1160, col_offset=67)], [], None, None, lineno=1160, col_offset=26), lineno=1160, col_offset=12)], [], lineno=1151, col_offset=8), FunctionDef('read', arguments([Name('self', Param(), lineno=1163, col_offset=17), Name('size', Param(), lineno=1163, col_offset=23)], None, None, []), [Expr(Str("Read 'size' bytes from remote.", lineno=1164, col_offset=12), lineno=1164, col_offset=12), Assign([Name('chunks', Store(), lineno=1166, col_offset=12)], List([], Load(), lineno=1166, col_offset=21), lineno=1166, col_offset=12), Assign([Name('read', Store(), lineno=1167, col_offset=12)], Num(0, lineno=1167, col_offset=19), lineno=1167, col_offset=12), While(Compare(Name('read', Load(), lineno=1168, col_offset=18), [Lt()], [Name('size', Load(), lineno=1168, col_offset=25)], lineno=1168, col_offset=18), [Assign([Name('data', Store(), lineno=1169, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1169, col_offset=23), 'sslobj', Load(), lineno=1169, col_offset=23), 'read', Load(), lineno=1169, col_offset=23), [Call(Name('min', Load(), lineno=1169, col_offset=40), [BinOp(Name('size', Load(), lineno=1169, col_offset=44), Sub(), Name('read', Load(), lineno=1169, col_offset=49), lineno=1169, col_offset=44), Num(16384, lineno=1169, col_offset=55)], [], None, None, lineno=1169, col_offset=40)], [], None, None, lineno=1169, col_offset=23), lineno=1169, col_offset=16), AugAssign(Name('read', Store(), lineno=1170, col_offset=16), Add(), Call(Name('len', Load(), lineno=1170, col_offset=24), [Name('data', Load(), lineno=1170, col_offset=28)], [], None, None, lineno=1170, col_offset=24), lineno=1170, col_offset=16), Expr(Call(Attribute(Name('chunks', Load(), lineno=1171, col_offset=16), 'append', Load(), lineno=1171, col_offset=16), [Name('data', Load(), lineno=1171, col_offset=30)], [], None, None, lineno=1171, col_offset=16), lineno=1171, col_offset=16)], [], lineno=1168, col_offset=12), Return(Call(Attribute(Str('', lineno=1173, col_offset=19), 'join', Load(), lineno=1173, col_offset=19), [Name('chunks', Load(), lineno=1173, col_offset=27)], [], None, None, lineno=1173, col_offset=19), lineno=1173, col_offset=12)], [], lineno=1163, col_offset=8), FunctionDef('readline', arguments([Name('self', Param(), lineno=1176, col_offset=21)], None, None, []), [Expr(Str('Read line from remote.', lineno=1177, col_offset=12), lineno=1177, col_offset=12), Assign([Name('line', Store(), lineno=1178, col_offset=12)], List([], Load(), lineno=1178, col_offset=19), lineno=1178, col_offset=12), While(Num(1, lineno=1179, col_offset=18), [Assign([Name('char', Store(), lineno=1180, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1180, col_offset=23), 'sslobj', Load(), lineno=1180, col_offset=23), 'read', Load(), lineno=1180, col_offset=23), [Num(1, lineno=1180, col_offset=40)], [], None, None, lineno=1180, col_offset=23), lineno=1180, col_offset=16), Expr(Call(Attribute(Name('line', Load(), lineno=1181, col_offset=16), 'append', Load(), lineno=1181, col_offset=16), [Name('char', Load(), lineno=1181, col_offset=28)], [], None, None, lineno=1181, col_offset=16), lineno=1181, col_offset=16), If(Compare(Name('char', Load(), lineno=1182, col_offset=19), [In()], [Tuple([Str('\n', lineno=1182, col_offset=28), Str('', lineno=1182, col_offset=34)], Load(), lineno=1182, col_offset=28)], lineno=1182, col_offset=19), [Return(Call(Attribute(Str('', lineno=1182, col_offset=46), 'join', Load(), lineno=1182, col_offset=46), [Name('line', Load(), lineno=1182, col_offset=54)], [], None, None, lineno=1182, col_offset=46), lineno=1182, col_offset=39)], [], lineno=1182, col_offset=16)], [], lineno=1179, col_offset=12)], [], lineno=1176, col_offset=8), FunctionDef('send', arguments([Name('self', Param(), lineno=1185, col_offset=17), Name('data', Param(), lineno=1185, col_offset=23)], None, None, []), [Expr(Str('Send data to remote.', lineno=1186, col_offset=12), lineno=1186, col_offset=12), Assign([Name('bytes', Store(), lineno=1187, col_offset=12)], Call(Name('len', Load(), lineno=1187, col_offset=20), [Name('data', Load(), lineno=1187, col_offset=24)], [], None, None, lineno=1187, col_offset=20), lineno=1187, col_offset=12), While(Compare(Name('bytes', Load(), lineno=1188, col_offset=18), [Gt()], [Num(0, lineno=1188, col_offset=26)], lineno=1188, col_offset=18), [Assign([Name('sent', Store(), lineno=1189, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1189, col_offset=23), 'sslobj', Load(), lineno=1189, col_offset=23), 'write', Load(), lineno=1189, col_offset=23), [Name('data', Load(), lineno=1189, col_offset=41)], [], None, None, lineno=1189, col_offset=23), lineno=1189, col_offset=16), If(Compare(Name('sent', Load(), lineno=1190, col_offset=19), [Eq()], [Name('bytes', Load(), lineno=1190, col_offset=27)], lineno=1190, col_offset=19), [Break( lineno=1191, col_offset=20)], [], lineno=1190, col_offset=16), Assign([Name('data', Store(), lineno=1192, col_offset=16)], Subscript(Name('data', Load(), lineno=1192, col_offset=23), Slice(Name('sent', Load(), lineno=1192, col_offset=28), None, None), Load(), lineno=1192, col_offset=23), lineno=1192, col_offset=16), Assign([Name('bytes', Store(), lineno=1193, col_offset=16)], BinOp(Name('bytes', Load(), lineno=1193, col_offset=24), Sub(), Name('sent', Load(), lineno=1193, col_offset=32), lineno=1193, col_offset=24), lineno=1193, col_offset=16)], [], lineno=1188, col_offset=12)], [], lineno=1185, col_offset=8), FunctionDef('shutdown', arguments([Name('self', Param(), lineno=1196, col_offset=21)], None, None, []), [Expr(Str('Close I/O established in "open".', lineno=1197, col_offset=12), lineno=1197, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1198, col_offset=12), 'sock', Load(), lineno=1198, col_offset=12), 'close', Load(), lineno=1198, col_offset=12), [], [], None, None, lineno=1198, col_offset=12), lineno=1198, col_offset=12)], [], lineno=1196, col_offset=8), FunctionDef('socket', arguments([Name('self', Param(), lineno=1201, col_offset=19)], None, None, []), [Expr(Str('Return socket instance used to connect to IMAP4 server.\n\n            socket = <instance>.socket()\n            ', lineno=1205, col_offset=-1), lineno=1205, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=1206, col_offset=19), 'sock', Load(), lineno=1206, col_offset=19), lineno=1206, col_offset=12)], [], lineno=1201, col_offset=8), FunctionDef('ssl', arguments([Name('self', Param(), lineno=1209, col_offset=16)], None, None, []), [Expr(Str('Return SSLObject instance used to communicate with the IMAP4 server.\n\n            ssl = ssl.wrap_socket(<instance>.socket)\n            ', lineno=1213, col_offset=-1), lineno=1213, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=1214, col_offset=19), 'sslobj', Load(), lineno=1214, col_offset=19), lineno=1214, col_offset=12)], [], lineno=1209, col_offset=8)], [], lineno=1130, col_offset=4), Expr(Call(Attribute(Name('__all__', Load(), lineno=1216, col_offset=4), 'append', Load(), lineno=1216, col_offset=4), [Str('IMAP4_SSL', lineno=1216, col_offset=19)], [], None, None, lineno=1216, col_offset=4), lineno=1216, col_offset=4)], lineno=1125, col_offset=0), ClassDef('IMAP4_stream', [Name('IMAP4', Load(), lineno=1219, col_offset=19)], [Expr(Str('IMAP4 client class over a stream\n\n    Instantiate with: IMAP4_stream(command)\n\n            where "command" is a string that can be passed to subprocess.Popen()\n\n    for more documentation see the docstring of the parent class IMAP4.\n    ', lineno=1228, col_offset=-1), lineno=1228, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1231, col_offset=17), Name('command', Param(), lineno=1231, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1232, col_offset=8), 'command', Store(), lineno=1232, col_offset=8)], Name('command', Load(), lineno=1232, col_offset=23), lineno=1232, col_offset=8), Expr(Call(Attribute(Name('IMAP4', Load(), lineno=1233, col_offset=8), '__init__', Load(), lineno=1233, col_offset=8), [Name('self', Load(), lineno=1233, col_offset=23)], [], None, None, lineno=1233, col_offset=8), lineno=1233, col_offset=8)], [], lineno=1231, col_offset=4), FunctionDef('open', arguments([Name('self', Param(), lineno=1236, col_offset=13), Name('host', Param(), lineno=1236, col_offset=19), Name('port', Param(), lineno=1236, col_offset=32)], None, None, [Name('None', Load(), lineno=1236, col_offset=26), Name('None', Load(), lineno=1236, col_offset=39)]), [Expr(Str('Setup a stream connection.\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        ', lineno=1240, col_offset=-1), lineno=1240, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1241, col_offset=8), 'host', Store(), lineno=1241, col_offset=8)], Name('None', Load(), lineno=1241, col_offset=20), lineno=1241, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1242, col_offset=8), 'port', Store(), lineno=1242, col_offset=8)], Name('None', Load(), lineno=1242, col_offset=20), lineno=1242, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1243, col_offset=8), 'sock', Store(), lineno=1243, col_offset=8)], Name('None', Load(), lineno=1243, col_offset=20), lineno=1243, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1244, col_offset=8), 'file', Store(), lineno=1244, col_offset=8)], Name('None', Load(), lineno=1244, col_offset=20), lineno=1244, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1245, col_offset=8), 'process', Store(), lineno=1245, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=1245, col_offset=23), 'Popen', Load(), lineno=1245, col_offset=23), [Attribute(Name('self', Load(), lineno=1245, col_offset=40), 'command', Load(), lineno=1245, col_offset=40)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=1246, col_offset=18), 'PIPE', Load(), lineno=1246, col_offset=18)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=1246, col_offset=42), 'PIPE', Load(), lineno=1246, col_offset=42)), keyword('shell', Name('True', Load(), lineno=1247, col_offset=18)), keyword('close_fds', Name('True', Load(), lineno=1247, col_offset=34))], None, None, lineno=1245, col_offset=23), lineno=1245, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1248, col_offset=8), 'writefile', Store(), lineno=1248, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1248, col_offset=25), 'process', Load(), lineno=1248, col_offset=25), 'stdin', Load(), lineno=1248, col_offset=25), lineno=1248, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1249, col_offset=8), 'readfile', Store(), lineno=1249, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1249, col_offset=24), 'process', Load(), lineno=1249, col_offset=24), 'stdout', Load(), lineno=1249, col_offset=24), lineno=1249, col_offset=8)], [], lineno=1236, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=1252, col_offset=13), Name('size', Param(), lineno=1252, col_offset=19)], None, None, []), [Expr(Str("Read 'size' bytes from remote.", lineno=1253, col_offset=8), lineno=1253, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1254, col_offset=15), 'readfile', Load(), lineno=1254, col_offset=15), 'read', Load(), lineno=1254, col_offset=15), [Name('size', Load(), lineno=1254, col_offset=34)], [], None, None, lineno=1254, col_offset=15), lineno=1254, col_offset=8)], [], lineno=1252, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=1257, col_offset=17)], None, None, []), [Expr(Str('Read line from remote.', lineno=1258, col_offset=8), lineno=1258, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1259, col_offset=15), 'readfile', Load(), lineno=1259, col_offset=15), 'readline', Load(), lineno=1259, col_offset=15), [], [], None, None, lineno=1259, col_offset=15), lineno=1259, col_offset=8)], [], lineno=1257, col_offset=4), FunctionDef('send', arguments([Name('self', Param(), lineno=1262, col_offset=13), Name('data', Param(), lineno=1262, col_offset=19)], None, None, []), [Expr(Str('Send data to remote.', lineno=1263, col_offset=8), lineno=1263, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1264, col_offset=8), 'writefile', Load(), lineno=1264, col_offset=8), 'write', Load(), lineno=1264, col_offset=8), [Name('data', Load(), lineno=1264, col_offset=29)], [], None, None, lineno=1264, col_offset=8), lineno=1264, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1265, col_offset=8), 'writefile', Load(), lineno=1265, col_offset=8), 'flush', Load(), lineno=1265, col_offset=8), [], [], None, None, lineno=1265, col_offset=8), lineno=1265, col_offset=8)], [], lineno=1262, col_offset=4), FunctionDef('shutdown', arguments([Name('self', Param(), lineno=1268, col_offset=17)], None, None, []), [Expr(Str('Close I/O established in "open".', lineno=1269, col_offset=8), lineno=1269, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1270, col_offset=8), 'readfile', Load(), lineno=1270, col_offset=8), 'close', Load(), lineno=1270, col_offset=8), [], [], None, None, lineno=1270, col_offset=8), lineno=1270, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1271, col_offset=8), 'writefile', Load(), lineno=1271, col_offset=8), 'close', Load(), lineno=1271, col_offset=8), [], [], None, None, lineno=1271, col_offset=8), lineno=1271, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1272, col_offset=8), 'process', Load(), lineno=1272, col_offset=8), 'wait', Load(), lineno=1272, col_offset=8), [], [], None, None, lineno=1272, col_offset=8), lineno=1272, col_offset=8)], [], lineno=1268, col_offset=4)], [], lineno=1219, col_offset=0), ClassDef('_Authenticator', [], [Expr(Str('Private class to provide en/decoding\n            for base64-based authentication conversation.\n    ', lineno=1280, col_offset=-1), lineno=1280, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1282, col_offset=17), Name('mechinst', Param(), lineno=1282, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1283, col_offset=8), 'mech', Store(), lineno=1283, col_offset=8)], Name('mechinst', Load(), lineno=1283, col_offset=20), lineno=1283, col_offset=8)], [], lineno=1282, col_offset=4), FunctionDef('process', arguments([Name('self', Param(), lineno=1285, col_offset=16), Name('data', Param(), lineno=1285, col_offset=22)], None, None, []), [Assign([Name('ret', Store(), lineno=1286, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1286, col_offset=14), 'mech', Load(), lineno=1286, col_offset=14), [Call(Attribute(Name('self', Load(), lineno=1286, col_offset=24), 'decode', Load(), lineno=1286, col_offset=24), [Name('data', Load(), lineno=1286, col_offset=36)], [], None, None, lineno=1286, col_offset=24)], [], None, None, lineno=1286, col_offset=14), lineno=1286, col_offset=8), If(Compare(Name('ret', Load(), lineno=1287, col_offset=11), [Is()], [Name('None', Load(), lineno=1287, col_offset=18)], lineno=1287, col_offset=11), [Return(Str('*', lineno=1288, col_offset=19), lineno=1288, col_offset=12)], [], lineno=1287, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=1289, col_offset=15), 'encode', Load(), lineno=1289, col_offset=15), [Name('ret', Load(), lineno=1289, col_offset=27)], [], None, None, lineno=1289, col_offset=15), lineno=1289, col_offset=8)], [], lineno=1285, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=1291, col_offset=15), Name('inp', Param(), lineno=1291, col_offset=21)], None, None, []), [Assign([Name('oup', Store(), lineno=1300, col_offset=8)], Str('', lineno=1300, col_offset=14), lineno=1300, col_offset=8), While(Name('inp', Load(), lineno=1301, col_offset=14), [If(Compare(Call(Name('len', Load(), lineno=1302, col_offset=15), [Name('inp', Load(), lineno=1302, col_offset=19)], [], None, None, lineno=1302, col_offset=15), [Gt()], [Num(48, lineno=1302, col_offset=26)], lineno=1302, col_offset=15), [Assign([Name('t', Store(), lineno=1303, col_offset=16)], Subscript(Name('inp', Load(), lineno=1303, col_offset=20), Slice(None, Num(48, lineno=1303, col_offset=25), None), Load(), lineno=1303, col_offset=20), lineno=1303, col_offset=16), Assign([Name('inp', Store(), lineno=1304, col_offset=16)], Subscript(Name('inp', Load(), lineno=1304, col_offset=22), Slice(Num(48, lineno=1304, col_offset=26), None, None), Load(), lineno=1304, col_offset=22), lineno=1304, col_offset=16)], [Assign([Name('t', Store(), lineno=1306, col_offset=16)], Name('inp', Load(), lineno=1306, col_offset=20), lineno=1306, col_offset=16), Assign([Name('inp', Store(), lineno=1307, col_offset=16)], Str('', lineno=1307, col_offset=22), lineno=1307, col_offset=16)], lineno=1302, col_offset=12), Assign([Name('e', Store(), lineno=1308, col_offset=12)], Call(Attribute(Name('binascii', Load(), lineno=1308, col_offset=16), 'b2a_base64', Load(), lineno=1308, col_offset=16), [Name('t', Load(), lineno=1308, col_offset=36)], [], None, None, lineno=1308, col_offset=16), lineno=1308, col_offset=12), If(Name('e', Load(), lineno=1309, col_offset=15), [Assign([Name('oup', Store(), lineno=1310, col_offset=16)], BinOp(Name('oup', Load(), lineno=1310, col_offset=22), Add(), Subscript(Name('e', Load(), lineno=1310, col_offset=28), Slice(None, Num(-1, lineno=1310, col_offset=32), None), Load(), lineno=1310, col_offset=28), lineno=1310, col_offset=22), lineno=1310, col_offset=16)], [], lineno=1309, col_offset=12)], [], lineno=1301, col_offset=8), Return(Name('oup', Load(), lineno=1311, col_offset=15), lineno=1311, col_offset=8)], [], lineno=1291, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=1313, col_offset=15), Name('inp', Param(), lineno=1313, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Name('inp', Load(), lineno=1314, col_offset=15), lineno=1314, col_offset=11), [Return(Str('', lineno=1315, col_offset=19), lineno=1315, col_offset=12)], [], lineno=1314, col_offset=8), Return(Call(Attribute(Name('binascii', Load(), lineno=1316, col_offset=15), 'a2b_base64', Load(), lineno=1316, col_offset=15), [Name('inp', Load(), lineno=1316, col_offset=35)], [], None, None, lineno=1316, col_offset=15), lineno=1316, col_offset=8)], [], lineno=1313, col_offset=4)], [], lineno=1276, col_offset=0), Assign([Name('Mon2num', Store(), lineno=1320, col_offset=0)], Dict([Str('Jan', lineno=1320, col_offset=11), Str('Feb', lineno=1320, col_offset=21), Str('Mar', lineno=1320, col_offset=31), Str('Apr', lineno=1320, col_offset=41), Str('May', lineno=1320, col_offset=51), Str('Jun', lineno=1320, col_offset=61), Str('Jul', lineno=1321, col_offset=8), Str('Aug', lineno=1321, col_offset=18), Str('Sep', lineno=1321, col_offset=28), Str('Oct', lineno=1321, col_offset=38), Str('Nov', lineno=1321, col_offset=49), Str('Dec', lineno=1321, col_offset=60)], [Num(1, lineno=1320, col_offset=18), Num(2, lineno=1320, col_offset=28), Num(3, lineno=1320, col_offset=38), Num(4, lineno=1320, col_offset=48), Num(5, lineno=1320, col_offset=58), Num(6, lineno=1320, col_offset=68), Num(7, lineno=1321, col_offset=15), Num(8, lineno=1321, col_offset=25), Num(9, lineno=1321, col_offset=35), Num(10, lineno=1321, col_offset=45), Num(11, lineno=1321, col_offset=56), Num(12, lineno=1321, col_offset=67)], lineno=1320, col_offset=10), lineno=1320, col_offset=0), FunctionDef('Internaldate2tuple', arguments([Name('resp', Param(), lineno=1323, col_offset=23)], None, None, []), [Expr(Str('Convert IMAP4 INTERNALDATE to UT.\n\n    Returns Python time module tuple.\n    ', lineno=1327, col_offset=-1), lineno=1327, col_offset=-1), Assign([Name('mo', Store(), lineno=1329, col_offset=4)], Call(Attribute(Name('InternalDate', Load(), lineno=1329, col_offset=9), 'match', Load(), lineno=1329, col_offset=9), [Name('resp', Load(), lineno=1329, col_offset=28)], [], None, None, lineno=1329, col_offset=9), lineno=1329, col_offset=4), If(UnaryOp(Not(), Name('mo', Load(), lineno=1330, col_offset=11), lineno=1330, col_offset=7), [Return(Name('None', Load(), lineno=1331, col_offset=15), lineno=1331, col_offset=8)], [], lineno=1330, col_offset=4), Assign([Name('mon', Store(), lineno=1333, col_offset=4)], Subscript(Name('Mon2num', Load(), lineno=1333, col_offset=10), Index(Call(Attribute(Name('mo', Load(), lineno=1333, col_offset=18), 'group', Load(), lineno=1333, col_offset=18), [Str('mon', lineno=1333, col_offset=27)], [], None, None, lineno=1333, col_offset=18)), Load(), lineno=1333, col_offset=10), lineno=1333, col_offset=4), Assign([Name('zonen', Store(), lineno=1334, col_offset=4)], Call(Attribute(Name('mo', Load(), lineno=1334, col_offset=12), 'group', Load(), lineno=1334, col_offset=12), [Str('zonen', lineno=1334, col_offset=21)], [], None, None, lineno=1334, col_offset=12), lineno=1334, col_offset=4), Assign([Name('day', Store(), lineno=1336, col_offset=4)], Call(Name('int', Load(), lineno=1336, col_offset=10), [Call(Attribute(Name('mo', Load(), lineno=1336, col_offset=14), 'group', Load(), lineno=1336, col_offset=14), [Str('day', lineno=1336, col_offset=23)], [], None, None, lineno=1336, col_offset=14)], [], None, None, lineno=1336, col_offset=10), lineno=1336, col_offset=4), Assign([Name('year', Store(), lineno=1337, col_offset=4)], Call(Name('int', Load(), lineno=1337, col_offset=11), [Call(Attribute(Name('mo', Load(), lineno=1337, col_offset=15), 'group', Load(), lineno=1337, col_offset=15), [Str('year', lineno=1337, col_offset=24)], [], None, None, lineno=1337, col_offset=15)], [], None, None, lineno=1337, col_offset=11), lineno=1337, col_offset=4), Assign([Name('hour', Store(), lineno=1338, col_offset=4)], Call(Name('int', Load(), lineno=1338, col_offset=11), [Call(Attribute(Name('mo', Load(), lineno=1338, col_offset=15), 'group', Load(), lineno=1338, col_offset=15), [Str('hour', lineno=1338, col_offset=24)], [], None, None, lineno=1338, col_offset=15)], [], None, None, lineno=1338, col_offset=11), lineno=1338, col_offset=4), Assign([Name('min', Store(), lineno=1339, col_offset=4)], Call(Name('int', Load(), lineno=1339, col_offset=10), [Call(Attribute(Name('mo', Load(), lineno=1339, col_offset=14), 'group', Load(), lineno=1339, col_offset=14), [Str('min', lineno=1339, col_offset=23)], [], None, None, lineno=1339, col_offset=14)], [], None, None, lineno=1339, col_offset=10), lineno=1339, col_offset=4), Assign([Name('sec', Store(), lineno=1340, col_offset=4)], Call(Name('int', Load(), lineno=1340, col_offset=10), [Call(Attribute(Name('mo', Load(), lineno=1340, col_offset=14), 'group', Load(), lineno=1340, col_offset=14), [Str('sec', lineno=1340, col_offset=23)], [], None, None, lineno=1340, col_offset=14)], [], None, None, lineno=1340, col_offset=10), lineno=1340, col_offset=4), Assign([Name('zoneh', Store(), lineno=1341, col_offset=4)], Call(Name('int', Load(), lineno=1341, col_offset=12), [Call(Attribute(Name('mo', Load(), lineno=1341, col_offset=16), 'group', Load(), lineno=1341, col_offset=16), [Str('zoneh', lineno=1341, col_offset=25)], [], None, None, lineno=1341, col_offset=16)], [], None, None, lineno=1341, col_offset=12), lineno=1341, col_offset=4), Assign([Name('zonem', Store(), lineno=1342, col_offset=4)], Call(Name('int', Load(), lineno=1342, col_offset=12), [Call(Attribute(Name('mo', Load(), lineno=1342, col_offset=16), 'group', Load(), lineno=1342, col_offset=16), [Str('zonem', lineno=1342, col_offset=25)], [], None, None, lineno=1342, col_offset=16)], [], None, None, lineno=1342, col_offset=12), lineno=1342, col_offset=4), Assign([Name('zone', Store(), lineno=1346, col_offset=4)], BinOp(BinOp(BinOp(Name('zoneh', Load(), lineno=1346, col_offset=12), Mult(), Num(60, lineno=1346, col_offset=18), lineno=1346, col_offset=12), Add(), Name('zonem', Load(), lineno=1346, col_offset=23), lineno=1346, col_offset=12), Mult(), Num(60, lineno=1346, col_offset=30), lineno=1346, col_offset=11), lineno=1346, col_offset=4), If(Compare(Name('zonen', Load(), lineno=1347, col_offset=7), [Eq()], [Str('-', lineno=1347, col_offset=16)], lineno=1347, col_offset=7), [Assign([Name('zone', Store(), lineno=1348, col_offset=8)], UnaryOp(USub(), Name('zone', Load(), lineno=1348, col_offset=16), lineno=1348, col_offset=15), lineno=1348, col_offset=8)], [], lineno=1347, col_offset=4), Assign([Name('tt', Store(), lineno=1350, col_offset=4)], Tuple([Name('year', Load(), lineno=1350, col_offset=10), Name('mon', Load(), lineno=1350, col_offset=16), Name('day', Load(), lineno=1350, col_offset=21), Name('hour', Load(), lineno=1350, col_offset=26), Name('min', Load(), lineno=1350, col_offset=32), Name('sec', Load(), lineno=1350, col_offset=37), Num(-1, lineno=1350, col_offset=43), Num(-1, lineno=1350, col_offset=47), Num(-1, lineno=1350, col_offset=51)], Load(), lineno=1350, col_offset=10), lineno=1350, col_offset=4), Assign([Name('utc', Store(), lineno=1352, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=1352, col_offset=10), 'mktime', Load(), lineno=1352, col_offset=10), [Name('tt', Load(), lineno=1352, col_offset=22)], [], None, None, lineno=1352, col_offset=10), lineno=1352, col_offset=4), Assign([Name('lt', Store(), lineno=1357, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=1357, col_offset=9), 'localtime', Load(), lineno=1357, col_offset=9), [Name('utc', Load(), lineno=1357, col_offset=24)], [], None, None, lineno=1357, col_offset=9), lineno=1357, col_offset=4), If(BoolOp(And(), [Attribute(Name('time', Load(), lineno=1358, col_offset=7), 'daylight', Load(), lineno=1358, col_offset=7), Subscript(Name('lt', Load(), lineno=1358, col_offset=25), Index(Num(-1, lineno=1358, col_offset=29)), Load(), lineno=1358, col_offset=25)], lineno=1358, col_offset=7), [Assign([Name('zone', Store(), lineno=1359, col_offset=8)], BinOp(Name('zone', Load(), lineno=1359, col_offset=15), Add(), Attribute(Name('time', Load(), lineno=1359, col_offset=22), 'altzone', Load(), lineno=1359, col_offset=22), lineno=1359, col_offset=15), lineno=1359, col_offset=8)], [Assign([Name('zone', Store(), lineno=1361, col_offset=8)], BinOp(Name('zone', Load(), lineno=1361, col_offset=15), Add(), Attribute(Name('time', Load(), lineno=1361, col_offset=22), 'timezone', Load(), lineno=1361, col_offset=22), lineno=1361, col_offset=15), lineno=1361, col_offset=8)], lineno=1358, col_offset=4), Return(Call(Attribute(Name('time', Load(), lineno=1363, col_offset=11), 'localtime', Load(), lineno=1363, col_offset=11), [BinOp(Name('utc', Load(), lineno=1363, col_offset=26), Sub(), Name('zone', Load(), lineno=1363, col_offset=32), lineno=1363, col_offset=26)], [], None, None, lineno=1363, col_offset=11), lineno=1363, col_offset=4)], [], lineno=1323, col_offset=0), FunctionDef('Int2AP', arguments([Name('num', Param(), lineno=1367, col_offset=11)], None, None, []), [Expr(Str('Convert integer to A-P string representation.', lineno=1369, col_offset=4), lineno=1369, col_offset=4), Assign([Name('val', Store(), lineno=1371, col_offset=4)], Str('', lineno=1371, col_offset=10), lineno=1371, col_offset=4), Assign([Name('AP', Store(), lineno=1371, col_offset=14)], Str('ABCDEFGHIJKLMNOP', lineno=1371, col_offset=19), lineno=1371, col_offset=14), Assign([Name('num', Store(), lineno=1372, col_offset=4)], Call(Name('int', Load(), lineno=1372, col_offset=10), [Call(Name('abs', Load(), lineno=1372, col_offset=14), [Name('num', Load(), lineno=1372, col_offset=18)], [], None, None, lineno=1372, col_offset=14)], [], None, None, lineno=1372, col_offset=10), lineno=1372, col_offset=4), While(Name('num', Load(), lineno=1373, col_offset=10), [Assign([Tuple([Name('num', Store(), lineno=1374, col_offset=8), Name('mod', Store(), lineno=1374, col_offset=13)], Store(), lineno=1374, col_offset=8)], Call(Name('divmod', Load(), lineno=1374, col_offset=19), [Name('num', Load(), lineno=1374, col_offset=26), Num(16, lineno=1374, col_offset=31)], [], None, None, lineno=1374, col_offset=19), lineno=1374, col_offset=8), Assign([Name('val', Store(), lineno=1375, col_offset=8)], BinOp(Subscript(Name('AP', Load(), lineno=1375, col_offset=14), Index(Name('mod', Load(), lineno=1375, col_offset=17)), Load(), lineno=1375, col_offset=14), Add(), Name('val', Load(), lineno=1375, col_offset=24), lineno=1375, col_offset=14), lineno=1375, col_offset=8)], [], lineno=1373, col_offset=4), Return(Name('val', Load(), lineno=1376, col_offset=11), lineno=1376, col_offset=4)], [], lineno=1367, col_offset=0), FunctionDef('ParseFlags', arguments([Name('resp', Param(), lineno=1380, col_offset=15)], None, None, []), [Expr(Str('Convert IMAP4 flags response to python tuple.', lineno=1382, col_offset=4), lineno=1382, col_offset=4), Assign([Name('mo', Store(), lineno=1384, col_offset=4)], Call(Attribute(Name('Flags', Load(), lineno=1384, col_offset=9), 'match', Load(), lineno=1384, col_offset=9), [Name('resp', Load(), lineno=1384, col_offset=21)], [], None, None, lineno=1384, col_offset=9), lineno=1384, col_offset=4), If(UnaryOp(Not(), Name('mo', Load(), lineno=1385, col_offset=11), lineno=1385, col_offset=7), [Return(Tuple([], Load(), lineno=1386, col_offset=15), lineno=1386, col_offset=8)], [], lineno=1385, col_offset=4), Return(Call(Name('tuple', Load(), lineno=1388, col_offset=11), [Call(Attribute(Call(Attribute(Name('mo', Load(), lineno=1388, col_offset=17), 'group', Load(), lineno=1388, col_offset=17), [Str('flags', lineno=1388, col_offset=26)], [], None, None, lineno=1388, col_offset=17), 'split', Load(), lineno=1388, col_offset=17), [], [], None, None, lineno=1388, col_offset=17)], [], None, None, lineno=1388, col_offset=11), lineno=1388, col_offset=4)], [], lineno=1380, col_offset=0), FunctionDef('Time2Internaldate', arguments([Name('date_time', Param(), lineno=1391, col_offset=22)], None, None, []), [Expr(Str('Convert \'date_time\' to IMAP4 INTERNALDATE representation.\n\n    Return string in form: \'"DD-Mmm-YYYY HH:MM:SS +HHMM"\'\n    ', lineno=1396, col_offset=-1), lineno=1396, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=1398, col_offset=7), [Name('date_time', Load(), lineno=1398, col_offset=18), Tuple([Name('int', Load(), lineno=1398, col_offset=30), Name('float', Load(), lineno=1398, col_offset=35)], Load(), lineno=1398, col_offset=30)], [], None, None, lineno=1398, col_offset=7), [Assign([Name('tt', Store(), lineno=1399, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=1399, col_offset=13), 'localtime', Load(), lineno=1399, col_offset=13), [Name('date_time', Load(), lineno=1399, col_offset=28)], [], None, None, lineno=1399, col_offset=13), lineno=1399, col_offset=8)], [If(Call(Name('isinstance', Load(), lineno=1400, col_offset=9), [Name('date_time', Load(), lineno=1400, col_offset=20), Tuple([Name('tuple', Load(), lineno=1400, col_offset=32), Attribute(Name('time', Load(), lineno=1400, col_offset=39), 'struct_time', Load(), lineno=1400, col_offset=39)], Load(), lineno=1400, col_offset=32)], [], None, None, lineno=1400, col_offset=9), [Assign([Name('tt', Store(), lineno=1401, col_offset=8)], Name('date_time', Load(), lineno=1401, col_offset=13), lineno=1401, col_offset=8)], [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=1402, col_offset=9), [Name('date_time', Load(), lineno=1402, col_offset=20), Name('str', Load(), lineno=1402, col_offset=31)], [], None, None, lineno=1402, col_offset=9), Compare(Tuple([Subscript(Name('date_time', Load(), lineno=1402, col_offset=41), Index(Num(0, lineno=1402, col_offset=51)), Load(), lineno=1402, col_offset=41), Subscript(Name('date_time', Load(), lineno=1402, col_offset=54), Index(Num(-1, lineno=1402, col_offset=65)), Load(), lineno=1402, col_offset=54)], Load(), lineno=1402, col_offset=41), [Eq()], [Tuple([Str('"', lineno=1402, col_offset=73), Str('"', lineno=1402, col_offset=77)], Load(), lineno=1402, col_offset=73)], lineno=1402, col_offset=40)], lineno=1402, col_offset=9), [Return(Name('date_time', Load(), lineno=1403, col_offset=15), lineno=1403, col_offset=8)], [Raise(Call(Name('ValueError', Load(), lineno=1405, col_offset=14), [Str('date_time not of a known type', lineno=1405, col_offset=25)], [], None, None, lineno=1405, col_offset=14), None, None, lineno=1405, col_offset=8)], lineno=1402, col_offset=9)], lineno=1400, col_offset=9)], lineno=1398, col_offset=4), Assign([Name('dt', Store(), lineno=1407, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=1407, col_offset=9), 'strftime', Load(), lineno=1407, col_offset=9), [Str('%d-%b-%Y %H:%M:%S', lineno=1407, col_offset=23), Name('tt', Load(), lineno=1407, col_offset=44)], [], None, None, lineno=1407, col_offset=9), lineno=1407, col_offset=4), If(Compare(Subscript(Name('dt', Load(), lineno=1408, col_offset=7), Index(Num(0, lineno=1408, col_offset=10)), Load(), lineno=1408, col_offset=7), [Eq()], [Str('0', lineno=1408, col_offset=16)], lineno=1408, col_offset=7), [Assign([Name('dt', Store(), lineno=1409, col_offset=8)], BinOp(Str(' ', lineno=1409, col_offset=13), Add(), Subscript(Name('dt', Load(), lineno=1409, col_offset=19), Slice(Num(1, lineno=1409, col_offset=22), None, None), Load(), lineno=1409, col_offset=19), lineno=1409, col_offset=13), lineno=1409, col_offset=8)], [], lineno=1408, col_offset=4), If(BoolOp(And(), [Attribute(Name('time', Load(), lineno=1410, col_offset=7), 'daylight', Load(), lineno=1410, col_offset=7), Subscript(Name('tt', Load(), lineno=1410, col_offset=25), Index(Num(-1, lineno=1410, col_offset=29)), Load(), lineno=1410, col_offset=25)], lineno=1410, col_offset=7), [Assign([Name('zone', Store(), lineno=1411, col_offset=8)], UnaryOp(USub(), Attribute(Name('time', Load(), lineno=1411, col_offset=16), 'altzone', Load(), lineno=1411, col_offset=16), lineno=1411, col_offset=15), lineno=1411, col_offset=8)], [Assign([Name('zone', Store(), lineno=1413, col_offset=8)], UnaryOp(USub(), Attribute(Name('time', Load(), lineno=1413, col_offset=16), 'timezone', Load(), lineno=1413, col_offset=16), lineno=1413, col_offset=15), lineno=1413, col_offset=8)], lineno=1410, col_offset=4), Return(BinOp(BinOp(BinOp(Str('"', lineno=1414, col_offset=11), Add(), Name('dt', Load(), lineno=1414, col_offset=17), lineno=1414, col_offset=11), Add(), BinOp(Str(' %+03d%02d', lineno=1414, col_offset=22), Mod(), Call(Name('divmod', Load(), lineno=1414, col_offset=37), [BinOp(Name('zone', Load(), lineno=1414, col_offset=44), FloorDiv(), Num(60, lineno=1414, col_offset=50), lineno=1414, col_offset=44), Num(60, lineno=1414, col_offset=54)], [], None, None, lineno=1414, col_offset=37), lineno=1414, col_offset=22), lineno=1414, col_offset=20), Add(), Str('"', lineno=1414, col_offset=60), lineno=1414, col_offset=58), lineno=1414, col_offset=4)], [], lineno=1391, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1418, col_offset=3), [Eq()], [Str('__main__', lineno=1418, col_offset=15)], lineno=1418, col_offset=3), [Import([alias('getopt', None), alias('getpass', None)], lineno=1424, col_offset=4), TryExcept([Assign([Tuple([Name('optlist', Store(), lineno=1427, col_offset=8), Name('args', Store(), lineno=1427, col_offset=17)], Store(), lineno=1427, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=1427, col_offset=24), 'getopt', Load(), lineno=1427, col_offset=24), [Subscript(Attribute(Name('sys', Load(), lineno=1427, col_offset=38), 'argv', Load(), lineno=1427, col_offset=38), Slice(Num(1, lineno=1427, col_offset=47), None, None), Load(), lineno=1427, col_offset=38), Str('d:s:', lineno=1427, col_offset=52)], [], None, None, lineno=1427, col_offset=24), lineno=1427, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=1428, col_offset=11), 'error', Load(), lineno=1428, col_offset=11), Name('val', Store(), lineno=1428, col_offset=25), [Assign([Tuple([Name('optlist', Store(), lineno=1429, col_offset=8), Name('args', Store(), lineno=1429, col_offset=17)], Store(), lineno=1429, col_offset=8)], Tuple([Tuple([], Load(), lineno=1429, col_offset=24), Tuple([], Load(), lineno=1429, col_offset=28)], Load(), lineno=1429, col_offset=24), lineno=1429, col_offset=8)], lineno=1428, col_offset=4)], [], lineno=1426, col_offset=4), Assign([Name('stream_command', Store(), lineno=1431, col_offset=4)], Name('None', Load(), lineno=1431, col_offset=21), lineno=1431, col_offset=4), For(Tuple([Name('opt', Store(), lineno=1432, col_offset=8), Name('val', Store(), lineno=1432, col_offset=12)], Store(), lineno=1432, col_offset=8), Name('optlist', Load(), lineno=1432, col_offset=19), [If(Compare(Name('opt', Load(), lineno=1433, col_offset=11), [Eq()], [Str('-d', lineno=1433, col_offset=18)], lineno=1433, col_offset=11), [Assign([Name('Debug', Store(), lineno=1434, col_offset=12)], Call(Name('int', Load(), lineno=1434, col_offset=20), [Name('val', Load(), lineno=1434, col_offset=24)], [], None, None, lineno=1434, col_offset=20), lineno=1434, col_offset=12)], [If(Compare(Name('opt', Load(), lineno=1435, col_offset=13), [Eq()], [Str('-s', lineno=1435, col_offset=20)], lineno=1435, col_offset=13), [Assign([Name('stream_command', Store(), lineno=1436, col_offset=12)], Name('val', Load(), lineno=1436, col_offset=29), lineno=1436, col_offset=12), If(UnaryOp(Not(), Name('args', Load(), lineno=1437, col_offset=19), lineno=1437, col_offset=15), [Assign([Name('args', Store(), lineno=1437, col_offset=25)], Tuple([Name('stream_command', Load(), lineno=1437, col_offset=33)], Load(), lineno=1437, col_offset=33), lineno=1437, col_offset=25)], [], lineno=1437, col_offset=12)], [], lineno=1435, col_offset=13)], lineno=1433, col_offset=8)], [], lineno=1432, col_offset=4), If(UnaryOp(Not(), Name('args', Load(), lineno=1439, col_offset=11), lineno=1439, col_offset=7), [Assign([Name('args', Store(), lineno=1439, col_offset=17)], Tuple([Str('', lineno=1439, col_offset=25)], Load(), lineno=1439, col_offset=25), lineno=1439, col_offset=17)], [], lineno=1439, col_offset=4), Assign([Name('host', Store(), lineno=1441, col_offset=4)], Subscript(Name('args', Load(), lineno=1441, col_offset=11), Index(Num(0, lineno=1441, col_offset=16)), Load(), lineno=1441, col_offset=11), lineno=1441, col_offset=4), Assign([Name('USER', Store(), lineno=1443, col_offset=4)], Call(Attribute(Name('getpass', Load(), lineno=1443, col_offset=11), 'getuser', Load(), lineno=1443, col_offset=11), [], [], None, None, lineno=1443, col_offset=11), lineno=1443, col_offset=4), Assign([Name('PASSWD', Store(), lineno=1444, col_offset=4)], Call(Attribute(Name('getpass', Load(), lineno=1444, col_offset=13), 'getpass', Load(), lineno=1444, col_offset=13), [BinOp(Str('IMAP password for %s on %s: ', lineno=1444, col_offset=29), Mod(), Tuple([Name('USER', Load(), lineno=1444, col_offset=63), BoolOp(Or(), [Name('host', Load(), lineno=1444, col_offset=69), Str('localhost', lineno=1444, col_offset=77)], lineno=1444, col_offset=69)], Load(), lineno=1444, col_offset=63), lineno=1444, col_offset=29)], [], None, None, lineno=1444, col_offset=13), lineno=1444, col_offset=4), Assign([Name('test_mesg', Store(), lineno=1446, col_offset=4)], BinOp(Str('From: %(user)s@localhost%(lf)sSubject: IMAP4 test%(lf)s%(lf)sdata...%(lf)s', lineno=1446, col_offset=16), Mod(), Dict([Str('user', lineno=1446, col_offset=96), Str('lf', lineno=1446, col_offset=109)], [Name('USER', Load(), lineno=1446, col_offset=103), Str('\n', lineno=1446, col_offset=114)], lineno=1446, col_offset=95), lineno=1446, col_offset=16), lineno=1446, col_offset=4), Assign([Name('test_seq1', Store(), lineno=1447, col_offset=4)], Tuple([Tuple([Str('login', lineno=1448, col_offset=5), Tuple([Name('USER', Load(), lineno=1448, col_offset=15), Name('PASSWD', Load(), lineno=1448, col_offset=21)], Load(), lineno=1448, col_offset=15)], Load(), lineno=1448, col_offset=5), Tuple([Str('create', lineno=1449, col_offset=5), Tuple([Str('/tmp/xxx 1', lineno=1449, col_offset=16)], Load(), lineno=1449, col_offset=16)], Load(), lineno=1449, col_offset=5), Tuple([Str('rename', lineno=1450, col_offset=5), Tuple([Str('/tmp/xxx 1', lineno=1450, col_offset=16), Str('/tmp/yyy', lineno=1450, col_offset=30)], Load(), lineno=1450, col_offset=16)], Load(), lineno=1450, col_offset=5), Tuple([Str('CREATE', lineno=1451, col_offset=5), Tuple([Str('/tmp/yyz 2', lineno=1451, col_offset=16)], Load(), lineno=1451, col_offset=16)], Load(), lineno=1451, col_offset=5), Tuple([Str('append', lineno=1452, col_offset=5), Tuple([Str('/tmp/yyz 2', lineno=1452, col_offset=16), Name('None', Load(), lineno=1452, col_offset=30), Name('None', Load(), lineno=1452, col_offset=36), Name('test_mesg', Load(), lineno=1452, col_offset=42)], Load(), lineno=1452, col_offset=16)], Load(), lineno=1452, col_offset=5), Tuple([Str('list', lineno=1453, col_offset=5), Tuple([Str('/tmp', lineno=1453, col_offset=14), Str('yy*', lineno=1453, col_offset=22)], Load(), lineno=1453, col_offset=14)], Load(), lineno=1453, col_offset=5), Tuple([Str('select', lineno=1454, col_offset=5), Tuple([Str('/tmp/yyz 2', lineno=1454, col_offset=16)], Load(), lineno=1454, col_offset=16)], Load(), lineno=1454, col_offset=5), Tuple([Str('search', lineno=1455, col_offset=5), Tuple([Name('None', Load(), lineno=1455, col_offset=16), Str('SUBJECT', lineno=1455, col_offset=22), Str('test', lineno=1455, col_offset=33)], Load(), lineno=1455, col_offset=16)], Load(), lineno=1455, col_offset=5), Tuple([Str('fetch', lineno=1456, col_offset=5), Tuple([Str('1', lineno=1456, col_offset=15), Str('(FLAGS INTERNALDATE RFC822)', lineno=1456, col_offset=20)], Load(), lineno=1456, col_offset=15)], Load(), lineno=1456, col_offset=5), Tuple([Str('store', lineno=1457, col_offset=5), Tuple([Str('1', lineno=1457, col_offset=15), Str('FLAGS', lineno=1457, col_offset=20), Str('(\\Deleted)', lineno=1457, col_offset=29)], Load(), lineno=1457, col_offset=15)], Load(), lineno=1457, col_offset=5), Tuple([Str('namespace', lineno=1458, col_offset=5), Tuple([], Load(), lineno=1458, col_offset=18)], Load(), lineno=1458, col_offset=5), Tuple([Str('expunge', lineno=1459, col_offset=5), Tuple([], Load(), lineno=1459, col_offset=16)], Load(), lineno=1459, col_offset=5), Tuple([Str('recent', lineno=1460, col_offset=5), Tuple([], Load(), lineno=1460, col_offset=15)], Load(), lineno=1460, col_offset=5), Tuple([Str('close', lineno=1461, col_offset=5), Tuple([], Load(), lineno=1461, col_offset=14)], Load(), lineno=1461, col_offset=5)], Load(), lineno=1448, col_offset=4), lineno=1447, col_offset=4), Assign([Name('test_seq2', Store(), lineno=1464, col_offset=4)], Tuple([Tuple([Str('select', lineno=1465, col_offset=5), Tuple([], Load(), lineno=1465, col_offset=15)], Load(), lineno=1465, col_offset=5), Tuple([Str('response', lineno=1466, col_offset=5), Tuple([Str('UIDVALIDITY', lineno=1466, col_offset=17)], Load(), lineno=1466, col_offset=17)], Load(), lineno=1466, col_offset=5), Tuple([Str('uid', lineno=1467, col_offset=5), Tuple([Str('SEARCH', lineno=1467, col_offset=13), Str('ALL', lineno=1467, col_offset=23)], Load(), lineno=1467, col_offset=13)], Load(), lineno=1467, col_offset=5), Tuple([Str('response', lineno=1468, col_offset=5), Tuple([Str('EXISTS', lineno=1468, col_offset=18)], Load(), lineno=1468, col_offset=18)], Load(), lineno=1468, col_offset=5), Tuple([Str('append', lineno=1469, col_offset=5), Tuple([Name('None', Load(), lineno=1469, col_offset=16), Name('None', Load(), lineno=1469, col_offset=22), Name('None', Load(), lineno=1469, col_offset=28), Name('test_mesg', Load(), lineno=1469, col_offset=34)], Load(), lineno=1469, col_offset=16)], Load(), lineno=1469, col_offset=5), Tuple([Str('recent', lineno=1470, col_offset=5), Tuple([], Load(), lineno=1470, col_offset=15)], Load(), lineno=1470, col_offset=5), Tuple([Str('logout', lineno=1471, col_offset=5), Tuple([], Load(), lineno=1471, col_offset=15)], Load(), lineno=1471, col_offset=5)], Load(), lineno=1465, col_offset=4), lineno=1464, col_offset=4), FunctionDef('run', arguments([Name('cmd', Param(), lineno=1474, col_offset=12), Name('args', Param(), lineno=1474, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('M', Load(), lineno=1475, col_offset=8), '_mesg', Load(), lineno=1475, col_offset=8), [BinOp(Str('%s %s', lineno=1475, col_offset=16), Mod(), Tuple([Name('cmd', Load(), lineno=1475, col_offset=27), Name('args', Load(), lineno=1475, col_offset=32)], Load(), lineno=1475, col_offset=27), lineno=1475, col_offset=16)], [], None, None, lineno=1475, col_offset=8), lineno=1475, col_offset=8), Assign([Tuple([Name('typ', Store(), lineno=1476, col_offset=8), Name('dat', Store(), lineno=1476, col_offset=13)], Store(), lineno=1476, col_offset=8)], Call(Call(Name('getattr', Load(), lineno=1476, col_offset=19), [Name('M', Load(), lineno=1476, col_offset=27), Name('cmd', Load(), lineno=1476, col_offset=30)], [], None, None, lineno=1476, col_offset=19), [], [], Name('args', Load(), lineno=1476, col_offset=36), None, lineno=1476, col_offset=19), lineno=1476, col_offset=8), Expr(Call(Attribute(Name('M', Load(), lineno=1477, col_offset=8), '_mesg', Load(), lineno=1477, col_offset=8), [BinOp(Str('%s => %s %s', lineno=1477, col_offset=16), Mod(), Tuple([Name('cmd', Load(), lineno=1477, col_offset=33), Name('typ', Load(), lineno=1477, col_offset=38), Name('dat', Load(), lineno=1477, col_offset=43)], Load(), lineno=1477, col_offset=33), lineno=1477, col_offset=16)], [], None, None, lineno=1477, col_offset=8), lineno=1477, col_offset=8), If(Compare(Name('typ', Load(), lineno=1478, col_offset=11), [Eq()], [Str('NO', lineno=1478, col_offset=18)], lineno=1478, col_offset=11), [Raise(Subscript(Name('dat', Load(), lineno=1478, col_offset=30), Index(Num(0, lineno=1478, col_offset=34)), Load(), lineno=1478, col_offset=30), None, None, lineno=1478, col_offset=24)], [], lineno=1478, col_offset=8), Return(Name('dat', Load(), lineno=1479, col_offset=15), lineno=1479, col_offset=8)], [], lineno=1474, col_offset=4), TryExcept([If(Name('stream_command', Load(), lineno=1482, col_offset=11), [Assign([Name('M', Store(), lineno=1483, col_offset=12)], Call(Name('IMAP4_stream', Load(), lineno=1483, col_offset=16), [Name('stream_command', Load(), lineno=1483, col_offset=29)], [], None, None, lineno=1483, col_offset=16), lineno=1483, col_offset=12)], [Assign([Name('M', Store(), lineno=1485, col_offset=12)], Call(Name('IMAP4', Load(), lineno=1485, col_offset=16), [Name('host', Load(), lineno=1485, col_offset=22)], [], None, None, lineno=1485, col_offset=16), lineno=1485, col_offset=12)], lineno=1482, col_offset=8), If(Compare(Attribute(Name('M', Load(), lineno=1486, col_offset=11), 'state', Load(), lineno=1486, col_offset=11), [Eq()], [Str('AUTH', lineno=1486, col_offset=22)], lineno=1486, col_offset=11), [Assign([Name('test_seq1', Store(), lineno=1487, col_offset=12)], Subscript(Name('test_seq1', Load(), lineno=1487, col_offset=24), Slice(Num(1, lineno=1487, col_offset=34), None, None), Load(), lineno=1487, col_offset=24), lineno=1487, col_offset=12)], [], lineno=1486, col_offset=8), Expr(Call(Attribute(Name('M', Load(), lineno=1488, col_offset=8), '_mesg', Load(), lineno=1488, col_offset=8), [BinOp(Str('PROTOCOL_VERSION = %s', lineno=1488, col_offset=16), Mod(), Attribute(Name('M', Load(), lineno=1488, col_offset=42), 'PROTOCOL_VERSION', Load(), lineno=1488, col_offset=42), lineno=1488, col_offset=16)], [], None, None, lineno=1488, col_offset=8), lineno=1488, col_offset=8), Expr(Call(Attribute(Name('M', Load(), lineno=1489, col_offset=8), '_mesg', Load(), lineno=1489, col_offset=8), [BinOp(Str('CAPABILITIES = %r', lineno=1489, col_offset=16), Mod(), Tuple([Attribute(Name('M', Load(), lineno=1489, col_offset=39), 'capabilities', Load(), lineno=1489, col_offset=39)], Load(), lineno=1489, col_offset=39), lineno=1489, col_offset=16)], [], None, None, lineno=1489, col_offset=8), lineno=1489, col_offset=8), For(Tuple([Name('cmd', Store(), lineno=1491, col_offset=12), Name('args', Store(), lineno=1491, col_offset=16)], Store(), lineno=1491, col_offset=12), Name('test_seq1', Load(), lineno=1491, col_offset=24), [Expr(Call(Name('run', Load(), lineno=1492, col_offset=12), [Name('cmd', Load(), lineno=1492, col_offset=16), Name('args', Load(), lineno=1492, col_offset=21)], [], None, None, lineno=1492, col_offset=12), lineno=1492, col_offset=12)], [], lineno=1491, col_offset=8), For(Name('ml', Store(), lineno=1494, col_offset=12), Call(Name('run', Load(), lineno=1494, col_offset=18), [Str('list', lineno=1494, col_offset=22), Tuple([Str('/tmp/', lineno=1494, col_offset=31), Str('yy%', lineno=1494, col_offset=40)], Load(), lineno=1494, col_offset=31)], [], None, None, lineno=1494, col_offset=18), [Assign([Name('mo', Store(), lineno=1495, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=1495, col_offset=17), 'match', Load(), lineno=1495, col_offset=17), [Str('.*"([^"]+)"$', lineno=1495, col_offset=26), Name('ml', Load(), lineno=1495, col_offset=43)], [], None, None, lineno=1495, col_offset=17), lineno=1495, col_offset=12), If(Name('mo', Load(), lineno=1496, col_offset=15), [Assign([Name('path', Store(), lineno=1496, col_offset=19)], Call(Attribute(Name('mo', Load(), lineno=1496, col_offset=26), 'group', Load(), lineno=1496, col_offset=26), [Num(1, lineno=1496, col_offset=35)], [], None, None, lineno=1496, col_offset=26), lineno=1496, col_offset=19)], [Assign([Name('path', Store(), lineno=1497, col_offset=18)], Subscript(Call(Attribute(Name('ml', Load(), lineno=1497, col_offset=25), 'split', Load(), lineno=1497, col_offset=25), [], [], None, None, lineno=1497, col_offset=25), Index(Num(-1, lineno=1497, col_offset=37)), Load(), lineno=1497, col_offset=25), lineno=1497, col_offset=18)], lineno=1496, col_offset=12), Expr(Call(Name('run', Load(), lineno=1498, col_offset=12), [Str('delete', lineno=1498, col_offset=16), Tuple([Name('path', Load(), lineno=1498, col_offset=27)], Load(), lineno=1498, col_offset=27)], [], None, None, lineno=1498, col_offset=12), lineno=1498, col_offset=12)], [], lineno=1494, col_offset=8), For(Tuple([Name('cmd', Store(), lineno=1500, col_offset=12), Name('args', Store(), lineno=1500, col_offset=16)], Store(), lineno=1500, col_offset=12), Name('test_seq2', Load(), lineno=1500, col_offset=24), [Assign([Name('dat', Store(), lineno=1501, col_offset=12)], Call(Name('run', Load(), lineno=1501, col_offset=18), [Name('cmd', Load(), lineno=1501, col_offset=22), Name('args', Load(), lineno=1501, col_offset=27)], [], None, None, lineno=1501, col_offset=18), lineno=1501, col_offset=12), If(Compare(Tuple([Name('cmd', Load(), lineno=1503, col_offset=16), Name('args', Load(), lineno=1503, col_offset=20)], Load(), lineno=1503, col_offset=16), [NotEq()], [Tuple([Str('uid', lineno=1503, col_offset=30), Tuple([Str('SEARCH', lineno=1503, col_offset=38), Str('ALL', lineno=1503, col_offset=48)], Load(), lineno=1503, col_offset=38)], Load(), lineno=1503, col_offset=30)], lineno=1503, col_offset=15), [Continue( lineno=1504, col_offset=16)], [], lineno=1503, col_offset=12), Assign([Name('uid', Store(), lineno=1506, col_offset=12)], Call(Attribute(Subscript(Name('dat', Load(), lineno=1506, col_offset=18), Index(Num(-1, lineno=1506, col_offset=23)), Load(), lineno=1506, col_offset=18), 'split', Load(), lineno=1506, col_offset=18), [], [], None, None, lineno=1506, col_offset=18), lineno=1506, col_offset=12), If(UnaryOp(Not(), Name('uid', Load(), lineno=1507, col_offset=19), lineno=1507, col_offset=15), [Continue( lineno=1507, col_offset=24)], [], lineno=1507, col_offset=12), Expr(Call(Name('run', Load(), lineno=1508, col_offset=12), [Str('uid', lineno=1508, col_offset=16), Tuple([Str('FETCH', lineno=1508, col_offset=24), BinOp(Str('%s', lineno=1508, col_offset=33), Mod(), Subscript(Name('uid', Load(), lineno=1508, col_offset=40), Index(Num(-1, lineno=1508, col_offset=45)), Load(), lineno=1508, col_offset=40), lineno=1508, col_offset=33), Str('(FLAGS INTERNALDATE RFC822.SIZE RFC822.HEADER RFC822.TEXT)', lineno=1509, col_offset=20)], Load(), lineno=1508, col_offset=24)], [], None, None, lineno=1508, col_offset=12), lineno=1508, col_offset=12)], [], lineno=1500, col_offset=8), Print(None, [Str('\nAll tests OK.', lineno=1511, col_offset=14)], True, lineno=1511, col_offset=8)], [ExceptHandler(None, None, [Print(None, [Str('\nTests failed.', lineno=1514, col_offset=14)], True, lineno=1514, col_offset=8), If(UnaryOp(Not(), Name('Debug', Load(), lineno=1516, col_offset=15), lineno=1516, col_offset=11), [Print(None, [BinOp(Str('\nIf you would like to see debugging output,\ntry: %s -d5\n', lineno=1520, col_offset=-1), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=1520, col_offset=6), 'argv', Load(), lineno=1520, col_offset=6), Index(Num(0, lineno=1520, col_offset=15)), Load(), lineno=1520, col_offset=6), lineno=1520, col_offset=-1)], True, lineno=1517, col_offset=12)], [], lineno=1516, col_offset=8), Raise(None, None, None, lineno=1522, col_offset=8)], lineno=1513, col_offset=4)], [], lineno=1481, col_offset=4)], [], lineno=1418, col_offset=0)])
