Module([Expr(Str('Manage HTTP Response Headers\n\nMuch of this module is red-handedly pilfered from email.message in the stdlib,\nso portions are Copyright (C) 2001,2002 Python Software Foundation, and were\nwritten by Barry Warsaw.\n', lineno=6, col_offset=-1), lineno=6, col_offset=-1), ImportFrom('types', [alias('ListType', None), alias('TupleType', None)], 0, lineno=8, col_offset=0), Import([alias('re', None)], lineno=12, col_offset=0), Assign([Name('tspecials', Store(), lineno=13, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=13, col_offset=12), 'compile', Load(), lineno=13, col_offset=12), [Str('[ \\(\\)<>@,;:\\\\"/\\[\\]\\?=]', lineno=13, col_offset=23)], [], None, None, lineno=13, col_offset=12), lineno=13, col_offset=0), FunctionDef('_formatparam', arguments([Name('param', Param(), lineno=15, col_offset=17), Name('value', Param(), lineno=15, col_offset=24), Name('quote', Param(), lineno=15, col_offset=36)], None, None, [Name('None', Load(), lineno=15, col_offset=30), Num(1, lineno=15, col_offset=42)]), [Expr(Str('Convenience function to format and return a key=value pair.\n\n    This will quote the value if needed or if quote is true.\n    ', lineno=19, col_offset=-1), lineno=19, col_offset=-1), If(BoolOp(And(), [Compare(Name('value', Load(), lineno=20, col_offset=7), [IsNot()], [Name('None', Load(), lineno=20, col_offset=20)], lineno=20, col_offset=7), Compare(Call(Name('len', Load(), lineno=20, col_offset=29), [Name('value', Load(), lineno=20, col_offset=33)], [], None, None, lineno=20, col_offset=29), [Gt()], [Num(0, lineno=20, col_offset=42)], lineno=20, col_offset=29)], lineno=20, col_offset=7), [If(BoolOp(Or(), [Name('quote', Load(), lineno=21, col_offset=11), Call(Attribute(Name('tspecials', Load(), lineno=21, col_offset=20), 'search', Load(), lineno=21, col_offset=20), [Name('value', Load(), lineno=21, col_offset=37)], [], None, None, lineno=21, col_offset=20)], lineno=21, col_offset=11), [Assign([Name('value', Store(), lineno=22, col_offset=12)], Call(Attribute(Call(Attribute(Name('value', Load(), lineno=22, col_offset=20), 'replace', Load(), lineno=22, col_offset=20), [Str('\\', lineno=22, col_offset=34), Str('\\\\', lineno=22, col_offset=40)], [], None, None, lineno=22, col_offset=20), 'replace', Load(), lineno=22, col_offset=20), [Str('"', lineno=22, col_offset=56), Str('\\"', lineno=22, col_offset=61)], [], None, None, lineno=22, col_offset=20), lineno=22, col_offset=12), Return(BinOp(Str('%s="%s"', lineno=23, col_offset=19), Mod(), Tuple([Name('param', Load(), lineno=23, col_offset=32), Name('value', Load(), lineno=23, col_offset=39)], Load(), lineno=23, col_offset=32), lineno=23, col_offset=19), lineno=23, col_offset=12)], [Return(BinOp(Str('%s=%s', lineno=25, col_offset=19), Mod(), Tuple([Name('param', Load(), lineno=25, col_offset=30), Name('value', Load(), lineno=25, col_offset=37)], Load(), lineno=25, col_offset=30), lineno=25, col_offset=19), lineno=25, col_offset=12)], lineno=21, col_offset=8)], [Return(Name('param', Load(), lineno=27, col_offset=15), lineno=27, col_offset=8)], lineno=20, col_offset=4)], [], lineno=15, col_offset=0), ClassDef('Headers', [], [Expr(Str('Manage a collection of HTTP response headers', lineno=32, col_offset=4), lineno=32, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=34, col_offset=17), Name('headers', Param(), lineno=34, col_offset=22)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=35, col_offset=11), [Name('headers', Load(), lineno=35, col_offset=16)], [], None, None, lineno=35, col_offset=11), [IsNot()], [Name('ListType', Load(), lineno=35, col_offset=32)], lineno=35, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=36, col_offset=18), [Str('Headers must be a list of name/value tuples', lineno=36, col_offset=28)], [], None, None, lineno=36, col_offset=18), None, None, lineno=36, col_offset=12)], [], lineno=35, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=37, col_offset=8), '_headers', Store(), lineno=37, col_offset=8)], Name('headers', Load(), lineno=37, col_offset=24), lineno=37, col_offset=8)], [], lineno=34, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=39, col_offset=16)], None, None, []), [Expr(Str('Return the total number of headers, including duplicates.', lineno=40, col_offset=8), lineno=40, col_offset=8), Return(Call(Name('len', Load(), lineno=41, col_offset=15), [Attribute(Name('self', Load(), lineno=41, col_offset=19), '_headers', Load(), lineno=41, col_offset=19)], [], None, None, lineno=41, col_offset=15), lineno=41, col_offset=8)], [], lineno=39, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=43, col_offset=20), Name('name', Param(), lineno=43, col_offset=26), Name('val', Param(), lineno=43, col_offset=32)], None, None, []), [Expr(Str('Set the value of a header.', lineno=44, col_offset=8), lineno=44, col_offset=8), Delete([Subscript(Name('self', Load(), lineno=45, col_offset=12), Index(Name('name', Load(), lineno=45, col_offset=17)), Del(), lineno=45, col_offset=12)], lineno=45, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=46, col_offset=8), '_headers', Load(), lineno=46, col_offset=8), 'append', Load(), lineno=46, col_offset=8), [Tuple([Name('name', Load(), lineno=46, col_offset=30), Name('val', Load(), lineno=46, col_offset=36)], Load(), lineno=46, col_offset=30)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8)], [], lineno=43, col_offset=4), FunctionDef('__delitem__', arguments([Name('self', Param(), lineno=48, col_offset=20), Name('name', Param(), lineno=48, col_offset=25)], None, None, []), [Expr(Str('Delete all occurrences of a header, if present.\n\n        Does *not* raise an exception if the header is missing.\n        ', lineno=52, col_offset=-1), lineno=52, col_offset=-1), Assign([Name('name', Store(), lineno=53, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=53, col_offset=15), 'lower', Load(), lineno=53, col_offset=15), [], [], None, None, lineno=53, col_offset=15), lineno=53, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=54, col_offset=8), '_headers', Load(), lineno=54, col_offset=8), Slice(None, None, None), Store(), lineno=54, col_offset=8)], ListComp(Name('kv', Load(), lineno=54, col_offset=28), [comprehension(Name('kv', Store(), lineno=54, col_offset=35), Attribute(Name('self', Load(), lineno=54, col_offset=41), '_headers', Load(), lineno=54, col_offset=41), [Compare(Call(Attribute(Subscript(Name('kv', Load(), lineno=54, col_offset=58), Index(Num(0, lineno=54, col_offset=61)), Load(), lineno=54, col_offset=58), 'lower', Load(), lineno=54, col_offset=58), [], [], None, None, lineno=54, col_offset=58), [NotEq()], [Name('name', Load(), lineno=54, col_offset=75)], lineno=54, col_offset=58)])], lineno=54, col_offset=28), lineno=54, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=56, col_offset=20), Name('name', Param(), lineno=56, col_offset=25)], None, None, []), [Expr(Str("Get the first header value for 'name'\n\n        Return None if the header is missing instead of raising an exception.\n\n        Note that if the header appeared multiple times, the first exactly which\n        occurrance gets returned is undefined.  Use getall() to get all\n        the values matching a header field name.\n        ", lineno=64, col_offset=-1), lineno=64, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=65, col_offset=15), 'get', Load(), lineno=65, col_offset=15), [Name('name', Load(), lineno=65, col_offset=24)], [], None, None, lineno=65, col_offset=15), lineno=65, col_offset=8)], [], lineno=56, col_offset=4), FunctionDef('has_key', arguments([Name('self', Param(), lineno=67, col_offset=16), Name('name', Param(), lineno=67, col_offset=22)], None, None, []), [Expr(Str('Return true if the message contains the header.', lineno=68, col_offset=8), lineno=68, col_offset=8), Return(Compare(Call(Attribute(Name('self', Load(), lineno=69, col_offset=15), 'get', Load(), lineno=69, col_offset=15), [Name('name', Load(), lineno=69, col_offset=24)], [], None, None, lineno=69, col_offset=15), [IsNot()], [Name('None', Load(), lineno=69, col_offset=37)], lineno=69, col_offset=15), lineno=69, col_offset=8)], [], lineno=67, col_offset=4), Assign([Name('__contains__', Store(), lineno=71, col_offset=4)], Name('has_key', Load(), lineno=71, col_offset=19), lineno=71, col_offset=4), FunctionDef('get_all', arguments([Name('self', Param(), lineno=74, col_offset=16), Name('name', Param(), lineno=74, col_offset=22)], None, None, []), [Expr(Str('Return a list of all the values for the named field.\n\n        These will be sorted in the order they appeared in the original header\n        list or were added to this instance, and may contain duplicates.  Any\n        fields deleted and re-inserted are always appended to the header list.\n        If no fields exist with the given name, returns an empty list.\n        ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), Assign([Name('name', Store(), lineno=82, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=82, col_offset=15), 'lower', Load(), lineno=82, col_offset=15), [], [], None, None, lineno=82, col_offset=15), lineno=82, col_offset=8), Return(ListComp(Subscript(Name('kv', Load(), lineno=83, col_offset=16), Index(Num(1, lineno=83, col_offset=19)), Load(), lineno=83, col_offset=16), [comprehension(Name('kv', Store(), lineno=83, col_offset=26), Attribute(Name('self', Load(), lineno=83, col_offset=32), '_headers', Load(), lineno=83, col_offset=32), [Compare(Call(Attribute(Subscript(Name('kv', Load(), lineno=83, col_offset=49), Index(Num(0, lineno=83, col_offset=52)), Load(), lineno=83, col_offset=49), 'lower', Load(), lineno=83, col_offset=49), [], [], None, None, lineno=83, col_offset=49), [Eq()], [Name('name', Load(), lineno=83, col_offset=64)], lineno=83, col_offset=49)])], lineno=83, col_offset=16), lineno=83, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=86, col_offset=12), Name('name', Param(), lineno=86, col_offset=17), Name('default', Param(), lineno=86, col_offset=22)], None, None, [Name('None', Load(), lineno=86, col_offset=30)]), [Expr(Str("Get the first header value for 'name', or return 'default'", lineno=87, col_offset=8), lineno=87, col_offset=8), Assign([Name('name', Store(), lineno=88, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=88, col_offset=15), 'lower', Load(), lineno=88, col_offset=15), [], [], None, None, lineno=88, col_offset=15), lineno=88, col_offset=8), For(Tuple([Name('k', Store(), lineno=89, col_offset=12), Name('v', Store(), lineno=89, col_offset=14)], Store(), lineno=89, col_offset=12), Attribute(Name('self', Load(), lineno=89, col_offset=19), '_headers', Load(), lineno=89, col_offset=19), [If(Compare(Call(Attribute(Name('k', Load(), lineno=90, col_offset=15), 'lower', Load(), lineno=90, col_offset=15), [], [], None, None, lineno=90, col_offset=15), [Eq()], [Name('name', Load(), lineno=90, col_offset=26)], lineno=90, col_offset=15), [Return(Name('v', Load(), lineno=91, col_offset=23), lineno=91, col_offset=16)], [], lineno=90, col_offset=12)], [], lineno=89, col_offset=8), Return(Name('default', Load(), lineno=92, col_offset=15), lineno=92, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('keys', arguments([Name('self', Param(), lineno=95, col_offset=13)], None, None, []), [Expr(Str('Return a list of all the header field names.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        ', lineno=102, col_offset=-1), lineno=102, col_offset=-1), Return(ListComp(Name('k', Load(), lineno=103, col_offset=16), [comprehension(Tuple([Name('k', Store(), lineno=103, col_offset=22), Name('v', Store(), lineno=103, col_offset=25)], Store(), lineno=103, col_offset=22), Attribute(Name('self', Load(), lineno=103, col_offset=30), '_headers', Load(), lineno=103, col_offset=30), [])], lineno=103, col_offset=16), lineno=103, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('values', arguments([Name('self', Param(), lineno=105, col_offset=15)], None, None, []), [Expr(Str('Return a list of all header values.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        ', lineno=112, col_offset=-1), lineno=112, col_offset=-1), Return(ListComp(Name('v', Load(), lineno=113, col_offset=16), [comprehension(Tuple([Name('k', Store(), lineno=113, col_offset=22), Name('v', Store(), lineno=113, col_offset=25)], Store(), lineno=113, col_offset=22), Attribute(Name('self', Load(), lineno=113, col_offset=30), '_headers', Load(), lineno=113, col_offset=30), [])], lineno=113, col_offset=16), lineno=113, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('items', arguments([Name('self', Param(), lineno=115, col_offset=14)], None, None, []), [Expr(Str('Get all the header fields and values.\n\n        These will be sorted in the order they were in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        ', lineno=122, col_offset=-1), lineno=122, col_offset=-1), Return(Subscript(Attribute(Name('self', Load(), lineno=123, col_offset=15), '_headers', Load(), lineno=123, col_offset=15), Slice(None, None, None), Load(), lineno=123, col_offset=15), lineno=123, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=125, col_offset=17)], None, None, []), [Return(BinOp(Str('Headers(%r)', lineno=126, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=126, col_offset=31), '_headers', Load(), lineno=126, col_offset=31), lineno=126, col_offset=15), lineno=126, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=128, col_offset=16)], None, None, []), [Expr(Str('str() returns the formatted headers, complete with end line,\n        suitable for direct HTTP transmission.', lineno=130, col_offset=-1), lineno=130, col_offset=-1), Return(Call(Attribute(Str('\r\n', lineno=131, col_offset=15), 'join', Load(), lineno=131, col_offset=15), [BinOp(ListComp(BinOp(Str('%s: %s', lineno=131, col_offset=28), Mod(), Name('kv', Load(), lineno=131, col_offset=39), lineno=131, col_offset=28), [comprehension(Name('kv', Store(), lineno=131, col_offset=46), Attribute(Name('self', Load(), lineno=131, col_offset=52), '_headers', Load(), lineno=131, col_offset=52), [])], lineno=131, col_offset=28), Add(), List([Str('', lineno=131, col_offset=68), Str('', lineno=131, col_offset=71)], Load(), lineno=131, col_offset=67), lineno=131, col_offset=27)], [], None, None, lineno=131, col_offset=15), lineno=131, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('setdefault', arguments([Name('self', Param(), lineno=133, col_offset=19), Name('name', Param(), lineno=133, col_offset=24), Name('value', Param(), lineno=133, col_offset=29)], None, None, []), [Expr(Str("Return first matching header value for 'name', or 'value'\n\n        If there is no header named 'name', add a new header with name 'name'\n        and value 'value'.", lineno=137, col_offset=-1), lineno=137, col_offset=-1), Assign([Name('result', Store(), lineno=138, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=138, col_offset=17), 'get', Load(), lineno=138, col_offset=17), [Name('name', Load(), lineno=138, col_offset=26)], [], None, None, lineno=138, col_offset=17), lineno=138, col_offset=8), If(Compare(Name('result', Load(), lineno=139, col_offset=11), [Is()], [Name('None', Load(), lineno=139, col_offset=21)], lineno=139, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=140, col_offset=12), '_headers', Load(), lineno=140, col_offset=12), 'append', Load(), lineno=140, col_offset=12), [Tuple([Name('name', Load(), lineno=140, col_offset=34), Name('value', Load(), lineno=140, col_offset=39)], Load(), lineno=140, col_offset=34)], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12), Return(Name('value', Load(), lineno=141, col_offset=19), lineno=141, col_offset=12)], [Return(Name('result', Load(), lineno=143, col_offset=19), lineno=143, col_offset=12)], lineno=139, col_offset=8)], [], lineno=133, col_offset=4), FunctionDef('add_header', arguments([Name('self', Param(), lineno=145, col_offset=19), Name('_name', Param(), lineno=145, col_offset=25), Name('_value', Param(), lineno=145, col_offset=32)], None, '_params', []), [Expr(Str('Extended header setting.\n\n        _name is the header field to add.  keyword arguments can be used to set\n        additional parameters for the header field, with underscores converted\n        to dashes.  Normally the parameter will be added as key="value" unless\n        value is None, in which case only the key will be added.\n\n        Example:\n\n        h.add_header(\'content-disposition\', \'attachment\', filename=\'bud.gif\')\n\n        Note that unlike the corresponding \'email.message\' method, this does\n        *not* handle \'(charset, language, value)\' tuples: all values must be\n        strings or None.\n        ', lineno=160, col_offset=-1), lineno=160, col_offset=-1), Assign([Name('parts', Store(), lineno=161, col_offset=8)], List([], Load(), lineno=161, col_offset=16), lineno=161, col_offset=8), If(Compare(Name('_value', Load(), lineno=162, col_offset=11), [IsNot()], [Name('None', Load(), lineno=162, col_offset=25)], lineno=162, col_offset=11), [Expr(Call(Attribute(Name('parts', Load(), lineno=163, col_offset=12), 'append', Load(), lineno=163, col_offset=12), [Name('_value', Load(), lineno=163, col_offset=25)], [], None, None, lineno=163, col_offset=12), lineno=163, col_offset=12)], [], lineno=162, col_offset=8), For(Tuple([Name('k', Store(), lineno=164, col_offset=12), Name('v', Store(), lineno=164, col_offset=15)], Store(), lineno=164, col_offset=12), Call(Attribute(Name('_params', Load(), lineno=164, col_offset=20), 'items', Load(), lineno=164, col_offset=20), [], [], None, None, lineno=164, col_offset=20), [If(Compare(Name('v', Load(), lineno=165, col_offset=15), [Is()], [Name('None', Load(), lineno=165, col_offset=20)], lineno=165, col_offset=15), [Expr(Call(Attribute(Name('parts', Load(), lineno=166, col_offset=16), 'append', Load(), lineno=166, col_offset=16), [Call(Attribute(Name('k', Load(), lineno=166, col_offset=29), 'replace', Load(), lineno=166, col_offset=29), [Str('_', lineno=166, col_offset=39), Str('-', lineno=166, col_offset=44)], [], None, None, lineno=166, col_offset=29)], [], None, None, lineno=166, col_offset=16), lineno=166, col_offset=16)], [Expr(Call(Attribute(Name('parts', Load(), lineno=168, col_offset=16), 'append', Load(), lineno=168, col_offset=16), [Call(Name('_formatparam', Load(), lineno=168, col_offset=29), [Call(Attribute(Name('k', Load(), lineno=168, col_offset=42), 'replace', Load(), lineno=168, col_offset=42), [Str('_', lineno=168, col_offset=52), Str('-', lineno=168, col_offset=57)], [], None, None, lineno=168, col_offset=42), Name('v', Load(), lineno=168, col_offset=63)], [], None, None, lineno=168, col_offset=29)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=16)], lineno=165, col_offset=12)], [], lineno=164, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=169, col_offset=8), '_headers', Load(), lineno=169, col_offset=8), 'append', Load(), lineno=169, col_offset=8), [Tuple([Name('_name', Load(), lineno=169, col_offset=30), Call(Attribute(Str('; ', lineno=169, col_offset=37), 'join', Load(), lineno=169, col_offset=37), [Name('parts', Load(), lineno=169, col_offset=47)], [], None, None, lineno=169, col_offset=37)], Load(), lineno=169, col_offset=30)], [], None, None, lineno=169, col_offset=8), lineno=169, col_offset=8)], [], lineno=145, col_offset=4)], [], lineno=30, col_offset=0)])
