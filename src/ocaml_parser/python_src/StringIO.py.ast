Module([Expr(Str("File-like objects that read from or write to a string buffer.\n\nThis implements (nearly) all stdio methods.\n\nf = StringIO()      # ready for writing\nf = StringIO(buf)   # ready for reading\nf.close()           # explicitly release resources held\nflag = f.isatty()   # always false\npos = f.tell()      # get current position\nf.seek(pos)         # set current position\nf.seek(pos, mode)   # mode 0: absolute; 1: relative; 2: relative to EOF\nbuf = f.read()      # read until EOF\nbuf = f.read(n)     # read up to n bytes\nbuf = f.readline()  # read until end of line ('\\n') or EOF\nlist = f.readlines()# list of f.readline() results until EOF\nf.truncate([size])  # truncate file at to at most size (default: current pos)\nf.write(buf)        # write at current position\nf.writelines(list)  # for line in list: f.write(line)\nf.getvalue()        # return whole file's contents as a string\n\nNotes:\n- Using a real file is often faster (but less convenient).\n- There's also a much faster implementation in C, called cStringIO, but\n  it's not subclassable.\n- fileno() is left unimplemented so that code which uses it triggers\n  an exception early.\n- Seeking far beyond EOF and then writing will insert real null\n  bytes that occupy space in the buffer.\n- There's a simple test set (see end of this file).\n", lineno=30, col_offset=-1), lineno=30, col_offset=-1), TryExcept([ImportFrom('errno', [alias('EINVAL', None)], 0, lineno=32, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=33, col_offset=7), None, [Assign([Name('EINVAL', Store(), lineno=34, col_offset=4)], Num(22, lineno=34, col_offset=13), lineno=34, col_offset=4)], lineno=33, col_offset=0)], [], lineno=31, col_offset=0), Assign([Name('__all__', Store(), lineno=36, col_offset=0)], List([Str('StringIO', lineno=36, col_offset=11)], Load(), lineno=36, col_offset=10), lineno=36, col_offset=0), FunctionDef('_complain_ifclosed', arguments([Name('closed', Param(), lineno=38, col_offset=23)], None, None, []), [If(Name('closed', Load(), lineno=39, col_offset=7), [Raise(Name('ValueError', Load(), lineno=40, col_offset=14), Str('I/O operation on closed file', lineno=40, col_offset=26), None, lineno=40, col_offset=8)], [], lineno=39, col_offset=4)], [], lineno=38, col_offset=0), ClassDef('StringIO', [], [Expr(Str('class StringIO([buffer])\n\n    When a StringIO object is created, it can be initialized to an existing\n    string by passing the string to the constructor. If no string is given,\n    the StringIO will start empty.\n\n    The StringIO object can accept either Unicode or 8-bit strings, but\n    mixing the two may take some care. If both are used, 8-bit strings that\n    cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause\n    a UnicodeError to be raised when getvalue() is called.\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=54, col_offset=17), Name('buf', Param(), lineno=54, col_offset=23)], None, None, [Str('', lineno=54, col_offset=29)]), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=56, col_offset=15), [Name('buf', Load(), lineno=56, col_offset=26), Name('basestring', Load(), lineno=56, col_offset=31)], [], None, None, lineno=56, col_offset=15), lineno=56, col_offset=11), [Assign([Name('buf', Store(), lineno=57, col_offset=12)], Call(Name('str', Load(), lineno=57, col_offset=18), [Name('buf', Load(), lineno=57, col_offset=22)], [], None, None, lineno=57, col_offset=18), lineno=57, col_offset=12)], [], lineno=56, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=58, col_offset=8), 'buf', Store(), lineno=58, col_offset=8)], Name('buf', Load(), lineno=58, col_offset=19), lineno=58, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), 'len', Store(), lineno=59, col_offset=8)], Call(Name('len', Load(), lineno=59, col_offset=19), [Name('buf', Load(), lineno=59, col_offset=23)], [], None, None, lineno=59, col_offset=19), lineno=59, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=60, col_offset=8), 'buflist', Store(), lineno=60, col_offset=8)], List([], Load(), lineno=60, col_offset=23), lineno=60, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=61, col_offset=8), 'pos', Store(), lineno=61, col_offset=8)], Num(0, lineno=61, col_offset=19), lineno=61, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=62, col_offset=8), 'closed', Store(), lineno=62, col_offset=8)], Name('False', Load(), lineno=62, col_offset=22), lineno=62, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=63, col_offset=8), 'softspace', Store(), lineno=63, col_offset=8)], Num(0, lineno=63, col_offset=25), lineno=63, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=65, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=66, col_offset=15), lineno=66, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=68, col_offset=13)], None, None, []), [Expr(Str('A file object is its own iterator, for example iter(f) returns f\n        (unless f is closed). When a file is used as an iterator, typically\n        in a for loop (for example, for line in f: print line), the next()\n        method is called repeatedly. This method returns the next input line,\n        or raises StopIteration when EOF is hit.\n        ', lineno=74, col_offset=-1), lineno=74, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=75, col_offset=8), [Attribute(Name('self', Load(), lineno=75, col_offset=27), 'closed', Load(), lineno=75, col_offset=27)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Assign([Name('r', Store(), lineno=76, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=76, col_offset=12), 'readline', Load(), lineno=76, col_offset=12), [], [], None, None, lineno=76, col_offset=12), lineno=76, col_offset=8), If(UnaryOp(Not(), Name('r', Load(), lineno=77, col_offset=15), lineno=77, col_offset=11), [Raise(Name('StopIteration', Load(), lineno=78, col_offset=18), None, None, lineno=78, col_offset=12)], [], lineno=77, col_offset=8), Return(Name('r', Load(), lineno=79, col_offset=15), lineno=79, col_offset=8)], [], lineno=68, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=81, col_offset=14)], None, None, []), [Expr(Str('Free the memory buffer.\n        ', lineno=83, col_offset=-1), lineno=83, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=84, col_offset=15), 'closed', Load(), lineno=84, col_offset=15), lineno=84, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=85, col_offset=12), 'closed', Store(), lineno=85, col_offset=12)], Name('True', Load(), lineno=85, col_offset=26), lineno=85, col_offset=12), Delete([Attribute(Name('self', Load(), lineno=86, col_offset=16), 'buf', Del(), lineno=86, col_offset=16), Attribute(Name('self', Load(), lineno=86, col_offset=26), 'pos', Del(), lineno=86, col_offset=26)], lineno=86, col_offset=12)], [], lineno=84, col_offset=8)], [], lineno=81, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=88, col_offset=15)], None, None, []), [Expr(Str('Returns False because StringIO objects are not connected to a\n        tty-like device.\n        ', lineno=91, col_offset=-1), lineno=91, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=92, col_offset=8), [Attribute(Name('self', Load(), lineno=92, col_offset=27), 'closed', Load(), lineno=92, col_offset=27)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), Return(Name('False', Load(), lineno=93, col_offset=15), lineno=93, col_offset=8)], [], lineno=88, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=95, col_offset=13), Name('pos', Param(), lineno=95, col_offset=19), Name('mode', Param(), lineno=95, col_offset=24)], None, None, [Num(0, lineno=95, col_offset=31)]), [Expr(Str("Set the file's current position.\n\n        The mode argument is optional and defaults to 0 (absolute file\n        positioning); other values are 1 (seek relative to the current\n        position) and 2 (seek relative to the file's end).\n\n        There is no return value.\n        ", lineno=103, col_offset=-1), lineno=103, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=104, col_offset=8), [Attribute(Name('self', Load(), lineno=104, col_offset=27), 'closed', Load(), lineno=104, col_offset=27)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8), If(Attribute(Name('self', Load(), lineno=105, col_offset=11), 'buflist', Load(), lineno=105, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=106, col_offset=12), 'buf', Store(), lineno=106, col_offset=12), Add(), Call(Attribute(Str('', lineno=106, col_offset=24), 'join', Load(), lineno=106, col_offset=24), [Attribute(Name('self', Load(), lineno=106, col_offset=32), 'buflist', Load(), lineno=106, col_offset=32)], [], None, None, lineno=106, col_offset=24), lineno=106, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=107, col_offset=12), 'buflist', Store(), lineno=107, col_offset=12)], List([], Load(), lineno=107, col_offset=27), lineno=107, col_offset=12)], [], lineno=105, col_offset=8), If(Compare(Name('mode', Load(), lineno=108, col_offset=11), [Eq()], [Num(1, lineno=108, col_offset=19)], lineno=108, col_offset=11), [AugAssign(Name('pos', Store(), lineno=109, col_offset=12), Add(), Attribute(Name('self', Load(), lineno=109, col_offset=19), 'pos', Load(), lineno=109, col_offset=19), lineno=109, col_offset=12)], [If(Compare(Name('mode', Load(), lineno=110, col_offset=13), [Eq()], [Num(2, lineno=110, col_offset=21)], lineno=110, col_offset=13), [AugAssign(Name('pos', Store(), lineno=111, col_offset=12), Add(), Attribute(Name('self', Load(), lineno=111, col_offset=19), 'len', Load(), lineno=111, col_offset=19), lineno=111, col_offset=12)], [], lineno=110, col_offset=13)], lineno=108, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=112, col_offset=8), 'pos', Store(), lineno=112, col_offset=8)], Call(Name('max', Load(), lineno=112, col_offset=19), [Num(0, lineno=112, col_offset=23), Name('pos', Load(), lineno=112, col_offset=26)], [], None, None, lineno=112, col_offset=19), lineno=112, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=114, col_offset=13)], None, None, []), [Expr(Str("Return the file's current position.", lineno=115, col_offset=8), lineno=115, col_offset=8), Expr(Call(Name('_complain_ifclosed', Load(), lineno=116, col_offset=8), [Attribute(Name('self', Load(), lineno=116, col_offset=27), 'closed', Load(), lineno=116, col_offset=27)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8), Return(Attribute(Name('self', Load(), lineno=117, col_offset=15), 'pos', Load(), lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=119, col_offset=13), Name('n', Param(), lineno=119, col_offset=19)], None, None, [Num(-1, lineno=119, col_offset=24)]), [Expr(Str('Read at most size bytes from the file\n        (less if the read hits EOF before obtaining size bytes).\n\n        If the size argument is negative or omitted, read all data until EOF\n        is reached. The bytes are returned as a string object. An empty\n        string is returned when EOF is encountered immediately.\n        ', lineno=126, col_offset=-1), lineno=126, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=127, col_offset=8), [Attribute(Name('self', Load(), lineno=127, col_offset=27), 'closed', Load(), lineno=127, col_offset=27)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8), If(Attribute(Name('self', Load(), lineno=128, col_offset=11), 'buflist', Load(), lineno=128, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=129, col_offset=12), 'buf', Store(), lineno=129, col_offset=12), Add(), Call(Attribute(Str('', lineno=129, col_offset=24), 'join', Load(), lineno=129, col_offset=24), [Attribute(Name('self', Load(), lineno=129, col_offset=32), 'buflist', Load(), lineno=129, col_offset=32)], [], None, None, lineno=129, col_offset=24), lineno=129, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=130, col_offset=12), 'buflist', Store(), lineno=130, col_offset=12)], List([], Load(), lineno=130, col_offset=27), lineno=130, col_offset=12)], [], lineno=128, col_offset=8), If(BoolOp(Or(), [Compare(Name('n', Load(), lineno=131, col_offset=11), [Is()], [Name('None', Load(), lineno=131, col_offset=16)], lineno=131, col_offset=11), Compare(Name('n', Load(), lineno=131, col_offset=24), [Lt()], [Num(0, lineno=131, col_offset=28)], lineno=131, col_offset=24)], lineno=131, col_offset=11), [Assign([Name('newpos', Store(), lineno=132, col_offset=12)], Attribute(Name('self', Load(), lineno=132, col_offset=21), 'len', Load(), lineno=132, col_offset=21), lineno=132, col_offset=12)], [Assign([Name('newpos', Store(), lineno=134, col_offset=12)], Call(Name('min', Load(), lineno=134, col_offset=21), [BinOp(Attribute(Name('self', Load(), lineno=134, col_offset=25), 'pos', Load(), lineno=134, col_offset=25), Add(), Name('n', Load(), lineno=134, col_offset=34), lineno=134, col_offset=25), Attribute(Name('self', Load(), lineno=134, col_offset=37), 'len', Load(), lineno=134, col_offset=37)], [], None, None, lineno=134, col_offset=21), lineno=134, col_offset=12)], lineno=131, col_offset=8), Assign([Name('r', Store(), lineno=135, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=135, col_offset=12), 'buf', Load(), lineno=135, col_offset=12), Slice(Attribute(Name('self', Load(), lineno=135, col_offset=21), 'pos', Load(), lineno=135, col_offset=21), Name('newpos', Load(), lineno=135, col_offset=30), None), Load(), lineno=135, col_offset=12), lineno=135, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=136, col_offset=8), 'pos', Store(), lineno=136, col_offset=8)], Name('newpos', Load(), lineno=136, col_offset=19), lineno=136, col_offset=8), Return(Name('r', Load(), lineno=137, col_offset=15), lineno=137, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=139, col_offset=17), Name('length', Param(), lineno=139, col_offset=23)], None, None, [Name('None', Load(), lineno=139, col_offset=30)]), [Expr(Str("Read one entire line from the file.\n\n        A trailing newline character is kept in the string (but may be absent\n        when a file ends with an incomplete line). If the size argument is\n        present and non-negative, it is a maximum byte count (including the\n        trailing newline) and an incomplete line may be returned.\n\n        An empty string is returned only when EOF is encountered immediately.\n\n        Note: Unlike stdio's fgets(), the returned string contains null\n        characters ('\\0') if they occurred in the input.\n        ", lineno=151, col_offset=-1), lineno=151, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=152, col_offset=8), [Attribute(Name('self', Load(), lineno=152, col_offset=27), 'closed', Load(), lineno=152, col_offset=27)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8), If(Attribute(Name('self', Load(), lineno=153, col_offset=11), 'buflist', Load(), lineno=153, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=154, col_offset=12), 'buf', Store(), lineno=154, col_offset=12), Add(), Call(Attribute(Str('', lineno=154, col_offset=24), 'join', Load(), lineno=154, col_offset=24), [Attribute(Name('self', Load(), lineno=154, col_offset=32), 'buflist', Load(), lineno=154, col_offset=32)], [], None, None, lineno=154, col_offset=24), lineno=154, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=155, col_offset=12), 'buflist', Store(), lineno=155, col_offset=12)], List([], Load(), lineno=155, col_offset=27), lineno=155, col_offset=12)], [], lineno=153, col_offset=8), Assign([Name('i', Store(), lineno=156, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=156, col_offset=12), 'buf', Load(), lineno=156, col_offset=12), 'find', Load(), lineno=156, col_offset=12), [Str('\n', lineno=156, col_offset=26), Attribute(Name('self', Load(), lineno=156, col_offset=32), 'pos', Load(), lineno=156, col_offset=32)], [], None, None, lineno=156, col_offset=12), lineno=156, col_offset=8), If(Compare(Name('i', Load(), lineno=157, col_offset=11), [Lt()], [Num(0, lineno=157, col_offset=15)], lineno=157, col_offset=11), [Assign([Name('newpos', Store(), lineno=158, col_offset=12)], Attribute(Name('self', Load(), lineno=158, col_offset=21), 'len', Load(), lineno=158, col_offset=21), lineno=158, col_offset=12)], [Assign([Name('newpos', Store(), lineno=160, col_offset=12)], BinOp(Name('i', Load(), lineno=160, col_offset=21), Add(), Num(1, lineno=160, col_offset=23), lineno=160, col_offset=21), lineno=160, col_offset=12)], lineno=157, col_offset=8), If(BoolOp(And(), [Compare(Name('length', Load(), lineno=161, col_offset=11), [IsNot()], [Name('None', Load(), lineno=161, col_offset=25)], lineno=161, col_offset=11), Compare(Name('length', Load(), lineno=161, col_offset=34), [Gt()], [Num(0, lineno=161, col_offset=43)], lineno=161, col_offset=34)], lineno=161, col_offset=11), [If(Compare(BinOp(Attribute(Name('self', Load(), lineno=162, col_offset=15), 'pos', Load(), lineno=162, col_offset=15), Add(), Name('length', Load(), lineno=162, col_offset=26), lineno=162, col_offset=15), [Lt()], [Name('newpos', Load(), lineno=162, col_offset=35)], lineno=162, col_offset=15), [Assign([Name('newpos', Store(), lineno=163, col_offset=16)], BinOp(Attribute(Name('self', Load(), lineno=163, col_offset=25), 'pos', Load(), lineno=163, col_offset=25), Add(), Name('length', Load(), lineno=163, col_offset=36), lineno=163, col_offset=25), lineno=163, col_offset=16)], [], lineno=162, col_offset=12)], [], lineno=161, col_offset=8), Assign([Name('r', Store(), lineno=164, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=164, col_offset=12), 'buf', Load(), lineno=164, col_offset=12), Slice(Attribute(Name('self', Load(), lineno=164, col_offset=21), 'pos', Load(), lineno=164, col_offset=21), Name('newpos', Load(), lineno=164, col_offset=30), None), Load(), lineno=164, col_offset=12), lineno=164, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=165, col_offset=8), 'pos', Store(), lineno=165, col_offset=8)], Name('newpos', Load(), lineno=165, col_offset=19), lineno=165, col_offset=8), Return(Name('r', Load(), lineno=166, col_offset=15), lineno=166, col_offset=8)], [], lineno=139, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=168, col_offset=18), Name('sizehint', Param(), lineno=168, col_offset=24)], None, None, [Num(0, lineno=168, col_offset=35)]), [Expr(Str('Read until EOF using readline() and return a list containing the\n        lines thus read.\n\n        If the optional sizehint argument is present, instead of reading up\n        to EOF, whole lines totalling approximately sizehint bytes (or more\n        to accommodate a final whole line).\n        ', lineno=175, col_offset=-1), lineno=175, col_offset=-1), Assign([Name('total', Store(), lineno=176, col_offset=8)], Num(0, lineno=176, col_offset=16), lineno=176, col_offset=8), Assign([Name('lines', Store(), lineno=177, col_offset=8)], List([], Load(), lineno=177, col_offset=16), lineno=177, col_offset=8), Assign([Name('line', Store(), lineno=178, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=178, col_offset=15), 'readline', Load(), lineno=178, col_offset=15), [], [], None, None, lineno=178, col_offset=15), lineno=178, col_offset=8), While(Name('line', Load(), lineno=179, col_offset=14), [Expr(Call(Attribute(Name('lines', Load(), lineno=180, col_offset=12), 'append', Load(), lineno=180, col_offset=12), [Name('line', Load(), lineno=180, col_offset=25)], [], None, None, lineno=180, col_offset=12), lineno=180, col_offset=12), AugAssign(Name('total', Store(), lineno=181, col_offset=12), Add(), Call(Name('len', Load(), lineno=181, col_offset=21), [Name('line', Load(), lineno=181, col_offset=25)], [], None, None, lineno=181, col_offset=21), lineno=181, col_offset=12), If(Compare(Num(0, lineno=182, col_offset=15), [Lt(), LtE()], [Name('sizehint', Load(), lineno=182, col_offset=19), Name('total', Load(), lineno=182, col_offset=31)], lineno=182, col_offset=15), [Break( lineno=183, col_offset=16)], [], lineno=182, col_offset=12), Assign([Name('line', Store(), lineno=184, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=184, col_offset=19), 'readline', Load(), lineno=184, col_offset=19), [], [], None, None, lineno=184, col_offset=19), lineno=184, col_offset=12)], [], lineno=179, col_offset=8), Return(Name('lines', Load(), lineno=185, col_offset=15), lineno=185, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=187, col_offset=17), Name('size', Param(), lineno=187, col_offset=23)], None, None, [Name('None', Load(), lineno=187, col_offset=28)]), [Expr(Str("Truncate the file's size.\n\n        If the optional size argument is present, the file is truncated to\n        (at most) that size. The size defaults to the current position.\n        The current file position is not changed unless the position\n        is beyond the new file size.\n\n        If the specified size exceeds the file's current size, the\n        file remains unchanged.\n        ", lineno=197, col_offset=-1), lineno=197, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=198, col_offset=8), [Attribute(Name('self', Load(), lineno=198, col_offset=27), 'closed', Load(), lineno=198, col_offset=27)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8), If(Compare(Name('size', Load(), lineno=199, col_offset=11), [Is()], [Name('None', Load(), lineno=199, col_offset=19)], lineno=199, col_offset=11), [Assign([Name('size', Store(), lineno=200, col_offset=12)], Attribute(Name('self', Load(), lineno=200, col_offset=19), 'pos', Load(), lineno=200, col_offset=19), lineno=200, col_offset=12)], [If(Compare(Name('size', Load(), lineno=201, col_offset=13), [Lt()], [Num(0, lineno=201, col_offset=20)], lineno=201, col_offset=13), [Raise(Call(Name('IOError', Load(), lineno=202, col_offset=18), [Name('EINVAL', Load(), lineno=202, col_offset=26), Str('Negative size not allowed', lineno=202, col_offset=34)], [], None, None, lineno=202, col_offset=18), None, None, lineno=202, col_offset=12)], [If(Compare(Name('size', Load(), lineno=203, col_offset=13), [Lt()], [Attribute(Name('self', Load(), lineno=203, col_offset=20), 'pos', Load(), lineno=203, col_offset=20)], lineno=203, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=204, col_offset=12), 'pos', Store(), lineno=204, col_offset=12)], Name('size', Load(), lineno=204, col_offset=23), lineno=204, col_offset=12)], [], lineno=203, col_offset=13)], lineno=201, col_offset=13)], lineno=199, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=205, col_offset=8), 'buf', Store(), lineno=205, col_offset=8)], Subscript(Call(Attribute(Name('self', Load(), lineno=205, col_offset=19), 'getvalue', Load(), lineno=205, col_offset=19), [], [], None, None, lineno=205, col_offset=19), Slice(None, Name('size', Load(), lineno=205, col_offset=36), None), Load(), lineno=205, col_offset=19), lineno=205, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=206, col_offset=8), 'len', Store(), lineno=206, col_offset=8)], Name('size', Load(), lineno=206, col_offset=19), lineno=206, col_offset=8)], [], lineno=187, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=208, col_offset=14), Name('s', Param(), lineno=208, col_offset=20)], None, None, []), [Expr(Str('Write a string to the file.\n\n        There is no return value.\n        ', lineno=212, col_offset=-1), lineno=212, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=213, col_offset=8), [Attribute(Name('self', Load(), lineno=213, col_offset=27), 'closed', Load(), lineno=213, col_offset=27)], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8), If(UnaryOp(Not(), Name('s', Load(), lineno=214, col_offset=15), lineno=214, col_offset=11), [Return(None, lineno=214, col_offset=18)], [], lineno=214, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=216, col_offset=15), [Name('s', Load(), lineno=216, col_offset=26), Name('basestring', Load(), lineno=216, col_offset=29)], [], None, None, lineno=216, col_offset=15), lineno=216, col_offset=11), [Assign([Name('s', Store(), lineno=217, col_offset=12)], Call(Name('str', Load(), lineno=217, col_offset=16), [Name('s', Load(), lineno=217, col_offset=20)], [], None, None, lineno=217, col_offset=16), lineno=217, col_offset=12)], [], lineno=216, col_offset=8), Assign([Name('spos', Store(), lineno=218, col_offset=8)], Attribute(Name('self', Load(), lineno=218, col_offset=15), 'pos', Load(), lineno=218, col_offset=15), lineno=218, col_offset=8), Assign([Name('slen', Store(), lineno=219, col_offset=8)], Attribute(Name('self', Load(), lineno=219, col_offset=15), 'len', Load(), lineno=219, col_offset=15), lineno=219, col_offset=8), If(Compare(Name('spos', Load(), lineno=220, col_offset=11), [Eq()], [Name('slen', Load(), lineno=220, col_offset=19)], lineno=220, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=221, col_offset=12), 'buflist', Load(), lineno=221, col_offset=12), 'append', Load(), lineno=221, col_offset=12), [Name('s', Load(), lineno=221, col_offset=32)], [], None, None, lineno=221, col_offset=12), lineno=221, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=222, col_offset=12), 'len', Store(), lineno=222, col_offset=12), Attribute(Name('self', Load(), lineno=222, col_offset=23), 'pos', Store(), lineno=222, col_offset=23)], BinOp(Name('spos', Load(), lineno=222, col_offset=34), Add(), Call(Name('len', Load(), lineno=222, col_offset=41), [Name('s', Load(), lineno=222, col_offset=45)], [], None, None, lineno=222, col_offset=41), lineno=222, col_offset=34), lineno=222, col_offset=12), Return(None, lineno=223, col_offset=12)], [], lineno=220, col_offset=8), If(Compare(Name('spos', Load(), lineno=224, col_offset=11), [Gt()], [Name('slen', Load(), lineno=224, col_offset=18)], lineno=224, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=225, col_offset=12), 'buflist', Load(), lineno=225, col_offset=12), 'append', Load(), lineno=225, col_offset=12), [BinOp(Str('\x00', lineno=225, col_offset=32), Mult(), BinOp(Name('spos', Load(), lineno=225, col_offset=38), Sub(), Name('slen', Load(), lineno=225, col_offset=45), lineno=225, col_offset=38), lineno=225, col_offset=32)], [], None, None, lineno=225, col_offset=12), lineno=225, col_offset=12), Assign([Name('slen', Store(), lineno=226, col_offset=12)], Name('spos', Load(), lineno=226, col_offset=19), lineno=226, col_offset=12)], [], lineno=224, col_offset=8), Assign([Name('newpos', Store(), lineno=227, col_offset=8)], BinOp(Name('spos', Load(), lineno=227, col_offset=17), Add(), Call(Name('len', Load(), lineno=227, col_offset=24), [Name('s', Load(), lineno=227, col_offset=28)], [], None, None, lineno=227, col_offset=24), lineno=227, col_offset=17), lineno=227, col_offset=8), If(Compare(Name('spos', Load(), lineno=228, col_offset=11), [Lt()], [Name('slen', Load(), lineno=228, col_offset=18)], lineno=228, col_offset=11), [If(Attribute(Name('self', Load(), lineno=229, col_offset=15), 'buflist', Load(), lineno=229, col_offset=15), [AugAssign(Attribute(Name('self', Load(), lineno=230, col_offset=16), 'buf', Store(), lineno=230, col_offset=16), Add(), Call(Attribute(Str('', lineno=230, col_offset=28), 'join', Load(), lineno=230, col_offset=28), [Attribute(Name('self', Load(), lineno=230, col_offset=36), 'buflist', Load(), lineno=230, col_offset=36)], [], None, None, lineno=230, col_offset=28), lineno=230, col_offset=16)], [], lineno=229, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=231, col_offset=12), 'buflist', Store(), lineno=231, col_offset=12)], List([Subscript(Attribute(Name('self', Load(), lineno=231, col_offset=28), 'buf', Load(), lineno=231, col_offset=28), Slice(None, Name('spos', Load(), lineno=231, col_offset=38), None), Load(), lineno=231, col_offset=28), Name('s', Load(), lineno=231, col_offset=45), Subscript(Attribute(Name('self', Load(), lineno=231, col_offset=48), 'buf', Load(), lineno=231, col_offset=48), Slice(Name('newpos', Load(), lineno=231, col_offset=57), None, None), Load(), lineno=231, col_offset=48)], Load(), lineno=231, col_offset=27), lineno=231, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=232, col_offset=12), 'buf', Store(), lineno=232, col_offset=12)], Str('', lineno=232, col_offset=23), lineno=232, col_offset=12), If(Compare(Name('newpos', Load(), lineno=233, col_offset=15), [Gt()], [Name('slen', Load(), lineno=233, col_offset=24)], lineno=233, col_offset=15), [Assign([Name('slen', Store(), lineno=234, col_offset=16)], Name('newpos', Load(), lineno=234, col_offset=23), lineno=234, col_offset=16)], [], lineno=233, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=236, col_offset=12), 'buflist', Load(), lineno=236, col_offset=12), 'append', Load(), lineno=236, col_offset=12), [Name('s', Load(), lineno=236, col_offset=32)], [], None, None, lineno=236, col_offset=12), lineno=236, col_offset=12), Assign([Name('slen', Store(), lineno=237, col_offset=12)], Name('newpos', Load(), lineno=237, col_offset=19), lineno=237, col_offset=12)], lineno=228, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=238, col_offset=8), 'len', Store(), lineno=238, col_offset=8)], Name('slen', Load(), lineno=238, col_offset=19), lineno=238, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=239, col_offset=8), 'pos', Store(), lineno=239, col_offset=8)], Name('newpos', Load(), lineno=239, col_offset=19), lineno=239, col_offset=8)], [], lineno=208, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=241, col_offset=19), Name('iterable', Param(), lineno=241, col_offset=25)], None, None, []), [Expr(Str('Write a sequence of strings to the file. The sequence can be any\n        iterable object producing strings, typically a list of strings. There\n        is no return value.\n\n        (The name is intended to match readlines(); writelines() does not add\n        line separators.)\n        ', lineno=248, col_offset=-1), lineno=248, col_offset=-1), Assign([Name('write', Store(), lineno=249, col_offset=8)], Attribute(Name('self', Load(), lineno=249, col_offset=16), 'write', Load(), lineno=249, col_offset=16), lineno=249, col_offset=8), For(Name('line', Store(), lineno=250, col_offset=12), Name('iterable', Load(), lineno=250, col_offset=20), [Expr(Call(Name('write', Load(), lineno=251, col_offset=12), [Name('line', Load(), lineno=251, col_offset=18)], [], None, None, lineno=251, col_offset=12), lineno=251, col_offset=12)], [], lineno=250, col_offset=8)], [], lineno=241, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=253, col_offset=14)], None, None, []), [Expr(Str('Flush the internal buffer\n        ', lineno=255, col_offset=-1), lineno=255, col_offset=-1), Expr(Call(Name('_complain_ifclosed', Load(), lineno=256, col_offset=8), [Attribute(Name('self', Load(), lineno=256, col_offset=27), 'closed', Load(), lineno=256, col_offset=27)], [], None, None, lineno=256, col_offset=8), lineno=256, col_offset=8)], [], lineno=253, col_offset=4), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=258, col_offset=17)], None, None, []), [Expr(Str('\n        Retrieve the entire contents of the "file" at any time before\n        the StringIO object\'s close() method is called.\n\n        The StringIO object can accept either Unicode or 8-bit strings,\n        but mixing the two may take some care. If both are used, 8-bit\n        strings that cannot be interpreted as 7-bit ASCII (that use the\n        8th bit) will cause a UnicodeError to be raised when getvalue()\n        is called.\n        ', lineno=268, col_offset=-1), lineno=268, col_offset=-1), If(Attribute(Name('self', Load(), lineno=269, col_offset=11), 'buflist', Load(), lineno=269, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=270, col_offset=12), 'buf', Store(), lineno=270, col_offset=12), Add(), Call(Attribute(Str('', lineno=270, col_offset=24), 'join', Load(), lineno=270, col_offset=24), [Attribute(Name('self', Load(), lineno=270, col_offset=32), 'buflist', Load(), lineno=270, col_offset=32)], [], None, None, lineno=270, col_offset=24), lineno=270, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=271, col_offset=12), 'buflist', Store(), lineno=271, col_offset=12)], List([], Load(), lineno=271, col_offset=27), lineno=271, col_offset=12)], [], lineno=269, col_offset=8), Return(Attribute(Name('self', Load(), lineno=272, col_offset=15), 'buf', Load(), lineno=272, col_offset=15), lineno=272, col_offset=8)], [], lineno=258, col_offset=4)], [], lineno=42, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Import([alias('sys', None)], lineno=278, col_offset=4), If(Subscript(Attribute(Name('sys', Load(), lineno=279, col_offset=7), 'argv', Load(), lineno=279, col_offset=7), Slice(Num(1, lineno=279, col_offset=16), None, None), Load(), lineno=279, col_offset=7), [Assign([Name('file', Store(), lineno=280, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=280, col_offset=15), 'argv', Load(), lineno=280, col_offset=15), Index(Num(1, lineno=280, col_offset=24)), Load(), lineno=280, col_offset=15), lineno=280, col_offset=8)], [Assign([Name('file', Store(), lineno=282, col_offset=8)], Str('/etc/passwd', lineno=282, col_offset=15), lineno=282, col_offset=8)], lineno=279, col_offset=4), Assign([Name('lines', Store(), lineno=283, col_offset=4)], Call(Attribute(Call(Name('open', Load(), lineno=283, col_offset=12), [Name('file', Load(), lineno=283, col_offset=17), Str('r', lineno=283, col_offset=23)], [], None, None, lineno=283, col_offset=12), 'readlines', Load(), lineno=283, col_offset=12), [], [], None, None, lineno=283, col_offset=12), lineno=283, col_offset=4), Assign([Name('text', Store(), lineno=284, col_offset=4)], Call(Attribute(Call(Name('open', Load(), lineno=284, col_offset=11), [Name('file', Load(), lineno=284, col_offset=16), Str('r', lineno=284, col_offset=22)], [], None, None, lineno=284, col_offset=11), 'read', Load(), lineno=284, col_offset=11), [], [], None, None, lineno=284, col_offset=11), lineno=284, col_offset=4), Assign([Name('f', Store(), lineno=285, col_offset=4)], Call(Name('StringIO', Load(), lineno=285, col_offset=8), [], [], None, None, lineno=285, col_offset=8), lineno=285, col_offset=4), For(Name('line', Store(), lineno=286, col_offset=8), Subscript(Name('lines', Load(), lineno=286, col_offset=16), Slice(None, Num(-2, lineno=286, col_offset=24), None), Load(), lineno=286, col_offset=16), [Expr(Call(Attribute(Name('f', Load(), lineno=287, col_offset=8), 'write', Load(), lineno=287, col_offset=8), [Name('line', Load(), lineno=287, col_offset=16)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=286, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=288, col_offset=4), 'writelines', Load(), lineno=288, col_offset=4), [Subscript(Name('lines', Load(), lineno=288, col_offset=17), Slice(Num(-2, lineno=288, col_offset=24), None, None), Load(), lineno=288, col_offset=17)], [], None, None, lineno=288, col_offset=4), lineno=288, col_offset=4), If(Compare(Call(Attribute(Name('f', Load(), lineno=289, col_offset=7), 'getvalue', Load(), lineno=289, col_offset=7), [], [], None, None, lineno=289, col_offset=7), [NotEq()], [Name('text', Load(), lineno=289, col_offset=23)], lineno=289, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=290, col_offset=14), Str('write failed', lineno=290, col_offset=28), None, lineno=290, col_offset=8)], [], lineno=289, col_offset=4), Assign([Name('length', Store(), lineno=291, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=291, col_offset=13), 'tell', Load(), lineno=291, col_offset=13), [], [], None, None, lineno=291, col_offset=13), lineno=291, col_offset=4), Print(None, [Str('File length =', lineno=292, col_offset=10), Name('length', Load(), lineno=292, col_offset=27)], True, lineno=292, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=293, col_offset=4), 'seek', Load(), lineno=293, col_offset=4), [Call(Name('len', Load(), lineno=293, col_offset=11), [Subscript(Name('lines', Load(), lineno=293, col_offset=15), Index(Num(0, lineno=293, col_offset=21)), Load(), lineno=293, col_offset=15)], [], None, None, lineno=293, col_offset=11)], [], None, None, lineno=293, col_offset=4), lineno=293, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=294, col_offset=4), 'write', Load(), lineno=294, col_offset=4), [Subscript(Name('lines', Load(), lineno=294, col_offset=12), Index(Num(1, lineno=294, col_offset=18)), Load(), lineno=294, col_offset=12)], [], None, None, lineno=294, col_offset=4), lineno=294, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=295, col_offset=4), 'seek', Load(), lineno=295, col_offset=4), [Num(0, lineno=295, col_offset=11)], [], None, None, lineno=295, col_offset=4), lineno=295, col_offset=4), Print(None, [Str('First line =', lineno=296, col_offset=10), Call(Name('repr', Load(), lineno=296, col_offset=26), [Call(Attribute(Name('f', Load(), lineno=296, col_offset=31), 'readline', Load(), lineno=296, col_offset=31), [], [], None, None, lineno=296, col_offset=31)], [], None, None, lineno=296, col_offset=26)], True, lineno=296, col_offset=4), Print(None, [Str('Position =', lineno=297, col_offset=10), Call(Attribute(Name('f', Load(), lineno=297, col_offset=24), 'tell', Load(), lineno=297, col_offset=24), [], [], None, None, lineno=297, col_offset=24)], True, lineno=297, col_offset=4), Assign([Name('line', Store(), lineno=298, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=298, col_offset=11), 'readline', Load(), lineno=298, col_offset=11), [], [], None, None, lineno=298, col_offset=11), lineno=298, col_offset=4), Print(None, [Str('Second line =', lineno=299, col_offset=10), Call(Name('repr', Load(), lineno=299, col_offset=27), [Name('line', Load(), lineno=299, col_offset=32)], [], None, None, lineno=299, col_offset=27)], True, lineno=299, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=300, col_offset=4), 'seek', Load(), lineno=300, col_offset=4), [UnaryOp(USub(), Call(Name('len', Load(), lineno=300, col_offset=12), [Name('line', Load(), lineno=300, col_offset=16)], [], None, None, lineno=300, col_offset=12), lineno=300, col_offset=11), Num(1, lineno=300, col_offset=23)], [], None, None, lineno=300, col_offset=4), lineno=300, col_offset=4), Assign([Name('line2', Store(), lineno=301, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=301, col_offset=12), 'read', Load(), lineno=301, col_offset=12), [Call(Name('len', Load(), lineno=301, col_offset=19), [Name('line', Load(), lineno=301, col_offset=23)], [], None, None, lineno=301, col_offset=19)], [], None, None, lineno=301, col_offset=12), lineno=301, col_offset=4), If(Compare(Name('line', Load(), lineno=302, col_offset=7), [NotEq()], [Name('line2', Load(), lineno=302, col_offset=15)], lineno=302, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=303, col_offset=14), Str('bad result after seek back', lineno=303, col_offset=28), None, lineno=303, col_offset=8)], [], lineno=302, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=304, col_offset=4), 'seek', Load(), lineno=304, col_offset=4), [Call(Name('len', Load(), lineno=304, col_offset=11), [Name('line2', Load(), lineno=304, col_offset=15)], [], None, None, lineno=304, col_offset=11), Num(1, lineno=304, col_offset=23)], [], None, None, lineno=304, col_offset=4), lineno=304, col_offset=4), Assign([Name('list', Store(), lineno=305, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=305, col_offset=11), 'readlines', Load(), lineno=305, col_offset=11), [], [], None, None, lineno=305, col_offset=11), lineno=305, col_offset=4), Assign([Name('line', Store(), lineno=306, col_offset=4)], Subscript(Name('list', Load(), lineno=306, col_offset=11), Index(Num(-1, lineno=306, col_offset=17)), Load(), lineno=306, col_offset=11), lineno=306, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=307, col_offset=4), 'seek', Load(), lineno=307, col_offset=4), [BinOp(Call(Attribute(Name('f', Load(), lineno=307, col_offset=11), 'tell', Load(), lineno=307, col_offset=11), [], [], None, None, lineno=307, col_offset=11), Sub(), Call(Name('len', Load(), lineno=307, col_offset=22), [Name('line', Load(), lineno=307, col_offset=26)], [], None, None, lineno=307, col_offset=22), lineno=307, col_offset=11)], [], None, None, lineno=307, col_offset=4), lineno=307, col_offset=4), Assign([Name('line2', Store(), lineno=308, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=308, col_offset=12), 'read', Load(), lineno=308, col_offset=12), [], [], None, None, lineno=308, col_offset=12), lineno=308, col_offset=4), If(Compare(Name('line', Load(), lineno=309, col_offset=7), [NotEq()], [Name('line2', Load(), lineno=309, col_offset=15)], lineno=309, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=310, col_offset=14), Str('bad result after seek back from EOF', lineno=310, col_offset=28), None, lineno=310, col_offset=8)], [], lineno=309, col_offset=4), Print(None, [Str('Read', lineno=311, col_offset=10), Call(Name('len', Load(), lineno=311, col_offset=18), [Name('list', Load(), lineno=311, col_offset=22)], [], None, None, lineno=311, col_offset=18), Str('more lines', lineno=311, col_offset=29)], True, lineno=311, col_offset=4), Print(None, [Str('File length =', lineno=312, col_offset=10), Call(Attribute(Name('f', Load(), lineno=312, col_offset=27), 'tell', Load(), lineno=312, col_offset=27), [], [], None, None, lineno=312, col_offset=27)], True, lineno=312, col_offset=4), If(Compare(Call(Attribute(Name('f', Load(), lineno=313, col_offset=7), 'tell', Load(), lineno=313, col_offset=7), [], [], None, None, lineno=313, col_offset=7), [NotEq()], [Name('length', Load(), lineno=313, col_offset=19)], lineno=313, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=314, col_offset=14), Str('bad length', lineno=314, col_offset=28), None, lineno=314, col_offset=8)], [], lineno=313, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=315, col_offset=4), 'truncate', Load(), lineno=315, col_offset=4), [BinOp(Name('length', Load(), lineno=315, col_offset=15), Div(), Num(2, lineno=315, col_offset=22), lineno=315, col_offset=15)], [], None, None, lineno=315, col_offset=4), lineno=315, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=316, col_offset=4), 'seek', Load(), lineno=316, col_offset=4), [Num(0, lineno=316, col_offset=11), Num(2, lineno=316, col_offset=14)], [], None, None, lineno=316, col_offset=4), lineno=316, col_offset=4), Print(None, [Str('Truncated length =', lineno=317, col_offset=10), Call(Attribute(Name('f', Load(), lineno=317, col_offset=32), 'tell', Load(), lineno=317, col_offset=32), [], [], None, None, lineno=317, col_offset=32)], True, lineno=317, col_offset=4), If(Compare(Call(Attribute(Name('f', Load(), lineno=318, col_offset=7), 'tell', Load(), lineno=318, col_offset=7), [], [], None, None, lineno=318, col_offset=7), [NotEq()], [BinOp(Name('length', Load(), lineno=318, col_offset=19), Div(), Num(2, lineno=318, col_offset=26), lineno=318, col_offset=19)], lineno=318, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=319, col_offset=14), Str('truncate did not adjust length', lineno=319, col_offset=28), None, lineno=319, col_offset=8)], [], lineno=318, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=320, col_offset=4), 'close', Load(), lineno=320, col_offset=4), [], [], None, None, lineno=320, col_offset=4), lineno=320, col_offset=4)], [], lineno=277, col_offset=0), If(Compare(Name('__name__', Load(), lineno=322, col_offset=3), [Eq()], [Str('__main__', lineno=322, col_offset=15)], lineno=322, col_offset=3), [Expr(Call(Name('test', Load(), lineno=323, col_offset=4), [], [], None, None, lineno=323, col_offset=4), lineno=323, col_offset=4)], [], lineno=322, col_offset=0)])
