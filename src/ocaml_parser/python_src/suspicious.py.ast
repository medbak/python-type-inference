Module([Expr(Str('\nTry to detect suspicious constructs, resembling markup\nthat has leaked into the final output.\n\nSuspicious lines are reported in a comma-separated-file,\n``suspicious.csv``, located in the output directory.\n\nThe file is utf-8 encoded, and each line contains four fields:\n\n * document name (normalized)\n * line number in the source document\n * problematic text\n * complete line showing the problematic text in context\n\nIt is common to find many false positives. To avoid reporting them\nagain and again, they may be added to the ``ignored.csv`` file\n(located in the configuration directory). The file has the same\nformat as ``suspicious.csv`` with a few differences:\n\n  - each line defines a rule; if the rule matches, the issue\n    is ignored.\n  - line number may be empty (that is, nothing between the\n    commas: ",,"). In this case, line numbers are ignored (the\n    rule matches anywhere in the file).\n  - the last field does not have to be a complete line; some\n    surrounding text (never more than a line) is enough for\n    context.\n\nRules are processed sequentially. A rule matches when:\n\n * document names are the same\n * problematic texts are the same\n * line numbers are close to each other (5 lines up or down)\n * the rule text is completely contained into the source line\n\nThe simplest way to create the ignored.csv file is by copying\nundesired entries from suspicious.csv (possibly trimming the last\nfield.)\n\nCopyright 2009 Gabriel A. Genellina\n\n', lineno=42, col_offset=-1), lineno=42, col_offset=-1), Import([alias('os', None)], lineno=44, col_offset=0), Import([alias('re', None)], lineno=45, col_offset=0), Import([alias('csv', None)], lineno=46, col_offset=0), Import([alias('sys', None)], lineno=47, col_offset=0), ImportFrom('docutils', [alias('nodes', None)], 0, lineno=49, col_offset=0), ImportFrom('sphinx.builders', [alias('Builder', None)], 0, lineno=50, col_offset=0), Assign([Name('detect_all', Store(), lineno=52, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=52, col_offset=13), 'compile', Load(), lineno=52, col_offset=13), [Str(u'\n    ::(?=[^=])|            # two :: (but NOT ::=)\n    :[a-zA-Z][a-zA-Z0-9]+| # :foo\n    `|                     # ` (seldom used by itself)\n    (?<!\\.)\\.\\.[ \\t]*\\w+:  # .. foo: (but NOT ... else:)\n    ', lineno=57, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=57, col_offset=9), 'UNICODE', Load(), lineno=57, col_offset=9), BitOr(), Attribute(Name('re', Load(), lineno=57, col_offset=22), 'VERBOSE', Load(), lineno=57, col_offset=22), lineno=57, col_offset=9)], [], None, None, lineno=52, col_offset=13), 'finditer', Load(), lineno=52, col_offset=13), lineno=52, col_offset=0), ClassDef('Rule', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=61, col_offset=17), Name('docname', Param(), lineno=61, col_offset=23), Name('lineno', Param(), lineno=61, col_offset=32), Name('issue', Param(), lineno=61, col_offset=40), Name('line', Param(), lineno=61, col_offset=47)], None, None, []), [Expr(Str('A rule for ignoring issues', lineno=62, col_offset=8), lineno=62, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=63, col_offset=8), 'docname', Store(), lineno=63, col_offset=8)], Name('docname', Load(), lineno=63, col_offset=23), lineno=63, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=64, col_offset=8), 'lineno', Store(), lineno=64, col_offset=8)], Name('lineno', Load(), lineno=64, col_offset=22), lineno=64, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=67, col_offset=8), 'issue', Store(), lineno=67, col_offset=8)], Name('issue', Load(), lineno=67, col_offset=21), lineno=67, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=68, col_offset=8), 'line', Store(), lineno=68, col_offset=8)], Name('line', Load(), lineno=68, col_offset=20), lineno=68, col_offset=8)], [], lineno=61, col_offset=4)], [], lineno=60, col_offset=0), ClassDef('dialect', [Attribute(Name('csv', Load(), lineno=72, col_offset=14), 'excel', Load(), lineno=72, col_offset=14)], [Expr(Str('Our dialect: uses only linefeed as newline.', lineno=73, col_offset=4), lineno=73, col_offset=4), Assign([Name('lineterminator', Store(), lineno=74, col_offset=4)], Str('\n', lineno=74, col_offset=21), lineno=74, col_offset=4)], [], lineno=72, col_offset=0), ClassDef('CheckSuspiciousMarkupBuilder', [Name('Builder', Load(), lineno=77, col_offset=35)], [Expr(Str('\n    Checks for possibly invalid markup that may leak into the output.\n    ', lineno=80, col_offset=-1), lineno=80, col_offset=-1), Assign([Name('name', Store(), lineno=81, col_offset=4)], Str('suspicious', lineno=81, col_offset=11), lineno=81, col_offset=4), FunctionDef('init', arguments([Name('self', Param(), lineno=83, col_offset=13)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=85, col_offset=8), 'log_file_name', Store(), lineno=85, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=85, col_offset=29), 'path', Load(), lineno=85, col_offset=29), 'join', Load(), lineno=85, col_offset=29), [Attribute(Name('self', Load(), lineno=85, col_offset=42), 'outdir', Load(), lineno=85, col_offset=42), Str('suspicious.csv', lineno=85, col_offset=55)], [], None, None, lineno=85, col_offset=29), lineno=85, col_offset=8), Expr(Call(Attribute(Call(Name('open', Load(), lineno=86, col_offset=8), [Attribute(Name('self', Load(), lineno=86, col_offset=13), 'log_file_name', Load(), lineno=86, col_offset=13), Str('w', lineno=86, col_offset=33)], [], None, None, lineno=86, col_offset=8), 'close', Load(), lineno=86, col_offset=8), [], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'load_rules', Load(), lineno=88, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=88, col_offset=24), 'path', Load(), lineno=88, col_offset=24), 'join', Load(), lineno=88, col_offset=24), [Call(Attribute(Attribute(Name('os', Load(), lineno=88, col_offset=37), 'path', Load(), lineno=88, col_offset=37), 'dirname', Load(), lineno=88, col_offset=37), [Name('__file__', Load(), lineno=88, col_offset=53)], [], None, None, lineno=88, col_offset=37), Str('susp-ignored.csv', lineno=89, col_offset=37)], [], None, None, lineno=88, col_offset=24)], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('get_outdated_docs', arguments([Name('self', Param(), lineno=91, col_offset=26)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=92, col_offset=15), 'env', Load(), lineno=92, col_offset=15), 'found_docs', Load(), lineno=92, col_offset=15), lineno=92, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('get_target_uri', arguments([Name('self', Param(), lineno=94, col_offset=23), Name('docname', Param(), lineno=94, col_offset=29), Name('typ', Param(), lineno=94, col_offset=38)], None, None, [Name('None', Load(), lineno=94, col_offset=42)]), [Return(Str('', lineno=95, col_offset=15), lineno=95, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('prepare_writing', arguments([Name('self', Param(), lineno=97, col_offset=24), Name('docnames', Param(), lineno=97, col_offset=30)], None, None, []), [Pass( lineno=98, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('write_doc', arguments([Name('self', Param(), lineno=100, col_offset=18), Name('docname', Param(), lineno=100, col_offset=24), Name('doctree', Param(), lineno=100, col_offset=33)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=102, col_offset=8), 'any_issue', Store(), lineno=102, col_offset=8)], Name('False', Load(), lineno=102, col_offset=25), lineno=102, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=103, col_offset=8), 'docname', Store(), lineno=103, col_offset=8)], Name('docname', Load(), lineno=103, col_offset=23), lineno=103, col_offset=8), Assign([Name('visitor', Store(), lineno=104, col_offset=8)], Call(Name('SuspiciousVisitor', Load(), lineno=104, col_offset=18), [Name('doctree', Load(), lineno=104, col_offset=36), Name('self', Load(), lineno=104, col_offset=45)], [], None, None, lineno=104, col_offset=18), lineno=104, col_offset=8), Expr(Call(Attribute(Name('doctree', Load(), lineno=105, col_offset=8), 'walk', Load(), lineno=105, col_offset=8), [Name('visitor', Load(), lineno=105, col_offset=21)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('finish', arguments([Name('self', Param(), lineno=107, col_offset=15)], None, None, []), [Return(None, lineno=108, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('check_issue', arguments([Name('self', Param(), lineno=110, col_offset=20), Name('line', Param(), lineno=110, col_offset=26), Name('lineno', Param(), lineno=110, col_offset=32), Name('issue', Param(), lineno=110, col_offset=40)], None, None, []), [If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=111, col_offset=15), 'is_ignored', Load(), lineno=111, col_offset=15), [Name('line', Load(), lineno=111, col_offset=31), Name('lineno', Load(), lineno=111, col_offset=37), Name('issue', Load(), lineno=111, col_offset=45)], [], None, None, lineno=111, col_offset=15), lineno=111, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=112, col_offset=12), 'report_issue', Load(), lineno=112, col_offset=12), [Name('line', Load(), lineno=112, col_offset=30), Name('lineno', Load(), lineno=112, col_offset=36), Name('issue', Load(), lineno=112, col_offset=44)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12)], [], lineno=111, col_offset=8)], [], lineno=110, col_offset=4), FunctionDef('is_ignored', arguments([Name('self', Param(), lineno=114, col_offset=19), Name('line', Param(), lineno=114, col_offset=25), Name('lineno', Param(), lineno=114, col_offset=31), Name('issue', Param(), lineno=114, col_offset=39)], None, None, []), [Expr(Str('Determine whether this issue should be ignored.', lineno=115, col_offset=8), lineno=115, col_offset=8), Assign([Name('docname', Store(), lineno=116, col_offset=8)], Attribute(Name('self', Load(), lineno=116, col_offset=18), 'docname', Load(), lineno=116, col_offset=18), lineno=116, col_offset=8), For(Name('rule', Store(), lineno=117, col_offset=12), Attribute(Name('self', Load(), lineno=117, col_offset=20), 'rules', Load(), lineno=117, col_offset=20), [If(Compare(Attribute(Name('rule', Load(), lineno=118, col_offset=15), 'docname', Load(), lineno=118, col_offset=15), [NotEq()], [Name('docname', Load(), lineno=118, col_offset=31)], lineno=118, col_offset=15), [Continue( lineno=118, col_offset=40)], [], lineno=118, col_offset=12), If(Compare(Attribute(Name('rule', Load(), lineno=119, col_offset=15), 'issue', Load(), lineno=119, col_offset=15), [NotEq()], [Name('issue', Load(), lineno=119, col_offset=29)], lineno=119, col_offset=15), [Continue( lineno=119, col_offset=36)], [], lineno=119, col_offset=12), If(Compare(Attribute(Name('rule', Load(), lineno=126, col_offset=15), 'line', Load(), lineno=126, col_offset=15), [NotIn()], [Name('line', Load(), lineno=126, col_offset=32)], lineno=126, col_offset=15), [Continue( lineno=126, col_offset=38)], [], lineno=126, col_offset=12), If(BoolOp(And(), [Compare(Attribute(Name('rule', Load(), lineno=129, col_offset=16), 'lineno', Load(), lineno=129, col_offset=16), [IsNot()], [Name('None', Load(), lineno=129, col_offset=35)], lineno=129, col_offset=16), Compare(Call(Name('abs', Load(), lineno=130, col_offset=16), [BinOp(Attribute(Name('rule', Load(), lineno=130, col_offset=20), 'lineno', Load(), lineno=130, col_offset=20), Sub(), Name('lineno', Load(), lineno=130, col_offset=34), lineno=130, col_offset=20)], [], None, None, lineno=130, col_offset=16), [Gt()], [Num(5, lineno=130, col_offset=44)], lineno=130, col_offset=16)], lineno=129, col_offset=15), [Continue( lineno=130, col_offset=47)], [], lineno=129, col_offset=12), Return(Name('True', Load(), lineno=132, col_offset=19), lineno=132, col_offset=12)], [], lineno=117, col_offset=8), Return(Name('False', Load(), lineno=133, col_offset=15), lineno=133, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('report_issue', arguments([Name('self', Param(), lineno=135, col_offset=21), Name('text', Param(), lineno=135, col_offset=27), Name('lineno', Param(), lineno=135, col_offset=33), Name('issue', Param(), lineno=135, col_offset=41)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=136, col_offset=15), 'any_issue', Load(), lineno=136, col_offset=15), lineno=136, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=31), 'info', Load(), lineno=136, col_offset=31), [], [], None, None, lineno=136, col_offset=31), lineno=136, col_offset=31)], [], lineno=136, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=137, col_offset=8), 'any_issue', Store(), lineno=137, col_offset=8)], Name('True', Load(), lineno=137, col_offset=25), lineno=137, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'write_log_entry', Load(), lineno=138, col_offset=8), [Name('lineno', Load(), lineno=138, col_offset=29), Name('issue', Load(), lineno=138, col_offset=37), Name('text', Load(), lineno=138, col_offset=44)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=139, col_offset=8), 'warn', Load(), lineno=139, col_offset=8), [BinOp(Str('[%s:%d] "%s" found in "%-.120s"', lineno=139, col_offset=18), Mod(), Tuple([Call(Attribute(Attribute(Name('self', Load(), lineno=140, col_offset=16), 'docname', Load(), lineno=140, col_offset=16), 'encode', Load(), lineno=140, col_offset=16), [Call(Attribute(Name('sys', Load(), lineno=140, col_offset=36), 'getdefaultencoding', Load(), lineno=140, col_offset=36), [], [], None, None, lineno=140, col_offset=36), Str('replace', lineno=140, col_offset=61)], [], None, None, lineno=140, col_offset=16), Name('lineno', Load(), lineno=141, col_offset=16), Call(Attribute(Name('issue', Load(), lineno=142, col_offset=16), 'encode', Load(), lineno=142, col_offset=16), [Call(Attribute(Name('sys', Load(), lineno=142, col_offset=29), 'getdefaultencoding', Load(), lineno=142, col_offset=29), [], [], None, None, lineno=142, col_offset=29), Str('replace', lineno=142, col_offset=54)], [], None, None, lineno=142, col_offset=16), Call(Attribute(Call(Attribute(Name('text', Load(), lineno=143, col_offset=16), 'strip', Load(), lineno=143, col_offset=16), [], [], None, None, lineno=143, col_offset=16), 'encode', Load(), lineno=143, col_offset=16), [Call(Attribute(Name('sys', Load(), lineno=143, col_offset=36), 'getdefaultencoding', Load(), lineno=143, col_offset=36), [], [], None, None, lineno=143, col_offset=36), Str('replace', lineno=143, col_offset=61)], [], None, None, lineno=143, col_offset=16)], Load(), lineno=140, col_offset=16), lineno=139, col_offset=18)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8), Assign([Attribute(Attribute(Name('self', Load(), lineno=144, col_offset=8), 'app', Load(), lineno=144, col_offset=8), 'statuscode', Store(), lineno=144, col_offset=8)], Num(1, lineno=144, col_offset=30), lineno=144, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('write_log_entry', arguments([Name('self', Param(), lineno=146, col_offset=24), Name('lineno', Param(), lineno=146, col_offset=30), Name('issue', Param(), lineno=146, col_offset=38), Name('text', Param(), lineno=146, col_offset=45)], None, None, []), [Assign([Name('f', Store(), lineno=147, col_offset=8)], Call(Name('open', Load(), lineno=147, col_offset=12), [Attribute(Name('self', Load(), lineno=147, col_offset=17), 'log_file_name', Load(), lineno=147, col_offset=17), Str('ab', lineno=147, col_offset=37)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=8), Assign([Name('writer', Store(), lineno=148, col_offset=8)], Call(Attribute(Name('csv', Load(), lineno=148, col_offset=17), 'writer', Load(), lineno=148, col_offset=17), [Name('f', Load(), lineno=148, col_offset=28), Name('dialect', Load(), lineno=148, col_offset=31)], [], None, None, lineno=148, col_offset=17), lineno=148, col_offset=8), Expr(Call(Attribute(Name('writer', Load(), lineno=149, col_offset=8), 'writerow', Load(), lineno=149, col_offset=8), [List([Call(Attribute(Attribute(Name('self', Load(), lineno=149, col_offset=25), 'docname', Load(), lineno=149, col_offset=25), 'encode', Load(), lineno=149, col_offset=25), [Str('utf-8', lineno=149, col_offset=45)], [], None, None, lineno=149, col_offset=25), Name('lineno', Load(), lineno=150, col_offset=25), Call(Attribute(Name('issue', Load(), lineno=151, col_offset=25), 'encode', Load(), lineno=151, col_offset=25), [Str('utf-8', lineno=151, col_offset=38)], [], None, None, lineno=151, col_offset=25), Call(Attribute(Call(Attribute(Name('text', Load(), lineno=152, col_offset=25), 'strip', Load(), lineno=152, col_offset=25), [], [], None, None, lineno=152, col_offset=25), 'encode', Load(), lineno=152, col_offset=25), [Str('utf-8', lineno=152, col_offset=45)], [], None, None, lineno=152, col_offset=25)], Load(), lineno=149, col_offset=24)], [], None, None, lineno=149, col_offset=8), lineno=149, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=153, col_offset=8), 'close', Load(), lineno=153, col_offset=8), [], [], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8)], [], lineno=146, col_offset=4), FunctionDef('load_rules', arguments([Name('self', Param(), lineno=155, col_offset=19), Name('filename', Param(), lineno=155, col_offset=25)], None, None, []), [Expr(Str('Load database of previously ignored issues.\n\n        A csv file, with exactly the same format as suspicious.csv\n        Fields: document name (normalized), line number, issue, surrounding text\n        ', lineno=160, col_offset=-1), lineno=160, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=161, col_offset=8), 'info', Load(), lineno=161, col_offset=8), [Str('loading ignore rules... ', lineno=161, col_offset=18)], [keyword('nonl', Num(1, lineno=161, col_offset=51))], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=162, col_offset=8), 'rules', Store(), lineno=162, col_offset=8), Name('rules', Store(), lineno=162, col_offset=21)], List([], Load(), lineno=162, col_offset=29), lineno=162, col_offset=8), TryExcept([Assign([Name('f', Store(), lineno=163, col_offset=13)], Call(Name('open', Load(), lineno=163, col_offset=17), [Name('filename', Load(), lineno=163, col_offset=22), Str('rb', lineno=163, col_offset=32)], [], None, None, lineno=163, col_offset=17), lineno=163, col_offset=13)], [ExceptHandler(Name('IOError', Load(), lineno=164, col_offset=15), None, [Return(None, lineno=164, col_offset=24)], lineno=164, col_offset=8)], [], lineno=163, col_offset=8), For(Tuple([Name('i', Store(), lineno=165, col_offset=12), Name('row', Store(), lineno=165, col_offset=15)], Store(), lineno=165, col_offset=12), Call(Name('enumerate', Load(), lineno=165, col_offset=22), [Call(Attribute(Name('csv', Load(), lineno=165, col_offset=32), 'reader', Load(), lineno=165, col_offset=32), [Name('f', Load(), lineno=165, col_offset=43)], [], None, None, lineno=165, col_offset=32)], [], None, None, lineno=165, col_offset=22), [If(Compare(Call(Name('len', Load(), lineno=166, col_offset=15), [Name('row', Load(), lineno=166, col_offset=19)], [], None, None, lineno=166, col_offset=15), [NotEq()], [Num(4, lineno=166, col_offset=27)], lineno=166, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=167, col_offset=22), [BinOp(Str('wrong format in %s, line %d: %s', lineno=168, col_offset=20), Mod(), Tuple([Name('filename', Load(), lineno=168, col_offset=57), BinOp(Name('i', Load(), lineno=168, col_offset=67), Add(), Num(1, lineno=168, col_offset=69), lineno=168, col_offset=67), Name('row', Load(), lineno=168, col_offset=72)], Load(), lineno=168, col_offset=57), lineno=168, col_offset=20)], [], None, None, lineno=167, col_offset=22), None, None, lineno=167, col_offset=16)], [], lineno=166, col_offset=12), Assign([Tuple([Name('docname', Store(), lineno=169, col_offset=12), Name('lineno', Store(), lineno=169, col_offset=21), Name('issue', Store(), lineno=169, col_offset=29), Name('text', Store(), lineno=169, col_offset=36)], Store(), lineno=169, col_offset=12)], Name('row', Load(), lineno=169, col_offset=43), lineno=169, col_offset=12), Assign([Name('docname', Store(), lineno=170, col_offset=12)], Call(Attribute(Name('docname', Load(), lineno=170, col_offset=22), 'decode', Load(), lineno=170, col_offset=22), [Str('utf-8', lineno=170, col_offset=37)], [], None, None, lineno=170, col_offset=22), lineno=170, col_offset=12), If(Name('lineno', Load(), lineno=171, col_offset=15), [Assign([Name('lineno', Store(), lineno=171, col_offset=23)], Call(Name('int', Load(), lineno=171, col_offset=32), [Name('lineno', Load(), lineno=171, col_offset=36)], [], None, None, lineno=171, col_offset=32), lineno=171, col_offset=23)], [Assign([Name('lineno', Store(), lineno=172, col_offset=18)], Name('None', Load(), lineno=172, col_offset=27), lineno=172, col_offset=18)], lineno=171, col_offset=12), Assign([Name('issue', Store(), lineno=173, col_offset=12)], Call(Attribute(Name('issue', Load(), lineno=173, col_offset=20), 'decode', Load(), lineno=173, col_offset=20), [Str('utf-8', lineno=173, col_offset=33)], [], None, None, lineno=173, col_offset=20), lineno=173, col_offset=12), Assign([Name('text', Store(), lineno=174, col_offset=12)], Call(Attribute(Name('text', Load(), lineno=174, col_offset=19), 'decode', Load(), lineno=174, col_offset=19), [Str('utf-8', lineno=174, col_offset=31)], [], None, None, lineno=174, col_offset=19), lineno=174, col_offset=12), Assign([Name('rule', Store(), lineno=175, col_offset=12)], Call(Name('Rule', Load(), lineno=175, col_offset=19), [Name('docname', Load(), lineno=175, col_offset=24), Name('lineno', Load(), lineno=175, col_offset=33), Name('issue', Load(), lineno=175, col_offset=41), Name('text', Load(), lineno=175, col_offset=48)], [], None, None, lineno=175, col_offset=19), lineno=175, col_offset=12), Expr(Call(Attribute(Name('rules', Load(), lineno=176, col_offset=12), 'append', Load(), lineno=176, col_offset=12), [Name('rule', Load(), lineno=176, col_offset=25)], [], None, None, lineno=176, col_offset=12), lineno=176, col_offset=12)], [], lineno=165, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=177, col_offset=8), 'close', Load(), lineno=177, col_offset=8), [], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=8), 'info', Load(), lineno=178, col_offset=8), [BinOp(Str('done, %d rules loaded', lineno=178, col_offset=18), Mod(), Call(Name('len', Load(), lineno=178, col_offset=44), [Attribute(Name('self', Load(), lineno=178, col_offset=48), 'rules', Load(), lineno=178, col_offset=48)], [], None, None, lineno=178, col_offset=44), lineno=178, col_offset=18)], [], None, None, lineno=178, col_offset=8), lineno=178, col_offset=8)], [], lineno=155, col_offset=4)], [], lineno=77, col_offset=0), FunctionDef('get_lineno', arguments([Name('node', Param(), lineno=181, col_offset=15)], None, None, []), [Expr(Str('Obtain line number information for a node.', lineno=182, col_offset=4), lineno=182, col_offset=4), Assign([Name('lineno', Store(), lineno=183, col_offset=4)], Name('None', Load(), lineno=183, col_offset=13), lineno=183, col_offset=4), While(BoolOp(And(), [Compare(Name('lineno', Load(), lineno=184, col_offset=10), [Is()], [Name('None', Load(), lineno=184, col_offset=20)], lineno=184, col_offset=10), Name('node', Load(), lineno=184, col_offset=29)], lineno=184, col_offset=10), [Assign([Name('node', Store(), lineno=185, col_offset=8)], Attribute(Name('node', Load(), lineno=185, col_offset=15), 'parent', Load(), lineno=185, col_offset=15), lineno=185, col_offset=8), Assign([Name('lineno', Store(), lineno=186, col_offset=8)], Attribute(Name('node', Load(), lineno=186, col_offset=17), 'line', Load(), lineno=186, col_offset=17), lineno=186, col_offset=8)], [], lineno=184, col_offset=4), Return(Name('lineno', Load(), lineno=187, col_offset=11), lineno=187, col_offset=4)], [], lineno=181, col_offset=0), FunctionDef('extract_line', arguments([Name('text', Param(), lineno=190, col_offset=17), Name('index', Param(), lineno=190, col_offset=23)], None, None, []), [Expr(Str('text may be a multiline string; extract\n    only the line containing the given character index.\n\n    >>> extract_line("abc\ndefgh\ni", 6)\n    >>> \'defgh\'\n    >>> for i in (0, 2, 3, 4, 10):\n    ...   print extract_line("abc\ndefgh\ni", i)\n    abc\n    abc\n    abc\n    defgh\n    defgh\n    i\n    ', lineno=204, col_offset=-1), lineno=204, col_offset=-1), Assign([Name('p', Store(), lineno=205, col_offset=4)], BinOp(Call(Attribute(Name('text', Load(), lineno=205, col_offset=8), 'rfind', Load(), lineno=205, col_offset=8), [Str('\n', lineno=205, col_offset=19), Num(0, lineno=205, col_offset=25), Name('index', Load(), lineno=205, col_offset=28)], [], None, None, lineno=205, col_offset=8), Add(), Num(1, lineno=205, col_offset=37), lineno=205, col_offset=8), lineno=205, col_offset=4), Assign([Name('q', Store(), lineno=206, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=206, col_offset=8), 'find', Load(), lineno=206, col_offset=8), [Str('\n', lineno=206, col_offset=18), Name('index', Load(), lineno=206, col_offset=24)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=4), If(Compare(Name('q', Load(), lineno=207, col_offset=7), [Lt()], [Num(0, lineno=207, col_offset=11)], lineno=207, col_offset=7), [Assign([Name('q', Store(), lineno=208, col_offset=8)], Call(Name('len', Load(), lineno=208, col_offset=12), [Name('text', Load(), lineno=208, col_offset=16)], [], None, None, lineno=208, col_offset=12), lineno=208, col_offset=8)], [], lineno=207, col_offset=4), Return(Subscript(Name('text', Load(), lineno=209, col_offset=11), Slice(Name('p', Load(), lineno=209, col_offset=16), Name('q', Load(), lineno=209, col_offset=18), None), Load(), lineno=209, col_offset=11), lineno=209, col_offset=4)], [], lineno=190, col_offset=0), ClassDef('SuspiciousVisitor', [Attribute(Name('nodes', Load(), lineno=212, col_offset=24), 'GenericNodeVisitor', Load(), lineno=212, col_offset=24)], [Assign([Name('lastlineno', Store(), lineno=214, col_offset=4)], Num(0, lineno=214, col_offset=17), lineno=214, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=216, col_offset=17), Name('document', Param(), lineno=216, col_offset=23), Name('builder', Param(), lineno=216, col_offset=33)], None, None, []), [Expr(Call(Attribute(Attribute(Name('nodes', Load(), lineno=217, col_offset=8), 'GenericNodeVisitor', Load(), lineno=217, col_offset=8), '__init__', Load(), lineno=217, col_offset=8), [Name('self', Load(), lineno=217, col_offset=42), Name('document', Load(), lineno=217, col_offset=48)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=218, col_offset=8), 'builder', Store(), lineno=218, col_offset=8)], Name('builder', Load(), lineno=218, col_offset=23), lineno=218, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('default_visit', arguments([Name('self', Param(), lineno=220, col_offset=22), Name('node', Param(), lineno=220, col_offset=28)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=221, col_offset=11), [Name('node', Load(), lineno=221, col_offset=22), Tuple([Attribute(Name('nodes', Load(), lineno=221, col_offset=29), 'Text', Load(), lineno=221, col_offset=29), Attribute(Name('nodes', Load(), lineno=221, col_offset=41), 'image', Load(), lineno=221, col_offset=41)], Load(), lineno=221, col_offset=29)], [], None, None, lineno=221, col_offset=11), [Assign([Name('text', Store(), lineno=222, col_offset=12)], Call(Attribute(Name('node', Load(), lineno=222, col_offset=19), 'astext', Load(), lineno=222, col_offset=19), [], [], None, None, lineno=222, col_offset=19), lineno=222, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=224, col_offset=12), 'lastlineno', Store(), lineno=224, col_offset=12), Name('lineno', Store(), lineno=224, col_offset=30)], Call(Name('max', Load(), lineno=224, col_offset=39), [BoolOp(Or(), [Call(Name('get_lineno', Load(), lineno=224, col_offset=43), [Name('node', Load(), lineno=224, col_offset=54)], [], None, None, lineno=224, col_offset=43), Num(0, lineno=224, col_offset=63)], lineno=224, col_offset=43), Attribute(Name('self', Load(), lineno=224, col_offset=66), 'lastlineno', Load(), lineno=224, col_offset=66)], [], None, None, lineno=224, col_offset=39), lineno=224, col_offset=12), Assign([Name('seen', Store(), lineno=225, col_offset=12)], Call(Name('set', Load(), lineno=225, col_offset=19), [], [], None, None, lineno=225, col_offset=19), lineno=225, col_offset=12), For(Name('match', Store(), lineno=226, col_offset=16), Call(Name('detect_all', Load(), lineno=226, col_offset=25), [Name('text', Load(), lineno=226, col_offset=36)], [], None, None, lineno=226, col_offset=25), [Assign([Name('issue', Store(), lineno=227, col_offset=16)], Call(Attribute(Name('match', Load(), lineno=227, col_offset=24), 'group', Load(), lineno=227, col_offset=24), [], [], None, None, lineno=227, col_offset=24), lineno=227, col_offset=16), Assign([Name('line', Store(), lineno=228, col_offset=16)], Call(Name('extract_line', Load(), lineno=228, col_offset=23), [Name('text', Load(), lineno=228, col_offset=36), Call(Attribute(Name('match', Load(), lineno=228, col_offset=42), 'start', Load(), lineno=228, col_offset=42), [], [], None, None, lineno=228, col_offset=42)], [], None, None, lineno=228, col_offset=23), lineno=228, col_offset=16), If(Compare(Tuple([Name('issue', Load(), lineno=229, col_offset=20), Name('line', Load(), lineno=229, col_offset=27)], Load(), lineno=229, col_offset=20), [NotIn()], [Name('seen', Load(), lineno=229, col_offset=40)], lineno=229, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=230, col_offset=20), 'builder', Load(), lineno=230, col_offset=20), 'check_issue', Load(), lineno=230, col_offset=20), [Name('line', Load(), lineno=230, col_offset=45), Name('lineno', Load(), lineno=230, col_offset=51), Name('issue', Load(), lineno=230, col_offset=59)], [], None, None, lineno=230, col_offset=20), lineno=230, col_offset=20), Expr(Call(Attribute(Name('seen', Load(), lineno=231, col_offset=20), 'add', Load(), lineno=231, col_offset=20), [Tuple([Name('issue', Load(), lineno=231, col_offset=30), Name('line', Load(), lineno=231, col_offset=37)], Load(), lineno=231, col_offset=30)], [], None, None, lineno=231, col_offset=20), lineno=231, col_offset=20)], [], lineno=229, col_offset=16)], [], lineno=226, col_offset=12)], [], lineno=221, col_offset=8)], [], lineno=220, col_offset=4), Assign([Name('unknown_visit', Store(), lineno=233, col_offset=4)], Name('default_visit', Load(), lineno=233, col_offset=20), lineno=233, col_offset=4), FunctionDef('visit_document', arguments([Name('self', Param(), lineno=235, col_offset=23), Name('node', Param(), lineno=235, col_offset=29)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=236, col_offset=8), 'lastlineno', Store(), lineno=236, col_offset=8)], Num(0, lineno=236, col_offset=26), lineno=236, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('visit_comment', arguments([Name('self', Param(), lineno=238, col_offset=22), Name('node', Param(), lineno=238, col_offset=28)], None, None, []), [Raise(Attribute(Name('nodes', Load(), lineno=243, col_offset=14), 'SkipNode', Load(), lineno=243, col_offset=14), None, None, lineno=243, col_offset=8)], [], lineno=238, col_offset=4)], [], lineno=212, col_offset=0)])
