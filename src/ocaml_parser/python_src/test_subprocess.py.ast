Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=2, col_offset=0), Import([alias('subprocess', None)], lineno=3, col_offset=0), Import([alias('sys', None)], lineno=4, col_offset=0), Import([alias('signal', None)], lineno=5, col_offset=0), Import([alias('os', None)], lineno=6, col_offset=0), Import([alias('errno', None)], lineno=7, col_offset=0), Import([alias('tempfile', None)], lineno=8, col_offset=0), Import([alias('time', None)], lineno=9, col_offset=0), Import([alias('re', None)], lineno=10, col_offset=0), Import([alias('sysconfig', None)], lineno=11, col_offset=0), Assign([Name('mswindows', Store(), lineno=13, col_offset=0)], Compare(Attribute(Name('sys', Load(), lineno=13, col_offset=13), 'platform', Load(), lineno=13, col_offset=13), [Eq()], [Str('win32', lineno=13, col_offset=29)], lineno=13, col_offset=13), lineno=13, col_offset=0), If(Name('mswindows', Load(), lineno=19, col_offset=3), [Assign([Name('SETBINARY', Store(), lineno=20, col_offset=4)], Str('import msvcrt; msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY);', lineno=20, col_offset=17), lineno=20, col_offset=4)], [Assign([Name('SETBINARY', Store(), lineno=23, col_offset=4)], Str('', lineno=23, col_offset=16), lineno=23, col_offset=4)], lineno=19, col_offset=0), TryExcept([Assign([Name('mkstemp', Store(), lineno=27, col_offset=4)], Attribute(Name('tempfile', Load(), lineno=27, col_offset=14), 'mkstemp', Load(), lineno=27, col_offset=14), lineno=27, col_offset=4)], [ExceptHandler(Name('AttributeError', Load(), lineno=28, col_offset=7), None, [FunctionDef('mkstemp', arguments([], None, None, []), [Expr(Str('Replacement for mkstemp, calling mktemp.', lineno=31, col_offset=8), lineno=31, col_offset=8), Assign([Name('fname', Store(), lineno=32, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=32, col_offset=16), 'mktemp', Load(), lineno=32, col_offset=16), [], [], None, None, lineno=32, col_offset=16), lineno=32, col_offset=8), Return(Tuple([Call(Attribute(Name('os', Load(), lineno=33, col_offset=15), 'open', Load(), lineno=33, col_offset=15), [Name('fname', Load(), lineno=33, col_offset=23), BinOp(Attribute(Name('os', Load(), lineno=33, col_offset=30), 'O_RDWR', Load(), lineno=33, col_offset=30), BitOr(), Attribute(Name('os', Load(), lineno=33, col_offset=40), 'O_CREAT', Load(), lineno=33, col_offset=40), lineno=33, col_offset=30)], [], None, None, lineno=33, col_offset=15), Name('fname', Load(), lineno=33, col_offset=53)], Load(), lineno=33, col_offset=15), lineno=33, col_offset=8)], [], lineno=30, col_offset=4)], lineno=28, col_offset=0)], [], lineno=26, col_offset=0), ClassDef('BaseTestCase', [Attribute(Name('unittest', Load(), lineno=36, col_offset=19), 'TestCase', Load(), lineno=36, col_offset=19)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=37, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=40, col_offset=8), 'reap_children', Load(), lineno=40, col_offset=8), [], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=42, col_offset=17)], None, None, []), [For(Name('inst', Store(), lineno=43, col_offset=12), Attribute(Name('subprocess', Load(), lineno=43, col_offset=20), '_active', Load(), lineno=43, col_offset=20), [Expr(Call(Attribute(Name('inst', Load(), lineno=44, col_offset=12), 'wait', Load(), lineno=44, col_offset=12), [], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12)], [], lineno=43, col_offset=8), Expr(Call(Attribute(Name('subprocess', Load(), lineno=45, col_offset=8), '_cleanup', Load(), lineno=45, col_offset=8), [], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=46, col_offset=8), 'assertFalse', Load(), lineno=46, col_offset=8), [Attribute(Name('subprocess', Load(), lineno=46, col_offset=25), '_active', Load(), lineno=46, col_offset=25), Str('subprocess._active not empty', lineno=46, col_offset=45)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('assertStderrEqual', arguments([Name('self', Param(), lineno=48, col_offset=26), Name('stderr', Param(), lineno=48, col_offset=32), Name('expected', Param(), lineno=48, col_offset=40), Name('msg', Param(), lineno=48, col_offset=50)], None, None, [Name('None', Load(), lineno=48, col_offset=54)]), [Assign([Name('actual', Store(), lineno=52, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=52, col_offset=17), 'sub', Load(), lineno=52, col_offset=17), [Str('\\[\\d+ refs\\]\\r?\\n?$', lineno=52, col_offset=24), Str('', lineno=52, col_offset=48), Name('stderr', Load(), lineno=52, col_offset=52)], [], None, None, lineno=52, col_offset=17), lineno=52, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'assertEqual', Load(), lineno=53, col_offset=8), [Name('actual', Load(), lineno=53, col_offset=25), Name('expected', Load(), lineno=53, col_offset=33), Name('msg', Load(), lineno=53, col_offset=43)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8)], [], lineno=48, col_offset=4)], [], lineno=36, col_offset=0), ClassDef('ProcessTestCase', [Name('BaseTestCase', Load(), lineno=56, col_offset=22)], [FunctionDef('test_call_seq', arguments([Name('self', Param(), lineno=58, col_offset=22)], None, None, []), [Assign([Name('rc', Store(), lineno=60, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=60, col_offset=13), 'call', Load(), lineno=60, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=60, col_offset=30), 'executable', Load(), lineno=60, col_offset=30), Str('-c', lineno=60, col_offset=46), Str('import sys; sys.exit(47)', lineno=61, col_offset=30)], Load(), lineno=60, col_offset=29)], [], None, None, lineno=60, col_offset=13), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [Name('rc', Load(), lineno=62, col_offset=25), Num(47, lineno=62, col_offset=29)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('test_check_call_zero', arguments([Name('self', Param(), lineno=64, col_offset=29)], None, None, []), [Assign([Name('rc', Store(), lineno=66, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=66, col_offset=13), 'check_call', Load(), lineno=66, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=66, col_offset=36), 'executable', Load(), lineno=66, col_offset=36), Str('-c', lineno=66, col_offset=52), Str('import sys; sys.exit(0)', lineno=67, col_offset=36)], Load(), lineno=66, col_offset=35)], [], None, None, lineno=66, col_offset=13), lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertEqual', Load(), lineno=68, col_offset=8), [Name('rc', Load(), lineno=68, col_offset=25), Num(0, lineno=68, col_offset=29)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=64, col_offset=4), FunctionDef('test_check_call_nonzero', arguments([Name('self', Param(), lineno=70, col_offset=32)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=72, col_offset=13), 'assertRaises', Load(), lineno=72, col_offset=13), [Attribute(Name('subprocess', Load(), lineno=72, col_offset=31), 'CalledProcessError', Load(), lineno=72, col_offset=31)], [], None, None, lineno=72, col_offset=13), Name('c', Store(), lineno=72, col_offset=65), [Expr(Call(Attribute(Name('subprocess', Load(), lineno=73, col_offset=12), 'check_call', Load(), lineno=73, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=73, col_offset=35), 'executable', Load(), lineno=73, col_offset=35), Str('-c', lineno=73, col_offset=51), Str('import sys; sys.exit(47)', lineno=74, col_offset=35)], Load(), lineno=73, col_offset=34)], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=12)], lineno=72, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=8), 'assertEqual', Load(), lineno=75, col_offset=8), [Attribute(Attribute(Name('c', Load(), lineno=75, col_offset=25), 'exception', Load(), lineno=75, col_offset=25), 'returncode', Load(), lineno=75, col_offset=25), Num(47, lineno=75, col_offset=49)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('test_check_output', arguments([Name('self', Param(), lineno=77, col_offset=26)], None, None, []), [Assign([Name('output', Store(), lineno=79, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=79, col_offset=17), 'check_output', Load(), lineno=79, col_offset=17), [List([Attribute(Name('sys', Load(), lineno=80, col_offset=17), 'executable', Load(), lineno=80, col_offset=17), Str('-c', lineno=80, col_offset=33), Str("print 'BDFL'", lineno=80, col_offset=39)], Load(), lineno=80, col_offset=16)], [], None, None, lineno=79, col_offset=17), lineno=79, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'assertIn', Load(), lineno=81, col_offset=8), [Str('BDFL', lineno=81, col_offset=22), Name('output', Load(), lineno=81, col_offset=30)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('test_check_output_nonzero', arguments([Name('self', Param(), lineno=83, col_offset=34)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=85, col_offset=13), 'assertRaises', Load(), lineno=85, col_offset=13), [Attribute(Name('subprocess', Load(), lineno=85, col_offset=31), 'CalledProcessError', Load(), lineno=85, col_offset=31)], [], None, None, lineno=85, col_offset=13), Name('c', Store(), lineno=85, col_offset=65), [Expr(Call(Attribute(Name('subprocess', Load(), lineno=86, col_offset=12), 'check_output', Load(), lineno=86, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=87, col_offset=21), 'executable', Load(), lineno=87, col_offset=21), Str('-c', lineno=87, col_offset=37), Str('import sys; sys.exit(5)', lineno=87, col_offset=43)], Load(), lineno=87, col_offset=20)], [], None, None, lineno=86, col_offset=12), lineno=86, col_offset=12)], lineno=85, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=88, col_offset=8), 'assertEqual', Load(), lineno=88, col_offset=8), [Attribute(Attribute(Name('c', Load(), lineno=88, col_offset=25), 'exception', Load(), lineno=88, col_offset=25), 'returncode', Load(), lineno=88, col_offset=25), Num(5, lineno=88, col_offset=49)], [], None, None, lineno=88, col_offset=8), lineno=88, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('test_check_output_stderr', arguments([Name('self', Param(), lineno=90, col_offset=33)], None, None, []), [Assign([Name('output', Store(), lineno=92, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=92, col_offset=17), 'check_output', Load(), lineno=92, col_offset=17), [List([Attribute(Name('sys', Load(), lineno=93, col_offset=17), 'executable', Load(), lineno=93, col_offset=17), Str('-c', lineno=93, col_offset=33), Str("import sys; sys.stderr.write('BDFL')", lineno=93, col_offset=39)], Load(), lineno=93, col_offset=16)], [keyword('stderr', Attribute(Name('subprocess', Load(), lineno=94, col_offset=23), 'STDOUT', Load(), lineno=94, col_offset=23))], None, None, lineno=92, col_offset=17), lineno=92, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertIn', Load(), lineno=95, col_offset=8), [Str('BDFL', lineno=95, col_offset=22), Name('output', Load(), lineno=95, col_offset=30)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8)], [], lineno=90, col_offset=4), FunctionDef('test_check_output_stdout_arg', arguments([Name('self', Param(), lineno=97, col_offset=37)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=99, col_offset=13), 'assertRaises', Load(), lineno=99, col_offset=13), [Name('ValueError', Load(), lineno=99, col_offset=31)], [], None, None, lineno=99, col_offset=13), Name('c', Store(), lineno=99, col_offset=46), [Assign([Name('output', Store(), lineno=100, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=100, col_offset=21), 'check_output', Load(), lineno=100, col_offset=21), [List([Attribute(Name('sys', Load(), lineno=101, col_offset=21), 'executable', Load(), lineno=101, col_offset=21), Str('-c', lineno=101, col_offset=37), Str("print 'will not be run'", lineno=101, col_offset=43)], Load(), lineno=101, col_offset=20)], [keyword('stdout', Attribute(Name('sys', Load(), lineno=102, col_offset=27), 'stdout', Load(), lineno=102, col_offset=27))], None, None, lineno=100, col_offset=21), lineno=100, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=12), 'fail', Load(), lineno=103, col_offset=12), [Str('Expected ValueError when stdout arg supplied.', lineno=103, col_offset=22)], [], None, None, lineno=103, col_offset=12), lineno=103, col_offset=12)], lineno=99, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=104, col_offset=8), 'assertIn', Load(), lineno=104, col_offset=8), [Str('stdout', lineno=104, col_offset=22), Subscript(Attribute(Attribute(Name('c', Load(), lineno=104, col_offset=32), 'exception', Load(), lineno=104, col_offset=32), 'args', Load(), lineno=104, col_offset=32), Index(Num(0, lineno=104, col_offset=49)), Load(), lineno=104, col_offset=32)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('test_call_kwargs', arguments([Name('self', Param(), lineno=106, col_offset=25)], None, None, []), [Assign([Name('newenv', Store(), lineno=108, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=108, col_offset=17), 'environ', Load(), lineno=108, col_offset=17), 'copy', Load(), lineno=108, col_offset=17), [], [], None, None, lineno=108, col_offset=17), lineno=108, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=109, col_offset=8), Index(Str('FRUIT', lineno=109, col_offset=15)), Store(), lineno=109, col_offset=8)], Str('banana', lineno=109, col_offset=26), lineno=109, col_offset=8), Assign([Name('rc', Store(), lineno=110, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=110, col_offset=13), 'call', Load(), lineno=110, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=110, col_offset=30), 'executable', Load(), lineno=110, col_offset=30), Str('-c', lineno=110, col_offset=46), Str('import sys, os;sys.exit(os.getenv("FRUIT")=="banana")', lineno=111, col_offset=30)], Load(), lineno=110, col_offset=29)], [keyword('env', Name('newenv', Load(), lineno=113, col_offset=33))], None, None, lineno=110, col_offset=13), lineno=110, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=114, col_offset=8), 'assertEqual', Load(), lineno=114, col_offset=8), [Name('rc', Load(), lineno=114, col_offset=25), Num(1, lineno=114, col_offset=29)], [], None, None, lineno=114, col_offset=8), lineno=114, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('test_stdin_none', arguments([Name('self', Param(), lineno=116, col_offset=24)], None, None, []), [Assign([Name('p', Store(), lineno=118, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=118, col_offset=12), 'Popen', Load(), lineno=118, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=118, col_offset=30), 'executable', Load(), lineno=118, col_offset=30), Str('-c', lineno=118, col_offset=46), Str('print "banana"', lineno=118, col_offset=52)], Load(), lineno=118, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=119, col_offset=32), 'PIPE', Load(), lineno=119, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=119, col_offset=56), 'PIPE', Load(), lineno=119, col_offset=56))], None, None, lineno=118, col_offset=12), lineno=118, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=120, col_offset=8), 'addCleanup', Load(), lineno=120, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=120, col_offset=24), 'stdout', Load(), lineno=120, col_offset=24), 'close', Load(), lineno=120, col_offset=24)], [], None, None, lineno=120, col_offset=8), lineno=120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=8), 'addCleanup', Load(), lineno=121, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=121, col_offset=24), 'stderr', Load(), lineno=121, col_offset=24), 'close', Load(), lineno=121, col_offset=24)], [], None, None, lineno=121, col_offset=8), lineno=121, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=122, col_offset=8), 'wait', Load(), lineno=122, col_offset=8), [], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=123, col_offset=8), 'assertEqual', Load(), lineno=123, col_offset=8), [Attribute(Name('p', Load(), lineno=123, col_offset=25), 'stdin', Load(), lineno=123, col_offset=25), Name('None', Load(), lineno=123, col_offset=34)], [], None, None, lineno=123, col_offset=8), lineno=123, col_offset=8)], [], lineno=116, col_offset=4), FunctionDef('test_stdout_none', arguments([Name('self', Param(), lineno=125, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=127, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=127, col_offset=12), 'Popen', Load(), lineno=127, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=127, col_offset=30), 'executable', Load(), lineno=127, col_offset=30), Str('-c', lineno=127, col_offset=46), Str('print "    this bit of output is from a test of stdout in a different process ..."', lineno=128, col_offset=29)], Load(), lineno=127, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=131, col_offset=35), 'PIPE', Load(), lineno=131, col_offset=35)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=131, col_offset=59), 'PIPE', Load(), lineno=131, col_offset=59))], None, None, lineno=127, col_offset=12), lineno=127, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=132, col_offset=8), 'addCleanup', Load(), lineno=132, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=132, col_offset=24), 'stdin', Load(), lineno=132, col_offset=24), 'close', Load(), lineno=132, col_offset=24)], [], None, None, lineno=132, col_offset=8), lineno=132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'addCleanup', Load(), lineno=133, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=133, col_offset=24), 'stderr', Load(), lineno=133, col_offset=24), 'close', Load(), lineno=133, col_offset=24)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=134, col_offset=8), 'wait', Load(), lineno=134, col_offset=8), [], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=8), 'assertEqual', Load(), lineno=135, col_offset=8), [Attribute(Name('p', Load(), lineno=135, col_offset=25), 'stdout', Load(), lineno=135, col_offset=25), Name('None', Load(), lineno=135, col_offset=35)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('test_stderr_none', arguments([Name('self', Param(), lineno=137, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=139, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=139, col_offset=12), 'Popen', Load(), lineno=139, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=139, col_offset=30), 'executable', Load(), lineno=139, col_offset=30), Str('-c', lineno=139, col_offset=46), Str('print "banana"', lineno=139, col_offset=52)], Load(), lineno=139, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=140, col_offset=31), 'PIPE', Load(), lineno=140, col_offset=31)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=140, col_offset=55), 'PIPE', Load(), lineno=140, col_offset=55))], None, None, lineno=139, col_offset=12), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'addCleanup', Load(), lineno=141, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=141, col_offset=24), 'stdout', Load(), lineno=141, col_offset=24), 'close', Load(), lineno=141, col_offset=24)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=8), 'addCleanup', Load(), lineno=142, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=142, col_offset=24), 'stdin', Load(), lineno=142, col_offset=24), 'close', Load(), lineno=142, col_offset=24)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=143, col_offset=8), 'wait', Load(), lineno=143, col_offset=8), [], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=144, col_offset=8), 'assertEqual', Load(), lineno=144, col_offset=8), [Attribute(Name('p', Load(), lineno=144, col_offset=25), 'stderr', Load(), lineno=144, col_offset=25), Name('None', Load(), lineno=144, col_offset=35)], [], None, None, lineno=144, col_offset=8), lineno=144, col_offset=8)], [], lineno=137, col_offset=4), FunctionDef('test_executable_with_cwd', arguments([Name('self', Param(), lineno=146, col_offset=33)], None, None, []), [Assign([Name('python_dir', Store(), lineno=147, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=147, col_offset=21), 'path', Load(), lineno=147, col_offset=21), 'dirname', Load(), lineno=147, col_offset=21), [Call(Attribute(Attribute(Name('os', Load(), lineno=147, col_offset=37), 'path', Load(), lineno=147, col_offset=37), 'realpath', Load(), lineno=147, col_offset=37), [Attribute(Name('sys', Load(), lineno=147, col_offset=54), 'executable', Load(), lineno=147, col_offset=54)], [], None, None, lineno=147, col_offset=37)], [], None, None, lineno=147, col_offset=21), lineno=147, col_offset=8), Assign([Name('p', Store(), lineno=148, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=148, col_offset=12), 'Popen', Load(), lineno=148, col_offset=12), [List([Str('somethingyoudonthave', lineno=148, col_offset=30), Str('-c', lineno=148, col_offset=54), Str('import sys; sys.exit(47)', lineno=149, col_offset=30)], Load(), lineno=148, col_offset=29)], [keyword('executable', Attribute(Name('sys', Load(), lineno=150, col_offset=40), 'executable', Load(), lineno=150, col_offset=40)), keyword('cwd', Name('python_dir', Load(), lineno=150, col_offset=60))], None, None, lineno=148, col_offset=12), lineno=148, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=151, col_offset=8), 'wait', Load(), lineno=151, col_offset=8), [], [], None, None, lineno=151, col_offset=8), lineno=151, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=8), 'assertEqual', Load(), lineno=152, col_offset=8), [Attribute(Name('p', Load(), lineno=152, col_offset=25), 'returncode', Load(), lineno=152, col_offset=25), Num(47, lineno=152, col_offset=39)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8)], [], lineno=146, col_offset=4), FunctionDef('test_executable_without_cwd', arguments([Name('self', Param(), lineno=156, col_offset=36)], None, None, []), [Assign([Name('p', Store(), lineno=159, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=159, col_offset=12), 'Popen', Load(), lineno=159, col_offset=12), [List([Str('somethingyoudonthave', lineno=159, col_offset=30), Str('-c', lineno=159, col_offset=54), Str('import sys; sys.exit(47)', lineno=160, col_offset=30)], Load(), lineno=159, col_offset=29)], [keyword('executable', Attribute(Name('sys', Load(), lineno=161, col_offset=40), 'executable', Load(), lineno=161, col_offset=40))], None, None, lineno=159, col_offset=12), lineno=159, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=162, col_offset=8), 'wait', Load(), lineno=162, col_offset=8), [], [], None, None, lineno=162, col_offset=8), lineno=162, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), 'assertEqual', Load(), lineno=163, col_offset=8), [Attribute(Name('p', Load(), lineno=163, col_offset=25), 'returncode', Load(), lineno=163, col_offset=25), Num(47, lineno=163, col_offset=39)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=154, col_offset=5), 'skipIf', Load(), lineno=154, col_offset=5), [Call(Attribute(Name('sysconfig', Load(), lineno=154, col_offset=21), 'is_python_build', Load(), lineno=154, col_offset=21), [], [], None, None, lineno=154, col_offset=21), Str('need an installed Python. See #7774', lineno=155, col_offset=21)], [], None, None, lineno=154, col_offset=5)], lineno=154, col_offset=4), FunctionDef('test_stdin_pipe', arguments([Name('self', Param(), lineno=165, col_offset=24)], None, None, []), [Assign([Name('p', Store(), lineno=167, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=167, col_offset=12), 'Popen', Load(), lineno=167, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=167, col_offset=30), 'executable', Load(), lineno=167, col_offset=30), Str('-c', lineno=167, col_offset=46), Str('import sys; sys.exit(sys.stdin.read() == "pear")', lineno=168, col_offset=25)], Load(), lineno=167, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=169, col_offset=30), 'PIPE', Load(), lineno=169, col_offset=30))], None, None, lineno=167, col_offset=12), lineno=167, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=170, col_offset=8), 'stdin', Load(), lineno=170, col_offset=8), 'write', Load(), lineno=170, col_offset=8), [Str('pear', lineno=170, col_offset=22)], [], None, None, lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=171, col_offset=8), 'stdin', Load(), lineno=171, col_offset=8), 'close', Load(), lineno=171, col_offset=8), [], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=172, col_offset=8), 'wait', Load(), lineno=172, col_offset=8), [], [], None, None, lineno=172, col_offset=8), lineno=172, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=173, col_offset=8), 'assertEqual', Load(), lineno=173, col_offset=8), [Attribute(Name('p', Load(), lineno=173, col_offset=25), 'returncode', Load(), lineno=173, col_offset=25), Num(1, lineno=173, col_offset=39)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=8)], [], lineno=165, col_offset=4), FunctionDef('test_stdin_filedes', arguments([Name('self', Param(), lineno=175, col_offset=27)], None, None, []), [Assign([Name('tf', Store(), lineno=177, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=177, col_offset=13), 'TemporaryFile', Load(), lineno=177, col_offset=13), [], [], None, None, lineno=177, col_offset=13), lineno=177, col_offset=8), Assign([Name('d', Store(), lineno=178, col_offset=8)], Call(Attribute(Name('tf', Load(), lineno=178, col_offset=12), 'fileno', Load(), lineno=178, col_offset=12), [], [], None, None, lineno=178, col_offset=12), lineno=178, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=179, col_offset=8), 'write', Load(), lineno=179, col_offset=8), [Name('d', Load(), lineno=179, col_offset=17), Str('pear', lineno=179, col_offset=20)], [], None, None, lineno=179, col_offset=8), lineno=179, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=180, col_offset=8), 'lseek', Load(), lineno=180, col_offset=8), [Name('d', Load(), lineno=180, col_offset=17), Num(0, lineno=180, col_offset=20), Num(0, lineno=180, col_offset=23)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8), Assign([Name('p', Store(), lineno=181, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=181, col_offset=12), 'Popen', Load(), lineno=181, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=181, col_offset=30), 'executable', Load(), lineno=181, col_offset=30), Str('-c', lineno=181, col_offset=46), Str('import sys; sys.exit(sys.stdin.read() == "pear")', lineno=182, col_offset=25)], Load(), lineno=181, col_offset=29)], [keyword('stdin', Name('d', Load(), lineno=183, col_offset=31))], None, None, lineno=181, col_offset=12), lineno=181, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=184, col_offset=8), 'wait', Load(), lineno=184, col_offset=8), [], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=185, col_offset=8), 'assertEqual', Load(), lineno=185, col_offset=8), [Attribute(Name('p', Load(), lineno=185, col_offset=25), 'returncode', Load(), lineno=185, col_offset=25), Num(1, lineno=185, col_offset=39)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8)], [], lineno=175, col_offset=4), FunctionDef('test_stdin_fileobj', arguments([Name('self', Param(), lineno=187, col_offset=27)], None, None, []), [Assign([Name('tf', Store(), lineno=189, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=189, col_offset=13), 'TemporaryFile', Load(), lineno=189, col_offset=13), [], [], None, None, lineno=189, col_offset=13), lineno=189, col_offset=8), Expr(Call(Attribute(Name('tf', Load(), lineno=190, col_offset=8), 'write', Load(), lineno=190, col_offset=8), [Str('pear', lineno=190, col_offset=17)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('tf', Load(), lineno=191, col_offset=8), 'seek', Load(), lineno=191, col_offset=8), [Num(0, lineno=191, col_offset=16)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Assign([Name('p', Store(), lineno=192, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=192, col_offset=12), 'Popen', Load(), lineno=192, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=192, col_offset=30), 'executable', Load(), lineno=192, col_offset=30), Str('-c', lineno=192, col_offset=46), Str('import sys; sys.exit(sys.stdin.read() == "pear")', lineno=193, col_offset=25)], Load(), lineno=192, col_offset=29)], [keyword('stdin', Name('tf', Load(), lineno=194, col_offset=31))], None, None, lineno=192, col_offset=12), lineno=192, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=195, col_offset=8), 'wait', Load(), lineno=195, col_offset=8), [], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=196, col_offset=8), 'assertEqual', Load(), lineno=196, col_offset=8), [Attribute(Name('p', Load(), lineno=196, col_offset=25), 'returncode', Load(), lineno=196, col_offset=25), Num(1, lineno=196, col_offset=39)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8)], [], lineno=187, col_offset=4), FunctionDef('test_stdout_pipe', arguments([Name('self', Param(), lineno=198, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=200, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=200, col_offset=12), 'Popen', Load(), lineno=200, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=200, col_offset=30), 'executable', Load(), lineno=200, col_offset=30), Str('-c', lineno=200, col_offset=46), Str('import sys; sys.stdout.write("orange")', lineno=201, col_offset=26)], Load(), lineno=200, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=202, col_offset=32), 'PIPE', Load(), lineno=202, col_offset=32))], None, None, lineno=200, col_offset=12), lineno=200, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=8), 'addCleanup', Load(), lineno=203, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=203, col_offset=24), 'stdout', Load(), lineno=203, col_offset=24), 'close', Load(), lineno=203, col_offset=24)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=204, col_offset=8), 'assertEqual', Load(), lineno=204, col_offset=8), [Call(Attribute(Attribute(Name('p', Load(), lineno=204, col_offset=25), 'stdout', Load(), lineno=204, col_offset=25), 'read', Load(), lineno=204, col_offset=25), [], [], None, None, lineno=204, col_offset=25), Str('orange', lineno=204, col_offset=42)], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('test_stdout_filedes', arguments([Name('self', Param(), lineno=206, col_offset=28)], None, None, []), [Assign([Name('tf', Store(), lineno=208, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=208, col_offset=13), 'TemporaryFile', Load(), lineno=208, col_offset=13), [], [], None, None, lineno=208, col_offset=13), lineno=208, col_offset=8), Assign([Name('d', Store(), lineno=209, col_offset=8)], Call(Attribute(Name('tf', Load(), lineno=209, col_offset=12), 'fileno', Load(), lineno=209, col_offset=12), [], [], None, None, lineno=209, col_offset=12), lineno=209, col_offset=8), Assign([Name('p', Store(), lineno=210, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=210, col_offset=12), 'Popen', Load(), lineno=210, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=210, col_offset=30), 'executable', Load(), lineno=210, col_offset=30), Str('-c', lineno=210, col_offset=46), Str('import sys; sys.stdout.write("orange")', lineno=211, col_offset=26)], Load(), lineno=210, col_offset=29)], [keyword('stdout', Name('d', Load(), lineno=212, col_offset=32))], None, None, lineno=210, col_offset=12), lineno=210, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=213, col_offset=8), 'wait', Load(), lineno=213, col_offset=8), [], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=214, col_offset=8), 'lseek', Load(), lineno=214, col_offset=8), [Name('d', Load(), lineno=214, col_offset=17), Num(0, lineno=214, col_offset=20), Num(0, lineno=214, col_offset=23)], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=215, col_offset=8), 'assertEqual', Load(), lineno=215, col_offset=8), [Call(Attribute(Name('os', Load(), lineno=215, col_offset=25), 'read', Load(), lineno=215, col_offset=25), [Name('d', Load(), lineno=215, col_offset=33), Num(1024, lineno=215, col_offset=36)], [], None, None, lineno=215, col_offset=25), Str('orange', lineno=215, col_offset=43)], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8)], [], lineno=206, col_offset=4), FunctionDef('test_stdout_fileobj', arguments([Name('self', Param(), lineno=217, col_offset=28)], None, None, []), [Assign([Name('tf', Store(), lineno=219, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=219, col_offset=13), 'TemporaryFile', Load(), lineno=219, col_offset=13), [], [], None, None, lineno=219, col_offset=13), lineno=219, col_offset=8), Assign([Name('p', Store(), lineno=220, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=220, col_offset=12), 'Popen', Load(), lineno=220, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=220, col_offset=30), 'executable', Load(), lineno=220, col_offset=30), Str('-c', lineno=220, col_offset=46), Str('import sys; sys.stdout.write("orange")', lineno=221, col_offset=26)], Load(), lineno=220, col_offset=29)], [keyword('stdout', Name('tf', Load(), lineno=222, col_offset=32))], None, None, lineno=220, col_offset=12), lineno=220, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=223, col_offset=8), 'wait', Load(), lineno=223, col_offset=8), [], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Attribute(Name('tf', Load(), lineno=224, col_offset=8), 'seek', Load(), lineno=224, col_offset=8), [Num(0, lineno=224, col_offset=16)], [], None, None, lineno=224, col_offset=8), lineno=224, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=225, col_offset=8), 'assertEqual', Load(), lineno=225, col_offset=8), [Call(Attribute(Name('tf', Load(), lineno=225, col_offset=25), 'read', Load(), lineno=225, col_offset=25), [], [], None, None, lineno=225, col_offset=25), Str('orange', lineno=225, col_offset=36)], [], None, None, lineno=225, col_offset=8), lineno=225, col_offset=8)], [], lineno=217, col_offset=4), FunctionDef('test_stderr_pipe', arguments([Name('self', Param(), lineno=227, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=229, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=229, col_offset=12), 'Popen', Load(), lineno=229, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=229, col_offset=30), 'executable', Load(), lineno=229, col_offset=30), Str('-c', lineno=229, col_offset=46), Str('import sys; sys.stderr.write("strawberry")', lineno=230, col_offset=26)], Load(), lineno=229, col_offset=29)], [keyword('stderr', Attribute(Name('subprocess', Load(), lineno=231, col_offset=32), 'PIPE', Load(), lineno=231, col_offset=32))], None, None, lineno=229, col_offset=12), lineno=229, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=232, col_offset=8), 'addCleanup', Load(), lineno=232, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=232, col_offset=24), 'stderr', Load(), lineno=232, col_offset=24), 'close', Load(), lineno=232, col_offset=24)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=233, col_offset=8), 'assertStderrEqual', Load(), lineno=233, col_offset=8), [Call(Attribute(Attribute(Name('p', Load(), lineno=233, col_offset=31), 'stderr', Load(), lineno=233, col_offset=31), 'read', Load(), lineno=233, col_offset=31), [], [], None, None, lineno=233, col_offset=31), Str('strawberry', lineno=233, col_offset=48)], [], None, None, lineno=233, col_offset=8), lineno=233, col_offset=8)], [], lineno=227, col_offset=4), FunctionDef('test_stderr_filedes', arguments([Name('self', Param(), lineno=235, col_offset=28)], None, None, []), [Assign([Name('tf', Store(), lineno=237, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=237, col_offset=13), 'TemporaryFile', Load(), lineno=237, col_offset=13), [], [], None, None, lineno=237, col_offset=13), lineno=237, col_offset=8), Assign([Name('d', Store(), lineno=238, col_offset=8)], Call(Attribute(Name('tf', Load(), lineno=238, col_offset=12), 'fileno', Load(), lineno=238, col_offset=12), [], [], None, None, lineno=238, col_offset=12), lineno=238, col_offset=8), Assign([Name('p', Store(), lineno=239, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=239, col_offset=12), 'Popen', Load(), lineno=239, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=239, col_offset=30), 'executable', Load(), lineno=239, col_offset=30), Str('-c', lineno=239, col_offset=46), Str('import sys; sys.stderr.write("strawberry")', lineno=240, col_offset=26)], Load(), lineno=239, col_offset=29)], [keyword('stderr', Name('d', Load(), lineno=241, col_offset=32))], None, None, lineno=239, col_offset=12), lineno=239, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=242, col_offset=8), 'wait', Load(), lineno=242, col_offset=8), [], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=243, col_offset=8), 'lseek', Load(), lineno=243, col_offset=8), [Name('d', Load(), lineno=243, col_offset=17), Num(0, lineno=243, col_offset=20), Num(0, lineno=243, col_offset=23)], [], None, None, lineno=243, col_offset=8), lineno=243, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=244, col_offset=8), 'assertStderrEqual', Load(), lineno=244, col_offset=8), [Call(Attribute(Name('os', Load(), lineno=244, col_offset=31), 'read', Load(), lineno=244, col_offset=31), [Name('d', Load(), lineno=244, col_offset=39), Num(1024, lineno=244, col_offset=42)], [], None, None, lineno=244, col_offset=31), Str('strawberry', lineno=244, col_offset=49)], [], None, None, lineno=244, col_offset=8), lineno=244, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('test_stderr_fileobj', arguments([Name('self', Param(), lineno=246, col_offset=28)], None, None, []), [Assign([Name('tf', Store(), lineno=248, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=248, col_offset=13), 'TemporaryFile', Load(), lineno=248, col_offset=13), [], [], None, None, lineno=248, col_offset=13), lineno=248, col_offset=8), Assign([Name('p', Store(), lineno=249, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=249, col_offset=12), 'Popen', Load(), lineno=249, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=249, col_offset=30), 'executable', Load(), lineno=249, col_offset=30), Str('-c', lineno=249, col_offset=46), Str('import sys; sys.stderr.write("strawberry")', lineno=250, col_offset=26)], Load(), lineno=249, col_offset=29)], [keyword('stderr', Name('tf', Load(), lineno=251, col_offset=32))], None, None, lineno=249, col_offset=12), lineno=249, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=252, col_offset=8), 'wait', Load(), lineno=252, col_offset=8), [], [], None, None, lineno=252, col_offset=8), lineno=252, col_offset=8), Expr(Call(Attribute(Name('tf', Load(), lineno=253, col_offset=8), 'seek', Load(), lineno=253, col_offset=8), [Num(0, lineno=253, col_offset=16)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=8), 'assertStderrEqual', Load(), lineno=254, col_offset=8), [Call(Attribute(Name('tf', Load(), lineno=254, col_offset=31), 'read', Load(), lineno=254, col_offset=31), [], [], None, None, lineno=254, col_offset=31), Str('strawberry', lineno=254, col_offset=42)], [], None, None, lineno=254, col_offset=8), lineno=254, col_offset=8)], [], lineno=246, col_offset=4), FunctionDef('test_stdout_stderr_pipe', arguments([Name('self', Param(), lineno=256, col_offset=32)], None, None, []), [Assign([Name('p', Store(), lineno=258, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=258, col_offset=12), 'Popen', Load(), lineno=258, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=258, col_offset=30), 'executable', Load(), lineno=258, col_offset=30), Str('-c', lineno=258, col_offset=46), Str('import sys;sys.stdout.write("apple");sys.stdout.flush();sys.stderr.write("orange")', lineno=259, col_offset=26)], Load(), lineno=258, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=263, col_offset=32), 'PIPE', Load(), lineno=263, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=264, col_offset=32), 'STDOUT', Load(), lineno=264, col_offset=32))], None, None, lineno=258, col_offset=12), lineno=258, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=8), 'addCleanup', Load(), lineno=265, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=265, col_offset=24), 'stdout', Load(), lineno=265, col_offset=24), 'close', Load(), lineno=265, col_offset=24)], [], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=8), 'assertStderrEqual', Load(), lineno=266, col_offset=8), [Call(Attribute(Attribute(Name('p', Load(), lineno=266, col_offset=31), 'stdout', Load(), lineno=266, col_offset=31), 'read', Load(), lineno=266, col_offset=31), [], [], None, None, lineno=266, col_offset=31), Str('appleorange', lineno=266, col_offset=48)], [], None, None, lineno=266, col_offset=8), lineno=266, col_offset=8)], [], lineno=256, col_offset=4), FunctionDef('test_stdout_stderr_file', arguments([Name('self', Param(), lineno=268, col_offset=32)], None, None, []), [Assign([Name('tf', Store(), lineno=270, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=270, col_offset=13), 'TemporaryFile', Load(), lineno=270, col_offset=13), [], [], None, None, lineno=270, col_offset=13), lineno=270, col_offset=8), Assign([Name('p', Store(), lineno=271, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=271, col_offset=12), 'Popen', Load(), lineno=271, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=271, col_offset=30), 'executable', Load(), lineno=271, col_offset=30), Str('-c', lineno=271, col_offset=46), Str('import sys;sys.stdout.write("apple");sys.stdout.flush();sys.stderr.write("orange")', lineno=272, col_offset=26)], Load(), lineno=271, col_offset=29)], [keyword('stdout', Name('tf', Load(), lineno=276, col_offset=32)), keyword('stderr', Name('tf', Load(), lineno=277, col_offset=32))], None, None, lineno=271, col_offset=12), lineno=271, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=278, col_offset=8), 'wait', Load(), lineno=278, col_offset=8), [], [], None, None, lineno=278, col_offset=8), lineno=278, col_offset=8), Expr(Call(Attribute(Name('tf', Load(), lineno=279, col_offset=8), 'seek', Load(), lineno=279, col_offset=8), [Num(0, lineno=279, col_offset=16)], [], None, None, lineno=279, col_offset=8), lineno=279, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=280, col_offset=8), 'assertStderrEqual', Load(), lineno=280, col_offset=8), [Call(Attribute(Name('tf', Load(), lineno=280, col_offset=31), 'read', Load(), lineno=280, col_offset=31), [], [], None, None, lineno=280, col_offset=31), Str('appleorange', lineno=280, col_offset=42)], [], None, None, lineno=280, col_offset=8), lineno=280, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('test_stdout_filedes_of_stdout', arguments([Name('self', Param(), lineno=282, col_offset=38)], None, None, []), [Assign([Name('cmd', Store(), lineno=284, col_offset=8)], Str("import sys, os; sys.exit(os.write(sys.stdout.fileno(), '.\\n'))", lineno=284, col_offset=14), lineno=284, col_offset=8), Assign([Name('rc', Store(), lineno=285, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=285, col_offset=13), 'call', Load(), lineno=285, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=285, col_offset=30), 'executable', Load(), lineno=285, col_offset=30), Str('-c', lineno=285, col_offset=46), Name('cmd', Load(), lineno=285, col_offset=52)], Load(), lineno=285, col_offset=29)], [keyword('stdout', Num(1, lineno=285, col_offset=65))], None, None, lineno=285, col_offset=13), lineno=285, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=8), 'assertEqual', Load(), lineno=286, col_offset=8), [Name('rc', Load(), lineno=286, col_offset=25), Num(2, lineno=286, col_offset=29)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('test_cwd', arguments([Name('self', Param(), lineno=288, col_offset=17)], None, None, []), [Assign([Name('tmpdir', Store(), lineno=289, col_offset=8)], Call(Attribute(Name('tempfile', Load(), lineno=289, col_offset=17), 'gettempdir', Load(), lineno=289, col_offset=17), [], [], None, None, lineno=289, col_offset=17), lineno=289, col_offset=8), Assign([Name('cwd', Store(), lineno=292, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=292, col_offset=14), 'getcwd', Load(), lineno=292, col_offset=14), [], [], None, None, lineno=292, col_offset=14), lineno=292, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=293, col_offset=8), 'chdir', Load(), lineno=293, col_offset=8), [Name('tmpdir', Load(), lineno=293, col_offset=17)], [], None, None, lineno=293, col_offset=8), lineno=293, col_offset=8), Assign([Name('tmpdir', Store(), lineno=294, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=294, col_offset=17), 'getcwd', Load(), lineno=294, col_offset=17), [], [], None, None, lineno=294, col_offset=17), lineno=294, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=295, col_offset=8), 'chdir', Load(), lineno=295, col_offset=8), [Name('cwd', Load(), lineno=295, col_offset=17)], [], None, None, lineno=295, col_offset=8), lineno=295, col_offset=8), Assign([Name('p', Store(), lineno=296, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=296, col_offset=12), 'Popen', Load(), lineno=296, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=296, col_offset=30), 'executable', Load(), lineno=296, col_offset=30), Str('-c', lineno=296, col_offset=46), Str('import sys,os;sys.stdout.write(os.getcwd())', lineno=297, col_offset=26)], Load(), lineno=296, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=299, col_offset=32), 'PIPE', Load(), lineno=299, col_offset=32)), keyword('cwd', Name('tmpdir', Load(), lineno=300, col_offset=29))], None, None, lineno=296, col_offset=12), lineno=296, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=301, col_offset=8), 'addCleanup', Load(), lineno=301, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=301, col_offset=24), 'stdout', Load(), lineno=301, col_offset=24), 'close', Load(), lineno=301, col_offset=24)], [], None, None, lineno=301, col_offset=8), lineno=301, col_offset=8), Assign([Name('normcase', Store(), lineno=302, col_offset=8)], Attribute(Attribute(Name('os', Load(), lineno=302, col_offset=19), 'path', Load(), lineno=302, col_offset=19), 'normcase', Load(), lineno=302, col_offset=19), lineno=302, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=303, col_offset=8), 'assertEqual', Load(), lineno=303, col_offset=8), [Call(Name('normcase', Load(), lineno=303, col_offset=25), [Call(Attribute(Attribute(Name('p', Load(), lineno=303, col_offset=34), 'stdout', Load(), lineno=303, col_offset=34), 'read', Load(), lineno=303, col_offset=34), [], [], None, None, lineno=303, col_offset=34)], [], None, None, lineno=303, col_offset=25), Call(Name('normcase', Load(), lineno=303, col_offset=52), [Name('tmpdir', Load(), lineno=303, col_offset=61)], [], None, None, lineno=303, col_offset=52)], [], None, None, lineno=303, col_offset=8), lineno=303, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('test_env', arguments([Name('self', Param(), lineno=305, col_offset=17)], None, None, []), [Assign([Name('newenv', Store(), lineno=306, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=306, col_offset=17), 'environ', Load(), lineno=306, col_offset=17), 'copy', Load(), lineno=306, col_offset=17), [], [], None, None, lineno=306, col_offset=17), lineno=306, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=307, col_offset=8), Index(Str('FRUIT', lineno=307, col_offset=15)), Store(), lineno=307, col_offset=8)], Str('orange', lineno=307, col_offset=26), lineno=307, col_offset=8), Assign([Name('p', Store(), lineno=308, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=308, col_offset=12), 'Popen', Load(), lineno=308, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=308, col_offset=30), 'executable', Load(), lineno=308, col_offset=30), Str('-c', lineno=308, col_offset=46), Str('import sys,os;sys.stdout.write(os.getenv("FRUIT"))', lineno=309, col_offset=26)], Load(), lineno=308, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=311, col_offset=32), 'PIPE', Load(), lineno=311, col_offset=32)), keyword('env', Name('newenv', Load(), lineno=312, col_offset=29))], None, None, lineno=308, col_offset=12), lineno=308, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=8), 'addCleanup', Load(), lineno=313, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=313, col_offset=24), 'stdout', Load(), lineno=313, col_offset=24), 'close', Load(), lineno=313, col_offset=24)], [], None, None, lineno=313, col_offset=8), lineno=313, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=314, col_offset=8), 'assertEqual', Load(), lineno=314, col_offset=8), [Call(Attribute(Attribute(Name('p', Load(), lineno=314, col_offset=25), 'stdout', Load(), lineno=314, col_offset=25), 'read', Load(), lineno=314, col_offset=25), [], [], None, None, lineno=314, col_offset=25), Str('orange', lineno=314, col_offset=42)], [], None, None, lineno=314, col_offset=8), lineno=314, col_offset=8)], [], lineno=305, col_offset=4), FunctionDef('test_communicate_stdin', arguments([Name('self', Param(), lineno=316, col_offset=31)], None, None, []), [Assign([Name('p', Store(), lineno=317, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=317, col_offset=12), 'Popen', Load(), lineno=317, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=317, col_offset=30), 'executable', Load(), lineno=317, col_offset=30), Str('-c', lineno=317, col_offset=46), Str('import sys;sys.exit(sys.stdin.read() == "pear")', lineno=318, col_offset=30)], Load(), lineno=317, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=320, col_offset=35), 'PIPE', Load(), lineno=320, col_offset=35))], None, None, lineno=317, col_offset=12), lineno=317, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=321, col_offset=8), 'communicate', Load(), lineno=321, col_offset=8), [Str('pear', lineno=321, col_offset=22)], [], None, None, lineno=321, col_offset=8), lineno=321, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=322, col_offset=8), 'assertEqual', Load(), lineno=322, col_offset=8), [Attribute(Name('p', Load(), lineno=322, col_offset=25), 'returncode', Load(), lineno=322, col_offset=25), Num(1, lineno=322, col_offset=39)], [], None, None, lineno=322, col_offset=8), lineno=322, col_offset=8)], [], lineno=316, col_offset=4), FunctionDef('test_communicate_stdout', arguments([Name('self', Param(), lineno=324, col_offset=32)], None, None, []), [Assign([Name('p', Store(), lineno=325, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=325, col_offset=12), 'Popen', Load(), lineno=325, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=325, col_offset=30), 'executable', Load(), lineno=325, col_offset=30), Str('-c', lineno=325, col_offset=46), Str('import sys; sys.stdout.write("pineapple")', lineno=326, col_offset=30)], Load(), lineno=325, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=327, col_offset=36), 'PIPE', Load(), lineno=327, col_offset=36))], None, None, lineno=325, col_offset=12), lineno=325, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=328, col_offset=9), Name('stderr', Store(), lineno=328, col_offset=17)], Store(), lineno=328, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=328, col_offset=27), 'communicate', Load(), lineno=328, col_offset=27), [], [], None, None, lineno=328, col_offset=27), lineno=328, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=8), 'assertEqual', Load(), lineno=329, col_offset=8), [Name('stdout', Load(), lineno=329, col_offset=25), Str('pineapple', lineno=329, col_offset=33)], [], None, None, lineno=329, col_offset=8), lineno=329, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), 'assertEqual', Load(), lineno=330, col_offset=8), [Name('stderr', Load(), lineno=330, col_offset=25), Name('None', Load(), lineno=330, col_offset=33)], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8)], [], lineno=324, col_offset=4), FunctionDef('test_communicate_stderr', arguments([Name('self', Param(), lineno=332, col_offset=32)], None, None, []), [Assign([Name('p', Store(), lineno=333, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=333, col_offset=12), 'Popen', Load(), lineno=333, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=333, col_offset=30), 'executable', Load(), lineno=333, col_offset=30), Str('-c', lineno=333, col_offset=46), Str('import sys; sys.stderr.write("pineapple")', lineno=334, col_offset=30)], Load(), lineno=333, col_offset=29)], [keyword('stderr', Attribute(Name('subprocess', Load(), lineno=335, col_offset=36), 'PIPE', Load(), lineno=335, col_offset=36))], None, None, lineno=333, col_offset=12), lineno=333, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=336, col_offset=9), Name('stderr', Store(), lineno=336, col_offset=17)], Store(), lineno=336, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=336, col_offset=27), 'communicate', Load(), lineno=336, col_offset=27), [], [], None, None, lineno=336, col_offset=27), lineno=336, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=337, col_offset=8), 'assertEqual', Load(), lineno=337, col_offset=8), [Name('stdout', Load(), lineno=337, col_offset=25), Name('None', Load(), lineno=337, col_offset=33)], [], None, None, lineno=337, col_offset=8), lineno=337, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'assertStderrEqual', Load(), lineno=338, col_offset=8), [Name('stderr', Load(), lineno=338, col_offset=31), Str('pineapple', lineno=338, col_offset=39)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8)], [], lineno=332, col_offset=4), FunctionDef('test_communicate', arguments([Name('self', Param(), lineno=340, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=341, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=341, col_offset=12), 'Popen', Load(), lineno=341, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=341, col_offset=30), 'executable', Load(), lineno=341, col_offset=30), Str('-c', lineno=341, col_offset=46), Str('import sys,os;sys.stderr.write("pineapple");sys.stdout.write(sys.stdin.read())', lineno=342, col_offset=26)], Load(), lineno=341, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=345, col_offset=31), 'PIPE', Load(), lineno=345, col_offset=31)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=346, col_offset=32), 'PIPE', Load(), lineno=346, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=347, col_offset=32), 'PIPE', Load(), lineno=347, col_offset=32))], None, None, lineno=341, col_offset=12), lineno=341, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=348, col_offset=8), 'addCleanup', Load(), lineno=348, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=348, col_offset=24), 'stdout', Load(), lineno=348, col_offset=24), 'close', Load(), lineno=348, col_offset=24)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=349, col_offset=8), 'addCleanup', Load(), lineno=349, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=349, col_offset=24), 'stderr', Load(), lineno=349, col_offset=24), 'close', Load(), lineno=349, col_offset=24)], [], None, None, lineno=349, col_offset=8), lineno=349, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=350, col_offset=8), 'addCleanup', Load(), lineno=350, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=350, col_offset=24), 'stdin', Load(), lineno=350, col_offset=24), 'close', Load(), lineno=350, col_offset=24)], [], None, None, lineno=350, col_offset=8), lineno=350, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=351, col_offset=9), Name('stderr', Store(), lineno=351, col_offset=17)], Store(), lineno=351, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=351, col_offset=27), 'communicate', Load(), lineno=351, col_offset=27), [Str('banana', lineno=351, col_offset=41)], [], None, None, lineno=351, col_offset=27), lineno=351, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=352, col_offset=8), 'assertEqual', Load(), lineno=352, col_offset=8), [Name('stdout', Load(), lineno=352, col_offset=25), Str('banana', lineno=352, col_offset=33)], [], None, None, lineno=352, col_offset=8), lineno=352, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=353, col_offset=8), 'assertStderrEqual', Load(), lineno=353, col_offset=8), [Name('stderr', Load(), lineno=353, col_offset=31), Str('pineapple', lineno=353, col_offset=39)], [], None, None, lineno=353, col_offset=8), lineno=353, col_offset=8)], [], lineno=340, col_offset=4), FunctionDef('test_communicate_pipe_fd_leak', arguments([Name('self', Param(), lineno=360, col_offset=38)], None, None, []), [Assign([Name('fd_directory', Store(), lineno=361, col_offset=8)], BinOp(Str('/proc/%d/fd', lineno=361, col_offset=23), Mod(), Call(Attribute(Name('os', Load(), lineno=361, col_offset=39), 'getpid', Load(), lineno=361, col_offset=39), [], [], None, None, lineno=361, col_offset=39), lineno=361, col_offset=23), lineno=361, col_offset=8), Assign([Name('num_fds_before_popen', Store(), lineno=362, col_offset=8)], Call(Name('len', Load(), lineno=362, col_offset=31), [Call(Attribute(Name('os', Load(), lineno=362, col_offset=35), 'listdir', Load(), lineno=362, col_offset=35), [Name('fd_directory', Load(), lineno=362, col_offset=46)], [], None, None, lineno=362, col_offset=35)], [], None, None, lineno=362, col_offset=31), lineno=362, col_offset=8), Assign([Name('p', Store(), lineno=363, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=363, col_offset=12), 'Popen', Load(), lineno=363, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=363, col_offset=30), 'executable', Load(), lineno=363, col_offset=30), Str('-c', lineno=363, col_offset=46), Str('print()', lineno=363, col_offset=52)], Load(), lineno=363, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=364, col_offset=36), 'PIPE', Load(), lineno=364, col_offset=36))], None, None, lineno=363, col_offset=12), lineno=363, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=365, col_offset=8), 'communicate', Load(), lineno=365, col_offset=8), [], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=8), Assign([Name('num_fds_after_communicate', Store(), lineno=366, col_offset=8)], Call(Name('len', Load(), lineno=366, col_offset=36), [Call(Attribute(Name('os', Load(), lineno=366, col_offset=40), 'listdir', Load(), lineno=366, col_offset=40), [Name('fd_directory', Load(), lineno=366, col_offset=51)], [], None, None, lineno=366, col_offset=40)], [], None, None, lineno=366, col_offset=36), lineno=366, col_offset=8), Delete([Name('p', Del(), lineno=367, col_offset=12)], lineno=367, col_offset=8), Assign([Name('num_fds_after_destruction', Store(), lineno=368, col_offset=8)], Call(Name('len', Load(), lineno=368, col_offset=36), [Call(Attribute(Name('os', Load(), lineno=368, col_offset=40), 'listdir', Load(), lineno=368, col_offset=40), [Name('fd_directory', Load(), lineno=368, col_offset=51)], [], None, None, lineno=368, col_offset=40)], [], None, None, lineno=368, col_offset=36), lineno=368, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=369, col_offset=8), 'assertEqual', Load(), lineno=369, col_offset=8), [Name('num_fds_before_popen', Load(), lineno=369, col_offset=25), Name('num_fds_after_destruction', Load(), lineno=369, col_offset=47)], [], None, None, lineno=369, col_offset=8), lineno=369, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=370, col_offset=8), 'assertEqual', Load(), lineno=370, col_offset=8), [Name('num_fds_before_popen', Load(), lineno=370, col_offset=25), Name('num_fds_after_communicate', Load(), lineno=370, col_offset=47)], [], None, None, lineno=370, col_offset=8), lineno=370, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=357, col_offset=5), 'skipUnless', Load(), lineno=357, col_offset=5), [Call(Attribute(Attribute(Name('os', Load(), lineno=357, col_offset=25), 'path', Load(), lineno=357, col_offset=25), 'isdir', Load(), lineno=357, col_offset=25), [BinOp(Str('/proc/%d/fd', lineno=357, col_offset=39), Mod(), Call(Attribute(Name('os', Load(), lineno=357, col_offset=55), 'getpid', Load(), lineno=357, col_offset=55), [], [], None, None, lineno=357, col_offset=55), lineno=357, col_offset=39)], [], None, None, lineno=357, col_offset=25), Str('Linux specific', lineno=358, col_offset=25)], [], None, None, lineno=357, col_offset=5)], lineno=357, col_offset=4), FunctionDef('test_communicate_returns', arguments([Name('self', Param(), lineno=372, col_offset=33)], None, None, []), [Assign([Name('p', Store(), lineno=374, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=374, col_offset=12), 'Popen', Load(), lineno=374, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=374, col_offset=30), 'executable', Load(), lineno=374, col_offset=30), Str('-c', lineno=374, col_offset=46), Str('import sys; sys.exit(47)', lineno=375, col_offset=30)], Load(), lineno=374, col_offset=29)], [], None, None, lineno=374, col_offset=12), lineno=374, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=376, col_offset=9), Name('stderr', Store(), lineno=376, col_offset=17)], Store(), lineno=376, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=376, col_offset=27), 'communicate', Load(), lineno=376, col_offset=27), [], [], None, None, lineno=376, col_offset=27), lineno=376, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=377, col_offset=8), 'assertEqual', Load(), lineno=377, col_offset=8), [Name('stdout', Load(), lineno=377, col_offset=25), Name('None', Load(), lineno=377, col_offset=33)], [], None, None, lineno=377, col_offset=8), lineno=377, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=378, col_offset=8), 'assertEqual', Load(), lineno=378, col_offset=8), [Name('stderr', Load(), lineno=378, col_offset=25), Name('None', Load(), lineno=378, col_offset=33)], [], None, None, lineno=378, col_offset=8), lineno=378, col_offset=8)], [], lineno=372, col_offset=4), FunctionDef('test_communicate_pipe_buf', arguments([Name('self', Param(), lineno=380, col_offset=34)], None, None, []), [Assign([Tuple([Name('x', Store(), lineno=384, col_offset=8), Name('y', Store(), lineno=384, col_offset=11)], Store(), lineno=384, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=384, col_offset=15), 'pipe', Load(), lineno=384, col_offset=15), [], [], None, None, lineno=384, col_offset=15), lineno=384, col_offset=8), If(Name('mswindows', Load(), lineno=385, col_offset=11), [Assign([Name('pipe_buf', Store(), lineno=386, col_offset=12)], Num(512, lineno=386, col_offset=23), lineno=386, col_offset=12)], [Assign([Name('pipe_buf', Store(), lineno=388, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=388, col_offset=23), 'fpathconf', Load(), lineno=388, col_offset=23), [Name('x', Load(), lineno=388, col_offset=36), Str('PC_PIPE_BUF', lineno=388, col_offset=39)], [], None, None, lineno=388, col_offset=23), lineno=388, col_offset=12)], lineno=385, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=389, col_offset=8), 'close', Load(), lineno=389, col_offset=8), [Name('x', Load(), lineno=389, col_offset=17)], [], None, None, lineno=389, col_offset=8), lineno=389, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=390, col_offset=8), 'close', Load(), lineno=390, col_offset=8), [Name('y', Load(), lineno=390, col_offset=17)], [], None, None, lineno=390, col_offset=8), lineno=390, col_offset=8), Assign([Name('p', Store(), lineno=391, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=391, col_offset=12), 'Popen', Load(), lineno=391, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=391, col_offset=30), 'executable', Load(), lineno=391, col_offset=30), Str('-c', lineno=391, col_offset=46), BinOp(Str('import sys,os;sys.stdout.write(sys.stdin.read(47));sys.stderr.write("xyz"*%d);sys.stdout.write(sys.stdin.read())', lineno=392, col_offset=26), Mod(), Name('pipe_buf', Load(), lineno=395, col_offset=65), lineno=392, col_offset=26)], Load(), lineno=391, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=396, col_offset=31), 'PIPE', Load(), lineno=396, col_offset=31)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=397, col_offset=32), 'PIPE', Load(), lineno=397, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=398, col_offset=32), 'PIPE', Load(), lineno=398, col_offset=32))], None, None, lineno=391, col_offset=12), lineno=391, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=399, col_offset=8), 'addCleanup', Load(), lineno=399, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=399, col_offset=24), 'stdout', Load(), lineno=399, col_offset=24), 'close', Load(), lineno=399, col_offset=24)], [], None, None, lineno=399, col_offset=8), lineno=399, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=400, col_offset=8), 'addCleanup', Load(), lineno=400, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=400, col_offset=24), 'stderr', Load(), lineno=400, col_offset=24), 'close', Load(), lineno=400, col_offset=24)], [], None, None, lineno=400, col_offset=8), lineno=400, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=401, col_offset=8), 'addCleanup', Load(), lineno=401, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=401, col_offset=24), 'stdin', Load(), lineno=401, col_offset=24), 'close', Load(), lineno=401, col_offset=24)], [], None, None, lineno=401, col_offset=8), lineno=401, col_offset=8), Assign([Name('string_to_write', Store(), lineno=402, col_offset=8)], BinOp(Str('abc', lineno=402, col_offset=26), Mult(), Name('pipe_buf', Load(), lineno=402, col_offset=32), lineno=402, col_offset=26), lineno=402, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=403, col_offset=9), Name('stderr', Store(), lineno=403, col_offset=17)], Store(), lineno=403, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=403, col_offset=27), 'communicate', Load(), lineno=403, col_offset=27), [Name('string_to_write', Load(), lineno=403, col_offset=41)], [], None, None, lineno=403, col_offset=27), lineno=403, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=404, col_offset=8), 'assertEqual', Load(), lineno=404, col_offset=8), [Name('stdout', Load(), lineno=404, col_offset=25), Name('string_to_write', Load(), lineno=404, col_offset=33)], [], None, None, lineno=404, col_offset=8), lineno=404, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('test_writes_before_communicate', arguments([Name('self', Param(), lineno=406, col_offset=39)], None, None, []), [Assign([Name('p', Store(), lineno=408, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=408, col_offset=12), 'Popen', Load(), lineno=408, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=408, col_offset=30), 'executable', Load(), lineno=408, col_offset=30), Str('-c', lineno=408, col_offset=46), Str('import sys,os;sys.stdout.write(sys.stdin.read())', lineno=409, col_offset=26)], Load(), lineno=408, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=411, col_offset=31), 'PIPE', Load(), lineno=411, col_offset=31)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=412, col_offset=32), 'PIPE', Load(), lineno=412, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=413, col_offset=32), 'PIPE', Load(), lineno=413, col_offset=32))], None, None, lineno=408, col_offset=12), lineno=408, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=414, col_offset=8), 'addCleanup', Load(), lineno=414, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=414, col_offset=24), 'stdout', Load(), lineno=414, col_offset=24), 'close', Load(), lineno=414, col_offset=24)], [], None, None, lineno=414, col_offset=8), lineno=414, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=415, col_offset=8), 'addCleanup', Load(), lineno=415, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=415, col_offset=24), 'stderr', Load(), lineno=415, col_offset=24), 'close', Load(), lineno=415, col_offset=24)], [], None, None, lineno=415, col_offset=8), lineno=415, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=416, col_offset=8), 'addCleanup', Load(), lineno=416, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=416, col_offset=24), 'stdin', Load(), lineno=416, col_offset=24), 'close', Load(), lineno=416, col_offset=24)], [], None, None, lineno=416, col_offset=8), lineno=416, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=417, col_offset=8), 'stdin', Load(), lineno=417, col_offset=8), 'write', Load(), lineno=417, col_offset=8), [Str('banana', lineno=417, col_offset=22)], [], None, None, lineno=417, col_offset=8), lineno=417, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=418, col_offset=9), Name('stderr', Store(), lineno=418, col_offset=17)], Store(), lineno=418, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=418, col_offset=27), 'communicate', Load(), lineno=418, col_offset=27), [Str('split', lineno=418, col_offset=41)], [], None, None, lineno=418, col_offset=27), lineno=418, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=419, col_offset=8), 'assertEqual', Load(), lineno=419, col_offset=8), [Name('stdout', Load(), lineno=419, col_offset=25), Str('bananasplit', lineno=419, col_offset=33)], [], None, None, lineno=419, col_offset=8), lineno=419, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=420, col_offset=8), 'assertStderrEqual', Load(), lineno=420, col_offset=8), [Name('stderr', Load(), lineno=420, col_offset=31), Str('', lineno=420, col_offset=39)], [], None, None, lineno=420, col_offset=8), lineno=420, col_offset=8)], [], lineno=406, col_offset=4), FunctionDef('test_universal_newlines', arguments([Name('self', Param(), lineno=422, col_offset=32)], None, None, []), [Assign([Name('p', Store(), lineno=423, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=423, col_offset=12), 'Popen', Load(), lineno=423, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=423, col_offset=30), 'executable', Load(), lineno=423, col_offset=30), Str('-c', lineno=423, col_offset=46), BinOp(BinOp(Str('import sys,os;', lineno=424, col_offset=26), Add(), Name('SETBINARY', Load(), lineno=424, col_offset=45), lineno=424, col_offset=26), Add(), Str('sys.stdout.write("line1\\n");sys.stdout.flush();sys.stdout.write("line2\\r");sys.stdout.flush();sys.stdout.write("line3\\r\\n");sys.stdout.flush();sys.stdout.write("line4\\r");sys.stdout.flush();sys.stdout.write("\\nline5");sys.stdout.flush();sys.stdout.write("\\nline6");', lineno=425, col_offset=26), lineno=424, col_offset=55)], Load(), lineno=423, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=436, col_offset=32), 'PIPE', Load(), lineno=436, col_offset=32)), keyword('universal_newlines', Num(1, lineno=437, col_offset=44))], None, None, lineno=423, col_offset=12), lineno=423, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=438, col_offset=8), 'addCleanup', Load(), lineno=438, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=438, col_offset=24), 'stdout', Load(), lineno=438, col_offset=24), 'close', Load(), lineno=438, col_offset=24)], [], None, None, lineno=438, col_offset=8), lineno=438, col_offset=8), Assign([Name('stdout', Store(), lineno=439, col_offset=8)], Call(Attribute(Attribute(Name('p', Load(), lineno=439, col_offset=17), 'stdout', Load(), lineno=439, col_offset=17), 'read', Load(), lineno=439, col_offset=17), [], [], None, None, lineno=439, col_offset=17), lineno=439, col_offset=8), If(Call(Name('hasattr', Load(), lineno=440, col_offset=11), [Name('file', Load(), lineno=440, col_offset=19), Str('newlines', lineno=440, col_offset=25)], [], None, None, lineno=440, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=442, col_offset=12), 'assertEqual', Load(), lineno=442, col_offset=12), [Name('stdout', Load(), lineno=442, col_offset=29), Str('line1\nline2\nline3\nline4\nline5\nline6', lineno=443, col_offset=29)], [], None, None, lineno=442, col_offset=12), lineno=442, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=446, col_offset=12), 'assertEqual', Load(), lineno=446, col_offset=12), [Name('stdout', Load(), lineno=446, col_offset=29), Str('line1\nline2\rline3\r\nline4\r\nline5\nline6', lineno=447, col_offset=29)], [], None, None, lineno=446, col_offset=12), lineno=446, col_offset=12)], lineno=440, col_offset=8)], [], lineno=422, col_offset=4), FunctionDef('test_universal_newlines_communicate', arguments([Name('self', Param(), lineno=449, col_offset=44)], None, None, []), [Assign([Name('p', Store(), lineno=451, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=451, col_offset=12), 'Popen', Load(), lineno=451, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=451, col_offset=30), 'executable', Load(), lineno=451, col_offset=30), Str('-c', lineno=451, col_offset=46), BinOp(BinOp(Str('import sys,os;', lineno=452, col_offset=26), Add(), Name('SETBINARY', Load(), lineno=452, col_offset=45), lineno=452, col_offset=26), Add(), Str('sys.stdout.write("line1\\n");sys.stdout.flush();sys.stdout.write("line2\\r");sys.stdout.flush();sys.stdout.write("line3\\r\\n");sys.stdout.flush();sys.stdout.write("line4\\r");sys.stdout.flush();sys.stdout.write("\\nline5");sys.stdout.flush();sys.stdout.write("\\nline6");', lineno=453, col_offset=26), lineno=452, col_offset=55)], Load(), lineno=451, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=464, col_offset=32), 'PIPE', Load(), lineno=464, col_offset=32)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=464, col_offset=56), 'PIPE', Load(), lineno=464, col_offset=56)), keyword('universal_newlines', Num(1, lineno=465, col_offset=44))], None, None, lineno=451, col_offset=12), lineno=451, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=466, col_offset=8), 'addCleanup', Load(), lineno=466, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=466, col_offset=24), 'stdout', Load(), lineno=466, col_offset=24), 'close', Load(), lineno=466, col_offset=24)], [], None, None, lineno=466, col_offset=8), lineno=466, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=467, col_offset=8), 'addCleanup', Load(), lineno=467, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=467, col_offset=24), 'stderr', Load(), lineno=467, col_offset=24), 'close', Load(), lineno=467, col_offset=24)], [], None, None, lineno=467, col_offset=8), lineno=467, col_offset=8), Assign([Tuple([Name('stdout', Store(), lineno=468, col_offset=9), Name('stderr', Store(), lineno=468, col_offset=17)], Store(), lineno=468, col_offset=9)], Call(Attribute(Name('p', Load(), lineno=468, col_offset=27), 'communicate', Load(), lineno=468, col_offset=27), [], [], None, None, lineno=468, col_offset=27), lineno=468, col_offset=8), If(Call(Name('hasattr', Load(), lineno=469, col_offset=11), [Name('file', Load(), lineno=469, col_offset=19), Str('newlines', lineno=469, col_offset=25)], [], None, None, lineno=469, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=471, col_offset=12), 'assertEqual', Load(), lineno=471, col_offset=12), [Name('stdout', Load(), lineno=471, col_offset=29), Str('line1\nline2\nline3\nline4\nline5\nline6', lineno=472, col_offset=29)], [], None, None, lineno=471, col_offset=12), lineno=471, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=475, col_offset=12), 'assertEqual', Load(), lineno=475, col_offset=12), [Name('stdout', Load(), lineno=475, col_offset=29), Str('line1\nline2\rline3\r\nline4\r\nline5\nline6', lineno=476, col_offset=29)], [], None, None, lineno=475, col_offset=12), lineno=475, col_offset=12)], lineno=469, col_offset=8)], [], lineno=449, col_offset=4), FunctionDef('test_no_leaking', arguments([Name('self', Param(), lineno=478, col_offset=24)], None, None, []), [If(UnaryOp(Not(), Name('mswindows', Load(), lineno=480, col_offset=15), lineno=480, col_offset=11), [Assign([Name('max_handles', Store(), lineno=481, col_offset=12)], Num(1026, lineno=481, col_offset=26), lineno=481, col_offset=12)], [Assign([Name('max_handles', Store(), lineno=483, col_offset=12)], Num(2050, lineno=483, col_offset=26), lineno=483, col_offset=12)], lineno=480, col_offset=8), Assign([Name('handles', Store(), lineno=484, col_offset=8)], List([], Load(), lineno=484, col_offset=18), lineno=484, col_offset=8), TryFinally([For(Name('i', Store(), lineno=486, col_offset=16), Call(Name('range', Load(), lineno=486, col_offset=21), [Name('max_handles', Load(), lineno=486, col_offset=27)], [], None, None, lineno=486, col_offset=21), [TryExcept([Expr(Call(Attribute(Name('handles', Load(), lineno=488, col_offset=20), 'append', Load(), lineno=488, col_offset=20), [Call(Attribute(Name('os', Load(), lineno=488, col_offset=35), 'open', Load(), lineno=488, col_offset=35), [Attribute(Name('test_support', Load(), lineno=488, col_offset=43), 'TESTFN', Load(), lineno=488, col_offset=43), BinOp(Attribute(Name('os', Load(), lineno=489, col_offset=43), 'O_WRONLY', Load(), lineno=489, col_offset=43), BitOr(), Attribute(Name('os', Load(), lineno=489, col_offset=57), 'O_CREAT', Load(), lineno=489, col_offset=57), lineno=489, col_offset=43)], [], None, None, lineno=488, col_offset=35)], [], None, None, lineno=488, col_offset=20), lineno=488, col_offset=20)], [ExceptHandler(Name('OSError', Load(), lineno=490, col_offset=23), Name('e', Store(), lineno=490, col_offset=34), [If(Compare(Attribute(Name('e', Load(), lineno=491, col_offset=23), 'errno', Load(), lineno=491, col_offset=23), [NotEq()], [Attribute(Name('errno', Load(), lineno=491, col_offset=34), 'EMFILE', Load(), lineno=491, col_offset=34)], lineno=491, col_offset=23), [Raise(None, None, None, lineno=492, col_offset=24)], [], lineno=491, col_offset=20), Break( lineno=493, col_offset=20)], lineno=490, col_offset=16)], [], lineno=487, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=495, col_offset=16), 'skipTest', Load(), lineno=495, col_offset=16), [BinOp(Str('failed to reach the file descriptor limit (tried %d)', lineno=495, col_offset=30), Mod(), Name('max_handles', Load(), lineno=496, col_offset=35), lineno=495, col_offset=30)], [], None, None, lineno=495, col_offset=16), lineno=495, col_offset=16)], lineno=486, col_offset=12), For(Name('i', Store(), lineno=498, col_offset=16), Call(Name('range', Load(), lineno=498, col_offset=21), [Num(10, lineno=498, col_offset=27)], [], None, None, lineno=498, col_offset=21), [Expr(Call(Attribute(Name('os', Load(), lineno=499, col_offset=16), 'close', Load(), lineno=499, col_offset=16), [Call(Attribute(Name('handles', Load(), lineno=499, col_offset=25), 'pop', Load(), lineno=499, col_offset=25), [], [], None, None, lineno=499, col_offset=25)], [], None, None, lineno=499, col_offset=16), lineno=499, col_offset=16)], [], lineno=498, col_offset=12), For(Name('i', Store(), lineno=502, col_offset=16), Call(Name('range', Load(), lineno=502, col_offset=21), [Num(15, lineno=502, col_offset=27)], [], None, None, lineno=502, col_offset=21), [Assign([Name('p', Store(), lineno=503, col_offset=16)], Call(Attribute(Name('subprocess', Load(), lineno=503, col_offset=20), 'Popen', Load(), lineno=503, col_offset=20), [List([Attribute(Name('sys', Load(), lineno=503, col_offset=38), 'executable', Load(), lineno=503, col_offset=38), Str('-c', lineno=503, col_offset=54), Str('import sys;sys.stdout.write(sys.stdin.read())', lineno=504, col_offset=38)], Load(), lineno=503, col_offset=37)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=506, col_offset=43), 'PIPE', Load(), lineno=506, col_offset=43)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=507, col_offset=44), 'PIPE', Load(), lineno=507, col_offset=44)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=508, col_offset=44), 'PIPE', Load(), lineno=508, col_offset=44))], None, None, lineno=503, col_offset=20), lineno=503, col_offset=16), Assign([Name('data', Store(), lineno=509, col_offset=16)], Subscript(Call(Attribute(Name('p', Load(), lineno=509, col_offset=23), 'communicate', Load(), lineno=509, col_offset=23), [Str('lime', lineno=509, col_offset=37)], [], None, None, lineno=509, col_offset=23), Index(Num(0, lineno=509, col_offset=46)), Load(), lineno=509, col_offset=23), lineno=509, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=510, col_offset=16), 'assertEqual', Load(), lineno=510, col_offset=16), [Name('data', Load(), lineno=510, col_offset=33), Str('lime', lineno=510, col_offset=39)], [], None, None, lineno=510, col_offset=16), lineno=510, col_offset=16)], [], lineno=502, col_offset=12)], [For(Name('h', Store(), lineno=512, col_offset=16), Name('handles', Load(), lineno=512, col_offset=21), [Expr(Call(Attribute(Name('os', Load(), lineno=513, col_offset=16), 'close', Load(), lineno=513, col_offset=16), [Name('h', Load(), lineno=513, col_offset=25)], [], None, None, lineno=513, col_offset=16), lineno=513, col_offset=16)], [], lineno=512, col_offset=12)], lineno=485, col_offset=8)], [], lineno=478, col_offset=4), FunctionDef('test_list2cmdline', arguments([Name('self', Param(), lineno=515, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=516, col_offset=8), 'assertEqual', Load(), lineno=516, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=516, col_offset=25), 'list2cmdline', Load(), lineno=516, col_offset=25), [List([Str('a b c', lineno=516, col_offset=50), Str('d', lineno=516, col_offset=59), Str('e', lineno=516, col_offset=64)], Load(), lineno=516, col_offset=49)], [], None, None, lineno=516, col_offset=25), Str('"a b c" d e', lineno=517, col_offset=25)], [], None, None, lineno=516, col_offset=8), lineno=516, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=518, col_offset=8), 'assertEqual', Load(), lineno=518, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=518, col_offset=25), 'list2cmdline', Load(), lineno=518, col_offset=25), [List([Str('ab"c', lineno=518, col_offset=50), Str('\\', lineno=518, col_offset=58), Str('d', lineno=518, col_offset=64)], Load(), lineno=518, col_offset=49)], [], None, None, lineno=518, col_offset=25), Str('ab\\"c \\ d', lineno=519, col_offset=25)], [], None, None, lineno=518, col_offset=8), lineno=518, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=520, col_offset=8), 'assertEqual', Load(), lineno=520, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=520, col_offset=25), 'list2cmdline', Load(), lineno=520, col_offset=25), [List([Str('ab"c', lineno=520, col_offset=50), Str(' \\', lineno=520, col_offset=58), Str('d', lineno=520, col_offset=65)], Load(), lineno=520, col_offset=49)], [], None, None, lineno=520, col_offset=25), Str('ab\\"c " \\\\" d', lineno=521, col_offset=25)], [], None, None, lineno=520, col_offset=8), lineno=520, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=522, col_offset=8), 'assertEqual', Load(), lineno=522, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=522, col_offset=25), 'list2cmdline', Load(), lineno=522, col_offset=25), [List([Str('a\\\\\\b', lineno=522, col_offset=50), Str('de fg', lineno=522, col_offset=62), Str('h', lineno=522, col_offset=71)], Load(), lineno=522, col_offset=49)], [], None, None, lineno=522, col_offset=25), Str('a\\\\\\b "de fg" h', lineno=523, col_offset=25)], [], None, None, lineno=522, col_offset=8), lineno=522, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=524, col_offset=8), 'assertEqual', Load(), lineno=524, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=524, col_offset=25), 'list2cmdline', Load(), lineno=524, col_offset=25), [List([Str('a\\"b', lineno=524, col_offset=50), Str('c', lineno=524, col_offset=59), Str('d', lineno=524, col_offset=64)], Load(), lineno=524, col_offset=49)], [], None, None, lineno=524, col_offset=25), Str('a\\\\\\"b c d', lineno=525, col_offset=25)], [], None, None, lineno=524, col_offset=8), lineno=524, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=526, col_offset=8), 'assertEqual', Load(), lineno=526, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=526, col_offset=25), 'list2cmdline', Load(), lineno=526, col_offset=25), [List([Str('a\\\\b c', lineno=526, col_offset=50), Str('d', lineno=526, col_offset=62), Str('e', lineno=526, col_offset=67)], Load(), lineno=526, col_offset=49)], [], None, None, lineno=526, col_offset=25), Str('"a\\\\b c" d e', lineno=527, col_offset=25)], [], None, None, lineno=526, col_offset=8), lineno=526, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=528, col_offset=8), 'assertEqual', Load(), lineno=528, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=528, col_offset=25), 'list2cmdline', Load(), lineno=528, col_offset=25), [List([Str('a\\\\b\\ c', lineno=528, col_offset=50), Str('d', lineno=528, col_offset=64), Str('e', lineno=528, col_offset=69)], Load(), lineno=528, col_offset=49)], [], None, None, lineno=528, col_offset=25), Str('"a\\\\b\\ c" d e', lineno=529, col_offset=25)], [], None, None, lineno=528, col_offset=8), lineno=528, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=530, col_offset=8), 'assertEqual', Load(), lineno=530, col_offset=8), [Call(Attribute(Name('subprocess', Load(), lineno=530, col_offset=25), 'list2cmdline', Load(), lineno=530, col_offset=25), [List([Str('ab', lineno=530, col_offset=50), Str('', lineno=530, col_offset=56)], Load(), lineno=530, col_offset=49)], [], None, None, lineno=530, col_offset=25), Str('ab ""', lineno=531, col_offset=25)], [], None, None, lineno=530, col_offset=8), lineno=530, col_offset=8)], [], lineno=515, col_offset=4), FunctionDef('test_poll', arguments([Name('self', Param(), lineno=534, col_offset=18)], None, None, []), [Assign([Name('p', Store(), lineno=535, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=535, col_offset=12), 'Popen', Load(), lineno=535, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=535, col_offset=30), 'executable', Load(), lineno=535, col_offset=30), Str('-c', lineno=536, col_offset=26), Str('import time; time.sleep(1)', lineno=536, col_offset=32)], Load(), lineno=535, col_offset=29)], [], None, None, lineno=535, col_offset=12), lineno=535, col_offset=8), Assign([Name('count', Store(), lineno=537, col_offset=8)], Num(0, lineno=537, col_offset=16), lineno=537, col_offset=8), While(Compare(Call(Attribute(Name('p', Load(), lineno=538, col_offset=14), 'poll', Load(), lineno=538, col_offset=14), [], [], None, None, lineno=538, col_offset=14), [Is()], [Name('None', Load(), lineno=538, col_offset=26)], lineno=538, col_offset=14), [Expr(Call(Attribute(Name('time', Load(), lineno=539, col_offset=12), 'sleep', Load(), lineno=539, col_offset=12), [Num(0.1, lineno=539, col_offset=23)], [], None, None, lineno=539, col_offset=12), lineno=539, col_offset=12), AugAssign(Name('count', Store(), lineno=540, col_offset=12), Add(), Num(1, lineno=540, col_offset=21), lineno=540, col_offset=12)], [], lineno=538, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=545, col_offset=8), 'assertGreaterEqual', Load(), lineno=545, col_offset=8), [Name('count', Load(), lineno=545, col_offset=32), Num(2, lineno=545, col_offset=39)], [], None, None, lineno=545, col_offset=8), lineno=545, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=547, col_offset=8), 'assertEqual', Load(), lineno=547, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=547, col_offset=25), 'poll', Load(), lineno=547, col_offset=25), [], [], None, None, lineno=547, col_offset=25), Num(0, lineno=547, col_offset=35)], [], None, None, lineno=547, col_offset=8), lineno=547, col_offset=8)], [], lineno=534, col_offset=4), FunctionDef('test_wait', arguments([Name('self', Param(), lineno=550, col_offset=18)], None, None, []), [Assign([Name('p', Store(), lineno=551, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=551, col_offset=12), 'Popen', Load(), lineno=551, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=551, col_offset=30), 'executable', Load(), lineno=551, col_offset=30), Str('-c', lineno=552, col_offset=26), Str('import time; time.sleep(2)', lineno=552, col_offset=32)], Load(), lineno=551, col_offset=29)], [], None, None, lineno=551, col_offset=12), lineno=551, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=553, col_offset=8), 'assertEqual', Load(), lineno=553, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=553, col_offset=25), 'wait', Load(), lineno=553, col_offset=25), [], [], None, None, lineno=553, col_offset=25), Num(0, lineno=553, col_offset=35)], [], None, None, lineno=553, col_offset=8), lineno=553, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=555, col_offset=8), 'assertEqual', Load(), lineno=555, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=555, col_offset=25), 'wait', Load(), lineno=555, col_offset=25), [], [], None, None, lineno=555, col_offset=25), Num(0, lineno=555, col_offset=35)], [], None, None, lineno=555, col_offset=8), lineno=555, col_offset=8)], [], lineno=550, col_offset=4), FunctionDef('test_invalid_bufsize', arguments([Name('self', Param(), lineno=558, col_offset=29)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=561, col_offset=13), 'assertRaises', Load(), lineno=561, col_offset=13), [Name('TypeError', Load(), lineno=561, col_offset=31)], [], None, None, lineno=561, col_offset=13), None, [Expr(Call(Attribute(Name('subprocess', Load(), lineno=562, col_offset=12), 'Popen', Load(), lineno=562, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=562, col_offset=30), 'executable', Load(), lineno=562, col_offset=30), Str('-c', lineno=562, col_offset=46), Str('pass', lineno=562, col_offset=52)], Load(), lineno=562, col_offset=29), Str('orange', lineno=562, col_offset=61)], [], None, None, lineno=562, col_offset=12), lineno=562, col_offset=12)], lineno=561, col_offset=13)], [], lineno=558, col_offset=4), FunctionDef('test_leaking_fds_on_error', arguments([Name('self', Param(), lineno=564, col_offset=34)], None, None, []), [For(Name('i', Store(), lineno=570, col_offset=12), Call(Name('range', Load(), lineno=570, col_offset=17), [Num(1024, lineno=570, col_offset=23)], [], None, None, lineno=570, col_offset=17), [With(Call(Attribute(Name('self', Load(), lineno=572, col_offset=17), 'assertRaises', Load(), lineno=572, col_offset=17), [Name('EnvironmentError', Load(), lineno=572, col_offset=35)], [], None, None, lineno=572, col_offset=17), Name('c', Store(), lineno=572, col_offset=56), [Expr(Call(Attribute(Name('subprocess', Load(), lineno=573, col_offset=16), 'Popen', Load(), lineno=573, col_offset=16), [List([Str('nonexisting_i_hope', lineno=573, col_offset=34)], Load(), lineno=573, col_offset=33)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=574, col_offset=40), 'PIPE', Load(), lineno=574, col_offset=40)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=575, col_offset=40), 'PIPE', Load(), lineno=575, col_offset=40))], None, None, lineno=573, col_offset=16), lineno=573, col_offset=16)], lineno=572, col_offset=17), If(Compare(Attribute(Attribute(Name('c', Load(), lineno=576, col_offset=15), 'exception', Load(), lineno=576, col_offset=15), 'errno', Load(), lineno=576, col_offset=15), [NotEq()], [Attribute(Name('errno', Load(), lineno=576, col_offset=36), 'ENOENT', Load(), lineno=576, col_offset=36)], lineno=576, col_offset=15), [Raise(Attribute(Name('c', Load(), lineno=577, col_offset=22), 'exception', Load(), lineno=577, col_offset=22), None, None, lineno=577, col_offset=16)], [], lineno=576, col_offset=12)], [], lineno=570, col_offset=8)], [], lineno=564, col_offset=4), FunctionDef('test_handles_closed_on_exception', arguments([Name('self', Param(), lineno=579, col_offset=41)], None, None, []), [Assign([Tuple([Name('ifhandle', Store(), lineno=582, col_offset=8), Name('ifname', Store(), lineno=582, col_offset=18)], Store(), lineno=582, col_offset=8)], Call(Name('mkstemp', Load(), lineno=582, col_offset=27), [], [], None, None, lineno=582, col_offset=27), lineno=582, col_offset=8), Assign([Tuple([Name('ofhandle', Store(), lineno=583, col_offset=8), Name('ofname', Store(), lineno=583, col_offset=18)], Store(), lineno=583, col_offset=8)], Call(Name('mkstemp', Load(), lineno=583, col_offset=27), [], [], None, None, lineno=583, col_offset=27), lineno=583, col_offset=8), Assign([Tuple([Name('efhandle', Store(), lineno=584, col_offset=8), Name('efname', Store(), lineno=584, col_offset=18)], Store(), lineno=584, col_offset=8)], Call(Name('mkstemp', Load(), lineno=584, col_offset=27), [], [], None, None, lineno=584, col_offset=27), lineno=584, col_offset=8), TryExcept([Expr(Call(Attribute(Name('subprocess', Load(), lineno=586, col_offset=12), 'Popen', Load(), lineno=586, col_offset=12), [List([Str('*', lineno=586, col_offset=31)], Load(), lineno=586, col_offset=30)], [keyword('stdin', Name('ifhandle', Load(), lineno=586, col_offset=43)), keyword('stdout', Name('ofhandle', Load(), lineno=586, col_offset=60)), keyword('stderr', Name('efhandle', Load(), lineno=587, col_offset=21))], None, None, lineno=586, col_offset=12), lineno=586, col_offset=12)], [ExceptHandler(Name('OSError', Load(), lineno=588, col_offset=15), None, [Expr(Call(Attribute(Name('os', Load(), lineno=589, col_offset=12), 'close', Load(), lineno=589, col_offset=12), [Name('ifhandle', Load(), lineno=589, col_offset=21)], [], None, None, lineno=589, col_offset=12), lineno=589, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=590, col_offset=12), 'remove', Load(), lineno=590, col_offset=12), [Name('ifname', Load(), lineno=590, col_offset=22)], [], None, None, lineno=590, col_offset=12), lineno=590, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=591, col_offset=12), 'close', Load(), lineno=591, col_offset=12), [Name('ofhandle', Load(), lineno=591, col_offset=21)], [], None, None, lineno=591, col_offset=12), lineno=591, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=592, col_offset=12), 'remove', Load(), lineno=592, col_offset=12), [Name('ofname', Load(), lineno=592, col_offset=22)], [], None, None, lineno=592, col_offset=12), lineno=592, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=593, col_offset=12), 'close', Load(), lineno=593, col_offset=12), [Name('efhandle', Load(), lineno=593, col_offset=21)], [], None, None, lineno=593, col_offset=12), lineno=593, col_offset=12), Expr(Call(Attribute(Name('os', Load(), lineno=594, col_offset=12), 'remove', Load(), lineno=594, col_offset=12), [Name('efname', Load(), lineno=594, col_offset=22)], [], None, None, lineno=594, col_offset=12), lineno=594, col_offset=12)], lineno=588, col_offset=8)], [], lineno=585, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=595, col_offset=8), 'assertFalse', Load(), lineno=595, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=595, col_offset=25), 'path', Load(), lineno=595, col_offset=25), 'exists', Load(), lineno=595, col_offset=25), [Name('ifname', Load(), lineno=595, col_offset=40)], [], None, None, lineno=595, col_offset=25)], [], None, None, lineno=595, col_offset=8), lineno=595, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=596, col_offset=8), 'assertFalse', Load(), lineno=596, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=596, col_offset=25), 'path', Load(), lineno=596, col_offset=25), 'exists', Load(), lineno=596, col_offset=25), [Name('ofname', Load(), lineno=596, col_offset=40)], [], None, None, lineno=596, col_offset=25)], [], None, None, lineno=596, col_offset=8), lineno=596, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=597, col_offset=8), 'assertFalse', Load(), lineno=597, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=597, col_offset=25), 'path', Load(), lineno=597, col_offset=25), 'exists', Load(), lineno=597, col_offset=25), [Name('efname', Load(), lineno=597, col_offset=40)], [], None, None, lineno=597, col_offset=25)], [], None, None, lineno=597, col_offset=8), lineno=597, col_offset=8)], [], lineno=579, col_offset=4)], [], lineno=56, col_offset=0), ClassDef('_SuppressCoreFiles', [Name('object', Load(), lineno=601, col_offset=25)], [Expr(Str('Try to prevent core files from being created.', lineno=602, col_offset=4), lineno=602, col_offset=4), Assign([Name('old_limit', Store(), lineno=603, col_offset=4)], Name('None', Load(), lineno=603, col_offset=16), lineno=603, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=605, col_offset=18)], None, None, []), [Expr(Str('Try to save previous ulimit, then set it to (0, 0).', lineno=606, col_offset=8), lineno=606, col_offset=8), TryExcept([Import([alias('resource', None)], lineno=608, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=609, col_offset=12), 'old_limit', Store(), lineno=609, col_offset=12)], Call(Attribute(Name('resource', Load(), lineno=609, col_offset=29), 'getrlimit', Load(), lineno=609, col_offset=29), [Attribute(Name('resource', Load(), lineno=609, col_offset=48), 'RLIMIT_CORE', Load(), lineno=609, col_offset=48)], [], None, None, lineno=609, col_offset=29), lineno=609, col_offset=12), Expr(Call(Attribute(Name('resource', Load(), lineno=610, col_offset=12), 'setrlimit', Load(), lineno=610, col_offset=12), [Attribute(Name('resource', Load(), lineno=610, col_offset=31), 'RLIMIT_CORE', Load(), lineno=610, col_offset=31), Tuple([Num(0, lineno=610, col_offset=54), Num(0, lineno=610, col_offset=57)], Load(), lineno=610, col_offset=54)], [], None, None, lineno=610, col_offset=12), lineno=610, col_offset=12)], [ExceptHandler(Tuple([Name('ImportError', Load(), lineno=611, col_offset=16), Name('ValueError', Load(), lineno=611, col_offset=29), Attribute(Name('resource', Load(), lineno=611, col_offset=41), 'error', Load(), lineno=611, col_offset=41)], Load(), lineno=611, col_offset=16), None, [Pass( lineno=612, col_offset=12)], lineno=611, col_offset=8)], [], lineno=607, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=614, col_offset=11), 'platform', Load(), lineno=614, col_offset=11), [Eq()], [Str('darwin', lineno=614, col_offset=27)], lineno=614, col_offset=11), [Assign([Name('value', Store(), lineno=621, col_offset=12)], Subscript(Call(Attribute(Call(Attribute(Name('subprocess', Load(), lineno=621, col_offset=20), 'Popen', Load(), lineno=621, col_offset=20), [List([Str('/usr/bin/defaults', lineno=621, col_offset=38), Str('read', lineno=621, col_offset=59), Str('com.apple.CrashReporter', lineno=622, col_offset=20), Str('DialogType', lineno=622, col_offset=47)], Load(), lineno=621, col_offset=37)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=623, col_offset=27), 'PIPE', Load(), lineno=623, col_offset=27))], None, None, lineno=621, col_offset=20), 'communicate', Load(), lineno=621, col_offset=20), [], [], None, None, lineno=621, col_offset=20), Index(Num(0, lineno=623, col_offset=58)), Load(), lineno=621, col_offset=20), lineno=621, col_offset=12), If(Compare(Call(Attribute(Name('value', Load(), lineno=624, col_offset=15), 'strip', Load(), lineno=624, col_offset=15), [], [], None, None, lineno=624, col_offset=15), [Eq()], [Str('developer', lineno=624, col_offset=32)], lineno=624, col_offset=15), [Print(None, [Str('this tests triggers the Crash Reporter, that is intentional', lineno=625, col_offset=22)], True, lineno=625, col_offset=16), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=626, col_offset=16), 'stdout', Load(), lineno=626, col_offset=16), 'flush', Load(), lineno=626, col_offset=16), [], [], None, None, lineno=626, col_offset=16), lineno=626, col_offset=16)], [], lineno=624, col_offset=12)], [], lineno=614, col_offset=8)], [], lineno=605, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=628, col_offset=17)], 'args', None, []), [Expr(Str('Return core file behavior to default.', lineno=629, col_offset=8), lineno=629, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=630, col_offset=11), 'old_limit', Load(), lineno=630, col_offset=11), [Is()], [Name('None', Load(), lineno=630, col_offset=29)], lineno=630, col_offset=11), [Return(None, lineno=631, col_offset=12)], [], lineno=630, col_offset=8), TryExcept([Import([alias('resource', None)], lineno=633, col_offset=12), Expr(Call(Attribute(Name('resource', Load(), lineno=634, col_offset=12), 'setrlimit', Load(), lineno=634, col_offset=12), [Attribute(Name('resource', Load(), lineno=634, col_offset=31), 'RLIMIT_CORE', Load(), lineno=634, col_offset=31), Attribute(Name('self', Load(), lineno=634, col_offset=53), 'old_limit', Load(), lineno=634, col_offset=53)], [], None, None, lineno=634, col_offset=12), lineno=634, col_offset=12)], [ExceptHandler(Tuple([Name('ImportError', Load(), lineno=635, col_offset=16), Name('ValueError', Load(), lineno=635, col_offset=29), Attribute(Name('resource', Load(), lineno=635, col_offset=41), 'error', Load(), lineno=635, col_offset=41)], Load(), lineno=635, col_offset=16), None, [Pass( lineno=636, col_offset=12)], lineno=635, col_offset=8)], [], lineno=632, col_offset=8)], [], lineno=628, col_offset=4)], [], lineno=601, col_offset=0), ClassDef('POSIXProcessTestCase', [Name('BaseTestCase', Load(), lineno=640, col_offset=27)], [FunctionDef('test_exceptions', arguments([Name('self', Param(), lineno=642, col_offset=24)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=644, col_offset=13), 'assertRaises', Load(), lineno=644, col_offset=13), [Name('OSError', Load(), lineno=644, col_offset=31)], [], None, None, lineno=644, col_offset=13), Name('c', Store(), lineno=644, col_offset=43), [Assign([Name('p', Store(), lineno=645, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=645, col_offset=16), 'Popen', Load(), lineno=645, col_offset=16), [List([Attribute(Name('sys', Load(), lineno=645, col_offset=34), 'executable', Load(), lineno=645, col_offset=34), Str('-c', lineno=645, col_offset=50), Str('', lineno=645, col_offset=56)], Load(), lineno=645, col_offset=33)], [keyword('cwd', Str('/this/path/does/not/exist', lineno=646, col_offset=37))], None, None, lineno=645, col_offset=16), lineno=645, col_offset=12)], lineno=644, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=648, col_offset=8), 'assertIn', Load(), lineno=648, col_offset=8), [Str('os.chdir', lineno=648, col_offset=22), Attribute(Attribute(Name('c', Load(), lineno=648, col_offset=34), 'exception', Load(), lineno=648, col_offset=34), 'child_traceback', Load(), lineno=648, col_offset=34)], [], None, None, lineno=648, col_offset=8), lineno=648, col_offset=8)], [], lineno=642, col_offset=4), FunctionDef('test_run_abort', arguments([Name('self', Param(), lineno=650, col_offset=23)], None, None, []), [With(Call(Name('_SuppressCoreFiles', Load(), lineno=652, col_offset=13), [], [], None, None, lineno=652, col_offset=13), None, [Assign([Name('p', Store(), lineno=653, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=653, col_offset=16), 'Popen', Load(), lineno=653, col_offset=16), [List([Attribute(Name('sys', Load(), lineno=653, col_offset=34), 'executable', Load(), lineno=653, col_offset=34), Str('-c', lineno=653, col_offset=50), Str('import os; os.abort()', lineno=654, col_offset=34)], Load(), lineno=653, col_offset=33)], [], None, None, lineno=653, col_offset=16), lineno=653, col_offset=12), Expr(Call(Attribute(Name('p', Load(), lineno=655, col_offset=12), 'wait', Load(), lineno=655, col_offset=12), [], [], None, None, lineno=655, col_offset=12), lineno=655, col_offset=12)], lineno=652, col_offset=13), Expr(Call(Attribute(Name('self', Load(), lineno=656, col_offset=8), 'assertEqual', Load(), lineno=656, col_offset=8), [UnaryOp(USub(), Attribute(Name('p', Load(), lineno=656, col_offset=26), 'returncode', Load(), lineno=656, col_offset=26), lineno=656, col_offset=25), Attribute(Name('signal', Load(), lineno=656, col_offset=40), 'SIGABRT', Load(), lineno=656, col_offset=40)], [], None, None, lineno=656, col_offset=8), lineno=656, col_offset=8)], [], lineno=650, col_offset=4), FunctionDef('test_preexec', arguments([Name('self', Param(), lineno=658, col_offset=21)], None, None, []), [Assign([Name('p', Store(), lineno=660, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=660, col_offset=12), 'Popen', Load(), lineno=660, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=660, col_offset=30), 'executable', Load(), lineno=660, col_offset=30), Str('-c', lineno=660, col_offset=46), Str("import sys, os;sys.stdout.write(os.getenv('FRUIT'))", lineno=661, col_offset=30)], Load(), lineno=660, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=663, col_offset=36), 'PIPE', Load(), lineno=663, col_offset=36)), keyword('preexec_fn', Lambda(arguments([], None, None, []), Call(Attribute(Name('os', Load(), lineno=664, col_offset=48), 'putenv', Load(), lineno=664, col_offset=48), [Str('FRUIT', lineno=664, col_offset=58), Str('apple', lineno=664, col_offset=67)], [], None, None, lineno=664, col_offset=48), lineno=664, col_offset=40))], None, None, lineno=660, col_offset=12), lineno=660, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=665, col_offset=8), 'addCleanup', Load(), lineno=665, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=665, col_offset=24), 'stdout', Load(), lineno=665, col_offset=24), 'close', Load(), lineno=665, col_offset=24)], [], None, None, lineno=665, col_offset=8), lineno=665, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=666, col_offset=8), 'assertEqual', Load(), lineno=666, col_offset=8), [Call(Attribute(Attribute(Name('p', Load(), lineno=666, col_offset=25), 'stdout', Load(), lineno=666, col_offset=25), 'read', Load(), lineno=666, col_offset=25), [], [], None, None, lineno=666, col_offset=25), Str('apple', lineno=666, col_offset=42)], [], None, None, lineno=666, col_offset=8), lineno=666, col_offset=8)], [], lineno=658, col_offset=4), FunctionDef('test_args_string', arguments([Name('self', Param(), lineno=668, col_offset=25)], None, None, []), [Assign([Tuple([Name('f', Store(), lineno=670, col_offset=8), Name('fname', Store(), lineno=670, col_offset=11)], Store(), lineno=670, col_offset=8)], Call(Name('mkstemp', Load(), lineno=670, col_offset=19), [], [], None, None, lineno=670, col_offset=19), lineno=670, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=671, col_offset=8), 'write', Load(), lineno=671, col_offset=8), [Name('f', Load(), lineno=671, col_offset=17), Str('#!/bin/sh\n', lineno=671, col_offset=20)], [], None, None, lineno=671, col_offset=8), lineno=671, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=672, col_offset=8), 'write', Load(), lineno=672, col_offset=8), [Name('f', Load(), lineno=672, col_offset=17), BinOp(Str("exec '%s' -c 'import sys; sys.exit(47)'\n", lineno=672, col_offset=20), Mod(), Attribute(Name('sys', Load(), lineno=673, col_offset=20), 'executable', Load(), lineno=673, col_offset=20), lineno=672, col_offset=20)], [], None, None, lineno=672, col_offset=8), lineno=672, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=674, col_offset=8), 'close', Load(), lineno=674, col_offset=8), [Name('f', Load(), lineno=674, col_offset=17)], [], None, None, lineno=674, col_offset=8), lineno=674, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=675, col_offset=8), 'chmod', Load(), lineno=675, col_offset=8), [Name('fname', Load(), lineno=675, col_offset=17), Num(448, lineno=675, col_offset=24)], [], None, None, lineno=675, col_offset=8), lineno=675, col_offset=8), Assign([Name('p', Store(), lineno=676, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=676, col_offset=12), 'Popen', Load(), lineno=676, col_offset=12), [Name('fname', Load(), lineno=676, col_offset=29)], [], None, None, lineno=676, col_offset=12), lineno=676, col_offset=8), Expr(Call(Attribute(Name('p', Load(), lineno=677, col_offset=8), 'wait', Load(), lineno=677, col_offset=8), [], [], None, None, lineno=677, col_offset=8), lineno=677, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=678, col_offset=8), 'remove', Load(), lineno=678, col_offset=8), [Name('fname', Load(), lineno=678, col_offset=18)], [], None, None, lineno=678, col_offset=8), lineno=678, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=679, col_offset=8), 'assertEqual', Load(), lineno=679, col_offset=8), [Attribute(Name('p', Load(), lineno=679, col_offset=25), 'returncode', Load(), lineno=679, col_offset=25), Num(47, lineno=679, col_offset=39)], [], None, None, lineno=679, col_offset=8), lineno=679, col_offset=8)], [], lineno=668, col_offset=4), FunctionDef('test_invalid_args', arguments([Name('self', Param(), lineno=681, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=683, col_offset=8), 'assertRaises', Load(), lineno=683, col_offset=8), [Name('ValueError', Load(), lineno=683, col_offset=26), Attribute(Name('subprocess', Load(), lineno=683, col_offset=38), 'call', Load(), lineno=683, col_offset=38), List([Attribute(Name('sys', Load(), lineno=684, col_offset=27), 'executable', Load(), lineno=684, col_offset=27), Str('-c', lineno=684, col_offset=43), Str('import sys; sys.exit(47)', lineno=685, col_offset=27)], Load(), lineno=684, col_offset=26)], [keyword('startupinfo', Num(47, lineno=686, col_offset=38))], None, None, lineno=683, col_offset=8), lineno=683, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=687, col_offset=8), 'assertRaises', Load(), lineno=687, col_offset=8), [Name('ValueError', Load(), lineno=687, col_offset=26), Attribute(Name('subprocess', Load(), lineno=687, col_offset=38), 'call', Load(), lineno=687, col_offset=38), List([Attribute(Name('sys', Load(), lineno=688, col_offset=27), 'executable', Load(), lineno=688, col_offset=27), Str('-c', lineno=688, col_offset=43), Str('import sys; sys.exit(47)', lineno=689, col_offset=27)], Load(), lineno=688, col_offset=26)], [keyword('creationflags', Num(47, lineno=690, col_offset=40))], None, None, lineno=687, col_offset=8), lineno=687, col_offset=8)], [], lineno=681, col_offset=4), FunctionDef('test_shell_sequence', arguments([Name('self', Param(), lineno=692, col_offset=28)], None, None, []), [Assign([Name('newenv', Store(), lineno=694, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=694, col_offset=17), 'environ', Load(), lineno=694, col_offset=17), 'copy', Load(), lineno=694, col_offset=17), [], [], None, None, lineno=694, col_offset=17), lineno=694, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=695, col_offset=8), Index(Str('FRUIT', lineno=695, col_offset=15)), Store(), lineno=695, col_offset=8)], Str('apple', lineno=695, col_offset=26), lineno=695, col_offset=8), Assign([Name('p', Store(), lineno=696, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=696, col_offset=12), 'Popen', Load(), lineno=696, col_offset=12), [List([Str('echo $FRUIT', lineno=696, col_offset=30)], Load(), lineno=696, col_offset=29)], [keyword('shell', Num(1, lineno=696, col_offset=52)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=697, col_offset=36), 'PIPE', Load(), lineno=697, col_offset=36)), keyword('env', Name('newenv', Load(), lineno=698, col_offset=33))], None, None, lineno=696, col_offset=12), lineno=696, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=699, col_offset=8), 'addCleanup', Load(), lineno=699, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=699, col_offset=24), 'stdout', Load(), lineno=699, col_offset=24), 'close', Load(), lineno=699, col_offset=24)], [], None, None, lineno=699, col_offset=8), lineno=699, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=700, col_offset=8), 'assertEqual', Load(), lineno=700, col_offset=8), [Call(Attribute(Call(Attribute(Attribute(Name('p', Load(), lineno=700, col_offset=25), 'stdout', Load(), lineno=700, col_offset=25), 'read', Load(), lineno=700, col_offset=25), [], [], None, None, lineno=700, col_offset=25), 'strip', Load(), lineno=700, col_offset=25), [], [], None, None, lineno=700, col_offset=25), Str('apple', lineno=700, col_offset=50)], [], None, None, lineno=700, col_offset=8), lineno=700, col_offset=8)], [], lineno=692, col_offset=4), FunctionDef('test_shell_string', arguments([Name('self', Param(), lineno=702, col_offset=26)], None, None, []), [Assign([Name('newenv', Store(), lineno=704, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=704, col_offset=17), 'environ', Load(), lineno=704, col_offset=17), 'copy', Load(), lineno=704, col_offset=17), [], [], None, None, lineno=704, col_offset=17), lineno=704, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=705, col_offset=8), Index(Str('FRUIT', lineno=705, col_offset=15)), Store(), lineno=705, col_offset=8)], Str('apple', lineno=705, col_offset=26), lineno=705, col_offset=8), Assign([Name('p', Store(), lineno=706, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=706, col_offset=12), 'Popen', Load(), lineno=706, col_offset=12), [Str('echo $FRUIT', lineno=706, col_offset=29)], [keyword('shell', Num(1, lineno=706, col_offset=50)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=707, col_offset=36), 'PIPE', Load(), lineno=707, col_offset=36)), keyword('env', Name('newenv', Load(), lineno=708, col_offset=33))], None, None, lineno=706, col_offset=12), lineno=706, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=709, col_offset=8), 'addCleanup', Load(), lineno=709, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=709, col_offset=24), 'stdout', Load(), lineno=709, col_offset=24), 'close', Load(), lineno=709, col_offset=24)], [], None, None, lineno=709, col_offset=8), lineno=709, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=710, col_offset=8), 'assertEqual', Load(), lineno=710, col_offset=8), [Call(Attribute(Call(Attribute(Attribute(Name('p', Load(), lineno=710, col_offset=25), 'stdout', Load(), lineno=710, col_offset=25), 'read', Load(), lineno=710, col_offset=25), [], [], None, None, lineno=710, col_offset=25), 'strip', Load(), lineno=710, col_offset=25), [], [], None, None, lineno=710, col_offset=25), Str('apple', lineno=710, col_offset=50)], [], None, None, lineno=710, col_offset=8), lineno=710, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('test_call_string', arguments([Name('self', Param(), lineno=712, col_offset=25)], None, None, []), [Assign([Tuple([Name('f', Store(), lineno=714, col_offset=8), Name('fname', Store(), lineno=714, col_offset=11)], Store(), lineno=714, col_offset=8)], Call(Name('mkstemp', Load(), lineno=714, col_offset=19), [], [], None, None, lineno=714, col_offset=19), lineno=714, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=715, col_offset=8), 'write', Load(), lineno=715, col_offset=8), [Name('f', Load(), lineno=715, col_offset=17), Str('#!/bin/sh\n', lineno=715, col_offset=20)], [], None, None, lineno=715, col_offset=8), lineno=715, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=716, col_offset=8), 'write', Load(), lineno=716, col_offset=8), [Name('f', Load(), lineno=716, col_offset=17), BinOp(Str("exec '%s' -c 'import sys; sys.exit(47)'\n", lineno=716, col_offset=20), Mod(), Attribute(Name('sys', Load(), lineno=717, col_offset=20), 'executable', Load(), lineno=717, col_offset=20), lineno=716, col_offset=20)], [], None, None, lineno=716, col_offset=8), lineno=716, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=718, col_offset=8), 'close', Load(), lineno=718, col_offset=8), [Name('f', Load(), lineno=718, col_offset=17)], [], None, None, lineno=718, col_offset=8), lineno=718, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=719, col_offset=8), 'chmod', Load(), lineno=719, col_offset=8), [Name('fname', Load(), lineno=719, col_offset=17), Num(448, lineno=719, col_offset=24)], [], None, None, lineno=719, col_offset=8), lineno=719, col_offset=8), Assign([Name('rc', Store(), lineno=720, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=720, col_offset=13), 'call', Load(), lineno=720, col_offset=13), [Name('fname', Load(), lineno=720, col_offset=29)], [], None, None, lineno=720, col_offset=13), lineno=720, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=721, col_offset=8), 'remove', Load(), lineno=721, col_offset=8), [Name('fname', Load(), lineno=721, col_offset=18)], [], None, None, lineno=721, col_offset=8), lineno=721, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=722, col_offset=8), 'assertEqual', Load(), lineno=722, col_offset=8), [Name('rc', Load(), lineno=722, col_offset=25), Num(47, lineno=722, col_offset=29)], [], None, None, lineno=722, col_offset=8), lineno=722, col_offset=8)], [], lineno=712, col_offset=4), FunctionDef('test_specific_shell', arguments([Name('self', Param(), lineno=724, col_offset=28)], None, None, []), [Assign([Name('shells', Store(), lineno=726, col_offset=8)], List([], Load(), lineno=726, col_offset=17), lineno=726, col_offset=8), For(Name('prefix', Store(), lineno=727, col_offset=12), List([Str('/bin', lineno=727, col_offset=23), Str('/usr/bin/', lineno=727, col_offset=31), Str('/usr/local/bin', lineno=727, col_offset=44)], Load(), lineno=727, col_offset=22), [For(Name('name', Store(), lineno=728, col_offset=16), List([Str('bash', lineno=728, col_offset=25), Str('ksh', lineno=728, col_offset=33)], Load(), lineno=728, col_offset=24), [Assign([Name('sh', Store(), lineno=729, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=729, col_offset=21), 'path', Load(), lineno=729, col_offset=21), 'join', Load(), lineno=729, col_offset=21), [Name('prefix', Load(), lineno=729, col_offset=34), Name('name', Load(), lineno=729, col_offset=42)], [], None, None, lineno=729, col_offset=21), lineno=729, col_offset=16), If(Call(Attribute(Attribute(Name('os', Load(), lineno=730, col_offset=19), 'path', Load(), lineno=730, col_offset=19), 'isfile', Load(), lineno=730, col_offset=19), [Name('sh', Load(), lineno=730, col_offset=34)], [], None, None, lineno=730, col_offset=19), [Expr(Call(Attribute(Name('shells', Load(), lineno=731, col_offset=20), 'append', Load(), lineno=731, col_offset=20), [Name('sh', Load(), lineno=731, col_offset=34)], [], None, None, lineno=731, col_offset=20), lineno=731, col_offset=20)], [], lineno=730, col_offset=16)], [], lineno=728, col_offset=12)], [], lineno=727, col_offset=8), If(UnaryOp(Not(), Name('shells', Load(), lineno=732, col_offset=15), lineno=732, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=733, col_offset=12), 'skipTest', Load(), lineno=733, col_offset=12), [Str('bash or ksh required for this test', lineno=733, col_offset=26)], [], None, None, lineno=733, col_offset=12), lineno=733, col_offset=12)], [], lineno=732, col_offset=8), Assign([Name('sh', Store(), lineno=734, col_offset=8)], Str('/bin/sh', lineno=734, col_offset=13), lineno=734, col_offset=8), If(BoolOp(And(), [Call(Attribute(Attribute(Name('os', Load(), lineno=735, col_offset=11), 'path', Load(), lineno=735, col_offset=11), 'isfile', Load(), lineno=735, col_offset=11), [Name('sh', Load(), lineno=735, col_offset=26)], [], None, None, lineno=735, col_offset=11), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=735, col_offset=38), 'path', Load(), lineno=735, col_offset=38), 'islink', Load(), lineno=735, col_offset=38), [Name('sh', Load(), lineno=735, col_offset=53)], [], None, None, lineno=735, col_offset=38), lineno=735, col_offset=34)], lineno=735, col_offset=11), [Expr(Call(Attribute(Name('shells', Load(), lineno=737, col_offset=12), 'append', Load(), lineno=737, col_offset=12), [Name('sh', Load(), lineno=737, col_offset=26)], [], None, None, lineno=737, col_offset=12), lineno=737, col_offset=12)], [], lineno=735, col_offset=8), For(Name('sh', Store(), lineno=738, col_offset=12), Name('shells', Load(), lineno=738, col_offset=18), [Assign([Name('p', Store(), lineno=739, col_offset=12)], Call(Attribute(Name('subprocess', Load(), lineno=739, col_offset=16), 'Popen', Load(), lineno=739, col_offset=16), [Str('echo $0', lineno=739, col_offset=33)], [keyword('executable', Name('sh', Load(), lineno=739, col_offset=55)), keyword('shell', Name('True', Load(), lineno=739, col_offset=65)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=740, col_offset=40), 'PIPE', Load(), lineno=740, col_offset=40))], None, None, lineno=739, col_offset=16), lineno=739, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=741, col_offset=12), 'addCleanup', Load(), lineno=741, col_offset=12), [Attribute(Attribute(Name('p', Load(), lineno=741, col_offset=28), 'stdout', Load(), lineno=741, col_offset=28), 'close', Load(), lineno=741, col_offset=28)], [], None, None, lineno=741, col_offset=12), lineno=741, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=742, col_offset=12), 'assertEqual', Load(), lineno=742, col_offset=12), [Call(Attribute(Call(Attribute(Attribute(Name('p', Load(), lineno=742, col_offset=29), 'stdout', Load(), lineno=742, col_offset=29), 'read', Load(), lineno=742, col_offset=29), [], [], None, None, lineno=742, col_offset=29), 'strip', Load(), lineno=742, col_offset=29), [], [], None, None, lineno=742, col_offset=29), Name('sh', Load(), lineno=742, col_offset=54)], [], None, None, lineno=742, col_offset=12), lineno=742, col_offset=12)], [], lineno=738, col_offset=8)], [], lineno=724, col_offset=4), FunctionDef('_kill_process', arguments([Name('self', Param(), lineno=744, col_offset=22), Name('method', Param(), lineno=744, col_offset=28)], 'args', None, []), [Assign([Name('p', Store(), lineno=747, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=747, col_offset=12), 'Popen', Load(), lineno=747, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=747, col_offset=30), 'executable', Load(), lineno=747, col_offset=30), Str('-c', lineno=747, col_offset=46), Str("if 1:\n                             import sys, time\n                             sys.stdout.write('x\\n')\n                             sys.stdout.flush()\n                             time.sleep(30)\n                             ", lineno=752, col_offset=-1)], Load(), lineno=747, col_offset=29)], [keyword('close_fds', Name('True', Load(), lineno=753, col_offset=39)), keyword('stdin', Attribute(Name('subprocess', Load(), lineno=754, col_offset=35), 'PIPE', Load(), lineno=754, col_offset=35)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=755, col_offset=36), 'PIPE', Load(), lineno=755, col_offset=36)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=756, col_offset=36), 'PIPE', Load(), lineno=756, col_offset=36))], None, None, lineno=747, col_offset=12), lineno=747, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=759, col_offset=8), 'stdout', Load(), lineno=759, col_offset=8), 'read', Load(), lineno=759, col_offset=8), [Num(1, lineno=759, col_offset=22)], [], None, None, lineno=759, col_offset=8), lineno=759, col_offset=8), Expr(Call(Call(Name('getattr', Load(), lineno=760, col_offset=8), [Name('p', Load(), lineno=760, col_offset=16), Name('method', Load(), lineno=760, col_offset=19)], [], None, None, lineno=760, col_offset=8), [], [], Name('args', Load(), lineno=760, col_offset=28), None, lineno=760, col_offset=8), lineno=760, col_offset=8), Return(Name('p', Load(), lineno=761, col_offset=15), lineno=761, col_offset=8)], [], lineno=744, col_offset=4), FunctionDef('test_send_signal', arguments([Name('self', Param(), lineno=763, col_offset=25)], None, None, []), [Assign([Name('p', Store(), lineno=764, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=764, col_offset=12), '_kill_process', Load(), lineno=764, col_offset=12), [Str('send_signal', lineno=764, col_offset=31), Attribute(Name('signal', Load(), lineno=764, col_offset=46), 'SIGINT', Load(), lineno=764, col_offset=46)], [], None, None, lineno=764, col_offset=12), lineno=764, col_offset=8), Assign([Tuple([Name('_', Store(), lineno=765, col_offset=8), Name('stderr', Store(), lineno=765, col_offset=11)], Store(), lineno=765, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=765, col_offset=20), 'communicate', Load(), lineno=765, col_offset=20), [], [], None, None, lineno=765, col_offset=20), lineno=765, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=766, col_offset=8), 'assertIn', Load(), lineno=766, col_offset=8), [Str('KeyboardInterrupt', lineno=766, col_offset=22), Name('stderr', Load(), lineno=766, col_offset=43)], [], None, None, lineno=766, col_offset=8), lineno=766, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=767, col_offset=8), 'assertNotEqual', Load(), lineno=767, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=767, col_offset=28), 'wait', Load(), lineno=767, col_offset=28), [], [], None, None, lineno=767, col_offset=28), Num(0, lineno=767, col_offset=38)], [], None, None, lineno=767, col_offset=8), lineno=767, col_offset=8)], [], lineno=763, col_offset=4), FunctionDef('test_kill', arguments([Name('self', Param(), lineno=769, col_offset=18)], None, None, []), [Assign([Name('p', Store(), lineno=770, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=770, col_offset=12), '_kill_process', Load(), lineno=770, col_offset=12), [Str('kill', lineno=770, col_offset=31)], [], None, None, lineno=770, col_offset=12), lineno=770, col_offset=8), Assign([Tuple([Name('_', Store(), lineno=771, col_offset=8), Name('stderr', Store(), lineno=771, col_offset=11)], Store(), lineno=771, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=771, col_offset=20), 'communicate', Load(), lineno=771, col_offset=20), [], [], None, None, lineno=771, col_offset=20), lineno=771, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=772, col_offset=8), 'assertStderrEqual', Load(), lineno=772, col_offset=8), [Name('stderr', Load(), lineno=772, col_offset=31), Str('', lineno=772, col_offset=39)], [], None, None, lineno=772, col_offset=8), lineno=772, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=773, col_offset=8), 'assertEqual', Load(), lineno=773, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=773, col_offset=25), 'wait', Load(), lineno=773, col_offset=25), [], [], None, None, lineno=773, col_offset=25), UnaryOp(USub(), Attribute(Name('signal', Load(), lineno=773, col_offset=36), 'SIGKILL', Load(), lineno=773, col_offset=36), lineno=773, col_offset=35)], [], None, None, lineno=773, col_offset=8), lineno=773, col_offset=8)], [], lineno=769, col_offset=4), FunctionDef('test_terminate', arguments([Name('self', Param(), lineno=775, col_offset=23)], None, None, []), [Assign([Name('p', Store(), lineno=776, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=776, col_offset=12), '_kill_process', Load(), lineno=776, col_offset=12), [Str('terminate', lineno=776, col_offset=31)], [], None, None, lineno=776, col_offset=12), lineno=776, col_offset=8), Assign([Tuple([Name('_', Store(), lineno=777, col_offset=8), Name('stderr', Store(), lineno=777, col_offset=11)], Store(), lineno=777, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=777, col_offset=20), 'communicate', Load(), lineno=777, col_offset=20), [], [], None, None, lineno=777, col_offset=20), lineno=777, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=778, col_offset=8), 'assertStderrEqual', Load(), lineno=778, col_offset=8), [Name('stderr', Load(), lineno=778, col_offset=31), Str('', lineno=778, col_offset=39)], [], None, None, lineno=778, col_offset=8), lineno=778, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=779, col_offset=8), 'assertEqual', Load(), lineno=779, col_offset=8), [Call(Attribute(Name('p', Load(), lineno=779, col_offset=25), 'wait', Load(), lineno=779, col_offset=25), [], [], None, None, lineno=779, col_offset=25), UnaryOp(USub(), Attribute(Name('signal', Load(), lineno=779, col_offset=36), 'SIGTERM', Load(), lineno=779, col_offset=36), lineno=779, col_offset=35)], [], None, None, lineno=779, col_offset=8), lineno=779, col_offset=8)], [], lineno=775, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=639, col_offset=1), 'skipIf', Load(), lineno=639, col_offset=1), [Name('mswindows', Load(), lineno=639, col_offset=17), Str('POSIX specific tests', lineno=639, col_offset=28)], [], None, None, lineno=639, col_offset=1)], lineno=639, col_offset=0), ClassDef('Win32ProcessTestCase', [Name('BaseTestCase', Load(), lineno=783, col_offset=27)], [FunctionDef('test_startupinfo', arguments([Name('self', Param(), lineno=785, col_offset=25)], None, None, []), [Assign([Name('STARTF_USESHOWWINDOW', Store(), lineno=789, col_offset=8)], Num(1, lineno=789, col_offset=31), lineno=789, col_offset=8), Assign([Name('SW_MAXIMIZE', Store(), lineno=790, col_offset=8)], Num(3, lineno=790, col_offset=22), lineno=790, col_offset=8), Assign([Name('startupinfo', Store(), lineno=791, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=791, col_offset=22), 'STARTUPINFO', Load(), lineno=791, col_offset=22), [], [], None, None, lineno=791, col_offset=22), lineno=791, col_offset=8), Assign([Attribute(Name('startupinfo', Load(), lineno=792, col_offset=8), 'dwFlags', Store(), lineno=792, col_offset=8)], Name('STARTF_USESHOWWINDOW', Load(), lineno=792, col_offset=30), lineno=792, col_offset=8), Assign([Attribute(Name('startupinfo', Load(), lineno=793, col_offset=8), 'wShowWindow', Store(), lineno=793, col_offset=8)], Name('SW_MAXIMIZE', Load(), lineno=793, col_offset=34), lineno=793, col_offset=8), Expr(Call(Attribute(Name('subprocess', Load(), lineno=797, col_offset=8), 'call', Load(), lineno=797, col_offset=8), [List([Attribute(Name('sys', Load(), lineno=797, col_offset=25), 'executable', Load(), lineno=797, col_offset=25), Str('-c', lineno=797, col_offset=41), Str('import sys; sys.exit(0)', lineno=797, col_offset=47)], Load(), lineno=797, col_offset=24)], [keyword('startupinfo', Name('startupinfo', Load(), lineno=798, col_offset=36))], None, None, lineno=797, col_offset=8), lineno=797, col_offset=8)], [], lineno=785, col_offset=4), FunctionDef('test_creationflags', arguments([Name('self', Param(), lineno=800, col_offset=27)], None, None, []), [Assign([Name('CREATE_NEW_CONSOLE', Store(), lineno=802, col_offset=8)], Num(16, lineno=802, col_offset=29), lineno=802, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=803, col_offset=8), 'stderr', Load(), lineno=803, col_offset=8), 'write', Load(), lineno=803, col_offset=8), [Str('    a DOS box should flash briefly ...\n', lineno=803, col_offset=25)], [], None, None, lineno=803, col_offset=8), lineno=803, col_offset=8), Expr(Call(Attribute(Name('subprocess', Load(), lineno=804, col_offset=8), 'call', Load(), lineno=804, col_offset=8), [BinOp(Attribute(Name('sys', Load(), lineno=804, col_offset=24), 'executable', Load(), lineno=804, col_offset=24), Add(), Str(' -c "import time; time.sleep(0.25)"', lineno=805, col_offset=24), lineno=804, col_offset=24)], [keyword('creationflags', Name('CREATE_NEW_CONSOLE', Load(), lineno=806, col_offset=38))], None, None, lineno=804, col_offset=8), lineno=804, col_offset=8)], [], lineno=800, col_offset=4), FunctionDef('test_invalid_args', arguments([Name('self', Param(), lineno=808, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=810, col_offset=8), 'assertRaises', Load(), lineno=810, col_offset=8), [Name('ValueError', Load(), lineno=810, col_offset=26), Attribute(Name('subprocess', Load(), lineno=810, col_offset=38), 'call', Load(), lineno=810, col_offset=38), List([Attribute(Name('sys', Load(), lineno=811, col_offset=27), 'executable', Load(), lineno=811, col_offset=27), Str('-c', lineno=811, col_offset=43), Str('import sys; sys.exit(47)', lineno=812, col_offset=27)], Load(), lineno=811, col_offset=26)], [keyword('preexec_fn', Lambda(arguments([], None, None, []), Num(1, lineno=813, col_offset=45), lineno=813, col_offset=37))], None, None, lineno=810, col_offset=8), lineno=810, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=814, col_offset=8), 'assertRaises', Load(), lineno=814, col_offset=8), [Name('ValueError', Load(), lineno=814, col_offset=26), Attribute(Name('subprocess', Load(), lineno=814, col_offset=38), 'call', Load(), lineno=814, col_offset=38), List([Attribute(Name('sys', Load(), lineno=815, col_offset=27), 'executable', Load(), lineno=815, col_offset=27), Str('-c', lineno=815, col_offset=43), Str('import sys; sys.exit(47)', lineno=816, col_offset=27)], Load(), lineno=815, col_offset=26)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=817, col_offset=33), 'PIPE', Load(), lineno=817, col_offset=33)), keyword('close_fds', Name('True', Load(), lineno=818, col_offset=36))], None, None, lineno=814, col_offset=8), lineno=814, col_offset=8)], [], lineno=808, col_offset=4), FunctionDef('test_close_fds', arguments([Name('self', Param(), lineno=820, col_offset=23)], None, None, []), [Assign([Name('rc', Store(), lineno=822, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=822, col_offset=13), 'call', Load(), lineno=822, col_offset=13), [List([Attribute(Name('sys', Load(), lineno=822, col_offset=30), 'executable', Load(), lineno=822, col_offset=30), Str('-c', lineno=822, col_offset=46), Str('import sys; sys.exit(47)', lineno=823, col_offset=30)], Load(), lineno=822, col_offset=29)], [keyword('close_fds', Name('True', Load(), lineno=824, col_offset=40))], None, None, lineno=822, col_offset=13), lineno=822, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=825, col_offset=8), 'assertEqual', Load(), lineno=825, col_offset=8), [Name('rc', Load(), lineno=825, col_offset=25), Num(47, lineno=825, col_offset=29)], [], None, None, lineno=825, col_offset=8), lineno=825, col_offset=8)], [], lineno=820, col_offset=4), FunctionDef('test_shell_sequence', arguments([Name('self', Param(), lineno=827, col_offset=28)], None, None, []), [Assign([Name('newenv', Store(), lineno=829, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=829, col_offset=17), 'environ', Load(), lineno=829, col_offset=17), 'copy', Load(), lineno=829, col_offset=17), [], [], None, None, lineno=829, col_offset=17), lineno=829, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=830, col_offset=8), Index(Str('FRUIT', lineno=830, col_offset=15)), Store(), lineno=830, col_offset=8)], Str('physalis', lineno=830, col_offset=26), lineno=830, col_offset=8), Assign([Name('p', Store(), lineno=831, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=831, col_offset=12), 'Popen', Load(), lineno=831, col_offset=12), [List([Str('set', lineno=831, col_offset=30)], Load(), lineno=831, col_offset=29)], [keyword('shell', Num(1, lineno=831, col_offset=44)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=832, col_offset=36), 'PIPE', Load(), lineno=832, col_offset=36)), keyword('env', Name('newenv', Load(), lineno=833, col_offset=33))], None, None, lineno=831, col_offset=12), lineno=831, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=834, col_offset=8), 'addCleanup', Load(), lineno=834, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=834, col_offset=24), 'stdout', Load(), lineno=834, col_offset=24), 'close', Load(), lineno=834, col_offset=24)], [], None, None, lineno=834, col_offset=8), lineno=834, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=835, col_offset=8), 'assertIn', Load(), lineno=835, col_offset=8), [Str('physalis', lineno=835, col_offset=22), Call(Attribute(Attribute(Name('p', Load(), lineno=835, col_offset=34), 'stdout', Load(), lineno=835, col_offset=34), 'read', Load(), lineno=835, col_offset=34), [], [], None, None, lineno=835, col_offset=34)], [], None, None, lineno=835, col_offset=8), lineno=835, col_offset=8)], [], lineno=827, col_offset=4), FunctionDef('test_shell_string', arguments([Name('self', Param(), lineno=837, col_offset=26)], None, None, []), [Assign([Name('newenv', Store(), lineno=839, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=839, col_offset=17), 'environ', Load(), lineno=839, col_offset=17), 'copy', Load(), lineno=839, col_offset=17), [], [], None, None, lineno=839, col_offset=17), lineno=839, col_offset=8), Assign([Subscript(Name('newenv', Load(), lineno=840, col_offset=8), Index(Str('FRUIT', lineno=840, col_offset=15)), Store(), lineno=840, col_offset=8)], Str('physalis', lineno=840, col_offset=26), lineno=840, col_offset=8), Assign([Name('p', Store(), lineno=841, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=841, col_offset=12), 'Popen', Load(), lineno=841, col_offset=12), [Str('set', lineno=841, col_offset=29)], [keyword('shell', Num(1, lineno=841, col_offset=42)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=842, col_offset=36), 'PIPE', Load(), lineno=842, col_offset=36)), keyword('env', Name('newenv', Load(), lineno=843, col_offset=33))], None, None, lineno=841, col_offset=12), lineno=841, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=844, col_offset=8), 'addCleanup', Load(), lineno=844, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=844, col_offset=24), 'stdout', Load(), lineno=844, col_offset=24), 'close', Load(), lineno=844, col_offset=24)], [], None, None, lineno=844, col_offset=8), lineno=844, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=845, col_offset=8), 'assertIn', Load(), lineno=845, col_offset=8), [Str('physalis', lineno=845, col_offset=22), Call(Attribute(Attribute(Name('p', Load(), lineno=845, col_offset=34), 'stdout', Load(), lineno=845, col_offset=34), 'read', Load(), lineno=845, col_offset=34), [], [], None, None, lineno=845, col_offset=34)], [], None, None, lineno=845, col_offset=8), lineno=845, col_offset=8)], [], lineno=837, col_offset=4), FunctionDef('test_call_string', arguments([Name('self', Param(), lineno=847, col_offset=25)], None, None, []), [Assign([Name('rc', Store(), lineno=849, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=849, col_offset=13), 'call', Load(), lineno=849, col_offset=13), [BinOp(Attribute(Name('sys', Load(), lineno=849, col_offset=29), 'executable', Load(), lineno=849, col_offset=29), Add(), Str(' -c "import sys; sys.exit(47)"', lineno=850, col_offset=29), lineno=849, col_offset=29)], [], None, None, lineno=849, col_offset=13), lineno=849, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=851, col_offset=8), 'assertEqual', Load(), lineno=851, col_offset=8), [Name('rc', Load(), lineno=851, col_offset=25), Num(47, lineno=851, col_offset=29)], [], None, None, lineno=851, col_offset=8), lineno=851, col_offset=8)], [], lineno=847, col_offset=4), FunctionDef('_kill_process', arguments([Name('self', Param(), lineno=853, col_offset=22), Name('method', Param(), lineno=853, col_offset=28)], 'args', None, []), [Assign([Name('p', Store(), lineno=855, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=855, col_offset=12), 'Popen', Load(), lineno=855, col_offset=12), [List([Attribute(Name('sys', Load(), lineno=855, col_offset=30), 'executable', Load(), lineno=855, col_offset=30), Str('-c', lineno=855, col_offset=46), Str("if 1:\n                             import sys, time\n                             sys.stdout.write('x\\n')\n                             sys.stdout.flush()\n                             time.sleep(30)\n                             ", lineno=860, col_offset=-1)], Load(), lineno=855, col_offset=29)], [keyword('stdin', Attribute(Name('subprocess', Load(), lineno=861, col_offset=35), 'PIPE', Load(), lineno=861, col_offset=35)), keyword('stdout', Attribute(Name('subprocess', Load(), lineno=862, col_offset=36), 'PIPE', Load(), lineno=862, col_offset=36)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=863, col_offset=36), 'PIPE', Load(), lineno=863, col_offset=36))], None, None, lineno=855, col_offset=12), lineno=855, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=864, col_offset=8), 'addCleanup', Load(), lineno=864, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=864, col_offset=24), 'stdout', Load(), lineno=864, col_offset=24), 'close', Load(), lineno=864, col_offset=24)], [], None, None, lineno=864, col_offset=8), lineno=864, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=865, col_offset=8), 'addCleanup', Load(), lineno=865, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=865, col_offset=24), 'stderr', Load(), lineno=865, col_offset=24), 'close', Load(), lineno=865, col_offset=24)], [], None, None, lineno=865, col_offset=8), lineno=865, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=866, col_offset=8), 'addCleanup', Load(), lineno=866, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=866, col_offset=24), 'stdin', Load(), lineno=866, col_offset=24), 'close', Load(), lineno=866, col_offset=24)], [], None, None, lineno=866, col_offset=8), lineno=866, col_offset=8), Expr(Call(Attribute(Attribute(Name('p', Load(), lineno=869, col_offset=8), 'stdout', Load(), lineno=869, col_offset=8), 'read', Load(), lineno=869, col_offset=8), [Num(1, lineno=869, col_offset=22)], [], None, None, lineno=869, col_offset=8), lineno=869, col_offset=8), Expr(Call(Call(Name('getattr', Load(), lineno=870, col_offset=8), [Name('p', Load(), lineno=870, col_offset=16), Name('method', Load(), lineno=870, col_offset=19)], [], None, None, lineno=870, col_offset=8), [], [], Name('args', Load(), lineno=870, col_offset=28), None, lineno=870, col_offset=8), lineno=870, col_offset=8), Assign([Tuple([Name('_', Store(), lineno=871, col_offset=8), Name('stderr', Store(), lineno=871, col_offset=11)], Store(), lineno=871, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=871, col_offset=20), 'communicate', Load(), lineno=871, col_offset=20), [], [], None, None, lineno=871, col_offset=20), lineno=871, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=872, col_offset=8), 'assertStderrEqual', Load(), lineno=872, col_offset=8), [Name('stderr', Load(), lineno=872, col_offset=31), Str('', lineno=872, col_offset=39)], [], None, None, lineno=872, col_offset=8), lineno=872, col_offset=8), Assign([Name('returncode', Store(), lineno=873, col_offset=8)], Call(Attribute(Name('p', Load(), lineno=873, col_offset=21), 'wait', Load(), lineno=873, col_offset=21), [], [], None, None, lineno=873, col_offset=21), lineno=873, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=874, col_offset=8), 'assertNotEqual', Load(), lineno=874, col_offset=8), [Name('returncode', Load(), lineno=874, col_offset=28), Num(0, lineno=874, col_offset=40)], [], None, None, lineno=874, col_offset=8), lineno=874, col_offset=8)], [], lineno=853, col_offset=4), FunctionDef('test_send_signal', arguments([Name('self', Param(), lineno=876, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=877, col_offset=8), '_kill_process', Load(), lineno=877, col_offset=8), [Str('send_signal', lineno=877, col_offset=27), Attribute(Name('signal', Load(), lineno=877, col_offset=42), 'SIGTERM', Load(), lineno=877, col_offset=42)], [], None, None, lineno=877, col_offset=8), lineno=877, col_offset=8)], [], lineno=876, col_offset=4), FunctionDef('test_kill', arguments([Name('self', Param(), lineno=879, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=880, col_offset=8), '_kill_process', Load(), lineno=880, col_offset=8), [Str('kill', lineno=880, col_offset=27)], [], None, None, lineno=880, col_offset=8), lineno=880, col_offset=8)], [], lineno=879, col_offset=4), FunctionDef('test_terminate', arguments([Name('self', Param(), lineno=882, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=883, col_offset=8), '_kill_process', Load(), lineno=883, col_offset=8), [Str('terminate', lineno=883, col_offset=27)], [], None, None, lineno=883, col_offset=8), lineno=883, col_offset=8)], [], lineno=882, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=782, col_offset=1), 'skipUnless', Load(), lineno=782, col_offset=1), [Name('mswindows', Load(), lineno=782, col_offset=21), Str('Windows specific tests', lineno=782, col_offset=32)], [], None, None, lineno=782, col_offset=1)], lineno=782, col_offset=0), ClassDef('ProcessTestCaseNoPoll', [Name('ProcessTestCase', Load(), lineno=888, col_offset=28)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=889, col_offset=14)], None, None, []), [Assign([Attribute(Name('subprocess', Load(), lineno=890, col_offset=8), '_has_poll', Store(), lineno=890, col_offset=8)], Name('False', Load(), lineno=890, col_offset=31), lineno=890, col_offset=8), Expr(Call(Attribute(Name('ProcessTestCase', Load(), lineno=891, col_offset=8), 'setUp', Load(), lineno=891, col_offset=8), [Name('self', Load(), lineno=891, col_offset=30)], [], None, None, lineno=891, col_offset=8), lineno=891, col_offset=8)], [], lineno=889, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=893, col_offset=17)], None, None, []), [Assign([Attribute(Name('subprocess', Load(), lineno=894, col_offset=8), '_has_poll', Store(), lineno=894, col_offset=8)], Name('True', Load(), lineno=894, col_offset=31), lineno=894, col_offset=8), Expr(Call(Attribute(Name('ProcessTestCase', Load(), lineno=895, col_offset=8), 'tearDown', Load(), lineno=895, col_offset=8), [Name('self', Load(), lineno=895, col_offset=33)], [], None, None, lineno=895, col_offset=8), lineno=895, col_offset=8)], [], lineno=893, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=886, col_offset=1), 'skipUnless', Load(), lineno=886, col_offset=1), [Call(Name('getattr', Load(), lineno=886, col_offset=21), [Name('subprocess', Load(), lineno=886, col_offset=29), Str('_has_poll', lineno=886, col_offset=41), Name('False', Load(), lineno=886, col_offset=54)], [], None, None, lineno=886, col_offset=21), Str('poll system call not supported', lineno=887, col_offset=21)], [], None, None, lineno=886, col_offset=1)], lineno=886, col_offset=0), ClassDef('HelperFunctionTests', [Attribute(Name('unittest', Load(), lineno=898, col_offset=26), 'TestCase', Load(), lineno=898, col_offset=26)], [FunctionDef('test_eintr_retry_call', arguments([Name('self', Param(), lineno=900, col_offset=30)], None, None, []), [Assign([Name('record_calls', Store(), lineno=901, col_offset=8)], List([], Load(), lineno=901, col_offset=23), lineno=901, col_offset=8), FunctionDef('fake_os_func', arguments([], 'args', None, []), [Expr(Call(Attribute(Name('record_calls', Load(), lineno=903, col_offset=12), 'append', Load(), lineno=903, col_offset=12), [Name('args', Load(), lineno=903, col_offset=32)], [], None, None, lineno=903, col_offset=12), lineno=903, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=904, col_offset=15), [Name('record_calls', Load(), lineno=904, col_offset=19)], [], None, None, lineno=904, col_offset=15), [Eq()], [Num(2, lineno=904, col_offset=36)], lineno=904, col_offset=15), [Raise(Call(Name('OSError', Load(), lineno=905, col_offset=22), [Attribute(Name('errno', Load(), lineno=905, col_offset=30), 'EINTR', Load(), lineno=905, col_offset=30), Str('fake interrupted system call', lineno=905, col_offset=43)], [], None, None, lineno=905, col_offset=22), None, None, lineno=905, col_offset=16)], [], lineno=904, col_offset=12), Return(Call(Name('tuple', Load(), lineno=906, col_offset=19), [Call(Name('reversed', Load(), lineno=906, col_offset=25), [Name('args', Load(), lineno=906, col_offset=34)], [], None, None, lineno=906, col_offset=25)], [], None, None, lineno=906, col_offset=19), lineno=906, col_offset=12)], [], lineno=902, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=908, col_offset=8), 'assertEqual', Load(), lineno=908, col_offset=8), [Tuple([Num(999, lineno=908, col_offset=26), Num(256, lineno=908, col_offset=31)], Load(), lineno=908, col_offset=26), Call(Attribute(Name('subprocess', Load(), lineno=909, col_offset=25), '_eintr_retry_call', Load(), lineno=909, col_offset=25), [Name('fake_os_func', Load(), lineno=909, col_offset=54), Num(256, lineno=909, col_offset=68), Num(999, lineno=909, col_offset=73)], [], None, None, lineno=909, col_offset=25)], [], None, None, lineno=908, col_offset=8), lineno=908, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=910, col_offset=8), 'assertEqual', Load(), lineno=910, col_offset=8), [List([Tuple([Num(256, lineno=910, col_offset=27), Num(999, lineno=910, col_offset=32)], Load(), lineno=910, col_offset=27)], Load(), lineno=910, col_offset=25), Name('record_calls', Load(), lineno=910, col_offset=39)], [], None, None, lineno=910, col_offset=8), lineno=910, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=912, col_offset=8), 'assertEqual', Load(), lineno=912, col_offset=8), [Tuple([Num(666, lineno=912, col_offset=26)], Load(), lineno=912, col_offset=26), Call(Attribute(Name('subprocess', Load(), lineno=913, col_offset=25), '_eintr_retry_call', Load(), lineno=913, col_offset=25), [Name('fake_os_func', Load(), lineno=913, col_offset=54), Num(666, lineno=913, col_offset=68)], [], None, None, lineno=913, col_offset=25)], [], None, None, lineno=912, col_offset=8), lineno=912, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=914, col_offset=8), 'assertEqual', Load(), lineno=914, col_offset=8), [List([Tuple([Num(256, lineno=914, col_offset=27), Num(999, lineno=914, col_offset=32)], Load(), lineno=914, col_offset=27), Tuple([Num(666, lineno=914, col_offset=39)], Load(), lineno=914, col_offset=39), Tuple([Num(666, lineno=914, col_offset=47)], Load(), lineno=914, col_offset=47)], Load(), lineno=914, col_offset=25), Name('record_calls', Load(), lineno=914, col_offset=55)], [], None, None, lineno=914, col_offset=8), lineno=914, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=899, col_offset=5), 'skipIf', Load(), lineno=899, col_offset=5), [Name('mswindows', Load(), lineno=899, col_offset=21), Str('errno and EINTR make no sense on windows', lineno=899, col_offset=32)], [], None, None, lineno=899, col_offset=5)], lineno=899, col_offset=4)], [], lineno=898, col_offset=0), ClassDef('CommandsWithSpaces', [Name('BaseTestCase', Load(), lineno=918, col_offset=26)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=920, col_offset=14)], None, None, []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=921, col_offset=8), [Name('CommandsWithSpaces', Load(), lineno=921, col_offset=14), Name('self', Load(), lineno=921, col_offset=34)], [], None, None, lineno=921, col_offset=8), 'setUp', Load(), lineno=921, col_offset=8), [], [], None, None, lineno=921, col_offset=8), lineno=921, col_offset=8), Assign([Tuple([Name('f', Store(), lineno=922, col_offset=8), Name('fname', Store(), lineno=922, col_offset=11)], Store(), lineno=922, col_offset=8)], Call(Name('mkstemp', Load(), lineno=922, col_offset=19), [Str('.py', lineno=922, col_offset=27), Str('te st', lineno=922, col_offset=34)], [], None, None, lineno=922, col_offset=19), lineno=922, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=923, col_offset=8), 'fname', Store(), lineno=923, col_offset=8)], Call(Attribute(Name('fname', Load(), lineno=923, col_offset=21), 'lower', Load(), lineno=923, col_offset=21), [], [], None, None, lineno=923, col_offset=21), lineno=923, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=924, col_offset=8), 'write', Load(), lineno=924, col_offset=8), [Name('f', Load(), lineno=924, col_offset=17), Str("import sys;sys.stdout.write('%d %s' % (len(sys.argv), [a.lower () for a in sys.argv]))", lineno=924, col_offset=20)], [], None, None, lineno=924, col_offset=8), lineno=924, col_offset=8), Expr(Call(Attribute(Name('os', Load(), lineno=927, col_offset=8), 'close', Load(), lineno=927, col_offset=8), [Name('f', Load(), lineno=927, col_offset=17)], [], None, None, lineno=927, col_offset=8), lineno=927, col_offset=8)], [], lineno=920, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=929, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('os', Load(), lineno=930, col_offset=8), 'remove', Load(), lineno=930, col_offset=8), [Attribute(Name('self', Load(), lineno=930, col_offset=18), 'fname', Load(), lineno=930, col_offset=18)], [], None, None, lineno=930, col_offset=8), lineno=930, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=931, col_offset=8), [Name('CommandsWithSpaces', Load(), lineno=931, col_offset=14), Name('self', Load(), lineno=931, col_offset=34)], [], None, None, lineno=931, col_offset=8), 'tearDown', Load(), lineno=931, col_offset=8), [], [], None, None, lineno=931, col_offset=8), lineno=931, col_offset=8)], [], lineno=929, col_offset=4), FunctionDef('with_spaces', arguments([Name('self', Param(), lineno=933, col_offset=20)], 'args', 'kwargs', []), [Assign([Subscript(Name('kwargs', Load(), lineno=934, col_offset=8), Index(Str('stdout', lineno=934, col_offset=15)), Store(), lineno=934, col_offset=8)], Attribute(Name('subprocess', Load(), lineno=934, col_offset=27), 'PIPE', Load(), lineno=934, col_offset=27), lineno=934, col_offset=8), Assign([Name('p', Store(), lineno=935, col_offset=8)], Call(Attribute(Name('subprocess', Load(), lineno=935, col_offset=12), 'Popen', Load(), lineno=935, col_offset=12), [], [], Name('args', Load(), lineno=935, col_offset=30), Name('kwargs', Load(), lineno=935, col_offset=38), lineno=935, col_offset=12), lineno=935, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=936, col_offset=8), 'addCleanup', Load(), lineno=936, col_offset=8), [Attribute(Attribute(Name('p', Load(), lineno=936, col_offset=24), 'stdout', Load(), lineno=936, col_offset=24), 'close', Load(), lineno=936, col_offset=24)], [], None, None, lineno=936, col_offset=8), lineno=936, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=937, col_offset=8), 'assertEqual', Load(), lineno=937, col_offset=8), [Call(Attribute(Call(Attribute(Attribute(Name('p', Load(), lineno=938, col_offset=10), 'stdout', Load(), lineno=938, col_offset=10), 'read', Load(), lineno=938, col_offset=10), [], [], None, None, lineno=938, col_offset=10), 'decode', Load(), lineno=938, col_offset=10), [Str('mbcs', lineno=938, col_offset=34)], [], None, None, lineno=938, col_offset=10), BinOp(Str("2 [%r, 'ab cd']", lineno=939, col_offset=10), Mod(), Attribute(Name('self', Load(), lineno=939, col_offset=30), 'fname', Load(), lineno=939, col_offset=30), lineno=939, col_offset=10)], [], None, None, lineno=937, col_offset=8), lineno=937, col_offset=8)], [], lineno=933, col_offset=4), FunctionDef('test_shell_string_with_spaces', arguments([Name('self', Param(), lineno=942, col_offset=38)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=944, col_offset=8), 'with_spaces', Load(), lineno=944, col_offset=8), [BinOp(Str('"%s" "%s" "%s"', lineno=944, col_offset=25), Mod(), Tuple([Attribute(Name('sys', Load(), lineno=944, col_offset=45), 'executable', Load(), lineno=944, col_offset=45), Attribute(Name('self', Load(), lineno=944, col_offset=61), 'fname', Load(), lineno=944, col_offset=61), Str('ab cd', lineno=945, col_offset=45)], Load(), lineno=944, col_offset=45), lineno=944, col_offset=25)], [keyword('shell', Num(1, lineno=945, col_offset=61))], None, None, lineno=944, col_offset=8), lineno=944, col_offset=8)], [], lineno=942, col_offset=4), FunctionDef('test_shell_sequence_with_spaces', arguments([Name('self', Param(), lineno=947, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=949, col_offset=8), 'with_spaces', Load(), lineno=949, col_offset=8), [List([Attribute(Name('sys', Load(), lineno=949, col_offset=26), 'executable', Load(), lineno=949, col_offset=26), Attribute(Name('self', Load(), lineno=949, col_offset=42), 'fname', Load(), lineno=949, col_offset=42), Str('ab cd', lineno=949, col_offset=54)], Load(), lineno=949, col_offset=25)], [keyword('shell', Num(1, lineno=949, col_offset=70))], None, None, lineno=949, col_offset=8), lineno=949, col_offset=8)], [], lineno=947, col_offset=4), FunctionDef('test_noshell_string_with_spaces', arguments([Name('self', Param(), lineno=951, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=953, col_offset=8), 'with_spaces', Load(), lineno=953, col_offset=8), [BinOp(Str('"%s" "%s" "%s"', lineno=953, col_offset=25), Mod(), Tuple([Attribute(Name('sys', Load(), lineno=953, col_offset=45), 'executable', Load(), lineno=953, col_offset=45), Attribute(Name('self', Load(), lineno=953, col_offset=61), 'fname', Load(), lineno=953, col_offset=61), Str('ab cd', lineno=954, col_offset=29)], Load(), lineno=953, col_offset=45), lineno=953, col_offset=25)], [], None, None, lineno=953, col_offset=8), lineno=953, col_offset=8)], [], lineno=951, col_offset=4), FunctionDef('test_noshell_sequence_with_spaces', arguments([Name('self', Param(), lineno=956, col_offset=42)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=958, col_offset=8), 'with_spaces', Load(), lineno=958, col_offset=8), [List([Attribute(Name('sys', Load(), lineno=958, col_offset=26), 'executable', Load(), lineno=958, col_offset=26), Attribute(Name('self', Load(), lineno=958, col_offset=42), 'fname', Load(), lineno=958, col_offset=42), Str('ab cd', lineno=958, col_offset=54)], Load(), lineno=958, col_offset=25)], [], None, None, lineno=958, col_offset=8), lineno=958, col_offset=8)], [], lineno=956, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=917, col_offset=1), 'skipUnless', Load(), lineno=917, col_offset=1), [Name('mswindows', Load(), lineno=917, col_offset=21), Str('mswindows only', lineno=917, col_offset=32)], [], None, None, lineno=917, col_offset=1)], lineno=917, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Name('unit_tests', Store(), lineno=961, col_offset=4)], Tuple([Name('ProcessTestCase', Load(), lineno=961, col_offset=18), Name('POSIXProcessTestCase', Load(), lineno=962, col_offset=18), Name('Win32ProcessTestCase', Load(), lineno=963, col_offset=18), Name('ProcessTestCaseNoPoll', Load(), lineno=964, col_offset=18), Name('HelperFunctionTests', Load(), lineno=965, col_offset=18), Name('CommandsWithSpaces', Load(), lineno=966, col_offset=18)], Load(), lineno=961, col_offset=18), lineno=961, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=968, col_offset=4), 'run_unittest', Load(), lineno=968, col_offset=4), [], [], Name('unit_tests', Load(), lineno=968, col_offset=31), None, lineno=968, col_offset=4), lineno=968, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=969, col_offset=4), 'reap_children', Load(), lineno=969, col_offset=4), [], [], None, None, lineno=969, col_offset=4), lineno=969, col_offset=4)], [], lineno=960, col_offset=0), If(Compare(Name('__name__', Load(), lineno=971, col_offset=3), [Eq()], [Str('__main__', lineno=971, col_offset=15)], lineno=971, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=972, col_offset=4), [], [], None, None, lineno=972, col_offset=4), lineno=972, col_offset=4)], [], lineno=971, col_offset=0)])
