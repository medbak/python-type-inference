Module([Expr(Str('Check for errs in the AST.\n\nThe Python parser does not catch all syntax errors.  Others, like\nassignments with invalid targets, are caught in the code generation\nphase.\n\nThe compiler package catches some errors in the transformer module.\nBut it seems clearer to write checkers that use the AST to detect\nerrors.\n', lineno=10, col_offset=-1), lineno=10, col_offset=-1), ImportFrom('compiler', [alias('ast', None), alias('walk', None)], 0, lineno=12, col_offset=0), FunctionDef('check', arguments([Name('tree', Param(), lineno=14, col_offset=10), Name('multi', Param(), lineno=14, col_offset=16)], None, None, [Name('None', Load(), lineno=14, col_offset=22)]), [Assign([Name('v', Store(), lineno=15, col_offset=4)], Call(Name('SyntaxErrorChecker', Load(), lineno=15, col_offset=8), [Name('multi', Load(), lineno=15, col_offset=27)], [], None, None, lineno=15, col_offset=8), lineno=15, col_offset=4), Expr(Call(Name('walk', Load(), lineno=16, col_offset=4), [Name('tree', Load(), lineno=16, col_offset=9), Name('v', Load(), lineno=16, col_offset=15)], [], None, None, lineno=16, col_offset=4), lineno=16, col_offset=4), Return(Attribute(Name('v', Load(), lineno=17, col_offset=11), 'errors', Load(), lineno=17, col_offset=11), lineno=17, col_offset=4)], [], lineno=14, col_offset=0), ClassDef('SyntaxErrorChecker', [], [Expr(Str('A visitor to find syntax errors in the AST.', lineno=20, col_offset=4), lineno=20, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=22, col_offset=17), Name('multi', Param(), lineno=22, col_offset=23)], None, None, [Name('None', Load(), lineno=22, col_offset=29)]), [Expr(Str('Create new visitor object.\n\n        If optional argument multi is not None, then print messages\n        for each error rather than raising a SyntaxError for the\n        first.\n        ', lineno=28, col_offset=-1), lineno=28, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=29, col_offset=8), 'multi', Store(), lineno=29, col_offset=8)], Name('multi', Load(), lineno=29, col_offset=21), lineno=29, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=30, col_offset=8), 'errors', Store(), lineno=30, col_offset=8)], Num(0, lineno=30, col_offset=22), lineno=30, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('error', arguments([Name('self', Param(), lineno=32, col_offset=14), Name('node', Param(), lineno=32, col_offset=20), Name('msg', Param(), lineno=32, col_offset=26)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'errors', Store(), lineno=33, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=33, col_offset=22), 'errors', Load(), lineno=33, col_offset=22), Add(), Num(1, lineno=33, col_offset=36), lineno=33, col_offset=22), lineno=33, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=34, col_offset=11), 'multi', Load(), lineno=34, col_offset=11), [IsNot()], [Name('None', Load(), lineno=34, col_offset=29)], lineno=34, col_offset=11), [Print(None, [BinOp(Str('%s:%s: %s', lineno=35, col_offset=18), Mod(), Tuple([Attribute(Name('node', Load(), lineno=35, col_offset=33), 'filename', Load(), lineno=35, col_offset=33), Attribute(Name('node', Load(), lineno=35, col_offset=48), 'lineno', Load(), lineno=35, col_offset=48), Name('msg', Load(), lineno=35, col_offset=61)], Load(), lineno=35, col_offset=33), lineno=35, col_offset=18)], True, lineno=35, col_offset=12)], [Raise(Name('SyntaxError', Load(), lineno=37, col_offset=18), BinOp(Str('%s (%s:%s)', lineno=37, col_offset=31), Mod(), Tuple([Name('msg', Load(), lineno=37, col_offset=47), Attribute(Name('node', Load(), lineno=37, col_offset=52), 'filename', Load(), lineno=37, col_offset=52), Attribute(Name('node', Load(), lineno=37, col_offset=67), 'lineno', Load(), lineno=37, col_offset=67)], Load(), lineno=37, col_offset=47), lineno=37, col_offset=31), None, lineno=37, col_offset=12)], lineno=34, col_offset=8)], [], lineno=32, col_offset=4), FunctionDef('visitAssign', arguments([Name('self', Param(), lineno=39, col_offset=20), Name('node', Param(), lineno=39, col_offset=26)], None, None, []), [Pass( lineno=41, col_offset=8)], [], lineno=39, col_offset=4)], [], lineno=19, col_offset=0)])
