Module([Expr(Str("A collection of string operations (most are no longer used).\n\nWarning: most of the code you see here isn't normally used nowadays.\nBeginning with Python 1.6, many of these functions are implemented as\nmethods on the standard string object. They used to be implemented by\na built-in module called strop, but strop is now obsolete itself.\n\nPublic module variables:\n\nwhitespace -- a string containing all characters considered whitespace\nlowercase -- a string containing all characters considered lowercase letters\nuppercase -- a string containing all characters considered uppercase letters\nletters -- a string containing all characters considered letters\ndigits -- a string containing all characters considered decimal digits\nhexdigits -- a string containing all characters considered hexadecimal digits\noctdigits -- a string containing all characters considered octal digits\npunctuation -- a string containing all characters considered punctuation\nprintable -- a string containing all characters considered printable\n\n", lineno=20, col_offset=-1), lineno=20, col_offset=-1), Assign([Name('whitespace', Store(), lineno=23, col_offset=0)], Str(' \t\n\r\x0b\x0c', lineno=23, col_offset=13), lineno=23, col_offset=0), Assign([Name('lowercase', Store(), lineno=24, col_offset=0)], Str('abcdefghijklmnopqrstuvwxyz', lineno=24, col_offset=12), lineno=24, col_offset=0), Assign([Name('uppercase', Store(), lineno=25, col_offset=0)], Str('ABCDEFGHIJKLMNOPQRSTUVWXYZ', lineno=25, col_offset=12), lineno=25, col_offset=0), Assign([Name('letters', Store(), lineno=26, col_offset=0)], BinOp(Name('lowercase', Load(), lineno=26, col_offset=10), Add(), Name('uppercase', Load(), lineno=26, col_offset=22), lineno=26, col_offset=10), lineno=26, col_offset=0), Assign([Name('ascii_lowercase', Store(), lineno=27, col_offset=0)], Name('lowercase', Load(), lineno=27, col_offset=18), lineno=27, col_offset=0), Assign([Name('ascii_uppercase', Store(), lineno=28, col_offset=0)], Name('uppercase', Load(), lineno=28, col_offset=18), lineno=28, col_offset=0), Assign([Name('ascii_letters', Store(), lineno=29, col_offset=0)], BinOp(Name('ascii_lowercase', Load(), lineno=29, col_offset=16), Add(), Name('ascii_uppercase', Load(), lineno=29, col_offset=34), lineno=29, col_offset=16), lineno=29, col_offset=0), Assign([Name('digits', Store(), lineno=30, col_offset=0)], Str('0123456789', lineno=30, col_offset=9), lineno=30, col_offset=0), Assign([Name('hexdigits', Store(), lineno=31, col_offset=0)], BinOp(BinOp(Name('digits', Load(), lineno=31, col_offset=12), Add(), Str('abcdef', lineno=31, col_offset=21), lineno=31, col_offset=12), Add(), Str('ABCDEF', lineno=31, col_offset=32), lineno=31, col_offset=30), lineno=31, col_offset=0), Assign([Name('octdigits', Store(), lineno=32, col_offset=0)], Str('01234567', lineno=32, col_offset=12), lineno=32, col_offset=0), Assign([Name('punctuation', Store(), lineno=33, col_offset=0)], Str('!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~', lineno=33, col_offset=14), lineno=33, col_offset=0), Assign([Name('printable', Store(), lineno=34, col_offset=0)], BinOp(BinOp(BinOp(Name('digits', Load(), lineno=34, col_offset=12), Add(), Name('letters', Load(), lineno=34, col_offset=21), lineno=34, col_offset=12), Add(), Name('punctuation', Load(), lineno=34, col_offset=31), lineno=34, col_offset=29), Add(), Name('whitespace', Load(), lineno=34, col_offset=45), lineno=34, col_offset=43), lineno=34, col_offset=0), Assign([Name('l', Store(), lineno=38, col_offset=0)], Call(Name('map', Load(), lineno=38, col_offset=4), [Name('chr', Load(), lineno=38, col_offset=8), Call(Name('xrange', Load(), lineno=38, col_offset=13), [Num(256, lineno=38, col_offset=20)], [], None, None, lineno=38, col_offset=13)], [], None, None, lineno=38, col_offset=4), lineno=38, col_offset=0), Assign([Name('_idmap', Store(), lineno=39, col_offset=0)], Call(Attribute(Call(Name('str', Load(), lineno=39, col_offset=9), [Str('', lineno=39, col_offset=13)], [], None, None, lineno=39, col_offset=9), 'join', Load(), lineno=39, col_offset=9), [Name('l', Load(), lineno=39, col_offset=22)], [], None, None, lineno=39, col_offset=9), lineno=39, col_offset=0), Delete([Name('l', Del(), lineno=40, col_offset=4)], lineno=40, col_offset=0), FunctionDef('capwords', arguments([Name('s', Param(), lineno=45, col_offset=13), Name('sep', Param(), lineno=45, col_offset=16)], None, None, [Name('None', Load(), lineno=45, col_offset=20)]), [Expr(Str('capwords(s [,sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join.  If the optional second argument sep is absent or None,\n    runs of whitespace characters are replaced by a single space\n    and leading and trailing whitespace are removed, otherwise\n    sep is used to split and join the words.\n\n    ', lineno=55, col_offset=-1), lineno=55, col_offset=-1), Return(Call(Attribute(BoolOp(Or(), [Name('sep', Load(), lineno=56, col_offset=12), Str(' ', lineno=56, col_offset=19)], lineno=56, col_offset=12), 'join', Load(), lineno=56, col_offset=12), [GeneratorExp(Call(Attribute(Name('x', Load(), lineno=56, col_offset=29), 'capitalize', Load(), lineno=56, col_offset=29), [], [], None, None, lineno=56, col_offset=29), [comprehension(Name('x', Store(), lineno=56, col_offset=48), Call(Attribute(Name('s', Load(), lineno=56, col_offset=53), 'split', Load(), lineno=56, col_offset=53), [Name('sep', Load(), lineno=56, col_offset=61)], [], None, None, lineno=56, col_offset=53), [])], lineno=56, col_offset=29)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=4)], [], lineno=45, col_offset=0), Assign([Name('_idmapL', Store(), lineno=60, col_offset=0)], Name('None', Load(), lineno=60, col_offset=10), lineno=60, col_offset=0), FunctionDef('maketrans', arguments([Name('fromstr', Param(), lineno=61, col_offset=14), Name('tostr', Param(), lineno=61, col_offset=23)], None, None, []), [Expr(Str('maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    ', lineno=68, col_offset=-1), lineno=68, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=69, col_offset=7), [Name('fromstr', Load(), lineno=69, col_offset=11)], [], None, None, lineno=69, col_offset=7), [NotEq()], [Call(Name('len', Load(), lineno=69, col_offset=23), [Name('tostr', Load(), lineno=69, col_offset=27)], [], None, None, lineno=69, col_offset=23)], lineno=69, col_offset=7), [Raise(Name('ValueError', Load(), lineno=70, col_offset=14), Str('maketrans arguments must have same length', lineno=70, col_offset=26), None, lineno=70, col_offset=8)], [], lineno=69, col_offset=4), Global(['_idmapL'], lineno=71, col_offset=4), If(UnaryOp(Not(), Name('_idmapL', Load(), lineno=72, col_offset=11), lineno=72, col_offset=7), [Assign([Name('_idmapL', Store(), lineno=73, col_offset=8)], Call(Name('list', Load(), lineno=73, col_offset=18), [Name('_idmap', Load(), lineno=73, col_offset=23)], [], None, None, lineno=73, col_offset=18), lineno=73, col_offset=8)], [], lineno=72, col_offset=4), Assign([Name('L', Store(), lineno=74, col_offset=4)], Subscript(Name('_idmapL', Load(), lineno=74, col_offset=8), Slice(None, None, None), Load(), lineno=74, col_offset=8), lineno=74, col_offset=4), Assign([Name('fromstr', Store(), lineno=75, col_offset=4)], Call(Name('map', Load(), lineno=75, col_offset=14), [Name('ord', Load(), lineno=75, col_offset=18), Name('fromstr', Load(), lineno=75, col_offset=23)], [], None, None, lineno=75, col_offset=14), lineno=75, col_offset=4), For(Name('i', Store(), lineno=76, col_offset=8), Call(Name('range', Load(), lineno=76, col_offset=13), [Call(Name('len', Load(), lineno=76, col_offset=19), [Name('fromstr', Load(), lineno=76, col_offset=23)], [], None, None, lineno=76, col_offset=19)], [], None, None, lineno=76, col_offset=13), [Assign([Subscript(Name('L', Load(), lineno=77, col_offset=8), Index(Subscript(Name('fromstr', Load(), lineno=77, col_offset=10), Index(Name('i', Load(), lineno=77, col_offset=18)), Load(), lineno=77, col_offset=10)), Store(), lineno=77, col_offset=8)], Subscript(Name('tostr', Load(), lineno=77, col_offset=24), Index(Name('i', Load(), lineno=77, col_offset=30)), Load(), lineno=77, col_offset=24), lineno=77, col_offset=8)], [], lineno=76, col_offset=4), Return(Call(Attribute(Str('', lineno=78, col_offset=11), 'join', Load(), lineno=78, col_offset=11), [Name('L', Load(), lineno=78, col_offset=19)], [], None, None, lineno=78, col_offset=11), lineno=78, col_offset=4)], [], lineno=61, col_offset=0), Import([alias('re', '_re')], lineno=83, col_offset=0), ClassDef('_multimap', [], [Expr(Str('Helper class for combining multiple mappings.\n\n    Used by .{safe_,}substitute() to combine the mapping and keyword\n    arguments.\n    ', lineno=90, col_offset=-1), lineno=90, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=91, col_offset=17), Name('primary', Param(), lineno=91, col_offset=23), Name('secondary', Param(), lineno=91, col_offset=32)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=92, col_offset=8), '_primary', Store(), lineno=92, col_offset=8)], Name('primary', Load(), lineno=92, col_offset=24), lineno=92, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=93, col_offset=8), '_secondary', Store(), lineno=93, col_offset=8)], Name('secondary', Load(), lineno=93, col_offset=26), lineno=93, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=95, col_offset=20), Name('key', Param(), lineno=95, col_offset=26)], None, None, []), [TryExcept([Return(Subscript(Attribute(Name('self', Load(), lineno=97, col_offset=19), '_primary', Load(), lineno=97, col_offset=19), Index(Name('key', Load(), lineno=97, col_offset=33)), Load(), lineno=97, col_offset=19), lineno=97, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=98, col_offset=15), None, [Return(Subscript(Attribute(Name('self', Load(), lineno=99, col_offset=19), '_secondary', Load(), lineno=99, col_offset=19), Index(Name('key', Load(), lineno=99, col_offset=35)), Load(), lineno=99, col_offset=19), lineno=99, col_offset=12)], lineno=98, col_offset=8)], [], lineno=96, col_offset=8)], [], lineno=95, col_offset=4)], [], lineno=85, col_offset=0), ClassDef('_TemplateMetaclass', [Name('type', Load(), lineno=102, col_offset=25)], [Assign([Name('pattern', Store(), lineno=103, col_offset=4)], Str('\n    %(delim)s(?:\n      (?P<escaped>%(delim)s) |   # Escape sequence of two delimiters\n      (?P<named>%(id)s)      |   # delimiter and a Python identifier\n      {(?P<braced>%(id)s)}   |   # delimiter and a braced identifier\n      (?P<invalid>)              # Other ill-formed delimiter exprs\n    )\n    ', lineno=110, col_offset=-1), lineno=103, col_offset=4), FunctionDef('__init__', arguments([Name('cls', Param(), lineno=112, col_offset=17), Name('name', Param(), lineno=112, col_offset=22), Name('bases', Param(), lineno=112, col_offset=28), Name('dct', Param(), lineno=112, col_offset=35)], None, None, []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=113, col_offset=8), [Name('_TemplateMetaclass', Load(), lineno=113, col_offset=14), Name('cls', Load(), lineno=113, col_offset=34)], [], None, None, lineno=113, col_offset=8), '__init__', Load(), lineno=113, col_offset=8), [Name('name', Load(), lineno=113, col_offset=48), Name('bases', Load(), lineno=113, col_offset=54), Name('dct', Load(), lineno=113, col_offset=61)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), If(Compare(Str('pattern', lineno=114, col_offset=11), [In()], [Name('dct', Load(), lineno=114, col_offset=24)], lineno=114, col_offset=11), [Assign([Name('pattern', Store(), lineno=115, col_offset=12)], Attribute(Name('cls', Load(), lineno=115, col_offset=22), 'pattern', Load(), lineno=115, col_offset=22), lineno=115, col_offset=12)], [Assign([Name('pattern', Store(), lineno=117, col_offset=12)], BinOp(Attribute(Name('_TemplateMetaclass', Load(), lineno=117, col_offset=22), 'pattern', Load(), lineno=117, col_offset=22), Mod(), Dict([Str('delim', lineno=118, col_offset=16), Str('id', lineno=119, col_offset=16)], [Call(Attribute(Name('_re', Load(), lineno=118, col_offset=26), 'escape', Load(), lineno=118, col_offset=26), [Attribute(Name('cls', Load(), lineno=118, col_offset=37), 'delimiter', Load(), lineno=118, col_offset=37)], [], None, None, lineno=118, col_offset=26), Attribute(Name('cls', Load(), lineno=119, col_offset=26), 'idpattern', Load(), lineno=119, col_offset=26)], lineno=117, col_offset=51), lineno=117, col_offset=22), lineno=117, col_offset=12)], lineno=114, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=121, col_offset=8), 'pattern', Store(), lineno=121, col_offset=8)], Call(Attribute(Name('_re', Load(), lineno=121, col_offset=22), 'compile', Load(), lineno=121, col_offset=22), [Name('pattern', Load(), lineno=121, col_offset=34), BinOp(Attribute(Name('_re', Load(), lineno=121, col_offset=43), 'IGNORECASE', Load(), lineno=121, col_offset=43), BitOr(), Attribute(Name('_re', Load(), lineno=121, col_offset=60), 'VERBOSE', Load(), lineno=121, col_offset=60), lineno=121, col_offset=43)], [], None, None, lineno=121, col_offset=22), lineno=121, col_offset=8)], [], lineno=112, col_offset=4)], [], lineno=102, col_offset=0), ClassDef('Template', [], [Expr(Str('A string class for supporting $-substitutions.', lineno=125, col_offset=4), lineno=125, col_offset=4), Assign([Name('__metaclass__', Store(), lineno=126, col_offset=4)], Name('_TemplateMetaclass', Load(), lineno=126, col_offset=20), lineno=126, col_offset=4), Assign([Name('delimiter', Store(), lineno=128, col_offset=4)], Str('$', lineno=128, col_offset=16), lineno=128, col_offset=4), Assign([Name('idpattern', Store(), lineno=129, col_offset=4)], Str('[_a-z][_a-z0-9]*', lineno=129, col_offset=16), lineno=129, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=131, col_offset=17), Name('template', Param(), lineno=131, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=132, col_offset=8), 'template', Store(), lineno=132, col_offset=8)], Name('template', Load(), lineno=132, col_offset=24), lineno=132, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('_invalid', arguments([Name('self', Param(), lineno=136, col_offset=17), Name('mo', Param(), lineno=136, col_offset=23)], None, None, []), [Assign([Name('i', Store(), lineno=137, col_offset=8)], Call(Attribute(Name('mo', Load(), lineno=137, col_offset=12), 'start', Load(), lineno=137, col_offset=12), [Str('invalid', lineno=137, col_offset=21)], [], None, None, lineno=137, col_offset=12), lineno=137, col_offset=8), Assign([Name('lines', Store(), lineno=138, col_offset=8)], Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=138, col_offset=16), 'template', Load(), lineno=138, col_offset=16), Slice(None, Name('i', Load(), lineno=138, col_offset=31), None), Load(), lineno=138, col_offset=16), 'splitlines', Load(), lineno=138, col_offset=16), [Name('True', Load(), lineno=138, col_offset=45)], [], None, None, lineno=138, col_offset=16), lineno=138, col_offset=8), If(UnaryOp(Not(), Name('lines', Load(), lineno=139, col_offset=15), lineno=139, col_offset=11), [Assign([Name('colno', Store(), lineno=140, col_offset=12)], Num(1, lineno=140, col_offset=20), lineno=140, col_offset=12), Assign([Name('lineno', Store(), lineno=141, col_offset=12)], Num(1, lineno=141, col_offset=21), lineno=141, col_offset=12)], [Assign([Name('colno', Store(), lineno=143, col_offset=12)], BinOp(Name('i', Load(), lineno=143, col_offset=20), Sub(), Call(Name('len', Load(), lineno=143, col_offset=24), [Call(Attribute(Str('', lineno=143, col_offset=28), 'join', Load(), lineno=143, col_offset=28), [Subscript(Name('lines', Load(), lineno=143, col_offset=36), Slice(None, Num(-1, lineno=143, col_offset=44), None), Load(), lineno=143, col_offset=36)], [], None, None, lineno=143, col_offset=28)], [], None, None, lineno=143, col_offset=24), lineno=143, col_offset=20), lineno=143, col_offset=12), Assign([Name('lineno', Store(), lineno=144, col_offset=12)], Call(Name('len', Load(), lineno=144, col_offset=21), [Name('lines', Load(), lineno=144, col_offset=25)], [], None, None, lineno=144, col_offset=21), lineno=144, col_offset=12)], lineno=139, col_offset=8), Raise(Call(Name('ValueError', Load(), lineno=145, col_offset=14), [BinOp(Str('Invalid placeholder in string: line %d, col %d', lineno=145, col_offset=25), Mod(), Tuple([Name('lineno', Load(), lineno=146, col_offset=26), Name('colno', Load(), lineno=146, col_offset=34)], Load(), lineno=146, col_offset=26), lineno=145, col_offset=25)], [], None, None, lineno=145, col_offset=14), None, None, lineno=145, col_offset=8)], [], lineno=136, col_offset=4), FunctionDef('substitute', arguments([Name('self', Param(), lineno=148, col_offset=19)], 'args', 'kws', []), [If(Compare(Call(Name('len', Load(), lineno=149, col_offset=11), [Name('args', Load(), lineno=149, col_offset=15)], [], None, None, lineno=149, col_offset=11), [Gt()], [Num(1, lineno=149, col_offset=23)], lineno=149, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=150, col_offset=18), [Str('Too many positional arguments', lineno=150, col_offset=28)], [], None, None, lineno=150, col_offset=18), None, None, lineno=150, col_offset=12)], [], lineno=149, col_offset=8), If(UnaryOp(Not(), Name('args', Load(), lineno=151, col_offset=15), lineno=151, col_offset=11), [Assign([Name('mapping', Store(), lineno=152, col_offset=12)], Name('kws', Load(), lineno=152, col_offset=22), lineno=152, col_offset=12)], [If(Name('kws', Load(), lineno=153, col_offset=13), [Assign([Name('mapping', Store(), lineno=154, col_offset=12)], Call(Name('_multimap', Load(), lineno=154, col_offset=22), [Name('kws', Load(), lineno=154, col_offset=32), Subscript(Name('args', Load(), lineno=154, col_offset=37), Index(Num(0, lineno=154, col_offset=42)), Load(), lineno=154, col_offset=37)], [], None, None, lineno=154, col_offset=22), lineno=154, col_offset=12)], [Assign([Name('mapping', Store(), lineno=156, col_offset=12)], Subscript(Name('args', Load(), lineno=156, col_offset=22), Index(Num(0, lineno=156, col_offset=27)), Load(), lineno=156, col_offset=22), lineno=156, col_offset=12)], lineno=153, col_offset=13)], lineno=151, col_offset=8), FunctionDef('convert', arguments([Name('mo', Param(), lineno=158, col_offset=20)], None, None, []), [Assign([Name('named', Store(), lineno=160, col_offset=12)], BoolOp(Or(), [Call(Attribute(Name('mo', Load(), lineno=160, col_offset=20), 'group', Load(), lineno=160, col_offset=20), [Str('named', lineno=160, col_offset=29)], [], None, None, lineno=160, col_offset=20), Call(Attribute(Name('mo', Load(), lineno=160, col_offset=41), 'group', Load(), lineno=160, col_offset=41), [Str('braced', lineno=160, col_offset=50)], [], None, None, lineno=160, col_offset=41)], lineno=160, col_offset=20), lineno=160, col_offset=12), If(Compare(Name('named', Load(), lineno=161, col_offset=15), [IsNot()], [Name('None', Load(), lineno=161, col_offset=28)], lineno=161, col_offset=15), [Assign([Name('val', Store(), lineno=162, col_offset=16)], Subscript(Name('mapping', Load(), lineno=162, col_offset=22), Index(Name('named', Load(), lineno=162, col_offset=30)), Load(), lineno=162, col_offset=22), lineno=162, col_offset=16), Return(BinOp(Str('%s', lineno=165, col_offset=23), Mod(), Tuple([Name('val', Load(), lineno=165, col_offset=31)], Load(), lineno=165, col_offset=31), lineno=165, col_offset=23), lineno=165, col_offset=16)], [], lineno=161, col_offset=12), If(Compare(Call(Attribute(Name('mo', Load(), lineno=166, col_offset=15), 'group', Load(), lineno=166, col_offset=15), [Str('escaped', lineno=166, col_offset=24)], [], None, None, lineno=166, col_offset=15), [IsNot()], [Name('None', Load(), lineno=166, col_offset=42)], lineno=166, col_offset=15), [Return(Attribute(Name('self', Load(), lineno=167, col_offset=23), 'delimiter', Load(), lineno=167, col_offset=23), lineno=167, col_offset=16)], [], lineno=166, col_offset=12), If(Compare(Call(Attribute(Name('mo', Load(), lineno=168, col_offset=15), 'group', Load(), lineno=168, col_offset=15), [Str('invalid', lineno=168, col_offset=24)], [], None, None, lineno=168, col_offset=15), [IsNot()], [Name('None', Load(), lineno=168, col_offset=42)], lineno=168, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=169, col_offset=16), '_invalid', Load(), lineno=169, col_offset=16), [Name('mo', Load(), lineno=169, col_offset=30)], [], None, None, lineno=169, col_offset=16), lineno=169, col_offset=16)], [], lineno=168, col_offset=12), Raise(Call(Name('ValueError', Load(), lineno=170, col_offset=18), [Str('Unrecognized named group in pattern', lineno=170, col_offset=29), Attribute(Name('self', Load(), lineno=171, col_offset=29), 'pattern', Load(), lineno=171, col_offset=29)], [], None, None, lineno=170, col_offset=18), None, None, lineno=170, col_offset=12)], [], lineno=158, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=172, col_offset=15), 'pattern', Load(), lineno=172, col_offset=15), 'sub', Load(), lineno=172, col_offset=15), [Name('convert', Load(), lineno=172, col_offset=32), Attribute(Name('self', Load(), lineno=172, col_offset=41), 'template', Load(), lineno=172, col_offset=41)], [], None, None, lineno=172, col_offset=15), lineno=172, col_offset=8)], [], lineno=148, col_offset=4), FunctionDef('safe_substitute', arguments([Name('self', Param(), lineno=174, col_offset=24)], 'args', 'kws', []), [If(Compare(Call(Name('len', Load(), lineno=175, col_offset=11), [Name('args', Load(), lineno=175, col_offset=15)], [], None, None, lineno=175, col_offset=11), [Gt()], [Num(1, lineno=175, col_offset=23)], lineno=175, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=176, col_offset=18), [Str('Too many positional arguments', lineno=176, col_offset=28)], [], None, None, lineno=176, col_offset=18), None, None, lineno=176, col_offset=12)], [], lineno=175, col_offset=8), If(UnaryOp(Not(), Name('args', Load(), lineno=177, col_offset=15), lineno=177, col_offset=11), [Assign([Name('mapping', Store(), lineno=178, col_offset=12)], Name('kws', Load(), lineno=178, col_offset=22), lineno=178, col_offset=12)], [If(Name('kws', Load(), lineno=179, col_offset=13), [Assign([Name('mapping', Store(), lineno=180, col_offset=12)], Call(Name('_multimap', Load(), lineno=180, col_offset=22), [Name('kws', Load(), lineno=180, col_offset=32), Subscript(Name('args', Load(), lineno=180, col_offset=37), Index(Num(0, lineno=180, col_offset=42)), Load(), lineno=180, col_offset=37)], [], None, None, lineno=180, col_offset=22), lineno=180, col_offset=12)], [Assign([Name('mapping', Store(), lineno=182, col_offset=12)], Subscript(Name('args', Load(), lineno=182, col_offset=22), Index(Num(0, lineno=182, col_offset=27)), Load(), lineno=182, col_offset=22), lineno=182, col_offset=12)], lineno=179, col_offset=13)], lineno=177, col_offset=8), FunctionDef('convert', arguments([Name('mo', Param(), lineno=184, col_offset=20)], None, None, []), [Assign([Name('named', Store(), lineno=185, col_offset=12)], Call(Attribute(Name('mo', Load(), lineno=185, col_offset=20), 'group', Load(), lineno=185, col_offset=20), [Str('named', lineno=185, col_offset=29)], [], None, None, lineno=185, col_offset=20), lineno=185, col_offset=12), If(Compare(Name('named', Load(), lineno=186, col_offset=15), [IsNot()], [Name('None', Load(), lineno=186, col_offset=28)], lineno=186, col_offset=15), [TryExcept([Return(BinOp(Str('%s', lineno=190, col_offset=27), Mod(), Tuple([Subscript(Name('mapping', Load(), lineno=190, col_offset=35), Index(Name('named', Load(), lineno=190, col_offset=43)), Load(), lineno=190, col_offset=35)], Load(), lineno=190, col_offset=35), lineno=190, col_offset=27), lineno=190, col_offset=20)], [ExceptHandler(Name('KeyError', Load(), lineno=191, col_offset=23), None, [Return(BinOp(Attribute(Name('self', Load(), lineno=192, col_offset=27), 'delimiter', Load(), lineno=192, col_offset=27), Add(), Name('named', Load(), lineno=192, col_offset=44), lineno=192, col_offset=27), lineno=192, col_offset=20)], lineno=191, col_offset=16)], [], lineno=187, col_offset=16)], [], lineno=186, col_offset=12), Assign([Name('braced', Store(), lineno=193, col_offset=12)], Call(Attribute(Name('mo', Load(), lineno=193, col_offset=21), 'group', Load(), lineno=193, col_offset=21), [Str('braced', lineno=193, col_offset=30)], [], None, None, lineno=193, col_offset=21), lineno=193, col_offset=12), If(Compare(Name('braced', Load(), lineno=194, col_offset=15), [IsNot()], [Name('None', Load(), lineno=194, col_offset=29)], lineno=194, col_offset=15), [TryExcept([Return(BinOp(Str('%s', lineno=196, col_offset=27), Mod(), Tuple([Subscript(Name('mapping', Load(), lineno=196, col_offset=35), Index(Name('braced', Load(), lineno=196, col_offset=43)), Load(), lineno=196, col_offset=35)], Load(), lineno=196, col_offset=35), lineno=196, col_offset=27), lineno=196, col_offset=20)], [ExceptHandler(Name('KeyError', Load(), lineno=197, col_offset=23), None, [Return(BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=198, col_offset=27), 'delimiter', Load(), lineno=198, col_offset=27), Add(), Str('{', lineno=198, col_offset=44), lineno=198, col_offset=27), Add(), Name('braced', Load(), lineno=198, col_offset=50), lineno=198, col_offset=48), Add(), Str('}', lineno=198, col_offset=59), lineno=198, col_offset=57), lineno=198, col_offset=20)], lineno=197, col_offset=16)], [], lineno=195, col_offset=16)], [], lineno=194, col_offset=12), If(Compare(Call(Attribute(Name('mo', Load(), lineno=199, col_offset=15), 'group', Load(), lineno=199, col_offset=15), [Str('escaped', lineno=199, col_offset=24)], [], None, None, lineno=199, col_offset=15), [IsNot()], [Name('None', Load(), lineno=199, col_offset=42)], lineno=199, col_offset=15), [Return(Attribute(Name('self', Load(), lineno=200, col_offset=23), 'delimiter', Load(), lineno=200, col_offset=23), lineno=200, col_offset=16)], [], lineno=199, col_offset=12), If(Compare(Call(Attribute(Name('mo', Load(), lineno=201, col_offset=15), 'group', Load(), lineno=201, col_offset=15), [Str('invalid', lineno=201, col_offset=24)], [], None, None, lineno=201, col_offset=15), [IsNot()], [Name('None', Load(), lineno=201, col_offset=42)], lineno=201, col_offset=15), [Return(Attribute(Name('self', Load(), lineno=202, col_offset=23), 'delimiter', Load(), lineno=202, col_offset=23), lineno=202, col_offset=16)], [], lineno=201, col_offset=12), Raise(Call(Name('ValueError', Load(), lineno=203, col_offset=18), [Str('Unrecognized named group in pattern', lineno=203, col_offset=29), Attribute(Name('self', Load(), lineno=204, col_offset=29), 'pattern', Load(), lineno=204, col_offset=29)], [], None, None, lineno=203, col_offset=18), None, None, lineno=203, col_offset=12)], [], lineno=184, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=205, col_offset=15), 'pattern', Load(), lineno=205, col_offset=15), 'sub', Load(), lineno=205, col_offset=15), [Name('convert', Load(), lineno=205, col_offset=32), Attribute(Name('self', Load(), lineno=205, col_offset=41), 'template', Load(), lineno=205, col_offset=41)], [], None, None, lineno=205, col_offset=15), lineno=205, col_offset=8)], [], lineno=174, col_offset=4)], [], lineno=124, col_offset=0), Assign([Name('index_error', Store(), lineno=214, col_offset=0)], Name('ValueError', Load(), lineno=214, col_offset=14), lineno=214, col_offset=0), Assign([Name('atoi_error', Store(), lineno=215, col_offset=0)], Name('ValueError', Load(), lineno=215, col_offset=13), lineno=215, col_offset=0), Assign([Name('atof_error', Store(), lineno=216, col_offset=0)], Name('ValueError', Load(), lineno=216, col_offset=13), lineno=216, col_offset=0), Assign([Name('atol_error', Store(), lineno=217, col_offset=0)], Name('ValueError', Load(), lineno=217, col_offset=13), lineno=217, col_offset=0), FunctionDef('lower', arguments([Name('s', Param(), lineno=220, col_offset=10)], None, None, []), [Expr(Str('lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    ', lineno=225, col_offset=-1), lineno=225, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=226, col_offset=11), 'lower', Load(), lineno=226, col_offset=11), [], [], None, None, lineno=226, col_offset=11), lineno=226, col_offset=4)], [], lineno=220, col_offset=0), FunctionDef('upper', arguments([Name('s', Param(), lineno=229, col_offset=10)], None, None, []), [Expr(Str('upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    ', lineno=234, col_offset=-1), lineno=234, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=235, col_offset=11), 'upper', Load(), lineno=235, col_offset=11), [], [], None, None, lineno=235, col_offset=11), lineno=235, col_offset=4)], [], lineno=229, col_offset=0), FunctionDef('swapcase', arguments([Name('s', Param(), lineno=238, col_offset=13)], None, None, []), [Expr(Str('swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    ', lineno=244, col_offset=-1), lineno=244, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=245, col_offset=11), 'swapcase', Load(), lineno=245, col_offset=11), [], [], None, None, lineno=245, col_offset=11), lineno=245, col_offset=4)], [], lineno=238, col_offset=0), FunctionDef('strip', arguments([Name('s', Param(), lineno=248, col_offset=10), Name('chars', Param(), lineno=248, col_offset=13)], None, None, [Name('None', Load(), lineno=248, col_offset=19)]), [Expr(Str('strip(s [,chars]) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n    If chars is unicode, S will be converted to unicode before stripping.\n\n    ', lineno=256, col_offset=-1), lineno=256, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=257, col_offset=11), 'strip', Load(), lineno=257, col_offset=11), [Name('chars', Load(), lineno=257, col_offset=19)], [], None, None, lineno=257, col_offset=11), lineno=257, col_offset=4)], [], lineno=248, col_offset=0), FunctionDef('lstrip', arguments([Name('s', Param(), lineno=260, col_offset=11), Name('chars', Param(), lineno=260, col_offset=14)], None, None, [Name('None', Load(), lineno=260, col_offset=20)]), [Expr(Str('lstrip(s [,chars]) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    ', lineno=266, col_offset=-1), lineno=266, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=267, col_offset=11), 'lstrip', Load(), lineno=267, col_offset=11), [Name('chars', Load(), lineno=267, col_offset=20)], [], None, None, lineno=267, col_offset=11), lineno=267, col_offset=4)], [], lineno=260, col_offset=0), FunctionDef('rstrip', arguments([Name('s', Param(), lineno=270, col_offset=11), Name('chars', Param(), lineno=270, col_offset=14)], None, None, [Name('None', Load(), lineno=270, col_offset=20)]), [Expr(Str('rstrip(s [,chars]) -> string\n\n    Return a copy of the string s with trailing whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    ', lineno=276, col_offset=-1), lineno=276, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=277, col_offset=11), 'rstrip', Load(), lineno=277, col_offset=11), [Name('chars', Load(), lineno=277, col_offset=20)], [], None, None, lineno=277, col_offset=11), lineno=277, col_offset=4)], [], lineno=270, col_offset=0), FunctionDef('split', arguments([Name('s', Param(), lineno=281, col_offset=10), Name('sep', Param(), lineno=281, col_offset=13), Name('maxsplit', Param(), lineno=281, col_offset=23)], None, None, [Name('None', Load(), lineno=281, col_offset=17), Num(-1, lineno=281, col_offset=33)]), [Expr(Str('split(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is given, splits at no more than\n    maxsplit places (resulting in at most maxsplit+1 words).  If sep\n    is not specified or is None, any whitespace string is a separator.\n\n    (split and splitfields are synonymous)\n\n    ', lineno=291, col_offset=-1), lineno=291, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=292, col_offset=11), 'split', Load(), lineno=292, col_offset=11), [Name('sep', Load(), lineno=292, col_offset=19), Name('maxsplit', Load(), lineno=292, col_offset=24)], [], None, None, lineno=292, col_offset=11), lineno=292, col_offset=4)], [], lineno=281, col_offset=0), Assign([Name('splitfields', Store(), lineno=293, col_offset=0)], Name('split', Load(), lineno=293, col_offset=14), lineno=293, col_offset=0), FunctionDef('rsplit', arguments([Name('s', Param(), lineno=296, col_offset=11), Name('sep', Param(), lineno=296, col_offset=14), Name('maxsplit', Param(), lineno=296, col_offset=24)], None, None, [Name('None', Load(), lineno=296, col_offset=18), Num(-1, lineno=296, col_offset=34)]), [Expr(Str('rsplit(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string, starting at the end of the string and working\n    to the front.  If maxsplit is given, at most maxsplit splits are\n    done. If sep is not specified or is None, any whitespace string\n    is a separator.\n    ', lineno=304, col_offset=-1), lineno=304, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=305, col_offset=11), 'rsplit', Load(), lineno=305, col_offset=11), [Name('sep', Load(), lineno=305, col_offset=20), Name('maxsplit', Load(), lineno=305, col_offset=25)], [], None, None, lineno=305, col_offset=11), lineno=305, col_offset=4)], [], lineno=296, col_offset=0), FunctionDef('join', arguments([Name('words', Param(), lineno=308, col_offset=9), Name('sep', Param(), lineno=308, col_offset=16)], None, None, [Str(' ', lineno=308, col_offset=22)]), [Expr(Str('join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    ', lineno=317, col_offset=-1), lineno=317, col_offset=-1), Return(Call(Attribute(Name('sep', Load(), lineno=318, col_offset=11), 'join', Load(), lineno=318, col_offset=11), [Name('words', Load(), lineno=318, col_offset=20)], [], None, None, lineno=318, col_offset=11), lineno=318, col_offset=4)], [], lineno=308, col_offset=0), Assign([Name('joinfields', Store(), lineno=319, col_offset=0)], Name('join', Load(), lineno=319, col_offset=13), lineno=319, col_offset=0), FunctionDef('index', arguments([Name('s', Param(), lineno=322, col_offset=10)], 'args', None, []), [Expr(Str('index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    ', lineno=327, col_offset=-1), lineno=327, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=328, col_offset=11), 'index', Load(), lineno=328, col_offset=11), [], [], Name('args', Load(), lineno=328, col_offset=20), None, lineno=328, col_offset=11), lineno=328, col_offset=4)], [], lineno=322, col_offset=0), FunctionDef('rindex', arguments([Name('s', Param(), lineno=331, col_offset=11)], 'args', None, []), [Expr(Str('rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    ', lineno=336, col_offset=-1), lineno=336, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=337, col_offset=11), 'rindex', Load(), lineno=337, col_offset=11), [], [], Name('args', Load(), lineno=337, col_offset=21), None, lineno=337, col_offset=11), lineno=337, col_offset=4)], [], lineno=331, col_offset=0), FunctionDef('count', arguments([Name('s', Param(), lineno=340, col_offset=10)], 'args', None, []), [Expr(Str('count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    ', lineno=347, col_offset=-1), lineno=347, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=348, col_offset=11), 'count', Load(), lineno=348, col_offset=11), [], [], Name('args', Load(), lineno=348, col_offset=20), None, lineno=348, col_offset=11), lineno=348, col_offset=4)], [], lineno=340, col_offset=0), FunctionDef('find', arguments([Name('s', Param(), lineno=351, col_offset=9)], 'args', None, []), [Expr(Str('find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    ', lineno=360, col_offset=-1), lineno=360, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=361, col_offset=11), 'find', Load(), lineno=361, col_offset=11), [], [], Name('args', Load(), lineno=361, col_offset=19), None, lineno=361, col_offset=11), lineno=361, col_offset=4)], [], lineno=351, col_offset=0), FunctionDef('rfind', arguments([Name('s', Param(), lineno=364, col_offset=10)], 'args', None, []), [Expr(Str('rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    ', lineno=373, col_offset=-1), lineno=373, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=374, col_offset=11), 'rfind', Load(), lineno=374, col_offset=11), [], [], Name('args', Load(), lineno=374, col_offset=20), None, lineno=374, col_offset=11), lineno=374, col_offset=4)], [], lineno=364, col_offset=0), Assign([Name('_float', Store(), lineno=377, col_offset=0)], Name('float', Load(), lineno=377, col_offset=9), lineno=377, col_offset=0), Assign([Name('_int', Store(), lineno=378, col_offset=0)], Name('int', Load(), lineno=378, col_offset=7), lineno=378, col_offset=0), Assign([Name('_long', Store(), lineno=379, col_offset=0)], Name('long', Load(), lineno=379, col_offset=8), lineno=379, col_offset=0), FunctionDef('atof', arguments([Name('s', Param(), lineno=382, col_offset=9)], None, None, []), [Expr(Str('atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    ', lineno=387, col_offset=-1), lineno=387, col_offset=-1), Return(Call(Name('_float', Load(), lineno=388, col_offset=11), [Name('s', Load(), lineno=388, col_offset=18)], [], None, None, lineno=388, col_offset=11), lineno=388, col_offset=4)], [], lineno=382, col_offset=0), FunctionDef('atoi', arguments([Name('s', Param(), lineno=392, col_offset=9), Name('base', Param(), lineno=392, col_offset=13)], None, None, [Num(10, lineno=392, col_offset=18)]), [Expr(Str('atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    ', lineno=402, col_offset=-1), lineno=402, col_offset=-1), Return(Call(Name('_int', Load(), lineno=403, col_offset=11), [Name('s', Load(), lineno=403, col_offset=16), Name('base', Load(), lineno=403, col_offset=19)], [], None, None, lineno=403, col_offset=11), lineno=403, col_offset=4)], [], lineno=392, col_offset=0), FunctionDef('atol', arguments([Name('s', Param(), lineno=407, col_offset=9), Name('base', Param(), lineno=407, col_offset=12)], None, None, [Num(10, lineno=407, col_offset=17)]), [Expr(Str('atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    ', lineno=418, col_offset=-1), lineno=418, col_offset=-1), Return(Call(Name('_long', Load(), lineno=419, col_offset=11), [Name('s', Load(), lineno=419, col_offset=17), Name('base', Load(), lineno=419, col_offset=20)], [], None, None, lineno=419, col_offset=11), lineno=419, col_offset=4)], [], lineno=407, col_offset=0), FunctionDef('ljust', arguments([Name('s', Param(), lineno=423, col_offset=10), Name('width', Param(), lineno=423, col_offset=13)], 'args', None, []), [Expr(Str('ljust(s, width[, fillchar]) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    ', lineno=430, col_offset=-1), lineno=430, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=431, col_offset=11), 'ljust', Load(), lineno=431, col_offset=11), [Name('width', Load(), lineno=431, col_offset=19)], [], Name('args', Load(), lineno=431, col_offset=27), None, lineno=431, col_offset=11), lineno=431, col_offset=4)], [], lineno=423, col_offset=0), FunctionDef('rjust', arguments([Name('s', Param(), lineno=434, col_offset=10), Name('width', Param(), lineno=434, col_offset=13)], 'args', None, []), [Expr(Str('rjust(s, width[, fillchar]) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    ', lineno=441, col_offset=-1), lineno=441, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=442, col_offset=11), 'rjust', Load(), lineno=442, col_offset=11), [Name('width', Load(), lineno=442, col_offset=19)], [], Name('args', Load(), lineno=442, col_offset=27), None, lineno=442, col_offset=11), lineno=442, col_offset=4)], [], lineno=434, col_offset=0), FunctionDef('center', arguments([Name('s', Param(), lineno=445, col_offset=11), Name('width', Param(), lineno=445, col_offset=14)], 'args', None, []), [Expr(Str('center(s, width[, fillchar]) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.  If specified the fillchar is used instead of spaces.\n\n    ', lineno=452, col_offset=-1), lineno=452, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=453, col_offset=11), 'center', Load(), lineno=453, col_offset=11), [Name('width', Load(), lineno=453, col_offset=20)], [], Name('args', Load(), lineno=453, col_offset=28), None, lineno=453, col_offset=11), lineno=453, col_offset=4)], [], lineno=445, col_offset=0), FunctionDef('zfill', arguments([Name('x', Param(), lineno=458, col_offset=10), Name('width', Param(), lineno=458, col_offset=13)], None, None, []), [Expr(Str('zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    ', lineno=464, col_offset=-1), lineno=464, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=465, col_offset=11), [Name('x', Load(), lineno=465, col_offset=22), Name('basestring', Load(), lineno=465, col_offset=25)], [], None, None, lineno=465, col_offset=11), lineno=465, col_offset=7), [Assign([Name('x', Store(), lineno=466, col_offset=8)], Call(Name('repr', Load(), lineno=466, col_offset=12), [Name('x', Load(), lineno=466, col_offset=17)], [], None, None, lineno=466, col_offset=12), lineno=466, col_offset=8)], [], lineno=465, col_offset=4), Return(Call(Attribute(Name('x', Load(), lineno=467, col_offset=11), 'zfill', Load(), lineno=467, col_offset=11), [Name('width', Load(), lineno=467, col_offset=19)], [], None, None, lineno=467, col_offset=11), lineno=467, col_offset=4)], [], lineno=458, col_offset=0), FunctionDef('expandtabs', arguments([Name('s', Param(), lineno=471, col_offset=15), Name('tabsize', Param(), lineno=471, col_offset=18)], None, None, [Num(8, lineno=471, col_offset=26)]), [Expr(Str('expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    ', lineno=478, col_offset=-1), lineno=478, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=479, col_offset=11), 'expandtabs', Load(), lineno=479, col_offset=11), [Name('tabsize', Load(), lineno=479, col_offset=24)], [], None, None, lineno=479, col_offset=11), lineno=479, col_offset=4)], [], lineno=471, col_offset=0), FunctionDef('translate', arguments([Name('s', Param(), lineno=482, col_offset=14), Name('table', Param(), lineno=482, col_offset=17), Name('deletions', Param(), lineno=482, col_offset=24)], None, None, [Str('', lineno=482, col_offset=34)]), [Expr(Str('translate(s,table [,deletions]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletions are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.  The\n    deletions argument is not allowed for Unicode strings.\n\n    ', lineno=491, col_offset=-1), lineno=491, col_offset=-1), If(BoolOp(Or(), [Name('deletions', Load(), lineno=492, col_offset=7), Compare(Name('table', Load(), lineno=492, col_offset=20), [Is()], [Name('None', Load(), lineno=492, col_offset=29)], lineno=492, col_offset=20)], lineno=492, col_offset=7), [Return(Call(Attribute(Name('s', Load(), lineno=493, col_offset=15), 'translate', Load(), lineno=493, col_offset=15), [Name('table', Load(), lineno=493, col_offset=27), Name('deletions', Load(), lineno=493, col_offset=34)], [], None, None, lineno=493, col_offset=15), lineno=493, col_offset=8)], [Return(Call(Attribute(Name('s', Load(), lineno=498, col_offset=15), 'translate', Load(), lineno=498, col_offset=15), [BinOp(Name('table', Load(), lineno=498, col_offset=27), Add(), Subscript(Name('s', Load(), lineno=498, col_offset=35), Slice(None, Num(0, lineno=498, col_offset=38), None), Load(), lineno=498, col_offset=35), lineno=498, col_offset=27)], [], None, None, lineno=498, col_offset=15), lineno=498, col_offset=8)], lineno=492, col_offset=4)], [], lineno=482, col_offset=0), FunctionDef('capitalize', arguments([Name('s', Param(), lineno=501, col_offset=15)], None, None, []), [Expr(Str('capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    ', lineno=507, col_offset=-1), lineno=507, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=508, col_offset=11), 'capitalize', Load(), lineno=508, col_offset=11), [], [], None, None, lineno=508, col_offset=11), lineno=508, col_offset=4)], [], lineno=501, col_offset=0), FunctionDef('replace', arguments([Name('s', Param(), lineno=511, col_offset=12), Name('old', Param(), lineno=511, col_offset=15), Name('new', Param(), lineno=511, col_offset=20), Name('maxreplace', Param(), lineno=511, col_offset=25)], None, None, [Num(-1, lineno=511, col_offset=37)]), [Expr(Str('replace (str, old, new[, maxreplace]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxreplace is\n    given, only the first maxreplace occurrences are replaced.\n\n    ', lineno=518, col_offset=-1), lineno=518, col_offset=-1), Return(Call(Attribute(Name('s', Load(), lineno=519, col_offset=11), 'replace', Load(), lineno=519, col_offset=11), [Name('old', Load(), lineno=519, col_offset=21), Name('new', Load(), lineno=519, col_offset=26), Name('maxreplace', Load(), lineno=519, col_offset=31)], [], None, None, lineno=519, col_offset=11), lineno=519, col_offset=4)], [], lineno=511, col_offset=0), TryExcept([ImportFrom('strop', [alias('maketrans', None), alias('lowercase', None), alias('uppercase', None), alias('whitespace', None)], 0, lineno=528, col_offset=4), Assign([Name('letters', Store(), lineno=529, col_offset=4)], BinOp(Name('lowercase', Load(), lineno=529, col_offset=14), Add(), Name('uppercase', Load(), lineno=529, col_offset=26), lineno=529, col_offset=14), lineno=529, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=530, col_offset=7), None, [Pass( lineno=531, col_offset=4)], lineno=530, col_offset=0)], [], lineno=527, col_offset=0), ClassDef('Formatter', [Name('object', Load(), lineno=543, col_offset=16)], [FunctionDef('format', arguments([Name('self', Param(), lineno=544, col_offset=15), Name('format_string', Param(), lineno=544, col_offset=21)], 'args', 'kwargs', []), [Return(Call(Attribute(Name('self', Load(), lineno=545, col_offset=15), 'vformat', Load(), lineno=545, col_offset=15), [Name('format_string', Load(), lineno=545, col_offset=28), Name('args', Load(), lineno=545, col_offset=43), Name('kwargs', Load(), lineno=545, col_offset=49)], [], None, None, lineno=545, col_offset=15), lineno=545, col_offset=8)], [], lineno=544, col_offset=4), FunctionDef('vformat', arguments([Name('self', Param(), lineno=547, col_offset=16), Name('format_string', Param(), lineno=547, col_offset=22), Name('args', Param(), lineno=547, col_offset=37), Name('kwargs', Param(), lineno=547, col_offset=43)], None, None, []), [Assign([Name('used_args', Store(), lineno=548, col_offset=8)], Call(Name('set', Load(), lineno=548, col_offset=20), [], [], None, None, lineno=548, col_offset=20), lineno=548, col_offset=8), Assign([Name('result', Store(), lineno=549, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=549, col_offset=17), '_vformat', Load(), lineno=549, col_offset=17), [Name('format_string', Load(), lineno=549, col_offset=31), Name('args', Load(), lineno=549, col_offset=46), Name('kwargs', Load(), lineno=549, col_offset=52), Name('used_args', Load(), lineno=549, col_offset=60), Num(2, lineno=549, col_offset=71)], [], None, None, lineno=549, col_offset=17), lineno=549, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=550, col_offset=8), 'check_unused_args', Load(), lineno=550, col_offset=8), [Name('used_args', Load(), lineno=550, col_offset=31), Name('args', Load(), lineno=550, col_offset=42), Name('kwargs', Load(), lineno=550, col_offset=48)], [], None, None, lineno=550, col_offset=8), lineno=550, col_offset=8), Return(Name('result', Load(), lineno=551, col_offset=15), lineno=551, col_offset=8)], [], lineno=547, col_offset=4), FunctionDef('_vformat', arguments([Name('self', Param(), lineno=553, col_offset=17), Name('format_string', Param(), lineno=553, col_offset=23), Name('args', Param(), lineno=553, col_offset=38), Name('kwargs', Param(), lineno=553, col_offset=44), Name('used_args', Param(), lineno=553, col_offset=52), Name('recursion_depth', Param(), lineno=553, col_offset=63)], None, None, []), [If(Compare(Name('recursion_depth', Load(), lineno=554, col_offset=11), [Lt()], [Num(0, lineno=554, col_offset=29)], lineno=554, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=555, col_offset=18), [Str('Max string recursion exceeded', lineno=555, col_offset=29)], [], None, None, lineno=555, col_offset=18), None, None, lineno=555, col_offset=12)], [], lineno=554, col_offset=8), Assign([Name('result', Store(), lineno=556, col_offset=8)], List([], Load(), lineno=556, col_offset=17), lineno=556, col_offset=8), For(Tuple([Name('literal_text', Store(), lineno=557, col_offset=12), Name('field_name', Store(), lineno=557, col_offset=26), Name('format_spec', Store(), lineno=557, col_offset=38), Name('conversion', Store(), lineno=557, col_offset=51)], Store(), lineno=557, col_offset=12), Call(Attribute(Name('self', Load(), lineno=558, col_offset=16), 'parse', Load(), lineno=558, col_offset=16), [Name('format_string', Load(), lineno=558, col_offset=27)], [], None, None, lineno=558, col_offset=16), [If(Name('literal_text', Load(), lineno=561, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=562, col_offset=16), 'append', Load(), lineno=562, col_offset=16), [Name('literal_text', Load(), lineno=562, col_offset=30)], [], None, None, lineno=562, col_offset=16), lineno=562, col_offset=16)], [], lineno=561, col_offset=12), If(Compare(Name('field_name', Load(), lineno=565, col_offset=15), [IsNot()], [Name('None', Load(), lineno=565, col_offset=33)], lineno=565, col_offset=15), [Assign([Tuple([Name('obj', Store(), lineno=571, col_offset=16), Name('arg_used', Store(), lineno=571, col_offset=21)], Store(), lineno=571, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=571, col_offset=32), 'get_field', Load(), lineno=571, col_offset=32), [Name('field_name', Load(), lineno=571, col_offset=47), Name('args', Load(), lineno=571, col_offset=59), Name('kwargs', Load(), lineno=571, col_offset=65)], [], None, None, lineno=571, col_offset=32), lineno=571, col_offset=16), Expr(Call(Attribute(Name('used_args', Load(), lineno=572, col_offset=16), 'add', Load(), lineno=572, col_offset=16), [Name('arg_used', Load(), lineno=572, col_offset=30)], [], None, None, lineno=572, col_offset=16), lineno=572, col_offset=16), Assign([Name('obj', Store(), lineno=575, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=575, col_offset=22), 'convert_field', Load(), lineno=575, col_offset=22), [Name('obj', Load(), lineno=575, col_offset=41), Name('conversion', Load(), lineno=575, col_offset=46)], [], None, None, lineno=575, col_offset=22), lineno=575, col_offset=16), Assign([Name('format_spec', Store(), lineno=578, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=578, col_offset=30), '_vformat', Load(), lineno=578, col_offset=30), [Name('format_spec', Load(), lineno=578, col_offset=44), Name('args', Load(), lineno=578, col_offset=57), Name('kwargs', Load(), lineno=578, col_offset=63), Name('used_args', Load(), lineno=579, col_offset=44), BinOp(Name('recursion_depth', Load(), lineno=579, col_offset=55), Sub(), Num(1, lineno=579, col_offset=71), lineno=579, col_offset=55)], [], None, None, lineno=578, col_offset=30), lineno=578, col_offset=16), Expr(Call(Attribute(Name('result', Load(), lineno=582, col_offset=16), 'append', Load(), lineno=582, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=582, col_offset=30), 'format_field', Load(), lineno=582, col_offset=30), [Name('obj', Load(), lineno=582, col_offset=48), Name('format_spec', Load(), lineno=582, col_offset=53)], [], None, None, lineno=582, col_offset=30)], [], None, None, lineno=582, col_offset=16), lineno=582, col_offset=16)], [], lineno=565, col_offset=12)], [], lineno=557, col_offset=8), Return(Call(Attribute(Str('', lineno=584, col_offset=15), 'join', Load(), lineno=584, col_offset=15), [Name('result', Load(), lineno=584, col_offset=23)], [], None, None, lineno=584, col_offset=15), lineno=584, col_offset=8)], [], lineno=553, col_offset=4), FunctionDef('get_value', arguments([Name('self', Param(), lineno=587, col_offset=18), Name('key', Param(), lineno=587, col_offset=24), Name('args', Param(), lineno=587, col_offset=29), Name('kwargs', Param(), lineno=587, col_offset=35)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=588, col_offset=11), [Name('key', Load(), lineno=588, col_offset=22), Tuple([Name('int', Load(), lineno=588, col_offset=28), Name('long', Load(), lineno=588, col_offset=33)], Load(), lineno=588, col_offset=28)], [], None, None, lineno=588, col_offset=11), [Return(Subscript(Name('args', Load(), lineno=589, col_offset=19), Index(Name('key', Load(), lineno=589, col_offset=24)), Load(), lineno=589, col_offset=19), lineno=589, col_offset=12)], [Return(Subscript(Name('kwargs', Load(), lineno=591, col_offset=19), Index(Name('key', Load(), lineno=591, col_offset=26)), Load(), lineno=591, col_offset=19), lineno=591, col_offset=12)], lineno=588, col_offset=8)], [], lineno=587, col_offset=4), FunctionDef('check_unused_args', arguments([Name('self', Param(), lineno=594, col_offset=26), Name('used_args', Param(), lineno=594, col_offset=32), Name('args', Param(), lineno=594, col_offset=43), Name('kwargs', Param(), lineno=594, col_offset=49)], None, None, []), [Pass( lineno=595, col_offset=8)], [], lineno=594, col_offset=4), FunctionDef('format_field', arguments([Name('self', Param(), lineno=598, col_offset=21), Name('value', Param(), lineno=598, col_offset=27), Name('format_spec', Param(), lineno=598, col_offset=34)], None, None, []), [Return(Call(Name('format', Load(), lineno=599, col_offset=15), [Name('value', Load(), lineno=599, col_offset=22), Name('format_spec', Load(), lineno=599, col_offset=29)], [], None, None, lineno=599, col_offset=15), lineno=599, col_offset=8)], [], lineno=598, col_offset=4), FunctionDef('convert_field', arguments([Name('self', Param(), lineno=602, col_offset=22), Name('value', Param(), lineno=602, col_offset=28), Name('conversion', Param(), lineno=602, col_offset=35)], None, None, []), [If(Compare(Name('conversion', Load(), lineno=604, col_offset=11), [Eq()], [Str('r', lineno=604, col_offset=25)], lineno=604, col_offset=11), [Return(Call(Name('repr', Load(), lineno=605, col_offset=19), [Name('value', Load(), lineno=605, col_offset=24)], [], None, None, lineno=605, col_offset=19), lineno=605, col_offset=12)], [If(Compare(Name('conversion', Load(), lineno=606, col_offset=13), [Eq()], [Str('s', lineno=606, col_offset=27)], lineno=606, col_offset=13), [Return(Call(Name('str', Load(), lineno=607, col_offset=19), [Name('value', Load(), lineno=607, col_offset=23)], [], None, None, lineno=607, col_offset=19), lineno=607, col_offset=12)], [If(Compare(Name('conversion', Load(), lineno=608, col_offset=13), [Is()], [Name('None', Load(), lineno=608, col_offset=27)], lineno=608, col_offset=13), [Return(Name('value', Load(), lineno=609, col_offset=19), lineno=609, col_offset=12)], [], lineno=608, col_offset=13)], lineno=606, col_offset=13)], lineno=604, col_offset=8), Raise(Call(Name('ValueError', Load(), lineno=610, col_offset=14), [Call(Attribute(Str('Unknown conversion specifier {0!s}', lineno=610, col_offset=25), 'format', Load(), lineno=610, col_offset=25), [Name('conversion', Load(), lineno=610, col_offset=69)], [], None, None, lineno=610, col_offset=25)], [], None, None, lineno=610, col_offset=14), None, None, lineno=610, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('parse', arguments([Name('self', Param(), lineno=620, col_offset=14), Name('format_string', Param(), lineno=620, col_offset=20)], None, None, []), [Return(Call(Attribute(Name('format_string', Load(), lineno=621, col_offset=15), '_formatter_parser', Load(), lineno=621, col_offset=15), [], [], None, None, lineno=621, col_offset=15), lineno=621, col_offset=8)], [], lineno=620, col_offset=4), FunctionDef('get_field', arguments([Name('self', Param(), lineno=629, col_offset=18), Name('field_name', Param(), lineno=629, col_offset=24), Name('args', Param(), lineno=629, col_offset=36), Name('kwargs', Param(), lineno=629, col_offset=42)], None, None, []), [Assign([Tuple([Name('first', Store(), lineno=630, col_offset=8), Name('rest', Store(), lineno=630, col_offset=15)], Store(), lineno=630, col_offset=8)], Call(Attribute(Name('field_name', Load(), lineno=630, col_offset=22), '_formatter_field_name_split', Load(), lineno=630, col_offset=22), [], [], None, None, lineno=630, col_offset=22), lineno=630, col_offset=8), Assign([Name('obj', Store(), lineno=632, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=632, col_offset=14), 'get_value', Load(), lineno=632, col_offset=14), [Name('first', Load(), lineno=632, col_offset=29), Name('args', Load(), lineno=632, col_offset=36), Name('kwargs', Load(), lineno=632, col_offset=42)], [], None, None, lineno=632, col_offset=14), lineno=632, col_offset=8), For(Tuple([Name('is_attr', Store(), lineno=636, col_offset=12), Name('i', Store(), lineno=636, col_offset=21)], Store(), lineno=636, col_offset=12), Name('rest', Load(), lineno=636, col_offset=26), [If(Name('is_attr', Load(), lineno=637, col_offset=15), [Assign([Name('obj', Store(), lineno=638, col_offset=16)], Call(Name('getattr', Load(), lineno=638, col_offset=22), [Name('obj', Load(), lineno=638, col_offset=30), Name('i', Load(), lineno=638, col_offset=35)], [], None, None, lineno=638, col_offset=22), lineno=638, col_offset=16)], [Assign([Name('obj', Store(), lineno=640, col_offset=16)], Subscript(Name('obj', Load(), lineno=640, col_offset=22), Index(Name('i', Load(), lineno=640, col_offset=26)), Load(), lineno=640, col_offset=22), lineno=640, col_offset=16)], lineno=637, col_offset=12)], [], lineno=636, col_offset=8), Return(Tuple([Name('obj', Load(), lineno=642, col_offset=15), Name('first', Load(), lineno=642, col_offset=20)], Load(), lineno=642, col_offset=15), lineno=642, col_offset=8)], [], lineno=629, col_offset=4)], [], lineno=543, col_offset=0)])
