Module([Expr(Str("      turtle-example-suite:\n\n             tdemo_tree.py\n\nDisplays a 'breadth-first-tree' - in contrast\nto the classical Logo tree drawing programs,\nwhich use a depth-first-algorithm.\n\nUses:\n(1) a tree-generator, where the drawing is\nquasi the side-effect, whereas the generator\nalways yields None.\n(2) Turtle-cloning: At each branching point the\ncurrent pen is cloned. So in the end there\nare 1024 turtles.\n", lineno=17, col_offset=-1), lineno=17, col_offset=-1), ImportFrom('turtle', [alias('Turtle', None), alias('mainloop', None)], 0, lineno=18, col_offset=0), ImportFrom('time', [alias('clock', None)], 0, lineno=19, col_offset=0), FunctionDef('tree', arguments([Name('plist', Param(), lineno=21, col_offset=9), Name('l', Param(), lineno=21, col_offset=16), Name('a', Param(), lineno=21, col_offset=19), Name('f', Param(), lineno=21, col_offset=22)], None, None, []), [Expr(Str(' plist is list of pens\n    l is length of branch\n    a is half of the angle between 2 branches\n    f is factor by which branch is shortened\n    from level to level.', lineno=26, col_offset=-1), lineno=26, col_offset=-1), If(Compare(Name('l', Load(), lineno=27, col_offset=7), [Gt()], [Num(3, lineno=27, col_offset=11)], lineno=27, col_offset=7), [Assign([Name('lst', Store(), lineno=28, col_offset=8)], List([], Load(), lineno=28, col_offset=14), lineno=28, col_offset=8), For(Name('p', Store(), lineno=29, col_offset=12), Name('plist', Load(), lineno=29, col_offset=17), [Expr(Call(Attribute(Name('p', Load(), lineno=30, col_offset=12), 'forward', Load(), lineno=30, col_offset=12), [Name('l', Load(), lineno=30, col_offset=22)], [], None, None, lineno=30, col_offset=12), lineno=30, col_offset=12), Assign([Name('q', Store(), lineno=31, col_offset=12)], Call(Attribute(Name('p', Load(), lineno=31, col_offset=16), 'clone', Load(), lineno=31, col_offset=16), [], [], None, None, lineno=31, col_offset=16), lineno=31, col_offset=12), Expr(Call(Attribute(Name('p', Load(), lineno=32, col_offset=12), 'left', Load(), lineno=32, col_offset=12), [Name('a', Load(), lineno=32, col_offset=19)], [], None, None, lineno=32, col_offset=12), lineno=32, col_offset=12), Expr(Call(Attribute(Name('q', Load(), lineno=33, col_offset=12), 'right', Load(), lineno=33, col_offset=12), [Name('a', Load(), lineno=33, col_offset=20)], [], None, None, lineno=33, col_offset=12), lineno=33, col_offset=12), Expr(Call(Attribute(Name('lst', Load(), lineno=34, col_offset=12), 'append', Load(), lineno=34, col_offset=12), [Name('p', Load(), lineno=34, col_offset=23)], [], None, None, lineno=34, col_offset=12), lineno=34, col_offset=12), Expr(Call(Attribute(Name('lst', Load(), lineno=35, col_offset=12), 'append', Load(), lineno=35, col_offset=12), [Name('q', Load(), lineno=35, col_offset=23)], [], None, None, lineno=35, col_offset=12), lineno=35, col_offset=12)], [], lineno=29, col_offset=8), For(Name('x', Store(), lineno=36, col_offset=12), Call(Name('tree', Load(), lineno=36, col_offset=17), [Name('lst', Load(), lineno=36, col_offset=22), BinOp(Name('l', Load(), lineno=36, col_offset=27), Mult(), Name('f', Load(), lineno=36, col_offset=29), lineno=36, col_offset=27), Name('a', Load(), lineno=36, col_offset=32), Name('f', Load(), lineno=36, col_offset=35)], [], None, None, lineno=36, col_offset=17), [Expr(Yield(Name('None', Load(), lineno=37, col_offset=18), lineno=37, col_offset=12), lineno=37, col_offset=12)], [], lineno=36, col_offset=8)], [], lineno=27, col_offset=4)], [], lineno=21, col_offset=0), FunctionDef('maketree', arguments([], None, None, []), [Assign([Name('p', Store(), lineno=40, col_offset=4)], Call(Name('Turtle', Load(), lineno=40, col_offset=8), [], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=41, col_offset=4), 'setundobuffer', Load(), lineno=41, col_offset=4), [Name('None', Load(), lineno=41, col_offset=20)], [], None, None, lineno=41, col_offset=4), lineno=41, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=42, col_offset=4), 'hideturtle', Load(), lineno=42, col_offset=4), [], [], None, None, lineno=42, col_offset=4), lineno=42, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=43, col_offset=4), 'speed', Load(), lineno=43, col_offset=4), [Num(0, lineno=43, col_offset=12)], [], None, None, lineno=43, col_offset=4), lineno=43, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=44, col_offset=4), 'tracer', Load(), lineno=44, col_offset=4), [Num(30, lineno=44, col_offset=13), Num(0, lineno=44, col_offset=16)], [], None, None, lineno=44, col_offset=4), lineno=44, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=45, col_offset=4), 'left', Load(), lineno=45, col_offset=4), [Num(90, lineno=45, col_offset=11)], [], None, None, lineno=45, col_offset=4), lineno=45, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=46, col_offset=4), 'penup', Load(), lineno=46, col_offset=4), [], [], None, None, lineno=46, col_offset=4), lineno=46, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=47, col_offset=4), 'forward', Load(), lineno=47, col_offset=4), [Num(-210, lineno=47, col_offset=15)], [], None, None, lineno=47, col_offset=4), lineno=47, col_offset=4), Expr(Call(Attribute(Name('p', Load(), lineno=48, col_offset=4), 'pendown', Load(), lineno=48, col_offset=4), [], [], None, None, lineno=48, col_offset=4), lineno=48, col_offset=4), Assign([Name('t', Store(), lineno=49, col_offset=4)], Call(Name('tree', Load(), lineno=49, col_offset=8), [List([Name('p', Load(), lineno=49, col_offset=14)], Load(), lineno=49, col_offset=13), Num(200, lineno=49, col_offset=18), Num(65, lineno=49, col_offset=23), Num(0.6375, lineno=49, col_offset=27)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=4), For(Name('x', Store(), lineno=50, col_offset=8), Name('t', Load(), lineno=50, col_offset=13), [Pass( lineno=51, col_offset=8)], [], lineno=50, col_offset=4), Print(None, [Call(Name('len', Load(), lineno=52, col_offset=10), [Call(Attribute(Call(Attribute(Name('p', Load(), lineno=52, col_offset=14), 'getscreen', Load(), lineno=52, col_offset=14), [], [], None, None, lineno=52, col_offset=14), 'turtles', Load(), lineno=52, col_offset=14), [], [], None, None, lineno=52, col_offset=14)], [], None, None, lineno=52, col_offset=10)], True, lineno=52, col_offset=4)], [], lineno=39, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Assign([Name('a', Store(), lineno=55, col_offset=4)], Call(Name('clock', Load(), lineno=55, col_offset=6), [], [], None, None, lineno=55, col_offset=6), lineno=55, col_offset=4), Expr(Call(Name('maketree', Load(), lineno=56, col_offset=4), [], [], None, None, lineno=56, col_offset=4), lineno=56, col_offset=4), Assign([Name('b', Store(), lineno=57, col_offset=4)], Call(Name('clock', Load(), lineno=57, col_offset=6), [], [], None, None, lineno=57, col_offset=6), lineno=57, col_offset=4), Return(BinOp(Str('done: %.2f sec.', lineno=58, col_offset=11), Mod(), BinOp(Name('b', Load(), lineno=58, col_offset=32), Sub(), Name('a', Load(), lineno=58, col_offset=34), lineno=58, col_offset=32), lineno=58, col_offset=11), lineno=58, col_offset=4)], [], lineno=54, col_offset=0), If(Compare(Name('__name__', Load(), lineno=60, col_offset=3), [Eq()], [Str('__main__', lineno=60, col_offset=15)], lineno=60, col_offset=3), [Assign([Name('msg', Store(), lineno=61, col_offset=4)], Call(Name('main', Load(), lineno=61, col_offset=10), [], [], None, None, lineno=61, col_offset=10), lineno=61, col_offset=4), Print(None, [Name('msg', Load(), lineno=62, col_offset=10)], True, lineno=62, col_offset=4), Expr(Call(Name('mainloop', Load(), lineno=63, col_offset=4), [], [], None, None, lineno=63, col_offset=4), lineno=63, col_offset=4)], [], lineno=60, col_offset=0)])
