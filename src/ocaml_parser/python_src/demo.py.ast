Module([Expr(Str('Print names of all methods defined in module\n\nThis script demonstrates use of the visitor interface of the compiler\npackage.\n', lineno=7, col_offset=-1), lineno=7, col_offset=-1), Import([alias('compiler', None)], lineno=9, col_offset=0), ClassDef('MethodFinder', [], [Expr(Str('Print the names of all the methods\n\n    Each visit method takes two arguments, the node and its current\n    scope.  The scope is the name of the current class or None.\n    ', lineno=16, col_offset=-1), lineno=16, col_offset=-1), FunctionDef('visitClass', arguments([Name('self', Param(), lineno=18, col_offset=19), Name('node', Param(), lineno=18, col_offset=25), Name('scope', Param(), lineno=18, col_offset=31)], None, None, [Name('None', Load(), lineno=18, col_offset=37)]), [Expr(Call(Attribute(Name('self', Load(), lineno=19, col_offset=8), 'visit', Load(), lineno=19, col_offset=8), [Attribute(Name('node', Load(), lineno=19, col_offset=19), 'code', Load(), lineno=19, col_offset=19), Attribute(Name('node', Load(), lineno=19, col_offset=30), 'name', Load(), lineno=19, col_offset=30)], [], None, None, lineno=19, col_offset=8), lineno=19, col_offset=8)], [], lineno=18, col_offset=4), FunctionDef('visitFunction', arguments([Name('self', Param(), lineno=21, col_offset=22), Name('node', Param(), lineno=21, col_offset=28), Name('scope', Param(), lineno=21, col_offset=34)], None, None, [Name('None', Load(), lineno=21, col_offset=40)]), [If(Compare(Name('scope', Load(), lineno=22, col_offset=11), [IsNot()], [Name('None', Load(), lineno=22, col_offset=24)], lineno=22, col_offset=11), [Print(None, [BinOp(Str('%s.%s', lineno=23, col_offset=18), Mod(), Tuple([Name('scope', Load(), lineno=23, col_offset=29), Attribute(Name('node', Load(), lineno=23, col_offset=36), 'name', Load(), lineno=23, col_offset=36)], Load(), lineno=23, col_offset=29), lineno=23, col_offset=18)], True, lineno=23, col_offset=12)], [], lineno=22, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=24, col_offset=8), 'visit', Load(), lineno=24, col_offset=8), [Attribute(Name('node', Load(), lineno=24, col_offset=19), 'code', Load(), lineno=24, col_offset=19), Name('None', Load(), lineno=24, col_offset=30)], [], None, None, lineno=24, col_offset=8), lineno=24, col_offset=8)], [], lineno=21, col_offset=4)], [], lineno=11, col_offset=0), FunctionDef('main', arguments([Name('files', Param(), lineno=26, col_offset=9)], None, None, []), [Assign([Name('mf', Store(), lineno=27, col_offset=4)], Call(Name('MethodFinder', Load(), lineno=27, col_offset=9), [], [], None, None, lineno=27, col_offset=9), lineno=27, col_offset=4), For(Name('file', Store(), lineno=28, col_offset=8), Name('files', Load(), lineno=28, col_offset=16), [Assign([Name('f', Store(), lineno=29, col_offset=8)], Call(Name('open', Load(), lineno=29, col_offset=12), [Name('file', Load(), lineno=29, col_offset=17)], [], None, None, lineno=29, col_offset=12), lineno=29, col_offset=8), Assign([Name('buf', Store(), lineno=30, col_offset=8)], Call(Attribute(Name('f', Load(), lineno=30, col_offset=14), 'read', Load(), lineno=30, col_offset=14), [], [], None, None, lineno=30, col_offset=14), lineno=30, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=31, col_offset=8), 'close', Load(), lineno=31, col_offset=8), [], [], None, None, lineno=31, col_offset=8), lineno=31, col_offset=8), Assign([Name('ast', Store(), lineno=32, col_offset=8)], Call(Attribute(Name('compiler', Load(), lineno=32, col_offset=14), 'parse', Load(), lineno=32, col_offset=14), [Name('buf', Load(), lineno=32, col_offset=29)], [], None, None, lineno=32, col_offset=14), lineno=32, col_offset=8), Expr(Call(Attribute(Name('compiler', Load(), lineno=33, col_offset=8), 'walk', Load(), lineno=33, col_offset=8), [Name('ast', Load(), lineno=33, col_offset=22), Name('mf', Load(), lineno=33, col_offset=27)], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8)], [], lineno=28, col_offset=4)], [], lineno=26, col_offset=0), If(Compare(Name('__name__', Load(), lineno=35, col_offset=3), [Eq()], [Str('__main__', lineno=35, col_offset=15)], lineno=35, col_offset=3), [Import([alias('sys', None)], lineno=36, col_offset=4), Expr(Call(Name('main', Load(), lineno=38, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=38, col_offset=9), 'argv', Load(), lineno=38, col_offset=9), Slice(Num(1, lineno=38, col_offset=18), None, None), Load(), lineno=38, col_offset=9)], [], None, None, lineno=38, col_offset=4), lineno=38, col_offset=4)], [], lineno=35, col_offset=0)])
