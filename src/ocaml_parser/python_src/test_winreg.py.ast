Module([Import([alias('os', None), alias('sys', None)], lineno=4, col_offset=0), Import([alias('unittest', None)], lineno=5, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=6, col_offset=0), Assign([Name('threading', Store(), lineno=7, col_offset=0)], Call(Attribute(Name('test_support', Load(), lineno=7, col_offset=12), 'import_module', Load(), lineno=7, col_offset=12), [Str('threading', lineno=7, col_offset=39)], [], None, None, lineno=7, col_offset=12), lineno=7, col_offset=0), ImportFrom('platform', [alias('machine', None)], 0, lineno=8, col_offset=0), Expr(Call(Attribute(Name('test_support', Load(), lineno=11, col_offset=0), 'import_module', Load(), lineno=11, col_offset=0), [Str('_winreg', lineno=11, col_offset=27)], [], None, None, lineno=11, col_offset=0), lineno=11, col_offset=0), ImportFrom('_winreg', [alias('*', None)], 0, lineno=13, col_offset=0), TryExcept([Assign([Name('REMOTE_NAME', Store(), lineno=16, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=16, col_offset=18), 'argv', Load(), lineno=16, col_offset=18), Index(BinOp(Call(Attribute(Attribute(Name('sys', Load(), lineno=16, col_offset=27), 'argv', Load(), lineno=16, col_offset=27), 'index', Load(), lineno=16, col_offset=27), [Str('--remote', lineno=16, col_offset=42)], [], None, None, lineno=16, col_offset=27), Add(), Num(1, lineno=16, col_offset=54), lineno=16, col_offset=27)), Load(), lineno=16, col_offset=18), lineno=16, col_offset=4)], [ExceptHandler(Tuple([Name('IndexError', Load(), lineno=17, col_offset=8), Name('ValueError', Load(), lineno=17, col_offset=20)], Load(), lineno=17, col_offset=8), None, [Assign([Name('REMOTE_NAME', Store(), lineno=18, col_offset=4)], Name('None', Load(), lineno=18, col_offset=18), lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), Assign([Name('WIN_VER', Store(), lineno=21, col_offset=0)], Subscript(Call(Attribute(Name('sys', Load(), lineno=21, col_offset=10), 'getwindowsversion', Load(), lineno=21, col_offset=10), [], [], None, None, lineno=21, col_offset=10), Slice(None, Num(2, lineno=21, col_offset=35), None), Load(), lineno=21, col_offset=10), lineno=21, col_offset=0), Assign([Name('WIN64_MACHINE', Store(), lineno=23, col_offset=0)], IfExp(Compare(Call(Name('machine', Load(), lineno=23, col_offset=24), [], [], None, None, lineno=23, col_offset=24), [Eq()], [Str('AMD64', lineno=23, col_offset=37)], lineno=23, col_offset=24), Name('True', Load(), lineno=23, col_offset=16), Name('False', Load(), lineno=23, col_offset=50), lineno=23, col_offset=16), lineno=23, col_offset=0), Assign([Name('HAS_REFLECTION', Store(), lineno=29, col_offset=0)], IfExp(Compare(Name('WIN_VER', Load(), lineno=29, col_offset=25), [Lt()], [Tuple([Num(6, lineno=29, col_offset=36), Num(1, lineno=29, col_offset=39)], Load(), lineno=29, col_offset=36)], lineno=29, col_offset=25), Name('True', Load(), lineno=29, col_offset=17), Name('False', Load(), lineno=29, col_offset=47), lineno=29, col_offset=17), lineno=29, col_offset=0), Assign([Name('test_key_name', Store(), lineno=31, col_offset=0)], Str('SOFTWARE\\Python Registry Test Key - Delete Me', lineno=31, col_offset=16), lineno=31, col_offset=0), Assign([Name('test_reflect_key_name', Store(), lineno=33, col_offset=0)], Str('SOFTWARE\\Classes\\Python Test Key - Delete Me', lineno=33, col_offset=24), lineno=33, col_offset=0), Assign([Name('test_data', Store(), lineno=35, col_offset=0)], List([Tuple([Str('Int Value', lineno=36, col_offset=5), Num(45, lineno=36, col_offset=22), Name('REG_DWORD', Load(), lineno=36, col_offset=63)], Load(), lineno=36, col_offset=5), Tuple([Str('String Val', lineno=37, col_offset=5), Str('A string value', lineno=37, col_offset=22), Name('REG_SZ', Load(), lineno=37, col_offset=63)], Load(), lineno=37, col_offset=5), Tuple([Str('StringExpand', lineno=38, col_offset=5), Str('The path is %path%', lineno=38, col_offset=22), Name('REG_EXPAND_SZ', Load(), lineno=38, col_offset=63)], Load(), lineno=38, col_offset=5), Tuple([Str('Multi-string', lineno=39, col_offset=5), List([Str('Lots', lineno=39, col_offset=23), Str('of', lineno=39, col_offset=31), Str('string', lineno=39, col_offset=37), Str('values', lineno=39, col_offset=47)], Load(), lineno=39, col_offset=22), Name('REG_MULTI_SZ', Load(), lineno=39, col_offset=63)], Load(), lineno=39, col_offset=5), Tuple([Str('Raw Data', lineno=40, col_offset=5), BinOp(BinOp(Str('binary', lineno=40, col_offset=23), Add(), Call(Name('chr', Load(), lineno=40, col_offset=32), [Num(0, lineno=40, col_offset=36)], [], None, None, lineno=40, col_offset=32), lineno=40, col_offset=23), Add(), Str('data', lineno=40, col_offset=39), lineno=40, col_offset=38), Name('REG_BINARY', Load(), lineno=40, col_offset=63)], Load(), lineno=40, col_offset=5), Tuple([Str('Big String', lineno=41, col_offset=5), BinOp(Str('x', lineno=41, col_offset=22), Mult(), BinOp(BinOp(Num(2, lineno=41, col_offset=27), Pow(), Num(14, lineno=41, col_offset=30), lineno=41, col_offset=27), Sub(), Num(1, lineno=41, col_offset=33), lineno=41, col_offset=27), lineno=41, col_offset=22), Name('REG_SZ', Load(), lineno=41, col_offset=63)], Load(), lineno=41, col_offset=5), Tuple([Str('Big Binary', lineno=42, col_offset=5), BinOp(Str('x', lineno=42, col_offset=22), Mult(), BinOp(Num(2, lineno=42, col_offset=27), Pow(), Num(14, lineno=42, col_offset=30), lineno=42, col_offset=27), lineno=42, col_offset=22), Name('REG_BINARY', Load(), lineno=42, col_offset=63)], Load(), lineno=42, col_offset=5)], Load(), lineno=35, col_offset=12), lineno=35, col_offset=0), If(Attribute(Name('test_support', Load(), lineno=45, col_offset=3), 'have_unicode', Load(), lineno=45, col_offset=3), [AugAssign(Name('test_data', Store(), lineno=46, col_offset=4), Add(), List([Tuple([Call(Name('unicode', Load(), lineno=47, col_offset=9), [Str('Unicode Val', lineno=47, col_offset=17)], [], None, None, lineno=47, col_offset=9), Call(Name('unicode', Load(), lineno=47, col_offset=34), [Str('A Unicode value', lineno=47, col_offset=42)], [], None, None, lineno=47, col_offset=34), Name('REG_SZ', Load(), lineno=47, col_offset=62)], Load(), lineno=47, col_offset=9), Tuple([Str('UnicodeExpand', lineno=48, col_offset=9), Call(Name('unicode', Load(), lineno=48, col_offset=26), [Str('The path is %path%', lineno=48, col_offset=34)], [], None, None, lineno=48, col_offset=26), Name('REG_EXPAND_SZ', Load(), lineno=48, col_offset=57)], Load(), lineno=48, col_offset=9), Tuple([Str('Multi-unicode', lineno=49, col_offset=9), List([Call(Name('unicode', Load(), lineno=49, col_offset=27), [Str('Lots', lineno=49, col_offset=35)], [], None, None, lineno=49, col_offset=27), Call(Name('unicode', Load(), lineno=49, col_offset=44), [Str('of', lineno=49, col_offset=52)], [], None, None, lineno=49, col_offset=44), Call(Name('unicode', Load(), lineno=49, col_offset=59), [Str('unicode', lineno=49, col_offset=67)], [], None, None, lineno=49, col_offset=59), Call(Name('unicode', Load(), lineno=50, col_offset=27), [Str('values', lineno=50, col_offset=35)], [], None, None, lineno=50, col_offset=27)], Load(), lineno=49, col_offset=26), Name('REG_MULTI_SZ', Load(), lineno=50, col_offset=47)], Load(), lineno=49, col_offset=9), Tuple([Str('Multi-mixed', lineno=51, col_offset=9), List([Call(Name('unicode', Load(), lineno=51, col_offset=27), [Str('Unicode', lineno=51, col_offset=35)], [], None, None, lineno=51, col_offset=27), Call(Name('unicode', Load(), lineno=51, col_offset=47), [Str('and', lineno=51, col_offset=55)], [], None, None, lineno=51, col_offset=47), Str('string', lineno=51, col_offset=63), Str('values', lineno=52, col_offset=27)], Load(), lineno=51, col_offset=26), Name('REG_MULTI_SZ', Load(), lineno=52, col_offset=38)], Load(), lineno=51, col_offset=9)], Load(), lineno=46, col_offset=17), lineno=46, col_offset=4)], [], lineno=45, col_offset=0), ClassDef('BaseWinregTests', [Attribute(Name('unittest', Load(), lineno=55, col_offset=22), 'TestCase', Load(), lineno=55, col_offset=22)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=57, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=8), 'delete_tree', Load(), lineno=60, col_offset=8), [Name('HKEY_CURRENT_USER', Load(), lineno=60, col_offset=25), Name('test_key_name', Load(), lineno=60, col_offset=44)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('delete_tree', arguments([Name('self', Param(), lineno=62, col_offset=20), Name('root', Param(), lineno=62, col_offset=26), Name('subkey', Param(), lineno=62, col_offset=32)], None, None, []), [TryExcept([Assign([Name('hkey', Store(), lineno=64, col_offset=12)], Call(Name('OpenKey', Load(), lineno=64, col_offset=19), [Name('root', Load(), lineno=64, col_offset=27), Name('subkey', Load(), lineno=64, col_offset=33), Name('KEY_ALL_ACCESS', Load(), lineno=64, col_offset=41)], [], None, None, lineno=64, col_offset=19), lineno=64, col_offset=12)], [ExceptHandler(Name('WindowsError', Load(), lineno=65, col_offset=15), None, [Return(None, lineno=67, col_offset=12)], lineno=65, col_offset=8)], [], lineno=63, col_offset=8), While(Name('True', Load(), lineno=68, col_offset=14), [TryExcept([Assign([Name('subsubkey', Store(), lineno=70, col_offset=16)], Call(Name('EnumKey', Load(), lineno=70, col_offset=28), [Name('hkey', Load(), lineno=70, col_offset=36), Num(0, lineno=70, col_offset=42)], [], None, None, lineno=70, col_offset=28), lineno=70, col_offset=16)], [ExceptHandler(Name('WindowsError', Load(), lineno=71, col_offset=19), None, [Break( lineno=73, col_offset=16)], lineno=71, col_offset=12)], [], lineno=69, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=74, col_offset=12), 'delete_tree', Load(), lineno=74, col_offset=12), [Name('hkey', Load(), lineno=74, col_offset=29), Name('subsubkey', Load(), lineno=74, col_offset=35)], [], None, None, lineno=74, col_offset=12), lineno=74, col_offset=12)], [], lineno=68, col_offset=8), Expr(Call(Name('CloseKey', Load(), lineno=75, col_offset=8), [Name('hkey', Load(), lineno=75, col_offset=17)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Expr(Call(Name('DeleteKey', Load(), lineno=76, col_offset=8), [Name('root', Load(), lineno=76, col_offset=18), Name('subkey', Load(), lineno=76, col_offset=24)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('_write_test_data', arguments([Name('self', Param(), lineno=78, col_offset=25), Name('root_key', Param(), lineno=78, col_offset=31), Name('CreateKey', Param(), lineno=78, col_offset=41)], None, None, [Name('CreateKey', Load(), lineno=78, col_offset=51)]), [Expr(Call(Name('SetValue', Load(), lineno=80, col_offset=8), [Name('root_key', Load(), lineno=80, col_offset=17), Name('test_key_name', Load(), lineno=80, col_offset=27), Name('REG_SZ', Load(), lineno=80, col_offset=42), Str('Default value', lineno=80, col_offset=50)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8), Assign([Name('key', Store(), lineno=81, col_offset=8)], Call(Name('CreateKey', Load(), lineno=81, col_offset=14), [Name('root_key', Load(), lineno=81, col_offset=24), Name('test_key_name', Load(), lineno=81, col_offset=34)], [], None, None, lineno=81, col_offset=14), lineno=81, col_offset=8), Assign([Name('sub_key', Store(), lineno=83, col_offset=8)], Call(Name('CreateKey', Load(), lineno=83, col_offset=18), [Name('key', Load(), lineno=83, col_offset=28), Str('sub_key', lineno=83, col_offset=33)], [], None, None, lineno=83, col_offset=18), lineno=83, col_offset=8), For(Tuple([Name('value_name', Store(), lineno=86, col_offset=12), Name('value_data', Store(), lineno=86, col_offset=24), Name('value_type', Store(), lineno=86, col_offset=36)], Store(), lineno=86, col_offset=12), Name('test_data', Load(), lineno=86, col_offset=50), [Expr(Call(Name('SetValueEx', Load(), lineno=87, col_offset=12), [Name('sub_key', Load(), lineno=87, col_offset=23), Name('value_name', Load(), lineno=87, col_offset=32), Num(0, lineno=87, col_offset=44), Name('value_type', Load(), lineno=87, col_offset=47), Name('value_data', Load(), lineno=87, col_offset=59)], [], None, None, lineno=87, col_offset=12), lineno=87, col_offset=12)], [], lineno=86, col_offset=8), Assign([Tuple([Name('nkeys', Store(), lineno=90, col_offset=8), Name('nvalues', Store(), lineno=90, col_offset=15), Name('since_mod', Store(), lineno=90, col_offset=24)], Store(), lineno=90, col_offset=8)], Call(Name('QueryInfoKey', Load(), lineno=90, col_offset=36), [Name('key', Load(), lineno=90, col_offset=49)], [], None, None, lineno=90, col_offset=36), lineno=90, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=8), 'assertEqual', Load(), lineno=91, col_offset=8), [Name('nkeys', Load(), lineno=91, col_offset=25), Num(1, lineno=91, col_offset=32), Str('Not the correct number of sub keys', lineno=91, col_offset=35)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=8), 'assertEqual', Load(), lineno=92, col_offset=8), [Name('nvalues', Load(), lineno=92, col_offset=25), Num(1, lineno=92, col_offset=34), Str('Not the correct number of values', lineno=92, col_offset=37)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), Assign([Tuple([Name('nkeys', Store(), lineno=93, col_offset=8), Name('nvalues', Store(), lineno=93, col_offset=15), Name('since_mod', Store(), lineno=93, col_offset=24)], Store(), lineno=93, col_offset=8)], Call(Name('QueryInfoKey', Load(), lineno=93, col_offset=36), [Name('sub_key', Load(), lineno=93, col_offset=49)], [], None, None, lineno=93, col_offset=36), lineno=93, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=8), 'assertEqual', Load(), lineno=94, col_offset=8), [Name('nkeys', Load(), lineno=94, col_offset=25), Num(0, lineno=94, col_offset=32), Str('Not the correct number of sub keys', lineno=94, col_offset=35)], [], None, None, lineno=94, col_offset=8), lineno=94, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertEqual', Load(), lineno=95, col_offset=8), [Name('nvalues', Load(), lineno=95, col_offset=25), Call(Name('len', Load(), lineno=95, col_offset=34), [Name('test_data', Load(), lineno=95, col_offset=38)], [], None, None, lineno=95, col_offset=34), Str('Not the correct number of values', lineno=96, col_offset=26)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Assign([Name('int_sub_key', Store(), lineno=100, col_offset=8)], Call(Name('int', Load(), lineno=100, col_offset=22), [Name('sub_key', Load(), lineno=100, col_offset=26)], [], None, None, lineno=100, col_offset=22), lineno=100, col_offset=8), Expr(Call(Name('CloseKey', Load(), lineno=101, col_offset=8), [Name('sub_key', Load(), lineno=101, col_offset=17)], [], None, None, lineno=101, col_offset=8), lineno=101, col_offset=8), TryExcept([Expr(Call(Name('QueryInfoKey', Load(), lineno=103, col_offset=12), [Name('int_sub_key', Load(), lineno=103, col_offset=25)], [], None, None, lineno=103, col_offset=12), lineno=103, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=104, col_offset=12), 'fail', Load(), lineno=104, col_offset=12), [Str('It appears the CloseKey() function does not close the actual key!', lineno=104, col_offset=22)], [], None, None, lineno=104, col_offset=12), lineno=104, col_offset=12)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=106, col_offset=15), None, [Pass( lineno=107, col_offset=12)], lineno=106, col_offset=8)], [], lineno=102, col_offset=8), Assign([Name('int_key', Store(), lineno=109, col_offset=8)], Call(Name('int', Load(), lineno=109, col_offset=18), [Name('key', Load(), lineno=109, col_offset=22)], [], None, None, lineno=109, col_offset=18), lineno=109, col_offset=8), Expr(Call(Attribute(Name('key', Load(), lineno=110, col_offset=8), 'Close', Load(), lineno=110, col_offset=8), [], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8), TryExcept([Expr(Call(Name('QueryInfoKey', Load(), lineno=112, col_offset=12), [Name('int_key', Load(), lineno=112, col_offset=25)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=12), 'fail', Load(), lineno=113, col_offset=12), [Str('It appears the key.Close() function does not close the actual key!', lineno=113, col_offset=22)], [], None, None, lineno=113, col_offset=12), lineno=113, col_offset=12)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=115, col_offset=15), None, [Pass( lineno=116, col_offset=12)], lineno=115, col_offset=8)], [], lineno=111, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('_read_test_data', arguments([Name('self', Param(), lineno=118, col_offset=24), Name('root_key', Param(), lineno=118, col_offset=30), Name('OpenKey', Param(), lineno=118, col_offset=40)], None, None, [Name('OpenKey', Load(), lineno=118, col_offset=48)]), [Assign([Name('val', Store(), lineno=120, col_offset=8)], Call(Name('QueryValue', Load(), lineno=120, col_offset=14), [Name('root_key', Load(), lineno=120, col_offset=25), Name('test_key_name', Load(), lineno=120, col_offset=35)], [], None, None, lineno=120, col_offset=14), lineno=120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=8), 'assertEqual', Load(), lineno=121, col_offset=8), [Name('val', Load(), lineno=121, col_offset=25), Str('Default value', lineno=121, col_offset=30), Str("Registry didn't give back the correct value", lineno=122, col_offset=25)], [], None, None, lineno=121, col_offset=8), lineno=121, col_offset=8), Assign([Name('key', Store(), lineno=124, col_offset=8)], Call(Name('OpenKey', Load(), lineno=124, col_offset=14), [Name('root_key', Load(), lineno=124, col_offset=22), Name('test_key_name', Load(), lineno=124, col_offset=32)], [], None, None, lineno=124, col_offset=14), lineno=124, col_offset=8), With(Call(Name('OpenKey', Load(), lineno=126, col_offset=13), [Name('key', Load(), lineno=126, col_offset=21), Str('sub_key', lineno=126, col_offset=26)], [], None, None, lineno=126, col_offset=13), Name('sub_key', Store(), lineno=126, col_offset=40), [Assign([Name('index', Store(), lineno=128, col_offset=12)], Num(0, lineno=128, col_offset=20), lineno=128, col_offset=12), While(Num(1, lineno=129, col_offset=18), [TryExcept([Assign([Name('data', Store(), lineno=131, col_offset=20)], Call(Name('EnumValue', Load(), lineno=131, col_offset=27), [Name('sub_key', Load(), lineno=131, col_offset=37), Name('index', Load(), lineno=131, col_offset=46)], [], None, None, lineno=131, col_offset=27), lineno=131, col_offset=20)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=132, col_offset=23), None, [Break( lineno=133, col_offset=20)], lineno=132, col_offset=16)], [], lineno=130, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=16), 'assertIn', Load(), lineno=134, col_offset=16), [Name('data', Load(), lineno=134, col_offset=30), Name('test_data', Load(), lineno=134, col_offset=36), Str("Didn't read back the correct test data", lineno=135, col_offset=30)], [], None, None, lineno=134, col_offset=16), lineno=134, col_offset=16), Assign([Name('index', Store(), lineno=136, col_offset=16)], BinOp(Name('index', Load(), lineno=136, col_offset=24), Add(), Num(1, lineno=136, col_offset=32), lineno=136, col_offset=24), lineno=136, col_offset=16)], [], lineno=129, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=137, col_offset=12), 'assertEqual', Load(), lineno=137, col_offset=12), [Name('index', Load(), lineno=137, col_offset=29), Call(Name('len', Load(), lineno=137, col_offset=36), [Name('test_data', Load(), lineno=137, col_offset=40)], [], None, None, lineno=137, col_offset=36), Str("Didn't read the correct number of items", lineno=138, col_offset=29)], [], None, None, lineno=137, col_offset=12), lineno=137, col_offset=12), For(Tuple([Name('value_name', Store(), lineno=140, col_offset=16), Name('value_data', Store(), lineno=140, col_offset=28), Name('value_type', Store(), lineno=140, col_offset=40)], Store(), lineno=140, col_offset=16), Name('test_data', Load(), lineno=140, col_offset=54), [Assign([Tuple([Name('read_val', Store(), lineno=141, col_offset=16), Name('read_typ', Store(), lineno=141, col_offset=26)], Store(), lineno=141, col_offset=16)], Call(Name('QueryValueEx', Load(), lineno=141, col_offset=37), [Name('sub_key', Load(), lineno=141, col_offset=50), Name('value_name', Load(), lineno=141, col_offset=59)], [], None, None, lineno=141, col_offset=37), lineno=141, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=16), 'assertEqual', Load(), lineno=142, col_offset=16), [Name('read_val', Load(), lineno=142, col_offset=33), Name('value_data', Load(), lineno=142, col_offset=43), Str('Could not directly read the value', lineno=143, col_offset=33)], [], None, None, lineno=142, col_offset=16), lineno=142, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=144, col_offset=16), 'assertEqual', Load(), lineno=144, col_offset=16), [Name('read_typ', Load(), lineno=144, col_offset=33), Name('value_type', Load(), lineno=144, col_offset=43), Str('Could not directly read the value', lineno=145, col_offset=33)], [], None, None, lineno=144, col_offset=16), lineno=144, col_offset=16)], [], lineno=140, col_offset=12)], lineno=126, col_offset=13), Expr(Call(Attribute(Name('sub_key', Load(), lineno=146, col_offset=8), 'Close', Load(), lineno=146, col_offset=8), [], [], None, None, lineno=146, col_offset=8), lineno=146, col_offset=8), Assign([Name('read_val', Store(), lineno=148, col_offset=8)], Call(Name('EnumKey', Load(), lineno=148, col_offset=19), [Name('key', Load(), lineno=148, col_offset=27), Num(0, lineno=148, col_offset=32)], [], None, None, lineno=148, col_offset=19), lineno=148, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=149, col_offset=8), 'assertEqual', Load(), lineno=149, col_offset=8), [Name('read_val', Load(), lineno=149, col_offset=25), Str('sub_key', lineno=149, col_offset=35), Str('Read subkey value wrong', lineno=149, col_offset=46)], [], None, None, lineno=149, col_offset=8), lineno=149, col_offset=8), TryExcept([Expr(Call(Name('EnumKey', Load(), lineno=151, col_offset=12), [Name('key', Load(), lineno=151, col_offset=20), Num(1, lineno=151, col_offset=25)], [], None, None, lineno=151, col_offset=12), lineno=151, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=12), 'fail', Load(), lineno=152, col_offset=12), [Str('Was able to get a second key when I only have one!', lineno=152, col_offset=22)], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=12)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=153, col_offset=15), None, [Pass( lineno=154, col_offset=12)], lineno=153, col_offset=8)], [], lineno=150, col_offset=8), Expr(Call(Attribute(Name('key', Load(), lineno=156, col_offset=8), 'Close', Load(), lineno=156, col_offset=8), [], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8)], [], lineno=118, col_offset=4), FunctionDef('_delete_test_data', arguments([Name('self', Param(), lineno=158, col_offset=26), Name('root_key', Param(), lineno=158, col_offset=32)], None, None, []), [Assign([Name('key', Store(), lineno=159, col_offset=8)], Call(Name('OpenKey', Load(), lineno=159, col_offset=14), [Name('root_key', Load(), lineno=159, col_offset=22), Name('test_key_name', Load(), lineno=159, col_offset=32), Num(0, lineno=159, col_offset=47), Name('KEY_ALL_ACCESS', Load(), lineno=159, col_offset=50)], [], None, None, lineno=159, col_offset=14), lineno=159, col_offset=8), Assign([Name('sub_key', Store(), lineno=160, col_offset=8)], Call(Name('OpenKey', Load(), lineno=160, col_offset=18), [Name('key', Load(), lineno=160, col_offset=26), Str('sub_key', lineno=160, col_offset=31), Num(0, lineno=160, col_offset=42), Name('KEY_ALL_ACCESS', Load(), lineno=160, col_offset=45)], [], None, None, lineno=160, col_offset=18), lineno=160, col_offset=8), For(Tuple([Name('value_name', Store(), lineno=164, col_offset=12), Name('value_data', Store(), lineno=164, col_offset=24), Name('value_type', Store(), lineno=164, col_offset=36)], Store(), lineno=164, col_offset=12), Name('test_data', Load(), lineno=164, col_offset=50), [Expr(Call(Name('DeleteValue', Load(), lineno=165, col_offset=12), [Name('sub_key', Load(), lineno=165, col_offset=24), Name('value_name', Load(), lineno=165, col_offset=33)], [], None, None, lineno=165, col_offset=12), lineno=165, col_offset=12)], [], lineno=164, col_offset=8), Assign([Tuple([Name('nkeys', Store(), lineno=167, col_offset=8), Name('nvalues', Store(), lineno=167, col_offset=15), Name('since_mod', Store(), lineno=167, col_offset=24)], Store(), lineno=167, col_offset=8)], Call(Name('QueryInfoKey', Load(), lineno=167, col_offset=36), [Name('sub_key', Load(), lineno=167, col_offset=49)], [], None, None, lineno=167, col_offset=36), lineno=167, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=8), 'assertEqual', Load(), lineno=168, col_offset=8), [Name('nkeys', Load(), lineno=168, col_offset=25), Num(0, lineno=168, col_offset=32), Str('subkey not empty before delete', lineno=168, col_offset=35)], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=169, col_offset=8), 'assertEqual', Load(), lineno=169, col_offset=8), [Name('nvalues', Load(), lineno=169, col_offset=25), Num(0, lineno=169, col_offset=34), Str('subkey not empty before delete', lineno=169, col_offset=37)], [], None, None, lineno=169, col_offset=8), lineno=169, col_offset=8), Expr(Call(Attribute(Name('sub_key', Load(), lineno=170, col_offset=8), 'Close', Load(), lineno=170, col_offset=8), [], [], None, None, lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Name('DeleteKey', Load(), lineno=171, col_offset=8), [Name('key', Load(), lineno=171, col_offset=18), Str('sub_key', lineno=171, col_offset=23)], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8), TryExcept([Expr(Call(Name('DeleteKey', Load(), lineno=175, col_offset=12), [Name('key', Load(), lineno=175, col_offset=22), Str('sub_key', lineno=175, col_offset=27)], [], None, None, lineno=175, col_offset=12), lineno=175, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=176, col_offset=12), 'fail', Load(), lineno=176, col_offset=12), [Str('Deleting the key twice succeeded', lineno=176, col_offset=22)], [], None, None, lineno=176, col_offset=12), lineno=176, col_offset=12)], [ExceptHandler(Name('EnvironmentError', Load(), lineno=177, col_offset=15), None, [Pass( lineno=178, col_offset=12)], lineno=177, col_offset=8)], [], lineno=173, col_offset=8), Expr(Call(Attribute(Name('key', Load(), lineno=179, col_offset=8), 'Close', Load(), lineno=179, col_offset=8), [], [], None, None, lineno=179, col_offset=8), lineno=179, col_offset=8), Expr(Call(Name('DeleteKey', Load(), lineno=180, col_offset=8), [Name('root_key', Load(), lineno=180, col_offset=18), Name('test_key_name', Load(), lineno=180, col_offset=28)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8), TryExcept([Assign([Name('key', Store(), lineno=183, col_offset=12)], Call(Name('OpenKey', Load(), lineno=183, col_offset=18), [Name('root_key', Load(), lineno=183, col_offset=26), Name('test_key_name', Load(), lineno=183, col_offset=36)], [], None, None, lineno=183, col_offset=18), lineno=183, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=12), 'fail', Load(), lineno=184, col_offset=12), [Str('Could open the non-existent key', lineno=184, col_offset=22)], [], None, None, lineno=184, col_offset=12), lineno=184, col_offset=12)], [ExceptHandler(Name('WindowsError', Load(), lineno=185, col_offset=15), None, [Pass( lineno=186, col_offset=12)], lineno=185, col_offset=8)], [], lineno=182, col_offset=8)], [], lineno=158, col_offset=4), FunctionDef('_test_all', arguments([Name('self', Param(), lineno=188, col_offset=18), Name('root_key', Param(), lineno=188, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=8), '_write_test_data', Load(), lineno=189, col_offset=8), [Name('root_key', Load(), lineno=189, col_offset=30)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=190, col_offset=8), '_read_test_data', Load(), lineno=190, col_offset=8), [Name('root_key', Load(), lineno=190, col_offset=29)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=8), '_delete_test_data', Load(), lineno=191, col_offset=8), [Name('root_key', Load(), lineno=191, col_offset=31)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8)], [], lineno=188, col_offset=4)], [], lineno=55, col_offset=0), ClassDef('LocalWinregTests', [Name('BaseWinregTests', Load(), lineno=193, col_offset=23)], [FunctionDef('test_registry_works', arguments([Name('self', Param(), lineno=195, col_offset=28)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=196, col_offset=8), '_test_all', Load(), lineno=196, col_offset=8), [Name('HKEY_CURRENT_USER', Load(), lineno=196, col_offset=23)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('test_registry_works_extended_functions', arguments([Name('self', Param(), lineno=198, col_offset=47)], None, None, []), [Assign([Name('cke', Store(), lineno=202, col_offset=8)], Lambda(arguments([Name('key', Param(), lineno=202, col_offset=21), Name('sub_key', Param(), lineno=202, col_offset=26)], None, None, []), Call(Name('CreateKeyEx', Load(), lineno=202, col_offset=35), [Name('key', Load(), lineno=202, col_offset=47), Name('sub_key', Load(), lineno=202, col_offset=52), Num(0, lineno=202, col_offset=61), Name('KEY_ALL_ACCESS', Load(), lineno=202, col_offset=64)], [], None, None, lineno=202, col_offset=35), lineno=202, col_offset=14), lineno=202, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=8), '_write_test_data', Load(), lineno=203, col_offset=8), [Name('HKEY_CURRENT_USER', Load(), lineno=203, col_offset=30), Name('cke', Load(), lineno=203, col_offset=49)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Assign([Name('oke', Store(), lineno=205, col_offset=8)], Lambda(arguments([Name('key', Param(), lineno=205, col_offset=21), Name('sub_key', Param(), lineno=205, col_offset=26)], None, None, []), Call(Name('OpenKeyEx', Load(), lineno=205, col_offset=35), [Name('key', Load(), lineno=205, col_offset=45), Name('sub_key', Load(), lineno=205, col_offset=50), Num(0, lineno=205, col_offset=59), Name('KEY_READ', Load(), lineno=205, col_offset=62)], [], None, None, lineno=205, col_offset=35), lineno=205, col_offset=14), lineno=205, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=206, col_offset=8), '_read_test_data', Load(), lineno=206, col_offset=8), [Name('HKEY_CURRENT_USER', Load(), lineno=206, col_offset=29), Name('oke', Load(), lineno=206, col_offset=48)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=208, col_offset=8), '_delete_test_data', Load(), lineno=208, col_offset=8), [Name('HKEY_CURRENT_USER', Load(), lineno=208, col_offset=31)], [], None, None, lineno=208, col_offset=8), lineno=208, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('test_connect_registry_to_local_machine_works', arguments([Name('self', Param(), lineno=210, col_offset=53)], None, None, []), [Assign([Name('h', Store(), lineno=212, col_offset=8)], Call(Name('ConnectRegistry', Load(), lineno=212, col_offset=12), [Name('None', Load(), lineno=212, col_offset=28), Name('HKEY_LOCAL_MACHINE', Load(), lineno=212, col_offset=34)], [], None, None, lineno=212, col_offset=12), lineno=212, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=213, col_offset=8), 'assertNotEqual', Load(), lineno=213, col_offset=8), [Attribute(Name('h', Load(), lineno=213, col_offset=28), 'handle', Load(), lineno=213, col_offset=28), Num(0, lineno=213, col_offset=38)], [], None, None, lineno=213, col_offset=8), lineno=213, col_offset=8), Expr(Call(Attribute(Name('h', Load(), lineno=214, col_offset=8), 'Close', Load(), lineno=214, col_offset=8), [], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=215, col_offset=8), 'assertEqual', Load(), lineno=215, col_offset=8), [Attribute(Name('h', Load(), lineno=215, col_offset=25), 'handle', Load(), lineno=215, col_offset=25), Num(0, lineno=215, col_offset=35)], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8)], [], lineno=210, col_offset=4), FunctionDef('test_inexistant_remote_registry', arguments([Name('self', Param(), lineno=217, col_offset=40)], None, None, []), [Assign([Name('connect', Store(), lineno=218, col_offset=8)], Lambda(arguments([], None, None, []), Call(Name('ConnectRegistry', Load(), lineno=218, col_offset=26), [Str('abcdefghijkl', lineno=218, col_offset=42), Name('HKEY_CURRENT_USER', Load(), lineno=218, col_offset=58)], [], None, None, lineno=218, col_offset=26), lineno=218, col_offset=18), lineno=218, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertRaises', Load(), lineno=219, col_offset=8), [Name('WindowsError', Load(), lineno=219, col_offset=26), Name('connect', Load(), lineno=219, col_offset=40)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8)], [], lineno=217, col_offset=4), FunctionDef('test_expand_environment_strings', arguments([Name('self', Param(), lineno=221, col_offset=40)], None, None, []), [Assign([Name('r', Store(), lineno=222, col_offset=8)], Call(Name('ExpandEnvironmentStrings', Load(), lineno=222, col_offset=12), [Str(u'%windir%\\test', lineno=222, col_offset=37)], [], None, None, lineno=222, col_offset=12), lineno=222, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), 'assertEqual', Load(), lineno=223, col_offset=8), [Call(Name('type', Load(), lineno=223, col_offset=25), [Name('r', Load(), lineno=223, col_offset=30)], [], None, None, lineno=223, col_offset=25), Name('unicode', Load(), lineno=223, col_offset=34)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=224, col_offset=8), 'assertEqual', Load(), lineno=224, col_offset=8), [Name('r', Load(), lineno=224, col_offset=25), BinOp(Subscript(Attribute(Name('os', Load(), lineno=224, col_offset=28), 'environ', Load(), lineno=224, col_offset=28), Index(Str('windir', lineno=224, col_offset=39)), Load(), lineno=224, col_offset=28), Add(), Str('\\test', lineno=224, col_offset=51), lineno=224, col_offset=28)], [], None, None, lineno=224, col_offset=8), lineno=224, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('test_context_manager', arguments([Name('self', Param(), lineno=226, col_offset=29)], None, None, []), [TryExcept([With(Call(Name('ConnectRegistry', Load(), lineno=229, col_offset=17), [Name('None', Load(), lineno=229, col_offset=33), Name('HKEY_LOCAL_MACHINE', Load(), lineno=229, col_offset=39)], [], None, None, lineno=229, col_offset=17), Name('h', Store(), lineno=229, col_offset=62), [Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=16), 'assertNotEqual', Load(), lineno=230, col_offset=16), [Attribute(Name('h', Load(), lineno=230, col_offset=36), 'handle', Load(), lineno=230, col_offset=36), Num(0, lineno=230, col_offset=46)], [], None, None, lineno=230, col_offset=16), lineno=230, col_offset=16), Raise(Name('WindowsError', Load(), lineno=231, col_offset=22), None, None, lineno=231, col_offset=16)], lineno=229, col_offset=17)], [ExceptHandler(Name('WindowsError', Load(), lineno=232, col_offset=15), None, [Expr(Call(Attribute(Name('self', Load(), lineno=233, col_offset=12), 'assertEqual', Load(), lineno=233, col_offset=12), [Attribute(Name('h', Load(), lineno=233, col_offset=29), 'handle', Load(), lineno=233, col_offset=29), Num(0, lineno=233, col_offset=39)], [], None, None, lineno=233, col_offset=12), lineno=233, col_offset=12)], lineno=232, col_offset=8)], [], lineno=228, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('test_changing_value', arguments([Name('self', Param(), lineno=235, col_offset=28)], None, None, []), [Assign([Name('done', Store(), lineno=239, col_offset=8)], Name('False', Load(), lineno=239, col_offset=15), lineno=239, col_offset=8), ClassDef('VeryActiveThread', [Attribute(Name('threading', Load(), lineno=241, col_offset=31), 'Thread', Load(), lineno=241, col_offset=31)], [FunctionDef('run', arguments([Name('self', Param(), lineno=242, col_offset=20)], None, None, []), [With(Call(Name('CreateKey', Load(), lineno=243, col_offset=21), [Name('HKEY_CURRENT_USER', Load(), lineno=243, col_offset=31), Name('test_key_name', Load(), lineno=243, col_offset=50)], [], None, None, lineno=243, col_offset=21), Name('key', Store(), lineno=243, col_offset=68), [Assign([Name('use_short', Store(), lineno=244, col_offset=20)], Name('True', Load(), lineno=244, col_offset=32), lineno=244, col_offset=20), Assign([Name('long_string', Store(), lineno=245, col_offset=20)], BinOp(Str('x', lineno=245, col_offset=34), Mult(), Num(2000, lineno=245, col_offset=38), lineno=245, col_offset=34), lineno=245, col_offset=20), While(UnaryOp(Not(), Name('done', Load(), lineno=246, col_offset=30), lineno=246, col_offset=26), [Assign([Name('s', Store(), lineno=247, col_offset=24)], IfExp(Name('use_short', Load(), lineno=247, col_offset=35), Str('x', lineno=247, col_offset=28), Name('long_string', Load(), lineno=247, col_offset=50), lineno=247, col_offset=28), lineno=247, col_offset=24), Assign([Name('use_short', Store(), lineno=248, col_offset=24)], UnaryOp(Not(), Name('use_short', Load(), lineno=248, col_offset=40), lineno=248, col_offset=36), lineno=248, col_offset=24), Expr(Call(Name('SetValue', Load(), lineno=249, col_offset=24), [Name('key', Load(), lineno=249, col_offset=33), Str('changing_value', lineno=249, col_offset=38), Name('REG_SZ', Load(), lineno=249, col_offset=56), Name('s', Load(), lineno=249, col_offset=64)], [], None, None, lineno=249, col_offset=24), lineno=249, col_offset=24)], [], lineno=246, col_offset=20)], lineno=243, col_offset=21)], [], lineno=242, col_offset=12)], [], lineno=241, col_offset=8), Assign([Name('thread', Store(), lineno=251, col_offset=8)], Call(Name('VeryActiveThread', Load(), lineno=251, col_offset=17), [], [], None, None, lineno=251, col_offset=17), lineno=251, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=252, col_offset=8), 'start', Load(), lineno=252, col_offset=8), [], [], None, None, lineno=252, col_offset=8), lineno=252, col_offset=8), TryFinally([With(Call(Name('CreateKey', Load(), lineno=254, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=254, col_offset=27), BinOp(Name('test_key_name', Load(), lineno=255, col_offset=27), Add(), Str('\\changing_value', lineno=255, col_offset=41), lineno=255, col_offset=27)], [], None, None, lineno=254, col_offset=17), Name('key', Store(), lineno=255, col_offset=64), [For(Name('_', Store(), lineno=256, col_offset=20), Call(Name('range', Load(), lineno=256, col_offset=25), [Num(1000, lineno=256, col_offset=31)], [], None, None, lineno=256, col_offset=25), [Assign([Tuple([Name('num_subkeys', Store(), lineno=257, col_offset=20), Name('num_values', Store(), lineno=257, col_offset=33), Name('t', Store(), lineno=257, col_offset=45)], Store(), lineno=257, col_offset=20)], Call(Name('QueryInfoKey', Load(), lineno=257, col_offset=49), [Name('key', Load(), lineno=257, col_offset=62)], [], None, None, lineno=257, col_offset=49), lineno=257, col_offset=20), For(Name('i', Store(), lineno=258, col_offset=24), Call(Name('range', Load(), lineno=258, col_offset=29), [Name('num_values', Load(), lineno=258, col_offset=35)], [], None, None, lineno=258, col_offset=29), [Assign([Name('name', Store(), lineno=259, col_offset=24)], Call(Name('EnumValue', Load(), lineno=259, col_offset=31), [Name('key', Load(), lineno=259, col_offset=41), Name('i', Load(), lineno=259, col_offset=46)], [], None, None, lineno=259, col_offset=31), lineno=259, col_offset=24), Expr(Call(Name('QueryValue', Load(), lineno=260, col_offset=24), [Name('key', Load(), lineno=260, col_offset=35), Subscript(Name('name', Load(), lineno=260, col_offset=40), Index(Num(0, lineno=260, col_offset=45)), Load(), lineno=260, col_offset=40)], [], None, None, lineno=260, col_offset=24), lineno=260, col_offset=24)], [], lineno=258, col_offset=20)], [], lineno=256, col_offset=16)], lineno=254, col_offset=17)], [Assign([Name('done', Store(), lineno=262, col_offset=12)], Name('True', Load(), lineno=262, col_offset=19), lineno=262, col_offset=12), Expr(Call(Attribute(Name('thread', Load(), lineno=263, col_offset=12), 'join', Load(), lineno=263, col_offset=12), [], [], None, None, lineno=263, col_offset=12), lineno=263, col_offset=12), With(Call(Name('OpenKey', Load(), lineno=264, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=264, col_offset=25), Name('test_key_name', Load(), lineno=264, col_offset=44), Num(0, lineno=264, col_offset=59), Name('KEY_ALL_ACCESS', Load(), lineno=264, col_offset=62)], [], None, None, lineno=264, col_offset=17), Name('key', Store(), lineno=264, col_offset=81), [Expr(Call(Name('DeleteKey', Load(), lineno=265, col_offset=16), [Name('key', Load(), lineno=265, col_offset=26), Str('changing_value', lineno=265, col_offset=31)], [], None, None, lineno=265, col_offset=16), lineno=265, col_offset=16)], lineno=264, col_offset=17), Expr(Call(Name('DeleteKey', Load(), lineno=266, col_offset=12), [Name('HKEY_CURRENT_USER', Load(), lineno=266, col_offset=22), Name('test_key_name', Load(), lineno=266, col_offset=41)], [], None, None, lineno=266, col_offset=12), lineno=266, col_offset=12)], lineno=253, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('test_long_key', arguments([Name('self', Param(), lineno=268, col_offset=22)], None, None, []), [Assign([Name('name', Store(), lineno=272, col_offset=8)], BinOp(Str('x', lineno=272, col_offset=15), Mult(), Num(256, lineno=272, col_offset=19), lineno=272, col_offset=15), lineno=272, col_offset=8), TryFinally([With(Call(Name('CreateKey', Load(), lineno=274, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=274, col_offset=27), Name('test_key_name', Load(), lineno=274, col_offset=46)], [], None, None, lineno=274, col_offset=17), Name('key', Store(), lineno=274, col_offset=64), [Expr(Call(Name('SetValue', Load(), lineno=275, col_offset=16), [Name('key', Load(), lineno=275, col_offset=25), Name('name', Load(), lineno=275, col_offset=30), Name('REG_SZ', Load(), lineno=275, col_offset=36), Str('x', lineno=275, col_offset=44)], [], None, None, lineno=275, col_offset=16), lineno=275, col_offset=16), Assign([Tuple([Name('num_subkeys', Store(), lineno=276, col_offset=16), Name('num_values', Store(), lineno=276, col_offset=29), Name('t', Store(), lineno=276, col_offset=41)], Store(), lineno=276, col_offset=16)], Call(Name('QueryInfoKey', Load(), lineno=276, col_offset=45), [Name('key', Load(), lineno=276, col_offset=58)], [], None, None, lineno=276, col_offset=45), lineno=276, col_offset=16), Expr(Call(Name('EnumKey', Load(), lineno=277, col_offset=16), [Name('key', Load(), lineno=277, col_offset=24), Num(0, lineno=277, col_offset=29)], [], None, None, lineno=277, col_offset=16), lineno=277, col_offset=16)], lineno=274, col_offset=17)], [With(Call(Name('OpenKey', Load(), lineno=279, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=279, col_offset=25), Name('test_key_name', Load(), lineno=279, col_offset=44), Num(0, lineno=279, col_offset=59), Name('KEY_ALL_ACCESS', Load(), lineno=279, col_offset=62)], [], None, None, lineno=279, col_offset=17), Name('key', Store(), lineno=279, col_offset=81), [Expr(Call(Name('DeleteKey', Load(), lineno=280, col_offset=16), [Name('key', Load(), lineno=280, col_offset=26), Name('name', Load(), lineno=280, col_offset=31)], [], None, None, lineno=280, col_offset=16), lineno=280, col_offset=16)], lineno=279, col_offset=17), Expr(Call(Name('DeleteKey', Load(), lineno=281, col_offset=12), [Name('HKEY_CURRENT_USER', Load(), lineno=281, col_offset=22), Name('test_key_name', Load(), lineno=281, col_offset=41)], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], lineno=273, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('test_dynamic_key', arguments([Name('self', Param(), lineno=283, col_offset=25)], None, None, []), [Expr(Call(Name('EnumValue', Load(), lineno=286, col_offset=8), [Name('HKEY_PERFORMANCE_DATA', Load(), lineno=286, col_offset=18), Num(0, lineno=286, col_offset=41)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8), Expr(Call(Name('QueryValueEx', Load(), lineno=287, col_offset=8), [Name('HKEY_PERFORMANCE_DATA', Load(), lineno=287, col_offset=21), Name('None', Load(), lineno=287, col_offset=44)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=283, col_offset=4), FunctionDef('test_reflection_unsupported', arguments([Name('self', Param(), lineno=292, col_offset=36)], None, None, []), [TryFinally([With(Call(Name('CreateKey', Load(), lineno=294, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=294, col_offset=27), Name('test_key_name', Load(), lineno=294, col_offset=46)], [], None, None, lineno=294, col_offset=17), Name('ck', Store(), lineno=294, col_offset=64), [Expr(Call(Attribute(Name('self', Load(), lineno=295, col_offset=16), 'assertNotEqual', Load(), lineno=295, col_offset=16), [Attribute(Name('ck', Load(), lineno=295, col_offset=36), 'handle', Load(), lineno=295, col_offset=36), Num(0, lineno=295, col_offset=47)], [], None, None, lineno=295, col_offset=16), lineno=295, col_offset=16)], lineno=294, col_offset=17), Assign([Name('key', Store(), lineno=297, col_offset=12)], Call(Name('OpenKey', Load(), lineno=297, col_offset=18), [Name('HKEY_CURRENT_USER', Load(), lineno=297, col_offset=26), Name('test_key_name', Load(), lineno=297, col_offset=45)], [], None, None, lineno=297, col_offset=18), lineno=297, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=298, col_offset=12), 'assertNotEqual', Load(), lineno=298, col_offset=12), [Attribute(Name('key', Load(), lineno=298, col_offset=32), 'handle', Load(), lineno=298, col_offset=32), Num(0, lineno=298, col_offset=44)], [], None, None, lineno=298, col_offset=12), lineno=298, col_offset=12), With(Call(Attribute(Name('self', Load(), lineno=300, col_offset=17), 'assertRaises', Load(), lineno=300, col_offset=17), [Name('NotImplementedError', Load(), lineno=300, col_offset=35)], [], None, None, lineno=300, col_offset=17), None, [Expr(Call(Name('DisableReflectionKey', Load(), lineno=301, col_offset=16), [Name('key', Load(), lineno=301, col_offset=37)], [], None, None, lineno=301, col_offset=16), lineno=301, col_offset=16)], lineno=300, col_offset=17), With(Call(Attribute(Name('self', Load(), lineno=302, col_offset=17), 'assertRaises', Load(), lineno=302, col_offset=17), [Name('NotImplementedError', Load(), lineno=302, col_offset=35)], [], None, None, lineno=302, col_offset=17), None, [Expr(Call(Name('EnableReflectionKey', Load(), lineno=303, col_offset=16), [Name('key', Load(), lineno=303, col_offset=36)], [], None, None, lineno=303, col_offset=16), lineno=303, col_offset=16)], lineno=302, col_offset=17), With(Call(Attribute(Name('self', Load(), lineno=304, col_offset=17), 'assertRaises', Load(), lineno=304, col_offset=17), [Name('NotImplementedError', Load(), lineno=304, col_offset=35)], [], None, None, lineno=304, col_offset=17), None, [Expr(Call(Name('QueryReflectionKey', Load(), lineno=305, col_offset=16), [Name('key', Load(), lineno=305, col_offset=35)], [], None, None, lineno=305, col_offset=16), lineno=305, col_offset=16)], lineno=304, col_offset=17), With(Call(Attribute(Name('self', Load(), lineno=306, col_offset=17), 'assertRaises', Load(), lineno=306, col_offset=17), [Name('NotImplementedError', Load(), lineno=306, col_offset=35)], [], None, None, lineno=306, col_offset=17), None, [Expr(Call(Name('DeleteKeyEx', Load(), lineno=307, col_offset=16), [Name('HKEY_CURRENT_USER', Load(), lineno=307, col_offset=28), Name('test_key_name', Load(), lineno=307, col_offset=47)], [], None, None, lineno=307, col_offset=16), lineno=307, col_offset=16)], lineno=306, col_offset=17)], [Expr(Call(Name('DeleteKey', Load(), lineno=309, col_offset=12), [Name('HKEY_CURRENT_USER', Load(), lineno=309, col_offset=22), Name('test_key_name', Load(), lineno=309, col_offset=41)], [], None, None, lineno=309, col_offset=12), lineno=309, col_offset=12)], lineno=293, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=291, col_offset=5), 'skipUnless', Load(), lineno=291, col_offset=5), [Compare(Name('WIN_VER', Load(), lineno=291, col_offset=25), [Lt()], [Tuple([Num(5, lineno=291, col_offset=36), Num(2, lineno=291, col_offset=39)], Load(), lineno=291, col_offset=36)], lineno=291, col_offset=25), Str('Requires Windows XP', lineno=291, col_offset=43)], [], None, None, lineno=291, col_offset=5)], lineno=291, col_offset=4)], [], lineno=193, col_offset=0), ClassDef('RemoteWinregTests', [Name('BaseWinregTests', Load(), lineno=313, col_offset=24)], [FunctionDef('test_remote_registry_works', arguments([Name('self', Param(), lineno=315, col_offset=35)], None, None, []), [Assign([Name('remote_key', Store(), lineno=316, col_offset=8)], Call(Name('ConnectRegistry', Load(), lineno=316, col_offset=21), [Name('REMOTE_NAME', Load(), lineno=316, col_offset=37), Name('HKEY_CURRENT_USER', Load(), lineno=316, col_offset=50)], [], None, None, lineno=316, col_offset=21), lineno=316, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=317, col_offset=8), '_test_all', Load(), lineno=317, col_offset=8), [Name('remote_key', Load(), lineno=317, col_offset=23)], [], None, None, lineno=317, col_offset=8), lineno=317, col_offset=8)], [], lineno=315, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=312, col_offset=1), 'skipUnless', Load(), lineno=312, col_offset=1), [Name('REMOTE_NAME', Load(), lineno=312, col_offset=21), Str('Skipping remote registry tests', lineno=312, col_offset=34)], [], None, None, lineno=312, col_offset=1)], lineno=312, col_offset=0), ClassDef('Win64WinregTests', [Name('BaseWinregTests', Load(), lineno=321, col_offset=23)], [FunctionDef('test_reflection_functions', arguments([Name('self', Param(), lineno=323, col_offset=34)], None, None, []), [With(Call(Name('OpenKey', Load(), lineno=326, col_offset=13), [Name('HKEY_LOCAL_MACHINE', Load(), lineno=326, col_offset=21), Str('Software', lineno=326, col_offset=41)], [], None, None, lineno=326, col_offset=13), Name('key', Store(), lineno=326, col_offset=56), [Expr(Call(Attribute(Name('self', Load(), lineno=328, col_offset=12), 'assertTrue', Load(), lineno=328, col_offset=12), [Call(Name('QueryReflectionKey', Load(), lineno=328, col_offset=28), [Name('key', Load(), lineno=328, col_offset=47)], [], None, None, lineno=328, col_offset=28)], [], None, None, lineno=328, col_offset=12), lineno=328, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=329, col_offset=12), 'assertEqual', Load(), lineno=329, col_offset=12), [Name('None', Load(), lineno=329, col_offset=29), Call(Name('EnableReflectionKey', Load(), lineno=329, col_offset=35), [Name('key', Load(), lineno=329, col_offset=55)], [], None, None, lineno=329, col_offset=35)], [], None, None, lineno=329, col_offset=12), lineno=329, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=12), 'assertEqual', Load(), lineno=330, col_offset=12), [Name('None', Load(), lineno=330, col_offset=29), Call(Name('DisableReflectionKey', Load(), lineno=330, col_offset=35), [Name('key', Load(), lineno=330, col_offset=56)], [], None, None, lineno=330, col_offset=35)], [], None, None, lineno=330, col_offset=12), lineno=330, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=331, col_offset=12), 'assertTrue', Load(), lineno=331, col_offset=12), [Call(Name('QueryReflectionKey', Load(), lineno=331, col_offset=28), [Name('key', Load(), lineno=331, col_offset=47)], [], None, None, lineno=331, col_offset=28)], [], None, None, lineno=331, col_offset=12), lineno=331, col_offset=12)], lineno=326, col_offset=13)], [], lineno=323, col_offset=4), FunctionDef('test_reflection', arguments([Name('self', Param(), lineno=334, col_offset=24)], None, None, []), [TryFinally([With(Call(Name('CreateKeyEx', Load(), lineno=340, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=340, col_offset=29), Name('test_reflect_key_name', Load(), lineno=340, col_offset=48), Num(0, lineno=340, col_offset=71), BinOp(Name('KEY_ALL_ACCESS', Load(), lineno=341, col_offset=29), BitOr(), Name('KEY_WOW64_32KEY', Load(), lineno=341, col_offset=46), lineno=341, col_offset=29)], [], None, None, lineno=340, col_offset=17), Name('created_key', Store(), lineno=341, col_offset=66), [Expr(Call(Attribute(Name('self', Load(), lineno=342, col_offset=16), 'assertNotEqual', Load(), lineno=342, col_offset=16), [Attribute(Name('created_key', Load(), lineno=342, col_offset=36), 'handle', Load(), lineno=342, col_offset=36), Num(0, lineno=342, col_offset=56)], [], None, None, lineno=342, col_offset=16), lineno=342, col_offset=16), With(Call(Name('OpenKey', Load(), lineno=345, col_offset=21), [Name('HKEY_CURRENT_USER', Load(), lineno=345, col_offset=29), Name('test_reflect_key_name', Load(), lineno=345, col_offset=48), Num(0, lineno=345, col_offset=71), BinOp(Name('KEY_ALL_ACCESS', Load(), lineno=346, col_offset=29), BitOr(), Name('KEY_WOW64_32KEY', Load(), lineno=346, col_offset=46), lineno=346, col_offset=29)], [], None, None, lineno=345, col_offset=21), Name('key', Store(), lineno=346, col_offset=66), [Expr(Call(Attribute(Name('self', Load(), lineno=347, col_offset=20), 'assertNotEqual', Load(), lineno=347, col_offset=20), [Attribute(Name('key', Load(), lineno=347, col_offset=40), 'handle', Load(), lineno=347, col_offset=40), Num(0, lineno=347, col_offset=52)], [], None, None, lineno=347, col_offset=20), lineno=347, col_offset=20)], lineno=345, col_offset=21), Expr(Call(Name('SetValueEx', Load(), lineno=350, col_offset=16), [Name('created_key', Load(), lineno=350, col_offset=27), Str('', lineno=350, col_offset=40), Num(0, lineno=350, col_offset=44), Name('REG_SZ', Load(), lineno=350, col_offset=47), Str('32KEY', lineno=350, col_offset=55)], [], None, None, lineno=350, col_offset=16), lineno=350, col_offset=16), Assign([Name('open_fail', Store(), lineno=354, col_offset=16)], Lambda(arguments([], None, None, []), Call(Name('OpenKey', Load(), lineno=354, col_offset=36), [Name('HKEY_CURRENT_USER', Load(), lineno=354, col_offset=44), Name('test_reflect_key_name', Load(), lineno=355, col_offset=44), Num(0, lineno=355, col_offset=67), BinOp(Name('KEY_READ', Load(), lineno=356, col_offset=44), BitOr(), Name('KEY_WOW64_64KEY', Load(), lineno=356, col_offset=55), lineno=356, col_offset=44)], [], None, None, lineno=354, col_offset=36), lineno=354, col_offset=28), lineno=354, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=357, col_offset=16), 'assertRaises', Load(), lineno=357, col_offset=16), [Name('WindowsError', Load(), lineno=357, col_offset=34), Name('open_fail', Load(), lineno=357, col_offset=48)], [], None, None, lineno=357, col_offset=16), lineno=357, col_offset=16)], lineno=340, col_offset=17), With(Call(Name('OpenKey', Load(), lineno=360, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=360, col_offset=25), Name('test_reflect_key_name', Load(), lineno=360, col_offset=44), Num(0, lineno=360, col_offset=67), BinOp(Name('KEY_ALL_ACCESS', Load(), lineno=361, col_offset=25), BitOr(), Name('KEY_WOW64_64KEY', Load(), lineno=361, col_offset=42), lineno=361, col_offset=25)], [], None, None, lineno=360, col_offset=17), Name('key', Store(), lineno=361, col_offset=62), [Expr(Call(Attribute(Name('self', Load(), lineno=362, col_offset=16), 'assertNotEqual', Load(), lineno=362, col_offset=16), [Attribute(Name('key', Load(), lineno=362, col_offset=36), 'handle', Load(), lineno=362, col_offset=36), Num(0, lineno=362, col_offset=48)], [], None, None, lineno=362, col_offset=16), lineno=362, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=364, col_offset=16), 'assertEqual', Load(), lineno=364, col_offset=16), [Str('32KEY', lineno=364, col_offset=33), Call(Name('QueryValue', Load(), lineno=364, col_offset=42), [Name('key', Load(), lineno=364, col_offset=53), Str('', lineno=364, col_offset=58)], [], None, None, lineno=364, col_offset=42)], [], None, None, lineno=364, col_offset=16), lineno=364, col_offset=16), Expr(Call(Name('SetValueEx', Load(), lineno=366, col_offset=16), [Name('key', Load(), lineno=366, col_offset=27), Str('', lineno=366, col_offset=32), Num(0, lineno=366, col_offset=36), Name('REG_SZ', Load(), lineno=366, col_offset=39), Str('64KEY', lineno=366, col_offset=47)], [], None, None, lineno=366, col_offset=16), lineno=366, col_offset=16)], lineno=360, col_offset=17), With(Call(Name('OpenKey', Load(), lineno=370, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=370, col_offset=25), Name('test_reflect_key_name', Load(), lineno=370, col_offset=44), Num(0, lineno=370, col_offset=67), BinOp(Name('KEY_READ', Load(), lineno=371, col_offset=25), BitOr(), Name('KEY_WOW64_32KEY', Load(), lineno=371, col_offset=36), lineno=371, col_offset=25)], [], None, None, lineno=370, col_offset=17), Name('key', Store(), lineno=371, col_offset=56), [Expr(Call(Attribute(Name('self', Load(), lineno=372, col_offset=16), 'assertEqual', Load(), lineno=372, col_offset=16), [Str('64KEY', lineno=372, col_offset=33), Call(Name('QueryValue', Load(), lineno=372, col_offset=42), [Name('key', Load(), lineno=372, col_offset=53), Str('', lineno=372, col_offset=58)], [], None, None, lineno=372, col_offset=42)], [], None, None, lineno=372, col_offset=16), lineno=372, col_offset=16)], lineno=370, col_offset=17)], [Expr(Call(Name('DeleteKeyEx', Load(), lineno=374, col_offset=12), [Name('HKEY_CURRENT_USER', Load(), lineno=374, col_offset=24), Name('test_reflect_key_name', Load(), lineno=374, col_offset=43), Name('KEY_WOW64_32KEY', Load(), lineno=375, col_offset=24), Num(0, lineno=375, col_offset=41)], [], None, None, lineno=374, col_offset=12), lineno=374, col_offset=12)], lineno=339, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=333, col_offset=5), 'skipUnless', Load(), lineno=333, col_offset=5), [Name('HAS_REFLECTION', Load(), lineno=333, col_offset=25), Str("OS doesn't support reflection", lineno=333, col_offset=41)], [], None, None, lineno=333, col_offset=5)], lineno=333, col_offset=4), FunctionDef('test_disable_reflection', arguments([Name('self', Param(), lineno=378, col_offset=32)], None, None, []), [TryFinally([With(Call(Name('CreateKeyEx', Load(), lineno=381, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=381, col_offset=29), Name('test_reflect_key_name', Load(), lineno=381, col_offset=48), Num(0, lineno=381, col_offset=71), BinOp(Name('KEY_ALL_ACCESS', Load(), lineno=382, col_offset=29), BitOr(), Name('KEY_WOW64_32KEY', Load(), lineno=382, col_offset=46), lineno=382, col_offset=29)], [], None, None, lineno=381, col_offset=17), Name('created_key', Store(), lineno=382, col_offset=66), [Assign([Name('disabled', Store(), lineno=384, col_offset=16)], Call(Name('QueryReflectionKey', Load(), lineno=384, col_offset=27), [Name('created_key', Load(), lineno=384, col_offset=46)], [], None, None, lineno=384, col_offset=27), lineno=384, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=385, col_offset=16), 'assertEqual', Load(), lineno=385, col_offset=16), [Call(Name('type', Load(), lineno=385, col_offset=33), [Name('disabled', Load(), lineno=385, col_offset=38)], [], None, None, lineno=385, col_offset=33), Name('bool', Load(), lineno=385, col_offset=49)], [], None, None, lineno=385, col_offset=16), lineno=385, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=387, col_offset=16), 'assertFalse', Load(), lineno=387, col_offset=16), [Name('disabled', Load(), lineno=387, col_offset=33)], [], None, None, lineno=387, col_offset=16), lineno=387, col_offset=16), Expr(Call(Name('DisableReflectionKey', Load(), lineno=389, col_offset=16), [Name('created_key', Load(), lineno=389, col_offset=37)], [], None, None, lineno=389, col_offset=16), lineno=389, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=390, col_offset=16), 'assertTrue', Load(), lineno=390, col_offset=16), [Call(Name('QueryReflectionKey', Load(), lineno=390, col_offset=32), [Name('created_key', Load(), lineno=390, col_offset=51)], [], None, None, lineno=390, col_offset=32)], [], None, None, lineno=390, col_offset=16), lineno=390, col_offset=16)], lineno=381, col_offset=17), Assign([Name('open_fail', Store(), lineno=394, col_offset=12)], Lambda(arguments([], None, None, []), Call(Name('OpenKeyEx', Load(), lineno=394, col_offset=32), [Name('HKEY_CURRENT_USER', Load(), lineno=394, col_offset=42), Name('test_reflect_key_name', Load(), lineno=395, col_offset=42), Num(0, lineno=395, col_offset=65), BinOp(Name('KEY_READ', Load(), lineno=396, col_offset=42), BitOr(), Name('KEY_WOW64_64KEY', Load(), lineno=396, col_offset=53), lineno=396, col_offset=42)], [], None, None, lineno=394, col_offset=32), lineno=394, col_offset=24), lineno=394, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=12), 'assertRaises', Load(), lineno=397, col_offset=12), [Name('WindowsError', Load(), lineno=397, col_offset=30), Name('open_fail', Load(), lineno=397, col_offset=44)], [], None, None, lineno=397, col_offset=12), lineno=397, col_offset=12), With(Call(Name('OpenKeyEx', Load(), lineno=400, col_offset=17), [Name('HKEY_CURRENT_USER', Load(), lineno=400, col_offset=27), Name('test_reflect_key_name', Load(), lineno=400, col_offset=46), Num(0, lineno=400, col_offset=69), BinOp(Name('KEY_READ', Load(), lineno=401, col_offset=27), BitOr(), Name('KEY_WOW64_32KEY', Load(), lineno=401, col_offset=38), lineno=401, col_offset=27)], [], None, None, lineno=400, col_offset=17), Name('key', Store(), lineno=401, col_offset=58), [Expr(Call(Attribute(Name('self', Load(), lineno=402, col_offset=16), 'assertNotEqual', Load(), lineno=402, col_offset=16), [Attribute(Name('key', Load(), lineno=402, col_offset=36), 'handle', Load(), lineno=402, col_offset=36), Num(0, lineno=402, col_offset=48)], [], None, None, lineno=402, col_offset=16), lineno=402, col_offset=16)], lineno=400, col_offset=17)], [Expr(Call(Name('DeleteKeyEx', Load(), lineno=404, col_offset=12), [Name('HKEY_CURRENT_USER', Load(), lineno=404, col_offset=24), Name('test_reflect_key_name', Load(), lineno=404, col_offset=43), Name('KEY_WOW64_32KEY', Load(), lineno=405, col_offset=24), Num(0, lineno=405, col_offset=41)], [], None, None, lineno=404, col_offset=12), lineno=404, col_offset=12)], lineno=380, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=377, col_offset=5), 'skipUnless', Load(), lineno=377, col_offset=5), [Name('HAS_REFLECTION', Load(), lineno=377, col_offset=25), Str("OS doesn't support reflection", lineno=377, col_offset=41)], [], None, None, lineno=377, col_offset=5)], lineno=377, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=320, col_offset=1), 'skipUnless', Load(), lineno=320, col_offset=1), [Name('WIN64_MACHINE', Load(), lineno=320, col_offset=21), Str('x64 specific registry tests', lineno=320, col_offset=36)], [], None, None, lineno=320, col_offset=1)], lineno=320, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=409, col_offset=4), 'run_unittest', Load(), lineno=409, col_offset=4), [Name('LocalWinregTests', Load(), lineno=409, col_offset=30), Name('RemoteWinregTests', Load(), lineno=409, col_offset=48), Name('Win64WinregTests', Load(), lineno=410, col_offset=30)], [], None, None, lineno=409, col_offset=4), lineno=409, col_offset=4)], [], lineno=408, col_offset=0), If(Compare(Name('__name__', Load(), lineno=412, col_offset=3), [Eq()], [Str('__main__', lineno=412, col_offset=15)], lineno=412, col_offset=3), [If(UnaryOp(Not(), Name('REMOTE_NAME', Load(), lineno=413, col_offset=11), lineno=413, col_offset=7), [Print(None, [Str('Remote registry calls can be tested using', lineno=414, col_offset=14)], False, lineno=414, col_offset=8), Print(None, [Str("'test_winreg.py --remote \\\\machine_name'", lineno=415, col_offset=14)], True, lineno=415, col_offset=8)], [], lineno=413, col_offset=4), Expr(Call(Name('test_main', Load(), lineno=416, col_offset=4), [], [], None, None, lineno=416, col_offset=4), lineno=416, col_offset=4)], [], lineno=412, col_offset=0)])
