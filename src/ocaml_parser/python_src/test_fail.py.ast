Module([ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=1, col_offset=0), Import([alias('json', None)], lineno=3, col_offset=0), Assign([Name('JSONDOCS', Store(), lineno=6, col_offset=0)], List([Str('"A JSON payload should be an object or array, not a string."', lineno=8, col_offset=4), Str('["Unclosed array"', lineno=10, col_offset=4), Str('{unquoted_key: "keys must be quoted}', lineno=12, col_offset=4), Str('["extra comma",]', lineno=14, col_offset=4), Str('["double extra comma",,]', lineno=16, col_offset=4), Str('[   , "<-- missing value"]', lineno=18, col_offset=4), Str('["Comma after the close"],', lineno=20, col_offset=4), Str('["Extra close"]]', lineno=22, col_offset=4), Str('{"Extra comma": true,}', lineno=24, col_offset=4), Str('{"Extra value after close": true} "misplaced quoted value"', lineno=26, col_offset=4), Str('{"Illegal expression": 1 + 2}', lineno=28, col_offset=4), Str('{"Illegal invocation": alert()}', lineno=30, col_offset=4), Str('{"Numbers cannot have leading zeroes": 013}', lineno=32, col_offset=4), Str('{"Numbers cannot be hex": 0x14}', lineno=34, col_offset=4), Str('["Illegal backslash escape: \\x15"]', lineno=36, col_offset=4), Str('["Illegal backslash escape: \\\'"]', lineno=38, col_offset=4), Str('["Illegal backslash escape: \\017"]', lineno=40, col_offset=4), Str('[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]', lineno=42, col_offset=4), Str('{"Missing colon" null}', lineno=44, col_offset=4), Str('{"Double colon":: null}', lineno=46, col_offset=4), Str('{"Comma instead of colon", null}', lineno=48, col_offset=4), Str('["Colon instead of comma": false]', lineno=50, col_offset=4), Str('["Bad value", truth]', lineno=52, col_offset=4), Str("['single quote']", lineno=54, col_offset=4), Str(u'["A\x1fZ control characters in string"]', lineno=56, col_offset=4)], Load(), lineno=6, col_offset=11), lineno=6, col_offset=0), Assign([Name('SKIPS', Store(), lineno=59, col_offset=0)], Dict([Num(1, lineno=60, col_offset=4), Num(18, lineno=61, col_offset=4)], [Str('why not have a string payload?', lineno=60, col_offset=7), Str("spec doesn't specify any nesting limitations", lineno=61, col_offset=8)], lineno=59, col_offset=8), lineno=59, col_offset=0), ClassDef('TestFail', [Name('TestCase', Load(), lineno=64, col_offset=15)], [FunctionDef('test_failures', arguments([Name('self', Param(), lineno=65, col_offset=22)], None, None, []), [For(Tuple([Name('idx', Store(), lineno=66, col_offset=12), Name('doc', Store(), lineno=66, col_offset=17)], Store(), lineno=66, col_offset=12), Call(Name('enumerate', Load(), lineno=66, col_offset=24), [Name('JSONDOCS', Load(), lineno=66, col_offset=34)], [], None, None, lineno=66, col_offset=24), [Assign([Name('idx', Store(), lineno=67, col_offset=12)], BinOp(Name('idx', Load(), lineno=67, col_offset=18), Add(), Num(1, lineno=67, col_offset=24), lineno=67, col_offset=18), lineno=67, col_offset=12), If(Compare(Name('idx', Load(), lineno=68, col_offset=15), [In()], [Name('SKIPS', Load(), lineno=68, col_offset=22)], lineno=68, col_offset=15), [Expr(Call(Attribute(Name('json', Load(), lineno=69, col_offset=16), 'loads', Load(), lineno=69, col_offset=16), [Name('doc', Load(), lineno=69, col_offset=27)], [], None, None, lineno=69, col_offset=16), lineno=69, col_offset=16), Continue( lineno=70, col_offset=16)], [], lineno=68, col_offset=12), TryExcept([Expr(Call(Attribute(Name('json', Load(), lineno=72, col_offset=16), 'loads', Load(), lineno=72, col_offset=16), [Name('doc', Load(), lineno=72, col_offset=27)], [], None, None, lineno=72, col_offset=16), lineno=72, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=73, col_offset=19), None, [Pass( lineno=74, col_offset=16)], lineno=73, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=16), 'fail', Load(), lineno=76, col_offset=16), [Call(Attribute(Str('Expected failure for fail{0}.json: {1!r}', lineno=76, col_offset=26), 'format', Load(), lineno=76, col_offset=26), [Name('idx', Load(), lineno=76, col_offset=76), Name('doc', Load(), lineno=76, col_offset=81)], [], None, None, lineno=76, col_offset=26)], [], None, None, lineno=76, col_offset=16), lineno=76, col_offset=16)], lineno=71, col_offset=12)], [], lineno=66, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('test_non_string_keys_dict', arguments([Name('self', Param(), lineno=78, col_offset=34)], None, None, []), [Assign([Name('data', Store(), lineno=79, col_offset=8)], Dict([Str('a', lineno=79, col_offset=16), Tuple([Num(1, lineno=79, col_offset=26), Num(2, lineno=79, col_offset=29)], Load(), lineno=79, col_offset=26)], [Num(1, lineno=79, col_offset=22), Num(2, lineno=79, col_offset=34)], lineno=79, col_offset=15), lineno=79, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=8), 'assertRaises', Load(), lineno=82, col_offset=8), [Name('TypeError', Load(), lineno=82, col_offset=26), Attribute(Name('json', Load(), lineno=82, col_offset=37), 'dumps', Load(), lineno=82, col_offset=37), Name('data', Load(), lineno=82, col_offset=49)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=8), 'assertRaises', Load(), lineno=85, col_offset=8), [Name('TypeError', Load(), lineno=85, col_offset=26), Attribute(Name('json', Load(), lineno=85, col_offset=37), 'dumps', Load(), lineno=85, col_offset=37), Name('data', Load(), lineno=85, col_offset=49)], [keyword('indent', Name('True', Load(), lineno=85, col_offset=62))], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8)], [], lineno=78, col_offset=4)], [], lineno=64, col_offset=0)])
