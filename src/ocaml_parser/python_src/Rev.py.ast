Module([Expr(Str('\nA class which presents the reverse of a sequence without duplicating it.\nFrom: "Steven D. Majewski" <sdm7g@elvis.med.virginia.edu>\n\nIt works on mutable or inmutable sequences.\n\n>>> chars = list(Rev(\'Hello World!\'))\n>>> print \'\'.join(chars)\n!dlroW olleH\n\nThe .forw is so you can use anonymous sequences in __init__, and still\nkeep a reference the forward sequence. )\nIf you give it a non-anonymous mutable sequence, the reverse sequence\nwill track the updated values. ( but not reassignment! - another\ngood reason to use anonymous values in creating the sequence to avoid\nconfusion. Maybe it should be change to copy input sequence to break\nthe connection completely ? )\n\n>>> nnn = range(3)\n>>> rnn = Rev(nnn)\n>>> for n in rnn: print n\n...\n2\n1\n0\n>>> for n in range(4, 6): nnn.append(n)   # update nnn\n...\n>>> for n in rnn: print n     # prints reversed updated values\n...\n5\n4\n2\n1\n0\n>>> nnn = nnn[1:-1]\n>>> nnn\n[1, 2, 4]\n>>> for n in rnn: print n     # prints reversed values of old nnn\n...\n5\n4\n2\n1\n0\n\n#\n>>> WH = Rev(\'Hello World!\')\n>>> print WH.forw, WH.back\nHello World! !dlroW olleH\n>>> nnn = Rev(range(1, 10))\n>>> print nnn.forw\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> print nnn.back\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n>>> rrr = Rev(nnn)\n>>> rrr\n<1, 2, 3, 4, 5, 6, 7, 8, 9>\n\n', lineno=60, col_offset=-1), lineno=60, col_offset=-1), ClassDef('Rev', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=63, col_offset=17), Name('seq', Param(), lineno=63, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=64, col_offset=8), 'forw', Store(), lineno=64, col_offset=8)], Name('seq', Load(), lineno=64, col_offset=20), lineno=64, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=65, col_offset=8), 'back', Store(), lineno=65, col_offset=8)], Name('self', Load(), lineno=65, col_offset=20), lineno=65, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=67, col_offset=16)], None, None, []), [Return(Call(Name('len', Load(), lineno=68, col_offset=15), [Attribute(Name('self', Load(), lineno=68, col_offset=19), 'forw', Load(), lineno=68, col_offset=19)], [], None, None, lineno=68, col_offset=15), lineno=68, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=70, col_offset=20), Name('j', Param(), lineno=70, col_offset=26)], None, None, []), [Return(Subscript(Attribute(Name('self', Load(), lineno=71, col_offset=15), 'forw', Load(), lineno=71, col_offset=15), Index(UnaryOp(USub(), BinOp(Name('j', Load(), lineno=71, col_offset=27), Add(), Num(1, lineno=71, col_offset=31), lineno=71, col_offset=27), lineno=71, col_offset=25)), Load(), lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=73, col_offset=17)], None, None, []), [Assign([Name('seq', Store(), lineno=74, col_offset=8)], Attribute(Name('self', Load(), lineno=74, col_offset=14), 'forw', Load(), lineno=74, col_offset=14), lineno=74, col_offset=8), If(Call(Name('isinstance', Load(), lineno=75, col_offset=11), [Name('seq', Load(), lineno=75, col_offset=22), Name('list', Load(), lineno=75, col_offset=27)], [], None, None, lineno=75, col_offset=11), [Assign([Name('wrap', Store(), lineno=76, col_offset=12)], Str('[]', lineno=76, col_offset=19), lineno=76, col_offset=12), Assign([Name('sep', Store(), lineno=77, col_offset=12)], Str(', ', lineno=77, col_offset=18), lineno=77, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=78, col_offset=13), [Name('seq', Load(), lineno=78, col_offset=24), Name('tuple', Load(), lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=13), [Assign([Name('wrap', Store(), lineno=79, col_offset=12)], Str('()', lineno=79, col_offset=19), lineno=79, col_offset=12), Assign([Name('sep', Store(), lineno=80, col_offset=12)], Str(', ', lineno=80, col_offset=18), lineno=80, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=81, col_offset=13), [Name('seq', Load(), lineno=81, col_offset=24), Name('str', Load(), lineno=81, col_offset=29)], [], None, None, lineno=81, col_offset=13), [Assign([Name('wrap', Store(), lineno=82, col_offset=12)], Str('', lineno=82, col_offset=19), lineno=82, col_offset=12), Assign([Name('sep', Store(), lineno=83, col_offset=12)], Str('', lineno=83, col_offset=18), lineno=83, col_offset=12)], [Assign([Name('wrap', Store(), lineno=85, col_offset=12)], Str('<>', lineno=85, col_offset=19), lineno=85, col_offset=12), Assign([Name('sep', Store(), lineno=86, col_offset=12)], Str(', ', lineno=86, col_offset=18), lineno=86, col_offset=12)], lineno=81, col_offset=13)], lineno=78, col_offset=13)], lineno=75, col_offset=8), Assign([Name('outstrs', Store(), lineno=87, col_offset=8)], ListComp(Call(Name('str', Load(), lineno=87, col_offset=19), [Name('item', Load(), lineno=87, col_offset=23)], [], None, None, lineno=87, col_offset=19), [comprehension(Name('item', Store(), lineno=87, col_offset=33), Attribute(Name('self', Load(), lineno=87, col_offset=41), 'back', Load(), lineno=87, col_offset=41), [])], lineno=87, col_offset=19), lineno=87, col_offset=8), Return(BinOp(BinOp(Subscript(Name('wrap', Load(), lineno=88, col_offset=15), Slice(None, Num(1, lineno=88, col_offset=21), None), Load(), lineno=88, col_offset=15), Add(), Call(Attribute(Name('sep', Load(), lineno=88, col_offset=26), 'join', Load(), lineno=88, col_offset=26), [Name('outstrs', Load(), lineno=88, col_offset=35)], [], None, None, lineno=88, col_offset=26), lineno=88, col_offset=15), Add(), Subscript(Name('wrap', Load(), lineno=88, col_offset=46), Slice(Num(-1, lineno=88, col_offset=52), None, None), Load(), lineno=88, col_offset=46), lineno=88, col_offset=44), lineno=88, col_offset=8)], [], lineno=73, col_offset=4)], [], lineno=62, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Import([alias('doctest', None), alias('Rev', None)], lineno=91, col_offset=4), Return(Call(Attribute(Name('doctest', Load(), lineno=92, col_offset=11), 'testmod', Load(), lineno=92, col_offset=11), [Name('Rev', Load(), lineno=92, col_offset=27)], [], None, None, lineno=92, col_offset=11), lineno=92, col_offset=4)], [], lineno=90, col_offset=0), If(Compare(Name('__name__', Load(), lineno=94, col_offset=3), [Eq()], [Str('__main__', lineno=94, col_offset=15)], lineno=94, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=95, col_offset=4), [], [], None, None, lineno=95, col_offset=4), lineno=95, col_offset=4)], [], lineno=94, col_offset=0)])
