Module([Expr(Str("distutils.command.build_clib\n\nImplements the Distutils 'build_clib' command, to build a C/C++ library\nthat is included in the module distribution and needed by an extension\nmodule.", lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__revision__', Store(), lineno=7, col_offset=0)], Str('$Id: build_clib.py 84610 2010-09-07 22:18:34Z eric.araujo $', lineno=7, col_offset=15), lineno=7, col_offset=0), Import([alias('os', None)], lineno=19, col_offset=0), ImportFrom('distutils.core', [alias('Command', None)], 0, lineno=20, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsSetupError', None)], 0, lineno=21, col_offset=0), ImportFrom('distutils.ccompiler', [alias('customize_compiler', None)], 0, lineno=22, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=23, col_offset=0), FunctionDef('show_compilers', arguments([], None, None, []), [ImportFrom('distutils.ccompiler', [alias('show_compilers', None)], 0, lineno=26, col_offset=4), Expr(Call(Name('show_compilers', Load(), lineno=27, col_offset=4), [], [], None, None, lineno=27, col_offset=4), lineno=27, col_offset=4)], [], lineno=25, col_offset=0), ClassDef('build_clib', [Name('Command', Load(), lineno=30, col_offset=17)], [Assign([Name('description', Store(), lineno=32, col_offset=4)], Str('build C/C++ libraries used by Python extensions', lineno=32, col_offset=18), lineno=32, col_offset=4), Assign([Name('user_options', Store(), lineno=34, col_offset=4)], List([Tuple([Str('build-clib=', lineno=35, col_offset=9), Str('b', lineno=35, col_offset=24), Str('directory to build C/C++ libraries to', lineno=36, col_offset=9)], Load(), lineno=35, col_offset=9), Tuple([Str('build-temp=', lineno=37, col_offset=9), Str('t', lineno=37, col_offset=24), Str('directory to put temporary build by-products', lineno=38, col_offset=9)], Load(), lineno=37, col_offset=9), Tuple([Str('debug', lineno=39, col_offset=9), Str('g', lineno=39, col_offset=18), Str('compile with debugging information', lineno=40, col_offset=9)], Load(), lineno=39, col_offset=9), Tuple([Str('force', lineno=41, col_offset=9), Str('f', lineno=41, col_offset=18), Str('forcibly build everything (ignore file timestamps)', lineno=42, col_offset=9)], Load(), lineno=41, col_offset=9), Tuple([Str('compiler=', lineno=43, col_offset=9), Str('c', lineno=43, col_offset=22), Str('specify the compiler type', lineno=44, col_offset=9)], Load(), lineno=43, col_offset=9)], Load(), lineno=34, col_offset=19), lineno=34, col_offset=4), Assign([Name('boolean_options', Store(), lineno=47, col_offset=4)], List([Str('debug', lineno=47, col_offset=23), Str('force', lineno=47, col_offset=32)], Load(), lineno=47, col_offset=22), lineno=47, col_offset=4), Assign([Name('help_options', Store(), lineno=49, col_offset=4)], List([Tuple([Str('help-compiler', lineno=50, col_offset=9), Name('None', Load(), lineno=50, col_offset=26), Str('list available compilers', lineno=51, col_offset=9), Name('show_compilers', Load(), lineno=51, col_offset=37)], Load(), lineno=50, col_offset=9)], Load(), lineno=49, col_offset=19), lineno=49, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=54, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=55, col_offset=8), 'build_clib', Store(), lineno=55, col_offset=8)], Name('None', Load(), lineno=55, col_offset=26), lineno=55, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=56, col_offset=8), 'build_temp', Store(), lineno=56, col_offset=8)], Name('None', Load(), lineno=56, col_offset=26), lineno=56, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=59, col_offset=8), 'libraries', Store(), lineno=59, col_offset=8)], Name('None', Load(), lineno=59, col_offset=25), lineno=59, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=62, col_offset=8), 'include_dirs', Store(), lineno=62, col_offset=8)], Name('None', Load(), lineno=62, col_offset=28), lineno=62, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=63, col_offset=8), 'define', Store(), lineno=63, col_offset=8)], Name('None', Load(), lineno=63, col_offset=22), lineno=63, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=64, col_offset=8), 'undef', Store(), lineno=64, col_offset=8)], Name('None', Load(), lineno=64, col_offset=21), lineno=64, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=65, col_offset=8), 'debug', Store(), lineno=65, col_offset=8)], Name('None', Load(), lineno=65, col_offset=21), lineno=65, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=66, col_offset=8), 'force', Store(), lineno=66, col_offset=8)], Num(0, lineno=66, col_offset=21), lineno=66, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=67, col_offset=8), 'compiler', Store(), lineno=67, col_offset=8)], Name('None', Load(), lineno=67, col_offset=24), lineno=67, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=70, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'set_undefined_options', Load(), lineno=76, col_offset=8), [Str('build', lineno=76, col_offset=35), Tuple([Str('build_temp', lineno=77, col_offset=36), Str('build_clib', lineno=77, col_offset=50)], Load(), lineno=77, col_offset=36), Tuple([Str('build_temp', lineno=78, col_offset=36), Str('build_temp', lineno=78, col_offset=50)], Load(), lineno=78, col_offset=36), Tuple([Str('compiler', lineno=79, col_offset=36), Str('compiler', lineno=79, col_offset=48)], Load(), lineno=79, col_offset=36), Tuple([Str('debug', lineno=80, col_offset=36), Str('debug', lineno=80, col_offset=45)], Load(), lineno=80, col_offset=36), Tuple([Str('force', lineno=81, col_offset=36), Str('force', lineno=81, col_offset=45)], Load(), lineno=81, col_offset=36)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=83, col_offset=8), 'libraries', Store(), lineno=83, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=83, col_offset=25), 'distribution', Load(), lineno=83, col_offset=25), 'libraries', Load(), lineno=83, col_offset=25), lineno=83, col_offset=8), If(Attribute(Name('self', Load(), lineno=84, col_offset=11), 'libraries', Load(), lineno=84, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=12), 'check_library_list', Load(), lineno=85, col_offset=12), [Attribute(Name('self', Load(), lineno=85, col_offset=36), 'libraries', Load(), lineno=85, col_offset=36)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=12)], [], lineno=84, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=87, col_offset=11), 'include_dirs', Load(), lineno=87, col_offset=11), [Is()], [Name('None', Load(), lineno=87, col_offset=32)], lineno=87, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=88, col_offset=12), 'include_dirs', Store(), lineno=88, col_offset=12)], BoolOp(Or(), [Attribute(Attribute(Name('self', Load(), lineno=88, col_offset=32), 'distribution', Load(), lineno=88, col_offset=32), 'include_dirs', Load(), lineno=88, col_offset=32), List([], Load(), lineno=88, col_offset=66)], lineno=88, col_offset=32), lineno=88, col_offset=12)], [], lineno=87, col_offset=8), If(Call(Name('isinstance', Load(), lineno=89, col_offset=11), [Attribute(Name('self', Load(), lineno=89, col_offset=22), 'include_dirs', Load(), lineno=89, col_offset=22), Name('str', Load(), lineno=89, col_offset=41)], [], None, None, lineno=89, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=90, col_offset=12), 'include_dirs', Store(), lineno=90, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=32), 'include_dirs', Load(), lineno=90, col_offset=32), 'split', Load(), lineno=90, col_offset=32), [Attribute(Name('os', Load(), lineno=90, col_offset=56), 'pathsep', Load(), lineno=90, col_offset=56)], [], None, None, lineno=90, col_offset=32), lineno=90, col_offset=12)], [], lineno=89, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=95, col_offset=12)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=96, col_offset=15), 'libraries', Load(), lineno=96, col_offset=15), lineno=96, col_offset=11), [Return(None, lineno=97, col_offset=12)], [], lineno=96, col_offset=8), ImportFrom('distutils.ccompiler', [alias('new_compiler', None)], 0, lineno=100, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=101, col_offset=8), 'compiler', Store(), lineno=101, col_offset=8)], Call(Name('new_compiler', Load(), lineno=101, col_offset=24), [], [keyword('compiler', Attribute(Name('self', Load(), lineno=101, col_offset=46), 'compiler', Load(), lineno=101, col_offset=46)), keyword('dry_run', Attribute(Name('self', Load(), lineno=102, col_offset=45), 'dry_run', Load(), lineno=102, col_offset=45)), keyword('force', Attribute(Name('self', Load(), lineno=103, col_offset=43), 'force', Load(), lineno=103, col_offset=43))], None, None, lineno=101, col_offset=24), lineno=101, col_offset=8), Expr(Call(Name('customize_compiler', Load(), lineno=104, col_offset=8), [Attribute(Name('self', Load(), lineno=104, col_offset=27), 'compiler', Load(), lineno=104, col_offset=27)], [], None, None, lineno=104, col_offset=8), lineno=104, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=106, col_offset=11), 'include_dirs', Load(), lineno=106, col_offset=11), [IsNot()], [Name('None', Load(), lineno=106, col_offset=36)], lineno=106, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=107, col_offset=12), 'compiler', Load(), lineno=107, col_offset=12), 'set_include_dirs', Load(), lineno=107, col_offset=12), [Attribute(Name('self', Load(), lineno=107, col_offset=43), 'include_dirs', Load(), lineno=107, col_offset=43)], [], None, None, lineno=107, col_offset=12), lineno=107, col_offset=12)], [], lineno=106, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=108, col_offset=11), 'define', Load(), lineno=108, col_offset=11), [IsNot()], [Name('None', Load(), lineno=108, col_offset=30)], lineno=108, col_offset=11), [For(Tuple([Name('name', Store(), lineno=110, col_offset=17), Name('value', Store(), lineno=110, col_offset=22)], Store(), lineno=110, col_offset=17), Attribute(Name('self', Load(), lineno=110, col_offset=32), 'define', Load(), lineno=110, col_offset=32), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=111, col_offset=16), 'compiler', Load(), lineno=111, col_offset=16), 'define_macro', Load(), lineno=111, col_offset=16), [Name('name', Load(), lineno=111, col_offset=43), Name('value', Load(), lineno=111, col_offset=49)], [], None, None, lineno=111, col_offset=16), lineno=111, col_offset=16)], [], lineno=110, col_offset=12)], [], lineno=108, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=112, col_offset=11), 'undef', Load(), lineno=112, col_offset=11), [IsNot()], [Name('None', Load(), lineno=112, col_offset=29)], lineno=112, col_offset=11), [For(Name('macro', Store(), lineno=113, col_offset=16), Attribute(Name('self', Load(), lineno=113, col_offset=25), 'undef', Load(), lineno=113, col_offset=25), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=114, col_offset=16), 'compiler', Load(), lineno=114, col_offset=16), 'undefine_macro', Load(), lineno=114, col_offset=16), [Name('macro', Load(), lineno=114, col_offset=45)], [], None, None, lineno=114, col_offset=16), lineno=114, col_offset=16)], [], lineno=113, col_offset=12)], [], lineno=112, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=116, col_offset=8), 'build_libraries', Load(), lineno=116, col_offset=8), [Attribute(Name('self', Load(), lineno=116, col_offset=29), 'libraries', Load(), lineno=116, col_offset=29)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8)], [], lineno=95, col_offset=4), FunctionDef('check_library_list', arguments([Name('self', Param(), lineno=119, col_offset=27), Name('libraries', Param(), lineno=119, col_offset=33)], None, None, []), [Expr(Str("Ensure that the list of libraries is valid.\n\n        `library` is presumably provided as a command option 'libraries'.\n        This method checks that it is a list of 2-tuples, where the tuples\n        are (library_name, build_info_dict).\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        ", lineno=128, col_offset=-1), lineno=128, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=129, col_offset=15), [Name('libraries', Load(), lineno=129, col_offset=26), Name('list', Load(), lineno=129, col_offset=37)], [], None, None, lineno=129, col_offset=15), lineno=129, col_offset=11), [Raise(Name('DistutilsSetupError', Load(), lineno=130, col_offset=18), Str("'libraries' option must be a list of tuples", lineno=131, col_offset=18), None, lineno=130, col_offset=12)], [], lineno=129, col_offset=8), For(Name('lib', Store(), lineno=133, col_offset=12), Name('libraries', Load(), lineno=133, col_offset=19), [If(BoolOp(And(), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=134, col_offset=19), [Name('lib', Load(), lineno=134, col_offset=30), Name('tuple', Load(), lineno=134, col_offset=35)], [], None, None, lineno=134, col_offset=19), lineno=134, col_offset=15), Compare(Call(Name('len', Load(), lineno=134, col_offset=46), [Name('lib', Load(), lineno=134, col_offset=50)], [], None, None, lineno=134, col_offset=46), [NotEq()], [Num(2, lineno=134, col_offset=58)], lineno=134, col_offset=46)], lineno=134, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=135, col_offset=22), Str("each element of 'libraries' must a 2-tuple", lineno=136, col_offset=22), None, lineno=135, col_offset=16)], [], lineno=134, col_offset=12), Assign([Tuple([Name('name', Store(), lineno=138, col_offset=12), Name('build_info', Store(), lineno=138, col_offset=18)], Store(), lineno=138, col_offset=12)], Name('lib', Load(), lineno=138, col_offset=31), lineno=138, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=140, col_offset=19), [Name('name', Load(), lineno=140, col_offset=30), Name('str', Load(), lineno=140, col_offset=36)], [], None, None, lineno=140, col_offset=19), lineno=140, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=141, col_offset=22), BinOp(Str("first element of each tuple in 'libraries' ", lineno=142, col_offset=22), Add(), Str('must be a string (the library name)', lineno=143, col_offset=22), lineno=142, col_offset=22), None, lineno=141, col_offset=16)], [], lineno=140, col_offset=12), If(BoolOp(Or(), [Compare(Str('/', lineno=144, col_offset=15), [In()], [Name('name', Load(), lineno=144, col_offset=22)], lineno=144, col_offset=15), BoolOp(And(), [Compare(Attribute(Name('os', Load(), lineno=144, col_offset=31), 'sep', Load(), lineno=144, col_offset=31), [NotEq()], [Str('/', lineno=144, col_offset=41)], lineno=144, col_offset=31), Compare(Attribute(Name('os', Load(), lineno=144, col_offset=49), 'sep', Load(), lineno=144, col_offset=49), [In()], [Name('name', Load(), lineno=144, col_offset=59)], lineno=144, col_offset=49)], lineno=144, col_offset=31)], lineno=144, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=145, col_offset=22), BinOp(BinOp(Str("bad library name '%s': ", lineno=146, col_offset=23), Add(), Str('may not contain directory separators', lineno=147, col_offset=23), lineno=146, col_offset=23), Mod(), Subscript(Name('lib', Load(), lineno=148, col_offset=22), Index(Num(0, lineno=148, col_offset=26)), Load(), lineno=148, col_offset=22), lineno=146, col_offset=22), None, lineno=145, col_offset=16)], [], lineno=144, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=150, col_offset=19), [Name('build_info', Load(), lineno=150, col_offset=30), Name('dict', Load(), lineno=150, col_offset=42)], [], None, None, lineno=150, col_offset=19), lineno=150, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=151, col_offset=22), BinOp(Str("second element of each tuple in 'libraries' ", lineno=152, col_offset=22), Add(), Str('must be a dictionary (build info)', lineno=153, col_offset=22), lineno=152, col_offset=22), None, lineno=151, col_offset=16)], [], lineno=150, col_offset=12)], [], lineno=133, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('get_library_names', arguments([Name('self', Param(), lineno=155, col_offset=26)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=158, col_offset=15), 'libraries', Load(), lineno=158, col_offset=15), lineno=158, col_offset=11), [Return(Name('None', Load(), lineno=159, col_offset=19), lineno=159, col_offset=12)], [], lineno=158, col_offset=8), Assign([Name('lib_names', Store(), lineno=161, col_offset=8)], List([], Load(), lineno=161, col_offset=20), lineno=161, col_offset=8), For(Tuple([Name('lib_name', Store(), lineno=162, col_offset=13), Name('build_info', Store(), lineno=162, col_offset=23)], Store(), lineno=162, col_offset=13), Attribute(Name('self', Load(), lineno=162, col_offset=38), 'libraries', Load(), lineno=162, col_offset=38), [Expr(Call(Attribute(Name('lib_names', Load(), lineno=163, col_offset=12), 'append', Load(), lineno=163, col_offset=12), [Name('lib_name', Load(), lineno=163, col_offset=29)], [], None, None, lineno=163, col_offset=12), lineno=163, col_offset=12)], [], lineno=162, col_offset=8), Return(Name('lib_names', Load(), lineno=164, col_offset=15), lineno=164, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('get_source_files', arguments([Name('self', Param(), lineno=167, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=168, col_offset=8), 'check_library_list', Load(), lineno=168, col_offset=8), [Attribute(Name('self', Load(), lineno=168, col_offset=32), 'libraries', Load(), lineno=168, col_offset=32)], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8), Assign([Name('filenames', Store(), lineno=169, col_offset=8)], List([], Load(), lineno=169, col_offset=20), lineno=169, col_offset=8), For(Tuple([Name('lib_name', Store(), lineno=170, col_offset=13), Name('build_info', Store(), lineno=170, col_offset=23)], Store(), lineno=170, col_offset=13), Attribute(Name('self', Load(), lineno=170, col_offset=38), 'libraries', Load(), lineno=170, col_offset=38), [Assign([Name('sources', Store(), lineno=171, col_offset=12)], Call(Attribute(Name('build_info', Load(), lineno=171, col_offset=22), 'get', Load(), lineno=171, col_offset=22), [Str('sources', lineno=171, col_offset=37)], [], None, None, lineno=171, col_offset=22), lineno=171, col_offset=12), If(BoolOp(Or(), [Compare(Name('sources', Load(), lineno=172, col_offset=15), [Is()], [Name('None', Load(), lineno=172, col_offset=26)], lineno=172, col_offset=15), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=172, col_offset=38), [Name('sources', Load(), lineno=172, col_offset=49), Tuple([Name('list', Load(), lineno=172, col_offset=59), Name('tuple', Load(), lineno=172, col_offset=65)], Load(), lineno=172, col_offset=59)], [], None, None, lineno=172, col_offset=38), lineno=172, col_offset=34)], lineno=172, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=173, col_offset=22), BinOp(Str("in 'libraries' option (library '%s'), 'sources' must be present and must be a list of source filenames", lineno=174, col_offset=23), Mod(), Name('lib_name', Load(), lineno=176, col_offset=55), lineno=174, col_offset=22), None, lineno=173, col_offset=16)], [], lineno=172, col_offset=12), Expr(Call(Attribute(Name('filenames', Load(), lineno=178, col_offset=12), 'extend', Load(), lineno=178, col_offset=12), [Name('sources', Load(), lineno=178, col_offset=29)], [], None, None, lineno=178, col_offset=12), lineno=178, col_offset=12)], [], lineno=170, col_offset=8), Return(Name('filenames', Load(), lineno=179, col_offset=15), lineno=179, col_offset=8)], [], lineno=167, col_offset=4), FunctionDef('build_libraries', arguments([Name('self', Param(), lineno=181, col_offset=24), Name('libraries', Param(), lineno=181, col_offset=30)], None, None, []), [For(Tuple([Name('lib_name', Store(), lineno=182, col_offset=13), Name('build_info', Store(), lineno=182, col_offset=23)], Store(), lineno=182, col_offset=13), Name('libraries', Load(), lineno=182, col_offset=38), [Assign([Name('sources', Store(), lineno=183, col_offset=12)], Call(Attribute(Name('build_info', Load(), lineno=183, col_offset=22), 'get', Load(), lineno=183, col_offset=22), [Str('sources', lineno=183, col_offset=37)], [], None, None, lineno=183, col_offset=22), lineno=183, col_offset=12), If(BoolOp(Or(), [Compare(Name('sources', Load(), lineno=184, col_offset=15), [Is()], [Name('None', Load(), lineno=184, col_offset=26)], lineno=184, col_offset=15), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=184, col_offset=38), [Name('sources', Load(), lineno=184, col_offset=49), Tuple([Name('list', Load(), lineno=184, col_offset=59), Name('tuple', Load(), lineno=184, col_offset=65)], Load(), lineno=184, col_offset=59)], [], None, None, lineno=184, col_offset=38), lineno=184, col_offset=34)], lineno=184, col_offset=15), [Raise(Name('DistutilsSetupError', Load(), lineno=185, col_offset=22), BinOp(BinOp(BinOp(Str("in 'libraries' option (library '%s'), ", lineno=186, col_offset=23), Add(), Str("'sources' must be present and must be ", lineno=187, col_offset=23), lineno=186, col_offset=23), Add(), Str('a list of source filenames', lineno=188, col_offset=23), lineno=187, col_offset=64), Mod(), Name('lib_name', Load(), lineno=188, col_offset=55), lineno=186, col_offset=22), None, lineno=185, col_offset=16)], [], lineno=184, col_offset=12), Assign([Name('sources', Store(), lineno=189, col_offset=12)], Call(Name('list', Load(), lineno=189, col_offset=22), [Name('sources', Load(), lineno=189, col_offset=27)], [], None, None, lineno=189, col_offset=22), lineno=189, col_offset=12), Expr(Call(Attribute(Name('log', Load(), lineno=191, col_offset=12), 'info', Load(), lineno=191, col_offset=12), [Str("building '%s' library", lineno=191, col_offset=21), Name('lib_name', Load(), lineno=191, col_offset=46)], [], None, None, lineno=191, col_offset=12), lineno=191, col_offset=12), Assign([Name('macros', Store(), lineno=196, col_offset=12)], Call(Attribute(Name('build_info', Load(), lineno=196, col_offset=21), 'get', Load(), lineno=196, col_offset=21), [Str('macros', lineno=196, col_offset=36)], [], None, None, lineno=196, col_offset=21), lineno=196, col_offset=12), Assign([Name('include_dirs', Store(), lineno=197, col_offset=12)], Call(Attribute(Name('build_info', Load(), lineno=197, col_offset=27), 'get', Load(), lineno=197, col_offset=27), [Str('include_dirs', lineno=197, col_offset=42)], [], None, None, lineno=197, col_offset=27), lineno=197, col_offset=12), Assign([Name('objects', Store(), lineno=198, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=198, col_offset=22), 'compiler', Load(), lineno=198, col_offset=22), 'compile', Load(), lineno=198, col_offset=22), [Name('sources', Load(), lineno=198, col_offset=44)], [keyword('output_dir', Attribute(Name('self', Load(), lineno=199, col_offset=55), 'build_temp', Load(), lineno=199, col_offset=55)), keyword('macros', Name('macros', Load(), lineno=200, col_offset=51)), keyword('include_dirs', Name('include_dirs', Load(), lineno=201, col_offset=57)), keyword('debug', Attribute(Name('self', Load(), lineno=202, col_offset=50), 'debug', Load(), lineno=202, col_offset=50))], None, None, lineno=198, col_offset=22), lineno=198, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=207, col_offset=12), 'compiler', Load(), lineno=207, col_offset=12), 'create_static_lib', Load(), lineno=207, col_offset=12), [Name('objects', Load(), lineno=207, col_offset=44), Name('lib_name', Load(), lineno=207, col_offset=53)], [keyword('output_dir', Attribute(Name('self', Load(), lineno=208, col_offset=55), 'build_clib', Load(), lineno=208, col_offset=55)), keyword('debug', Attribute(Name('self', Load(), lineno=209, col_offset=50), 'debug', Load(), lineno=209, col_offset=50))], None, None, lineno=207, col_offset=12), lineno=207, col_offset=12)], [], lineno=182, col_offset=8)], [], lineno=181, col_offset=4)], [], lineno=30, col_offset=0)])
