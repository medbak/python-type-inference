Module([Expr(Str('Doctest for method/function calls.\n\nWe\'re going the use these types for extra testing\n\n    >>> from UserList import UserList\n    >>> from UserDict import UserDict\n\nWe\'re defining four helper functions\n\n    >>> def e(a,b):\n    ...     print a, b\n\n    >>> def f(*a, **k):\n    ...     print a, test_support.sortdict(k)\n\n    >>> def g(x, *y, **z):\n    ...     print x, y, test_support.sortdict(z)\n\n    >>> def h(j=1, a=2, h=3):\n    ...     print j, a, h\n\nArgument list examples\n\n    >>> f()\n    () {}\n    >>> f(1)\n    (1,) {}\n    >>> f(1, 2)\n    (1, 2) {}\n    >>> f(1, 2, 3)\n    (1, 2, 3) {}\n    >>> f(1, 2, 3, *(4, 5))\n    (1, 2, 3, 4, 5) {}\n    >>> f(1, 2, 3, *[4, 5])\n    (1, 2, 3, 4, 5) {}\n    >>> f(1, 2, 3, *UserList([4, 5]))\n    (1, 2, 3, 4, 5) {}\n\nHere we add keyword arguments\n\n    >>> f(1, 2, 3, **{\'a\':4, \'b\':5})\n    (1, 2, 3) {\'a\': 4, \'b\': 5}\n    >>> f(1, 2, 3, *[4, 5], **{\'a\':6, \'b\':7})\n    (1, 2, 3, 4, 5) {\'a\': 6, \'b\': 7}\n    >>> f(1, 2, 3, x=4, y=5, *(6, 7), **{\'a\':8, \'b\': 9})\n    (1, 2, 3, 6, 7) {\'a\': 8, \'b\': 9, \'x\': 4, \'y\': 5}\n\n    >>> f(1, 2, 3, **UserDict(a=4, b=5))\n    (1, 2, 3) {\'a\': 4, \'b\': 5}\n    >>> f(1, 2, 3, *(4, 5), **UserDict(a=6, b=7))\n    (1, 2, 3, 4, 5) {\'a\': 6, \'b\': 7}\n    >>> f(1, 2, 3, x=4, y=5, *(6, 7), **UserDict(a=8, b=9))\n    (1, 2, 3, 6, 7) {\'a\': 8, \'b\': 9, \'x\': 4, \'y\': 5}\n\nExamples with invalid arguments (TypeErrors). We\'re also testing the function\nnames in the exception messages.\n\nVerify clearing of SF bug #733667\n\n    >>> e(c=4)\n    Traceback (most recent call last):\n      ...\n    TypeError: e() got an unexpected keyword argument \'c\'\n\n    >>> g()\n    Traceback (most recent call last):\n      ...\n    TypeError: g() takes at least 1 argument (0 given)\n\n    >>> g(*())\n    Traceback (most recent call last):\n      ...\n    TypeError: g() takes at least 1 argument (0 given)\n\n    >>> g(*(), **{})\n    Traceback (most recent call last):\n      ...\n    TypeError: g() takes at least 1 argument (0 given)\n\n    >>> g(1)\n    1 () {}\n    >>> g(1, 2)\n    1 (2,) {}\n    >>> g(1, 2, 3)\n    1 (2, 3) {}\n    >>> g(1, 2, 3, *(4, 5))\n    1 (2, 3, 4, 5) {}\n\n    >>> class Nothing: pass\n    ...\n    >>> g(*Nothing())\n    Traceback (most recent call last):\n      ...\n    TypeError: g() argument after * must be a sequence, not instance\n\n    >>> class Nothing:\n    ...     def __len__(self): return 5\n    ...\n\n    >>> g(*Nothing())\n    Traceback (most recent call last):\n      ...\n    TypeError: g() argument after * must be a sequence, not instance\n\n    >>> class Nothing():\n    ...     def __len__(self): return 5\n    ...     def __getitem__(self, i):\n    ...         if i<3: return i\n    ...         else: raise IndexError(i)\n    ...\n\n    >>> g(*Nothing())\n    0 (1, 2) {}\n\n    >>> class Nothing:\n    ...     def __init__(self): self.c = 0\n    ...     def __iter__(self): return self\n    ...     def next(self):\n    ...         if self.c == 4:\n    ...             raise StopIteration\n    ...         c = self.c\n    ...         self.c += 1\n    ...         return c\n    ...\n\n    >>> g(*Nothing())\n    0 (1, 2, 3) {}\n\nMake sure that the function doesn\'t stomp the dictionary\n\n    >>> d = {\'a\': 1, \'b\': 2, \'c\': 3}\n    >>> d2 = d.copy()\n    >>> g(1, d=4, **d)\n    1 () {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4}\n    >>> d == d2\n    True\n\nWhat about willful misconduct?\n\n    >>> def saboteur(**kw):\n    ...     kw[\'x\'] = \'m\'\n    ...     return kw\n\n    >>> d = {}\n    >>> kw = saboteur(a=1, **d)\n    >>> d\n    {}\n\n\n    >>> g(1, 2, 3, **{\'x\': 4, \'y\': 5})\n    Traceback (most recent call last):\n      ...\n    TypeError: g() got multiple values for keyword argument \'x\'\n\n    >>> f(**{1:2})\n    Traceback (most recent call last):\n      ...\n    TypeError: f() keywords must be strings\n\n    >>> h(**{\'e\': 2})\n    Traceback (most recent call last):\n      ...\n    TypeError: h() got an unexpected keyword argument \'e\'\n\n    >>> h(*h)\n    Traceback (most recent call last):\n      ...\n    TypeError: h() argument after * must be a sequence, not function\n\n    >>> dir(*h)\n    Traceback (most recent call last):\n      ...\n    TypeError: dir() argument after * must be a sequence, not function\n\n    >>> None(*h)\n    Traceback (most recent call last):\n      ...\n    TypeError: NoneType object argument after * must be a sequence, not function\n\n    >>> h(**h)\n    Traceback (most recent call last):\n      ...\n    TypeError: h() argument after ** must be a mapping, not function\n\n    >>> dir(**h)\n    Traceback (most recent call last):\n      ...\n    TypeError: dir() argument after ** must be a mapping, not function\n\n    >>> None(**h)\n    Traceback (most recent call last):\n      ...\n    TypeError: NoneType object argument after ** must be a mapping, not function\n\n    >>> dir(b=1, **{\'b\': 1})\n    Traceback (most recent call last):\n      ...\n    TypeError: dir() got multiple values for keyword argument \'b\'\n\nAnother helper function\n\n    >>> def f2(*a, **b):\n    ...     return a, b\n\n\n    >>> d = {}\n    >>> for i in xrange(512):\n    ...     key = \'k%d\' % i\n    ...     d[key] = i\n    >>> a, b = f2(1, *(2,3), **d)\n    >>> len(a), len(b), b == d\n    (3, 512, True)\n\n    >>> class Foo:\n    ...     def method(self, arg1, arg2):\n    ...         return arg1+arg2\n\n    >>> x = Foo()\n    >>> Foo.method(*(x, 1, 2))\n    3\n    >>> Foo.method(x, *(1, 2))\n    3\n    >>> Foo.method(*(1, 2, 3))\n    Traceback (most recent call last):\n      ...\n    TypeError: unbound method method() must be called with Foo instance as first argument (got int instance instead)\n\n    >>> Foo.method(1, *[2, 3])\n    Traceback (most recent call last):\n      ...\n    TypeError: unbound method method() must be called with Foo instance as first argument (got int instance instead)\n\nA PyCFunction that takes only positional parameters shoud allow an\nempty keyword dictionary to pass without a complaint, but raise a\nTypeError if te dictionary is not empty\n\n    >>> try:\n    ...     silence = id(1, *{})\n    ...     True\n    ... except:\n    ...     False\n    True\n\n    >>> id(1, **{\'foo\': 1})\n    Traceback (most recent call last):\n      ...\n    TypeError: id() takes no keyword arguments\n\nA corner case of keyword dictionary items being deleted during\nthe function call setup. See <http://bugs.python.org/issue2016>.\n\n    >>> class Name(str):\n    ...     def __eq__(self, other):\n    ...         try:\n    ...              del x[self]\n    ...         except KeyError:\n    ...              pass\n    ...         return str.__eq__(self, other)\n    ...     def __hash__(self):\n    ...         return str.__hash__(self)\n\n    >>> x = {Name("a"):1, Name("b"):2}\n    >>> def f(a, b):\n    ...     print a,b\n    >>> f(**x)\n    1 2\n\nA obscure message:\n\n    >>> def f(a, b):\n    ...    pass\n    >>> f(b=1)\n    Traceback (most recent call last):\n      ...\n    TypeError: f() takes exactly 2 arguments (1 given)\n\nThe number of arguments passed in includes keywords:\n\n    >>> def f(a):\n    ...    pass\n    >>> f(6, a=4, *(1, 2, 3))\n    Traceback (most recent call last):\n      ...\n    TypeError: f() takes exactly 1 argument (5 given)\n', lineno=291, col_offset=-1), lineno=291, col_offset=-1), Import([alias('unittest', None)], lineno=293, col_offset=0), Import([alias('sys', None)], lineno=294, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=295, col_offset=0), ClassDef('ExtCallTest', [Attribute(Name('unittest', Load(), lineno=298, col_offset=18), 'TestCase', Load(), lineno=298, col_offset=18)], [FunctionDef('test_unicode_keywords', arguments([Name('self', Param(), lineno=300, col_offset=30)], None, None, []), [FunctionDef('f', arguments([Name('a', Param(), lineno=301, col_offset=14)], None, None, []), [Return(Name('a', Load(), lineno=302, col_offset=19), lineno=302, col_offset=12)], [], lineno=301, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=303, col_offset=8), 'assertEqual', Load(), lineno=303, col_offset=8), [Call(Name('f', Load(), lineno=303, col_offset=25), [], [], None, Dict([Str(u'a', lineno=303, col_offset=30)], [Num(4, lineno=303, col_offset=36)], lineno=303, col_offset=29), lineno=303, col_offset=25), Num(4, lineno=303, col_offset=41)], [], None, None, lineno=303, col_offset=8), lineno=303, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=304, col_offset=8), 'assertRaises', Load(), lineno=304, col_offset=8), [Name('TypeError', Load(), lineno=304, col_offset=26), Name('f', Load(), lineno=304, col_offset=37)], [], None, Dict([Str(u'st\xf6ren', lineno=304, col_offset=43)], [Num(4, lineno=304, col_offset=55)], lineno=304, col_offset=42), lineno=304, col_offset=8), lineno=304, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=305, col_offset=8), 'assertRaises', Load(), lineno=305, col_offset=8), [Name('TypeError', Load(), lineno=305, col_offset=26), Name('f', Load(), lineno=305, col_offset=37)], [], None, Dict([Str(u'someLongString', lineno=305, col_offset=43)], [Num(2, lineno=305, col_offset=61)], lineno=305, col_offset=42), lineno=305, col_offset=8), lineno=305, col_offset=8), TryExcept([Expr(Call(Name('f', Load(), lineno=307, col_offset=12), [], [keyword('a', Num(4, lineno=307, col_offset=16))], None, Dict([Str(u'a', lineno=307, col_offset=22)], [Num(4, lineno=307, col_offset=28)], lineno=307, col_offset=21), lineno=307, col_offset=12), lineno=307, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=308, col_offset=15), None, [Pass( lineno=309, col_offset=12)], lineno=308, col_offset=8)], [Expr(Call(Attribute(Name('self', Load(), lineno=311, col_offset=12), 'fail', Load(), lineno=311, col_offset=12), [Str("duplicate arguments didn't raise", lineno=311, col_offset=22)], [], None, None, lineno=311, col_offset=12), lineno=311, col_offset=12)], lineno=306, col_offset=8)], [], lineno=300, col_offset=4)], [], lineno=298, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=315, col_offset=4), 'run_doctest', Load(), lineno=315, col_offset=4), [Subscript(Attribute(Name('sys', Load(), lineno=315, col_offset=29), 'modules', Load(), lineno=315, col_offset=29), Index(Name('__name__', Load(), lineno=315, col_offset=41)), Load(), lineno=315, col_offset=29), Name('True', Load(), lineno=315, col_offset=52)], [], None, None, lineno=315, col_offset=4), lineno=315, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=316, col_offset=4), 'run_unittest', Load(), lineno=316, col_offset=4), [Name('ExtCallTest', Load(), lineno=316, col_offset=30)], [], None, None, lineno=316, col_offset=4), lineno=316, col_offset=4)], [], lineno=314, col_offset=0), If(Compare(Name('__name__', Load(), lineno=318, col_offset=3), [Eq()], [Str('__main__', lineno=318, col_offset=15)], lineno=318, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=319, col_offset=4), [], [], None, None, lineno=319, col_offset=4), lineno=319, col_offset=4)], [], lineno=318, col_offset=0)])
