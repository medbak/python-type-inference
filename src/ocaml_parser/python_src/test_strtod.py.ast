Module([Import([alias('random', None)], lineno=4, col_offset=0), Import([alias('struct', None)], lineno=5, col_offset=0), Import([alias('unittest', None)], lineno=6, col_offset=0), Import([alias('re', None)], lineno=7, col_offset=0), Import([alias('sys', None)], lineno=8, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=9, col_offset=0), If(Compare(Call(Name('getattr', Load(), lineno=11, col_offset=3), [Name('sys', Load(), lineno=11, col_offset=11), Str('float_repr_style', lineno=11, col_offset=16), Str('', lineno=11, col_offset=36)], [], None, None, lineno=11, col_offset=3), [NotEq()], [Str('short', lineno=11, col_offset=43)], lineno=11, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=12, col_offset=10), 'SkipTest', Load(), lineno=12, col_offset=10), [Str('correctly-rounded string->float conversions not available on this system', lineno=12, col_offset=28)], [], None, None, lineno=12, col_offset=10), None, None, lineno=12, col_offset=4)], [], lineno=11, col_offset=0), Assign([Name('strtod_parser', Store(), lineno=17, col_offset=0)], Attribute(Call(Attribute(Name('re', Load(), lineno=17, col_offset=16), 'compile', Load(), lineno=17, col_offset=16), [Str('    # A numeric string consists of:\n    (?P<sign>[-+])?          # an optional sign, followed by\n    (?=\\d|\\.\\d)              # a number with at least one digit\n    (?P<int>\\d*)             # having a (possibly empty) integer part\n    (?:\\.(?P<frac>\\d*))?     # followed by an optional fractional part\n    (?:E(?P<exp>[-+]?\\d+))?  # and an optional exponent\n    \\Z\n', lineno=24, col_offset=-1), BinOp(Attribute(Name('re', Load(), lineno=24, col_offset=5), 'VERBOSE', Load(), lineno=24, col_offset=5), BitOr(), Attribute(Name('re', Load(), lineno=24, col_offset=18), 'IGNORECASE', Load(), lineno=24, col_offset=18), lineno=24, col_offset=5)], [], None, None, lineno=17, col_offset=16), 'match', Load(), lineno=17, col_offset=16), lineno=17, col_offset=0), FunctionDef('strtod', arguments([Name('s', Param(), lineno=28, col_offset=11), Name('mant_dig', Param(), lineno=28, col_offset=14), Name('min_exp', Param(), lineno=28, col_offset=27), Name('max_exp', Param(), lineno=28, col_offset=44)], None, None, [Num(53, lineno=28, col_offset=23), Num(-1021, lineno=28, col_offset=38), Num(1024, lineno=28, col_offset=54)]), [Expr(Str("Convert a finite decimal string to a hex string representing an\n    IEEE 754 binary64 float.  Return 'inf' or '-inf' on overflow.\n    This function makes no use of floating-point arithmetic at any\n    stage.", lineno=32, col_offset=-1), lineno=32, col_offset=-1), Assign([Name('m', Store(), lineno=36, col_offset=4)], Call(Name('strtod_parser', Load(), lineno=36, col_offset=8), [Name('s', Load(), lineno=36, col_offset=22)], [], None, None, lineno=36, col_offset=8), lineno=36, col_offset=4), If(Compare(Name('m', Load(), lineno=37, col_offset=7), [Is()], [Name('None', Load(), lineno=37, col_offset=12)], lineno=37, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=38, col_offset=14), [Str('invalid numeric string', lineno=38, col_offset=25)], [], None, None, lineno=38, col_offset=14), None, None, lineno=38, col_offset=8)], [], lineno=37, col_offset=4), Assign([Name('fraction', Store(), lineno=39, col_offset=4)], BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=39, col_offset=15), 'group', Load(), lineno=39, col_offset=15), [Str('frac', lineno=39, col_offset=23)], [], None, None, lineno=39, col_offset=15), Str('', lineno=39, col_offset=34)], lineno=39, col_offset=15), lineno=39, col_offset=4), Assign([Name('intpart', Store(), lineno=40, col_offset=4)], Call(Name('int', Load(), lineno=40, col_offset=14), [BinOp(Call(Attribute(Name('m', Load(), lineno=40, col_offset=18), 'group', Load(), lineno=40, col_offset=18), [Str('int', lineno=40, col_offset=26)], [], None, None, lineno=40, col_offset=18), Add(), Name('fraction', Load(), lineno=40, col_offset=35), lineno=40, col_offset=18)], [], None, None, lineno=40, col_offset=14), lineno=40, col_offset=4), Assign([Name('exp', Store(), lineno=41, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=41, col_offset=10), [BoolOp(Or(), [Call(Attribute(Name('m', Load(), lineno=41, col_offset=14), 'group', Load(), lineno=41, col_offset=14), [Str('exp', lineno=41, col_offset=22)], [], None, None, lineno=41, col_offset=14), Str('0', lineno=41, col_offset=32)], lineno=41, col_offset=14)], [], None, None, lineno=41, col_offset=10), Sub(), Call(Name('len', Load(), lineno=41, col_offset=39), [Name('fraction', Load(), lineno=41, col_offset=43)], [], None, None, lineno=41, col_offset=39), lineno=41, col_offset=10), lineno=41, col_offset=4), Assign([Name('negative', Store(), lineno=42, col_offset=4)], Compare(Call(Attribute(Name('m', Load(), lineno=42, col_offset=15), 'group', Load(), lineno=42, col_offset=15), [Str('sign', lineno=42, col_offset=23)], [], None, None, lineno=42, col_offset=15), [Eq()], [Str('-', lineno=42, col_offset=34)], lineno=42, col_offset=15), lineno=42, col_offset=4), Assign([Tuple([Name('a', Store(), lineno=43, col_offset=4), Name('b', Store(), lineno=43, col_offset=7)], Store(), lineno=43, col_offset=4)], Tuple([BinOp(Name('intpart', Load(), lineno=43, col_offset=11), Mult(), BinOp(Num(10, lineno=43, col_offset=19), Pow(), Call(Name('max', Load(), lineno=43, col_offset=23), [Name('exp', Load(), lineno=43, col_offset=27), Num(0, lineno=43, col_offset=32)], [], None, None, lineno=43, col_offset=23), lineno=43, col_offset=19), lineno=43, col_offset=11), BinOp(Num(10, lineno=43, col_offset=36), Pow(), Call(Name('max', Load(), lineno=43, col_offset=40), [Num(0, lineno=43, col_offset=44), UnaryOp(USub(), Name('exp', Load(), lineno=43, col_offset=48), lineno=43, col_offset=47)], [], None, None, lineno=43, col_offset=40), lineno=43, col_offset=36)], Load(), lineno=43, col_offset=11), lineno=43, col_offset=4), If(UnaryOp(Not(), Name('a', Load(), lineno=46, col_offset=11), lineno=46, col_offset=7), [Return(IfExp(Name('negative', Load(), lineno=47, col_offset=30), Str('-0x0.0p+0', lineno=47, col_offset=15), Str('0x0.0p+0', lineno=47, col_offset=44), lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=46, col_offset=4), Assign([Name('d', Store(), lineno=51, col_offset=4)], BinOp(Call(Attribute(Name('a', Load(), lineno=51, col_offset=8), 'bit_length', Load(), lineno=51, col_offset=8), [], [], None, None, lineno=51, col_offset=8), Sub(), Call(Attribute(Name('b', Load(), lineno=51, col_offset=25), 'bit_length', Load(), lineno=51, col_offset=25), [], [], None, None, lineno=51, col_offset=25), lineno=51, col_offset=8), lineno=51, col_offset=4), AugAssign(Name('d', Store(), lineno=52, col_offset=4), Add(), Compare(IfExp(Compare(Name('d', Load(), lineno=52, col_offset=20), [GtE()], [Num(0, lineno=52, col_offset=25)], lineno=52, col_offset=20), BinOp(Name('a', Load(), lineno=52, col_offset=10), RShift(), Name('d', Load(), lineno=52, col_offset=15), lineno=52, col_offset=10), BinOp(Name('a', Load(), lineno=52, col_offset=32), LShift(), UnaryOp(USub(), Name('d', Load(), lineno=52, col_offset=38), lineno=52, col_offset=37), lineno=52, col_offset=32), lineno=52, col_offset=10), [GtE()], [Name('b', Load(), lineno=52, col_offset=44)], lineno=52, col_offset=9), lineno=52, col_offset=4), Assign([Name('e', Store(), lineno=53, col_offset=4)], BinOp(Call(Name('max', Load(), lineno=53, col_offset=8), [Name('d', Load(), lineno=53, col_offset=12), Name('min_exp', Load(), lineno=53, col_offset=15)], [], None, None, lineno=53, col_offset=8), Sub(), Name('mant_dig', Load(), lineno=53, col_offset=26), lineno=53, col_offset=8), lineno=53, col_offset=4), Assign([Tuple([Name('a', Store(), lineno=56, col_offset=4), Name('b', Store(), lineno=56, col_offset=7)], Store(), lineno=56, col_offset=4)], Tuple([BinOp(Name('a', Load(), lineno=56, col_offset=11), LShift(), Call(Name('max', Load(), lineno=56, col_offset=16), [UnaryOp(USub(), Name('e', Load(), lineno=56, col_offset=21), lineno=56, col_offset=20), Num(0, lineno=56, col_offset=24)], [], None, None, lineno=56, col_offset=16), lineno=56, col_offset=11), BinOp(Name('b', Load(), lineno=56, col_offset=28), LShift(), Call(Name('max', Load(), lineno=56, col_offset=33), [Name('e', Load(), lineno=56, col_offset=37), Num(0, lineno=56, col_offset=40)], [], None, None, lineno=56, col_offset=33), lineno=56, col_offset=28)], Load(), lineno=56, col_offset=11), lineno=56, col_offset=4), Assign([Tuple([Name('q', Store(), lineno=57, col_offset=4), Name('r', Store(), lineno=57, col_offset=7)], Store(), lineno=57, col_offset=4)], Call(Name('divmod', Load(), lineno=57, col_offset=11), [Name('a', Load(), lineno=57, col_offset=18), Name('b', Load(), lineno=57, col_offset=21)], [], None, None, lineno=57, col_offset=11), lineno=57, col_offset=4), If(BoolOp(Or(), [Compare(BinOp(Num(2, lineno=58, col_offset=7), Mult(), Name('r', Load(), lineno=58, col_offset=9), lineno=58, col_offset=7), [Gt()], [Name('b', Load(), lineno=58, col_offset=13)], lineno=58, col_offset=7), BoolOp(And(), [Compare(BinOp(Num(2, lineno=58, col_offset=18), Mult(), Name('r', Load(), lineno=58, col_offset=20), lineno=58, col_offset=18), [Eq()], [Name('b', Load(), lineno=58, col_offset=25)], lineno=58, col_offset=18), BinOp(Name('q', Load(), lineno=58, col_offset=31), BitAnd(), Num(1, lineno=58, col_offset=35), lineno=58, col_offset=31)], lineno=58, col_offset=18)], lineno=58, col_offset=7), [AugAssign(Name('q', Store(), lineno=59, col_offset=8), Add(), Num(1, lineno=59, col_offset=13), lineno=59, col_offset=8), If(Compare(Call(Attribute(Name('q', Load(), lineno=60, col_offset=11), 'bit_length', Load(), lineno=60, col_offset=11), [], [], None, None, lineno=60, col_offset=11), [Eq()], [BinOp(Name('mant_dig', Load(), lineno=60, col_offset=29), Add(), Num(1, lineno=60, col_offset=38), lineno=60, col_offset=29)], lineno=60, col_offset=11), [AugAssign(Name('q', Store(), lineno=61, col_offset=12), FloorDiv(), Num(2, lineno=61, col_offset=18), lineno=61, col_offset=12), AugAssign(Name('e', Store(), lineno=62, col_offset=12), Add(), Num(1, lineno=62, col_offset=17), lineno=62, col_offset=12)], [], lineno=60, col_offset=8)], [], lineno=58, col_offset=4), Assert(BoolOp(And(), [Compare(Call(Attribute(Name('q', Load(), lineno=65, col_offset=11), 'bit_length', Load(), lineno=65, col_offset=11), [], [], None, None, lineno=65, col_offset=11), [LtE()], [Name('mant_dig', Load(), lineno=65, col_offset=29)], lineno=65, col_offset=11), Compare(Name('e', Load(), lineno=65, col_offset=42), [GtE()], [BinOp(Name('min_exp', Load(), lineno=65, col_offset=47), Sub(), Name('mant_dig', Load(), lineno=65, col_offset=57), lineno=65, col_offset=47)], lineno=65, col_offset=42)], lineno=65, col_offset=11), None, lineno=65, col_offset=4), Assert(BoolOp(Or(), [Compare(Call(Attribute(Name('q', Load(), lineno=66, col_offset=11), 'bit_length', Load(), lineno=66, col_offset=11), [], [], None, None, lineno=66, col_offset=11), [Eq()], [Name('mant_dig', Load(), lineno=66, col_offset=29)], lineno=66, col_offset=11), Compare(Name('e', Load(), lineno=66, col_offset=41), [Eq()], [BinOp(Name('min_exp', Load(), lineno=66, col_offset=46), Sub(), Name('mant_dig', Load(), lineno=66, col_offset=56), lineno=66, col_offset=46)], lineno=66, col_offset=41)], lineno=66, col_offset=11), None, lineno=66, col_offset=4), If(Compare(BinOp(Name('e', Load(), lineno=69, col_offset=7), Add(), Call(Attribute(Name('q', Load(), lineno=69, col_offset=11), 'bit_length', Load(), lineno=69, col_offset=11), [], [], None, None, lineno=69, col_offset=11), lineno=69, col_offset=7), [Gt()], [Name('max_exp', Load(), lineno=69, col_offset=28)], lineno=69, col_offset=7), [Return(IfExp(Name('negative', Load(), lineno=70, col_offset=25), Str('-inf', lineno=70, col_offset=15), Str('inf', lineno=70, col_offset=39), lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=69, col_offset=4), If(UnaryOp(Not(), Name('q', Load(), lineno=71, col_offset=11), lineno=71, col_offset=7), [Return(IfExp(Name('negative', Load(), lineno=72, col_offset=30), Str('-0x0.0p+0', lineno=72, col_offset=15), Str('0x0.0p+0', lineno=72, col_offset=44), lineno=72, col_offset=15), lineno=72, col_offset=8)], [], lineno=71, col_offset=4), Assign([Name('hexdigs', Store(), lineno=75, col_offset=4)], BinOp(Num(1, lineno=75, col_offset=14), Add(), BinOp(BinOp(Name('mant_dig', Load(), lineno=75, col_offset=19), Sub(), Num(2, lineno=75, col_offset=28), lineno=75, col_offset=19), FloorDiv(), Num(4, lineno=75, col_offset=32), lineno=75, col_offset=18), lineno=75, col_offset=14), lineno=75, col_offset=4), Assign([Name('shift', Store(), lineno=76, col_offset=4)], BinOp(Num(3, lineno=76, col_offset=12), Sub(), BinOp(BinOp(Name('mant_dig', Load(), lineno=76, col_offset=17), Sub(), Num(2, lineno=76, col_offset=26), lineno=76, col_offset=17), Mod(), Num(4, lineno=76, col_offset=29), lineno=76, col_offset=16), lineno=76, col_offset=12), lineno=76, col_offset=4), Assign([Tuple([Name('q', Store(), lineno=77, col_offset=4), Name('e', Store(), lineno=77, col_offset=7)], Store(), lineno=77, col_offset=4)], Tuple([BinOp(Name('q', Load(), lineno=77, col_offset=11), LShift(), Name('shift', Load(), lineno=77, col_offset=16), lineno=77, col_offset=11), BinOp(Name('e', Load(), lineno=77, col_offset=23), Sub(), Name('shift', Load(), lineno=77, col_offset=27), lineno=77, col_offset=23)], Load(), lineno=77, col_offset=11), lineno=77, col_offset=4), Return(Call(Attribute(Str('{}0x{:x}.{:0{}x}p{:+d}', lineno=78, col_offset=11), 'format', Load(), lineno=78, col_offset=11), [IfExp(Name('negative', Load(), lineno=79, col_offset=15), Str('-', lineno=79, col_offset=8), Str('', lineno=79, col_offset=29), lineno=79, col_offset=8), BinOp(Name('q', Load(), lineno=80, col_offset=8), FloorDiv(), BinOp(Num(16, lineno=80, col_offset=13), Pow(), Name('hexdigs', Load(), lineno=80, col_offset=17), lineno=80, col_offset=13), lineno=80, col_offset=8), BinOp(Name('q', Load(), lineno=81, col_offset=8), Mod(), BinOp(Num(16, lineno=81, col_offset=12), Pow(), Name('hexdigs', Load(), lineno=81, col_offset=16), lineno=81, col_offset=12), lineno=81, col_offset=8), Name('hexdigs', Load(), lineno=82, col_offset=8), BinOp(Name('e', Load(), lineno=83, col_offset=8), Add(), BinOp(Num(4, lineno=83, col_offset=12), Mult(), Name('hexdigs', Load(), lineno=83, col_offset=14), lineno=83, col_offset=12), lineno=83, col_offset=8)], [], None, None, lineno=78, col_offset=11), lineno=78, col_offset=4)], [], lineno=28, col_offset=0), Assign([Name('TEST_SIZE', Store(), lineno=85, col_offset=0)], Num(10, lineno=85, col_offset=12), lineno=85, col_offset=0), ClassDef('StrtodTests', [Attribute(Name('unittest', Load(), lineno=87, col_offset=18), 'TestCase', Load(), lineno=87, col_offset=18)], [FunctionDef('check_strtod', arguments([Name('self', Param(), lineno=88, col_offset=21), Name('s', Param(), lineno=88, col_offset=27)], None, None, []), [Expr(Str("Compare the result of Python's builtin correctly rounded\n        string->float conversion (using float) to a pure Python\n        correctly rounded string->float implementation.  Fail if the\n        two methods give different results.", lineno=92, col_offset=-1), lineno=92, col_offset=-1), TryExcept([Assign([Name('fs', Store(), lineno=95, col_offset=12)], Call(Name('float', Load(), lineno=95, col_offset=17), [Name('s', Load(), lineno=95, col_offset=23)], [], None, None, lineno=95, col_offset=17), lineno=95, col_offset=12)], [ExceptHandler(Name('OverflowError', Load(), lineno=96, col_offset=15), None, [Assign([Name('got', Store(), lineno=97, col_offset=12)], IfExp(Compare(Subscript(Name('s', Load(), lineno=97, col_offset=28), Index(Num(0, lineno=97, col_offset=30)), Load(), lineno=97, col_offset=28), [Eq()], [Str('-', lineno=97, col_offset=36)], lineno=97, col_offset=28), Str('-inf', lineno=97, col_offset=18), Str('inf', lineno=97, col_offset=45), lineno=97, col_offset=18), lineno=97, col_offset=12)], lineno=96, col_offset=8), ExceptHandler(Name('MemoryError', Load(), lineno=98, col_offset=15), None, [Assign([Name('got', Store(), lineno=99, col_offset=12)], Str('memory error', lineno=99, col_offset=18), lineno=99, col_offset=12)], lineno=98, col_offset=8)], [Assign([Name('got', Store(), lineno=101, col_offset=12)], Call(Attribute(Name('fs', Load(), lineno=101, col_offset=18), 'hex', Load(), lineno=101, col_offset=18), [], [], None, None, lineno=101, col_offset=18), lineno=101, col_offset=12)], lineno=94, col_offset=8), Assign([Name('expected', Store(), lineno=102, col_offset=8)], Call(Name('strtod', Load(), lineno=102, col_offset=19), [Name('s', Load(), lineno=102, col_offset=26)], [], None, None, lineno=102, col_offset=19), lineno=102, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=8), 'assertEqual', Load(), lineno=103, col_offset=8), [Name('expected', Load(), lineno=103, col_offset=25), Name('got', Load(), lineno=103, col_offset=35), Call(Attribute(Str('Incorrectly rounded str->float conversion for {}: expected {}, got {}', lineno=104, col_offset=25), 'format', Load(), lineno=104, col_offset=25), [Name('s', Load(), lineno=105, col_offset=54), Name('expected', Load(), lineno=105, col_offset=57), Name('got', Load(), lineno=105, col_offset=67)], [], None, None, lineno=104, col_offset=25)], [], None, None, lineno=103, col_offset=8), lineno=103, col_offset=8)], [], lineno=88, col_offset=4), FunctionDef('test_short_halfway_cases', arguments([Name('self', Param(), lineno=107, col_offset=33)], None, None, []), [For(Name('k', Store(), lineno=109, col_offset=12), Tuple([Num(0, lineno=109, col_offset=17), Num(5, lineno=109, col_offset=20), Num(10, lineno=109, col_offset=23), Num(15, lineno=109, col_offset=27), Num(20, lineno=109, col_offset=31)], Load(), lineno=109, col_offset=17), [Assign([Name('upper', Store(), lineno=111, col_offset=12)], UnaryOp(USub(), BinOp(UnaryOp(USub(), BinOp(Num(2, lineno=111, col_offset=23), Pow(), Num(54, lineno=111, col_offset=26), lineno=111, col_offset=23), lineno=111, col_offset=22), FloorDiv(), BinOp(Num(5, lineno=111, col_offset=30), Pow(), Name('k', Load(), lineno=111, col_offset=33), lineno=111, col_offset=30), lineno=111, col_offset=22), lineno=111, col_offset=20), lineno=111, col_offset=12), Assign([Name('lower', Store(), lineno=113, col_offset=12)], UnaryOp(USub(), BinOp(UnaryOp(USub(), BinOp(Num(2, lineno=113, col_offset=23), Pow(), Num(53, lineno=113, col_offset=26), lineno=113, col_offset=23), lineno=113, col_offset=22), FloorDiv(), BinOp(Num(5, lineno=113, col_offset=30), Pow(), Name('k', Load(), lineno=113, col_offset=33), lineno=113, col_offset=30), lineno=113, col_offset=22), lineno=113, col_offset=20), lineno=113, col_offset=12), If(Compare(BinOp(Name('lower', Load(), lineno=114, col_offset=15), Mod(), Num(2, lineno=114, col_offset=23), lineno=114, col_offset=15), [Eq()], [Num(0, lineno=114, col_offset=28)], lineno=114, col_offset=15), [AugAssign(Name('lower', Store(), lineno=115, col_offset=16), Add(), Num(1, lineno=115, col_offset=25), lineno=115, col_offset=16)], [], lineno=114, col_offset=12), For(Name('i', Store(), lineno=116, col_offset=16), Call(Name('xrange', Load(), lineno=116, col_offset=21), [Name('TEST_SIZE', Load(), lineno=116, col_offset=28)], [], None, None, lineno=116, col_offset=21), [Assign([Tuple([Name('n', Store(), lineno=120, col_offset=16), Name('e', Store(), lineno=120, col_offset=19)], Store(), lineno=120, col_offset=16)], Tuple([Call(Attribute(Name('random', Load(), lineno=120, col_offset=23), 'randrange', Load(), lineno=120, col_offset=23), [Name('lower', Load(), lineno=120, col_offset=40), Name('upper', Load(), lineno=120, col_offset=47), Num(2, lineno=120, col_offset=54)], [], None, None, lineno=120, col_offset=23), Name('k', Load(), lineno=120, col_offset=58)], Load(), lineno=120, col_offset=23), lineno=120, col_offset=16), While(Compare(BinOp(Name('n', Load(), lineno=123, col_offset=22), Mod(), Num(5, lineno=123, col_offset=26), lineno=123, col_offset=22), [Eq()], [Num(0, lineno=123, col_offset=31)], lineno=123, col_offset=22), [Assign([Tuple([Name('n', Store(), lineno=124, col_offset=20), Name('e', Store(), lineno=124, col_offset=23)], Store(), lineno=124, col_offset=20)], Tuple([BinOp(Name('n', Load(), lineno=124, col_offset=27), FloorDiv(), Num(5, lineno=124, col_offset=32), lineno=124, col_offset=27), BinOp(Name('e', Load(), lineno=124, col_offset=35), Add(), Num(1, lineno=124, col_offset=39), lineno=124, col_offset=35)], Load(), lineno=124, col_offset=27), lineno=124, col_offset=20)], [], lineno=123, col_offset=16), Assert(Compare(BinOp(Name('n', Load(), lineno=125, col_offset=23), Mod(), Num(10, lineno=125, col_offset=27), lineno=125, col_offset=23), [In()], [Tuple([Num(1, lineno=125, col_offset=34), Num(3, lineno=125, col_offset=37), Num(7, lineno=125, col_offset=40), Num(9, lineno=125, col_offset=43)], Load(), lineno=125, col_offset=34)], lineno=125, col_offset=23), None, lineno=125, col_offset=16), Assign([Tuple([Name('digits', Store(), lineno=129, col_offset=16), Name('exponent', Store(), lineno=129, col_offset=24)], Store(), lineno=129, col_offset=16)], Tuple([Name('n', Load(), lineno=129, col_offset=35), Name('e', Load(), lineno=129, col_offset=38)], Load(), lineno=129, col_offset=35), lineno=129, col_offset=16), While(Compare(Name('digits', Load(), lineno=130, col_offset=22), [Lt()], [BinOp(Num(10, lineno=130, col_offset=31), Pow(), Num(20, lineno=130, col_offset=35), lineno=130, col_offset=31)], lineno=130, col_offset=22), [Assign([Name('s', Store(), lineno=131, col_offset=20)], Call(Attribute(Str('{}e{}', lineno=131, col_offset=24), 'format', Load(), lineno=131, col_offset=24), [Name('digits', Load(), lineno=131, col_offset=39), Name('exponent', Load(), lineno=131, col_offset=47)], [], None, None, lineno=131, col_offset=24), lineno=131, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=132, col_offset=20), 'check_strtod', Load(), lineno=132, col_offset=20), [Name('s', Load(), lineno=132, col_offset=38)], [], None, None, lineno=132, col_offset=20), lineno=132, col_offset=20), Assign([Name('s', Store(), lineno=134, col_offset=20)], Call(Attribute(Str('{}e{}', lineno=134, col_offset=24), 'format', Load(), lineno=134, col_offset=24), [BinOp(Name('digits', Load(), lineno=134, col_offset=39), Mult(), BinOp(Num(10, lineno=134, col_offset=48), Pow(), Num(40, lineno=134, col_offset=52), lineno=134, col_offset=48), lineno=134, col_offset=39), BinOp(Name('exponent', Load(), lineno=134, col_offset=56), Sub(), Num(40, lineno=134, col_offset=67), lineno=134, col_offset=56)], [], None, None, lineno=134, col_offset=24), lineno=134, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=20), 'check_strtod', Load(), lineno=135, col_offset=20), [Name('s', Load(), lineno=135, col_offset=38)], [], None, None, lineno=135, col_offset=20), lineno=135, col_offset=20), AugAssign(Name('digits', Store(), lineno=136, col_offset=20), Mult(), Num(2, lineno=136, col_offset=30), lineno=136, col_offset=20)], [], lineno=130, col_offset=16), Assign([Tuple([Name('digits', Store(), lineno=140, col_offset=16), Name('exponent', Store(), lineno=140, col_offset=24)], Store(), lineno=140, col_offset=16)], Tuple([Name('n', Load(), lineno=140, col_offset=35), Name('e', Load(), lineno=140, col_offset=38)], Load(), lineno=140, col_offset=35), lineno=140, col_offset=16), While(Compare(Name('digits', Load(), lineno=141, col_offset=22), [Lt()], [BinOp(Num(10, lineno=141, col_offset=31), Pow(), Num(20, lineno=141, col_offset=35), lineno=141, col_offset=31)], lineno=141, col_offset=22), [Assign([Name('s', Store(), lineno=142, col_offset=20)], Call(Attribute(Str('{}e{}', lineno=142, col_offset=24), 'format', Load(), lineno=142, col_offset=24), [Name('digits', Load(), lineno=142, col_offset=39), Name('exponent', Load(), lineno=142, col_offset=47)], [], None, None, lineno=142, col_offset=24), lineno=142, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=143, col_offset=20), 'check_strtod', Load(), lineno=143, col_offset=20), [Name('s', Load(), lineno=143, col_offset=38)], [], None, None, lineno=143, col_offset=20), lineno=143, col_offset=20), Assign([Name('s', Store(), lineno=145, col_offset=20)], Call(Attribute(Str('{}e{}', lineno=145, col_offset=24), 'format', Load(), lineno=145, col_offset=24), [BinOp(Name('digits', Load(), lineno=145, col_offset=39), Mult(), BinOp(Num(10, lineno=145, col_offset=48), Pow(), Num(40, lineno=145, col_offset=52), lineno=145, col_offset=48), lineno=145, col_offset=39), BinOp(Name('exponent', Load(), lineno=145, col_offset=56), Sub(), Num(40, lineno=145, col_offset=67), lineno=145, col_offset=56)], [], None, None, lineno=145, col_offset=24), lineno=145, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=146, col_offset=20), 'check_strtod', Load(), lineno=146, col_offset=20), [Name('s', Load(), lineno=146, col_offset=38)], [], None, None, lineno=146, col_offset=20), lineno=146, col_offset=20), AugAssign(Name('digits', Store(), lineno=147, col_offset=20), Mult(), Num(5, lineno=147, col_offset=30), lineno=147, col_offset=20), AugAssign(Name('exponent', Store(), lineno=148, col_offset=20), Sub(), Num(1, lineno=148, col_offset=32), lineno=148, col_offset=20)], [], lineno=141, col_offset=16)], [], lineno=116, col_offset=12)], [], lineno=109, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('test_halfway_cases', arguments([Name('self', Param(), lineno=150, col_offset=27)], None, None, []), [For(Name('i', Store(), lineno=152, col_offset=12), Call(Name('xrange', Load(), lineno=152, col_offset=17), [BinOp(Num(100, lineno=152, col_offset=24), Mult(), Name('TEST_SIZE', Load(), lineno=152, col_offset=30), lineno=152, col_offset=24)], [], None, None, lineno=152, col_offset=17), [Assign([Name('bits', Store(), lineno=154, col_offset=12)], Call(Attribute(Name('random', Load(), lineno=154, col_offset=19), 'randrange', Load(), lineno=154, col_offset=19), [BinOp(Num(2047, lineno=154, col_offset=36), Mult(), BinOp(Num(2, lineno=154, col_offset=41), Pow(), Num(52, lineno=154, col_offset=44), lineno=154, col_offset=41), lineno=154, col_offset=36)], [], None, None, lineno=154, col_offset=19), lineno=154, col_offset=12), Assign([Tuple([Name('e', Store(), lineno=157, col_offset=12), Name('m', Store(), lineno=157, col_offset=15)], Store(), lineno=157, col_offset=12)], Call(Name('divmod', Load(), lineno=157, col_offset=19), [Name('bits', Load(), lineno=157, col_offset=26), BinOp(Num(2, lineno=157, col_offset=32), Pow(), Num(52, lineno=157, col_offset=35), lineno=157, col_offset=32)], [], None, None, lineno=157, col_offset=19), lineno=157, col_offset=12), If(Name('e', Load(), lineno=158, col_offset=15), [Assign([Tuple([Name('m', Store(), lineno=159, col_offset=16), Name('e', Store(), lineno=159, col_offset=19)], Store(), lineno=159, col_offset=16)], Tuple([BinOp(Name('m', Load(), lineno=159, col_offset=23), Add(), BinOp(Num(2, lineno=159, col_offset=27), Pow(), Num(52, lineno=159, col_offset=30), lineno=159, col_offset=27), lineno=159, col_offset=23), BinOp(Name('e', Load(), lineno=159, col_offset=34), Sub(), Num(1, lineno=159, col_offset=38), lineno=159, col_offset=34)], Load(), lineno=159, col_offset=23), lineno=159, col_offset=16)], [], lineno=158, col_offset=12), AugAssign(Name('e', Store(), lineno=160, col_offset=12), Sub(), Num(1074, lineno=160, col_offset=17), lineno=160, col_offset=12), Assign([Tuple([Name('m', Store(), lineno=163, col_offset=12), Name('e', Store(), lineno=163, col_offset=15)], Store(), lineno=163, col_offset=12)], Tuple([BinOp(BinOp(Num(2, lineno=163, col_offset=19), Mult(), Name('m', Load(), lineno=163, col_offset=21), lineno=163, col_offset=19), Add(), Num(1, lineno=163, col_offset=25), lineno=163, col_offset=19), BinOp(Name('e', Load(), lineno=163, col_offset=28), Sub(), Num(1, lineno=163, col_offset=32), lineno=163, col_offset=28)], Load(), lineno=163, col_offset=19), lineno=163, col_offset=12), If(Compare(Name('e', Load(), lineno=166, col_offset=15), [GtE()], [Num(0, lineno=166, col_offset=20)], lineno=166, col_offset=15), [Assign([Name('digits', Store(), lineno=167, col_offset=16)], BinOp(Name('m', Load(), lineno=167, col_offset=25), LShift(), Name('e', Load(), lineno=167, col_offset=30), lineno=167, col_offset=25), lineno=167, col_offset=16), Assign([Name('exponent', Store(), lineno=168, col_offset=16)], Num(0, lineno=168, col_offset=27), lineno=168, col_offset=16)], [Assign([Name('digits', Store(), lineno=171, col_offset=16)], BinOp(Name('m', Load(), lineno=171, col_offset=25), Mult(), BinOp(Num(5, lineno=171, col_offset=29), Pow(), UnaryOp(USub(), Name('e', Load(), lineno=171, col_offset=33), lineno=171, col_offset=32), lineno=171, col_offset=29), lineno=171, col_offset=25), lineno=171, col_offset=16), Assign([Name('exponent', Store(), lineno=172, col_offset=16)], Name('e', Load(), lineno=172, col_offset=27), lineno=172, col_offset=16)], lineno=166, col_offset=12), Assign([Name('s', Store(), lineno=173, col_offset=12)], Call(Attribute(Str('{}e{}', lineno=173, col_offset=16), 'format', Load(), lineno=173, col_offset=16), [Name('digits', Load(), lineno=173, col_offset=31), Name('exponent', Load(), lineno=173, col_offset=39)], [], None, None, lineno=173, col_offset=16), lineno=173, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=174, col_offset=12), 'check_strtod', Load(), lineno=174, col_offset=12), [Name('s', Load(), lineno=174, col_offset=30)], [], None, None, lineno=174, col_offset=12), lineno=174, col_offset=12)], [], lineno=152, col_offset=8)], [], lineno=150, col_offset=4), FunctionDef('test_boundaries', arguments([Name('self', Param(), lineno=176, col_offset=24)], None, None, []), [Assign([Name('boundaries', Store(), lineno=180, col_offset=8)], List([Tuple([Num(10000000000000000000L, lineno=181, col_offset=13), Num(-19, lineno=181, col_offset=36), Num(1110, lineno=181, col_offset=40)], Load(), lineno=181, col_offset=13), Tuple([Num(17976931348623159077L, lineno=182, col_offset=13), Num(289, lineno=182, col_offset=35), Num(1995, lineno=182, col_offset=40)], Load(), lineno=182, col_offset=13), Tuple([Num(22250738585072013831L, lineno=183, col_offset=13), Num(-327, lineno=183, col_offset=36), Num(4941, lineno=183, col_offset=41)], Load(), lineno=183, col_offset=13), Tuple([Num(0, lineno=184, col_offset=13), Num(-327, lineno=184, col_offset=17), Num(4941, lineno=184, col_offset=22)], Load(), lineno=184, col_offset=13)], Load(), lineno=180, col_offset=21), lineno=180, col_offset=8), For(Tuple([Name('n', Store(), lineno=186, col_offset=12), Name('e', Store(), lineno=186, col_offset=15), Name('u', Store(), lineno=186, col_offset=18)], Store(), lineno=186, col_offset=12), Name('boundaries', Load(), lineno=186, col_offset=23), [For(Name('j', Store(), lineno=187, col_offset=16), Call(Name('xrange', Load(), lineno=187, col_offset=21), [Num(1000, lineno=187, col_offset=28)], [], None, None, lineno=187, col_offset=21), [Assign([Name('digits', Store(), lineno=188, col_offset=16)], BinOp(Name('n', Load(), lineno=188, col_offset=25), Add(), Call(Attribute(Name('random', Load(), lineno=188, col_offset=29), 'randrange', Load(), lineno=188, col_offset=29), [BinOp(Num(-3, lineno=188, col_offset=47), Mult(), Name('u', Load(), lineno=188, col_offset=49), lineno=188, col_offset=46), BinOp(Num(3, lineno=188, col_offset=52), Mult(), Name('u', Load(), lineno=188, col_offset=54), lineno=188, col_offset=52)], [], None, None, lineno=188, col_offset=29), lineno=188, col_offset=25), lineno=188, col_offset=16), Assign([Name('exponent', Store(), lineno=189, col_offset=16)], Name('e', Load(), lineno=189, col_offset=27), lineno=189, col_offset=16), Assign([Name('s', Store(), lineno=190, col_offset=16)], Call(Attribute(Str('{}e{}', lineno=190, col_offset=20), 'format', Load(), lineno=190, col_offset=20), [Name('digits', Load(), lineno=190, col_offset=35), Name('exponent', Load(), lineno=190, col_offset=43)], [], None, None, lineno=190, col_offset=20), lineno=190, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=16), 'check_strtod', Load(), lineno=191, col_offset=16), [Name('s', Load(), lineno=191, col_offset=34)], [], None, None, lineno=191, col_offset=16), lineno=191, col_offset=16), AugAssign(Name('n', Store(), lineno=192, col_offset=16), Mult(), Num(10, lineno=192, col_offset=21), lineno=192, col_offset=16), AugAssign(Name('u', Store(), lineno=193, col_offset=16), Mult(), Num(10, lineno=193, col_offset=21), lineno=193, col_offset=16), AugAssign(Name('e', Store(), lineno=194, col_offset=16), Sub(), Num(1, lineno=194, col_offset=21), lineno=194, col_offset=16)], [], lineno=187, col_offset=12)], [], lineno=186, col_offset=8)], [], lineno=176, col_offset=4), FunctionDef('test_underflow_boundary', arguments([Name('self', Param(), lineno=196, col_offset=32)], None, None, []), [For(Name('exponent', Store(), lineno=200, col_offset=12), Call(Name('xrange', Load(), lineno=200, col_offset=24), [Num(-400, lineno=200, col_offset=32), Num(-320, lineno=200, col_offset=38)], [], None, None, lineno=200, col_offset=24), [Assign([Name('base', Store(), lineno=201, col_offset=12)], BinOp(BinOp(Num(10, lineno=201, col_offset=19), Pow(), UnaryOp(USub(), Name('exponent', Load(), lineno=201, col_offset=24), lineno=201, col_offset=23), lineno=201, col_offset=19), FloorDiv(), BinOp(Num(2, lineno=201, col_offset=36), Pow(), Num(1075, lineno=201, col_offset=39), lineno=201, col_offset=36), lineno=201, col_offset=19), lineno=201, col_offset=12), For(Name('j', Store(), lineno=202, col_offset=16), Call(Name('xrange', Load(), lineno=202, col_offset=21), [Name('TEST_SIZE', Load(), lineno=202, col_offset=28)], [], None, None, lineno=202, col_offset=21), [Assign([Name('digits', Store(), lineno=203, col_offset=16)], BinOp(Name('base', Load(), lineno=203, col_offset=25), Add(), Call(Attribute(Name('random', Load(), lineno=203, col_offset=32), 'randrange', Load(), lineno=203, col_offset=32), [Num(-1000, lineno=203, col_offset=50), Num(1000, lineno=203, col_offset=56)], [], None, None, lineno=203, col_offset=32), lineno=203, col_offset=25), lineno=203, col_offset=16), Assign([Name('s', Store(), lineno=204, col_offset=16)], Call(Attribute(Str('{}e{}', lineno=204, col_offset=20), 'format', Load(), lineno=204, col_offset=20), [Name('digits', Load(), lineno=204, col_offset=35), Name('exponent', Load(), lineno=204, col_offset=43)], [], None, None, lineno=204, col_offset=20), lineno=204, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=205, col_offset=16), 'check_strtod', Load(), lineno=205, col_offset=16), [Name('s', Load(), lineno=205, col_offset=34)], [], None, None, lineno=205, col_offset=16), lineno=205, col_offset=16)], [], lineno=202, col_offset=12)], [], lineno=200, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('test_bigcomp', arguments([Name('self', Param(), lineno=207, col_offset=21)], None, None, []), [For(Name('ndigs', Store(), lineno=208, col_offset=12), Tuple([Num(5, lineno=208, col_offset=21), Num(10, lineno=208, col_offset=24), Num(14, lineno=208, col_offset=28), Num(15, lineno=208, col_offset=32), Num(16, lineno=208, col_offset=36), Num(17, lineno=208, col_offset=40), Num(18, lineno=208, col_offset=44), Num(19, lineno=208, col_offset=48), Num(20, lineno=208, col_offset=52), Num(40, lineno=208, col_offset=56), Num(41, lineno=208, col_offset=60), Num(50, lineno=208, col_offset=64)], Load(), lineno=208, col_offset=21), [Assign([Name('dig10', Store(), lineno=209, col_offset=12)], BinOp(Num(10, lineno=209, col_offset=20), Pow(), Name('ndigs', Load(), lineno=209, col_offset=24), lineno=209, col_offset=20), lineno=209, col_offset=12), For(Name('i', Store(), lineno=210, col_offset=16), Call(Name('xrange', Load(), lineno=210, col_offset=21), [BinOp(Num(10, lineno=210, col_offset=28), Mult(), Name('TEST_SIZE', Load(), lineno=210, col_offset=33), lineno=210, col_offset=28)], [], None, None, lineno=210, col_offset=21), [Assign([Name('digits', Store(), lineno=211, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=211, col_offset=25), 'randrange', Load(), lineno=211, col_offset=25), [Name('dig10', Load(), lineno=211, col_offset=42)], [], None, None, lineno=211, col_offset=25), lineno=211, col_offset=16), Assign([Name('exponent', Store(), lineno=212, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=212, col_offset=27), 'randrange', Load(), lineno=212, col_offset=27), [Num(-400, lineno=212, col_offset=45), Num(400, lineno=212, col_offset=50)], [], None, None, lineno=212, col_offset=27), lineno=212, col_offset=16), Assign([Name('s', Store(), lineno=213, col_offset=16)], Call(Attribute(Str('{}e{}', lineno=213, col_offset=20), 'format', Load(), lineno=213, col_offset=20), [Name('digits', Load(), lineno=213, col_offset=35), Name('exponent', Load(), lineno=213, col_offset=43)], [], None, None, lineno=213, col_offset=20), lineno=213, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=214, col_offset=16), 'check_strtod', Load(), lineno=214, col_offset=16), [Name('s', Load(), lineno=214, col_offset=34)], [], None, None, lineno=214, col_offset=16), lineno=214, col_offset=16)], [], lineno=210, col_offset=12)], [], lineno=208, col_offset=8)], [], lineno=207, col_offset=4), FunctionDef('test_parsing', arguments([Name('self', Param(), lineno=216, col_offset=21)], None, None, []), [Assign([Name('digits', Store(), lineno=218, col_offset=8)], Str('000000123456789', lineno=218, col_offset=17), lineno=218, col_offset=8), Assign([Name('signs', Store(), lineno=219, col_offset=8)], Tuple([Str('+', lineno=219, col_offset=17), Str('-', lineno=219, col_offset=22), Str('', lineno=219, col_offset=27)], Load(), lineno=219, col_offset=17), lineno=219, col_offset=8), For(Name('i', Store(), lineno=223, col_offset=12), Call(Name('xrange', Load(), lineno=223, col_offset=17), [Num(1000, lineno=223, col_offset=24)], [], None, None, lineno=223, col_offset=17), [For(Name('j', Store(), lineno=224, col_offset=16), Call(Name('xrange', Load(), lineno=224, col_offset=21), [Name('TEST_SIZE', Load(), lineno=224, col_offset=28)], [], None, None, lineno=224, col_offset=21), [Assign([Name('s', Store(), lineno=225, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=225, col_offset=20), 'choice', Load(), lineno=225, col_offset=20), [Name('signs', Load(), lineno=225, col_offset=34)], [], None, None, lineno=225, col_offset=20), lineno=225, col_offset=16), Assign([Name('intpart_len', Store(), lineno=226, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=226, col_offset=30), 'randrange', Load(), lineno=226, col_offset=30), [Num(5, lineno=226, col_offset=47)], [], None, None, lineno=226, col_offset=30), lineno=226, col_offset=16), AugAssign(Name('s', Store(), lineno=227, col_offset=16), Add(), Call(Attribute(Str('', lineno=227, col_offset=21), 'join', Load(), lineno=227, col_offset=21), [GeneratorExp(Call(Attribute(Name('random', Load(), lineno=227, col_offset=29), 'choice', Load(), lineno=227, col_offset=29), [Name('digits', Load(), lineno=227, col_offset=43)], [], None, None, lineno=227, col_offset=29), [comprehension(Name('_', Store(), lineno=227, col_offset=55), Call(Name('xrange', Load(), lineno=227, col_offset=60), [Name('intpart_len', Load(), lineno=227, col_offset=67)], [], None, None, lineno=227, col_offset=60), [])], lineno=227, col_offset=29)], [], None, None, lineno=227, col_offset=21), lineno=227, col_offset=16), If(Call(Attribute(Name('random', Load(), lineno=228, col_offset=19), 'choice', Load(), lineno=228, col_offset=19), [List([Name('True', Load(), lineno=228, col_offset=34), Name('False', Load(), lineno=228, col_offset=40)], Load(), lineno=228, col_offset=33)], [], None, None, lineno=228, col_offset=19), [AugAssign(Name('s', Store(), lineno=229, col_offset=20), Add(), Str('.', lineno=229, col_offset=25), lineno=229, col_offset=20), Assign([Name('fracpart_len', Store(), lineno=230, col_offset=20)], Call(Attribute(Name('random', Load(), lineno=230, col_offset=35), 'randrange', Load(), lineno=230, col_offset=35), [Num(5, lineno=230, col_offset=52)], [], None, None, lineno=230, col_offset=35), lineno=230, col_offset=20), AugAssign(Name('s', Store(), lineno=231, col_offset=20), Add(), Call(Attribute(Str('', lineno=231, col_offset=25), 'join', Load(), lineno=231, col_offset=25), [GeneratorExp(Call(Attribute(Name('random', Load(), lineno=231, col_offset=33), 'choice', Load(), lineno=231, col_offset=33), [Name('digits', Load(), lineno=231, col_offset=47)], [], None, None, lineno=231, col_offset=33), [comprehension(Name('_', Store(), lineno=232, col_offset=37), Call(Name('xrange', Load(), lineno=232, col_offset=42), [Name('fracpart_len', Load(), lineno=232, col_offset=49)], [], None, None, lineno=232, col_offset=42), [])], lineno=231, col_offset=33)], [], None, None, lineno=231, col_offset=25), lineno=231, col_offset=20)], [Assign([Name('fracpart_len', Store(), lineno=234, col_offset=20)], Num(0, lineno=234, col_offset=35), lineno=234, col_offset=20)], lineno=228, col_offset=16), If(Call(Attribute(Name('random', Load(), lineno=235, col_offset=19), 'choice', Load(), lineno=235, col_offset=19), [List([Name('True', Load(), lineno=235, col_offset=34), Name('False', Load(), lineno=235, col_offset=40)], Load(), lineno=235, col_offset=33)], [], None, None, lineno=235, col_offset=19), [AugAssign(Name('s', Store(), lineno=236, col_offset=20), Add(), Call(Attribute(Name('random', Load(), lineno=236, col_offset=25), 'choice', Load(), lineno=236, col_offset=25), [List([Str('e', lineno=236, col_offset=40), Str('E', lineno=236, col_offset=45)], Load(), lineno=236, col_offset=39)], [], None, None, lineno=236, col_offset=25), lineno=236, col_offset=20), AugAssign(Name('s', Store(), lineno=237, col_offset=20), Add(), Call(Attribute(Name('random', Load(), lineno=237, col_offset=25), 'choice', Load(), lineno=237, col_offset=25), [Name('signs', Load(), lineno=237, col_offset=39)], [], None, None, lineno=237, col_offset=25), lineno=237, col_offset=20), Assign([Name('exponent_len', Store(), lineno=238, col_offset=20)], Call(Attribute(Name('random', Load(), lineno=238, col_offset=35), 'randrange', Load(), lineno=238, col_offset=35), [Num(1, lineno=238, col_offset=52), Num(4, lineno=238, col_offset=55)], [], None, None, lineno=238, col_offset=35), lineno=238, col_offset=20), AugAssign(Name('s', Store(), lineno=239, col_offset=20), Add(), Call(Attribute(Str('', lineno=239, col_offset=25), 'join', Load(), lineno=239, col_offset=25), [GeneratorExp(Call(Attribute(Name('random', Load(), lineno=239, col_offset=33), 'choice', Load(), lineno=239, col_offset=33), [Name('digits', Load(), lineno=239, col_offset=47)], [], None, None, lineno=239, col_offset=33), [comprehension(Name('_', Store(), lineno=240, col_offset=37), Call(Name('xrange', Load(), lineno=240, col_offset=42), [Name('exponent_len', Load(), lineno=240, col_offset=49)], [], None, None, lineno=240, col_offset=42), [])], lineno=239, col_offset=33)], [], None, None, lineno=239, col_offset=25), lineno=239, col_offset=20)], [], lineno=235, col_offset=16), If(BinOp(Name('intpart_len', Load(), lineno=242, col_offset=19), Add(), Name('fracpart_len', Load(), lineno=242, col_offset=33), lineno=242, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=243, col_offset=20), 'check_strtod', Load(), lineno=243, col_offset=20), [Name('s', Load(), lineno=243, col_offset=38)], [], None, None, lineno=243, col_offset=20), lineno=243, col_offset=20)], [TryExcept([Expr(Call(Name('float', Load(), lineno=246, col_offset=24), [Name('s', Load(), lineno=246, col_offset=30)], [], None, None, lineno=246, col_offset=24), lineno=246, col_offset=24)], [ExceptHandler(Name('ValueError', Load(), lineno=247, col_offset=27), None, [Pass( lineno=248, col_offset=24)], lineno=247, col_offset=20)], [Assert(Name('False', Load(), lineno=250, col_offset=31), Str('expected ValueError', lineno=250, col_offset=38), lineno=250, col_offset=24)], lineno=245, col_offset=20)], lineno=242, col_offset=16)], [], lineno=224, col_offset=12)], [], lineno=223, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('test_particular', arguments([Name('self', Param(), lineno=252, col_offset=24)], None, None, []), [Assign([Name('test_strings', Store(), lineno=255, col_offset=8)], List([Str('2183167012312112312312.23538020374420446192e-370', lineno=257, col_offset=12), Str('12579816049008305546974391768996369464963024663104e-357', lineno=259, col_offset=12), Str('17489628565202117263145367596028389348922981857013e-357', lineno=260, col_offset=12), Str('18487398785991994634182916638542680759613590482273e-357', lineno=261, col_offset=12), Str('32002864200581033134358724675198044527469366773928e-358', lineno=262, col_offset=12), Str('94393431193180696942841837085033647913224148539854e-358', lineno=263, col_offset=12), Str('73608278998966969345824653500136787876436005957953e-358', lineno=264, col_offset=12), Str('64774478836417299491718435234611299336288082136054e-358', lineno=265, col_offset=12), Str('13704940134126574534878641876947980878824688451169e-357', lineno=266, col_offset=12), Str('46697445774047060960624497964425416610480524760471e-358', lineno=267, col_offset=12), Str('28639097178261763178489759107321392745108491825303e-311', lineno=270, col_offset=12), Str('1.00000000000000001e44', lineno=273, col_offset=12), Str('1.0000000000000000100000000000000000000001e44', lineno=274, col_offset=12), Str('99999999999999994487665465554760717039532578546e-47', lineno=277, col_offset=12), Str('9654371763336549317990355136719971183455700459144696213413350821416312194420007991306908470147322020121018368e0', lineno=280, col_offset=12), Str('104308485241983990666713401708072175773165034278685682646111762292409330928739751702404658197872319129036519947435319418387839758990478549477777586673075945844895981012024387992135617064532141489278815239849108105951619997829153633535314849999674266169258928940692239684771590065027025835804863585454872499320500023126142553932654370362024104462255244034053203998964360882487378334860197725139151265590832887433736189468858614521708567646743455601905935595381852723723645799866672558576993978025033590728687206296379801363024094048327273913079612469982585674824156000783167963081616214710691759864332339239688734656548790656486646106983450809073750535624894296242072010195710276073042036425579852459556183541199012652571123898996574563824424330960027873516082763671875e-1075', lineno=284, col_offset=12), Str('247032822920623295e-341', lineno=301, col_offset=12), Str('99037485700245683102805043437346965248029601286431e-373', lineno=304, col_offset=12), Str('99617639833743863161109961162881027406769510558457e-373', lineno=305, col_offset=12), Str('98852915025769345295749278351563179840130565591462e-372', lineno=306, col_offset=12), Str('99059944827693569659153042769690930905148015876788e-373', lineno=307, col_offset=12), Str('98914979205069368270421829889078356254059760327101e-372', lineno=308, col_offset=12), Str('1000000000000000000000000000000000000000e-16', lineno=310, col_offset=12), Str('10000000000000000000000000000000000000000e-17', lineno=311, col_offset=12), Str('991633793189150720000000000000000000000000000000000000000e-33', lineno=313, col_offset=12), Str('4106250198039490000000000000000000000000000000000000000e-38', lineno=315, col_offset=12), Str('10.900000000000000012345678912345678912345', lineno=317, col_offset=12), Str('11651287494059419563861790709256988151903479322938522856916519154189084656466977171489691608488398792047332126810029685763620092606534076968286334920536334924763766067178320990794927368304039797998410780646182269333271282839761794603623958163297658510063352026077076106072540390412314438457161207373275477458821194440646557259102208197382844892733860255628785183174541939743301249188486945446244053689504749943655197464973191717009938776287102040358299419343976193341216682148401588363162253931420379903449798213003874174172790742957567330246138038659650118748200625752770984217933648838167281879845022933912352785884444833681591202045229462491699354638895656152216187535257259042082360747878839946016222830869374205287663441403533948204085390898399055004119873046875e-1075', lineno=320, col_offset=12), Str('5254406533529552661096610603582028195612589849649138922565278497589560452182570597137658742514361936194432482059988700016338656575174473559922258529459120166686600002102838072098506622244175047522649953606315120077538558010753730576321577387528008403025962370502479105305382500086822727836607781816280407336531214924364088126680234780012085291903592543223403975751852488447885154107229587846409265285440430901153525136408849880173424692750069991045196209464308187671479664954854065777039726878381767789934729895619590000470366389383963331466851379030183764964083197053338684769252973171365139701890736933147103189912528110505014483268752328506004517760913030437151571912928276140468769502257147431182910347804663250851413437345649151934269945872064326973371182115272789687312946393533547747886024677951678751174816604738791256853675690543663283782215866825e-1180', lineno=336, col_offset=12), Str('2602129298404963083833853479113577253105939995688e2', lineno=355, col_offset=12), Str('260212929840496308383385347911357725310593999568896e0', lineno=356, col_offset=12), Str('26021292984049630838338534791135772531059399956889601e-2', lineno=357, col_offset=12), Str('260212929840496308383385347911357725310593999568895e0', lineno=358, col_offset=12), Str('260212929840496308383385347911357725310593999568897e0', lineno=359, col_offset=12), Str('260212929840496308383385347911357725310593999568996e0', lineno=360, col_offset=12), Str('260212929840496308383385347911357725310593999568866e0', lineno=361, col_offset=12), Str('9007199254740992.00', lineno=363, col_offset=12), Str('179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792', lineno=367, col_offset=12), Str('179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.999', lineno=374, col_offset=12), Str('179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792.001', lineno=381, col_offset=12), Str('999999999999999944488848768742172978818416595458984375e-54', lineno=388, col_offset=12), Str('9999999999999999444888487687421729788184165954589843749999999e-54', lineno=389, col_offset=12), Str('9999999999999999444888487687421729788184165954589843750000001e-54', lineno=390, col_offset=12)], Load(), lineno=255, col_offset=23), lineno=255, col_offset=8), For(Name('s', Store(), lineno=392, col_offset=12), Name('test_strings', Load(), lineno=392, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=393, col_offset=12), 'check_strtod', Load(), lineno=393, col_offset=12), [Name('s', Load(), lineno=393, col_offset=30)], [], None, None, lineno=393, col_offset=12), lineno=393, col_offset=12)], [], lineno=392, col_offset=8)], [], lineno=252, col_offset=4)], [], lineno=87, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=396, col_offset=4), 'run_unittest', Load(), lineno=396, col_offset=4), [Name('StrtodTests', Load(), lineno=396, col_offset=30)], [], None, None, lineno=396, col_offset=4), lineno=396, col_offset=4)], [], lineno=395, col_offset=0), If(Compare(Name('__name__', Load(), lineno=398, col_offset=3), [Eq()], [Str('__main__', lineno=398, col_offset=15)], lineno=398, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=399, col_offset=4), [], [], None, None, lineno=399, col_offset=4), lineno=399, col_offset=4)], [], lineno=398, col_offset=0)])
