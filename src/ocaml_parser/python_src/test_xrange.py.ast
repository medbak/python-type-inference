Module([Import([alias('test.test_support', None), alias('unittest', None)], lineno=3, col_offset=0), Import([alias('sys', None)], lineno=4, col_offset=0), Import([alias('pickle', None)], lineno=5, col_offset=0), Import([alias('itertools', None)], lineno=6, col_offset=0), Import([alias('warnings', None)], lineno=8, col_offset=0), Expr(Call(Attribute(Name('warnings', Load(), lineno=9, col_offset=0), 'filterwarnings', Load(), lineno=9, col_offset=0), [Str('ignore', lineno=9, col_offset=24), Str('integer argument expected', lineno=9, col_offset=34), Name('DeprecationWarning', Load(), lineno=10, col_offset=24), Str('unittest', lineno=10, col_offset=44)], [], None, None, lineno=9, col_offset=0), lineno=9, col_offset=0), FunctionDef('pyrange', arguments([Name('start', Param(), lineno=13, col_offset=12), Name('stop', Param(), lineno=13, col_offset=19), Name('step', Param(), lineno=13, col_offset=25)], None, None, []), [If(Compare(BinOp(BinOp(Name('start', Load(), lineno=14, col_offset=8), Sub(), Name('stop', Load(), lineno=14, col_offset=16), lineno=14, col_offset=8), FloorDiv(), Name('step', Load(), lineno=14, col_offset=25), lineno=14, col_offset=7), [Lt()], [Num(0, lineno=14, col_offset=32)], lineno=14, col_offset=7), [AugAssign(Name('stop', Store(), lineno=17, col_offset=8), Add(), BinOp(BinOp(Name('start', Load(), lineno=17, col_offset=17), Sub(), Name('stop', Load(), lineno=17, col_offset=25), lineno=17, col_offset=17), Mod(), Name('step', Load(), lineno=17, col_offset=33), lineno=17, col_offset=16), lineno=17, col_offset=8), While(Compare(Name('start', Load(), lineno=18, col_offset=14), [NotEq()], [Name('stop', Load(), lineno=18, col_offset=23)], lineno=18, col_offset=14), [Expr(Yield(Name('start', Load(), lineno=19, col_offset=18), lineno=19, col_offset=12), lineno=19, col_offset=12), AugAssign(Name('start', Store(), lineno=20, col_offset=12), Add(), Name('step', Load(), lineno=20, col_offset=21), lineno=20, col_offset=12)], [], lineno=18, col_offset=8)], [], lineno=14, col_offset=4)], [], lineno=13, col_offset=0), FunctionDef('pyrange_reversed', arguments([Name('start', Param(), lineno=22, col_offset=21), Name('stop', Param(), lineno=22, col_offset=28), Name('step', Param(), lineno=22, col_offset=34)], None, None, []), [AugAssign(Name('stop', Store(), lineno=23, col_offset=4), Add(), BinOp(BinOp(Name('start', Load(), lineno=23, col_offset=13), Sub(), Name('stop', Load(), lineno=23, col_offset=21), lineno=23, col_offset=13), Mod(), Name('step', Load(), lineno=23, col_offset=29), lineno=23, col_offset=12), lineno=23, col_offset=4), Return(Call(Name('pyrange', Load(), lineno=24, col_offset=11), [BinOp(Name('stop', Load(), lineno=24, col_offset=19), Sub(), Name('step', Load(), lineno=24, col_offset=26), lineno=24, col_offset=19), BinOp(Name('start', Load(), lineno=24, col_offset=32), Sub(), Name('step', Load(), lineno=24, col_offset=40), lineno=24, col_offset=32), UnaryOp(USub(), Name('step', Load(), lineno=24, col_offset=47), lineno=24, col_offset=46)], [], None, None, lineno=24, col_offset=11), lineno=24, col_offset=4)], [], lineno=22, col_offset=0), ClassDef('XrangeTest', [Attribute(Name('unittest', Load(), lineno=27, col_offset=17), 'TestCase', Load(), lineno=27, col_offset=17)], [FunctionDef('assert_iterators_equal', arguments([Name('self', Param(), lineno=28, col_offset=31), Name('xs', Param(), lineno=28, col_offset=37), Name('ys', Param(), lineno=28, col_offset=41), Name('test_id', Param(), lineno=28, col_offset=45), Name('limit', Param(), lineno=28, col_offset=54)], None, None, [Name('None', Load(), lineno=28, col_offset=60)]), [If(Compare(Name('limit', Load(), lineno=31, col_offset=11), [IsNot()], [Name('None', Load(), lineno=31, col_offset=24)], lineno=31, col_offset=11), [Assign([Name('xs', Store(), lineno=32, col_offset=12)], Call(Attribute(Name('itertools', Load(), lineno=32, col_offset=17), 'islice', Load(), lineno=32, col_offset=17), [Name('xs', Load(), lineno=32, col_offset=34), Name('limit', Load(), lineno=32, col_offset=38)], [], None, None, lineno=32, col_offset=17), lineno=32, col_offset=12), Assign([Name('ys', Store(), lineno=33, col_offset=12)], Call(Attribute(Name('itertools', Load(), lineno=33, col_offset=17), 'islice', Load(), lineno=33, col_offset=17), [Name('ys', Load(), lineno=33, col_offset=34), Name('limit', Load(), lineno=33, col_offset=38)], [], None, None, lineno=33, col_offset=17), lineno=33, col_offset=12)], [], lineno=31, col_offset=8), Assign([Name('sentinel', Store(), lineno=34, col_offset=8)], Call(Name('object', Load(), lineno=34, col_offset=19), [], [], None, None, lineno=34, col_offset=19), lineno=34, col_offset=8), Assign([Name('pairs', Store(), lineno=35, col_offset=8)], Call(Attribute(Name('itertools', Load(), lineno=35, col_offset=16), 'izip_longest', Load(), lineno=35, col_offset=16), [Name('xs', Load(), lineno=35, col_offset=39), Name('ys', Load(), lineno=35, col_offset=43)], [keyword('fillvalue', Name('sentinel', Load(), lineno=35, col_offset=57))], None, None, lineno=35, col_offset=16), lineno=35, col_offset=8), For(Tuple([Name('i', Store(), lineno=36, col_offset=12), Tuple([Name('x', Store(), lineno=36, col_offset=16), Name('y', Store(), lineno=36, col_offset=19)], Store(), lineno=36, col_offset=16)], Store(), lineno=36, col_offset=12), Call(Name('enumerate', Load(), lineno=36, col_offset=25), [Name('pairs', Load(), lineno=36, col_offset=35)], [], None, None, lineno=36, col_offset=25), [If(Compare(Name('x', Load(), lineno=37, col_offset=15), [Eq()], [Name('y', Load(), lineno=37, col_offset=20)], lineno=37, col_offset=15), [Continue( lineno=38, col_offset=16)], [If(Compare(Name('x', Load(), lineno=39, col_offset=17), [Eq()], [Name('sentinel', Load(), lineno=39, col_offset=22)], lineno=39, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=16), 'fail', Load(), lineno=40, col_offset=16), [Call(Attribute(Str('{}: iterator ended unexpectedly at position {}; expected {}', lineno=40, col_offset=26), 'format', Load(), lineno=40, col_offset=26), [Name('test_id', Load(), lineno=41, col_offset=63), Name('i', Load(), lineno=41, col_offset=72), Name('y', Load(), lineno=41, col_offset=75)], [], None, None, lineno=40, col_offset=26)], [], None, None, lineno=40, col_offset=16), lineno=40, col_offset=16)], [If(Compare(Name('y', Load(), lineno=42, col_offset=17), [Eq()], [Name('sentinel', Load(), lineno=42, col_offset=22)], lineno=42, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=16), 'fail', Load(), lineno=43, col_offset=16), [Call(Attribute(Str('{}: unexpected excess element {} at position {}', lineno=43, col_offset=26), 'format', Load(), lineno=43, col_offset=26), [Name('test_id', Load(), lineno=44, col_offset=47), Name('x', Load(), lineno=44, col_offset=56), Name('i', Load(), lineno=44, col_offset=59)], [], None, None, lineno=43, col_offset=26)], [], None, None, lineno=43, col_offset=16), lineno=43, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=46, col_offset=16), 'fail', Load(), lineno=46, col_offset=16), [Call(Attribute(Str('{}: wrong element at position {};expected {}, got {}', lineno=46, col_offset=26), 'format', Load(), lineno=46, col_offset=26), [Name('test_id', Load(), lineno=47, col_offset=55), Name('i', Load(), lineno=47, col_offset=64), Name('y', Load(), lineno=47, col_offset=67), Name('x', Load(), lineno=47, col_offset=70)], [], None, None, lineno=46, col_offset=26)], [], None, None, lineno=46, col_offset=16), lineno=46, col_offset=16)], lineno=42, col_offset=17)], lineno=39, col_offset=17)], lineno=37, col_offset=12)], [], lineno=36, col_offset=8)], [], lineno=28, col_offset=4), FunctionDef('test_xrange', arguments([Name('self', Param(), lineno=49, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=50, col_offset=8), 'assertEqual', Load(), lineno=50, col_offset=8), [Call(Name('list', Load(), lineno=50, col_offset=25), [Call(Name('xrange', Load(), lineno=50, col_offset=30), [Num(3, lineno=50, col_offset=37)], [], None, None, lineno=50, col_offset=30)], [], None, None, lineno=50, col_offset=25), List([Num(0, lineno=50, col_offset=43), Num(1, lineno=50, col_offset=46), Num(2, lineno=50, col_offset=49)], Load(), lineno=50, col_offset=42)], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=8), 'assertEqual', Load(), lineno=51, col_offset=8), [Call(Name('list', Load(), lineno=51, col_offset=25), [Call(Name('xrange', Load(), lineno=51, col_offset=30), [Num(1, lineno=51, col_offset=37), Num(5, lineno=51, col_offset=40)], [], None, None, lineno=51, col_offset=30)], [], None, None, lineno=51, col_offset=25), List([Num(1, lineno=51, col_offset=46), Num(2, lineno=51, col_offset=49), Num(3, lineno=51, col_offset=52), Num(4, lineno=51, col_offset=55)], Load(), lineno=51, col_offset=45)], [], None, None, lineno=51, col_offset=8), lineno=51, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=8), 'assertEqual', Load(), lineno=52, col_offset=8), [Call(Name('list', Load(), lineno=52, col_offset=25), [Call(Name('xrange', Load(), lineno=52, col_offset=30), [Num(0, lineno=52, col_offset=37)], [], None, None, lineno=52, col_offset=30)], [], None, None, lineno=52, col_offset=25), List([], Load(), lineno=52, col_offset=42)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=8), 'assertEqual', Load(), lineno=53, col_offset=8), [Call(Name('list', Load(), lineno=53, col_offset=25), [Call(Name('xrange', Load(), lineno=53, col_offset=30), [Num(-3, lineno=53, col_offset=38)], [], None, None, lineno=53, col_offset=30)], [], None, None, lineno=53, col_offset=25), List([], Load(), lineno=53, col_offset=43)], [], None, None, lineno=53, col_offset=8), lineno=53, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=54, col_offset=8), 'assertEqual', Load(), lineno=54, col_offset=8), [Call(Name('list', Load(), lineno=54, col_offset=25), [Call(Name('xrange', Load(), lineno=54, col_offset=30), [Num(1, lineno=54, col_offset=37), Num(10, lineno=54, col_offset=40), Num(3, lineno=54, col_offset=44)], [], None, None, lineno=54, col_offset=30)], [], None, None, lineno=54, col_offset=25), List([Num(1, lineno=54, col_offset=50), Num(4, lineno=54, col_offset=53), Num(7, lineno=54, col_offset=56)], Load(), lineno=54, col_offset=49)], [], None, None, lineno=54, col_offset=8), lineno=54, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=55, col_offset=8), 'assertEqual', Load(), lineno=55, col_offset=8), [Call(Name('list', Load(), lineno=55, col_offset=25), [Call(Name('xrange', Load(), lineno=55, col_offset=30), [Num(5, lineno=55, col_offset=37), Num(-5, lineno=55, col_offset=41), Num(-3, lineno=55, col_offset=45)], [], None, None, lineno=55, col_offset=30)], [], None, None, lineno=55, col_offset=25), List([Num(5, lineno=55, col_offset=51), Num(2, lineno=55, col_offset=54), Num(-1, lineno=55, col_offset=58), Num(-4, lineno=55, col_offset=62)], Load(), lineno=55, col_offset=50)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8), Assign([Name('a', Store(), lineno=57, col_offset=8)], Num(10, lineno=57, col_offset=12), lineno=57, col_offset=8), Assign([Name('b', Store(), lineno=58, col_offset=8)], Num(100, lineno=58, col_offset=12), lineno=58, col_offset=8), Assign([Name('c', Store(), lineno=59, col_offset=8)], Num(50, lineno=59, col_offset=12), lineno=59, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertEqual', Load(), lineno=61, col_offset=8), [Call(Name('list', Load(), lineno=61, col_offset=25), [Call(Name('xrange', Load(), lineno=61, col_offset=30), [Name('a', Load(), lineno=61, col_offset=37), BinOp(Name('a', Load(), lineno=61, col_offset=40), Add(), Num(2, lineno=61, col_offset=42), lineno=61, col_offset=40)], [], None, None, lineno=61, col_offset=30)], [], None, None, lineno=61, col_offset=25), List([Name('a', Load(), lineno=61, col_offset=48), BinOp(Name('a', Load(), lineno=61, col_offset=51), Add(), Num(1, lineno=61, col_offset=53), lineno=61, col_offset=51)], Load(), lineno=61, col_offset=47)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [Call(Name('list', Load(), lineno=62, col_offset=25), [Call(Name('xrange', Load(), lineno=62, col_offset=30), [BinOp(Name('a', Load(), lineno=62, col_offset=37), Add(), Num(2, lineno=62, col_offset=39), lineno=62, col_offset=37), Name('a', Load(), lineno=62, col_offset=42), Num(-1L, lineno=62, col_offset=46)], [], None, None, lineno=62, col_offset=30)], [], None, None, lineno=62, col_offset=25), List([BinOp(Name('a', Load(), lineno=62, col_offset=53), Add(), Num(2, lineno=62, col_offset=55), lineno=62, col_offset=53), BinOp(Name('a', Load(), lineno=62, col_offset=58), Add(), Num(1, lineno=62, col_offset=60), lineno=62, col_offset=58)], Load(), lineno=62, col_offset=52)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertEqual', Load(), lineno=63, col_offset=8), [Call(Name('list', Load(), lineno=63, col_offset=25), [Call(Name('xrange', Load(), lineno=63, col_offset=30), [BinOp(Name('a', Load(), lineno=63, col_offset=37), Add(), Num(4, lineno=63, col_offset=39), lineno=63, col_offset=37), Name('a', Load(), lineno=63, col_offset=42), Num(-2, lineno=63, col_offset=46)], [], None, None, lineno=63, col_offset=30)], [], None, None, lineno=63, col_offset=25), List([BinOp(Name('a', Load(), lineno=63, col_offset=52), Add(), Num(4, lineno=63, col_offset=54), lineno=63, col_offset=52), BinOp(Name('a', Load(), lineno=63, col_offset=57), Add(), Num(2, lineno=63, col_offset=59), lineno=63, col_offset=57)], Load(), lineno=63, col_offset=51)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Assign([Name('seq', Store(), lineno=65, col_offset=8)], Call(Name('list', Load(), lineno=65, col_offset=14), [Call(Name('xrange', Load(), lineno=65, col_offset=19), [Name('a', Load(), lineno=65, col_offset=26), Name('b', Load(), lineno=65, col_offset=29), Name('c', Load(), lineno=65, col_offset=32)], [], None, None, lineno=65, col_offset=19)], [], None, None, lineno=65, col_offset=14), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'assertIn', Load(), lineno=66, col_offset=8), [Name('a', Load(), lineno=66, col_offset=22), Name('seq', Load(), lineno=66, col_offset=25)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=8), 'assertNotIn', Load(), lineno=67, col_offset=8), [Name('b', Load(), lineno=67, col_offset=25), Name('seq', Load(), lineno=67, col_offset=28)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertEqual', Load(), lineno=68, col_offset=8), [Call(Name('len', Load(), lineno=68, col_offset=25), [Name('seq', Load(), lineno=68, col_offset=29)], [], None, None, lineno=68, col_offset=25), Num(2, lineno=68, col_offset=35)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), Assign([Name('seq', Store(), lineno=70, col_offset=8)], Call(Name('list', Load(), lineno=70, col_offset=14), [Call(Name('xrange', Load(), lineno=70, col_offset=19), [Name('b', Load(), lineno=70, col_offset=26), Name('a', Load(), lineno=70, col_offset=29), UnaryOp(USub(), Name('c', Load(), lineno=70, col_offset=33), lineno=70, col_offset=32)], [], None, None, lineno=70, col_offset=19)], [], None, None, lineno=70, col_offset=14), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'assertIn', Load(), lineno=71, col_offset=8), [Name('b', Load(), lineno=71, col_offset=22), Name('seq', Load(), lineno=71, col_offset=25)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=72, col_offset=8), 'assertNotIn', Load(), lineno=72, col_offset=8), [Name('a', Load(), lineno=72, col_offset=25), Name('seq', Load(), lineno=72, col_offset=28)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=73, col_offset=8), 'assertEqual', Load(), lineno=73, col_offset=8), [Call(Name('len', Load(), lineno=73, col_offset=25), [Name('seq', Load(), lineno=73, col_offset=29)], [], None, None, lineno=73, col_offset=25), Num(2, lineno=73, col_offset=35)], [], None, None, lineno=73, col_offset=8), lineno=73, col_offset=8), Assign([Name('seq', Store(), lineno=75, col_offset=8)], Call(Name('list', Load(), lineno=75, col_offset=14), [Call(Name('xrange', Load(), lineno=75, col_offset=19), [UnaryOp(USub(), Name('a', Load(), lineno=75, col_offset=27), lineno=75, col_offset=26), UnaryOp(USub(), Name('b', Load(), lineno=75, col_offset=31), lineno=75, col_offset=30), UnaryOp(USub(), Name('c', Load(), lineno=75, col_offset=35), lineno=75, col_offset=34)], [], None, None, lineno=75, col_offset=19)], [], None, None, lineno=75, col_offset=14), lineno=75, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=76, col_offset=8), 'assertIn', Load(), lineno=76, col_offset=8), [UnaryOp(USub(), Name('a', Load(), lineno=76, col_offset=23), lineno=76, col_offset=22), Name('seq', Load(), lineno=76, col_offset=26)], [], None, None, lineno=76, col_offset=8), lineno=76, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=8), 'assertNotIn', Load(), lineno=77, col_offset=8), [UnaryOp(USub(), Name('b', Load(), lineno=77, col_offset=26), lineno=77, col_offset=25), Name('seq', Load(), lineno=77, col_offset=29)], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=78, col_offset=8), 'assertEqual', Load(), lineno=78, col_offset=8), [Call(Name('len', Load(), lineno=78, col_offset=25), [Name('seq', Load(), lineno=78, col_offset=29)], [], None, None, lineno=78, col_offset=25), Num(2, lineno=78, col_offset=35)], [], None, None, lineno=78, col_offset=8), lineno=78, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=80, col_offset=8), 'assertRaises', Load(), lineno=80, col_offset=8), [Name('TypeError', Load(), lineno=80, col_offset=26), Name('xrange', Load(), lineno=80, col_offset=37)], [], None, None, lineno=80, col_offset=8), lineno=80, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'assertRaises', Load(), lineno=81, col_offset=8), [Name('TypeError', Load(), lineno=81, col_offset=26), Name('xrange', Load(), lineno=81, col_offset=37), Num(1, lineno=81, col_offset=45), Num(2, lineno=81, col_offset=48), Num(3, lineno=81, col_offset=51), Num(4, lineno=81, col_offset=54)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=8), 'assertRaises', Load(), lineno=82, col_offset=8), [Name('ValueError', Load(), lineno=82, col_offset=26), Name('xrange', Load(), lineno=82, col_offset=38), Num(1, lineno=82, col_offset=46), Num(2, lineno=82, col_offset=49), Num(0, lineno=82, col_offset=52)], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=8), 'assertRaises', Load(), lineno=84, col_offset=8), [Name('OverflowError', Load(), lineno=84, col_offset=26), Name('xrange', Load(), lineno=84, col_offset=41), BinOp(Num(10, lineno=84, col_offset=49), Pow(), Num(100, lineno=84, col_offset=53), lineno=84, col_offset=49), BinOp(Num(10, lineno=84, col_offset=58), Pow(), Num(101, lineno=84, col_offset=62), lineno=84, col_offset=58), BinOp(Num(10, lineno=84, col_offset=67), Pow(), Num(101, lineno=84, col_offset=71), lineno=84, col_offset=67)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=86, col_offset=8), 'assertRaises', Load(), lineno=86, col_offset=8), [Name('TypeError', Load(), lineno=86, col_offset=26), Name('xrange', Load(), lineno=86, col_offset=37), Num(0, lineno=86, col_offset=45), Str('spam', lineno=86, col_offset=48)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=87, col_offset=8), 'assertRaises', Load(), lineno=87, col_offset=8), [Name('TypeError', Load(), lineno=87, col_offset=26), Name('xrange', Load(), lineno=87, col_offset=37), Num(0, lineno=87, col_offset=45), Num(42, lineno=87, col_offset=48), Str('spam', lineno=87, col_offset=52)], [], None, None, lineno=87, col_offset=8), lineno=87, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=8), 'assertEqual', Load(), lineno=89, col_offset=8), [Call(Name('len', Load(), lineno=89, col_offset=25), [Call(Name('xrange', Load(), lineno=89, col_offset=29), [Num(0, lineno=89, col_offset=36), Attribute(Name('sys', Load(), lineno=89, col_offset=39), 'maxint', Load(), lineno=89, col_offset=39), BinOp(Attribute(Name('sys', Load(), lineno=89, col_offset=51), 'maxint', Load(), lineno=89, col_offset=51), Sub(), Num(1, lineno=89, col_offset=62), lineno=89, col_offset=51)], [], None, None, lineno=89, col_offset=29)], [], None, None, lineno=89, col_offset=25), Num(2, lineno=89, col_offset=67)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=8), 'assertRaises', Load(), lineno=91, col_offset=8), [Name('OverflowError', Load(), lineno=91, col_offset=26), Name('xrange', Load(), lineno=91, col_offset=41), UnaryOp(USub(), Attribute(Name('sys', Load(), lineno=91, col_offset=50), 'maxint', Load(), lineno=91, col_offset=50), lineno=91, col_offset=49), Attribute(Name('sys', Load(), lineno=91, col_offset=62), 'maxint', Load(), lineno=91, col_offset=62)], [], None, None, lineno=91, col_offset=8), lineno=91, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=92, col_offset=8), 'assertRaises', Load(), lineno=92, col_offset=8), [Name('OverflowError', Load(), lineno=92, col_offset=26), Name('xrange', Load(), lineno=92, col_offset=41), Num(0, lineno=92, col_offset=49), BinOp(Num(2, lineno=92, col_offset=52), Mult(), Attribute(Name('sys', Load(), lineno=92, col_offset=54), 'maxint', Load(), lineno=92, col_offset=54), lineno=92, col_offset=52)], [], None, None, lineno=92, col_offset=8), lineno=92, col_offset=8), Assign([Name('r', Store(), lineno=94, col_offset=8)], Call(Name('xrange', Load(), lineno=94, col_offset=12), [UnaryOp(USub(), Attribute(Name('sys', Load(), lineno=94, col_offset=20), 'maxint', Load(), lineno=94, col_offset=20), lineno=94, col_offset=19), Attribute(Name('sys', Load(), lineno=94, col_offset=32), 'maxint', Load(), lineno=94, col_offset=32), Num(2, lineno=94, col_offset=44)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=95, col_offset=8), 'assertEqual', Load(), lineno=95, col_offset=8), [Call(Name('len', Load(), lineno=95, col_offset=25), [Name('r', Load(), lineno=95, col_offset=29)], [], None, None, lineno=95, col_offset=25), Attribute(Name('sys', Load(), lineno=95, col_offset=33), 'maxint', Load(), lineno=95, col_offset=33)], [], None, None, lineno=95, col_offset=8), lineno=95, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=8), 'assertRaises', Load(), lineno=96, col_offset=8), [Name('OverflowError', Load(), lineno=96, col_offset=26), Name('xrange', Load(), lineno=96, col_offset=41), BinOp(UnaryOp(USub(), Attribute(Name('sys', Load(), lineno=96, col_offset=50), 'maxint', Load(), lineno=96, col_offset=50), lineno=96, col_offset=49), Sub(), Num(1, lineno=96, col_offset=61), lineno=96, col_offset=49), Attribute(Name('sys', Load(), lineno=96, col_offset=64), 'maxint', Load(), lineno=96, col_offset=64), Num(2, lineno=96, col_offset=76)], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('test_pickling', arguments([Name('self', Param(), lineno=98, col_offset=22)], None, None, []), [Assign([Name('testcases', Store(), lineno=99, col_offset=8)], List([Tuple([Num(13, lineno=99, col_offset=22)], Load(), lineno=99, col_offset=22), Tuple([Num(0, lineno=99, col_offset=29), Num(11, lineno=99, col_offset=32)], Load(), lineno=99, col_offset=29), Tuple([Num(-22, lineno=99, col_offset=39), Num(10, lineno=99, col_offset=43)], Load(), lineno=99, col_offset=38), Tuple([Num(20, lineno=99, col_offset=49), Num(3, lineno=99, col_offset=53), Num(-1, lineno=99, col_offset=57)], Load(), lineno=99, col_offset=49), Tuple([Num(13, lineno=100, col_offset=22), Num(21, lineno=100, col_offset=26), Num(3, lineno=100, col_offset=30)], Load(), lineno=100, col_offset=22), Tuple([Num(-2, lineno=100, col_offset=36), Num(2, lineno=100, col_offset=39), Num(2, lineno=100, col_offset=42)], Load(), lineno=100, col_offset=35)], Load(), lineno=99, col_offset=20), lineno=99, col_offset=8), For(Name('proto', Store(), lineno=101, col_offset=12), Call(Name('range', Load(), lineno=101, col_offset=21), [BinOp(Attribute(Name('pickle', Load(), lineno=101, col_offset=27), 'HIGHEST_PROTOCOL', Load(), lineno=101, col_offset=27), Add(), Num(1, lineno=101, col_offset=53), lineno=101, col_offset=27)], [], None, None, lineno=101, col_offset=21), [For(Name('t', Store(), lineno=102, col_offset=16), Name('testcases', Load(), lineno=102, col_offset=21), [Assign([Name('r', Store(), lineno=103, col_offset=16)], Call(Name('xrange', Load(), lineno=103, col_offset=20), [], [], Name('t', Load(), lineno=103, col_offset=28), None, lineno=103, col_offset=20), lineno=103, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=104, col_offset=16), 'assertEqual', Load(), lineno=104, col_offset=16), [Call(Name('list', Load(), lineno=104, col_offset=33), [Call(Attribute(Name('pickle', Load(), lineno=104, col_offset=38), 'loads', Load(), lineno=104, col_offset=38), [Call(Attribute(Name('pickle', Load(), lineno=104, col_offset=51), 'dumps', Load(), lineno=104, col_offset=51), [Name('r', Load(), lineno=104, col_offset=64), Name('proto', Load(), lineno=104, col_offset=67)], [], None, None, lineno=104, col_offset=51)], [], None, None, lineno=104, col_offset=38)], [], None, None, lineno=104, col_offset=33), Call(Name('list', Load(), lineno=105, col_offset=33), [Name('r', Load(), lineno=105, col_offset=38)], [], None, None, lineno=105, col_offset=33)], [], None, None, lineno=104, col_offset=16), lineno=104, col_offset=16)], [], lineno=102, col_offset=12)], [], lineno=101, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('test_range_iterators', arguments([Name('self', Param(), lineno=107, col_offset=29)], None, None, []), [Assign([Name('limits', Store(), lineno=109, col_offset=8)], ListComp(BinOp(Name('base', Load(), lineno=109, col_offset=18), Add(), Name('jiggle', Load(), lineno=109, col_offset=25), lineno=109, col_offset=18), [comprehension(Name('M', Store(), lineno=110, col_offset=22), Tuple([BinOp(Num(2, lineno=110, col_offset=28), Pow(), Num(32, lineno=110, col_offset=31), lineno=110, col_offset=28), BinOp(Num(2, lineno=110, col_offset=35), Pow(), Num(64, lineno=110, col_offset=38), lineno=110, col_offset=35)], Load(), lineno=110, col_offset=28), []), comprehension(Name('base', Store(), lineno=111, col_offset=22), Tuple([UnaryOp(USub(), Name('M', Load(), lineno=111, col_offset=32), lineno=111, col_offset=31), BinOp(UnaryOp(USub(), Name('M', Load(), lineno=111, col_offset=36), lineno=111, col_offset=35), FloorDiv(), Num(2, lineno=111, col_offset=39), lineno=111, col_offset=35), Num(0, lineno=111, col_offset=42), BinOp(Name('M', Load(), lineno=111, col_offset=45), FloorDiv(), Num(2, lineno=111, col_offset=48), lineno=111, col_offset=45), Name('M', Load(), lineno=111, col_offset=51)], Load(), lineno=111, col_offset=31), []), comprehension(Name('jiggle', Store(), lineno=112, col_offset=22), Tuple([Num(-2, lineno=112, col_offset=34), Num(-1, lineno=112, col_offset=38), Num(0, lineno=112, col_offset=41), Num(1, lineno=112, col_offset=44), Num(2, lineno=112, col_offset=47)], Load(), lineno=112, col_offset=33), [])], lineno=109, col_offset=18), lineno=109, col_offset=8), Assign([Name('test_ranges', Store(), lineno=113, col_offset=8)], ListComp(Tuple([Name('start', Load(), lineno=113, col_offset=24), Name('end', Load(), lineno=113, col_offset=31), Name('step', Load(), lineno=113, col_offset=36)], Load(), lineno=113, col_offset=24), [comprehension(Name('start', Store(), lineno=114, col_offset=27), Name('limits', Load(), lineno=114, col_offset=36), []), comprehension(Name('end', Store(), lineno=115, col_offset=27), Name('limits', Load(), lineno=115, col_offset=34), []), comprehension(Name('step', Store(), lineno=116, col_offset=27), Tuple([UnaryOp(USub(), BinOp(Num(2, lineno=116, col_offset=37), Pow(), Num(63, lineno=116, col_offset=40), lineno=116, col_offset=37), lineno=116, col_offset=36), UnaryOp(USub(), BinOp(Num(2, lineno=116, col_offset=45), Pow(), Num(31, lineno=116, col_offset=48), lineno=116, col_offset=45), lineno=116, col_offset=44), Num(-2, lineno=116, col_offset=53), Num(-1, lineno=116, col_offset=57), Num(1, lineno=116, col_offset=60), Num(2, lineno=116, col_offset=63)], Load(), lineno=116, col_offset=36), [])], lineno=113, col_offset=23), lineno=113, col_offset=8), For(Tuple([Name('start', Store(), lineno=118, col_offset=12), Name('end', Store(), lineno=118, col_offset=19), Name('step', Store(), lineno=118, col_offset=24)], Store(), lineno=118, col_offset=12), Name('test_ranges', Load(), lineno=118, col_offset=32), [TryExcept([Assign([Name('iter1', Store(), lineno=120, col_offset=16)], Call(Name('xrange', Load(), lineno=120, col_offset=24), [Name('start', Load(), lineno=120, col_offset=31), Name('end', Load(), lineno=120, col_offset=38), Name('step', Load(), lineno=120, col_offset=43)], [], None, None, lineno=120, col_offset=24), lineno=120, col_offset=16)], [ExceptHandler(Name('OverflowError', Load(), lineno=121, col_offset=19), None, [Pass( lineno=122, col_offset=16)], lineno=121, col_offset=12)], [Assign([Name('iter2', Store(), lineno=124, col_offset=16)], Call(Name('pyrange', Load(), lineno=124, col_offset=24), [Name('start', Load(), lineno=124, col_offset=32), Name('end', Load(), lineno=124, col_offset=39), Name('step', Load(), lineno=124, col_offset=44)], [], None, None, lineno=124, col_offset=24), lineno=124, col_offset=16), Assign([Name('test_id', Store(), lineno=125, col_offset=16)], Call(Attribute(Str('xrange({}, {}, {})', lineno=125, col_offset=26), 'format', Load(), lineno=125, col_offset=26), [Name('start', Load(), lineno=125, col_offset=54), Name('end', Load(), lineno=125, col_offset=61), Name('step', Load(), lineno=125, col_offset=66)], [], None, None, lineno=125, col_offset=26), lineno=125, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=127, col_offset=16), 'assert_iterators_equal', Load(), lineno=127, col_offset=16), [Name('iter1', Load(), lineno=127, col_offset=44), Name('iter2', Load(), lineno=127, col_offset=51), Name('test_id', Load(), lineno=127, col_offset=58)], [keyword('limit', Num(100, lineno=127, col_offset=73))], None, None, lineno=127, col_offset=16), lineno=127, col_offset=16)], lineno=119, col_offset=12), TryExcept([Assign([Name('iter1', Store(), lineno=130, col_offset=16)], Call(Name('reversed', Load(), lineno=130, col_offset=24), [Call(Name('xrange', Load(), lineno=130, col_offset=33), [Name('start', Load(), lineno=130, col_offset=40), Name('end', Load(), lineno=130, col_offset=47), Name('step', Load(), lineno=130, col_offset=52)], [], None, None, lineno=130, col_offset=33)], [], None, None, lineno=130, col_offset=24), lineno=130, col_offset=16)], [ExceptHandler(Name('OverflowError', Load(), lineno=131, col_offset=19), None, [Pass( lineno=132, col_offset=16)], lineno=131, col_offset=12)], [Assign([Name('iter2', Store(), lineno=134, col_offset=16)], Call(Name('pyrange_reversed', Load(), lineno=134, col_offset=24), [Name('start', Load(), lineno=134, col_offset=41), Name('end', Load(), lineno=134, col_offset=48), Name('step', Load(), lineno=134, col_offset=53)], [], None, None, lineno=134, col_offset=24), lineno=134, col_offset=16), Assign([Name('test_id', Store(), lineno=135, col_offset=16)], Call(Attribute(Str('reversed(xrange({}, {}, {}))', lineno=135, col_offset=26), 'format', Load(), lineno=135, col_offset=26), [Name('start', Load(), lineno=135, col_offset=64), Name('end', Load(), lineno=135, col_offset=71), Name('step', Load(), lineno=135, col_offset=76)], [], None, None, lineno=135, col_offset=26), lineno=135, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=16), 'assert_iterators_equal', Load(), lineno=136, col_offset=16), [Name('iter1', Load(), lineno=136, col_offset=44), Name('iter2', Load(), lineno=136, col_offset=51), Name('test_id', Load(), lineno=136, col_offset=58)], [keyword('limit', Num(100, lineno=136, col_offset=73))], None, None, lineno=136, col_offset=16), lineno=136, col_offset=16)], lineno=129, col_offset=12)], [], lineno=118, col_offset=8)], [], lineno=107, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Attribute(Name('test', Load(), lineno=140, col_offset=4), 'test_support', Load(), lineno=140, col_offset=4), 'run_unittest', Load(), lineno=140, col_offset=4), [Name('XrangeTest', Load(), lineno=140, col_offset=35)], [], None, None, lineno=140, col_offset=4), lineno=140, col_offset=4)], [], lineno=139, col_offset=0), If(Compare(Name('__name__', Load(), lineno=142, col_offset=3), [Eq()], [Str('__main__', lineno=142, col_offset=15)], lineno=142, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=143, col_offset=4), [], [], None, None, lineno=143, col_offset=4), lineno=143, col_offset=4)], [], lineno=142, col_offset=0)])
