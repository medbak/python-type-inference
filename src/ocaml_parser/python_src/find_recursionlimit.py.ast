Module([Expr(Str('Find the maximum recursion limit that prevents interpreter termination.\n\nThis script finds the maximum safe recursion limit on a particular\nplatform.  If you need to change the recursion limit on your system,\nthis script will tell you a safe upper bound.  To use the new limit,\ncall sys.setrecursionlimit().\n\nThis module implements several ways to create infinite recursion in\nPython.  Different implementations end up pushing different numbers of\nC stack frames, depending on how many calls through Python\'s abstract\nC API occur.\n\nAfter each round of tests, it prints a message:\n"Limit of NNNN is fine".\n\nThe highest printed value of "NNNN" is therefore the highest potentially\nsafe limit for your system (which depends on the OS, architecture, but also\nthe compilation flags). Please note that it is practically impossible to\ntest all possible recursion paths in the interpreter, so the results of\nthis test should not be trusted blindly -- although they give a good hint\nof which values are reasonable.\n\nNOTE: When the C stack space allocated by your system is exceeded due\nto excessive recursion, exact behaviour depends on the platform, although\nthe interpreter will always fail in a likely brutal way: either a\nsegmentation fault, a MemoryError, or just a silent abort.\n\nNB: A program that does not use __methods__ can set a higher limit.\n', lineno=30, col_offset=-1), lineno=30, col_offset=-1), Import([alias('sys', None)], lineno=32, col_offset=0), Import([alias('itertools', None)], lineno=33, col_offset=0), ClassDef('RecursiveBlowup1', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=36, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=8), '__init__', Load(), lineno=37, col_offset=8), [], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8)], [], lineno=36, col_offset=4)], [], lineno=35, col_offset=0), FunctionDef('test_init', arguments([], None, None, []), [Return(Call(Name('RecursiveBlowup1', Load(), lineno=40, col_offset=11), [], [], None, None, lineno=40, col_offset=11), lineno=40, col_offset=4)], [], lineno=39, col_offset=0), ClassDef('RecursiveBlowup2', [], [FunctionDef('__repr__', arguments([Name('self', Param(), lineno=43, col_offset=17)], None, None, []), [Return(Call(Name('repr', Load(), lineno=44, col_offset=15), [Name('self', Load(), lineno=44, col_offset=20)], [], None, None, lineno=44, col_offset=15), lineno=44, col_offset=8)], [], lineno=43, col_offset=4)], [], lineno=42, col_offset=0), FunctionDef('test_repr', arguments([], None, None, []), [Return(Call(Name('repr', Load(), lineno=47, col_offset=11), [Call(Name('RecursiveBlowup2', Load(), lineno=47, col_offset=16), [], [], None, None, lineno=47, col_offset=16)], [], None, None, lineno=47, col_offset=11), lineno=47, col_offset=4)], [], lineno=46, col_offset=0), ClassDef('RecursiveBlowup4', [], [FunctionDef('__add__', arguments([Name('self', Param(), lineno=50, col_offset=16), Name('x', Param(), lineno=50, col_offset=22)], None, None, []), [Return(BinOp(Name('x', Load(), lineno=51, col_offset=15), Add(), Name('self', Load(), lineno=51, col_offset=19), lineno=51, col_offset=15), lineno=51, col_offset=8)], [], lineno=50, col_offset=4)], [], lineno=49, col_offset=0), FunctionDef('test_add', arguments([], None, None, []), [Return(BinOp(Call(Name('RecursiveBlowup4', Load(), lineno=54, col_offset=11), [], [], None, None, lineno=54, col_offset=11), Add(), Call(Name('RecursiveBlowup4', Load(), lineno=54, col_offset=32), [], [], None, None, lineno=54, col_offset=32), lineno=54, col_offset=11), lineno=54, col_offset=4)], [], lineno=53, col_offset=0), ClassDef('RecursiveBlowup5', [], [FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=57, col_offset=20), Name('attr', Param(), lineno=57, col_offset=26)], None, None, []), [Return(Call(Name('getattr', Load(), lineno=58, col_offset=15), [Name('self', Load(), lineno=58, col_offset=23), Name('attr', Load(), lineno=58, col_offset=29)], [], None, None, lineno=58, col_offset=15), lineno=58, col_offset=8)], [], lineno=57, col_offset=4)], [], lineno=56, col_offset=0), FunctionDef('test_getattr', arguments([], None, None, []), [Return(Attribute(Call(Name('RecursiveBlowup5', Load(), lineno=61, col_offset=11), [], [], None, None, lineno=61, col_offset=11), 'attr', Load(), lineno=61, col_offset=11), lineno=61, col_offset=4)], [], lineno=60, col_offset=0), ClassDef('RecursiveBlowup6', [], [FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=64, col_offset=20), Name('item', Param(), lineno=64, col_offset=26)], None, None, []), [Return(BinOp(Subscript(Name('self', Load(), lineno=65, col_offset=15), Index(BinOp(Name('item', Load(), lineno=65, col_offset=20), Sub(), Num(2, lineno=65, col_offset=27), lineno=65, col_offset=20)), Load(), lineno=65, col_offset=15), Add(), Subscript(Name('self', Load(), lineno=65, col_offset=32), Index(BinOp(Name('item', Load(), lineno=65, col_offset=37), Sub(), Num(1, lineno=65, col_offset=44), lineno=65, col_offset=37)), Load(), lineno=65, col_offset=32), lineno=65, col_offset=15), lineno=65, col_offset=8)], [], lineno=64, col_offset=4)], [], lineno=63, col_offset=0), FunctionDef('test_getitem', arguments([], None, None, []), [Return(Subscript(Call(Name('RecursiveBlowup6', Load(), lineno=68, col_offset=11), [], [], None, None, lineno=68, col_offset=11), Index(Num(5, lineno=68, col_offset=30)), Load(), lineno=68, col_offset=11), lineno=68, col_offset=4)], [], lineno=67, col_offset=0), FunctionDef('test_recurse', arguments([], None, None, []), [Return(Call(Name('test_recurse', Load(), lineno=71, col_offset=11), [], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4)], [], lineno=70, col_offset=0), FunctionDef('test_cpickle', arguments([Name('_cache', Param(), lineno=73, col_offset=17)], None, None, [Dict([], [], lineno=73, col_offset=24)]), [TryExcept([Import([alias('cPickle', None)], lineno=75, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=76, col_offset=11), None, [Print(None, [Str('cannot import cPickle, skipped!', lineno=77, col_offset=14)], True, lineno=77, col_offset=8), Return(None, lineno=78, col_offset=8)], lineno=76, col_offset=4)], [], lineno=74, col_offset=4), Assign([Name('l', Store(), lineno=79, col_offset=4)], Name('None', Load(), lineno=79, col_offset=8), lineno=79, col_offset=4), For(Name('n', Store(), lineno=80, col_offset=8), Call(Attribute(Name('itertools', Load(), lineno=80, col_offset=13), 'count', Load(), lineno=80, col_offset=13), [], [], None, None, lineno=80, col_offset=13), [TryExcept([Assign([Name('l', Store(), lineno=82, col_offset=12)], Subscript(Name('_cache', Load(), lineno=82, col_offset=16), Index(Name('n', Load(), lineno=82, col_offset=23)), Load(), lineno=82, col_offset=16), lineno=82, col_offset=12), Continue( lineno=83, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=84, col_offset=15), None, [For(Name('i', Store(), lineno=85, col_offset=16), Call(Name('range', Load(), lineno=85, col_offset=21), [Num(100, lineno=85, col_offset=27)], [], None, None, lineno=85, col_offset=21), [Assign([Name('l', Store(), lineno=86, col_offset=16)], List([Name('l', Load(), lineno=86, col_offset=21)], Load(), lineno=86, col_offset=20), lineno=86, col_offset=16)], [], lineno=85, col_offset=12)], lineno=84, col_offset=8)], [], lineno=81, col_offset=8), Expr(Call(Attribute(Name('cPickle', Load(), lineno=87, col_offset=8), 'dumps', Load(), lineno=87, col_offset=8), [Name('l', Load(), lineno=87, col_offset=22)], [keyword('protocol', Num(-1, lineno=87, col_offset=35))], None, None, lineno=87, col_offset=8), lineno=87, col_offset=8), Assign([Subscript(Name('_cache', Load(), lineno=88, col_offset=8), Index(Name('n', Load(), lineno=88, col_offset=15)), Store(), lineno=88, col_offset=8)], Name('l', Load(), lineno=88, col_offset=20), lineno=88, col_offset=8)], [], lineno=80, col_offset=4)], [], lineno=73, col_offset=0), FunctionDef('check_limit', arguments([Name('n', Param(), lineno=90, col_offset=16), Name('test_func_name', Param(), lineno=90, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('sys', Load(), lineno=91, col_offset=4), 'setrecursionlimit', Load(), lineno=91, col_offset=4), [Name('n', Load(), lineno=91, col_offset=26)], [], None, None, lineno=91, col_offset=4), lineno=91, col_offset=4), If(Call(Attribute(Name('test_func_name', Load(), lineno=92, col_offset=7), 'startswith', Load(), lineno=92, col_offset=7), [Str('test_', lineno=92, col_offset=33)], [], None, None, lineno=92, col_offset=7), [Print(None, [Subscript(Name('test_func_name', Load(), lineno=93, col_offset=14), Slice(Num(5, lineno=93, col_offset=29), None, None), Load(), lineno=93, col_offset=14)], True, lineno=93, col_offset=8)], [Print(None, [Name('test_func_name', Load(), lineno=95, col_offset=14)], True, lineno=95, col_offset=8)], lineno=92, col_offset=4), Assign([Name('test_func', Store(), lineno=96, col_offset=4)], Subscript(Call(Name('globals', Load(), lineno=96, col_offset=16), [], [], None, None, lineno=96, col_offset=16), Index(Name('test_func_name', Load(), lineno=96, col_offset=26)), Load(), lineno=96, col_offset=16), lineno=96, col_offset=4), TryExcept([Expr(Call(Name('test_func', Load(), lineno=98, col_offset=8), [], [], None, None, lineno=98, col_offset=8), lineno=98, col_offset=8)], [ExceptHandler(Tuple([Name('RuntimeError', Load(), lineno=102, col_offset=12), Name('AttributeError', Load(), lineno=102, col_offset=26)], Load(), lineno=102, col_offset=12), None, [Pass( lineno=103, col_offset=8)], lineno=102, col_offset=4)], [Print(None, [Str('Yikes!', lineno=105, col_offset=14)], True, lineno=105, col_offset=8)], lineno=97, col_offset=4)], [], lineno=90, col_offset=0), Assign([Name('limit', Store(), lineno=107, col_offset=0)], Num(1000, lineno=107, col_offset=8), lineno=107, col_offset=0), While(Num(1, lineno=108, col_offset=6), [Expr(Call(Name('check_limit', Load(), lineno=109, col_offset=4), [Name('limit', Load(), lineno=109, col_offset=16), Str('test_recurse', lineno=109, col_offset=23)], [], None, None, lineno=109, col_offset=4), lineno=109, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=110, col_offset=4), [Name('limit', Load(), lineno=110, col_offset=16), Str('test_add', lineno=110, col_offset=23)], [], None, None, lineno=110, col_offset=4), lineno=110, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=111, col_offset=4), [Name('limit', Load(), lineno=111, col_offset=16), Str('test_repr', lineno=111, col_offset=23)], [], None, None, lineno=111, col_offset=4), lineno=111, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=112, col_offset=4), [Name('limit', Load(), lineno=112, col_offset=16), Str('test_init', lineno=112, col_offset=23)], [], None, None, lineno=112, col_offset=4), lineno=112, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=113, col_offset=4), [Name('limit', Load(), lineno=113, col_offset=16), Str('test_getattr', lineno=113, col_offset=23)], [], None, None, lineno=113, col_offset=4), lineno=113, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=114, col_offset=4), [Name('limit', Load(), lineno=114, col_offset=16), Str('test_getitem', lineno=114, col_offset=23)], [], None, None, lineno=114, col_offset=4), lineno=114, col_offset=4), Expr(Call(Name('check_limit', Load(), lineno=115, col_offset=4), [Name('limit', Load(), lineno=115, col_offset=16), Str('test_cpickle', lineno=115, col_offset=23)], [], None, None, lineno=115, col_offset=4), lineno=115, col_offset=4), Print(None, [BinOp(Str('Limit of %d is fine', lineno=116, col_offset=10), Mod(), Name('limit', Load(), lineno=116, col_offset=34), lineno=116, col_offset=10)], True, lineno=116, col_offset=4), Assign([Name('limit', Store(), lineno=117, col_offset=4)], BinOp(Name('limit', Load(), lineno=117, col_offset=12), Add(), Num(100, lineno=117, col_offset=20), lineno=117, col_offset=12), lineno=117, col_offset=4)], [], lineno=108, col_offset=0)])
