Module([Expr(Str('Wrapper functions for Tcl/Tk.\n\nTkinter provides classes which allow the display, positioning and\ncontrol of widgets. Toplevel widgets are Tk and Toplevel. Other\nwidgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,\nCheckbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox\nLabelFrame and PanedWindow.\n\nProperties of the widgets are specified with keyword arguments.\nKeyword arguments have the same name as the corresponding resource\nunder Tk.\n\nWidgets are positioned with one of the geometry managers Place, Pack\nor Grid. These managers can be called with methods place, pack, grid\navailable in every Widget.\n\nActions are bound to events by resources (e.g. keyword argument\ncommand) or with the method bind.\n\nExample (Hello, World):\nimport Tkinter\nfrom Tkconstants import *\ntk = Tkinter.Tk()\nframe = Tkinter.Frame(tk, relief=RIDGE, borderwidth=2)\nframe.pack(fill=BOTH,expand=1)\nlabel = Tkinter.Label(frame, text="Hello, World")\nlabel.pack(fill=X, expand=1)\nbutton = Tkinter.Button(frame,text="Exit",command=tk.destroy)\nbutton.pack(side=BOTTOM)\ntk.mainloop()\n', lineno=31, col_offset=-1), lineno=31, col_offset=-1), Assign([Name('__version__', Store(), lineno=33, col_offset=0)], Str('$Revision: 81008 $', lineno=33, col_offset=14), lineno=33, col_offset=0), Import([alias('sys', None)], lineno=35, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=36, col_offset=3), 'platform', Load(), lineno=36, col_offset=3), [Eq()], [Str('win32', lineno=36, col_offset=19)], lineno=36, col_offset=3), [Import([alias('FixTk', None)], lineno=38, col_offset=4)], [], lineno=36, col_offset=0), Import([alias('_tkinter', None)], lineno=39, col_offset=0), Assign([Name('tkinter', Store(), lineno=40, col_offset=0)], Name('_tkinter', Load(), lineno=40, col_offset=10), lineno=40, col_offset=0), Assign([Name('TclError', Store(), lineno=41, col_offset=0)], Attribute(Name('_tkinter', Load(), lineno=41, col_offset=11), 'TclError', Load(), lineno=41, col_offset=11), lineno=41, col_offset=0), ImportFrom('types', [alias('*', None)], 0, lineno=42, col_offset=0), ImportFrom('Tkconstants', [alias('*', None)], 0, lineno=43, col_offset=0), Assign([Name('wantobjects', Store(), lineno=45, col_offset=0)], Num(1, lineno=45, col_offset=14), lineno=45, col_offset=0), Assign([Name('TkVersion', Store(), lineno=47, col_offset=0)], Call(Name('float', Load(), lineno=47, col_offset=12), [Attribute(Name('_tkinter', Load(), lineno=47, col_offset=18), 'TK_VERSION', Load(), lineno=47, col_offset=18)], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=0), Assign([Name('TclVersion', Store(), lineno=48, col_offset=0)], Call(Name('float', Load(), lineno=48, col_offset=13), [Attribute(Name('_tkinter', Load(), lineno=48, col_offset=19), 'TCL_VERSION', Load(), lineno=48, col_offset=19)], [], None, None, lineno=48, col_offset=13), lineno=48, col_offset=0), Assign([Name('READABLE', Store(), lineno=50, col_offset=0)], Attribute(Name('_tkinter', Load(), lineno=50, col_offset=11), 'READABLE', Load(), lineno=50, col_offset=11), lineno=50, col_offset=0), Assign([Name('WRITABLE', Store(), lineno=51, col_offset=0)], Attribute(Name('_tkinter', Load(), lineno=51, col_offset=11), 'WRITABLE', Load(), lineno=51, col_offset=11), lineno=51, col_offset=0), Assign([Name('EXCEPTION', Store(), lineno=52, col_offset=0)], Attribute(Name('_tkinter', Load(), lineno=52, col_offset=12), 'EXCEPTION', Load(), lineno=52, col_offset=12), lineno=52, col_offset=0), TryExcept([Expr(Attribute(Name('_tkinter', Load(), lineno=55, col_offset=5), 'createfilehandler', Load(), lineno=55, col_offset=5), lineno=55, col_offset=5)], [ExceptHandler(Name('AttributeError', Load(), lineno=56, col_offset=7), None, [Assign([Attribute(Name('_tkinter', Load(), lineno=56, col_offset=23), 'createfilehandler', Store(), lineno=56, col_offset=23)], Name('None', Load(), lineno=56, col_offset=52), lineno=56, col_offset=23)], lineno=56, col_offset=0)], [], lineno=55, col_offset=0), TryExcept([Expr(Attribute(Name('_tkinter', Load(), lineno=57, col_offset=5), 'deletefilehandler', Load(), lineno=57, col_offset=5), lineno=57, col_offset=5)], [ExceptHandler(Name('AttributeError', Load(), lineno=58, col_offset=7), None, [Assign([Attribute(Name('_tkinter', Load(), lineno=58, col_offset=23), 'deletefilehandler', Store(), lineno=58, col_offset=23)], Name('None', Load(), lineno=58, col_offset=52), lineno=58, col_offset=23)], lineno=58, col_offset=0)], [], lineno=57, col_offset=0), FunctionDef('_flatten', arguments([Name('tuple', Param(), lineno=61, col_offset=13)], None, None, []), [Expr(Str('Internal function.', lineno=62, col_offset=4), lineno=62, col_offset=4), Assign([Name('res', Store(), lineno=63, col_offset=4)], Tuple([], Load(), lineno=63, col_offset=10), lineno=63, col_offset=4), For(Name('item', Store(), lineno=64, col_offset=8), Name('tuple', Load(), lineno=64, col_offset=16), [If(Compare(Call(Name('type', Load(), lineno=65, col_offset=11), [Name('item', Load(), lineno=65, col_offset=16)], [], None, None, lineno=65, col_offset=11), [In()], [Tuple([Name('TupleType', Load(), lineno=65, col_offset=26), Name('ListType', Load(), lineno=65, col_offset=37)], Load(), lineno=65, col_offset=26)], lineno=65, col_offset=11), [Assign([Name('res', Store(), lineno=66, col_offset=12)], BinOp(Name('res', Load(), lineno=66, col_offset=18), Add(), Call(Name('_flatten', Load(), lineno=66, col_offset=24), [Name('item', Load(), lineno=66, col_offset=33)], [], None, None, lineno=66, col_offset=24), lineno=66, col_offset=18), lineno=66, col_offset=12)], [If(Compare(Name('item', Load(), lineno=67, col_offset=13), [IsNot()], [Name('None', Load(), lineno=67, col_offset=25)], lineno=67, col_offset=13), [Assign([Name('res', Store(), lineno=68, col_offset=12)], BinOp(Name('res', Load(), lineno=68, col_offset=18), Add(), Tuple([Name('item', Load(), lineno=68, col_offset=25)], Load(), lineno=68, col_offset=25), lineno=68, col_offset=18), lineno=68, col_offset=12)], [], lineno=67, col_offset=13)], lineno=65, col_offset=8)], [], lineno=64, col_offset=4), Return(Name('res', Load(), lineno=69, col_offset=11), lineno=69, col_offset=4)], [], lineno=61, col_offset=0), TryExcept([Assign([Name('_flatten', Store(), lineno=71, col_offset=5)], Attribute(Name('_tkinter', Load(), lineno=71, col_offset=16), '_flatten', Load(), lineno=71, col_offset=16), lineno=71, col_offset=5)], [ExceptHandler(Name('AttributeError', Load(), lineno=72, col_offset=7), None, [Pass( lineno=72, col_offset=23)], lineno=72, col_offset=0)], [], lineno=71, col_offset=0), FunctionDef('_cnfmerge', arguments([Name('cnfs', Param(), lineno=74, col_offset=14)], None, None, []), [Expr(Str('Internal function.', lineno=75, col_offset=4), lineno=75, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=76, col_offset=7), [Name('cnfs', Load(), lineno=76, col_offset=12)], [], None, None, lineno=76, col_offset=7), [Is()], [Name('DictionaryType', Load(), lineno=76, col_offset=21)], lineno=76, col_offset=7), [Return(Name('cnfs', Load(), lineno=77, col_offset=15), lineno=77, col_offset=8)], [If(Compare(Call(Name('type', Load(), lineno=78, col_offset=9), [Name('cnfs', Load(), lineno=78, col_offset=14)], [], None, None, lineno=78, col_offset=9), [In()], [Tuple([Name('NoneType', Load(), lineno=78, col_offset=24), Name('StringType', Load(), lineno=78, col_offset=34)], Load(), lineno=78, col_offset=24)], lineno=78, col_offset=9), [Return(Name('cnfs', Load(), lineno=79, col_offset=15), lineno=79, col_offset=8)], [Assign([Name('cnf', Store(), lineno=81, col_offset=8)], Dict([], [], lineno=81, col_offset=14), lineno=81, col_offset=8), For(Name('c', Store(), lineno=82, col_offset=12), Call(Name('_flatten', Load(), lineno=82, col_offset=17), [Name('cnfs', Load(), lineno=82, col_offset=26)], [], None, None, lineno=82, col_offset=17), [TryExcept([Expr(Call(Attribute(Name('cnf', Load(), lineno=84, col_offset=16), 'update', Load(), lineno=84, col_offset=16), [Name('c', Load(), lineno=84, col_offset=27)], [], None, None, lineno=84, col_offset=16), lineno=84, col_offset=16)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=85, col_offset=20), Name('TypeError', Load(), lineno=85, col_offset=36)], Load(), lineno=85, col_offset=20), Name('msg', Store(), lineno=85, col_offset=48), [Print(None, [Str('_cnfmerge: fallback due to:', lineno=86, col_offset=22), Name('msg', Load(), lineno=86, col_offset=53)], True, lineno=86, col_offset=16), For(Tuple([Name('k', Store(), lineno=87, col_offset=20), Name('v', Store(), lineno=87, col_offset=23)], Store(), lineno=87, col_offset=20), Call(Attribute(Name('c', Load(), lineno=87, col_offset=28), 'items', Load(), lineno=87, col_offset=28), [], [], None, None, lineno=87, col_offset=28), [Assign([Subscript(Name('cnf', Load(), lineno=88, col_offset=20), Index(Name('k', Load(), lineno=88, col_offset=24)), Store(), lineno=88, col_offset=20)], Name('v', Load(), lineno=88, col_offset=29), lineno=88, col_offset=20)], [], lineno=87, col_offset=16)], lineno=85, col_offset=12)], [], lineno=83, col_offset=12)], [], lineno=82, col_offset=8), Return(Name('cnf', Load(), lineno=89, col_offset=15), lineno=89, col_offset=8)], lineno=78, col_offset=9)], lineno=76, col_offset=4)], [], lineno=74, col_offset=0), TryExcept([Assign([Name('_cnfmerge', Store(), lineno=91, col_offset=5)], Attribute(Name('_tkinter', Load(), lineno=91, col_offset=17), '_cnfmerge', Load(), lineno=91, col_offset=17), lineno=91, col_offset=5)], [ExceptHandler(Name('AttributeError', Load(), lineno=92, col_offset=7), None, [Pass( lineno=92, col_offset=23)], lineno=92, col_offset=0)], [], lineno=91, col_offset=0), ClassDef('Event', [], [Expr(Str('Container for the properties of an event.\n\n    Instances of this type are generated if one of the following events occurs:\n\n    KeyPress, KeyRelease - for keyboard events\n    ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events\n    Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,\n    Colormap, Gravity, Reparent, Property, Destroy, Activate,\n    Deactivate - for window events.\n\n    If a callback function for one of these events is registered\n    using bind, bind_all, bind_class, or tag_bind, the callback is\n    called with an Event as first argument. It will have the\n    following attributes (in braces are the event types for which\n    the attribute is valid):\n\n        serial - serial number of event\n    num - mouse button pressed (ButtonPress, ButtonRelease)\n    focus - whether the window has the focus (Enter, Leave)\n    height - height of the exposed window (Configure, Expose)\n    width - width of the exposed window (Configure, Expose)\n    keycode - keycode of the pressed key (KeyPress, KeyRelease)\n    state - state of the event as a number (ButtonPress, ButtonRelease,\n                            Enter, KeyPress, KeyRelease,\n                            Leave, Motion)\n    state - state as a string (Visibility)\n    time - when the event occurred\n    x - x-position of the mouse\n    y - y-position of the mouse\n    x_root - x-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    y_root - y-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    char - pressed character (KeyPress, KeyRelease)\n    send_event - see X/Windows documentation\n    keysym - keysym of the event as a string (KeyPress, KeyRelease)\n    keysym_num - keysym of the event as a number (KeyPress, KeyRelease)\n    type - type of the event as a number\n    widget - widget in which the event occurred\n    delta - delta of wheel movement (MouseWheel)\n    ', lineno=135, col_offset=-1), lineno=135, col_offset=-1), Pass( lineno=136, col_offset=4)], [], lineno=94, col_offset=0), Assign([Name('_support_default_root', Store(), lineno=138, col_offset=0)], Num(1, lineno=138, col_offset=24), lineno=138, col_offset=0), Assign([Name('_default_root', Store(), lineno=139, col_offset=0)], Name('None', Load(), lineno=139, col_offset=16), lineno=139, col_offset=0), FunctionDef('NoDefaultRoot', arguments([], None, None, []), [Expr(Str('Inhibit setting of default root window.\n\n    Call this function to inhibit that the first instance of\n    Tk is used for windows without an explicit parent window.\n    ', lineno=146, col_offset=-1), lineno=146, col_offset=-1), Global(['_support_default_root'], lineno=147, col_offset=4), Assign([Name('_support_default_root', Store(), lineno=148, col_offset=4)], Num(0, lineno=148, col_offset=28), lineno=148, col_offset=4), Global(['_default_root'], lineno=149, col_offset=4), Assign([Name('_default_root', Store(), lineno=150, col_offset=4)], Name('None', Load(), lineno=150, col_offset=20), lineno=150, col_offset=4), Delete([Name('_default_root', Del(), lineno=151, col_offset=8)], lineno=151, col_offset=4)], [], lineno=141, col_offset=0), FunctionDef('_tkerror', arguments([Name('err', Param(), lineno=153, col_offset=13)], None, None, []), [Expr(Str('Internal function.', lineno=154, col_offset=4), lineno=154, col_offset=4), Pass( lineno=155, col_offset=4)], [], lineno=153, col_offset=0), FunctionDef('_exit', arguments([Name('code', Param(), lineno=157, col_offset=10)], None, None, [Str('0', lineno=157, col_offset=15)]), [Expr(Str('Internal function. Calling it will throw the exception SystemExit.', lineno=158, col_offset=4), lineno=158, col_offset=4), Raise(Name('SystemExit', Load(), lineno=159, col_offset=10), Name('code', Load(), lineno=159, col_offset=22), None, lineno=159, col_offset=4)], [], lineno=157, col_offset=0), Assign([Name('_varnum', Store(), lineno=161, col_offset=0)], Num(0, lineno=161, col_offset=10), lineno=161, col_offset=0), ClassDef('Variable', [], [Expr(Str('Class to define value holders for e.g. buttons.\n\n    Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations\n    that constrain the type of the value returned from get().', lineno=166, col_offset=-1), lineno=166, col_offset=-1), Assign([Name('_default', Store(), lineno=167, col_offset=4)], Str('', lineno=167, col_offset=15), lineno=167, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=168, col_offset=17), Name('master', Param(), lineno=168, col_offset=23), Name('value', Param(), lineno=168, col_offset=36), Name('name', Param(), lineno=168, col_offset=48)], None, None, [Name('None', Load(), lineno=168, col_offset=30), Name('None', Load(), lineno=168, col_offset=42), Name('None', Load(), lineno=168, col_offset=53)]), [Expr(Str('Construct a variable\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to "")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ', lineno=177, col_offset=-1), lineno=177, col_offset=-1), Global(['_varnum'], lineno=178, col_offset=8), If(UnaryOp(Not(), Name('master', Load(), lineno=179, col_offset=15), lineno=179, col_offset=11), [Assign([Name('master', Store(), lineno=180, col_offset=12)], Name('_default_root', Load(), lineno=180, col_offset=21), lineno=180, col_offset=12)], [], lineno=179, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=181, col_offset=8), '_master', Store(), lineno=181, col_offset=8)], Name('master', Load(), lineno=181, col_offset=23), lineno=181, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=182, col_offset=8), '_tk', Store(), lineno=182, col_offset=8)], Attribute(Name('master', Load(), lineno=182, col_offset=19), 'tk', Load(), lineno=182, col_offset=19), lineno=182, col_offset=8), If(Name('name', Load(), lineno=183, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=184, col_offset=12), '_name', Store(), lineno=184, col_offset=12)], Name('name', Load(), lineno=184, col_offset=25), lineno=184, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=186, col_offset=12), '_name', Store(), lineno=186, col_offset=12)], BinOp(Str('PY_VAR', lineno=186, col_offset=25), Add(), Call(Name('repr', Load(), lineno=186, col_offset=36), [Name('_varnum', Load(), lineno=186, col_offset=41)], [], None, None, lineno=186, col_offset=36), lineno=186, col_offset=25), lineno=186, col_offset=12), AugAssign(Name('_varnum', Store(), lineno=187, col_offset=12), Add(), Num(1, lineno=187, col_offset=23), lineno=187, col_offset=12)], lineno=183, col_offset=8), If(Compare(Name('value', Load(), lineno=188, col_offset=11), [IsNot()], [Name('None', Load(), lineno=188, col_offset=24)], lineno=188, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=12), 'set', Load(), lineno=189, col_offset=12), [Name('value', Load(), lineno=189, col_offset=21)], [], None, None, lineno=189, col_offset=12), lineno=189, col_offset=12)], [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=190, col_offset=17), '_tk', Load(), lineno=190, col_offset=17), 'call', Load(), lineno=190, col_offset=17), [Str('info', lineno=190, col_offset=31), Str('exists', lineno=190, col_offset=39), Attribute(Name('self', Load(), lineno=190, col_offset=49), '_name', Load(), lineno=190, col_offset=49)], [], None, None, lineno=190, col_offset=17), lineno=190, col_offset=13), [Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=12), 'set', Load(), lineno=191, col_offset=12), [Attribute(Name('self', Load(), lineno=191, col_offset=21), '_default', Load(), lineno=191, col_offset=21)], [], None, None, lineno=191, col_offset=12), lineno=191, col_offset=12)], [], lineno=190, col_offset=13)], lineno=188, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=192, col_offset=16)], None, None, []), [Expr(Str('Unset the variable in Tcl.', lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=194, col_offset=8), '_tk', Load(), lineno=194, col_offset=8), 'globalunsetvar', Load(), lineno=194, col_offset=8), [Attribute(Name('self', Load(), lineno=194, col_offset=32), '_name', Load(), lineno=194, col_offset=32)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8)], [], lineno=192, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=195, col_offset=16)], None, None, []), [Expr(Str('Return the name of the variable in Tcl.', lineno=196, col_offset=8), lineno=196, col_offset=8), Return(Attribute(Name('self', Load(), lineno=197, col_offset=15), '_name', Load(), lineno=197, col_offset=15), lineno=197, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=198, col_offset=12), Name('value', Param(), lineno=198, col_offset=18)], None, None, []), [Expr(Str('Set the variable to VALUE.', lineno=199, col_offset=8), lineno=199, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=200, col_offset=15), '_tk', Load(), lineno=200, col_offset=15), 'globalsetvar', Load(), lineno=200, col_offset=15), [Attribute(Name('self', Load(), lineno=200, col_offset=37), '_name', Load(), lineno=200, col_offset=37), Name('value', Load(), lineno=200, col_offset=49)], [], None, None, lineno=200, col_offset=15), lineno=200, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=201, col_offset=12)], None, None, []), [Expr(Str('Return value of variable.', lineno=202, col_offset=8), lineno=202, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=203, col_offset=15), '_tk', Load(), lineno=203, col_offset=15), 'globalgetvar', Load(), lineno=203, col_offset=15), [Attribute(Name('self', Load(), lineno=203, col_offset=37), '_name', Load(), lineno=203, col_offset=37)], [], None, None, lineno=203, col_offset=15), lineno=203, col_offset=8)], [], lineno=201, col_offset=4), FunctionDef('trace_variable', arguments([Name('self', Param(), lineno=204, col_offset=23), Name('mode', Param(), lineno=204, col_offset=29), Name('callback', Param(), lineno=204, col_offset=35)], None, None, []), [Expr(Str('Define a trace callback for the variable.\n\n        MODE is one of "r", "w", "u" for read, write, undefine.\n        CALLBACK must be a function which is called when\n        the variable is read, written or undefined.\n\n        Return the name of the callback.\n        ', lineno=212, col_offset=-1), lineno=212, col_offset=-1), Assign([Name('cbname', Store(), lineno=213, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=213, col_offset=17), '_master', Load(), lineno=213, col_offset=17), '_register', Load(), lineno=213, col_offset=17), [Name('callback', Load(), lineno=213, col_offset=40)], [], None, None, lineno=213, col_offset=17), lineno=213, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=214, col_offset=8), '_tk', Load(), lineno=214, col_offset=8), 'call', Load(), lineno=214, col_offset=8), [Str('trace', lineno=214, col_offset=22), Str('variable', lineno=214, col_offset=31), Attribute(Name('self', Load(), lineno=214, col_offset=43), '_name', Load(), lineno=214, col_offset=43), Name('mode', Load(), lineno=214, col_offset=55), Name('cbname', Load(), lineno=214, col_offset=61)], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=8), Return(Name('cbname', Load(), lineno=215, col_offset=15), lineno=215, col_offset=8)], [], lineno=204, col_offset=4), Assign([Name('trace', Store(), lineno=216, col_offset=4)], Name('trace_variable', Load(), lineno=216, col_offset=12), lineno=216, col_offset=4), FunctionDef('trace_vdelete', arguments([Name('self', Param(), lineno=217, col_offset=22), Name('mode', Param(), lineno=217, col_offset=28), Name('cbname', Param(), lineno=217, col_offset=34)], None, None, []), [Expr(Str('Delete the trace callback for a variable.\n\n        MODE is one of "r", "w", "u" for read, write, undefine.\n        CBNAME is the name of the callback returned from trace_variable or trace.\n        ', lineno=222, col_offset=-1), lineno=222, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=223, col_offset=8), '_tk', Load(), lineno=223, col_offset=8), 'call', Load(), lineno=223, col_offset=8), [Str('trace', lineno=223, col_offset=22), Str('vdelete', lineno=223, col_offset=31), Attribute(Name('self', Load(), lineno=223, col_offset=42), '_name', Load(), lineno=223, col_offset=42), Name('mode', Load(), lineno=223, col_offset=54), Name('cbname', Load(), lineno=223, col_offset=60)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=224, col_offset=8), '_master', Load(), lineno=224, col_offset=8), 'deletecommand', Load(), lineno=224, col_offset=8), [Name('cbname', Load(), lineno=224, col_offset=35)], [], None, None, lineno=224, col_offset=8), lineno=224, col_offset=8)], [], lineno=217, col_offset=4), FunctionDef('trace_vinfo', arguments([Name('self', Param(), lineno=225, col_offset=20)], None, None, []), [Expr(Str('Return all trace callback information.', lineno=226, col_offset=8), lineno=226, col_offset=8), Return(Call(Name('map', Load(), lineno=227, col_offset=15), [Attribute(Attribute(Name('self', Load(), lineno=227, col_offset=19), '_tk', Load(), lineno=227, col_offset=19), 'split', Load(), lineno=227, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=227, col_offset=35), '_tk', Load(), lineno=227, col_offset=35), 'splitlist', Load(), lineno=227, col_offset=35), [Call(Attribute(Attribute(Name('self', Load(), lineno=228, col_offset=12), '_tk', Load(), lineno=228, col_offset=12), 'call', Load(), lineno=228, col_offset=12), [Str('trace', lineno=228, col_offset=26), Str('vinfo', lineno=228, col_offset=35), Attribute(Name('self', Load(), lineno=228, col_offset=44), '_name', Load(), lineno=228, col_offset=44)], [], None, None, lineno=228, col_offset=12)], [], None, None, lineno=227, col_offset=35)], [], None, None, lineno=227, col_offset=15), lineno=227, col_offset=8)], [], lineno=225, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=229, col_offset=15), Name('other', Param(), lineno=229, col_offset=21)], None, None, []), [Expr(Str("Comparison for equality (==).\n\n        Note: if the Variable's master matters to behavior\n        also compare self._master == other._master\n        ", lineno=234, col_offset=-1), lineno=234, col_offset=-1), Return(BoolOp(And(), [Compare(Attribute(Attribute(Name('self', Load(), lineno=235, col_offset=15), '__class__', Load(), lineno=235, col_offset=15), '__name__', Load(), lineno=235, col_offset=15), [Eq()], [Attribute(Attribute(Name('other', Load(), lineno=235, col_offset=42), '__class__', Load(), lineno=235, col_offset=42), '__name__', Load(), lineno=235, col_offset=42)], lineno=235, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=236, col_offset=16), '_name', Load(), lineno=236, col_offset=16), [Eq()], [Attribute(Name('other', Load(), lineno=236, col_offset=30), '_name', Load(), lineno=236, col_offset=30)], lineno=236, col_offset=16)], lineno=235, col_offset=15), lineno=235, col_offset=8)], [], lineno=229, col_offset=4)], [], lineno=162, col_offset=0), ClassDef('StringVar', [Name('Variable', Load(), lineno=238, col_offset=16)], [Expr(Str('Value holder for strings variables.', lineno=239, col_offset=4), lineno=239, col_offset=4), Assign([Name('_default', Store(), lineno=240, col_offset=4)], Str('', lineno=240, col_offset=15), lineno=240, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=241, col_offset=17), Name('master', Param(), lineno=241, col_offset=23), Name('value', Param(), lineno=241, col_offset=36), Name('name', Param(), lineno=241, col_offset=48)], None, None, [Name('None', Load(), lineno=241, col_offset=30), Name('None', Load(), lineno=241, col_offset=42), Name('None', Load(), lineno=241, col_offset=53)]), [Expr(Str('Construct a string variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to "")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ', lineno=250, col_offset=-1), lineno=250, col_offset=-1), Expr(Call(Attribute(Name('Variable', Load(), lineno=251, col_offset=8), '__init__', Load(), lineno=251, col_offset=8), [Name('self', Load(), lineno=251, col_offset=26), Name('master', Load(), lineno=251, col_offset=32), Name('value', Load(), lineno=251, col_offset=40), Name('name', Load(), lineno=251, col_offset=47)], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8)], [], lineno=241, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=253, col_offset=12)], None, None, []), [Expr(Str('Return value of variable as string.', lineno=254, col_offset=8), lineno=254, col_offset=8), Assign([Name('value', Store(), lineno=255, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=255, col_offset=16), '_tk', Load(), lineno=255, col_offset=16), 'globalgetvar', Load(), lineno=255, col_offset=16), [Attribute(Name('self', Load(), lineno=255, col_offset=38), '_name', Load(), lineno=255, col_offset=38)], [], None, None, lineno=255, col_offset=16), lineno=255, col_offset=8), If(Call(Name('isinstance', Load(), lineno=256, col_offset=11), [Name('value', Load(), lineno=256, col_offset=22), Name('basestring', Load(), lineno=256, col_offset=29)], [], None, None, lineno=256, col_offset=11), [Return(Name('value', Load(), lineno=257, col_offset=19), lineno=257, col_offset=12)], [], lineno=256, col_offset=8), Return(Call(Name('str', Load(), lineno=258, col_offset=15), [Name('value', Load(), lineno=258, col_offset=19)], [], None, None, lineno=258, col_offset=15), lineno=258, col_offset=8)], [], lineno=253, col_offset=4)], [], lineno=238, col_offset=0), ClassDef('IntVar', [Name('Variable', Load(), lineno=260, col_offset=13)], [Expr(Str('Value holder for integer variables.', lineno=261, col_offset=4), lineno=261, col_offset=4), Assign([Name('_default', Store(), lineno=262, col_offset=4)], Num(0, lineno=262, col_offset=15), lineno=262, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=263, col_offset=17), Name('master', Param(), lineno=263, col_offset=23), Name('value', Param(), lineno=263, col_offset=36), Name('name', Param(), lineno=263, col_offset=48)], None, None, [Name('None', Load(), lineno=263, col_offset=30), Name('None', Load(), lineno=263, col_offset=42), Name('None', Load(), lineno=263, col_offset=53)]), [Expr(Str('Construct an integer variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ', lineno=272, col_offset=-1), lineno=272, col_offset=-1), Expr(Call(Attribute(Name('Variable', Load(), lineno=273, col_offset=8), '__init__', Load(), lineno=273, col_offset=8), [Name('self', Load(), lineno=273, col_offset=26), Name('master', Load(), lineno=273, col_offset=32), Name('value', Load(), lineno=273, col_offset=40), Name('name', Load(), lineno=273, col_offset=47)], [], None, None, lineno=273, col_offset=8), lineno=273, col_offset=8)], [], lineno=263, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=275, col_offset=12), Name('value', Param(), lineno=275, col_offset=18)], None, None, []), [Expr(Str('Set the variable to value, converting booleans to integers.', lineno=276, col_offset=8), lineno=276, col_offset=8), If(Call(Name('isinstance', Load(), lineno=277, col_offset=11), [Name('value', Load(), lineno=277, col_offset=22), Name('bool', Load(), lineno=277, col_offset=29)], [], None, None, lineno=277, col_offset=11), [Assign([Name('value', Store(), lineno=278, col_offset=12)], Call(Name('int', Load(), lineno=278, col_offset=20), [Name('value', Load(), lineno=278, col_offset=24)], [], None, None, lineno=278, col_offset=20), lineno=278, col_offset=12)], [], lineno=277, col_offset=8), Return(Call(Attribute(Name('Variable', Load(), lineno=279, col_offset=15), 'set', Load(), lineno=279, col_offset=15), [Name('self', Load(), lineno=279, col_offset=28), Name('value', Load(), lineno=279, col_offset=34)], [], None, None, lineno=279, col_offset=15), lineno=279, col_offset=8)], [], lineno=275, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=281, col_offset=12)], None, None, []), [Expr(Str('Return the value of the variable as an integer.', lineno=282, col_offset=8), lineno=282, col_offset=8), Return(Call(Name('getint', Load(), lineno=283, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=283, col_offset=22), '_tk', Load(), lineno=283, col_offset=22), 'globalgetvar', Load(), lineno=283, col_offset=22), [Attribute(Name('self', Load(), lineno=283, col_offset=44), '_name', Load(), lineno=283, col_offset=44)], [], None, None, lineno=283, col_offset=22)], [], None, None, lineno=283, col_offset=15), lineno=283, col_offset=8)], [], lineno=281, col_offset=4)], [], lineno=260, col_offset=0), ClassDef('DoubleVar', [Name('Variable', Load(), lineno=285, col_offset=16)], [Expr(Str('Value holder for float variables.', lineno=286, col_offset=4), lineno=286, col_offset=4), Assign([Name('_default', Store(), lineno=287, col_offset=4)], Num(0.0, lineno=287, col_offset=15), lineno=287, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=288, col_offset=17), Name('master', Param(), lineno=288, col_offset=23), Name('value', Param(), lineno=288, col_offset=36), Name('name', Param(), lineno=288, col_offset=48)], None, None, [Name('None', Load(), lineno=288, col_offset=30), Name('None', Load(), lineno=288, col_offset=42), Name('None', Load(), lineno=288, col_offset=53)]), [Expr(Str('Construct a float variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0.0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ', lineno=297, col_offset=-1), lineno=297, col_offset=-1), Expr(Call(Attribute(Name('Variable', Load(), lineno=298, col_offset=8), '__init__', Load(), lineno=298, col_offset=8), [Name('self', Load(), lineno=298, col_offset=26), Name('master', Load(), lineno=298, col_offset=32), Name('value', Load(), lineno=298, col_offset=40), Name('name', Load(), lineno=298, col_offset=47)], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=300, col_offset=12)], None, None, []), [Expr(Str('Return the value of the variable as a float.', lineno=301, col_offset=8), lineno=301, col_offset=8), Return(Call(Name('getdouble', Load(), lineno=302, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=302, col_offset=25), '_tk', Load(), lineno=302, col_offset=25), 'globalgetvar', Load(), lineno=302, col_offset=25), [Attribute(Name('self', Load(), lineno=302, col_offset=47), '_name', Load(), lineno=302, col_offset=47)], [], None, None, lineno=302, col_offset=25)], [], None, None, lineno=302, col_offset=15), lineno=302, col_offset=8)], [], lineno=300, col_offset=4)], [], lineno=285, col_offset=0), ClassDef('BooleanVar', [Name('Variable', Load(), lineno=304, col_offset=17)], [Expr(Str('Value holder for boolean variables.', lineno=305, col_offset=4), lineno=305, col_offset=4), Assign([Name('_default', Store(), lineno=306, col_offset=4)], Name('False', Load(), lineno=306, col_offset=15), lineno=306, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=307, col_offset=17), Name('master', Param(), lineno=307, col_offset=23), Name('value', Param(), lineno=307, col_offset=36), Name('name', Param(), lineno=307, col_offset=48)], None, None, [Name('None', Load(), lineno=307, col_offset=30), Name('None', Load(), lineno=307, col_offset=42), Name('None', Load(), lineno=307, col_offset=53)]), [Expr(Str('Construct a boolean variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to False)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ', lineno=316, col_offset=-1), lineno=316, col_offset=-1), Expr(Call(Attribute(Name('Variable', Load(), lineno=317, col_offset=8), '__init__', Load(), lineno=317, col_offset=8), [Name('self', Load(), lineno=317, col_offset=26), Name('master', Load(), lineno=317, col_offset=32), Name('value', Load(), lineno=317, col_offset=40), Name('name', Load(), lineno=317, col_offset=47)], [], None, None, lineno=317, col_offset=8), lineno=317, col_offset=8)], [], lineno=307, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=319, col_offset=12)], None, None, []), [Expr(Str('Return the value of the variable as a bool.', lineno=320, col_offset=8), lineno=320, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=321, col_offset=15), '_tk', Load(), lineno=321, col_offset=15), 'getboolean', Load(), lineno=321, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=321, col_offset=35), '_tk', Load(), lineno=321, col_offset=35), 'globalgetvar', Load(), lineno=321, col_offset=35), [Attribute(Name('self', Load(), lineno=321, col_offset=57), '_name', Load(), lineno=321, col_offset=57)], [], None, None, lineno=321, col_offset=35)], [], None, None, lineno=321, col_offset=15), lineno=321, col_offset=8)], [], lineno=319, col_offset=4)], [], lineno=304, col_offset=0), FunctionDef('mainloop', arguments([Name('n', Param(), lineno=323, col_offset=13)], None, None, [Num(0, lineno=323, col_offset=15)]), [Expr(Str('Run the main loop of Tcl.', lineno=324, col_offset=4), lineno=324, col_offset=4), Expr(Call(Attribute(Attribute(Name('_default_root', Load(), lineno=325, col_offset=4), 'tk', Load(), lineno=325, col_offset=4), 'mainloop', Load(), lineno=325, col_offset=4), [Name('n', Load(), lineno=325, col_offset=30)], [], None, None, lineno=325, col_offset=4), lineno=325, col_offset=4)], [], lineno=323, col_offset=0), Assign([Name('getint', Store(), lineno=327, col_offset=0)], Name('int', Load(), lineno=327, col_offset=9), lineno=327, col_offset=0), Assign([Name('getdouble', Store(), lineno=329, col_offset=0)], Name('float', Load(), lineno=329, col_offset=12), lineno=329, col_offset=0), FunctionDef('getboolean', arguments([Name('s', Param(), lineno=331, col_offset=15)], None, None, []), [Expr(Str('Convert true and false to integer values 1 and 0.', lineno=332, col_offset=4), lineno=332, col_offset=4), Return(Call(Attribute(Attribute(Name('_default_root', Load(), lineno=333, col_offset=11), 'tk', Load(), lineno=333, col_offset=11), 'getboolean', Load(), lineno=333, col_offset=11), [Name('s', Load(), lineno=333, col_offset=39)], [], None, None, lineno=333, col_offset=11), lineno=333, col_offset=4)], [], lineno=331, col_offset=0), ClassDef('Misc', [], [Expr(Str('Internal class.\n\n    Base class which defines methods common for interior widgets.', lineno=339, col_offset=-1), lineno=339, col_offset=-1), Assign([Name('_tclCommands', Store(), lineno=342, col_offset=4)], Name('None', Load(), lineno=342, col_offset=19), lineno=342, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=343, col_offset=16)], None, None, []), [Expr(Str('Internal function.\n\n        Delete all Tcl commands created for\n        this widget in the Tcl interpreter.', lineno=347, col_offset=-1), lineno=347, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=348, col_offset=11), '_tclCommands', Load(), lineno=348, col_offset=11), [IsNot()], [Name('None', Load(), lineno=348, col_offset=36)], lineno=348, col_offset=11), [For(Name('name', Store(), lineno=349, col_offset=16), Attribute(Name('self', Load(), lineno=349, col_offset=24), '_tclCommands', Load(), lineno=349, col_offset=24), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=351, col_offset=16), 'tk', Load(), lineno=351, col_offset=16), 'deletecommand', Load(), lineno=351, col_offset=16), [Name('name', Load(), lineno=351, col_offset=38)], [], None, None, lineno=351, col_offset=16), lineno=351, col_offset=16)], [], lineno=349, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=352, col_offset=12), '_tclCommands', Store(), lineno=352, col_offset=12)], Name('None', Load(), lineno=352, col_offset=32), lineno=352, col_offset=12)], [], lineno=348, col_offset=8)], [], lineno=343, col_offset=4), FunctionDef('deletecommand', arguments([Name('self', Param(), lineno=353, col_offset=22), Name('name', Param(), lineno=353, col_offset=28)], None, None, []), [Expr(Str('Internal function.\n\n        Delete the Tcl command provided in NAME.', lineno=356, col_offset=-1), lineno=356, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=358, col_offset=8), 'tk', Load(), lineno=358, col_offset=8), 'deletecommand', Load(), lineno=358, col_offset=8), [Name('name', Load(), lineno=358, col_offset=30)], [], None, None, lineno=358, col_offset=8), lineno=358, col_offset=8), TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=360, col_offset=12), '_tclCommands', Load(), lineno=360, col_offset=12), 'remove', Load(), lineno=360, col_offset=12), [Name('name', Load(), lineno=360, col_offset=37)], [], None, None, lineno=360, col_offset=12), lineno=360, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=361, col_offset=15), None, [Pass( lineno=362, col_offset=12)], lineno=361, col_offset=8)], [], lineno=359, col_offset=8)], [], lineno=353, col_offset=4), FunctionDef('tk_strictMotif', arguments([Name('self', Param(), lineno=363, col_offset=23), Name('boolean', Param(), lineno=363, col_offset=29)], None, None, [Name('None', Load(), lineno=363, col_offset=37)]), [Expr(Str('Set Tcl internal variable, whether the look and feel\n        should adhere to Motif.\n\n        A parameter of 1 means adhere to Motif (e.g. no color\n        change if mouse passes over slider).\n        Returns the set value.', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=370, col_offset=15), 'tk', Load(), lineno=370, col_offset=15), 'getboolean', Load(), lineno=370, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=370, col_offset=34), 'tk', Load(), lineno=370, col_offset=34), 'call', Load(), lineno=370, col_offset=34), [Str('set', lineno=371, col_offset=12), Str('tk_strictMotif', lineno=371, col_offset=19), Name('boolean', Load(), lineno=371, col_offset=37)], [], None, None, lineno=370, col_offset=34)], [], None, None, lineno=370, col_offset=15), lineno=370, col_offset=8)], [], lineno=363, col_offset=4), FunctionDef('tk_bisque', arguments([Name('self', Param(), lineno=372, col_offset=18)], None, None, []), [Expr(Str('Change the color scheme to light brown as used in Tk 3.6 and before.', lineno=373, col_offset=8), lineno=373, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=374, col_offset=8), 'tk', Load(), lineno=374, col_offset=8), 'call', Load(), lineno=374, col_offset=8), [Str('tk_bisque', lineno=374, col_offset=21)], [], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8)], [], lineno=372, col_offset=4), FunctionDef('tk_setPalette', arguments([Name('self', Param(), lineno=375, col_offset=22)], 'args', 'kw', []), [Expr(Str('Set a new color scheme for all widget elements.\n\n        A single color as argument will cause that all colors of Tk\n        widget elements are derived from this.\n        Alternatively several keyword parameters and its associated\n        colors can be given. The following keywords are valid:\n        activeBackground, foreground, selectColor,\n        activeForeground, highlightBackground, selectBackground,\n        background, highlightColor, selectForeground,\n        disabledForeground, insertBackground, troughColor.', lineno=385, col_offset=-1), lineno=385, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=386, col_offset=8), 'tk', Load(), lineno=386, col_offset=8), 'call', Load(), lineno=386, col_offset=8), [BinOp(BinOp(Tuple([Str('tk_setPalette', lineno=386, col_offset=22)], Load(), lineno=386, col_offset=22), Add(), Call(Name('_flatten', Load(), lineno=387, col_offset=16), [Name('args', Load(), lineno=387, col_offset=25)], [], None, None, lineno=387, col_offset=16), lineno=386, col_offset=21), Add(), Call(Name('_flatten', Load(), lineno=387, col_offset=33), [Call(Attribute(Name('kw', Load(), lineno=387, col_offset=42), 'items', Load(), lineno=387, col_offset=42), [], [], None, None, lineno=387, col_offset=42)], [], None, None, lineno=387, col_offset=33), lineno=387, col_offset=31)], [], None, None, lineno=386, col_offset=8), lineno=386, col_offset=8)], [], lineno=375, col_offset=4), FunctionDef('tk_menuBar', arguments([Name('self', Param(), lineno=388, col_offset=19)], 'args', None, []), [Expr(Str('Do not use. Needed in Tk 3.6 and earlier.', lineno=389, col_offset=8), lineno=389, col_offset=8), Pass( lineno=390, col_offset=8)], [], lineno=388, col_offset=4), FunctionDef('wait_variable', arguments([Name('self', Param(), lineno=391, col_offset=22), Name('name', Param(), lineno=391, col_offset=28)], None, None, [Str('PY_VAR', lineno=391, col_offset=33)]), [Expr(Str('Wait until the variable is modified.\n\n        A parameter of type IntVar, StringVar, DoubleVar or\n        BooleanVar must be given.', lineno=395, col_offset=-1), lineno=395, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=396, col_offset=8), 'tk', Load(), lineno=396, col_offset=8), 'call', Load(), lineno=396, col_offset=8), [Str('tkwait', lineno=396, col_offset=21), Str('variable', lineno=396, col_offset=31), Name('name', Load(), lineno=396, col_offset=43)], [], None, None, lineno=396, col_offset=8), lineno=396, col_offset=8)], [], lineno=391, col_offset=4), Assign([Name('waitvar', Store(), lineno=397, col_offset=4)], Name('wait_variable', Load(), lineno=397, col_offset=14), lineno=397, col_offset=4), FunctionDef('wait_window', arguments([Name('self', Param(), lineno=398, col_offset=20), Name('window', Param(), lineno=398, col_offset=26)], None, None, [Name('None', Load(), lineno=398, col_offset=33)]), [Expr(Str('Wait until a WIDGET is destroyed.\n\n        If no parameter is given self is used.', lineno=401, col_offset=-1), lineno=401, col_offset=-1), If(Compare(Name('window', Load(), lineno=402, col_offset=11), [Is()], [Name('None', Load(), lineno=402, col_offset=21)], lineno=402, col_offset=11), [Assign([Name('window', Store(), lineno=403, col_offset=12)], Name('self', Load(), lineno=403, col_offset=21), lineno=403, col_offset=12)], [], lineno=402, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=404, col_offset=8), 'tk', Load(), lineno=404, col_offset=8), 'call', Load(), lineno=404, col_offset=8), [Str('tkwait', lineno=404, col_offset=21), Str('window', lineno=404, col_offset=31), Attribute(Name('window', Load(), lineno=404, col_offset=41), '_w', Load(), lineno=404, col_offset=41)], [], None, None, lineno=404, col_offset=8), lineno=404, col_offset=8)], [], lineno=398, col_offset=4), FunctionDef('wait_visibility', arguments([Name('self', Param(), lineno=405, col_offset=24), Name('window', Param(), lineno=405, col_offset=30)], None, None, [Name('None', Load(), lineno=405, col_offset=37)]), [Expr(Str('Wait until the visibility of a WIDGET changes\n        (e.g. it appears).\n\n        If no parameter is given self is used.', lineno=409, col_offset=-1), lineno=409, col_offset=-1), If(Compare(Name('window', Load(), lineno=410, col_offset=11), [Is()], [Name('None', Load(), lineno=410, col_offset=21)], lineno=410, col_offset=11), [Assign([Name('window', Store(), lineno=411, col_offset=12)], Name('self', Load(), lineno=411, col_offset=21), lineno=411, col_offset=12)], [], lineno=410, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=412, col_offset=8), 'tk', Load(), lineno=412, col_offset=8), 'call', Load(), lineno=412, col_offset=8), [Str('tkwait', lineno=412, col_offset=21), Str('visibility', lineno=412, col_offset=31), Attribute(Name('window', Load(), lineno=412, col_offset=45), '_w', Load(), lineno=412, col_offset=45)], [], None, None, lineno=412, col_offset=8), lineno=412, col_offset=8)], [], lineno=405, col_offset=4), FunctionDef('setvar', arguments([Name('self', Param(), lineno=413, col_offset=15), Name('name', Param(), lineno=413, col_offset=21), Name('value', Param(), lineno=413, col_offset=36)], None, None, [Str('PY_VAR', lineno=413, col_offset=26), Str('1', lineno=413, col_offset=42)]), [Expr(Str('Set Tcl variable NAME to VALUE.', lineno=414, col_offset=8), lineno=414, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=415, col_offset=8), 'tk', Load(), lineno=415, col_offset=8), 'setvar', Load(), lineno=415, col_offset=8), [Name('name', Load(), lineno=415, col_offset=23), Name('value', Load(), lineno=415, col_offset=29)], [], None, None, lineno=415, col_offset=8), lineno=415, col_offset=8)], [], lineno=413, col_offset=4), FunctionDef('getvar', arguments([Name('self', Param(), lineno=416, col_offset=15), Name('name', Param(), lineno=416, col_offset=21)], None, None, [Str('PY_VAR', lineno=416, col_offset=26)]), [Expr(Str('Return value of Tcl variable NAME.', lineno=417, col_offset=8), lineno=417, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=418, col_offset=15), 'tk', Load(), lineno=418, col_offset=15), 'getvar', Load(), lineno=418, col_offset=15), [Name('name', Load(), lineno=418, col_offset=30)], [], None, None, lineno=418, col_offset=15), lineno=418, col_offset=8)], [], lineno=416, col_offset=4), Assign([Name('getint', Store(), lineno=419, col_offset=4)], Name('int', Load(), lineno=419, col_offset=13), lineno=419, col_offset=4), Assign([Name('getdouble', Store(), lineno=420, col_offset=4)], Name('float', Load(), lineno=420, col_offset=16), lineno=420, col_offset=4), FunctionDef('getboolean', arguments([Name('self', Param(), lineno=421, col_offset=19), Name('s', Param(), lineno=421, col_offset=25)], None, None, []), [Expr(Str('Return a boolean value for Tcl boolean values true and false given as parameter.', lineno=422, col_offset=8), lineno=422, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=423, col_offset=15), 'tk', Load(), lineno=423, col_offset=15), 'getboolean', Load(), lineno=423, col_offset=15), [Name('s', Load(), lineno=423, col_offset=34)], [], None, None, lineno=423, col_offset=15), lineno=423, col_offset=8)], [], lineno=421, col_offset=4), FunctionDef('focus_set', arguments([Name('self', Param(), lineno=424, col_offset=18)], None, None, []), [Expr(Str('Direct input focus to this widget.\n\n        If the application currently does not have the focus\n        this widget will get the focus if the application gets\n        the focus through the window manager.', lineno=429, col_offset=-1), lineno=429, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=430, col_offset=8), 'tk', Load(), lineno=430, col_offset=8), 'call', Load(), lineno=430, col_offset=8), [Str('focus', lineno=430, col_offset=21), Attribute(Name('self', Load(), lineno=430, col_offset=30), '_w', Load(), lineno=430, col_offset=30)], [], None, None, lineno=430, col_offset=8), lineno=430, col_offset=8)], [], lineno=424, col_offset=4), Assign([Name('focus', Store(), lineno=431, col_offset=4)], Name('focus_set', Load(), lineno=431, col_offset=12), lineno=431, col_offset=4), FunctionDef('focus_force', arguments([Name('self', Param(), lineno=432, col_offset=20)], None, None, []), [Expr(Str('Direct input focus to this widget even if the\n        application does not have the focus. Use with\n        caution!', lineno=435, col_offset=-1), lineno=435, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=436, col_offset=8), 'tk', Load(), lineno=436, col_offset=8), 'call', Load(), lineno=436, col_offset=8), [Str('focus', lineno=436, col_offset=21), Str('-force', lineno=436, col_offset=30), Attribute(Name('self', Load(), lineno=436, col_offset=40), '_w', Load(), lineno=436, col_offset=40)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8)], [], lineno=432, col_offset=4), FunctionDef('focus_get', arguments([Name('self', Param(), lineno=437, col_offset=18)], None, None, []), [Expr(Str('Return the widget which has currently the focus in the\n        application.\n\n        Use focus_displayof to allow working with several\n        displays. Return None if application does not have\n        the focus.', lineno=443, col_offset=-1), lineno=443, col_offset=-1), Assign([Name('name', Store(), lineno=444, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=444, col_offset=15), 'tk', Load(), lineno=444, col_offset=15), 'call', Load(), lineno=444, col_offset=15), [Str('focus', lineno=444, col_offset=28)], [], None, None, lineno=444, col_offset=15), lineno=444, col_offset=8), If(BoolOp(Or(), [Compare(Name('name', Load(), lineno=445, col_offset=11), [Eq()], [Str('none', lineno=445, col_offset=19)], lineno=445, col_offset=11), UnaryOp(Not(), Name('name', Load(), lineno=445, col_offset=33), lineno=445, col_offset=29)], lineno=445, col_offset=11), [Return(Name('None', Load(), lineno=445, col_offset=46), lineno=445, col_offset=39)], [], lineno=445, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=446, col_offset=15), '_nametowidget', Load(), lineno=446, col_offset=15), [Name('name', Load(), lineno=446, col_offset=34)], [], None, None, lineno=446, col_offset=15), lineno=446, col_offset=8)], [], lineno=437, col_offset=4), FunctionDef('focus_displayof', arguments([Name('self', Param(), lineno=447, col_offset=24)], None, None, []), [Expr(Str('Return the widget which has currently the focus on the\n        display where this widget is located.\n\n        Return None if the application does not have the focus.', lineno=451, col_offset=-1), lineno=451, col_offset=-1), Assign([Name('name', Store(), lineno=452, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=452, col_offset=15), 'tk', Load(), lineno=452, col_offset=15), 'call', Load(), lineno=452, col_offset=15), [Str('focus', lineno=452, col_offset=28), Str('-displayof', lineno=452, col_offset=37), Attribute(Name('self', Load(), lineno=452, col_offset=51), '_w', Load(), lineno=452, col_offset=51)], [], None, None, lineno=452, col_offset=15), lineno=452, col_offset=8), If(BoolOp(Or(), [Compare(Name('name', Load(), lineno=453, col_offset=11), [Eq()], [Str('none', lineno=453, col_offset=19)], lineno=453, col_offset=11), UnaryOp(Not(), Name('name', Load(), lineno=453, col_offset=33), lineno=453, col_offset=29)], lineno=453, col_offset=11), [Return(Name('None', Load(), lineno=453, col_offset=46), lineno=453, col_offset=39)], [], lineno=453, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=454, col_offset=15), '_nametowidget', Load(), lineno=454, col_offset=15), [Name('name', Load(), lineno=454, col_offset=34)], [], None, None, lineno=454, col_offset=15), lineno=454, col_offset=8)], [], lineno=447, col_offset=4), FunctionDef('focus_lastfor', arguments([Name('self', Param(), lineno=455, col_offset=22)], None, None, []), [Expr(Str('Return the widget which would have the focus if top level\n        for this widget gets the focus from the window manager.', lineno=457, col_offset=-1), lineno=457, col_offset=-1), Assign([Name('name', Store(), lineno=458, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=458, col_offset=15), 'tk', Load(), lineno=458, col_offset=15), 'call', Load(), lineno=458, col_offset=15), [Str('focus', lineno=458, col_offset=28), Str('-lastfor', lineno=458, col_offset=37), Attribute(Name('self', Load(), lineno=458, col_offset=49), '_w', Load(), lineno=458, col_offset=49)], [], None, None, lineno=458, col_offset=15), lineno=458, col_offset=8), If(BoolOp(Or(), [Compare(Name('name', Load(), lineno=459, col_offset=11), [Eq()], [Str('none', lineno=459, col_offset=19)], lineno=459, col_offset=11), UnaryOp(Not(), Name('name', Load(), lineno=459, col_offset=33), lineno=459, col_offset=29)], lineno=459, col_offset=11), [Return(Name('None', Load(), lineno=459, col_offset=46), lineno=459, col_offset=39)], [], lineno=459, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=460, col_offset=15), '_nametowidget', Load(), lineno=460, col_offset=15), [Name('name', Load(), lineno=460, col_offset=34)], [], None, None, lineno=460, col_offset=15), lineno=460, col_offset=8)], [], lineno=455, col_offset=4), FunctionDef('tk_focusFollowsMouse', arguments([Name('self', Param(), lineno=461, col_offset=29)], None, None, []), [Expr(Str('The widget under mouse will get automatically focus. Can not\n        be disabled easily.', lineno=463, col_offset=-1), lineno=463, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=464, col_offset=8), 'tk', Load(), lineno=464, col_offset=8), 'call', Load(), lineno=464, col_offset=8), [Str('tk_focusFollowsMouse', lineno=464, col_offset=21)], [], None, None, lineno=464, col_offset=8), lineno=464, col_offset=8)], [], lineno=461, col_offset=4), FunctionDef('tk_focusNext', arguments([Name('self', Param(), lineno=465, col_offset=21)], None, None, []), [Expr(Str('Return the next widget in the focus order which follows\n        widget which has currently the focus.\n\n        The focus order first goes to the next child, then to\n        the children of the child recursively and then to the\n        next sibling which is higher in the stacking order.  A\n        widget is omitted if it has the takefocus resource set\n        to 0.', lineno=473, col_offset=-1), lineno=473, col_offset=-1), Assign([Name('name', Store(), lineno=474, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=474, col_offset=15), 'tk', Load(), lineno=474, col_offset=15), 'call', Load(), lineno=474, col_offset=15), [Str('tk_focusNext', lineno=474, col_offset=28), Attribute(Name('self', Load(), lineno=474, col_offset=44), '_w', Load(), lineno=474, col_offset=44)], [], None, None, lineno=474, col_offset=15), lineno=474, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=475, col_offset=15), lineno=475, col_offset=11), [Return(Name('None', Load(), lineno=475, col_offset=28), lineno=475, col_offset=21)], [], lineno=475, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=476, col_offset=15), '_nametowidget', Load(), lineno=476, col_offset=15), [Name('name', Load(), lineno=476, col_offset=34)], [], None, None, lineno=476, col_offset=15), lineno=476, col_offset=8)], [], lineno=465, col_offset=4), FunctionDef('tk_focusPrev', arguments([Name('self', Param(), lineno=477, col_offset=21)], None, None, []), [Expr(Str('Return previous widget in the focus order. See tk_focusNext for details.', lineno=478, col_offset=8), lineno=478, col_offset=8), Assign([Name('name', Store(), lineno=479, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=479, col_offset=15), 'tk', Load(), lineno=479, col_offset=15), 'call', Load(), lineno=479, col_offset=15), [Str('tk_focusPrev', lineno=479, col_offset=28), Attribute(Name('self', Load(), lineno=479, col_offset=44), '_w', Load(), lineno=479, col_offset=44)], [], None, None, lineno=479, col_offset=15), lineno=479, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=480, col_offset=15), lineno=480, col_offset=11), [Return(Name('None', Load(), lineno=480, col_offset=28), lineno=480, col_offset=21)], [], lineno=480, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=481, col_offset=15), '_nametowidget', Load(), lineno=481, col_offset=15), [Name('name', Load(), lineno=481, col_offset=34)], [], None, None, lineno=481, col_offset=15), lineno=481, col_offset=8)], [], lineno=477, col_offset=4), FunctionDef('after', arguments([Name('self', Param(), lineno=482, col_offset=14), Name('ms', Param(), lineno=482, col_offset=20), Name('func', Param(), lineno=482, col_offset=24)], 'args', None, [Name('None', Load(), lineno=482, col_offset=29)]), [Expr(Str('Call function once after given time.\n\n        MS specifies the time in milliseconds. FUNC gives the\n        function which shall be called. Additional parameters\n        are given as parameters to the function call.  Return\n        identifier to cancel scheduling with after_cancel.', lineno=488, col_offset=-1), lineno=488, col_offset=-1), If(UnaryOp(Not(), Name('func', Load(), lineno=489, col_offset=15), lineno=489, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=491, col_offset=12), 'tk', Load(), lineno=491, col_offset=12), 'call', Load(), lineno=491, col_offset=12), [Str('after', lineno=491, col_offset=25), Name('ms', Load(), lineno=491, col_offset=34)], [], None, None, lineno=491, col_offset=12), lineno=491, col_offset=12)], [FunctionDef('callit', arguments([], None, None, []), [TryFinally([Expr(Call(Name('func', Load(), lineno=495, col_offset=20), [], [], Name('args', Load(), lineno=495, col_offset=26), None, lineno=495, col_offset=20), lineno=495, col_offset=20)], [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=498, col_offset=24), 'deletecommand', Load(), lineno=498, col_offset=24), [Name('name', Load(), lineno=498, col_offset=43)], [], None, None, lineno=498, col_offset=24), lineno=498, col_offset=24)], [ExceptHandler(Name('TclError', Load(), lineno=499, col_offset=27), None, [Pass( lineno=500, col_offset=24)], lineno=499, col_offset=20)], [], lineno=497, col_offset=20)], lineno=494, col_offset=16)], [], lineno=493, col_offset=12), Assign([Name('name', Store(), lineno=501, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=501, col_offset=19), '_register', Load(), lineno=501, col_offset=19), [Name('callit', Load(), lineno=501, col_offset=34)], [], None, None, lineno=501, col_offset=19), lineno=501, col_offset=12), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=502, col_offset=19), 'tk', Load(), lineno=502, col_offset=19), 'call', Load(), lineno=502, col_offset=19), [Str('after', lineno=502, col_offset=32), Name('ms', Load(), lineno=502, col_offset=41), Name('name', Load(), lineno=502, col_offset=45)], [], None, None, lineno=502, col_offset=19), lineno=502, col_offset=12)], lineno=489, col_offset=8)], [], lineno=482, col_offset=4), FunctionDef('after_idle', arguments([Name('self', Param(), lineno=503, col_offset=19), Name('func', Param(), lineno=503, col_offset=25)], 'args', None, []), [Expr(Str('Call FUNC once if the Tcl main loop has no event to\n        process.\n\n        Return an identifier to cancel the scheduling with\n        after_cancel.', lineno=508, col_offset=-1), lineno=508, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=509, col_offset=15), 'after', Load(), lineno=509, col_offset=15), [Str('idle', lineno=509, col_offset=26), Name('func', Load(), lineno=509, col_offset=34)], [], Name('args', Load(), lineno=509, col_offset=41), None, lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=503, col_offset=4), FunctionDef('after_cancel', arguments([Name('self', Param(), lineno=510, col_offset=21), Name('id', Param(), lineno=510, col_offset=27)], None, None, []), [Expr(Str('Cancel scheduling of function identified with ID.\n\n        Identifier returned by after or after_idle must be\n        given as first parameter.', lineno=514, col_offset=-1), lineno=514, col_offset=-1), TryExcept([Assign([Name('data', Store(), lineno=516, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=516, col_offset=19), 'tk', Load(), lineno=516, col_offset=19), 'call', Load(), lineno=516, col_offset=19), [Str('after', lineno=516, col_offset=32), Str('info', lineno=516, col_offset=41), Name('id', Load(), lineno=516, col_offset=49)], [], None, None, lineno=516, col_offset=19), lineno=516, col_offset=12), Assign([Name('script', Store(), lineno=519, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=519, col_offset=21), 'tk', Load(), lineno=519, col_offset=21), 'splitlist', Load(), lineno=519, col_offset=21), [Name('data', Load(), lineno=519, col_offset=39)], [], None, None, lineno=519, col_offset=21), Index(Num(0, lineno=519, col_offset=45)), Load(), lineno=519, col_offset=21), lineno=519, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=520, col_offset=12), 'deletecommand', Load(), lineno=520, col_offset=12), [Name('script', Load(), lineno=520, col_offset=31)], [], None, None, lineno=520, col_offset=12), lineno=520, col_offset=12)], [ExceptHandler(Name('TclError', Load(), lineno=521, col_offset=15), None, [Pass( lineno=522, col_offset=12)], lineno=521, col_offset=8)], [], lineno=515, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=523, col_offset=8), 'tk', Load(), lineno=523, col_offset=8), 'call', Load(), lineno=523, col_offset=8), [Str('after', lineno=523, col_offset=21), Str('cancel', lineno=523, col_offset=30), Name('id', Load(), lineno=523, col_offset=40)], [], None, None, lineno=523, col_offset=8), lineno=523, col_offset=8)], [], lineno=510, col_offset=4), FunctionDef('bell', arguments([Name('self', Param(), lineno=524, col_offset=13), Name('displayof', Param(), lineno=524, col_offset=19)], None, None, [Num(0, lineno=524, col_offset=29)]), [Expr(Str("Ring a display's bell.", lineno=525, col_offset=8), lineno=525, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=526, col_offset=8), 'tk', Load(), lineno=526, col_offset=8), 'call', Load(), lineno=526, col_offset=8), [BinOp(Tuple([Str('bell', lineno=526, col_offset=22)], Load(), lineno=526, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=526, col_offset=33), '_displayof', Load(), lineno=526, col_offset=33), [Name('displayof', Load(), lineno=526, col_offset=49)], [], None, None, lineno=526, col_offset=33), lineno=526, col_offset=21)], [], None, None, lineno=526, col_offset=8), lineno=526, col_offset=8)], [], lineno=524, col_offset=4), FunctionDef('clipboard_get', arguments([Name('self', Param(), lineno=529, col_offset=22)], None, 'kw', []), [Expr(Str("Retrieve data from the clipboard on window's display.\n\n        The window keyword defaults to the root window of the Tkinter\n        application.\n\n        The type keyword specifies the form in which the data is\n        to be returned and should be an atom name such as STRING\n        or FILE_NAME.  Type defaults to STRING.\n\n        This command is equivalent to:\n\n        selection_get(CLIPBOARD)\n        ", lineno=542, col_offset=-1), lineno=542, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=543, col_offset=15), 'tk', Load(), lineno=543, col_offset=15), 'call', Load(), lineno=543, col_offset=15), [BinOp(Tuple([Str('clipboard', lineno=543, col_offset=29), Str('get', lineno=543, col_offset=42)], Load(), lineno=543, col_offset=29), Add(), Call(Attribute(Name('self', Load(), lineno=543, col_offset=51), '_options', Load(), lineno=543, col_offset=51), [Name('kw', Load(), lineno=543, col_offset=65)], [], None, None, lineno=543, col_offset=51), lineno=543, col_offset=28)], [], None, None, lineno=543, col_offset=15), lineno=543, col_offset=8)], [], lineno=529, col_offset=4), FunctionDef('clipboard_clear', arguments([Name('self', Param(), lineno=545, col_offset=24)], None, 'kw', []), [Expr(Str('Clear the data in the Tk clipboard.\n\n        A widget specified for the optional displayof keyword\n        argument specifies the target display.', lineno=549, col_offset=-1), lineno=549, col_offset=-1), If(Compare(Str('displayof', lineno=550, col_offset=11), [NotIn()], [Name('kw', Load(), lineno=550, col_offset=30)], lineno=550, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=550, col_offset=34), Index(Str('displayof', lineno=550, col_offset=37)), Store(), lineno=550, col_offset=34)], Attribute(Name('self', Load(), lineno=550, col_offset=52), '_w', Load(), lineno=550, col_offset=52), lineno=550, col_offset=34)], [], lineno=550, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=551, col_offset=8), 'tk', Load(), lineno=551, col_offset=8), 'call', Load(), lineno=551, col_offset=8), [BinOp(Tuple([Str('clipboard', lineno=551, col_offset=22), Str('clear', lineno=551, col_offset=35)], Load(), lineno=551, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=551, col_offset=46), '_options', Load(), lineno=551, col_offset=46), [Name('kw', Load(), lineno=551, col_offset=60)], [], None, None, lineno=551, col_offset=46), lineno=551, col_offset=21)], [], None, None, lineno=551, col_offset=8), lineno=551, col_offset=8)], [], lineno=545, col_offset=4), FunctionDef('clipboard_append', arguments([Name('self', Param(), lineno=552, col_offset=25), Name('string', Param(), lineno=552, col_offset=31)], None, 'kw', []), [Expr(Str('Append STRING to the Tk clipboard.\n\n        A widget specified at the optional displayof keyword\n        argument specifies the target display. The clipboard\n        can be retrieved with selection_get.', lineno=557, col_offset=-1), lineno=557, col_offset=-1), If(Compare(Str('displayof', lineno=558, col_offset=11), [NotIn()], [Name('kw', Load(), lineno=558, col_offset=30)], lineno=558, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=558, col_offset=34), Index(Str('displayof', lineno=558, col_offset=37)), Store(), lineno=558, col_offset=34)], Attribute(Name('self', Load(), lineno=558, col_offset=52), '_w', Load(), lineno=558, col_offset=52), lineno=558, col_offset=34)], [], lineno=558, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=559, col_offset=8), 'tk', Load(), lineno=559, col_offset=8), 'call', Load(), lineno=559, col_offset=8), [BinOp(BinOp(Tuple([Str('clipboard', lineno=559, col_offset=22), Str('append', lineno=559, col_offset=35)], Load(), lineno=559, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=559, col_offset=47), '_options', Load(), lineno=559, col_offset=47), [Name('kw', Load(), lineno=559, col_offset=61)], [], None, None, lineno=559, col_offset=47), lineno=559, col_offset=21), Add(), Tuple([Str('--', lineno=560, col_offset=17), Name('string', Load(), lineno=560, col_offset=23)], Load(), lineno=560, col_offset=17), lineno=560, col_offset=14)], [], None, None, lineno=559, col_offset=8), lineno=559, col_offset=8)], [], lineno=552, col_offset=4), FunctionDef('grab_current', arguments([Name('self', Param(), lineno=562, col_offset=21)], None, None, []), [Expr(Str('Return widget which has currently the grab in this application\n        or None.', lineno=564, col_offset=-1), lineno=564, col_offset=-1), Assign([Name('name', Store(), lineno=565, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=565, col_offset=15), 'tk', Load(), lineno=565, col_offset=15), 'call', Load(), lineno=565, col_offset=15), [Str('grab', lineno=565, col_offset=28), Str('current', lineno=565, col_offset=36), Attribute(Name('self', Load(), lineno=565, col_offset=47), '_w', Load(), lineno=565, col_offset=47)], [], None, None, lineno=565, col_offset=15), lineno=565, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=566, col_offset=15), lineno=566, col_offset=11), [Return(Name('None', Load(), lineno=566, col_offset=28), lineno=566, col_offset=21)], [], lineno=566, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=567, col_offset=15), '_nametowidget', Load(), lineno=567, col_offset=15), [Name('name', Load(), lineno=567, col_offset=34)], [], None, None, lineno=567, col_offset=15), lineno=567, col_offset=8)], [], lineno=562, col_offset=4), FunctionDef('grab_release', arguments([Name('self', Param(), lineno=568, col_offset=21)], None, None, []), [Expr(Str('Release grab for this widget if currently set.', lineno=569, col_offset=8), lineno=569, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=570, col_offset=8), 'tk', Load(), lineno=570, col_offset=8), 'call', Load(), lineno=570, col_offset=8), [Str('grab', lineno=570, col_offset=21), Str('release', lineno=570, col_offset=29), Attribute(Name('self', Load(), lineno=570, col_offset=40), '_w', Load(), lineno=570, col_offset=40)], [], None, None, lineno=570, col_offset=8), lineno=570, col_offset=8)], [], lineno=568, col_offset=4), FunctionDef('grab_set', arguments([Name('self', Param(), lineno=571, col_offset=17)], None, None, []), [Expr(Str('Set grab for this widget.\n\n        A grab directs all events to this and descendant\n        widgets in the application.', lineno=575, col_offset=-1), lineno=575, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=576, col_offset=8), 'tk', Load(), lineno=576, col_offset=8), 'call', Load(), lineno=576, col_offset=8), [Str('grab', lineno=576, col_offset=21), Str('set', lineno=576, col_offset=29), Attribute(Name('self', Load(), lineno=576, col_offset=36), '_w', Load(), lineno=576, col_offset=36)], [], None, None, lineno=576, col_offset=8), lineno=576, col_offset=8)], [], lineno=571, col_offset=4), FunctionDef('grab_set_global', arguments([Name('self', Param(), lineno=577, col_offset=24)], None, None, []), [Expr(Str('Set global grab for this widget.\n\n        A global grab directs all events to this and\n        descendant widgets on the display. Use with caution -\n        other applications do not get events anymore.', lineno=582, col_offset=-1), lineno=582, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=583, col_offset=8), 'tk', Load(), lineno=583, col_offset=8), 'call', Load(), lineno=583, col_offset=8), [Str('grab', lineno=583, col_offset=21), Str('set', lineno=583, col_offset=29), Str('-global', lineno=583, col_offset=36), Attribute(Name('self', Load(), lineno=583, col_offset=47), '_w', Load(), lineno=583, col_offset=47)], [], None, None, lineno=583, col_offset=8), lineno=583, col_offset=8)], [], lineno=577, col_offset=4), FunctionDef('grab_status', arguments([Name('self', Param(), lineno=584, col_offset=20)], None, None, []), [Expr(Str('Return None, "local" or "global" if this widget has\n        no, a local or a global grab.', lineno=586, col_offset=-1), lineno=586, col_offset=-1), Assign([Name('status', Store(), lineno=587, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=587, col_offset=17), 'tk', Load(), lineno=587, col_offset=17), 'call', Load(), lineno=587, col_offset=17), [Str('grab', lineno=587, col_offset=30), Str('status', lineno=587, col_offset=38), Attribute(Name('self', Load(), lineno=587, col_offset=48), '_w', Load(), lineno=587, col_offset=48)], [], None, None, lineno=587, col_offset=17), lineno=587, col_offset=8), If(Compare(Name('status', Load(), lineno=588, col_offset=11), [Eq()], [Str('none', lineno=588, col_offset=21)], lineno=588, col_offset=11), [Assign([Name('status', Store(), lineno=588, col_offset=29)], Name('None', Load(), lineno=588, col_offset=38), lineno=588, col_offset=29)], [], lineno=588, col_offset=8), Return(Name('status', Load(), lineno=589, col_offset=15), lineno=589, col_offset=8)], [], lineno=584, col_offset=4), FunctionDef('option_add', arguments([Name('self', Param(), lineno=590, col_offset=19), Name('pattern', Param(), lineno=590, col_offset=25), Name('value', Param(), lineno=590, col_offset=34), Name('priority', Param(), lineno=590, col_offset=41)], None, None, [Name('None', Load(), lineno=590, col_offset=52)]), [Expr(Str('Set a VALUE (second parameter) for an option\n        PATTERN (first parameter).\n\n        An optional third parameter gives the numeric priority\n        (defaults to 80).', lineno=595, col_offset=-1), lineno=595, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=596, col_offset=8), 'tk', Load(), lineno=596, col_offset=8), 'call', Load(), lineno=596, col_offset=8), [Str('option', lineno=596, col_offset=21), Str('add', lineno=596, col_offset=31), Name('pattern', Load(), lineno=596, col_offset=38), Name('value', Load(), lineno=596, col_offset=47), Name('priority', Load(), lineno=596, col_offset=54)], [], None, None, lineno=596, col_offset=8), lineno=596, col_offset=8)], [], lineno=590, col_offset=4), FunctionDef('option_clear', arguments([Name('self', Param(), lineno=597, col_offset=21)], None, None, []), [Expr(Str('Clear the option database.\n\n        It will be reloaded if option_add is called.', lineno=600, col_offset=-1), lineno=600, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=601, col_offset=8), 'tk', Load(), lineno=601, col_offset=8), 'call', Load(), lineno=601, col_offset=8), [Str('option', lineno=601, col_offset=21), Str('clear', lineno=601, col_offset=31)], [], None, None, lineno=601, col_offset=8), lineno=601, col_offset=8)], [], lineno=597, col_offset=4), FunctionDef('option_get', arguments([Name('self', Param(), lineno=602, col_offset=19), Name('name', Param(), lineno=602, col_offset=25), Name('className', Param(), lineno=602, col_offset=31)], None, None, []), [Expr(Str('Return the value for an option NAME for this widget\n        with CLASSNAME.\n\n        Values with higher priority override lower values.', lineno=606, col_offset=-1), lineno=606, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=607, col_offset=15), 'tk', Load(), lineno=607, col_offset=15), 'call', Load(), lineno=607, col_offset=15), [Str('option', lineno=607, col_offset=28), Str('get', lineno=607, col_offset=38), Attribute(Name('self', Load(), lineno=607, col_offset=45), '_w', Load(), lineno=607, col_offset=45), Name('name', Load(), lineno=607, col_offset=54), Name('className', Load(), lineno=607, col_offset=60)], [], None, None, lineno=607, col_offset=15), lineno=607, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('option_readfile', arguments([Name('self', Param(), lineno=608, col_offset=24), Name('fileName', Param(), lineno=608, col_offset=30), Name('priority', Param(), lineno=608, col_offset=40)], None, None, [Name('None', Load(), lineno=608, col_offset=51)]), [Expr(Str('Read file FILENAME into the option database.\n\n        An optional second parameter gives the numeric\n        priority.', lineno=612, col_offset=-1), lineno=612, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=613, col_offset=8), 'tk', Load(), lineno=613, col_offset=8), 'call', Load(), lineno=613, col_offset=8), [Str('option', lineno=613, col_offset=21), Str('readfile', lineno=613, col_offset=31), Name('fileName', Load(), lineno=613, col_offset=43), Name('priority', Load(), lineno=613, col_offset=53)], [], None, None, lineno=613, col_offset=8), lineno=613, col_offset=8)], [], lineno=608, col_offset=4), FunctionDef('selection_clear', arguments([Name('self', Param(), lineno=614, col_offset=24)], None, 'kw', []), [Expr(Str('Clear the current X selection.', lineno=615, col_offset=8), lineno=615, col_offset=8), If(Compare(Str('displayof', lineno=616, col_offset=11), [NotIn()], [Name('kw', Load(), lineno=616, col_offset=30)], lineno=616, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=616, col_offset=34), Index(Str('displayof', lineno=616, col_offset=37)), Store(), lineno=616, col_offset=34)], Attribute(Name('self', Load(), lineno=616, col_offset=52), '_w', Load(), lineno=616, col_offset=52), lineno=616, col_offset=34)], [], lineno=616, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=617, col_offset=8), 'tk', Load(), lineno=617, col_offset=8), 'call', Load(), lineno=617, col_offset=8), [BinOp(Tuple([Str('selection', lineno=617, col_offset=22), Str('clear', lineno=617, col_offset=35)], Load(), lineno=617, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=617, col_offset=46), '_options', Load(), lineno=617, col_offset=46), [Name('kw', Load(), lineno=617, col_offset=60)], [], None, None, lineno=617, col_offset=46), lineno=617, col_offset=21)], [], None, None, lineno=617, col_offset=8), lineno=617, col_offset=8)], [], lineno=614, col_offset=4), FunctionDef('selection_get', arguments([Name('self', Param(), lineno=618, col_offset=22)], None, 'kw', []), [Expr(Str('Return the contents of the current X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection and defaults to PRIMARY.  A keyword\n        parameter displayof specifies a widget on the display\n        to use.', lineno=624, col_offset=-1), lineno=624, col_offset=-1), If(Compare(Str('displayof', lineno=625, col_offset=11), [NotIn()], [Name('kw', Load(), lineno=625, col_offset=30)], lineno=625, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=625, col_offset=34), Index(Str('displayof', lineno=625, col_offset=37)), Store(), lineno=625, col_offset=34)], Attribute(Name('self', Load(), lineno=625, col_offset=52), '_w', Load(), lineno=625, col_offset=52), lineno=625, col_offset=34)], [], lineno=625, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=626, col_offset=15), 'tk', Load(), lineno=626, col_offset=15), 'call', Load(), lineno=626, col_offset=15), [BinOp(Tuple([Str('selection', lineno=626, col_offset=29), Str('get', lineno=626, col_offset=42)], Load(), lineno=626, col_offset=29), Add(), Call(Attribute(Name('self', Load(), lineno=626, col_offset=51), '_options', Load(), lineno=626, col_offset=51), [Name('kw', Load(), lineno=626, col_offset=65)], [], None, None, lineno=626, col_offset=51), lineno=626, col_offset=28)], [], None, None, lineno=626, col_offset=15), lineno=626, col_offset=8)], [], lineno=618, col_offset=4), FunctionDef('selection_handle', arguments([Name('self', Param(), lineno=627, col_offset=25), Name('command', Param(), lineno=627, col_offset=31)], None, 'kw', []), [Expr(Str('Specify a function COMMAND to call if the X\n        selection owned by this widget is queried by another\n        application.\n\n        This function must return the contents of the\n        selection. The function will be called with the\n        arguments OFFSET and LENGTH which allows the chunking\n        of very long selections. The following keyword\n        parameters can be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).', lineno=638, col_offset=-1), lineno=638, col_offset=-1), Assign([Name('name', Store(), lineno=639, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=639, col_offset=15), '_register', Load(), lineno=639, col_offset=15), [Name('command', Load(), lineno=639, col_offset=30)], [], None, None, lineno=639, col_offset=15), lineno=639, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=640, col_offset=8), 'tk', Load(), lineno=640, col_offset=8), 'call', Load(), lineno=640, col_offset=8), [BinOp(BinOp(Tuple([Str('selection', lineno=640, col_offset=22), Str('handle', lineno=640, col_offset=35)], Load(), lineno=640, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=640, col_offset=47), '_options', Load(), lineno=640, col_offset=47), [Name('kw', Load(), lineno=640, col_offset=61)], [], None, None, lineno=640, col_offset=47), lineno=640, col_offset=21), Add(), Tuple([Attribute(Name('self', Load(), lineno=641, col_offset=17), '_w', Load(), lineno=641, col_offset=17), Name('name', Load(), lineno=641, col_offset=26)], Load(), lineno=641, col_offset=17), lineno=641, col_offset=14)], [], None, None, lineno=640, col_offset=8), lineno=640, col_offset=8)], [], lineno=627, col_offset=4), FunctionDef('selection_own', arguments([Name('self', Param(), lineno=642, col_offset=22)], None, 'kw', []), [Expr(Str('Become owner of X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection (default PRIMARY).', lineno=646, col_offset=-1), lineno=646, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=647, col_offset=8), 'tk', Load(), lineno=647, col_offset=8), 'call', Load(), lineno=647, col_offset=8), [BinOp(BinOp(Tuple([Str('selection', lineno=647, col_offset=22), Str('own', lineno=647, col_offset=35)], Load(), lineno=647, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=648, col_offset=17), '_options', Load(), lineno=648, col_offset=17), [Name('kw', Load(), lineno=648, col_offset=31)], [], None, None, lineno=648, col_offset=17), lineno=647, col_offset=21), Add(), Tuple([Attribute(Name('self', Load(), lineno=648, col_offset=38), '_w', Load(), lineno=648, col_offset=38)], Load(), lineno=648, col_offset=38), lineno=648, col_offset=35)], [], None, None, lineno=647, col_offset=8), lineno=647, col_offset=8)], [], lineno=642, col_offset=4), FunctionDef('selection_own_get', arguments([Name('self', Param(), lineno=649, col_offset=26)], None, 'kw', []), [Expr(Str('Return owner of X selection.\n\n        The following keyword parameter can\n        be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).', lineno=655, col_offset=-1), lineno=655, col_offset=-1), If(Compare(Str('displayof', lineno=656, col_offset=11), [NotIn()], [Name('kw', Load(), lineno=656, col_offset=30)], lineno=656, col_offset=11), [Assign([Subscript(Name('kw', Load(), lineno=656, col_offset=34), Index(Str('displayof', lineno=656, col_offset=37)), Store(), lineno=656, col_offset=34)], Attribute(Name('self', Load(), lineno=656, col_offset=52), '_w', Load(), lineno=656, col_offset=52), lineno=656, col_offset=34)], [], lineno=656, col_offset=8), Assign([Name('name', Store(), lineno=657, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=657, col_offset=15), 'tk', Load(), lineno=657, col_offset=15), 'call', Load(), lineno=657, col_offset=15), [BinOp(Tuple([Str('selection', lineno=657, col_offset=29), Str('own', lineno=657, col_offset=42)], Load(), lineno=657, col_offset=29), Add(), Call(Attribute(Name('self', Load(), lineno=657, col_offset=51), '_options', Load(), lineno=657, col_offset=51), [Name('kw', Load(), lineno=657, col_offset=65)], [], None, None, lineno=657, col_offset=51), lineno=657, col_offset=28)], [], None, None, lineno=657, col_offset=15), lineno=657, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=658, col_offset=15), lineno=658, col_offset=11), [Return(Name('None', Load(), lineno=658, col_offset=28), lineno=658, col_offset=21)], [], lineno=658, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=659, col_offset=15), '_nametowidget', Load(), lineno=659, col_offset=15), [Name('name', Load(), lineno=659, col_offset=34)], [], None, None, lineno=659, col_offset=15), lineno=659, col_offset=8)], [], lineno=649, col_offset=4), FunctionDef('send', arguments([Name('self', Param(), lineno=660, col_offset=13), Name('interp', Param(), lineno=660, col_offset=19), Name('cmd', Param(), lineno=660, col_offset=27)], 'args', None, []), [Expr(Str('Send Tcl command CMD to different interpreter INTERP to be executed.', lineno=661, col_offset=8), lineno=661, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=662, col_offset=15), 'tk', Load(), lineno=662, col_offset=15), 'call', Load(), lineno=662, col_offset=15), [BinOp(Tuple([Str('send', lineno=662, col_offset=29), Name('interp', Load(), lineno=662, col_offset=37), Name('cmd', Load(), lineno=662, col_offset=45)], Load(), lineno=662, col_offset=29), Add(), Name('args', Load(), lineno=662, col_offset=52), lineno=662, col_offset=28)], [], None, None, lineno=662, col_offset=15), lineno=662, col_offset=8)], [], lineno=660, col_offset=4), FunctionDef('lower', arguments([Name('self', Param(), lineno=663, col_offset=14), Name('belowThis', Param(), lineno=663, col_offset=20)], None, None, [Name('None', Load(), lineno=663, col_offset=30)]), [Expr(Str('Lower this widget in the stacking order.', lineno=664, col_offset=8), lineno=664, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=665, col_offset=8), 'tk', Load(), lineno=665, col_offset=8), 'call', Load(), lineno=665, col_offset=8), [Str('lower', lineno=665, col_offset=21), Attribute(Name('self', Load(), lineno=665, col_offset=30), '_w', Load(), lineno=665, col_offset=30), Name('belowThis', Load(), lineno=665, col_offset=39)], [], None, None, lineno=665, col_offset=8), lineno=665, col_offset=8)], [], lineno=663, col_offset=4), FunctionDef('tkraise', arguments([Name('self', Param(), lineno=666, col_offset=16), Name('aboveThis', Param(), lineno=666, col_offset=22)], None, None, [Name('None', Load(), lineno=666, col_offset=32)]), [Expr(Str('Raise this widget in the stacking order.', lineno=667, col_offset=8), lineno=667, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=668, col_offset=8), 'tk', Load(), lineno=668, col_offset=8), 'call', Load(), lineno=668, col_offset=8), [Str('raise', lineno=668, col_offset=21), Attribute(Name('self', Load(), lineno=668, col_offset=30), '_w', Load(), lineno=668, col_offset=30), Name('aboveThis', Load(), lineno=668, col_offset=39)], [], None, None, lineno=668, col_offset=8), lineno=668, col_offset=8)], [], lineno=666, col_offset=4), Assign([Name('lift', Store(), lineno=669, col_offset=4)], Name('tkraise', Load(), lineno=669, col_offset=11), lineno=669, col_offset=4), FunctionDef('colormodel', arguments([Name('self', Param(), lineno=670, col_offset=19), Name('value', Param(), lineno=670, col_offset=25)], None, None, [Name('None', Load(), lineno=670, col_offset=31)]), [Expr(Str('Useless. Not implemented in Tk.', lineno=671, col_offset=8), lineno=671, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=672, col_offset=15), 'tk', Load(), lineno=672, col_offset=15), 'call', Load(), lineno=672, col_offset=15), [Str('tk', lineno=672, col_offset=28), Str('colormodel', lineno=672, col_offset=34), Attribute(Name('self', Load(), lineno=672, col_offset=48), '_w', Load(), lineno=672, col_offset=48), Name('value', Load(), lineno=672, col_offset=57)], [], None, None, lineno=672, col_offset=15), lineno=672, col_offset=8)], [], lineno=670, col_offset=4), FunctionDef('winfo_atom', arguments([Name('self', Param(), lineno=673, col_offset=19), Name('name', Param(), lineno=673, col_offset=25), Name('displayof', Param(), lineno=673, col_offset=31)], None, None, [Num(0, lineno=673, col_offset=41)]), [Expr(Str('Return integer which represents atom NAME.', lineno=674, col_offset=8), lineno=674, col_offset=8), Assign([Name('args', Store(), lineno=675, col_offset=8)], BinOp(BinOp(Tuple([Str('winfo', lineno=675, col_offset=16), Str('atom', lineno=675, col_offset=25)], Load(), lineno=675, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=675, col_offset=35), '_displayof', Load(), lineno=675, col_offset=35), [Name('displayof', Load(), lineno=675, col_offset=51)], [], None, None, lineno=675, col_offset=35), lineno=675, col_offset=15), Add(), Tuple([Name('name', Load(), lineno=675, col_offset=65)], Load(), lineno=675, col_offset=65), lineno=675, col_offset=62), lineno=675, col_offset=8), Return(Call(Name('getint', Load(), lineno=676, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=676, col_offset=22), 'tk', Load(), lineno=676, col_offset=22), 'call', Load(), lineno=676, col_offset=22), [Name('args', Load(), lineno=676, col_offset=35)], [], None, None, lineno=676, col_offset=22)], [], None, None, lineno=676, col_offset=15), lineno=676, col_offset=8)], [], lineno=673, col_offset=4), FunctionDef('winfo_atomname', arguments([Name('self', Param(), lineno=677, col_offset=23), Name('id', Param(), lineno=677, col_offset=29), Name('displayof', Param(), lineno=677, col_offset=33)], None, None, [Num(0, lineno=677, col_offset=43)]), [Expr(Str('Return name of atom with identifier ID.', lineno=678, col_offset=8), lineno=678, col_offset=8), Assign([Name('args', Store(), lineno=679, col_offset=8)], BinOp(BinOp(Tuple([Str('winfo', lineno=679, col_offset=16), Str('atomname', lineno=679, col_offset=25)], Load(), lineno=679, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=680, col_offset=17), '_displayof', Load(), lineno=680, col_offset=17), [Name('displayof', Load(), lineno=680, col_offset=33)], [], None, None, lineno=680, col_offset=17), lineno=679, col_offset=15), Add(), Tuple([Name('id', Load(), lineno=680, col_offset=47)], Load(), lineno=680, col_offset=47), lineno=680, col_offset=44), lineno=679, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=681, col_offset=15), 'tk', Load(), lineno=681, col_offset=15), 'call', Load(), lineno=681, col_offset=15), [Name('args', Load(), lineno=681, col_offset=28)], [], None, None, lineno=681, col_offset=15), lineno=681, col_offset=8)], [], lineno=677, col_offset=4), FunctionDef('winfo_cells', arguments([Name('self', Param(), lineno=682, col_offset=20)], None, None, []), [Expr(Str('Return number of cells in the colormap for this widget.', lineno=683, col_offset=8), lineno=683, col_offset=8), Return(Call(Name('getint', Load(), lineno=684, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=685, col_offset=12), 'tk', Load(), lineno=685, col_offset=12), 'call', Load(), lineno=685, col_offset=12), [Str('winfo', lineno=685, col_offset=25), Str('cells', lineno=685, col_offset=34), Attribute(Name('self', Load(), lineno=685, col_offset=43), '_w', Load(), lineno=685, col_offset=43)], [], None, None, lineno=685, col_offset=12)], [], None, None, lineno=684, col_offset=15), lineno=684, col_offset=8)], [], lineno=682, col_offset=4), FunctionDef('winfo_children', arguments([Name('self', Param(), lineno=686, col_offset=23)], None, None, []), [Expr(Str('Return a list of all widgets which are children of this widget.', lineno=687, col_offset=8), lineno=687, col_offset=8), Assign([Name('result', Store(), lineno=688, col_offset=8)], List([], Load(), lineno=688, col_offset=17), lineno=688, col_offset=8), For(Name('child', Store(), lineno=689, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=689, col_offset=21), 'tk', Load(), lineno=689, col_offset=21), 'splitlist', Load(), lineno=689, col_offset=21), [Call(Attribute(Attribute(Name('self', Load(), lineno=690, col_offset=12), 'tk', Load(), lineno=690, col_offset=12), 'call', Load(), lineno=690, col_offset=12), [Str('winfo', lineno=690, col_offset=25), Str('children', lineno=690, col_offset=34), Attribute(Name('self', Load(), lineno=690, col_offset=46), '_w', Load(), lineno=690, col_offset=46)], [], None, None, lineno=690, col_offset=12)], [], None, None, lineno=689, col_offset=21), [TryExcept([Expr(Call(Attribute(Name('result', Load(), lineno=694, col_offset=16), 'append', Load(), lineno=694, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=694, col_offset=30), '_nametowidget', Load(), lineno=694, col_offset=30), [Name('child', Load(), lineno=694, col_offset=49)], [], None, None, lineno=694, col_offset=30)], [], None, None, lineno=694, col_offset=16), lineno=694, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=695, col_offset=19), None, [Pass( lineno=696, col_offset=16)], lineno=695, col_offset=12)], [], lineno=691, col_offset=12)], [], lineno=689, col_offset=8), Return(Name('result', Load(), lineno=697, col_offset=15), lineno=697, col_offset=8)], [], lineno=686, col_offset=4), FunctionDef('winfo_class', arguments([Name('self', Param(), lineno=699, col_offset=20)], None, None, []), [Expr(Str('Return window class name of this widget.', lineno=700, col_offset=8), lineno=700, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=701, col_offset=15), 'tk', Load(), lineno=701, col_offset=15), 'call', Load(), lineno=701, col_offset=15), [Str('winfo', lineno=701, col_offset=28), Str('class', lineno=701, col_offset=37), Attribute(Name('self', Load(), lineno=701, col_offset=46), '_w', Load(), lineno=701, col_offset=46)], [], None, None, lineno=701, col_offset=15), lineno=701, col_offset=8)], [], lineno=699, col_offset=4), FunctionDef('winfo_colormapfull', arguments([Name('self', Param(), lineno=702, col_offset=27)], None, None, []), [Expr(Str('Return true if at the last color request the colormap was full.', lineno=703, col_offset=8), lineno=703, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=704, col_offset=15), 'tk', Load(), lineno=704, col_offset=15), 'getboolean', Load(), lineno=704, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=705, col_offset=12), 'tk', Load(), lineno=705, col_offset=12), 'call', Load(), lineno=705, col_offset=12), [Str('winfo', lineno=705, col_offset=25), Str('colormapfull', lineno=705, col_offset=34), Attribute(Name('self', Load(), lineno=705, col_offset=50), '_w', Load(), lineno=705, col_offset=50)], [], None, None, lineno=705, col_offset=12)], [], None, None, lineno=704, col_offset=15), lineno=704, col_offset=8)], [], lineno=702, col_offset=4), FunctionDef('winfo_containing', arguments([Name('self', Param(), lineno=706, col_offset=25), Name('rootX', Param(), lineno=706, col_offset=31), Name('rootY', Param(), lineno=706, col_offset=38), Name('displayof', Param(), lineno=706, col_offset=45)], None, None, [Num(0, lineno=706, col_offset=55)]), [Expr(Str('Return the widget which is at the root coordinates ROOTX, ROOTY.', lineno=707, col_offset=8), lineno=707, col_offset=8), Assign([Name('args', Store(), lineno=708, col_offset=8)], BinOp(BinOp(Tuple([Str('winfo', lineno=708, col_offset=16), Str('containing', lineno=708, col_offset=25)], Load(), lineno=708, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=709, col_offset=17), '_displayof', Load(), lineno=709, col_offset=17), [Name('displayof', Load(), lineno=709, col_offset=33)], [], None, None, lineno=709, col_offset=17), lineno=708, col_offset=15), Add(), Tuple([Name('rootX', Load(), lineno=709, col_offset=47), Name('rootY', Load(), lineno=709, col_offset=54)], Load(), lineno=709, col_offset=47), lineno=709, col_offset=44), lineno=708, col_offset=8), Assign([Name('name', Store(), lineno=710, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=710, col_offset=15), 'tk', Load(), lineno=710, col_offset=15), 'call', Load(), lineno=710, col_offset=15), [Name('args', Load(), lineno=710, col_offset=28)], [], None, None, lineno=710, col_offset=15), lineno=710, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=711, col_offset=15), lineno=711, col_offset=11), [Return(Name('None', Load(), lineno=711, col_offset=28), lineno=711, col_offset=21)], [], lineno=711, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=712, col_offset=15), '_nametowidget', Load(), lineno=712, col_offset=15), [Name('name', Load(), lineno=712, col_offset=34)], [], None, None, lineno=712, col_offset=15), lineno=712, col_offset=8)], [], lineno=706, col_offset=4), FunctionDef('winfo_depth', arguments([Name('self', Param(), lineno=713, col_offset=20)], None, None, []), [Expr(Str('Return the number of bits per pixel.', lineno=714, col_offset=8), lineno=714, col_offset=8), Return(Call(Name('getint', Load(), lineno=715, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=715, col_offset=22), 'tk', Load(), lineno=715, col_offset=22), 'call', Load(), lineno=715, col_offset=22), [Str('winfo', lineno=715, col_offset=35), Str('depth', lineno=715, col_offset=44), Attribute(Name('self', Load(), lineno=715, col_offset=53), '_w', Load(), lineno=715, col_offset=53)], [], None, None, lineno=715, col_offset=22)], [], None, None, lineno=715, col_offset=15), lineno=715, col_offset=8)], [], lineno=713, col_offset=4), FunctionDef('winfo_exists', arguments([Name('self', Param(), lineno=716, col_offset=21)], None, None, []), [Expr(Str('Return true if this widget exists.', lineno=717, col_offset=8), lineno=717, col_offset=8), Return(Call(Name('getint', Load(), lineno=718, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=719, col_offset=12), 'tk', Load(), lineno=719, col_offset=12), 'call', Load(), lineno=719, col_offset=12), [Str('winfo', lineno=719, col_offset=25), Str('exists', lineno=719, col_offset=34), Attribute(Name('self', Load(), lineno=719, col_offset=44), '_w', Load(), lineno=719, col_offset=44)], [], None, None, lineno=719, col_offset=12)], [], None, None, lineno=718, col_offset=15), lineno=718, col_offset=8)], [], lineno=716, col_offset=4), FunctionDef('winfo_fpixels', arguments([Name('self', Param(), lineno=720, col_offset=22), Name('number', Param(), lineno=720, col_offset=28)], None, None, []), [Expr(Str('Return the number of pixels for the given distance NUMBER\n        (e.g. "3c") as float.', lineno=722, col_offset=-1), lineno=722, col_offset=-1), Return(Call(Name('getdouble', Load(), lineno=723, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=723, col_offset=25), 'tk', Load(), lineno=723, col_offset=25), 'call', Load(), lineno=723, col_offset=25), [Str('winfo', lineno=724, col_offset=12), Str('fpixels', lineno=724, col_offset=21), Attribute(Name('self', Load(), lineno=724, col_offset=32), '_w', Load(), lineno=724, col_offset=32), Name('number', Load(), lineno=724, col_offset=41)], [], None, None, lineno=723, col_offset=25)], [], None, None, lineno=723, col_offset=15), lineno=723, col_offset=8)], [], lineno=720, col_offset=4), FunctionDef('winfo_geometry', arguments([Name('self', Param(), lineno=725, col_offset=23)], None, None, []), [Expr(Str('Return geometry string for this widget in the form "widthxheight+X+Y".', lineno=726, col_offset=8), lineno=726, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=727, col_offset=15), 'tk', Load(), lineno=727, col_offset=15), 'call', Load(), lineno=727, col_offset=15), [Str('winfo', lineno=727, col_offset=28), Str('geometry', lineno=727, col_offset=37), Attribute(Name('self', Load(), lineno=727, col_offset=49), '_w', Load(), lineno=727, col_offset=49)], [], None, None, lineno=727, col_offset=15), lineno=727, col_offset=8)], [], lineno=725, col_offset=4), FunctionDef('winfo_height', arguments([Name('self', Param(), lineno=728, col_offset=21)], None, None, []), [Expr(Str('Return height of this widget.', lineno=729, col_offset=8), lineno=729, col_offset=8), Return(Call(Name('getint', Load(), lineno=730, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=731, col_offset=12), 'tk', Load(), lineno=731, col_offset=12), 'call', Load(), lineno=731, col_offset=12), [Str('winfo', lineno=731, col_offset=25), Str('height', lineno=731, col_offset=34), Attribute(Name('self', Load(), lineno=731, col_offset=44), '_w', Load(), lineno=731, col_offset=44)], [], None, None, lineno=731, col_offset=12)], [], None, None, lineno=730, col_offset=15), lineno=730, col_offset=8)], [], lineno=728, col_offset=4), FunctionDef('winfo_id', arguments([Name('self', Param(), lineno=732, col_offset=17)], None, None, []), [Expr(Str('Return identifier ID for this widget.', lineno=733, col_offset=8), lineno=733, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=734, col_offset=15), 'tk', Load(), lineno=734, col_offset=15), 'getint', Load(), lineno=734, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=735, col_offset=12), 'tk', Load(), lineno=735, col_offset=12), 'call', Load(), lineno=735, col_offset=12), [Str('winfo', lineno=735, col_offset=25), Str('id', lineno=735, col_offset=34), Attribute(Name('self', Load(), lineno=735, col_offset=40), '_w', Load(), lineno=735, col_offset=40)], [], None, None, lineno=735, col_offset=12)], [], None, None, lineno=734, col_offset=15), lineno=734, col_offset=8)], [], lineno=732, col_offset=4), FunctionDef('winfo_interps', arguments([Name('self', Param(), lineno=736, col_offset=22), Name('displayof', Param(), lineno=736, col_offset=28)], None, None, [Num(0, lineno=736, col_offset=38)]), [Expr(Str('Return the name of all Tcl interpreters for this display.', lineno=737, col_offset=8), lineno=737, col_offset=8), Assign([Name('args', Store(), lineno=738, col_offset=8)], BinOp(Tuple([Str('winfo', lineno=738, col_offset=16), Str('interps', lineno=738, col_offset=25)], Load(), lineno=738, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=738, col_offset=38), '_displayof', Load(), lineno=738, col_offset=38), [Name('displayof', Load(), lineno=738, col_offset=54)], [], None, None, lineno=738, col_offset=38), lineno=738, col_offset=15), lineno=738, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=739, col_offset=15), 'tk', Load(), lineno=739, col_offset=15), 'splitlist', Load(), lineno=739, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=739, col_offset=33), 'tk', Load(), lineno=739, col_offset=33), 'call', Load(), lineno=739, col_offset=33), [Name('args', Load(), lineno=739, col_offset=46)], [], None, None, lineno=739, col_offset=33)], [], None, None, lineno=739, col_offset=15), lineno=739, col_offset=8)], [], lineno=736, col_offset=4), FunctionDef('winfo_ismapped', arguments([Name('self', Param(), lineno=740, col_offset=23)], None, None, []), [Expr(Str('Return true if this widget is mapped.', lineno=741, col_offset=8), lineno=741, col_offset=8), Return(Call(Name('getint', Load(), lineno=742, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=743, col_offset=12), 'tk', Load(), lineno=743, col_offset=12), 'call', Load(), lineno=743, col_offset=12), [Str('winfo', lineno=743, col_offset=25), Str('ismapped', lineno=743, col_offset=34), Attribute(Name('self', Load(), lineno=743, col_offset=46), '_w', Load(), lineno=743, col_offset=46)], [], None, None, lineno=743, col_offset=12)], [], None, None, lineno=742, col_offset=15), lineno=742, col_offset=8)], [], lineno=740, col_offset=4), FunctionDef('winfo_manager', arguments([Name('self', Param(), lineno=744, col_offset=22)], None, None, []), [Expr(Str('Return the window mananger name for this widget.', lineno=745, col_offset=8), lineno=745, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=746, col_offset=15), 'tk', Load(), lineno=746, col_offset=15), 'call', Load(), lineno=746, col_offset=15), [Str('winfo', lineno=746, col_offset=28), Str('manager', lineno=746, col_offset=37), Attribute(Name('self', Load(), lineno=746, col_offset=48), '_w', Load(), lineno=746, col_offset=48)], [], None, None, lineno=746, col_offset=15), lineno=746, col_offset=8)], [], lineno=744, col_offset=4), FunctionDef('winfo_name', arguments([Name('self', Param(), lineno=747, col_offset=19)], None, None, []), [Expr(Str('Return the name of this widget.', lineno=748, col_offset=8), lineno=748, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=749, col_offset=15), 'tk', Load(), lineno=749, col_offset=15), 'call', Load(), lineno=749, col_offset=15), [Str('winfo', lineno=749, col_offset=28), Str('name', lineno=749, col_offset=37), Attribute(Name('self', Load(), lineno=749, col_offset=45), '_w', Load(), lineno=749, col_offset=45)], [], None, None, lineno=749, col_offset=15), lineno=749, col_offset=8)], [], lineno=747, col_offset=4), FunctionDef('winfo_parent', arguments([Name('self', Param(), lineno=750, col_offset=21)], None, None, []), [Expr(Str('Return the name of the parent of this widget.', lineno=751, col_offset=8), lineno=751, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=752, col_offset=15), 'tk', Load(), lineno=752, col_offset=15), 'call', Load(), lineno=752, col_offset=15), [Str('winfo', lineno=752, col_offset=28), Str('parent', lineno=752, col_offset=37), Attribute(Name('self', Load(), lineno=752, col_offset=47), '_w', Load(), lineno=752, col_offset=47)], [], None, None, lineno=752, col_offset=15), lineno=752, col_offset=8)], [], lineno=750, col_offset=4), FunctionDef('winfo_pathname', arguments([Name('self', Param(), lineno=753, col_offset=23), Name('id', Param(), lineno=753, col_offset=29), Name('displayof', Param(), lineno=753, col_offset=33)], None, None, [Num(0, lineno=753, col_offset=43)]), [Expr(Str('Return the pathname of the widget given by ID.', lineno=754, col_offset=8), lineno=754, col_offset=8), Assign([Name('args', Store(), lineno=755, col_offset=8)], BinOp(BinOp(Tuple([Str('winfo', lineno=755, col_offset=16), Str('pathname', lineno=755, col_offset=25)], Load(), lineno=755, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=756, col_offset=17), '_displayof', Load(), lineno=756, col_offset=17), [Name('displayof', Load(), lineno=756, col_offset=33)], [], None, None, lineno=756, col_offset=17), lineno=755, col_offset=15), Add(), Tuple([Name('id', Load(), lineno=756, col_offset=47)], Load(), lineno=756, col_offset=47), lineno=756, col_offset=44), lineno=755, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=757, col_offset=15), 'tk', Load(), lineno=757, col_offset=15), 'call', Load(), lineno=757, col_offset=15), [Name('args', Load(), lineno=757, col_offset=28)], [], None, None, lineno=757, col_offset=15), lineno=757, col_offset=8)], [], lineno=753, col_offset=4), FunctionDef('winfo_pixels', arguments([Name('self', Param(), lineno=758, col_offset=21), Name('number', Param(), lineno=758, col_offset=27)], None, None, []), [Expr(Str('Rounded integer value of winfo_fpixels.', lineno=759, col_offset=8), lineno=759, col_offset=8), Return(Call(Name('getint', Load(), lineno=760, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=761, col_offset=12), 'tk', Load(), lineno=761, col_offset=12), 'call', Load(), lineno=761, col_offset=12), [Str('winfo', lineno=761, col_offset=25), Str('pixels', lineno=761, col_offset=34), Attribute(Name('self', Load(), lineno=761, col_offset=44), '_w', Load(), lineno=761, col_offset=44), Name('number', Load(), lineno=761, col_offset=53)], [], None, None, lineno=761, col_offset=12)], [], None, None, lineno=760, col_offset=15), lineno=760, col_offset=8)], [], lineno=758, col_offset=4), FunctionDef('winfo_pointerx', arguments([Name('self', Param(), lineno=762, col_offset=23)], None, None, []), [Expr(Str('Return the x coordinate of the pointer on the root window.', lineno=763, col_offset=8), lineno=763, col_offset=8), Return(Call(Name('getint', Load(), lineno=764, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=765, col_offset=12), 'tk', Load(), lineno=765, col_offset=12), 'call', Load(), lineno=765, col_offset=12), [Str('winfo', lineno=765, col_offset=25), Str('pointerx', lineno=765, col_offset=34), Attribute(Name('self', Load(), lineno=765, col_offset=46), '_w', Load(), lineno=765, col_offset=46)], [], None, None, lineno=765, col_offset=12)], [], None, None, lineno=764, col_offset=15), lineno=764, col_offset=8)], [], lineno=762, col_offset=4), FunctionDef('winfo_pointerxy', arguments([Name('self', Param(), lineno=766, col_offset=24)], None, None, []), [Expr(Str('Return a tuple of x and y coordinates of the pointer on the root window.', lineno=767, col_offset=8), lineno=767, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=768, col_offset=15), '_getints', Load(), lineno=768, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=769, col_offset=12), 'tk', Load(), lineno=769, col_offset=12), 'call', Load(), lineno=769, col_offset=12), [Str('winfo', lineno=769, col_offset=25), Str('pointerxy', lineno=769, col_offset=34), Attribute(Name('self', Load(), lineno=769, col_offset=47), '_w', Load(), lineno=769, col_offset=47)], [], None, None, lineno=769, col_offset=12)], [], None, None, lineno=768, col_offset=15), lineno=768, col_offset=8)], [], lineno=766, col_offset=4), FunctionDef('winfo_pointery', arguments([Name('self', Param(), lineno=770, col_offset=23)], None, None, []), [Expr(Str('Return the y coordinate of the pointer on the root window.', lineno=771, col_offset=8), lineno=771, col_offset=8), Return(Call(Name('getint', Load(), lineno=772, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=773, col_offset=12), 'tk', Load(), lineno=773, col_offset=12), 'call', Load(), lineno=773, col_offset=12), [Str('winfo', lineno=773, col_offset=25), Str('pointery', lineno=773, col_offset=34), Attribute(Name('self', Load(), lineno=773, col_offset=46), '_w', Load(), lineno=773, col_offset=46)], [], None, None, lineno=773, col_offset=12)], [], None, None, lineno=772, col_offset=15), lineno=772, col_offset=8)], [], lineno=770, col_offset=4), FunctionDef('winfo_reqheight', arguments([Name('self', Param(), lineno=774, col_offset=24)], None, None, []), [Expr(Str('Return requested height of this widget.', lineno=775, col_offset=8), lineno=775, col_offset=8), Return(Call(Name('getint', Load(), lineno=776, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=777, col_offset=12), 'tk', Load(), lineno=777, col_offset=12), 'call', Load(), lineno=777, col_offset=12), [Str('winfo', lineno=777, col_offset=25), Str('reqheight', lineno=777, col_offset=34), Attribute(Name('self', Load(), lineno=777, col_offset=47), '_w', Load(), lineno=777, col_offset=47)], [], None, None, lineno=777, col_offset=12)], [], None, None, lineno=776, col_offset=15), lineno=776, col_offset=8)], [], lineno=774, col_offset=4), FunctionDef('winfo_reqwidth', arguments([Name('self', Param(), lineno=778, col_offset=23)], None, None, []), [Expr(Str('Return requested width of this widget.', lineno=779, col_offset=8), lineno=779, col_offset=8), Return(Call(Name('getint', Load(), lineno=780, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=781, col_offset=12), 'tk', Load(), lineno=781, col_offset=12), 'call', Load(), lineno=781, col_offset=12), [Str('winfo', lineno=781, col_offset=25), Str('reqwidth', lineno=781, col_offset=34), Attribute(Name('self', Load(), lineno=781, col_offset=46), '_w', Load(), lineno=781, col_offset=46)], [], None, None, lineno=781, col_offset=12)], [], None, None, lineno=780, col_offset=15), lineno=780, col_offset=8)], [], lineno=778, col_offset=4), FunctionDef('winfo_rgb', arguments([Name('self', Param(), lineno=782, col_offset=18), Name('color', Param(), lineno=782, col_offset=24)], None, None, []), [Expr(Str('Return tuple of decimal values for red, green, blue for\n        COLOR in this widget.', lineno=784, col_offset=-1), lineno=784, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=785, col_offset=15), '_getints', Load(), lineno=785, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=786, col_offset=12), 'tk', Load(), lineno=786, col_offset=12), 'call', Load(), lineno=786, col_offset=12), [Str('winfo', lineno=786, col_offset=25), Str('rgb', lineno=786, col_offset=34), Attribute(Name('self', Load(), lineno=786, col_offset=41), '_w', Load(), lineno=786, col_offset=41), Name('color', Load(), lineno=786, col_offset=50)], [], None, None, lineno=786, col_offset=12)], [], None, None, lineno=785, col_offset=15), lineno=785, col_offset=8)], [], lineno=782, col_offset=4), FunctionDef('winfo_rootx', arguments([Name('self', Param(), lineno=787, col_offset=20)], None, None, []), [Expr(Str('Return x coordinate of upper left corner of this widget on the\n        root window.', lineno=789, col_offset=-1), lineno=789, col_offset=-1), Return(Call(Name('getint', Load(), lineno=790, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=791, col_offset=12), 'tk', Load(), lineno=791, col_offset=12), 'call', Load(), lineno=791, col_offset=12), [Str('winfo', lineno=791, col_offset=25), Str('rootx', lineno=791, col_offset=34), Attribute(Name('self', Load(), lineno=791, col_offset=43), '_w', Load(), lineno=791, col_offset=43)], [], None, None, lineno=791, col_offset=12)], [], None, None, lineno=790, col_offset=15), lineno=790, col_offset=8)], [], lineno=787, col_offset=4), FunctionDef('winfo_rooty', arguments([Name('self', Param(), lineno=792, col_offset=20)], None, None, []), [Expr(Str('Return y coordinate of upper left corner of this widget on the\n        root window.', lineno=794, col_offset=-1), lineno=794, col_offset=-1), Return(Call(Name('getint', Load(), lineno=795, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=796, col_offset=12), 'tk', Load(), lineno=796, col_offset=12), 'call', Load(), lineno=796, col_offset=12), [Str('winfo', lineno=796, col_offset=25), Str('rooty', lineno=796, col_offset=34), Attribute(Name('self', Load(), lineno=796, col_offset=43), '_w', Load(), lineno=796, col_offset=43)], [], None, None, lineno=796, col_offset=12)], [], None, None, lineno=795, col_offset=15), lineno=795, col_offset=8)], [], lineno=792, col_offset=4), FunctionDef('winfo_screen', arguments([Name('self', Param(), lineno=797, col_offset=21)], None, None, []), [Expr(Str('Return the screen name of this widget.', lineno=798, col_offset=8), lineno=798, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=799, col_offset=15), 'tk', Load(), lineno=799, col_offset=15), 'call', Load(), lineno=799, col_offset=15), [Str('winfo', lineno=799, col_offset=28), Str('screen', lineno=799, col_offset=37), Attribute(Name('self', Load(), lineno=799, col_offset=47), '_w', Load(), lineno=799, col_offset=47)], [], None, None, lineno=799, col_offset=15), lineno=799, col_offset=8)], [], lineno=797, col_offset=4), FunctionDef('winfo_screencells', arguments([Name('self', Param(), lineno=800, col_offset=26)], None, None, []), [Expr(Str('Return the number of the cells in the colormap of the screen\n        of this widget.', lineno=802, col_offset=-1), lineno=802, col_offset=-1), Return(Call(Name('getint', Load(), lineno=803, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=804, col_offset=12), 'tk', Load(), lineno=804, col_offset=12), 'call', Load(), lineno=804, col_offset=12), [Str('winfo', lineno=804, col_offset=25), Str('screencells', lineno=804, col_offset=34), Attribute(Name('self', Load(), lineno=804, col_offset=49), '_w', Load(), lineno=804, col_offset=49)], [], None, None, lineno=804, col_offset=12)], [], None, None, lineno=803, col_offset=15), lineno=803, col_offset=8)], [], lineno=800, col_offset=4), FunctionDef('winfo_screendepth', arguments([Name('self', Param(), lineno=805, col_offset=26)], None, None, []), [Expr(Str('Return the number of bits per pixel of the root window of the\n        screen of this widget.', lineno=807, col_offset=-1), lineno=807, col_offset=-1), Return(Call(Name('getint', Load(), lineno=808, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=809, col_offset=12), 'tk', Load(), lineno=809, col_offset=12), 'call', Load(), lineno=809, col_offset=12), [Str('winfo', lineno=809, col_offset=25), Str('screendepth', lineno=809, col_offset=34), Attribute(Name('self', Load(), lineno=809, col_offset=49), '_w', Load(), lineno=809, col_offset=49)], [], None, None, lineno=809, col_offset=12)], [], None, None, lineno=808, col_offset=15), lineno=808, col_offset=8)], [], lineno=805, col_offset=4), FunctionDef('winfo_screenheight', arguments([Name('self', Param(), lineno=810, col_offset=27)], None, None, []), [Expr(Str('Return the number of pixels of the height of the screen of this widget\n        in pixel.', lineno=812, col_offset=-1), lineno=812, col_offset=-1), Return(Call(Name('getint', Load(), lineno=813, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=814, col_offset=12), 'tk', Load(), lineno=814, col_offset=12), 'call', Load(), lineno=814, col_offset=12), [Str('winfo', lineno=814, col_offset=25), Str('screenheight', lineno=814, col_offset=34), Attribute(Name('self', Load(), lineno=814, col_offset=50), '_w', Load(), lineno=814, col_offset=50)], [], None, None, lineno=814, col_offset=12)], [], None, None, lineno=813, col_offset=15), lineno=813, col_offset=8)], [], lineno=810, col_offset=4), FunctionDef('winfo_screenmmheight', arguments([Name('self', Param(), lineno=815, col_offset=29)], None, None, []), [Expr(Str('Return the number of pixels of the height of the screen of\n        this widget in mm.', lineno=817, col_offset=-1), lineno=817, col_offset=-1), Return(Call(Name('getint', Load(), lineno=818, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=819, col_offset=12), 'tk', Load(), lineno=819, col_offset=12), 'call', Load(), lineno=819, col_offset=12), [Str('winfo', lineno=819, col_offset=25), Str('screenmmheight', lineno=819, col_offset=34), Attribute(Name('self', Load(), lineno=819, col_offset=52), '_w', Load(), lineno=819, col_offset=52)], [], None, None, lineno=819, col_offset=12)], [], None, None, lineno=818, col_offset=15), lineno=818, col_offset=8)], [], lineno=815, col_offset=4), FunctionDef('winfo_screenmmwidth', arguments([Name('self', Param(), lineno=820, col_offset=28)], None, None, []), [Expr(Str('Return the number of pixels of the width of the screen of\n        this widget in mm.', lineno=822, col_offset=-1), lineno=822, col_offset=-1), Return(Call(Name('getint', Load(), lineno=823, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=824, col_offset=12), 'tk', Load(), lineno=824, col_offset=12), 'call', Load(), lineno=824, col_offset=12), [Str('winfo', lineno=824, col_offset=25), Str('screenmmwidth', lineno=824, col_offset=34), Attribute(Name('self', Load(), lineno=824, col_offset=51), '_w', Load(), lineno=824, col_offset=51)], [], None, None, lineno=824, col_offset=12)], [], None, None, lineno=823, col_offset=15), lineno=823, col_offset=8)], [], lineno=820, col_offset=4), FunctionDef('winfo_screenvisual', arguments([Name('self', Param(), lineno=825, col_offset=27)], None, None, []), [Expr(Str('Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the default\n        colormodel of this screen.', lineno=828, col_offset=-1), lineno=828, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=829, col_offset=15), 'tk', Load(), lineno=829, col_offset=15), 'call', Load(), lineno=829, col_offset=15), [Str('winfo', lineno=829, col_offset=28), Str('screenvisual', lineno=829, col_offset=37), Attribute(Name('self', Load(), lineno=829, col_offset=53), '_w', Load(), lineno=829, col_offset=53)], [], None, None, lineno=829, col_offset=15), lineno=829, col_offset=8)], [], lineno=825, col_offset=4), FunctionDef('winfo_screenwidth', arguments([Name('self', Param(), lineno=830, col_offset=26)], None, None, []), [Expr(Str('Return the number of pixels of the width of the screen of\n        this widget in pixel.', lineno=832, col_offset=-1), lineno=832, col_offset=-1), Return(Call(Name('getint', Load(), lineno=833, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=834, col_offset=12), 'tk', Load(), lineno=834, col_offset=12), 'call', Load(), lineno=834, col_offset=12), [Str('winfo', lineno=834, col_offset=25), Str('screenwidth', lineno=834, col_offset=34), Attribute(Name('self', Load(), lineno=834, col_offset=49), '_w', Load(), lineno=834, col_offset=49)], [], None, None, lineno=834, col_offset=12)], [], None, None, lineno=833, col_offset=15), lineno=833, col_offset=8)], [], lineno=830, col_offset=4), FunctionDef('winfo_server', arguments([Name('self', Param(), lineno=835, col_offset=21)], None, None, []), [Expr(Str('Return information of the X-Server of the screen of this widget in\n        the form "XmajorRminor vendor vendorVersion".', lineno=837, col_offset=-1), lineno=837, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=838, col_offset=15), 'tk', Load(), lineno=838, col_offset=15), 'call', Load(), lineno=838, col_offset=15), [Str('winfo', lineno=838, col_offset=28), Str('server', lineno=838, col_offset=37), Attribute(Name('self', Load(), lineno=838, col_offset=47), '_w', Load(), lineno=838, col_offset=47)], [], None, None, lineno=838, col_offset=15), lineno=838, col_offset=8)], [], lineno=835, col_offset=4), FunctionDef('winfo_toplevel', arguments([Name('self', Param(), lineno=839, col_offset=23)], None, None, []), [Expr(Str('Return the toplevel widget of this widget.', lineno=840, col_offset=8), lineno=840, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=841, col_offset=15), '_nametowidget', Load(), lineno=841, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=841, col_offset=34), 'tk', Load(), lineno=841, col_offset=34), 'call', Load(), lineno=841, col_offset=34), [Str('winfo', lineno=842, col_offset=12), Str('toplevel', lineno=842, col_offset=21), Attribute(Name('self', Load(), lineno=842, col_offset=33), '_w', Load(), lineno=842, col_offset=33)], [], None, None, lineno=841, col_offset=34)], [], None, None, lineno=841, col_offset=15), lineno=841, col_offset=8)], [], lineno=839, col_offset=4), FunctionDef('winfo_viewable', arguments([Name('self', Param(), lineno=843, col_offset=23)], None, None, []), [Expr(Str('Return true if the widget and all its higher ancestors are mapped.', lineno=844, col_offset=8), lineno=844, col_offset=8), Return(Call(Name('getint', Load(), lineno=845, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=846, col_offset=12), 'tk', Load(), lineno=846, col_offset=12), 'call', Load(), lineno=846, col_offset=12), [Str('winfo', lineno=846, col_offset=25), Str('viewable', lineno=846, col_offset=34), Attribute(Name('self', Load(), lineno=846, col_offset=46), '_w', Load(), lineno=846, col_offset=46)], [], None, None, lineno=846, col_offset=12)], [], None, None, lineno=845, col_offset=15), lineno=845, col_offset=8)], [], lineno=843, col_offset=4), FunctionDef('winfo_visual', arguments([Name('self', Param(), lineno=847, col_offset=21)], None, None, []), [Expr(Str('Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the\n        colormodel of this widget.', lineno=850, col_offset=-1), lineno=850, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=851, col_offset=15), 'tk', Load(), lineno=851, col_offset=15), 'call', Load(), lineno=851, col_offset=15), [Str('winfo', lineno=851, col_offset=28), Str('visual', lineno=851, col_offset=37), Attribute(Name('self', Load(), lineno=851, col_offset=47), '_w', Load(), lineno=851, col_offset=47)], [], None, None, lineno=851, col_offset=15), lineno=851, col_offset=8)], [], lineno=847, col_offset=4), FunctionDef('winfo_visualid', arguments([Name('self', Param(), lineno=852, col_offset=23)], None, None, []), [Expr(Str('Return the X identifier for the visual for this widget.', lineno=853, col_offset=8), lineno=853, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=854, col_offset=15), 'tk', Load(), lineno=854, col_offset=15), 'call', Load(), lineno=854, col_offset=15), [Str('winfo', lineno=854, col_offset=28), Str('visualid', lineno=854, col_offset=37), Attribute(Name('self', Load(), lineno=854, col_offset=49), '_w', Load(), lineno=854, col_offset=49)], [], None, None, lineno=854, col_offset=15), lineno=854, col_offset=8)], [], lineno=852, col_offset=4), FunctionDef('winfo_visualsavailable', arguments([Name('self', Param(), lineno=855, col_offset=31), Name('includeids', Param(), lineno=855, col_offset=37)], None, None, [Num(0, lineno=855, col_offset=48)]), [Expr(Str('Return a list of all visuals available for the screen\n        of this widget.\n\n        Each item in the list consists of a visual name (see winfo_visual), a\n        depth and if INCLUDEIDS=1 is given also the X identifier.', lineno=860, col_offset=-1), lineno=860, col_offset=-1), Assign([Name('data', Store(), lineno=861, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=861, col_offset=15), 'tk', Load(), lineno=861, col_offset=15), 'split', Load(), lineno=861, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=862, col_offset=12), 'tk', Load(), lineno=862, col_offset=12), 'call', Load(), lineno=862, col_offset=12), [Str('winfo', lineno=862, col_offset=25), Str('visualsavailable', lineno=862, col_offset=34), Attribute(Name('self', Load(), lineno=862, col_offset=54), '_w', Load(), lineno=862, col_offset=54), BoolOp(Or(), [BoolOp(And(), [Name('includeids', Load(), lineno=863, col_offset=21), Str('includeids', lineno=863, col_offset=36)], lineno=863, col_offset=21), Name('None', Load(), lineno=863, col_offset=52)], lineno=863, col_offset=21)], [], None, None, lineno=862, col_offset=12)], [], None, None, lineno=861, col_offset=15), lineno=861, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=864, col_offset=11), [Name('data', Load(), lineno=864, col_offset=16)], [], None, None, lineno=864, col_offset=11), [Is()], [Name('StringType', Load(), lineno=864, col_offset=25)], lineno=864, col_offset=11), [Assign([Name('data', Store(), lineno=865, col_offset=12)], List([Call(Attribute(Attribute(Name('self', Load(), lineno=865, col_offset=20), 'tk', Load(), lineno=865, col_offset=20), 'split', Load(), lineno=865, col_offset=20), [Name('data', Load(), lineno=865, col_offset=34)], [], None, None, lineno=865, col_offset=20)], Load(), lineno=865, col_offset=19), lineno=865, col_offset=12)], [], lineno=864, col_offset=8), Return(Call(Name('map', Load(), lineno=866, col_offset=15), [Attribute(Name('self', Load(), lineno=866, col_offset=19), '__winfo_parseitem', Load(), lineno=866, col_offset=19), Name('data', Load(), lineno=866, col_offset=43)], [], None, None, lineno=866, col_offset=15), lineno=866, col_offset=8)], [], lineno=855, col_offset=4), FunctionDef('__winfo_parseitem', arguments([Name('self', Param(), lineno=867, col_offset=26), Name('t', Param(), lineno=867, col_offset=32)], None, None, []), [Expr(Str('Internal function.', lineno=868, col_offset=8), lineno=868, col_offset=8), Return(BinOp(Subscript(Name('t', Load(), lineno=869, col_offset=15), Slice(None, Num(1, lineno=869, col_offset=18), None), Load(), lineno=869, col_offset=15), Add(), Call(Name('tuple', Load(), lineno=869, col_offset=23), [Call(Name('map', Load(), lineno=869, col_offset=29), [Attribute(Name('self', Load(), lineno=869, col_offset=33), '__winfo_getint', Load(), lineno=869, col_offset=33), Subscript(Name('t', Load(), lineno=869, col_offset=54), Slice(Num(1, lineno=869, col_offset=56), None, None), Load(), lineno=869, col_offset=54)], [], None, None, lineno=869, col_offset=29)], [], None, None, lineno=869, col_offset=23), lineno=869, col_offset=15), lineno=869, col_offset=8)], [], lineno=867, col_offset=4), FunctionDef('__winfo_getint', arguments([Name('self', Param(), lineno=870, col_offset=23), Name('x', Param(), lineno=870, col_offset=29)], None, None, []), [Expr(Str('Internal function.', lineno=871, col_offset=8), lineno=871, col_offset=8), Return(Call(Name('int', Load(), lineno=872, col_offset=15), [Name('x', Load(), lineno=872, col_offset=19), Num(0, lineno=872, col_offset=22)], [], None, None, lineno=872, col_offset=15), lineno=872, col_offset=8)], [], lineno=870, col_offset=4), FunctionDef('winfo_vrootheight', arguments([Name('self', Param(), lineno=873, col_offset=26)], None, None, []), [Expr(Str('Return the height of the virtual root window associated with this\n        widget in pixels. If there is no virtual root window return the\n        height of the screen.', lineno=876, col_offset=-1), lineno=876, col_offset=-1), Return(Call(Name('getint', Load(), lineno=877, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=878, col_offset=12), 'tk', Load(), lineno=878, col_offset=12), 'call', Load(), lineno=878, col_offset=12), [Str('winfo', lineno=878, col_offset=25), Str('vrootheight', lineno=878, col_offset=34), Attribute(Name('self', Load(), lineno=878, col_offset=49), '_w', Load(), lineno=878, col_offset=49)], [], None, None, lineno=878, col_offset=12)], [], None, None, lineno=877, col_offset=15), lineno=877, col_offset=8)], [], lineno=873, col_offset=4), FunctionDef('winfo_vrootwidth', arguments([Name('self', Param(), lineno=879, col_offset=25)], None, None, []), [Expr(Str('Return the width of the virtual root window associated with this\n        widget in pixel. If there is no virtual root window return the\n        width of the screen.', lineno=882, col_offset=-1), lineno=882, col_offset=-1), Return(Call(Name('getint', Load(), lineno=883, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=884, col_offset=12), 'tk', Load(), lineno=884, col_offset=12), 'call', Load(), lineno=884, col_offset=12), [Str('winfo', lineno=884, col_offset=25), Str('vrootwidth', lineno=884, col_offset=34), Attribute(Name('self', Load(), lineno=884, col_offset=48), '_w', Load(), lineno=884, col_offset=48)], [], None, None, lineno=884, col_offset=12)], [], None, None, lineno=883, col_offset=15), lineno=883, col_offset=8)], [], lineno=879, col_offset=4), FunctionDef('winfo_vrootx', arguments([Name('self', Param(), lineno=885, col_offset=21)], None, None, []), [Expr(Str('Return the x offset of the virtual root relative to the root\n        window of the screen of this widget.', lineno=887, col_offset=-1), lineno=887, col_offset=-1), Return(Call(Name('getint', Load(), lineno=888, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=889, col_offset=12), 'tk', Load(), lineno=889, col_offset=12), 'call', Load(), lineno=889, col_offset=12), [Str('winfo', lineno=889, col_offset=25), Str('vrootx', lineno=889, col_offset=34), Attribute(Name('self', Load(), lineno=889, col_offset=44), '_w', Load(), lineno=889, col_offset=44)], [], None, None, lineno=889, col_offset=12)], [], None, None, lineno=888, col_offset=15), lineno=888, col_offset=8)], [], lineno=885, col_offset=4), FunctionDef('winfo_vrooty', arguments([Name('self', Param(), lineno=890, col_offset=21)], None, None, []), [Expr(Str('Return the y offset of the virtual root relative to the root\n        window of the screen of this widget.', lineno=892, col_offset=-1), lineno=892, col_offset=-1), Return(Call(Name('getint', Load(), lineno=893, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=894, col_offset=12), 'tk', Load(), lineno=894, col_offset=12), 'call', Load(), lineno=894, col_offset=12), [Str('winfo', lineno=894, col_offset=25), Str('vrooty', lineno=894, col_offset=34), Attribute(Name('self', Load(), lineno=894, col_offset=44), '_w', Load(), lineno=894, col_offset=44)], [], None, None, lineno=894, col_offset=12)], [], None, None, lineno=893, col_offset=15), lineno=893, col_offset=8)], [], lineno=890, col_offset=4), FunctionDef('winfo_width', arguments([Name('self', Param(), lineno=895, col_offset=20)], None, None, []), [Expr(Str('Return the width of this widget.', lineno=896, col_offset=8), lineno=896, col_offset=8), Return(Call(Name('getint', Load(), lineno=897, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=898, col_offset=12), 'tk', Load(), lineno=898, col_offset=12), 'call', Load(), lineno=898, col_offset=12), [Str('winfo', lineno=898, col_offset=25), Str('width', lineno=898, col_offset=34), Attribute(Name('self', Load(), lineno=898, col_offset=43), '_w', Load(), lineno=898, col_offset=43)], [], None, None, lineno=898, col_offset=12)], [], None, None, lineno=897, col_offset=15), lineno=897, col_offset=8)], [], lineno=895, col_offset=4), FunctionDef('winfo_x', arguments([Name('self', Param(), lineno=899, col_offset=16)], None, None, []), [Expr(Str('Return the x coordinate of the upper left corner of this widget\n        in the parent.', lineno=901, col_offset=-1), lineno=901, col_offset=-1), Return(Call(Name('getint', Load(), lineno=902, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=903, col_offset=12), 'tk', Load(), lineno=903, col_offset=12), 'call', Load(), lineno=903, col_offset=12), [Str('winfo', lineno=903, col_offset=25), Str('x', lineno=903, col_offset=34), Attribute(Name('self', Load(), lineno=903, col_offset=39), '_w', Load(), lineno=903, col_offset=39)], [], None, None, lineno=903, col_offset=12)], [], None, None, lineno=902, col_offset=15), lineno=902, col_offset=8)], [], lineno=899, col_offset=4), FunctionDef('winfo_y', arguments([Name('self', Param(), lineno=904, col_offset=16)], None, None, []), [Expr(Str('Return the y coordinate of the upper left corner of this widget\n        in the parent.', lineno=906, col_offset=-1), lineno=906, col_offset=-1), Return(Call(Name('getint', Load(), lineno=907, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=908, col_offset=12), 'tk', Load(), lineno=908, col_offset=12), 'call', Load(), lineno=908, col_offset=12), [Str('winfo', lineno=908, col_offset=25), Str('y', lineno=908, col_offset=34), Attribute(Name('self', Load(), lineno=908, col_offset=39), '_w', Load(), lineno=908, col_offset=39)], [], None, None, lineno=908, col_offset=12)], [], None, None, lineno=907, col_offset=15), lineno=907, col_offset=8)], [], lineno=904, col_offset=4), FunctionDef('update', arguments([Name('self', Param(), lineno=909, col_offset=15)], None, None, []), [Expr(Str('Enter event loop until all pending events have been processed by Tcl.', lineno=910, col_offset=8), lineno=910, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=911, col_offset=8), 'tk', Load(), lineno=911, col_offset=8), 'call', Load(), lineno=911, col_offset=8), [Str('update', lineno=911, col_offset=21)], [], None, None, lineno=911, col_offset=8), lineno=911, col_offset=8)], [], lineno=909, col_offset=4), FunctionDef('update_idletasks', arguments([Name('self', Param(), lineno=912, col_offset=25)], None, None, []), [Expr(Str('Enter event loop until all idle callbacks have been called. This\n        will update the display of windows but not process events caused by\n        the user.', lineno=915, col_offset=-1), lineno=915, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=916, col_offset=8), 'tk', Load(), lineno=916, col_offset=8), 'call', Load(), lineno=916, col_offset=8), [Str('update', lineno=916, col_offset=21), Str('idletasks', lineno=916, col_offset=31)], [], None, None, lineno=916, col_offset=8), lineno=916, col_offset=8)], [], lineno=912, col_offset=4), FunctionDef('bindtags', arguments([Name('self', Param(), lineno=917, col_offset=17), Name('tagList', Param(), lineno=917, col_offset=23)], None, None, [Name('None', Load(), lineno=917, col_offset=31)]), [Expr(Str('Set or get the list of bindtags for this widget.\n\n        With no argument return the list of all bindtags associated with\n        this widget. With a list of strings as argument the bindtags are\n        set to this list. The bindtags determine in which order events are\n        processed (see bind).', lineno=923, col_offset=-1), lineno=923, col_offset=-1), If(Compare(Name('tagList', Load(), lineno=924, col_offset=11), [Is()], [Name('None', Load(), lineno=924, col_offset=22)], lineno=924, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=925, col_offset=19), 'tk', Load(), lineno=925, col_offset=19), 'splitlist', Load(), lineno=925, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=926, col_offset=16), 'tk', Load(), lineno=926, col_offset=16), 'call', Load(), lineno=926, col_offset=16), [Str('bindtags', lineno=926, col_offset=29), Attribute(Name('self', Load(), lineno=926, col_offset=41), '_w', Load(), lineno=926, col_offset=41)], [], None, None, lineno=926, col_offset=16)], [], None, None, lineno=925, col_offset=19), lineno=925, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=928, col_offset=12), 'tk', Load(), lineno=928, col_offset=12), 'call', Load(), lineno=928, col_offset=12), [Str('bindtags', lineno=928, col_offset=25), Attribute(Name('self', Load(), lineno=928, col_offset=37), '_w', Load(), lineno=928, col_offset=37), Name('tagList', Load(), lineno=928, col_offset=46)], [], None, None, lineno=928, col_offset=12), lineno=928, col_offset=12)], lineno=924, col_offset=8)], [], lineno=917, col_offset=4), FunctionDef('_bind', arguments([Name('self', Param(), lineno=929, col_offset=14), Name('what', Param(), lineno=929, col_offset=20), Name('sequence', Param(), lineno=929, col_offset=26), Name('func', Param(), lineno=929, col_offset=36), Name('add', Param(), lineno=929, col_offset=42), Name('needcleanup', Param(), lineno=929, col_offset=47)], None, None, [Num(1, lineno=929, col_offset=59)]), [Expr(Str('Internal function.', lineno=930, col_offset=8), lineno=930, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=931, col_offset=11), [Name('func', Load(), lineno=931, col_offset=16)], [], None, None, lineno=931, col_offset=11), [Is()], [Name('StringType', Load(), lineno=931, col_offset=25)], lineno=931, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=932, col_offset=12), 'tk', Load(), lineno=932, col_offset=12), 'call', Load(), lineno=932, col_offset=12), [BinOp(Name('what', Load(), lineno=932, col_offset=25), Add(), Tuple([Name('sequence', Load(), lineno=932, col_offset=33), Name('func', Load(), lineno=932, col_offset=43)], Load(), lineno=932, col_offset=33), lineno=932, col_offset=25)], [], None, None, lineno=932, col_offset=12), lineno=932, col_offset=12)], [If(Name('func', Load(), lineno=933, col_offset=13), [Assign([Name('funcid', Store(), lineno=934, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=934, col_offset=21), '_register', Load(), lineno=934, col_offset=21), [Name('func', Load(), lineno=934, col_offset=36), Attribute(Name('self', Load(), lineno=934, col_offset=42), '_substitute', Load(), lineno=934, col_offset=42), Name('needcleanup', Load(), lineno=935, col_offset=24)], [], None, None, lineno=934, col_offset=21), lineno=934, col_offset=12), Assign([Name('cmd', Store(), lineno=936, col_offset=12)], BinOp(Str('%sif {"[%s %s]" == "break"} break\n', lineno=936, col_offset=19), Mod(), Tuple([BoolOp(Or(), [BoolOp(And(), [Name('add', Load(), lineno=938, col_offset=20), Str('+', lineno=938, col_offset=28)], lineno=938, col_offset=20), Str('', lineno=938, col_offset=35)], lineno=938, col_offset=20), Name('funcid', Load(), lineno=939, col_offset=16), Attribute(Name('self', Load(), lineno=939, col_offset=24), '_subst_format_str', Load(), lineno=939, col_offset=24)], Load(), lineno=938, col_offset=20), lineno=936, col_offset=19), lineno=936, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=940, col_offset=12), 'tk', Load(), lineno=940, col_offset=12), 'call', Load(), lineno=940, col_offset=12), [BinOp(Name('what', Load(), lineno=940, col_offset=25), Add(), Tuple([Name('sequence', Load(), lineno=940, col_offset=33), Name('cmd', Load(), lineno=940, col_offset=43)], Load(), lineno=940, col_offset=33), lineno=940, col_offset=25)], [], None, None, lineno=940, col_offset=12), lineno=940, col_offset=12), Return(Name('funcid', Load(), lineno=941, col_offset=19), lineno=941, col_offset=12)], [If(Name('sequence', Load(), lineno=942, col_offset=13), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=943, col_offset=19), 'tk', Load(), lineno=943, col_offset=19), 'call', Load(), lineno=943, col_offset=19), [BinOp(Name('what', Load(), lineno=943, col_offset=32), Add(), Tuple([Name('sequence', Load(), lineno=943, col_offset=40)], Load(), lineno=943, col_offset=40), lineno=943, col_offset=32)], [], None, None, lineno=943, col_offset=19), lineno=943, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=945, col_offset=19), 'tk', Load(), lineno=945, col_offset=19), 'splitlist', Load(), lineno=945, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=945, col_offset=37), 'tk', Load(), lineno=945, col_offset=37), 'call', Load(), lineno=945, col_offset=37), [Name('what', Load(), lineno=945, col_offset=50)], [], None, None, lineno=945, col_offset=37)], [], None, None, lineno=945, col_offset=19), lineno=945, col_offset=12)], lineno=942, col_offset=13)], lineno=933, col_offset=13)], lineno=931, col_offset=8)], [], lineno=929, col_offset=4), FunctionDef('bind', arguments([Name('self', Param(), lineno=946, col_offset=13), Name('sequence', Param(), lineno=946, col_offset=19), Name('func', Param(), lineno=946, col_offset=34), Name('add', Param(), lineno=946, col_offset=45)], None, None, [Name('None', Load(), lineno=946, col_offset=28), Name('None', Load(), lineno=946, col_offset=39), Name('None', Load(), lineno=946, col_offset=49)]), [Expr(Str('Bind to this widget at event SEQUENCE a call to function FUNC.\n\n        SEQUENCE is a string of concatenated event\n        patterns. An event pattern is of the form\n        <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one\n        of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,\n        Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,\n        B3, Alt, Button4, B4, Double, Button5, B5 Triple,\n        Mod1, M1. TYPE is one of Activate, Enter, Map,\n        ButtonPress, Button, Expose, Motion, ButtonRelease\n        FocusIn, MouseWheel, Circulate, FocusOut, Property,\n        Colormap, Gravity Reparent, Configure, KeyPress, Key,\n        Unmap, Deactivate, KeyRelease Visibility, Destroy,\n        Leave and DETAIL is the button number for ButtonPress,\n        ButtonRelease and DETAIL is the Keysym for KeyPress and\n        KeyRelease. Examples are\n        <Control-Button-1> for pressing Control and mouse button 1 or\n        <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).\n        An event pattern can also be a virtual event of the form\n        <<AString>> where AString can be arbitrary. This\n        event can be generated by event_generate.\n        If events are concatenated they must appear shortly\n        after each other.\n\n        FUNC will be called if the event sequence occurs with an\n        instance of Event as argument. If the return value of FUNC is\n        "break" no further bound function is invoked.\n\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function.\n\n        Bind will return an identifier to allow deletion of the bound function with\n        unbind without memory leak.\n\n        If FUNC or SEQUENCE is omitted the bound function or list\n        of bound events are returned.', lineno=983, col_offset=-1), lineno=983, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=985, col_offset=15), '_bind', Load(), lineno=985, col_offset=15), [Tuple([Str('bind', lineno=985, col_offset=27), Attribute(Name('self', Load(), lineno=985, col_offset=35), '_w', Load(), lineno=985, col_offset=35)], Load(), lineno=985, col_offset=27), Name('sequence', Load(), lineno=985, col_offset=45), Name('func', Load(), lineno=985, col_offset=55), Name('add', Load(), lineno=985, col_offset=61)], [], None, None, lineno=985, col_offset=15), lineno=985, col_offset=8)], [], lineno=946, col_offset=4), FunctionDef('unbind', arguments([Name('self', Param(), lineno=986, col_offset=15), Name('sequence', Param(), lineno=986, col_offset=21), Name('funcid', Param(), lineno=986, col_offset=31)], None, None, [Name('None', Load(), lineno=986, col_offset=38)]), [Expr(Str('Unbind for this widget for event SEQUENCE  the\n        function identified with FUNCID.', lineno=988, col_offset=-1), lineno=988, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=989, col_offset=8), 'tk', Load(), lineno=989, col_offset=8), 'call', Load(), lineno=989, col_offset=8), [Str('bind', lineno=989, col_offset=21), Attribute(Name('self', Load(), lineno=989, col_offset=29), '_w', Load(), lineno=989, col_offset=29), Name('sequence', Load(), lineno=989, col_offset=38), Str('', lineno=989, col_offset=48)], [], None, None, lineno=989, col_offset=8), lineno=989, col_offset=8), If(Name('funcid', Load(), lineno=990, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=991, col_offset=12), 'deletecommand', Load(), lineno=991, col_offset=12), [Name('funcid', Load(), lineno=991, col_offset=31)], [], None, None, lineno=991, col_offset=12), lineno=991, col_offset=12)], [], lineno=990, col_offset=8)], [], lineno=986, col_offset=4), FunctionDef('bind_all', arguments([Name('self', Param(), lineno=992, col_offset=17), Name('sequence', Param(), lineno=992, col_offset=23), Name('func', Param(), lineno=992, col_offset=38), Name('add', Param(), lineno=992, col_offset=49)], None, None, [Name('None', Load(), lineno=992, col_offset=32), Name('None', Load(), lineno=992, col_offset=43), Name('None', Load(), lineno=992, col_offset=53)]), [Expr(Str('Bind to all widgets at an event SEQUENCE a call to function FUNC.\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function. See bind for the return value.', lineno=996, col_offset=-1), lineno=996, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=997, col_offset=15), '_bind', Load(), lineno=997, col_offset=15), [Tuple([Str('bind', lineno=997, col_offset=27), Str('all', lineno=997, col_offset=35)], Load(), lineno=997, col_offset=27), Name('sequence', Load(), lineno=997, col_offset=43), Name('func', Load(), lineno=997, col_offset=53), Name('add', Load(), lineno=997, col_offset=59), Num(0, lineno=997, col_offset=64)], [], None, None, lineno=997, col_offset=15), lineno=997, col_offset=8)], [], lineno=992, col_offset=4), FunctionDef('unbind_all', arguments([Name('self', Param(), lineno=998, col_offset=19), Name('sequence', Param(), lineno=998, col_offset=25)], None, None, []), [Expr(Str('Unbind for all widgets for event SEQUENCE all functions.', lineno=999, col_offset=8), lineno=999, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1000, col_offset=8), 'tk', Load(), lineno=1000, col_offset=8), 'call', Load(), lineno=1000, col_offset=8), [Str('bind', lineno=1000, col_offset=21), Str('all', lineno=1000, col_offset=29), Name('sequence', Load(), lineno=1000, col_offset=37), Str('', lineno=1000, col_offset=47)], [], None, None, lineno=1000, col_offset=8), lineno=1000, col_offset=8)], [], lineno=998, col_offset=4), FunctionDef('bind_class', arguments([Name('self', Param(), lineno=1001, col_offset=19), Name('className', Param(), lineno=1001, col_offset=25), Name('sequence', Param(), lineno=1001, col_offset=36), Name('func', Param(), lineno=1001, col_offset=51), Name('add', Param(), lineno=1001, col_offset=62)], None, None, [Name('None', Load(), lineno=1001, col_offset=45), Name('None', Load(), lineno=1001, col_offset=56), Name('None', Load(), lineno=1001, col_offset=66)]), [Expr(Str('Bind to widgets with bindtag CLASSNAME at event\n        SEQUENCE a call of function FUNC. An additional\n        boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or\n        whether it will replace the previous function. See bind for\n        the return value.', lineno=1008, col_offset=-1), lineno=1008, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1010, col_offset=15), '_bind', Load(), lineno=1010, col_offset=15), [Tuple([Str('bind', lineno=1010, col_offset=27), Name('className', Load(), lineno=1010, col_offset=35)], Load(), lineno=1010, col_offset=27), Name('sequence', Load(), lineno=1010, col_offset=47), Name('func', Load(), lineno=1010, col_offset=57), Name('add', Load(), lineno=1010, col_offset=63), Num(0, lineno=1010, col_offset=68)], [], None, None, lineno=1010, col_offset=15), lineno=1010, col_offset=8)], [], lineno=1001, col_offset=4), FunctionDef('unbind_class', arguments([Name('self', Param(), lineno=1011, col_offset=21), Name('className', Param(), lineno=1011, col_offset=27), Name('sequence', Param(), lineno=1011, col_offset=38)], None, None, []), [Expr(Str('Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE\n        all functions.', lineno=1013, col_offset=-1), lineno=1013, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1014, col_offset=8), 'tk', Load(), lineno=1014, col_offset=8), 'call', Load(), lineno=1014, col_offset=8), [Str('bind', lineno=1014, col_offset=21), Name('className', Load(), lineno=1014, col_offset=29), Name('sequence', Load(), lineno=1014, col_offset=41), Str('', lineno=1014, col_offset=51)], [], None, None, lineno=1014, col_offset=8), lineno=1014, col_offset=8)], [], lineno=1011, col_offset=4), FunctionDef('mainloop', arguments([Name('self', Param(), lineno=1015, col_offset=17), Name('n', Param(), lineno=1015, col_offset=23)], None, None, [Num(0, lineno=1015, col_offset=25)]), [Expr(Str('Call the mainloop of Tk.', lineno=1016, col_offset=8), lineno=1016, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1017, col_offset=8), 'tk', Load(), lineno=1017, col_offset=8), 'mainloop', Load(), lineno=1017, col_offset=8), [Name('n', Load(), lineno=1017, col_offset=25)], [], None, None, lineno=1017, col_offset=8), lineno=1017, col_offset=8)], [], lineno=1015, col_offset=4), FunctionDef('quit', arguments([Name('self', Param(), lineno=1018, col_offset=13)], None, None, []), [Expr(Str('Quit the Tcl interpreter. All widgets will be destroyed.', lineno=1019, col_offset=8), lineno=1019, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1020, col_offset=8), 'tk', Load(), lineno=1020, col_offset=8), 'quit', Load(), lineno=1020, col_offset=8), [], [], None, None, lineno=1020, col_offset=8), lineno=1020, col_offset=8)], [], lineno=1018, col_offset=4), FunctionDef('_getints', arguments([Name('self', Param(), lineno=1021, col_offset=17), Name('string', Param(), lineno=1021, col_offset=23)], None, None, []), [Expr(Str('Internal function.', lineno=1022, col_offset=8), lineno=1022, col_offset=8), If(Name('string', Load(), lineno=1023, col_offset=11), [Return(Call(Name('tuple', Load(), lineno=1024, col_offset=19), [Call(Name('map', Load(), lineno=1024, col_offset=25), [Name('getint', Load(), lineno=1024, col_offset=29), Call(Attribute(Attribute(Name('self', Load(), lineno=1024, col_offset=37), 'tk', Load(), lineno=1024, col_offset=37), 'splitlist', Load(), lineno=1024, col_offset=37), [Name('string', Load(), lineno=1024, col_offset=55)], [], None, None, lineno=1024, col_offset=37)], [], None, None, lineno=1024, col_offset=25)], [], None, None, lineno=1024, col_offset=19), lineno=1024, col_offset=12)], [], lineno=1023, col_offset=8)], [], lineno=1021, col_offset=4), FunctionDef('_getdoubles', arguments([Name('self', Param(), lineno=1025, col_offset=20), Name('string', Param(), lineno=1025, col_offset=26)], None, None, []), [Expr(Str('Internal function.', lineno=1026, col_offset=8), lineno=1026, col_offset=8), If(Name('string', Load(), lineno=1027, col_offset=11), [Return(Call(Name('tuple', Load(), lineno=1028, col_offset=19), [Call(Name('map', Load(), lineno=1028, col_offset=25), [Name('getdouble', Load(), lineno=1028, col_offset=29), Call(Attribute(Attribute(Name('self', Load(), lineno=1028, col_offset=40), 'tk', Load(), lineno=1028, col_offset=40), 'splitlist', Load(), lineno=1028, col_offset=40), [Name('string', Load(), lineno=1028, col_offset=58)], [], None, None, lineno=1028, col_offset=40)], [], None, None, lineno=1028, col_offset=25)], [], None, None, lineno=1028, col_offset=19), lineno=1028, col_offset=12)], [], lineno=1027, col_offset=8)], [], lineno=1025, col_offset=4), FunctionDef('_getboolean', arguments([Name('self', Param(), lineno=1029, col_offset=20), Name('string', Param(), lineno=1029, col_offset=26)], None, None, []), [Expr(Str('Internal function.', lineno=1030, col_offset=8), lineno=1030, col_offset=8), If(Name('string', Load(), lineno=1031, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1032, col_offset=19), 'tk', Load(), lineno=1032, col_offset=19), 'getboolean', Load(), lineno=1032, col_offset=19), [Name('string', Load(), lineno=1032, col_offset=38)], [], None, None, lineno=1032, col_offset=19), lineno=1032, col_offset=12)], [], lineno=1031, col_offset=8)], [], lineno=1029, col_offset=4), FunctionDef('_displayof', arguments([Name('self', Param(), lineno=1033, col_offset=19), Name('displayof', Param(), lineno=1033, col_offset=25)], None, None, []), [Expr(Str('Internal function.', lineno=1034, col_offset=8), lineno=1034, col_offset=8), If(Name('displayof', Load(), lineno=1035, col_offset=11), [Return(Tuple([Str('-displayof', lineno=1036, col_offset=20), Name('displayof', Load(), lineno=1036, col_offset=34)], Load(), lineno=1036, col_offset=20), lineno=1036, col_offset=12)], [], lineno=1035, col_offset=8), If(Compare(Name('displayof', Load(), lineno=1037, col_offset=11), [Is()], [Name('None', Load(), lineno=1037, col_offset=24)], lineno=1037, col_offset=11), [Return(Tuple([Str('-displayof', lineno=1038, col_offset=20), Attribute(Name('self', Load(), lineno=1038, col_offset=34), '_w', Load(), lineno=1038, col_offset=34)], Load(), lineno=1038, col_offset=20), lineno=1038, col_offset=12)], [], lineno=1037, col_offset=8), Return(Tuple([], Load(), lineno=1039, col_offset=15), lineno=1039, col_offset=8)], [], lineno=1033, col_offset=4), FunctionDef('_options', arguments([Name('self', Param(), lineno=1040, col_offset=17), Name('cnf', Param(), lineno=1040, col_offset=23), Name('kw', Param(), lineno=1040, col_offset=28)], None, None, [Name('None', Load(), lineno=1040, col_offset=33)]), [Expr(Str('Internal function.', lineno=1041, col_offset=8), lineno=1041, col_offset=8), If(Name('kw', Load(), lineno=1042, col_offset=11), [Assign([Name('cnf', Store(), lineno=1043, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=1043, col_offset=18), [Tuple([Name('cnf', Load(), lineno=1043, col_offset=29), Name('kw', Load(), lineno=1043, col_offset=34)], Load(), lineno=1043, col_offset=29)], [], None, None, lineno=1043, col_offset=18), lineno=1043, col_offset=12)], [Assign([Name('cnf', Store(), lineno=1045, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=1045, col_offset=18), [Name('cnf', Load(), lineno=1045, col_offset=28)], [], None, None, lineno=1045, col_offset=18), lineno=1045, col_offset=12)], lineno=1042, col_offset=8), Assign([Name('res', Store(), lineno=1046, col_offset=8)], Tuple([], Load(), lineno=1046, col_offset=14), lineno=1046, col_offset=8), For(Tuple([Name('k', Store(), lineno=1047, col_offset=12), Name('v', Store(), lineno=1047, col_offset=15)], Store(), lineno=1047, col_offset=12), Call(Attribute(Name('cnf', Load(), lineno=1047, col_offset=20), 'items', Load(), lineno=1047, col_offset=20), [], [], None, None, lineno=1047, col_offset=20), [If(Compare(Name('v', Load(), lineno=1048, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1048, col_offset=24)], lineno=1048, col_offset=15), [If(Compare(Subscript(Name('k', Load(), lineno=1049, col_offset=19), Index(Num(-1, lineno=1049, col_offset=22)), Load(), lineno=1049, col_offset=19), [Eq()], [Str('_', lineno=1049, col_offset=28)], lineno=1049, col_offset=19), [Assign([Name('k', Store(), lineno=1049, col_offset=33)], Subscript(Name('k', Load(), lineno=1049, col_offset=37), Slice(None, Num(-1, lineno=1049, col_offset=41), None), Load(), lineno=1049, col_offset=37), lineno=1049, col_offset=33)], [], lineno=1049, col_offset=16), If(Call(Name('hasattr', Load(), lineno=1050, col_offset=19), [Name('v', Load(), lineno=1050, col_offset=27), Str('__call__', lineno=1050, col_offset=30)], [], None, None, lineno=1050, col_offset=19), [Assign([Name('v', Store(), lineno=1051, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=1051, col_offset=24), '_register', Load(), lineno=1051, col_offset=24), [Name('v', Load(), lineno=1051, col_offset=39)], [], None, None, lineno=1051, col_offset=24), lineno=1051, col_offset=20)], [If(Call(Name('isinstance', Load(), lineno=1052, col_offset=21), [Name('v', Load(), lineno=1052, col_offset=32), Tuple([Name('tuple', Load(), lineno=1052, col_offset=36), Name('list', Load(), lineno=1052, col_offset=43)], Load(), lineno=1052, col_offset=36)], [], None, None, lineno=1052, col_offset=21), [Assign([Name('nv', Store(), lineno=1053, col_offset=20)], List([], Load(), lineno=1053, col_offset=25), lineno=1053, col_offset=20), For(Name('item', Store(), lineno=1054, col_offset=24), Name('v', Load(), lineno=1054, col_offset=32), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1055, col_offset=31), [Name('item', Load(), lineno=1055, col_offset=42), Tuple([Name('basestring', Load(), lineno=1055, col_offset=49), Name('int', Load(), lineno=1055, col_offset=61)], Load(), lineno=1055, col_offset=49)], [], None, None, lineno=1055, col_offset=31), lineno=1055, col_offset=27), [Break( lineno=1056, col_offset=28)], [If(Call(Name('isinstance', Load(), lineno=1057, col_offset=29), [Name('item', Load(), lineno=1057, col_offset=40), Name('int', Load(), lineno=1057, col_offset=46)], [], None, None, lineno=1057, col_offset=29), [Expr(Call(Attribute(Name('nv', Load(), lineno=1058, col_offset=28), 'append', Load(), lineno=1058, col_offset=28), [BinOp(Str('%d', lineno=1058, col_offset=38), Mod(), Name('item', Load(), lineno=1058, col_offset=45), lineno=1058, col_offset=38)], [], None, None, lineno=1058, col_offset=28), lineno=1058, col_offset=28)], [Expr(Call(Attribute(Name('nv', Load(), lineno=1061, col_offset=28), 'append', Load(), lineno=1061, col_offset=28), [BinOp(IfExp(Compare(Str(' ', lineno=1061, col_offset=49), [In()], [Name('item', Load(), lineno=1061, col_offset=56)], lineno=1061, col_offset=49), Str('{%s}', lineno=1061, col_offset=39), Str('%s', lineno=1061, col_offset=66), lineno=1061, col_offset=39), Mod(), Name('item', Load(), lineno=1061, col_offset=74), lineno=1061, col_offset=38)], [], None, None, lineno=1061, col_offset=28), lineno=1061, col_offset=28)], lineno=1057, col_offset=29)], lineno=1055, col_offset=24)], [Assign([Name('v', Store(), lineno=1063, col_offset=24)], Call(Attribute(Str(' ', lineno=1063, col_offset=28), 'join', Load(), lineno=1063, col_offset=28), [Name('nv', Load(), lineno=1063, col_offset=37)], [], None, None, lineno=1063, col_offset=28), lineno=1063, col_offset=24)], lineno=1054, col_offset=20)], [], lineno=1052, col_offset=21)], lineno=1050, col_offset=16), Assign([Name('res', Store(), lineno=1064, col_offset=16)], BinOp(Name('res', Load(), lineno=1064, col_offset=22), Add(), Tuple([BinOp(Str('-', lineno=1064, col_offset=29), Add(), Name('k', Load(), lineno=1064, col_offset=33), lineno=1064, col_offset=29), Name('v', Load(), lineno=1064, col_offset=36)], Load(), lineno=1064, col_offset=29), lineno=1064, col_offset=22), lineno=1064, col_offset=16)], [], lineno=1048, col_offset=12)], [], lineno=1047, col_offset=8), Return(Name('res', Load(), lineno=1065, col_offset=15), lineno=1065, col_offset=8)], [], lineno=1040, col_offset=4), FunctionDef('nametowidget', arguments([Name('self', Param(), lineno=1066, col_offset=21), Name('name', Param(), lineno=1066, col_offset=27)], None, None, []), [Expr(Str('Return the Tkinter instance of a widget identified by\n        its Tcl name NAME.', lineno=1068, col_offset=-1), lineno=1068, col_offset=-1), Assign([Name('name', Store(), lineno=1069, col_offset=8)], Call(Attribute(Call(Name('str', Load(), lineno=1069, col_offset=15), [Name('name', Load(), lineno=1069, col_offset=19)], [], None, None, lineno=1069, col_offset=15), 'split', Load(), lineno=1069, col_offset=15), [Str('.', lineno=1069, col_offset=31)], [], None, None, lineno=1069, col_offset=15), lineno=1069, col_offset=8), Assign([Name('w', Store(), lineno=1070, col_offset=8)], Name('self', Load(), lineno=1070, col_offset=12), lineno=1070, col_offset=8), If(UnaryOp(Not(), Subscript(Name('name', Load(), lineno=1072, col_offset=15), Index(Num(0, lineno=1072, col_offset=20)), Load(), lineno=1072, col_offset=15), lineno=1072, col_offset=11), [Assign([Name('w', Store(), lineno=1073, col_offset=12)], Call(Attribute(Name('w', Load(), lineno=1073, col_offset=16), '_root', Load(), lineno=1073, col_offset=16), [], [], None, None, lineno=1073, col_offset=16), lineno=1073, col_offset=12), Assign([Name('name', Store(), lineno=1074, col_offset=12)], Subscript(Name('name', Load(), lineno=1074, col_offset=19), Slice(Num(1, lineno=1074, col_offset=24), None, None), Load(), lineno=1074, col_offset=19), lineno=1074, col_offset=12)], [], lineno=1072, col_offset=8), For(Name('n', Store(), lineno=1076, col_offset=12), Name('name', Load(), lineno=1076, col_offset=17), [If(UnaryOp(Not(), Name('n', Load(), lineno=1077, col_offset=19), lineno=1077, col_offset=15), [Break( lineno=1078, col_offset=16)], [], lineno=1077, col_offset=12), Assign([Name('w', Store(), lineno=1079, col_offset=12)], Subscript(Attribute(Name('w', Load(), lineno=1079, col_offset=16), 'children', Load(), lineno=1079, col_offset=16), Index(Name('n', Load(), lineno=1079, col_offset=27)), Load(), lineno=1079, col_offset=16), lineno=1079, col_offset=12)], [], lineno=1076, col_offset=8), Return(Name('w', Load(), lineno=1081, col_offset=15), lineno=1081, col_offset=8)], [], lineno=1066, col_offset=4), Assign([Name('_nametowidget', Store(), lineno=1082, col_offset=4)], Name('nametowidget', Load(), lineno=1082, col_offset=20), lineno=1082, col_offset=4), FunctionDef('_register', arguments([Name('self', Param(), lineno=1083, col_offset=18), Name('func', Param(), lineno=1083, col_offset=24), Name('subst', Param(), lineno=1083, col_offset=30), Name('needcleanup', Param(), lineno=1083, col_offset=42)], None, None, [Name('None', Load(), lineno=1083, col_offset=36), Num(1, lineno=1083, col_offset=54)]), [Expr(Str('Return a newly created Tcl function. If this\n        function is called, the Python function FUNC will\n        be executed. An optional function SUBST can\n        be given which will be executed before FUNC.', lineno=1087, col_offset=-1), lineno=1087, col_offset=-1), Assign([Name('f', Store(), lineno=1088, col_offset=8)], Attribute(Call(Name('CallWrapper', Load(), lineno=1088, col_offset=12), [Name('func', Load(), lineno=1088, col_offset=24), Name('subst', Load(), lineno=1088, col_offset=30), Name('self', Load(), lineno=1088, col_offset=37)], [], None, None, lineno=1088, col_offset=12), '__call__', Load(), lineno=1088, col_offset=12), lineno=1088, col_offset=8), Assign([Name('name', Store(), lineno=1089, col_offset=8)], Call(Name('repr', Load(), lineno=1089, col_offset=15), [Call(Name('id', Load(), lineno=1089, col_offset=20), [Name('f', Load(), lineno=1089, col_offset=23)], [], None, None, lineno=1089, col_offset=20)], [], None, None, lineno=1089, col_offset=15), lineno=1089, col_offset=8), TryExcept([Assign([Name('func', Store(), lineno=1091, col_offset=12)], Attribute(Name('func', Load(), lineno=1091, col_offset=19), 'im_func', Load(), lineno=1091, col_offset=19), lineno=1091, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1092, col_offset=15), None, [Pass( lineno=1093, col_offset=12)], lineno=1092, col_offset=8)], [], lineno=1090, col_offset=8), TryExcept([Assign([Name('name', Store(), lineno=1095, col_offset=12)], BinOp(Name('name', Load(), lineno=1095, col_offset=19), Add(), Attribute(Name('func', Load(), lineno=1095, col_offset=26), '__name__', Load(), lineno=1095, col_offset=26), lineno=1095, col_offset=19), lineno=1095, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1096, col_offset=15), None, [Pass( lineno=1097, col_offset=12)], lineno=1096, col_offset=8)], [], lineno=1094, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1098, col_offset=8), 'tk', Load(), lineno=1098, col_offset=8), 'createcommand', Load(), lineno=1098, col_offset=8), [Name('name', Load(), lineno=1098, col_offset=30), Name('f', Load(), lineno=1098, col_offset=36)], [], None, None, lineno=1098, col_offset=8), lineno=1098, col_offset=8), If(Name('needcleanup', Load(), lineno=1099, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1100, col_offset=15), '_tclCommands', Load(), lineno=1100, col_offset=15), [Is()], [Name('None', Load(), lineno=1100, col_offset=36)], lineno=1100, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=1101, col_offset=16), '_tclCommands', Store(), lineno=1101, col_offset=16)], List([], Load(), lineno=1101, col_offset=36), lineno=1101, col_offset=16)], [], lineno=1100, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1102, col_offset=12), '_tclCommands', Load(), lineno=1102, col_offset=12), 'append', Load(), lineno=1102, col_offset=12), [Name('name', Load(), lineno=1102, col_offset=37)], [], None, None, lineno=1102, col_offset=12), lineno=1102, col_offset=12)], [], lineno=1099, col_offset=8), Return(Name('name', Load(), lineno=1103, col_offset=15), lineno=1103, col_offset=8)], [], lineno=1083, col_offset=4), Assign([Name('register', Store(), lineno=1104, col_offset=4)], Name('_register', Load(), lineno=1104, col_offset=15), lineno=1104, col_offset=4), FunctionDef('_root', arguments([Name('self', Param(), lineno=1105, col_offset=14)], None, None, []), [Expr(Str('Internal function.', lineno=1106, col_offset=8), lineno=1106, col_offset=8), Assign([Name('w', Store(), lineno=1107, col_offset=8)], Name('self', Load(), lineno=1107, col_offset=12), lineno=1107, col_offset=8), While(Attribute(Name('w', Load(), lineno=1108, col_offset=14), 'master', Load(), lineno=1108, col_offset=14), [Assign([Name('w', Store(), lineno=1108, col_offset=24)], Attribute(Name('w', Load(), lineno=1108, col_offset=28), 'master', Load(), lineno=1108, col_offset=28), lineno=1108, col_offset=24)], [], lineno=1108, col_offset=8), Return(Name('w', Load(), lineno=1109, col_offset=15), lineno=1109, col_offset=8)], [], lineno=1105, col_offset=4), Assign([Name('_subst_format', Store(), lineno=1110, col_offset=4)], Tuple([Str('%#', lineno=1110, col_offset=21), Str('%b', lineno=1110, col_offset=27), Str('%f', lineno=1110, col_offset=33), Str('%h', lineno=1110, col_offset=39), Str('%k', lineno=1110, col_offset=45), Str('%s', lineno=1111, col_offset=13), Str('%t', lineno=1111, col_offset=19), Str('%w', lineno=1111, col_offset=25), Str('%x', lineno=1111, col_offset=31), Str('%y', lineno=1111, col_offset=37), Str('%A', lineno=1112, col_offset=13), Str('%E', lineno=1112, col_offset=19), Str('%K', lineno=1112, col_offset=25), Str('%N', lineno=1112, col_offset=31), Str('%W', lineno=1112, col_offset=37), Str('%T', lineno=1112, col_offset=43), Str('%X', lineno=1112, col_offset=49), Str('%Y', lineno=1112, col_offset=55), Str('%D', lineno=1112, col_offset=61)], Load(), lineno=1110, col_offset=21), lineno=1110, col_offset=4), Assign([Name('_subst_format_str', Store(), lineno=1113, col_offset=4)], Call(Attribute(Str(' ', lineno=1113, col_offset=24), 'join', Load(), lineno=1113, col_offset=24), [Name('_subst_format', Load(), lineno=1113, col_offset=33)], [], None, None, lineno=1113, col_offset=24), lineno=1113, col_offset=4), FunctionDef('_substitute', arguments([Name('self', Param(), lineno=1114, col_offset=20)], 'args', None, []), [Expr(Str('Internal function.', lineno=1115, col_offset=8), lineno=1115, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=1116, col_offset=11), [Name('args', Load(), lineno=1116, col_offset=15)], [], None, None, lineno=1116, col_offset=11), [NotEq()], [Call(Name('len', Load(), lineno=1116, col_offset=24), [Attribute(Name('self', Load(), lineno=1116, col_offset=28), '_subst_format', Load(), lineno=1116, col_offset=28)], [], None, None, lineno=1116, col_offset=24)], lineno=1116, col_offset=11), [Return(Name('args', Load(), lineno=1116, col_offset=56), lineno=1116, col_offset=49)], [], lineno=1116, col_offset=8), Assign([Name('getboolean', Store(), lineno=1117, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1117, col_offset=21), 'tk', Load(), lineno=1117, col_offset=21), 'getboolean', Load(), lineno=1117, col_offset=21), lineno=1117, col_offset=8), Assign([Name('getint', Store(), lineno=1119, col_offset=8)], Name('int', Load(), lineno=1119, col_offset=17), lineno=1119, col_offset=8), FunctionDef('getint_event', arguments([Name('s', Param(), lineno=1120, col_offset=25)], None, None, []), [Expr(Str('Tk changed behavior in 8.4.2, returning "??" rather more often.', lineno=1121, col_offset=12), lineno=1121, col_offset=12), TryExcept([Return(Call(Name('int', Load(), lineno=1123, col_offset=23), [Name('s', Load(), lineno=1123, col_offset=27)], [], None, None, lineno=1123, col_offset=23), lineno=1123, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=1124, col_offset=19), None, [Return(Name('s', Load(), lineno=1125, col_offset=23), lineno=1125, col_offset=16)], lineno=1124, col_offset=12)], [], lineno=1122, col_offset=12)], [], lineno=1120, col_offset=8), Assign([Tuple([Name('nsign', Store(), lineno=1127, col_offset=8), Name('b', Store(), lineno=1127, col_offset=15), Name('f', Store(), lineno=1127, col_offset=18), Name('h', Store(), lineno=1127, col_offset=21), Name('k', Store(), lineno=1127, col_offset=24), Name('s', Store(), lineno=1127, col_offset=27), Name('t', Store(), lineno=1127, col_offset=30), Name('w', Store(), lineno=1127, col_offset=33), Name('x', Store(), lineno=1127, col_offset=36), Name('y', Store(), lineno=1127, col_offset=39), Name('A', Store(), lineno=1127, col_offset=42), Name('E', Store(), lineno=1127, col_offset=45), Name('K', Store(), lineno=1127, col_offset=48), Name('N', Store(), lineno=1127, col_offset=51), Name('W', Store(), lineno=1127, col_offset=54), Name('T', Store(), lineno=1127, col_offset=57), Name('X', Store(), lineno=1127, col_offset=60), Name('Y', Store(), lineno=1127, col_offset=63), Name('D', Store(), lineno=1127, col_offset=66)], Store(), lineno=1127, col_offset=8)], Name('args', Load(), lineno=1127, col_offset=70), lineno=1127, col_offset=8), Assign([Name('e', Store(), lineno=1129, col_offset=8)], Call(Name('Event', Load(), lineno=1129, col_offset=12), [], [], None, None, lineno=1129, col_offset=12), lineno=1129, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1143, col_offset=8), 'serial', Store(), lineno=1143, col_offset=8)], Call(Name('getint', Load(), lineno=1143, col_offset=19), [Name('nsign', Load(), lineno=1143, col_offset=26)], [], None, None, lineno=1143, col_offset=19), lineno=1143, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1144, col_offset=8), 'num', Store(), lineno=1144, col_offset=8)], Call(Name('getint_event', Load(), lineno=1144, col_offset=16), [Name('b', Load(), lineno=1144, col_offset=29)], [], None, None, lineno=1144, col_offset=16), lineno=1144, col_offset=8), TryExcept([Assign([Attribute(Name('e', Load(), lineno=1145, col_offset=13), 'focus', Store(), lineno=1145, col_offset=13)], Call(Name('getboolean', Load(), lineno=1145, col_offset=23), [Name('f', Load(), lineno=1145, col_offset=34)], [], None, None, lineno=1145, col_offset=23), lineno=1145, col_offset=13)], [ExceptHandler(Name('TclError', Load(), lineno=1146, col_offset=15), None, [Pass( lineno=1146, col_offset=25)], lineno=1146, col_offset=8)], [], lineno=1145, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1147, col_offset=8), 'height', Store(), lineno=1147, col_offset=8)], Call(Name('getint_event', Load(), lineno=1147, col_offset=19), [Name('h', Load(), lineno=1147, col_offset=32)], [], None, None, lineno=1147, col_offset=19), lineno=1147, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1148, col_offset=8), 'keycode', Store(), lineno=1148, col_offset=8)], Call(Name('getint_event', Load(), lineno=1148, col_offset=20), [Name('k', Load(), lineno=1148, col_offset=33)], [], None, None, lineno=1148, col_offset=20), lineno=1148, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1149, col_offset=8), 'state', Store(), lineno=1149, col_offset=8)], Call(Name('getint_event', Load(), lineno=1149, col_offset=18), [Name('s', Load(), lineno=1149, col_offset=31)], [], None, None, lineno=1149, col_offset=18), lineno=1149, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1150, col_offset=8), 'time', Store(), lineno=1150, col_offset=8)], Call(Name('getint_event', Load(), lineno=1150, col_offset=17), [Name('t', Load(), lineno=1150, col_offset=30)], [], None, None, lineno=1150, col_offset=17), lineno=1150, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1151, col_offset=8), 'width', Store(), lineno=1151, col_offset=8)], Call(Name('getint_event', Load(), lineno=1151, col_offset=18), [Name('w', Load(), lineno=1151, col_offset=31)], [], None, None, lineno=1151, col_offset=18), lineno=1151, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1152, col_offset=8), 'x', Store(), lineno=1152, col_offset=8)], Call(Name('getint_event', Load(), lineno=1152, col_offset=14), [Name('x', Load(), lineno=1152, col_offset=27)], [], None, None, lineno=1152, col_offset=14), lineno=1152, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1153, col_offset=8), 'y', Store(), lineno=1153, col_offset=8)], Call(Name('getint_event', Load(), lineno=1153, col_offset=14), [Name('y', Load(), lineno=1153, col_offset=27)], [], None, None, lineno=1153, col_offset=14), lineno=1153, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1154, col_offset=8), 'char', Store(), lineno=1154, col_offset=8)], Name('A', Load(), lineno=1154, col_offset=17), lineno=1154, col_offset=8), TryExcept([Assign([Attribute(Name('e', Load(), lineno=1155, col_offset=13), 'send_event', Store(), lineno=1155, col_offset=13)], Call(Name('getboolean', Load(), lineno=1155, col_offset=28), [Name('E', Load(), lineno=1155, col_offset=39)], [], None, None, lineno=1155, col_offset=28), lineno=1155, col_offset=13)], [ExceptHandler(Name('TclError', Load(), lineno=1156, col_offset=15), None, [Pass( lineno=1156, col_offset=25)], lineno=1156, col_offset=8)], [], lineno=1155, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1157, col_offset=8), 'keysym', Store(), lineno=1157, col_offset=8)], Name('K', Load(), lineno=1157, col_offset=19), lineno=1157, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1158, col_offset=8), 'keysym_num', Store(), lineno=1158, col_offset=8)], Call(Name('getint_event', Load(), lineno=1158, col_offset=23), [Name('N', Load(), lineno=1158, col_offset=36)], [], None, None, lineno=1158, col_offset=23), lineno=1158, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1159, col_offset=8), 'type', Store(), lineno=1159, col_offset=8)], Name('T', Load(), lineno=1159, col_offset=17), lineno=1159, col_offset=8), TryExcept([Assign([Attribute(Name('e', Load(), lineno=1161, col_offset=12), 'widget', Store(), lineno=1161, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1161, col_offset=23), '_nametowidget', Load(), lineno=1161, col_offset=23), [Name('W', Load(), lineno=1161, col_offset=42)], [], None, None, lineno=1161, col_offset=23), lineno=1161, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=1162, col_offset=15), None, [Assign([Attribute(Name('e', Load(), lineno=1163, col_offset=12), 'widget', Store(), lineno=1163, col_offset=12)], Name('W', Load(), lineno=1163, col_offset=23), lineno=1163, col_offset=12)], lineno=1162, col_offset=8)], [], lineno=1160, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1164, col_offset=8), 'x_root', Store(), lineno=1164, col_offset=8)], Call(Name('getint_event', Load(), lineno=1164, col_offset=19), [Name('X', Load(), lineno=1164, col_offset=32)], [], None, None, lineno=1164, col_offset=19), lineno=1164, col_offset=8), Assign([Attribute(Name('e', Load(), lineno=1165, col_offset=8), 'y_root', Store(), lineno=1165, col_offset=8)], Call(Name('getint_event', Load(), lineno=1165, col_offset=19), [Name('Y', Load(), lineno=1165, col_offset=32)], [], None, None, lineno=1165, col_offset=19), lineno=1165, col_offset=8), TryExcept([Assign([Attribute(Name('e', Load(), lineno=1167, col_offset=12), 'delta', Store(), lineno=1167, col_offset=12)], Call(Name('getint', Load(), lineno=1167, col_offset=22), [Name('D', Load(), lineno=1167, col_offset=29)], [], None, None, lineno=1167, col_offset=22), lineno=1167, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=1168, col_offset=15), None, [Assign([Attribute(Name('e', Load(), lineno=1169, col_offset=12), 'delta', Store(), lineno=1169, col_offset=12)], Num(0, lineno=1169, col_offset=22), lineno=1169, col_offset=12)], lineno=1168, col_offset=8)], [], lineno=1166, col_offset=8), Return(Tuple([Name('e', Load(), lineno=1170, col_offset=16)], Load(), lineno=1170, col_offset=16), lineno=1170, col_offset=8)], [], lineno=1114, col_offset=4), FunctionDef('_report_exception', arguments([Name('self', Param(), lineno=1171, col_offset=26)], None, None, []), [Expr(Str('Internal function.', lineno=1172, col_offset=8), lineno=1172, col_offset=8), Import([alias('sys', None)], lineno=1173, col_offset=8), Assign([Tuple([Name('exc', Store(), lineno=1174, col_offset=8), Name('val', Store(), lineno=1174, col_offset=13), Name('tb', Store(), lineno=1174, col_offset=18)], Store(), lineno=1174, col_offset=8)], Tuple([Attribute(Name('sys', Load(), lineno=1174, col_offset=23), 'exc_type', Load(), lineno=1174, col_offset=23), Attribute(Name('sys', Load(), lineno=1174, col_offset=37), 'exc_value', Load(), lineno=1174, col_offset=37), Attribute(Name('sys', Load(), lineno=1174, col_offset=52), 'exc_traceback', Load(), lineno=1174, col_offset=52)], Load(), lineno=1174, col_offset=23), lineno=1174, col_offset=8), Assign([Name('root', Store(), lineno=1175, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1175, col_offset=15), '_root', Load(), lineno=1175, col_offset=15), [], [], None, None, lineno=1175, col_offset=15), lineno=1175, col_offset=8), Expr(Call(Attribute(Name('root', Load(), lineno=1176, col_offset=8), 'report_callback_exception', Load(), lineno=1176, col_offset=8), [Name('exc', Load(), lineno=1176, col_offset=39), Name('val', Load(), lineno=1176, col_offset=44), Name('tb', Load(), lineno=1176, col_offset=49)], [], None, None, lineno=1176, col_offset=8), lineno=1176, col_offset=8)], [], lineno=1171, col_offset=4), FunctionDef('_configure', arguments([Name('self', Param(), lineno=1177, col_offset=19), Name('cmd', Param(), lineno=1177, col_offset=25), Name('cnf', Param(), lineno=1177, col_offset=30), Name('kw', Param(), lineno=1177, col_offset=35)], None, None, []), [Expr(Str('Internal function.', lineno=1178, col_offset=8), lineno=1178, col_offset=8), If(Name('kw', Load(), lineno=1179, col_offset=11), [Assign([Name('cnf', Store(), lineno=1180, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=1180, col_offset=18), [Tuple([Name('cnf', Load(), lineno=1180, col_offset=29), Name('kw', Load(), lineno=1180, col_offset=34)], Load(), lineno=1180, col_offset=29)], [], None, None, lineno=1180, col_offset=18), lineno=1180, col_offset=12)], [If(Name('cnf', Load(), lineno=1181, col_offset=13), [Assign([Name('cnf', Store(), lineno=1182, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=1182, col_offset=18), [Name('cnf', Load(), lineno=1182, col_offset=28)], [], None, None, lineno=1182, col_offset=18), lineno=1182, col_offset=12)], [], lineno=1181, col_offset=13)], lineno=1179, col_offset=8), If(Compare(Name('cnf', Load(), lineno=1183, col_offset=11), [Is()], [Name('None', Load(), lineno=1183, col_offset=18)], lineno=1183, col_offset=11), [Assign([Name('cnf', Store(), lineno=1184, col_offset=12)], Dict([], [], lineno=1184, col_offset=18), lineno=1184, col_offset=12), For(Name('x', Store(), lineno=1185, col_offset=16), Call(Attribute(Attribute(Name('self', Load(), lineno=1185, col_offset=21), 'tk', Load(), lineno=1185, col_offset=21), 'split', Load(), lineno=1185, col_offset=21), [Call(Attribute(Attribute(Name('self', Load(), lineno=1186, col_offset=20), 'tk', Load(), lineno=1186, col_offset=20), 'call', Load(), lineno=1186, col_offset=20), [Call(Name('_flatten', Load(), lineno=1186, col_offset=33), [Tuple([Attribute(Name('self', Load(), lineno=1186, col_offset=43), '_w', Load(), lineno=1186, col_offset=43), Name('cmd', Load(), lineno=1186, col_offset=52)], Load(), lineno=1186, col_offset=43)], [], None, None, lineno=1186, col_offset=33)], [], None, None, lineno=1186, col_offset=20)], [], None, None, lineno=1185, col_offset=21), [Assign([Subscript(Name('cnf', Load(), lineno=1187, col_offset=16), Index(Subscript(Subscript(Name('x', Load(), lineno=1187, col_offset=20), Index(Num(0, lineno=1187, col_offset=22)), Load(), lineno=1187, col_offset=20), Slice(Num(1, lineno=1187, col_offset=25), None, None), Load(), lineno=1187, col_offset=20)), Store(), lineno=1187, col_offset=16)], BinOp(Tuple([Subscript(Subscript(Name('x', Load(), lineno=1187, col_offset=33), Index(Num(0, lineno=1187, col_offset=35)), Load(), lineno=1187, col_offset=33), Slice(Num(1, lineno=1187, col_offset=38), None, None), Load(), lineno=1187, col_offset=33)], Load(), lineno=1187, col_offset=33), Add(), Subscript(Name('x', Load(), lineno=1187, col_offset=46), Slice(Num(1, lineno=1187, col_offset=48), None, None), Load(), lineno=1187, col_offset=46), lineno=1187, col_offset=32), lineno=1187, col_offset=16)], [], lineno=1185, col_offset=12), Return(Name('cnf', Load(), lineno=1188, col_offset=19), lineno=1188, col_offset=12)], [], lineno=1183, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=1189, col_offset=11), [Name('cnf', Load(), lineno=1189, col_offset=16)], [], None, None, lineno=1189, col_offset=11), [Is()], [Name('StringType', Load(), lineno=1189, col_offset=24)], lineno=1189, col_offset=11), [Assign([Name('x', Store(), lineno=1190, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1190, col_offset=16), 'tk', Load(), lineno=1190, col_offset=16), 'split', Load(), lineno=1190, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=1191, col_offset=20), 'tk', Load(), lineno=1191, col_offset=20), 'call', Load(), lineno=1191, col_offset=20), [Call(Name('_flatten', Load(), lineno=1191, col_offset=33), [Tuple([Attribute(Name('self', Load(), lineno=1191, col_offset=43), '_w', Load(), lineno=1191, col_offset=43), Name('cmd', Load(), lineno=1191, col_offset=52), BinOp(Str('-', lineno=1191, col_offset=57), Add(), Name('cnf', Load(), lineno=1191, col_offset=61), lineno=1191, col_offset=57)], Load(), lineno=1191, col_offset=43)], [], None, None, lineno=1191, col_offset=33)], [], None, None, lineno=1191, col_offset=20)], [], None, None, lineno=1190, col_offset=16), lineno=1190, col_offset=12), Return(BinOp(Tuple([Subscript(Subscript(Name('x', Load(), lineno=1192, col_offset=20), Index(Num(0, lineno=1192, col_offset=22)), Load(), lineno=1192, col_offset=20), Slice(Num(1, lineno=1192, col_offset=25), None, None), Load(), lineno=1192, col_offset=20)], Load(), lineno=1192, col_offset=20), Add(), Subscript(Name('x', Load(), lineno=1192, col_offset=33), Slice(Num(1, lineno=1192, col_offset=35), None, None), Load(), lineno=1192, col_offset=33), lineno=1192, col_offset=19), lineno=1192, col_offset=12)], [], lineno=1189, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1193, col_offset=8), 'tk', Load(), lineno=1193, col_offset=8), 'call', Load(), lineno=1193, col_offset=8), [BinOp(Call(Name('_flatten', Load(), lineno=1193, col_offset=21), [Tuple([Attribute(Name('self', Load(), lineno=1193, col_offset=31), '_w', Load(), lineno=1193, col_offset=31), Name('cmd', Load(), lineno=1193, col_offset=40)], Load(), lineno=1193, col_offset=31)], [], None, None, lineno=1193, col_offset=21), Add(), Call(Attribute(Name('self', Load(), lineno=1193, col_offset=48), '_options', Load(), lineno=1193, col_offset=48), [Name('cnf', Load(), lineno=1193, col_offset=62)], [], None, None, lineno=1193, col_offset=48), lineno=1193, col_offset=21)], [], None, None, lineno=1193, col_offset=8), lineno=1193, col_offset=8)], [], lineno=1177, col_offset=4), FunctionDef('configure', arguments([Name('self', Param(), lineno=1195, col_offset=18), Name('cnf', Param(), lineno=1195, col_offset=24)], None, 'kw', [Name('None', Load(), lineno=1195, col_offset=28)]), [Expr(Str('Configure resources of a widget.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method keys.\n        ', lineno=1201, col_offset=-1), lineno=1201, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1202, col_offset=15), '_configure', Load(), lineno=1202, col_offset=15), [Str('configure', lineno=1202, col_offset=31), Name('cnf', Load(), lineno=1202, col_offset=44), Name('kw', Load(), lineno=1202, col_offset=49)], [], None, None, lineno=1202, col_offset=15), lineno=1202, col_offset=8)], [], lineno=1195, col_offset=4), Assign([Name('config', Store(), lineno=1203, col_offset=4)], Name('configure', Load(), lineno=1203, col_offset=13), lineno=1203, col_offset=4), FunctionDef('cget', arguments([Name('self', Param(), lineno=1204, col_offset=13), Name('key', Param(), lineno=1204, col_offset=19)], None, None, []), [Expr(Str('Return the resource value for a KEY given as string.', lineno=1205, col_offset=8), lineno=1205, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1206, col_offset=15), 'tk', Load(), lineno=1206, col_offset=15), 'call', Load(), lineno=1206, col_offset=15), [Attribute(Name('self', Load(), lineno=1206, col_offset=28), '_w', Load(), lineno=1206, col_offset=28), Str('cget', lineno=1206, col_offset=37), BinOp(Str('-', lineno=1206, col_offset=45), Add(), Name('key', Load(), lineno=1206, col_offset=51), lineno=1206, col_offset=45)], [], None, None, lineno=1206, col_offset=15), lineno=1206, col_offset=8)], [], lineno=1204, col_offset=4), Assign([Name('__getitem__', Store(), lineno=1207, col_offset=4)], Name('cget', Load(), lineno=1207, col_offset=18), lineno=1207, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=1208, col_offset=20), Name('key', Param(), lineno=1208, col_offset=26), Name('value', Param(), lineno=1208, col_offset=31)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1209, col_offset=8), 'configure', Load(), lineno=1209, col_offset=8), [Dict([Name('key', Load(), lineno=1209, col_offset=24)], [Name('value', Load(), lineno=1209, col_offset=29)], lineno=1209, col_offset=23)], [], None, None, lineno=1209, col_offset=8), lineno=1209, col_offset=8)], [], lineno=1208, col_offset=4), FunctionDef('__contains__', arguments([Name('self', Param(), lineno=1210, col_offset=21), Name('key', Param(), lineno=1210, col_offset=27)], None, None, []), [Raise(Call(Name('TypeError', Load(), lineno=1211, col_offset=14), [Str("Tkinter objects don't support 'in' tests.", lineno=1211, col_offset=24)], [], None, None, lineno=1211, col_offset=14), None, None, lineno=1211, col_offset=8)], [], lineno=1210, col_offset=4), FunctionDef('keys', arguments([Name('self', Param(), lineno=1212, col_offset=13)], None, None, []), [Expr(Str('Return a list of all resource names of this widget.', lineno=1213, col_offset=8), lineno=1213, col_offset=8), Return(Call(Name('map', Load(), lineno=1214, col_offset=15), [Lambda(arguments([Name('x', Param(), lineno=1214, col_offset=26)], None, None, []), Subscript(Subscript(Name('x', Load(), lineno=1214, col_offset=29), Index(Num(0, lineno=1214, col_offset=31)), Load(), lineno=1214, col_offset=29), Slice(Num(1, lineno=1214, col_offset=34), None, None), Load(), lineno=1214, col_offset=29), lineno=1214, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=1215, col_offset=15), 'tk', Load(), lineno=1215, col_offset=15), 'split', Load(), lineno=1215, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1215, col_offset=29), 'tk', Load(), lineno=1215, col_offset=29), 'call', Load(), lineno=1215, col_offset=29), [Attribute(Name('self', Load(), lineno=1215, col_offset=42), '_w', Load(), lineno=1215, col_offset=42), Str('configure', lineno=1215, col_offset=51)], [], None, None, lineno=1215, col_offset=29)], [], None, None, lineno=1215, col_offset=15)], [], None, None, lineno=1214, col_offset=15), lineno=1214, col_offset=8)], [], lineno=1212, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=1216, col_offset=16)], None, None, []), [Expr(Str('Return the window path name of this widget.', lineno=1217, col_offset=8), lineno=1217, col_offset=8), Return(Attribute(Name('self', Load(), lineno=1218, col_offset=15), '_w', Load(), lineno=1218, col_offset=15), lineno=1218, col_offset=8)], [], lineno=1216, col_offset=4), Assign([Name('_noarg_', Store(), lineno=1220, col_offset=4)], List([Str('_noarg_', lineno=1220, col_offset=15)], Load(), lineno=1220, col_offset=14), lineno=1220, col_offset=4), FunctionDef('pack_propagate', arguments([Name('self', Param(), lineno=1221, col_offset=23), Name('flag', Param(), lineno=1221, col_offset=29)], None, None, [Name('_noarg_', Load(), lineno=1221, col_offset=34)]), [Expr(Str('Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given the current setting will be returned.\n        ', lineno=1227, col_offset=-1), lineno=1227, col_offset=-1), If(Compare(Name('flag', Load(), lineno=1228, col_offset=11), [Is()], [Attribute(Name('Misc', Load(), lineno=1228, col_offset=19), '_noarg_', Load(), lineno=1228, col_offset=19)], lineno=1228, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1229, col_offset=19), '_getboolean', Load(), lineno=1229, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=1229, col_offset=36), 'tk', Load(), lineno=1229, col_offset=36), 'call', Load(), lineno=1229, col_offset=36), [Str('pack', lineno=1230, col_offset=16), Str('propagate', lineno=1230, col_offset=24), Attribute(Name('self', Load(), lineno=1230, col_offset=37), '_w', Load(), lineno=1230, col_offset=37)], [], None, None, lineno=1229, col_offset=36)], [], None, None, lineno=1229, col_offset=19), lineno=1229, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1232, col_offset=12), 'tk', Load(), lineno=1232, col_offset=12), 'call', Load(), lineno=1232, col_offset=12), [Str('pack', lineno=1232, col_offset=25), Str('propagate', lineno=1232, col_offset=33), Attribute(Name('self', Load(), lineno=1232, col_offset=46), '_w', Load(), lineno=1232, col_offset=46), Name('flag', Load(), lineno=1232, col_offset=55)], [], None, None, lineno=1232, col_offset=12), lineno=1232, col_offset=12)], lineno=1228, col_offset=8)], [], lineno=1221, col_offset=4), Assign([Name('propagate', Store(), lineno=1233, col_offset=4)], Name('pack_propagate', Load(), lineno=1233, col_offset=16), lineno=1233, col_offset=4), FunctionDef('pack_slaves', arguments([Name('self', Param(), lineno=1234, col_offset=20)], None, None, []), [Expr(Str('Return a list of all slaves of this widget\n        in its packing order.', lineno=1236, col_offset=-1), lineno=1236, col_offset=-1), Return(Call(Name('map', Load(), lineno=1237, col_offset=15), [Attribute(Name('self', Load(), lineno=1237, col_offset=19), '_nametowidget', Load(), lineno=1237, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=1238, col_offset=15), 'tk', Load(), lineno=1238, col_offset=15), 'splitlist', Load(), lineno=1238, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1239, col_offset=19), 'tk', Load(), lineno=1239, col_offset=19), 'call', Load(), lineno=1239, col_offset=19), [Str('pack', lineno=1239, col_offset=32), Str('slaves', lineno=1239, col_offset=40), Attribute(Name('self', Load(), lineno=1239, col_offset=50), '_w', Load(), lineno=1239, col_offset=50)], [], None, None, lineno=1239, col_offset=19)], [], None, None, lineno=1238, col_offset=15)], [], None, None, lineno=1237, col_offset=15), lineno=1237, col_offset=8)], [], lineno=1234, col_offset=4), Assign([Name('slaves', Store(), lineno=1240, col_offset=4)], Name('pack_slaves', Load(), lineno=1240, col_offset=13), lineno=1240, col_offset=4), FunctionDef('place_slaves', arguments([Name('self', Param(), lineno=1242, col_offset=21)], None, None, []), [Expr(Str('Return a list of all slaves of this widget\n        in its packing order.', lineno=1244, col_offset=-1), lineno=1244, col_offset=-1), Return(Call(Name('map', Load(), lineno=1245, col_offset=15), [Attribute(Name('self', Load(), lineno=1245, col_offset=19), '_nametowidget', Load(), lineno=1245, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=1246, col_offset=15), 'tk', Load(), lineno=1246, col_offset=15), 'splitlist', Load(), lineno=1246, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1247, col_offset=19), 'tk', Load(), lineno=1247, col_offset=19), 'call', Load(), lineno=1247, col_offset=19), [Str('place', lineno=1248, col_offset=23), Str('slaves', lineno=1248, col_offset=32), Attribute(Name('self', Load(), lineno=1248, col_offset=42), '_w', Load(), lineno=1248, col_offset=42)], [], None, None, lineno=1247, col_offset=19)], [], None, None, lineno=1246, col_offset=15)], [], None, None, lineno=1245, col_offset=15), lineno=1245, col_offset=8)], [], lineno=1242, col_offset=4), FunctionDef('grid_bbox', arguments([Name('self', Param(), lineno=1250, col_offset=18), Name('column', Param(), lineno=1250, col_offset=24), Name('row', Param(), lineno=1250, col_offset=37), Name('col2', Param(), lineno=1250, col_offset=47), Name('row2', Param(), lineno=1250, col_offset=58)], None, None, [Name('None', Load(), lineno=1250, col_offset=31), Name('None', Load(), lineno=1250, col_offset=41), Name('None', Load(), lineno=1250, col_offset=52), Name('None', Load(), lineno=1250, col_offset=63)]), [Expr(Str('Return a tuple of integer coordinates for the bounding\n        box of this widget controlled by the geometry manager grid.\n\n        If COLUMN, ROW is given the bounding box applies from\n        the cell with row and column 0 to the specified\n        cell. If COL2 and ROW2 are given the bounding box\n        starts at that cell.\n\n        The returned integers specify the offset of the upper left\n        corner in the master widget and the width and height.\n        ', lineno=1261, col_offset=-1), lineno=1261, col_offset=-1), Assign([Name('args', Store(), lineno=1262, col_offset=8)], Tuple([Str('grid', lineno=1262, col_offset=16), Str('bbox', lineno=1262, col_offset=24), Attribute(Name('self', Load(), lineno=1262, col_offset=32), '_w', Load(), lineno=1262, col_offset=32)], Load(), lineno=1262, col_offset=16), lineno=1262, col_offset=8), If(BoolOp(And(), [Compare(Name('column', Load(), lineno=1263, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1263, col_offset=25)], lineno=1263, col_offset=11), Compare(Name('row', Load(), lineno=1263, col_offset=34), [IsNot()], [Name('None', Load(), lineno=1263, col_offset=45)], lineno=1263, col_offset=34)], lineno=1263, col_offset=11), [Assign([Name('args', Store(), lineno=1264, col_offset=12)], BinOp(Name('args', Load(), lineno=1264, col_offset=19), Add(), Tuple([Name('column', Load(), lineno=1264, col_offset=27), Name('row', Load(), lineno=1264, col_offset=35)], Load(), lineno=1264, col_offset=27), lineno=1264, col_offset=19), lineno=1264, col_offset=12)], [], lineno=1263, col_offset=8), If(BoolOp(And(), [Compare(Name('col2', Load(), lineno=1265, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1265, col_offset=23)], lineno=1265, col_offset=11), Compare(Name('row2', Load(), lineno=1265, col_offset=32), [IsNot()], [Name('None', Load(), lineno=1265, col_offset=44)], lineno=1265, col_offset=32)], lineno=1265, col_offset=11), [Assign([Name('args', Store(), lineno=1266, col_offset=12)], BinOp(Name('args', Load(), lineno=1266, col_offset=19), Add(), Tuple([Name('col2', Load(), lineno=1266, col_offset=27), Name('row2', Load(), lineno=1266, col_offset=33)], Load(), lineno=1266, col_offset=27), lineno=1266, col_offset=19), lineno=1266, col_offset=12)], [], lineno=1265, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1267, col_offset=15), '_getints', Load(), lineno=1267, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1267, col_offset=29), 'tk', Load(), lineno=1267, col_offset=29), 'call', Load(), lineno=1267, col_offset=29), [], [], Name('args', Load(), lineno=1267, col_offset=43), None, lineno=1267, col_offset=29)], [], None, None, lineno=1267, col_offset=15), Name('None', Load(), lineno=1267, col_offset=53)], lineno=1267, col_offset=15), lineno=1267, col_offset=8)], [], lineno=1250, col_offset=4), Assign([Name('bbox', Store(), lineno=1269, col_offset=4)], Name('grid_bbox', Load(), lineno=1269, col_offset=11), lineno=1269, col_offset=4), FunctionDef('_grid_configure', arguments([Name('self', Param(), lineno=1270, col_offset=24), Name('command', Param(), lineno=1270, col_offset=30), Name('index', Param(), lineno=1270, col_offset=39), Name('cnf', Param(), lineno=1270, col_offset=46), Name('kw', Param(), lineno=1270, col_offset=51)], None, None, []), [Expr(Str('Internal function.', lineno=1271, col_offset=8), lineno=1271, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('type', Load(), lineno=1272, col_offset=11), [Name('cnf', Load(), lineno=1272, col_offset=16)], [], None, None, lineno=1272, col_offset=11), [Is()], [Name('StringType', Load(), lineno=1272, col_offset=24)], lineno=1272, col_offset=11), UnaryOp(Not(), Name('kw', Load(), lineno=1272, col_offset=43), lineno=1272, col_offset=39)], lineno=1272, col_offset=11), [If(Compare(Subscript(Name('cnf', Load(), lineno=1273, col_offset=15), Slice(Num(-1, lineno=1273, col_offset=20), None, None), Load(), lineno=1273, col_offset=15), [Eq()], [Str('_', lineno=1273, col_offset=27)], lineno=1273, col_offset=15), [Assign([Name('cnf', Store(), lineno=1274, col_offset=16)], Subscript(Name('cnf', Load(), lineno=1274, col_offset=22), Slice(None, Num(-1, lineno=1274, col_offset=28), None), Load(), lineno=1274, col_offset=22), lineno=1274, col_offset=16)], [], lineno=1273, col_offset=12), If(Compare(Subscript(Name('cnf', Load(), lineno=1275, col_offset=15), Slice(None, Num(1, lineno=1275, col_offset=20), None), Load(), lineno=1275, col_offset=15), [NotEq()], [Str('-', lineno=1275, col_offset=26)], lineno=1275, col_offset=15), [Assign([Name('cnf', Store(), lineno=1276, col_offset=16)], BinOp(Str('-', lineno=1276, col_offset=22), Add(), Name('cnf', Load(), lineno=1276, col_offset=26), lineno=1276, col_offset=22), lineno=1276, col_offset=16)], [], lineno=1275, col_offset=12), Assign([Name('options', Store(), lineno=1277, col_offset=12)], Tuple([Name('cnf', Load(), lineno=1277, col_offset=23)], Load(), lineno=1277, col_offset=23), lineno=1277, col_offset=12)], [Assign([Name('options', Store(), lineno=1279, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1279, col_offset=22), '_options', Load(), lineno=1279, col_offset=22), [Name('cnf', Load(), lineno=1279, col_offset=36), Name('kw', Load(), lineno=1279, col_offset=41)], [], None, None, lineno=1279, col_offset=22), lineno=1279, col_offset=12)], lineno=1272, col_offset=8), If(UnaryOp(Not(), Name('options', Load(), lineno=1280, col_offset=15), lineno=1280, col_offset=11), [Assign([Name('res', Store(), lineno=1281, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1281, col_offset=18), 'tk', Load(), lineno=1281, col_offset=18), 'call', Load(), lineno=1281, col_offset=18), [Str('grid', lineno=1281, col_offset=31), Name('command', Load(), lineno=1282, col_offset=23), Attribute(Name('self', Load(), lineno=1282, col_offset=32), '_w', Load(), lineno=1282, col_offset=32), Name('index', Load(), lineno=1282, col_offset=41)], [], None, None, lineno=1281, col_offset=18), lineno=1281, col_offset=12), Assign([Name('words', Store(), lineno=1283, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1283, col_offset=20), 'tk', Load(), lineno=1283, col_offset=20), 'splitlist', Load(), lineno=1283, col_offset=20), [Name('res', Load(), lineno=1283, col_offset=38)], [], None, None, lineno=1283, col_offset=20), lineno=1283, col_offset=12), Assign([Name('dict', Store(), lineno=1284, col_offset=12)], Dict([], [], lineno=1284, col_offset=19), lineno=1284, col_offset=12), For(Name('i', Store(), lineno=1285, col_offset=16), Call(Name('range', Load(), lineno=1285, col_offset=21), [Num(0, lineno=1285, col_offset=27), Call(Name('len', Load(), lineno=1285, col_offset=30), [Name('words', Load(), lineno=1285, col_offset=34)], [], None, None, lineno=1285, col_offset=30), Num(2, lineno=1285, col_offset=42)], [], None, None, lineno=1285, col_offset=21), [Assign([Name('key', Store(), lineno=1286, col_offset=16)], Subscript(Subscript(Name('words', Load(), lineno=1286, col_offset=22), Index(Name('i', Load(), lineno=1286, col_offset=28)), Load(), lineno=1286, col_offset=22), Slice(Num(1, lineno=1286, col_offset=31), None, None), Load(), lineno=1286, col_offset=22), lineno=1286, col_offset=16), Assign([Name('value', Store(), lineno=1287, col_offset=16)], Subscript(Name('words', Load(), lineno=1287, col_offset=24), Index(BinOp(Name('i', Load(), lineno=1287, col_offset=30), Add(), Num(1, lineno=1287, col_offset=32), lineno=1287, col_offset=30)), Load(), lineno=1287, col_offset=24), lineno=1287, col_offset=16), If(UnaryOp(Not(), Name('value', Load(), lineno=1288, col_offset=23), lineno=1288, col_offset=19), [Assign([Name('value', Store(), lineno=1289, col_offset=20)], Name('None', Load(), lineno=1289, col_offset=28), lineno=1289, col_offset=20)], [If(Compare(Str('.', lineno=1290, col_offset=21), [In()], [Name('value', Load(), lineno=1290, col_offset=28)], lineno=1290, col_offset=21), [Assign([Name('value', Store(), lineno=1291, col_offset=20)], Call(Name('getdouble', Load(), lineno=1291, col_offset=28), [Name('value', Load(), lineno=1291, col_offset=38)], [], None, None, lineno=1291, col_offset=28), lineno=1291, col_offset=20)], [Assign([Name('value', Store(), lineno=1293, col_offset=20)], Call(Name('getint', Load(), lineno=1293, col_offset=28), [Name('value', Load(), lineno=1293, col_offset=35)], [], None, None, lineno=1293, col_offset=28), lineno=1293, col_offset=20)], lineno=1290, col_offset=21)], lineno=1288, col_offset=16), Assign([Subscript(Name('dict', Load(), lineno=1294, col_offset=16), Index(Name('key', Load(), lineno=1294, col_offset=21)), Store(), lineno=1294, col_offset=16)], Name('value', Load(), lineno=1294, col_offset=28), lineno=1294, col_offset=16)], [], lineno=1285, col_offset=12), Return(Name('dict', Load(), lineno=1295, col_offset=19), lineno=1295, col_offset=12)], [], lineno=1280, col_offset=8), Assign([Name('res', Store(), lineno=1296, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1296, col_offset=14), 'tk', Load(), lineno=1296, col_offset=14), 'call', Load(), lineno=1296, col_offset=14), [BinOp(Tuple([Str('grid', lineno=1297, col_offset=19), Name('command', Load(), lineno=1297, col_offset=27), Attribute(Name('self', Load(), lineno=1297, col_offset=36), '_w', Load(), lineno=1297, col_offset=36), Name('index', Load(), lineno=1297, col_offset=45)], Load(), lineno=1297, col_offset=19), Add(), Name('options', Load(), lineno=1298, col_offset=20), lineno=1297, col_offset=18)], [], None, None, lineno=1296, col_offset=14), lineno=1296, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=1299, col_offset=11), [Name('options', Load(), lineno=1299, col_offset=15)], [], None, None, lineno=1299, col_offset=11), [Eq()], [Num(1, lineno=1299, col_offset=27)], lineno=1299, col_offset=11), [If(UnaryOp(Not(), Name('res', Load(), lineno=1300, col_offset=19), lineno=1300, col_offset=15), [Return(Name('None', Load(), lineno=1300, col_offset=31), lineno=1300, col_offset=24)], [], lineno=1300, col_offset=12), If(Compare(Str('.', lineno=1302, col_offset=15), [In()], [Name('res', Load(), lineno=1302, col_offset=22)], lineno=1302, col_offset=15), [Return(Call(Name('getdouble', Load(), lineno=1302, col_offset=34), [Name('res', Load(), lineno=1302, col_offset=44)], [], None, None, lineno=1302, col_offset=34), lineno=1302, col_offset=27)], [], lineno=1302, col_offset=12), Return(Call(Name('getint', Load(), lineno=1303, col_offset=19), [Name('res', Load(), lineno=1303, col_offset=26)], [], None, None, lineno=1303, col_offset=19), lineno=1303, col_offset=12)], [], lineno=1299, col_offset=8)], [], lineno=1270, col_offset=4), FunctionDef('grid_columnconfigure', arguments([Name('self', Param(), lineno=1304, col_offset=29), Name('index', Param(), lineno=1304, col_offset=35), Name('cnf', Param(), lineno=1304, col_offset=42)], None, 'kw', [Dict([], [], lineno=1304, col_offset=46)]), [Expr(Str('Configure column INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the column),\n        weight (how much does additional space propagate to this column)\n        and pad (how much space to let additionally).', lineno=1309, col_offset=-1), lineno=1309, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1310, col_offset=15), '_grid_configure', Load(), lineno=1310, col_offset=15), [Str('columnconfigure', lineno=1310, col_offset=36), Name('index', Load(), lineno=1310, col_offset=55), Name('cnf', Load(), lineno=1310, col_offset=62), Name('kw', Load(), lineno=1310, col_offset=67)], [], None, None, lineno=1310, col_offset=15), lineno=1310, col_offset=8)], [], lineno=1304, col_offset=4), Assign([Name('columnconfigure', Store(), lineno=1311, col_offset=4)], Name('grid_columnconfigure', Load(), lineno=1311, col_offset=22), lineno=1311, col_offset=4), FunctionDef('grid_location', arguments([Name('self', Param(), lineno=1312, col_offset=22), Name('x', Param(), lineno=1312, col_offset=28), Name('y', Param(), lineno=1312, col_offset=31)], None, None, []), [Expr(Str('Return a tuple of column and row which identify the cell\n        at which the pixel at position X and Y inside the master\n        widget is located.', lineno=1315, col_offset=-1), lineno=1315, col_offset=-1), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1316, col_offset=15), '_getints', Load(), lineno=1316, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1317, col_offset=12), 'tk', Load(), lineno=1317, col_offset=12), 'call', Load(), lineno=1317, col_offset=12), [Str('grid', lineno=1318, col_offset=16), Str('location', lineno=1318, col_offset=24), Attribute(Name('self', Load(), lineno=1318, col_offset=36), '_w', Load(), lineno=1318, col_offset=36), Name('x', Load(), lineno=1318, col_offset=45), Name('y', Load(), lineno=1318, col_offset=48)], [], None, None, lineno=1317, col_offset=12)], [], None, None, lineno=1316, col_offset=15), Name('None', Load(), lineno=1318, col_offset=55)], lineno=1316, col_offset=15), lineno=1316, col_offset=8)], [], lineno=1312, col_offset=4), FunctionDef('grid_propagate', arguments([Name('self', Param(), lineno=1319, col_offset=23), Name('flag', Param(), lineno=1319, col_offset=29)], None, None, [Name('_noarg_', Load(), lineno=1319, col_offset=34)]), [Expr(Str('Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given, the current setting will be returned.\n        ', lineno=1325, col_offset=-1), lineno=1325, col_offset=-1), If(Compare(Name('flag', Load(), lineno=1326, col_offset=11), [Is()], [Attribute(Name('Misc', Load(), lineno=1326, col_offset=19), '_noarg_', Load(), lineno=1326, col_offset=19)], lineno=1326, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1327, col_offset=19), '_getboolean', Load(), lineno=1327, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=1327, col_offset=36), 'tk', Load(), lineno=1327, col_offset=36), 'call', Load(), lineno=1327, col_offset=36), [Str('grid', lineno=1328, col_offset=16), Str('propagate', lineno=1328, col_offset=24), Attribute(Name('self', Load(), lineno=1328, col_offset=37), '_w', Load(), lineno=1328, col_offset=37)], [], None, None, lineno=1327, col_offset=36)], [], None, None, lineno=1327, col_offset=19), lineno=1327, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1330, col_offset=12), 'tk', Load(), lineno=1330, col_offset=12), 'call', Load(), lineno=1330, col_offset=12), [Str('grid', lineno=1330, col_offset=25), Str('propagate', lineno=1330, col_offset=33), Attribute(Name('self', Load(), lineno=1330, col_offset=46), '_w', Load(), lineno=1330, col_offset=46), Name('flag', Load(), lineno=1330, col_offset=55)], [], None, None, lineno=1330, col_offset=12), lineno=1330, col_offset=12)], lineno=1326, col_offset=8)], [], lineno=1319, col_offset=4), FunctionDef('grid_rowconfigure', arguments([Name('self', Param(), lineno=1331, col_offset=26), Name('index', Param(), lineno=1331, col_offset=32), Name('cnf', Param(), lineno=1331, col_offset=39)], None, 'kw', [Dict([], [], lineno=1331, col_offset=43)]), [Expr(Str('Configure row INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the row),\n        weight (how much does additional space propagate to this row)\n        and pad (how much space to let additionally).', lineno=1336, col_offset=-1), lineno=1336, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1337, col_offset=15), '_grid_configure', Load(), lineno=1337, col_offset=15), [Str('rowconfigure', lineno=1337, col_offset=36), Name('index', Load(), lineno=1337, col_offset=52), Name('cnf', Load(), lineno=1337, col_offset=59), Name('kw', Load(), lineno=1337, col_offset=64)], [], None, None, lineno=1337, col_offset=15), lineno=1337, col_offset=8)], [], lineno=1331, col_offset=4), Assign([Name('rowconfigure', Store(), lineno=1338, col_offset=4)], Name('grid_rowconfigure', Load(), lineno=1338, col_offset=19), lineno=1338, col_offset=4), FunctionDef('grid_size', arguments([Name('self', Param(), lineno=1339, col_offset=18)], None, None, []), [Expr(Str('Return a tuple of the number of column and rows in the grid.', lineno=1340, col_offset=8), lineno=1340, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1341, col_offset=15), '_getints', Load(), lineno=1341, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1342, col_offset=12), 'tk', Load(), lineno=1342, col_offset=12), 'call', Load(), lineno=1342, col_offset=12), [Str('grid', lineno=1342, col_offset=25), Str('size', lineno=1342, col_offset=33), Attribute(Name('self', Load(), lineno=1342, col_offset=41), '_w', Load(), lineno=1342, col_offset=41)], [], None, None, lineno=1342, col_offset=12)], [], None, None, lineno=1341, col_offset=15), Name('None', Load(), lineno=1342, col_offset=54)], lineno=1341, col_offset=15), lineno=1341, col_offset=8)], [], lineno=1339, col_offset=4), Assign([Name('size', Store(), lineno=1343, col_offset=4)], Name('grid_size', Load(), lineno=1343, col_offset=11), lineno=1343, col_offset=4), FunctionDef('grid_slaves', arguments([Name('self', Param(), lineno=1344, col_offset=20), Name('row', Param(), lineno=1344, col_offset=26), Name('column', Param(), lineno=1344, col_offset=36)], None, None, [Name('None', Load(), lineno=1344, col_offset=30), Name('None', Load(), lineno=1344, col_offset=43)]), [Expr(Str('Return a list of all slaves of this widget\n        in its packing order.', lineno=1346, col_offset=-1), lineno=1346, col_offset=-1), Assign([Name('args', Store(), lineno=1347, col_offset=8)], Tuple([], Load(), lineno=1347, col_offset=15), lineno=1347, col_offset=8), If(Compare(Name('row', Load(), lineno=1348, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1348, col_offset=22)], lineno=1348, col_offset=11), [Assign([Name('args', Store(), lineno=1349, col_offset=12)], BinOp(Name('args', Load(), lineno=1349, col_offset=19), Add(), Tuple([Str('-row', lineno=1349, col_offset=27), Name('row', Load(), lineno=1349, col_offset=35)], Load(), lineno=1349, col_offset=27), lineno=1349, col_offset=19), lineno=1349, col_offset=12)], [], lineno=1348, col_offset=8), If(Compare(Name('column', Load(), lineno=1350, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1350, col_offset=25)], lineno=1350, col_offset=11), [Assign([Name('args', Store(), lineno=1351, col_offset=12)], BinOp(Name('args', Load(), lineno=1351, col_offset=19), Add(), Tuple([Str('-column', lineno=1351, col_offset=27), Name('column', Load(), lineno=1351, col_offset=38)], Load(), lineno=1351, col_offset=27), lineno=1351, col_offset=19), lineno=1351, col_offset=12)], [], lineno=1350, col_offset=8), Return(Call(Name('map', Load(), lineno=1352, col_offset=15), [Attribute(Name('self', Load(), lineno=1352, col_offset=19), '_nametowidget', Load(), lineno=1352, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=1353, col_offset=15), 'tk', Load(), lineno=1353, col_offset=15), 'splitlist', Load(), lineno=1353, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1353, col_offset=33), 'tk', Load(), lineno=1353, col_offset=33), 'call', Load(), lineno=1353, col_offset=33), [BinOp(Tuple([Str('grid', lineno=1354, col_offset=20), Str('slaves', lineno=1354, col_offset=28), Attribute(Name('self', Load(), lineno=1354, col_offset=38), '_w', Load(), lineno=1354, col_offset=38)], Load(), lineno=1354, col_offset=20), Add(), Name('args', Load(), lineno=1354, col_offset=49), lineno=1354, col_offset=19)], [], None, None, lineno=1353, col_offset=33)], [], None, None, lineno=1353, col_offset=15)], [], None, None, lineno=1352, col_offset=15), lineno=1352, col_offset=8)], [], lineno=1344, col_offset=4), FunctionDef('event_add', arguments([Name('self', Param(), lineno=1359, col_offset=18), Name('virtual', Param(), lineno=1359, col_offset=24)], 'sequences', None, []), [Expr(Str('Bind a virtual event VIRTUAL (of the form <<Name>>)\n        to an event SEQUENCE such that the virtual event is triggered\n        whenever SEQUENCE occurs.', lineno=1362, col_offset=-1), lineno=1362, col_offset=-1), Assign([Name('args', Store(), lineno=1363, col_offset=8)], BinOp(Tuple([Str('event', lineno=1363, col_offset=16), Str('add', lineno=1363, col_offset=25), Name('virtual', Load(), lineno=1363, col_offset=32)], Load(), lineno=1363, col_offset=16), Add(), Name('sequences', Load(), lineno=1363, col_offset=43), lineno=1363, col_offset=15), lineno=1363, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1364, col_offset=8), 'tk', Load(), lineno=1364, col_offset=8), 'call', Load(), lineno=1364, col_offset=8), [Name('args', Load(), lineno=1364, col_offset=21)], [], None, None, lineno=1364, col_offset=8), lineno=1364, col_offset=8)], [], lineno=1359, col_offset=4), FunctionDef('event_delete', arguments([Name('self', Param(), lineno=1366, col_offset=21), Name('virtual', Param(), lineno=1366, col_offset=27)], 'sequences', None, []), [Expr(Str('Unbind a virtual event VIRTUAL from SEQUENCE.', lineno=1367, col_offset=8), lineno=1367, col_offset=8), Assign([Name('args', Store(), lineno=1368, col_offset=8)], BinOp(Tuple([Str('event', lineno=1368, col_offset=16), Str('delete', lineno=1368, col_offset=25), Name('virtual', Load(), lineno=1368, col_offset=35)], Load(), lineno=1368, col_offset=16), Add(), Name('sequences', Load(), lineno=1368, col_offset=46), lineno=1368, col_offset=15), lineno=1368, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1369, col_offset=8), 'tk', Load(), lineno=1369, col_offset=8), 'call', Load(), lineno=1369, col_offset=8), [Name('args', Load(), lineno=1369, col_offset=21)], [], None, None, lineno=1369, col_offset=8), lineno=1369, col_offset=8)], [], lineno=1366, col_offset=4), FunctionDef('event_generate', arguments([Name('self', Param(), lineno=1371, col_offset=23), Name('sequence', Param(), lineno=1371, col_offset=29)], None, 'kw', []), [Expr(Str('Generate an event SEQUENCE. Additional\n        keyword arguments specify parameter of the event\n        (e.g. x, y, rootx, rooty).', lineno=1374, col_offset=-1), lineno=1374, col_offset=-1), Assign([Name('args', Store(), lineno=1375, col_offset=8)], Tuple([Str('event', lineno=1375, col_offset=16), Str('generate', lineno=1375, col_offset=25), Attribute(Name('self', Load(), lineno=1375, col_offset=37), '_w', Load(), lineno=1375, col_offset=37), Name('sequence', Load(), lineno=1375, col_offset=46)], Load(), lineno=1375, col_offset=16), lineno=1375, col_offset=8), For(Tuple([Name('k', Store(), lineno=1376, col_offset=12), Name('v', Store(), lineno=1376, col_offset=15)], Store(), lineno=1376, col_offset=12), Call(Attribute(Name('kw', Load(), lineno=1376, col_offset=20), 'items', Load(), lineno=1376, col_offset=20), [], [], None, None, lineno=1376, col_offset=20), [Assign([Name('args', Store(), lineno=1377, col_offset=12)], BinOp(Name('args', Load(), lineno=1377, col_offset=19), Add(), Tuple([BinOp(Str('-%s', lineno=1377, col_offset=27), Mod(), Name('k', Load(), lineno=1377, col_offset=35), lineno=1377, col_offset=27), Call(Name('str', Load(), lineno=1377, col_offset=38), [Name('v', Load(), lineno=1377, col_offset=42)], [], None, None, lineno=1377, col_offset=38)], Load(), lineno=1377, col_offset=27), lineno=1377, col_offset=19), lineno=1377, col_offset=12)], [], lineno=1376, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1378, col_offset=8), 'tk', Load(), lineno=1378, col_offset=8), 'call', Load(), lineno=1378, col_offset=8), [Name('args', Load(), lineno=1378, col_offset=21)], [], None, None, lineno=1378, col_offset=8), lineno=1378, col_offset=8)], [], lineno=1371, col_offset=4), FunctionDef('event_info', arguments([Name('self', Param(), lineno=1380, col_offset=19), Name('virtual', Param(), lineno=1380, col_offset=25)], None, None, [Name('None', Load(), lineno=1380, col_offset=33)]), [Expr(Str('Return a list of all virtual events or the information\n        about the SEQUENCE bound to the virtual event VIRTUAL.', lineno=1382, col_offset=-1), lineno=1382, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1383, col_offset=15), 'tk', Load(), lineno=1383, col_offset=15), 'splitlist', Load(), lineno=1383, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1384, col_offset=12), 'tk', Load(), lineno=1384, col_offset=12), 'call', Load(), lineno=1384, col_offset=12), [Str('event', lineno=1384, col_offset=25), Str('info', lineno=1384, col_offset=34), Name('virtual', Load(), lineno=1384, col_offset=42)], [], None, None, lineno=1384, col_offset=12)], [], None, None, lineno=1383, col_offset=15), lineno=1383, col_offset=8)], [], lineno=1380, col_offset=4), FunctionDef('image_names', arguments([Name('self', Param(), lineno=1388, col_offset=20)], None, None, []), [Expr(Str('Return a list of all existing image names.', lineno=1389, col_offset=8), lineno=1389, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1390, col_offset=15), 'tk', Load(), lineno=1390, col_offset=15), 'call', Load(), lineno=1390, col_offset=15), [Str('image', lineno=1390, col_offset=28), Str('names', lineno=1390, col_offset=37)], [], None, None, lineno=1390, col_offset=15), lineno=1390, col_offset=8)], [], lineno=1388, col_offset=4), FunctionDef('image_types', arguments([Name('self', Param(), lineno=1392, col_offset=20)], None, None, []), [Expr(Str('Return a list of all available image types (e.g. phote bitmap).', lineno=1393, col_offset=8), lineno=1393, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1394, col_offset=15), 'tk', Load(), lineno=1394, col_offset=15), 'call', Load(), lineno=1394, col_offset=15), [Str('image', lineno=1394, col_offset=28), Str('types', lineno=1394, col_offset=37)], [], None, None, lineno=1394, col_offset=15), lineno=1394, col_offset=8)], [], lineno=1392, col_offset=4)], [], lineno=336, col_offset=0), ClassDef('CallWrapper', [], [Expr(Str('Internal class. Stores function to call when some user\n    defined Tcl function is called e.g. after an event occurred.', lineno=1399, col_offset=-1), lineno=1399, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1400, col_offset=17), Name('func', Param(), lineno=1400, col_offset=23), Name('subst', Param(), lineno=1400, col_offset=29), Name('widget', Param(), lineno=1400, col_offset=36)], None, None, []), [Expr(Str('Store FUNC, SUBST and WIDGET as members.', lineno=1401, col_offset=8), lineno=1401, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1402, col_offset=8), 'func', Store(), lineno=1402, col_offset=8)], Name('func', Load(), lineno=1402, col_offset=20), lineno=1402, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1403, col_offset=8), 'subst', Store(), lineno=1403, col_offset=8)], Name('subst', Load(), lineno=1403, col_offset=21), lineno=1403, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1404, col_offset=8), 'widget', Store(), lineno=1404, col_offset=8)], Name('widget', Load(), lineno=1404, col_offset=22), lineno=1404, col_offset=8)], [], lineno=1400, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=1405, col_offset=17)], 'args', None, []), [Expr(Str('Apply first function SUBST to arguments, than FUNC.', lineno=1406, col_offset=8), lineno=1406, col_offset=8), TryExcept([If(Attribute(Name('self', Load(), lineno=1408, col_offset=15), 'subst', Load(), lineno=1408, col_offset=15), [Assign([Name('args', Store(), lineno=1409, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1409, col_offset=23), 'subst', Load(), lineno=1409, col_offset=23), [], [], Name('args', Load(), lineno=1409, col_offset=35), None, lineno=1409, col_offset=23), lineno=1409, col_offset=16)], [], lineno=1408, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=1410, col_offset=19), 'func', Load(), lineno=1410, col_offset=19), [], [], Name('args', Load(), lineno=1410, col_offset=30), None, lineno=1410, col_offset=19), lineno=1410, col_offset=12)], [ExceptHandler(Name('SystemExit', Load(), lineno=1411, col_offset=15), Name('msg', Store(), lineno=1411, col_offset=27), [Raise(Name('SystemExit', Load(), lineno=1412, col_offset=18), Name('msg', Load(), lineno=1412, col_offset=30), None, lineno=1412, col_offset=12)], lineno=1411, col_offset=8), ExceptHandler(None, None, [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1414, col_offset=12), 'widget', Load(), lineno=1414, col_offset=12), '_report_exception', Load(), lineno=1414, col_offset=12), [], [], None, None, lineno=1414, col_offset=12), lineno=1414, col_offset=12)], lineno=1413, col_offset=8)], [], lineno=1407, col_offset=8)], [], lineno=1405, col_offset=4)], [], lineno=1397, col_offset=0), ClassDef('XView', [], [Expr(Str("Mix-in class for querying and changing the horizontal position\n    of a widget's window.", lineno=1419, col_offset=-1), lineno=1419, col_offset=-1), FunctionDef('xview', arguments([Name('self', Param(), lineno=1421, col_offset=14)], 'args', None, []), [Expr(Str('Query and change the horizontal position of the view.', lineno=1422, col_offset=8), lineno=1422, col_offset=8), Assign([Name('res', Store(), lineno=1423, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1423, col_offset=14), 'tk', Load(), lineno=1423, col_offset=14), 'call', Load(), lineno=1423, col_offset=14), [Attribute(Name('self', Load(), lineno=1423, col_offset=27), '_w', Load(), lineno=1423, col_offset=27), Str('xview', lineno=1423, col_offset=36)], [], Name('args', Load(), lineno=1423, col_offset=46), None, lineno=1423, col_offset=14), lineno=1423, col_offset=8), If(UnaryOp(Not(), Name('args', Load(), lineno=1424, col_offset=15), lineno=1424, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1425, col_offset=19), '_getdoubles', Load(), lineno=1425, col_offset=19), [Name('res', Load(), lineno=1425, col_offset=36)], [], None, None, lineno=1425, col_offset=19), lineno=1425, col_offset=12)], [], lineno=1424, col_offset=8)], [], lineno=1421, col_offset=4), FunctionDef('xview_moveto', arguments([Name('self', Param(), lineno=1427, col_offset=21), Name('fraction', Param(), lineno=1427, col_offset=27)], None, None, []), [Expr(Str('Adjusts the view in the window so that FRACTION of the\n        total width of the canvas is off-screen to the left.', lineno=1429, col_offset=-1), lineno=1429, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1430, col_offset=8), 'tk', Load(), lineno=1430, col_offset=8), 'call', Load(), lineno=1430, col_offset=8), [Attribute(Name('self', Load(), lineno=1430, col_offset=21), '_w', Load(), lineno=1430, col_offset=21), Str('xview', lineno=1430, col_offset=30), Str('moveto', lineno=1430, col_offset=39), Name('fraction', Load(), lineno=1430, col_offset=49)], [], None, None, lineno=1430, col_offset=8), lineno=1430, col_offset=8)], [], lineno=1427, col_offset=4), FunctionDef('xview_scroll', arguments([Name('self', Param(), lineno=1432, col_offset=21), Name('number', Param(), lineno=1432, col_offset=27), Name('what', Param(), lineno=1432, col_offset=35)], None, None, []), [Expr(Str('Shift the x-view according to NUMBER which is measured in "units"\n        or "pages" (WHAT).', lineno=1434, col_offset=-1), lineno=1434, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1435, col_offset=8), 'tk', Load(), lineno=1435, col_offset=8), 'call', Load(), lineno=1435, col_offset=8), [Attribute(Name('self', Load(), lineno=1435, col_offset=21), '_w', Load(), lineno=1435, col_offset=21), Str('xview', lineno=1435, col_offset=30), Str('scroll', lineno=1435, col_offset=39), Name('number', Load(), lineno=1435, col_offset=49), Name('what', Load(), lineno=1435, col_offset=57)], [], None, None, lineno=1435, col_offset=8), lineno=1435, col_offset=8)], [], lineno=1432, col_offset=4)], [], lineno=1417, col_offset=0), ClassDef('YView', [], [Expr(Str("Mix-in class for querying and changing the vertical position\n    of a widget's window.", lineno=1440, col_offset=-1), lineno=1440, col_offset=-1), FunctionDef('yview', arguments([Name('self', Param(), lineno=1442, col_offset=14)], 'args', None, []), [Expr(Str('Query and change the vertical position of the view.', lineno=1443, col_offset=8), lineno=1443, col_offset=8), Assign([Name('res', Store(), lineno=1444, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1444, col_offset=14), 'tk', Load(), lineno=1444, col_offset=14), 'call', Load(), lineno=1444, col_offset=14), [Attribute(Name('self', Load(), lineno=1444, col_offset=27), '_w', Load(), lineno=1444, col_offset=27), Str('yview', lineno=1444, col_offset=36)], [], Name('args', Load(), lineno=1444, col_offset=46), None, lineno=1444, col_offset=14), lineno=1444, col_offset=8), If(UnaryOp(Not(), Name('args', Load(), lineno=1445, col_offset=15), lineno=1445, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1446, col_offset=19), '_getdoubles', Load(), lineno=1446, col_offset=19), [Name('res', Load(), lineno=1446, col_offset=36)], [], None, None, lineno=1446, col_offset=19), lineno=1446, col_offset=12)], [], lineno=1445, col_offset=8)], [], lineno=1442, col_offset=4), FunctionDef('yview_moveto', arguments([Name('self', Param(), lineno=1448, col_offset=21), Name('fraction', Param(), lineno=1448, col_offset=27)], None, None, []), [Expr(Str('Adjusts the view in the window so that FRACTION of the\n        total height of the canvas is off-screen to the top.', lineno=1450, col_offset=-1), lineno=1450, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1451, col_offset=8), 'tk', Load(), lineno=1451, col_offset=8), 'call', Load(), lineno=1451, col_offset=8), [Attribute(Name('self', Load(), lineno=1451, col_offset=21), '_w', Load(), lineno=1451, col_offset=21), Str('yview', lineno=1451, col_offset=30), Str('moveto', lineno=1451, col_offset=39), Name('fraction', Load(), lineno=1451, col_offset=49)], [], None, None, lineno=1451, col_offset=8), lineno=1451, col_offset=8)], [], lineno=1448, col_offset=4), FunctionDef('yview_scroll', arguments([Name('self', Param(), lineno=1453, col_offset=21), Name('number', Param(), lineno=1453, col_offset=27), Name('what', Param(), lineno=1453, col_offset=35)], None, None, []), [Expr(Str('Shift the y-view according to NUMBER which is measured in\n        "units" or "pages" (WHAT).', lineno=1455, col_offset=-1), lineno=1455, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1456, col_offset=8), 'tk', Load(), lineno=1456, col_offset=8), 'call', Load(), lineno=1456, col_offset=8), [Attribute(Name('self', Load(), lineno=1456, col_offset=21), '_w', Load(), lineno=1456, col_offset=21), Str('yview', lineno=1456, col_offset=30), Str('scroll', lineno=1456, col_offset=39), Name('number', Load(), lineno=1456, col_offset=49), Name('what', Load(), lineno=1456, col_offset=57)], [], None, None, lineno=1456, col_offset=8), lineno=1456, col_offset=8)], [], lineno=1453, col_offset=4)], [], lineno=1438, col_offset=0), ClassDef('Wm', [], [Expr(Str('Provides functions for the communication with the window manager.', lineno=1460, col_offset=4), lineno=1460, col_offset=4), FunctionDef('wm_aspect', arguments([Name('self', Param(), lineno=1462, col_offset=18), Name('minNumer', Param(), lineno=1463, col_offset=14), Name('minDenom', Param(), lineno=1463, col_offset=29), Name('maxNumer', Param(), lineno=1464, col_offset=14), Name('maxDenom', Param(), lineno=1464, col_offset=29)], None, None, [Name('None', Load(), lineno=1463, col_offset=23), Name('None', Load(), lineno=1463, col_offset=38), Name('None', Load(), lineno=1464, col_offset=23), Name('None', Load(), lineno=1464, col_offset=38)]), [Expr(Str('Instruct the window manager to set the aspect ratio (width/height)\n        of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple\n        of the actual values if no argument is given.', lineno=1467, col_offset=-1), lineno=1467, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1468, col_offset=15), '_getints', Load(), lineno=1468, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1469, col_offset=12), 'tk', Load(), lineno=1469, col_offset=12), 'call', Load(), lineno=1469, col_offset=12), [Str('wm', lineno=1469, col_offset=25), Str('aspect', lineno=1469, col_offset=31), Attribute(Name('self', Load(), lineno=1469, col_offset=41), '_w', Load(), lineno=1469, col_offset=41), Name('minNumer', Load(), lineno=1470, col_offset=21), Name('minDenom', Load(), lineno=1470, col_offset=31), Name('maxNumer', Load(), lineno=1471, col_offset=21), Name('maxDenom', Load(), lineno=1471, col_offset=31)], [], None, None, lineno=1469, col_offset=12)], [], None, None, lineno=1468, col_offset=15), lineno=1468, col_offset=8)], [], lineno=1462, col_offset=4), Assign([Name('aspect', Store(), lineno=1472, col_offset=4)], Name('wm_aspect', Load(), lineno=1472, col_offset=13), lineno=1472, col_offset=4), FunctionDef('wm_attributes', arguments([Name('self', Param(), lineno=1474, col_offset=22)], 'args', None, []), [Expr(Str('This subcommand returns or sets platform specific attributes\n\n        The first form returns a list of the platform specific flags and\n        their values. The second form returns the value for the specific\n        option. The third form sets one or more of the values. The values\n        are as follows:\n\n        On Windows, -disabled gets or sets whether the window is in a\n        disabled state. -toolwindow gets or sets the style of the window\n        to toolwindow (as defined in the MSDN). -topmost gets or sets\n        whether this is a topmost window (displays above all other\n        windows).\n\n        On Macintosh, XXXXX\n\n        On Unix, there are currently no special attribute values.\n        ', lineno=1491, col_offset=-1), lineno=1491, col_offset=-1), Assign([Name('args', Store(), lineno=1492, col_offset=8)], BinOp(Tuple([Str('wm', lineno=1492, col_offset=16), Str('attributes', lineno=1492, col_offset=22), Attribute(Name('self', Load(), lineno=1492, col_offset=36), '_w', Load(), lineno=1492, col_offset=36)], Load(), lineno=1492, col_offset=16), Add(), Name('args', Load(), lineno=1492, col_offset=47), lineno=1492, col_offset=15), lineno=1492, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1493, col_offset=15), 'tk', Load(), lineno=1493, col_offset=15), 'call', Load(), lineno=1493, col_offset=15), [Name('args', Load(), lineno=1493, col_offset=28)], [], None, None, lineno=1493, col_offset=15), lineno=1493, col_offset=8)], [], lineno=1474, col_offset=4), Assign([Name('attributes', Store(), lineno=1494, col_offset=4)], Name('wm_attributes', Load(), lineno=1494, col_offset=15), lineno=1494, col_offset=4), FunctionDef('wm_client', arguments([Name('self', Param(), lineno=1496, col_offset=18), Name('name', Param(), lineno=1496, col_offset=24)], None, None, [Name('None', Load(), lineno=1496, col_offset=29)]), [Expr(Str('Store NAME in WM_CLIENT_MACHINE property of this widget. Return\n        current value.', lineno=1498, col_offset=-1), lineno=1498, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1499, col_offset=15), 'tk', Load(), lineno=1499, col_offset=15), 'call', Load(), lineno=1499, col_offset=15), [Str('wm', lineno=1499, col_offset=28), Str('client', lineno=1499, col_offset=34), Attribute(Name('self', Load(), lineno=1499, col_offset=44), '_w', Load(), lineno=1499, col_offset=44), Name('name', Load(), lineno=1499, col_offset=53)], [], None, None, lineno=1499, col_offset=15), lineno=1499, col_offset=8)], [], lineno=1496, col_offset=4), Assign([Name('client', Store(), lineno=1500, col_offset=4)], Name('wm_client', Load(), lineno=1500, col_offset=13), lineno=1500, col_offset=4), FunctionDef('wm_colormapwindows', arguments([Name('self', Param(), lineno=1501, col_offset=27)], 'wlist', None, []), [Expr(Str('Store list of window names (WLIST) into WM_COLORMAPWINDOWS property\n        of this widget. This list contains windows whose colormaps differ from their\n        parents. Return current list of widgets if WLIST is empty.', lineno=1504, col_offset=-1), lineno=1504, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=1505, col_offset=11), [Name('wlist', Load(), lineno=1505, col_offset=15)], [], None, None, lineno=1505, col_offset=11), [Gt()], [Num(1, lineno=1505, col_offset=24)], lineno=1505, col_offset=11), [Assign([Name('wlist', Store(), lineno=1506, col_offset=12)], Tuple([Name('wlist', Load(), lineno=1506, col_offset=21)], Load(), lineno=1506, col_offset=21), lineno=1506, col_offset=12)], [], lineno=1505, col_offset=8), Assign([Name('args', Store(), lineno=1507, col_offset=8)], BinOp(Tuple([Str('wm', lineno=1507, col_offset=16), Str('colormapwindows', lineno=1507, col_offset=22), Attribute(Name('self', Load(), lineno=1507, col_offset=41), '_w', Load(), lineno=1507, col_offset=41)], Load(), lineno=1507, col_offset=16), Add(), Name('wlist', Load(), lineno=1507, col_offset=52), lineno=1507, col_offset=15), lineno=1507, col_offset=8), Return(Call(Name('map', Load(), lineno=1508, col_offset=15), [Attribute(Name('self', Load(), lineno=1508, col_offset=19), '_nametowidget', Load(), lineno=1508, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=1508, col_offset=39), 'tk', Load(), lineno=1508, col_offset=39), 'call', Load(), lineno=1508, col_offset=39), [Name('args', Load(), lineno=1508, col_offset=52)], [], None, None, lineno=1508, col_offset=39)], [], None, None, lineno=1508, col_offset=15), lineno=1508, col_offset=8)], [], lineno=1501, col_offset=4), Assign([Name('colormapwindows', Store(), lineno=1509, col_offset=4)], Name('wm_colormapwindows', Load(), lineno=1509, col_offset=22), lineno=1509, col_offset=4), FunctionDef('wm_command', arguments([Name('self', Param(), lineno=1510, col_offset=19), Name('value', Param(), lineno=1510, col_offset=25)], None, None, [Name('None', Load(), lineno=1510, col_offset=31)]), [Expr(Str('Store VALUE in WM_COMMAND property. It is the command\n        which shall be used to invoke the application. Return current\n        command if VALUE is None.', lineno=1513, col_offset=-1), lineno=1513, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1514, col_offset=15), 'tk', Load(), lineno=1514, col_offset=15), 'call', Load(), lineno=1514, col_offset=15), [Str('wm', lineno=1514, col_offset=28), Str('command', lineno=1514, col_offset=34), Attribute(Name('self', Load(), lineno=1514, col_offset=45), '_w', Load(), lineno=1514, col_offset=45), Name('value', Load(), lineno=1514, col_offset=54)], [], None, None, lineno=1514, col_offset=15), lineno=1514, col_offset=8)], [], lineno=1510, col_offset=4), Assign([Name('command', Store(), lineno=1515, col_offset=4)], Name('wm_command', Load(), lineno=1515, col_offset=14), lineno=1515, col_offset=4), FunctionDef('wm_deiconify', arguments([Name('self', Param(), lineno=1516, col_offset=21)], None, None, []), [Expr(Str('Deiconify this widget. If it was never mapped it will not be mapped.\n        On Windows it will raise this widget and give it the focus.', lineno=1518, col_offset=-1), lineno=1518, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1519, col_offset=15), 'tk', Load(), lineno=1519, col_offset=15), 'call', Load(), lineno=1519, col_offset=15), [Str('wm', lineno=1519, col_offset=28), Str('deiconify', lineno=1519, col_offset=34), Attribute(Name('self', Load(), lineno=1519, col_offset=47), '_w', Load(), lineno=1519, col_offset=47)], [], None, None, lineno=1519, col_offset=15), lineno=1519, col_offset=8)], [], lineno=1516, col_offset=4), Assign([Name('deiconify', Store(), lineno=1520, col_offset=4)], Name('wm_deiconify', Load(), lineno=1520, col_offset=16), lineno=1520, col_offset=4), FunctionDef('wm_focusmodel', arguments([Name('self', Param(), lineno=1521, col_offset=22), Name('model', Param(), lineno=1521, col_offset=28)], None, None, [Name('None', Load(), lineno=1521, col_offset=34)]), [Expr(Str('Set focus model to MODEL. "active" means that this widget will claim\n        the focus itself, "passive" means that the window manager shall give\n        the focus. Return current focus model if MODEL is None.', lineno=1524, col_offset=-1), lineno=1524, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1525, col_offset=15), 'tk', Load(), lineno=1525, col_offset=15), 'call', Load(), lineno=1525, col_offset=15), [Str('wm', lineno=1525, col_offset=28), Str('focusmodel', lineno=1525, col_offset=34), Attribute(Name('self', Load(), lineno=1525, col_offset=48), '_w', Load(), lineno=1525, col_offset=48), Name('model', Load(), lineno=1525, col_offset=57)], [], None, None, lineno=1525, col_offset=15), lineno=1525, col_offset=8)], [], lineno=1521, col_offset=4), Assign([Name('focusmodel', Store(), lineno=1526, col_offset=4)], Name('wm_focusmodel', Load(), lineno=1526, col_offset=17), lineno=1526, col_offset=4), FunctionDef('wm_frame', arguments([Name('self', Param(), lineno=1527, col_offset=17)], None, None, []), [Expr(Str('Return identifier for decorative frame of this widget if present.', lineno=1528, col_offset=8), lineno=1528, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1529, col_offset=15), 'tk', Load(), lineno=1529, col_offset=15), 'call', Load(), lineno=1529, col_offset=15), [Str('wm', lineno=1529, col_offset=28), Str('frame', lineno=1529, col_offset=34), Attribute(Name('self', Load(), lineno=1529, col_offset=43), '_w', Load(), lineno=1529, col_offset=43)], [], None, None, lineno=1529, col_offset=15), lineno=1529, col_offset=8)], [], lineno=1527, col_offset=4), Assign([Name('frame', Store(), lineno=1530, col_offset=4)], Name('wm_frame', Load(), lineno=1530, col_offset=12), lineno=1530, col_offset=4), FunctionDef('wm_geometry', arguments([Name('self', Param(), lineno=1531, col_offset=20), Name('newGeometry', Param(), lineno=1531, col_offset=26)], None, None, [Name('None', Load(), lineno=1531, col_offset=38)]), [Expr(Str('Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return\n        current value if None is given.', lineno=1533, col_offset=-1), lineno=1533, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1534, col_offset=15), 'tk', Load(), lineno=1534, col_offset=15), 'call', Load(), lineno=1534, col_offset=15), [Str('wm', lineno=1534, col_offset=28), Str('geometry', lineno=1534, col_offset=34), Attribute(Name('self', Load(), lineno=1534, col_offset=46), '_w', Load(), lineno=1534, col_offset=46), Name('newGeometry', Load(), lineno=1534, col_offset=55)], [], None, None, lineno=1534, col_offset=15), lineno=1534, col_offset=8)], [], lineno=1531, col_offset=4), Assign([Name('geometry', Store(), lineno=1535, col_offset=4)], Name('wm_geometry', Load(), lineno=1535, col_offset=15), lineno=1535, col_offset=4), FunctionDef('wm_grid', arguments([Name('self', Param(), lineno=1536, col_offset=16), Name('baseWidth', Param(), lineno=1537, col_offset=9), Name('baseHeight', Param(), lineno=1537, col_offset=25), Name('widthInc', Param(), lineno=1538, col_offset=9), Name('heightInc', Param(), lineno=1538, col_offset=24)], None, None, [Name('None', Load(), lineno=1537, col_offset=19), Name('None', Load(), lineno=1537, col_offset=36), Name('None', Load(), lineno=1538, col_offset=18), Name('None', Load(), lineno=1538, col_offset=34)]), [Expr(Str('Instruct the window manager that this widget shall only be\n        resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and\n        height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the\n        number of grid units requested in Tk_GeometryRequest.', lineno=1542, col_offset=-1), lineno=1542, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1543, col_offset=15), '_getints', Load(), lineno=1543, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1543, col_offset=29), 'tk', Load(), lineno=1543, col_offset=29), 'call', Load(), lineno=1543, col_offset=29), [Str('wm', lineno=1544, col_offset=12), Str('grid', lineno=1544, col_offset=18), Attribute(Name('self', Load(), lineno=1544, col_offset=26), '_w', Load(), lineno=1544, col_offset=26), Name('baseWidth', Load(), lineno=1545, col_offset=12), Name('baseHeight', Load(), lineno=1545, col_offset=23), Name('widthInc', Load(), lineno=1545, col_offset=35), Name('heightInc', Load(), lineno=1545, col_offset=45)], [], None, None, lineno=1543, col_offset=29)], [], None, None, lineno=1543, col_offset=15), lineno=1543, col_offset=8)], [], lineno=1536, col_offset=4), Assign([Name('grid', Store(), lineno=1546, col_offset=4)], Name('wm_grid', Load(), lineno=1546, col_offset=11), lineno=1546, col_offset=4), FunctionDef('wm_group', arguments([Name('self', Param(), lineno=1547, col_offset=17), Name('pathName', Param(), lineno=1547, col_offset=23)], None, None, [Name('None', Load(), lineno=1547, col_offset=32)]), [Expr(Str('Set the group leader widgets for related widgets to PATHNAME. Return\n        the group leader of this widget if None is given.', lineno=1549, col_offset=-1), lineno=1549, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1550, col_offset=15), 'tk', Load(), lineno=1550, col_offset=15), 'call', Load(), lineno=1550, col_offset=15), [Str('wm', lineno=1550, col_offset=28), Str('group', lineno=1550, col_offset=34), Attribute(Name('self', Load(), lineno=1550, col_offset=43), '_w', Load(), lineno=1550, col_offset=43), Name('pathName', Load(), lineno=1550, col_offset=52)], [], None, None, lineno=1550, col_offset=15), lineno=1550, col_offset=8)], [], lineno=1547, col_offset=4), Assign([Name('group', Store(), lineno=1551, col_offset=4)], Name('wm_group', Load(), lineno=1551, col_offset=12), lineno=1551, col_offset=4), FunctionDef('wm_iconbitmap', arguments([Name('self', Param(), lineno=1552, col_offset=22), Name('bitmap', Param(), lineno=1552, col_offset=28), Name('default', Param(), lineno=1552, col_offset=41)], None, None, [Name('None', Load(), lineno=1552, col_offset=35), Name('None', Load(), lineno=1552, col_offset=49)]), [Expr(Str("Set bitmap for the iconified widget to BITMAP. Return\n        the bitmap if None is given.\n\n        Under Windows, the DEFAULT parameter can be used to set the icon\n        for the widget and any descendents that don't have an icon set\n        explicitly.  DEFAULT can be the relative path to a .ico file\n        (example: root.iconbitmap(default='myicon.ico') ).  See Tk\n        documentation for more information.", lineno=1560, col_offset=-1), lineno=1560, col_offset=-1), If(Name('default', Load(), lineno=1561, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1562, col_offset=19), 'tk', Load(), lineno=1562, col_offset=19), 'call', Load(), lineno=1562, col_offset=19), [Str('wm', lineno=1562, col_offset=32), Str('iconbitmap', lineno=1562, col_offset=38), Attribute(Name('self', Load(), lineno=1562, col_offset=52), '_w', Load(), lineno=1562, col_offset=52), Str('-default', lineno=1562, col_offset=61), Name('default', Load(), lineno=1562, col_offset=73)], [], None, None, lineno=1562, col_offset=19), lineno=1562, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1564, col_offset=19), 'tk', Load(), lineno=1564, col_offset=19), 'call', Load(), lineno=1564, col_offset=19), [Str('wm', lineno=1564, col_offset=32), Str('iconbitmap', lineno=1564, col_offset=38), Attribute(Name('self', Load(), lineno=1564, col_offset=52), '_w', Load(), lineno=1564, col_offset=52), Name('bitmap', Load(), lineno=1564, col_offset=61)], [], None, None, lineno=1564, col_offset=19), lineno=1564, col_offset=12)], lineno=1561, col_offset=8)], [], lineno=1552, col_offset=4), Assign([Name('iconbitmap', Store(), lineno=1565, col_offset=4)], Name('wm_iconbitmap', Load(), lineno=1565, col_offset=17), lineno=1565, col_offset=4), FunctionDef('wm_iconify', arguments([Name('self', Param(), lineno=1566, col_offset=19)], None, None, []), [Expr(Str('Display widget as icon.', lineno=1567, col_offset=8), lineno=1567, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1568, col_offset=15), 'tk', Load(), lineno=1568, col_offset=15), 'call', Load(), lineno=1568, col_offset=15), [Str('wm', lineno=1568, col_offset=28), Str('iconify', lineno=1568, col_offset=34), Attribute(Name('self', Load(), lineno=1568, col_offset=45), '_w', Load(), lineno=1568, col_offset=45)], [], None, None, lineno=1568, col_offset=15), lineno=1568, col_offset=8)], [], lineno=1566, col_offset=4), Assign([Name('iconify', Store(), lineno=1569, col_offset=4)], Name('wm_iconify', Load(), lineno=1569, col_offset=14), lineno=1569, col_offset=4), FunctionDef('wm_iconmask', arguments([Name('self', Param(), lineno=1570, col_offset=20), Name('bitmap', Param(), lineno=1570, col_offset=26)], None, None, [Name('None', Load(), lineno=1570, col_offset=33)]), [Expr(Str('Set mask for the icon bitmap of this widget. Return the\n        mask if None is given.', lineno=1572, col_offset=-1), lineno=1572, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1573, col_offset=15), 'tk', Load(), lineno=1573, col_offset=15), 'call', Load(), lineno=1573, col_offset=15), [Str('wm', lineno=1573, col_offset=28), Str('iconmask', lineno=1573, col_offset=34), Attribute(Name('self', Load(), lineno=1573, col_offset=46), '_w', Load(), lineno=1573, col_offset=46), Name('bitmap', Load(), lineno=1573, col_offset=55)], [], None, None, lineno=1573, col_offset=15), lineno=1573, col_offset=8)], [], lineno=1570, col_offset=4), Assign([Name('iconmask', Store(), lineno=1574, col_offset=4)], Name('wm_iconmask', Load(), lineno=1574, col_offset=15), lineno=1574, col_offset=4), FunctionDef('wm_iconname', arguments([Name('self', Param(), lineno=1575, col_offset=20), Name('newName', Param(), lineno=1575, col_offset=26)], None, None, [Name('None', Load(), lineno=1575, col_offset=34)]), [Expr(Str('Set the name of the icon for this widget. Return the name if\n        None is given.', lineno=1577, col_offset=-1), lineno=1577, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1578, col_offset=15), 'tk', Load(), lineno=1578, col_offset=15), 'call', Load(), lineno=1578, col_offset=15), [Str('wm', lineno=1578, col_offset=28), Str('iconname', lineno=1578, col_offset=34), Attribute(Name('self', Load(), lineno=1578, col_offset=46), '_w', Load(), lineno=1578, col_offset=46), Name('newName', Load(), lineno=1578, col_offset=55)], [], None, None, lineno=1578, col_offset=15), lineno=1578, col_offset=8)], [], lineno=1575, col_offset=4), Assign([Name('iconname', Store(), lineno=1579, col_offset=4)], Name('wm_iconname', Load(), lineno=1579, col_offset=15), lineno=1579, col_offset=4), FunctionDef('wm_iconposition', arguments([Name('self', Param(), lineno=1580, col_offset=24), Name('x', Param(), lineno=1580, col_offset=30), Name('y', Param(), lineno=1580, col_offset=38)], None, None, [Name('None', Load(), lineno=1580, col_offset=32), Name('None', Load(), lineno=1580, col_offset=40)]), [Expr(Str('Set the position of the icon of this widget to X and Y. Return\n        a tuple of the current values of X and X if None is given.', lineno=1582, col_offset=-1), lineno=1582, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1583, col_offset=15), '_getints', Load(), lineno=1583, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1583, col_offset=29), 'tk', Load(), lineno=1583, col_offset=29), 'call', Load(), lineno=1583, col_offset=29), [Str('wm', lineno=1584, col_offset=12), Str('iconposition', lineno=1584, col_offset=18), Attribute(Name('self', Load(), lineno=1584, col_offset=34), '_w', Load(), lineno=1584, col_offset=34), Name('x', Load(), lineno=1584, col_offset=43), Name('y', Load(), lineno=1584, col_offset=46)], [], None, None, lineno=1583, col_offset=29)], [], None, None, lineno=1583, col_offset=15), lineno=1583, col_offset=8)], [], lineno=1580, col_offset=4), Assign([Name('iconposition', Store(), lineno=1585, col_offset=4)], Name('wm_iconposition', Load(), lineno=1585, col_offset=19), lineno=1585, col_offset=4), FunctionDef('wm_iconwindow', arguments([Name('self', Param(), lineno=1586, col_offset=22), Name('pathName', Param(), lineno=1586, col_offset=28)], None, None, [Name('None', Load(), lineno=1586, col_offset=37)]), [Expr(Str('Set widget PATHNAME to be displayed instead of icon. Return the current\n        value if None is given.', lineno=1588, col_offset=-1), lineno=1588, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1589, col_offset=15), 'tk', Load(), lineno=1589, col_offset=15), 'call', Load(), lineno=1589, col_offset=15), [Str('wm', lineno=1589, col_offset=28), Str('iconwindow', lineno=1589, col_offset=34), Attribute(Name('self', Load(), lineno=1589, col_offset=48), '_w', Load(), lineno=1589, col_offset=48), Name('pathName', Load(), lineno=1589, col_offset=57)], [], None, None, lineno=1589, col_offset=15), lineno=1589, col_offset=8)], [], lineno=1586, col_offset=4), Assign([Name('iconwindow', Store(), lineno=1590, col_offset=4)], Name('wm_iconwindow', Load(), lineno=1590, col_offset=17), lineno=1590, col_offset=4), FunctionDef('wm_maxsize', arguments([Name('self', Param(), lineno=1591, col_offset=19), Name('width', Param(), lineno=1591, col_offset=25), Name('height', Param(), lineno=1591, col_offset=37)], None, None, [Name('None', Load(), lineno=1591, col_offset=31), Name('None', Load(), lineno=1591, col_offset=44)]), [Expr(Str('Set max WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.', lineno=1594, col_offset=-1), lineno=1594, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1595, col_offset=15), '_getints', Load(), lineno=1595, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1595, col_offset=29), 'tk', Load(), lineno=1595, col_offset=29), 'call', Load(), lineno=1595, col_offset=29), [Str('wm', lineno=1596, col_offset=12), Str('maxsize', lineno=1596, col_offset=18), Attribute(Name('self', Load(), lineno=1596, col_offset=29), '_w', Load(), lineno=1596, col_offset=29), Name('width', Load(), lineno=1596, col_offset=38), Name('height', Load(), lineno=1596, col_offset=45)], [], None, None, lineno=1595, col_offset=29)], [], None, None, lineno=1595, col_offset=15), lineno=1595, col_offset=8)], [], lineno=1591, col_offset=4), Assign([Name('maxsize', Store(), lineno=1597, col_offset=4)], Name('wm_maxsize', Load(), lineno=1597, col_offset=14), lineno=1597, col_offset=4), FunctionDef('wm_minsize', arguments([Name('self', Param(), lineno=1598, col_offset=19), Name('width', Param(), lineno=1598, col_offset=25), Name('height', Param(), lineno=1598, col_offset=37)], None, None, [Name('None', Load(), lineno=1598, col_offset=31), Name('None', Load(), lineno=1598, col_offset=44)]), [Expr(Str('Set min WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.', lineno=1601, col_offset=-1), lineno=1601, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1602, col_offset=15), '_getints', Load(), lineno=1602, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1602, col_offset=29), 'tk', Load(), lineno=1602, col_offset=29), 'call', Load(), lineno=1602, col_offset=29), [Str('wm', lineno=1603, col_offset=12), Str('minsize', lineno=1603, col_offset=18), Attribute(Name('self', Load(), lineno=1603, col_offset=29), '_w', Load(), lineno=1603, col_offset=29), Name('width', Load(), lineno=1603, col_offset=38), Name('height', Load(), lineno=1603, col_offset=45)], [], None, None, lineno=1602, col_offset=29)], [], None, None, lineno=1602, col_offset=15), lineno=1602, col_offset=8)], [], lineno=1598, col_offset=4), Assign([Name('minsize', Store(), lineno=1604, col_offset=4)], Name('wm_minsize', Load(), lineno=1604, col_offset=14), lineno=1604, col_offset=4), FunctionDef('wm_overrideredirect', arguments([Name('self', Param(), lineno=1605, col_offset=28), Name('boolean', Param(), lineno=1605, col_offset=34)], None, None, [Name('None', Load(), lineno=1605, col_offset=42)]), [Expr(Str('Instruct the window manager to ignore this widget\n        if BOOLEAN is given with 1. Return the current value if None\n        is given.', lineno=1608, col_offset=-1), lineno=1608, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=1609, col_offset=15), '_getboolean', Load(), lineno=1609, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=1609, col_offset=32), 'tk', Load(), lineno=1609, col_offset=32), 'call', Load(), lineno=1609, col_offset=32), [Str('wm', lineno=1610, col_offset=12), Str('overrideredirect', lineno=1610, col_offset=18), Attribute(Name('self', Load(), lineno=1610, col_offset=38), '_w', Load(), lineno=1610, col_offset=38), Name('boolean', Load(), lineno=1610, col_offset=47)], [], None, None, lineno=1609, col_offset=32)], [], None, None, lineno=1609, col_offset=15), lineno=1609, col_offset=8)], [], lineno=1605, col_offset=4), Assign([Name('overrideredirect', Store(), lineno=1611, col_offset=4)], Name('wm_overrideredirect', Load(), lineno=1611, col_offset=23), lineno=1611, col_offset=4), FunctionDef('wm_positionfrom', arguments([Name('self', Param(), lineno=1612, col_offset=24), Name('who', Param(), lineno=1612, col_offset=30)], None, None, [Name('None', Load(), lineno=1612, col_offset=34)]), [Expr(Str('Instruct the window manager that the position of this widget shall\n        be defined by the user if WHO is "user", and by its own policy if WHO is\n        "program".', lineno=1615, col_offset=-1), lineno=1615, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1616, col_offset=15), 'tk', Load(), lineno=1616, col_offset=15), 'call', Load(), lineno=1616, col_offset=15), [Str('wm', lineno=1616, col_offset=28), Str('positionfrom', lineno=1616, col_offset=34), Attribute(Name('self', Load(), lineno=1616, col_offset=50), '_w', Load(), lineno=1616, col_offset=50), Name('who', Load(), lineno=1616, col_offset=59)], [], None, None, lineno=1616, col_offset=15), lineno=1616, col_offset=8)], [], lineno=1612, col_offset=4), Assign([Name('positionfrom', Store(), lineno=1617, col_offset=4)], Name('wm_positionfrom', Load(), lineno=1617, col_offset=19), lineno=1617, col_offset=4), FunctionDef('wm_protocol', arguments([Name('self', Param(), lineno=1618, col_offset=20), Name('name', Param(), lineno=1618, col_offset=26), Name('func', Param(), lineno=1618, col_offset=37)], None, None, [Name('None', Load(), lineno=1618, col_offset=31), Name('None', Load(), lineno=1618, col_offset=42)]), [Expr(Str('Bind function FUNC to command NAME for this widget.\n        Return the function bound to NAME if None is given. NAME could be\n        e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".', lineno=1621, col_offset=-1), lineno=1621, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=1622, col_offset=11), [Name('func', Load(), lineno=1622, col_offset=19), Str('__call__', lineno=1622, col_offset=25)], [], None, None, lineno=1622, col_offset=11), [Assign([Name('command', Store(), lineno=1623, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1623, col_offset=22), '_register', Load(), lineno=1623, col_offset=22), [Name('func', Load(), lineno=1623, col_offset=37)], [], None, None, lineno=1623, col_offset=22), lineno=1623, col_offset=12)], [Assign([Name('command', Store(), lineno=1625, col_offset=12)], Name('func', Load(), lineno=1625, col_offset=22), lineno=1625, col_offset=12)], lineno=1622, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1626, col_offset=15), 'tk', Load(), lineno=1626, col_offset=15), 'call', Load(), lineno=1626, col_offset=15), [Str('wm', lineno=1627, col_offset=12), Str('protocol', lineno=1627, col_offset=18), Attribute(Name('self', Load(), lineno=1627, col_offset=30), '_w', Load(), lineno=1627, col_offset=30), Name('name', Load(), lineno=1627, col_offset=39), Name('command', Load(), lineno=1627, col_offset=45)], [], None, None, lineno=1626, col_offset=15), lineno=1626, col_offset=8)], [], lineno=1618, col_offset=4), Assign([Name('protocol', Store(), lineno=1628, col_offset=4)], Name('wm_protocol', Load(), lineno=1628, col_offset=15), lineno=1628, col_offset=4), FunctionDef('wm_resizable', arguments([Name('self', Param(), lineno=1629, col_offset=21), Name('width', Param(), lineno=1629, col_offset=27), Name('height', Param(), lineno=1629, col_offset=39)], None, None, [Name('None', Load(), lineno=1629, col_offset=33), Name('None', Load(), lineno=1629, col_offset=46)]), [Expr(Str('Instruct the window manager whether this width can be resized\n        in WIDTH or HEIGHT. Both values are boolean values.', lineno=1631, col_offset=-1), lineno=1631, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1632, col_offset=15), 'tk', Load(), lineno=1632, col_offset=15), 'call', Load(), lineno=1632, col_offset=15), [Str('wm', lineno=1632, col_offset=28), Str('resizable', lineno=1632, col_offset=34), Attribute(Name('self', Load(), lineno=1632, col_offset=47), '_w', Load(), lineno=1632, col_offset=47), Name('width', Load(), lineno=1632, col_offset=56), Name('height', Load(), lineno=1632, col_offset=63)], [], None, None, lineno=1632, col_offset=15), lineno=1632, col_offset=8)], [], lineno=1629, col_offset=4), Assign([Name('resizable', Store(), lineno=1633, col_offset=4)], Name('wm_resizable', Load(), lineno=1633, col_offset=16), lineno=1633, col_offset=4), FunctionDef('wm_sizefrom', arguments([Name('self', Param(), lineno=1634, col_offset=20), Name('who', Param(), lineno=1634, col_offset=26)], None, None, [Name('None', Load(), lineno=1634, col_offset=30)]), [Expr(Str('Instruct the window manager that the size of this widget shall\n        be defined by the user if WHO is "user", and by its own policy if WHO is\n        "program".', lineno=1637, col_offset=-1), lineno=1637, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1638, col_offset=15), 'tk', Load(), lineno=1638, col_offset=15), 'call', Load(), lineno=1638, col_offset=15), [Str('wm', lineno=1638, col_offset=28), Str('sizefrom', lineno=1638, col_offset=34), Attribute(Name('self', Load(), lineno=1638, col_offset=46), '_w', Load(), lineno=1638, col_offset=46), Name('who', Load(), lineno=1638, col_offset=55)], [], None, None, lineno=1638, col_offset=15), lineno=1638, col_offset=8)], [], lineno=1634, col_offset=4), Assign([Name('sizefrom', Store(), lineno=1639, col_offset=4)], Name('wm_sizefrom', Load(), lineno=1639, col_offset=15), lineno=1639, col_offset=4), FunctionDef('wm_state', arguments([Name('self', Param(), lineno=1640, col_offset=17), Name('newstate', Param(), lineno=1640, col_offset=23)], None, None, [Name('None', Load(), lineno=1640, col_offset=32)]), [Expr(Str('Query or set the state of this widget as one of normal, icon,\n        iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).', lineno=1642, col_offset=-1), lineno=1642, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1643, col_offset=15), 'tk', Load(), lineno=1643, col_offset=15), 'call', Load(), lineno=1643, col_offset=15), [Str('wm', lineno=1643, col_offset=28), Str('state', lineno=1643, col_offset=34), Attribute(Name('self', Load(), lineno=1643, col_offset=43), '_w', Load(), lineno=1643, col_offset=43), Name('newstate', Load(), lineno=1643, col_offset=52)], [], None, None, lineno=1643, col_offset=15), lineno=1643, col_offset=8)], [], lineno=1640, col_offset=4), Assign([Name('state', Store(), lineno=1644, col_offset=4)], Name('wm_state', Load(), lineno=1644, col_offset=12), lineno=1644, col_offset=4), FunctionDef('wm_title', arguments([Name('self', Param(), lineno=1645, col_offset=17), Name('string', Param(), lineno=1645, col_offset=23)], None, None, [Name('None', Load(), lineno=1645, col_offset=30)]), [Expr(Str('Set the title of this widget.', lineno=1646, col_offset=8), lineno=1646, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1647, col_offset=15), 'tk', Load(), lineno=1647, col_offset=15), 'call', Load(), lineno=1647, col_offset=15), [Str('wm', lineno=1647, col_offset=28), Str('title', lineno=1647, col_offset=34), Attribute(Name('self', Load(), lineno=1647, col_offset=43), '_w', Load(), lineno=1647, col_offset=43), Name('string', Load(), lineno=1647, col_offset=52)], [], None, None, lineno=1647, col_offset=15), lineno=1647, col_offset=8)], [], lineno=1645, col_offset=4), Assign([Name('title', Store(), lineno=1648, col_offset=4)], Name('wm_title', Load(), lineno=1648, col_offset=12), lineno=1648, col_offset=4), FunctionDef('wm_transient', arguments([Name('self', Param(), lineno=1649, col_offset=21), Name('master', Param(), lineno=1649, col_offset=27)], None, None, [Name('None', Load(), lineno=1649, col_offset=34)]), [Expr(Str('Instruct the window manager that this widget is transient\n        with regard to widget MASTER.', lineno=1651, col_offset=-1), lineno=1651, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1652, col_offset=15), 'tk', Load(), lineno=1652, col_offset=15), 'call', Load(), lineno=1652, col_offset=15), [Str('wm', lineno=1652, col_offset=28), Str('transient', lineno=1652, col_offset=34), Attribute(Name('self', Load(), lineno=1652, col_offset=47), '_w', Load(), lineno=1652, col_offset=47), Name('master', Load(), lineno=1652, col_offset=56)], [], None, None, lineno=1652, col_offset=15), lineno=1652, col_offset=8)], [], lineno=1649, col_offset=4), Assign([Name('transient', Store(), lineno=1653, col_offset=4)], Name('wm_transient', Load(), lineno=1653, col_offset=16), lineno=1653, col_offset=4), FunctionDef('wm_withdraw', arguments([Name('self', Param(), lineno=1654, col_offset=20)], None, None, []), [Expr(Str('Withdraw this widget from the screen such that it is unmapped\n        and forgotten by the window manager. Re-draw it with wm_deiconify.', lineno=1656, col_offset=-1), lineno=1656, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1657, col_offset=15), 'tk', Load(), lineno=1657, col_offset=15), 'call', Load(), lineno=1657, col_offset=15), [Str('wm', lineno=1657, col_offset=28), Str('withdraw', lineno=1657, col_offset=34), Attribute(Name('self', Load(), lineno=1657, col_offset=46), '_w', Load(), lineno=1657, col_offset=46)], [], None, None, lineno=1657, col_offset=15), lineno=1657, col_offset=8)], [], lineno=1654, col_offset=4), Assign([Name('withdraw', Store(), lineno=1658, col_offset=4)], Name('wm_withdraw', Load(), lineno=1658, col_offset=15), lineno=1658, col_offset=4)], [], lineno=1459, col_offset=0), ClassDef('Tk', [Name('Misc', Load(), lineno=1661, col_offset=9), Name('Wm', Load(), lineno=1661, col_offset=15)], [Expr(Str('Toplevel widget of Tk which represents mostly the main window\n    of an appliation. It has an associated Tcl interpreter.', lineno=1663, col_offset=-1), lineno=1663, col_offset=-1), Assign([Name('_w', Store(), lineno=1664, col_offset=4)], Str('.', lineno=1664, col_offset=9), lineno=1664, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1665, col_offset=17), Name('screenName', Param(), lineno=1665, col_offset=23), Name('baseName', Param(), lineno=1665, col_offset=40), Name('className', Param(), lineno=1665, col_offset=55), Name('useTk', Param(), lineno=1666, col_offset=17), Name('sync', Param(), lineno=1666, col_offset=26), Name('use', Param(), lineno=1666, col_offset=34)], None, None, [Name('None', Load(), lineno=1665, col_offset=34), Name('None', Load(), lineno=1665, col_offset=49), Str('Tk', lineno=1665, col_offset=65), Num(1, lineno=1666, col_offset=23), Num(0, lineno=1666, col_offset=31), Name('None', Load(), lineno=1666, col_offset=38)]), [Expr(Str('Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will\n        be created. BASENAME will be used for the identification of the profile file (see\n        readprofile).\n        It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\n        is the name of the widget class.', lineno=1671, col_offset=-1), lineno=1671, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=1672, col_offset=8), 'master', Store(), lineno=1672, col_offset=8)], Name('None', Load(), lineno=1672, col_offset=22), lineno=1672, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1673, col_offset=8), 'children', Store(), lineno=1673, col_offset=8)], Dict([], [], lineno=1673, col_offset=24), lineno=1673, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1674, col_offset=8), '_tkloaded', Store(), lineno=1674, col_offset=8)], Num(0, lineno=1674, col_offset=25), lineno=1674, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1677, col_offset=8), 'tk', Store(), lineno=1677, col_offset=8)], Name('None', Load(), lineno=1677, col_offset=18), lineno=1677, col_offset=8), If(Compare(Name('baseName', Load(), lineno=1678, col_offset=11), [Is()], [Name('None', Load(), lineno=1678, col_offset=23)], lineno=1678, col_offset=11), [Import([alias('sys', None), alias('os', None)], lineno=1679, col_offset=12), Assign([Name('baseName', Store(), lineno=1680, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=1680, col_offset=23), 'path', Load(), lineno=1680, col_offset=23), 'basename', Load(), lineno=1680, col_offset=23), [Subscript(Attribute(Name('sys', Load(), lineno=1680, col_offset=40), 'argv', Load(), lineno=1680, col_offset=40), Index(Num(0, lineno=1680, col_offset=49)), Load(), lineno=1680, col_offset=40)], [], None, None, lineno=1680, col_offset=23), lineno=1680, col_offset=12), Assign([Tuple([Name('baseName', Store(), lineno=1681, col_offset=12), Name('ext', Store(), lineno=1681, col_offset=22)], Store(), lineno=1681, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=1681, col_offset=28), 'path', Load(), lineno=1681, col_offset=28), 'splitext', Load(), lineno=1681, col_offset=28), [Name('baseName', Load(), lineno=1681, col_offset=45)], [], None, None, lineno=1681, col_offset=28), lineno=1681, col_offset=12), If(Compare(Name('ext', Load(), lineno=1682, col_offset=15), [NotIn()], [Tuple([Str('.py', lineno=1682, col_offset=27), Str('.pyc', lineno=1682, col_offset=34), Str('.pyo', lineno=1682, col_offset=42)], Load(), lineno=1682, col_offset=27)], lineno=1682, col_offset=15), [Assign([Name('baseName', Store(), lineno=1683, col_offset=16)], BinOp(Name('baseName', Load(), lineno=1683, col_offset=27), Add(), Name('ext', Load(), lineno=1683, col_offset=38), lineno=1683, col_offset=27), lineno=1683, col_offset=16)], [], lineno=1682, col_offset=12)], [], lineno=1678, col_offset=8), Assign([Name('interactive', Store(), lineno=1684, col_offset=8)], Num(0, lineno=1684, col_offset=22), lineno=1684, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1685, col_offset=8), 'tk', Store(), lineno=1685, col_offset=8)], Call(Attribute(Name('_tkinter', Load(), lineno=1685, col_offset=18), 'create', Load(), lineno=1685, col_offset=18), [Name('screenName', Load(), lineno=1685, col_offset=34), Name('baseName', Load(), lineno=1685, col_offset=46), Name('className', Load(), lineno=1685, col_offset=56), Name('interactive', Load(), lineno=1685, col_offset=67), Name('wantobjects', Load(), lineno=1685, col_offset=80), Name('useTk', Load(), lineno=1685, col_offset=93), Name('sync', Load(), lineno=1685, col_offset=100), Name('use', Load(), lineno=1685, col_offset=106)], [], None, None, lineno=1685, col_offset=18), lineno=1685, col_offset=8), If(Name('useTk', Load(), lineno=1686, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1687, col_offset=12), '_loadtk', Load(), lineno=1687, col_offset=12), [], [], None, None, lineno=1687, col_offset=12), lineno=1687, col_offset=12)], [], lineno=1686, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1688, col_offset=8), 'readprofile', Load(), lineno=1688, col_offset=8), [Name('baseName', Load(), lineno=1688, col_offset=25), Name('className', Load(), lineno=1688, col_offset=35)], [], None, None, lineno=1688, col_offset=8), lineno=1688, col_offset=8)], [], lineno=1665, col_offset=4), FunctionDef('loadtk', arguments([Name('self', Param(), lineno=1689, col_offset=15)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1690, col_offset=15), '_tkloaded', Load(), lineno=1690, col_offset=15), lineno=1690, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1691, col_offset=12), 'tk', Load(), lineno=1691, col_offset=12), 'loadtk', Load(), lineno=1691, col_offset=12), [], [], None, None, lineno=1691, col_offset=12), lineno=1691, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1692, col_offset=12), '_loadtk', Load(), lineno=1692, col_offset=12), [], [], None, None, lineno=1692, col_offset=12), lineno=1692, col_offset=12)], [], lineno=1690, col_offset=8)], [], lineno=1689, col_offset=4), FunctionDef('_loadtk', arguments([Name('self', Param(), lineno=1693, col_offset=16)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1694, col_offset=8), '_tkloaded', Store(), lineno=1694, col_offset=8)], Num(1, lineno=1694, col_offset=25), lineno=1694, col_offset=8), Global(['_default_root'], lineno=1695, col_offset=8), Assign([Name('tk_version', Store(), lineno=1697, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1697, col_offset=21), 'tk', Load(), lineno=1697, col_offset=21), 'getvar', Load(), lineno=1697, col_offset=21), [Str('tk_version', lineno=1697, col_offset=36)], [], None, None, lineno=1697, col_offset=21), lineno=1697, col_offset=8), If(Compare(Name('tk_version', Load(), lineno=1698, col_offset=11), [NotEq()], [Attribute(Name('_tkinter', Load(), lineno=1698, col_offset=25), 'TK_VERSION', Load(), lineno=1698, col_offset=25)], lineno=1698, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=1699, col_offset=18), BinOp(Str("tk.h version (%s) doesn't match libtk.a version (%s)", lineno=1700, col_offset=12), Mod(), Tuple([Attribute(Name('_tkinter', Load(), lineno=1701, col_offset=15), 'TK_VERSION', Load(), lineno=1701, col_offset=15), Name('tk_version', Load(), lineno=1701, col_offset=36)], Load(), lineno=1701, col_offset=15), lineno=1700, col_offset=12), None, lineno=1699, col_offset=12)], [], lineno=1698, col_offset=8), Assign([Name('tcl_version', Store(), lineno=1703, col_offset=8)], Call(Name('str', Load(), lineno=1703, col_offset=22), [Call(Attribute(Attribute(Name('self', Load(), lineno=1703, col_offset=26), 'tk', Load(), lineno=1703, col_offset=26), 'getvar', Load(), lineno=1703, col_offset=26), [Str('tcl_version', lineno=1703, col_offset=41)], [], None, None, lineno=1703, col_offset=26)], [], None, None, lineno=1703, col_offset=22), lineno=1703, col_offset=8), If(Compare(Name('tcl_version', Load(), lineno=1704, col_offset=11), [NotEq()], [Attribute(Name('_tkinter', Load(), lineno=1704, col_offset=26), 'TCL_VERSION', Load(), lineno=1704, col_offset=26)], lineno=1704, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=1705, col_offset=18), BinOp(Str("tcl.h version (%s) doesn't match libtcl.a version (%s)", lineno=1706, col_offset=12), Mod(), Tuple([Attribute(Name('_tkinter', Load(), lineno=1707, col_offset=15), 'TCL_VERSION', Load(), lineno=1707, col_offset=15), Name('tcl_version', Load(), lineno=1707, col_offset=37)], Load(), lineno=1707, col_offset=15), lineno=1706, col_offset=12), None, lineno=1705, col_offset=12)], [], lineno=1704, col_offset=8), If(Compare(Name('TkVersion', Load(), lineno=1708, col_offset=11), [Lt()], [Num(4.0, lineno=1708, col_offset=23)], lineno=1708, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=1709, col_offset=18), BinOp(Str('Tk 4.0 or higher is required; found Tk %s', lineno=1710, col_offset=12), Mod(), Call(Name('str', Load(), lineno=1711, col_offset=14), [Name('TkVersion', Load(), lineno=1711, col_offset=18)], [], None, None, lineno=1711, col_offset=14), lineno=1710, col_offset=12), None, lineno=1709, col_offset=12)], [], lineno=1708, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1715, col_offset=11), '_tclCommands', Load(), lineno=1715, col_offset=11), [Is()], [Name('None', Load(), lineno=1715, col_offset=32)], lineno=1715, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1716, col_offset=12), '_tclCommands', Store(), lineno=1716, col_offset=12)], List([], Load(), lineno=1716, col_offset=32), lineno=1716, col_offset=12)], [], lineno=1715, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1717, col_offset=8), 'tk', Load(), lineno=1717, col_offset=8), 'createcommand', Load(), lineno=1717, col_offset=8), [Str('tkerror', lineno=1717, col_offset=30), Name('_tkerror', Load(), lineno=1717, col_offset=41)], [], None, None, lineno=1717, col_offset=8), lineno=1717, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1718, col_offset=8), 'tk', Load(), lineno=1718, col_offset=8), 'createcommand', Load(), lineno=1718, col_offset=8), [Str('exit', lineno=1718, col_offset=30), Name('_exit', Load(), lineno=1718, col_offset=38)], [], None, None, lineno=1718, col_offset=8), lineno=1718, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1719, col_offset=8), '_tclCommands', Load(), lineno=1719, col_offset=8), 'append', Load(), lineno=1719, col_offset=8), [Str('tkerror', lineno=1719, col_offset=33)], [], None, None, lineno=1719, col_offset=8), lineno=1719, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1720, col_offset=8), '_tclCommands', Load(), lineno=1720, col_offset=8), 'append', Load(), lineno=1720, col_offset=8), [Str('exit', lineno=1720, col_offset=33)], [], None, None, lineno=1720, col_offset=8), lineno=1720, col_offset=8), If(BoolOp(And(), [Name('_support_default_root', Load(), lineno=1721, col_offset=11), UnaryOp(Not(), Name('_default_root', Load(), lineno=1721, col_offset=41), lineno=1721, col_offset=37)], lineno=1721, col_offset=11), [Assign([Name('_default_root', Store(), lineno=1722, col_offset=12)], Name('self', Load(), lineno=1722, col_offset=28), lineno=1722, col_offset=12)], [], lineno=1721, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1723, col_offset=8), 'protocol', Load(), lineno=1723, col_offset=8), [Str('WM_DELETE_WINDOW', lineno=1723, col_offset=22), Attribute(Name('self', Load(), lineno=1723, col_offset=42), 'destroy', Load(), lineno=1723, col_offset=42)], [], None, None, lineno=1723, col_offset=8), lineno=1723, col_offset=8)], [], lineno=1693, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=1724, col_offset=16)], None, None, []), [Expr(Str('Destroy this and all descendants widgets. This will\n        end the application of this Tcl interpreter.', lineno=1726, col_offset=-1), lineno=1726, col_offset=-1), For(Name('c', Store(), lineno=1727, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=1727, col_offset=17), 'children', Load(), lineno=1727, col_offset=17), 'values', Load(), lineno=1727, col_offset=17), [], [], None, None, lineno=1727, col_offset=17), [Expr(Call(Attribute(Name('c', Load(), lineno=1727, col_offset=41), 'destroy', Load(), lineno=1727, col_offset=41), [], [], None, None, lineno=1727, col_offset=41), lineno=1727, col_offset=41)], [], lineno=1727, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1728, col_offset=8), 'tk', Load(), lineno=1728, col_offset=8), 'call', Load(), lineno=1728, col_offset=8), [Str('destroy', lineno=1728, col_offset=21), Attribute(Name('self', Load(), lineno=1728, col_offset=32), '_w', Load(), lineno=1728, col_offset=32)], [], None, None, lineno=1728, col_offset=8), lineno=1728, col_offset=8), Expr(Call(Attribute(Name('Misc', Load(), lineno=1729, col_offset=8), 'destroy', Load(), lineno=1729, col_offset=8), [Name('self', Load(), lineno=1729, col_offset=21)], [], None, None, lineno=1729, col_offset=8), lineno=1729, col_offset=8), Global(['_default_root'], lineno=1730, col_offset=8), If(BoolOp(And(), [Name('_support_default_root', Load(), lineno=1731, col_offset=11), Compare(Name('_default_root', Load(), lineno=1731, col_offset=37), [Is()], [Name('self', Load(), lineno=1731, col_offset=54)], lineno=1731, col_offset=37)], lineno=1731, col_offset=11), [Assign([Name('_default_root', Store(), lineno=1732, col_offset=12)], Name('None', Load(), lineno=1732, col_offset=28), lineno=1732, col_offset=12)], [], lineno=1731, col_offset=8)], [], lineno=1724, col_offset=4), FunctionDef('readprofile', arguments([Name('self', Param(), lineno=1733, col_offset=20), Name('baseName', Param(), lineno=1733, col_offset=26), Name('className', Param(), lineno=1733, col_offset=36)], None, None, []), [Expr(Str('Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into\n        the Tcl Interpreter and calls execfile on BASENAME.py and CLASSNAME.py if\n        such a file exists in the home directory.', lineno=1736, col_offset=-1), lineno=1736, col_offset=-1), Import([alias('os', None)], lineno=1737, col_offset=8), If(Compare(Str('HOME', lineno=1738, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=1738, col_offset=21), 'environ', Load(), lineno=1738, col_offset=21)], lineno=1738, col_offset=11), [Assign([Name('home', Store(), lineno=1738, col_offset=33)], Subscript(Attribute(Name('os', Load(), lineno=1738, col_offset=40), 'environ', Load(), lineno=1738, col_offset=40), Index(Str('HOME', lineno=1738, col_offset=51)), Load(), lineno=1738, col_offset=40), lineno=1738, col_offset=33)], [Assign([Name('home', Store(), lineno=1739, col_offset=14)], Attribute(Name('os', Load(), lineno=1739, col_offset=21), 'curdir', Load(), lineno=1739, col_offset=21), lineno=1739, col_offset=14)], lineno=1738, col_offset=8), Assign([Name('class_tcl', Store(), lineno=1740, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1740, col_offset=20), 'path', Load(), lineno=1740, col_offset=20), 'join', Load(), lineno=1740, col_offset=20), [Name('home', Load(), lineno=1740, col_offset=33), BinOp(Str('.%s.tcl', lineno=1740, col_offset=39), Mod(), Name('className', Load(), lineno=1740, col_offset=51), lineno=1740, col_offset=39)], [], None, None, lineno=1740, col_offset=20), lineno=1740, col_offset=8), Assign([Name('class_py', Store(), lineno=1741, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1741, col_offset=19), 'path', Load(), lineno=1741, col_offset=19), 'join', Load(), lineno=1741, col_offset=19), [Name('home', Load(), lineno=1741, col_offset=32), BinOp(Str('.%s.py', lineno=1741, col_offset=38), Mod(), Name('className', Load(), lineno=1741, col_offset=49), lineno=1741, col_offset=38)], [], None, None, lineno=1741, col_offset=19), lineno=1741, col_offset=8), Assign([Name('base_tcl', Store(), lineno=1742, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1742, col_offset=19), 'path', Load(), lineno=1742, col_offset=19), 'join', Load(), lineno=1742, col_offset=19), [Name('home', Load(), lineno=1742, col_offset=32), BinOp(Str('.%s.tcl', lineno=1742, col_offset=38), Mod(), Name('baseName', Load(), lineno=1742, col_offset=50), lineno=1742, col_offset=38)], [], None, None, lineno=1742, col_offset=19), lineno=1742, col_offset=8), Assign([Name('base_py', Store(), lineno=1743, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=1743, col_offset=18), 'path', Load(), lineno=1743, col_offset=18), 'join', Load(), lineno=1743, col_offset=18), [Name('home', Load(), lineno=1743, col_offset=31), BinOp(Str('.%s.py', lineno=1743, col_offset=37), Mod(), Name('baseName', Load(), lineno=1743, col_offset=48), lineno=1743, col_offset=37)], [], None, None, lineno=1743, col_offset=18), lineno=1743, col_offset=8), Assign([Name('dir', Store(), lineno=1744, col_offset=8)], Dict([Str('self', lineno=1744, col_offset=15)], [Name('self', Load(), lineno=1744, col_offset=23)], lineno=1744, col_offset=14), lineno=1744, col_offset=8), Exec(Str('from Tkinter import *', lineno=1745, col_offset=13), Name('dir', Load(), lineno=1745, col_offset=40), None, lineno=1745, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=1746, col_offset=11), 'path', Load(), lineno=1746, col_offset=11), 'isfile', Load(), lineno=1746, col_offset=11), [Name('class_tcl', Load(), lineno=1746, col_offset=26)], [], None, None, lineno=1746, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1747, col_offset=12), 'tk', Load(), lineno=1747, col_offset=12), 'call', Load(), lineno=1747, col_offset=12), [Str('source', lineno=1747, col_offset=25), Name('class_tcl', Load(), lineno=1747, col_offset=35)], [], None, None, lineno=1747, col_offset=12), lineno=1747, col_offset=12)], [], lineno=1746, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=1748, col_offset=11), 'path', Load(), lineno=1748, col_offset=11), 'isfile', Load(), lineno=1748, col_offset=11), [Name('class_py', Load(), lineno=1748, col_offset=26)], [], None, None, lineno=1748, col_offset=11), [Expr(Call(Name('execfile', Load(), lineno=1749, col_offset=12), [Name('class_py', Load(), lineno=1749, col_offset=21), Name('dir', Load(), lineno=1749, col_offset=31)], [], None, None, lineno=1749, col_offset=12), lineno=1749, col_offset=12)], [], lineno=1748, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=1750, col_offset=11), 'path', Load(), lineno=1750, col_offset=11), 'isfile', Load(), lineno=1750, col_offset=11), [Name('base_tcl', Load(), lineno=1750, col_offset=26)], [], None, None, lineno=1750, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1751, col_offset=12), 'tk', Load(), lineno=1751, col_offset=12), 'call', Load(), lineno=1751, col_offset=12), [Str('source', lineno=1751, col_offset=25), Name('base_tcl', Load(), lineno=1751, col_offset=35)], [], None, None, lineno=1751, col_offset=12), lineno=1751, col_offset=12)], [], lineno=1750, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=1752, col_offset=11), 'path', Load(), lineno=1752, col_offset=11), 'isfile', Load(), lineno=1752, col_offset=11), [Name('base_py', Load(), lineno=1752, col_offset=26)], [], None, None, lineno=1752, col_offset=11), [Expr(Call(Name('execfile', Load(), lineno=1753, col_offset=12), [Name('base_py', Load(), lineno=1753, col_offset=21), Name('dir', Load(), lineno=1753, col_offset=30)], [], None, None, lineno=1753, col_offset=12), lineno=1753, col_offset=12)], [], lineno=1752, col_offset=8)], [], lineno=1733, col_offset=4), FunctionDef('report_callback_exception', arguments([Name('self', Param(), lineno=1754, col_offset=34), Name('exc', Param(), lineno=1754, col_offset=40), Name('val', Param(), lineno=1754, col_offset=45), Name('tb', Param(), lineno=1754, col_offset=50)], None, None, []), [Expr(Str('Internal function. It reports exception on sys.stderr.', lineno=1755, col_offset=8), lineno=1755, col_offset=8), Import([alias('traceback', None), alias('sys', None)], lineno=1756, col_offset=8), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=1757, col_offset=8), 'stderr', Load(), lineno=1757, col_offset=8), 'write', Load(), lineno=1757, col_offset=8), [Str('Exception in Tkinter callback\n', lineno=1757, col_offset=25)], [], None, None, lineno=1757, col_offset=8), lineno=1757, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=1758, col_offset=8), 'last_type', Store(), lineno=1758, col_offset=8)], Name('exc', Load(), lineno=1758, col_offset=24), lineno=1758, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=1759, col_offset=8), 'last_value', Store(), lineno=1759, col_offset=8)], Name('val', Load(), lineno=1759, col_offset=25), lineno=1759, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=1760, col_offset=8), 'last_traceback', Store(), lineno=1760, col_offset=8)], Name('tb', Load(), lineno=1760, col_offset=29), lineno=1760, col_offset=8), Expr(Call(Attribute(Name('traceback', Load(), lineno=1761, col_offset=8), 'print_exception', Load(), lineno=1761, col_offset=8), [Name('exc', Load(), lineno=1761, col_offset=34), Name('val', Load(), lineno=1761, col_offset=39), Name('tb', Load(), lineno=1761, col_offset=44)], [], None, None, lineno=1761, col_offset=8), lineno=1761, col_offset=8)], [], lineno=1754, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=1762, col_offset=20), Name('attr', Param(), lineno=1762, col_offset=26)], None, None, []), [Expr(Str('Delegate attribute access to the interpreter object', lineno=1763, col_offset=8), lineno=1763, col_offset=8), Return(Call(Name('getattr', Load(), lineno=1764, col_offset=15), [Attribute(Name('self', Load(), lineno=1764, col_offset=23), 'tk', Load(), lineno=1764, col_offset=23), Name('attr', Load(), lineno=1764, col_offset=32)], [], None, None, lineno=1764, col_offset=15), lineno=1764, col_offset=8)], [], lineno=1762, col_offset=4)], [], lineno=1661, col_offset=0), FunctionDef('Tcl', arguments([Name('screenName', Param(), lineno=1781, col_offset=8), Name('baseName', Param(), lineno=1781, col_offset=25), Name('className', Param(), lineno=1781, col_offset=40), Name('useTk', Param(), lineno=1781, col_offset=56)], None, None, [Name('None', Load(), lineno=1781, col_offset=19), Name('None', Load(), lineno=1781, col_offset=34), Str('Tk', lineno=1781, col_offset=50), Num(0, lineno=1781, col_offset=62)]), [Return(Call(Name('Tk', Load(), lineno=1782, col_offset=11), [Name('screenName', Load(), lineno=1782, col_offset=14), Name('baseName', Load(), lineno=1782, col_offset=26), Name('className', Load(), lineno=1782, col_offset=36), Name('useTk', Load(), lineno=1782, col_offset=47)], [], None, None, lineno=1782, col_offset=11), lineno=1782, col_offset=4)], [], lineno=1781, col_offset=0), ClassDef('Pack', [], [Expr(Str('Geometry manager Pack.\n\n    Base class to use the methods pack_* in every widget.', lineno=1787, col_offset=-1), lineno=1787, col_offset=-1), FunctionDef('pack_configure', arguments([Name('self', Param(), lineno=1788, col_offset=23), Name('cnf', Param(), lineno=1788, col_offset=29)], None, 'kw', [Dict([], [], lineno=1788, col_offset=33)]), [Expr(Str("Pack a widget in the parent widget. Use as options:\n        after=widget - pack it after you have packed widget\n        anchor=NSEW (or subset) - position widget according to\n                                  given direction\n        before=widget - pack it before you will pack widget\n        expand=bool - expand widget if parent size grows\n        fill=NONE or X or Y or BOTH - fill widget if widget grows\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.\n        ", lineno=1803, col_offset=-1), lineno=1803, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1804, col_offset=8), 'tk', Load(), lineno=1804, col_offset=8), 'call', Load(), lineno=1804, col_offset=8), [BinOp(Tuple([Str('pack', lineno=1805, col_offset=15), Str('configure', lineno=1805, col_offset=23), Attribute(Name('self', Load(), lineno=1805, col_offset=36), '_w', Load(), lineno=1805, col_offset=36)], Load(), lineno=1805, col_offset=15), Add(), Call(Attribute(Name('self', Load(), lineno=1806, col_offset=16), '_options', Load(), lineno=1806, col_offset=16), [Name('cnf', Load(), lineno=1806, col_offset=30), Name('kw', Load(), lineno=1806, col_offset=35)], [], None, None, lineno=1806, col_offset=16), lineno=1805, col_offset=14)], [], None, None, lineno=1804, col_offset=8), lineno=1804, col_offset=8)], [], lineno=1788, col_offset=4), Assign([Name('pack', Store(), lineno=1807, col_offset=4), Name('configure', Store(), lineno=1807, col_offset=11), Name('config', Store(), lineno=1807, col_offset=23)], Name('pack_configure', Load(), lineno=1807, col_offset=32), lineno=1807, col_offset=4), FunctionDef('pack_forget', arguments([Name('self', Param(), lineno=1808, col_offset=20)], None, None, []), [Expr(Str('Unmap this widget and do not use it for the packing order.', lineno=1809, col_offset=8), lineno=1809, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1810, col_offset=8), 'tk', Load(), lineno=1810, col_offset=8), 'call', Load(), lineno=1810, col_offset=8), [Str('pack', lineno=1810, col_offset=21), Str('forget', lineno=1810, col_offset=29), Attribute(Name('self', Load(), lineno=1810, col_offset=39), '_w', Load(), lineno=1810, col_offset=39)], [], None, None, lineno=1810, col_offset=8), lineno=1810, col_offset=8)], [], lineno=1808, col_offset=4), Assign([Name('forget', Store(), lineno=1811, col_offset=4)], Name('pack_forget', Load(), lineno=1811, col_offset=13), lineno=1811, col_offset=4), FunctionDef('pack_info', arguments([Name('self', Param(), lineno=1812, col_offset=18)], None, None, []), [Expr(Str('Return information about the packing options\n        for this widget.', lineno=1814, col_offset=-1), lineno=1814, col_offset=-1), Assign([Name('words', Store(), lineno=1815, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1815, col_offset=16), 'tk', Load(), lineno=1815, col_offset=16), 'splitlist', Load(), lineno=1815, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=1816, col_offset=12), 'tk', Load(), lineno=1816, col_offset=12), 'call', Load(), lineno=1816, col_offset=12), [Str('pack', lineno=1816, col_offset=25), Str('info', lineno=1816, col_offset=33), Attribute(Name('self', Load(), lineno=1816, col_offset=41), '_w', Load(), lineno=1816, col_offset=41)], [], None, None, lineno=1816, col_offset=12)], [], None, None, lineno=1815, col_offset=16), lineno=1815, col_offset=8), Assign([Name('dict', Store(), lineno=1817, col_offset=8)], Dict([], [], lineno=1817, col_offset=15), lineno=1817, col_offset=8), For(Name('i', Store(), lineno=1818, col_offset=12), Call(Name('range', Load(), lineno=1818, col_offset=17), [Num(0, lineno=1818, col_offset=23), Call(Name('len', Load(), lineno=1818, col_offset=26), [Name('words', Load(), lineno=1818, col_offset=30)], [], None, None, lineno=1818, col_offset=26), Num(2, lineno=1818, col_offset=38)], [], None, None, lineno=1818, col_offset=17), [Assign([Name('key', Store(), lineno=1819, col_offset=12)], Subscript(Subscript(Name('words', Load(), lineno=1819, col_offset=18), Index(Name('i', Load(), lineno=1819, col_offset=24)), Load(), lineno=1819, col_offset=18), Slice(Num(1, lineno=1819, col_offset=27), None, None), Load(), lineno=1819, col_offset=18), lineno=1819, col_offset=12), Assign([Name('value', Store(), lineno=1820, col_offset=12)], Subscript(Name('words', Load(), lineno=1820, col_offset=20), Index(BinOp(Name('i', Load(), lineno=1820, col_offset=26), Add(), Num(1, lineno=1820, col_offset=28), lineno=1820, col_offset=26)), Load(), lineno=1820, col_offset=20), lineno=1820, col_offset=12), If(Compare(Subscript(Name('value', Load(), lineno=1821, col_offset=15), Slice(None, Num(1, lineno=1821, col_offset=22), None), Load(), lineno=1821, col_offset=15), [Eq()], [Str('.', lineno=1821, col_offset=28)], lineno=1821, col_offset=15), [Assign([Name('value', Store(), lineno=1822, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1822, col_offset=24), '_nametowidget', Load(), lineno=1822, col_offset=24), [Name('value', Load(), lineno=1822, col_offset=43)], [], None, None, lineno=1822, col_offset=24), lineno=1822, col_offset=16)], [], lineno=1821, col_offset=12), Assign([Subscript(Name('dict', Load(), lineno=1823, col_offset=12), Index(Name('key', Load(), lineno=1823, col_offset=17)), Store(), lineno=1823, col_offset=12)], Name('value', Load(), lineno=1823, col_offset=24), lineno=1823, col_offset=12)], [], lineno=1818, col_offset=8), Return(Name('dict', Load(), lineno=1824, col_offset=15), lineno=1824, col_offset=8)], [], lineno=1812, col_offset=4), Assign([Name('info', Store(), lineno=1825, col_offset=4)], Name('pack_info', Load(), lineno=1825, col_offset=11), lineno=1825, col_offset=4), Assign([Name('propagate', Store(), lineno=1826, col_offset=4), Name('pack_propagate', Store(), lineno=1826, col_offset=16)], Attribute(Name('Misc', Load(), lineno=1826, col_offset=33), 'pack_propagate', Load(), lineno=1826, col_offset=33), lineno=1826, col_offset=4), Assign([Name('slaves', Store(), lineno=1827, col_offset=4), Name('pack_slaves', Store(), lineno=1827, col_offset=13)], Attribute(Name('Misc', Load(), lineno=1827, col_offset=27), 'pack_slaves', Load(), lineno=1827, col_offset=27), lineno=1827, col_offset=4)], [], lineno=1784, col_offset=0), ClassDef('Place', [], [Expr(Str('Geometry manager Place.\n\n    Base class to use the methods place_* in every widget.', lineno=1832, col_offset=-1), lineno=1832, col_offset=-1), FunctionDef('place_configure', arguments([Name('self', Param(), lineno=1833, col_offset=24), Name('cnf', Param(), lineno=1833, col_offset=30)], None, 'kw', [Dict([], [], lineno=1833, col_offset=34)]), [Expr(Str('Place a widget in the parent widget. Use as options:\n        in=master - master relative to which the widget is placed\n        in_=master - see \'in\' option description\n        x=amount - locate anchor of this widget at position x of master\n        y=amount - locate anchor of this widget at position y of master\n        relx=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to width of master (1.0 is right edge)\n        rely=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to height of master (1.0 is bottom edge)\n        anchor=NSEW (or subset) - position anchor according to given direction\n        width=amount - width of this widget in pixel\n        height=amount - height of this widget in pixel\n        relwidth=amount - width of this widget between 0.0 and 1.0\n                          relative to width of master (1.0 is the same width\n                          as the master)\n        relheight=amount - height of this widget between 0.0 and 1.0\n                           relative to height of master (1.0 is the same\n                           height as the master)\n        bordermode="inside" or "outside" - whether to take border width of\n                                           master widget into account\n        ', lineno=1854, col_offset=-1), lineno=1854, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1855, col_offset=8), 'tk', Load(), lineno=1855, col_offset=8), 'call', Load(), lineno=1855, col_offset=8), [BinOp(Tuple([Str('place', lineno=1856, col_offset=15), Str('configure', lineno=1856, col_offset=24), Attribute(Name('self', Load(), lineno=1856, col_offset=37), '_w', Load(), lineno=1856, col_offset=37)], Load(), lineno=1856, col_offset=15), Add(), Call(Attribute(Name('self', Load(), lineno=1857, col_offset=16), '_options', Load(), lineno=1857, col_offset=16), [Name('cnf', Load(), lineno=1857, col_offset=30), Name('kw', Load(), lineno=1857, col_offset=35)], [], None, None, lineno=1857, col_offset=16), lineno=1856, col_offset=14)], [], None, None, lineno=1855, col_offset=8), lineno=1855, col_offset=8)], [], lineno=1833, col_offset=4), Assign([Name('place', Store(), lineno=1858, col_offset=4), Name('configure', Store(), lineno=1858, col_offset=12), Name('config', Store(), lineno=1858, col_offset=24)], Name('place_configure', Load(), lineno=1858, col_offset=33), lineno=1858, col_offset=4), FunctionDef('place_forget', arguments([Name('self', Param(), lineno=1859, col_offset=21)], None, None, []), [Expr(Str('Unmap this widget.', lineno=1860, col_offset=8), lineno=1860, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1861, col_offset=8), 'tk', Load(), lineno=1861, col_offset=8), 'call', Load(), lineno=1861, col_offset=8), [Str('place', lineno=1861, col_offset=21), Str('forget', lineno=1861, col_offset=30), Attribute(Name('self', Load(), lineno=1861, col_offset=40), '_w', Load(), lineno=1861, col_offset=40)], [], None, None, lineno=1861, col_offset=8), lineno=1861, col_offset=8)], [], lineno=1859, col_offset=4), Assign([Name('forget', Store(), lineno=1862, col_offset=4)], Name('place_forget', Load(), lineno=1862, col_offset=13), lineno=1862, col_offset=4), FunctionDef('place_info', arguments([Name('self', Param(), lineno=1863, col_offset=19)], None, None, []), [Expr(Str('Return information about the placing options\n        for this widget.', lineno=1865, col_offset=-1), lineno=1865, col_offset=-1), Assign([Name('words', Store(), lineno=1866, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1866, col_offset=16), 'tk', Load(), lineno=1866, col_offset=16), 'splitlist', Load(), lineno=1866, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=1867, col_offset=12), 'tk', Load(), lineno=1867, col_offset=12), 'call', Load(), lineno=1867, col_offset=12), [Str('place', lineno=1867, col_offset=25), Str('info', lineno=1867, col_offset=34), Attribute(Name('self', Load(), lineno=1867, col_offset=42), '_w', Load(), lineno=1867, col_offset=42)], [], None, None, lineno=1867, col_offset=12)], [], None, None, lineno=1866, col_offset=16), lineno=1866, col_offset=8), Assign([Name('dict', Store(), lineno=1868, col_offset=8)], Dict([], [], lineno=1868, col_offset=15), lineno=1868, col_offset=8), For(Name('i', Store(), lineno=1869, col_offset=12), Call(Name('range', Load(), lineno=1869, col_offset=17), [Num(0, lineno=1869, col_offset=23), Call(Name('len', Load(), lineno=1869, col_offset=26), [Name('words', Load(), lineno=1869, col_offset=30)], [], None, None, lineno=1869, col_offset=26), Num(2, lineno=1869, col_offset=38)], [], None, None, lineno=1869, col_offset=17), [Assign([Name('key', Store(), lineno=1870, col_offset=12)], Subscript(Subscript(Name('words', Load(), lineno=1870, col_offset=18), Index(Name('i', Load(), lineno=1870, col_offset=24)), Load(), lineno=1870, col_offset=18), Slice(Num(1, lineno=1870, col_offset=27), None, None), Load(), lineno=1870, col_offset=18), lineno=1870, col_offset=12), Assign([Name('value', Store(), lineno=1871, col_offset=12)], Subscript(Name('words', Load(), lineno=1871, col_offset=20), Index(BinOp(Name('i', Load(), lineno=1871, col_offset=26), Add(), Num(1, lineno=1871, col_offset=28), lineno=1871, col_offset=26)), Load(), lineno=1871, col_offset=20), lineno=1871, col_offset=12), If(Compare(Subscript(Name('value', Load(), lineno=1872, col_offset=15), Slice(None, Num(1, lineno=1872, col_offset=22), None), Load(), lineno=1872, col_offset=15), [Eq()], [Str('.', lineno=1872, col_offset=28)], lineno=1872, col_offset=15), [Assign([Name('value', Store(), lineno=1873, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1873, col_offset=24), '_nametowidget', Load(), lineno=1873, col_offset=24), [Name('value', Load(), lineno=1873, col_offset=43)], [], None, None, lineno=1873, col_offset=24), lineno=1873, col_offset=16)], [], lineno=1872, col_offset=12), Assign([Subscript(Name('dict', Load(), lineno=1874, col_offset=12), Index(Name('key', Load(), lineno=1874, col_offset=17)), Store(), lineno=1874, col_offset=12)], Name('value', Load(), lineno=1874, col_offset=24), lineno=1874, col_offset=12)], [], lineno=1869, col_offset=8), Return(Name('dict', Load(), lineno=1875, col_offset=15), lineno=1875, col_offset=8)], [], lineno=1863, col_offset=4), Assign([Name('info', Store(), lineno=1876, col_offset=4)], Name('place_info', Load(), lineno=1876, col_offset=11), lineno=1876, col_offset=4), Assign([Name('slaves', Store(), lineno=1877, col_offset=4), Name('place_slaves', Store(), lineno=1877, col_offset=13)], Attribute(Name('Misc', Load(), lineno=1877, col_offset=28), 'place_slaves', Load(), lineno=1877, col_offset=28), lineno=1877, col_offset=4)], [], lineno=1829, col_offset=0), ClassDef('Grid', [], [Expr(Str('Geometry manager Grid.\n\n    Base class to use the methods grid_* in every widget.', lineno=1882, col_offset=-1), lineno=1882, col_offset=-1), FunctionDef('grid_configure', arguments([Name('self', Param(), lineno=1884, col_offset=23), Name('cnf', Param(), lineno=1884, col_offset=29)], None, 'kw', [Dict([], [], lineno=1884, col_offset=33)]), [Expr(Str("Position a widget in the parent widget in a grid. Use as options:\n        column=number - use cell identified with given column (starting with 0)\n        columnspan=number - this widget will span several columns\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        row=number - use cell identified with given row (starting with 0)\n        rowspan=number - this widget will span several rows\n        sticky=NSEW - if cell is larger on which sides will this\n                      widget stick to the cell boundary\n        ", lineno=1898, col_offset=-1), lineno=1898, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1899, col_offset=8), 'tk', Load(), lineno=1899, col_offset=8), 'call', Load(), lineno=1899, col_offset=8), [BinOp(Tuple([Str('grid', lineno=1900, col_offset=15), Str('configure', lineno=1900, col_offset=23), Attribute(Name('self', Load(), lineno=1900, col_offset=36), '_w', Load(), lineno=1900, col_offset=36)], Load(), lineno=1900, col_offset=15), Add(), Call(Attribute(Name('self', Load(), lineno=1901, col_offset=16), '_options', Load(), lineno=1901, col_offset=16), [Name('cnf', Load(), lineno=1901, col_offset=30), Name('kw', Load(), lineno=1901, col_offset=35)], [], None, None, lineno=1901, col_offset=16), lineno=1900, col_offset=14)], [], None, None, lineno=1899, col_offset=8), lineno=1899, col_offset=8)], [], lineno=1884, col_offset=4), Assign([Name('grid', Store(), lineno=1902, col_offset=4), Name('configure', Store(), lineno=1902, col_offset=11), Name('config', Store(), lineno=1902, col_offset=23)], Name('grid_configure', Load(), lineno=1902, col_offset=32), lineno=1902, col_offset=4), Assign([Name('bbox', Store(), lineno=1903, col_offset=4), Name('grid_bbox', Store(), lineno=1903, col_offset=11)], Attribute(Name('Misc', Load(), lineno=1903, col_offset=23), 'grid_bbox', Load(), lineno=1903, col_offset=23), lineno=1903, col_offset=4), Assign([Name('columnconfigure', Store(), lineno=1904, col_offset=4), Name('grid_columnconfigure', Store(), lineno=1904, col_offset=22)], Attribute(Name('Misc', Load(), lineno=1904, col_offset=45), 'grid_columnconfigure', Load(), lineno=1904, col_offset=45), lineno=1904, col_offset=4), FunctionDef('grid_forget', arguments([Name('self', Param(), lineno=1905, col_offset=20)], None, None, []), [Expr(Str('Unmap this widget.', lineno=1906, col_offset=8), lineno=1906, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1907, col_offset=8), 'tk', Load(), lineno=1907, col_offset=8), 'call', Load(), lineno=1907, col_offset=8), [Str('grid', lineno=1907, col_offset=21), Str('forget', lineno=1907, col_offset=29), Attribute(Name('self', Load(), lineno=1907, col_offset=39), '_w', Load(), lineno=1907, col_offset=39)], [], None, None, lineno=1907, col_offset=8), lineno=1907, col_offset=8)], [], lineno=1905, col_offset=4), Assign([Name('forget', Store(), lineno=1908, col_offset=4)], Name('grid_forget', Load(), lineno=1908, col_offset=13), lineno=1908, col_offset=4), FunctionDef('grid_remove', arguments([Name('self', Param(), lineno=1909, col_offset=20)], None, None, []), [Expr(Str('Unmap this widget but remember the grid options.', lineno=1910, col_offset=8), lineno=1910, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1911, col_offset=8), 'tk', Load(), lineno=1911, col_offset=8), 'call', Load(), lineno=1911, col_offset=8), [Str('grid', lineno=1911, col_offset=21), Str('remove', lineno=1911, col_offset=29), Attribute(Name('self', Load(), lineno=1911, col_offset=39), '_w', Load(), lineno=1911, col_offset=39)], [], None, None, lineno=1911, col_offset=8), lineno=1911, col_offset=8)], [], lineno=1909, col_offset=4), FunctionDef('grid_info', arguments([Name('self', Param(), lineno=1912, col_offset=18)], None, None, []), [Expr(Str('Return information about the options\n        for positioning this widget in a grid.', lineno=1914, col_offset=-1), lineno=1914, col_offset=-1), Assign([Name('words', Store(), lineno=1915, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1915, col_offset=16), 'tk', Load(), lineno=1915, col_offset=16), 'splitlist', Load(), lineno=1915, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=1916, col_offset=12), 'tk', Load(), lineno=1916, col_offset=12), 'call', Load(), lineno=1916, col_offset=12), [Str('grid', lineno=1916, col_offset=25), Str('info', lineno=1916, col_offset=33), Attribute(Name('self', Load(), lineno=1916, col_offset=41), '_w', Load(), lineno=1916, col_offset=41)], [], None, None, lineno=1916, col_offset=12)], [], None, None, lineno=1915, col_offset=16), lineno=1915, col_offset=8), Assign([Name('dict', Store(), lineno=1917, col_offset=8)], Dict([], [], lineno=1917, col_offset=15), lineno=1917, col_offset=8), For(Name('i', Store(), lineno=1918, col_offset=12), Call(Name('range', Load(), lineno=1918, col_offset=17), [Num(0, lineno=1918, col_offset=23), Call(Name('len', Load(), lineno=1918, col_offset=26), [Name('words', Load(), lineno=1918, col_offset=30)], [], None, None, lineno=1918, col_offset=26), Num(2, lineno=1918, col_offset=38)], [], None, None, lineno=1918, col_offset=17), [Assign([Name('key', Store(), lineno=1919, col_offset=12)], Subscript(Subscript(Name('words', Load(), lineno=1919, col_offset=18), Index(Name('i', Load(), lineno=1919, col_offset=24)), Load(), lineno=1919, col_offset=18), Slice(Num(1, lineno=1919, col_offset=27), None, None), Load(), lineno=1919, col_offset=18), lineno=1919, col_offset=12), Assign([Name('value', Store(), lineno=1920, col_offset=12)], Subscript(Name('words', Load(), lineno=1920, col_offset=20), Index(BinOp(Name('i', Load(), lineno=1920, col_offset=26), Add(), Num(1, lineno=1920, col_offset=28), lineno=1920, col_offset=26)), Load(), lineno=1920, col_offset=20), lineno=1920, col_offset=12), If(Compare(Subscript(Name('value', Load(), lineno=1921, col_offset=15), Slice(None, Num(1, lineno=1921, col_offset=22), None), Load(), lineno=1921, col_offset=15), [Eq()], [Str('.', lineno=1921, col_offset=28)], lineno=1921, col_offset=15), [Assign([Name('value', Store(), lineno=1922, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1922, col_offset=24), '_nametowidget', Load(), lineno=1922, col_offset=24), [Name('value', Load(), lineno=1922, col_offset=43)], [], None, None, lineno=1922, col_offset=24), lineno=1922, col_offset=16)], [], lineno=1921, col_offset=12), Assign([Subscript(Name('dict', Load(), lineno=1923, col_offset=12), Index(Name('key', Load(), lineno=1923, col_offset=17)), Store(), lineno=1923, col_offset=12)], Name('value', Load(), lineno=1923, col_offset=24), lineno=1923, col_offset=12)], [], lineno=1918, col_offset=8), Return(Name('dict', Load(), lineno=1924, col_offset=15), lineno=1924, col_offset=8)], [], lineno=1912, col_offset=4), Assign([Name('info', Store(), lineno=1925, col_offset=4)], Name('grid_info', Load(), lineno=1925, col_offset=11), lineno=1925, col_offset=4), Assign([Name('location', Store(), lineno=1926, col_offset=4), Name('grid_location', Store(), lineno=1926, col_offset=15)], Attribute(Name('Misc', Load(), lineno=1926, col_offset=31), 'grid_location', Load(), lineno=1926, col_offset=31), lineno=1926, col_offset=4), Assign([Name('propagate', Store(), lineno=1927, col_offset=4), Name('grid_propagate', Store(), lineno=1927, col_offset=16)], Attribute(Name('Misc', Load(), lineno=1927, col_offset=33), 'grid_propagate', Load(), lineno=1927, col_offset=33), lineno=1927, col_offset=4), Assign([Name('rowconfigure', Store(), lineno=1928, col_offset=4), Name('grid_rowconfigure', Store(), lineno=1928, col_offset=19)], Attribute(Name('Misc', Load(), lineno=1928, col_offset=39), 'grid_rowconfigure', Load(), lineno=1928, col_offset=39), lineno=1928, col_offset=4), Assign([Name('size', Store(), lineno=1929, col_offset=4), Name('grid_size', Store(), lineno=1929, col_offset=11)], Attribute(Name('Misc', Load(), lineno=1929, col_offset=23), 'grid_size', Load(), lineno=1929, col_offset=23), lineno=1929, col_offset=4), Assign([Name('slaves', Store(), lineno=1930, col_offset=4), Name('grid_slaves', Store(), lineno=1930, col_offset=13)], Attribute(Name('Misc', Load(), lineno=1930, col_offset=27), 'grid_slaves', Load(), lineno=1930, col_offset=27), lineno=1930, col_offset=4)], [], lineno=1879, col_offset=0), ClassDef('BaseWidget', [Name('Misc', Load(), lineno=1932, col_offset=17)], [Expr(Str('Internal class.', lineno=1933, col_offset=4), lineno=1933, col_offset=4), FunctionDef('_setup', arguments([Name('self', Param(), lineno=1934, col_offset=15), Name('master', Param(), lineno=1934, col_offset=21), Name('cnf', Param(), lineno=1934, col_offset=29)], None, None, []), [Expr(Str('Internal function. Sets up information about children.', lineno=1935, col_offset=8), lineno=1935, col_offset=8), If(Name('_support_default_root', Load(), lineno=1936, col_offset=11), [Global(['_default_root'], lineno=1937, col_offset=12), If(UnaryOp(Not(), Name('master', Load(), lineno=1938, col_offset=19), lineno=1938, col_offset=15), [If(UnaryOp(Not(), Name('_default_root', Load(), lineno=1939, col_offset=23), lineno=1939, col_offset=19), [Assign([Name('_default_root', Store(), lineno=1940, col_offset=20)], Call(Name('Tk', Load(), lineno=1940, col_offset=36), [], [], None, None, lineno=1940, col_offset=36), lineno=1940, col_offset=20)], [], lineno=1939, col_offset=16), Assign([Name('master', Store(), lineno=1941, col_offset=16)], Name('_default_root', Load(), lineno=1941, col_offset=25), lineno=1941, col_offset=16)], [], lineno=1938, col_offset=12)], [], lineno=1936, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1942, col_offset=8), 'master', Store(), lineno=1942, col_offset=8)], Name('master', Load(), lineno=1942, col_offset=22), lineno=1942, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1943, col_offset=8), 'tk', Store(), lineno=1943, col_offset=8)], Attribute(Name('master', Load(), lineno=1943, col_offset=18), 'tk', Load(), lineno=1943, col_offset=18), lineno=1943, col_offset=8), Assign([Name('name', Store(), lineno=1944, col_offset=8)], Name('None', Load(), lineno=1944, col_offset=15), lineno=1944, col_offset=8), If(Compare(Str('name', lineno=1945, col_offset=11), [In()], [Name('cnf', Load(), lineno=1945, col_offset=21)], lineno=1945, col_offset=11), [Assign([Name('name', Store(), lineno=1946, col_offset=12)], Subscript(Name('cnf', Load(), lineno=1946, col_offset=19), Index(Str('name', lineno=1946, col_offset=23)), Load(), lineno=1946, col_offset=19), lineno=1946, col_offset=12), Delete([Subscript(Name('cnf', Load(), lineno=1947, col_offset=16), Index(Str('name', lineno=1947, col_offset=20)), Del(), lineno=1947, col_offset=16)], lineno=1947, col_offset=12)], [], lineno=1945, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=1948, col_offset=15), lineno=1948, col_offset=11), [Assign([Name('name', Store(), lineno=1949, col_offset=12)], Call(Name('repr', Load(), lineno=1949, col_offset=19), [Call(Name('id', Load(), lineno=1949, col_offset=24), [Name('self', Load(), lineno=1949, col_offset=27)], [], None, None, lineno=1949, col_offset=24)], [], None, None, lineno=1949, col_offset=19), lineno=1949, col_offset=12)], [], lineno=1948, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1950, col_offset=8), '_name', Store(), lineno=1950, col_offset=8)], Name('name', Load(), lineno=1950, col_offset=21), lineno=1950, col_offset=8), If(Compare(Attribute(Name('master', Load(), lineno=1951, col_offset=11), '_w', Load(), lineno=1951, col_offset=11), [Eq()], [Str('.', lineno=1951, col_offset=22)], lineno=1951, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1952, col_offset=12), '_w', Store(), lineno=1952, col_offset=12)], BinOp(Str('.', lineno=1952, col_offset=22), Add(), Name('name', Load(), lineno=1952, col_offset=28), lineno=1952, col_offset=22), lineno=1952, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1954, col_offset=12), '_w', Store(), lineno=1954, col_offset=12)], BinOp(BinOp(Attribute(Name('master', Load(), lineno=1954, col_offset=22), '_w', Load(), lineno=1954, col_offset=22), Add(), Str('.', lineno=1954, col_offset=34), lineno=1954, col_offset=22), Add(), Name('name', Load(), lineno=1954, col_offset=40), lineno=1954, col_offset=38), lineno=1954, col_offset=12)], lineno=1951, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1955, col_offset=8), 'children', Store(), lineno=1955, col_offset=8)], Dict([], [], lineno=1955, col_offset=24), lineno=1955, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1956, col_offset=11), '_name', Load(), lineno=1956, col_offset=11), [In()], [Attribute(Attribute(Name('self', Load(), lineno=1956, col_offset=25), 'master', Load(), lineno=1956, col_offset=25), 'children', Load(), lineno=1956, col_offset=25)], lineno=1956, col_offset=11), [Expr(Call(Attribute(Subscript(Attribute(Attribute(Name('self', Load(), lineno=1957, col_offset=12), 'master', Load(), lineno=1957, col_offset=12), 'children', Load(), lineno=1957, col_offset=12), Index(Attribute(Name('self', Load(), lineno=1957, col_offset=33), '_name', Load(), lineno=1957, col_offset=33)), Load(), lineno=1957, col_offset=12), 'destroy', Load(), lineno=1957, col_offset=12), [], [], None, None, lineno=1957, col_offset=12), lineno=1957, col_offset=12)], [], lineno=1956, col_offset=8), Assign([Subscript(Attribute(Attribute(Name('self', Load(), lineno=1958, col_offset=8), 'master', Load(), lineno=1958, col_offset=8), 'children', Load(), lineno=1958, col_offset=8), Index(Attribute(Name('self', Load(), lineno=1958, col_offset=29), '_name', Load(), lineno=1958, col_offset=29)), Store(), lineno=1958, col_offset=8)], Name('self', Load(), lineno=1958, col_offset=43), lineno=1958, col_offset=8)], [], lineno=1934, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1959, col_offset=17), Name('master', Param(), lineno=1959, col_offset=23), Name('widgetName', Param(), lineno=1959, col_offset=31), Name('cnf', Param(), lineno=1959, col_offset=43), Name('kw', Param(), lineno=1959, col_offset=51), Name('extra', Param(), lineno=1959, col_offset=58)], None, None, [Dict([], [], lineno=1959, col_offset=47), Dict([], [], lineno=1959, col_offset=54), Tuple([], Load(), lineno=1959, col_offset=64)]), [Expr(Str('Construct a widget with the parent widget MASTER, a name WIDGETNAME\n        and appropriate options.', lineno=1961, col_offset=-1), lineno=1961, col_offset=-1), If(Name('kw', Load(), lineno=1962, col_offset=11), [Assign([Name('cnf', Store(), lineno=1963, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=1963, col_offset=18), [Tuple([Name('cnf', Load(), lineno=1963, col_offset=29), Name('kw', Load(), lineno=1963, col_offset=34)], Load(), lineno=1963, col_offset=29)], [], None, None, lineno=1963, col_offset=18), lineno=1963, col_offset=12)], [], lineno=1962, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1964, col_offset=8), 'widgetName', Store(), lineno=1964, col_offset=8)], Name('widgetName', Load(), lineno=1964, col_offset=26), lineno=1964, col_offset=8), Expr(Call(Attribute(Name('BaseWidget', Load(), lineno=1965, col_offset=8), '_setup', Load(), lineno=1965, col_offset=8), [Name('self', Load(), lineno=1965, col_offset=26), Name('master', Load(), lineno=1965, col_offset=32), Name('cnf', Load(), lineno=1965, col_offset=40)], [], None, None, lineno=1965, col_offset=8), lineno=1965, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1966, col_offset=11), '_tclCommands', Load(), lineno=1966, col_offset=11), [Is()], [Name('None', Load(), lineno=1966, col_offset=32)], lineno=1966, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1967, col_offset=12), '_tclCommands', Store(), lineno=1967, col_offset=12)], List([], Load(), lineno=1967, col_offset=32), lineno=1967, col_offset=12)], [], lineno=1966, col_offset=8), Assign([Name('classes', Store(), lineno=1968, col_offset=8)], List([], Load(), lineno=1968, col_offset=18), lineno=1968, col_offset=8), For(Name('k', Store(), lineno=1969, col_offset=12), Call(Attribute(Name('cnf', Load(), lineno=1969, col_offset=17), 'keys', Load(), lineno=1969, col_offset=17), [], [], None, None, lineno=1969, col_offset=17), [If(Compare(Call(Name('type', Load(), lineno=1970, col_offset=15), [Name('k', Load(), lineno=1970, col_offset=20)], [], None, None, lineno=1970, col_offset=15), [Is()], [Name('ClassType', Load(), lineno=1970, col_offset=26)], lineno=1970, col_offset=15), [Expr(Call(Attribute(Name('classes', Load(), lineno=1971, col_offset=16), 'append', Load(), lineno=1971, col_offset=16), [Tuple([Name('k', Load(), lineno=1971, col_offset=32), Subscript(Name('cnf', Load(), lineno=1971, col_offset=35), Index(Name('k', Load(), lineno=1971, col_offset=39)), Load(), lineno=1971, col_offset=35)], Load(), lineno=1971, col_offset=32)], [], None, None, lineno=1971, col_offset=16), lineno=1971, col_offset=16), Delete([Subscript(Name('cnf', Load(), lineno=1972, col_offset=20), Index(Name('k', Load(), lineno=1972, col_offset=24)), Del(), lineno=1972, col_offset=20)], lineno=1972, col_offset=16)], [], lineno=1970, col_offset=12)], [], lineno=1969, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1973, col_offset=8), 'tk', Load(), lineno=1973, col_offset=8), 'call', Load(), lineno=1973, col_offset=8), [BinOp(BinOp(Tuple([Name('widgetName', Load(), lineno=1974, col_offset=13), Attribute(Name('self', Load(), lineno=1974, col_offset=25), '_w', Load(), lineno=1974, col_offset=25)], Load(), lineno=1974, col_offset=13), Add(), Name('extra', Load(), lineno=1974, col_offset=36), lineno=1974, col_offset=12), Add(), Call(Attribute(Name('self', Load(), lineno=1974, col_offset=44), '_options', Load(), lineno=1974, col_offset=44), [Name('cnf', Load(), lineno=1974, col_offset=58)], [], None, None, lineno=1974, col_offset=44), lineno=1974, col_offset=42)], [], None, None, lineno=1973, col_offset=8), lineno=1973, col_offset=8), For(Tuple([Name('k', Store(), lineno=1975, col_offset=12), Name('v', Store(), lineno=1975, col_offset=15)], Store(), lineno=1975, col_offset=12), Name('classes', Load(), lineno=1975, col_offset=20), [Expr(Call(Attribute(Name('k', Load(), lineno=1976, col_offset=12), 'configure', Load(), lineno=1976, col_offset=12), [Name('self', Load(), lineno=1976, col_offset=24), Name('v', Load(), lineno=1976, col_offset=30)], [], None, None, lineno=1976, col_offset=12), lineno=1976, col_offset=12)], [], lineno=1975, col_offset=8)], [], lineno=1959, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=1977, col_offset=16)], None, None, []), [Expr(Str('Destroy this and all descendants widgets.', lineno=1978, col_offset=8), lineno=1978, col_offset=8), For(Name('c', Store(), lineno=1979, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=1979, col_offset=17), 'children', Load(), lineno=1979, col_offset=17), 'values', Load(), lineno=1979, col_offset=17), [], [], None, None, lineno=1979, col_offset=17), [Expr(Call(Attribute(Name('c', Load(), lineno=1979, col_offset=41), 'destroy', Load(), lineno=1979, col_offset=41), [], [], None, None, lineno=1979, col_offset=41), lineno=1979, col_offset=41)], [], lineno=1979, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1980, col_offset=8), 'tk', Load(), lineno=1980, col_offset=8), 'call', Load(), lineno=1980, col_offset=8), [Str('destroy', lineno=1980, col_offset=21), Attribute(Name('self', Load(), lineno=1980, col_offset=32), '_w', Load(), lineno=1980, col_offset=32)], [], None, None, lineno=1980, col_offset=8), lineno=1980, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1981, col_offset=11), '_name', Load(), lineno=1981, col_offset=11), [In()], [Attribute(Attribute(Name('self', Load(), lineno=1981, col_offset=25), 'master', Load(), lineno=1981, col_offset=25), 'children', Load(), lineno=1981, col_offset=25)], lineno=1981, col_offset=11), [Delete([Subscript(Attribute(Attribute(Name('self', Load(), lineno=1982, col_offset=16), 'master', Load(), lineno=1982, col_offset=16), 'children', Load(), lineno=1982, col_offset=16), Index(Attribute(Name('self', Load(), lineno=1982, col_offset=37), '_name', Load(), lineno=1982, col_offset=37)), Del(), lineno=1982, col_offset=16)], lineno=1982, col_offset=12)], [], lineno=1981, col_offset=8), Expr(Call(Attribute(Name('Misc', Load(), lineno=1983, col_offset=8), 'destroy', Load(), lineno=1983, col_offset=8), [Name('self', Load(), lineno=1983, col_offset=21)], [], None, None, lineno=1983, col_offset=8), lineno=1983, col_offset=8)], [], lineno=1977, col_offset=4), FunctionDef('_do', arguments([Name('self', Param(), lineno=1984, col_offset=12), Name('name', Param(), lineno=1984, col_offset=18), Name('args', Param(), lineno=1984, col_offset=24)], None, None, [Tuple([], Load(), lineno=1984, col_offset=29)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1986, col_offset=15), 'tk', Load(), lineno=1986, col_offset=15), 'call', Load(), lineno=1986, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=1986, col_offset=29), '_w', Load(), lineno=1986, col_offset=29), Name('name', Load(), lineno=1986, col_offset=38)], Load(), lineno=1986, col_offset=29), Add(), Name('args', Load(), lineno=1986, col_offset=46), lineno=1986, col_offset=28)], [], None, None, lineno=1986, col_offset=15), lineno=1986, col_offset=8)], [], lineno=1984, col_offset=4)], [], lineno=1932, col_offset=0), ClassDef('Widget', [Name('BaseWidget', Load(), lineno=1988, col_offset=13), Name('Pack', Load(), lineno=1988, col_offset=25), Name('Place', Load(), lineno=1988, col_offset=31), Name('Grid', Load(), lineno=1988, col_offset=38)], [Expr(Str('Internal class.\n\n    Base class for a widget which can be positioned with the geometry managers\n    Pack, Place or Grid.', lineno=1992, col_offset=-1), lineno=1992, col_offset=-1), Pass( lineno=1993, col_offset=4)], [], lineno=1988, col_offset=0), ClassDef('Toplevel', [Name('BaseWidget', Load(), lineno=1995, col_offset=15), Name('Wm', Load(), lineno=1995, col_offset=27)], [Expr(Str('Toplevel widget, e.g. for dialogs.', lineno=1996, col_offset=4), lineno=1996, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1997, col_offset=17), Name('master', Param(), lineno=1997, col_offset=23), Name('cnf', Param(), lineno=1997, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=1997, col_offset=30), Dict([], [], lineno=1997, col_offset=40)]), [Expr(Str('Construct a toplevel widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, menu, relief, screen, takefocus,\n        use, visual, width.', lineno=2003, col_offset=-1), lineno=2003, col_offset=-1), If(Name('kw', Load(), lineno=2004, col_offset=11), [Assign([Name('cnf', Store(), lineno=2005, col_offset=12)], Call(Name('_cnfmerge', Load(), lineno=2005, col_offset=18), [Tuple([Name('cnf', Load(), lineno=2005, col_offset=29), Name('kw', Load(), lineno=2005, col_offset=34)], Load(), lineno=2005, col_offset=29)], [], None, None, lineno=2005, col_offset=18), lineno=2005, col_offset=12)], [], lineno=2004, col_offset=8), Assign([Name('extra', Store(), lineno=2006, col_offset=8)], Tuple([], Load(), lineno=2006, col_offset=16), lineno=2006, col_offset=8), For(Name('wmkey', Store(), lineno=2007, col_offset=12), List([Str('screen', lineno=2007, col_offset=22), Str('class_', lineno=2007, col_offset=32), Str('class', lineno=2007, col_offset=42), Str('visual', lineno=2007, col_offset=51), Str('colormap', lineno=2008, col_offset=18)], Load(), lineno=2007, col_offset=21), [If(Compare(Name('wmkey', Load(), lineno=2009, col_offset=15), [In()], [Name('cnf', Load(), lineno=2009, col_offset=24)], lineno=2009, col_offset=15), [Assign([Name('val', Store(), lineno=2010, col_offset=16)], Subscript(Name('cnf', Load(), lineno=2010, col_offset=22), Index(Name('wmkey', Load(), lineno=2010, col_offset=26)), Load(), lineno=2010, col_offset=22), lineno=2010, col_offset=16), If(Compare(Subscript(Name('wmkey', Load(), lineno=2013, col_offset=19), Index(Num(-1, lineno=2013, col_offset=26)), Load(), lineno=2013, col_offset=19), [Eq()], [Str('_', lineno=2013, col_offset=32)], lineno=2013, col_offset=19), [Assign([Name('opt', Store(), lineno=2013, col_offset=37)], BinOp(Str('-', lineno=2013, col_offset=43), Add(), Subscript(Name('wmkey', Load(), lineno=2013, col_offset=47), Slice(None, Num(-1, lineno=2013, col_offset=55), None), Load(), lineno=2013, col_offset=47), lineno=2013, col_offset=43), lineno=2013, col_offset=37)], [Assign([Name('opt', Store(), lineno=2014, col_offset=22)], BinOp(Str('-', lineno=2014, col_offset=28), Add(), Name('wmkey', Load(), lineno=2014, col_offset=32), lineno=2014, col_offset=28), lineno=2014, col_offset=22)], lineno=2013, col_offset=16), Assign([Name('extra', Store(), lineno=2015, col_offset=16)], BinOp(Name('extra', Load(), lineno=2015, col_offset=24), Add(), Tuple([Name('opt', Load(), lineno=2015, col_offset=33), Name('val', Load(), lineno=2015, col_offset=38)], Load(), lineno=2015, col_offset=33), lineno=2015, col_offset=24), lineno=2015, col_offset=16), Delete([Subscript(Name('cnf', Load(), lineno=2016, col_offset=20), Index(Name('wmkey', Load(), lineno=2016, col_offset=24)), Del(), lineno=2016, col_offset=20)], lineno=2016, col_offset=16)], [], lineno=2009, col_offset=12)], [], lineno=2007, col_offset=8), Expr(Call(Attribute(Name('BaseWidget', Load(), lineno=2017, col_offset=8), '__init__', Load(), lineno=2017, col_offset=8), [Name('self', Load(), lineno=2017, col_offset=28), Name('master', Load(), lineno=2017, col_offset=34), Str('toplevel', lineno=2017, col_offset=42), Name('cnf', Load(), lineno=2017, col_offset=54), Dict([], [], lineno=2017, col_offset=59), Name('extra', Load(), lineno=2017, col_offset=63)], [], None, None, lineno=2017, col_offset=8), lineno=2017, col_offset=8), Assign([Name('root', Store(), lineno=2018, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=2018, col_offset=15), '_root', Load(), lineno=2018, col_offset=15), [], [], None, None, lineno=2018, col_offset=15), lineno=2018, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2019, col_offset=8), 'iconname', Load(), lineno=2019, col_offset=8), [Call(Attribute(Name('root', Load(), lineno=2019, col_offset=22), 'iconname', Load(), lineno=2019, col_offset=22), [], [], None, None, lineno=2019, col_offset=22)], [], None, None, lineno=2019, col_offset=8), lineno=2019, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2020, col_offset=8), 'title', Load(), lineno=2020, col_offset=8), [Call(Attribute(Name('root', Load(), lineno=2020, col_offset=19), 'title', Load(), lineno=2020, col_offset=19), [], [], None, None, lineno=2020, col_offset=19)], [], None, None, lineno=2020, col_offset=8), lineno=2020, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2021, col_offset=8), 'protocol', Load(), lineno=2021, col_offset=8), [Str('WM_DELETE_WINDOW', lineno=2021, col_offset=22), Attribute(Name('self', Load(), lineno=2021, col_offset=42), 'destroy', Load(), lineno=2021, col_offset=42)], [], None, None, lineno=2021, col_offset=8), lineno=2021, col_offset=8)], [], lineno=1997, col_offset=4)], [], lineno=1995, col_offset=0), ClassDef('Button', [Name('Widget', Load(), lineno=2023, col_offset=13)], [Expr(Str('Button widget.', lineno=2024, col_offset=4), lineno=2024, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2025, col_offset=17), Name('master', Param(), lineno=2025, col_offset=23), Name('cnf', Param(), lineno=2025, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2025, col_offset=30), Dict([], [], lineno=2025, col_offset=40)]), [Expr(Str('Construct a button widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, repeatdelay,\n            repeatinterval, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, compound, default, height,\n            overrelief, state, width\n        ', lineno=2043, col_offset=-1), lineno=2043, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2044, col_offset=8), '__init__', Load(), lineno=2044, col_offset=8), [Name('self', Load(), lineno=2044, col_offset=24), Name('master', Load(), lineno=2044, col_offset=30), Str('button', lineno=2044, col_offset=38), Name('cnf', Load(), lineno=2044, col_offset=48), Name('kw', Load(), lineno=2044, col_offset=53)], [], None, None, lineno=2044, col_offset=8), lineno=2044, col_offset=8)], [], lineno=2025, col_offset=4), FunctionDef('tkButtonEnter', arguments([Name('self', Param(), lineno=2046, col_offset=22)], 'dummy', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2047, col_offset=8), 'tk', Load(), lineno=2047, col_offset=8), 'call', Load(), lineno=2047, col_offset=8), [Str('tkButtonEnter', lineno=2047, col_offset=21), Attribute(Name('self', Load(), lineno=2047, col_offset=38), '_w', Load(), lineno=2047, col_offset=38)], [], None, None, lineno=2047, col_offset=8), lineno=2047, col_offset=8)], [], lineno=2046, col_offset=4), FunctionDef('tkButtonLeave', arguments([Name('self', Param(), lineno=2049, col_offset=22)], 'dummy', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2050, col_offset=8), 'tk', Load(), lineno=2050, col_offset=8), 'call', Load(), lineno=2050, col_offset=8), [Str('tkButtonLeave', lineno=2050, col_offset=21), Attribute(Name('self', Load(), lineno=2050, col_offset=38), '_w', Load(), lineno=2050, col_offset=38)], [], None, None, lineno=2050, col_offset=8), lineno=2050, col_offset=8)], [], lineno=2049, col_offset=4), FunctionDef('tkButtonDown', arguments([Name('self', Param(), lineno=2052, col_offset=21)], 'dummy', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2053, col_offset=8), 'tk', Load(), lineno=2053, col_offset=8), 'call', Load(), lineno=2053, col_offset=8), [Str('tkButtonDown', lineno=2053, col_offset=21), Attribute(Name('self', Load(), lineno=2053, col_offset=37), '_w', Load(), lineno=2053, col_offset=37)], [], None, None, lineno=2053, col_offset=8), lineno=2053, col_offset=8)], [], lineno=2052, col_offset=4), FunctionDef('tkButtonUp', arguments([Name('self', Param(), lineno=2055, col_offset=19)], 'dummy', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2056, col_offset=8), 'tk', Load(), lineno=2056, col_offset=8), 'call', Load(), lineno=2056, col_offset=8), [Str('tkButtonUp', lineno=2056, col_offset=21), Attribute(Name('self', Load(), lineno=2056, col_offset=35), '_w', Load(), lineno=2056, col_offset=35)], [], None, None, lineno=2056, col_offset=8), lineno=2056, col_offset=8)], [], lineno=2055, col_offset=4), FunctionDef('tkButtonInvoke', arguments([Name('self', Param(), lineno=2058, col_offset=23)], 'dummy', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2059, col_offset=8), 'tk', Load(), lineno=2059, col_offset=8), 'call', Load(), lineno=2059, col_offset=8), [Str('tkButtonInvoke', lineno=2059, col_offset=21), Attribute(Name('self', Load(), lineno=2059, col_offset=39), '_w', Load(), lineno=2059, col_offset=39)], [], None, None, lineno=2059, col_offset=8), lineno=2059, col_offset=8)], [], lineno=2058, col_offset=4), FunctionDef('flash', arguments([Name('self', Param(), lineno=2061, col_offset=14)], None, None, []), [Expr(Str("Flash the button.\n\n        This is accomplished by redisplaying\n        the button several times, alternating between active and\n        normal colors. At the end of the flash the button is left\n        in the same normal/active state as when the command was\n        invoked. This command is ignored if the button's state is\n        disabled.\n        ", lineno=2070, col_offset=-1), lineno=2070, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2071, col_offset=8), 'tk', Load(), lineno=2071, col_offset=8), 'call', Load(), lineno=2071, col_offset=8), [Attribute(Name('self', Load(), lineno=2071, col_offset=21), '_w', Load(), lineno=2071, col_offset=21), Str('flash', lineno=2071, col_offset=30)], [], None, None, lineno=2071, col_offset=8), lineno=2071, col_offset=8)], [], lineno=2061, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=2073, col_offset=15)], None, None, []), [Expr(Str("Invoke the command associated with the button.\n\n        The return value is the return value from the command,\n        or an empty string if there is no command associated with\n        the button. This command is ignored if the button's state\n        is disabled.\n        ", lineno=2080, col_offset=-1), lineno=2080, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2081, col_offset=15), 'tk', Load(), lineno=2081, col_offset=15), 'call', Load(), lineno=2081, col_offset=15), [Attribute(Name('self', Load(), lineno=2081, col_offset=28), '_w', Load(), lineno=2081, col_offset=28), Str('invoke', lineno=2081, col_offset=37)], [], None, None, lineno=2081, col_offset=15), lineno=2081, col_offset=8)], [], lineno=2073, col_offset=4)], [], lineno=2023, col_offset=0), FunctionDef('AtEnd', arguments([], None, None, []), [Return(Str('end', lineno=2086, col_offset=11), lineno=2086, col_offset=4)], [], lineno=2085, col_offset=0), FunctionDef('AtInsert', arguments([], 'args', None, []), [Assign([Name('s', Store(), lineno=2088, col_offset=4)], Str('insert', lineno=2088, col_offset=8), lineno=2088, col_offset=4), For(Name('a', Store(), lineno=2089, col_offset=8), Name('args', Load(), lineno=2089, col_offset=13), [If(Name('a', Load(), lineno=2090, col_offset=11), [Assign([Name('s', Store(), lineno=2090, col_offset=14)], BinOp(Name('s', Load(), lineno=2090, col_offset=18), Add(), BinOp(Str(' ', lineno=2090, col_offset=23), Add(), Name('a', Load(), lineno=2090, col_offset=29), lineno=2090, col_offset=23), lineno=2090, col_offset=18), lineno=2090, col_offset=14)], [], lineno=2090, col_offset=8)], [], lineno=2089, col_offset=4), Return(Name('s', Load(), lineno=2091, col_offset=11), lineno=2091, col_offset=4)], [], lineno=2087, col_offset=0), FunctionDef('AtSelFirst', arguments([], None, None, []), [Return(Str('sel.first', lineno=2093, col_offset=11), lineno=2093, col_offset=4)], [], lineno=2092, col_offset=0), FunctionDef('AtSelLast', arguments([], None, None, []), [Return(Str('sel.last', lineno=2095, col_offset=11), lineno=2095, col_offset=4)], [], lineno=2094, col_offset=0), FunctionDef('At', arguments([Name('x', Param(), lineno=2096, col_offset=7), Name('y', Param(), lineno=2096, col_offset=10)], None, None, [Name('None', Load(), lineno=2096, col_offset=12)]), [If(Compare(Name('y', Load(), lineno=2097, col_offset=7), [Is()], [Name('None', Load(), lineno=2097, col_offset=12)], lineno=2097, col_offset=7), [Return(BinOp(Str('@%r', lineno=2098, col_offset=15), Mod(), Tuple([Name('x', Load(), lineno=2098, col_offset=24)], Load(), lineno=2098, col_offset=24), lineno=2098, col_offset=15), lineno=2098, col_offset=8)], [Return(BinOp(Str('@%r,%r', lineno=2100, col_offset=15), Mod(), Tuple([Name('x', Load(), lineno=2100, col_offset=27), Name('y', Load(), lineno=2100, col_offset=30)], Load(), lineno=2100, col_offset=27), lineno=2100, col_offset=15), lineno=2100, col_offset=8)], lineno=2097, col_offset=4)], [], lineno=2096, col_offset=0), ClassDef('Canvas', [Name('Widget', Load(), lineno=2102, col_offset=13), Name('XView', Load(), lineno=2102, col_offset=21), Name('YView', Load(), lineno=2102, col_offset=28)], [Expr(Str('Canvas widget to display graphical elements like lines or text.', lineno=2103, col_offset=4), lineno=2103, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2104, col_offset=17), Name('master', Param(), lineno=2104, col_offset=23), Name('cnf', Param(), lineno=2104, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2104, col_offset=30), Dict([], [], lineno=2104, col_offset=40)]), [Expr(Str('Construct a canvas widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, closeenough,\n        confine, cursor, height, highlightbackground, highlightcolor,\n        highlightthickness, insertbackground, insertborderwidth,\n        insertofftime, insertontime, insertwidth, offset, relief,\n        scrollregion, selectbackground, selectborderwidth, selectforeground,\n        state, takefocus, width, xscrollcommand, xscrollincrement,\n        yscrollcommand, yscrollincrement.', lineno=2113, col_offset=-1), lineno=2113, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2114, col_offset=8), '__init__', Load(), lineno=2114, col_offset=8), [Name('self', Load(), lineno=2114, col_offset=24), Name('master', Load(), lineno=2114, col_offset=30), Str('canvas', lineno=2114, col_offset=38), Name('cnf', Load(), lineno=2114, col_offset=48), Name('kw', Load(), lineno=2114, col_offset=53)], [], None, None, lineno=2114, col_offset=8), lineno=2114, col_offset=8)], [], lineno=2104, col_offset=4), FunctionDef('addtag', arguments([Name('self', Param(), lineno=2115, col_offset=15)], 'args', None, []), [Expr(Str('Internal function.', lineno=2116, col_offset=8), lineno=2116, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2117, col_offset=8), 'tk', Load(), lineno=2117, col_offset=8), 'call', Load(), lineno=2117, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2117, col_offset=22), '_w', Load(), lineno=2117, col_offset=22), Str('addtag', lineno=2117, col_offset=31)], Load(), lineno=2117, col_offset=22), Add(), Name('args', Load(), lineno=2117, col_offset=43), lineno=2117, col_offset=21)], [], None, None, lineno=2117, col_offset=8), lineno=2117, col_offset=8)], [], lineno=2115, col_offset=4), FunctionDef('addtag_above', arguments([Name('self', Param(), lineno=2118, col_offset=21), Name('newtag', Param(), lineno=2118, col_offset=27), Name('tagOrId', Param(), lineno=2118, col_offset=35)], None, None, []), [Expr(Str('Add tag NEWTAG to all items above TAGORID.', lineno=2119, col_offset=8), lineno=2119, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2120, col_offset=8), 'addtag', Load(), lineno=2120, col_offset=8), [Name('newtag', Load(), lineno=2120, col_offset=20), Str('above', lineno=2120, col_offset=28), Name('tagOrId', Load(), lineno=2120, col_offset=37)], [], None, None, lineno=2120, col_offset=8), lineno=2120, col_offset=8)], [], lineno=2118, col_offset=4), FunctionDef('addtag_all', arguments([Name('self', Param(), lineno=2121, col_offset=19), Name('newtag', Param(), lineno=2121, col_offset=25)], None, None, []), [Expr(Str('Add tag NEWTAG to all items.', lineno=2122, col_offset=8), lineno=2122, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2123, col_offset=8), 'addtag', Load(), lineno=2123, col_offset=8), [Name('newtag', Load(), lineno=2123, col_offset=20), Str('all', lineno=2123, col_offset=28)], [], None, None, lineno=2123, col_offset=8), lineno=2123, col_offset=8)], [], lineno=2121, col_offset=4), FunctionDef('addtag_below', arguments([Name('self', Param(), lineno=2124, col_offset=21), Name('newtag', Param(), lineno=2124, col_offset=27), Name('tagOrId', Param(), lineno=2124, col_offset=35)], None, None, []), [Expr(Str('Add tag NEWTAG to all items below TAGORID.', lineno=2125, col_offset=8), lineno=2125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2126, col_offset=8), 'addtag', Load(), lineno=2126, col_offset=8), [Name('newtag', Load(), lineno=2126, col_offset=20), Str('below', lineno=2126, col_offset=28), Name('tagOrId', Load(), lineno=2126, col_offset=37)], [], None, None, lineno=2126, col_offset=8), lineno=2126, col_offset=8)], [], lineno=2124, col_offset=4), FunctionDef('addtag_closest', arguments([Name('self', Param(), lineno=2127, col_offset=23), Name('newtag', Param(), lineno=2127, col_offset=29), Name('x', Param(), lineno=2127, col_offset=37), Name('y', Param(), lineno=2127, col_offset=40), Name('halo', Param(), lineno=2127, col_offset=43), Name('start', Param(), lineno=2127, col_offset=54)], None, None, [Name('None', Load(), lineno=2127, col_offset=48), Name('None', Load(), lineno=2127, col_offset=60)]), [Expr(Str('Add tag NEWTAG to item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.', lineno=2131, col_offset=-1), lineno=2131, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2132, col_offset=8), 'addtag', Load(), lineno=2132, col_offset=8), [Name('newtag', Load(), lineno=2132, col_offset=20), Str('closest', lineno=2132, col_offset=28), Name('x', Load(), lineno=2132, col_offset=39), Name('y', Load(), lineno=2132, col_offset=42), Name('halo', Load(), lineno=2132, col_offset=45), Name('start', Load(), lineno=2132, col_offset=51)], [], None, None, lineno=2132, col_offset=8), lineno=2132, col_offset=8)], [], lineno=2127, col_offset=4), FunctionDef('addtag_enclosed', arguments([Name('self', Param(), lineno=2133, col_offset=24), Name('newtag', Param(), lineno=2133, col_offset=30), Name('x1', Param(), lineno=2133, col_offset=38), Name('y1', Param(), lineno=2133, col_offset=42), Name('x2', Param(), lineno=2133, col_offset=46), Name('y2', Param(), lineno=2133, col_offset=50)], None, None, []), [Expr(Str('Add tag NEWTAG to all items in the rectangle defined\n        by X1,Y1,X2,Y2.', lineno=2135, col_offset=-1), lineno=2135, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2136, col_offset=8), 'addtag', Load(), lineno=2136, col_offset=8), [Name('newtag', Load(), lineno=2136, col_offset=20), Str('enclosed', lineno=2136, col_offset=28), Name('x1', Load(), lineno=2136, col_offset=40), Name('y1', Load(), lineno=2136, col_offset=44), Name('x2', Load(), lineno=2136, col_offset=48), Name('y2', Load(), lineno=2136, col_offset=52)], [], None, None, lineno=2136, col_offset=8), lineno=2136, col_offset=8)], [], lineno=2133, col_offset=4), FunctionDef('addtag_overlapping', arguments([Name('self', Param(), lineno=2137, col_offset=27), Name('newtag', Param(), lineno=2137, col_offset=33), Name('x1', Param(), lineno=2137, col_offset=41), Name('y1', Param(), lineno=2137, col_offset=45), Name('x2', Param(), lineno=2137, col_offset=49), Name('y2', Param(), lineno=2137, col_offset=53)], None, None, []), [Expr(Str('Add tag NEWTAG to all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.', lineno=2139, col_offset=-1), lineno=2139, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=2140, col_offset=8), 'addtag', Load(), lineno=2140, col_offset=8), [Name('newtag', Load(), lineno=2140, col_offset=20), Str('overlapping', lineno=2140, col_offset=28), Name('x1', Load(), lineno=2140, col_offset=43), Name('y1', Load(), lineno=2140, col_offset=47), Name('x2', Load(), lineno=2140, col_offset=51), Name('y2', Load(), lineno=2140, col_offset=55)], [], None, None, lineno=2140, col_offset=8), lineno=2140, col_offset=8)], [], lineno=2137, col_offset=4), FunctionDef('addtag_withtag', arguments([Name('self', Param(), lineno=2141, col_offset=23), Name('newtag', Param(), lineno=2141, col_offset=29), Name('tagOrId', Param(), lineno=2141, col_offset=37)], None, None, []), [Expr(Str('Add tag NEWTAG to all items with TAGORID.', lineno=2142, col_offset=8), lineno=2142, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2143, col_offset=8), 'addtag', Load(), lineno=2143, col_offset=8), [Name('newtag', Load(), lineno=2143, col_offset=20), Str('withtag', lineno=2143, col_offset=28), Name('tagOrId', Load(), lineno=2143, col_offset=39)], [], None, None, lineno=2143, col_offset=8), lineno=2143, col_offset=8)], [], lineno=2141, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=2144, col_offset=13)], 'args', None, []), [Expr(Str('Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses all items with tags specified as arguments.', lineno=2146, col_offset=-1), lineno=2146, col_offset=-1), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=2147, col_offset=15), '_getints', Load(), lineno=2147, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2148, col_offset=12), 'tk', Load(), lineno=2148, col_offset=12), 'call', Load(), lineno=2148, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2148, col_offset=26), '_w', Load(), lineno=2148, col_offset=26), Str('bbox', lineno=2148, col_offset=35)], Load(), lineno=2148, col_offset=26), Add(), Name('args', Load(), lineno=2148, col_offset=45), lineno=2148, col_offset=25)], [], None, None, lineno=2148, col_offset=12)], [], None, None, lineno=2147, col_offset=15), Name('None', Load(), lineno=2148, col_offset=55)], lineno=2147, col_offset=15), lineno=2147, col_offset=8)], [], lineno=2144, col_offset=4), FunctionDef('tag_unbind', arguments([Name('self', Param(), lineno=2149, col_offset=19), Name('tagOrId', Param(), lineno=2149, col_offset=25), Name('sequence', Param(), lineno=2149, col_offset=34), Name('funcid', Param(), lineno=2149, col_offset=44)], None, None, [Name('None', Load(), lineno=2149, col_offset=51)]), [Expr(Str('Unbind for all items with TAGORID for event SEQUENCE  the\n        function identified with FUNCID.', lineno=2151, col_offset=-1), lineno=2151, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2152, col_offset=8), 'tk', Load(), lineno=2152, col_offset=8), 'call', Load(), lineno=2152, col_offset=8), [Attribute(Name('self', Load(), lineno=2152, col_offset=21), '_w', Load(), lineno=2152, col_offset=21), Str('bind', lineno=2152, col_offset=30), Name('tagOrId', Load(), lineno=2152, col_offset=38), Name('sequence', Load(), lineno=2152, col_offset=47), Str('', lineno=2152, col_offset=57)], [], None, None, lineno=2152, col_offset=8), lineno=2152, col_offset=8), If(Name('funcid', Load(), lineno=2153, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=2154, col_offset=12), 'deletecommand', Load(), lineno=2154, col_offset=12), [Name('funcid', Load(), lineno=2154, col_offset=31)], [], None, None, lineno=2154, col_offset=12), lineno=2154, col_offset=12)], [], lineno=2153, col_offset=8)], [], lineno=2149, col_offset=4), FunctionDef('tag_bind', arguments([Name('self', Param(), lineno=2155, col_offset=17), Name('tagOrId', Param(), lineno=2155, col_offset=23), Name('sequence', Param(), lineno=2155, col_offset=32), Name('func', Param(), lineno=2155, col_offset=47), Name('add', Param(), lineno=2155, col_offset=58)], None, None, [Name('None', Load(), lineno=2155, col_offset=41), Name('None', Load(), lineno=2155, col_offset=52), Name('None', Load(), lineno=2155, col_offset=62)]), [Expr(Str('Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.', lineno=2160, col_offset=-1), lineno=2160, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2161, col_offset=15), '_bind', Load(), lineno=2161, col_offset=15), [Tuple([Attribute(Name('self', Load(), lineno=2161, col_offset=27), '_w', Load(), lineno=2161, col_offset=27), Str('bind', lineno=2161, col_offset=36), Name('tagOrId', Load(), lineno=2161, col_offset=44)], Load(), lineno=2161, col_offset=27), Name('sequence', Load(), lineno=2162, col_offset=18), Name('func', Load(), lineno=2162, col_offset=28), Name('add', Load(), lineno=2162, col_offset=34)], [], None, None, lineno=2161, col_offset=15), lineno=2161, col_offset=8)], [], lineno=2155, col_offset=4), FunctionDef('canvasx', arguments([Name('self', Param(), lineno=2163, col_offset=16), Name('screenx', Param(), lineno=2163, col_offset=22), Name('gridspacing', Param(), lineno=2163, col_offset=31)], None, None, [Name('None', Load(), lineno=2163, col_offset=43)]), [Expr(Str('Return the canvas x coordinate of pixel position SCREENX rounded\n        to nearest multiple of GRIDSPACING units.', lineno=2165, col_offset=-1), lineno=2165, col_offset=-1), Return(Call(Name('getdouble', Load(), lineno=2166, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2166, col_offset=25), 'tk', Load(), lineno=2166, col_offset=25), 'call', Load(), lineno=2166, col_offset=25), [Attribute(Name('self', Load(), lineno=2167, col_offset=12), '_w', Load(), lineno=2167, col_offset=12), Str('canvasx', lineno=2167, col_offset=21), Name('screenx', Load(), lineno=2167, col_offset=32), Name('gridspacing', Load(), lineno=2167, col_offset=41)], [], None, None, lineno=2166, col_offset=25)], [], None, None, lineno=2166, col_offset=15), lineno=2166, col_offset=8)], [], lineno=2163, col_offset=4), FunctionDef('canvasy', arguments([Name('self', Param(), lineno=2168, col_offset=16), Name('screeny', Param(), lineno=2168, col_offset=22), Name('gridspacing', Param(), lineno=2168, col_offset=31)], None, None, [Name('None', Load(), lineno=2168, col_offset=43)]), [Expr(Str('Return the canvas y coordinate of pixel position SCREENY rounded\n        to nearest multiple of GRIDSPACING units.', lineno=2170, col_offset=-1), lineno=2170, col_offset=-1), Return(Call(Name('getdouble', Load(), lineno=2171, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2171, col_offset=25), 'tk', Load(), lineno=2171, col_offset=25), 'call', Load(), lineno=2171, col_offset=25), [Attribute(Name('self', Load(), lineno=2172, col_offset=12), '_w', Load(), lineno=2172, col_offset=12), Str('canvasy', lineno=2172, col_offset=21), Name('screeny', Load(), lineno=2172, col_offset=32), Name('gridspacing', Load(), lineno=2172, col_offset=41)], [], None, None, lineno=2171, col_offset=25)], [], None, None, lineno=2171, col_offset=15), lineno=2171, col_offset=8)], [], lineno=2168, col_offset=4), FunctionDef('coords', arguments([Name('self', Param(), lineno=2173, col_offset=15)], 'args', None, []), [Expr(Str('Return a list of coordinates for the item given in ARGS.', lineno=2174, col_offset=8), lineno=2174, col_offset=8), Return(Call(Name('map', Load(), lineno=2176, col_offset=15), [Name('getdouble', Load(), lineno=2176, col_offset=19), Call(Attribute(Attribute(Name('self', Load(), lineno=2177, col_offset=27), 'tk', Load(), lineno=2177, col_offset=27), 'splitlist', Load(), lineno=2177, col_offset=27), [Call(Attribute(Attribute(Name('self', Load(), lineno=2178, col_offset=19), 'tk', Load(), lineno=2178, col_offset=19), 'call', Load(), lineno=2178, col_offset=19), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2178, col_offset=33), '_w', Load(), lineno=2178, col_offset=33), Str('coords', lineno=2178, col_offset=42)], Load(), lineno=2178, col_offset=33), Add(), Name('args', Load(), lineno=2178, col_offset=54), lineno=2178, col_offset=32)], [], None, None, lineno=2178, col_offset=19)], [], None, None, lineno=2177, col_offset=27)], [], None, None, lineno=2176, col_offset=15), lineno=2176, col_offset=8)], [], lineno=2173, col_offset=4), FunctionDef('_create', arguments([Name('self', Param(), lineno=2179, col_offset=16), Name('itemType', Param(), lineno=2179, col_offset=22), Name('args', Param(), lineno=2179, col_offset=32), Name('kw', Param(), lineno=2179, col_offset=38)], None, None, []), [Expr(Str('Internal function.', lineno=2180, col_offset=8), lineno=2180, col_offset=8), Assign([Name('args', Store(), lineno=2181, col_offset=8)], Call(Name('_flatten', Load(), lineno=2181, col_offset=15), [Name('args', Load(), lineno=2181, col_offset=24)], [], None, None, lineno=2181, col_offset=15), lineno=2181, col_offset=8), Assign([Name('cnf', Store(), lineno=2182, col_offset=8)], Subscript(Name('args', Load(), lineno=2182, col_offset=14), Index(Num(-1, lineno=2182, col_offset=20)), Load(), lineno=2182, col_offset=14), lineno=2182, col_offset=8), If(Compare(Call(Name('type', Load(), lineno=2183, col_offset=11), [Name('cnf', Load(), lineno=2183, col_offset=16)], [], None, None, lineno=2183, col_offset=11), [In()], [Tuple([Name('DictionaryType', Load(), lineno=2183, col_offset=25), Name('TupleType', Load(), lineno=2183, col_offset=41)], Load(), lineno=2183, col_offset=25)], lineno=2183, col_offset=11), [Assign([Name('args', Store(), lineno=2184, col_offset=12)], Subscript(Name('args', Load(), lineno=2184, col_offset=19), Slice(None, Num(-1, lineno=2184, col_offset=26), None), Load(), lineno=2184, col_offset=19), lineno=2184, col_offset=12)], [Assign([Name('cnf', Store(), lineno=2186, col_offset=12)], Dict([], [], lineno=2186, col_offset=18), lineno=2186, col_offset=12)], lineno=2183, col_offset=8), Return(Call(Name('getint', Load(), lineno=2187, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2187, col_offset=22), 'tk', Load(), lineno=2187, col_offset=22), 'call', Load(), lineno=2187, col_offset=22), [Attribute(Name('self', Load(), lineno=2188, col_offset=12), '_w', Load(), lineno=2188, col_offset=12), Str('create', lineno=2188, col_offset=21), Name('itemType', Load(), lineno=2188, col_offset=31)], [], BinOp(Name('args', Load(), lineno=2189, col_offset=14), Add(), Call(Attribute(Name('self', Load(), lineno=2189, col_offset=21), '_options', Load(), lineno=2189, col_offset=21), [Name('cnf', Load(), lineno=2189, col_offset=35), Name('kw', Load(), lineno=2189, col_offset=40)], [], None, None, lineno=2189, col_offset=21), lineno=2189, col_offset=14), None, lineno=2187, col_offset=22)], [], None, None, lineno=2187, col_offset=15), lineno=2187, col_offset=8)], [], lineno=2179, col_offset=4), FunctionDef('create_arc', arguments([Name('self', Param(), lineno=2190, col_offset=19)], 'args', 'kw', []), [Expr(Str('Create arc shaped region with coordinates x1,y1,x2,y2.', lineno=2191, col_offset=8), lineno=2191, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2192, col_offset=15), '_create', Load(), lineno=2192, col_offset=15), [Str('arc', lineno=2192, col_offset=28), Name('args', Load(), lineno=2192, col_offset=35), Name('kw', Load(), lineno=2192, col_offset=41)], [], None, None, lineno=2192, col_offset=15), lineno=2192, col_offset=8)], [], lineno=2190, col_offset=4), FunctionDef('create_bitmap', arguments([Name('self', Param(), lineno=2193, col_offset=22)], 'args', 'kw', []), [Expr(Str('Create bitmap with coordinates x1,y1.', lineno=2194, col_offset=8), lineno=2194, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2195, col_offset=15), '_create', Load(), lineno=2195, col_offset=15), [Str('bitmap', lineno=2195, col_offset=28), Name('args', Load(), lineno=2195, col_offset=38), Name('kw', Load(), lineno=2195, col_offset=44)], [], None, None, lineno=2195, col_offset=15), lineno=2195, col_offset=8)], [], lineno=2193, col_offset=4), FunctionDef('create_image', arguments([Name('self', Param(), lineno=2196, col_offset=21)], 'args', 'kw', []), [Expr(Str('Create image item with coordinates x1,y1.', lineno=2197, col_offset=8), lineno=2197, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2198, col_offset=15), '_create', Load(), lineno=2198, col_offset=15), [Str('image', lineno=2198, col_offset=28), Name('args', Load(), lineno=2198, col_offset=37), Name('kw', Load(), lineno=2198, col_offset=43)], [], None, None, lineno=2198, col_offset=15), lineno=2198, col_offset=8)], [], lineno=2196, col_offset=4), FunctionDef('create_line', arguments([Name('self', Param(), lineno=2199, col_offset=20)], 'args', 'kw', []), [Expr(Str('Create line with coordinates x1,y1,...,xn,yn.', lineno=2200, col_offset=8), lineno=2200, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2201, col_offset=15), '_create', Load(), lineno=2201, col_offset=15), [Str('line', lineno=2201, col_offset=28), Name('args', Load(), lineno=2201, col_offset=36), Name('kw', Load(), lineno=2201, col_offset=42)], [], None, None, lineno=2201, col_offset=15), lineno=2201, col_offset=8)], [], lineno=2199, col_offset=4), FunctionDef('create_oval', arguments([Name('self', Param(), lineno=2202, col_offset=20)], 'args', 'kw', []), [Expr(Str('Create oval with coordinates x1,y1,x2,y2.', lineno=2203, col_offset=8), lineno=2203, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2204, col_offset=15), '_create', Load(), lineno=2204, col_offset=15), [Str('oval', lineno=2204, col_offset=28), Name('args', Load(), lineno=2204, col_offset=36), Name('kw', Load(), lineno=2204, col_offset=42)], [], None, None, lineno=2204, col_offset=15), lineno=2204, col_offset=8)], [], lineno=2202, col_offset=4), FunctionDef('create_polygon', arguments([Name('self', Param(), lineno=2205, col_offset=23)], 'args', 'kw', []), [Expr(Str('Create polygon with coordinates x1,y1,...,xn,yn.', lineno=2206, col_offset=8), lineno=2206, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2207, col_offset=15), '_create', Load(), lineno=2207, col_offset=15), [Str('polygon', lineno=2207, col_offset=28), Name('args', Load(), lineno=2207, col_offset=39), Name('kw', Load(), lineno=2207, col_offset=45)], [], None, None, lineno=2207, col_offset=15), lineno=2207, col_offset=8)], [], lineno=2205, col_offset=4), FunctionDef('create_rectangle', arguments([Name('self', Param(), lineno=2208, col_offset=25)], 'args', 'kw', []), [Expr(Str('Create rectangle with coordinates x1,y1,x2,y2.', lineno=2209, col_offset=8), lineno=2209, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2210, col_offset=15), '_create', Load(), lineno=2210, col_offset=15), [Str('rectangle', lineno=2210, col_offset=28), Name('args', Load(), lineno=2210, col_offset=41), Name('kw', Load(), lineno=2210, col_offset=47)], [], None, None, lineno=2210, col_offset=15), lineno=2210, col_offset=8)], [], lineno=2208, col_offset=4), FunctionDef('create_text', arguments([Name('self', Param(), lineno=2211, col_offset=20)], 'args', 'kw', []), [Expr(Str('Create text with coordinates x1,y1.', lineno=2212, col_offset=8), lineno=2212, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2213, col_offset=15), '_create', Load(), lineno=2213, col_offset=15), [Str('text', lineno=2213, col_offset=28), Name('args', Load(), lineno=2213, col_offset=36), Name('kw', Load(), lineno=2213, col_offset=42)], [], None, None, lineno=2213, col_offset=15), lineno=2213, col_offset=8)], [], lineno=2211, col_offset=4), FunctionDef('create_window', arguments([Name('self', Param(), lineno=2214, col_offset=22)], 'args', 'kw', []), [Expr(Str('Create window with coordinates x1,y1,x2,y2.', lineno=2215, col_offset=8), lineno=2215, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2216, col_offset=15), '_create', Load(), lineno=2216, col_offset=15), [Str('window', lineno=2216, col_offset=28), Name('args', Load(), lineno=2216, col_offset=38), Name('kw', Load(), lineno=2216, col_offset=44)], [], None, None, lineno=2216, col_offset=15), lineno=2216, col_offset=8)], [], lineno=2214, col_offset=4), FunctionDef('dchars', arguments([Name('self', Param(), lineno=2217, col_offset=15)], 'args', None, []), [Expr(Str('Delete characters of text items identified by tag or id in ARGS (possibly\n        several times) from FIRST to LAST character (including).', lineno=2219, col_offset=-1), lineno=2219, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2220, col_offset=8), 'tk', Load(), lineno=2220, col_offset=8), 'call', Load(), lineno=2220, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2220, col_offset=22), '_w', Load(), lineno=2220, col_offset=22), Str('dchars', lineno=2220, col_offset=31)], Load(), lineno=2220, col_offset=22), Add(), Name('args', Load(), lineno=2220, col_offset=43), lineno=2220, col_offset=21)], [], None, None, lineno=2220, col_offset=8), lineno=2220, col_offset=8)], [], lineno=2217, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=2221, col_offset=15)], 'args', None, []), [Expr(Str('Delete items identified by all tag or ids contained in ARGS.', lineno=2222, col_offset=8), lineno=2222, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2223, col_offset=8), 'tk', Load(), lineno=2223, col_offset=8), 'call', Load(), lineno=2223, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2223, col_offset=22), '_w', Load(), lineno=2223, col_offset=22), Str('delete', lineno=2223, col_offset=31)], Load(), lineno=2223, col_offset=22), Add(), Name('args', Load(), lineno=2223, col_offset=43), lineno=2223, col_offset=21)], [], None, None, lineno=2223, col_offset=8), lineno=2223, col_offset=8)], [], lineno=2221, col_offset=4), FunctionDef('dtag', arguments([Name('self', Param(), lineno=2224, col_offset=13)], 'args', None, []), [Expr(Str('Delete tag or id given as last arguments in ARGS from items\n        identified by first argument in ARGS.', lineno=2226, col_offset=-1), lineno=2226, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2227, col_offset=8), 'tk', Load(), lineno=2227, col_offset=8), 'call', Load(), lineno=2227, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2227, col_offset=22), '_w', Load(), lineno=2227, col_offset=22), Str('dtag', lineno=2227, col_offset=31)], Load(), lineno=2227, col_offset=22), Add(), Name('args', Load(), lineno=2227, col_offset=41), lineno=2227, col_offset=21)], [], None, None, lineno=2227, col_offset=8), lineno=2227, col_offset=8)], [], lineno=2224, col_offset=4), FunctionDef('find', arguments([Name('self', Param(), lineno=2228, col_offset=13)], 'args', None, []), [Expr(Str('Internal function.', lineno=2229, col_offset=8), lineno=2229, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=2230, col_offset=15), '_getints', Load(), lineno=2230, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2231, col_offset=12), 'tk', Load(), lineno=2231, col_offset=12), 'call', Load(), lineno=2231, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2231, col_offset=26), '_w', Load(), lineno=2231, col_offset=26), Str('find', lineno=2231, col_offset=35)], Load(), lineno=2231, col_offset=26), Add(), Name('args', Load(), lineno=2231, col_offset=45), lineno=2231, col_offset=25)], [], None, None, lineno=2231, col_offset=12)], [], None, None, lineno=2230, col_offset=15), Tuple([], Load(), lineno=2231, col_offset=55)], lineno=2230, col_offset=15), lineno=2230, col_offset=8)], [], lineno=2228, col_offset=4), FunctionDef('find_above', arguments([Name('self', Param(), lineno=2232, col_offset=19), Name('tagOrId', Param(), lineno=2232, col_offset=25)], None, None, []), [Expr(Str('Return items above TAGORID.', lineno=2233, col_offset=8), lineno=2233, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2234, col_offset=15), 'find', Load(), lineno=2234, col_offset=15), [Str('above', lineno=2234, col_offset=25), Name('tagOrId', Load(), lineno=2234, col_offset=34)], [], None, None, lineno=2234, col_offset=15), lineno=2234, col_offset=8)], [], lineno=2232, col_offset=4), FunctionDef('find_all', arguments([Name('self', Param(), lineno=2235, col_offset=17)], None, None, []), [Expr(Str('Return all items.', lineno=2236, col_offset=8), lineno=2236, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2237, col_offset=15), 'find', Load(), lineno=2237, col_offset=15), [Str('all', lineno=2237, col_offset=25)], [], None, None, lineno=2237, col_offset=15), lineno=2237, col_offset=8)], [], lineno=2235, col_offset=4), FunctionDef('find_below', arguments([Name('self', Param(), lineno=2238, col_offset=19), Name('tagOrId', Param(), lineno=2238, col_offset=25)], None, None, []), [Expr(Str('Return all items below TAGORID.', lineno=2239, col_offset=8), lineno=2239, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2240, col_offset=15), 'find', Load(), lineno=2240, col_offset=15), [Str('below', lineno=2240, col_offset=25), Name('tagOrId', Load(), lineno=2240, col_offset=34)], [], None, None, lineno=2240, col_offset=15), lineno=2240, col_offset=8)], [], lineno=2238, col_offset=4), FunctionDef('find_closest', arguments([Name('self', Param(), lineno=2241, col_offset=21), Name('x', Param(), lineno=2241, col_offset=27), Name('y', Param(), lineno=2241, col_offset=30), Name('halo', Param(), lineno=2241, col_offset=33), Name('start', Param(), lineno=2241, col_offset=44)], None, None, [Name('None', Load(), lineno=2241, col_offset=38), Name('None', Load(), lineno=2241, col_offset=50)]), [Expr(Str('Return item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.', lineno=2245, col_offset=-1), lineno=2245, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2246, col_offset=15), 'find', Load(), lineno=2246, col_offset=15), [Str('closest', lineno=2246, col_offset=25), Name('x', Load(), lineno=2246, col_offset=36), Name('y', Load(), lineno=2246, col_offset=39), Name('halo', Load(), lineno=2246, col_offset=42), Name('start', Load(), lineno=2246, col_offset=48)], [], None, None, lineno=2246, col_offset=15), lineno=2246, col_offset=8)], [], lineno=2241, col_offset=4), FunctionDef('find_enclosed', arguments([Name('self', Param(), lineno=2247, col_offset=22), Name('x1', Param(), lineno=2247, col_offset=28), Name('y1', Param(), lineno=2247, col_offset=32), Name('x2', Param(), lineno=2247, col_offset=36), Name('y2', Param(), lineno=2247, col_offset=40)], None, None, []), [Expr(Str('Return all items in rectangle defined\n        by X1,Y1,X2,Y2.', lineno=2249, col_offset=-1), lineno=2249, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2250, col_offset=15), 'find', Load(), lineno=2250, col_offset=15), [Str('enclosed', lineno=2250, col_offset=25), Name('x1', Load(), lineno=2250, col_offset=37), Name('y1', Load(), lineno=2250, col_offset=41), Name('x2', Load(), lineno=2250, col_offset=45), Name('y2', Load(), lineno=2250, col_offset=49)], [], None, None, lineno=2250, col_offset=15), lineno=2250, col_offset=8)], [], lineno=2247, col_offset=4), FunctionDef('find_overlapping', arguments([Name('self', Param(), lineno=2251, col_offset=25), Name('x1', Param(), lineno=2251, col_offset=31), Name('y1', Param(), lineno=2251, col_offset=35), Name('x2', Param(), lineno=2251, col_offset=39), Name('y2', Param(), lineno=2251, col_offset=43)], None, None, []), [Expr(Str('Return all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.', lineno=2253, col_offset=-1), lineno=2253, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2254, col_offset=15), 'find', Load(), lineno=2254, col_offset=15), [Str('overlapping', lineno=2254, col_offset=25), Name('x1', Load(), lineno=2254, col_offset=40), Name('y1', Load(), lineno=2254, col_offset=44), Name('x2', Load(), lineno=2254, col_offset=48), Name('y2', Load(), lineno=2254, col_offset=52)], [], None, None, lineno=2254, col_offset=15), lineno=2254, col_offset=8)], [], lineno=2251, col_offset=4), FunctionDef('find_withtag', arguments([Name('self', Param(), lineno=2255, col_offset=21), Name('tagOrId', Param(), lineno=2255, col_offset=27)], None, None, []), [Expr(Str('Return all items with TAGORID.', lineno=2256, col_offset=8), lineno=2256, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2257, col_offset=15), 'find', Load(), lineno=2257, col_offset=15), [Str('withtag', lineno=2257, col_offset=25), Name('tagOrId', Load(), lineno=2257, col_offset=36)], [], None, None, lineno=2257, col_offset=15), lineno=2257, col_offset=8)], [], lineno=2255, col_offset=4), FunctionDef('focus', arguments([Name('self', Param(), lineno=2258, col_offset=14)], 'args', None, []), [Expr(Str('Set focus to the first item specified in ARGS.', lineno=2259, col_offset=8), lineno=2259, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2260, col_offset=15), 'tk', Load(), lineno=2260, col_offset=15), 'call', Load(), lineno=2260, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2260, col_offset=29), '_w', Load(), lineno=2260, col_offset=29), Str('focus', lineno=2260, col_offset=38)], Load(), lineno=2260, col_offset=29), Add(), Name('args', Load(), lineno=2260, col_offset=49), lineno=2260, col_offset=28)], [], None, None, lineno=2260, col_offset=15), lineno=2260, col_offset=8)], [], lineno=2258, col_offset=4), FunctionDef('gettags', arguments([Name('self', Param(), lineno=2261, col_offset=16)], 'args', None, []), [Expr(Str('Return tags associated with the first item specified in ARGS.', lineno=2262, col_offset=8), lineno=2262, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2263, col_offset=15), 'tk', Load(), lineno=2263, col_offset=15), 'splitlist', Load(), lineno=2263, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2264, col_offset=12), 'tk', Load(), lineno=2264, col_offset=12), 'call', Load(), lineno=2264, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2264, col_offset=26), '_w', Load(), lineno=2264, col_offset=26), Str('gettags', lineno=2264, col_offset=35)], Load(), lineno=2264, col_offset=26), Add(), Name('args', Load(), lineno=2264, col_offset=48), lineno=2264, col_offset=25)], [], None, None, lineno=2264, col_offset=12)], [], None, None, lineno=2263, col_offset=15), lineno=2263, col_offset=8)], [], lineno=2261, col_offset=4), FunctionDef('icursor', arguments([Name('self', Param(), lineno=2265, col_offset=16)], 'args', None, []), [Expr(Str('Set cursor at position POS in the item identified by TAGORID.\n        In ARGS TAGORID must be first.', lineno=2267, col_offset=-1), lineno=2267, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2268, col_offset=8), 'tk', Load(), lineno=2268, col_offset=8), 'call', Load(), lineno=2268, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2268, col_offset=22), '_w', Load(), lineno=2268, col_offset=22), Str('icursor', lineno=2268, col_offset=31)], Load(), lineno=2268, col_offset=22), Add(), Name('args', Load(), lineno=2268, col_offset=44), lineno=2268, col_offset=21)], [], None, None, lineno=2268, col_offset=8), lineno=2268, col_offset=8)], [], lineno=2265, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=2269, col_offset=14)], 'args', None, []), [Expr(Str('Return position of cursor as integer in item specified in ARGS.', lineno=2270, col_offset=8), lineno=2270, col_offset=8), Return(Call(Name('getint', Load(), lineno=2271, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2271, col_offset=22), 'tk', Load(), lineno=2271, col_offset=22), 'call', Load(), lineno=2271, col_offset=22), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2271, col_offset=36), '_w', Load(), lineno=2271, col_offset=36), Str('index', lineno=2271, col_offset=45)], Load(), lineno=2271, col_offset=36), Add(), Name('args', Load(), lineno=2271, col_offset=56), lineno=2271, col_offset=35)], [], None, None, lineno=2271, col_offset=22)], [], None, None, lineno=2271, col_offset=15), lineno=2271, col_offset=8)], [], lineno=2269, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=2272, col_offset=15)], 'args', None, []), [Expr(Str('Insert TEXT in item TAGORID at position POS. ARGS must\n        be TAGORID POS TEXT.', lineno=2274, col_offset=-1), lineno=2274, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2275, col_offset=8), 'tk', Load(), lineno=2275, col_offset=8), 'call', Load(), lineno=2275, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2275, col_offset=22), '_w', Load(), lineno=2275, col_offset=22), Str('insert', lineno=2275, col_offset=31)], Load(), lineno=2275, col_offset=22), Add(), Name('args', Load(), lineno=2275, col_offset=43), lineno=2275, col_offset=21)], [], None, None, lineno=2275, col_offset=8), lineno=2275, col_offset=8)], [], lineno=2272, col_offset=4), FunctionDef('itemcget', arguments([Name('self', Param(), lineno=2276, col_offset=17), Name('tagOrId', Param(), lineno=2276, col_offset=23), Name('option', Param(), lineno=2276, col_offset=32)], None, None, []), [Expr(Str('Return the resource value for an OPTION for item TAGORID.', lineno=2277, col_offset=8), lineno=2277, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2278, col_offset=15), 'tk', Load(), lineno=2278, col_offset=15), 'call', Load(), lineno=2278, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2279, col_offset=13), '_w', Load(), lineno=2279, col_offset=13), Str('itemcget', lineno=2279, col_offset=22)], Load(), lineno=2279, col_offset=13), Add(), Tuple([Name('tagOrId', Load(), lineno=2279, col_offset=37), BinOp(Str('-', lineno=2279, col_offset=46), Add(), Name('option', Load(), lineno=2279, col_offset=50), lineno=2279, col_offset=46)], Load(), lineno=2279, col_offset=37), lineno=2279, col_offset=12)], [], None, None, lineno=2278, col_offset=15), lineno=2278, col_offset=8)], [], lineno=2276, col_offset=4), FunctionDef('itemconfigure', arguments([Name('self', Param(), lineno=2280, col_offset=22), Name('tagOrId', Param(), lineno=2280, col_offset=28), Name('cnf', Param(), lineno=2280, col_offset=37)], None, 'kw', [Name('None', Load(), lineno=2280, col_offset=41)]), [Expr(Str('Configure resources of an item TAGORID.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method without arguments.\n        ', lineno=2286, col_offset=-1), lineno=2286, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2287, col_offset=15), '_configure', Load(), lineno=2287, col_offset=15), [Tuple([Str('itemconfigure', lineno=2287, col_offset=32), Name('tagOrId', Load(), lineno=2287, col_offset=49)], Load(), lineno=2287, col_offset=32), Name('cnf', Load(), lineno=2287, col_offset=59), Name('kw', Load(), lineno=2287, col_offset=64)], [], None, None, lineno=2287, col_offset=15), lineno=2287, col_offset=8)], [], lineno=2280, col_offset=4), Assign([Name('itemconfig', Store(), lineno=2288, col_offset=4)], Name('itemconfigure', Load(), lineno=2288, col_offset=17), lineno=2288, col_offset=4), FunctionDef('tag_lower', arguments([Name('self', Param(), lineno=2293, col_offset=18)], 'args', None, []), [Expr(Str('Lower an item TAGORID given in ARGS\n        (optional below another item).', lineno=2295, col_offset=-1), lineno=2295, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2296, col_offset=8), 'tk', Load(), lineno=2296, col_offset=8), 'call', Load(), lineno=2296, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2296, col_offset=22), '_w', Load(), lineno=2296, col_offset=22), Str('lower', lineno=2296, col_offset=31)], Load(), lineno=2296, col_offset=22), Add(), Name('args', Load(), lineno=2296, col_offset=42), lineno=2296, col_offset=21)], [], None, None, lineno=2296, col_offset=8), lineno=2296, col_offset=8)], [], lineno=2293, col_offset=4), Assign([Name('lower', Store(), lineno=2297, col_offset=4)], Name('tag_lower', Load(), lineno=2297, col_offset=12), lineno=2297, col_offset=4), FunctionDef('move', arguments([Name('self', Param(), lineno=2298, col_offset=13)], 'args', None, []), [Expr(Str('Move an item TAGORID given in ARGS.', lineno=2299, col_offset=8), lineno=2299, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2300, col_offset=8), 'tk', Load(), lineno=2300, col_offset=8), 'call', Load(), lineno=2300, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2300, col_offset=22), '_w', Load(), lineno=2300, col_offset=22), Str('move', lineno=2300, col_offset=31)], Load(), lineno=2300, col_offset=22), Add(), Name('args', Load(), lineno=2300, col_offset=41), lineno=2300, col_offset=21)], [], None, None, lineno=2300, col_offset=8), lineno=2300, col_offset=8)], [], lineno=2298, col_offset=4), FunctionDef('postscript', arguments([Name('self', Param(), lineno=2301, col_offset=19), Name('cnf', Param(), lineno=2301, col_offset=25)], None, 'kw', [Dict([], [], lineno=2301, col_offset=29)]), [Expr(Str('Print the contents of the canvas to a postscript\n        file. Valid options: colormap, colormode, file, fontmap,\n        height, pageanchor, pageheight, pagewidth, pagex, pagey,\n        rotate, witdh, x, y.', lineno=2305, col_offset=-1), lineno=2305, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2306, col_offset=15), 'tk', Load(), lineno=2306, col_offset=15), 'call', Load(), lineno=2306, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2306, col_offset=29), '_w', Load(), lineno=2306, col_offset=29), Str('postscript', lineno=2306, col_offset=38)], Load(), lineno=2306, col_offset=29), Add(), Call(Attribute(Name('self', Load(), lineno=2307, col_offset=20), '_options', Load(), lineno=2307, col_offset=20), [Name('cnf', Load(), lineno=2307, col_offset=34), Name('kw', Load(), lineno=2307, col_offset=39)], [], None, None, lineno=2307, col_offset=20), lineno=2306, col_offset=28)], [], None, None, lineno=2306, col_offset=15), lineno=2306, col_offset=8)], [], lineno=2301, col_offset=4), FunctionDef('tag_raise', arguments([Name('self', Param(), lineno=2308, col_offset=18)], 'args', None, []), [Expr(Str('Raise an item TAGORID given in ARGS\n        (optional above another item).', lineno=2310, col_offset=-1), lineno=2310, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2311, col_offset=8), 'tk', Load(), lineno=2311, col_offset=8), 'call', Load(), lineno=2311, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2311, col_offset=22), '_w', Load(), lineno=2311, col_offset=22), Str('raise', lineno=2311, col_offset=31)], Load(), lineno=2311, col_offset=22), Add(), Name('args', Load(), lineno=2311, col_offset=42), lineno=2311, col_offset=21)], [], None, None, lineno=2311, col_offset=8), lineno=2311, col_offset=8)], [], lineno=2308, col_offset=4), Assign([Name('lift', Store(), lineno=2312, col_offset=4), Name('tkraise', Store(), lineno=2312, col_offset=11)], Name('tag_raise', Load(), lineno=2312, col_offset=21), lineno=2312, col_offset=4), FunctionDef('scale', arguments([Name('self', Param(), lineno=2313, col_offset=14)], 'args', None, []), [Expr(Str('Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.', lineno=2314, col_offset=8), lineno=2314, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2315, col_offset=8), 'tk', Load(), lineno=2315, col_offset=8), 'call', Load(), lineno=2315, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2315, col_offset=22), '_w', Load(), lineno=2315, col_offset=22), Str('scale', lineno=2315, col_offset=31)], Load(), lineno=2315, col_offset=22), Add(), Name('args', Load(), lineno=2315, col_offset=42), lineno=2315, col_offset=21)], [], None, None, lineno=2315, col_offset=8), lineno=2315, col_offset=8)], [], lineno=2313, col_offset=4), FunctionDef('scan_mark', arguments([Name('self', Param(), lineno=2316, col_offset=18), Name('x', Param(), lineno=2316, col_offset=24), Name('y', Param(), lineno=2316, col_offset=27)], None, None, []), [Expr(Str('Remember the current X, Y coordinates.', lineno=2317, col_offset=8), lineno=2317, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2318, col_offset=8), 'tk', Load(), lineno=2318, col_offset=8), 'call', Load(), lineno=2318, col_offset=8), [Attribute(Name('self', Load(), lineno=2318, col_offset=21), '_w', Load(), lineno=2318, col_offset=21), Str('scan', lineno=2318, col_offset=30), Str('mark', lineno=2318, col_offset=38), Name('x', Load(), lineno=2318, col_offset=46), Name('y', Load(), lineno=2318, col_offset=49)], [], None, None, lineno=2318, col_offset=8), lineno=2318, col_offset=8)], [], lineno=2316, col_offset=4), FunctionDef('scan_dragto', arguments([Name('self', Param(), lineno=2319, col_offset=20), Name('x', Param(), lineno=2319, col_offset=26), Name('y', Param(), lineno=2319, col_offset=29), Name('gain', Param(), lineno=2319, col_offset=32)], None, None, [Num(10, lineno=2319, col_offset=37)]), [Expr(Str('Adjust the view of the canvas to GAIN times the\n        difference between X and Y and the coordinates given in\n        scan_mark.', lineno=2322, col_offset=-1), lineno=2322, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2323, col_offset=8), 'tk', Load(), lineno=2323, col_offset=8), 'call', Load(), lineno=2323, col_offset=8), [Attribute(Name('self', Load(), lineno=2323, col_offset=21), '_w', Load(), lineno=2323, col_offset=21), Str('scan', lineno=2323, col_offset=30), Str('dragto', lineno=2323, col_offset=38), Name('x', Load(), lineno=2323, col_offset=48), Name('y', Load(), lineno=2323, col_offset=51), Name('gain', Load(), lineno=2323, col_offset=54)], [], None, None, lineno=2323, col_offset=8), lineno=2323, col_offset=8)], [], lineno=2319, col_offset=4), FunctionDef('select_adjust', arguments([Name('self', Param(), lineno=2324, col_offset=22), Name('tagOrId', Param(), lineno=2324, col_offset=28), Name('index', Param(), lineno=2324, col_offset=37)], None, None, []), [Expr(Str('Adjust the end of the selection near the cursor of an item TAGORID to index.', lineno=2325, col_offset=8), lineno=2325, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2326, col_offset=8), 'tk', Load(), lineno=2326, col_offset=8), 'call', Load(), lineno=2326, col_offset=8), [Attribute(Name('self', Load(), lineno=2326, col_offset=21), '_w', Load(), lineno=2326, col_offset=21), Str('select', lineno=2326, col_offset=30), Str('adjust', lineno=2326, col_offset=40), Name('tagOrId', Load(), lineno=2326, col_offset=50), Name('index', Load(), lineno=2326, col_offset=59)], [], None, None, lineno=2326, col_offset=8), lineno=2326, col_offset=8)], [], lineno=2324, col_offset=4), FunctionDef('select_clear', arguments([Name('self', Param(), lineno=2327, col_offset=21)], None, None, []), [Expr(Str('Clear the selection if it is in this widget.', lineno=2328, col_offset=8), lineno=2328, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2329, col_offset=8), 'tk', Load(), lineno=2329, col_offset=8), 'call', Load(), lineno=2329, col_offset=8), [Attribute(Name('self', Load(), lineno=2329, col_offset=21), '_w', Load(), lineno=2329, col_offset=21), Str('select', lineno=2329, col_offset=30), Str('clear', lineno=2329, col_offset=40)], [], None, None, lineno=2329, col_offset=8), lineno=2329, col_offset=8)], [], lineno=2327, col_offset=4), FunctionDef('select_from', arguments([Name('self', Param(), lineno=2330, col_offset=20), Name('tagOrId', Param(), lineno=2330, col_offset=26), Name('index', Param(), lineno=2330, col_offset=35)], None, None, []), [Expr(Str('Set the fixed end of a selection in item TAGORID to INDEX.', lineno=2331, col_offset=8), lineno=2331, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2332, col_offset=8), 'tk', Load(), lineno=2332, col_offset=8), 'call', Load(), lineno=2332, col_offset=8), [Attribute(Name('self', Load(), lineno=2332, col_offset=21), '_w', Load(), lineno=2332, col_offset=21), Str('select', lineno=2332, col_offset=30), Str('from', lineno=2332, col_offset=40), Name('tagOrId', Load(), lineno=2332, col_offset=48), Name('index', Load(), lineno=2332, col_offset=57)], [], None, None, lineno=2332, col_offset=8), lineno=2332, col_offset=8)], [], lineno=2330, col_offset=4), FunctionDef('select_item', arguments([Name('self', Param(), lineno=2333, col_offset=20)], None, None, []), [Expr(Str('Return the item which has the selection.', lineno=2334, col_offset=8), lineno=2334, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=2335, col_offset=15), 'tk', Load(), lineno=2335, col_offset=15), 'call', Load(), lineno=2335, col_offset=15), [Attribute(Name('self', Load(), lineno=2335, col_offset=28), '_w', Load(), lineno=2335, col_offset=28), Str('select', lineno=2335, col_offset=37), Str('item', lineno=2335, col_offset=47)], [], None, None, lineno=2335, col_offset=15), Name('None', Load(), lineno=2335, col_offset=58)], lineno=2335, col_offset=15), lineno=2335, col_offset=8)], [], lineno=2333, col_offset=4), FunctionDef('select_to', arguments([Name('self', Param(), lineno=2336, col_offset=18), Name('tagOrId', Param(), lineno=2336, col_offset=24), Name('index', Param(), lineno=2336, col_offset=33)], None, None, []), [Expr(Str('Set the variable end of a selection in item TAGORID to INDEX.', lineno=2337, col_offset=8), lineno=2337, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2338, col_offset=8), 'tk', Load(), lineno=2338, col_offset=8), 'call', Load(), lineno=2338, col_offset=8), [Attribute(Name('self', Load(), lineno=2338, col_offset=21), '_w', Load(), lineno=2338, col_offset=21), Str('select', lineno=2338, col_offset=30), Str('to', lineno=2338, col_offset=40), Name('tagOrId', Load(), lineno=2338, col_offset=46), Name('index', Load(), lineno=2338, col_offset=55)], [], None, None, lineno=2338, col_offset=8), lineno=2338, col_offset=8)], [], lineno=2336, col_offset=4), FunctionDef('type', arguments([Name('self', Param(), lineno=2339, col_offset=13), Name('tagOrId', Param(), lineno=2339, col_offset=19)], None, None, []), [Expr(Str('Return the type of the item TAGORID.', lineno=2340, col_offset=8), lineno=2340, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=2341, col_offset=15), 'tk', Load(), lineno=2341, col_offset=15), 'call', Load(), lineno=2341, col_offset=15), [Attribute(Name('self', Load(), lineno=2341, col_offset=28), '_w', Load(), lineno=2341, col_offset=28), Str('type', lineno=2341, col_offset=37), Name('tagOrId', Load(), lineno=2341, col_offset=45)], [], None, None, lineno=2341, col_offset=15), Name('None', Load(), lineno=2341, col_offset=57)], lineno=2341, col_offset=15), lineno=2341, col_offset=8)], [], lineno=2339, col_offset=4)], [], lineno=2102, col_offset=0), ClassDef('Checkbutton', [Name('Widget', Load(), lineno=2343, col_offset=18)], [Expr(Str('Checkbutton widget which is either in on- or off-state.', lineno=2344, col_offset=4), lineno=2344, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2345, col_offset=17), Name('master', Param(), lineno=2345, col_offset=23), Name('cnf', Param(), lineno=2345, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2345, col_offset=30), Dict([], [], lineno=2345, col_offset=40)]), [Expr(Str('Construct a checkbutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, offvalue, onvalue, padx, pady, relief,\n        selectcolor, selectimage, state, takefocus, text, textvariable,\n        underline, variable, width, wraplength.', lineno=2354, col_offset=-1), lineno=2354, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2355, col_offset=8), '__init__', Load(), lineno=2355, col_offset=8), [Name('self', Load(), lineno=2355, col_offset=24), Name('master', Load(), lineno=2355, col_offset=30), Str('checkbutton', lineno=2355, col_offset=38), Name('cnf', Load(), lineno=2355, col_offset=53), Name('kw', Load(), lineno=2355, col_offset=58)], [], None, None, lineno=2355, col_offset=8), lineno=2355, col_offset=8)], [], lineno=2345, col_offset=4), FunctionDef('deselect', arguments([Name('self', Param(), lineno=2356, col_offset=17)], None, None, []), [Expr(Str('Put the button in off-state.', lineno=2357, col_offset=8), lineno=2357, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2358, col_offset=8), 'tk', Load(), lineno=2358, col_offset=8), 'call', Load(), lineno=2358, col_offset=8), [Attribute(Name('self', Load(), lineno=2358, col_offset=21), '_w', Load(), lineno=2358, col_offset=21), Str('deselect', lineno=2358, col_offset=30)], [], None, None, lineno=2358, col_offset=8), lineno=2358, col_offset=8)], [], lineno=2356, col_offset=4), FunctionDef('flash', arguments([Name('self', Param(), lineno=2359, col_offset=14)], None, None, []), [Expr(Str('Flash the button.', lineno=2360, col_offset=8), lineno=2360, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2361, col_offset=8), 'tk', Load(), lineno=2361, col_offset=8), 'call', Load(), lineno=2361, col_offset=8), [Attribute(Name('self', Load(), lineno=2361, col_offset=21), '_w', Load(), lineno=2361, col_offset=21), Str('flash', lineno=2361, col_offset=30)], [], None, None, lineno=2361, col_offset=8), lineno=2361, col_offset=8)], [], lineno=2359, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=2362, col_offset=15)], None, None, []), [Expr(Str('Toggle the button and invoke a command if given as resource.', lineno=2363, col_offset=8), lineno=2363, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2364, col_offset=15), 'tk', Load(), lineno=2364, col_offset=15), 'call', Load(), lineno=2364, col_offset=15), [Attribute(Name('self', Load(), lineno=2364, col_offset=28), '_w', Load(), lineno=2364, col_offset=28), Str('invoke', lineno=2364, col_offset=37)], [], None, None, lineno=2364, col_offset=15), lineno=2364, col_offset=8)], [], lineno=2362, col_offset=4), FunctionDef('select', arguments([Name('self', Param(), lineno=2365, col_offset=15)], None, None, []), [Expr(Str('Put the button in on-state.', lineno=2366, col_offset=8), lineno=2366, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2367, col_offset=8), 'tk', Load(), lineno=2367, col_offset=8), 'call', Load(), lineno=2367, col_offset=8), [Attribute(Name('self', Load(), lineno=2367, col_offset=21), '_w', Load(), lineno=2367, col_offset=21), Str('select', lineno=2367, col_offset=30)], [], None, None, lineno=2367, col_offset=8), lineno=2367, col_offset=8)], [], lineno=2365, col_offset=4), FunctionDef('toggle', arguments([Name('self', Param(), lineno=2368, col_offset=15)], None, None, []), [Expr(Str('Toggle the button.', lineno=2369, col_offset=8), lineno=2369, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2370, col_offset=8), 'tk', Load(), lineno=2370, col_offset=8), 'call', Load(), lineno=2370, col_offset=8), [Attribute(Name('self', Load(), lineno=2370, col_offset=21), '_w', Load(), lineno=2370, col_offset=21), Str('toggle', lineno=2370, col_offset=30)], [], None, None, lineno=2370, col_offset=8), lineno=2370, col_offset=8)], [], lineno=2368, col_offset=4)], [], lineno=2343, col_offset=0), ClassDef('Entry', [Name('Widget', Load(), lineno=2372, col_offset=12), Name('XView', Load(), lineno=2372, col_offset=20)], [Expr(Str('Entry widget which allows to display simple text.', lineno=2373, col_offset=4), lineno=2373, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2374, col_offset=17), Name('master', Param(), lineno=2374, col_offset=23), Name('cnf', Param(), lineno=2374, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2374, col_offset=30), Dict([], [], lineno=2374, col_offset=40)]), [Expr(Str('Construct an entry widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, highlightbackground,\n        highlightcolor, highlightthickness, insertbackground,\n        insertborderwidth, insertofftime, insertontime, insertwidth,\n        invalidcommand, invcmd, justify, relief, selectbackground,\n        selectborderwidth, selectforeground, show, state, takefocus,\n        textvariable, validate, validatecommand, vcmd, width,\n        xscrollcommand.', lineno=2384, col_offset=-1), lineno=2384, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2385, col_offset=8), '__init__', Load(), lineno=2385, col_offset=8), [Name('self', Load(), lineno=2385, col_offset=24), Name('master', Load(), lineno=2385, col_offset=30), Str('entry', lineno=2385, col_offset=38), Name('cnf', Load(), lineno=2385, col_offset=47), Name('kw', Load(), lineno=2385, col_offset=52)], [], None, None, lineno=2385, col_offset=8), lineno=2385, col_offset=8)], [], lineno=2374, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=2386, col_offset=15), Name('first', Param(), lineno=2386, col_offset=21), Name('last', Param(), lineno=2386, col_offset=28)], None, None, [Name('None', Load(), lineno=2386, col_offset=33)]), [Expr(Str('Delete text from FIRST to LAST (not included).', lineno=2387, col_offset=8), lineno=2387, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2388, col_offset=8), 'tk', Load(), lineno=2388, col_offset=8), 'call', Load(), lineno=2388, col_offset=8), [Attribute(Name('self', Load(), lineno=2388, col_offset=21), '_w', Load(), lineno=2388, col_offset=21), Str('delete', lineno=2388, col_offset=30), Name('first', Load(), lineno=2388, col_offset=40), Name('last', Load(), lineno=2388, col_offset=47)], [], None, None, lineno=2388, col_offset=8), lineno=2388, col_offset=8)], [], lineno=2386, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2389, col_offset=12)], None, None, []), [Expr(Str('Return the text.', lineno=2390, col_offset=8), lineno=2390, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2391, col_offset=15), 'tk', Load(), lineno=2391, col_offset=15), 'call', Load(), lineno=2391, col_offset=15), [Attribute(Name('self', Load(), lineno=2391, col_offset=28), '_w', Load(), lineno=2391, col_offset=28), Str('get', lineno=2391, col_offset=37)], [], None, None, lineno=2391, col_offset=15), lineno=2391, col_offset=8)], [], lineno=2389, col_offset=4), FunctionDef('icursor', arguments([Name('self', Param(), lineno=2392, col_offset=16), Name('index', Param(), lineno=2392, col_offset=22)], None, None, []), [Expr(Str('Insert cursor at INDEX.', lineno=2393, col_offset=8), lineno=2393, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2394, col_offset=8), 'tk', Load(), lineno=2394, col_offset=8), 'call', Load(), lineno=2394, col_offset=8), [Attribute(Name('self', Load(), lineno=2394, col_offset=21), '_w', Load(), lineno=2394, col_offset=21), Str('icursor', lineno=2394, col_offset=30), Name('index', Load(), lineno=2394, col_offset=41)], [], None, None, lineno=2394, col_offset=8), lineno=2394, col_offset=8)], [], lineno=2392, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=2395, col_offset=14), Name('index', Param(), lineno=2395, col_offset=20)], None, None, []), [Expr(Str('Return position of cursor.', lineno=2396, col_offset=8), lineno=2396, col_offset=8), Return(Call(Name('getint', Load(), lineno=2397, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2397, col_offset=22), 'tk', Load(), lineno=2397, col_offset=22), 'call', Load(), lineno=2397, col_offset=22), [Attribute(Name('self', Load(), lineno=2398, col_offset=12), '_w', Load(), lineno=2398, col_offset=12), Str('index', lineno=2398, col_offset=21), Name('index', Load(), lineno=2398, col_offset=30)], [], None, None, lineno=2397, col_offset=22)], [], None, None, lineno=2397, col_offset=15), lineno=2397, col_offset=8)], [], lineno=2395, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=2399, col_offset=15), Name('index', Param(), lineno=2399, col_offset=21), Name('string', Param(), lineno=2399, col_offset=28)], None, None, []), [Expr(Str('Insert STRING at INDEX.', lineno=2400, col_offset=8), lineno=2400, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2401, col_offset=8), 'tk', Load(), lineno=2401, col_offset=8), 'call', Load(), lineno=2401, col_offset=8), [Attribute(Name('self', Load(), lineno=2401, col_offset=21), '_w', Load(), lineno=2401, col_offset=21), Str('insert', lineno=2401, col_offset=30), Name('index', Load(), lineno=2401, col_offset=40), Name('string', Load(), lineno=2401, col_offset=47)], [], None, None, lineno=2401, col_offset=8), lineno=2401, col_offset=8)], [], lineno=2399, col_offset=4), FunctionDef('scan_mark', arguments([Name('self', Param(), lineno=2402, col_offset=18), Name('x', Param(), lineno=2402, col_offset=24)], None, None, []), [Expr(Str('Remember the current X, Y coordinates.', lineno=2403, col_offset=8), lineno=2403, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2404, col_offset=8), 'tk', Load(), lineno=2404, col_offset=8), 'call', Load(), lineno=2404, col_offset=8), [Attribute(Name('self', Load(), lineno=2404, col_offset=21), '_w', Load(), lineno=2404, col_offset=21), Str('scan', lineno=2404, col_offset=30), Str('mark', lineno=2404, col_offset=38), Name('x', Load(), lineno=2404, col_offset=46)], [], None, None, lineno=2404, col_offset=8), lineno=2404, col_offset=8)], [], lineno=2402, col_offset=4), FunctionDef('scan_dragto', arguments([Name('self', Param(), lineno=2405, col_offset=20), Name('x', Param(), lineno=2405, col_offset=26)], None, None, []), [Expr(Str('Adjust the view of the canvas to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.', lineno=2408, col_offset=-1), lineno=2408, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2409, col_offset=8), 'tk', Load(), lineno=2409, col_offset=8), 'call', Load(), lineno=2409, col_offset=8), [Attribute(Name('self', Load(), lineno=2409, col_offset=21), '_w', Load(), lineno=2409, col_offset=21), Str('scan', lineno=2409, col_offset=30), Str('dragto', lineno=2409, col_offset=38), Name('x', Load(), lineno=2409, col_offset=48)], [], None, None, lineno=2409, col_offset=8), lineno=2409, col_offset=8)], [], lineno=2405, col_offset=4), FunctionDef('selection_adjust', arguments([Name('self', Param(), lineno=2410, col_offset=25), Name('index', Param(), lineno=2410, col_offset=31)], None, None, []), [Expr(Str('Adjust the end of the selection near the cursor to INDEX.', lineno=2411, col_offset=8), lineno=2411, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2412, col_offset=8), 'tk', Load(), lineno=2412, col_offset=8), 'call', Load(), lineno=2412, col_offset=8), [Attribute(Name('self', Load(), lineno=2412, col_offset=21), '_w', Load(), lineno=2412, col_offset=21), Str('selection', lineno=2412, col_offset=30), Str('adjust', lineno=2412, col_offset=43), Name('index', Load(), lineno=2412, col_offset=53)], [], None, None, lineno=2412, col_offset=8), lineno=2412, col_offset=8)], [], lineno=2410, col_offset=4), Assign([Name('select_adjust', Store(), lineno=2413, col_offset=4)], Name('selection_adjust', Load(), lineno=2413, col_offset=20), lineno=2413, col_offset=4), FunctionDef('selection_clear', arguments([Name('self', Param(), lineno=2414, col_offset=24)], None, None, []), [Expr(Str('Clear the selection if it is in this widget.', lineno=2415, col_offset=8), lineno=2415, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2416, col_offset=8), 'tk', Load(), lineno=2416, col_offset=8), 'call', Load(), lineno=2416, col_offset=8), [Attribute(Name('self', Load(), lineno=2416, col_offset=21), '_w', Load(), lineno=2416, col_offset=21), Str('selection', lineno=2416, col_offset=30), Str('clear', lineno=2416, col_offset=43)], [], None, None, lineno=2416, col_offset=8), lineno=2416, col_offset=8)], [], lineno=2414, col_offset=4), Assign([Name('select_clear', Store(), lineno=2417, col_offset=4)], Name('selection_clear', Load(), lineno=2417, col_offset=19), lineno=2417, col_offset=4), FunctionDef('selection_from', arguments([Name('self', Param(), lineno=2418, col_offset=23), Name('index', Param(), lineno=2418, col_offset=29)], None, None, []), [Expr(Str('Set the fixed end of a selection to INDEX.', lineno=2419, col_offset=8), lineno=2419, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2420, col_offset=8), 'tk', Load(), lineno=2420, col_offset=8), 'call', Load(), lineno=2420, col_offset=8), [Attribute(Name('self', Load(), lineno=2420, col_offset=21), '_w', Load(), lineno=2420, col_offset=21), Str('selection', lineno=2420, col_offset=30), Str('from', lineno=2420, col_offset=43), Name('index', Load(), lineno=2420, col_offset=51)], [], None, None, lineno=2420, col_offset=8), lineno=2420, col_offset=8)], [], lineno=2418, col_offset=4), Assign([Name('select_from', Store(), lineno=2421, col_offset=4)], Name('selection_from', Load(), lineno=2421, col_offset=18), lineno=2421, col_offset=4), FunctionDef('selection_present', arguments([Name('self', Param(), lineno=2422, col_offset=26)], None, None, []), [Expr(Str('Return True if there are characters selected in the entry, False\n        otherwise.', lineno=2424, col_offset=-1), lineno=2424, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2425, col_offset=15), 'tk', Load(), lineno=2425, col_offset=15), 'getboolean', Load(), lineno=2425, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2426, col_offset=12), 'tk', Load(), lineno=2426, col_offset=12), 'call', Load(), lineno=2426, col_offset=12), [Attribute(Name('self', Load(), lineno=2426, col_offset=25), '_w', Load(), lineno=2426, col_offset=25), Str('selection', lineno=2426, col_offset=34), Str('present', lineno=2426, col_offset=47)], [], None, None, lineno=2426, col_offset=12)], [], None, None, lineno=2425, col_offset=15), lineno=2425, col_offset=8)], [], lineno=2422, col_offset=4), Assign([Name('select_present', Store(), lineno=2427, col_offset=4)], Name('selection_present', Load(), lineno=2427, col_offset=21), lineno=2427, col_offset=4), FunctionDef('selection_range', arguments([Name('self', Param(), lineno=2428, col_offset=24), Name('start', Param(), lineno=2428, col_offset=30), Name('end', Param(), lineno=2428, col_offset=37)], None, None, []), [Expr(Str('Set the selection from START to END (not included).', lineno=2429, col_offset=8), lineno=2429, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2430, col_offset=8), 'tk', Load(), lineno=2430, col_offset=8), 'call', Load(), lineno=2430, col_offset=8), [Attribute(Name('self', Load(), lineno=2430, col_offset=21), '_w', Load(), lineno=2430, col_offset=21), Str('selection', lineno=2430, col_offset=30), Str('range', lineno=2430, col_offset=43), Name('start', Load(), lineno=2430, col_offset=52), Name('end', Load(), lineno=2430, col_offset=59)], [], None, None, lineno=2430, col_offset=8), lineno=2430, col_offset=8)], [], lineno=2428, col_offset=4), Assign([Name('select_range', Store(), lineno=2431, col_offset=4)], Name('selection_range', Load(), lineno=2431, col_offset=19), lineno=2431, col_offset=4), FunctionDef('selection_to', arguments([Name('self', Param(), lineno=2432, col_offset=21), Name('index', Param(), lineno=2432, col_offset=27)], None, None, []), [Expr(Str('Set the variable end of a selection to INDEX.', lineno=2433, col_offset=8), lineno=2433, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2434, col_offset=8), 'tk', Load(), lineno=2434, col_offset=8), 'call', Load(), lineno=2434, col_offset=8), [Attribute(Name('self', Load(), lineno=2434, col_offset=21), '_w', Load(), lineno=2434, col_offset=21), Str('selection', lineno=2434, col_offset=30), Str('to', lineno=2434, col_offset=43), Name('index', Load(), lineno=2434, col_offset=49)], [], None, None, lineno=2434, col_offset=8), lineno=2434, col_offset=8)], [], lineno=2432, col_offset=4), Assign([Name('select_to', Store(), lineno=2435, col_offset=4)], Name('selection_to', Load(), lineno=2435, col_offset=16), lineno=2435, col_offset=4)], [], lineno=2372, col_offset=0), ClassDef('Frame', [Name('Widget', Load(), lineno=2437, col_offset=12)], [Expr(Str('Frame widget which may contain other widgets and can have a 3D border.', lineno=2438, col_offset=4), lineno=2438, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2439, col_offset=17), Name('master', Param(), lineno=2439, col_offset=23), Name('cnf', Param(), lineno=2439, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2439, col_offset=30), Dict([], [], lineno=2439, col_offset=40)]), [Expr(Str('Construct a frame widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, takefocus, visual, width.', lineno=2444, col_offset=-1), lineno=2444, col_offset=-1), Assign([Name('cnf', Store(), lineno=2445, col_offset=8)], Call(Name('_cnfmerge', Load(), lineno=2445, col_offset=14), [Tuple([Name('cnf', Load(), lineno=2445, col_offset=25), Name('kw', Load(), lineno=2445, col_offset=30)], Load(), lineno=2445, col_offset=25)], [], None, None, lineno=2445, col_offset=14), lineno=2445, col_offset=8), Assign([Name('extra', Store(), lineno=2446, col_offset=8)], Tuple([], Load(), lineno=2446, col_offset=16), lineno=2446, col_offset=8), If(Compare(Str('class_', lineno=2447, col_offset=11), [In()], [Name('cnf', Load(), lineno=2447, col_offset=23)], lineno=2447, col_offset=11), [Assign([Name('extra', Store(), lineno=2448, col_offset=12)], Tuple([Str('-class', lineno=2448, col_offset=21), Subscript(Name('cnf', Load(), lineno=2448, col_offset=31), Index(Str('class_', lineno=2448, col_offset=35)), Load(), lineno=2448, col_offset=31)], Load(), lineno=2448, col_offset=21), lineno=2448, col_offset=12), Delete([Subscript(Name('cnf', Load(), lineno=2449, col_offset=16), Index(Str('class_', lineno=2449, col_offset=20)), Del(), lineno=2449, col_offset=16)], lineno=2449, col_offset=12)], [If(Compare(Str('class', lineno=2450, col_offset=13), [In()], [Name('cnf', Load(), lineno=2450, col_offset=24)], lineno=2450, col_offset=13), [Assign([Name('extra', Store(), lineno=2451, col_offset=12)], Tuple([Str('-class', lineno=2451, col_offset=21), Subscript(Name('cnf', Load(), lineno=2451, col_offset=31), Index(Str('class', lineno=2451, col_offset=35)), Load(), lineno=2451, col_offset=31)], Load(), lineno=2451, col_offset=21), lineno=2451, col_offset=12), Delete([Subscript(Name('cnf', Load(), lineno=2452, col_offset=16), Index(Str('class', lineno=2452, col_offset=20)), Del(), lineno=2452, col_offset=16)], lineno=2452, col_offset=12)], [], lineno=2450, col_offset=13)], lineno=2447, col_offset=8), Expr(Call(Attribute(Name('Widget', Load(), lineno=2453, col_offset=8), '__init__', Load(), lineno=2453, col_offset=8), [Name('self', Load(), lineno=2453, col_offset=24), Name('master', Load(), lineno=2453, col_offset=30), Str('frame', lineno=2453, col_offset=38), Name('cnf', Load(), lineno=2453, col_offset=47), Dict([], [], lineno=2453, col_offset=52), Name('extra', Load(), lineno=2453, col_offset=56)], [], None, None, lineno=2453, col_offset=8), lineno=2453, col_offset=8)], [], lineno=2439, col_offset=4)], [], lineno=2437, col_offset=0), ClassDef('Label', [Name('Widget', Load(), lineno=2455, col_offset=12)], [Expr(Str('Label widget which can display text and bitmaps.', lineno=2456, col_offset=4), lineno=2456, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2457, col_offset=17), Name('master', Param(), lineno=2457, col_offset=23), Name('cnf', Param(), lineno=2457, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2457, col_offset=30), Dict([], [], lineno=2457, col_offset=40)]), [Expr(Str('Construct a label widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            height, state, width\n\n        ', lineno=2474, col_offset=-1), lineno=2474, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2475, col_offset=8), '__init__', Load(), lineno=2475, col_offset=8), [Name('self', Load(), lineno=2475, col_offset=24), Name('master', Load(), lineno=2475, col_offset=30), Str('label', lineno=2475, col_offset=38), Name('cnf', Load(), lineno=2475, col_offset=47), Name('kw', Load(), lineno=2475, col_offset=52)], [], None, None, lineno=2475, col_offset=8), lineno=2475, col_offset=8)], [], lineno=2457, col_offset=4)], [], lineno=2455, col_offset=0), ClassDef('Listbox', [Name('Widget', Load(), lineno=2477, col_offset=14), Name('XView', Load(), lineno=2477, col_offset=22), Name('YView', Load(), lineno=2477, col_offset=29)], [Expr(Str('Listbox widget which can display a list of strings.', lineno=2478, col_offset=4), lineno=2478, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2479, col_offset=17), Name('master', Param(), lineno=2479, col_offset=23), Name('cnf', Param(), lineno=2479, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2479, col_offset=30), Dict([], [], lineno=2479, col_offset=40)]), [Expr(Str('Construct a listbox widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, selectbackground,\n        selectborderwidth, selectforeground, selectmode, setgrid, takefocus,\n        width, xscrollcommand, yscrollcommand, listvariable.', lineno=2486, col_offset=-1), lineno=2486, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2487, col_offset=8), '__init__', Load(), lineno=2487, col_offset=8), [Name('self', Load(), lineno=2487, col_offset=24), Name('master', Load(), lineno=2487, col_offset=30), Str('listbox', lineno=2487, col_offset=38), Name('cnf', Load(), lineno=2487, col_offset=49), Name('kw', Load(), lineno=2487, col_offset=54)], [], None, None, lineno=2487, col_offset=8), lineno=2487, col_offset=8)], [], lineno=2479, col_offset=4), FunctionDef('activate', arguments([Name('self', Param(), lineno=2488, col_offset=17), Name('index', Param(), lineno=2488, col_offset=23)], None, None, []), [Expr(Str('Activate item identified by INDEX.', lineno=2489, col_offset=8), lineno=2489, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2490, col_offset=8), 'tk', Load(), lineno=2490, col_offset=8), 'call', Load(), lineno=2490, col_offset=8), [Attribute(Name('self', Load(), lineno=2490, col_offset=21), '_w', Load(), lineno=2490, col_offset=21), Str('activate', lineno=2490, col_offset=30), Name('index', Load(), lineno=2490, col_offset=42)], [], None, None, lineno=2490, col_offset=8), lineno=2490, col_offset=8)], [], lineno=2488, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=2491, col_offset=13)], 'args', None, []), [Expr(Str('Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses the item identified by index in ARGS.', lineno=2493, col_offset=-1), lineno=2493, col_offset=-1), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=2494, col_offset=15), '_getints', Load(), lineno=2494, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2495, col_offset=12), 'tk', Load(), lineno=2495, col_offset=12), 'call', Load(), lineno=2495, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2495, col_offset=26), '_w', Load(), lineno=2495, col_offset=26), Str('bbox', lineno=2495, col_offset=35)], Load(), lineno=2495, col_offset=26), Add(), Name('args', Load(), lineno=2495, col_offset=45), lineno=2495, col_offset=25)], [], None, None, lineno=2495, col_offset=12)], [], None, None, lineno=2494, col_offset=15), Name('None', Load(), lineno=2495, col_offset=55)], lineno=2494, col_offset=15), lineno=2494, col_offset=8)], [], lineno=2491, col_offset=4), FunctionDef('curselection', arguments([Name('self', Param(), lineno=2496, col_offset=21)], None, None, []), [Expr(Str('Return list of indices of currently selected item.', lineno=2497, col_offset=8), lineno=2497, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2499, col_offset=15), 'tk', Load(), lineno=2499, col_offset=15), 'splitlist', Load(), lineno=2499, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2499, col_offset=33), 'tk', Load(), lineno=2499, col_offset=33), 'call', Load(), lineno=2499, col_offset=33), [Attribute(Name('self', Load(), lineno=2500, col_offset=12), '_w', Load(), lineno=2500, col_offset=12), Str('curselection', lineno=2500, col_offset=21)], [], None, None, lineno=2499, col_offset=33)], [], None, None, lineno=2499, col_offset=15), lineno=2499, col_offset=8)], [], lineno=2496, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=2501, col_offset=15), Name('first', Param(), lineno=2501, col_offset=21), Name('last', Param(), lineno=2501, col_offset=28)], None, None, [Name('None', Load(), lineno=2501, col_offset=33)]), [Expr(Str('Delete items from FIRST to LAST (not included).', lineno=2502, col_offset=8), lineno=2502, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2503, col_offset=8), 'tk', Load(), lineno=2503, col_offset=8), 'call', Load(), lineno=2503, col_offset=8), [Attribute(Name('self', Load(), lineno=2503, col_offset=21), '_w', Load(), lineno=2503, col_offset=21), Str('delete', lineno=2503, col_offset=30), Name('first', Load(), lineno=2503, col_offset=40), Name('last', Load(), lineno=2503, col_offset=47)], [], None, None, lineno=2503, col_offset=8), lineno=2503, col_offset=8)], [], lineno=2501, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2504, col_offset=12), Name('first', Param(), lineno=2504, col_offset=18), Name('last', Param(), lineno=2504, col_offset=25)], None, None, [Name('None', Load(), lineno=2504, col_offset=30)]), [Expr(Str('Get list of items from FIRST to LAST (not included).', lineno=2505, col_offset=8), lineno=2505, col_offset=8), If(Name('last', Load(), lineno=2506, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2507, col_offset=19), 'tk', Load(), lineno=2507, col_offset=19), 'splitlist', Load(), lineno=2507, col_offset=19), [Call(Attribute(Attribute(Name('self', Load(), lineno=2507, col_offset=37), 'tk', Load(), lineno=2507, col_offset=37), 'call', Load(), lineno=2507, col_offset=37), [Attribute(Name('self', Load(), lineno=2508, col_offset=16), '_w', Load(), lineno=2508, col_offset=16), Str('get', lineno=2508, col_offset=25), Name('first', Load(), lineno=2508, col_offset=32), Name('last', Load(), lineno=2508, col_offset=39)], [], None, None, lineno=2507, col_offset=37)], [], None, None, lineno=2507, col_offset=19), lineno=2507, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2510, col_offset=19), 'tk', Load(), lineno=2510, col_offset=19), 'call', Load(), lineno=2510, col_offset=19), [Attribute(Name('self', Load(), lineno=2510, col_offset=32), '_w', Load(), lineno=2510, col_offset=32), Str('get', lineno=2510, col_offset=41), Name('first', Load(), lineno=2510, col_offset=48)], [], None, None, lineno=2510, col_offset=19), lineno=2510, col_offset=12)], lineno=2506, col_offset=8)], [], lineno=2504, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=2511, col_offset=14), Name('index', Param(), lineno=2511, col_offset=20)], None, None, []), [Expr(Str('Return index of item identified with INDEX.', lineno=2512, col_offset=8), lineno=2512, col_offset=8), Assign([Name('i', Store(), lineno=2513, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=2513, col_offset=12), 'tk', Load(), lineno=2513, col_offset=12), 'call', Load(), lineno=2513, col_offset=12), [Attribute(Name('self', Load(), lineno=2513, col_offset=25), '_w', Load(), lineno=2513, col_offset=25), Str('index', lineno=2513, col_offset=34), Name('index', Load(), lineno=2513, col_offset=43)], [], None, None, lineno=2513, col_offset=12), lineno=2513, col_offset=8), If(Compare(Name('i', Load(), lineno=2514, col_offset=11), [Eq()], [Str('none', lineno=2514, col_offset=16)], lineno=2514, col_offset=11), [Return(Name('None', Load(), lineno=2514, col_offset=31), lineno=2514, col_offset=24)], [], lineno=2514, col_offset=8), Return(Call(Name('getint', Load(), lineno=2515, col_offset=15), [Name('i', Load(), lineno=2515, col_offset=22)], [], None, None, lineno=2515, col_offset=15), lineno=2515, col_offset=8)], [], lineno=2511, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=2516, col_offset=15), Name('index', Param(), lineno=2516, col_offset=21)], 'elements', None, []), [Expr(Str('Insert ELEMENTS at INDEX.', lineno=2517, col_offset=8), lineno=2517, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2518, col_offset=8), 'tk', Load(), lineno=2518, col_offset=8), 'call', Load(), lineno=2518, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2518, col_offset=22), '_w', Load(), lineno=2518, col_offset=22), Str('insert', lineno=2518, col_offset=31), Name('index', Load(), lineno=2518, col_offset=41)], Load(), lineno=2518, col_offset=22), Add(), Name('elements', Load(), lineno=2518, col_offset=50), lineno=2518, col_offset=21)], [], None, None, lineno=2518, col_offset=8), lineno=2518, col_offset=8)], [], lineno=2516, col_offset=4), FunctionDef('nearest', arguments([Name('self', Param(), lineno=2519, col_offset=16), Name('y', Param(), lineno=2519, col_offset=22)], None, None, []), [Expr(Str('Get index of item which is nearest to y coordinate Y.', lineno=2520, col_offset=8), lineno=2520, col_offset=8), Return(Call(Name('getint', Load(), lineno=2521, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2521, col_offset=22), 'tk', Load(), lineno=2521, col_offset=22), 'call', Load(), lineno=2521, col_offset=22), [Attribute(Name('self', Load(), lineno=2522, col_offset=12), '_w', Load(), lineno=2522, col_offset=12), Str('nearest', lineno=2522, col_offset=21), Name('y', Load(), lineno=2522, col_offset=32)], [], None, None, lineno=2521, col_offset=22)], [], None, None, lineno=2521, col_offset=15), lineno=2521, col_offset=8)], [], lineno=2519, col_offset=4), FunctionDef('scan_mark', arguments([Name('self', Param(), lineno=2523, col_offset=18), Name('x', Param(), lineno=2523, col_offset=24), Name('y', Param(), lineno=2523, col_offset=27)], None, None, []), [Expr(Str('Remember the current X, Y coordinates.', lineno=2524, col_offset=8), lineno=2524, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2525, col_offset=8), 'tk', Load(), lineno=2525, col_offset=8), 'call', Load(), lineno=2525, col_offset=8), [Attribute(Name('self', Load(), lineno=2525, col_offset=21), '_w', Load(), lineno=2525, col_offset=21), Str('scan', lineno=2525, col_offset=30), Str('mark', lineno=2525, col_offset=38), Name('x', Load(), lineno=2525, col_offset=46), Name('y', Load(), lineno=2525, col_offset=49)], [], None, None, lineno=2525, col_offset=8), lineno=2525, col_offset=8)], [], lineno=2523, col_offset=4), FunctionDef('scan_dragto', arguments([Name('self', Param(), lineno=2526, col_offset=20), Name('x', Param(), lineno=2526, col_offset=26), Name('y', Param(), lineno=2526, col_offset=29)], None, None, []), [Expr(Str('Adjust the view of the listbox to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.', lineno=2529, col_offset=-1), lineno=2529, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2530, col_offset=8), 'tk', Load(), lineno=2530, col_offset=8), 'call', Load(), lineno=2530, col_offset=8), [Attribute(Name('self', Load(), lineno=2530, col_offset=21), '_w', Load(), lineno=2530, col_offset=21), Str('scan', lineno=2530, col_offset=30), Str('dragto', lineno=2530, col_offset=38), Name('x', Load(), lineno=2530, col_offset=48), Name('y', Load(), lineno=2530, col_offset=51)], [], None, None, lineno=2530, col_offset=8), lineno=2530, col_offset=8)], [], lineno=2526, col_offset=4), FunctionDef('see', arguments([Name('self', Param(), lineno=2531, col_offset=12), Name('index', Param(), lineno=2531, col_offset=18)], None, None, []), [Expr(Str('Scroll such that INDEX is visible.', lineno=2532, col_offset=8), lineno=2532, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2533, col_offset=8), 'tk', Load(), lineno=2533, col_offset=8), 'call', Load(), lineno=2533, col_offset=8), [Attribute(Name('self', Load(), lineno=2533, col_offset=21), '_w', Load(), lineno=2533, col_offset=21), Str('see', lineno=2533, col_offset=30), Name('index', Load(), lineno=2533, col_offset=37)], [], None, None, lineno=2533, col_offset=8), lineno=2533, col_offset=8)], [], lineno=2531, col_offset=4), FunctionDef('selection_anchor', arguments([Name('self', Param(), lineno=2534, col_offset=25), Name('index', Param(), lineno=2534, col_offset=31)], None, None, []), [Expr(Str('Set the fixed end oft the selection to INDEX.', lineno=2535, col_offset=8), lineno=2535, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2536, col_offset=8), 'tk', Load(), lineno=2536, col_offset=8), 'call', Load(), lineno=2536, col_offset=8), [Attribute(Name('self', Load(), lineno=2536, col_offset=21), '_w', Load(), lineno=2536, col_offset=21), Str('selection', lineno=2536, col_offset=30), Str('anchor', lineno=2536, col_offset=43), Name('index', Load(), lineno=2536, col_offset=53)], [], None, None, lineno=2536, col_offset=8), lineno=2536, col_offset=8)], [], lineno=2534, col_offset=4), Assign([Name('select_anchor', Store(), lineno=2537, col_offset=4)], Name('selection_anchor', Load(), lineno=2537, col_offset=20), lineno=2537, col_offset=4), FunctionDef('selection_clear', arguments([Name('self', Param(), lineno=2538, col_offset=24), Name('first', Param(), lineno=2538, col_offset=30), Name('last', Param(), lineno=2538, col_offset=37)], None, None, [Name('None', Load(), lineno=2538, col_offset=42)]), [Expr(Str('Clear the selection from FIRST to LAST (not included).', lineno=2539, col_offset=8), lineno=2539, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2540, col_offset=8), 'tk', Load(), lineno=2540, col_offset=8), 'call', Load(), lineno=2540, col_offset=8), [Attribute(Name('self', Load(), lineno=2540, col_offset=21), '_w', Load(), lineno=2540, col_offset=21), Str('selection', lineno=2541, col_offset=17), Str('clear', lineno=2541, col_offset=30), Name('first', Load(), lineno=2541, col_offset=39), Name('last', Load(), lineno=2541, col_offset=46)], [], None, None, lineno=2540, col_offset=8), lineno=2540, col_offset=8)], [], lineno=2538, col_offset=4), Assign([Name('select_clear', Store(), lineno=2542, col_offset=4)], Name('selection_clear', Load(), lineno=2542, col_offset=19), lineno=2542, col_offset=4), FunctionDef('selection_includes', arguments([Name('self', Param(), lineno=2543, col_offset=27), Name('index', Param(), lineno=2543, col_offset=33)], None, None, []), [Expr(Str('Return 1 if INDEX is part of the selection.', lineno=2544, col_offset=8), lineno=2544, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2545, col_offset=15), 'tk', Load(), lineno=2545, col_offset=15), 'getboolean', Load(), lineno=2545, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2545, col_offset=34), 'tk', Load(), lineno=2545, col_offset=34), 'call', Load(), lineno=2545, col_offset=34), [Attribute(Name('self', Load(), lineno=2546, col_offset=12), '_w', Load(), lineno=2546, col_offset=12), Str('selection', lineno=2546, col_offset=21), Str('includes', lineno=2546, col_offset=34), Name('index', Load(), lineno=2546, col_offset=46)], [], None, None, lineno=2545, col_offset=34)], [], None, None, lineno=2545, col_offset=15), lineno=2545, col_offset=8)], [], lineno=2543, col_offset=4), Assign([Name('select_includes', Store(), lineno=2547, col_offset=4)], Name('selection_includes', Load(), lineno=2547, col_offset=22), lineno=2547, col_offset=4), FunctionDef('selection_set', arguments([Name('self', Param(), lineno=2548, col_offset=22), Name('first', Param(), lineno=2548, col_offset=28), Name('last', Param(), lineno=2548, col_offset=35)], None, None, [Name('None', Load(), lineno=2548, col_offset=40)]), [Expr(Str('Set the selection from FIRST to LAST (not included) without\n        changing the currently selected elements.', lineno=2550, col_offset=-1), lineno=2550, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2551, col_offset=8), 'tk', Load(), lineno=2551, col_offset=8), 'call', Load(), lineno=2551, col_offset=8), [Attribute(Name('self', Load(), lineno=2551, col_offset=21), '_w', Load(), lineno=2551, col_offset=21), Str('selection', lineno=2551, col_offset=30), Str('set', lineno=2551, col_offset=43), Name('first', Load(), lineno=2551, col_offset=50), Name('last', Load(), lineno=2551, col_offset=57)], [], None, None, lineno=2551, col_offset=8), lineno=2551, col_offset=8)], [], lineno=2548, col_offset=4), Assign([Name('select_set', Store(), lineno=2552, col_offset=4)], Name('selection_set', Load(), lineno=2552, col_offset=17), lineno=2552, col_offset=4), FunctionDef('size', arguments([Name('self', Param(), lineno=2553, col_offset=13)], None, None, []), [Expr(Str('Return the number of elements in the listbox.', lineno=2554, col_offset=8), lineno=2554, col_offset=8), Return(Call(Name('getint', Load(), lineno=2555, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2555, col_offset=22), 'tk', Load(), lineno=2555, col_offset=22), 'call', Load(), lineno=2555, col_offset=22), [Attribute(Name('self', Load(), lineno=2555, col_offset=35), '_w', Load(), lineno=2555, col_offset=35), Str('size', lineno=2555, col_offset=44)], [], None, None, lineno=2555, col_offset=22)], [], None, None, lineno=2555, col_offset=15), lineno=2555, col_offset=8)], [], lineno=2553, col_offset=4), FunctionDef('itemcget', arguments([Name('self', Param(), lineno=2556, col_offset=17), Name('index', Param(), lineno=2556, col_offset=23), Name('option', Param(), lineno=2556, col_offset=30)], None, None, []), [Expr(Str('Return the resource value for an ITEM and an OPTION.', lineno=2557, col_offset=8), lineno=2557, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2558, col_offset=15), 'tk', Load(), lineno=2558, col_offset=15), 'call', Load(), lineno=2558, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2559, col_offset=13), '_w', Load(), lineno=2559, col_offset=13), Str('itemcget', lineno=2559, col_offset=22)], Load(), lineno=2559, col_offset=13), Add(), Tuple([Name('index', Load(), lineno=2559, col_offset=37), BinOp(Str('-', lineno=2559, col_offset=44), Add(), Name('option', Load(), lineno=2559, col_offset=48), lineno=2559, col_offset=44)], Load(), lineno=2559, col_offset=37), lineno=2559, col_offset=12)], [], None, None, lineno=2558, col_offset=15), lineno=2558, col_offset=8)], [], lineno=2556, col_offset=4), FunctionDef('itemconfigure', arguments([Name('self', Param(), lineno=2560, col_offset=22), Name('index', Param(), lineno=2560, col_offset=28), Name('cnf', Param(), lineno=2560, col_offset=35)], None, 'kw', [Name('None', Load(), lineno=2560, col_offset=39)]), [Expr(Str('Configure resources of an ITEM.\n\n        The values for resources are specified as keyword arguments.\n        To get an overview about the allowed keyword arguments\n        call the method without arguments.\n        Valid resource names: background, bg, foreground, fg,\n        selectbackground, selectforeground.', lineno=2567, col_offset=-1), lineno=2567, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2568, col_offset=15), '_configure', Load(), lineno=2568, col_offset=15), [Tuple([Str('itemconfigure', lineno=2568, col_offset=32), Name('index', Load(), lineno=2568, col_offset=49)], Load(), lineno=2568, col_offset=32), Name('cnf', Load(), lineno=2568, col_offset=57), Name('kw', Load(), lineno=2568, col_offset=62)], [], None, None, lineno=2568, col_offset=15), lineno=2568, col_offset=8)], [], lineno=2560, col_offset=4), Assign([Name('itemconfig', Store(), lineno=2569, col_offset=4)], Name('itemconfigure', Load(), lineno=2569, col_offset=17), lineno=2569, col_offset=4)], [], lineno=2477, col_offset=0), ClassDef('Menu', [Name('Widget', Load(), lineno=2571, col_offset=11)], [Expr(Str('Menu widget which allows to display menu bars, pull-down menus and pop-up menus.', lineno=2572, col_offset=4), lineno=2572, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2573, col_offset=17), Name('master', Param(), lineno=2573, col_offset=23), Name('cnf', Param(), lineno=2573, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2573, col_offset=30), Dict([], [], lineno=2573, col_offset=40)]), [Expr(Str('Construct menu widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeborderwidth,\n        activeforeground, background, bd, bg, borderwidth, cursor,\n        disabledforeground, fg, font, foreground, postcommand, relief,\n        selectcolor, takefocus, tearoff, tearoffcommand, title, type.', lineno=2579, col_offset=-1), lineno=2579, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2580, col_offset=8), '__init__', Load(), lineno=2580, col_offset=8), [Name('self', Load(), lineno=2580, col_offset=24), Name('master', Load(), lineno=2580, col_offset=30), Str('menu', lineno=2580, col_offset=38), Name('cnf', Load(), lineno=2580, col_offset=46), Name('kw', Load(), lineno=2580, col_offset=51)], [], None, None, lineno=2580, col_offset=8), lineno=2580, col_offset=8)], [], lineno=2573, col_offset=4), FunctionDef('tk_bindForTraversal', arguments([Name('self', Param(), lineno=2581, col_offset=28)], None, None, []), [Pass( lineno=2582, col_offset=8)], [], lineno=2581, col_offset=4), FunctionDef('tk_mbPost', arguments([Name('self', Param(), lineno=2583, col_offset=18)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2584, col_offset=8), 'tk', Load(), lineno=2584, col_offset=8), 'call', Load(), lineno=2584, col_offset=8), [Str('tk_mbPost', lineno=2584, col_offset=21), Attribute(Name('self', Load(), lineno=2584, col_offset=34), '_w', Load(), lineno=2584, col_offset=34)], [], None, None, lineno=2584, col_offset=8), lineno=2584, col_offset=8)], [], lineno=2583, col_offset=4), FunctionDef('tk_mbUnpost', arguments([Name('self', Param(), lineno=2585, col_offset=20)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2586, col_offset=8), 'tk', Load(), lineno=2586, col_offset=8), 'call', Load(), lineno=2586, col_offset=8), [Str('tk_mbUnpost', lineno=2586, col_offset=21)], [], None, None, lineno=2586, col_offset=8), lineno=2586, col_offset=8)], [], lineno=2585, col_offset=4), FunctionDef('tk_traverseToMenu', arguments([Name('self', Param(), lineno=2587, col_offset=26), Name('char', Param(), lineno=2587, col_offset=32)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2588, col_offset=8), 'tk', Load(), lineno=2588, col_offset=8), 'call', Load(), lineno=2588, col_offset=8), [Str('tk_traverseToMenu', lineno=2588, col_offset=21), Attribute(Name('self', Load(), lineno=2588, col_offset=42), '_w', Load(), lineno=2588, col_offset=42), Name('char', Load(), lineno=2588, col_offset=51)], [], None, None, lineno=2588, col_offset=8), lineno=2588, col_offset=8)], [], lineno=2587, col_offset=4), FunctionDef('tk_traverseWithinMenu', arguments([Name('self', Param(), lineno=2589, col_offset=30), Name('char', Param(), lineno=2589, col_offset=36)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2590, col_offset=8), 'tk', Load(), lineno=2590, col_offset=8), 'call', Load(), lineno=2590, col_offset=8), [Str('tk_traverseWithinMenu', lineno=2590, col_offset=21), Attribute(Name('self', Load(), lineno=2590, col_offset=46), '_w', Load(), lineno=2590, col_offset=46), Name('char', Load(), lineno=2590, col_offset=55)], [], None, None, lineno=2590, col_offset=8), lineno=2590, col_offset=8)], [], lineno=2589, col_offset=4), FunctionDef('tk_getMenuButtons', arguments([Name('self', Param(), lineno=2591, col_offset=26)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2592, col_offset=15), 'tk', Load(), lineno=2592, col_offset=15), 'call', Load(), lineno=2592, col_offset=15), [Str('tk_getMenuButtons', lineno=2592, col_offset=28), Attribute(Name('self', Load(), lineno=2592, col_offset=49), '_w', Load(), lineno=2592, col_offset=49)], [], None, None, lineno=2592, col_offset=15), lineno=2592, col_offset=8)], [], lineno=2591, col_offset=4), FunctionDef('tk_nextMenu', arguments([Name('self', Param(), lineno=2593, col_offset=20), Name('count', Param(), lineno=2593, col_offset=26)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2594, col_offset=8), 'tk', Load(), lineno=2594, col_offset=8), 'call', Load(), lineno=2594, col_offset=8), [Str('tk_nextMenu', lineno=2594, col_offset=21), Name('count', Load(), lineno=2594, col_offset=36)], [], None, None, lineno=2594, col_offset=8), lineno=2594, col_offset=8)], [], lineno=2593, col_offset=4), FunctionDef('tk_nextMenuEntry', arguments([Name('self', Param(), lineno=2595, col_offset=25), Name('count', Param(), lineno=2595, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2596, col_offset=8), 'tk', Load(), lineno=2596, col_offset=8), 'call', Load(), lineno=2596, col_offset=8), [Str('tk_nextMenuEntry', lineno=2596, col_offset=21), Name('count', Load(), lineno=2596, col_offset=41)], [], None, None, lineno=2596, col_offset=8), lineno=2596, col_offset=8)], [], lineno=2595, col_offset=4), FunctionDef('tk_invokeMenu', arguments([Name('self', Param(), lineno=2597, col_offset=22)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2598, col_offset=8), 'tk', Load(), lineno=2598, col_offset=8), 'call', Load(), lineno=2598, col_offset=8), [Str('tk_invokeMenu', lineno=2598, col_offset=21), Attribute(Name('self', Load(), lineno=2598, col_offset=38), '_w', Load(), lineno=2598, col_offset=38)], [], None, None, lineno=2598, col_offset=8), lineno=2598, col_offset=8)], [], lineno=2597, col_offset=4), FunctionDef('tk_firstMenu', arguments([Name('self', Param(), lineno=2599, col_offset=21)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2600, col_offset=8), 'tk', Load(), lineno=2600, col_offset=8), 'call', Load(), lineno=2600, col_offset=8), [Str('tk_firstMenu', lineno=2600, col_offset=21), Attribute(Name('self', Load(), lineno=2600, col_offset=37), '_w', Load(), lineno=2600, col_offset=37)], [], None, None, lineno=2600, col_offset=8), lineno=2600, col_offset=8)], [], lineno=2599, col_offset=4), FunctionDef('tk_mbButtonDown', arguments([Name('self', Param(), lineno=2601, col_offset=24)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2602, col_offset=8), 'tk', Load(), lineno=2602, col_offset=8), 'call', Load(), lineno=2602, col_offset=8), [Str('tk_mbButtonDown', lineno=2602, col_offset=21), Attribute(Name('self', Load(), lineno=2602, col_offset=40), '_w', Load(), lineno=2602, col_offset=40)], [], None, None, lineno=2602, col_offset=8), lineno=2602, col_offset=8)], [], lineno=2601, col_offset=4), FunctionDef('tk_popup', arguments([Name('self', Param(), lineno=2603, col_offset=17), Name('x', Param(), lineno=2603, col_offset=23), Name('y', Param(), lineno=2603, col_offset=26), Name('entry', Param(), lineno=2603, col_offset=29)], None, None, [Str('', lineno=2603, col_offset=35)]), [Expr(Str('Post the menu at position X,Y with entry ENTRY.', lineno=2604, col_offset=8), lineno=2604, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2605, col_offset=8), 'tk', Load(), lineno=2605, col_offset=8), 'call', Load(), lineno=2605, col_offset=8), [Str('tk_popup', lineno=2605, col_offset=21), Attribute(Name('self', Load(), lineno=2605, col_offset=33), '_w', Load(), lineno=2605, col_offset=33), Name('x', Load(), lineno=2605, col_offset=42), Name('y', Load(), lineno=2605, col_offset=45), Name('entry', Load(), lineno=2605, col_offset=48)], [], None, None, lineno=2605, col_offset=8), lineno=2605, col_offset=8)], [], lineno=2603, col_offset=4), FunctionDef('activate', arguments([Name('self', Param(), lineno=2606, col_offset=17), Name('index', Param(), lineno=2606, col_offset=23)], None, None, []), [Expr(Str('Activate entry at INDEX.', lineno=2607, col_offset=8), lineno=2607, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2608, col_offset=8), 'tk', Load(), lineno=2608, col_offset=8), 'call', Load(), lineno=2608, col_offset=8), [Attribute(Name('self', Load(), lineno=2608, col_offset=21), '_w', Load(), lineno=2608, col_offset=21), Str('activate', lineno=2608, col_offset=30), Name('index', Load(), lineno=2608, col_offset=42)], [], None, None, lineno=2608, col_offset=8), lineno=2608, col_offset=8)], [], lineno=2606, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=2609, col_offset=12), Name('itemType', Param(), lineno=2609, col_offset=18), Name('cnf', Param(), lineno=2609, col_offset=28)], None, 'kw', [Dict([], [], lineno=2609, col_offset=32)]), [Expr(Str('Internal function.', lineno=2610, col_offset=8), lineno=2610, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2611, col_offset=8), 'tk', Load(), lineno=2611, col_offset=8), 'call', Load(), lineno=2611, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2611, col_offset=22), '_w', Load(), lineno=2611, col_offset=22), Str('add', lineno=2611, col_offset=31), Name('itemType', Load(), lineno=2611, col_offset=38)], Load(), lineno=2611, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=2612, col_offset=17), '_options', Load(), lineno=2612, col_offset=17), [Name('cnf', Load(), lineno=2612, col_offset=31), Name('kw', Load(), lineno=2612, col_offset=36)], [], None, None, lineno=2612, col_offset=17), lineno=2611, col_offset=21)], [], None, None, lineno=2611, col_offset=8), lineno=2611, col_offset=8)], [], lineno=2609, col_offset=4), FunctionDef('add_cascade', arguments([Name('self', Param(), lineno=2613, col_offset=20), Name('cnf', Param(), lineno=2613, col_offset=26)], None, 'kw', [Dict([], [], lineno=2613, col_offset=30)]), [Expr(Str('Add hierarchical menu item.', lineno=2614, col_offset=8), lineno=2614, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2615, col_offset=8), 'add', Load(), lineno=2615, col_offset=8), [Str('cascade', lineno=2615, col_offset=17), BoolOp(Or(), [Name('cnf', Load(), lineno=2615, col_offset=28), Name('kw', Load(), lineno=2615, col_offset=35)], lineno=2615, col_offset=28)], [], None, None, lineno=2615, col_offset=8), lineno=2615, col_offset=8)], [], lineno=2613, col_offset=4), FunctionDef('add_checkbutton', arguments([Name('self', Param(), lineno=2616, col_offset=24), Name('cnf', Param(), lineno=2616, col_offset=30)], None, 'kw', [Dict([], [], lineno=2616, col_offset=34)]), [Expr(Str('Add checkbutton menu item.', lineno=2617, col_offset=8), lineno=2617, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2618, col_offset=8), 'add', Load(), lineno=2618, col_offset=8), [Str('checkbutton', lineno=2618, col_offset=17), BoolOp(Or(), [Name('cnf', Load(), lineno=2618, col_offset=32), Name('kw', Load(), lineno=2618, col_offset=39)], lineno=2618, col_offset=32)], [], None, None, lineno=2618, col_offset=8), lineno=2618, col_offset=8)], [], lineno=2616, col_offset=4), FunctionDef('add_command', arguments([Name('self', Param(), lineno=2619, col_offset=20), Name('cnf', Param(), lineno=2619, col_offset=26)], None, 'kw', [Dict([], [], lineno=2619, col_offset=30)]), [Expr(Str('Add command menu item.', lineno=2620, col_offset=8), lineno=2620, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2621, col_offset=8), 'add', Load(), lineno=2621, col_offset=8), [Str('command', lineno=2621, col_offset=17), BoolOp(Or(), [Name('cnf', Load(), lineno=2621, col_offset=28), Name('kw', Load(), lineno=2621, col_offset=35)], lineno=2621, col_offset=28)], [], None, None, lineno=2621, col_offset=8), lineno=2621, col_offset=8)], [], lineno=2619, col_offset=4), FunctionDef('add_radiobutton', arguments([Name('self', Param(), lineno=2622, col_offset=24), Name('cnf', Param(), lineno=2622, col_offset=30)], None, 'kw', [Dict([], [], lineno=2622, col_offset=34)]), [Expr(Str('Addd radio menu item.', lineno=2623, col_offset=8), lineno=2623, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2624, col_offset=8), 'add', Load(), lineno=2624, col_offset=8), [Str('radiobutton', lineno=2624, col_offset=17), BoolOp(Or(), [Name('cnf', Load(), lineno=2624, col_offset=32), Name('kw', Load(), lineno=2624, col_offset=39)], lineno=2624, col_offset=32)], [], None, None, lineno=2624, col_offset=8), lineno=2624, col_offset=8)], [], lineno=2622, col_offset=4), FunctionDef('add_separator', arguments([Name('self', Param(), lineno=2625, col_offset=22), Name('cnf', Param(), lineno=2625, col_offset=28)], None, 'kw', [Dict([], [], lineno=2625, col_offset=32)]), [Expr(Str('Add separator.', lineno=2626, col_offset=8), lineno=2626, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2627, col_offset=8), 'add', Load(), lineno=2627, col_offset=8), [Str('separator', lineno=2627, col_offset=17), BoolOp(Or(), [Name('cnf', Load(), lineno=2627, col_offset=30), Name('kw', Load(), lineno=2627, col_offset=37)], lineno=2627, col_offset=30)], [], None, None, lineno=2627, col_offset=8), lineno=2627, col_offset=8)], [], lineno=2625, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=2628, col_offset=15), Name('index', Param(), lineno=2628, col_offset=21), Name('itemType', Param(), lineno=2628, col_offset=28), Name('cnf', Param(), lineno=2628, col_offset=38)], None, 'kw', [Dict([], [], lineno=2628, col_offset=42)]), [Expr(Str('Internal function.', lineno=2629, col_offset=8), lineno=2629, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2630, col_offset=8), 'tk', Load(), lineno=2630, col_offset=8), 'call', Load(), lineno=2630, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2630, col_offset=22), '_w', Load(), lineno=2630, col_offset=22), Str('insert', lineno=2630, col_offset=31), Name('index', Load(), lineno=2630, col_offset=41), Name('itemType', Load(), lineno=2630, col_offset=48)], Load(), lineno=2630, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=2631, col_offset=17), '_options', Load(), lineno=2631, col_offset=17), [Name('cnf', Load(), lineno=2631, col_offset=31), Name('kw', Load(), lineno=2631, col_offset=36)], [], None, None, lineno=2631, col_offset=17), lineno=2630, col_offset=21)], [], None, None, lineno=2630, col_offset=8), lineno=2630, col_offset=8)], [], lineno=2628, col_offset=4), FunctionDef('insert_cascade', arguments([Name('self', Param(), lineno=2632, col_offset=23), Name('index', Param(), lineno=2632, col_offset=29), Name('cnf', Param(), lineno=2632, col_offset=36)], None, 'kw', [Dict([], [], lineno=2632, col_offset=40)]), [Expr(Str('Add hierarchical menu item at INDEX.', lineno=2633, col_offset=8), lineno=2633, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2634, col_offset=8), 'insert', Load(), lineno=2634, col_offset=8), [Name('index', Load(), lineno=2634, col_offset=20), Str('cascade', lineno=2634, col_offset=27), BoolOp(Or(), [Name('cnf', Load(), lineno=2634, col_offset=38), Name('kw', Load(), lineno=2634, col_offset=45)], lineno=2634, col_offset=38)], [], None, None, lineno=2634, col_offset=8), lineno=2634, col_offset=8)], [], lineno=2632, col_offset=4), FunctionDef('insert_checkbutton', arguments([Name('self', Param(), lineno=2635, col_offset=27), Name('index', Param(), lineno=2635, col_offset=33), Name('cnf', Param(), lineno=2635, col_offset=40)], None, 'kw', [Dict([], [], lineno=2635, col_offset=44)]), [Expr(Str('Add checkbutton menu item at INDEX.', lineno=2636, col_offset=8), lineno=2636, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2637, col_offset=8), 'insert', Load(), lineno=2637, col_offset=8), [Name('index', Load(), lineno=2637, col_offset=20), Str('checkbutton', lineno=2637, col_offset=27), BoolOp(Or(), [Name('cnf', Load(), lineno=2637, col_offset=42), Name('kw', Load(), lineno=2637, col_offset=49)], lineno=2637, col_offset=42)], [], None, None, lineno=2637, col_offset=8), lineno=2637, col_offset=8)], [], lineno=2635, col_offset=4), FunctionDef('insert_command', arguments([Name('self', Param(), lineno=2638, col_offset=23), Name('index', Param(), lineno=2638, col_offset=29), Name('cnf', Param(), lineno=2638, col_offset=36)], None, 'kw', [Dict([], [], lineno=2638, col_offset=40)]), [Expr(Str('Add command menu item at INDEX.', lineno=2639, col_offset=8), lineno=2639, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2640, col_offset=8), 'insert', Load(), lineno=2640, col_offset=8), [Name('index', Load(), lineno=2640, col_offset=20), Str('command', lineno=2640, col_offset=27), BoolOp(Or(), [Name('cnf', Load(), lineno=2640, col_offset=38), Name('kw', Load(), lineno=2640, col_offset=45)], lineno=2640, col_offset=38)], [], None, None, lineno=2640, col_offset=8), lineno=2640, col_offset=8)], [], lineno=2638, col_offset=4), FunctionDef('insert_radiobutton', arguments([Name('self', Param(), lineno=2641, col_offset=27), Name('index', Param(), lineno=2641, col_offset=33), Name('cnf', Param(), lineno=2641, col_offset=40)], None, 'kw', [Dict([], [], lineno=2641, col_offset=44)]), [Expr(Str('Addd radio menu item at INDEX.', lineno=2642, col_offset=8), lineno=2642, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2643, col_offset=8), 'insert', Load(), lineno=2643, col_offset=8), [Name('index', Load(), lineno=2643, col_offset=20), Str('radiobutton', lineno=2643, col_offset=27), BoolOp(Or(), [Name('cnf', Load(), lineno=2643, col_offset=42), Name('kw', Load(), lineno=2643, col_offset=49)], lineno=2643, col_offset=42)], [], None, None, lineno=2643, col_offset=8), lineno=2643, col_offset=8)], [], lineno=2641, col_offset=4), FunctionDef('insert_separator', arguments([Name('self', Param(), lineno=2644, col_offset=25), Name('index', Param(), lineno=2644, col_offset=31), Name('cnf', Param(), lineno=2644, col_offset=38)], None, 'kw', [Dict([], [], lineno=2644, col_offset=42)]), [Expr(Str('Add separator at INDEX.', lineno=2645, col_offset=8), lineno=2645, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=2646, col_offset=8), 'insert', Load(), lineno=2646, col_offset=8), [Name('index', Load(), lineno=2646, col_offset=20), Str('separator', lineno=2646, col_offset=27), BoolOp(Or(), [Name('cnf', Load(), lineno=2646, col_offset=40), Name('kw', Load(), lineno=2646, col_offset=47)], lineno=2646, col_offset=40)], [], None, None, lineno=2646, col_offset=8), lineno=2646, col_offset=8)], [], lineno=2644, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=2647, col_offset=15), Name('index1', Param(), lineno=2647, col_offset=21), Name('index2', Param(), lineno=2647, col_offset=29)], None, None, [Name('None', Load(), lineno=2647, col_offset=36)]), [Expr(Str('Delete menu items between INDEX1 and INDEX2 (included).', lineno=2648, col_offset=8), lineno=2648, col_offset=8), If(Compare(Name('index2', Load(), lineno=2649, col_offset=11), [Is()], [Name('None', Load(), lineno=2649, col_offset=21)], lineno=2649, col_offset=11), [Assign([Name('index2', Store(), lineno=2650, col_offset=12)], Name('index1', Load(), lineno=2650, col_offset=21), lineno=2650, col_offset=12)], [], lineno=2649, col_offset=8), Assign([Tuple([Name('num_index1', Store(), lineno=2652, col_offset=8), Name('num_index2', Store(), lineno=2652, col_offset=20)], Store(), lineno=2652, col_offset=8)], Tuple([Call(Attribute(Name('self', Load(), lineno=2652, col_offset=33), 'index', Load(), lineno=2652, col_offset=33), [Name('index1', Load(), lineno=2652, col_offset=44)], [], None, None, lineno=2652, col_offset=33), Call(Attribute(Name('self', Load(), lineno=2652, col_offset=53), 'index', Load(), lineno=2652, col_offset=53), [Name('index2', Load(), lineno=2652, col_offset=64)], [], None, None, lineno=2652, col_offset=53)], Load(), lineno=2652, col_offset=33), lineno=2652, col_offset=8), If(BoolOp(Or(), [Compare(Name('num_index1', Load(), lineno=2653, col_offset=12), [Is()], [Name('None', Load(), lineno=2653, col_offset=26)], lineno=2653, col_offset=12), Compare(Name('num_index2', Load(), lineno=2653, col_offset=36), [Is()], [Name('None', Load(), lineno=2653, col_offset=50)], lineno=2653, col_offset=36)], lineno=2653, col_offset=11), [Assign([Tuple([Name('num_index1', Store(), lineno=2654, col_offset=12), Name('num_index2', Store(), lineno=2654, col_offset=24)], Store(), lineno=2654, col_offset=12)], Tuple([Num(0, lineno=2654, col_offset=37), Num(-1, lineno=2654, col_offset=41)], Load(), lineno=2654, col_offset=37), lineno=2654, col_offset=12)], [], lineno=2653, col_offset=8), For(Name('i', Store(), lineno=2656, col_offset=12), Call(Name('range', Load(), lineno=2656, col_offset=17), [Name('num_index1', Load(), lineno=2656, col_offset=23), BinOp(Name('num_index2', Load(), lineno=2656, col_offset=35), Add(), Num(1, lineno=2656, col_offset=48), lineno=2656, col_offset=35)], [], None, None, lineno=2656, col_offset=17), [If(Compare(Str('command', lineno=2657, col_offset=15), [In()], [Call(Attribute(Name('self', Load(), lineno=2657, col_offset=28), 'entryconfig', Load(), lineno=2657, col_offset=28), [Name('i', Load(), lineno=2657, col_offset=45)], [], None, None, lineno=2657, col_offset=28)], lineno=2657, col_offset=15), [Assign([Name('c', Store(), lineno=2658, col_offset=16)], Call(Name('str', Load(), lineno=2658, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=2658, col_offset=24), 'entrycget', Load(), lineno=2658, col_offset=24), [Name('i', Load(), lineno=2658, col_offset=39), Str('command', lineno=2658, col_offset=42)], [], None, None, lineno=2658, col_offset=24)], [], None, None, lineno=2658, col_offset=20), lineno=2658, col_offset=16), If(Name('c', Load(), lineno=2659, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=2660, col_offset=20), 'deletecommand', Load(), lineno=2660, col_offset=20), [Name('c', Load(), lineno=2660, col_offset=39)], [], None, None, lineno=2660, col_offset=20), lineno=2660, col_offset=20)], [], lineno=2659, col_offset=16)], [], lineno=2657, col_offset=12)], [], lineno=2656, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2661, col_offset=8), 'tk', Load(), lineno=2661, col_offset=8), 'call', Load(), lineno=2661, col_offset=8), [Attribute(Name('self', Load(), lineno=2661, col_offset=21), '_w', Load(), lineno=2661, col_offset=21), Str('delete', lineno=2661, col_offset=30), Name('index1', Load(), lineno=2661, col_offset=40), Name('index2', Load(), lineno=2661, col_offset=48)], [], None, None, lineno=2661, col_offset=8), lineno=2661, col_offset=8)], [], lineno=2647, col_offset=4), FunctionDef('entrycget', arguments([Name('self', Param(), lineno=2662, col_offset=18), Name('index', Param(), lineno=2662, col_offset=24), Name('option', Param(), lineno=2662, col_offset=31)], None, None, []), [Expr(Str('Return the resource value of an menu item for OPTION at INDEX.', lineno=2663, col_offset=8), lineno=2663, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2664, col_offset=15), 'tk', Load(), lineno=2664, col_offset=15), 'call', Load(), lineno=2664, col_offset=15), [Attribute(Name('self', Load(), lineno=2664, col_offset=28), '_w', Load(), lineno=2664, col_offset=28), Str('entrycget', lineno=2664, col_offset=37), Name('index', Load(), lineno=2664, col_offset=50), BinOp(Str('-', lineno=2664, col_offset=57), Add(), Name('option', Load(), lineno=2664, col_offset=63), lineno=2664, col_offset=57)], [], None, None, lineno=2664, col_offset=15), lineno=2664, col_offset=8)], [], lineno=2662, col_offset=4), FunctionDef('entryconfigure', arguments([Name('self', Param(), lineno=2665, col_offset=23), Name('index', Param(), lineno=2665, col_offset=29), Name('cnf', Param(), lineno=2665, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2665, col_offset=40)]), [Expr(Str('Configure a menu item at INDEX.', lineno=2666, col_offset=8), lineno=2666, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2667, col_offset=15), '_configure', Load(), lineno=2667, col_offset=15), [Tuple([Str('entryconfigure', lineno=2667, col_offset=32), Name('index', Load(), lineno=2667, col_offset=50)], Load(), lineno=2667, col_offset=32), Name('cnf', Load(), lineno=2667, col_offset=58), Name('kw', Load(), lineno=2667, col_offset=63)], [], None, None, lineno=2667, col_offset=15), lineno=2667, col_offset=8)], [], lineno=2665, col_offset=4), Assign([Name('entryconfig', Store(), lineno=2668, col_offset=4)], Name('entryconfigure', Load(), lineno=2668, col_offset=18), lineno=2668, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=2669, col_offset=14), Name('index', Param(), lineno=2669, col_offset=20)], None, None, []), [Expr(Str('Return the index of a menu item identified by INDEX.', lineno=2670, col_offset=8), lineno=2670, col_offset=8), Assign([Name('i', Store(), lineno=2671, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=2671, col_offset=12), 'tk', Load(), lineno=2671, col_offset=12), 'call', Load(), lineno=2671, col_offset=12), [Attribute(Name('self', Load(), lineno=2671, col_offset=25), '_w', Load(), lineno=2671, col_offset=25), Str('index', lineno=2671, col_offset=34), Name('index', Load(), lineno=2671, col_offset=43)], [], None, None, lineno=2671, col_offset=12), lineno=2671, col_offset=8), If(Compare(Name('i', Load(), lineno=2672, col_offset=11), [Eq()], [Str('none', lineno=2672, col_offset=16)], lineno=2672, col_offset=11), [Return(Name('None', Load(), lineno=2672, col_offset=31), lineno=2672, col_offset=24)], [], lineno=2672, col_offset=8), Return(Call(Name('getint', Load(), lineno=2673, col_offset=15), [Name('i', Load(), lineno=2673, col_offset=22)], [], None, None, lineno=2673, col_offset=15), lineno=2673, col_offset=8)], [], lineno=2669, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=2674, col_offset=15), Name('index', Param(), lineno=2674, col_offset=21)], None, None, []), [Expr(Str('Invoke a menu item identified by INDEX and execute\n        the associated command.', lineno=2676, col_offset=-1), lineno=2676, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2677, col_offset=15), 'tk', Load(), lineno=2677, col_offset=15), 'call', Load(), lineno=2677, col_offset=15), [Attribute(Name('self', Load(), lineno=2677, col_offset=28), '_w', Load(), lineno=2677, col_offset=28), Str('invoke', lineno=2677, col_offset=37), Name('index', Load(), lineno=2677, col_offset=47)], [], None, None, lineno=2677, col_offset=15), lineno=2677, col_offset=8)], [], lineno=2674, col_offset=4), FunctionDef('post', arguments([Name('self', Param(), lineno=2678, col_offset=13), Name('x', Param(), lineno=2678, col_offset=19), Name('y', Param(), lineno=2678, col_offset=22)], None, None, []), [Expr(Str('Display a menu at position X,Y.', lineno=2679, col_offset=8), lineno=2679, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2680, col_offset=8), 'tk', Load(), lineno=2680, col_offset=8), 'call', Load(), lineno=2680, col_offset=8), [Attribute(Name('self', Load(), lineno=2680, col_offset=21), '_w', Load(), lineno=2680, col_offset=21), Str('post', lineno=2680, col_offset=30), Name('x', Load(), lineno=2680, col_offset=38), Name('y', Load(), lineno=2680, col_offset=41)], [], None, None, lineno=2680, col_offset=8), lineno=2680, col_offset=8)], [], lineno=2678, col_offset=4), FunctionDef('type', arguments([Name('self', Param(), lineno=2681, col_offset=13), Name('index', Param(), lineno=2681, col_offset=19)], None, None, []), [Expr(Str('Return the type of the menu item at INDEX.', lineno=2682, col_offset=8), lineno=2682, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2683, col_offset=15), 'tk', Load(), lineno=2683, col_offset=15), 'call', Load(), lineno=2683, col_offset=15), [Attribute(Name('self', Load(), lineno=2683, col_offset=28), '_w', Load(), lineno=2683, col_offset=28), Str('type', lineno=2683, col_offset=37), Name('index', Load(), lineno=2683, col_offset=45)], [], None, None, lineno=2683, col_offset=15), lineno=2683, col_offset=8)], [], lineno=2681, col_offset=4), FunctionDef('unpost', arguments([Name('self', Param(), lineno=2684, col_offset=15)], None, None, []), [Expr(Str('Unmap a menu.', lineno=2685, col_offset=8), lineno=2685, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2686, col_offset=8), 'tk', Load(), lineno=2686, col_offset=8), 'call', Load(), lineno=2686, col_offset=8), [Attribute(Name('self', Load(), lineno=2686, col_offset=21), '_w', Load(), lineno=2686, col_offset=21), Str('unpost', lineno=2686, col_offset=30)], [], None, None, lineno=2686, col_offset=8), lineno=2686, col_offset=8)], [], lineno=2684, col_offset=4), FunctionDef('yposition', arguments([Name('self', Param(), lineno=2687, col_offset=18), Name('index', Param(), lineno=2687, col_offset=24)], None, None, []), [Expr(Str('Return the y-position of the topmost pixel of the menu item at INDEX.', lineno=2688, col_offset=8), lineno=2688, col_offset=8), Return(Call(Name('getint', Load(), lineno=2689, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2689, col_offset=22), 'tk', Load(), lineno=2689, col_offset=22), 'call', Load(), lineno=2689, col_offset=22), [Attribute(Name('self', Load(), lineno=2690, col_offset=12), '_w', Load(), lineno=2690, col_offset=12), Str('yposition', lineno=2690, col_offset=21), Name('index', Load(), lineno=2690, col_offset=34)], [], None, None, lineno=2689, col_offset=22)], [], None, None, lineno=2689, col_offset=15), lineno=2689, col_offset=8)], [], lineno=2687, col_offset=4)], [], lineno=2571, col_offset=0), ClassDef('Menubutton', [Name('Widget', Load(), lineno=2692, col_offset=17)], [Expr(Str('Menubutton widget, obsolete since Tk8.0.', lineno=2693, col_offset=4), lineno=2693, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2694, col_offset=17), Name('master', Param(), lineno=2694, col_offset=23), Name('cnf', Param(), lineno=2694, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2694, col_offset=30), Dict([], [], lineno=2694, col_offset=40)]), [Expr(Call(Attribute(Name('Widget', Load(), lineno=2695, col_offset=8), '__init__', Load(), lineno=2695, col_offset=8), [Name('self', Load(), lineno=2695, col_offset=24), Name('master', Load(), lineno=2695, col_offset=30), Str('menubutton', lineno=2695, col_offset=38), Name('cnf', Load(), lineno=2695, col_offset=52), Name('kw', Load(), lineno=2695, col_offset=57)], [], None, None, lineno=2695, col_offset=8), lineno=2695, col_offset=8)], [], lineno=2694, col_offset=4)], [], lineno=2692, col_offset=0), ClassDef('Message', [Name('Widget', Load(), lineno=2697, col_offset=14)], [Expr(Str('Message widget to display multiline text. Obsolete since Label does it too.', lineno=2698, col_offset=4), lineno=2698, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2699, col_offset=17), Name('master', Param(), lineno=2699, col_offset=23), Name('cnf', Param(), lineno=2699, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2699, col_offset=30), Dict([], [], lineno=2699, col_offset=40)]), [Expr(Call(Attribute(Name('Widget', Load(), lineno=2700, col_offset=8), '__init__', Load(), lineno=2700, col_offset=8), [Name('self', Load(), lineno=2700, col_offset=24), Name('master', Load(), lineno=2700, col_offset=30), Str('message', lineno=2700, col_offset=38), Name('cnf', Load(), lineno=2700, col_offset=49), Name('kw', Load(), lineno=2700, col_offset=54)], [], None, None, lineno=2700, col_offset=8), lineno=2700, col_offset=8)], [], lineno=2699, col_offset=4)], [], lineno=2697, col_offset=0), ClassDef('Radiobutton', [Name('Widget', Load(), lineno=2702, col_offset=18)], [Expr(Str('Radiobutton widget which shows only one of several buttons in on-state.', lineno=2703, col_offset=4), lineno=2703, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2704, col_offset=17), Name('master', Param(), lineno=2704, col_offset=23), Name('cnf', Param(), lineno=2704, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2704, col_offset=30), Dict([], [], lineno=2704, col_offset=40)]), [Expr(Str('Construct a radiobutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, padx, pady, relief, selectcolor, selectimage,\n        state, takefocus, text, textvariable, underline, value, variable,\n        width, wraplength.', lineno=2713, col_offset=-1), lineno=2713, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2714, col_offset=8), '__init__', Load(), lineno=2714, col_offset=8), [Name('self', Load(), lineno=2714, col_offset=24), Name('master', Load(), lineno=2714, col_offset=30), Str('radiobutton', lineno=2714, col_offset=38), Name('cnf', Load(), lineno=2714, col_offset=53), Name('kw', Load(), lineno=2714, col_offset=58)], [], None, None, lineno=2714, col_offset=8), lineno=2714, col_offset=8)], [], lineno=2704, col_offset=4), FunctionDef('deselect', arguments([Name('self', Param(), lineno=2715, col_offset=17)], None, None, []), [Expr(Str('Put the button in off-state.', lineno=2716, col_offset=8), lineno=2716, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2718, col_offset=8), 'tk', Load(), lineno=2718, col_offset=8), 'call', Load(), lineno=2718, col_offset=8), [Attribute(Name('self', Load(), lineno=2718, col_offset=21), '_w', Load(), lineno=2718, col_offset=21), Str('deselect', lineno=2718, col_offset=30)], [], None, None, lineno=2718, col_offset=8), lineno=2718, col_offset=8)], [], lineno=2715, col_offset=4), FunctionDef('flash', arguments([Name('self', Param(), lineno=2719, col_offset=14)], None, None, []), [Expr(Str('Flash the button.', lineno=2720, col_offset=8), lineno=2720, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2721, col_offset=8), 'tk', Load(), lineno=2721, col_offset=8), 'call', Load(), lineno=2721, col_offset=8), [Attribute(Name('self', Load(), lineno=2721, col_offset=21), '_w', Load(), lineno=2721, col_offset=21), Str('flash', lineno=2721, col_offset=30)], [], None, None, lineno=2721, col_offset=8), lineno=2721, col_offset=8)], [], lineno=2719, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=2722, col_offset=15)], None, None, []), [Expr(Str('Toggle the button and invoke a command if given as resource.', lineno=2723, col_offset=8), lineno=2723, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2724, col_offset=15), 'tk', Load(), lineno=2724, col_offset=15), 'call', Load(), lineno=2724, col_offset=15), [Attribute(Name('self', Load(), lineno=2724, col_offset=28), '_w', Load(), lineno=2724, col_offset=28), Str('invoke', lineno=2724, col_offset=37)], [], None, None, lineno=2724, col_offset=15), lineno=2724, col_offset=8)], [], lineno=2722, col_offset=4), FunctionDef('select', arguments([Name('self', Param(), lineno=2725, col_offset=15)], None, None, []), [Expr(Str('Put the button in on-state.', lineno=2726, col_offset=8), lineno=2726, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2727, col_offset=8), 'tk', Load(), lineno=2727, col_offset=8), 'call', Load(), lineno=2727, col_offset=8), [Attribute(Name('self', Load(), lineno=2727, col_offset=21), '_w', Load(), lineno=2727, col_offset=21), Str('select', lineno=2727, col_offset=30)], [], None, None, lineno=2727, col_offset=8), lineno=2727, col_offset=8)], [], lineno=2725, col_offset=4)], [], lineno=2702, col_offset=0), ClassDef('Scale', [Name('Widget', Load(), lineno=2729, col_offset=12)], [Expr(Str('Scale widget which can display a numerical scale.', lineno=2730, col_offset=4), lineno=2730, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2731, col_offset=17), Name('master', Param(), lineno=2731, col_offset=23), Name('cnf', Param(), lineno=2731, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2731, col_offset=30), Dict([], [], lineno=2731, col_offset=40)]), [Expr(Str('Construct a scale widget with the parent MASTER.\n\n        Valid resource names: activebackground, background, bigincrement, bd,\n        bg, borderwidth, command, cursor, digits, fg, font, foreground, from,\n        highlightbackground, highlightcolor, highlightthickness, label,\n        length, orient, relief, repeatdelay, repeatinterval, resolution,\n        showvalue, sliderlength, sliderrelief, state, takefocus,\n        tickinterval, to, troughcolor, variable, width.', lineno=2739, col_offset=-1), lineno=2739, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2740, col_offset=8), '__init__', Load(), lineno=2740, col_offset=8), [Name('self', Load(), lineno=2740, col_offset=24), Name('master', Load(), lineno=2740, col_offset=30), Str('scale', lineno=2740, col_offset=38), Name('cnf', Load(), lineno=2740, col_offset=47), Name('kw', Load(), lineno=2740, col_offset=52)], [], None, None, lineno=2740, col_offset=8), lineno=2740, col_offset=8)], [], lineno=2731, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2741, col_offset=12)], None, None, []), [Expr(Str('Get the current value as integer or float.', lineno=2742, col_offset=8), lineno=2742, col_offset=8), Assign([Name('value', Store(), lineno=2743, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=2743, col_offset=16), 'tk', Load(), lineno=2743, col_offset=16), 'call', Load(), lineno=2743, col_offset=16), [Attribute(Name('self', Load(), lineno=2743, col_offset=29), '_w', Load(), lineno=2743, col_offset=29), Str('get', lineno=2743, col_offset=38)], [], None, None, lineno=2743, col_offset=16), lineno=2743, col_offset=8), TryExcept([Return(Call(Name('getint', Load(), lineno=2745, col_offset=19), [Name('value', Load(), lineno=2745, col_offset=26)], [], None, None, lineno=2745, col_offset=19), lineno=2745, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=2746, col_offset=15), None, [Return(Call(Name('getdouble', Load(), lineno=2747, col_offset=19), [Name('value', Load(), lineno=2747, col_offset=29)], [], None, None, lineno=2747, col_offset=19), lineno=2747, col_offset=12)], lineno=2746, col_offset=8)], [], lineno=2744, col_offset=8)], [], lineno=2741, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=2748, col_offset=12), Name('value', Param(), lineno=2748, col_offset=18)], None, None, []), [Expr(Str('Set the value to VALUE.', lineno=2749, col_offset=8), lineno=2749, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2750, col_offset=8), 'tk', Load(), lineno=2750, col_offset=8), 'call', Load(), lineno=2750, col_offset=8), [Attribute(Name('self', Load(), lineno=2750, col_offset=21), '_w', Load(), lineno=2750, col_offset=21), Str('set', lineno=2750, col_offset=30), Name('value', Load(), lineno=2750, col_offset=37)], [], None, None, lineno=2750, col_offset=8), lineno=2750, col_offset=8)], [], lineno=2748, col_offset=4), FunctionDef('coords', arguments([Name('self', Param(), lineno=2751, col_offset=15), Name('value', Param(), lineno=2751, col_offset=21)], None, None, [Name('None', Load(), lineno=2751, col_offset=27)]), [Expr(Str('Return a tuple (X,Y) of the point along the centerline of the\n        trough that corresponds to VALUE or the current value if None is\n        given.', lineno=2754, col_offset=-1), lineno=2754, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2756, col_offset=15), '_getints', Load(), lineno=2756, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2756, col_offset=29), 'tk', Load(), lineno=2756, col_offset=29), 'call', Load(), lineno=2756, col_offset=29), [Attribute(Name('self', Load(), lineno=2756, col_offset=42), '_w', Load(), lineno=2756, col_offset=42), Str('coords', lineno=2756, col_offset=51), Name('value', Load(), lineno=2756, col_offset=61)], [], None, None, lineno=2756, col_offset=29)], [], None, None, lineno=2756, col_offset=15), lineno=2756, col_offset=8)], [], lineno=2751, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=2757, col_offset=17), Name('x', Param(), lineno=2757, col_offset=23), Name('y', Param(), lineno=2757, col_offset=26)], None, None, []), [Expr(Str('Return where the point X,Y lies. Valid return values are "slider",\n        "though1" and "though2".', lineno=2759, col_offset=-1), lineno=2759, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2760, col_offset=15), 'tk', Load(), lineno=2760, col_offset=15), 'call', Load(), lineno=2760, col_offset=15), [Attribute(Name('self', Load(), lineno=2760, col_offset=28), '_w', Load(), lineno=2760, col_offset=28), Str('identify', lineno=2760, col_offset=37), Name('x', Load(), lineno=2760, col_offset=49), Name('y', Load(), lineno=2760, col_offset=52)], [], None, None, lineno=2760, col_offset=15), lineno=2760, col_offset=8)], [], lineno=2757, col_offset=4)], [], lineno=2729, col_offset=0), ClassDef('Scrollbar', [Name('Widget', Load(), lineno=2762, col_offset=16)], [Expr(Str('Scrollbar widget which displays a slider at a certain position.', lineno=2763, col_offset=4), lineno=2763, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2764, col_offset=17), Name('master', Param(), lineno=2764, col_offset=23), Name('cnf', Param(), lineno=2764, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2764, col_offset=30), Dict([], [], lineno=2764, col_offset=40)]), [Expr(Str('Construct a scrollbar widget with the parent MASTER.\n\n        Valid resource names: activebackground, activerelief,\n        background, bd, bg, borderwidth, command, cursor,\n        elementborderwidth, highlightbackground,\n        highlightcolor, highlightthickness, jump, orient,\n        relief, repeatdelay, repeatinterval, takefocus,\n        troughcolor, width.', lineno=2772, col_offset=-1), lineno=2772, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2773, col_offset=8), '__init__', Load(), lineno=2773, col_offset=8), [Name('self', Load(), lineno=2773, col_offset=24), Name('master', Load(), lineno=2773, col_offset=30), Str('scrollbar', lineno=2773, col_offset=38), Name('cnf', Load(), lineno=2773, col_offset=51), Name('kw', Load(), lineno=2773, col_offset=56)], [], None, None, lineno=2773, col_offset=8), lineno=2773, col_offset=8)], [], lineno=2764, col_offset=4), FunctionDef('activate', arguments([Name('self', Param(), lineno=2774, col_offset=17), Name('index', Param(), lineno=2774, col_offset=23)], None, None, []), [Expr(Str('Display the element at INDEX with activebackground and activerelief.\n        INDEX can be "arrow1","slider" or "arrow2".', lineno=2776, col_offset=-1), lineno=2776, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2777, col_offset=8), 'tk', Load(), lineno=2777, col_offset=8), 'call', Load(), lineno=2777, col_offset=8), [Attribute(Name('self', Load(), lineno=2777, col_offset=21), '_w', Load(), lineno=2777, col_offset=21), Str('activate', lineno=2777, col_offset=30), Name('index', Load(), lineno=2777, col_offset=42)], [], None, None, lineno=2777, col_offset=8), lineno=2777, col_offset=8)], [], lineno=2774, col_offset=4), FunctionDef('delta', arguments([Name('self', Param(), lineno=2778, col_offset=14), Name('deltax', Param(), lineno=2778, col_offset=20), Name('deltay', Param(), lineno=2778, col_offset=28)], None, None, []), [Expr(Str('Return the fractional change of the scrollbar setting if it\n        would be moved by DELTAX or DELTAY pixels.', lineno=2780, col_offset=-1), lineno=2780, col_offset=-1), Return(Call(Name('getdouble', Load(), lineno=2781, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2782, col_offset=12), 'tk', Load(), lineno=2782, col_offset=12), 'call', Load(), lineno=2782, col_offset=12), [Attribute(Name('self', Load(), lineno=2782, col_offset=25), '_w', Load(), lineno=2782, col_offset=25), Str('delta', lineno=2782, col_offset=34), Name('deltax', Load(), lineno=2782, col_offset=43), Name('deltay', Load(), lineno=2782, col_offset=51)], [], None, None, lineno=2782, col_offset=12)], [], None, None, lineno=2781, col_offset=15), lineno=2781, col_offset=8)], [], lineno=2778, col_offset=4), FunctionDef('fraction', arguments([Name('self', Param(), lineno=2783, col_offset=17), Name('x', Param(), lineno=2783, col_offset=23), Name('y', Param(), lineno=2783, col_offset=26)], None, None, []), [Expr(Str('Return the fractional value which corresponds to a slider\n        position of X,Y.', lineno=2785, col_offset=-1), lineno=2785, col_offset=-1), Return(Call(Name('getdouble', Load(), lineno=2786, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2786, col_offset=25), 'tk', Load(), lineno=2786, col_offset=25), 'call', Load(), lineno=2786, col_offset=25), [Attribute(Name('self', Load(), lineno=2786, col_offset=38), '_w', Load(), lineno=2786, col_offset=38), Str('fraction', lineno=2786, col_offset=47), Name('x', Load(), lineno=2786, col_offset=59), Name('y', Load(), lineno=2786, col_offset=62)], [], None, None, lineno=2786, col_offset=25)], [], None, None, lineno=2786, col_offset=15), lineno=2786, col_offset=8)], [], lineno=2783, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=2787, col_offset=17), Name('x', Param(), lineno=2787, col_offset=23), Name('y', Param(), lineno=2787, col_offset=26)], None, None, []), [Expr(Str('Return the element under position X,Y as one of\n        "arrow1","slider","arrow2" or "".', lineno=2789, col_offset=-1), lineno=2789, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2790, col_offset=15), 'tk', Load(), lineno=2790, col_offset=15), 'call', Load(), lineno=2790, col_offset=15), [Attribute(Name('self', Load(), lineno=2790, col_offset=28), '_w', Load(), lineno=2790, col_offset=28), Str('identify', lineno=2790, col_offset=37), Name('x', Load(), lineno=2790, col_offset=49), Name('y', Load(), lineno=2790, col_offset=52)], [], None, None, lineno=2790, col_offset=15), lineno=2790, col_offset=8)], [], lineno=2787, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2791, col_offset=12)], None, None, []), [Expr(Str('Return the current fractional values (upper and lower end)\n        of the slider position.', lineno=2793, col_offset=-1), lineno=2793, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2794, col_offset=15), '_getdoubles', Load(), lineno=2794, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2794, col_offset=32), 'tk', Load(), lineno=2794, col_offset=32), 'call', Load(), lineno=2794, col_offset=32), [Attribute(Name('self', Load(), lineno=2794, col_offset=45), '_w', Load(), lineno=2794, col_offset=45), Str('get', lineno=2794, col_offset=54)], [], None, None, lineno=2794, col_offset=32)], [], None, None, lineno=2794, col_offset=15), lineno=2794, col_offset=8)], [], lineno=2791, col_offset=4), FunctionDef('set', arguments([Name('self', Param(), lineno=2795, col_offset=12)], 'args', None, []), [Expr(Str('Set the fractional values of the slider position (upper and\n        lower ends as value between 0 and 1).', lineno=2797, col_offset=-1), lineno=2797, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2798, col_offset=8), 'tk', Load(), lineno=2798, col_offset=8), 'call', Load(), lineno=2798, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2798, col_offset=22), '_w', Load(), lineno=2798, col_offset=22), Str('set', lineno=2798, col_offset=31)], Load(), lineno=2798, col_offset=22), Add(), Name('args', Load(), lineno=2798, col_offset=40), lineno=2798, col_offset=21)], [], None, None, lineno=2798, col_offset=8), lineno=2798, col_offset=8)], [], lineno=2795, col_offset=4)], [], lineno=2762, col_offset=0), ClassDef('Text', [Name('Widget', Load(), lineno=2802, col_offset=11), Name('XView', Load(), lineno=2802, col_offset=19), Name('YView', Load(), lineno=2802, col_offset=26)], [Expr(Str('Text widget which can display text in various forms.', lineno=2803, col_offset=4), lineno=2803, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=2804, col_offset=17), Name('master', Param(), lineno=2804, col_offset=23), Name('cnf', Param(), lineno=2804, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=2804, col_offset=30), Dict([], [], lineno=2804, col_offset=40)]), [Expr(Str('Construct a text widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor,\n            exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, padx, pady,\n            relief, selectbackground,\n            selectborderwidth, selectforeground,\n            setgrid, takefocus,\n            xscrollcommand, yscrollcommand,\n\n        WIDGET-SPECIFIC OPTIONS\n\n            autoseparators, height, maxundo,\n            spacing1, spacing2, spacing3,\n            state, tabs, undo, width, wrap,\n\n        ', lineno=2826, col_offset=-1), lineno=2826, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=2827, col_offset=8), '__init__', Load(), lineno=2827, col_offset=8), [Name('self', Load(), lineno=2827, col_offset=24), Name('master', Load(), lineno=2827, col_offset=30), Str('text', lineno=2827, col_offset=38), Name('cnf', Load(), lineno=2827, col_offset=46), Name('kw', Load(), lineno=2827, col_offset=51)], [], None, None, lineno=2827, col_offset=8), lineno=2827, col_offset=8)], [], lineno=2804, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=2828, col_offset=13)], 'args', None, []), [Expr(Str('Return a tuple of (x,y,width,height) which gives the bounding\n        box of the visible part of the character at the index in ARGS.', lineno=2830, col_offset=-1), lineno=2830, col_offset=-1), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=2831, col_offset=15), '_getints', Load(), lineno=2831, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2832, col_offset=12), 'tk', Load(), lineno=2832, col_offset=12), 'call', Load(), lineno=2832, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2832, col_offset=26), '_w', Load(), lineno=2832, col_offset=26), Str('bbox', lineno=2832, col_offset=35)], Load(), lineno=2832, col_offset=26), Add(), Name('args', Load(), lineno=2832, col_offset=45), lineno=2832, col_offset=25)], [], None, None, lineno=2832, col_offset=12)], [], None, None, lineno=2831, col_offset=15), Name('None', Load(), lineno=2832, col_offset=55)], lineno=2831, col_offset=15), lineno=2831, col_offset=8)], [], lineno=2828, col_offset=4), FunctionDef('tk_textSelectTo', arguments([Name('self', Param(), lineno=2833, col_offset=24), Name('index', Param(), lineno=2833, col_offset=30)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2834, col_offset=8), 'tk', Load(), lineno=2834, col_offset=8), 'call', Load(), lineno=2834, col_offset=8), [Str('tk_textSelectTo', lineno=2834, col_offset=21), Attribute(Name('self', Load(), lineno=2834, col_offset=40), '_w', Load(), lineno=2834, col_offset=40), Name('index', Load(), lineno=2834, col_offset=49)], [], None, None, lineno=2834, col_offset=8), lineno=2834, col_offset=8)], [], lineno=2833, col_offset=4), FunctionDef('tk_textBackspace', arguments([Name('self', Param(), lineno=2835, col_offset=25)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2836, col_offset=8), 'tk', Load(), lineno=2836, col_offset=8), 'call', Load(), lineno=2836, col_offset=8), [Str('tk_textBackspace', lineno=2836, col_offset=21), Attribute(Name('self', Load(), lineno=2836, col_offset=41), '_w', Load(), lineno=2836, col_offset=41)], [], None, None, lineno=2836, col_offset=8), lineno=2836, col_offset=8)], [], lineno=2835, col_offset=4), FunctionDef('tk_textIndexCloser', arguments([Name('self', Param(), lineno=2837, col_offset=27), Name('a', Param(), lineno=2837, col_offset=33), Name('b', Param(), lineno=2837, col_offset=36), Name('c', Param(), lineno=2837, col_offset=39)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2838, col_offset=8), 'tk', Load(), lineno=2838, col_offset=8), 'call', Load(), lineno=2838, col_offset=8), [Str('tk_textIndexCloser', lineno=2838, col_offset=21), Attribute(Name('self', Load(), lineno=2838, col_offset=43), '_w', Load(), lineno=2838, col_offset=43), Name('a', Load(), lineno=2838, col_offset=52), Name('b', Load(), lineno=2838, col_offset=55), Name('c', Load(), lineno=2838, col_offset=58)], [], None, None, lineno=2838, col_offset=8), lineno=2838, col_offset=8)], [], lineno=2837, col_offset=4), FunctionDef('tk_textResetAnchor', arguments([Name('self', Param(), lineno=2839, col_offset=27), Name('index', Param(), lineno=2839, col_offset=33)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2840, col_offset=8), 'tk', Load(), lineno=2840, col_offset=8), 'call', Load(), lineno=2840, col_offset=8), [Str('tk_textResetAnchor', lineno=2840, col_offset=21), Attribute(Name('self', Load(), lineno=2840, col_offset=43), '_w', Load(), lineno=2840, col_offset=43), Name('index', Load(), lineno=2840, col_offset=52)], [], None, None, lineno=2840, col_offset=8), lineno=2840, col_offset=8)], [], lineno=2839, col_offset=4), FunctionDef('compare', arguments([Name('self', Param(), lineno=2841, col_offset=16), Name('index1', Param(), lineno=2841, col_offset=22), Name('op', Param(), lineno=2841, col_offset=30), Name('index2', Param(), lineno=2841, col_offset=34)], None, None, []), [Expr(Str('Return whether between index INDEX1 and index INDEX2 the\n        relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.', lineno=2843, col_offset=-1), lineno=2843, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2844, col_offset=15), 'tk', Load(), lineno=2844, col_offset=15), 'getboolean', Load(), lineno=2844, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2844, col_offset=34), 'tk', Load(), lineno=2844, col_offset=34), 'call', Load(), lineno=2844, col_offset=34), [Attribute(Name('self', Load(), lineno=2845, col_offset=12), '_w', Load(), lineno=2845, col_offset=12), Str('compare', lineno=2845, col_offset=21), Name('index1', Load(), lineno=2845, col_offset=32), Name('op', Load(), lineno=2845, col_offset=40), Name('index2', Load(), lineno=2845, col_offset=44)], [], None, None, lineno=2844, col_offset=34)], [], None, None, lineno=2844, col_offset=15), lineno=2844, col_offset=8)], [], lineno=2841, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=2846, col_offset=14), Name('boolean', Param(), lineno=2846, col_offset=20)], None, None, [Name('None', Load(), lineno=2846, col_offset=28)]), [Expr(Str('Turn on the internal consistency checks of the B-Tree inside the text\n        widget according to BOOLEAN.', lineno=2848, col_offset=-1), lineno=2848, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2849, col_offset=15), 'tk', Load(), lineno=2849, col_offset=15), 'getboolean', Load(), lineno=2849, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2849, col_offset=34), 'tk', Load(), lineno=2849, col_offset=34), 'call', Load(), lineno=2849, col_offset=34), [Attribute(Name('self', Load(), lineno=2850, col_offset=12), '_w', Load(), lineno=2850, col_offset=12), Str('debug', lineno=2850, col_offset=21), Name('boolean', Load(), lineno=2850, col_offset=30)], [], None, None, lineno=2849, col_offset=34)], [], None, None, lineno=2849, col_offset=15), lineno=2849, col_offset=8)], [], lineno=2846, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=2851, col_offset=15), Name('index1', Param(), lineno=2851, col_offset=21), Name('index2', Param(), lineno=2851, col_offset=29)], None, None, [Name('None', Load(), lineno=2851, col_offset=36)]), [Expr(Str('Delete the characters between INDEX1 and INDEX2 (not included).', lineno=2852, col_offset=8), lineno=2852, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2853, col_offset=8), 'tk', Load(), lineno=2853, col_offset=8), 'call', Load(), lineno=2853, col_offset=8), [Attribute(Name('self', Load(), lineno=2853, col_offset=21), '_w', Load(), lineno=2853, col_offset=21), Str('delete', lineno=2853, col_offset=30), Name('index1', Load(), lineno=2853, col_offset=40), Name('index2', Load(), lineno=2853, col_offset=48)], [], None, None, lineno=2853, col_offset=8), lineno=2853, col_offset=8)], [], lineno=2851, col_offset=4), FunctionDef('dlineinfo', arguments([Name('self', Param(), lineno=2854, col_offset=18), Name('index', Param(), lineno=2854, col_offset=24)], None, None, []), [Expr(Str('Return tuple (x,y,width,height,baseline) giving the bounding box\n        and baseline position of the visible part of the line containing\n        the character at INDEX.', lineno=2857, col_offset=-1), lineno=2857, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2858, col_offset=15), '_getints', Load(), lineno=2858, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2858, col_offset=29), 'tk', Load(), lineno=2858, col_offset=29), 'call', Load(), lineno=2858, col_offset=29), [Attribute(Name('self', Load(), lineno=2858, col_offset=42), '_w', Load(), lineno=2858, col_offset=42), Str('dlineinfo', lineno=2858, col_offset=51), Name('index', Load(), lineno=2858, col_offset=64)], [], None, None, lineno=2858, col_offset=29)], [], None, None, lineno=2858, col_offset=15), lineno=2858, col_offset=8)], [], lineno=2854, col_offset=4), FunctionDef('dump', arguments([Name('self', Param(), lineno=2859, col_offset=13), Name('index1', Param(), lineno=2859, col_offset=19), Name('index2', Param(), lineno=2859, col_offset=27), Name('command', Param(), lineno=2859, col_offset=40)], None, 'kw', [Name('None', Load(), lineno=2859, col_offset=34), Name('None', Load(), lineno=2859, col_offset=48)]), [Expr(Str("Return the contents of the widget between index1 and index2.\n\n        The type of contents returned in filtered based on the keyword\n        parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are\n        given and true, then the corresponding items are returned. The result\n        is a list of triples of the form (key, value, index). If none of the\n        keywords are true then 'all' is used by default.\n\n        If the 'command' argument is given, it is called once for each element\n        of the list of triples, with the values of each triple serving as the\n        arguments to the function. In this case the list is not returned.", lineno=2870, col_offset=-1), lineno=2870, col_offset=-1), Assign([Name('args', Store(), lineno=2871, col_offset=8)], List([], Load(), lineno=2871, col_offset=15), lineno=2871, col_offset=8), Assign([Name('func_name', Store(), lineno=2872, col_offset=8)], Name('None', Load(), lineno=2872, col_offset=20), lineno=2872, col_offset=8), Assign([Name('result', Store(), lineno=2873, col_offset=8)], Name('None', Load(), lineno=2873, col_offset=17), lineno=2873, col_offset=8), If(UnaryOp(Not(), Name('command', Load(), lineno=2874, col_offset=15), lineno=2874, col_offset=11), [Assign([Name('result', Store(), lineno=2879, col_offset=12)], List([], Load(), lineno=2879, col_offset=21), lineno=2879, col_offset=12), FunctionDef('append_triple', arguments([Name('key', Param(), lineno=2880, col_offset=30), Name('value', Param(), lineno=2880, col_offset=35), Name('index', Param(), lineno=2880, col_offset=42), Name('result', Param(), lineno=2880, col_offset=49)], None, None, [Name('result', Load(), lineno=2880, col_offset=56)]), [Expr(Call(Attribute(Name('result', Load(), lineno=2881, col_offset=16), 'append', Load(), lineno=2881, col_offset=16), [Tuple([Name('key', Load(), lineno=2881, col_offset=31), Name('value', Load(), lineno=2881, col_offset=36), Name('index', Load(), lineno=2881, col_offset=43)], Load(), lineno=2881, col_offset=31)], [], None, None, lineno=2881, col_offset=16), lineno=2881, col_offset=16)], [], lineno=2880, col_offset=12), Assign([Name('command', Store(), lineno=2882, col_offset=12)], Name('append_triple', Load(), lineno=2882, col_offset=22), lineno=2882, col_offset=12)], [], lineno=2874, col_offset=8), TryFinally([If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=2884, col_offset=19), [Name('command', Load(), lineno=2884, col_offset=30), Name('str', Load(), lineno=2884, col_offset=39)], [], None, None, lineno=2884, col_offset=19), lineno=2884, col_offset=15), [Assign([Name('func_name', Store(), lineno=2885, col_offset=16), Name('command', Store(), lineno=2885, col_offset=28)], Call(Attribute(Name('self', Load(), lineno=2885, col_offset=38), '_register', Load(), lineno=2885, col_offset=38), [Name('command', Load(), lineno=2885, col_offset=53)], [], None, None, lineno=2885, col_offset=38), lineno=2885, col_offset=16)], [], lineno=2884, col_offset=12), AugAssign(Name('args', Store(), lineno=2886, col_offset=12), Add(), List([Str('-command', lineno=2886, col_offset=21), Name('command', Load(), lineno=2886, col_offset=33)], Load(), lineno=2886, col_offset=20), lineno=2886, col_offset=12), For(Name('key', Store(), lineno=2887, col_offset=16), Name('kw', Load(), lineno=2887, col_offset=23), [If(Subscript(Name('kw', Load(), lineno=2888, col_offset=19), Index(Name('key', Load(), lineno=2888, col_offset=22)), Load(), lineno=2888, col_offset=19), [Expr(Call(Attribute(Name('args', Load(), lineno=2888, col_offset=28), 'append', Load(), lineno=2888, col_offset=28), [BinOp(Str('-', lineno=2888, col_offset=40), Add(), Name('key', Load(), lineno=2888, col_offset=46), lineno=2888, col_offset=40)], [], None, None, lineno=2888, col_offset=28), lineno=2888, col_offset=28)], [], lineno=2888, col_offset=16)], [], lineno=2887, col_offset=12), Expr(Call(Attribute(Name('args', Load(), lineno=2889, col_offset=12), 'append', Load(), lineno=2889, col_offset=12), [Name('index1', Load(), lineno=2889, col_offset=24)], [], None, None, lineno=2889, col_offset=12), lineno=2889, col_offset=12), If(Name('index2', Load(), lineno=2890, col_offset=15), [Expr(Call(Attribute(Name('args', Load(), lineno=2891, col_offset=16), 'append', Load(), lineno=2891, col_offset=16), [Name('index2', Load(), lineno=2891, col_offset=28)], [], None, None, lineno=2891, col_offset=16), lineno=2891, col_offset=16)], [], lineno=2890, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2892, col_offset=12), 'tk', Load(), lineno=2892, col_offset=12), 'call', Load(), lineno=2892, col_offset=12), [Attribute(Name('self', Load(), lineno=2892, col_offset=25), '_w', Load(), lineno=2892, col_offset=25), Str('dump', lineno=2892, col_offset=34)], [], Name('args', Load(), lineno=2892, col_offset=43), None, lineno=2892, col_offset=12), lineno=2892, col_offset=12), Return(Name('result', Load(), lineno=2893, col_offset=19), lineno=2893, col_offset=12)], [If(Name('func_name', Load(), lineno=2895, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=2896, col_offset=16), 'deletecommand', Load(), lineno=2896, col_offset=16), [Name('func_name', Load(), lineno=2896, col_offset=35)], [], None, None, lineno=2896, col_offset=16), lineno=2896, col_offset=16)], [], lineno=2895, col_offset=12)], lineno=2883, col_offset=8)], [], lineno=2859, col_offset=4), FunctionDef('edit', arguments([Name('self', Param(), lineno=2899, col_offset=13)], 'args', None, []), [Expr(Str('Internal method\n\n        This method controls the undo mechanism and\n        the modified flag. The exact behavior of the\n        command depends on the option argument that\n        follows the edit argument. The following forms\n        of the command are currently supported:\n\n        edit_modified, edit_redo, edit_reset, edit_separator\n        and edit_undo\n\n        ', lineno=2911, col_offset=-1), lineno=2911, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2912, col_offset=15), 'tk', Load(), lineno=2912, col_offset=15), 'call', Load(), lineno=2912, col_offset=15), [Attribute(Name('self', Load(), lineno=2912, col_offset=28), '_w', Load(), lineno=2912, col_offset=28), Str('edit', lineno=2912, col_offset=37)], [], Name('args', Load(), lineno=2912, col_offset=46), None, lineno=2912, col_offset=15), lineno=2912, col_offset=8)], [], lineno=2899, col_offset=4), FunctionDef('edit_modified', arguments([Name('self', Param(), lineno=2914, col_offset=22), Name('arg', Param(), lineno=2914, col_offset=28)], None, None, [Name('None', Load(), lineno=2914, col_offset=32)]), [Expr(Str('Get or Set the modified flag\n\n        If arg is not specified, returns the modified\n        flag of the widget. The insert, delete, edit undo and\n        edit redo commands or the user can set or clear the\n        modified flag. If boolean is specified, sets the\n        modified flag of the widget to arg.\n        ', lineno=2922, col_offset=-1), lineno=2922, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2923, col_offset=15), 'edit', Load(), lineno=2923, col_offset=15), [Str('modified', lineno=2923, col_offset=25), Name('arg', Load(), lineno=2923, col_offset=37)], [], None, None, lineno=2923, col_offset=15), lineno=2923, col_offset=8)], [], lineno=2914, col_offset=4), FunctionDef('edit_redo', arguments([Name('self', Param(), lineno=2925, col_offset=18)], None, None, []), [Expr(Str('Redo the last undone edit\n\n        When the undo option is true, reapplies the last\n        undone edits provided no other edits were done since\n        then. Generates an error when the redo stack is empty.\n        Does nothing when the undo option is false.\n        ', lineno=2932, col_offset=-1), lineno=2932, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2933, col_offset=15), 'edit', Load(), lineno=2933, col_offset=15), [Str('redo', lineno=2933, col_offset=25)], [], None, None, lineno=2933, col_offset=15), lineno=2933, col_offset=8)], [], lineno=2925, col_offset=4), FunctionDef('edit_reset', arguments([Name('self', Param(), lineno=2935, col_offset=19)], None, None, []), [Expr(Str('Clears the undo and redo stacks\n        ', lineno=2937, col_offset=-1), lineno=2937, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2938, col_offset=15), 'edit', Load(), lineno=2938, col_offset=15), [Str('reset', lineno=2938, col_offset=25)], [], None, None, lineno=2938, col_offset=15), lineno=2938, col_offset=8)], [], lineno=2935, col_offset=4), FunctionDef('edit_separator', arguments([Name('self', Param(), lineno=2940, col_offset=23)], None, None, []), [Expr(Str('Inserts a separator (boundary) on the undo stack.\n\n        Does nothing when the undo option is false\n        ', lineno=2944, col_offset=-1), lineno=2944, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2945, col_offset=15), 'edit', Load(), lineno=2945, col_offset=15), [Str('separator', lineno=2945, col_offset=25)], [], None, None, lineno=2945, col_offset=15), lineno=2945, col_offset=8)], [], lineno=2940, col_offset=4), FunctionDef('edit_undo', arguments([Name('self', Param(), lineno=2947, col_offset=18)], None, None, []), [Expr(Str('Undoes the last edit action\n\n        If the undo option is true. An edit action is defined\n        as all the insert and delete commands that are recorded\n        on the undo stack in between two separators. Generates\n        an error when the undo stack is empty. Does nothing\n        when the undo option is false\n        ', lineno=2955, col_offset=-1), lineno=2955, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=2956, col_offset=15), 'edit', Load(), lineno=2956, col_offset=15), [Str('undo', lineno=2956, col_offset=25)], [], None, None, lineno=2956, col_offset=15), lineno=2956, col_offset=8)], [], lineno=2947, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=2958, col_offset=12), Name('index1', Param(), lineno=2958, col_offset=18), Name('index2', Param(), lineno=2958, col_offset=26)], None, None, [Name('None', Load(), lineno=2958, col_offset=33)]), [Expr(Str('Return the text from INDEX1 to INDEX2 (not included).', lineno=2959, col_offset=8), lineno=2959, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2960, col_offset=15), 'tk', Load(), lineno=2960, col_offset=15), 'call', Load(), lineno=2960, col_offset=15), [Attribute(Name('self', Load(), lineno=2960, col_offset=28), '_w', Load(), lineno=2960, col_offset=28), Str('get', lineno=2960, col_offset=37), Name('index1', Load(), lineno=2960, col_offset=44), Name('index2', Load(), lineno=2960, col_offset=52)], [], None, None, lineno=2960, col_offset=15), lineno=2960, col_offset=8)], [], lineno=2958, col_offset=4), FunctionDef('image_cget', arguments([Name('self', Param(), lineno=2962, col_offset=19), Name('index', Param(), lineno=2962, col_offset=25), Name('option', Param(), lineno=2962, col_offset=32)], None, None, []), [Expr(Str('Return the value of OPTION of an embedded image at INDEX.', lineno=2963, col_offset=8), lineno=2963, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=2964, col_offset=11), Slice(None, Num(1, lineno=2964, col_offset=19), None), Load(), lineno=2964, col_offset=11), [NotEq()], [Str('-', lineno=2964, col_offset=25)], lineno=2964, col_offset=11), [Assign([Name('option', Store(), lineno=2965, col_offset=12)], BinOp(Str('-', lineno=2965, col_offset=21), Add(), Name('option', Load(), lineno=2965, col_offset=27), lineno=2965, col_offset=21), lineno=2965, col_offset=12)], [], lineno=2964, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=2966, col_offset=11), Slice(Num(-1, lineno=2966, col_offset=19), None, None), Load(), lineno=2966, col_offset=11), [Eq()], [Str('_', lineno=2966, col_offset=26)], lineno=2966, col_offset=11), [Assign([Name('option', Store(), lineno=2967, col_offset=12)], Subscript(Name('option', Load(), lineno=2967, col_offset=21), Slice(None, Num(-1, lineno=2967, col_offset=30), None), Load(), lineno=2967, col_offset=21), lineno=2967, col_offset=12)], [], lineno=2966, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2968, col_offset=15), 'tk', Load(), lineno=2968, col_offset=15), 'call', Load(), lineno=2968, col_offset=15), [Attribute(Name('self', Load(), lineno=2968, col_offset=28), '_w', Load(), lineno=2968, col_offset=28), Str('image', lineno=2968, col_offset=37), Str('cget', lineno=2968, col_offset=46), Name('index', Load(), lineno=2968, col_offset=54), Name('option', Load(), lineno=2968, col_offset=61)], [], None, None, lineno=2968, col_offset=15), lineno=2968, col_offset=8)], [], lineno=2962, col_offset=4), FunctionDef('image_configure', arguments([Name('self', Param(), lineno=2969, col_offset=24), Name('index', Param(), lineno=2969, col_offset=30), Name('cnf', Param(), lineno=2969, col_offset=37)], None, 'kw', [Name('None', Load(), lineno=2969, col_offset=41)]), [Expr(Str('Configure an embedded image at INDEX.', lineno=2970, col_offset=8), lineno=2970, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=2971, col_offset=15), '_configure', Load(), lineno=2971, col_offset=15), [Tuple([Str('image', lineno=2971, col_offset=32), Str('configure', lineno=2971, col_offset=41), Name('index', Load(), lineno=2971, col_offset=54)], Load(), lineno=2971, col_offset=32), Name('cnf', Load(), lineno=2971, col_offset=62), Name('kw', Load(), lineno=2971, col_offset=67)], [], None, None, lineno=2971, col_offset=15), lineno=2971, col_offset=8)], [], lineno=2969, col_offset=4), FunctionDef('image_create', arguments([Name('self', Param(), lineno=2972, col_offset=21), Name('index', Param(), lineno=2972, col_offset=27), Name('cnf', Param(), lineno=2972, col_offset=34)], None, 'kw', [Dict([], [], lineno=2972, col_offset=38)]), [Expr(Str('Create an embedded image at INDEX.', lineno=2973, col_offset=8), lineno=2973, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2974, col_offset=15), 'tk', Load(), lineno=2974, col_offset=15), 'call', Load(), lineno=2974, col_offset=15), [Attribute(Name('self', Load(), lineno=2975, col_offset=17), '_w', Load(), lineno=2975, col_offset=17), Str('image', lineno=2975, col_offset=26), Str('create', lineno=2975, col_offset=35), Name('index', Load(), lineno=2975, col_offset=45)], [], Call(Attribute(Name('self', Load(), lineno=2976, col_offset=18), '_options', Load(), lineno=2976, col_offset=18), [Name('cnf', Load(), lineno=2976, col_offset=32), Name('kw', Load(), lineno=2976, col_offset=37)], [], None, None, lineno=2976, col_offset=18), None, lineno=2974, col_offset=15), lineno=2974, col_offset=8)], [], lineno=2972, col_offset=4), FunctionDef('image_names', arguments([Name('self', Param(), lineno=2977, col_offset=20)], None, None, []), [Expr(Str('Return all names of embedded images in this widget.', lineno=2978, col_offset=8), lineno=2978, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2979, col_offset=15), 'tk', Load(), lineno=2979, col_offset=15), 'call', Load(), lineno=2979, col_offset=15), [Attribute(Name('self', Load(), lineno=2979, col_offset=28), '_w', Load(), lineno=2979, col_offset=28), Str('image', lineno=2979, col_offset=37), Str('names', lineno=2979, col_offset=46)], [], None, None, lineno=2979, col_offset=15), lineno=2979, col_offset=8)], [], lineno=2977, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=2980, col_offset=14), Name('index', Param(), lineno=2980, col_offset=20)], None, None, []), [Expr(Str('Return the index in the form line.char for INDEX.', lineno=2981, col_offset=8), lineno=2981, col_offset=8), Return(Call(Name('str', Load(), lineno=2982, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2982, col_offset=19), 'tk', Load(), lineno=2982, col_offset=19), 'call', Load(), lineno=2982, col_offset=19), [Attribute(Name('self', Load(), lineno=2982, col_offset=32), '_w', Load(), lineno=2982, col_offset=32), Str('index', lineno=2982, col_offset=41), Name('index', Load(), lineno=2982, col_offset=50)], [], None, None, lineno=2982, col_offset=19)], [], None, None, lineno=2982, col_offset=15), lineno=2982, col_offset=8)], [], lineno=2980, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=2983, col_offset=15), Name('index', Param(), lineno=2983, col_offset=21), Name('chars', Param(), lineno=2983, col_offset=28)], 'args', None, []), [Expr(Str('Insert CHARS before the characters at INDEX. An additional\n        tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.', lineno=2985, col_offset=-1), lineno=2985, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2986, col_offset=8), 'tk', Load(), lineno=2986, col_offset=8), 'call', Load(), lineno=2986, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=2986, col_offset=22), '_w', Load(), lineno=2986, col_offset=22), Str('insert', lineno=2986, col_offset=31), Name('index', Load(), lineno=2986, col_offset=41), Name('chars', Load(), lineno=2986, col_offset=48)], Load(), lineno=2986, col_offset=22), Add(), Name('args', Load(), lineno=2986, col_offset=57), lineno=2986, col_offset=21)], [], None, None, lineno=2986, col_offset=8), lineno=2986, col_offset=8)], [], lineno=2983, col_offset=4), FunctionDef('mark_gravity', arguments([Name('self', Param(), lineno=2987, col_offset=21), Name('markName', Param(), lineno=2987, col_offset=27), Name('direction', Param(), lineno=2987, col_offset=37)], None, None, [Name('None', Load(), lineno=2987, col_offset=47)]), [Expr(Str('Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).\n        Return the current value if None is given for DIRECTION.', lineno=2989, col_offset=-1), lineno=2989, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2990, col_offset=15), 'tk', Load(), lineno=2990, col_offset=15), 'call', Load(), lineno=2990, col_offset=15), [Tuple([Attribute(Name('self', Load(), lineno=2991, col_offset=13), '_w', Load(), lineno=2991, col_offset=13), Str('mark', lineno=2991, col_offset=22), Str('gravity', lineno=2991, col_offset=30), Name('markName', Load(), lineno=2991, col_offset=41), Name('direction', Load(), lineno=2991, col_offset=51)], Load(), lineno=2991, col_offset=13)], [], None, None, lineno=2990, col_offset=15), lineno=2990, col_offset=8)], [], lineno=2987, col_offset=4), FunctionDef('mark_names', arguments([Name('self', Param(), lineno=2992, col_offset=19)], None, None, []), [Expr(Str('Return all mark names.', lineno=2993, col_offset=8), lineno=2993, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=2994, col_offset=15), 'tk', Load(), lineno=2994, col_offset=15), 'splitlist', Load(), lineno=2994, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=2994, col_offset=33), 'tk', Load(), lineno=2994, col_offset=33), 'call', Load(), lineno=2994, col_offset=33), [Attribute(Name('self', Load(), lineno=2995, col_offset=12), '_w', Load(), lineno=2995, col_offset=12), Str('mark', lineno=2995, col_offset=21), Str('names', lineno=2995, col_offset=29)], [], None, None, lineno=2994, col_offset=33)], [], None, None, lineno=2994, col_offset=15), lineno=2994, col_offset=8)], [], lineno=2992, col_offset=4), FunctionDef('mark_set', arguments([Name('self', Param(), lineno=2996, col_offset=17), Name('markName', Param(), lineno=2996, col_offset=23), Name('index', Param(), lineno=2996, col_offset=33)], None, None, []), [Expr(Str('Set mark MARKNAME before the character at INDEX.', lineno=2997, col_offset=8), lineno=2997, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=2998, col_offset=8), 'tk', Load(), lineno=2998, col_offset=8), 'call', Load(), lineno=2998, col_offset=8), [Attribute(Name('self', Load(), lineno=2998, col_offset=21), '_w', Load(), lineno=2998, col_offset=21), Str('mark', lineno=2998, col_offset=30), Str('set', lineno=2998, col_offset=38), Name('markName', Load(), lineno=2998, col_offset=45), Name('index', Load(), lineno=2998, col_offset=55)], [], None, None, lineno=2998, col_offset=8), lineno=2998, col_offset=8)], [], lineno=2996, col_offset=4), FunctionDef('mark_unset', arguments([Name('self', Param(), lineno=2999, col_offset=19)], 'markNames', None, []), [Expr(Str('Delete all marks in MARKNAMES.', lineno=3000, col_offset=8), lineno=3000, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3001, col_offset=8), 'tk', Load(), lineno=3001, col_offset=8), 'call', Load(), lineno=3001, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3001, col_offset=22), '_w', Load(), lineno=3001, col_offset=22), Str('mark', lineno=3001, col_offset=31), Str('unset', lineno=3001, col_offset=39)], Load(), lineno=3001, col_offset=22), Add(), Name('markNames', Load(), lineno=3001, col_offset=50), lineno=3001, col_offset=21)], [], None, None, lineno=3001, col_offset=8), lineno=3001, col_offset=8)], [], lineno=2999, col_offset=4), FunctionDef('mark_next', arguments([Name('self', Param(), lineno=3002, col_offset=18), Name('index', Param(), lineno=3002, col_offset=24)], None, None, []), [Expr(Str('Return the name of the next mark after INDEX.', lineno=3003, col_offset=8), lineno=3003, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=3004, col_offset=15), 'tk', Load(), lineno=3004, col_offset=15), 'call', Load(), lineno=3004, col_offset=15), [Attribute(Name('self', Load(), lineno=3004, col_offset=28), '_w', Load(), lineno=3004, col_offset=28), Str('mark', lineno=3004, col_offset=37), Str('next', lineno=3004, col_offset=45), Name('index', Load(), lineno=3004, col_offset=53)], [], None, None, lineno=3004, col_offset=15), Name('None', Load(), lineno=3004, col_offset=63)], lineno=3004, col_offset=15), lineno=3004, col_offset=8)], [], lineno=3002, col_offset=4), FunctionDef('mark_previous', arguments([Name('self', Param(), lineno=3005, col_offset=22), Name('index', Param(), lineno=3005, col_offset=28)], None, None, []), [Expr(Str('Return the name of the previous mark before INDEX.', lineno=3006, col_offset=8), lineno=3006, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=3007, col_offset=15), 'tk', Load(), lineno=3007, col_offset=15), 'call', Load(), lineno=3007, col_offset=15), [Attribute(Name('self', Load(), lineno=3007, col_offset=28), '_w', Load(), lineno=3007, col_offset=28), Str('mark', lineno=3007, col_offset=37), Str('previous', lineno=3007, col_offset=45), Name('index', Load(), lineno=3007, col_offset=57)], [], None, None, lineno=3007, col_offset=15), Name('None', Load(), lineno=3007, col_offset=67)], lineno=3007, col_offset=15), lineno=3007, col_offset=8)], [], lineno=3005, col_offset=4), FunctionDef('scan_mark', arguments([Name('self', Param(), lineno=3008, col_offset=18), Name('x', Param(), lineno=3008, col_offset=24), Name('y', Param(), lineno=3008, col_offset=27)], None, None, []), [Expr(Str('Remember the current X, Y coordinates.', lineno=3009, col_offset=8), lineno=3009, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3010, col_offset=8), 'tk', Load(), lineno=3010, col_offset=8), 'call', Load(), lineno=3010, col_offset=8), [Attribute(Name('self', Load(), lineno=3010, col_offset=21), '_w', Load(), lineno=3010, col_offset=21), Str('scan', lineno=3010, col_offset=30), Str('mark', lineno=3010, col_offset=38), Name('x', Load(), lineno=3010, col_offset=46), Name('y', Load(), lineno=3010, col_offset=49)], [], None, None, lineno=3010, col_offset=8), lineno=3010, col_offset=8)], [], lineno=3008, col_offset=4), FunctionDef('scan_dragto', arguments([Name('self', Param(), lineno=3011, col_offset=20), Name('x', Param(), lineno=3011, col_offset=26), Name('y', Param(), lineno=3011, col_offset=29)], None, None, []), [Expr(Str('Adjust the view of the text to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.', lineno=3014, col_offset=-1), lineno=3014, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3015, col_offset=8), 'tk', Load(), lineno=3015, col_offset=8), 'call', Load(), lineno=3015, col_offset=8), [Attribute(Name('self', Load(), lineno=3015, col_offset=21), '_w', Load(), lineno=3015, col_offset=21), Str('scan', lineno=3015, col_offset=30), Str('dragto', lineno=3015, col_offset=38), Name('x', Load(), lineno=3015, col_offset=48), Name('y', Load(), lineno=3015, col_offset=51)], [], None, None, lineno=3015, col_offset=8), lineno=3015, col_offset=8)], [], lineno=3011, col_offset=4), FunctionDef('search', arguments([Name('self', Param(), lineno=3016, col_offset=15), Name('pattern', Param(), lineno=3016, col_offset=21), Name('index', Param(), lineno=3016, col_offset=30), Name('stopindex', Param(), lineno=3016, col_offset=37), Name('forwards', Param(), lineno=3017, col_offset=11), Name('backwards', Param(), lineno=3017, col_offset=26), Name('exact', Param(), lineno=3017, col_offset=42), Name('regexp', Param(), lineno=3018, col_offset=11), Name('nocase', Param(), lineno=3018, col_offset=24), Name('count', Param(), lineno=3018, col_offset=37), Name('elide', Param(), lineno=3018, col_offset=49)], None, None, [Name('None', Load(), lineno=3016, col_offset=47), Name('None', Load(), lineno=3017, col_offset=20), Name('None', Load(), lineno=3017, col_offset=36), Name('None', Load(), lineno=3017, col_offset=48), Name('None', Load(), lineno=3018, col_offset=18), Name('None', Load(), lineno=3018, col_offset=31), Name('None', Load(), lineno=3018, col_offset=43), Name('None', Load(), lineno=3018, col_offset=55)]), [Expr(Str('Search PATTERN beginning from INDEX until STOPINDEX.\n        Return the index of the first character of a match or an\n        empty string.', lineno=3021, col_offset=-1), lineno=3021, col_offset=-1), Assign([Name('args', Store(), lineno=3022, col_offset=8)], List([Attribute(Name('self', Load(), lineno=3022, col_offset=16), '_w', Load(), lineno=3022, col_offset=16), Str('search', lineno=3022, col_offset=25)], Load(), lineno=3022, col_offset=15), lineno=3022, col_offset=8), If(Name('forwards', Load(), lineno=3023, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3023, col_offset=21), 'append', Load(), lineno=3023, col_offset=21), [Str('-forwards', lineno=3023, col_offset=33)], [], None, None, lineno=3023, col_offset=21), lineno=3023, col_offset=21)], [], lineno=3023, col_offset=8), If(Name('backwards', Load(), lineno=3024, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3024, col_offset=22), 'append', Load(), lineno=3024, col_offset=22), [Str('-backwards', lineno=3024, col_offset=34)], [], None, None, lineno=3024, col_offset=22), lineno=3024, col_offset=22)], [], lineno=3024, col_offset=8), If(Name('exact', Load(), lineno=3025, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3025, col_offset=18), 'append', Load(), lineno=3025, col_offset=18), [Str('-exact', lineno=3025, col_offset=30)], [], None, None, lineno=3025, col_offset=18), lineno=3025, col_offset=18)], [], lineno=3025, col_offset=8), If(Name('regexp', Load(), lineno=3026, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3026, col_offset=19), 'append', Load(), lineno=3026, col_offset=19), [Str('-regexp', lineno=3026, col_offset=31)], [], None, None, lineno=3026, col_offset=19), lineno=3026, col_offset=19)], [], lineno=3026, col_offset=8), If(Name('nocase', Load(), lineno=3027, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3027, col_offset=19), 'append', Load(), lineno=3027, col_offset=19), [Str('-nocase', lineno=3027, col_offset=31)], [], None, None, lineno=3027, col_offset=19), lineno=3027, col_offset=19)], [], lineno=3027, col_offset=8), If(Name('elide', Load(), lineno=3028, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3028, col_offset=18), 'append', Load(), lineno=3028, col_offset=18), [Str('-elide', lineno=3028, col_offset=30)], [], None, None, lineno=3028, col_offset=18), lineno=3028, col_offset=18)], [], lineno=3028, col_offset=8), If(Name('count', Load(), lineno=3029, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3029, col_offset=18), 'append', Load(), lineno=3029, col_offset=18), [Str('-count', lineno=3029, col_offset=30)], [], None, None, lineno=3029, col_offset=18), lineno=3029, col_offset=18), Expr(Call(Attribute(Name('args', Load(), lineno=3029, col_offset=41), 'append', Load(), lineno=3029, col_offset=41), [Name('count', Load(), lineno=3029, col_offset=53)], [], None, None, lineno=3029, col_offset=41), lineno=3029, col_offset=41)], [], lineno=3029, col_offset=8), If(BoolOp(And(), [Name('pattern', Load(), lineno=3030, col_offset=11), Compare(Subscript(Name('pattern', Load(), lineno=3030, col_offset=23), Index(Num(0, lineno=3030, col_offset=31)), Load(), lineno=3030, col_offset=23), [Eq()], [Str('-', lineno=3030, col_offset=37)], lineno=3030, col_offset=23)], lineno=3030, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3030, col_offset=42), 'append', Load(), lineno=3030, col_offset=42), [Str('--', lineno=3030, col_offset=54)], [], None, None, lineno=3030, col_offset=42), lineno=3030, col_offset=42)], [], lineno=3030, col_offset=8), Expr(Call(Attribute(Name('args', Load(), lineno=3031, col_offset=8), 'append', Load(), lineno=3031, col_offset=8), [Name('pattern', Load(), lineno=3031, col_offset=20)], [], None, None, lineno=3031, col_offset=8), lineno=3031, col_offset=8), Expr(Call(Attribute(Name('args', Load(), lineno=3032, col_offset=8), 'append', Load(), lineno=3032, col_offset=8), [Name('index', Load(), lineno=3032, col_offset=20)], [], None, None, lineno=3032, col_offset=8), lineno=3032, col_offset=8), If(Name('stopindex', Load(), lineno=3033, col_offset=11), [Expr(Call(Attribute(Name('args', Load(), lineno=3033, col_offset=22), 'append', Load(), lineno=3033, col_offset=22), [Name('stopindex', Load(), lineno=3033, col_offset=34)], [], None, None, lineno=3033, col_offset=22), lineno=3033, col_offset=22)], [], lineno=3033, col_offset=8), Return(Call(Name('str', Load(), lineno=3034, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3034, col_offset=19), 'tk', Load(), lineno=3034, col_offset=19), 'call', Load(), lineno=3034, col_offset=19), [Call(Name('tuple', Load(), lineno=3034, col_offset=32), [Name('args', Load(), lineno=3034, col_offset=38)], [], None, None, lineno=3034, col_offset=32)], [], None, None, lineno=3034, col_offset=19)], [], None, None, lineno=3034, col_offset=15), lineno=3034, col_offset=8)], [], lineno=3016, col_offset=4), FunctionDef('see', arguments([Name('self', Param(), lineno=3035, col_offset=12), Name('index', Param(), lineno=3035, col_offset=18)], None, None, []), [Expr(Str('Scroll such that the character at INDEX is visible.', lineno=3036, col_offset=8), lineno=3036, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3037, col_offset=8), 'tk', Load(), lineno=3037, col_offset=8), 'call', Load(), lineno=3037, col_offset=8), [Attribute(Name('self', Load(), lineno=3037, col_offset=21), '_w', Load(), lineno=3037, col_offset=21), Str('see', lineno=3037, col_offset=30), Name('index', Load(), lineno=3037, col_offset=37)], [], None, None, lineno=3037, col_offset=8), lineno=3037, col_offset=8)], [], lineno=3035, col_offset=4), FunctionDef('tag_add', arguments([Name('self', Param(), lineno=3038, col_offset=16), Name('tagName', Param(), lineno=3038, col_offset=22), Name('index1', Param(), lineno=3038, col_offset=31)], 'args', None, []), [Expr(Str('Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.\n        Additional pairs of indices may follow in ARGS.', lineno=3040, col_offset=-1), lineno=3040, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3041, col_offset=8), 'tk', Load(), lineno=3041, col_offset=8), 'call', Load(), lineno=3041, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3042, col_offset=13), '_w', Load(), lineno=3042, col_offset=13), Str('tag', lineno=3042, col_offset=22), Str('add', lineno=3042, col_offset=29), Name('tagName', Load(), lineno=3042, col_offset=36), Name('index1', Load(), lineno=3042, col_offset=45)], Load(), lineno=3042, col_offset=13), Add(), Name('args', Load(), lineno=3042, col_offset=55), lineno=3042, col_offset=12)], [], None, None, lineno=3041, col_offset=8), lineno=3041, col_offset=8)], [], lineno=3038, col_offset=4), FunctionDef('tag_unbind', arguments([Name('self', Param(), lineno=3043, col_offset=19), Name('tagName', Param(), lineno=3043, col_offset=25), Name('sequence', Param(), lineno=3043, col_offset=34), Name('funcid', Param(), lineno=3043, col_offset=44)], None, None, [Name('None', Load(), lineno=3043, col_offset=51)]), [Expr(Str('Unbind for all characters with TAGNAME for event SEQUENCE  the\n        function identified with FUNCID.', lineno=3045, col_offset=-1), lineno=3045, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3046, col_offset=8), 'tk', Load(), lineno=3046, col_offset=8), 'call', Load(), lineno=3046, col_offset=8), [Attribute(Name('self', Load(), lineno=3046, col_offset=21), '_w', Load(), lineno=3046, col_offset=21), Str('tag', lineno=3046, col_offset=30), Str('bind', lineno=3046, col_offset=37), Name('tagName', Load(), lineno=3046, col_offset=45), Name('sequence', Load(), lineno=3046, col_offset=54), Str('', lineno=3046, col_offset=64)], [], None, None, lineno=3046, col_offset=8), lineno=3046, col_offset=8), If(Name('funcid', Load(), lineno=3047, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=3048, col_offset=12), 'deletecommand', Load(), lineno=3048, col_offset=12), [Name('funcid', Load(), lineno=3048, col_offset=31)], [], None, None, lineno=3048, col_offset=12), lineno=3048, col_offset=12)], [], lineno=3047, col_offset=8)], [], lineno=3043, col_offset=4), FunctionDef('tag_bind', arguments([Name('self', Param(), lineno=3049, col_offset=17), Name('tagName', Param(), lineno=3049, col_offset=23), Name('sequence', Param(), lineno=3049, col_offset=32), Name('func', Param(), lineno=3049, col_offset=42), Name('add', Param(), lineno=3049, col_offset=48)], None, None, [Name('None', Load(), lineno=3049, col_offset=52)]), [Expr(Str('Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.', lineno=3054, col_offset=-1), lineno=3054, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3055, col_offset=15), '_bind', Load(), lineno=3055, col_offset=15), [Tuple([Attribute(Name('self', Load(), lineno=3055, col_offset=27), '_w', Load(), lineno=3055, col_offset=27), Str('tag', lineno=3055, col_offset=36), Str('bind', lineno=3055, col_offset=43), Name('tagName', Load(), lineno=3055, col_offset=51)], Load(), lineno=3055, col_offset=27), Name('sequence', Load(), lineno=3056, col_offset=18), Name('func', Load(), lineno=3056, col_offset=28), Name('add', Load(), lineno=3056, col_offset=34)], [], None, None, lineno=3055, col_offset=15), lineno=3055, col_offset=8)], [], lineno=3049, col_offset=4), FunctionDef('tag_cget', arguments([Name('self', Param(), lineno=3057, col_offset=17), Name('tagName', Param(), lineno=3057, col_offset=23), Name('option', Param(), lineno=3057, col_offset=32)], None, None, []), [Expr(Str('Return the value of OPTION for tag TAGNAME.', lineno=3058, col_offset=8), lineno=3058, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=3059, col_offset=11), Slice(None, Num(1, lineno=3059, col_offset=19), None), Load(), lineno=3059, col_offset=11), [NotEq()], [Str('-', lineno=3059, col_offset=25)], lineno=3059, col_offset=11), [Assign([Name('option', Store(), lineno=3060, col_offset=12)], BinOp(Str('-', lineno=3060, col_offset=21), Add(), Name('option', Load(), lineno=3060, col_offset=27), lineno=3060, col_offset=21), lineno=3060, col_offset=12)], [], lineno=3059, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=3061, col_offset=11), Slice(Num(-1, lineno=3061, col_offset=19), None, None), Load(), lineno=3061, col_offset=11), [Eq()], [Str('_', lineno=3061, col_offset=26)], lineno=3061, col_offset=11), [Assign([Name('option', Store(), lineno=3062, col_offset=12)], Subscript(Name('option', Load(), lineno=3062, col_offset=21), Slice(None, Num(-1, lineno=3062, col_offset=30), None), Load(), lineno=3062, col_offset=21), lineno=3062, col_offset=12)], [], lineno=3061, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3063, col_offset=15), 'tk', Load(), lineno=3063, col_offset=15), 'call', Load(), lineno=3063, col_offset=15), [Attribute(Name('self', Load(), lineno=3063, col_offset=28), '_w', Load(), lineno=3063, col_offset=28), Str('tag', lineno=3063, col_offset=37), Str('cget', lineno=3063, col_offset=44), Name('tagName', Load(), lineno=3063, col_offset=52), Name('option', Load(), lineno=3063, col_offset=61)], [], None, None, lineno=3063, col_offset=15), lineno=3063, col_offset=8)], [], lineno=3057, col_offset=4), FunctionDef('tag_configure', arguments([Name('self', Param(), lineno=3064, col_offset=22), Name('tagName', Param(), lineno=3064, col_offset=28), Name('cnf', Param(), lineno=3064, col_offset=37)], None, 'kw', [Name('None', Load(), lineno=3064, col_offset=41)]), [Expr(Str('Configure a tag TAGNAME.', lineno=3065, col_offset=8), lineno=3065, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3066, col_offset=15), '_configure', Load(), lineno=3066, col_offset=15), [Tuple([Str('tag', lineno=3066, col_offset=32), Str('configure', lineno=3066, col_offset=39), Name('tagName', Load(), lineno=3066, col_offset=52)], Load(), lineno=3066, col_offset=32), Name('cnf', Load(), lineno=3066, col_offset=62), Name('kw', Load(), lineno=3066, col_offset=67)], [], None, None, lineno=3066, col_offset=15), lineno=3066, col_offset=8)], [], lineno=3064, col_offset=4), Assign([Name('tag_config', Store(), lineno=3067, col_offset=4)], Name('tag_configure', Load(), lineno=3067, col_offset=17), lineno=3067, col_offset=4), FunctionDef('tag_delete', arguments([Name('self', Param(), lineno=3068, col_offset=19)], 'tagNames', None, []), [Expr(Str('Delete all tags in TAGNAMES.', lineno=3069, col_offset=8), lineno=3069, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3070, col_offset=8), 'tk', Load(), lineno=3070, col_offset=8), 'call', Load(), lineno=3070, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3070, col_offset=22), '_w', Load(), lineno=3070, col_offset=22), Str('tag', lineno=3070, col_offset=31), Str('delete', lineno=3070, col_offset=38)], Load(), lineno=3070, col_offset=22), Add(), Name('tagNames', Load(), lineno=3070, col_offset=50), lineno=3070, col_offset=21)], [], None, None, lineno=3070, col_offset=8), lineno=3070, col_offset=8)], [], lineno=3068, col_offset=4), FunctionDef('tag_lower', arguments([Name('self', Param(), lineno=3071, col_offset=18), Name('tagName', Param(), lineno=3071, col_offset=24), Name('belowThis', Param(), lineno=3071, col_offset=33)], None, None, [Name('None', Load(), lineno=3071, col_offset=43)]), [Expr(Str('Change the priority of tag TAGNAME such that it is lower\n        than the priority of BELOWTHIS.', lineno=3073, col_offset=-1), lineno=3073, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3074, col_offset=8), 'tk', Load(), lineno=3074, col_offset=8), 'call', Load(), lineno=3074, col_offset=8), [Attribute(Name('self', Load(), lineno=3074, col_offset=21), '_w', Load(), lineno=3074, col_offset=21), Str('tag', lineno=3074, col_offset=30), Str('lower', lineno=3074, col_offset=37), Name('tagName', Load(), lineno=3074, col_offset=46), Name('belowThis', Load(), lineno=3074, col_offset=55)], [], None, None, lineno=3074, col_offset=8), lineno=3074, col_offset=8)], [], lineno=3071, col_offset=4), FunctionDef('tag_names', arguments([Name('self', Param(), lineno=3075, col_offset=18), Name('index', Param(), lineno=3075, col_offset=24)], None, None, [Name('None', Load(), lineno=3075, col_offset=30)]), [Expr(Str('Return a list of all tag names.', lineno=3076, col_offset=8), lineno=3076, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3077, col_offset=15), 'tk', Load(), lineno=3077, col_offset=15), 'splitlist', Load(), lineno=3077, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3078, col_offset=12), 'tk', Load(), lineno=3078, col_offset=12), 'call', Load(), lineno=3078, col_offset=12), [Attribute(Name('self', Load(), lineno=3078, col_offset=25), '_w', Load(), lineno=3078, col_offset=25), Str('tag', lineno=3078, col_offset=34), Str('names', lineno=3078, col_offset=41), Name('index', Load(), lineno=3078, col_offset=50)], [], None, None, lineno=3078, col_offset=12)], [], None, None, lineno=3077, col_offset=15), lineno=3077, col_offset=8)], [], lineno=3075, col_offset=4), FunctionDef('tag_nextrange', arguments([Name('self', Param(), lineno=3079, col_offset=22), Name('tagName', Param(), lineno=3079, col_offset=28), Name('index1', Param(), lineno=3079, col_offset=37), Name('index2', Param(), lineno=3079, col_offset=45)], None, None, [Name('None', Load(), lineno=3079, col_offset=52)]), [Expr(Str('Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched forward from INDEX1.', lineno=3082, col_offset=-1), lineno=3082, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3083, col_offset=15), 'tk', Load(), lineno=3083, col_offset=15), 'splitlist', Load(), lineno=3083, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3083, col_offset=33), 'tk', Load(), lineno=3083, col_offset=33), 'call', Load(), lineno=3083, col_offset=33), [Attribute(Name('self', Load(), lineno=3084, col_offset=12), '_w', Load(), lineno=3084, col_offset=12), Str('tag', lineno=3084, col_offset=21), Str('nextrange', lineno=3084, col_offset=28), Name('tagName', Load(), lineno=3084, col_offset=41), Name('index1', Load(), lineno=3084, col_offset=50), Name('index2', Load(), lineno=3084, col_offset=58)], [], None, None, lineno=3083, col_offset=33)], [], None, None, lineno=3083, col_offset=15), lineno=3083, col_offset=8)], [], lineno=3079, col_offset=4), FunctionDef('tag_prevrange', arguments([Name('self', Param(), lineno=3085, col_offset=22), Name('tagName', Param(), lineno=3085, col_offset=28), Name('index1', Param(), lineno=3085, col_offset=37), Name('index2', Param(), lineno=3085, col_offset=45)], None, None, [Name('None', Load(), lineno=3085, col_offset=52)]), [Expr(Str('Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched backwards from INDEX1.', lineno=3088, col_offset=-1), lineno=3088, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3089, col_offset=15), 'tk', Load(), lineno=3089, col_offset=15), 'splitlist', Load(), lineno=3089, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3089, col_offset=33), 'tk', Load(), lineno=3089, col_offset=33), 'call', Load(), lineno=3089, col_offset=33), [Attribute(Name('self', Load(), lineno=3090, col_offset=12), '_w', Load(), lineno=3090, col_offset=12), Str('tag', lineno=3090, col_offset=21), Str('prevrange', lineno=3090, col_offset=28), Name('tagName', Load(), lineno=3090, col_offset=41), Name('index1', Load(), lineno=3090, col_offset=50), Name('index2', Load(), lineno=3090, col_offset=58)], [], None, None, lineno=3089, col_offset=33)], [], None, None, lineno=3089, col_offset=15), lineno=3089, col_offset=8)], [], lineno=3085, col_offset=4), FunctionDef('tag_raise', arguments([Name('self', Param(), lineno=3091, col_offset=18), Name('tagName', Param(), lineno=3091, col_offset=24), Name('aboveThis', Param(), lineno=3091, col_offset=33)], None, None, [Name('None', Load(), lineno=3091, col_offset=43)]), [Expr(Str('Change the priority of tag TAGNAME such that it is higher\n        than the priority of ABOVETHIS.', lineno=3093, col_offset=-1), lineno=3093, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3094, col_offset=8), 'tk', Load(), lineno=3094, col_offset=8), 'call', Load(), lineno=3094, col_offset=8), [Attribute(Name('self', Load(), lineno=3095, col_offset=12), '_w', Load(), lineno=3095, col_offset=12), Str('tag', lineno=3095, col_offset=21), Str('raise', lineno=3095, col_offset=28), Name('tagName', Load(), lineno=3095, col_offset=37), Name('aboveThis', Load(), lineno=3095, col_offset=46)], [], None, None, lineno=3094, col_offset=8), lineno=3094, col_offset=8)], [], lineno=3091, col_offset=4), FunctionDef('tag_ranges', arguments([Name('self', Param(), lineno=3096, col_offset=19), Name('tagName', Param(), lineno=3096, col_offset=25)], None, None, []), [Expr(Str('Return a list of ranges of text which have tag TAGNAME.', lineno=3097, col_offset=8), lineno=3097, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3098, col_offset=15), 'tk', Load(), lineno=3098, col_offset=15), 'splitlist', Load(), lineno=3098, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3098, col_offset=33), 'tk', Load(), lineno=3098, col_offset=33), 'call', Load(), lineno=3098, col_offset=33), [Attribute(Name('self', Load(), lineno=3099, col_offset=12), '_w', Load(), lineno=3099, col_offset=12), Str('tag', lineno=3099, col_offset=21), Str('ranges', lineno=3099, col_offset=28), Name('tagName', Load(), lineno=3099, col_offset=38)], [], None, None, lineno=3098, col_offset=33)], [], None, None, lineno=3098, col_offset=15), lineno=3098, col_offset=8)], [], lineno=3096, col_offset=4), FunctionDef('tag_remove', arguments([Name('self', Param(), lineno=3100, col_offset=19), Name('tagName', Param(), lineno=3100, col_offset=25), Name('index1', Param(), lineno=3100, col_offset=34), Name('index2', Param(), lineno=3100, col_offset=42)], None, None, [Name('None', Load(), lineno=3100, col_offset=49)]), [Expr(Str('Remove tag TAGNAME from all characters between INDEX1 and INDEX2.', lineno=3101, col_offset=8), lineno=3101, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3102, col_offset=8), 'tk', Load(), lineno=3102, col_offset=8), 'call', Load(), lineno=3102, col_offset=8), [Attribute(Name('self', Load(), lineno=3103, col_offset=12), '_w', Load(), lineno=3103, col_offset=12), Str('tag', lineno=3103, col_offset=21), Str('remove', lineno=3103, col_offset=28), Name('tagName', Load(), lineno=3103, col_offset=38), Name('index1', Load(), lineno=3103, col_offset=47), Name('index2', Load(), lineno=3103, col_offset=55)], [], None, None, lineno=3102, col_offset=8), lineno=3102, col_offset=8)], [], lineno=3100, col_offset=4), FunctionDef('window_cget', arguments([Name('self', Param(), lineno=3104, col_offset=20), Name('index', Param(), lineno=3104, col_offset=26), Name('option', Param(), lineno=3104, col_offset=33)], None, None, []), [Expr(Str('Return the value of OPTION of an embedded window at INDEX.', lineno=3105, col_offset=8), lineno=3105, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=3106, col_offset=11), Slice(None, Num(1, lineno=3106, col_offset=19), None), Load(), lineno=3106, col_offset=11), [NotEq()], [Str('-', lineno=3106, col_offset=25)], lineno=3106, col_offset=11), [Assign([Name('option', Store(), lineno=3107, col_offset=12)], BinOp(Str('-', lineno=3107, col_offset=21), Add(), Name('option', Load(), lineno=3107, col_offset=27), lineno=3107, col_offset=21), lineno=3107, col_offset=12)], [], lineno=3106, col_offset=8), If(Compare(Subscript(Name('option', Load(), lineno=3108, col_offset=11), Slice(Num(-1, lineno=3108, col_offset=19), None, None), Load(), lineno=3108, col_offset=11), [Eq()], [Str('_', lineno=3108, col_offset=26)], lineno=3108, col_offset=11), [Assign([Name('option', Store(), lineno=3109, col_offset=12)], Subscript(Name('option', Load(), lineno=3109, col_offset=21), Slice(None, Num(-1, lineno=3109, col_offset=30), None), Load(), lineno=3109, col_offset=21), lineno=3109, col_offset=12)], [], lineno=3108, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3110, col_offset=15), 'tk', Load(), lineno=3110, col_offset=15), 'call', Load(), lineno=3110, col_offset=15), [Attribute(Name('self', Load(), lineno=3110, col_offset=28), '_w', Load(), lineno=3110, col_offset=28), Str('window', lineno=3110, col_offset=37), Str('cget', lineno=3110, col_offset=47), Name('index', Load(), lineno=3110, col_offset=55), Name('option', Load(), lineno=3110, col_offset=62)], [], None, None, lineno=3110, col_offset=15), lineno=3110, col_offset=8)], [], lineno=3104, col_offset=4), FunctionDef('window_configure', arguments([Name('self', Param(), lineno=3111, col_offset=25), Name('index', Param(), lineno=3111, col_offset=31), Name('cnf', Param(), lineno=3111, col_offset=38)], None, 'kw', [Name('None', Load(), lineno=3111, col_offset=42)]), [Expr(Str('Configure an embedded window at INDEX.', lineno=3112, col_offset=8), lineno=3112, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=3113, col_offset=15), '_configure', Load(), lineno=3113, col_offset=15), [Tuple([Str('window', lineno=3113, col_offset=32), Str('configure', lineno=3113, col_offset=42), Name('index', Load(), lineno=3113, col_offset=55)], Load(), lineno=3113, col_offset=32), Name('cnf', Load(), lineno=3113, col_offset=63), Name('kw', Load(), lineno=3113, col_offset=68)], [], None, None, lineno=3113, col_offset=15), lineno=3113, col_offset=8)], [], lineno=3111, col_offset=4), Assign([Name('window_config', Store(), lineno=3114, col_offset=4)], Name('window_configure', Load(), lineno=3114, col_offset=20), lineno=3114, col_offset=4), FunctionDef('window_create', arguments([Name('self', Param(), lineno=3115, col_offset=22), Name('index', Param(), lineno=3115, col_offset=28), Name('cnf', Param(), lineno=3115, col_offset=35)], None, 'kw', [Dict([], [], lineno=3115, col_offset=39)]), [Expr(Str('Create a window at INDEX.', lineno=3116, col_offset=8), lineno=3116, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3117, col_offset=8), 'tk', Load(), lineno=3117, col_offset=8), 'call', Load(), lineno=3117, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3118, col_offset=15), '_w', Load(), lineno=3118, col_offset=15), Str('window', lineno=3118, col_offset=24), Str('create', lineno=3118, col_offset=34), Name('index', Load(), lineno=3118, col_offset=44)], Load(), lineno=3118, col_offset=15), Add(), Call(Attribute(Name('self', Load(), lineno=3119, col_offset=16), '_options', Load(), lineno=3119, col_offset=16), [Name('cnf', Load(), lineno=3119, col_offset=30), Name('kw', Load(), lineno=3119, col_offset=35)], [], None, None, lineno=3119, col_offset=16), lineno=3118, col_offset=14)], [], None, None, lineno=3117, col_offset=8), lineno=3117, col_offset=8)], [], lineno=3115, col_offset=4), FunctionDef('window_names', arguments([Name('self', Param(), lineno=3120, col_offset=21)], None, None, []), [Expr(Str('Return all names of embedded windows in this widget.', lineno=3121, col_offset=8), lineno=3121, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3122, col_offset=15), 'tk', Load(), lineno=3122, col_offset=15), 'splitlist', Load(), lineno=3122, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3123, col_offset=12), 'tk', Load(), lineno=3123, col_offset=12), 'call', Load(), lineno=3123, col_offset=12), [Attribute(Name('self', Load(), lineno=3123, col_offset=25), '_w', Load(), lineno=3123, col_offset=25), Str('window', lineno=3123, col_offset=34), Str('names', lineno=3123, col_offset=44)], [], None, None, lineno=3123, col_offset=12)], [], None, None, lineno=3122, col_offset=15), lineno=3122, col_offset=8)], [], lineno=3120, col_offset=4), FunctionDef('yview_pickplace', arguments([Name('self', Param(), lineno=3124, col_offset=24)], 'what', None, []), [Expr(Str('Obsolete function, use see.', lineno=3125, col_offset=8), lineno=3125, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3126, col_offset=8), 'tk', Load(), lineno=3126, col_offset=8), 'call', Load(), lineno=3126, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3126, col_offset=22), '_w', Load(), lineno=3126, col_offset=22), Str('yview', lineno=3126, col_offset=31), Str('-pickplace', lineno=3126, col_offset=40)], Load(), lineno=3126, col_offset=22), Add(), Name('what', Load(), lineno=3126, col_offset=56), lineno=3126, col_offset=21)], [], None, None, lineno=3126, col_offset=8), lineno=3126, col_offset=8)], [], lineno=3124, col_offset=4)], [], lineno=2802, col_offset=0), ClassDef('_setit', [], [Expr(Str('Internal class. It wraps the command in the widget OptionMenu.', lineno=3130, col_offset=4), lineno=3130, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3131, col_offset=17), Name('var', Param(), lineno=3131, col_offset=23), Name('value', Param(), lineno=3131, col_offset=28), Name('callback', Param(), lineno=3131, col_offset=35)], None, None, [Name('None', Load(), lineno=3131, col_offset=44)]), [Assign([Attribute(Name('self', Load(), lineno=3132, col_offset=8), '__value', Store(), lineno=3132, col_offset=8)], Name('value', Load(), lineno=3132, col_offset=23), lineno=3132, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3133, col_offset=8), '__var', Store(), lineno=3133, col_offset=8)], Name('var', Load(), lineno=3133, col_offset=21), lineno=3133, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3134, col_offset=8), '__callback', Store(), lineno=3134, col_offset=8)], Name('callback', Load(), lineno=3134, col_offset=26), lineno=3134, col_offset=8)], [], lineno=3131, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=3135, col_offset=17)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3136, col_offset=8), '__var', Load(), lineno=3136, col_offset=8), 'set', Load(), lineno=3136, col_offset=8), [Attribute(Name('self', Load(), lineno=3136, col_offset=23), '__value', Load(), lineno=3136, col_offset=23)], [], None, None, lineno=3136, col_offset=8), lineno=3136, col_offset=8), If(Attribute(Name('self', Load(), lineno=3137, col_offset=11), '__callback', Load(), lineno=3137, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=3138, col_offset=12), '__callback', Load(), lineno=3138, col_offset=12), [Attribute(Name('self', Load(), lineno=3138, col_offset=28), '__value', Load(), lineno=3138, col_offset=28)], [], Name('args', Load(), lineno=3138, col_offset=43), None, lineno=3138, col_offset=12), lineno=3138, col_offset=12)], [], lineno=3137, col_offset=8)], [], lineno=3135, col_offset=4)], [], lineno=3129, col_offset=0), ClassDef('OptionMenu', [Name('Menubutton', Load(), lineno=3140, col_offset=17)], [Expr(Str('OptionMenu which allows the user to select a value from a menu.', lineno=3141, col_offset=4), lineno=3141, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3142, col_offset=17), Name('master', Param(), lineno=3142, col_offset=23), Name('variable', Param(), lineno=3142, col_offset=31), Name('value', Param(), lineno=3142, col_offset=41)], 'values', 'kwargs', []), [Expr(Str('Construct an optionmenu widget with the parent MASTER, with\n        the resource textvariable set to VARIABLE, the initially selected\n        value VALUE, the other menu values VALUES and an additional\n        keyword argument command.', lineno=3146, col_offset=-1), lineno=3146, col_offset=-1), Assign([Name('kw', Store(), lineno=3147, col_offset=8)], Dict([Str('borderwidth', lineno=3147, col_offset=14), Str('textvariable', lineno=3147, col_offset=32), Str('indicatoron', lineno=3148, col_offset=14), Str('relief', lineno=3148, col_offset=32), Str('anchor', lineno=3148, col_offset=50), Str('highlightthickness', lineno=3149, col_offset=14)], [Num(2, lineno=3147, col_offset=29), Name('variable', Load(), lineno=3147, col_offset=48), Num(1, lineno=3148, col_offset=29), Name('RAISED', Load(), lineno=3148, col_offset=42), Str('c', lineno=3148, col_offset=60), Num(2, lineno=3149, col_offset=36)], lineno=3147, col_offset=13), lineno=3147, col_offset=8), Expr(Call(Attribute(Name('Widget', Load(), lineno=3150, col_offset=8), '__init__', Load(), lineno=3150, col_offset=8), [Name('self', Load(), lineno=3150, col_offset=24), Name('master', Load(), lineno=3150, col_offset=30), Str('menubutton', lineno=3150, col_offset=38), Name('kw', Load(), lineno=3150, col_offset=52)], [], None, None, lineno=3150, col_offset=8), lineno=3150, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3151, col_offset=8), 'widgetName', Store(), lineno=3151, col_offset=8)], Str('tk_optionMenu', lineno=3151, col_offset=26), lineno=3151, col_offset=8), Assign([Name('menu', Store(), lineno=3152, col_offset=8), Attribute(Name('self', Load(), lineno=3152, col_offset=15), '__menu', Store(), lineno=3152, col_offset=15)], Call(Name('Menu', Load(), lineno=3152, col_offset=29), [Name('self', Load(), lineno=3152, col_offset=34)], [keyword('name', Str('menu', lineno=3152, col_offset=45)), keyword('tearoff', Num(0, lineno=3152, col_offset=61))], None, None, lineno=3152, col_offset=29), lineno=3152, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3153, col_offset=8), 'menuname', Store(), lineno=3153, col_offset=8)], Attribute(Name('menu', Load(), lineno=3153, col_offset=24), '_w', Load(), lineno=3153, col_offset=24), lineno=3153, col_offset=8), Assign([Name('callback', Store(), lineno=3155, col_offset=8)], Call(Attribute(Name('kwargs', Load(), lineno=3155, col_offset=19), 'get', Load(), lineno=3155, col_offset=19), [Str('command', lineno=3155, col_offset=30)], [], None, None, lineno=3155, col_offset=19), lineno=3155, col_offset=8), If(Compare(Str('command', lineno=3156, col_offset=11), [In()], [Name('kwargs', Load(), lineno=3156, col_offset=24)], lineno=3156, col_offset=11), [Delete([Subscript(Name('kwargs', Load(), lineno=3157, col_offset=16), Index(Str('command', lineno=3157, col_offset=23)), Del(), lineno=3157, col_offset=16)], lineno=3157, col_offset=12)], [], lineno=3156, col_offset=8), If(Name('kwargs', Load(), lineno=3158, col_offset=11), [Raise(Name('TclError', Load(), lineno=3159, col_offset=18), BinOp(Str('unknown option -', lineno=3159, col_offset=28), Add(), Subscript(Call(Attribute(Name('kwargs', Load(), lineno=3159, col_offset=47), 'keys', Load(), lineno=3159, col_offset=47), [], [], None, None, lineno=3159, col_offset=47), Index(Num(0, lineno=3159, col_offset=61)), Load(), lineno=3159, col_offset=47), lineno=3159, col_offset=28), None, lineno=3159, col_offset=12)], [], lineno=3158, col_offset=8), Expr(Call(Attribute(Name('menu', Load(), lineno=3160, col_offset=8), 'add_command', Load(), lineno=3160, col_offset=8), [], [keyword('label', Name('value', Load(), lineno=3160, col_offset=31)), keyword('command', Call(Name('_setit', Load(), lineno=3161, col_offset=25), [Name('variable', Load(), lineno=3161, col_offset=32), Name('value', Load(), lineno=3161, col_offset=42), Name('callback', Load(), lineno=3161, col_offset=49)], [], None, None, lineno=3161, col_offset=25))], None, None, lineno=3160, col_offset=8), lineno=3160, col_offset=8), For(Name('v', Store(), lineno=3162, col_offset=12), Name('values', Load(), lineno=3162, col_offset=17), [Expr(Call(Attribute(Name('menu', Load(), lineno=3163, col_offset=12), 'add_command', Load(), lineno=3163, col_offset=12), [], [keyword('label', Name('v', Load(), lineno=3163, col_offset=35)), keyword('command', Call(Name('_setit', Load(), lineno=3164, col_offset=29), [Name('variable', Load(), lineno=3164, col_offset=36), Name('v', Load(), lineno=3164, col_offset=46), Name('callback', Load(), lineno=3164, col_offset=49)], [], None, None, lineno=3164, col_offset=29))], None, None, lineno=3163, col_offset=12), lineno=3163, col_offset=12)], [], lineno=3162, col_offset=8), Assign([Subscript(Name('self', Load(), lineno=3165, col_offset=8), Index(Str('menu', lineno=3165, col_offset=13)), Store(), lineno=3165, col_offset=8)], Name('menu', Load(), lineno=3165, col_offset=23), lineno=3165, col_offset=8)], [], lineno=3142, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=3167, col_offset=20), Name('name', Param(), lineno=3167, col_offset=26)], None, None, []), [If(Compare(Name('name', Load(), lineno=3168, col_offset=11), [Eq()], [Str('menu', lineno=3168, col_offset=19)], lineno=3168, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=3169, col_offset=19), '__menu', Load(), lineno=3169, col_offset=19), lineno=3169, col_offset=12)], [], lineno=3168, col_offset=8), Return(Call(Attribute(Name('Widget', Load(), lineno=3170, col_offset=15), '__getitem__', Load(), lineno=3170, col_offset=15), [Name('self', Load(), lineno=3170, col_offset=34), Name('name', Load(), lineno=3170, col_offset=40)], [], None, None, lineno=3170, col_offset=15), lineno=3170, col_offset=8)], [], lineno=3167, col_offset=4), FunctionDef('destroy', arguments([Name('self', Param(), lineno=3172, col_offset=16)], None, None, []), [Expr(Str('Destroy this widget and the associated menu.', lineno=3173, col_offset=8), lineno=3173, col_offset=8), Expr(Call(Attribute(Name('Menubutton', Load(), lineno=3174, col_offset=8), 'destroy', Load(), lineno=3174, col_offset=8), [Name('self', Load(), lineno=3174, col_offset=27)], [], None, None, lineno=3174, col_offset=8), lineno=3174, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3175, col_offset=8), '__menu', Store(), lineno=3175, col_offset=8)], Name('None', Load(), lineno=3175, col_offset=22), lineno=3175, col_offset=8)], [], lineno=3172, col_offset=4)], [], lineno=3140, col_offset=0), ClassDef('Image', [], [Expr(Str('Base class for images.', lineno=3178, col_offset=4), lineno=3178, col_offset=4), Assign([Name('_last_id', Store(), lineno=3179, col_offset=4)], Num(0, lineno=3179, col_offset=15), lineno=3179, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3180, col_offset=17), Name('imgtype', Param(), lineno=3180, col_offset=23), Name('name', Param(), lineno=3180, col_offset=32), Name('cnf', Param(), lineno=3180, col_offset=43), Name('master', Param(), lineno=3180, col_offset=51)], None, 'kw', [Name('None', Load(), lineno=3180, col_offset=37), Dict([], [], lineno=3180, col_offset=47), Name('None', Load(), lineno=3180, col_offset=58)]), [Assign([Attribute(Name('self', Load(), lineno=3181, col_offset=8), 'name', Store(), lineno=3181, col_offset=8)], Name('None', Load(), lineno=3181, col_offset=20), lineno=3181, col_offset=8), If(UnaryOp(Not(), Name('master', Load(), lineno=3182, col_offset=15), lineno=3182, col_offset=11), [Assign([Name('master', Store(), lineno=3183, col_offset=12)], Name('_default_root', Load(), lineno=3183, col_offset=21), lineno=3183, col_offset=12), If(UnaryOp(Not(), Name('master', Load(), lineno=3184, col_offset=19), lineno=3184, col_offset=15), [Raise(Name('RuntimeError', Load(), lineno=3185, col_offset=22), Str('Too early to create image', lineno=3185, col_offset=36), None, lineno=3185, col_offset=16)], [], lineno=3184, col_offset=12)], [], lineno=3182, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3186, col_offset=8), 'tk', Store(), lineno=3186, col_offset=8)], Attribute(Name('master', Load(), lineno=3186, col_offset=18), 'tk', Load(), lineno=3186, col_offset=18), lineno=3186, col_offset=8), If(UnaryOp(Not(), Name('name', Load(), lineno=3187, col_offset=15), lineno=3187, col_offset=11), [AugAssign(Attribute(Name('Image', Load(), lineno=3188, col_offset=12), '_last_id', Store(), lineno=3188, col_offset=12), Add(), Num(1, lineno=3188, col_offset=30), lineno=3188, col_offset=12), Assign([Name('name', Store(), lineno=3189, col_offset=12)], BinOp(Str('pyimage%r', lineno=3189, col_offset=19), Mod(), Tuple([Attribute(Name('Image', Load(), lineno=3189, col_offset=34), '_last_id', Load(), lineno=3189, col_offset=34)], Load(), lineno=3189, col_offset=34), lineno=3189, col_offset=19), lineno=3189, col_offset=12), If(Compare(Subscript(Name('name', Load(), lineno=3192, col_offset=15), Index(Num(0, lineno=3192, col_offset=20)), Load(), lineno=3192, col_offset=15), [Eq()], [Str('-', lineno=3192, col_offset=26)], lineno=3192, col_offset=15), [Assign([Name('name', Store(), lineno=3192, col_offset=31)], BinOp(Str('_', lineno=3192, col_offset=38), Add(), Subscript(Name('name', Load(), lineno=3192, col_offset=44), Slice(Num(1, lineno=3192, col_offset=49), None, None), Load(), lineno=3192, col_offset=44), lineno=3192, col_offset=38), lineno=3192, col_offset=31)], [], lineno=3192, col_offset=12)], [], lineno=3187, col_offset=8), If(BoolOp(And(), [Name('kw', Load(), lineno=3193, col_offset=11), Name('cnf', Load(), lineno=3193, col_offset=18)], lineno=3193, col_offset=11), [Assign([Name('cnf', Store(), lineno=3193, col_offset=23)], Call(Name('_cnfmerge', Load(), lineno=3193, col_offset=29), [Tuple([Name('cnf', Load(), lineno=3193, col_offset=40), Name('kw', Load(), lineno=3193, col_offset=45)], Load(), lineno=3193, col_offset=40)], [], None, None, lineno=3193, col_offset=29), lineno=3193, col_offset=23)], [If(Name('kw', Load(), lineno=3194, col_offset=13), [Assign([Name('cnf', Store(), lineno=3194, col_offset=17)], Name('kw', Load(), lineno=3194, col_offset=23), lineno=3194, col_offset=17)], [], lineno=3194, col_offset=13)], lineno=3193, col_offset=8), Assign([Name('options', Store(), lineno=3195, col_offset=8)], Tuple([], Load(), lineno=3195, col_offset=18), lineno=3195, col_offset=8), For(Tuple([Name('k', Store(), lineno=3196, col_offset=12), Name('v', Store(), lineno=3196, col_offset=15)], Store(), lineno=3196, col_offset=12), Call(Attribute(Name('cnf', Load(), lineno=3196, col_offset=20), 'items', Load(), lineno=3196, col_offset=20), [], [], None, None, lineno=3196, col_offset=20), [If(Call(Name('hasattr', Load(), lineno=3197, col_offset=15), [Name('v', Load(), lineno=3197, col_offset=23), Str('__call__', lineno=3197, col_offset=26)], [], None, None, lineno=3197, col_offset=15), [Assign([Name('v', Store(), lineno=3198, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=3198, col_offset=20), '_register', Load(), lineno=3198, col_offset=20), [Name('v', Load(), lineno=3198, col_offset=35)], [], None, None, lineno=3198, col_offset=20), lineno=3198, col_offset=16)], [], lineno=3197, col_offset=12), Assign([Name('options', Store(), lineno=3199, col_offset=12)], BinOp(Name('options', Load(), lineno=3199, col_offset=22), Add(), Tuple([BinOp(Str('-', lineno=3199, col_offset=33), Add(), Name('k', Load(), lineno=3199, col_offset=37), lineno=3199, col_offset=33), Name('v', Load(), lineno=3199, col_offset=40)], Load(), lineno=3199, col_offset=33), lineno=3199, col_offset=22), lineno=3199, col_offset=12)], [], lineno=3196, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3200, col_offset=8), 'tk', Load(), lineno=3200, col_offset=8), 'call', Load(), lineno=3200, col_offset=8), [BinOp(Tuple([Str('image', lineno=3200, col_offset=22), Str('create', lineno=3200, col_offset=31), Name('imgtype', Load(), lineno=3200, col_offset=41), Name('name', Load(), lineno=3200, col_offset=50)], Load(), lineno=3200, col_offset=22), Add(), Name('options', Load(), lineno=3200, col_offset=59), lineno=3200, col_offset=21)], [], None, None, lineno=3200, col_offset=8), lineno=3200, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=3201, col_offset=8), 'name', Store(), lineno=3201, col_offset=8)], Name('name', Load(), lineno=3201, col_offset=20), lineno=3201, col_offset=8)], [], lineno=3180, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=3202, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=3202, col_offset=30), 'name', Load(), lineno=3202, col_offset=30), lineno=3202, col_offset=23)], [], lineno=3202, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=3203, col_offset=16)], None, None, []), [If(Attribute(Name('self', Load(), lineno=3204, col_offset=11), 'name', Load(), lineno=3204, col_offset=11), [TryExcept([Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3206, col_offset=16), 'tk', Load(), lineno=3206, col_offset=16), 'call', Load(), lineno=3206, col_offset=16), [Str('image', lineno=3206, col_offset=29), Str('delete', lineno=3206, col_offset=38), Attribute(Name('self', Load(), lineno=3206, col_offset=48), 'name', Load(), lineno=3206, col_offset=48)], [], None, None, lineno=3206, col_offset=16), lineno=3206, col_offset=16)], [ExceptHandler(Name('TclError', Load(), lineno=3207, col_offset=19), None, [Pass( lineno=3209, col_offset=16)], lineno=3207, col_offset=12)], [], lineno=3205, col_offset=12)], [], lineno=3204, col_offset=8)], [], lineno=3203, col_offset=4), FunctionDef('__setitem__', arguments([Name('self', Param(), lineno=3210, col_offset=20), Name('key', Param(), lineno=3210, col_offset=26), Name('value', Param(), lineno=3210, col_offset=31)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3211, col_offset=8), 'tk', Load(), lineno=3211, col_offset=8), 'call', Load(), lineno=3211, col_offset=8), [Attribute(Name('self', Load(), lineno=3211, col_offset=21), 'name', Load(), lineno=3211, col_offset=21), Str('configure', lineno=3211, col_offset=32), BinOp(Str('-', lineno=3211, col_offset=45), Add(), Name('key', Load(), lineno=3211, col_offset=49), lineno=3211, col_offset=45), Name('value', Load(), lineno=3211, col_offset=54)], [], None, None, lineno=3211, col_offset=8), lineno=3211, col_offset=8)], [], lineno=3210, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=3212, col_offset=20), Name('key', Param(), lineno=3212, col_offset=26)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3213, col_offset=15), 'tk', Load(), lineno=3213, col_offset=15), 'call', Load(), lineno=3213, col_offset=15), [Attribute(Name('self', Load(), lineno=3213, col_offset=28), 'name', Load(), lineno=3213, col_offset=28), Str('configure', lineno=3213, col_offset=39), BinOp(Str('-', lineno=3213, col_offset=52), Add(), Name('key', Load(), lineno=3213, col_offset=56), lineno=3213, col_offset=52)], [], None, None, lineno=3213, col_offset=15), lineno=3213, col_offset=8)], [], lineno=3212, col_offset=4), FunctionDef('configure', arguments([Name('self', Param(), lineno=3214, col_offset=18)], None, 'kw', []), [Expr(Str('Configure the image.', lineno=3215, col_offset=8), lineno=3215, col_offset=8), Assign([Name('res', Store(), lineno=3216, col_offset=8)], Tuple([], Load(), lineno=3216, col_offset=14), lineno=3216, col_offset=8), For(Tuple([Name('k', Store(), lineno=3217, col_offset=12), Name('v', Store(), lineno=3217, col_offset=15)], Store(), lineno=3217, col_offset=12), Call(Attribute(Call(Name('_cnfmerge', Load(), lineno=3217, col_offset=20), [Name('kw', Load(), lineno=3217, col_offset=30)], [], None, None, lineno=3217, col_offset=20), 'items', Load(), lineno=3217, col_offset=20), [], [], None, None, lineno=3217, col_offset=20), [If(Compare(Name('v', Load(), lineno=3218, col_offset=15), [IsNot()], [Name('None', Load(), lineno=3218, col_offset=24)], lineno=3218, col_offset=15), [If(Compare(Subscript(Name('k', Load(), lineno=3219, col_offset=19), Index(Num(-1, lineno=3219, col_offset=22)), Load(), lineno=3219, col_offset=19), [Eq()], [Str('_', lineno=3219, col_offset=28)], lineno=3219, col_offset=19), [Assign([Name('k', Store(), lineno=3219, col_offset=33)], Subscript(Name('k', Load(), lineno=3219, col_offset=37), Slice(None, Num(-1, lineno=3219, col_offset=41), None), Load(), lineno=3219, col_offset=37), lineno=3219, col_offset=33)], [], lineno=3219, col_offset=16), If(Call(Name('hasattr', Load(), lineno=3220, col_offset=19), [Name('v', Load(), lineno=3220, col_offset=27), Str('__call__', lineno=3220, col_offset=30)], [], None, None, lineno=3220, col_offset=19), [Assign([Name('v', Store(), lineno=3221, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=3221, col_offset=24), '_register', Load(), lineno=3221, col_offset=24), [Name('v', Load(), lineno=3221, col_offset=39)], [], None, None, lineno=3221, col_offset=24), lineno=3221, col_offset=20)], [], lineno=3220, col_offset=16), Assign([Name('res', Store(), lineno=3222, col_offset=16)], BinOp(Name('res', Load(), lineno=3222, col_offset=22), Add(), Tuple([BinOp(Str('-', lineno=3222, col_offset=29), Add(), Name('k', Load(), lineno=3222, col_offset=33), lineno=3222, col_offset=29), Name('v', Load(), lineno=3222, col_offset=36)], Load(), lineno=3222, col_offset=29), lineno=3222, col_offset=22), lineno=3222, col_offset=16)], [], lineno=3218, col_offset=12)], [], lineno=3217, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3223, col_offset=8), 'tk', Load(), lineno=3223, col_offset=8), 'call', Load(), lineno=3223, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3223, col_offset=22), 'name', Load(), lineno=3223, col_offset=22), Str('config', lineno=3223, col_offset=33)], Load(), lineno=3223, col_offset=22), Add(), Name('res', Load(), lineno=3223, col_offset=45), lineno=3223, col_offset=21)], [], None, None, lineno=3223, col_offset=8), lineno=3223, col_offset=8)], [], lineno=3214, col_offset=4), Assign([Name('config', Store(), lineno=3224, col_offset=4)], Name('configure', Load(), lineno=3224, col_offset=13), lineno=3224, col_offset=4), FunctionDef('height', arguments([Name('self', Param(), lineno=3225, col_offset=15)], None, None, []), [Expr(Str('Return the height of the image.', lineno=3226, col_offset=8), lineno=3226, col_offset=8), Return(Call(Name('getint', Load(), lineno=3227, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3228, col_offset=12), 'tk', Load(), lineno=3228, col_offset=12), 'call', Load(), lineno=3228, col_offset=12), [Str('image', lineno=3228, col_offset=25), Str('height', lineno=3228, col_offset=34), Attribute(Name('self', Load(), lineno=3228, col_offset=44), 'name', Load(), lineno=3228, col_offset=44)], [], None, None, lineno=3228, col_offset=12)], [], None, None, lineno=3227, col_offset=15), lineno=3227, col_offset=8)], [], lineno=3225, col_offset=4), FunctionDef('type', arguments([Name('self', Param(), lineno=3229, col_offset=13)], None, None, []), [Expr(Str('Return the type of the imgage, e.g. "photo" or "bitmap".', lineno=3230, col_offset=8), lineno=3230, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3231, col_offset=15), 'tk', Load(), lineno=3231, col_offset=15), 'call', Load(), lineno=3231, col_offset=15), [Str('image', lineno=3231, col_offset=28), Str('type', lineno=3231, col_offset=37), Attribute(Name('self', Load(), lineno=3231, col_offset=45), 'name', Load(), lineno=3231, col_offset=45)], [], None, None, lineno=3231, col_offset=15), lineno=3231, col_offset=8)], [], lineno=3229, col_offset=4), FunctionDef('width', arguments([Name('self', Param(), lineno=3232, col_offset=14)], None, None, []), [Expr(Str('Return the width of the image.', lineno=3233, col_offset=8), lineno=3233, col_offset=8), Return(Call(Name('getint', Load(), lineno=3234, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3235, col_offset=12), 'tk', Load(), lineno=3235, col_offset=12), 'call', Load(), lineno=3235, col_offset=12), [Str('image', lineno=3235, col_offset=25), Str('width', lineno=3235, col_offset=34), Attribute(Name('self', Load(), lineno=3235, col_offset=43), 'name', Load(), lineno=3235, col_offset=43)], [], None, None, lineno=3235, col_offset=12)], [], None, None, lineno=3234, col_offset=15), lineno=3234, col_offset=8)], [], lineno=3232, col_offset=4)], [], lineno=3177, col_offset=0), ClassDef('PhotoImage', [Name('Image', Load(), lineno=3237, col_offset=17)], [Expr(Str('Widget which can display colored images in GIF, PPM/PGM format.', lineno=3238, col_offset=4), lineno=3238, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3239, col_offset=17), Name('name', Param(), lineno=3239, col_offset=23), Name('cnf', Param(), lineno=3239, col_offset=34), Name('master', Param(), lineno=3239, col_offset=42)], None, 'kw', [Name('None', Load(), lineno=3239, col_offset=28), Dict([], [], lineno=3239, col_offset=38), Name('None', Load(), lineno=3239, col_offset=49)]), [Expr(Str('Create an image with NAME.\n\n        Valid resource names: data, format, file, gamma, height, palette,\n        width.', lineno=3243, col_offset=-1), lineno=3243, col_offset=-1), Expr(Call(Attribute(Name('Image', Load(), lineno=3244, col_offset=8), '__init__', Load(), lineno=3244, col_offset=8), [Name('self', Load(), lineno=3244, col_offset=23), Str('photo', lineno=3244, col_offset=29), Name('name', Load(), lineno=3244, col_offset=38), Name('cnf', Load(), lineno=3244, col_offset=44), Name('master', Load(), lineno=3244, col_offset=49)], [], None, Name('kw', Load(), lineno=3244, col_offset=59), lineno=3244, col_offset=8), lineno=3244, col_offset=8)], [], lineno=3239, col_offset=4), FunctionDef('blank', arguments([Name('self', Param(), lineno=3245, col_offset=14)], None, None, []), [Expr(Str('Display a transparent image.', lineno=3246, col_offset=8), lineno=3246, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3247, col_offset=8), 'tk', Load(), lineno=3247, col_offset=8), 'call', Load(), lineno=3247, col_offset=8), [Attribute(Name('self', Load(), lineno=3247, col_offset=21), 'name', Load(), lineno=3247, col_offset=21), Str('blank', lineno=3247, col_offset=32)], [], None, None, lineno=3247, col_offset=8), lineno=3247, col_offset=8)], [], lineno=3245, col_offset=4), FunctionDef('cget', arguments([Name('self', Param(), lineno=3248, col_offset=13), Name('option', Param(), lineno=3248, col_offset=19)], None, None, []), [Expr(Str('Return the value of OPTION.', lineno=3249, col_offset=8), lineno=3249, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3250, col_offset=15), 'tk', Load(), lineno=3250, col_offset=15), 'call', Load(), lineno=3250, col_offset=15), [Attribute(Name('self', Load(), lineno=3250, col_offset=28), 'name', Load(), lineno=3250, col_offset=28), Str('cget', lineno=3250, col_offset=39), BinOp(Str('-', lineno=3250, col_offset=47), Add(), Name('option', Load(), lineno=3250, col_offset=53), lineno=3250, col_offset=47)], [], None, None, lineno=3250, col_offset=15), lineno=3250, col_offset=8)], [], lineno=3248, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=3252, col_offset=20), Name('key', Param(), lineno=3252, col_offset=26)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3253, col_offset=15), 'tk', Load(), lineno=3253, col_offset=15), 'call', Load(), lineno=3253, col_offset=15), [Attribute(Name('self', Load(), lineno=3253, col_offset=28), 'name', Load(), lineno=3253, col_offset=28), Str('cget', lineno=3253, col_offset=39), BinOp(Str('-', lineno=3253, col_offset=47), Add(), Name('key', Load(), lineno=3253, col_offset=53), lineno=3253, col_offset=47)], [], None, None, lineno=3253, col_offset=15), lineno=3253, col_offset=8)], [], lineno=3252, col_offset=4), FunctionDef('copy', arguments([Name('self', Param(), lineno=3255, col_offset=13)], None, None, []), [Expr(Str('Return a new PhotoImage with the same image as this widget.', lineno=3256, col_offset=8), lineno=3256, col_offset=8), Assign([Name('destImage', Store(), lineno=3257, col_offset=8)], Call(Name('PhotoImage', Load(), lineno=3257, col_offset=20), [], [], None, None, lineno=3257, col_offset=20), lineno=3257, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3258, col_offset=8), 'tk', Load(), lineno=3258, col_offset=8), 'call', Load(), lineno=3258, col_offset=8), [Name('destImage', Load(), lineno=3258, col_offset=21), Str('copy', lineno=3258, col_offset=32), Attribute(Name('self', Load(), lineno=3258, col_offset=40), 'name', Load(), lineno=3258, col_offset=40)], [], None, None, lineno=3258, col_offset=8), lineno=3258, col_offset=8), Return(Name('destImage', Load(), lineno=3259, col_offset=15), lineno=3259, col_offset=8)], [], lineno=3255, col_offset=4), FunctionDef('zoom', arguments([Name('self', Param(), lineno=3260, col_offset=13), Name('x', Param(), lineno=3260, col_offset=18), Name('y', Param(), lineno=3260, col_offset=20)], None, None, [Str('', lineno=3260, col_offset=22)]), [Expr(Str('Return a new PhotoImage with the same image as this widget\n        but zoom it with X and Y.', lineno=3262, col_offset=-1), lineno=3262, col_offset=-1), Assign([Name('destImage', Store(), lineno=3263, col_offset=8)], Call(Name('PhotoImage', Load(), lineno=3263, col_offset=20), [], [], None, None, lineno=3263, col_offset=20), lineno=3263, col_offset=8), If(Compare(Name('y', Load(), lineno=3264, col_offset=11), [Eq()], [Str('', lineno=3264, col_offset=14)], lineno=3264, col_offset=11), [Assign([Name('y', Store(), lineno=3264, col_offset=18)], Name('x', Load(), lineno=3264, col_offset=20), lineno=3264, col_offset=18)], [], lineno=3264, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3265, col_offset=8), 'tk', Load(), lineno=3265, col_offset=8), 'call', Load(), lineno=3265, col_offset=8), [Name('destImage', Load(), lineno=3265, col_offset=21), Str('copy', lineno=3265, col_offset=32), Attribute(Name('self', Load(), lineno=3265, col_offset=40), 'name', Load(), lineno=3265, col_offset=40), Str('-zoom', lineno=3265, col_offset=51), Name('x', Load(), lineno=3265, col_offset=59), Name('y', Load(), lineno=3265, col_offset=61)], [], None, None, lineno=3265, col_offset=8), lineno=3265, col_offset=8), Return(Name('destImage', Load(), lineno=3266, col_offset=15), lineno=3266, col_offset=8)], [], lineno=3260, col_offset=4), FunctionDef('subsample', arguments([Name('self', Param(), lineno=3267, col_offset=18), Name('x', Param(), lineno=3267, col_offset=23), Name('y', Param(), lineno=3267, col_offset=25)], None, None, [Str('', lineno=3267, col_offset=27)]), [Expr(Str('Return a new PhotoImage based on the same image as this widget\n        but use only every Xth or Yth pixel.', lineno=3269, col_offset=-1), lineno=3269, col_offset=-1), Assign([Name('destImage', Store(), lineno=3270, col_offset=8)], Call(Name('PhotoImage', Load(), lineno=3270, col_offset=20), [], [], None, None, lineno=3270, col_offset=20), lineno=3270, col_offset=8), If(Compare(Name('y', Load(), lineno=3271, col_offset=11), [Eq()], [Str('', lineno=3271, col_offset=14)], lineno=3271, col_offset=11), [Assign([Name('y', Store(), lineno=3271, col_offset=18)], Name('x', Load(), lineno=3271, col_offset=20), lineno=3271, col_offset=18)], [], lineno=3271, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3272, col_offset=8), 'tk', Load(), lineno=3272, col_offset=8), 'call', Load(), lineno=3272, col_offset=8), [Name('destImage', Load(), lineno=3272, col_offset=21), Str('copy', lineno=3272, col_offset=32), Attribute(Name('self', Load(), lineno=3272, col_offset=40), 'name', Load(), lineno=3272, col_offset=40), Str('-subsample', lineno=3272, col_offset=51), Name('x', Load(), lineno=3272, col_offset=64), Name('y', Load(), lineno=3272, col_offset=66)], [], None, None, lineno=3272, col_offset=8), lineno=3272, col_offset=8), Return(Name('destImage', Load(), lineno=3273, col_offset=15), lineno=3273, col_offset=8)], [], lineno=3267, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=3274, col_offset=12), Name('x', Param(), lineno=3274, col_offset=18), Name('y', Param(), lineno=3274, col_offset=21)], None, None, []), [Expr(Str('Return the color (red, green, blue) of the pixel at X,Y.', lineno=3275, col_offset=8), lineno=3275, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3276, col_offset=15), 'tk', Load(), lineno=3276, col_offset=15), 'call', Load(), lineno=3276, col_offset=15), [Attribute(Name('self', Load(), lineno=3276, col_offset=28), 'name', Load(), lineno=3276, col_offset=28), Str('get', lineno=3276, col_offset=39), Name('x', Load(), lineno=3276, col_offset=46), Name('y', Load(), lineno=3276, col_offset=49)], [], None, None, lineno=3276, col_offset=15), lineno=3276, col_offset=8)], [], lineno=3274, col_offset=4), FunctionDef('put', arguments([Name('self', Param(), lineno=3277, col_offset=12), Name('data', Param(), lineno=3277, col_offset=18), Name('to', Param(), lineno=3277, col_offset=24)], None, None, [Name('None', Load(), lineno=3277, col_offset=27)]), [Expr(Str('Put row formatted colors to image starting from\n        position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))', lineno=3279, col_offset=-1), lineno=3279, col_offset=-1), Assign([Name('args', Store(), lineno=3280, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=3280, col_offset=16), 'name', Load(), lineno=3280, col_offset=16), Str('put', lineno=3280, col_offset=27), Name('data', Load(), lineno=3280, col_offset=34)], Load(), lineno=3280, col_offset=16), lineno=3280, col_offset=8), If(Name('to', Load(), lineno=3281, col_offset=11), [If(Compare(Subscript(Name('to', Load(), lineno=3282, col_offset=15), Index(Num(0, lineno=3282, col_offset=18)), Load(), lineno=3282, col_offset=15), [Eq()], [Str('-to', lineno=3282, col_offset=24)], lineno=3282, col_offset=15), [Assign([Name('to', Store(), lineno=3283, col_offset=16)], Subscript(Name('to', Load(), lineno=3283, col_offset=21), Slice(Num(1, lineno=3283, col_offset=24), None, None), Load(), lineno=3283, col_offset=21), lineno=3283, col_offset=16)], [], lineno=3282, col_offset=12), Assign([Name('args', Store(), lineno=3284, col_offset=12)], BinOp(BinOp(Name('args', Load(), lineno=3284, col_offset=19), Add(), Tuple([Str('-to', lineno=3284, col_offset=27)], Load(), lineno=3284, col_offset=27), lineno=3284, col_offset=19), Add(), Call(Name('tuple', Load(), lineno=3284, col_offset=37), [Name('to', Load(), lineno=3284, col_offset=43)], [], None, None, lineno=3284, col_offset=37), lineno=3284, col_offset=35), lineno=3284, col_offset=12)], [], lineno=3281, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3285, col_offset=8), 'tk', Load(), lineno=3285, col_offset=8), 'call', Load(), lineno=3285, col_offset=8), [Name('args', Load(), lineno=3285, col_offset=21)], [], None, None, lineno=3285, col_offset=8), lineno=3285, col_offset=8)], [], lineno=3277, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=3287, col_offset=14), Name('filename', Param(), lineno=3287, col_offset=20), Name('format', Param(), lineno=3287, col_offset=30), Name('from_coords', Param(), lineno=3287, col_offset=43)], None, None, [Name('None', Load(), lineno=3287, col_offset=37), Name('None', Load(), lineno=3287, col_offset=55)]), [Expr(Str('Write image to file FILENAME in FORMAT starting from\n        position FROM_COORDS.', lineno=3289, col_offset=-1), lineno=3289, col_offset=-1), Assign([Name('args', Store(), lineno=3290, col_offset=8)], Tuple([Attribute(Name('self', Load(), lineno=3290, col_offset=16), 'name', Load(), lineno=3290, col_offset=16), Str('write', lineno=3290, col_offset=27), Name('filename', Load(), lineno=3290, col_offset=36)], Load(), lineno=3290, col_offset=16), lineno=3290, col_offset=8), If(Name('format', Load(), lineno=3291, col_offset=11), [Assign([Name('args', Store(), lineno=3292, col_offset=12)], BinOp(Name('args', Load(), lineno=3292, col_offset=19), Add(), Tuple([Str('-format', lineno=3292, col_offset=27), Name('format', Load(), lineno=3292, col_offset=38)], Load(), lineno=3292, col_offset=27), lineno=3292, col_offset=19), lineno=3292, col_offset=12)], [], lineno=3291, col_offset=8), If(Name('from_coords', Load(), lineno=3293, col_offset=11), [Assign([Name('args', Store(), lineno=3294, col_offset=12)], BinOp(BinOp(Name('args', Load(), lineno=3294, col_offset=19), Add(), Tuple([Str('-from', lineno=3294, col_offset=27)], Load(), lineno=3294, col_offset=27), lineno=3294, col_offset=19), Add(), Call(Name('tuple', Load(), lineno=3294, col_offset=39), [Name('from_coords', Load(), lineno=3294, col_offset=45)], [], None, None, lineno=3294, col_offset=39), lineno=3294, col_offset=37), lineno=3294, col_offset=12)], [], lineno=3293, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3295, col_offset=8), 'tk', Load(), lineno=3295, col_offset=8), 'call', Load(), lineno=3295, col_offset=8), [Name('args', Load(), lineno=3295, col_offset=21)], [], None, None, lineno=3295, col_offset=8), lineno=3295, col_offset=8)], [], lineno=3287, col_offset=4)], [], lineno=3237, col_offset=0), ClassDef('BitmapImage', [Name('Image', Load(), lineno=3297, col_offset=18)], [Expr(Str('Widget which can display a bitmap.', lineno=3298, col_offset=4), lineno=3298, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3299, col_offset=17), Name('name', Param(), lineno=3299, col_offset=23), Name('cnf', Param(), lineno=3299, col_offset=34), Name('master', Param(), lineno=3299, col_offset=42)], None, 'kw', [Name('None', Load(), lineno=3299, col_offset=28), Dict([], [], lineno=3299, col_offset=38), Name('None', Load(), lineno=3299, col_offset=49)]), [Expr(Str('Create a bitmap with NAME.\n\n        Valid resource names: background, data, file, foreground, maskdata, maskfile.', lineno=3302, col_offset=-1), lineno=3302, col_offset=-1), Expr(Call(Attribute(Name('Image', Load(), lineno=3303, col_offset=8), '__init__', Load(), lineno=3303, col_offset=8), [Name('self', Load(), lineno=3303, col_offset=23), Str('bitmap', lineno=3303, col_offset=29), Name('name', Load(), lineno=3303, col_offset=39), Name('cnf', Load(), lineno=3303, col_offset=45), Name('master', Load(), lineno=3303, col_offset=50)], [], None, Name('kw', Load(), lineno=3303, col_offset=60), lineno=3303, col_offset=8), lineno=3303, col_offset=8)], [], lineno=3299, col_offset=4)], [], lineno=3297, col_offset=0), FunctionDef('image_names', arguments([], None, None, []), [Return(Call(Attribute(Attribute(Name('_default_root', Load(), lineno=3305, col_offset=26), 'tk', Load(), lineno=3305, col_offset=26), 'call', Load(), lineno=3305, col_offset=26), [Str('image', lineno=3305, col_offset=48), Str('names', lineno=3305, col_offset=57)], [], None, None, lineno=3305, col_offset=26), lineno=3305, col_offset=19)], [], lineno=3305, col_offset=0), FunctionDef('image_types', arguments([], None, None, []), [Return(Call(Attribute(Attribute(Name('_default_root', Load(), lineno=3306, col_offset=26), 'tk', Load(), lineno=3306, col_offset=26), 'call', Load(), lineno=3306, col_offset=26), [Str('image', lineno=3306, col_offset=48), Str('types', lineno=3306, col_offset=57)], [], None, None, lineno=3306, col_offset=26), lineno=3306, col_offset=19)], [], lineno=3306, col_offset=0), ClassDef('Spinbox', [Name('Widget', Load(), lineno=3309, col_offset=14), Name('XView', Load(), lineno=3309, col_offset=22)], [Expr(Str('spinbox widget.', lineno=3310, col_offset=4), lineno=3310, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3311, col_offset=17), Name('master', Param(), lineno=3311, col_offset=23), Name('cnf', Param(), lineno=3311, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=3311, col_offset=30), Dict([], [], lineno=3311, col_offset=40)]), [Expr(Str('Construct a spinbox widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, background, borderwidth,\n            cursor, exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, justify, relief,\n            repeatdelay, repeatinterval,\n            selectbackground, selectborderwidth\n            selectforeground, takefocus, textvariable\n            xscrollcommand.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            buttonbackground, buttoncursor,\n            buttondownrelief, buttonuprelief,\n            command, disabledbackground,\n            disabledforeground, format, from,\n            invalidcommand, increment,\n            readonlybackground, state, to,\n            validate, validatecommand values,\n            width, wrap,\n        ', lineno=3337, col_offset=-1), lineno=3337, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=3338, col_offset=8), '__init__', Load(), lineno=3338, col_offset=8), [Name('self', Load(), lineno=3338, col_offset=24), Name('master', Load(), lineno=3338, col_offset=30), Str('spinbox', lineno=3338, col_offset=38), Name('cnf', Load(), lineno=3338, col_offset=49), Name('kw', Load(), lineno=3338, col_offset=54)], [], None, None, lineno=3338, col_offset=8), lineno=3338, col_offset=8)], [], lineno=3311, col_offset=4), FunctionDef('bbox', arguments([Name('self', Param(), lineno=3340, col_offset=13), Name('index', Param(), lineno=3340, col_offset=19)], None, None, []), [Expr(Str('Return a tuple of X1,Y1,X2,Y2 coordinates for a\n        rectangle which encloses the character given by index.\n\n        The first two elements of the list give the x and y\n        coordinates of the upper-left corner of the screen\n        area covered by the character (in pixels relative\n        to the widget) and the last two elements give the\n        width and height of the character, in pixels. The\n        bounding box may refer to a region outside the\n        visible area of the window.\n        ', lineno=3351, col_offset=-1), lineno=3351, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3352, col_offset=15), 'tk', Load(), lineno=3352, col_offset=15), 'call', Load(), lineno=3352, col_offset=15), [Attribute(Name('self', Load(), lineno=3352, col_offset=28), '_w', Load(), lineno=3352, col_offset=28), Str('bbox', lineno=3352, col_offset=37), Name('index', Load(), lineno=3352, col_offset=45)], [], None, None, lineno=3352, col_offset=15), lineno=3352, col_offset=8)], [], lineno=3340, col_offset=4), FunctionDef('delete', arguments([Name('self', Param(), lineno=3354, col_offset=15), Name('first', Param(), lineno=3354, col_offset=21), Name('last', Param(), lineno=3354, col_offset=28)], None, None, [Name('None', Load(), lineno=3354, col_offset=33)]), [Expr(Str("Delete one or more elements of the spinbox.\n\n        First is the index of the first character to delete,\n        and last is the index of the character just after\n        the last one to delete. If last isn't specified it\n        defaults to first+1, i.e. a single character is\n        deleted.  This command returns an empty string.\n        ", lineno=3362, col_offset=-1), lineno=3362, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3363, col_offset=15), 'tk', Load(), lineno=3363, col_offset=15), 'call', Load(), lineno=3363, col_offset=15), [Attribute(Name('self', Load(), lineno=3363, col_offset=28), '_w', Load(), lineno=3363, col_offset=28), Str('delete', lineno=3363, col_offset=37), Name('first', Load(), lineno=3363, col_offset=47), Name('last', Load(), lineno=3363, col_offset=54)], [], None, None, lineno=3363, col_offset=15), lineno=3363, col_offset=8)], [], lineno=3354, col_offset=4), FunctionDef('get', arguments([Name('self', Param(), lineno=3365, col_offset=12)], None, None, []), [Expr(Str("Returns the spinbox's string", lineno=3366, col_offset=8), lineno=3366, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3367, col_offset=15), 'tk', Load(), lineno=3367, col_offset=15), 'call', Load(), lineno=3367, col_offset=15), [Attribute(Name('self', Load(), lineno=3367, col_offset=28), '_w', Load(), lineno=3367, col_offset=28), Str('get', lineno=3367, col_offset=37)], [], None, None, lineno=3367, col_offset=15), lineno=3367, col_offset=8)], [], lineno=3365, col_offset=4), FunctionDef('icursor', arguments([Name('self', Param(), lineno=3369, col_offset=16), Name('index', Param(), lineno=3369, col_offset=22)], None, None, []), [Expr(Str('Alter the position of the insertion cursor.\n\n        The insertion cursor will be displayed just before\n        the character given by index. Returns an empty string\n        ', lineno=3374, col_offset=-1), lineno=3374, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3375, col_offset=15), 'tk', Load(), lineno=3375, col_offset=15), 'call', Load(), lineno=3375, col_offset=15), [Attribute(Name('self', Load(), lineno=3375, col_offset=28), '_w', Load(), lineno=3375, col_offset=28), Str('icursor', lineno=3375, col_offset=37), Name('index', Load(), lineno=3375, col_offset=48)], [], None, None, lineno=3375, col_offset=15), lineno=3375, col_offset=8)], [], lineno=3369, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=3377, col_offset=17), Name('x', Param(), lineno=3377, col_offset=23), Name('y', Param(), lineno=3377, col_offset=26)], None, None, []), [Expr(Str('Returns the name of the widget at position x, y\n\n        Return value is one of: none, buttondown, buttonup, entry\n        ', lineno=3381, col_offset=-1), lineno=3381, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3382, col_offset=15), 'tk', Load(), lineno=3382, col_offset=15), 'call', Load(), lineno=3382, col_offset=15), [Attribute(Name('self', Load(), lineno=3382, col_offset=28), '_w', Load(), lineno=3382, col_offset=28), Str('identify', lineno=3382, col_offset=37), Name('x', Load(), lineno=3382, col_offset=49), Name('y', Load(), lineno=3382, col_offset=52)], [], None, None, lineno=3382, col_offset=15), lineno=3382, col_offset=8)], [], lineno=3377, col_offset=4), FunctionDef('index', arguments([Name('self', Param(), lineno=3384, col_offset=14), Name('index', Param(), lineno=3384, col_offset=20)], None, None, []), [Expr(Str('Returns the numerical index corresponding to index\n        ', lineno=3386, col_offset=-1), lineno=3386, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3387, col_offset=15), 'tk', Load(), lineno=3387, col_offset=15), 'call', Load(), lineno=3387, col_offset=15), [Attribute(Name('self', Load(), lineno=3387, col_offset=28), '_w', Load(), lineno=3387, col_offset=28), Str('index', lineno=3387, col_offset=37), Name('index', Load(), lineno=3387, col_offset=46)], [], None, None, lineno=3387, col_offset=15), lineno=3387, col_offset=8)], [], lineno=3384, col_offset=4), FunctionDef('insert', arguments([Name('self', Param(), lineno=3389, col_offset=15), Name('index', Param(), lineno=3389, col_offset=21), Name('s', Param(), lineno=3389, col_offset=28)], None, None, []), [Expr(Str('Insert string s at index\n\n         Returns an empty string.\n        ', lineno=3393, col_offset=-1), lineno=3393, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3394, col_offset=15), 'tk', Load(), lineno=3394, col_offset=15), 'call', Load(), lineno=3394, col_offset=15), [Attribute(Name('self', Load(), lineno=3394, col_offset=28), '_w', Load(), lineno=3394, col_offset=28), Str('insert', lineno=3394, col_offset=37), Name('index', Load(), lineno=3394, col_offset=47), Name('s', Load(), lineno=3394, col_offset=54)], [], None, None, lineno=3394, col_offset=15), lineno=3394, col_offset=8)], [], lineno=3389, col_offset=4), FunctionDef('invoke', arguments([Name('self', Param(), lineno=3396, col_offset=15), Name('element', Param(), lineno=3396, col_offset=21)], None, None, []), [Expr(Str('Causes the specified element to be invoked\n\n        The element could be buttondown or buttonup\n        triggering the action associated with it.\n        ', lineno=3401, col_offset=-1), lineno=3401, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3402, col_offset=15), 'tk', Load(), lineno=3402, col_offset=15), 'call', Load(), lineno=3402, col_offset=15), [Attribute(Name('self', Load(), lineno=3402, col_offset=28), '_w', Load(), lineno=3402, col_offset=28), Str('invoke', lineno=3402, col_offset=37), Name('element', Load(), lineno=3402, col_offset=47)], [], None, None, lineno=3402, col_offset=15), lineno=3402, col_offset=8)], [], lineno=3396, col_offset=4), FunctionDef('scan', arguments([Name('self', Param(), lineno=3404, col_offset=13)], 'args', None, []), [Expr(Str('Internal function.', lineno=3405, col_offset=8), lineno=3405, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=3406, col_offset=15), '_getints', Load(), lineno=3406, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3407, col_offset=12), 'tk', Load(), lineno=3407, col_offset=12), 'call', Load(), lineno=3407, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3407, col_offset=26), '_w', Load(), lineno=3407, col_offset=26), Str('scan', lineno=3407, col_offset=35)], Load(), lineno=3407, col_offset=26), Add(), Name('args', Load(), lineno=3407, col_offset=45), lineno=3407, col_offset=25)], [], None, None, lineno=3407, col_offset=12)], [], None, None, lineno=3406, col_offset=15), Tuple([], Load(), lineno=3407, col_offset=55)], lineno=3406, col_offset=15), lineno=3406, col_offset=8)], [], lineno=3404, col_offset=4), FunctionDef('scan_mark', arguments([Name('self', Param(), lineno=3409, col_offset=18), Name('x', Param(), lineno=3409, col_offset=24)], None, None, []), [Expr(Str('Records x and the current view in the spinbox window;\n\n        used in conjunction with later scan dragto commands.\n        Typically this command is associated with a mouse button\n        press in the widget. It returns an empty string.\n        ', lineno=3415, col_offset=-1), lineno=3415, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3416, col_offset=15), 'scan', Load(), lineno=3416, col_offset=15), [Str('mark', lineno=3416, col_offset=25), Name('x', Load(), lineno=3416, col_offset=33)], [], None, None, lineno=3416, col_offset=15), lineno=3416, col_offset=8)], [], lineno=3409, col_offset=4), FunctionDef('scan_dragto', arguments([Name('self', Param(), lineno=3418, col_offset=20), Name('x', Param(), lineno=3418, col_offset=26)], None, None, []), [Expr(Str('Compute the difference between the given x argument\n        and the x argument to the last scan mark command\n\n        It then adjusts the view left or right by 10 times the\n        difference in x-coordinates. This command is typically\n        associated with mouse motion events in the widget, to\n        produce the effect of dragging the spinbox at high speed\n        through the window. The return value is an empty string.\n        ', lineno=3427, col_offset=-1), lineno=3427, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3428, col_offset=15), 'scan', Load(), lineno=3428, col_offset=15), [Str('dragto', lineno=3428, col_offset=25), Name('x', Load(), lineno=3428, col_offset=35)], [], None, None, lineno=3428, col_offset=15), lineno=3428, col_offset=8)], [], lineno=3418, col_offset=4), FunctionDef('selection', arguments([Name('self', Param(), lineno=3430, col_offset=18)], 'args', None, []), [Expr(Str('Internal function.', lineno=3431, col_offset=8), lineno=3431, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=3432, col_offset=15), '_getints', Load(), lineno=3432, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3433, col_offset=12), 'tk', Load(), lineno=3433, col_offset=12), 'call', Load(), lineno=3433, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3433, col_offset=26), '_w', Load(), lineno=3433, col_offset=26), Str('selection', lineno=3433, col_offset=35)], Load(), lineno=3433, col_offset=26), Add(), Name('args', Load(), lineno=3433, col_offset=50), lineno=3433, col_offset=25)], [], None, None, lineno=3433, col_offset=12)], [], None, None, lineno=3432, col_offset=15), Tuple([], Load(), lineno=3433, col_offset=60)], lineno=3432, col_offset=15), lineno=3432, col_offset=8)], [], lineno=3430, col_offset=4), FunctionDef('selection_adjust', arguments([Name('self', Param(), lineno=3435, col_offset=25), Name('index', Param(), lineno=3435, col_offset=31)], None, None, []), [Expr(Str("Locate the end of the selection nearest to the character\n        given by index,\n\n        Then adjust that end of the selection to be at index\n        (i.e including but not going beyond index). The other\n        end of the selection is made the anchor point for future\n        select to commands. If the selection isn't currently in\n        the spinbox, then a new selection is created to include\n        the characters between index and the most recent selection\n        anchor point, inclusive. Returns an empty string.\n        ", lineno=3446, col_offset=-1), lineno=3446, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3447, col_offset=15), 'selection', Load(), lineno=3447, col_offset=15), [Str('adjust', lineno=3447, col_offset=30), Name('index', Load(), lineno=3447, col_offset=40)], [], None, None, lineno=3447, col_offset=15), lineno=3447, col_offset=8)], [], lineno=3435, col_offset=4), FunctionDef('selection_clear', arguments([Name('self', Param(), lineno=3449, col_offset=24)], None, None, []), [Expr(Str("Clear the selection\n\n        If the selection isn't in this widget then the\n        command has no effect. Returns an empty string.\n        ", lineno=3454, col_offset=-1), lineno=3454, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3455, col_offset=15), 'selection', Load(), lineno=3455, col_offset=15), [Str('clear', lineno=3455, col_offset=30)], [], None, None, lineno=3455, col_offset=15), lineno=3455, col_offset=8)], [], lineno=3449, col_offset=4), FunctionDef('selection_element', arguments([Name('self', Param(), lineno=3457, col_offset=26), Name('element', Param(), lineno=3457, col_offset=32)], None, None, [Name('None', Load(), lineno=3457, col_offset=40)]), [Expr(Str('Sets or gets the currently selected element.\n\n        If a spinbutton element is specified, it will be\n        displayed depressed\n        ', lineno=3462, col_offset=-1), lineno=3462, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3463, col_offset=15), 'selection', Load(), lineno=3463, col_offset=15), [Str('element', lineno=3463, col_offset=30), Name('element', Load(), lineno=3463, col_offset=41)], [], None, None, lineno=3463, col_offset=15), lineno=3463, col_offset=8)], [], lineno=3457, col_offset=4)], [], lineno=3309, col_offset=0), ClassDef('LabelFrame', [Name('Widget', Load(), lineno=3467, col_offset=17)], [Expr(Str('labelframe widget.', lineno=3468, col_offset=4), lineno=3468, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3469, col_offset=17), Name('master', Param(), lineno=3469, col_offset=23), Name('cnf', Param(), lineno=3469, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=3469, col_offset=30), Dict([], [], lineno=3469, col_offset=40)]), [Expr(Str('Construct a labelframe widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            borderwidth, cursor, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, padx, pady, relief,\n            takefocus, text\n\n        WIDGET-SPECIFIC OPTIONS\n\n            background, class, colormap, container,\n            height, labelanchor, labelwidget,\n            visual, width\n        ', lineno=3484, col_offset=-1), lineno=3484, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=3485, col_offset=8), '__init__', Load(), lineno=3485, col_offset=8), [Name('self', Load(), lineno=3485, col_offset=24), Name('master', Load(), lineno=3485, col_offset=30), Str('labelframe', lineno=3485, col_offset=38), Name('cnf', Load(), lineno=3485, col_offset=52), Name('kw', Load(), lineno=3485, col_offset=57)], [], None, None, lineno=3485, col_offset=8), lineno=3485, col_offset=8)], [], lineno=3469, col_offset=4)], [], lineno=3467, col_offset=0), ClassDef('PanedWindow', [Name('Widget', Load(), lineno=3489, col_offset=18)], [Expr(Str('panedwindow widget.', lineno=3490, col_offset=4), lineno=3490, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=3491, col_offset=17), Name('master', Param(), lineno=3491, col_offset=23), Name('cnf', Param(), lineno=3491, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=3491, col_offset=30), Dict([], [], lineno=3491, col_offset=40)]), [Expr(Str('Construct a panedwindow widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor, height,\n            orient, relief, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            handlepad, handlesize, opaqueresize,\n            sashcursor, sashpad, sashrelief,\n            sashwidth, showhandle,\n        ', lineno=3504, col_offset=-1), lineno=3504, col_offset=-1), Expr(Call(Attribute(Name('Widget', Load(), lineno=3505, col_offset=8), '__init__', Load(), lineno=3505, col_offset=8), [Name('self', Load(), lineno=3505, col_offset=24), Name('master', Load(), lineno=3505, col_offset=30), Str('panedwindow', lineno=3505, col_offset=38), Name('cnf', Load(), lineno=3505, col_offset=53), Name('kw', Load(), lineno=3505, col_offset=58)], [], None, None, lineno=3505, col_offset=8), lineno=3505, col_offset=8)], [], lineno=3491, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=3507, col_offset=12), Name('child', Param(), lineno=3507, col_offset=18)], None, 'kw', []), [Expr(Str('Add a child widget to the panedwindow in a new pane.\n\n        The child argument is the name of the child widget\n        followed by pairs of arguments that specify how to\n        manage the windows. The possible options and values\n        are the ones accepted by the paneconfigure method.\n        ', lineno=3514, col_offset=-1), lineno=3514, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3515, col_offset=8), 'tk', Load(), lineno=3515, col_offset=8), 'call', Load(), lineno=3515, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3515, col_offset=22), '_w', Load(), lineno=3515, col_offset=22), Str('add', lineno=3515, col_offset=31), Name('child', Load(), lineno=3515, col_offset=38)], Load(), lineno=3515, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=3515, col_offset=47), '_options', Load(), lineno=3515, col_offset=47), [Name('kw', Load(), lineno=3515, col_offset=61)], [], None, None, lineno=3515, col_offset=47), lineno=3515, col_offset=21)], [], None, None, lineno=3515, col_offset=8), lineno=3515, col_offset=8)], [], lineno=3507, col_offset=4), FunctionDef('remove', arguments([Name('self', Param(), lineno=3517, col_offset=15), Name('child', Param(), lineno=3517, col_offset=21)], None, None, []), [Expr(Str('Remove the pane containing child from the panedwindow\n\n        All geometry management options for child will be forgotten.\n        ', lineno=3521, col_offset=-1), lineno=3521, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3522, col_offset=8), 'tk', Load(), lineno=3522, col_offset=8), 'call', Load(), lineno=3522, col_offset=8), [Attribute(Name('self', Load(), lineno=3522, col_offset=21), '_w', Load(), lineno=3522, col_offset=21), Str('forget', lineno=3522, col_offset=30), Name('child', Load(), lineno=3522, col_offset=40)], [], None, None, lineno=3522, col_offset=8), lineno=3522, col_offset=8)], [], lineno=3517, col_offset=4), Assign([Name('forget', Store(), lineno=3523, col_offset=4)], Name('remove', Load(), lineno=3523, col_offset=11), lineno=3523, col_offset=4), FunctionDef('identify', arguments([Name('self', Param(), lineno=3525, col_offset=17), Name('x', Param(), lineno=3525, col_offset=23), Name('y', Param(), lineno=3525, col_offset=26)], None, None, []), [Expr(Str('Identify the panedwindow component at point x, y\n\n        If the point is over a sash or a sash handle, the result\n        is a two element list containing the index of the sash or\n        handle, and a word indicating whether it is over a sash\n        or a handle, such as {0 sash} or {2 handle}. If the point\n        is over any other part of the panedwindow, the result is\n        an empty list.\n        ', lineno=3534, col_offset=-1), lineno=3534, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3535, col_offset=15), 'tk', Load(), lineno=3535, col_offset=15), 'call', Load(), lineno=3535, col_offset=15), [Attribute(Name('self', Load(), lineno=3535, col_offset=28), '_w', Load(), lineno=3535, col_offset=28), Str('identify', lineno=3535, col_offset=37), Name('x', Load(), lineno=3535, col_offset=49), Name('y', Load(), lineno=3535, col_offset=52)], [], None, None, lineno=3535, col_offset=15), lineno=3535, col_offset=8)], [], lineno=3525, col_offset=4), FunctionDef('proxy', arguments([Name('self', Param(), lineno=3537, col_offset=14)], 'args', None, []), [Expr(Str('Internal function.', lineno=3538, col_offset=8), lineno=3538, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=3539, col_offset=15), '_getints', Load(), lineno=3539, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3540, col_offset=12), 'tk', Load(), lineno=3540, col_offset=12), 'call', Load(), lineno=3540, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3540, col_offset=26), '_w', Load(), lineno=3540, col_offset=26), Str('proxy', lineno=3540, col_offset=35)], Load(), lineno=3540, col_offset=26), Add(), Name('args', Load(), lineno=3540, col_offset=46), lineno=3540, col_offset=25)], [], None, None, lineno=3540, col_offset=12)], [], None, None, lineno=3539, col_offset=15), Tuple([], Load(), lineno=3540, col_offset=56)], lineno=3539, col_offset=15), lineno=3539, col_offset=8)], [], lineno=3537, col_offset=4), FunctionDef('proxy_coord', arguments([Name('self', Param(), lineno=3542, col_offset=20)], None, None, []), [Expr(Str('Return the x and y pair of the most recent proxy location\n        ', lineno=3544, col_offset=-1), lineno=3544, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3545, col_offset=15), 'proxy', Load(), lineno=3545, col_offset=15), [Str('coord', lineno=3545, col_offset=26)], [], None, None, lineno=3545, col_offset=15), lineno=3545, col_offset=8)], [], lineno=3542, col_offset=4), FunctionDef('proxy_forget', arguments([Name('self', Param(), lineno=3547, col_offset=21)], None, None, []), [Expr(Str('Remove the proxy from the display.\n        ', lineno=3549, col_offset=-1), lineno=3549, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3550, col_offset=15), 'proxy', Load(), lineno=3550, col_offset=15), [Str('forget', lineno=3550, col_offset=26)], [], None, None, lineno=3550, col_offset=15), lineno=3550, col_offset=8)], [], lineno=3547, col_offset=4), FunctionDef('proxy_place', arguments([Name('self', Param(), lineno=3552, col_offset=20), Name('x', Param(), lineno=3552, col_offset=26), Name('y', Param(), lineno=3552, col_offset=29)], None, None, []), [Expr(Str('Place the proxy at the given x and y coordinates.\n        ', lineno=3554, col_offset=-1), lineno=3554, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3555, col_offset=15), 'proxy', Load(), lineno=3555, col_offset=15), [Str('place', lineno=3555, col_offset=26), Name('x', Load(), lineno=3555, col_offset=35), Name('y', Load(), lineno=3555, col_offset=38)], [], None, None, lineno=3555, col_offset=15), lineno=3555, col_offset=8)], [], lineno=3552, col_offset=4), FunctionDef('sash', arguments([Name('self', Param(), lineno=3557, col_offset=13)], 'args', None, []), [Expr(Str('Internal function.', lineno=3558, col_offset=8), lineno=3558, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=3559, col_offset=15), '_getints', Load(), lineno=3559, col_offset=15), [Call(Attribute(Attribute(Name('self', Load(), lineno=3560, col_offset=12), 'tk', Load(), lineno=3560, col_offset=12), 'call', Load(), lineno=3560, col_offset=12), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3560, col_offset=26), '_w', Load(), lineno=3560, col_offset=26), Str('sash', lineno=3560, col_offset=35)], Load(), lineno=3560, col_offset=26), Add(), Name('args', Load(), lineno=3560, col_offset=45), lineno=3560, col_offset=25)], [], None, None, lineno=3560, col_offset=12)], [], None, None, lineno=3559, col_offset=15), Tuple([], Load(), lineno=3560, col_offset=55)], lineno=3559, col_offset=15), lineno=3559, col_offset=8)], [], lineno=3557, col_offset=4), FunctionDef('sash_coord', arguments([Name('self', Param(), lineno=3562, col_offset=19), Name('index', Param(), lineno=3562, col_offset=25)], None, None, []), [Expr(Str('Return the current x and y pair for the sash given by index.\n\n        Index must be an integer between 0 and 1 less than the\n        number of panes in the panedwindow. The coordinates given are\n        those of the top left corner of the region containing the sash.\n        pathName sash dragto index x y This command computes the\n        difference between the given coordinates and the coordinates\n        given to the last sash coord command for the given sash. It then\n        moves that sash the computed difference. The return value is the\n        empty string.\n        ', lineno=3573, col_offset=-1), lineno=3573, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3574, col_offset=15), 'sash', Load(), lineno=3574, col_offset=15), [Str('coord', lineno=3574, col_offset=25), Name('index', Load(), lineno=3574, col_offset=34)], [], None, None, lineno=3574, col_offset=15), lineno=3574, col_offset=8)], [], lineno=3562, col_offset=4), FunctionDef('sash_mark', arguments([Name('self', Param(), lineno=3576, col_offset=18), Name('index', Param(), lineno=3576, col_offset=24)], None, None, []), [Expr(Str('Records x and y for the sash given by index;\n\n        Used in conjunction with later dragto commands to move the sash.\n        ', lineno=3580, col_offset=-1), lineno=3580, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3581, col_offset=15), 'sash', Load(), lineno=3581, col_offset=15), [Str('mark', lineno=3581, col_offset=25), Name('index', Load(), lineno=3581, col_offset=33)], [], None, None, lineno=3581, col_offset=15), lineno=3581, col_offset=8)], [], lineno=3576, col_offset=4), FunctionDef('sash_place', arguments([Name('self', Param(), lineno=3583, col_offset=19), Name('index', Param(), lineno=3583, col_offset=25), Name('x', Param(), lineno=3583, col_offset=32), Name('y', Param(), lineno=3583, col_offset=35)], None, None, []), [Expr(Str('Place the sash given by index at the given coordinates\n        ', lineno=3585, col_offset=-1), lineno=3585, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=3586, col_offset=15), 'sash', Load(), lineno=3586, col_offset=15), [Str('place', lineno=3586, col_offset=25), Name('index', Load(), lineno=3586, col_offset=34), Name('x', Load(), lineno=3586, col_offset=41), Name('y', Load(), lineno=3586, col_offset=44)], [], None, None, lineno=3586, col_offset=15), lineno=3586, col_offset=8)], [], lineno=3583, col_offset=4), FunctionDef('panecget', arguments([Name('self', Param(), lineno=3588, col_offset=17), Name('child', Param(), lineno=3588, col_offset=23), Name('option', Param(), lineno=3588, col_offset=30)], None, None, []), [Expr(Str('Query a management option for window.\n\n        Option may be any value allowed by the paneconfigure subcommand\n        ', lineno=3592, col_offset=-1), lineno=3592, col_offset=-1), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3593, col_offset=15), 'tk', Load(), lineno=3593, col_offset=15), 'call', Load(), lineno=3593, col_offset=15), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3594, col_offset=13), '_w', Load(), lineno=3594, col_offset=13), Str('panecget', lineno=3594, col_offset=22)], Load(), lineno=3594, col_offset=13), Add(), Tuple([Name('child', Load(), lineno=3594, col_offset=37), BinOp(Str('-', lineno=3594, col_offset=44), Add(), Name('option', Load(), lineno=3594, col_offset=48), lineno=3594, col_offset=44)], Load(), lineno=3594, col_offset=37), lineno=3594, col_offset=12)], [], None, None, lineno=3593, col_offset=15), lineno=3593, col_offset=8)], [], lineno=3588, col_offset=4), FunctionDef('paneconfigure', arguments([Name('self', Param(), lineno=3596, col_offset=22), Name('tagOrId', Param(), lineno=3596, col_offset=28), Name('cnf', Param(), lineno=3596, col_offset=37)], None, 'kw', [Name('None', Load(), lineno=3596, col_offset=41)]), [Expr(Str('Query or modify the management options for window.\n\n        If no option is specified, returns a list describing all\n        of the available options for pathName.  If option is\n        specified with no value, then the command returns a list\n        describing the one named option (this list will be identical\n        to the corresponding sublist of the value returned if no\n        option is specified). If one or more option-value pairs are\n        specified, then the command modifies the given widget\n        option(s) to have the given value(s); in this case the\n        command returns an empty string. The following options\n        are supported:\n\n        after window\n            Insert the window after the window specified. window\n            should be the name of a window already managed by pathName.\n        before window\n            Insert the window before the window specified. window\n            should be the name of a window already managed by pathName.\n        height size\n            Specify a height for the window. The height will be the\n            outer dimension of the window including its border, if\n            any. If size is an empty string, or if -height is not\n            specified, then the height requested internally by the\n            window will be used initially; the height may later be\n            adjusted by the movement of sashes in the panedwindow.\n            Size may be any value accepted by Tk_GetPixels.\n        minsize n\n            Specifies that the size of the window cannot be made\n            less than n. This constraint only affects the size of\n            the widget in the paned dimension -- the x dimension\n            for horizontal panedwindows, the y dimension for\n            vertical panedwindows. May be any value accepted by\n            Tk_GetPixels.\n        padx n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the X-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        pady n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the Y-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        sticky style\n            If a window\'s pane is larger than the requested\n            dimensions of the window, this option may be used\n            to position (or stretch) the window within its pane.\n            Style is a string that contains zero or more of the\n            characters n, s, e or w. The string can optionally\n            contains spaces or commas, but they are ignored. Each\n            letter refers to a side (north, south, east, or west)\n            that the window will "stick" to. If both n and s\n            (or e and w) are specified, the window will be\n            stretched to fill the entire height (or width) of\n            its cavity.\n        width size\n            Specify a width for the window. The width will be\n            the outer dimension of the window including its\n            border, if any. If size is an empty string, or\n            if -width is not specified, then the width requested\n            internally by the window will be used initially; the\n            width may later be adjusted by the movement of sashes\n            in the panedwindow. Size may be any value accepted by\n            Tk_GetPixels.\n\n        ', lineno=3663, col_offset=-1), lineno=3663, col_offset=-1), If(BoolOp(And(), [Compare(Name('cnf', Load(), lineno=3664, col_offset=11), [Is()], [Name('None', Load(), lineno=3664, col_offset=18)], lineno=3664, col_offset=11), UnaryOp(Not(), Name('kw', Load(), lineno=3664, col_offset=31), lineno=3664, col_offset=27)], lineno=3664, col_offset=11), [Assign([Name('cnf', Store(), lineno=3665, col_offset=12)], Dict([], [], lineno=3665, col_offset=18), lineno=3665, col_offset=12), For(Name('x', Store(), lineno=3666, col_offset=16), Call(Attribute(Attribute(Name('self', Load(), lineno=3666, col_offset=21), 'tk', Load(), lineno=3666, col_offset=21), 'split', Load(), lineno=3666, col_offset=21), [Call(Attribute(Attribute(Name('self', Load(), lineno=3667, col_offset=16), 'tk', Load(), lineno=3667, col_offset=16), 'call', Load(), lineno=3667, col_offset=16), [Attribute(Name('self', Load(), lineno=3667, col_offset=29), '_w', Load(), lineno=3667, col_offset=29), Str('paneconfigure', lineno=3668, col_offset=25), Name('tagOrId', Load(), lineno=3668, col_offset=42)], [], None, None, lineno=3667, col_offset=16)], [], None, None, lineno=3666, col_offset=21), [Assign([Subscript(Name('cnf', Load(), lineno=3669, col_offset=16), Index(Subscript(Subscript(Name('x', Load(), lineno=3669, col_offset=20), Index(Num(0, lineno=3669, col_offset=22)), Load(), lineno=3669, col_offset=20), Slice(Num(1, lineno=3669, col_offset=25), None, None), Load(), lineno=3669, col_offset=20)), Store(), lineno=3669, col_offset=16)], BinOp(Tuple([Subscript(Subscript(Name('x', Load(), lineno=3669, col_offset=33), Index(Num(0, lineno=3669, col_offset=35)), Load(), lineno=3669, col_offset=33), Slice(Num(1, lineno=3669, col_offset=38), None, None), Load(), lineno=3669, col_offset=33)], Load(), lineno=3669, col_offset=33), Add(), Subscript(Name('x', Load(), lineno=3669, col_offset=46), Slice(Num(1, lineno=3669, col_offset=48), None, None), Load(), lineno=3669, col_offset=46), lineno=3669, col_offset=32), lineno=3669, col_offset=16)], [], lineno=3666, col_offset=12), Return(Name('cnf', Load(), lineno=3670, col_offset=19), lineno=3670, col_offset=12)], [], lineno=3664, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('type', Load(), lineno=3671, col_offset=11), [Name('cnf', Load(), lineno=3671, col_offset=16)], [], None, None, lineno=3671, col_offset=11), [Eq()], [Name('StringType', Load(), lineno=3671, col_offset=24)], lineno=3671, col_offset=11), UnaryOp(Not(), Name('kw', Load(), lineno=3671, col_offset=43), lineno=3671, col_offset=39)], lineno=3671, col_offset=11), [Assign([Name('x', Store(), lineno=3672, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=3672, col_offset=16), 'tk', Load(), lineno=3672, col_offset=16), 'split', Load(), lineno=3672, col_offset=16), [Call(Attribute(Attribute(Name('self', Load(), lineno=3672, col_offset=30), 'tk', Load(), lineno=3672, col_offset=30), 'call', Load(), lineno=3672, col_offset=30), [Attribute(Name('self', Load(), lineno=3673, col_offset=16), '_w', Load(), lineno=3673, col_offset=16), Str('paneconfigure', lineno=3673, col_offset=25), Name('tagOrId', Load(), lineno=3673, col_offset=42), BinOp(Str('-', lineno=3673, col_offset=51), Add(), Name('cnf', Load(), lineno=3673, col_offset=55), lineno=3673, col_offset=51)], [], None, None, lineno=3672, col_offset=30)], [], None, None, lineno=3672, col_offset=16), lineno=3672, col_offset=12), Return(BinOp(Tuple([Subscript(Subscript(Name('x', Load(), lineno=3674, col_offset=20), Index(Num(0, lineno=3674, col_offset=22)), Load(), lineno=3674, col_offset=20), Slice(Num(1, lineno=3674, col_offset=25), None, None), Load(), lineno=3674, col_offset=20)], Load(), lineno=3674, col_offset=20), Add(), Subscript(Name('x', Load(), lineno=3674, col_offset=33), Slice(Num(1, lineno=3674, col_offset=35), None, None), Load(), lineno=3674, col_offset=33), lineno=3674, col_offset=19), lineno=3674, col_offset=12)], [], lineno=3671, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=3675, col_offset=8), 'tk', Load(), lineno=3675, col_offset=8), 'call', Load(), lineno=3675, col_offset=8), [BinOp(Tuple([Attribute(Name('self', Load(), lineno=3675, col_offset=22), '_w', Load(), lineno=3675, col_offset=22), Str('paneconfigure', lineno=3675, col_offset=31), Name('tagOrId', Load(), lineno=3675, col_offset=48)], Load(), lineno=3675, col_offset=22), Add(), Call(Attribute(Name('self', Load(), lineno=3676, col_offset=17), '_options', Load(), lineno=3676, col_offset=17), [Name('cnf', Load(), lineno=3676, col_offset=31), Name('kw', Load(), lineno=3676, col_offset=36)], [], None, None, lineno=3676, col_offset=17), lineno=3675, col_offset=21)], [], None, None, lineno=3675, col_offset=8), lineno=3675, col_offset=8)], [], lineno=3596, col_offset=4), Assign([Name('paneconfig', Store(), lineno=3677, col_offset=4)], Name('paneconfigure', Load(), lineno=3677, col_offset=17), lineno=3677, col_offset=4), FunctionDef('panes', arguments([Name('self', Param(), lineno=3679, col_offset=14)], None, None, []), [Expr(Str('Returns an ordered list of the child panes.', lineno=3680, col_offset=8), lineno=3680, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=3681, col_offset=15), 'tk', Load(), lineno=3681, col_offset=15), 'call', Load(), lineno=3681, col_offset=15), [Attribute(Name('self', Load(), lineno=3681, col_offset=28), '_w', Load(), lineno=3681, col_offset=28), Str('panes', lineno=3681, col_offset=37)], [], None, None, lineno=3681, col_offset=15), lineno=3681, col_offset=8)], [], lineno=3679, col_offset=4)], [], lineno=3489, col_offset=0), ClassDef('Studbutton', [Name('Button', Load(), lineno=3686, col_offset=17)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=3687, col_offset=17), Name('master', Param(), lineno=3687, col_offset=23), Name('cnf', Param(), lineno=3687, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=3687, col_offset=30), Dict([], [], lineno=3687, col_offset=40)]), [Expr(Call(Attribute(Name('Widget', Load(), lineno=3688, col_offset=8), '__init__', Load(), lineno=3688, col_offset=8), [Name('self', Load(), lineno=3688, col_offset=24), Name('master', Load(), lineno=3688, col_offset=30), Str('studbutton', lineno=3688, col_offset=38), Name('cnf', Load(), lineno=3688, col_offset=52), Name('kw', Load(), lineno=3688, col_offset=57)], [], None, None, lineno=3688, col_offset=8), lineno=3688, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3689, col_offset=8), 'bind', Load(), lineno=3689, col_offset=8), [Str('<Any-Enter>', lineno=3689, col_offset=18), Attribute(Name('self', Load(), lineno=3689, col_offset=39), 'tkButtonEnter', Load(), lineno=3689, col_offset=39)], [], None, None, lineno=3689, col_offset=8), lineno=3689, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3690, col_offset=8), 'bind', Load(), lineno=3690, col_offset=8), [Str('<Any-Leave>', lineno=3690, col_offset=18), Attribute(Name('self', Load(), lineno=3690, col_offset=39), 'tkButtonLeave', Load(), lineno=3690, col_offset=39)], [], None, None, lineno=3690, col_offset=8), lineno=3690, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3691, col_offset=8), 'bind', Load(), lineno=3691, col_offset=8), [Str('<1>', lineno=3691, col_offset=18), Attribute(Name('self', Load(), lineno=3691, col_offset=39), 'tkButtonDown', Load(), lineno=3691, col_offset=39)], [], None, None, lineno=3691, col_offset=8), lineno=3691, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3692, col_offset=8), 'bind', Load(), lineno=3692, col_offset=8), [Str('<ButtonRelease-1>', lineno=3692, col_offset=18), Attribute(Name('self', Load(), lineno=3692, col_offset=39), 'tkButtonUp', Load(), lineno=3692, col_offset=39)], [], None, None, lineno=3692, col_offset=8), lineno=3692, col_offset=8)], [], lineno=3687, col_offset=4)], [], lineno=3686, col_offset=0), ClassDef('Tributton', [Name('Button', Load(), lineno=3694, col_offset=16)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=3695, col_offset=17), Name('master', Param(), lineno=3695, col_offset=23), Name('cnf', Param(), lineno=3695, col_offset=36)], None, 'kw', [Name('None', Load(), lineno=3695, col_offset=30), Dict([], [], lineno=3695, col_offset=40)]), [Expr(Call(Attribute(Name('Widget', Load(), lineno=3696, col_offset=8), '__init__', Load(), lineno=3696, col_offset=8), [Name('self', Load(), lineno=3696, col_offset=24), Name('master', Load(), lineno=3696, col_offset=30), Str('tributton', lineno=3696, col_offset=38), Name('cnf', Load(), lineno=3696, col_offset=51), Name('kw', Load(), lineno=3696, col_offset=56)], [], None, None, lineno=3696, col_offset=8), lineno=3696, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3697, col_offset=8), 'bind', Load(), lineno=3697, col_offset=8), [Str('<Any-Enter>', lineno=3697, col_offset=18), Attribute(Name('self', Load(), lineno=3697, col_offset=39), 'tkButtonEnter', Load(), lineno=3697, col_offset=39)], [], None, None, lineno=3697, col_offset=8), lineno=3697, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3698, col_offset=8), 'bind', Load(), lineno=3698, col_offset=8), [Str('<Any-Leave>', lineno=3698, col_offset=18), Attribute(Name('self', Load(), lineno=3698, col_offset=39), 'tkButtonLeave', Load(), lineno=3698, col_offset=39)], [], None, None, lineno=3698, col_offset=8), lineno=3698, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3699, col_offset=8), 'bind', Load(), lineno=3699, col_offset=8), [Str('<1>', lineno=3699, col_offset=18), Attribute(Name('self', Load(), lineno=3699, col_offset=39), 'tkButtonDown', Load(), lineno=3699, col_offset=39)], [], None, None, lineno=3699, col_offset=8), lineno=3699, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=3700, col_offset=8), 'bind', Load(), lineno=3700, col_offset=8), [Str('<ButtonRelease-1>', lineno=3700, col_offset=18), Attribute(Name('self', Load(), lineno=3700, col_offset=39), 'tkButtonUp', Load(), lineno=3700, col_offset=39)], [], None, None, lineno=3700, col_offset=8), lineno=3700, col_offset=8), Assign([Subscript(Name('self', Load(), lineno=3701, col_offset=8), Index(Str('fg', lineno=3701, col_offset=13)), Store(), lineno=3701, col_offset=8)], Subscript(Name('self', Load(), lineno=3701, col_offset=35), Index(Str('bg', lineno=3701, col_offset=40)), Load(), lineno=3701, col_offset=35), lineno=3701, col_offset=8), Assign([Subscript(Name('self', Load(), lineno=3702, col_offset=8), Index(Str('activebackground', lineno=3702, col_offset=13)), Store(), lineno=3702, col_offset=8)], Subscript(Name('self', Load(), lineno=3702, col_offset=35), Index(Str('bg', lineno=3702, col_offset=40)), Load(), lineno=3702, col_offset=35), lineno=3702, col_offset=8)], [], lineno=3695, col_offset=4)], [], lineno=3694, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Assign([Name('root', Store(), lineno=3708, col_offset=4)], Call(Name('Tk', Load(), lineno=3708, col_offset=11), [], [], None, None, lineno=3708, col_offset=11), lineno=3708, col_offset=4), Assign([Name('text', Store(), lineno=3709, col_offset=4)], BinOp(Str('This is Tcl/Tk version %s', lineno=3709, col_offset=11), Mod(), Name('TclVersion', Load(), lineno=3709, col_offset=41), lineno=3709, col_offset=11), lineno=3709, col_offset=4), If(Compare(Name('TclVersion', Load(), lineno=3710, col_offset=7), [GtE()], [Num(8.1, lineno=3710, col_offset=21)], lineno=3710, col_offset=7), [TryExcept([Assign([Name('text', Store(), lineno=3712, col_offset=12)], BinOp(Name('text', Load(), lineno=3712, col_offset=19), Add(), Call(Name('unicode', Load(), lineno=3712, col_offset=26), [Str('\nThis should be a cedilla: \xe7', lineno=3712, col_offset=34), Str('iso-8859-1', lineno=3713, col_offset=34)], [], None, None, lineno=3712, col_offset=26), lineno=3712, col_offset=19), lineno=3712, col_offset=12)], [ExceptHandler(Name('NameError', Load(), lineno=3714, col_offset=15), None, [Pass( lineno=3715, col_offset=12)], lineno=3714, col_offset=8)], [], lineno=3711, col_offset=8)], [], lineno=3710, col_offset=4), Assign([Name('label', Store(), lineno=3716, col_offset=4)], Call(Name('Label', Load(), lineno=3716, col_offset=12), [Name('root', Load(), lineno=3716, col_offset=18)], [keyword('text', Name('text', Load(), lineno=3716, col_offset=29))], None, None, lineno=3716, col_offset=12), lineno=3716, col_offset=4), Expr(Call(Attribute(Name('label', Load(), lineno=3717, col_offset=4), 'pack', Load(), lineno=3717, col_offset=4), [], [], None, None, lineno=3717, col_offset=4), lineno=3717, col_offset=4), Assign([Name('test', Store(), lineno=3718, col_offset=4)], Call(Name('Button', Load(), lineno=3718, col_offset=11), [Name('root', Load(), lineno=3718, col_offset=18)], [keyword('text', Str('Click me!', lineno=3718, col_offset=29)), keyword('command', Lambda(arguments([Name('root', Param(), lineno=3719, col_offset=29)], None, None, [Name('root', Load(), lineno=3719, col_offset=34)]), Call(Attribute(Attribute(Name('root', Load(), lineno=3719, col_offset=40), 'test', Load(), lineno=3719, col_offset=40), 'configure', Load(), lineno=3719, col_offset=40), [], [keyword('text', BinOp(Str('[%s]', lineno=3720, col_offset=23), Mod(), Subscript(Attribute(Name('root', Load(), lineno=3720, col_offset=32), 'test', Load(), lineno=3720, col_offset=32), Index(Str('text', lineno=3720, col_offset=42)), Load(), lineno=3720, col_offset=32), lineno=3720, col_offset=23))], None, None, lineno=3719, col_offset=40), lineno=3719, col_offset=22))], None, None, lineno=3718, col_offset=11), lineno=3718, col_offset=4), Expr(Call(Attribute(Name('test', Load(), lineno=3721, col_offset=4), 'pack', Load(), lineno=3721, col_offset=4), [], [], None, None, lineno=3721, col_offset=4), lineno=3721, col_offset=4), Assign([Attribute(Name('root', Load(), lineno=3722, col_offset=4), 'test', Store(), lineno=3722, col_offset=4)], Name('test', Load(), lineno=3722, col_offset=16), lineno=3722, col_offset=4), Assign([Name('quit', Store(), lineno=3723, col_offset=4)], Call(Name('Button', Load(), lineno=3723, col_offset=11), [Name('root', Load(), lineno=3723, col_offset=18)], [keyword('text', Str('QUIT', lineno=3723, col_offset=29)), keyword('command', Attribute(Name('root', Load(), lineno=3723, col_offset=45), 'destroy', Load(), lineno=3723, col_offset=45))], None, None, lineno=3723, col_offset=11), lineno=3723, col_offset=4), Expr(Call(Attribute(Name('quit', Load(), lineno=3724, col_offset=4), 'pack', Load(), lineno=3724, col_offset=4), [], [], None, None, lineno=3724, col_offset=4), lineno=3724, col_offset=4), Expr(Call(Attribute(Name('root', Load(), lineno=3727, col_offset=4), 'iconify', Load(), lineno=3727, col_offset=4), [], [], None, None, lineno=3727, col_offset=4), lineno=3727, col_offset=4), Expr(Call(Attribute(Name('root', Load(), lineno=3728, col_offset=4), 'update', Load(), lineno=3728, col_offset=4), [], [], None, None, lineno=3728, col_offset=4), lineno=3728, col_offset=4), Expr(Call(Attribute(Name('root', Load(), lineno=3729, col_offset=4), 'deiconify', Load(), lineno=3729, col_offset=4), [], [], None, None, lineno=3729, col_offset=4), lineno=3729, col_offset=4), Expr(Call(Attribute(Name('root', Load(), lineno=3730, col_offset=4), 'mainloop', Load(), lineno=3730, col_offset=4), [], [], None, None, lineno=3730, col_offset=4), lineno=3730, col_offset=4)], [], lineno=3707, col_offset=0), If(Compare(Name('__name__', Load(), lineno=3732, col_offset=3), [Eq()], [Str('__main__', lineno=3732, col_offset=15)], lineno=3732, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=3733, col_offset=4), [], [], None, None, lineno=3733, col_offset=4), lineno=3733, col_offset=4)], [], lineno=3732, col_offset=0)])
