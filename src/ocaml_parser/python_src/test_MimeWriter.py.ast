Module([Expr(Str("Test program for MimeWriter module.\n\nThe test program was too big to comfortably fit in the MimeWriter\nclass, so it's here in its own file.\n\nThis should generate Barry's example, modulo some quotes and newlines.\n\n", lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('unittest', None), alias('StringIO', None)], lineno=10, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('import_module', None)], 0, lineno=11, col_offset=0), Expr(Call(Name('import_module', Load(), lineno=13, col_offset=0), [Str('MimeWriter', lineno=13, col_offset=14)], [keyword('deprecated', Name('True', Load(), lineno=13, col_offset=39))], None, None, lineno=13, col_offset=0), lineno=13, col_offset=0), ImportFrom('MimeWriter', [alias('MimeWriter', None)], 0, lineno=14, col_offset=0), Assign([Name('SELLER', Store(), lineno=16, col_offset=0)], Str('INTERFACE Seller-1;\n\nTYPE Seller = OBJECT\n    DOCUMENTATION "A simple Seller interface to test ILU"\n    METHODS\n            price():INTEGER,\n    END;\n', lineno=24, col_offset=-1), lineno=16, col_offset=0), Assign([Name('BUYER', Store(), lineno=26, col_offset=0)], Str('class Buyer:\n    def __setup__(self, maxprice):\n        self._maxprice = maxprice\n\n    def __main__(self, kos):\n        """Entry point upon arrival at a new KOS."""\n        broker = kos.broker()\n        # B4 == Barry\'s Big Bass Business :-)\n        seller = broker.lookup(\'Seller_1.Seller\', \'B4\')\n        if seller:\n            price = seller.price()\n            print \'Seller wants $\', price, \'... \'\n            if price > self._maxprice:\n                print \'too much!\'\n            else:\n                print "I\'ll take it!"\n        else:\n            print \'no seller found here\'\n', lineno=45, col_offset=-1), lineno=26, col_offset=0), Assign([Name('STATE', Store(), lineno=47, col_offset=0)], Str('# instantiate a buyer instance and put it in a magic place for the KOS\n# to find.\n__kp__ = Buyer()\n__kp__.__setup__(500)\n', lineno=52, col_offset=-1), lineno=47, col_offset=0), Assign([Name('SIMPLE_METADATA', Store(), lineno=54, col_offset=0)], List([Tuple([Str('Interpreter', lineno=55, col_offset=9), Str('python', lineno=55, col_offset=24)], Load(), lineno=55, col_offset=9), Tuple([Str('Interpreter-Version', lineno=56, col_offset=9), Str('1.3', lineno=56, col_offset=32)], Load(), lineno=56, col_offset=9), Tuple([Str('Owner-Name', lineno=57, col_offset=9), Str('Barry Warsaw', lineno=57, col_offset=23)], Load(), lineno=57, col_offset=9), Tuple([Str('Owner-Rendezvous', lineno=58, col_offset=9), Str('bwarsaw@cnri.reston.va.us', lineno=58, col_offset=29)], Load(), lineno=58, col_offset=9), Tuple([Str('Home-KSS', lineno=59, col_offset=9), Str('kss.cnri.reston.va.us', lineno=59, col_offset=21)], Load(), lineno=59, col_offset=9), Tuple([Str('Identifier', lineno=60, col_offset=9), Str('hdl://cnri.kss/my_first_knowbot', lineno=60, col_offset=23)], Load(), lineno=60, col_offset=9), Tuple([Str('Launch-Date', lineno=61, col_offset=9), Str('Mon Feb 12 16:39:03 EST 1996', lineno=61, col_offset=24)], Load(), lineno=61, col_offset=9)], Load(), lineno=54, col_offset=18), lineno=54, col_offset=0), Assign([Name('COMPLEX_METADATA', Store(), lineno=64, col_offset=0)], List([Tuple([Str('Metadata-Type', lineno=65, col_offset=9), Str('complex', lineno=65, col_offset=26)], Load(), lineno=65, col_offset=9), Tuple([Str('Metadata-Key', lineno=66, col_offset=9), Str('connection', lineno=66, col_offset=25)], Load(), lineno=66, col_offset=9), Tuple([Str('Access', lineno=67, col_offset=9), Str('read-only', lineno=67, col_offset=19)], Load(), lineno=67, col_offset=9), Tuple([Str('Connection-Description', lineno=68, col_offset=9), Str("Barry's Big Bass Business", lineno=68, col_offset=35)], Load(), lineno=68, col_offset=9), Tuple([Str('Connection-Id', lineno=69, col_offset=9), Str('B4', lineno=69, col_offset=26)], Load(), lineno=69, col_offset=9), Tuple([Str('Connection-Direction', lineno=70, col_offset=9), Str('client', lineno=70, col_offset=33)], Load(), lineno=70, col_offset=9)], Load(), lineno=64, col_offset=19), lineno=64, col_offset=0), Assign([Name('EXTERNAL_METADATA', Store(), lineno=73, col_offset=0)], List([Tuple([Str('Metadata-Type', lineno=74, col_offset=9), Str('complex', lineno=74, col_offset=26)], Load(), lineno=74, col_offset=9), Tuple([Str('Metadata-Key', lineno=75, col_offset=9), Str('generic-interface', lineno=75, col_offset=25)], Load(), lineno=75, col_offset=9), Tuple([Str('Access', lineno=76, col_offset=9), Str('read-only', lineno=76, col_offset=19)], Load(), lineno=76, col_offset=9), Tuple([Str('Connection-Description', lineno=77, col_offset=9), Str('Generic Interface for All Knowbots', lineno=77, col_offset=35)], Load(), lineno=77, col_offset=9), Tuple([Str('Connection-Id', lineno=78, col_offset=9), Str('generic-kp', lineno=78, col_offset=26)], Load(), lineno=78, col_offset=9), Tuple([Str('Connection-Direction', lineno=79, col_offset=9), Str('client', lineno=79, col_offset=33)], Load(), lineno=79, col_offset=9)], Load(), lineno=73, col_offset=20), lineno=73, col_offset=0), Assign([Name('OUTPUT', Store(), lineno=83, col_offset=0)], Str('From: bwarsaw@cnri.reston.va.us\nDate: Mon Feb 12 17:21:48 EST 1996\nTo: kss-submit@cnri.reston.va.us\nMIME-Version: 1.0\nContent-Type: multipart/knowbot;\n    boundary="801spam999";\n    version="0.1"\n\nThis is a multi-part message in MIME format.\n\n--801spam999\nContent-Type: multipart/knowbot-metadata;\n    boundary="802spam999"\n\n\n--802spam999\nContent-Type: message/rfc822\nKP-Metadata-Type: simple\nKP-Access: read-only\n\nKPMD-Interpreter: python\nKPMD-Interpreter-Version: 1.3\nKPMD-Owner-Name: Barry Warsaw\nKPMD-Owner-Rendezvous: bwarsaw@cnri.reston.va.us\nKPMD-Home-KSS: kss.cnri.reston.va.us\nKPMD-Identifier: hdl://cnri.kss/my_first_knowbot\nKPMD-Launch-Date: Mon Feb 12 16:39:03 EST 1996\n\n--802spam999\nContent-Type: text/isl\nKP-Metadata-Type: complex\nKP-Metadata-Key: connection\nKP-Access: read-only\nKP-Connection-Description: Barry\'s Big Bass Business\nKP-Connection-Id: B4\nKP-Connection-Direction: client\n\nINTERFACE Seller-1;\n\nTYPE Seller = OBJECT\n    DOCUMENTATION "A simple Seller interface to test ILU"\n    METHODS\n            price():INTEGER,\n    END;\n\n--802spam999\nContent-Type: message/external-body;\n    access-type="URL";\n    URL="hdl://cnri.kss/generic-knowbot"\n\nContent-Type: text/isl\nKP-Metadata-Type: complex\nKP-Metadata-Key: generic-interface\nKP-Access: read-only\nKP-Connection-Description: Generic Interface for All Knowbots\nKP-Connection-Id: generic-kp\nKP-Connection-Direction: client\n\n\n--802spam999--\n\n--801spam999\nContent-Type: multipart/knowbot-code;\n    boundary="803spam999"\n\n\n--803spam999\nContent-Type: text/plain\nKP-Module-Name: BuyerKP\n\nclass Buyer:\n    def __setup__(self, maxprice):\n        self._maxprice = maxprice\n\n    def __main__(self, kos):\n        """Entry point upon arrival at a new KOS."""\n        broker = kos.broker()\n        # B4 == Barry\'s Big Bass Business :-)\n        seller = broker.lookup(\'Seller_1.Seller\', \'B4\')\n        if seller:\n            price = seller.price()\n            print \'Seller wants $\', price, \'... \'\n            if price > self._maxprice:\n                print \'too much!\'\n            else:\n                print "I\'ll take it!"\n        else:\n            print \'no seller found here\'\n\n--803spam999--\n\n--801spam999\nContent-Type: multipart/knowbot-state;\n    boundary="804spam999"\nKP-Main-Module: main\n\n\n--804spam999\nContent-Type: text/plain\nKP-Module-Name: main\n\n# instantiate a buyer instance and put it in a magic place for the KOS\n# to find.\n__kp__ = Buyer()\n__kp__.__setup__(500)\n\n--804spam999--\n\n--801spam999--\n', lineno=193, col_offset=-1), lineno=83, col_offset=0), ClassDef('MimewriterTest', [Attribute(Name('unittest', Load(), lineno=195, col_offset=21), 'TestCase', Load(), lineno=195, col_offset=21)], [FunctionDef('test', arguments([Name('self', Param(), lineno=197, col_offset=13)], None, None, []), [Assign([Name('buf', Store(), lineno=198, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=198, col_offset=14), 'StringIO', Load(), lineno=198, col_offset=14), [], [], None, None, lineno=198, col_offset=14), lineno=198, col_offset=8), Assign([Name('toplevel', Store(), lineno=202, col_offset=8)], Call(Name('MimeWriter', Load(), lineno=202, col_offset=19), [Name('buf', Load(), lineno=202, col_offset=30)], [], None, None, lineno=202, col_offset=19), lineno=202, col_offset=8), Expr(Call(Attribute(Name('toplevel', Load(), lineno=203, col_offset=8), 'addheader', Load(), lineno=203, col_offset=8), [Str('From', lineno=203, col_offset=27), Str('bwarsaw@cnri.reston.va.us', lineno=203, col_offset=35)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Expr(Call(Attribute(Name('toplevel', Load(), lineno=204, col_offset=8), 'addheader', Load(), lineno=204, col_offset=8), [Str('Date', lineno=204, col_offset=27), Str('Mon Feb 12 17:21:48 EST 1996', lineno=204, col_offset=35)], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8), Expr(Call(Attribute(Name('toplevel', Load(), lineno=205, col_offset=8), 'addheader', Load(), lineno=205, col_offset=8), [Str('To', lineno=205, col_offset=27), Str('kss-submit@cnri.reston.va.us', lineno=205, col_offset=33)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8), Expr(Call(Attribute(Name('toplevel', Load(), lineno=206, col_offset=8), 'addheader', Load(), lineno=206, col_offset=8), [Str('MIME-Version', lineno=206, col_offset=27), Str('1.0', lineno=206, col_offset=43)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=8), Assign([Name('f', Store(), lineno=210, col_offset=8)], Call(Attribute(Name('toplevel', Load(), lineno=210, col_offset=12), 'startmultipartbody', Load(), lineno=210, col_offset=12), [Str('knowbot', lineno=210, col_offset=40), Str('801spam999', lineno=210, col_offset=51), List([Tuple([Str('version', lineno=211, col_offset=42), Str('0.1', lineno=211, col_offset=53)], Load(), lineno=211, col_offset=42)], Load(), lineno=211, col_offset=40)], [keyword('prefix', Num(0, lineno=211, col_offset=69))], None, None, lineno=210, col_offset=12), lineno=210, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=212, col_offset=8), 'write', Load(), lineno=212, col_offset=8), [Str('This is a multi-part message in MIME format.\n', lineno=212, col_offset=16)], [], None, None, lineno=212, col_offset=8), lineno=212, col_offset=8), Assign([Name('md', Store(), lineno=216, col_offset=8)], Call(Attribute(Name('toplevel', Load(), lineno=216, col_offset=13), 'nextpart', Load(), lineno=216, col_offset=13), [], [], None, None, lineno=216, col_offset=13), lineno=216, col_offset=8), Expr(Call(Attribute(Name('md', Load(), lineno=217, col_offset=8), 'startmultipartbody', Load(), lineno=217, col_offset=8), [Str('knowbot-metadata', lineno=217, col_offset=30), Str('802spam999', lineno=217, col_offset=50)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8), Assign([Name('md1', Store(), lineno=221, col_offset=8)], Call(Attribute(Name('md', Load(), lineno=221, col_offset=14), 'nextpart', Load(), lineno=221, col_offset=14), [], [], None, None, lineno=221, col_offset=14), lineno=221, col_offset=8), Expr(Call(Attribute(Name('md1', Load(), lineno=222, col_offset=8), 'addheader', Load(), lineno=222, col_offset=8), [Str('KP-Metadata-Type', lineno=222, col_offset=22), Str('simple', lineno=222, col_offset=42)], [], None, None, lineno=222, col_offset=8), lineno=222, col_offset=8), Expr(Call(Attribute(Name('md1', Load(), lineno=223, col_offset=8), 'addheader', Load(), lineno=223, col_offset=8), [Str('KP-Access', lineno=223, col_offset=22), Str('read-only', lineno=223, col_offset=35)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Assign([Name('m', Store(), lineno=224, col_offset=8)], Call(Name('MimeWriter', Load(), lineno=224, col_offset=12), [Call(Attribute(Name('md1', Load(), lineno=224, col_offset=23), 'startbody', Load(), lineno=224, col_offset=23), [Str('message/rfc822', lineno=224, col_offset=37)], [], None, None, lineno=224, col_offset=23)], [], None, None, lineno=224, col_offset=12), lineno=224, col_offset=8), For(Tuple([Name('key', Store(), lineno=225, col_offset=12), Name('value', Store(), lineno=225, col_offset=17)], Store(), lineno=225, col_offset=12), Name('SIMPLE_METADATA', Load(), lineno=225, col_offset=26), [Expr(Call(Attribute(Name('m', Load(), lineno=226, col_offset=12), 'addheader', Load(), lineno=226, col_offset=12), [BinOp(Str('KPMD-', lineno=226, col_offset=24), Add(), Name('key', Load(), lineno=226, col_offset=34), lineno=226, col_offset=24), Name('value', Load(), lineno=226, col_offset=39)], [], None, None, lineno=226, col_offset=12), lineno=226, col_offset=12)], [], lineno=225, col_offset=8), Expr(Call(Attribute(Name('m', Load(), lineno=227, col_offset=8), 'flushheaders', Load(), lineno=227, col_offset=8), [], [], None, None, lineno=227, col_offset=8), lineno=227, col_offset=8), Delete([Name('md1', Del(), lineno=228, col_offset=12)], lineno=228, col_offset=8), Assign([Name('md2', Store(), lineno=232, col_offset=8)], Call(Attribute(Name('md', Load(), lineno=232, col_offset=14), 'nextpart', Load(), lineno=232, col_offset=14), [], [], None, None, lineno=232, col_offset=14), lineno=232, col_offset=8), For(Tuple([Name('key', Store(), lineno=233, col_offset=12), Name('value', Store(), lineno=233, col_offset=17)], Store(), lineno=233, col_offset=12), Name('COMPLEX_METADATA', Load(), lineno=233, col_offset=26), [Expr(Call(Attribute(Name('md2', Load(), lineno=234, col_offset=12), 'addheader', Load(), lineno=234, col_offset=12), [BinOp(Str('KP-', lineno=234, col_offset=26), Add(), Name('key', Load(), lineno=234, col_offset=34), lineno=234, col_offset=26), Name('value', Load(), lineno=234, col_offset=39)], [], None, None, lineno=234, col_offset=12), lineno=234, col_offset=12)], [], lineno=233, col_offset=8), Assign([Name('f', Store(), lineno=235, col_offset=8)], Call(Attribute(Name('md2', Load(), lineno=235, col_offset=12), 'startbody', Load(), lineno=235, col_offset=12), [Str('text/isl', lineno=235, col_offset=26)], [], None, None, lineno=235, col_offset=12), lineno=235, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=236, col_offset=8), 'write', Load(), lineno=236, col_offset=8), [Name('SELLER', Load(), lineno=236, col_offset=16)], [], None, None, lineno=236, col_offset=8), lineno=236, col_offset=8), Delete([Name('md2', Del(), lineno=237, col_offset=12)], lineno=237, col_offset=8), Assign([Name('md3', Store(), lineno=241, col_offset=8)], Call(Attribute(Name('md', Load(), lineno=241, col_offset=14), 'nextpart', Load(), lineno=241, col_offset=14), [], [], None, None, lineno=241, col_offset=14), lineno=241, col_offset=8), Assign([Name('f', Store(), lineno=242, col_offset=8)], Call(Attribute(Name('md3', Load(), lineno=242, col_offset=12), 'startbody', Load(), lineno=242, col_offset=12), [Str('message/external-body', lineno=242, col_offset=26), List([Tuple([Str('access-type', lineno=243, col_offset=28), Str('URL', lineno=243, col_offset=43)], Load(), lineno=243, col_offset=28), Tuple([Str('URL', lineno=244, col_offset=28), Str('hdl://cnri.kss/generic-knowbot', lineno=244, col_offset=35)], Load(), lineno=244, col_offset=28)], Load(), lineno=243, col_offset=26)], [], None, None, lineno=242, col_offset=12), lineno=242, col_offset=8), Assign([Name('m', Store(), lineno=245, col_offset=8)], Call(Name('MimeWriter', Load(), lineno=245, col_offset=12), [Name('f', Load(), lineno=245, col_offset=23)], [], None, None, lineno=245, col_offset=12), lineno=245, col_offset=8), For(Tuple([Name('key', Store(), lineno=246, col_offset=12), Name('value', Store(), lineno=246, col_offset=17)], Store(), lineno=246, col_offset=12), Name('EXTERNAL_METADATA', Load(), lineno=246, col_offset=26), [Expr(Call(Attribute(Name('md3', Load(), lineno=247, col_offset=12), 'addheader', Load(), lineno=247, col_offset=12), [BinOp(Str('KP-', lineno=247, col_offset=26), Add(), Name('key', Load(), lineno=247, col_offset=34), lineno=247, col_offset=26), Name('value', Load(), lineno=247, col_offset=39)], [], None, None, lineno=247, col_offset=12), lineno=247, col_offset=12)], [], lineno=246, col_offset=8), Expr(Call(Attribute(Name('md3', Load(), lineno=248, col_offset=8), 'startbody', Load(), lineno=248, col_offset=8), [Str('text/isl', lineno=248, col_offset=22)], [], None, None, lineno=248, col_offset=8), lineno=248, col_offset=8), Expr(Call(Attribute(Name('md', Load(), lineno=251, col_offset=8), 'lastpart', Load(), lineno=251, col_offset=8), [], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8), Assign([Name('code', Store(), lineno=255, col_offset=8)], Call(Attribute(Name('toplevel', Load(), lineno=255, col_offset=15), 'nextpart', Load(), lineno=255, col_offset=15), [], [], None, None, lineno=255, col_offset=15), lineno=255, col_offset=8), Expr(Call(Attribute(Name('code', Load(), lineno=256, col_offset=8), 'startmultipartbody', Load(), lineno=256, col_offset=8), [Str('knowbot-code', lineno=256, col_offset=32), Str('803spam999', lineno=256, col_offset=48)], [], None, None, lineno=256, col_offset=8), lineno=256, col_offset=8), Assign([Name('buyer', Store(), lineno=260, col_offset=8)], Call(Attribute(Name('code', Load(), lineno=260, col_offset=16), 'nextpart', Load(), lineno=260, col_offset=16), [], [], None, None, lineno=260, col_offset=16), lineno=260, col_offset=8), Expr(Call(Attribute(Name('buyer', Load(), lineno=261, col_offset=8), 'addheader', Load(), lineno=261, col_offset=8), [Str('KP-Module-Name', lineno=261, col_offset=24), Str('BuyerKP', lineno=261, col_offset=42)], [], None, None, lineno=261, col_offset=8), lineno=261, col_offset=8), Assign([Name('f', Store(), lineno=262, col_offset=8)], Call(Attribute(Name('buyer', Load(), lineno=262, col_offset=12), 'startbody', Load(), lineno=262, col_offset=12), [Str('text/plain', lineno=262, col_offset=28)], [], None, None, lineno=262, col_offset=12), lineno=262, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=263, col_offset=8), 'write', Load(), lineno=263, col_offset=8), [Name('BUYER', Load(), lineno=263, col_offset=16)], [], None, None, lineno=263, col_offset=8), lineno=263, col_offset=8), Expr(Call(Attribute(Name('code', Load(), lineno=265, col_offset=8), 'lastpart', Load(), lineno=265, col_offset=8), [], [], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8), Assign([Name('state', Store(), lineno=269, col_offset=8)], Call(Attribute(Name('toplevel', Load(), lineno=269, col_offset=16), 'nextpart', Load(), lineno=269, col_offset=16), [], [], None, None, lineno=269, col_offset=16), lineno=269, col_offset=8), Expr(Call(Attribute(Name('state', Load(), lineno=270, col_offset=8), 'addheader', Load(), lineno=270, col_offset=8), [Str('KP-Main-Module', lineno=270, col_offset=24), Str('main', lineno=270, col_offset=42)], [], None, None, lineno=270, col_offset=8), lineno=270, col_offset=8), Expr(Call(Attribute(Name('state', Load(), lineno=271, col_offset=8), 'startmultipartbody', Load(), lineno=271, col_offset=8), [Str('knowbot-state', lineno=271, col_offset=33), Str('804spam999', lineno=271, col_offset=50)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8), Assign([Name('st', Store(), lineno=275, col_offset=8)], Call(Attribute(Name('state', Load(), lineno=275, col_offset=13), 'nextpart', Load(), lineno=275, col_offset=13), [], [], None, None, lineno=275, col_offset=13), lineno=275, col_offset=8), Expr(Call(Attribute(Name('st', Load(), lineno=276, col_offset=8), 'addheader', Load(), lineno=276, col_offset=8), [Str('KP-Module-Name', lineno=276, col_offset=21), Str('main', lineno=276, col_offset=39)], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8), Assign([Name('f', Store(), lineno=277, col_offset=8)], Call(Attribute(Name('st', Load(), lineno=277, col_offset=12), 'startbody', Load(), lineno=277, col_offset=12), [Str('text/plain', lineno=277, col_offset=25)], [], None, None, lineno=277, col_offset=12), lineno=277, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=278, col_offset=8), 'write', Load(), lineno=278, col_offset=8), [Name('STATE', Load(), lineno=278, col_offset=16)], [], None, None, lineno=278, col_offset=8), lineno=278, col_offset=8), Expr(Call(Attribute(Name('state', Load(), lineno=280, col_offset=8), 'lastpart', Load(), lineno=280, col_offset=8), [], [], None, None, lineno=280, col_offset=8), lineno=280, col_offset=8), Expr(Call(Attribute(Name('toplevel', Load(), lineno=284, col_offset=8), 'lastpart', Load(), lineno=284, col_offset=8), [], [], None, None, lineno=284, col_offset=8), lineno=284, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=8), 'assertEqual', Load(), lineno=286, col_offset=8), [Call(Attribute(Name('buf', Load(), lineno=286, col_offset=25), 'getvalue', Load(), lineno=286, col_offset=25), [], [], None, None, lineno=286, col_offset=25), Name('OUTPUT', Load(), lineno=286, col_offset=41)], [], None, None, lineno=286, col_offset=8), lineno=286, col_offset=8)], [], lineno=197, col_offset=4)], [], lineno=195, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=289, col_offset=4), [Name('MimewriterTest', Load(), lineno=289, col_offset=17)], [], None, None, lineno=289, col_offset=4), lineno=289, col_offset=4)], [], lineno=288, col_offset=0), If(Compare(Name('__name__', Load(), lineno=291, col_offset=3), [Eq()], [Str('__main__', lineno=291, col_offset=15)], lineno=291, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=292, col_offset=4), [], [], None, None, lineno=292, col_offset=4), lineno=292, col_offset=4)], [], lineno=291, col_offset=0)])
