Module([Expr(Str('Test case implementation', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('sys', None)], lineno=3, col_offset=0), Import([alias('functools', None)], lineno=4, col_offset=0), Import([alias('difflib', None)], lineno=5, col_offset=0), Import([alias('pprint', None)], lineno=6, col_offset=0), Import([alias('re', None)], lineno=7, col_offset=0), Import([alias('warnings', None)], lineno=8, col_offset=0), ImportFrom(None, [alias('result', None)], 1, lineno=10, col_offset=0), ImportFrom('util', [alias('strclass', None), alias('safe_repr', None), alias('sorted_list_difference', None), alias('unorderable_list_difference', None)], 1, lineno=11, col_offset=0), Assign([Name('__unittest', Store(), lineno=15, col_offset=0)], Name('True', Load(), lineno=15, col_offset=13), lineno=15, col_offset=0), Assign([Name('DIFF_OMITTED', Store(), lineno=18, col_offset=0)], Str('\nDiff is %s characters long. Set self.maxDiff to None to see it.', lineno=18, col_offset=16), lineno=18, col_offset=0), ClassDef('SkipTest', [Name('Exception', Load(), lineno=21, col_offset=15)], [Expr(Str('\n    Raise this exception in a test to skip it.\n\n    Usually you can use TestResult.skip() or one of the skipping decorators\n    instead of raising this directly.\n    ', lineno=27, col_offset=-1), lineno=27, col_offset=-1), Pass( lineno=28, col_offset=4)], [], lineno=21, col_offset=0), ClassDef('_ExpectedFailure', [Name('Exception', Load(), lineno=30, col_offset=23)], [Expr(Str('\n    Raise this when a test is expected to fail.\n\n    This is an implementation detail.\n    ', lineno=35, col_offset=-1), lineno=35, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=37, col_offset=17), Name('exc_info', Param(), lineno=37, col_offset=23)], None, None, []), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=38, col_offset=8), [Name('_ExpectedFailure', Load(), lineno=38, col_offset=14), Name('self', Load(), lineno=38, col_offset=32)], [], None, None, lineno=38, col_offset=8), '__init__', Load(), lineno=38, col_offset=8), [], [], None, None, lineno=38, col_offset=8), lineno=38, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'exc_info', Store(), lineno=39, col_offset=8)], Name('exc_info', Load(), lineno=39, col_offset=24), lineno=39, col_offset=8)], [], lineno=37, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('_UnexpectedSuccess', [Name('Exception', Load(), lineno=41, col_offset=25)], [Expr(Str("\n    The test was supposed to fail, but it didn't!\n    ", lineno=44, col_offset=-1), lineno=44, col_offset=-1), Pass( lineno=45, col_offset=4)], [], lineno=41, col_offset=0), FunctionDef('_id', arguments([Name('obj', Param(), lineno=47, col_offset=8)], None, None, []), [Return(Name('obj', Load(), lineno=48, col_offset=11), lineno=48, col_offset=4)], [], lineno=47, col_offset=0), FunctionDef('skip', arguments([Name('reason', Param(), lineno=50, col_offset=9)], None, None, []), [Expr(Str('\n    Unconditionally skip a test.\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), FunctionDef('decorator', arguments([Name('test_item', Param(), lineno=54, col_offset=18)], None, None, []), [If(UnaryOp(Not(), BoolOp(And(), [Call(Name('isinstance', Load(), lineno=55, col_offset=16), [Name('test_item', Load(), lineno=55, col_offset=27), Name('type', Load(), lineno=55, col_offset=38)], [], None, None, lineno=55, col_offset=16), Call(Name('issubclass', Load(), lineno=55, col_offset=48), [Name('test_item', Load(), lineno=55, col_offset=59), Name('TestCase', Load(), lineno=55, col_offset=70)], [], None, None, lineno=55, col_offset=48)], lineno=55, col_offset=16), lineno=55, col_offset=11), [FunctionDef('skip_wrapper', arguments([], 'args', 'kwargs', []), [Raise(Call(Name('SkipTest', Load(), lineno=58, col_offset=22), [Name('reason', Load(), lineno=58, col_offset=31)], [], None, None, lineno=58, col_offset=22), None, None, lineno=58, col_offset=16)], [Call(Attribute(Name('functools', Load(), lineno=56, col_offset=13), 'wraps', Load(), lineno=56, col_offset=13), [Name('test_item', Load(), lineno=56, col_offset=29)], [], None, None, lineno=56, col_offset=13)], lineno=56, col_offset=12), Assign([Name('test_item', Store(), lineno=59, col_offset=12)], Name('skip_wrapper', Load(), lineno=59, col_offset=24), lineno=59, col_offset=12)], [], lineno=55, col_offset=8), Assign([Attribute(Name('test_item', Load(), lineno=61, col_offset=8), '__unittest_skip__', Store(), lineno=61, col_offset=8)], Name('True', Load(), lineno=61, col_offset=38), lineno=61, col_offset=8), Assign([Attribute(Name('test_item', Load(), lineno=62, col_offset=8), '__unittest_skip_why__', Store(), lineno=62, col_offset=8)], Name('reason', Load(), lineno=62, col_offset=42), lineno=62, col_offset=8), Return(Name('test_item', Load(), lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=54, col_offset=4), Return(Name('decorator', Load(), lineno=64, col_offset=11), lineno=64, col_offset=4)], [], lineno=50, col_offset=0), FunctionDef('skipIf', arguments([Name('condition', Param(), lineno=66, col_offset=11), Name('reason', Param(), lineno=66, col_offset=22)], None, None, []), [Expr(Str('\n    Skip a test if the condition is true.\n    ', lineno=69, col_offset=-1), lineno=69, col_offset=-1), If(Name('condition', Load(), lineno=70, col_offset=7), [Return(Call(Name('skip', Load(), lineno=71, col_offset=15), [Name('reason', Load(), lineno=71, col_offset=20)], [], None, None, lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=70, col_offset=4), Return(Name('_id', Load(), lineno=72, col_offset=11), lineno=72, col_offset=4)], [], lineno=66, col_offset=0), FunctionDef('skipUnless', arguments([Name('condition', Param(), lineno=74, col_offset=15), Name('reason', Param(), lineno=74, col_offset=26)], None, None, []), [Expr(Str('\n    Skip a test unless the condition is true.\n    ', lineno=77, col_offset=-1), lineno=77, col_offset=-1), If(UnaryOp(Not(), Name('condition', Load(), lineno=78, col_offset=11), lineno=78, col_offset=7), [Return(Call(Name('skip', Load(), lineno=79, col_offset=15), [Name('reason', Load(), lineno=79, col_offset=20)], [], None, None, lineno=79, col_offset=15), lineno=79, col_offset=8)], [], lineno=78, col_offset=4), Return(Name('_id', Load(), lineno=80, col_offset=11), lineno=80, col_offset=4)], [], lineno=74, col_offset=0), FunctionDef('expectedFailure', arguments([Name('func', Param(), lineno=83, col_offset=20)], None, None, []), [FunctionDef('wrapper', arguments([], 'args', 'kwargs', []), [TryExcept([Expr(Call(Name('func', Load(), lineno=87, col_offset=12), [], [], Name('args', Load(), lineno=87, col_offset=18), Name('kwargs', Load(), lineno=87, col_offset=26), lineno=87, col_offset=12), lineno=87, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=88, col_offset=15), None, [Raise(Call(Name('_ExpectedFailure', Load(), lineno=89, col_offset=18), [Call(Attribute(Name('sys', Load(), lineno=89, col_offset=35), 'exc_info', Load(), lineno=89, col_offset=35), [], [], None, None, lineno=89, col_offset=35)], [], None, None, lineno=89, col_offset=18), None, None, lineno=89, col_offset=12)], lineno=88, col_offset=8)], [], lineno=86, col_offset=8), Raise(Name('_UnexpectedSuccess', Load(), lineno=90, col_offset=14), None, None, lineno=90, col_offset=8)], [Call(Attribute(Name('functools', Load(), lineno=84, col_offset=5), 'wraps', Load(), lineno=84, col_offset=5), [Name('func', Load(), lineno=84, col_offset=21)], [], None, None, lineno=84, col_offset=5)], lineno=84, col_offset=4), Return(Name('wrapper', Load(), lineno=91, col_offset=11), lineno=91, col_offset=4)], [], lineno=83, col_offset=0), ClassDef('_AssertRaisesContext', [Name('object', Load(), lineno=94, col_offset=27)], [Expr(Str('A context manager used to implement TestCase.assertRaises* methods.', lineno=95, col_offset=4), lineno=95, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=97, col_offset=17), Name('expected', Param(), lineno=97, col_offset=23), Name('test_case', Param(), lineno=97, col_offset=33), Name('expected_regexp', Param(), lineno=97, col_offset=44)], None, None, [Name('None', Load(), lineno=97, col_offset=60)]), [Assign([Attribute(Name('self', Load(), lineno=98, col_offset=8), 'expected', Store(), lineno=98, col_offset=8)], Name('expected', Load(), lineno=98, col_offset=24), lineno=98, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=99, col_offset=8), 'failureException', Store(), lineno=99, col_offset=8)], Attribute(Name('test_case', Load(), lineno=99, col_offset=32), 'failureException', Load(), lineno=99, col_offset=32), lineno=99, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=100, col_offset=8), 'expected_regexp', Store(), lineno=100, col_offset=8)], Name('expected_regexp', Load(), lineno=100, col_offset=31), lineno=100, col_offset=8)], [], lineno=97, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=102, col_offset=18)], None, None, []), [Return(Name('self', Load(), lineno=103, col_offset=15), lineno=103, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=105, col_offset=17), Name('exc_type', Param(), lineno=105, col_offset=23), Name('exc_value', Param(), lineno=105, col_offset=33), Name('tb', Param(), lineno=105, col_offset=44)], None, None, []), [If(Compare(Name('exc_type', Load(), lineno=106, col_offset=11), [Is()], [Name('None', Load(), lineno=106, col_offset=23)], lineno=106, col_offset=11), [TryExcept([Assign([Name('exc_name', Store(), lineno=108, col_offset=16)], Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=27), 'expected', Load(), lineno=108, col_offset=27), '__name__', Load(), lineno=108, col_offset=27), lineno=108, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=109, col_offset=19), None, [Assign([Name('exc_name', Store(), lineno=110, col_offset=16)], Call(Name('str', Load(), lineno=110, col_offset=27), [Attribute(Name('self', Load(), lineno=110, col_offset=31), 'expected', Load(), lineno=110, col_offset=31)], [], None, None, lineno=110, col_offset=27), lineno=110, col_offset=16)], lineno=109, col_offset=12)], [], lineno=107, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=111, col_offset=18), 'failureException', Load(), lineno=111, col_offset=18), [Call(Attribute(Str('{0} not raised', lineno=112, col_offset=16), 'format', Load(), lineno=112, col_offset=16), [Name('exc_name', Load(), lineno=112, col_offset=40)], [], None, None, lineno=112, col_offset=16)], [], None, None, lineno=111, col_offset=18), None, None, lineno=111, col_offset=12)], [], lineno=106, col_offset=8), If(UnaryOp(Not(), Call(Name('issubclass', Load(), lineno=113, col_offset=15), [Name('exc_type', Load(), lineno=113, col_offset=26), Attribute(Name('self', Load(), lineno=113, col_offset=36), 'expected', Load(), lineno=113, col_offset=36)], [], None, None, lineno=113, col_offset=15), lineno=113, col_offset=11), [Return(Name('False', Load(), lineno=115, col_offset=19), lineno=115, col_offset=12)], [], lineno=113, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=116, col_offset=8), 'exception', Store(), lineno=116, col_offset=8)], Name('exc_value', Load(), lineno=116, col_offset=25), lineno=116, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=117, col_offset=11), 'expected_regexp', Load(), lineno=117, col_offset=11), [Is()], [Name('None', Load(), lineno=117, col_offset=35)], lineno=117, col_offset=11), [Return(Name('True', Load(), lineno=118, col_offset=19), lineno=118, col_offset=12)], [], lineno=117, col_offset=8), Assign([Name('expected_regexp', Store(), lineno=120, col_offset=8)], Attribute(Name('self', Load(), lineno=120, col_offset=26), 'expected_regexp', Load(), lineno=120, col_offset=26), lineno=120, col_offset=8), If(Call(Name('isinstance', Load(), lineno=121, col_offset=11), [Name('expected_regexp', Load(), lineno=121, col_offset=22), Name('basestring', Load(), lineno=121, col_offset=39)], [], None, None, lineno=121, col_offset=11), [Assign([Name('expected_regexp', Store(), lineno=122, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=122, col_offset=30), 'compile', Load(), lineno=122, col_offset=30), [Name('expected_regexp', Load(), lineno=122, col_offset=41)], [], None, None, lineno=122, col_offset=30), lineno=122, col_offset=12)], [], lineno=121, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('expected_regexp', Load(), lineno=123, col_offset=15), 'search', Load(), lineno=123, col_offset=15), [Call(Name('str', Load(), lineno=123, col_offset=38), [Name('exc_value', Load(), lineno=123, col_offset=42)], [], None, None, lineno=123, col_offset=38)], [], None, None, lineno=123, col_offset=15), lineno=123, col_offset=11), [Raise(Call(Attribute(Name('self', Load(), lineno=124, col_offset=18), 'failureException', Load(), lineno=124, col_offset=18), [BinOp(Str('"%s" does not match "%s"', lineno=124, col_offset=40), Mod(), Tuple([Attribute(Name('expected_regexp', Load(), lineno=125, col_offset=22), 'pattern', Load(), lineno=125, col_offset=22), Call(Name('str', Load(), lineno=125, col_offset=47), [Name('exc_value', Load(), lineno=125, col_offset=51)], [], None, None, lineno=125, col_offset=47)], Load(), lineno=125, col_offset=22), lineno=124, col_offset=40)], [], None, None, lineno=124, col_offset=18), None, None, lineno=124, col_offset=12)], [], lineno=123, col_offset=8), Return(Name('True', Load(), lineno=126, col_offset=15), lineno=126, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=94, col_offset=0), ClassDef('TestCase', [Name('object', Load(), lineno=129, col_offset=15)], [Expr(Str("A class whose instances are single test cases.\n\n    By default, the test code itself should be placed in a method named\n    'runTest'.\n\n    If the fixture may be used for many test cases, create as\n    many test methods as are needed. When instantiating such a TestCase\n    subclass, specify in the constructor arguments the name of the test method\n    that the instance is to execute.\n\n    Test authors should subclass TestCase for their own tests. Construction\n    and deconstruction of the test's environment ('fixture') can be\n    implemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\n    If it is necessary to override the __init__ method, the base class\n    __init__ method must always be called. It is important that subclasses\n    should not change the signature of their __init__ method, since instances\n    of the classes are instantiated automatically by parts of the framework\n    in order to be run.\n    ", lineno=149, col_offset=-1), lineno=149, col_offset=-1), Assign([Name('failureException', Store(), lineno=155, col_offset=4)], Name('AssertionError', Load(), lineno=155, col_offset=23), lineno=155, col_offset=4), Assign([Name('longMessage', Store(), lineno=161, col_offset=4)], Name('False', Load(), lineno=161, col_offset=18), lineno=161, col_offset=4), Assign([Name('maxDiff', Store(), lineno=167, col_offset=4)], BinOp(Num(80, lineno=167, col_offset=14), Mult(), Num(8, lineno=167, col_offset=17), lineno=167, col_offset=14), lineno=167, col_offset=4), Assign([Name('_classSetupFailed', Store(), lineno=171, col_offset=4)], Name('False', Load(), lineno=171, col_offset=24), lineno=171, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=173, col_offset=17), Name('methodName', Param(), lineno=173, col_offset=23)], None, None, [Str('runTest', lineno=173, col_offset=34)]), [Expr(Str('Create an instance of the class that will use the named test\n           method when executed. Raises a ValueError if the instance does\n           not have a method with the specified name.\n        ', lineno=177, col_offset=-1), lineno=177, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=178, col_offset=8), '_testMethodName', Store(), lineno=178, col_offset=8)], Name('methodName', Load(), lineno=178, col_offset=31), lineno=178, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=179, col_offset=8), '_resultForDoCleanups', Store(), lineno=179, col_offset=8)], Name('None', Load(), lineno=179, col_offset=36), lineno=179, col_offset=8), TryExcept([Assign([Name('testMethod', Store(), lineno=181, col_offset=12)], Call(Name('getattr', Load(), lineno=181, col_offset=25), [Name('self', Load(), lineno=181, col_offset=33), Name('methodName', Load(), lineno=181, col_offset=39)], [], None, None, lineno=181, col_offset=25), lineno=181, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=182, col_offset=15), None, [Raise(Call(Name('ValueError', Load(), lineno=183, col_offset=18), [BinOp(Str('no such test method in %s: %s', lineno=183, col_offset=29), Mod(), Tuple([Attribute(Name('self', Load(), lineno=184, col_offset=19), '__class__', Load(), lineno=184, col_offset=19), Name('methodName', Load(), lineno=184, col_offset=35)], Load(), lineno=184, col_offset=19), lineno=183, col_offset=29)], [], None, None, lineno=183, col_offset=18), None, None, lineno=183, col_offset=12)], lineno=182, col_offset=8)], [], lineno=180, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=185, col_offset=8), '_testMethodDoc', Store(), lineno=185, col_offset=8)], Attribute(Name('testMethod', Load(), lineno=185, col_offset=30), '__doc__', Load(), lineno=185, col_offset=30), lineno=185, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=186, col_offset=8), '_cleanups', Store(), lineno=186, col_offset=8)], List([], Load(), lineno=186, col_offset=25), lineno=186, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=191, col_offset=8), '_type_equality_funcs', Store(), lineno=191, col_offset=8)], Dict([], [], lineno=191, col_offset=36), lineno=191, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=192, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=192, col_offset=8), [Name('dict', Load(), lineno=192, col_offset=33), Attribute(Name('self', Load(), lineno=192, col_offset=39), 'assertDictEqual', Load(), lineno=192, col_offset=39)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=193, col_offset=8), [Name('list', Load(), lineno=193, col_offset=33), Attribute(Name('self', Load(), lineno=193, col_offset=39), 'assertListEqual', Load(), lineno=193, col_offset=39)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=194, col_offset=8), [Name('tuple', Load(), lineno=194, col_offset=33), Attribute(Name('self', Load(), lineno=194, col_offset=40), 'assertTupleEqual', Load(), lineno=194, col_offset=40)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=195, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=195, col_offset=8), [Name('set', Load(), lineno=195, col_offset=33), Attribute(Name('self', Load(), lineno=195, col_offset=38), 'assertSetEqual', Load(), lineno=195, col_offset=38)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=196, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=196, col_offset=8), [Name('frozenset', Load(), lineno=196, col_offset=33), Attribute(Name('self', Load(), lineno=196, col_offset=44), 'assertSetEqual', Load(), lineno=196, col_offset=44)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'addTypeEqualityFunc', Load(), lineno=197, col_offset=8), [Name('unicode', Load(), lineno=197, col_offset=33), Attribute(Name('self', Load(), lineno=197, col_offset=42), 'assertMultiLineEqual', Load(), lineno=197, col_offset=42)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [], lineno=173, col_offset=4), FunctionDef('addTypeEqualityFunc', arguments([Name('self', Param(), lineno=199, col_offset=28), Name('typeobj', Param(), lineno=199, col_offset=34), Name('function', Param(), lineno=199, col_offset=43)], None, None, []), [Expr(Str('Add a type specific assertEqual style function to compare a type.\n\n        This method is for use by TestCase subclasses that need to register\n        their own type equality functions to provide nicer error messages.\n\n        Args:\n            typeobj: The data type to call this function on when both values\n                    are of the same type in assertEqual().\n            function: The callable taking two arguments and an optional\n                    msg= argument that raises self.failureException with a\n                    useful error message when the two arguments are not equal.\n        ', lineno=211, col_offset=-1), lineno=211, col_offset=-1), Assign([Subscript(Attribute(Name('self', Load(), lineno=212, col_offset=8), '_type_equality_funcs', Load(), lineno=212, col_offset=8), Index(Name('typeobj', Load(), lineno=212, col_offset=34)), Store(), lineno=212, col_offset=8)], Name('function', Load(), lineno=212, col_offset=45), lineno=212, col_offset=8)], [], lineno=199, col_offset=4), FunctionDef('addCleanup', arguments([Name('self', Param(), lineno=214, col_offset=19), Name('function', Param(), lineno=214, col_offset=25)], 'args', 'kwargs', []), [Expr(Str('Add a function, with arguments, to be called when the test is\n        completed. Functions added are called on a LIFO basis and are\n        called after tearDown on test failure or success.\n\n        Cleanup items are called even if setUp fails (unlike tearDown).', lineno=219, col_offset=-1), lineno=219, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=220, col_offset=8), '_cleanups', Load(), lineno=220, col_offset=8), 'append', Load(), lineno=220, col_offset=8), [Tuple([Name('function', Load(), lineno=220, col_offset=31), Name('args', Load(), lineno=220, col_offset=41), Name('kwargs', Load(), lineno=220, col_offset=47)], Load(), lineno=220, col_offset=31)], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8)], [], lineno=214, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=222, col_offset=14)], None, None, []), [Expr(Str('Hook method for setting up the test fixture before exercising it.', lineno=223, col_offset=8), lineno=223, col_offset=8), Pass( lineno=224, col_offset=8)], [], lineno=222, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=226, col_offset=17)], None, None, []), [Expr(Str('Hook method for deconstructing the test fixture after testing it.', lineno=227, col_offset=8), lineno=227, col_offset=8), Pass( lineno=228, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('setUpClass', arguments([Name('cls', Param(), lineno=231, col_offset=19)], None, None, []), [Expr(Str('Hook method for setting up class fixture before running tests in the class.', lineno=232, col_offset=8), lineno=232, col_offset=8)], [Name('classmethod', Load(), lineno=230, col_offset=5)], lineno=230, col_offset=4), FunctionDef('tearDownClass', arguments([Name('cls', Param(), lineno=235, col_offset=22)], None, None, []), [Expr(Str('Hook method for deconstructing the class fixture after running all tests in the class.', lineno=236, col_offset=8), lineno=236, col_offset=8)], [Name('classmethod', Load(), lineno=234, col_offset=5)], lineno=234, col_offset=4), FunctionDef('countTestCases', arguments([Name('self', Param(), lineno=238, col_offset=23)], None, None, []), [Return(Num(1, lineno=239, col_offset=15), lineno=239, col_offset=8)], [], lineno=238, col_offset=4), FunctionDef('defaultTestResult', arguments([Name('self', Param(), lineno=241, col_offset=26)], None, None, []), [Return(Call(Attribute(Name('result', Load(), lineno=242, col_offset=15), 'TestResult', Load(), lineno=242, col_offset=15), [], [], None, None, lineno=242, col_offset=15), lineno=242, col_offset=8)], [], lineno=241, col_offset=4), FunctionDef('shortDescription', arguments([Name('self', Param(), lineno=244, col_offset=25)], None, None, []), [Expr(Str("Returns a one-line description of the test, or None if no\n        description has been provided.\n\n        The default implementation of this method returns the first line of\n        the specified test method's docstring.\n        ", lineno=250, col_offset=-1), lineno=250, col_offset=-1), Assign([Name('doc', Store(), lineno=251, col_offset=8)], Attribute(Name('self', Load(), lineno=251, col_offset=14), '_testMethodDoc', Load(), lineno=251, col_offset=14), lineno=251, col_offset=8), Return(BoolOp(Or(), [BoolOp(And(), [Name('doc', Load(), lineno=252, col_offset=15), Call(Attribute(Subscript(Call(Attribute(Name('doc', Load(), lineno=252, col_offset=23), 'split', Load(), lineno=252, col_offset=23), [Str('\n', lineno=252, col_offset=33)], [], None, None, lineno=252, col_offset=23), Index(Num(0, lineno=252, col_offset=39)), Load(), lineno=252, col_offset=23), 'strip', Load(), lineno=252, col_offset=23), [], [], None, None, lineno=252, col_offset=23)], lineno=252, col_offset=15), Name('None', Load(), lineno=252, col_offset=53)], lineno=252, col_offset=15), lineno=252, col_offset=8)], [], lineno=244, col_offset=4), FunctionDef('id', arguments([Name('self', Param(), lineno=255, col_offset=11)], None, None, []), [Return(BinOp(Str('%s.%s', lineno=256, col_offset=15), Mod(), Tuple([Call(Name('strclass', Load(), lineno=256, col_offset=26), [Attribute(Name('self', Load(), lineno=256, col_offset=35), '__class__', Load(), lineno=256, col_offset=35)], [], None, None, lineno=256, col_offset=26), Attribute(Name('self', Load(), lineno=256, col_offset=52), '_testMethodName', Load(), lineno=256, col_offset=52)], Load(), lineno=256, col_offset=26), lineno=256, col_offset=15), lineno=256, col_offset=8)], [], lineno=255, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=258, col_offset=15), Name('other', Param(), lineno=258, col_offset=21)], None, None, []), [If(Compare(Call(Name('type', Load(), lineno=259, col_offset=11), [Name('self', Load(), lineno=259, col_offset=16)], [], None, None, lineno=259, col_offset=11), [IsNot()], [Call(Name('type', Load(), lineno=259, col_offset=29), [Name('other', Load(), lineno=259, col_offset=34)], [], None, None, lineno=259, col_offset=29)], lineno=259, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=260, col_offset=19), lineno=260, col_offset=12)], [], lineno=259, col_offset=8), Return(Compare(Attribute(Name('self', Load(), lineno=262, col_offset=15), '_testMethodName', Load(), lineno=262, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=262, col_offset=39), '_testMethodName', Load(), lineno=262, col_offset=39)], lineno=262, col_offset=15), lineno=262, col_offset=8)], [], lineno=258, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=264, col_offset=15), Name('other', Param(), lineno=264, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=265, col_offset=19), [Eq()], [Name('other', Load(), lineno=265, col_offset=27)], lineno=265, col_offset=19), lineno=265, col_offset=15), lineno=265, col_offset=8)], [], lineno=264, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=267, col_offset=17)], None, None, []), [Return(Call(Name('hash', Load(), lineno=268, col_offset=15), [Tuple([Call(Name('type', Load(), lineno=268, col_offset=21), [Name('self', Load(), lineno=268, col_offset=26)], [], None, None, lineno=268, col_offset=21), Attribute(Name('self', Load(), lineno=268, col_offset=33), '_testMethodName', Load(), lineno=268, col_offset=33)], Load(), lineno=268, col_offset=21)], [], None, None, lineno=268, col_offset=15), lineno=268, col_offset=8)], [], lineno=267, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=270, col_offset=16)], None, None, []), [Return(BinOp(Str('%s (%s)', lineno=271, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=271, col_offset=28), '_testMethodName', Load(), lineno=271, col_offset=28), Call(Name('strclass', Load(), lineno=271, col_offset=50), [Attribute(Name('self', Load(), lineno=271, col_offset=59), '__class__', Load(), lineno=271, col_offset=59)], [], None, None, lineno=271, col_offset=50)], Load(), lineno=271, col_offset=28), lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=273, col_offset=17)], None, None, []), [Return(BinOp(Str('<%s testMethod=%s>', lineno=274, col_offset=15), Mod(), Tuple([Call(Name('strclass', Load(), lineno=275, col_offset=16), [Attribute(Name('self', Load(), lineno=275, col_offset=25), '__class__', Load(), lineno=275, col_offset=25)], [], None, None, lineno=275, col_offset=16), Attribute(Name('self', Load(), lineno=275, col_offset=42), '_testMethodName', Load(), lineno=275, col_offset=42)], Load(), lineno=275, col_offset=16), lineno=274, col_offset=15), lineno=274, col_offset=8)], [], lineno=273, col_offset=4), FunctionDef('_addSkip', arguments([Name('self', Param(), lineno=277, col_offset=17), Name('result', Param(), lineno=277, col_offset=23), Name('reason', Param(), lineno=277, col_offset=31)], None, None, []), [Assign([Name('addSkip', Store(), lineno=278, col_offset=8)], Call(Name('getattr', Load(), lineno=278, col_offset=18), [Name('result', Load(), lineno=278, col_offset=26), Str('addSkip', lineno=278, col_offset=34), Name('None', Load(), lineno=278, col_offset=45)], [], None, None, lineno=278, col_offset=18), lineno=278, col_offset=8), If(Compare(Name('addSkip', Load(), lineno=279, col_offset=11), [IsNot()], [Name('None', Load(), lineno=279, col_offset=26)], lineno=279, col_offset=11), [Expr(Call(Name('addSkip', Load(), lineno=280, col_offset=12), [Name('self', Load(), lineno=280, col_offset=20), Name('reason', Load(), lineno=280, col_offset=26)], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12)], [Expr(Call(Attribute(Name('warnings', Load(), lineno=282, col_offset=12), 'warn', Load(), lineno=282, col_offset=12), [Str('TestResult has no addSkip method, skips not reported', lineno=282, col_offset=26), Name('RuntimeWarning', Load(), lineno=283, col_offset=26), Num(2, lineno=283, col_offset=42)], [], None, None, lineno=282, col_offset=12), lineno=282, col_offset=12), Expr(Call(Attribute(Name('result', Load(), lineno=284, col_offset=12), 'addSuccess', Load(), lineno=284, col_offset=12), [Name('self', Load(), lineno=284, col_offset=30)], [], None, None, lineno=284, col_offset=12), lineno=284, col_offset=12)], lineno=279, col_offset=8)], [], lineno=277, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=286, col_offset=12), Name('result', Param(), lineno=286, col_offset=18)], None, None, [Name('None', Load(), lineno=286, col_offset=25)]), [Assign([Name('orig_result', Store(), lineno=287, col_offset=8)], Name('result', Load(), lineno=287, col_offset=22), lineno=287, col_offset=8), If(Compare(Name('result', Load(), lineno=288, col_offset=11), [Is()], [Name('None', Load(), lineno=288, col_offset=21)], lineno=288, col_offset=11), [Assign([Name('result', Store(), lineno=289, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=289, col_offset=21), 'defaultTestResult', Load(), lineno=289, col_offset=21), [], [], None, None, lineno=289, col_offset=21), lineno=289, col_offset=12), Assign([Name('startTestRun', Store(), lineno=290, col_offset=12)], Call(Name('getattr', Load(), lineno=290, col_offset=27), [Name('result', Load(), lineno=290, col_offset=35), Str('startTestRun', lineno=290, col_offset=43), Name('None', Load(), lineno=290, col_offset=59)], [], None, None, lineno=290, col_offset=27), lineno=290, col_offset=12), If(Compare(Name('startTestRun', Load(), lineno=291, col_offset=15), [IsNot()], [Name('None', Load(), lineno=291, col_offset=35)], lineno=291, col_offset=15), [Expr(Call(Name('startTestRun', Load(), lineno=292, col_offset=16), [], [], None, None, lineno=292, col_offset=16), lineno=292, col_offset=16)], [], lineno=291, col_offset=12)], [], lineno=288, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=294, col_offset=8), '_resultForDoCleanups', Store(), lineno=294, col_offset=8)], Name('result', Load(), lineno=294, col_offset=36), lineno=294, col_offset=8), Expr(Call(Attribute(Name('result', Load(), lineno=295, col_offset=8), 'startTest', Load(), lineno=295, col_offset=8), [Name('self', Load(), lineno=295, col_offset=25)], [], None, None, lineno=295, col_offset=8), lineno=295, col_offset=8), Assign([Name('testMethod', Store(), lineno=297, col_offset=8)], Call(Name('getattr', Load(), lineno=297, col_offset=21), [Name('self', Load(), lineno=297, col_offset=29), Attribute(Name('self', Load(), lineno=297, col_offset=35), '_testMethodName', Load(), lineno=297, col_offset=35)], [], None, None, lineno=297, col_offset=21), lineno=297, col_offset=8), If(BoolOp(Or(), [Call(Name('getattr', Load(), lineno=298, col_offset=12), [Attribute(Name('self', Load(), lineno=298, col_offset=20), '__class__', Load(), lineno=298, col_offset=20), Str('__unittest_skip__', lineno=298, col_offset=36), Name('False', Load(), lineno=298, col_offset=57)], [], None, None, lineno=298, col_offset=12), Call(Name('getattr', Load(), lineno=299, col_offset=12), [Name('testMethod', Load(), lineno=299, col_offset=20), Str('__unittest_skip__', lineno=299, col_offset=32), Name('False', Load(), lineno=299, col_offset=53)], [], None, None, lineno=299, col_offset=12)], lineno=298, col_offset=12), [TryFinally([Assign([Name('skip_why', Store(), lineno=302, col_offset=16)], BoolOp(Or(), [Call(Name('getattr', Load(), lineno=302, col_offset=28), [Attribute(Name('self', Load(), lineno=302, col_offset=36), '__class__', Load(), lineno=302, col_offset=36), Str('__unittest_skip_why__', lineno=302, col_offset=52), Str('', lineno=302, col_offset=77)], [], None, None, lineno=302, col_offset=28), Call(Name('getattr', Load(), lineno=303, col_offset=31), [Name('testMethod', Load(), lineno=303, col_offset=39), Str('__unittest_skip_why__', lineno=303, col_offset=51), Str('', lineno=303, col_offset=76)], [], None, None, lineno=303, col_offset=31)], lineno=302, col_offset=28), lineno=302, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=304, col_offset=16), '_addSkip', Load(), lineno=304, col_offset=16), [Name('result', Load(), lineno=304, col_offset=30), Name('skip_why', Load(), lineno=304, col_offset=38)], [], None, None, lineno=304, col_offset=16), lineno=304, col_offset=16)], [Expr(Call(Attribute(Name('result', Load(), lineno=306, col_offset=16), 'stopTest', Load(), lineno=306, col_offset=16), [Name('self', Load(), lineno=306, col_offset=32)], [], None, None, lineno=306, col_offset=16), lineno=306, col_offset=16)], lineno=301, col_offset=12), Return(None, lineno=307, col_offset=12)], [], lineno=298, col_offset=8), TryFinally([Assign([Name('success', Store(), lineno=309, col_offset=12)], Name('False', Load(), lineno=309, col_offset=22), lineno=309, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=311, col_offset=16), 'setUp', Load(), lineno=311, col_offset=16), [], [], None, None, lineno=311, col_offset=16), lineno=311, col_offset=16)], [ExceptHandler(Name('SkipTest', Load(), lineno=312, col_offset=19), Name('e', Store(), lineno=312, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=313, col_offset=16), '_addSkip', Load(), lineno=313, col_offset=16), [Name('result', Load(), lineno=313, col_offset=30), Call(Name('str', Load(), lineno=313, col_offset=38), [Name('e', Load(), lineno=313, col_offset=42)], [], None, None, lineno=313, col_offset=38)], [], None, None, lineno=313, col_offset=16), lineno=313, col_offset=16)], lineno=312, col_offset=12), ExceptHandler(Name('Exception', Load(), lineno=314, col_offset=19), None, [Expr(Call(Attribute(Name('result', Load(), lineno=315, col_offset=16), 'addError', Load(), lineno=315, col_offset=16), [Name('self', Load(), lineno=315, col_offset=32), Call(Attribute(Name('sys', Load(), lineno=315, col_offset=38), 'exc_info', Load(), lineno=315, col_offset=38), [], [], None, None, lineno=315, col_offset=38)], [], None, None, lineno=315, col_offset=16), lineno=315, col_offset=16)], lineno=314, col_offset=12)], [TryExcept([Expr(Call(Name('testMethod', Load(), lineno=318, col_offset=20), [], [], None, None, lineno=318, col_offset=20), lineno=318, col_offset=20)], [ExceptHandler(Attribute(Name('self', Load(), lineno=319, col_offset=23), 'failureException', Load(), lineno=319, col_offset=23), None, [Expr(Call(Attribute(Name('result', Load(), lineno=320, col_offset=20), 'addFailure', Load(), lineno=320, col_offset=20), [Name('self', Load(), lineno=320, col_offset=38), Call(Attribute(Name('sys', Load(), lineno=320, col_offset=44), 'exc_info', Load(), lineno=320, col_offset=44), [], [], None, None, lineno=320, col_offset=44)], [], None, None, lineno=320, col_offset=20), lineno=320, col_offset=20)], lineno=319, col_offset=16), ExceptHandler(Name('_ExpectedFailure', Load(), lineno=321, col_offset=23), Name('e', Store(), lineno=321, col_offset=43), [Assign([Name('addExpectedFailure', Store(), lineno=322, col_offset=20)], Call(Name('getattr', Load(), lineno=322, col_offset=41), [Name('result', Load(), lineno=322, col_offset=49), Str('addExpectedFailure', lineno=322, col_offset=57), Name('None', Load(), lineno=322, col_offset=79)], [], None, None, lineno=322, col_offset=41), lineno=322, col_offset=20), If(Compare(Name('addExpectedFailure', Load(), lineno=323, col_offset=23), [IsNot()], [Name('None', Load(), lineno=323, col_offset=49)], lineno=323, col_offset=23), [Expr(Call(Name('addExpectedFailure', Load(), lineno=324, col_offset=24), [Name('self', Load(), lineno=324, col_offset=43), Attribute(Name('e', Load(), lineno=324, col_offset=49), 'exc_info', Load(), lineno=324, col_offset=49)], [], None, None, lineno=324, col_offset=24), lineno=324, col_offset=24)], [Expr(Call(Attribute(Name('warnings', Load(), lineno=326, col_offset=24), 'warn', Load(), lineno=326, col_offset=24), [Str('TestResult has no addExpectedFailure method, reporting as passes', lineno=326, col_offset=38), Name('RuntimeWarning', Load(), lineno=327, col_offset=38)], [], None, None, lineno=326, col_offset=24), lineno=326, col_offset=24), Expr(Call(Attribute(Name('result', Load(), lineno=328, col_offset=24), 'addSuccess', Load(), lineno=328, col_offset=24), [Name('self', Load(), lineno=328, col_offset=42)], [], None, None, lineno=328, col_offset=24), lineno=328, col_offset=24)], lineno=323, col_offset=20)], lineno=321, col_offset=16), ExceptHandler(Name('_UnexpectedSuccess', Load(), lineno=329, col_offset=23), None, [Assign([Name('addUnexpectedSuccess', Store(), lineno=330, col_offset=20)], Call(Name('getattr', Load(), lineno=330, col_offset=43), [Name('result', Load(), lineno=330, col_offset=51), Str('addUnexpectedSuccess', lineno=330, col_offset=59), Name('None', Load(), lineno=330, col_offset=83)], [], None, None, lineno=330, col_offset=43), lineno=330, col_offset=20), If(Compare(Name('addUnexpectedSuccess', Load(), lineno=331, col_offset=23), [IsNot()], [Name('None', Load(), lineno=331, col_offset=51)], lineno=331, col_offset=23), [Expr(Call(Name('addUnexpectedSuccess', Load(), lineno=332, col_offset=24), [Name('self', Load(), lineno=332, col_offset=45)], [], None, None, lineno=332, col_offset=24), lineno=332, col_offset=24)], [Expr(Call(Attribute(Name('warnings', Load(), lineno=334, col_offset=24), 'warn', Load(), lineno=334, col_offset=24), [Str('TestResult has no addUnexpectedSuccess method, reporting as failures', lineno=334, col_offset=38), Name('RuntimeWarning', Load(), lineno=335, col_offset=38)], [], None, None, lineno=334, col_offset=24), lineno=334, col_offset=24), Expr(Call(Attribute(Name('result', Load(), lineno=336, col_offset=24), 'addFailure', Load(), lineno=336, col_offset=24), [Name('self', Load(), lineno=336, col_offset=42), Call(Attribute(Name('sys', Load(), lineno=336, col_offset=48), 'exc_info', Load(), lineno=336, col_offset=48), [], [], None, None, lineno=336, col_offset=48)], [], None, None, lineno=336, col_offset=24), lineno=336, col_offset=24)], lineno=331, col_offset=20)], lineno=329, col_offset=16), ExceptHandler(Name('SkipTest', Load(), lineno=337, col_offset=23), Name('e', Store(), lineno=337, col_offset=35), [Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=20), '_addSkip', Load(), lineno=338, col_offset=20), [Name('result', Load(), lineno=338, col_offset=34), Call(Name('str', Load(), lineno=338, col_offset=42), [Name('e', Load(), lineno=338, col_offset=46)], [], None, None, lineno=338, col_offset=42)], [], None, None, lineno=338, col_offset=20), lineno=338, col_offset=20)], lineno=337, col_offset=16), ExceptHandler(Name('Exception', Load(), lineno=339, col_offset=23), None, [Expr(Call(Attribute(Name('result', Load(), lineno=340, col_offset=20), 'addError', Load(), lineno=340, col_offset=20), [Name('self', Load(), lineno=340, col_offset=36), Call(Attribute(Name('sys', Load(), lineno=340, col_offset=42), 'exc_info', Load(), lineno=340, col_offset=42), [], [], None, None, lineno=340, col_offset=42)], [], None, None, lineno=340, col_offset=20), lineno=340, col_offset=20)], lineno=339, col_offset=16)], [Assign([Name('success', Store(), lineno=342, col_offset=20)], Name('True', Load(), lineno=342, col_offset=30), lineno=342, col_offset=20)], lineno=317, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=345, col_offset=20), 'tearDown', Load(), lineno=345, col_offset=20), [], [], None, None, lineno=345, col_offset=20), lineno=345, col_offset=20)], [ExceptHandler(Name('Exception', Load(), lineno=346, col_offset=23), None, [Expr(Call(Attribute(Name('result', Load(), lineno=347, col_offset=20), 'addError', Load(), lineno=347, col_offset=20), [Name('self', Load(), lineno=347, col_offset=36), Call(Attribute(Name('sys', Load(), lineno=347, col_offset=42), 'exc_info', Load(), lineno=347, col_offset=42), [], [], None, None, lineno=347, col_offset=42)], [], None, None, lineno=347, col_offset=20), lineno=347, col_offset=20), Assign([Name('success', Store(), lineno=348, col_offset=20)], Name('False', Load(), lineno=348, col_offset=30), lineno=348, col_offset=20)], lineno=346, col_offset=16)], [], lineno=344, col_offset=16)], lineno=310, col_offset=12), Assign([Name('cleanUpSuccess', Store(), lineno=350, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=350, col_offset=29), 'doCleanups', Load(), lineno=350, col_offset=29), [], [], None, None, lineno=350, col_offset=29), lineno=350, col_offset=12), Assign([Name('success', Store(), lineno=351, col_offset=12)], BoolOp(And(), [Name('success', Load(), lineno=351, col_offset=22), Name('cleanUpSuccess', Load(), lineno=351, col_offset=34)], lineno=351, col_offset=22), lineno=351, col_offset=12), If(Name('success', Load(), lineno=352, col_offset=15), [Expr(Call(Attribute(Name('result', Load(), lineno=353, col_offset=16), 'addSuccess', Load(), lineno=353, col_offset=16), [Name('self', Load(), lineno=353, col_offset=34)], [], None, None, lineno=353, col_offset=16), lineno=353, col_offset=16)], [], lineno=352, col_offset=12)], [Expr(Call(Attribute(Name('result', Load(), lineno=355, col_offset=12), 'stopTest', Load(), lineno=355, col_offset=12), [Name('self', Load(), lineno=355, col_offset=28)], [], None, None, lineno=355, col_offset=12), lineno=355, col_offset=12), If(Compare(Name('orig_result', Load(), lineno=356, col_offset=15), [Is()], [Name('None', Load(), lineno=356, col_offset=30)], lineno=356, col_offset=15), [Assign([Name('stopTestRun', Store(), lineno=357, col_offset=16)], Call(Name('getattr', Load(), lineno=357, col_offset=30), [Name('result', Load(), lineno=357, col_offset=38), Str('stopTestRun', lineno=357, col_offset=46), Name('None', Load(), lineno=357, col_offset=61)], [], None, None, lineno=357, col_offset=30), lineno=357, col_offset=16), If(Compare(Name('stopTestRun', Load(), lineno=358, col_offset=19), [IsNot()], [Name('None', Load(), lineno=358, col_offset=38)], lineno=358, col_offset=19), [Expr(Call(Name('stopTestRun', Load(), lineno=359, col_offset=20), [], [], None, None, lineno=359, col_offset=20), lineno=359, col_offset=20)], [], lineno=358, col_offset=16)], [], lineno=356, col_offset=12)], lineno=308, col_offset=8)], [], lineno=286, col_offset=4), FunctionDef('doCleanups', arguments([Name('self', Param(), lineno=361, col_offset=19)], None, None, []), [Expr(Str('Execute all cleanup functions. Normally called for you after\n        tearDown.', lineno=363, col_offset=-1), lineno=363, col_offset=-1), Assign([Name('result', Store(), lineno=364, col_offset=8)], Attribute(Name('self', Load(), lineno=364, col_offset=17), '_resultForDoCleanups', Load(), lineno=364, col_offset=17), lineno=364, col_offset=8), Assign([Name('ok', Store(), lineno=365, col_offset=8)], Name('True', Load(), lineno=365, col_offset=13), lineno=365, col_offset=8), While(Attribute(Name('self', Load(), lineno=366, col_offset=14), '_cleanups', Load(), lineno=366, col_offset=14), [Assign([Tuple([Name('function', Store(), lineno=367, col_offset=12), Name('args', Store(), lineno=367, col_offset=22), Name('kwargs', Store(), lineno=367, col_offset=28)], Store(), lineno=367, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=367, col_offset=37), '_cleanups', Load(), lineno=367, col_offset=37), 'pop', Load(), lineno=367, col_offset=37), [Num(-1, lineno=367, col_offset=57)], [], None, None, lineno=367, col_offset=37), lineno=367, col_offset=12), TryExcept([Expr(Call(Name('function', Load(), lineno=369, col_offset=16), [], [], Name('args', Load(), lineno=369, col_offset=26), Name('kwargs', Load(), lineno=369, col_offset=34), lineno=369, col_offset=16), lineno=369, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=370, col_offset=19), None, [Assign([Name('ok', Store(), lineno=371, col_offset=16)], Name('False', Load(), lineno=371, col_offset=21), lineno=371, col_offset=16), Expr(Call(Attribute(Name('result', Load(), lineno=372, col_offset=16), 'addError', Load(), lineno=372, col_offset=16), [Name('self', Load(), lineno=372, col_offset=32), Call(Attribute(Name('sys', Load(), lineno=372, col_offset=38), 'exc_info', Load(), lineno=372, col_offset=38), [], [], None, None, lineno=372, col_offset=38)], [], None, None, lineno=372, col_offset=16), lineno=372, col_offset=16)], lineno=370, col_offset=12)], [], lineno=368, col_offset=12)], [], lineno=366, col_offset=8), Return(Name('ok', Load(), lineno=373, col_offset=15), lineno=373, col_offset=8)], [], lineno=361, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=375, col_offset=17)], 'args', 'kwds', []), [Return(Call(Attribute(Name('self', Load(), lineno=376, col_offset=15), 'run', Load(), lineno=376, col_offset=15), [], [], Name('args', Load(), lineno=376, col_offset=25), Name('kwds', Load(), lineno=376, col_offset=33), lineno=376, col_offset=15), lineno=376, col_offset=8)], [], lineno=375, col_offset=4), FunctionDef('debug', arguments([Name('self', Param(), lineno=378, col_offset=14)], None, None, []), [Expr(Str('Run the test without collecting errors in a TestResult', lineno=379, col_offset=8), lineno=379, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=380, col_offset=8), 'setUp', Load(), lineno=380, col_offset=8), [], [], None, None, lineno=380, col_offset=8), lineno=380, col_offset=8), Expr(Call(Call(Name('getattr', Load(), lineno=381, col_offset=8), [Name('self', Load(), lineno=381, col_offset=16), Attribute(Name('self', Load(), lineno=381, col_offset=22), '_testMethodName', Load(), lineno=381, col_offset=22)], [], None, None, lineno=381, col_offset=8), [], [], None, None, lineno=381, col_offset=8), lineno=381, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'tearDown', Load(), lineno=382, col_offset=8), [], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8), While(Attribute(Name('self', Load(), lineno=383, col_offset=14), '_cleanups', Load(), lineno=383, col_offset=14), [Assign([Tuple([Name('function', Store(), lineno=384, col_offset=12), Name('args', Store(), lineno=384, col_offset=22), Name('kwargs', Store(), lineno=384, col_offset=28)], Store(), lineno=384, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=384, col_offset=37), '_cleanups', Load(), lineno=384, col_offset=37), 'pop', Load(), lineno=384, col_offset=37), [Num(-1, lineno=384, col_offset=57)], [], None, None, lineno=384, col_offset=37), lineno=384, col_offset=12), Expr(Call(Name('function', Load(), lineno=385, col_offset=12), [], [], Name('args', Load(), lineno=385, col_offset=22), Name('kwargs', Load(), lineno=385, col_offset=30), lineno=385, col_offset=12), lineno=385, col_offset=12)], [], lineno=383, col_offset=8)], [], lineno=378, col_offset=4), FunctionDef('skipTest', arguments([Name('self', Param(), lineno=387, col_offset=17), Name('reason', Param(), lineno=387, col_offset=23)], None, None, []), [Expr(Str('Skip this test.', lineno=388, col_offset=8), lineno=388, col_offset=8), Raise(Call(Name('SkipTest', Load(), lineno=389, col_offset=14), [Name('reason', Load(), lineno=389, col_offset=23)], [], None, None, lineno=389, col_offset=14), None, None, lineno=389, col_offset=8)], [], lineno=387, col_offset=4), FunctionDef('fail', arguments([Name('self', Param(), lineno=391, col_offset=13), Name('msg', Param(), lineno=391, col_offset=19)], None, None, [Name('None', Load(), lineno=391, col_offset=23)]), [Expr(Str('Fail immediately, with the given message.', lineno=392, col_offset=8), lineno=392, col_offset=8), Raise(Call(Attribute(Name('self', Load(), lineno=393, col_offset=14), 'failureException', Load(), lineno=393, col_offset=14), [Name('msg', Load(), lineno=393, col_offset=36)], [], None, None, lineno=393, col_offset=14), None, None, lineno=393, col_offset=8)], [], lineno=391, col_offset=4), FunctionDef('assertFalse', arguments([Name('self', Param(), lineno=395, col_offset=20), Name('expr', Param(), lineno=395, col_offset=26), Name('msg', Param(), lineno=395, col_offset=32)], None, None, [Name('None', Load(), lineno=395, col_offset=36)]), [Expr(Str('Fail the test if the expression is true.', lineno=396, col_offset=8), lineno=396, col_offset=8), If(Name('expr', Load(), lineno=397, col_offset=11), [Assign([Name('msg', Store(), lineno=398, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=398, col_offset=18), '_formatMessage', Load(), lineno=398, col_offset=18), [Name('msg', Load(), lineno=398, col_offset=38), BinOp(Str('%s is not False', lineno=398, col_offset=43), Mod(), Call(Name('safe_repr', Load(), lineno=398, col_offset=63), [Name('expr', Load(), lineno=398, col_offset=73)], [], None, None, lineno=398, col_offset=63), lineno=398, col_offset=43)], [], None, None, lineno=398, col_offset=18), lineno=398, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=399, col_offset=18), 'failureException', Load(), lineno=399, col_offset=18), [Name('msg', Load(), lineno=399, col_offset=40)], [], None, None, lineno=399, col_offset=18), None, None, lineno=399, col_offset=12)], [], lineno=397, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('assertTrue', arguments([Name('self', Param(), lineno=401, col_offset=19), Name('expr', Param(), lineno=401, col_offset=25), Name('msg', Param(), lineno=401, col_offset=31)], None, None, [Name('None', Load(), lineno=401, col_offset=35)]), [Expr(Str('Fail the test unless the expression is true.', lineno=402, col_offset=8), lineno=402, col_offset=8), If(UnaryOp(Not(), Name('expr', Load(), lineno=403, col_offset=15), lineno=403, col_offset=11), [Assign([Name('msg', Store(), lineno=404, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=404, col_offset=18), '_formatMessage', Load(), lineno=404, col_offset=18), [Name('msg', Load(), lineno=404, col_offset=38), BinOp(Str('%s is not True', lineno=404, col_offset=43), Mod(), Call(Name('safe_repr', Load(), lineno=404, col_offset=62), [Name('expr', Load(), lineno=404, col_offset=72)], [], None, None, lineno=404, col_offset=62), lineno=404, col_offset=43)], [], None, None, lineno=404, col_offset=18), lineno=404, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=405, col_offset=18), 'failureException', Load(), lineno=405, col_offset=18), [Name('msg', Load(), lineno=405, col_offset=40)], [], None, None, lineno=405, col_offset=18), None, None, lineno=405, col_offset=12)], [], lineno=403, col_offset=8)], [], lineno=401, col_offset=4), FunctionDef('_formatMessage', arguments([Name('self', Param(), lineno=407, col_offset=23), Name('msg', Param(), lineno=407, col_offset=29), Name('standardMsg', Param(), lineno=407, col_offset=34)], None, None, []), [Expr(Str("Honour the longMessage attribute when generating failure messages.\n        If longMessage is False this means:\n        * Use only an explicit message if it is provided\n        * Otherwise use the standard message for the assert\n\n        If longMessage is True:\n        * Use the standard message\n        * If an explicit message is provided, plus ' : ' and the explicit message\n        ", lineno=416, col_offset=-1), lineno=416, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=417, col_offset=15), 'longMessage', Load(), lineno=417, col_offset=15), lineno=417, col_offset=11), [Return(BoolOp(Or(), [Name('msg', Load(), lineno=418, col_offset=19), Name('standardMsg', Load(), lineno=418, col_offset=26)], lineno=418, col_offset=19), lineno=418, col_offset=12)], [], lineno=417, col_offset=8), If(Compare(Name('msg', Load(), lineno=419, col_offset=11), [Is()], [Name('None', Load(), lineno=419, col_offset=18)], lineno=419, col_offset=11), [Return(Name('standardMsg', Load(), lineno=420, col_offset=19), lineno=420, col_offset=12)], [], lineno=419, col_offset=8), TryExcept([Return(BinOp(Str('%s : %s', lineno=424, col_offset=19), Mod(), Tuple([Name('standardMsg', Load(), lineno=424, col_offset=32), Name('msg', Load(), lineno=424, col_offset=45)], Load(), lineno=424, col_offset=32), lineno=424, col_offset=19), lineno=424, col_offset=12)], [ExceptHandler(Name('UnicodeDecodeError', Load(), lineno=425, col_offset=15), None, [Return(BinOp(Str('%s : %s', lineno=426, col_offset=20), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=426, col_offset=33), [Name('standardMsg', Load(), lineno=426, col_offset=43)], [], None, None, lineno=426, col_offset=33), Call(Name('safe_repr', Load(), lineno=426, col_offset=57), [Name('msg', Load(), lineno=426, col_offset=67)], [], None, None, lineno=426, col_offset=57)], Load(), lineno=426, col_offset=33), lineno=426, col_offset=20), lineno=426, col_offset=12)], lineno=425, col_offset=8)], [], lineno=421, col_offset=8)], [], lineno=407, col_offset=4), FunctionDef('assertRaises', arguments([Name('self', Param(), lineno=429, col_offset=21), Name('excClass', Param(), lineno=429, col_offset=27), Name('callableObj', Param(), lineno=429, col_offset=37)], 'args', 'kwargs', [Name('None', Load(), lineno=429, col_offset=49)]), [Expr(Str("Fail unless an exception of class excClass is thrown\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           thrown, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n\n           If called with callableObj omitted or None, will return a\n           context object used like this::\n\n                with self.assertRaises(SomeException):\n                    do_something()\n\n           The context manager keeps a reference to the exception as\n           the 'exception' attribute. This allows you to inspect the\n           exception after the assertion::\n\n               with self.assertRaises(SomeException) as cm:\n                   do_something()\n               the_exception = cm.exception\n               self.assertEqual(the_exception.error_code, 3)\n        ", lineno=451, col_offset=-1), lineno=451, col_offset=-1), Assign([Name('context', Store(), lineno=452, col_offset=8)], Call(Name('_AssertRaisesContext', Load(), lineno=452, col_offset=18), [Name('excClass', Load(), lineno=452, col_offset=39), Name('self', Load(), lineno=452, col_offset=49)], [], None, None, lineno=452, col_offset=18), lineno=452, col_offset=8), If(Compare(Name('callableObj', Load(), lineno=453, col_offset=11), [Is()], [Name('None', Load(), lineno=453, col_offset=26)], lineno=453, col_offset=11), [Return(Name('context', Load(), lineno=454, col_offset=19), lineno=454, col_offset=12)], [], lineno=453, col_offset=8), With(Name('context', Load(), lineno=455, col_offset=13), None, [Expr(Call(Name('callableObj', Load(), lineno=456, col_offset=12), [], [], Name('args', Load(), lineno=456, col_offset=25), Name('kwargs', Load(), lineno=456, col_offset=33), lineno=456, col_offset=12), lineno=456, col_offset=12)], lineno=455, col_offset=13)], [], lineno=429, col_offset=4), FunctionDef('_getAssertEqualityFunc', arguments([Name('self', Param(), lineno=458, col_offset=31), Name('first', Param(), lineno=458, col_offset=37), Name('second', Param(), lineno=458, col_offset=44)], None, None, []), [Expr(Str('Get a detailed comparison function for the types of the two args.\n\n        Returns: A callable accepting (first, second, msg=None) that will\n        raise a failure exception if first != second with a useful human\n        readable error message for those types.\n        ', lineno=464, col_offset=-1), lineno=464, col_offset=-1), If(Compare(Call(Name('type', Load(), lineno=475, col_offset=11), [Name('first', Load(), lineno=475, col_offset=16)], [], None, None, lineno=475, col_offset=11), [Is()], [Call(Name('type', Load(), lineno=475, col_offset=26), [Name('second', Load(), lineno=475, col_offset=31)], [], None, None, lineno=475, col_offset=26)], lineno=475, col_offset=11), [Assign([Name('asserter', Store(), lineno=476, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=476, col_offset=23), '_type_equality_funcs', Load(), lineno=476, col_offset=23), 'get', Load(), lineno=476, col_offset=23), [Call(Name('type', Load(), lineno=476, col_offset=53), [Name('first', Load(), lineno=476, col_offset=58)], [], None, None, lineno=476, col_offset=53)], [], None, None, lineno=476, col_offset=23), lineno=476, col_offset=12), If(Compare(Name('asserter', Load(), lineno=477, col_offset=15), [IsNot()], [Name('None', Load(), lineno=477, col_offset=31)], lineno=477, col_offset=15), [Return(Name('asserter', Load(), lineno=478, col_offset=23), lineno=478, col_offset=16)], [], lineno=477, col_offset=12)], [], lineno=475, col_offset=8), Return(Attribute(Name('self', Load(), lineno=480, col_offset=15), '_baseAssertEqual', Load(), lineno=480, col_offset=15), lineno=480, col_offset=8)], [], lineno=458, col_offset=4), FunctionDef('_baseAssertEqual', arguments([Name('self', Param(), lineno=482, col_offset=25), Name('first', Param(), lineno=482, col_offset=31), Name('second', Param(), lineno=482, col_offset=38), Name('msg', Param(), lineno=482, col_offset=46)], None, None, [Name('None', Load(), lineno=482, col_offset=50)]), [Expr(Str('The default assertEqual implementation, not type specific.', lineno=483, col_offset=8), lineno=483, col_offset=8), If(UnaryOp(Not(), Compare(Name('first', Load(), lineno=484, col_offset=15), [Eq()], [Name('second', Load(), lineno=484, col_offset=24)], lineno=484, col_offset=15), lineno=484, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=485, col_offset=12)], BinOp(Str('%s != %s', lineno=485, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=485, col_offset=40), [Name('first', Load(), lineno=485, col_offset=50)], [], None, None, lineno=485, col_offset=40), Call(Name('safe_repr', Load(), lineno=485, col_offset=58), [Name('second', Load(), lineno=485, col_offset=68)], [], None, None, lineno=485, col_offset=58)], Load(), lineno=485, col_offset=40), lineno=485, col_offset=26), lineno=485, col_offset=12), Assign([Name('msg', Store(), lineno=486, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=486, col_offset=18), '_formatMessage', Load(), lineno=486, col_offset=18), [Name('msg', Load(), lineno=486, col_offset=38), Name('standardMsg', Load(), lineno=486, col_offset=43)], [], None, None, lineno=486, col_offset=18), lineno=486, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=487, col_offset=18), 'failureException', Load(), lineno=487, col_offset=18), [Name('msg', Load(), lineno=487, col_offset=40)], [], None, None, lineno=487, col_offset=18), None, None, lineno=487, col_offset=12)], [], lineno=484, col_offset=8)], [], lineno=482, col_offset=4), FunctionDef('assertEqual', arguments([Name('self', Param(), lineno=489, col_offset=20), Name('first', Param(), lineno=489, col_offset=26), Name('second', Param(), lineno=489, col_offset=33), Name('msg', Param(), lineno=489, col_offset=41)], None, None, [Name('None', Load(), lineno=489, col_offset=45)]), [Expr(Str("Fail if the two objects are unequal as determined by the '=='\n           operator.\n        ", lineno=492, col_offset=-1), lineno=492, col_offset=-1), Assign([Name('assertion_func', Store(), lineno=493, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=493, col_offset=25), '_getAssertEqualityFunc', Load(), lineno=493, col_offset=25), [Name('first', Load(), lineno=493, col_offset=53), Name('second', Load(), lineno=493, col_offset=60)], [], None, None, lineno=493, col_offset=25), lineno=493, col_offset=8), Expr(Call(Name('assertion_func', Load(), lineno=494, col_offset=8), [Name('first', Load(), lineno=494, col_offset=23), Name('second', Load(), lineno=494, col_offset=30)], [keyword('msg', Name('msg', Load(), lineno=494, col_offset=42))], None, None, lineno=494, col_offset=8), lineno=494, col_offset=8)], [], lineno=489, col_offset=4), FunctionDef('assertNotEqual', arguments([Name('self', Param(), lineno=496, col_offset=23), Name('first', Param(), lineno=496, col_offset=29), Name('second', Param(), lineno=496, col_offset=36), Name('msg', Param(), lineno=496, col_offset=44)], None, None, [Name('None', Load(), lineno=496, col_offset=48)]), [Expr(Str("Fail if the two objects are equal as determined by the '=='\n           operator.\n        ", lineno=499, col_offset=-1), lineno=499, col_offset=-1), If(UnaryOp(Not(), Compare(Name('first', Load(), lineno=500, col_offset=15), [NotEq()], [Name('second', Load(), lineno=500, col_offset=24)], lineno=500, col_offset=15), lineno=500, col_offset=11), [Assign([Name('msg', Store(), lineno=501, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=501, col_offset=18), '_formatMessage', Load(), lineno=501, col_offset=18), [Name('msg', Load(), lineno=501, col_offset=38), BinOp(Str('%s == %s', lineno=501, col_offset=43), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=501, col_offset=57), [Name('first', Load(), lineno=501, col_offset=67)], [], None, None, lineno=501, col_offset=57), Call(Name('safe_repr', Load(), lineno=502, col_offset=58), [Name('second', Load(), lineno=502, col_offset=68)], [], None, None, lineno=502, col_offset=58)], Load(), lineno=501, col_offset=57), lineno=501, col_offset=43)], [], None, None, lineno=501, col_offset=18), lineno=501, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=503, col_offset=18), 'failureException', Load(), lineno=503, col_offset=18), [Name('msg', Load(), lineno=503, col_offset=40)], [], None, None, lineno=503, col_offset=18), None, None, lineno=503, col_offset=12)], [], lineno=500, col_offset=8)], [], lineno=496, col_offset=4), FunctionDef('assertAlmostEqual', arguments([Name('self', Param(), lineno=506, col_offset=26), Name('first', Param(), lineno=506, col_offset=32), Name('second', Param(), lineno=506, col_offset=39), Name('places', Param(), lineno=506, col_offset=47), Name('msg', Param(), lineno=506, col_offset=60), Name('delta', Param(), lineno=506, col_offset=70)], None, None, [Name('None', Load(), lineno=506, col_offset=54), Name('None', Load(), lineno=506, col_offset=64), Name('None', Load(), lineno=506, col_offset=76)]), [Expr(Str('Fail if the two objects are unequal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is more than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           If the two objects compare equal then they will automatically\n           compare almost equal.\n        ', lineno=517, col_offset=-1), lineno=517, col_offset=-1), If(Compare(Name('first', Load(), lineno=518, col_offset=11), [Eq()], [Name('second', Load(), lineno=518, col_offset=20)], lineno=518, col_offset=11), [Return(None, lineno=520, col_offset=12)], [], lineno=518, col_offset=8), If(BoolOp(And(), [Compare(Name('delta', Load(), lineno=521, col_offset=11), [IsNot()], [Name('None', Load(), lineno=521, col_offset=24)], lineno=521, col_offset=11), Compare(Name('places', Load(), lineno=521, col_offset=33), [IsNot()], [Name('None', Load(), lineno=521, col_offset=47)], lineno=521, col_offset=33)], lineno=521, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=522, col_offset=18), [Str('specify delta or places not both', lineno=522, col_offset=28)], [], None, None, lineno=522, col_offset=18), None, None, lineno=522, col_offset=12)], [], lineno=521, col_offset=8), If(Compare(Name('delta', Load(), lineno=524, col_offset=11), [IsNot()], [Name('None', Load(), lineno=524, col_offset=24)], lineno=524, col_offset=11), [If(Compare(Call(Name('abs', Load(), lineno=525, col_offset=15), [BinOp(Name('first', Load(), lineno=525, col_offset=19), Sub(), Name('second', Load(), lineno=525, col_offset=27), lineno=525, col_offset=19)], [], None, None, lineno=525, col_offset=15), [LtE()], [Name('delta', Load(), lineno=525, col_offset=38)], lineno=525, col_offset=15), [Return(None, lineno=526, col_offset=16)], [], lineno=525, col_offset=12), Assign([Name('standardMsg', Store(), lineno=528, col_offset=12)], BinOp(Str('%s != %s within %s delta', lineno=528, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=528, col_offset=56), [Name('first', Load(), lineno=528, col_offset=66)], [], None, None, lineno=528, col_offset=56), Call(Name('safe_repr', Load(), lineno=529, col_offset=56), [Name('second', Load(), lineno=529, col_offset=66)], [], None, None, lineno=529, col_offset=56), Call(Name('safe_repr', Load(), lineno=530, col_offset=56), [Name('delta', Load(), lineno=530, col_offset=66)], [], None, None, lineno=530, col_offset=56)], Load(), lineno=528, col_offset=56), lineno=528, col_offset=26), lineno=528, col_offset=12)], [If(Compare(Name('places', Load(), lineno=532, col_offset=15), [Is()], [Name('None', Load(), lineno=532, col_offset=25)], lineno=532, col_offset=15), [Assign([Name('places', Store(), lineno=533, col_offset=16)], Num(7, lineno=533, col_offset=25), lineno=533, col_offset=16)], [], lineno=532, col_offset=12), If(Compare(Call(Name('round', Load(), lineno=535, col_offset=15), [Call(Name('abs', Load(), lineno=535, col_offset=21), [BinOp(Name('second', Load(), lineno=535, col_offset=25), Sub(), Name('first', Load(), lineno=535, col_offset=32), lineno=535, col_offset=25)], [], None, None, lineno=535, col_offset=21), Name('places', Load(), lineno=535, col_offset=40)], [], None, None, lineno=535, col_offset=15), [Eq()], [Num(0, lineno=535, col_offset=51)], lineno=535, col_offset=15), [Return(None, lineno=536, col_offset=16)], [], lineno=535, col_offset=12), Assign([Name('standardMsg', Store(), lineno=538, col_offset=12)], BinOp(Str('%s != %s within %r places', lineno=538, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=538, col_offset=57), [Name('first', Load(), lineno=538, col_offset=67)], [], None, None, lineno=538, col_offset=57), Call(Name('safe_repr', Load(), lineno=539, col_offset=58), [Name('second', Load(), lineno=539, col_offset=68)], [], None, None, lineno=539, col_offset=58), Name('places', Load(), lineno=540, col_offset=58)], Load(), lineno=538, col_offset=57), lineno=538, col_offset=26), lineno=538, col_offset=12)], lineno=524, col_offset=8), Assign([Name('msg', Store(), lineno=541, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=541, col_offset=14), '_formatMessage', Load(), lineno=541, col_offset=14), [Name('msg', Load(), lineno=541, col_offset=34), Name('standardMsg', Load(), lineno=541, col_offset=39)], [], None, None, lineno=541, col_offset=14), lineno=541, col_offset=8), Raise(Call(Attribute(Name('self', Load(), lineno=542, col_offset=14), 'failureException', Load(), lineno=542, col_offset=14), [Name('msg', Load(), lineno=542, col_offset=36)], [], None, None, lineno=542, col_offset=14), None, None, lineno=542, col_offset=8)], [], lineno=506, col_offset=4), FunctionDef('assertNotAlmostEqual', arguments([Name('self', Param(), lineno=544, col_offset=29), Name('first', Param(), lineno=544, col_offset=35), Name('second', Param(), lineno=544, col_offset=42), Name('places', Param(), lineno=544, col_offset=50), Name('msg', Param(), lineno=544, col_offset=63), Name('delta', Param(), lineno=544, col_offset=73)], None, None, [Name('None', Load(), lineno=544, col_offset=57), Name('None', Load(), lineno=544, col_offset=67), Name('None', Load(), lineno=544, col_offset=79)]), [Expr(Str('Fail if the two objects are equal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is less than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           Objects that are equal automatically fail.\n        ', lineno=554, col_offset=-1), lineno=554, col_offset=-1), If(BoolOp(And(), [Compare(Name('delta', Load(), lineno=555, col_offset=11), [IsNot()], [Name('None', Load(), lineno=555, col_offset=24)], lineno=555, col_offset=11), Compare(Name('places', Load(), lineno=555, col_offset=33), [IsNot()], [Name('None', Load(), lineno=555, col_offset=47)], lineno=555, col_offset=33)], lineno=555, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=556, col_offset=18), [Str('specify delta or places not both', lineno=556, col_offset=28)], [], None, None, lineno=556, col_offset=18), None, None, lineno=556, col_offset=12)], [], lineno=555, col_offset=8), If(Compare(Name('delta', Load(), lineno=557, col_offset=11), [IsNot()], [Name('None', Load(), lineno=557, col_offset=24)], lineno=557, col_offset=11), [If(BoolOp(And(), [UnaryOp(Not(), Compare(Name('first', Load(), lineno=558, col_offset=20), [Eq()], [Name('second', Load(), lineno=558, col_offset=29)], lineno=558, col_offset=20), lineno=558, col_offset=15), Compare(Call(Name('abs', Load(), lineno=558, col_offset=41), [BinOp(Name('first', Load(), lineno=558, col_offset=45), Sub(), Name('second', Load(), lineno=558, col_offset=53), lineno=558, col_offset=45)], [], None, None, lineno=558, col_offset=41), [Gt()], [Name('delta', Load(), lineno=558, col_offset=63)], lineno=558, col_offset=41)], lineno=558, col_offset=15), [Return(None, lineno=559, col_offset=16)], [], lineno=558, col_offset=12), Assign([Name('standardMsg', Store(), lineno=560, col_offset=12)], BinOp(Str('%s == %s within %s delta', lineno=560, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=560, col_offset=56), [Name('first', Load(), lineno=560, col_offset=66)], [], None, None, lineno=560, col_offset=56), Call(Name('safe_repr', Load(), lineno=561, col_offset=56), [Name('second', Load(), lineno=561, col_offset=66)], [], None, None, lineno=561, col_offset=56), Call(Name('safe_repr', Load(), lineno=562, col_offset=56), [Name('delta', Load(), lineno=562, col_offset=66)], [], None, None, lineno=562, col_offset=56)], Load(), lineno=560, col_offset=56), lineno=560, col_offset=26), lineno=560, col_offset=12)], [If(Compare(Name('places', Load(), lineno=564, col_offset=15), [Is()], [Name('None', Load(), lineno=564, col_offset=25)], lineno=564, col_offset=15), [Assign([Name('places', Store(), lineno=565, col_offset=16)], Num(7, lineno=565, col_offset=25), lineno=565, col_offset=16)], [], lineno=564, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Compare(Name('first', Load(), lineno=566, col_offset=20), [Eq()], [Name('second', Load(), lineno=566, col_offset=29)], lineno=566, col_offset=20), lineno=566, col_offset=15), Compare(Call(Name('round', Load(), lineno=566, col_offset=41), [Call(Name('abs', Load(), lineno=566, col_offset=47), [BinOp(Name('second', Load(), lineno=566, col_offset=51), Sub(), Name('first', Load(), lineno=566, col_offset=58), lineno=566, col_offset=51)], [], None, None, lineno=566, col_offset=47), Name('places', Load(), lineno=566, col_offset=66)], [], None, None, lineno=566, col_offset=41), [NotEq()], [Num(0, lineno=566, col_offset=77)], lineno=566, col_offset=41)], lineno=566, col_offset=15), [Return(None, lineno=567, col_offset=16)], [], lineno=566, col_offset=12), Assign([Name('standardMsg', Store(), lineno=568, col_offset=12)], BinOp(Str('%s == %s within %r places', lineno=568, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=568, col_offset=57), [Name('first', Load(), lineno=568, col_offset=67)], [], None, None, lineno=568, col_offset=57), Call(Name('safe_repr', Load(), lineno=569, col_offset=57), [Name('second', Load(), lineno=569, col_offset=67)], [], None, None, lineno=569, col_offset=57), Name('places', Load(), lineno=570, col_offset=57)], Load(), lineno=568, col_offset=57), lineno=568, col_offset=26), lineno=568, col_offset=12)], lineno=557, col_offset=8), Assign([Name('msg', Store(), lineno=572, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=572, col_offset=14), '_formatMessage', Load(), lineno=572, col_offset=14), [Name('msg', Load(), lineno=572, col_offset=34), Name('standardMsg', Load(), lineno=572, col_offset=39)], [], None, None, lineno=572, col_offset=14), lineno=572, col_offset=8), Raise(Call(Attribute(Name('self', Load(), lineno=573, col_offset=14), 'failureException', Load(), lineno=573, col_offset=14), [Name('msg', Load(), lineno=573, col_offset=36)], [], None, None, lineno=573, col_offset=14), None, None, lineno=573, col_offset=8)], [], lineno=544, col_offset=4), Assign([Name('assertEquals', Store(), lineno=580, col_offset=4)], Name('assertEqual', Load(), lineno=580, col_offset=19), lineno=580, col_offset=4), Assign([Name('assertNotEquals', Store(), lineno=581, col_offset=4)], Name('assertNotEqual', Load(), lineno=581, col_offset=22), lineno=581, col_offset=4), Assign([Name('assertAlmostEquals', Store(), lineno=582, col_offset=4)], Name('assertAlmostEqual', Load(), lineno=582, col_offset=25), lineno=582, col_offset=4), Assign([Name('assertNotAlmostEquals', Store(), lineno=583, col_offset=4)], Name('assertNotAlmostEqual', Load(), lineno=583, col_offset=28), lineno=583, col_offset=4), Assign([Name('assert_', Store(), lineno=584, col_offset=4)], Name('assertTrue', Load(), lineno=584, col_offset=14), lineno=584, col_offset=4), FunctionDef('_deprecate', arguments([Name('original_func', Param(), lineno=588, col_offset=19)], None, None, []), [FunctionDef('deprecated_func', arguments([], 'args', 'kwargs', []), [Expr(Call(Attribute(Name('warnings', Load(), lineno=590, col_offset=12), 'warn', Load(), lineno=590, col_offset=12), [Call(Attribute(Str('Please use {0} instead.', lineno=591, col_offset=16), 'format', Load(), lineno=591, col_offset=16), [Attribute(Name('original_func', Load(), lineno=591, col_offset=49), '__name__', Load(), lineno=591, col_offset=49)], [], None, None, lineno=591, col_offset=16), Name('PendingDeprecationWarning', Load(), lineno=592, col_offset=16), Num(2, lineno=592, col_offset=43)], [], None, None, lineno=590, col_offset=12), lineno=590, col_offset=12), Return(Call(Name('original_func', Load(), lineno=593, col_offset=19), [], [], Name('args', Load(), lineno=593, col_offset=34), Name('kwargs', Load(), lineno=593, col_offset=42), lineno=593, col_offset=19), lineno=593, col_offset=12)], [], lineno=589, col_offset=8), Return(Name('deprecated_func', Load(), lineno=594, col_offset=15), lineno=594, col_offset=8)], [], lineno=588, col_offset=4), Assign([Name('failUnlessEqual', Store(), lineno=596, col_offset=4)], Call(Name('_deprecate', Load(), lineno=596, col_offset=22), [Name('assertEqual', Load(), lineno=596, col_offset=33)], [], None, None, lineno=596, col_offset=22), lineno=596, col_offset=4), Assign([Name('failIfEqual', Store(), lineno=597, col_offset=4)], Call(Name('_deprecate', Load(), lineno=597, col_offset=18), [Name('assertNotEqual', Load(), lineno=597, col_offset=29)], [], None, None, lineno=597, col_offset=18), lineno=597, col_offset=4), Assign([Name('failUnlessAlmostEqual', Store(), lineno=598, col_offset=4)], Call(Name('_deprecate', Load(), lineno=598, col_offset=28), [Name('assertAlmostEqual', Load(), lineno=598, col_offset=39)], [], None, None, lineno=598, col_offset=28), lineno=598, col_offset=4), Assign([Name('failIfAlmostEqual', Store(), lineno=599, col_offset=4)], Call(Name('_deprecate', Load(), lineno=599, col_offset=24), [Name('assertNotAlmostEqual', Load(), lineno=599, col_offset=35)], [], None, None, lineno=599, col_offset=24), lineno=599, col_offset=4), Assign([Name('failUnless', Store(), lineno=600, col_offset=4)], Call(Name('_deprecate', Load(), lineno=600, col_offset=17), [Name('assertTrue', Load(), lineno=600, col_offset=28)], [], None, None, lineno=600, col_offset=17), lineno=600, col_offset=4), Assign([Name('failUnlessRaises', Store(), lineno=601, col_offset=4)], Call(Name('_deprecate', Load(), lineno=601, col_offset=23), [Name('assertRaises', Load(), lineno=601, col_offset=34)], [], None, None, lineno=601, col_offset=23), lineno=601, col_offset=4), Assign([Name('failIf', Store(), lineno=602, col_offset=4)], Call(Name('_deprecate', Load(), lineno=602, col_offset=13), [Name('assertFalse', Load(), lineno=602, col_offset=24)], [], None, None, lineno=602, col_offset=13), lineno=602, col_offset=4), FunctionDef('assertSequenceEqual', arguments([Name('self', Param(), lineno=604, col_offset=28), Name('seq1', Param(), lineno=604, col_offset=34), Name('seq2', Param(), lineno=604, col_offset=40), Name('msg', Param(), lineno=604, col_offset=46), Name('seq_type', Param(), lineno=604, col_offset=56)], None, None, [Name('None', Load(), lineno=604, col_offset=50), Name('None', Load(), lineno=604, col_offset=65)]), [Expr(Str('An equality assertion for ordered sequences (like lists and tuples).\n\n        For the purposes of this function, a valid ordered sequence type is one\n        which can be indexed, has a length, and has an equality operator.\n\n        Args:\n            seq1: The first sequence to compare.\n            seq2: The second sequence to compare.\n            seq_type: The expected datatype of the sequences, or None if no\n                    datatype should be enforced.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        ', lineno=617, col_offset=-1), lineno=617, col_offset=-1), If(Compare(Name('seq_type', Load(), lineno=618, col_offset=11), [IsNot()], [Name('None', Load(), lineno=618, col_offset=27)], lineno=618, col_offset=11), [Assign([Name('seq_type_name', Store(), lineno=619, col_offset=12)], Attribute(Name('seq_type', Load(), lineno=619, col_offset=28), '__name__', Load(), lineno=619, col_offset=28), lineno=619, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=620, col_offset=19), [Name('seq1', Load(), lineno=620, col_offset=30), Name('seq_type', Load(), lineno=620, col_offset=36)], [], None, None, lineno=620, col_offset=19), lineno=620, col_offset=15), [Raise(Call(Attribute(Name('self', Load(), lineno=621, col_offset=22), 'failureException', Load(), lineno=621, col_offset=22), [BinOp(Str('First sequence is not a %s: %s', lineno=621, col_offset=44), Mod(), Tuple([Name('seq_type_name', Load(), lineno=622, col_offset=43), Call(Name('safe_repr', Load(), lineno=622, col_offset=58), [Name('seq1', Load(), lineno=622, col_offset=68)], [], None, None, lineno=622, col_offset=58)], Load(), lineno=622, col_offset=43), lineno=621, col_offset=44)], [], None, None, lineno=621, col_offset=22), None, None, lineno=621, col_offset=16)], [], lineno=620, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=623, col_offset=19), [Name('seq2', Load(), lineno=623, col_offset=30), Name('seq_type', Load(), lineno=623, col_offset=36)], [], None, None, lineno=623, col_offset=19), lineno=623, col_offset=15), [Raise(Call(Attribute(Name('self', Load(), lineno=624, col_offset=22), 'failureException', Load(), lineno=624, col_offset=22), [BinOp(Str('Second sequence is not a %s: %s', lineno=624, col_offset=44), Mod(), Tuple([Name('seq_type_name', Load(), lineno=625, col_offset=43), Call(Name('safe_repr', Load(), lineno=625, col_offset=58), [Name('seq2', Load(), lineno=625, col_offset=68)], [], None, None, lineno=625, col_offset=58)], Load(), lineno=625, col_offset=43), lineno=624, col_offset=44)], [], None, None, lineno=624, col_offset=22), None, None, lineno=624, col_offset=16)], [], lineno=623, col_offset=12)], [Assign([Name('seq_type_name', Store(), lineno=627, col_offset=12)], Str('sequence', lineno=627, col_offset=28), lineno=627, col_offset=12)], lineno=618, col_offset=8), Assign([Name('differing', Store(), lineno=629, col_offset=8)], Name('None', Load(), lineno=629, col_offset=20), lineno=629, col_offset=8), TryExcept([Assign([Name('len1', Store(), lineno=631, col_offset=12)], Call(Name('len', Load(), lineno=631, col_offset=19), [Name('seq1', Load(), lineno=631, col_offset=23)], [], None, None, lineno=631, col_offset=19), lineno=631, col_offset=12)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=632, col_offset=16), Name('NotImplementedError', Load(), lineno=632, col_offset=27)], Load(), lineno=632, col_offset=16), None, [Assign([Name('differing', Store(), lineno=633, col_offset=12)], BinOp(Str('First %s has no length.    Non-sequence?', lineno=633, col_offset=24), Mod(), Name('seq_type_name', Load(), lineno=634, col_offset=20), lineno=633, col_offset=24), lineno=633, col_offset=12)], lineno=632, col_offset=8)], [], lineno=630, col_offset=8), If(Compare(Name('differing', Load(), lineno=636, col_offset=11), [Is()], [Name('None', Load(), lineno=636, col_offset=24)], lineno=636, col_offset=11), [TryExcept([Assign([Name('len2', Store(), lineno=638, col_offset=16)], Call(Name('len', Load(), lineno=638, col_offset=23), [Name('seq2', Load(), lineno=638, col_offset=27)], [], None, None, lineno=638, col_offset=23), lineno=638, col_offset=16)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=639, col_offset=20), Name('NotImplementedError', Load(), lineno=639, col_offset=31)], Load(), lineno=639, col_offset=20), None, [Assign([Name('differing', Store(), lineno=640, col_offset=16)], BinOp(Str('Second %s has no length.    Non-sequence?', lineno=640, col_offset=28), Mod(), Name('seq_type_name', Load(), lineno=641, col_offset=24), lineno=640, col_offset=28), lineno=640, col_offset=16)], lineno=639, col_offset=12)], [], lineno=637, col_offset=12)], [], lineno=636, col_offset=8), If(Compare(Name('differing', Load(), lineno=643, col_offset=11), [Is()], [Name('None', Load(), lineno=643, col_offset=24)], lineno=643, col_offset=11), [If(Compare(Name('seq1', Load(), lineno=644, col_offset=15), [Eq()], [Name('seq2', Load(), lineno=644, col_offset=23)], lineno=644, col_offset=15), [Return(None, lineno=645, col_offset=16)], [], lineno=644, col_offset=12), Assign([Name('seq1_repr', Store(), lineno=647, col_offset=12)], Call(Name('safe_repr', Load(), lineno=647, col_offset=24), [Name('seq1', Load(), lineno=647, col_offset=34)], [], None, None, lineno=647, col_offset=24), lineno=647, col_offset=12), Assign([Name('seq2_repr', Store(), lineno=648, col_offset=12)], Call(Name('safe_repr', Load(), lineno=648, col_offset=24), [Name('seq2', Load(), lineno=648, col_offset=34)], [], None, None, lineno=648, col_offset=24), lineno=648, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=649, col_offset=15), [Name('seq1_repr', Load(), lineno=649, col_offset=19)], [], None, None, lineno=649, col_offset=15), [Gt()], [Num(30, lineno=649, col_offset=32)], lineno=649, col_offset=15), [Assign([Name('seq1_repr', Store(), lineno=650, col_offset=16)], BinOp(Subscript(Name('seq1_repr', Load(), lineno=650, col_offset=28), Slice(None, Num(30, lineno=650, col_offset=39), None), Load(), lineno=650, col_offset=28), Add(), Str('...', lineno=650, col_offset=45), lineno=650, col_offset=28), lineno=650, col_offset=16)], [], lineno=649, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=651, col_offset=15), [Name('seq2_repr', Load(), lineno=651, col_offset=19)], [], None, None, lineno=651, col_offset=15), [Gt()], [Num(30, lineno=651, col_offset=32)], lineno=651, col_offset=15), [Assign([Name('seq2_repr', Store(), lineno=652, col_offset=16)], BinOp(Subscript(Name('seq2_repr', Load(), lineno=652, col_offset=28), Slice(None, Num(30, lineno=652, col_offset=39), None), Load(), lineno=652, col_offset=28), Add(), Str('...', lineno=652, col_offset=45), lineno=652, col_offset=28), lineno=652, col_offset=16)], [], lineno=651, col_offset=12), Assign([Name('elements', Store(), lineno=653, col_offset=12)], Tuple([Call(Attribute(Name('seq_type_name', Load(), lineno=653, col_offset=24), 'capitalize', Load(), lineno=653, col_offset=24), [], [], None, None, lineno=653, col_offset=24), Name('seq1_repr', Load(), lineno=653, col_offset=52), Name('seq2_repr', Load(), lineno=653, col_offset=63)], Load(), lineno=653, col_offset=24), lineno=653, col_offset=12), Assign([Name('differing', Store(), lineno=654, col_offset=12)], BinOp(Str('%ss differ: %s != %s\n', lineno=654, col_offset=24), Mod(), Name('elements', Load(), lineno=654, col_offset=51), lineno=654, col_offset=24), lineno=654, col_offset=12), For(Name('i', Store(), lineno=656, col_offset=16), Call(Name('xrange', Load(), lineno=656, col_offset=21), [Call(Name('min', Load(), lineno=656, col_offset=28), [Name('len1', Load(), lineno=656, col_offset=32), Name('len2', Load(), lineno=656, col_offset=38)], [], None, None, lineno=656, col_offset=28)], [], None, None, lineno=656, col_offset=21), [TryExcept([Assign([Name('item1', Store(), lineno=658, col_offset=20)], Subscript(Name('seq1', Load(), lineno=658, col_offset=28), Index(Name('i', Load(), lineno=658, col_offset=33)), Load(), lineno=658, col_offset=28), lineno=658, col_offset=20)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=659, col_offset=24), Name('IndexError', Load(), lineno=659, col_offset=35), Name('NotImplementedError', Load(), lineno=659, col_offset=47)], Load(), lineno=659, col_offset=24), None, [AugAssign(Name('differing', Store(), lineno=660, col_offset=20), Add(), BinOp(Str('\nUnable to index element %d of first %s\n', lineno=660, col_offset=34), Mod(), Tuple([Name('i', Load(), lineno=661, col_offset=34), Name('seq_type_name', Load(), lineno=661, col_offset=37)], Load(), lineno=661, col_offset=34), lineno=660, col_offset=34), lineno=660, col_offset=20), Break( lineno=662, col_offset=20)], lineno=659, col_offset=16)], [], lineno=657, col_offset=16), TryExcept([Assign([Name('item2', Store(), lineno=665, col_offset=20)], Subscript(Name('seq2', Load(), lineno=665, col_offset=28), Index(Name('i', Load(), lineno=665, col_offset=33)), Load(), lineno=665, col_offset=28), lineno=665, col_offset=20)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=666, col_offset=24), Name('IndexError', Load(), lineno=666, col_offset=35), Name('NotImplementedError', Load(), lineno=666, col_offset=47)], Load(), lineno=666, col_offset=24), None, [AugAssign(Name('differing', Store(), lineno=667, col_offset=20), Add(), BinOp(Str('\nUnable to index element %d of second %s\n', lineno=667, col_offset=34), Mod(), Tuple([Name('i', Load(), lineno=668, col_offset=34), Name('seq_type_name', Load(), lineno=668, col_offset=37)], Load(), lineno=668, col_offset=34), lineno=667, col_offset=34), lineno=667, col_offset=20), Break( lineno=669, col_offset=20)], lineno=666, col_offset=16)], [], lineno=664, col_offset=16), If(Compare(Name('item1', Load(), lineno=671, col_offset=19), [NotEq()], [Name('item2', Load(), lineno=671, col_offset=28)], lineno=671, col_offset=19), [AugAssign(Name('differing', Store(), lineno=672, col_offset=20), Add(), BinOp(Str('\nFirst differing element %d:\n%s\n%s\n', lineno=672, col_offset=34), Mod(), Tuple([Name('i', Load(), lineno=673, col_offset=34), Name('item1', Load(), lineno=673, col_offset=37), Name('item2', Load(), lineno=673, col_offset=44)], Load(), lineno=673, col_offset=34), lineno=672, col_offset=34), lineno=672, col_offset=20), Break( lineno=674, col_offset=20)], [], lineno=671, col_offset=16)], [If(BoolOp(And(), [Compare(Name('len1', Load(), lineno=676, col_offset=20), [Eq()], [Name('len2', Load(), lineno=676, col_offset=28)], lineno=676, col_offset=20), Compare(Name('seq_type', Load(), lineno=676, col_offset=37), [Is()], [Name('None', Load(), lineno=676, col_offset=49)], lineno=676, col_offset=37), Compare(Call(Name('type', Load(), lineno=677, col_offset=20), [Name('seq1', Load(), lineno=677, col_offset=25)], [], None, None, lineno=677, col_offset=20), [NotEq()], [Call(Name('type', Load(), lineno=677, col_offset=34), [Name('seq2', Load(), lineno=677, col_offset=39)], [], None, None, lineno=677, col_offset=34)], lineno=677, col_offset=20)], lineno=676, col_offset=20), [Return(None, lineno=679, col_offset=20)], [], lineno=676, col_offset=16)], lineno=656, col_offset=12), If(Compare(Name('len1', Load(), lineno=681, col_offset=15), [Gt()], [Name('len2', Load(), lineno=681, col_offset=22)], lineno=681, col_offset=15), [AugAssign(Name('differing', Store(), lineno=682, col_offset=16), Add(), BinOp(Str('\nFirst %s contains %d additional elements.\n', lineno=682, col_offset=30), Mod(), Tuple([Name('seq_type_name', Load(), lineno=683, col_offset=46), BinOp(Name('len1', Load(), lineno=683, col_offset=61), Sub(), Name('len2', Load(), lineno=683, col_offset=68), lineno=683, col_offset=61)], Load(), lineno=683, col_offset=46), lineno=682, col_offset=30), lineno=682, col_offset=16), TryExcept([AugAssign(Name('differing', Store(), lineno=685, col_offset=20), Add(), BinOp(Str('First extra element %d:\n%s\n', lineno=685, col_offset=34), Mod(), Tuple([Name('len2', Load(), lineno=686, col_offset=35), Subscript(Name('seq1', Load(), lineno=686, col_offset=41), Index(Name('len2', Load(), lineno=686, col_offset=46)), Load(), lineno=686, col_offset=41)], Load(), lineno=686, col_offset=35), lineno=685, col_offset=34), lineno=685, col_offset=20)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=687, col_offset=24), Name('IndexError', Load(), lineno=687, col_offset=35), Name('NotImplementedError', Load(), lineno=687, col_offset=47)], Load(), lineno=687, col_offset=24), None, [AugAssign(Name('differing', Store(), lineno=688, col_offset=20), Add(), BinOp(Str('Unable to index element %d of first %s\n', lineno=688, col_offset=34), Mod(), Tuple([Name('len2', Load(), lineno=689, col_offset=53), Name('seq_type_name', Load(), lineno=689, col_offset=59)], Load(), lineno=689, col_offset=53), lineno=688, col_offset=34), lineno=688, col_offset=20)], lineno=687, col_offset=16)], [], lineno=684, col_offset=16)], [If(Compare(Name('len1', Load(), lineno=690, col_offset=17), [Lt()], [Name('len2', Load(), lineno=690, col_offset=24)], lineno=690, col_offset=17), [AugAssign(Name('differing', Store(), lineno=691, col_offset=16), Add(), BinOp(Str('\nSecond %s contains %d additional elements.\n', lineno=691, col_offset=30), Mod(), Tuple([Name('seq_type_name', Load(), lineno=692, col_offset=46), BinOp(Name('len2', Load(), lineno=692, col_offset=61), Sub(), Name('len1', Load(), lineno=692, col_offset=68), lineno=692, col_offset=61)], Load(), lineno=692, col_offset=46), lineno=691, col_offset=30), lineno=691, col_offset=16), TryExcept([AugAssign(Name('differing', Store(), lineno=694, col_offset=20), Add(), BinOp(Str('First extra element %d:\n%s\n', lineno=694, col_offset=34), Mod(), Tuple([Name('len1', Load(), lineno=695, col_offset=35), Subscript(Name('seq2', Load(), lineno=695, col_offset=41), Index(Name('len1', Load(), lineno=695, col_offset=46)), Load(), lineno=695, col_offset=41)], Load(), lineno=695, col_offset=35), lineno=694, col_offset=34), lineno=694, col_offset=20)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=696, col_offset=24), Name('IndexError', Load(), lineno=696, col_offset=35), Name('NotImplementedError', Load(), lineno=696, col_offset=47)], Load(), lineno=696, col_offset=24), None, [AugAssign(Name('differing', Store(), lineno=697, col_offset=20), Add(), BinOp(Str('Unable to index element %d of second %s\n', lineno=697, col_offset=34), Mod(), Tuple([Name('len1', Load(), lineno=698, col_offset=54), Name('seq_type_name', Load(), lineno=698, col_offset=60)], Load(), lineno=698, col_offset=54), lineno=697, col_offset=34), lineno=697, col_offset=20)], lineno=696, col_offset=16)], [], lineno=693, col_offset=16)], [], lineno=690, col_offset=17)], lineno=681, col_offset=12)], [], lineno=643, col_offset=8), Assign([Name('standardMsg', Store(), lineno=699, col_offset=8)], Name('differing', Load(), lineno=699, col_offset=22), lineno=699, col_offset=8), Assign([Name('diffMsg', Store(), lineno=700, col_offset=8)], BinOp(Str('\n', lineno=700, col_offset=18), Add(), Call(Attribute(Str('\n', lineno=700, col_offset=25), 'join', Load(), lineno=700, col_offset=25), [Call(Attribute(Name('difflib', Load(), lineno=701, col_offset=12), 'ndiff', Load(), lineno=701, col_offset=12), [Call(Attribute(Call(Attribute(Name('pprint', Load(), lineno=701, col_offset=26), 'pformat', Load(), lineno=701, col_offset=26), [Name('seq1', Load(), lineno=701, col_offset=41)], [], None, None, lineno=701, col_offset=26), 'splitlines', Load(), lineno=701, col_offset=26), [], [], None, None, lineno=701, col_offset=26), Call(Attribute(Call(Attribute(Name('pprint', Load(), lineno=702, col_offset=26), 'pformat', Load(), lineno=702, col_offset=26), [Name('seq2', Load(), lineno=702, col_offset=41)], [], None, None, lineno=702, col_offset=26), 'splitlines', Load(), lineno=702, col_offset=26), [], [], None, None, lineno=702, col_offset=26)], [], None, None, lineno=701, col_offset=12)], [], None, None, lineno=700, col_offset=25), lineno=700, col_offset=18), lineno=700, col_offset=8), Assign([Name('standardMsg', Store(), lineno=703, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=703, col_offset=22), '_truncateMessage', Load(), lineno=703, col_offset=22), [Name('standardMsg', Load(), lineno=703, col_offset=44), Name('diffMsg', Load(), lineno=703, col_offset=57)], [], None, None, lineno=703, col_offset=22), lineno=703, col_offset=8), Assign([Name('msg', Store(), lineno=704, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=704, col_offset=14), '_formatMessage', Load(), lineno=704, col_offset=14), [Name('msg', Load(), lineno=704, col_offset=34), Name('standardMsg', Load(), lineno=704, col_offset=39)], [], None, None, lineno=704, col_offset=14), lineno=704, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=705, col_offset=8), 'fail', Load(), lineno=705, col_offset=8), [Name('msg', Load(), lineno=705, col_offset=18)], [], None, None, lineno=705, col_offset=8), lineno=705, col_offset=8)], [], lineno=604, col_offset=4), FunctionDef('_truncateMessage', arguments([Name('self', Param(), lineno=707, col_offset=25), Name('message', Param(), lineno=707, col_offset=31), Name('diff', Param(), lineno=707, col_offset=40)], None, None, []), [Assign([Name('max_diff', Store(), lineno=708, col_offset=8)], Attribute(Name('self', Load(), lineno=708, col_offset=19), 'maxDiff', Load(), lineno=708, col_offset=19), lineno=708, col_offset=8), If(BoolOp(Or(), [Compare(Name('max_diff', Load(), lineno=709, col_offset=11), [Is()], [Name('None', Load(), lineno=709, col_offset=23)], lineno=709, col_offset=11), Compare(Call(Name('len', Load(), lineno=709, col_offset=31), [Name('diff', Load(), lineno=709, col_offset=35)], [], None, None, lineno=709, col_offset=31), [LtE()], [Name('max_diff', Load(), lineno=709, col_offset=44)], lineno=709, col_offset=31)], lineno=709, col_offset=11), [Return(BinOp(Name('message', Load(), lineno=710, col_offset=19), Add(), Name('diff', Load(), lineno=710, col_offset=29), lineno=710, col_offset=19), lineno=710, col_offset=12)], [], lineno=709, col_offset=8), Return(BinOp(Name('message', Load(), lineno=711, col_offset=15), Add(), BinOp(Name('DIFF_OMITTED', Load(), lineno=711, col_offset=26), Mod(), Call(Name('len', Load(), lineno=711, col_offset=41), [Name('diff', Load(), lineno=711, col_offset=45)], [], None, None, lineno=711, col_offset=41), lineno=711, col_offset=26), lineno=711, col_offset=15), lineno=711, col_offset=8)], [], lineno=707, col_offset=4), FunctionDef('assertListEqual', arguments([Name('self', Param(), lineno=713, col_offset=24), Name('list1', Param(), lineno=713, col_offset=30), Name('list2', Param(), lineno=713, col_offset=37), Name('msg', Param(), lineno=713, col_offset=44)], None, None, [Name('None', Load(), lineno=713, col_offset=48)]), [Expr(Str('A list-specific equality assertion.\n\n        Args:\n            list1: The first list to compare.\n            list2: The second list to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        ', lineno=722, col_offset=-1), lineno=722, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=723, col_offset=8), 'assertSequenceEqual', Load(), lineno=723, col_offset=8), [Name('list1', Load(), lineno=723, col_offset=33), Name('list2', Load(), lineno=723, col_offset=40), Name('msg', Load(), lineno=723, col_offset=47)], [keyword('seq_type', Name('list', Load(), lineno=723, col_offset=61))], None, None, lineno=723, col_offset=8), lineno=723, col_offset=8)], [], lineno=713, col_offset=4), FunctionDef('assertTupleEqual', arguments([Name('self', Param(), lineno=725, col_offset=25), Name('tuple1', Param(), lineno=725, col_offset=31), Name('tuple2', Param(), lineno=725, col_offset=39), Name('msg', Param(), lineno=725, col_offset=47)], None, None, [Name('None', Load(), lineno=725, col_offset=51)]), [Expr(Str('A tuple-specific equality assertion.\n\n        Args:\n            tuple1: The first tuple to compare.\n            tuple2: The second tuple to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        ', lineno=733, col_offset=-1), lineno=733, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=734, col_offset=8), 'assertSequenceEqual', Load(), lineno=734, col_offset=8), [Name('tuple1', Load(), lineno=734, col_offset=33), Name('tuple2', Load(), lineno=734, col_offset=41), Name('msg', Load(), lineno=734, col_offset=49)], [keyword('seq_type', Name('tuple', Load(), lineno=734, col_offset=63))], None, None, lineno=734, col_offset=8), lineno=734, col_offset=8)], [], lineno=725, col_offset=4), FunctionDef('assertSetEqual', arguments([Name('self', Param(), lineno=736, col_offset=23), Name('set1', Param(), lineno=736, col_offset=29), Name('set2', Param(), lineno=736, col_offset=35), Name('msg', Param(), lineno=736, col_offset=41)], None, None, [Name('None', Load(), lineno=736, col_offset=45)]), [Expr(Str('A set-specific equality assertion.\n\n        Args:\n            set1: The first set to compare.\n            set2: The second set to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        assertSetEqual uses ducktyping to support different types of sets, and\n        is optimized for sets specifically (parameters must support a\n        difference method).\n        ', lineno=748, col_offset=-1), lineno=748, col_offset=-1), TryExcept([Assign([Name('difference1', Store(), lineno=750, col_offset=12)], Call(Attribute(Name('set1', Load(), lineno=750, col_offset=26), 'difference', Load(), lineno=750, col_offset=26), [Name('set2', Load(), lineno=750, col_offset=42)], [], None, None, lineno=750, col_offset=26), lineno=750, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=751, col_offset=15), Name('e', Store(), lineno=751, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=752, col_offset=12), 'fail', Load(), lineno=752, col_offset=12), [BinOp(Str('invalid type when attempting set difference: %s', lineno=752, col_offset=22), Mod(), Name('e', Load(), lineno=752, col_offset=74), lineno=752, col_offset=22)], [], None, None, lineno=752, col_offset=12), lineno=752, col_offset=12)], lineno=751, col_offset=8), ExceptHandler(Name('AttributeError', Load(), lineno=753, col_offset=15), Name('e', Store(), lineno=753, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=754, col_offset=12), 'fail', Load(), lineno=754, col_offset=12), [BinOp(Str('first argument does not support set difference: %s', lineno=754, col_offset=22), Mod(), Name('e', Load(), lineno=754, col_offset=77), lineno=754, col_offset=22)], [], None, None, lineno=754, col_offset=12), lineno=754, col_offset=12)], lineno=753, col_offset=8)], [], lineno=749, col_offset=8), TryExcept([Assign([Name('difference2', Store(), lineno=757, col_offset=12)], Call(Attribute(Name('set2', Load(), lineno=757, col_offset=26), 'difference', Load(), lineno=757, col_offset=26), [Name('set1', Load(), lineno=757, col_offset=42)], [], None, None, lineno=757, col_offset=26), lineno=757, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=758, col_offset=15), Name('e', Store(), lineno=758, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=759, col_offset=12), 'fail', Load(), lineno=759, col_offset=12), [BinOp(Str('invalid type when attempting set difference: %s', lineno=759, col_offset=22), Mod(), Name('e', Load(), lineno=759, col_offset=74), lineno=759, col_offset=22)], [], None, None, lineno=759, col_offset=12), lineno=759, col_offset=12)], lineno=758, col_offset=8), ExceptHandler(Name('AttributeError', Load(), lineno=760, col_offset=15), Name('e', Store(), lineno=760, col_offset=31), [Expr(Call(Attribute(Name('self', Load(), lineno=761, col_offset=12), 'fail', Load(), lineno=761, col_offset=12), [BinOp(Str('second argument does not support set difference: %s', lineno=761, col_offset=22), Mod(), Name('e', Load(), lineno=761, col_offset=78), lineno=761, col_offset=22)], [], None, None, lineno=761, col_offset=12), lineno=761, col_offset=12)], lineno=760, col_offset=8)], [], lineno=756, col_offset=8), If(UnaryOp(Not(), BoolOp(Or(), [Name('difference1', Load(), lineno=763, col_offset=16), Name('difference2', Load(), lineno=763, col_offset=31)], lineno=763, col_offset=16), lineno=763, col_offset=11), [Return(None, lineno=764, col_offset=12)], [], lineno=763, col_offset=8), Assign([Name('lines', Store(), lineno=766, col_offset=8)], List([], Load(), lineno=766, col_offset=16), lineno=766, col_offset=8), If(Name('difference1', Load(), lineno=767, col_offset=11), [Expr(Call(Attribute(Name('lines', Load(), lineno=768, col_offset=12), 'append', Load(), lineno=768, col_offset=12), [Str('Items in the first set but not the second:', lineno=768, col_offset=25)], [], None, None, lineno=768, col_offset=12), lineno=768, col_offset=12), For(Name('item', Store(), lineno=769, col_offset=16), Name('difference1', Load(), lineno=769, col_offset=24), [Expr(Call(Attribute(Name('lines', Load(), lineno=770, col_offset=16), 'append', Load(), lineno=770, col_offset=16), [Call(Name('repr', Load(), lineno=770, col_offset=29), [Name('item', Load(), lineno=770, col_offset=34)], [], None, None, lineno=770, col_offset=29)], [], None, None, lineno=770, col_offset=16), lineno=770, col_offset=16)], [], lineno=769, col_offset=12)], [], lineno=767, col_offset=8), If(Name('difference2', Load(), lineno=771, col_offset=11), [Expr(Call(Attribute(Name('lines', Load(), lineno=772, col_offset=12), 'append', Load(), lineno=772, col_offset=12), [Str('Items in the second set but not the first:', lineno=772, col_offset=25)], [], None, None, lineno=772, col_offset=12), lineno=772, col_offset=12), For(Name('item', Store(), lineno=773, col_offset=16), Name('difference2', Load(), lineno=773, col_offset=24), [Expr(Call(Attribute(Name('lines', Load(), lineno=774, col_offset=16), 'append', Load(), lineno=774, col_offset=16), [Call(Name('repr', Load(), lineno=774, col_offset=29), [Name('item', Load(), lineno=774, col_offset=34)], [], None, None, lineno=774, col_offset=29)], [], None, None, lineno=774, col_offset=16), lineno=774, col_offset=16)], [], lineno=773, col_offset=12)], [], lineno=771, col_offset=8), Assign([Name('standardMsg', Store(), lineno=776, col_offset=8)], Call(Attribute(Str('\n', lineno=776, col_offset=22), 'join', Load(), lineno=776, col_offset=22), [Name('lines', Load(), lineno=776, col_offset=32)], [], None, None, lineno=776, col_offset=22), lineno=776, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=777, col_offset=8), 'fail', Load(), lineno=777, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=777, col_offset=18), '_formatMessage', Load(), lineno=777, col_offset=18), [Name('msg', Load(), lineno=777, col_offset=38), Name('standardMsg', Load(), lineno=777, col_offset=43)], [], None, None, lineno=777, col_offset=18)], [], None, None, lineno=777, col_offset=8), lineno=777, col_offset=8)], [], lineno=736, col_offset=4), FunctionDef('assertIn', arguments([Name('self', Param(), lineno=779, col_offset=17), Name('member', Param(), lineno=779, col_offset=23), Name('container', Param(), lineno=779, col_offset=31), Name('msg', Param(), lineno=779, col_offset=42)], None, None, [Name('None', Load(), lineno=779, col_offset=46)]), [Expr(Str('Just like self.assertTrue(a in b), but with a nicer default message.', lineno=780, col_offset=8), lineno=780, col_offset=8), If(Compare(Name('member', Load(), lineno=781, col_offset=11), [NotIn()], [Name('container', Load(), lineno=781, col_offset=25)], lineno=781, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=782, col_offset=12)], BinOp(Str('%s not found in %s', lineno=782, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=782, col_offset=50), [Name('member', Load(), lineno=782, col_offset=60)], [], None, None, lineno=782, col_offset=50), Call(Name('safe_repr', Load(), lineno=783, col_offset=50), [Name('container', Load(), lineno=783, col_offset=60)], [], None, None, lineno=783, col_offset=50)], Load(), lineno=782, col_offset=50), lineno=782, col_offset=26), lineno=782, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=784, col_offset=12), 'fail', Load(), lineno=784, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=784, col_offset=22), '_formatMessage', Load(), lineno=784, col_offset=22), [Name('msg', Load(), lineno=784, col_offset=42), Name('standardMsg', Load(), lineno=784, col_offset=47)], [], None, None, lineno=784, col_offset=22)], [], None, None, lineno=784, col_offset=12), lineno=784, col_offset=12)], [], lineno=781, col_offset=8)], [], lineno=779, col_offset=4), FunctionDef('assertNotIn', arguments([Name('self', Param(), lineno=786, col_offset=20), Name('member', Param(), lineno=786, col_offset=26), Name('container', Param(), lineno=786, col_offset=34), Name('msg', Param(), lineno=786, col_offset=45)], None, None, [Name('None', Load(), lineno=786, col_offset=49)]), [Expr(Str('Just like self.assertTrue(a not in b), but with a nicer default message.', lineno=787, col_offset=8), lineno=787, col_offset=8), If(Compare(Name('member', Load(), lineno=788, col_offset=11), [In()], [Name('container', Load(), lineno=788, col_offset=21)], lineno=788, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=789, col_offset=12)], BinOp(Str('%s unexpectedly found in %s', lineno=789, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=789, col_offset=59), [Name('member', Load(), lineno=789, col_offset=69)], [], None, None, lineno=789, col_offset=59), Call(Name('safe_repr', Load(), lineno=790, col_offset=56), [Name('container', Load(), lineno=790, col_offset=66)], [], None, None, lineno=790, col_offset=56)], Load(), lineno=789, col_offset=59), lineno=789, col_offset=26), lineno=789, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=791, col_offset=12), 'fail', Load(), lineno=791, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=791, col_offset=22), '_formatMessage', Load(), lineno=791, col_offset=22), [Name('msg', Load(), lineno=791, col_offset=42), Name('standardMsg', Load(), lineno=791, col_offset=47)], [], None, None, lineno=791, col_offset=22)], [], None, None, lineno=791, col_offset=12), lineno=791, col_offset=12)], [], lineno=788, col_offset=8)], [], lineno=786, col_offset=4), FunctionDef('assertIs', arguments([Name('self', Param(), lineno=793, col_offset=17), Name('expr1', Param(), lineno=793, col_offset=23), Name('expr2', Param(), lineno=793, col_offset=30), Name('msg', Param(), lineno=793, col_offset=37)], None, None, [Name('None', Load(), lineno=793, col_offset=41)]), [Expr(Str('Just like self.assertTrue(a is b), but with a nicer default message.', lineno=794, col_offset=8), lineno=794, col_offset=8), If(Compare(Name('expr1', Load(), lineno=795, col_offset=11), [IsNot()], [Name('expr2', Load(), lineno=795, col_offset=24)], lineno=795, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=796, col_offset=12)], BinOp(Str('%s is not %s', lineno=796, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=796, col_offset=44), [Name('expr1', Load(), lineno=796, col_offset=54)], [], None, None, lineno=796, col_offset=44), Call(Name('safe_repr', Load(), lineno=797, col_offset=45), [Name('expr2', Load(), lineno=797, col_offset=55)], [], None, None, lineno=797, col_offset=45)], Load(), lineno=796, col_offset=44), lineno=796, col_offset=26), lineno=796, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=798, col_offset=12), 'fail', Load(), lineno=798, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=798, col_offset=22), '_formatMessage', Load(), lineno=798, col_offset=22), [Name('msg', Load(), lineno=798, col_offset=42), Name('standardMsg', Load(), lineno=798, col_offset=47)], [], None, None, lineno=798, col_offset=22)], [], None, None, lineno=798, col_offset=12), lineno=798, col_offset=12)], [], lineno=795, col_offset=8)], [], lineno=793, col_offset=4), FunctionDef('assertIsNot', arguments([Name('self', Param(), lineno=800, col_offset=20), Name('expr1', Param(), lineno=800, col_offset=26), Name('expr2', Param(), lineno=800, col_offset=33), Name('msg', Param(), lineno=800, col_offset=40)], None, None, [Name('None', Load(), lineno=800, col_offset=44)]), [Expr(Str('Just like self.assertTrue(a is not b), but with a nicer default message.', lineno=801, col_offset=8), lineno=801, col_offset=8), If(Compare(Name('expr1', Load(), lineno=802, col_offset=11), [Is()], [Name('expr2', Load(), lineno=802, col_offset=20)], lineno=802, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=803, col_offset=12)], BinOp(Str('unexpectedly identical: %s', lineno=803, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=803, col_offset=58), [Name('expr1', Load(), lineno=803, col_offset=68)], [], None, None, lineno=803, col_offset=58)], Load(), lineno=803, col_offset=58), lineno=803, col_offset=26), lineno=803, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=804, col_offset=12), 'fail', Load(), lineno=804, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=804, col_offset=22), '_formatMessage', Load(), lineno=804, col_offset=22), [Name('msg', Load(), lineno=804, col_offset=42), Name('standardMsg', Load(), lineno=804, col_offset=47)], [], None, None, lineno=804, col_offset=22)], [], None, None, lineno=804, col_offset=12), lineno=804, col_offset=12)], [], lineno=802, col_offset=8)], [], lineno=800, col_offset=4), FunctionDef('assertDictEqual', arguments([Name('self', Param(), lineno=806, col_offset=24), Name('d1', Param(), lineno=806, col_offset=30), Name('d2', Param(), lineno=806, col_offset=34), Name('msg', Param(), lineno=806, col_offset=38)], None, None, [Name('None', Load(), lineno=806, col_offset=42)]), [Expr(Call(Attribute(Name('self', Load(), lineno=807, col_offset=8), 'assertIsInstance', Load(), lineno=807, col_offset=8), [Name('d1', Load(), lineno=807, col_offset=30), Name('dict', Load(), lineno=807, col_offset=34), Str('First argument is not a dictionary', lineno=807, col_offset=40)], [], None, None, lineno=807, col_offset=8), lineno=807, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=808, col_offset=8), 'assertIsInstance', Load(), lineno=808, col_offset=8), [Name('d2', Load(), lineno=808, col_offset=30), Name('dict', Load(), lineno=808, col_offset=34), Str('Second argument is not a dictionary', lineno=808, col_offset=40)], [], None, None, lineno=808, col_offset=8), lineno=808, col_offset=8), If(Compare(Name('d1', Load(), lineno=810, col_offset=11), [NotEq()], [Name('d2', Load(), lineno=810, col_offset=17)], lineno=810, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=811, col_offset=12)], BinOp(Str('%s != %s', lineno=811, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=811, col_offset=40), [Name('d1', Load(), lineno=811, col_offset=50), Name('True', Load(), lineno=811, col_offset=54)], [], None, None, lineno=811, col_offset=40), Call(Name('safe_repr', Load(), lineno=811, col_offset=61), [Name('d2', Load(), lineno=811, col_offset=71), Name('True', Load(), lineno=811, col_offset=75)], [], None, None, lineno=811, col_offset=61)], Load(), lineno=811, col_offset=40), lineno=811, col_offset=26), lineno=811, col_offset=12), Assign([Name('diff', Store(), lineno=812, col_offset=12)], BinOp(Str('\n', lineno=812, col_offset=20), Add(), Call(Attribute(Str('\n', lineno=812, col_offset=27), 'join', Load(), lineno=812, col_offset=27), [Call(Attribute(Name('difflib', Load(), lineno=812, col_offset=37), 'ndiff', Load(), lineno=812, col_offset=37), [Call(Attribute(Call(Attribute(Name('pprint', Load(), lineno=813, col_offset=27), 'pformat', Load(), lineno=813, col_offset=27), [Name('d1', Load(), lineno=813, col_offset=42)], [], None, None, lineno=813, col_offset=27), 'splitlines', Load(), lineno=813, col_offset=27), [], [], None, None, lineno=813, col_offset=27), Call(Attribute(Call(Attribute(Name('pprint', Load(), lineno=814, col_offset=27), 'pformat', Load(), lineno=814, col_offset=27), [Name('d2', Load(), lineno=814, col_offset=42)], [], None, None, lineno=814, col_offset=27), 'splitlines', Load(), lineno=814, col_offset=27), [], [], None, None, lineno=814, col_offset=27)], [], None, None, lineno=812, col_offset=37)], [], None, None, lineno=812, col_offset=27), lineno=812, col_offset=20), lineno=812, col_offset=12), Assign([Name('standardMsg', Store(), lineno=815, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=815, col_offset=26), '_truncateMessage', Load(), lineno=815, col_offset=26), [Name('standardMsg', Load(), lineno=815, col_offset=48), Name('diff', Load(), lineno=815, col_offset=61)], [], None, None, lineno=815, col_offset=26), lineno=815, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=816, col_offset=12), 'fail', Load(), lineno=816, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=816, col_offset=22), '_formatMessage', Load(), lineno=816, col_offset=22), [Name('msg', Load(), lineno=816, col_offset=42), Name('standardMsg', Load(), lineno=816, col_offset=47)], [], None, None, lineno=816, col_offset=22)], [], None, None, lineno=816, col_offset=12), lineno=816, col_offset=12)], [], lineno=810, col_offset=8)], [], lineno=806, col_offset=4), FunctionDef('assertDictContainsSubset', arguments([Name('self', Param(), lineno=818, col_offset=33), Name('expected', Param(), lineno=818, col_offset=39), Name('actual', Param(), lineno=818, col_offset=49), Name('msg', Param(), lineno=818, col_offset=57)], None, None, [Name('None', Load(), lineno=818, col_offset=61)]), [Expr(Str('Checks whether actual is a superset of expected.', lineno=819, col_offset=8), lineno=819, col_offset=8), Assign([Name('missing', Store(), lineno=820, col_offset=8)], List([], Load(), lineno=820, col_offset=18), lineno=820, col_offset=8), Assign([Name('mismatched', Store(), lineno=821, col_offset=8)], List([], Load(), lineno=821, col_offset=21), lineno=821, col_offset=8), For(Tuple([Name('key', Store(), lineno=822, col_offset=12), Name('value', Store(), lineno=822, col_offset=17)], Store(), lineno=822, col_offset=12), Call(Attribute(Name('expected', Load(), lineno=822, col_offset=26), 'iteritems', Load(), lineno=822, col_offset=26), [], [], None, None, lineno=822, col_offset=26), [If(Compare(Name('key', Load(), lineno=823, col_offset=15), [NotIn()], [Name('actual', Load(), lineno=823, col_offset=26)], lineno=823, col_offset=15), [Expr(Call(Attribute(Name('missing', Load(), lineno=824, col_offset=16), 'append', Load(), lineno=824, col_offset=16), [Name('key', Load(), lineno=824, col_offset=31)], [], None, None, lineno=824, col_offset=16), lineno=824, col_offset=16)], [If(Compare(Name('value', Load(), lineno=825, col_offset=17), [NotEq()], [Subscript(Name('actual', Load(), lineno=825, col_offset=26), Index(Name('key', Load(), lineno=825, col_offset=33)), Load(), lineno=825, col_offset=26)], lineno=825, col_offset=17), [Expr(Call(Attribute(Name('mismatched', Load(), lineno=826, col_offset=16), 'append', Load(), lineno=826, col_offset=16), [BinOp(Str('%s, expected: %s, actual: %s', lineno=826, col_offset=34), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=827, col_offset=35), [Name('key', Load(), lineno=827, col_offset=45)], [], None, None, lineno=827, col_offset=35), Call(Name('safe_repr', Load(), lineno=827, col_offset=51), [Name('value', Load(), lineno=827, col_offset=61)], [], None, None, lineno=827, col_offset=51), Call(Name('safe_repr', Load(), lineno=828, col_offset=35), [Subscript(Name('actual', Load(), lineno=828, col_offset=45), Index(Name('key', Load(), lineno=828, col_offset=52)), Load(), lineno=828, col_offset=45)], [], None, None, lineno=828, col_offset=35)], Load(), lineno=827, col_offset=35), lineno=826, col_offset=34)], [], None, None, lineno=826, col_offset=16), lineno=826, col_offset=16)], [], lineno=825, col_offset=17)], lineno=823, col_offset=12)], [], lineno=822, col_offset=8), If(UnaryOp(Not(), BoolOp(Or(), [Name('missing', Load(), lineno=830, col_offset=16), Name('mismatched', Load(), lineno=830, col_offset=27)], lineno=830, col_offset=16), lineno=830, col_offset=11), [Return(None, lineno=831, col_offset=12)], [], lineno=830, col_offset=8), Assign([Name('standardMsg', Store(), lineno=833, col_offset=8)], Str('', lineno=833, col_offset=22), lineno=833, col_offset=8), If(Name('missing', Load(), lineno=834, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=835, col_offset=12)], BinOp(Str('Missing: %s', lineno=835, col_offset=26), Mod(), Call(Attribute(Str(',', lineno=835, col_offset=42), 'join', Load(), lineno=835, col_offset=42), [GeneratorExp(Call(Name('safe_repr', Load(), lineno=835, col_offset=51), [Name('m', Load(), lineno=835, col_offset=61)], [], None, None, lineno=835, col_offset=51), [comprehension(Name('m', Store(), lineno=835, col_offset=68), Name('missing', Load(), lineno=836, col_offset=52), [])], lineno=835, col_offset=51)], [], None, None, lineno=835, col_offset=42), lineno=835, col_offset=26), lineno=835, col_offset=12)], [], lineno=834, col_offset=8), If(Name('mismatched', Load(), lineno=837, col_offset=11), [If(Name('standardMsg', Load(), lineno=838, col_offset=15), [AugAssign(Name('standardMsg', Store(), lineno=839, col_offset=16), Add(), Str('; ', lineno=839, col_offset=31), lineno=839, col_offset=16)], [], lineno=838, col_offset=12), AugAssign(Name('standardMsg', Store(), lineno=840, col_offset=12), Add(), BinOp(Str('Mismatched values: %s', lineno=840, col_offset=27), Mod(), Call(Attribute(Str(',', lineno=840, col_offset=53), 'join', Load(), lineno=840, col_offset=53), [Name('mismatched', Load(), lineno=840, col_offset=62)], [], None, None, lineno=840, col_offset=53), lineno=840, col_offset=27), lineno=840, col_offset=12)], [], lineno=837, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=842, col_offset=8), 'fail', Load(), lineno=842, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=842, col_offset=18), '_formatMessage', Load(), lineno=842, col_offset=18), [Name('msg', Load(), lineno=842, col_offset=38), Name('standardMsg', Load(), lineno=842, col_offset=43)], [], None, None, lineno=842, col_offset=18)], [], None, None, lineno=842, col_offset=8), lineno=842, col_offset=8)], [], lineno=818, col_offset=4), FunctionDef('assertItemsEqual', arguments([Name('self', Param(), lineno=844, col_offset=25), Name('expected_seq', Param(), lineno=844, col_offset=31), Name('actual_seq', Param(), lineno=844, col_offset=45), Name('msg', Param(), lineno=844, col_offset=57)], None, None, [Name('None', Load(), lineno=844, col_offset=61)]), [Expr(Str('An unordered sequence / set specific comparison. It asserts that\n        expected_seq and actual_seq contain the same elements. It is\n        the equivalent of::\n\n            self.assertEqual(sorted(expected_seq), sorted(actual_seq))\n\n        Raises with an error message listing which elements of expected_seq\n        are missing from actual_seq and vice versa if any.\n\n        Asserts that each element has the same count in both sequences.\n        Example:\n            - [0, 1, 1] and [1, 0, 1] compare equal.\n            - [0, 0, 1] and [0, 1] compare unequal.\n        ', lineno=858, col_offset=-1), lineno=858, col_offset=-1), With(Call(Attribute(Name('warnings', Load(), lineno=859, col_offset=13), 'catch_warnings', Load(), lineno=859, col_offset=13), [], [], None, None, lineno=859, col_offset=13), None, [If(Attribute(Name('sys', Load(), lineno=860, col_offset=15), 'py3kwarning', Load(), lineno=860, col_offset=15), [For(Name('_msg', Store(), lineno=862, col_offset=20), List([Str('(code|dict|type) inequality comparisons', lineno=862, col_offset=29), Str('builtin_function_or_method order comparisons', lineno=863, col_offset=29), Str('comparing unequal types', lineno=864, col_offset=29)], Load(), lineno=862, col_offset=28), [Expr(Call(Attribute(Name('warnings', Load(), lineno=865, col_offset=20), 'filterwarnings', Load(), lineno=865, col_offset=20), [Str('ignore', lineno=865, col_offset=44), Name('_msg', Load(), lineno=865, col_offset=54), Name('DeprecationWarning', Load(), lineno=865, col_offset=60)], [], None, None, lineno=865, col_offset=20), lineno=865, col_offset=20)], [], lineno=862, col_offset=16)], [], lineno=860, col_offset=12), TryExcept([Assign([Name('expected', Store(), lineno=867, col_offset=16)], Call(Name('sorted', Load(), lineno=867, col_offset=27), [Name('expected_seq', Load(), lineno=867, col_offset=34)], [], None, None, lineno=867, col_offset=27), lineno=867, col_offset=16), Assign([Name('actual', Store(), lineno=868, col_offset=16)], Call(Name('sorted', Load(), lineno=868, col_offset=25), [Name('actual_seq', Load(), lineno=868, col_offset=32)], [], None, None, lineno=868, col_offset=25), lineno=868, col_offset=16)], [ExceptHandler(Name('TypeError', Load(), lineno=869, col_offset=19), None, [Assign([Name('expected', Store(), lineno=871, col_offset=16)], Call(Name('list', Load(), lineno=871, col_offset=27), [Name('expected_seq', Load(), lineno=871, col_offset=32)], [], None, None, lineno=871, col_offset=27), lineno=871, col_offset=16), Assign([Name('actual', Store(), lineno=872, col_offset=16)], Call(Name('list', Load(), lineno=872, col_offset=25), [Name('actual_seq', Load(), lineno=872, col_offset=30)], [], None, None, lineno=872, col_offset=25), lineno=872, col_offset=16), Assign([Tuple([Name('missing', Store(), lineno=873, col_offset=16), Name('unexpected', Store(), lineno=873, col_offset=25)], Store(), lineno=873, col_offset=16)], Call(Name('unorderable_list_difference', Load(), lineno=873, col_offset=38), [Name('expected', Load(), lineno=874, col_offset=20), Name('actual', Load(), lineno=874, col_offset=30)], [keyword('ignore_duplicate', Name('False', Load(), lineno=874, col_offset=55))], None, None, lineno=873, col_offset=38), lineno=873, col_offset=16)], lineno=869, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=877, col_offset=23), 'assertSequenceEqual', Load(), lineno=877, col_offset=23), [Name('expected', Load(), lineno=877, col_offset=48), Name('actual', Load(), lineno=877, col_offset=58)], [keyword('msg', Name('msg', Load(), lineno=877, col_offset=70))], None, None, lineno=877, col_offset=23), lineno=877, col_offset=16)], lineno=866, col_offset=12)], lineno=859, col_offset=13), Assign([Name('errors', Store(), lineno=879, col_offset=8)], List([], Load(), lineno=879, col_offset=17), lineno=879, col_offset=8), If(Name('missing', Load(), lineno=880, col_offset=11), [Expr(Call(Attribute(Name('errors', Load(), lineno=881, col_offset=12), 'append', Load(), lineno=881, col_offset=12), [BinOp(Str('Expected, but missing:\n    %s', lineno=881, col_offset=26), Mod(), Call(Name('safe_repr', Load(), lineno=882, col_offset=27), [Name('missing', Load(), lineno=882, col_offset=37)], [], None, None, lineno=882, col_offset=27), lineno=881, col_offset=26)], [], None, None, lineno=881, col_offset=12), lineno=881, col_offset=12)], [], lineno=880, col_offset=8), If(Name('unexpected', Load(), lineno=883, col_offset=11), [Expr(Call(Attribute(Name('errors', Load(), lineno=884, col_offset=12), 'append', Load(), lineno=884, col_offset=12), [BinOp(Str('Unexpected, but present:\n    %s', lineno=884, col_offset=26), Mod(), Call(Name('safe_repr', Load(), lineno=885, col_offset=27), [Name('unexpected', Load(), lineno=885, col_offset=37)], [], None, None, lineno=885, col_offset=27), lineno=884, col_offset=26)], [], None, None, lineno=884, col_offset=12), lineno=884, col_offset=12)], [], lineno=883, col_offset=8), If(Name('errors', Load(), lineno=886, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=887, col_offset=12)], Call(Attribute(Str('\n', lineno=887, col_offset=26), 'join', Load(), lineno=887, col_offset=26), [Name('errors', Load(), lineno=887, col_offset=36)], [], None, None, lineno=887, col_offset=26), lineno=887, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=888, col_offset=12), 'fail', Load(), lineno=888, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=888, col_offset=22), '_formatMessage', Load(), lineno=888, col_offset=22), [Name('msg', Load(), lineno=888, col_offset=42), Name('standardMsg', Load(), lineno=888, col_offset=47)], [], None, None, lineno=888, col_offset=22)], [], None, None, lineno=888, col_offset=12), lineno=888, col_offset=12)], [], lineno=886, col_offset=8)], [], lineno=844, col_offset=4), FunctionDef('assertMultiLineEqual', arguments([Name('self', Param(), lineno=890, col_offset=29), Name('first', Param(), lineno=890, col_offset=35), Name('second', Param(), lineno=890, col_offset=42), Name('msg', Param(), lineno=890, col_offset=50)], None, None, [Name('None', Load(), lineno=890, col_offset=54)]), [Expr(Str('Assert that two multi-line strings are equal.', lineno=891, col_offset=8), lineno=891, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=892, col_offset=8), 'assertIsInstance', Load(), lineno=892, col_offset=8), [Name('first', Load(), lineno=892, col_offset=30), Name('basestring', Load(), lineno=892, col_offset=37), Str('First argument is not a string', lineno=893, col_offset=16)], [], None, None, lineno=892, col_offset=8), lineno=892, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=894, col_offset=8), 'assertIsInstance', Load(), lineno=894, col_offset=8), [Name('second', Load(), lineno=894, col_offset=30), Name('basestring', Load(), lineno=894, col_offset=38), Str('Second argument is not a string', lineno=895, col_offset=16)], [], None, None, lineno=894, col_offset=8), lineno=894, col_offset=8), If(Compare(Name('first', Load(), lineno=897, col_offset=11), [NotEq()], [Name('second', Load(), lineno=897, col_offset=20)], lineno=897, col_offset=11), [Assign([Name('firstlines', Store(), lineno=898, col_offset=12)], Call(Attribute(Name('first', Load(), lineno=898, col_offset=25), 'splitlines', Load(), lineno=898, col_offset=25), [Name('True', Load(), lineno=898, col_offset=42)], [], None, None, lineno=898, col_offset=25), lineno=898, col_offset=12), Assign([Name('secondlines', Store(), lineno=899, col_offset=12)], Call(Attribute(Name('second', Load(), lineno=899, col_offset=26), 'splitlines', Load(), lineno=899, col_offset=26), [Name('True', Load(), lineno=899, col_offset=44)], [], None, None, lineno=899, col_offset=26), lineno=899, col_offset=12), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=900, col_offset=15), [Name('firstlines', Load(), lineno=900, col_offset=19)], [], None, None, lineno=900, col_offset=15), [Eq()], [Num(1, lineno=900, col_offset=34)], lineno=900, col_offset=15), Compare(Call(Attribute(Name('first', Load(), lineno=900, col_offset=40), 'strip', Load(), lineno=900, col_offset=40), [Str('\r\n', lineno=900, col_offset=52)], [], None, None, lineno=900, col_offset=40), [Eq()], [Name('first', Load(), lineno=900, col_offset=63)], lineno=900, col_offset=40)], lineno=900, col_offset=15), [Assign([Name('firstlines', Store(), lineno=901, col_offset=16)], List([BinOp(Name('first', Load(), lineno=901, col_offset=30), Add(), Str('\n', lineno=901, col_offset=38), lineno=901, col_offset=30)], Load(), lineno=901, col_offset=29), lineno=901, col_offset=16), Assign([Name('secondlines', Store(), lineno=902, col_offset=16)], List([BinOp(Name('second', Load(), lineno=902, col_offset=31), Add(), Str('\n', lineno=902, col_offset=40), lineno=902, col_offset=31)], Load(), lineno=902, col_offset=30), lineno=902, col_offset=16)], [], lineno=900, col_offset=12), Assign([Name('standardMsg', Store(), lineno=903, col_offset=12)], BinOp(Str('%s != %s', lineno=903, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=903, col_offset=40), [Name('first', Load(), lineno=903, col_offset=50), Name('True', Load(), lineno=903, col_offset=57)], [], None, None, lineno=903, col_offset=40), Call(Name('safe_repr', Load(), lineno=904, col_offset=40), [Name('second', Load(), lineno=904, col_offset=50), Name('True', Load(), lineno=904, col_offset=58)], [], None, None, lineno=904, col_offset=40)], Load(), lineno=903, col_offset=40), lineno=903, col_offset=26), lineno=903, col_offset=12), Assign([Name('diff', Store(), lineno=905, col_offset=12)], BinOp(Str('\n', lineno=905, col_offset=19), Add(), Call(Attribute(Str('', lineno=905, col_offset=26), 'join', Load(), lineno=905, col_offset=26), [Call(Attribute(Name('difflib', Load(), lineno=905, col_offset=34), 'ndiff', Load(), lineno=905, col_offset=34), [Name('firstlines', Load(), lineno=905, col_offset=48), Name('secondlines', Load(), lineno=905, col_offset=60)], [], None, None, lineno=905, col_offset=34)], [], None, None, lineno=905, col_offset=26), lineno=905, col_offset=19), lineno=905, col_offset=12), Assign([Name('standardMsg', Store(), lineno=906, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=906, col_offset=26), '_truncateMessage', Load(), lineno=906, col_offset=26), [Name('standardMsg', Load(), lineno=906, col_offset=48), Name('diff', Load(), lineno=906, col_offset=61)], [], None, None, lineno=906, col_offset=26), lineno=906, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=907, col_offset=12), 'fail', Load(), lineno=907, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=907, col_offset=22), '_formatMessage', Load(), lineno=907, col_offset=22), [Name('msg', Load(), lineno=907, col_offset=42), Name('standardMsg', Load(), lineno=907, col_offset=47)], [], None, None, lineno=907, col_offset=22)], [], None, None, lineno=907, col_offset=12), lineno=907, col_offset=12)], [], lineno=897, col_offset=8)], [], lineno=890, col_offset=4), FunctionDef('assertLess', arguments([Name('self', Param(), lineno=909, col_offset=19), Name('a', Param(), lineno=909, col_offset=25), Name('b', Param(), lineno=909, col_offset=28), Name('msg', Param(), lineno=909, col_offset=31)], None, None, [Name('None', Load(), lineno=909, col_offset=35)]), [Expr(Str('Just like self.assertTrue(a < b), but with a nicer default message.', lineno=910, col_offset=8), lineno=910, col_offset=8), If(UnaryOp(Not(), Compare(Name('a', Load(), lineno=911, col_offset=15), [Lt()], [Name('b', Load(), lineno=911, col_offset=19)], lineno=911, col_offset=15), lineno=911, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=912, col_offset=12)], BinOp(Str('%s not less than %s', lineno=912, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=912, col_offset=51), [Name('a', Load(), lineno=912, col_offset=61)], [], None, None, lineno=912, col_offset=51), Call(Name('safe_repr', Load(), lineno=912, col_offset=65), [Name('b', Load(), lineno=912, col_offset=75)], [], None, None, lineno=912, col_offset=65)], Load(), lineno=912, col_offset=51), lineno=912, col_offset=26), lineno=912, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=913, col_offset=12), 'fail', Load(), lineno=913, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=913, col_offset=22), '_formatMessage', Load(), lineno=913, col_offset=22), [Name('msg', Load(), lineno=913, col_offset=42), Name('standardMsg', Load(), lineno=913, col_offset=47)], [], None, None, lineno=913, col_offset=22)], [], None, None, lineno=913, col_offset=12), lineno=913, col_offset=12)], [], lineno=911, col_offset=8)], [], lineno=909, col_offset=4), FunctionDef('assertLessEqual', arguments([Name('self', Param(), lineno=915, col_offset=24), Name('a', Param(), lineno=915, col_offset=30), Name('b', Param(), lineno=915, col_offset=33), Name('msg', Param(), lineno=915, col_offset=36)], None, None, [Name('None', Load(), lineno=915, col_offset=40)]), [Expr(Str('Just like self.assertTrue(a <= b), but with a nicer default message.', lineno=916, col_offset=8), lineno=916, col_offset=8), If(UnaryOp(Not(), Compare(Name('a', Load(), lineno=917, col_offset=15), [LtE()], [Name('b', Load(), lineno=917, col_offset=20)], lineno=917, col_offset=15), lineno=917, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=918, col_offset=12)], BinOp(Str('%s not less than or equal to %s', lineno=918, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=918, col_offset=63), [Name('a', Load(), lineno=918, col_offset=73)], [], None, None, lineno=918, col_offset=63), Call(Name('safe_repr', Load(), lineno=918, col_offset=77), [Name('b', Load(), lineno=918, col_offset=87)], [], None, None, lineno=918, col_offset=77)], Load(), lineno=918, col_offset=63), lineno=918, col_offset=26), lineno=918, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=919, col_offset=12), 'fail', Load(), lineno=919, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=919, col_offset=22), '_formatMessage', Load(), lineno=919, col_offset=22), [Name('msg', Load(), lineno=919, col_offset=42), Name('standardMsg', Load(), lineno=919, col_offset=47)], [], None, None, lineno=919, col_offset=22)], [], None, None, lineno=919, col_offset=12), lineno=919, col_offset=12)], [], lineno=917, col_offset=8)], [], lineno=915, col_offset=4), FunctionDef('assertGreater', arguments([Name('self', Param(), lineno=921, col_offset=22), Name('a', Param(), lineno=921, col_offset=28), Name('b', Param(), lineno=921, col_offset=31), Name('msg', Param(), lineno=921, col_offset=34)], None, None, [Name('None', Load(), lineno=921, col_offset=38)]), [Expr(Str('Just like self.assertTrue(a > b), but with a nicer default message.', lineno=922, col_offset=8), lineno=922, col_offset=8), If(UnaryOp(Not(), Compare(Name('a', Load(), lineno=923, col_offset=15), [Gt()], [Name('b', Load(), lineno=923, col_offset=19)], lineno=923, col_offset=15), lineno=923, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=924, col_offset=12)], BinOp(Str('%s not greater than %s', lineno=924, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=924, col_offset=54), [Name('a', Load(), lineno=924, col_offset=64)], [], None, None, lineno=924, col_offset=54), Call(Name('safe_repr', Load(), lineno=924, col_offset=68), [Name('b', Load(), lineno=924, col_offset=78)], [], None, None, lineno=924, col_offset=68)], Load(), lineno=924, col_offset=54), lineno=924, col_offset=26), lineno=924, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=925, col_offset=12), 'fail', Load(), lineno=925, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=925, col_offset=22), '_formatMessage', Load(), lineno=925, col_offset=22), [Name('msg', Load(), lineno=925, col_offset=42), Name('standardMsg', Load(), lineno=925, col_offset=47)], [], None, None, lineno=925, col_offset=22)], [], None, None, lineno=925, col_offset=12), lineno=925, col_offset=12)], [], lineno=923, col_offset=8)], [], lineno=921, col_offset=4), FunctionDef('assertGreaterEqual', arguments([Name('self', Param(), lineno=927, col_offset=27), Name('a', Param(), lineno=927, col_offset=33), Name('b', Param(), lineno=927, col_offset=36), Name('msg', Param(), lineno=927, col_offset=39)], None, None, [Name('None', Load(), lineno=927, col_offset=43)]), [Expr(Str('Just like self.assertTrue(a >= b), but with a nicer default message.', lineno=928, col_offset=8), lineno=928, col_offset=8), If(UnaryOp(Not(), Compare(Name('a', Load(), lineno=929, col_offset=15), [GtE()], [Name('b', Load(), lineno=929, col_offset=20)], lineno=929, col_offset=15), lineno=929, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=930, col_offset=12)], BinOp(Str('%s not greater than or equal to %s', lineno=930, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=930, col_offset=66), [Name('a', Load(), lineno=930, col_offset=76)], [], None, None, lineno=930, col_offset=66), Call(Name('safe_repr', Load(), lineno=930, col_offset=80), [Name('b', Load(), lineno=930, col_offset=90)], [], None, None, lineno=930, col_offset=80)], Load(), lineno=930, col_offset=66), lineno=930, col_offset=26), lineno=930, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=931, col_offset=12), 'fail', Load(), lineno=931, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=931, col_offset=22), '_formatMessage', Load(), lineno=931, col_offset=22), [Name('msg', Load(), lineno=931, col_offset=42), Name('standardMsg', Load(), lineno=931, col_offset=47)], [], None, None, lineno=931, col_offset=22)], [], None, None, lineno=931, col_offset=12), lineno=931, col_offset=12)], [], lineno=929, col_offset=8)], [], lineno=927, col_offset=4), FunctionDef('assertIsNone', arguments([Name('self', Param(), lineno=933, col_offset=21), Name('obj', Param(), lineno=933, col_offset=27), Name('msg', Param(), lineno=933, col_offset=32)], None, None, [Name('None', Load(), lineno=933, col_offset=36)]), [Expr(Str('Same as self.assertTrue(obj is None), with a nicer default message.', lineno=934, col_offset=8), lineno=934, col_offset=8), If(Compare(Name('obj', Load(), lineno=935, col_offset=11), [IsNot()], [Name('None', Load(), lineno=935, col_offset=22)], lineno=935, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=936, col_offset=12)], BinOp(Str('%s is not None', lineno=936, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=936, col_offset=46), [Name('obj', Load(), lineno=936, col_offset=56)], [], None, None, lineno=936, col_offset=46)], Load(), lineno=936, col_offset=46), lineno=936, col_offset=26), lineno=936, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=937, col_offset=12), 'fail', Load(), lineno=937, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=937, col_offset=22), '_formatMessage', Load(), lineno=937, col_offset=22), [Name('msg', Load(), lineno=937, col_offset=42), Name('standardMsg', Load(), lineno=937, col_offset=47)], [], None, None, lineno=937, col_offset=22)], [], None, None, lineno=937, col_offset=12), lineno=937, col_offset=12)], [], lineno=935, col_offset=8)], [], lineno=933, col_offset=4), FunctionDef('assertIsNotNone', arguments([Name('self', Param(), lineno=939, col_offset=24), Name('obj', Param(), lineno=939, col_offset=30), Name('msg', Param(), lineno=939, col_offset=35)], None, None, [Name('None', Load(), lineno=939, col_offset=39)]), [Expr(Str('Included for symmetry with assertIsNone.', lineno=940, col_offset=8), lineno=940, col_offset=8), If(Compare(Name('obj', Load(), lineno=941, col_offset=11), [Is()], [Name('None', Load(), lineno=941, col_offset=18)], lineno=941, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=942, col_offset=12)], Str('unexpectedly None', lineno=942, col_offset=26), lineno=942, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=943, col_offset=12), 'fail', Load(), lineno=943, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=943, col_offset=22), '_formatMessage', Load(), lineno=943, col_offset=22), [Name('msg', Load(), lineno=943, col_offset=42), Name('standardMsg', Load(), lineno=943, col_offset=47)], [], None, None, lineno=943, col_offset=22)], [], None, None, lineno=943, col_offset=12), lineno=943, col_offset=12)], [], lineno=941, col_offset=8)], [], lineno=939, col_offset=4), FunctionDef('assertIsInstance', arguments([Name('self', Param(), lineno=945, col_offset=25), Name('obj', Param(), lineno=945, col_offset=31), Name('cls', Param(), lineno=945, col_offset=36), Name('msg', Param(), lineno=945, col_offset=41)], None, None, [Name('None', Load(), lineno=945, col_offset=45)]), [Expr(Str('Same as self.assertTrue(isinstance(obj, cls)), with a nicer\n        default message.', lineno=947, col_offset=-1), lineno=947, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=948, col_offset=15), [Name('obj', Load(), lineno=948, col_offset=26), Name('cls', Load(), lineno=948, col_offset=31)], [], None, None, lineno=948, col_offset=15), lineno=948, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=949, col_offset=12)], BinOp(Str('%s is not an instance of %r', lineno=949, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=949, col_offset=59), [Name('obj', Load(), lineno=949, col_offset=69)], [], None, None, lineno=949, col_offset=59), Name('cls', Load(), lineno=949, col_offset=75)], Load(), lineno=949, col_offset=59), lineno=949, col_offset=26), lineno=949, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=950, col_offset=12), 'fail', Load(), lineno=950, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=950, col_offset=22), '_formatMessage', Load(), lineno=950, col_offset=22), [Name('msg', Load(), lineno=950, col_offset=42), Name('standardMsg', Load(), lineno=950, col_offset=47)], [], None, None, lineno=950, col_offset=22)], [], None, None, lineno=950, col_offset=12), lineno=950, col_offset=12)], [], lineno=948, col_offset=8)], [], lineno=945, col_offset=4), FunctionDef('assertNotIsInstance', arguments([Name('self', Param(), lineno=952, col_offset=28), Name('obj', Param(), lineno=952, col_offset=34), Name('cls', Param(), lineno=952, col_offset=39), Name('msg', Param(), lineno=952, col_offset=44)], None, None, [Name('None', Load(), lineno=952, col_offset=48)]), [Expr(Str('Included for symmetry with assertIsInstance.', lineno=953, col_offset=8), lineno=953, col_offset=8), If(Call(Name('isinstance', Load(), lineno=954, col_offset=11), [Name('obj', Load(), lineno=954, col_offset=22), Name('cls', Load(), lineno=954, col_offset=27)], [], None, None, lineno=954, col_offset=11), [Assign([Name('standardMsg', Store(), lineno=955, col_offset=12)], BinOp(Str('%s is an instance of %r', lineno=955, col_offset=26), Mod(), Tuple([Call(Name('safe_repr', Load(), lineno=955, col_offset=55), [Name('obj', Load(), lineno=955, col_offset=65)], [], None, None, lineno=955, col_offset=55), Name('cls', Load(), lineno=955, col_offset=71)], Load(), lineno=955, col_offset=55), lineno=955, col_offset=26), lineno=955, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=956, col_offset=12), 'fail', Load(), lineno=956, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=956, col_offset=22), '_formatMessage', Load(), lineno=956, col_offset=22), [Name('msg', Load(), lineno=956, col_offset=42), Name('standardMsg', Load(), lineno=956, col_offset=47)], [], None, None, lineno=956, col_offset=22)], [], None, None, lineno=956, col_offset=12), lineno=956, col_offset=12)], [], lineno=954, col_offset=8)], [], lineno=952, col_offset=4), FunctionDef('assertRaisesRegexp', arguments([Name('self', Param(), lineno=958, col_offset=27), Name('expected_exception', Param(), lineno=958, col_offset=33), Name('expected_regexp', Param(), lineno=958, col_offset=53), Name('callable_obj', Param(), lineno=959, col_offset=27)], 'args', 'kwargs', [Name('None', Load(), lineno=959, col_offset=40)]), [Expr(Str('Asserts that the message in a raised exception matches a regexp.\n\n        Args:\n            expected_exception: Exception class expected to be raised.\n            expected_regexp: Regexp (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        ', lineno=969, col_offset=-1), lineno=969, col_offset=-1), Assign([Name('context', Store(), lineno=970, col_offset=8)], Call(Name('_AssertRaisesContext', Load(), lineno=970, col_offset=18), [Name('expected_exception', Load(), lineno=970, col_offset=39), Name('self', Load(), lineno=970, col_offset=59), Name('expected_regexp', Load(), lineno=970, col_offset=65)], [], None, None, lineno=970, col_offset=18), lineno=970, col_offset=8), If(Compare(Name('callable_obj', Load(), lineno=971, col_offset=11), [Is()], [Name('None', Load(), lineno=971, col_offset=27)], lineno=971, col_offset=11), [Return(Name('context', Load(), lineno=972, col_offset=19), lineno=972, col_offset=12)], [], lineno=971, col_offset=8), With(Name('context', Load(), lineno=973, col_offset=13), None, [Expr(Call(Name('callable_obj', Load(), lineno=974, col_offset=12), [], [], Name('args', Load(), lineno=974, col_offset=26), Name('kwargs', Load(), lineno=974, col_offset=34), lineno=974, col_offset=12), lineno=974, col_offset=12)], lineno=973, col_offset=13)], [], lineno=958, col_offset=4), FunctionDef('assertRegexpMatches', arguments([Name('self', Param(), lineno=976, col_offset=28), Name('text', Param(), lineno=976, col_offset=34), Name('expected_regexp', Param(), lineno=976, col_offset=40), Name('msg', Param(), lineno=976, col_offset=57)], None, None, [Name('None', Load(), lineno=976, col_offset=61)]), [Expr(Str('Fail the test unless the text matches the regular expression.', lineno=977, col_offset=8), lineno=977, col_offset=8), If(Call(Name('isinstance', Load(), lineno=978, col_offset=11), [Name('expected_regexp', Load(), lineno=978, col_offset=22), Name('basestring', Load(), lineno=978, col_offset=39)], [], None, None, lineno=978, col_offset=11), [Assign([Name('expected_regexp', Store(), lineno=979, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=979, col_offset=30), 'compile', Load(), lineno=979, col_offset=30), [Name('expected_regexp', Load(), lineno=979, col_offset=41)], [], None, None, lineno=979, col_offset=30), lineno=979, col_offset=12)], [], lineno=978, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('expected_regexp', Load(), lineno=980, col_offset=15), 'search', Load(), lineno=980, col_offset=15), [Name('text', Load(), lineno=980, col_offset=38)], [], None, None, lineno=980, col_offset=15), lineno=980, col_offset=11), [Assign([Name('msg', Store(), lineno=981, col_offset=12)], BoolOp(Or(), [Name('msg', Load(), lineno=981, col_offset=18), Str("Regexp didn't match", lineno=981, col_offset=25)], lineno=981, col_offset=18), lineno=981, col_offset=12), Assign([Name('msg', Store(), lineno=982, col_offset=12)], BinOp(Str('%s: %r not found in %r', lineno=982, col_offset=18), Mod(), Tuple([Name('msg', Load(), lineno=982, col_offset=46), Attribute(Name('expected_regexp', Load(), lineno=982, col_offset=51), 'pattern', Load(), lineno=982, col_offset=51), Name('text', Load(), lineno=982, col_offset=76)], Load(), lineno=982, col_offset=46), lineno=982, col_offset=18), lineno=982, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=983, col_offset=18), 'failureException', Load(), lineno=983, col_offset=18), [Name('msg', Load(), lineno=983, col_offset=40)], [], None, None, lineno=983, col_offset=18), None, None, lineno=983, col_offset=12)], [], lineno=980, col_offset=8)], [], lineno=976, col_offset=4), FunctionDef('assertNotRegexpMatches', arguments([Name('self', Param(), lineno=985, col_offset=31), Name('text', Param(), lineno=985, col_offset=37), Name('unexpected_regexp', Param(), lineno=985, col_offset=43), Name('msg', Param(), lineno=985, col_offset=62)], None, None, [Name('None', Load(), lineno=985, col_offset=66)]), [Expr(Str('Fail the test if the text matches the regular expression.', lineno=986, col_offset=8), lineno=986, col_offset=8), If(Call(Name('isinstance', Load(), lineno=987, col_offset=11), [Name('unexpected_regexp', Load(), lineno=987, col_offset=22), Name('basestring', Load(), lineno=987, col_offset=41)], [], None, None, lineno=987, col_offset=11), [Assign([Name('unexpected_regexp', Store(), lineno=988, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=988, col_offset=32), 'compile', Load(), lineno=988, col_offset=32), [Name('unexpected_regexp', Load(), lineno=988, col_offset=43)], [], None, None, lineno=988, col_offset=32), lineno=988, col_offset=12)], [], lineno=987, col_offset=8), Assign([Name('match', Store(), lineno=989, col_offset=8)], Call(Attribute(Name('unexpected_regexp', Load(), lineno=989, col_offset=16), 'search', Load(), lineno=989, col_offset=16), [Name('text', Load(), lineno=989, col_offset=41)], [], None, None, lineno=989, col_offset=16), lineno=989, col_offset=8), If(Name('match', Load(), lineno=990, col_offset=11), [Assign([Name('msg', Store(), lineno=991, col_offset=12)], BoolOp(Or(), [Name('msg', Load(), lineno=991, col_offset=18), Str('Regexp matched', lineno=991, col_offset=25)], lineno=991, col_offset=18), lineno=991, col_offset=12), Assign([Name('msg', Store(), lineno=992, col_offset=12)], BinOp(Str('%s: %r matches %r in %r', lineno=992, col_offset=18), Mod(), Tuple([Name('msg', Load(), lineno=992, col_offset=47), Subscript(Name('text', Load(), lineno=993, col_offset=47), Slice(Call(Attribute(Name('match', Load(), lineno=993, col_offset=52), 'start', Load(), lineno=993, col_offset=52), [], [], None, None, lineno=993, col_offset=52), Call(Attribute(Name('match', Load(), lineno=993, col_offset=66), 'end', Load(), lineno=993, col_offset=66), [], [], None, None, lineno=993, col_offset=66), None), Load(), lineno=993, col_offset=47), Attribute(Name('unexpected_regexp', Load(), lineno=994, col_offset=47), 'pattern', Load(), lineno=994, col_offset=47), Name('text', Load(), lineno=995, col_offset=47)], Load(), lineno=992, col_offset=47), lineno=992, col_offset=18), lineno=992, col_offset=12), Raise(Call(Attribute(Name('self', Load(), lineno=996, col_offset=18), 'failureException', Load(), lineno=996, col_offset=18), [Name('msg', Load(), lineno=996, col_offset=40)], [], None, None, lineno=996, col_offset=18), None, None, lineno=996, col_offset=12)], [], lineno=990, col_offset=8)], [], lineno=985, col_offset=4)], [], lineno=129, col_offset=0), ClassDef('FunctionTestCase', [Name('TestCase', Load(), lineno=999, col_offset=23)], [Expr(Str("A test case that wraps a test function.\n\n    This is useful for slipping pre-existing test functions into the\n    unittest framework. Optionally, set-up and tidy-up functions can be\n    supplied. As with TestCase, the tidy-up ('tearDown') function will\n    always be called if the set-up ('setUp') function ran successfully.\n    ", lineno=1006, col_offset=-1), lineno=1006, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1008, col_offset=17), Name('testFunc', Param(), lineno=1008, col_offset=23), Name('setUp', Param(), lineno=1008, col_offset=33), Name('tearDown', Param(), lineno=1008, col_offset=45), Name('description', Param(), lineno=1008, col_offset=60)], None, None, [Name('None', Load(), lineno=1008, col_offset=39), Name('None', Load(), lineno=1008, col_offset=54), Name('None', Load(), lineno=1008, col_offset=72)]), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=1009, col_offset=8), [Name('FunctionTestCase', Load(), lineno=1009, col_offset=14), Name('self', Load(), lineno=1009, col_offset=32)], [], None, None, lineno=1009, col_offset=8), '__init__', Load(), lineno=1009, col_offset=8), [], [], None, None, lineno=1009, col_offset=8), lineno=1009, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1010, col_offset=8), '_setUpFunc', Store(), lineno=1010, col_offset=8)], Name('setUp', Load(), lineno=1010, col_offset=26), lineno=1010, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1011, col_offset=8), '_tearDownFunc', Store(), lineno=1011, col_offset=8)], Name('tearDown', Load(), lineno=1011, col_offset=29), lineno=1011, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1012, col_offset=8), '_testFunc', Store(), lineno=1012, col_offset=8)], Name('testFunc', Load(), lineno=1012, col_offset=25), lineno=1012, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1013, col_offset=8), '_description', Store(), lineno=1013, col_offset=8)], Name('description', Load(), lineno=1013, col_offset=28), lineno=1013, col_offset=8)], [], lineno=1008, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=1015, col_offset=14)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=1016, col_offset=11), '_setUpFunc', Load(), lineno=1016, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1016, col_offset=34)], lineno=1016, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1017, col_offset=12), '_setUpFunc', Load(), lineno=1017, col_offset=12), [], [], None, None, lineno=1017, col_offset=12), lineno=1017, col_offset=12)], [], lineno=1016, col_offset=8)], [], lineno=1015, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=1019, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=1020, col_offset=11), '_tearDownFunc', Load(), lineno=1020, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1020, col_offset=37)], lineno=1020, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1021, col_offset=12), '_tearDownFunc', Load(), lineno=1021, col_offset=12), [], [], None, None, lineno=1021, col_offset=12), lineno=1021, col_offset=12)], [], lineno=1020, col_offset=8)], [], lineno=1019, col_offset=4), FunctionDef('runTest', arguments([Name('self', Param(), lineno=1023, col_offset=16)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1024, col_offset=8), '_testFunc', Load(), lineno=1024, col_offset=8), [], [], None, None, lineno=1024, col_offset=8), lineno=1024, col_offset=8)], [], lineno=1023, col_offset=4), FunctionDef('id', arguments([Name('self', Param(), lineno=1026, col_offset=11)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=1027, col_offset=15), '_testFunc', Load(), lineno=1027, col_offset=15), '__name__', Load(), lineno=1027, col_offset=15), lineno=1027, col_offset=8)], [], lineno=1026, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=1029, col_offset=15), Name('other', Param(), lineno=1029, col_offset=21)], None, None, []), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1030, col_offset=15), [Name('other', Load(), lineno=1030, col_offset=26), Attribute(Name('self', Load(), lineno=1030, col_offset=33), '__class__', Load(), lineno=1030, col_offset=33)], [], None, None, lineno=1030, col_offset=15), lineno=1030, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=1031, col_offset=19), lineno=1031, col_offset=12)], [], lineno=1030, col_offset=8), Return(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=1033, col_offset=15), '_setUpFunc', Load(), lineno=1033, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=1033, col_offset=34), '_setUpFunc', Load(), lineno=1033, col_offset=34)], lineno=1033, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=1034, col_offset=15), '_tearDownFunc', Load(), lineno=1034, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=1034, col_offset=37), '_tearDownFunc', Load(), lineno=1034, col_offset=37)], lineno=1034, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=1035, col_offset=15), '_testFunc', Load(), lineno=1035, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=1035, col_offset=33), '_testFunc', Load(), lineno=1035, col_offset=33)], lineno=1035, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=1036, col_offset=15), '_description', Load(), lineno=1036, col_offset=15), [Eq()], [Attribute(Name('other', Load(), lineno=1036, col_offset=36), '_description', Load(), lineno=1036, col_offset=36)], lineno=1036, col_offset=15)], lineno=1033, col_offset=15), lineno=1033, col_offset=8)], [], lineno=1029, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=1038, col_offset=15), Name('other', Param(), lineno=1038, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=1039, col_offset=19), [Eq()], [Name('other', Load(), lineno=1039, col_offset=27)], lineno=1039, col_offset=19), lineno=1039, col_offset=15), lineno=1039, col_offset=8)], [], lineno=1038, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=1041, col_offset=17)], None, None, []), [Return(Call(Name('hash', Load(), lineno=1042, col_offset=15), [Tuple([Call(Name('type', Load(), lineno=1042, col_offset=21), [Name('self', Load(), lineno=1042, col_offset=26)], [], None, None, lineno=1042, col_offset=21), Attribute(Name('self', Load(), lineno=1042, col_offset=33), '_setUpFunc', Load(), lineno=1042, col_offset=33), Attribute(Name('self', Load(), lineno=1042, col_offset=50), '_tearDownFunc', Load(), lineno=1042, col_offset=50), Attribute(Name('self', Load(), lineno=1043, col_offset=21), '_testFunc', Load(), lineno=1043, col_offset=21), Attribute(Name('self', Load(), lineno=1043, col_offset=37), '_description', Load(), lineno=1043, col_offset=37)], Load(), lineno=1042, col_offset=21)], [], None, None, lineno=1042, col_offset=15), lineno=1042, col_offset=8)], [], lineno=1041, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=1045, col_offset=16)], None, None, []), [Return(BinOp(Str('%s (%s)', lineno=1046, col_offset=15), Mod(), Tuple([Call(Name('strclass', Load(), lineno=1046, col_offset=28), [Attribute(Name('self', Load(), lineno=1046, col_offset=37), '__class__', Load(), lineno=1046, col_offset=37)], [], None, None, lineno=1046, col_offset=28), Attribute(Attribute(Name('self', Load(), lineno=1047, col_offset=28), '_testFunc', Load(), lineno=1047, col_offset=28), '__name__', Load(), lineno=1047, col_offset=28)], Load(), lineno=1046, col_offset=28), lineno=1046, col_offset=15), lineno=1046, col_offset=8)], [], lineno=1045, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=1049, col_offset=17)], None, None, []), [Return(BinOp(Str('<%s tec=%s>', lineno=1050, col_offset=15), Mod(), Tuple([Call(Name('strclass', Load(), lineno=1050, col_offset=32), [Attribute(Name('self', Load(), lineno=1050, col_offset=41), '__class__', Load(), lineno=1050, col_offset=41)], [], None, None, lineno=1050, col_offset=32), Attribute(Name('self', Load(), lineno=1051, col_offset=37), '_testFunc', Load(), lineno=1051, col_offset=37)], Load(), lineno=1050, col_offset=32), lineno=1050, col_offset=15), lineno=1050, col_offset=8)], [], lineno=1049, col_offset=4), FunctionDef('shortDescription', arguments([Name('self', Param(), lineno=1053, col_offset=25)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=1054, col_offset=11), '_description', Load(), lineno=1054, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1054, col_offset=36)], lineno=1054, col_offset=11), [Return(Attribute(Name('self', Load(), lineno=1055, col_offset=19), '_description', Load(), lineno=1055, col_offset=19), lineno=1055, col_offset=12)], [], lineno=1054, col_offset=8), Assign([Name('doc', Store(), lineno=1056, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1056, col_offset=14), '_testFunc', Load(), lineno=1056, col_offset=14), '__doc__', Load(), lineno=1056, col_offset=14), lineno=1056, col_offset=8), Return(BoolOp(Or(), [BoolOp(And(), [Name('doc', Load(), lineno=1057, col_offset=15), Call(Attribute(Subscript(Call(Attribute(Name('doc', Load(), lineno=1057, col_offset=23), 'split', Load(), lineno=1057, col_offset=23), [Str('\n', lineno=1057, col_offset=33)], [], None, None, lineno=1057, col_offset=23), Index(Num(0, lineno=1057, col_offset=39)), Load(), lineno=1057, col_offset=23), 'strip', Load(), lineno=1057, col_offset=23), [], [], None, None, lineno=1057, col_offset=23)], lineno=1057, col_offset=15), Name('None', Load(), lineno=1057, col_offset=53)], lineno=1057, col_offset=15), lineno=1057, col_offset=8)], [], lineno=1053, col_offset=4)], [], lineno=999, col_offset=0)])
