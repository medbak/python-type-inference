Module([ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=1, col_offset=0), Import([alias('json.encoder', None)], lineno=3, col_offset=0), ImportFrom('json', [alias('dumps', None)], 0, lineno=4, col_offset=0), ImportFrom('collections', [alias('OrderedDict', None)], 0, lineno=5, col_offset=0), Assign([Name('CASES', Store(), lineno=7, col_offset=0)], List([Tuple([Str(u'/\\"\ucafe\ubabe\uab98\ufcde\ubcda\uef4a\x08\x0c\n\r\t`1~!@#$%^&*()_+-=[]{}|;:\',./<>?', lineno=8, col_offset=5), Str('"/\\\\\\"\\ucafe\\ubabe\\uab98\\ufcde\\ubcda\\uef4a\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:\',./<>?"', lineno=8, col_offset=96)], Load(), lineno=8, col_offset=5), Tuple([Str(u'\u0123\u4567\u89ab\ucdef\uabcd\uef4a', lineno=9, col_offset=5), Str('"\\u0123\\u4567\\u89ab\\ucdef\\uabcd\\uef4a"', lineno=9, col_offset=46)], Load(), lineno=9, col_offset=5), Tuple([Str(u'controls', lineno=10, col_offset=5), Str('"controls"', lineno=10, col_offset=18)], Load(), lineno=10, col_offset=5), Tuple([Str(u'\x08\x0c\n\r\t', lineno=11, col_offset=5), Str('"\\b\\f\\n\\r\\t"', lineno=11, col_offset=24)], Load(), lineno=11, col_offset=5), Tuple([Str(u'{"object with 1 member":["array with 1 element"]}', lineno=12, col_offset=5), Str('"{\\"object with 1 member\\":[\\"array with 1 element\\"]}"', lineno=12, col_offset=59)], Load(), lineno=12, col_offset=5), Tuple([Str(u' s p a c e d ', lineno=13, col_offset=5), Str('" s p a c e d "', lineno=13, col_offset=23)], Load(), lineno=13, col_offset=5), Tuple([Str(u'\U0001d120', lineno=14, col_offset=5), Str('"\\ud834\\udd20"', lineno=14, col_offset=20)], Load(), lineno=14, col_offset=5), Tuple([Str(u'\u03b1\u03a9', lineno=15, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=15, col_offset=22)], Load(), lineno=15, col_offset=5), Tuple([Str('\xce\xb1\xce\xa9', lineno=16, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=16, col_offset=25)], Load(), lineno=16, col_offset=5), Tuple([Str(u'\u03b1\u03a9', lineno=17, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=17, col_offset=22)], Load(), lineno=17, col_offset=5), Tuple([Str('\xce\xb1\xce\xa9', lineno=18, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=18, col_offset=25)], Load(), lineno=18, col_offset=5), Tuple([Str(u'\u03b1\u03a9', lineno=19, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=19, col_offset=22)], Load(), lineno=19, col_offset=5), Tuple([Str(u'\u03b1\u03a9', lineno=20, col_offset=5), Str('"\\u03b1\\u03a9"', lineno=20, col_offset=22)], Load(), lineno=20, col_offset=5), Tuple([Str(u"`1~!@#$%^&*()_+-={':[,]}|;.</>?", lineno=21, col_offset=5), Str('"`1~!@#$%^&*()_+-={\':[,]}|;.</>?"', lineno=21, col_offset=41)], Load(), lineno=21, col_offset=5), Tuple([Str(u'\x08\x0c\n\r\t', lineno=22, col_offset=5), Str('"\\b\\f\\n\\r\\t"', lineno=22, col_offset=24)], Load(), lineno=22, col_offset=5), Tuple([Str(u'\u0123\u4567\u89ab\ucdef\uabcd\uef4a', lineno=23, col_offset=5), Str('"\\u0123\\u4567\\u89ab\\ucdef\\uabcd\\uef4a"', lineno=23, col_offset=46)], Load(), lineno=23, col_offset=5)], Load(), lineno=7, col_offset=8), lineno=7, col_offset=0), ClassDef('TestEncodeBaseStringAscii', [Name('TestCase', Load(), lineno=26, col_offset=32)], [FunctionDef('test_py_encode_basestring_ascii', arguments([Name('self', Param(), lineno=27, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=28, col_offset=8), '_test_encode_basestring_ascii', Load(), lineno=28, col_offset=8), [Attribute(Attribute(Name('json', Load(), lineno=28, col_offset=43), 'encoder', Load(), lineno=28, col_offset=43), 'py_encode_basestring_ascii', Load(), lineno=28, col_offset=43)], [], None, None, lineno=28, col_offset=8), lineno=28, col_offset=8)], [], lineno=27, col_offset=4), FunctionDef('test_c_encode_basestring_ascii', arguments([Name('self', Param(), lineno=30, col_offset=39)], None, None, []), [If(UnaryOp(Not(), Attribute(Attribute(Name('json', Load(), lineno=31, col_offset=15), 'encoder', Load(), lineno=31, col_offset=15), 'c_encode_basestring_ascii', Load(), lineno=31, col_offset=15), lineno=31, col_offset=11), [Return(None, lineno=32, col_offset=12)], [], lineno=31, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=8), '_test_encode_basestring_ascii', Load(), lineno=33, col_offset=8), [Attribute(Attribute(Name('json', Load(), lineno=33, col_offset=43), 'encoder', Load(), lineno=33, col_offset=43), 'c_encode_basestring_ascii', Load(), lineno=33, col_offset=43)], [], None, None, lineno=33, col_offset=8), lineno=33, col_offset=8)], [], lineno=30, col_offset=4), FunctionDef('_test_encode_basestring_ascii', arguments([Name('self', Param(), lineno=35, col_offset=38), Name('encode_basestring_ascii', Param(), lineno=35, col_offset=44)], None, None, []), [Assign([Name('fname', Store(), lineno=36, col_offset=8)], Attribute(Name('encode_basestring_ascii', Load(), lineno=36, col_offset=16), '__name__', Load(), lineno=36, col_offset=16), lineno=36, col_offset=8), For(Tuple([Name('input_string', Store(), lineno=37, col_offset=12), Name('expect', Store(), lineno=37, col_offset=26)], Store(), lineno=37, col_offset=12), Name('CASES', Load(), lineno=37, col_offset=36), [Assign([Name('result', Store(), lineno=38, col_offset=12)], Call(Name('encode_basestring_ascii', Load(), lineno=38, col_offset=21), [Name('input_string', Load(), lineno=38, col_offset=45)], [], None, None, lineno=38, col_offset=21), lineno=38, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=12), 'assertEqual', Load(), lineno=39, col_offset=12), [Name('result', Load(), lineno=39, col_offset=29), Name('expect', Load(), lineno=39, col_offset=37), Call(Attribute(Str('{0!r} != {1!r} for {2}({3!r})', lineno=40, col_offset=16), 'format', Load(), lineno=40, col_offset=16), [Name('result', Load(), lineno=41, col_offset=20), Name('expect', Load(), lineno=41, col_offset=28), Name('fname', Load(), lineno=41, col_offset=36), Name('input_string', Load(), lineno=41, col_offset=43)], [], None, None, lineno=40, col_offset=16)], [], None, None, lineno=39, col_offset=12), lineno=39, col_offset=12)], [], lineno=37, col_offset=8)], [], lineno=35, col_offset=4), FunctionDef('test_ordered_dict', arguments([Name('self', Param(), lineno=43, col_offset=26)], None, None, []), [Assign([Name('items', Store(), lineno=45, col_offset=8)], List([Tuple([Str('one', lineno=45, col_offset=18), Num(1, lineno=45, col_offset=25)], Load(), lineno=45, col_offset=18), Tuple([Str('two', lineno=45, col_offset=30), Num(2, lineno=45, col_offset=37)], Load(), lineno=45, col_offset=30), Tuple([Str('three', lineno=45, col_offset=42), Num(3, lineno=45, col_offset=51)], Load(), lineno=45, col_offset=42), Tuple([Str('four', lineno=45, col_offset=56), Num(4, lineno=45, col_offset=64)], Load(), lineno=45, col_offset=56), Tuple([Str('five', lineno=45, col_offset=69), Num(5, lineno=45, col_offset=77)], Load(), lineno=45, col_offset=69)], Load(), lineno=45, col_offset=16), lineno=45, col_offset=8), Assign([Name('s', Store(), lineno=46, col_offset=8)], Call(Attribute(Name('json', Load(), lineno=46, col_offset=12), 'dumps', Load(), lineno=46, col_offset=12), [Call(Name('OrderedDict', Load(), lineno=46, col_offset=23), [Name('items', Load(), lineno=46, col_offset=35)], [], None, None, lineno=46, col_offset=23)], [], None, None, lineno=46, col_offset=12), lineno=46, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=47, col_offset=8), 'assertEqual', Load(), lineno=47, col_offset=8), [Name('s', Load(), lineno=47, col_offset=25), Str('{"one": 1, "two": 2, "three": 3, "four": 4, "five": 5}', lineno=47, col_offset=28)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8)], [], lineno=43, col_offset=4)], [], lineno=26, col_offset=0)])
