Module([Expr(Str('\n   Test cases for pyclbr.py\n   Nick Mathewson\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), ImportFrom('test.test_support', [alias('run_unittest', None), alias('import_module', None)], 0, lineno=5, col_offset=0), Import([alias('sys', None)], lineno=6, col_offset=0), ImportFrom('types', [alias('ClassType', None), alias('FunctionType', None), alias('MethodType', None), alias('BuiltinFunctionType', None)], 0, lineno=7, col_offset=0), Import([alias('pyclbr', None)], lineno=8, col_offset=0), ImportFrom('unittest', [alias('TestCase', None)], 0, lineno=9, col_offset=0), Assign([Name('StaticMethodType', Store(), lineno=11, col_offset=0)], Call(Name('type', Load(), lineno=11, col_offset=19), [Call(Name('staticmethod', Load(), lineno=11, col_offset=24), [Lambda(arguments([], None, None, []), Name('None', Load(), lineno=11, col_offset=45), lineno=11, col_offset=37)], [], None, None, lineno=11, col_offset=24)], [], None, None, lineno=11, col_offset=19), lineno=11, col_offset=0), Assign([Name('ClassMethodType', Store(), lineno=12, col_offset=0)], Call(Name('type', Load(), lineno=12, col_offset=18), [Call(Name('classmethod', Load(), lineno=12, col_offset=23), [Lambda(arguments([Name('c', Param(), lineno=12, col_offset=42)], None, None, []), Name('None', Load(), lineno=12, col_offset=45), lineno=12, col_offset=35)], [], None, None, lineno=12, col_offset=23)], [], None, None, lineno=12, col_offset=18), lineno=12, col_offset=0), Expr(Call(Name('import_module', Load(), lineno=15, col_offset=0), [Str('commands', lineno=15, col_offset=14)], [keyword('deprecated', Name('True', Load(), lineno=15, col_offset=37))], None, None, lineno=15, col_offset=0), lineno=15, col_offset=0), ImportFrom('commands', [alias('getstatus', None)], 0, lineno=18, col_offset=0), ClassDef('PyclbrTest', [Name('TestCase', Load(), lineno=27, col_offset=17)], [FunctionDef('assertListEq', arguments([Name('self', Param(), lineno=29, col_offset=21), Name('l1', Param(), lineno=29, col_offset=27), Name('l2', Param(), lineno=29, col_offset=31), Name('ignore', Param(), lineno=29, col_offset=35)], None, None, []), [Expr(Str(' succeed iff {l1} - {ignore} == {l2} - {ignore} ', lineno=30, col_offset=8), lineno=30, col_offset=8), Assign([Name('missing', Store(), lineno=31, col_offset=8)], BinOp(BinOp(Call(Name('set', Load(), lineno=31, col_offset=19), [Name('l1', Load(), lineno=31, col_offset=23)], [], None, None, lineno=31, col_offset=19), BitXor(), Call(Name('set', Load(), lineno=31, col_offset=29), [Name('l2', Load(), lineno=31, col_offset=33)], [], None, None, lineno=31, col_offset=29), lineno=31, col_offset=19), Sub(), Call(Name('set', Load(), lineno=31, col_offset=40), [Name('ignore', Load(), lineno=31, col_offset=44)], [], None, None, lineno=31, col_offset=40), lineno=31, col_offset=18), lineno=31, col_offset=8), If(Name('missing', Load(), lineno=32, col_offset=11), [Print(Attribute(Name('sys', Load(), lineno=33, col_offset=20), 'stderr', Load(), lineno=33, col_offset=20), [BinOp(Str('l1=%r\nl2=%r\nignore=%r', lineno=33, col_offset=32), Mod(), Tuple([Name('l1', Load(), lineno=33, col_offset=61), Name('l2', Load(), lineno=33, col_offset=65), Name('ignore', Load(), lineno=33, col_offset=69)], Load(), lineno=33, col_offset=61), lineno=33, col_offset=32)], True, lineno=33, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=34, col_offset=12), 'fail', Load(), lineno=34, col_offset=12), [BinOp(Str('%r missing', lineno=34, col_offset=22), Mod(), Call(Attribute(Name('missing', Load(), lineno=34, col_offset=37), 'pop', Load(), lineno=34, col_offset=37), [], [], None, None, lineno=34, col_offset=37), lineno=34, col_offset=22)], [], None, None, lineno=34, col_offset=12), lineno=34, col_offset=12)], [], lineno=32, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('assertHasattr', arguments([Name('self', Param(), lineno=36, col_offset=22), Name('obj', Param(), lineno=36, col_offset=28), Name('attr', Param(), lineno=36, col_offset=33), Name('ignore', Param(), lineno=36, col_offset=39)], None, None, []), [Expr(Str(' succeed iff hasattr(obj,attr) or attr in ignore. ', lineno=37, col_offset=8), lineno=37, col_offset=8), If(Compare(Name('attr', Load(), lineno=38, col_offset=11), [In()], [Name('ignore', Load(), lineno=38, col_offset=19)], lineno=38, col_offset=11), [Return(None, lineno=38, col_offset=27)], [], lineno=38, col_offset=8), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=39, col_offset=15), [Name('obj', Load(), lineno=39, col_offset=23), Name('attr', Load(), lineno=39, col_offset=28)], [], None, None, lineno=39, col_offset=15), lineno=39, col_offset=11), [Print(None, [Str('???', lineno=39, col_offset=41), Name('attr', Load(), lineno=39, col_offset=48)], True, lineno=39, col_offset=35)], [], lineno=39, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=8), 'assertTrue', Load(), lineno=40, col_offset=8), [Call(Name('hasattr', Load(), lineno=40, col_offset=24), [Name('obj', Load(), lineno=40, col_offset=32), Name('attr', Load(), lineno=40, col_offset=37)], [], None, None, lineno=40, col_offset=24), BinOp(Str('expected hasattr(%r, %r)', lineno=41, col_offset=24), Mod(), Tuple([Name('obj', Load(), lineno=41, col_offset=54), Name('attr', Load(), lineno=41, col_offset=59)], Load(), lineno=41, col_offset=54), lineno=41, col_offset=24)], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=36, col_offset=4), FunctionDef('assertHaskey', arguments([Name('self', Param(), lineno=44, col_offset=21), Name('obj', Param(), lineno=44, col_offset=27), Name('key', Param(), lineno=44, col_offset=32), Name('ignore', Param(), lineno=44, col_offset=37)], None, None, []), [Expr(Str(' succeed iff key in obj or key in ignore. ', lineno=45, col_offset=8), lineno=45, col_offset=8), If(Compare(Name('key', Load(), lineno=46, col_offset=11), [In()], [Name('ignore', Load(), lineno=46, col_offset=18)], lineno=46, col_offset=11), [Return(None, lineno=46, col_offset=26)], [], lineno=46, col_offset=8), If(Compare(Name('key', Load(), lineno=47, col_offset=11), [NotIn()], [Name('obj', Load(), lineno=47, col_offset=22)], lineno=47, col_offset=11), [Print(Attribute(Name('sys', Load(), lineno=48, col_offset=20), 'stderr', Load(), lineno=48, col_offset=20), [Str('***', lineno=48, col_offset=32), Name('key', Load(), lineno=48, col_offset=39)], True, lineno=48, col_offset=12)], [], lineno=47, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=49, col_offset=8), 'assertIn', Load(), lineno=49, col_offset=8), [Name('key', Load(), lineno=49, col_offset=22), Name('obj', Load(), lineno=49, col_offset=27)], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('assertEqualsOrIgnored', arguments([Name('self', Param(), lineno=51, col_offset=30), Name('a', Param(), lineno=51, col_offset=36), Name('b', Param(), lineno=51, col_offset=39), Name('ignore', Param(), lineno=51, col_offset=42)], None, None, []), [Expr(Str(' succeed iff a == b or a in ignore or b in ignore ', lineno=52, col_offset=8), lineno=52, col_offset=8), If(BoolOp(And(), [Compare(Name('a', Load(), lineno=53, col_offset=11), [NotIn()], [Name('ignore', Load(), lineno=53, col_offset=20)], lineno=53, col_offset=11), Compare(Name('b', Load(), lineno=53, col_offset=31), [NotIn()], [Name('ignore', Load(), lineno=53, col_offset=40)], lineno=53, col_offset=31)], lineno=53, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=54, col_offset=12), 'assertEqual', Load(), lineno=54, col_offset=12), [Name('a', Load(), lineno=54, col_offset=29), Name('b', Load(), lineno=54, col_offset=32)], [], None, None, lineno=54, col_offset=12), lineno=54, col_offset=12)], [], lineno=53, col_offset=8)], [], lineno=51, col_offset=4), FunctionDef('checkModule', arguments([Name('self', Param(), lineno=56, col_offset=20), Name('moduleName', Param(), lineno=56, col_offset=26), Name('module', Param(), lineno=56, col_offset=38), Name('ignore', Param(), lineno=56, col_offset=51)], None, None, [Name('None', Load(), lineno=56, col_offset=45), Tuple([], Load(), lineno=56, col_offset=58)]), [Expr(Str(' succeed iff pyclbr.readmodule_ex(modulename) corresponds\n            to the actual module object, module.  Any identifiers in\n            ignore are ignored.   If no module is provided, the appropriate\n            module is loaded with __import__.', lineno=60, col_offset=-1), lineno=60, col_offset=-1), If(Compare(Name('module', Load(), lineno=62, col_offset=11), [Is()], [Name('None', Load(), lineno=62, col_offset=21)], lineno=62, col_offset=11), [Assign([Name('module', Store(), lineno=65, col_offset=12)], Call(Name('__import__', Load(), lineno=65, col_offset=21), [Name('moduleName', Load(), lineno=65, col_offset=32), Call(Name('globals', Load(), lineno=65, col_offset=44), [], [], None, None, lineno=65, col_offset=44), Dict([], [], lineno=65, col_offset=55), List([Str('<silly>', lineno=65, col_offset=60)], Load(), lineno=65, col_offset=59)], [], None, None, lineno=65, col_offset=21), lineno=65, col_offset=12)], [], lineno=62, col_offset=8), Assign([Name('dict', Store(), lineno=67, col_offset=8)], Call(Attribute(Name('pyclbr', Load(), lineno=67, col_offset=15), 'readmodule_ex', Load(), lineno=67, col_offset=15), [Name('moduleName', Load(), lineno=67, col_offset=36)], [], None, None, lineno=67, col_offset=15), lineno=67, col_offset=8), FunctionDef('ismethod', arguments([Name('oclass', Param(), lineno=69, col_offset=21), Name('obj', Param(), lineno=69, col_offset=29), Name('name', Param(), lineno=69, col_offset=34)], None, None, []), [Assign([Name('classdict', Store(), lineno=70, col_offset=12)], Attribute(Name('oclass', Load(), lineno=70, col_offset=24), '__dict__', Load(), lineno=70, col_offset=24), lineno=70, col_offset=12), If(Call(Name('isinstance', Load(), lineno=71, col_offset=15), [Name('obj', Load(), lineno=71, col_offset=26), Name('FunctionType', Load(), lineno=71, col_offset=31)], [], None, None, lineno=71, col_offset=15), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=72, col_offset=23), [Subscript(Name('classdict', Load(), lineno=72, col_offset=34), Index(Name('name', Load(), lineno=72, col_offset=44)), Load(), lineno=72, col_offset=34), Name('StaticMethodType', Load(), lineno=72, col_offset=51)], [], None, None, lineno=72, col_offset=23), lineno=72, col_offset=19), [Return(Name('False', Load(), lineno=73, col_offset=27), lineno=73, col_offset=20)], [], lineno=72, col_offset=16)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=75, col_offset=24), [Name('obj', Load(), lineno=75, col_offset=35), Name('MethodType', Load(), lineno=75, col_offset=40)], [], None, None, lineno=75, col_offset=24), lineno=75, col_offset=19), [Return(Name('False', Load(), lineno=76, col_offset=27), lineno=76, col_offset=20)], [], lineno=75, col_offset=16), If(Compare(Attribute(Name('obj', Load(), lineno=77, col_offset=19), 'im_self', Load(), lineno=77, col_offset=19), [IsNot()], [Name('None', Load(), lineno=77, col_offset=38)], lineno=77, col_offset=19), [If(BoolOp(Or(), [UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=78, col_offset=28), [Subscript(Name('classdict', Load(), lineno=78, col_offset=39), Index(Name('name', Load(), lineno=78, col_offset=49)), Load(), lineno=78, col_offset=39), Name('ClassMethodType', Load(), lineno=78, col_offset=56)], [], None, None, lineno=78, col_offset=28), lineno=78, col_offset=24), Compare(Attribute(Name('obj', Load(), lineno=79, col_offset=24), 'im_self', Load(), lineno=79, col_offset=24), [IsNot()], [Name('oclass', Load(), lineno=79, col_offset=43)], lineno=79, col_offset=24)], lineno=78, col_offset=24), [Return(Name('False', Load(), lineno=80, col_offset=31), lineno=80, col_offset=24)], [], lineno=78, col_offset=20)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=82, col_offset=27), [Subscript(Name('classdict', Load(), lineno=82, col_offset=38), Index(Name('name', Load(), lineno=82, col_offset=48)), Load(), lineno=82, col_offset=38), Name('FunctionType', Load(), lineno=82, col_offset=55)], [], None, None, lineno=82, col_offset=27), lineno=82, col_offset=23), [Return(Name('False', Load(), lineno=83, col_offset=31), lineno=83, col_offset=24)], [], lineno=82, col_offset=20)], lineno=77, col_offset=16)], lineno=71, col_offset=12), Assign([Name('objname', Store(), lineno=85, col_offset=12)], Attribute(Name('obj', Load(), lineno=85, col_offset=22), '__name__', Load(), lineno=85, col_offset=22), lineno=85, col_offset=12), If(BoolOp(And(), [Call(Attribute(Name('objname', Load(), lineno=86, col_offset=15), 'startswith', Load(), lineno=86, col_offset=15), [Str('__', lineno=86, col_offset=34)], [], None, None, lineno=86, col_offset=15), UnaryOp(Not(), Call(Attribute(Name('objname', Load(), lineno=86, col_offset=48), 'endswith', Load(), lineno=86, col_offset=48), [Str('__', lineno=86, col_offset=65)], [], None, None, lineno=86, col_offset=48), lineno=86, col_offset=44)], lineno=86, col_offset=15), [Assign([Name('objname', Store(), lineno=87, col_offset=16)], BinOp(Str('_%s%s', lineno=87, col_offset=26), Mod(), Tuple([Attribute(Attribute(Name('obj', Load(), lineno=87, col_offset=37), 'im_class', Load(), lineno=87, col_offset=37), '__name__', Load(), lineno=87, col_offset=37), Name('objname', Load(), lineno=87, col_offset=60)], Load(), lineno=87, col_offset=37), lineno=87, col_offset=26), lineno=87, col_offset=16)], [], lineno=86, col_offset=12), Return(Compare(Name('objname', Load(), lineno=88, col_offset=19), [Eq()], [Name('name', Load(), lineno=88, col_offset=30)], lineno=88, col_offset=19), lineno=88, col_offset=12)], [], lineno=69, col_offset=8), For(Tuple([Name('name', Store(), lineno=91, col_offset=12), Name('value', Store(), lineno=91, col_offset=18)], Store(), lineno=91, col_offset=12), Call(Attribute(Name('dict', Load(), lineno=91, col_offset=27), 'items', Load(), lineno=91, col_offset=27), [], [], None, None, lineno=91, col_offset=27), [If(Compare(Name('name', Load(), lineno=92, col_offset=15), [In()], [Name('ignore', Load(), lineno=92, col_offset=23)], lineno=92, col_offset=15), [Continue( lineno=93, col_offset=16)], [], lineno=92, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=12), 'assertHasattr', Load(), lineno=94, col_offset=12), [Name('module', Load(), lineno=94, col_offset=31), Name('name', Load(), lineno=94, col_offset=39), Name('ignore', Load(), lineno=94, col_offset=45)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12), Assign([Name('py_item', Store(), lineno=95, col_offset=12)], Call(Name('getattr', Load(), lineno=95, col_offset=22), [Name('module', Load(), lineno=95, col_offset=30), Name('name', Load(), lineno=95, col_offset=38)], [], None, None, lineno=95, col_offset=22), lineno=95, col_offset=12), If(Call(Name('isinstance', Load(), lineno=96, col_offset=15), [Name('value', Load(), lineno=96, col_offset=26), Attribute(Name('pyclbr', Load(), lineno=96, col_offset=33), 'Function', Load(), lineno=96, col_offset=33)], [], None, None, lineno=96, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=16), 'assertIsInstance', Load(), lineno=97, col_offset=16), [Name('py_item', Load(), lineno=97, col_offset=38), Tuple([Name('FunctionType', Load(), lineno=97, col_offset=48), Name('BuiltinFunctionType', Load(), lineno=97, col_offset=62)], Load(), lineno=97, col_offset=48)], [], None, None, lineno=97, col_offset=16), lineno=97, col_offset=16), If(Compare(Attribute(Name('py_item', Load(), lineno=98, col_offset=19), '__module__', Load(), lineno=98, col_offset=19), [NotEq()], [Name('moduleName', Load(), lineno=98, col_offset=41)], lineno=98, col_offset=19), [Continue( lineno=99, col_offset=20)], [], lineno=98, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=16), 'assertEqual', Load(), lineno=100, col_offset=16), [Attribute(Name('py_item', Load(), lineno=100, col_offset=33), '__module__', Load(), lineno=100, col_offset=33), Attribute(Name('value', Load(), lineno=100, col_offset=53), 'module', Load(), lineno=100, col_offset=53)], [], None, None, lineno=100, col_offset=16), lineno=100, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=102, col_offset=16), 'assertIsInstance', Load(), lineno=102, col_offset=16), [Name('py_item', Load(), lineno=102, col_offset=38), Tuple([Name('ClassType', Load(), lineno=102, col_offset=48), Name('type', Load(), lineno=102, col_offset=59)], Load(), lineno=102, col_offset=48)], [], None, None, lineno=102, col_offset=16), lineno=102, col_offset=16), If(Compare(Attribute(Name('py_item', Load(), lineno=103, col_offset=19), '__module__', Load(), lineno=103, col_offset=19), [NotEq()], [Name('moduleName', Load(), lineno=103, col_offset=41)], lineno=103, col_offset=19), [Continue( lineno=104, col_offset=20)], [], lineno=103, col_offset=16), Assign([Name('real_bases', Store(), lineno=106, col_offset=16)], ListComp(Attribute(Name('base', Load(), lineno=106, col_offset=30), '__name__', Load(), lineno=106, col_offset=30), [comprehension(Name('base', Store(), lineno=106, col_offset=48), Attribute(Name('py_item', Load(), lineno=106, col_offset=56), '__bases__', Load(), lineno=106, col_offset=56), [])], lineno=106, col_offset=30), lineno=106, col_offset=16), Assign([Name('pyclbr_bases', Store(), lineno=107, col_offset=16)], ListComp(Call(Name('getattr', Load(), lineno=107, col_offset=33), [Name('base', Load(), lineno=107, col_offset=41), Str('name', lineno=107, col_offset=47), Name('base', Load(), lineno=107, col_offset=55)], [], None, None, lineno=107, col_offset=33), [comprehension(Name('base', Store(), lineno=108, col_offset=37), Attribute(Name('value', Load(), lineno=108, col_offset=45), 'super', Load(), lineno=108, col_offset=45), [])], lineno=107, col_offset=33), lineno=107, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=111, col_offset=20), 'assertListEq', Load(), lineno=111, col_offset=20), [Name('real_bases', Load(), lineno=111, col_offset=38), Name('pyclbr_bases', Load(), lineno=111, col_offset=50), Name('ignore', Load(), lineno=111, col_offset=64)], [], None, None, lineno=111, col_offset=20), lineno=111, col_offset=20)], [ExceptHandler(None, None, [Print(Attribute(Name('sys', Load(), lineno=113, col_offset=28), 'stderr', Load(), lineno=113, col_offset=28), [BinOp(Str('class=%s', lineno=113, col_offset=40), Mod(), Name('py_item', Load(), lineno=113, col_offset=53), lineno=113, col_offset=40)], True, lineno=113, col_offset=20), Raise(None, None, None, lineno=114, col_offset=20)], lineno=112, col_offset=16)], [], lineno=110, col_offset=16), Assign([Name('actualMethods', Store(), lineno=116, col_offset=16)], List([], Load(), lineno=116, col_offset=32), lineno=116, col_offset=16), For(Name('m', Store(), lineno=117, col_offset=20), Call(Attribute(Attribute(Name('py_item', Load(), lineno=117, col_offset=25), '__dict__', Load(), lineno=117, col_offset=25), 'keys', Load(), lineno=117, col_offset=25), [], [], None, None, lineno=117, col_offset=25), [If(Call(Name('ismethod', Load(), lineno=118, col_offset=23), [Name('py_item', Load(), lineno=118, col_offset=32), Call(Name('getattr', Load(), lineno=118, col_offset=41), [Name('py_item', Load(), lineno=118, col_offset=49), Name('m', Load(), lineno=118, col_offset=58)], [], None, None, lineno=118, col_offset=41), Name('m', Load(), lineno=118, col_offset=62)], [], None, None, lineno=118, col_offset=23), [Expr(Call(Attribute(Name('actualMethods', Load(), lineno=119, col_offset=24), 'append', Load(), lineno=119, col_offset=24), [Name('m', Load(), lineno=119, col_offset=45)], [], None, None, lineno=119, col_offset=24), lineno=119, col_offset=24)], [], lineno=118, col_offset=20)], [], lineno=117, col_offset=16), Assign([Name('foundMethods', Store(), lineno=120, col_offset=16)], List([], Load(), lineno=120, col_offset=31), lineno=120, col_offset=16), For(Name('m', Store(), lineno=121, col_offset=20), Call(Attribute(Attribute(Name('value', Load(), lineno=121, col_offset=25), 'methods', Load(), lineno=121, col_offset=25), 'keys', Load(), lineno=121, col_offset=25), [], [], None, None, lineno=121, col_offset=25), [If(BoolOp(And(), [Compare(Subscript(Name('m', Load(), lineno=122, col_offset=23), Slice(None, Num(2, lineno=122, col_offset=26), None), Load(), lineno=122, col_offset=23), [Eq()], [Str('__', lineno=122, col_offset=32)], lineno=122, col_offset=23), Compare(Subscript(Name('m', Load(), lineno=122, col_offset=41), Slice(Num(-2, lineno=122, col_offset=44), None, None), Load(), lineno=122, col_offset=41), [NotEq()], [Str('__', lineno=122, col_offset=51)], lineno=122, col_offset=41)], lineno=122, col_offset=23), [Expr(Call(Attribute(Name('foundMethods', Load(), lineno=123, col_offset=24), 'append', Load(), lineno=123, col_offset=24), [BinOp(BinOp(Str('_', lineno=123, col_offset=44), Add(), Name('name', Load(), lineno=123, col_offset=48), lineno=123, col_offset=44), Add(), Name('m', Load(), lineno=123, col_offset=53), lineno=123, col_offset=52)], [], None, None, lineno=123, col_offset=24), lineno=123, col_offset=24)], [Expr(Call(Attribute(Name('foundMethods', Load(), lineno=125, col_offset=24), 'append', Load(), lineno=125, col_offset=24), [Name('m', Load(), lineno=125, col_offset=44)], [], None, None, lineno=125, col_offset=24), lineno=125, col_offset=24)], lineno=122, col_offset=20)], [], lineno=121, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=20), 'assertListEq', Load(), lineno=128, col_offset=20), [Name('foundMethods', Load(), lineno=128, col_offset=38), Name('actualMethods', Load(), lineno=128, col_offset=52), Name('ignore', Load(), lineno=128, col_offset=67)], [], None, None, lineno=128, col_offset=20), lineno=128, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=129, col_offset=20), 'assertEqual', Load(), lineno=129, col_offset=20), [Attribute(Name('py_item', Load(), lineno=129, col_offset=37), '__module__', Load(), lineno=129, col_offset=37), Attribute(Name('value', Load(), lineno=129, col_offset=57), 'module', Load(), lineno=129, col_offset=57)], [], None, None, lineno=129, col_offset=20), lineno=129, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=131, col_offset=20), 'assertEqualsOrIgnored', Load(), lineno=131, col_offset=20), [Attribute(Name('py_item', Load(), lineno=131, col_offset=47), '__name__', Load(), lineno=131, col_offset=47), Attribute(Name('value', Load(), lineno=131, col_offset=65), 'name', Load(), lineno=131, col_offset=65), Name('ignore', Load(), lineno=132, col_offset=47)], [], None, None, lineno=131, col_offset=20), lineno=131, col_offset=20)], [ExceptHandler(None, None, [Print(Attribute(Name('sys', Load(), lineno=135, col_offset=28), 'stderr', Load(), lineno=135, col_offset=28), [BinOp(Str('class=%s', lineno=135, col_offset=40), Mod(), Name('py_item', Load(), lineno=135, col_offset=53), lineno=135, col_offset=40)], True, lineno=135, col_offset=20), Raise(None, None, None, lineno=136, col_offset=20)], lineno=134, col_offset=16)], [], lineno=127, col_offset=16)], lineno=96, col_offset=12)], [], lineno=91, col_offset=8), FunctionDef('defined_in', arguments([Name('item', Param(), lineno=139, col_offset=23), Name('module', Param(), lineno=139, col_offset=29)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=140, col_offset=15), [Name('item', Load(), lineno=140, col_offset=26), Name('ClassType', Load(), lineno=140, col_offset=32)], [], None, None, lineno=140, col_offset=15), [Return(Compare(Attribute(Name('item', Load(), lineno=141, col_offset=23), '__module__', Load(), lineno=141, col_offset=23), [Eq()], [Attribute(Name('module', Load(), lineno=141, col_offset=42), '__name__', Load(), lineno=141, col_offset=42)], lineno=141, col_offset=23), lineno=141, col_offset=16)], [], lineno=140, col_offset=12), If(Call(Name('isinstance', Load(), lineno=142, col_offset=15), [Name('item', Load(), lineno=142, col_offset=26), Name('FunctionType', Load(), lineno=142, col_offset=32)], [], None, None, lineno=142, col_offset=15), [Return(Compare(Attribute(Name('item', Load(), lineno=143, col_offset=23), 'func_globals', Load(), lineno=143, col_offset=23), [Is()], [Attribute(Name('module', Load(), lineno=143, col_offset=44), '__dict__', Load(), lineno=143, col_offset=44)], lineno=143, col_offset=23), lineno=143, col_offset=16)], [], lineno=142, col_offset=12), Return(Name('False', Load(), lineno=144, col_offset=19), lineno=144, col_offset=12)], [], lineno=139, col_offset=8), For(Name('name', Store(), lineno=145, col_offset=12), Call(Name('dir', Load(), lineno=145, col_offset=20), [Name('module', Load(), lineno=145, col_offset=24)], [], None, None, lineno=145, col_offset=20), [Assign([Name('item', Store(), lineno=146, col_offset=12)], Call(Name('getattr', Load(), lineno=146, col_offset=19), [Name('module', Load(), lineno=146, col_offset=27), Name('name', Load(), lineno=146, col_offset=35)], [], None, None, lineno=146, col_offset=19), lineno=146, col_offset=12), If(Call(Name('isinstance', Load(), lineno=147, col_offset=15), [Name('item', Load(), lineno=147, col_offset=26), Tuple([Name('ClassType', Load(), lineno=147, col_offset=34), Name('FunctionType', Load(), lineno=147, col_offset=45)], Load(), lineno=147, col_offset=34)], [], None, None, lineno=147, col_offset=15), [If(Call(Name('defined_in', Load(), lineno=148, col_offset=19), [Name('item', Load(), lineno=148, col_offset=30), Name('module', Load(), lineno=148, col_offset=36)], [], None, None, lineno=148, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=149, col_offset=20), 'assertHaskey', Load(), lineno=149, col_offset=20), [Name('dict', Load(), lineno=149, col_offset=38), Name('name', Load(), lineno=149, col_offset=44), Name('ignore', Load(), lineno=149, col_offset=50)], [], None, None, lineno=149, col_offset=20), lineno=149, col_offset=20)], [], lineno=148, col_offset=16)], [], lineno=147, col_offset=12)], [], lineno=145, col_offset=8)], [], lineno=56, col_offset=4), FunctionDef('test_easy', arguments([Name('self', Param(), lineno=151, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=8), 'checkModule', Load(), lineno=152, col_offset=8), [Str('pyclbr', lineno=152, col_offset=25)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=153, col_offset=8), 'checkModule', Load(), lineno=153, col_offset=8), [Str('doctest', lineno=153, col_offset=25)], [keyword('ignore', Tuple([Str('DocTestCase', lineno=153, col_offset=44)], Load(), lineno=153, col_offset=44))], None, None, lineno=153, col_offset=8), lineno=153, col_offset=8), Assign([Name('rfc822', Store(), lineno=155, col_offset=8)], Call(Name('import_module', Load(), lineno=155, col_offset=17), [Str('rfc822', lineno=155, col_offset=31)], [keyword('deprecated', Name('True', Load(), lineno=155, col_offset=52))], None, None, lineno=155, col_offset=17), lineno=155, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=8), 'checkModule', Load(), lineno=156, col_offset=8), [Str('rfc822', lineno=156, col_offset=25), Name('rfc822', Load(), lineno=156, col_offset=35)], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=8), 'checkModule', Load(), lineno=157, col_offset=8), [Str('difflib', lineno=157, col_offset=25)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('test_decorators', arguments([Name('self', Param(), lineno=159, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), 'checkModule', Load(), lineno=163, col_offset=8), [Str('test.pyclbr_input', lineno=163, col_offset=25)], [], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8)], [], lineno=159, col_offset=4), FunctionDef('test_others', arguments([Name('self', Param(), lineno=165, col_offset=20)], None, None, []), [Assign([Name('cm', Store(), lineno=166, col_offset=8)], Attribute(Name('self', Load(), lineno=166, col_offset=13), 'checkModule', Load(), lineno=166, col_offset=13), lineno=166, col_offset=8), Expr(Call(Name('cm', Load(), lineno=169, col_offset=8), [Str('random', lineno=169, col_offset=11)], [keyword('ignore', Tuple([Str('Random', lineno=169, col_offset=29)], Load(), lineno=169, col_offset=29))], None, None, lineno=169, col_offset=8), lineno=169, col_offset=8), Expr(Call(Name('cm', Load(), lineno=170, col_offset=8), [Str('cgi', lineno=170, col_offset=11)], [keyword('ignore', Tuple([Str('log', lineno=170, col_offset=26)], Load(), lineno=170, col_offset=26))], None, None, lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Name('cm', Load(), lineno=171, col_offset=8), [Str('urllib', lineno=171, col_offset=11)], [keyword('ignore', Tuple([Str('_CFNumberToInt32', lineno=171, col_offset=29), Str('_CStringFromCFString', lineno=172, col_offset=29), Str('_CFSetup', lineno=173, col_offset=29), Str('getproxies_registry', lineno=174, col_offset=29), Str('proxy_bypass_registry', lineno=175, col_offset=29), Str('proxy_bypass_macosx_sysconf', lineno=176, col_offset=29), Str('open_https', lineno=177, col_offset=29), Str('getproxies_macosx_sysconf', lineno=178, col_offset=29), Str('getproxies_internetconfig', lineno=179, col_offset=29)], Load(), lineno=171, col_offset=29))], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8), Expr(Call(Name('cm', Load(), lineno=180, col_offset=8), [Str('pickle', lineno=180, col_offset=11)], [], None, None, lineno=180, col_offset=8), lineno=180, col_offset=8), Expr(Call(Name('cm', Load(), lineno=181, col_offset=8), [Str('aifc', lineno=181, col_offset=11)], [keyword('ignore', Tuple([Str('openfp', lineno=181, col_offset=27)], Load(), lineno=181, col_offset=27))], None, None, lineno=181, col_offset=8), lineno=181, col_offset=8), Expr(Call(Name('cm', Load(), lineno=182, col_offset=8), [Str('Cookie', lineno=182, col_offset=11)], [], None, None, lineno=182, col_offset=8), lineno=182, col_offset=8), Expr(Call(Name('cm', Load(), lineno=183, col_offset=8), [Str('sre_parse', lineno=183, col_offset=11)], [keyword('ignore', Tuple([Str('dump', lineno=183, col_offset=32)], Load(), lineno=183, col_offset=32))], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8), Expr(Call(Name('cm', Load(), lineno=184, col_offset=8), [Str('pdb', lineno=184, col_offset=11)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8), Expr(Call(Name('cm', Load(), lineno=185, col_offset=8), [Str('pydoc', lineno=185, col_offset=11)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8), Expr(Call(Name('cm', Load(), lineno=188, col_offset=8), [Str('email.parser', lineno=188, col_offset=11)], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8), Expr(Call(Name('cm', Load(), lineno=189, col_offset=8), [Str('test.test_pyclbr', lineno=189, col_offset=11)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], [], lineno=165, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=193, col_offset=4), [Name('PyclbrTest', Load(), lineno=193, col_offset=17)], [], None, None, lineno=193, col_offset=4), lineno=193, col_offset=4)], [], lineno=192, col_offset=0), If(Compare(Name('__name__', Load(), lineno=196, col_offset=3), [Eq()], [Str('__main__', lineno=196, col_offset=15)], lineno=196, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=197, col_offset=4), [], [], None, None, lineno=197, col_offset=4), lineno=197, col_offset=4)], [], lineno=196, col_offset=0)])
