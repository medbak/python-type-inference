Module([Expr(Str('Implementation of JSONEncoder\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), Import([alias('re', None)], lineno=3, col_offset=0), TryExcept([ImportFrom('_json', [alias('encode_basestring_ascii', 'c_encode_basestring_ascii')], 0, lineno=6, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=7, col_offset=7), None, [Assign([Name('c_encode_basestring_ascii', Store(), lineno=8, col_offset=4)], Name('None', Load(), lineno=8, col_offset=32), lineno=8, col_offset=4)], lineno=7, col_offset=0)], [], lineno=5, col_offset=0), TryExcept([ImportFrom('_json', [alias('make_encoder', 'c_make_encoder')], 0, lineno=10, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=11, col_offset=7), None, [Assign([Name('c_make_encoder', Store(), lineno=12, col_offset=4)], Name('None', Load(), lineno=12, col_offset=21), lineno=12, col_offset=4)], lineno=11, col_offset=0)], [], lineno=9, col_offset=0), Assign([Name('ESCAPE', Store(), lineno=14, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=14, col_offset=9), 'compile', Load(), lineno=14, col_offset=9), [Str('[\\x00-\\x1f\\\\"\\b\\f\\n\\r\\t]', lineno=14, col_offset=20)], [], None, None, lineno=14, col_offset=9), lineno=14, col_offset=0), Assign([Name('ESCAPE_ASCII', Store(), lineno=15, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=15, col_offset=15), 'compile', Load(), lineno=15, col_offset=15), [Str('([\\\\"]|[^\\ -~])', lineno=15, col_offset=26)], [], None, None, lineno=15, col_offset=15), lineno=15, col_offset=0), Assign([Name('HAS_UTF8', Store(), lineno=16, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=16, col_offset=11), 'compile', Load(), lineno=16, col_offset=11), [Str('[\\x80-\\xff]', lineno=16, col_offset=22)], [], None, None, lineno=16, col_offset=11), lineno=16, col_offset=0), Assign([Name('ESCAPE_DCT', Store(), lineno=17, col_offset=0)], Dict([Str('\\', lineno=18, col_offset=4), Str('"', lineno=19, col_offset=4), Str('\x08', lineno=20, col_offset=4), Str('\x0c', lineno=21, col_offset=4), Str('\n', lineno=22, col_offset=4), Str('\r', lineno=23, col_offset=4), Str('\t', lineno=24, col_offset=4)], [Str('\\\\', lineno=18, col_offset=10), Str('\\"', lineno=19, col_offset=9), Str('\\b', lineno=20, col_offset=10), Str('\\f', lineno=21, col_offset=10), Str('\\n', lineno=22, col_offset=10), Str('\\r', lineno=23, col_offset=10), Str('\\t', lineno=24, col_offset=10)], lineno=17, col_offset=13), lineno=17, col_offset=0), For(Name('i', Store(), lineno=26, col_offset=4), Call(Name('range', Load(), lineno=26, col_offset=9), [Num(32, lineno=26, col_offset=15)], [], None, None, lineno=26, col_offset=9), [Expr(Call(Attribute(Name('ESCAPE_DCT', Load(), lineno=27, col_offset=4), 'setdefault', Load(), lineno=27, col_offset=4), [Call(Name('chr', Load(), lineno=27, col_offset=26), [Name('i', Load(), lineno=27, col_offset=30)], [], None, None, lineno=27, col_offset=26), Call(Attribute(Str('\\u{0:04x}', lineno=27, col_offset=34), 'format', Load(), lineno=27, col_offset=34), [Name('i', Load(), lineno=27, col_offset=54)], [], None, None, lineno=27, col_offset=34)], [], None, None, lineno=27, col_offset=4), lineno=27, col_offset=4)], [], lineno=26, col_offset=0), Assign([Name('INFINITY', Store(), lineno=31, col_offset=0)], Call(Name('float', Load(), lineno=31, col_offset=11), [Str('1e66666', lineno=31, col_offset=17)], [], None, None, lineno=31, col_offset=11), lineno=31, col_offset=0), Assign([Name('FLOAT_REPR', Store(), lineno=32, col_offset=0)], Name('repr', Load(), lineno=32, col_offset=13), lineno=32, col_offset=0), FunctionDef('encode_basestring', arguments([Name('s', Param(), lineno=34, col_offset=22)], None, None, []), [Expr(Str('Return a JSON representation of a Python string\n\n    ', lineno=37, col_offset=-1), lineno=37, col_offset=-1), FunctionDef('replace', arguments([Name('match', Param(), lineno=38, col_offset=16)], None, None, []), [Return(Subscript(Name('ESCAPE_DCT', Load(), lineno=39, col_offset=15), Index(Call(Attribute(Name('match', Load(), lineno=39, col_offset=26), 'group', Load(), lineno=39, col_offset=26), [Num(0, lineno=39, col_offset=38)], [], None, None, lineno=39, col_offset=26)), Load(), lineno=39, col_offset=15), lineno=39, col_offset=8)], [], lineno=38, col_offset=4), Return(BinOp(BinOp(Str('"', lineno=40, col_offset=11), Add(), Call(Attribute(Name('ESCAPE', Load(), lineno=40, col_offset=17), 'sub', Load(), lineno=40, col_offset=17), [Name('replace', Load(), lineno=40, col_offset=28), Name('s', Load(), lineno=40, col_offset=37)], [], None, None, lineno=40, col_offset=17), lineno=40, col_offset=11), Add(), Str('"', lineno=40, col_offset=42), lineno=40, col_offset=40), lineno=40, col_offset=4)], [], lineno=34, col_offset=0), FunctionDef('py_encode_basestring_ascii', arguments([Name('s', Param(), lineno=43, col_offset=31)], None, None, []), [Expr(Str('Return an ASCII-only JSON representation of a Python string\n\n    ', lineno=46, col_offset=-1), lineno=46, col_offset=-1), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=47, col_offset=7), [Name('s', Load(), lineno=47, col_offset=18), Name('str', Load(), lineno=47, col_offset=21)], [], None, None, lineno=47, col_offset=7), Compare(Call(Attribute(Name('HAS_UTF8', Load(), lineno=47, col_offset=30), 'search', Load(), lineno=47, col_offset=30), [Name('s', Load(), lineno=47, col_offset=46)], [], None, None, lineno=47, col_offset=30), [IsNot()], [Name('None', Load(), lineno=47, col_offset=56)], lineno=47, col_offset=30)], lineno=47, col_offset=7), [Assign([Name('s', Store(), lineno=48, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=48, col_offset=12), 'decode', Load(), lineno=48, col_offset=12), [Str('utf-8', lineno=48, col_offset=21)], [], None, None, lineno=48, col_offset=12), lineno=48, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('replace', arguments([Name('match', Param(), lineno=49, col_offset=16)], None, None, []), [Assign([Name('s', Store(), lineno=50, col_offset=8)], Call(Attribute(Name('match', Load(), lineno=50, col_offset=12), 'group', Load(), lineno=50, col_offset=12), [Num(0, lineno=50, col_offset=24)], [], None, None, lineno=50, col_offset=12), lineno=50, col_offset=8), TryExcept([Return(Subscript(Name('ESCAPE_DCT', Load(), lineno=52, col_offset=19), Index(Name('s', Load(), lineno=52, col_offset=30)), Load(), lineno=52, col_offset=19), lineno=52, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=53, col_offset=15), None, [Assign([Name('n', Store(), lineno=54, col_offset=12)], Call(Name('ord', Load(), lineno=54, col_offset=16), [Name('s', Load(), lineno=54, col_offset=20)], [], None, None, lineno=54, col_offset=16), lineno=54, col_offset=12), If(Compare(Name('n', Load(), lineno=55, col_offset=15), [Lt()], [Num(65536, lineno=55, col_offset=19)], lineno=55, col_offset=15), [Return(Call(Attribute(Str('\\u{0:04x}', lineno=56, col_offset=23), 'format', Load(), lineno=56, col_offset=23), [Name('n', Load(), lineno=56, col_offset=43)], [], None, None, lineno=56, col_offset=23), lineno=56, col_offset=16)], [AugAssign(Name('n', Store(), lineno=60, col_offset=16), Sub(), Num(65536, lineno=60, col_offset=21), lineno=60, col_offset=16), Assign([Name('s1', Store(), lineno=61, col_offset=16)], BinOp(Num(55296, lineno=61, col_offset=21), BitOr(), BinOp(BinOp(Name('n', Load(), lineno=61, col_offset=32), RShift(), Num(10, lineno=61, col_offset=37), lineno=61, col_offset=32), BitAnd(), Num(1023, lineno=61, col_offset=43), lineno=61, col_offset=31), lineno=61, col_offset=21), lineno=61, col_offset=16), Assign([Name('s2', Store(), lineno=62, col_offset=16)], BinOp(Num(56320, lineno=62, col_offset=21), BitOr(), BinOp(Name('n', Load(), lineno=62, col_offset=31), BitAnd(), Num(1023, lineno=62, col_offset=35), lineno=62, col_offset=31), lineno=62, col_offset=21), lineno=62, col_offset=16), Return(Call(Attribute(Str('\\u{0:04x}\\u{1:04x}', lineno=63, col_offset=23), 'format', Load(), lineno=63, col_offset=23), [Name('s1', Load(), lineno=63, col_offset=53), Name('s2', Load(), lineno=63, col_offset=57)], [], None, None, lineno=63, col_offset=23), lineno=63, col_offset=16)], lineno=55, col_offset=12)], lineno=53, col_offset=8)], [], lineno=51, col_offset=8)], [], lineno=49, col_offset=4), Return(BinOp(BinOp(Str('"', lineno=65, col_offset=11), Add(), Call(Name('str', Load(), lineno=65, col_offset=17), [Call(Attribute(Name('ESCAPE_ASCII', Load(), lineno=65, col_offset=21), 'sub', Load(), lineno=65, col_offset=21), [Name('replace', Load(), lineno=65, col_offset=38), Name('s', Load(), lineno=65, col_offset=47)], [], None, None, lineno=65, col_offset=21)], [], None, None, lineno=65, col_offset=17), lineno=65, col_offset=11), Add(), Str('"', lineno=65, col_offset=53), lineno=65, col_offset=51), lineno=65, col_offset=4)], [], lineno=43, col_offset=0), Assign([Name('encode_basestring_ascii', Store(), lineno=68, col_offset=0)], BoolOp(Or(), [Name('c_encode_basestring_ascii', Load(), lineno=69, col_offset=4), Name('py_encode_basestring_ascii', Load(), lineno=69, col_offset=33)], lineno=69, col_offset=4), lineno=68, col_offset=0), ClassDef('JSONEncoder', [Name('object', Load(), lineno=71, col_offset=18)], [Expr(Str('Extensible JSON <http://json.org> encoder for Python data structures.\n\n    Supports the following objects and types by default:\n\n    +-------------------+---------------+\n    | Python            | JSON          |\n    +===================+===============+\n    | dict              | object        |\n    +-------------------+---------------+\n    | list, tuple       | array         |\n    +-------------------+---------------+\n    | str, unicode      | string        |\n    +-------------------+---------------+\n    | int, long, float  | number        |\n    +-------------------+---------------+\n    | True              | true          |\n    +-------------------+---------------+\n    | False             | false         |\n    +-------------------+---------------+\n    | None              | null          |\n    +-------------------+---------------+\n\n    To extend this to recognize other objects, subclass and implement a\n    ``.default()`` method with another method that returns a serializable\n    object for ``o`` if possible, otherwise it should call the superclass\n    implementation (to raise ``TypeError``).\n\n    ', lineno=99, col_offset=-1), lineno=99, col_offset=-1), Assign([Name('item_separator', Store(), lineno=100, col_offset=4)], Str(', ', lineno=100, col_offset=21), lineno=100, col_offset=4), Assign([Name('key_separator', Store(), lineno=101, col_offset=4)], Str(': ', lineno=101, col_offset=20), lineno=101, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=102, col_offset=17), Name('skipkeys', Param(), lineno=102, col_offset=23), Name('ensure_ascii', Param(), lineno=102, col_offset=39), Name('check_circular', Param(), lineno=103, col_offset=12), Name('allow_nan', Param(), lineno=103, col_offset=33), Name('sort_keys', Param(), lineno=103, col_offset=49), Name('indent', Param(), lineno=104, col_offset=12), Name('separators', Param(), lineno=104, col_offset=25), Name('encoding', Param(), lineno=104, col_offset=42), Name('default', Param(), lineno=104, col_offset=60)], None, None, [Name('False', Load(), lineno=102, col_offset=32), Name('True', Load(), lineno=102, col_offset=52), Name('True', Load(), lineno=103, col_offset=27), Name('True', Load(), lineno=103, col_offset=43), Name('False', Load(), lineno=103, col_offset=59), Name('None', Load(), lineno=104, col_offset=19), Name('None', Load(), lineno=104, col_offset=36), Str('utf-8', lineno=104, col_offset=51), Name('None', Load(), lineno=104, col_offset=68)]), [Expr(Str("Constructor for JSONEncoder, with sensible defaults.\n\n        If skipkeys is false, then it is a TypeError to attempt\n        encoding of keys that are not str, int, long, float or None.  If\n        skipkeys is True, such items are simply skipped.\n\n        If ensure_ascii is true, the output is guaranteed to be str\n        objects with all incoming unicode characters escaped.  If\n        ensure_ascii is false, the output will be unicode object.\n\n        If check_circular is true, then lists, dicts, and custom encoded\n        objects will be checked for circular references during encoding to\n        prevent an infinite recursion (which would cause an OverflowError).\n        Otherwise, no such check takes place.\n\n        If allow_nan is true, then NaN, Infinity, and -Infinity will be\n        encoded as such.  This behavior is not JSON specification compliant,\n        but is consistent with most JavaScript based encoders and decoders.\n        Otherwise, it will be a ValueError to encode such floats.\n\n        If sort_keys is true, then the output of dictionaries will be\n        sorted by key; this is useful for regression tests to ensure\n        that JSON serializations can be compared on a day-to-day basis.\n\n        If indent is a non-negative integer, then JSON array\n        elements and object members will be pretty-printed with that\n        indent level.  An indent level of 0 will only insert newlines.\n        None is the most compact representation.\n\n        If specified, separators should be a (item_separator, key_separator)\n        tuple.  The default is (', ', ': ').  To get the most compact JSON\n        representation you should specify (',', ':') to eliminate whitespace.\n\n        If specified, default is a function that gets called for objects\n        that can't otherwise be serialized.  It should return a JSON encodable\n        version of the object or raise a ``TypeError``.\n\n        If encoding is not None, then all input strings will be\n        transformed into unicode using that encoding prior to JSON-encoding.\n        The default is UTF-8.\n\n        ", lineno=146, col_offset=-1), lineno=146, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=148, col_offset=8), 'skipkeys', Store(), lineno=148, col_offset=8)], Name('skipkeys', Load(), lineno=148, col_offset=24), lineno=148, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=149, col_offset=8), 'ensure_ascii', Store(), lineno=149, col_offset=8)], Name('ensure_ascii', Load(), lineno=149, col_offset=28), lineno=149, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=150, col_offset=8), 'check_circular', Store(), lineno=150, col_offset=8)], Name('check_circular', Load(), lineno=150, col_offset=30), lineno=150, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=151, col_offset=8), 'allow_nan', Store(), lineno=151, col_offset=8)], Name('allow_nan', Load(), lineno=151, col_offset=25), lineno=151, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=152, col_offset=8), 'sort_keys', Store(), lineno=152, col_offset=8)], Name('sort_keys', Load(), lineno=152, col_offset=25), lineno=152, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=153, col_offset=8), 'indent', Store(), lineno=153, col_offset=8)], Name('indent', Load(), lineno=153, col_offset=22), lineno=153, col_offset=8), If(Compare(Name('separators', Load(), lineno=154, col_offset=11), [IsNot()], [Name('None', Load(), lineno=154, col_offset=29)], lineno=154, col_offset=11), [Assign([Tuple([Attribute(Name('self', Load(), lineno=155, col_offset=12), 'item_separator', Store(), lineno=155, col_offset=12), Attribute(Name('self', Load(), lineno=155, col_offset=33), 'key_separator', Store(), lineno=155, col_offset=33)], Store(), lineno=155, col_offset=12)], Name('separators', Load(), lineno=155, col_offset=54), lineno=155, col_offset=12)], [], lineno=154, col_offset=8), If(Compare(Name('default', Load(), lineno=156, col_offset=11), [IsNot()], [Name('None', Load(), lineno=156, col_offset=26)], lineno=156, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=157, col_offset=12), 'default', Store(), lineno=157, col_offset=12)], Name('default', Load(), lineno=157, col_offset=27), lineno=157, col_offset=12)], [], lineno=156, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=158, col_offset=8), 'encoding', Store(), lineno=158, col_offset=8)], Name('encoding', Load(), lineno=158, col_offset=24), lineno=158, col_offset=8)], [], lineno=102, col_offset=4), FunctionDef('default', arguments([Name('self', Param(), lineno=160, col_offset=16), Name('o', Param(), lineno=160, col_offset=22)], None, None, []), [Expr(Str('Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n\n        For example, to support arbitrary iterators, you could\n        implement default like this::\n\n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                return JSONEncoder.default(self, o)\n\n        ', lineno=177, col_offset=-1), lineno=177, col_offset=-1), Raise(Call(Name('TypeError', Load(), lineno=178, col_offset=14), [BinOp(Call(Name('repr', Load(), lineno=178, col_offset=24), [Name('o', Load(), lineno=178, col_offset=29)], [], None, None, lineno=178, col_offset=24), Add(), Str(' is not JSON serializable', lineno=178, col_offset=34), lineno=178, col_offset=24)], [], None, None, lineno=178, col_offset=14), None, None, lineno=178, col_offset=8)], [], lineno=160, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=180, col_offset=15), Name('o', Param(), lineno=180, col_offset=21)], None, None, []), [Expr(Str('Return a JSON string representation of a Python data structure.\n\n        >>> JSONEncoder().encode({"foo": ["bar", "baz"]})\n        \'{"foo": ["bar", "baz"]}\'\n\n        ', lineno=186, col_offset=-1), lineno=186, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=188, col_offset=11), [Name('o', Load(), lineno=188, col_offset=22), Name('basestring', Load(), lineno=188, col_offset=25)], [], None, None, lineno=188, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=189, col_offset=15), [Name('o', Load(), lineno=189, col_offset=26), Name('str', Load(), lineno=189, col_offset=29)], [], None, None, lineno=189, col_offset=15), [Assign([Name('_encoding', Store(), lineno=190, col_offset=16)], Attribute(Name('self', Load(), lineno=190, col_offset=28), 'encoding', Load(), lineno=190, col_offset=28), lineno=190, col_offset=16), If(BoolOp(And(), [Compare(Name('_encoding', Load(), lineno=191, col_offset=20), [IsNot()], [Name('None', Load(), lineno=191, col_offset=37)], lineno=191, col_offset=20), UnaryOp(Not(), Compare(Name('_encoding', Load(), lineno=192, col_offset=33), [Eq()], [Str('utf-8', lineno=192, col_offset=46)], lineno=192, col_offset=33), lineno=192, col_offset=28)], lineno=191, col_offset=20), [Assign([Name('o', Store(), lineno=193, col_offset=20)], Call(Attribute(Name('o', Load(), lineno=193, col_offset=24), 'decode', Load(), lineno=193, col_offset=24), [Name('_encoding', Load(), lineno=193, col_offset=33)], [], None, None, lineno=193, col_offset=24), lineno=193, col_offset=20)], [], lineno=191, col_offset=16)], [], lineno=189, col_offset=12), If(Attribute(Name('self', Load(), lineno=194, col_offset=15), 'ensure_ascii', Load(), lineno=194, col_offset=15), [Return(Call(Name('encode_basestring_ascii', Load(), lineno=195, col_offset=23), [Name('o', Load(), lineno=195, col_offset=47)], [], None, None, lineno=195, col_offset=23), lineno=195, col_offset=16)], [Return(Call(Name('encode_basestring', Load(), lineno=197, col_offset=23), [Name('o', Load(), lineno=197, col_offset=41)], [], None, None, lineno=197, col_offset=23), lineno=197, col_offset=16)], lineno=194, col_offset=12)], [], lineno=188, col_offset=8), Assign([Name('chunks', Store(), lineno=201, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=201, col_offset=17), 'iterencode', Load(), lineno=201, col_offset=17), [Name('o', Load(), lineno=201, col_offset=33)], [keyword('_one_shot', Name('True', Load(), lineno=201, col_offset=46))], None, None, lineno=201, col_offset=17), lineno=201, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=202, col_offset=15), [Name('chunks', Load(), lineno=202, col_offset=26), Tuple([Name('list', Load(), lineno=202, col_offset=35), Name('tuple', Load(), lineno=202, col_offset=41)], Load(), lineno=202, col_offset=35)], [], None, None, lineno=202, col_offset=15), lineno=202, col_offset=11), [Assign([Name('chunks', Store(), lineno=203, col_offset=12)], Call(Name('list', Load(), lineno=203, col_offset=21), [Name('chunks', Load(), lineno=203, col_offset=26)], [], None, None, lineno=203, col_offset=21), lineno=203, col_offset=12)], [], lineno=202, col_offset=8), Return(Call(Attribute(Str('', lineno=204, col_offset=15), 'join', Load(), lineno=204, col_offset=15), [Name('chunks', Load(), lineno=204, col_offset=23)], [], None, None, lineno=204, col_offset=15), lineno=204, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('iterencode', arguments([Name('self', Param(), lineno=206, col_offset=19), Name('o', Param(), lineno=206, col_offset=25), Name('_one_shot', Param(), lineno=206, col_offset=28)], None, None, [Name('False', Load(), lineno=206, col_offset=38)]), [Expr(Str('Encode the given object and yield each string\n        representation as available.\n\n        For example::\n\n            for chunk in JSONEncoder().iterencode(bigobject):\n                mysocket.write(chunk)\n\n        ', lineno=215, col_offset=-1), lineno=215, col_offset=-1), If(Attribute(Name('self', Load(), lineno=216, col_offset=11), 'check_circular', Load(), lineno=216, col_offset=11), [Assign([Name('markers', Store(), lineno=217, col_offset=12)], Dict([], [], lineno=217, col_offset=22), lineno=217, col_offset=12)], [Assign([Name('markers', Store(), lineno=219, col_offset=12)], Name('None', Load(), lineno=219, col_offset=22), lineno=219, col_offset=12)], lineno=216, col_offset=8), If(Attribute(Name('self', Load(), lineno=220, col_offset=11), 'ensure_ascii', Load(), lineno=220, col_offset=11), [Assign([Name('_encoder', Store(), lineno=221, col_offset=12)], Name('encode_basestring_ascii', Load(), lineno=221, col_offset=23), lineno=221, col_offset=12)], [Assign([Name('_encoder', Store(), lineno=223, col_offset=12)], Name('encode_basestring', Load(), lineno=223, col_offset=23), lineno=223, col_offset=12)], lineno=220, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=224, col_offset=11), 'encoding', Load(), lineno=224, col_offset=11), [NotEq()], [Str('utf-8', lineno=224, col_offset=28)], lineno=224, col_offset=11), [FunctionDef('_encoder', arguments([Name('o', Param(), lineno=225, col_offset=25), Name('_orig_encoder', Param(), lineno=225, col_offset=28), Name('_encoding', Param(), lineno=225, col_offset=52)], None, None, [Name('_encoder', Load(), lineno=225, col_offset=42), Attribute(Name('self', Load(), lineno=225, col_offset=62), 'encoding', Load(), lineno=225, col_offset=62)]), [If(Call(Name('isinstance', Load(), lineno=226, col_offset=19), [Name('o', Load(), lineno=226, col_offset=30), Name('str', Load(), lineno=226, col_offset=33)], [], None, None, lineno=226, col_offset=19), [Assign([Name('o', Store(), lineno=227, col_offset=20)], Call(Attribute(Name('o', Load(), lineno=227, col_offset=24), 'decode', Load(), lineno=227, col_offset=24), [Name('_encoding', Load(), lineno=227, col_offset=33)], [], None, None, lineno=227, col_offset=24), lineno=227, col_offset=20)], [], lineno=226, col_offset=16), Return(Call(Name('_orig_encoder', Load(), lineno=228, col_offset=23), [Name('o', Load(), lineno=228, col_offset=37)], [], None, None, lineno=228, col_offset=23), lineno=228, col_offset=16)], [], lineno=225, col_offset=12)], [], lineno=224, col_offset=8), FunctionDef('floatstr', arguments([Name('o', Param(), lineno=230, col_offset=21), Name('allow_nan', Param(), lineno=230, col_offset=24), Name('_repr', Param(), lineno=231, col_offset=16), Name('_inf', Param(), lineno=231, col_offset=34), Name('_neginf', Param(), lineno=231, col_offset=49)], None, None, [Attribute(Name('self', Load(), lineno=230, col_offset=34), 'allow_nan', Load(), lineno=230, col_offset=34), Name('FLOAT_REPR', Load(), lineno=231, col_offset=22), Name('INFINITY', Load(), lineno=231, col_offset=39), UnaryOp(USub(), Name('INFINITY', Load(), lineno=231, col_offset=58), lineno=231, col_offset=57)]), [If(Compare(Name('o', Load(), lineno=236, col_offset=15), [NotEq()], [Name('o', Load(), lineno=236, col_offset=20)], lineno=236, col_offset=15), [Assign([Name('text', Store(), lineno=237, col_offset=16)], Str('NaN', lineno=237, col_offset=23), lineno=237, col_offset=16)], [If(Compare(Name('o', Load(), lineno=238, col_offset=17), [Eq()], [Name('_inf', Load(), lineno=238, col_offset=22)], lineno=238, col_offset=17), [Assign([Name('text', Store(), lineno=239, col_offset=16)], Str('Infinity', lineno=239, col_offset=23), lineno=239, col_offset=16)], [If(Compare(Name('o', Load(), lineno=240, col_offset=17), [Eq()], [Name('_neginf', Load(), lineno=240, col_offset=22)], lineno=240, col_offset=17), [Assign([Name('text', Store(), lineno=241, col_offset=16)], Str('-Infinity', lineno=241, col_offset=23), lineno=241, col_offset=16)], [Return(Call(Name('_repr', Load(), lineno=243, col_offset=23), [Name('o', Load(), lineno=243, col_offset=29)], [], None, None, lineno=243, col_offset=23), lineno=243, col_offset=16)], lineno=240, col_offset=17)], lineno=238, col_offset=17)], lineno=236, col_offset=12), If(UnaryOp(Not(), Name('allow_nan', Load(), lineno=245, col_offset=19), lineno=245, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=246, col_offset=22), [BinOp(Str('Out of range float values are not JSON compliant: ', lineno=247, col_offset=20), Add(), Call(Name('repr', Load(), lineno=248, col_offset=20), [Name('o', Load(), lineno=248, col_offset=25)], [], None, None, lineno=248, col_offset=20), lineno=247, col_offset=20)], [], None, None, lineno=246, col_offset=22), None, None, lineno=246, col_offset=16)], [], lineno=245, col_offset=12), Return(Name('text', Load(), lineno=250, col_offset=19), lineno=250, col_offset=12)], [], lineno=230, col_offset=8), If(BoolOp(And(), [Name('_one_shot', Load(), lineno=253, col_offset=12), Compare(Name('c_make_encoder', Load(), lineno=253, col_offset=26), [IsNot()], [Name('None', Load(), lineno=253, col_offset=48)], lineno=253, col_offset=26), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=254, col_offset=24), 'indent', Load(), lineno=254, col_offset=24), lineno=254, col_offset=20), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=254, col_offset=44), 'sort_keys', Load(), lineno=254, col_offset=44), lineno=254, col_offset=40)], lineno=253, col_offset=12), [Assign([Name('_iterencode', Store(), lineno=255, col_offset=12)], Call(Name('c_make_encoder', Load(), lineno=255, col_offset=26), [Name('markers', Load(), lineno=256, col_offset=16), Attribute(Name('self', Load(), lineno=256, col_offset=25), 'default', Load(), lineno=256, col_offset=25), Name('_encoder', Load(), lineno=256, col_offset=39), Attribute(Name('self', Load(), lineno=256, col_offset=49), 'indent', Load(), lineno=256, col_offset=49), Attribute(Name('self', Load(), lineno=257, col_offset=16), 'key_separator', Load(), lineno=257, col_offset=16), Attribute(Name('self', Load(), lineno=257, col_offset=36), 'item_separator', Load(), lineno=257, col_offset=36), Attribute(Name('self', Load(), lineno=257, col_offset=57), 'sort_keys', Load(), lineno=257, col_offset=57), Attribute(Name('self', Load(), lineno=258, col_offset=16), 'skipkeys', Load(), lineno=258, col_offset=16), Attribute(Name('self', Load(), lineno=258, col_offset=31), 'allow_nan', Load(), lineno=258, col_offset=31)], [], None, None, lineno=255, col_offset=26), lineno=255, col_offset=12)], [Assign([Name('_iterencode', Store(), lineno=260, col_offset=12)], Call(Name('_make_iterencode', Load(), lineno=260, col_offset=26), [Name('markers', Load(), lineno=261, col_offset=16), Attribute(Name('self', Load(), lineno=261, col_offset=25), 'default', Load(), lineno=261, col_offset=25), Name('_encoder', Load(), lineno=261, col_offset=39), Attribute(Name('self', Load(), lineno=261, col_offset=49), 'indent', Load(), lineno=261, col_offset=49), Name('floatstr', Load(), lineno=261, col_offset=62), Attribute(Name('self', Load(), lineno=262, col_offset=16), 'key_separator', Load(), lineno=262, col_offset=16), Attribute(Name('self', Load(), lineno=262, col_offset=36), 'item_separator', Load(), lineno=262, col_offset=36), Attribute(Name('self', Load(), lineno=262, col_offset=57), 'sort_keys', Load(), lineno=262, col_offset=57), Attribute(Name('self', Load(), lineno=263, col_offset=16), 'skipkeys', Load(), lineno=263, col_offset=16), Name('_one_shot', Load(), lineno=263, col_offset=31)], [], None, None, lineno=260, col_offset=26), lineno=260, col_offset=12)], lineno=253, col_offset=8), Return(Call(Name('_iterencode', Load(), lineno=264, col_offset=15), [Name('o', Load(), lineno=264, col_offset=27), Num(0, lineno=264, col_offset=30)], [], None, None, lineno=264, col_offset=15), lineno=264, col_offset=8)], [], lineno=206, col_offset=4)], [], lineno=71, col_offset=0), FunctionDef('_make_iterencode', arguments([Name('markers', Param(), lineno=266, col_offset=21), Name('_default', Param(), lineno=266, col_offset=30), Name('_encoder', Param(), lineno=266, col_offset=40), Name('_indent', Param(), lineno=266, col_offset=50), Name('_floatstr', Param(), lineno=266, col_offset=59), Name('_key_separator', Param(), lineno=267, col_offset=8), Name('_item_separator', Param(), lineno=267, col_offset=24), Name('_sort_keys', Param(), lineno=267, col_offset=41), Name('_skipkeys', Param(), lineno=267, col_offset=53), Name('_one_shot', Param(), lineno=267, col_offset=64), Name('ValueError', Param(), lineno=269, col_offset=8), Name('basestring', Param(), lineno=270, col_offset=8), Name('dict', Param(), lineno=271, col_offset=8), Name('float', Param(), lineno=272, col_offset=8), Name('id', Param(), lineno=273, col_offset=8), Name('int', Param(), lineno=274, col_offset=8), Name('isinstance', Param(), lineno=275, col_offset=8), Name('list', Param(), lineno=276, col_offset=8), Name('long', Param(), lineno=277, col_offset=8), Name('str', Param(), lineno=278, col_offset=8), Name('tuple', Param(), lineno=279, col_offset=8)], None, None, [Name('ValueError', Load(), lineno=269, col_offset=19), Name('basestring', Load(), lineno=270, col_offset=19), Name('dict', Load(), lineno=271, col_offset=13), Name('float', Load(), lineno=272, col_offset=14), Name('id', Load(), lineno=273, col_offset=11), Name('int', Load(), lineno=274, col_offset=12), Name('isinstance', Load(), lineno=275, col_offset=19), Name('list', Load(), lineno=276, col_offset=13), Name('long', Load(), lineno=277, col_offset=13), Name('str', Load(), lineno=278, col_offset=12), Name('tuple', Load(), lineno=279, col_offset=14)]), [FunctionDef('_iterencode_list', arguments([Name('lst', Param(), lineno=282, col_offset=25), Name('_current_indent_level', Param(), lineno=282, col_offset=30)], None, None, []), [If(UnaryOp(Not(), Name('lst', Load(), lineno=283, col_offset=15), lineno=283, col_offset=11), [Expr(Yield(Str('[]', lineno=284, col_offset=18), lineno=284, col_offset=12), lineno=284, col_offset=12), Return(None, lineno=285, col_offset=12)], [], lineno=283, col_offset=8), If(Compare(Name('markers', Load(), lineno=286, col_offset=11), [IsNot()], [Name('None', Load(), lineno=286, col_offset=26)], lineno=286, col_offset=11), [Assign([Name('markerid', Store(), lineno=287, col_offset=12)], Call(Name('id', Load(), lineno=287, col_offset=23), [Name('lst', Load(), lineno=287, col_offset=26)], [], None, None, lineno=287, col_offset=23), lineno=287, col_offset=12), If(Compare(Name('markerid', Load(), lineno=288, col_offset=15), [In()], [Name('markers', Load(), lineno=288, col_offset=27)], lineno=288, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=289, col_offset=22), [Str('Circular reference detected', lineno=289, col_offset=33)], [], None, None, lineno=289, col_offset=22), None, None, lineno=289, col_offset=16)], [], lineno=288, col_offset=12), Assign([Subscript(Name('markers', Load(), lineno=290, col_offset=12), Index(Name('markerid', Load(), lineno=290, col_offset=20)), Store(), lineno=290, col_offset=12)], Name('lst', Load(), lineno=290, col_offset=32), lineno=290, col_offset=12)], [], lineno=286, col_offset=8), Assign([Name('buf', Store(), lineno=291, col_offset=8)], Str('[', lineno=291, col_offset=14), lineno=291, col_offset=8), If(Compare(Name('_indent', Load(), lineno=292, col_offset=11), [IsNot()], [Name('None', Load(), lineno=292, col_offset=26)], lineno=292, col_offset=11), [AugAssign(Name('_current_indent_level', Store(), lineno=293, col_offset=12), Add(), Num(1, lineno=293, col_offset=37), lineno=293, col_offset=12), Assign([Name('newline_indent', Store(), lineno=294, col_offset=12)], BinOp(Str('\n', lineno=294, col_offset=29), Add(), BinOp(Str(' ', lineno=294, col_offset=37), Mult(), BinOp(Name('_indent', Load(), lineno=294, col_offset=44), Mult(), Name('_current_indent_level', Load(), lineno=294, col_offset=54), lineno=294, col_offset=44), lineno=294, col_offset=37), lineno=294, col_offset=29), lineno=294, col_offset=12), Assign([Name('separator', Store(), lineno=295, col_offset=12)], BinOp(Name('_item_separator', Load(), lineno=295, col_offset=24), Add(), Name('newline_indent', Load(), lineno=295, col_offset=42), lineno=295, col_offset=24), lineno=295, col_offset=12), AugAssign(Name('buf', Store(), lineno=296, col_offset=12), Add(), Name('newline_indent', Load(), lineno=296, col_offset=19), lineno=296, col_offset=12)], [Assign([Name('newline_indent', Store(), lineno=298, col_offset=12)], Name('None', Load(), lineno=298, col_offset=29), lineno=298, col_offset=12), Assign([Name('separator', Store(), lineno=299, col_offset=12)], Name('_item_separator', Load(), lineno=299, col_offset=24), lineno=299, col_offset=12)], lineno=292, col_offset=8), Assign([Name('first', Store(), lineno=300, col_offset=8)], Name('True', Load(), lineno=300, col_offset=16), lineno=300, col_offset=8), For(Name('value', Store(), lineno=301, col_offset=12), Name('lst', Load(), lineno=301, col_offset=21), [If(Name('first', Load(), lineno=302, col_offset=15), [Assign([Name('first', Store(), lineno=303, col_offset=16)], Name('False', Load(), lineno=303, col_offset=24), lineno=303, col_offset=16)], [Assign([Name('buf', Store(), lineno=305, col_offset=16)], Name('separator', Load(), lineno=305, col_offset=22), lineno=305, col_offset=16)], lineno=302, col_offset=12), If(Call(Name('isinstance', Load(), lineno=306, col_offset=15), [Name('value', Load(), lineno=306, col_offset=26), Name('basestring', Load(), lineno=306, col_offset=33)], [], None, None, lineno=306, col_offset=15), [Expr(Yield(BinOp(Name('buf', Load(), lineno=307, col_offset=22), Add(), Call(Name('_encoder', Load(), lineno=307, col_offset=28), [Name('value', Load(), lineno=307, col_offset=37)], [], None, None, lineno=307, col_offset=28), lineno=307, col_offset=22), lineno=307, col_offset=16), lineno=307, col_offset=16)], [If(Compare(Name('value', Load(), lineno=308, col_offset=17), [Is()], [Name('None', Load(), lineno=308, col_offset=26)], lineno=308, col_offset=17), [Expr(Yield(BinOp(Name('buf', Load(), lineno=309, col_offset=22), Add(), Str('null', lineno=309, col_offset=28), lineno=309, col_offset=22), lineno=309, col_offset=16), lineno=309, col_offset=16)], [If(Compare(Name('value', Load(), lineno=310, col_offset=17), [Is()], [Name('True', Load(), lineno=310, col_offset=26)], lineno=310, col_offset=17), [Expr(Yield(BinOp(Name('buf', Load(), lineno=311, col_offset=22), Add(), Str('true', lineno=311, col_offset=28), lineno=311, col_offset=22), lineno=311, col_offset=16), lineno=311, col_offset=16)], [If(Compare(Name('value', Load(), lineno=312, col_offset=17), [Is()], [Name('False', Load(), lineno=312, col_offset=26)], lineno=312, col_offset=17), [Expr(Yield(BinOp(Name('buf', Load(), lineno=313, col_offset=22), Add(), Str('false', lineno=313, col_offset=28), lineno=313, col_offset=22), lineno=313, col_offset=16), lineno=313, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=314, col_offset=17), [Name('value', Load(), lineno=314, col_offset=28), Tuple([Name('int', Load(), lineno=314, col_offset=36), Name('long', Load(), lineno=314, col_offset=41)], Load(), lineno=314, col_offset=36)], [], None, None, lineno=314, col_offset=17), [Expr(Yield(BinOp(Name('buf', Load(), lineno=315, col_offset=22), Add(), Call(Name('str', Load(), lineno=315, col_offset=28), [Name('value', Load(), lineno=315, col_offset=32)], [], None, None, lineno=315, col_offset=28), lineno=315, col_offset=22), lineno=315, col_offset=16), lineno=315, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=316, col_offset=17), [Name('value', Load(), lineno=316, col_offset=28), Name('float', Load(), lineno=316, col_offset=35)], [], None, None, lineno=316, col_offset=17), [Expr(Yield(BinOp(Name('buf', Load(), lineno=317, col_offset=22), Add(), Call(Name('_floatstr', Load(), lineno=317, col_offset=28), [Name('value', Load(), lineno=317, col_offset=38)], [], None, None, lineno=317, col_offset=28), lineno=317, col_offset=22), lineno=317, col_offset=16), lineno=317, col_offset=16)], [Expr(Yield(Name('buf', Load(), lineno=319, col_offset=22), lineno=319, col_offset=16), lineno=319, col_offset=16), If(Call(Name('isinstance', Load(), lineno=320, col_offset=19), [Name('value', Load(), lineno=320, col_offset=30), Tuple([Name('list', Load(), lineno=320, col_offset=38), Name('tuple', Load(), lineno=320, col_offset=44)], Load(), lineno=320, col_offset=38)], [], None, None, lineno=320, col_offset=19), [Assign([Name('chunks', Store(), lineno=321, col_offset=20)], Call(Name('_iterencode_list', Load(), lineno=321, col_offset=29), [Name('value', Load(), lineno=321, col_offset=46), Name('_current_indent_level', Load(), lineno=321, col_offset=53)], [], None, None, lineno=321, col_offset=29), lineno=321, col_offset=20)], [If(Call(Name('isinstance', Load(), lineno=322, col_offset=21), [Name('value', Load(), lineno=322, col_offset=32), Name('dict', Load(), lineno=322, col_offset=39)], [], None, None, lineno=322, col_offset=21), [Assign([Name('chunks', Store(), lineno=323, col_offset=20)], Call(Name('_iterencode_dict', Load(), lineno=323, col_offset=29), [Name('value', Load(), lineno=323, col_offset=46), Name('_current_indent_level', Load(), lineno=323, col_offset=53)], [], None, None, lineno=323, col_offset=29), lineno=323, col_offset=20)], [Assign([Name('chunks', Store(), lineno=325, col_offset=20)], Call(Name('_iterencode', Load(), lineno=325, col_offset=29), [Name('value', Load(), lineno=325, col_offset=41), Name('_current_indent_level', Load(), lineno=325, col_offset=48)], [], None, None, lineno=325, col_offset=29), lineno=325, col_offset=20)], lineno=322, col_offset=21)], lineno=320, col_offset=16), For(Name('chunk', Store(), lineno=326, col_offset=20), Name('chunks', Load(), lineno=326, col_offset=29), [Expr(Yield(Name('chunk', Load(), lineno=327, col_offset=26), lineno=327, col_offset=20), lineno=327, col_offset=20)], [], lineno=326, col_offset=16)], lineno=316, col_offset=17)], lineno=314, col_offset=17)], lineno=312, col_offset=17)], lineno=310, col_offset=17)], lineno=308, col_offset=17)], lineno=306, col_offset=12)], [], lineno=301, col_offset=8), If(Compare(Name('newline_indent', Load(), lineno=328, col_offset=11), [IsNot()], [Name('None', Load(), lineno=328, col_offset=33)], lineno=328, col_offset=11), [AugAssign(Name('_current_indent_level', Store(), lineno=329, col_offset=12), Sub(), Num(1, lineno=329, col_offset=37), lineno=329, col_offset=12), Expr(Yield(BinOp(Str('\n', lineno=330, col_offset=18), Add(), BinOp(Str(' ', lineno=330, col_offset=26), Mult(), BinOp(Name('_indent', Load(), lineno=330, col_offset=33), Mult(), Name('_current_indent_level', Load(), lineno=330, col_offset=43), lineno=330, col_offset=33), lineno=330, col_offset=26), lineno=330, col_offset=18), lineno=330, col_offset=12), lineno=330, col_offset=12)], [], lineno=328, col_offset=8), Expr(Yield(Str(']', lineno=331, col_offset=14), lineno=331, col_offset=8), lineno=331, col_offset=8), If(Compare(Name('markers', Load(), lineno=332, col_offset=11), [IsNot()], [Name('None', Load(), lineno=332, col_offset=26)], lineno=332, col_offset=11), [Delete([Subscript(Name('markers', Load(), lineno=333, col_offset=16), Index(Name('markerid', Load(), lineno=333, col_offset=24)), Del(), lineno=333, col_offset=16)], lineno=333, col_offset=12)], [], lineno=332, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('_iterencode_dict', arguments([Name('dct', Param(), lineno=335, col_offset=25), Name('_current_indent_level', Param(), lineno=335, col_offset=30)], None, None, []), [If(UnaryOp(Not(), Name('dct', Load(), lineno=336, col_offset=15), lineno=336, col_offset=11), [Expr(Yield(Str('{}', lineno=337, col_offset=18), lineno=337, col_offset=12), lineno=337, col_offset=12), Return(None, lineno=338, col_offset=12)], [], lineno=336, col_offset=8), If(Compare(Name('markers', Load(), lineno=339, col_offset=11), [IsNot()], [Name('None', Load(), lineno=339, col_offset=26)], lineno=339, col_offset=11), [Assign([Name('markerid', Store(), lineno=340, col_offset=12)], Call(Name('id', Load(), lineno=340, col_offset=23), [Name('dct', Load(), lineno=340, col_offset=26)], [], None, None, lineno=340, col_offset=23), lineno=340, col_offset=12), If(Compare(Name('markerid', Load(), lineno=341, col_offset=15), [In()], [Name('markers', Load(), lineno=341, col_offset=27)], lineno=341, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=342, col_offset=22), [Str('Circular reference detected', lineno=342, col_offset=33)], [], None, None, lineno=342, col_offset=22), None, None, lineno=342, col_offset=16)], [], lineno=341, col_offset=12), Assign([Subscript(Name('markers', Load(), lineno=343, col_offset=12), Index(Name('markerid', Load(), lineno=343, col_offset=20)), Store(), lineno=343, col_offset=12)], Name('dct', Load(), lineno=343, col_offset=32), lineno=343, col_offset=12)], [], lineno=339, col_offset=8), Expr(Yield(Str('{', lineno=344, col_offset=14), lineno=344, col_offset=8), lineno=344, col_offset=8), If(Compare(Name('_indent', Load(), lineno=345, col_offset=11), [IsNot()], [Name('None', Load(), lineno=345, col_offset=26)], lineno=345, col_offset=11), [AugAssign(Name('_current_indent_level', Store(), lineno=346, col_offset=12), Add(), Num(1, lineno=346, col_offset=37), lineno=346, col_offset=12), Assign([Name('newline_indent', Store(), lineno=347, col_offset=12)], BinOp(Str('\n', lineno=347, col_offset=29), Add(), BinOp(Str(' ', lineno=347, col_offset=37), Mult(), BinOp(Name('_indent', Load(), lineno=347, col_offset=44), Mult(), Name('_current_indent_level', Load(), lineno=347, col_offset=54), lineno=347, col_offset=44), lineno=347, col_offset=37), lineno=347, col_offset=29), lineno=347, col_offset=12), Assign([Name('item_separator', Store(), lineno=348, col_offset=12)], BinOp(Name('_item_separator', Load(), lineno=348, col_offset=29), Add(), Name('newline_indent', Load(), lineno=348, col_offset=47), lineno=348, col_offset=29), lineno=348, col_offset=12), Expr(Yield(Name('newline_indent', Load(), lineno=349, col_offset=18), lineno=349, col_offset=12), lineno=349, col_offset=12)], [Assign([Name('newline_indent', Store(), lineno=351, col_offset=12)], Name('None', Load(), lineno=351, col_offset=29), lineno=351, col_offset=12), Assign([Name('item_separator', Store(), lineno=352, col_offset=12)], Name('_item_separator', Load(), lineno=352, col_offset=29), lineno=352, col_offset=12)], lineno=345, col_offset=8), Assign([Name('first', Store(), lineno=353, col_offset=8)], Name('True', Load(), lineno=353, col_offset=16), lineno=353, col_offset=8), If(Name('_sort_keys', Load(), lineno=354, col_offset=11), [Assign([Name('items', Store(), lineno=355, col_offset=12)], Call(Name('sorted', Load(), lineno=355, col_offset=20), [Call(Attribute(Name('dct', Load(), lineno=355, col_offset=27), 'items', Load(), lineno=355, col_offset=27), [], [], None, None, lineno=355, col_offset=27)], [keyword('key', Lambda(arguments([Name('kv', Param(), lineno=355, col_offset=51)], None, None, []), Subscript(Name('kv', Load(), lineno=355, col_offset=55), Index(Num(0, lineno=355, col_offset=58)), Load(), lineno=355, col_offset=55), lineno=355, col_offset=44))], None, None, lineno=355, col_offset=20), lineno=355, col_offset=12)], [Assign([Name('items', Store(), lineno=357, col_offset=12)], Call(Attribute(Name('dct', Load(), lineno=357, col_offset=20), 'iteritems', Load(), lineno=357, col_offset=20), [], [], None, None, lineno=357, col_offset=20), lineno=357, col_offset=12)], lineno=354, col_offset=8), For(Tuple([Name('key', Store(), lineno=358, col_offset=12), Name('value', Store(), lineno=358, col_offset=17)], Store(), lineno=358, col_offset=12), Name('items', Load(), lineno=358, col_offset=26), [If(Call(Name('isinstance', Load(), lineno=359, col_offset=15), [Name('key', Load(), lineno=359, col_offset=26), Name('basestring', Load(), lineno=359, col_offset=31)], [], None, None, lineno=359, col_offset=15), [Pass( lineno=360, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=363, col_offset=17), [Name('key', Load(), lineno=363, col_offset=28), Name('float', Load(), lineno=363, col_offset=33)], [], None, None, lineno=363, col_offset=17), [Assign([Name('key', Store(), lineno=364, col_offset=16)], Call(Name('_floatstr', Load(), lineno=364, col_offset=22), [Name('key', Load(), lineno=364, col_offset=32)], [], None, None, lineno=364, col_offset=22), lineno=364, col_offset=16)], [If(Compare(Name('key', Load(), lineno=365, col_offset=17), [Is()], [Name('True', Load(), lineno=365, col_offset=24)], lineno=365, col_offset=17), [Assign([Name('key', Store(), lineno=366, col_offset=16)], Str('true', lineno=366, col_offset=22), lineno=366, col_offset=16)], [If(Compare(Name('key', Load(), lineno=367, col_offset=17), [Is()], [Name('False', Load(), lineno=367, col_offset=24)], lineno=367, col_offset=17), [Assign([Name('key', Store(), lineno=368, col_offset=16)], Str('false', lineno=368, col_offset=22), lineno=368, col_offset=16)], [If(Compare(Name('key', Load(), lineno=369, col_offset=17), [Is()], [Name('None', Load(), lineno=369, col_offset=24)], lineno=369, col_offset=17), [Assign([Name('key', Store(), lineno=370, col_offset=16)], Str('null', lineno=370, col_offset=22), lineno=370, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=371, col_offset=17), [Name('key', Load(), lineno=371, col_offset=28), Tuple([Name('int', Load(), lineno=371, col_offset=34), Name('long', Load(), lineno=371, col_offset=39)], Load(), lineno=371, col_offset=34)], [], None, None, lineno=371, col_offset=17), [Assign([Name('key', Store(), lineno=372, col_offset=16)], Call(Name('str', Load(), lineno=372, col_offset=22), [Name('key', Load(), lineno=372, col_offset=26)], [], None, None, lineno=372, col_offset=22), lineno=372, col_offset=16)], [If(Name('_skipkeys', Load(), lineno=373, col_offset=17), [Continue( lineno=374, col_offset=16)], [Raise(Call(Name('TypeError', Load(), lineno=376, col_offset=22), [BinOp(BinOp(Str('key ', lineno=376, col_offset=32), Add(), Call(Name('repr', Load(), lineno=376, col_offset=41), [Name('key', Load(), lineno=376, col_offset=46)], [], None, None, lineno=376, col_offset=41), lineno=376, col_offset=32), Add(), Str(' is not a string', lineno=376, col_offset=53), lineno=376, col_offset=51)], [], None, None, lineno=376, col_offset=22), None, None, lineno=376, col_offset=16)], lineno=373, col_offset=17)], lineno=371, col_offset=17)], lineno=369, col_offset=17)], lineno=367, col_offset=17)], lineno=365, col_offset=17)], lineno=363, col_offset=17)], lineno=359, col_offset=12), If(Name('first', Load(), lineno=377, col_offset=15), [Assign([Name('first', Store(), lineno=378, col_offset=16)], Name('False', Load(), lineno=378, col_offset=24), lineno=378, col_offset=16)], [Expr(Yield(Name('item_separator', Load(), lineno=380, col_offset=22), lineno=380, col_offset=16), lineno=380, col_offset=16)], lineno=377, col_offset=12), Expr(Yield(Call(Name('_encoder', Load(), lineno=381, col_offset=18), [Name('key', Load(), lineno=381, col_offset=27)], [], None, None, lineno=381, col_offset=18), lineno=381, col_offset=12), lineno=381, col_offset=12), Expr(Yield(Name('_key_separator', Load(), lineno=382, col_offset=18), lineno=382, col_offset=12), lineno=382, col_offset=12), If(Call(Name('isinstance', Load(), lineno=383, col_offset=15), [Name('value', Load(), lineno=383, col_offset=26), Name('basestring', Load(), lineno=383, col_offset=33)], [], None, None, lineno=383, col_offset=15), [Expr(Yield(Call(Name('_encoder', Load(), lineno=384, col_offset=22), [Name('value', Load(), lineno=384, col_offset=31)], [], None, None, lineno=384, col_offset=22), lineno=384, col_offset=16), lineno=384, col_offset=16)], [If(Compare(Name('value', Load(), lineno=385, col_offset=17), [Is()], [Name('None', Load(), lineno=385, col_offset=26)], lineno=385, col_offset=17), [Expr(Yield(Str('null', lineno=386, col_offset=22), lineno=386, col_offset=16), lineno=386, col_offset=16)], [If(Compare(Name('value', Load(), lineno=387, col_offset=17), [Is()], [Name('True', Load(), lineno=387, col_offset=26)], lineno=387, col_offset=17), [Expr(Yield(Str('true', lineno=388, col_offset=22), lineno=388, col_offset=16), lineno=388, col_offset=16)], [If(Compare(Name('value', Load(), lineno=389, col_offset=17), [Is()], [Name('False', Load(), lineno=389, col_offset=26)], lineno=389, col_offset=17), [Expr(Yield(Str('false', lineno=390, col_offset=22), lineno=390, col_offset=16), lineno=390, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=391, col_offset=17), [Name('value', Load(), lineno=391, col_offset=28), Tuple([Name('int', Load(), lineno=391, col_offset=36), Name('long', Load(), lineno=391, col_offset=41)], Load(), lineno=391, col_offset=36)], [], None, None, lineno=391, col_offset=17), [Expr(Yield(Call(Name('str', Load(), lineno=392, col_offset=22), [Name('value', Load(), lineno=392, col_offset=26)], [], None, None, lineno=392, col_offset=22), lineno=392, col_offset=16), lineno=392, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=393, col_offset=17), [Name('value', Load(), lineno=393, col_offset=28), Name('float', Load(), lineno=393, col_offset=35)], [], None, None, lineno=393, col_offset=17), [Expr(Yield(Call(Name('_floatstr', Load(), lineno=394, col_offset=22), [Name('value', Load(), lineno=394, col_offset=32)], [], None, None, lineno=394, col_offset=22), lineno=394, col_offset=16), lineno=394, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=396, col_offset=19), [Name('value', Load(), lineno=396, col_offset=30), Tuple([Name('list', Load(), lineno=396, col_offset=38), Name('tuple', Load(), lineno=396, col_offset=44)], Load(), lineno=396, col_offset=38)], [], None, None, lineno=396, col_offset=19), [Assign([Name('chunks', Store(), lineno=397, col_offset=20)], Call(Name('_iterencode_list', Load(), lineno=397, col_offset=29), [Name('value', Load(), lineno=397, col_offset=46), Name('_current_indent_level', Load(), lineno=397, col_offset=53)], [], None, None, lineno=397, col_offset=29), lineno=397, col_offset=20)], [If(Call(Name('isinstance', Load(), lineno=398, col_offset=21), [Name('value', Load(), lineno=398, col_offset=32), Name('dict', Load(), lineno=398, col_offset=39)], [], None, None, lineno=398, col_offset=21), [Assign([Name('chunks', Store(), lineno=399, col_offset=20)], Call(Name('_iterencode_dict', Load(), lineno=399, col_offset=29), [Name('value', Load(), lineno=399, col_offset=46), Name('_current_indent_level', Load(), lineno=399, col_offset=53)], [], None, None, lineno=399, col_offset=29), lineno=399, col_offset=20)], [Assign([Name('chunks', Store(), lineno=401, col_offset=20)], Call(Name('_iterencode', Load(), lineno=401, col_offset=29), [Name('value', Load(), lineno=401, col_offset=41), Name('_current_indent_level', Load(), lineno=401, col_offset=48)], [], None, None, lineno=401, col_offset=29), lineno=401, col_offset=20)], lineno=398, col_offset=21)], lineno=396, col_offset=16), For(Name('chunk', Store(), lineno=402, col_offset=20), Name('chunks', Load(), lineno=402, col_offset=29), [Expr(Yield(Name('chunk', Load(), lineno=403, col_offset=26), lineno=403, col_offset=20), lineno=403, col_offset=20)], [], lineno=402, col_offset=16)], lineno=393, col_offset=17)], lineno=391, col_offset=17)], lineno=389, col_offset=17)], lineno=387, col_offset=17)], lineno=385, col_offset=17)], lineno=383, col_offset=12)], [], lineno=358, col_offset=8), If(Compare(Name('newline_indent', Load(), lineno=404, col_offset=11), [IsNot()], [Name('None', Load(), lineno=404, col_offset=33)], lineno=404, col_offset=11), [AugAssign(Name('_current_indent_level', Store(), lineno=405, col_offset=12), Sub(), Num(1, lineno=405, col_offset=37), lineno=405, col_offset=12), Expr(Yield(BinOp(Str('\n', lineno=406, col_offset=18), Add(), BinOp(Str(' ', lineno=406, col_offset=26), Mult(), BinOp(Name('_indent', Load(), lineno=406, col_offset=33), Mult(), Name('_current_indent_level', Load(), lineno=406, col_offset=43), lineno=406, col_offset=33), lineno=406, col_offset=26), lineno=406, col_offset=18), lineno=406, col_offset=12), lineno=406, col_offset=12)], [], lineno=404, col_offset=8), Expr(Yield(Str('}', lineno=407, col_offset=14), lineno=407, col_offset=8), lineno=407, col_offset=8), If(Compare(Name('markers', Load(), lineno=408, col_offset=11), [IsNot()], [Name('None', Load(), lineno=408, col_offset=26)], lineno=408, col_offset=11), [Delete([Subscript(Name('markers', Load(), lineno=409, col_offset=16), Index(Name('markerid', Load(), lineno=409, col_offset=24)), Del(), lineno=409, col_offset=16)], lineno=409, col_offset=12)], [], lineno=408, col_offset=8)], [], lineno=335, col_offset=4), FunctionDef('_iterencode', arguments([Name('o', Param(), lineno=411, col_offset=20), Name('_current_indent_level', Param(), lineno=411, col_offset=23)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=412, col_offset=11), [Name('o', Load(), lineno=412, col_offset=22), Name('basestring', Load(), lineno=412, col_offset=25)], [], None, None, lineno=412, col_offset=11), [Expr(Yield(Call(Name('_encoder', Load(), lineno=413, col_offset=18), [Name('o', Load(), lineno=413, col_offset=27)], [], None, None, lineno=413, col_offset=18), lineno=413, col_offset=12), lineno=413, col_offset=12)], [If(Compare(Name('o', Load(), lineno=414, col_offset=13), [Is()], [Name('None', Load(), lineno=414, col_offset=18)], lineno=414, col_offset=13), [Expr(Yield(Str('null', lineno=415, col_offset=18), lineno=415, col_offset=12), lineno=415, col_offset=12)], [If(Compare(Name('o', Load(), lineno=416, col_offset=13), [Is()], [Name('True', Load(), lineno=416, col_offset=18)], lineno=416, col_offset=13), [Expr(Yield(Str('true', lineno=417, col_offset=18), lineno=417, col_offset=12), lineno=417, col_offset=12)], [If(Compare(Name('o', Load(), lineno=418, col_offset=13), [Is()], [Name('False', Load(), lineno=418, col_offset=18)], lineno=418, col_offset=13), [Expr(Yield(Str('false', lineno=419, col_offset=18), lineno=419, col_offset=12), lineno=419, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=420, col_offset=13), [Name('o', Load(), lineno=420, col_offset=24), Tuple([Name('int', Load(), lineno=420, col_offset=28), Name('long', Load(), lineno=420, col_offset=33)], Load(), lineno=420, col_offset=28)], [], None, None, lineno=420, col_offset=13), [Expr(Yield(Call(Name('str', Load(), lineno=421, col_offset=18), [Name('o', Load(), lineno=421, col_offset=22)], [], None, None, lineno=421, col_offset=18), lineno=421, col_offset=12), lineno=421, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=422, col_offset=13), [Name('o', Load(), lineno=422, col_offset=24), Name('float', Load(), lineno=422, col_offset=27)], [], None, None, lineno=422, col_offset=13), [Expr(Yield(Call(Name('_floatstr', Load(), lineno=423, col_offset=18), [Name('o', Load(), lineno=423, col_offset=28)], [], None, None, lineno=423, col_offset=18), lineno=423, col_offset=12), lineno=423, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=424, col_offset=13), [Name('o', Load(), lineno=424, col_offset=24), Tuple([Name('list', Load(), lineno=424, col_offset=28), Name('tuple', Load(), lineno=424, col_offset=34)], Load(), lineno=424, col_offset=28)], [], None, None, lineno=424, col_offset=13), [For(Name('chunk', Store(), lineno=425, col_offset=16), Call(Name('_iterencode_list', Load(), lineno=425, col_offset=25), [Name('o', Load(), lineno=425, col_offset=42), Name('_current_indent_level', Load(), lineno=425, col_offset=45)], [], None, None, lineno=425, col_offset=25), [Expr(Yield(Name('chunk', Load(), lineno=426, col_offset=22), lineno=426, col_offset=16), lineno=426, col_offset=16)], [], lineno=425, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=427, col_offset=13), [Name('o', Load(), lineno=427, col_offset=24), Name('dict', Load(), lineno=427, col_offset=27)], [], None, None, lineno=427, col_offset=13), [For(Name('chunk', Store(), lineno=428, col_offset=16), Call(Name('_iterencode_dict', Load(), lineno=428, col_offset=25), [Name('o', Load(), lineno=428, col_offset=42), Name('_current_indent_level', Load(), lineno=428, col_offset=45)], [], None, None, lineno=428, col_offset=25), [Expr(Yield(Name('chunk', Load(), lineno=429, col_offset=22), lineno=429, col_offset=16), lineno=429, col_offset=16)], [], lineno=428, col_offset=12)], [If(Compare(Name('markers', Load(), lineno=431, col_offset=15), [IsNot()], [Name('None', Load(), lineno=431, col_offset=30)], lineno=431, col_offset=15), [Assign([Name('markerid', Store(), lineno=432, col_offset=16)], Call(Name('id', Load(), lineno=432, col_offset=27), [Name('o', Load(), lineno=432, col_offset=30)], [], None, None, lineno=432, col_offset=27), lineno=432, col_offset=16), If(Compare(Name('markerid', Load(), lineno=433, col_offset=19), [In()], [Name('markers', Load(), lineno=433, col_offset=31)], lineno=433, col_offset=19), [Raise(Call(Name('ValueError', Load(), lineno=434, col_offset=26), [Str('Circular reference detected', lineno=434, col_offset=37)], [], None, None, lineno=434, col_offset=26), None, None, lineno=434, col_offset=20)], [], lineno=433, col_offset=16), Assign([Subscript(Name('markers', Load(), lineno=435, col_offset=16), Index(Name('markerid', Load(), lineno=435, col_offset=24)), Store(), lineno=435, col_offset=16)], Name('o', Load(), lineno=435, col_offset=36), lineno=435, col_offset=16)], [], lineno=431, col_offset=12), Assign([Name('o', Store(), lineno=436, col_offset=12)], Call(Name('_default', Load(), lineno=436, col_offset=16), [Name('o', Load(), lineno=436, col_offset=25)], [], None, None, lineno=436, col_offset=16), lineno=436, col_offset=12), For(Name('chunk', Store(), lineno=437, col_offset=16), Call(Name('_iterencode', Load(), lineno=437, col_offset=25), [Name('o', Load(), lineno=437, col_offset=37), Name('_current_indent_level', Load(), lineno=437, col_offset=40)], [], None, None, lineno=437, col_offset=25), [Expr(Yield(Name('chunk', Load(), lineno=438, col_offset=22), lineno=438, col_offset=16), lineno=438, col_offset=16)], [], lineno=437, col_offset=12), If(Compare(Name('markers', Load(), lineno=439, col_offset=15), [IsNot()], [Name('None', Load(), lineno=439, col_offset=30)], lineno=439, col_offset=15), [Delete([Subscript(Name('markers', Load(), lineno=440, col_offset=20), Index(Name('markerid', Load(), lineno=440, col_offset=28)), Del(), lineno=440, col_offset=20)], lineno=440, col_offset=16)], [], lineno=439, col_offset=12)], lineno=427, col_offset=13)], lineno=424, col_offset=13)], lineno=422, col_offset=13)], lineno=420, col_offset=13)], lineno=418, col_offset=13)], lineno=416, col_offset=13)], lineno=414, col_offset=13)], lineno=412, col_offset=8)], [], lineno=411, col_offset=4), Return(Name('_iterencode', Load(), lineno=442, col_offset=11), lineno=442, col_offset=4)], [], lineno=266, col_offset=0)])
