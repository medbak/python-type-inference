Module([Expr(Str("Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nIn earlier versions of Python (up to 1.5a3), scripts or modules that\nneeded to use site-specific modules would place ``import site''\nsomewhere near the top of their code.  Because of the automatic\nimport, this is no longer necessary (but code that does it still\nworks).\n\nThis will append site-specific paths to the module search path.  On\nUnix (including Mac OSX), it starts with sys.prefix and\nsys.exec_prefix (if different) and appends\nlib/python<version>/site-packages as well as lib/site-python.\nOn other platforms (such as Windows), it tries each of the\nprefixes directly, as well as with lib/site-packages appended.  The\nresulting directories, if they exist, are appended to sys.path, and\nalso inspected for path configuration files.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n'#' are skipped. Lines starting with 'import' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.5/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.5/site-packages/bar\n  /usr/local/lib/python2.5/site-packages/foo\n\nNote that bletch is omitted because it doesn't exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nAfter these path manipulations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n\n", lineno=59, col_offset=-1), lineno=59, col_offset=-1), Import([alias('sys', None)], lineno=61, col_offset=0), Import([alias('os', None)], lineno=62, col_offset=0), Import([alias('__builtin__', None)], lineno=63, col_offset=0), Assign([Name('PREFIXES', Store(), lineno=66, col_offset=0)], List([Attribute(Name('sys', Load(), lineno=66, col_offset=12), 'prefix', Load(), lineno=66, col_offset=12), Attribute(Name('sys', Load(), lineno=66, col_offset=24), 'exec_prefix', Load(), lineno=66, col_offset=24)], Load(), lineno=66, col_offset=11), lineno=66, col_offset=0), Assign([Name('ENABLE_USER_SITE', Store(), lineno=69, col_offset=0)], Name('None', Load(), lineno=69, col_offset=19), lineno=69, col_offset=0), Assign([Name('USER_SITE', Store(), lineno=74, col_offset=0)], Name('None', Load(), lineno=74, col_offset=12), lineno=74, col_offset=0), Assign([Name('USER_BASE', Store(), lineno=75, col_offset=0)], Name('None', Load(), lineno=75, col_offset=12), lineno=75, col_offset=0), FunctionDef('makepath', arguments([], 'paths', None, []), [Assign([Name('dir', Store(), lineno=79, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=79, col_offset=10), 'path', Load(), lineno=79, col_offset=10), 'join', Load(), lineno=79, col_offset=10), [], [], Name('paths', Load(), lineno=79, col_offset=24), None, lineno=79, col_offset=10), lineno=79, col_offset=4), TryExcept([Assign([Name('dir', Store(), lineno=81, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=81, col_offset=14), 'path', Load(), lineno=81, col_offset=14), 'abspath', Load(), lineno=81, col_offset=14), [Name('dir', Load(), lineno=81, col_offset=30)], [], None, None, lineno=81, col_offset=14), lineno=81, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=82, col_offset=11), None, [Pass( lineno=83, col_offset=8)], lineno=82, col_offset=4)], [], lineno=80, col_offset=4), Return(Tuple([Name('dir', Load(), lineno=84, col_offset=11), Call(Attribute(Attribute(Name('os', Load(), lineno=84, col_offset=16), 'path', Load(), lineno=84, col_offset=16), 'normcase', Load(), lineno=84, col_offset=16), [Name('dir', Load(), lineno=84, col_offset=33)], [], None, None, lineno=84, col_offset=16)], Load(), lineno=84, col_offset=11), lineno=84, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('abs__file__', arguments([], None, None, []), [Expr(Str("Set all module' __file__ attribute to an absolute path", lineno=88, col_offset=4), lineno=88, col_offset=4), For(Name('m', Store(), lineno=89, col_offset=8), Call(Attribute(Attribute(Name('sys', Load(), lineno=89, col_offset=13), 'modules', Load(), lineno=89, col_offset=13), 'values', Load(), lineno=89, col_offset=13), [], [], None, None, lineno=89, col_offset=13), [If(Call(Name('hasattr', Load(), lineno=90, col_offset=11), [Name('m', Load(), lineno=90, col_offset=19), Str('__loader__', lineno=90, col_offset=22)], [], None, None, lineno=90, col_offset=11), [Continue( lineno=91, col_offset=12)], [], lineno=90, col_offset=8), TryExcept([Assign([Attribute(Name('m', Load(), lineno=93, col_offset=12), '__file__', Store(), lineno=93, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=93, col_offset=25), 'path', Load(), lineno=93, col_offset=25), 'abspath', Load(), lineno=93, col_offset=25), [Attribute(Name('m', Load(), lineno=93, col_offset=41), '__file__', Load(), lineno=93, col_offset=41)], [], None, None, lineno=93, col_offset=25), lineno=93, col_offset=12)], [ExceptHandler(Tuple([Name('AttributeError', Load(), lineno=94, col_offset=16), Name('OSError', Load(), lineno=94, col_offset=32)], Load(), lineno=94, col_offset=16), None, [Pass( lineno=95, col_offset=12)], lineno=94, col_offset=8)], [], lineno=92, col_offset=8)], [], lineno=89, col_offset=4)], [], lineno=87, col_offset=0), FunctionDef('removeduppaths', arguments([], None, None, []), [Expr(Str(' Remove duplicate entries from sys.path along with making them\n    absolute', lineno=100, col_offset=-1), lineno=100, col_offset=-1), Assign([Name('L', Store(), lineno=103, col_offset=4)], List([], Load(), lineno=103, col_offset=8), lineno=103, col_offset=4), Assign([Name('known_paths', Store(), lineno=104, col_offset=4)], Call(Name('set', Load(), lineno=104, col_offset=18), [], [], None, None, lineno=104, col_offset=18), lineno=104, col_offset=4), For(Name('dir', Store(), lineno=105, col_offset=8), Attribute(Name('sys', Load(), lineno=105, col_offset=15), 'path', Load(), lineno=105, col_offset=15), [Assign([Tuple([Name('dir', Store(), lineno=109, col_offset=8), Name('dircase', Store(), lineno=109, col_offset=13)], Store(), lineno=109, col_offset=8)], Call(Name('makepath', Load(), lineno=109, col_offset=23), [Name('dir', Load(), lineno=109, col_offset=32)], [], None, None, lineno=109, col_offset=23), lineno=109, col_offset=8), If(UnaryOp(Not(), Compare(Name('dircase', Load(), lineno=110, col_offset=15), [In()], [Name('known_paths', Load(), lineno=110, col_offset=26)], lineno=110, col_offset=15), lineno=110, col_offset=11), [Expr(Call(Attribute(Name('L', Load(), lineno=111, col_offset=12), 'append', Load(), lineno=111, col_offset=12), [Name('dir', Load(), lineno=111, col_offset=21)], [], None, None, lineno=111, col_offset=12), lineno=111, col_offset=12), Expr(Call(Attribute(Name('known_paths', Load(), lineno=112, col_offset=12), 'add', Load(), lineno=112, col_offset=12), [Name('dircase', Load(), lineno=112, col_offset=28)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=12)], [], lineno=110, col_offset=8)], [], lineno=105, col_offset=4), Assign([Subscript(Attribute(Name('sys', Load(), lineno=113, col_offset=4), 'path', Load(), lineno=113, col_offset=4), Slice(None, None, None), Store(), lineno=113, col_offset=4)], Name('L', Load(), lineno=113, col_offset=18), lineno=113, col_offset=4), Return(Name('known_paths', Load(), lineno=114, col_offset=11), lineno=114, col_offset=4)], [], lineno=98, col_offset=0), FunctionDef('addbuilddir', arguments([], None, None, []), [Expr(Str("Append ./build/lib.<platform> in case we're running in the build dir\n    (especially for Guido :-)", lineno=120, col_offset=-1), lineno=120, col_offset=-1), ImportFrom('sysconfig', [alias('get_platform', None)], 0, lineno=121, col_offset=4), Assign([Name('s', Store(), lineno=122, col_offset=4)], BinOp(Str('build/lib.%s-%.3s', lineno=122, col_offset=8), Mod(), Tuple([Call(Name('get_platform', Load(), lineno=122, col_offset=31), [], [], None, None, lineno=122, col_offset=31), Attribute(Name('sys', Load(), lineno=122, col_offset=47), 'version', Load(), lineno=122, col_offset=47)], Load(), lineno=122, col_offset=31), lineno=122, col_offset=8), lineno=122, col_offset=4), If(Call(Name('hasattr', Load(), lineno=123, col_offset=7), [Name('sys', Load(), lineno=123, col_offset=15), Str('gettotalrefcount', lineno=123, col_offset=20)], [], None, None, lineno=123, col_offset=7), [AugAssign(Name('s', Store(), lineno=124, col_offset=8), Add(), Str('-pydebug', lineno=124, col_offset=13), lineno=124, col_offset=8)], [], lineno=123, col_offset=4), Assign([Name('s', Store(), lineno=125, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=125, col_offset=8), 'path', Load(), lineno=125, col_offset=8), 'join', Load(), lineno=125, col_offset=8), [Call(Attribute(Attribute(Name('os', Load(), lineno=125, col_offset=21), 'path', Load(), lineno=125, col_offset=21), 'dirname', Load(), lineno=125, col_offset=21), [Call(Attribute(Attribute(Name('sys', Load(), lineno=125, col_offset=37), 'path', Load(), lineno=125, col_offset=37), 'pop', Load(), lineno=125, col_offset=37), [], [], None, None, lineno=125, col_offset=37)], [], None, None, lineno=125, col_offset=21), Name('s', Load(), lineno=125, col_offset=54)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=126, col_offset=4), 'path', Load(), lineno=126, col_offset=4), 'append', Load(), lineno=126, col_offset=4), [Name('s', Load(), lineno=126, col_offset=20)], [], None, None, lineno=126, col_offset=4), lineno=126, col_offset=4)], [], lineno=118, col_offset=0), FunctionDef('_init_pathinfo', arguments([], None, None, []), [Expr(Str('Return a set containing all existing directory entries from sys.path', lineno=130, col_offset=4), lineno=130, col_offset=4), Assign([Name('d', Store(), lineno=131, col_offset=4)], Call(Name('set', Load(), lineno=131, col_offset=8), [], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=4), For(Name('dir', Store(), lineno=132, col_offset=8), Attribute(Name('sys', Load(), lineno=132, col_offset=15), 'path', Load(), lineno=132, col_offset=15), [TryExcept([If(Call(Attribute(Attribute(Name('os', Load(), lineno=134, col_offset=15), 'path', Load(), lineno=134, col_offset=15), 'isdir', Load(), lineno=134, col_offset=15), [Name('dir', Load(), lineno=134, col_offset=29)], [], None, None, lineno=134, col_offset=15), [Assign([Tuple([Name('dir', Store(), lineno=135, col_offset=16), Name('dircase', Store(), lineno=135, col_offset=21)], Store(), lineno=135, col_offset=16)], Call(Name('makepath', Load(), lineno=135, col_offset=31), [Name('dir', Load(), lineno=135, col_offset=40)], [], None, None, lineno=135, col_offset=31), lineno=135, col_offset=16), Expr(Call(Attribute(Name('d', Load(), lineno=136, col_offset=16), 'add', Load(), lineno=136, col_offset=16), [Name('dircase', Load(), lineno=136, col_offset=22)], [], None, None, lineno=136, col_offset=16), lineno=136, col_offset=16)], [], lineno=134, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=137, col_offset=15), None, [Continue( lineno=138, col_offset=12)], lineno=137, col_offset=8)], [], lineno=133, col_offset=8)], [], lineno=132, col_offset=4), Return(Name('d', Load(), lineno=139, col_offset=11), lineno=139, col_offset=4)], [], lineno=129, col_offset=0), FunctionDef('addpackage', arguments([Name('sitedir', Param(), lineno=142, col_offset=15), Name('name', Param(), lineno=142, col_offset=24), Name('known_paths', Param(), lineno=142, col_offset=30)], None, None, []), [Expr(Str("Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with 'import '.\n    ", lineno=146, col_offset=-1), lineno=146, col_offset=-1), If(Compare(Name('known_paths', Load(), lineno=147, col_offset=7), [Is()], [Name('None', Load(), lineno=147, col_offset=22)], lineno=147, col_offset=7), [Expr(Call(Name('_init_pathinfo', Load(), lineno=148, col_offset=8), [], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Assign([Name('reset', Store(), lineno=149, col_offset=8)], Num(1, lineno=149, col_offset=16), lineno=149, col_offset=8)], [Assign([Name('reset', Store(), lineno=151, col_offset=8)], Num(0, lineno=151, col_offset=16), lineno=151, col_offset=8)], lineno=147, col_offset=4), Assign([Name('fullname', Store(), lineno=152, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=152, col_offset=15), 'path', Load(), lineno=152, col_offset=15), 'join', Load(), lineno=152, col_offset=15), [Name('sitedir', Load(), lineno=152, col_offset=28), Name('name', Load(), lineno=152, col_offset=37)], [], None, None, lineno=152, col_offset=15), lineno=152, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=154, col_offset=8)], Call(Name('open', Load(), lineno=154, col_offset=12), [Name('fullname', Load(), lineno=154, col_offset=17), Str('rU', lineno=154, col_offset=27)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=155, col_offset=11), None, [Return(None, lineno=156, col_offset=8)], lineno=155, col_offset=4)], [], lineno=153, col_offset=4), With(Name('f', Load(), lineno=157, col_offset=9), None, [For(Name('line', Store(), lineno=158, col_offset=12), Name('f', Load(), lineno=158, col_offset=20), [If(Call(Attribute(Name('line', Load(), lineno=159, col_offset=15), 'startswith', Load(), lineno=159, col_offset=15), [Str('#', lineno=159, col_offset=31)], [], None, None, lineno=159, col_offset=15), [Continue( lineno=160, col_offset=16)], [], lineno=159, col_offset=12), If(Call(Attribute(Name('line', Load(), lineno=161, col_offset=15), 'startswith', Load(), lineno=161, col_offset=15), [Tuple([Str('import ', lineno=161, col_offset=32), Str('import\t', lineno=161, col_offset=43)], Load(), lineno=161, col_offset=32)], [], None, None, lineno=161, col_offset=15), [Exec(Name('line', Load(), lineno=162, col_offset=21), None, None, lineno=162, col_offset=16), Continue( lineno=163, col_offset=16)], [], lineno=161, col_offset=12), Assign([Name('line', Store(), lineno=164, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=164, col_offset=19), 'rstrip', Load(), lineno=164, col_offset=19), [], [], None, None, lineno=164, col_offset=19), lineno=164, col_offset=12), Assign([Tuple([Name('dir', Store(), lineno=165, col_offset=12), Name('dircase', Store(), lineno=165, col_offset=17)], Store(), lineno=165, col_offset=12)], Call(Name('makepath', Load(), lineno=165, col_offset=27), [Name('sitedir', Load(), lineno=165, col_offset=36), Name('line', Load(), lineno=165, col_offset=45)], [], None, None, lineno=165, col_offset=27), lineno=165, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Compare(Name('dircase', Load(), lineno=166, col_offset=19), [In()], [Name('known_paths', Load(), lineno=166, col_offset=30)], lineno=166, col_offset=19), lineno=166, col_offset=15), Call(Attribute(Attribute(Name('os', Load(), lineno=166, col_offset=46), 'path', Load(), lineno=166, col_offset=46), 'exists', Load(), lineno=166, col_offset=46), [Name('dir', Load(), lineno=166, col_offset=61)], [], None, None, lineno=166, col_offset=46)], lineno=166, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=167, col_offset=16), 'path', Load(), lineno=167, col_offset=16), 'append', Load(), lineno=167, col_offset=16), [Name('dir', Load(), lineno=167, col_offset=32)], [], None, None, lineno=167, col_offset=16), lineno=167, col_offset=16), Expr(Call(Attribute(Name('known_paths', Load(), lineno=168, col_offset=16), 'add', Load(), lineno=168, col_offset=16), [Name('dircase', Load(), lineno=168, col_offset=32)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=16)], [], lineno=166, col_offset=12)], [], lineno=158, col_offset=8)], lineno=157, col_offset=9), If(Name('reset', Load(), lineno=169, col_offset=7), [Assign([Name('known_paths', Store(), lineno=170, col_offset=8)], Name('None', Load(), lineno=170, col_offset=22), lineno=170, col_offset=8)], [], lineno=169, col_offset=4), Return(Name('known_paths', Load(), lineno=171, col_offset=11), lineno=171, col_offset=4)], [], lineno=142, col_offset=0), FunctionDef('addsitedir', arguments([Name('sitedir', Param(), lineno=174, col_offset=15), Name('known_paths', Param(), lineno=174, col_offset=24)], None, None, [Name('None', Load(), lineno=174, col_offset=36)]), [Expr(Str("Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'", lineno=176, col_offset=-1), lineno=176, col_offset=-1), If(Compare(Name('known_paths', Load(), lineno=177, col_offset=7), [Is()], [Name('None', Load(), lineno=177, col_offset=22)], lineno=177, col_offset=7), [Assign([Name('known_paths', Store(), lineno=178, col_offset=8)], Call(Name('_init_pathinfo', Load(), lineno=178, col_offset=22), [], [], None, None, lineno=178, col_offset=22), lineno=178, col_offset=8), Assign([Name('reset', Store(), lineno=179, col_offset=8)], Num(1, lineno=179, col_offset=16), lineno=179, col_offset=8)], [Assign([Name('reset', Store(), lineno=181, col_offset=8)], Num(0, lineno=181, col_offset=16), lineno=181, col_offset=8)], lineno=177, col_offset=4), Assign([Tuple([Name('sitedir', Store(), lineno=182, col_offset=4), Name('sitedircase', Store(), lineno=182, col_offset=13)], Store(), lineno=182, col_offset=4)], Call(Name('makepath', Load(), lineno=182, col_offset=27), [Name('sitedir', Load(), lineno=182, col_offset=36)], [], None, None, lineno=182, col_offset=27), lineno=182, col_offset=4), If(UnaryOp(Not(), Compare(Name('sitedircase', Load(), lineno=183, col_offset=11), [In()], [Name('known_paths', Load(), lineno=183, col_offset=26)], lineno=183, col_offset=11), lineno=183, col_offset=7), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=184, col_offset=8), 'path', Load(), lineno=184, col_offset=8), 'append', Load(), lineno=184, col_offset=8), [Name('sitedir', Load(), lineno=184, col_offset=24)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8)], [], lineno=183, col_offset=4), TryExcept([Assign([Name('names', Store(), lineno=186, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=186, col_offset=16), 'listdir', Load(), lineno=186, col_offset=16), [Name('sitedir', Load(), lineno=186, col_offset=27)], [], None, None, lineno=186, col_offset=16), lineno=186, col_offset=8)], [ExceptHandler(Attribute(Name('os', Load(), lineno=187, col_offset=11), 'error', Load(), lineno=187, col_offset=11), None, [Return(None, lineno=188, col_offset=8)], lineno=187, col_offset=4)], [], lineno=185, col_offset=4), Assign([Name('dotpth', Store(), lineno=189, col_offset=4)], BinOp(Attribute(Name('os', Load(), lineno=189, col_offset=13), 'extsep', Load(), lineno=189, col_offset=13), Add(), Str('pth', lineno=189, col_offset=25), lineno=189, col_offset=13), lineno=189, col_offset=4), Assign([Name('names', Store(), lineno=190, col_offset=4)], ListComp(Name('name', Load(), lineno=190, col_offset=13), [comprehension(Name('name', Store(), lineno=190, col_offset=22), Name('names', Load(), lineno=190, col_offset=30), [Call(Attribute(Name('name', Load(), lineno=190, col_offset=39), 'endswith', Load(), lineno=190, col_offset=39), [Name('dotpth', Load(), lineno=190, col_offset=53)], [], None, None, lineno=190, col_offset=39)])], lineno=190, col_offset=13), lineno=190, col_offset=4), For(Name('name', Store(), lineno=191, col_offset=8), Call(Name('sorted', Load(), lineno=191, col_offset=16), [Name('names', Load(), lineno=191, col_offset=23)], [], None, None, lineno=191, col_offset=16), [Expr(Call(Name('addpackage', Load(), lineno=192, col_offset=8), [Name('sitedir', Load(), lineno=192, col_offset=19), Name('name', Load(), lineno=192, col_offset=28), Name('known_paths', Load(), lineno=192, col_offset=34)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8)], [], lineno=191, col_offset=4), If(Name('reset', Load(), lineno=193, col_offset=7), [Assign([Name('known_paths', Store(), lineno=194, col_offset=8)], Name('None', Load(), lineno=194, col_offset=22), lineno=194, col_offset=8)], [], lineno=193, col_offset=4), Return(Name('known_paths', Load(), lineno=195, col_offset=11), lineno=195, col_offset=4)], [], lineno=174, col_offset=0), FunctionDef('check_enableusersite', arguments([], None, None, []), [Expr(Str('Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    ', lineno=207, col_offset=-1), lineno=207, col_offset=-1), If(Attribute(Attribute(Name('sys', Load(), lineno=208, col_offset=7), 'flags', Load(), lineno=208, col_offset=7), 'no_user_site', Load(), lineno=208, col_offset=7), [Return(Name('False', Load(), lineno=209, col_offset=15), lineno=209, col_offset=8)], [], lineno=208, col_offset=4), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=211, col_offset=7), [Name('os', Load(), lineno=211, col_offset=15), Str('getuid', lineno=211, col_offset=19)], [], None, None, lineno=211, col_offset=7), Call(Name('hasattr', Load(), lineno=211, col_offset=33), [Name('os', Load(), lineno=211, col_offset=41), Str('geteuid', lineno=211, col_offset=45)], [], None, None, lineno=211, col_offset=33)], lineno=211, col_offset=7), [If(Compare(Call(Attribute(Name('os', Load(), lineno=213, col_offset=11), 'geteuid', Load(), lineno=213, col_offset=11), [], [], None, None, lineno=213, col_offset=11), [NotEq()], [Call(Attribute(Name('os', Load(), lineno=213, col_offset=27), 'getuid', Load(), lineno=213, col_offset=27), [], [], None, None, lineno=213, col_offset=27)], lineno=213, col_offset=11), [Return(Name('None', Load(), lineno=214, col_offset=19), lineno=214, col_offset=12)], [], lineno=213, col_offset=8)], [], lineno=211, col_offset=4), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=215, col_offset=7), [Name('os', Load(), lineno=215, col_offset=15), Str('getgid', lineno=215, col_offset=19)], [], None, None, lineno=215, col_offset=7), Call(Name('hasattr', Load(), lineno=215, col_offset=33), [Name('os', Load(), lineno=215, col_offset=41), Str('getegid', lineno=215, col_offset=45)], [], None, None, lineno=215, col_offset=33)], lineno=215, col_offset=7), [If(Compare(Call(Attribute(Name('os', Load(), lineno=217, col_offset=11), 'getegid', Load(), lineno=217, col_offset=11), [], [], None, None, lineno=217, col_offset=11), [NotEq()], [Call(Attribute(Name('os', Load(), lineno=217, col_offset=27), 'getgid', Load(), lineno=217, col_offset=27), [], [], None, None, lineno=217, col_offset=27)], lineno=217, col_offset=11), [Return(Name('None', Load(), lineno=218, col_offset=19), lineno=218, col_offset=12)], [], lineno=217, col_offset=8)], [], lineno=215, col_offset=4), Return(Name('True', Load(), lineno=220, col_offset=11), lineno=220, col_offset=4)], [], lineno=198, col_offset=0), FunctionDef('getuserbase', arguments([], None, None, []), [Expr(Str('Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    ', lineno=228, col_offset=-1), lineno=228, col_offset=-1), Global(['USER_BASE'], lineno=229, col_offset=4), If(Compare(Name('USER_BASE', Load(), lineno=230, col_offset=7), [IsNot()], [Name('None', Load(), lineno=230, col_offset=24)], lineno=230, col_offset=7), [Return(Name('USER_BASE', Load(), lineno=231, col_offset=15), lineno=231, col_offset=8)], [], lineno=230, col_offset=4), ImportFrom('sysconfig', [alias('get_config_var', None)], 0, lineno=232, col_offset=4), Assign([Name('USER_BASE', Store(), lineno=233, col_offset=4)], Call(Name('get_config_var', Load(), lineno=233, col_offset=16), [Str('userbase', lineno=233, col_offset=31)], [], None, None, lineno=233, col_offset=16), lineno=233, col_offset=4), Return(Name('USER_BASE', Load(), lineno=234, col_offset=11), lineno=234, col_offset=4)], [], lineno=222, col_offset=0), FunctionDef('getusersitepackages', arguments([], None, None, []), [Expr(Str('Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    ', lineno=241, col_offset=-1), lineno=241, col_offset=-1), Global(['USER_SITE'], lineno=242, col_offset=4), Assign([Name('user_base', Store(), lineno=243, col_offset=4)], Call(Name('getuserbase', Load(), lineno=243, col_offset=16), [], [], None, None, lineno=243, col_offset=16), lineno=243, col_offset=4), If(Compare(Name('USER_SITE', Load(), lineno=245, col_offset=7), [IsNot()], [Name('None', Load(), lineno=245, col_offset=24)], lineno=245, col_offset=7), [Return(Name('USER_SITE', Load(), lineno=246, col_offset=15), lineno=246, col_offset=8)], [], lineno=245, col_offset=4), ImportFrom('sysconfig', [alias('get_path', None)], 0, lineno=248, col_offset=4), Import([alias('os', None)], lineno=249, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=251, col_offset=7), 'platform', Load(), lineno=251, col_offset=7), [Eq()], [Str('darwin', lineno=251, col_offset=23)], lineno=251, col_offset=7), [ImportFrom('sysconfig', [alias('get_config_var', None)], 0, lineno=252, col_offset=8), If(Call(Name('get_config_var', Load(), lineno=253, col_offset=11), [Str('PYTHONFRAMEWORK', lineno=253, col_offset=26)], [], None, None, lineno=253, col_offset=11), [Assign([Name('USER_SITE', Store(), lineno=254, col_offset=12)], Call(Name('get_path', Load(), lineno=254, col_offset=24), [Str('purelib', lineno=254, col_offset=33), Str('osx_framework_user', lineno=254, col_offset=44)], [], None, None, lineno=254, col_offset=24), lineno=254, col_offset=12), Return(Name('USER_SITE', Load(), lineno=255, col_offset=19), lineno=255, col_offset=12)], [], lineno=253, col_offset=8)], [], lineno=251, col_offset=4), Assign([Name('USER_SITE', Store(), lineno=257, col_offset=4)], Call(Name('get_path', Load(), lineno=257, col_offset=16), [Str('purelib', lineno=257, col_offset=25), BinOp(Str('%s_user', lineno=257, col_offset=36), Mod(), Attribute(Name('os', Load(), lineno=257, col_offset=48), 'name', Load(), lineno=257, col_offset=48), lineno=257, col_offset=36)], [], None, None, lineno=257, col_offset=16), lineno=257, col_offset=4), Return(Name('USER_SITE', Load(), lineno=258, col_offset=11), lineno=258, col_offset=4)], [], lineno=236, col_offset=0), FunctionDef('addusersitepackages', arguments([Name('known_paths', Param(), lineno=260, col_offset=24)], None, None, []), [Expr(Str('Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    ', lineno=265, col_offset=-1), lineno=265, col_offset=-1), Assign([Name('user_site', Store(), lineno=268, col_offset=4)], Call(Name('getusersitepackages', Load(), lineno=268, col_offset=16), [], [], None, None, lineno=268, col_offset=16), lineno=268, col_offset=4), If(BoolOp(And(), [Name('ENABLE_USER_SITE', Load(), lineno=270, col_offset=7), Call(Attribute(Attribute(Name('os', Load(), lineno=270, col_offset=28), 'path', Load(), lineno=270, col_offset=28), 'isdir', Load(), lineno=270, col_offset=28), [Name('user_site', Load(), lineno=270, col_offset=42)], [], None, None, lineno=270, col_offset=28)], lineno=270, col_offset=7), [Expr(Call(Name('addsitedir', Load(), lineno=271, col_offset=8), [Name('user_site', Load(), lineno=271, col_offset=19), Name('known_paths', Load(), lineno=271, col_offset=30)], [], None, None, lineno=271, col_offset=8), lineno=271, col_offset=8)], [], lineno=270, col_offset=4), Return(Name('known_paths', Load(), lineno=272, col_offset=11), lineno=272, col_offset=4)], [], lineno=260, col_offset=0), FunctionDef('getsitepackages', arguments([], None, None, []), [Expr(Str('Returns a list containing all global site-packages directories\n    (and possibly site-python).\n\n    For each directory present in the global ``PREFIXES``, this function\n    will find its `site-packages` subdirectory depending on the system\n    environment, and will return a list of full paths.\n    ', lineno=281, col_offset=-1), lineno=281, col_offset=-1), Assign([Name('sitepackages', Store(), lineno=282, col_offset=4)], List([], Load(), lineno=282, col_offset=19), lineno=282, col_offset=4), Assign([Name('seen', Store(), lineno=283, col_offset=4)], Call(Name('set', Load(), lineno=283, col_offset=11), [], [], None, None, lineno=283, col_offset=11), lineno=283, col_offset=4), For(Name('prefix', Store(), lineno=285, col_offset=8), Name('PREFIXES', Load(), lineno=285, col_offset=18), [If(BoolOp(Or(), [UnaryOp(Not(), Name('prefix', Load(), lineno=286, col_offset=15), lineno=286, col_offset=11), Compare(Name('prefix', Load(), lineno=286, col_offset=25), [In()], [Name('seen', Load(), lineno=286, col_offset=35)], lineno=286, col_offset=25)], lineno=286, col_offset=11), [Continue( lineno=287, col_offset=12)], [], lineno=286, col_offset=8), Expr(Call(Attribute(Name('seen', Load(), lineno=288, col_offset=8), 'add', Load(), lineno=288, col_offset=8), [Name('prefix', Load(), lineno=288, col_offset=17)], [], None, None, lineno=288, col_offset=8), lineno=288, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=290, col_offset=11), 'platform', Load(), lineno=290, col_offset=11), [In()], [Tuple([Str('os2emx', lineno=290, col_offset=28), Str('riscos', lineno=290, col_offset=38)], Load(), lineno=290, col_offset=28)], lineno=290, col_offset=11), [Expr(Call(Attribute(Name('sitepackages', Load(), lineno=291, col_offset=12), 'append', Load(), lineno=291, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=291, col_offset=32), 'path', Load(), lineno=291, col_offset=32), 'join', Load(), lineno=291, col_offset=32), [Name('prefix', Load(), lineno=291, col_offset=45), Str('Lib', lineno=291, col_offset=53), Str('site-packages', lineno=291, col_offset=60)], [], None, None, lineno=291, col_offset=32)], [], None, None, lineno=291, col_offset=12), lineno=291, col_offset=12)], [If(Compare(Attribute(Name('os', Load(), lineno=292, col_offset=13), 'sep', Load(), lineno=292, col_offset=13), [Eq()], [Str('/', lineno=292, col_offset=23)], lineno=292, col_offset=13), [Expr(Call(Attribute(Name('sitepackages', Load(), lineno=293, col_offset=12), 'append', Load(), lineno=293, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=293, col_offset=32), 'path', Load(), lineno=293, col_offset=32), 'join', Load(), lineno=293, col_offset=32), [Name('prefix', Load(), lineno=293, col_offset=45), Str('lib', lineno=293, col_offset=53), BinOp(Str('python', lineno=294, col_offset=40), Add(), Subscript(Attribute(Name('sys', Load(), lineno=294, col_offset=51), 'version', Load(), lineno=294, col_offset=51), Slice(None, Num(3, lineno=294, col_offset=64), None), Load(), lineno=294, col_offset=51), lineno=294, col_offset=40), Str('site-packages', lineno=295, col_offset=40)], [], None, None, lineno=293, col_offset=32)], [], None, None, lineno=293, col_offset=12), lineno=293, col_offset=12), Expr(Call(Attribute(Name('sitepackages', Load(), lineno=296, col_offset=12), 'append', Load(), lineno=296, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=296, col_offset=32), 'path', Load(), lineno=296, col_offset=32), 'join', Load(), lineno=296, col_offset=32), [Name('prefix', Load(), lineno=296, col_offset=45), Str('lib', lineno=296, col_offset=53), Str('site-python', lineno=296, col_offset=60)], [], None, None, lineno=296, col_offset=32)], [], None, None, lineno=296, col_offset=12), lineno=296, col_offset=12)], [Expr(Call(Attribute(Name('sitepackages', Load(), lineno=298, col_offset=12), 'append', Load(), lineno=298, col_offset=12), [Name('prefix', Load(), lineno=298, col_offset=32)], [], None, None, lineno=298, col_offset=12), lineno=298, col_offset=12), Expr(Call(Attribute(Name('sitepackages', Load(), lineno=299, col_offset=12), 'append', Load(), lineno=299, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=299, col_offset=32), 'path', Load(), lineno=299, col_offset=32), 'join', Load(), lineno=299, col_offset=32), [Name('prefix', Load(), lineno=299, col_offset=45), Str('lib', lineno=299, col_offset=53), Str('site-packages', lineno=299, col_offset=60)], [], None, None, lineno=299, col_offset=32)], [], None, None, lineno=299, col_offset=12), lineno=299, col_offset=12)], lineno=292, col_offset=13)], lineno=290, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=300, col_offset=11), 'platform', Load(), lineno=300, col_offset=11), [Eq()], [Str('darwin', lineno=300, col_offset=27)], lineno=300, col_offset=11), [ImportFrom('sysconfig', [alias('get_config_var', None)], 0, lineno=303, col_offset=12), Assign([Name('framework', Store(), lineno=304, col_offset=12)], Call(Name('get_config_var', Load(), lineno=304, col_offset=24), [Str('PYTHONFRAMEWORK', lineno=304, col_offset=39)], [], None, None, lineno=304, col_offset=24), lineno=304, col_offset=12), If(BoolOp(And(), [Name('framework', Load(), lineno=305, col_offset=15), Compare(BinOp(Str('/%s.framework/', lineno=305, col_offset=29), Mod(), Tuple([Name('framework', Load(), lineno=305, col_offset=47)], Load(), lineno=305, col_offset=47), lineno=305, col_offset=29), [In()], [Name('prefix', Load(), lineno=305, col_offset=62)], lineno=305, col_offset=29)], lineno=305, col_offset=15), [Expr(Call(Attribute(Name('sitepackages', Load(), lineno=306, col_offset=16), 'append', Load(), lineno=306, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=307, col_offset=24), 'path', Load(), lineno=307, col_offset=24), 'join', Load(), lineno=307, col_offset=24), [Str('/Library', lineno=307, col_offset=37), Name('framework', Load(), lineno=307, col_offset=49), Subscript(Attribute(Name('sys', Load(), lineno=308, col_offset=28), 'version', Load(), lineno=308, col_offset=28), Slice(None, Num(3, lineno=308, col_offset=41), None), Load(), lineno=308, col_offset=28), Str('site-packages', lineno=308, col_offset=45)], [], None, None, lineno=307, col_offset=24)], [], None, None, lineno=306, col_offset=16), lineno=306, col_offset=16)], [], lineno=305, col_offset=12)], [], lineno=300, col_offset=8)], [], lineno=285, col_offset=4), Return(Name('sitepackages', Load(), lineno=309, col_offset=11), lineno=309, col_offset=4)], [], lineno=274, col_offset=0), FunctionDef('addsitepackages', arguments([Name('known_paths', Param(), lineno=311, col_offset=20)], None, None, []), [Expr(Str('Add site-packages (and possibly site-python) to sys.path', lineno=312, col_offset=4), lineno=312, col_offset=4), For(Name('sitedir', Store(), lineno=313, col_offset=8), Call(Name('getsitepackages', Load(), lineno=313, col_offset=19), [], [], None, None, lineno=313, col_offset=19), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=314, col_offset=11), 'path', Load(), lineno=314, col_offset=11), 'isdir', Load(), lineno=314, col_offset=11), [Name('sitedir', Load(), lineno=314, col_offset=25)], [], None, None, lineno=314, col_offset=11), [Expr(Call(Name('addsitedir', Load(), lineno=315, col_offset=12), [Name('sitedir', Load(), lineno=315, col_offset=23), Name('known_paths', Load(), lineno=315, col_offset=32)], [], None, None, lineno=315, col_offset=12), lineno=315, col_offset=12)], [], lineno=314, col_offset=8)], [], lineno=313, col_offset=4), Return(Name('known_paths', Load(), lineno=317, col_offset=11), lineno=317, col_offset=4)], [], lineno=311, col_offset=0), FunctionDef('setBEGINLIBPATH', arguments([], None, None, []), [Expr(Str('The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n\n    ', lineno=326, col_offset=-1), lineno=326, col_offset=-1), Assign([Name('dllpath', Store(), lineno=327, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=327, col_offset=14), 'path', Load(), lineno=327, col_offset=14), 'join', Load(), lineno=327, col_offset=14), [Attribute(Name('sys', Load(), lineno=327, col_offset=27), 'prefix', Load(), lineno=327, col_offset=27), Str('Lib', lineno=327, col_offset=39), Str('lib-dynload', lineno=327, col_offset=46)], [], None, None, lineno=327, col_offset=14), lineno=327, col_offset=4), Assign([Name('libpath', Store(), lineno=328, col_offset=4)], Call(Attribute(Subscript(Attribute(Name('os', Load(), lineno=328, col_offset=14), 'environ', Load(), lineno=328, col_offset=14), Index(Str('BEGINLIBPATH', lineno=328, col_offset=25)), Load(), lineno=328, col_offset=14), 'split', Load(), lineno=328, col_offset=14), [Str(';', lineno=328, col_offset=47)], [], None, None, lineno=328, col_offset=14), lineno=328, col_offset=4), If(Subscript(Name('libpath', Load(), lineno=329, col_offset=7), Index(Num(-1, lineno=329, col_offset=16)), Load(), lineno=329, col_offset=7), [Expr(Call(Attribute(Name('libpath', Load(), lineno=330, col_offset=8), 'append', Load(), lineno=330, col_offset=8), [Name('dllpath', Load(), lineno=330, col_offset=23)], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8)], [Assign([Subscript(Name('libpath', Load(), lineno=332, col_offset=8), Index(Num(-1, lineno=332, col_offset=17)), Store(), lineno=332, col_offset=8)], Name('dllpath', Load(), lineno=332, col_offset=22), lineno=332, col_offset=8)], lineno=329, col_offset=4), Assign([Subscript(Attribute(Name('os', Load(), lineno=333, col_offset=4), 'environ', Load(), lineno=333, col_offset=4), Index(Str('BEGINLIBPATH', lineno=333, col_offset=15)), Store(), lineno=333, col_offset=4)], Call(Attribute(Str(';', lineno=333, col_offset=33), 'join', Load(), lineno=333, col_offset=33), [Name('libpath', Load(), lineno=333, col_offset=42)], [], None, None, lineno=333, col_offset=33), lineno=333, col_offset=4)], [], lineno=319, col_offset=0), FunctionDef('setquit', arguments([], None, None, []), [Expr(Str("Define new builtins 'quit' and 'exit'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    ", lineno=342, col_offset=-1), lineno=342, col_offset=-1), If(Compare(Attribute(Name('os', Load(), lineno=343, col_offset=7), 'sep', Load(), lineno=343, col_offset=7), [Eq()], [Str(':', lineno=343, col_offset=17)], lineno=343, col_offset=7), [Assign([Name('eof', Store(), lineno=344, col_offset=8)], Str('Cmd-Q', lineno=344, col_offset=14), lineno=344, col_offset=8)], [If(Compare(Attribute(Name('os', Load(), lineno=345, col_offset=9), 'sep', Load(), lineno=345, col_offset=9), [Eq()], [Str('\\', lineno=345, col_offset=19)], lineno=345, col_offset=9), [Assign([Name('eof', Store(), lineno=346, col_offset=8)], Str('Ctrl-Z plus Return', lineno=346, col_offset=14), lineno=346, col_offset=8)], [Assign([Name('eof', Store(), lineno=348, col_offset=8)], Str('Ctrl-D (i.e. EOF)', lineno=348, col_offset=14), lineno=348, col_offset=8)], lineno=345, col_offset=9)], lineno=343, col_offset=4), ClassDef('Quitter', [Name('object', Load(), lineno=350, col_offset=18)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=351, col_offset=21), Name('name', Param(), lineno=351, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=352, col_offset=12), 'name', Store(), lineno=352, col_offset=12)], Name('name', Load(), lineno=352, col_offset=24), lineno=352, col_offset=12)], [], lineno=351, col_offset=8), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=353, col_offset=21)], None, None, []), [Return(BinOp(Str('Use %s() or %s to exit', lineno=354, col_offset=19), Mod(), Tuple([Attribute(Name('self', Load(), lineno=354, col_offset=47), 'name', Load(), lineno=354, col_offset=47), Name('eof', Load(), lineno=354, col_offset=58)], Load(), lineno=354, col_offset=47), lineno=354, col_offset=19), lineno=354, col_offset=12)], [], lineno=353, col_offset=8), FunctionDef('__call__', arguments([Name('self', Param(), lineno=355, col_offset=21), Name('code', Param(), lineno=355, col_offset=27)], None, None, [Name('None', Load(), lineno=355, col_offset=32)]), [TryExcept([Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=359, col_offset=16), 'stdin', Load(), lineno=359, col_offset=16), 'close', Load(), lineno=359, col_offset=16), [], [], None, None, lineno=359, col_offset=16), lineno=359, col_offset=16)], [ExceptHandler(None, None, [Pass( lineno=361, col_offset=16)], lineno=360, col_offset=12)], [], lineno=358, col_offset=12), Raise(Call(Name('SystemExit', Load(), lineno=362, col_offset=18), [Name('code', Load(), lineno=362, col_offset=29)], [], None, None, lineno=362, col_offset=18), None, None, lineno=362, col_offset=12)], [], lineno=355, col_offset=8)], [], lineno=350, col_offset=4), Assign([Attribute(Name('__builtin__', Load(), lineno=363, col_offset=4), 'quit', Store(), lineno=363, col_offset=4)], Call(Name('Quitter', Load(), lineno=363, col_offset=23), [Str('quit', lineno=363, col_offset=31)], [], None, None, lineno=363, col_offset=23), lineno=363, col_offset=4), Assign([Attribute(Name('__builtin__', Load(), lineno=364, col_offset=4), 'exit', Store(), lineno=364, col_offset=4)], Call(Name('Quitter', Load(), lineno=364, col_offset=23), [Str('exit', lineno=364, col_offset=31)], [], None, None, lineno=364, col_offset=23), lineno=364, col_offset=4)], [], lineno=336, col_offset=0), ClassDef('_Printer', [Name('object', Load(), lineno=367, col_offset=15)], [Expr(Str('interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Assign([Name('MAXLINES', Store(), lineno=371, col_offset=4)], Num(23, lineno=371, col_offset=15), lineno=371, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=373, col_offset=17), Name('name', Param(), lineno=373, col_offset=23), Name('data', Param(), lineno=373, col_offset=29), Name('files', Param(), lineno=373, col_offset=35), Name('dirs', Param(), lineno=373, col_offset=45)], None, None, [Tuple([], Load(), lineno=373, col_offset=41), Tuple([], Load(), lineno=373, col_offset=50)]), [Assign([Attribute(Name('self', Load(), lineno=374, col_offset=8), '__name', Store(), lineno=374, col_offset=8)], Name('name', Load(), lineno=374, col_offset=22), lineno=374, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=375, col_offset=8), '__data', Store(), lineno=375, col_offset=8)], Name('data', Load(), lineno=375, col_offset=22), lineno=375, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=376, col_offset=8), '__files', Store(), lineno=376, col_offset=8)], Name('files', Load(), lineno=376, col_offset=23), lineno=376, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=377, col_offset=8), '__dirs', Store(), lineno=377, col_offset=8)], Name('dirs', Load(), lineno=377, col_offset=22), lineno=377, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=378, col_offset=8), '__lines', Store(), lineno=378, col_offset=8)], Name('None', Load(), lineno=378, col_offset=23), lineno=378, col_offset=8)], [], lineno=373, col_offset=4), FunctionDef('__setup', arguments([Name('self', Param(), lineno=380, col_offset=16)], None, None, []), [If(Attribute(Name('self', Load(), lineno=381, col_offset=11), '__lines', Load(), lineno=381, col_offset=11), [Return(None, lineno=382, col_offset=12)], [], lineno=381, col_offset=8), Assign([Name('data', Store(), lineno=383, col_offset=8)], Name('None', Load(), lineno=383, col_offset=15), lineno=383, col_offset=8), For(Name('dir', Store(), lineno=384, col_offset=12), Attribute(Name('self', Load(), lineno=384, col_offset=19), '__dirs', Load(), lineno=384, col_offset=19), [For(Name('filename', Store(), lineno=385, col_offset=16), Attribute(Name('self', Load(), lineno=385, col_offset=28), '__files', Load(), lineno=385, col_offset=28), [Assign([Name('filename', Store(), lineno=386, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=386, col_offset=27), 'path', Load(), lineno=386, col_offset=27), 'join', Load(), lineno=386, col_offset=27), [Name('dir', Load(), lineno=386, col_offset=40), Name('filename', Load(), lineno=386, col_offset=45)], [], None, None, lineno=386, col_offset=27), lineno=386, col_offset=16), TryExcept([Assign([Name('fp', Store(), lineno=388, col_offset=20)], Call(Name('file', Load(), lineno=388, col_offset=25), [Name('filename', Load(), lineno=388, col_offset=30), Str('rU', lineno=388, col_offset=40)], [], None, None, lineno=388, col_offset=25), lineno=388, col_offset=20), Assign([Name('data', Store(), lineno=389, col_offset=20)], Call(Attribute(Name('fp', Load(), lineno=389, col_offset=27), 'read', Load(), lineno=389, col_offset=27), [], [], None, None, lineno=389, col_offset=27), lineno=389, col_offset=20), Expr(Call(Attribute(Name('fp', Load(), lineno=390, col_offset=20), 'close', Load(), lineno=390, col_offset=20), [], [], None, None, lineno=390, col_offset=20), lineno=390, col_offset=20), Break( lineno=391, col_offset=20)], [ExceptHandler(Name('IOError', Load(), lineno=392, col_offset=23), None, [Pass( lineno=393, col_offset=20)], lineno=392, col_offset=16)], [], lineno=387, col_offset=16)], [], lineno=385, col_offset=12), If(Name('data', Load(), lineno=394, col_offset=15), [Break( lineno=395, col_offset=16)], [], lineno=394, col_offset=12)], [], lineno=384, col_offset=8), If(UnaryOp(Not(), Name('data', Load(), lineno=396, col_offset=15), lineno=396, col_offset=11), [Assign([Name('data', Store(), lineno=397, col_offset=12)], Attribute(Name('self', Load(), lineno=397, col_offset=19), '__data', Load(), lineno=397, col_offset=19), lineno=397, col_offset=12)], [], lineno=396, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=398, col_offset=8), '__lines', Store(), lineno=398, col_offset=8)], Call(Attribute(Name('data', Load(), lineno=398, col_offset=23), 'split', Load(), lineno=398, col_offset=23), [Str('\n', lineno=398, col_offset=34)], [], None, None, lineno=398, col_offset=23), lineno=398, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=399, col_offset=8), '__linecnt', Store(), lineno=399, col_offset=8)], Call(Name('len', Load(), lineno=399, col_offset=25), [Attribute(Name('self', Load(), lineno=399, col_offset=29), '__lines', Load(), lineno=399, col_offset=29)], [], None, None, lineno=399, col_offset=25), lineno=399, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=401, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=402, col_offset=8), '__setup', Load(), lineno=402, col_offset=8), [], [], None, None, lineno=402, col_offset=8), lineno=402, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=403, col_offset=11), [Attribute(Name('self', Load(), lineno=403, col_offset=15), '__lines', Load(), lineno=403, col_offset=15)], [], None, None, lineno=403, col_offset=11), [LtE()], [Attribute(Name('self', Load(), lineno=403, col_offset=32), 'MAXLINES', Load(), lineno=403, col_offset=32)], lineno=403, col_offset=11), [Return(Call(Attribute(Str('\n', lineno=404, col_offset=19), 'join', Load(), lineno=404, col_offset=19), [Attribute(Name('self', Load(), lineno=404, col_offset=29), '__lines', Load(), lineno=404, col_offset=29)], [], None, None, lineno=404, col_offset=19), lineno=404, col_offset=12)], [Return(BinOp(Str('Type %s() to see the full %s text', lineno=406, col_offset=19), Mod(), BinOp(Tuple([Attribute(Name('self', Load(), lineno=406, col_offset=59), '__name', Load(), lineno=406, col_offset=59)], Load(), lineno=406, col_offset=59), Mult(), Num(2, lineno=406, col_offset=73), lineno=406, col_offset=58), lineno=406, col_offset=19), lineno=406, col_offset=12)], lineno=403, col_offset=8)], [], lineno=401, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=408, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=409, col_offset=8), '__setup', Load(), lineno=409, col_offset=8), [], [], None, None, lineno=409, col_offset=8), lineno=409, col_offset=8), Assign([Name('prompt', Store(), lineno=410, col_offset=8)], Str('Hit Return for more, or q (and Return) to quit: ', lineno=410, col_offset=17), lineno=410, col_offset=8), Assign([Name('lineno', Store(), lineno=411, col_offset=8)], Num(0, lineno=411, col_offset=17), lineno=411, col_offset=8), While(Num(1, lineno=412, col_offset=14), [TryExcept([For(Name('i', Store(), lineno=414, col_offset=20), Call(Name('range', Load(), lineno=414, col_offset=25), [Name('lineno', Load(), lineno=414, col_offset=31), BinOp(Name('lineno', Load(), lineno=414, col_offset=39), Add(), Attribute(Name('self', Load(), lineno=414, col_offset=48), 'MAXLINES', Load(), lineno=414, col_offset=48), lineno=414, col_offset=39)], [], None, None, lineno=414, col_offset=25), [Print(None, [Subscript(Attribute(Name('self', Load(), lineno=415, col_offset=26), '__lines', Load(), lineno=415, col_offset=26), Index(Name('i', Load(), lineno=415, col_offset=39)), Load(), lineno=415, col_offset=26)], True, lineno=415, col_offset=20)], [], lineno=414, col_offset=16)], [ExceptHandler(Name('IndexError', Load(), lineno=416, col_offset=19), None, [Break( lineno=417, col_offset=16)], lineno=416, col_offset=12)], [AugAssign(Name('lineno', Store(), lineno=419, col_offset=16), Add(), Attribute(Name('self', Load(), lineno=419, col_offset=26), 'MAXLINES', Load(), lineno=419, col_offset=26), lineno=419, col_offset=16), Assign([Name('key', Store(), lineno=420, col_offset=16)], Name('None', Load(), lineno=420, col_offset=22), lineno=420, col_offset=16), While(Compare(Name('key', Load(), lineno=421, col_offset=22), [Is()], [Name('None', Load(), lineno=421, col_offset=29)], lineno=421, col_offset=22), [Assign([Name('key', Store(), lineno=422, col_offset=20)], Call(Name('raw_input', Load(), lineno=422, col_offset=26), [Name('prompt', Load(), lineno=422, col_offset=36)], [], None, None, lineno=422, col_offset=26), lineno=422, col_offset=20), If(Compare(Name('key', Load(), lineno=423, col_offset=23), [NotIn()], [Tuple([Str('', lineno=423, col_offset=35), Str('q', lineno=423, col_offset=39)], Load(), lineno=423, col_offset=35)], lineno=423, col_offset=23), [Assign([Name('key', Store(), lineno=424, col_offset=24)], Name('None', Load(), lineno=424, col_offset=30), lineno=424, col_offset=24)], [], lineno=423, col_offset=20)], [], lineno=421, col_offset=16), If(Compare(Name('key', Load(), lineno=425, col_offset=19), [Eq()], [Str('q', lineno=425, col_offset=26)], lineno=425, col_offset=19), [Break( lineno=426, col_offset=20)], [], lineno=425, col_offset=16)], lineno=413, col_offset=12)], [], lineno=412, col_offset=8)], [], lineno=408, col_offset=4)], [], lineno=367, col_offset=0), FunctionDef('setcopyright', arguments([], None, None, []), [Expr(Str("Set 'copyright' and 'credits' in __builtin__", lineno=429, col_offset=4), lineno=429, col_offset=4), Assign([Attribute(Name('__builtin__', Load(), lineno=430, col_offset=4), 'copyright', Store(), lineno=430, col_offset=4)], Call(Name('_Printer', Load(), lineno=430, col_offset=28), [Str('copyright', lineno=430, col_offset=37), Attribute(Name('sys', Load(), lineno=430, col_offset=50), 'copyright', Load(), lineno=430, col_offset=50)], [], None, None, lineno=430, col_offset=28), lineno=430, col_offset=4), If(Compare(Subscript(Attribute(Name('sys', Load(), lineno=431, col_offset=7), 'platform', Load(), lineno=431, col_offset=7), Slice(None, Num(4, lineno=431, col_offset=21), None), Load(), lineno=431, col_offset=7), [Eq()], [Str('java', lineno=431, col_offset=27)], lineno=431, col_offset=7), [Assign([Attribute(Name('__builtin__', Load(), lineno=432, col_offset=8), 'credits', Store(), lineno=432, col_offset=8)], Call(Name('_Printer', Load(), lineno=432, col_offset=30), [Str('credits', lineno=433, col_offset=12), Str('Jython is maintained by the Jython developers (www.jython.org).', lineno=434, col_offset=12)], [], None, None, lineno=432, col_offset=30), lineno=432, col_offset=8)], [Assign([Attribute(Name('__builtin__', Load(), lineno=436, col_offset=8), 'credits', Store(), lineno=436, col_offset=8)], Call(Name('_Printer', Load(), lineno=436, col_offset=30), [Str('credits', lineno=436, col_offset=39), Str('    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information.', lineno=438, col_offset=-1)], [], None, None, lineno=436, col_offset=30), lineno=436, col_offset=8)], lineno=431, col_offset=4), Assign([Name('here', Store(), lineno=439, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=439, col_offset=11), 'path', Load(), lineno=439, col_offset=11), 'dirname', Load(), lineno=439, col_offset=11), [Attribute(Name('os', Load(), lineno=439, col_offset=27), '__file__', Load(), lineno=439, col_offset=27)], [], None, None, lineno=439, col_offset=11), lineno=439, col_offset=4), Assign([Attribute(Name('__builtin__', Load(), lineno=440, col_offset=4), 'license', Store(), lineno=440, col_offset=4)], Call(Name('_Printer', Load(), lineno=440, col_offset=26), [Str('license', lineno=441, col_offset=8), BinOp(Str('See http://www.python.org/%.3s/license.html', lineno=441, col_offset=19), Mod(), Attribute(Name('sys', Load(), lineno=441, col_offset=67), 'version', Load(), lineno=441, col_offset=67), lineno=441, col_offset=19), List([Str('LICENSE.txt', lineno=442, col_offset=9), Str('LICENSE', lineno=442, col_offset=24)], Load(), lineno=442, col_offset=8), List([Call(Attribute(Attribute(Name('os', Load(), lineno=443, col_offset=9), 'path', Load(), lineno=443, col_offset=9), 'join', Load(), lineno=443, col_offset=9), [Name('here', Load(), lineno=443, col_offset=22), Attribute(Name('os', Load(), lineno=443, col_offset=28), 'pardir', Load(), lineno=443, col_offset=28)], [], None, None, lineno=443, col_offset=9), Name('here', Load(), lineno=443, col_offset=40), Attribute(Name('os', Load(), lineno=443, col_offset=46), 'curdir', Load(), lineno=443, col_offset=46)], Load(), lineno=443, col_offset=8)], [], None, None, lineno=440, col_offset=26), lineno=440, col_offset=4)], [], lineno=428, col_offset=0), ClassDef('_Helper', [Name('object', Load(), lineno=446, col_offset=14)], [Expr(Str("Define the builtin 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n\n    ", lineno=450, col_offset=-1), lineno=450, col_offset=-1), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=452, col_offset=17)], None, None, []), [Return(Str('Type help() for interactive help, or help(object) for help about object.', lineno=453, col_offset=15), lineno=453, col_offset=8)], [], lineno=452, col_offset=4), FunctionDef('__call__', arguments([Name('self', Param(), lineno=455, col_offset=17)], 'args', 'kwds', []), [Import([alias('pydoc', None)], lineno=456, col_offset=8), Return(Call(Attribute(Name('pydoc', Load(), lineno=457, col_offset=15), 'help', Load(), lineno=457, col_offset=15), [], [], Name('args', Load(), lineno=457, col_offset=27), Name('kwds', Load(), lineno=457, col_offset=35), lineno=457, col_offset=15), lineno=457, col_offset=8)], [], lineno=455, col_offset=4)], [], lineno=446, col_offset=0), FunctionDef('sethelper', arguments([], None, None, []), [Assign([Attribute(Name('__builtin__', Load(), lineno=460, col_offset=4), 'help', Store(), lineno=460, col_offset=4)], Call(Name('_Helper', Load(), lineno=460, col_offset=23), [], [], None, None, lineno=460, col_offset=23), lineno=460, col_offset=4)], [], lineno=459, col_offset=0), FunctionDef('aliasmbcs', arguments([], None, None, []), [Expr(Str('On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case.', lineno=465, col_offset=-1), lineno=465, col_offset=-1), If(Compare(Attribute(Name('sys', Load(), lineno=466, col_offset=7), 'platform', Load(), lineno=466, col_offset=7), [Eq()], [Str('win32', lineno=466, col_offset=23)], lineno=466, col_offset=7), [Import([alias('locale', None), alias('codecs', None)], lineno=467, col_offset=8), Assign([Name('enc', Store(), lineno=468, col_offset=8)], Subscript(Call(Attribute(Name('locale', Load(), lineno=468, col_offset=14), 'getdefaultlocale', Load(), lineno=468, col_offset=14), [], [], None, None, lineno=468, col_offset=14), Index(Num(1, lineno=468, col_offset=40)), Load(), lineno=468, col_offset=14), lineno=468, col_offset=8), If(Call(Attribute(Name('enc', Load(), lineno=469, col_offset=11), 'startswith', Load(), lineno=469, col_offset=11), [Str('cp', lineno=469, col_offset=26)], [], None, None, lineno=469, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('codecs', Load(), lineno=471, col_offset=16), 'lookup', Load(), lineno=471, col_offset=16), [Name('enc', Load(), lineno=471, col_offset=30)], [], None, None, lineno=471, col_offset=16), lineno=471, col_offset=16)], [ExceptHandler(Name('LookupError', Load(), lineno=472, col_offset=19), None, [Import([alias('encodings', None)], lineno=473, col_offset=16), Assign([Subscript(Attribute(Name('encodings', Load(), lineno=474, col_offset=16), '_cache', Load(), lineno=474, col_offset=16), Index(Name('enc', Load(), lineno=474, col_offset=33)), Store(), lineno=474, col_offset=16)], Attribute(Name('encodings', Load(), lineno=474, col_offset=40), '_unknown', Load(), lineno=474, col_offset=40), lineno=474, col_offset=16), Assign([Subscript(Attribute(Attribute(Name('encodings', Load(), lineno=475, col_offset=16), 'aliases', Load(), lineno=475, col_offset=16), 'aliases', Load(), lineno=475, col_offset=16), Index(Name('enc', Load(), lineno=475, col_offset=42)), Store(), lineno=475, col_offset=16)], Str('mbcs', lineno=475, col_offset=49), lineno=475, col_offset=16)], lineno=472, col_offset=12)], [], lineno=470, col_offset=12)], [], lineno=469, col_offset=8)], [], lineno=466, col_offset=4)], [], lineno=462, col_offset=0), FunctionDef('setencoding', arguments([], None, None, []), [Expr(Str("Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this.", lineno=480, col_offset=-1), lineno=480, col_offset=-1), Assign([Name('encoding', Store(), lineno=481, col_offset=4)], Str('ascii', lineno=481, col_offset=15), lineno=481, col_offset=4), If(Num(0, lineno=482, col_offset=7), [Import([alias('locale', None)], lineno=484, col_offset=8), Assign([Name('loc', Store(), lineno=485, col_offset=8)], Call(Attribute(Name('locale', Load(), lineno=485, col_offset=14), 'getdefaultlocale', Load(), lineno=485, col_offset=14), [], [], None, None, lineno=485, col_offset=14), lineno=485, col_offset=8), If(Subscript(Name('loc', Load(), lineno=486, col_offset=11), Index(Num(1, lineno=486, col_offset=15)), Load(), lineno=486, col_offset=11), [Assign([Name('encoding', Store(), lineno=487, col_offset=12)], Subscript(Name('loc', Load(), lineno=487, col_offset=23), Index(Num(1, lineno=487, col_offset=27)), Load(), lineno=487, col_offset=23), lineno=487, col_offset=12)], [], lineno=486, col_offset=8)], [], lineno=482, col_offset=4), If(Num(0, lineno=488, col_offset=7), [Assign([Name('encoding', Store(), lineno=491, col_offset=8)], Str('undefined', lineno=491, col_offset=19), lineno=491, col_offset=8)], [], lineno=488, col_offset=4), If(Compare(Name('encoding', Load(), lineno=492, col_offset=7), [NotEq()], [Str('ascii', lineno=492, col_offset=19)], lineno=492, col_offset=7), [Expr(Call(Attribute(Name('sys', Load(), lineno=494, col_offset=8), 'setdefaultencoding', Load(), lineno=494, col_offset=8), [Name('encoding', Load(), lineno=494, col_offset=31)], [], None, None, lineno=494, col_offset=8), lineno=494, col_offset=8)], [], lineno=492, col_offset=4)], [], lineno=477, col_offset=0), FunctionDef('execsitecustomize', arguments([], None, None, []), [Expr(Str('Run custom site specific code, if available.', lineno=498, col_offset=4), lineno=498, col_offset=4), TryExcept([Import([alias('sitecustomize', None)], lineno=500, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=501, col_offset=11), None, [Pass( lineno=502, col_offset=8)], lineno=501, col_offset=4), ExceptHandler(Name('Exception', Load(), lineno=503, col_offset=11), None, [If(Attribute(Attribute(Name('sys', Load(), lineno=504, col_offset=11), 'flags', Load(), lineno=504, col_offset=11), 'verbose', Load(), lineno=504, col_offset=11), [Expr(Call(Attribute(Name('sys', Load(), lineno=505, col_offset=12), 'excepthook', Load(), lineno=505, col_offset=12), [], [], Call(Attribute(Name('sys', Load(), lineno=505, col_offset=28), 'exc_info', Load(), lineno=505, col_offset=28), [], [], None, None, lineno=505, col_offset=28), None, lineno=505, col_offset=12), lineno=505, col_offset=12)], [Print(Attribute(Name('sys', Load(), lineno=507, col_offset=20), 'stderr', Load(), lineno=507, col_offset=20), [Str("'import sitecustomize' failed; use -v for traceback", lineno=508, col_offset=16)], True, lineno=507, col_offset=12)], lineno=504, col_offset=8)], lineno=503, col_offset=4)], [], lineno=499, col_offset=4)], [], lineno=497, col_offset=0), FunctionDef('execusercustomize', arguments([], None, None, []), [Expr(Str('Run custom user specific code, if available.', lineno=512, col_offset=4), lineno=512, col_offset=4), TryExcept([Import([alias('usercustomize', None)], lineno=514, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=515, col_offset=11), None, [Pass( lineno=516, col_offset=8)], lineno=515, col_offset=4), ExceptHandler(Name('Exception', Load(), lineno=517, col_offset=11), None, [If(Attribute(Attribute(Name('sys', Load(), lineno=518, col_offset=11), 'flags', Load(), lineno=518, col_offset=11), 'verbose', Load(), lineno=518, col_offset=11), [Expr(Call(Attribute(Name('sys', Load(), lineno=519, col_offset=12), 'excepthook', Load(), lineno=519, col_offset=12), [], [], Call(Attribute(Name('sys', Load(), lineno=519, col_offset=28), 'exc_info', Load(), lineno=519, col_offset=28), [], [], None, None, lineno=519, col_offset=28), None, lineno=519, col_offset=12), lineno=519, col_offset=12)], [Print(Attribute(Name('sys', Load(), lineno=521, col_offset=19), 'stderr', Load(), lineno=521, col_offset=19), [Str("'import usercustomize' failed; use -v for traceback", lineno=522, col_offset=16)], True, lineno=521, col_offset=12)], lineno=518, col_offset=8)], lineno=517, col_offset=4)], [], lineno=513, col_offset=4)], [], lineno=511, col_offset=0), FunctionDef('main', arguments([], None, None, []), [Global(['ENABLE_USER_SITE'], lineno=526, col_offset=4), Expr(Call(Name('abs__file__', Load(), lineno=528, col_offset=4), [], [], None, None, lineno=528, col_offset=4), lineno=528, col_offset=4), Assign([Name('known_paths', Store(), lineno=529, col_offset=4)], Call(Name('removeduppaths', Load(), lineno=529, col_offset=18), [], [], None, None, lineno=529, col_offset=18), lineno=529, col_offset=4), If(BoolOp(And(), [Compare(Attribute(Name('os', Load(), lineno=530, col_offset=8), 'name', Load(), lineno=530, col_offset=8), [Eq()], [Str('posix', lineno=530, col_offset=19)], lineno=530, col_offset=8), Attribute(Name('sys', Load(), lineno=530, col_offset=31), 'path', Load(), lineno=530, col_offset=31), Compare(Call(Attribute(Attribute(Name('os', Load(), lineno=531, col_offset=8), 'path', Load(), lineno=531, col_offset=8), 'basename', Load(), lineno=531, col_offset=8), [Subscript(Attribute(Name('sys', Load(), lineno=531, col_offset=25), 'path', Load(), lineno=531, col_offset=25), Index(Num(-1, lineno=531, col_offset=35)), Load(), lineno=531, col_offset=25)], [], None, None, lineno=531, col_offset=8), [Eq()], [Str('Modules', lineno=531, col_offset=42)], lineno=531, col_offset=8)], lineno=530, col_offset=8), [Expr(Call(Name('addbuilddir', Load(), lineno=532, col_offset=8), [], [], None, None, lineno=532, col_offset=8), lineno=532, col_offset=8)], [], lineno=530, col_offset=4), If(Compare(Name('ENABLE_USER_SITE', Load(), lineno=533, col_offset=7), [Is()], [Name('None', Load(), lineno=533, col_offset=27)], lineno=533, col_offset=7), [Assign([Name('ENABLE_USER_SITE', Store(), lineno=534, col_offset=8)], Call(Name('check_enableusersite', Load(), lineno=534, col_offset=27), [], [], None, None, lineno=534, col_offset=27), lineno=534, col_offset=8)], [], lineno=533, col_offset=4), Assign([Name('known_paths', Store(), lineno=535, col_offset=4)], Call(Name('addusersitepackages', Load(), lineno=535, col_offset=18), [Name('known_paths', Load(), lineno=535, col_offset=38)], [], None, None, lineno=535, col_offset=18), lineno=535, col_offset=4), Assign([Name('known_paths', Store(), lineno=536, col_offset=4)], Call(Name('addsitepackages', Load(), lineno=536, col_offset=18), [Name('known_paths', Load(), lineno=536, col_offset=34)], [], None, None, lineno=536, col_offset=18), lineno=536, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=537, col_offset=7), 'platform', Load(), lineno=537, col_offset=7), [Eq()], [Str('os2emx', lineno=537, col_offset=23)], lineno=537, col_offset=7), [Expr(Call(Name('setBEGINLIBPATH', Load(), lineno=538, col_offset=8), [], [], None, None, lineno=538, col_offset=8), lineno=538, col_offset=8)], [], lineno=537, col_offset=4), Expr(Call(Name('setquit', Load(), lineno=539, col_offset=4), [], [], None, None, lineno=539, col_offset=4), lineno=539, col_offset=4), Expr(Call(Name('setcopyright', Load(), lineno=540, col_offset=4), [], [], None, None, lineno=540, col_offset=4), lineno=540, col_offset=4), Expr(Call(Name('sethelper', Load(), lineno=541, col_offset=4), [], [], None, None, lineno=541, col_offset=4), lineno=541, col_offset=4), Expr(Call(Name('aliasmbcs', Load(), lineno=542, col_offset=4), [], [], None, None, lineno=542, col_offset=4), lineno=542, col_offset=4), Expr(Call(Name('setencoding', Load(), lineno=543, col_offset=4), [], [], None, None, lineno=543, col_offset=4), lineno=543, col_offset=4), Expr(Call(Name('execsitecustomize', Load(), lineno=544, col_offset=4), [], [], None, None, lineno=544, col_offset=4), lineno=544, col_offset=4), If(Name('ENABLE_USER_SITE', Load(), lineno=545, col_offset=7), [Expr(Call(Name('execusercustomize', Load(), lineno=546, col_offset=8), [], [], None, None, lineno=546, col_offset=8), lineno=546, col_offset=8)], [], lineno=545, col_offset=4), If(Call(Name('hasattr', Load(), lineno=550, col_offset=7), [Name('sys', Load(), lineno=550, col_offset=15), Str('setdefaultencoding', lineno=550, col_offset=20)], [], None, None, lineno=550, col_offset=7), [Delete([Attribute(Name('sys', Load(), lineno=551, col_offset=12), 'setdefaultencoding', Del(), lineno=551, col_offset=12)], lineno=551, col_offset=8)], [], lineno=550, col_offset=4)], [], lineno=525, col_offset=0), Expr(Call(Name('main', Load(), lineno=553, col_offset=0), [], [], None, None, lineno=553, col_offset=0), lineno=553, col_offset=0), FunctionDef('_script', arguments([], None, None, []), [Assign([Name('help', Store(), lineno=556, col_offset=4)], Str("    %s [--user-base] [--user-site]\n\n    Without arguments print some useful information\n    With arguments print the value of USER_BASE and/or USER_SITE separated\n    by '%s'.\n\n    Exit codes with --user-base or --user-site:\n      0 - user site directory is enabled\n      1 - user site directory is disabled by user\n      2 - uses site directory is disabled by super user\n          or for security reasons\n     >2 - unknown error\n    ", lineno=569, col_offset=-1), lineno=556, col_offset=4), Assign([Name('args', Store(), lineno=570, col_offset=4)], Subscript(Attribute(Name('sys', Load(), lineno=570, col_offset=11), 'argv', Load(), lineno=570, col_offset=11), Slice(Num(1, lineno=570, col_offset=20), None, None), Load(), lineno=570, col_offset=11), lineno=570, col_offset=4), If(UnaryOp(Not(), Name('args', Load(), lineno=571, col_offset=11), lineno=571, col_offset=7), [Print(None, [Str('sys.path = [', lineno=572, col_offset=14)], True, lineno=572, col_offset=8), For(Name('dir', Store(), lineno=573, col_offset=12), Attribute(Name('sys', Load(), lineno=573, col_offset=19), 'path', Load(), lineno=573, col_offset=19), [Print(None, [BinOp(Str('    %r,', lineno=574, col_offset=18), Mod(), Tuple([Name('dir', Load(), lineno=574, col_offset=31)], Load(), lineno=574, col_offset=31), lineno=574, col_offset=18)], True, lineno=574, col_offset=12)], [], lineno=573, col_offset=8), Print(None, [Str(']', lineno=575, col_offset=14)], True, lineno=575, col_offset=8), Print(None, [BinOp(Str('USER_BASE: %r (%s)', lineno=576, col_offset=14), Mod(), Tuple([Name('USER_BASE', Load(), lineno=576, col_offset=38), IfExp(Call(Attribute(Attribute(Name('os', Load(), lineno=577, col_offset=24), 'path', Load(), lineno=577, col_offset=24), 'isdir', Load(), lineno=577, col_offset=24), [Name('USER_BASE', Load(), lineno=577, col_offset=38)], [], None, None, lineno=577, col_offset=24), Str('exists', lineno=577, col_offset=12), Str("doesn't exist", lineno=577, col_offset=54), lineno=577, col_offset=12)], Load(), lineno=576, col_offset=38), lineno=576, col_offset=14)], True, lineno=576, col_offset=8), Print(None, [BinOp(Str('USER_SITE: %r (%s)', lineno=578, col_offset=14), Mod(), Tuple([Name('USER_SITE', Load(), lineno=578, col_offset=38), IfExp(Call(Attribute(Attribute(Name('os', Load(), lineno=579, col_offset=24), 'path', Load(), lineno=579, col_offset=24), 'isdir', Load(), lineno=579, col_offset=24), [Name('USER_SITE', Load(), lineno=579, col_offset=38)], [], None, None, lineno=579, col_offset=24), Str('exists', lineno=579, col_offset=12), Str("doesn't exist", lineno=579, col_offset=54), lineno=579, col_offset=12)], Load(), lineno=578, col_offset=38), lineno=578, col_offset=14)], True, lineno=578, col_offset=8), Print(None, [BinOp(Str('ENABLE_USER_SITE: %r', lineno=580, col_offset=14), Mod(), Name('ENABLE_USER_SITE', Load(), lineno=580, col_offset=40), lineno=580, col_offset=14)], True, lineno=580, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=581, col_offset=8), 'exit', Load(), lineno=581, col_offset=8), [Num(0, lineno=581, col_offset=17)], [], None, None, lineno=581, col_offset=8), lineno=581, col_offset=8)], [], lineno=571, col_offset=4), Assign([Name('buffer', Store(), lineno=583, col_offset=4)], List([], Load(), lineno=583, col_offset=13), lineno=583, col_offset=4), If(Compare(Str('--user-base', lineno=584, col_offset=7), [In()], [Name('args', Load(), lineno=584, col_offset=24)], lineno=584, col_offset=7), [Expr(Call(Attribute(Name('buffer', Load(), lineno=585, col_offset=8), 'append', Load(), lineno=585, col_offset=8), [Name('USER_BASE', Load(), lineno=585, col_offset=22)], [], None, None, lineno=585, col_offset=8), lineno=585, col_offset=8)], [], lineno=584, col_offset=4), If(Compare(Str('--user-site', lineno=586, col_offset=7), [In()], [Name('args', Load(), lineno=586, col_offset=24)], lineno=586, col_offset=7), [Expr(Call(Attribute(Name('buffer', Load(), lineno=587, col_offset=8), 'append', Load(), lineno=587, col_offset=8), [Name('USER_SITE', Load(), lineno=587, col_offset=22)], [], None, None, lineno=587, col_offset=8), lineno=587, col_offset=8)], [], lineno=586, col_offset=4), If(Name('buffer', Load(), lineno=589, col_offset=7), [Print(None, [Call(Attribute(Attribute(Name('os', Load(), lineno=590, col_offset=14), 'pathsep', Load(), lineno=590, col_offset=14), 'join', Load(), lineno=590, col_offset=14), [Name('buffer', Load(), lineno=590, col_offset=30)], [], None, None, lineno=590, col_offset=14)], True, lineno=590, col_offset=8), If(Name('ENABLE_USER_SITE', Load(), lineno=591, col_offset=11), [Expr(Call(Attribute(Name('sys', Load(), lineno=592, col_offset=12), 'exit', Load(), lineno=592, col_offset=12), [Num(0, lineno=592, col_offset=21)], [], None, None, lineno=592, col_offset=12), lineno=592, col_offset=12)], [If(Compare(Name('ENABLE_USER_SITE', Load(), lineno=593, col_offset=13), [Is()], [Name('False', Load(), lineno=593, col_offset=33)], lineno=593, col_offset=13), [Expr(Call(Attribute(Name('sys', Load(), lineno=594, col_offset=12), 'exit', Load(), lineno=594, col_offset=12), [Num(1, lineno=594, col_offset=21)], [], None, None, lineno=594, col_offset=12), lineno=594, col_offset=12)], [If(Compare(Name('ENABLE_USER_SITE', Load(), lineno=595, col_offset=13), [Is()], [Name('None', Load(), lineno=595, col_offset=33)], lineno=595, col_offset=13), [Expr(Call(Attribute(Name('sys', Load(), lineno=596, col_offset=12), 'exit', Load(), lineno=596, col_offset=12), [Num(2, lineno=596, col_offset=21)], [], None, None, lineno=596, col_offset=12), lineno=596, col_offset=12)], [Expr(Call(Attribute(Name('sys', Load(), lineno=598, col_offset=12), 'exit', Load(), lineno=598, col_offset=12), [Num(3, lineno=598, col_offset=21)], [], None, None, lineno=598, col_offset=12), lineno=598, col_offset=12)], lineno=595, col_offset=13)], lineno=593, col_offset=13)], lineno=591, col_offset=8)], [Import([alias('textwrap', None)], lineno=600, col_offset=8), Print(None, [Call(Attribute(Name('textwrap', Load(), lineno=601, col_offset=14), 'dedent', Load(), lineno=601, col_offset=14), [BinOp(Name('help', Load(), lineno=601, col_offset=30), Mod(), Tuple([Subscript(Attribute(Name('sys', Load(), lineno=601, col_offset=38), 'argv', Load(), lineno=601, col_offset=38), Index(Num(0, lineno=601, col_offset=47)), Load(), lineno=601, col_offset=38), Attribute(Name('os', Load(), lineno=601, col_offset=51), 'pathsep', Load(), lineno=601, col_offset=51)], Load(), lineno=601, col_offset=38), lineno=601, col_offset=30)], [], None, None, lineno=601, col_offset=14)], True, lineno=601, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=602, col_offset=8), 'exit', Load(), lineno=602, col_offset=8), [Num(10, lineno=602, col_offset=17)], [], None, None, lineno=602, col_offset=8), lineno=602, col_offset=8)], lineno=589, col_offset=4)], [], lineno=555, col_offset=0), If(Compare(Name('__name__', Load(), lineno=604, col_offset=3), [Eq()], [Str('__main__', lineno=604, col_offset=15)], lineno=604, col_offset=3), [Expr(Call(Name('_script', Load(), lineno=605, col_offset=4), [], [], None, None, lineno=605, col_offset=4), lineno=605, col_offset=4)], [], lineno=604, col_offset=0)])
