Module([Expr(Str('Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): "Uniform Resource Identifiers" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : "Format for Literal IPv6 Addresses in URL\'s by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  "Uniform Resource Identifiers (URI)": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: "The mailto URL scheme", by P.Hoffman , L Masinter, J. Zwinski, July 1998.\n\nRFC 1808: "Relative Uniform Resource Locators", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: "Uniform Resource Locators (URL)" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior.\n\n', lineno=29, col_offset=-1), lineno=29, col_offset=-1), Assign([Name('__all__', Store(), lineno=31, col_offset=0)], List([Str('urlparse', lineno=31, col_offset=11), Str('urlunparse', lineno=31, col_offset=23), Str('urljoin', lineno=31, col_offset=37), Str('urldefrag', lineno=31, col_offset=48), Str('urlsplit', lineno=32, col_offset=11), Str('urlunsplit', lineno=32, col_offset=23), Str('parse_qs', lineno=32, col_offset=37), Str('parse_qsl', lineno=32, col_offset=49)], Load(), lineno=31, col_offset=10), lineno=31, col_offset=0), Assign([Name('uses_relative', Store(), lineno=35, col_offset=0)], List([Str('ftp', lineno=35, col_offset=17), Str('http', lineno=35, col_offset=24), Str('gopher', lineno=35, col_offset=32), Str('nntp', lineno=35, col_offset=42), Str('imap', lineno=35, col_offset=50), Str('wais', lineno=36, col_offset=17), Str('file', lineno=36, col_offset=25), Str('https', lineno=36, col_offset=33), Str('shttp', lineno=36, col_offset=42), Str('mms', lineno=36, col_offset=51), Str('prospero', lineno=37, col_offset=17), Str('rtsp', lineno=37, col_offset=29), Str('rtspu', lineno=37, col_offset=37), Str('', lineno=37, col_offset=46), Str('sftp', lineno=37, col_offset=50)], Load(), lineno=35, col_offset=16), lineno=35, col_offset=0), Assign([Name('uses_netloc', Store(), lineno=38, col_offset=0)], List([Str('ftp', lineno=38, col_offset=15), Str('http', lineno=38, col_offset=22), Str('gopher', lineno=38, col_offset=30), Str('nntp', lineno=38, col_offset=40), Str('telnet', lineno=38, col_offset=48), Str('imap', lineno=39, col_offset=15), Str('wais', lineno=39, col_offset=23), Str('file', lineno=39, col_offset=31), Str('mms', lineno=39, col_offset=39), Str('https', lineno=39, col_offset=46), Str('shttp', lineno=39, col_offset=55), Str('snews', lineno=40, col_offset=15), Str('prospero', lineno=40, col_offset=24), Str('rtsp', lineno=40, col_offset=36), Str('rtspu', lineno=40, col_offset=44), Str('rsync', lineno=40, col_offset=53), Str('', lineno=40, col_offset=62), Str('svn', lineno=41, col_offset=15), Str('svn+ssh', lineno=41, col_offset=22), Str('sftp', lineno=41, col_offset=33), Str('nfs', lineno=41, col_offset=40), Str('git', lineno=41, col_offset=46), Str('git+ssh', lineno=41, col_offset=53)], Load(), lineno=38, col_offset=14), lineno=38, col_offset=0), Assign([Name('non_hierarchical', Store(), lineno=42, col_offset=0)], List([Str('gopher', lineno=42, col_offset=20), Str('hdl', lineno=42, col_offset=30), Str('mailto', lineno=42, col_offset=37), Str('news', lineno=42, col_offset=47), Str('telnet', lineno=43, col_offset=20), Str('wais', lineno=43, col_offset=30), Str('imap', lineno=43, col_offset=38), Str('snews', lineno=43, col_offset=46), Str('sip', lineno=43, col_offset=55), Str('sips', lineno=43, col_offset=62)], Load(), lineno=42, col_offset=19), lineno=42, col_offset=0), Assign([Name('uses_params', Store(), lineno=44, col_offset=0)], List([Str('ftp', lineno=44, col_offset=15), Str('hdl', lineno=44, col_offset=22), Str('prospero', lineno=44, col_offset=29), Str('http', lineno=44, col_offset=41), Str('imap', lineno=44, col_offset=49), Str('https', lineno=45, col_offset=15), Str('shttp', lineno=45, col_offset=24), Str('rtsp', lineno=45, col_offset=33), Str('rtspu', lineno=45, col_offset=41), Str('sip', lineno=45, col_offset=50), Str('sips', lineno=45, col_offset=57), Str('mms', lineno=46, col_offset=15), Str('', lineno=46, col_offset=22), Str('sftp', lineno=46, col_offset=26)], Load(), lineno=44, col_offset=14), lineno=44, col_offset=0), Assign([Name('uses_query', Store(), lineno=47, col_offset=0)], List([Str('http', lineno=47, col_offset=14), Str('wais', lineno=47, col_offset=22), Str('imap', lineno=47, col_offset=30), Str('https', lineno=47, col_offset=38), Str('shttp', lineno=47, col_offset=47), Str('mms', lineno=47, col_offset=56), Str('gopher', lineno=48, col_offset=14), Str('rtsp', lineno=48, col_offset=24), Str('rtspu', lineno=48, col_offset=32), Str('sip', lineno=48, col_offset=41), Str('sips', lineno=48, col_offset=48), Str('', lineno=48, col_offset=56)], Load(), lineno=47, col_offset=13), lineno=47, col_offset=0), Assign([Name('uses_fragment', Store(), lineno=49, col_offset=0)], List([Str('ftp', lineno=49, col_offset=17), Str('hdl', lineno=49, col_offset=24), Str('http', lineno=49, col_offset=31), Str('gopher', lineno=49, col_offset=39), Str('news', lineno=49, col_offset=49), Str('nntp', lineno=50, col_offset=17), Str('wais', lineno=50, col_offset=25), Str('https', lineno=50, col_offset=33), Str('shttp', lineno=50, col_offset=42), Str('snews', lineno=50, col_offset=51), Str('file', lineno=51, col_offset=17), Str('prospero', lineno=51, col_offset=25), Str('', lineno=51, col_offset=37)], Load(), lineno=49, col_offset=16), lineno=49, col_offset=0), Assign([Name('scheme_chars', Store(), lineno=54, col_offset=0)], Str('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.', lineno=54, col_offset=16), lineno=54, col_offset=0), Assign([Name('MAX_CACHE_SIZE', Store(), lineno=59, col_offset=0)], Num(20, lineno=59, col_offset=17), lineno=59, col_offset=0), Assign([Name('_parse_cache', Store(), lineno=60, col_offset=0)], Dict([], [], lineno=60, col_offset=15), lineno=60, col_offset=0), FunctionDef('clear_cache', arguments([], None, None, []), [Expr(Str('Clear the parse cache.', lineno=63, col_offset=4), lineno=63, col_offset=4), Expr(Call(Attribute(Name('_parse_cache', Load(), lineno=64, col_offset=4), 'clear', Load(), lineno=64, col_offset=4), [], [], None, None, lineno=64, col_offset=4), lineno=64, col_offset=4)], [], lineno=62, col_offset=0), ClassDef('ResultMixin', [Name('object', Load(), lineno=67, col_offset=18)], [Expr(Str('Shared methods for the parsed result objects.', lineno=68, col_offset=4), lineno=68, col_offset=4), FunctionDef('username', arguments([Name('self', Param(), lineno=71, col_offset=17)], None, None, []), [Assign([Name('netloc', Store(), lineno=72, col_offset=8)], Attribute(Name('self', Load(), lineno=72, col_offset=17), 'netloc', Load(), lineno=72, col_offset=17), lineno=72, col_offset=8), If(Compare(Str('@', lineno=73, col_offset=11), [In()], [Name('netloc', Load(), lineno=73, col_offset=18)], lineno=73, col_offset=11), [Assign([Name('userinfo', Store(), lineno=74, col_offset=12)], Subscript(Call(Attribute(Name('netloc', Load(), lineno=74, col_offset=23), 'rsplit', Load(), lineno=74, col_offset=23), [Str('@', lineno=74, col_offset=37), Num(1, lineno=74, col_offset=42)], [], None, None, lineno=74, col_offset=23), Index(Num(0, lineno=74, col_offset=45)), Load(), lineno=74, col_offset=23), lineno=74, col_offset=12), If(Compare(Str(':', lineno=75, col_offset=15), [In()], [Name('userinfo', Load(), lineno=75, col_offset=22)], lineno=75, col_offset=15), [Assign([Name('userinfo', Store(), lineno=76, col_offset=16)], Subscript(Call(Attribute(Name('userinfo', Load(), lineno=76, col_offset=27), 'split', Load(), lineno=76, col_offset=27), [Str(':', lineno=76, col_offset=42), Num(1, lineno=76, col_offset=47)], [], None, None, lineno=76, col_offset=27), Index(Num(0, lineno=76, col_offset=50)), Load(), lineno=76, col_offset=27), lineno=76, col_offset=16)], [], lineno=75, col_offset=12), Return(Name('userinfo', Load(), lineno=77, col_offset=19), lineno=77, col_offset=12)], [], lineno=73, col_offset=8), Return(Name('None', Load(), lineno=78, col_offset=15), lineno=78, col_offset=8)], [Name('property', Load(), lineno=70, col_offset=5)], lineno=70, col_offset=4), FunctionDef('password', arguments([Name('self', Param(), lineno=81, col_offset=17)], None, None, []), [Assign([Name('netloc', Store(), lineno=82, col_offset=8)], Attribute(Name('self', Load(), lineno=82, col_offset=17), 'netloc', Load(), lineno=82, col_offset=17), lineno=82, col_offset=8), If(Compare(Str('@', lineno=83, col_offset=11), [In()], [Name('netloc', Load(), lineno=83, col_offset=18)], lineno=83, col_offset=11), [Assign([Name('userinfo', Store(), lineno=84, col_offset=12)], Subscript(Call(Attribute(Name('netloc', Load(), lineno=84, col_offset=23), 'rsplit', Load(), lineno=84, col_offset=23), [Str('@', lineno=84, col_offset=37), Num(1, lineno=84, col_offset=42)], [], None, None, lineno=84, col_offset=23), Index(Num(0, lineno=84, col_offset=45)), Load(), lineno=84, col_offset=23), lineno=84, col_offset=12), If(Compare(Str(':', lineno=85, col_offset=15), [In()], [Name('userinfo', Load(), lineno=85, col_offset=22)], lineno=85, col_offset=15), [Return(Subscript(Call(Attribute(Name('userinfo', Load(), lineno=86, col_offset=23), 'split', Load(), lineno=86, col_offset=23), [Str(':', lineno=86, col_offset=38), Num(1, lineno=86, col_offset=43)], [], None, None, lineno=86, col_offset=23), Index(Num(1, lineno=86, col_offset=46)), Load(), lineno=86, col_offset=23), lineno=86, col_offset=16)], [], lineno=85, col_offset=12)], [], lineno=83, col_offset=8), Return(Name('None', Load(), lineno=87, col_offset=15), lineno=87, col_offset=8)], [Name('property', Load(), lineno=80, col_offset=5)], lineno=80, col_offset=4), FunctionDef('hostname', arguments([Name('self', Param(), lineno=90, col_offset=17)], None, None, []), [Assign([Name('netloc', Store(), lineno=91, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=91, col_offset=17), 'netloc', Load(), lineno=91, col_offset=17), 'split', Load(), lineno=91, col_offset=17), [Str('@', lineno=91, col_offset=35)], [], None, None, lineno=91, col_offset=17), Index(Num(-1, lineno=91, col_offset=41)), Load(), lineno=91, col_offset=17), lineno=91, col_offset=8), If(BoolOp(And(), [Compare(Str('[', lineno=92, col_offset=11), [In()], [Name('netloc', Load(), lineno=92, col_offset=18)], lineno=92, col_offset=11), Compare(Str(']', lineno=92, col_offset=29), [In()], [Name('netloc', Load(), lineno=92, col_offset=36)], lineno=92, col_offset=29)], lineno=92, col_offset=11), [Return(Call(Attribute(Subscript(Subscript(Call(Attribute(Name('netloc', Load(), lineno=93, col_offset=19), 'split', Load(), lineno=93, col_offset=19), [Str(']', lineno=93, col_offset=32)], [], None, None, lineno=93, col_offset=19), Index(Num(0, lineno=93, col_offset=37)), Load(), lineno=93, col_offset=19), Slice(Num(1, lineno=93, col_offset=40), None, None), Load(), lineno=93, col_offset=19), 'lower', Load(), lineno=93, col_offset=19), [], [], None, None, lineno=93, col_offset=19), lineno=93, col_offset=12)], [If(Compare(Str(':', lineno=94, col_offset=13), [In()], [Name('netloc', Load(), lineno=94, col_offset=20)], lineno=94, col_offset=13), [Return(Call(Attribute(Subscript(Call(Attribute(Name('netloc', Load(), lineno=95, col_offset=19), 'split', Load(), lineno=95, col_offset=19), [Str(':', lineno=95, col_offset=32)], [], None, None, lineno=95, col_offset=19), Index(Num(0, lineno=95, col_offset=37)), Load(), lineno=95, col_offset=19), 'lower', Load(), lineno=95, col_offset=19), [], [], None, None, lineno=95, col_offset=19), lineno=95, col_offset=12)], [If(Compare(Name('netloc', Load(), lineno=96, col_offset=13), [Eq()], [Str('', lineno=96, col_offset=23)], lineno=96, col_offset=13), [Return(Name('None', Load(), lineno=97, col_offset=19), lineno=97, col_offset=12)], [Return(Call(Attribute(Name('netloc', Load(), lineno=99, col_offset=19), 'lower', Load(), lineno=99, col_offset=19), [], [], None, None, lineno=99, col_offset=19), lineno=99, col_offset=12)], lineno=96, col_offset=13)], lineno=94, col_offset=13)], lineno=92, col_offset=8)], [Name('property', Load(), lineno=89, col_offset=5)], lineno=89, col_offset=4), FunctionDef('port', arguments([Name('self', Param(), lineno=102, col_offset=13)], None, None, []), [Assign([Name('netloc', Store(), lineno=103, col_offset=8)], Subscript(Call(Attribute(Subscript(Call(Attribute(Attribute(Name('self', Load(), lineno=103, col_offset=17), 'netloc', Load(), lineno=103, col_offset=17), 'split', Load(), lineno=103, col_offset=17), [Str('@', lineno=103, col_offset=35)], [], None, None, lineno=103, col_offset=17), Index(Num(-1, lineno=103, col_offset=41)), Load(), lineno=103, col_offset=17), 'split', Load(), lineno=103, col_offset=17), [Str(']', lineno=103, col_offset=50)], [], None, None, lineno=103, col_offset=17), Index(Num(-1, lineno=103, col_offset=56)), Load(), lineno=103, col_offset=17), lineno=103, col_offset=8), If(Compare(Str(':', lineno=104, col_offset=11), [In()], [Name('netloc', Load(), lineno=104, col_offset=18)], lineno=104, col_offset=11), [Assign([Name('port', Store(), lineno=105, col_offset=12)], Subscript(Call(Attribute(Name('netloc', Load(), lineno=105, col_offset=19), 'split', Load(), lineno=105, col_offset=19), [Str(':', lineno=105, col_offset=32)], [], None, None, lineno=105, col_offset=19), Index(Num(1, lineno=105, col_offset=37)), Load(), lineno=105, col_offset=19), lineno=105, col_offset=12), Return(Call(Name('int', Load(), lineno=106, col_offset=19), [Name('port', Load(), lineno=106, col_offset=23), Num(10, lineno=106, col_offset=29)], [], None, None, lineno=106, col_offset=19), lineno=106, col_offset=12)], [Return(Name('None', Load(), lineno=108, col_offset=19), lineno=108, col_offset=12)], lineno=104, col_offset=8)], [Name('property', Load(), lineno=101, col_offset=5)], lineno=101, col_offset=4)], [], lineno=67, col_offset=0), ImportFrom('collections', [alias('namedtuple', None)], 0, lineno=110, col_offset=0), ClassDef('SplitResult', [Call(Name('namedtuple', Load(), lineno=112, col_offset=18), [Str('SplitResult', lineno=112, col_offset=29), Str('scheme netloc path query fragment', lineno=112, col_offset=44)], [], None, None, lineno=112, col_offset=18), Name('ResultMixin', Load(), lineno=112, col_offset=82)], [Assign([Name('__slots__', Store(), lineno=114, col_offset=4)], Tuple([], Load(), lineno=114, col_offset=16), lineno=114, col_offset=4), FunctionDef('geturl', arguments([Name('self', Param(), lineno=116, col_offset=15)], None, None, []), [Return(Call(Name('urlunsplit', Load(), lineno=117, col_offset=15), [Name('self', Load(), lineno=117, col_offset=26)], [], None, None, lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=116, col_offset=4)], [], lineno=112, col_offset=0), ClassDef('ParseResult', [Call(Name('namedtuple', Load(), lineno=120, col_offset=18), [Str('ParseResult', lineno=120, col_offset=29), Str('scheme netloc path params query fragment', lineno=120, col_offset=44)], [], None, None, lineno=120, col_offset=18), Name('ResultMixin', Load(), lineno=120, col_offset=89)], [Assign([Name('__slots__', Store(), lineno=122, col_offset=4)], Tuple([], Load(), lineno=122, col_offset=16), lineno=122, col_offset=4), FunctionDef('geturl', arguments([Name('self', Param(), lineno=124, col_offset=15)], None, None, []), [Return(Call(Name('urlunparse', Load(), lineno=125, col_offset=15), [Name('self', Load(), lineno=125, col_offset=26)], [], None, None, lineno=125, col_offset=15), lineno=125, col_offset=8)], [], lineno=124, col_offset=4)], [], lineno=120, col_offset=0), FunctionDef('urlparse', arguments([Name('url', Param(), lineno=128, col_offset=13), Name('scheme', Param(), lineno=128, col_offset=18), Name('allow_fragments', Param(), lineno=128, col_offset=29)], None, None, [Str('', lineno=128, col_offset=25), Name('True', Load(), lineno=128, col_offset=45)]), [Expr(Str("Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.", lineno=133, col_offset=-1), lineno=133, col_offset=-1), Assign([Name('tuple', Store(), lineno=134, col_offset=4)], Call(Name('urlsplit', Load(), lineno=134, col_offset=12), [Name('url', Load(), lineno=134, col_offset=21), Name('scheme', Load(), lineno=134, col_offset=26), Name('allow_fragments', Load(), lineno=134, col_offset=34)], [], None, None, lineno=134, col_offset=12), lineno=134, col_offset=4), Assign([Tuple([Name('scheme', Store(), lineno=135, col_offset=4), Name('netloc', Store(), lineno=135, col_offset=12), Name('url', Store(), lineno=135, col_offset=20), Name('query', Store(), lineno=135, col_offset=25), Name('fragment', Store(), lineno=135, col_offset=32)], Store(), lineno=135, col_offset=4)], Name('tuple', Load(), lineno=135, col_offset=43), lineno=135, col_offset=4), If(BoolOp(And(), [Compare(Name('scheme', Load(), lineno=136, col_offset=7), [In()], [Name('uses_params', Load(), lineno=136, col_offset=17)], lineno=136, col_offset=7), Compare(Str(';', lineno=136, col_offset=33), [In()], [Name('url', Load(), lineno=136, col_offset=40)], lineno=136, col_offset=33)], lineno=136, col_offset=7), [Assign([Tuple([Name('url', Store(), lineno=137, col_offset=8), Name('params', Store(), lineno=137, col_offset=13)], Store(), lineno=137, col_offset=8)], Call(Name('_splitparams', Load(), lineno=137, col_offset=22), [Name('url', Load(), lineno=137, col_offset=35)], [], None, None, lineno=137, col_offset=22), lineno=137, col_offset=8)], [Assign([Name('params', Store(), lineno=139, col_offset=8)], Str('', lineno=139, col_offset=17), lineno=139, col_offset=8)], lineno=136, col_offset=4), Return(Call(Name('ParseResult', Load(), lineno=140, col_offset=11), [Name('scheme', Load(), lineno=140, col_offset=23), Name('netloc', Load(), lineno=140, col_offset=31), Name('url', Load(), lineno=140, col_offset=39), Name('params', Load(), lineno=140, col_offset=44), Name('query', Load(), lineno=140, col_offset=52), Name('fragment', Load(), lineno=140, col_offset=59)], [], None, None, lineno=140, col_offset=11), lineno=140, col_offset=4)], [], lineno=128, col_offset=0), FunctionDef('_splitparams', arguments([Name('url', Param(), lineno=142, col_offset=17)], None, None, []), [If(Compare(Str('/', lineno=143, col_offset=7), [In()], [Name('url', Load(), lineno=143, col_offset=15)], lineno=143, col_offset=7), [Assign([Name('i', Store(), lineno=144, col_offset=8)], Call(Attribute(Name('url', Load(), lineno=144, col_offset=12), 'find', Load(), lineno=144, col_offset=12), [Str(';', lineno=144, col_offset=21), Call(Attribute(Name('url', Load(), lineno=144, col_offset=26), 'rfind', Load(), lineno=144, col_offset=26), [Str('/', lineno=144, col_offset=36)], [], None, None, lineno=144, col_offset=26)], [], None, None, lineno=144, col_offset=12), lineno=144, col_offset=8), If(Compare(Name('i', Load(), lineno=145, col_offset=11), [Lt()], [Num(0, lineno=145, col_offset=15)], lineno=145, col_offset=11), [Return(Tuple([Name('url', Load(), lineno=146, col_offset=19), Str('', lineno=146, col_offset=24)], Load(), lineno=146, col_offset=19), lineno=146, col_offset=12)], [], lineno=145, col_offset=8)], [Assign([Name('i', Store(), lineno=148, col_offset=8)], Call(Attribute(Name('url', Load(), lineno=148, col_offset=12), 'find', Load(), lineno=148, col_offset=12), [Str(';', lineno=148, col_offset=21)], [], None, None, lineno=148, col_offset=12), lineno=148, col_offset=8)], lineno=143, col_offset=4), Return(Tuple([Subscript(Name('url', Load(), lineno=149, col_offset=11), Slice(None, Name('i', Load(), lineno=149, col_offset=16), None), Load(), lineno=149, col_offset=11), Subscript(Name('url', Load(), lineno=149, col_offset=20), Slice(BinOp(Name('i', Load(), lineno=149, col_offset=24), Add(), Num(1, lineno=149, col_offset=26), lineno=149, col_offset=24), None, None), Load(), lineno=149, col_offset=20)], Load(), lineno=149, col_offset=11), lineno=149, col_offset=4)], [], lineno=142, col_offset=0), FunctionDef('_splitnetloc', arguments([Name('url', Param(), lineno=151, col_offset=17), Name('start', Param(), lineno=151, col_offset=22)], None, None, [Num(0, lineno=151, col_offset=28)]), [Assign([Name('delim', Store(), lineno=152, col_offset=4)], Call(Name('len', Load(), lineno=152, col_offset=12), [Name('url', Load(), lineno=152, col_offset=16)], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=4), For(Name('c', Store(), lineno=153, col_offset=8), Str('/?#', lineno=153, col_offset=13), [Assign([Name('wdelim', Store(), lineno=154, col_offset=8)], Call(Attribute(Name('url', Load(), lineno=154, col_offset=17), 'find', Load(), lineno=154, col_offset=17), [Name('c', Load(), lineno=154, col_offset=26), Name('start', Load(), lineno=154, col_offset=29)], [], None, None, lineno=154, col_offset=17), lineno=154, col_offset=8), If(Compare(Name('wdelim', Load(), lineno=155, col_offset=11), [GtE()], [Num(0, lineno=155, col_offset=21)], lineno=155, col_offset=11), [Assign([Name('delim', Store(), lineno=156, col_offset=12)], Call(Name('min', Load(), lineno=156, col_offset=20), [Name('delim', Load(), lineno=156, col_offset=24), Name('wdelim', Load(), lineno=156, col_offset=31)], [], None, None, lineno=156, col_offset=20), lineno=156, col_offset=12)], [], lineno=155, col_offset=8)], [], lineno=153, col_offset=4), Return(Tuple([Subscript(Name('url', Load(), lineno=157, col_offset=11), Slice(Name('start', Load(), lineno=157, col_offset=15), Name('delim', Load(), lineno=157, col_offset=21), None), Load(), lineno=157, col_offset=11), Subscript(Name('url', Load(), lineno=157, col_offset=29), Slice(Name('delim', Load(), lineno=157, col_offset=33), None, None), Load(), lineno=157, col_offset=29)], Load(), lineno=157, col_offset=11), lineno=157, col_offset=4)], [], lineno=151, col_offset=0), FunctionDef('urlsplit', arguments([Name('url', Param(), lineno=159, col_offset=13), Name('scheme', Param(), lineno=159, col_offset=18), Name('allow_fragments', Param(), lineno=159, col_offset=29)], None, None, [Str('', lineno=159, col_offset=25), Name('True', Load(), lineno=159, col_offset=45)]), [Expr(Str("Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.", lineno=164, col_offset=-1), lineno=164, col_offset=-1), Assign([Name('allow_fragments', Store(), lineno=165, col_offset=4)], Call(Name('bool', Load(), lineno=165, col_offset=22), [Name('allow_fragments', Load(), lineno=165, col_offset=27)], [], None, None, lineno=165, col_offset=22), lineno=165, col_offset=4), Assign([Name('key', Store(), lineno=166, col_offset=4)], Tuple([Name('url', Load(), lineno=166, col_offset=10), Name('scheme', Load(), lineno=166, col_offset=15), Name('allow_fragments', Load(), lineno=166, col_offset=23), Call(Name('type', Load(), lineno=166, col_offset=40), [Name('url', Load(), lineno=166, col_offset=45)], [], None, None, lineno=166, col_offset=40), Call(Name('type', Load(), lineno=166, col_offset=51), [Name('scheme', Load(), lineno=166, col_offset=56)], [], None, None, lineno=166, col_offset=51)], Load(), lineno=166, col_offset=10), lineno=166, col_offset=4), Assign([Name('cached', Store(), lineno=167, col_offset=4)], Call(Attribute(Name('_parse_cache', Load(), lineno=167, col_offset=13), 'get', Load(), lineno=167, col_offset=13), [Name('key', Load(), lineno=167, col_offset=30), Name('None', Load(), lineno=167, col_offset=35)], [], None, None, lineno=167, col_offset=13), lineno=167, col_offset=4), If(Name('cached', Load(), lineno=168, col_offset=7), [Return(Name('cached', Load(), lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=168, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=170, col_offset=7), [Name('_parse_cache', Load(), lineno=170, col_offset=11)], [], None, None, lineno=170, col_offset=7), [GtE()], [Name('MAX_CACHE_SIZE', Load(), lineno=170, col_offset=28)], lineno=170, col_offset=7), [Expr(Call(Name('clear_cache', Load(), lineno=171, col_offset=8), [], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8)], [], lineno=170, col_offset=4), Assign([Name('netloc', Store(), lineno=172, col_offset=4), Name('query', Store(), lineno=172, col_offset=13), Name('fragment', Store(), lineno=172, col_offset=21)], Str('', lineno=172, col_offset=32), lineno=172, col_offset=4), Assign([Name('i', Store(), lineno=173, col_offset=4)], Call(Attribute(Name('url', Load(), lineno=173, col_offset=8), 'find', Load(), lineno=173, col_offset=8), [Str(':', lineno=173, col_offset=17)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=4), If(Compare(Name('i', Load(), lineno=174, col_offset=7), [Gt()], [Num(0, lineno=174, col_offset=11)], lineno=174, col_offset=7), [If(Compare(Subscript(Name('url', Load(), lineno=175, col_offset=11), Slice(None, Name('i', Load(), lineno=175, col_offset=16), None), Load(), lineno=175, col_offset=11), [Eq()], [Str('http', lineno=175, col_offset=22)], lineno=175, col_offset=11), [Assign([Name('scheme', Store(), lineno=176, col_offset=12)], Call(Attribute(Subscript(Name('url', Load(), lineno=176, col_offset=21), Slice(None, Name('i', Load(), lineno=176, col_offset=26), None), Load(), lineno=176, col_offset=21), 'lower', Load(), lineno=176, col_offset=21), [], [], None, None, lineno=176, col_offset=21), lineno=176, col_offset=12), Assign([Name('url', Store(), lineno=177, col_offset=12)], Subscript(Name('url', Load(), lineno=177, col_offset=18), Slice(BinOp(Name('i', Load(), lineno=177, col_offset=22), Add(), Num(1, lineno=177, col_offset=24), lineno=177, col_offset=22), None, None), Load(), lineno=177, col_offset=18), lineno=177, col_offset=12), If(Compare(Subscript(Name('url', Load(), lineno=178, col_offset=15), Slice(None, Num(2, lineno=178, col_offset=20), None), Load(), lineno=178, col_offset=15), [Eq()], [Str('//', lineno=178, col_offset=26)], lineno=178, col_offset=15), [Assign([Tuple([Name('netloc', Store(), lineno=179, col_offset=16), Name('url', Store(), lineno=179, col_offset=24)], Store(), lineno=179, col_offset=16)], Call(Name('_splitnetloc', Load(), lineno=179, col_offset=30), [Name('url', Load(), lineno=179, col_offset=43), Num(2, lineno=179, col_offset=48)], [], None, None, lineno=179, col_offset=30), lineno=179, col_offset=16), If(BoolOp(Or(), [BoolOp(And(), [Compare(Str('[', lineno=180, col_offset=21), [In()], [Name('netloc', Load(), lineno=180, col_offset=28)], lineno=180, col_offset=21), Compare(Str(']', lineno=180, col_offset=39), [NotIn()], [Name('netloc', Load(), lineno=180, col_offset=50)], lineno=180, col_offset=39)], lineno=180, col_offset=21), BoolOp(And(), [Compare(Str(']', lineno=181, col_offset=25), [In()], [Name('netloc', Load(), lineno=181, col_offset=32)], lineno=181, col_offset=25), Compare(Str('[', lineno=181, col_offset=43), [NotIn()], [Name('netloc', Load(), lineno=181, col_offset=54)], lineno=181, col_offset=43)], lineno=181, col_offset=25)], lineno=180, col_offset=20), [Raise(Call(Name('ValueError', Load(), lineno=182, col_offset=26), [Str('Invalid IPv6 URL', lineno=182, col_offset=37)], [], None, None, lineno=182, col_offset=26), None, None, lineno=182, col_offset=20)], [], lineno=180, col_offset=16)], [], lineno=178, col_offset=12), If(BoolOp(And(), [Name('allow_fragments', Load(), lineno=183, col_offset=15), Compare(Str('#', lineno=183, col_offset=35), [In()], [Name('url', Load(), lineno=183, col_offset=42)], lineno=183, col_offset=35)], lineno=183, col_offset=15), [Assign([Tuple([Name('url', Store(), lineno=184, col_offset=16), Name('fragment', Store(), lineno=184, col_offset=21)], Store(), lineno=184, col_offset=16)], Call(Attribute(Name('url', Load(), lineno=184, col_offset=32), 'split', Load(), lineno=184, col_offset=32), [Str('#', lineno=184, col_offset=42), Num(1, lineno=184, col_offset=47)], [], None, None, lineno=184, col_offset=32), lineno=184, col_offset=16)], [], lineno=183, col_offset=12), If(Compare(Str('?', lineno=185, col_offset=15), [In()], [Name('url', Load(), lineno=185, col_offset=22)], lineno=185, col_offset=15), [Assign([Tuple([Name('url', Store(), lineno=186, col_offset=16), Name('query', Store(), lineno=186, col_offset=21)], Store(), lineno=186, col_offset=16)], Call(Attribute(Name('url', Load(), lineno=186, col_offset=29), 'split', Load(), lineno=186, col_offset=29), [Str('?', lineno=186, col_offset=39), Num(1, lineno=186, col_offset=44)], [], None, None, lineno=186, col_offset=29), lineno=186, col_offset=16)], [], lineno=185, col_offset=12), Assign([Name('v', Store(), lineno=187, col_offset=12)], Call(Name('SplitResult', Load(), lineno=187, col_offset=16), [Name('scheme', Load(), lineno=187, col_offset=28), Name('netloc', Load(), lineno=187, col_offset=36), Name('url', Load(), lineno=187, col_offset=44), Name('query', Load(), lineno=187, col_offset=49), Name('fragment', Load(), lineno=187, col_offset=56)], [], None, None, lineno=187, col_offset=16), lineno=187, col_offset=12), Assign([Subscript(Name('_parse_cache', Load(), lineno=188, col_offset=12), Index(Name('key', Load(), lineno=188, col_offset=25)), Store(), lineno=188, col_offset=12)], Name('v', Load(), lineno=188, col_offset=32), lineno=188, col_offset=12), Return(Name('v', Load(), lineno=189, col_offset=19), lineno=189, col_offset=12)], [], lineno=175, col_offset=8), If(BoolOp(Or(), [Call(Attribute(Name('url', Load(), lineno=190, col_offset=11), 'endswith', Load(), lineno=190, col_offset=11), [Str(':', lineno=190, col_offset=24)], [], None, None, lineno=190, col_offset=11), UnaryOp(Not(), Call(Attribute(Subscript(Name('url', Load(), lineno=190, col_offset=36), Index(BinOp(Name('i', Load(), lineno=190, col_offset=40), Add(), Num(1, lineno=190, col_offset=42), lineno=190, col_offset=40)), Load(), lineno=190, col_offset=36), 'isdigit', Load(), lineno=190, col_offset=36), [], [], None, None, lineno=190, col_offset=36), lineno=190, col_offset=32)], lineno=190, col_offset=11), [For(Name('c', Store(), lineno=191, col_offset=16), Subscript(Name('url', Load(), lineno=191, col_offset=21), Slice(None, Name('i', Load(), lineno=191, col_offset=26), None), Load(), lineno=191, col_offset=21), [If(Compare(Name('c', Load(), lineno=192, col_offset=19), [NotIn()], [Name('scheme_chars', Load(), lineno=192, col_offset=28)], lineno=192, col_offset=19), [Break( lineno=193, col_offset=20)], [], lineno=192, col_offset=16)], [Assign([Tuple([Name('scheme', Store(), lineno=195, col_offset=16), Name('url', Store(), lineno=195, col_offset=24)], Store(), lineno=195, col_offset=16)], Tuple([Call(Attribute(Subscript(Name('url', Load(), lineno=195, col_offset=30), Slice(None, Name('i', Load(), lineno=195, col_offset=35), None), Load(), lineno=195, col_offset=30), 'lower', Load(), lineno=195, col_offset=30), [], [], None, None, lineno=195, col_offset=30), Subscript(Name('url', Load(), lineno=195, col_offset=47), Slice(BinOp(Name('i', Load(), lineno=195, col_offset=51), Add(), Num(1, lineno=195, col_offset=53), lineno=195, col_offset=51), None, None), Load(), lineno=195, col_offset=47)], Load(), lineno=195, col_offset=30), lineno=195, col_offset=16)], lineno=191, col_offset=12)], [], lineno=190, col_offset=8)], [], lineno=174, col_offset=4), If(Compare(Subscript(Name('url', Load(), lineno=197, col_offset=7), Slice(None, Num(2, lineno=197, col_offset=12), None), Load(), lineno=197, col_offset=7), [Eq()], [Str('//', lineno=197, col_offset=18)], lineno=197, col_offset=7), [Assign([Tuple([Name('netloc', Store(), lineno=198, col_offset=8), Name('url', Store(), lineno=198, col_offset=16)], Store(), lineno=198, col_offset=8)], Call(Name('_splitnetloc', Load(), lineno=198, col_offset=22), [Name('url', Load(), lineno=198, col_offset=35), Num(2, lineno=198, col_offset=40)], [], None, None, lineno=198, col_offset=22), lineno=198, col_offset=8), If(BoolOp(Or(), [BoolOp(And(), [Compare(Str('[', lineno=199, col_offset=13), [In()], [Name('netloc', Load(), lineno=199, col_offset=20)], lineno=199, col_offset=13), Compare(Str(']', lineno=199, col_offset=31), [NotIn()], [Name('netloc', Load(), lineno=199, col_offset=42)], lineno=199, col_offset=31)], lineno=199, col_offset=13), BoolOp(And(), [Compare(Str(']', lineno=200, col_offset=17), [In()], [Name('netloc', Load(), lineno=200, col_offset=24)], lineno=200, col_offset=17), Compare(Str('[', lineno=200, col_offset=35), [NotIn()], [Name('netloc', Load(), lineno=200, col_offset=46)], lineno=200, col_offset=35)], lineno=200, col_offset=17)], lineno=199, col_offset=12), [Raise(Call(Name('ValueError', Load(), lineno=201, col_offset=18), [Str('Invalid IPv6 URL', lineno=201, col_offset=29)], [], None, None, lineno=201, col_offset=18), None, None, lineno=201, col_offset=12)], [], lineno=199, col_offset=8)], [], lineno=197, col_offset=4), If(BoolOp(And(), [Name('allow_fragments', Load(), lineno=202, col_offset=7), Compare(Name('scheme', Load(), lineno=202, col_offset=27), [In()], [Name('uses_fragment', Load(), lineno=202, col_offset=37)], lineno=202, col_offset=27), Compare(Str('#', lineno=202, col_offset=55), [In()], [Name('url', Load(), lineno=202, col_offset=62)], lineno=202, col_offset=55)], lineno=202, col_offset=7), [Assign([Tuple([Name('url', Store(), lineno=203, col_offset=8), Name('fragment', Store(), lineno=203, col_offset=13)], Store(), lineno=203, col_offset=8)], Call(Attribute(Name('url', Load(), lineno=203, col_offset=24), 'split', Load(), lineno=203, col_offset=24), [Str('#', lineno=203, col_offset=34), Num(1, lineno=203, col_offset=39)], [], None, None, lineno=203, col_offset=24), lineno=203, col_offset=8)], [], lineno=202, col_offset=4), If(BoolOp(And(), [Compare(Name('scheme', Load(), lineno=204, col_offset=7), [In()], [Name('uses_query', Load(), lineno=204, col_offset=17)], lineno=204, col_offset=7), Compare(Str('?', lineno=204, col_offset=32), [In()], [Name('url', Load(), lineno=204, col_offset=39)], lineno=204, col_offset=32)], lineno=204, col_offset=7), [Assign([Tuple([Name('url', Store(), lineno=205, col_offset=8), Name('query', Store(), lineno=205, col_offset=13)], Store(), lineno=205, col_offset=8)], Call(Attribute(Name('url', Load(), lineno=205, col_offset=21), 'split', Load(), lineno=205, col_offset=21), [Str('?', lineno=205, col_offset=31), Num(1, lineno=205, col_offset=36)], [], None, None, lineno=205, col_offset=21), lineno=205, col_offset=8)], [], lineno=204, col_offset=4), Assign([Name('v', Store(), lineno=206, col_offset=4)], Call(Name('SplitResult', Load(), lineno=206, col_offset=8), [Name('scheme', Load(), lineno=206, col_offset=20), Name('netloc', Load(), lineno=206, col_offset=28), Name('url', Load(), lineno=206, col_offset=36), Name('query', Load(), lineno=206, col_offset=41), Name('fragment', Load(), lineno=206, col_offset=48)], [], None, None, lineno=206, col_offset=8), lineno=206, col_offset=4), Assign([Subscript(Name('_parse_cache', Load(), lineno=207, col_offset=4), Index(Name('key', Load(), lineno=207, col_offset=17)), Store(), lineno=207, col_offset=4)], Name('v', Load(), lineno=207, col_offset=24), lineno=207, col_offset=4), Return(Name('v', Load(), lineno=208, col_offset=11), lineno=208, col_offset=4)], [], lineno=159, col_offset=0), FunctionDef('urlunparse', arguments([Name('data', Param(), lineno=210, col_offset=15)], None, None, []), [Expr(Str('Put a parsed URL back together again.  This may result in a\n    slightly different, but equivalent URL, if the URL that was parsed\n    originally had redundant delimiters, e.g. a ? with an empty query\n    (the draft states that these are equivalent).', lineno=214, col_offset=-1), lineno=214, col_offset=-1), Assign([Tuple([Name('scheme', Store(), lineno=215, col_offset=4), Name('netloc', Store(), lineno=215, col_offset=12), Name('url', Store(), lineno=215, col_offset=20), Name('params', Store(), lineno=215, col_offset=25), Name('query', Store(), lineno=215, col_offset=33), Name('fragment', Store(), lineno=215, col_offset=40)], Store(), lineno=215, col_offset=4)], Name('data', Load(), lineno=215, col_offset=51), lineno=215, col_offset=4), If(Name('params', Load(), lineno=216, col_offset=7), [Assign([Name('url', Store(), lineno=217, col_offset=8)], BinOp(Str('%s;%s', lineno=217, col_offset=14), Mod(), Tuple([Name('url', Load(), lineno=217, col_offset=25), Name('params', Load(), lineno=217, col_offset=30)], Load(), lineno=217, col_offset=25), lineno=217, col_offset=14), lineno=217, col_offset=8)], [], lineno=216, col_offset=4), Return(Call(Name('urlunsplit', Load(), lineno=218, col_offset=11), [Tuple([Name('scheme', Load(), lineno=218, col_offset=23), Name('netloc', Load(), lineno=218, col_offset=31), Name('url', Load(), lineno=218, col_offset=39), Name('query', Load(), lineno=218, col_offset=44), Name('fragment', Load(), lineno=218, col_offset=51)], Load(), lineno=218, col_offset=23)], [], None, None, lineno=218, col_offset=11), lineno=218, col_offset=4)], [], lineno=210, col_offset=0), FunctionDef('urlunsplit', arguments([Name('data', Param(), lineno=220, col_offset=15)], None, None, []), [Expr(Str('Combine the elements of a tuple as returned by urlsplit() into a\n    complete URL as a string. The data argument can be any five-item iterable.\n    This may result in a slightly different, but equivalent URL, if the URL that\n    was parsed originally had unnecessary delimiters (for example, a ? with an\n    empty query; the RFC states that these are equivalent).', lineno=225, col_offset=-1), lineno=225, col_offset=-1), Assign([Tuple([Name('scheme', Store(), lineno=226, col_offset=4), Name('netloc', Store(), lineno=226, col_offset=12), Name('url', Store(), lineno=226, col_offset=20), Name('query', Store(), lineno=226, col_offset=25), Name('fragment', Store(), lineno=226, col_offset=32)], Store(), lineno=226, col_offset=4)], Name('data', Load(), lineno=226, col_offset=43), lineno=226, col_offset=4), If(BoolOp(Or(), [Name('netloc', Load(), lineno=227, col_offset=7), BoolOp(And(), [Name('scheme', Load(), lineno=227, col_offset=18), Compare(Name('scheme', Load(), lineno=227, col_offset=29), [In()], [Name('uses_netloc', Load(), lineno=227, col_offset=39)], lineno=227, col_offset=29), Compare(Subscript(Name('url', Load(), lineno=227, col_offset=55), Slice(None, Num(2, lineno=227, col_offset=60), None), Load(), lineno=227, col_offset=55), [NotEq()], [Str('//', lineno=227, col_offset=66)], lineno=227, col_offset=55)], lineno=227, col_offset=18)], lineno=227, col_offset=7), [If(BoolOp(And(), [Name('url', Load(), lineno=228, col_offset=11), Compare(Subscript(Name('url', Load(), lineno=228, col_offset=19), Slice(None, Num(1, lineno=228, col_offset=24), None), Load(), lineno=228, col_offset=19), [NotEq()], [Str('/', lineno=228, col_offset=30)], lineno=228, col_offset=19)], lineno=228, col_offset=11), [Assign([Name('url', Store(), lineno=228, col_offset=35)], BinOp(Str('/', lineno=228, col_offset=41), Add(), Name('url', Load(), lineno=228, col_offset=47), lineno=228, col_offset=41), lineno=228, col_offset=35)], [], lineno=228, col_offset=8), Assign([Name('url', Store(), lineno=229, col_offset=8)], BinOp(BinOp(Str('//', lineno=229, col_offset=14), Add(), BoolOp(Or(), [Name('netloc', Load(), lineno=229, col_offset=22), Str('', lineno=229, col_offset=32)], lineno=229, col_offset=22), lineno=229, col_offset=14), Add(), Name('url', Load(), lineno=229, col_offset=38), lineno=229, col_offset=36), lineno=229, col_offset=8)], [], lineno=227, col_offset=4), If(Name('scheme', Load(), lineno=230, col_offset=7), [Assign([Name('url', Store(), lineno=231, col_offset=8)], BinOp(BinOp(Name('scheme', Load(), lineno=231, col_offset=14), Add(), Str(':', lineno=231, col_offset=23), lineno=231, col_offset=14), Add(), Name('url', Load(), lineno=231, col_offset=29), lineno=231, col_offset=27), lineno=231, col_offset=8)], [], lineno=230, col_offset=4), If(Name('query', Load(), lineno=232, col_offset=7), [Assign([Name('url', Store(), lineno=233, col_offset=8)], BinOp(BinOp(Name('url', Load(), lineno=233, col_offset=14), Add(), Str('?', lineno=233, col_offset=20), lineno=233, col_offset=14), Add(), Name('query', Load(), lineno=233, col_offset=26), lineno=233, col_offset=24), lineno=233, col_offset=8)], [], lineno=232, col_offset=4), If(Name('fragment', Load(), lineno=234, col_offset=7), [Assign([Name('url', Store(), lineno=235, col_offset=8)], BinOp(BinOp(Name('url', Load(), lineno=235, col_offset=14), Add(), Str('#', lineno=235, col_offset=20), lineno=235, col_offset=14), Add(), Name('fragment', Load(), lineno=235, col_offset=26), lineno=235, col_offset=24), lineno=235, col_offset=8)], [], lineno=234, col_offset=4), Return(Name('url', Load(), lineno=236, col_offset=11), lineno=236, col_offset=4)], [], lineno=220, col_offset=0), FunctionDef('urljoin', arguments([Name('base', Param(), lineno=238, col_offset=12), Name('url', Param(), lineno=238, col_offset=18), Name('allow_fragments', Param(), lineno=238, col_offset=23)], None, None, [Name('True', Load(), lineno=238, col_offset=39)]), [Expr(Str('Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.', lineno=240, col_offset=-1), lineno=240, col_offset=-1), If(UnaryOp(Not(), Name('base', Load(), lineno=241, col_offset=11), lineno=241, col_offset=7), [Return(Name('url', Load(), lineno=242, col_offset=15), lineno=242, col_offset=8)], [], lineno=241, col_offset=4), If(UnaryOp(Not(), Name('url', Load(), lineno=243, col_offset=11), lineno=243, col_offset=7), [Return(Name('base', Load(), lineno=244, col_offset=15), lineno=244, col_offset=8)], [], lineno=243, col_offset=4), Assign([Tuple([Name('bscheme', Store(), lineno=245, col_offset=4), Name('bnetloc', Store(), lineno=245, col_offset=13), Name('bpath', Store(), lineno=245, col_offset=22), Name('bparams', Store(), lineno=245, col_offset=29), Name('bquery', Store(), lineno=245, col_offset=38), Name('bfragment', Store(), lineno=245, col_offset=46)], Store(), lineno=245, col_offset=4)], Call(Name('urlparse', Load(), lineno=246, col_offset=12), [Name('base', Load(), lineno=246, col_offset=21), Str('', lineno=246, col_offset=27), Name('allow_fragments', Load(), lineno=246, col_offset=31)], [], None, None, lineno=246, col_offset=12), lineno=245, col_offset=4), Assign([Tuple([Name('scheme', Store(), lineno=247, col_offset=4), Name('netloc', Store(), lineno=247, col_offset=12), Name('path', Store(), lineno=247, col_offset=20), Name('params', Store(), lineno=247, col_offset=26), Name('query', Store(), lineno=247, col_offset=34), Name('fragment', Store(), lineno=247, col_offset=41)], Store(), lineno=247, col_offset=4)], Call(Name('urlparse', Load(), lineno=248, col_offset=12), [Name('url', Load(), lineno=248, col_offset=21), Name('bscheme', Load(), lineno=248, col_offset=26), Name('allow_fragments', Load(), lineno=248, col_offset=35)], [], None, None, lineno=248, col_offset=12), lineno=247, col_offset=4), If(BoolOp(Or(), [Compare(Name('scheme', Load(), lineno=249, col_offset=7), [NotEq()], [Name('bscheme', Load(), lineno=249, col_offset=17)], lineno=249, col_offset=7), Compare(Name('scheme', Load(), lineno=249, col_offset=28), [NotIn()], [Name('uses_relative', Load(), lineno=249, col_offset=42)], lineno=249, col_offset=28)], lineno=249, col_offset=7), [Return(Name('url', Load(), lineno=250, col_offset=15), lineno=250, col_offset=8)], [], lineno=249, col_offset=4), If(Compare(Name('scheme', Load(), lineno=251, col_offset=7), [In()], [Name('uses_netloc', Load(), lineno=251, col_offset=17)], lineno=251, col_offset=7), [If(Name('netloc', Load(), lineno=252, col_offset=11), [Return(Call(Name('urlunparse', Load(), lineno=253, col_offset=19), [Tuple([Name('scheme', Load(), lineno=253, col_offset=31), Name('netloc', Load(), lineno=253, col_offset=39), Name('path', Load(), lineno=253, col_offset=47), Name('params', Load(), lineno=254, col_offset=31), Name('query', Load(), lineno=254, col_offset=39), Name('fragment', Load(), lineno=254, col_offset=46)], Load(), lineno=253, col_offset=31)], [], None, None, lineno=253, col_offset=19), lineno=253, col_offset=12)], [], lineno=252, col_offset=8), Assign([Name('netloc', Store(), lineno=255, col_offset=8)], Name('bnetloc', Load(), lineno=255, col_offset=17), lineno=255, col_offset=8)], [], lineno=251, col_offset=4), If(Compare(Subscript(Name('path', Load(), lineno=256, col_offset=7), Slice(None, Num(1, lineno=256, col_offset=13), None), Load(), lineno=256, col_offset=7), [Eq()], [Str('/', lineno=256, col_offset=19)], lineno=256, col_offset=7), [Return(Call(Name('urlunparse', Load(), lineno=257, col_offset=15), [Tuple([Name('scheme', Load(), lineno=257, col_offset=27), Name('netloc', Load(), lineno=257, col_offset=35), Name('path', Load(), lineno=257, col_offset=43), Name('params', Load(), lineno=258, col_offset=27), Name('query', Load(), lineno=258, col_offset=35), Name('fragment', Load(), lineno=258, col_offset=42)], Load(), lineno=257, col_offset=27)], [], None, None, lineno=257, col_offset=15), lineno=257, col_offset=8)], [], lineno=256, col_offset=4), If(UnaryOp(Not(), Name('path', Load(), lineno=259, col_offset=11), lineno=259, col_offset=7), [Assign([Name('path', Store(), lineno=260, col_offset=8)], Name('bpath', Load(), lineno=260, col_offset=15), lineno=260, col_offset=8), If(UnaryOp(Not(), Name('params', Load(), lineno=261, col_offset=15), lineno=261, col_offset=11), [Assign([Name('params', Store(), lineno=262, col_offset=12)], Name('bparams', Load(), lineno=262, col_offset=21), lineno=262, col_offset=12)], [Assign([Name('path', Store(), lineno=264, col_offset=12)], Subscript(Name('path', Load(), lineno=264, col_offset=19), Slice(None, Num(-1, lineno=264, col_offset=26), None), Load(), lineno=264, col_offset=19), lineno=264, col_offset=12), Return(Call(Name('urlunparse', Load(), lineno=265, col_offset=19), [Tuple([Name('scheme', Load(), lineno=265, col_offset=31), Name('netloc', Load(), lineno=265, col_offset=39), Name('path', Load(), lineno=265, col_offset=47), Name('params', Load(), lineno=266, col_offset=32), Name('query', Load(), lineno=266, col_offset=40), Name('fragment', Load(), lineno=266, col_offset=47)], Load(), lineno=265, col_offset=31)], [], None, None, lineno=265, col_offset=19), lineno=265, col_offset=12)], lineno=261, col_offset=8), If(UnaryOp(Not(), Name('query', Load(), lineno=267, col_offset=15), lineno=267, col_offset=11), [Assign([Name('query', Store(), lineno=268, col_offset=12)], Name('bquery', Load(), lineno=268, col_offset=20), lineno=268, col_offset=12)], [], lineno=267, col_offset=8), Return(Call(Name('urlunparse', Load(), lineno=269, col_offset=15), [Tuple([Name('scheme', Load(), lineno=269, col_offset=27), Name('netloc', Load(), lineno=269, col_offset=35), Name('path', Load(), lineno=269, col_offset=43), Name('params', Load(), lineno=270, col_offset=27), Name('query', Load(), lineno=270, col_offset=35), Name('fragment', Load(), lineno=270, col_offset=42)], Load(), lineno=269, col_offset=27)], [], None, None, lineno=269, col_offset=15), lineno=269, col_offset=8)], [], lineno=259, col_offset=4), Assign([Name('segments', Store(), lineno=271, col_offset=4)], BinOp(Subscript(Call(Attribute(Name('bpath', Load(), lineno=271, col_offset=15), 'split', Load(), lineno=271, col_offset=15), [Str('/', lineno=271, col_offset=27)], [], None, None, lineno=271, col_offset=15), Slice(None, Num(-1, lineno=271, col_offset=34), None), Load(), lineno=271, col_offset=15), Add(), Call(Attribute(Name('path', Load(), lineno=271, col_offset=39), 'split', Load(), lineno=271, col_offset=39), [Str('/', lineno=271, col_offset=50)], [], None, None, lineno=271, col_offset=39), lineno=271, col_offset=15), lineno=271, col_offset=4), If(Compare(Subscript(Name('segments', Load(), lineno=273, col_offset=7), Index(Num(-1, lineno=273, col_offset=17)), Load(), lineno=273, col_offset=7), [Eq()], [Str('.', lineno=273, col_offset=23)], lineno=273, col_offset=7), [Assign([Subscript(Name('segments', Load(), lineno=274, col_offset=8), Index(Num(-1, lineno=274, col_offset=18)), Store(), lineno=274, col_offset=8)], Str('', lineno=274, col_offset=23), lineno=274, col_offset=8)], [], lineno=273, col_offset=4), While(Compare(Str('.', lineno=275, col_offset=10), [In()], [Name('segments', Load(), lineno=275, col_offset=17)], lineno=275, col_offset=10), [Expr(Call(Attribute(Name('segments', Load(), lineno=276, col_offset=8), 'remove', Load(), lineno=276, col_offset=8), [Str('.', lineno=276, col_offset=24)], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8)], [], lineno=275, col_offset=4), While(Num(1, lineno=277, col_offset=10), [Assign([Name('i', Store(), lineno=278, col_offset=8)], Num(1, lineno=278, col_offset=12), lineno=278, col_offset=8), Assign([Name('n', Store(), lineno=279, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=279, col_offset=12), [Name('segments', Load(), lineno=279, col_offset=16)], [], None, None, lineno=279, col_offset=12), Sub(), Num(1, lineno=279, col_offset=28), lineno=279, col_offset=12), lineno=279, col_offset=8), While(Compare(Name('i', Load(), lineno=280, col_offset=14), [Lt()], [Name('n', Load(), lineno=280, col_offset=18)], lineno=280, col_offset=14), [If(BoolOp(And(), [Compare(Subscript(Name('segments', Load(), lineno=281, col_offset=16), Index(Name('i', Load(), lineno=281, col_offset=25)), Load(), lineno=281, col_offset=16), [Eq()], [Str('..', lineno=281, col_offset=31)], lineno=281, col_offset=16), Compare(Subscript(Name('segments', Load(), lineno=282, col_offset=20), Index(BinOp(Name('i', Load(), lineno=282, col_offset=29), Sub(), Num(1, lineno=282, col_offset=31), lineno=282, col_offset=29)), Load(), lineno=282, col_offset=20), [NotIn()], [Tuple([Str('', lineno=282, col_offset=42), Str('..', lineno=282, col_offset=46)], Load(), lineno=282, col_offset=42)], lineno=282, col_offset=20)], lineno=281, col_offset=16), [Delete([Subscript(Name('segments', Load(), lineno=283, col_offset=20), Slice(BinOp(Name('i', Load(), lineno=283, col_offset=29), Sub(), Num(1, lineno=283, col_offset=31), lineno=283, col_offset=29), BinOp(Name('i', Load(), lineno=283, col_offset=33), Add(), Num(1, lineno=283, col_offset=35), lineno=283, col_offset=33), None), Del(), lineno=283, col_offset=20)], lineno=283, col_offset=16), Break( lineno=284, col_offset=16)], [], lineno=281, col_offset=12), Assign([Name('i', Store(), lineno=285, col_offset=12)], BinOp(Name('i', Load(), lineno=285, col_offset=16), Add(), Num(1, lineno=285, col_offset=18), lineno=285, col_offset=16), lineno=285, col_offset=12)], [Break( lineno=287, col_offset=12)], lineno=280, col_offset=8)], [], lineno=277, col_offset=4), If(Compare(Name('segments', Load(), lineno=288, col_offset=7), [Eq()], [List([Str('', lineno=288, col_offset=20), Str('..', lineno=288, col_offset=24)], Load(), lineno=288, col_offset=19)], lineno=288, col_offset=7), [Assign([Subscript(Name('segments', Load(), lineno=289, col_offset=8), Index(Num(-1, lineno=289, col_offset=18)), Store(), lineno=289, col_offset=8)], Str('', lineno=289, col_offset=23), lineno=289, col_offset=8)], [If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=290, col_offset=9), [Name('segments', Load(), lineno=290, col_offset=13)], [], None, None, lineno=290, col_offset=9), [GtE()], [Num(2, lineno=290, col_offset=26)], lineno=290, col_offset=9), Compare(Subscript(Name('segments', Load(), lineno=290, col_offset=32), Index(Num(-1, lineno=290, col_offset=42)), Load(), lineno=290, col_offset=32), [Eq()], [Str('..', lineno=290, col_offset=48)], lineno=290, col_offset=32)], lineno=290, col_offset=9), [Assign([Subscript(Name('segments', Load(), lineno=291, col_offset=8), Slice(Num(-2, lineno=291, col_offset=18), None, None), Store(), lineno=291, col_offset=8)], List([Str('', lineno=291, col_offset=25)], Load(), lineno=291, col_offset=24), lineno=291, col_offset=8)], [], lineno=290, col_offset=9)], lineno=288, col_offset=4), Return(Call(Name('urlunparse', Load(), lineno=292, col_offset=11), [Tuple([Name('scheme', Load(), lineno=292, col_offset=23), Name('netloc', Load(), lineno=292, col_offset=31), Call(Attribute(Str('/', lineno=292, col_offset=39), 'join', Load(), lineno=292, col_offset=39), [Name('segments', Load(), lineno=292, col_offset=48)], [], None, None, lineno=292, col_offset=39), Name('params', Load(), lineno=293, col_offset=23), Name('query', Load(), lineno=293, col_offset=31), Name('fragment', Load(), lineno=293, col_offset=38)], Load(), lineno=292, col_offset=23)], [], None, None, lineno=292, col_offset=11), lineno=292, col_offset=4)], [], lineno=238, col_offset=0), FunctionDef('urldefrag', arguments([Name('url', Param(), lineno=295, col_offset=14)], None, None, []), [Expr(Str('Removes any existing fragment from URL.\n\n    Returns a tuple of the defragmented URL and the fragment.  If\n    the URL contained no fragments, the second element is the\n    empty string.\n    ', lineno=301, col_offset=-1), lineno=301, col_offset=-1), If(Compare(Str('#', lineno=302, col_offset=7), [In()], [Name('url', Load(), lineno=302, col_offset=14)], lineno=302, col_offset=7), [Assign([Tuple([Name('s', Store(), lineno=303, col_offset=8), Name('n', Store(), lineno=303, col_offset=11), Name('p', Store(), lineno=303, col_offset=14), Name('a', Store(), lineno=303, col_offset=17), Name('q', Store(), lineno=303, col_offset=20), Name('frag', Store(), lineno=303, col_offset=23)], Store(), lineno=303, col_offset=8)], Call(Name('urlparse', Load(), lineno=303, col_offset=30), [Name('url', Load(), lineno=303, col_offset=39)], [], None, None, lineno=303, col_offset=30), lineno=303, col_offset=8), Assign([Name('defrag', Store(), lineno=304, col_offset=8)], Call(Name('urlunparse', Load(), lineno=304, col_offset=17), [Tuple([Name('s', Load(), lineno=304, col_offset=29), Name('n', Load(), lineno=304, col_offset=32), Name('p', Load(), lineno=304, col_offset=35), Name('a', Load(), lineno=304, col_offset=38), Name('q', Load(), lineno=304, col_offset=41), Str('', lineno=304, col_offset=44)], Load(), lineno=304, col_offset=29)], [], None, None, lineno=304, col_offset=17), lineno=304, col_offset=8), Return(Tuple([Name('defrag', Load(), lineno=305, col_offset=15), Name('frag', Load(), lineno=305, col_offset=23)], Load(), lineno=305, col_offset=15), lineno=305, col_offset=8)], [Return(Tuple([Name('url', Load(), lineno=307, col_offset=15), Str('', lineno=307, col_offset=20)], Load(), lineno=307, col_offset=15), lineno=307, col_offset=8)], lineno=302, col_offset=4)], [], lineno=295, col_offset=0), Assign([Name('_hexdig', Store(), lineno=314, col_offset=0)], Str('0123456789ABCDEFabcdef', lineno=314, col_offset=10), lineno=314, col_offset=0), Assign([Name('_hextochr', Store(), lineno=315, col_offset=0)], Call(Name('dict', Load(), lineno=315, col_offset=12), [GeneratorExp(Tuple([BinOp(Name('a', Load(), lineno=315, col_offset=18), Add(), Name('b', Load(), lineno=315, col_offset=20), lineno=315, col_offset=18), Call(Name('chr', Load(), lineno=315, col_offset=23), [Call(Name('int', Load(), lineno=315, col_offset=27), [BinOp(Name('a', Load(), lineno=315, col_offset=31), Add(), Name('b', Load(), lineno=315, col_offset=33), lineno=315, col_offset=31), Num(16, lineno=315, col_offset=35)], [], None, None, lineno=315, col_offset=27)], [], None, None, lineno=315, col_offset=23)], Load(), lineno=315, col_offset=18), [comprehension(Name('a', Store(), lineno=316, col_offset=21), Name('_hexdig', Load(), lineno=316, col_offset=26), []), comprehension(Name('b', Store(), lineno=316, col_offset=38), Name('_hexdig', Load(), lineno=316, col_offset=43), [])], lineno=315, col_offset=17)], [], None, None, lineno=315, col_offset=12), lineno=315, col_offset=0), FunctionDef('unquote', arguments([Name('s', Param(), lineno=318, col_offset=12)], None, None, []), [Expr(Str("unquote('abc%20def') -> 'abc def'.", lineno=319, col_offset=4), lineno=319, col_offset=4), Assign([Name('res', Store(), lineno=320, col_offset=4)], Call(Attribute(Name('s', Load(), lineno=320, col_offset=10), 'split', Load(), lineno=320, col_offset=10), [Str('%', lineno=320, col_offset=18)], [], None, None, lineno=320, col_offset=10), lineno=320, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=322, col_offset=7), [Name('res', Load(), lineno=322, col_offset=11)], [], None, None, lineno=322, col_offset=7), [Eq()], [Num(1, lineno=322, col_offset=19)], lineno=322, col_offset=7), [Return(Name('s', Load(), lineno=323, col_offset=15), lineno=323, col_offset=8)], [], lineno=322, col_offset=4), Assign([Name('s', Store(), lineno=324, col_offset=4)], Subscript(Name('res', Load(), lineno=324, col_offset=8), Index(Num(0, lineno=324, col_offset=12)), Load(), lineno=324, col_offset=8), lineno=324, col_offset=4), For(Name('item', Store(), lineno=325, col_offset=8), Subscript(Name('res', Load(), lineno=325, col_offset=16), Slice(Num(1, lineno=325, col_offset=20), None, None), Load(), lineno=325, col_offset=16), [TryExcept([AugAssign(Name('s', Store(), lineno=327, col_offset=12), Add(), BinOp(Subscript(Name('_hextochr', Load(), lineno=327, col_offset=17), Index(Subscript(Name('item', Load(), lineno=327, col_offset=27), Slice(None, Num(2, lineno=327, col_offset=33), None), Load(), lineno=327, col_offset=27)), Load(), lineno=327, col_offset=17), Add(), Subscript(Name('item', Load(), lineno=327, col_offset=39), Slice(Num(2, lineno=327, col_offset=44), None, None), Load(), lineno=327, col_offset=39), lineno=327, col_offset=17), lineno=327, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=328, col_offset=15), None, [AugAssign(Name('s', Store(), lineno=329, col_offset=12), Add(), BinOp(Str('%', lineno=329, col_offset=17), Add(), Name('item', Load(), lineno=329, col_offset=23), lineno=329, col_offset=17), lineno=329, col_offset=12)], lineno=328, col_offset=8), ExceptHandler(Name('UnicodeDecodeError', Load(), lineno=330, col_offset=15), None, [AugAssign(Name('s', Store(), lineno=331, col_offset=12), Add(), BinOp(Call(Name('unichr', Load(), lineno=331, col_offset=17), [Call(Name('int', Load(), lineno=331, col_offset=24), [Subscript(Name('item', Load(), lineno=331, col_offset=28), Slice(None, Num(2, lineno=331, col_offset=34), None), Load(), lineno=331, col_offset=28), Num(16, lineno=331, col_offset=38)], [], None, None, lineno=331, col_offset=24)], [], None, None, lineno=331, col_offset=17), Add(), Subscript(Name('item', Load(), lineno=331, col_offset=45), Slice(Num(2, lineno=331, col_offset=50), None, None), Load(), lineno=331, col_offset=45), lineno=331, col_offset=17), lineno=331, col_offset=12)], lineno=330, col_offset=8)], [], lineno=326, col_offset=8)], [], lineno=325, col_offset=4), Return(Name('s', Load(), lineno=332, col_offset=11), lineno=332, col_offset=4)], [], lineno=318, col_offset=0), FunctionDef('parse_qs', arguments([Name('qs', Param(), lineno=334, col_offset=13), Name('keep_blank_values', Param(), lineno=334, col_offset=17), Name('strict_parsing', Param(), lineno=334, col_offset=38)], None, None, [Num(0, lineno=334, col_offset=35), Num(0, lineno=334, col_offset=53)]), [Expr(Str('Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    ', lineno=351, col_offset=-1), lineno=351, col_offset=-1), Assign([Name('dict', Store(), lineno=352, col_offset=4)], Dict([], [], lineno=352, col_offset=11), lineno=352, col_offset=4), For(Tuple([Name('name', Store(), lineno=353, col_offset=8), Name('value', Store(), lineno=353, col_offset=14)], Store(), lineno=353, col_offset=8), Call(Name('parse_qsl', Load(), lineno=353, col_offset=23), [Name('qs', Load(), lineno=353, col_offset=33), Name('keep_blank_values', Load(), lineno=353, col_offset=37), Name('strict_parsing', Load(), lineno=353, col_offset=56)], [], None, None, lineno=353, col_offset=23), [If(Compare(Name('name', Load(), lineno=354, col_offset=11), [In()], [Name('dict', Load(), lineno=354, col_offset=19)], lineno=354, col_offset=11), [Expr(Call(Attribute(Subscript(Name('dict', Load(), lineno=355, col_offset=12), Index(Name('name', Load(), lineno=355, col_offset=17)), Load(), lineno=355, col_offset=12), 'append', Load(), lineno=355, col_offset=12), [Name('value', Load(), lineno=355, col_offset=30)], [], None, None, lineno=355, col_offset=12), lineno=355, col_offset=12)], [Assign([Subscript(Name('dict', Load(), lineno=357, col_offset=12), Index(Name('name', Load(), lineno=357, col_offset=17)), Store(), lineno=357, col_offset=12)], List([Name('value', Load(), lineno=357, col_offset=26)], Load(), lineno=357, col_offset=25), lineno=357, col_offset=12)], lineno=354, col_offset=8)], [], lineno=353, col_offset=4), Return(Name('dict', Load(), lineno=358, col_offset=11), lineno=358, col_offset=4)], [], lineno=334, col_offset=0), FunctionDef('parse_qsl', arguments([Name('qs', Param(), lineno=360, col_offset=14), Name('keep_blank_values', Param(), lineno=360, col_offset=18), Name('strict_parsing', Param(), lineno=360, col_offset=39)], None, None, [Num(0, lineno=360, col_offset=36), Num(0, lineno=360, col_offset=54)]), [Expr(Str('Parse a query given as a string argument.\n\n    Arguments:\n\n    qs: percent-encoded query string to be parsed\n\n    keep_blank_values: flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.  A\n        true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n\n    strict_parsing: flag indicating what to do with parsing errors. If\n        false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n\n    Returns a list, as G-d intended.\n    ', lineno=378, col_offset=-1), lineno=378, col_offset=-1), Assign([Name('pairs', Store(), lineno=379, col_offset=4)], ListComp(Name('s2', Load(), lineno=379, col_offset=13), [comprehension(Name('s1', Store(), lineno=379, col_offset=20), Call(Attribute(Name('qs', Load(), lineno=379, col_offset=26), 'split', Load(), lineno=379, col_offset=26), [Str('&', lineno=379, col_offset=35)], [], None, None, lineno=379, col_offset=26), []), comprehension(Name('s2', Store(), lineno=379, col_offset=44), Call(Attribute(Name('s1', Load(), lineno=379, col_offset=50), 'split', Load(), lineno=379, col_offset=50), [Str(';', lineno=379, col_offset=59)], [], None, None, lineno=379, col_offset=50), [])], lineno=379, col_offset=13), lineno=379, col_offset=4), Assign([Name('r', Store(), lineno=380, col_offset=4)], List([], Load(), lineno=380, col_offset=8), lineno=380, col_offset=4), For(Name('name_value', Store(), lineno=381, col_offset=8), Name('pairs', Load(), lineno=381, col_offset=22), [If(BoolOp(And(), [UnaryOp(Not(), Name('name_value', Load(), lineno=382, col_offset=15), lineno=382, col_offset=11), UnaryOp(Not(), Name('strict_parsing', Load(), lineno=382, col_offset=34), lineno=382, col_offset=30)], lineno=382, col_offset=11), [Continue( lineno=383, col_offset=12)], [], lineno=382, col_offset=8), Assign([Name('nv', Store(), lineno=384, col_offset=8)], Call(Attribute(Name('name_value', Load(), lineno=384, col_offset=13), 'split', Load(), lineno=384, col_offset=13), [Str('=', lineno=384, col_offset=30), Num(1, lineno=384, col_offset=35)], [], None, None, lineno=384, col_offset=13), lineno=384, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=385, col_offset=11), [Name('nv', Load(), lineno=385, col_offset=15)], [], None, None, lineno=385, col_offset=11), [NotEq()], [Num(2, lineno=385, col_offset=22)], lineno=385, col_offset=11), [If(Name('strict_parsing', Load(), lineno=386, col_offset=15), [Raise(Name('ValueError', Load(), lineno=387, col_offset=22), BinOp(Str('bad query field: %r', lineno=387, col_offset=34), Mod(), Tuple([Name('name_value', Load(), lineno=387, col_offset=59)], Load(), lineno=387, col_offset=59), lineno=387, col_offset=34), None, lineno=387, col_offset=16)], [], lineno=386, col_offset=12), If(Name('keep_blank_values', Load(), lineno=389, col_offset=15), [Expr(Call(Attribute(Name('nv', Load(), lineno=390, col_offset=16), 'append', Load(), lineno=390, col_offset=16), [Str('', lineno=390, col_offset=26)], [], None, None, lineno=390, col_offset=16), lineno=390, col_offset=16)], [Continue( lineno=392, col_offset=16)], lineno=389, col_offset=12)], [], lineno=385, col_offset=8), If(BoolOp(Or(), [Call(Name('len', Load(), lineno=393, col_offset=11), [Subscript(Name('nv', Load(), lineno=393, col_offset=15), Index(Num(1, lineno=393, col_offset=18)), Load(), lineno=393, col_offset=15)], [], None, None, lineno=393, col_offset=11), Name('keep_blank_values', Load(), lineno=393, col_offset=25)], lineno=393, col_offset=11), [Assign([Name('name', Store(), lineno=394, col_offset=12)], Call(Name('unquote', Load(), lineno=394, col_offset=19), [Call(Attribute(Subscript(Name('nv', Load(), lineno=394, col_offset=27), Index(Num(0, lineno=394, col_offset=30)), Load(), lineno=394, col_offset=27), 'replace', Load(), lineno=394, col_offset=27), [Str('+', lineno=394, col_offset=41), Str(' ', lineno=394, col_offset=46)], [], None, None, lineno=394, col_offset=27)], [], None, None, lineno=394, col_offset=19), lineno=394, col_offset=12), Assign([Name('value', Store(), lineno=395, col_offset=12)], Call(Name('unquote', Load(), lineno=395, col_offset=20), [Call(Attribute(Subscript(Name('nv', Load(), lineno=395, col_offset=28), Index(Num(1, lineno=395, col_offset=31)), Load(), lineno=395, col_offset=28), 'replace', Load(), lineno=395, col_offset=28), [Str('+', lineno=395, col_offset=42), Str(' ', lineno=395, col_offset=47)], [], None, None, lineno=395, col_offset=28)], [], None, None, lineno=395, col_offset=20), lineno=395, col_offset=12), Expr(Call(Attribute(Name('r', Load(), lineno=396, col_offset=12), 'append', Load(), lineno=396, col_offset=12), [Tuple([Name('name', Load(), lineno=396, col_offset=22), Name('value', Load(), lineno=396, col_offset=28)], Load(), lineno=396, col_offset=22)], [], None, None, lineno=396, col_offset=12), lineno=396, col_offset=12)], [], lineno=393, col_offset=8)], [], lineno=381, col_offset=4), Return(Name('r', Load(), lineno=398, col_offset=11), lineno=398, col_offset=4)], [], lineno=360, col_offset=0)])
