Module([ImportFrom('macsupport', [alias('*', None)], 0, lineno=3, col_offset=0), ImportFrom('CarbonEvtscan', [alias('RefObjectTypes', None)], 0, lineno=5, col_offset=0), Assign([Name('CFStringRef', Store(), lineno=8, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=8, col_offset=14), [Str('CFStringRef', lineno=8, col_offset=32)], [], None, None, lineno=8, col_offset=14), lineno=8, col_offset=0), For(Name('typ', Store(), lineno=10, col_offset=4), Name('RefObjectTypes', Load(), lineno=10, col_offset=11), [Assign([Name('execstr', Store(), lineno=11, col_offset=4)], BinOp(Str("%(name)s = OpaqueByValueType('%(name)s')", lineno=11, col_offset=14), Mod(), Dict([Str('name', lineno=11, col_offset=60)], [Name('typ', Load(), lineno=11, col_offset=68)], lineno=11, col_offset=59), lineno=11, col_offset=14), lineno=11, col_offset=4), Exec(Name('execstr', Load(), lineno=12, col_offset=9), None, None, lineno=12, col_offset=4)], [], lineno=10, col_offset=0), If(Num(0, lineno=15, col_offset=3), [Assign([Name('StructObjectTypes', Store(), lineno=19, col_offset=4)], List([Str('EventTypeSpec', lineno=19, col_offset=25), Str('HIPoint', lineno=20, col_offset=44), Str('HICommand', lineno=21, col_offset=44), Str('EventHotKeyID', lineno=22, col_offset=44)], Load(), lineno=19, col_offset=24), lineno=19, col_offset=4), For(Name('typ', Store(), lineno=25, col_offset=8), Name('StructObjectTypes', Load(), lineno=25, col_offset=15), [Assign([Name('execstr', Store(), lineno=26, col_offset=8)], BinOp(Str("%(name)s = OpaqueType('%(name)s')", lineno=26, col_offset=18), Mod(), Dict([Str('name', lineno=26, col_offset=57)], [Name('typ', Load(), lineno=26, col_offset=65)], lineno=26, col_offset=56), lineno=26, col_offset=18), lineno=26, col_offset=8), Exec(Name('execstr', Load(), lineno=27, col_offset=13), None, None, lineno=27, col_offset=8)], [], lineno=25, col_offset=4)], [], lineno=15, col_offset=0), Assign([Name('EventHotKeyID', Store(), lineno=29, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=29, col_offset=16), [Str('EventHotKeyID', lineno=29, col_offset=34), Str('EventHotKeyID', lineno=29, col_offset=51)], [], None, None, lineno=29, col_offset=16), lineno=29, col_offset=0), Assign([Name('EventTypeSpec_ptr', Store(), lineno=30, col_offset=0)], Call(Name('OpaqueType', Load(), lineno=30, col_offset=20), [Str('EventTypeSpec', lineno=30, col_offset=31), Str('EventTypeSpec', lineno=30, col_offset=48)], [], None, None, lineno=30, col_offset=20), lineno=30, col_offset=0), Assign([Name('void_ptr', Store(), lineno=34, col_offset=0)], Name('stringptr', Load(), lineno=34, col_offset=11), lineno=34, col_offset=0), ClassDef('MyVarInputBufferType', [Name('VarInputBufferType', Load(), lineno=37, col_offset=27)], [FunctionDef('passInput', arguments([Name('self', Param(), lineno=38, col_offset=18), Name('name', Param(), lineno=38, col_offset=24)], None, None, []), [Return(BinOp(Str('%s__len__, %s__in__', lineno=39, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=39, col_offset=40), Name('name', Load(), lineno=39, col_offset=46)], Load(), lineno=39, col_offset=40), lineno=39, col_offset=15), lineno=39, col_offset=8)], [], lineno=38, col_offset=4)], [], lineno=37, col_offset=0), Assign([Name('MyInBuffer', Store(), lineno=41, col_offset=0)], Call(Name('MyVarInputBufferType', Load(), lineno=41, col_offset=13), [Str('char', lineno=41, col_offset=34), Str('long', lineno=41, col_offset=42), Str('l', lineno=41, col_offset=50)], [], None, None, lineno=41, col_offset=13), lineno=41, col_offset=0), Assign([Name('EventTime', Store(), lineno=43, col_offset=0)], Name('double', Load(), lineno=43, col_offset=12), lineno=43, col_offset=0), Assign([Name('EventTimeout', Store(), lineno=44, col_offset=0)], Name('EventTime', Load(), lineno=44, col_offset=15), lineno=44, col_offset=0), Assign([Name('EventTimerInterval', Store(), lineno=45, col_offset=0)], Name('EventTime', Load(), lineno=45, col_offset=21), lineno=45, col_offset=0), Assign([Name('EventAttributes', Store(), lineno=46, col_offset=0)], Name('UInt32', Load(), lineno=46, col_offset=18), lineno=46, col_offset=0), Assign([Name('EventParamName', Store(), lineno=47, col_offset=0)], Name('OSType', Load(), lineno=47, col_offset=17), lineno=47, col_offset=0), Assign([Name('EventParamType', Store(), lineno=48, col_offset=0)], Name('OSType', Load(), lineno=48, col_offset=17), lineno=48, col_offset=0), Assign([Name('EventPriority', Store(), lineno=49, col_offset=0)], Name('SInt16', Load(), lineno=49, col_offset=16), lineno=49, col_offset=0), Assign([Name('EventMask', Store(), lineno=50, col_offset=0)], Name('UInt16', Load(), lineno=50, col_offset=12), lineno=50, col_offset=0), Assign([Name('EventComparatorUPP', Store(), lineno=52, col_offset=0)], Call(Name('FakeType', Load(), lineno=52, col_offset=21), [Str('(EventComparatorUPP)0', lineno=52, col_offset=30)], [], None, None, lineno=52, col_offset=21), lineno=52, col_offset=0), Assign([Name('EventLoopTimerUPP', Store(), lineno=53, col_offset=0)], Call(Name('FakeType', Load(), lineno=53, col_offset=20), [Str('(EventLoopTimerUPP)0', lineno=53, col_offset=29)], [], None, None, lineno=53, col_offset=20), lineno=53, col_offset=0), Assign([Name('EventHandlerUPP', Store(), lineno=54, col_offset=0)], Call(Name('FakeType', Load(), lineno=54, col_offset=18), [Str('(EventHandlerUPP)0', lineno=54, col_offset=27)], [], None, None, lineno=54, col_offset=18), lineno=54, col_offset=0), Assign([Name('EventHandlerUPP', Store(), lineno=55, col_offset=0)], Call(Name('FakeType', Load(), lineno=55, col_offset=18), [Str('(EventHandlerUPP)0', lineno=55, col_offset=27)], [], None, None, lineno=55, col_offset=18), lineno=55, col_offset=0), Assign([Name('EventComparatorProcPtr', Store(), lineno=56, col_offset=0)], Call(Name('FakeType', Load(), lineno=56, col_offset=25), [Str('(EventComparatorProcPtr)0', lineno=56, col_offset=34)], [], None, None, lineno=56, col_offset=25), lineno=56, col_offset=0), Assign([Name('EventLoopTimerProcPtr', Store(), lineno=57, col_offset=0)], Call(Name('FakeType', Load(), lineno=57, col_offset=24), [Str('(EventLoopTimerProcPtr)0', lineno=57, col_offset=33)], [], None, None, lineno=57, col_offset=24), lineno=57, col_offset=0), Assign([Name('EventHandlerProcPtr', Store(), lineno=58, col_offset=0)], Call(Name('FakeType', Load(), lineno=58, col_offset=22), [Str('(EventHandlerProcPtr)0', lineno=58, col_offset=31)], [], None, None, lineno=58, col_offset=22), lineno=58, col_offset=0), Assign([Name('CarbonEventsFunction', Store(), lineno=60, col_offset=0)], Name('OSErrFunctionGenerator', Load(), lineno=60, col_offset=23), lineno=60, col_offset=0), Assign([Name('CarbonEventsMethod', Store(), lineno=61, col_offset=0)], Name('OSErrMethodGenerator', Load(), lineno=61, col_offset=21), lineno=61, col_offset=0), ClassDef('EventHandlerRefMethod', [Name('OSErrMethodGenerator', Load(), lineno=63, col_offset=28)], [FunctionDef('precheck', arguments([Name('self', Param(), lineno=64, col_offset=17)], None, None, []), [Expr(Call(Name('OutLbrace', Load(), lineno=65, col_offset=8), [Str('if (_self->ob_itself == NULL)', lineno=65, col_offset=18)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Name('Output', Load(), lineno=66, col_offset=8), [Str('PyErr_SetString(CarbonEvents_Error, "Handler has been removed");', lineno=66, col_offset=15)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Expr(Call(Name('Output', Load(), lineno=67, col_offset=8), [Str('return NULL;', lineno=67, col_offset=15)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=68, col_offset=8), [], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=64, col_offset=4)], [], lineno=63, col_offset=0), Assign([Name('RgnHandle', Store(), lineno=71, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=71, col_offset=12), [Str('RgnHandle', lineno=71, col_offset=30), Str('ResObj', lineno=71, col_offset=43)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=0), Assign([Name('GrafPtr', Store(), lineno=72, col_offset=0)], Call(Name('OpaqueByValueType', Load(), lineno=72, col_offset=10), [Str('GrafPtr', lineno=72, col_offset=28), Str('GrafObj', lineno=72, col_offset=39)], [], None, None, lineno=72, col_offset=10), lineno=72, col_offset=0), Assign([Name('MouseTrackingResult', Store(), lineno=73, col_offset=0)], Name('UInt16', Load(), lineno=73, col_offset=22), lineno=73, col_offset=0), Assign([Name('includestuff', Store(), lineno=76, col_offset=0)], BinOp(Name('includestuff', Load(), lineno=76, col_offset=15), Add(), Str('\n#include <Carbon/Carbon.h>\n\nextern int CFStringRef_New(CFStringRef *);\n\nextern int CFStringRef_Convert(PyObject *, CFStringRef *);\nextern int CFBundleRef_Convert(PyObject *, CFBundleRef *);\n\nint EventTargetRef_Convert(PyObject *, EventTargetRef *);\nPyObject *EventHandlerCallRef_New(EventHandlerCallRef itself);\nPyObject *EventRef_New(EventRef itself);\n\n/********** EventTypeSpec *******/\nstatic PyObject*\nEventTypeSpec_New(EventTypeSpec *in)\n{\n        return Py_BuildValue("ll", in->eventClass, in->eventKind);\n}\n\nstatic int\nEventTypeSpec_Convert(PyObject *v, EventTypeSpec *out)\n{\n        if (PyArg_Parse(v, "(O&l)",\n                        PyMac_GetOSType, &(out->eventClass),\n                        &(out->eventKind)))\n                return 1;\n        return NULL;\n}\n\n/********** end EventTypeSpec *******/\n\n/********** HIPoint *******/\n\n#if 0  /* XXX doesn\'t compile */\nstatic PyObject*\nHIPoint_New(HIPoint *in)\n{\n        return Py_BuildValue("ff", in->x, in->y);\n}\n\nstatic int\nHIPoint_Convert(PyObject *v, HIPoint *out)\n{\n        if (PyArg_ParseTuple(v, "ff", &(out->x), &(out->y)))\n                return 1;\n        return NULL;\n}\n#endif\n\n/********** end HIPoint *******/\n\n/********** EventHotKeyID *******/\n\nstatic PyObject*\nEventHotKeyID_New(EventHotKeyID *in)\n{\n        return Py_BuildValue("ll", in->signature, in->id);\n}\n\nstatic int\nEventHotKeyID_Convert(PyObject *v, EventHotKeyID *out)\n{\n        if (PyArg_ParseTuple(v, "ll", &out->signature, &out->id))\n                return 1;\n        return NULL;\n}\n\n/********** end EventHotKeyID *******/\n\n/******** myEventHandler ***********/\n\nstatic EventHandlerUPP myEventHandlerUPP;\n\nstatic pascal OSStatus\nmyEventHandler(EventHandlerCallRef handlerRef, EventRef event, void *outPyObject) {\n        PyObject *retValue;\n        int status;\n\n        retValue = PyObject_CallFunction((PyObject *)outPyObject, "O&O&",\n                                         EventHandlerCallRef_New, handlerRef,\n                                         EventRef_New, event);\n        if (retValue == NULL) {\n                PySys_WriteStderr("Error in event handler callback:\\n");\n                PyErr_Print();  /* this also clears the error */\n                status = noErr; /* complain? how? */\n        } else {\n                if (retValue == Py_None)\n                        status = noErr;\n                else if (PyInt_Check(retValue)) {\n                        status = PyInt_AsLong(retValue);\n                } else\n                        status = noErr; /* wrong object type, complain? */\n                Py_DECREF(retValue);\n        }\n\n        return status;\n}\n\n/******** end myEventHandler ***********/\n\n', lineno=176, col_offset=-1), lineno=76, col_offset=15), lineno=76, col_offset=0), Assign([Name('initstuff', Store(), lineno=178, col_offset=0)], BinOp(Name('initstuff', Load(), lineno=178, col_offset=12), Add(), Str('\nmyEventHandlerUPP = NewEventHandlerUPP(myEventHandler);\n', lineno=180, col_offset=-1), lineno=178, col_offset=12), lineno=178, col_offset=0), Assign([Name('module', Store(), lineno=181, col_offset=0)], Call(Name('MacModule', Load(), lineno=181, col_offset=9), [Str('_CarbonEvt', lineno=181, col_offset=19), Str('CarbonEvents', lineno=181, col_offset=33), Name('includestuff', Load(), lineno=181, col_offset=49), Name('finalstuff', Load(), lineno=181, col_offset=63), Name('initstuff', Load(), lineno=181, col_offset=75)], [], None, None, lineno=181, col_offset=9), lineno=181, col_offset=0), ClassDef('EventHandlerRefObjectDefinition', [Name('PEP253Mixin', Load(), lineno=186, col_offset=38), Name('GlobalObjectDefinition', Load(), lineno=186, col_offset=51)], [FunctionDef('outputStructMembers', arguments([Name('self', Param(), lineno=187, col_offset=28)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=188, col_offset=8), [Str('%s ob_itself;', lineno=188, col_offset=15), Attribute(Name('self', Load(), lineno=188, col_offset=32), 'itselftype', Load(), lineno=188, col_offset=32)], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8), Expr(Call(Name('Output', Load(), lineno=189, col_offset=8), [Str('PyObject *ob_callback;', lineno=189, col_offset=15)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], [], lineno=187, col_offset=4), FunctionDef('outputInitStructMembers', arguments([Name('self', Param(), lineno=190, col_offset=32)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=191, col_offset=8), [Str('it->ob_itself = %sitself;', lineno=191, col_offset=15), Attribute(Name('self', Load(), lineno=191, col_offset=44), 'argref', Load(), lineno=191, col_offset=44)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Expr(Call(Name('Output', Load(), lineno=192, col_offset=8), [Str('it->ob_callback = NULL;', lineno=192, col_offset=15)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8)], [], lineno=190, col_offset=4), FunctionDef('outputFreeIt', arguments([Name('self', Param(), lineno=193, col_offset=21), Name('name', Param(), lineno=193, col_offset=27)], None, None, []), [Expr(Call(Name('OutLbrace', Load(), lineno=194, col_offset=8), [Str('if (self->ob_itself != NULL)', lineno=194, col_offset=18)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8), Expr(Call(Name('Output', Load(), lineno=195, col_offset=8), [Str('RemoveEventHandler(self->ob_itself);', lineno=195, col_offset=15)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Name('Output', Load(), lineno=196, col_offset=8), [Str('Py_DECREF(self->ob_callback);', lineno=196, col_offset=15)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=197, col_offset=8), [], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=186, col_offset=0), ClassDef('MyGlobalObjectDefinition', [Name('PEP253Mixin', Load(), lineno=199, col_offset=31), Name('GlobalObjectDefinition', Load(), lineno=199, col_offset=44)], [Pass( lineno=200, col_offset=4)], [], lineno=199, col_offset=0), For(Name('typ', Store(), lineno=202, col_offset=4), Name('RefObjectTypes', Load(), lineno=202, col_offset=11), [If(Compare(Name('typ', Load(), lineno=203, col_offset=7), [Eq()], [Str('EventHandlerRef', lineno=203, col_offset=14)], lineno=203, col_offset=7), [Assign([Name('EventHandlerRefobject', Store(), lineno=204, col_offset=8)], Call(Name('EventHandlerRefObjectDefinition', Load(), lineno=204, col_offset=32), [Str('EventHandlerRef', lineno=204, col_offset=64)], [], None, None, lineno=204, col_offset=32), lineno=204, col_offset=8)], [Assign([Name('execstr', Store(), lineno=206, col_offset=8)], BinOp(Name('typ', Load(), lineno=206, col_offset=18), Add(), Str('object = MyGlobalObjectDefinition(typ)', lineno=206, col_offset=24), lineno=206, col_offset=18), lineno=206, col_offset=8), Exec(Name('execstr', Load(), lineno=207, col_offset=13), None, None, lineno=207, col_offset=8)], lineno=203, col_offset=4), Expr(Call(Attribute(Name('module', Load(), lineno=208, col_offset=4), 'addobject', Load(), lineno=208, col_offset=4), [Call(Name('eval', Load(), lineno=208, col_offset=21), [BinOp(Name('typ', Load(), lineno=208, col_offset=26), Add(), Str('object', lineno=208, col_offset=32), lineno=208, col_offset=26)], [], None, None, lineno=208, col_offset=21)], [], None, None, lineno=208, col_offset=4), lineno=208, col_offset=4)], [], lineno=202, col_offset=0), Assign([Name('functions', Store(), lineno=211, col_offset=0)], List([], Load(), lineno=211, col_offset=12), lineno=211, col_offset=0), For(Name('typ', Store(), lineno=212, col_offset=4), Name('RefObjectTypes', Load(), lineno=212, col_offset=11), [Assign([Name('execstr', Store(), lineno=214, col_offset=4)], BinOp(Name('typ', Load(), lineno=214, col_offset=14), Add(), Str('methods = []', lineno=214, col_offset=20), lineno=214, col_offset=14), lineno=214, col_offset=4), Exec(Name('execstr', Load(), lineno=215, col_offset=9), None, None, lineno=215, col_offset=4)], [], lineno=212, col_offset=0), Expr(Call(Name('execfile', Load(), lineno=217, col_offset=0), [Str('CarbonEventsgen.py', lineno=217, col_offset=9)], [], None, None, lineno=217, col_offset=0), lineno=217, col_offset=0), For(Name('f', Store(), lineno=221, col_offset=4), Name('functions', Load(), lineno=221, col_offset=9), [Expr(Call(Attribute(Name('module', Load(), lineno=221, col_offset=20), 'add', Load(), lineno=221, col_offset=20), [Name('f', Load(), lineno=221, col_offset=31)], [], None, None, lineno=221, col_offset=20), lineno=221, col_offset=20)], [], lineno=221, col_offset=0), For(Name('typ', Store(), lineno=223, col_offset=4), Name('RefObjectTypes', Load(), lineno=223, col_offset=11), [Assign([Name('methods', Store(), lineno=224, col_offset=4)], Call(Name('eval', Load(), lineno=224, col_offset=14), [BinOp(Name('typ', Load(), lineno=224, col_offset=19), Add(), Str('methods', lineno=224, col_offset=25), lineno=224, col_offset=19)], [], None, None, lineno=224, col_offset=14), lineno=224, col_offset=4), Assign([Name('obj', Store(), lineno=225, col_offset=4)], Call(Name('eval', Load(), lineno=225, col_offset=10), [BinOp(Name('typ', Load(), lineno=225, col_offset=15), Add(), Str('object', lineno=225, col_offset=21), lineno=225, col_offset=15)], [], None, None, lineno=225, col_offset=10), lineno=225, col_offset=4), For(Name('m', Store(), lineno=226, col_offset=8), Name('methods', Load(), lineno=226, col_offset=13), [Expr(Call(Attribute(Name('obj', Load(), lineno=226, col_offset=22), 'add', Load(), lineno=226, col_offset=22), [Name('m', Load(), lineno=226, col_offset=30)], [], None, None, lineno=226, col_offset=22), lineno=226, col_offset=22)], [], lineno=226, col_offset=4)], [], lineno=223, col_offset=0), Assign([Name('removeeventhandler', Store(), lineno=229, col_offset=0)], Str('\nOSStatus _err;\nif (_self->ob_itself == NULL) {\n        PyErr_SetString(CarbonEvents_Error, "Handler has been removed");\n        return NULL;\n}\nif (!PyArg_ParseTuple(_args, ""))\n        return NULL;\n_err = RemoveEventHandler(_self->ob_itself);\nif (_err != noErr) return PyMac_Error(_err);\n_self->ob_itself = NULL;\nPy_DECREF(_self->ob_callback);\n_self->ob_callback = NULL;\nPy_INCREF(Py_None);\n_res = Py_None;\nreturn _res;', lineno=244, col_offset=-1), lineno=229, col_offset=0), Assign([Name('f', Store(), lineno=246, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=246, col_offset=4), [Str('RemoveEventHandler', lineno=246, col_offset=20), Name('removeeventhandler', Load(), lineno=246, col_offset=42)], [], None, None, lineno=246, col_offset=4), lineno=246, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=247, col_offset=0), 'docstring', Store(), lineno=247, col_offset=0)], Lambda(arguments([], None, None, []), Str('() -> None', lineno=247, col_offset=22), lineno=247, col_offset=14), lineno=247, col_offset=0), Expr(Call(Attribute(Name('EventHandlerRefobject', Load(), lineno=248, col_offset=0), 'add', Load(), lineno=248, col_offset=0), [Name('f', Load(), lineno=248, col_offset=26)], [], None, None, lineno=248, col_offset=0), lineno=248, col_offset=0), Assign([Name('installeventhandler', Store(), lineno=251, col_offset=0)], Str('\nEventTypeSpec inSpec;\nPyObject *callback;\nEventHandlerRef outRef;\nOSStatus _err;\n\nif (!PyArg_ParseTuple(_args, "O&O", EventTypeSpec_Convert, &inSpec, &callback))\n        return NULL;\n\n_err = InstallEventHandler(_self->ob_itself, myEventHandlerUPP, 1, &inSpec, (void *)callback, &outRef);\nif (_err != noErr) return PyMac_Error(_err);\n\n_res = EventHandlerRef_New(outRef);\nif (_res != NULL) {\n        ((EventHandlerRefObject*)_res)->ob_callback = callback;\n        Py_INCREF(callback);\n}\nreturn _res;', lineno=268, col_offset=-1), lineno=251, col_offset=0), Assign([Name('f', Store(), lineno=270, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=270, col_offset=4), [Str('InstallEventHandler', lineno=270, col_offset=20), Name('installeventhandler', Load(), lineno=270, col_offset=43)], [], None, None, lineno=270, col_offset=4), lineno=270, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=271, col_offset=0), 'docstring', Store(), lineno=271, col_offset=0)], Lambda(arguments([], None, None, []), Str('(EventTypeSpec inSpec, Method callback) -> (EventHandlerRef outRef)', lineno=271, col_offset=22), lineno=271, col_offset=14), lineno=271, col_offset=0), Expr(Call(Attribute(Name('EventTargetRefobject', Load(), lineno=272, col_offset=0), 'add', Load(), lineno=272, col_offset=0), [Name('f', Load(), lineno=272, col_offset=25)], [], None, None, lineno=272, col_offset=0), lineno=272, col_offset=0), Assign([Name('geteventparameter', Store(), lineno=276, col_offset=0)], Str('\nUInt32 bufferSize;\nEventParamName inName;\nEventParamType inType;\nOSErr _err;\nvoid * buffer;\n\nif (!PyArg_ParseTuple(_args, "O&O&", PyMac_GetOSType, &inName, PyMac_GetOSType, &inType))\n      return NULL;\n\n/* Figure out the size by passing a null buffer to GetEventParameter */\n_err = GetEventParameter(_self->ob_itself, inName, inType, NULL, 0, &bufferSize, NULL);\n\nif (_err != noErr)\n      return PyMac_Error(_err);\nbuffer = PyMem_NEW(char, bufferSize);\nif (buffer == NULL)\n      return PyErr_NoMemory();\n\n_err = GetEventParameter(_self->ob_itself, inName, inType, NULL, bufferSize, NULL, buffer);\n\nif (_err != noErr) {\n      PyMem_DEL(buffer);\n      return PyMac_Error(_err);\n}\n_res = Py_BuildValue("s#", buffer, bufferSize);\nPyMem_DEL(buffer);\nreturn _res;\n', lineno=304, col_offset=-1), lineno=276, col_offset=0), Assign([Name('f', Store(), lineno=306, col_offset=0)], Call(Name('ManualGenerator', Load(), lineno=306, col_offset=4), [Str('GetEventParameter', lineno=306, col_offset=20), Name('geteventparameter', Load(), lineno=306, col_offset=41)], [], None, None, lineno=306, col_offset=4), lineno=306, col_offset=0), Assign([Attribute(Name('f', Load(), lineno=307, col_offset=0), 'docstring', Store(), lineno=307, col_offset=0)], Lambda(arguments([], None, None, []), Str('(EventParamName eventName, EventParamType eventType) -> (String eventParamData)', lineno=307, col_offset=22), lineno=307, col_offset=14), lineno=307, col_offset=0), Expr(Call(Attribute(Name('EventRefobject', Load(), lineno=308, col_offset=0), 'add', Load(), lineno=308, col_offset=0), [Name('f', Load(), lineno=308, col_offset=19)], [], None, None, lineno=308, col_offset=0), lineno=308, col_offset=0), Expr(Call(Name('SetOutputFileName', Load(), lineno=310, col_offset=0), [Str('_CarbonEvtmodule.c', lineno=310, col_offset=18)], [], None, None, lineno=310, col_offset=0), lineno=310, col_offset=0), Expr(Call(Attribute(Name('module', Load(), lineno=311, col_offset=0), 'generate', Load(), lineno=311, col_offset=0), [], [], None, None, lineno=311, col_offset=0), lineno=311, col_offset=0)])
