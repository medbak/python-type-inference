Module([Expr(Str("Fixer that changes filter(F, X) into list(filter(F, X)).\n\nWe avoid the transformation if the filter() call is directly contained\nin iter(<>), list(<>), tuple(<>), sorted(<>), ...join(<>), or\nfor V in <>:.\n\nNOTE: This is still not correct if the original code was depending on\nfilter(F, X) to return a string if X is a string and a tuple if X is a\ntuple.  That would require type inference, which we don't do.  Let\nPython 2.6 figure it out.\n", lineno=14, col_offset=-1), lineno=14, col_offset=-1), ImportFrom('pgen2', [alias('token', None)], 2, lineno=17, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=18, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('Call', None), alias('ListComp', None), alias('in_special_context', None)], 2, lineno=19, col_offset=0), ClassDef('FixFilter', [Attribute(Name('fixer_base', Load(), lineno=21, col_offset=16), 'ConditionalFix', Load(), lineno=21, col_offset=16)], [Assign([Name('BM_compatible', Store(), lineno=22, col_offset=4)], Name('True', Load(), lineno=22, col_offset=20), lineno=22, col_offset=4), Assign([Name('PATTERN', Store(), lineno=24, col_offset=4)], Str("\n    filter_lambda=power<\n        'filter'\n        trailer<\n            '('\n            arglist<\n                lambdef< 'lambda'\n                         (fp=NAME | vfpdef< '(' fp=NAME ')'> ) ':' xp=any\n                >\n                ','\n                it=any\n            >\n            ')'\n        >\n    >\n    |\n    power<\n        'filter'\n        trailer< '(' arglist< none='None' ',' seq=any > ')' >\n    >\n    |\n    power<\n        'filter'\n        args=trailer< '(' [any] ')' >\n    >\n    ", lineno=49, col_offset=-1), lineno=24, col_offset=4), Assign([Name('skip_on', Store(), lineno=51, col_offset=4)], Str('future_builtins.filter', lineno=51, col_offset=14), lineno=51, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=53, col_offset=18), Name('node', Param(), lineno=53, col_offset=24), Name('results', Param(), lineno=53, col_offset=30)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=54, col_offset=11), 'should_skip', Load(), lineno=54, col_offset=11), [Name('node', Load(), lineno=54, col_offset=28)], [], None, None, lineno=54, col_offset=11), [Return(None, lineno=55, col_offset=12)], [], lineno=54, col_offset=8), If(Compare(Str('filter_lambda', lineno=57, col_offset=11), [In()], [Name('results', Load(), lineno=57, col_offset=30)], lineno=57, col_offset=11), [Assign([Name('new', Store(), lineno=58, col_offset=12)], Call(Name('ListComp', Load(), lineno=58, col_offset=18), [Call(Attribute(Call(Attribute(Name('results', Load(), lineno=58, col_offset=27), 'get', Load(), lineno=58, col_offset=27), [Str('fp', lineno=58, col_offset=39)], [], None, None, lineno=58, col_offset=27), 'clone', Load(), lineno=58, col_offset=27), [], [], None, None, lineno=58, col_offset=27), Call(Attribute(Call(Attribute(Name('results', Load(), lineno=59, col_offset=27), 'get', Load(), lineno=59, col_offset=27), [Str('fp', lineno=59, col_offset=39)], [], None, None, lineno=59, col_offset=27), 'clone', Load(), lineno=59, col_offset=27), [], [], None, None, lineno=59, col_offset=27), Call(Attribute(Call(Attribute(Name('results', Load(), lineno=60, col_offset=27), 'get', Load(), lineno=60, col_offset=27), [Str('it', lineno=60, col_offset=39)], [], None, None, lineno=60, col_offset=27), 'clone', Load(), lineno=60, col_offset=27), [], [], None, None, lineno=60, col_offset=27), Call(Attribute(Call(Attribute(Name('results', Load(), lineno=61, col_offset=27), 'get', Load(), lineno=61, col_offset=27), [Str('xp', lineno=61, col_offset=39)], [], None, None, lineno=61, col_offset=27), 'clone', Load(), lineno=61, col_offset=27), [], [], None, None, lineno=61, col_offset=27)], [], None, None, lineno=58, col_offset=18), lineno=58, col_offset=12)], [If(Compare(Str('none', lineno=63, col_offset=13), [In()], [Name('results', Load(), lineno=63, col_offset=23)], lineno=63, col_offset=13), [Assign([Name('new', Store(), lineno=64, col_offset=12)], Call(Name('ListComp', Load(), lineno=64, col_offset=18), [Call(Name('Name', Load(), lineno=64, col_offset=27), [Str(u'_f', lineno=64, col_offset=32)], [], None, None, lineno=64, col_offset=27), Call(Name('Name', Load(), lineno=65, col_offset=27), [Str(u'_f', lineno=65, col_offset=32)], [], None, None, lineno=65, col_offset=27), Call(Attribute(Subscript(Name('results', Load(), lineno=66, col_offset=27), Index(Str('seq', lineno=66, col_offset=35)), Load(), lineno=66, col_offset=27), 'clone', Load(), lineno=66, col_offset=27), [], [], None, None, lineno=66, col_offset=27), Call(Name('Name', Load(), lineno=67, col_offset=27), [Str(u'_f', lineno=67, col_offset=32)], [], None, None, lineno=67, col_offset=27)], [], None, None, lineno=64, col_offset=18), lineno=64, col_offset=12)], [If(Call(Name('in_special_context', Load(), lineno=70, col_offset=15), [Name('node', Load(), lineno=70, col_offset=34)], [], None, None, lineno=70, col_offset=15), [Return(Name('None', Load(), lineno=71, col_offset=23), lineno=71, col_offset=16)], [], lineno=70, col_offset=12), Assign([Name('new', Store(), lineno=72, col_offset=12)], Call(Attribute(Name('node', Load(), lineno=72, col_offset=18), 'clone', Load(), lineno=72, col_offset=18), [], [], None, None, lineno=72, col_offset=18), lineno=72, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=73, col_offset=12), 'prefix', Store(), lineno=73, col_offset=12)], Str(u'', lineno=73, col_offset=25), lineno=73, col_offset=12), Assign([Name('new', Store(), lineno=74, col_offset=12)], Call(Name('Call', Load(), lineno=74, col_offset=18), [Call(Name('Name', Load(), lineno=74, col_offset=23), [Str(u'list', lineno=74, col_offset=28)], [], None, None, lineno=74, col_offset=23), List([Name('new', Load(), lineno=74, col_offset=39)], Load(), lineno=74, col_offset=38)], [], None, None, lineno=74, col_offset=18), lineno=74, col_offset=12)], lineno=63, col_offset=13)], lineno=57, col_offset=8), Assign([Attribute(Name('new', Load(), lineno=75, col_offset=8), 'prefix', Store(), lineno=75, col_offset=8)], Attribute(Name('node', Load(), lineno=75, col_offset=21), 'prefix', Load(), lineno=75, col_offset=21), lineno=75, col_offset=8), Return(Name('new', Load(), lineno=76, col_offset=15), lineno=76, col_offset=8)], [], lineno=53, col_offset=4)], [], lineno=21, col_offset=0)])
