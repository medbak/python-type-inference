Module([Assign([Name('doctests', Store(), lineno=1, col_offset=0)], Str("\n########### Tests mostly copied from test_listcomps.py ############\n\nTest simple loop with conditional\n\n    >>> sum({i*i for i in range(100) if i&1 == 1})\n    166650\n\nTest simple case\n\n    >>> {2*y + x + 1 for x in (0,) for y in (1,)}\n    set([3])\n\nTest simple nesting\n\n    >>> list(sorted({(i,j) for i in range(3) for j in range(4)}))\n    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\n\nTest nesting with the inner expression dependent on the outer\n\n    >>> list(sorted({(i,j) for i in range(4) for j in range(i)}))\n    [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]\n\nMake sure the induction variable is not exposed\n\n    >>> i = 20\n    >>> sum({i*i for i in range(100)})\n    328350\n\n    >>> i\n    20\n\nVerify that syntax error's are raised for setcomps used as lvalues\n\n    >>> {y for y in (1,2)} = 10          # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n       ...\n    SyntaxError: ...\n\n    >>> {y for y in (1,2)} += 10         # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n       ...\n    SyntaxError: ...\n\n\nMake a nested set comprehension that acts like set(range())\n\n    >>> def srange(n):\n    ...     return {i for i in range(n)}\n    >>> list(sorted(srange(10)))\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nSame again, only as a lambda expression instead of a function definition\n\n    >>> lrange = lambda n:  {i for i in range(n)}\n    >>> list(sorted(lrange(10)))\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nGenerators can call other generators:\n\n    >>> def grange(n):\n    ...     for x in {i for i in range(n)}:\n    ...         yield x\n    >>> list(sorted(grange(5)))\n    [0, 1, 2, 3, 4]\n\n\nMake sure that None is a valid return value\n\n    >>> {None for i in range(10)}\n    set([None])\n\n########### Tests for various scoping corner cases ############\n\nReturn lambdas that use the iteration variable as a default argument\n\n    >>> items = {(lambda i=i: i) for i in range(5)}\n    >>> {x() for x in items} == set(range(5))\n    True\n\nSame again, only this time as a closure variable\n\n    >>> items = {(lambda: i) for i in range(5)}\n    >>> {x() for x in items}\n    set([4])\n\nAnother way to test that the iteration variable is local to the list comp\n\n    >>> items = {(lambda: i) for i in range(5)}\n    >>> i = 20\n    >>> {x() for x in items}\n    set([4])\n\nAnd confirm that a closure can jump over the list comp scope\n\n    >>> items = {(lambda: y) for i in range(5)}\n    >>> y = 2\n    >>> {x() for x in items}\n    set([2])\n\nWe also repeat each of the above scoping tests inside a function\n\n    >>> def test_func():\n    ...     items = {(lambda i=i: i) for i in range(5)}\n    ...     return {x() for x in items}\n    >>> test_func() == set(range(5))\n    True\n\n    >>> def test_func():\n    ...     items = {(lambda: i) for i in range(5)}\n    ...     return {x() for x in items}\n    >>> test_func()\n    set([4])\n\n    >>> def test_func():\n    ...     items = {(lambda: i) for i in range(5)}\n    ...     i = 20\n    ...     return {x() for x in items}\n    >>> test_func()\n    set([4])\n\n    >>> def test_func():\n    ...     items = {(lambda: y) for i in range(5)}\n    ...     y = 2\n    ...     return {x() for x in items}\n    >>> test_func()\n    set([2])\n\n", lineno=129, col_offset=-1), lineno=1, col_offset=0), Assign([Name('__test__', Store(), lineno=132, col_offset=0)], Dict([Str('doctests', lineno=132, col_offset=12)], [Name('doctests', Load(), lineno=132, col_offset=25)], lineno=132, col_offset=11), lineno=132, col_offset=0), FunctionDef('test_main', arguments([Name('verbose', Param(), lineno=134, col_offset=14)], None, None, [Name('None', Load(), lineno=134, col_offset=22)]), [Import([alias('sys', None)], lineno=135, col_offset=4), ImportFrom('test', [alias('test_support', None)], 0, lineno=136, col_offset=4), ImportFrom('test', [alias('test_setcomps', None)], 0, lineno=137, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=138, col_offset=4), 'run_doctest', Load(), lineno=138, col_offset=4), [Name('test_setcomps', Load(), lineno=138, col_offset=29), Name('verbose', Load(), lineno=138, col_offset=44)], [], None, None, lineno=138, col_offset=4), lineno=138, col_offset=4), If(BoolOp(And(), [Name('verbose', Load(), lineno=141, col_offset=7), Call(Name('hasattr', Load(), lineno=141, col_offset=19), [Name('sys', Load(), lineno=141, col_offset=27), Str('gettotalrefcount', lineno=141, col_offset=32)], [], None, None, lineno=141, col_offset=19)], lineno=141, col_offset=7), [Import([alias('gc', None)], lineno=142, col_offset=8), Assign([Name('counts', Store(), lineno=143, col_offset=8)], BinOp(List([Name('None', Load(), lineno=143, col_offset=18)], Load(), lineno=143, col_offset=17), Mult(), Num(5, lineno=143, col_offset=26), lineno=143, col_offset=17), lineno=143, col_offset=8), For(Name('i', Store(), lineno=144, col_offset=12), Call(Name('range', Load(), lineno=144, col_offset=17), [Call(Name('len', Load(), lineno=144, col_offset=23), [Name('counts', Load(), lineno=144, col_offset=27)], [], None, None, lineno=144, col_offset=23)], [], None, None, lineno=144, col_offset=17), [Expr(Call(Attribute(Name('test_support', Load(), lineno=145, col_offset=12), 'run_doctest', Load(), lineno=145, col_offset=12), [Name('test_setcomps', Load(), lineno=145, col_offset=37), Name('verbose', Load(), lineno=145, col_offset=52)], [], None, None, lineno=145, col_offset=12), lineno=145, col_offset=12), Expr(Call(Attribute(Name('gc', Load(), lineno=146, col_offset=12), 'collect', Load(), lineno=146, col_offset=12), [], [], None, None, lineno=146, col_offset=12), lineno=146, col_offset=12), Assign([Subscript(Name('counts', Load(), lineno=147, col_offset=12), Index(Name('i', Load(), lineno=147, col_offset=19)), Store(), lineno=147, col_offset=12)], Call(Attribute(Name('sys', Load(), lineno=147, col_offset=24), 'gettotalrefcount', Load(), lineno=147, col_offset=24), [], [], None, None, lineno=147, col_offset=24), lineno=147, col_offset=12)], [], lineno=144, col_offset=8), Print(None, [Name('counts', Load(), lineno=148, col_offset=14)], True, lineno=148, col_offset=8)], [], lineno=141, col_offset=4)], [], lineno=134, col_offset=0), If(Compare(Name('__name__', Load(), lineno=150, col_offset=3), [Eq()], [Str('__main__', lineno=150, col_offset=15)], lineno=150, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=151, col_offset=4), [], [keyword('verbose', Name('True', Load(), lineno=151, col_offset=22))], None, None, lineno=151, col_offset=4), lineno=151, col_offset=4)], [], lineno=150, col_offset=0)])
