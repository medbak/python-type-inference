Module([Import([alias('os', None)], lineno=1, col_offset=0), Import([alias('sys', None)], lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Expr(Str('\nOk.. the code to find the filename for __getattr__ should look\nsomething like:\n\nimport os\nfrom macholib.dyld import dyld_find\n\ndef find_lib(name):\n     possible = [\'lib\'+name+\'.dylib\', name+\'.dylib\',\n     name+\'.framework/\'+name]\n     for dylib in possible:\n         try:\n             return os.path.realpath(dyld_find(dylib))\n         except ValueError:\n             pass\n     raise ValueError, "%s not found" % (name,)\n\nIt\'ll have output like this:\n\n >>> find_lib(\'pthread\')\n\'/usr/lib/libSystem.B.dylib\'\n >>> find_lib(\'z\')\n\'/usr/lib/libz.1.dylib\'\n >>> find_lib(\'IOKit\')\n\'/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\'\n\n-bob\n\n', lineno=34, col_offset=-1), lineno=34, col_offset=-1), ImportFrom('ctypes.macholib.dyld', [alias('dyld_find', None)], 0, lineno=36, col_offset=0), FunctionDef('find_lib', arguments([Name('name', Param(), lineno=38, col_offset=13)], None, None, []), [Assign([Name('possible', Store(), lineno=39, col_offset=4)], List([BinOp(BinOp(Str('lib', lineno=39, col_offset=16), Add(), Name('name', Load(), lineno=39, col_offset=22), lineno=39, col_offset=16), Add(), Str('.dylib', lineno=39, col_offset=27), lineno=39, col_offset=26), BinOp(Name('name', Load(), lineno=39, col_offset=37), Add(), Str('.dylib', lineno=39, col_offset=42), lineno=39, col_offset=37), BinOp(BinOp(Name('name', Load(), lineno=39, col_offset=52), Add(), Str('.framework/', lineno=39, col_offset=57), lineno=39, col_offset=52), Add(), Name('name', Load(), lineno=39, col_offset=71), lineno=39, col_offset=70)], Load(), lineno=39, col_offset=15), lineno=39, col_offset=4), For(Name('dylib', Store(), lineno=40, col_offset=8), Name('possible', Load(), lineno=40, col_offset=17), [TryExcept([Return(Call(Attribute(Attribute(Name('os', Load(), lineno=42, col_offset=19), 'path', Load(), lineno=42, col_offset=19), 'realpath', Load(), lineno=42, col_offset=19), [Call(Name('dyld_find', Load(), lineno=42, col_offset=36), [Name('dylib', Load(), lineno=42, col_offset=46)], [], None, None, lineno=42, col_offset=36)], [], None, None, lineno=42, col_offset=19), lineno=42, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=43, col_offset=15), None, [Pass( lineno=44, col_offset=12)], lineno=43, col_offset=8)], [], lineno=41, col_offset=8)], [], lineno=40, col_offset=4), Raise(Call(Name('ValueError', Load(), lineno=45, col_offset=10), [BinOp(Str('%s not found', lineno=45, col_offset=21), Mod(), Tuple([Name('name', Load(), lineno=45, col_offset=39)], Load(), lineno=45, col_offset=39), lineno=45, col_offset=21)], [], None, None, lineno=45, col_offset=10), None, None, lineno=45, col_offset=4)], [], lineno=38, col_offset=0), ClassDef('MachOTest', [Attribute(Name('unittest', Load(), lineno=47, col_offset=16), 'TestCase', Load(), lineno=47, col_offset=16)], [If(Compare(Attribute(Name('sys', Load(), lineno=48, col_offset=7), 'platform', Load(), lineno=48, col_offset=7), [Eq()], [Str('darwin', lineno=48, col_offset=23)], lineno=48, col_offset=7), [FunctionDef('test_find', arguments([Name('self', Param(), lineno=49, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=51, col_offset=12), 'assertEqual', Load(), lineno=51, col_offset=12), [Call(Name('find_lib', Load(), lineno=51, col_offset=29), [Str('pthread', lineno=51, col_offset=38)], [], None, None, lineno=51, col_offset=29), Str('/usr/lib/libSystem.B.dylib', lineno=52, col_offset=33)], [], None, None, lineno=51, col_offset=12), lineno=51, col_offset=12), Assign([Name('result', Store(), lineno=54, col_offset=12)], Call(Name('find_lib', Load(), lineno=54, col_offset=21), [Str('z', lineno=54, col_offset=30)], [], None, None, lineno=54, col_offset=21), lineno=54, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=55, col_offset=12), 'assertTrue', Load(), lineno=55, col_offset=12), [Call(Attribute(Name('result', Load(), lineno=55, col_offset=28), 'startswith', Load(), lineno=55, col_offset=28), [Str('/usr/lib/libz.1', lineno=55, col_offset=46)], [], None, None, lineno=55, col_offset=28)], [], None, None, lineno=55, col_offset=12), lineno=55, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=12), 'assertTrue', Load(), lineno=56, col_offset=12), [Call(Attribute(Name('result', Load(), lineno=56, col_offset=28), 'endswith', Load(), lineno=56, col_offset=28), [Str('.dylib', lineno=56, col_offset=44)], [], None, None, lineno=56, col_offset=28)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=12), 'assertEqual', Load(), lineno=58, col_offset=12), [Call(Name('find_lib', Load(), lineno=58, col_offset=29), [Str('IOKit', lineno=58, col_offset=38)], [], None, None, lineno=58, col_offset=29), Str('/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit', lineno=59, col_offset=33)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], [], lineno=49, col_offset=8)], [], lineno=48, col_offset=4)], [], lineno=47, col_offset=0), If(Compare(Name('__name__', Load(), lineno=61, col_offset=3), [Eq()], [Str('__main__', lineno=61, col_offset=15)], lineno=61, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=62, col_offset=4), 'main', Load(), lineno=62, col_offset=4), [], [], None, None, lineno=62, col_offset=4), lineno=62, col_offset=4)], [], lineno=61, col_offset=0)])
