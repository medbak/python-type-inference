Module([Expr(Str("distutils.command.clean\n\nImplements the Distutils 'clean' command.", lineno=3, col_offset=-1), lineno=3, col_offset=-1), Assign([Name('__revision__', Store(), lineno=7, col_offset=0)], Str('$Id: clean.py 70886 2009-03-31 20:50:59Z tarek.ziade $', lineno=7, col_offset=15), lineno=7, col_offset=0), Import([alias('os', None)], lineno=9, col_offset=0), ImportFrom('distutils.core', [alias('Command', None)], 0, lineno=10, col_offset=0), ImportFrom('distutils.dir_util', [alias('remove_tree', None)], 0, lineno=11, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=12, col_offset=0), ClassDef('clean', [Name('Command', Load(), lineno=14, col_offset=12)], [Assign([Name('description', Store(), lineno=16, col_offset=4)], Str("clean up temporary files from 'build' command", lineno=16, col_offset=18), lineno=16, col_offset=4), Assign([Name('user_options', Store(), lineno=17, col_offset=4)], List([Tuple([Str('build-base=', lineno=18, col_offset=9), Str('b', lineno=18, col_offset=24), Str("base build directory (default: 'build.build-base')", lineno=19, col_offset=9)], Load(), lineno=18, col_offset=9), Tuple([Str('build-lib=', lineno=20, col_offset=9), Name('None', Load(), lineno=20, col_offset=23), Str("build directory for all modules (default: 'build.build-lib')", lineno=21, col_offset=9)], Load(), lineno=20, col_offset=9), Tuple([Str('build-temp=', lineno=22, col_offset=9), Str('t', lineno=22, col_offset=24), Str("temporary build directory (default: 'build.build-temp')", lineno=23, col_offset=9)], Load(), lineno=22, col_offset=9), Tuple([Str('build-scripts=', lineno=24, col_offset=9), Name('None', Load(), lineno=24, col_offset=27), Str("build directory for scripts (default: 'build.build-scripts')", lineno=25, col_offset=9)], Load(), lineno=24, col_offset=9), Tuple([Str('bdist-base=', lineno=26, col_offset=9), Name('None', Load(), lineno=26, col_offset=24), Str('temporary directory for built distributions', lineno=27, col_offset=9)], Load(), lineno=26, col_offset=9), Tuple([Str('all', lineno=28, col_offset=9), Str('a', lineno=28, col_offset=16), Str('remove all build output, not just temporary by-products', lineno=29, col_offset=9)], Load(), lineno=28, col_offset=9)], Load(), lineno=17, col_offset=19), lineno=17, col_offset=4), Assign([Name('boolean_options', Store(), lineno=32, col_offset=4)], List([Str('all', lineno=32, col_offset=23)], Load(), lineno=32, col_offset=22), lineno=32, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=34, col_offset=27)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'build_base', Store(), lineno=35, col_offset=8)], Name('None', Load(), lineno=35, col_offset=26), lineno=35, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=36, col_offset=8), 'build_lib', Store(), lineno=36, col_offset=8)], Name('None', Load(), lineno=36, col_offset=25), lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=37, col_offset=8), 'build_temp', Store(), lineno=37, col_offset=8)], Name('None', Load(), lineno=37, col_offset=26), lineno=37, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=38, col_offset=8), 'build_scripts', Store(), lineno=38, col_offset=8)], Name('None', Load(), lineno=38, col_offset=29), lineno=38, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=39, col_offset=8), 'bdist_base', Store(), lineno=39, col_offset=8)], Name('None', Load(), lineno=39, col_offset=26), lineno=39, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=40, col_offset=8), 'all', Store(), lineno=40, col_offset=8)], Name('None', Load(), lineno=40, col_offset=19), lineno=40, col_offset=8)], [], lineno=34, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=42, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=8), 'set_undefined_options', Load(), lineno=43, col_offset=8), [Str('build', lineno=43, col_offset=35), Tuple([Str('build_base', lineno=44, col_offset=36), Str('build_base', lineno=44, col_offset=50)], Load(), lineno=44, col_offset=36), Tuple([Str('build_lib', lineno=45, col_offset=36), Str('build_lib', lineno=45, col_offset=49)], Load(), lineno=45, col_offset=36), Tuple([Str('build_scripts', lineno=46, col_offset=36), Str('build_scripts', lineno=46, col_offset=53)], Load(), lineno=46, col_offset=36), Tuple([Str('build_temp', lineno=47, col_offset=36), Str('build_temp', lineno=47, col_offset=50)], Load(), lineno=47, col_offset=36)], [], None, None, lineno=43, col_offset=8), lineno=43, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'set_undefined_options', Load(), lineno=48, col_offset=8), [Str('bdist', lineno=48, col_offset=35), Tuple([Str('bdist_base', lineno=49, col_offset=36), Str('bdist_base', lineno=49, col_offset=50)], Load(), lineno=49, col_offset=36)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=51, col_offset=12)], None, None, []), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=54, col_offset=11), 'path', Load(), lineno=54, col_offset=11), 'exists', Load(), lineno=54, col_offset=11), [Attribute(Name('self', Load(), lineno=54, col_offset=26), 'build_temp', Load(), lineno=54, col_offset=26)], [], None, None, lineno=54, col_offset=11), [Expr(Call(Name('remove_tree', Load(), lineno=55, col_offset=12), [Attribute(Name('self', Load(), lineno=55, col_offset=24), 'build_temp', Load(), lineno=55, col_offset=24)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=55, col_offset=49), 'dry_run', Load(), lineno=55, col_offset=49))], None, None, lineno=55, col_offset=12), lineno=55, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=57, col_offset=12), 'debug', Load(), lineno=57, col_offset=12), [Str("'%s' does not exist -- can't clean it", lineno=57, col_offset=22), Attribute(Name('self', Load(), lineno=58, col_offset=22), 'build_temp', Load(), lineno=58, col_offset=22)], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=12)], lineno=54, col_offset=8), If(Attribute(Name('self', Load(), lineno=60, col_offset=11), 'all', Load(), lineno=60, col_offset=11), [For(Name('directory', Store(), lineno=62, col_offset=16), Tuple([Attribute(Name('self', Load(), lineno=62, col_offset=30), 'build_lib', Load(), lineno=62, col_offset=30), Attribute(Name('self', Load(), lineno=63, col_offset=30), 'bdist_base', Load(), lineno=63, col_offset=30), Attribute(Name('self', Load(), lineno=64, col_offset=30), 'build_scripts', Load(), lineno=64, col_offset=30)], Load(), lineno=62, col_offset=30), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=65, col_offset=19), 'path', Load(), lineno=65, col_offset=19), 'exists', Load(), lineno=65, col_offset=19), [Name('directory', Load(), lineno=65, col_offset=34)], [], None, None, lineno=65, col_offset=19), [Expr(Call(Name('remove_tree', Load(), lineno=66, col_offset=20), [Name('directory', Load(), lineno=66, col_offset=32)], [keyword('dry_run', Attribute(Name('self', Load(), lineno=66, col_offset=51), 'dry_run', Load(), lineno=66, col_offset=51))], None, None, lineno=66, col_offset=20), lineno=66, col_offset=20)], [Expr(Call(Attribute(Name('log', Load(), lineno=68, col_offset=20), 'warn', Load(), lineno=68, col_offset=20), [Str("'%s' does not exist -- can't clean it", lineno=68, col_offset=29), Name('directory', Load(), lineno=69, col_offset=29)], [], None, None, lineno=68, col_offset=20), lineno=68, col_offset=20)], lineno=65, col_offset=16)], [], lineno=62, col_offset=12)], [], lineno=60, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=73, col_offset=15), 'dry_run', Load(), lineno=73, col_offset=15), lineno=73, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=75, col_offset=16), 'rmdir', Load(), lineno=75, col_offset=16), [Attribute(Name('self', Load(), lineno=75, col_offset=25), 'build_base', Load(), lineno=75, col_offset=25)], [], None, None, lineno=75, col_offset=16), lineno=75, col_offset=16), Expr(Call(Attribute(Name('log', Load(), lineno=76, col_offset=16), 'info', Load(), lineno=76, col_offset=16), [Str("removing '%s'", lineno=76, col_offset=25), Attribute(Name('self', Load(), lineno=76, col_offset=42), 'build_base', Load(), lineno=76, col_offset=42)], [], None, None, lineno=76, col_offset=16), lineno=76, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=77, col_offset=19), None, [Pass( lineno=78, col_offset=16)], lineno=77, col_offset=12)], [], lineno=74, col_offset=12)], [], lineno=73, col_offset=8)], [], lineno=51, col_offset=4)], [], lineno=14, col_offset=0)])
