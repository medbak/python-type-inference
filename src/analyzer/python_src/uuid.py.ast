Module([Expr(Str("UUID objects (universally unique identifiers) according to RFC 4122.\n\nThis module provides immutable UUID objects (class UUID) and the functions\nuuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5\nUUIDs as specified in RFC 4122.\n\nIf all you want is a unique ID, you should probably call uuid1() or uuid4().\nNote that uuid1() may compromise privacy since it creates a UUID containing\nthe computer's network address.  uuid4() creates a random UUID.\n\nTypical usage:\n\n    >>> import uuid\n\n    # make a UUID based on the host ID and current time\n    >>> uuid.uuid1()\n    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n\n    # make a UUID using an MD5 hash of a namespace UUID and a name\n    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n\n    # make a random UUID\n    >>> uuid.uuid4()\n    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n\n    # make a UUID using a SHA-1 hash of a namespace UUID and a name\n    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n    # make a UUID from a string of hex digits (braces and hyphens ignored)\n    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')\n\n    # convert a UUID to a string of hex digits in standard form\n    >>> str(x)\n    '00010203-0405-0607-0809-0a0b0c0d0e0f'\n\n    # get the raw 16 bytes of the UUID\n    >>> x.bytes\n    '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n\n    # make a UUID from a 16-byte string\n    >>> uuid.UUID(bytes=x.bytes)\n    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')\n", lineno=45, col_offset=-1), lineno=45, col_offset=-1), Assign([Name('__author__', Store(), lineno=47, col_offset=0)], Str('Ka-Ping Yee <ping@zesty.ca>', lineno=47, col_offset=13), lineno=47, col_offset=0), Assign([Tuple([Name('RESERVED_NCS', Store(), lineno=49, col_offset=0), Name('RFC_4122', Store(), lineno=49, col_offset=14), Name('RESERVED_MICROSOFT', Store(), lineno=49, col_offset=24), Name('RESERVED_FUTURE', Store(), lineno=49, col_offset=44)], Store(), lineno=49, col_offset=0)], List([Str('reserved for NCS compatibility', lineno=50, col_offset=4), Str('specified in RFC 4122', lineno=50, col_offset=38), Str('reserved for Microsoft compatibility', lineno=51, col_offset=4), Str('reserved for future definition', lineno=51, col_offset=44)], Load(), lineno=49, col_offset=62), lineno=49, col_offset=0), ClassDef('UUID', [Name('object', Load(), lineno=53, col_offset=11)], [Expr(Str("Instances of the UUID class represent UUIDs as specified in RFC 4122.\n    UUID objects are immutable, hashable, and usable as dictionary keys.\n    Converting a UUID to a string with str() yields something in the form\n    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n    five possible forms: a similar string of hexadecimal digits, or a tuple\n    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n    48-bit values respectively) as an argument named 'fields', or a string\n    of 16 bytes (with all the integer fields in big-endian order) as an\n    argument named 'bytes', or a string of 16 bytes (with the first three\n    fields in little-endian order) as an argument named 'bytes_le', or a\n    single 128-bit integer as an argument named 'int'.\n\n    UUIDs have these read-only attributes:\n\n        bytes       the UUID as a 16-byte string (containing the six\n                    integer fields in big-endian byte order)\n\n        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n                    and time_hi_version in little-endian byte order)\n\n        fields      a tuple of the six integer fields of the UUID,\n                    which are also available as six individual attributes\n                    and two derived attributes:\n\n            time_low                the first 32 bits of the UUID\n            time_mid                the next 16 bits of the UUID\n            time_hi_version         the next 16 bits of the UUID\n            clock_seq_hi_variant    the next 8 bits of the UUID\n            clock_seq_low           the next 8 bits of the UUID\n            node                    the last 48 bits of the UUID\n\n            time                    the 60-bit timestamp\n            clock_seq               the 14-bit sequence number\n\n        hex         the UUID as a 32-character hexadecimal string\n\n        int         the UUID as a 128-bit integer\n\n        urn         the UUID as a URN as specified in RFC 4122\n\n        variant     the UUID variant (one of the constants RESERVED_NCS,\n                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n\n        version     the UUID version number (1 through 5, meaningful only\n                    when the variant is RFC_4122)\n    ", lineno=99, col_offset=-1), lineno=99, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=101, col_offset=17), Name('hex', Param(), lineno=101, col_offset=23), Name('bytes', Param(), lineno=101, col_offset=33), Name('bytes_le', Param(), lineno=101, col_offset=45), Name('fields', Param(), lineno=101, col_offset=60), Name('int', Param(), lineno=102, col_offset=23), Name('version', Param(), lineno=102, col_offset=33)], None, None, [Name('None', Load(), lineno=101, col_offset=27), Name('None', Load(), lineno=101, col_offset=39), Name('None', Load(), lineno=101, col_offset=54), Name('None', Load(), lineno=101, col_offset=67), Name('None', Load(), lineno=102, col_offset=27), Name('None', Load(), lineno=102, col_offset=41)]), [Expr(Str("Create a UUID from either a string of 32 hexadecimal digits,\n        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes\n        in little-endian order as the 'bytes_le' argument, a tuple of six\n        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,\n        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as\n        the 'fields' argument, or a single 128-bit integer as the 'int'\n        argument.  When a string of hex digits is given, curly braces,\n        hyphens, and a URN prefix are all optional.  For example, these\n        expressions all yield the same UUID:\n\n        UUID('{12345678-1234-5678-1234-567812345678}')\n        UUID('12345678123456781234567812345678')\n        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')\n        UUID(bytes='\\x12\\x34\\x56\\x78'*4)\n        UUID(bytes_le='\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +\n                      '\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')\n        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))\n        UUID(int=0x12345678123456781234567812345678)\n\n        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must\n        be given.  The 'version' argument is optional; if given, the resulting\n        UUID will have its variant and version set according to RFC 4122,\n        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.\n        ", lineno=126, col_offset=-1), lineno=126, col_offset=-1), If(Compare(Call(Attribute(List([Name('hex', Load(), lineno=128, col_offset=12), Name('bytes', Load(), lineno=128, col_offset=17), Name('bytes_le', Load(), lineno=128, col_offset=24), Name('fields', Load(), lineno=128, col_offset=34), Name('int', Load(), lineno=128, col_offset=42)], Load(), lineno=128, col_offset=11), 'count', Load(), lineno=128, col_offset=11), [Name('None', Load(), lineno=128, col_offset=53)], [], None, None, lineno=128, col_offset=11), [NotEq()], [Num(4, lineno=128, col_offset=62)], lineno=128, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=129, col_offset=18), [Str('need one of hex, bytes, bytes_le, fields, or int', lineno=129, col_offset=28)], [], None, None, lineno=129, col_offset=18), None, None, lineno=129, col_offset=12)], [], lineno=128, col_offset=8), If(Compare(Name('hex', Load(), lineno=130, col_offset=11), [IsNot()], [Name('None', Load(), lineno=130, col_offset=22)], lineno=130, col_offset=11), [Assign([Name('hex', Store(), lineno=131, col_offset=12)], Call(Attribute(Call(Attribute(Name('hex', Load(), lineno=131, col_offset=18), 'replace', Load(), lineno=131, col_offset=18), [Str('urn:', lineno=131, col_offset=30), Str('', lineno=131, col_offset=38)], [], None, None, lineno=131, col_offset=18), 'replace', Load(), lineno=131, col_offset=18), [Str('uuid:', lineno=131, col_offset=50), Str('', lineno=131, col_offset=59)], [], None, None, lineno=131, col_offset=18), lineno=131, col_offset=12), Assign([Name('hex', Store(), lineno=132, col_offset=12)], Call(Attribute(Call(Attribute(Name('hex', Load(), lineno=132, col_offset=18), 'strip', Load(), lineno=132, col_offset=18), [Str('{}', lineno=132, col_offset=28)], [], None, None, lineno=132, col_offset=18), 'replace', Load(), lineno=132, col_offset=18), [Str('-', lineno=132, col_offset=42), Str('', lineno=132, col_offset=47)], [], None, None, lineno=132, col_offset=18), lineno=132, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=133, col_offset=15), [Name('hex', Load(), lineno=133, col_offset=19)], [], None, None, lineno=133, col_offset=15), [NotEq()], [Num(32, lineno=133, col_offset=27)], lineno=133, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=134, col_offset=22), [Str('badly formed hexadecimal UUID string', lineno=134, col_offset=33)], [], None, None, lineno=134, col_offset=22), None, None, lineno=134, col_offset=16)], [], lineno=133, col_offset=12), Assign([Name('int', Store(), lineno=135, col_offset=12)], Call(Name('long', Load(), lineno=135, col_offset=18), [Name('hex', Load(), lineno=135, col_offset=23), Num(16, lineno=135, col_offset=28)], [], None, None, lineno=135, col_offset=18), lineno=135, col_offset=12)], [], lineno=130, col_offset=8), If(Compare(Name('bytes_le', Load(), lineno=136, col_offset=11), [IsNot()], [Name('None', Load(), lineno=136, col_offset=27)], lineno=136, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=137, col_offset=15), [Name('bytes_le', Load(), lineno=137, col_offset=19)], [], None, None, lineno=137, col_offset=15), [NotEq()], [Num(16, lineno=137, col_offset=32)], lineno=137, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=138, col_offset=22), [Str('bytes_le is not a 16-char string', lineno=138, col_offset=33)], [], None, None, lineno=138, col_offset=22), None, None, lineno=138, col_offset=16)], [], lineno=137, col_offset=12), Assign([Name('bytes', Store(), lineno=139, col_offset=12)], BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(Subscript(Name('bytes_le', Load(), lineno=139, col_offset=21), Index(Num(3, lineno=139, col_offset=30)), Load(), lineno=139, col_offset=21), Add(), Subscript(Name('bytes_le', Load(), lineno=139, col_offset=35), Index(Num(2, lineno=139, col_offset=44)), Load(), lineno=139, col_offset=35), lineno=139, col_offset=21), Add(), Subscript(Name('bytes_le', Load(), lineno=139, col_offset=49), Index(Num(1, lineno=139, col_offset=58)), Load(), lineno=139, col_offset=49), lineno=139, col_offset=47), Add(), Subscript(Name('bytes_le', Load(), lineno=139, col_offset=63), Index(Num(0, lineno=139, col_offset=72)), Load(), lineno=139, col_offset=63), lineno=139, col_offset=61), Add(), Subscript(Name('bytes_le', Load(), lineno=140, col_offset=21), Index(Num(5, lineno=140, col_offset=30)), Load(), lineno=140, col_offset=21), lineno=139, col_offset=75), Add(), Subscript(Name('bytes_le', Load(), lineno=140, col_offset=35), Index(Num(4, lineno=140, col_offset=44)), Load(), lineno=140, col_offset=35), lineno=140, col_offset=33), Add(), Subscript(Name('bytes_le', Load(), lineno=140, col_offset=49), Index(Num(7, lineno=140, col_offset=58)), Load(), lineno=140, col_offset=49), lineno=140, col_offset=47), Add(), Subscript(Name('bytes_le', Load(), lineno=140, col_offset=63), Index(Num(6, lineno=140, col_offset=72)), Load(), lineno=140, col_offset=63), lineno=140, col_offset=61), Add(), Subscript(Name('bytes_le', Load(), lineno=141, col_offset=21), Slice(Num(8, lineno=141, col_offset=30), None, None), Load(), lineno=141, col_offset=21), lineno=140, col_offset=75), lineno=139, col_offset=12)], [], lineno=136, col_offset=8), If(Compare(Name('bytes', Load(), lineno=142, col_offset=11), [IsNot()], [Name('None', Load(), lineno=142, col_offset=24)], lineno=142, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=143, col_offset=15), [Name('bytes', Load(), lineno=143, col_offset=19)], [], None, None, lineno=143, col_offset=15), [NotEq()], [Num(16, lineno=143, col_offset=29)], lineno=143, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=144, col_offset=22), [Str('bytes is not a 16-char string', lineno=144, col_offset=33)], [], None, None, lineno=144, col_offset=22), None, None, lineno=144, col_offset=16)], [], lineno=143, col_offset=12), Assign([Name('int', Store(), lineno=145, col_offset=12)], Call(Name('long', Load(), lineno=145, col_offset=18), [BinOp(BinOp(Str('%02x', lineno=145, col_offset=24), Mult(), Num(16, lineno=145, col_offset=31), lineno=145, col_offset=24), Mod(), Call(Name('tuple', Load(), lineno=145, col_offset=37), [Call(Name('map', Load(), lineno=145, col_offset=43), [Name('ord', Load(), lineno=145, col_offset=47), Name('bytes', Load(), lineno=145, col_offset=52)], [], None, None, lineno=145, col_offset=43)], [], None, None, lineno=145, col_offset=37), lineno=145, col_offset=23), Num(16, lineno=145, col_offset=61)], [], None, None, lineno=145, col_offset=18), lineno=145, col_offset=12)], [], lineno=142, col_offset=8), If(Compare(Name('fields', Load(), lineno=146, col_offset=11), [IsNot()], [Name('None', Load(), lineno=146, col_offset=25)], lineno=146, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=147, col_offset=15), [Name('fields', Load(), lineno=147, col_offset=19)], [], None, None, lineno=147, col_offset=15), [NotEq()], [Num(6, lineno=147, col_offset=30)], lineno=147, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=148, col_offset=22), [Str('fields is not a 6-tuple', lineno=148, col_offset=33)], [], None, None, lineno=148, col_offset=22), None, None, lineno=148, col_offset=16)], [], lineno=147, col_offset=12), Assign([Tuple([Name('time_low', Store(), lineno=149, col_offset=13), Name('time_mid', Store(), lineno=149, col_offset=23), Name('time_hi_version', Store(), lineno=149, col_offset=33), Name('clock_seq_hi_variant', Store(), lineno=150, col_offset=13), Name('clock_seq_low', Store(), lineno=150, col_offset=35), Name('node', Store(), lineno=150, col_offset=50)], Store(), lineno=149, col_offset=13)], Name('fields', Load(), lineno=150, col_offset=58), lineno=149, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=151, col_offset=19), [LtE(), Lt()], [Name('time_low', Load(), lineno=151, col_offset=24), BinOp(Num(1, lineno=151, col_offset=35), LShift(), Num(32L, lineno=151, col_offset=38), lineno=151, col_offset=35)], lineno=151, col_offset=19), lineno=151, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=152, col_offset=22), [Str('field 1 out of range (need a 32-bit value)', lineno=152, col_offset=33)], [], None, None, lineno=152, col_offset=22), None, None, lineno=152, col_offset=16)], [], lineno=151, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=153, col_offset=19), [LtE(), Lt()], [Name('time_mid', Load(), lineno=153, col_offset=24), BinOp(Num(1, lineno=153, col_offset=35), LShift(), Num(16L, lineno=153, col_offset=38), lineno=153, col_offset=35)], lineno=153, col_offset=19), lineno=153, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=154, col_offset=22), [Str('field 2 out of range (need a 16-bit value)', lineno=154, col_offset=33)], [], None, None, lineno=154, col_offset=22), None, None, lineno=154, col_offset=16)], [], lineno=153, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=155, col_offset=19), [LtE(), Lt()], [Name('time_hi_version', Load(), lineno=155, col_offset=24), BinOp(Num(1, lineno=155, col_offset=42), LShift(), Num(16L, lineno=155, col_offset=45), lineno=155, col_offset=42)], lineno=155, col_offset=19), lineno=155, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=156, col_offset=22), [Str('field 3 out of range (need a 16-bit value)', lineno=156, col_offset=33)], [], None, None, lineno=156, col_offset=22), None, None, lineno=156, col_offset=16)], [], lineno=155, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=157, col_offset=19), [LtE(), Lt()], [Name('clock_seq_hi_variant', Load(), lineno=157, col_offset=24), BinOp(Num(1, lineno=157, col_offset=47), LShift(), Num(8L, lineno=157, col_offset=50), lineno=157, col_offset=47)], lineno=157, col_offset=19), lineno=157, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=158, col_offset=22), [Str('field 4 out of range (need an 8-bit value)', lineno=158, col_offset=33)], [], None, None, lineno=158, col_offset=22), None, None, lineno=158, col_offset=16)], [], lineno=157, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=159, col_offset=19), [LtE(), Lt()], [Name('clock_seq_low', Load(), lineno=159, col_offset=24), BinOp(Num(1, lineno=159, col_offset=40), LShift(), Num(8L, lineno=159, col_offset=43), lineno=159, col_offset=40)], lineno=159, col_offset=19), lineno=159, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=160, col_offset=22), [Str('field 5 out of range (need an 8-bit value)', lineno=160, col_offset=33)], [], None, None, lineno=160, col_offset=22), None, None, lineno=160, col_offset=16)], [], lineno=159, col_offset=12), If(UnaryOp(Not(), Compare(Num(0, lineno=161, col_offset=19), [LtE(), Lt()], [Name('node', Load(), lineno=161, col_offset=24), BinOp(Num(1, lineno=161, col_offset=31), LShift(), Num(48L, lineno=161, col_offset=34), lineno=161, col_offset=31)], lineno=161, col_offset=19), lineno=161, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=162, col_offset=22), [Str('field 6 out of range (need a 48-bit value)', lineno=162, col_offset=33)], [], None, None, lineno=162, col_offset=22), None, None, lineno=162, col_offset=16)], [], lineno=161, col_offset=12), Assign([Name('clock_seq', Store(), lineno=163, col_offset=12)], BinOp(BinOp(Name('clock_seq_hi_variant', Load(), lineno=163, col_offset=25), LShift(), Num(8L, lineno=163, col_offset=49), lineno=163, col_offset=25), BitOr(), Name('clock_seq_low', Load(), lineno=163, col_offset=55), lineno=163, col_offset=24), lineno=163, col_offset=12), Assign([Name('int', Store(), lineno=164, col_offset=12)], BinOp(BinOp(BinOp(BinOp(BinOp(Name('time_low', Load(), lineno=164, col_offset=20), LShift(), Num(96L, lineno=164, col_offset=32), lineno=164, col_offset=20), BitOr(), BinOp(Name('time_mid', Load(), lineno=164, col_offset=40), LShift(), Num(80L, lineno=164, col_offset=52), lineno=164, col_offset=40), lineno=164, col_offset=19), BitOr(), BinOp(Name('time_hi_version', Load(), lineno=165, col_offset=20), LShift(), Num(64L, lineno=165, col_offset=39), lineno=165, col_offset=20), lineno=164, col_offset=57), BitOr(), BinOp(Name('clock_seq', Load(), lineno=165, col_offset=47), LShift(), Num(48L, lineno=165, col_offset=60), lineno=165, col_offset=47), lineno=165, col_offset=44), BitOr(), Name('node', Load(), lineno=165, col_offset=67), lineno=165, col_offset=65), lineno=164, col_offset=12)], [], lineno=146, col_offset=8), If(Compare(Name('int', Load(), lineno=166, col_offset=11), [IsNot()], [Name('None', Load(), lineno=166, col_offset=22)], lineno=166, col_offset=11), [If(UnaryOp(Not(), Compare(Num(0, lineno=167, col_offset=19), [LtE(), Lt()], [Name('int', Load(), lineno=167, col_offset=24), BinOp(Num(1, lineno=167, col_offset=30), LShift(), Num(128L, lineno=167, col_offset=33), lineno=167, col_offset=30)], lineno=167, col_offset=19), lineno=167, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=168, col_offset=22), [Str('int is out of range (need a 128-bit value)', lineno=168, col_offset=33)], [], None, None, lineno=168, col_offset=22), None, None, lineno=168, col_offset=16)], [], lineno=167, col_offset=12)], [], lineno=166, col_offset=8), If(Compare(Name('version', Load(), lineno=169, col_offset=11), [IsNot()], [Name('None', Load(), lineno=169, col_offset=26)], lineno=169, col_offset=11), [If(UnaryOp(Not(), Compare(Num(1, lineno=170, col_offset=19), [LtE(), LtE()], [Name('version', Load(), lineno=170, col_offset=24), Num(5, lineno=170, col_offset=35)], lineno=170, col_offset=19), lineno=170, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=171, col_offset=22), [Str('illegal version number', lineno=171, col_offset=33)], [], None, None, lineno=171, col_offset=22), None, None, lineno=171, col_offset=16)], [], lineno=170, col_offset=12), AugAssign(Name('int', Store(), lineno=173, col_offset=12), BitAnd(), UnaryOp(Invert(), BinOp(Num(49152, lineno=173, col_offset=21), LShift(), Num(48L, lineno=173, col_offset=31), lineno=173, col_offset=21), lineno=173, col_offset=19), lineno=173, col_offset=12), AugAssign(Name('int', Store(), lineno=174, col_offset=12), BitOr(), BinOp(Num(32768, lineno=174, col_offset=19), LShift(), Num(48L, lineno=174, col_offset=29), lineno=174, col_offset=19), lineno=174, col_offset=12), AugAssign(Name('int', Store(), lineno=176, col_offset=12), BitAnd(), UnaryOp(Invert(), BinOp(Num(61440, lineno=176, col_offset=21), LShift(), Num(64L, lineno=176, col_offset=31), lineno=176, col_offset=21), lineno=176, col_offset=19), lineno=176, col_offset=12), AugAssign(Name('int', Store(), lineno=177, col_offset=12), BitOr(), BinOp(Name('version', Load(), lineno=177, col_offset=19), LShift(), Num(76L, lineno=177, col_offset=30), lineno=177, col_offset=19), lineno=177, col_offset=12)], [], lineno=169, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=178, col_offset=8), '__dict__', Load(), lineno=178, col_offset=8), Index(Str('int', lineno=178, col_offset=22)), Store(), lineno=178, col_offset=8)], Name('int', Load(), lineno=178, col_offset=31), lineno=178, col_offset=8)], [], lineno=101, col_offset=4), FunctionDef('__cmp__', arguments([Name('self', Param(), lineno=180, col_offset=16), Name('other', Param(), lineno=180, col_offset=22)], None, None, []), [If(Call(Name('isinstance', Load(), lineno=181, col_offset=11), [Name('other', Load(), lineno=181, col_offset=22), Name('UUID', Load(), lineno=181, col_offset=29)], [], None, None, lineno=181, col_offset=11), [Return(Call(Name('cmp', Load(), lineno=182, col_offset=19), [Attribute(Name('self', Load(), lineno=182, col_offset=23), 'int', Load(), lineno=182, col_offset=23), Attribute(Name('other', Load(), lineno=182, col_offset=33), 'int', Load(), lineno=182, col_offset=33)], [], None, None, lineno=182, col_offset=19), lineno=182, col_offset=12)], [], lineno=181, col_offset=8), Return(Name('NotImplemented', Load(), lineno=183, col_offset=15), lineno=183, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('__hash__', arguments([Name('self', Param(), lineno=185, col_offset=17)], None, None, []), [Return(Call(Name('hash', Load(), lineno=186, col_offset=15), [Attribute(Name('self', Load(), lineno=186, col_offset=20), 'int', Load(), lineno=186, col_offset=20)], [], None, None, lineno=186, col_offset=15), lineno=186, col_offset=8)], [], lineno=185, col_offset=4), FunctionDef('__int__', arguments([Name('self', Param(), lineno=188, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=189, col_offset=15), 'int', Load(), lineno=189, col_offset=15), lineno=189, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=191, col_offset=17)], None, None, []), [Return(BinOp(Str('UUID(%r)', lineno=192, col_offset=15), Mod(), Call(Name('str', Load(), lineno=192, col_offset=28), [Name('self', Load(), lineno=192, col_offset=32)], [], None, None, lineno=192, col_offset=28), lineno=192, col_offset=15), lineno=192, col_offset=8)], [], lineno=191, col_offset=4), FunctionDef('__setattr__', arguments([Name('self', Param(), lineno=194, col_offset=20), Name('name', Param(), lineno=194, col_offset=26), Name('value', Param(), lineno=194, col_offset=32)], None, None, []), [Raise(Call(Name('TypeError', Load(), lineno=195, col_offset=14), [Str('UUID objects are immutable', lineno=195, col_offset=24)], [], None, None, lineno=195, col_offset=14), None, None, lineno=195, col_offset=8)], [], lineno=194, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=197, col_offset=16)], None, None, []), [Assign([Name('hex', Store(), lineno=198, col_offset=8)], BinOp(Str('%032x', lineno=198, col_offset=14), Mod(), Attribute(Name('self', Load(), lineno=198, col_offset=24), 'int', Load(), lineno=198, col_offset=24), lineno=198, col_offset=14), lineno=198, col_offset=8), Return(BinOp(Str('%s-%s-%s-%s-%s', lineno=199, col_offset=15), Mod(), Tuple([Subscript(Name('hex', Load(), lineno=200, col_offset=12), Slice(None, Num(8, lineno=200, col_offset=17), None), Load(), lineno=200, col_offset=12), Subscript(Name('hex', Load(), lineno=200, col_offset=21), Slice(Num(8, lineno=200, col_offset=25), Num(12, lineno=200, col_offset=27), None), Load(), lineno=200, col_offset=21), Subscript(Name('hex', Load(), lineno=200, col_offset=32), Slice(Num(12, lineno=200, col_offset=36), Num(16, lineno=200, col_offset=39), None), Load(), lineno=200, col_offset=32), Subscript(Name('hex', Load(), lineno=200, col_offset=44), Slice(Num(16, lineno=200, col_offset=48), Num(20, lineno=200, col_offset=51), None), Load(), lineno=200, col_offset=44), Subscript(Name('hex', Load(), lineno=200, col_offset=56), Slice(Num(20, lineno=200, col_offset=60), None, None), Load(), lineno=200, col_offset=56)], Load(), lineno=200, col_offset=12), lineno=199, col_offset=15), lineno=199, col_offset=8)], [], lineno=197, col_offset=4), FunctionDef('get_bytes', arguments([Name('self', Param(), lineno=202, col_offset=18)], None, None, []), [Assign([Name('bytes', Store(), lineno=203, col_offset=8)], Str('', lineno=203, col_offset=16), lineno=203, col_offset=8), For(Name('shift', Store(), lineno=204, col_offset=12), Call(Name('range', Load(), lineno=204, col_offset=21), [Num(0, lineno=204, col_offset=27), Num(128, lineno=204, col_offset=30), Num(8, lineno=204, col_offset=35)], [], None, None, lineno=204, col_offset=21), [Assign([Name('bytes', Store(), lineno=205, col_offset=12)], BinOp(Call(Name('chr', Load(), lineno=205, col_offset=20), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=205, col_offset=25), 'int', Load(), lineno=205, col_offset=25), RShift(), Name('shift', Load(), lineno=205, col_offset=37), lineno=205, col_offset=25), BitAnd(), Num(255, lineno=205, col_offset=46), lineno=205, col_offset=24)], [], None, None, lineno=205, col_offset=20), Add(), Name('bytes', Load(), lineno=205, col_offset=54), lineno=205, col_offset=20), lineno=205, col_offset=12)], [], lineno=204, col_offset=8), Return(Name('bytes', Load(), lineno=206, col_offset=15), lineno=206, col_offset=8)], [], lineno=202, col_offset=4), Assign([Name('bytes', Store(), lineno=208, col_offset=4)], Call(Name('property', Load(), lineno=208, col_offset=12), [Name('get_bytes', Load(), lineno=208, col_offset=21)], [], None, None, lineno=208, col_offset=12), lineno=208, col_offset=4), FunctionDef('get_bytes_le', arguments([Name('self', Param(), lineno=210, col_offset=21)], None, None, []), [Assign([Name('bytes', Store(), lineno=211, col_offset=8)], Attribute(Name('self', Load(), lineno=211, col_offset=16), 'bytes', Load(), lineno=211, col_offset=16), lineno=211, col_offset=8), Return(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(Subscript(Name('bytes', Load(), lineno=212, col_offset=16), Index(Num(3, lineno=212, col_offset=22)), Load(), lineno=212, col_offset=16), Add(), Subscript(Name('bytes', Load(), lineno=212, col_offset=27), Index(Num(2, lineno=212, col_offset=33)), Load(), lineno=212, col_offset=27), lineno=212, col_offset=16), Add(), Subscript(Name('bytes', Load(), lineno=212, col_offset=38), Index(Num(1, lineno=212, col_offset=44)), Load(), lineno=212, col_offset=38), lineno=212, col_offset=36), Add(), Subscript(Name('bytes', Load(), lineno=212, col_offset=49), Index(Num(0, lineno=212, col_offset=55)), Load(), lineno=212, col_offset=49), lineno=212, col_offset=47), Add(), Subscript(Name('bytes', Load(), lineno=213, col_offset=16), Index(Num(5, lineno=213, col_offset=22)), Load(), lineno=213, col_offset=16), lineno=212, col_offset=58), Add(), Subscript(Name('bytes', Load(), lineno=213, col_offset=27), Index(Num(4, lineno=213, col_offset=33)), Load(), lineno=213, col_offset=27), lineno=213, col_offset=25), Add(), Subscript(Name('bytes', Load(), lineno=213, col_offset=38), Index(Num(7, lineno=213, col_offset=44)), Load(), lineno=213, col_offset=38), lineno=213, col_offset=36), Add(), Subscript(Name('bytes', Load(), lineno=213, col_offset=49), Index(Num(6, lineno=213, col_offset=55)), Load(), lineno=213, col_offset=49), lineno=213, col_offset=47), Add(), Subscript(Name('bytes', Load(), lineno=213, col_offset=60), Slice(Num(8, lineno=213, col_offset=66), None, None), Load(), lineno=213, col_offset=60), lineno=213, col_offset=58), lineno=212, col_offset=8)], [], lineno=210, col_offset=4), Assign([Name('bytes_le', Store(), lineno=215, col_offset=4)], Call(Name('property', Load(), lineno=215, col_offset=15), [Name('get_bytes_le', Load(), lineno=215, col_offset=24)], [], None, None, lineno=215, col_offset=15), lineno=215, col_offset=4), FunctionDef('get_fields', arguments([Name('self', Param(), lineno=217, col_offset=19)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=218, col_offset=16), 'time_low', Load(), lineno=218, col_offset=16), Attribute(Name('self', Load(), lineno=218, col_offset=31), 'time_mid', Load(), lineno=218, col_offset=31), Attribute(Name('self', Load(), lineno=218, col_offset=46), 'time_hi_version', Load(), lineno=218, col_offset=46), Attribute(Name('self', Load(), lineno=219, col_offset=16), 'clock_seq_hi_variant', Load(), lineno=219, col_offset=16), Attribute(Name('self', Load(), lineno=219, col_offset=43), 'clock_seq_low', Load(), lineno=219, col_offset=43), Attribute(Name('self', Load(), lineno=219, col_offset=63), 'node', Load(), lineno=219, col_offset=63)], Load(), lineno=218, col_offset=16), lineno=218, col_offset=8)], [], lineno=217, col_offset=4), Assign([Name('fields', Store(), lineno=221, col_offset=4)], Call(Name('property', Load(), lineno=221, col_offset=13), [Name('get_fields', Load(), lineno=221, col_offset=22)], [], None, None, lineno=221, col_offset=13), lineno=221, col_offset=4), FunctionDef('get_time_low', arguments([Name('self', Param(), lineno=223, col_offset=21)], None, None, []), [Return(BinOp(Attribute(Name('self', Load(), lineno=224, col_offset=15), 'int', Load(), lineno=224, col_offset=15), RShift(), Num(96L, lineno=224, col_offset=27), lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=223, col_offset=4), Assign([Name('time_low', Store(), lineno=226, col_offset=4)], Call(Name('property', Load(), lineno=226, col_offset=15), [Name('get_time_low', Load(), lineno=226, col_offset=24)], [], None, None, lineno=226, col_offset=15), lineno=226, col_offset=4), FunctionDef('get_time_mid', arguments([Name('self', Param(), lineno=228, col_offset=21)], None, None, []), [Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=229, col_offset=16), 'int', Load(), lineno=229, col_offset=16), RShift(), Num(80L, lineno=229, col_offset=28), lineno=229, col_offset=16), BitAnd(), Num(65535, lineno=229, col_offset=35), lineno=229, col_offset=15), lineno=229, col_offset=8)], [], lineno=228, col_offset=4), Assign([Name('time_mid', Store(), lineno=231, col_offset=4)], Call(Name('property', Load(), lineno=231, col_offset=15), [Name('get_time_mid', Load(), lineno=231, col_offset=24)], [], None, None, lineno=231, col_offset=15), lineno=231, col_offset=4), FunctionDef('get_time_hi_version', arguments([Name('self', Param(), lineno=233, col_offset=28)], None, None, []), [Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=234, col_offset=16), 'int', Load(), lineno=234, col_offset=16), RShift(), Num(64L, lineno=234, col_offset=28), lineno=234, col_offset=16), BitAnd(), Num(65535, lineno=234, col_offset=35), lineno=234, col_offset=15), lineno=234, col_offset=8)], [], lineno=233, col_offset=4), Assign([Name('time_hi_version', Store(), lineno=236, col_offset=4)], Call(Name('property', Load(), lineno=236, col_offset=22), [Name('get_time_hi_version', Load(), lineno=236, col_offset=31)], [], None, None, lineno=236, col_offset=22), lineno=236, col_offset=4), FunctionDef('get_clock_seq_hi_variant', arguments([Name('self', Param(), lineno=238, col_offset=33)], None, None, []), [Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=239, col_offset=16), 'int', Load(), lineno=239, col_offset=16), RShift(), Num(56L, lineno=239, col_offset=28), lineno=239, col_offset=16), BitAnd(), Num(255, lineno=239, col_offset=35), lineno=239, col_offset=15), lineno=239, col_offset=8)], [], lineno=238, col_offset=4), Assign([Name('clock_seq_hi_variant', Store(), lineno=241, col_offset=4)], Call(Name('property', Load(), lineno=241, col_offset=27), [Name('get_clock_seq_hi_variant', Load(), lineno=241, col_offset=36)], [], None, None, lineno=241, col_offset=27), lineno=241, col_offset=4), FunctionDef('get_clock_seq_low', arguments([Name('self', Param(), lineno=243, col_offset=26)], None, None, []), [Return(BinOp(BinOp(Attribute(Name('self', Load(), lineno=244, col_offset=16), 'int', Load(), lineno=244, col_offset=16), RShift(), Num(48L, lineno=244, col_offset=28), lineno=244, col_offset=16), BitAnd(), Num(255, lineno=244, col_offset=35), lineno=244, col_offset=15), lineno=244, col_offset=8)], [], lineno=243, col_offset=4), Assign([Name('clock_seq_low', Store(), lineno=246, col_offset=4)], Call(Name('property', Load(), lineno=246, col_offset=20), [Name('get_clock_seq_low', Load(), lineno=246, col_offset=29)], [], None, None, lineno=246, col_offset=20), lineno=246, col_offset=4), FunctionDef('get_time', arguments([Name('self', Param(), lineno=248, col_offset=17)], None, None, []), [Return(BinOp(BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=249, col_offset=18), 'time_hi_version', Load(), lineno=249, col_offset=18), BitAnd(), Num(4095L, lineno=249, col_offset=41), lineno=249, col_offset=18), LShift(), Num(48L, lineno=249, col_offset=53), lineno=249, col_offset=17), BitOr(), BinOp(Attribute(Name('self', Load(), lineno=250, col_offset=17), 'time_mid', Load(), lineno=250, col_offset=17), LShift(), Num(32L, lineno=250, col_offset=34), lineno=250, col_offset=17), lineno=249, col_offset=16), BitOr(), Attribute(Name('self', Load(), lineno=250, col_offset=41), 'time_low', Load(), lineno=250, col_offset=41), lineno=250, col_offset=39), lineno=249, col_offset=8)], [], lineno=248, col_offset=4), Assign([Name('time', Store(), lineno=252, col_offset=4)], Call(Name('property', Load(), lineno=252, col_offset=11), [Name('get_time', Load(), lineno=252, col_offset=20)], [], None, None, lineno=252, col_offset=11), lineno=252, col_offset=4), FunctionDef('get_clock_seq', arguments([Name('self', Param(), lineno=254, col_offset=22)], None, None, []), [Return(BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=255, col_offset=18), 'clock_seq_hi_variant', Load(), lineno=255, col_offset=18), BitAnd(), Num(63L, lineno=255, col_offset=46), lineno=255, col_offset=18), LShift(), Num(8L, lineno=255, col_offset=56), lineno=255, col_offset=17), BitOr(), Attribute(Name('self', Load(), lineno=256, col_offset=16), 'clock_seq_low', Load(), lineno=256, col_offset=16), lineno=255, col_offset=16), lineno=255, col_offset=8)], [], lineno=254, col_offset=4), Assign([Name('clock_seq', Store(), lineno=258, col_offset=4)], Call(Name('property', Load(), lineno=258, col_offset=16), [Name('get_clock_seq', Load(), lineno=258, col_offset=25)], [], None, None, lineno=258, col_offset=16), lineno=258, col_offset=4), FunctionDef('get_node', arguments([Name('self', Param(), lineno=260, col_offset=17)], None, None, []), [Return(BinOp(Attribute(Name('self', Load(), lineno=261, col_offset=15), 'int', Load(), lineno=261, col_offset=15), BitAnd(), Num(281474976710655, lineno=261, col_offset=26), lineno=261, col_offset=15), lineno=261, col_offset=8)], [], lineno=260, col_offset=4), Assign([Name('node', Store(), lineno=263, col_offset=4)], Call(Name('property', Load(), lineno=263, col_offset=11), [Name('get_node', Load(), lineno=263, col_offset=20)], [], None, None, lineno=263, col_offset=11), lineno=263, col_offset=4), FunctionDef('get_hex', arguments([Name('self', Param(), lineno=265, col_offset=16)], None, None, []), [Return(BinOp(Str('%032x', lineno=266, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=266, col_offset=25), 'int', Load(), lineno=266, col_offset=25), lineno=266, col_offset=15), lineno=266, col_offset=8)], [], lineno=265, col_offset=4), Assign([Name('hex', Store(), lineno=268, col_offset=4)], Call(Name('property', Load(), lineno=268, col_offset=10), [Name('get_hex', Load(), lineno=268, col_offset=19)], [], None, None, lineno=268, col_offset=10), lineno=268, col_offset=4), FunctionDef('get_urn', arguments([Name('self', Param(), lineno=270, col_offset=16)], None, None, []), [Return(BinOp(Str('urn:uuid:', lineno=271, col_offset=15), Add(), Call(Name('str', Load(), lineno=271, col_offset=29), [Name('self', Load(), lineno=271, col_offset=33)], [], None, None, lineno=271, col_offset=29), lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4), Assign([Name('urn', Store(), lineno=273, col_offset=4)], Call(Name('property', Load(), lineno=273, col_offset=10), [Name('get_urn', Load(), lineno=273, col_offset=19)], [], None, None, lineno=273, col_offset=10), lineno=273, col_offset=4), FunctionDef('get_variant', arguments([Name('self', Param(), lineno=275, col_offset=20)], None, None, []), [If(UnaryOp(Not(), BinOp(Attribute(Name('self', Load(), lineno=276, col_offset=15), 'int', Load(), lineno=276, col_offset=15), BitAnd(), BinOp(Num(32768, lineno=276, col_offset=27), LShift(), Num(48L, lineno=276, col_offset=37), lineno=276, col_offset=27), lineno=276, col_offset=15), lineno=276, col_offset=11), [Return(Name('RESERVED_NCS', Load(), lineno=277, col_offset=19), lineno=277, col_offset=12)], [If(UnaryOp(Not(), BinOp(Attribute(Name('self', Load(), lineno=278, col_offset=17), 'int', Load(), lineno=278, col_offset=17), BitAnd(), BinOp(Num(16384, lineno=278, col_offset=29), LShift(), Num(48L, lineno=278, col_offset=39), lineno=278, col_offset=29), lineno=278, col_offset=17), lineno=278, col_offset=13), [Return(Name('RFC_4122', Load(), lineno=279, col_offset=19), lineno=279, col_offset=12)], [If(UnaryOp(Not(), BinOp(Attribute(Name('self', Load(), lineno=280, col_offset=17), 'int', Load(), lineno=280, col_offset=17), BitAnd(), BinOp(Num(8192, lineno=280, col_offset=29), LShift(), Num(48L, lineno=280, col_offset=39), lineno=280, col_offset=29), lineno=280, col_offset=17), lineno=280, col_offset=13), [Return(Name('RESERVED_MICROSOFT', Load(), lineno=281, col_offset=19), lineno=281, col_offset=12)], [Return(Name('RESERVED_FUTURE', Load(), lineno=283, col_offset=19), lineno=283, col_offset=12)], lineno=280, col_offset=13)], lineno=278, col_offset=13)], lineno=276, col_offset=8)], [], lineno=275, col_offset=4), Assign([Name('variant', Store(), lineno=285, col_offset=4)], Call(Name('property', Load(), lineno=285, col_offset=14), [Name('get_variant', Load(), lineno=285, col_offset=23)], [], None, None, lineno=285, col_offset=14), lineno=285, col_offset=4), FunctionDef('get_version', arguments([Name('self', Param(), lineno=287, col_offset=20)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=289, col_offset=11), 'variant', Load(), lineno=289, col_offset=11), [Eq()], [Name('RFC_4122', Load(), lineno=289, col_offset=27)], lineno=289, col_offset=11), [Return(Call(Name('int', Load(), lineno=290, col_offset=19), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=290, col_offset=24), 'int', Load(), lineno=290, col_offset=24), RShift(), Num(76L, lineno=290, col_offset=36), lineno=290, col_offset=24), BitAnd(), Num(15, lineno=290, col_offset=43), lineno=290, col_offset=23)], [], None, None, lineno=290, col_offset=19), lineno=290, col_offset=12)], [], lineno=289, col_offset=8)], [], lineno=287, col_offset=4), Assign([Name('version', Store(), lineno=292, col_offset=4)], Call(Name('property', Load(), lineno=292, col_offset=14), [Name('get_version', Load(), lineno=292, col_offset=23)], [], None, None, lineno=292, col_offset=14), lineno=292, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('_find_mac', arguments([Name('command', Param(), lineno=294, col_offset=14), Name('args', Param(), lineno=294, col_offset=23), Name('hw_identifiers', Param(), lineno=294, col_offset=29), Name('get_index', Param(), lineno=294, col_offset=45)], None, None, []), [Import([alias('os', None)], lineno=295, col_offset=4), For(Name('dir', Store(), lineno=296, col_offset=8), List([Str('', lineno=296, col_offset=16), Str('/sbin/', lineno=296, col_offset=20), Str('/usr/sbin', lineno=296, col_offset=30)], Load(), lineno=296, col_offset=15), [Assign([Name('executable', Store(), lineno=297, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=297, col_offset=21), 'path', Load(), lineno=297, col_offset=21), 'join', Load(), lineno=297, col_offset=21), [Name('dir', Load(), lineno=297, col_offset=34), Name('command', Load(), lineno=297, col_offset=39)], [], None, None, lineno=297, col_offset=21), lineno=297, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=298, col_offset=15), 'path', Load(), lineno=298, col_offset=15), 'exists', Load(), lineno=298, col_offset=15), [Name('executable', Load(), lineno=298, col_offset=30)], [], None, None, lineno=298, col_offset=15), lineno=298, col_offset=11), [Continue( lineno=299, col_offset=12)], [], lineno=298, col_offset=8), TryExcept([Assign([Name('cmd', Store(), lineno=304, col_offset=12)], BinOp(Str('LC_ALL=C %s %s 2>/dev/null', lineno=304, col_offset=18), Mod(), Tuple([Name('executable', Load(), lineno=304, col_offset=50), Name('args', Load(), lineno=304, col_offset=62)], Load(), lineno=304, col_offset=50), lineno=304, col_offset=18), lineno=304, col_offset=12), With(Call(Attribute(Name('os', Load(), lineno=305, col_offset=17), 'popen', Load(), lineno=305, col_offset=17), [Name('cmd', Load(), lineno=305, col_offset=26)], [], None, None, lineno=305, col_offset=17), Name('pipe', Store(), lineno=305, col_offset=34), [For(Name('line', Store(), lineno=306, col_offset=20), Name('pipe', Load(), lineno=306, col_offset=28), [Assign([Name('words', Store(), lineno=307, col_offset=20)], Call(Attribute(Call(Attribute(Name('line', Load(), lineno=307, col_offset=28), 'lower', Load(), lineno=307, col_offset=28), [], [], None, None, lineno=307, col_offset=28), 'split', Load(), lineno=307, col_offset=28), [], [], None, None, lineno=307, col_offset=28), lineno=307, col_offset=20), For(Name('i', Store(), lineno=308, col_offset=24), Call(Name('range', Load(), lineno=308, col_offset=29), [Call(Name('len', Load(), lineno=308, col_offset=35), [Name('words', Load(), lineno=308, col_offset=39)], [], None, None, lineno=308, col_offset=35)], [], None, None, lineno=308, col_offset=29), [If(Compare(Subscript(Name('words', Load(), lineno=309, col_offset=27), Index(Name('i', Load(), lineno=309, col_offset=33)), Load(), lineno=309, col_offset=27), [In()], [Name('hw_identifiers', Load(), lineno=309, col_offset=39)], lineno=309, col_offset=27), [Return(Call(Name('int', Load(), lineno=310, col_offset=35), [Call(Attribute(Subscript(Name('words', Load(), lineno=311, col_offset=32), Index(Call(Name('get_index', Load(), lineno=311, col_offset=38), [Name('i', Load(), lineno=311, col_offset=48)], [], None, None, lineno=311, col_offset=38)), Load(), lineno=311, col_offset=32), 'replace', Load(), lineno=311, col_offset=32), [Str(':', lineno=311, col_offset=60), Str('', lineno=311, col_offset=65)], [], None, None, lineno=311, col_offset=32), Num(16, lineno=311, col_offset=70)], [], None, None, lineno=310, col_offset=35), lineno=310, col_offset=28)], [], lineno=309, col_offset=24)], [], lineno=308, col_offset=20)], [], lineno=306, col_offset=16)], lineno=305, col_offset=17)], [ExceptHandler(Name('IOError', Load(), lineno=312, col_offset=15), None, [Continue( lineno=313, col_offset=12)], lineno=312, col_offset=8)], [], lineno=301, col_offset=8)], [], lineno=296, col_offset=4), Return(Name('None', Load(), lineno=314, col_offset=11), lineno=314, col_offset=4)], [], lineno=294, col_offset=0), FunctionDef('_ifconfig_getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address on Unix by running ifconfig.', lineno=317, col_offset=4), lineno=317, col_offset=4), For(Name('args', Store(), lineno=320, col_offset=8), Tuple([Str('', lineno=320, col_offset=17), Str('-a', lineno=320, col_offset=21), Str('-av', lineno=320, col_offset=27)], Load(), lineno=320, col_offset=17), [Assign([Name('mac', Store(), lineno=321, col_offset=8)], Call(Name('_find_mac', Load(), lineno=321, col_offset=14), [Str('ifconfig', lineno=321, col_offset=24), Name('args', Load(), lineno=321, col_offset=36), List([Str('hwaddr', lineno=321, col_offset=43), Str('ether', lineno=321, col_offset=53)], Load(), lineno=321, col_offset=42), Lambda(arguments([Name('i', Param(), lineno=321, col_offset=70)], None, None, []), BinOp(Name('i', Load(), lineno=321, col_offset=73), Add(), Num(1, lineno=321, col_offset=75), lineno=321, col_offset=73), lineno=321, col_offset=63)], [], None, None, lineno=321, col_offset=14), lineno=321, col_offset=8), If(Name('mac', Load(), lineno=322, col_offset=11), [Return(Name('mac', Load(), lineno=323, col_offset=19), lineno=323, col_offset=12)], [], lineno=322, col_offset=8)], [], lineno=320, col_offset=4), Import([alias('socket', None)], lineno=325, col_offset=4), Assign([Name('ip_addr', Store(), lineno=326, col_offset=4)], Call(Attribute(Name('socket', Load(), lineno=326, col_offset=14), 'gethostbyname', Load(), lineno=326, col_offset=14), [Call(Attribute(Name('socket', Load(), lineno=326, col_offset=35), 'gethostname', Load(), lineno=326, col_offset=35), [], [], None, None, lineno=326, col_offset=35)], [], None, None, lineno=326, col_offset=14), lineno=326, col_offset=4), Assign([Name('mac', Store(), lineno=329, col_offset=4)], Call(Name('_find_mac', Load(), lineno=329, col_offset=10), [Str('arp', lineno=329, col_offset=20), Str('-an', lineno=329, col_offset=27), List([Name('ip_addr', Load(), lineno=329, col_offset=35)], Load(), lineno=329, col_offset=34), Lambda(arguments([Name('i', Param(), lineno=329, col_offset=52)], None, None, []), Num(-1, lineno=329, col_offset=56), lineno=329, col_offset=45)], [], None, None, lineno=329, col_offset=10), lineno=329, col_offset=4), If(Name('mac', Load(), lineno=330, col_offset=7), [Return(Name('mac', Load(), lineno=331, col_offset=15), lineno=331, col_offset=8)], [], lineno=330, col_offset=4), Assign([Name('mac', Store(), lineno=334, col_offset=4)], Call(Name('_find_mac', Load(), lineno=334, col_offset=10), [Str('lanscan', lineno=334, col_offset=20), Str('-ai', lineno=334, col_offset=31), List([Str('lan0', lineno=334, col_offset=39)], Load(), lineno=334, col_offset=38), Lambda(arguments([Name('i', Param(), lineno=334, col_offset=55)], None, None, []), Num(0, lineno=334, col_offset=58), lineno=334, col_offset=48)], [], None, None, lineno=334, col_offset=10), lineno=334, col_offset=4), If(Name('mac', Load(), lineno=335, col_offset=7), [Return(Name('mac', Load(), lineno=336, col_offset=15), lineno=336, col_offset=8)], [], lineno=335, col_offset=4), Return(Name('None', Load(), lineno=338, col_offset=11), lineno=338, col_offset=4)], [], lineno=316, col_offset=0), FunctionDef('_ipconfig_getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address on Windows by running ipconfig.exe.', lineno=341, col_offset=4), lineno=341, col_offset=4), Import([alias('os', None), alias('re', None)], lineno=342, col_offset=4), Assign([Name('dirs', Store(), lineno=343, col_offset=4)], List([Str('', lineno=343, col_offset=12), Str('c:\\windows\\system32', lineno=343, col_offset=16), Str('c:\\winnt\\system32', lineno=343, col_offset=40)], Load(), lineno=343, col_offset=11), lineno=343, col_offset=4), TryExcept([Import([alias('ctypes', None)], lineno=345, col_offset=8), Assign([Name('buffer', Store(), lineno=346, col_offset=8)], Call(Attribute(Name('ctypes', Load(), lineno=346, col_offset=17), 'create_string_buffer', Load(), lineno=346, col_offset=17), [Num(300, lineno=346, col_offset=45)], [], None, None, lineno=346, col_offset=17), lineno=346, col_offset=8), Expr(Call(Attribute(Attribute(Attribute(Name('ctypes', Load(), lineno=347, col_offset=8), 'windll', Load(), lineno=347, col_offset=8), 'kernel32', Load(), lineno=347, col_offset=8), 'GetSystemDirectoryA', Load(), lineno=347, col_offset=8), [Name('buffer', Load(), lineno=347, col_offset=51), Num(300, lineno=347, col_offset=59)], [], None, None, lineno=347, col_offset=8), lineno=347, col_offset=8), Expr(Call(Attribute(Name('dirs', Load(), lineno=348, col_offset=8), 'insert', Load(), lineno=348, col_offset=8), [Num(0, lineno=348, col_offset=20), Call(Attribute(Attribute(Name('buffer', Load(), lineno=348, col_offset=23), 'value', Load(), lineno=348, col_offset=23), 'decode', Load(), lineno=348, col_offset=23), [Str('mbcs', lineno=348, col_offset=43)], [], None, None, lineno=348, col_offset=23)], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8)], [ExceptHandler(None, None, [Pass( lineno=350, col_offset=8)], lineno=349, col_offset=4)], [], lineno=344, col_offset=4), For(Name('dir', Store(), lineno=351, col_offset=8), Name('dirs', Load(), lineno=351, col_offset=15), [TryFinally([TryExcept([Assign([Name('pipe', Store(), lineno=353, col_offset=12)], Call(Attribute(Name('os', Load(), lineno=353, col_offset=19), 'popen', Load(), lineno=353, col_offset=19), [BinOp(Call(Attribute(Attribute(Name('os', Load(), lineno=353, col_offset=28), 'path', Load(), lineno=353, col_offset=28), 'join', Load(), lineno=353, col_offset=28), [Name('dir', Load(), lineno=353, col_offset=41), Str('ipconfig', lineno=353, col_offset=46)], [], None, None, lineno=353, col_offset=28), Add(), Str(' /all', lineno=353, col_offset=60), lineno=353, col_offset=28)], [], None, None, lineno=353, col_offset=19), lineno=353, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=354, col_offset=15), None, [Continue( lineno=355, col_offset=12)], lineno=354, col_offset=8)], [For(Name('line', Store(), lineno=357, col_offset=16), Name('pipe', Load(), lineno=357, col_offset=24), [Assign([Name('value', Store(), lineno=358, col_offset=16)], Call(Attribute(Call(Attribute(Subscript(Call(Attribute(Name('line', Load(), lineno=358, col_offset=24), 'split', Load(), lineno=358, col_offset=24), [Str(':', lineno=358, col_offset=35)], [], None, None, lineno=358, col_offset=24), Index(Num(-1, lineno=358, col_offset=41)), Load(), lineno=358, col_offset=24), 'strip', Load(), lineno=358, col_offset=24), [], [], None, None, lineno=358, col_offset=24), 'lower', Load(), lineno=358, col_offset=24), [], [], None, None, lineno=358, col_offset=24), lineno=358, col_offset=16), If(Call(Attribute(Name('re', Load(), lineno=359, col_offset=19), 'match', Load(), lineno=359, col_offset=19), [Str('([0-9a-f][0-9a-f]-){5}[0-9a-f][0-9a-f]', lineno=359, col_offset=28), Name('value', Load(), lineno=359, col_offset=70)], [], None, None, lineno=359, col_offset=19), [Return(Call(Name('int', Load(), lineno=360, col_offset=27), [Call(Attribute(Name('value', Load(), lineno=360, col_offset=31), 'replace', Load(), lineno=360, col_offset=31), [Str('-', lineno=360, col_offset=45), Str('', lineno=360, col_offset=50)], [], None, None, lineno=360, col_offset=31), Num(16, lineno=360, col_offset=55)], [], None, None, lineno=360, col_offset=27), lineno=360, col_offset=20)], [], lineno=359, col_offset=16)], [], lineno=357, col_offset=12)], lineno=352, col_offset=8)], [Expr(Call(Attribute(Name('pipe', Load(), lineno=362, col_offset=12), 'close', Load(), lineno=362, col_offset=12), [], [], None, None, lineno=362, col_offset=12), lineno=362, col_offset=12)], lineno=352, col_offset=8)], [], lineno=351, col_offset=4)], [], lineno=340, col_offset=0), FunctionDef('_netbios_getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address on Windows using NetBIOS calls.\n    See http://support.microsoft.com/kb/118623 for details.', lineno=366, col_offset=-1), lineno=366, col_offset=-1), Import([alias('win32wnet', None), alias('netbios', None)], lineno=367, col_offset=4), Assign([Name('ncb', Store(), lineno=368, col_offset=4)], Call(Attribute(Name('netbios', Load(), lineno=368, col_offset=10), 'NCB', Load(), lineno=368, col_offset=10), [], [], None, None, lineno=368, col_offset=10), lineno=368, col_offset=4), Assign([Attribute(Name('ncb', Load(), lineno=369, col_offset=4), 'Command', Store(), lineno=369, col_offset=4)], Attribute(Name('netbios', Load(), lineno=369, col_offset=18), 'NCBENUM', Load(), lineno=369, col_offset=18), lineno=369, col_offset=4), Assign([Attribute(Name('ncb', Load(), lineno=370, col_offset=4), 'Buffer', Store(), lineno=370, col_offset=4), Name('adapters', Store(), lineno=370, col_offset=17)], Call(Attribute(Name('netbios', Load(), lineno=370, col_offset=28), 'LANA_ENUM', Load(), lineno=370, col_offset=28), [], [], None, None, lineno=370, col_offset=28), lineno=370, col_offset=4), Expr(Call(Attribute(Name('adapters', Load(), lineno=371, col_offset=4), '_pack', Load(), lineno=371, col_offset=4), [], [], None, None, lineno=371, col_offset=4), lineno=371, col_offset=4), If(Compare(Call(Attribute(Name('win32wnet', Load(), lineno=372, col_offset=7), 'Netbios', Load(), lineno=372, col_offset=7), [Name('ncb', Load(), lineno=372, col_offset=25)], [], None, None, lineno=372, col_offset=7), [NotEq()], [Num(0, lineno=372, col_offset=33)], lineno=372, col_offset=7), [Return(None, lineno=373, col_offset=8)], [], lineno=372, col_offset=4), Expr(Call(Attribute(Name('adapters', Load(), lineno=374, col_offset=4), '_unpack', Load(), lineno=374, col_offset=4), [], [], None, None, lineno=374, col_offset=4), lineno=374, col_offset=4), For(Name('i', Store(), lineno=375, col_offset=8), Call(Name('range', Load(), lineno=375, col_offset=13), [Attribute(Name('adapters', Load(), lineno=375, col_offset=19), 'length', Load(), lineno=375, col_offset=19)], [], None, None, lineno=375, col_offset=13), [Expr(Call(Attribute(Name('ncb', Load(), lineno=376, col_offset=8), 'Reset', Load(), lineno=376, col_offset=8), [], [], None, None, lineno=376, col_offset=8), lineno=376, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=377, col_offset=8), 'Command', Store(), lineno=377, col_offset=8)], Attribute(Name('netbios', Load(), lineno=377, col_offset=22), 'NCBRESET', Load(), lineno=377, col_offset=22), lineno=377, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=378, col_offset=8), 'Lana_num', Store(), lineno=378, col_offset=8)], Call(Name('ord', Load(), lineno=378, col_offset=23), [Subscript(Attribute(Name('adapters', Load(), lineno=378, col_offset=27), 'lana', Load(), lineno=378, col_offset=27), Index(Name('i', Load(), lineno=378, col_offset=41)), Load(), lineno=378, col_offset=27)], [], None, None, lineno=378, col_offset=23), lineno=378, col_offset=8), If(Compare(Call(Attribute(Name('win32wnet', Load(), lineno=379, col_offset=11), 'Netbios', Load(), lineno=379, col_offset=11), [Name('ncb', Load(), lineno=379, col_offset=29)], [], None, None, lineno=379, col_offset=11), [NotEq()], [Num(0, lineno=379, col_offset=37)], lineno=379, col_offset=11), [Continue( lineno=380, col_offset=12)], [], lineno=379, col_offset=8), Expr(Call(Attribute(Name('ncb', Load(), lineno=381, col_offset=8), 'Reset', Load(), lineno=381, col_offset=8), [], [], None, None, lineno=381, col_offset=8), lineno=381, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=382, col_offset=8), 'Command', Store(), lineno=382, col_offset=8)], Attribute(Name('netbios', Load(), lineno=382, col_offset=22), 'NCBASTAT', Load(), lineno=382, col_offset=22), lineno=382, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=383, col_offset=8), 'Lana_num', Store(), lineno=383, col_offset=8)], Call(Name('ord', Load(), lineno=383, col_offset=23), [Subscript(Attribute(Name('adapters', Load(), lineno=383, col_offset=27), 'lana', Load(), lineno=383, col_offset=27), Index(Name('i', Load(), lineno=383, col_offset=41)), Load(), lineno=383, col_offset=27)], [], None, None, lineno=383, col_offset=23), lineno=383, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=384, col_offset=8), 'Callname', Store(), lineno=384, col_offset=8)], Call(Attribute(Str('*', lineno=384, col_offset=23), 'ljust', Load(), lineno=384, col_offset=23), [Num(16, lineno=384, col_offset=33)], [], None, None, lineno=384, col_offset=23), lineno=384, col_offset=8), Assign([Attribute(Name('ncb', Load(), lineno=385, col_offset=8), 'Buffer', Store(), lineno=385, col_offset=8), Name('status', Store(), lineno=385, col_offset=21)], Call(Attribute(Name('netbios', Load(), lineno=385, col_offset=30), 'ADAPTER_STATUS', Load(), lineno=385, col_offset=30), [], [], None, None, lineno=385, col_offset=30), lineno=385, col_offset=8), If(Compare(Call(Attribute(Name('win32wnet', Load(), lineno=386, col_offset=11), 'Netbios', Load(), lineno=386, col_offset=11), [Name('ncb', Load(), lineno=386, col_offset=29)], [], None, None, lineno=386, col_offset=11), [NotEq()], [Num(0, lineno=386, col_offset=37)], lineno=386, col_offset=11), [Continue( lineno=387, col_offset=12)], [], lineno=386, col_offset=8), Expr(Call(Attribute(Name('status', Load(), lineno=388, col_offset=8), '_unpack', Load(), lineno=388, col_offset=8), [], [], None, None, lineno=388, col_offset=8), lineno=388, col_offset=8), Assign([Name('bytes', Store(), lineno=389, col_offset=8)], Call(Name('map', Load(), lineno=389, col_offset=16), [Name('ord', Load(), lineno=389, col_offset=20), Attribute(Name('status', Load(), lineno=389, col_offset=25), 'adapter_address', Load(), lineno=389, col_offset=25)], [], None, None, lineno=389, col_offset=16), lineno=389, col_offset=8), Return(BinOp(BinOp(BinOp(BinOp(BinOp(BinOp(Subscript(Name('bytes', Load(), lineno=390, col_offset=17), Index(Num(0, lineno=390, col_offset=23)), Load(), lineno=390, col_offset=17), LShift(), Num(40L, lineno=390, col_offset=27), lineno=390, col_offset=17), Add(), BinOp(Subscript(Name('bytes', Load(), lineno=390, col_offset=35), Index(Num(1, lineno=390, col_offset=41)), Load(), lineno=390, col_offset=35), LShift(), Num(32L, lineno=390, col_offset=45), lineno=390, col_offset=35), lineno=390, col_offset=16), Add(), BinOp(Subscript(Name('bytes', Load(), lineno=390, col_offset=53), Index(Num(2, lineno=390, col_offset=59)), Load(), lineno=390, col_offset=53), LShift(), Num(24L, lineno=390, col_offset=63), lineno=390, col_offset=53), lineno=390, col_offset=50), Add(), BinOp(Subscript(Name('bytes', Load(), lineno=391, col_offset=17), Index(Num(3, lineno=391, col_offset=23)), Load(), lineno=391, col_offset=17), LShift(), Num(16L, lineno=391, col_offset=27), lineno=391, col_offset=17), lineno=390, col_offset=68), Add(), BinOp(Subscript(Name('bytes', Load(), lineno=391, col_offset=35), Index(Num(4, lineno=391, col_offset=41)), Load(), lineno=391, col_offset=35), LShift(), Num(8L, lineno=391, col_offset=45), lineno=391, col_offset=35), lineno=391, col_offset=32), Add(), Subscript(Name('bytes', Load(), lineno=391, col_offset=51), Index(Num(5, lineno=391, col_offset=57)), Load(), lineno=391, col_offset=51), lineno=391, col_offset=49), lineno=390, col_offset=8)], [], lineno=375, col_offset=4)], [], lineno=364, col_offset=0), Assign([Name('_uuid_generate_random', Store(), lineno=396, col_offset=0), Name('_uuid_generate_time', Store(), lineno=396, col_offset=24), Name('_UuidCreate', Store(), lineno=396, col_offset=46)], Name('None', Load(), lineno=396, col_offset=60), lineno=396, col_offset=0), TryExcept([Import([alias('ctypes', None), alias('ctypes.util', None)], lineno=398, col_offset=4), For(Name('libname', Store(), lineno=402, col_offset=8), List([Str('uuid', lineno=402, col_offset=20), Str('c', lineno=402, col_offset=28)], Load(), lineno=402, col_offset=19), [TryExcept([Assign([Name('lib', Store(), lineno=404, col_offset=12)], Call(Attribute(Name('ctypes', Load(), lineno=404, col_offset=18), 'CDLL', Load(), lineno=404, col_offset=18), [Call(Attribute(Attribute(Name('ctypes', Load(), lineno=404, col_offset=30), 'util', Load(), lineno=404, col_offset=30), 'find_library', Load(), lineno=404, col_offset=30), [Name('libname', Load(), lineno=404, col_offset=55)], [], None, None, lineno=404, col_offset=30)], [], None, None, lineno=404, col_offset=18), lineno=404, col_offset=12)], [ExceptHandler(None, None, [Continue( lineno=406, col_offset=12)], lineno=405, col_offset=8)], [], lineno=403, col_offset=8), If(Call(Name('hasattr', Load(), lineno=407, col_offset=11), [Name('lib', Load(), lineno=407, col_offset=19), Str('uuid_generate_random', lineno=407, col_offset=24)], [], None, None, lineno=407, col_offset=11), [Assign([Name('_uuid_generate_random', Store(), lineno=408, col_offset=12)], Attribute(Name('lib', Load(), lineno=408, col_offset=36), 'uuid_generate_random', Load(), lineno=408, col_offset=36), lineno=408, col_offset=12)], [], lineno=407, col_offset=8), If(Call(Name('hasattr', Load(), lineno=409, col_offset=11), [Name('lib', Load(), lineno=409, col_offset=19), Str('uuid_generate_time', lineno=409, col_offset=24)], [], None, None, lineno=409, col_offset=11), [Assign([Name('_uuid_generate_time', Store(), lineno=410, col_offset=12)], Attribute(Name('lib', Load(), lineno=410, col_offset=34), 'uuid_generate_time', Load(), lineno=410, col_offset=34), lineno=410, col_offset=12)], [], lineno=409, col_offset=8)], [], lineno=402, col_offset=4), Import([alias('sys', None)], lineno=419, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=420, col_offset=7), 'platform', Load(), lineno=420, col_offset=7), [Eq()], [Str('darwin', lineno=420, col_offset=23)], lineno=420, col_offset=7), [Import([alias('os', None)], lineno=421, col_offset=8), If(Compare(Call(Name('int', Load(), lineno=422, col_offset=11), [Subscript(Call(Attribute(Subscript(Call(Attribute(Name('os', Load(), lineno=422, col_offset=15), 'uname', Load(), lineno=422, col_offset=15), [], [], None, None, lineno=422, col_offset=15), Index(Num(2, lineno=422, col_offset=26)), Load(), lineno=422, col_offset=15), 'split', Load(), lineno=422, col_offset=15), [Str('.', lineno=422, col_offset=35)], [], None, None, lineno=422, col_offset=15), Index(Num(0, lineno=422, col_offset=40)), Load(), lineno=422, col_offset=15)], [], None, None, lineno=422, col_offset=11), [GtE()], [Num(9, lineno=422, col_offset=47)], lineno=422, col_offset=11), [Assign([Name('_uuid_generate_random', Store(), lineno=423, col_offset=12), Name('_uuid_generate_time', Store(), lineno=423, col_offset=36)], Name('None', Load(), lineno=423, col_offset=58), lineno=423, col_offset=12)], [], lineno=422, col_offset=8)], [], lineno=420, col_offset=4), TryExcept([Assign([Name('lib', Store(), lineno=434, col_offset=8)], Attribute(Attribute(Name('ctypes', Load(), lineno=434, col_offset=14), 'windll', Load(), lineno=434, col_offset=14), 'rpcrt4', Load(), lineno=434, col_offset=14), lineno=434, col_offset=8)], [ExceptHandler(None, None, [Assign([Name('lib', Store(), lineno=436, col_offset=8)], Name('None', Load(), lineno=436, col_offset=14), lineno=436, col_offset=8)], lineno=435, col_offset=4)], [], lineno=433, col_offset=4), Assign([Name('_UuidCreate', Store(), lineno=437, col_offset=4)], Call(Name('getattr', Load(), lineno=437, col_offset=18), [Name('lib', Load(), lineno=437, col_offset=26), Str('UuidCreateSequential', lineno=437, col_offset=31), Call(Name('getattr', Load(), lineno=438, col_offset=26), [Name('lib', Load(), lineno=438, col_offset=34), Str('UuidCreate', lineno=438, col_offset=39), Name('None', Load(), lineno=438, col_offset=53)], [], None, None, lineno=438, col_offset=26)], [], None, None, lineno=437, col_offset=18), lineno=437, col_offset=4)], [ExceptHandler(None, None, [Pass( lineno=440, col_offset=4)], lineno=439, col_offset=0)], [], lineno=397, col_offset=0), FunctionDef('_unixdll_getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address on Unix using ctypes.', lineno=443, col_offset=4), lineno=443, col_offset=4), Assign([Name('_buffer', Store(), lineno=444, col_offset=4)], Call(Attribute(Name('ctypes', Load(), lineno=444, col_offset=14), 'create_string_buffer', Load(), lineno=444, col_offset=14), [Num(16, lineno=444, col_offset=42)], [], None, None, lineno=444, col_offset=14), lineno=444, col_offset=4), Expr(Call(Name('_uuid_generate_time', Load(), lineno=445, col_offset=4), [Name('_buffer', Load(), lineno=445, col_offset=24)], [], None, None, lineno=445, col_offset=4), lineno=445, col_offset=4), Return(Attribute(Call(Name('UUID', Load(), lineno=446, col_offset=11), [], [keyword('bytes', Attribute(Name('_buffer', Load(), lineno=446, col_offset=22), 'raw', Load(), lineno=446, col_offset=22))], None, None, lineno=446, col_offset=11), 'node', Load(), lineno=446, col_offset=11), lineno=446, col_offset=4)], [], lineno=442, col_offset=0), FunctionDef('_windll_getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address on Windows using ctypes.', lineno=449, col_offset=4), lineno=449, col_offset=4), Assign([Name('_buffer', Store(), lineno=450, col_offset=4)], Call(Attribute(Name('ctypes', Load(), lineno=450, col_offset=14), 'create_string_buffer', Load(), lineno=450, col_offset=14), [Num(16, lineno=450, col_offset=42)], [], None, None, lineno=450, col_offset=14), lineno=450, col_offset=4), If(Compare(Call(Name('_UuidCreate', Load(), lineno=451, col_offset=7), [Name('_buffer', Load(), lineno=451, col_offset=19)], [], None, None, lineno=451, col_offset=7), [Eq()], [Num(0, lineno=451, col_offset=31)], lineno=451, col_offset=7), [Return(Attribute(Call(Name('UUID', Load(), lineno=452, col_offset=15), [], [keyword('bytes', Attribute(Name('_buffer', Load(), lineno=452, col_offset=26), 'raw', Load(), lineno=452, col_offset=26))], None, None, lineno=452, col_offset=15), 'node', Load(), lineno=452, col_offset=15), lineno=452, col_offset=8)], [], lineno=451, col_offset=4)], [], lineno=448, col_offset=0), FunctionDef('_random_getnode', arguments([], None, None, []), [Expr(Str('Get a random node ID, with eighth bit set as suggested by RFC 4122.', lineno=455, col_offset=4), lineno=455, col_offset=4), Import([alias('random', None)], lineno=456, col_offset=4), Return(BinOp(Call(Attribute(Name('random', Load(), lineno=457, col_offset=11), 'randrange', Load(), lineno=457, col_offset=11), [Num(0, lineno=457, col_offset=28), BinOp(Num(1, lineno=457, col_offset=31), LShift(), Num(48L, lineno=457, col_offset=34), lineno=457, col_offset=31)], [], None, None, lineno=457, col_offset=11), BitOr(), Num(1099511627776L, lineno=457, col_offset=41), lineno=457, col_offset=11), lineno=457, col_offset=4)], [], lineno=454, col_offset=0), Assign([Name('_node', Store(), lineno=459, col_offset=0)], Name('None', Load(), lineno=459, col_offset=8), lineno=459, col_offset=0), FunctionDef('getnode', arguments([], None, None, []), [Expr(Str('Get the hardware address as a 48-bit positive integer.\n\n    The first time this runs, it may launch a separate program, which could\n    be quite slow.  If all attempts to obtain the hardware address fail, we\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\n    in RFC 4122.\n    ', lineno=468, col_offset=-1), lineno=468, col_offset=-1), Global(['_node'], lineno=470, col_offset=4), If(Compare(Name('_node', Load(), lineno=471, col_offset=7), [IsNot()], [Name('None', Load(), lineno=471, col_offset=20)], lineno=471, col_offset=7), [Return(Name('_node', Load(), lineno=472, col_offset=15), lineno=472, col_offset=8)], [], lineno=471, col_offset=4), Import([alias('sys', None)], lineno=474, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=475, col_offset=7), 'platform', Load(), lineno=475, col_offset=7), [Eq()], [Str('win32', lineno=475, col_offset=23)], lineno=475, col_offset=7), [Assign([Name('getters', Store(), lineno=476, col_offset=8)], List([Name('_windll_getnode', Load(), lineno=476, col_offset=19), Name('_netbios_getnode', Load(), lineno=476, col_offset=36), Name('_ipconfig_getnode', Load(), lineno=476, col_offset=54)], Load(), lineno=476, col_offset=18), lineno=476, col_offset=8)], [Assign([Name('getters', Store(), lineno=478, col_offset=8)], List([Name('_unixdll_getnode', Load(), lineno=478, col_offset=19), Name('_ifconfig_getnode', Load(), lineno=478, col_offset=37)], Load(), lineno=478, col_offset=18), lineno=478, col_offset=8)], lineno=475, col_offset=4), For(Name('getter', Store(), lineno=480, col_offset=8), BinOp(Name('getters', Load(), lineno=480, col_offset=18), Add(), List([Name('_random_getnode', Load(), lineno=480, col_offset=29)], Load(), lineno=480, col_offset=28), lineno=480, col_offset=18), [TryExcept([Assign([Name('_node', Store(), lineno=482, col_offset=12)], Call(Name('getter', Load(), lineno=482, col_offset=20), [], [], None, None, lineno=482, col_offset=20), lineno=482, col_offset=12)], [ExceptHandler(None, None, [Continue( lineno=484, col_offset=12)], lineno=483, col_offset=8)], [], lineno=481, col_offset=8), If(Compare(Name('_node', Load(), lineno=485, col_offset=11), [IsNot()], [Name('None', Load(), lineno=485, col_offset=24)], lineno=485, col_offset=11), [Return(Name('_node', Load(), lineno=486, col_offset=19), lineno=486, col_offset=12)], [], lineno=485, col_offset=8)], [], lineno=480, col_offset=4)], [], lineno=461, col_offset=0), Assign([Name('_last_timestamp', Store(), lineno=488, col_offset=0)], Name('None', Load(), lineno=488, col_offset=18), lineno=488, col_offset=0), FunctionDef('uuid1', arguments([Name('node', Param(), lineno=490, col_offset=10), Name('clock_seq', Param(), lineno=490, col_offset=21)], None, None, [Name('None', Load(), lineno=490, col_offset=15), Name('None', Load(), lineno=490, col_offset=31)]), [Expr(Str("Generate a UUID from a host ID, sequence number, and the current time.\n    If 'node' is not given, getnode() is used to obtain the hardware\n    address.  If 'clock_seq' is given, it is used as the sequence number;\n    otherwise a random 14-bit sequence number is chosen.", lineno=494, col_offset=-1), lineno=494, col_offset=-1), If(BoolOp(And(), [Name('_uuid_generate_time', Load(), lineno=498, col_offset=7), Compare(Name('node', Load(), lineno=498, col_offset=31), [Is(), Is()], [Name('clock_seq', Load(), lineno=498, col_offset=39), Name('None', Load(), lineno=498, col_offset=52)], lineno=498, col_offset=31)], lineno=498, col_offset=7), [Assign([Name('_buffer', Store(), lineno=499, col_offset=8)], Call(Attribute(Name('ctypes', Load(), lineno=499, col_offset=18), 'create_string_buffer', Load(), lineno=499, col_offset=18), [Num(16, lineno=499, col_offset=46)], [], None, None, lineno=499, col_offset=18), lineno=499, col_offset=8), Expr(Call(Name('_uuid_generate_time', Load(), lineno=500, col_offset=8), [Name('_buffer', Load(), lineno=500, col_offset=28)], [], None, None, lineno=500, col_offset=8), lineno=500, col_offset=8), Return(Call(Name('UUID', Load(), lineno=501, col_offset=15), [], [keyword('bytes', Attribute(Name('_buffer', Load(), lineno=501, col_offset=26), 'raw', Load(), lineno=501, col_offset=26))], None, None, lineno=501, col_offset=15), lineno=501, col_offset=8)], [], lineno=498, col_offset=4), Global(['_last_timestamp'], lineno=503, col_offset=4), Import([alias('time', None)], lineno=504, col_offset=4), Assign([Name('nanoseconds', Store(), lineno=505, col_offset=4)], Call(Name('int', Load(), lineno=505, col_offset=18), [BinOp(Call(Attribute(Name('time', Load(), lineno=505, col_offset=22), 'time', Load(), lineno=505, col_offset=22), [], [], None, None, lineno=505, col_offset=22), Mult(), Num(1000000000.0, lineno=505, col_offset=36), lineno=505, col_offset=22)], [], None, None, lineno=505, col_offset=18), lineno=505, col_offset=4), Assign([Name('timestamp', Store(), lineno=508, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=508, col_offset=16), [BinOp(Name('nanoseconds', Load(), lineno=508, col_offset=20), FloorDiv(), Num(100, lineno=508, col_offset=33), lineno=508, col_offset=20)], [], None, None, lineno=508, col_offset=16), Add(), Num(122192928000000000L, lineno=508, col_offset=40), lineno=508, col_offset=16), lineno=508, col_offset=4), If(BoolOp(And(), [Compare(Name('_last_timestamp', Load(), lineno=509, col_offset=7), [IsNot()], [Name('None', Load(), lineno=509, col_offset=30)], lineno=509, col_offset=7), Compare(Name('timestamp', Load(), lineno=509, col_offset=39), [LtE()], [Name('_last_timestamp', Load(), lineno=509, col_offset=52)], lineno=509, col_offset=39)], lineno=509, col_offset=7), [Assign([Name('timestamp', Store(), lineno=510, col_offset=8)], BinOp(Name('_last_timestamp', Load(), lineno=510, col_offset=20), Add(), Num(1, lineno=510, col_offset=38), lineno=510, col_offset=20), lineno=510, col_offset=8)], [], lineno=509, col_offset=4), Assign([Name('_last_timestamp', Store(), lineno=511, col_offset=4)], Name('timestamp', Load(), lineno=511, col_offset=22), lineno=511, col_offset=4), If(Compare(Name('clock_seq', Load(), lineno=512, col_offset=7), [Is()], [Name('None', Load(), lineno=512, col_offset=20)], lineno=512, col_offset=7), [Import([alias('random', None)], lineno=513, col_offset=8), Assign([Name('clock_seq', Store(), lineno=514, col_offset=8)], Call(Attribute(Name('random', Load(), lineno=514, col_offset=20), 'randrange', Load(), lineno=514, col_offset=20), [BinOp(Num(1, lineno=514, col_offset=37), LShift(), Num(14L, lineno=514, col_offset=40), lineno=514, col_offset=37)], [], None, None, lineno=514, col_offset=20), lineno=514, col_offset=8)], [], lineno=512, col_offset=4), Assign([Name('time_low', Store(), lineno=515, col_offset=4)], BinOp(Name('timestamp', Load(), lineno=515, col_offset=15), BitAnd(), Num(4294967295L, lineno=515, col_offset=27), lineno=515, col_offset=15), lineno=515, col_offset=4), Assign([Name('time_mid', Store(), lineno=516, col_offset=4)], BinOp(BinOp(Name('timestamp', Load(), lineno=516, col_offset=16), RShift(), Num(32L, lineno=516, col_offset=29), lineno=516, col_offset=16), BitAnd(), Num(65535L, lineno=516, col_offset=36), lineno=516, col_offset=15), lineno=516, col_offset=4), Assign([Name('time_hi_version', Store(), lineno=517, col_offset=4)], BinOp(BinOp(Name('timestamp', Load(), lineno=517, col_offset=23), RShift(), Num(48L, lineno=517, col_offset=36), lineno=517, col_offset=23), BitAnd(), Num(4095L, lineno=517, col_offset=43), lineno=517, col_offset=22), lineno=517, col_offset=4), Assign([Name('clock_seq_low', Store(), lineno=518, col_offset=4)], BinOp(Name('clock_seq', Load(), lineno=518, col_offset=20), BitAnd(), Num(255L, lineno=518, col_offset=32), lineno=518, col_offset=20), lineno=518, col_offset=4), Assign([Name('clock_seq_hi_variant', Store(), lineno=519, col_offset=4)], BinOp(BinOp(Name('clock_seq', Load(), lineno=519, col_offset=28), RShift(), Num(8L, lineno=519, col_offset=41), lineno=519, col_offset=28), BitAnd(), Num(63L, lineno=519, col_offset=47), lineno=519, col_offset=27), lineno=519, col_offset=4), If(Compare(Name('node', Load(), lineno=520, col_offset=7), [Is()], [Name('None', Load(), lineno=520, col_offset=15)], lineno=520, col_offset=7), [Assign([Name('node', Store(), lineno=521, col_offset=8)], Call(Name('getnode', Load(), lineno=521, col_offset=15), [], [], None, None, lineno=521, col_offset=15), lineno=521, col_offset=8)], [], lineno=520, col_offset=4), Return(Call(Name('UUID', Load(), lineno=522, col_offset=11), [], [keyword('fields', Tuple([Name('time_low', Load(), lineno=522, col_offset=24), Name('time_mid', Load(), lineno=522, col_offset=34), Name('time_hi_version', Load(), lineno=522, col_offset=44), Name('clock_seq_hi_variant', Load(), lineno=523, col_offset=24), Name('clock_seq_low', Load(), lineno=523, col_offset=46), Name('node', Load(), lineno=523, col_offset=61)], Load(), lineno=522, col_offset=24)), keyword('version', Num(1, lineno=523, col_offset=76))], None, None, lineno=522, col_offset=11), lineno=522, col_offset=4)], [], lineno=490, col_offset=0), FunctionDef('uuid3', arguments([Name('namespace', Param(), lineno=525, col_offset=10), Name('name', Param(), lineno=525, col_offset=21)], None, None, []), [Expr(Str('Generate a UUID from the MD5 hash of a namespace UUID and a name.', lineno=526, col_offset=4), lineno=526, col_offset=4), ImportFrom('hashlib', [alias('md5', None)], 0, lineno=527, col_offset=4), Assign([Name('hash', Store(), lineno=528, col_offset=4)], Call(Attribute(Call(Name('md5', Load(), lineno=528, col_offset=11), [BinOp(Attribute(Name('namespace', Load(), lineno=528, col_offset=15), 'bytes', Load(), lineno=528, col_offset=15), Add(), Name('name', Load(), lineno=528, col_offset=33), lineno=528, col_offset=15)], [], None, None, lineno=528, col_offset=11), 'digest', Load(), lineno=528, col_offset=11), [], [], None, None, lineno=528, col_offset=11), lineno=528, col_offset=4), Return(Call(Name('UUID', Load(), lineno=529, col_offset=11), [], [keyword('bytes', Subscript(Name('hash', Load(), lineno=529, col_offset=22), Slice(None, Num(16, lineno=529, col_offset=28), None), Load(), lineno=529, col_offset=22)), keyword('version', Num(3, lineno=529, col_offset=41))], None, None, lineno=529, col_offset=11), lineno=529, col_offset=4)], [], lineno=525, col_offset=0), FunctionDef('uuid4', arguments([], None, None, []), [Expr(Str('Generate a random UUID.', lineno=532, col_offset=4), lineno=532, col_offset=4), If(Name('_uuid_generate_random', Load(), lineno=535, col_offset=7), [Assign([Name('_buffer', Store(), lineno=536, col_offset=8)], Call(Attribute(Name('ctypes', Load(), lineno=536, col_offset=18), 'create_string_buffer', Load(), lineno=536, col_offset=18), [Num(16, lineno=536, col_offset=46)], [], None, None, lineno=536, col_offset=18), lineno=536, col_offset=8), Expr(Call(Name('_uuid_generate_random', Load(), lineno=537, col_offset=8), [Name('_buffer', Load(), lineno=537, col_offset=30)], [], None, None, lineno=537, col_offset=8), lineno=537, col_offset=8), Return(Call(Name('UUID', Load(), lineno=538, col_offset=15), [], [keyword('bytes', Attribute(Name('_buffer', Load(), lineno=538, col_offset=26), 'raw', Load(), lineno=538, col_offset=26))], None, None, lineno=538, col_offset=15), lineno=538, col_offset=8)], [], lineno=535, col_offset=4), TryExcept([Import([alias('os', None)], lineno=542, col_offset=8), Return(Call(Name('UUID', Load(), lineno=543, col_offset=15), [], [keyword('bytes', Call(Attribute(Name('os', Load(), lineno=543, col_offset=26), 'urandom', Load(), lineno=543, col_offset=26), [Num(16, lineno=543, col_offset=37)], [], None, None, lineno=543, col_offset=26)), keyword('version', Num(4, lineno=543, col_offset=50))], None, None, lineno=543, col_offset=15), lineno=543, col_offset=8)], [ExceptHandler(None, None, [Import([alias('random', None)], lineno=545, col_offset=8), Assign([Name('bytes', Store(), lineno=546, col_offset=8)], ListComp(Call(Name('chr', Load(), lineno=546, col_offset=17), [Call(Attribute(Name('random', Load(), lineno=546, col_offset=21), 'randrange', Load(), lineno=546, col_offset=21), [Num(256, lineno=546, col_offset=38)], [], None, None, lineno=546, col_offset=21)], [], None, None, lineno=546, col_offset=17), [comprehension(Name('i', Store(), lineno=546, col_offset=48), Call(Name('range', Load(), lineno=546, col_offset=53), [Num(16, lineno=546, col_offset=59)], [], None, None, lineno=546, col_offset=53), [])], lineno=546, col_offset=17), lineno=546, col_offset=8), Return(Call(Name('UUID', Load(), lineno=547, col_offset=15), [], [keyword('bytes', Name('bytes', Load(), lineno=547, col_offset=26)), keyword('version', Num(4, lineno=547, col_offset=41))], None, None, lineno=547, col_offset=15), lineno=547, col_offset=8)], lineno=544, col_offset=4)], [], lineno=541, col_offset=4)], [], lineno=531, col_offset=0), FunctionDef('uuid5', arguments([Name('namespace', Param(), lineno=549, col_offset=10), Name('name', Param(), lineno=549, col_offset=21)], None, None, []), [Expr(Str('Generate a UUID from the SHA-1 hash of a namespace UUID and a name.', lineno=550, col_offset=4), lineno=550, col_offset=4), ImportFrom('hashlib', [alias('sha1', None)], 0, lineno=551, col_offset=4), Assign([Name('hash', Store(), lineno=552, col_offset=4)], Call(Attribute(Call(Name('sha1', Load(), lineno=552, col_offset=11), [BinOp(Attribute(Name('namespace', Load(), lineno=552, col_offset=16), 'bytes', Load(), lineno=552, col_offset=16), Add(), Name('name', Load(), lineno=552, col_offset=34), lineno=552, col_offset=16)], [], None, None, lineno=552, col_offset=11), 'digest', Load(), lineno=552, col_offset=11), [], [], None, None, lineno=552, col_offset=11), lineno=552, col_offset=4), Return(Call(Name('UUID', Load(), lineno=553, col_offset=11), [], [keyword('bytes', Subscript(Name('hash', Load(), lineno=553, col_offset=22), Slice(None, Num(16, lineno=553, col_offset=28), None), Load(), lineno=553, col_offset=22)), keyword('version', Num(5, lineno=553, col_offset=41))], None, None, lineno=553, col_offset=11), lineno=553, col_offset=4)], [], lineno=549, col_offset=0), Assign([Name('NAMESPACE_DNS', Store(), lineno=557, col_offset=0)], Call(Name('UUID', Load(), lineno=557, col_offset=16), [Str('6ba7b810-9dad-11d1-80b4-00c04fd430c8', lineno=557, col_offset=21)], [], None, None, lineno=557, col_offset=16), lineno=557, col_offset=0), Assign([Name('NAMESPACE_URL', Store(), lineno=558, col_offset=0)], Call(Name('UUID', Load(), lineno=558, col_offset=16), [Str('6ba7b811-9dad-11d1-80b4-00c04fd430c8', lineno=558, col_offset=21)], [], None, None, lineno=558, col_offset=16), lineno=558, col_offset=0), Assign([Name('NAMESPACE_OID', Store(), lineno=559, col_offset=0)], Call(Name('UUID', Load(), lineno=559, col_offset=16), [Str('6ba7b812-9dad-11d1-80b4-00c04fd430c8', lineno=559, col_offset=21)], [], None, None, lineno=559, col_offset=16), lineno=559, col_offset=0), Assign([Name('NAMESPACE_X500', Store(), lineno=560, col_offset=0)], Call(Name('UUID', Load(), lineno=560, col_offset=17), [Str('6ba7b814-9dad-11d1-80b4-00c04fd430c8', lineno=560, col_offset=22)], [], None, None, lineno=560, col_offset=17), lineno=560, col_offset=0)])
