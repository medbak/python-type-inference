Module([ImportFrom('ctypes', [alias('*', None)], 0, lineno=3, col_offset=0), ImportFrom('ctypes.test', [alias('is_resource_enabled', None)], 0, lineno=4, col_offset=0), Import([alias('unittest', None), alias('sys', None)], lineno=5, col_offset=0), Import([alias('_ctypes_test', None)], lineno=7, col_offset=0), If(BoolOp(And(), [Compare(Attribute(Name('sys', Load(), lineno=9, col_offset=3), 'platform', Load(), lineno=9, col_offset=3), [Eq()], [Str('win32', lineno=9, col_offset=19)], lineno=9, col_offset=3), Compare(Call(Name('sizeof', Load(), lineno=9, col_offset=31), [Name('c_void_p', Load(), lineno=9, col_offset=38)], [], None, None, lineno=9, col_offset=31), [Eq()], [Call(Name('sizeof', Load(), lineno=9, col_offset=51), [Name('c_int', Load(), lineno=9, col_offset=58)], [], None, None, lineno=9, col_offset=51)], lineno=9, col_offset=31)], lineno=9, col_offset=3), [ClassDef('WindowsTestCase', [Attribute(Name('unittest', Load(), lineno=12, col_offset=26), 'TestCase', Load(), lineno=12, col_offset=26)], [FunctionDef('test_callconv_1', arguments([Name('self', Param(), lineno=13, col_offset=28)], None, None, []), [Assign([Name('IsWindow', Store(), lineno=16, col_offset=12)], Attribute(Attribute(Name('windll', Load(), lineno=16, col_offset=23), 'user32', Load(), lineno=16, col_offset=23), 'IsWindow', Load(), lineno=16, col_offset=23), lineno=16, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=18, col_offset=12), 'assertRaises', Load(), lineno=18, col_offset=12), [Name('ValueError', Load(), lineno=18, col_offset=30), Name('IsWindow', Load(), lineno=18, col_offset=42)], [], None, None, lineno=18, col_offset=12), lineno=18, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=21, col_offset=12), 'assertEqual', Load(), lineno=21, col_offset=12), [Num(0, lineno=21, col_offset=29), Call(Name('IsWindow', Load(), lineno=21, col_offset=32), [Num(0, lineno=21, col_offset=41)], [], None, None, lineno=21, col_offset=32)], [], None, None, lineno=21, col_offset=12), lineno=21, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=24, col_offset=12), 'assertRaises', Load(), lineno=24, col_offset=12), [Name('ValueError', Load(), lineno=24, col_offset=30), Name('IsWindow', Load(), lineno=24, col_offset=42), Num(0, lineno=24, col_offset=52), Num(0, lineno=24, col_offset=55), Num(0, lineno=24, col_offset=58)], [], None, None, lineno=24, col_offset=12), lineno=24, col_offset=12)], [], lineno=13, col_offset=8), FunctionDef('test_callconv_2', arguments([Name('self', Param(), lineno=26, col_offset=28)], None, None, []), [Assign([Name('IsWindow', Store(), lineno=29, col_offset=12)], Attribute(Attribute(Name('cdll', Load(), lineno=29, col_offset=23), 'user32', Load(), lineno=29, col_offset=23), 'IsWindow', Load(), lineno=29, col_offset=23), lineno=29, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=33, col_offset=12), 'assertRaises', Load(), lineno=33, col_offset=12), [Name('ValueError', Load(), lineno=33, col_offset=30), Name('IsWindow', Load(), lineno=33, col_offset=42), Name('None', Load(), lineno=33, col_offset=52)], [], None, None, lineno=33, col_offset=12), lineno=33, col_offset=12)], [], lineno=26, col_offset=8)], [], lineno=12, col_offset=4)], [], lineno=9, col_offset=0), If(Compare(Attribute(Name('sys', Load(), lineno=35, col_offset=3), 'platform', Load(), lineno=35, col_offset=3), [Eq()], [Str('win32', lineno=35, col_offset=19)], lineno=35, col_offset=3), [ClassDef('FunctionCallTestCase', [Attribute(Name('unittest', Load(), lineno=36, col_offset=31), 'TestCase', Load(), lineno=36, col_offset=31)], [If(Call(Name('is_resource_enabled', Load(), lineno=38, col_offset=11), [Str('SEH', lineno=38, col_offset=31)], [], None, None, lineno=38, col_offset=11), [FunctionDef('test_SEH', arguments([Name('self', Param(), lineno=39, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=43, col_offset=16), 'assertRaises', Load(), lineno=43, col_offset=16), [Name('WindowsError', Load(), lineno=43, col_offset=34), Attribute(Attribute(Name('windll', Load(), lineno=43, col_offset=48), 'kernel32', Load(), lineno=43, col_offset=48), 'GetModuleHandleA', Load(), lineno=43, col_offset=48), Num(32, lineno=43, col_offset=82)], [], None, None, lineno=43, col_offset=16), lineno=43, col_offset=16)], [], lineno=39, col_offset=12)], [], lineno=38, col_offset=8), FunctionDef('test_noargs', arguments([Name('self', Param(), lineno=45, col_offset=24)], None, None, []), [Expr(Call(Attribute(Attribute(Name('windll', Load(), lineno=47, col_offset=12), 'user32', Load(), lineno=47, col_offset=12), 'GetDesktopWindow', Load(), lineno=47, col_offset=12), [], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=12)], [], lineno=45, col_offset=8)], [], lineno=36, col_offset=4), ClassDef('TestWintypes', [Attribute(Name('unittest', Load(), lineno=49, col_offset=23), 'TestCase', Load(), lineno=49, col_offset=23)], [FunctionDef('test_HWND', arguments([Name('self', Param(), lineno=50, col_offset=22)], None, None, []), [ImportFrom('ctypes', [alias('wintypes', None)], 0, lineno=51, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=52, col_offset=12), 'assertEqual', Load(), lineno=52, col_offset=12), [Call(Name('sizeof', Load(), lineno=52, col_offset=29), [Attribute(Name('wintypes', Load(), lineno=52, col_offset=36), 'HWND', Load(), lineno=52, col_offset=36)], [], None, None, lineno=52, col_offset=29), Call(Name('sizeof', Load(), lineno=52, col_offset=52), [Name('c_void_p', Load(), lineno=52, col_offset=59)], [], None, None, lineno=52, col_offset=52)], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=12)], [], lineno=50, col_offset=8), FunctionDef('test_PARAM', arguments([Name('self', Param(), lineno=54, col_offset=23)], None, None, []), [ImportFrom('ctypes', [alias('wintypes', None)], 0, lineno=55, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=12), 'assertEqual', Load(), lineno=56, col_offset=12), [Call(Name('sizeof', Load(), lineno=56, col_offset=29), [Attribute(Name('wintypes', Load(), lineno=56, col_offset=36), 'WPARAM', Load(), lineno=56, col_offset=36)], [], None, None, lineno=56, col_offset=29), Call(Name('sizeof', Load(), lineno=57, col_offset=33), [Name('c_void_p', Load(), lineno=57, col_offset=40)], [], None, None, lineno=57, col_offset=33)], [], None, None, lineno=56, col_offset=12), lineno=56, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=12), 'assertEqual', Load(), lineno=58, col_offset=12), [Call(Name('sizeof', Load(), lineno=58, col_offset=29), [Attribute(Name('wintypes', Load(), lineno=58, col_offset=36), 'LPARAM', Load(), lineno=58, col_offset=36)], [], None, None, lineno=58, col_offset=29), Call(Name('sizeof', Load(), lineno=59, col_offset=33), [Name('c_void_p', Load(), lineno=59, col_offset=40)], [], None, None, lineno=59, col_offset=33)], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=12)], [], lineno=54, col_offset=8), FunctionDef('test_COMError', arguments([Name('self', Param(), lineno=61, col_offset=26)], None, None, []), [ImportFrom('_ctypes', [alias('COMError', None)], 0, lineno=62, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=12), 'assertEqual', Load(), lineno=63, col_offset=12), [Attribute(Name('COMError', Load(), lineno=63, col_offset=29), '__doc__', Load(), lineno=63, col_offset=29), Str('Raised when a COM method call failed.', lineno=63, col_offset=47)], [], None, None, lineno=63, col_offset=12), lineno=63, col_offset=12), Assign([Name('ex', Store(), lineno=65, col_offset=12)], Call(Name('COMError', Load(), lineno=65, col_offset=17), [Num(-1, lineno=65, col_offset=27), Str('text', lineno=65, col_offset=30), Tuple([Str('details', lineno=65, col_offset=39)], Load(), lineno=65, col_offset=39)], [], None, None, lineno=65, col_offset=17), lineno=65, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=12), 'assertEqual', Load(), lineno=66, col_offset=12), [Attribute(Name('ex', Load(), lineno=66, col_offset=29), 'hresult', Load(), lineno=66, col_offset=29), Num(-1, lineno=66, col_offset=42)], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=12), 'assertEqual', Load(), lineno=67, col_offset=12), [Attribute(Name('ex', Load(), lineno=67, col_offset=29), 'text', Load(), lineno=67, col_offset=29), Str('text', lineno=67, col_offset=38)], [], None, None, lineno=67, col_offset=12), lineno=67, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=12), 'assertEqual', Load(), lineno=68, col_offset=12), [Attribute(Name('ex', Load(), lineno=68, col_offset=29), 'details', Load(), lineno=68, col_offset=29), Tuple([Str('details', lineno=68, col_offset=42)], Load(), lineno=68, col_offset=42)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12)], [], lineno=61, col_offset=8)], [], lineno=49, col_offset=4)], [], lineno=35, col_offset=0), ClassDef('Structures', [Attribute(Name('unittest', Load(), lineno=70, col_offset=17), 'TestCase', Load(), lineno=70, col_offset=17)], [FunctionDef('test_struct_by_value', arguments([Name('self', Param(), lineno=72, col_offset=29)], None, None, []), [ClassDef('POINT', [Name('Structure', Load(), lineno=73, col_offset=20)], [Assign([Name('_fields_', Store(), lineno=74, col_offset=12)], List([Tuple([Str('x', lineno=74, col_offset=25), Name('c_long', Load(), lineno=74, col_offset=30)], Load(), lineno=74, col_offset=25), Tuple([Str('y', lineno=75, col_offset=25), Name('c_long', Load(), lineno=75, col_offset=30)], Load(), lineno=75, col_offset=25)], Load(), lineno=74, col_offset=23), lineno=74, col_offset=12)], [], lineno=73, col_offset=8), ClassDef('RECT', [Name('Structure', Load(), lineno=77, col_offset=19)], [Assign([Name('_fields_', Store(), lineno=78, col_offset=12)], List([Tuple([Str('left', lineno=78, col_offset=25), Name('c_long', Load(), lineno=78, col_offset=33)], Load(), lineno=78, col_offset=25), Tuple([Str('top', lineno=79, col_offset=25), Name('c_long', Load(), lineno=79, col_offset=32)], Load(), lineno=79, col_offset=25), Tuple([Str('right', lineno=80, col_offset=25), Name('c_long', Load(), lineno=80, col_offset=34)], Load(), lineno=80, col_offset=25), Tuple([Str('bottom', lineno=81, col_offset=25), Name('c_long', Load(), lineno=81, col_offset=35)], Load(), lineno=81, col_offset=25)], Load(), lineno=78, col_offset=23), lineno=78, col_offset=12)], [], lineno=77, col_offset=8), Assign([Name('dll', Store(), lineno=83, col_offset=8)], Call(Name('CDLL', Load(), lineno=83, col_offset=14), [Attribute(Name('_ctypes_test', Load(), lineno=83, col_offset=19), '__file__', Load(), lineno=83, col_offset=19)], [], None, None, lineno=83, col_offset=14), lineno=83, col_offset=8), Assign([Name('pt', Store(), lineno=85, col_offset=8)], Call(Name('POINT', Load(), lineno=85, col_offset=13), [Num(10, lineno=85, col_offset=19), Num(10, lineno=85, col_offset=23)], [], None, None, lineno=85, col_offset=13), lineno=85, col_offset=8), Assign([Name('rect', Store(), lineno=86, col_offset=8)], Call(Name('RECT', Load(), lineno=86, col_offset=15), [Num(0, lineno=86, col_offset=20), Num(0, lineno=86, col_offset=23), Num(20, lineno=86, col_offset=26), Num(20, lineno=86, col_offset=30)], [], None, None, lineno=86, col_offset=15), lineno=86, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=87, col_offset=8), 'assertEqual', Load(), lineno=87, col_offset=8), [Num(1, lineno=87, col_offset=25), Call(Attribute(Name('dll', Load(), lineno=87, col_offset=28), 'PointInRect', Load(), lineno=87, col_offset=28), [Call(Name('byref', Load(), lineno=87, col_offset=44), [Name('rect', Load(), lineno=87, col_offset=50)], [], None, None, lineno=87, col_offset=44), Name('pt', Load(), lineno=87, col_offset=57)], [], None, None, lineno=87, col_offset=28)], [], None, None, lineno=87, col_offset=8), lineno=87, col_offset=8)], [], lineno=72, col_offset=4)], [], lineno=70, col_offset=0), If(Compare(Name('__name__', Load(), lineno=89, col_offset=3), [Eq()], [Str('__main__', lineno=89, col_offset=15)], lineno=89, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=90, col_offset=4), 'main', Load(), lineno=90, col_offset=4), [], [], None, None, lineno=90, col_offset=4), lineno=90, col_offset=4)], [], lineno=89, col_offset=0)])
