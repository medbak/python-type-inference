Module([Expr(Str(" Unicode Mapping Parser and Codec Generator.\n\nThis script parses Unicode mapping files as available from the Unicode\nsite (ftp://ftp.unicode.org/Public/MAPPINGS/) and creates Python codec\nmodules from them. The codecs use the standard character mapping codec\nto actually apply the mapping.\n\nSynopsis: gencodec.py dir codec_prefix\n\nAll files in dir are scanned and those producing non-empty mappings\nwill be written to <codec_prefix><mapname>.py with <mapname> being the\nfirst part of the map's filename ('a' in a.b.c.txt) converted to\nlowercase with hyphens replaced by underscores.\n\nThe tool also writes marshalled versions of the mapping tables to the\nsame location (with .mapping extension).\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n(c) Copyright Guido van Rossum, 2000.\n\nTable generation:\n(c) Copyright Marc-Andre Lemburg, 2005.\n    Licensed to PSF under a Contributor Agreement.\n\n", lineno=27, col_offset=-1), lineno=27, col_offset=-1), Import([alias('re', None), alias('os', None), alias('marshal', None), alias('codecs', None)], lineno=29, col_offset=0), Assign([Name('MAX_TABLE_SIZE', Store(), lineno=32, col_offset=0)], Num(8192, lineno=32, col_offset=17), lineno=32, col_offset=0), Assign([Name('UNI_UNDEFINED', Store(), lineno=35, col_offset=0)], Call(Name('unichr', Load(), lineno=35, col_offset=16), [Num(65534, lineno=35, col_offset=23)], [], None, None, lineno=35, col_offset=16), lineno=35, col_offset=0), Assign([Name('mapRE', Store(), lineno=37, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=37, col_offset=8), 'compile', Load(), lineno=37, col_offset=8), [Str('((?:0x[0-9a-fA-F]+\\+?)+)\\s+((?:(?:0x[0-9a-fA-Z]+|<[A-Za-z]+>)\\+?)*)\\s*(#.+)?', lineno=37, col_offset=19)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=0), FunctionDef('parsecodes', arguments([Name('codes', Param(), lineno=43, col_offset=15), Name('len', Param(), lineno=43, col_offset=22), Name('range', Param(), lineno=43, col_offset=31)], None, None, [Name('len', Load(), lineno=43, col_offset=26), Name('range', Load(), lineno=43, col_offset=37)]), [Expr(Str(' Converts code combinations to either a single code integer\n        or a tuple of integers.\n\n        meta-codes (in angular brackets, e.g. <LR> and <RL>) are\n        ignored.\n\n        Empty codes or illegal ones are returned as None.\n\n    ', lineno=53, col_offset=-1), lineno=53, col_offset=-1), If(UnaryOp(Not(), Name('codes', Load(), lineno=54, col_offset=11), lineno=54, col_offset=7), [Return(Name('None', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=54, col_offset=4), Assign([Name('l', Store(), lineno=56, col_offset=4)], Call(Attribute(Name('codes', Load(), lineno=56, col_offset=8), 'split', Load(), lineno=56, col_offset=8), [Str('+', lineno=56, col_offset=20)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=57, col_offset=7), [Name('l', Load(), lineno=57, col_offset=11)], [], None, None, lineno=57, col_offset=7), [Eq()], [Num(1, lineno=57, col_offset=17)], lineno=57, col_offset=7), [Return(Call(Name('int', Load(), lineno=58, col_offset=15), [Subscript(Name('l', Load(), lineno=58, col_offset=19), Index(Num(0, lineno=58, col_offset=21)), Load(), lineno=58, col_offset=19), Num(16, lineno=58, col_offset=24)], [], None, None, lineno=58, col_offset=15), lineno=58, col_offset=8)], [], lineno=57, col_offset=4), For(Name('i', Store(), lineno=59, col_offset=8), Call(Name('range', Load(), lineno=59, col_offset=13), [Call(Name('len', Load(), lineno=59, col_offset=19), [Name('l', Load(), lineno=59, col_offset=23)], [], None, None, lineno=59, col_offset=19)], [], None, None, lineno=59, col_offset=13), [TryExcept([Assign([Subscript(Name('l', Load(), lineno=61, col_offset=12), Index(Name('i', Load(), lineno=61, col_offset=14)), Store(), lineno=61, col_offset=12)], Call(Name('int', Load(), lineno=61, col_offset=19), [Subscript(Name('l', Load(), lineno=61, col_offset=23), Index(Name('i', Load(), lineno=61, col_offset=25)), Load(), lineno=61, col_offset=23), Num(16, lineno=61, col_offset=28)], [], None, None, lineno=61, col_offset=19), lineno=61, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=62, col_offset=15), None, [Assign([Subscript(Name('l', Load(), lineno=63, col_offset=12), Index(Name('i', Load(), lineno=63, col_offset=14)), Store(), lineno=63, col_offset=12)], Name('None', Load(), lineno=63, col_offset=19), lineno=63, col_offset=12)], lineno=62, col_offset=8)], [], lineno=60, col_offset=8)], [], lineno=59, col_offset=4), Assign([Name('l', Store(), lineno=64, col_offset=4)], ListComp(Name('x', Load(), lineno=64, col_offset=9), [comprehension(Name('x', Store(), lineno=64, col_offset=15), Name('l', Load(), lineno=64, col_offset=20), [Compare(Name('x', Load(), lineno=64, col_offset=25), [IsNot()], [Name('None', Load(), lineno=64, col_offset=34)], lineno=64, col_offset=25)])], lineno=64, col_offset=9), lineno=64, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=65, col_offset=7), [Name('l', Load(), lineno=65, col_offset=11)], [], None, None, lineno=65, col_offset=7), [Eq()], [Num(1, lineno=65, col_offset=17)], lineno=65, col_offset=7), [Return(Subscript(Name('l', Load(), lineno=66, col_offset=15), Index(Num(0, lineno=66, col_offset=17)), Load(), lineno=66, col_offset=15), lineno=66, col_offset=8)], [Return(Call(Name('tuple', Load(), lineno=68, col_offset=15), [Name('l', Load(), lineno=68, col_offset=21)], [], None, None, lineno=68, col_offset=15), lineno=68, col_offset=8)], lineno=65, col_offset=4)], [], lineno=43, col_offset=0), FunctionDef('readmap', arguments([Name('filename', Param(), lineno=70, col_offset=12)], None, None, []), [Assign([Name('f', Store(), lineno=72, col_offset=4)], Call(Name('open', Load(), lineno=72, col_offset=8), [Name('filename', Load(), lineno=72, col_offset=13), Str('r', lineno=72, col_offset=22)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=4), Assign([Name('lines', Store(), lineno=73, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=73, col_offset=12), 'readlines', Load(), lineno=73, col_offset=12), [], [], None, None, lineno=73, col_offset=12), lineno=73, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=74, col_offset=4), 'close', Load(), lineno=74, col_offset=4), [], [], None, None, lineno=74, col_offset=4), lineno=74, col_offset=4), Assign([Name('enc2uni', Store(), lineno=75, col_offset=4)], Dict([], [], lineno=75, col_offset=14), lineno=75, col_offset=4), Assign([Name('identity', Store(), lineno=76, col_offset=4)], List([], Load(), lineno=76, col_offset=15), lineno=76, col_offset=4), Assign([Name('unmapped', Store(), lineno=77, col_offset=4)], Call(Name('range', Load(), lineno=77, col_offset=15), [Num(256, lineno=77, col_offset=21)], [], None, None, lineno=77, col_offset=15), lineno=77, col_offset=4), For(Name('i', Store(), lineno=82, col_offset=8), BinOp(Call(Name('range', Load(), lineno=82, col_offset=13), [Num(32, lineno=82, col_offset=19)], [], None, None, lineno=82, col_offset=13), Add(), List([Num(127, lineno=82, col_offset=26)], Load(), lineno=82, col_offset=25), lineno=82, col_offset=13), [Expr(Call(Attribute(Name('identity', Load(), lineno=83, col_offset=8), 'append', Load(), lineno=83, col_offset=8), [Name('i', Load(), lineno=83, col_offset=24)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), Expr(Call(Attribute(Name('unmapped', Load(), lineno=84, col_offset=8), 'remove', Load(), lineno=84, col_offset=8), [Name('i', Load(), lineno=84, col_offset=24)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8), Assign([Subscript(Name('enc2uni', Load(), lineno=85, col_offset=8), Index(Name('i', Load(), lineno=85, col_offset=16)), Store(), lineno=85, col_offset=8)], Tuple([Name('i', Load(), lineno=85, col_offset=22), Str('CONTROL CHARACTER', lineno=85, col_offset=25)], Load(), lineno=85, col_offset=22), lineno=85, col_offset=8)], [], lineno=82, col_offset=4), For(Name('line', Store(), lineno=87, col_offset=8), Name('lines', Load(), lineno=87, col_offset=16), [Assign([Name('line', Store(), lineno=88, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=88, col_offset=15), 'strip', Load(), lineno=88, col_offset=15), [], [], None, None, lineno=88, col_offset=15), lineno=88, col_offset=8), If(BoolOp(Or(), [UnaryOp(Not(), Name('line', Load(), lineno=89, col_offset=15), lineno=89, col_offset=11), Compare(Subscript(Name('line', Load(), lineno=89, col_offset=23), Index(Num(0, lineno=89, col_offset=28)), Load(), lineno=89, col_offset=23), [Eq()], [Str('#', lineno=89, col_offset=34)], lineno=89, col_offset=23)], lineno=89, col_offset=11), [Continue( lineno=90, col_offset=12)], [], lineno=89, col_offset=8), Assign([Name('m', Store(), lineno=91, col_offset=8)], Call(Attribute(Name('mapRE', Load(), lineno=91, col_offset=12), 'match', Load(), lineno=91, col_offset=12), [Name('line', Load(), lineno=91, col_offset=24)], [], None, None, lineno=91, col_offset=12), lineno=91, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=92, col_offset=15), lineno=92, col_offset=11), [Continue( lineno=94, col_offset=12)], [], lineno=92, col_offset=8), Assign([Tuple([Name('enc', Store(), lineno=95, col_offset=8), Name('uni', Store(), lineno=95, col_offset=12), Name('comment', Store(), lineno=95, col_offset=16)], Store(), lineno=95, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=95, col_offset=26), 'groups', Load(), lineno=95, col_offset=26), [], [], None, None, lineno=95, col_offset=26), lineno=95, col_offset=8), Assign([Name('enc', Store(), lineno=96, col_offset=8)], Call(Name('parsecodes', Load(), lineno=96, col_offset=14), [Name('enc', Load(), lineno=96, col_offset=25)], [], None, None, lineno=96, col_offset=14), lineno=96, col_offset=8), Assign([Name('uni', Store(), lineno=97, col_offset=8)], Call(Name('parsecodes', Load(), lineno=97, col_offset=14), [Name('uni', Load(), lineno=97, col_offset=25)], [], None, None, lineno=97, col_offset=14), lineno=97, col_offset=8), If(Compare(Name('comment', Load(), lineno=98, col_offset=11), [Is()], [Name('None', Load(), lineno=98, col_offset=22)], lineno=98, col_offset=11), [Assign([Name('comment', Store(), lineno=99, col_offset=12)], Str('', lineno=99, col_offset=22), lineno=99, col_offset=12)], [Assign([Name('comment', Store(), lineno=101, col_offset=12)], Call(Attribute(Subscript(Name('comment', Load(), lineno=101, col_offset=22), Slice(Num(1, lineno=101, col_offset=30), None, None), Load(), lineno=101, col_offset=22), 'strip', Load(), lineno=101, col_offset=22), [], [], None, None, lineno=101, col_offset=22), lineno=101, col_offset=12)], lineno=98, col_offset=8), If(Compare(Name('enc', Load(), lineno=102, col_offset=11), [Lt()], [Num(256, lineno=102, col_offset=17)], lineno=102, col_offset=11), [If(Compare(Name('enc', Load(), lineno=103, col_offset=15), [In()], [Name('unmapped', Load(), lineno=103, col_offset=22)], lineno=103, col_offset=15), [Expr(Call(Attribute(Name('unmapped', Load(), lineno=104, col_offset=16), 'remove', Load(), lineno=104, col_offset=16), [Name('enc', Load(), lineno=104, col_offset=32)], [], None, None, lineno=104, col_offset=16), lineno=104, col_offset=16)], [], lineno=103, col_offset=12), If(Compare(Name('enc', Load(), lineno=105, col_offset=15), [Eq()], [Name('uni', Load(), lineno=105, col_offset=22)], lineno=105, col_offset=15), [Expr(Call(Attribute(Name('identity', Load(), lineno=106, col_offset=16), 'append', Load(), lineno=106, col_offset=16), [Name('enc', Load(), lineno=106, col_offset=32)], [], None, None, lineno=106, col_offset=16), lineno=106, col_offset=16)], [], lineno=105, col_offset=12), Assign([Subscript(Name('enc2uni', Load(), lineno=107, col_offset=12), Index(Name('enc', Load(), lineno=107, col_offset=20)), Store(), lineno=107, col_offset=12)], Tuple([Name('uni', Load(), lineno=107, col_offset=28), Name('comment', Load(), lineno=107, col_offset=32)], Load(), lineno=107, col_offset=28), lineno=107, col_offset=12)], [Assign([Subscript(Name('enc2uni', Load(), lineno=109, col_offset=12), Index(Name('enc', Load(), lineno=109, col_offset=20)), Store(), lineno=109, col_offset=12)], Tuple([Name('uni', Load(), lineno=109, col_offset=28), Name('comment', Load(), lineno=109, col_offset=32)], Load(), lineno=109, col_offset=28), lineno=109, col_offset=12)], lineno=102, col_offset=8)], [], lineno=87, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=114, col_offset=7), [Name('identity', Load(), lineno=114, col_offset=11)], [], None, None, lineno=114, col_offset=7), [GtE()], [Call(Name('len', Load(), lineno=114, col_offset=24), [Name('unmapped', Load(), lineno=114, col_offset=28)], [], None, None, lineno=114, col_offset=24)], lineno=114, col_offset=7), [For(Name('enc', Store(), lineno=115, col_offset=12), Name('unmapped', Load(), lineno=115, col_offset=19), [Assign([Subscript(Name('enc2uni', Load(), lineno=116, col_offset=12), Index(Name('enc', Load(), lineno=116, col_offset=20)), Store(), lineno=116, col_offset=12)], Tuple([Name('None', Load(), lineno=116, col_offset=28), Str('', lineno=116, col_offset=34)], Load(), lineno=116, col_offset=28), lineno=116, col_offset=12)], [], lineno=115, col_offset=8), Assign([Subscript(Name('enc2uni', Load(), lineno=117, col_offset=8), Index(Str('IDENTITY', lineno=117, col_offset=16)), Store(), lineno=117, col_offset=8)], Num(256, lineno=117, col_offset=30), lineno=117, col_offset=8)], [], lineno=114, col_offset=4), Return(Name('enc2uni', Load(), lineno=119, col_offset=11), lineno=119, col_offset=4)], [], lineno=70, col_offset=0), FunctionDef('hexrepr', arguments([Name('t', Param(), lineno=121, col_offset=12), Name('precision', Param(), lineno=121, col_offset=15)], None, None, [Num(4, lineno=121, col_offset=25)]), [If(Compare(Name('t', Load(), lineno=123, col_offset=7), [Is()], [Name('None', Load(), lineno=123, col_offset=12)], lineno=123, col_offset=7), [Return(Str('None', lineno=124, col_offset=15), lineno=124, col_offset=8)], [], lineno=123, col_offset=4), TryExcept([Expr(Call(Name('len', Load(), lineno=126, col_offset=8), [Name('t', Load(), lineno=126, col_offset=12)], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=8)], [ExceptHandler(None, None, [Return(BinOp(Str('0x%0*X', lineno=128, col_offset=15), Mod(), Tuple([Name('precision', Load(), lineno=128, col_offset=27), Name('t', Load(), lineno=128, col_offset=38)], Load(), lineno=128, col_offset=27), lineno=128, col_offset=15), lineno=128, col_offset=8)], lineno=127, col_offset=4)], [], lineno=125, col_offset=4), TryExcept([Return(BinOp(BinOp(Str('(', lineno=130, col_offset=15), Add(), Call(Attribute(Str(', ', lineno=130, col_offset=21), 'join', Load(), lineno=130, col_offset=21), [ListComp(BinOp(Str('0x%0*X', lineno=130, col_offset=32), Mod(), Tuple([Name('precision', Load(), lineno=130, col_offset=44), Name('item', Load(), lineno=130, col_offset=55)], Load(), lineno=130, col_offset=44), lineno=130, col_offset=32), [comprehension(Name('item', Store(), lineno=131, col_offset=36), Name('t', Load(), lineno=131, col_offset=44), [])], lineno=130, col_offset=32)], [], None, None, lineno=130, col_offset=21), lineno=130, col_offset=15), Add(), Str(')', lineno=131, col_offset=50), lineno=131, col_offset=48), lineno=130, col_offset=8)], [ExceptHandler(Name('TypeError', Load(), lineno=132, col_offset=11), Name('why', Store(), lineno=132, col_offset=22), [Print(None, [BinOp(Str('* failed to convert %r: %s', lineno=133, col_offset=14), Mod(), Tuple([Name('t', Load(), lineno=133, col_offset=46), Name('why', Load(), lineno=133, col_offset=49)], Load(), lineno=133, col_offset=46), lineno=133, col_offset=14)], True, lineno=133, col_offset=8), Raise(None, None, None, lineno=134, col_offset=8)], lineno=132, col_offset=4)], [], lineno=129, col_offset=4)], [], lineno=121, col_offset=0), FunctionDef('python_mapdef_code', arguments([Name('varname', Param(), lineno=136, col_offset=23), Name('map', Param(), lineno=136, col_offset=32), Name('comments', Param(), lineno=136, col_offset=37), Name('precisions', Param(), lineno=136, col_offset=49)], None, None, [Num(1, lineno=136, col_offset=46), Tuple([Num(2, lineno=136, col_offset=61), Num(4, lineno=136, col_offset=64)], Load(), lineno=136, col_offset=61)]), [Assign([Name('l', Store(), lineno=138, col_offset=4)], List([], Load(), lineno=138, col_offset=8), lineno=138, col_offset=4), Assign([Name('append', Store(), lineno=139, col_offset=4)], Attribute(Name('l', Load(), lineno=139, col_offset=13), 'append', Load(), lineno=139, col_offset=13), lineno=139, col_offset=4), If(Compare(Str('IDENTITY', lineno=140, col_offset=7), [In()], [Name('map', Load(), lineno=140, col_offset=21)], lineno=140, col_offset=7), [Expr(Call(Name('append', Load(), lineno=141, col_offset=8), [BinOp(Str('%s = codecs.make_identity_dict(range(%d))', lineno=141, col_offset=15), Mod(), Tuple([Name('varname', Load(), lineno=142, col_offset=16), Subscript(Name('map', Load(), lineno=142, col_offset=25), Index(Str('IDENTITY', lineno=142, col_offset=29)), Load(), lineno=142, col_offset=25)], Load(), lineno=142, col_offset=16), lineno=141, col_offset=15)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Name('append', Load(), lineno=143, col_offset=8), [BinOp(Str('%s.update({', lineno=143, col_offset=15), Mod(), Name('varname', Load(), lineno=143, col_offset=31), lineno=143, col_offset=15)], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8), Assign([Name('splits', Store(), lineno=144, col_offset=8)], Num(1, lineno=144, col_offset=17), lineno=144, col_offset=8), Delete([Subscript(Name('map', Load(), lineno=145, col_offset=12), Index(Str('IDENTITY', lineno=145, col_offset=16)), Del(), lineno=145, col_offset=12)], lineno=145, col_offset=8), Assign([Name('identity', Store(), lineno=146, col_offset=8)], Num(1, lineno=146, col_offset=19), lineno=146, col_offset=8)], [Expr(Call(Name('append', Load(), lineno=148, col_offset=8), [BinOp(Str('%s = {', lineno=148, col_offset=15), Mod(), Name('varname', Load(), lineno=148, col_offset=26), lineno=148, col_offset=15)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Assign([Name('splits', Store(), lineno=149, col_offset=8)], Num(0, lineno=149, col_offset=17), lineno=149, col_offset=8), Assign([Name('identity', Store(), lineno=150, col_offset=8)], Num(0, lineno=150, col_offset=19), lineno=150, col_offset=8)], lineno=140, col_offset=4), Assign([Name('mappings', Store(), lineno=152, col_offset=4)], Call(Name('sorted', Load(), lineno=152, col_offset=15), [Call(Attribute(Name('map', Load(), lineno=152, col_offset=22), 'items', Load(), lineno=152, col_offset=22), [], [], None, None, lineno=152, col_offset=22)], [], None, None, lineno=152, col_offset=15), lineno=152, col_offset=4), Assign([Name('i', Store(), lineno=153, col_offset=4)], Num(0, lineno=153, col_offset=8), lineno=153, col_offset=4), Assign([Tuple([Name('key_precision', Store(), lineno=154, col_offset=4), Name('value_precision', Store(), lineno=154, col_offset=19)], Store(), lineno=154, col_offset=4)], Name('precisions', Load(), lineno=154, col_offset=37), lineno=154, col_offset=4), For(Tuple([Name('mapkey', Store(), lineno=155, col_offset=8), Name('mapvalue', Store(), lineno=155, col_offset=16)], Store(), lineno=155, col_offset=8), Name('mappings', Load(), lineno=155, col_offset=28), [Assign([Name('mapcomment', Store(), lineno=156, col_offset=8)], Str('', lineno=156, col_offset=21), lineno=156, col_offset=8), If(Call(Name('isinstance', Load(), lineno=157, col_offset=11), [Name('mapkey', Load(), lineno=157, col_offset=22), Name('tuple', Load(), lineno=157, col_offset=30)], [], None, None, lineno=157, col_offset=11), [Assign([Tuple([Name('mapkey', Store(), lineno=158, col_offset=13), Name('mapcomment', Store(), lineno=158, col_offset=21)], Store(), lineno=158, col_offset=13)], Name('mapkey', Load(), lineno=158, col_offset=35), lineno=158, col_offset=12)], [], lineno=157, col_offset=8), If(Call(Name('isinstance', Load(), lineno=159, col_offset=11), [Name('mapvalue', Load(), lineno=159, col_offset=22), Name('tuple', Load(), lineno=159, col_offset=32)], [], None, None, lineno=159, col_offset=11), [Assign([Tuple([Name('mapvalue', Store(), lineno=160, col_offset=13), Name('mapcomment', Store(), lineno=160, col_offset=23)], Store(), lineno=160, col_offset=13)], Name('mapvalue', Load(), lineno=160, col_offset=37), lineno=160, col_offset=12)], [], lineno=159, col_offset=8), If(Compare(Name('mapkey', Load(), lineno=161, col_offset=11), [Is()], [Name('None', Load(), lineno=161, col_offset=21)], lineno=161, col_offset=11), [Continue( lineno=162, col_offset=12)], [], lineno=161, col_offset=8), If(BoolOp(And(), [Name('identity', Load(), lineno=163, col_offset=12), Compare(Name('mapkey', Load(), lineno=164, col_offset=12), [Eq()], [Name('mapvalue', Load(), lineno=164, col_offset=22)], lineno=164, col_offset=12), Compare(Name('mapkey', Load(), lineno=165, col_offset=12), [Lt()], [Num(256, lineno=165, col_offset=21)], lineno=165, col_offset=12)], lineno=163, col_offset=12), [Continue( lineno=168, col_offset=12)], [], lineno=163, col_offset=8), Assign([Name('key', Store(), lineno=169, col_offset=8)], Call(Name('hexrepr', Load(), lineno=169, col_offset=14), [Name('mapkey', Load(), lineno=169, col_offset=22), Name('key_precision', Load(), lineno=169, col_offset=30)], [], None, None, lineno=169, col_offset=14), lineno=169, col_offset=8), Assign([Name('value', Store(), lineno=170, col_offset=8)], Call(Name('hexrepr', Load(), lineno=170, col_offset=16), [Name('mapvalue', Load(), lineno=170, col_offset=24), Name('value_precision', Load(), lineno=170, col_offset=34)], [], None, None, lineno=170, col_offset=16), lineno=170, col_offset=8), If(BoolOp(And(), [Name('mapcomment', Load(), lineno=171, col_offset=11), Name('comments', Load(), lineno=171, col_offset=26)], lineno=171, col_offset=11), [Expr(Call(Name('append', Load(), lineno=172, col_offset=12), [BinOp(Str('    %s: %s,\t#  %s', lineno=172, col_offset=19), Mod(), Tuple([Name('key', Load(), lineno=172, col_offset=43), Name('value', Load(), lineno=172, col_offset=48), Name('mapcomment', Load(), lineno=172, col_offset=55)], Load(), lineno=172, col_offset=43), lineno=172, col_offset=19)], [], None, None, lineno=172, col_offset=12), lineno=172, col_offset=12)], [Expr(Call(Name('append', Load(), lineno=174, col_offset=12), [BinOp(Str('    %s: %s,', lineno=174, col_offset=19), Mod(), Tuple([Name('key', Load(), lineno=174, col_offset=36), Name('value', Load(), lineno=174, col_offset=41)], Load(), lineno=174, col_offset=36), lineno=174, col_offset=19)], [], None, None, lineno=174, col_offset=12), lineno=174, col_offset=12)], lineno=171, col_offset=8), AugAssign(Name('i', Store(), lineno=175, col_offset=8), Add(), Num(1, lineno=175, col_offset=13), lineno=175, col_offset=8), If(Compare(Name('i', Load(), lineno=176, col_offset=11), [Eq()], [Num(4096, lineno=176, col_offset=16)], lineno=176, col_offset=11), [If(Compare(Name('splits', Load(), lineno=179, col_offset=15), [Eq()], [Num(0, lineno=179, col_offset=25)], lineno=179, col_offset=15), [Expr(Call(Name('append', Load(), lineno=180, col_offset=16), [Str('}', lineno=180, col_offset=23)], [], None, None, lineno=180, col_offset=16), lineno=180, col_offset=16)], [Expr(Call(Name('append', Load(), lineno=182, col_offset=16), [Str('})', lineno=182, col_offset=23)], [], None, None, lineno=182, col_offset=16), lineno=182, col_offset=16)], lineno=179, col_offset=12), Expr(Call(Name('append', Load(), lineno=183, col_offset=12), [BinOp(Str('%s.update({', lineno=183, col_offset=19), Mod(), Name('varname', Load(), lineno=183, col_offset=35), lineno=183, col_offset=19)], [], None, None, lineno=183, col_offset=12), lineno=183, col_offset=12), Assign([Name('i', Store(), lineno=184, col_offset=12)], Num(0, lineno=184, col_offset=16), lineno=184, col_offset=12), Assign([Name('splits', Store(), lineno=185, col_offset=12)], BinOp(Name('splits', Load(), lineno=185, col_offset=21), Add(), Num(1, lineno=185, col_offset=30), lineno=185, col_offset=21), lineno=185, col_offset=12)], [], lineno=176, col_offset=8)], [], lineno=155, col_offset=4), If(Compare(Name('splits', Load(), lineno=186, col_offset=7), [Eq()], [Num(0, lineno=186, col_offset=17)], lineno=186, col_offset=7), [Expr(Call(Name('append', Load(), lineno=187, col_offset=8), [Str('}', lineno=187, col_offset=15)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8)], [Expr(Call(Name('append', Load(), lineno=189, col_offset=8), [Str('})', lineno=189, col_offset=15)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], lineno=186, col_offset=4), Return(Name('l', Load(), lineno=191, col_offset=11), lineno=191, col_offset=4)], [], lineno=136, col_offset=0), FunctionDef('python_tabledef_code', arguments([Name('varname', Param(), lineno=193, col_offset=25), Name('map', Param(), lineno=193, col_offset=34), Name('comments', Param(), lineno=193, col_offset=39), Name('key_precision', Param(), lineno=193, col_offset=51)], None, None, [Num(1, lineno=193, col_offset=48), Num(2, lineno=193, col_offset=65)]), [Assign([Name('l', Store(), lineno=195, col_offset=4)], List([], Load(), lineno=195, col_offset=8), lineno=195, col_offset=4), Assign([Name('append', Store(), lineno=196, col_offset=4)], Attribute(Name('l', Load(), lineno=196, col_offset=13), 'append', Load(), lineno=196, col_offset=13), lineno=196, col_offset=4), Expr(Call(Name('append', Load(), lineno=197, col_offset=4), [BinOp(Str('%s = (', lineno=197, col_offset=11), Mod(), Name('varname', Load(), lineno=197, col_offset=22), lineno=197, col_offset=11)], [], None, None, lineno=197, col_offset=4), lineno=197, col_offset=4), Assign([Name('mappings', Store(), lineno=200, col_offset=4)], Call(Name('sorted', Load(), lineno=200, col_offset=15), [Call(Attribute(Name('map', Load(), lineno=200, col_offset=22), 'items', Load(), lineno=200, col_offset=22), [], [], None, None, lineno=200, col_offset=22)], [], None, None, lineno=200, col_offset=15), lineno=200, col_offset=4), Assign([Name('table', Store(), lineno=201, col_offset=4)], Dict([], [], lineno=201, col_offset=12), lineno=201, col_offset=4), Assign([Name('maxkey', Store(), lineno=202, col_offset=4)], Num(0, lineno=202, col_offset=13), lineno=202, col_offset=4), If(Compare(Str('IDENTITY', lineno=203, col_offset=7), [In()], [Name('map', Load(), lineno=203, col_offset=21)], lineno=203, col_offset=7), [For(Name('key', Store(), lineno=204, col_offset=12), Call(Name('range', Load(), lineno=204, col_offset=19), [Num(256, lineno=204, col_offset=25)], [], None, None, lineno=204, col_offset=19), [Assign([Subscript(Name('table', Load(), lineno=205, col_offset=12), Index(Name('key', Load(), lineno=205, col_offset=18)), Store(), lineno=205, col_offset=12)], Tuple([Name('key', Load(), lineno=205, col_offset=26), Str('', lineno=205, col_offset=31)], Load(), lineno=205, col_offset=26), lineno=205, col_offset=12)], [], lineno=204, col_offset=8), Assign([Name('maxkey', Store(), lineno=206, col_offset=8)], Num(255, lineno=206, col_offset=17), lineno=206, col_offset=8), Delete([Subscript(Name('map', Load(), lineno=207, col_offset=12), Index(Str('IDENTITY', lineno=207, col_offset=16)), Del(), lineno=207, col_offset=12)], lineno=207, col_offset=8)], [], lineno=203, col_offset=4), For(Tuple([Name('mapkey', Store(), lineno=208, col_offset=8), Name('mapvalue', Store(), lineno=208, col_offset=16)], Store(), lineno=208, col_offset=8), Name('mappings', Load(), lineno=208, col_offset=28), [Assign([Name('mapcomment', Store(), lineno=209, col_offset=8)], Str('', lineno=209, col_offset=21), lineno=209, col_offset=8), If(Call(Name('isinstance', Load(), lineno=210, col_offset=11), [Name('mapkey', Load(), lineno=210, col_offset=22), Name('tuple', Load(), lineno=210, col_offset=30)], [], None, None, lineno=210, col_offset=11), [Assign([Tuple([Name('mapkey', Store(), lineno=211, col_offset=13), Name('mapcomment', Store(), lineno=211, col_offset=21)], Store(), lineno=211, col_offset=13)], Name('mapkey', Load(), lineno=211, col_offset=35), lineno=211, col_offset=12)], [], lineno=210, col_offset=8), If(Call(Name('isinstance', Load(), lineno=212, col_offset=11), [Name('mapvalue', Load(), lineno=212, col_offset=22), Name('tuple', Load(), lineno=212, col_offset=32)], [], None, None, lineno=212, col_offset=11), [Assign([Tuple([Name('mapvalue', Store(), lineno=213, col_offset=13), Name('mapcomment', Store(), lineno=213, col_offset=23)], Store(), lineno=213, col_offset=13)], Name('mapvalue', Load(), lineno=213, col_offset=37), lineno=213, col_offset=12)], [], lineno=212, col_offset=8), If(Compare(Name('mapkey', Load(), lineno=214, col_offset=11), [Is()], [Name('None', Load(), lineno=214, col_offset=21)], lineno=214, col_offset=11), [Continue( lineno=215, col_offset=12)], [], lineno=214, col_offset=8), Assign([Subscript(Name('table', Load(), lineno=216, col_offset=8), Index(Name('mapkey', Load(), lineno=216, col_offset=14)), Store(), lineno=216, col_offset=8)], Tuple([Name('mapvalue', Load(), lineno=216, col_offset=25), Name('mapcomment', Load(), lineno=216, col_offset=35)], Load(), lineno=216, col_offset=25), lineno=216, col_offset=8), If(Compare(Name('mapkey', Load(), lineno=217, col_offset=11), [Gt()], [Name('maxkey', Load(), lineno=217, col_offset=20)], lineno=217, col_offset=11), [Assign([Name('maxkey', Store(), lineno=218, col_offset=12)], Name('mapkey', Load(), lineno=218, col_offset=21), lineno=218, col_offset=12)], [], lineno=217, col_offset=8)], [], lineno=208, col_offset=4), If(Compare(Name('maxkey', Load(), lineno=219, col_offset=7), [Gt()], [Name('MAX_TABLE_SIZE', Load(), lineno=219, col_offset=16)], lineno=219, col_offset=7), [Return(Name('None', Load(), lineno=221, col_offset=15), lineno=221, col_offset=8)], [], lineno=219, col_offset=4), For(Name('key', Store(), lineno=224, col_offset=8), Call(Name('range', Load(), lineno=224, col_offset=15), [BinOp(Name('maxkey', Load(), lineno=224, col_offset=21), Add(), Num(1, lineno=224, col_offset=30), lineno=224, col_offset=21)], [], None, None, lineno=224, col_offset=15), [If(Compare(Name('key', Load(), lineno=225, col_offset=11), [NotIn()], [Name('table', Load(), lineno=225, col_offset=22)], lineno=225, col_offset=11), [Assign([Name('mapvalue', Store(), lineno=226, col_offset=12)], Name('None', Load(), lineno=226, col_offset=23), lineno=226, col_offset=12), Assign([Name('mapcomment', Store(), lineno=227, col_offset=12)], Str('UNDEFINED', lineno=227, col_offset=25), lineno=227, col_offset=12)], [Assign([Tuple([Name('mapvalue', Store(), lineno=229, col_offset=12), Name('mapcomment', Store(), lineno=229, col_offset=22)], Store(), lineno=229, col_offset=12)], Subscript(Name('table', Load(), lineno=229, col_offset=35), Index(Name('key', Load(), lineno=229, col_offset=41)), Load(), lineno=229, col_offset=35), lineno=229, col_offset=12)], lineno=225, col_offset=8), If(Compare(Name('mapvalue', Load(), lineno=230, col_offset=11), [Is()], [Name('None', Load(), lineno=230, col_offset=23)], lineno=230, col_offset=11), [Assign([Name('mapchar', Store(), lineno=231, col_offset=12)], Name('UNI_UNDEFINED', Load(), lineno=231, col_offset=22), lineno=231, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=233, col_offset=15), [Name('mapvalue', Load(), lineno=233, col_offset=26), Name('tuple', Load(), lineno=233, col_offset=36)], [], None, None, lineno=233, col_offset=15), [Return(Name('None', Load(), lineno=235, col_offset=23), lineno=235, col_offset=16)], [Assign([Name('mapchar', Store(), lineno=237, col_offset=16)], Call(Name('unichr', Load(), lineno=237, col_offset=26), [Name('mapvalue', Load(), lineno=237, col_offset=33)], [], None, None, lineno=237, col_offset=26), lineno=237, col_offset=16)], lineno=233, col_offset=12)], lineno=230, col_offset=8), If(BoolOp(And(), [Name('mapcomment', Load(), lineno=238, col_offset=11), Name('comments', Load(), lineno=238, col_offset=26)], lineno=238, col_offset=11), [Expr(Call(Name('append', Load(), lineno=239, col_offset=12), [BinOp(Str('    %r\t#  %s -> %s', lineno=239, col_offset=19), Mod(), Tuple([Name('mapchar', Load(), lineno=239, col_offset=44), Call(Name('hexrepr', Load(), lineno=240, col_offset=44), [Name('key', Load(), lineno=240, col_offset=52), Name('key_precision', Load(), lineno=240, col_offset=57)], [], None, None, lineno=240, col_offset=44), Name('mapcomment', Load(), lineno=241, col_offset=44)], Load(), lineno=239, col_offset=44), lineno=239, col_offset=19)], [], None, None, lineno=239, col_offset=12), lineno=239, col_offset=12)], [Expr(Call(Name('append', Load(), lineno=243, col_offset=12), [BinOp(Str('    %r', lineno=243, col_offset=19), Mod(), Name('mapchar', Load(), lineno=243, col_offset=30), lineno=243, col_offset=19)], [], None, None, lineno=243, col_offset=12), lineno=243, col_offset=12)], lineno=238, col_offset=8)], [], lineno=224, col_offset=4), Expr(Call(Name('append', Load(), lineno=245, col_offset=4), [Str(')', lineno=245, col_offset=11)], [], None, None, lineno=245, col_offset=4), lineno=245, col_offset=4), Return(Name('l', Load(), lineno=246, col_offset=11), lineno=246, col_offset=4)], [], lineno=193, col_offset=0), FunctionDef('codegen', arguments([Name('name', Param(), lineno=248, col_offset=12), Name('map', Param(), lineno=248, col_offset=18), Name('encodingname', Param(), lineno=248, col_offset=23), Name('comments', Param(), lineno=248, col_offset=37)], None, None, [Num(1, lineno=248, col_offset=46)]), [Expr(Str(' Returns Python source for the given map.\n\n        Comments are included in the source, if comments is true (default).\n\n    ', lineno=254, col_offset=-1), lineno=254, col_offset=-1), Assign([Name('decoding_map_code', Store(), lineno=256, col_offset=4)], Call(Name('python_mapdef_code', Load(), lineno=256, col_offset=24), [Str('decoding_map', lineno=257, col_offset=8), Name('map', Load(), lineno=258, col_offset=8)], [keyword('comments', Name('comments', Load(), lineno=259, col_offset=17))], None, None, lineno=256, col_offset=24), lineno=256, col_offset=4), Assign([Name('decoding_table_code', Store(), lineno=260, col_offset=4)], Call(Name('python_tabledef_code', Load(), lineno=260, col_offset=26), [Str('decoding_table', lineno=261, col_offset=8), Name('map', Load(), lineno=262, col_offset=8)], [keyword('comments', Name('comments', Load(), lineno=263, col_offset=17))], None, None, lineno=260, col_offset=26), lineno=260, col_offset=4), Assign([Name('encoding_map_code', Store(), lineno=264, col_offset=4)], Call(Name('python_mapdef_code', Load(), lineno=264, col_offset=24), [Str('encoding_map', lineno=265, col_offset=8), Call(Attribute(Name('codecs', Load(), lineno=266, col_offset=8), 'make_encoding_map', Load(), lineno=266, col_offset=8), [Name('map', Load(), lineno=266, col_offset=33)], [], None, None, lineno=266, col_offset=8)], [keyword('comments', Name('comments', Load(), lineno=267, col_offset=17)), keyword('precisions', Tuple([Num(4, lineno=268, col_offset=20), Num(2, lineno=268, col_offset=23)], Load(), lineno=268, col_offset=20))], None, None, lineno=264, col_offset=24), lineno=264, col_offset=4), If(Name('decoding_table_code', Load(), lineno=270, col_offset=7), [Assign([Name('suffix', Store(), lineno=271, col_offset=8)], Str('table', lineno=271, col_offset=17), lineno=271, col_offset=8)], [Assign([Name('suffix', Store(), lineno=273, col_offset=8)], Str('map', lineno=273, col_offset=17), lineno=273, col_offset=8)], lineno=270, col_offset=4), Assign([Name('l', Store(), lineno=275, col_offset=4)], List([BinOp(Str('""" Python Character Mapping Codec %s generated from \'%s\' with gencodec.py.\n\n"""#"\n\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    def encode(self,input,errors=\'strict\'):\n        return codecs.charmap_encode(input,errors,encoding_%s)\n\n    def decode(self,input,errors=\'strict\'):\n        return codecs.charmap_decode(input,errors,decoding_%s)\n', lineno=292, col_offset=-1), Mod(), Tuple([Name('encodingname', Load(), lineno=292, col_offset=7), Name('name', Load(), lineno=292, col_offset=21), Name('suffix', Load(), lineno=292, col_offset=27), Name('suffix', Load(), lineno=292, col_offset=35)], Load(), lineno=292, col_offset=7), lineno=292, col_offset=-1)], Load(), lineno=275, col_offset=8), lineno=275, col_offset=4), Expr(Call(Attribute(Name('l', Load(), lineno=293, col_offset=4), 'append', Load(), lineno=293, col_offset=4), [BinOp(Str('class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_%s)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_%s)[0]', lineno=300, col_offset=-1), Mod(), Tuple([Name('suffix', Load(), lineno=301, col_offset=9), Name('suffix', Load(), lineno=301, col_offset=17)], Load(), lineno=301, col_offset=9), lineno=300, col_offset=-1)], [], None, None, lineno=293, col_offset=4), lineno=293, col_offset=4), Expr(Call(Attribute(Name('l', Load(), lineno=303, col_offset=4), 'append', Load(), lineno=303, col_offset=4), [BinOp(Str('\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=%r,\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n', lineno=322, col_offset=-1), Mod(), Call(Attribute(Name('encodingname', Load(), lineno=322, col_offset=6), 'replace', Load(), lineno=322, col_offset=6), [Str('_', lineno=322, col_offset=27), Str('-', lineno=322, col_offset=32)], [], None, None, lineno=322, col_offset=6), lineno=322, col_offset=-1)], [], None, None, lineno=303, col_offset=4), lineno=303, col_offset=4), If(UnaryOp(Not(), Name('decoding_table_code', Load(), lineno=325, col_offset=11), lineno=325, col_offset=7), [Expr(Call(Attribute(Name('l', Load(), lineno=326, col_offset=8), 'append', Load(), lineno=326, col_offset=8), [Str('\n### Decoding Map\n', lineno=328, col_offset=-1)], [], None, None, lineno=326, col_offset=8), lineno=326, col_offset=8), Expr(Call(Attribute(Name('l', Load(), lineno=329, col_offset=8), 'extend', Load(), lineno=329, col_offset=8), [Name('decoding_map_code', Load(), lineno=329, col_offset=17)], [], None, None, lineno=329, col_offset=8), lineno=329, col_offset=8)], [Expr(Call(Attribute(Name('l', Load(), lineno=331, col_offset=8), 'append', Load(), lineno=331, col_offset=8), [Str('\n### Decoding Table\n', lineno=333, col_offset=-1)], [], None, None, lineno=331, col_offset=8), lineno=331, col_offset=8), Expr(Call(Attribute(Name('l', Load(), lineno=334, col_offset=8), 'extend', Load(), lineno=334, col_offset=8), [Name('decoding_table_code', Load(), lineno=334, col_offset=17)], [], None, None, lineno=334, col_offset=8), lineno=334, col_offset=8)], lineno=325, col_offset=4), If(Name('decoding_table_code', Load(), lineno=337, col_offset=7), [Expr(Call(Attribute(Name('l', Load(), lineno=338, col_offset=8), 'append', Load(), lineno=338, col_offset=8), [Str('\n### Encoding table\nencoding_table=codecs.charmap_build(decoding_table)\n', lineno=341, col_offset=-1)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8)], [Expr(Call(Attribute(Name('l', Load(), lineno=343, col_offset=8), 'append', Load(), lineno=343, col_offset=8), [Str('\n### Encoding Map\n', lineno=345, col_offset=-1)], [], None, None, lineno=343, col_offset=8), lineno=343, col_offset=8), Expr(Call(Attribute(Name('l', Load(), lineno=346, col_offset=8), 'extend', Load(), lineno=346, col_offset=8), [Name('encoding_map_code', Load(), lineno=346, col_offset=17)], [], None, None, lineno=346, col_offset=8), lineno=346, col_offset=8)], lineno=337, col_offset=4), Expr(Call(Attribute(Name('l', Load(), lineno=349, col_offset=4), 'append', Load(), lineno=349, col_offset=4), [Str('', lineno=349, col_offset=13)], [], None, None, lineno=349, col_offset=4), lineno=349, col_offset=4), Return(Call(Attribute(Call(Attribute(Str('\n', lineno=351, col_offset=11), 'join', Load(), lineno=351, col_offset=11), [Name('l', Load(), lineno=351, col_offset=21)], [], None, None, lineno=351, col_offset=11), 'expandtabs', Load(), lineno=351, col_offset=11), [], [], None, None, lineno=351, col_offset=11), lineno=351, col_offset=4)], [], lineno=248, col_offset=0), FunctionDef('pymap', arguments([Name('name', Param(), lineno=353, col_offset=10), Name('map', Param(), lineno=353, col_offset=15), Name('pyfile', Param(), lineno=353, col_offset=19), Name('encodingname', Param(), lineno=353, col_offset=26), Name('comments', Param(), lineno=353, col_offset=39)], None, None, [Num(1, lineno=353, col_offset=48)]), [Assign([Name('code', Store(), lineno=355, col_offset=4)], Call(Name('codegen', Load(), lineno=355, col_offset=11), [Name('name', Load(), lineno=355, col_offset=19), Name('map', Load(), lineno=355, col_offset=24), Name('encodingname', Load(), lineno=355, col_offset=28), Name('comments', Load(), lineno=355, col_offset=41)], [], None, None, lineno=355, col_offset=11), lineno=355, col_offset=4), Assign([Name('f', Store(), lineno=356, col_offset=4)], Call(Name('open', Load(), lineno=356, col_offset=8), [Name('pyfile', Load(), lineno=356, col_offset=13), Str('w', lineno=356, col_offset=20)], [], None, None, lineno=356, col_offset=8), lineno=356, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=357, col_offset=4), 'write', Load(), lineno=357, col_offset=4), [Name('code', Load(), lineno=357, col_offset=12)], [], None, None, lineno=357, col_offset=4), lineno=357, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=358, col_offset=4), 'close', Load(), lineno=358, col_offset=4), [], [], None, None, lineno=358, col_offset=4), lineno=358, col_offset=4)], [], lineno=353, col_offset=0), FunctionDef('marshalmap', arguments([Name('name', Param(), lineno=360, col_offset=15), Name('map', Param(), lineno=360, col_offset=20), Name('marshalfile', Param(), lineno=360, col_offset=24)], None, None, []), [Assign([Name('d', Store(), lineno=362, col_offset=4)], Dict([], [], lineno=362, col_offset=8), lineno=362, col_offset=4), For(Tuple([Name('e', Store(), lineno=363, col_offset=8), Tuple([Name('u', Store(), lineno=363, col_offset=11), Name('c', Store(), lineno=363, col_offset=13)], Store(), lineno=363, col_offset=11)], Store(), lineno=363, col_offset=8), Call(Attribute(Name('map', Load(), lineno=363, col_offset=19), 'items', Load(), lineno=363, col_offset=19), [], [], None, None, lineno=363, col_offset=19), [Assign([Subscript(Name('d', Load(), lineno=364, col_offset=8), Index(Name('e', Load(), lineno=364, col_offset=10)), Store(), lineno=364, col_offset=8)], Tuple([Name('u', Load(), lineno=364, col_offset=16), Name('c', Load(), lineno=364, col_offset=18)], Load(), lineno=364, col_offset=16), lineno=364, col_offset=8)], [], lineno=363, col_offset=4), Assign([Name('f', Store(), lineno=365, col_offset=4)], Call(Name('open', Load(), lineno=365, col_offset=8), [Name('marshalfile', Load(), lineno=365, col_offset=13), Str('wb', lineno=365, col_offset=25)], [], None, None, lineno=365, col_offset=8), lineno=365, col_offset=4), Expr(Call(Attribute(Name('marshal', Load(), lineno=366, col_offset=4), 'dump', Load(), lineno=366, col_offset=4), [Name('d', Load(), lineno=366, col_offset=17), Name('f', Load(), lineno=366, col_offset=19)], [], None, None, lineno=366, col_offset=4), lineno=366, col_offset=4), Expr(Call(Attribute(Name('f', Load(), lineno=367, col_offset=4), 'close', Load(), lineno=367, col_offset=4), [], [], None, None, lineno=367, col_offset=4), lineno=367, col_offset=4)], [], lineno=360, col_offset=0), FunctionDef('convertdir', arguments([Name('dir', Param(), lineno=369, col_offset=15), Name('dirprefix', Param(), lineno=369, col_offset=20), Name('nameprefix', Param(), lineno=369, col_offset=34), Name('comments', Param(), lineno=369, col_offset=49)], None, None, [Str('', lineno=369, col_offset=30), Str('', lineno=369, col_offset=45), Num(1, lineno=369, col_offset=58)]), [Assign([Name('mapnames', Store(), lineno=371, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=371, col_offset=15), 'listdir', Load(), lineno=371, col_offset=15), [Name('dir', Load(), lineno=371, col_offset=26)], [], None, None, lineno=371, col_offset=15), lineno=371, col_offset=4), For(Name('mapname', Store(), lineno=372, col_offset=8), Name('mapnames', Load(), lineno=372, col_offset=19), [Assign([Name('mappathname', Store(), lineno=373, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=373, col_offset=22), 'path', Load(), lineno=373, col_offset=22), 'join', Load(), lineno=373, col_offset=22), [Name('dir', Load(), lineno=373, col_offset=35), Name('mapname', Load(), lineno=373, col_offset=40)], [], None, None, lineno=373, col_offset=22), lineno=373, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=374, col_offset=15), 'path', Load(), lineno=374, col_offset=15), 'isfile', Load(), lineno=374, col_offset=15), [Name('mappathname', Load(), lineno=374, col_offset=30)], [], None, None, lineno=374, col_offset=15), lineno=374, col_offset=11), [Continue( lineno=375, col_offset=12)], [], lineno=374, col_offset=8), Assign([Name('name', Store(), lineno=376, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=376, col_offset=15), 'path', Load(), lineno=376, col_offset=15), 'split', Load(), lineno=376, col_offset=15), [Name('mapname', Load(), lineno=376, col_offset=29)], [], None, None, lineno=376, col_offset=15), Index(Num(1, lineno=376, col_offset=38)), Load(), lineno=376, col_offset=15), lineno=376, col_offset=8), Assign([Name('name', Store(), lineno=377, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=377, col_offset=15), 'replace', Load(), lineno=377, col_offset=15), [Str('-', lineno=377, col_offset=28), Str('_', lineno=377, col_offset=32)], [], None, None, lineno=377, col_offset=15), lineno=377, col_offset=8), Assign([Name('name', Store(), lineno=378, col_offset=8)], Subscript(Call(Attribute(Name('name', Load(), lineno=378, col_offset=15), 'split', Load(), lineno=378, col_offset=15), [Str('.', lineno=378, col_offset=26)], [], None, None, lineno=378, col_offset=15), Index(Num(0, lineno=378, col_offset=31)), Load(), lineno=378, col_offset=15), lineno=378, col_offset=8), Assign([Name('name', Store(), lineno=379, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=379, col_offset=15), 'lower', Load(), lineno=379, col_offset=15), [], [], None, None, lineno=379, col_offset=15), lineno=379, col_offset=8), Assign([Name('name', Store(), lineno=380, col_offset=8)], BinOp(Name('nameprefix', Load(), lineno=380, col_offset=15), Add(), Name('name', Load(), lineno=380, col_offset=28), lineno=380, col_offset=15), lineno=380, col_offset=8), Assign([Name('codefile', Store(), lineno=381, col_offset=8)], BinOp(Name('name', Load(), lineno=381, col_offset=19), Add(), Str('.py', lineno=381, col_offset=26), lineno=381, col_offset=19), lineno=381, col_offset=8), Assign([Name('marshalfile', Store(), lineno=382, col_offset=8)], BinOp(Name('name', Load(), lineno=382, col_offset=22), Add(), Str('.mapping', lineno=382, col_offset=29), lineno=382, col_offset=22), lineno=382, col_offset=8), Print(None, [BinOp(Str('converting %s to %s and %s', lineno=383, col_offset=14), Mod(), Tuple([Name('mapname', Load(), lineno=383, col_offset=46), BinOp(Name('dirprefix', Load(), lineno=384, col_offset=46), Add(), Name('codefile', Load(), lineno=384, col_offset=58), lineno=384, col_offset=46), BinOp(Name('dirprefix', Load(), lineno=385, col_offset=46), Add(), Name('marshalfile', Load(), lineno=385, col_offset=58), lineno=385, col_offset=46)], Load(), lineno=383, col_offset=46), lineno=383, col_offset=14)], True, lineno=383, col_offset=8), TryExcept([Assign([Name('map', Store(), lineno=387, col_offset=12)], Call(Name('readmap', Load(), lineno=387, col_offset=18), [Call(Attribute(Attribute(Name('os', Load(), lineno=387, col_offset=26), 'path', Load(), lineno=387, col_offset=26), 'join', Load(), lineno=387, col_offset=26), [Name('dir', Load(), lineno=387, col_offset=39), Name('mapname', Load(), lineno=387, col_offset=43)], [], None, None, lineno=387, col_offset=26)], [], None, None, lineno=387, col_offset=18), lineno=387, col_offset=12), If(UnaryOp(Not(), Name('map', Load(), lineno=388, col_offset=19), lineno=388, col_offset=15), [Print(None, [Str('* map is empty; skipping', lineno=389, col_offset=22)], True, lineno=389, col_offset=16)], [Expr(Call(Name('pymap', Load(), lineno=391, col_offset=16), [Name('mappathname', Load(), lineno=391, col_offset=22), Name('map', Load(), lineno=391, col_offset=35), BinOp(Name('dirprefix', Load(), lineno=391, col_offset=40), Add(), Name('codefile', Load(), lineno=391, col_offset=52), lineno=391, col_offset=40), Name('name', Load(), lineno=391, col_offset=61), Name('comments', Load(), lineno=391, col_offset=66)], [], None, None, lineno=391, col_offset=16), lineno=391, col_offset=16), Expr(Call(Name('marshalmap', Load(), lineno=392, col_offset=16), [Name('mappathname', Load(), lineno=392, col_offset=27), Name('map', Load(), lineno=392, col_offset=40), BinOp(Name('dirprefix', Load(), lineno=392, col_offset=45), Add(), Name('marshalfile', Load(), lineno=392, col_offset=57), lineno=392, col_offset=45)], [], None, None, lineno=392, col_offset=16), lineno=392, col_offset=16)], lineno=388, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=393, col_offset=15), Name('why', Store(), lineno=393, col_offset=27), [Print(None, [BinOp(Str('* conversion failed: %s', lineno=394, col_offset=18), Mod(), Name('why', Load(), lineno=394, col_offset=46), lineno=394, col_offset=18)], True, lineno=394, col_offset=12), Raise(None, None, None, lineno=395, col_offset=12)], lineno=393, col_offset=8)], [], lineno=386, col_offset=8)], [], lineno=372, col_offset=4)], [], lineno=369, col_offset=0), FunctionDef('rewritepythondir', arguments([Name('dir', Param(), lineno=397, col_offset=21), Name('dirprefix', Param(), lineno=397, col_offset=26), Name('comments', Param(), lineno=397, col_offset=40)], None, None, [Str('', lineno=397, col_offset=36), Num(1, lineno=397, col_offset=49)]), [Assign([Name('mapnames', Store(), lineno=399, col_offset=4)], Call(Attribute(Name('os', Load(), lineno=399, col_offset=15), 'listdir', Load(), lineno=399, col_offset=15), [Name('dir', Load(), lineno=399, col_offset=26)], [], None, None, lineno=399, col_offset=15), lineno=399, col_offset=4), For(Name('mapname', Store(), lineno=400, col_offset=8), Name('mapnames', Load(), lineno=400, col_offset=19), [If(UnaryOp(Not(), Call(Attribute(Name('mapname', Load(), lineno=401, col_offset=15), 'endswith', Load(), lineno=401, col_offset=15), [Str('.mapping', lineno=401, col_offset=32)], [], None, None, lineno=401, col_offset=15), lineno=401, col_offset=11), [Continue( lineno=402, col_offset=12)], [], lineno=401, col_offset=8), Assign([Name('name', Store(), lineno=403, col_offset=8)], Subscript(Name('mapname', Load(), lineno=403, col_offset=15), Slice(None, UnaryOp(USub(), Call(Name('len', Load(), lineno=403, col_offset=25), [Str('.mapping', lineno=403, col_offset=29)], [], None, None, lineno=403, col_offset=25), lineno=403, col_offset=24), None), Load(), lineno=403, col_offset=15), lineno=403, col_offset=8), Assign([Name('codefile', Store(), lineno=404, col_offset=8)], BinOp(Name('name', Load(), lineno=404, col_offset=19), Add(), Str('.py', lineno=404, col_offset=26), lineno=404, col_offset=19), lineno=404, col_offset=8), Print(None, [BinOp(Str('converting %s to %s', lineno=405, col_offset=14), Mod(), Tuple([Name('mapname', Load(), lineno=405, col_offset=39), BinOp(Name('dirprefix', Load(), lineno=406, col_offset=39), Add(), Name('codefile', Load(), lineno=406, col_offset=51), lineno=406, col_offset=39)], Load(), lineno=405, col_offset=39), lineno=405, col_offset=14)], True, lineno=405, col_offset=8), TryExcept([Assign([Name('map', Store(), lineno=408, col_offset=12)], Call(Attribute(Name('marshal', Load(), lineno=408, col_offset=18), 'load', Load(), lineno=408, col_offset=18), [Call(Name('open', Load(), lineno=408, col_offset=31), [Call(Attribute(Attribute(Name('os', Load(), lineno=408, col_offset=36), 'path', Load(), lineno=408, col_offset=36), 'join', Load(), lineno=408, col_offset=36), [Name('dir', Load(), lineno=408, col_offset=49), Name('mapname', Load(), lineno=408, col_offset=53)], [], None, None, lineno=408, col_offset=36), Str('rb', lineno=409, col_offset=31)], [], None, None, lineno=408, col_offset=31)], [], None, None, lineno=408, col_offset=18), lineno=408, col_offset=12), If(UnaryOp(Not(), Name('map', Load(), lineno=410, col_offset=19), lineno=410, col_offset=15), [Print(None, [Str('* map is empty; skipping', lineno=411, col_offset=22)], True, lineno=411, col_offset=16)], [Expr(Call(Name('pymap', Load(), lineno=413, col_offset=16), [Name('mapname', Load(), lineno=413, col_offset=22), Name('map', Load(), lineno=413, col_offset=31), BinOp(Name('dirprefix', Load(), lineno=413, col_offset=36), Add(), Name('codefile', Load(), lineno=413, col_offset=48), lineno=413, col_offset=36), Name('name', Load(), lineno=413, col_offset=57), Name('comments', Load(), lineno=413, col_offset=62)], [], None, None, lineno=413, col_offset=16), lineno=413, col_offset=16)], lineno=410, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=414, col_offset=15), Name('why', Store(), lineno=414, col_offset=27), [Print(None, [BinOp(Str('* conversion failed: %s', lineno=415, col_offset=18), Mod(), Name('why', Load(), lineno=415, col_offset=46), lineno=415, col_offset=18)], True, lineno=415, col_offset=12)], lineno=414, col_offset=8)], [], lineno=407, col_offset=8)], [], lineno=400, col_offset=4)], [], lineno=397, col_offset=0), If(Compare(Name('__name__', Load(), lineno=417, col_offset=3), [Eq()], [Str('__main__', lineno=417, col_offset=15)], lineno=417, col_offset=3), [Import([alias('sys', None)], lineno=419, col_offset=4), If(Num(1, lineno=420, col_offset=7), [Expr(Call(Name('convertdir', Load(), lineno=421, col_offset=8), [], [], Subscript(Attribute(Name('sys', Load(), lineno=421, col_offset=20), 'argv', Load(), lineno=421, col_offset=20), Slice(Num(1, lineno=421, col_offset=29), None, None), Load(), lineno=421, col_offset=20), None, lineno=421, col_offset=8), lineno=421, col_offset=8)], [Expr(Call(Name('rewritepythondir', Load(), lineno=423, col_offset=8), [], [], Subscript(Attribute(Name('sys', Load(), lineno=423, col_offset=26), 'argv', Load(), lineno=423, col_offset=26), Slice(Num(1, lineno=423, col_offset=35), None, None), Load(), lineno=423, col_offset=26), None, lineno=423, col_offset=8), lineno=423, col_offset=8)], lineno=420, col_offset=4)], [], lineno=417, col_offset=0)])
