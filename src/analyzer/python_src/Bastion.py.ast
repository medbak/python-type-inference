Module([Expr(Str("Bastionification utility.\n\nA bastion (for another object -- the 'original') is an object that has\nthe same methods as the original but does not give access to its\ninstance variables.  Bastions have a number of uses, but the most\nobvious one is to provide code executing in restricted mode with a\nsafe interface to an object implemented in unrestricted mode.\n\nThe bastionification routine has an optional second argument which is\na filter function.  Only those methods for which the filter method\n(called with the method name as argument) returns true are accessible.\nThe default filter method returns true unless the method name begins\nwith an underscore.\n\nThere are a number of possible implementations of bastions.  We use a\n'lazy' approach where the bastion's __getattr__() discipline does all\nthe work for a particular method the first time it is used.  This is\nusually fastest, especially if the user doesn't call all available\nmethods.  The retrieved methods are stored as instance variables of\nthe bastion, so the overhead is only occurred on the first use of each\nmethod.\n\nDetail: the bastion class has a __repr__() discipline which includes\nthe repr() of the original object.  This is precomputed when the\nbastion is created.\n\n", lineno=27, col_offset=-1), lineno=27, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=28, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=29, col_offset=0), [Str('the Bastion module has been removed in Python 3.0', lineno=29, col_offset=9)], [keyword('stacklevel', Num(2, lineno=29, col_offset=73))], None, None, lineno=29, col_offset=0), lineno=29, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=30, col_offset=4)], lineno=30, col_offset=0), Assign([Name('__all__', Store(), lineno=32, col_offset=0)], List([Str('BastionClass', lineno=32, col_offset=11), Str('Bastion', lineno=32, col_offset=27)], Load(), lineno=32, col_offset=10), lineno=32, col_offset=0), ImportFrom('types', [alias('MethodType', None)], 0, lineno=34, col_offset=0), ClassDef('BastionClass', [], [Expr(Str('Helper class used by the Bastion() function.\n\n    You could subclass this and pass the subclass as the bastionclass\n    argument to the Bastion() function, as long as the constructor has\n    the same signature (a get() function and a name for the object).\n\n    ', lineno=45, col_offset=-1), lineno=45, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=47, col_offset=17), Name('get', Param(), lineno=47, col_offset=23), Name('name', Param(), lineno=47, col_offset=28)], None, None, []), [Expr(Str('Constructor.\n\n        Arguments:\n\n        get - a function that gets the attribute value (by name)\n        name - a human-readable name for the original object\n               (suggestion: use repr(object))\n\n        ', lineno=56, col_offset=-1), lineno=56, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=57, col_offset=8), '_get_', Store(), lineno=57, col_offset=8)], Name('get', Load(), lineno=57, col_offset=21), lineno=57, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=58, col_offset=8), '_name_', Store(), lineno=58, col_offset=8)], Name('name', Load(), lineno=58, col_offset=22), lineno=58, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=60, col_offset=17)], None, None, []), [Expr(Str('Return a representation string.\n\n        This includes the name passed in to the constructor, so that\n        if you print the bastion during debugging, at least you have\n        some idea of what it is.\n\n        ', lineno=67, col_offset=-1), lineno=67, col_offset=-1), Return(BinOp(Str('<Bastion for %s>', lineno=68, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=68, col_offset=36), '_name_', Load(), lineno=68, col_offset=36), lineno=68, col_offset=15), lineno=68, col_offset=8)], [], lineno=60, col_offset=4), FunctionDef('__getattr__', arguments([Name('self', Param(), lineno=70, col_offset=20), Name('name', Param(), lineno=70, col_offset=26)], None, None, []), [Expr(Str("Get an as-yet undefined attribute value.\n\n        This calls the get() function that was passed to the\n        constructor.  The result is stored as an instance variable so\n        that the next time the same attribute is requested,\n        __getattr__() won't be invoked.\n\n        If the get() function raises an exception, this is simply\n        passed on -- exceptions are not cached.\n\n        ", lineno=81, col_offset=-1), lineno=81, col_offset=-1), Assign([Name('attribute', Store(), lineno=82, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=82, col_offset=20), '_get_', Load(), lineno=82, col_offset=20), [Name('name', Load(), lineno=82, col_offset=31)], [], None, None, lineno=82, col_offset=20), lineno=82, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=83, col_offset=8), '__dict__', Load(), lineno=83, col_offset=8), Index(Name('name', Load(), lineno=83, col_offset=22)), Store(), lineno=83, col_offset=8)], Name('attribute', Load(), lineno=83, col_offset=30), lineno=83, col_offset=8), Return(Name('attribute', Load(), lineno=84, col_offset=15), lineno=84, col_offset=8)], [], lineno=70, col_offset=4)], [], lineno=37, col_offset=0), FunctionDef('Bastion', arguments([Name('object', Param(), lineno=87, col_offset=12), Name('filter', Param(), lineno=87, col_offset=20), Name('name', Param(), lineno=88, col_offset=12), Name('bastionclass', Param(), lineno=88, col_offset=23)], None, None, [Lambda(arguments([Name('name', Param(), lineno=87, col_offset=36)], None, None, []), Compare(Subscript(Name('name', Load(), lineno=87, col_offset=42), Slice(None, Num(1, lineno=87, col_offset=48), None), Load(), lineno=87, col_offset=42), [NotEq()], [Str('_', lineno=87, col_offset=54)], lineno=87, col_offset=42), lineno=87, col_offset=29), Name('None', Load(), lineno=88, col_offset=17), Name('BastionClass', Load(), lineno=88, col_offset=36)]), [Expr(Str("Create a bastion for an object, using an optional filter.\n\n    See the Bastion module's documentation for background.\n\n    Arguments:\n\n    object - the original object\n    filter - a predicate that decides whether a function name is OK;\n             by default all names are OK that don't start with '_'\n    name - the name of the object; default repr(object)\n    bastionclass - class used to create the bastion; default BastionClass\n\n    ", lineno=101, col_offset=-1), lineno=101, col_offset=-1), Raise(Name('RuntimeError', Load(), lineno=103, col_offset=10), Str('This code is not secure in Python 2.2 and later', lineno=103, col_offset=24), None, lineno=103, col_offset=4), FunctionDef('get1', arguments([Name('name', Param(), lineno=117, col_offset=13), Name('object', Param(), lineno=117, col_offset=19), Name('filter', Param(), lineno=117, col_offset=34)], None, None, [Name('object', Load(), lineno=117, col_offset=26), Name('filter', Load(), lineno=117, col_offset=41)]), [Expr(Str('Internal function for Bastion().  See source comments.', lineno=118, col_offset=8), lineno=118, col_offset=8), If(Call(Name('filter', Load(), lineno=119, col_offset=11), [Name('name', Load(), lineno=119, col_offset=18)], [], None, None, lineno=119, col_offset=11), [Assign([Name('attribute', Store(), lineno=120, col_offset=12)], Call(Name('getattr', Load(), lineno=120, col_offset=24), [Name('object', Load(), lineno=120, col_offset=32), Name('name', Load(), lineno=120, col_offset=40)], [], None, None, lineno=120, col_offset=24), lineno=120, col_offset=12), If(Compare(Call(Name('type', Load(), lineno=121, col_offset=15), [Name('attribute', Load(), lineno=121, col_offset=20)], [], None, None, lineno=121, col_offset=15), [Eq()], [Name('MethodType', Load(), lineno=121, col_offset=34)], lineno=121, col_offset=15), [Return(Name('attribute', Load(), lineno=122, col_offset=23), lineno=122, col_offset=16)], [], lineno=121, col_offset=12)], [], lineno=119, col_offset=8), Raise(Name('AttributeError', Load(), lineno=123, col_offset=14), Name('name', Load(), lineno=123, col_offset=30), None, lineno=123, col_offset=8)], [], lineno=117, col_offset=4), FunctionDef('get2', arguments([Name('name', Param(), lineno=125, col_offset=13), Name('get1', Param(), lineno=125, col_offset=19)], None, None, [Name('get1', Load(), lineno=125, col_offset=24)]), [Expr(Str('Internal function for Bastion().  See source comments.', lineno=126, col_offset=8), lineno=126, col_offset=8), Return(Call(Name('get1', Load(), lineno=127, col_offset=15), [Name('name', Load(), lineno=127, col_offset=20)], [], None, None, lineno=127, col_offset=15), lineno=127, col_offset=8)], [], lineno=125, col_offset=4), If(Compare(Name('name', Load(), lineno=129, col_offset=7), [Is()], [Name('None', Load(), lineno=129, col_offset=15)], lineno=129, col_offset=7), [Assign([Name('name', Store(), lineno=130, col_offset=8)], Call(Name('repr', Load(), lineno=130, col_offset=15), [Name('object', Load(), lineno=130, col_offset=20)], [], None, None, lineno=130, col_offset=15), lineno=130, col_offset=8)], [], lineno=129, col_offset=4), Return(Call(Name('bastionclass', Load(), lineno=131, col_offset=11), [Name('get2', Load(), lineno=131, col_offset=24), Name('name', Load(), lineno=131, col_offset=30)], [], None, None, lineno=131, col_offset=11), lineno=131, col_offset=4)], [], lineno=87, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Expr(Str('Test the Bastion() function.', lineno=135, col_offset=4), lineno=135, col_offset=4), ClassDef('Original', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=137, col_offset=21)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=138, col_offset=12), 'sum', Store(), lineno=138, col_offset=12)], Num(0, lineno=138, col_offset=23), lineno=138, col_offset=12)], [], lineno=137, col_offset=8), FunctionDef('add', arguments([Name('self', Param(), lineno=139, col_offset=16), Name('n', Param(), lineno=139, col_offset=22)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=140, col_offset=12), '_add', Load(), lineno=140, col_offset=12), [Name('n', Load(), lineno=140, col_offset=22)], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12)], [], lineno=139, col_offset=8), FunctionDef('_add', arguments([Name('self', Param(), lineno=141, col_offset=17), Name('n', Param(), lineno=141, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=142, col_offset=12), 'sum', Store(), lineno=142, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=142, col_offset=23), 'sum', Load(), lineno=142, col_offset=23), Add(), Name('n', Load(), lineno=142, col_offset=34), lineno=142, col_offset=23), lineno=142, col_offset=12)], [], lineno=141, col_offset=8), FunctionDef('total', arguments([Name('self', Param(), lineno=143, col_offset=18)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=144, col_offset=19), 'sum', Load(), lineno=144, col_offset=19), lineno=144, col_offset=12)], [], lineno=143, col_offset=8)], [], lineno=136, col_offset=4), Assign([Name('o', Store(), lineno=145, col_offset=4)], Call(Name('Original', Load(), lineno=145, col_offset=8), [], [], None, None, lineno=145, col_offset=8), lineno=145, col_offset=4), Assign([Name('b', Store(), lineno=146, col_offset=4)], Call(Name('Bastion', Load(), lineno=146, col_offset=8), [Name('o', Load(), lineno=146, col_offset=16)], [], None, None, lineno=146, col_offset=8), lineno=146, col_offset=4), Assign([Name('testcode', Store(), lineno=147, col_offset=4)], Str('if 1:\n    b.add(81)\n    b.add(18)\n    print "b.total() =", b.total()\n    try:\n        print "b.sum =", b.sum,\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    try:\n        print "b._add =", b._add,\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    try:\n        print "b._get_.func_defaults =", map(type, b._get_.func_defaults),\n    except:\n        print "inaccessible"\n    else:\n        print "accessible"\n    \n', lineno=169, col_offset=-1), lineno=147, col_offset=4), Exec(Name('testcode', Load(), lineno=170, col_offset=9), None, None, lineno=170, col_offset=4), Print(None, [BinOp(Str('=', lineno=171, col_offset=10), Mult(), Num(20, lineno=171, col_offset=14), lineno=171, col_offset=10), Str('Using rexec:', lineno=171, col_offset=18), BinOp(Str('=', lineno=171, col_offset=34), Mult(), Num(20, lineno=171, col_offset=38), lineno=171, col_offset=34)], True, lineno=171, col_offset=4), Import([alias('rexec', None)], lineno=172, col_offset=4), Assign([Name('r', Store(), lineno=173, col_offset=4)], Call(Attribute(Name('rexec', Load(), lineno=173, col_offset=8), 'RExec', Load(), lineno=173, col_offset=8), [], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=4), Assign([Name('m', Store(), lineno=174, col_offset=4)], Call(Attribute(Name('r', Load(), lineno=174, col_offset=8), 'add_module', Load(), lineno=174, col_offset=8), [Str('__main__', lineno=174, col_offset=21)], [], None, None, lineno=174, col_offset=8), lineno=174, col_offset=4), Assign([Attribute(Name('m', Load(), lineno=175, col_offset=4), 'b', Store(), lineno=175, col_offset=4)], Name('b', Load(), lineno=175, col_offset=10), lineno=175, col_offset=4), Expr(Call(Attribute(Name('r', Load(), lineno=176, col_offset=4), 'r_exec', Load(), lineno=176, col_offset=4), [Name('testcode', Load(), lineno=176, col_offset=13)], [], None, None, lineno=176, col_offset=4), lineno=176, col_offset=4)], [], lineno=134, col_offset=0), If(Compare(Name('__name__', Load(), lineno=179, col_offset=3), [Eq()], [Str('__main__', lineno=179, col_offset=15)], lineno=179, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=180, col_offset=4), [], [], None, None, lineno=180, col_offset=4), lineno=180, col_offset=4)], [], lineno=179, col_offset=0)])
