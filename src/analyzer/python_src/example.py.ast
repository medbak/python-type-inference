Module([Expr(Str('Generate the skeleton for cStringIO as an example of framer.', lineno=1, col_offset=0), lineno=1, col_offset=0), ImportFrom('framer.bases', [alias('Module', None), alias('Type', None)], 0, lineno=3, col_offset=0), ImportFrom('framer.member', [alias('member', None)], 0, lineno=4, col_offset=0), ClassDef('cStringIO', [Name('Module', Load(), lineno=6, col_offset=16)], [Expr(Str('A simple fast partial StringIO replacement.\n\n    This module provides a simple useful replacement for the StringIO\n    module that is written in C.  It does not provide the full\n    generality of StringIO, but it provides enough for most\n    applications and is especially useful in conjunction with the\n    pickle module.\n\n    Usage:\n\n    from cStringIO import StringIO\n\n    an_output_stream = StringIO()\n    an_output_stream.write(some_stuff)\n    ...\n    value = an_output_stream.getvalue()\n\n    an_input_stream = StringIO(a_string)\n    spam = an_input_stream.readline()\n    spam = an_input_stream.read(5)\n    an_input_stream.seek(0)             # OK, start over\n    spam = an_input_stream.read()       # and read it all\n    ', lineno=29, col_offset=-1), lineno=29, col_offset=-1), Assign([Name('__file__', Store(), lineno=31, col_offset=4)], Str('cStringIO.c', lineno=31, col_offset=15), lineno=31, col_offset=4), FunctionDef('StringIO', arguments([Name('o', Param(), lineno=33, col_offset=17)], None, None, []), [Expr(Str('Return a StringIO-like stream for reading or writing', lineno=34, col_offset=8), lineno=34, col_offset=8)], [], lineno=33, col_offset=4), Assign([Attribute(Name('StringIO', Load(), lineno=35, col_offset=4), 'pyarg', Store(), lineno=35, col_offset=4)], Str('|O', lineno=35, col_offset=21), lineno=35, col_offset=4), ClassDef('InputType', [Name('Type', Load(), lineno=37, col_offset=20)], [Expr(Str('Simple type for treating strings as input file streams', lineno=38, col_offset=8), lineno=38, col_offset=8), Assign([Name('abbrev', Store(), lineno=40, col_offset=8)], Str('input', lineno=40, col_offset=17), lineno=40, col_offset=8), Assign([Name('struct', Store(), lineno=42, col_offset=8)], Str('        typedef struct {\n                PyObject_HEAD\n                char *buf;\n                int pos;\n                int size;\n                PyObject *pbuf;\n        } InputObject;\n        ', lineno=50, col_offset=-1), lineno=42, col_offset=8), FunctionDef('flush', arguments([Name('self', Param(), lineno=52, col_offset=18)], None, None, []), [Expr(Str('Does nothing', lineno=53, col_offset=12), lineno=53, col_offset=12)], [], lineno=52, col_offset=8), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=55, col_offset=21)], None, None, []), [Expr(Str('Get the string value.\n\n            If use_pos is specified and is a true value, then the\n            string returned will include only the text up to the\n            current file position.\n            ', lineno=61, col_offset=-1), lineno=61, col_offset=-1)], [], lineno=55, col_offset=8), FunctionDef('isatty', arguments([Name('self', Param(), lineno=63, col_offset=19)], None, None, []), [Expr(Str('Always returns False', lineno=64, col_offset=12), lineno=64, col_offset=12)], [], lineno=63, col_offset=8), FunctionDef('read', arguments([Name('self', Param(), lineno=66, col_offset=17), Name('s', Param(), lineno=66, col_offset=23)], None, None, []), [Expr(Str('Return s characters or the rest of the string.', lineno=67, col_offset=12), lineno=67, col_offset=12)], [], lineno=66, col_offset=8), Assign([Attribute(Name('read', Load(), lineno=68, col_offset=8), 'pyarg', Store(), lineno=68, col_offset=8)], Str('|i', lineno=68, col_offset=21), lineno=68, col_offset=8), FunctionDef('readline', arguments([Name('self', Param(), lineno=70, col_offset=21)], None, None, []), [Expr(Str('Read one line.', lineno=71, col_offset=12), lineno=71, col_offset=12)], [], lineno=70, col_offset=8), FunctionDef('readlines', arguments([Name('self', Param(), lineno=73, col_offset=22), Name('hint', Param(), lineno=73, col_offset=28)], None, None, []), [Expr(Str('Read all lines.', lineno=74, col_offset=12), lineno=74, col_offset=12)], [], lineno=73, col_offset=8), Assign([Attribute(Name('readlines', Load(), lineno=75, col_offset=8), 'pyarg', Store(), lineno=75, col_offset=8)], Str('|i', lineno=75, col_offset=26), lineno=75, col_offset=8), FunctionDef('reset', arguments([Name('self', Param(), lineno=77, col_offset=18)], None, None, []), [Expr(Str('Reset the file position to the beginning.', lineno=78, col_offset=12), lineno=78, col_offset=12)], [], lineno=77, col_offset=8), FunctionDef('tell', arguments([Name('self', Param(), lineno=80, col_offset=17)], None, None, []), [Expr(Str('Get the current position.', lineno=81, col_offset=12), lineno=81, col_offset=12)], [], lineno=80, col_offset=8), FunctionDef('truncate', arguments([Name('self', Param(), lineno=83, col_offset=21), Name('pos', Param(), lineno=83, col_offset=27)], None, None, []), [Expr(Str('Truncate the file at the current position.', lineno=84, col_offset=12), lineno=84, col_offset=12)], [], lineno=83, col_offset=8), Assign([Attribute(Name('truncate', Load(), lineno=85, col_offset=8), 'pyarg', Store(), lineno=85, col_offset=8)], Str('|i', lineno=85, col_offset=25), lineno=85, col_offset=8), FunctionDef('seek', arguments([Name('self', Param(), lineno=87, col_offset=17), Name('position', Param(), lineno=87, col_offset=23), Name('mode', Param(), lineno=87, col_offset=33)], None, None, [Num(0, lineno=87, col_offset=38)]), [Expr(Str('Set the current position.\n\n            The optional mode argument can be 0 for absolute, 1 for relative,\n            and 2 for relative to EOF.  The default is absolute.\n            ', lineno=92, col_offset=-1), lineno=92, col_offset=-1)], [], lineno=87, col_offset=8), Assign([Attribute(Name('seek', Load(), lineno=93, col_offset=8), 'pyarg', Store(), lineno=93, col_offset=8)], Str('i|i', lineno=93, col_offset=21), lineno=93, col_offset=8), FunctionDef('close', arguments([Name('self', Param(), lineno=95, col_offset=18)], None, None, []), [Pass( lineno=96, col_offset=12)], [], lineno=95, col_offset=8)], [], lineno=37, col_offset=4), ClassDef('OutputType', [Name('InputType', Load(), lineno=98, col_offset=21)], [Expr(Str('Simple type for output strings.', lineno=99, col_offset=8), lineno=99, col_offset=8), Assign([Name('abbrev', Store(), lineno=101, col_offset=8)], Str('output', lineno=101, col_offset=17), lineno=101, col_offset=8), Assign([Name('struct', Store(), lineno=103, col_offset=8)], Str('        typedef struct {\n                PyObject_HEAD\n                char *buf;\n                int pos;\n                int size;\n                int softspace;\n        } OutputObject;\n        ', lineno=111, col_offset=-1), lineno=103, col_offset=8), Assign([Name('softspace', Store(), lineno=113, col_offset=8)], Call(Name('member', Load(), lineno=113, col_offset=20), [], [], None, None, lineno=113, col_offset=20), lineno=113, col_offset=8), FunctionDef('close', arguments([Name('self', Param(), lineno=115, col_offset=18)], None, None, []), [Expr(Str('Explicitly release resources.', lineno=116, col_offset=12), lineno=116, col_offset=12)], [], lineno=115, col_offset=8), FunctionDef('write', arguments([Name('self', Param(), lineno=118, col_offset=18), Name('s', Param(), lineno=118, col_offset=24)], None, None, []), [Expr(Str('Write a string to the file.', lineno=119, col_offset=12), lineno=119, col_offset=12)], [], lineno=118, col_offset=8), FunctionDef('writelines', arguments([Name('self', Param(), lineno=122, col_offset=23), Name('lines', Param(), lineno=122, col_offset=29)], None, None, []), [Expr(Str('Write each string in lines.', lineno=123, col_offset=12), lineno=123, col_offset=12)], [], lineno=122, col_offset=8)], [], lineno=98, col_offset=4)], [], lineno=6, col_offset=0), Expr(Call(Attribute(Name('cStringIO', Load(), lineno=126, col_offset=0), 'gen', Load(), lineno=126, col_offset=0), [], [], None, None, lineno=126, col_offset=0), lineno=126, col_offset=0)])
