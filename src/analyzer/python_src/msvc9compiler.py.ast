Module([Expr(Str('distutils.msvc9compiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor the Microsoft Visual Studio 2008.\n\nThe module is compatible with VS 2005 and VS 2008. You can find legacy support\nfor older versions of VS in distutils.msvccompiler.\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Assign([Name('__revision__', Store(), lineno=15, col_offset=0)], Str('$Id: msvc9compiler.py 86440 2010-11-12 22:27:28Z eric.araujo $', lineno=15, col_offset=15), lineno=15, col_offset=0), Import([alias('os', None)], lineno=17, col_offset=0), Import([alias('subprocess', None)], lineno=18, col_offset=0), Import([alias('sys', None)], lineno=19, col_offset=0), Import([alias('re', None)], lineno=20, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsExecError', None), alias('DistutilsPlatformError', None), alias('CompileError', None), alias('LibError', None), alias('LinkError', None)], 0, lineno=22, col_offset=0), ImportFrom('distutils.ccompiler', [alias('CCompiler', None), alias('gen_lib_options', None)], 0, lineno=24, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=25, col_offset=0), ImportFrom('distutils.util', [alias('get_platform', None)], 0, lineno=26, col_offset=0), Import([alias('_winreg', None)], lineno=28, col_offset=0), Assign([Name('RegOpenKeyEx', Store(), lineno=30, col_offset=0)], Attribute(Name('_winreg', Load(), lineno=30, col_offset=15), 'OpenKeyEx', Load(), lineno=30, col_offset=15), lineno=30, col_offset=0), Assign([Name('RegEnumKey', Store(), lineno=31, col_offset=0)], Attribute(Name('_winreg', Load(), lineno=31, col_offset=13), 'EnumKey', Load(), lineno=31, col_offset=13), lineno=31, col_offset=0), Assign([Name('RegEnumValue', Store(), lineno=32, col_offset=0)], Attribute(Name('_winreg', Load(), lineno=32, col_offset=15), 'EnumValue', Load(), lineno=32, col_offset=15), lineno=32, col_offset=0), Assign([Name('RegError', Store(), lineno=33, col_offset=0)], Attribute(Name('_winreg', Load(), lineno=33, col_offset=11), 'error', Load(), lineno=33, col_offset=11), lineno=33, col_offset=0), Assign([Name('HKEYS', Store(), lineno=35, col_offset=0)], Tuple([Attribute(Name('_winreg', Load(), lineno=35, col_offset=9), 'HKEY_USERS', Load(), lineno=35, col_offset=9), Attribute(Name('_winreg', Load(), lineno=36, col_offset=9), 'HKEY_CURRENT_USER', Load(), lineno=36, col_offset=9), Attribute(Name('_winreg', Load(), lineno=37, col_offset=9), 'HKEY_LOCAL_MACHINE', Load(), lineno=37, col_offset=9), Attribute(Name('_winreg', Load(), lineno=38, col_offset=9), 'HKEY_CLASSES_ROOT', Load(), lineno=38, col_offset=9)], Load(), lineno=35, col_offset=9), lineno=35, col_offset=0), Assign([Name('NATIVE_WIN64', Store(), lineno=40, col_offset=0)], BoolOp(And(), [Compare(Attribute(Name('sys', Load(), lineno=40, col_offset=16), 'platform', Load(), lineno=40, col_offset=16), [Eq()], [Str('win32', lineno=40, col_offset=32)], lineno=40, col_offset=16), Compare(Attribute(Name('sys', Load(), lineno=40, col_offset=44), 'maxsize', Load(), lineno=40, col_offset=44), [Gt()], [BinOp(Num(2, lineno=40, col_offset=58), Pow(), Num(32, lineno=40, col_offset=61), lineno=40, col_offset=58)], lineno=40, col_offset=44)], lineno=40, col_offset=16), lineno=40, col_offset=0), If(Name('NATIVE_WIN64', Load(), lineno=41, col_offset=3), [Assign([Name('VS_BASE', Store(), lineno=45, col_offset=4)], Str('Software\\Wow6432Node\\Microsoft\\VisualStudio\\%0.1f', lineno=45, col_offset=14), lineno=45, col_offset=4), Assign([Name('VSEXPRESS_BASE', Store(), lineno=46, col_offset=4)], Str('Software\\Wow6432Node\\Microsoft\\VCExpress\\%0.1f', lineno=46, col_offset=21), lineno=46, col_offset=4), Assign([Name('WINSDK_BASE', Store(), lineno=47, col_offset=4)], Str('Software\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows', lineno=47, col_offset=18), lineno=47, col_offset=4), Assign([Name('NET_BASE', Store(), lineno=48, col_offset=4)], Str('Software\\Wow6432Node\\Microsoft\\.NETFramework', lineno=48, col_offset=15), lineno=48, col_offset=4)], [Assign([Name('VS_BASE', Store(), lineno=50, col_offset=4)], Str('Software\\Microsoft\\VisualStudio\\%0.1f', lineno=50, col_offset=14), lineno=50, col_offset=4), Assign([Name('VSEXPRESS_BASE', Store(), lineno=51, col_offset=4)], Str('Software\\Microsoft\\VCExpress\\%0.1f', lineno=51, col_offset=21), lineno=51, col_offset=4), Assign([Name('WINSDK_BASE', Store(), lineno=52, col_offset=4)], Str('Software\\Microsoft\\Microsoft SDKs\\Windows', lineno=52, col_offset=18), lineno=52, col_offset=4), Assign([Name('NET_BASE', Store(), lineno=53, col_offset=4)], Str('Software\\Microsoft\\.NETFramework', lineno=53, col_offset=15), lineno=53, col_offset=4)], lineno=41, col_offset=0), Assign([Name('PLAT_TO_VCVARS', Store(), lineno=58, col_offset=0)], Dict([Str('win32', lineno=59, col_offset=4), Str('win-amd64', lineno=60, col_offset=4), Str('win-ia64', lineno=61, col_offset=4)], [Str('x86', lineno=59, col_offset=14), Str('amd64', lineno=60, col_offset=18), Str('ia64', lineno=61, col_offset=17)], lineno=58, col_offset=17), lineno=58, col_offset=0), ClassDef('Reg', [], [Expr(Str('Helper class to read values from the registry\n    ', lineno=66, col_offset=-1), lineno=66, col_offset=-1), FunctionDef('get_value', arguments([Name('cls', Param(), lineno=68, col_offset=18), Name('path', Param(), lineno=68, col_offset=23), Name('key', Param(), lineno=68, col_offset=29)], None, None, []), [For(Name('base', Store(), lineno=69, col_offset=12), Name('HKEYS', Load(), lineno=69, col_offset=20), [Assign([Name('d', Store(), lineno=70, col_offset=12)], Call(Attribute(Name('cls', Load(), lineno=70, col_offset=16), 'read_values', Load(), lineno=70, col_offset=16), [Name('base', Load(), lineno=70, col_offset=32), Name('path', Load(), lineno=70, col_offset=38)], [], None, None, lineno=70, col_offset=16), lineno=70, col_offset=12), If(BoolOp(And(), [Name('d', Load(), lineno=71, col_offset=15), Compare(Name('key', Load(), lineno=71, col_offset=21), [In()], [Name('d', Load(), lineno=71, col_offset=28)], lineno=71, col_offset=21)], lineno=71, col_offset=15), [Return(Subscript(Name('d', Load(), lineno=72, col_offset=23), Index(Name('key', Load(), lineno=72, col_offset=25)), Load(), lineno=72, col_offset=23), lineno=72, col_offset=16)], [], lineno=71, col_offset=12)], [], lineno=69, col_offset=8), Raise(Call(Name('KeyError', Load(), lineno=73, col_offset=14), [Name('key', Load(), lineno=73, col_offset=23)], [], None, None, lineno=73, col_offset=14), None, None, lineno=73, col_offset=8)], [], lineno=68, col_offset=4), Assign([Name('get_value', Store(), lineno=74, col_offset=4)], Call(Name('classmethod', Load(), lineno=74, col_offset=16), [Name('get_value', Load(), lineno=74, col_offset=28)], [], None, None, lineno=74, col_offset=16), lineno=74, col_offset=4), FunctionDef('read_keys', arguments([Name('cls', Param(), lineno=76, col_offset=18), Name('base', Param(), lineno=76, col_offset=23), Name('key', Param(), lineno=76, col_offset=29)], None, None, []), [Expr(Str('Return list of registry keys.', lineno=77, col_offset=8), lineno=77, col_offset=8), TryExcept([Assign([Name('handle', Store(), lineno=79, col_offset=12)], Call(Name('RegOpenKeyEx', Load(), lineno=79, col_offset=21), [Name('base', Load(), lineno=79, col_offset=34), Name('key', Load(), lineno=79, col_offset=40)], [], None, None, lineno=79, col_offset=21), lineno=79, col_offset=12)], [ExceptHandler(Name('RegError', Load(), lineno=80, col_offset=15), None, [Return(Name('None', Load(), lineno=81, col_offset=19), lineno=81, col_offset=12)], lineno=80, col_offset=8)], [], lineno=78, col_offset=8), Assign([Name('L', Store(), lineno=82, col_offset=8)], List([], Load(), lineno=82, col_offset=12), lineno=82, col_offset=8), Assign([Name('i', Store(), lineno=83, col_offset=8)], Num(0, lineno=83, col_offset=12), lineno=83, col_offset=8), While(Name('True', Load(), lineno=84, col_offset=14), [TryExcept([Assign([Name('k', Store(), lineno=86, col_offset=16)], Call(Name('RegEnumKey', Load(), lineno=86, col_offset=20), [Name('handle', Load(), lineno=86, col_offset=31), Name('i', Load(), lineno=86, col_offset=39)], [], None, None, lineno=86, col_offset=20), lineno=86, col_offset=16)], [ExceptHandler(Name('RegError', Load(), lineno=87, col_offset=19), None, [Break( lineno=88, col_offset=16)], lineno=87, col_offset=12)], [], lineno=85, col_offset=12), Expr(Call(Attribute(Name('L', Load(), lineno=89, col_offset=12), 'append', Load(), lineno=89, col_offset=12), [Name('k', Load(), lineno=89, col_offset=21)], [], None, None, lineno=89, col_offset=12), lineno=89, col_offset=12), AugAssign(Name('i', Store(), lineno=90, col_offset=12), Add(), Num(1, lineno=90, col_offset=17), lineno=90, col_offset=12)], [], lineno=84, col_offset=8), Return(Name('L', Load(), lineno=91, col_offset=15), lineno=91, col_offset=8)], [], lineno=76, col_offset=4), Assign([Name('read_keys', Store(), lineno=92, col_offset=4)], Call(Name('classmethod', Load(), lineno=92, col_offset=16), [Name('read_keys', Load(), lineno=92, col_offset=28)], [], None, None, lineno=92, col_offset=16), lineno=92, col_offset=4), FunctionDef('read_values', arguments([Name('cls', Param(), lineno=94, col_offset=20), Name('base', Param(), lineno=94, col_offset=25), Name('key', Param(), lineno=94, col_offset=31)], None, None, []), [Expr(Str('Return dict of registry keys and values.\n\n        All names are converted to lowercase.\n        ', lineno=98, col_offset=-1), lineno=98, col_offset=-1), TryExcept([Assign([Name('handle', Store(), lineno=100, col_offset=12)], Call(Name('RegOpenKeyEx', Load(), lineno=100, col_offset=21), [Name('base', Load(), lineno=100, col_offset=34), Name('key', Load(), lineno=100, col_offset=40)], [], None, None, lineno=100, col_offset=21), lineno=100, col_offset=12)], [ExceptHandler(Name('RegError', Load(), lineno=101, col_offset=15), None, [Return(Name('None', Load(), lineno=102, col_offset=19), lineno=102, col_offset=12)], lineno=101, col_offset=8)], [], lineno=99, col_offset=8), Assign([Name('d', Store(), lineno=103, col_offset=8)], Dict([], [], lineno=103, col_offset=12), lineno=103, col_offset=8), Assign([Name('i', Store(), lineno=104, col_offset=8)], Num(0, lineno=104, col_offset=12), lineno=104, col_offset=8), While(Name('True', Load(), lineno=105, col_offset=14), [TryExcept([Assign([Tuple([Name('name', Store(), lineno=107, col_offset=16), Name('value', Store(), lineno=107, col_offset=22), Name('type', Store(), lineno=107, col_offset=29)], Store(), lineno=107, col_offset=16)], Call(Name('RegEnumValue', Load(), lineno=107, col_offset=36), [Name('handle', Load(), lineno=107, col_offset=49), Name('i', Load(), lineno=107, col_offset=57)], [], None, None, lineno=107, col_offset=36), lineno=107, col_offset=16)], [ExceptHandler(Name('RegError', Load(), lineno=108, col_offset=19), None, [Break( lineno=109, col_offset=16)], lineno=108, col_offset=12)], [], lineno=106, col_offset=12), Assign([Name('name', Store(), lineno=110, col_offset=12)], Call(Attribute(Name('name', Load(), lineno=110, col_offset=19), 'lower', Load(), lineno=110, col_offset=19), [], [], None, None, lineno=110, col_offset=19), lineno=110, col_offset=12), Assign([Subscript(Name('d', Load(), lineno=111, col_offset=12), Index(Call(Attribute(Name('cls', Load(), lineno=111, col_offset=14), 'convert_mbcs', Load(), lineno=111, col_offset=14), [Name('name', Load(), lineno=111, col_offset=31)], [], None, None, lineno=111, col_offset=14)), Store(), lineno=111, col_offset=12)], Call(Attribute(Name('cls', Load(), lineno=111, col_offset=40), 'convert_mbcs', Load(), lineno=111, col_offset=40), [Name('value', Load(), lineno=111, col_offset=57)], [], None, None, lineno=111, col_offset=40), lineno=111, col_offset=12), AugAssign(Name('i', Store(), lineno=112, col_offset=12), Add(), Num(1, lineno=112, col_offset=17), lineno=112, col_offset=12)], [], lineno=105, col_offset=8), Return(Name('d', Load(), lineno=113, col_offset=15), lineno=113, col_offset=8)], [], lineno=94, col_offset=4), Assign([Name('read_values', Store(), lineno=114, col_offset=4)], Call(Name('classmethod', Load(), lineno=114, col_offset=18), [Name('read_values', Load(), lineno=114, col_offset=30)], [], None, None, lineno=114, col_offset=18), lineno=114, col_offset=4), FunctionDef('convert_mbcs', arguments([Name('s', Param(), lineno=116, col_offset=21)], None, None, []), [Assign([Name('dec', Store(), lineno=117, col_offset=8)], Call(Name('getattr', Load(), lineno=117, col_offset=14), [Name('s', Load(), lineno=117, col_offset=22), Str('decode', lineno=117, col_offset=25), Name('None', Load(), lineno=117, col_offset=35)], [], None, None, lineno=117, col_offset=14), lineno=117, col_offset=8), If(Compare(Name('dec', Load(), lineno=118, col_offset=11), [IsNot()], [Name('None', Load(), lineno=118, col_offset=22)], lineno=118, col_offset=11), [TryExcept([Assign([Name('s', Store(), lineno=120, col_offset=16)], Call(Name('dec', Load(), lineno=120, col_offset=20), [Str('mbcs', lineno=120, col_offset=24)], [], None, None, lineno=120, col_offset=20), lineno=120, col_offset=16)], [ExceptHandler(Name('UnicodeError', Load(), lineno=121, col_offset=19), None, [Pass( lineno=122, col_offset=16)], lineno=121, col_offset=12)], [], lineno=119, col_offset=12)], [], lineno=118, col_offset=8), Return(Name('s', Load(), lineno=123, col_offset=15), lineno=123, col_offset=8)], [], lineno=116, col_offset=4), Assign([Name('convert_mbcs', Store(), lineno=124, col_offset=4)], Call(Name('staticmethod', Load(), lineno=124, col_offset=19), [Name('convert_mbcs', Load(), lineno=124, col_offset=32)], [], None, None, lineno=124, col_offset=19), lineno=124, col_offset=4)], [], lineno=64, col_offset=0), ClassDef('MacroExpander', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=128, col_offset=17), Name('version', Param(), lineno=128, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=129, col_offset=8), 'macros', Store(), lineno=129, col_offset=8)], Dict([], [], lineno=129, col_offset=22), lineno=129, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=130, col_offset=8), 'vsbase', Store(), lineno=130, col_offset=8)], BinOp(Name('VS_BASE', Load(), lineno=130, col_offset=22), Mod(), Name('version', Load(), lineno=130, col_offset=32), lineno=130, col_offset=22), lineno=130, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=131, col_offset=8), 'load_macros', Load(), lineno=131, col_offset=8), [Name('version', Load(), lineno=131, col_offset=25)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('set_macro', arguments([Name('self', Param(), lineno=133, col_offset=18), Name('macro', Param(), lineno=133, col_offset=24), Name('path', Param(), lineno=133, col_offset=31), Name('key', Param(), lineno=133, col_offset=37)], None, None, []), [Assign([Subscript(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'macros', Load(), lineno=134, col_offset=8), Index(BinOp(Str('$(%s)', lineno=134, col_offset=20), Mod(), Name('macro', Load(), lineno=134, col_offset=30), lineno=134, col_offset=20)), Store(), lineno=134, col_offset=8)], Call(Attribute(Name('Reg', Load(), lineno=134, col_offset=39), 'get_value', Load(), lineno=134, col_offset=39), [Name('path', Load(), lineno=134, col_offset=53), Name('key', Load(), lineno=134, col_offset=59)], [], None, None, lineno=134, col_offset=39), lineno=134, col_offset=8)], [], lineno=133, col_offset=4), FunctionDef('load_macros', arguments([Name('self', Param(), lineno=136, col_offset=20), Name('version', Param(), lineno=136, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=137, col_offset=8), 'set_macro', Load(), lineno=137, col_offset=8), [Str('VCInstallDir', lineno=137, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=137, col_offset=39), 'vsbase', Load(), lineno=137, col_offset=39), Add(), Str('\\Setup\\VC', lineno=137, col_offset=53), lineno=137, col_offset=39), Str('productdir', lineno=137, col_offset=67)], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'set_macro', Load(), lineno=138, col_offset=8), [Str('VSInstallDir', lineno=138, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=138, col_offset=39), 'vsbase', Load(), lineno=138, col_offset=39), Add(), Str('\\Setup\\VS', lineno=138, col_offset=53), lineno=138, col_offset=39), Str('productdir', lineno=138, col_offset=67)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=139, col_offset=8), 'set_macro', Load(), lineno=139, col_offset=8), [Str('FrameworkDir', lineno=139, col_offset=23), Name('NET_BASE', Load(), lineno=139, col_offset=39), Str('installroot', lineno=139, col_offset=49)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8), TryExcept([If(Compare(Name('version', Load(), lineno=141, col_offset=15), [GtE()], [Num(8.0, lineno=141, col_offset=26)], lineno=141, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=16), 'set_macro', Load(), lineno=142, col_offset=16), [Str('FrameworkSDKDir', lineno=142, col_offset=31), Name('NET_BASE', Load(), lineno=142, col_offset=50), Str('sdkinstallrootv2.0', lineno=143, col_offset=31)], [], None, None, lineno=142, col_offset=16), lineno=142, col_offset=16)], [Raise(Call(Name('KeyError', Load(), lineno=145, col_offset=22), [Str('sdkinstallrootv2.0', lineno=145, col_offset=31)], [], None, None, lineno=145, col_offset=22), None, None, lineno=145, col_offset=16)], lineno=141, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=146, col_offset=15), None, [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=147, col_offset=18), [Str('Python was built with Visual Studio 2008;\nextensions must be built with a compiler than can generate compatible binaries.\nVisual Studio 2008 was not found on this system. If you have Cygwin installed,\nyou can try compiling with MingW32, by passing "-c mingw32" to setup.py.', lineno=151, col_offset=-1)], [], None, None, lineno=147, col_offset=18), None, None, lineno=147, col_offset=12)], lineno=146, col_offset=8)], [], lineno=140, col_offset=8), If(Compare(Name('version', Load(), lineno=153, col_offset=11), [GtE()], [Num(9.0, lineno=153, col_offset=22)], lineno=153, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=154, col_offset=12), 'set_macro', Load(), lineno=154, col_offset=12), [Str('FrameworkVersion', lineno=154, col_offset=27), Attribute(Name('self', Load(), lineno=154, col_offset=47), 'vsbase', Load(), lineno=154, col_offset=47), Str('clr version', lineno=154, col_offset=60)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=155, col_offset=12), 'set_macro', Load(), lineno=155, col_offset=12), [Str('WindowsSdkDir', lineno=155, col_offset=27), Name('WINSDK_BASE', Load(), lineno=155, col_offset=44), Str('currentinstallfolder', lineno=155, col_offset=57)], [], None, None, lineno=155, col_offset=12), lineno=155, col_offset=12)], [Assign([Name('p', Store(), lineno=157, col_offset=12)], Str('Software\\Microsoft\\NET Framework Setup\\Product', lineno=157, col_offset=16), lineno=157, col_offset=12), For(Name('base', Store(), lineno=158, col_offset=16), Name('HKEYS', Load(), lineno=158, col_offset=24), [TryExcept([Assign([Name('h', Store(), lineno=160, col_offset=20)], Call(Name('RegOpenKeyEx', Load(), lineno=160, col_offset=24), [Name('base', Load(), lineno=160, col_offset=37), Name('p', Load(), lineno=160, col_offset=43)], [], None, None, lineno=160, col_offset=24), lineno=160, col_offset=20)], [ExceptHandler(Name('RegError', Load(), lineno=161, col_offset=23), None, [Continue( lineno=162, col_offset=20)], lineno=161, col_offset=16)], [], lineno=159, col_offset=16), Assign([Name('key', Store(), lineno=163, col_offset=16)], Call(Name('RegEnumKey', Load(), lineno=163, col_offset=22), [Name('h', Load(), lineno=163, col_offset=33), Num(0, lineno=163, col_offset=36)], [], None, None, lineno=163, col_offset=22), lineno=163, col_offset=16), Assign([Name('d', Store(), lineno=164, col_offset=16)], Call(Attribute(Name('Reg', Load(), lineno=164, col_offset=20), 'get_value', Load(), lineno=164, col_offset=20), [Name('base', Load(), lineno=164, col_offset=34), BinOp(Str('%s\\%s', lineno=164, col_offset=40), Mod(), Tuple([Name('p', Load(), lineno=164, col_offset=52), Name('key', Load(), lineno=164, col_offset=55)], Load(), lineno=164, col_offset=52), lineno=164, col_offset=40)], [], None, None, lineno=164, col_offset=20), lineno=164, col_offset=16), Assign([Subscript(Attribute(Name('self', Load(), lineno=165, col_offset=16), 'macros', Load(), lineno=165, col_offset=16), Index(Str('$(FrameworkVersion)', lineno=165, col_offset=28)), Store(), lineno=165, col_offset=16)], Subscript(Name('d', Load(), lineno=165, col_offset=53), Index(Str('version', lineno=165, col_offset=55)), Load(), lineno=165, col_offset=53), lineno=165, col_offset=16)], [], lineno=158, col_offset=12)], lineno=153, col_offset=8)], [], lineno=136, col_offset=4), FunctionDef('sub', arguments([Name('self', Param(), lineno=167, col_offset=12), Name('s', Param(), lineno=167, col_offset=18)], None, None, []), [For(Tuple([Name('k', Store(), lineno=168, col_offset=12), Name('v', Store(), lineno=168, col_offset=15)], Store(), lineno=168, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=168, col_offset=20), 'macros', Load(), lineno=168, col_offset=20), 'items', Load(), lineno=168, col_offset=20), [], [], None, None, lineno=168, col_offset=20), [Assign([Name('s', Store(), lineno=169, col_offset=12)], Call(Attribute(Name('s', Load(), lineno=169, col_offset=16), 'replace', Load(), lineno=169, col_offset=16), [Name('k', Load(), lineno=169, col_offset=26), Name('v', Load(), lineno=169, col_offset=29)], [], None, None, lineno=169, col_offset=16), lineno=169, col_offset=12)], [], lineno=168, col_offset=8), Return(Name('s', Load(), lineno=170, col_offset=15), lineno=170, col_offset=8)], [], lineno=167, col_offset=4)], [], lineno=126, col_offset=0), FunctionDef('get_build_version', arguments([], None, None, []), [Expr(Str('Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    ', lineno=177, col_offset=-1), lineno=177, col_offset=-1), Assign([Name('prefix', Store(), lineno=178, col_offset=4)], Str('MSC v.', lineno=178, col_offset=13), lineno=178, col_offset=4), Assign([Name('i', Store(), lineno=179, col_offset=4)], Call(Attribute(Attribute(Name('sys', Load(), lineno=179, col_offset=8), 'version', Load(), lineno=179, col_offset=8), 'find', Load(), lineno=179, col_offset=8), [Name('prefix', Load(), lineno=179, col_offset=25)], [], None, None, lineno=179, col_offset=8), lineno=179, col_offset=4), If(Compare(Name('i', Load(), lineno=180, col_offset=7), [Eq()], [Num(-1, lineno=180, col_offset=13)], lineno=180, col_offset=7), [Return(Num(6, lineno=181, col_offset=15), lineno=181, col_offset=8)], [], lineno=180, col_offset=4), Assign([Name('i', Store(), lineno=182, col_offset=4)], BinOp(Name('i', Load(), lineno=182, col_offset=8), Add(), Call(Name('len', Load(), lineno=182, col_offset=12), [Name('prefix', Load(), lineno=182, col_offset=16)], [], None, None, lineno=182, col_offset=12), lineno=182, col_offset=8), lineno=182, col_offset=4), Assign([Tuple([Name('s', Store(), lineno=183, col_offset=4), Name('rest', Store(), lineno=183, col_offset=7)], Store(), lineno=183, col_offset=4)], Call(Attribute(Subscript(Attribute(Name('sys', Load(), lineno=183, col_offset=14), 'version', Load(), lineno=183, col_offset=14), Slice(Name('i', Load(), lineno=183, col_offset=26), None, None), Load(), lineno=183, col_offset=14), 'split', Load(), lineno=183, col_offset=14), [Str(' ', lineno=183, col_offset=36), Num(1, lineno=183, col_offset=41)], [], None, None, lineno=183, col_offset=14), lineno=183, col_offset=4), Assign([Name('majorVersion', Store(), lineno=184, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=184, col_offset=19), [Subscript(Name('s', Load(), lineno=184, col_offset=23), Slice(None, Num(-2, lineno=184, col_offset=27), None), Load(), lineno=184, col_offset=23)], [], None, None, lineno=184, col_offset=19), Sub(), Num(6, lineno=184, col_offset=33), lineno=184, col_offset=19), lineno=184, col_offset=4), Assign([Name('minorVersion', Store(), lineno=185, col_offset=4)], BinOp(Call(Name('int', Load(), lineno=185, col_offset=19), [Subscript(Name('s', Load(), lineno=185, col_offset=23), Slice(Num(2, lineno=185, col_offset=25), Num(3, lineno=185, col_offset=27), None), Load(), lineno=185, col_offset=23)], [], None, None, lineno=185, col_offset=19), Div(), Num(10.0, lineno=185, col_offset=33), lineno=185, col_offset=19), lineno=185, col_offset=4), If(Compare(Name('majorVersion', Load(), lineno=187, col_offset=7), [Eq()], [Num(6, lineno=187, col_offset=23)], lineno=187, col_offset=7), [Assign([Name('minorVersion', Store(), lineno=188, col_offset=8)], Num(0, lineno=188, col_offset=23), lineno=188, col_offset=8)], [], lineno=187, col_offset=4), If(Compare(Name('majorVersion', Load(), lineno=189, col_offset=7), [GtE()], [Num(6, lineno=189, col_offset=23)], lineno=189, col_offset=7), [Return(BinOp(Name('majorVersion', Load(), lineno=190, col_offset=15), Add(), Name('minorVersion', Load(), lineno=190, col_offset=30), lineno=190, col_offset=15), lineno=190, col_offset=8)], [], lineno=189, col_offset=4), Return(Name('None', Load(), lineno=192, col_offset=11), lineno=192, col_offset=4)], [], lineno=172, col_offset=0), FunctionDef('normalize_and_reduce_paths', arguments([Name('paths', Param(), lineno=194, col_offset=31)], None, None, []), [Expr(Str('Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    ', lineno=198, col_offset=-1), lineno=198, col_offset=-1), Assign([Name('reduced_paths', Store(), lineno=200, col_offset=4)], List([], Load(), lineno=200, col_offset=20), lineno=200, col_offset=4), For(Name('p', Store(), lineno=201, col_offset=8), Name('paths', Load(), lineno=201, col_offset=13), [Assign([Name('np', Store(), lineno=202, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=202, col_offset=13), 'path', Load(), lineno=202, col_offset=13), 'normpath', Load(), lineno=202, col_offset=13), [Name('p', Load(), lineno=202, col_offset=30)], [], None, None, lineno=202, col_offset=13), lineno=202, col_offset=8), If(Compare(Name('np', Load(), lineno=204, col_offset=11), [NotIn()], [Name('reduced_paths', Load(), lineno=204, col_offset=21)], lineno=204, col_offset=11), [Expr(Call(Attribute(Name('reduced_paths', Load(), lineno=205, col_offset=12), 'append', Load(), lineno=205, col_offset=12), [Name('np', Load(), lineno=205, col_offset=33)], [], None, None, lineno=205, col_offset=12), lineno=205, col_offset=12)], [], lineno=204, col_offset=8)], [], lineno=201, col_offset=4), Return(Name('reduced_paths', Load(), lineno=206, col_offset=11), lineno=206, col_offset=4)], [], lineno=194, col_offset=0), FunctionDef('removeDuplicates', arguments([Name('variable', Param(), lineno=208, col_offset=21)], None, None, []), [Expr(Str('Remove duplicate values of an environment variable.\n    ', lineno=210, col_offset=-1), lineno=210, col_offset=-1), Assign([Name('oldList', Store(), lineno=211, col_offset=4)], Call(Attribute(Name('variable', Load(), lineno=211, col_offset=14), 'split', Load(), lineno=211, col_offset=14), [Attribute(Name('os', Load(), lineno=211, col_offset=29), 'pathsep', Load(), lineno=211, col_offset=29)], [], None, None, lineno=211, col_offset=14), lineno=211, col_offset=4), Assign([Name('newList', Store(), lineno=212, col_offset=4)], List([], Load(), lineno=212, col_offset=14), lineno=212, col_offset=4), For(Name('i', Store(), lineno=213, col_offset=8), Name('oldList', Load(), lineno=213, col_offset=13), [If(Compare(Name('i', Load(), lineno=214, col_offset=11), [NotIn()], [Name('newList', Load(), lineno=214, col_offset=20)], lineno=214, col_offset=11), [Expr(Call(Attribute(Name('newList', Load(), lineno=215, col_offset=12), 'append', Load(), lineno=215, col_offset=12), [Name('i', Load(), lineno=215, col_offset=27)], [], None, None, lineno=215, col_offset=12), lineno=215, col_offset=12)], [], lineno=214, col_offset=8)], [], lineno=213, col_offset=4), Assign([Name('newVariable', Store(), lineno=216, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=216, col_offset=18), 'pathsep', Load(), lineno=216, col_offset=18), 'join', Load(), lineno=216, col_offset=18), [Name('newList', Load(), lineno=216, col_offset=34)], [], None, None, lineno=216, col_offset=18), lineno=216, col_offset=4), Return(Name('newVariable', Load(), lineno=217, col_offset=11), lineno=217, col_offset=4)], [], lineno=208, col_offset=0), FunctionDef('find_vcvarsall', arguments([Name('version', Param(), lineno=219, col_offset=19)], None, None, []), [Expr(Str('Find the vcvarsall.bat file\n\n    At first it tries to find the productdir of VS 2008 in the registry. If\n    that fails it falls back to the VS90COMNTOOLS env var.\n    ', lineno=224, col_offset=-1), lineno=224, col_offset=-1), Assign([Name('vsbase', Store(), lineno=225, col_offset=4)], BinOp(Name('VS_BASE', Load(), lineno=225, col_offset=13), Mod(), Name('version', Load(), lineno=225, col_offset=23), lineno=225, col_offset=13), lineno=225, col_offset=4), TryExcept([Assign([Name('productdir', Store(), lineno=227, col_offset=8)], Call(Attribute(Name('Reg', Load(), lineno=227, col_offset=21), 'get_value', Load(), lineno=227, col_offset=21), [BinOp(Str('%s\\Setup\\VC', lineno=227, col_offset=35), Mod(), Name('vsbase', Load(), lineno=227, col_offset=52), lineno=227, col_offset=35), Str('productdir', lineno=228, col_offset=35)], [], None, None, lineno=227, col_offset=21), lineno=227, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=229, col_offset=11), None, [Assign([Name('productdir', Store(), lineno=230, col_offset=8)], Name('None', Load(), lineno=230, col_offset=21), lineno=230, col_offset=8)], lineno=229, col_offset=4)], [], lineno=226, col_offset=4), If(Compare(Name('productdir', Load(), lineno=233, col_offset=7), [Is()], [Name('None', Load(), lineno=233, col_offset=21)], lineno=233, col_offset=7), [Assign([Name('vsbase', Store(), lineno=234, col_offset=8)], BinOp(Name('VSEXPRESS_BASE', Load(), lineno=234, col_offset=17), Mod(), Name('version', Load(), lineno=234, col_offset=34), lineno=234, col_offset=17), lineno=234, col_offset=8), TryExcept([Assign([Name('productdir', Store(), lineno=236, col_offset=12)], Call(Attribute(Name('Reg', Load(), lineno=236, col_offset=25), 'get_value', Load(), lineno=236, col_offset=25), [BinOp(Str('%s\\Setup\\VC', lineno=236, col_offset=39), Mod(), Name('vsbase', Load(), lineno=236, col_offset=56), lineno=236, col_offset=39), Str('productdir', lineno=237, col_offset=39)], [], None, None, lineno=236, col_offset=25), lineno=236, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=238, col_offset=15), None, [Assign([Name('productdir', Store(), lineno=239, col_offset=12)], Name('None', Load(), lineno=239, col_offset=25), lineno=239, col_offset=12), Expr(Call(Attribute(Name('log', Load(), lineno=240, col_offset=12), 'debug', Load(), lineno=240, col_offset=12), [Str('Unable to find productdir in registry', lineno=240, col_offset=22)], [], None, None, lineno=240, col_offset=12), lineno=240, col_offset=12)], lineno=238, col_offset=8)], [], lineno=235, col_offset=8)], [], lineno=233, col_offset=4), If(BoolOp(Or(), [UnaryOp(Not(), Name('productdir', Load(), lineno=242, col_offset=11), lineno=242, col_offset=7), UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=242, col_offset=29), 'path', Load(), lineno=242, col_offset=29), 'isdir', Load(), lineno=242, col_offset=29), [Name('productdir', Load(), lineno=242, col_offset=43)], [], None, None, lineno=242, col_offset=29), lineno=242, col_offset=25)], lineno=242, col_offset=7), [Assign([Name('toolskey', Store(), lineno=243, col_offset=8)], BinOp(Str('VS%0.f0COMNTOOLS', lineno=243, col_offset=19), Mod(), Name('version', Load(), lineno=243, col_offset=40), lineno=243, col_offset=19), lineno=243, col_offset=8), Assign([Name('toolsdir', Store(), lineno=244, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=244, col_offset=19), 'environ', Load(), lineno=244, col_offset=19), 'get', Load(), lineno=244, col_offset=19), [Name('toolskey', Load(), lineno=244, col_offset=34), Name('None', Load(), lineno=244, col_offset=44)], [], None, None, lineno=244, col_offset=19), lineno=244, col_offset=8), If(BoolOp(And(), [Name('toolsdir', Load(), lineno=246, col_offset=11), Call(Attribute(Attribute(Name('os', Load(), lineno=246, col_offset=24), 'path', Load(), lineno=246, col_offset=24), 'isdir', Load(), lineno=246, col_offset=24), [Name('toolsdir', Load(), lineno=246, col_offset=38)], [], None, None, lineno=246, col_offset=24)], lineno=246, col_offset=11), [Assign([Name('productdir', Store(), lineno=247, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=247, col_offset=25), 'path', Load(), lineno=247, col_offset=25), 'join', Load(), lineno=247, col_offset=25), [Name('toolsdir', Load(), lineno=247, col_offset=38), Attribute(Name('os', Load(), lineno=247, col_offset=48), 'pardir', Load(), lineno=247, col_offset=48), Attribute(Name('os', Load(), lineno=247, col_offset=59), 'pardir', Load(), lineno=247, col_offset=59), Str('VC', lineno=247, col_offset=70)], [], None, None, lineno=247, col_offset=25), lineno=247, col_offset=12), Assign([Name('productdir', Store(), lineno=248, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=248, col_offset=25), 'path', Load(), lineno=248, col_offset=25), 'abspath', Load(), lineno=248, col_offset=25), [Name('productdir', Load(), lineno=248, col_offset=41)], [], None, None, lineno=248, col_offset=25), lineno=248, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=249, col_offset=19), 'path', Load(), lineno=249, col_offset=19), 'isdir', Load(), lineno=249, col_offset=19), [Name('productdir', Load(), lineno=249, col_offset=33)], [], None, None, lineno=249, col_offset=19), lineno=249, col_offset=15), [Expr(Call(Attribute(Name('log', Load(), lineno=250, col_offset=16), 'debug', Load(), lineno=250, col_offset=16), [BinOp(Str('%s is not a valid directory', lineno=250, col_offset=26), Mod(), Name('productdir', Load(), lineno=250, col_offset=58), lineno=250, col_offset=26)], [], None, None, lineno=250, col_offset=16), lineno=250, col_offset=16), Return(Name('None', Load(), lineno=251, col_offset=23), lineno=251, col_offset=16)], [], lineno=249, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=253, col_offset=12), 'debug', Load(), lineno=253, col_offset=12), [BinOp(Str('Env var %s is not set or invalid', lineno=253, col_offset=22), Mod(), Name('toolskey', Load(), lineno=253, col_offset=59), lineno=253, col_offset=22)], [], None, None, lineno=253, col_offset=12), lineno=253, col_offset=12)], lineno=246, col_offset=8)], [], lineno=242, col_offset=4), If(UnaryOp(Not(), Name('productdir', Load(), lineno=254, col_offset=11), lineno=254, col_offset=7), [Expr(Call(Attribute(Name('log', Load(), lineno=255, col_offset=8), 'debug', Load(), lineno=255, col_offset=8), [Str('No productdir found', lineno=255, col_offset=18)], [], None, None, lineno=255, col_offset=8), lineno=255, col_offset=8), Return(Name('None', Load(), lineno=256, col_offset=15), lineno=256, col_offset=8)], [], lineno=254, col_offset=4), Assign([Name('vcvarsall', Store(), lineno=257, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=257, col_offset=16), 'path', Load(), lineno=257, col_offset=16), 'join', Load(), lineno=257, col_offset=16), [Name('productdir', Load(), lineno=257, col_offset=29), Str('vcvarsall.bat', lineno=257, col_offset=41)], [], None, None, lineno=257, col_offset=16), lineno=257, col_offset=4), If(Call(Attribute(Attribute(Name('os', Load(), lineno=258, col_offset=7), 'path', Load(), lineno=258, col_offset=7), 'isfile', Load(), lineno=258, col_offset=7), [Name('vcvarsall', Load(), lineno=258, col_offset=22)], [], None, None, lineno=258, col_offset=7), [Return(Name('vcvarsall', Load(), lineno=259, col_offset=15), lineno=259, col_offset=8)], [], lineno=258, col_offset=4), Expr(Call(Attribute(Name('log', Load(), lineno=260, col_offset=4), 'debug', Load(), lineno=260, col_offset=4), [Str('Unable to find vcvarsall.bat', lineno=260, col_offset=14)], [], None, None, lineno=260, col_offset=4), lineno=260, col_offset=4), Return(Name('None', Load(), lineno=261, col_offset=11), lineno=261, col_offset=4)], [], lineno=219, col_offset=0), FunctionDef('query_vcvarsall', arguments([Name('version', Param(), lineno=263, col_offset=20), Name('arch', Param(), lineno=263, col_offset=29)], None, None, [Str('x86', lineno=263, col_offset=34)]), [Expr(Str('Launch vcvarsall.bat and read the settings from its environment\n    ', lineno=265, col_offset=-1), lineno=265, col_offset=-1), Assign([Name('vcvarsall', Store(), lineno=266, col_offset=4)], Call(Name('find_vcvarsall', Load(), lineno=266, col_offset=16), [Name('version', Load(), lineno=266, col_offset=31)], [], None, None, lineno=266, col_offset=16), lineno=266, col_offset=4), Assign([Name('interesting', Store(), lineno=267, col_offset=4)], Call(Name('set', Load(), lineno=267, col_offset=18), [Tuple([Str('include', lineno=267, col_offset=23), Str('lib', lineno=267, col_offset=34), Str('libpath', lineno=267, col_offset=41), Str('path', lineno=267, col_offset=52)], Load(), lineno=267, col_offset=23)], [], None, None, lineno=267, col_offset=18), lineno=267, col_offset=4), Assign([Name('result', Store(), lineno=268, col_offset=4)], Dict([], [], lineno=268, col_offset=13), lineno=268, col_offset=4), If(Compare(Name('vcvarsall', Load(), lineno=270, col_offset=7), [Is()], [Name('None', Load(), lineno=270, col_offset=20)], lineno=270, col_offset=7), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=271, col_offset=14), [Str('Unable to find vcvarsall.bat', lineno=271, col_offset=37)], [], None, None, lineno=271, col_offset=14), None, None, lineno=271, col_offset=8)], [], lineno=270, col_offset=4), Expr(Call(Attribute(Name('log', Load(), lineno=272, col_offset=4), 'debug', Load(), lineno=272, col_offset=4), [Str("Calling 'vcvarsall.bat %s' (version=%s)", lineno=272, col_offset=14), Name('arch', Load(), lineno=272, col_offset=57), Name('version', Load(), lineno=272, col_offset=63)], [], None, None, lineno=272, col_offset=4), lineno=272, col_offset=4), Assign([Name('popen', Store(), lineno=273, col_offset=4)], Call(Attribute(Name('subprocess', Load(), lineno=273, col_offset=12), 'Popen', Load(), lineno=273, col_offset=12), [BinOp(Str('"%s" %s & set', lineno=273, col_offset=29), Mod(), Tuple([Name('vcvarsall', Load(), lineno=273, col_offset=48), Name('arch', Load(), lineno=273, col_offset=59)], Load(), lineno=273, col_offset=48), lineno=273, col_offset=29)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=274, col_offset=36), 'PIPE', Load(), lineno=274, col_offset=36)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=275, col_offset=36), 'PIPE', Load(), lineno=275, col_offset=36))], None, None, lineno=273, col_offset=12), lineno=273, col_offset=4), TryFinally([Assign([Tuple([Name('stdout', Store(), lineno=277, col_offset=8), Name('stderr', Store(), lineno=277, col_offset=16)], Store(), lineno=277, col_offset=8)], Call(Attribute(Name('popen', Load(), lineno=277, col_offset=25), 'communicate', Load(), lineno=277, col_offset=25), [], [], None, None, lineno=277, col_offset=25), lineno=277, col_offset=8), If(Compare(Call(Attribute(Name('popen', Load(), lineno=278, col_offset=11), 'wait', Load(), lineno=278, col_offset=11), [], [], None, None, lineno=278, col_offset=11), [NotEq()], [Num(0, lineno=278, col_offset=27)], lineno=278, col_offset=11), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=279, col_offset=18), [Call(Attribute(Name('stderr', Load(), lineno=279, col_offset=41), 'decode', Load(), lineno=279, col_offset=41), [Str('mbcs', lineno=279, col_offset=55)], [], None, None, lineno=279, col_offset=41)], [], None, None, lineno=279, col_offset=18), None, None, lineno=279, col_offset=12)], [], lineno=278, col_offset=8), Assign([Name('stdout', Store(), lineno=281, col_offset=8)], Call(Attribute(Name('stdout', Load(), lineno=281, col_offset=17), 'decode', Load(), lineno=281, col_offset=17), [Str('mbcs', lineno=281, col_offset=31)], [], None, None, lineno=281, col_offset=17), lineno=281, col_offset=8), For(Name('line', Store(), lineno=282, col_offset=12), Call(Attribute(Name('stdout', Load(), lineno=282, col_offset=20), 'split', Load(), lineno=282, col_offset=20), [Str('\n', lineno=282, col_offset=33)], [], None, None, lineno=282, col_offset=20), [Assign([Name('line', Store(), lineno=283, col_offset=12)], Call(Attribute(Name('Reg', Load(), lineno=283, col_offset=19), 'convert_mbcs', Load(), lineno=283, col_offset=19), [Name('line', Load(), lineno=283, col_offset=36)], [], None, None, lineno=283, col_offset=19), lineno=283, col_offset=12), If(Compare(Str('=', lineno=284, col_offset=15), [NotIn()], [Name('line', Load(), lineno=284, col_offset=26)], lineno=284, col_offset=15), [Continue( lineno=285, col_offset=16)], [], lineno=284, col_offset=12), Assign([Name('line', Store(), lineno=286, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=286, col_offset=19), 'strip', Load(), lineno=286, col_offset=19), [], [], None, None, lineno=286, col_offset=19), lineno=286, col_offset=12), Assign([Tuple([Name('key', Store(), lineno=287, col_offset=12), Name('value', Store(), lineno=287, col_offset=17)], Store(), lineno=287, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=287, col_offset=25), 'split', Load(), lineno=287, col_offset=25), [Str('=', lineno=287, col_offset=36), Num(1, lineno=287, col_offset=41)], [], None, None, lineno=287, col_offset=25), lineno=287, col_offset=12), Assign([Name('key', Store(), lineno=288, col_offset=12)], Call(Attribute(Name('key', Load(), lineno=288, col_offset=18), 'lower', Load(), lineno=288, col_offset=18), [], [], None, None, lineno=288, col_offset=18), lineno=288, col_offset=12), If(Compare(Name('key', Load(), lineno=289, col_offset=15), [In()], [Name('interesting', Load(), lineno=289, col_offset=22)], lineno=289, col_offset=15), [If(Call(Attribute(Name('value', Load(), lineno=290, col_offset=19), 'endswith', Load(), lineno=290, col_offset=19), [Attribute(Name('os', Load(), lineno=290, col_offset=34), 'pathsep', Load(), lineno=290, col_offset=34)], [], None, None, lineno=290, col_offset=19), [Assign([Name('value', Store(), lineno=291, col_offset=20)], Subscript(Name('value', Load(), lineno=291, col_offset=28), Slice(None, Num(-1, lineno=291, col_offset=36), None), Load(), lineno=291, col_offset=28), lineno=291, col_offset=20)], [], lineno=290, col_offset=16), Assign([Subscript(Name('result', Load(), lineno=292, col_offset=16), Index(Name('key', Load(), lineno=292, col_offset=23)), Store(), lineno=292, col_offset=16)], Call(Name('removeDuplicates', Load(), lineno=292, col_offset=30), [Name('value', Load(), lineno=292, col_offset=47)], [], None, None, lineno=292, col_offset=30), lineno=292, col_offset=16)], [], lineno=289, col_offset=12)], [], lineno=282, col_offset=8)], [Expr(Call(Attribute(Attribute(Name('popen', Load(), lineno=295, col_offset=8), 'stdout', Load(), lineno=295, col_offset=8), 'close', Load(), lineno=295, col_offset=8), [], [], None, None, lineno=295, col_offset=8), lineno=295, col_offset=8), Expr(Call(Attribute(Attribute(Name('popen', Load(), lineno=296, col_offset=8), 'stderr', Load(), lineno=296, col_offset=8), 'close', Load(), lineno=296, col_offset=8), [], [], None, None, lineno=296, col_offset=8), lineno=296, col_offset=8)], lineno=276, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=298, col_offset=7), [Name('result', Load(), lineno=298, col_offset=11)], [], None, None, lineno=298, col_offset=7), [NotEq()], [Call(Name('len', Load(), lineno=298, col_offset=22), [Name('interesting', Load(), lineno=298, col_offset=26)], [], None, None, lineno=298, col_offset=22)], lineno=298, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=299, col_offset=14), [Call(Name('str', Load(), lineno=299, col_offset=25), [Call(Name('list', Load(), lineno=299, col_offset=29), [Call(Attribute(Name('result', Load(), lineno=299, col_offset=34), 'keys', Load(), lineno=299, col_offset=34), [], [], None, None, lineno=299, col_offset=34)], [], None, None, lineno=299, col_offset=29)], [], None, None, lineno=299, col_offset=25)], [], None, None, lineno=299, col_offset=14), None, None, lineno=299, col_offset=8)], [], lineno=298, col_offset=4), Return(Name('result', Load(), lineno=301, col_offset=11), lineno=301, col_offset=4)], [], lineno=263, col_offset=0), Assign([Name('VERSION', Store(), lineno=304, col_offset=0)], Call(Name('get_build_version', Load(), lineno=304, col_offset=10), [], [], None, None, lineno=304, col_offset=10), lineno=304, col_offset=0), If(Compare(Name('VERSION', Load(), lineno=305, col_offset=3), [Lt()], [Num(8.0, lineno=305, col_offset=13)], lineno=305, col_offset=3), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=306, col_offset=10), [BinOp(Str('VC %0.1f is not supported by this module', lineno=306, col_offset=33), Mod(), Name('VERSION', Load(), lineno=306, col_offset=78), lineno=306, col_offset=33)], [], None, None, lineno=306, col_offset=10), None, None, lineno=306, col_offset=4)], [], lineno=305, col_offset=0), ClassDef('MSVCCompiler', [Name('CCompiler', Load(), lineno=309, col_offset=19)], [Expr(Str('Concrete class that implements an interface to Microsoft Visual C++,\n       as defined by the CCompiler abstract class.', lineno=311, col_offset=-1), lineno=311, col_offset=-1), Assign([Name('compiler_type', Store(), lineno=313, col_offset=4)], Str('msvc', lineno=313, col_offset=20), lineno=313, col_offset=4), Assign([Name('executables', Store(), lineno=320, col_offset=4)], Dict([], [], lineno=320, col_offset=18), lineno=320, col_offset=4), Assign([Name('_c_extensions', Store(), lineno=323, col_offset=4)], List([Str('.c', lineno=323, col_offset=21)], Load(), lineno=323, col_offset=20), lineno=323, col_offset=4), Assign([Name('_cpp_extensions', Store(), lineno=324, col_offset=4)], List([Str('.cc', lineno=324, col_offset=23), Str('.cpp', lineno=324, col_offset=30), Str('.cxx', lineno=324, col_offset=38)], Load(), lineno=324, col_offset=22), lineno=324, col_offset=4), Assign([Name('_rc_extensions', Store(), lineno=325, col_offset=4)], List([Str('.rc', lineno=325, col_offset=22)], Load(), lineno=325, col_offset=21), lineno=325, col_offset=4), Assign([Name('_mc_extensions', Store(), lineno=326, col_offset=4)], List([Str('.mc', lineno=326, col_offset=22)], Load(), lineno=326, col_offset=21), lineno=326, col_offset=4), Assign([Name('src_extensions', Store(), lineno=330, col_offset=4)], BinOp(BinOp(BinOp(Name('_c_extensions', Load(), lineno=330, col_offset=22), Add(), Name('_cpp_extensions', Load(), lineno=330, col_offset=38), lineno=330, col_offset=22), Add(), Name('_rc_extensions', Load(), lineno=331, col_offset=22), lineno=330, col_offset=54), Add(), Name('_mc_extensions', Load(), lineno=331, col_offset=39), lineno=331, col_offset=37), lineno=330, col_offset=4), Assign([Name('res_extension', Store(), lineno=332, col_offset=4)], Str('.res', lineno=332, col_offset=20), lineno=332, col_offset=4), Assign([Name('obj_extension', Store(), lineno=333, col_offset=4)], Str('.obj', lineno=333, col_offset=20), lineno=333, col_offset=4), Assign([Name('static_lib_extension', Store(), lineno=334, col_offset=4)], Str('.lib', lineno=334, col_offset=27), lineno=334, col_offset=4), Assign([Name('shared_lib_extension', Store(), lineno=335, col_offset=4)], Str('.dll', lineno=335, col_offset=27), lineno=335, col_offset=4), Assign([Name('static_lib_format', Store(), lineno=336, col_offset=4), Name('shared_lib_format', Store(), lineno=336, col_offset=24)], Str('%s%s', lineno=336, col_offset=44), lineno=336, col_offset=4), Assign([Name('exe_extension', Store(), lineno=337, col_offset=4)], Str('.exe', lineno=337, col_offset=20), lineno=337, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=339, col_offset=17), Name('verbose', Param(), lineno=339, col_offset=23), Name('dry_run', Param(), lineno=339, col_offset=34), Name('force', Param(), lineno=339, col_offset=45)], None, None, [Num(0, lineno=339, col_offset=31), Num(0, lineno=339, col_offset=42), Num(0, lineno=339, col_offset=51)]), [Expr(Call(Attribute(Name('CCompiler', Load(), lineno=340, col_offset=8), '__init__', Load(), lineno=340, col_offset=8), [Name('self', Load(), lineno=340, col_offset=28), Name('verbose', Load(), lineno=340, col_offset=34), Name('dry_run', Load(), lineno=340, col_offset=43), Name('force', Load(), lineno=340, col_offset=52)], [], None, None, lineno=340, col_offset=8), lineno=340, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=341, col_offset=8), '__version', Store(), lineno=341, col_offset=8)], Name('VERSION', Load(), lineno=341, col_offset=25), lineno=341, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=342, col_offset=8), '__root', Store(), lineno=342, col_offset=8)], Str('Software\\Microsoft\\VisualStudio', lineno=342, col_offset=22), lineno=342, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=344, col_offset=8), '__paths', Store(), lineno=344, col_offset=8)], List([], Load(), lineno=344, col_offset=23), lineno=344, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=346, col_offset=8), 'plat_name', Store(), lineno=346, col_offset=8)], Name('None', Load(), lineno=346, col_offset=25), lineno=346, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=347, col_offset=8), '__arch', Store(), lineno=347, col_offset=8)], Name('None', Load(), lineno=347, col_offset=22), lineno=347, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=348, col_offset=8), 'initialized', Store(), lineno=348, col_offset=8)], Name('False', Load(), lineno=348, col_offset=27), lineno=348, col_offset=8)], [], lineno=339, col_offset=4), FunctionDef('initialize', arguments([Name('self', Param(), lineno=350, col_offset=19), Name('plat_name', Param(), lineno=350, col_offset=25)], None, None, [Name('None', Load(), lineno=350, col_offset=35)]), [Assert(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=352, col_offset=19), 'initialized', Load(), lineno=352, col_offset=19), lineno=352, col_offset=15), Str("don't init multiple times", lineno=352, col_offset=37), lineno=352, col_offset=8), If(Compare(Name('plat_name', Load(), lineno=353, col_offset=11), [Is()], [Name('None', Load(), lineno=353, col_offset=24)], lineno=353, col_offset=11), [Assign([Name('plat_name', Store(), lineno=354, col_offset=12)], Call(Name('get_platform', Load(), lineno=354, col_offset=24), [], [], None, None, lineno=354, col_offset=24), lineno=354, col_offset=12)], [], lineno=353, col_offset=8), Assign([Name('ok_plats', Store(), lineno=356, col_offset=8)], Tuple([Str('win32', lineno=356, col_offset=19), Str('win-amd64', lineno=356, col_offset=28), Str('win-ia64', lineno=356, col_offset=41)], Load(), lineno=356, col_offset=19), lineno=356, col_offset=8), If(Compare(Name('plat_name', Load(), lineno=357, col_offset=11), [NotIn()], [Name('ok_plats', Load(), lineno=357, col_offset=28)], lineno=357, col_offset=11), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=358, col_offset=18), [BinOp(Str('--plat-name must be one of %s', lineno=358, col_offset=41), Mod(), Tuple([Name('ok_plats', Load(), lineno=359, col_offset=42)], Load(), lineno=359, col_offset=42), lineno=358, col_offset=41)], [], None, None, lineno=358, col_offset=18), None, None, lineno=358, col_offset=12)], [], lineno=357, col_offset=8), If(BoolOp(And(), [Compare(Str('DISTUTILS_USE_SDK', lineno=361, col_offset=11), [In()], [Attribute(Name('os', Load(), lineno=361, col_offset=34), 'environ', Load(), lineno=361, col_offset=34)], lineno=361, col_offset=11), Compare(Str('MSSdk', lineno=361, col_offset=49), [In()], [Attribute(Name('os', Load(), lineno=361, col_offset=60), 'environ', Load(), lineno=361, col_offset=60)], lineno=361, col_offset=49), Call(Attribute(Name('self', Load(), lineno=361, col_offset=75), 'find_exe', Load(), lineno=361, col_offset=75), [Str('cl.exe', lineno=361, col_offset=89)], [], None, None, lineno=361, col_offset=75)], lineno=361, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=364, col_offset=12), 'cc', Store(), lineno=364, col_offset=12)], Str('cl.exe', lineno=364, col_offset=22), lineno=364, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=365, col_offset=12), 'linker', Store(), lineno=365, col_offset=12)], Str('link.exe', lineno=365, col_offset=26), lineno=365, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=366, col_offset=12), 'lib', Store(), lineno=366, col_offset=12)], Str('lib.exe', lineno=366, col_offset=23), lineno=366, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=367, col_offset=12), 'rc', Store(), lineno=367, col_offset=12)], Str('rc.exe', lineno=367, col_offset=22), lineno=367, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=368, col_offset=12), 'mc', Store(), lineno=368, col_offset=12)], Str('mc.exe', lineno=368, col_offset=22), lineno=368, col_offset=12)], [If(BoolOp(Or(), [Compare(Name('plat_name', Load(), lineno=375, col_offset=15), [Eq()], [Call(Name('get_platform', Load(), lineno=375, col_offset=28), [], [], None, None, lineno=375, col_offset=28)], lineno=375, col_offset=15), Compare(Name('plat_name', Load(), lineno=375, col_offset=46), [Eq()], [Str('win32', lineno=375, col_offset=59)], lineno=375, col_offset=46)], lineno=375, col_offset=15), [Assign([Name('plat_spec', Store(), lineno=377, col_offset=16)], Subscript(Name('PLAT_TO_VCVARS', Load(), lineno=377, col_offset=28), Index(Name('plat_name', Load(), lineno=377, col_offset=43)), Load(), lineno=377, col_offset=28), lineno=377, col_offset=16)], [Assign([Name('plat_spec', Store(), lineno=380, col_offset=16)], BinOp(BinOp(Subscript(Name('PLAT_TO_VCVARS', Load(), lineno=380, col_offset=28), Index(Call(Name('get_platform', Load(), lineno=380, col_offset=43), [], [], None, None, lineno=380, col_offset=43)), Load(), lineno=380, col_offset=28), Add(), Str('_', lineno=380, col_offset=61), lineno=380, col_offset=28), Add(), Subscript(Name('PLAT_TO_VCVARS', Load(), lineno=381, col_offset=28), Index(Name('plat_name', Load(), lineno=381, col_offset=43)), Load(), lineno=381, col_offset=28), lineno=380, col_offset=65), lineno=380, col_offset=16)], lineno=375, col_offset=12), Assign([Name('vc_env', Store(), lineno=383, col_offset=12)], Call(Name('query_vcvarsall', Load(), lineno=383, col_offset=21), [Name('VERSION', Load(), lineno=383, col_offset=37), Name('plat_spec', Load(), lineno=383, col_offset=46)], [], None, None, lineno=383, col_offset=21), lineno=383, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=386, col_offset=12), '__paths', Store(), lineno=386, col_offset=12)], Call(Attribute(Call(Attribute(Subscript(Name('vc_env', Load(), lineno=386, col_offset=27), Index(Str('path', lineno=386, col_offset=34)), Load(), lineno=386, col_offset=27), 'encode', Load(), lineno=386, col_offset=27), [Str('mbcs', lineno=386, col_offset=49)], [], None, None, lineno=386, col_offset=27), 'split', Load(), lineno=386, col_offset=27), [Attribute(Name('os', Load(), lineno=386, col_offset=63), 'pathsep', Load(), lineno=386, col_offset=63)], [], None, None, lineno=386, col_offset=27), lineno=386, col_offset=12), Assign([Subscript(Attribute(Name('os', Load(), lineno=387, col_offset=12), 'environ', Load(), lineno=387, col_offset=12), Index(Str('lib', lineno=387, col_offset=23)), Store(), lineno=387, col_offset=12)], Call(Attribute(Subscript(Name('vc_env', Load(), lineno=387, col_offset=32), Index(Str('lib', lineno=387, col_offset=39)), Load(), lineno=387, col_offset=32), 'encode', Load(), lineno=387, col_offset=32), [Str('mbcs', lineno=387, col_offset=53)], [], None, None, lineno=387, col_offset=32), lineno=387, col_offset=12), Assign([Subscript(Attribute(Name('os', Load(), lineno=388, col_offset=12), 'environ', Load(), lineno=388, col_offset=12), Index(Str('include', lineno=388, col_offset=23)), Store(), lineno=388, col_offset=12)], Call(Attribute(Subscript(Name('vc_env', Load(), lineno=388, col_offset=36), Index(Str('include', lineno=388, col_offset=43)), Load(), lineno=388, col_offset=36), 'encode', Load(), lineno=388, col_offset=36), [Str('mbcs', lineno=388, col_offset=61)], [], None, None, lineno=388, col_offset=36), lineno=388, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=390, col_offset=15), [Attribute(Name('self', Load(), lineno=390, col_offset=19), '__paths', Load(), lineno=390, col_offset=19)], [], None, None, lineno=390, col_offset=15), [Eq()], [Num(0, lineno=390, col_offset=36)], lineno=390, col_offset=15), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=391, col_offset=22), [BinOp(Str("Python was built with %s, and extensions need to be built with the same version of the compiler, but it isn't installed.", lineno=391, col_offset=45), Mod(), Attribute(Name('self', Load(), lineno=394, col_offset=25), '__product', Load(), lineno=394, col_offset=25), lineno=391, col_offset=45)], [], None, None, lineno=391, col_offset=22), None, None, lineno=391, col_offset=16)], [], lineno=390, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=396, col_offset=12), 'cc', Store(), lineno=396, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=396, col_offset=22), 'find_exe', Load(), lineno=396, col_offset=22), [Str('cl.exe', lineno=396, col_offset=36)], [], None, None, lineno=396, col_offset=22), lineno=396, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=397, col_offset=12), 'linker', Store(), lineno=397, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=397, col_offset=26), 'find_exe', Load(), lineno=397, col_offset=26), [Str('link.exe', lineno=397, col_offset=40)], [], None, None, lineno=397, col_offset=26), lineno=397, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=398, col_offset=12), 'lib', Store(), lineno=398, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=398, col_offset=23), 'find_exe', Load(), lineno=398, col_offset=23), [Str('lib.exe', lineno=398, col_offset=37)], [], None, None, lineno=398, col_offset=23), lineno=398, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=399, col_offset=12), 'rc', Store(), lineno=399, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=399, col_offset=22), 'find_exe', Load(), lineno=399, col_offset=22), [Str('rc.exe', lineno=399, col_offset=36)], [], None, None, lineno=399, col_offset=22), lineno=399, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=400, col_offset=12), 'mc', Store(), lineno=400, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=400, col_offset=22), 'find_exe', Load(), lineno=400, col_offset=22), [Str('mc.exe', lineno=400, col_offset=36)], [], None, None, lineno=400, col_offset=22), lineno=400, col_offset=12)], lineno=361, col_offset=8), TryExcept([For(Name('p', Store(), lineno=406, col_offset=16), Call(Attribute(Subscript(Attribute(Name('os', Load(), lineno=406, col_offset=21), 'environ', Load(), lineno=406, col_offset=21), Index(Str('path', lineno=406, col_offset=32)), Load(), lineno=406, col_offset=21), 'split', Load(), lineno=406, col_offset=21), [Str(';', lineno=406, col_offset=46)], [], None, None, lineno=406, col_offset=21), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=407, col_offset=16), '__paths', Load(), lineno=407, col_offset=16), 'append', Load(), lineno=407, col_offset=16), [Name('p', Load(), lineno=407, col_offset=36)], [], None, None, lineno=407, col_offset=16), lineno=407, col_offset=16)], [], lineno=406, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=408, col_offset=15), None, [Pass( lineno=409, col_offset=12)], lineno=408, col_offset=8)], [], lineno=405, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=410, col_offset=8), '__paths', Store(), lineno=410, col_offset=8)], Call(Name('normalize_and_reduce_paths', Load(), lineno=410, col_offset=23), [Attribute(Name('self', Load(), lineno=410, col_offset=50), '__paths', Load(), lineno=410, col_offset=50)], [], None, None, lineno=410, col_offset=23), lineno=410, col_offset=8), Assign([Subscript(Attribute(Name('os', Load(), lineno=411, col_offset=8), 'environ', Load(), lineno=411, col_offset=8), Index(Str('path', lineno=411, col_offset=19)), Store(), lineno=411, col_offset=8)], Call(Attribute(Str(';', lineno=411, col_offset=29), 'join', Load(), lineno=411, col_offset=29), [Attribute(Name('self', Load(), lineno=411, col_offset=38), '__paths', Load(), lineno=411, col_offset=38)], [], None, None, lineno=411, col_offset=29), lineno=411, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=413, col_offset=8), 'preprocess_options', Store(), lineno=413, col_offset=8)], Name('None', Load(), lineno=413, col_offset=34), lineno=413, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=414, col_offset=11), '__arch', Load(), lineno=414, col_offset=11), [Eq()], [Str('x86', lineno=414, col_offset=26)], lineno=414, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=415, col_offset=12), 'compile_options', Store(), lineno=415, col_offset=12)], List([Str('/nologo', lineno=415, col_offset=37), Str('/Ox', lineno=415, col_offset=48), Str('/MD', lineno=415, col_offset=55), Str('/W3', lineno=415, col_offset=62), Str('/DNDEBUG', lineno=416, col_offset=37)], Load(), lineno=415, col_offset=35), lineno=415, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=417, col_offset=12), 'compile_options_debug', Store(), lineno=417, col_offset=12)], List([Str('/nologo', lineno=417, col_offset=42), Str('/Od', lineno=417, col_offset=53), Str('/MDd', lineno=417, col_offset=60), Str('/W3', lineno=417, col_offset=68), Str('/Z7', lineno=418, col_offset=42), Str('/D_DEBUG', lineno=418, col_offset=49)], Load(), lineno=417, col_offset=41), lineno=417, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=421, col_offset=12), 'compile_options', Store(), lineno=421, col_offset=12)], List([Str('/nologo', lineno=421, col_offset=37), Str('/Ox', lineno=421, col_offset=48), Str('/MD', lineno=421, col_offset=55), Str('/W3', lineno=421, col_offset=62), Str('/GS-', lineno=421, col_offset=69), Str('/DNDEBUG', lineno=422, col_offset=37)], Load(), lineno=421, col_offset=35), lineno=421, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=423, col_offset=12), 'compile_options_debug', Store(), lineno=423, col_offset=12)], List([Str('/nologo', lineno=423, col_offset=42), Str('/Od', lineno=423, col_offset=53), Str('/MDd', lineno=423, col_offset=60), Str('/W3', lineno=423, col_offset=68), Str('/GS-', lineno=423, col_offset=75), Str('/Z7', lineno=424, col_offset=42), Str('/D_DEBUG', lineno=424, col_offset=49)], Load(), lineno=423, col_offset=41), lineno=423, col_offset=12)], lineno=414, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=426, col_offset=8), 'ldflags_shared', Store(), lineno=426, col_offset=8)], List([Str('/DLL', lineno=426, col_offset=31), Str('/nologo', lineno=426, col_offset=39), Str('/INCREMENTAL:NO', lineno=426, col_offset=50)], Load(), lineno=426, col_offset=30), lineno=426, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=427, col_offset=11), '__version', Load(), lineno=427, col_offset=11), [GtE()], [Num(7, lineno=427, col_offset=29)], lineno=427, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=428, col_offset=12), 'ldflags_shared_debug', Store(), lineno=428, col_offset=12)], List([Str('/DLL', lineno=429, col_offset=16), Str('/nologo', lineno=429, col_offset=24), Str('/INCREMENTAL:no', lineno=429, col_offset=35), Str('/DEBUG', lineno=429, col_offset=54), Str('/pdb:None', lineno=429, col_offset=64)], Load(), lineno=428, col_offset=40), lineno=428, col_offset=12)], [], lineno=427, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=431, col_offset=8), 'ldflags_static', Store(), lineno=431, col_offset=8)], List([Str('/nologo', lineno=431, col_offset=32)], Load(), lineno=431, col_offset=30), lineno=431, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=433, col_offset=8), 'initialized', Store(), lineno=433, col_offset=8)], Name('True', Load(), lineno=433, col_offset=27), lineno=433, col_offset=8)], [], lineno=350, col_offset=4), FunctionDef('object_filenames', arguments([Name('self', Param(), lineno=437, col_offset=25), Name('source_filenames', Param(), lineno=438, col_offset=25), Name('strip_dir', Param(), lineno=439, col_offset=25), Name('output_dir', Param(), lineno=440, col_offset=25)], None, None, [Num(0, lineno=439, col_offset=35), Str('', lineno=440, col_offset=36)]), [If(Compare(Name('output_dir', Load(), lineno=443, col_offset=11), [Is()], [Name('None', Load(), lineno=443, col_offset=25)], lineno=443, col_offset=11), [Assign([Name('output_dir', Store(), lineno=443, col_offset=31)], Str('', lineno=443, col_offset=44), lineno=443, col_offset=31)], [], lineno=443, col_offset=8), Assign([Name('obj_names', Store(), lineno=444, col_offset=8)], List([], Load(), lineno=444, col_offset=20), lineno=444, col_offset=8), For(Name('src_name', Store(), lineno=445, col_offset=12), Name('source_filenames', Load(), lineno=445, col_offset=24), [Assign([Tuple([Name('base', Store(), lineno=446, col_offset=13), Name('ext', Store(), lineno=446, col_offset=19)], Store(), lineno=446, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=446, col_offset=26), 'path', Load(), lineno=446, col_offset=26), 'splitext', Load(), lineno=446, col_offset=26), [Name('src_name', Load(), lineno=446, col_offset=44)], [], None, None, lineno=446, col_offset=26), lineno=446, col_offset=12), Assign([Name('base', Store(), lineno=447, col_offset=12)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=447, col_offset=19), 'path', Load(), lineno=447, col_offset=19), 'splitdrive', Load(), lineno=447, col_offset=19), [Name('base', Load(), lineno=447, col_offset=38)], [], None, None, lineno=447, col_offset=19), Index(Num(1, lineno=447, col_offset=44)), Load(), lineno=447, col_offset=19), lineno=447, col_offset=12), Assign([Name('base', Store(), lineno=448, col_offset=12)], Subscript(Name('base', Load(), lineno=448, col_offset=19), Slice(Call(Attribute(Attribute(Name('os', Load(), lineno=448, col_offset=24), 'path', Load(), lineno=448, col_offset=24), 'isabs', Load(), lineno=448, col_offset=24), [Name('base', Load(), lineno=448, col_offset=38)], [], None, None, lineno=448, col_offset=24), None, None), Load(), lineno=448, col_offset=19), lineno=448, col_offset=12), If(Compare(Name('ext', Load(), lineno=449, col_offset=15), [NotIn()], [Attribute(Name('self', Load(), lineno=449, col_offset=26), 'src_extensions', Load(), lineno=449, col_offset=26)], lineno=449, col_offset=15), [Raise(Call(Name('CompileError', Load(), lineno=453, col_offset=22), [BinOp(Str("Don't know how to compile %s", lineno=453, col_offset=36), Mod(), Name('src_name', Load(), lineno=453, col_offset=69), lineno=453, col_offset=36)], [], None, None, lineno=453, col_offset=22), None, None, lineno=453, col_offset=16)], [], lineno=449, col_offset=12), If(Name('strip_dir', Load(), lineno=454, col_offset=15), [Assign([Name('base', Store(), lineno=455, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=455, col_offset=23), 'path', Load(), lineno=455, col_offset=23), 'basename', Load(), lineno=455, col_offset=23), [Name('base', Load(), lineno=455, col_offset=41)], [], None, None, lineno=455, col_offset=23), lineno=455, col_offset=16)], [], lineno=454, col_offset=12), If(Compare(Name('ext', Load(), lineno=456, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=456, col_offset=22), '_rc_extensions', Load(), lineno=456, col_offset=22)], lineno=456, col_offset=15), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=457, col_offset=16), 'append', Load(), lineno=457, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=457, col_offset=34), 'path', Load(), lineno=457, col_offset=34), 'join', Load(), lineno=457, col_offset=34), [Name('output_dir', Load(), lineno=457, col_offset=48), BinOp(Name('base', Load(), lineno=458, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=458, col_offset=55), 'res_extension', Load(), lineno=458, col_offset=55), lineno=458, col_offset=48)], [], None, None, lineno=457, col_offset=34)], [], None, None, lineno=457, col_offset=16), lineno=457, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=459, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=459, col_offset=24), '_mc_extensions', Load(), lineno=459, col_offset=24)], lineno=459, col_offset=17), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=460, col_offset=16), 'append', Load(), lineno=460, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=460, col_offset=34), 'path', Load(), lineno=460, col_offset=34), 'join', Load(), lineno=460, col_offset=34), [Name('output_dir', Load(), lineno=460, col_offset=48), BinOp(Name('base', Load(), lineno=461, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=461, col_offset=55), 'res_extension', Load(), lineno=461, col_offset=55), lineno=461, col_offset=48)], [], None, None, lineno=460, col_offset=34)], [], None, None, lineno=460, col_offset=16), lineno=460, col_offset=16)], [Expr(Call(Attribute(Name('obj_names', Load(), lineno=463, col_offset=16), 'append', Load(), lineno=463, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=463, col_offset=34), 'path', Load(), lineno=463, col_offset=34), 'join', Load(), lineno=463, col_offset=34), [Name('output_dir', Load(), lineno=463, col_offset=48), BinOp(Name('base', Load(), lineno=464, col_offset=48), Add(), Attribute(Name('self', Load(), lineno=464, col_offset=55), 'obj_extension', Load(), lineno=464, col_offset=55), lineno=464, col_offset=48)], [], None, None, lineno=463, col_offset=34)], [], None, None, lineno=463, col_offset=16), lineno=463, col_offset=16)], lineno=459, col_offset=17)], lineno=456, col_offset=12)], [], lineno=445, col_offset=8), Return(Name('obj_names', Load(), lineno=465, col_offset=15), lineno=465, col_offset=8)], [], lineno=437, col_offset=4), FunctionDef('compile', arguments([Name('self', Param(), lineno=468, col_offset=16), Name('sources', Param(), lineno=468, col_offset=22), Name('output_dir', Param(), lineno=469, col_offset=16), Name('macros', Param(), lineno=469, col_offset=33), Name('include_dirs', Param(), lineno=469, col_offset=46), Name('debug', Param(), lineno=469, col_offset=65), Name('extra_preargs', Param(), lineno=470, col_offset=16), Name('extra_postargs', Param(), lineno=470, col_offset=36), Name('depends', Param(), lineno=470, col_offset=57)], None, None, [Name('None', Load(), lineno=469, col_offset=27), Name('None', Load(), lineno=469, col_offset=40), Name('None', Load(), lineno=469, col_offset=59), Num(0, lineno=469, col_offset=71), Name('None', Load(), lineno=470, col_offset=30), Name('None', Load(), lineno=470, col_offset=51), Name('None', Load(), lineno=470, col_offset=65)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=472, col_offset=15), 'initialized', Load(), lineno=472, col_offset=15), lineno=472, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=473, col_offset=12), 'initialize', Load(), lineno=473, col_offset=12), [], [], None, None, lineno=473, col_offset=12), lineno=473, col_offset=12)], [], lineno=472, col_offset=8), Assign([Name('compile_info', Store(), lineno=474, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=474, col_offset=23), '_setup_compile', Load(), lineno=474, col_offset=23), [Name('output_dir', Load(), lineno=474, col_offset=43), Name('macros', Load(), lineno=474, col_offset=55), Name('include_dirs', Load(), lineno=474, col_offset=63), Name('sources', Load(), lineno=475, col_offset=43), Name('depends', Load(), lineno=475, col_offset=52), Name('extra_postargs', Load(), lineno=475, col_offset=61)], [], None, None, lineno=474, col_offset=23), lineno=474, col_offset=8), Assign([Tuple([Name('macros', Store(), lineno=476, col_offset=8), Name('objects', Store(), lineno=476, col_offset=16), Name('extra_postargs', Store(), lineno=476, col_offset=25), Name('pp_opts', Store(), lineno=476, col_offset=41), Name('build', Store(), lineno=476, col_offset=50)], Store(), lineno=476, col_offset=8)], Name('compile_info', Load(), lineno=476, col_offset=58), lineno=476, col_offset=8), Assign([Name('compile_opts', Store(), lineno=478, col_offset=8)], BoolOp(Or(), [Name('extra_preargs', Load(), lineno=478, col_offset=23), List([], Load(), lineno=478, col_offset=40)], lineno=478, col_offset=23), lineno=478, col_offset=8), Expr(Call(Attribute(Name('compile_opts', Load(), lineno=479, col_offset=8), 'append', Load(), lineno=479, col_offset=8), [Str('/c', lineno=479, col_offset=29)], [], None, None, lineno=479, col_offset=8), lineno=479, col_offset=8), If(Name('debug', Load(), lineno=480, col_offset=11), [Expr(Call(Attribute(Name('compile_opts', Load(), lineno=481, col_offset=12), 'extend', Load(), lineno=481, col_offset=12), [Attribute(Name('self', Load(), lineno=481, col_offset=32), 'compile_options_debug', Load(), lineno=481, col_offset=32)], [], None, None, lineno=481, col_offset=12), lineno=481, col_offset=12)], [Expr(Call(Attribute(Name('compile_opts', Load(), lineno=483, col_offset=12), 'extend', Load(), lineno=483, col_offset=12), [Attribute(Name('self', Load(), lineno=483, col_offset=32), 'compile_options', Load(), lineno=483, col_offset=32)], [], None, None, lineno=483, col_offset=12), lineno=483, col_offset=12)], lineno=480, col_offset=8), For(Name('obj', Store(), lineno=485, col_offset=12), Name('objects', Load(), lineno=485, col_offset=19), [TryExcept([Assign([Tuple([Name('src', Store(), lineno=487, col_offset=16), Name('ext', Store(), lineno=487, col_offset=21)], Store(), lineno=487, col_offset=16)], Subscript(Name('build', Load(), lineno=487, col_offset=27), Index(Name('obj', Load(), lineno=487, col_offset=33)), Load(), lineno=487, col_offset=27), lineno=487, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=488, col_offset=19), None, [Continue( lineno=489, col_offset=16)], lineno=488, col_offset=12)], [], lineno=486, col_offset=12), If(Name('debug', Load(), lineno=490, col_offset=15), [Assign([Name('src', Store(), lineno=494, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=494, col_offset=22), 'path', Load(), lineno=494, col_offset=22), 'abspath', Load(), lineno=494, col_offset=22), [Name('src', Load(), lineno=494, col_offset=38)], [], None, None, lineno=494, col_offset=22), lineno=494, col_offset=16)], [], lineno=490, col_offset=12), If(Compare(Name('ext', Load(), lineno=496, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=496, col_offset=22), '_c_extensions', Load(), lineno=496, col_offset=22)], lineno=496, col_offset=15), [Assign([Name('input_opt', Store(), lineno=497, col_offset=16)], BinOp(Str('/Tc', lineno=497, col_offset=28), Add(), Name('src', Load(), lineno=497, col_offset=36), lineno=497, col_offset=28), lineno=497, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=498, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=498, col_offset=24), '_cpp_extensions', Load(), lineno=498, col_offset=24)], lineno=498, col_offset=17), [Assign([Name('input_opt', Store(), lineno=499, col_offset=16)], BinOp(Str('/Tp', lineno=499, col_offset=28), Add(), Name('src', Load(), lineno=499, col_offset=36), lineno=499, col_offset=28), lineno=499, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=500, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=500, col_offset=24), '_rc_extensions', Load(), lineno=500, col_offset=24)], lineno=500, col_offset=17), [Assign([Name('input_opt', Store(), lineno=502, col_offset=16)], Name('src', Load(), lineno=502, col_offset=28), lineno=502, col_offset=16), Assign([Name('output_opt', Store(), lineno=503, col_offset=16)], BinOp(Str('/fo', lineno=503, col_offset=29), Add(), Name('obj', Load(), lineno=503, col_offset=37), lineno=503, col_offset=29), lineno=503, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=505, col_offset=20), 'spawn', Load(), lineno=505, col_offset=20), [BinOp(BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=505, col_offset=32), 'rc', Load(), lineno=505, col_offset=32)], Load(), lineno=505, col_offset=31), Add(), Name('pp_opts', Load(), lineno=505, col_offset=43), lineno=505, col_offset=31), Add(), List([Name('output_opt', Load(), lineno=506, col_offset=32)], Load(), lineno=506, col_offset=31), lineno=505, col_offset=51), Add(), List([Name('input_opt', Load(), lineno=506, col_offset=47)], Load(), lineno=506, col_offset=46), lineno=506, col_offset=44)], [], None, None, lineno=505, col_offset=20), lineno=505, col_offset=20)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=507, col_offset=23), Name('msg', Store(), lineno=507, col_offset=43), [Raise(Call(Name('CompileError', Load(), lineno=508, col_offset=26), [Name('msg', Load(), lineno=508, col_offset=39)], [], None, None, lineno=508, col_offset=26), None, None, lineno=508, col_offset=20)], lineno=507, col_offset=16)], [], lineno=504, col_offset=16), Continue( lineno=509, col_offset=16)], [If(Compare(Name('ext', Load(), lineno=510, col_offset=17), [In()], [Attribute(Name('self', Load(), lineno=510, col_offset=24), '_mc_extensions', Load(), lineno=510, col_offset=24)], lineno=510, col_offset=17), [Assign([Name('h_dir', Store(), lineno=522, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=522, col_offset=24), 'path', Load(), lineno=522, col_offset=24), 'dirname', Load(), lineno=522, col_offset=24), [Name('src', Load(), lineno=522, col_offset=40)], [], None, None, lineno=522, col_offset=24), lineno=522, col_offset=16), Assign([Name('rc_dir', Store(), lineno=523, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=523, col_offset=25), 'path', Load(), lineno=523, col_offset=25), 'dirname', Load(), lineno=523, col_offset=25), [Name('obj', Load(), lineno=523, col_offset=41)], [], None, None, lineno=523, col_offset=25), lineno=523, col_offset=16), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=526, col_offset=20), 'spawn', Load(), lineno=526, col_offset=20), [BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=526, col_offset=32), 'mc', Load(), lineno=526, col_offset=32)], Load(), lineno=526, col_offset=31), Add(), List([Str('-h', lineno=527, col_offset=32), Name('h_dir', Load(), lineno=527, col_offset=38), Str('-r', lineno=527, col_offset=45), Name('rc_dir', Load(), lineno=527, col_offset=51)], Load(), lineno=527, col_offset=31), lineno=526, col_offset=31), Add(), List([Name('src', Load(), lineno=527, col_offset=62)], Load(), lineno=527, col_offset=61), lineno=527, col_offset=59)], [], None, None, lineno=526, col_offset=20), lineno=526, col_offset=20), Assign([Tuple([Name('base', Store(), lineno=528, col_offset=20), Name('_', Store(), lineno=528, col_offset=26)], Store(), lineno=528, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=528, col_offset=30), 'path', Load(), lineno=528, col_offset=30), 'splitext', Load(), lineno=528, col_offset=30), [Call(Attribute(Attribute(Name('os', Load(), lineno=528, col_offset=48), 'path', Load(), lineno=528, col_offset=48), 'basename', Load(), lineno=528, col_offset=48), [Name('src', Load(), lineno=528, col_offset=66)], [], None, None, lineno=528, col_offset=48)], [], None, None, lineno=528, col_offset=30), lineno=528, col_offset=20), Assign([Name('rc_file', Store(), lineno=529, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=529, col_offset=30), 'path', Load(), lineno=529, col_offset=30), 'join', Load(), lineno=529, col_offset=30), [Name('rc_dir', Load(), lineno=529, col_offset=44), BinOp(Name('base', Load(), lineno=529, col_offset=52), Add(), Str('.rc', lineno=529, col_offset=59), lineno=529, col_offset=52)], [], None, None, lineno=529, col_offset=30), lineno=529, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=531, col_offset=20), 'spawn', Load(), lineno=531, col_offset=20), [BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=531, col_offset=32), 'rc', Load(), lineno=531, col_offset=32)], Load(), lineno=531, col_offset=31), Add(), List([BinOp(Str('/fo', lineno=532, col_offset=32), Add(), Name('obj', Load(), lineno=532, col_offset=40), lineno=532, col_offset=32)], Load(), lineno=532, col_offset=31), lineno=531, col_offset=31), Add(), List([Name('rc_file', Load(), lineno=532, col_offset=48)], Load(), lineno=532, col_offset=47), lineno=532, col_offset=45)], [], None, None, lineno=531, col_offset=20), lineno=531, col_offset=20)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=534, col_offset=23), Name('msg', Store(), lineno=534, col_offset=43), [Raise(Call(Name('CompileError', Load(), lineno=535, col_offset=26), [Name('msg', Load(), lineno=535, col_offset=39)], [], None, None, lineno=535, col_offset=26), None, None, lineno=535, col_offset=20)], lineno=534, col_offset=16)], [], lineno=524, col_offset=16), Continue( lineno=536, col_offset=16)], [Raise(Call(Name('CompileError', Load(), lineno=539, col_offset=22), [BinOp(Str("Don't know how to compile %s to %s", lineno=539, col_offset=35), Mod(), Tuple([Name('src', Load(), lineno=540, col_offset=38), Name('obj', Load(), lineno=540, col_offset=43)], Load(), lineno=540, col_offset=38), lineno=539, col_offset=35)], [], None, None, lineno=539, col_offset=22), None, None, lineno=539, col_offset=16)], lineno=510, col_offset=17)], lineno=500, col_offset=17)], lineno=498, col_offset=17)], lineno=496, col_offset=12), Assign([Name('output_opt', Store(), lineno=542, col_offset=12)], BinOp(Str('/Fo', lineno=542, col_offset=25), Add(), Name('obj', Load(), lineno=542, col_offset=33), lineno=542, col_offset=25), lineno=542, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=544, col_offset=16), 'spawn', Load(), lineno=544, col_offset=16), [BinOp(BinOp(BinOp(BinOp(List([Attribute(Name('self', Load(), lineno=544, col_offset=28), 'cc', Load(), lineno=544, col_offset=28)], Load(), lineno=544, col_offset=27), Add(), Name('compile_opts', Load(), lineno=544, col_offset=39), lineno=544, col_offset=27), Add(), Name('pp_opts', Load(), lineno=544, col_offset=54), lineno=544, col_offset=52), Add(), List([Name('input_opt', Load(), lineno=545, col_offset=28), Name('output_opt', Load(), lineno=545, col_offset=39)], Load(), lineno=545, col_offset=27), lineno=544, col_offset=62), Add(), Name('extra_postargs', Load(), lineno=546, col_offset=27), lineno=545, col_offset=51)], [], None, None, lineno=544, col_offset=16), lineno=544, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=547, col_offset=19), Name('msg', Store(), lineno=547, col_offset=39), [Raise(Call(Name('CompileError', Load(), lineno=548, col_offset=22), [Name('msg', Load(), lineno=548, col_offset=35)], [], None, None, lineno=548, col_offset=22), None, None, lineno=548, col_offset=16)], lineno=547, col_offset=12)], [], lineno=543, col_offset=12)], [], lineno=485, col_offset=8), Return(Name('objects', Load(), lineno=550, col_offset=15), lineno=550, col_offset=8)], [], lineno=468, col_offset=4), FunctionDef('create_static_lib', arguments([Name('self', Param(), lineno=553, col_offset=26), Name('objects', Param(), lineno=554, col_offset=26), Name('output_libname', Param(), lineno=555, col_offset=26), Name('output_dir', Param(), lineno=556, col_offset=26), Name('debug', Param(), lineno=557, col_offset=26), Name('target_lang', Param(), lineno=558, col_offset=26)], None, None, [Name('None', Load(), lineno=556, col_offset=37), Num(0, lineno=557, col_offset=32), Name('None', Load(), lineno=558, col_offset=38)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=560, col_offset=15), 'initialized', Load(), lineno=560, col_offset=15), lineno=560, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=561, col_offset=12), 'initialize', Load(), lineno=561, col_offset=12), [], [], None, None, lineno=561, col_offset=12), lineno=561, col_offset=12)], [], lineno=560, col_offset=8), Assign([Tuple([Name('objects', Store(), lineno=562, col_offset=9), Name('output_dir', Store(), lineno=562, col_offset=18)], Store(), lineno=562, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=562, col_offset=32), '_fix_object_args', Load(), lineno=562, col_offset=32), [Name('objects', Load(), lineno=562, col_offset=54), Name('output_dir', Load(), lineno=562, col_offset=63)], [], None, None, lineno=562, col_offset=32), lineno=562, col_offset=8), Assign([Name('output_filename', Store(), lineno=563, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=563, col_offset=26), 'library_filename', Load(), lineno=563, col_offset=26), [Name('output_libname', Load(), lineno=563, col_offset=48)], [keyword('output_dir', Name('output_dir', Load(), lineno=564, col_offset=59))], None, None, lineno=563, col_offset=26), lineno=563, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=566, col_offset=11), '_need_link', Load(), lineno=566, col_offset=11), [Name('objects', Load(), lineno=566, col_offset=27), Name('output_filename', Load(), lineno=566, col_offset=36)], [], None, None, lineno=566, col_offset=11), [Assign([Name('lib_args', Store(), lineno=567, col_offset=12)], BinOp(Name('objects', Load(), lineno=567, col_offset=23), Add(), List([BinOp(Str('/OUT:', lineno=567, col_offset=34), Add(), Name('output_filename', Load(), lineno=567, col_offset=44), lineno=567, col_offset=34)], Load(), lineno=567, col_offset=33), lineno=567, col_offset=23), lineno=567, col_offset=12), If(Name('debug', Load(), lineno=568, col_offset=15), [Pass( lineno=569, col_offset=16)], [], lineno=568, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=571, col_offset=16), 'spawn', Load(), lineno=571, col_offset=16), [BinOp(List([Attribute(Name('self', Load(), lineno=571, col_offset=28), 'lib', Load(), lineno=571, col_offset=28)], Load(), lineno=571, col_offset=27), Add(), Name('lib_args', Load(), lineno=571, col_offset=40), lineno=571, col_offset=27)], [], None, None, lineno=571, col_offset=16), lineno=571, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=572, col_offset=19), Name('msg', Store(), lineno=572, col_offset=39), [Raise(Call(Name('LibError', Load(), lineno=573, col_offset=22), [Name('msg', Load(), lineno=573, col_offset=31)], [], None, None, lineno=573, col_offset=22), None, None, lineno=573, col_offset=16)], lineno=572, col_offset=12)], [], lineno=570, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=575, col_offset=12), 'debug', Load(), lineno=575, col_offset=12), [Str('skipping %s (up-to-date)', lineno=575, col_offset=22), Name('output_filename', Load(), lineno=575, col_offset=50)], [], None, None, lineno=575, col_offset=12), lineno=575, col_offset=12)], lineno=566, col_offset=8)], [], lineno=553, col_offset=4), FunctionDef('link', arguments([Name('self', Param(), lineno=578, col_offset=13), Name('target_desc', Param(), lineno=579, col_offset=13), Name('objects', Param(), lineno=580, col_offset=13), Name('output_filename', Param(), lineno=581, col_offset=13), Name('output_dir', Param(), lineno=582, col_offset=13), Name('libraries', Param(), lineno=583, col_offset=13), Name('library_dirs', Param(), lineno=584, col_offset=13), Name('runtime_library_dirs', Param(), lineno=585, col_offset=13), Name('export_symbols', Param(), lineno=586, col_offset=13), Name('debug', Param(), lineno=587, col_offset=13), Name('extra_preargs', Param(), lineno=588, col_offset=13), Name('extra_postargs', Param(), lineno=589, col_offset=13), Name('build_temp', Param(), lineno=590, col_offset=13), Name('target_lang', Param(), lineno=591, col_offset=13)], None, None, [Name('None', Load(), lineno=582, col_offset=24), Name('None', Load(), lineno=583, col_offset=23), Name('None', Load(), lineno=584, col_offset=26), Name('None', Load(), lineno=585, col_offset=34), Name('None', Load(), lineno=586, col_offset=28), Num(0, lineno=587, col_offset=19), Name('None', Load(), lineno=588, col_offset=27), Name('None', Load(), lineno=589, col_offset=28), Name('None', Load(), lineno=590, col_offset=24), Name('None', Load(), lineno=591, col_offset=25)]), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=593, col_offset=15), 'initialized', Load(), lineno=593, col_offset=15), lineno=593, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=594, col_offset=12), 'initialize', Load(), lineno=594, col_offset=12), [], [], None, None, lineno=594, col_offset=12), lineno=594, col_offset=12)], [], lineno=593, col_offset=8), Assign([Tuple([Name('objects', Store(), lineno=595, col_offset=9), Name('output_dir', Store(), lineno=595, col_offset=18)], Store(), lineno=595, col_offset=9)], Call(Attribute(Name('self', Load(), lineno=595, col_offset=32), '_fix_object_args', Load(), lineno=595, col_offset=32), [Name('objects', Load(), lineno=595, col_offset=54), Name('output_dir', Load(), lineno=595, col_offset=63)], [], None, None, lineno=595, col_offset=32), lineno=595, col_offset=8), Assign([Name('fixed_args', Store(), lineno=596, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=596, col_offset=21), '_fix_lib_args', Load(), lineno=596, col_offset=21), [Name('libraries', Load(), lineno=596, col_offset=40), Name('library_dirs', Load(), lineno=596, col_offset=51), Name('runtime_library_dirs', Load(), lineno=597, col_offset=40)], [], None, None, lineno=596, col_offset=21), lineno=596, col_offset=8), Assign([Tuple([Name('libraries', Store(), lineno=598, col_offset=9), Name('library_dirs', Store(), lineno=598, col_offset=20), Name('runtime_library_dirs', Store(), lineno=598, col_offset=34)], Store(), lineno=598, col_offset=9)], Name('fixed_args', Load(), lineno=598, col_offset=58), lineno=598, col_offset=8), If(Name('runtime_library_dirs', Load(), lineno=600, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=601, col_offset=12), 'warn', Load(), lineno=601, col_offset=12), [BinOp(Str("I don't know what to do with 'runtime_library_dirs': ", lineno=601, col_offset=23), Add(), Call(Name('str', Load(), lineno=602, col_offset=25), [Name('runtime_library_dirs', Load(), lineno=602, col_offset=30)], [], None, None, lineno=602, col_offset=25), lineno=601, col_offset=23)], [], None, None, lineno=601, col_offset=12), lineno=601, col_offset=12)], [], lineno=600, col_offset=8), Assign([Name('lib_opts', Store(), lineno=604, col_offset=8)], Call(Name('gen_lib_options', Load(), lineno=604, col_offset=19), [Name('self', Load(), lineno=604, col_offset=35), Name('library_dirs', Load(), lineno=605, col_offset=35), Name('runtime_library_dirs', Load(), lineno=605, col_offset=49), Name('libraries', Load(), lineno=606, col_offset=35)], [], None, None, lineno=604, col_offset=19), lineno=604, col_offset=8), If(Compare(Name('output_dir', Load(), lineno=607, col_offset=11), [IsNot()], [Name('None', Load(), lineno=607, col_offset=29)], lineno=607, col_offset=11), [Assign([Name('output_filename', Store(), lineno=608, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=608, col_offset=30), 'path', Load(), lineno=608, col_offset=30), 'join', Load(), lineno=608, col_offset=30), [Name('output_dir', Load(), lineno=608, col_offset=43), Name('output_filename', Load(), lineno=608, col_offset=55)], [], None, None, lineno=608, col_offset=30), lineno=608, col_offset=12)], [], lineno=607, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=610, col_offset=11), '_need_link', Load(), lineno=610, col_offset=11), [Name('objects', Load(), lineno=610, col_offset=27), Name('output_filename', Load(), lineno=610, col_offset=36)], [], None, None, lineno=610, col_offset=11), [If(Compare(Name('target_desc', Load(), lineno=611, col_offset=15), [Eq()], [Attribute(Name('CCompiler', Load(), lineno=611, col_offset=30), 'EXECUTABLE', Load(), lineno=611, col_offset=30)], lineno=611, col_offset=15), [If(Name('debug', Load(), lineno=612, col_offset=19), [Assign([Name('ldflags', Store(), lineno=613, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=613, col_offset=30), 'ldflags_shared_debug', Load(), lineno=613, col_offset=30), Slice(Num(1, lineno=613, col_offset=56), None, None), Load(), lineno=613, col_offset=30), lineno=613, col_offset=20)], [Assign([Name('ldflags', Store(), lineno=615, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=615, col_offset=30), 'ldflags_shared', Load(), lineno=615, col_offset=30), Slice(Num(1, lineno=615, col_offset=50), None, None), Load(), lineno=615, col_offset=30), lineno=615, col_offset=20)], lineno=612, col_offset=16)], [If(Name('debug', Load(), lineno=617, col_offset=19), [Assign([Name('ldflags', Store(), lineno=618, col_offset=20)], Attribute(Name('self', Load(), lineno=618, col_offset=30), 'ldflags_shared_debug', Load(), lineno=618, col_offset=30), lineno=618, col_offset=20)], [Assign([Name('ldflags', Store(), lineno=620, col_offset=20)], Attribute(Name('self', Load(), lineno=620, col_offset=30), 'ldflags_shared', Load(), lineno=620, col_offset=30), lineno=620, col_offset=20)], lineno=617, col_offset=16)], lineno=611, col_offset=12), Assign([Name('export_opts', Store(), lineno=622, col_offset=12)], List([], Load(), lineno=622, col_offset=26), lineno=622, col_offset=12), For(Name('sym', Store(), lineno=623, col_offset=16), BoolOp(Or(), [Name('export_symbols', Load(), lineno=623, col_offset=24), List([], Load(), lineno=623, col_offset=42)], lineno=623, col_offset=24), [Expr(Call(Attribute(Name('export_opts', Load(), lineno=624, col_offset=16), 'append', Load(), lineno=624, col_offset=16), [BinOp(Str('/EXPORT:', lineno=624, col_offset=35), Add(), Name('sym', Load(), lineno=624, col_offset=48), lineno=624, col_offset=35)], [], None, None, lineno=624, col_offset=16), lineno=624, col_offset=16)], [], lineno=623, col_offset=12), Assign([Name('ld_args', Store(), lineno=626, col_offset=12)], BinOp(BinOp(BinOp(BinOp(Name('ldflags', Load(), lineno=626, col_offset=23), Add(), Name('lib_opts', Load(), lineno=626, col_offset=33), lineno=626, col_offset=23), Add(), Name('export_opts', Load(), lineno=626, col_offset=44), lineno=626, col_offset=42), Add(), Name('objects', Load(), lineno=627, col_offset=23), lineno=626, col_offset=56), Add(), List([BinOp(Str('/OUT:', lineno=627, col_offset=34), Add(), Name('output_filename', Load(), lineno=627, col_offset=44), lineno=627, col_offset=34)], Load(), lineno=627, col_offset=33), lineno=627, col_offset=31), lineno=626, col_offset=12), Assign([Name('build_temp', Store(), lineno=634, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=634, col_offset=25), 'path', Load(), lineno=634, col_offset=25), 'dirname', Load(), lineno=634, col_offset=25), [Subscript(Name('objects', Load(), lineno=634, col_offset=41), Index(Num(0, lineno=634, col_offset=49)), Load(), lineno=634, col_offset=41)], [], None, None, lineno=634, col_offset=25), lineno=634, col_offset=12), If(Compare(Name('export_symbols', Load(), lineno=635, col_offset=15), [IsNot()], [Name('None', Load(), lineno=635, col_offset=37)], lineno=635, col_offset=15), [Assign([Tuple([Name('dll_name', Store(), lineno=636, col_offset=17), Name('dll_ext', Store(), lineno=636, col_offset=27)], Store(), lineno=636, col_offset=17)], Call(Attribute(Attribute(Name('os', Load(), lineno=636, col_offset=38), 'path', Load(), lineno=636, col_offset=38), 'splitext', Load(), lineno=636, col_offset=38), [Call(Attribute(Attribute(Name('os', Load(), lineno=637, col_offset=20), 'path', Load(), lineno=637, col_offset=20), 'basename', Load(), lineno=637, col_offset=20), [Name('output_filename', Load(), lineno=637, col_offset=37)], [], None, None, lineno=637, col_offset=20)], [], None, None, lineno=636, col_offset=38), lineno=636, col_offset=16), Assign([Name('implib_file', Store(), lineno=638, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=638, col_offset=30), 'path', Load(), lineno=638, col_offset=30), 'join', Load(), lineno=638, col_offset=30), [Name('build_temp', Load(), lineno=639, col_offset=20), Call(Attribute(Name('self', Load(), lineno=640, col_offset=20), 'library_filename', Load(), lineno=640, col_offset=20), [Name('dll_name', Load(), lineno=640, col_offset=42)], [], None, None, lineno=640, col_offset=20)], [], None, None, lineno=638, col_offset=30), lineno=638, col_offset=16), Expr(Call(Attribute(Name('ld_args', Load(), lineno=641, col_offset=16), 'append', Load(), lineno=641, col_offset=16), [BinOp(Str('/IMPLIB:', lineno=641, col_offset=32), Add(), Name('implib_file', Load(), lineno=641, col_offset=45), lineno=641, col_offset=32)], [], None, None, lineno=641, col_offset=16), lineno=641, col_offset=16)], [], lineno=635, col_offset=12), Assign([Name('temp_manifest', Store(), lineno=648, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=648, col_offset=28), 'path', Load(), lineno=648, col_offset=28), 'join', Load(), lineno=648, col_offset=28), [Name('build_temp', Load(), lineno=649, col_offset=20), BinOp(Call(Attribute(Attribute(Name('os', Load(), lineno=650, col_offset=20), 'path', Load(), lineno=650, col_offset=20), 'basename', Load(), lineno=650, col_offset=20), [Name('output_filename', Load(), lineno=650, col_offset=37)], [], None, None, lineno=650, col_offset=20), Add(), Str('.manifest', lineno=650, col_offset=56), lineno=650, col_offset=20)], [], None, None, lineno=648, col_offset=28), lineno=648, col_offset=12), Expr(Call(Attribute(Name('ld_args', Load(), lineno=651, col_offset=12), 'append', Load(), lineno=651, col_offset=12), [BinOp(Str('/MANIFESTFILE:', lineno=651, col_offset=27), Add(), Name('temp_manifest', Load(), lineno=651, col_offset=46), lineno=651, col_offset=27)], [], None, None, lineno=651, col_offset=12), lineno=651, col_offset=12), If(Name('extra_preargs', Load(), lineno=653, col_offset=15), [Assign([Subscript(Name('ld_args', Load(), lineno=654, col_offset=16), Slice(None, Num(0, lineno=654, col_offset=25), None), Store(), lineno=654, col_offset=16)], Name('extra_preargs', Load(), lineno=654, col_offset=30), lineno=654, col_offset=16)], [], lineno=653, col_offset=12), If(Name('extra_postargs', Load(), lineno=655, col_offset=15), [Expr(Call(Attribute(Name('ld_args', Load(), lineno=656, col_offset=16), 'extend', Load(), lineno=656, col_offset=16), [Name('extra_postargs', Load(), lineno=656, col_offset=31)], [], None, None, lineno=656, col_offset=16), lineno=656, col_offset=16)], [], lineno=655, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=658, col_offset=12), 'mkpath', Load(), lineno=658, col_offset=12), [Call(Attribute(Attribute(Name('os', Load(), lineno=658, col_offset=24), 'path', Load(), lineno=658, col_offset=24), 'dirname', Load(), lineno=658, col_offset=24), [Name('output_filename', Load(), lineno=658, col_offset=40)], [], None, None, lineno=658, col_offset=24)], [], None, None, lineno=658, col_offset=12), lineno=658, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=660, col_offset=16), 'spawn', Load(), lineno=660, col_offset=16), [BinOp(List([Attribute(Name('self', Load(), lineno=660, col_offset=28), 'linker', Load(), lineno=660, col_offset=28)], Load(), lineno=660, col_offset=27), Add(), Name('ld_args', Load(), lineno=660, col_offset=43), lineno=660, col_offset=27)], [], None, None, lineno=660, col_offset=16), lineno=660, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=661, col_offset=19), Name('msg', Store(), lineno=661, col_offset=39), [Raise(Call(Name('LinkError', Load(), lineno=662, col_offset=22), [Name('msg', Load(), lineno=662, col_offset=32)], [], None, None, lineno=662, col_offset=22), None, None, lineno=662, col_offset=16)], lineno=661, col_offset=12)], [], lineno=659, col_offset=12), If(Compare(Name('target_desc', Load(), lineno=669, col_offset=15), [Eq()], [Attribute(Name('CCompiler', Load(), lineno=669, col_offset=30), 'EXECUTABLE', Load(), lineno=669, col_offset=30)], lineno=669, col_offset=15), [Assign([Name('mfid', Store(), lineno=670, col_offset=16)], Num(1, lineno=670, col_offset=23), lineno=670, col_offset=16)], [Assign([Name('mfid', Store(), lineno=672, col_offset=16)], Num(2, lineno=672, col_offset=23), lineno=672, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=673, col_offset=16), '_remove_visual_c_ref', Load(), lineno=673, col_offset=16), [Name('temp_manifest', Load(), lineno=673, col_offset=42)], [], None, None, lineno=673, col_offset=16), lineno=673, col_offset=16)], lineno=669, col_offset=12), Assign([Name('out_arg', Store(), lineno=674, col_offset=12)], BinOp(Str('-outputresource:%s;%s', lineno=674, col_offset=22), Mod(), Tuple([Name('output_filename', Load(), lineno=674, col_offset=49), Name('mfid', Load(), lineno=674, col_offset=66)], Load(), lineno=674, col_offset=49), lineno=674, col_offset=22), lineno=674, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=676, col_offset=16), 'spawn', Load(), lineno=676, col_offset=16), [List([Str('mt.exe', lineno=676, col_offset=28), Str('-nologo', lineno=676, col_offset=38), Str('-manifest', lineno=676, col_offset=49), Name('temp_manifest', Load(), lineno=677, col_offset=28), Name('out_arg', Load(), lineno=677, col_offset=43)], Load(), lineno=676, col_offset=27)], [], None, None, lineno=676, col_offset=16), lineno=676, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=678, col_offset=19), Name('msg', Store(), lineno=678, col_offset=39), [Raise(Call(Name('LinkError', Load(), lineno=679, col_offset=22), [Name('msg', Load(), lineno=679, col_offset=32)], [], None, None, lineno=679, col_offset=22), None, None, lineno=679, col_offset=16)], lineno=678, col_offset=12)], [], lineno=675, col_offset=12)], [Expr(Call(Attribute(Name('log', Load(), lineno=681, col_offset=12), 'debug', Load(), lineno=681, col_offset=12), [Str('skipping %s (up-to-date)', lineno=681, col_offset=22), Name('output_filename', Load(), lineno=681, col_offset=50)], [], None, None, lineno=681, col_offset=12), lineno=681, col_offset=12)], lineno=610, col_offset=8)], [], lineno=578, col_offset=4), FunctionDef('_remove_visual_c_ref', arguments([Name('self', Param(), lineno=683, col_offset=29), Name('manifest_file', Param(), lineno=683, col_offset=35)], None, None, []), [TryExcept([Assign([Name('manifest_f', Store(), lineno=691, col_offset=12)], Call(Name('open', Load(), lineno=691, col_offset=25), [Name('manifest_file', Load(), lineno=691, col_offset=30)], [], None, None, lineno=691, col_offset=25), lineno=691, col_offset=12), TryFinally([Assign([Name('manifest_buf', Store(), lineno=693, col_offset=16)], Call(Attribute(Name('manifest_f', Load(), lineno=693, col_offset=31), 'read', Load(), lineno=693, col_offset=31), [], [], None, None, lineno=693, col_offset=31), lineno=693, col_offset=16)], [Expr(Call(Attribute(Name('manifest_f', Load(), lineno=695, col_offset=16), 'close', Load(), lineno=695, col_offset=16), [], [], None, None, lineno=695, col_offset=16), lineno=695, col_offset=16)], lineno=692, col_offset=12), Assign([Name('pattern', Store(), lineno=696, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=696, col_offset=22), 'compile', Load(), lineno=696, col_offset=22), [Str('<assemblyIdentity.*?name=("|\')Microsoft\\.VC\\d{2}\\.CRT("|\').*?(/>|</assemblyIdentity>)', lineno=697, col_offset=16), Attribute(Name('re', Load(), lineno=699, col_offset=16), 'DOTALL', Load(), lineno=699, col_offset=16)], [], None, None, lineno=696, col_offset=22), lineno=696, col_offset=12), Assign([Name('manifest_buf', Store(), lineno=700, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=700, col_offset=27), 'sub', Load(), lineno=700, col_offset=27), [Name('pattern', Load(), lineno=700, col_offset=34), Str('', lineno=700, col_offset=43), Name('manifest_buf', Load(), lineno=700, col_offset=47)], [], None, None, lineno=700, col_offset=27), lineno=700, col_offset=12), Assign([Name('pattern', Store(), lineno=701, col_offset=12)], Str('<dependentAssembly>\\s*</dependentAssembly>', lineno=701, col_offset=22), lineno=701, col_offset=12), Assign([Name('manifest_buf', Store(), lineno=702, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=702, col_offset=27), 'sub', Load(), lineno=702, col_offset=27), [Name('pattern', Load(), lineno=702, col_offset=34), Str('', lineno=702, col_offset=43), Name('manifest_buf', Load(), lineno=702, col_offset=47)], [], None, None, lineno=702, col_offset=27), lineno=702, col_offset=12), Assign([Name('manifest_f', Store(), lineno=703, col_offset=12)], Call(Name('open', Load(), lineno=703, col_offset=25), [Name('manifest_file', Load(), lineno=703, col_offset=30), Str('w', lineno=703, col_offset=45)], [], None, None, lineno=703, col_offset=25), lineno=703, col_offset=12), TryFinally([Expr(Call(Attribute(Name('manifest_f', Load(), lineno=705, col_offset=16), 'write', Load(), lineno=705, col_offset=16), [Name('manifest_buf', Load(), lineno=705, col_offset=33)], [], None, None, lineno=705, col_offset=16), lineno=705, col_offset=16)], [Expr(Call(Attribute(Name('manifest_f', Load(), lineno=707, col_offset=16), 'close', Load(), lineno=707, col_offset=16), [], [], None, None, lineno=707, col_offset=16), lineno=707, col_offset=16)], lineno=704, col_offset=12)], [ExceptHandler(Name('IOError', Load(), lineno=708, col_offset=15), None, [Pass( lineno=709, col_offset=12)], lineno=708, col_offset=8)], [], lineno=684, col_offset=8)], [], lineno=683, col_offset=4), FunctionDef('library_dir_option', arguments([Name('self', Param(), lineno=715, col_offset=27), Name('dir', Param(), lineno=715, col_offset=33)], None, None, []), [Return(BinOp(Str('/LIBPATH:', lineno=716, col_offset=15), Add(), Name('dir', Load(), lineno=716, col_offset=29), lineno=716, col_offset=15), lineno=716, col_offset=8)], [], lineno=715, col_offset=4), FunctionDef('runtime_library_dir_option', arguments([Name('self', Param(), lineno=718, col_offset=35), Name('dir', Param(), lineno=718, col_offset=41)], None, None, []), [Raise(Call(Name('DistutilsPlatformError', Load(), lineno=719, col_offset=14), [Str("don't know how to set runtime library search path for MSVC++", lineno=720, col_offset=14)], [], None, None, lineno=719, col_offset=14), None, None, lineno=719, col_offset=8)], [], lineno=718, col_offset=4), FunctionDef('library_option', arguments([Name('self', Param(), lineno=722, col_offset=23), Name('lib', Param(), lineno=722, col_offset=29)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=723, col_offset=15), 'library_filename', Load(), lineno=723, col_offset=15), [Name('lib', Load(), lineno=723, col_offset=37)], [], None, None, lineno=723, col_offset=15), lineno=723, col_offset=8)], [], lineno=722, col_offset=4), FunctionDef('find_library_file', arguments([Name('self', Param(), lineno=726, col_offset=26), Name('dirs', Param(), lineno=726, col_offset=32), Name('lib', Param(), lineno=726, col_offset=38), Name('debug', Param(), lineno=726, col_offset=43)], None, None, [Num(0, lineno=726, col_offset=49)]), [If(Name('debug', Load(), lineno=729, col_offset=11), [Assign([Name('try_names', Store(), lineno=730, col_offset=12)], List([BinOp(Name('lib', Load(), lineno=730, col_offset=25), Add(), Str('_d', lineno=730, col_offset=31), lineno=730, col_offset=25), Name('lib', Load(), lineno=730, col_offset=37)], Load(), lineno=730, col_offset=24), lineno=730, col_offset=12)], [Assign([Name('try_names', Store(), lineno=732, col_offset=12)], List([Name('lib', Load(), lineno=732, col_offset=25)], Load(), lineno=732, col_offset=24), lineno=732, col_offset=12)], lineno=729, col_offset=8), For(Name('dir', Store(), lineno=733, col_offset=12), Name('dirs', Load(), lineno=733, col_offset=19), [For(Name('name', Store(), lineno=734, col_offset=16), Name('try_names', Load(), lineno=734, col_offset=24), [Assign([Name('libfile', Store(), lineno=735, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=735, col_offset=26), 'path', Load(), lineno=735, col_offset=26), 'join', Load(), lineno=735, col_offset=26), [Name('dir', Load(), lineno=735, col_offset=39), Call(Attribute(Name('self', Load(), lineno=735, col_offset=44), 'library_filename', Load(), lineno=735, col_offset=44), [Name('name', Load(), lineno=735, col_offset=67)], [], None, None, lineno=735, col_offset=44)], [], None, None, lineno=735, col_offset=26), lineno=735, col_offset=16), If(Call(Attribute(Attribute(Name('os', Load(), lineno=736, col_offset=19), 'path', Load(), lineno=736, col_offset=19), 'exists', Load(), lineno=736, col_offset=19), [Name('libfile', Load(), lineno=736, col_offset=34)], [], None, None, lineno=736, col_offset=19), [Return(Name('libfile', Load(), lineno=737, col_offset=27), lineno=737, col_offset=20)], [], lineno=736, col_offset=16)], [], lineno=734, col_offset=12)], [Return(Name('None', Load(), lineno=740, col_offset=19), lineno=740, col_offset=12)], lineno=733, col_offset=8)], [], lineno=726, col_offset=4), FunctionDef('find_exe', arguments([Name('self', Param(), lineno=744, col_offset=17), Name('exe', Param(), lineno=744, col_offset=23)], None, None, []), [Expr(Str("Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        ", lineno=752, col_offset=-1), lineno=752, col_offset=-1), For(Name('p', Store(), lineno=753, col_offset=12), Attribute(Name('self', Load(), lineno=753, col_offset=17), '__paths', Load(), lineno=753, col_offset=17), [Assign([Name('fn', Store(), lineno=754, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=754, col_offset=17), 'path', Load(), lineno=754, col_offset=17), 'join', Load(), lineno=754, col_offset=17), [Call(Attribute(Attribute(Name('os', Load(), lineno=754, col_offset=30), 'path', Load(), lineno=754, col_offset=30), 'abspath', Load(), lineno=754, col_offset=30), [Name('p', Load(), lineno=754, col_offset=46)], [], None, None, lineno=754, col_offset=30), Name('exe', Load(), lineno=754, col_offset=50)], [], None, None, lineno=754, col_offset=17), lineno=754, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=755, col_offset=15), 'path', Load(), lineno=755, col_offset=15), 'isfile', Load(), lineno=755, col_offset=15), [Name('fn', Load(), lineno=755, col_offset=30)], [], None, None, lineno=755, col_offset=15), [Return(Name('fn', Load(), lineno=756, col_offset=23), lineno=756, col_offset=16)], [], lineno=755, col_offset=12)], [], lineno=753, col_offset=8), For(Name('p', Store(), lineno=759, col_offset=12), Call(Attribute(Subscript(Attribute(Name('os', Load(), lineno=759, col_offset=17), 'environ', Load(), lineno=759, col_offset=17), Index(Str('Path', lineno=759, col_offset=28)), Load(), lineno=759, col_offset=17), 'split', Load(), lineno=759, col_offset=17), [Str(';', lineno=759, col_offset=42)], [], None, None, lineno=759, col_offset=17), [Assign([Name('fn', Store(), lineno=760, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=760, col_offset=17), 'path', Load(), lineno=760, col_offset=17), 'join', Load(), lineno=760, col_offset=17), [Call(Attribute(Attribute(Name('os', Load(), lineno=760, col_offset=30), 'path', Load(), lineno=760, col_offset=30), 'abspath', Load(), lineno=760, col_offset=30), [Name('p', Load(), lineno=760, col_offset=46)], [], None, None, lineno=760, col_offset=30), Name('exe', Load(), lineno=760, col_offset=49)], [], None, None, lineno=760, col_offset=17), lineno=760, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=761, col_offset=15), 'path', Load(), lineno=761, col_offset=15), 'isfile', Load(), lineno=761, col_offset=15), [Name('fn', Load(), lineno=761, col_offset=30)], [], None, None, lineno=761, col_offset=15), [Return(Name('fn', Load(), lineno=762, col_offset=23), lineno=762, col_offset=16)], [], lineno=761, col_offset=12)], [], lineno=759, col_offset=8), Return(Name('exe', Load(), lineno=764, col_offset=15), lineno=764, col_offset=8)], [], lineno=744, col_offset=4)], [], lineno=309, col_offset=0)])
