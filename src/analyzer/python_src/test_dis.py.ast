Module([ImportFrom('test.test_support', [alias('run_unittest', None)], 0, lineno=3, col_offset=0), Import([alias('unittest', None)], lineno=4, col_offset=0), Import([alias('sys', None)], lineno=5, col_offset=0), Import([alias('dis', None)], lineno=6, col_offset=0), Import([alias('StringIO', None)], lineno=7, col_offset=0), FunctionDef('_f', arguments([Name('a', Param(), lineno=10, col_offset=7)], None, None, []), [Print(None, [Name('a', Load(), lineno=11, col_offset=10)], True, lineno=11, col_offset=4), Return(Num(1, lineno=12, col_offset=11), lineno=12, col_offset=4)], [], lineno=10, col_offset=0), Assign([Name('dis_f', Store(), lineno=14, col_offset=0)], BinOp(Str(' %-4d         0 LOAD_FAST                0 (a)\n              3 PRINT_ITEM\n              4 PRINT_NEWLINE\n\n %-4d         5 LOAD_CONST               1 (1)\n              8 RETURN_VALUE\n', lineno=21, col_offset=-1), Mod(), Tuple([BinOp(Attribute(Attribute(Name('_f', Load(), lineno=21, col_offset=5), 'func_code', Load(), lineno=21, col_offset=5), 'co_firstlineno', Load(), lineno=21, col_offset=5), Add(), Num(1, lineno=21, col_offset=35), lineno=21, col_offset=5), BinOp(Attribute(Attribute(Name('_f', Load(), lineno=22, col_offset=5), 'func_code', Load(), lineno=22, col_offset=5), 'co_firstlineno', Load(), lineno=22, col_offset=5), Add(), Num(2, lineno=22, col_offset=35), lineno=22, col_offset=5)], Load(), lineno=21, col_offset=5), lineno=21, col_offset=-1), lineno=14, col_offset=0), FunctionDef('bug708901', arguments([], None, None, []), [For(Name('res', Store(), lineno=26, col_offset=8), Call(Name('range', Load(), lineno=26, col_offset=15), [Num(1, lineno=26, col_offset=21), Num(10, lineno=27, col_offset=21)], [], None, None, lineno=26, col_offset=15), [Pass( lineno=28, col_offset=8)], [], lineno=26, col_offset=4)], [], lineno=25, col_offset=0), Assign([Name('dis_bug708901', Store(), lineno=30, col_offset=0)], BinOp(Str(' %-4d         0 SETUP_LOOP              23 (to 26)\n              3 LOAD_GLOBAL              0 (range)\n              6 LOAD_CONST               1 (1)\n\n %-4d         9 LOAD_CONST               2 (10)\n             12 CALL_FUNCTION            2\n             15 GET_ITER\n        >>   16 FOR_ITER                 6 (to 25)\n             19 STORE_FAST               0 (res)\n\n %-4d        22 JUMP_ABSOLUTE           16\n        >>   25 POP_BLOCK\n        >>   26 LOAD_CONST               0 (None)\n             29 RETURN_VALUE\n', lineno=45, col_offset=-1), Mod(), Tuple([BinOp(Attribute(Attribute(Name('bug708901', Load(), lineno=45, col_offset=5), 'func_code', Load(), lineno=45, col_offset=5), 'co_firstlineno', Load(), lineno=45, col_offset=5), Add(), Num(1, lineno=45, col_offset=42), lineno=45, col_offset=5), BinOp(Attribute(Attribute(Name('bug708901', Load(), lineno=46, col_offset=5), 'func_code', Load(), lineno=46, col_offset=5), 'co_firstlineno', Load(), lineno=46, col_offset=5), Add(), Num(2, lineno=46, col_offset=42), lineno=46, col_offset=5), BinOp(Attribute(Attribute(Name('bug708901', Load(), lineno=47, col_offset=5), 'func_code', Load(), lineno=47, col_offset=5), 'co_firstlineno', Load(), lineno=47, col_offset=5), Add(), Num(3, lineno=47, col_offset=42), lineno=47, col_offset=5)], Load(), lineno=45, col_offset=5), lineno=45, col_offset=-1), lineno=30, col_offset=0), FunctionDef('bug1333982', arguments([Name('x', Param(), lineno=50, col_offset=15)], None, None, [List([], Load(), lineno=50, col_offset=17)]), [Assert(Num(0, lineno=51, col_offset=11), BinOp(ListComp(Name('s', Load(), lineno=51, col_offset=16), [comprehension(Name('s', Store(), lineno=51, col_offset=22), Name('x', Load(), lineno=51, col_offset=27), [])], lineno=51, col_offset=16), Add(), Num(1, lineno=52, col_offset=14), lineno=51, col_offset=15), lineno=51, col_offset=4), Pass( lineno=53, col_offset=4)], [], lineno=50, col_offset=0), Assign([Name('dis_bug1333982', Store(), lineno=55, col_offset=0)], BinOp(Str(' %-4d         0 LOAD_CONST               1 (0)\n              3 POP_JUMP_IF_TRUE        38\n              6 LOAD_GLOBAL              0 (AssertionError)\n              9 BUILD_LIST               0\n             12 LOAD_FAST                0 (x)\n             15 GET_ITER\n        >>   16 FOR_ITER                12 (to 31)\n             19 STORE_FAST               1 (s)\n             22 LOAD_FAST                1 (s)\n             25 LIST_APPEND              2\n             28 JUMP_ABSOLUTE           16\n\n %-4d   >>   31 LOAD_CONST               2 (1)\n             34 BINARY_ADD\n             35 RAISE_VARARGS            2\n\n %-4d   >>   38 LOAD_CONST               0 (None)\n             41 RETURN_VALUE\n', lineno=74, col_offset=-1), Mod(), Tuple([BinOp(Attribute(Attribute(Name('bug1333982', Load(), lineno=74, col_offset=5), 'func_code', Load(), lineno=74, col_offset=5), 'co_firstlineno', Load(), lineno=74, col_offset=5), Add(), Num(1, lineno=74, col_offset=43), lineno=74, col_offset=5), BinOp(Attribute(Attribute(Name('bug1333982', Load(), lineno=75, col_offset=5), 'func_code', Load(), lineno=75, col_offset=5), 'co_firstlineno', Load(), lineno=75, col_offset=5), Add(), Num(2, lineno=75, col_offset=43), lineno=75, col_offset=5), BinOp(Attribute(Attribute(Name('bug1333982', Load(), lineno=76, col_offset=5), 'func_code', Load(), lineno=76, col_offset=5), 'co_firstlineno', Load(), lineno=76, col_offset=5), Add(), Num(3, lineno=76, col_offset=43), lineno=76, col_offset=5)], Load(), lineno=74, col_offset=5), lineno=74, col_offset=-1), lineno=55, col_offset=0), Assign([Name('_BIG_LINENO_FORMAT', Store(), lineno=78, col_offset=0)], Str('%3d           0 LOAD_GLOBAL              0 (spam)\n              3 POP_TOP\n              4 LOAD_CONST               0 (None)\n              7 RETURN_VALUE\n', lineno=83, col_offset=-1), lineno=78, col_offset=0), ClassDef('DisTests', [Attribute(Name('unittest', Load(), lineno=85, col_offset=15), 'TestCase', Load(), lineno=85, col_offset=15)], [FunctionDef('do_disassembly_test', arguments([Name('self', Param(), lineno=86, col_offset=28), Name('func', Param(), lineno=86, col_offset=34), Name('expected', Param(), lineno=86, col_offset=40)], None, None, []), [Assign([Name('s', Store(), lineno=87, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=87, col_offset=12), 'StringIO', Load(), lineno=87, col_offset=12), [], [], None, None, lineno=87, col_offset=12), lineno=87, col_offset=8), Assign([Name('save_stdout', Store(), lineno=88, col_offset=8)], Attribute(Name('sys', Load(), lineno=88, col_offset=22), 'stdout', Load(), lineno=88, col_offset=22), lineno=88, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=89, col_offset=8), 'stdout', Store(), lineno=89, col_offset=8)], Name('s', Load(), lineno=89, col_offset=21), lineno=89, col_offset=8), Expr(Call(Attribute(Name('dis', Load(), lineno=90, col_offset=8), 'dis', Load(), lineno=90, col_offset=8), [Name('func', Load(), lineno=90, col_offset=16)], [], None, None, lineno=90, col_offset=8), lineno=90, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=91, col_offset=8), 'stdout', Store(), lineno=91, col_offset=8)], Name('save_stdout', Load(), lineno=91, col_offset=21), lineno=91, col_offset=8), Assign([Name('got', Store(), lineno=92, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=92, col_offset=14), 'getvalue', Load(), lineno=92, col_offset=14), [], [], None, None, lineno=92, col_offset=14), lineno=92, col_offset=8), Assign([Name('lines', Store(), lineno=94, col_offset=8)], Call(Attribute(Name('got', Load(), lineno=94, col_offset=16), 'split', Load(), lineno=94, col_offset=16), [Str('\n', lineno=94, col_offset=26)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=8), Assign([Name('lines', Store(), lineno=95, col_offset=8)], ListComp(Call(Attribute(Name('line', Load(), lineno=95, col_offset=17), 'rstrip', Load(), lineno=95, col_offset=17), [], [], None, None, lineno=95, col_offset=17), [comprehension(Name('line', Store(), lineno=95, col_offset=35), Name('lines', Load(), lineno=95, col_offset=43), [])], lineno=95, col_offset=17), lineno=95, col_offset=8), Assign([Name('expected', Store(), lineno=96, col_offset=8)], Call(Attribute(Name('expected', Load(), lineno=96, col_offset=19), 'split', Load(), lineno=96, col_offset=19), [Str('\n', lineno=96, col_offset=34)], [], None, None, lineno=96, col_offset=19), lineno=96, col_offset=8), Import([alias('difflib', None)], lineno=97, col_offset=8), If(Compare(Name('expected', Load(), lineno=98, col_offset=11), [NotEq()], [Name('lines', Load(), lineno=98, col_offset=23)], lineno=98, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=12), 'fail', Load(), lineno=99, col_offset=12), [BinOp(Str('events did not match expectation:\n', lineno=100, col_offset=16), Add(), Call(Attribute(Str('\n', lineno=101, col_offset=16), 'join', Load(), lineno=101, col_offset=16), [Call(Attribute(Name('difflib', Load(), lineno=101, col_offset=26), 'ndiff', Load(), lineno=101, col_offset=26), [Name('expected', Load(), lineno=101, col_offset=40), Name('lines', Load(), lineno=102, col_offset=40)], [], None, None, lineno=101, col_offset=26)], [], None, None, lineno=101, col_offset=16), lineno=100, col_offset=16)], [], None, None, lineno=99, col_offset=12), lineno=99, col_offset=12)], [], lineno=98, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('test_opmap', arguments([Name('self', Param(), lineno=104, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=105, col_offset=8), 'assertEqual', Load(), lineno=105, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=105, col_offset=25), 'opmap', Load(), lineno=105, col_offset=25), Index(Str('STOP_CODE', lineno=105, col_offset=35)), Load(), lineno=105, col_offset=25), Num(0, lineno=105, col_offset=49)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=8), 'assertIn', Load(), lineno=106, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=106, col_offset=22), 'opmap', Load(), lineno=106, col_offset=22), Index(Str('LOAD_CONST', lineno=106, col_offset=32)), Load(), lineno=106, col_offset=22), Attribute(Name('dis', Load(), lineno=106, col_offset=47), 'hasconst', Load(), lineno=106, col_offset=47)], [], None, None, lineno=106, col_offset=8), lineno=106, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=107, col_offset=8), 'assertIn', Load(), lineno=107, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=107, col_offset=22), 'opmap', Load(), lineno=107, col_offset=22), Index(Str('STORE_NAME', lineno=107, col_offset=32)), Load(), lineno=107, col_offset=22), Attribute(Name('dis', Load(), lineno=107, col_offset=47), 'hasname', Load(), lineno=107, col_offset=47)], [], None, None, lineno=107, col_offset=8), lineno=107, col_offset=8)], [], lineno=104, col_offset=4), FunctionDef('test_opname', arguments([Name('self', Param(), lineno=109, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=8), 'assertEqual', Load(), lineno=110, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=110, col_offset=25), 'opname', Load(), lineno=110, col_offset=25), Index(Subscript(Attribute(Name('dis', Load(), lineno=110, col_offset=36), 'opmap', Load(), lineno=110, col_offset=36), Index(Str('LOAD_FAST', lineno=110, col_offset=46)), Load(), lineno=110, col_offset=36)), Load(), lineno=110, col_offset=25), Str('LOAD_FAST', lineno=110, col_offset=61)], [], None, None, lineno=110, col_offset=8), lineno=110, col_offset=8)], [], lineno=109, col_offset=4), FunctionDef('test_boundaries', arguments([Name('self', Param(), lineno=112, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=113, col_offset=8), 'assertEqual', Load(), lineno=113, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=113, col_offset=25), 'opmap', Load(), lineno=113, col_offset=25), Index(Str('EXTENDED_ARG', lineno=113, col_offset=35)), Load(), lineno=113, col_offset=25), Attribute(Name('dis', Load(), lineno=113, col_offset=52), 'EXTENDED_ARG', Load(), lineno=113, col_offset=52)], [], None, None, lineno=113, col_offset=8), lineno=113, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=114, col_offset=8), 'assertEqual', Load(), lineno=114, col_offset=8), [Subscript(Attribute(Name('dis', Load(), lineno=114, col_offset=25), 'opmap', Load(), lineno=114, col_offset=25), Index(Str('STORE_NAME', lineno=114, col_offset=35)), Load(), lineno=114, col_offset=25), Attribute(Name('dis', Load(), lineno=114, col_offset=50), 'HAVE_ARGUMENT', Load(), lineno=114, col_offset=50)], [], None, None, lineno=114, col_offset=8), lineno=114, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('test_dis', arguments([Name('self', Param(), lineno=116, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=117, col_offset=8), 'do_disassembly_test', Load(), lineno=117, col_offset=8), [Name('_f', Load(), lineno=117, col_offset=33), Name('dis_f', Load(), lineno=117, col_offset=37)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=8)], [], lineno=116, col_offset=4), FunctionDef('test_bug_708901', arguments([Name('self', Param(), lineno=119, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=120, col_offset=8), 'do_disassembly_test', Load(), lineno=120, col_offset=8), [Name('bug708901', Load(), lineno=120, col_offset=33), Name('dis_bug708901', Load(), lineno=120, col_offset=44)], [], None, None, lineno=120, col_offset=8), lineno=120, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('test_bug_1333982', arguments([Name('self', Param(), lineno=122, col_offset=25)], None, None, []), [If(Name('__debug__', Load(), lineno=125, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=126, col_offset=12), 'do_disassembly_test', Load(), lineno=126, col_offset=12), [Name('bug1333982', Load(), lineno=126, col_offset=37), Name('dis_bug1333982', Load(), lineno=126, col_offset=49)], [], None, None, lineno=126, col_offset=12), lineno=126, col_offset=12)], [], lineno=125, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('test_big_linenos', arguments([Name('self', Param(), lineno=128, col_offset=25)], None, None, []), [FunctionDef('func', arguments([Name('count', Param(), lineno=129, col_offset=17)], None, None, []), [Assign([Name('namespace', Store(), lineno=130, col_offset=12)], Dict([], [], lineno=130, col_offset=24), lineno=130, col_offset=12), Assign([Name('func', Store(), lineno=131, col_offset=12)], BinOp(Str('def foo():\n ', lineno=131, col_offset=19), Add(), Call(Attribute(Str('', lineno=131, col_offset=37), 'join', Load(), lineno=131, col_offset=37), [BinOp(BinOp(List([Str('\n ', lineno=131, col_offset=46)], Load(), lineno=131, col_offset=45), Mult(), Name('count', Load(), lineno=131, col_offset=55), lineno=131, col_offset=45), Add(), List([Str('spam\n', lineno=131, col_offset=64)], Load(), lineno=131, col_offset=63), lineno=131, col_offset=45)], [], None, None, lineno=131, col_offset=37), lineno=131, col_offset=19), lineno=131, col_offset=12), Exec(Name('func', Load(), lineno=132, col_offset=17), Name('namespace', Load(), lineno=132, col_offset=25), None, lineno=132, col_offset=12), Return(Subscript(Name('namespace', Load(), lineno=133, col_offset=19), Index(Str('foo', lineno=133, col_offset=29)), Load(), lineno=133, col_offset=19), lineno=133, col_offset=12)], [], lineno=129, col_offset=8), For(Name('i', Store(), lineno=136, col_offset=12), Call(Name('xrange', Load(), lineno=136, col_offset=17), [Num(1, lineno=136, col_offset=24), Num(300, lineno=136, col_offset=27)], [], None, None, lineno=136, col_offset=17), [Assign([Name('expected', Store(), lineno=137, col_offset=12)], BinOp(Name('_BIG_LINENO_FORMAT', Load(), lineno=137, col_offset=23), Mod(), BinOp(Name('i', Load(), lineno=137, col_offset=45), Add(), Num(2, lineno=137, col_offset=49), lineno=137, col_offset=45), lineno=137, col_offset=23), lineno=137, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=12), 'do_disassembly_test', Load(), lineno=138, col_offset=12), [Call(Name('func', Load(), lineno=138, col_offset=37), [Name('i', Load(), lineno=138, col_offset=42)], [], None, None, lineno=138, col_offset=37), Name('expected', Load(), lineno=138, col_offset=46)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12)], [], lineno=136, col_offset=8), For(Name('i', Store(), lineno=141, col_offset=12), Call(Name('xrange', Load(), lineno=141, col_offset=17), [Num(300, lineno=141, col_offset=24), Num(5000, lineno=141, col_offset=29), Num(10, lineno=141, col_offset=35)], [], None, None, lineno=141, col_offset=17), [Assign([Name('expected', Store(), lineno=142, col_offset=12)], BinOp(Name('_BIG_LINENO_FORMAT', Load(), lineno=142, col_offset=23), Mod(), BinOp(Name('i', Load(), lineno=142, col_offset=45), Add(), Num(2, lineno=142, col_offset=49), lineno=142, col_offset=45), lineno=142, col_offset=23), lineno=142, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=143, col_offset=12), 'do_disassembly_test', Load(), lineno=143, col_offset=12), [Call(Name('func', Load(), lineno=143, col_offset=37), [Name('i', Load(), lineno=143, col_offset=42)], [], None, None, lineno=143, col_offset=37), Name('expected', Load(), lineno=143, col_offset=46)], [], None, None, lineno=143, col_offset=12), lineno=143, col_offset=12)], [], lineno=141, col_offset=8)], [], lineno=128, col_offset=4)], [], lineno=85, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=146, col_offset=4), [Name('DisTests', Load(), lineno=146, col_offset=17)], [], None, None, lineno=146, col_offset=4), lineno=146, col_offset=4)], [], lineno=145, col_offset=0), If(Compare(Name('__name__', Load(), lineno=149, col_offset=3), [Eq()], [Str('__main__', lineno=149, col_offset=15)], lineno=149, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=150, col_offset=4), [], [], None, None, lineno=150, col_offset=4), lineno=150, col_offset=4)], [], lineno=149, col_offset=0)])
