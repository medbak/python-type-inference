Module([Expr(Str('PyUnit testing against strptime', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('time', None)], lineno=4, col_offset=0), Import([alias('locale', None)], lineno=5, col_offset=0), Import([alias('re', None)], lineno=6, col_offset=0), Import([alias('sys', None)], lineno=7, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=8, col_offset=0), ImportFrom('datetime', [alias('date', 'datetime_date')], 0, lineno=9, col_offset=0), Import([alias('_strptime', None)], lineno=11, col_offset=0), ClassDef('getlang_Tests', [Attribute(Name('unittest', Load(), lineno=13, col_offset=20), 'TestCase', Load(), lineno=13, col_offset=20)], [Expr(Str('Test _getlang', lineno=14, col_offset=4), lineno=14, col_offset=4), FunctionDef('test_basic', arguments([Name('self', Param(), lineno=15, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=8), 'assertEqual', Load(), lineno=16, col_offset=8), [Call(Attribute(Name('_strptime', Load(), lineno=16, col_offset=25), '_getlang', Load(), lineno=16, col_offset=25), [], [], None, None, lineno=16, col_offset=25), Call(Attribute(Name('locale', Load(), lineno=16, col_offset=47), 'getlocale', Load(), lineno=16, col_offset=47), [Attribute(Name('locale', Load(), lineno=16, col_offset=64), 'LC_TIME', Load(), lineno=16, col_offset=64)], [], None, None, lineno=16, col_offset=47)], [], None, None, lineno=16, col_offset=8), lineno=16, col_offset=8)], [], lineno=15, col_offset=4)], [], lineno=13, col_offset=0), ClassDef('LocaleTime_Tests', [Attribute(Name('unittest', Load(), lineno=18, col_offset=23), 'TestCase', Load(), lineno=18, col_offset=23)], [Expr(Str('Tests for _strptime.LocaleTime.\n\n    All values are lower-cased when stored in LocaleTime, so make sure to\n    compare values after running ``lower`` on them.\n\n    ', lineno=24, col_offset=-1), lineno=24, col_offset=-1), FunctionDef('setUp', arguments([Name('self', Param(), lineno=26, col_offset=14)], None, None, []), [Expr(Str('Create time tuple based on current time.', lineno=27, col_offset=8), lineno=27, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=28, col_offset=8), 'time_tuple', Store(), lineno=28, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=28, col_offset=26), 'localtime', Load(), lineno=28, col_offset=26), [], [], None, None, lineno=28, col_offset=26), lineno=28, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=29, col_offset=8), 'LT_ins', Store(), lineno=29, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=29, col_offset=22), 'LocaleTime', Load(), lineno=29, col_offset=22), [], [], None, None, lineno=29, col_offset=22), lineno=29, col_offset=8)], [], lineno=26, col_offset=4), FunctionDef('compare_against_time', arguments([Name('self', Param(), lineno=31, col_offset=29), Name('testing', Param(), lineno=31, col_offset=35), Name('directive', Param(), lineno=31, col_offset=44), Name('tuple_position', Param(), lineno=31, col_offset=55), Name('error_msg', Param(), lineno=32, col_offset=29)], None, None, []), [Expr(Str('Helper method that tests testing against directive based on the\n        tuple_position of time_tuple.  Uses error_msg as error message.\n\n        ', lineno=36, col_offset=-1), lineno=36, col_offset=-1), Assign([Name('strftime_output', Store(), lineno=37, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=37, col_offset=26), 'strftime', Load(), lineno=37, col_offset=26), [Name('directive', Load(), lineno=37, col_offset=40), Attribute(Name('self', Load(), lineno=37, col_offset=51), 'time_tuple', Load(), lineno=37, col_offset=51)], [], None, None, lineno=37, col_offset=26), 'lower', Load(), lineno=37, col_offset=26), [], [], None, None, lineno=37, col_offset=26), lineno=37, col_offset=8), Assign([Name('comparison', Store(), lineno=38, col_offset=8)], Subscript(Name('testing', Load(), lineno=38, col_offset=21), Index(Subscript(Attribute(Name('self', Load(), lineno=38, col_offset=29), 'time_tuple', Load(), lineno=38, col_offset=29), Index(Name('tuple_position', Load(), lineno=38, col_offset=45)), Load(), lineno=38, col_offset=29)), Load(), lineno=38, col_offset=21), lineno=38, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=8), 'assertIn', Load(), lineno=39, col_offset=8), [Name('strftime_output', Load(), lineno=39, col_offset=22), Name('testing', Load(), lineno=39, col_offset=39), BinOp(Str('%s: not found in tuple', lineno=40, col_offset=22), Mod(), Name('error_msg', Load(), lineno=40, col_offset=49), lineno=40, col_offset=22)], [], None, None, lineno=39, col_offset=8), lineno=39, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=41, col_offset=8), 'assertTrue', Load(), lineno=41, col_offset=8), [Compare(Name('comparison', Load(), lineno=41, col_offset=24), [Eq()], [Name('strftime_output', Load(), lineno=41, col_offset=38)], lineno=41, col_offset=24), BinOp(Str('%s: position within tuple incorrect; %s != %s', lineno=42, col_offset=24), Mod(), Tuple([Name('error_msg', Load(), lineno=43, col_offset=25), Name('comparison', Load(), lineno=43, col_offset=36), Name('strftime_output', Load(), lineno=43, col_offset=48)], Load(), lineno=43, col_offset=25), lineno=42, col_offset=24)], [], None, None, lineno=41, col_offset=8), lineno=41, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('test_weekday', arguments([Name('self', Param(), lineno=45, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), 'compare_against_time', Load(), lineno=48, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=48, col_offset=34), 'LT_ins', Load(), lineno=48, col_offset=34), 'f_weekday', Load(), lineno=48, col_offset=34), Str('%A', lineno=48, col_offset=57), Num(6, lineno=48, col_offset=63), Str('Testing of full weekday name failed', lineno=49, col_offset=34)], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=50, col_offset=8), 'compare_against_time', Load(), lineno=50, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=50, col_offset=34), 'LT_ins', Load(), lineno=50, col_offset=34), 'a_weekday', Load(), lineno=50, col_offset=34), Str('%a', lineno=50, col_offset=57), Num(6, lineno=50, col_offset=63), Str('Testing of abbreviated weekday name failed', lineno=51, col_offset=34)], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('test_month', arguments([Name('self', Param(), lineno=53, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=56, col_offset=8), 'compare_against_time', Load(), lineno=56, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=56, col_offset=34), 'LT_ins', Load(), lineno=56, col_offset=34), 'f_month', Load(), lineno=56, col_offset=34), Str('%B', lineno=56, col_offset=55), Num(1, lineno=56, col_offset=61), Str('Testing against full month name failed', lineno=57, col_offset=34)], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=8), 'compare_against_time', Load(), lineno=58, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=58, col_offset=34), 'LT_ins', Load(), lineno=58, col_offset=34), 'a_month', Load(), lineno=58, col_offset=34), Str('%b', lineno=58, col_offset=55), Num(1, lineno=58, col_offset=61), Str('Testing against abbreviated month name failed', lineno=59, col_offset=34)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('test_am_pm', arguments([Name('self', Param(), lineno=61, col_offset=19)], None, None, []), [Assign([Name('strftime_output', Store(), lineno=63, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=63, col_offset=26), 'strftime', Load(), lineno=63, col_offset=26), [Str('%p', lineno=63, col_offset=40), Attribute(Name('self', Load(), lineno=63, col_offset=46), 'time_tuple', Load(), lineno=63, col_offset=46)], [], None, None, lineno=63, col_offset=26), 'lower', Load(), lineno=63, col_offset=26), [], [], None, None, lineno=63, col_offset=26), lineno=63, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=8), 'assertIn', Load(), lineno=64, col_offset=8), [Name('strftime_output', Load(), lineno=64, col_offset=22), Attribute(Attribute(Name('self', Load(), lineno=64, col_offset=39), 'LT_ins', Load(), lineno=64, col_offset=39), 'am_pm', Load(), lineno=64, col_offset=39), Str('AM/PM representation not in tuple', lineno=65, col_offset=22)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8), If(Compare(Subscript(Attribute(Name('self', Load(), lineno=66, col_offset=11), 'time_tuple', Load(), lineno=66, col_offset=11), Index(Num(3, lineno=66, col_offset=27)), Load(), lineno=66, col_offset=11), [Lt()], [Num(12, lineno=66, col_offset=32)], lineno=66, col_offset=11), [Assign([Name('position', Store(), lineno=66, col_offset=36)], Num(0, lineno=66, col_offset=47), lineno=66, col_offset=36)], [Assign([Name('position', Store(), lineno=67, col_offset=14)], Num(1, lineno=67, col_offset=25), lineno=67, col_offset=14)], lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertTrue', Load(), lineno=68, col_offset=8), [Compare(Name('strftime_output', Load(), lineno=68, col_offset=24), [Eq()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=68, col_offset=43), 'LT_ins', Load(), lineno=68, col_offset=43), 'am_pm', Load(), lineno=68, col_offset=43), Index(Name('position', Load(), lineno=68, col_offset=61)), Load(), lineno=68, col_offset=43)], lineno=68, col_offset=24), Str('AM/PM representation in the wrong position within the tuple', lineno=69, col_offset=24)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('test_timezone', arguments([Name('self', Param(), lineno=71, col_offset=22)], None, None, []), [Assign([Name('timezone', Store(), lineno=73, col_offset=8)], Call(Attribute(Call(Attribute(Name('time', Load(), lineno=73, col_offset=19), 'strftime', Load(), lineno=73, col_offset=19), [Str('%Z', lineno=73, col_offset=33), Attribute(Name('self', Load(), lineno=73, col_offset=39), 'time_tuple', Load(), lineno=73, col_offset=39)], [], None, None, lineno=73, col_offset=19), 'lower', Load(), lineno=73, col_offset=19), [], [], None, None, lineno=73, col_offset=19), lineno=73, col_offset=8), If(Name('timezone', Load(), lineno=74, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=12), 'assertTrue', Load(), lineno=75, col_offset=12), [BoolOp(Or(), [Compare(Name('timezone', Load(), lineno=75, col_offset=28), [In()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=75, col_offset=40), 'LT_ins', Load(), lineno=75, col_offset=40), 'timezone', Load(), lineno=75, col_offset=40), Index(Num(0, lineno=75, col_offset=61)), Load(), lineno=75, col_offset=40)], lineno=75, col_offset=28), Compare(Name('timezone', Load(), lineno=76, col_offset=28), [In()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=76, col_offset=40), 'LT_ins', Load(), lineno=76, col_offset=40), 'timezone', Load(), lineno=76, col_offset=40), Index(Num(1, lineno=76, col_offset=61)), Load(), lineno=76, col_offset=40)], lineno=76, col_offset=28)], lineno=75, col_offset=28), BinOp(Str('timezone %s not found in %s', lineno=77, col_offset=28), Mod(), Tuple([Name('timezone', Load(), lineno=78, col_offset=29), Attribute(Attribute(Name('self', Load(), lineno=78, col_offset=39), 'LT_ins', Load(), lineno=78, col_offset=39), 'timezone', Load(), lineno=78, col_offset=39)], Load(), lineno=78, col_offset=29), lineno=77, col_offset=28)], [], None, None, lineno=75, col_offset=12), lineno=75, col_offset=12)], [], lineno=74, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('test_date_time', arguments([Name('self', Param(), lineno=80, col_offset=23)], None, None, []), [Assign([Name('magic_date', Store(), lineno=87, col_offset=8)], Tuple([Num(1999, lineno=87, col_offset=22), Num(3, lineno=87, col_offset=28), Num(17, lineno=87, col_offset=31), Num(22, lineno=87, col_offset=35), Num(44, lineno=87, col_offset=39), Num(55, lineno=87, col_offset=43), Num(2, lineno=87, col_offset=47), Num(76, lineno=87, col_offset=50), Num(0, lineno=87, col_offset=54)], Load(), lineno=87, col_offset=22), lineno=87, col_offset=8), Assign([Name('strftime_output', Store(), lineno=88, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=88, col_offset=26), 'strftime', Load(), lineno=88, col_offset=26), [Str('%c', lineno=88, col_offset=40), Name('magic_date', Load(), lineno=88, col_offset=46)], [], None, None, lineno=88, col_offset=26), lineno=88, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=89, col_offset=8), 'assertTrue', Load(), lineno=89, col_offset=8), [Compare(Name('strftime_output', Load(), lineno=89, col_offset=24), [Eq()], [Call(Attribute(Name('time', Load(), lineno=89, col_offset=43), 'strftime', Load(), lineno=89, col_offset=43), [Attribute(Attribute(Name('self', Load(), lineno=89, col_offset=57), 'LT_ins', Load(), lineno=89, col_offset=57), 'LC_date_time', Load(), lineno=89, col_offset=57), Name('magic_date', Load(), lineno=90, col_offset=57)], [], None, None, lineno=89, col_offset=43)], lineno=89, col_offset=24), Str('LC_date_time incorrect', lineno=91, col_offset=24)], [], None, None, lineno=89, col_offset=8), lineno=89, col_offset=8), Assign([Name('strftime_output', Store(), lineno=92, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=92, col_offset=26), 'strftime', Load(), lineno=92, col_offset=26), [Str('%x', lineno=92, col_offset=40), Name('magic_date', Load(), lineno=92, col_offset=46)], [], None, None, lineno=92, col_offset=26), lineno=92, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=93, col_offset=8), 'assertTrue', Load(), lineno=93, col_offset=8), [Compare(Name('strftime_output', Load(), lineno=93, col_offset=24), [Eq()], [Call(Attribute(Name('time', Load(), lineno=93, col_offset=43), 'strftime', Load(), lineno=93, col_offset=43), [Attribute(Attribute(Name('self', Load(), lineno=93, col_offset=57), 'LT_ins', Load(), lineno=93, col_offset=57), 'LC_date', Load(), lineno=93, col_offset=57), Name('magic_date', Load(), lineno=94, col_offset=57)], [], None, None, lineno=93, col_offset=43)], lineno=93, col_offset=24), Str('LC_date incorrect', lineno=95, col_offset=24)], [], None, None, lineno=93, col_offset=8), lineno=93, col_offset=8), Assign([Name('strftime_output', Store(), lineno=96, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=96, col_offset=26), 'strftime', Load(), lineno=96, col_offset=26), [Str('%X', lineno=96, col_offset=40), Name('magic_date', Load(), lineno=96, col_offset=46)], [], None, None, lineno=96, col_offset=26), lineno=96, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'assertTrue', Load(), lineno=97, col_offset=8), [Compare(Name('strftime_output', Load(), lineno=97, col_offset=24), [Eq()], [Call(Attribute(Name('time', Load(), lineno=97, col_offset=43), 'strftime', Load(), lineno=97, col_offset=43), [Attribute(Attribute(Name('self', Load(), lineno=97, col_offset=57), 'LT_ins', Load(), lineno=97, col_offset=57), 'LC_time', Load(), lineno=97, col_offset=57), Name('magic_date', Load(), lineno=98, col_offset=57)], [], None, None, lineno=97, col_offset=43)], lineno=97, col_offset=24), Str('LC_time incorrect', lineno=99, col_offset=24)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Name('LT', Store(), lineno=100, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=100, col_offset=13), 'LocaleTime', Load(), lineno=100, col_offset=13), [], [], None, None, lineno=100, col_offset=13), lineno=100, col_offset=8), Assign([Attribute(Name('LT', Load(), lineno=101, col_offset=8), 'am_pm', Store(), lineno=101, col_offset=8)], Tuple([Str('', lineno=101, col_offset=20), Str('', lineno=101, col_offset=24)], Load(), lineno=101, col_offset=20), lineno=101, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=102, col_offset=8), 'assertTrue', Load(), lineno=102, col_offset=8), [Attribute(Name('LT', Load(), lineno=102, col_offset=24), 'LC_time', Load(), lineno=102, col_offset=24), Str("LocaleTime's LC directives cannot handle empty strings", lineno=102, col_offset=36)], [], None, None, lineno=102, col_offset=8), lineno=102, col_offset=8)], [], lineno=80, col_offset=4), FunctionDef('test_lang', arguments([Name('self', Param(), lineno=105, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=108, col_offset=8), 'assertEqual', Load(), lineno=108, col_offset=8), [Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=25), 'LT_ins', Load(), lineno=108, col_offset=25), 'lang', Load(), lineno=108, col_offset=25), Call(Attribute(Name('_strptime', Load(), lineno=108, col_offset=43), '_getlang', Load(), lineno=108, col_offset=43), [], [], None, None, lineno=108, col_offset=43)], [], None, None, lineno=108, col_offset=8), lineno=108, col_offset=8)], [], lineno=105, col_offset=4)], [], lineno=18, col_offset=0), ClassDef('TimeRETests', [Attribute(Name('unittest', Load(), lineno=111, col_offset=18), 'TestCase', Load(), lineno=111, col_offset=18)], [Expr(Str('Tests for TimeRE.', lineno=112, col_offset=4), lineno=112, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=114, col_offset=14)], None, None, []), [Expr(Str('Construct generic TimeRE object.', lineno=115, col_offset=8), lineno=115, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=116, col_offset=8), 'time_re', Store(), lineno=116, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=116, col_offset=23), 'TimeRE', Load(), lineno=116, col_offset=23), [], [], None, None, lineno=116, col_offset=23), lineno=116, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=117, col_offset=8), 'locale_time', Store(), lineno=117, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=117, col_offset=27), 'LocaleTime', Load(), lineno=117, col_offset=27), [], [], None, None, lineno=117, col_offset=27), lineno=117, col_offset=8)], [], lineno=114, col_offset=4), FunctionDef('test_pattern', arguments([Name('self', Param(), lineno=119, col_offset=21)], None, None, []), [Assign([Name('pattern_string', Store(), lineno=121, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=121, col_offset=25), 'time_re', Load(), lineno=121, col_offset=25), 'pattern', Load(), lineno=121, col_offset=25), [Str('%a %A %d', lineno=121, col_offset=46)], [], None, None, lineno=121, col_offset=25), lineno=121, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=122, col_offset=8), 'assertTrue', Load(), lineno=122, col_offset=8), [Compare(Call(Attribute(Name('pattern_string', Load(), lineno=122, col_offset=24), 'find', Load(), lineno=122, col_offset=24), [Subscript(Attribute(Attribute(Name('self', Load(), lineno=122, col_offset=44), 'locale_time', Load(), lineno=122, col_offset=44), 'a_weekday', Load(), lineno=122, col_offset=44), Index(Num(2, lineno=122, col_offset=71)), Load(), lineno=122, col_offset=44)], [], None, None, lineno=122, col_offset=24), [NotEq()], [Num(-1, lineno=122, col_offset=79)], lineno=122, col_offset=24), BinOp(Str("did not find abbreviated weekday in pattern string '%s'", lineno=123, col_offset=24), Mod(), Name('pattern_string', Load(), lineno=124, col_offset=25), lineno=123, col_offset=24)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=125, col_offset=8), 'assertTrue', Load(), lineno=125, col_offset=8), [Compare(Call(Attribute(Name('pattern_string', Load(), lineno=125, col_offset=24), 'find', Load(), lineno=125, col_offset=24), [Subscript(Attribute(Attribute(Name('self', Load(), lineno=125, col_offset=44), 'locale_time', Load(), lineno=125, col_offset=44), 'f_weekday', Load(), lineno=125, col_offset=44), Index(Num(4, lineno=125, col_offset=71)), Load(), lineno=125, col_offset=44)], [], None, None, lineno=125, col_offset=24), [NotEq()], [Num(-1, lineno=125, col_offset=79)], lineno=125, col_offset=24), BinOp(Str("did not find full weekday in pattern string '%s'", lineno=126, col_offset=24), Mod(), Name('pattern_string', Load(), lineno=127, col_offset=25), lineno=126, col_offset=24)], [], None, None, lineno=125, col_offset=8), lineno=125, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=8), 'assertTrue', Load(), lineno=128, col_offset=8), [Compare(Call(Attribute(Name('pattern_string', Load(), lineno=128, col_offset=24), 'find', Load(), lineno=128, col_offset=24), [Subscript(Attribute(Name('self', Load(), lineno=128, col_offset=44), 'time_re', Load(), lineno=128, col_offset=44), Index(Str('d', lineno=128, col_offset=57)), Load(), lineno=128, col_offset=44)], [], None, None, lineno=128, col_offset=24), [NotEq()], [Num(-1, lineno=128, col_offset=67)], lineno=128, col_offset=24), BinOp(Str("did not find 'd' directive pattern string '%s'", lineno=129, col_offset=24), Mod(), Name('pattern_string', Load(), lineno=130, col_offset=25), lineno=129, col_offset=24)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('test_pattern_escaping', arguments([Name('self', Param(), lineno=132, col_offset=30)], None, None, []), [Assign([Name('pattern_string', Store(), lineno=135, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=135, col_offset=25), 'time_re', Load(), lineno=135, col_offset=25), 'pattern', Load(), lineno=135, col_offset=25), [Str('\\d+', lineno=135, col_offset=46)], [], None, None, lineno=135, col_offset=25), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertIn', Load(), lineno=136, col_offset=8), [Str('\\\\d\\+', lineno=136, col_offset=22), Name('pattern_string', Load(), lineno=136, col_offset=32), BinOp(Str('%s does not have re characters escaped properly', lineno=137, col_offset=22), Mod(), Name('pattern_string', Load(), lineno=138, col_offset=22), lineno=137, col_offset=22)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('test_compile', arguments([Name('self', Param(), lineno=140, col_offset=21)], None, None, []), [Assign([Name('found', Store(), lineno=142, col_offset=8)], Call(Attribute(Call(Attribute(Attribute(Name('self', Load(), lineno=142, col_offset=16), 'time_re', Load(), lineno=142, col_offset=16), 'compile', Load(), lineno=142, col_offset=16), [Str('%A', lineno=142, col_offset=37)], [], None, None, lineno=142, col_offset=16), 'match', Load(), lineno=142, col_offset=16), [Subscript(Attribute(Attribute(Name('self', Load(), lineno=142, col_offset=50), 'locale_time', Load(), lineno=142, col_offset=50), 'f_weekday', Load(), lineno=142, col_offset=50), Index(Num(6, lineno=142, col_offset=77)), Load(), lineno=142, col_offset=50)], [], None, None, lineno=142, col_offset=16), lineno=142, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=143, col_offset=8), 'assertTrue', Load(), lineno=143, col_offset=8), [BoolOp(And(), [Name('found', Load(), lineno=143, col_offset=24), Compare(Call(Attribute(Name('found', Load(), lineno=143, col_offset=34), 'group', Load(), lineno=143, col_offset=34), [Str('A', lineno=143, col_offset=46)], [], None, None, lineno=143, col_offset=34), [Eq()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=143, col_offset=54), 'locale_time', Load(), lineno=143, col_offset=54), 'f_weekday', Load(), lineno=143, col_offset=54), Index(Num(6, lineno=143, col_offset=81)), Load(), lineno=143, col_offset=54)], lineno=143, col_offset=34)], lineno=143, col_offset=24), Str("re object for '%A' failed", lineno=144, col_offset=24)], [], None, None, lineno=143, col_offset=8), lineno=143, col_offset=8), Assign([Name('compiled', Store(), lineno=145, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=145, col_offset=19), 'time_re', Load(), lineno=145, col_offset=19), 'compile', Load(), lineno=145, col_offset=19), [Str('%a %b', lineno=145, col_offset=40)], [], None, None, lineno=145, col_offset=19), lineno=145, col_offset=8), Assign([Name('found', Store(), lineno=146, col_offset=8)], Call(Attribute(Name('compiled', Load(), lineno=146, col_offset=16), 'match', Load(), lineno=146, col_offset=16), [BinOp(Str('%s %s', lineno=146, col_offset=31), Mod(), Tuple([Subscript(Attribute(Attribute(Name('self', Load(), lineno=146, col_offset=42), 'locale_time', Load(), lineno=146, col_offset=42), 'a_weekday', Load(), lineno=146, col_offset=42), Index(Num(4, lineno=146, col_offset=69)), Load(), lineno=146, col_offset=42), Subscript(Attribute(Attribute(Name('self', Load(), lineno=147, col_offset=31), 'locale_time', Load(), lineno=147, col_offset=31), 'a_month', Load(), lineno=147, col_offset=31), Index(Num(4, lineno=147, col_offset=56)), Load(), lineno=147, col_offset=31)], Load(), lineno=146, col_offset=42), lineno=146, col_offset=31)], [], None, None, lineno=146, col_offset=16), lineno=146, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=148, col_offset=8), 'assertTrue', Load(), lineno=148, col_offset=8), [Name('found', Load(), lineno=148, col_offset=24), BinOp(Str("Match failed with '%s' regex and '%s' string", lineno=149, col_offset=12), Mod(), Tuple([Attribute(Name('compiled', Load(), lineno=150, col_offset=14), 'pattern', Load(), lineno=150, col_offset=14), BinOp(Str('%s %s', lineno=150, col_offset=32), Mod(), Tuple([Subscript(Attribute(Attribute(Name('self', Load(), lineno=150, col_offset=43), 'locale_time', Load(), lineno=150, col_offset=43), 'a_weekday', Load(), lineno=150, col_offset=43), Index(Num(4, lineno=150, col_offset=70)), Load(), lineno=150, col_offset=43), Subscript(Attribute(Attribute(Name('self', Load(), lineno=151, col_offset=43), 'locale_time', Load(), lineno=151, col_offset=43), 'a_month', Load(), lineno=151, col_offset=43), Index(Num(4, lineno=151, col_offset=68)), Load(), lineno=151, col_offset=43)], Load(), lineno=150, col_offset=43), lineno=150, col_offset=32)], Load(), lineno=150, col_offset=14), lineno=149, col_offset=12)], [], None, None, lineno=148, col_offset=8), lineno=148, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=152, col_offset=8), 'assertTrue', Load(), lineno=152, col_offset=8), [BoolOp(And(), [Compare(Call(Attribute(Name('found', Load(), lineno=152, col_offset=24), 'group', Load(), lineno=152, col_offset=24), [Str('a', lineno=152, col_offset=36)], [], None, None, lineno=152, col_offset=24), [Eq()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=152, col_offset=44), 'locale_time', Load(), lineno=152, col_offset=44), 'a_weekday', Load(), lineno=152, col_offset=44), Index(Num(4, lineno=152, col_offset=71)), Load(), lineno=152, col_offset=44)], lineno=152, col_offset=24), Compare(Call(Attribute(Name('found', Load(), lineno=153, col_offset=25), 'group', Load(), lineno=153, col_offset=25), [Str('b', lineno=153, col_offset=37)], [], None, None, lineno=153, col_offset=25), [Eq()], [Subscript(Attribute(Attribute(Name('self', Load(), lineno=153, col_offset=45), 'locale_time', Load(), lineno=153, col_offset=45), 'a_month', Load(), lineno=153, col_offset=45), Index(Num(4, lineno=153, col_offset=70)), Load(), lineno=153, col_offset=45)], lineno=153, col_offset=25)], lineno=152, col_offset=24), BinOp(Str("re object couldn't find the abbreviated weekday month in '%s' using '%s'; group 'a' = '%s', group 'b' = %s'", lineno=154, col_offset=24), Mod(), Tuple([Attribute(Name('found', Load(), lineno=156, col_offset=26), 'string', Load(), lineno=156, col_offset=26), Attribute(Attribute(Name('found', Load(), lineno=156, col_offset=40), 're', Load(), lineno=156, col_offset=40), 'pattern', Load(), lineno=156, col_offset=40), Call(Attribute(Name('found', Load(), lineno=156, col_offset=58), 'group', Load(), lineno=156, col_offset=58), [Str('a', lineno=156, col_offset=70)], [], None, None, lineno=156, col_offset=58), Call(Attribute(Name('found', Load(), lineno=157, col_offset=26), 'group', Load(), lineno=157, col_offset=26), [Str('b', lineno=157, col_offset=38)], [], None, None, lineno=157, col_offset=26)], Load(), lineno=156, col_offset=26), lineno=154, col_offset=24)], [], None, None, lineno=152, col_offset=8), lineno=152, col_offset=8), For(Name('directive', Store(), lineno=158, col_offset=12), Tuple([Str('a', lineno=158, col_offset=26), Str('A', lineno=158, col_offset=30), Str('b', lineno=158, col_offset=34), Str('B', lineno=158, col_offset=38), Str('c', lineno=158, col_offset=42), Str('d', lineno=158, col_offset=46), Str('H', lineno=158, col_offset=50), Str('I', lineno=158, col_offset=54), Str('j', lineno=158, col_offset=58), Str('m', lineno=158, col_offset=62), Str('M', lineno=158, col_offset=66), Str('p', lineno=158, col_offset=70), Str('S', lineno=158, col_offset=74), Str('U', lineno=159, col_offset=26), Str('w', lineno=159, col_offset=30), Str('W', lineno=159, col_offset=34), Str('x', lineno=159, col_offset=38), Str('X', lineno=159, col_offset=42), Str('y', lineno=159, col_offset=46), Str('Y', lineno=159, col_offset=50), Str('Z', lineno=159, col_offset=54), Str('%', lineno=159, col_offset=58)], Load(), lineno=158, col_offset=26), [Assign([Name('compiled', Store(), lineno=160, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=160, col_offset=23), 'time_re', Load(), lineno=160, col_offset=23), 'compile', Load(), lineno=160, col_offset=23), [BinOp(Str('%', lineno=160, col_offset=44), Add(), Name('directive', Load(), lineno=160, col_offset=50), lineno=160, col_offset=44)], [], None, None, lineno=160, col_offset=23), lineno=160, col_offset=12), Assign([Name('found', Store(), lineno=161, col_offset=12)], Call(Attribute(Name('compiled', Load(), lineno=161, col_offset=20), 'match', Load(), lineno=161, col_offset=20), [Call(Attribute(Name('time', Load(), lineno=161, col_offset=35), 'strftime', Load(), lineno=161, col_offset=35), [BinOp(Str('%', lineno=161, col_offset=49), Add(), Name('directive', Load(), lineno=161, col_offset=55), lineno=161, col_offset=49)], [], None, None, lineno=161, col_offset=35)], [], None, None, lineno=161, col_offset=20), lineno=161, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=162, col_offset=12), 'assertTrue', Load(), lineno=162, col_offset=12), [Name('found', Load(), lineno=162, col_offset=28), BinOp(Str("Matching failed on '%s' using '%s' regex", lineno=162, col_offset=35), Mod(), Tuple([Call(Attribute(Name('time', Load(), lineno=163, col_offset=37), 'strftime', Load(), lineno=163, col_offset=37), [BinOp(Str('%', lineno=163, col_offset=51), Add(), Name('directive', Load(), lineno=163, col_offset=57), lineno=163, col_offset=51)], [], None, None, lineno=163, col_offset=37), Attribute(Name('compiled', Load(), lineno=164, col_offset=37), 'pattern', Load(), lineno=164, col_offset=37)], Load(), lineno=163, col_offset=37), lineno=162, col_offset=35)], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=12)], [], lineno=158, col_offset=8)], [], lineno=140, col_offset=4), FunctionDef('test_blankpattern', arguments([Name('self', Param(), lineno=166, col_offset=26)], None, None, []), [Assign([Name('test_locale', Store(), lineno=169, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=169, col_offset=22), 'LocaleTime', Load(), lineno=169, col_offset=22), [], [], None, None, lineno=169, col_offset=22), lineno=169, col_offset=8), Assign([Attribute(Name('test_locale', Load(), lineno=170, col_offset=8), 'timezone', Store(), lineno=170, col_offset=8)], Tuple([Call(Name('frozenset', Load(), lineno=170, col_offset=32), [], [], None, None, lineno=170, col_offset=32), Call(Name('frozenset', Load(), lineno=170, col_offset=45), [], [], None, None, lineno=170, col_offset=45)], Load(), lineno=170, col_offset=32), lineno=170, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=171, col_offset=8), 'assertTrue', Load(), lineno=171, col_offset=8), [Compare(Call(Attribute(Call(Attribute(Name('_strptime', Load(), lineno=171, col_offset=24), 'TimeRE', Load(), lineno=171, col_offset=24), [Name('test_locale', Load(), lineno=171, col_offset=41)], [], None, None, lineno=171, col_offset=24), 'pattern', Load(), lineno=171, col_offset=24), [Str('%Z', lineno=171, col_offset=62)], [], None, None, lineno=171, col_offset=24), [Eq()], [Str('', lineno=171, col_offset=71)], lineno=171, col_offset=24), Str("with timezone == ('',''), TimeRE().pattern('%Z') != ''", lineno=172, col_offset=24)], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8)], [], lineno=166, col_offset=4), FunctionDef('test_matching_with_escapes', arguments([Name('self', Param(), lineno=174, col_offset=35)], None, None, []), [Assign([Name('compiled_re', Store(), lineno=176, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=176, col_offset=22), 'time_re', Load(), lineno=176, col_offset=22), 'compile', Load(), lineno=176, col_offset=22), [Str('\\w+ %m', lineno=176, col_offset=43)], [], None, None, lineno=176, col_offset=22), lineno=176, col_offset=8), Assign([Name('found', Store(), lineno=177, col_offset=8)], Call(Attribute(Name('compiled_re', Load(), lineno=177, col_offset=16), 'match', Load(), lineno=177, col_offset=16), [Str('\\w+ 10', lineno=177, col_offset=34)], [], None, None, lineno=177, col_offset=16), lineno=177, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=8), 'assertTrue', Load(), lineno=178, col_offset=8), [Name('found', Load(), lineno=178, col_offset=24), Str("Escaping failed of format '\\w+ 10'", lineno=178, col_offset=31)], [], None, None, lineno=178, col_offset=8), lineno=178, col_offset=8)], [], lineno=174, col_offset=4), FunctionDef('test_locale_data_w_regex_metacharacters', arguments([Name('self', Param(), lineno=180, col_offset=48)], None, None, []), [Assign([Name('locale_time', Store(), lineno=184, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=184, col_offset=22), 'LocaleTime', Load(), lineno=184, col_offset=22), [], [], None, None, lineno=184, col_offset=22), lineno=184, col_offset=8), Assign([Attribute(Name('locale_time', Load(), lineno=185, col_offset=8), 'timezone', Store(), lineno=185, col_offset=8)], Tuple([Call(Name('frozenset', Load(), lineno=185, col_offset=32), [Tuple([Str('utc', lineno=185, col_offset=43), Str('gmt', lineno=185, col_offset=50), Str('Tokyo (standard time)', lineno=186, col_offset=44)], Load(), lineno=185, col_offset=43)], [], None, None, lineno=185, col_offset=32), Call(Name('frozenset', Load(), lineno=187, col_offset=32), [Str('Tokyo (daylight time)', lineno=187, col_offset=42)], [], None, None, lineno=187, col_offset=32)], Load(), lineno=185, col_offset=32), lineno=185, col_offset=8), Assign([Name('time_re', Store(), lineno=188, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=188, col_offset=18), 'TimeRE', Load(), lineno=188, col_offset=18), [Name('locale_time', Load(), lineno=188, col_offset=35)], [], None, None, lineno=188, col_offset=18), lineno=188, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=8), 'assertTrue', Load(), lineno=189, col_offset=8), [Call(Attribute(Call(Attribute(Name('time_re', Load(), lineno=189, col_offset=24), 'compile', Load(), lineno=189, col_offset=24), [Str('%Z', lineno=189, col_offset=40)], [], None, None, lineno=189, col_offset=24), 'match', Load(), lineno=189, col_offset=24), [Str('Tokyo (standard time)', lineno=189, col_offset=52)], [], None, None, lineno=189, col_offset=24), Str('locale data that contains regex metacharacters is not properly escaped', lineno=190, col_offset=24)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('test_whitespace_substitution', arguments([Name('self', Param(), lineno=193, col_offset=37)], None, None, []), [Assign([Name('pattern', Store(), lineno=197, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=197, col_offset=18), 'time_re', Load(), lineno=197, col_offset=18), 'pattern', Load(), lineno=197, col_offset=18), [Str('%j %H', lineno=197, col_offset=39)], [], None, None, lineno=197, col_offset=18), lineno=197, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=8), 'assertTrue', Load(), lineno=198, col_offset=8), [UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=198, col_offset=28), 'match', Load(), lineno=198, col_offset=28), [Name('pattern', Load(), lineno=198, col_offset=37), Str('180', lineno=198, col_offset=46)], [], None, None, lineno=198, col_offset=28), lineno=198, col_offset=24)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=8), 'assertTrue', Load(), lineno=199, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=199, col_offset=24), 'match', Load(), lineno=199, col_offset=24), [Name('pattern', Load(), lineno=199, col_offset=33), Str('18 0', lineno=199, col_offset=42)], [], None, None, lineno=199, col_offset=24)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8)], [], lineno=193, col_offset=4)], [], lineno=111, col_offset=0), ClassDef('StrptimeTests', [Attribute(Name('unittest', Load(), lineno=202, col_offset=20), 'TestCase', Load(), lineno=202, col_offset=20)], [Expr(Str('Tests for _strptime.strptime.', lineno=203, col_offset=4), lineno=203, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=205, col_offset=14)], None, None, []), [Expr(Str('Create testing time tuple.', lineno=206, col_offset=8), lineno=206, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=207, col_offset=8), 'time_tuple', Store(), lineno=207, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=207, col_offset=26), 'gmtime', Load(), lineno=207, col_offset=26), [], [], None, None, lineno=207, col_offset=26), lineno=207, col_offset=8)], [], lineno=205, col_offset=4), FunctionDef('test_ValueError', arguments([Name('self', Param(), lineno=209, col_offset=24)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=211, col_offset=8), 'assertRaises', Load(), lineno=211, col_offset=8), [Name('ValueError', Load(), lineno=211, col_offset=26), Attribute(Name('_strptime', Load(), lineno=211, col_offset=38), '_strptime_time', Load(), lineno=211, col_offset=38)], [keyword('data_string', Str('%d', lineno=211, col_offset=76)), keyword('format', Str('%A', lineno=212, col_offset=33))], None, None, lineno=211, col_offset=8), lineno=211, col_offset=8), For(Name('bad_format', Store(), lineno=213, col_offset=12), Tuple([Str('%', lineno=213, col_offset=27), Str('% ', lineno=213, col_offset=32), Str('%e', lineno=213, col_offset=38)], Load(), lineno=213, col_offset=27), [TryExcept([Expr(Call(Attribute(Name('_strptime', Load(), lineno=215, col_offset=16), '_strptime_time', Load(), lineno=215, col_offset=16), [Str('2005', lineno=215, col_offset=41), Name('bad_format', Load(), lineno=215, col_offset=49)], [], None, None, lineno=215, col_offset=16), lineno=215, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=216, col_offset=19), None, [Continue( lineno=217, col_offset=16)], lineno=216, col_offset=12), ExceptHandler(Name('Exception', Load(), lineno=218, col_offset=19), Name('err', Store(), lineno=218, col_offset=30), [Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=16), 'fail', Load(), lineno=219, col_offset=16), [BinOp(Str("'%s' raised %s, not ValueError", lineno=219, col_offset=26), Mod(), Tuple([Name('bad_format', Load(), lineno=220, col_offset=29), Attribute(Attribute(Name('err', Load(), lineno=220, col_offset=41), '__class__', Load(), lineno=220, col_offset=41), '__name__', Load(), lineno=220, col_offset=41)], Load(), lineno=220, col_offset=29), lineno=219, col_offset=26)], [], None, None, lineno=219, col_offset=16), lineno=219, col_offset=16)], lineno=218, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=222, col_offset=16), 'fail', Load(), lineno=222, col_offset=16), [BinOp(Str("'%s' did not raise ValueError", lineno=222, col_offset=26), Mod(), Name('bad_format', Load(), lineno=222, col_offset=60), lineno=222, col_offset=26)], [], None, None, lineno=222, col_offset=16), lineno=222, col_offset=16)], lineno=214, col_offset=12)], [], lineno=213, col_offset=8)], [], lineno=209, col_offset=4), FunctionDef('test_unconverteddata', arguments([Name('self', Param(), lineno=224, col_offset=29)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=226, col_offset=8), 'assertRaises', Load(), lineno=226, col_offset=8), [Name('ValueError', Load(), lineno=226, col_offset=26), Attribute(Name('_strptime', Load(), lineno=226, col_offset=38), '_strptime_time', Load(), lineno=226, col_offset=38), Str('10 12', lineno=226, col_offset=64), Str('%m', lineno=226, col_offset=73)], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8)], [], lineno=224, col_offset=4), FunctionDef('helper', arguments([Name('self', Param(), lineno=228, col_offset=15), Name('directive', Param(), lineno=228, col_offset=21), Name('position', Param(), lineno=228, col_offset=32)], None, None, []), [Expr(Str('Helper fxn in testing.', lineno=229, col_offset=8), lineno=229, col_offset=8), Assign([Name('strf_output', Store(), lineno=230, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=230, col_offset=22), 'strftime', Load(), lineno=230, col_offset=22), [BinOp(Str('%', lineno=230, col_offset=36), Add(), Name('directive', Load(), lineno=230, col_offset=42), lineno=230, col_offset=36), Attribute(Name('self', Load(), lineno=230, col_offset=53), 'time_tuple', Load(), lineno=230, col_offset=53)], [], None, None, lineno=230, col_offset=22), lineno=230, col_offset=8), Assign([Name('strp_output', Store(), lineno=231, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=231, col_offset=22), '_strptime_time', Load(), lineno=231, col_offset=22), [Name('strf_output', Load(), lineno=231, col_offset=47), BinOp(Str('%', lineno=231, col_offset=60), Add(), Name('directive', Load(), lineno=231, col_offset=66), lineno=231, col_offset=60)], [], None, None, lineno=231, col_offset=22), lineno=231, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=232, col_offset=8), 'assertTrue', Load(), lineno=232, col_offset=8), [Compare(Subscript(Name('strp_output', Load(), lineno=232, col_offset=24), Index(Name('position', Load(), lineno=232, col_offset=36)), Load(), lineno=232, col_offset=24), [Eq()], [Subscript(Attribute(Name('self', Load(), lineno=232, col_offset=49), 'time_tuple', Load(), lineno=232, col_offset=49), Index(Name('position', Load(), lineno=232, col_offset=65)), Load(), lineno=232, col_offset=49)], lineno=232, col_offset=24), BinOp(Str("testing of '%s' directive failed; '%s' -> %s != %s", lineno=233, col_offset=24), Mod(), Tuple([Name('directive', Load(), lineno=234, col_offset=26), Name('strf_output', Load(), lineno=234, col_offset=37), Subscript(Name('strp_output', Load(), lineno=234, col_offset=50), Index(Name('position', Load(), lineno=234, col_offset=62)), Load(), lineno=234, col_offset=50), Subscript(Attribute(Name('self', Load(), lineno=235, col_offset=26), 'time_tuple', Load(), lineno=235, col_offset=26), Index(Name('position', Load(), lineno=235, col_offset=42)), Load(), lineno=235, col_offset=26)], Load(), lineno=234, col_offset=26), lineno=233, col_offset=24)], [], None, None, lineno=232, col_offset=8), lineno=232, col_offset=8)], [], lineno=228, col_offset=4), FunctionDef('test_year', arguments([Name('self', Param(), lineno=237, col_offset=18)], None, None, []), [For(Name('directive', Store(), lineno=239, col_offset=12), Tuple([Str('y', lineno=239, col_offset=26), Str('Y', lineno=239, col_offset=31)], Load(), lineno=239, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=240, col_offset=12), 'helper', Load(), lineno=240, col_offset=12), [Name('directive', Load(), lineno=240, col_offset=24), Num(0, lineno=240, col_offset=35)], [], None, None, lineno=240, col_offset=12), lineno=240, col_offset=12)], [], lineno=239, col_offset=8), For(Tuple([Name('century', Store(), lineno=242, col_offset=12), Name('bounds', Store(), lineno=242, col_offset=21)], Store(), lineno=242, col_offset=12), Tuple([Tuple([Num(1900, lineno=242, col_offset=33), Tuple([Str('69', lineno=242, col_offset=40), Str('99', lineno=242, col_offset=46)], Load(), lineno=242, col_offset=40)], Load(), lineno=242, col_offset=33), Tuple([Num(2000, lineno=242, col_offset=55), Tuple([Str('00', lineno=242, col_offset=62), Str('68', lineno=242, col_offset=68)], Load(), lineno=242, col_offset=62)], Load(), lineno=242, col_offset=55)], Load(), lineno=242, col_offset=32), [For(Name('bound', Store(), lineno=243, col_offset=16), Name('bounds', Load(), lineno=243, col_offset=25), [Assign([Name('strp_output', Store(), lineno=244, col_offset=16)], Call(Attribute(Name('_strptime', Load(), lineno=244, col_offset=30), '_strptime_time', Load(), lineno=244, col_offset=30), [Name('bound', Load(), lineno=244, col_offset=55), Str('%y', lineno=244, col_offset=62)], [], None, None, lineno=244, col_offset=30), lineno=244, col_offset=16), Assign([Name('expected_result', Store(), lineno=245, col_offset=16)], BinOp(Name('century', Load(), lineno=245, col_offset=34), Add(), Call(Name('int', Load(), lineno=245, col_offset=44), [Name('bound', Load(), lineno=245, col_offset=48)], [], None, None, lineno=245, col_offset=44), lineno=245, col_offset=34), lineno=245, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=246, col_offset=16), 'assertTrue', Load(), lineno=246, col_offset=16), [Compare(Subscript(Name('strp_output', Load(), lineno=246, col_offset=32), Index(Num(0, lineno=246, col_offset=44)), Load(), lineno=246, col_offset=32), [Eq()], [Name('expected_result', Load(), lineno=246, col_offset=50)], lineno=246, col_offset=32), BinOp(Str("'y' test failed; passed in '%s' and returned '%s'", lineno=247, col_offset=32), Mod(), Tuple([Name('bound', Load(), lineno=248, col_offset=55), Subscript(Name('strp_output', Load(), lineno=248, col_offset=62), Index(Num(0, lineno=248, col_offset=74)), Load(), lineno=248, col_offset=62)], Load(), lineno=248, col_offset=55), lineno=247, col_offset=32)], [], None, None, lineno=246, col_offset=16), lineno=246, col_offset=16)], [], lineno=243, col_offset=12)], [], lineno=242, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('test_month', arguments([Name('self', Param(), lineno=250, col_offset=19)], None, None, []), [For(Name('directive', Store(), lineno=252, col_offset=12), Tuple([Str('B', lineno=252, col_offset=26), Str('b', lineno=252, col_offset=31), Str('m', lineno=252, col_offset=36)], Load(), lineno=252, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=12), 'helper', Load(), lineno=253, col_offset=12), [Name('directive', Load(), lineno=253, col_offset=24), Num(1, lineno=253, col_offset=35)], [], None, None, lineno=253, col_offset=12), lineno=253, col_offset=12)], [], lineno=252, col_offset=8)], [], lineno=250, col_offset=4), FunctionDef('test_day', arguments([Name('self', Param(), lineno=255, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=257, col_offset=8), 'helper', Load(), lineno=257, col_offset=8), [Str('d', lineno=257, col_offset=20), Num(2, lineno=257, col_offset=25)], [], None, None, lineno=257, col_offset=8), lineno=257, col_offset=8)], [], lineno=255, col_offset=4), FunctionDef('test_hour', arguments([Name('self', Param(), lineno=259, col_offset=18)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=261, col_offset=8), 'helper', Load(), lineno=261, col_offset=8), [Str('H', lineno=261, col_offset=20), Num(3, lineno=261, col_offset=25)], [], None, None, lineno=261, col_offset=8), lineno=261, col_offset=8), Assign([Name('strf_output', Store(), lineno=262, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=262, col_offset=22), 'strftime', Load(), lineno=262, col_offset=22), [Str('%I %p', lineno=262, col_offset=36), Attribute(Name('self', Load(), lineno=262, col_offset=45), 'time_tuple', Load(), lineno=262, col_offset=45)], [], None, None, lineno=262, col_offset=22), lineno=262, col_offset=8), Assign([Name('strp_output', Store(), lineno=263, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=263, col_offset=22), '_strptime_time', Load(), lineno=263, col_offset=22), [Name('strf_output', Load(), lineno=263, col_offset=47), Str('%I %p', lineno=263, col_offset=60)], [], None, None, lineno=263, col_offset=22), lineno=263, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=264, col_offset=8), 'assertTrue', Load(), lineno=264, col_offset=8), [Compare(Subscript(Name('strp_output', Load(), lineno=264, col_offset=24), Index(Num(3, lineno=264, col_offset=36)), Load(), lineno=264, col_offset=24), [Eq()], [Subscript(Attribute(Name('self', Load(), lineno=264, col_offset=42), 'time_tuple', Load(), lineno=264, col_offset=42), Index(Num(3, lineno=264, col_offset=58)), Load(), lineno=264, col_offset=42)], lineno=264, col_offset=24), BinOp(Str("testing of '%%I %%p' directive failed; '%s' -> %s != %s", lineno=265, col_offset=24), Mod(), Tuple([Name('strf_output', Load(), lineno=266, col_offset=26), Subscript(Name('strp_output', Load(), lineno=266, col_offset=39), Index(Num(3, lineno=266, col_offset=51)), Load(), lineno=266, col_offset=39), Subscript(Attribute(Name('self', Load(), lineno=266, col_offset=55), 'time_tuple', Load(), lineno=266, col_offset=55), Index(Num(3, lineno=266, col_offset=71)), Load(), lineno=266, col_offset=55)], Load(), lineno=266, col_offset=26), lineno=265, col_offset=24)], [], None, None, lineno=264, col_offset=8), lineno=264, col_offset=8)], [], lineno=259, col_offset=4), FunctionDef('test_minute', arguments([Name('self', Param(), lineno=268, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=270, col_offset=8), 'helper', Load(), lineno=270, col_offset=8), [Str('M', lineno=270, col_offset=20), Num(4, lineno=270, col_offset=25)], [], None, None, lineno=270, col_offset=8), lineno=270, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('test_second', arguments([Name('self', Param(), lineno=272, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=274, col_offset=8), 'helper', Load(), lineno=274, col_offset=8), [Str('S', lineno=274, col_offset=20), Num(5, lineno=274, col_offset=25)], [], None, None, lineno=274, col_offset=8), lineno=274, col_offset=8)], [], lineno=272, col_offset=4), FunctionDef('test_fraction', arguments([Name('self', Param(), lineno=276, col_offset=22)], None, None, []), [Import([alias('datetime', None)], lineno=278, col_offset=8), Assign([Name('d', Store(), lineno=279, col_offset=8)], Call(Attribute(Name('datetime', Load(), lineno=279, col_offset=12), 'datetime', Load(), lineno=279, col_offset=12), [Num(2012, lineno=279, col_offset=30), Num(12, lineno=279, col_offset=36), Num(20, lineno=279, col_offset=40), Num(12, lineno=279, col_offset=44), Num(34, lineno=279, col_offset=48), Num(56, lineno=279, col_offset=52), Num(78987, lineno=279, col_offset=56)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=8), Assign([Tuple([Name('tup', Store(), lineno=280, col_offset=8), Name('frac', Store(), lineno=280, col_offset=13)], Store(), lineno=280, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=280, col_offset=20), '_strptime', Load(), lineno=280, col_offset=20), [Call(Name('str', Load(), lineno=280, col_offset=40), [Name('d', Load(), lineno=280, col_offset=44)], [], None, None, lineno=280, col_offset=40)], [keyword('format', Str('%Y-%m-%d %H:%M:%S.%f', lineno=280, col_offset=55))], None, None, lineno=280, col_offset=20), lineno=280, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=281, col_offset=8), 'assertEqual', Load(), lineno=281, col_offset=8), [Name('frac', Load(), lineno=281, col_offset=25), Attribute(Name('d', Load(), lineno=281, col_offset=31), 'microsecond', Load(), lineno=281, col_offset=31)], [], None, None, lineno=281, col_offset=8), lineno=281, col_offset=8)], [], lineno=276, col_offset=4), FunctionDef('test_weekday', arguments([Name('self', Param(), lineno=283, col_offset=21)], None, None, []), [For(Name('directive', Store(), lineno=285, col_offset=12), Tuple([Str('A', lineno=285, col_offset=26), Str('a', lineno=285, col_offset=31), Str('w', lineno=285, col_offset=36)], Load(), lineno=285, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=286, col_offset=12), 'helper', Load(), lineno=286, col_offset=12), [Name('directive', Load(), lineno=286, col_offset=24), Num(6, lineno=286, col_offset=34)], [], None, None, lineno=286, col_offset=12), lineno=286, col_offset=12)], [], lineno=285, col_offset=8)], [], lineno=283, col_offset=4), FunctionDef('test_julian', arguments([Name('self', Param(), lineno=288, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=290, col_offset=8), 'helper', Load(), lineno=290, col_offset=8), [Str('j', lineno=290, col_offset=20), Num(7, lineno=290, col_offset=25)], [], None, None, lineno=290, col_offset=8), lineno=290, col_offset=8)], [], lineno=288, col_offset=4), FunctionDef('test_timezone', arguments([Name('self', Param(), lineno=292, col_offset=22)], None, None, []), [Assign([Name('strp_output', Store(), lineno=297, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=297, col_offset=22), '_strptime_time', Load(), lineno=297, col_offset=22), [Str('UTC', lineno=297, col_offset=47), Str('%Z', lineno=297, col_offset=54)], [], None, None, lineno=297, col_offset=22), lineno=297, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=298, col_offset=8), 'assertEqual', Load(), lineno=298, col_offset=8), [Attribute(Name('strp_output', Load(), lineno=298, col_offset=25), 'tm_isdst', Load(), lineno=298, col_offset=25), Num(0, lineno=298, col_offset=47)], [], None, None, lineno=298, col_offset=8), lineno=298, col_offset=8), Assign([Name('strp_output', Store(), lineno=299, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=299, col_offset=22), '_strptime_time', Load(), lineno=299, col_offset=22), [Str('GMT', lineno=299, col_offset=47), Str('%Z', lineno=299, col_offset=54)], [], None, None, lineno=299, col_offset=22), lineno=299, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=300, col_offset=8), 'assertEqual', Load(), lineno=300, col_offset=8), [Attribute(Name('strp_output', Load(), lineno=300, col_offset=25), 'tm_isdst', Load(), lineno=300, col_offset=25), Num(0, lineno=300, col_offset=47)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8), Assign([Name('time_tuple', Store(), lineno=301, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=301, col_offset=21), 'localtime', Load(), lineno=301, col_offset=21), [], [], None, None, lineno=301, col_offset=21), lineno=301, col_offset=8), Assign([Name('strf_output', Store(), lineno=302, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=302, col_offset=22), 'strftime', Load(), lineno=302, col_offset=22), [Str('%Z', lineno=302, col_offset=36)], [], None, None, lineno=302, col_offset=22), lineno=302, col_offset=8), Assign([Name('strp_output', Store(), lineno=303, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=303, col_offset=22), '_strptime_time', Load(), lineno=303, col_offset=22), [Name('strf_output', Load(), lineno=303, col_offset=47), Str('%Z', lineno=303, col_offset=60)], [], None, None, lineno=303, col_offset=22), lineno=303, col_offset=8), Assign([Name('locale_time', Store(), lineno=304, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=304, col_offset=22), 'LocaleTime', Load(), lineno=304, col_offset=22), [], [], None, None, lineno=304, col_offset=22), lineno=304, col_offset=8), If(BoolOp(Or(), [Compare(Subscript(Attribute(Name('time', Load(), lineno=305, col_offset=11), 'tzname', Load(), lineno=305, col_offset=11), Index(Num(0, lineno=305, col_offset=23)), Load(), lineno=305, col_offset=11), [NotEq()], [Subscript(Attribute(Name('time', Load(), lineno=305, col_offset=29), 'tzname', Load(), lineno=305, col_offset=29), Index(Num(1, lineno=305, col_offset=41)), Load(), lineno=305, col_offset=29)], lineno=305, col_offset=11), UnaryOp(Not(), Attribute(Name('time', Load(), lineno=305, col_offset=51), 'daylight', Load(), lineno=305, col_offset=51), lineno=305, col_offset=47)], lineno=305, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=12), 'assertTrue', Load(), lineno=306, col_offset=12), [Compare(Subscript(Name('strp_output', Load(), lineno=306, col_offset=28), Index(Num(8, lineno=306, col_offset=40)), Load(), lineno=306, col_offset=28), [Eq()], [Subscript(Name('time_tuple', Load(), lineno=306, col_offset=46), Index(Num(8, lineno=306, col_offset=57)), Load(), lineno=306, col_offset=46)], lineno=306, col_offset=28), BinOp(Str("timezone check failed; '%s' -> %s != %s", lineno=307, col_offset=28), Mod(), Tuple([Name('strf_output', Load(), lineno=308, col_offset=30), Subscript(Name('strp_output', Load(), lineno=308, col_offset=43), Index(Num(8, lineno=308, col_offset=55)), Load(), lineno=308, col_offset=43), Subscript(Name('time_tuple', Load(), lineno=308, col_offset=59), Index(Num(8, lineno=308, col_offset=70)), Load(), lineno=308, col_offset=59)], Load(), lineno=308, col_offset=30), lineno=307, col_offset=28)], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=310, col_offset=12), 'assertTrue', Load(), lineno=310, col_offset=12), [Compare(Subscript(Name('strp_output', Load(), lineno=310, col_offset=28), Index(Num(8, lineno=310, col_offset=40)), Load(), lineno=310, col_offset=28), [Eq()], [Num(-1, lineno=310, col_offset=47)], lineno=310, col_offset=28), Str('LocaleTime().timezone has duplicate values and time.daylight but timezone value not set to -1', lineno=311, col_offset=28)], [], None, None, lineno=310, col_offset=12), lineno=310, col_offset=12)], lineno=305, col_offset=8)], [], lineno=292, col_offset=4), FunctionDef('test_bad_timezone', arguments([Name('self', Param(), lineno=314, col_offset=26)], None, None, []), [Assign([Name('tz_name', Store(), lineno=317, col_offset=8)], Subscript(Attribute(Name('time', Load(), lineno=317, col_offset=18), 'tzname', Load(), lineno=317, col_offset=18), Index(Num(0, lineno=317, col_offset=30)), Load(), lineno=317, col_offset=18), lineno=317, col_offset=8), If(Compare(Call(Attribute(Name('tz_name', Load(), lineno=318, col_offset=11), 'upper', Load(), lineno=318, col_offset=11), [], [], None, None, lineno=318, col_offset=11), [In()], [Tuple([Str('UTC', lineno=318, col_offset=31), Str('GMT', lineno=318, col_offset=38)], Load(), lineno=318, col_offset=31)], lineno=318, col_offset=11), [Return(None, lineno=319, col_offset=12)], [], lineno=318, col_offset=8), TryFinally([Assign([Name('original_tzname', Store(), lineno=321, col_offset=12)], Attribute(Name('time', Load(), lineno=321, col_offset=30), 'tzname', Load(), lineno=321, col_offset=30), lineno=321, col_offset=12), Assign([Name('original_daylight', Store(), lineno=322, col_offset=12)], Attribute(Name('time', Load(), lineno=322, col_offset=32), 'daylight', Load(), lineno=322, col_offset=32), lineno=322, col_offset=12), Assign([Attribute(Name('time', Load(), lineno=323, col_offset=12), 'tzname', Store(), lineno=323, col_offset=12)], Tuple([Name('tz_name', Load(), lineno=323, col_offset=27), Name('tz_name', Load(), lineno=323, col_offset=36)], Load(), lineno=323, col_offset=27), lineno=323, col_offset=12), Assign([Attribute(Name('time', Load(), lineno=324, col_offset=12), 'daylight', Store(), lineno=324, col_offset=12)], Num(1, lineno=324, col_offset=28), lineno=324, col_offset=12), Assign([Name('tz_value', Store(), lineno=325, col_offset=12)], Subscript(Call(Attribute(Name('_strptime', Load(), lineno=325, col_offset=23), '_strptime_time', Load(), lineno=325, col_offset=23), [Name('tz_name', Load(), lineno=325, col_offset=48), Str('%Z', lineno=325, col_offset=57)], [], None, None, lineno=325, col_offset=23), Index(Num(8, lineno=325, col_offset=63)), Load(), lineno=325, col_offset=23), lineno=325, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=326, col_offset=12), 'assertEqual', Load(), lineno=326, col_offset=12), [Name('tz_value', Load(), lineno=326, col_offset=29), Num(-1, lineno=326, col_offset=40), BinOp(Str('%s lead to a timezone value of %s instead of -1 when time.daylight set to %s and passing in %s', lineno=327, col_offset=20), Mod(), Tuple([Attribute(Name('time', Load(), lineno=329, col_offset=21), 'tzname', Load(), lineno=329, col_offset=21), Name('tz_value', Load(), lineno=329, col_offset=34), Attribute(Name('time', Load(), lineno=329, col_offset=44), 'daylight', Load(), lineno=329, col_offset=44), Name('tz_name', Load(), lineno=329, col_offset=59)], Load(), lineno=329, col_offset=21), lineno=327, col_offset=20)], [], None, None, lineno=326, col_offset=12), lineno=326, col_offset=12)], [Assign([Attribute(Name('time', Load(), lineno=331, col_offset=12), 'tzname', Store(), lineno=331, col_offset=12)], Name('original_tzname', Load(), lineno=331, col_offset=26), lineno=331, col_offset=12), Assign([Attribute(Name('time', Load(), lineno=332, col_offset=12), 'daylight', Store(), lineno=332, col_offset=12)], Name('original_daylight', Load(), lineno=332, col_offset=28), lineno=332, col_offset=12)], lineno=320, col_offset=8)], [], lineno=314, col_offset=4), FunctionDef('test_date_time', arguments([Name('self', Param(), lineno=334, col_offset=23)], None, None, []), [For(Name('position', Store(), lineno=336, col_offset=12), Call(Name('range', Load(), lineno=336, col_offset=24), [Num(6, lineno=336, col_offset=30)], [], None, None, lineno=336, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=337, col_offset=12), 'helper', Load(), lineno=337, col_offset=12), [Str('c', lineno=337, col_offset=24), Name('position', Load(), lineno=337, col_offset=29)], [], None, None, lineno=337, col_offset=12), lineno=337, col_offset=12)], [], lineno=336, col_offset=8)], [], lineno=334, col_offset=4), FunctionDef('test_date', arguments([Name('self', Param(), lineno=339, col_offset=18)], None, None, []), [For(Name('position', Store(), lineno=341, col_offset=12), Call(Name('range', Load(), lineno=341, col_offset=24), [Num(0, lineno=341, col_offset=30), Num(3, lineno=341, col_offset=32)], [], None, None, lineno=341, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=342, col_offset=12), 'helper', Load(), lineno=342, col_offset=12), [Str('x', lineno=342, col_offset=24), Name('position', Load(), lineno=342, col_offset=29)], [], None, None, lineno=342, col_offset=12), lineno=342, col_offset=12)], [], lineno=341, col_offset=8)], [], lineno=339, col_offset=4), FunctionDef('test_time', arguments([Name('self', Param(), lineno=344, col_offset=18)], None, None, []), [For(Name('position', Store(), lineno=346, col_offset=12), Call(Name('range', Load(), lineno=346, col_offset=24), [Num(3, lineno=346, col_offset=30), Num(6, lineno=346, col_offset=32)], [], None, None, lineno=346, col_offset=24), [Expr(Call(Attribute(Name('self', Load(), lineno=347, col_offset=12), 'helper', Load(), lineno=347, col_offset=12), [Str('X', lineno=347, col_offset=24), Name('position', Load(), lineno=347, col_offset=29)], [], None, None, lineno=347, col_offset=12), lineno=347, col_offset=12)], [], lineno=346, col_offset=8)], [], lineno=344, col_offset=4), FunctionDef('test_percent', arguments([Name('self', Param(), lineno=349, col_offset=21)], None, None, []), [Assign([Name('strf_output', Store(), lineno=351, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=351, col_offset=22), 'strftime', Load(), lineno=351, col_offset=22), [Str('%m %% %Y', lineno=351, col_offset=36), Attribute(Name('self', Load(), lineno=351, col_offset=48), 'time_tuple', Load(), lineno=351, col_offset=48)], [], None, None, lineno=351, col_offset=22), lineno=351, col_offset=8), Assign([Name('strp_output', Store(), lineno=352, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=352, col_offset=22), '_strptime_time', Load(), lineno=352, col_offset=22), [Name('strf_output', Load(), lineno=352, col_offset=47), Str('%m %% %Y', lineno=352, col_offset=60)], [], None, None, lineno=352, col_offset=22), lineno=352, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=353, col_offset=8), 'assertTrue', Load(), lineno=353, col_offset=8), [BoolOp(And(), [Compare(Subscript(Name('strp_output', Load(), lineno=353, col_offset=24), Index(Num(0, lineno=353, col_offset=36)), Load(), lineno=353, col_offset=24), [Eq()], [Subscript(Attribute(Name('self', Load(), lineno=353, col_offset=42), 'time_tuple', Load(), lineno=353, col_offset=42), Index(Num(0, lineno=353, col_offset=58)), Load(), lineno=353, col_offset=42)], lineno=353, col_offset=24), Compare(Subscript(Name('strp_output', Load(), lineno=354, col_offset=25), Index(Num(1, lineno=354, col_offset=37)), Load(), lineno=354, col_offset=25), [Eq()], [Subscript(Attribute(Name('self', Load(), lineno=354, col_offset=43), 'time_tuple', Load(), lineno=354, col_offset=43), Index(Num(1, lineno=354, col_offset=59)), Load(), lineno=354, col_offset=43)], lineno=354, col_offset=25)], lineno=353, col_offset=24), Str('handling of percent sign failed', lineno=355, col_offset=24)], [], None, None, lineno=353, col_offset=8), lineno=353, col_offset=8)], [], lineno=349, col_offset=4), FunctionDef('test_caseinsensitive', arguments([Name('self', Param(), lineno=357, col_offset=29)], None, None, []), [Assign([Name('strf_output', Store(), lineno=359, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=359, col_offset=22), 'strftime', Load(), lineno=359, col_offset=22), [Str('%B', lineno=359, col_offset=36), Attribute(Name('self', Load(), lineno=359, col_offset=42), 'time_tuple', Load(), lineno=359, col_offset=42)], [], None, None, lineno=359, col_offset=22), lineno=359, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=360, col_offset=8), 'assertTrue', Load(), lineno=360, col_offset=8), [Call(Attribute(Name('_strptime', Load(), lineno=360, col_offset=24), '_strptime_time', Load(), lineno=360, col_offset=24), [Call(Attribute(Name('strf_output', Load(), lineno=360, col_offset=49), 'upper', Load(), lineno=360, col_offset=49), [], [], None, None, lineno=360, col_offset=49), Str('%B', lineno=360, col_offset=70)], [], None, None, lineno=360, col_offset=24), Str('strptime does not handle ALL-CAPS names properly', lineno=361, col_offset=24)], [], None, None, lineno=360, col_offset=8), lineno=360, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=362, col_offset=8), 'assertTrue', Load(), lineno=362, col_offset=8), [Call(Attribute(Name('_strptime', Load(), lineno=362, col_offset=24), '_strptime_time', Load(), lineno=362, col_offset=24), [Call(Attribute(Name('strf_output', Load(), lineno=362, col_offset=49), 'lower', Load(), lineno=362, col_offset=49), [], [], None, None, lineno=362, col_offset=49), Str('%B', lineno=362, col_offset=70)], [], None, None, lineno=362, col_offset=24), Str('strptime does not handle lowercase names properly', lineno=363, col_offset=24)], [], None, None, lineno=362, col_offset=8), lineno=362, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=364, col_offset=8), 'assertTrue', Load(), lineno=364, col_offset=8), [Call(Attribute(Name('_strptime', Load(), lineno=364, col_offset=24), '_strptime_time', Load(), lineno=364, col_offset=24), [Call(Attribute(Name('strf_output', Load(), lineno=364, col_offset=49), 'capitalize', Load(), lineno=364, col_offset=49), [], [], None, None, lineno=364, col_offset=49), Str('%B', lineno=364, col_offset=75)], [], None, None, lineno=364, col_offset=24), Str('strptime does not handle capword names properly', lineno=365, col_offset=24)], [], None, None, lineno=364, col_offset=8), lineno=364, col_offset=8)], [], lineno=357, col_offset=4), FunctionDef('test_defaults', arguments([Name('self', Param(), lineno=367, col_offset=22)], None, None, []), [Assign([Name('defaults', Store(), lineno=369, col_offset=8)], Tuple([Num(1900, lineno=369, col_offset=20), Num(1, lineno=369, col_offset=26), Num(1, lineno=369, col_offset=29), Num(0, lineno=369, col_offset=32), Num(0, lineno=369, col_offset=35), Num(0, lineno=369, col_offset=38), Num(0, lineno=369, col_offset=41), Num(1, lineno=369, col_offset=44), Num(-1, lineno=369, col_offset=48)], Load(), lineno=369, col_offset=20), lineno=369, col_offset=8), Assign([Name('strp_output', Store(), lineno=370, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=370, col_offset=22), '_strptime_time', Load(), lineno=370, col_offset=22), [Str('1', lineno=370, col_offset=47), Str('%m', lineno=370, col_offset=52)], [], None, None, lineno=370, col_offset=22), lineno=370, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=371, col_offset=8), 'assertTrue', Load(), lineno=371, col_offset=8), [Compare(Name('strp_output', Load(), lineno=371, col_offset=24), [Eq()], [Name('defaults', Load(), lineno=371, col_offset=39)], lineno=371, col_offset=24), BinOp(Str('Default values for strptime() are incorrect; %s != %s', lineno=372, col_offset=24), Mod(), Tuple([Name('strp_output', Load(), lineno=373, col_offset=39), Name('defaults', Load(), lineno=373, col_offset=52)], Load(), lineno=373, col_offset=39), lineno=372, col_offset=24)], [], None, None, lineno=371, col_offset=8), lineno=371, col_offset=8)], [], lineno=367, col_offset=4), FunctionDef('test_escaping', arguments([Name('self', Param(), lineno=375, col_offset=22)], None, None, []), [Assign([Name('need_escaping', Store(), lineno=381, col_offset=8)], Str('.^$*+?{}\\[]|)(', lineno=381, col_offset=24), lineno=381, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'assertTrue', Load(), lineno=382, col_offset=8), [Call(Attribute(Name('_strptime', Load(), lineno=382, col_offset=24), '_strptime_time', Load(), lineno=382, col_offset=24), [Name('need_escaping', Load(), lineno=382, col_offset=49), Name('need_escaping', Load(), lineno=382, col_offset=64)], [], None, None, lineno=382, col_offset=24)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8)], [], lineno=375, col_offset=4)], [], lineno=202, col_offset=0), ClassDef('Strptime12AMPMTests', [Attribute(Name('unittest', Load(), lineno=384, col_offset=26), 'TestCase', Load(), lineno=384, col_offset=26)], [Expr(Str("Test a _strptime regression in '%I %p' at 12 noon (12 PM)", lineno=385, col_offset=4), lineno=385, col_offset=4), FunctionDef('test_twelve_noon_midnight', arguments([Name('self', Param(), lineno=387, col_offset=34)], None, None, []), [Assign([Name('eq', Store(), lineno=388, col_offset=8)], Attribute(Name('self', Load(), lineno=388, col_offset=13), 'assertEqual', Load(), lineno=388, col_offset=13), lineno=388, col_offset=8), Expr(Call(Name('eq', Load(), lineno=389, col_offset=8), [Subscript(Call(Attribute(Name('time', Load(), lineno=389, col_offset=11), 'strptime', Load(), lineno=389, col_offset=11), [Str('12 PM', lineno=389, col_offset=25), Str('%I %p', lineno=389, col_offset=34)], [], None, None, lineno=389, col_offset=11), Index(Num(3, lineno=389, col_offset=43)), Load(), lineno=389, col_offset=11), Num(12, lineno=389, col_offset=47)], [], None, None, lineno=389, col_offset=8), lineno=389, col_offset=8), Expr(Call(Name('eq', Load(), lineno=390, col_offset=8), [Subscript(Call(Attribute(Name('time', Load(), lineno=390, col_offset=11), 'strptime', Load(), lineno=390, col_offset=11), [Str('12 AM', lineno=390, col_offset=25), Str('%I %p', lineno=390, col_offset=34)], [], None, None, lineno=390, col_offset=11), Index(Num(3, lineno=390, col_offset=43)), Load(), lineno=390, col_offset=11), Num(0, lineno=390, col_offset=47)], [], None, None, lineno=390, col_offset=8), lineno=390, col_offset=8), Expr(Call(Name('eq', Load(), lineno=391, col_offset=8), [Subscript(Call(Attribute(Name('_strptime', Load(), lineno=391, col_offset=11), '_strptime_time', Load(), lineno=391, col_offset=11), [Str('12 PM', lineno=391, col_offset=36), Str('%I %p', lineno=391, col_offset=45)], [], None, None, lineno=391, col_offset=11), Index(Num(3, lineno=391, col_offset=54)), Load(), lineno=391, col_offset=11), Num(12, lineno=391, col_offset=58)], [], None, None, lineno=391, col_offset=8), lineno=391, col_offset=8), Expr(Call(Name('eq', Load(), lineno=392, col_offset=8), [Subscript(Call(Attribute(Name('_strptime', Load(), lineno=392, col_offset=11), '_strptime_time', Load(), lineno=392, col_offset=11), [Str('12 AM', lineno=392, col_offset=36), Str('%I %p', lineno=392, col_offset=45)], [], None, None, lineno=392, col_offset=11), Index(Num(3, lineno=392, col_offset=54)), Load(), lineno=392, col_offset=11), Num(0, lineno=392, col_offset=58)], [], None, None, lineno=392, col_offset=8), lineno=392, col_offset=8)], [], lineno=387, col_offset=4)], [], lineno=384, col_offset=0), ClassDef('JulianTests', [Attribute(Name('unittest', Load(), lineno=395, col_offset=18), 'TestCase', Load(), lineno=395, col_offset=18)], [Expr(Str('Test a _strptime regression that all julian (1-366) are accepted', lineno=396, col_offset=4), lineno=396, col_offset=4), FunctionDef('test_all_julian_days', arguments([Name('self', Param(), lineno=398, col_offset=29)], None, None, []), [Assign([Name('eq', Store(), lineno=399, col_offset=8)], Attribute(Name('self', Load(), lineno=399, col_offset=13), 'assertEqual', Load(), lineno=399, col_offset=13), lineno=399, col_offset=8), For(Name('i', Store(), lineno=400, col_offset=12), Call(Name('range', Load(), lineno=400, col_offset=17), [Num(1, lineno=400, col_offset=23), Num(367, lineno=400, col_offset=26)], [], None, None, lineno=400, col_offset=17), [Expr(Call(Name('eq', Load(), lineno=402, col_offset=12), [Subscript(Call(Attribute(Name('_strptime', Load(), lineno=402, col_offset=15), '_strptime_time', Load(), lineno=402, col_offset=15), [BinOp(Str('%d 2004', lineno=402, col_offset=40), Mod(), Name('i', Load(), lineno=402, col_offset=52), lineno=402, col_offset=40), Str('%j %Y', lineno=402, col_offset=55)], [], None, None, lineno=402, col_offset=15), Index(Num(7, lineno=402, col_offset=64)), Load(), lineno=402, col_offset=15), Name('i', Load(), lineno=402, col_offset=68)], [], None, None, lineno=402, col_offset=12), lineno=402, col_offset=12)], [], lineno=400, col_offset=8)], [], lineno=398, col_offset=4)], [], lineno=395, col_offset=0), ClassDef('CalculationTests', [Attribute(Name('unittest', Load(), lineno=404, col_offset=23), 'TestCase', Load(), lineno=404, col_offset=23)], [Expr(Str('Test that strptime() fills in missing info correctly', lineno=405, col_offset=4), lineno=405, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=407, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=408, col_offset=8), 'time_tuple', Store(), lineno=408, col_offset=8)], Call(Attribute(Name('time', Load(), lineno=408, col_offset=26), 'gmtime', Load(), lineno=408, col_offset=26), [], [], None, None, lineno=408, col_offset=26), lineno=408, col_offset=8)], [], lineno=407, col_offset=4), FunctionDef('test_julian_calculation', arguments([Name('self', Param(), lineno=410, col_offset=32)], None, None, []), [Assign([Name('format_string', Store(), lineno=412, col_offset=8)], Str('%Y %m %d %H %M %S %w %Z', lineno=412, col_offset=24), lineno=412, col_offset=8), Assign([Name('result', Store(), lineno=413, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=413, col_offset=17), '_strptime_time', Load(), lineno=413, col_offset=17), [Call(Attribute(Name('time', Load(), lineno=413, col_offset=42), 'strftime', Load(), lineno=413, col_offset=42), [Name('format_string', Load(), lineno=413, col_offset=56), Attribute(Name('self', Load(), lineno=413, col_offset=71), 'time_tuple', Load(), lineno=413, col_offset=71)], [], None, None, lineno=413, col_offset=42), Name('format_string', Load(), lineno=414, col_offset=36)], [], None, None, lineno=413, col_offset=17), lineno=413, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=415, col_offset=8), 'assertTrue', Load(), lineno=415, col_offset=8), [Compare(Attribute(Name('result', Load(), lineno=415, col_offset=24), 'tm_yday', Load(), lineno=415, col_offset=24), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=415, col_offset=42), 'time_tuple', Load(), lineno=415, col_offset=42), 'tm_yday', Load(), lineno=415, col_offset=42)], lineno=415, col_offset=24), BinOp(Str('Calculation of tm_yday failed; %s != %s', lineno=416, col_offset=24), Mod(), Tuple([Attribute(Name('result', Load(), lineno=417, col_offset=26), 'tm_yday', Load(), lineno=417, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=417, col_offset=42), 'time_tuple', Load(), lineno=417, col_offset=42), 'tm_yday', Load(), lineno=417, col_offset=42)], Load(), lineno=417, col_offset=26), lineno=416, col_offset=24)], [], None, None, lineno=415, col_offset=8), lineno=415, col_offset=8)], [], lineno=410, col_offset=4), FunctionDef('test_gregorian_calculation', arguments([Name('self', Param(), lineno=419, col_offset=35)], None, None, []), [Assign([Name('format_string', Store(), lineno=421, col_offset=8)], Str('%Y %H %M %S %w %j %Z', lineno=421, col_offset=24), lineno=421, col_offset=8), Assign([Name('result', Store(), lineno=422, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=422, col_offset=17), '_strptime_time', Load(), lineno=422, col_offset=17), [Call(Attribute(Name('time', Load(), lineno=422, col_offset=42), 'strftime', Load(), lineno=422, col_offset=42), [Name('format_string', Load(), lineno=422, col_offset=56), Attribute(Name('self', Load(), lineno=422, col_offset=71), 'time_tuple', Load(), lineno=422, col_offset=71)], [], None, None, lineno=422, col_offset=42), Name('format_string', Load(), lineno=423, col_offset=36)], [], None, None, lineno=422, col_offset=17), lineno=422, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=424, col_offset=8), 'assertTrue', Load(), lineno=424, col_offset=8), [BoolOp(And(), [Compare(Attribute(Name('result', Load(), lineno=424, col_offset=24), 'tm_year', Load(), lineno=424, col_offset=24), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=424, col_offset=42), 'time_tuple', Load(), lineno=424, col_offset=42), 'tm_year', Load(), lineno=424, col_offset=42)], lineno=424, col_offset=24), Compare(Attribute(Name('result', Load(), lineno=425, col_offset=25), 'tm_mon', Load(), lineno=425, col_offset=25), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=425, col_offset=42), 'time_tuple', Load(), lineno=425, col_offset=42), 'tm_mon', Load(), lineno=425, col_offset=42)], lineno=425, col_offset=25), Compare(Attribute(Name('result', Load(), lineno=426, col_offset=25), 'tm_mday', Load(), lineno=426, col_offset=25), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=426, col_offset=43), 'time_tuple', Load(), lineno=426, col_offset=43), 'tm_mday', Load(), lineno=426, col_offset=43)], lineno=426, col_offset=25)], lineno=424, col_offset=24), BinOp(Str('Calculation of Gregorian date failed;%s-%s-%s != %s-%s-%s', lineno=427, col_offset=24), Mod(), Tuple([Attribute(Name('result', Load(), lineno=429, col_offset=26), 'tm_year', Load(), lineno=429, col_offset=26), Attribute(Name('result', Load(), lineno=429, col_offset=42), 'tm_mon', Load(), lineno=429, col_offset=42), Attribute(Name('result', Load(), lineno=429, col_offset=57), 'tm_mday', Load(), lineno=429, col_offset=57), Attribute(Attribute(Name('self', Load(), lineno=430, col_offset=26), 'time_tuple', Load(), lineno=430, col_offset=26), 'tm_year', Load(), lineno=430, col_offset=26), Attribute(Attribute(Name('self', Load(), lineno=430, col_offset=51), 'time_tuple', Load(), lineno=430, col_offset=51), 'tm_mon', Load(), lineno=430, col_offset=51), Attribute(Attribute(Name('self', Load(), lineno=431, col_offset=26), 'time_tuple', Load(), lineno=431, col_offset=26), 'tm_mday', Load(), lineno=431, col_offset=26)], Load(), lineno=429, col_offset=26), lineno=427, col_offset=24)], [], None, None, lineno=424, col_offset=8), lineno=424, col_offset=8)], [], lineno=419, col_offset=4), FunctionDef('test_day_of_week_calculation', arguments([Name('self', Param(), lineno=433, col_offset=37)], None, None, []), [Assign([Name('format_string', Store(), lineno=435, col_offset=8)], Str('%Y %m %d %H %S %j %Z', lineno=435, col_offset=24), lineno=435, col_offset=8), Assign([Name('result', Store(), lineno=436, col_offset=8)], Call(Attribute(Name('_strptime', Load(), lineno=436, col_offset=17), '_strptime_time', Load(), lineno=436, col_offset=17), [Call(Attribute(Name('time', Load(), lineno=436, col_offset=42), 'strftime', Load(), lineno=436, col_offset=42), [Name('format_string', Load(), lineno=436, col_offset=56), Attribute(Name('self', Load(), lineno=436, col_offset=71), 'time_tuple', Load(), lineno=436, col_offset=71)], [], None, None, lineno=436, col_offset=42), Name('format_string', Load(), lineno=437, col_offset=36)], [], None, None, lineno=436, col_offset=17), lineno=436, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=438, col_offset=8), 'assertTrue', Load(), lineno=438, col_offset=8), [Compare(Attribute(Name('result', Load(), lineno=438, col_offset=24), 'tm_wday', Load(), lineno=438, col_offset=24), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=438, col_offset=42), 'time_tuple', Load(), lineno=438, col_offset=42), 'tm_wday', Load(), lineno=438, col_offset=42)], lineno=438, col_offset=24), BinOp(Str('Calculation of day of the week failed;%s != %s', lineno=439, col_offset=24), Mod(), Tuple([Attribute(Name('result', Load(), lineno=440, col_offset=39), 'tm_wday', Load(), lineno=440, col_offset=39), Attribute(Attribute(Name('self', Load(), lineno=440, col_offset=55), 'time_tuple', Load(), lineno=440, col_offset=55), 'tm_wday', Load(), lineno=440, col_offset=55)], Load(), lineno=440, col_offset=39), lineno=439, col_offset=24)], [], None, None, lineno=438, col_offset=8), lineno=438, col_offset=8)], [], lineno=433, col_offset=4), FunctionDef('test_week_of_year_and_day_of_week_calculation', arguments([Name('self', Param(), lineno=442, col_offset=54)], None, None, []), [FunctionDef('test_helper', arguments([Name('ymd_tuple', Param(), lineno=445, col_offset=24), Name('test_reason', Param(), lineno=445, col_offset=35)], None, None, []), [For(Name('directive', Store(), lineno=446, col_offset=16), Tuple([Str('W', lineno=446, col_offset=30), Str('U', lineno=446, col_offset=35)], Load(), lineno=446, col_offset=30), [Assign([Name('format_string', Store(), lineno=447, col_offset=16)], BinOp(Str('%%Y %%%s %%w', lineno=447, col_offset=32), Mod(), Name('directive', Load(), lineno=447, col_offset=49), lineno=447, col_offset=32), lineno=447, col_offset=16), Assign([Name('dt_date', Store(), lineno=448, col_offset=16)], Call(Name('datetime_date', Load(), lineno=448, col_offset=26), [], [], Name('ymd_tuple', Load(), lineno=448, col_offset=41), None, lineno=448, col_offset=26), lineno=448, col_offset=16), Assign([Name('strp_input', Store(), lineno=449, col_offset=16)], Call(Attribute(Name('dt_date', Load(), lineno=449, col_offset=29), 'strftime', Load(), lineno=449, col_offset=29), [Name('format_string', Load(), lineno=449, col_offset=46)], [], None, None, lineno=449, col_offset=29), lineno=449, col_offset=16), Assign([Name('strp_output', Store(), lineno=450, col_offset=16)], Call(Attribute(Name('_strptime', Load(), lineno=450, col_offset=30), '_strptime_time', Load(), lineno=450, col_offset=30), [Name('strp_input', Load(), lineno=450, col_offset=55), Name('format_string', Load(), lineno=450, col_offset=67)], [], None, None, lineno=450, col_offset=30), lineno=450, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=451, col_offset=16), 'assertTrue', Load(), lineno=451, col_offset=16), [Compare(Subscript(Name('strp_output', Load(), lineno=451, col_offset=32), Slice(None, Num(3, lineno=451, col_offset=45), None), Load(), lineno=451, col_offset=32), [Eq()], [Name('ymd_tuple', Load(), lineno=451, col_offset=51)], lineno=451, col_offset=32), BinOp(Str("%s(%s) test failed w/ '%s': %s != %s (%s != %s)", lineno=452, col_offset=24), Mod(), Tuple([Name('test_reason', Load(), lineno=453, col_offset=29), Name('directive', Load(), lineno=453, col_offset=42), Name('strp_input', Load(), lineno=453, col_offset=53), Subscript(Name('strp_output', Load(), lineno=454, col_offset=32), Slice(None, Num(3, lineno=454, col_offset=45), None), Load(), lineno=454, col_offset=32), Name('ymd_tuple', Load(), lineno=454, col_offset=49), Subscript(Name('strp_output', Load(), lineno=455, col_offset=32), Index(Num(7, lineno=455, col_offset=44)), Load(), lineno=455, col_offset=32), Subscript(Call(Attribute(Name('dt_date', Load(), lineno=455, col_offset=48), 'timetuple', Load(), lineno=455, col_offset=48), [], [], None, None, lineno=455, col_offset=48), Index(Num(7, lineno=455, col_offset=68)), Load(), lineno=455, col_offset=48)], Load(), lineno=453, col_offset=29), lineno=452, col_offset=24)], [], None, None, lineno=451, col_offset=16), lineno=451, col_offset=16)], [], lineno=446, col_offset=12)], [], lineno=445, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=456, col_offset=8), [Tuple([Num(1901, lineno=456, col_offset=21), Num(1, lineno=456, col_offset=27), Num(3, lineno=456, col_offset=30)], Load(), lineno=456, col_offset=21), Str('week 0', lineno=456, col_offset=34)], [], None, None, lineno=456, col_offset=8), lineno=456, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=457, col_offset=8), [Tuple([Num(1901, lineno=457, col_offset=21), Num(1, lineno=457, col_offset=27), Num(8, lineno=457, col_offset=30)], Load(), lineno=457, col_offset=21), Str('common case', lineno=457, col_offset=34)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=458, col_offset=8), [Tuple([Num(1901, lineno=458, col_offset=21), Num(1, lineno=458, col_offset=27), Num(13, lineno=458, col_offset=30)], Load(), lineno=458, col_offset=21), Str('day on Sunday', lineno=458, col_offset=35)], [], None, None, lineno=458, col_offset=8), lineno=458, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=459, col_offset=8), [Tuple([Num(1901, lineno=459, col_offset=21), Num(1, lineno=459, col_offset=27), Num(14, lineno=459, col_offset=30)], Load(), lineno=459, col_offset=21), Str('day on Monday', lineno=459, col_offset=35)], [], None, None, lineno=459, col_offset=8), lineno=459, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=460, col_offset=8), [Tuple([Num(1905, lineno=460, col_offset=21), Num(1, lineno=460, col_offset=27), Num(1, lineno=460, col_offset=30)], Load(), lineno=460, col_offset=21), Str('Jan 1 on Sunday', lineno=460, col_offset=34)], [], None, None, lineno=460, col_offset=8), lineno=460, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=461, col_offset=8), [Tuple([Num(1906, lineno=461, col_offset=21), Num(1, lineno=461, col_offset=27), Num(1, lineno=461, col_offset=30)], Load(), lineno=461, col_offset=21), Str('Jan 1 on Monday', lineno=461, col_offset=34)], [], None, None, lineno=461, col_offset=8), lineno=461, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=462, col_offset=8), [Tuple([Num(1906, lineno=462, col_offset=21), Num(1, lineno=462, col_offset=27), Num(7, lineno=462, col_offset=30)], Load(), lineno=462, col_offset=21), Str('first Sunday in a year starting on Monday', lineno=462, col_offset=34)], [], None, None, lineno=462, col_offset=8), lineno=462, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=463, col_offset=8), [Tuple([Num(1905, lineno=463, col_offset=21), Num(12, lineno=463, col_offset=27), Num(31, lineno=463, col_offset=31)], Load(), lineno=463, col_offset=21), Str('Dec 31 on Sunday', lineno=463, col_offset=36)], [], None, None, lineno=463, col_offset=8), lineno=463, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=464, col_offset=8), [Tuple([Num(1906, lineno=464, col_offset=21), Num(12, lineno=464, col_offset=27), Num(31, lineno=464, col_offset=31)], Load(), lineno=464, col_offset=21), Str('Dec 31 on Monday', lineno=464, col_offset=36)], [], None, None, lineno=464, col_offset=8), lineno=464, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=465, col_offset=8), [Tuple([Num(2008, lineno=465, col_offset=21), Num(12, lineno=465, col_offset=27), Num(29, lineno=465, col_offset=31)], Load(), lineno=465, col_offset=21), Str('Monday in the last week of the year', lineno=465, col_offset=36)], [], None, None, lineno=465, col_offset=8), lineno=465, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=466, col_offset=8), [Tuple([Num(2008, lineno=466, col_offset=21), Num(12, lineno=466, col_offset=27), Num(22, lineno=466, col_offset=31)], Load(), lineno=466, col_offset=21), Str('Monday in the second-to-last week of the year', lineno=466, col_offset=36)], [], None, None, lineno=466, col_offset=8), lineno=466, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=468, col_offset=8), [Tuple([Num(1978, lineno=468, col_offset=21), Num(10, lineno=468, col_offset=27), Num(23, lineno=468, col_offset=31)], Load(), lineno=468, col_offset=21), Str('randomly chosen date', lineno=468, col_offset=36)], [], None, None, lineno=468, col_offset=8), lineno=468, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=469, col_offset=8), [Tuple([Num(2004, lineno=469, col_offset=21), Num(12, lineno=469, col_offset=27), Num(18, lineno=469, col_offset=31)], Load(), lineno=469, col_offset=21), Str('randomly chosen date', lineno=469, col_offset=36)], [], None, None, lineno=469, col_offset=8), lineno=469, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=470, col_offset=8), [Tuple([Num(1978, lineno=470, col_offset=21), Num(10, lineno=470, col_offset=27), Num(23, lineno=470, col_offset=31)], Load(), lineno=470, col_offset=21), Str('year starting and ending on Monday while date not on Sunday or Monday', lineno=470, col_offset=36)], [], None, None, lineno=470, col_offset=8), lineno=470, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=472, col_offset=8), [Tuple([Num(1917, lineno=472, col_offset=21), Num(12, lineno=472, col_offset=27), Num(17, lineno=472, col_offset=31)], Load(), lineno=472, col_offset=21), Str('year starting and ending on Monday with a Monday not at the beginning or end of the year', lineno=472, col_offset=36)], [], None, None, lineno=472, col_offset=8), lineno=472, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=475, col_offset=8), [Tuple([Num(1917, lineno=475, col_offset=21), Num(12, lineno=475, col_offset=27), Num(31, lineno=475, col_offset=31)], Load(), lineno=475, col_offset=21), Str('Dec 31 on Monday with year starting and ending on Monday', lineno=475, col_offset=36)], [], None, None, lineno=475, col_offset=8), lineno=475, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=477, col_offset=8), [Tuple([Num(2007, lineno=477, col_offset=21), Num(1, lineno=477, col_offset=27), Num(7, lineno=477, col_offset=31)], Load(), lineno=477, col_offset=21), Str('First Sunday of 2007', lineno=477, col_offset=36)], [], None, None, lineno=477, col_offset=8), lineno=477, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=478, col_offset=8), [Tuple([Num(2007, lineno=478, col_offset=21), Num(1, lineno=478, col_offset=27), Num(14, lineno=478, col_offset=31)], Load(), lineno=478, col_offset=21), Str('Second Sunday of 2007', lineno=478, col_offset=36)], [], None, None, lineno=478, col_offset=8), lineno=478, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=479, col_offset=8), [Tuple([Num(2006, lineno=479, col_offset=21), Num(12, lineno=479, col_offset=27), Num(31, lineno=479, col_offset=31)], Load(), lineno=479, col_offset=21), Str('Last Sunday of 2006', lineno=479, col_offset=36)], [], None, None, lineno=479, col_offset=8), lineno=479, col_offset=8), Expr(Call(Name('test_helper', Load(), lineno=480, col_offset=8), [Tuple([Num(2006, lineno=480, col_offset=21), Num(12, lineno=480, col_offset=27), Num(24, lineno=480, col_offset=31)], Load(), lineno=480, col_offset=21), Str('Second to last Sunday of 2006', lineno=480, col_offset=36)], [], None, None, lineno=480, col_offset=8), lineno=480, col_offset=8)], [], lineno=442, col_offset=4)], [], lineno=404, col_offset=0), ClassDef('CacheTests', [Attribute(Name('unittest', Load(), lineno=483, col_offset=17), 'TestCase', Load(), lineno=483, col_offset=17)], [Expr(Str('Test that caching works properly.', lineno=484, col_offset=4), lineno=484, col_offset=4), FunctionDef('test_time_re_recreation', arguments([Name('self', Param(), lineno=486, col_offset=32)], None, None, []), [Expr(Call(Attribute(Name('_strptime', Load(), lineno=489, col_offset=8), '_strptime_time', Load(), lineno=489, col_offset=8), [Str('10', lineno=489, col_offset=33), Str('%d', lineno=489, col_offset=39)], [], None, None, lineno=489, col_offset=8), lineno=489, col_offset=8), Expr(Call(Attribute(Name('_strptime', Load(), lineno=490, col_offset=8), '_strptime_time', Load(), lineno=490, col_offset=8), [Str('2005', lineno=490, col_offset=33), Str('%Y', lineno=490, col_offset=41)], [], None, None, lineno=490, col_offset=8), lineno=490, col_offset=8), Assign([Attribute(Attribute(Attribute(Name('_strptime', Load(), lineno=491, col_offset=8), '_TimeRE_cache', Load(), lineno=491, col_offset=8), 'locale_time', Load(), lineno=491, col_offset=8), 'lang', Store(), lineno=491, col_offset=8)], Str('Ni', lineno=491, col_offset=51), lineno=491, col_offset=8), Assign([Name('original_time_re', Store(), lineno=492, col_offset=8)], Attribute(Name('_strptime', Load(), lineno=492, col_offset=27), '_TimeRE_cache', Load(), lineno=492, col_offset=27), lineno=492, col_offset=8), Expr(Call(Attribute(Name('_strptime', Load(), lineno=493, col_offset=8), '_strptime_time', Load(), lineno=493, col_offset=8), [Str('10', lineno=493, col_offset=33), Str('%d', lineno=493, col_offset=39)], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=494, col_offset=8), 'assertIsNot', Load(), lineno=494, col_offset=8), [Name('original_time_re', Load(), lineno=494, col_offset=25), Attribute(Name('_strptime', Load(), lineno=494, col_offset=43), '_TimeRE_cache', Load(), lineno=494, col_offset=43)], [], None, None, lineno=494, col_offset=8), lineno=494, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=495, col_offset=8), 'assertEqual', Load(), lineno=495, col_offset=8), [Call(Name('len', Load(), lineno=495, col_offset=25), [Attribute(Name('_strptime', Load(), lineno=495, col_offset=29), '_regex_cache', Load(), lineno=495, col_offset=29)], [], None, None, lineno=495, col_offset=25), Num(1, lineno=495, col_offset=54)], [], None, None, lineno=495, col_offset=8), lineno=495, col_offset=8)], [], lineno=486, col_offset=4), FunctionDef('test_regex_cleanup', arguments([Name('self', Param(), lineno=497, col_offset=27)], None, None, []), [TryExcept([Delete([Subscript(Attribute(Name('_strptime', Load(), lineno=500, col_offset=16), '_regex_cache', Load(), lineno=500, col_offset=16), Index(Str('%d', lineno=500, col_offset=39)), Del(), lineno=500, col_offset=16)], lineno=500, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=501, col_offset=15), None, [Pass( lineno=502, col_offset=12)], lineno=501, col_offset=8)], [], lineno=499, col_offset=8), Assign([Name('bogus_key', Store(), lineno=503, col_offset=8)], Num(0, lineno=503, col_offset=20), lineno=503, col_offset=8), While(Compare(Call(Name('len', Load(), lineno=504, col_offset=14), [Attribute(Name('_strptime', Load(), lineno=504, col_offset=18), '_regex_cache', Load(), lineno=504, col_offset=18)], [], None, None, lineno=504, col_offset=14), [LtE()], [Attribute(Name('_strptime', Load(), lineno=504, col_offset=45), '_CACHE_MAX_SIZE', Load(), lineno=504, col_offset=45)], lineno=504, col_offset=14), [Assign([Subscript(Attribute(Name('_strptime', Load(), lineno=505, col_offset=12), '_regex_cache', Load(), lineno=505, col_offset=12), Index(Name('bogus_key', Load(), lineno=505, col_offset=35)), Store(), lineno=505, col_offset=12)], Name('None', Load(), lineno=505, col_offset=48), lineno=505, col_offset=12), AugAssign(Name('bogus_key', Store(), lineno=506, col_offset=12), Add(), Num(1, lineno=506, col_offset=25), lineno=506, col_offset=12)], [], lineno=504, col_offset=8), Expr(Call(Attribute(Name('_strptime', Load(), lineno=507, col_offset=8), '_strptime_time', Load(), lineno=507, col_offset=8), [Str('10', lineno=507, col_offset=33), Str('%d', lineno=507, col_offset=39)], [], None, None, lineno=507, col_offset=8), lineno=507, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=508, col_offset=8), 'assertEqual', Load(), lineno=508, col_offset=8), [Call(Name('len', Load(), lineno=508, col_offset=25), [Attribute(Name('_strptime', Load(), lineno=508, col_offset=29), '_regex_cache', Load(), lineno=508, col_offset=29)], [], None, None, lineno=508, col_offset=25), Num(1, lineno=508, col_offset=54)], [], None, None, lineno=508, col_offset=8), lineno=508, col_offset=8)], [], lineno=497, col_offset=4), FunctionDef('test_new_localetime', arguments([Name('self', Param(), lineno=510, col_offset=28)], None, None, []), [Assign([Name('locale_time_id', Store(), lineno=513, col_offset=8)], Attribute(Attribute(Name('_strptime', Load(), lineno=513, col_offset=25), '_TimeRE_cache', Load(), lineno=513, col_offset=25), 'locale_time', Load(), lineno=513, col_offset=25), lineno=513, col_offset=8), Assign([Attribute(Attribute(Attribute(Name('_strptime', Load(), lineno=514, col_offset=8), '_TimeRE_cache', Load(), lineno=514, col_offset=8), 'locale_time', Load(), lineno=514, col_offset=8), 'lang', Store(), lineno=514, col_offset=8)], Str('Ni', lineno=514, col_offset=51), lineno=514, col_offset=8), Expr(Call(Attribute(Name('_strptime', Load(), lineno=515, col_offset=8), '_strptime_time', Load(), lineno=515, col_offset=8), [Str('10', lineno=515, col_offset=33), Str('%d', lineno=515, col_offset=39)], [], None, None, lineno=515, col_offset=8), lineno=515, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=516, col_offset=8), 'assertIsNot', Load(), lineno=516, col_offset=8), [Name('locale_time_id', Load(), lineno=516, col_offset=25), Attribute(Attribute(Name('_strptime', Load(), lineno=516, col_offset=41), '_TimeRE_cache', Load(), lineno=516, col_offset=41), 'locale_time', Load(), lineno=516, col_offset=41)], [], None, None, lineno=516, col_offset=8), lineno=516, col_offset=8)], [], lineno=510, col_offset=4), FunctionDef('test_TimeRE_recreation', arguments([Name('self', Param(), lineno=518, col_offset=31)], None, None, []), [Assign([Name('locale_info', Store(), lineno=520, col_offset=8)], Call(Attribute(Name('locale', Load(), lineno=520, col_offset=22), 'getlocale', Load(), lineno=520, col_offset=22), [Attribute(Name('locale', Load(), lineno=520, col_offset=39), 'LC_TIME', Load(), lineno=520, col_offset=39)], [], None, None, lineno=520, col_offset=22), lineno=520, col_offset=8), TryExcept([Expr(Call(Attribute(Name('locale', Load(), lineno=522, col_offset=12), 'setlocale', Load(), lineno=522, col_offset=12), [Attribute(Name('locale', Load(), lineno=522, col_offset=29), 'LC_TIME', Load(), lineno=522, col_offset=29), Tuple([Str('en_US', lineno=522, col_offset=46), Str('UTF8', lineno=522, col_offset=55)], Load(), lineno=522, col_offset=46)], [], None, None, lineno=522, col_offset=12), lineno=522, col_offset=12)], [ExceptHandler(Attribute(Name('locale', Load(), lineno=523, col_offset=15), 'Error', Load(), lineno=523, col_offset=15), None, [Return(None, lineno=524, col_offset=12)], lineno=523, col_offset=8)], [], lineno=521, col_offset=8), TryFinally([Expr(Call(Attribute(Name('_strptime', Load(), lineno=526, col_offset=12), '_strptime_time', Load(), lineno=526, col_offset=12), [Str('10', lineno=526, col_offset=37), Str('%d', lineno=526, col_offset=43)], [], None, None, lineno=526, col_offset=12), lineno=526, col_offset=12), Assign([Name('first_time_re', Store(), lineno=528, col_offset=12)], Attribute(Name('_strptime', Load(), lineno=528, col_offset=28), '_TimeRE_cache', Load(), lineno=528, col_offset=28), lineno=528, col_offset=12), TryExcept([Expr(Call(Attribute(Name('locale', Load(), lineno=531, col_offset=16), 'setlocale', Load(), lineno=531, col_offset=16), [Attribute(Name('locale', Load(), lineno=531, col_offset=33), 'LC_TIME', Load(), lineno=531, col_offset=33), Tuple([Str('de_DE', lineno=531, col_offset=50), Str('UTF8', lineno=531, col_offset=59)], Load(), lineno=531, col_offset=50)], [], None, None, lineno=531, col_offset=16), lineno=531, col_offset=16), Expr(Call(Attribute(Name('_strptime', Load(), lineno=532, col_offset=16), '_strptime_time', Load(), lineno=532, col_offset=16), [Str('10', lineno=532, col_offset=41), Str('%d', lineno=532, col_offset=47)], [], None, None, lineno=532, col_offset=16), lineno=532, col_offset=16), Assign([Name('second_time_re', Store(), lineno=534, col_offset=16)], Attribute(Name('_strptime', Load(), lineno=534, col_offset=33), '_TimeRE_cache', Load(), lineno=534, col_offset=33), lineno=534, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=536, col_offset=16), 'assertIsNot', Load(), lineno=536, col_offset=16), [Name('first_time_re', Load(), lineno=536, col_offset=33), Name('second_time_re', Load(), lineno=536, col_offset=48)], [], None, None, lineno=536, col_offset=16), lineno=536, col_offset=16)], [ExceptHandler(Attribute(Name('locale', Load(), lineno=540, col_offset=19), 'Error', Load(), lineno=540, col_offset=19), None, [Pass( lineno=541, col_offset=16)], lineno=540, col_offset=12)], [], lineno=529, col_offset=12)], [Expr(Call(Attribute(Name('locale', Load(), lineno=545, col_offset=12), 'setlocale', Load(), lineno=545, col_offset=12), [Attribute(Name('locale', Load(), lineno=545, col_offset=29), 'LC_TIME', Load(), lineno=545, col_offset=29), Name('locale_info', Load(), lineno=545, col_offset=45)], [], None, None, lineno=545, col_offset=12), lineno=545, col_offset=12)], lineno=525, col_offset=8)], [], lineno=518, col_offset=4)], [], lineno=483, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=549, col_offset=4), 'run_unittest', Load(), lineno=549, col_offset=4), [Name('getlang_Tests', Load(), lineno=550, col_offset=8), Name('LocaleTime_Tests', Load(), lineno=551, col_offset=8), Name('TimeRETests', Load(), lineno=552, col_offset=8), Name('StrptimeTests', Load(), lineno=553, col_offset=8), Name('Strptime12AMPMTests', Load(), lineno=554, col_offset=8), Name('JulianTests', Load(), lineno=555, col_offset=8), Name('CalculationTests', Load(), lineno=556, col_offset=8), Name('CacheTests', Load(), lineno=557, col_offset=8)], [], None, None, lineno=549, col_offset=4), lineno=549, col_offset=4)], [], lineno=548, col_offset=0), If(Compare(Name('__name__', Load(), lineno=561, col_offset=3), [Eq()], [Str('__main__', lineno=561, col_offset=15)], lineno=561, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=562, col_offset=4), [], [], None, None, lineno=562, col_offset=4), lineno=562, col_offset=4)], [], lineno=561, col_offset=0)])
