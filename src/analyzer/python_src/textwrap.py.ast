Module([Expr(Str('Text wrapping and filling.\n', lineno=2, col_offset=-1), lineno=2, col_offset=-1), Assign([Name('__revision__', Store(), lineno=8, col_offset=0)], Str('$Id: textwrap.py 74912 2009-09-18 16:19:56Z georg.brandl $', lineno=8, col_offset=15), lineno=8, col_offset=0), Import([alias('string', None), alias('re', None)], lineno=10, col_offset=0), Assign([Name('__all__', Store(), lineno=20, col_offset=0)], List([Str('TextWrapper', lineno=20, col_offset=11), Str('wrap', lineno=20, col_offset=26), Str('fill', lineno=20, col_offset=34), Str('dedent', lineno=20, col_offset=42)], Load(), lineno=20, col_offset=10), lineno=20, col_offset=0), Assign([Name('_whitespace', Store(), lineno=30, col_offset=0)], Str('\t\n\x0b\x0c\r ', lineno=30, col_offset=14), lineno=30, col_offset=0), ClassDef('TextWrapper', [], [Expr(Str('\n    Object for wrapping/filling text.  The public interface consists of\n    the wrap() and fill() methods; the other methods are just there for\n    subclasses to override in order to tweak the default behaviour.\n    If you want to completely replace the main wrapping algorithm,\n    you\'ll probably have to override _wrap_chunks().\n\n    Several instance attributes control various aspects of wrapping:\n      width (default: 70)\n        the maximum width of wrapped lines (unless break_long_words\n        is false)\n      initial_indent (default: "")\n        string that will be prepended to the first line of wrapped\n        output.  Counts towards the line\'s width.\n      subsequent_indent (default: "")\n        string that will be prepended to all lines save the first\n        of wrapped output; also counts towards each line\'s width.\n      expand_tabs (default: true)\n        Expand tabs in input text to spaces before further processing.\n        Each tab will become 1 .. 8 spaces, depending on its position in\n        its line.  If false, each tab is treated as a single character.\n      replace_whitespace (default: true)\n        Replace all whitespace characters in the input text by spaces\n        after tab expansion.  Note that if expand_tabs is false and\n        replace_whitespace is true, every tab will be converted to a\n        single space!\n      fix_sentence_endings (default: false)\n        Ensure that sentence-ending punctuation is always followed\n        by two spaces.  Off by default because the algorithm is\n        (unavoidably) imperfect.\n      break_long_words (default: true)\n        Break words longer than \'width\'.  If false, those words will not\n        be broken, and some lines might be longer than \'width\'.\n      break_on_hyphens (default: true)\n        Allow breaking hyphenated words. If true, wrapping will occur\n        preferably on whitespaces and right after hyphens part of\n        compound words.\n      drop_whitespace (default: true)\n        Drop leading and trailing whitespace from lines.\n    ', lineno=72, col_offset=-1), lineno=72, col_offset=-1), Assign([Name('whitespace_trans', Store(), lineno=74, col_offset=4)], Call(Attribute(Name('string', Load(), lineno=74, col_offset=23), 'maketrans', Load(), lineno=74, col_offset=23), [Name('_whitespace', Load(), lineno=74, col_offset=40), BinOp(Str(' ', lineno=74, col_offset=53), Mult(), Call(Name('len', Load(), lineno=74, col_offset=59), [Name('_whitespace', Load(), lineno=74, col_offset=63)], [], None, None, lineno=74, col_offset=59), lineno=74, col_offset=53)], [], None, None, lineno=74, col_offset=23), lineno=74, col_offset=4), Assign([Name('unicode_whitespace_trans', Store(), lineno=76, col_offset=4)], Dict([], [], lineno=76, col_offset=31), lineno=76, col_offset=4), Assign([Name('uspace', Store(), lineno=77, col_offset=4)], Call(Name('ord', Load(), lineno=77, col_offset=13), [Str(u' ', lineno=77, col_offset=17)], [], None, None, lineno=77, col_offset=13), lineno=77, col_offset=4), For(Name('x', Store(), lineno=78, col_offset=8), Call(Name('map', Load(), lineno=78, col_offset=13), [Name('ord', Load(), lineno=78, col_offset=17), Name('_whitespace', Load(), lineno=78, col_offset=22)], [], None, None, lineno=78, col_offset=13), [Assign([Subscript(Name('unicode_whitespace_trans', Load(), lineno=79, col_offset=8), Index(Name('x', Load(), lineno=79, col_offset=33)), Store(), lineno=79, col_offset=8)], Name('uspace', Load(), lineno=79, col_offset=38), lineno=79, col_offset=8)], [], lineno=78, col_offset=4), Assign([Name('wordsep_re', Store(), lineno=87, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=87, col_offset=17), 'compile', Load(), lineno=87, col_offset=17), [Str('(\\s+|[^\\s\\w]*\\w+[^0-9\\W]-(?=\\w+[^0-9\\W])|(?<=[\\w\\!\\"\\\'\\&\\.\\,\\?])-{2,}(?=\\w))', lineno=88, col_offset=8)], [], None, None, lineno=87, col_offset=17), lineno=87, col_offset=4), Assign([Name('wordsep_simple_re', Store(), lineno=96, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=96, col_offset=24), 'compile', Load(), lineno=96, col_offset=24), [Str('(\\s+)', lineno=96, col_offset=35)], [], None, None, lineno=96, col_offset=24), lineno=96, col_offset=4), Assign([Name('sentence_end_re', Store(), lineno=100, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=100, col_offset=22), 'compile', Load(), lineno=100, col_offset=22), [BinOp(Str('[%s][\\.\\!\\?][\\"\\\']?\\Z', lineno=100, col_offset=33), Mod(), Attribute(Name('string', Load(), lineno=104, col_offset=35), 'lowercase', Load(), lineno=104, col_offset=35), lineno=100, col_offset=33)], [], None, None, lineno=100, col_offset=22), lineno=100, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=107, col_offset=17), Name('width', Param(), lineno=108, col_offset=17), Name('initial_indent', Param(), lineno=109, col_offset=17), Name('subsequent_indent', Param(), lineno=110, col_offset=17), Name('expand_tabs', Param(), lineno=111, col_offset=17), Name('replace_whitespace', Param(), lineno=112, col_offset=17), Name('fix_sentence_endings', Param(), lineno=113, col_offset=17), Name('break_long_words', Param(), lineno=114, col_offset=17), Name('drop_whitespace', Param(), lineno=115, col_offset=17), Name('break_on_hyphens', Param(), lineno=116, col_offset=17)], None, None, [Num(70, lineno=108, col_offset=23), Str('', lineno=109, col_offset=32), Str('', lineno=110, col_offset=35), Name('True', Load(), lineno=111, col_offset=29), Name('True', Load(), lineno=112, col_offset=36), Name('False', Load(), lineno=113, col_offset=38), Name('True', Load(), lineno=114, col_offset=34), Name('True', Load(), lineno=115, col_offset=33), Name('True', Load(), lineno=116, col_offset=34)]), [Assign([Attribute(Name('self', Load(), lineno=117, col_offset=8), 'width', Store(), lineno=117, col_offset=8)], Name('width', Load(), lineno=117, col_offset=21), lineno=117, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=118, col_offset=8), 'initial_indent', Store(), lineno=118, col_offset=8)], Name('initial_indent', Load(), lineno=118, col_offset=30), lineno=118, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=119, col_offset=8), 'subsequent_indent', Store(), lineno=119, col_offset=8)], Name('subsequent_indent', Load(), lineno=119, col_offset=33), lineno=119, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=120, col_offset=8), 'expand_tabs', Store(), lineno=120, col_offset=8)], Name('expand_tabs', Load(), lineno=120, col_offset=27), lineno=120, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=121, col_offset=8), 'replace_whitespace', Store(), lineno=121, col_offset=8)], Name('replace_whitespace', Load(), lineno=121, col_offset=34), lineno=121, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=122, col_offset=8), 'fix_sentence_endings', Store(), lineno=122, col_offset=8)], Name('fix_sentence_endings', Load(), lineno=122, col_offset=36), lineno=122, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=123, col_offset=8), 'break_long_words', Store(), lineno=123, col_offset=8)], Name('break_long_words', Load(), lineno=123, col_offset=32), lineno=123, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=124, col_offset=8), 'drop_whitespace', Store(), lineno=124, col_offset=8)], Name('drop_whitespace', Load(), lineno=124, col_offset=31), lineno=124, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=125, col_offset=8), 'break_on_hyphens', Store(), lineno=125, col_offset=8)], Name('break_on_hyphens', Load(), lineno=125, col_offset=32), lineno=125, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=130, col_offset=8), 'wordsep_re_uni', Store(), lineno=130, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=130, col_offset=30), 'compile', Load(), lineno=130, col_offset=30), [Attribute(Attribute(Name('self', Load(), lineno=130, col_offset=41), 'wordsep_re', Load(), lineno=130, col_offset=41), 'pattern', Load(), lineno=130, col_offset=41), Attribute(Name('re', Load(), lineno=130, col_offset=66), 'U', Load(), lineno=130, col_offset=66)], [], None, None, lineno=130, col_offset=30), lineno=130, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=131, col_offset=8), 'wordsep_simple_re_uni', Store(), lineno=131, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=131, col_offset=37), 'compile', Load(), lineno=131, col_offset=37), [Attribute(Attribute(Name('self', Load(), lineno=132, col_offset=12), 'wordsep_simple_re', Load(), lineno=132, col_offset=12), 'pattern', Load(), lineno=132, col_offset=12), Attribute(Name('re', Load(), lineno=132, col_offset=44), 'U', Load(), lineno=132, col_offset=44)], [], None, None, lineno=131, col_offset=37), lineno=131, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('_munge_whitespace', arguments([Name('self', Param(), lineno=138, col_offset=26), Name('text', Param(), lineno=138, col_offset=32)], None, None, []), [Expr(Str('_munge_whitespace(text : string) -> string\n\n        Munge whitespace in text: expand tabs and convert all other\n        whitespace characters to spaces.  Eg. " foo\tbar\n\nbaz"\n        becomes " foo    bar  baz".\n        ', lineno=144, col_offset=-1), lineno=144, col_offset=-1), If(Attribute(Name('self', Load(), lineno=145, col_offset=11), 'expand_tabs', Load(), lineno=145, col_offset=11), [Assign([Name('text', Store(), lineno=146, col_offset=12)], Call(Attribute(Name('text', Load(), lineno=146, col_offset=19), 'expandtabs', Load(), lineno=146, col_offset=19), [], [], None, None, lineno=146, col_offset=19), lineno=146, col_offset=12)], [], lineno=145, col_offset=8), If(Attribute(Name('self', Load(), lineno=147, col_offset=11), 'replace_whitespace', Load(), lineno=147, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=148, col_offset=15), [Name('text', Load(), lineno=148, col_offset=26), Name('str', Load(), lineno=148, col_offset=32)], [], None, None, lineno=148, col_offset=15), [Assign([Name('text', Store(), lineno=149, col_offset=16)], Call(Attribute(Name('text', Load(), lineno=149, col_offset=23), 'translate', Load(), lineno=149, col_offset=23), [Attribute(Name('self', Load(), lineno=149, col_offset=38), 'whitespace_trans', Load(), lineno=149, col_offset=38)], [], None, None, lineno=149, col_offset=23), lineno=149, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=150, col_offset=17), [Name('text', Load(), lineno=150, col_offset=28), Name('unicode', Load(), lineno=150, col_offset=34)], [], None, None, lineno=150, col_offset=17), [Assign([Name('text', Store(), lineno=151, col_offset=16)], Call(Attribute(Name('text', Load(), lineno=151, col_offset=23), 'translate', Load(), lineno=151, col_offset=23), [Attribute(Name('self', Load(), lineno=151, col_offset=38), 'unicode_whitespace_trans', Load(), lineno=151, col_offset=38)], [], None, None, lineno=151, col_offset=23), lineno=151, col_offset=16)], [], lineno=150, col_offset=17)], lineno=148, col_offset=12)], [], lineno=147, col_offset=8), Return(Name('text', Load(), lineno=152, col_offset=15), lineno=152, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('_split', arguments([Name('self', Param(), lineno=155, col_offset=15), Name('text', Param(), lineno=155, col_offset=21)], None, None, []), [Expr(Str("_split(text : string) -> [string]\n\n        Split the text to wrap into indivisible chunks.  Chunks are\n        not quite the same as words; see _wrap_chunks() for full\n        details.  As an example, the text\n          Look, goof-ball -- use the -b option!\n        breaks into the following chunks:\n          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', 'option!'\n        if break_on_hyphens is True, or in:\n          'Look,', ' ', 'goof-ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', option!'\n        otherwise.\n        ", lineno=169, col_offset=-1), lineno=169, col_offset=-1), If(Call(Name('isinstance', Load(), lineno=170, col_offset=11), [Name('text', Load(), lineno=170, col_offset=22), Name('unicode', Load(), lineno=170, col_offset=28)], [], None, None, lineno=170, col_offset=11), [If(Attribute(Name('self', Load(), lineno=171, col_offset=15), 'break_on_hyphens', Load(), lineno=171, col_offset=15), [Assign([Name('pat', Store(), lineno=172, col_offset=16)], Attribute(Name('self', Load(), lineno=172, col_offset=22), 'wordsep_re_uni', Load(), lineno=172, col_offset=22), lineno=172, col_offset=16)], [Assign([Name('pat', Store(), lineno=174, col_offset=16)], Attribute(Name('self', Load(), lineno=174, col_offset=22), 'wordsep_simple_re_uni', Load(), lineno=174, col_offset=22), lineno=174, col_offset=16)], lineno=171, col_offset=12)], [If(Attribute(Name('self', Load(), lineno=176, col_offset=15), 'break_on_hyphens', Load(), lineno=176, col_offset=15), [Assign([Name('pat', Store(), lineno=177, col_offset=16)], Attribute(Name('self', Load(), lineno=177, col_offset=22), 'wordsep_re', Load(), lineno=177, col_offset=22), lineno=177, col_offset=16)], [Assign([Name('pat', Store(), lineno=179, col_offset=16)], Attribute(Name('self', Load(), lineno=179, col_offset=22), 'wordsep_simple_re', Load(), lineno=179, col_offset=22), lineno=179, col_offset=16)], lineno=176, col_offset=12)], lineno=170, col_offset=8), Assign([Name('chunks', Store(), lineno=180, col_offset=8)], Call(Attribute(Name('pat', Load(), lineno=180, col_offset=17), 'split', Load(), lineno=180, col_offset=17), [Name('text', Load(), lineno=180, col_offset=27)], [], None, None, lineno=180, col_offset=17), lineno=180, col_offset=8), Assign([Name('chunks', Store(), lineno=181, col_offset=8)], Call(Name('filter', Load(), lineno=181, col_offset=17), [Name('None', Load(), lineno=181, col_offset=24), Name('chunks', Load(), lineno=181, col_offset=30)], [], None, None, lineno=181, col_offset=17), lineno=181, col_offset=8), Return(Name('chunks', Load(), lineno=182, col_offset=15), lineno=182, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('_fix_sentence_endings', arguments([Name('self', Param(), lineno=184, col_offset=30), Name('chunks', Param(), lineno=184, col_offset=36)], None, None, []), [Expr(Str('_fix_sentence_endings(chunks : [string])\n\n        Correct for sentence endings buried in \'chunks\'.  Eg. when the\n        original text contains "... foo.\nBar ...", munge_whitespace()\n        and split() will convert that to [..., "foo.", " ", "Bar", ...]\n        which has one too few spaces; this method simply changes the one\n        space to two.\n        ', lineno=192, col_offset=-1), lineno=192, col_offset=-1), Assign([Name('i', Store(), lineno=193, col_offset=8)], Num(0, lineno=193, col_offset=12), lineno=193, col_offset=8), Assign([Name('patsearch', Store(), lineno=194, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=194, col_offset=20), 'sentence_end_re', Load(), lineno=194, col_offset=20), 'search', Load(), lineno=194, col_offset=20), lineno=194, col_offset=8), While(Compare(Name('i', Load(), lineno=195, col_offset=14), [Lt()], [BinOp(Call(Name('len', Load(), lineno=195, col_offset=18), [Name('chunks', Load(), lineno=195, col_offset=22)], [], None, None, lineno=195, col_offset=18), Sub(), Num(1, lineno=195, col_offset=30), lineno=195, col_offset=18)], lineno=195, col_offset=14), [If(BoolOp(And(), [Compare(Subscript(Name('chunks', Load(), lineno=196, col_offset=15), Index(BinOp(Name('i', Load(), lineno=196, col_offset=22), Add(), Num(1, lineno=196, col_offset=24), lineno=196, col_offset=22)), Load(), lineno=196, col_offset=15), [Eq()], [Str(' ', lineno=196, col_offset=30)], lineno=196, col_offset=15), Call(Name('patsearch', Load(), lineno=196, col_offset=38), [Subscript(Name('chunks', Load(), lineno=196, col_offset=48), Index(Name('i', Load(), lineno=196, col_offset=55)), Load(), lineno=196, col_offset=48)], [], None, None, lineno=196, col_offset=38)], lineno=196, col_offset=15), [Assign([Subscript(Name('chunks', Load(), lineno=197, col_offset=16), Index(BinOp(Name('i', Load(), lineno=197, col_offset=23), Add(), Num(1, lineno=197, col_offset=25), lineno=197, col_offset=23)), Store(), lineno=197, col_offset=16)], Str('  ', lineno=197, col_offset=30), lineno=197, col_offset=16), AugAssign(Name('i', Store(), lineno=198, col_offset=16), Add(), Num(2, lineno=198, col_offset=21), lineno=198, col_offset=16)], [AugAssign(Name('i', Store(), lineno=200, col_offset=16), Add(), Num(1, lineno=200, col_offset=21), lineno=200, col_offset=16)], lineno=196, col_offset=12)], [], lineno=195, col_offset=8)], [], lineno=184, col_offset=4), FunctionDef('_handle_long_word', arguments([Name('self', Param(), lineno=202, col_offset=26), Name('reversed_chunks', Param(), lineno=202, col_offset=32), Name('cur_line', Param(), lineno=202, col_offset=49), Name('cur_len', Param(), lineno=202, col_offset=59), Name('width', Param(), lineno=202, col_offset=68)], None, None, []), [Expr(Str('_handle_long_word(chunks : [string],\n                             cur_line : [string],\n                             cur_len : int, width : int)\n\n        Handle a chunk of text (most likely a word, not whitespace) that\n        is too long to fit in any line.\n        ', lineno=209, col_offset=-1), lineno=209, col_offset=-1), If(Compare(Name('width', Load(), lineno=212, col_offset=11), [Lt()], [Num(1, lineno=212, col_offset=19)], lineno=212, col_offset=11), [Assign([Name('space_left', Store(), lineno=213, col_offset=12)], Num(1, lineno=213, col_offset=25), lineno=213, col_offset=12)], [Assign([Name('space_left', Store(), lineno=215, col_offset=12)], BinOp(Name('width', Load(), lineno=215, col_offset=25), Sub(), Name('cur_len', Load(), lineno=215, col_offset=33), lineno=215, col_offset=25), lineno=215, col_offset=12)], lineno=212, col_offset=8), If(Attribute(Name('self', Load(), lineno=219, col_offset=11), 'break_long_words', Load(), lineno=219, col_offset=11), [Expr(Call(Attribute(Name('cur_line', Load(), lineno=220, col_offset=12), 'append', Load(), lineno=220, col_offset=12), [Subscript(Subscript(Name('reversed_chunks', Load(), lineno=220, col_offset=28), Index(Num(-1, lineno=220, col_offset=45)), Load(), lineno=220, col_offset=28), Slice(None, Name('space_left', Load(), lineno=220, col_offset=49), None), Load(), lineno=220, col_offset=28)], [], None, None, lineno=220, col_offset=12), lineno=220, col_offset=12), Assign([Subscript(Name('reversed_chunks', Load(), lineno=221, col_offset=12), Index(Num(-1, lineno=221, col_offset=29)), Store(), lineno=221, col_offset=12)], Subscript(Subscript(Name('reversed_chunks', Load(), lineno=221, col_offset=34), Index(Num(-1, lineno=221, col_offset=51)), Load(), lineno=221, col_offset=34), Slice(Name('space_left', Load(), lineno=221, col_offset=54), None, None), Load(), lineno=221, col_offset=34), lineno=221, col_offset=12)], [If(UnaryOp(Not(), Name('cur_line', Load(), lineno=226, col_offset=17), lineno=226, col_offset=13), [Expr(Call(Attribute(Name('cur_line', Load(), lineno=227, col_offset=12), 'append', Load(), lineno=227, col_offset=12), [Call(Attribute(Name('reversed_chunks', Load(), lineno=227, col_offset=28), 'pop', Load(), lineno=227, col_offset=28), [], [], None, None, lineno=227, col_offset=28)], [], None, None, lineno=227, col_offset=12), lineno=227, col_offset=12)], [], lineno=226, col_offset=13)], lineno=219, col_offset=8)], [], lineno=202, col_offset=4), FunctionDef('_wrap_chunks', arguments([Name('self', Param(), lineno=235, col_offset=21), Name('chunks', Param(), lineno=235, col_offset=27)], None, None, []), [Expr(Str('_wrap_chunks(chunks : [string]) -> [string]\n\n        Wrap a sequence of text chunks and return a list of lines of\n        length \'self.width\' or less.  (If \'break_long_words\' is false,\n        some lines may be longer than this.)  Chunks correspond roughly\n        to words and the whitespace between them: each chunk is\n        indivisible (modulo \'break_long_words\'), but a line break can\n        come between any two chunks.  Chunks should not have internal\n        whitespace; ie. a chunk is either all whitespace or a "word".\n        Whitespace chunks will be removed from the beginning and end of\n        lines, but apart from that whitespace is preserved.\n        ', lineno=247, col_offset=-1), lineno=247, col_offset=-1), Assign([Name('lines', Store(), lineno=248, col_offset=8)], List([], Load(), lineno=248, col_offset=16), lineno=248, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=249, col_offset=11), 'width', Load(), lineno=249, col_offset=11), [LtE()], [Num(0, lineno=249, col_offset=25)], lineno=249, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=250, col_offset=18), [BinOp(Str('invalid width %r (must be > 0)', lineno=250, col_offset=29), Mod(), Attribute(Name('self', Load(), lineno=250, col_offset=64), 'width', Load(), lineno=250, col_offset=64), lineno=250, col_offset=29)], [], None, None, lineno=250, col_offset=18), None, None, lineno=250, col_offset=12)], [], lineno=249, col_offset=8), Expr(Call(Attribute(Name('chunks', Load(), lineno=254, col_offset=8), 'reverse', Load(), lineno=254, col_offset=8), [], [], None, None, lineno=254, col_offset=8), lineno=254, col_offset=8), While(Name('chunks', Load(), lineno=256, col_offset=14), [Assign([Name('cur_line', Store(), lineno=260, col_offset=12)], List([], Load(), lineno=260, col_offset=23), lineno=260, col_offset=12), Assign([Name('cur_len', Store(), lineno=261, col_offset=12)], Num(0, lineno=261, col_offset=22), lineno=261, col_offset=12), If(Name('lines', Load(), lineno=264, col_offset=15), [Assign([Name('indent', Store(), lineno=265, col_offset=16)], Attribute(Name('self', Load(), lineno=265, col_offset=25), 'subsequent_indent', Load(), lineno=265, col_offset=25), lineno=265, col_offset=16)], [Assign([Name('indent', Store(), lineno=267, col_offset=16)], Attribute(Name('self', Load(), lineno=267, col_offset=25), 'initial_indent', Load(), lineno=267, col_offset=25), lineno=267, col_offset=16)], lineno=264, col_offset=12), Assign([Name('width', Store(), lineno=270, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=270, col_offset=20), 'width', Load(), lineno=270, col_offset=20), Sub(), Call(Name('len', Load(), lineno=270, col_offset=33), [Name('indent', Load(), lineno=270, col_offset=37)], [], None, None, lineno=270, col_offset=33), lineno=270, col_offset=20), lineno=270, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=274, col_offset=15), 'drop_whitespace', Load(), lineno=274, col_offset=15), Compare(Call(Attribute(Subscript(Name('chunks', Load(), lineno=274, col_offset=40), Index(Num(-1, lineno=274, col_offset=48)), Load(), lineno=274, col_offset=40), 'strip', Load(), lineno=274, col_offset=40), [], [], None, None, lineno=274, col_offset=40), [Eq()], [Str('', lineno=274, col_offset=62)], lineno=274, col_offset=40), Name('lines', Load(), lineno=274, col_offset=69)], lineno=274, col_offset=15), [Delete([Subscript(Name('chunks', Load(), lineno=275, col_offset=20), Index(Num(-1, lineno=275, col_offset=28)), Del(), lineno=275, col_offset=20)], lineno=275, col_offset=16)], [], lineno=274, col_offset=12), While(Name('chunks', Load(), lineno=277, col_offset=18), [Assign([Name('l', Store(), lineno=278, col_offset=16)], Call(Name('len', Load(), lineno=278, col_offset=20), [Subscript(Name('chunks', Load(), lineno=278, col_offset=24), Index(Num(-1, lineno=278, col_offset=32)), Load(), lineno=278, col_offset=24)], [], None, None, lineno=278, col_offset=20), lineno=278, col_offset=16), If(Compare(BinOp(Name('cur_len', Load(), lineno=281, col_offset=19), Add(), Name('l', Load(), lineno=281, col_offset=29), lineno=281, col_offset=19), [LtE()], [Name('width', Load(), lineno=281, col_offset=34)], lineno=281, col_offset=19), [Expr(Call(Attribute(Name('cur_line', Load(), lineno=282, col_offset=20), 'append', Load(), lineno=282, col_offset=20), [Call(Attribute(Name('chunks', Load(), lineno=282, col_offset=36), 'pop', Load(), lineno=282, col_offset=36), [], [], None, None, lineno=282, col_offset=36)], [], None, None, lineno=282, col_offset=20), lineno=282, col_offset=20), AugAssign(Name('cur_len', Store(), lineno=283, col_offset=20), Add(), Name('l', Load(), lineno=283, col_offset=31), lineno=283, col_offset=20)], [Break( lineno=287, col_offset=20)], lineno=281, col_offset=16)], [], lineno=277, col_offset=12), If(BoolOp(And(), [Name('chunks', Load(), lineno=291, col_offset=15), Compare(Call(Name('len', Load(), lineno=291, col_offset=26), [Subscript(Name('chunks', Load(), lineno=291, col_offset=30), Index(Num(-1, lineno=291, col_offset=38)), Load(), lineno=291, col_offset=30)], [], None, None, lineno=291, col_offset=26), [Gt()], [Name('width', Load(), lineno=291, col_offset=44)], lineno=291, col_offset=26)], lineno=291, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=292, col_offset=16), '_handle_long_word', Load(), lineno=292, col_offset=16), [Name('chunks', Load(), lineno=292, col_offset=39), Name('cur_line', Load(), lineno=292, col_offset=47), Name('cur_len', Load(), lineno=292, col_offset=57), Name('width', Load(), lineno=292, col_offset=66)], [], None, None, lineno=292, col_offset=16), lineno=292, col_offset=16)], [], lineno=291, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=295, col_offset=15), 'drop_whitespace', Load(), lineno=295, col_offset=15), Name('cur_line', Load(), lineno=295, col_offset=40), Compare(Call(Attribute(Subscript(Name('cur_line', Load(), lineno=295, col_offset=53), Index(Num(-1, lineno=295, col_offset=63)), Load(), lineno=295, col_offset=53), 'strip', Load(), lineno=295, col_offset=53), [], [], None, None, lineno=295, col_offset=53), [Eq()], [Str('', lineno=295, col_offset=77)], lineno=295, col_offset=53)], lineno=295, col_offset=15), [Delete([Subscript(Name('cur_line', Load(), lineno=296, col_offset=20), Index(Num(-1, lineno=296, col_offset=30)), Del(), lineno=296, col_offset=20)], lineno=296, col_offset=16)], [], lineno=295, col_offset=12), If(Name('cur_line', Load(), lineno=300, col_offset=15), [Expr(Call(Attribute(Name('lines', Load(), lineno=301, col_offset=16), 'append', Load(), lineno=301, col_offset=16), [BinOp(Name('indent', Load(), lineno=301, col_offset=29), Add(), Call(Attribute(Str('', lineno=301, col_offset=38), 'join', Load(), lineno=301, col_offset=38), [Name('cur_line', Load(), lineno=301, col_offset=46)], [], None, None, lineno=301, col_offset=38), lineno=301, col_offset=29)], [], None, None, lineno=301, col_offset=16), lineno=301, col_offset=16)], [], lineno=300, col_offset=12)], [], lineno=256, col_offset=8), Return(Name('lines', Load(), lineno=303, col_offset=15), lineno=303, col_offset=8)], [], lineno=235, col_offset=4), FunctionDef('wrap', arguments([Name('self', Param(), lineno=308, col_offset=13), Name('text', Param(), lineno=308, col_offset=19)], None, None, []), [Expr(Str("wrap(text : string) -> [string]\n\n        Reformat the single paragraph in 'text' so it fits in lines of\n        no more than 'self.width' columns, and return a list of wrapped\n        lines.  Tabs in 'text' are expanded with string.expandtabs(),\n        and all other whitespace characters (including newline) are\n        converted to space.\n        ", lineno=316, col_offset=-1), lineno=316, col_offset=-1), Assign([Name('text', Store(), lineno=317, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=317, col_offset=15), '_munge_whitespace', Load(), lineno=317, col_offset=15), [Name('text', Load(), lineno=317, col_offset=38)], [], None, None, lineno=317, col_offset=15), lineno=317, col_offset=8), Assign([Name('chunks', Store(), lineno=318, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=318, col_offset=17), '_split', Load(), lineno=318, col_offset=17), [Name('text', Load(), lineno=318, col_offset=29)], [], None, None, lineno=318, col_offset=17), lineno=318, col_offset=8), If(Attribute(Name('self', Load(), lineno=319, col_offset=11), 'fix_sentence_endings', Load(), lineno=319, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=320, col_offset=12), '_fix_sentence_endings', Load(), lineno=320, col_offset=12), [Name('chunks', Load(), lineno=320, col_offset=39)], [], None, None, lineno=320, col_offset=12), lineno=320, col_offset=12)], [], lineno=319, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=321, col_offset=15), '_wrap_chunks', Load(), lineno=321, col_offset=15), [Name('chunks', Load(), lineno=321, col_offset=33)], [], None, None, lineno=321, col_offset=15), lineno=321, col_offset=8)], [], lineno=308, col_offset=4), FunctionDef('fill', arguments([Name('self', Param(), lineno=323, col_offset=13), Name('text', Param(), lineno=323, col_offset=19)], None, None, []), [Expr(Str("fill(text : string) -> string\n\n        Reformat the single paragraph in 'text' to fit in lines of no\n        more than 'self.width' columns, and return a new string\n        containing the entire wrapped paragraph.\n        ", lineno=329, col_offset=-1), lineno=329, col_offset=-1), Return(Call(Attribute(Str('\n', lineno=330, col_offset=15), 'join', Load(), lineno=330, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=330, col_offset=25), 'wrap', Load(), lineno=330, col_offset=25), [Name('text', Load(), lineno=330, col_offset=35)], [], None, None, lineno=330, col_offset=25)], [], None, None, lineno=330, col_offset=15), lineno=330, col_offset=8)], [], lineno=323, col_offset=4)], [], lineno=32, col_offset=0), FunctionDef('wrap', arguments([Name('text', Param(), lineno=335, col_offset=9), Name('width', Param(), lineno=335, col_offset=15)], None, 'kwargs', [Num(70, lineno=335, col_offset=21)]), [Expr(Str("Wrap a single paragraph of text, returning a list of wrapped lines.\n\n    Reformat the single paragraph in 'text' so it fits in lines of no\n    more than 'width' columns, and return a list of wrapped lines.  By\n    default, tabs in 'text' are expanded with string.expandtabs(), and\n    all other whitespace characters (including newline) are converted to\n    space.  See TextWrapper class for available keyword args to customize\n    wrapping behaviour.\n    ", lineno=344, col_offset=-1), lineno=344, col_offset=-1), Assign([Name('w', Store(), lineno=345, col_offset=4)], Call(Name('TextWrapper', Load(), lineno=345, col_offset=8), [], [keyword('width', Name('width', Load(), lineno=345, col_offset=26))], None, Name('kwargs', Load(), lineno=345, col_offset=35), lineno=345, col_offset=8), lineno=345, col_offset=4), Return(Call(Attribute(Name('w', Load(), lineno=346, col_offset=11), 'wrap', Load(), lineno=346, col_offset=11), [Name('text', Load(), lineno=346, col_offset=18)], [], None, None, lineno=346, col_offset=11), lineno=346, col_offset=4)], [], lineno=335, col_offset=0), FunctionDef('fill', arguments([Name('text', Param(), lineno=348, col_offset=9), Name('width', Param(), lineno=348, col_offset=15)], None, 'kwargs', [Num(70, lineno=348, col_offset=21)]), [Expr(Str("Fill a single paragraph of text, returning a new string.\n\n    Reformat the single paragraph in 'text' to fit in lines of no more\n    than 'width' columns, and return a new string containing the entire\n    wrapped paragraph.  As with wrap(), tabs are expanded and other\n    whitespace characters converted to space.  See TextWrapper class for\n    available keyword args to customize wrapping behaviour.\n    ", lineno=356, col_offset=-1), lineno=356, col_offset=-1), Assign([Name('w', Store(), lineno=357, col_offset=4)], Call(Name('TextWrapper', Load(), lineno=357, col_offset=8), [], [keyword('width', Name('width', Load(), lineno=357, col_offset=26))], None, Name('kwargs', Load(), lineno=357, col_offset=35), lineno=357, col_offset=8), lineno=357, col_offset=4), Return(Call(Attribute(Name('w', Load(), lineno=358, col_offset=11), 'fill', Load(), lineno=358, col_offset=11), [Name('text', Load(), lineno=358, col_offset=18)], [], None, None, lineno=358, col_offset=11), lineno=358, col_offset=4)], [], lineno=348, col_offset=0), Assign([Name('_whitespace_only_re', Store(), lineno=363, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=363, col_offset=22), 'compile', Load(), lineno=363, col_offset=22), [Str('^[ \t]+$', lineno=363, col_offset=33), Attribute(Name('re', Load(), lineno=363, col_offset=45), 'MULTILINE', Load(), lineno=363, col_offset=45)], [], None, None, lineno=363, col_offset=22), lineno=363, col_offset=0), Assign([Name('_leading_whitespace_re', Store(), lineno=364, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=364, col_offset=25), 'compile', Load(), lineno=364, col_offset=25), [Str('(^[ \t]*)(?:[^ \t\n])', lineno=364, col_offset=36), Attribute(Name('re', Load(), lineno=364, col_offset=61), 'MULTILINE', Load(), lineno=364, col_offset=61)], [], None, None, lineno=364, col_offset=25), lineno=364, col_offset=0), FunctionDef('dedent', arguments([Name('text', Param(), lineno=366, col_offset=11)], None, None, []), [Expr(Str('Remove any common leading whitespace from every line in `text`.\n\n    This can be used to make triple-quoted strings line up with the left\n    edge of the display, while still presenting them in the source code\n    in indented form.\n\n    Note that tabs and spaces are both treated as whitespace, but they\n    are not equal: the lines "  hello" and "\thello" are\n    considered to have no common leading whitespace.  (This behaviour is\n    new in Python 2.5; older versions of this module incorrectly\n    expanded tabs before searching for common leading whitespace.)\n    ', lineno=378, col_offset=-1), lineno=378, col_offset=-1), Assign([Name('margin', Store(), lineno=381, col_offset=4)], Name('None', Load(), lineno=381, col_offset=13), lineno=381, col_offset=4), Assign([Name('text', Store(), lineno=382, col_offset=4)], Call(Attribute(Name('_whitespace_only_re', Load(), lineno=382, col_offset=11), 'sub', Load(), lineno=382, col_offset=11), [Str('', lineno=382, col_offset=35), Name('text', Load(), lineno=382, col_offset=39)], [], None, None, lineno=382, col_offset=11), lineno=382, col_offset=4), Assign([Name('indents', Store(), lineno=383, col_offset=4)], Call(Attribute(Name('_leading_whitespace_re', Load(), lineno=383, col_offset=14), 'findall', Load(), lineno=383, col_offset=14), [Name('text', Load(), lineno=383, col_offset=45)], [], None, None, lineno=383, col_offset=14), lineno=383, col_offset=4), For(Name('indent', Store(), lineno=384, col_offset=8), Name('indents', Load(), lineno=384, col_offset=18), [If(Compare(Name('margin', Load(), lineno=385, col_offset=11), [Is()], [Name('None', Load(), lineno=385, col_offset=21)], lineno=385, col_offset=11), [Assign([Name('margin', Store(), lineno=386, col_offset=12)], Name('indent', Load(), lineno=386, col_offset=21), lineno=386, col_offset=12)], [If(Call(Attribute(Name('indent', Load(), lineno=390, col_offset=13), 'startswith', Load(), lineno=390, col_offset=13), [Name('margin', Load(), lineno=390, col_offset=31)], [], None, None, lineno=390, col_offset=13), [Pass( lineno=391, col_offset=12)], [If(Call(Attribute(Name('margin', Load(), lineno=395, col_offset=13), 'startswith', Load(), lineno=395, col_offset=13), [Name('indent', Load(), lineno=395, col_offset=31)], [], None, None, lineno=395, col_offset=13), [Assign([Name('margin', Store(), lineno=396, col_offset=12)], Name('indent', Load(), lineno=396, col_offset=21), lineno=396, col_offset=12)], [Assign([Name('margin', Store(), lineno=401, col_offset=12)], Str('', lineno=401, col_offset=21), lineno=401, col_offset=12), Break( lineno=402, col_offset=12)], lineno=395, col_offset=13)], lineno=390, col_offset=13)], lineno=385, col_offset=8)], [], lineno=384, col_offset=4), If(BoolOp(And(), [Num(0, lineno=405, col_offset=7), Name('margin', Load(), lineno=405, col_offset=13)], lineno=405, col_offset=7), [For(Name('line', Store(), lineno=406, col_offset=12), Call(Attribute(Name('text', Load(), lineno=406, col_offset=20), 'split', Load(), lineno=406, col_offset=20), [Str('\n', lineno=406, col_offset=31)], [], None, None, lineno=406, col_offset=20), [Assert(BoolOp(Or(), [UnaryOp(Not(), Name('line', Load(), lineno=407, col_offset=23), lineno=407, col_offset=19), Call(Attribute(Name('line', Load(), lineno=407, col_offset=31), 'startswith', Load(), lineno=407, col_offset=31), [Name('margin', Load(), lineno=407, col_offset=47)], [], None, None, lineno=407, col_offset=31)], lineno=407, col_offset=19), BinOp(Str('line = %r, margin = %r', lineno=408, col_offset=19), Mod(), Tuple([Name('line', Load(), lineno=408, col_offset=47), Name('margin', Load(), lineno=408, col_offset=53)], Load(), lineno=408, col_offset=47), lineno=408, col_offset=19), lineno=407, col_offset=12)], [], lineno=406, col_offset=8)], [], lineno=405, col_offset=4), If(Name('margin', Load(), lineno=410, col_offset=7), [Assign([Name('text', Store(), lineno=411, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=411, col_offset=15), 'sub', Load(), lineno=411, col_offset=15), [BinOp(Str('(?m)^', lineno=411, col_offset=22), Add(), Name('margin', Load(), lineno=411, col_offset=33), lineno=411, col_offset=22), Str('', lineno=411, col_offset=41), Name('text', Load(), lineno=411, col_offset=45)], [], None, None, lineno=411, col_offset=15), lineno=411, col_offset=8)], [], lineno=410, col_offset=4), Return(Name('text', Load(), lineno=412, col_offset=11), lineno=412, col_offset=4)], [], lineno=366, col_offset=0), If(Compare(Name('__name__', Load(), lineno=414, col_offset=3), [Eq()], [Str('__main__', lineno=414, col_offset=15)], lineno=414, col_offset=3), [Print(None, [Call(Name('dedent', Load(), lineno=417, col_offset=10), [Str('Hello there.\n  This is indented.', lineno=417, col_offset=17)], [], None, None, lineno=417, col_offset=10)], True, lineno=417, col_offset=4)], [], lineno=414, col_offset=0)])
