Module([Expr(Str("Parser for command line options.\n\nThis module helps scripts to parse the command line arguments in\nsys.argv.  It supports the same conventions as the Unix getopt()\nfunction (including the special meanings of arguments of the form `-'\nand `--').  Long options similar to those supported by GNU software\nmay be used as well via an optional third argument.  This module\nprovides two functions and an exception:\n\ngetopt() -- Parse command line options\ngnu_getopt() -- Like getopt(), but allow option and non-option arguments\nto be intermixed.\nGetoptError -- exception (class) raised with 'opt' attribute, which is the\noption involved with the exception.\n", lineno=15, col_offset=-1), lineno=15, col_offset=-1), Assign([Name('__all__', Store(), lineno=34, col_offset=0)], List([Str('GetoptError', lineno=34, col_offset=11), Str('error', lineno=34, col_offset=25), Str('getopt', lineno=34, col_offset=33), Str('gnu_getopt', lineno=34, col_offset=42)], Load(), lineno=34, col_offset=10), lineno=34, col_offset=0), Import([alias('os', None)], lineno=36, col_offset=0), ClassDef('GetoptError', [Name('Exception', Load(), lineno=38, col_offset=18)], [Assign([Name('opt', Store(), lineno=39, col_offset=4)], Str('', lineno=39, col_offset=10), lineno=39, col_offset=4), Assign([Name('msg', Store(), lineno=40, col_offset=4)], Str('', lineno=40, col_offset=10), lineno=40, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=41, col_offset=17), Name('msg', Param(), lineno=41, col_offset=23), Name('opt', Param(), lineno=41, col_offset=28)], None, None, [Str('', lineno=41, col_offset=32)]), [Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'msg', Store(), lineno=42, col_offset=8)], Name('msg', Load(), lineno=42, col_offset=19), lineno=42, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'opt', Store(), lineno=43, col_offset=8)], Name('opt', Load(), lineno=43, col_offset=19), lineno=43, col_offset=8), Expr(Call(Attribute(Name('Exception', Load(), lineno=44, col_offset=8), '__init__', Load(), lineno=44, col_offset=8), [Name('self', Load(), lineno=44, col_offset=27), Name('msg', Load(), lineno=44, col_offset=33), Name('opt', Load(), lineno=44, col_offset=38)], [], None, None, lineno=44, col_offset=8), lineno=44, col_offset=8)], [], lineno=41, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=46, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=47, col_offset=15), 'msg', Load(), lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=46, col_offset=4)], [], lineno=38, col_offset=0), Assign([Name('error', Store(), lineno=49, col_offset=0)], Name('GetoptError', Load(), lineno=49, col_offset=8), lineno=49, col_offset=0), FunctionDef('getopt', arguments([Name('args', Param(), lineno=51, col_offset=11), Name('shortopts', Param(), lineno=51, col_offset=17), Name('longopts', Param(), lineno=51, col_offset=28)], None, None, [List([], Load(), lineno=51, col_offset=39)]), [Expr(Str('getopt(args, options[, long_options]) -> opts, args\n\n    Parses command line options and parameter list.  args is the\n    argument list to be parsed, without the leading reference to the\n    running program.  Typically, this means "sys.argv[1:]".  shortopts\n    is the string of option letters that the script wants to\n    recognize, with options that require an argument followed by a\n    colon (i.e., the same format that Unix getopt() uses).  If\n    specified, longopts is a list of strings with the names of the\n    long options which should be supported.  The leading \'--\'\n    characters should not be included in the option name.  Options\n    which require an argument should be followed by an equal sign\n    (\'=\').\n\n    The return value consists of two elements: the first is a list of\n    (option, value) pairs; the second is the list of program arguments\n    left after the option list was stripped (this is a trailing slice\n    of the first argument).  Each option-and-value pair returned has\n    the option as its first element, prefixed with a hyphen (e.g.,\n    \'-x\'), and the option argument as its second element, or an empty\n    string if the option has no argument.  The options occur in the\n    list in the same order in which they were found, thus allowing\n    multiple occurrences.  Long and short options may be mixed.\n\n    ', lineno=76, col_offset=-1), lineno=76, col_offset=-1), Assign([Name('opts', Store(), lineno=78, col_offset=4)], List([], Load(), lineno=78, col_offset=11), lineno=78, col_offset=4), If(Compare(Call(Name('type', Load(), lineno=79, col_offset=7), [Name('longopts', Load(), lineno=79, col_offset=12)], [], None, None, lineno=79, col_offset=7), [Eq()], [Call(Name('type', Load(), lineno=79, col_offset=25), [Str('', lineno=79, col_offset=30)], [], None, None, lineno=79, col_offset=25)], lineno=79, col_offset=7), [Assign([Name('longopts', Store(), lineno=80, col_offset=8)], List([Name('longopts', Load(), lineno=80, col_offset=20)], Load(), lineno=80, col_offset=19), lineno=80, col_offset=8)], [Assign([Name('longopts', Store(), lineno=82, col_offset=8)], Call(Name('list', Load(), lineno=82, col_offset=19), [Name('longopts', Load(), lineno=82, col_offset=24)], [], None, None, lineno=82, col_offset=19), lineno=82, col_offset=8)], lineno=79, col_offset=4), While(BoolOp(And(), [Name('args', Load(), lineno=83, col_offset=10), Call(Attribute(Subscript(Name('args', Load(), lineno=83, col_offset=19), Index(Num(0, lineno=83, col_offset=24)), Load(), lineno=83, col_offset=19), 'startswith', Load(), lineno=83, col_offset=19), [Str('-', lineno=83, col_offset=38)], [], None, None, lineno=83, col_offset=19), Compare(Subscript(Name('args', Load(), lineno=83, col_offset=47), Index(Num(0, lineno=83, col_offset=52)), Load(), lineno=83, col_offset=47), [NotEq()], [Str('-', lineno=83, col_offset=58)], lineno=83, col_offset=47)], lineno=83, col_offset=10), [If(Compare(Subscript(Name('args', Load(), lineno=84, col_offset=11), Index(Num(0, lineno=84, col_offset=16)), Load(), lineno=84, col_offset=11), [Eq()], [Str('--', lineno=84, col_offset=22)], lineno=84, col_offset=11), [Assign([Name('args', Store(), lineno=85, col_offset=12)], Subscript(Name('args', Load(), lineno=85, col_offset=19), Slice(Num(1, lineno=85, col_offset=24), None, None), Load(), lineno=85, col_offset=19), lineno=85, col_offset=12), Break( lineno=86, col_offset=12)], [], lineno=84, col_offset=8), If(Call(Attribute(Subscript(Name('args', Load(), lineno=87, col_offset=11), Index(Num(0, lineno=87, col_offset=16)), Load(), lineno=87, col_offset=11), 'startswith', Load(), lineno=87, col_offset=11), [Str('--', lineno=87, col_offset=30)], [], None, None, lineno=87, col_offset=11), [Assign([Tuple([Name('opts', Store(), lineno=88, col_offset=12), Name('args', Store(), lineno=88, col_offset=18)], Store(), lineno=88, col_offset=12)], Call(Name('do_longs', Load(), lineno=88, col_offset=25), [Name('opts', Load(), lineno=88, col_offset=34), Subscript(Subscript(Name('args', Load(), lineno=88, col_offset=40), Index(Num(0, lineno=88, col_offset=45)), Load(), lineno=88, col_offset=40), Slice(Num(2, lineno=88, col_offset=48), None, None), Load(), lineno=88, col_offset=40), Name('longopts', Load(), lineno=88, col_offset=53), Subscript(Name('args', Load(), lineno=88, col_offset=63), Slice(Num(1, lineno=88, col_offset=68), None, None), Load(), lineno=88, col_offset=63)], [], None, None, lineno=88, col_offset=25), lineno=88, col_offset=12)], [Assign([Tuple([Name('opts', Store(), lineno=90, col_offset=12), Name('args', Store(), lineno=90, col_offset=18)], Store(), lineno=90, col_offset=12)], Call(Name('do_shorts', Load(), lineno=90, col_offset=25), [Name('opts', Load(), lineno=90, col_offset=35), Subscript(Subscript(Name('args', Load(), lineno=90, col_offset=41), Index(Num(0, lineno=90, col_offset=46)), Load(), lineno=90, col_offset=41), Slice(Num(1, lineno=90, col_offset=49), None, None), Load(), lineno=90, col_offset=41), Name('shortopts', Load(), lineno=90, col_offset=54), Subscript(Name('args', Load(), lineno=90, col_offset=65), Slice(Num(1, lineno=90, col_offset=70), None, None), Load(), lineno=90, col_offset=65)], [], None, None, lineno=90, col_offset=25), lineno=90, col_offset=12)], lineno=87, col_offset=8)], [], lineno=83, col_offset=4), Return(Tuple([Name('opts', Load(), lineno=92, col_offset=11), Name('args', Load(), lineno=92, col_offset=17)], Load(), lineno=92, col_offset=11), lineno=92, col_offset=4)], [], lineno=51, col_offset=0), FunctionDef('gnu_getopt', arguments([Name('args', Param(), lineno=94, col_offset=15), Name('shortopts', Param(), lineno=94, col_offset=21), Name('longopts', Param(), lineno=94, col_offset=32)], None, None, [List([], Load(), lineno=94, col_offset=43)]), [Expr(Str("getopt(args, options[, long_options]) -> opts, args\n\n    This function works like getopt(), except that GNU style scanning\n    mode is used by default. This means that option and non-option\n    arguments may be intermixed. The getopt() function stops\n    processing options as soon as a non-option argument is\n    encountered.\n\n    If the first character of the option string is `+', or if the\n    environment variable POSIXLY_CORRECT is set, then option\n    processing stops as soon as a non-option argument is encountered.\n\n    ", lineno=107, col_offset=-1), lineno=107, col_offset=-1), Assign([Name('opts', Store(), lineno=109, col_offset=4)], List([], Load(), lineno=109, col_offset=11), lineno=109, col_offset=4), Assign([Name('prog_args', Store(), lineno=110, col_offset=4)], List([], Load(), lineno=110, col_offset=16), lineno=110, col_offset=4), If(Call(Name('isinstance', Load(), lineno=111, col_offset=7), [Name('longopts', Load(), lineno=111, col_offset=18), Name('str', Load(), lineno=111, col_offset=28)], [], None, None, lineno=111, col_offset=7), [Assign([Name('longopts', Store(), lineno=112, col_offset=8)], List([Name('longopts', Load(), lineno=112, col_offset=20)], Load(), lineno=112, col_offset=19), lineno=112, col_offset=8)], [Assign([Name('longopts', Store(), lineno=114, col_offset=8)], Call(Name('list', Load(), lineno=114, col_offset=19), [Name('longopts', Load(), lineno=114, col_offset=24)], [], None, None, lineno=114, col_offset=19), lineno=114, col_offset=8)], lineno=111, col_offset=4), If(Call(Attribute(Name('shortopts', Load(), lineno=117, col_offset=7), 'startswith', Load(), lineno=117, col_offset=7), [Str('+', lineno=117, col_offset=28)], [], None, None, lineno=117, col_offset=7), [Assign([Name('shortopts', Store(), lineno=118, col_offset=8)], Subscript(Name('shortopts', Load(), lineno=118, col_offset=20), Slice(Num(1, lineno=118, col_offset=30), None, None), Load(), lineno=118, col_offset=20), lineno=118, col_offset=8), Assign([Name('all_options_first', Store(), lineno=119, col_offset=8)], Name('True', Load(), lineno=119, col_offset=28), lineno=119, col_offset=8)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=120, col_offset=9), 'environ', Load(), lineno=120, col_offset=9), 'get', Load(), lineno=120, col_offset=9), [Str('POSIXLY_CORRECT', lineno=120, col_offset=24)], [], None, None, lineno=120, col_offset=9), [Assign([Name('all_options_first', Store(), lineno=121, col_offset=8)], Name('True', Load(), lineno=121, col_offset=28), lineno=121, col_offset=8)], [Assign([Name('all_options_first', Store(), lineno=123, col_offset=8)], Name('False', Load(), lineno=123, col_offset=28), lineno=123, col_offset=8)], lineno=120, col_offset=9)], lineno=117, col_offset=4), While(Name('args', Load(), lineno=125, col_offset=10), [If(Compare(Subscript(Name('args', Load(), lineno=126, col_offset=11), Index(Num(0, lineno=126, col_offset=16)), Load(), lineno=126, col_offset=11), [Eq()], [Str('--', lineno=126, col_offset=22)], lineno=126, col_offset=11), [AugAssign(Name('prog_args', Store(), lineno=127, col_offset=12), Add(), Subscript(Name('args', Load(), lineno=127, col_offset=25), Slice(Num(1, lineno=127, col_offset=30), None, None), Load(), lineno=127, col_offset=25), lineno=127, col_offset=12), Break( lineno=128, col_offset=12)], [], lineno=126, col_offset=8), If(Compare(Subscript(Subscript(Name('args', Load(), lineno=130, col_offset=11), Index(Num(0, lineno=130, col_offset=16)), Load(), lineno=130, col_offset=11), Slice(None, Num(2, lineno=130, col_offset=20), None), Load(), lineno=130, col_offset=11), [Eq()], [Str('--', lineno=130, col_offset=26)], lineno=130, col_offset=11), [Assign([Tuple([Name('opts', Store(), lineno=131, col_offset=12), Name('args', Store(), lineno=131, col_offset=18)], Store(), lineno=131, col_offset=12)], Call(Name('do_longs', Load(), lineno=131, col_offset=25), [Name('opts', Load(), lineno=131, col_offset=34), Subscript(Subscript(Name('args', Load(), lineno=131, col_offset=40), Index(Num(0, lineno=131, col_offset=45)), Load(), lineno=131, col_offset=40), Slice(Num(2, lineno=131, col_offset=48), None, None), Load(), lineno=131, col_offset=40), Name('longopts', Load(), lineno=131, col_offset=53), Subscript(Name('args', Load(), lineno=131, col_offset=63), Slice(Num(1, lineno=131, col_offset=68), None, None), Load(), lineno=131, col_offset=63)], [], None, None, lineno=131, col_offset=25), lineno=131, col_offset=12)], [If(BoolOp(And(), [Compare(Subscript(Subscript(Name('args', Load(), lineno=132, col_offset=13), Index(Num(0, lineno=132, col_offset=18)), Load(), lineno=132, col_offset=13), Slice(None, Num(1, lineno=132, col_offset=22), None), Load(), lineno=132, col_offset=13), [Eq()], [Str('-', lineno=132, col_offset=28)], lineno=132, col_offset=13), Compare(Subscript(Name('args', Load(), lineno=132, col_offset=36), Index(Num(0, lineno=132, col_offset=41)), Load(), lineno=132, col_offset=36), [NotEq()], [Str('-', lineno=132, col_offset=47)], lineno=132, col_offset=36)], lineno=132, col_offset=13), [Assign([Tuple([Name('opts', Store(), lineno=133, col_offset=12), Name('args', Store(), lineno=133, col_offset=18)], Store(), lineno=133, col_offset=12)], Call(Name('do_shorts', Load(), lineno=133, col_offset=25), [Name('opts', Load(), lineno=133, col_offset=35), Subscript(Subscript(Name('args', Load(), lineno=133, col_offset=41), Index(Num(0, lineno=133, col_offset=46)), Load(), lineno=133, col_offset=41), Slice(Num(1, lineno=133, col_offset=49), None, None), Load(), lineno=133, col_offset=41), Name('shortopts', Load(), lineno=133, col_offset=54), Subscript(Name('args', Load(), lineno=133, col_offset=65), Slice(Num(1, lineno=133, col_offset=70), None, None), Load(), lineno=133, col_offset=65)], [], None, None, lineno=133, col_offset=25), lineno=133, col_offset=12)], [If(Name('all_options_first', Load(), lineno=135, col_offset=15), [AugAssign(Name('prog_args', Store(), lineno=136, col_offset=16), Add(), Name('args', Load(), lineno=136, col_offset=29), lineno=136, col_offset=16), Break( lineno=137, col_offset=16)], [Expr(Call(Attribute(Name('prog_args', Load(), lineno=139, col_offset=16), 'append', Load(), lineno=139, col_offset=16), [Subscript(Name('args', Load(), lineno=139, col_offset=33), Index(Num(0, lineno=139, col_offset=38)), Load(), lineno=139, col_offset=33)], [], None, None, lineno=139, col_offset=16), lineno=139, col_offset=16), Assign([Name('args', Store(), lineno=140, col_offset=16)], Subscript(Name('args', Load(), lineno=140, col_offset=23), Slice(Num(1, lineno=140, col_offset=28), None, None), Load(), lineno=140, col_offset=23), lineno=140, col_offset=16)], lineno=135, col_offset=12)], lineno=132, col_offset=13)], lineno=130, col_offset=8)], [], lineno=125, col_offset=4), Return(Tuple([Name('opts', Load(), lineno=142, col_offset=11), Name('prog_args', Load(), lineno=142, col_offset=17)], Load(), lineno=142, col_offset=11), lineno=142, col_offset=4)], [], lineno=94, col_offset=0), FunctionDef('do_longs', arguments([Name('opts', Param(), lineno=144, col_offset=13), Name('opt', Param(), lineno=144, col_offset=19), Name('longopts', Param(), lineno=144, col_offset=24), Name('args', Param(), lineno=144, col_offset=34)], None, None, []), [TryExcept([Assign([Name('i', Store(), lineno=146, col_offset=8)], Call(Attribute(Name('opt', Load(), lineno=146, col_offset=12), 'index', Load(), lineno=146, col_offset=12), [Str('=', lineno=146, col_offset=22)], [], None, None, lineno=146, col_offset=12), lineno=146, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=147, col_offset=11), None, [Assign([Name('optarg', Store(), lineno=148, col_offset=8)], Name('None', Load(), lineno=148, col_offset=17), lineno=148, col_offset=8)], lineno=147, col_offset=4)], [Assign([Tuple([Name('opt', Store(), lineno=150, col_offset=8), Name('optarg', Store(), lineno=150, col_offset=13)], Store(), lineno=150, col_offset=8)], Tuple([Subscript(Name('opt', Load(), lineno=150, col_offset=22), Slice(None, Name('i', Load(), lineno=150, col_offset=27), None), Load(), lineno=150, col_offset=22), Subscript(Name('opt', Load(), lineno=150, col_offset=31), Slice(BinOp(Name('i', Load(), lineno=150, col_offset=35), Add(), Num(1, lineno=150, col_offset=37), lineno=150, col_offset=35), None, None), Load(), lineno=150, col_offset=31)], Load(), lineno=150, col_offset=22), lineno=150, col_offset=8)], lineno=145, col_offset=4), Assign([Tuple([Name('has_arg', Store(), lineno=152, col_offset=4), Name('opt', Store(), lineno=152, col_offset=13)], Store(), lineno=152, col_offset=4)], Call(Name('long_has_args', Load(), lineno=152, col_offset=19), [Name('opt', Load(), lineno=152, col_offset=33), Name('longopts', Load(), lineno=152, col_offset=38)], [], None, None, lineno=152, col_offset=19), lineno=152, col_offset=4), If(Name('has_arg', Load(), lineno=153, col_offset=7), [If(Compare(Name('optarg', Load(), lineno=154, col_offset=11), [Is()], [Name('None', Load(), lineno=154, col_offset=21)], lineno=154, col_offset=11), [If(UnaryOp(Not(), Name('args', Load(), lineno=155, col_offset=19), lineno=155, col_offset=15), [Raise(Call(Name('GetoptError', Load(), lineno=156, col_offset=22), [BinOp(Str('option --%s requires argument', lineno=156, col_offset=34), Mod(), Name('opt', Load(), lineno=156, col_offset=68), lineno=156, col_offset=34), Name('opt', Load(), lineno=156, col_offset=73)], [], None, None, lineno=156, col_offset=22), None, None, lineno=156, col_offset=16)], [], lineno=155, col_offset=12), Assign([Tuple([Name('optarg', Store(), lineno=157, col_offset=12), Name('args', Store(), lineno=157, col_offset=20)], Store(), lineno=157, col_offset=12)], Tuple([Subscript(Name('args', Load(), lineno=157, col_offset=27), Index(Num(0, lineno=157, col_offset=32)), Load(), lineno=157, col_offset=27), Subscript(Name('args', Load(), lineno=157, col_offset=36), Slice(Num(1, lineno=157, col_offset=41), None, None), Load(), lineno=157, col_offset=36)], Load(), lineno=157, col_offset=27), lineno=157, col_offset=12)], [], lineno=154, col_offset=8)], [If(Compare(Name('optarg', Load(), lineno=158, col_offset=9), [IsNot()], [Name('None', Load(), lineno=158, col_offset=23)], lineno=158, col_offset=9), [Raise(Call(Name('GetoptError', Load(), lineno=159, col_offset=14), [BinOp(Str('option --%s must not have an argument', lineno=159, col_offset=26), Mod(), Name('opt', Load(), lineno=159, col_offset=68), lineno=159, col_offset=26), Name('opt', Load(), lineno=159, col_offset=73)], [], None, None, lineno=159, col_offset=14), None, None, lineno=159, col_offset=8)], [], lineno=158, col_offset=9)], lineno=153, col_offset=4), Expr(Call(Attribute(Name('opts', Load(), lineno=160, col_offset=4), 'append', Load(), lineno=160, col_offset=4), [Tuple([BinOp(Str('--', lineno=160, col_offset=17), Add(), Name('opt', Load(), lineno=160, col_offset=24), lineno=160, col_offset=17), BoolOp(Or(), [Name('optarg', Load(), lineno=160, col_offset=29), Str('', lineno=160, col_offset=39)], lineno=160, col_offset=29)], Load(), lineno=160, col_offset=17)], [], None, None, lineno=160, col_offset=4), lineno=160, col_offset=4), Return(Tuple([Name('opts', Load(), lineno=161, col_offset=11), Name('args', Load(), lineno=161, col_offset=17)], Load(), lineno=161, col_offset=11), lineno=161, col_offset=4)], [], lineno=144, col_offset=0), FunctionDef('long_has_args', arguments([Name('opt', Param(), lineno=166, col_offset=18), Name('longopts', Param(), lineno=166, col_offset=23)], None, None, []), [Assign([Name('possibilities', Store(), lineno=167, col_offset=4)], ListComp(Name('o', Load(), lineno=167, col_offset=21), [comprehension(Name('o', Store(), lineno=167, col_offset=27), Name('longopts', Load(), lineno=167, col_offset=32), [Call(Attribute(Name('o', Load(), lineno=167, col_offset=44), 'startswith', Load(), lineno=167, col_offset=44), [Name('opt', Load(), lineno=167, col_offset=57)], [], None, None, lineno=167, col_offset=44)])], lineno=167, col_offset=21), lineno=167, col_offset=4), If(UnaryOp(Not(), Name('possibilities', Load(), lineno=168, col_offset=11), lineno=168, col_offset=7), [Raise(Call(Name('GetoptError', Load(), lineno=169, col_offset=14), [BinOp(Str('option --%s not recognized', lineno=169, col_offset=26), Mod(), Name('opt', Load(), lineno=169, col_offset=57), lineno=169, col_offset=26), Name('opt', Load(), lineno=169, col_offset=62)], [], None, None, lineno=169, col_offset=14), None, None, lineno=169, col_offset=8)], [], lineno=168, col_offset=4), If(Compare(Name('opt', Load(), lineno=171, col_offset=7), [In()], [Name('possibilities', Load(), lineno=171, col_offset=14)], lineno=171, col_offset=7), [Return(Tuple([Name('False', Load(), lineno=172, col_offset=15), Name('opt', Load(), lineno=172, col_offset=22)], Load(), lineno=172, col_offset=15), lineno=172, col_offset=8)], [If(Compare(BinOp(Name('opt', Load(), lineno=173, col_offset=9), Add(), Str('=', lineno=173, col_offset=15), lineno=173, col_offset=9), [In()], [Name('possibilities', Load(), lineno=173, col_offset=22)], lineno=173, col_offset=9), [Return(Tuple([Name('True', Load(), lineno=174, col_offset=15), Name('opt', Load(), lineno=174, col_offset=21)], Load(), lineno=174, col_offset=15), lineno=174, col_offset=8)], [], lineno=173, col_offset=9)], lineno=171, col_offset=4), If(Compare(Call(Name('len', Load(), lineno=176, col_offset=7), [Name('possibilities', Load(), lineno=176, col_offset=11)], [], None, None, lineno=176, col_offset=7), [Gt()], [Num(1, lineno=176, col_offset=28)], lineno=176, col_offset=7), [Raise(Call(Name('GetoptError', Load(), lineno=179, col_offset=14), [BinOp(Str('option --%s not a unique prefix', lineno=179, col_offset=26), Mod(), Name('opt', Load(), lineno=179, col_offset=62), lineno=179, col_offset=26), Name('opt', Load(), lineno=179, col_offset=67)], [], None, None, lineno=179, col_offset=14), None, None, lineno=179, col_offset=8)], [], lineno=176, col_offset=4), Assert(Compare(Call(Name('len', Load(), lineno=180, col_offset=11), [Name('possibilities', Load(), lineno=180, col_offset=15)], [], None, None, lineno=180, col_offset=11), [Eq()], [Num(1, lineno=180, col_offset=33)], lineno=180, col_offset=11), None, lineno=180, col_offset=4), Assign([Name('unique_match', Store(), lineno=181, col_offset=4)], Subscript(Name('possibilities', Load(), lineno=181, col_offset=19), Index(Num(0, lineno=181, col_offset=33)), Load(), lineno=181, col_offset=19), lineno=181, col_offset=4), Assign([Name('has_arg', Store(), lineno=182, col_offset=4)], Call(Attribute(Name('unique_match', Load(), lineno=182, col_offset=14), 'endswith', Load(), lineno=182, col_offset=14), [Str('=', lineno=182, col_offset=36)], [], None, None, lineno=182, col_offset=14), lineno=182, col_offset=4), If(Name('has_arg', Load(), lineno=183, col_offset=7), [Assign([Name('unique_match', Store(), lineno=184, col_offset=8)], Subscript(Name('unique_match', Load(), lineno=184, col_offset=23), Slice(None, Num(-1, lineno=184, col_offset=38), None), Load(), lineno=184, col_offset=23), lineno=184, col_offset=8)], [], lineno=183, col_offset=4), Return(Tuple([Name('has_arg', Load(), lineno=185, col_offset=11), Name('unique_match', Load(), lineno=185, col_offset=20)], Load(), lineno=185, col_offset=11), lineno=185, col_offset=4)], [], lineno=166, col_offset=0), FunctionDef('do_shorts', arguments([Name('opts', Param(), lineno=187, col_offset=14), Name('optstring', Param(), lineno=187, col_offset=20), Name('shortopts', Param(), lineno=187, col_offset=31), Name('args', Param(), lineno=187, col_offset=42)], None, None, []), [While(Compare(Name('optstring', Load(), lineno=188, col_offset=10), [NotEq()], [Str('', lineno=188, col_offset=23)], lineno=188, col_offset=10), [Assign([Tuple([Name('opt', Store(), lineno=189, col_offset=8), Name('optstring', Store(), lineno=189, col_offset=13)], Store(), lineno=189, col_offset=8)], Tuple([Subscript(Name('optstring', Load(), lineno=189, col_offset=25), Index(Num(0, lineno=189, col_offset=35)), Load(), lineno=189, col_offset=25), Subscript(Name('optstring', Load(), lineno=189, col_offset=39), Slice(Num(1, lineno=189, col_offset=49), None, None), Load(), lineno=189, col_offset=39)], Load(), lineno=189, col_offset=25), lineno=189, col_offset=8), If(Call(Name('short_has_arg', Load(), lineno=190, col_offset=11), [Name('opt', Load(), lineno=190, col_offset=25), Name('shortopts', Load(), lineno=190, col_offset=30)], [], None, None, lineno=190, col_offset=11), [If(Compare(Name('optstring', Load(), lineno=191, col_offset=15), [Eq()], [Str('', lineno=191, col_offset=28)], lineno=191, col_offset=15), [If(UnaryOp(Not(), Name('args', Load(), lineno=192, col_offset=23), lineno=192, col_offset=19), [Raise(Call(Name('GetoptError', Load(), lineno=193, col_offset=26), [BinOp(Str('option -%s requires argument', lineno=193, col_offset=38), Mod(), Name('opt', Load(), lineno=193, col_offset=71), lineno=193, col_offset=38), Name('opt', Load(), lineno=194, col_offset=38)], [], None, None, lineno=193, col_offset=26), None, None, lineno=193, col_offset=20)], [], lineno=192, col_offset=16), Assign([Tuple([Name('optstring', Store(), lineno=195, col_offset=16), Name('args', Store(), lineno=195, col_offset=27)], Store(), lineno=195, col_offset=16)], Tuple([Subscript(Name('args', Load(), lineno=195, col_offset=34), Index(Num(0, lineno=195, col_offset=39)), Load(), lineno=195, col_offset=34), Subscript(Name('args', Load(), lineno=195, col_offset=43), Slice(Num(1, lineno=195, col_offset=48), None, None), Load(), lineno=195, col_offset=43)], Load(), lineno=195, col_offset=34), lineno=195, col_offset=16)], [], lineno=191, col_offset=12), Assign([Tuple([Name('optarg', Store(), lineno=196, col_offset=12), Name('optstring', Store(), lineno=196, col_offset=20)], Store(), lineno=196, col_offset=12)], Tuple([Name('optstring', Load(), lineno=196, col_offset=32), Str('', lineno=196, col_offset=43)], Load(), lineno=196, col_offset=32), lineno=196, col_offset=12)], [Assign([Name('optarg', Store(), lineno=198, col_offset=12)], Str('', lineno=198, col_offset=21), lineno=198, col_offset=12)], lineno=190, col_offset=8), Expr(Call(Attribute(Name('opts', Load(), lineno=199, col_offset=8), 'append', Load(), lineno=199, col_offset=8), [Tuple([BinOp(Str('-', lineno=199, col_offset=21), Add(), Name('opt', Load(), lineno=199, col_offset=27), lineno=199, col_offset=21), Name('optarg', Load(), lineno=199, col_offset=32)], Load(), lineno=199, col_offset=21)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8)], [], lineno=188, col_offset=4), Return(Tuple([Name('opts', Load(), lineno=200, col_offset=11), Name('args', Load(), lineno=200, col_offset=17)], Load(), lineno=200, col_offset=11), lineno=200, col_offset=4)], [], lineno=187, col_offset=0), FunctionDef('short_has_arg', arguments([Name('opt', Param(), lineno=202, col_offset=18), Name('shortopts', Param(), lineno=202, col_offset=23)], None, None, []), [For(Name('i', Store(), lineno=203, col_offset=8), Call(Name('range', Load(), lineno=203, col_offset=13), [Call(Name('len', Load(), lineno=203, col_offset=19), [Name('shortopts', Load(), lineno=203, col_offset=23)], [], None, None, lineno=203, col_offset=19)], [], None, None, lineno=203, col_offset=13), [If(Compare(Name('opt', Load(), lineno=204, col_offset=11), [Eq(), NotEq()], [Subscript(Name('shortopts', Load(), lineno=204, col_offset=18), Index(Name('i', Load(), lineno=204, col_offset=28)), Load(), lineno=204, col_offset=18), Str(':', lineno=204, col_offset=34)], lineno=204, col_offset=11), [Return(Call(Attribute(Name('shortopts', Load(), lineno=205, col_offset=19), 'startswith', Load(), lineno=205, col_offset=19), [Str(':', lineno=205, col_offset=40), BinOp(Name('i', Load(), lineno=205, col_offset=45), Add(), Num(1, lineno=205, col_offset=47), lineno=205, col_offset=45)], [], None, None, lineno=205, col_offset=19), lineno=205, col_offset=12)], [], lineno=204, col_offset=8)], [], lineno=203, col_offset=4), Raise(Call(Name('GetoptError', Load(), lineno=206, col_offset=10), [BinOp(Str('option -%s not recognized', lineno=206, col_offset=22), Mod(), Name('opt', Load(), lineno=206, col_offset=52), lineno=206, col_offset=22), Name('opt', Load(), lineno=206, col_offset=57)], [], None, None, lineno=206, col_offset=10), None, None, lineno=206, col_offset=4)], [], lineno=202, col_offset=0), If(Compare(Name('__name__', Load(), lineno=208, col_offset=3), [Eq()], [Str('__main__', lineno=208, col_offset=15)], lineno=208, col_offset=3), [Import([alias('sys', None)], lineno=209, col_offset=4), Print(None, [Call(Name('getopt', Load(), lineno=210, col_offset=10), [Subscript(Attribute(Name('sys', Load(), lineno=210, col_offset=17), 'argv', Load(), lineno=210, col_offset=17), Slice(Num(1, lineno=210, col_offset=26), None, None), Load(), lineno=210, col_offset=17), Str('a:b', lineno=210, col_offset=31), List([Str('alpha=', lineno=210, col_offset=39), Str('beta', lineno=210, col_offset=49)], Load(), lineno=210, col_offset=38)], [], None, None, lineno=210, col_offset=10)], True, lineno=210, col_offset=4)], [], lineno=208, col_offset=0)])
