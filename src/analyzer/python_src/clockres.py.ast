Module([Expr(Str(' clockres - calculates the resolution in seconds of a given timer.\n\n    Copyright (c) 2006, Marc-Andre Lemburg (mal@egenix.com). See the\n    documentation for further information on copyrights, or contact\n    the author. All Rights Reserved.\n\n', lineno=9, col_offset=-1), lineno=9, col_offset=-1), Import([alias('time', None)], lineno=10, col_offset=0), Assign([Name('TEST_TIME', Store(), lineno=12, col_offset=0)], Num(1.0, lineno=12, col_offset=12), lineno=12, col_offset=0), FunctionDef('clockres', arguments([Name('timer', Param(), lineno=14, col_offset=13)], None, None, []), [Assign([Name('d', Store(), lineno=15, col_offset=4)], Dict([], [], lineno=15, col_offset=8), lineno=15, col_offset=4), Assign([Name('wallclock', Store(), lineno=16, col_offset=4)], Attribute(Name('time', Load(), lineno=16, col_offset=16), 'time', Load(), lineno=16, col_offset=16), lineno=16, col_offset=4), Assign([Name('start', Store(), lineno=17, col_offset=4)], Call(Name('wallclock', Load(), lineno=17, col_offset=12), [], [], None, None, lineno=17, col_offset=12), lineno=17, col_offset=4), Assign([Name('stop', Store(), lineno=18, col_offset=4)], BinOp(Call(Name('wallclock', Load(), lineno=18, col_offset=11), [], [], None, None, lineno=18, col_offset=11), Add(), Name('TEST_TIME', Load(), lineno=18, col_offset=25), lineno=18, col_offset=11), lineno=18, col_offset=4), Assign([Name('spin_loops', Store(), lineno=19, col_offset=4)], Call(Name('range', Load(), lineno=19, col_offset=17), [Num(1000, lineno=19, col_offset=23)], [], None, None, lineno=19, col_offset=17), lineno=19, col_offset=4), While(Num(1, lineno=20, col_offset=10), [Assign([Name('now', Store(), lineno=21, col_offset=8)], Call(Name('wallclock', Load(), lineno=21, col_offset=14), [], [], None, None, lineno=21, col_offset=14), lineno=21, col_offset=8), If(Compare(Name('now', Load(), lineno=22, col_offset=11), [GtE()], [Name('stop', Load(), lineno=22, col_offset=18)], lineno=22, col_offset=11), [Break( lineno=23, col_offset=12)], [], lineno=22, col_offset=8), For(Name('i', Store(), lineno=24, col_offset=12), Name('spin_loops', Load(), lineno=24, col_offset=17), [Assign([Subscript(Name('d', Load(), lineno=25, col_offset=12), Index(Call(Name('timer', Load(), lineno=25, col_offset=14), [], [], None, None, lineno=25, col_offset=14)), Store(), lineno=25, col_offset=12)], Num(1, lineno=25, col_offset=25), lineno=25, col_offset=12)], [], lineno=24, col_offset=8)], [], lineno=20, col_offset=4), Assign([Name('values', Store(), lineno=26, col_offset=4)], Call(Attribute(Name('d', Load(), lineno=26, col_offset=13), 'keys', Load(), lineno=26, col_offset=13), [], [], None, None, lineno=26, col_offset=13), lineno=26, col_offset=4), Expr(Call(Attribute(Name('values', Load(), lineno=27, col_offset=4), 'sort', Load(), lineno=27, col_offset=4), [], [], None, None, lineno=27, col_offset=4), lineno=27, col_offset=4), Assign([Name('min_diff', Store(), lineno=28, col_offset=4)], Name('TEST_TIME', Load(), lineno=28, col_offset=15), lineno=28, col_offset=4), For(Name('i', Store(), lineno=29, col_offset=8), Call(Name('range', Load(), lineno=29, col_offset=13), [BinOp(Call(Name('len', Load(), lineno=29, col_offset=19), [Name('values', Load(), lineno=29, col_offset=23)], [], None, None, lineno=29, col_offset=19), Sub(), Num(1, lineno=29, col_offset=33), lineno=29, col_offset=19)], [], None, None, lineno=29, col_offset=13), [Assign([Name('diff', Store(), lineno=30, col_offset=8)], BinOp(Subscript(Name('values', Load(), lineno=30, col_offset=15), Index(BinOp(Name('i', Load(), lineno=30, col_offset=22), Add(), Num(1, lineno=30, col_offset=24), lineno=30, col_offset=22)), Load(), lineno=30, col_offset=15), Sub(), Subscript(Name('values', Load(), lineno=30, col_offset=29), Index(Name('i', Load(), lineno=30, col_offset=36)), Load(), lineno=30, col_offset=29), lineno=30, col_offset=15), lineno=30, col_offset=8), If(Compare(Name('diff', Load(), lineno=31, col_offset=11), [Lt()], [Name('min_diff', Load(), lineno=31, col_offset=18)], lineno=31, col_offset=11), [Assign([Name('min_diff', Store(), lineno=32, col_offset=12)], Name('diff', Load(), lineno=32, col_offset=23), lineno=32, col_offset=12)], [], lineno=31, col_offset=8)], [], lineno=29, col_offset=4), Return(Name('min_diff', Load(), lineno=33, col_offset=11), lineno=33, col_offset=4)], [], lineno=14, col_offset=0), If(Compare(Name('__name__', Load(), lineno=35, col_offset=3), [Eq()], [Str('__main__', lineno=35, col_offset=15)], lineno=35, col_offset=3), [Print(None, [Str('Clock resolution of various timer implementations:', lineno=36, col_offset=10)], True, lineno=36, col_offset=4), Print(None, [BinOp(Str('time.clock:           %10.3fus', lineno=37, col_offset=10), Mod(), BinOp(Call(Name('clockres', Load(), lineno=37, col_offset=46), [Attribute(Name('time', Load(), lineno=37, col_offset=55), 'clock', Load(), lineno=37, col_offset=55)], [], None, None, lineno=37, col_offset=46), Mult(), Num(1000000.0, lineno=37, col_offset=69), lineno=37, col_offset=46), lineno=37, col_offset=10)], True, lineno=37, col_offset=4), Print(None, [BinOp(Str('time.time:            %10.3fus', lineno=38, col_offset=10), Mod(), BinOp(Call(Name('clockres', Load(), lineno=38, col_offset=46), [Attribute(Name('time', Load(), lineno=38, col_offset=55), 'time', Load(), lineno=38, col_offset=55)], [], None, None, lineno=38, col_offset=46), Mult(), Num(1000000.0, lineno=38, col_offset=68), lineno=38, col_offset=46), lineno=38, col_offset=10)], True, lineno=38, col_offset=4), TryExcept([Import([alias('systimes', None)], lineno=40, col_offset=8), Print(None, [BinOp(Str('systimes.processtime: %10.3fus', lineno=41, col_offset=14), Mod(), BinOp(Call(Name('clockres', Load(), lineno=41, col_offset=50), [Attribute(Name('systimes', Load(), lineno=41, col_offset=59), 'processtime', Load(), lineno=41, col_offset=59)], [], None, None, lineno=41, col_offset=50), Mult(), Num(1000000.0, lineno=41, col_offset=83), lineno=41, col_offset=50), lineno=41, col_offset=14)], True, lineno=41, col_offset=8)], [ExceptHandler(Name('ImportError', Load(), lineno=42, col_offset=11), None, [Pass( lineno=43, col_offset=8)], lineno=42, col_offset=4)], [], lineno=39, col_offset=4)], [], lineno=35, col_offset=0)])
