Module([Expr(Str('Calendar printing functions\n\nNote when comparing these calendars to the ones printed by cal(1): By\ndefault, these calendars have Monday as the first day of the week, and\nSunday as the last (the European convention). Use setfirstweekday() to\nset the first day of the week (0=Monday, 6=Sunday).', lineno=6, col_offset=-1), lineno=6, col_offset=-1), Import([alias('sys', None)], lineno=8, col_offset=0), Import([alias('datetime', None)], lineno=9, col_offset=0), Import([alias('locale', '_locale')], lineno=10, col_offset=0), Assign([Name('__all__', Store(), lineno=12, col_offset=0)], List([Str('IllegalMonthError', lineno=12, col_offset=11), Str('IllegalWeekdayError', lineno=12, col_offset=32), Str('setfirstweekday', lineno=12, col_offset=55), Str('firstweekday', lineno=13, col_offset=11), Str('isleap', lineno=13, col_offset=27), Str('leapdays', lineno=13, col_offset=37), Str('weekday', lineno=13, col_offset=49), Str('monthrange', lineno=13, col_offset=60), Str('monthcalendar', lineno=14, col_offset=11), Str('prmonth', lineno=14, col_offset=28), Str('month', lineno=14, col_offset=39), Str('prcal', lineno=14, col_offset=48), Str('calendar', lineno=14, col_offset=57), Str('timegm', lineno=15, col_offset=11), Str('month_name', lineno=15, col_offset=21), Str('month_abbr', lineno=15, col_offset=35), Str('day_name', lineno=15, col_offset=49), Str('day_abbr', lineno=15, col_offset=61)], Load(), lineno=12, col_offset=10), lineno=12, col_offset=0), Assign([Name('error', Store(), lineno=18, col_offset=0)], Name('ValueError', Load(), lineno=18, col_offset=8), lineno=18, col_offset=0), ClassDef('IllegalMonthError', [Name('ValueError', Load(), lineno=21, col_offset=24)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=22, col_offset=17), Name('month', Param(), lineno=22, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'month', Store(), lineno=23, col_offset=8)], Name('month', Load(), lineno=23, col_offset=21), lineno=23, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=24, col_offset=16)], None, None, []), [Return(BinOp(Str('bad month number %r; must be 1-12', lineno=25, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=25, col_offset=53), 'month', Load(), lineno=25, col_offset=53), lineno=25, col_offset=15), lineno=25, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=21, col_offset=0), ClassDef('IllegalWeekdayError', [Name('ValueError', Load(), lineno=28, col_offset=26)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=29, col_offset=17), Name('weekday', Param(), lineno=29, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=30, col_offset=8), 'weekday', Store(), lineno=30, col_offset=8)], Name('weekday', Load(), lineno=30, col_offset=23), lineno=30, col_offset=8)], [], lineno=29, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=31, col_offset=16)], None, None, []), [Return(BinOp(Str('bad weekday number %r; must be 0 (Monday) to 6 (Sunday)', lineno=32, col_offset=15), Mod(), Attribute(Name('self', Load(), lineno=32, col_offset=75), 'weekday', Load(), lineno=32, col_offset=75), lineno=32, col_offset=15), lineno=32, col_offset=8)], [], lineno=31, col_offset=4)], [], lineno=28, col_offset=0), Assign([Name('January', Store(), lineno=36, col_offset=0)], Num(1, lineno=36, col_offset=10), lineno=36, col_offset=0), Assign([Name('February', Store(), lineno=37, col_offset=0)], Num(2, lineno=37, col_offset=11), lineno=37, col_offset=0), Assign([Name('mdays', Store(), lineno=40, col_offset=0)], List([Num(0, lineno=40, col_offset=9), Num(31, lineno=40, col_offset=12), Num(28, lineno=40, col_offset=16), Num(31, lineno=40, col_offset=20), Num(30, lineno=40, col_offset=24), Num(31, lineno=40, col_offset=28), Num(30, lineno=40, col_offset=32), Num(31, lineno=40, col_offset=36), Num(31, lineno=40, col_offset=40), Num(30, lineno=40, col_offset=44), Num(31, lineno=40, col_offset=48), Num(30, lineno=40, col_offset=52), Num(31, lineno=40, col_offset=56)], Load(), lineno=40, col_offset=8), lineno=40, col_offset=0), ClassDef('_localized_month', [], [Assign([Name('_months', Store(), lineno=49, col_offset=4)], ListComp(Attribute(Call(Attribute(Name('datetime', Load(), lineno=49, col_offset=15), 'date', Load(), lineno=49, col_offset=15), [Num(2001, lineno=49, col_offset=29), BinOp(Name('i', Load(), lineno=49, col_offset=35), Add(), Num(1, lineno=49, col_offset=37), lineno=49, col_offset=35), Num(1, lineno=49, col_offset=40)], [], None, None, lineno=49, col_offset=15), 'strftime', Load(), lineno=49, col_offset=15), [comprehension(Name('i', Store(), lineno=49, col_offset=56), Call(Name('range', Load(), lineno=49, col_offset=61), [Num(12, lineno=49, col_offset=67)], [], None, None, lineno=49, col_offset=61), [])], lineno=49, col_offset=15), lineno=49, col_offset=4), Expr(Call(Attribute(Name('_months', Load(), lineno=50, col_offset=4), 'insert', Load(), lineno=50, col_offset=4), [Num(0, lineno=50, col_offset=19), Lambda(arguments([Name('x', Param(), lineno=50, col_offset=29)], None, None, []), Str('', lineno=50, col_offset=32), lineno=50, col_offset=22)], [], None, None, lineno=50, col_offset=4), lineno=50, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=52, col_offset=17), Name('format', Param(), lineno=52, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=53, col_offset=8), 'format', Store(), lineno=53, col_offset=8)], Name('format', Load(), lineno=53, col_offset=22), lineno=53, col_offset=8)], [], lineno=52, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=55, col_offset=20), Name('i', Param(), lineno=55, col_offset=26)], None, None, []), [Assign([Name('funcs', Store(), lineno=56, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=56, col_offset=16), '_months', Load(), lineno=56, col_offset=16), Index(Name('i', Load(), lineno=56, col_offset=29)), Load(), lineno=56, col_offset=16), lineno=56, col_offset=8), If(Call(Name('isinstance', Load(), lineno=57, col_offset=11), [Name('i', Load(), lineno=57, col_offset=22), Name('slice', Load(), lineno=57, col_offset=25)], [], None, None, lineno=57, col_offset=11), [Return(ListComp(Call(Name('f', Load(), lineno=58, col_offset=20), [Attribute(Name('self', Load(), lineno=58, col_offset=22), 'format', Load(), lineno=58, col_offset=22)], [], None, None, lineno=58, col_offset=20), [comprehension(Name('f', Store(), lineno=58, col_offset=39), Name('funcs', Load(), lineno=58, col_offset=44), [])], lineno=58, col_offset=20), lineno=58, col_offset=12)], [Return(Call(Name('funcs', Load(), lineno=60, col_offset=19), [Attribute(Name('self', Load(), lineno=60, col_offset=25), 'format', Load(), lineno=60, col_offset=25)], [], None, None, lineno=60, col_offset=19), lineno=60, col_offset=12)], lineno=57, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=62, col_offset=16)], None, None, []), [Return(Num(13, lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=62, col_offset=4)], [], lineno=47, col_offset=0), ClassDef('_localized_day', [], [Assign([Name('_days', Store(), lineno=69, col_offset=4)], ListComp(Attribute(Call(Attribute(Name('datetime', Load(), lineno=69, col_offset=13), 'date', Load(), lineno=69, col_offset=13), [Num(2001, lineno=69, col_offset=27), Num(1, lineno=69, col_offset=33), BinOp(Name('i', Load(), lineno=69, col_offset=36), Add(), Num(1, lineno=69, col_offset=38), lineno=69, col_offset=36)], [], None, None, lineno=69, col_offset=13), 'strftime', Load(), lineno=69, col_offset=13), [comprehension(Name('i', Store(), lineno=69, col_offset=54), Call(Name('range', Load(), lineno=69, col_offset=59), [Num(7, lineno=69, col_offset=65)], [], None, None, lineno=69, col_offset=59), [])], lineno=69, col_offset=13), lineno=69, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=71, col_offset=17), Name('format', Param(), lineno=71, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=72, col_offset=8), 'format', Store(), lineno=72, col_offset=8)], Name('format', Load(), lineno=72, col_offset=22), lineno=72, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=74, col_offset=20), Name('i', Param(), lineno=74, col_offset=26)], None, None, []), [Assign([Name('funcs', Store(), lineno=75, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=75, col_offset=16), '_days', Load(), lineno=75, col_offset=16), Index(Name('i', Load(), lineno=75, col_offset=27)), Load(), lineno=75, col_offset=16), lineno=75, col_offset=8), If(Call(Name('isinstance', Load(), lineno=76, col_offset=11), [Name('i', Load(), lineno=76, col_offset=22), Name('slice', Load(), lineno=76, col_offset=25)], [], None, None, lineno=76, col_offset=11), [Return(ListComp(Call(Name('f', Load(), lineno=77, col_offset=20), [Attribute(Name('self', Load(), lineno=77, col_offset=22), 'format', Load(), lineno=77, col_offset=22)], [], None, None, lineno=77, col_offset=20), [comprehension(Name('f', Store(), lineno=77, col_offset=39), Name('funcs', Load(), lineno=77, col_offset=44), [])], lineno=77, col_offset=20), lineno=77, col_offset=12)], [Return(Call(Name('funcs', Load(), lineno=79, col_offset=19), [Attribute(Name('self', Load(), lineno=79, col_offset=25), 'format', Load(), lineno=79, col_offset=25)], [], None, None, lineno=79, col_offset=19), lineno=79, col_offset=12)], lineno=76, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=81, col_offset=16)], None, None, []), [Return(Num(7, lineno=82, col_offset=15), lineno=82, col_offset=8)], [], lineno=81, col_offset=4)], [], lineno=66, col_offset=0), Assign([Name('day_name', Store(), lineno=86, col_offset=0)], Call(Name('_localized_day', Load(), lineno=86, col_offset=11), [Str('%A', lineno=86, col_offset=26)], [], None, None, lineno=86, col_offset=11), lineno=86, col_offset=0), Assign([Name('day_abbr', Store(), lineno=87, col_offset=0)], Call(Name('_localized_day', Load(), lineno=87, col_offset=11), [Str('%a', lineno=87, col_offset=26)], [], None, None, lineno=87, col_offset=11), lineno=87, col_offset=0), Assign([Name('month_name', Store(), lineno=90, col_offset=0)], Call(Name('_localized_month', Load(), lineno=90, col_offset=13), [Str('%B', lineno=90, col_offset=30)], [], None, None, lineno=90, col_offset=13), lineno=90, col_offset=0), Assign([Name('month_abbr', Store(), lineno=91, col_offset=0)], Call(Name('_localized_month', Load(), lineno=91, col_offset=13), [Str('%b', lineno=91, col_offset=30)], [], None, None, lineno=91, col_offset=13), lineno=91, col_offset=0), Assign([Tuple([Name('MONDAY', Store(), lineno=94, col_offset=1), Name('TUESDAY', Store(), lineno=94, col_offset=9), Name('WEDNESDAY', Store(), lineno=94, col_offset=18), Name('THURSDAY', Store(), lineno=94, col_offset=29), Name('FRIDAY', Store(), lineno=94, col_offset=39), Name('SATURDAY', Store(), lineno=94, col_offset=47), Name('SUNDAY', Store(), lineno=94, col_offset=57)], Store(), lineno=94, col_offset=1)], Call(Name('range', Load(), lineno=94, col_offset=67), [Num(7, lineno=94, col_offset=73)], [], None, None, lineno=94, col_offset=67), lineno=94, col_offset=0), FunctionDef('isleap', arguments([Name('year', Param(), lineno=97, col_offset=11)], None, None, []), [Expr(Str('Return True for leap years, False for non-leap years.', lineno=98, col_offset=4), lineno=98, col_offset=4), Return(BoolOp(And(), [Compare(BinOp(Name('year', Load(), lineno=99, col_offset=11), Mod(), Num(4, lineno=99, col_offset=18), lineno=99, col_offset=11), [Eq()], [Num(0, lineno=99, col_offset=23)], lineno=99, col_offset=11), BoolOp(Or(), [Compare(BinOp(Name('year', Load(), lineno=99, col_offset=30), Mod(), Num(100, lineno=99, col_offset=37), lineno=99, col_offset=30), [NotEq()], [Num(0, lineno=99, col_offset=44)], lineno=99, col_offset=30), Compare(BinOp(Name('year', Load(), lineno=99, col_offset=49), Mod(), Num(400, lineno=99, col_offset=56), lineno=99, col_offset=49), [Eq()], [Num(0, lineno=99, col_offset=63)], lineno=99, col_offset=49)], lineno=99, col_offset=30)], lineno=99, col_offset=11), lineno=99, col_offset=4)], [], lineno=97, col_offset=0), FunctionDef('leapdays', arguments([Name('y1', Param(), lineno=102, col_offset=13), Name('y2', Param(), lineno=102, col_offset=17)], None, None, []), [Expr(Str('Return number of leap years in range [y1, y2).\n       Assume y1 <= y2.', lineno=104, col_offset=-1), lineno=104, col_offset=-1), AugAssign(Name('y1', Store(), lineno=105, col_offset=4), Sub(), Num(1, lineno=105, col_offset=10), lineno=105, col_offset=4), AugAssign(Name('y2', Store(), lineno=106, col_offset=4), Sub(), Num(1, lineno=106, col_offset=10), lineno=106, col_offset=4), Return(BinOp(BinOp(BinOp(BinOp(Name('y2', Load(), lineno=107, col_offset=12), FloorDiv(), Num(4, lineno=107, col_offset=16), lineno=107, col_offset=12), Sub(), BinOp(Name('y1', Load(), lineno=107, col_offset=20), FloorDiv(), Num(4, lineno=107, col_offset=24), lineno=107, col_offset=20), lineno=107, col_offset=12), Sub(), BinOp(BinOp(Name('y2', Load(), lineno=107, col_offset=30), FloorDiv(), Num(100, lineno=107, col_offset=34), lineno=107, col_offset=30), Sub(), BinOp(Name('y1', Load(), lineno=107, col_offset=40), FloorDiv(), Num(100, lineno=107, col_offset=44), lineno=107, col_offset=40), lineno=107, col_offset=30), lineno=107, col_offset=11), Add(), BinOp(BinOp(Name('y2', Load(), lineno=107, col_offset=52), FloorDiv(), Num(400, lineno=107, col_offset=56), lineno=107, col_offset=52), Sub(), BinOp(Name('y1', Load(), lineno=107, col_offset=62), FloorDiv(), Num(400, lineno=107, col_offset=66), lineno=107, col_offset=62), lineno=107, col_offset=52), lineno=107, col_offset=49), lineno=107, col_offset=4)], [], lineno=102, col_offset=0), FunctionDef('weekday', arguments([Name('year', Param(), lineno=110, col_offset=12), Name('month', Param(), lineno=110, col_offset=18), Name('day', Param(), lineno=110, col_offset=25)], None, None, []), [Expr(Str('Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),\n       day (1-31).', lineno=112, col_offset=-1), lineno=112, col_offset=-1), Return(Call(Attribute(Call(Attribute(Name('datetime', Load(), lineno=113, col_offset=11), 'date', Load(), lineno=113, col_offset=11), [Name('year', Load(), lineno=113, col_offset=25), Name('month', Load(), lineno=113, col_offset=31), Name('day', Load(), lineno=113, col_offset=38)], [], None, None, lineno=113, col_offset=11), 'weekday', Load(), lineno=113, col_offset=11), [], [], None, None, lineno=113, col_offset=11), lineno=113, col_offset=4)], [], lineno=110, col_offset=0), FunctionDef('monthrange', arguments([Name('year', Param(), lineno=116, col_offset=15), Name('month', Param(), lineno=116, col_offset=21)], None, None, []), [Expr(Str('Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for\n       year, month.', lineno=118, col_offset=-1), lineno=118, col_offset=-1), If(UnaryOp(Not(), Compare(Num(1, lineno=119, col_offset=11), [LtE(), LtE()], [Name('month', Load(), lineno=119, col_offset=16), Num(12, lineno=119, col_offset=25)], lineno=119, col_offset=11), lineno=119, col_offset=7), [Raise(Call(Name('IllegalMonthError', Load(), lineno=120, col_offset=14), [Name('month', Load(), lineno=120, col_offset=32)], [], None, None, lineno=120, col_offset=14), None, None, lineno=120, col_offset=8)], [], lineno=119, col_offset=4), Assign([Name('day1', Store(), lineno=121, col_offset=4)], Call(Name('weekday', Load(), lineno=121, col_offset=11), [Name('year', Load(), lineno=121, col_offset=19), Name('month', Load(), lineno=121, col_offset=25), Num(1, lineno=121, col_offset=32)], [], None, None, lineno=121, col_offset=11), lineno=121, col_offset=4), Assign([Name('ndays', Store(), lineno=122, col_offset=4)], BinOp(Subscript(Name('mdays', Load(), lineno=122, col_offset=12), Index(Name('month', Load(), lineno=122, col_offset=18)), Load(), lineno=122, col_offset=12), Add(), BoolOp(And(), [Compare(Name('month', Load(), lineno=122, col_offset=28), [Eq()], [Name('February', Load(), lineno=122, col_offset=37)], lineno=122, col_offset=28), Call(Name('isleap', Load(), lineno=122, col_offset=50), [Name('year', Load(), lineno=122, col_offset=57)], [], None, None, lineno=122, col_offset=50)], lineno=122, col_offset=28), lineno=122, col_offset=12), lineno=122, col_offset=4), Return(Tuple([Name('day1', Load(), lineno=123, col_offset=11), Name('ndays', Load(), lineno=123, col_offset=17)], Load(), lineno=123, col_offset=11), lineno=123, col_offset=4)], [], lineno=116, col_offset=0), ClassDef('Calendar', [Name('object', Load(), lineno=126, col_offset=15)], [Expr(Str("\n    Base calendar class. This class doesn't do any formatting. It simply\n    provides data to subclasses.\n    ", lineno=130, col_offset=-1), lineno=130, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=132, col_offset=17), Name('firstweekday', Param(), lineno=132, col_offset=23)], None, None, [Num(0, lineno=132, col_offset=36)]), [Assign([Attribute(Name('self', Load(), lineno=133, col_offset=8), 'firstweekday', Store(), lineno=133, col_offset=8)], Name('firstweekday', Load(), lineno=133, col_offset=28), lineno=133, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('getfirstweekday', arguments([Name('self', Param(), lineno=135, col_offset=24)], None, None, []), [Return(BinOp(Attribute(Name('self', Load(), lineno=136, col_offset=15), '_firstweekday', Load(), lineno=136, col_offset=15), Mod(), Num(7, lineno=136, col_offset=36), lineno=136, col_offset=15), lineno=136, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('setfirstweekday', arguments([Name('self', Param(), lineno=138, col_offset=24), Name('firstweekday', Param(), lineno=138, col_offset=30)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=139, col_offset=8), '_firstweekday', Store(), lineno=139, col_offset=8)], Name('firstweekday', Load(), lineno=139, col_offset=29), lineno=139, col_offset=8)], [], lineno=138, col_offset=4), Assign([Name('firstweekday', Store(), lineno=141, col_offset=4)], Call(Name('property', Load(), lineno=141, col_offset=19), [Name('getfirstweekday', Load(), lineno=141, col_offset=28), Name('setfirstweekday', Load(), lineno=141, col_offset=45)], [], None, None, lineno=141, col_offset=19), lineno=141, col_offset=4), FunctionDef('iterweekdays', arguments([Name('self', Param(), lineno=143, col_offset=21)], None, None, []), [Expr(Str('\n        Return a iterator for one week of weekday numbers starting with the\n        configured first one.\n        ', lineno=147, col_offset=-1), lineno=147, col_offset=-1), For(Name('i', Store(), lineno=148, col_offset=12), Call(Name('range', Load(), lineno=148, col_offset=17), [Attribute(Name('self', Load(), lineno=148, col_offset=23), 'firstweekday', Load(), lineno=148, col_offset=23), BinOp(Attribute(Name('self', Load(), lineno=148, col_offset=42), 'firstweekday', Load(), lineno=148, col_offset=42), Add(), Num(7, lineno=148, col_offset=62), lineno=148, col_offset=42)], [], None, None, lineno=148, col_offset=17), [Expr(Yield(BinOp(Name('i', Load(), lineno=149, col_offset=18), Mod(), Num(7, lineno=149, col_offset=20), lineno=149, col_offset=18), lineno=149, col_offset=12), lineno=149, col_offset=12)], [], lineno=148, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('itermonthdates', arguments([Name('self', Param(), lineno=151, col_offset=23), Name('year', Param(), lineno=151, col_offset=29), Name('month', Param(), lineno=151, col_offset=35)], None, None, []), [Expr(Str('\n        Return an iterator for one month. The iterator will yield datetime.date\n        values and will always iterate through complete weeks, so it will yield\n        dates outside the specified month.\n        ', lineno=156, col_offset=-1), lineno=156, col_offset=-1), Assign([Name('date', Store(), lineno=157, col_offset=8)], Call(Attribute(Name('datetime', Load(), lineno=157, col_offset=15), 'date', Load(), lineno=157, col_offset=15), [Name('year', Load(), lineno=157, col_offset=29), Name('month', Load(), lineno=157, col_offset=35), Num(1, lineno=157, col_offset=42)], [], None, None, lineno=157, col_offset=15), lineno=157, col_offset=8), Assign([Name('days', Store(), lineno=159, col_offset=8)], BinOp(BinOp(Call(Attribute(Name('date', Load(), lineno=159, col_offset=16), 'weekday', Load(), lineno=159, col_offset=16), [], [], None, None, lineno=159, col_offset=16), Sub(), Attribute(Name('self', Load(), lineno=159, col_offset=33), 'firstweekday', Load(), lineno=159, col_offset=33), lineno=159, col_offset=16), Mod(), Num(7, lineno=159, col_offset=54), lineno=159, col_offset=15), lineno=159, col_offset=8), AugAssign(Name('date', Store(), lineno=160, col_offset=8), Sub(), Call(Attribute(Name('datetime', Load(), lineno=160, col_offset=16), 'timedelta', Load(), lineno=160, col_offset=16), [], [keyword('days', Name('days', Load(), lineno=160, col_offset=40))], None, None, lineno=160, col_offset=16), lineno=160, col_offset=8), Assign([Name('oneday', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('datetime', Load(), lineno=161, col_offset=17), 'timedelta', Load(), lineno=161, col_offset=17), [], [keyword('days', Num(1, lineno=161, col_offset=41))], None, None, lineno=161, col_offset=17), lineno=161, col_offset=8), While(Name('True', Load(), lineno=162, col_offset=14), [Expr(Yield(Name('date', Load(), lineno=163, col_offset=18), lineno=163, col_offset=12), lineno=163, col_offset=12), AugAssign(Name('date', Store(), lineno=164, col_offset=12), Add(), Name('oneday', Load(), lineno=164, col_offset=20), lineno=164, col_offset=12), If(BoolOp(And(), [Compare(Attribute(Name('date', Load(), lineno=165, col_offset=15), 'month', Load(), lineno=165, col_offset=15), [NotEq()], [Name('month', Load(), lineno=165, col_offset=29)], lineno=165, col_offset=15), Compare(Call(Attribute(Name('date', Load(), lineno=165, col_offset=39), 'weekday', Load(), lineno=165, col_offset=39), [], [], None, None, lineno=165, col_offset=39), [Eq()], [Attribute(Name('self', Load(), lineno=165, col_offset=57), 'firstweekday', Load(), lineno=165, col_offset=57)], lineno=165, col_offset=39)], lineno=165, col_offset=15), [Break( lineno=166, col_offset=16)], [], lineno=165, col_offset=12)], [], lineno=162, col_offset=8)], [], lineno=151, col_offset=4), FunctionDef('itermonthdays2', arguments([Name('self', Param(), lineno=168, col_offset=23), Name('year', Param(), lineno=168, col_offset=29), Name('month', Param(), lineno=168, col_offset=35)], None, None, []), [Expr(Str('\n        Like itermonthdates(), but will yield (day number, weekday number)\n        tuples. For days outside the specified month the day number is 0.\n        ', lineno=172, col_offset=-1), lineno=172, col_offset=-1), For(Name('date', Store(), lineno=173, col_offset=12), Call(Attribute(Name('self', Load(), lineno=173, col_offset=20), 'itermonthdates', Load(), lineno=173, col_offset=20), [Name('year', Load(), lineno=173, col_offset=40), Name('month', Load(), lineno=173, col_offset=46)], [], None, None, lineno=173, col_offset=20), [If(Compare(Attribute(Name('date', Load(), lineno=174, col_offset=15), 'month', Load(), lineno=174, col_offset=15), [NotEq()], [Name('month', Load(), lineno=174, col_offset=29)], lineno=174, col_offset=15), [Expr(Yield(Tuple([Num(0, lineno=175, col_offset=23), Call(Attribute(Name('date', Load(), lineno=175, col_offset=26), 'weekday', Load(), lineno=175, col_offset=26), [], [], None, None, lineno=175, col_offset=26)], Load(), lineno=175, col_offset=23), lineno=175, col_offset=16), lineno=175, col_offset=16)], [Expr(Yield(Tuple([Attribute(Name('date', Load(), lineno=177, col_offset=23), 'day', Load(), lineno=177, col_offset=23), Call(Attribute(Name('date', Load(), lineno=177, col_offset=33), 'weekday', Load(), lineno=177, col_offset=33), [], [], None, None, lineno=177, col_offset=33)], Load(), lineno=177, col_offset=23), lineno=177, col_offset=16), lineno=177, col_offset=16)], lineno=174, col_offset=12)], [], lineno=173, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('itermonthdays', arguments([Name('self', Param(), lineno=179, col_offset=22), Name('year', Param(), lineno=179, col_offset=28), Name('month', Param(), lineno=179, col_offset=34)], None, None, []), [Expr(Str('\n        Like itermonthdates(), but will yield day numbers. For days outside\n        the specified month the day number is 0.\n        ', lineno=183, col_offset=-1), lineno=183, col_offset=-1), For(Name('date', Store(), lineno=184, col_offset=12), Call(Attribute(Name('self', Load(), lineno=184, col_offset=20), 'itermonthdates', Load(), lineno=184, col_offset=20), [Name('year', Load(), lineno=184, col_offset=40), Name('month', Load(), lineno=184, col_offset=46)], [], None, None, lineno=184, col_offset=20), [If(Compare(Attribute(Name('date', Load(), lineno=185, col_offset=15), 'month', Load(), lineno=185, col_offset=15), [NotEq()], [Name('month', Load(), lineno=185, col_offset=29)], lineno=185, col_offset=15), [Expr(Yield(Num(0, lineno=186, col_offset=22), lineno=186, col_offset=16), lineno=186, col_offset=16)], [Expr(Yield(Attribute(Name('date', Load(), lineno=188, col_offset=22), 'day', Load(), lineno=188, col_offset=22), lineno=188, col_offset=16), lineno=188, col_offset=16)], lineno=185, col_offset=12)], [], lineno=184, col_offset=8)], [], lineno=179, col_offset=4), FunctionDef('monthdatescalendar', arguments([Name('self', Param(), lineno=190, col_offset=27), Name('year', Param(), lineno=190, col_offset=33), Name('month', Param(), lineno=190, col_offset=39)], None, None, []), [Expr(Str("\n        Return a matrix (list of lists) representing a month's calendar.\n        Each row represents a week; week entries are datetime.date values.\n        ", lineno=194, col_offset=-1), lineno=194, col_offset=-1), Assign([Name('dates', Store(), lineno=195, col_offset=8)], Call(Name('list', Load(), lineno=195, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=195, col_offset=21), 'itermonthdates', Load(), lineno=195, col_offset=21), [Name('year', Load(), lineno=195, col_offset=41), Name('month', Load(), lineno=195, col_offset=47)], [], None, None, lineno=195, col_offset=21)], [], None, None, lineno=195, col_offset=16), lineno=195, col_offset=8), Return(ListComp(Subscript(Name('dates', Load(), lineno=196, col_offset=17), Slice(Name('i', Load(), lineno=196, col_offset=23), BinOp(Name('i', Load(), lineno=196, col_offset=25), Add(), Num(7, lineno=196, col_offset=27), lineno=196, col_offset=25), None), Load(), lineno=196, col_offset=17), [comprehension(Name('i', Store(), lineno=196, col_offset=34), Call(Name('range', Load(), lineno=196, col_offset=39), [Num(0, lineno=196, col_offset=45), Call(Name('len', Load(), lineno=196, col_offset=48), [Name('dates', Load(), lineno=196, col_offset=52)], [], None, None, lineno=196, col_offset=48), Num(7, lineno=196, col_offset=60)], [], None, None, lineno=196, col_offset=39), [])], lineno=196, col_offset=17), lineno=196, col_offset=8)], [], lineno=190, col_offset=4), FunctionDef('monthdays2calendar', arguments([Name('self', Param(), lineno=198, col_offset=27), Name('year', Param(), lineno=198, col_offset=33), Name('month', Param(), lineno=198, col_offset=39)], None, None, []), [Expr(Str("\n        Return a matrix representing a month's calendar.\n        Each row represents a week; week entries are\n        (day number, weekday number) tuples. Day numbers outside this month\n        are zero.\n        ", lineno=204, col_offset=-1), lineno=204, col_offset=-1), Assign([Name('days', Store(), lineno=205, col_offset=8)], Call(Name('list', Load(), lineno=205, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=205, col_offset=20), 'itermonthdays2', Load(), lineno=205, col_offset=20), [Name('year', Load(), lineno=205, col_offset=40), Name('month', Load(), lineno=205, col_offset=46)], [], None, None, lineno=205, col_offset=20)], [], None, None, lineno=205, col_offset=15), lineno=205, col_offset=8), Return(ListComp(Subscript(Name('days', Load(), lineno=206, col_offset=17), Slice(Name('i', Load(), lineno=206, col_offset=22), BinOp(Name('i', Load(), lineno=206, col_offset=24), Add(), Num(7, lineno=206, col_offset=26), lineno=206, col_offset=24), None), Load(), lineno=206, col_offset=17), [comprehension(Name('i', Store(), lineno=206, col_offset=33), Call(Name('range', Load(), lineno=206, col_offset=38), [Num(0, lineno=206, col_offset=44), Call(Name('len', Load(), lineno=206, col_offset=47), [Name('days', Load(), lineno=206, col_offset=51)], [], None, None, lineno=206, col_offset=47), Num(7, lineno=206, col_offset=58)], [], None, None, lineno=206, col_offset=38), [])], lineno=206, col_offset=17), lineno=206, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('monthdayscalendar', arguments([Name('self', Param(), lineno=208, col_offset=26), Name('year', Param(), lineno=208, col_offset=32), Name('month', Param(), lineno=208, col_offset=38)], None, None, []), [Expr(Str("\n        Return a matrix representing a month's calendar.\n        Each row represents a week; days outside this month are zero.\n        ", lineno=212, col_offset=-1), lineno=212, col_offset=-1), Assign([Name('days', Store(), lineno=213, col_offset=8)], Call(Name('list', Load(), lineno=213, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=213, col_offset=20), 'itermonthdays', Load(), lineno=213, col_offset=20), [Name('year', Load(), lineno=213, col_offset=39), Name('month', Load(), lineno=213, col_offset=45)], [], None, None, lineno=213, col_offset=20)], [], None, None, lineno=213, col_offset=15), lineno=213, col_offset=8), Return(ListComp(Subscript(Name('days', Load(), lineno=214, col_offset=17), Slice(Name('i', Load(), lineno=214, col_offset=22), BinOp(Name('i', Load(), lineno=214, col_offset=24), Add(), Num(7, lineno=214, col_offset=26), lineno=214, col_offset=24), None), Load(), lineno=214, col_offset=17), [comprehension(Name('i', Store(), lineno=214, col_offset=33), Call(Name('range', Load(), lineno=214, col_offset=38), [Num(0, lineno=214, col_offset=44), Call(Name('len', Load(), lineno=214, col_offset=47), [Name('days', Load(), lineno=214, col_offset=51)], [], None, None, lineno=214, col_offset=47), Num(7, lineno=214, col_offset=58)], [], None, None, lineno=214, col_offset=38), [])], lineno=214, col_offset=17), lineno=214, col_offset=8)], [], lineno=208, col_offset=4), FunctionDef('yeardatescalendar', arguments([Name('self', Param(), lineno=216, col_offset=26), Name('year', Param(), lineno=216, col_offset=32), Name('width', Param(), lineno=216, col_offset=38)], None, None, [Num(3, lineno=216, col_offset=44)]), [Expr(Str('\n        Return the data for the specified year ready for formatting. The return\n        value is a list of month rows. Each month row contains upto width months.\n        Each month contains between 4 and 6 weeks and each week contains 1-7\n        days. Days are datetime.date objects.\n        ', lineno=222, col_offset=-1), lineno=222, col_offset=-1), Assign([Name('months', Store(), lineno=223, col_offset=8)], ListComp(Call(Attribute(Name('self', Load(), lineno=224, col_offset=12), 'monthdatescalendar', Load(), lineno=224, col_offset=12), [Name('year', Load(), lineno=224, col_offset=36), Name('i', Load(), lineno=224, col_offset=42)], [], None, None, lineno=224, col_offset=12), [comprehension(Name('i', Store(), lineno=225, col_offset=16), Call(Name('range', Load(), lineno=225, col_offset=21), [Name('January', Load(), lineno=225, col_offset=27), BinOp(Name('January', Load(), lineno=225, col_offset=36), Add(), Num(12, lineno=225, col_offset=44), lineno=225, col_offset=36)], [], None, None, lineno=225, col_offset=21), [])], lineno=224, col_offset=12), lineno=223, col_offset=8), Return(ListComp(Subscript(Name('months', Load(), lineno=227, col_offset=16), Slice(Name('i', Load(), lineno=227, col_offset=23), BinOp(Name('i', Load(), lineno=227, col_offset=25), Add(), Name('width', Load(), lineno=227, col_offset=27), lineno=227, col_offset=25), None), Load(), lineno=227, col_offset=16), [comprehension(Name('i', Store(), lineno=227, col_offset=38), Call(Name('range', Load(), lineno=227, col_offset=43), [Num(0, lineno=227, col_offset=49), Call(Name('len', Load(), lineno=227, col_offset=52), [Name('months', Load(), lineno=227, col_offset=56)], [], None, None, lineno=227, col_offset=52), Name('width', Load(), lineno=227, col_offset=65)], [], None, None, lineno=227, col_offset=43), [])], lineno=227, col_offset=16), lineno=227, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('yeardays2calendar', arguments([Name('self', Param(), lineno=229, col_offset=26), Name('year', Param(), lineno=229, col_offset=32), Name('width', Param(), lineno=229, col_offset=38)], None, None, [Num(3, lineno=229, col_offset=44)]), [Expr(Str('\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are\n        (day number, weekday number) tuples. Day numbers outside this month are\n        zero.\n        ', lineno=235, col_offset=-1), lineno=235, col_offset=-1), Assign([Name('months', Store(), lineno=236, col_offset=8)], ListComp(Call(Attribute(Name('self', Load(), lineno=237, col_offset=12), 'monthdays2calendar', Load(), lineno=237, col_offset=12), [Name('year', Load(), lineno=237, col_offset=36), Name('i', Load(), lineno=237, col_offset=42)], [], None, None, lineno=237, col_offset=12), [comprehension(Name('i', Store(), lineno=238, col_offset=16), Call(Name('range', Load(), lineno=238, col_offset=21), [Name('January', Load(), lineno=238, col_offset=27), BinOp(Name('January', Load(), lineno=238, col_offset=36), Add(), Num(12, lineno=238, col_offset=44), lineno=238, col_offset=36)], [], None, None, lineno=238, col_offset=21), [])], lineno=237, col_offset=12), lineno=236, col_offset=8), Return(ListComp(Subscript(Name('months', Load(), lineno=240, col_offset=16), Slice(Name('i', Load(), lineno=240, col_offset=23), BinOp(Name('i', Load(), lineno=240, col_offset=25), Add(), Name('width', Load(), lineno=240, col_offset=27), lineno=240, col_offset=25), None), Load(), lineno=240, col_offset=16), [comprehension(Name('i', Store(), lineno=240, col_offset=38), Call(Name('range', Load(), lineno=240, col_offset=43), [Num(0, lineno=240, col_offset=49), Call(Name('len', Load(), lineno=240, col_offset=52), [Name('months', Load(), lineno=240, col_offset=56)], [], None, None, lineno=240, col_offset=52), Name('width', Load(), lineno=240, col_offset=65)], [], None, None, lineno=240, col_offset=43), [])], lineno=240, col_offset=16), lineno=240, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('yeardayscalendar', arguments([Name('self', Param(), lineno=242, col_offset=25), Name('year', Param(), lineno=242, col_offset=31), Name('width', Param(), lineno=242, col_offset=37)], None, None, [Num(3, lineno=242, col_offset=43)]), [Expr(Str('\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are day numbers.\n        Day numbers outside this month are zero.\n        ', lineno=247, col_offset=-1), lineno=247, col_offset=-1), Assign([Name('months', Store(), lineno=248, col_offset=8)], ListComp(Call(Attribute(Name('self', Load(), lineno=249, col_offset=12), 'monthdayscalendar', Load(), lineno=249, col_offset=12), [Name('year', Load(), lineno=249, col_offset=35), Name('i', Load(), lineno=249, col_offset=41)], [], None, None, lineno=249, col_offset=12), [comprehension(Name('i', Store(), lineno=250, col_offset=16), Call(Name('range', Load(), lineno=250, col_offset=21), [Name('January', Load(), lineno=250, col_offset=27), BinOp(Name('January', Load(), lineno=250, col_offset=36), Add(), Num(12, lineno=250, col_offset=44), lineno=250, col_offset=36)], [], None, None, lineno=250, col_offset=21), [])], lineno=249, col_offset=12), lineno=248, col_offset=8), Return(ListComp(Subscript(Name('months', Load(), lineno=252, col_offset=16), Slice(Name('i', Load(), lineno=252, col_offset=23), BinOp(Name('i', Load(), lineno=252, col_offset=25), Add(), Name('width', Load(), lineno=252, col_offset=27), lineno=252, col_offset=25), None), Load(), lineno=252, col_offset=16), [comprehension(Name('i', Store(), lineno=252, col_offset=38), Call(Name('range', Load(), lineno=252, col_offset=43), [Num(0, lineno=252, col_offset=49), Call(Name('len', Load(), lineno=252, col_offset=52), [Name('months', Load(), lineno=252, col_offset=56)], [], None, None, lineno=252, col_offset=52), Name('width', Load(), lineno=252, col_offset=65)], [], None, None, lineno=252, col_offset=43), [])], lineno=252, col_offset=16), lineno=252, col_offset=8)], [], lineno=242, col_offset=4)], [], lineno=126, col_offset=0), ClassDef('TextCalendar', [Name('Calendar', Load(), lineno=255, col_offset=19)], [Expr(Str('\n    Subclass of Calendar that outputs a calendar as a simple plain text\n    similar to the UNIX program cal.\n    ', lineno=259, col_offset=-1), lineno=259, col_offset=-1), FunctionDef('prweek', arguments([Name('self', Param(), lineno=261, col_offset=15), Name('theweek', Param(), lineno=261, col_offset=21), Name('width', Param(), lineno=261, col_offset=30)], None, None, []), [Expr(Str('\n        Print a single week (no newline).\n        ', lineno=264, col_offset=-1), lineno=264, col_offset=-1), Print(None, [Call(Attribute(Name('self', Load(), lineno=265, col_offset=14), 'formatweek', Load(), lineno=265, col_offset=14), [Name('theweek', Load(), lineno=265, col_offset=30), Name('width', Load(), lineno=265, col_offset=39)], [], None, None, lineno=265, col_offset=14)], False, lineno=265, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('formatday', arguments([Name('self', Param(), lineno=267, col_offset=18), Name('day', Param(), lineno=267, col_offset=24), Name('weekday', Param(), lineno=267, col_offset=29), Name('width', Param(), lineno=267, col_offset=38)], None, None, []), [Expr(Str('\n        Returns a formatted day.\n        ', lineno=270, col_offset=-1), lineno=270, col_offset=-1), If(Compare(Name('day', Load(), lineno=271, col_offset=11), [Eq()], [Num(0, lineno=271, col_offset=18)], lineno=271, col_offset=11), [Assign([Name('s', Store(), lineno=272, col_offset=12)], Str('', lineno=272, col_offset=16), lineno=272, col_offset=12)], [Assign([Name('s', Store(), lineno=274, col_offset=12)], BinOp(Str('%2i', lineno=274, col_offset=16), Mod(), Name('day', Load(), lineno=274, col_offset=24), lineno=274, col_offset=16), lineno=274, col_offset=12)], lineno=271, col_offset=8), Return(Call(Attribute(Name('s', Load(), lineno=275, col_offset=15), 'center', Load(), lineno=275, col_offset=15), [Name('width', Load(), lineno=275, col_offset=24)], [], None, None, lineno=275, col_offset=15), lineno=275, col_offset=8)], [], lineno=267, col_offset=4), FunctionDef('formatweek', arguments([Name('self', Param(), lineno=277, col_offset=19), Name('theweek', Param(), lineno=277, col_offset=25), Name('width', Param(), lineno=277, col_offset=34)], None, None, []), [Expr(Str('\n        Returns a single week in a string (no newline).\n        ', lineno=280, col_offset=-1), lineno=280, col_offset=-1), Return(Call(Attribute(Str(' ', lineno=281, col_offset=15), 'join', Load(), lineno=281, col_offset=15), [GeneratorExp(Call(Attribute(Name('self', Load(), lineno=281, col_offset=24), 'formatday', Load(), lineno=281, col_offset=24), [Name('d', Load(), lineno=281, col_offset=39), Name('wd', Load(), lineno=281, col_offset=42), Name('width', Load(), lineno=281, col_offset=46)], [], None, None, lineno=281, col_offset=24), [comprehension(Tuple([Name('d', Store(), lineno=281, col_offset=58), Name('wd', Store(), lineno=281, col_offset=61)], Store(), lineno=281, col_offset=58), Name('theweek', Load(), lineno=281, col_offset=68), [])], lineno=281, col_offset=24)], [], None, None, lineno=281, col_offset=15), lineno=281, col_offset=8)], [], lineno=277, col_offset=4), FunctionDef('formatweekday', arguments([Name('self', Param(), lineno=283, col_offset=22), Name('day', Param(), lineno=283, col_offset=28), Name('width', Param(), lineno=283, col_offset=33)], None, None, []), [Expr(Str('\n        Returns a formatted week day name.\n        ', lineno=286, col_offset=-1), lineno=286, col_offset=-1), If(Compare(Name('width', Load(), lineno=287, col_offset=11), [GtE()], [Num(9, lineno=287, col_offset=20)], lineno=287, col_offset=11), [Assign([Name('names', Store(), lineno=288, col_offset=12)], Name('day_name', Load(), lineno=288, col_offset=20), lineno=288, col_offset=12)], [Assign([Name('names', Store(), lineno=290, col_offset=12)], Name('day_abbr', Load(), lineno=290, col_offset=20), lineno=290, col_offset=12)], lineno=287, col_offset=8), Return(Call(Attribute(Subscript(Subscript(Name('names', Load(), lineno=291, col_offset=15), Index(Name('day', Load(), lineno=291, col_offset=21)), Load(), lineno=291, col_offset=15), Slice(None, Name('width', Load(), lineno=291, col_offset=27), None), Load(), lineno=291, col_offset=15), 'center', Load(), lineno=291, col_offset=15), [Name('width', Load(), lineno=291, col_offset=41)], [], None, None, lineno=291, col_offset=15), lineno=291, col_offset=8)], [], lineno=283, col_offset=4), FunctionDef('formatweekheader', arguments([Name('self', Param(), lineno=293, col_offset=25), Name('width', Param(), lineno=293, col_offset=31)], None, None, []), [Expr(Str('\n        Return a header for a week.\n        ', lineno=296, col_offset=-1), lineno=296, col_offset=-1), Return(Call(Attribute(Str(' ', lineno=297, col_offset=15), 'join', Load(), lineno=297, col_offset=15), [GeneratorExp(Call(Attribute(Name('self', Load(), lineno=297, col_offset=24), 'formatweekday', Load(), lineno=297, col_offset=24), [Name('i', Load(), lineno=297, col_offset=43), Name('width', Load(), lineno=297, col_offset=46)], [], None, None, lineno=297, col_offset=24), [comprehension(Name('i', Store(), lineno=297, col_offset=57), Call(Attribute(Name('self', Load(), lineno=297, col_offset=62), 'iterweekdays', Load(), lineno=297, col_offset=62), [], [], None, None, lineno=297, col_offset=62), [])], lineno=297, col_offset=24)], [], None, None, lineno=297, col_offset=15), lineno=297, col_offset=8)], [], lineno=293, col_offset=4), FunctionDef('formatmonthname', arguments([Name('self', Param(), lineno=299, col_offset=24), Name('theyear', Param(), lineno=299, col_offset=30), Name('themonth', Param(), lineno=299, col_offset=39), Name('width', Param(), lineno=299, col_offset=49), Name('withyear', Param(), lineno=299, col_offset=56)], None, None, [Name('True', Load(), lineno=299, col_offset=65)]), [Expr(Str('\n        Return a formatted month name.\n        ', lineno=302, col_offset=-1), lineno=302, col_offset=-1), Assign([Name('s', Store(), lineno=303, col_offset=8)], Subscript(Name('month_name', Load(), lineno=303, col_offset=12), Index(Name('themonth', Load(), lineno=303, col_offset=23)), Load(), lineno=303, col_offset=12), lineno=303, col_offset=8), If(Name('withyear', Load(), lineno=304, col_offset=11), [Assign([Name('s', Store(), lineno=305, col_offset=12)], BinOp(Str('%s %r', lineno=305, col_offset=16), Mod(), Tuple([Name('s', Load(), lineno=305, col_offset=27), Name('theyear', Load(), lineno=305, col_offset=30)], Load(), lineno=305, col_offset=27), lineno=305, col_offset=16), lineno=305, col_offset=12)], [], lineno=304, col_offset=8), Return(Call(Attribute(Name('s', Load(), lineno=306, col_offset=15), 'center', Load(), lineno=306, col_offset=15), [Name('width', Load(), lineno=306, col_offset=24)], [], None, None, lineno=306, col_offset=15), lineno=306, col_offset=8)], [], lineno=299, col_offset=4), FunctionDef('prmonth', arguments([Name('self', Param(), lineno=308, col_offset=16), Name('theyear', Param(), lineno=308, col_offset=22), Name('themonth', Param(), lineno=308, col_offset=31), Name('w', Param(), lineno=308, col_offset=41), Name('l', Param(), lineno=308, col_offset=46)], None, None, [Num(0, lineno=308, col_offset=43), Num(0, lineno=308, col_offset=48)]), [Expr(Str("\n        Print a month's calendar.\n        ", lineno=311, col_offset=-1), lineno=311, col_offset=-1), Print(None, [Call(Attribute(Name('self', Load(), lineno=312, col_offset=14), 'formatmonth', Load(), lineno=312, col_offset=14), [Name('theyear', Load(), lineno=312, col_offset=31), Name('themonth', Load(), lineno=312, col_offset=40), Name('w', Load(), lineno=312, col_offset=50), Name('l', Load(), lineno=312, col_offset=53)], [], None, None, lineno=312, col_offset=14)], False, lineno=312, col_offset=8)], [], lineno=308, col_offset=4), FunctionDef('formatmonth', arguments([Name('self', Param(), lineno=314, col_offset=20), Name('theyear', Param(), lineno=314, col_offset=26), Name('themonth', Param(), lineno=314, col_offset=35), Name('w', Param(), lineno=314, col_offset=45), Name('l', Param(), lineno=314, col_offset=50)], None, None, [Num(0, lineno=314, col_offset=47), Num(0, lineno=314, col_offset=52)]), [Expr(Str("\n        Return a month's calendar string (multi-line).\n        ", lineno=317, col_offset=-1), lineno=317, col_offset=-1), Assign([Name('w', Store(), lineno=318, col_offset=8)], Call(Name('max', Load(), lineno=318, col_offset=12), [Num(2, lineno=318, col_offset=16), Name('w', Load(), lineno=318, col_offset=19)], [], None, None, lineno=318, col_offset=12), lineno=318, col_offset=8), Assign([Name('l', Store(), lineno=319, col_offset=8)], Call(Name('max', Load(), lineno=319, col_offset=12), [Num(1, lineno=319, col_offset=16), Name('l', Load(), lineno=319, col_offset=19)], [], None, None, lineno=319, col_offset=12), lineno=319, col_offset=8), Assign([Name('s', Store(), lineno=320, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=320, col_offset=12), 'formatmonthname', Load(), lineno=320, col_offset=12), [Name('theyear', Load(), lineno=320, col_offset=33), Name('themonth', Load(), lineno=320, col_offset=42), BinOp(BinOp(Num(7, lineno=320, col_offset=52), Mult(), BinOp(Name('w', Load(), lineno=320, col_offset=57), Add(), Num(1, lineno=320, col_offset=61), lineno=320, col_offset=57), lineno=320, col_offset=52), Sub(), Num(1, lineno=320, col_offset=66), lineno=320, col_offset=52)], [], None, None, lineno=320, col_offset=12), lineno=320, col_offset=8), Assign([Name('s', Store(), lineno=321, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=321, col_offset=12), 'rstrip', Load(), lineno=321, col_offset=12), [], [], None, None, lineno=321, col_offset=12), lineno=321, col_offset=8), AugAssign(Name('s', Store(), lineno=322, col_offset=8), Add(), BinOp(Str('\n', lineno=322, col_offset=13), Mult(), Name('l', Load(), lineno=322, col_offset=20), lineno=322, col_offset=13), lineno=322, col_offset=8), AugAssign(Name('s', Store(), lineno=323, col_offset=8), Add(), Call(Attribute(Call(Attribute(Name('self', Load(), lineno=323, col_offset=13), 'formatweekheader', Load(), lineno=323, col_offset=13), [Name('w', Load(), lineno=323, col_offset=35)], [], None, None, lineno=323, col_offset=13), 'rstrip', Load(), lineno=323, col_offset=13), [], [], None, None, lineno=323, col_offset=13), lineno=323, col_offset=8), AugAssign(Name('s', Store(), lineno=324, col_offset=8), Add(), BinOp(Str('\n', lineno=324, col_offset=13), Mult(), Name('l', Load(), lineno=324, col_offset=20), lineno=324, col_offset=13), lineno=324, col_offset=8), For(Name('week', Store(), lineno=325, col_offset=12), Call(Attribute(Name('self', Load(), lineno=325, col_offset=20), 'monthdays2calendar', Load(), lineno=325, col_offset=20), [Name('theyear', Load(), lineno=325, col_offset=44), Name('themonth', Load(), lineno=325, col_offset=53)], [], None, None, lineno=325, col_offset=20), [AugAssign(Name('s', Store(), lineno=326, col_offset=12), Add(), Call(Attribute(Call(Attribute(Name('self', Load(), lineno=326, col_offset=17), 'formatweek', Load(), lineno=326, col_offset=17), [Name('week', Load(), lineno=326, col_offset=33), Name('w', Load(), lineno=326, col_offset=39)], [], None, None, lineno=326, col_offset=17), 'rstrip', Load(), lineno=326, col_offset=17), [], [], None, None, lineno=326, col_offset=17), lineno=326, col_offset=12), AugAssign(Name('s', Store(), lineno=327, col_offset=12), Add(), BinOp(Str('\n', lineno=327, col_offset=17), Mult(), Name('l', Load(), lineno=327, col_offset=24), lineno=327, col_offset=17), lineno=327, col_offset=12)], [], lineno=325, col_offset=8), Return(Name('s', Load(), lineno=328, col_offset=15), lineno=328, col_offset=8)], [], lineno=314, col_offset=4), FunctionDef('formatyear', arguments([Name('self', Param(), lineno=330, col_offset=19), Name('theyear', Param(), lineno=330, col_offset=25), Name('w', Param(), lineno=330, col_offset=34), Name('l', Param(), lineno=330, col_offset=39), Name('c', Param(), lineno=330, col_offset=44), Name('m', Param(), lineno=330, col_offset=49)], None, None, [Num(2, lineno=330, col_offset=36), Num(1, lineno=330, col_offset=41), Num(6, lineno=330, col_offset=46), Num(3, lineno=330, col_offset=51)]), [Expr(Str("\n        Returns a year's calendar as a multi-line string.\n        ", lineno=333, col_offset=-1), lineno=333, col_offset=-1), Assign([Name('w', Store(), lineno=334, col_offset=8)], Call(Name('max', Load(), lineno=334, col_offset=12), [Num(2, lineno=334, col_offset=16), Name('w', Load(), lineno=334, col_offset=19)], [], None, None, lineno=334, col_offset=12), lineno=334, col_offset=8), Assign([Name('l', Store(), lineno=335, col_offset=8)], Call(Name('max', Load(), lineno=335, col_offset=12), [Num(1, lineno=335, col_offset=16), Name('l', Load(), lineno=335, col_offset=19)], [], None, None, lineno=335, col_offset=12), lineno=335, col_offset=8), Assign([Name('c', Store(), lineno=336, col_offset=8)], Call(Name('max', Load(), lineno=336, col_offset=12), [Num(2, lineno=336, col_offset=16), Name('c', Load(), lineno=336, col_offset=19)], [], None, None, lineno=336, col_offset=12), lineno=336, col_offset=8), Assign([Name('colwidth', Store(), lineno=337, col_offset=8)], BinOp(BinOp(BinOp(Name('w', Load(), lineno=337, col_offset=20), Add(), Num(1, lineno=337, col_offset=24), lineno=337, col_offset=20), Mult(), Num(7, lineno=337, col_offset=29), lineno=337, col_offset=19), Sub(), Num(1, lineno=337, col_offset=33), lineno=337, col_offset=19), lineno=337, col_offset=8), Assign([Name('v', Store(), lineno=338, col_offset=8)], List([], Load(), lineno=338, col_offset=12), lineno=338, col_offset=8), Assign([Name('a', Store(), lineno=339, col_offset=8)], Attribute(Name('v', Load(), lineno=339, col_offset=12), 'append', Load(), lineno=339, col_offset=12), lineno=339, col_offset=8), Expr(Call(Name('a', Load(), lineno=340, col_offset=8), [Call(Attribute(Call(Attribute(Call(Name('repr', Load(), lineno=340, col_offset=10), [Name('theyear', Load(), lineno=340, col_offset=15)], [], None, None, lineno=340, col_offset=10), 'center', Load(), lineno=340, col_offset=10), [BinOp(BinOp(Name('colwidth', Load(), lineno=340, col_offset=31), Mult(), Name('m', Load(), lineno=340, col_offset=40), lineno=340, col_offset=31), Add(), BinOp(Name('c', Load(), lineno=340, col_offset=42), Mult(), BinOp(Name('m', Load(), lineno=340, col_offset=45), Sub(), Num(1, lineno=340, col_offset=47), lineno=340, col_offset=45), lineno=340, col_offset=42), lineno=340, col_offset=31)], [], None, None, lineno=340, col_offset=10), 'rstrip', Load(), lineno=340, col_offset=10), [], [], None, None, lineno=340, col_offset=10)], [], None, None, lineno=340, col_offset=8), lineno=340, col_offset=8), Expr(Call(Name('a', Load(), lineno=341, col_offset=8), [BinOp(Str('\n', lineno=341, col_offset=10), Mult(), Name('l', Load(), lineno=341, col_offset=15), lineno=341, col_offset=10)], [], None, None, lineno=341, col_offset=8), lineno=341, col_offset=8), Assign([Name('header', Store(), lineno=342, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=342, col_offset=17), 'formatweekheader', Load(), lineno=342, col_offset=17), [Name('w', Load(), lineno=342, col_offset=39)], [], None, None, lineno=342, col_offset=17), lineno=342, col_offset=8), For(Tuple([Name('i', Store(), lineno=343, col_offset=13), Name('row', Store(), lineno=343, col_offset=16)], Store(), lineno=343, col_offset=13), Call(Name('enumerate', Load(), lineno=343, col_offset=24), [Call(Attribute(Name('self', Load(), lineno=343, col_offset=34), 'yeardays2calendar', Load(), lineno=343, col_offset=34), [Name('theyear', Load(), lineno=343, col_offset=57), Name('m', Load(), lineno=343, col_offset=66)], [], None, None, lineno=343, col_offset=34)], [], None, None, lineno=343, col_offset=24), [Assign([Name('months', Store(), lineno=345, col_offset=12)], Call(Name('range', Load(), lineno=345, col_offset=21), [BinOp(BinOp(Name('m', Load(), lineno=345, col_offset=27), Mult(), Name('i', Load(), lineno=345, col_offset=29), lineno=345, col_offset=27), Add(), Num(1, lineno=345, col_offset=31), lineno=345, col_offset=27), Call(Name('min', Load(), lineno=345, col_offset=34), [BinOp(BinOp(Name('m', Load(), lineno=345, col_offset=38), Mult(), BinOp(Name('i', Load(), lineno=345, col_offset=41), Add(), Num(1, lineno=345, col_offset=43), lineno=345, col_offset=41), lineno=345, col_offset=38), Add(), Num(1, lineno=345, col_offset=46), lineno=345, col_offset=38), Num(13, lineno=345, col_offset=49)], [], None, None, lineno=345, col_offset=34)], [], None, None, lineno=345, col_offset=21), lineno=345, col_offset=12), Expr(Call(Name('a', Load(), lineno=346, col_offset=12), [BinOp(Str('\n', lineno=346, col_offset=14), Mult(), Name('l', Load(), lineno=346, col_offset=19), lineno=346, col_offset=14)], [], None, None, lineno=346, col_offset=12), lineno=346, col_offset=12), Assign([Name('names', Store(), lineno=347, col_offset=12)], GeneratorExp(Call(Attribute(Name('self', Load(), lineno=347, col_offset=21), 'formatmonthname', Load(), lineno=347, col_offset=21), [Name('theyear', Load(), lineno=347, col_offset=42), Name('k', Load(), lineno=347, col_offset=51), Name('colwidth', Load(), lineno=347, col_offset=54), Name('False', Load(), lineno=347, col_offset=64)], [], None, None, lineno=347, col_offset=21), [comprehension(Name('k', Store(), lineno=348, col_offset=25), Name('months', Load(), lineno=348, col_offset=30), [])], lineno=347, col_offset=21), lineno=347, col_offset=12), Expr(Call(Name('a', Load(), lineno=349, col_offset=12), [Call(Attribute(Call(Name('formatstring', Load(), lineno=349, col_offset=14), [Name('names', Load(), lineno=349, col_offset=27), Name('colwidth', Load(), lineno=349, col_offset=34), Name('c', Load(), lineno=349, col_offset=44)], [], None, None, lineno=349, col_offset=14), 'rstrip', Load(), lineno=349, col_offset=14), [], [], None, None, lineno=349, col_offset=14)], [], None, None, lineno=349, col_offset=12), lineno=349, col_offset=12), Expr(Call(Name('a', Load(), lineno=350, col_offset=12), [BinOp(Str('\n', lineno=350, col_offset=14), Mult(), Name('l', Load(), lineno=350, col_offset=19), lineno=350, col_offset=14)], [], None, None, lineno=350, col_offset=12), lineno=350, col_offset=12), Assign([Name('headers', Store(), lineno=351, col_offset=12)], GeneratorExp(Name('header', Load(), lineno=351, col_offset=23), [comprehension(Name('k', Store(), lineno=351, col_offset=34), Name('months', Load(), lineno=351, col_offset=39), [])], lineno=351, col_offset=23), lineno=351, col_offset=12), Expr(Call(Name('a', Load(), lineno=352, col_offset=12), [Call(Attribute(Call(Name('formatstring', Load(), lineno=352, col_offset=14), [Name('headers', Load(), lineno=352, col_offset=27), Name('colwidth', Load(), lineno=352, col_offset=36), Name('c', Load(), lineno=352, col_offset=46)], [], None, None, lineno=352, col_offset=14), 'rstrip', Load(), lineno=352, col_offset=14), [], [], None, None, lineno=352, col_offset=14)], [], None, None, lineno=352, col_offset=12), lineno=352, col_offset=12), Expr(Call(Name('a', Load(), lineno=353, col_offset=12), [BinOp(Str('\n', lineno=353, col_offset=14), Mult(), Name('l', Load(), lineno=353, col_offset=19), lineno=353, col_offset=14)], [], None, None, lineno=353, col_offset=12), lineno=353, col_offset=12), Assign([Name('height', Store(), lineno=355, col_offset=12)], Call(Name('max', Load(), lineno=355, col_offset=21), [GeneratorExp(Call(Name('len', Load(), lineno=355, col_offset=25), [Name('cal', Load(), lineno=355, col_offset=29)], [], None, None, lineno=355, col_offset=25), [comprehension(Name('cal', Store(), lineno=355, col_offset=38), Name('row', Load(), lineno=355, col_offset=45), [])], lineno=355, col_offset=25)], [], None, None, lineno=355, col_offset=21), lineno=355, col_offset=12), For(Name('j', Store(), lineno=356, col_offset=16), Call(Name('range', Load(), lineno=356, col_offset=21), [Name('height', Load(), lineno=356, col_offset=27)], [], None, None, lineno=356, col_offset=21), [Assign([Name('weeks', Store(), lineno=357, col_offset=16)], List([], Load(), lineno=357, col_offset=24), lineno=357, col_offset=16), For(Name('cal', Store(), lineno=358, col_offset=20), Name('row', Load(), lineno=358, col_offset=27), [If(Compare(Name('j', Load(), lineno=359, col_offset=23), [GtE()], [Call(Name('len', Load(), lineno=359, col_offset=28), [Name('cal', Load(), lineno=359, col_offset=32)], [], None, None, lineno=359, col_offset=28)], lineno=359, col_offset=23), [Expr(Call(Attribute(Name('weeks', Load(), lineno=360, col_offset=24), 'append', Load(), lineno=360, col_offset=24), [Str('', lineno=360, col_offset=37)], [], None, None, lineno=360, col_offset=24), lineno=360, col_offset=24)], [Expr(Call(Attribute(Name('weeks', Load(), lineno=362, col_offset=24), 'append', Load(), lineno=362, col_offset=24), [Call(Attribute(Name('self', Load(), lineno=362, col_offset=37), 'formatweek', Load(), lineno=362, col_offset=37), [Subscript(Name('cal', Load(), lineno=362, col_offset=53), Index(Name('j', Load(), lineno=362, col_offset=57)), Load(), lineno=362, col_offset=53), Name('w', Load(), lineno=362, col_offset=61)], [], None, None, lineno=362, col_offset=37)], [], None, None, lineno=362, col_offset=24), lineno=362, col_offset=24)], lineno=359, col_offset=20)], [], lineno=358, col_offset=16), Expr(Call(Name('a', Load(), lineno=363, col_offset=16), [Call(Attribute(Call(Name('formatstring', Load(), lineno=363, col_offset=18), [Name('weeks', Load(), lineno=363, col_offset=31), Name('colwidth', Load(), lineno=363, col_offset=38), Name('c', Load(), lineno=363, col_offset=48)], [], None, None, lineno=363, col_offset=18), 'rstrip', Load(), lineno=363, col_offset=18), [], [], None, None, lineno=363, col_offset=18)], [], None, None, lineno=363, col_offset=16), lineno=363, col_offset=16), Expr(Call(Name('a', Load(), lineno=364, col_offset=16), [BinOp(Str('\n', lineno=364, col_offset=18), Mult(), Name('l', Load(), lineno=364, col_offset=25), lineno=364, col_offset=18)], [], None, None, lineno=364, col_offset=16), lineno=364, col_offset=16)], [], lineno=356, col_offset=12)], [], lineno=343, col_offset=8), Return(Call(Attribute(Str('', lineno=365, col_offset=15), 'join', Load(), lineno=365, col_offset=15), [Name('v', Load(), lineno=365, col_offset=23)], [], None, None, lineno=365, col_offset=15), lineno=365, col_offset=8)], [], lineno=330, col_offset=4), FunctionDef('pryear', arguments([Name('self', Param(), lineno=367, col_offset=15), Name('theyear', Param(), lineno=367, col_offset=21), Name('w', Param(), lineno=367, col_offset=30), Name('l', Param(), lineno=367, col_offset=35), Name('c', Param(), lineno=367, col_offset=40), Name('m', Param(), lineno=367, col_offset=45)], None, None, [Num(0, lineno=367, col_offset=32), Num(0, lineno=367, col_offset=37), Num(6, lineno=367, col_offset=42), Num(3, lineno=367, col_offset=47)]), [Expr(Str("Print a year's calendar.", lineno=368, col_offset=8), lineno=368, col_offset=8), Print(None, [Call(Attribute(Name('self', Load(), lineno=369, col_offset=14), 'formatyear', Load(), lineno=369, col_offset=14), [Name('theyear', Load(), lineno=369, col_offset=30), Name('w', Load(), lineno=369, col_offset=39), Name('l', Load(), lineno=369, col_offset=42), Name('c', Load(), lineno=369, col_offset=45), Name('m', Load(), lineno=369, col_offset=48)], [], None, None, lineno=369, col_offset=14)], True, lineno=369, col_offset=8)], [], lineno=367, col_offset=4)], [], lineno=255, col_offset=0), ClassDef('HTMLCalendar', [Name('Calendar', Load(), lineno=372, col_offset=19)], [Expr(Str('\n    This calendar returns complete HTML pages.\n    ', lineno=375, col_offset=-1), lineno=375, col_offset=-1), Assign([Name('cssclasses', Store(), lineno=378, col_offset=4)], List([Str('mon', lineno=378, col_offset=18), Str('tue', lineno=378, col_offset=25), Str('wed', lineno=378, col_offset=32), Str('thu', lineno=378, col_offset=39), Str('fri', lineno=378, col_offset=46), Str('sat', lineno=378, col_offset=53), Str('sun', lineno=378, col_offset=60)], Load(), lineno=378, col_offset=17), lineno=378, col_offset=4), FunctionDef('formatday', arguments([Name('self', Param(), lineno=380, col_offset=18), Name('day', Param(), lineno=380, col_offset=24), Name('weekday', Param(), lineno=380, col_offset=29)], None, None, []), [Expr(Str('\n        Return a day as a table cell.\n        ', lineno=383, col_offset=-1), lineno=383, col_offset=-1), If(Compare(Name('day', Load(), lineno=384, col_offset=11), [Eq()], [Num(0, lineno=384, col_offset=18)], lineno=384, col_offset=11), [Return(Str('<td class="noday">&nbsp;</td>', lineno=385, col_offset=19), lineno=385, col_offset=12)], [Return(BinOp(Str('<td class="%s">%d</td>', lineno=387, col_offset=19), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=387, col_offset=47), 'cssclasses', Load(), lineno=387, col_offset=47), Index(Name('weekday', Load(), lineno=387, col_offset=63)), Load(), lineno=387, col_offset=47), Name('day', Load(), lineno=387, col_offset=73)], Load(), lineno=387, col_offset=47), lineno=387, col_offset=19), lineno=387, col_offset=12)], lineno=384, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('formatweek', arguments([Name('self', Param(), lineno=389, col_offset=19), Name('theweek', Param(), lineno=389, col_offset=25)], None, None, []), [Expr(Str('\n        Return a complete week as a table row.\n        ', lineno=392, col_offset=-1), lineno=392, col_offset=-1), Assign([Name('s', Store(), lineno=393, col_offset=8)], Call(Attribute(Str('', lineno=393, col_offset=12), 'join', Load(), lineno=393, col_offset=12), [GeneratorExp(Call(Attribute(Name('self', Load(), lineno=393, col_offset=20), 'formatday', Load(), lineno=393, col_offset=20), [Name('d', Load(), lineno=393, col_offset=35), Name('wd', Load(), lineno=393, col_offset=38)], [], None, None, lineno=393, col_offset=20), [comprehension(Tuple([Name('d', Store(), lineno=393, col_offset=47), Name('wd', Store(), lineno=393, col_offset=50)], Store(), lineno=393, col_offset=47), Name('theweek', Load(), lineno=393, col_offset=57), [])], lineno=393, col_offset=20)], [], None, None, lineno=393, col_offset=12), lineno=393, col_offset=8), Return(BinOp(Str('<tr>%s</tr>', lineno=394, col_offset=15), Mod(), Name('s', Load(), lineno=394, col_offset=31), lineno=394, col_offset=15), lineno=394, col_offset=8)], [], lineno=389, col_offset=4), FunctionDef('formatweekday', arguments([Name('self', Param(), lineno=396, col_offset=22), Name('day', Param(), lineno=396, col_offset=28)], None, None, []), [Expr(Str('\n        Return a weekday name as a table header.\n        ', lineno=399, col_offset=-1), lineno=399, col_offset=-1), Return(BinOp(Str('<th class="%s">%s</th>', lineno=400, col_offset=15), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=400, col_offset=43), 'cssclasses', Load(), lineno=400, col_offset=43), Index(Name('day', Load(), lineno=400, col_offset=59)), Load(), lineno=400, col_offset=43), Subscript(Name('day_abbr', Load(), lineno=400, col_offset=65), Index(Name('day', Load(), lineno=400, col_offset=74)), Load(), lineno=400, col_offset=65)], Load(), lineno=400, col_offset=43), lineno=400, col_offset=15), lineno=400, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('formatweekheader', arguments([Name('self', Param(), lineno=402, col_offset=25)], None, None, []), [Expr(Str('\n        Return a header for a week as a table row.\n        ', lineno=405, col_offset=-1), lineno=405, col_offset=-1), Assign([Name('s', Store(), lineno=406, col_offset=8)], Call(Attribute(Str('', lineno=406, col_offset=12), 'join', Load(), lineno=406, col_offset=12), [GeneratorExp(Call(Attribute(Name('self', Load(), lineno=406, col_offset=20), 'formatweekday', Load(), lineno=406, col_offset=20), [Name('i', Load(), lineno=406, col_offset=39)], [], None, None, lineno=406, col_offset=20), [comprehension(Name('i', Store(), lineno=406, col_offset=46), Call(Attribute(Name('self', Load(), lineno=406, col_offset=51), 'iterweekdays', Load(), lineno=406, col_offset=51), [], [], None, None, lineno=406, col_offset=51), [])], lineno=406, col_offset=20)], [], None, None, lineno=406, col_offset=12), lineno=406, col_offset=8), Return(BinOp(Str('<tr>%s</tr>', lineno=407, col_offset=15), Mod(), Name('s', Load(), lineno=407, col_offset=31), lineno=407, col_offset=15), lineno=407, col_offset=8)], [], lineno=402, col_offset=4), FunctionDef('formatmonthname', arguments([Name('self', Param(), lineno=409, col_offset=24), Name('theyear', Param(), lineno=409, col_offset=30), Name('themonth', Param(), lineno=409, col_offset=39), Name('withyear', Param(), lineno=409, col_offset=49)], None, None, [Name('True', Load(), lineno=409, col_offset=58)]), [Expr(Str('\n        Return a month name as a table row.\n        ', lineno=412, col_offset=-1), lineno=412, col_offset=-1), If(Name('withyear', Load(), lineno=413, col_offset=11), [Assign([Name('s', Store(), lineno=414, col_offset=12)], BinOp(Str('%s %s', lineno=414, col_offset=16), Mod(), Tuple([Subscript(Name('month_name', Load(), lineno=414, col_offset=27), Index(Name('themonth', Load(), lineno=414, col_offset=38)), Load(), lineno=414, col_offset=27), Name('theyear', Load(), lineno=414, col_offset=49)], Load(), lineno=414, col_offset=27), lineno=414, col_offset=16), lineno=414, col_offset=12)], [Assign([Name('s', Store(), lineno=416, col_offset=12)], BinOp(Str('%s', lineno=416, col_offset=16), Mod(), Subscript(Name('month_name', Load(), lineno=416, col_offset=23), Index(Name('themonth', Load(), lineno=416, col_offset=34)), Load(), lineno=416, col_offset=23), lineno=416, col_offset=16), lineno=416, col_offset=12)], lineno=413, col_offset=8), Return(BinOp(Str('<tr><th colspan="7" class="month">%s</th></tr>', lineno=417, col_offset=15), Mod(), Name('s', Load(), lineno=417, col_offset=66), lineno=417, col_offset=15), lineno=417, col_offset=8)], [], lineno=409, col_offset=4), FunctionDef('formatmonth', arguments([Name('self', Param(), lineno=419, col_offset=20), Name('theyear', Param(), lineno=419, col_offset=26), Name('themonth', Param(), lineno=419, col_offset=35), Name('withyear', Param(), lineno=419, col_offset=45)], None, None, [Name('True', Load(), lineno=419, col_offset=54)]), [Expr(Str('\n        Return a formatted month as a table.\n        ', lineno=422, col_offset=-1), lineno=422, col_offset=-1), Assign([Name('v', Store(), lineno=423, col_offset=8)], List([], Load(), lineno=423, col_offset=12), lineno=423, col_offset=8), Assign([Name('a', Store(), lineno=424, col_offset=8)], Attribute(Name('v', Load(), lineno=424, col_offset=12), 'append', Load(), lineno=424, col_offset=12), lineno=424, col_offset=8), Expr(Call(Name('a', Load(), lineno=425, col_offset=8), [Str('<table border="0" cellpadding="0" cellspacing="0" class="month">', lineno=425, col_offset=10)], [], None, None, lineno=425, col_offset=8), lineno=425, col_offset=8), Expr(Call(Name('a', Load(), lineno=426, col_offset=8), [Str('\n', lineno=426, col_offset=10)], [], None, None, lineno=426, col_offset=8), lineno=426, col_offset=8), Expr(Call(Name('a', Load(), lineno=427, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=427, col_offset=10), 'formatmonthname', Load(), lineno=427, col_offset=10), [Name('theyear', Load(), lineno=427, col_offset=31), Name('themonth', Load(), lineno=427, col_offset=40)], [keyword('withyear', Name('withyear', Load(), lineno=427, col_offset=59))], None, None, lineno=427, col_offset=10)], [], None, None, lineno=427, col_offset=8), lineno=427, col_offset=8), Expr(Call(Name('a', Load(), lineno=428, col_offset=8), [Str('\n', lineno=428, col_offset=10)], [], None, None, lineno=428, col_offset=8), lineno=428, col_offset=8), Expr(Call(Name('a', Load(), lineno=429, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=429, col_offset=10), 'formatweekheader', Load(), lineno=429, col_offset=10), [], [], None, None, lineno=429, col_offset=10)], [], None, None, lineno=429, col_offset=8), lineno=429, col_offset=8), Expr(Call(Name('a', Load(), lineno=430, col_offset=8), [Str('\n', lineno=430, col_offset=10)], [], None, None, lineno=430, col_offset=8), lineno=430, col_offset=8), For(Name('week', Store(), lineno=431, col_offset=12), Call(Attribute(Name('self', Load(), lineno=431, col_offset=20), 'monthdays2calendar', Load(), lineno=431, col_offset=20), [Name('theyear', Load(), lineno=431, col_offset=44), Name('themonth', Load(), lineno=431, col_offset=53)], [], None, None, lineno=431, col_offset=20), [Expr(Call(Name('a', Load(), lineno=432, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=432, col_offset=14), 'formatweek', Load(), lineno=432, col_offset=14), [Name('week', Load(), lineno=432, col_offset=30)], [], None, None, lineno=432, col_offset=14)], [], None, None, lineno=432, col_offset=12), lineno=432, col_offset=12), Expr(Call(Name('a', Load(), lineno=433, col_offset=12), [Str('\n', lineno=433, col_offset=14)], [], None, None, lineno=433, col_offset=12), lineno=433, col_offset=12)], [], lineno=431, col_offset=8), Expr(Call(Name('a', Load(), lineno=434, col_offset=8), [Str('</table>', lineno=434, col_offset=10)], [], None, None, lineno=434, col_offset=8), lineno=434, col_offset=8), Expr(Call(Name('a', Load(), lineno=435, col_offset=8), [Str('\n', lineno=435, col_offset=10)], [], None, None, lineno=435, col_offset=8), lineno=435, col_offset=8), Return(Call(Attribute(Str('', lineno=436, col_offset=15), 'join', Load(), lineno=436, col_offset=15), [Name('v', Load(), lineno=436, col_offset=23)], [], None, None, lineno=436, col_offset=15), lineno=436, col_offset=8)], [], lineno=419, col_offset=4), FunctionDef('formatyear', arguments([Name('self', Param(), lineno=438, col_offset=19), Name('theyear', Param(), lineno=438, col_offset=25), Name('width', Param(), lineno=438, col_offset=34)], None, None, [Num(3, lineno=438, col_offset=40)]), [Expr(Str('\n        Return a formatted year as a table of tables.\n        ', lineno=441, col_offset=-1), lineno=441, col_offset=-1), Assign([Name('v', Store(), lineno=442, col_offset=8)], List([], Load(), lineno=442, col_offset=12), lineno=442, col_offset=8), Assign([Name('a', Store(), lineno=443, col_offset=8)], Attribute(Name('v', Load(), lineno=443, col_offset=12), 'append', Load(), lineno=443, col_offset=12), lineno=443, col_offset=8), Assign([Name('width', Store(), lineno=444, col_offset=8)], Call(Name('max', Load(), lineno=444, col_offset=16), [Name('width', Load(), lineno=444, col_offset=20), Num(1, lineno=444, col_offset=27)], [], None, None, lineno=444, col_offset=16), lineno=444, col_offset=8), Expr(Call(Name('a', Load(), lineno=445, col_offset=8), [Str('<table border="0" cellpadding="0" cellspacing="0" class="year">', lineno=445, col_offset=10)], [], None, None, lineno=445, col_offset=8), lineno=445, col_offset=8), Expr(Call(Name('a', Load(), lineno=446, col_offset=8), [Str('\n', lineno=446, col_offset=10)], [], None, None, lineno=446, col_offset=8), lineno=446, col_offset=8), Expr(Call(Name('a', Load(), lineno=447, col_offset=8), [BinOp(Str('<tr><th colspan="%d" class="year">%s</th></tr>', lineno=447, col_offset=10), Mod(), Tuple([Name('width', Load(), lineno=447, col_offset=62), Name('theyear', Load(), lineno=447, col_offset=69)], Load(), lineno=447, col_offset=62), lineno=447, col_offset=10)], [], None, None, lineno=447, col_offset=8), lineno=447, col_offset=8), For(Name('i', Store(), lineno=448, col_offset=12), Call(Name('range', Load(), lineno=448, col_offset=17), [Name('January', Load(), lineno=448, col_offset=23), BinOp(Name('January', Load(), lineno=448, col_offset=32), Add(), Num(12, lineno=448, col_offset=40), lineno=448, col_offset=32), Name('width', Load(), lineno=448, col_offset=44)], [], None, None, lineno=448, col_offset=17), [Assign([Name('months', Store(), lineno=450, col_offset=12)], Call(Name('range', Load(), lineno=450, col_offset=21), [Name('i', Load(), lineno=450, col_offset=27), Call(Name('min', Load(), lineno=450, col_offset=30), [BinOp(Name('i', Load(), lineno=450, col_offset=34), Add(), Name('width', Load(), lineno=450, col_offset=36), lineno=450, col_offset=34), Num(13, lineno=450, col_offset=43)], [], None, None, lineno=450, col_offset=30)], [], None, None, lineno=450, col_offset=21), lineno=450, col_offset=12), Expr(Call(Name('a', Load(), lineno=451, col_offset=12), [Str('<tr>', lineno=451, col_offset=14)], [], None, None, lineno=451, col_offset=12), lineno=451, col_offset=12), For(Name('m', Store(), lineno=452, col_offset=16), Name('months', Load(), lineno=452, col_offset=21), [Expr(Call(Name('a', Load(), lineno=453, col_offset=16), [Str('<td>', lineno=453, col_offset=18)], [], None, None, lineno=453, col_offset=16), lineno=453, col_offset=16), Expr(Call(Name('a', Load(), lineno=454, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=454, col_offset=18), 'formatmonth', Load(), lineno=454, col_offset=18), [Name('theyear', Load(), lineno=454, col_offset=35), Name('m', Load(), lineno=454, col_offset=44)], [keyword('withyear', Name('False', Load(), lineno=454, col_offset=56))], None, None, lineno=454, col_offset=18)], [], None, None, lineno=454, col_offset=16), lineno=454, col_offset=16), Expr(Call(Name('a', Load(), lineno=455, col_offset=16), [Str('</td>', lineno=455, col_offset=18)], [], None, None, lineno=455, col_offset=16), lineno=455, col_offset=16)], [], lineno=452, col_offset=12), Expr(Call(Name('a', Load(), lineno=456, col_offset=12), [Str('</tr>', lineno=456, col_offset=14)], [], None, None, lineno=456, col_offset=12), lineno=456, col_offset=12)], [], lineno=448, col_offset=8), Expr(Call(Name('a', Load(), lineno=457, col_offset=8), [Str('</table>', lineno=457, col_offset=10)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8), Return(Call(Attribute(Str('', lineno=458, col_offset=15), 'join', Load(), lineno=458, col_offset=15), [Name('v', Load(), lineno=458, col_offset=23)], [], None, None, lineno=458, col_offset=15), lineno=458, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('formatyearpage', arguments([Name('self', Param(), lineno=460, col_offset=23), Name('theyear', Param(), lineno=460, col_offset=29), Name('width', Param(), lineno=460, col_offset=38), Name('css', Param(), lineno=460, col_offset=47), Name('encoding', Param(), lineno=460, col_offset=67)], None, None, [Num(3, lineno=460, col_offset=44), Str('calendar.css', lineno=460, col_offset=51), Name('None', Load(), lineno=460, col_offset=76)]), [Expr(Str('\n        Return a formatted year as a complete HTML page.\n        ', lineno=463, col_offset=-1), lineno=463, col_offset=-1), If(Compare(Name('encoding', Load(), lineno=464, col_offset=11), [Is()], [Name('None', Load(), lineno=464, col_offset=23)], lineno=464, col_offset=11), [Assign([Name('encoding', Store(), lineno=465, col_offset=12)], Call(Attribute(Name('sys', Load(), lineno=465, col_offset=23), 'getdefaultencoding', Load(), lineno=465, col_offset=23), [], [], None, None, lineno=465, col_offset=23), lineno=465, col_offset=12)], [], lineno=464, col_offset=8), Assign([Name('v', Store(), lineno=466, col_offset=8)], List([], Load(), lineno=466, col_offset=12), lineno=466, col_offset=8), Assign([Name('a', Store(), lineno=467, col_offset=8)], Attribute(Name('v', Load(), lineno=467, col_offset=12), 'append', Load(), lineno=467, col_offset=12), lineno=467, col_offset=8), Expr(Call(Name('a', Load(), lineno=468, col_offset=8), [BinOp(Str('<?xml version="1.0" encoding="%s"?>\n', lineno=468, col_offset=10), Mod(), Name('encoding', Load(), lineno=468, col_offset=52), lineno=468, col_offset=10)], [], None, None, lineno=468, col_offset=8), lineno=468, col_offset=8), Expr(Call(Name('a', Load(), lineno=469, col_offset=8), [Str('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n', lineno=469, col_offset=10)], [], None, None, lineno=469, col_offset=8), lineno=469, col_offset=8), Expr(Call(Name('a', Load(), lineno=470, col_offset=8), [Str('<html>\n', lineno=470, col_offset=10)], [], None, None, lineno=470, col_offset=8), lineno=470, col_offset=8), Expr(Call(Name('a', Load(), lineno=471, col_offset=8), [Str('<head>\n', lineno=471, col_offset=10)], [], None, None, lineno=471, col_offset=8), lineno=471, col_offset=8), Expr(Call(Name('a', Load(), lineno=472, col_offset=8), [BinOp(Str('<meta http-equiv="Content-Type" content="text/html; charset=%s" />\n', lineno=472, col_offset=10), Mod(), Name('encoding', Load(), lineno=472, col_offset=83), lineno=472, col_offset=10)], [], None, None, lineno=472, col_offset=8), lineno=472, col_offset=8), If(Compare(Name('css', Load(), lineno=473, col_offset=11), [IsNot()], [Name('None', Load(), lineno=473, col_offset=22)], lineno=473, col_offset=11), [Expr(Call(Name('a', Load(), lineno=474, col_offset=12), [BinOp(Str('<link rel="stylesheet" type="text/css" href="%s" />\n', lineno=474, col_offset=14), Mod(), Name('css', Load(), lineno=474, col_offset=72), lineno=474, col_offset=14)], [], None, None, lineno=474, col_offset=12), lineno=474, col_offset=12)], [], lineno=473, col_offset=8), Expr(Call(Name('a', Load(), lineno=475, col_offset=8), [BinOp(Str('<title>Calendar for %d</title>\n', lineno=475, col_offset=10), Mod(), Name('theyear', Load(), lineno=475, col_offset=47), lineno=475, col_offset=10)], [], None, None, lineno=475, col_offset=8), lineno=475, col_offset=8), Expr(Call(Name('a', Load(), lineno=476, col_offset=8), [Str('</head>\n', lineno=476, col_offset=10)], [], None, None, lineno=476, col_offset=8), lineno=476, col_offset=8), Expr(Call(Name('a', Load(), lineno=477, col_offset=8), [Str('<body>\n', lineno=477, col_offset=10)], [], None, None, lineno=477, col_offset=8), lineno=477, col_offset=8), Expr(Call(Name('a', Load(), lineno=478, col_offset=8), [Call(Attribute(Name('self', Load(), lineno=478, col_offset=10), 'formatyear', Load(), lineno=478, col_offset=10), [Name('theyear', Load(), lineno=478, col_offset=26), Name('width', Load(), lineno=478, col_offset=35)], [], None, None, lineno=478, col_offset=10)], [], None, None, lineno=478, col_offset=8), lineno=478, col_offset=8), Expr(Call(Name('a', Load(), lineno=479, col_offset=8), [Str('</body>\n', lineno=479, col_offset=10)], [], None, None, lineno=479, col_offset=8), lineno=479, col_offset=8), Expr(Call(Name('a', Load(), lineno=480, col_offset=8), [Str('</html>\n', lineno=480, col_offset=10)], [], None, None, lineno=480, col_offset=8), lineno=480, col_offset=8), Return(Call(Attribute(Call(Attribute(Str('', lineno=481, col_offset=15), 'join', Load(), lineno=481, col_offset=15), [Name('v', Load(), lineno=481, col_offset=23)], [], None, None, lineno=481, col_offset=15), 'encode', Load(), lineno=481, col_offset=15), [Name('encoding', Load(), lineno=481, col_offset=33), Str('xmlcharrefreplace', lineno=481, col_offset=43)], [], None, None, lineno=481, col_offset=15), lineno=481, col_offset=8)], [], lineno=460, col_offset=4)], [], lineno=372, col_offset=0), ClassDef('TimeEncoding', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=485, col_offset=17), Name('locale', Param(), lineno=485, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=486, col_offset=8), 'locale', Store(), lineno=486, col_offset=8)], Name('locale', Load(), lineno=486, col_offset=22), lineno=486, col_offset=8)], [], lineno=485, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=488, col_offset=18)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=489, col_offset=8), 'oldlocale', Store(), lineno=489, col_offset=8)], Call(Attribute(Name('_locale', Load(), lineno=489, col_offset=25), 'getlocale', Load(), lineno=489, col_offset=25), [Attribute(Name('_locale', Load(), lineno=489, col_offset=43), 'LC_TIME', Load(), lineno=489, col_offset=43)], [], None, None, lineno=489, col_offset=25), lineno=489, col_offset=8), Expr(Call(Attribute(Name('_locale', Load(), lineno=490, col_offset=8), 'setlocale', Load(), lineno=490, col_offset=8), [Attribute(Name('_locale', Load(), lineno=490, col_offset=26), 'LC_TIME', Load(), lineno=490, col_offset=26), Attribute(Name('self', Load(), lineno=490, col_offset=43), 'locale', Load(), lineno=490, col_offset=43)], [], None, None, lineno=490, col_offset=8), lineno=490, col_offset=8)], [], lineno=488, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=492, col_offset=17)], 'args', None, []), [Expr(Call(Attribute(Name('_locale', Load(), lineno=493, col_offset=8), 'setlocale', Load(), lineno=493, col_offset=8), [Attribute(Name('_locale', Load(), lineno=493, col_offset=26), 'LC_TIME', Load(), lineno=493, col_offset=26), Attribute(Name('self', Load(), lineno=493, col_offset=43), 'oldlocale', Load(), lineno=493, col_offset=43)], [], None, None, lineno=493, col_offset=8), lineno=493, col_offset=8)], [], lineno=492, col_offset=4)], [], lineno=484, col_offset=0), ClassDef('LocaleTextCalendar', [Name('TextCalendar', Load(), lineno=496, col_offset=25)], [Expr(Str('\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ', lineno=502, col_offset=-1), lineno=502, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=504, col_offset=17), Name('firstweekday', Param(), lineno=504, col_offset=23), Name('locale', Param(), lineno=504, col_offset=39)], None, None, [Num(0, lineno=504, col_offset=36), Name('None', Load(), lineno=504, col_offset=46)]), [Expr(Call(Attribute(Name('TextCalendar', Load(), lineno=505, col_offset=8), '__init__', Load(), lineno=505, col_offset=8), [Name('self', Load(), lineno=505, col_offset=30), Name('firstweekday', Load(), lineno=505, col_offset=36)], [], None, None, lineno=505, col_offset=8), lineno=505, col_offset=8), If(Compare(Name('locale', Load(), lineno=506, col_offset=11), [Is()], [Name('None', Load(), lineno=506, col_offset=21)], lineno=506, col_offset=11), [Assign([Name('locale', Store(), lineno=507, col_offset=12)], Call(Attribute(Name('_locale', Load(), lineno=507, col_offset=21), 'getdefaultlocale', Load(), lineno=507, col_offset=21), [], [], None, None, lineno=507, col_offset=21), lineno=507, col_offset=12)], [], lineno=506, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=508, col_offset=8), 'locale', Store(), lineno=508, col_offset=8)], Name('locale', Load(), lineno=508, col_offset=22), lineno=508, col_offset=8)], [], lineno=504, col_offset=4), FunctionDef('formatweekday', arguments([Name('self', Param(), lineno=510, col_offset=22), Name('day', Param(), lineno=510, col_offset=28), Name('width', Param(), lineno=510, col_offset=33)], None, None, []), [With(Call(Name('TimeEncoding', Load(), lineno=511, col_offset=13), [Attribute(Name('self', Load(), lineno=511, col_offset=26), 'locale', Load(), lineno=511, col_offset=26)], [], None, None, lineno=511, col_offset=13), Name('encoding', Store(), lineno=511, col_offset=42), [If(Compare(Name('width', Load(), lineno=512, col_offset=15), [GtE()], [Num(9, lineno=512, col_offset=24)], lineno=512, col_offset=15), [Assign([Name('names', Store(), lineno=513, col_offset=16)], Name('day_name', Load(), lineno=513, col_offset=24), lineno=513, col_offset=16)], [Assign([Name('names', Store(), lineno=515, col_offset=16)], Name('day_abbr', Load(), lineno=515, col_offset=24), lineno=515, col_offset=16)], lineno=512, col_offset=12), Assign([Name('name', Store(), lineno=516, col_offset=12)], Subscript(Name('names', Load(), lineno=516, col_offset=19), Index(Name('day', Load(), lineno=516, col_offset=25)), Load(), lineno=516, col_offset=19), lineno=516, col_offset=12), If(Compare(Name('encoding', Load(), lineno=517, col_offset=15), [IsNot()], [Name('None', Load(), lineno=517, col_offset=31)], lineno=517, col_offset=15), [Assign([Name('name', Store(), lineno=518, col_offset=16)], Call(Attribute(Name('name', Load(), lineno=518, col_offset=23), 'decode', Load(), lineno=518, col_offset=23), [Name('encoding', Load(), lineno=518, col_offset=35)], [], None, None, lineno=518, col_offset=23), lineno=518, col_offset=16)], [], lineno=517, col_offset=12), Return(Call(Attribute(Subscript(Name('name', Load(), lineno=519, col_offset=19), Slice(None, Name('width', Load(), lineno=519, col_offset=25), None), Load(), lineno=519, col_offset=19), 'center', Load(), lineno=519, col_offset=19), [Name('width', Load(), lineno=519, col_offset=39)], [], None, None, lineno=519, col_offset=19), lineno=519, col_offset=12)], lineno=511, col_offset=13)], [], lineno=510, col_offset=4), FunctionDef('formatmonthname', arguments([Name('self', Param(), lineno=521, col_offset=24), Name('theyear', Param(), lineno=521, col_offset=30), Name('themonth', Param(), lineno=521, col_offset=39), Name('width', Param(), lineno=521, col_offset=49), Name('withyear', Param(), lineno=521, col_offset=56)], None, None, [Name('True', Load(), lineno=521, col_offset=65)]), [With(Call(Name('TimeEncoding', Load(), lineno=522, col_offset=13), [Attribute(Name('self', Load(), lineno=522, col_offset=26), 'locale', Load(), lineno=522, col_offset=26)], [], None, None, lineno=522, col_offset=13), Name('encoding', Store(), lineno=522, col_offset=42), [Assign([Name('s', Store(), lineno=523, col_offset=12)], Subscript(Name('month_name', Load(), lineno=523, col_offset=16), Index(Name('themonth', Load(), lineno=523, col_offset=27)), Load(), lineno=523, col_offset=16), lineno=523, col_offset=12), If(Compare(Name('encoding', Load(), lineno=524, col_offset=15), [IsNot()], [Name('None', Load(), lineno=524, col_offset=31)], lineno=524, col_offset=15), [Assign([Name('s', Store(), lineno=525, col_offset=16)], Call(Attribute(Name('s', Load(), lineno=525, col_offset=20), 'decode', Load(), lineno=525, col_offset=20), [Name('encoding', Load(), lineno=525, col_offset=29)], [], None, None, lineno=525, col_offset=20), lineno=525, col_offset=16)], [], lineno=524, col_offset=12), If(Name('withyear', Load(), lineno=526, col_offset=15), [Assign([Name('s', Store(), lineno=527, col_offset=16)], BinOp(Str('%s %r', lineno=527, col_offset=20), Mod(), Tuple([Name('s', Load(), lineno=527, col_offset=31), Name('theyear', Load(), lineno=527, col_offset=34)], Load(), lineno=527, col_offset=31), lineno=527, col_offset=20), lineno=527, col_offset=16)], [], lineno=526, col_offset=12), Return(Call(Attribute(Name('s', Load(), lineno=528, col_offset=19), 'center', Load(), lineno=528, col_offset=19), [Name('width', Load(), lineno=528, col_offset=28)], [], None, None, lineno=528, col_offset=19), lineno=528, col_offset=12)], lineno=522, col_offset=13)], [], lineno=521, col_offset=4)], [], lineno=496, col_offset=0), ClassDef('LocaleHTMLCalendar', [Name('HTMLCalendar', Load(), lineno=531, col_offset=25)], [Expr(Str('\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ', lineno=537, col_offset=-1), lineno=537, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=538, col_offset=17), Name('firstweekday', Param(), lineno=538, col_offset=23), Name('locale', Param(), lineno=538, col_offset=39)], None, None, [Num(0, lineno=538, col_offset=36), Name('None', Load(), lineno=538, col_offset=46)]), [Expr(Call(Attribute(Name('HTMLCalendar', Load(), lineno=539, col_offset=8), '__init__', Load(), lineno=539, col_offset=8), [Name('self', Load(), lineno=539, col_offset=30), Name('firstweekday', Load(), lineno=539, col_offset=36)], [], None, None, lineno=539, col_offset=8), lineno=539, col_offset=8), If(Compare(Name('locale', Load(), lineno=540, col_offset=11), [Is()], [Name('None', Load(), lineno=540, col_offset=21)], lineno=540, col_offset=11), [Assign([Name('locale', Store(), lineno=541, col_offset=12)], Call(Attribute(Name('_locale', Load(), lineno=541, col_offset=21), 'getdefaultlocale', Load(), lineno=541, col_offset=21), [], [], None, None, lineno=541, col_offset=21), lineno=541, col_offset=12)], [], lineno=540, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=542, col_offset=8), 'locale', Store(), lineno=542, col_offset=8)], Name('locale', Load(), lineno=542, col_offset=22), lineno=542, col_offset=8)], [], lineno=538, col_offset=4), FunctionDef('formatweekday', arguments([Name('self', Param(), lineno=544, col_offset=22), Name('day', Param(), lineno=544, col_offset=28)], None, None, []), [With(Call(Name('TimeEncoding', Load(), lineno=545, col_offset=13), [Attribute(Name('self', Load(), lineno=545, col_offset=26), 'locale', Load(), lineno=545, col_offset=26)], [], None, None, lineno=545, col_offset=13), Name('encoding', Store(), lineno=545, col_offset=42), [Assign([Name('s', Store(), lineno=546, col_offset=12)], Subscript(Name('day_abbr', Load(), lineno=546, col_offset=16), Index(Name('day', Load(), lineno=546, col_offset=25)), Load(), lineno=546, col_offset=16), lineno=546, col_offset=12), If(Compare(Name('encoding', Load(), lineno=547, col_offset=15), [IsNot()], [Name('None', Load(), lineno=547, col_offset=31)], lineno=547, col_offset=15), [Assign([Name('s', Store(), lineno=548, col_offset=16)], Call(Attribute(Name('s', Load(), lineno=548, col_offset=20), 'decode', Load(), lineno=548, col_offset=20), [Name('encoding', Load(), lineno=548, col_offset=29)], [], None, None, lineno=548, col_offset=20), lineno=548, col_offset=16)], [], lineno=547, col_offset=12), Return(BinOp(Str('<th class="%s">%s</th>', lineno=549, col_offset=19), Mod(), Tuple([Subscript(Attribute(Name('self', Load(), lineno=549, col_offset=47), 'cssclasses', Load(), lineno=549, col_offset=47), Index(Name('day', Load(), lineno=549, col_offset=63)), Load(), lineno=549, col_offset=47), Name('s', Load(), lineno=549, col_offset=69)], Load(), lineno=549, col_offset=47), lineno=549, col_offset=19), lineno=549, col_offset=12)], lineno=545, col_offset=13)], [], lineno=544, col_offset=4), FunctionDef('formatmonthname', arguments([Name('self', Param(), lineno=551, col_offset=24), Name('theyear', Param(), lineno=551, col_offset=30), Name('themonth', Param(), lineno=551, col_offset=39), Name('withyear', Param(), lineno=551, col_offset=49)], None, None, [Name('True', Load(), lineno=551, col_offset=58)]), [With(Call(Name('TimeEncoding', Load(), lineno=552, col_offset=13), [Attribute(Name('self', Load(), lineno=552, col_offset=26), 'locale', Load(), lineno=552, col_offset=26)], [], None, None, lineno=552, col_offset=13), Name('encoding', Store(), lineno=552, col_offset=42), [Assign([Name('s', Store(), lineno=553, col_offset=12)], Subscript(Name('month_name', Load(), lineno=553, col_offset=16), Index(Name('themonth', Load(), lineno=553, col_offset=27)), Load(), lineno=553, col_offset=16), lineno=553, col_offset=12), If(Compare(Name('encoding', Load(), lineno=554, col_offset=15), [IsNot()], [Name('None', Load(), lineno=554, col_offset=31)], lineno=554, col_offset=15), [Assign([Name('s', Store(), lineno=555, col_offset=16)], Call(Attribute(Name('s', Load(), lineno=555, col_offset=20), 'decode', Load(), lineno=555, col_offset=20), [Name('encoding', Load(), lineno=555, col_offset=29)], [], None, None, lineno=555, col_offset=20), lineno=555, col_offset=16)], [], lineno=554, col_offset=12), If(Name('withyear', Load(), lineno=556, col_offset=15), [Assign([Name('s', Store(), lineno=557, col_offset=16)], BinOp(Str('%s %s', lineno=557, col_offset=20), Mod(), Tuple([Name('s', Load(), lineno=557, col_offset=31), Name('theyear', Load(), lineno=557, col_offset=34)], Load(), lineno=557, col_offset=31), lineno=557, col_offset=20), lineno=557, col_offset=16)], [], lineno=556, col_offset=12), Return(BinOp(Str('<tr><th colspan="7" class="month">%s</th></tr>', lineno=558, col_offset=19), Mod(), Name('s', Load(), lineno=558, col_offset=70), lineno=558, col_offset=19), lineno=558, col_offset=12)], lineno=552, col_offset=13)], [], lineno=551, col_offset=4)], [], lineno=531, col_offset=0), Assign([Name('c', Store(), lineno=562, col_offset=0)], Call(Name('TextCalendar', Load(), lineno=562, col_offset=4), [], [], None, None, lineno=562, col_offset=4), lineno=562, col_offset=0), Assign([Name('firstweekday', Store(), lineno=564, col_offset=0)], Attribute(Name('c', Load(), lineno=564, col_offset=15), 'getfirstweekday', Load(), lineno=564, col_offset=15), lineno=564, col_offset=0), FunctionDef('setfirstweekday', arguments([Name('firstweekday', Param(), lineno=566, col_offset=20)], None, None, []), [TryExcept([Expr(Attribute(Name('firstweekday', Load(), lineno=568, col_offset=8), '__index__', Load(), lineno=568, col_offset=8), lineno=568, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=569, col_offset=11), None, [Raise(Call(Name('IllegalWeekdayError', Load(), lineno=570, col_offset=14), [Name('firstweekday', Load(), lineno=570, col_offset=34)], [], None, None, lineno=570, col_offset=14), None, None, lineno=570, col_offset=8)], lineno=569, col_offset=4)], [], lineno=567, col_offset=4), If(UnaryOp(Not(), Compare(Name('MONDAY', Load(), lineno=571, col_offset=11), [LtE(), LtE()], [Name('firstweekday', Load(), lineno=571, col_offset=21), Name('SUNDAY', Load(), lineno=571, col_offset=37)], lineno=571, col_offset=11), lineno=571, col_offset=7), [Raise(Call(Name('IllegalWeekdayError', Load(), lineno=572, col_offset=14), [Name('firstweekday', Load(), lineno=572, col_offset=34)], [], None, None, lineno=572, col_offset=14), None, None, lineno=572, col_offset=8)], [], lineno=571, col_offset=4), Assign([Attribute(Name('c', Load(), lineno=573, col_offset=4), 'firstweekday', Store(), lineno=573, col_offset=4)], Name('firstweekday', Load(), lineno=573, col_offset=21), lineno=573, col_offset=4)], [], lineno=566, col_offset=0), Assign([Name('monthcalendar', Store(), lineno=575, col_offset=0)], Attribute(Name('c', Load(), lineno=575, col_offset=16), 'monthdayscalendar', Load(), lineno=575, col_offset=16), lineno=575, col_offset=0), Assign([Name('prweek', Store(), lineno=576, col_offset=0)], Attribute(Name('c', Load(), lineno=576, col_offset=9), 'prweek', Load(), lineno=576, col_offset=9), lineno=576, col_offset=0), Assign([Name('week', Store(), lineno=577, col_offset=0)], Attribute(Name('c', Load(), lineno=577, col_offset=7), 'formatweek', Load(), lineno=577, col_offset=7), lineno=577, col_offset=0), Assign([Name('weekheader', Store(), lineno=578, col_offset=0)], Attribute(Name('c', Load(), lineno=578, col_offset=13), 'formatweekheader', Load(), lineno=578, col_offset=13), lineno=578, col_offset=0), Assign([Name('prmonth', Store(), lineno=579, col_offset=0)], Attribute(Name('c', Load(), lineno=579, col_offset=10), 'prmonth', Load(), lineno=579, col_offset=10), lineno=579, col_offset=0), Assign([Name('month', Store(), lineno=580, col_offset=0)], Attribute(Name('c', Load(), lineno=580, col_offset=8), 'formatmonth', Load(), lineno=580, col_offset=8), lineno=580, col_offset=0), Assign([Name('calendar', Store(), lineno=581, col_offset=0)], Attribute(Name('c', Load(), lineno=581, col_offset=11), 'formatyear', Load(), lineno=581, col_offset=11), lineno=581, col_offset=0), Assign([Name('prcal', Store(), lineno=582, col_offset=0)], Attribute(Name('c', Load(), lineno=582, col_offset=8), 'pryear', Load(), lineno=582, col_offset=8), lineno=582, col_offset=0), Assign([Name('_colwidth', Store(), lineno=586, col_offset=0)], BinOp(BinOp(Num(7, lineno=586, col_offset=12), Mult(), Num(3, lineno=586, col_offset=14), lineno=586, col_offset=12), Sub(), Num(1, lineno=586, col_offset=18), lineno=586, col_offset=12), lineno=586, col_offset=0), Assign([Name('_spacing', Store(), lineno=587, col_offset=0)], Num(6, lineno=587, col_offset=11), lineno=587, col_offset=0), FunctionDef('format', arguments([Name('cols', Param(), lineno=590, col_offset=11), Name('colwidth', Param(), lineno=590, col_offset=17), Name('spacing', Param(), lineno=590, col_offset=37)], None, None, [Name('_colwidth', Load(), lineno=590, col_offset=26), Name('_spacing', Load(), lineno=590, col_offset=45)]), [Expr(Str('Prints multi-column formatting for year calendars', lineno=591, col_offset=4), lineno=591, col_offset=4), Print(None, [Call(Name('formatstring', Load(), lineno=592, col_offset=10), [Name('cols', Load(), lineno=592, col_offset=23), Name('colwidth', Load(), lineno=592, col_offset=29), Name('spacing', Load(), lineno=592, col_offset=39)], [], None, None, lineno=592, col_offset=10)], True, lineno=592, col_offset=4)], [], lineno=590, col_offset=0), FunctionDef('formatstring', arguments([Name('cols', Param(), lineno=595, col_offset=17), Name('colwidth', Param(), lineno=595, col_offset=23), Name('spacing', Param(), lineno=595, col_offset=43)], None, None, [Name('_colwidth', Load(), lineno=595, col_offset=32), Name('_spacing', Load(), lineno=595, col_offset=51)]), [Expr(Str('Returns a string formatted from n strings, centered within n columns.', lineno=596, col_offset=4), lineno=596, col_offset=4), AugAssign(Name('spacing', Store(), lineno=597, col_offset=4), Mult(), Str(' ', lineno=597, col_offset=15), lineno=597, col_offset=4), Return(Call(Attribute(Name('spacing', Load(), lineno=598, col_offset=11), 'join', Load(), lineno=598, col_offset=11), [GeneratorExp(Call(Attribute(Name('c', Load(), lineno=598, col_offset=24), 'center', Load(), lineno=598, col_offset=24), [Name('colwidth', Load(), lineno=598, col_offset=33)], [], None, None, lineno=598, col_offset=24), [comprehension(Name('c', Store(), lineno=598, col_offset=47), Name('cols', Load(), lineno=598, col_offset=52), [])], lineno=598, col_offset=24)], [], None, None, lineno=598, col_offset=11), lineno=598, col_offset=4)], [], lineno=595, col_offset=0), Assign([Name('EPOCH', Store(), lineno=601, col_offset=0)], Num(1970, lineno=601, col_offset=8), lineno=601, col_offset=0), Assign([Name('_EPOCH_ORD', Store(), lineno=602, col_offset=0)], Call(Attribute(Call(Attribute(Name('datetime', Load(), lineno=602, col_offset=13), 'date', Load(), lineno=602, col_offset=13), [Name('EPOCH', Load(), lineno=602, col_offset=27), Num(1, lineno=602, col_offset=34), Num(1, lineno=602, col_offset=37)], [], None, None, lineno=602, col_offset=13), 'toordinal', Load(), lineno=602, col_offset=13), [], [], None, None, lineno=602, col_offset=13), lineno=602, col_offset=0), FunctionDef('timegm', arguments([Name('tuple', Param(), lineno=605, col_offset=11)], None, None, []), [Expr(Str('Unrelated but handy function to calculate Unix timestamp from GMT.', lineno=606, col_offset=4), lineno=606, col_offset=4), Assign([Tuple([Name('year', Store(), lineno=607, col_offset=4), Name('month', Store(), lineno=607, col_offset=10), Name('day', Store(), lineno=607, col_offset=17), Name('hour', Store(), lineno=607, col_offset=22), Name('minute', Store(), lineno=607, col_offset=28), Name('second', Store(), lineno=607, col_offset=36)], Store(), lineno=607, col_offset=4)], Subscript(Name('tuple', Load(), lineno=607, col_offset=45), Slice(None, Num(6, lineno=607, col_offset=52), None), Load(), lineno=607, col_offset=45), lineno=607, col_offset=4), Assign([Name('days', Store(), lineno=608, col_offset=4)], BinOp(BinOp(BinOp(Call(Attribute(Call(Attribute(Name('datetime', Load(), lineno=608, col_offset=11), 'date', Load(), lineno=608, col_offset=11), [Name('year', Load(), lineno=608, col_offset=25), Name('month', Load(), lineno=608, col_offset=31), Num(1, lineno=608, col_offset=38)], [], None, None, lineno=608, col_offset=11), 'toordinal', Load(), lineno=608, col_offset=11), [], [], None, None, lineno=608, col_offset=11), Sub(), Name('_EPOCH_ORD', Load(), lineno=608, col_offset=55), lineno=608, col_offset=11), Add(), Name('day', Load(), lineno=608, col_offset=68), lineno=608, col_offset=66), Sub(), Num(1, lineno=608, col_offset=74), lineno=608, col_offset=72), lineno=608, col_offset=4), Assign([Name('hours', Store(), lineno=609, col_offset=4)], BinOp(BinOp(Name('days', Load(), lineno=609, col_offset=12), Mult(), Num(24, lineno=609, col_offset=17), lineno=609, col_offset=12), Add(), Name('hour', Load(), lineno=609, col_offset=22), lineno=609, col_offset=12), lineno=609, col_offset=4), Assign([Name('minutes', Store(), lineno=610, col_offset=4)], BinOp(BinOp(Name('hours', Load(), lineno=610, col_offset=14), Mult(), Num(60, lineno=610, col_offset=20), lineno=610, col_offset=14), Add(), Name('minute', Load(), lineno=610, col_offset=25), lineno=610, col_offset=14), lineno=610, col_offset=4), Assign([Name('seconds', Store(), lineno=611, col_offset=4)], BinOp(BinOp(Name('minutes', Load(), lineno=611, col_offset=14), Mult(), Num(60, lineno=611, col_offset=22), lineno=611, col_offset=14), Add(), Name('second', Load(), lineno=611, col_offset=27), lineno=611, col_offset=14), lineno=611, col_offset=4), Return(Name('seconds', Load(), lineno=612, col_offset=11), lineno=612, col_offset=4)], [], lineno=605, col_offset=0), FunctionDef('main', arguments([Name('args', Param(), lineno=615, col_offset=9)], None, None, []), [Import([alias('optparse', None)], lineno=616, col_offset=4), Assign([Name('parser', Store(), lineno=617, col_offset=4)], Call(Attribute(Name('optparse', Load(), lineno=617, col_offset=13), 'OptionParser', Load(), lineno=617, col_offset=13), [], [keyword('usage', Str('usage: %prog [options] [year [month]]', lineno=617, col_offset=41))], None, None, lineno=617, col_offset=13), lineno=617, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=618, col_offset=4), 'add_option', Load(), lineno=618, col_offset=4), [Str('-w', lineno=619, col_offset=8), Str('--width', lineno=619, col_offset=14)], [keyword('dest', Str('width', lineno=620, col_offset=13)), keyword('type', Str('int', lineno=620, col_offset=27)), keyword('default', Num(2, lineno=620, col_offset=42)), keyword('help', Str('width of date column (default 2, text only)', lineno=621, col_offset=13))], None, None, lineno=618, col_offset=4), lineno=618, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=623, col_offset=4), 'add_option', Load(), lineno=623, col_offset=4), [Str('-l', lineno=624, col_offset=8), Str('--lines', lineno=624, col_offset=14)], [keyword('dest', Str('lines', lineno=625, col_offset=13)), keyword('type', Str('int', lineno=625, col_offset=27)), keyword('default', Num(1, lineno=625, col_offset=42)), keyword('help', Str('number of lines for each week (default 1, text only)', lineno=626, col_offset=13))], None, None, lineno=623, col_offset=4), lineno=623, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=628, col_offset=4), 'add_option', Load(), lineno=628, col_offset=4), [Str('-s', lineno=629, col_offset=8), Str('--spacing', lineno=629, col_offset=14)], [keyword('dest', Str('spacing', lineno=630, col_offset=13)), keyword('type', Str('int', lineno=630, col_offset=29)), keyword('default', Num(6, lineno=630, col_offset=44)), keyword('help', Str('spacing between months (default 6, text only)', lineno=631, col_offset=13))], None, None, lineno=628, col_offset=4), lineno=628, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=633, col_offset=4), 'add_option', Load(), lineno=633, col_offset=4), [Str('-m', lineno=634, col_offset=8), Str('--months', lineno=634, col_offset=14)], [keyword('dest', Str('months', lineno=635, col_offset=13)), keyword('type', Str('int', lineno=635, col_offset=28)), keyword('default', Num(3, lineno=635, col_offset=43)), keyword('help', Str('months per row (default 3, text only)', lineno=636, col_offset=13))], None, None, lineno=633, col_offset=4), lineno=633, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=638, col_offset=4), 'add_option', Load(), lineno=638, col_offset=4), [Str('-c', lineno=639, col_offset=8), Str('--css', lineno=639, col_offset=14)], [keyword('dest', Str('css', lineno=640, col_offset=13)), keyword('default', Str('calendar.css', lineno=640, col_offset=28)), keyword('help', Str('CSS to use for page (html only)', lineno=641, col_offset=13))], None, None, lineno=638, col_offset=4), lineno=638, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=643, col_offset=4), 'add_option', Load(), lineno=643, col_offset=4), [Str('-L', lineno=644, col_offset=8), Str('--locale', lineno=644, col_offset=14)], [keyword('dest', Str('locale', lineno=645, col_offset=13)), keyword('default', Name('None', Load(), lineno=645, col_offset=31)), keyword('help', Str('locale to be used from month and weekday names', lineno=646, col_offset=13))], None, None, lineno=643, col_offset=4), lineno=643, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=648, col_offset=4), 'add_option', Load(), lineno=648, col_offset=4), [Str('-e', lineno=649, col_offset=8), Str('--encoding', lineno=649, col_offset=14)], [keyword('dest', Str('encoding', lineno=650, col_offset=13)), keyword('default', Name('None', Load(), lineno=650, col_offset=33)), keyword('help', Str('Encoding to use for output', lineno=651, col_offset=13))], None, None, lineno=648, col_offset=4), lineno=648, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=653, col_offset=4), 'add_option', Load(), lineno=653, col_offset=4), [Str('-t', lineno=654, col_offset=8), Str('--type', lineno=654, col_offset=14)], [keyword('dest', Str('type', lineno=655, col_offset=13)), keyword('default', Str('text', lineno=655, col_offset=29)), keyword('choices', Tuple([Str('text', lineno=656, col_offset=17), Str('html', lineno=656, col_offset=25)], Load(), lineno=656, col_offset=17)), keyword('help', Str('output type (text or html)', lineno=657, col_offset=13))], None, None, lineno=653, col_offset=4), lineno=653, col_offset=4), Assign([Tuple([Name('options', Store(), lineno=660, col_offset=5), Name('args', Store(), lineno=660, col_offset=14)], Store(), lineno=660, col_offset=5)], Call(Attribute(Name('parser', Load(), lineno=660, col_offset=22), 'parse_args', Load(), lineno=660, col_offset=22), [Name('args', Load(), lineno=660, col_offset=40)], [], None, None, lineno=660, col_offset=22), lineno=660, col_offset=4), If(BoolOp(And(), [Attribute(Name('options', Load(), lineno=662, col_offset=7), 'locale', Load(), lineno=662, col_offset=7), UnaryOp(Not(), Attribute(Name('options', Load(), lineno=662, col_offset=30), 'encoding', Load(), lineno=662, col_offset=30), lineno=662, col_offset=26)], lineno=662, col_offset=7), [Expr(Call(Attribute(Name('parser', Load(), lineno=663, col_offset=8), 'error', Load(), lineno=663, col_offset=8), [Str('if --locale is specified --encoding is required', lineno=663, col_offset=21)], [], None, None, lineno=663, col_offset=8), lineno=663, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=664, col_offset=8), 'exit', Load(), lineno=664, col_offset=8), [Num(1, lineno=664, col_offset=17)], [], None, None, lineno=664, col_offset=8), lineno=664, col_offset=8)], [], lineno=662, col_offset=4), Assign([Name('locale', Store(), lineno=666, col_offset=4)], Tuple([Attribute(Name('options', Load(), lineno=666, col_offset=13), 'locale', Load(), lineno=666, col_offset=13), Attribute(Name('options', Load(), lineno=666, col_offset=29), 'encoding', Load(), lineno=666, col_offset=29)], Load(), lineno=666, col_offset=13), lineno=666, col_offset=4), If(Compare(Attribute(Name('options', Load(), lineno=668, col_offset=7), 'type', Load(), lineno=668, col_offset=7), [Eq()], [Str('html', lineno=668, col_offset=23)], lineno=668, col_offset=7), [If(Attribute(Name('options', Load(), lineno=669, col_offset=11), 'locale', Load(), lineno=669, col_offset=11), [Assign([Name('cal', Store(), lineno=670, col_offset=12)], Call(Name('LocaleHTMLCalendar', Load(), lineno=670, col_offset=18), [], [keyword('locale', Name('locale', Load(), lineno=670, col_offset=44))], None, None, lineno=670, col_offset=18), lineno=670, col_offset=12)], [Assign([Name('cal', Store(), lineno=672, col_offset=12)], Call(Name('HTMLCalendar', Load(), lineno=672, col_offset=18), [], [], None, None, lineno=672, col_offset=18), lineno=672, col_offset=12)], lineno=669, col_offset=8), Assign([Name('encoding', Store(), lineno=673, col_offset=8)], Attribute(Name('options', Load(), lineno=673, col_offset=19), 'encoding', Load(), lineno=673, col_offset=19), lineno=673, col_offset=8), If(Compare(Name('encoding', Load(), lineno=674, col_offset=11), [Is()], [Name('None', Load(), lineno=674, col_offset=23)], lineno=674, col_offset=11), [Assign([Name('encoding', Store(), lineno=675, col_offset=12)], Call(Attribute(Name('sys', Load(), lineno=675, col_offset=23), 'getdefaultencoding', Load(), lineno=675, col_offset=23), [], [], None, None, lineno=675, col_offset=23), lineno=675, col_offset=12)], [], lineno=674, col_offset=8), Assign([Name('optdict', Store(), lineno=676, col_offset=8)], Call(Name('dict', Load(), lineno=676, col_offset=18), [], [keyword('encoding', Name('encoding', Load(), lineno=676, col_offset=32)), keyword('css', Attribute(Name('options', Load(), lineno=676, col_offset=46), 'css', Load(), lineno=676, col_offset=46))], None, None, lineno=676, col_offset=18), lineno=676, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=677, col_offset=11), [Name('args', Load(), lineno=677, col_offset=15)], [], None, None, lineno=677, col_offset=11), [Eq()], [Num(1, lineno=677, col_offset=24)], lineno=677, col_offset=11), [Print(None, [Call(Attribute(Name('cal', Load(), lineno=678, col_offset=18), 'formatyearpage', Load(), lineno=678, col_offset=18), [Attribute(Call(Attribute(Attribute(Name('datetime', Load(), lineno=678, col_offset=37), 'date', Load(), lineno=678, col_offset=37), 'today', Load(), lineno=678, col_offset=37), [], [], None, None, lineno=678, col_offset=37), 'year', Load(), lineno=678, col_offset=37)], [], None, Name('optdict', Load(), lineno=678, col_offset=67), lineno=678, col_offset=18)], True, lineno=678, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=679, col_offset=13), [Name('args', Load(), lineno=679, col_offset=17)], [], None, None, lineno=679, col_offset=13), [Eq()], [Num(2, lineno=679, col_offset=26)], lineno=679, col_offset=13), [Print(None, [Call(Attribute(Name('cal', Load(), lineno=680, col_offset=18), 'formatyearpage', Load(), lineno=680, col_offset=18), [Call(Name('int', Load(), lineno=680, col_offset=37), [Subscript(Name('args', Load(), lineno=680, col_offset=41), Index(Num(1, lineno=680, col_offset=46)), Load(), lineno=680, col_offset=41)], [], None, None, lineno=680, col_offset=37)], [], None, Name('optdict', Load(), lineno=680, col_offset=53), lineno=680, col_offset=18)], True, lineno=680, col_offset=12)], [Expr(Call(Attribute(Name('parser', Load(), lineno=682, col_offset=12), 'error', Load(), lineno=682, col_offset=12), [Str('incorrect number of arguments', lineno=682, col_offset=25)], [], None, None, lineno=682, col_offset=12), lineno=682, col_offset=12), Expr(Call(Attribute(Name('sys', Load(), lineno=683, col_offset=12), 'exit', Load(), lineno=683, col_offset=12), [Num(1, lineno=683, col_offset=21)], [], None, None, lineno=683, col_offset=12), lineno=683, col_offset=12)], lineno=679, col_offset=13)], lineno=677, col_offset=8)], [If(Attribute(Name('options', Load(), lineno=685, col_offset=11), 'locale', Load(), lineno=685, col_offset=11), [Assign([Name('cal', Store(), lineno=686, col_offset=12)], Call(Name('LocaleTextCalendar', Load(), lineno=686, col_offset=18), [], [keyword('locale', Name('locale', Load(), lineno=686, col_offset=44))], None, None, lineno=686, col_offset=18), lineno=686, col_offset=12)], [Assign([Name('cal', Store(), lineno=688, col_offset=12)], Call(Name('TextCalendar', Load(), lineno=688, col_offset=18), [], [], None, None, lineno=688, col_offset=18), lineno=688, col_offset=12)], lineno=685, col_offset=8), Assign([Name('optdict', Store(), lineno=689, col_offset=8)], Call(Name('dict', Load(), lineno=689, col_offset=18), [], [keyword('w', Attribute(Name('options', Load(), lineno=689, col_offset=25), 'width', Load(), lineno=689, col_offset=25)), keyword('l', Attribute(Name('options', Load(), lineno=689, col_offset=42), 'lines', Load(), lineno=689, col_offset=42))], None, None, lineno=689, col_offset=18), lineno=689, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=690, col_offset=11), [Name('args', Load(), lineno=690, col_offset=15)], [], None, None, lineno=690, col_offset=11), [NotEq()], [Num(3, lineno=690, col_offset=24)], lineno=690, col_offset=11), [Assign([Subscript(Name('optdict', Load(), lineno=691, col_offset=12), Index(Str('c', lineno=691, col_offset=20)), Store(), lineno=691, col_offset=12)], Attribute(Name('options', Load(), lineno=691, col_offset=27), 'spacing', Load(), lineno=691, col_offset=27), lineno=691, col_offset=12), Assign([Subscript(Name('optdict', Load(), lineno=692, col_offset=12), Index(Str('m', lineno=692, col_offset=20)), Store(), lineno=692, col_offset=12)], Attribute(Name('options', Load(), lineno=692, col_offset=27), 'months', Load(), lineno=692, col_offset=27), lineno=692, col_offset=12)], [], lineno=690, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=693, col_offset=11), [Name('args', Load(), lineno=693, col_offset=15)], [], None, None, lineno=693, col_offset=11), [Eq()], [Num(1, lineno=693, col_offset=24)], lineno=693, col_offset=11), [Assign([Name('result', Store(), lineno=694, col_offset=12)], Call(Attribute(Name('cal', Load(), lineno=694, col_offset=21), 'formatyear', Load(), lineno=694, col_offset=21), [Attribute(Call(Attribute(Attribute(Name('datetime', Load(), lineno=694, col_offset=36), 'date', Load(), lineno=694, col_offset=36), 'today', Load(), lineno=694, col_offset=36), [], [], None, None, lineno=694, col_offset=36), 'year', Load(), lineno=694, col_offset=36)], [], None, Name('optdict', Load(), lineno=694, col_offset=66), lineno=694, col_offset=21), lineno=694, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=695, col_offset=13), [Name('args', Load(), lineno=695, col_offset=17)], [], None, None, lineno=695, col_offset=13), [Eq()], [Num(2, lineno=695, col_offset=26)], lineno=695, col_offset=13), [Assign([Name('result', Store(), lineno=696, col_offset=12)], Call(Attribute(Name('cal', Load(), lineno=696, col_offset=21), 'formatyear', Load(), lineno=696, col_offset=21), [Call(Name('int', Load(), lineno=696, col_offset=36), [Subscript(Name('args', Load(), lineno=696, col_offset=40), Index(Num(1, lineno=696, col_offset=45)), Load(), lineno=696, col_offset=40)], [], None, None, lineno=696, col_offset=36)], [], None, Name('optdict', Load(), lineno=696, col_offset=52), lineno=696, col_offset=21), lineno=696, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=697, col_offset=13), [Name('args', Load(), lineno=697, col_offset=17)], [], None, None, lineno=697, col_offset=13), [Eq()], [Num(3, lineno=697, col_offset=26)], lineno=697, col_offset=13), [Assign([Name('result', Store(), lineno=698, col_offset=12)], Call(Attribute(Name('cal', Load(), lineno=698, col_offset=21), 'formatmonth', Load(), lineno=698, col_offset=21), [Call(Name('int', Load(), lineno=698, col_offset=37), [Subscript(Name('args', Load(), lineno=698, col_offset=41), Index(Num(1, lineno=698, col_offset=46)), Load(), lineno=698, col_offset=41)], [], None, None, lineno=698, col_offset=37), Call(Name('int', Load(), lineno=698, col_offset=51), [Subscript(Name('args', Load(), lineno=698, col_offset=55), Index(Num(2, lineno=698, col_offset=60)), Load(), lineno=698, col_offset=55)], [], None, None, lineno=698, col_offset=51)], [], None, Name('optdict', Load(), lineno=698, col_offset=67), lineno=698, col_offset=21), lineno=698, col_offset=12)], [Expr(Call(Attribute(Name('parser', Load(), lineno=700, col_offset=12), 'error', Load(), lineno=700, col_offset=12), [Str('incorrect number of arguments', lineno=700, col_offset=25)], [], None, None, lineno=700, col_offset=12), lineno=700, col_offset=12), Expr(Call(Attribute(Name('sys', Load(), lineno=701, col_offset=12), 'exit', Load(), lineno=701, col_offset=12), [Num(1, lineno=701, col_offset=21)], [], None, None, lineno=701, col_offset=12), lineno=701, col_offset=12)], lineno=697, col_offset=13)], lineno=695, col_offset=13)], lineno=693, col_offset=8), If(Attribute(Name('options', Load(), lineno=702, col_offset=11), 'encoding', Load(), lineno=702, col_offset=11), [Assign([Name('result', Store(), lineno=703, col_offset=12)], Call(Attribute(Name('result', Load(), lineno=703, col_offset=21), 'encode', Load(), lineno=703, col_offset=21), [Attribute(Name('options', Load(), lineno=703, col_offset=35), 'encoding', Load(), lineno=703, col_offset=35)], [], None, None, lineno=703, col_offset=21), lineno=703, col_offset=12)], [], lineno=702, col_offset=8), Print(None, [Name('result', Load(), lineno=704, col_offset=14)], True, lineno=704, col_offset=8)], lineno=668, col_offset=4)], [], lineno=615, col_offset=0), If(Compare(Name('__name__', Load(), lineno=707, col_offset=3), [Eq()], [Str('__main__', lineno=707, col_offset=15)], lineno=707, col_offset=3), [Expr(Call(Name('main', Load(), lineno=708, col_offset=4), [Attribute(Name('sys', Load(), lineno=708, col_offset=9), 'argv', Load(), lineno=708, col_offset=9)], [], None, None, lineno=708, col_offset=4), lineno=708, col_offset=4)], [], lineno=707, col_offset=0)])
