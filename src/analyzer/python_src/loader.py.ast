Module([Expr(Str('Loading unittests.', lineno=1, col_offset=0), lineno=1, col_offset=0), Import([alias('os', None)], lineno=3, col_offset=0), Import([alias('re', None)], lineno=4, col_offset=0), Import([alias('sys', None)], lineno=5, col_offset=0), Import([alias('traceback', None)], lineno=6, col_offset=0), Import([alias('types', None)], lineno=7, col_offset=0), ImportFrom('functools', [alias('cmp_to_key', '_CmpToKey')], 0, lineno=9, col_offset=0), ImportFrom('fnmatch', [alias('fnmatch', None)], 0, lineno=10, col_offset=0), ImportFrom(None, [alias('case', None), alias('suite', None)], 1, lineno=12, col_offset=0), Assign([Name('__unittest', Store(), lineno=14, col_offset=0)], Name('True', Load(), lineno=14, col_offset=13), lineno=14, col_offset=0), Assign([Name('VALID_MODULE_NAME', Store(), lineno=19, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=19, col_offset=20), 'compile', Load(), lineno=19, col_offset=20), [Str('[_a-z]\\w*\\.py$', lineno=19, col_offset=31), Attribute(Name('re', Load(), lineno=19, col_offset=50), 'IGNORECASE', Load(), lineno=19, col_offset=50)], [], None, None, lineno=19, col_offset=20), lineno=19, col_offset=0), FunctionDef('_make_failed_import_test', arguments([Name('name', Param(), lineno=22, col_offset=29), Name('suiteClass', Param(), lineno=22, col_offset=35)], None, None, []), [Assign([Name('message', Store(), lineno=23, col_offset=4)], BinOp(Str('Failed to import test module: %s\n%s', lineno=23, col_offset=14), Mod(), Tuple([Name('name', Load(), lineno=23, col_offset=56), Call(Attribute(Name('traceback', Load(), lineno=23, col_offset=62), 'format_exc', Load(), lineno=23, col_offset=62), [], [], None, None, lineno=23, col_offset=62)], Load(), lineno=23, col_offset=56), lineno=23, col_offset=14), lineno=23, col_offset=4), Return(Call(Name('_make_failed_test', Load(), lineno=24, col_offset=11), [Str('ModuleImportFailure', lineno=24, col_offset=29), Name('name', Load(), lineno=24, col_offset=52), Call(Name('ImportError', Load(), lineno=24, col_offset=58), [Name('message', Load(), lineno=24, col_offset=70)], [], None, None, lineno=24, col_offset=58), Name('suiteClass', Load(), lineno=25, col_offset=29)], [], None, None, lineno=24, col_offset=11), lineno=24, col_offset=4)], [], lineno=22, col_offset=0), FunctionDef('_make_failed_load_tests', arguments([Name('name', Param(), lineno=27, col_offset=28), Name('exception', Param(), lineno=27, col_offset=34), Name('suiteClass', Param(), lineno=27, col_offset=45)], None, None, []), [Return(Call(Name('_make_failed_test', Load(), lineno=28, col_offset=11), [Str('LoadTestsFailure', lineno=28, col_offset=29), Name('name', Load(), lineno=28, col_offset=49), Name('exception', Load(), lineno=28, col_offset=55), Name('suiteClass', Load(), lineno=28, col_offset=66)], [], None, None, lineno=28, col_offset=11), lineno=28, col_offset=4)], [], lineno=27, col_offset=0), FunctionDef('_make_failed_test', arguments([Name('classname', Param(), lineno=30, col_offset=22), Name('methodname', Param(), lineno=30, col_offset=33), Name('exception', Param(), lineno=30, col_offset=45), Name('suiteClass', Param(), lineno=30, col_offset=56)], None, None, []), [FunctionDef('testFailure', arguments([Name('self', Param(), lineno=31, col_offset=20)], None, None, []), [Raise(Name('exception', Load(), lineno=32, col_offset=14), None, None, lineno=32, col_offset=8)], [], lineno=31, col_offset=4), Assign([Name('attrs', Store(), lineno=33, col_offset=4)], Dict([Name('methodname', Load(), lineno=33, col_offset=13)], [Name('testFailure', Load(), lineno=33, col_offset=25)], lineno=33, col_offset=12), lineno=33, col_offset=4), Assign([Name('TestClass', Store(), lineno=34, col_offset=4)], Call(Name('type', Load(), lineno=34, col_offset=16), [Name('classname', Load(), lineno=34, col_offset=21), Tuple([Attribute(Name('case', Load(), lineno=34, col_offset=33), 'TestCase', Load(), lineno=34, col_offset=33)], Load(), lineno=34, col_offset=33), Name('attrs', Load(), lineno=34, col_offset=50)], [], None, None, lineno=34, col_offset=16), lineno=34, col_offset=4), Return(Call(Name('suiteClass', Load(), lineno=35, col_offset=11), [Tuple([Call(Name('TestClass', Load(), lineno=35, col_offset=23), [Name('methodname', Load(), lineno=35, col_offset=33)], [], None, None, lineno=35, col_offset=23)], Load(), lineno=35, col_offset=23)], [], None, None, lineno=35, col_offset=11), lineno=35, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('TestLoader', [Name('object', Load(), lineno=38, col_offset=17)], [Expr(Str('\n    This class is responsible for loading tests according to various criteria\n    and returning them wrapped in a TestSuite\n    ', lineno=42, col_offset=-1), lineno=42, col_offset=-1), Assign([Name('testMethodPrefix', Store(), lineno=43, col_offset=4)], Str('test', lineno=43, col_offset=23), lineno=43, col_offset=4), Assign([Name('sortTestMethodsUsing', Store(), lineno=44, col_offset=4)], Name('cmp', Load(), lineno=44, col_offset=27), lineno=44, col_offset=4), Assign([Name('suiteClass', Store(), lineno=45, col_offset=4)], Attribute(Name('suite', Load(), lineno=45, col_offset=17), 'TestSuite', Load(), lineno=45, col_offset=17), lineno=45, col_offset=4), Assign([Name('_top_level_dir', Store(), lineno=46, col_offset=4)], Name('None', Load(), lineno=46, col_offset=21), lineno=46, col_offset=4), FunctionDef('loadTestsFromTestCase', arguments([Name('self', Param(), lineno=48, col_offset=30), Name('testCaseClass', Param(), lineno=48, col_offset=36)], None, None, []), [Expr(Str('Return a suite of all tests cases contained in testCaseClass', lineno=49, col_offset=8), lineno=49, col_offset=8), If(Call(Name('issubclass', Load(), lineno=50, col_offset=11), [Name('testCaseClass', Load(), lineno=50, col_offset=22), Attribute(Name('suite', Load(), lineno=50, col_offset=37), 'TestSuite', Load(), lineno=50, col_offset=37)], [], None, None, lineno=50, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=51, col_offset=18), [Str('Test cases should not be derived from TestSuite. Maybe you meant to derive from TestCase?', lineno=51, col_offset=28)], [], None, None, lineno=51, col_offset=18), None, None, lineno=51, col_offset=12)], [], lineno=50, col_offset=8), Assign([Name('testCaseNames', Store(), lineno=53, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=53, col_offset=24), 'getTestCaseNames', Load(), lineno=53, col_offset=24), [Name('testCaseClass', Load(), lineno=53, col_offset=46)], [], None, None, lineno=53, col_offset=24), lineno=53, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('testCaseNames', Load(), lineno=54, col_offset=15), lineno=54, col_offset=11), Call(Name('hasattr', Load(), lineno=54, col_offset=33), [Name('testCaseClass', Load(), lineno=54, col_offset=41), Str('runTest', lineno=54, col_offset=56)], [], None, None, lineno=54, col_offset=33)], lineno=54, col_offset=11), [Assign([Name('testCaseNames', Store(), lineno=55, col_offset=12)], List([Str('runTest', lineno=55, col_offset=29)], Load(), lineno=55, col_offset=28), lineno=55, col_offset=12)], [], lineno=54, col_offset=8), Assign([Name('loaded_suite', Store(), lineno=56, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=56, col_offset=23), 'suiteClass', Load(), lineno=56, col_offset=23), [Call(Name('map', Load(), lineno=56, col_offset=39), [Name('testCaseClass', Load(), lineno=56, col_offset=43), Name('testCaseNames', Load(), lineno=56, col_offset=58)], [], None, None, lineno=56, col_offset=39)], [], None, None, lineno=56, col_offset=23), lineno=56, col_offset=8), Return(Name('loaded_suite', Load(), lineno=57, col_offset=15), lineno=57, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('loadTestsFromModule', arguments([Name('self', Param(), lineno=59, col_offset=28), Name('module', Param(), lineno=59, col_offset=34), Name('use_load_tests', Param(), lineno=59, col_offset=42)], None, None, [Name('True', Load(), lineno=59, col_offset=57)]), [Expr(Str('Return a suite of all tests cases contained in the given module', lineno=60, col_offset=8), lineno=60, col_offset=8), Assign([Name('tests', Store(), lineno=61, col_offset=8)], List([], Load(), lineno=61, col_offset=16), lineno=61, col_offset=8), For(Name('name', Store(), lineno=62, col_offset=12), Call(Name('dir', Load(), lineno=62, col_offset=20), [Name('module', Load(), lineno=62, col_offset=24)], [], None, None, lineno=62, col_offset=20), [Assign([Name('obj', Store(), lineno=63, col_offset=12)], Call(Name('getattr', Load(), lineno=63, col_offset=18), [Name('module', Load(), lineno=63, col_offset=26), Name('name', Load(), lineno=63, col_offset=34)], [], None, None, lineno=63, col_offset=18), lineno=63, col_offset=12), If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=64, col_offset=15), [Name('obj', Load(), lineno=64, col_offset=26), Name('type', Load(), lineno=64, col_offset=31)], [], None, None, lineno=64, col_offset=15), Call(Name('issubclass', Load(), lineno=64, col_offset=41), [Name('obj', Load(), lineno=64, col_offset=52), Attribute(Name('case', Load(), lineno=64, col_offset=57), 'TestCase', Load(), lineno=64, col_offset=57)], [], None, None, lineno=64, col_offset=41)], lineno=64, col_offset=15), [Expr(Call(Attribute(Name('tests', Load(), lineno=65, col_offset=16), 'append', Load(), lineno=65, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=65, col_offset=29), 'loadTestsFromTestCase', Load(), lineno=65, col_offset=29), [Name('obj', Load(), lineno=65, col_offset=56)], [], None, None, lineno=65, col_offset=29)], [], None, None, lineno=65, col_offset=16), lineno=65, col_offset=16)], [], lineno=64, col_offset=12)], [], lineno=62, col_offset=8), Assign([Name('load_tests', Store(), lineno=67, col_offset=8)], Call(Name('getattr', Load(), lineno=67, col_offset=21), [Name('module', Load(), lineno=67, col_offset=29), Str('load_tests', lineno=67, col_offset=37), Name('None', Load(), lineno=67, col_offset=51)], [], None, None, lineno=67, col_offset=21), lineno=67, col_offset=8), Assign([Name('tests', Store(), lineno=68, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=68, col_offset=16), 'suiteClass', Load(), lineno=68, col_offset=16), [Name('tests', Load(), lineno=68, col_offset=32)], [], None, None, lineno=68, col_offset=16), lineno=68, col_offset=8), If(BoolOp(And(), [Name('use_load_tests', Load(), lineno=69, col_offset=11), Compare(Name('load_tests', Load(), lineno=69, col_offset=30), [IsNot()], [Name('None', Load(), lineno=69, col_offset=48)], lineno=69, col_offset=30)], lineno=69, col_offset=11), [TryExcept([Return(Call(Name('load_tests', Load(), lineno=71, col_offset=23), [Name('self', Load(), lineno=71, col_offset=34), Name('tests', Load(), lineno=71, col_offset=40), Name('None', Load(), lineno=71, col_offset=47)], [], None, None, lineno=71, col_offset=23), lineno=71, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=72, col_offset=19), Name('e', Store(), lineno=72, col_offset=30), [Return(Call(Name('_make_failed_load_tests', Load(), lineno=73, col_offset=23), [Attribute(Name('module', Load(), lineno=73, col_offset=47), '__name__', Load(), lineno=73, col_offset=47), Name('e', Load(), lineno=73, col_offset=64), Attribute(Name('self', Load(), lineno=74, col_offset=47), 'suiteClass', Load(), lineno=74, col_offset=47)], [], None, None, lineno=73, col_offset=23), lineno=73, col_offset=16)], lineno=72, col_offset=12)], [], lineno=70, col_offset=12)], [], lineno=69, col_offset=8), Return(Name('tests', Load(), lineno=75, col_offset=15), lineno=75, col_offset=8)], [], lineno=59, col_offset=4), FunctionDef('loadTestsFromName', arguments([Name('self', Param(), lineno=77, col_offset=26), Name('name', Param(), lineno=77, col_offset=32), Name('module', Param(), lineno=77, col_offset=38)], None, None, [Name('None', Load(), lineno=77, col_offset=45)]), [Expr(Str('Return a suite of all tests cases given a string specifier.\n\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n\n        The method optionally resolves the names relative to a given module.\n        ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Name('parts', Store(), lineno=86, col_offset=8)], Call(Attribute(Name('name', Load(), lineno=86, col_offset=16), 'split', Load(), lineno=86, col_offset=16), [Str('.', lineno=86, col_offset=27)], [], None, None, lineno=86, col_offset=16), lineno=86, col_offset=8), If(Compare(Name('module', Load(), lineno=87, col_offset=11), [Is()], [Name('None', Load(), lineno=87, col_offset=21)], lineno=87, col_offset=11), [Assign([Name('parts_copy', Store(), lineno=88, col_offset=12)], Subscript(Name('parts', Load(), lineno=88, col_offset=25), Slice(None, None, None), Load(), lineno=88, col_offset=25), lineno=88, col_offset=12), While(Name('parts_copy', Load(), lineno=89, col_offset=18), [TryExcept([Assign([Name('module', Store(), lineno=91, col_offset=20)], Call(Name('__import__', Load(), lineno=91, col_offset=29), [Call(Attribute(Str('.', lineno=91, col_offset=40), 'join', Load(), lineno=91, col_offset=40), [Name('parts_copy', Load(), lineno=91, col_offset=49)], [], None, None, lineno=91, col_offset=40)], [], None, None, lineno=91, col_offset=29), lineno=91, col_offset=20), Break( lineno=92, col_offset=20)], [ExceptHandler(Name('ImportError', Load(), lineno=93, col_offset=23), None, [Delete([Subscript(Name('parts_copy', Load(), lineno=94, col_offset=24), Index(Num(-1, lineno=94, col_offset=36)), Del(), lineno=94, col_offset=24)], lineno=94, col_offset=20), If(UnaryOp(Not(), Name('parts_copy', Load(), lineno=95, col_offset=27), lineno=95, col_offset=23), [Raise(None, None, None, lineno=96, col_offset=24)], [], lineno=95, col_offset=20)], lineno=93, col_offset=16)], [], lineno=90, col_offset=16)], [], lineno=89, col_offset=12), Assign([Name('parts', Store(), lineno=97, col_offset=12)], Subscript(Name('parts', Load(), lineno=97, col_offset=20), Slice(Num(1, lineno=97, col_offset=26), None, None), Load(), lineno=97, col_offset=20), lineno=97, col_offset=12)], [], lineno=87, col_offset=8), Assign([Name('obj', Store(), lineno=98, col_offset=8)], Name('module', Load(), lineno=98, col_offset=14), lineno=98, col_offset=8), For(Name('part', Store(), lineno=99, col_offset=12), Name('parts', Load(), lineno=99, col_offset=20), [Assign([Tuple([Name('parent', Store(), lineno=100, col_offset=12), Name('obj', Store(), lineno=100, col_offset=20)], Store(), lineno=100, col_offset=12)], Tuple([Name('obj', Load(), lineno=100, col_offset=26), Call(Name('getattr', Load(), lineno=100, col_offset=31), [Name('obj', Load(), lineno=100, col_offset=39), Name('part', Load(), lineno=100, col_offset=44)], [], None, None, lineno=100, col_offset=31)], Load(), lineno=100, col_offset=26), lineno=100, col_offset=12)], [], lineno=99, col_offset=8), If(Call(Name('isinstance', Load(), lineno=102, col_offset=11), [Name('obj', Load(), lineno=102, col_offset=22), Attribute(Name('types', Load(), lineno=102, col_offset=27), 'ModuleType', Load(), lineno=102, col_offset=27)], [], None, None, lineno=102, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=103, col_offset=19), 'loadTestsFromModule', Load(), lineno=103, col_offset=19), [Name('obj', Load(), lineno=103, col_offset=44)], [], None, None, lineno=103, col_offset=19), lineno=103, col_offset=12)], [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=104, col_offset=13), [Name('obj', Load(), lineno=104, col_offset=24), Name('type', Load(), lineno=104, col_offset=29)], [], None, None, lineno=104, col_offset=13), Call(Name('issubclass', Load(), lineno=104, col_offset=39), [Name('obj', Load(), lineno=104, col_offset=50), Attribute(Name('case', Load(), lineno=104, col_offset=55), 'TestCase', Load(), lineno=104, col_offset=55)], [], None, None, lineno=104, col_offset=39)], lineno=104, col_offset=13), [Return(Call(Attribute(Name('self', Load(), lineno=105, col_offset=19), 'loadTestsFromTestCase', Load(), lineno=105, col_offset=19), [Name('obj', Load(), lineno=105, col_offset=46)], [], None, None, lineno=105, col_offset=19), lineno=105, col_offset=12)], [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=106, col_offset=14), [Name('obj', Load(), lineno=106, col_offset=25), Attribute(Name('types', Load(), lineno=106, col_offset=30), 'UnboundMethodType', Load(), lineno=106, col_offset=30)], [], None, None, lineno=106, col_offset=14), Call(Name('isinstance', Load(), lineno=107, col_offset=14), [Name('parent', Load(), lineno=107, col_offset=25), Name('type', Load(), lineno=107, col_offset=33)], [], None, None, lineno=107, col_offset=14), Call(Name('issubclass', Load(), lineno=108, col_offset=14), [Name('parent', Load(), lineno=108, col_offset=25), Attribute(Name('case', Load(), lineno=108, col_offset=33), 'TestCase', Load(), lineno=108, col_offset=33)], [], None, None, lineno=108, col_offset=14)], lineno=106, col_offset=14), [Return(Call(Attribute(Name('self', Load(), lineno=109, col_offset=19), 'suiteClass', Load(), lineno=109, col_offset=19), [List([Call(Name('parent', Load(), lineno=109, col_offset=36), [Attribute(Name('obj', Load(), lineno=109, col_offset=43), '__name__', Load(), lineno=109, col_offset=43)], [], None, None, lineno=109, col_offset=36)], Load(), lineno=109, col_offset=35)], [], None, None, lineno=109, col_offset=19), lineno=109, col_offset=12)], [If(Call(Name('isinstance', Load(), lineno=110, col_offset=13), [Name('obj', Load(), lineno=110, col_offset=24), Attribute(Name('suite', Load(), lineno=110, col_offset=29), 'TestSuite', Load(), lineno=110, col_offset=29)], [], None, None, lineno=110, col_offset=13), [Return(Name('obj', Load(), lineno=111, col_offset=19), lineno=111, col_offset=12)], [If(Call(Name('hasattr', Load(), lineno=112, col_offset=13), [Name('obj', Load(), lineno=112, col_offset=21), Str('__call__', lineno=112, col_offset=26)], [], None, None, lineno=112, col_offset=13), [Assign([Name('test', Store(), lineno=113, col_offset=12)], Call(Name('obj', Load(), lineno=113, col_offset=19), [], [], None, None, lineno=113, col_offset=19), lineno=113, col_offset=12), If(Call(Name('isinstance', Load(), lineno=114, col_offset=15), [Name('test', Load(), lineno=114, col_offset=26), Attribute(Name('suite', Load(), lineno=114, col_offset=32), 'TestSuite', Load(), lineno=114, col_offset=32)], [], None, None, lineno=114, col_offset=15), [Return(Name('test', Load(), lineno=115, col_offset=23), lineno=115, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=116, col_offset=17), [Name('test', Load(), lineno=116, col_offset=28), Attribute(Name('case', Load(), lineno=116, col_offset=34), 'TestCase', Load(), lineno=116, col_offset=34)], [], None, None, lineno=116, col_offset=17), [Return(Call(Attribute(Name('self', Load(), lineno=117, col_offset=23), 'suiteClass', Load(), lineno=117, col_offset=23), [List([Name('test', Load(), lineno=117, col_offset=40)], Load(), lineno=117, col_offset=39)], [], None, None, lineno=117, col_offset=23), lineno=117, col_offset=16)], [Raise(Call(Name('TypeError', Load(), lineno=119, col_offset=22), [BinOp(Str('calling %s returned %s, not a test', lineno=119, col_offset=32), Mod(), Tuple([Name('obj', Load(), lineno=120, col_offset=33), Name('test', Load(), lineno=120, col_offset=38)], Load(), lineno=120, col_offset=33), lineno=119, col_offset=32)], [], None, None, lineno=119, col_offset=22), None, None, lineno=119, col_offset=16)], lineno=116, col_offset=17)], lineno=114, col_offset=12)], [Raise(Call(Name('TypeError', Load(), lineno=122, col_offset=18), [BinOp(Str("don't know how to make test from: %s", lineno=122, col_offset=28), Mod(), Name('obj', Load(), lineno=122, col_offset=69), lineno=122, col_offset=28)], [], None, None, lineno=122, col_offset=18), None, None, lineno=122, col_offset=12)], lineno=112, col_offset=13)], lineno=110, col_offset=13)], lineno=106, col_offset=13)], lineno=104, col_offset=13)], lineno=102, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('loadTestsFromNames', arguments([Name('self', Param(), lineno=124, col_offset=27), Name('names', Param(), lineno=124, col_offset=33), Name('module', Param(), lineno=124, col_offset=40)], None, None, [Name('None', Load(), lineno=124, col_offset=47)]), [Expr(Str("Return a suite of all tests cases found using the given sequence\n        of string specifiers. See 'loadTestsFromName()'.\n        ", lineno=127, col_offset=-1), lineno=127, col_offset=-1), Assign([Name('suites', Store(), lineno=128, col_offset=8)], ListComp(Call(Attribute(Name('self', Load(), lineno=128, col_offset=18), 'loadTestsFromName', Load(), lineno=128, col_offset=18), [Name('name', Load(), lineno=128, col_offset=41), Name('module', Load(), lineno=128, col_offset=47)], [], None, None, lineno=128, col_offset=18), [comprehension(Name('name', Store(), lineno=128, col_offset=59), Name('names', Load(), lineno=128, col_offset=67), [])], lineno=128, col_offset=18), lineno=128, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=129, col_offset=15), 'suiteClass', Load(), lineno=129, col_offset=15), [Name('suites', Load(), lineno=129, col_offset=31)], [], None, None, lineno=129, col_offset=15), lineno=129, col_offset=8)], [], lineno=124, col_offset=4), FunctionDef('getTestCaseNames', arguments([Name('self', Param(), lineno=131, col_offset=25), Name('testCaseClass', Param(), lineno=131, col_offset=31)], None, None, []), [Expr(Str('Return a sorted sequence of method names found within testCaseClass\n        ', lineno=133, col_offset=-1), lineno=133, col_offset=-1), FunctionDef('isTestMethod', arguments([Name('attrname', Param(), lineno=134, col_offset=25), Name('testCaseClass', Param(), lineno=134, col_offset=35), Name('prefix', Param(), lineno=135, col_offset=25)], None, None, [Name('testCaseClass', Load(), lineno=134, col_offset=49), Attribute(Name('self', Load(), lineno=135, col_offset=32), 'testMethodPrefix', Load(), lineno=135, col_offset=32)]), [Return(BoolOp(And(), [Call(Attribute(Name('attrname', Load(), lineno=136, col_offset=19), 'startswith', Load(), lineno=136, col_offset=19), [Name('prefix', Load(), lineno=136, col_offset=39)], [], None, None, lineno=136, col_offset=19), Call(Name('hasattr', Load(), lineno=137, col_offset=16), [Call(Name('getattr', Load(), lineno=137, col_offset=24), [Name('testCaseClass', Load(), lineno=137, col_offset=32), Name('attrname', Load(), lineno=137, col_offset=47)], [], None, None, lineno=137, col_offset=24), Str('__call__', lineno=137, col_offset=58)], [], None, None, lineno=137, col_offset=16)], lineno=136, col_offset=19), lineno=136, col_offset=12)], [], lineno=134, col_offset=8), Assign([Name('testFnNames', Store(), lineno=138, col_offset=8)], Call(Name('filter', Load(), lineno=138, col_offset=22), [Name('isTestMethod', Load(), lineno=138, col_offset=29), Call(Name('dir', Load(), lineno=138, col_offset=43), [Name('testCaseClass', Load(), lineno=138, col_offset=47)], [], None, None, lineno=138, col_offset=43)], [], None, None, lineno=138, col_offset=22), lineno=138, col_offset=8), If(Attribute(Name('self', Load(), lineno=139, col_offset=11), 'sortTestMethodsUsing', Load(), lineno=139, col_offset=11), [Expr(Call(Attribute(Name('testFnNames', Load(), lineno=140, col_offset=12), 'sort', Load(), lineno=140, col_offset=12), [], [keyword('key', Call(Name('_CmpToKey', Load(), lineno=140, col_offset=33), [Attribute(Name('self', Load(), lineno=140, col_offset=43), 'sortTestMethodsUsing', Load(), lineno=140, col_offset=43)], [], None, None, lineno=140, col_offset=33))], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12)], [], lineno=139, col_offset=8), Return(Name('testFnNames', Load(), lineno=141, col_offset=15), lineno=141, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('discover', arguments([Name('self', Param(), lineno=143, col_offset=17), Name('start_dir', Param(), lineno=143, col_offset=23), Name('pattern', Param(), lineno=143, col_offset=34), Name('top_level_dir', Param(), lineno=143, col_offset=54)], None, None, [Str('test*.py', lineno=143, col_offset=42), Name('None', Load(), lineno=143, col_offset=68)]), [Expr(Str("Find and return all test modules from the specified start\n        directory, recursing into subdirectories to find them. Only test files\n        that match the pattern will be loaded. (Using shell style pattern\n        matching.)\n\n        All test modules must be importable from the top level of the project.\n        If the start directory is not the top level directory then the top\n        level directory must be specified separately.\n\n        If a test package name (directory with '__init__.py') matches the\n        pattern then the package will be checked for a 'load_tests' function. If\n        this exists then it will be called with loader, tests, pattern.\n\n        If load_tests exists then discovery does  *not* recurse into the package,\n        load_tests is responsible for loading all tests in the package.\n\n        The pattern is deliberately not stored as a loader attribute so that\n        packages can continue discovery themselves. top_level_dir is stored so\n        load_tests does not need to pass this argument in to loader.discover().\n        ", lineno=163, col_offset=-1), lineno=163, col_offset=-1), Assign([Name('set_implicit_top', Store(), lineno=164, col_offset=8)], Name('False', Load(), lineno=164, col_offset=27), lineno=164, col_offset=8), If(BoolOp(And(), [Compare(Name('top_level_dir', Load(), lineno=165, col_offset=11), [Is()], [Name('None', Load(), lineno=165, col_offset=28)], lineno=165, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=165, col_offset=37), '_top_level_dir', Load(), lineno=165, col_offset=37), [IsNot()], [Name('None', Load(), lineno=165, col_offset=64)], lineno=165, col_offset=37)], lineno=165, col_offset=11), [Assign([Name('top_level_dir', Store(), lineno=167, col_offset=12)], Attribute(Name('self', Load(), lineno=167, col_offset=28), '_top_level_dir', Load(), lineno=167, col_offset=28), lineno=167, col_offset=12)], [If(Compare(Name('top_level_dir', Load(), lineno=168, col_offset=13), [Is()], [Name('None', Load(), lineno=168, col_offset=30)], lineno=168, col_offset=13), [Assign([Name('set_implicit_top', Store(), lineno=169, col_offset=12)], Name('True', Load(), lineno=169, col_offset=31), lineno=169, col_offset=12), Assign([Name('top_level_dir', Store(), lineno=170, col_offset=12)], Name('start_dir', Load(), lineno=170, col_offset=28), lineno=170, col_offset=12)], [], lineno=168, col_offset=13)], lineno=165, col_offset=8), Assign([Name('top_level_dir', Store(), lineno=172, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=172, col_offset=24), 'path', Load(), lineno=172, col_offset=24), 'abspath', Load(), lineno=172, col_offset=24), [Name('top_level_dir', Load(), lineno=172, col_offset=40)], [], None, None, lineno=172, col_offset=24), lineno=172, col_offset=8), If(UnaryOp(Not(), Compare(Name('top_level_dir', Load(), lineno=174, col_offset=15), [In()], [Attribute(Name('sys', Load(), lineno=174, col_offset=32), 'path', Load(), lineno=174, col_offset=32)], lineno=174, col_offset=15), lineno=174, col_offset=11), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=179, col_offset=12), 'path', Load(), lineno=179, col_offset=12), 'insert', Load(), lineno=179, col_offset=12), [Num(0, lineno=179, col_offset=28), Name('top_level_dir', Load(), lineno=179, col_offset=31)], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12)], [], lineno=174, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=180, col_offset=8), '_top_level_dir', Store(), lineno=180, col_offset=8)], Name('top_level_dir', Load(), lineno=180, col_offset=30), lineno=180, col_offset=8), Assign([Name('is_not_importable', Store(), lineno=182, col_offset=8)], Name('False', Load(), lineno=182, col_offset=28), lineno=182, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=183, col_offset=11), 'path', Load(), lineno=183, col_offset=11), 'isdir', Load(), lineno=183, col_offset=11), [Call(Attribute(Attribute(Name('os', Load(), lineno=183, col_offset=25), 'path', Load(), lineno=183, col_offset=25), 'abspath', Load(), lineno=183, col_offset=25), [Name('start_dir', Load(), lineno=183, col_offset=41)], [], None, None, lineno=183, col_offset=25)], [], None, None, lineno=183, col_offset=11), [Assign([Name('start_dir', Store(), lineno=184, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=184, col_offset=24), 'path', Load(), lineno=184, col_offset=24), 'abspath', Load(), lineno=184, col_offset=24), [Name('start_dir', Load(), lineno=184, col_offset=40)], [], None, None, lineno=184, col_offset=24), lineno=184, col_offset=12), If(Compare(Name('start_dir', Load(), lineno=185, col_offset=15), [NotEq()], [Name('top_level_dir', Load(), lineno=185, col_offset=28)], lineno=185, col_offset=15), [Assign([Name('is_not_importable', Store(), lineno=186, col_offset=16)], UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=186, col_offset=40), 'path', Load(), lineno=186, col_offset=40), 'isfile', Load(), lineno=186, col_offset=40), [Call(Attribute(Attribute(Name('os', Load(), lineno=186, col_offset=55), 'path', Load(), lineno=186, col_offset=55), 'join', Load(), lineno=186, col_offset=55), [Name('start_dir', Load(), lineno=186, col_offset=68), Str('__init__.py', lineno=186, col_offset=79)], [], None, None, lineno=186, col_offset=55)], [], None, None, lineno=186, col_offset=40), lineno=186, col_offset=36), lineno=186, col_offset=16)], [], lineno=185, col_offset=12)], [TryExcept([Expr(Call(Name('__import__', Load(), lineno=190, col_offset=16), [Name('start_dir', Load(), lineno=190, col_offset=27)], [], None, None, lineno=190, col_offset=16), lineno=190, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=191, col_offset=19), None, [Assign([Name('is_not_importable', Store(), lineno=192, col_offset=16)], Name('True', Load(), lineno=192, col_offset=36), lineno=192, col_offset=16)], lineno=191, col_offset=12)], [Assign([Name('the_module', Store(), lineno=194, col_offset=16)], Subscript(Attribute(Name('sys', Load(), lineno=194, col_offset=29), 'modules', Load(), lineno=194, col_offset=29), Index(Name('start_dir', Load(), lineno=194, col_offset=41)), Load(), lineno=194, col_offset=29), lineno=194, col_offset=16), Assign([Name('top_part', Store(), lineno=195, col_offset=16)], Subscript(Call(Attribute(Name('start_dir', Load(), lineno=195, col_offset=27), 'split', Load(), lineno=195, col_offset=27), [Str('.', lineno=195, col_offset=43)], [], None, None, lineno=195, col_offset=27), Index(Num(0, lineno=195, col_offset=48)), Load(), lineno=195, col_offset=27), lineno=195, col_offset=16), Assign([Name('start_dir', Store(), lineno=196, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=196, col_offset=28), 'path', Load(), lineno=196, col_offset=28), 'abspath', Load(), lineno=196, col_offset=28), [Call(Attribute(Attribute(Name('os', Load(), lineno=196, col_offset=44), 'path', Load(), lineno=196, col_offset=44), 'dirname', Load(), lineno=196, col_offset=44), [Attribute(Name('the_module', Load(), lineno=196, col_offset=61), '__file__', Load(), lineno=196, col_offset=61)], [], None, None, lineno=196, col_offset=44)], [], None, None, lineno=196, col_offset=28), lineno=196, col_offset=16), If(Name('set_implicit_top', Load(), lineno=197, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=198, col_offset=20), '_top_level_dir', Store(), lineno=198, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=198, col_offset=42), '_get_directory_containing_module', Load(), lineno=198, col_offset=42), [Name('top_part', Load(), lineno=198, col_offset=80)], [], None, None, lineno=198, col_offset=42), lineno=198, col_offset=20), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=199, col_offset=20), 'path', Load(), lineno=199, col_offset=20), 'remove', Load(), lineno=199, col_offset=20), [Name('top_level_dir', Load(), lineno=199, col_offset=36)], [], None, None, lineno=199, col_offset=20), lineno=199, col_offset=20)], [], lineno=197, col_offset=16)], lineno=189, col_offset=12)], lineno=183, col_offset=8), If(Name('is_not_importable', Load(), lineno=201, col_offset=11), [Raise(Call(Name('ImportError', Load(), lineno=202, col_offset=18), [BinOp(Str('Start directory is not importable: %r', lineno=202, col_offset=30), Mod(), Name('start_dir', Load(), lineno=202, col_offset=72), lineno=202, col_offset=30)], [], None, None, lineno=202, col_offset=18), None, None, lineno=202, col_offset=12)], [], lineno=201, col_offset=8), Assign([Name('tests', Store(), lineno=204, col_offset=8)], Call(Name('list', Load(), lineno=204, col_offset=16), [Call(Attribute(Name('self', Load(), lineno=204, col_offset=21), '_find_tests', Load(), lineno=204, col_offset=21), [Name('start_dir', Load(), lineno=204, col_offset=38), Name('pattern', Load(), lineno=204, col_offset=49)], [], None, None, lineno=204, col_offset=21)], [], None, None, lineno=204, col_offset=16), lineno=204, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=205, col_offset=15), 'suiteClass', Load(), lineno=205, col_offset=15), [Name('tests', Load(), lineno=205, col_offset=31)], [], None, None, lineno=205, col_offset=15), lineno=205, col_offset=8)], [], lineno=143, col_offset=4), FunctionDef('_get_directory_containing_module', arguments([Name('self', Param(), lineno=207, col_offset=41), Name('module_name', Param(), lineno=207, col_offset=47)], None, None, []), [Assign([Name('module', Store(), lineno=208, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=208, col_offset=17), 'modules', Load(), lineno=208, col_offset=17), Index(Name('module_name', Load(), lineno=208, col_offset=29)), Load(), lineno=208, col_offset=17), lineno=208, col_offset=8), Assign([Name('full_path', Store(), lineno=209, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=209, col_offset=20), 'path', Load(), lineno=209, col_offset=20), 'abspath', Load(), lineno=209, col_offset=20), [Attribute(Name('module', Load(), lineno=209, col_offset=36), '__file__', Load(), lineno=209, col_offset=36)], [], None, None, lineno=209, col_offset=20), lineno=209, col_offset=8), If(Call(Attribute(Call(Attribute(Call(Attribute(Attribute(Name('os', Load(), lineno=211, col_offset=11), 'path', Load(), lineno=211, col_offset=11), 'basename', Load(), lineno=211, col_offset=11), [Name('full_path', Load(), lineno=211, col_offset=28)], [], None, None, lineno=211, col_offset=11), 'lower', Load(), lineno=211, col_offset=11), [], [], None, None, lineno=211, col_offset=11), 'startswith', Load(), lineno=211, col_offset=11), [Str('__init__.py', lineno=211, col_offset=58)], [], None, None, lineno=211, col_offset=11), [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=212, col_offset=19), 'path', Load(), lineno=212, col_offset=19), 'dirname', Load(), lineno=212, col_offset=19), [Call(Attribute(Attribute(Name('os', Load(), lineno=212, col_offset=35), 'path', Load(), lineno=212, col_offset=35), 'dirname', Load(), lineno=212, col_offset=35), [Name('full_path', Load(), lineno=212, col_offset=51)], [], None, None, lineno=212, col_offset=35)], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=12)], [Return(Call(Attribute(Attribute(Name('os', Load(), lineno=217, col_offset=19), 'path', Load(), lineno=217, col_offset=19), 'dirname', Load(), lineno=217, col_offset=19), [Name('full_path', Load(), lineno=217, col_offset=35)], [], None, None, lineno=217, col_offset=19), lineno=217, col_offset=12)], lineno=211, col_offset=8)], [], lineno=207, col_offset=4), FunctionDef('_get_name_from_path', arguments([Name('self', Param(), lineno=219, col_offset=28), Name('path', Param(), lineno=219, col_offset=34)], None, None, []), [Assign([Name('path', Store(), lineno=220, col_offset=8)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=220, col_offset=15), 'path', Load(), lineno=220, col_offset=15), 'splitext', Load(), lineno=220, col_offset=15), [Call(Attribute(Attribute(Name('os', Load(), lineno=220, col_offset=32), 'path', Load(), lineno=220, col_offset=32), 'normpath', Load(), lineno=220, col_offset=32), [Name('path', Load(), lineno=220, col_offset=49)], [], None, None, lineno=220, col_offset=32)], [], None, None, lineno=220, col_offset=15), Index(Num(0, lineno=220, col_offset=56)), Load(), lineno=220, col_offset=15), lineno=220, col_offset=8), Assign([Name('_relpath', Store(), lineno=222, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=222, col_offset=19), 'path', Load(), lineno=222, col_offset=19), 'relpath', Load(), lineno=222, col_offset=19), [Name('path', Load(), lineno=222, col_offset=35), Attribute(Name('self', Load(), lineno=222, col_offset=41), '_top_level_dir', Load(), lineno=222, col_offset=41)], [], None, None, lineno=222, col_offset=19), lineno=222, col_offset=8), Assert(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=223, col_offset=19), 'path', Load(), lineno=223, col_offset=19), 'isabs', Load(), lineno=223, col_offset=19), [Name('_relpath', Load(), lineno=223, col_offset=33)], [], None, None, lineno=223, col_offset=19), lineno=223, col_offset=15), Str('Path must be within the project', lineno=223, col_offset=44), lineno=223, col_offset=8), Assert(UnaryOp(Not(), Call(Attribute(Name('_relpath', Load(), lineno=224, col_offset=19), 'startswith', Load(), lineno=224, col_offset=19), [Str('..', lineno=224, col_offset=39)], [], None, None, lineno=224, col_offset=19), lineno=224, col_offset=15), Str('Path must be within the project', lineno=224, col_offset=46), lineno=224, col_offset=8), Assign([Name('name', Store(), lineno=226, col_offset=8)], Call(Attribute(Name('_relpath', Load(), lineno=226, col_offset=15), 'replace', Load(), lineno=226, col_offset=15), [Attribute(Attribute(Name('os', Load(), lineno=226, col_offset=32), 'path', Load(), lineno=226, col_offset=32), 'sep', Load(), lineno=226, col_offset=32), Str('.', lineno=226, col_offset=45)], [], None, None, lineno=226, col_offset=15), lineno=226, col_offset=8), Return(Name('name', Load(), lineno=227, col_offset=15), lineno=227, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('_get_module_from_name', arguments([Name('self', Param(), lineno=229, col_offset=30), Name('name', Param(), lineno=229, col_offset=36)], None, None, []), [Expr(Call(Name('__import__', Load(), lineno=230, col_offset=8), [Name('name', Load(), lineno=230, col_offset=19)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8), Return(Subscript(Attribute(Name('sys', Load(), lineno=231, col_offset=15), 'modules', Load(), lineno=231, col_offset=15), Index(Name('name', Load(), lineno=231, col_offset=27)), Load(), lineno=231, col_offset=15), lineno=231, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('_match_path', arguments([Name('self', Param(), lineno=233, col_offset=20), Name('path', Param(), lineno=233, col_offset=26), Name('full_path', Param(), lineno=233, col_offset=32), Name('pattern', Param(), lineno=233, col_offset=43)], None, None, []), [Return(Call(Name('fnmatch', Load(), lineno=235, col_offset=15), [Name('path', Load(), lineno=235, col_offset=23), Name('pattern', Load(), lineno=235, col_offset=29)], [], None, None, lineno=235, col_offset=15), lineno=235, col_offset=8)], [], lineno=233, col_offset=4), FunctionDef('_find_tests', arguments([Name('self', Param(), lineno=237, col_offset=20), Name('start_dir', Param(), lineno=237, col_offset=26), Name('pattern', Param(), lineno=237, col_offset=37)], None, None, []), [Expr(Str('Used by discovery. Yields test suites it loads.', lineno=238, col_offset=8), lineno=238, col_offset=8), Assign([Name('paths', Store(), lineno=239, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=239, col_offset=16), 'listdir', Load(), lineno=239, col_offset=16), [Name('start_dir', Load(), lineno=239, col_offset=27)], [], None, None, lineno=239, col_offset=16), lineno=239, col_offset=8), For(Name('path', Store(), lineno=241, col_offset=12), Name('paths', Load(), lineno=241, col_offset=20), [Assign([Name('full_path', Store(), lineno=242, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=242, col_offset=24), 'path', Load(), lineno=242, col_offset=24), 'join', Load(), lineno=242, col_offset=24), [Name('start_dir', Load(), lineno=242, col_offset=37), Name('path', Load(), lineno=242, col_offset=48)], [], None, None, lineno=242, col_offset=24), lineno=242, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=243, col_offset=15), 'path', Load(), lineno=243, col_offset=15), 'isfile', Load(), lineno=243, col_offset=15), [Name('full_path', Load(), lineno=243, col_offset=30)], [], None, None, lineno=243, col_offset=15), [If(UnaryOp(Not(), Call(Attribute(Name('VALID_MODULE_NAME', Load(), lineno=244, col_offset=23), 'match', Load(), lineno=244, col_offset=23), [Name('path', Load(), lineno=244, col_offset=47)], [], None, None, lineno=244, col_offset=23), lineno=244, col_offset=19), [Continue( lineno=246, col_offset=20)], [], lineno=244, col_offset=16), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=247, col_offset=23), '_match_path', Load(), lineno=247, col_offset=23), [Name('path', Load(), lineno=247, col_offset=40), Name('full_path', Load(), lineno=247, col_offset=46), Name('pattern', Load(), lineno=247, col_offset=57)], [], None, None, lineno=247, col_offset=23), lineno=247, col_offset=19), [Continue( lineno=248, col_offset=20)], [], lineno=247, col_offset=16), Assign([Name('name', Store(), lineno=250, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=250, col_offset=23), '_get_name_from_path', Load(), lineno=250, col_offset=23), [Name('full_path', Load(), lineno=250, col_offset=48)], [], None, None, lineno=250, col_offset=23), lineno=250, col_offset=16), TryExcept([Assign([Name('module', Store(), lineno=252, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=252, col_offset=29), '_get_module_from_name', Load(), lineno=252, col_offset=29), [Name('name', Load(), lineno=252, col_offset=56)], [], None, None, lineno=252, col_offset=29), lineno=252, col_offset=20)], [ExceptHandler(None, None, [Expr(Yield(Call(Name('_make_failed_import_test', Load(), lineno=254, col_offset=26), [Name('name', Load(), lineno=254, col_offset=51), Attribute(Name('self', Load(), lineno=254, col_offset=57), 'suiteClass', Load(), lineno=254, col_offset=57)], [], None, None, lineno=254, col_offset=26), lineno=254, col_offset=20), lineno=254, col_offset=20)], lineno=253, col_offset=16)], [Assign([Name('mod_file', Store(), lineno=256, col_offset=20)], Call(Attribute(Attribute(Name('os', Load(), lineno=256, col_offset=31), 'path', Load(), lineno=256, col_offset=31), 'abspath', Load(), lineno=256, col_offset=31), [Call(Name('getattr', Load(), lineno=256, col_offset=47), [Name('module', Load(), lineno=256, col_offset=55), Str('__file__', lineno=256, col_offset=63), Name('full_path', Load(), lineno=256, col_offset=75)], [], None, None, lineno=256, col_offset=47)], [], None, None, lineno=256, col_offset=31), lineno=256, col_offset=20), Assign([Name('realpath', Store(), lineno=257, col_offset=20)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=257, col_offset=31), 'path', Load(), lineno=257, col_offset=31), 'splitext', Load(), lineno=257, col_offset=31), [Name('mod_file', Load(), lineno=257, col_offset=48)], [], None, None, lineno=257, col_offset=31), Index(Num(0, lineno=257, col_offset=58)), Load(), lineno=257, col_offset=31), lineno=257, col_offset=20), Assign([Name('fullpath_noext', Store(), lineno=258, col_offset=20)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=258, col_offset=37), 'path', Load(), lineno=258, col_offset=37), 'splitext', Load(), lineno=258, col_offset=37), [Name('full_path', Load(), lineno=258, col_offset=54)], [], None, None, lineno=258, col_offset=37), Index(Num(0, lineno=258, col_offset=65)), Load(), lineno=258, col_offset=37), lineno=258, col_offset=20), If(Compare(Call(Attribute(Name('realpath', Load(), lineno=259, col_offset=23), 'lower', Load(), lineno=259, col_offset=23), [], [], None, None, lineno=259, col_offset=23), [NotEq()], [Call(Attribute(Name('fullpath_noext', Load(), lineno=259, col_offset=43), 'lower', Load(), lineno=259, col_offset=43), [], [], None, None, lineno=259, col_offset=43)], lineno=259, col_offset=23), [Assign([Name('module_dir', Store(), lineno=260, col_offset=24)], Call(Attribute(Attribute(Name('os', Load(), lineno=260, col_offset=37), 'path', Load(), lineno=260, col_offset=37), 'dirname', Load(), lineno=260, col_offset=37), [Name('realpath', Load(), lineno=260, col_offset=53)], [], None, None, lineno=260, col_offset=37), lineno=260, col_offset=24), Assign([Name('mod_name', Store(), lineno=261, col_offset=24)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=261, col_offset=35), 'path', Load(), lineno=261, col_offset=35), 'splitext', Load(), lineno=261, col_offset=35), [Call(Attribute(Attribute(Name('os', Load(), lineno=261, col_offset=52), 'path', Load(), lineno=261, col_offset=52), 'basename', Load(), lineno=261, col_offset=52), [Name('full_path', Load(), lineno=261, col_offset=69)], [], None, None, lineno=261, col_offset=52)], [], None, None, lineno=261, col_offset=35), Index(Num(0, lineno=261, col_offset=81)), Load(), lineno=261, col_offset=35), lineno=261, col_offset=24), Assign([Name('expected_dir', Store(), lineno=262, col_offset=24)], Call(Attribute(Attribute(Name('os', Load(), lineno=262, col_offset=39), 'path', Load(), lineno=262, col_offset=39), 'dirname', Load(), lineno=262, col_offset=39), [Name('full_path', Load(), lineno=262, col_offset=55)], [], None, None, lineno=262, col_offset=39), lineno=262, col_offset=24), Assign([Name('msg', Store(), lineno=263, col_offset=24)], Str('%r module incorrectly imported from %r. Expected %r. Is this module globally installed?', lineno=263, col_offset=31), lineno=263, col_offset=24), Raise(Call(Name('ImportError', Load(), lineno=265, col_offset=30), [BinOp(Name('msg', Load(), lineno=265, col_offset=42), Mod(), Tuple([Name('mod_name', Load(), lineno=265, col_offset=49), Name('module_dir', Load(), lineno=265, col_offset=59), Name('expected_dir', Load(), lineno=265, col_offset=71)], Load(), lineno=265, col_offset=49), lineno=265, col_offset=42)], [], None, None, lineno=265, col_offset=30), None, None, lineno=265, col_offset=24)], [], lineno=259, col_offset=20), Expr(Yield(Call(Attribute(Name('self', Load(), lineno=266, col_offset=26), 'loadTestsFromModule', Load(), lineno=266, col_offset=26), [Name('module', Load(), lineno=266, col_offset=51)], [], None, None, lineno=266, col_offset=26), lineno=266, col_offset=20), lineno=266, col_offset=20)], lineno=251, col_offset=16)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=267, col_offset=17), 'path', Load(), lineno=267, col_offset=17), 'isdir', Load(), lineno=267, col_offset=17), [Name('full_path', Load(), lineno=267, col_offset=31)], [], None, None, lineno=267, col_offset=17), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=268, col_offset=23), 'path', Load(), lineno=268, col_offset=23), 'isfile', Load(), lineno=268, col_offset=23), [Call(Attribute(Attribute(Name('os', Load(), lineno=268, col_offset=38), 'path', Load(), lineno=268, col_offset=38), 'join', Load(), lineno=268, col_offset=38), [Name('full_path', Load(), lineno=268, col_offset=51), Str('__init__.py', lineno=268, col_offset=62)], [], None, None, lineno=268, col_offset=38)], [], None, None, lineno=268, col_offset=23), lineno=268, col_offset=19), [Continue( lineno=269, col_offset=20)], [], lineno=268, col_offset=16), Assign([Name('load_tests', Store(), lineno=271, col_offset=16)], Name('None', Load(), lineno=271, col_offset=29), lineno=271, col_offset=16), Assign([Name('tests', Store(), lineno=272, col_offset=16)], Name('None', Load(), lineno=272, col_offset=24), lineno=272, col_offset=16), If(Call(Name('fnmatch', Load(), lineno=273, col_offset=19), [Name('path', Load(), lineno=273, col_offset=27), Name('pattern', Load(), lineno=273, col_offset=33)], [], None, None, lineno=273, col_offset=19), [Assign([Name('name', Store(), lineno=275, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=275, col_offset=27), '_get_name_from_path', Load(), lineno=275, col_offset=27), [Name('full_path', Load(), lineno=275, col_offset=52)], [], None, None, lineno=275, col_offset=27), lineno=275, col_offset=20), Assign([Name('package', Store(), lineno=276, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=276, col_offset=30), '_get_module_from_name', Load(), lineno=276, col_offset=30), [Name('name', Load(), lineno=276, col_offset=57)], [], None, None, lineno=276, col_offset=30), lineno=276, col_offset=20), Assign([Name('load_tests', Store(), lineno=277, col_offset=20)], Call(Name('getattr', Load(), lineno=277, col_offset=33), [Name('package', Load(), lineno=277, col_offset=41), Str('load_tests', lineno=277, col_offset=50), Name('None', Load(), lineno=277, col_offset=64)], [], None, None, lineno=277, col_offset=33), lineno=277, col_offset=20), Assign([Name('tests', Store(), lineno=278, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=278, col_offset=28), 'loadTestsFromModule', Load(), lineno=278, col_offset=28), [Name('package', Load(), lineno=278, col_offset=53)], [keyword('use_load_tests', Name('False', Load(), lineno=278, col_offset=77))], None, None, lineno=278, col_offset=28), lineno=278, col_offset=20)], [], lineno=273, col_offset=16), If(Compare(Name('load_tests', Load(), lineno=280, col_offset=19), [Is()], [Name('None', Load(), lineno=280, col_offset=33)], lineno=280, col_offset=19), [If(Compare(Name('tests', Load(), lineno=281, col_offset=23), [IsNot()], [Name('None', Load(), lineno=281, col_offset=36)], lineno=281, col_offset=23), [Expr(Yield(Name('tests', Load(), lineno=283, col_offset=30), lineno=283, col_offset=24), lineno=283, col_offset=24)], [], lineno=281, col_offset=20), For(Name('test', Store(), lineno=285, col_offset=24), Call(Attribute(Name('self', Load(), lineno=285, col_offset=32), '_find_tests', Load(), lineno=285, col_offset=32), [Name('full_path', Load(), lineno=285, col_offset=49), Name('pattern', Load(), lineno=285, col_offset=60)], [], None, None, lineno=285, col_offset=32), [Expr(Yield(Name('test', Load(), lineno=286, col_offset=30), lineno=286, col_offset=24), lineno=286, col_offset=24)], [], lineno=285, col_offset=20)], [TryExcept([Expr(Yield(Call(Name('load_tests', Load(), lineno=289, col_offset=30), [Name('self', Load(), lineno=289, col_offset=41), Name('tests', Load(), lineno=289, col_offset=47), Name('pattern', Load(), lineno=289, col_offset=54)], [], None, None, lineno=289, col_offset=30), lineno=289, col_offset=24), lineno=289, col_offset=24)], [ExceptHandler(Name('Exception', Load(), lineno=290, col_offset=27), Name('e', Store(), lineno=290, col_offset=38), [Expr(Yield(Call(Name('_make_failed_load_tests', Load(), lineno=291, col_offset=30), [Attribute(Name('package', Load(), lineno=291, col_offset=54), '__name__', Load(), lineno=291, col_offset=54), Name('e', Load(), lineno=291, col_offset=72), Attribute(Name('self', Load(), lineno=292, col_offset=54), 'suiteClass', Load(), lineno=292, col_offset=54)], [], None, None, lineno=291, col_offset=30), lineno=291, col_offset=24), lineno=291, col_offset=24)], lineno=290, col_offset=20)], [], lineno=288, col_offset=20)], lineno=280, col_offset=16)], [], lineno=267, col_offset=17)], lineno=243, col_offset=12)], [], lineno=241, col_offset=8)], [], lineno=237, col_offset=4)], [], lineno=38, col_offset=0), Assign([Name('defaultTestLoader', Store(), lineno=294, col_offset=0)], Call(Name('TestLoader', Load(), lineno=294, col_offset=20), [], [], None, None, lineno=294, col_offset=20), lineno=294, col_offset=0), FunctionDef('_makeLoader', arguments([Name('prefix', Param(), lineno=297, col_offset=16), Name('sortUsing', Param(), lineno=297, col_offset=24), Name('suiteClass', Param(), lineno=297, col_offset=35)], None, None, [Name('None', Load(), lineno=297, col_offset=46)]), [Assign([Name('loader', Store(), lineno=298, col_offset=4)], Call(Name('TestLoader', Load(), lineno=298, col_offset=13), [], [], None, None, lineno=298, col_offset=13), lineno=298, col_offset=4), Assign([Attribute(Name('loader', Load(), lineno=299, col_offset=4), 'sortTestMethodsUsing', Store(), lineno=299, col_offset=4)], Name('sortUsing', Load(), lineno=299, col_offset=34), lineno=299, col_offset=4), Assign([Attribute(Name('loader', Load(), lineno=300, col_offset=4), 'testMethodPrefix', Store(), lineno=300, col_offset=4)], Name('prefix', Load(), lineno=300, col_offset=30), lineno=300, col_offset=4), If(Name('suiteClass', Load(), lineno=301, col_offset=7), [Assign([Attribute(Name('loader', Load(), lineno=302, col_offset=8), 'suiteClass', Store(), lineno=302, col_offset=8)], Name('suiteClass', Load(), lineno=302, col_offset=28), lineno=302, col_offset=8)], [], lineno=301, col_offset=4), Return(Name('loader', Load(), lineno=303, col_offset=11), lineno=303, col_offset=4)], [], lineno=297, col_offset=0), FunctionDef('getTestCaseNames', arguments([Name('testCaseClass', Param(), lineno=305, col_offset=21), Name('prefix', Param(), lineno=305, col_offset=36), Name('sortUsing', Param(), lineno=305, col_offset=44)], None, None, [Name('cmp', Load(), lineno=305, col_offset=54)]), [Return(Call(Attribute(Call(Name('_makeLoader', Load(), lineno=306, col_offset=11), [Name('prefix', Load(), lineno=306, col_offset=23), Name('sortUsing', Load(), lineno=306, col_offset=31)], [], None, None, lineno=306, col_offset=11), 'getTestCaseNames', Load(), lineno=306, col_offset=11), [Name('testCaseClass', Load(), lineno=306, col_offset=59)], [], None, None, lineno=306, col_offset=11), lineno=306, col_offset=4)], [], lineno=305, col_offset=0), FunctionDef('makeSuite', arguments([Name('testCaseClass', Param(), lineno=308, col_offset=14), Name('prefix', Param(), lineno=308, col_offset=29), Name('sortUsing', Param(), lineno=308, col_offset=44), Name('suiteClass', Param(), lineno=309, col_offset=14)], None, None, [Str('test', lineno=308, col_offset=36), Name('cmp', Load(), lineno=308, col_offset=54), Attribute(Name('suite', Load(), lineno=309, col_offset=25), 'TestSuite', Load(), lineno=309, col_offset=25)]), [Return(Call(Attribute(Call(Name('_makeLoader', Load(), lineno=310, col_offset=11), [Name('prefix', Load(), lineno=310, col_offset=23), Name('sortUsing', Load(), lineno=310, col_offset=31), Name('suiteClass', Load(), lineno=310, col_offset=42)], [], None, None, lineno=310, col_offset=11), 'loadTestsFromTestCase', Load(), lineno=310, col_offset=11), [Name('testCaseClass', Load(), lineno=310, col_offset=76)], [], None, None, lineno=310, col_offset=11), lineno=310, col_offset=4)], [], lineno=308, col_offset=0), FunctionDef('findTestCases', arguments([Name('module', Param(), lineno=312, col_offset=18), Name('prefix', Param(), lineno=312, col_offset=26), Name('sortUsing', Param(), lineno=312, col_offset=41), Name('suiteClass', Param(), lineno=313, col_offset=18)], None, None, [Str('test', lineno=312, col_offset=33), Name('cmp', Load(), lineno=312, col_offset=51), Attribute(Name('suite', Load(), lineno=313, col_offset=29), 'TestSuite', Load(), lineno=313, col_offset=29)]), [Return(Call(Attribute(Call(Name('_makeLoader', Load(), lineno=314, col_offset=11), [Name('prefix', Load(), lineno=314, col_offset=23), Name('sortUsing', Load(), lineno=314, col_offset=31), Name('suiteClass', Load(), lineno=314, col_offset=42)], [], None, None, lineno=314, col_offset=11), 'loadTestsFromModule', Load(), lineno=314, col_offset=11), [Name('module', Load(), lineno=314, col_offset=74)], [], None, None, lineno=314, col_offset=11), lineno=314, col_offset=4)], [], lineno=312, col_offset=0)])
