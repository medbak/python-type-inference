Module([Expr(Str('RFC 3548: Base16, Base32, Base64 Data Encodings', lineno=3, col_offset=0), lineno=3, col_offset=0), Import([alias('re', None)], lineno=8, col_offset=0), Import([alias('struct', None)], lineno=9, col_offset=0), Import([alias('binascii', None)], lineno=10, col_offset=0), Assign([Name('__all__', Store(), lineno=13, col_offset=0)], List([Str('encode', lineno=15, col_offset=4), Str('decode', lineno=15, col_offset=14), Str('encodestring', lineno=15, col_offset=24), Str('decodestring', lineno=15, col_offset=40), Str('b64encode', lineno=17, col_offset=4), Str('b64decode', lineno=17, col_offset=17), Str('b32encode', lineno=17, col_offset=30), Str('b32decode', lineno=17, col_offset=43), Str('b16encode', lineno=18, col_offset=4), Str('b16decode', lineno=18, col_offset=17), Str('standard_b64encode', lineno=20, col_offset=4), Str('standard_b64decode', lineno=20, col_offset=26), Str('urlsafe_b64encode', lineno=25, col_offset=4), Str('urlsafe_b64decode', lineno=25, col_offset=25)], Load(), lineno=13, col_offset=10), lineno=13, col_offset=0), Assign([Name('_translation', Store(), lineno=28, col_offset=0)], ListComp(Call(Name('chr', Load(), lineno=28, col_offset=16), [Name('_x', Load(), lineno=28, col_offset=20)], [], None, None, lineno=28, col_offset=16), [comprehension(Name('_x', Store(), lineno=28, col_offset=28), Call(Name('range', Load(), lineno=28, col_offset=34), [Num(256, lineno=28, col_offset=40)], [], None, None, lineno=28, col_offset=34), [])], lineno=28, col_offset=16), lineno=28, col_offset=0), Assign([Name('EMPTYSTRING', Store(), lineno=29, col_offset=0)], Str('', lineno=29, col_offset=14), lineno=29, col_offset=0), FunctionDef('_translate', arguments([Name('s', Param(), lineno=32, col_offset=15), Name('altchars', Param(), lineno=32, col_offset=18)], None, None, []), [Assign([Name('translation', Store(), lineno=33, col_offset=4)], Subscript(Name('_translation', Load(), lineno=33, col_offset=18), Slice(None, None, None), Load(), lineno=33, col_offset=18), lineno=33, col_offset=4), For(Tuple([Name('k', Store(), lineno=34, col_offset=8), Name('v', Store(), lineno=34, col_offset=11)], Store(), lineno=34, col_offset=8), Call(Attribute(Name('altchars', Load(), lineno=34, col_offset=16), 'items', Load(), lineno=34, col_offset=16), [], [], None, None, lineno=34, col_offset=16), [Assign([Subscript(Name('translation', Load(), lineno=35, col_offset=8), Index(Call(Name('ord', Load(), lineno=35, col_offset=20), [Name('k', Load(), lineno=35, col_offset=24)], [], None, None, lineno=35, col_offset=20)), Store(), lineno=35, col_offset=8)], Name('v', Load(), lineno=35, col_offset=30), lineno=35, col_offset=8)], [], lineno=34, col_offset=4), Return(Call(Attribute(Name('s', Load(), lineno=36, col_offset=11), 'translate', Load(), lineno=36, col_offset=11), [Call(Attribute(Str('', lineno=36, col_offset=23), 'join', Load(), lineno=36, col_offset=23), [Name('translation', Load(), lineno=36, col_offset=31)], [], None, None, lineno=36, col_offset=23)], [], None, None, lineno=36, col_offset=11), lineno=36, col_offset=4)], [], lineno=32, col_offset=0), FunctionDef('b64encode', arguments([Name('s', Param(), lineno=42, col_offset=14), Name('altchars', Param(), lineno=42, col_offset=17)], None, None, [Name('None', Load(), lineno=42, col_offset=26)]), [Expr(Str("Encode a string using Base64.\n\n    s is the string to encode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n\n    The encoded string is returned.\n    ", lineno=51, col_offset=-1), lineno=51, col_offset=-1), Assign([Name('encoded', Store(), lineno=53, col_offset=4)], Subscript(Call(Attribute(Name('binascii', Load(), lineno=53, col_offset=14), 'b2a_base64', Load(), lineno=53, col_offset=14), [Name('s', Load(), lineno=53, col_offset=34)], [], None, None, lineno=53, col_offset=14), Slice(None, Num(-1, lineno=53, col_offset=39), None), Load(), lineno=53, col_offset=14), lineno=53, col_offset=4), If(Compare(Name('altchars', Load(), lineno=54, col_offset=7), [IsNot()], [Name('None', Load(), lineno=54, col_offset=23)], lineno=54, col_offset=7), [Return(Call(Name('_translate', Load(), lineno=55, col_offset=15), [Name('encoded', Load(), lineno=55, col_offset=26), Dict([Str('+', lineno=55, col_offset=36), Str('/', lineno=55, col_offset=54)], [Subscript(Name('altchars', Load(), lineno=55, col_offset=41), Index(Num(0, lineno=55, col_offset=50)), Load(), lineno=55, col_offset=41), Subscript(Name('altchars', Load(), lineno=55, col_offset=59), Index(Num(1, lineno=55, col_offset=68)), Load(), lineno=55, col_offset=59)], lineno=55, col_offset=35)], [], None, None, lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=54, col_offset=4), Return(Name('encoded', Load(), lineno=56, col_offset=11), lineno=56, col_offset=4)], [], lineno=42, col_offset=0), FunctionDef('b64decode', arguments([Name('s', Param(), lineno=59, col_offset=14), Name('altchars', Param(), lineno=59, col_offset=17)], None, None, [Name('None', Load(), lineno=59, col_offset=26)]), [Expr(Str("Decode a Base64 encoded string.\n\n    s is the string to decode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies the\n    alternative alphabet used instead of the '+' and '/' characters.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    ", lineno=69, col_offset=-1), lineno=69, col_offset=-1), If(Compare(Name('altchars', Load(), lineno=70, col_offset=7), [IsNot()], [Name('None', Load(), lineno=70, col_offset=23)], lineno=70, col_offset=7), [Assign([Name('s', Store(), lineno=71, col_offset=8)], Call(Name('_translate', Load(), lineno=71, col_offset=12), [Name('s', Load(), lineno=71, col_offset=23), Dict([Subscript(Name('altchars', Load(), lineno=71, col_offset=27), Index(Num(0, lineno=71, col_offset=36)), Load(), lineno=71, col_offset=27), Subscript(Name('altchars', Load(), lineno=71, col_offset=45), Index(Num(1, lineno=71, col_offset=54)), Load(), lineno=71, col_offset=45)], [Str('+', lineno=71, col_offset=40), Str('/', lineno=71, col_offset=58)], lineno=71, col_offset=26)], [], None, None, lineno=71, col_offset=12), lineno=71, col_offset=8)], [], lineno=70, col_offset=4), TryExcept([Return(Call(Attribute(Name('binascii', Load(), lineno=73, col_offset=15), 'a2b_base64', Load(), lineno=73, col_offset=15), [Name('s', Load(), lineno=73, col_offset=35)], [], None, None, lineno=73, col_offset=15), lineno=73, col_offset=8)], [ExceptHandler(Attribute(Name('binascii', Load(), lineno=74, col_offset=11), 'Error', Load(), lineno=74, col_offset=11), Name('msg', Store(), lineno=74, col_offset=27), [Raise(Call(Name('TypeError', Load(), lineno=76, col_offset=14), [Name('msg', Load(), lineno=76, col_offset=24)], [], None, None, lineno=76, col_offset=14), None, None, lineno=76, col_offset=8)], lineno=74, col_offset=4)], [], lineno=72, col_offset=4)], [], lineno=59, col_offset=0), FunctionDef('standard_b64encode', arguments([Name('s', Param(), lineno=79, col_offset=23)], None, None, []), [Expr(Str('Encode a string using the standard Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.\n    ', lineno=83, col_offset=-1), lineno=83, col_offset=-1), Return(Call(Name('b64encode', Load(), lineno=84, col_offset=11), [Name('s', Load(), lineno=84, col_offset=21)], [], None, None, lineno=84, col_offset=11), lineno=84, col_offset=4)], [], lineno=79, col_offset=0), FunctionDef('standard_b64decode', arguments([Name('s', Param(), lineno=86, col_offset=23)], None, None, []), [Expr(Str('Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n    ', lineno=92, col_offset=-1), lineno=92, col_offset=-1), Return(Call(Name('b64decode', Load(), lineno=93, col_offset=11), [Name('s', Load(), lineno=93, col_offset=21)], [], None, None, lineno=93, col_offset=11), lineno=93, col_offset=4)], [], lineno=86, col_offset=0), FunctionDef('urlsafe_b64encode', arguments([Name('s', Param(), lineno=95, col_offset=22)], None, None, []), [Expr(Str("Encode a string using a url-safe Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.  The alphabet\n    uses '-' instead of '+' and '_' instead of '/'.\n    ", lineno=100, col_offset=-1), lineno=100, col_offset=-1), Return(Call(Name('b64encode', Load(), lineno=101, col_offset=11), [Name('s', Load(), lineno=101, col_offset=21), Str('-_', lineno=101, col_offset=24)], [], None, None, lineno=101, col_offset=11), lineno=101, col_offset=4)], [], lineno=95, col_offset=0), FunctionDef('urlsafe_b64decode', arguments([Name('s', Param(), lineno=103, col_offset=22)], None, None, []), [Expr(Str("Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    ", lineno=111, col_offset=-1), lineno=111, col_offset=-1), Return(Call(Name('b64decode', Load(), lineno=112, col_offset=11), [Name('s', Load(), lineno=112, col_offset=21), Str('-_', lineno=112, col_offset=24)], [], None, None, lineno=112, col_offset=11), lineno=112, col_offset=4)], [], lineno=103, col_offset=0), Assign([Name('_b32alphabet', Store(), lineno=117, col_offset=0)], Dict([Num(0, lineno=118, col_offset=4), Num(9, lineno=118, col_offset=13), Num(18, lineno=118, col_offset=21), Num(27, lineno=118, col_offset=30), Num(1, lineno=119, col_offset=4), Num(10, lineno=119, col_offset=12), Num(19, lineno=119, col_offset=21), Num(28, lineno=119, col_offset=30), Num(2, lineno=120, col_offset=4), Num(11, lineno=120, col_offset=12), Num(20, lineno=120, col_offset=21), Num(29, lineno=120, col_offset=30), Num(3, lineno=121, col_offset=4), Num(12, lineno=121, col_offset=12), Num(21, lineno=121, col_offset=21), Num(30, lineno=121, col_offset=30), Num(4, lineno=122, col_offset=4), Num(13, lineno=122, col_offset=12), Num(22, lineno=122, col_offset=21), Num(31, lineno=122, col_offset=30), Num(5, lineno=123, col_offset=4), Num(14, lineno=123, col_offset=12), Num(23, lineno=123, col_offset=21), Num(6, lineno=124, col_offset=4), Num(15, lineno=124, col_offset=12), Num(24, lineno=124, col_offset=21), Num(7, lineno=125, col_offset=4), Num(16, lineno=125, col_offset=12), Num(25, lineno=125, col_offset=21), Num(8, lineno=126, col_offset=4), Num(17, lineno=126, col_offset=12), Num(26, lineno=126, col_offset=21)], [Str('A', lineno=118, col_offset=7), Str('J', lineno=118, col_offset=16), Str('S', lineno=118, col_offset=25), Str('3', lineno=118, col_offset=34), Str('B', lineno=119, col_offset=7), Str('K', lineno=119, col_offset=16), Str('T', lineno=119, col_offset=25), Str('4', lineno=119, col_offset=34), Str('C', lineno=120, col_offset=7), Str('L', lineno=120, col_offset=16), Str('U', lineno=120, col_offset=25), Str('5', lineno=120, col_offset=34), Str('D', lineno=121, col_offset=7), Str('M', lineno=121, col_offset=16), Str('V', lineno=121, col_offset=25), Str('6', lineno=121, col_offset=34), Str('E', lineno=122, col_offset=7), Str('N', lineno=122, col_offset=16), Str('W', lineno=122, col_offset=25), Str('7', lineno=122, col_offset=34), Str('F', lineno=123, col_offset=7), Str('O', lineno=123, col_offset=16), Str('X', lineno=123, col_offset=25), Str('G', lineno=124, col_offset=7), Str('P', lineno=124, col_offset=16), Str('Y', lineno=124, col_offset=25), Str('H', lineno=125, col_offset=7), Str('Q', lineno=125, col_offset=16), Str('Z', lineno=125, col_offset=25), Str('I', lineno=126, col_offset=7), Str('R', lineno=126, col_offset=16), Str('2', lineno=126, col_offset=25)], lineno=117, col_offset=15), lineno=117, col_offset=0), Assign([Name('_b32tab', Store(), lineno=129, col_offset=0)], Call(Attribute(Name('_b32alphabet', Load(), lineno=129, col_offset=10), 'items', Load(), lineno=129, col_offset=10), [], [], None, None, lineno=129, col_offset=10), lineno=129, col_offset=0), Expr(Call(Attribute(Name('_b32tab', Load(), lineno=130, col_offset=0), 'sort', Load(), lineno=130, col_offset=0), [], [], None, None, lineno=130, col_offset=0), lineno=130, col_offset=0), Assign([Name('_b32tab', Store(), lineno=131, col_offset=0)], ListComp(Name('v', Load(), lineno=131, col_offset=11), [comprehension(Tuple([Name('k', Store(), lineno=131, col_offset=17), Name('v', Store(), lineno=131, col_offset=20)], Store(), lineno=131, col_offset=17), Name('_b32tab', Load(), lineno=131, col_offset=25), [])], lineno=131, col_offset=11), lineno=131, col_offset=0), Assign([Name('_b32rev', Store(), lineno=132, col_offset=0)], Call(Name('dict', Load(), lineno=132, col_offset=10), [ListComp(Tuple([Name('v', Load(), lineno=132, col_offset=17), Call(Name('long', Load(), lineno=132, col_offset=20), [Name('k', Load(), lineno=132, col_offset=25)], [], None, None, lineno=132, col_offset=20)], Load(), lineno=132, col_offset=17), [comprehension(Tuple([Name('k', Store(), lineno=132, col_offset=33), Name('v', Store(), lineno=132, col_offset=36)], Store(), lineno=132, col_offset=33), Call(Attribute(Name('_b32alphabet', Load(), lineno=132, col_offset=41), 'items', Load(), lineno=132, col_offset=41), [], [], None, None, lineno=132, col_offset=41), [])], lineno=132, col_offset=16)], [], None, None, lineno=132, col_offset=10), lineno=132, col_offset=0), FunctionDef('b32encode', arguments([Name('s', Param(), lineno=135, col_offset=14)], None, None, []), [Expr(Str('Encode a string using Base32.\n\n    s is the string to encode.  The encoded string is returned.\n    ', lineno=139, col_offset=-1), lineno=139, col_offset=-1), Assign([Name('parts', Store(), lineno=140, col_offset=4)], List([], Load(), lineno=140, col_offset=12), lineno=140, col_offset=4), Assign([Tuple([Name('quanta', Store(), lineno=141, col_offset=4), Name('leftover', Store(), lineno=141, col_offset=12)], Store(), lineno=141, col_offset=4)], Call(Name('divmod', Load(), lineno=141, col_offset=23), [Call(Name('len', Load(), lineno=141, col_offset=30), [Name('s', Load(), lineno=141, col_offset=34)], [], None, None, lineno=141, col_offset=30), Num(5, lineno=141, col_offset=38)], [], None, None, lineno=141, col_offset=23), lineno=141, col_offset=4), If(Name('leftover', Load(), lineno=143, col_offset=7), [AugAssign(Name('s', Store(), lineno=144, col_offset=8), Add(), BinOp(Str('\x00', lineno=144, col_offset=14), Mult(), BinOp(Num(5, lineno=144, col_offset=22), Sub(), Name('leftover', Load(), lineno=144, col_offset=26), lineno=144, col_offset=22), lineno=144, col_offset=14), lineno=144, col_offset=8), AugAssign(Name('quanta', Store(), lineno=145, col_offset=8), Add(), Num(1, lineno=145, col_offset=18), lineno=145, col_offset=8)], [], lineno=143, col_offset=4), For(Name('i', Store(), lineno=146, col_offset=8), Call(Name('range', Load(), lineno=146, col_offset=13), [Name('quanta', Load(), lineno=146, col_offset=19)], [], None, None, lineno=146, col_offset=13), [Assign([Tuple([Name('c1', Store(), lineno=152, col_offset=8), Name('c2', Store(), lineno=152, col_offset=12), Name('c3', Store(), lineno=152, col_offset=16)], Store(), lineno=152, col_offset=8)], Call(Attribute(Name('struct', Load(), lineno=152, col_offset=21), 'unpack', Load(), lineno=152, col_offset=21), [Str('!HHB', lineno=152, col_offset=35), Subscript(Name('s', Load(), lineno=152, col_offset=43), Slice(BinOp(Name('i', Load(), lineno=152, col_offset=45), Mult(), Num(5, lineno=152, col_offset=47), lineno=152, col_offset=45), BinOp(BinOp(Name('i', Load(), lineno=152, col_offset=50), Add(), Num(1, lineno=152, col_offset=52), lineno=152, col_offset=50), Mult(), Num(5, lineno=152, col_offset=55), lineno=152, col_offset=49), None), Load(), lineno=152, col_offset=43)], [], None, None, lineno=152, col_offset=21), lineno=152, col_offset=8), AugAssign(Name('c2', Store(), lineno=153, col_offset=8), Add(), BinOp(BinOp(Name('c1', Load(), lineno=153, col_offset=15), BitAnd(), Num(1, lineno=153, col_offset=20), lineno=153, col_offset=15), LShift(), Num(16, lineno=153, col_offset=26), lineno=153, col_offset=14), lineno=153, col_offset=8), AugAssign(Name('c3', Store(), lineno=154, col_offset=8), Add(), BinOp(BinOp(Name('c2', Load(), lineno=154, col_offset=15), BitAnd(), Num(3, lineno=154, col_offset=20), lineno=154, col_offset=15), LShift(), Num(8, lineno=154, col_offset=26), lineno=154, col_offset=14), lineno=154, col_offset=8), Expr(Call(Attribute(Name('parts', Load(), lineno=155, col_offset=8), 'extend', Load(), lineno=155, col_offset=8), [List([Subscript(Name('_b32tab', Load(), lineno=155, col_offset=22), Index(BinOp(Name('c1', Load(), lineno=155, col_offset=30), RShift(), Num(11, lineno=155, col_offset=36), lineno=155, col_offset=30)), Load(), lineno=155, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=156, col_offset=22), Index(BinOp(BinOp(Name('c1', Load(), lineno=156, col_offset=31), RShift(), Num(6, lineno=156, col_offset=37), lineno=156, col_offset=31), BitAnd(), Num(31, lineno=156, col_offset=42), lineno=156, col_offset=30)), Load(), lineno=156, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=157, col_offset=22), Index(BinOp(BinOp(Name('c1', Load(), lineno=157, col_offset=31), RShift(), Num(1, lineno=157, col_offset=37), lineno=157, col_offset=31), BitAnd(), Num(31, lineno=157, col_offset=42), lineno=157, col_offset=30)), Load(), lineno=157, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=158, col_offset=22), Index(BinOp(Name('c2', Load(), lineno=158, col_offset=30), RShift(), Num(12, lineno=158, col_offset=36), lineno=158, col_offset=30)), Load(), lineno=158, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=159, col_offset=22), Index(BinOp(BinOp(Name('c2', Load(), lineno=159, col_offset=31), RShift(), Num(7, lineno=159, col_offset=37), lineno=159, col_offset=31), BitAnd(), Num(31, lineno=159, col_offset=42), lineno=159, col_offset=30)), Load(), lineno=159, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=160, col_offset=22), Index(BinOp(BinOp(Name('c2', Load(), lineno=160, col_offset=31), RShift(), Num(2, lineno=160, col_offset=37), lineno=160, col_offset=31), BitAnd(), Num(31, lineno=160, col_offset=42), lineno=160, col_offset=30)), Load(), lineno=160, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=161, col_offset=22), Index(BinOp(Name('c3', Load(), lineno=161, col_offset=30), RShift(), Num(5, lineno=161, col_offset=36), lineno=161, col_offset=30)), Load(), lineno=161, col_offset=22), Subscript(Name('_b32tab', Load(), lineno=162, col_offset=22), Index(BinOp(Name('c3', Load(), lineno=162, col_offset=30), BitAnd(), Num(31, lineno=162, col_offset=35), lineno=162, col_offset=30)), Load(), lineno=162, col_offset=22)], Load(), lineno=155, col_offset=21)], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8)], [], lineno=146, col_offset=4), Assign([Name('encoded', Store(), lineno=164, col_offset=4)], Call(Attribute(Name('EMPTYSTRING', Load(), lineno=164, col_offset=14), 'join', Load(), lineno=164, col_offset=14), [Name('parts', Load(), lineno=164, col_offset=31)], [], None, None, lineno=164, col_offset=14), lineno=164, col_offset=4), If(Compare(Name('leftover', Load(), lineno=166, col_offset=7), [Eq()], [Num(1, lineno=166, col_offset=19)], lineno=166, col_offset=7), [Return(BinOp(Subscript(Name('encoded', Load(), lineno=167, col_offset=15), Slice(None, Num(-6, lineno=167, col_offset=25), None), Load(), lineno=167, col_offset=15), Add(), Str('======', lineno=167, col_offset=30), lineno=167, col_offset=15), lineno=167, col_offset=8)], [If(Compare(Name('leftover', Load(), lineno=168, col_offset=9), [Eq()], [Num(2, lineno=168, col_offset=21)], lineno=168, col_offset=9), [Return(BinOp(Subscript(Name('encoded', Load(), lineno=169, col_offset=15), Slice(None, Num(-4, lineno=169, col_offset=25), None), Load(), lineno=169, col_offset=15), Add(), Str('====', lineno=169, col_offset=30), lineno=169, col_offset=15), lineno=169, col_offset=8)], [If(Compare(Name('leftover', Load(), lineno=170, col_offset=9), [Eq()], [Num(3, lineno=170, col_offset=21)], lineno=170, col_offset=9), [Return(BinOp(Subscript(Name('encoded', Load(), lineno=171, col_offset=15), Slice(None, Num(-3, lineno=171, col_offset=25), None), Load(), lineno=171, col_offset=15), Add(), Str('===', lineno=171, col_offset=30), lineno=171, col_offset=15), lineno=171, col_offset=8)], [If(Compare(Name('leftover', Load(), lineno=172, col_offset=9), [Eq()], [Num(4, lineno=172, col_offset=21)], lineno=172, col_offset=9), [Return(BinOp(Subscript(Name('encoded', Load(), lineno=173, col_offset=15), Slice(None, Num(-1, lineno=173, col_offset=25), None), Load(), lineno=173, col_offset=15), Add(), Str('=', lineno=173, col_offset=30), lineno=173, col_offset=15), lineno=173, col_offset=8)], [], lineno=172, col_offset=9)], lineno=170, col_offset=9)], lineno=168, col_offset=9)], lineno=166, col_offset=4), Return(Name('encoded', Load(), lineno=174, col_offset=11), lineno=174, col_offset=4)], [], lineno=135, col_offset=0), FunctionDef('b32decode', arguments([Name('s', Param(), lineno=177, col_offset=14), Name('casefold', Param(), lineno=177, col_offset=17), Name('map01', Param(), lineno=177, col_offset=33)], None, None, [Name('False', Load(), lineno=177, col_offset=26), Name('None', Load(), lineno=177, col_offset=39)]), [Expr(Str('Decode a Base32 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O\n    (oh), and for optional mapping of the digit 1 (one) to either the letter I\n    (eye) or letter L (el).  The optional argument map01 when not None,\n    specifies which letter the digit 1 should be mapped to (when map01 is not\n    None, the digit 0 is always mapped to the letter O).  For security\n    purposes the default is None, so that 0 and 1 are not allowed in the\n    input.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    ', lineno=195, col_offset=-1), lineno=195, col_offset=-1), Assign([Tuple([Name('quanta', Store(), lineno=196, col_offset=4), Name('leftover', Store(), lineno=196, col_offset=12)], Store(), lineno=196, col_offset=4)], Call(Name('divmod', Load(), lineno=196, col_offset=23), [Call(Name('len', Load(), lineno=196, col_offset=30), [Name('s', Load(), lineno=196, col_offset=34)], [], None, None, lineno=196, col_offset=30), Num(8, lineno=196, col_offset=38)], [], None, None, lineno=196, col_offset=23), lineno=196, col_offset=4), If(Name('leftover', Load(), lineno=197, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=198, col_offset=14), [Str('Incorrect padding', lineno=198, col_offset=24)], [], None, None, lineno=198, col_offset=14), None, None, lineno=198, col_offset=8)], [], lineno=197, col_offset=4), If(Name('map01', Load(), lineno=202, col_offset=7), [Assign([Name('s', Store(), lineno=203, col_offset=8)], Call(Name('_translate', Load(), lineno=203, col_offset=12), [Name('s', Load(), lineno=203, col_offset=23), Dict([Str('0', lineno=203, col_offset=27), Str('1', lineno=203, col_offset=37)], [Str('O', lineno=203, col_offset=32), Name('map01', Load(), lineno=203, col_offset=42)], lineno=203, col_offset=26)], [], None, None, lineno=203, col_offset=12), lineno=203, col_offset=8)], [], lineno=202, col_offset=4), If(Name('casefold', Load(), lineno=204, col_offset=7), [Assign([Name('s', Store(), lineno=205, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=205, col_offset=12), 'upper', Load(), lineno=205, col_offset=12), [], [], None, None, lineno=205, col_offset=12), lineno=205, col_offset=8)], [], lineno=204, col_offset=4), Assign([Name('padchars', Store(), lineno=209, col_offset=4)], Num(0, lineno=209, col_offset=15), lineno=209, col_offset=4), Assign([Name('mo', Store(), lineno=210, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=210, col_offset=9), 'search', Load(), lineno=210, col_offset=9), [Str('(?P<pad>[=]*)$', lineno=210, col_offset=19), Name('s', Load(), lineno=210, col_offset=37)], [], None, None, lineno=210, col_offset=9), lineno=210, col_offset=4), If(Name('mo', Load(), lineno=211, col_offset=7), [Assign([Name('padchars', Store(), lineno=212, col_offset=8)], Call(Name('len', Load(), lineno=212, col_offset=19), [Call(Attribute(Name('mo', Load(), lineno=212, col_offset=23), 'group', Load(), lineno=212, col_offset=23), [Str('pad', lineno=212, col_offset=32)], [], None, None, lineno=212, col_offset=23)], [], None, None, lineno=212, col_offset=19), lineno=212, col_offset=8), If(Compare(Name('padchars', Load(), lineno=213, col_offset=11), [Gt()], [Num(0, lineno=213, col_offset=22)], lineno=213, col_offset=11), [Assign([Name('s', Store(), lineno=214, col_offset=12)], Subscript(Name('s', Load(), lineno=214, col_offset=16), Slice(None, UnaryOp(USub(), Name('padchars', Load(), lineno=214, col_offset=20), lineno=214, col_offset=19), None), Load(), lineno=214, col_offset=16), lineno=214, col_offset=12)], [], lineno=213, col_offset=8)], [], lineno=211, col_offset=4), Assign([Name('parts', Store(), lineno=216, col_offset=4)], List([], Load(), lineno=216, col_offset=12), lineno=216, col_offset=4), Assign([Name('acc', Store(), lineno=217, col_offset=4)], Num(0, lineno=217, col_offset=10), lineno=217, col_offset=4), Assign([Name('shift', Store(), lineno=218, col_offset=4)], Num(35, lineno=218, col_offset=12), lineno=218, col_offset=4), For(Name('c', Store(), lineno=219, col_offset=8), Name('s', Load(), lineno=219, col_offset=13), [Assign([Name('val', Store(), lineno=220, col_offset=8)], Call(Attribute(Name('_b32rev', Load(), lineno=220, col_offset=14), 'get', Load(), lineno=220, col_offset=14), [Name('c', Load(), lineno=220, col_offset=26)], [], None, None, lineno=220, col_offset=14), lineno=220, col_offset=8), If(Compare(Name('val', Load(), lineno=221, col_offset=11), [Is()], [Name('None', Load(), lineno=221, col_offset=18)], lineno=221, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=222, col_offset=18), [Str('Non-base32 digit found', lineno=222, col_offset=28)], [], None, None, lineno=222, col_offset=18), None, None, lineno=222, col_offset=12)], [], lineno=221, col_offset=8), AugAssign(Name('acc', Store(), lineno=223, col_offset=8), Add(), BinOp(Subscript(Name('_b32rev', Load(), lineno=223, col_offset=15), Index(Name('c', Load(), lineno=223, col_offset=23)), Load(), lineno=223, col_offset=15), LShift(), Name('shift', Load(), lineno=223, col_offset=29), lineno=223, col_offset=15), lineno=223, col_offset=8), AugAssign(Name('shift', Store(), lineno=224, col_offset=8), Sub(), Num(5, lineno=224, col_offset=17), lineno=224, col_offset=8), If(Compare(Name('shift', Load(), lineno=225, col_offset=11), [Lt()], [Num(0, lineno=225, col_offset=19)], lineno=225, col_offset=11), [Expr(Call(Attribute(Name('parts', Load(), lineno=226, col_offset=12), 'append', Load(), lineno=226, col_offset=12), [Call(Attribute(Name('binascii', Load(), lineno=226, col_offset=25), 'unhexlify', Load(), lineno=226, col_offset=25), [BinOp(Str('%010x', lineno=226, col_offset=44), Mod(), Name('acc', Load(), lineno=226, col_offset=54), lineno=226, col_offset=44)], [], None, None, lineno=226, col_offset=25)], [], None, None, lineno=226, col_offset=12), lineno=226, col_offset=12), Assign([Name('acc', Store(), lineno=227, col_offset=12)], Num(0, lineno=227, col_offset=18), lineno=227, col_offset=12), Assign([Name('shift', Store(), lineno=228, col_offset=12)], Num(35, lineno=228, col_offset=20), lineno=228, col_offset=12)], [], lineno=225, col_offset=8)], [], lineno=219, col_offset=4), Assign([Name('last', Store(), lineno=230, col_offset=4)], Call(Attribute(Name('binascii', Load(), lineno=230, col_offset=11), 'unhexlify', Load(), lineno=230, col_offset=11), [BinOp(Str('%010x', lineno=230, col_offset=30), Mod(), Name('acc', Load(), lineno=230, col_offset=40), lineno=230, col_offset=30)], [], None, None, lineno=230, col_offset=11), lineno=230, col_offset=4), If(Compare(Name('padchars', Load(), lineno=231, col_offset=7), [Eq()], [Num(0, lineno=231, col_offset=19)], lineno=231, col_offset=7), [Assign([Name('last', Store(), lineno=232, col_offset=8)], Str('', lineno=232, col_offset=15), lineno=232, col_offset=8)], [If(Compare(Name('padchars', Load(), lineno=233, col_offset=9), [Eq()], [Num(1, lineno=233, col_offset=21)], lineno=233, col_offset=9), [Assign([Name('last', Store(), lineno=234, col_offset=8)], Subscript(Name('last', Load(), lineno=234, col_offset=15), Slice(None, Num(-1, lineno=234, col_offset=22), None), Load(), lineno=234, col_offset=15), lineno=234, col_offset=8)], [If(Compare(Name('padchars', Load(), lineno=235, col_offset=9), [Eq()], [Num(3, lineno=235, col_offset=21)], lineno=235, col_offset=9), [Assign([Name('last', Store(), lineno=236, col_offset=8)], Subscript(Name('last', Load(), lineno=236, col_offset=15), Slice(None, Num(-2, lineno=236, col_offset=22), None), Load(), lineno=236, col_offset=15), lineno=236, col_offset=8)], [If(Compare(Name('padchars', Load(), lineno=237, col_offset=9), [Eq()], [Num(4, lineno=237, col_offset=21)], lineno=237, col_offset=9), [Assign([Name('last', Store(), lineno=238, col_offset=8)], Subscript(Name('last', Load(), lineno=238, col_offset=15), Slice(None, Num(-3, lineno=238, col_offset=22), None), Load(), lineno=238, col_offset=15), lineno=238, col_offset=8)], [If(Compare(Name('padchars', Load(), lineno=239, col_offset=9), [Eq()], [Num(6, lineno=239, col_offset=21)], lineno=239, col_offset=9), [Assign([Name('last', Store(), lineno=240, col_offset=8)], Subscript(Name('last', Load(), lineno=240, col_offset=15), Slice(None, Num(-4, lineno=240, col_offset=22), None), Load(), lineno=240, col_offset=15), lineno=240, col_offset=8)], [Raise(Call(Name('TypeError', Load(), lineno=242, col_offset=14), [Str('Incorrect padding', lineno=242, col_offset=24)], [], None, None, lineno=242, col_offset=14), None, None, lineno=242, col_offset=8)], lineno=239, col_offset=9)], lineno=237, col_offset=9)], lineno=235, col_offset=9)], lineno=233, col_offset=9)], lineno=231, col_offset=4), Expr(Call(Attribute(Name('parts', Load(), lineno=243, col_offset=4), 'append', Load(), lineno=243, col_offset=4), [Name('last', Load(), lineno=243, col_offset=17)], [], None, None, lineno=243, col_offset=4), lineno=243, col_offset=4), Return(Call(Attribute(Name('EMPTYSTRING', Load(), lineno=244, col_offset=11), 'join', Load(), lineno=244, col_offset=11), [Name('parts', Load(), lineno=244, col_offset=28)], [], None, None, lineno=244, col_offset=11), lineno=244, col_offset=4)], [], lineno=177, col_offset=0), FunctionDef('b16encode', arguments([Name('s', Param(), lineno=251, col_offset=14)], None, None, []), [Expr(Str('Encode a string using Base16.\n\n    s is the string to encode.  The encoded string is returned.\n    ', lineno=255, col_offset=-1), lineno=255, col_offset=-1), Return(Call(Attribute(Call(Attribute(Name('binascii', Load(), lineno=256, col_offset=11), 'hexlify', Load(), lineno=256, col_offset=11), [Name('s', Load(), lineno=256, col_offset=28)], [], None, None, lineno=256, col_offset=11), 'upper', Load(), lineno=256, col_offset=11), [], [], None, None, lineno=256, col_offset=11), lineno=256, col_offset=4)], [], lineno=251, col_offset=0), FunctionDef('b16decode', arguments([Name('s', Param(), lineno=259, col_offset=14), Name('casefold', Param(), lineno=259, col_offset=17)], None, None, [Name('False', Load(), lineno=259, col_offset=26)]), [Expr(Str('Decode a Base16 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    ', lineno=269, col_offset=-1), lineno=269, col_offset=-1), If(Name('casefold', Load(), lineno=270, col_offset=7), [Assign([Name('s', Store(), lineno=271, col_offset=8)], Call(Attribute(Name('s', Load(), lineno=271, col_offset=12), 'upper', Load(), lineno=271, col_offset=12), [], [], None, None, lineno=271, col_offset=12), lineno=271, col_offset=8)], [], lineno=270, col_offset=4), If(Call(Attribute(Name('re', Load(), lineno=272, col_offset=7), 'search', Load(), lineno=272, col_offset=7), [Str('[^0-9A-F]', lineno=272, col_offset=17), Name('s', Load(), lineno=272, col_offset=30)], [], None, None, lineno=272, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=273, col_offset=14), [Str('Non-base16 digit found', lineno=273, col_offset=24)], [], None, None, lineno=273, col_offset=14), None, None, lineno=273, col_offset=8)], [], lineno=272, col_offset=4), Return(Call(Attribute(Name('binascii', Load(), lineno=274, col_offset=11), 'unhexlify', Load(), lineno=274, col_offset=11), [Name('s', Load(), lineno=274, col_offset=30)], [], None, None, lineno=274, col_offset=11), lineno=274, col_offset=4)], [], lineno=259, col_offset=0), Assign([Name('MAXLINESIZE', Store(), lineno=282, col_offset=0)], Num(76, lineno=282, col_offset=14), lineno=282, col_offset=0), Assign([Name('MAXBINSIZE', Store(), lineno=283, col_offset=0)], BinOp(BinOp(Name('MAXLINESIZE', Load(), lineno=283, col_offset=14), FloorDiv(), Num(4, lineno=283, col_offset=27), lineno=283, col_offset=14), Mult(), Num(3, lineno=283, col_offset=30), lineno=283, col_offset=13), lineno=283, col_offset=0), FunctionDef('encode', arguments([Name('input', Param(), lineno=285, col_offset=11), Name('output', Param(), lineno=285, col_offset=18)], None, None, []), [Expr(Str('Encode a file.', lineno=286, col_offset=4), lineno=286, col_offset=4), While(Name('True', Load(), lineno=287, col_offset=10), [Assign([Name('s', Store(), lineno=288, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=288, col_offset=12), 'read', Load(), lineno=288, col_offset=12), [Name('MAXBINSIZE', Load(), lineno=288, col_offset=23)], [], None, None, lineno=288, col_offset=12), lineno=288, col_offset=8), If(UnaryOp(Not(), Name('s', Load(), lineno=289, col_offset=15), lineno=289, col_offset=11), [Break( lineno=290, col_offset=12)], [], lineno=289, col_offset=8), While(Compare(Call(Name('len', Load(), lineno=291, col_offset=14), [Name('s', Load(), lineno=291, col_offset=18)], [], None, None, lineno=291, col_offset=14), [Lt()], [Name('MAXBINSIZE', Load(), lineno=291, col_offset=23)], lineno=291, col_offset=14), [Assign([Name('ns', Store(), lineno=292, col_offset=12)], Call(Attribute(Name('input', Load(), lineno=292, col_offset=17), 'read', Load(), lineno=292, col_offset=17), [BinOp(Name('MAXBINSIZE', Load(), lineno=292, col_offset=28), Sub(), Call(Name('len', Load(), lineno=292, col_offset=39), [Name('s', Load(), lineno=292, col_offset=43)], [], None, None, lineno=292, col_offset=39), lineno=292, col_offset=28)], [], None, None, lineno=292, col_offset=17), lineno=292, col_offset=12), If(UnaryOp(Not(), Name('ns', Load(), lineno=293, col_offset=19), lineno=293, col_offset=15), [Break( lineno=294, col_offset=16)], [], lineno=293, col_offset=12), AugAssign(Name('s', Store(), lineno=295, col_offset=12), Add(), Name('ns', Load(), lineno=295, col_offset=17), lineno=295, col_offset=12)], [], lineno=291, col_offset=8), Assign([Name('line', Store(), lineno=296, col_offset=8)], Call(Attribute(Name('binascii', Load(), lineno=296, col_offset=15), 'b2a_base64', Load(), lineno=296, col_offset=15), [Name('s', Load(), lineno=296, col_offset=35)], [], None, None, lineno=296, col_offset=15), lineno=296, col_offset=8), Expr(Call(Attribute(Name('output', Load(), lineno=297, col_offset=8), 'write', Load(), lineno=297, col_offset=8), [Name('line', Load(), lineno=297, col_offset=21)], [], None, None, lineno=297, col_offset=8), lineno=297, col_offset=8)], [], lineno=287, col_offset=4)], [], lineno=285, col_offset=0), FunctionDef('decode', arguments([Name('input', Param(), lineno=300, col_offset=11), Name('output', Param(), lineno=300, col_offset=18)], None, None, []), [Expr(Str('Decode a file.', lineno=301, col_offset=4), lineno=301, col_offset=4), While(Name('True', Load(), lineno=302, col_offset=10), [Assign([Name('line', Store(), lineno=303, col_offset=8)], Call(Attribute(Name('input', Load(), lineno=303, col_offset=15), 'readline', Load(), lineno=303, col_offset=15), [], [], None, None, lineno=303, col_offset=15), lineno=303, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=304, col_offset=15), lineno=304, col_offset=11), [Break( lineno=305, col_offset=12)], [], lineno=304, col_offset=8), Assign([Name('s', Store(), lineno=306, col_offset=8)], Call(Attribute(Name('binascii', Load(), lineno=306, col_offset=12), 'a2b_base64', Load(), lineno=306, col_offset=12), [Name('line', Load(), lineno=306, col_offset=32)], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=8), Expr(Call(Attribute(Name('output', Load(), lineno=307, col_offset=8), 'write', Load(), lineno=307, col_offset=8), [Name('s', Load(), lineno=307, col_offset=21)], [], None, None, lineno=307, col_offset=8), lineno=307, col_offset=8)], [], lineno=302, col_offset=4)], [], lineno=300, col_offset=0), FunctionDef('encodestring', arguments([Name('s', Param(), lineno=310, col_offset=17)], None, None, []), [Expr(Str('Encode a string into multiple lines of base-64 data.', lineno=311, col_offset=4), lineno=311, col_offset=4), Assign([Name('pieces', Store(), lineno=312, col_offset=4)], List([], Load(), lineno=312, col_offset=13), lineno=312, col_offset=4), For(Name('i', Store(), lineno=313, col_offset=8), Call(Name('range', Load(), lineno=313, col_offset=13), [Num(0, lineno=313, col_offset=19), Call(Name('len', Load(), lineno=313, col_offset=22), [Name('s', Load(), lineno=313, col_offset=26)], [], None, None, lineno=313, col_offset=22), Name('MAXBINSIZE', Load(), lineno=313, col_offset=30)], [], None, None, lineno=313, col_offset=13), [Assign([Name('chunk', Store(), lineno=314, col_offset=8)], Subscript(Name('s', Load(), lineno=314, col_offset=16), Slice(Name('i', Load(), lineno=314, col_offset=18), BinOp(Name('i', Load(), lineno=314, col_offset=22), Add(), Name('MAXBINSIZE', Load(), lineno=314, col_offset=26), lineno=314, col_offset=22), None), Load(), lineno=314, col_offset=16), lineno=314, col_offset=8), Expr(Call(Attribute(Name('pieces', Load(), lineno=315, col_offset=8), 'append', Load(), lineno=315, col_offset=8), [Call(Attribute(Name('binascii', Load(), lineno=315, col_offset=22), 'b2a_base64', Load(), lineno=315, col_offset=22), [Name('chunk', Load(), lineno=315, col_offset=42)], [], None, None, lineno=315, col_offset=22)], [], None, None, lineno=315, col_offset=8), lineno=315, col_offset=8)], [], lineno=313, col_offset=4), Return(Call(Attribute(Str('', lineno=316, col_offset=11), 'join', Load(), lineno=316, col_offset=11), [Name('pieces', Load(), lineno=316, col_offset=19)], [], None, None, lineno=316, col_offset=11), lineno=316, col_offset=4)], [], lineno=310, col_offset=0), FunctionDef('decodestring', arguments([Name('s', Param(), lineno=319, col_offset=17)], None, None, []), [Expr(Str('Decode a string.', lineno=320, col_offset=4), lineno=320, col_offset=4), Return(Call(Attribute(Name('binascii', Load(), lineno=321, col_offset=11), 'a2b_base64', Load(), lineno=321, col_offset=11), [Name('s', Load(), lineno=321, col_offset=31)], [], None, None, lineno=321, col_offset=11), lineno=321, col_offset=4)], [], lineno=319, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Expr(Str('Small test program', lineno=327, col_offset=4), lineno=327, col_offset=4), Import([alias('sys', None), alias('getopt', None)], lineno=328, col_offset=4), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=330, col_offset=8), Name('args', Store(), lineno=330, col_offset=14)], Store(), lineno=330, col_offset=8)], Call(Attribute(Name('getopt', Load(), lineno=330, col_offset=21), 'getopt', Load(), lineno=330, col_offset=21), [Subscript(Attribute(Name('sys', Load(), lineno=330, col_offset=35), 'argv', Load(), lineno=330, col_offset=35), Slice(Num(1, lineno=330, col_offset=44), None, None), Load(), lineno=330, col_offset=35), Str('deut', lineno=330, col_offset=49)], [], None, None, lineno=330, col_offset=21), lineno=330, col_offset=8)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=331, col_offset=11), 'error', Load(), lineno=331, col_offset=11), Name('msg', Store(), lineno=331, col_offset=25), [Assign([Attribute(Name('sys', Load(), lineno=332, col_offset=8), 'stdout', Store(), lineno=332, col_offset=8)], Attribute(Name('sys', Load(), lineno=332, col_offset=21), 'stderr', Load(), lineno=332, col_offset=21), lineno=332, col_offset=8), Print(None, [Name('msg', Load(), lineno=333, col_offset=14)], True, lineno=333, col_offset=8), Print(None, [BinOp(Str("usage: %s [-d|-e|-u|-t] [file|-]\n        -d, -u: decode\n        -e: encode (default)\n        -t: encode and decode string 'Aladdin:open sesame'", lineno=337, col_offset=-1), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=337, col_offset=62), 'argv', Load(), lineno=337, col_offset=62), Index(Num(0, lineno=337, col_offset=71)), Load(), lineno=337, col_offset=62), lineno=337, col_offset=-1)], True, lineno=334, col_offset=8), Expr(Call(Attribute(Name('sys', Load(), lineno=338, col_offset=8), 'exit', Load(), lineno=338, col_offset=8), [Num(2, lineno=338, col_offset=17)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8)], lineno=331, col_offset=4)], [], lineno=329, col_offset=4), Assign([Name('func', Store(), lineno=339, col_offset=4)], Name('encode', Load(), lineno=339, col_offset=11), lineno=339, col_offset=4), For(Tuple([Name('o', Store(), lineno=340, col_offset=8), Name('a', Store(), lineno=340, col_offset=11)], Store(), lineno=340, col_offset=8), Name('opts', Load(), lineno=340, col_offset=16), [If(Compare(Name('o', Load(), lineno=341, col_offset=11), [Eq()], [Str('-e', lineno=341, col_offset=16)], lineno=341, col_offset=11), [Assign([Name('func', Store(), lineno=341, col_offset=22)], Name('encode', Load(), lineno=341, col_offset=29), lineno=341, col_offset=22)], [], lineno=341, col_offset=8), If(Compare(Name('o', Load(), lineno=342, col_offset=11), [Eq()], [Str('-d', lineno=342, col_offset=16)], lineno=342, col_offset=11), [Assign([Name('func', Store(), lineno=342, col_offset=22)], Name('decode', Load(), lineno=342, col_offset=29), lineno=342, col_offset=22)], [], lineno=342, col_offset=8), If(Compare(Name('o', Load(), lineno=343, col_offset=11), [Eq()], [Str('-u', lineno=343, col_offset=16)], lineno=343, col_offset=11), [Assign([Name('func', Store(), lineno=343, col_offset=22)], Name('decode', Load(), lineno=343, col_offset=29), lineno=343, col_offset=22)], [], lineno=343, col_offset=8), If(Compare(Name('o', Load(), lineno=344, col_offset=11), [Eq()], [Str('-t', lineno=344, col_offset=16)], lineno=344, col_offset=11), [Expr(Call(Name('test1', Load(), lineno=344, col_offset=22), [], [], None, None, lineno=344, col_offset=22), lineno=344, col_offset=22), Return(None, lineno=344, col_offset=31)], [], lineno=344, col_offset=8)], [], lineno=340, col_offset=4), If(BoolOp(And(), [Name('args', Load(), lineno=345, col_offset=7), Compare(Subscript(Name('args', Load(), lineno=345, col_offset=16), Index(Num(0, lineno=345, col_offset=21)), Load(), lineno=345, col_offset=16), [NotEq()], [Str('-', lineno=345, col_offset=27)], lineno=345, col_offset=16)], lineno=345, col_offset=7), [With(Call(Name('open', Load(), lineno=346, col_offset=13), [Subscript(Name('args', Load(), lineno=346, col_offset=18), Index(Num(0, lineno=346, col_offset=23)), Load(), lineno=346, col_offset=18), Str('rb', lineno=346, col_offset=27)], [], None, None, lineno=346, col_offset=13), Name('f', Store(), lineno=346, col_offset=36), [Expr(Call(Name('func', Load(), lineno=347, col_offset=12), [Name('f', Load(), lineno=347, col_offset=17), Attribute(Name('sys', Load(), lineno=347, col_offset=20), 'stdout', Load(), lineno=347, col_offset=20)], [], None, None, lineno=347, col_offset=12), lineno=347, col_offset=12)], lineno=346, col_offset=13)], [Expr(Call(Name('func', Load(), lineno=349, col_offset=8), [Attribute(Name('sys', Load(), lineno=349, col_offset=13), 'stdin', Load(), lineno=349, col_offset=13), Attribute(Name('sys', Load(), lineno=349, col_offset=24), 'stdout', Load(), lineno=349, col_offset=24)], [], None, None, lineno=349, col_offset=8), lineno=349, col_offset=8)], lineno=345, col_offset=4)], [], lineno=326, col_offset=0), FunctionDef('test1', arguments([], None, None, []), [Assign([Name('s0', Store(), lineno=353, col_offset=4)], Str('Aladdin:open sesame', lineno=353, col_offset=9), lineno=353, col_offset=4), Assign([Name('s1', Store(), lineno=354, col_offset=4)], Call(Name('encodestring', Load(), lineno=354, col_offset=9), [Name('s0', Load(), lineno=354, col_offset=22)], [], None, None, lineno=354, col_offset=9), lineno=354, col_offset=4), Assign([Name('s2', Store(), lineno=355, col_offset=4)], Call(Name('decodestring', Load(), lineno=355, col_offset=9), [Name('s1', Load(), lineno=355, col_offset=22)], [], None, None, lineno=355, col_offset=9), lineno=355, col_offset=4), Print(None, [Name('s0', Load(), lineno=356, col_offset=10), Call(Name('repr', Load(), lineno=356, col_offset=14), [Name('s1', Load(), lineno=356, col_offset=19)], [], None, None, lineno=356, col_offset=14), Name('s2', Load(), lineno=356, col_offset=24)], True, lineno=356, col_offset=4)], [], lineno=352, col_offset=0), If(Compare(Name('__name__', Load(), lineno=359, col_offset=3), [Eq()], [Str('__main__', lineno=359, col_offset=15)], lineno=359, col_offset=3), [Expr(Call(Name('test', Load(), lineno=360, col_offset=4), [], [], None, None, lineno=360, col_offset=4), lineno=360, col_offset=4)], [], lineno=359, col_offset=0)])
