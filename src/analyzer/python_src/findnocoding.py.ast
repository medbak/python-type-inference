Module([Expr(Str('List all those Python files that require a coding directive\n\nUsage: nocoding.py dir1 [dir2...]\n', lineno=6, col_offset=-1), lineno=6, col_offset=-1), Assign([Name('__author__', Store(), lineno=8, col_offset=0)], Str('Oleg Broytmann, Georg Brandl', lineno=8, col_offset=13), lineno=8, col_offset=0), Import([alias('sys', None), alias('os', None), alias('re', None), alias('getopt', None)], lineno=10, col_offset=0), TryExcept([Import([alias('pysource', None)], lineno=14, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=15, col_offset=7), None, [ClassDef('pysource', [], [Assign([Name('has_python_ext', Store(), lineno=18, col_offset=8), Name('looks_like_python', Store(), lineno=18, col_offset=25), Name('can_be_compiled', Store(), lineno=18, col_offset=45)], Name('None', Load(), lineno=18, col_offset=63), lineno=18, col_offset=8), FunctionDef('walk_python_files', arguments([Name('self', Param(), lineno=19, col_offset=30), Name('paths', Param(), lineno=19, col_offset=36)], 'args', 'kwargs', []), [For(Name('path', Store(), lineno=20, col_offset=16), Name('paths', Load(), lineno=20, col_offset=24), [If(Call(Attribute(Attribute(Name('os', Load(), lineno=21, col_offset=19), 'path', Load(), lineno=21, col_offset=19), 'isfile', Load(), lineno=21, col_offset=19), [Name('path', Load(), lineno=21, col_offset=34)], [], None, None, lineno=21, col_offset=19), [Expr(Yield(Call(Attribute(Name('path', Load(), lineno=22, col_offset=26), 'endswith', Load(), lineno=22, col_offset=26), [Str('.py', lineno=22, col_offset=40)], [], None, None, lineno=22, col_offset=26), lineno=22, col_offset=20), lineno=22, col_offset=20)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=23, col_offset=21), 'path', Load(), lineno=23, col_offset=21), 'isdir', Load(), lineno=23, col_offset=21), [Name('path', Load(), lineno=23, col_offset=35)], [], None, None, lineno=23, col_offset=21), [For(Tuple([Name('root', Store(), lineno=24, col_offset=24), Name('dirs', Store(), lineno=24, col_offset=30), Name('files', Store(), lineno=24, col_offset=36)], Store(), lineno=24, col_offset=24), Call(Attribute(Name('os', Load(), lineno=24, col_offset=45), 'walk', Load(), lineno=24, col_offset=45), [Name('path', Load(), lineno=24, col_offset=53)], [], None, None, lineno=24, col_offset=45), [For(Name('filename', Store(), lineno=25, col_offset=28), Name('files', Load(), lineno=25, col_offset=40), [If(Call(Attribute(Name('filename', Load(), lineno=26, col_offset=31), 'endswith', Load(), lineno=26, col_offset=31), [Str('.py', lineno=26, col_offset=49)], [], None, None, lineno=26, col_offset=31), [Expr(Yield(Call(Attribute(Attribute(Name('os', Load(), lineno=27, col_offset=38), 'path', Load(), lineno=27, col_offset=38), 'join', Load(), lineno=27, col_offset=38), [Name('root', Load(), lineno=27, col_offset=51), Name('filename', Load(), lineno=27, col_offset=57)], [], None, None, lineno=27, col_offset=38), lineno=27, col_offset=32), lineno=27, col_offset=32)], [], lineno=26, col_offset=28)], [], lineno=25, col_offset=24)], [], lineno=24, col_offset=20)], [], lineno=23, col_offset=21)], lineno=21, col_offset=16)], [], lineno=20, col_offset=12)], [], lineno=19, col_offset=8)], [], lineno=17, col_offset=4), Assign([Name('pysource', Store(), lineno=28, col_offset=4)], Call(Name('pysource', Load(), lineno=28, col_offset=15), [], [], None, None, lineno=28, col_offset=15), lineno=28, col_offset=4), Print(Attribute(Name('sys', Load(), lineno=31, col_offset=12), 'stderr', Load(), lineno=31, col_offset=12), [Str('The pysource module is not available; no sophisticated Python source file search will be done.', lineno=31, col_offset=25)], True, lineno=31, col_offset=4)], lineno=15, col_offset=0)], [], lineno=13, col_offset=0), Assign([Name('decl_re', Store(), lineno=35, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=35, col_offset=10), 'compile', Load(), lineno=35, col_offset=10), [Str('coding[=:]\\s*([-\\w.]+)', lineno=35, col_offset=21)], [], None, None, lineno=35, col_offset=10), lineno=35, col_offset=0), FunctionDef('get_declaration', arguments([Name('line', Param(), lineno=37, col_offset=20)], None, None, []), [Assign([Name('match', Store(), lineno=38, col_offset=4)], Call(Attribute(Name('decl_re', Load(), lineno=38, col_offset=12), 'search', Load(), lineno=38, col_offset=12), [Name('line', Load(), lineno=38, col_offset=27)], [], None, None, lineno=38, col_offset=12), lineno=38, col_offset=4), If(Name('match', Load(), lineno=39, col_offset=7), [Return(Call(Attribute(Name('match', Load(), lineno=40, col_offset=15), 'group', Load(), lineno=40, col_offset=15), [Num(1, lineno=40, col_offset=27)], [], None, None, lineno=40, col_offset=15), lineno=40, col_offset=8)], [], lineno=39, col_offset=4), Return(Str('', lineno=41, col_offset=11), lineno=41, col_offset=4)], [], lineno=37, col_offset=0), FunctionDef('has_correct_encoding', arguments([Name('text', Param(), lineno=43, col_offset=25), Name('codec', Param(), lineno=43, col_offset=31)], None, None, []), [TryExcept([Expr(Call(Name('unicode', Load(), lineno=45, col_offset=8), [Name('text', Load(), lineno=45, col_offset=16), Name('codec', Load(), lineno=45, col_offset=22)], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8)], [ExceptHandler(Name('UnicodeDecodeError', Load(), lineno=46, col_offset=11), None, [Return(Name('False', Load(), lineno=47, col_offset=15), lineno=47, col_offset=8)], lineno=46, col_offset=4)], [Return(Name('True', Load(), lineno=49, col_offset=15), lineno=49, col_offset=8)], lineno=44, col_offset=4)], [], lineno=43, col_offset=0), FunctionDef('needs_declaration', arguments([Name('fullpath', Param(), lineno=51, col_offset=22)], None, None, []), [TryExcept([Assign([Name('infile', Store(), lineno=53, col_offset=8)], Call(Name('open', Load(), lineno=53, col_offset=17), [Name('fullpath', Load(), lineno=53, col_offset=22), Str('rU', lineno=53, col_offset=32)], [], None, None, lineno=53, col_offset=17), lineno=53, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=54, col_offset=11), None, [Return(Name('None', Load(), lineno=55, col_offset=15), lineno=55, col_offset=8)], lineno=54, col_offset=4)], [], lineno=52, col_offset=4), Assign([Name('line1', Store(), lineno=57, col_offset=4)], Call(Attribute(Name('infile', Load(), lineno=57, col_offset=12), 'readline', Load(), lineno=57, col_offset=12), [], [], None, None, lineno=57, col_offset=12), lineno=57, col_offset=4), Assign([Name('line2', Store(), lineno=58, col_offset=4)], Call(Attribute(Name('infile', Load(), lineno=58, col_offset=12), 'readline', Load(), lineno=58, col_offset=12), [], [], None, None, lineno=58, col_offset=12), lineno=58, col_offset=4), If(BoolOp(Or(), [Call(Name('get_declaration', Load(), lineno=60, col_offset=7), [Name('line1', Load(), lineno=60, col_offset=23)], [], None, None, lineno=60, col_offset=7), Call(Name('get_declaration', Load(), lineno=60, col_offset=33), [Name('line2', Load(), lineno=60, col_offset=49)], [], None, None, lineno=60, col_offset=33)], lineno=60, col_offset=7), [Expr(Call(Attribute(Name('infile', Load(), lineno=62, col_offset=8), 'close', Load(), lineno=62, col_offset=8), [], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Return(Name('False', Load(), lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=60, col_offset=4), Assign([Name('rest', Store(), lineno=66, col_offset=4)], Call(Attribute(Name('infile', Load(), lineno=66, col_offset=11), 'read', Load(), lineno=66, col_offset=11), [], [], None, None, lineno=66, col_offset=11), lineno=66, col_offset=4), Expr(Call(Attribute(Name('infile', Load(), lineno=67, col_offset=4), 'close', Load(), lineno=67, col_offset=4), [], [], None, None, lineno=67, col_offset=4), lineno=67, col_offset=4), If(Call(Name('has_correct_encoding', Load(), lineno=69, col_offset=7), [BinOp(BinOp(Name('line1', Load(), lineno=69, col_offset=28), Add(), Name('line2', Load(), lineno=69, col_offset=34), lineno=69, col_offset=28), Add(), Name('rest', Load(), lineno=69, col_offset=40), lineno=69, col_offset=39), Str('ascii', lineno=69, col_offset=46)], [], None, None, lineno=69, col_offset=7), [Return(Name('False', Load(), lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=69, col_offset=4), Return(Name('True', Load(), lineno=72, col_offset=11), lineno=72, col_offset=4)], [], lineno=51, col_offset=0), Assign([Name('usage', Store(), lineno=75, col_offset=0)], BinOp(Str('Usage: %s [-cd] paths...\n    -c: recognize Python source files trying to compile them\n    -d: debug output', lineno=77, col_offset=-1), Mod(), Subscript(Attribute(Name('sys', Load(), lineno=77, col_offset=26), 'argv', Load(), lineno=77, col_offset=26), Index(Num(0, lineno=77, col_offset=35)), Load(), lineno=77, col_offset=26), lineno=77, col_offset=-1), lineno=75, col_offset=0), TryExcept([Assign([Tuple([Name('opts', Store(), lineno=80, col_offset=4), Name('args', Store(), lineno=80, col_offset=10)], Store(), lineno=80, col_offset=4)], Call(Attribute(Name('getopt', Load(), lineno=80, col_offset=17), 'getopt', Load(), lineno=80, col_offset=17), [Subscript(Attribute(Name('sys', Load(), lineno=80, col_offset=31), 'argv', Load(), lineno=80, col_offset=31), Slice(Num(1, lineno=80, col_offset=40), None, None), Load(), lineno=80, col_offset=31), Str('cd', lineno=80, col_offset=45)], [], None, None, lineno=80, col_offset=17), lineno=80, col_offset=4)], [ExceptHandler(Attribute(Name('getopt', Load(), lineno=81, col_offset=7), 'error', Load(), lineno=81, col_offset=7), Name('msg', Store(), lineno=81, col_offset=21), [Print(Attribute(Name('sys', Load(), lineno=82, col_offset=12), 'stderr', Load(), lineno=82, col_offset=12), [Name('msg', Load(), lineno=82, col_offset=24)], True, lineno=82, col_offset=4), Print(Attribute(Name('sys', Load(), lineno=83, col_offset=12), 'stderr', Load(), lineno=83, col_offset=12), [Name('usage', Load(), lineno=83, col_offset=24)], True, lineno=83, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=84, col_offset=4), 'exit', Load(), lineno=84, col_offset=4), [Num(1, lineno=84, col_offset=13)], [], None, None, lineno=84, col_offset=4), lineno=84, col_offset=4)], lineno=81, col_offset=0)], [], lineno=79, col_offset=0), Assign([Name('is_python', Store(), lineno=86, col_offset=0)], Attribute(Name('pysource', Load(), lineno=86, col_offset=12), 'looks_like_python', Load(), lineno=86, col_offset=12), lineno=86, col_offset=0), Assign([Name('debug', Store(), lineno=87, col_offset=0)], Name('False', Load(), lineno=87, col_offset=8), lineno=87, col_offset=0), For(Tuple([Name('o', Store(), lineno=89, col_offset=4), Name('a', Store(), lineno=89, col_offset=7)], Store(), lineno=89, col_offset=4), Name('opts', Load(), lineno=89, col_offset=12), [If(Compare(Name('o', Load(), lineno=90, col_offset=7), [Eq()], [Str('-c', lineno=90, col_offset=12)], lineno=90, col_offset=7), [Assign([Name('is_python', Store(), lineno=91, col_offset=8)], Attribute(Name('pysource', Load(), lineno=91, col_offset=20), 'can_be_compiled', Load(), lineno=91, col_offset=20), lineno=91, col_offset=8)], [If(Compare(Name('o', Load(), lineno=92, col_offset=9), [Eq()], [Str('-d', lineno=92, col_offset=14)], lineno=92, col_offset=9), [Assign([Name('debug', Store(), lineno=93, col_offset=8)], Name('True', Load(), lineno=93, col_offset=16), lineno=93, col_offset=8)], [], lineno=92, col_offset=9)], lineno=90, col_offset=4)], [], lineno=89, col_offset=0), If(UnaryOp(Not(), Name('args', Load(), lineno=95, col_offset=7), lineno=95, col_offset=3), [Print(Attribute(Name('sys', Load(), lineno=96, col_offset=12), 'stderr', Load(), lineno=96, col_offset=12), [Name('usage', Load(), lineno=96, col_offset=24)], True, lineno=96, col_offset=4), Expr(Call(Attribute(Name('sys', Load(), lineno=97, col_offset=4), 'exit', Load(), lineno=97, col_offset=4), [Num(1, lineno=97, col_offset=13)], [], None, None, lineno=97, col_offset=4), lineno=97, col_offset=4)], [], lineno=95, col_offset=0), For(Name('fullpath', Store(), lineno=99, col_offset=4), Call(Attribute(Name('pysource', Load(), lineno=99, col_offset=16), 'walk_python_files', Load(), lineno=99, col_offset=16), [Name('args', Load(), lineno=99, col_offset=43), Name('is_python', Load(), lineno=99, col_offset=49)], [], None, None, lineno=99, col_offset=16), [If(Name('debug', Load(), lineno=100, col_offset=7), [Print(None, [BinOp(Str('Testing for coding: %s', lineno=101, col_offset=14), Mod(), Name('fullpath', Load(), lineno=101, col_offset=41), lineno=101, col_offset=14)], True, lineno=101, col_offset=8)], [], lineno=100, col_offset=4), Assign([Name('result', Store(), lineno=102, col_offset=4)], Call(Name('needs_declaration', Load(), lineno=102, col_offset=13), [Name('fullpath', Load(), lineno=102, col_offset=31)], [], None, None, lineno=102, col_offset=13), lineno=102, col_offset=4), If(Name('result', Load(), lineno=103, col_offset=7), [Print(None, [Name('fullpath', Load(), lineno=104, col_offset=14)], True, lineno=104, col_offset=8)], [], lineno=103, col_offset=4)], [], lineno=99, col_offset=0)])
