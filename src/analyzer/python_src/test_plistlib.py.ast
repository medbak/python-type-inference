Module([Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('plistlib', None)], lineno=4, col_offset=0), Import([alias('os', None)], lineno=5, col_offset=0), Import([alias('datetime', None)], lineno=6, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=7, col_offset=0), Assign([Name('TESTDATA', Store(), lineno=11, col_offset=0)], Call(Attribute(Str('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n        <key>aDate</key>\n        <date>2004-10-26T10:33:33Z</date>\n        <key>aDict</key>\n        <dict>\n                <key>aFalseValue</key>\n                <false/>\n                <key>aTrueValue</key>\n                <true/>\n                <key>aUnicodeValue</key>\n                <string>M\xc3\xa4ssig, Ma\xc3\x9f</string>\n                <key>anotherString</key>\n                <string>&lt;hello &amp; \'hi\' there!&gt;</string>\n                <key>deeperDict</key>\n                <dict>\n                        <key>a</key>\n                        <integer>17</integer>\n                        <key>b</key>\n                        <real>32.5</real>\n                        <key>c</key>\n                        <array>\n                                <integer>1</integer>\n                                <integer>2</integer>\n                                <string>text</string>\n                        </array>\n                </dict>\n        </dict>\n        <key>aFloat</key>\n        <real>0.5</real>\n        <key>aList</key>\n        <array>\n                <string>A</string>\n                <string>B</string>\n                <integer>12</integer>\n                <real>32.5</real>\n                <array>\n                        <integer>1</integer>\n                        <integer>2</integer>\n                        <integer>3</integer>\n                </array>\n        </array>\n        <key>aString</key>\n        <string>Doodah</string>\n        <key>anInt</key>\n        <integer>728</integer>\n        <key>nestedData</key>\n        <array>\n                <data>\n                PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5r\n                PgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5\n                IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBi\n                aW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3Rz\n                IG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQID\n                PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==\n                </data>\n        </array>\n        <key>someData</key>\n        <data>\n        PGJpbmFyeSBndW5rPg==\n        </data>\n        <key>someMoreData</key>\n        <data>\n        PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8\n        bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxs\n        b3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxv\n        dHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90\n        cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==\n        </data>\n        <key>\xc3\x85benraa</key>\n        <string>That was a unicode key.</string>\n</dict>\n</plist>\n', lineno=87, col_offset=-1), 'replace', Load(), lineno=87, col_offset=-1), [BinOp(Str(' ', lineno=87, col_offset=12), Mult(), Num(8, lineno=87, col_offset=18), lineno=87, col_offset=12), Str('\t', lineno=87, col_offset=21)], [], None, None, lineno=87, col_offset=-1), lineno=11, col_offset=0), ClassDef('TestPlistlib', [Attribute(Name('unittest', Load(), lineno=90, col_offset=19), 'TestCase', Load(), lineno=90, col_offset=19)], [FunctionDef('tearDown', arguments([Name('self', Param(), lineno=92, col_offset=17)], None, None, []), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=94, col_offset=12), 'unlink', Load(), lineno=94, col_offset=12), [Attribute(Name('test_support', Load(), lineno=94, col_offset=22), 'TESTFN', Load(), lineno=94, col_offset=22)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], [ExceptHandler(None, None, [Pass( lineno=96, col_offset=12)], lineno=95, col_offset=8)], [], lineno=93, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('_create', arguments([Name('self', Param(), lineno=98, col_offset=16)], None, None, []), [Assign([Name('pl', Store(), lineno=99, col_offset=8)], Call(Name('dict', Load(), lineno=99, col_offset=13), [], [keyword('aString', Str('Doodah', lineno=100, col_offset=20)), keyword('aList', List([Str('A', lineno=101, col_offset=19), Str('B', lineno=101, col_offset=24), Num(12, lineno=101, col_offset=29), Num(32.5, lineno=101, col_offset=33), List([Num(1, lineno=101, col_offset=40), Num(2, lineno=101, col_offset=43), Num(3, lineno=101, col_offset=46)], Load(), lineno=101, col_offset=39)], Load(), lineno=101, col_offset=18)), keyword('aFloat', Num(0.5, lineno=102, col_offset=21)), keyword('anInt', Num(728, lineno=103, col_offset=20)), keyword('aDict', Call(Name('dict', Load(), lineno=104, col_offset=18), [], [keyword('anotherString', Str("<hello & 'hi' there!>", lineno=105, col_offset=30)), keyword('aUnicodeValue', Str(u'M\xe4ssig, Ma\xdf', lineno=106, col_offset=30)), keyword('aTrueValue', Name('True', Load(), lineno=107, col_offset=27)), keyword('aFalseValue', Name('False', Load(), lineno=108, col_offset=28)), keyword('deeperDict', Call(Name('dict', Load(), lineno=109, col_offset=27), [], [keyword('a', Num(17, lineno=109, col_offset=34)), keyword('b', Num(32.5, lineno=109, col_offset=40)), keyword('c', List([Num(1, lineno=109, col_offset=49), Num(2, lineno=109, col_offset=52), Str('text', lineno=109, col_offset=55)], Load(), lineno=109, col_offset=48))], None, None, lineno=109, col_offset=27))], None, None, lineno=104, col_offset=18)), keyword('someData', Call(Attribute(Name('plistlib', Load(), lineno=111, col_offset=23), 'Data', Load(), lineno=111, col_offset=23), [Str('<binary gunk>', lineno=111, col_offset=37)], [], None, None, lineno=111, col_offset=23)), keyword('someMoreData', Call(Attribute(Name('plistlib', Load(), lineno=112, col_offset=27), 'Data', Load(), lineno=112, col_offset=27), [BinOp(Str('<lots of binary gunk>\x00\x01\x02\x03', lineno=112, col_offset=41), Mult(), Num(10, lineno=112, col_offset=75), lineno=112, col_offset=41)], [], None, None, lineno=112, col_offset=27)), keyword('nestedData', List([Call(Attribute(Name('plistlib', Load(), lineno=113, col_offset=26), 'Data', Load(), lineno=113, col_offset=26), [BinOp(Str('<lots of binary gunk>\x00\x01\x02\x03', lineno=113, col_offset=40), Mult(), Num(10, lineno=113, col_offset=74), lineno=113, col_offset=40)], [], None, None, lineno=113, col_offset=26)], Load(), lineno=113, col_offset=25)), keyword('aDate', Call(Attribute(Name('datetime', Load(), lineno=114, col_offset=20), 'datetime', Load(), lineno=114, col_offset=20), [Num(2004, lineno=114, col_offset=38), Num(10, lineno=114, col_offset=44), Num(26, lineno=114, col_offset=48), Num(10, lineno=114, col_offset=52), Num(33, lineno=114, col_offset=56), Num(33, lineno=114, col_offset=60)], [], None, None, lineno=114, col_offset=20))], None, None, lineno=99, col_offset=13), lineno=99, col_offset=8), Assign([Subscript(Name('pl', Load(), lineno=116, col_offset=8), Index(Str(u'\xc5benraa', lineno=116, col_offset=11)), Store(), lineno=116, col_offset=8)], Str('That was a unicode key.', lineno=116, col_offset=28), lineno=116, col_offset=8), Return(Name('pl', Load(), lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=98, col_offset=4), FunctionDef('test_create', arguments([Name('self', Param(), lineno=119, col_offset=20)], None, None, []), [Assign([Name('pl', Store(), lineno=120, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=120, col_offset=13), '_create', Load(), lineno=120, col_offset=13), [], [], None, None, lineno=120, col_offset=13), lineno=120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=8), 'assertEqual', Load(), lineno=121, col_offset=8), [Subscript(Name('pl', Load(), lineno=121, col_offset=25), Index(Str('aString', lineno=121, col_offset=28)), Load(), lineno=121, col_offset=25), Str('Doodah', lineno=121, col_offset=40)], [], None, None, lineno=121, col_offset=8), lineno=121, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=122, col_offset=8), 'assertEqual', Load(), lineno=122, col_offset=8), [Subscript(Subscript(Name('pl', Load(), lineno=122, col_offset=25), Index(Str('aDict', lineno=122, col_offset=28)), Load(), lineno=122, col_offset=25), Index(Str('aFalseValue', lineno=122, col_offset=37)), Load(), lineno=122, col_offset=25), Name('False', Load(), lineno=122, col_offset=53)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('test_io', arguments([Name('self', Param(), lineno=124, col_offset=16)], None, None, []), [Assign([Name('pl', Store(), lineno=125, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=125, col_offset=13), '_create', Load(), lineno=125, col_offset=13), [], [], None, None, lineno=125, col_offset=13), lineno=125, col_offset=8), Expr(Call(Attribute(Name('plistlib', Load(), lineno=126, col_offset=8), 'writePlist', Load(), lineno=126, col_offset=8), [Name('pl', Load(), lineno=126, col_offset=28), Attribute(Name('test_support', Load(), lineno=126, col_offset=32), 'TESTFN', Load(), lineno=126, col_offset=32)], [], None, None, lineno=126, col_offset=8), lineno=126, col_offset=8), Assign([Name('pl2', Store(), lineno=127, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=127, col_offset=14), 'readPlist', Load(), lineno=127, col_offset=14), [Attribute(Name('test_support', Load(), lineno=127, col_offset=33), 'TESTFN', Load(), lineno=127, col_offset=33)], [], None, None, lineno=127, col_offset=14), lineno=127, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=128, col_offset=8), 'assertEqual', Load(), lineno=128, col_offset=8), [Call(Name('dict', Load(), lineno=128, col_offset=25), [Name('pl', Load(), lineno=128, col_offset=30)], [], None, None, lineno=128, col_offset=25), Call(Name('dict', Load(), lineno=128, col_offset=35), [Name('pl2', Load(), lineno=128, col_offset=40)], [], None, None, lineno=128, col_offset=35)], [], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8)], [], lineno=124, col_offset=4), FunctionDef('test_string', arguments([Name('self', Param(), lineno=130, col_offset=20)], None, None, []), [Assign([Name('pl', Store(), lineno=131, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=131, col_offset=13), '_create', Load(), lineno=131, col_offset=13), [], [], None, None, lineno=131, col_offset=13), lineno=131, col_offset=8), Assign([Name('data', Store(), lineno=132, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=132, col_offset=15), 'writePlistToString', Load(), lineno=132, col_offset=15), [Name('pl', Load(), lineno=132, col_offset=43)], [], None, None, lineno=132, col_offset=15), lineno=132, col_offset=8), Assign([Name('pl2', Store(), lineno=133, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=133, col_offset=14), 'readPlistFromString', Load(), lineno=133, col_offset=14), [Name('data', Load(), lineno=133, col_offset=43)], [], None, None, lineno=133, col_offset=14), lineno=133, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'assertEqual', Load(), lineno=134, col_offset=8), [Call(Name('dict', Load(), lineno=134, col_offset=25), [Name('pl', Load(), lineno=134, col_offset=30)], [], None, None, lineno=134, col_offset=25), Call(Name('dict', Load(), lineno=134, col_offset=35), [Name('pl2', Load(), lineno=134, col_offset=40)], [], None, None, lineno=134, col_offset=35)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Assign([Name('data2', Store(), lineno=135, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=135, col_offset=16), 'writePlistToString', Load(), lineno=135, col_offset=16), [Name('pl2', Load(), lineno=135, col_offset=44)], [], None, None, lineno=135, col_offset=16), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'assertEqual', Load(), lineno=136, col_offset=8), [Name('data', Load(), lineno=136, col_offset=25), Name('data2', Load(), lineno=136, col_offset=31)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8)], [], lineno=130, col_offset=4), FunctionDef('test_appleformatting', arguments([Name('self', Param(), lineno=138, col_offset=29)], None, None, []), [Assign([Name('pl', Store(), lineno=139, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=139, col_offset=13), 'readPlistFromString', Load(), lineno=139, col_offset=13), [Name('TESTDATA', Load(), lineno=139, col_offset=42)], [], None, None, lineno=139, col_offset=13), lineno=139, col_offset=8), Assign([Name('data', Store(), lineno=140, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=140, col_offset=15), 'writePlistToString', Load(), lineno=140, col_offset=15), [Name('pl', Load(), lineno=140, col_offset=43)], [], None, None, lineno=140, col_offset=15), lineno=140, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'assertEqual', Load(), lineno=141, col_offset=8), [Name('data', Load(), lineno=141, col_offset=25), Name('TESTDATA', Load(), lineno=141, col_offset=31), Str("generated data was not identical to Apple's output", lineno=142, col_offset=25)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('test_appleformattingfromliteral', arguments([Name('self', Param(), lineno=144, col_offset=40)], None, None, []), [Assign([Name('pl', Store(), lineno=145, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=145, col_offset=13), '_create', Load(), lineno=145, col_offset=13), [], [], None, None, lineno=145, col_offset=13), lineno=145, col_offset=8), Assign([Name('pl2', Store(), lineno=146, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=146, col_offset=14), 'readPlistFromString', Load(), lineno=146, col_offset=14), [Name('TESTDATA', Load(), lineno=146, col_offset=43)], [], None, None, lineno=146, col_offset=14), lineno=146, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=8), 'assertEqual', Load(), lineno=147, col_offset=8), [Call(Name('dict', Load(), lineno=147, col_offset=25), [Name('pl', Load(), lineno=147, col_offset=30)], [], None, None, lineno=147, col_offset=25), Call(Name('dict', Load(), lineno=147, col_offset=35), [Name('pl2', Load(), lineno=147, col_offset=40)], [], None, None, lineno=147, col_offset=35), Str("generated data was not identical to Apple's output", lineno=148, col_offset=25)], [], None, None, lineno=147, col_offset=8), lineno=147, col_offset=8)], [], lineno=144, col_offset=4), FunctionDef('test_stringio', arguments([Name('self', Param(), lineno=150, col_offset=22)], None, None, []), [ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=151, col_offset=8), Assign([Name('f', Store(), lineno=152, col_offset=8)], Call(Name('StringIO', Load(), lineno=152, col_offset=12), [], [], None, None, lineno=152, col_offset=12), lineno=152, col_offset=8), Assign([Name('pl', Store(), lineno=153, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=153, col_offset=13), '_create', Load(), lineno=153, col_offset=13), [], [], None, None, lineno=153, col_offset=13), lineno=153, col_offset=8), Expr(Call(Attribute(Name('plistlib', Load(), lineno=154, col_offset=8), 'writePlist', Load(), lineno=154, col_offset=8), [Name('pl', Load(), lineno=154, col_offset=28), Name('f', Load(), lineno=154, col_offset=32)], [], None, None, lineno=154, col_offset=8), lineno=154, col_offset=8), Assign([Name('pl2', Store(), lineno=155, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=155, col_offset=14), 'readPlist', Load(), lineno=155, col_offset=14), [Call(Name('StringIO', Load(), lineno=155, col_offset=33), [Call(Attribute(Name('f', Load(), lineno=155, col_offset=42), 'getvalue', Load(), lineno=155, col_offset=42), [], [], None, None, lineno=155, col_offset=42)], [], None, None, lineno=155, col_offset=33)], [], None, None, lineno=155, col_offset=14), lineno=155, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=8), 'assertEqual', Load(), lineno=156, col_offset=8), [Call(Name('dict', Load(), lineno=156, col_offset=25), [Name('pl', Load(), lineno=156, col_offset=30)], [], None, None, lineno=156, col_offset=25), Call(Name('dict', Load(), lineno=156, col_offset=35), [Name('pl2', Load(), lineno=156, col_offset=40)], [], None, None, lineno=156, col_offset=35)], [], None, None, lineno=156, col_offset=8), lineno=156, col_offset=8)], [], lineno=150, col_offset=4), FunctionDef('test_cstringio', arguments([Name('self', Param(), lineno=158, col_offset=23)], None, None, []), [ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=159, col_offset=8), Assign([Name('f', Store(), lineno=160, col_offset=8)], Call(Name('StringIO', Load(), lineno=160, col_offset=12), [], [], None, None, lineno=160, col_offset=12), lineno=160, col_offset=8), Assign([Name('pl', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=161, col_offset=13), '_create', Load(), lineno=161, col_offset=13), [], [], None, None, lineno=161, col_offset=13), lineno=161, col_offset=8), Expr(Call(Attribute(Name('plistlib', Load(), lineno=162, col_offset=8), 'writePlist', Load(), lineno=162, col_offset=8), [Name('pl', Load(), lineno=162, col_offset=28), Name('f', Load(), lineno=162, col_offset=32)], [], None, None, lineno=162, col_offset=8), lineno=162, col_offset=8), Assign([Name('pl2', Store(), lineno=163, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=163, col_offset=14), 'readPlist', Load(), lineno=163, col_offset=14), [Call(Name('StringIO', Load(), lineno=163, col_offset=33), [Call(Attribute(Name('f', Load(), lineno=163, col_offset=42), 'getvalue', Load(), lineno=163, col_offset=42), [], [], None, None, lineno=163, col_offset=42)], [], None, None, lineno=163, col_offset=33)], [], None, None, lineno=163, col_offset=14), lineno=163, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=8), 'assertEqual', Load(), lineno=164, col_offset=8), [Call(Name('dict', Load(), lineno=164, col_offset=25), [Name('pl', Load(), lineno=164, col_offset=30)], [], None, None, lineno=164, col_offset=25), Call(Name('dict', Load(), lineno=164, col_offset=35), [Name('pl2', Load(), lineno=164, col_offset=40)], [], None, None, lineno=164, col_offset=35)], [], None, None, lineno=164, col_offset=8), lineno=164, col_offset=8)], [], lineno=158, col_offset=4), FunctionDef('test_controlcharacters', arguments([Name('self', Param(), lineno=166, col_offset=31)], None, None, []), [For(Name('i', Store(), lineno=167, col_offset=12), Call(Name('range', Load(), lineno=167, col_offset=17), [Num(128, lineno=167, col_offset=23)], [], None, None, lineno=167, col_offset=17), [Assign([Name('c', Store(), lineno=168, col_offset=12)], Call(Name('chr', Load(), lineno=168, col_offset=16), [Name('i', Load(), lineno=168, col_offset=20)], [], None, None, lineno=168, col_offset=16), lineno=168, col_offset=12), Assign([Name('testString', Store(), lineno=169, col_offset=12)], BinOp(Str('string containing %s', lineno=169, col_offset=25), Mod(), Name('c', Load(), lineno=169, col_offset=50), lineno=169, col_offset=25), lineno=169, col_offset=12), If(BoolOp(Or(), [Compare(Name('i', Load(), lineno=170, col_offset=15), [GtE()], [Num(32, lineno=170, col_offset=20)], lineno=170, col_offset=15), Compare(Name('c', Load(), lineno=170, col_offset=26), [In()], [Str('\r\n\t', lineno=170, col_offset=31)], lineno=170, col_offset=26)], lineno=170, col_offset=15), [Expr(Call(Attribute(Name('plistlib', Load(), lineno=172, col_offset=16), 'writePlistToString', Load(), lineno=172, col_offset=16), [Name('testString', Load(), lineno=172, col_offset=44)], [], None, None, lineno=172, col_offset=16), lineno=172, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=174, col_offset=16), 'assertRaises', Load(), lineno=174, col_offset=16), [Name('ValueError', Load(), lineno=174, col_offset=34), Attribute(Name('plistlib', Load(), lineno=175, col_offset=34), 'writePlistToString', Load(), lineno=175, col_offset=34), Name('testString', Load(), lineno=176, col_offset=34)], [], None, None, lineno=174, col_offset=16), lineno=174, col_offset=16)], lineno=170, col_offset=12)], [], lineno=167, col_offset=8)], [], lineno=166, col_offset=4), FunctionDef('test_nondictroot', arguments([Name('self', Param(), lineno=178, col_offset=25)], None, None, []), [Assign([Name('test1', Store(), lineno=179, col_offset=8)], Str('abc', lineno=179, col_offset=16), lineno=179, col_offset=8), Assign([Name('test2', Store(), lineno=180, col_offset=8)], List([Num(1, lineno=180, col_offset=17), Num(2, lineno=180, col_offset=20), Num(3, lineno=180, col_offset=23), Str('abc', lineno=180, col_offset=26)], Load(), lineno=180, col_offset=16), lineno=180, col_offset=8), Assign([Name('result1', Store(), lineno=181, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=181, col_offset=18), 'readPlistFromString', Load(), lineno=181, col_offset=18), [Call(Attribute(Name('plistlib', Load(), lineno=181, col_offset=47), 'writePlistToString', Load(), lineno=181, col_offset=47), [Name('test1', Load(), lineno=181, col_offset=75)], [], None, None, lineno=181, col_offset=47)], [], None, None, lineno=181, col_offset=18), lineno=181, col_offset=8), Assign([Name('result2', Store(), lineno=182, col_offset=8)], Call(Attribute(Name('plistlib', Load(), lineno=182, col_offset=18), 'readPlistFromString', Load(), lineno=182, col_offset=18), [Call(Attribute(Name('plistlib', Load(), lineno=182, col_offset=47), 'writePlistToString', Load(), lineno=182, col_offset=47), [Name('test2', Load(), lineno=182, col_offset=75)], [], None, None, lineno=182, col_offset=47)], [], None, None, lineno=182, col_offset=18), lineno=182, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=183, col_offset=8), 'assertEqual', Load(), lineno=183, col_offset=8), [Name('test1', Load(), lineno=183, col_offset=25), Name('result1', Load(), lineno=183, col_offset=32)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=8), 'assertEqual', Load(), lineno=184, col_offset=8), [Name('test2', Load(), lineno=184, col_offset=25), Name('result2', Load(), lineno=184, col_offset=32)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8)], [], lineno=178, col_offset=4)], [], lineno=90, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Name('test_support', Load(), lineno=188, col_offset=4), 'run_unittest', Load(), lineno=188, col_offset=4), [Name('TestPlistlib', Load(), lineno=188, col_offset=30)], [], None, None, lineno=188, col_offset=4), lineno=188, col_offset=4)], [], lineno=187, col_offset=0), If(Compare(Name('__name__', Load(), lineno=191, col_offset=3), [Eq()], [Str('__main__', lineno=191, col_offset=15)], lineno=191, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=192, col_offset=4), [], [], None, None, lineno=192, col_offset=4), lineno=192, col_offset=4)], [], lineno=191, col_offset=0)])
