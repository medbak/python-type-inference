Module([Expr(Str("Fixer that changes map(F, ...) into list(map(F, ...)) unless there\nexists a 'from future_builtins import map' statement in the top-level\nnamespace.\n\nAs a special case, map(None, X) is changed into list(X).  (This is\nnecessary because the semantics are changed in this case -- the new\nmap(None, X) is equivalent to [(x,) for x in X].)\n\nWe avoid the transformation (except for the special case mentioned\nabove) if the map() call is directly contained in iter(<>), list(<>),\ntuple(<>), sorted(<>), ...join(<>), or for V in <>:.\n\nNOTE: This is still not correct if the original code was depending on\nmap(F, X, Y, ...) to go on until the longest argument is exhausted,\nsubstituting None for missing values -- like zip(), it now stops as\nsoon as the shortest argument is exhausted.\n", lineno=20, col_offset=-1), lineno=20, col_offset=-1), ImportFrom('pgen2', [alias('token', None)], 2, lineno=23, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=24, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('Call', None), alias('ListComp', None), alias('in_special_context', None)], 2, lineno=25, col_offset=0), ImportFrom('pygram', [alias('python_symbols', 'syms')], 2, lineno=26, col_offset=0), ClassDef('FixMap', [Attribute(Name('fixer_base', Load(), lineno=28, col_offset=13), 'ConditionalFix', Load(), lineno=28, col_offset=13)], [Assign([Name('BM_compatible', Store(), lineno=29, col_offset=4)], Name('True', Load(), lineno=29, col_offset=20), lineno=29, col_offset=4), Assign([Name('PATTERN', Store(), lineno=31, col_offset=4)], Str("\n    map_none=power<\n        'map'\n        trailer< '(' arglist< 'None' ',' arg=any [','] > ')' >\n    >\n    |\n    map_lambda=power<\n        'map'\n        trailer<\n            '('\n            arglist<\n                lambdef< 'lambda'\n                         (fp=NAME | vfpdef< '(' fp=NAME ')'> ) ':' xp=any\n                >\n                ','\n                it=any\n            >\n            ')'\n        >\n    >\n    |\n    power<\n        'map' trailer< '(' [arglist=any] ')' >\n    >\n    ", lineno=55, col_offset=-1), lineno=31, col_offset=4), Assign([Name('skip_on', Store(), lineno=57, col_offset=4)], Str('future_builtins.map', lineno=57, col_offset=14), lineno=57, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=59, col_offset=18), Name('node', Param(), lineno=59, col_offset=24), Name('results', Param(), lineno=59, col_offset=30)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=60, col_offset=11), 'should_skip', Load(), lineno=60, col_offset=11), [Name('node', Load(), lineno=60, col_offset=28)], [], None, None, lineno=60, col_offset=11), [Return(None, lineno=61, col_offset=12)], [], lineno=60, col_offset=8), If(Compare(Attribute(Attribute(Name('node', Load(), lineno=63, col_offset=11), 'parent', Load(), lineno=63, col_offset=11), 'type', Load(), lineno=63, col_offset=11), [Eq()], [Attribute(Name('syms', Load(), lineno=63, col_offset=31), 'simple_stmt', Load(), lineno=63, col_offset=31)], lineno=63, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=12), 'warning', Load(), lineno=64, col_offset=12), [Name('node', Load(), lineno=64, col_offset=25), Str('You should use a for loop here', lineno=64, col_offset=31)], [], None, None, lineno=64, col_offset=12), lineno=64, col_offset=12), Assign([Name('new', Store(), lineno=65, col_offset=12)], Call(Attribute(Name('node', Load(), lineno=65, col_offset=18), 'clone', Load(), lineno=65, col_offset=18), [], [], None, None, lineno=65, col_offset=18), lineno=65, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=66, col_offset=12), 'prefix', Store(), lineno=66, col_offset=12)], Str(u'', lineno=66, col_offset=25), lineno=66, col_offset=12), Assign([Name('new', Store(), lineno=67, col_offset=12)], Call(Name('Call', Load(), lineno=67, col_offset=18), [Call(Name('Name', Load(), lineno=67, col_offset=23), [Str(u'list', lineno=67, col_offset=28)], [], None, None, lineno=67, col_offset=23), List([Name('new', Load(), lineno=67, col_offset=39)], Load(), lineno=67, col_offset=38)], [], None, None, lineno=67, col_offset=18), lineno=67, col_offset=12)], [If(Compare(Str('map_lambda', lineno=68, col_offset=13), [In()], [Name('results', Load(), lineno=68, col_offset=29)], lineno=68, col_offset=13), [Assign([Name('new', Store(), lineno=69, col_offset=12)], Call(Name('ListComp', Load(), lineno=69, col_offset=18), [Call(Attribute(Subscript(Name('results', Load(), lineno=69, col_offset=27), Index(Str('xp', lineno=69, col_offset=35)), Load(), lineno=69, col_offset=27), 'clone', Load(), lineno=69, col_offset=27), [], [], None, None, lineno=69, col_offset=27), Call(Attribute(Subscript(Name('results', Load(), lineno=70, col_offset=27), Index(Str('fp', lineno=70, col_offset=35)), Load(), lineno=70, col_offset=27), 'clone', Load(), lineno=70, col_offset=27), [], [], None, None, lineno=70, col_offset=27), Call(Attribute(Subscript(Name('results', Load(), lineno=71, col_offset=27), Index(Str('it', lineno=71, col_offset=35)), Load(), lineno=71, col_offset=27), 'clone', Load(), lineno=71, col_offset=27), [], [], None, None, lineno=71, col_offset=27)], [], None, None, lineno=69, col_offset=18), lineno=69, col_offset=12)], [If(Compare(Str('map_none', lineno=73, col_offset=15), [In()], [Name('results', Load(), lineno=73, col_offset=29)], lineno=73, col_offset=15), [Assign([Name('new', Store(), lineno=74, col_offset=16)], Call(Attribute(Subscript(Name('results', Load(), lineno=74, col_offset=22), Index(Str('arg', lineno=74, col_offset=30)), Load(), lineno=74, col_offset=22), 'clone', Load(), lineno=74, col_offset=22), [], [], None, None, lineno=74, col_offset=22), lineno=74, col_offset=16)], [If(Compare(Str('arglist', lineno=76, col_offset=19), [In()], [Name('results', Load(), lineno=76, col_offset=32)], lineno=76, col_offset=19), [Assign([Name('args', Store(), lineno=77, col_offset=20)], Subscript(Name('results', Load(), lineno=77, col_offset=27), Index(Str('arglist', lineno=77, col_offset=35)), Load(), lineno=77, col_offset=27), lineno=77, col_offset=20), If(BoolOp(And(), [Compare(Attribute(Name('args', Load(), lineno=78, col_offset=23), 'type', Load(), lineno=78, col_offset=23), [Eq()], [Attribute(Name('syms', Load(), lineno=78, col_offset=36), 'arglist', Load(), lineno=78, col_offset=36)], lineno=78, col_offset=23), Compare(Attribute(Subscript(Attribute(Name('args', Load(), lineno=79, col_offset=23), 'children', Load(), lineno=79, col_offset=23), Index(Num(0, lineno=79, col_offset=37)), Load(), lineno=79, col_offset=23), 'type', Load(), lineno=79, col_offset=23), [Eq()], [Attribute(Name('token', Load(), lineno=79, col_offset=48), 'NAME', Load(), lineno=79, col_offset=48)], lineno=79, col_offset=23), Compare(Attribute(Subscript(Attribute(Name('args', Load(), lineno=80, col_offset=23), 'children', Load(), lineno=80, col_offset=23), Index(Num(0, lineno=80, col_offset=37)), Load(), lineno=80, col_offset=23), 'value', Load(), lineno=80, col_offset=23), [Eq()], [Str('None', lineno=80, col_offset=49)], lineno=80, col_offset=23)], lineno=78, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=24), 'warning', Load(), lineno=81, col_offset=24), [Name('node', Load(), lineno=81, col_offset=37), Str('cannot convert map(None, ...) with multiple arguments because map() now truncates to the shortest sequence', lineno=81, col_offset=43)], [], None, None, lineno=81, col_offset=24), lineno=81, col_offset=24), Return(None, lineno=84, col_offset=24)], [], lineno=78, col_offset=20)], [], lineno=76, col_offset=16), If(Call(Name('in_special_context', Load(), lineno=85, col_offset=19), [Name('node', Load(), lineno=85, col_offset=38)], [], None, None, lineno=85, col_offset=19), [Return(Name('None', Load(), lineno=86, col_offset=27), lineno=86, col_offset=20)], [], lineno=85, col_offset=16), Assign([Name('new', Store(), lineno=87, col_offset=16)], Call(Attribute(Name('node', Load(), lineno=87, col_offset=22), 'clone', Load(), lineno=87, col_offset=22), [], [], None, None, lineno=87, col_offset=22), lineno=87, col_offset=16)], lineno=73, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=88, col_offset=12), 'prefix', Store(), lineno=88, col_offset=12)], Str(u'', lineno=88, col_offset=25), lineno=88, col_offset=12), Assign([Name('new', Store(), lineno=89, col_offset=12)], Call(Name('Call', Load(), lineno=89, col_offset=18), [Call(Name('Name', Load(), lineno=89, col_offset=23), [Str(u'list', lineno=89, col_offset=28)], [], None, None, lineno=89, col_offset=23), List([Name('new', Load(), lineno=89, col_offset=39)], Load(), lineno=89, col_offset=38)], [], None, None, lineno=89, col_offset=18), lineno=89, col_offset=12)], lineno=68, col_offset=13)], lineno=63, col_offset=8), Assign([Attribute(Name('new', Load(), lineno=90, col_offset=8), 'prefix', Store(), lineno=90, col_offset=8)], Attribute(Name('node', Load(), lineno=90, col_offset=21), 'prefix', Load(), lineno=90, col_offset=21), lineno=90, col_offset=8), Return(Name('new', Load(), lineno=91, col_offset=15), lineno=91, col_offset=8)], [], lineno=59, col_offset=4)], [], lineno=28, col_offset=0)])
