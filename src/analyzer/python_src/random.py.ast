Module([Expr(Str('Random variable generators.\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* Without a direct way to compute N steps forward, the semantics of\n  jumpahead(n) are weakened to simply jump to another distant state and rely\n  on the large period to avoid overlapping sequences.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n', lineno=40, col_offset=-1), lineno=40, col_offset=-1), ImportFrom('__future__', [alias('division', None)], 0, lineno=42, col_offset=0), ImportFrom('warnings', [alias('warn', '_warn')], 0, lineno=43, col_offset=0), ImportFrom('types', [alias('MethodType', '_MethodType'), alias('BuiltinMethodType', '_BuiltinMethodType')], 0, lineno=44, col_offset=0), ImportFrom('math', [alias('log', '_log'), alias('exp', '_exp'), alias('pi', '_pi'), alias('e', '_e'), alias('ceil', '_ceil')], 0, lineno=45, col_offset=0), ImportFrom('math', [alias('sqrt', '_sqrt'), alias('acos', '_acos'), alias('cos', '_cos'), alias('sin', '_sin')], 0, lineno=46, col_offset=0), ImportFrom('os', [alias('urandom', '_urandom')], 0, lineno=47, col_offset=0), ImportFrom('binascii', [alias('hexlify', '_hexlify')], 0, lineno=48, col_offset=0), Import([alias('hashlib', '_hashlib')], lineno=49, col_offset=0), Assign([Name('__all__', Store(), lineno=51, col_offset=0)], List([Str('Random', lineno=51, col_offset=11), Str('seed', lineno=51, col_offset=20), Str('random', lineno=51, col_offset=27), Str('uniform', lineno=51, col_offset=36), Str('randint', lineno=51, col_offset=46), Str('choice', lineno=51, col_offset=56), Str('sample', lineno=51, col_offset=65), Str('randrange', lineno=52, col_offset=11), Str('shuffle', lineno=52, col_offset=23), Str('normalvariate', lineno=52, col_offset=33), Str('lognormvariate', lineno=52, col_offset=49), Str('expovariate', lineno=53, col_offset=11), Str('vonmisesvariate', lineno=53, col_offset=25), Str('gammavariate', lineno=53, col_offset=43), Str('triangular', lineno=53, col_offset=58), Str('gauss', lineno=54, col_offset=11), Str('betavariate', lineno=54, col_offset=19), Str('paretovariate', lineno=54, col_offset=33), Str('weibullvariate', lineno=54, col_offset=49), Str('getstate', lineno=55, col_offset=11), Str('setstate', lineno=55, col_offset=22), Str('jumpahead', lineno=55, col_offset=33), Str('WichmannHill', lineno=55, col_offset=46), Str('getrandbits', lineno=55, col_offset=62), Str('SystemRandom', lineno=56, col_offset=11)], Load(), lineno=51, col_offset=10), lineno=51, col_offset=0), Assign([Name('NV_MAGICCONST', Store(), lineno=58, col_offset=0)], BinOp(BinOp(Num(4, lineno=58, col_offset=16), Mult(), Call(Name('_exp', Load(), lineno=58, col_offset=20), [Num(-0.5, lineno=58, col_offset=26)], [], None, None, lineno=58, col_offset=20), lineno=58, col_offset=16), Div(), Call(Name('_sqrt', Load(), lineno=58, col_offset=31), [Num(2.0, lineno=58, col_offset=37)], [], None, None, lineno=58, col_offset=31), lineno=58, col_offset=30), lineno=58, col_offset=0), Assign([Name('TWOPI', Store(), lineno=59, col_offset=0)], BinOp(Num(2.0, lineno=59, col_offset=8), Mult(), Name('_pi', Load(), lineno=59, col_offset=12), lineno=59, col_offset=8), lineno=59, col_offset=0), Assign([Name('LOG4', Store(), lineno=60, col_offset=0)], Call(Name('_log', Load(), lineno=60, col_offset=7), [Num(4.0, lineno=60, col_offset=12)], [], None, None, lineno=60, col_offset=7), lineno=60, col_offset=0), Assign([Name('SG_MAGICCONST', Store(), lineno=61, col_offset=0)], BinOp(Num(1.0, lineno=61, col_offset=16), Add(), Call(Name('_log', Load(), lineno=61, col_offset=22), [Num(4.5, lineno=61, col_offset=27)], [], None, None, lineno=61, col_offset=22), lineno=61, col_offset=16), lineno=61, col_offset=0), Assign([Name('BPF', Store(), lineno=62, col_offset=0)], Num(53, lineno=62, col_offset=6), lineno=62, col_offset=0), Assign([Name('RECIP_BPF', Store(), lineno=63, col_offset=0)], BinOp(Num(2, lineno=63, col_offset=12), Pow(), UnaryOp(USub(), Name('BPF', Load(), lineno=63, col_offset=16), lineno=63, col_offset=15), lineno=63, col_offset=12), lineno=63, col_offset=0), Import([alias('_random', None)], lineno=70, col_offset=0), ClassDef('Random', [Attribute(Name('_random', Load(), lineno=72, col_offset=13), 'Random', Load(), lineno=72, col_offset=13)], [Expr(Str("Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.  Especially useful for multi-threaded programs, creating\n    a different instance of Random for each thread, and using the jumpahead()\n    method to ensure that the generated sequences seen by each thread don't\n    overlap.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods: random(), seed(), getstate(), setstate() and jumpahead().\n    Optionally, implement a getrandbits() method so that randrange() can cover\n    arbitrarily large ranges.\n\n    ", lineno=87, col_offset=-1), lineno=87, col_offset=-1), Assign([Name('VERSION', Store(), lineno=89, col_offset=4)], Num(3, lineno=89, col_offset=14), lineno=89, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=91, col_offset=17), Name('x', Param(), lineno=91, col_offset=23)], None, None, [Name('None', Load(), lineno=91, col_offset=25)]), [Expr(Str('Initialize an instance.\n\n        Optional argument x controls seeding, as for Random.seed().\n        ', lineno=95, col_offset=-1), lineno=95, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'seed', Load(), lineno=97, col_offset=8), [Name('x', Load(), lineno=97, col_offset=18)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=98, col_offset=8), 'gauss_next', Store(), lineno=98, col_offset=8)], Name('None', Load(), lineno=98, col_offset=26), lineno=98, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('seed', arguments([Name('self', Param(), lineno=100, col_offset=13), Name('a', Param(), lineno=100, col_offset=19)], None, None, [Name('None', Load(), lineno=100, col_offset=21)]), [Expr(Str('Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n        ', lineno=107, col_offset=-1), lineno=107, col_offset=-1), If(Compare(Name('a', Load(), lineno=109, col_offset=11), [Is()], [Name('None', Load(), lineno=109, col_offset=16)], lineno=109, col_offset=11), [TryExcept([Assign([Name('a', Store(), lineno=111, col_offset=16)], Call(Name('long', Load(), lineno=111, col_offset=20), [Call(Name('_hexlify', Load(), lineno=111, col_offset=25), [Call(Name('_urandom', Load(), lineno=111, col_offset=34), [Num(16, lineno=111, col_offset=43)], [], None, None, lineno=111, col_offset=34)], [], None, None, lineno=111, col_offset=25), Num(16, lineno=111, col_offset=49)], [], None, None, lineno=111, col_offset=20), lineno=111, col_offset=16)], [ExceptHandler(Name('NotImplementedError', Load(), lineno=112, col_offset=19), None, [Import([alias('time', None)], lineno=113, col_offset=16), Assign([Name('a', Store(), lineno=114, col_offset=16)], Call(Name('long', Load(), lineno=114, col_offset=20), [BinOp(Call(Attribute(Name('time', Load(), lineno=114, col_offset=25), 'time', Load(), lineno=114, col_offset=25), [], [], None, None, lineno=114, col_offset=25), Mult(), Num(256, lineno=114, col_offset=39), lineno=114, col_offset=25)], [], None, None, lineno=114, col_offset=20), lineno=114, col_offset=16)], lineno=112, col_offset=12)], [], lineno=110, col_offset=12)], [], lineno=109, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=116, col_offset=8), [Name('Random', Load(), lineno=116, col_offset=14), Name('self', Load(), lineno=116, col_offset=22)], [], None, None, lineno=116, col_offset=8), 'seed', Load(), lineno=116, col_offset=8), [Name('a', Load(), lineno=116, col_offset=33)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=117, col_offset=8), 'gauss_next', Store(), lineno=117, col_offset=8)], Name('None', Load(), lineno=117, col_offset=26), lineno=117, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=119, col_offset=17)], None, None, []), [Expr(Str('Return internal state; can be passed to setstate() later.', lineno=120, col_offset=8), lineno=120, col_offset=8), Return(Tuple([Attribute(Name('self', Load(), lineno=121, col_offset=15), 'VERSION', Load(), lineno=121, col_offset=15), Call(Attribute(Call(Name('super', Load(), lineno=121, col_offset=29), [Name('Random', Load(), lineno=121, col_offset=35), Name('self', Load(), lineno=121, col_offset=43)], [], None, None, lineno=121, col_offset=29), 'getstate', Load(), lineno=121, col_offset=29), [], [], None, None, lineno=121, col_offset=29), Attribute(Name('self', Load(), lineno=121, col_offset=61), 'gauss_next', Load(), lineno=121, col_offset=61)], Load(), lineno=121, col_offset=15), lineno=121, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=123, col_offset=17), Name('state', Param(), lineno=123, col_offset=23)], None, None, []), [Expr(Str('Restore internal state from object returned by getstate().', lineno=124, col_offset=8), lineno=124, col_offset=8), Assign([Name('version', Store(), lineno=125, col_offset=8)], Subscript(Name('state', Load(), lineno=125, col_offset=18), Index(Num(0, lineno=125, col_offset=24)), Load(), lineno=125, col_offset=18), lineno=125, col_offset=8), If(Compare(Name('version', Load(), lineno=126, col_offset=11), [Eq()], [Num(3, lineno=126, col_offset=22)], lineno=126, col_offset=11), [Assign([Tuple([Name('version', Store(), lineno=127, col_offset=12), Name('internalstate', Store(), lineno=127, col_offset=21), Attribute(Name('self', Load(), lineno=127, col_offset=36), 'gauss_next', Store(), lineno=127, col_offset=36)], Store(), lineno=127, col_offset=12)], Name('state', Load(), lineno=127, col_offset=54), lineno=127, col_offset=12), Expr(Call(Attribute(Call(Name('super', Load(), lineno=128, col_offset=12), [Name('Random', Load(), lineno=128, col_offset=18), Name('self', Load(), lineno=128, col_offset=26)], [], None, None, lineno=128, col_offset=12), 'setstate', Load(), lineno=128, col_offset=12), [Name('internalstate', Load(), lineno=128, col_offset=41)], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=12)], [If(Compare(Name('version', Load(), lineno=129, col_offset=13), [Eq()], [Num(2, lineno=129, col_offset=24)], lineno=129, col_offset=13), [Assign([Tuple([Name('version', Store(), lineno=130, col_offset=12), Name('internalstate', Store(), lineno=130, col_offset=21), Attribute(Name('self', Load(), lineno=130, col_offset=36), 'gauss_next', Store(), lineno=130, col_offset=36)], Store(), lineno=130, col_offset=12)], Name('state', Load(), lineno=130, col_offset=54), lineno=130, col_offset=12), TryExcept([Assign([Name('internalstate', Store(), lineno=136, col_offset=16)], Call(Name('tuple', Load(), lineno=136, col_offset=32), [GeneratorExp(BinOp(Call(Name('long', Load(), lineno=136, col_offset=39), [Name('x', Load(), lineno=136, col_offset=44)], [], None, None, lineno=136, col_offset=39), Mod(), BinOp(Num(2, lineno=136, col_offset=50), Pow(), Num(32, lineno=136, col_offset=53), lineno=136, col_offset=50), lineno=136, col_offset=39), [comprehension(Name('x', Store(), lineno=136, col_offset=61), Name('internalstate', Load(), lineno=136, col_offset=66), [])], lineno=136, col_offset=39)], [], None, None, lineno=136, col_offset=32), lineno=136, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=137, col_offset=19), Name('e', Store(), lineno=137, col_offset=31), [Raise(Name('TypeError', Load(), lineno=138, col_offset=22), Name('e', Load(), lineno=138, col_offset=33), None, lineno=138, col_offset=16)], lineno=137, col_offset=12)], [], lineno=135, col_offset=12), Expr(Call(Attribute(Call(Name('super', Load(), lineno=139, col_offset=12), [Name('Random', Load(), lineno=139, col_offset=18), Name('self', Load(), lineno=139, col_offset=26)], [], None, None, lineno=139, col_offset=12), 'setstate', Load(), lineno=139, col_offset=12), [Name('internalstate', Load(), lineno=139, col_offset=41)], [], None, None, lineno=139, col_offset=12), lineno=139, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=141, col_offset=18), [BinOp(Str('state with version %s passed to Random.setstate() of version %s', lineno=141, col_offset=29), Mod(), Tuple([Name('version', Load(), lineno=143, col_offset=30), Attribute(Name('self', Load(), lineno=143, col_offset=39), 'VERSION', Load(), lineno=143, col_offset=39)], Load(), lineno=143, col_offset=30), lineno=141, col_offset=29)], [], None, None, lineno=141, col_offset=18), None, None, lineno=141, col_offset=12)], lineno=129, col_offset=13)], lineno=126, col_offset=8)], [], lineno=123, col_offset=4), FunctionDef('jumpahead', arguments([Name('self', Param(), lineno=145, col_offset=18), Name('n', Param(), lineno=145, col_offset=24)], None, None, []), [Expr(Str('Change the internal state to one that is likely far away\n        from the current state.  This method will not be in Py3.x,\n        so it is better to simply reseed.\n        ', lineno=149, col_offset=-1), lineno=149, col_offset=-1), Assign([Name('s', Store(), lineno=153, col_offset=8)], BinOp(Call(Name('repr', Load(), lineno=153, col_offset=12), [Name('n', Load(), lineno=153, col_offset=17)], [], None, None, lineno=153, col_offset=12), Add(), Call(Name('repr', Load(), lineno=153, col_offset=22), [Call(Attribute(Name('self', Load(), lineno=153, col_offset=27), 'getstate', Load(), lineno=153, col_offset=27), [], [], None, None, lineno=153, col_offset=27)], [], None, None, lineno=153, col_offset=22), lineno=153, col_offset=12), lineno=153, col_offset=8), Assign([Name('n', Store(), lineno=154, col_offset=8)], Call(Name('int', Load(), lineno=154, col_offset=12), [Call(Attribute(Call(Attribute(Name('_hashlib', Load(), lineno=154, col_offset=16), 'new', Load(), lineno=154, col_offset=16), [Str('sha512', lineno=154, col_offset=29), Name('s', Load(), lineno=154, col_offset=39)], [], None, None, lineno=154, col_offset=16), 'hexdigest', Load(), lineno=154, col_offset=16), [], [], None, None, lineno=154, col_offset=16), Num(16, lineno=154, col_offset=55)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=155, col_offset=8), [Name('Random', Load(), lineno=155, col_offset=14), Name('self', Load(), lineno=155, col_offset=22)], [], None, None, lineno=155, col_offset=8), 'jumpahead', Load(), lineno=155, col_offset=8), [Name('n', Load(), lineno=155, col_offset=38)], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8)], [], lineno=145, col_offset=4), FunctionDef('__getstate__', arguments([Name('self', Param(), lineno=162, col_offset=21)], None, None, []), [Return(Call(Attribute(Name('self', Load(), lineno=163, col_offset=15), 'getstate', Load(), lineno=163, col_offset=15), [], [], None, None, lineno=163, col_offset=15), lineno=163, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('__setstate__', arguments([Name('self', Param(), lineno=165, col_offset=21), Name('state', Param(), lineno=165, col_offset=27)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=166, col_offset=8), 'setstate', Load(), lineno=166, col_offset=8), [Name('state', Load(), lineno=166, col_offset=22)], [], None, None, lineno=166, col_offset=8), lineno=166, col_offset=8)], [], lineno=165, col_offset=4), FunctionDef('__reduce__', arguments([Name('self', Param(), lineno=168, col_offset=19)], None, None, []), [Return(Tuple([Attribute(Name('self', Load(), lineno=169, col_offset=15), '__class__', Load(), lineno=169, col_offset=15), Tuple([], Load(), lineno=169, col_offset=31), Call(Attribute(Name('self', Load(), lineno=169, col_offset=35), 'getstate', Load(), lineno=169, col_offset=35), [], [], None, None, lineno=169, col_offset=35)], Load(), lineno=169, col_offset=15), lineno=169, col_offset=8)], [], lineno=168, col_offset=4), FunctionDef('randrange', arguments([Name('self', Param(), lineno=173, col_offset=18), Name('start', Param(), lineno=173, col_offset=24), Name('stop', Param(), lineno=173, col_offset=31), Name('step', Param(), lineno=173, col_offset=42), Name('int', Param(), lineno=173, col_offset=50), Name('default', Param(), lineno=173, col_offset=59), Name('maxwidth', Param(), lineno=174, col_offset=18)], None, None, [Name('None', Load(), lineno=173, col_offset=36), Num(1, lineno=173, col_offset=47), Name('int', Load(), lineno=173, col_offset=54), Name('None', Load(), lineno=173, col_offset=67), BinOp(Num(1L, lineno=174, col_offset=27), LShift(), Name('BPF', Load(), lineno=174, col_offset=31), lineno=174, col_offset=27)]), [Expr(Str("Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n        Do not supply the 'int', 'default', and 'maxwidth' arguments.\n        ", lineno=180, col_offset=-1), lineno=180, col_offset=-1), Assign([Name('istart', Store(), lineno=184, col_offset=8)], Call(Name('int', Load(), lineno=184, col_offset=17), [Name('start', Load(), lineno=184, col_offset=21)], [], None, None, lineno=184, col_offset=17), lineno=184, col_offset=8), If(Compare(Name('istart', Load(), lineno=185, col_offset=11), [NotEq()], [Name('start', Load(), lineno=185, col_offset=21)], lineno=185, col_offset=11), [Raise(Name('ValueError', Load(), lineno=186, col_offset=18), Str('non-integer arg 1 for randrange()', lineno=186, col_offset=30), None, lineno=186, col_offset=12)], [], lineno=185, col_offset=8), If(Compare(Name('stop', Load(), lineno=187, col_offset=11), [Is()], [Name('default', Load(), lineno=187, col_offset=19)], lineno=187, col_offset=11), [If(Compare(Name('istart', Load(), lineno=188, col_offset=15), [Gt()], [Num(0, lineno=188, col_offset=24)], lineno=188, col_offset=15), [If(Compare(Name('istart', Load(), lineno=189, col_offset=19), [GtE()], [Name('maxwidth', Load(), lineno=189, col_offset=29)], lineno=189, col_offset=19), [Return(Call(Attribute(Name('self', Load(), lineno=190, col_offset=27), '_randbelow', Load(), lineno=190, col_offset=27), [Name('istart', Load(), lineno=190, col_offset=43)], [], None, None, lineno=190, col_offset=27), lineno=190, col_offset=20)], [], lineno=189, col_offset=16), Return(Call(Name('int', Load(), lineno=191, col_offset=23), [BinOp(Call(Attribute(Name('self', Load(), lineno=191, col_offset=27), 'random', Load(), lineno=191, col_offset=27), [], [], None, None, lineno=191, col_offset=27), Mult(), Name('istart', Load(), lineno=191, col_offset=43), lineno=191, col_offset=27)], [], None, None, lineno=191, col_offset=23), lineno=191, col_offset=16)], [], lineno=188, col_offset=12), Raise(Name('ValueError', Load(), lineno=192, col_offset=18), Str('empty range for randrange()', lineno=192, col_offset=30), None, lineno=192, col_offset=12)], [], lineno=187, col_offset=8), Assign([Name('istop', Store(), lineno=195, col_offset=8)], Call(Name('int', Load(), lineno=195, col_offset=16), [Name('stop', Load(), lineno=195, col_offset=20)], [], None, None, lineno=195, col_offset=16), lineno=195, col_offset=8), If(Compare(Name('istop', Load(), lineno=196, col_offset=11), [NotEq()], [Name('stop', Load(), lineno=196, col_offset=20)], lineno=196, col_offset=11), [Raise(Name('ValueError', Load(), lineno=197, col_offset=18), Str('non-integer stop for randrange()', lineno=197, col_offset=30), None, lineno=197, col_offset=12)], [], lineno=196, col_offset=8), Assign([Name('width', Store(), lineno=198, col_offset=8)], BinOp(Name('istop', Load(), lineno=198, col_offset=16), Sub(), Name('istart', Load(), lineno=198, col_offset=24), lineno=198, col_offset=16), lineno=198, col_offset=8), If(BoolOp(And(), [Compare(Name('step', Load(), lineno=199, col_offset=11), [Eq()], [Num(1, lineno=199, col_offset=19)], lineno=199, col_offset=11), Compare(Name('width', Load(), lineno=199, col_offset=25), [Gt()], [Num(0, lineno=199, col_offset=33)], lineno=199, col_offset=25)], lineno=199, col_offset=11), [If(Compare(Name('width', Load(), lineno=213, col_offset=15), [GtE()], [Name('maxwidth', Load(), lineno=213, col_offset=24)], lineno=213, col_offset=15), [Return(Call(Name('int', Load(), lineno=214, col_offset=23), [BinOp(Name('istart', Load(), lineno=214, col_offset=27), Add(), Call(Attribute(Name('self', Load(), lineno=214, col_offset=36), '_randbelow', Load(), lineno=214, col_offset=36), [Name('width', Load(), lineno=214, col_offset=52)], [], None, None, lineno=214, col_offset=36), lineno=214, col_offset=27)], [], None, None, lineno=214, col_offset=23), lineno=214, col_offset=16)], [], lineno=213, col_offset=12), Return(Call(Name('int', Load(), lineno=215, col_offset=19), [BinOp(Name('istart', Load(), lineno=215, col_offset=23), Add(), Call(Name('int', Load(), lineno=215, col_offset=32), [BinOp(Call(Attribute(Name('self', Load(), lineno=215, col_offset=36), 'random', Load(), lineno=215, col_offset=36), [], [], None, None, lineno=215, col_offset=36), Mult(), Name('width', Load(), lineno=215, col_offset=50), lineno=215, col_offset=36)], [], None, None, lineno=215, col_offset=32), lineno=215, col_offset=23)], [], None, None, lineno=215, col_offset=19), lineno=215, col_offset=12)], [], lineno=199, col_offset=8), If(Compare(Name('step', Load(), lineno=216, col_offset=11), [Eq()], [Num(1, lineno=216, col_offset=19)], lineno=216, col_offset=11), [Raise(Name('ValueError', Load(), lineno=217, col_offset=18), BinOp(Str('empty range for randrange() (%d,%d, %d)', lineno=217, col_offset=30), Mod(), Tuple([Name('istart', Load(), lineno=217, col_offset=75), Name('istop', Load(), lineno=217, col_offset=83), Name('width', Load(), lineno=217, col_offset=90)], Load(), lineno=217, col_offset=75), lineno=217, col_offset=30), None, lineno=217, col_offset=12)], [], lineno=216, col_offset=8), Assign([Name('istep', Store(), lineno=220, col_offset=8)], Call(Name('int', Load(), lineno=220, col_offset=16), [Name('step', Load(), lineno=220, col_offset=20)], [], None, None, lineno=220, col_offset=16), lineno=220, col_offset=8), If(Compare(Name('istep', Load(), lineno=221, col_offset=11), [NotEq()], [Name('step', Load(), lineno=221, col_offset=20)], lineno=221, col_offset=11), [Raise(Name('ValueError', Load(), lineno=222, col_offset=18), Str('non-integer step for randrange()', lineno=222, col_offset=30), None, lineno=222, col_offset=12)], [], lineno=221, col_offset=8), If(Compare(Name('istep', Load(), lineno=223, col_offset=11), [Gt()], [Num(0, lineno=223, col_offset=19)], lineno=223, col_offset=11), [Assign([Name('n', Store(), lineno=224, col_offset=12)], BinOp(BinOp(BinOp(Name('width', Load(), lineno=224, col_offset=17), Add(), Name('istep', Load(), lineno=224, col_offset=25), lineno=224, col_offset=17), Sub(), Num(1, lineno=224, col_offset=33), lineno=224, col_offset=31), FloorDiv(), Name('istep', Load(), lineno=224, col_offset=39), lineno=224, col_offset=16), lineno=224, col_offset=12)], [If(Compare(Name('istep', Load(), lineno=225, col_offset=13), [Lt()], [Num(0, lineno=225, col_offset=21)], lineno=225, col_offset=13), [Assign([Name('n', Store(), lineno=226, col_offset=12)], BinOp(BinOp(BinOp(Name('width', Load(), lineno=226, col_offset=17), Add(), Name('istep', Load(), lineno=226, col_offset=25), lineno=226, col_offset=17), Add(), Num(1, lineno=226, col_offset=33), lineno=226, col_offset=31), FloorDiv(), Name('istep', Load(), lineno=226, col_offset=39), lineno=226, col_offset=16), lineno=226, col_offset=12)], [Raise(Name('ValueError', Load(), lineno=228, col_offset=18), Str('zero step for randrange()', lineno=228, col_offset=30), None, lineno=228, col_offset=12)], lineno=225, col_offset=13)], lineno=223, col_offset=8), If(Compare(Name('n', Load(), lineno=230, col_offset=11), [LtE()], [Num(0, lineno=230, col_offset=16)], lineno=230, col_offset=11), [Raise(Name('ValueError', Load(), lineno=231, col_offset=18), Str('empty range for randrange()', lineno=231, col_offset=30), None, lineno=231, col_offset=12)], [], lineno=230, col_offset=8), If(Compare(Name('n', Load(), lineno=233, col_offset=11), [GtE()], [Name('maxwidth', Load(), lineno=233, col_offset=16)], lineno=233, col_offset=11), [Return(BinOp(Name('istart', Load(), lineno=234, col_offset=19), Add(), BinOp(Name('istep', Load(), lineno=234, col_offset=28), Mult(), Call(Attribute(Name('self', Load(), lineno=234, col_offset=34), '_randbelow', Load(), lineno=234, col_offset=34), [Name('n', Load(), lineno=234, col_offset=50)], [], None, None, lineno=234, col_offset=34), lineno=234, col_offset=28), lineno=234, col_offset=19), lineno=234, col_offset=12)], [], lineno=233, col_offset=8), Return(BinOp(Name('istart', Load(), lineno=235, col_offset=15), Add(), BinOp(Name('istep', Load(), lineno=235, col_offset=24), Mult(), Call(Name('int', Load(), lineno=235, col_offset=30), [BinOp(Call(Attribute(Name('self', Load(), lineno=235, col_offset=34), 'random', Load(), lineno=235, col_offset=34), [], [], None, None, lineno=235, col_offset=34), Mult(), Name('n', Load(), lineno=235, col_offset=50), lineno=235, col_offset=34)], [], None, None, lineno=235, col_offset=30), lineno=235, col_offset=24), lineno=235, col_offset=15), lineno=235, col_offset=8)], [], lineno=173, col_offset=4), FunctionDef('randint', arguments([Name('self', Param(), lineno=237, col_offset=16), Name('a', Param(), lineno=237, col_offset=22), Name('b', Param(), lineno=237, col_offset=25)], None, None, []), [Expr(Str('Return random integer in range [a, b], including both end points.\n        ', lineno=239, col_offset=-1), lineno=239, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=241, col_offset=15), 'randrange', Load(), lineno=241, col_offset=15), [Name('a', Load(), lineno=241, col_offset=30), BinOp(Name('b', Load(), lineno=241, col_offset=33), Add(), Num(1, lineno=241, col_offset=35), lineno=241, col_offset=33)], [], None, None, lineno=241, col_offset=15), lineno=241, col_offset=8)], [], lineno=237, col_offset=4), FunctionDef('_randbelow', arguments([Name('self', Param(), lineno=243, col_offset=19), Name('n', Param(), lineno=243, col_offset=25), Name('_log', Param(), lineno=243, col_offset=28), Name('int', Param(), lineno=243, col_offset=39), Name('_maxwidth', Param(), lineno=243, col_offset=48), Name('_Method', Param(), lineno=244, col_offset=19), Name('_BuiltinMethod', Param(), lineno=244, col_offset=40)], None, None, [Name('_log', Load(), lineno=243, col_offset=33), Name('int', Load(), lineno=243, col_offset=43), BinOp(Num(1L, lineno=243, col_offset=58), LShift(), Name('BPF', Load(), lineno=243, col_offset=62), lineno=243, col_offset=58), Name('_MethodType', Load(), lineno=244, col_offset=27), Name('_BuiltinMethodType', Load(), lineno=244, col_offset=55)]), [Expr(Str('Return a random int in the range [0,n)\n\n        Handles the case where n has more bits than returned\n        by a single call to the underlying generator.\n        ', lineno=249, col_offset=-1), lineno=249, col_offset=-1), TryExcept([Assign([Name('getrandbits', Store(), lineno=252, col_offset=12)], Attribute(Name('self', Load(), lineno=252, col_offset=26), 'getrandbits', Load(), lineno=252, col_offset=26), lineno=252, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=253, col_offset=15), None, [Pass( lineno=254, col_offset=12)], lineno=253, col_offset=8)], [If(BoolOp(Or(), [Compare(Call(Name('type', Load(), lineno=259, col_offset=15), [Attribute(Name('self', Load(), lineno=259, col_offset=20), 'random', Load(), lineno=259, col_offset=20)], [], None, None, lineno=259, col_offset=15), [Is()], [Name('_BuiltinMethod', Load(), lineno=259, col_offset=36)], lineno=259, col_offset=15), Compare(Call(Name('type', Load(), lineno=259, col_offset=54), [Name('getrandbits', Load(), lineno=259, col_offset=59)], [], None, None, lineno=259, col_offset=54), [Is()], [Name('_Method', Load(), lineno=259, col_offset=75)], lineno=259, col_offset=54)], lineno=259, col_offset=15), [Assign([Name('k', Store(), lineno=260, col_offset=16)], Call(Name('int', Load(), lineno=260, col_offset=20), [BinOp(Num(1.00001, lineno=260, col_offset=24), Add(), Call(Name('_log', Load(), lineno=260, col_offset=34), [BinOp(Name('n', Load(), lineno=260, col_offset=39), Sub(), Num(1, lineno=260, col_offset=41), lineno=260, col_offset=39), Num(2.0, lineno=260, col_offset=44)], [], None, None, lineno=260, col_offset=34), lineno=260, col_offset=24)], [], None, None, lineno=260, col_offset=20), lineno=260, col_offset=16), Assign([Name('r', Store(), lineno=261, col_offset=16)], Call(Name('getrandbits', Load(), lineno=261, col_offset=20), [Name('k', Load(), lineno=261, col_offset=32)], [], None, None, lineno=261, col_offset=20), lineno=261, col_offset=16), While(Compare(Name('r', Load(), lineno=262, col_offset=22), [GtE()], [Name('n', Load(), lineno=262, col_offset=27)], lineno=262, col_offset=22), [Assign([Name('r', Store(), lineno=263, col_offset=20)], Call(Name('getrandbits', Load(), lineno=263, col_offset=24), [Name('k', Load(), lineno=263, col_offset=36)], [], None, None, lineno=263, col_offset=24), lineno=263, col_offset=20)], [], lineno=262, col_offset=16), Return(Name('r', Load(), lineno=264, col_offset=23), lineno=264, col_offset=16)], [], lineno=259, col_offset=12)], lineno=251, col_offset=8), If(Compare(Name('n', Load(), lineno=265, col_offset=11), [GtE()], [Name('_maxwidth', Load(), lineno=265, col_offset=16)], lineno=265, col_offset=11), [Expr(Call(Name('_warn', Load(), lineno=266, col_offset=12), [Str('Underlying random() generator does not supply \nenough bits to choose from a population range this large', lineno=266, col_offset=18)], [], None, None, lineno=266, col_offset=12), lineno=266, col_offset=12)], [], lineno=265, col_offset=8), Return(Call(Name('int', Load(), lineno=268, col_offset=15), [BinOp(Call(Attribute(Name('self', Load(), lineno=268, col_offset=19), 'random', Load(), lineno=268, col_offset=19), [], [], None, None, lineno=268, col_offset=19), Mult(), Name('n', Load(), lineno=268, col_offset=35), lineno=268, col_offset=19)], [], None, None, lineno=268, col_offset=15), lineno=268, col_offset=8)], [], lineno=243, col_offset=4), FunctionDef('choice', arguments([Name('self', Param(), lineno=272, col_offset=15), Name('seq', Param(), lineno=272, col_offset=21)], None, None, []), [Expr(Str('Choose a random element from a non-empty sequence.', lineno=273, col_offset=8), lineno=273, col_offset=8), Return(Subscript(Name('seq', Load(), lineno=274, col_offset=15), Index(Call(Name('int', Load(), lineno=274, col_offset=19), [BinOp(Call(Attribute(Name('self', Load(), lineno=274, col_offset=23), 'random', Load(), lineno=274, col_offset=23), [], [], None, None, lineno=274, col_offset=23), Mult(), Call(Name('len', Load(), lineno=274, col_offset=39), [Name('seq', Load(), lineno=274, col_offset=43)], [], None, None, lineno=274, col_offset=39), lineno=274, col_offset=23)], [], None, None, lineno=274, col_offset=19)), Load(), lineno=274, col_offset=15), lineno=274, col_offset=8)], [], lineno=272, col_offset=4), FunctionDef('shuffle', arguments([Name('self', Param(), lineno=276, col_offset=16), Name('x', Param(), lineno=276, col_offset=22), Name('random', Param(), lineno=276, col_offset=25), Name('int', Param(), lineno=276, col_offset=38)], None, None, [Name('None', Load(), lineno=276, col_offset=32), Name('int', Load(), lineno=276, col_offset=42)]), [Expr(Str('x, random=random.random -> shuffle list x in place; return None.\n\n        Optional arg random is a 0-argument function returning a random\n        float in [0.0, 1.0); by default, the standard random.random.\n        ', lineno=281, col_offset=-1), lineno=281, col_offset=-1), If(Compare(Name('random', Load(), lineno=283, col_offset=11), [Is()], [Name('None', Load(), lineno=283, col_offset=21)], lineno=283, col_offset=11), [Assign([Name('random', Store(), lineno=284, col_offset=12)], Attribute(Name('self', Load(), lineno=284, col_offset=21), 'random', Load(), lineno=284, col_offset=21), lineno=284, col_offset=12)], [], lineno=283, col_offset=8), For(Name('i', Store(), lineno=285, col_offset=12), Call(Name('reversed', Load(), lineno=285, col_offset=17), [Call(Name('xrange', Load(), lineno=285, col_offset=26), [Num(1, lineno=285, col_offset=33), Call(Name('len', Load(), lineno=285, col_offset=36), [Name('x', Load(), lineno=285, col_offset=40)], [], None, None, lineno=285, col_offset=36)], [], None, None, lineno=285, col_offset=26)], [], None, None, lineno=285, col_offset=17), [Assign([Name('j', Store(), lineno=287, col_offset=12)], Call(Name('int', Load(), lineno=287, col_offset=16), [BinOp(Call(Name('random', Load(), lineno=287, col_offset=20), [], [], None, None, lineno=287, col_offset=20), Mult(), BinOp(Name('i', Load(), lineno=287, col_offset=32), Add(), Num(1, lineno=287, col_offset=34), lineno=287, col_offset=32), lineno=287, col_offset=20)], [], None, None, lineno=287, col_offset=16), lineno=287, col_offset=12), Assign([Tuple([Subscript(Name('x', Load(), lineno=288, col_offset=12), Index(Name('i', Load(), lineno=288, col_offset=14)), Store(), lineno=288, col_offset=12), Subscript(Name('x', Load(), lineno=288, col_offset=18), Index(Name('j', Load(), lineno=288, col_offset=20)), Store(), lineno=288, col_offset=18)], Store(), lineno=288, col_offset=12)], Tuple([Subscript(Name('x', Load(), lineno=288, col_offset=25), Index(Name('j', Load(), lineno=288, col_offset=27)), Load(), lineno=288, col_offset=25), Subscript(Name('x', Load(), lineno=288, col_offset=31), Index(Name('i', Load(), lineno=288, col_offset=33)), Load(), lineno=288, col_offset=31)], Load(), lineno=288, col_offset=25), lineno=288, col_offset=12)], [], lineno=285, col_offset=8)], [], lineno=276, col_offset=4), FunctionDef('sample', arguments([Name('self', Param(), lineno=290, col_offset=15), Name('population', Param(), lineno=290, col_offset=21), Name('k', Param(), lineno=290, col_offset=33)], None, None, []), [Expr(Str('Chooses k unique random elements from a population sequence.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use xrange as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(xrange(10000000), 60)\n        ', lineno=306, col_offset=-1), lineno=306, col_offset=-1), Assign([Name('n', Store(), lineno=318, col_offset=8)], Call(Name('len', Load(), lineno=318, col_offset=12), [Name('population', Load(), lineno=318, col_offset=16)], [], None, None, lineno=318, col_offset=12), lineno=318, col_offset=8), If(UnaryOp(Not(), Compare(Num(0, lineno=319, col_offset=15), [LtE(), LtE()], [Name('k', Load(), lineno=319, col_offset=20), Name('n', Load(), lineno=319, col_offset=25)], lineno=319, col_offset=15), lineno=319, col_offset=11), [Raise(Name('ValueError', Load(), lineno=320, col_offset=18), Str('sample larger than population', lineno=320, col_offset=30), None, lineno=320, col_offset=12)], [], lineno=319, col_offset=8), Assign([Name('random', Store(), lineno=321, col_offset=8)], Attribute(Name('self', Load(), lineno=321, col_offset=17), 'random', Load(), lineno=321, col_offset=17), lineno=321, col_offset=8), Assign([Name('_int', Store(), lineno=322, col_offset=8)], Name('int', Load(), lineno=322, col_offset=15), lineno=322, col_offset=8), Assign([Name('result', Store(), lineno=323, col_offset=8)], BinOp(List([Name('None', Load(), lineno=323, col_offset=18)], Load(), lineno=323, col_offset=17), Mult(), Name('k', Load(), lineno=323, col_offset=26), lineno=323, col_offset=17), lineno=323, col_offset=8), Assign([Name('setsize', Store(), lineno=324, col_offset=8)], Num(21, lineno=324, col_offset=18), lineno=324, col_offset=8), If(Compare(Name('k', Load(), lineno=325, col_offset=11), [Gt()], [Num(5, lineno=325, col_offset=15)], lineno=325, col_offset=11), [AugAssign(Name('setsize', Store(), lineno=326, col_offset=12), Add(), BinOp(Num(4, lineno=326, col_offset=23), Pow(), Call(Name('_ceil', Load(), lineno=326, col_offset=28), [Call(Name('_log', Load(), lineno=326, col_offset=34), [BinOp(Name('k', Load(), lineno=326, col_offset=39), Mult(), Num(3, lineno=326, col_offset=43), lineno=326, col_offset=39), Num(4, lineno=326, col_offset=46)], [], None, None, lineno=326, col_offset=34)], [], None, None, lineno=326, col_offset=28), lineno=326, col_offset=23), lineno=326, col_offset=12)], [], lineno=325, col_offset=8), If(BoolOp(Or(), [Compare(Name('n', Load(), lineno=327, col_offset=11), [LtE()], [Name('setsize', Load(), lineno=327, col_offset=16)], lineno=327, col_offset=11), Call(Name('hasattr', Load(), lineno=327, col_offset=27), [Name('population', Load(), lineno=327, col_offset=35), Str('keys', lineno=327, col_offset=47)], [], None, None, lineno=327, col_offset=27)], lineno=327, col_offset=11), [Assign([Name('pool', Store(), lineno=330, col_offset=12)], Call(Name('list', Load(), lineno=330, col_offset=19), [Name('population', Load(), lineno=330, col_offset=24)], [], None, None, lineno=330, col_offset=19), lineno=330, col_offset=12), For(Name('i', Store(), lineno=331, col_offset=16), Call(Name('xrange', Load(), lineno=331, col_offset=21), [Name('k', Load(), lineno=331, col_offset=28)], [], None, None, lineno=331, col_offset=21), [Assign([Name('j', Store(), lineno=332, col_offset=16)], Call(Name('_int', Load(), lineno=332, col_offset=20), [BinOp(Call(Name('random', Load(), lineno=332, col_offset=25), [], [], None, None, lineno=332, col_offset=25), Mult(), BinOp(Name('n', Load(), lineno=332, col_offset=37), Sub(), Name('i', Load(), lineno=332, col_offset=39), lineno=332, col_offset=37), lineno=332, col_offset=25)], [], None, None, lineno=332, col_offset=20), lineno=332, col_offset=16), Assign([Subscript(Name('result', Load(), lineno=333, col_offset=16), Index(Name('i', Load(), lineno=333, col_offset=23)), Store(), lineno=333, col_offset=16)], Subscript(Name('pool', Load(), lineno=333, col_offset=28), Index(Name('j', Load(), lineno=333, col_offset=33)), Load(), lineno=333, col_offset=28), lineno=333, col_offset=16), Assign([Subscript(Name('pool', Load(), lineno=334, col_offset=16), Index(Name('j', Load(), lineno=334, col_offset=21)), Store(), lineno=334, col_offset=16)], Subscript(Name('pool', Load(), lineno=334, col_offset=26), Index(BinOp(BinOp(Name('n', Load(), lineno=334, col_offset=31), Sub(), Name('i', Load(), lineno=334, col_offset=33), lineno=334, col_offset=31), Sub(), Num(1, lineno=334, col_offset=35), lineno=334, col_offset=34)), Load(), lineno=334, col_offset=26), lineno=334, col_offset=16)], [], lineno=331, col_offset=12)], [TryExcept([Assign([Name('selected', Store(), lineno=337, col_offset=16)], Call(Name('set', Load(), lineno=337, col_offset=27), [], [], None, None, lineno=337, col_offset=27), lineno=337, col_offset=16), Assign([Name('selected_add', Store(), lineno=338, col_offset=16)], Attribute(Name('selected', Load(), lineno=338, col_offset=31), 'add', Load(), lineno=338, col_offset=31), lineno=338, col_offset=16), For(Name('i', Store(), lineno=339, col_offset=20), Call(Name('xrange', Load(), lineno=339, col_offset=25), [Name('k', Load(), lineno=339, col_offset=32)], [], None, None, lineno=339, col_offset=25), [Assign([Name('j', Store(), lineno=340, col_offset=20)], Call(Name('_int', Load(), lineno=340, col_offset=24), [BinOp(Call(Name('random', Load(), lineno=340, col_offset=29), [], [], None, None, lineno=340, col_offset=29), Mult(), Name('n', Load(), lineno=340, col_offset=40), lineno=340, col_offset=29)], [], None, None, lineno=340, col_offset=24), lineno=340, col_offset=20), While(Compare(Name('j', Load(), lineno=341, col_offset=26), [In()], [Name('selected', Load(), lineno=341, col_offset=31)], lineno=341, col_offset=26), [Assign([Name('j', Store(), lineno=342, col_offset=24)], Call(Name('_int', Load(), lineno=342, col_offset=28), [BinOp(Call(Name('random', Load(), lineno=342, col_offset=33), [], [], None, None, lineno=342, col_offset=33), Mult(), Name('n', Load(), lineno=342, col_offset=44), lineno=342, col_offset=33)], [], None, None, lineno=342, col_offset=28), lineno=342, col_offset=24)], [], lineno=341, col_offset=20), Expr(Call(Name('selected_add', Load(), lineno=343, col_offset=20), [Name('j', Load(), lineno=343, col_offset=33)], [], None, None, lineno=343, col_offset=20), lineno=343, col_offset=20), Assign([Subscript(Name('result', Load(), lineno=344, col_offset=20), Index(Name('i', Load(), lineno=344, col_offset=27)), Store(), lineno=344, col_offset=20)], Subscript(Name('population', Load(), lineno=344, col_offset=32), Index(Name('j', Load(), lineno=344, col_offset=43)), Load(), lineno=344, col_offset=32), lineno=344, col_offset=20)], [], lineno=339, col_offset=16)], [ExceptHandler(Tuple([Name('TypeError', Load(), lineno=345, col_offset=20), Name('KeyError', Load(), lineno=345, col_offset=31)], Load(), lineno=345, col_offset=20), None, [If(Call(Name('isinstance', Load(), lineno=346, col_offset=19), [Name('population', Load(), lineno=346, col_offset=30), Name('list', Load(), lineno=346, col_offset=42)], [], None, None, lineno=346, col_offset=19), [Raise(None, None, None, lineno=347, col_offset=20)], [], lineno=346, col_offset=16), Return(Call(Attribute(Name('self', Load(), lineno=348, col_offset=23), 'sample', Load(), lineno=348, col_offset=23), [Call(Name('tuple', Load(), lineno=348, col_offset=35), [Name('population', Load(), lineno=348, col_offset=41)], [], None, None, lineno=348, col_offset=35), Name('k', Load(), lineno=348, col_offset=54)], [], None, None, lineno=348, col_offset=23), lineno=348, col_offset=16)], lineno=345, col_offset=12)], [], lineno=336, col_offset=12)], lineno=327, col_offset=8), Return(Name('result', Load(), lineno=349, col_offset=15), lineno=349, col_offset=8)], [], lineno=290, col_offset=4), FunctionDef('uniform', arguments([Name('self', Param(), lineno=355, col_offset=16), Name('a', Param(), lineno=355, col_offset=22), Name('b', Param(), lineno=355, col_offset=25)], None, None, []), [Expr(Str('Get a random number in the range [a, b) or [a, b] depending on rounding.', lineno=356, col_offset=8), lineno=356, col_offset=8), Return(BinOp(Name('a', Load(), lineno=357, col_offset=15), Add(), BinOp(BinOp(Name('b', Load(), lineno=357, col_offset=20), Sub(), Name('a', Load(), lineno=357, col_offset=22), lineno=357, col_offset=20), Mult(), Call(Attribute(Name('self', Load(), lineno=357, col_offset=27), 'random', Load(), lineno=357, col_offset=27), [], [], None, None, lineno=357, col_offset=27), lineno=357, col_offset=19), lineno=357, col_offset=15), lineno=357, col_offset=8)], [], lineno=355, col_offset=4), FunctionDef('triangular', arguments([Name('self', Param(), lineno=361, col_offset=19), Name('low', Param(), lineno=361, col_offset=25), Name('high', Param(), lineno=361, col_offset=34), Name('mode', Param(), lineno=361, col_offset=44)], None, None, [Num(0.0, lineno=361, col_offset=29), Num(1.0, lineno=361, col_offset=39), Name('None', Load(), lineno=361, col_offset=49)]), [Expr(Str('Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        ', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Assign([Name('u', Store(), lineno=370, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=370, col_offset=12), 'random', Load(), lineno=370, col_offset=12), [], [], None, None, lineno=370, col_offset=12), lineno=370, col_offset=8), Assign([Name('c', Store(), lineno=371, col_offset=8)], IfExp(Compare(Name('mode', Load(), lineno=371, col_offset=19), [Is()], [Name('None', Load(), lineno=371, col_offset=27)], lineno=371, col_offset=19), Num(0.5, lineno=371, col_offset=12), BinOp(BinOp(Name('mode', Load(), lineno=371, col_offset=38), Sub(), Name('low', Load(), lineno=371, col_offset=45), lineno=371, col_offset=38), Div(), BinOp(Name('high', Load(), lineno=371, col_offset=53), Sub(), Name('low', Load(), lineno=371, col_offset=60), lineno=371, col_offset=53), lineno=371, col_offset=37), lineno=371, col_offset=12), lineno=371, col_offset=8), If(Compare(Name('u', Load(), lineno=372, col_offset=11), [Gt()], [Name('c', Load(), lineno=372, col_offset=15)], lineno=372, col_offset=11), [Assign([Name('u', Store(), lineno=373, col_offset=12)], BinOp(Num(1.0, lineno=373, col_offset=16), Sub(), Name('u', Load(), lineno=373, col_offset=22), lineno=373, col_offset=16), lineno=373, col_offset=12), Assign([Name('c', Store(), lineno=374, col_offset=12)], BinOp(Num(1.0, lineno=374, col_offset=16), Sub(), Name('c', Load(), lineno=374, col_offset=22), lineno=374, col_offset=16), lineno=374, col_offset=12), Assign([Tuple([Name('low', Store(), lineno=375, col_offset=12), Name('high', Store(), lineno=375, col_offset=17)], Store(), lineno=375, col_offset=12)], Tuple([Name('high', Load(), lineno=375, col_offset=24), Name('low', Load(), lineno=375, col_offset=30)], Load(), lineno=375, col_offset=24), lineno=375, col_offset=12)], [], lineno=372, col_offset=8), Return(BinOp(Name('low', Load(), lineno=376, col_offset=15), Add(), BinOp(BinOp(Name('high', Load(), lineno=376, col_offset=22), Sub(), Name('low', Load(), lineno=376, col_offset=29), lineno=376, col_offset=22), Mult(), BinOp(BinOp(Name('u', Load(), lineno=376, col_offset=37), Mult(), Name('c', Load(), lineno=376, col_offset=41), lineno=376, col_offset=37), Pow(), Num(0.5, lineno=376, col_offset=47), lineno=376, col_offset=36), lineno=376, col_offset=21), lineno=376, col_offset=15), lineno=376, col_offset=8)], [], lineno=361, col_offset=4), FunctionDef('normalvariate', arguments([Name('self', Param(), lineno=380, col_offset=22), Name('mu', Param(), lineno=380, col_offset=28), Name('sigma', Param(), lineno=380, col_offset=32)], None, None, []), [Expr(Str('Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        ', lineno=385, col_offset=-1), lineno=385, col_offset=-1), Assign([Name('random', Store(), lineno=393, col_offset=8)], Attribute(Name('self', Load(), lineno=393, col_offset=17), 'random', Load(), lineno=393, col_offset=17), lineno=393, col_offset=8), While(Num(1, lineno=394, col_offset=14), [Assign([Name('u1', Store(), lineno=395, col_offset=12)], Call(Name('random', Load(), lineno=395, col_offset=17), [], [], None, None, lineno=395, col_offset=17), lineno=395, col_offset=12), Assign([Name('u2', Store(), lineno=396, col_offset=12)], BinOp(Num(1.0, lineno=396, col_offset=17), Sub(), Call(Name('random', Load(), lineno=396, col_offset=23), [], [], None, None, lineno=396, col_offset=23), lineno=396, col_offset=17), lineno=396, col_offset=12), Assign([Name('z', Store(), lineno=397, col_offset=12)], BinOp(BinOp(Name('NV_MAGICCONST', Load(), lineno=397, col_offset=16), Mult(), BinOp(Name('u1', Load(), lineno=397, col_offset=31), Sub(), Num(0.5, lineno=397, col_offset=34), lineno=397, col_offset=31), lineno=397, col_offset=16), Div(), Name('u2', Load(), lineno=397, col_offset=39), lineno=397, col_offset=38), lineno=397, col_offset=12), Assign([Name('zz', Store(), lineno=398, col_offset=12)], BinOp(BinOp(Name('z', Load(), lineno=398, col_offset=17), Mult(), Name('z', Load(), lineno=398, col_offset=19), lineno=398, col_offset=17), Div(), Num(4.0, lineno=398, col_offset=21), lineno=398, col_offset=20), lineno=398, col_offset=12), If(Compare(Name('zz', Load(), lineno=399, col_offset=15), [LtE()], [UnaryOp(USub(), Call(Name('_log', Load(), lineno=399, col_offset=22), [Name('u2', Load(), lineno=399, col_offset=27)], [], None, None, lineno=399, col_offset=22), lineno=399, col_offset=21)], lineno=399, col_offset=15), [Break( lineno=400, col_offset=16)], [], lineno=399, col_offset=12)], [], lineno=394, col_offset=8), Return(BinOp(Name('mu', Load(), lineno=401, col_offset=15), Add(), BinOp(Name('z', Load(), lineno=401, col_offset=20), Mult(), Name('sigma', Load(), lineno=401, col_offset=22), lineno=401, col_offset=20), lineno=401, col_offset=15), lineno=401, col_offset=8)], [], lineno=380, col_offset=4), FunctionDef('lognormvariate', arguments([Name('self', Param(), lineno=405, col_offset=23), Name('mu', Param(), lineno=405, col_offset=29), Name('sigma', Param(), lineno=405, col_offset=33)], None, None, []), [Expr(Str("Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        ", lineno=412, col_offset=-1), lineno=412, col_offset=-1), Return(Call(Name('_exp', Load(), lineno=413, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=413, col_offset=20), 'normalvariate', Load(), lineno=413, col_offset=20), [Name('mu', Load(), lineno=413, col_offset=39), Name('sigma', Load(), lineno=413, col_offset=43)], [], None, None, lineno=413, col_offset=20)], [], None, None, lineno=413, col_offset=15), lineno=413, col_offset=8)], [], lineno=405, col_offset=4), FunctionDef('expovariate', arguments([Name('self', Param(), lineno=417, col_offset=20), Name('lambd', Param(), lineno=417, col_offset=26)], None, None, []), [Expr(Str('Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called "lambda", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        ', lineno=426, col_offset=-1), lineno=426, col_offset=-1), Assign([Name('random', Store(), lineno=430, col_offset=8)], Attribute(Name('self', Load(), lineno=430, col_offset=17), 'random', Load(), lineno=430, col_offset=17), lineno=430, col_offset=8), Assign([Name('u', Store(), lineno=431, col_offset=8)], Call(Name('random', Load(), lineno=431, col_offset=12), [], [], None, None, lineno=431, col_offset=12), lineno=431, col_offset=8), While(Compare(Name('u', Load(), lineno=432, col_offset=14), [LtE()], [Num(1e-07, lineno=432, col_offset=19)], lineno=432, col_offset=14), [Assign([Name('u', Store(), lineno=433, col_offset=12)], Call(Name('random', Load(), lineno=433, col_offset=16), [], [], None, None, lineno=433, col_offset=16), lineno=433, col_offset=12)], [], lineno=432, col_offset=8), Return(BinOp(UnaryOp(USub(), Call(Name('_log', Load(), lineno=434, col_offset=16), [Name('u', Load(), lineno=434, col_offset=21)], [], None, None, lineno=434, col_offset=16), lineno=434, col_offset=15), Div(), Name('lambd', Load(), lineno=434, col_offset=24), lineno=434, col_offset=15), lineno=434, col_offset=8)], [], lineno=417, col_offset=4), FunctionDef('vonmisesvariate', arguments([Name('self', Param(), lineno=438, col_offset=24), Name('mu', Param(), lineno=438, col_offset=30), Name('kappa', Param(), lineno=438, col_offset=34)], None, None, []), [Expr(Str('Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        ', lineno=446, col_offset=-1), lineno=446, col_offset=-1), Assign([Name('random', Store(), lineno=458, col_offset=8)], Attribute(Name('self', Load(), lineno=458, col_offset=17), 'random', Load(), lineno=458, col_offset=17), lineno=458, col_offset=8), If(Compare(Name('kappa', Load(), lineno=459, col_offset=11), [LtE()], [Num(1e-06, lineno=459, col_offset=20)], lineno=459, col_offset=11), [Return(BinOp(Name('TWOPI', Load(), lineno=460, col_offset=19), Mult(), Call(Name('random', Load(), lineno=460, col_offset=27), [], [], None, None, lineno=460, col_offset=27), lineno=460, col_offset=19), lineno=460, col_offset=12)], [], lineno=459, col_offset=8), Assign([Name('a', Store(), lineno=462, col_offset=8)], BinOp(Num(1.0, lineno=462, col_offset=12), Add(), Call(Name('_sqrt', Load(), lineno=462, col_offset=18), [BinOp(Num(1.0, lineno=462, col_offset=24), Add(), BinOp(BinOp(Num(4.0, lineno=462, col_offset=30), Mult(), Name('kappa', Load(), lineno=462, col_offset=36), lineno=462, col_offset=30), Mult(), Name('kappa', Load(), lineno=462, col_offset=44), lineno=462, col_offset=42), lineno=462, col_offset=24)], [], None, None, lineno=462, col_offset=18), lineno=462, col_offset=12), lineno=462, col_offset=8), Assign([Name('b', Store(), lineno=463, col_offset=8)], BinOp(BinOp(Name('a', Load(), lineno=463, col_offset=13), Sub(), Call(Name('_sqrt', Load(), lineno=463, col_offset=17), [BinOp(Num(2.0, lineno=463, col_offset=23), Mult(), Name('a', Load(), lineno=463, col_offset=29), lineno=463, col_offset=23)], [], None, None, lineno=463, col_offset=17), lineno=463, col_offset=13), Div(), BinOp(Num(2.0, lineno=463, col_offset=34), Mult(), Name('kappa', Load(), lineno=463, col_offset=40), lineno=463, col_offset=34), lineno=463, col_offset=12), lineno=463, col_offset=8), Assign([Name('r', Store(), lineno=464, col_offset=8)], BinOp(BinOp(Num(1.0, lineno=464, col_offset=13), Add(), BinOp(Name('b', Load(), lineno=464, col_offset=19), Mult(), Name('b', Load(), lineno=464, col_offset=23), lineno=464, col_offset=19), lineno=464, col_offset=13), Div(), BinOp(Num(2.0, lineno=464, col_offset=27), Mult(), Name('b', Load(), lineno=464, col_offset=33), lineno=464, col_offset=27), lineno=464, col_offset=12), lineno=464, col_offset=8), While(Num(1, lineno=466, col_offset=14), [Assign([Name('u1', Store(), lineno=467, col_offset=12)], Call(Name('random', Load(), lineno=467, col_offset=17), [], [], None, None, lineno=467, col_offset=17), lineno=467, col_offset=12), Assign([Name('z', Store(), lineno=469, col_offset=12)], Call(Name('_cos', Load(), lineno=469, col_offset=16), [BinOp(Name('_pi', Load(), lineno=469, col_offset=21), Mult(), Name('u1', Load(), lineno=469, col_offset=27), lineno=469, col_offset=21)], [], None, None, lineno=469, col_offset=16), lineno=469, col_offset=12), Assign([Name('f', Store(), lineno=470, col_offset=12)], BinOp(BinOp(Num(1.0, lineno=470, col_offset=17), Add(), BinOp(Name('r', Load(), lineno=470, col_offset=23), Mult(), Name('z', Load(), lineno=470, col_offset=27), lineno=470, col_offset=23), lineno=470, col_offset=17), Div(), BinOp(Name('r', Load(), lineno=470, col_offset=31), Add(), Name('z', Load(), lineno=470, col_offset=35), lineno=470, col_offset=31), lineno=470, col_offset=16), lineno=470, col_offset=12), Assign([Name('c', Store(), lineno=471, col_offset=12)], BinOp(Name('kappa', Load(), lineno=471, col_offset=16), Mult(), BinOp(Name('r', Load(), lineno=471, col_offset=25), Sub(), Name('f', Load(), lineno=471, col_offset=29), lineno=471, col_offset=25), lineno=471, col_offset=16), lineno=471, col_offset=12), Assign([Name('u2', Store(), lineno=473, col_offset=12)], Call(Name('random', Load(), lineno=473, col_offset=17), [], [], None, None, lineno=473, col_offset=17), lineno=473, col_offset=12), If(BoolOp(Or(), [Compare(Name('u2', Load(), lineno=475, col_offset=15), [Lt()], [BinOp(Name('c', Load(), lineno=475, col_offset=20), Mult(), BinOp(Num(2.0, lineno=475, col_offset=25), Sub(), Name('c', Load(), lineno=475, col_offset=31), lineno=475, col_offset=25), lineno=475, col_offset=20)], lineno=475, col_offset=15), Compare(Name('u2', Load(), lineno=475, col_offset=37), [LtE()], [BinOp(Name('c', Load(), lineno=475, col_offset=43), Mult(), Call(Name('_exp', Load(), lineno=475, col_offset=47), [BinOp(Num(1.0, lineno=475, col_offset=52), Sub(), Name('c', Load(), lineno=475, col_offset=58), lineno=475, col_offset=52)], [], None, None, lineno=475, col_offset=47), lineno=475, col_offset=43)], lineno=475, col_offset=37)], lineno=475, col_offset=15), [Break( lineno=476, col_offset=16)], [], lineno=475, col_offset=12)], [], lineno=466, col_offset=8), Assign([Name('u3', Store(), lineno=478, col_offset=8)], Call(Name('random', Load(), lineno=478, col_offset=13), [], [], None, None, lineno=478, col_offset=13), lineno=478, col_offset=8), If(Compare(Name('u3', Load(), lineno=479, col_offset=11), [Gt()], [Num(0.5, lineno=479, col_offset=16)], lineno=479, col_offset=11), [Assign([Name('theta', Store(), lineno=480, col_offset=12)], BinOp(BinOp(Name('mu', Load(), lineno=480, col_offset=21), Mod(), Name('TWOPI', Load(), lineno=480, col_offset=26), lineno=480, col_offset=21), Add(), Call(Name('_acos', Load(), lineno=480, col_offset=35), [Name('f', Load(), lineno=480, col_offset=41)], [], None, None, lineno=480, col_offset=35), lineno=480, col_offset=20), lineno=480, col_offset=12)], [Assign([Name('theta', Store(), lineno=482, col_offset=12)], BinOp(BinOp(Name('mu', Load(), lineno=482, col_offset=21), Mod(), Name('TWOPI', Load(), lineno=482, col_offset=26), lineno=482, col_offset=21), Sub(), Call(Name('_acos', Load(), lineno=482, col_offset=35), [Name('f', Load(), lineno=482, col_offset=41)], [], None, None, lineno=482, col_offset=35), lineno=482, col_offset=20), lineno=482, col_offset=12)], lineno=479, col_offset=8), Return(Name('theta', Load(), lineno=484, col_offset=15), lineno=484, col_offset=8)], [], lineno=438, col_offset=4), FunctionDef('gammavariate', arguments([Name('self', Param(), lineno=488, col_offset=21), Name('alpha', Param(), lineno=488, col_offset=27), Name('beta', Param(), lineno=488, col_offset=34)], None, None, []), [Expr(Str('Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        ', lineno=493, col_offset=-1), lineno=493, col_offset=-1), If(BoolOp(Or(), [Compare(Name('alpha', Load(), lineno=499, col_offset=11), [LtE()], [Num(0.0, lineno=499, col_offset=20)], lineno=499, col_offset=11), Compare(Name('beta', Load(), lineno=499, col_offset=27), [LtE()], [Num(0.0, lineno=499, col_offset=35)], lineno=499, col_offset=27)], lineno=499, col_offset=11), [Raise(Name('ValueError', Load(), lineno=500, col_offset=18), Str('gammavariate: alpha and beta must be > 0.0', lineno=500, col_offset=30), None, lineno=500, col_offset=12)], [], lineno=499, col_offset=8), Assign([Name('random', Store(), lineno=502, col_offset=8)], Attribute(Name('self', Load(), lineno=502, col_offset=17), 'random', Load(), lineno=502, col_offset=17), lineno=502, col_offset=8), If(Compare(Name('alpha', Load(), lineno=503, col_offset=11), [Gt()], [Num(1.0, lineno=503, col_offset=19)], lineno=503, col_offset=11), [Assign([Name('ainv', Store(), lineno=509, col_offset=12)], Call(Name('_sqrt', Load(), lineno=509, col_offset=19), [BinOp(BinOp(Num(2.0, lineno=509, col_offset=25), Mult(), Name('alpha', Load(), lineno=509, col_offset=31), lineno=509, col_offset=25), Sub(), Num(1.0, lineno=509, col_offset=39), lineno=509, col_offset=25)], [], None, None, lineno=509, col_offset=19), lineno=509, col_offset=12), Assign([Name('bbb', Store(), lineno=510, col_offset=12)], BinOp(Name('alpha', Load(), lineno=510, col_offset=18), Sub(), Name('LOG4', Load(), lineno=510, col_offset=26), lineno=510, col_offset=18), lineno=510, col_offset=12), Assign([Name('ccc', Store(), lineno=511, col_offset=12)], BinOp(Name('alpha', Load(), lineno=511, col_offset=18), Add(), Name('ainv', Load(), lineno=511, col_offset=26), lineno=511, col_offset=18), lineno=511, col_offset=12), While(Num(1, lineno=513, col_offset=18), [Assign([Name('u1', Store(), lineno=514, col_offset=16)], Call(Name('random', Load(), lineno=514, col_offset=21), [], [], None, None, lineno=514, col_offset=21), lineno=514, col_offset=16), If(UnaryOp(Not(), Compare(Num(1e-07, lineno=515, col_offset=23), [Lt(), Lt()], [Name('u1', Load(), lineno=515, col_offset=30), Num(0.9999999, lineno=515, col_offset=35)], lineno=515, col_offset=23), lineno=515, col_offset=19), [Continue( lineno=516, col_offset=20)], [], lineno=515, col_offset=16), Assign([Name('u2', Store(), lineno=517, col_offset=16)], BinOp(Num(1.0, lineno=517, col_offset=21), Sub(), Call(Name('random', Load(), lineno=517, col_offset=27), [], [], None, None, lineno=517, col_offset=27), lineno=517, col_offset=21), lineno=517, col_offset=16), Assign([Name('v', Store(), lineno=518, col_offset=16)], BinOp(Call(Name('_log', Load(), lineno=518, col_offset=20), [BinOp(Name('u1', Load(), lineno=518, col_offset=25), Div(), BinOp(Num(1.0, lineno=518, col_offset=29), Sub(), Name('u1', Load(), lineno=518, col_offset=33), lineno=518, col_offset=29), lineno=518, col_offset=25)], [], None, None, lineno=518, col_offset=20), Div(), Name('ainv', Load(), lineno=518, col_offset=38), lineno=518, col_offset=20), lineno=518, col_offset=16), Assign([Name('x', Store(), lineno=519, col_offset=16)], BinOp(Name('alpha', Load(), lineno=519, col_offset=20), Mult(), Call(Name('_exp', Load(), lineno=519, col_offset=26), [Name('v', Load(), lineno=519, col_offset=31)], [], None, None, lineno=519, col_offset=26), lineno=519, col_offset=20), lineno=519, col_offset=16), Assign([Name('z', Store(), lineno=520, col_offset=16)], BinOp(BinOp(Name('u1', Load(), lineno=520, col_offset=20), Mult(), Name('u1', Load(), lineno=520, col_offset=23), lineno=520, col_offset=20), Mult(), Name('u2', Load(), lineno=520, col_offset=26), lineno=520, col_offset=25), lineno=520, col_offset=16), Assign([Name('r', Store(), lineno=521, col_offset=16)], BinOp(BinOp(Name('bbb', Load(), lineno=521, col_offset=20), Add(), BinOp(Name('ccc', Load(), lineno=521, col_offset=24), Mult(), Name('v', Load(), lineno=521, col_offset=28), lineno=521, col_offset=24), lineno=521, col_offset=20), Sub(), Name('x', Load(), lineno=521, col_offset=30), lineno=521, col_offset=29), lineno=521, col_offset=16), If(BoolOp(Or(), [Compare(BinOp(BinOp(Name('r', Load(), lineno=522, col_offset=19), Add(), Name('SG_MAGICCONST', Load(), lineno=522, col_offset=23), lineno=522, col_offset=19), Sub(), BinOp(Num(4.5, lineno=522, col_offset=39), Mult(), Name('z', Load(), lineno=522, col_offset=43), lineno=522, col_offset=39), lineno=522, col_offset=37), [GtE()], [Num(0.0, lineno=522, col_offset=48)], lineno=522, col_offset=19), Compare(Name('r', Load(), lineno=522, col_offset=55), [GtE()], [Call(Name('_log', Load(), lineno=522, col_offset=60), [Name('z', Load(), lineno=522, col_offset=65)], [], None, None, lineno=522, col_offset=60)], lineno=522, col_offset=55)], lineno=522, col_offset=19), [Return(BinOp(Name('x', Load(), lineno=523, col_offset=27), Mult(), Name('beta', Load(), lineno=523, col_offset=31), lineno=523, col_offset=27), lineno=523, col_offset=20)], [], lineno=522, col_offset=16)], [], lineno=513, col_offset=12)], [If(Compare(Name('alpha', Load(), lineno=525, col_offset=13), [Eq()], [Num(1.0, lineno=525, col_offset=22)], lineno=525, col_offset=13), [Assign([Name('u', Store(), lineno=527, col_offset=12)], Call(Name('random', Load(), lineno=527, col_offset=16), [], [], None, None, lineno=527, col_offset=16), lineno=527, col_offset=12), While(Compare(Name('u', Load(), lineno=528, col_offset=18), [LtE()], [Num(1e-07, lineno=528, col_offset=23)], lineno=528, col_offset=18), [Assign([Name('u', Store(), lineno=529, col_offset=16)], Call(Name('random', Load(), lineno=529, col_offset=20), [], [], None, None, lineno=529, col_offset=20), lineno=529, col_offset=16)], [], lineno=528, col_offset=12), Return(BinOp(UnaryOp(USub(), Call(Name('_log', Load(), lineno=530, col_offset=20), [Name('u', Load(), lineno=530, col_offset=25)], [], None, None, lineno=530, col_offset=20), lineno=530, col_offset=19), Mult(), Name('beta', Load(), lineno=530, col_offset=30), lineno=530, col_offset=19), lineno=530, col_offset=12)], [While(Num(1, lineno=536, col_offset=18), [Assign([Name('u', Store(), lineno=537, col_offset=16)], Call(Name('random', Load(), lineno=537, col_offset=20), [], [], None, None, lineno=537, col_offset=20), lineno=537, col_offset=16), Assign([Name('b', Store(), lineno=538, col_offset=16)], BinOp(BinOp(Name('_e', Load(), lineno=538, col_offset=21), Add(), Name('alpha', Load(), lineno=538, col_offset=26), lineno=538, col_offset=21), Div(), Name('_e', Load(), lineno=538, col_offset=33), lineno=538, col_offset=20), lineno=538, col_offset=16), Assign([Name('p', Store(), lineno=539, col_offset=16)], BinOp(Name('b', Load(), lineno=539, col_offset=20), Mult(), Name('u', Load(), lineno=539, col_offset=22), lineno=539, col_offset=20), lineno=539, col_offset=16), If(Compare(Name('p', Load(), lineno=540, col_offset=19), [LtE()], [Num(1.0, lineno=540, col_offset=24)], lineno=540, col_offset=19), [Assign([Name('x', Store(), lineno=541, col_offset=20)], BinOp(Name('p', Load(), lineno=541, col_offset=24), Pow(), BinOp(Num(1.0, lineno=541, col_offset=30), Div(), Name('alpha', Load(), lineno=541, col_offset=34), lineno=541, col_offset=30), lineno=541, col_offset=24), lineno=541, col_offset=20)], [Assign([Name('x', Store(), lineno=543, col_offset=20)], UnaryOp(USub(), Call(Name('_log', Load(), lineno=543, col_offset=25), [BinOp(BinOp(Name('b', Load(), lineno=543, col_offset=31), Sub(), Name('p', Load(), lineno=543, col_offset=33), lineno=543, col_offset=31), Div(), Name('alpha', Load(), lineno=543, col_offset=36), lineno=543, col_offset=30)], [], None, None, lineno=543, col_offset=25), lineno=543, col_offset=24), lineno=543, col_offset=20)], lineno=540, col_offset=16), Assign([Name('u1', Store(), lineno=544, col_offset=16)], Call(Name('random', Load(), lineno=544, col_offset=21), [], [], None, None, lineno=544, col_offset=21), lineno=544, col_offset=16), If(Compare(Name('p', Load(), lineno=545, col_offset=19), [Gt()], [Num(1.0, lineno=545, col_offset=23)], lineno=545, col_offset=19), [If(Compare(Name('u1', Load(), lineno=546, col_offset=23), [LtE()], [BinOp(Name('x', Load(), lineno=546, col_offset=29), Pow(), BinOp(Name('alpha', Load(), lineno=546, col_offset=35), Sub(), Num(1.0, lineno=546, col_offset=43), lineno=546, col_offset=35), lineno=546, col_offset=29)], lineno=546, col_offset=23), [Break( lineno=547, col_offset=24)], [], lineno=546, col_offset=20)], [If(Compare(Name('u1', Load(), lineno=548, col_offset=21), [LtE()], [Call(Name('_exp', Load(), lineno=548, col_offset=27), [UnaryOp(USub(), Name('x', Load(), lineno=548, col_offset=33), lineno=548, col_offset=32)], [], None, None, lineno=548, col_offset=27)], lineno=548, col_offset=21), [Break( lineno=549, col_offset=20)], [], lineno=548, col_offset=21)], lineno=545, col_offset=16)], [], lineno=536, col_offset=12), Return(BinOp(Name('x', Load(), lineno=550, col_offset=19), Mult(), Name('beta', Load(), lineno=550, col_offset=23), lineno=550, col_offset=19), lineno=550, col_offset=12)], lineno=525, col_offset=13)], lineno=503, col_offset=8)], [], lineno=488, col_offset=4), FunctionDef('gauss', arguments([Name('self', Param(), lineno=554, col_offset=14), Name('mu', Param(), lineno=554, col_offset=20), Name('sigma', Param(), lineno=554, col_offset=24)], None, None, []), [Expr(Str('Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        ', lineno=562, col_offset=-1), lineno=562, col_offset=-1), Assign([Name('random', Store(), lineno=582, col_offset=8)], Attribute(Name('self', Load(), lineno=582, col_offset=17), 'random', Load(), lineno=582, col_offset=17), lineno=582, col_offset=8), Assign([Name('z', Store(), lineno=583, col_offset=8)], Attribute(Name('self', Load(), lineno=583, col_offset=12), 'gauss_next', Load(), lineno=583, col_offset=12), lineno=583, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=584, col_offset=8), 'gauss_next', Store(), lineno=584, col_offset=8)], Name('None', Load(), lineno=584, col_offset=26), lineno=584, col_offset=8), If(Compare(Name('z', Load(), lineno=585, col_offset=11), [Is()], [Name('None', Load(), lineno=585, col_offset=16)], lineno=585, col_offset=11), [Assign([Name('x2pi', Store(), lineno=586, col_offset=12)], BinOp(Call(Name('random', Load(), lineno=586, col_offset=19), [], [], None, None, lineno=586, col_offset=19), Mult(), Name('TWOPI', Load(), lineno=586, col_offset=30), lineno=586, col_offset=19), lineno=586, col_offset=12), Assign([Name('g2rad', Store(), lineno=587, col_offset=12)], Call(Name('_sqrt', Load(), lineno=587, col_offset=20), [BinOp(Num(-2.0, lineno=587, col_offset=27), Mult(), Call(Name('_log', Load(), lineno=587, col_offset=33), [BinOp(Num(1.0, lineno=587, col_offset=38), Sub(), Call(Name('random', Load(), lineno=587, col_offset=44), [], [], None, None, lineno=587, col_offset=44), lineno=587, col_offset=38)], [], None, None, lineno=587, col_offset=33), lineno=587, col_offset=26)], [], None, None, lineno=587, col_offset=20), lineno=587, col_offset=12), Assign([Name('z', Store(), lineno=588, col_offset=12)], BinOp(Call(Name('_cos', Load(), lineno=588, col_offset=16), [Name('x2pi', Load(), lineno=588, col_offset=21)], [], None, None, lineno=588, col_offset=16), Mult(), Name('g2rad', Load(), lineno=588, col_offset=29), lineno=588, col_offset=16), lineno=588, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=589, col_offset=12), 'gauss_next', Store(), lineno=589, col_offset=12)], BinOp(Call(Name('_sin', Load(), lineno=589, col_offset=30), [Name('x2pi', Load(), lineno=589, col_offset=35)], [], None, None, lineno=589, col_offset=30), Mult(), Name('g2rad', Load(), lineno=589, col_offset=43), lineno=589, col_offset=30), lineno=589, col_offset=12)], [], lineno=585, col_offset=8), Return(BinOp(Name('mu', Load(), lineno=591, col_offset=15), Add(), BinOp(Name('z', Load(), lineno=591, col_offset=20), Mult(), Name('sigma', Load(), lineno=591, col_offset=22), lineno=591, col_offset=20), lineno=591, col_offset=15), lineno=591, col_offset=8)], [], lineno=554, col_offset=4), FunctionDef('betavariate', arguments([Name('self', Param(), lineno=607, col_offset=20), Name('alpha', Param(), lineno=607, col_offset=26), Name('beta', Param(), lineno=607, col_offset=33)], None, None, []), [Expr(Str('Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        ', lineno=613, col_offset=-1), lineno=613, col_offset=-1), Assign([Name('y', Store(), lineno=617, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=617, col_offset=12), 'gammavariate', Load(), lineno=617, col_offset=12), [Name('alpha', Load(), lineno=617, col_offset=30), Num(1.0, lineno=617, col_offset=37)], [], None, None, lineno=617, col_offset=12), lineno=617, col_offset=8), If(Compare(Name('y', Load(), lineno=618, col_offset=11), [Eq()], [Num(0, lineno=618, col_offset=16)], lineno=618, col_offset=11), [Return(Num(0.0, lineno=619, col_offset=19), lineno=619, col_offset=12)], [Return(BinOp(Name('y', Load(), lineno=621, col_offset=19), Div(), BinOp(Name('y', Load(), lineno=621, col_offset=24), Add(), Call(Attribute(Name('self', Load(), lineno=621, col_offset=28), 'gammavariate', Load(), lineno=621, col_offset=28), [Name('beta', Load(), lineno=621, col_offset=46), Num(1.0, lineno=621, col_offset=52)], [], None, None, lineno=621, col_offset=28), lineno=621, col_offset=24), lineno=621, col_offset=19), lineno=621, col_offset=12)], lineno=618, col_offset=8)], [], lineno=607, col_offset=4), FunctionDef('paretovariate', arguments([Name('self', Param(), lineno=625, col_offset=22), Name('alpha', Param(), lineno=625, col_offset=28)], None, None, []), [Expr(Str('Pareto distribution.  alpha is the shape parameter.', lineno=626, col_offset=8), lineno=626, col_offset=8), Assign([Name('u', Store(), lineno=629, col_offset=8)], BinOp(Num(1.0, lineno=629, col_offset=12), Sub(), Call(Attribute(Name('self', Load(), lineno=629, col_offset=18), 'random', Load(), lineno=629, col_offset=18), [], [], None, None, lineno=629, col_offset=18), lineno=629, col_offset=12), lineno=629, col_offset=8), Return(BinOp(Num(1.0, lineno=630, col_offset=15), Div(), Call(Name('pow', Load(), lineno=630, col_offset=21), [Name('u', Load(), lineno=630, col_offset=25), BinOp(Num(1.0, lineno=630, col_offset=28), Div(), Name('alpha', Load(), lineno=630, col_offset=32), lineno=630, col_offset=28)], [], None, None, lineno=630, col_offset=21), lineno=630, col_offset=15), lineno=630, col_offset=8)], [], lineno=625, col_offset=4), FunctionDef('weibullvariate', arguments([Name('self', Param(), lineno=634, col_offset=23), Name('alpha', Param(), lineno=634, col_offset=29), Name('beta', Param(), lineno=634, col_offset=36)], None, None, []), [Expr(Str('Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        ', lineno=639, col_offset=-1), lineno=639, col_offset=-1), Assign([Name('u', Store(), lineno=642, col_offset=8)], BinOp(Num(1.0, lineno=642, col_offset=12), Sub(), Call(Attribute(Name('self', Load(), lineno=642, col_offset=18), 'random', Load(), lineno=642, col_offset=18), [], [], None, None, lineno=642, col_offset=18), lineno=642, col_offset=12), lineno=642, col_offset=8), Return(BinOp(Name('alpha', Load(), lineno=643, col_offset=15), Mult(), Call(Name('pow', Load(), lineno=643, col_offset=23), [UnaryOp(USub(), Call(Name('_log', Load(), lineno=643, col_offset=28), [Name('u', Load(), lineno=643, col_offset=33)], [], None, None, lineno=643, col_offset=28), lineno=643, col_offset=27), BinOp(Num(1.0, lineno=643, col_offset=37), Div(), Name('beta', Load(), lineno=643, col_offset=41), lineno=643, col_offset=37)], [], None, None, lineno=643, col_offset=23), lineno=643, col_offset=15), lineno=643, col_offset=8)], [], lineno=634, col_offset=4)], [], lineno=72, col_offset=0), ClassDef('WichmannHill', [Name('Random', Load(), lineno=647, col_offset=19)], [Assign([Name('VERSION', Store(), lineno=649, col_offset=4)], Num(1, lineno=649, col_offset=14), lineno=649, col_offset=4), FunctionDef('seed', arguments([Name('self', Param(), lineno=651, col_offset=13), Name('a', Param(), lineno=651, col_offset=19)], None, None, [Name('None', Load(), lineno=651, col_offset=21)]), [Expr(Str('Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n\n        If a is an int or long, a is used directly.  Distinct values between\n        0 and 27814431486575L inclusive are guaranteed to yield distinct\n        internal states (this guarantee is specific to the default\n        Wichmann-Hill generator).\n        ', lineno=663, col_offset=-1), lineno=663, col_offset=-1), If(Compare(Name('a', Load(), lineno=665, col_offset=11), [Is()], [Name('None', Load(), lineno=665, col_offset=16)], lineno=665, col_offset=11), [TryExcept([Assign([Name('a', Store(), lineno=667, col_offset=16)], Call(Name('long', Load(), lineno=667, col_offset=20), [Call(Name('_hexlify', Load(), lineno=667, col_offset=25), [Call(Name('_urandom', Load(), lineno=667, col_offset=34), [Num(16, lineno=667, col_offset=43)], [], None, None, lineno=667, col_offset=34)], [], None, None, lineno=667, col_offset=25), Num(16, lineno=667, col_offset=49)], [], None, None, lineno=667, col_offset=20), lineno=667, col_offset=16)], [ExceptHandler(Name('NotImplementedError', Load(), lineno=668, col_offset=19), None, [Import([alias('time', None)], lineno=669, col_offset=16), Assign([Name('a', Store(), lineno=670, col_offset=16)], Call(Name('long', Load(), lineno=670, col_offset=20), [BinOp(Call(Attribute(Name('time', Load(), lineno=670, col_offset=25), 'time', Load(), lineno=670, col_offset=25), [], [], None, None, lineno=670, col_offset=25), Mult(), Num(256, lineno=670, col_offset=39), lineno=670, col_offset=25)], [], None, None, lineno=670, col_offset=20), lineno=670, col_offset=16)], lineno=668, col_offset=12)], [], lineno=666, col_offset=12)], [], lineno=665, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=672, col_offset=15), [Name('a', Load(), lineno=672, col_offset=26), Tuple([Name('int', Load(), lineno=672, col_offset=30), Name('long', Load(), lineno=672, col_offset=35)], Load(), lineno=672, col_offset=30)], [], None, None, lineno=672, col_offset=15), lineno=672, col_offset=11), [Assign([Name('a', Store(), lineno=673, col_offset=12)], Call(Name('hash', Load(), lineno=673, col_offset=16), [Name('a', Load(), lineno=673, col_offset=21)], [], None, None, lineno=673, col_offset=16), lineno=673, col_offset=12)], [], lineno=672, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=675, col_offset=8), Name('x', Store(), lineno=675, col_offset=11)], Store(), lineno=675, col_offset=8)], Call(Name('divmod', Load(), lineno=675, col_offset=15), [Name('a', Load(), lineno=675, col_offset=22), Num(30268, lineno=675, col_offset=25)], [], None, None, lineno=675, col_offset=15), lineno=675, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=676, col_offset=8), Name('y', Store(), lineno=676, col_offset=11)], Store(), lineno=676, col_offset=8)], Call(Name('divmod', Load(), lineno=676, col_offset=15), [Name('a', Load(), lineno=676, col_offset=22), Num(30306, lineno=676, col_offset=25)], [], None, None, lineno=676, col_offset=15), lineno=676, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=677, col_offset=8), Name('z', Store(), lineno=677, col_offset=11)], Store(), lineno=677, col_offset=8)], Call(Name('divmod', Load(), lineno=677, col_offset=15), [Name('a', Load(), lineno=677, col_offset=22), Num(30322, lineno=677, col_offset=25)], [], None, None, lineno=677, col_offset=15), lineno=677, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=678, col_offset=8), '_seed', Store(), lineno=678, col_offset=8)], Tuple([BinOp(Call(Name('int', Load(), lineno=678, col_offset=21), [Name('x', Load(), lineno=678, col_offset=25)], [], None, None, lineno=678, col_offset=21), Add(), Num(1, lineno=678, col_offset=28), lineno=678, col_offset=21), BinOp(Call(Name('int', Load(), lineno=678, col_offset=31), [Name('y', Load(), lineno=678, col_offset=35)], [], None, None, lineno=678, col_offset=31), Add(), Num(1, lineno=678, col_offset=38), lineno=678, col_offset=31), BinOp(Call(Name('int', Load(), lineno=678, col_offset=41), [Name('z', Load(), lineno=678, col_offset=45)], [], None, None, lineno=678, col_offset=41), Add(), Num(1, lineno=678, col_offset=48), lineno=678, col_offset=41)], Load(), lineno=678, col_offset=21), lineno=678, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=680, col_offset=8), 'gauss_next', Store(), lineno=680, col_offset=8)], Name('None', Load(), lineno=680, col_offset=26), lineno=680, col_offset=8)], [], lineno=651, col_offset=4), FunctionDef('random', arguments([Name('self', Param(), lineno=682, col_offset=15)], None, None, []), [Expr(Str('Get the next random number in the range [0.0, 1.0).', lineno=683, col_offset=8), lineno=683, col_offset=8), Assign([Tuple([Name('x', Store(), lineno=702, col_offset=8), Name('y', Store(), lineno=702, col_offset=11), Name('z', Store(), lineno=702, col_offset=14)], Store(), lineno=702, col_offset=8)], Attribute(Name('self', Load(), lineno=702, col_offset=18), '_seed', Load(), lineno=702, col_offset=18), lineno=702, col_offset=8), Assign([Name('x', Store(), lineno=703, col_offset=8)], BinOp(BinOp(Num(171, lineno=703, col_offset=13), Mult(), Name('x', Load(), lineno=703, col_offset=19), lineno=703, col_offset=13), Mod(), Num(30269, lineno=703, col_offset=24), lineno=703, col_offset=12), lineno=703, col_offset=8), Assign([Name('y', Store(), lineno=704, col_offset=8)], BinOp(BinOp(Num(172, lineno=704, col_offset=13), Mult(), Name('y', Load(), lineno=704, col_offset=19), lineno=704, col_offset=13), Mod(), Num(30307, lineno=704, col_offset=24), lineno=704, col_offset=12), lineno=704, col_offset=8), Assign([Name('z', Store(), lineno=705, col_offset=8)], BinOp(BinOp(Num(170, lineno=705, col_offset=13), Mult(), Name('z', Load(), lineno=705, col_offset=19), lineno=705, col_offset=13), Mod(), Num(30323, lineno=705, col_offset=24), lineno=705, col_offset=12), lineno=705, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=706, col_offset=8), '_seed', Store(), lineno=706, col_offset=8)], Tuple([Name('x', Load(), lineno=706, col_offset=21), Name('y', Load(), lineno=706, col_offset=24), Name('z', Load(), lineno=706, col_offset=27)], Load(), lineno=706, col_offset=21), lineno=706, col_offset=8), Return(BinOp(BinOp(BinOp(BinOp(Name('x', Load(), lineno=711, col_offset=16), Div(), Num(30269.0, lineno=711, col_offset=18), lineno=711, col_offset=16), Add(), BinOp(Name('y', Load(), lineno=711, col_offset=28), Div(), Num(30307.0, lineno=711, col_offset=30), lineno=711, col_offset=28), lineno=711, col_offset=16), Add(), BinOp(Name('z', Load(), lineno=711, col_offset=40), Div(), Num(30323.0, lineno=711, col_offset=42), lineno=711, col_offset=40), lineno=711, col_offset=38), Mod(), Num(1.0, lineno=711, col_offset=53), lineno=711, col_offset=15), lineno=711, col_offset=8)], [], lineno=682, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=713, col_offset=17)], None, None, []), [Expr(Str('Return internal state; can be passed to setstate() later.', lineno=714, col_offset=8), lineno=714, col_offset=8), Return(Tuple([Attribute(Name('self', Load(), lineno=715, col_offset=15), 'VERSION', Load(), lineno=715, col_offset=15), Attribute(Name('self', Load(), lineno=715, col_offset=29), '_seed', Load(), lineno=715, col_offset=29), Attribute(Name('self', Load(), lineno=715, col_offset=41), 'gauss_next', Load(), lineno=715, col_offset=41)], Load(), lineno=715, col_offset=15), lineno=715, col_offset=8)], [], lineno=713, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=717, col_offset=17), Name('state', Param(), lineno=717, col_offset=23)], None, None, []), [Expr(Str('Restore internal state from object returned by getstate().', lineno=718, col_offset=8), lineno=718, col_offset=8), Assign([Name('version', Store(), lineno=719, col_offset=8)], Subscript(Name('state', Load(), lineno=719, col_offset=18), Index(Num(0, lineno=719, col_offset=24)), Load(), lineno=719, col_offset=18), lineno=719, col_offset=8), If(Compare(Name('version', Load(), lineno=720, col_offset=11), [Eq()], [Num(1, lineno=720, col_offset=22)], lineno=720, col_offset=11), [Assign([Tuple([Name('version', Store(), lineno=721, col_offset=12), Attribute(Name('self', Load(), lineno=721, col_offset=21), '_seed', Store(), lineno=721, col_offset=21), Attribute(Name('self', Load(), lineno=721, col_offset=33), 'gauss_next', Store(), lineno=721, col_offset=33)], Store(), lineno=721, col_offset=12)], Name('state', Load(), lineno=721, col_offset=51), lineno=721, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=723, col_offset=18), [BinOp(Str('state with version %s passed to Random.setstate() of version %s', lineno=723, col_offset=29), Mod(), Tuple([Name('version', Load(), lineno=725, col_offset=30), Attribute(Name('self', Load(), lineno=725, col_offset=39), 'VERSION', Load(), lineno=725, col_offset=39)], Load(), lineno=725, col_offset=30), lineno=723, col_offset=29)], [], None, None, lineno=723, col_offset=18), None, None, lineno=723, col_offset=12)], lineno=720, col_offset=8)], [], lineno=717, col_offset=4), FunctionDef('jumpahead', arguments([Name('self', Param(), lineno=727, col_offset=18), Name('n', Param(), lineno=727, col_offset=24)], None, None, []), [Expr(Str('Act as if n calls to random() were made, but quickly.\n\n        n is an int, greater than or equal to 0.\n\n        Example use:  If you have 2 threads and know that each will\n        consume no more than a million random numbers, create two Random\n        objects r1 and r2, then do\n            r2.setstate(r1.getstate())\n            r2.jumpahead(1000000)\n        Then r1 and r2 will use guaranteed-disjoint segments of the full\n        period.\n        ', lineno=739, col_offset=-1), lineno=739, col_offset=-1), If(UnaryOp(Not(), Compare(Name('n', Load(), lineno=741, col_offset=15), [GtE()], [Num(0, lineno=741, col_offset=20)], lineno=741, col_offset=15), lineno=741, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=742, col_offset=18), [Str('n must be >= 0', lineno=742, col_offset=29)], [], None, None, lineno=742, col_offset=18), None, None, lineno=742, col_offset=12)], [], lineno=741, col_offset=8), Assign([Tuple([Name('x', Store(), lineno=743, col_offset=8), Name('y', Store(), lineno=743, col_offset=11), Name('z', Store(), lineno=743, col_offset=14)], Store(), lineno=743, col_offset=8)], Attribute(Name('self', Load(), lineno=743, col_offset=18), '_seed', Load(), lineno=743, col_offset=18), lineno=743, col_offset=8), Assign([Name('x', Store(), lineno=744, col_offset=8)], BinOp(Call(Name('int', Load(), lineno=744, col_offset=12), [BinOp(Name('x', Load(), lineno=744, col_offset=16), Mult(), Call(Name('pow', Load(), lineno=744, col_offset=20), [Num(171, lineno=744, col_offset=24), Name('n', Load(), lineno=744, col_offset=29), Num(30269, lineno=744, col_offset=32)], [], None, None, lineno=744, col_offset=20), lineno=744, col_offset=16)], [], None, None, lineno=744, col_offset=12), Mod(), Num(30269, lineno=744, col_offset=42), lineno=744, col_offset=12), lineno=744, col_offset=8), Assign([Name('y', Store(), lineno=745, col_offset=8)], BinOp(Call(Name('int', Load(), lineno=745, col_offset=12), [BinOp(Name('y', Load(), lineno=745, col_offset=16), Mult(), Call(Name('pow', Load(), lineno=745, col_offset=20), [Num(172, lineno=745, col_offset=24), Name('n', Load(), lineno=745, col_offset=29), Num(30307, lineno=745, col_offset=32)], [], None, None, lineno=745, col_offset=20), lineno=745, col_offset=16)], [], None, None, lineno=745, col_offset=12), Mod(), Num(30307, lineno=745, col_offset=42), lineno=745, col_offset=12), lineno=745, col_offset=8), Assign([Name('z', Store(), lineno=746, col_offset=8)], BinOp(Call(Name('int', Load(), lineno=746, col_offset=12), [BinOp(Name('z', Load(), lineno=746, col_offset=16), Mult(), Call(Name('pow', Load(), lineno=746, col_offset=20), [Num(170, lineno=746, col_offset=24), Name('n', Load(), lineno=746, col_offset=29), Num(30323, lineno=746, col_offset=32)], [], None, None, lineno=746, col_offset=20), lineno=746, col_offset=16)], [], None, None, lineno=746, col_offset=12), Mod(), Num(30323, lineno=746, col_offset=42), lineno=746, col_offset=12), lineno=746, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=747, col_offset=8), '_seed', Store(), lineno=747, col_offset=8)], Tuple([Name('x', Load(), lineno=747, col_offset=21), Name('y', Load(), lineno=747, col_offset=24), Name('z', Load(), lineno=747, col_offset=27)], Load(), lineno=747, col_offset=21), lineno=747, col_offset=8)], [], lineno=727, col_offset=4), FunctionDef('__whseed', arguments([Name('self', Param(), lineno=749, col_offset=17), Name('x', Param(), lineno=749, col_offset=23), Name('y', Param(), lineno=749, col_offset=28), Name('z', Param(), lineno=749, col_offset=33)], None, None, [Num(0, lineno=749, col_offset=25), Num(0, lineno=749, col_offset=30), Num(0, lineno=749, col_offset=35)]), [Expr(Str('Set the Wichmann-Hill seed from (x, y, z).\n\n        These must be integers in the range [0, 256).\n        ', lineno=753, col_offset=-1), lineno=753, col_offset=-1), If(UnaryOp(Not(), Compare(Call(Name('type', Load(), lineno=755, col_offset=15), [Name('x', Load(), lineno=755, col_offset=20)], [], None, None, lineno=755, col_offset=15), [Eq(), Eq(), Eq()], [Call(Name('type', Load(), lineno=755, col_offset=26), [Name('y', Load(), lineno=755, col_offset=31)], [], None, None, lineno=755, col_offset=26), Call(Name('type', Load(), lineno=755, col_offset=37), [Name('z', Load(), lineno=755, col_offset=42)], [], None, None, lineno=755, col_offset=37), Name('int', Load(), lineno=755, col_offset=48)], lineno=755, col_offset=15), lineno=755, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=756, col_offset=18), [Str('seeds must be integers', lineno=756, col_offset=28)], [], None, None, lineno=756, col_offset=18), None, None, lineno=756, col_offset=12)], [], lineno=755, col_offset=8), If(UnaryOp(Not(), BoolOp(And(), [Compare(Num(0, lineno=757, col_offset=16), [LtE(), Lt()], [Name('x', Load(), lineno=757, col_offset=21), Num(256, lineno=757, col_offset=25)], lineno=757, col_offset=16), Compare(Num(0, lineno=757, col_offset=33), [LtE(), Lt()], [Name('y', Load(), lineno=757, col_offset=38), Num(256, lineno=757, col_offset=42)], lineno=757, col_offset=33), Compare(Num(0, lineno=757, col_offset=50), [LtE(), Lt()], [Name('z', Load(), lineno=757, col_offset=55), Num(256, lineno=757, col_offset=59)], lineno=757, col_offset=50)], lineno=757, col_offset=16), lineno=757, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=758, col_offset=18), [Str('seeds must be in range(0, 256)', lineno=758, col_offset=29)], [], None, None, lineno=758, col_offset=18), None, None, lineno=758, col_offset=12)], [], lineno=757, col_offset=8), If(Compare(Num(0, lineno=759, col_offset=11), [Eq(), Eq(), Eq()], [Name('x', Load(), lineno=759, col_offset=16), Name('y', Load(), lineno=759, col_offset=21), Name('z', Load(), lineno=759, col_offset=26)], lineno=759, col_offset=11), [Import([alias('time', None)], lineno=761, col_offset=12), Assign([Name('t', Store(), lineno=762, col_offset=12)], Call(Name('long', Load(), lineno=762, col_offset=16), [BinOp(Call(Attribute(Name('time', Load(), lineno=762, col_offset=21), 'time', Load(), lineno=762, col_offset=21), [], [], None, None, lineno=762, col_offset=21), Mult(), Num(256, lineno=762, col_offset=35), lineno=762, col_offset=21)], [], None, None, lineno=762, col_offset=16), lineno=762, col_offset=12), Assign([Name('t', Store(), lineno=763, col_offset=12)], Call(Name('int', Load(), lineno=763, col_offset=16), [BinOp(BinOp(Name('t', Load(), lineno=763, col_offset=21), BitAnd(), Num(16777215, lineno=763, col_offset=23), lineno=763, col_offset=21), BitXor(), BinOp(Name('t', Load(), lineno=763, col_offset=36), RShift(), Num(24, lineno=763, col_offset=39), lineno=763, col_offset=36), lineno=763, col_offset=20)], [], None, None, lineno=763, col_offset=16), lineno=763, col_offset=12), Assign([Tuple([Name('t', Store(), lineno=764, col_offset=12), Name('x', Store(), lineno=764, col_offset=15)], Store(), lineno=764, col_offset=12)], Call(Name('divmod', Load(), lineno=764, col_offset=19), [Name('t', Load(), lineno=764, col_offset=26), Num(256, lineno=764, col_offset=29)], [], None, None, lineno=764, col_offset=19), lineno=764, col_offset=12), Assign([Tuple([Name('t', Store(), lineno=765, col_offset=12), Name('y', Store(), lineno=765, col_offset=15)], Store(), lineno=765, col_offset=12)], Call(Name('divmod', Load(), lineno=765, col_offset=19), [Name('t', Load(), lineno=765, col_offset=26), Num(256, lineno=765, col_offset=29)], [], None, None, lineno=765, col_offset=19), lineno=765, col_offset=12), Assign([Tuple([Name('t', Store(), lineno=766, col_offset=12), Name('z', Store(), lineno=766, col_offset=15)], Store(), lineno=766, col_offset=12)], Call(Name('divmod', Load(), lineno=766, col_offset=19), [Name('t', Load(), lineno=766, col_offset=26), Num(256, lineno=766, col_offset=29)], [], None, None, lineno=766, col_offset=19), lineno=766, col_offset=12)], [], lineno=759, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=768, col_offset=8), '_seed', Store(), lineno=768, col_offset=8)], Tuple([BoolOp(Or(), [Name('x', Load(), lineno=768, col_offset=22), Num(1, lineno=768, col_offset=27)], lineno=768, col_offset=22), BoolOp(Or(), [Name('y', Load(), lineno=768, col_offset=30), Num(1, lineno=768, col_offset=35)], lineno=768, col_offset=30), BoolOp(Or(), [Name('z', Load(), lineno=768, col_offset=38), Num(1, lineno=768, col_offset=43)], lineno=768, col_offset=38)], Load(), lineno=768, col_offset=22), lineno=768, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=770, col_offset=8), 'gauss_next', Store(), lineno=770, col_offset=8)], Name('None', Load(), lineno=770, col_offset=26), lineno=770, col_offset=8)], [], lineno=749, col_offset=4), FunctionDef('whseed', arguments([Name('self', Param(), lineno=772, col_offset=15), Name('a', Param(), lineno=772, col_offset=21)], None, None, [Name('None', Load(), lineno=772, col_offset=23)]), [Expr(Str("Seed from hashable object's hash code.\n\n        None or no argument seeds from current time.  It is not guaranteed\n        that objects with distinct hash codes lead to distinct internal\n        states.\n\n        This is obsolete, provided for compatibility with the seed routine\n        used prior to Python 2.1.  Use the .seed() method instead.\n        ", lineno=781, col_offset=-1), lineno=781, col_offset=-1), If(Compare(Name('a', Load(), lineno=783, col_offset=11), [Is()], [Name('None', Load(), lineno=783, col_offset=16)], lineno=783, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=784, col_offset=12), '__whseed', Load(), lineno=784, col_offset=12), [], [], None, None, lineno=784, col_offset=12), lineno=784, col_offset=12), Return(None, lineno=785, col_offset=12)], [], lineno=783, col_offset=8), Assign([Name('a', Store(), lineno=786, col_offset=8)], Call(Name('hash', Load(), lineno=786, col_offset=12), [Name('a', Load(), lineno=786, col_offset=17)], [], None, None, lineno=786, col_offset=12), lineno=786, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=787, col_offset=8), Name('x', Store(), lineno=787, col_offset=11)], Store(), lineno=787, col_offset=8)], Call(Name('divmod', Load(), lineno=787, col_offset=15), [Name('a', Load(), lineno=787, col_offset=22), Num(256, lineno=787, col_offset=25)], [], None, None, lineno=787, col_offset=15), lineno=787, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=788, col_offset=8), Name('y', Store(), lineno=788, col_offset=11)], Store(), lineno=788, col_offset=8)], Call(Name('divmod', Load(), lineno=788, col_offset=15), [Name('a', Load(), lineno=788, col_offset=22), Num(256, lineno=788, col_offset=25)], [], None, None, lineno=788, col_offset=15), lineno=788, col_offset=8), Assign([Tuple([Name('a', Store(), lineno=789, col_offset=8), Name('z', Store(), lineno=789, col_offset=11)], Store(), lineno=789, col_offset=8)], Call(Name('divmod', Load(), lineno=789, col_offset=15), [Name('a', Load(), lineno=789, col_offset=22), Num(256, lineno=789, col_offset=25)], [], None, None, lineno=789, col_offset=15), lineno=789, col_offset=8), Assign([Name('x', Store(), lineno=790, col_offset=8)], BoolOp(Or(), [BinOp(BinOp(Name('x', Load(), lineno=790, col_offset=13), Add(), Name('a', Load(), lineno=790, col_offset=17), lineno=790, col_offset=13), Mod(), Num(256, lineno=790, col_offset=22), lineno=790, col_offset=12), Num(1, lineno=790, col_offset=29)], lineno=790, col_offset=12), lineno=790, col_offset=8), Assign([Name('y', Store(), lineno=791, col_offset=8)], BoolOp(Or(), [BinOp(BinOp(Name('y', Load(), lineno=791, col_offset=13), Add(), Name('a', Load(), lineno=791, col_offset=17), lineno=791, col_offset=13), Mod(), Num(256, lineno=791, col_offset=22), lineno=791, col_offset=12), Num(1, lineno=791, col_offset=29)], lineno=791, col_offset=12), lineno=791, col_offset=8), Assign([Name('z', Store(), lineno=792, col_offset=8)], BoolOp(Or(), [BinOp(BinOp(Name('z', Load(), lineno=792, col_offset=13), Add(), Name('a', Load(), lineno=792, col_offset=17), lineno=792, col_offset=13), Mod(), Num(256, lineno=792, col_offset=22), lineno=792, col_offset=12), Num(1, lineno=792, col_offset=29)], lineno=792, col_offset=12), lineno=792, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=793, col_offset=8), '__whseed', Load(), lineno=793, col_offset=8), [Name('x', Load(), lineno=793, col_offset=22), Name('y', Load(), lineno=793, col_offset=25), Name('z', Load(), lineno=793, col_offset=28)], [], None, None, lineno=793, col_offset=8), lineno=793, col_offset=8)], [], lineno=772, col_offset=4)], [], lineno=647, col_offset=0), ClassDef('SystemRandom', [Name('Random', Load(), lineno=797, col_offset=19)], [Expr(Str('Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    ', lineno=803, col_offset=-1), lineno=803, col_offset=-1), FunctionDef('random', arguments([Name('self', Param(), lineno=805, col_offset=15)], None, None, []), [Expr(Str('Get the next random number in the range [0.0, 1.0).', lineno=806, col_offset=8), lineno=806, col_offset=8), Return(BinOp(BinOp(Call(Name('long', Load(), lineno=807, col_offset=16), [Call(Name('_hexlify', Load(), lineno=807, col_offset=21), [Call(Name('_urandom', Load(), lineno=807, col_offset=30), [Num(7, lineno=807, col_offset=39)], [], None, None, lineno=807, col_offset=30)], [], None, None, lineno=807, col_offset=21), Num(16, lineno=807, col_offset=44)], [], None, None, lineno=807, col_offset=16), RShift(), Num(3, lineno=807, col_offset=51), lineno=807, col_offset=16), Mult(), Name('RECIP_BPF', Load(), lineno=807, col_offset=56), lineno=807, col_offset=15), lineno=807, col_offset=8)], [], lineno=805, col_offset=4), FunctionDef('getrandbits', arguments([Name('self', Param(), lineno=809, col_offset=20), Name('k', Param(), lineno=809, col_offset=26)], None, None, []), [Expr(Str('getrandbits(k) -> x.  Generates a long int with k random bits.', lineno=810, col_offset=8), lineno=810, col_offset=8), If(Compare(Name('k', Load(), lineno=811, col_offset=11), [LtE()], [Num(0, lineno=811, col_offset=16)], lineno=811, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=812, col_offset=18), [Str('number of bits must be greater than zero', lineno=812, col_offset=29)], [], None, None, lineno=812, col_offset=18), None, None, lineno=812, col_offset=12)], [], lineno=811, col_offset=8), If(Compare(Name('k', Load(), lineno=813, col_offset=11), [NotEq()], [Call(Name('int', Load(), lineno=813, col_offset=16), [Name('k', Load(), lineno=813, col_offset=20)], [], None, None, lineno=813, col_offset=16)], lineno=813, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=814, col_offset=18), [Str('number of bits should be an integer', lineno=814, col_offset=28)], [], None, None, lineno=814, col_offset=18), None, None, lineno=814, col_offset=12)], [], lineno=813, col_offset=8), Assign([Name('bytes', Store(), lineno=815, col_offset=8)], BinOp(BinOp(Name('k', Load(), lineno=815, col_offset=17), Add(), Num(7, lineno=815, col_offset=21), lineno=815, col_offset=17), FloorDiv(), Num(8, lineno=815, col_offset=27), lineno=815, col_offset=16), lineno=815, col_offset=8), Assign([Name('x', Store(), lineno=816, col_offset=8)], Call(Name('long', Load(), lineno=816, col_offset=12), [Call(Name('_hexlify', Load(), lineno=816, col_offset=17), [Call(Name('_urandom', Load(), lineno=816, col_offset=26), [Name('bytes', Load(), lineno=816, col_offset=35)], [], None, None, lineno=816, col_offset=26)], [], None, None, lineno=816, col_offset=17), Num(16, lineno=816, col_offset=44)], [], None, None, lineno=816, col_offset=12), lineno=816, col_offset=8), Return(BinOp(Name('x', Load(), lineno=817, col_offset=15), RShift(), BinOp(BinOp(Name('bytes', Load(), lineno=817, col_offset=21), Mult(), Num(8, lineno=817, col_offset=29), lineno=817, col_offset=21), Sub(), Name('k', Load(), lineno=817, col_offset=33), lineno=817, col_offset=21), lineno=817, col_offset=15), lineno=817, col_offset=8)], [], lineno=809, col_offset=4), FunctionDef('_stub', arguments([Name('self', Param(), lineno=819, col_offset=14)], 'args', 'kwds', []), [Expr(Str('Stub method.  Not used for a system random number generator.', lineno=820, col_offset=8), lineno=820, col_offset=8), Return(Name('None', Load(), lineno=821, col_offset=15), lineno=821, col_offset=8)], [], lineno=819, col_offset=4), Assign([Name('seed', Store(), lineno=822, col_offset=4), Name('jumpahead', Store(), lineno=822, col_offset=11)], Name('_stub', Load(), lineno=822, col_offset=23), lineno=822, col_offset=4), FunctionDef('_notimplemented', arguments([Name('self', Param(), lineno=824, col_offset=24)], 'args', 'kwds', []), [Expr(Str('Method should not be called for a system random number generator.', lineno=825, col_offset=8), lineno=825, col_offset=8), Raise(Call(Name('NotImplementedError', Load(), lineno=826, col_offset=14), [Str('System entropy source does not have state.', lineno=826, col_offset=34)], [], None, None, lineno=826, col_offset=14), None, None, lineno=826, col_offset=8)], [], lineno=824, col_offset=4), Assign([Name('getstate', Store(), lineno=827, col_offset=4), Name('setstate', Store(), lineno=827, col_offset=15)], Name('_notimplemented', Load(), lineno=827, col_offset=26), lineno=827, col_offset=4)], [], lineno=797, col_offset=0), FunctionDef('_test_generator', arguments([Name('n', Param(), lineno=831, col_offset=20), Name('func', Param(), lineno=831, col_offset=23), Name('args', Param(), lineno=831, col_offset=29)], None, None, []), [Import([alias('time', None)], lineno=832, col_offset=4), Print(None, [Name('n', Load(), lineno=833, col_offset=10), Str('times', lineno=833, col_offset=13), Attribute(Name('func', Load(), lineno=833, col_offset=22), '__name__', Load(), lineno=833, col_offset=22)], True, lineno=833, col_offset=4), Assign([Name('total', Store(), lineno=834, col_offset=4)], Num(0.0, lineno=834, col_offset=12), lineno=834, col_offset=4), Assign([Name('sqsum', Store(), lineno=835, col_offset=4)], Num(0.0, lineno=835, col_offset=12), lineno=835, col_offset=4), Assign([Name('smallest', Store(), lineno=836, col_offset=4)], Num(10000000000.0, lineno=836, col_offset=15), lineno=836, col_offset=4), Assign([Name('largest', Store(), lineno=837, col_offset=4)], Num(-10000000000.0, lineno=837, col_offset=15), lineno=837, col_offset=4), Assign([Name('t0', Store(), lineno=838, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=838, col_offset=9), 'time', Load(), lineno=838, col_offset=9), [], [], None, None, lineno=838, col_offset=9), lineno=838, col_offset=4), For(Name('i', Store(), lineno=839, col_offset=8), Call(Name('range', Load(), lineno=839, col_offset=13), [Name('n', Load(), lineno=839, col_offset=19)], [], None, None, lineno=839, col_offset=13), [Assign([Name('x', Store(), lineno=840, col_offset=8)], Call(Name('func', Load(), lineno=840, col_offset=12), [], [], Name('args', Load(), lineno=840, col_offset=18), None, lineno=840, col_offset=12), lineno=840, col_offset=8), AugAssign(Name('total', Store(), lineno=841, col_offset=8), Add(), Name('x', Load(), lineno=841, col_offset=17), lineno=841, col_offset=8), Assign([Name('sqsum', Store(), lineno=842, col_offset=8)], BinOp(Name('sqsum', Load(), lineno=842, col_offset=16), Add(), BinOp(Name('x', Load(), lineno=842, col_offset=24), Mult(), Name('x', Load(), lineno=842, col_offset=26), lineno=842, col_offset=24), lineno=842, col_offset=16), lineno=842, col_offset=8), Assign([Name('smallest', Store(), lineno=843, col_offset=8)], Call(Name('min', Load(), lineno=843, col_offset=19), [Name('x', Load(), lineno=843, col_offset=23), Name('smallest', Load(), lineno=843, col_offset=26)], [], None, None, lineno=843, col_offset=19), lineno=843, col_offset=8), Assign([Name('largest', Store(), lineno=844, col_offset=8)], Call(Name('max', Load(), lineno=844, col_offset=18), [Name('x', Load(), lineno=844, col_offset=22), Name('largest', Load(), lineno=844, col_offset=25)], [], None, None, lineno=844, col_offset=18), lineno=844, col_offset=8)], [], lineno=839, col_offset=4), Assign([Name('t1', Store(), lineno=845, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=845, col_offset=9), 'time', Load(), lineno=845, col_offset=9), [], [], None, None, lineno=845, col_offset=9), lineno=845, col_offset=4), Print(None, [Call(Name('round', Load(), lineno=846, col_offset=10), [BinOp(Name('t1', Load(), lineno=846, col_offset=16), Sub(), Name('t0', Load(), lineno=846, col_offset=19), lineno=846, col_offset=16), Num(3, lineno=846, col_offset=23)], [], None, None, lineno=846, col_offset=10), Str('sec,', lineno=846, col_offset=27)], False, lineno=846, col_offset=4), Assign([Name('avg', Store(), lineno=847, col_offset=4)], BinOp(Name('total', Load(), lineno=847, col_offset=10), Div(), Name('n', Load(), lineno=847, col_offset=16), lineno=847, col_offset=10), lineno=847, col_offset=4), Assign([Name('stddev', Store(), lineno=848, col_offset=4)], Call(Name('_sqrt', Load(), lineno=848, col_offset=13), [BinOp(BinOp(Name('sqsum', Load(), lineno=848, col_offset=19), Div(), Name('n', Load(), lineno=848, col_offset=25), lineno=848, col_offset=19), Sub(), BinOp(Name('avg', Load(), lineno=848, col_offset=29), Mult(), Name('avg', Load(), lineno=848, col_offset=33), lineno=848, col_offset=29), lineno=848, col_offset=19)], [], None, None, lineno=848, col_offset=13), lineno=848, col_offset=4), Print(None, [BinOp(Str('avg %g, stddev %g, min %g, max %g', lineno=849, col_offset=10), Mod(), Tuple([Name('avg', Load(), lineno=850, col_offset=15), Name('stddev', Load(), lineno=850, col_offset=20), Name('smallest', Load(), lineno=850, col_offset=28), Name('largest', Load(), lineno=850, col_offset=38)], Load(), lineno=850, col_offset=15), lineno=849, col_offset=10)], True, lineno=849, col_offset=4)], [], lineno=831, col_offset=0), FunctionDef('_test', arguments([Name('N', Param(), lineno=853, col_offset=10)], None, None, [Num(2000, lineno=853, col_offset=12)]), [Expr(Call(Name('_test_generator', Load(), lineno=854, col_offset=4), [Name('N', Load(), lineno=854, col_offset=20), Name('random', Load(), lineno=854, col_offset=23), Tuple([], Load(), lineno=854, col_offset=31)], [], None, None, lineno=854, col_offset=4), lineno=854, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=855, col_offset=4), [Name('N', Load(), lineno=855, col_offset=20), Name('normalvariate', Load(), lineno=855, col_offset=23), Tuple([Num(0.0, lineno=855, col_offset=39), Num(1.0, lineno=855, col_offset=44)], Load(), lineno=855, col_offset=39)], [], None, None, lineno=855, col_offset=4), lineno=855, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=856, col_offset=4), [Name('N', Load(), lineno=856, col_offset=20), Name('lognormvariate', Load(), lineno=856, col_offset=23), Tuple([Num(0.0, lineno=856, col_offset=40), Num(1.0, lineno=856, col_offset=45)], Load(), lineno=856, col_offset=40)], [], None, None, lineno=856, col_offset=4), lineno=856, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=857, col_offset=4), [Name('N', Load(), lineno=857, col_offset=20), Name('vonmisesvariate', Load(), lineno=857, col_offset=23), Tuple([Num(0.0, lineno=857, col_offset=41), Num(1.0, lineno=857, col_offset=46)], Load(), lineno=857, col_offset=41)], [], None, None, lineno=857, col_offset=4), lineno=857, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=858, col_offset=4), [Name('N', Load(), lineno=858, col_offset=20), Name('gammavariate', Load(), lineno=858, col_offset=23), Tuple([Num(0.01, lineno=858, col_offset=38), Num(1.0, lineno=858, col_offset=44)], Load(), lineno=858, col_offset=38)], [], None, None, lineno=858, col_offset=4), lineno=858, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=859, col_offset=4), [Name('N', Load(), lineno=859, col_offset=20), Name('gammavariate', Load(), lineno=859, col_offset=23), Tuple([Num(0.1, lineno=859, col_offset=38), Num(1.0, lineno=859, col_offset=43)], Load(), lineno=859, col_offset=38)], [], None, None, lineno=859, col_offset=4), lineno=859, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=860, col_offset=4), [Name('N', Load(), lineno=860, col_offset=20), Name('gammavariate', Load(), lineno=860, col_offset=23), Tuple([Num(0.1, lineno=860, col_offset=38), Num(2.0, lineno=860, col_offset=43)], Load(), lineno=860, col_offset=38)], [], None, None, lineno=860, col_offset=4), lineno=860, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=861, col_offset=4), [Name('N', Load(), lineno=861, col_offset=20), Name('gammavariate', Load(), lineno=861, col_offset=23), Tuple([Num(0.5, lineno=861, col_offset=38), Num(1.0, lineno=861, col_offset=43)], Load(), lineno=861, col_offset=38)], [], None, None, lineno=861, col_offset=4), lineno=861, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=862, col_offset=4), [Name('N', Load(), lineno=862, col_offset=20), Name('gammavariate', Load(), lineno=862, col_offset=23), Tuple([Num(0.9, lineno=862, col_offset=38), Num(1.0, lineno=862, col_offset=43)], Load(), lineno=862, col_offset=38)], [], None, None, lineno=862, col_offset=4), lineno=862, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=863, col_offset=4), [Name('N', Load(), lineno=863, col_offset=20), Name('gammavariate', Load(), lineno=863, col_offset=23), Tuple([Num(1.0, lineno=863, col_offset=38), Num(1.0, lineno=863, col_offset=43)], Load(), lineno=863, col_offset=38)], [], None, None, lineno=863, col_offset=4), lineno=863, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=864, col_offset=4), [Name('N', Load(), lineno=864, col_offset=20), Name('gammavariate', Load(), lineno=864, col_offset=23), Tuple([Num(2.0, lineno=864, col_offset=38), Num(1.0, lineno=864, col_offset=43)], Load(), lineno=864, col_offset=38)], [], None, None, lineno=864, col_offset=4), lineno=864, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=865, col_offset=4), [Name('N', Load(), lineno=865, col_offset=20), Name('gammavariate', Load(), lineno=865, col_offset=23), Tuple([Num(20.0, lineno=865, col_offset=38), Num(1.0, lineno=865, col_offset=44)], Load(), lineno=865, col_offset=38)], [], None, None, lineno=865, col_offset=4), lineno=865, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=866, col_offset=4), [Name('N', Load(), lineno=866, col_offset=20), Name('gammavariate', Load(), lineno=866, col_offset=23), Tuple([Num(200.0, lineno=866, col_offset=38), Num(1.0, lineno=866, col_offset=45)], Load(), lineno=866, col_offset=38)], [], None, None, lineno=866, col_offset=4), lineno=866, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=867, col_offset=4), [Name('N', Load(), lineno=867, col_offset=20), Name('gauss', Load(), lineno=867, col_offset=23), Tuple([Num(0.0, lineno=867, col_offset=31), Num(1.0, lineno=867, col_offset=36)], Load(), lineno=867, col_offset=31)], [], None, None, lineno=867, col_offset=4), lineno=867, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=868, col_offset=4), [Name('N', Load(), lineno=868, col_offset=20), Name('betavariate', Load(), lineno=868, col_offset=23), Tuple([Num(3.0, lineno=868, col_offset=37), Num(3.0, lineno=868, col_offset=42)], Load(), lineno=868, col_offset=37)], [], None, None, lineno=868, col_offset=4), lineno=868, col_offset=4), Expr(Call(Name('_test_generator', Load(), lineno=869, col_offset=4), [Name('N', Load(), lineno=869, col_offset=20), Name('triangular', Load(), lineno=869, col_offset=23), Tuple([Num(0.0, lineno=869, col_offset=36), Num(1.0, lineno=869, col_offset=41), BinOp(Num(1.0, lineno=869, col_offset=46), Div(), Num(3.0, lineno=869, col_offset=50), lineno=869, col_offset=46)], Load(), lineno=869, col_offset=36)], [], None, None, lineno=869, col_offset=4), lineno=869, col_offset=4)], [], lineno=853, col_offset=0), Assign([Name('_inst', Store(), lineno=877, col_offset=0)], Call(Name('Random', Load(), lineno=877, col_offset=8), [], [], None, None, lineno=877, col_offset=8), lineno=877, col_offset=0), Assign([Name('seed', Store(), lineno=878, col_offset=0)], Attribute(Name('_inst', Load(), lineno=878, col_offset=7), 'seed', Load(), lineno=878, col_offset=7), lineno=878, col_offset=0), Assign([Name('random', Store(), lineno=879, col_offset=0)], Attribute(Name('_inst', Load(), lineno=879, col_offset=9), 'random', Load(), lineno=879, col_offset=9), lineno=879, col_offset=0), Assign([Name('uniform', Store(), lineno=880, col_offset=0)], Attribute(Name('_inst', Load(), lineno=880, col_offset=10), 'uniform', Load(), lineno=880, col_offset=10), lineno=880, col_offset=0), Assign([Name('triangular', Store(), lineno=881, col_offset=0)], Attribute(Name('_inst', Load(), lineno=881, col_offset=13), 'triangular', Load(), lineno=881, col_offset=13), lineno=881, col_offset=0), Assign([Name('randint', Store(), lineno=882, col_offset=0)], Attribute(Name('_inst', Load(), lineno=882, col_offset=10), 'randint', Load(), lineno=882, col_offset=10), lineno=882, col_offset=0), Assign([Name('choice', Store(), lineno=883, col_offset=0)], Attribute(Name('_inst', Load(), lineno=883, col_offset=9), 'choice', Load(), lineno=883, col_offset=9), lineno=883, col_offset=0), Assign([Name('randrange', Store(), lineno=884, col_offset=0)], Attribute(Name('_inst', Load(), lineno=884, col_offset=12), 'randrange', Load(), lineno=884, col_offset=12), lineno=884, col_offset=0), Assign([Name('sample', Store(), lineno=885, col_offset=0)], Attribute(Name('_inst', Load(), lineno=885, col_offset=9), 'sample', Load(), lineno=885, col_offset=9), lineno=885, col_offset=0), Assign([Name('shuffle', Store(), lineno=886, col_offset=0)], Attribute(Name('_inst', Load(), lineno=886, col_offset=10), 'shuffle', Load(), lineno=886, col_offset=10), lineno=886, col_offset=0), Assign([Name('normalvariate', Store(), lineno=887, col_offset=0)], Attribute(Name('_inst', Load(), lineno=887, col_offset=16), 'normalvariate', Load(), lineno=887, col_offset=16), lineno=887, col_offset=0), Assign([Name('lognormvariate', Store(), lineno=888, col_offset=0)], Attribute(Name('_inst', Load(), lineno=888, col_offset=17), 'lognormvariate', Load(), lineno=888, col_offset=17), lineno=888, col_offset=0), Assign([Name('expovariate', Store(), lineno=889, col_offset=0)], Attribute(Name('_inst', Load(), lineno=889, col_offset=14), 'expovariate', Load(), lineno=889, col_offset=14), lineno=889, col_offset=0), Assign([Name('vonmisesvariate', Store(), lineno=890, col_offset=0)], Attribute(Name('_inst', Load(), lineno=890, col_offset=18), 'vonmisesvariate', Load(), lineno=890, col_offset=18), lineno=890, col_offset=0), Assign([Name('gammavariate', Store(), lineno=891, col_offset=0)], Attribute(Name('_inst', Load(), lineno=891, col_offset=15), 'gammavariate', Load(), lineno=891, col_offset=15), lineno=891, col_offset=0), Assign([Name('gauss', Store(), lineno=892, col_offset=0)], Attribute(Name('_inst', Load(), lineno=892, col_offset=8), 'gauss', Load(), lineno=892, col_offset=8), lineno=892, col_offset=0), Assign([Name('betavariate', Store(), lineno=893, col_offset=0)], Attribute(Name('_inst', Load(), lineno=893, col_offset=14), 'betavariate', Load(), lineno=893, col_offset=14), lineno=893, col_offset=0), Assign([Name('paretovariate', Store(), lineno=894, col_offset=0)], Attribute(Name('_inst', Load(), lineno=894, col_offset=16), 'paretovariate', Load(), lineno=894, col_offset=16), lineno=894, col_offset=0), Assign([Name('weibullvariate', Store(), lineno=895, col_offset=0)], Attribute(Name('_inst', Load(), lineno=895, col_offset=17), 'weibullvariate', Load(), lineno=895, col_offset=17), lineno=895, col_offset=0), Assign([Name('getstate', Store(), lineno=896, col_offset=0)], Attribute(Name('_inst', Load(), lineno=896, col_offset=11), 'getstate', Load(), lineno=896, col_offset=11), lineno=896, col_offset=0), Assign([Name('setstate', Store(), lineno=897, col_offset=0)], Attribute(Name('_inst', Load(), lineno=897, col_offset=11), 'setstate', Load(), lineno=897, col_offset=11), lineno=897, col_offset=0), Assign([Name('jumpahead', Store(), lineno=898, col_offset=0)], Attribute(Name('_inst', Load(), lineno=898, col_offset=12), 'jumpahead', Load(), lineno=898, col_offset=12), lineno=898, col_offset=0), Assign([Name('getrandbits', Store(), lineno=899, col_offset=0)], Attribute(Name('_inst', Load(), lineno=899, col_offset=14), 'getrandbits', Load(), lineno=899, col_offset=14), lineno=899, col_offset=0), If(Compare(Name('__name__', Load(), lineno=901, col_offset=3), [Eq()], [Str('__main__', lineno=901, col_offset=15)], lineno=901, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=902, col_offset=4), [], [], None, None, lineno=902, col_offset=4), lineno=902, col_offset=4)], [], lineno=901, col_offset=0)])
