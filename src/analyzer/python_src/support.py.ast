Module([Import([alias('unittest', None)], lineno=1, col_offset=0), ClassDef('TestHashing', [Name('object', Load(), lineno=4, col_offset=18)], [Expr(Str('Used as a mixin for TestCase', lineno=5, col_offset=4), lineno=5, col_offset=4), FunctionDef('test_hash', arguments([Name('self', Param(), lineno=8, col_offset=18)], None, None, []), [For(Tuple([Name('obj_1', Store(), lineno=9, col_offset=12), Name('obj_2', Store(), lineno=9, col_offset=19)], Store(), lineno=9, col_offset=12), Attribute(Name('self', Load(), lineno=9, col_offset=28), 'eq_pairs', Load(), lineno=9, col_offset=28), [TryExcept([If(UnaryOp(Not(), Compare(Call(Name('hash', Load(), lineno=11, col_offset=23), [Name('obj_1', Load(), lineno=11, col_offset=28)], [], None, None, lineno=11, col_offset=23), [Eq()], [Call(Name('hash', Load(), lineno=11, col_offset=38), [Name('obj_2', Load(), lineno=11, col_offset=43)], [], None, None, lineno=11, col_offset=38)], lineno=11, col_offset=23), lineno=11, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=12, col_offset=20), 'fail', Load(), lineno=12, col_offset=20), [BinOp(Str('%r and %r do not hash equal', lineno=12, col_offset=30), Mod(), Tuple([Name('obj_1', Load(), lineno=12, col_offset=63), Name('obj_2', Load(), lineno=12, col_offset=70)], Load(), lineno=12, col_offset=63), lineno=12, col_offset=30)], [], None, None, lineno=12, col_offset=20), lineno=12, col_offset=20)], [], lineno=11, col_offset=16)], [ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=13, col_offset=19), None, [Raise(None, None, None, lineno=14, col_offset=16)], lineno=13, col_offset=12), ExceptHandler(Name('Exception', Load(), lineno=15, col_offset=19), Name('e', Store(), lineno=15, col_offset=30), [Expr(Call(Attribute(Name('self', Load(), lineno=16, col_offset=16), 'fail', Load(), lineno=16, col_offset=16), [BinOp(Str('Problem hashing %r and %r: %s', lineno=16, col_offset=26), Mod(), Tuple([Name('obj_1', Load(), lineno=16, col_offset=61), Name('obj_2', Load(), lineno=16, col_offset=68), Name('e', Load(), lineno=16, col_offset=75)], Load(), lineno=16, col_offset=61), lineno=16, col_offset=26)], [], None, None, lineno=16, col_offset=16), lineno=16, col_offset=16)], lineno=15, col_offset=12)], [], lineno=10, col_offset=12)], [], lineno=9, col_offset=8), For(Tuple([Name('obj_1', Store(), lineno=18, col_offset=12), Name('obj_2', Store(), lineno=18, col_offset=19)], Store(), lineno=18, col_offset=12), Attribute(Name('self', Load(), lineno=18, col_offset=28), 'ne_pairs', Load(), lineno=18, col_offset=28), [TryExcept([If(Compare(Call(Name('hash', Load(), lineno=20, col_offset=19), [Name('obj_1', Load(), lineno=20, col_offset=24)], [], None, None, lineno=20, col_offset=19), [Eq()], [Call(Name('hash', Load(), lineno=20, col_offset=34), [Name('obj_2', Load(), lineno=20, col_offset=39)], [], None, None, lineno=20, col_offset=34)], lineno=20, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=21, col_offset=20), 'fail', Load(), lineno=21, col_offset=20), [BinOp(Str("%s and %s hash equal, but shouldn't", lineno=21, col_offset=30), Mod(), Tuple([Name('obj_1', Load(), lineno=22, col_offset=31), Name('obj_2', Load(), lineno=22, col_offset=38)], Load(), lineno=22, col_offset=31), lineno=21, col_offset=30)], [], None, None, lineno=21, col_offset=20), lineno=21, col_offset=20)], [], lineno=20, col_offset=16)], [ExceptHandler(Name('KeyboardInterrupt', Load(), lineno=23, col_offset=19), None, [Raise(None, None, None, lineno=24, col_offset=16)], lineno=23, col_offset=12), ExceptHandler(Name('Exception', Load(), lineno=25, col_offset=19), Name('e', Store(), lineno=25, col_offset=30), [Expr(Call(Attribute(Name('self', Load(), lineno=26, col_offset=16), 'fail', Load(), lineno=26, col_offset=16), [BinOp(Str('Problem hashing %s and %s: %s', lineno=26, col_offset=26), Mod(), Tuple([Name('obj_1', Load(), lineno=26, col_offset=61), Name('obj_2', Load(), lineno=26, col_offset=68), Name('e', Load(), lineno=26, col_offset=75)], Load(), lineno=26, col_offset=61), lineno=26, col_offset=26)], [], None, None, lineno=26, col_offset=16), lineno=26, col_offset=16)], lineno=25, col_offset=12)], [], lineno=19, col_offset=12)], [], lineno=18, col_offset=8)], [], lineno=8, col_offset=4)], [], lineno=4, col_offset=0), ClassDef('TestEquality', [Name('object', Load(), lineno=29, col_offset=19)], [Expr(Str('Used as a mixin for TestCase', lineno=30, col_offset=4), lineno=30, col_offset=4), FunctionDef('test_eq', arguments([Name('self', Param(), lineno=33, col_offset=16)], None, None, []), [For(Tuple([Name('obj_1', Store(), lineno=34, col_offset=12), Name('obj_2', Store(), lineno=34, col_offset=19)], Store(), lineno=34, col_offset=12), Attribute(Name('self', Load(), lineno=34, col_offset=28), 'eq_pairs', Load(), lineno=34, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=35, col_offset=12), 'assertEqual', Load(), lineno=35, col_offset=12), [Name('obj_1', Load(), lineno=35, col_offset=29), Name('obj_2', Load(), lineno=35, col_offset=36)], [], None, None, lineno=35, col_offset=12), lineno=35, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=36, col_offset=12), 'assertEqual', Load(), lineno=36, col_offset=12), [Name('obj_2', Load(), lineno=36, col_offset=29), Name('obj_1', Load(), lineno=36, col_offset=36)], [], None, None, lineno=36, col_offset=12), lineno=36, col_offset=12)], [], lineno=34, col_offset=8)], [], lineno=33, col_offset=4), FunctionDef('test_ne', arguments([Name('self', Param(), lineno=39, col_offset=16)], None, None, []), [For(Tuple([Name('obj_1', Store(), lineno=40, col_offset=12), Name('obj_2', Store(), lineno=40, col_offset=19)], Store(), lineno=40, col_offset=12), Attribute(Name('self', Load(), lineno=40, col_offset=28), 'ne_pairs', Load(), lineno=40, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=41, col_offset=12), 'assertNotEqual', Load(), lineno=41, col_offset=12), [Name('obj_1', Load(), lineno=41, col_offset=32), Name('obj_2', Load(), lineno=41, col_offset=39)], [], None, None, lineno=41, col_offset=12), lineno=41, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=42, col_offset=12), 'assertNotEqual', Load(), lineno=42, col_offset=12), [Name('obj_2', Load(), lineno=42, col_offset=32), Name('obj_1', Load(), lineno=42, col_offset=39)], [], None, None, lineno=42, col_offset=12), lineno=42, col_offset=12)], [], lineno=40, col_offset=8)], [], lineno=39, col_offset=4)], [], lineno=29, col_offset=0), ClassDef('LoggingResult', [Attribute(Name('unittest', Load(), lineno=45, col_offset=20), 'TestResult', Load(), lineno=45, col_offset=20)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=46, col_offset=17), Name('log', Param(), lineno=46, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=47, col_offset=8), '_events', Store(), lineno=47, col_offset=8)], Name('log', Load(), lineno=47, col_offset=23), lineno=47, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=48, col_offset=8), [Name('LoggingResult', Load(), lineno=48, col_offset=14), Name('self', Load(), lineno=48, col_offset=29)], [], None, None, lineno=48, col_offset=8), '__init__', Load(), lineno=48, col_offset=8), [], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=46, col_offset=4), FunctionDef('startTest', arguments([Name('self', Param(), lineno=50, col_offset=18), Name('test', Param(), lineno=50, col_offset=24)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=51, col_offset=8), '_events', Load(), lineno=51, col_offset=8), 'append', Load(), lineno=51, col_offset=8), [Str('startTest', lineno=51, col_offset=28)], [], None, None, lineno=51, col_offset=8), lineno=51, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=52, col_offset=8), [Name('LoggingResult', Load(), lineno=52, col_offset=14), Name('self', Load(), lineno=52, col_offset=29)], [], None, None, lineno=52, col_offset=8), 'startTest', Load(), lineno=52, col_offset=8), [Name('test', Load(), lineno=52, col_offset=45)], [], None, None, lineno=52, col_offset=8), lineno=52, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('startTestRun', arguments([Name('self', Param(), lineno=54, col_offset=21)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=55, col_offset=8), '_events', Load(), lineno=55, col_offset=8), 'append', Load(), lineno=55, col_offset=8), [Str('startTestRun', lineno=55, col_offset=28)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=56, col_offset=8), [Name('LoggingResult', Load(), lineno=56, col_offset=14), Name('self', Load(), lineno=56, col_offset=29)], [], None, None, lineno=56, col_offset=8), 'startTestRun', Load(), lineno=56, col_offset=8), [], [], None, None, lineno=56, col_offset=8), lineno=56, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('stopTest', arguments([Name('self', Param(), lineno=58, col_offset=17), Name('test', Param(), lineno=58, col_offset=23)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=59, col_offset=8), '_events', Load(), lineno=59, col_offset=8), 'append', Load(), lineno=59, col_offset=8), [Str('stopTest', lineno=59, col_offset=28)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=60, col_offset=8), [Name('LoggingResult', Load(), lineno=60, col_offset=14), Name('self', Load(), lineno=60, col_offset=29)], [], None, None, lineno=60, col_offset=8), 'stopTest', Load(), lineno=60, col_offset=8), [Name('test', Load(), lineno=60, col_offset=44)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('stopTestRun', arguments([Name('self', Param(), lineno=62, col_offset=20)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=63, col_offset=8), '_events', Load(), lineno=63, col_offset=8), 'append', Load(), lineno=63, col_offset=8), [Str('stopTestRun', lineno=63, col_offset=28)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=64, col_offset=8), [Name('LoggingResult', Load(), lineno=64, col_offset=14), Name('self', Load(), lineno=64, col_offset=29)], [], None, None, lineno=64, col_offset=8), 'stopTestRun', Load(), lineno=64, col_offset=8), [], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('addFailure', arguments([Name('self', Param(), lineno=66, col_offset=19)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=67, col_offset=8), '_events', Load(), lineno=67, col_offset=8), 'append', Load(), lineno=67, col_offset=8), [Str('addFailure', lineno=67, col_offset=28)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=68, col_offset=8), [Name('LoggingResult', Load(), lineno=68, col_offset=14), Name('self', Load(), lineno=68, col_offset=29)], [], None, None, lineno=68, col_offset=8), 'addFailure', Load(), lineno=68, col_offset=8), [], [], Name('args', Load(), lineno=68, col_offset=47), None, lineno=68, col_offset=8), lineno=68, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('addSuccess', arguments([Name('self', Param(), lineno=70, col_offset=19)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=71, col_offset=8), '_events', Load(), lineno=71, col_offset=8), 'append', Load(), lineno=71, col_offset=8), [Str('addSuccess', lineno=71, col_offset=28)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=72, col_offset=8), [Name('LoggingResult', Load(), lineno=72, col_offset=14), Name('self', Load(), lineno=72, col_offset=29)], [], None, None, lineno=72, col_offset=8), 'addSuccess', Load(), lineno=72, col_offset=8), [], [], Name('args', Load(), lineno=72, col_offset=47), None, lineno=72, col_offset=8), lineno=72, col_offset=8)], [], lineno=70, col_offset=4), FunctionDef('addError', arguments([Name('self', Param(), lineno=74, col_offset=17)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=75, col_offset=8), '_events', Load(), lineno=75, col_offset=8), 'append', Load(), lineno=75, col_offset=8), [Str('addError', lineno=75, col_offset=28)], [], None, None, lineno=75, col_offset=8), lineno=75, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=76, col_offset=8), [Name('LoggingResult', Load(), lineno=76, col_offset=14), Name('self', Load(), lineno=76, col_offset=29)], [], None, None, lineno=76, col_offset=8), 'addError', Load(), lineno=76, col_offset=8), [], [], Name('args', Load(), lineno=76, col_offset=45), None, lineno=76, col_offset=8), lineno=76, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('addSkip', arguments([Name('self', Param(), lineno=78, col_offset=16)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=79, col_offset=8), '_events', Load(), lineno=79, col_offset=8), 'append', Load(), lineno=79, col_offset=8), [Str('addSkip', lineno=79, col_offset=28)], [], None, None, lineno=79, col_offset=8), lineno=79, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=80, col_offset=8), [Name('LoggingResult', Load(), lineno=80, col_offset=14), Name('self', Load(), lineno=80, col_offset=29)], [], None, None, lineno=80, col_offset=8), 'addSkip', Load(), lineno=80, col_offset=8), [], [], Name('args', Load(), lineno=80, col_offset=44), None, lineno=80, col_offset=8), lineno=80, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('addExpectedFailure', arguments([Name('self', Param(), lineno=82, col_offset=27)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=83, col_offset=8), '_events', Load(), lineno=83, col_offset=8), 'append', Load(), lineno=83, col_offset=8), [Str('addExpectedFailure', lineno=83, col_offset=28)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=84, col_offset=8), [Name('LoggingResult', Load(), lineno=84, col_offset=14), Name('self', Load(), lineno=84, col_offset=29)], [], None, None, lineno=84, col_offset=8), 'addExpectedFailure', Load(), lineno=84, col_offset=8), [], [], Name('args', Load(), lineno=84, col_offset=55), None, lineno=84, col_offset=8), lineno=84, col_offset=8)], [], lineno=82, col_offset=4), FunctionDef('addUnexpectedSuccess', arguments([Name('self', Param(), lineno=86, col_offset=29)], 'args', None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=87, col_offset=8), '_events', Load(), lineno=87, col_offset=8), 'append', Load(), lineno=87, col_offset=8), [Str('addUnexpectedSuccess', lineno=87, col_offset=28)], [], None, None, lineno=87, col_offset=8), lineno=87, col_offset=8), Expr(Call(Attribute(Call(Name('super', Load(), lineno=88, col_offset=8), [Name('LoggingResult', Load(), lineno=88, col_offset=14), Name('self', Load(), lineno=88, col_offset=29)], [], None, None, lineno=88, col_offset=8), 'addUnexpectedSuccess', Load(), lineno=88, col_offset=8), [], [], Name('args', Load(), lineno=88, col_offset=57), None, lineno=88, col_offset=8), lineno=88, col_offset=8)], [], lineno=86, col_offset=4)], [], lineno=45, col_offset=0), ClassDef('ResultWithNoStartTestRunStopTestRun', [Name('object', Load(), lineno=91, col_offset=42)], [Expr(Str('An object honouring TestResult before startTestRun/stopTestRun.', lineno=92, col_offset=4), lineno=92, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=94, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=95, col_offset=8), 'failures', Store(), lineno=95, col_offset=8)], List([], Load(), lineno=95, col_offset=24), lineno=95, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=96, col_offset=8), 'errors', Store(), lineno=96, col_offset=8)], List([], Load(), lineno=96, col_offset=22), lineno=96, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=97, col_offset=8), 'testsRun', Store(), lineno=97, col_offset=8)], Num(0, lineno=97, col_offset=24), lineno=97, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=98, col_offset=8), 'skipped', Store(), lineno=98, col_offset=8)], List([], Load(), lineno=98, col_offset=23), lineno=98, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=99, col_offset=8), 'expectedFailures', Store(), lineno=99, col_offset=8)], List([], Load(), lineno=99, col_offset=32), lineno=99, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=100, col_offset=8), 'unexpectedSuccesses', Store(), lineno=100, col_offset=8)], List([], Load(), lineno=100, col_offset=35), lineno=100, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=101, col_offset=8), 'shouldStop', Store(), lineno=101, col_offset=8)], Name('False', Load(), lineno=101, col_offset=26), lineno=101, col_offset=8)], [], lineno=94, col_offset=4), FunctionDef('startTest', arguments([Name('self', Param(), lineno=103, col_offset=18), Name('test', Param(), lineno=103, col_offset=24)], None, None, []), [Pass( lineno=104, col_offset=8)], [], lineno=103, col_offset=4), FunctionDef('stopTest', arguments([Name('self', Param(), lineno=106, col_offset=17), Name('test', Param(), lineno=106, col_offset=23)], None, None, []), [Pass( lineno=107, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('addError', arguments([Name('self', Param(), lineno=109, col_offset=17), Name('test', Param(), lineno=109, col_offset=23)], None, None, []), [Pass( lineno=110, col_offset=8)], [], lineno=109, col_offset=4), FunctionDef('addFailure', arguments([Name('self', Param(), lineno=112, col_offset=19), Name('test', Param(), lineno=112, col_offset=25)], None, None, []), [Pass( lineno=113, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('addSuccess', arguments([Name('self', Param(), lineno=115, col_offset=19), Name('test', Param(), lineno=115, col_offset=25)], None, None, []), [Pass( lineno=116, col_offset=8)], [], lineno=115, col_offset=4), FunctionDef('wasSuccessful', arguments([Name('self', Param(), lineno=118, col_offset=22)], None, None, []), [Return(Name('True', Load(), lineno=119, col_offset=15), lineno=119, col_offset=8)], [], lineno=118, col_offset=4)], [], lineno=91, col_offset=0)])
