Module([Expr(Str('Test dlmodule.c\n   Roger E. Masse  revised strategy by Barry Warsaw\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('unittest', None)], lineno=5, col_offset=0), ImportFrom('test.test_support', [alias('verbose', None), alias('import_module', None)], 0, lineno=6, col_offset=0), Assign([Name('dl', Store(), lineno=7, col_offset=0)], Call(Name('import_module', Load(), lineno=7, col_offset=5), [Str('dl', lineno=7, col_offset=19)], [keyword('deprecated', Name('True', Load(), lineno=7, col_offset=36))], None, None, lineno=7, col_offset=5), lineno=7, col_offset=0), Assign([Name('sharedlibs', Store(), lineno=9, col_offset=0)], List([Tuple([Str('/usr/lib/libc.so', lineno=10, col_offset=5), Str('getpid', lineno=10, col_offset=25)], Load(), lineno=10, col_offset=5), Tuple([Str('/lib/libc.so.6', lineno=11, col_offset=5), Str('getpid', lineno=11, col_offset=23)], Load(), lineno=11, col_offset=5), Tuple([Str('/usr/bin/cygwin1.dll', lineno=12, col_offset=5), Str('getpid', lineno=12, col_offset=29)], Load(), lineno=12, col_offset=5), Tuple([Str('/usr/lib/libc.dylib', lineno=13, col_offset=5), Str('getpid', lineno=13, col_offset=28)], Load(), lineno=13, col_offset=5)], Load(), lineno=9, col_offset=13), lineno=9, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [For(Tuple([Name('s', Store(), lineno=17, col_offset=8), Name('func', Store(), lineno=17, col_offset=11)], Store(), lineno=17, col_offset=8), Name('sharedlibs', Load(), lineno=17, col_offset=19), [TryExcept([If(Name('verbose', Load(), lineno=19, col_offset=15), [Print(None, [Str('trying to open:', lineno=20, col_offset=22), Name('s', Load(), lineno=20, col_offset=41)], False, lineno=20, col_offset=16)], [], lineno=19, col_offset=12), Assign([Name('l', Store(), lineno=21, col_offset=12)], Call(Attribute(Name('dl', Load(), lineno=21, col_offset=16), 'open', Load(), lineno=21, col_offset=16), [Name('s', Load(), lineno=21, col_offset=24)], [], None, None, lineno=21, col_offset=16), lineno=21, col_offset=12)], [ExceptHandler(Attribute(Name('dl', Load(), lineno=22, col_offset=15), 'error', Load(), lineno=22, col_offset=15), Name('err', Store(), lineno=22, col_offset=25), [If(Name('verbose', Load(), lineno=23, col_offset=15), [Print(None, [Str('failed', lineno=24, col_offset=22), Call(Name('repr', Load(), lineno=24, col_offset=32), [Call(Name('str', Load(), lineno=24, col_offset=37), [Name('err', Load(), lineno=24, col_offset=41)], [], None, None, lineno=24, col_offset=37)], [], None, None, lineno=24, col_offset=32)], True, lineno=24, col_offset=16)], [], lineno=23, col_offset=12), Pass( lineno=25, col_offset=12)], lineno=22, col_offset=8)], [If(Name('verbose', Load(), lineno=27, col_offset=15), [Print(None, [Str('succeeded...', lineno=28, col_offset=22)], False, lineno=28, col_offset=16)], [], lineno=27, col_offset=12), Expr(Call(Attribute(Name('l', Load(), lineno=29, col_offset=12), 'call', Load(), lineno=29, col_offset=12), [Name('func', Load(), lineno=29, col_offset=19)], [], None, None, lineno=29, col_offset=12), lineno=29, col_offset=12), Expr(Call(Attribute(Name('l', Load(), lineno=30, col_offset=12), 'close', Load(), lineno=30, col_offset=12), [], [], None, None, lineno=30, col_offset=12), lineno=30, col_offset=12), If(Name('verbose', Load(), lineno=31, col_offset=15), [Print(None, [Str('worked!', lineno=32, col_offset=22)], True, lineno=32, col_offset=16)], [], lineno=31, col_offset=12), Break( lineno=33, col_offset=12)], lineno=18, col_offset=8)], [Raise(Attribute(Name('unittest', Load(), lineno=35, col_offset=14), 'SkipTest', Load(), lineno=35, col_offset=14), Str('Could not open any shared libraries', lineno=35, col_offset=33), None, lineno=35, col_offset=8)], lineno=17, col_offset=4)], [], lineno=16, col_offset=0), If(Compare(Name('__name__', Load(), lineno=38, col_offset=3), [Eq()], [Str('__main__', lineno=38, col_offset=15)], lineno=38, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=39, col_offset=4), [], [], None, None, lineno=39, col_offset=4), lineno=39, col_offset=4)], [], lineno=38, col_offset=0)])
