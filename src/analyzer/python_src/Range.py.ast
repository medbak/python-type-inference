Module([Expr(Str("Example of a generator: re-implement the built-in range function\nwithout actually constructing the list of values.\n\nOldStyleRange is coded in the way required to work in a 'for' loop before\niterators were introduced into the language; using __getitem__ and __len__ .\n\n", lineno=7, col_offset=-1), lineno=7, col_offset=-1), FunctionDef('handleargs', arguments([Name('arglist', Param(), lineno=8, col_offset=15)], None, None, []), [Expr(Str('Take list of arguments and extract/create proper start, stop, and step\n    values and return in a tuple', lineno=10, col_offset=-1), lineno=10, col_offset=-1), TryExcept([If(Compare(Call(Name('len', Load(), lineno=12, col_offset=11), [Name('arglist', Load(), lineno=12, col_offset=15)], [], None, None, lineno=12, col_offset=11), [Eq()], [Num(1, lineno=12, col_offset=27)], lineno=12, col_offset=11), [Return(Tuple([Num(0, lineno=13, col_offset=19), Call(Name('int', Load(), lineno=13, col_offset=22), [Subscript(Name('arglist', Load(), lineno=13, col_offset=26), Index(Num(0, lineno=13, col_offset=34)), Load(), lineno=13, col_offset=26)], [], None, None, lineno=13, col_offset=22), Num(1, lineno=13, col_offset=39)], Load(), lineno=13, col_offset=19), lineno=13, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=14, col_offset=13), [Name('arglist', Load(), lineno=14, col_offset=17)], [], None, None, lineno=14, col_offset=13), [Eq()], [Num(2, lineno=14, col_offset=29)], lineno=14, col_offset=13), [Return(Tuple([Call(Name('int', Load(), lineno=15, col_offset=19), [Subscript(Name('arglist', Load(), lineno=15, col_offset=23), Index(Num(0, lineno=15, col_offset=31)), Load(), lineno=15, col_offset=23)], [], None, None, lineno=15, col_offset=19), Call(Name('int', Load(), lineno=15, col_offset=36), [Subscript(Name('arglist', Load(), lineno=15, col_offset=40), Index(Num(1, lineno=15, col_offset=48)), Load(), lineno=15, col_offset=40)], [], None, None, lineno=15, col_offset=36), Num(1, lineno=15, col_offset=53)], Load(), lineno=15, col_offset=19), lineno=15, col_offset=12)], [If(Compare(Call(Name('len', Load(), lineno=16, col_offset=13), [Name('arglist', Load(), lineno=16, col_offset=17)], [], None, None, lineno=16, col_offset=13), [Eq()], [Num(3, lineno=16, col_offset=29)], lineno=16, col_offset=13), [If(Compare(Subscript(Name('arglist', Load(), lineno=17, col_offset=15), Index(Num(2, lineno=17, col_offset=23)), Load(), lineno=17, col_offset=15), [Eq()], [Num(0, lineno=17, col_offset=29)], lineno=17, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=18, col_offset=22), [Str('step argument must not be zero', lineno=18, col_offset=33)], [], None, None, lineno=18, col_offset=22), None, None, lineno=18, col_offset=16)], [], lineno=17, col_offset=12), Return(Call(Name('tuple', Load(), lineno=19, col_offset=19), [GeneratorExp(Call(Name('int', Load(), lineno=19, col_offset=25), [Name('x', Load(), lineno=19, col_offset=29)], [], None, None, lineno=19, col_offset=25), [comprehension(Name('x', Store(), lineno=19, col_offset=36), Name('arglist', Load(), lineno=19, col_offset=41), [])], lineno=19, col_offset=25)], [], None, None, lineno=19, col_offset=19), lineno=19, col_offset=12)], [Raise(Call(Name('TypeError', Load(), lineno=21, col_offset=18), [Str('range() accepts 1-3 arguments, given', lineno=21, col_offset=28), Call(Name('len', Load(), lineno=21, col_offset=68), [Name('arglist', Load(), lineno=21, col_offset=72)], [], None, None, lineno=21, col_offset=68)], [], None, None, lineno=21, col_offset=18), None, None, lineno=21, col_offset=12)], lineno=16, col_offset=13)], lineno=14, col_offset=13)], lineno=12, col_offset=8)], [ExceptHandler(Name('TypeError', Load(), lineno=22, col_offset=11), None, [Raise(Call(Name('TypeError', Load(), lineno=23, col_offset=14), [Str('range() arguments must be numbers or strings representing numbers', lineno=23, col_offset=24)], [], None, None, lineno=23, col_offset=14), None, None, lineno=23, col_offset=8)], lineno=22, col_offset=4)], [], lineno=11, col_offset=4)], [], lineno=8, col_offset=0), FunctionDef('genrange', arguments([], 'a', None, []), [Expr(Str("Function to implement 'range' as a generator", lineno=27, col_offset=4), lineno=27, col_offset=4), Assign([Tuple([Name('start', Store(), lineno=28, col_offset=4), Name('stop', Store(), lineno=28, col_offset=11), Name('step', Store(), lineno=28, col_offset=17)], Store(), lineno=28, col_offset=4)], Call(Name('handleargs', Load(), lineno=28, col_offset=24), [Name('a', Load(), lineno=28, col_offset=35)], [], None, None, lineno=28, col_offset=24), lineno=28, col_offset=4), Assign([Name('value', Store(), lineno=29, col_offset=4)], Name('start', Load(), lineno=29, col_offset=12), lineno=29, col_offset=4), While(Compare(Name('value', Load(), lineno=30, col_offset=10), [Lt()], [Name('stop', Load(), lineno=30, col_offset=18)], lineno=30, col_offset=10), [Expr(Yield(Name('value', Load(), lineno=31, col_offset=14), lineno=31, col_offset=8), lineno=31, col_offset=8), AugAssign(Name('value', Store(), lineno=32, col_offset=8), Add(), Name('step', Load(), lineno=32, col_offset=17), lineno=32, col_offset=8)], [], lineno=30, col_offset=4)], [], lineno=26, col_offset=0), ClassDef('oldrange', [], [Expr(Str("Class implementing a range object.\n    To the user the instances feel like immutable sequences\n    (and you can't concatenate or slice them)\n\n    Done using the old way (pre-iterators; __len__ and __getitem__) to have an\n    object be used by a 'for' loop.\n\n    ", lineno=42, col_offset=-1), lineno=42, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=44, col_offset=17)], 'a', None, []), [Expr(Str(' Initialize start, stop, and step values along with calculating the\n        nubmer of values (what __len__ will return) in the range', lineno=46, col_offset=-1), lineno=46, col_offset=-1), Assign([Tuple([Attribute(Name('self', Load(), lineno=47, col_offset=8), 'start', Store(), lineno=47, col_offset=8), Attribute(Name('self', Load(), lineno=47, col_offset=20), 'stop', Store(), lineno=47, col_offset=20), Attribute(Name('self', Load(), lineno=47, col_offset=31), 'step', Store(), lineno=47, col_offset=31)], Store(), lineno=47, col_offset=8)], Call(Name('handleargs', Load(), lineno=47, col_offset=43), [Name('a', Load(), lineno=47, col_offset=54)], [], None, None, lineno=47, col_offset=43), lineno=47, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=48, col_offset=8), 'len', Store(), lineno=48, col_offset=8)], Call(Name('max', Load(), lineno=48, col_offset=19), [Num(0, lineno=48, col_offset=23), BinOp(BinOp(Attribute(Name('self', Load(), lineno=48, col_offset=27), 'stop', Load(), lineno=48, col_offset=27), Sub(), Attribute(Name('self', Load(), lineno=48, col_offset=39), 'start', Load(), lineno=48, col_offset=39), lineno=48, col_offset=27), FloorDiv(), Attribute(Name('self', Load(), lineno=48, col_offset=54), 'step', Load(), lineno=48, col_offset=54), lineno=48, col_offset=26)], [], None, None, lineno=48, col_offset=19), lineno=48, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=50, col_offset=17)], None, None, []), [Expr(Str('implement repr(x) which is also used by print', lineno=51, col_offset=8), lineno=51, col_offset=8), Return(BinOp(Str('range(%r, %r, %r)', lineno=52, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=52, col_offset=38), 'start', Load(), lineno=52, col_offset=38), Attribute(Name('self', Load(), lineno=52, col_offset=50), 'stop', Load(), lineno=52, col_offset=50), Attribute(Name('self', Load(), lineno=52, col_offset=61), 'step', Load(), lineno=52, col_offset=61)], Load(), lineno=52, col_offset=38), lineno=52, col_offset=15), lineno=52, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=54, col_offset=16)], None, None, []), [Expr(Str('implement len(x)', lineno=55, col_offset=8), lineno=55, col_offset=8), Return(Attribute(Name('self', Load(), lineno=56, col_offset=15), 'len', Load(), lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=58, col_offset=20), Name('i', Param(), lineno=58, col_offset=26)], None, None, []), [Expr(Str('implement x[i]', lineno=59, col_offset=8), lineno=59, col_offset=8), If(Compare(Num(0, lineno=60, col_offset=11), [LtE(), LtE()], [Name('i', Load(), lineno=60, col_offset=16), Attribute(Name('self', Load(), lineno=60, col_offset=21), 'len', Load(), lineno=60, col_offset=21)], lineno=60, col_offset=11), [Return(BinOp(Attribute(Name('self', Load(), lineno=61, col_offset=19), 'start', Load(), lineno=61, col_offset=19), Add(), BinOp(Attribute(Name('self', Load(), lineno=61, col_offset=32), 'step', Load(), lineno=61, col_offset=32), Mult(), Name('i', Load(), lineno=61, col_offset=44), lineno=61, col_offset=32), lineno=61, col_offset=19), lineno=61, col_offset=12)], [Raise(Name('IndexError', Load(), lineno=63, col_offset=18), Str('range[i] index out of range', lineno=63, col_offset=30), None, lineno=63, col_offset=12)], lineno=60, col_offset=8)], [], lineno=58, col_offset=4)], [], lineno=34, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Import([alias('time', None), alias('__builtin__', None)], lineno=67, col_offset=4), Assign([Name('correct_result', Store(), lineno=69, col_offset=4)], Call(Attribute(Name('__builtin__', Load(), lineno=69, col_offset=21), 'range', Load(), lineno=69, col_offset=21), [Num(5, lineno=69, col_offset=39), Num(100, lineno=69, col_offset=42), Num(3, lineno=69, col_offset=47)], [], None, None, lineno=69, col_offset=21), lineno=69, col_offset=4), Assign([Name('oldrange_result', Store(), lineno=70, col_offset=4)], Call(Name('list', Load(), lineno=70, col_offset=22), [Call(Name('oldrange', Load(), lineno=70, col_offset=27), [Num(5, lineno=70, col_offset=36), Num(100, lineno=70, col_offset=39), Num(3, lineno=70, col_offset=44)], [], None, None, lineno=70, col_offset=27)], [], None, None, lineno=70, col_offset=22), lineno=70, col_offset=4), Assign([Name('genrange_result', Store(), lineno=71, col_offset=4)], Call(Name('list', Load(), lineno=71, col_offset=22), [Call(Name('genrange', Load(), lineno=71, col_offset=27), [Num(5, lineno=71, col_offset=36), Num(100, lineno=71, col_offset=39), Num(3, lineno=71, col_offset=44)], [], None, None, lineno=71, col_offset=27)], [], None, None, lineno=71, col_offset=22), lineno=71, col_offset=4), If(BoolOp(Or(), [Compare(Name('genrange_result', Load(), lineno=72, col_offset=7), [NotEq()], [Name('correct_result', Load(), lineno=72, col_offset=26)], lineno=72, col_offset=7), Compare(Name('oldrange_result', Load(), lineno=72, col_offset=44), [NotEq()], [Name('correct_result', Load(), lineno=72, col_offset=63)], lineno=72, col_offset=44)], lineno=72, col_offset=7), [Raise(Call(Name('Exception', Load(), lineno=73, col_offset=14), [BinOp(Str('error in implementation:\ncorrect   = %s\nold-style = %s\ngenerator = %s', lineno=73, col_offset=24), Mod(), Tuple([Name('correct_result', Load(), lineno=75, col_offset=26), Name('oldrange_result', Load(), lineno=75, col_offset=42), Name('genrange_result', Load(), lineno=75, col_offset=59)], Load(), lineno=75, col_offset=26), lineno=73, col_offset=24)], [], None, None, lineno=73, col_offset=14), None, None, lineno=73, col_offset=8)], [], lineno=72, col_offset=4), Print(None, [Str('Timings for range(1000):', lineno=76, col_offset=10)], True, lineno=76, col_offset=4), Assign([Name('t1', Store(), lineno=77, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=77, col_offset=9), 'time', Load(), lineno=77, col_offset=9), [], [], None, None, lineno=77, col_offset=9), lineno=77, col_offset=4), For(Name('i', Store(), lineno=78, col_offset=8), Call(Name('oldrange', Load(), lineno=78, col_offset=13), [Num(1000, lineno=78, col_offset=22)], [], None, None, lineno=78, col_offset=13), [Pass( lineno=79, col_offset=8)], [], lineno=78, col_offset=4), Assign([Name('t2', Store(), lineno=80, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=80, col_offset=9), 'time', Load(), lineno=80, col_offset=9), [], [], None, None, lineno=80, col_offset=9), lineno=80, col_offset=4), For(Name('i', Store(), lineno=81, col_offset=8), Call(Name('genrange', Load(), lineno=81, col_offset=13), [Num(1000, lineno=81, col_offset=22)], [], None, None, lineno=81, col_offset=13), [Pass( lineno=82, col_offset=8)], [], lineno=81, col_offset=4), Assign([Name('t3', Store(), lineno=83, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=83, col_offset=9), 'time', Load(), lineno=83, col_offset=9), [], [], None, None, lineno=83, col_offset=9), lineno=83, col_offset=4), For(Name('i', Store(), lineno=84, col_offset=8), Call(Attribute(Name('__builtin__', Load(), lineno=84, col_offset=13), 'range', Load(), lineno=84, col_offset=13), [Num(1000, lineno=84, col_offset=31)], [], None, None, lineno=84, col_offset=13), [Pass( lineno=85, col_offset=8)], [], lineno=84, col_offset=4), Assign([Name('t4', Store(), lineno=86, col_offset=4)], Call(Attribute(Name('time', Load(), lineno=86, col_offset=9), 'time', Load(), lineno=86, col_offset=9), [], [], None, None, lineno=86, col_offset=9), lineno=86, col_offset=4), Print(None, [BinOp(Name('t2', Load(), lineno=87, col_offset=10), Sub(), Name('t1', Load(), lineno=87, col_offset=13), lineno=87, col_offset=10), Str('sec (old-style class)', lineno=87, col_offset=17)], True, lineno=87, col_offset=4), Print(None, [BinOp(Name('t3', Load(), lineno=88, col_offset=10), Sub(), Name('t2', Load(), lineno=88, col_offset=13), lineno=88, col_offset=10), Str('sec (generator)', lineno=88, col_offset=17)], True, lineno=88, col_offset=4), Print(None, [BinOp(Name('t4', Load(), lineno=89, col_offset=10), Sub(), Name('t3', Load(), lineno=89, col_offset=13), lineno=89, col_offset=10), Str('sec (built-in)', lineno=89, col_offset=17)], True, lineno=89, col_offset=4)], [], lineno=66, col_offset=0), If(Compare(Name('__name__', Load(), lineno=92, col_offset=3), [Eq()], [Str('__main__', lineno=92, col_offset=15)], lineno=92, col_offset=3), [Expr(Call(Name('test', Load(), lineno=93, col_offset=4), [], [], None, None, lineno=93, col_offset=4), lineno=93, col_offset=4)], [], lineno=92, col_offset=0)])
