Module([ImportFrom('test', [alias('test_support', 'support')], 0, lineno=1, col_offset=0), Assign([Name('threading', Store(), lineno=5, col_offset=0)], Call(Attribute(Name('support', Load(), lineno=5, col_offset=12), 'import_module', Load(), lineno=5, col_offset=12), [Str('threading', lineno=5, col_offset=34)], [], None, None, lineno=5, col_offset=12), lineno=5, col_offset=0), ImportFrom('contextlib', [alias('contextmanager', None)], 0, lineno=7, col_offset=0), Import([alias('imaplib', None)], lineno=8, col_offset=0), Import([alias('os.path', None)], lineno=9, col_offset=0), Import([alias('SocketServer', None)], lineno=10, col_offset=0), Import([alias('time', None)], lineno=11, col_offset=0), ImportFrom('test_support', [alias('reap_threads', None), alias('verbose', None), alias('transient_internet', None)], 0, lineno=13, col_offset=0), Import([alias('unittest', None)], lineno=14, col_offset=0), TryExcept([Import([alias('ssl', None)], lineno=17, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=18, col_offset=7), None, [Assign([Name('ssl', Store(), lineno=19, col_offset=4)], Name('None', Load(), lineno=19, col_offset=10), lineno=19, col_offset=4)], lineno=18, col_offset=0)], [], lineno=16, col_offset=0), Assign([Name('CERTFILE', Store(), lineno=21, col_offset=0)], Name('None', Load(), lineno=21, col_offset=11), lineno=21, col_offset=0), ClassDef('TestImaplib', [Attribute(Name('unittest', Load(), lineno=24, col_offset=18), 'TestCase', Load(), lineno=24, col_offset=18)], [FunctionDef('test_that_Time2Internaldate_returns_a_result', arguments([Name('self', Param(), lineno=26, col_offset=53)], None, None, []), [Assign([Name('timevalues', Store(), lineno=30, col_offset=8)], List([Num(2000000000, lineno=30, col_offset=22), Num(2000000000.0, lineno=30, col_offset=34), Call(Attribute(Name('time', Load(), lineno=30, col_offset=48), 'localtime', Load(), lineno=30, col_offset=48), [Num(2000000000, lineno=30, col_offset=63)], [], None, None, lineno=30, col_offset=48), Str('"18-May-2033 05:33:20 +0200"', lineno=31, col_offset=22)], Load(), lineno=30, col_offset=21), lineno=30, col_offset=8), For(Name('t', Store(), lineno=33, col_offset=12), Name('timevalues', Load(), lineno=33, col_offset=17), [Expr(Call(Attribute(Name('imaplib', Load(), lineno=34, col_offset=12), 'Time2Internaldate', Load(), lineno=34, col_offset=12), [Name('t', Load(), lineno=34, col_offset=38)], [], None, None, lineno=34, col_offset=12), lineno=34, col_offset=12)], [], lineno=33, col_offset=8)], [], lineno=26, col_offset=4)], [], lineno=24, col_offset=0), If(Name('ssl', Load(), lineno=37, col_offset=3), [ClassDef('SecureTCPServer', [Attribute(Name('SocketServer', Load(), lineno=39, col_offset=26), 'TCPServer', Load(), lineno=39, col_offset=26)], [FunctionDef('get_request', arguments([Name('self', Param(), lineno=41, col_offset=24)], None, None, []), [Assign([Tuple([Name('newsocket', Store(), lineno=42, col_offset=12), Name('fromaddr', Store(), lineno=42, col_offset=23)], Store(), lineno=42, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=42, col_offset=34), 'socket', Load(), lineno=42, col_offset=34), 'accept', Load(), lineno=42, col_offset=34), [], [], None, None, lineno=42, col_offset=34), lineno=42, col_offset=12), Assign([Name('connstream', Store(), lineno=43, col_offset=12)], Call(Attribute(Name('ssl', Load(), lineno=43, col_offset=25), 'wrap_socket', Load(), lineno=43, col_offset=25), [Name('newsocket', Load(), lineno=43, col_offset=41)], [keyword('server_side', Name('True', Load(), lineno=44, col_offset=53)), keyword('certfile', Name('CERTFILE', Load(), lineno=45, col_offset=50))], None, None, lineno=43, col_offset=25), lineno=43, col_offset=12), Return(Tuple([Name('connstream', Load(), lineno=46, col_offset=19), Name('fromaddr', Load(), lineno=46, col_offset=31)], Load(), lineno=46, col_offset=19), lineno=46, col_offset=12)], [], lineno=41, col_offset=8)], [], lineno=39, col_offset=4), Assign([Name('IMAP4_SSL', Store(), lineno=48, col_offset=4)], Attribute(Name('imaplib', Load(), lineno=48, col_offset=16), 'IMAP4_SSL', Load(), lineno=48, col_offset=16), lineno=48, col_offset=4)], [ClassDef('SecureTCPServer', [], [Pass( lineno=53, col_offset=8)], [], lineno=52, col_offset=4), Assign([Name('IMAP4_SSL', Store(), lineno=55, col_offset=4)], Name('None', Load(), lineno=55, col_offset=16), lineno=55, col_offset=4)], lineno=37, col_offset=0), ClassDef('SimpleIMAPHandler', [Attribute(Name('SocketServer', Load(), lineno=58, col_offset=24), 'StreamRequestHandler', Load(), lineno=58, col_offset=24)], [Assign([Name('timeout', Store(), lineno=60, col_offset=4)], Num(1, lineno=60, col_offset=14), lineno=60, col_offset=4), FunctionDef('_send', arguments([Name('self', Param(), lineno=62, col_offset=14), Name('message', Param(), lineno=62, col_offset=20)], None, None, []), [If(Name('verbose', Load(), lineno=63, col_offset=11), [Print(None, [Str('SENT:', lineno=63, col_offset=26), Call(Attribute(Name('message', Load(), lineno=63, col_offset=35), 'strip', Load(), lineno=63, col_offset=35), [], [], None, None, lineno=63, col_offset=35)], True, lineno=63, col_offset=20)], [], lineno=63, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=64, col_offset=8), 'wfile', Load(), lineno=64, col_offset=8), 'write', Load(), lineno=64, col_offset=8), [Name('message', Load(), lineno=64, col_offset=25)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('handle', arguments([Name('self', Param(), lineno=66, col_offset=15)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), '_send', Load(), lineno=68, col_offset=8), [Str('* OK IMAP4rev1\r\n', lineno=68, col_offset=19)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), While(Num(1, lineno=69, col_offset=14), [Assign([Name('line', Store(), lineno=73, col_offset=12)], Str('', lineno=73, col_offset=19), lineno=73, col_offset=12), While(Num(1, lineno=74, col_offset=18), [TryExcept([Assign([Name('part', Store(), lineno=76, col_offset=20)], Call(Attribute(Attribute(Name('self', Load(), lineno=76, col_offset=27), 'rfile', Load(), lineno=76, col_offset=27), 'read', Load(), lineno=76, col_offset=27), [Num(1, lineno=76, col_offset=43)], [], None, None, lineno=76, col_offset=27), lineno=76, col_offset=20), If(Compare(Name('part', Load(), lineno=77, col_offset=23), [Eq()], [Str('', lineno=77, col_offset=31)], lineno=77, col_offset=23), [Return(None, lineno=79, col_offset=24)], [], lineno=77, col_offset=20), AugAssign(Name('line', Store(), lineno=80, col_offset=20), Add(), Name('part', Load(), lineno=80, col_offset=28), lineno=80, col_offset=20)], [ExceptHandler(Name('IOError', Load(), lineno=81, col_offset=23), None, [Return(None, lineno=83, col_offset=20)], lineno=81, col_offset=16)], [], lineno=75, col_offset=16), If(Call(Attribute(Name('line', Load(), lineno=84, col_offset=19), 'endswith', Load(), lineno=84, col_offset=19), [Str('\r\n', lineno=84, col_offset=33)], [], None, None, lineno=84, col_offset=19), [Break( lineno=85, col_offset=20)], [], lineno=84, col_offset=16)], [], lineno=74, col_offset=12), If(Name('verbose', Load(), lineno=87, col_offset=15), [Print(None, [Str('GOT:', lineno=87, col_offset=30), Call(Attribute(Name('line', Load(), lineno=87, col_offset=38), 'strip', Load(), lineno=87, col_offset=38), [], [], None, None, lineno=87, col_offset=38)], True, lineno=87, col_offset=24)], [], lineno=87, col_offset=12), Assign([Name('splitline', Store(), lineno=88, col_offset=12)], Call(Attribute(Name('line', Load(), lineno=88, col_offset=24), 'split', Load(), lineno=88, col_offset=24), [], [], None, None, lineno=88, col_offset=24), lineno=88, col_offset=12), Assign([Name('tag', Store(), lineno=89, col_offset=12)], Subscript(Name('splitline', Load(), lineno=89, col_offset=18), Index(Num(0, lineno=89, col_offset=28)), Load(), lineno=89, col_offset=18), lineno=89, col_offset=12), Assign([Name('cmd', Store(), lineno=90, col_offset=12)], Subscript(Name('splitline', Load(), lineno=90, col_offset=18), Index(Num(1, lineno=90, col_offset=28)), Load(), lineno=90, col_offset=18), lineno=90, col_offset=12), Assign([Name('args', Store(), lineno=91, col_offset=12)], Subscript(Name('splitline', Load(), lineno=91, col_offset=19), Slice(Num(2, lineno=91, col_offset=29), None, None), Load(), lineno=91, col_offset=19), lineno=91, col_offset=12), If(Call(Name('hasattr', Load(), lineno=93, col_offset=15), [Name('self', Load(), lineno=93, col_offset=23), BinOp(Str('cmd_%s', lineno=93, col_offset=29), Mod(), Tuple([Name('cmd', Load(), lineno=93, col_offset=41)], Load(), lineno=93, col_offset=41), lineno=93, col_offset=29)], [], None, None, lineno=93, col_offset=15), [Expr(Call(Call(Name('getattr', Load(), lineno=94, col_offset=16), [Name('self', Load(), lineno=94, col_offset=24), BinOp(Str('cmd_%s', lineno=94, col_offset=30), Mod(), Tuple([Name('cmd', Load(), lineno=94, col_offset=42)], Load(), lineno=94, col_offset=42), lineno=94, col_offset=30)], [], None, None, lineno=94, col_offset=16), [Name('tag', Load(), lineno=94, col_offset=49), Name('args', Load(), lineno=94, col_offset=54)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=96, col_offset=16), '_send', Load(), lineno=96, col_offset=16), [BinOp(Str('%s BAD %s unknown\r\n', lineno=96, col_offset=27), Mod(), Tuple([Name('tag', Load(), lineno=96, col_offset=54), Name('cmd', Load(), lineno=96, col_offset=59)], Load(), lineno=96, col_offset=54), lineno=96, col_offset=27)], [], None, None, lineno=96, col_offset=16), lineno=96, col_offset=16)], lineno=93, col_offset=12)], [], lineno=69, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('cmd_CAPABILITY', arguments([Name('self', Param(), lineno=98, col_offset=23), Name('tag', Param(), lineno=98, col_offset=29), Name('args', Param(), lineno=98, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=99, col_offset=8), '_send', Load(), lineno=99, col_offset=8), [Str('* CAPABILITY IMAP4rev1\r\n', lineno=99, col_offset=19)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=100, col_offset=8), '_send', Load(), lineno=100, col_offset=8), [BinOp(Str('%s OK CAPABILITY completed\r\n', lineno=100, col_offset=19), Mod(), Tuple([Name('tag', Load(), lineno=100, col_offset=55)], Load(), lineno=100, col_offset=55), lineno=100, col_offset=19)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8)], [], lineno=98, col_offset=4)], [], lineno=58, col_offset=0), ClassDef('BaseThreadedNetworkedTests', [Attribute(Name('unittest', Load(), lineno=103, col_offset=33), 'TestCase', Load(), lineno=103, col_offset=33)], [FunctionDef('make_server', arguments([Name('self', Param(), lineno=105, col_offset=20), Name('addr', Param(), lineno=105, col_offset=26), Name('hdlr', Param(), lineno=105, col_offset=32)], None, None, []), [ClassDef('MyServer', [Attribute(Name('self', Load(), lineno=107, col_offset=23), 'server_class', Load(), lineno=107, col_offset=23)], [FunctionDef('handle_error', arguments([Name('self', Param(), lineno=108, col_offset=29), Name('request', Param(), lineno=108, col_offset=35), Name('client_address', Param(), lineno=108, col_offset=44)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=109, col_offset=16), 'close_request', Load(), lineno=109, col_offset=16), [Name('request', Load(), lineno=109, col_offset=35)], [], None, None, lineno=109, col_offset=16), lineno=109, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=110, col_offset=16), 'server_close', Load(), lineno=110, col_offset=16), [], [], None, None, lineno=110, col_offset=16), lineno=110, col_offset=16), Raise(None, None, None, lineno=111, col_offset=16)], [], lineno=108, col_offset=12)], [], lineno=107, col_offset=8), If(Name('verbose', Load(), lineno=113, col_offset=11), [Print(None, [Str('creating server', lineno=113, col_offset=26)], True, lineno=113, col_offset=20)], [], lineno=113, col_offset=8), Assign([Name('server', Store(), lineno=114, col_offset=8)], Call(Name('MyServer', Load(), lineno=114, col_offset=17), [Name('addr', Load(), lineno=114, col_offset=26), Name('hdlr', Load(), lineno=114, col_offset=32)], [], None, None, lineno=114, col_offset=17), lineno=114, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=115, col_offset=8), 'assertEqual', Load(), lineno=115, col_offset=8), [Attribute(Name('server', Load(), lineno=115, col_offset=25), 'server_address', Load(), lineno=115, col_offset=25), Call(Attribute(Attribute(Name('server', Load(), lineno=115, col_offset=48), 'socket', Load(), lineno=115, col_offset=48), 'getsockname', Load(), lineno=115, col_offset=48), [], [], None, None, lineno=115, col_offset=48)], [], None, None, lineno=115, col_offset=8), lineno=115, col_offset=8), If(Name('verbose', Load(), lineno=117, col_offset=11), [Print(None, [Str('server created', lineno=118, col_offset=18)], True, lineno=118, col_offset=12), Print(None, [Str('ADDR =', lineno=119, col_offset=18), Name('addr', Load(), lineno=119, col_offset=28)], True, lineno=119, col_offset=12), Print(None, [Str('CLASS =', lineno=120, col_offset=18), Attribute(Name('self', Load(), lineno=120, col_offset=29), 'server_class', Load(), lineno=120, col_offset=29)], True, lineno=120, col_offset=12), Print(None, [Str('HDLR =', lineno=121, col_offset=18), Attribute(Name('server', Load(), lineno=121, col_offset=28), 'RequestHandlerClass', Load(), lineno=121, col_offset=28)], True, lineno=121, col_offset=12)], [], lineno=117, col_offset=8), Assign([Name('t', Store(), lineno=123, col_offset=8)], Call(Attribute(Name('threading', Load(), lineno=123, col_offset=12), 'Thread', Load(), lineno=123, col_offset=12), [], [keyword('name', BinOp(Str('%s serving', lineno=124, col_offset=17), Mod(), Attribute(Name('self', Load(), lineno=124, col_offset=32), 'server_class', Load(), lineno=124, col_offset=32), lineno=124, col_offset=17)), keyword('target', Attribute(Name('server', Load(), lineno=125, col_offset=19), 'serve_forever', Load(), lineno=125, col_offset=19)), keyword('kwargs', Dict([Str('poll_interval', lineno=129, col_offset=20)], [Num(0.01, lineno=129, col_offset=36)], lineno=129, col_offset=19))], None, None, lineno=123, col_offset=12), lineno=123, col_offset=8), Assign([Attribute(Name('t', Load(), lineno=130, col_offset=8), 'daemon', Store(), lineno=130, col_offset=8)], Name('True', Load(), lineno=130, col_offset=19), lineno=130, col_offset=8), Expr(Call(Attribute(Name('t', Load(), lineno=131, col_offset=8), 'start', Load(), lineno=131, col_offset=8), [], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8), If(Name('verbose', Load(), lineno=132, col_offset=11), [Print(None, [Str('server running', lineno=132, col_offset=26)], True, lineno=132, col_offset=20)], [], lineno=132, col_offset=8), Return(Tuple([Name('server', Load(), lineno=133, col_offset=15), Name('t', Load(), lineno=133, col_offset=23)], Load(), lineno=133, col_offset=15), lineno=133, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('reap_server', arguments([Name('self', Param(), lineno=135, col_offset=20), Name('server', Param(), lineno=135, col_offset=26), Name('thread', Param(), lineno=135, col_offset=34)], None, None, []), [If(Name('verbose', Load(), lineno=136, col_offset=11), [Print(None, [Str('waiting for server', lineno=136, col_offset=26)], True, lineno=136, col_offset=20)], [], lineno=136, col_offset=8), Expr(Call(Attribute(Name('server', Load(), lineno=137, col_offset=8), 'shutdown', Load(), lineno=137, col_offset=8), [], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=138, col_offset=8), 'join', Load(), lineno=138, col_offset=8), [], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), If(Name('verbose', Load(), lineno=139, col_offset=11), [Print(None, [Str('done', lineno=139, col_offset=26)], True, lineno=139, col_offset=20)], [], lineno=139, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('reaped_server', arguments([Name('self', Param(), lineno=142, col_offset=22), Name('hdlr', Param(), lineno=142, col_offset=28)], None, None, []), [Assign([Tuple([Name('server', Store(), lineno=143, col_offset=8), Name('thread', Store(), lineno=143, col_offset=16)], Store(), lineno=143, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=143, col_offset=25), 'make_server', Load(), lineno=143, col_offset=25), [Tuple([Attribute(Name('support', Load(), lineno=143, col_offset=43), 'HOST', Load(), lineno=143, col_offset=43), Num(0, lineno=143, col_offset=57)], Load(), lineno=143, col_offset=43), Name('hdlr', Load(), lineno=143, col_offset=61)], [], None, None, lineno=143, col_offset=25), lineno=143, col_offset=8), TryFinally([Expr(Yield(Name('server', Load(), lineno=145, col_offset=18), lineno=145, col_offset=12), lineno=145, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=147, col_offset=12), 'reap_server', Load(), lineno=147, col_offset=12), [Name('server', Load(), lineno=147, col_offset=29), Name('thread', Load(), lineno=147, col_offset=37)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=12)], lineno=144, col_offset=8)], [Name('contextmanager', Load(), lineno=141, col_offset=5)], lineno=141, col_offset=4), FunctionDef('test_connect', arguments([Name('self', Param(), lineno=150, col_offset=21)], None, None, []), [With(Call(Attribute(Name('self', Load(), lineno=151, col_offset=13), 'reaped_server', Load(), lineno=151, col_offset=13), [Name('SimpleIMAPHandler', Load(), lineno=151, col_offset=32)], [], None, None, lineno=151, col_offset=13), Name('server', Store(), lineno=151, col_offset=54), [Assign([Name('client', Store(), lineno=152, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=152, col_offset=21), 'imap_class', Load(), lineno=152, col_offset=21), [], [], Attribute(Name('server', Load(), lineno=152, col_offset=38), 'server_address', Load(), lineno=152, col_offset=38), None, lineno=152, col_offset=21), lineno=152, col_offset=12), Expr(Call(Attribute(Name('client', Load(), lineno=153, col_offset=12), 'shutdown', Load(), lineno=153, col_offset=12), [], [], None, None, lineno=153, col_offset=12), lineno=153, col_offset=12)], lineno=151, col_offset=13)], [Name('reap_threads', Load(), lineno=149, col_offset=5)], lineno=149, col_offset=4), FunctionDef('test_issue5949', arguments([Name('self', Param(), lineno=156, col_offset=23)], None, None, []), [ClassDef('EOFHandler', [Attribute(Name('SocketServer', Load(), lineno=158, col_offset=25), 'StreamRequestHandler', Load(), lineno=158, col_offset=25)], [FunctionDef('handle', arguments([Name('self', Param(), lineno=159, col_offset=23)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=161, col_offset=16), 'wfile', Load(), lineno=161, col_offset=16), 'write', Load(), lineno=161, col_offset=16), [Str('* OK', lineno=161, col_offset=33)], [], None, None, lineno=161, col_offset=16), lineno=161, col_offset=16)], [], lineno=159, col_offset=12)], [], lineno=158, col_offset=8), With(Call(Attribute(Name('self', Load(), lineno=163, col_offset=13), 'reaped_server', Load(), lineno=163, col_offset=13), [Name('EOFHandler', Load(), lineno=163, col_offset=32)], [], None, None, lineno=163, col_offset=13), Name('server', Store(), lineno=163, col_offset=47), [Expr(Call(Attribute(Name('self', Load(), lineno=164, col_offset=12), 'assertRaises', Load(), lineno=164, col_offset=12), [Attribute(Attribute(Name('imaplib', Load(), lineno=164, col_offset=30), 'IMAP4', Load(), lineno=164, col_offset=30), 'abort', Load(), lineno=164, col_offset=30), Attribute(Name('self', Load(), lineno=165, col_offset=30), 'imap_class', Load(), lineno=165, col_offset=30)], [], Attribute(Name('server', Load(), lineno=165, col_offset=48), 'server_address', Load(), lineno=165, col_offset=48), None, lineno=164, col_offset=12), lineno=164, col_offset=12)], lineno=163, col_offset=13)], [Name('reap_threads', Load(), lineno=155, col_offset=5)], lineno=155, col_offset=4)], [], lineno=103, col_offset=0), ClassDef('ThreadedNetworkedTests', [Name('BaseThreadedNetworkedTests', Load(), lineno=168, col_offset=29)], [Assign([Name('server_class', Store(), lineno=170, col_offset=4)], Attribute(Name('SocketServer', Load(), lineno=170, col_offset=19), 'TCPServer', Load(), lineno=170, col_offset=19), lineno=170, col_offset=4), Assign([Name('imap_class', Store(), lineno=171, col_offset=4)], Attribute(Name('imaplib', Load(), lineno=171, col_offset=17), 'IMAP4', Load(), lineno=171, col_offset=17), lineno=171, col_offset=4)], [], lineno=168, col_offset=0), ClassDef('ThreadedNetworkedTestsSSL', [Name('BaseThreadedNetworkedTests', Load(), lineno=175, col_offset=32)], [Assign([Name('server_class', Store(), lineno=177, col_offset=4)], Name('SecureTCPServer', Load(), lineno=177, col_offset=19), lineno=177, col_offset=4), Assign([Name('imap_class', Store(), lineno=178, col_offset=4)], Name('IMAP4_SSL', Load(), lineno=178, col_offset=17), lineno=178, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=174, col_offset=1), 'skipUnless', Load(), lineno=174, col_offset=1), [Name('ssl', Load(), lineno=174, col_offset=21), Str('SSL not available', lineno=174, col_offset=26)], [], None, None, lineno=174, col_offset=1)], lineno=174, col_offset=0), ClassDef('RemoteIMAPTest', [Attribute(Name('unittest', Load(), lineno=181, col_offset=21), 'TestCase', Load(), lineno=181, col_offset=21)], [Assign([Name('host', Store(), lineno=182, col_offset=4)], Str('cyrus.andrew.cmu.edu', lineno=182, col_offset=11), lineno=182, col_offset=4), Assign([Name('port', Store(), lineno=183, col_offset=4)], Num(143, lineno=183, col_offset=11), lineno=183, col_offset=4), Assign([Name('username', Store(), lineno=184, col_offset=4)], Str('anonymous', lineno=184, col_offset=15), lineno=184, col_offset=4), Assign([Name('password', Store(), lineno=185, col_offset=4)], Str('pass', lineno=185, col_offset=15), lineno=185, col_offset=4), Assign([Name('imap_class', Store(), lineno=186, col_offset=4)], Attribute(Name('imaplib', Load(), lineno=186, col_offset=17), 'IMAP4', Load(), lineno=186, col_offset=17), lineno=186, col_offset=4), FunctionDef('setUp', arguments([Name('self', Param(), lineno=188, col_offset=14)], None, None, []), [With(Call(Name('transient_internet', Load(), lineno=189, col_offset=13), [Attribute(Name('self', Load(), lineno=189, col_offset=32), 'host', Load(), lineno=189, col_offset=32)], [], None, None, lineno=189, col_offset=13), None, [Assign([Attribute(Name('self', Load(), lineno=190, col_offset=12), 'server', Store(), lineno=190, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=190, col_offset=26), 'imap_class', Load(), lineno=190, col_offset=26), [Attribute(Name('self', Load(), lineno=190, col_offset=42), 'host', Load(), lineno=190, col_offset=42), Attribute(Name('self', Load(), lineno=190, col_offset=53), 'port', Load(), lineno=190, col_offset=53)], [], None, None, lineno=190, col_offset=26), lineno=190, col_offset=12)], lineno=189, col_offset=13)], [], lineno=188, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=192, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=193, col_offset=11), 'server', Load(), lineno=193, col_offset=11), [IsNot()], [Name('None', Load(), lineno=193, col_offset=30)], lineno=193, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=194, col_offset=12), 'server', Load(), lineno=194, col_offset=12), 'logout', Load(), lineno=194, col_offset=12), [], [], None, None, lineno=194, col_offset=12), lineno=194, col_offset=12)], [], lineno=193, col_offset=8)], [], lineno=192, col_offset=4), FunctionDef('test_logincapa', arguments([Name('self', Param(), lineno=196, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'assertTrue', Load(), lineno=197, col_offset=8), [Compare(Str('LOGINDISABLED', lineno=197, col_offset=24), [In()], [Attribute(Attribute(Name('self', Load(), lineno=197, col_offset=43), 'server', Load(), lineno=197, col_offset=43), 'capabilities', Load(), lineno=197, col_offset=43)], lineno=197, col_offset=24)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8)], [], lineno=196, col_offset=4), FunctionDef('test_anonlogin', arguments([Name('self', Param(), lineno=199, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=200, col_offset=8), 'assertTrue', Load(), lineno=200, col_offset=8), [Compare(Str('AUTH=ANONYMOUS', lineno=200, col_offset=24), [In()], [Attribute(Attribute(Name('self', Load(), lineno=200, col_offset=44), 'server', Load(), lineno=200, col_offset=44), 'capabilities', Load(), lineno=200, col_offset=44)], lineno=200, col_offset=24)], [], None, None, lineno=200, col_offset=8), lineno=200, col_offset=8), Assign([Name('rs', Store(), lineno=201, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=201, col_offset=13), 'server', Load(), lineno=201, col_offset=13), 'login', Load(), lineno=201, col_offset=13), [Attribute(Name('self', Load(), lineno=201, col_offset=31), 'username', Load(), lineno=201, col_offset=31), Attribute(Name('self', Load(), lineno=201, col_offset=46), 'password', Load(), lineno=201, col_offset=46)], [], None, None, lineno=201, col_offset=13), lineno=201, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=202, col_offset=8), 'assertEqual', Load(), lineno=202, col_offset=8), [Subscript(Name('rs', Load(), lineno=202, col_offset=25), Index(Num(0, lineno=202, col_offset=28)), Load(), lineno=202, col_offset=25), Str('OK', lineno=202, col_offset=32)], [], None, None, lineno=202, col_offset=8), lineno=202, col_offset=8)], [], lineno=199, col_offset=4), FunctionDef('test_logout', arguments([Name('self', Param(), lineno=204, col_offset=20)], None, None, []), [Assign([Name('rs', Store(), lineno=205, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=205, col_offset=13), 'server', Load(), lineno=205, col_offset=13), 'logout', Load(), lineno=205, col_offset=13), [], [], None, None, lineno=205, col_offset=13), lineno=205, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=206, col_offset=8), 'server', Store(), lineno=206, col_offset=8)], Name('None', Load(), lineno=206, col_offset=22), lineno=206, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=207, col_offset=8), 'assertEqual', Load(), lineno=207, col_offset=8), [Subscript(Name('rs', Load(), lineno=207, col_offset=25), Index(Num(0, lineno=207, col_offset=28)), Load(), lineno=207, col_offset=25), Str('BYE', lineno=207, col_offset=32)], [], None, None, lineno=207, col_offset=8), lineno=207, col_offset=8)], [], lineno=204, col_offset=4)], [], lineno=181, col_offset=0), ClassDef('RemoteIMAP_SSLTest', [Name('RemoteIMAPTest', Load(), lineno=211, col_offset=25)], [Assign([Name('port', Store(), lineno=212, col_offset=4)], Num(993, lineno=212, col_offset=11), lineno=212, col_offset=4), Assign([Name('imap_class', Store(), lineno=213, col_offset=4)], Name('IMAP4_SSL', Load(), lineno=213, col_offset=17), lineno=213, col_offset=4), FunctionDef('test_logincapa', arguments([Name('self', Param(), lineno=215, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=216, col_offset=8), 'assertFalse', Load(), lineno=216, col_offset=8), [Compare(Str('LOGINDISABLED', lineno=216, col_offset=25), [In()], [Attribute(Attribute(Name('self', Load(), lineno=216, col_offset=44), 'server', Load(), lineno=216, col_offset=44), 'capabilities', Load(), lineno=216, col_offset=44)], lineno=216, col_offset=25)], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=217, col_offset=8), 'assertTrue', Load(), lineno=217, col_offset=8), [Compare(Str('AUTH=PLAIN', lineno=217, col_offset=24), [In()], [Attribute(Attribute(Name('self', Load(), lineno=217, col_offset=40), 'server', Load(), lineno=217, col_offset=40), 'capabilities', Load(), lineno=217, col_offset=40)], lineno=217, col_offset=24)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8)], [], lineno=215, col_offset=4)], [Call(Attribute(Name('unittest', Load(), lineno=210, col_offset=1), 'skipUnless', Load(), lineno=210, col_offset=1), [Name('ssl', Load(), lineno=210, col_offset=21), Str('SSL not available', lineno=210, col_offset=26)], [], None, None, lineno=210, col_offset=1)], lineno=210, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Name('tests', Store(), lineno=221, col_offset=4)], List([Name('TestImaplib', Load(), lineno=221, col_offset=13)], Load(), lineno=221, col_offset=12), lineno=221, col_offset=4), If(Call(Attribute(Name('support', Load(), lineno=223, col_offset=7), 'is_resource_enabled', Load(), lineno=223, col_offset=7), [Str('network', lineno=223, col_offset=35)], [], None, None, lineno=223, col_offset=7), [If(Name('ssl', Load(), lineno=224, col_offset=11), [Global(['CERTFILE'], lineno=225, col_offset=12), Assign([Name('CERTFILE', Store(), lineno=226, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=226, col_offset=23), 'path', Load(), lineno=226, col_offset=23), 'join', Load(), lineno=226, col_offset=23), [BoolOp(Or(), [Call(Attribute(Attribute(Name('os', Load(), lineno=226, col_offset=36), 'path', Load(), lineno=226, col_offset=36), 'dirname', Load(), lineno=226, col_offset=36), [Name('__file__', Load(), lineno=226, col_offset=52)], [], None, None, lineno=226, col_offset=36), Attribute(Name('os', Load(), lineno=226, col_offset=65), 'curdir', Load(), lineno=226, col_offset=65)], lineno=226, col_offset=36), Str('keycert.pem', lineno=227, col_offset=36)], [], None, None, lineno=226, col_offset=23), lineno=226, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('os', Load(), lineno=228, col_offset=19), 'path', Load(), lineno=228, col_offset=19), 'exists', Load(), lineno=228, col_offset=19), [Name('CERTFILE', Load(), lineno=228, col_offset=34)], [], None, None, lineno=228, col_offset=19), lineno=228, col_offset=15), [Raise(Call(Attribute(Name('support', Load(), lineno=229, col_offset=22), 'TestFailed', Load(), lineno=229, col_offset=22), [Str("Can't read certificate files!", lineno=229, col_offset=41)], [], None, None, lineno=229, col_offset=22), None, None, lineno=229, col_offset=16)], [], lineno=228, col_offset=12)], [], lineno=224, col_offset=8), Expr(Call(Attribute(Name('tests', Load(), lineno=230, col_offset=8), 'extend', Load(), lineno=230, col_offset=8), [List([Name('ThreadedNetworkedTests', Load(), lineno=231, col_offset=12), Name('ThreadedNetworkedTestsSSL', Load(), lineno=231, col_offset=36), Name('RemoteIMAPTest', Load(), lineno=232, col_offset=12), Name('RemoteIMAP_SSLTest', Load(), lineno=232, col_offset=28)], Load(), lineno=230, col_offset=21)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8)], [], lineno=223, col_offset=4), Expr(Call(Attribute(Name('support', Load(), lineno=235, col_offset=4), 'run_unittest', Load(), lineno=235, col_offset=4), [], [], Name('tests', Load(), lineno=235, col_offset=26), None, lineno=235, col_offset=4), lineno=235, col_offset=4)], [], lineno=220, col_offset=0), If(Compare(Name('__name__', Load(), lineno=238, col_offset=3), [Eq()], [Str('__main__', lineno=238, col_offset=15)], lineno=238, col_offset=3), [Assign([Attribute(Name('support', Load(), lineno=239, col_offset=4), 'use_resources', Store(), lineno=239, col_offset=4)], List([Str('network', lineno=239, col_offset=29)], Load(), lineno=239, col_offset=28), lineno=239, col_offset=4), Expr(Call(Name('test_main', Load(), lineno=240, col_offset=4), [], [], None, None, lineno=240, col_offset=4), lineno=240, col_offset=4)], [], lineno=238, col_offset=0)])
