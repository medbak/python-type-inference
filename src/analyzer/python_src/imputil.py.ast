Module([Expr(Str('\nImport utilities\n\nExported classes:\n    ImportManager   Manage the import process\n\n    Importer        Base class for replacing standard import functions\n    BuiltinImporter Emulate the import mechanism for builtin and frozen modules\n\n    DynLoadSuffixImporter\n', lineno=11, col_offset=-1), lineno=11, col_offset=-1), ImportFrom('warnings', [alias('warnpy3k', None)], 0, lineno=12, col_offset=0), Expr(Call(Name('warnpy3k', Load(), lineno=13, col_offset=0), [Str('the imputil module has been removed in Python 3.0', lineno=13, col_offset=9)], [keyword('stacklevel', Num(2, lineno=13, col_offset=73))], None, None, lineno=13, col_offset=0), lineno=13, col_offset=0), Delete([Name('warnpy3k', Del(), lineno=14, col_offset=4)], lineno=14, col_offset=0), Import([alias('imp', None)], lineno=17, col_offset=0), Import([alias('sys', None)], lineno=18, col_offset=0), Import([alias('__builtin__', None)], lineno=19, col_offset=0), Import([alias('struct', None)], lineno=22, col_offset=0), Import([alias('marshal', None)], lineno=23, col_offset=0), Assign([Name('__all__', Store(), lineno=25, col_offset=0)], List([Str('ImportManager', lineno=25, col_offset=11), Str('Importer', lineno=25, col_offset=27), Str('BuiltinImporter', lineno=25, col_offset=38)], Load(), lineno=25, col_offset=10), lineno=25, col_offset=0), Assign([Name('_StringType', Store(), lineno=27, col_offset=0)], Call(Name('type', Load(), lineno=27, col_offset=14), [Str('', lineno=27, col_offset=19)], [], None, None, lineno=27, col_offset=14), lineno=27, col_offset=0), Assign([Name('_ModuleType', Store(), lineno=28, col_offset=0)], Call(Name('type', Load(), lineno=28, col_offset=14), [Name('sys', Load(), lineno=28, col_offset=19)], [], None, None, lineno=28, col_offset=14), lineno=28, col_offset=0), ClassDef('ImportManager', [], [Expr(Str('Manage the import process.', lineno=31, col_offset=4), lineno=31, col_offset=4), FunctionDef('install', arguments([Name('self', Param(), lineno=33, col_offset=16), Name('namespace', Param(), lineno=33, col_offset=22)], None, None, [Call(Name('vars', Load(), lineno=33, col_offset=32), [Name('__builtin__', Load(), lineno=33, col_offset=37)], [], None, None, lineno=33, col_offset=32)]), [Expr(Str('Install this ImportManager into the specified namespace.', lineno=34, col_offset=8), lineno=34, col_offset=8), If(Call(Name('isinstance', Load(), lineno=36, col_offset=11), [Name('namespace', Load(), lineno=36, col_offset=22), Name('_ModuleType', Load(), lineno=36, col_offset=33)], [], None, None, lineno=36, col_offset=11), [Assign([Name('namespace', Store(), lineno=37, col_offset=12)], Call(Name('vars', Load(), lineno=37, col_offset=24), [Name('namespace', Load(), lineno=37, col_offset=29)], [], None, None, lineno=37, col_offset=24), lineno=37, col_offset=12)], [], lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=42, col_offset=8), 'previous_importer', Store(), lineno=42, col_offset=8)], Subscript(Name('namespace', Load(), lineno=42, col_offset=33), Index(Str('__import__', lineno=42, col_offset=43)), Load(), lineno=42, col_offset=33), lineno=42, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=43, col_offset=8), 'namespace', Store(), lineno=43, col_offset=8)], Name('namespace', Load(), lineno=43, col_offset=25), lineno=43, col_offset=8), Assign([Subscript(Name('namespace', Load(), lineno=44, col_offset=8), Index(Str('__import__', lineno=44, col_offset=18)), Store(), lineno=44, col_offset=8)], Attribute(Name('self', Load(), lineno=44, col_offset=34), '_import_hook', Load(), lineno=44, col_offset=34), lineno=44, col_offset=8)], [], lineno=33, col_offset=4), FunctionDef('uninstall', arguments([Name('self', Param(), lineno=49, col_offset=18)], None, None, []), [Expr(Str('Restore the previous import mechanism.', lineno=50, col_offset=8), lineno=50, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=51, col_offset=8), 'namespace', Load(), lineno=51, col_offset=8), Index(Str('__import__', lineno=51, col_offset=23)), Store(), lineno=51, col_offset=8)], Attribute(Name('self', Load(), lineno=51, col_offset=39), 'previous_importer', Load(), lineno=51, col_offset=39), lineno=51, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('add_suffix', arguments([Name('self', Param(), lineno=53, col_offset=19), Name('suffix', Param(), lineno=53, col_offset=25), Name('importFunc', Param(), lineno=53, col_offset=33)], None, None, []), [Assert(Call(Name('hasattr', Load(), lineno=54, col_offset=15), [Name('importFunc', Load(), lineno=54, col_offset=23), Str('__call__', lineno=54, col_offset=35)], [], None, None, lineno=54, col_offset=15), None, lineno=54, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=55, col_offset=8), 'fs_imp', Load(), lineno=55, col_offset=8), 'add_suffix', Load(), lineno=55, col_offset=8), [Name('suffix', Load(), lineno=55, col_offset=31), Name('importFunc', Load(), lineno=55, col_offset=39)], [], None, None, lineno=55, col_offset=8), lineno=55, col_offset=8)], [], lineno=53, col_offset=4), Assign([Name('clsFilesystemImporter', Store(), lineno=62, col_offset=4)], Name('None', Load(), lineno=62, col_offset=28), lineno=62, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=64, col_offset=17), Name('fs_imp', Param(), lineno=64, col_offset=23)], None, None, [Name('None', Load(), lineno=64, col_offset=30)]), [If(UnaryOp(Not(), Name('_os_stat', Load(), lineno=67, col_offset=15), lineno=67, col_offset=11), [Expr(Call(Name('_os_bootstrap', Load(), lineno=68, col_offset=12), [], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12)], [], lineno=67, col_offset=8), If(Compare(Name('fs_imp', Load(), lineno=72, col_offset=11), [Is()], [Name('None', Load(), lineno=72, col_offset=21)], lineno=72, col_offset=11), [Assign([Name('cls', Store(), lineno=73, col_offset=12)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=73, col_offset=18), 'clsFilesystemImporter', Load(), lineno=73, col_offset=18), Name('_FilesystemImporter', Load(), lineno=73, col_offset=48)], lineno=73, col_offset=18), lineno=73, col_offset=12), Assign([Name('fs_imp', Store(), lineno=74, col_offset=12)], Call(Name('cls', Load(), lineno=74, col_offset=21), [], [], None, None, lineno=74, col_offset=21), lineno=74, col_offset=12)], [], lineno=72, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=75, col_offset=8), 'fs_imp', Store(), lineno=75, col_offset=8)], Name('fs_imp', Load(), lineno=75, col_offset=22), lineno=75, col_offset=8), For(Name('desc', Store(), lineno=80, col_offset=12), Call(Attribute(Name('imp', Load(), lineno=80, col_offset=20), 'get_suffixes', Load(), lineno=80, col_offset=20), [], [], None, None, lineno=80, col_offset=20), [If(Compare(Subscript(Name('desc', Load(), lineno=81, col_offset=15), Index(Num(2, lineno=81, col_offset=20)), Load(), lineno=81, col_offset=15), [Eq()], [Attribute(Name('imp', Load(), lineno=81, col_offset=26), 'C_EXTENSION', Load(), lineno=81, col_offset=26)], lineno=81, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=82, col_offset=16), 'add_suffix', Load(), lineno=82, col_offset=16), [Subscript(Name('desc', Load(), lineno=82, col_offset=32), Index(Num(0, lineno=82, col_offset=37)), Load(), lineno=82, col_offset=32), Attribute(Call(Name('DynLoadSuffixImporter', Load(), lineno=83, col_offset=32), [Name('desc', Load(), lineno=83, col_offset=54)], [], None, None, lineno=83, col_offset=32), 'import_file', Load(), lineno=83, col_offset=32)], [], None, None, lineno=82, col_offset=16), lineno=82, col_offset=16)], [], lineno=81, col_offset=12)], [], lineno=80, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=8), 'add_suffix', Load(), lineno=84, col_offset=8), [Str('.py', lineno=84, col_offset=24), Name('py_suffix_importer', Load(), lineno=84, col_offset=31)], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8)], [], lineno=64, col_offset=4), FunctionDef('_import_hook', arguments([Name('self', Param(), lineno=86, col_offset=21), Name('fqname', Param(), lineno=86, col_offset=27), Name('globals', Param(), lineno=86, col_offset=35), Name('locals', Param(), lineno=86, col_offset=49), Name('fromlist', Param(), lineno=86, col_offset=62)], None, None, [Name('None', Load(), lineno=86, col_offset=43), Name('None', Load(), lineno=86, col_offset=56), Name('None', Load(), lineno=86, col_offset=71)]), [Expr(Str('Python calls this hook to locate and import a module.', lineno=87, col_offset=8), lineno=87, col_offset=8), Assign([Name('parts', Store(), lineno=89, col_offset=8)], Call(Attribute(Name('fqname', Load(), lineno=89, col_offset=16), 'split', Load(), lineno=89, col_offset=16), [Str('.', lineno=89, col_offset=29)], [], None, None, lineno=89, col_offset=16), lineno=89, col_offset=8), Assign([Name('parent', Store(), lineno=92, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=92, col_offset=17), '_determine_import_context', Load(), lineno=92, col_offset=17), [Name('globals', Load(), lineno=92, col_offset=48)], [], None, None, lineno=92, col_offset=17), lineno=92, col_offset=8), If(Name('parent', Load(), lineno=95, col_offset=11), [Assign([Name('module', Store(), lineno=96, col_offset=12)], Call(Attribute(Attribute(Name('parent', Load(), lineno=96, col_offset=21), '__importer__', Load(), lineno=96, col_offset=21), '_do_import', Load(), lineno=96, col_offset=21), [Name('parent', Load(), lineno=96, col_offset=52), Name('parts', Load(), lineno=96, col_offset=60), Name('fromlist', Load(), lineno=96, col_offset=67)], [], None, None, lineno=96, col_offset=21), lineno=96, col_offset=12), If(Name('module', Load(), lineno=97, col_offset=15), [Return(Name('module', Load(), lineno=98, col_offset=23), lineno=98, col_offset=16)], [], lineno=97, col_offset=12)], [], lineno=95, col_offset=8), TryExcept([Assign([Name('top_module', Store(), lineno=102, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=102, col_offset=25), 'modules', Load(), lineno=102, col_offset=25), Index(Subscript(Name('parts', Load(), lineno=102, col_offset=37), Index(Num(0, lineno=102, col_offset=43)), Load(), lineno=102, col_offset=37)), Load(), lineno=102, col_offset=25), lineno=102, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=103, col_offset=15), None, [Assign([Name('top_module', Store(), lineno=106, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=106, col_offset=25), '_import_top_module', Load(), lineno=106, col_offset=25), [Subscript(Name('parts', Load(), lineno=106, col_offset=49), Index(Num(0, lineno=106, col_offset=55)), Load(), lineno=106, col_offset=49)], [], None, None, lineno=106, col_offset=25), lineno=106, col_offset=12), If(UnaryOp(Not(), Name('top_module', Load(), lineno=107, col_offset=19), lineno=107, col_offset=15), [Raise(Name('ImportError', Load(), lineno=109, col_offset=22), BinOp(Str('No module named ', lineno=109, col_offset=35), Add(), Name('fqname', Load(), lineno=109, col_offset=56), lineno=109, col_offset=35), None, lineno=109, col_offset=16)], [], lineno=107, col_offset=12)], lineno=103, col_offset=8)], [], lineno=101, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=112, col_offset=11), [Name('parts', Load(), lineno=112, col_offset=15)], [], None, None, lineno=112, col_offset=11), [Eq()], [Num(1, lineno=112, col_offset=25)], lineno=112, col_offset=11), [If(UnaryOp(Not(), Name('fromlist', Load(), lineno=113, col_offset=19), lineno=113, col_offset=15), [Return(Name('top_module', Load(), lineno=114, col_offset=23), lineno=114, col_offset=16)], [], lineno=113, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('top_module', Load(), lineno=116, col_offset=19), '__dict__', Load(), lineno=116, col_offset=19), 'get', Load(), lineno=116, col_offset=19), [Str('__ispkg__', lineno=116, col_offset=43)], [], None, None, lineno=116, col_offset=19), lineno=116, col_offset=15), [Return(Name('top_module', Load(), lineno=131, col_offset=23), lineno=131, col_offset=16)], [], lineno=116, col_offset=12)], [], lineno=112, col_offset=8), Assign([Name('importer', Store(), lineno=133, col_offset=8)], Call(Attribute(Attribute(Name('top_module', Load(), lineno=133, col_offset=19), '__dict__', Load(), lineno=133, col_offset=19), 'get', Load(), lineno=133, col_offset=19), [Str('__importer__', lineno=133, col_offset=43)], [], None, None, lineno=133, col_offset=19), lineno=133, col_offset=8), If(Name('importer', Load(), lineno=134, col_offset=11), [Return(Call(Attribute(Name('importer', Load(), lineno=135, col_offset=19), '_finish_import', Load(), lineno=135, col_offset=19), [Name('top_module', Load(), lineno=135, col_offset=43), Subscript(Name('parts', Load(), lineno=135, col_offset=55), Slice(Num(1, lineno=135, col_offset=61), None, None), Load(), lineno=135, col_offset=55), Name('fromlist', Load(), lineno=135, col_offset=66)], [], None, None, lineno=135, col_offset=19), lineno=135, col_offset=12)], [], lineno=134, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=138, col_offset=11), [Name('parts', Load(), lineno=138, col_offset=15)], [], None, None, lineno=138, col_offset=11), [Eq()], [Num(2, lineno=138, col_offset=25)], lineno=138, col_offset=11), Call(Name('hasattr', Load(), lineno=138, col_offset=31), [Name('top_module', Load(), lineno=138, col_offset=39), Subscript(Name('parts', Load(), lineno=138, col_offset=51), Index(Num(1, lineno=138, col_offset=57)), Load(), lineno=138, col_offset=51)], [], None, None, lineno=138, col_offset=31)], lineno=138, col_offset=11), [If(Name('fromlist', Load(), lineno=139, col_offset=15), [Return(Call(Name('getattr', Load(), lineno=140, col_offset=23), [Name('top_module', Load(), lineno=140, col_offset=31), Subscript(Name('parts', Load(), lineno=140, col_offset=43), Index(Num(1, lineno=140, col_offset=49)), Load(), lineno=140, col_offset=43)], [], None, None, lineno=140, col_offset=23), lineno=140, col_offset=16)], [Return(Name('top_module', Load(), lineno=142, col_offset=23), lineno=142, col_offset=16)], lineno=139, col_offset=12)], [], lineno=138, col_offset=8), Raise(Name('ImportError', Load(), lineno=147, col_offset=14), BinOp(Str('No module named ', lineno=147, col_offset=27), Add(), Name('fqname', Load(), lineno=147, col_offset=48), lineno=147, col_offset=27), None, lineno=147, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('_determine_import_context', arguments([Name('self', Param(), lineno=149, col_offset=34), Name('globals', Param(), lineno=149, col_offset=40)], None, None, []), [Expr(Str('Returns the context in which a module should be imported.\n\n        The context could be a loaded (package) module and the imported module\n        will be looked for within that package. The context could also be None,\n        meaning there is no context -- the module should be looked for as a\n        "top-level" module.\n        ', lineno=156, col_offset=-1), lineno=156, col_offset=-1), If(BoolOp(Or(), [UnaryOp(Not(), Name('globals', Load(), lineno=158, col_offset=15), lineno=158, col_offset=11), UnaryOp(Not(), Call(Attribute(Name('globals', Load(), lineno=158, col_offset=30), 'get', Load(), lineno=158, col_offset=30), [Str('__importer__', lineno=158, col_offset=42)], [], None, None, lineno=158, col_offset=30), lineno=158, col_offset=26)], lineno=158, col_offset=11), [Return(Name('None', Load(), lineno=162, col_offset=19), lineno=162, col_offset=12)], [], lineno=158, col_offset=8), Assign([Name('parent_fqname', Store(), lineno=166, col_offset=8)], Subscript(Name('globals', Load(), lineno=166, col_offset=24), Index(Str('__name__', lineno=166, col_offset=32)), Load(), lineno=166, col_offset=24), lineno=166, col_offset=8), If(Subscript(Name('globals', Load(), lineno=170, col_offset=11), Index(Str('__ispkg__', lineno=170, col_offset=19)), Load(), lineno=170, col_offset=11), [Assign([Name('parent', Store(), lineno=171, col_offset=12)], Subscript(Attribute(Name('sys', Load(), lineno=171, col_offset=21), 'modules', Load(), lineno=171, col_offset=21), Index(Name('parent_fqname', Load(), lineno=171, col_offset=33)), Load(), lineno=171, col_offset=21), lineno=171, col_offset=12), Assert(Compare(Name('globals', Load(), lineno=172, col_offset=19), [Is()], [Attribute(Name('parent', Load(), lineno=172, col_offset=30), '__dict__', Load(), lineno=172, col_offset=30)], lineno=172, col_offset=19), None, lineno=172, col_offset=12), Return(Name('parent', Load(), lineno=173, col_offset=19), lineno=173, col_offset=12)], [], lineno=170, col_offset=8), Assign([Name('i', Store(), lineno=175, col_offset=8)], Call(Attribute(Name('parent_fqname', Load(), lineno=175, col_offset=12), 'rfind', Load(), lineno=175, col_offset=12), [Str('.', lineno=175, col_offset=32)], [], None, None, lineno=175, col_offset=12), lineno=175, col_offset=8), If(Compare(Name('i', Load(), lineno=178, col_offset=11), [Eq()], [Num(-1, lineno=178, col_offset=17)], lineno=178, col_offset=11), [Return(Name('None', Load(), lineno=179, col_offset=19), lineno=179, col_offset=12)], [], lineno=178, col_offset=8), Assign([Name('parent_fqname', Store(), lineno=183, col_offset=8)], Subscript(Name('parent_fqname', Load(), lineno=183, col_offset=24), Slice(None, Name('i', Load(), lineno=183, col_offset=39), None), Load(), lineno=183, col_offset=24), lineno=183, col_offset=8), Assign([Name('parent', Store(), lineno=184, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=184, col_offset=17), 'modules', Load(), lineno=184, col_offset=17), Index(Name('parent_fqname', Load(), lineno=184, col_offset=29)), Load(), lineno=184, col_offset=17), lineno=184, col_offset=8), Assert(Compare(Attribute(Name('parent', Load(), lineno=185, col_offset=15), '__name__', Load(), lineno=185, col_offset=15), [Eq()], [Name('parent_fqname', Load(), lineno=185, col_offset=34)], lineno=185, col_offset=15), None, lineno=185, col_offset=8), Return(Name('parent', Load(), lineno=186, col_offset=15), lineno=186, col_offset=8)], [], lineno=149, col_offset=4), FunctionDef('_import_top_module', arguments([Name('self', Param(), lineno=188, col_offset=27), Name('name', Param(), lineno=188, col_offset=33)], None, None, []), [For(Name('item', Store(), lineno=191, col_offset=12), Attribute(Name('sys', Load(), lineno=191, col_offset=20), 'path', Load(), lineno=191, col_offset=20), [If(Call(Name('isinstance', Load(), lineno=192, col_offset=15), [Name('item', Load(), lineno=192, col_offset=26), Name('_StringType', Load(), lineno=192, col_offset=32)], [], None, None, lineno=192, col_offset=15), [Assign([Name('module', Store(), lineno=193, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=193, col_offset=25), 'fs_imp', Load(), lineno=193, col_offset=25), 'import_from_dir', Load(), lineno=193, col_offset=25), [Name('item', Load(), lineno=193, col_offset=53), Name('name', Load(), lineno=193, col_offset=59)], [], None, None, lineno=193, col_offset=25), lineno=193, col_offset=16)], [Assign([Name('module', Store(), lineno=195, col_offset=16)], Call(Attribute(Name('item', Load(), lineno=195, col_offset=25), 'import_top', Load(), lineno=195, col_offset=25), [Name('name', Load(), lineno=195, col_offset=41)], [], None, None, lineno=195, col_offset=25), lineno=195, col_offset=16)], lineno=192, col_offset=12), If(Name('module', Load(), lineno=196, col_offset=15), [Return(Name('module', Load(), lineno=197, col_offset=23), lineno=197, col_offset=16)], [], lineno=196, col_offset=12)], [], lineno=191, col_offset=8), Return(Name('None', Load(), lineno=198, col_offset=15), lineno=198, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('_reload_hook', arguments([Name('self', Param(), lineno=200, col_offset=21), Name('module', Param(), lineno=200, col_offset=27)], None, None, []), [Expr(Str('Python calls this hook to reload a module.', lineno=201, col_offset=8), lineno=201, col_offset=8), Assign([Name('importer', Store(), lineno=205, col_offset=8)], Call(Attribute(Attribute(Name('module', Load(), lineno=205, col_offset=19), '__dict__', Load(), lineno=205, col_offset=19), 'get', Load(), lineno=205, col_offset=19), [Str('__importer__', lineno=205, col_offset=39)], [], None, None, lineno=205, col_offset=19), lineno=205, col_offset=8), If(UnaryOp(Not(), Name('importer', Load(), lineno=206, col_offset=15), lineno=206, col_offset=11), [Pass( lineno=208, col_offset=12)], [], lineno=206, col_offset=8), Raise(Name('SystemError', Load(), lineno=214, col_offset=14), Str('reload not yet implemented', lineno=214, col_offset=27), None, lineno=214, col_offset=8)], [], lineno=200, col_offset=4)], [], lineno=30, col_offset=0), ClassDef('Importer', [], [Expr(Str('Base class for replacing standard import functions.', lineno=218, col_offset=4), lineno=218, col_offset=4), FunctionDef('import_top', arguments([Name('self', Param(), lineno=220, col_offset=19), Name('name', Param(), lineno=220, col_offset=25)], None, None, []), [Expr(Str('Import a top-level module.', lineno=221, col_offset=8), lineno=221, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=222, col_offset=15), '_import_one', Load(), lineno=222, col_offset=15), [Name('None', Load(), lineno=222, col_offset=32), Name('name', Load(), lineno=222, col_offset=38), Name('name', Load(), lineno=222, col_offset=44)], [], None, None, lineno=222, col_offset=15), lineno=222, col_offset=8)], [], lineno=220, col_offset=4), FunctionDef('_finish_import', arguments([Name('self', Param(), lineno=228, col_offset=23), Name('top', Param(), lineno=228, col_offset=29), Name('parts', Param(), lineno=228, col_offset=34), Name('fromlist', Param(), lineno=228, col_offset=41)], None, None, []), [Assign([Name('bottom', Store(), lineno=231, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=231, col_offset=17), '_load_tail', Load(), lineno=231, col_offset=17), [Name('top', Load(), lineno=231, col_offset=33), Name('parts', Load(), lineno=231, col_offset=38)], [], None, None, lineno=231, col_offset=17), lineno=231, col_offset=8), If(UnaryOp(Not(), Name('fromlist', Load(), lineno=234, col_offset=15), lineno=234, col_offset=11), [Return(Name('top', Load(), lineno=236, col_offset=19), lineno=236, col_offset=12)], [], lineno=234, col_offset=8), If(Attribute(Name('bottom', Load(), lineno=257, col_offset=11), '__ispkg__', Load(), lineno=257, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=258, col_offset=12), '_import_fromlist', Load(), lineno=258, col_offset=12), [Name('bottom', Load(), lineno=258, col_offset=34), Name('fromlist', Load(), lineno=258, col_offset=42)], [], None, None, lineno=258, col_offset=12), lineno=258, col_offset=12)], [], lineno=257, col_offset=8), Return(Name('bottom', Load(), lineno=261, col_offset=15), lineno=261, col_offset=8)], [], lineno=228, col_offset=4), FunctionDef('_import_one', arguments([Name('self', Param(), lineno=263, col_offset=20), Name('parent', Param(), lineno=263, col_offset=26), Name('modname', Param(), lineno=263, col_offset=34), Name('fqname', Param(), lineno=263, col_offset=43)], None, None, []), [Expr(Str('Import a single module.', lineno=264, col_offset=8), lineno=264, col_offset=8), TryExcept([Return(Subscript(Attribute(Name('sys', Load(), lineno=268, col_offset=19), 'modules', Load(), lineno=268, col_offset=19), Index(Name('fqname', Load(), lineno=268, col_offset=31)), Load(), lineno=268, col_offset=19), lineno=268, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=269, col_offset=15), None, [Pass( lineno=270, col_offset=12)], lineno=269, col_offset=8)], [], lineno=267, col_offset=8), Assign([Name('result', Store(), lineno=273, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=273, col_offset=17), 'get_code', Load(), lineno=273, col_offset=17), [Name('parent', Load(), lineno=273, col_offset=31), Name('modname', Load(), lineno=273, col_offset=39), Name('fqname', Load(), lineno=273, col_offset=48)], [], None, None, lineno=273, col_offset=17), lineno=273, col_offset=8), If(Compare(Name('result', Load(), lineno=274, col_offset=11), [Is()], [Name('None', Load(), lineno=274, col_offset=21)], lineno=274, col_offset=11), [Return(Name('None', Load(), lineno=275, col_offset=19), lineno=275, col_offset=12)], [], lineno=274, col_offset=8), Assign([Name('module', Store(), lineno=277, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=277, col_offset=17), '_process_result', Load(), lineno=277, col_offset=17), [Name('result', Load(), lineno=277, col_offset=38), Name('fqname', Load(), lineno=277, col_offset=46)], [], None, None, lineno=277, col_offset=17), lineno=277, col_offset=8), If(Name('parent', Load(), lineno=280, col_offset=11), [Expr(Call(Name('setattr', Load(), lineno=281, col_offset=12), [Name('parent', Load(), lineno=281, col_offset=20), Name('modname', Load(), lineno=281, col_offset=28), Name('module', Load(), lineno=281, col_offset=37)], [], None, None, lineno=281, col_offset=12), lineno=281, col_offset=12)], [], lineno=280, col_offset=8), Return(Name('module', Load(), lineno=282, col_offset=15), lineno=282, col_offset=8)], [], lineno=263, col_offset=4), FunctionDef('_process_result', arguments([Name('self', Param(), lineno=284, col_offset=24), Name('result', Param(), lineno=284, col_offset=30), Name('fqname', Param(), lineno=284, col_offset=38)], None, None, []), [Assign([Tuple([Name('ispkg', Store(), lineno=285, col_offset=8), Name('code', Store(), lineno=285, col_offset=15), Name('values', Store(), lineno=285, col_offset=21)], Store(), lineno=285, col_offset=8)], Name('result', Load(), lineno=285, col_offset=30), lineno=285, col_offset=8), Assign([Name('is_module', Store(), lineno=287, col_offset=8)], Call(Name('isinstance', Load(), lineno=287, col_offset=20), [Name('code', Load(), lineno=287, col_offset=31), Name('_ModuleType', Load(), lineno=287, col_offset=37)], [], None, None, lineno=287, col_offset=20), lineno=287, col_offset=8), If(Name('is_module', Load(), lineno=290, col_offset=11), [Assign([Name('module', Store(), lineno=291, col_offset=12)], Name('code', Load(), lineno=291, col_offset=21), lineno=291, col_offset=12)], [Assign([Name('module', Store(), lineno=293, col_offset=12)], Call(Attribute(Name('imp', Load(), lineno=293, col_offset=21), 'new_module', Load(), lineno=293, col_offset=21), [Name('fqname', Load(), lineno=293, col_offset=36)], [], None, None, lineno=293, col_offset=21), lineno=293, col_offset=12)], lineno=290, col_offset=8), Assign([Attribute(Name('module', Load(), lineno=296, col_offset=8), '__importer__', Store(), lineno=296, col_offset=8)], Name('self', Load(), lineno=296, col_offset=30), lineno=296, col_offset=8), Assign([Attribute(Name('module', Load(), lineno=297, col_offset=8), '__ispkg__', Store(), lineno=297, col_offset=8)], Name('ispkg', Load(), lineno=297, col_offset=27), lineno=297, col_offset=8), Expr(Call(Attribute(Attribute(Name('module', Load(), lineno=300, col_offset=8), '__dict__', Load(), lineno=300, col_offset=8), 'update', Load(), lineno=300, col_offset=8), [Name('values', Load(), lineno=300, col_offset=31)], [], None, None, lineno=300, col_offset=8), lineno=300, col_offset=8), Assign([Subscript(Attribute(Name('sys', Load(), lineno=303, col_offset=8), 'modules', Load(), lineno=303, col_offset=8), Index(Name('fqname', Load(), lineno=303, col_offset=20)), Store(), lineno=303, col_offset=8)], Name('module', Load(), lineno=303, col_offset=30), lineno=303, col_offset=8), If(UnaryOp(Not(), Name('is_module', Load(), lineno=306, col_offset=15), lineno=306, col_offset=11), [TryExcept([Exec(Name('code', Load(), lineno=308, col_offset=21), Attribute(Name('module', Load(), lineno=308, col_offset=29), '__dict__', Load(), lineno=308, col_offset=29), None, lineno=308, col_offset=16)], [ExceptHandler(None, None, [If(Compare(Name('fqname', Load(), lineno=310, col_offset=19), [In()], [Attribute(Name('sys', Load(), lineno=310, col_offset=29), 'modules', Load(), lineno=310, col_offset=29)], lineno=310, col_offset=19), [Delete([Subscript(Attribute(Name('sys', Load(), lineno=311, col_offset=24), 'modules', Load(), lineno=311, col_offset=24), Index(Name('fqname', Load(), lineno=311, col_offset=36)), Del(), lineno=311, col_offset=24)], lineno=311, col_offset=20)], [], lineno=310, col_offset=16), Raise(None, None, None, lineno=312, col_offset=16)], lineno=309, col_offset=12)], [], lineno=307, col_offset=12)], [], lineno=306, col_offset=8), Assign([Name('module', Store(), lineno=317, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=317, col_offset=17), 'modules', Load(), lineno=317, col_offset=17), Index(Name('fqname', Load(), lineno=317, col_offset=29)), Load(), lineno=317, col_offset=17), lineno=317, col_offset=8), Assign([Attribute(Name('module', Load(), lineno=318, col_offset=8), '__name__', Store(), lineno=318, col_offset=8)], Name('fqname', Load(), lineno=318, col_offset=26), lineno=318, col_offset=8), Return(Name('module', Load(), lineno=319, col_offset=15), lineno=319, col_offset=8)], [], lineno=284, col_offset=4), FunctionDef('_load_tail', arguments([Name('self', Param(), lineno=321, col_offset=19), Name('m', Param(), lineno=321, col_offset=25), Name('parts', Param(), lineno=321, col_offset=28)], None, None, []), [Expr(Str('Import the rest of the modules, down from the top-level module.\n\n        Returns the last module in the dotted list of modules.\n        ', lineno=325, col_offset=-1), lineno=325, col_offset=-1), For(Name('part', Store(), lineno=326, col_offset=12), Name('parts', Load(), lineno=326, col_offset=20), [Assign([Name('fqname', Store(), lineno=327, col_offset=12)], BinOp(Str('%s.%s', lineno=327, col_offset=21), Mod(), Tuple([Attribute(Name('m', Load(), lineno=327, col_offset=32), '__name__', Load(), lineno=327, col_offset=32), Name('part', Load(), lineno=327, col_offset=44)], Load(), lineno=327, col_offset=32), lineno=327, col_offset=21), lineno=327, col_offset=12), Assign([Name('m', Store(), lineno=328, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=328, col_offset=16), '_import_one', Load(), lineno=328, col_offset=16), [Name('m', Load(), lineno=328, col_offset=33), Name('part', Load(), lineno=328, col_offset=36), Name('fqname', Load(), lineno=328, col_offset=42)], [], None, None, lineno=328, col_offset=16), lineno=328, col_offset=12), If(UnaryOp(Not(), Name('m', Load(), lineno=329, col_offset=19), lineno=329, col_offset=15), [Raise(Name('ImportError', Load(), lineno=330, col_offset=22), BinOp(Str('No module named ', lineno=330, col_offset=35), Add(), Name('fqname', Load(), lineno=330, col_offset=56), lineno=330, col_offset=35), None, lineno=330, col_offset=16)], [], lineno=329, col_offset=12)], [], lineno=326, col_offset=8), Return(Name('m', Load(), lineno=331, col_offset=15), lineno=331, col_offset=8)], [], lineno=321, col_offset=4), FunctionDef('_import_fromlist', arguments([Name('self', Param(), lineno=333, col_offset=25), Name('package', Param(), lineno=333, col_offset=31), Name('fromlist', Param(), lineno=333, col_offset=40)], None, None, []), [Expr(Str('Import any sub-modules in the "from" list.', lineno=334, col_offset=8), lineno=334, col_offset=8), If(Compare(Str('*', lineno=338, col_offset=11), [In()], [Name('fromlist', Load(), lineno=338, col_offset=18)], lineno=338, col_offset=11), [Assign([Name('fromlist', Store(), lineno=339, col_offset=12)], BinOp(Call(Name('list', Load(), lineno=339, col_offset=23), [Name('fromlist', Load(), lineno=339, col_offset=28)], [], None, None, lineno=339, col_offset=23), Add(), Call(Name('list', Load(), lineno=340, col_offset=23), [Call(Attribute(Attribute(Name('package', Load(), lineno=340, col_offset=28), '__dict__', Load(), lineno=340, col_offset=28), 'get', Load(), lineno=340, col_offset=28), [Str('__all__', lineno=340, col_offset=49), List([], Load(), lineno=340, col_offset=60)], [], None, None, lineno=340, col_offset=28)], [], None, None, lineno=340, col_offset=23), lineno=339, col_offset=23), lineno=339, col_offset=12)], [], lineno=338, col_offset=8), For(Name('sub', Store(), lineno=342, col_offset=12), Name('fromlist', Load(), lineno=342, col_offset=19), [If(BoolOp(And(), [Compare(Name('sub', Load(), lineno=345, col_offset=15), [NotEq()], [Str('*', lineno=345, col_offset=22)], lineno=345, col_offset=15), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=345, col_offset=34), [Name('package', Load(), lineno=345, col_offset=42), Name('sub', Load(), lineno=345, col_offset=51)], [], None, None, lineno=345, col_offset=34), lineno=345, col_offset=30)], lineno=345, col_offset=15), [Assign([Name('subname', Store(), lineno=346, col_offset=16)], BinOp(Str('%s.%s', lineno=346, col_offset=26), Mod(), Tuple([Attribute(Name('package', Load(), lineno=346, col_offset=37), '__name__', Load(), lineno=346, col_offset=37), Name('sub', Load(), lineno=346, col_offset=55)], Load(), lineno=346, col_offset=37), lineno=346, col_offset=26), lineno=346, col_offset=16), Assign([Name('submod', Store(), lineno=347, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=347, col_offset=25), '_import_one', Load(), lineno=347, col_offset=25), [Name('package', Load(), lineno=347, col_offset=42), Name('sub', Load(), lineno=347, col_offset=51), Name('subname', Load(), lineno=347, col_offset=56)], [], None, None, lineno=347, col_offset=25), lineno=347, col_offset=16), If(UnaryOp(Not(), Name('submod', Load(), lineno=348, col_offset=23), lineno=348, col_offset=19), [Raise(Name('ImportError', Load(), lineno=349, col_offset=26), BinOp(Str('cannot import name ', lineno=349, col_offset=39), Add(), Name('subname', Load(), lineno=349, col_offset=63), lineno=349, col_offset=39), None, lineno=349, col_offset=20)], [], lineno=348, col_offset=16)], [], lineno=345, col_offset=12)], [], lineno=342, col_offset=8)], [], lineno=333, col_offset=4), FunctionDef('_do_import', arguments([Name('self', Param(), lineno=351, col_offset=19), Name('parent', Param(), lineno=351, col_offset=25), Name('parts', Param(), lineno=351, col_offset=33), Name('fromlist', Param(), lineno=351, col_offset=40)], None, None, []), [Expr(Str('Attempt to import the module relative to parent.\n\n        This method is used when the import context specifies that <self>\n        imported the parent module.\n        ', lineno=356, col_offset=-1), lineno=356, col_offset=-1), Assign([Name('top_name', Store(), lineno=357, col_offset=8)], Subscript(Name('parts', Load(), lineno=357, col_offset=19), Index(Num(0, lineno=357, col_offset=25)), Load(), lineno=357, col_offset=19), lineno=357, col_offset=8), Assign([Name('top_fqname', Store(), lineno=358, col_offset=8)], BinOp(BinOp(Attribute(Name('parent', Load(), lineno=358, col_offset=21), '__name__', Load(), lineno=358, col_offset=21), Add(), Str('.', lineno=358, col_offset=39), lineno=358, col_offset=21), Add(), Name('top_name', Load(), lineno=358, col_offset=45), lineno=358, col_offset=43), lineno=358, col_offset=8), Assign([Name('top_module', Store(), lineno=359, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=359, col_offset=21), '_import_one', Load(), lineno=359, col_offset=21), [Name('parent', Load(), lineno=359, col_offset=38), Name('top_name', Load(), lineno=359, col_offset=46), Name('top_fqname', Load(), lineno=359, col_offset=56)], [], None, None, lineno=359, col_offset=21), lineno=359, col_offset=8), If(UnaryOp(Not(), Name('top_module', Load(), lineno=360, col_offset=15), lineno=360, col_offset=11), [Return(Name('None', Load(), lineno=362, col_offset=19), lineno=362, col_offset=12)], [], lineno=360, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=364, col_offset=15), '_finish_import', Load(), lineno=364, col_offset=15), [Name('top_module', Load(), lineno=364, col_offset=35), Subscript(Name('parts', Load(), lineno=364, col_offset=47), Slice(Num(1, lineno=364, col_offset=53), None, None), Load(), lineno=364, col_offset=47), Name('fromlist', Load(), lineno=364, col_offset=58)], [], None, None, lineno=364, col_offset=15), lineno=364, col_offset=8)], [], lineno=351, col_offset=4), FunctionDef('get_code', arguments([Name('self', Param(), lineno=370, col_offset=17), Name('parent', Param(), lineno=370, col_offset=23), Name('modname', Param(), lineno=370, col_offset=31), Name('fqname', Param(), lineno=370, col_offset=40)], None, None, []), [Expr(Str('Find and retrieve the code for the given module.\n\n        parent specifies a parent module to define a context for importing. It\n        may be None, indicating no particular context for the search.\n\n        modname specifies a single module (not dotted) within the parent.\n\n        fqname specifies the fully-qualified module name. This is a\n        (potentially) dotted name from the "root" of the module namespace\n        down to the modname.\n        If there is no parent, then modname==fqname.\n\n        This method should return None, or a 3-tuple.\n\n        * If the module was not found, then None should be returned.\n\n        * The first item of the 2- or 3-tuple should be the integer 0 or 1,\n            specifying whether the module that was found is a package or not.\n\n        * The second item is the code object for the module (it will be\n            executed within the new module\'s namespace). This item can also\n            be a fully-loaded module object (e.g. loaded from a shared lib).\n\n        * The third item is a dictionary of name/value pairs that will be\n            inserted into new module before the code object is executed. This\n            is provided in case the module\'s code expects certain values (such\n            as where the module was found). When the second item is a module\n            object, then these names/values will be inserted *after* the module\n            has been loaded/initialized.\n        ', lineno=400, col_offset=-1), lineno=400, col_offset=-1), Raise(Name('RuntimeError', Load(), lineno=401, col_offset=14), Str('get_code not implemented', lineno=401, col_offset=28), None, lineno=401, col_offset=8)], [], lineno=370, col_offset=4)], [], lineno=217, col_offset=0), Assign([Name('_suffix_char', Store(), lineno=410, col_offset=0)], BoolOp(Or(), [BoolOp(And(), [Name('__debug__', Load(), lineno=410, col_offset=15), Str('c', lineno=410, col_offset=29)], lineno=410, col_offset=15), Str('o', lineno=410, col_offset=36)], lineno=410, col_offset=15), lineno=410, col_offset=0), Assign([Name('_suffix', Store(), lineno=413, col_offset=0)], BinOp(Str('.py', lineno=413, col_offset=10), Add(), Name('_suffix_char', Load(), lineno=413, col_offset=18), lineno=413, col_offset=10), lineno=413, col_offset=0), FunctionDef('_compile', arguments([Name('pathname', Param(), lineno=415, col_offset=13), Name('timestamp', Param(), lineno=415, col_offset=23)], None, None, []), [Expr(Str("Compile (and cache) a Python source file.\n\n    The file specified by <pathname> is compiled to a code object and\n    returned.\n\n    Presuming the appropriate privileges exist, the bytecodes will be\n    saved back to the filesystem for future imports. The source file's\n    modification timestamp must be provided as a Long value.\n    ", lineno=424, col_offset=-1), lineno=424, col_offset=-1), Assign([Name('codestring', Store(), lineno=425, col_offset=4)], Call(Attribute(Call(Name('open', Load(), lineno=425, col_offset=17), [Name('pathname', Load(), lineno=425, col_offset=22), Str('rU', lineno=425, col_offset=32)], [], None, None, lineno=425, col_offset=17), 'read', Load(), lineno=425, col_offset=17), [], [], None, None, lineno=425, col_offset=17), lineno=425, col_offset=4), If(BoolOp(And(), [Name('codestring', Load(), lineno=426, col_offset=7), Compare(Subscript(Name('codestring', Load(), lineno=426, col_offset=22), Index(Num(-1, lineno=426, col_offset=34)), Load(), lineno=426, col_offset=22), [NotEq()], [Str('\n', lineno=426, col_offset=40)], lineno=426, col_offset=22)], lineno=426, col_offset=7), [Assign([Name('codestring', Store(), lineno=427, col_offset=8)], BinOp(Name('codestring', Load(), lineno=427, col_offset=21), Add(), Str('\n', lineno=427, col_offset=34), lineno=427, col_offset=21), lineno=427, col_offset=8)], [], lineno=426, col_offset=4), Assign([Name('code', Store(), lineno=428, col_offset=4)], Call(Attribute(Name('__builtin__', Load(), lineno=428, col_offset=11), 'compile', Load(), lineno=428, col_offset=11), [Name('codestring', Load(), lineno=428, col_offset=31), Name('pathname', Load(), lineno=428, col_offset=43), Str('exec', lineno=428, col_offset=53)], [], None, None, lineno=428, col_offset=11), lineno=428, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=432, col_offset=8)], Call(Name('open', Load(), lineno=432, col_offset=12), [BinOp(Name('pathname', Load(), lineno=432, col_offset=17), Add(), Name('_suffix_char', Load(), lineno=432, col_offset=28), lineno=432, col_offset=17), Str('wb', lineno=432, col_offset=42)], [], None, None, lineno=432, col_offset=12), lineno=432, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=433, col_offset=11), None, [Pass( lineno=434, col_offset=8)], lineno=433, col_offset=4)], [Expr(Call(Attribute(Name('f', Load(), lineno=436, col_offset=8), 'write', Load(), lineno=436, col_offset=8), [Str('\x00\x00\x00\x00', lineno=436, col_offset=16)], [], None, None, lineno=436, col_offset=8), lineno=436, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=437, col_offset=8), 'write', Load(), lineno=437, col_offset=8), [Call(Attribute(Name('struct', Load(), lineno=437, col_offset=16), 'pack', Load(), lineno=437, col_offset=16), [Str('<I', lineno=437, col_offset=28), Name('timestamp', Load(), lineno=437, col_offset=34)], [], None, None, lineno=437, col_offset=16)], [], None, None, lineno=437, col_offset=8), lineno=437, col_offset=8), Expr(Call(Attribute(Name('marshal', Load(), lineno=438, col_offset=8), 'dump', Load(), lineno=438, col_offset=8), [Name('code', Load(), lineno=438, col_offset=21), Name('f', Load(), lineno=438, col_offset=27)], [], None, None, lineno=438, col_offset=8), lineno=438, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=439, col_offset=8), 'flush', Load(), lineno=439, col_offset=8), [], [], None, None, lineno=439, col_offset=8), lineno=439, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=440, col_offset=8), 'seek', Load(), lineno=440, col_offset=8), [Num(0, lineno=440, col_offset=15), Num(0, lineno=440, col_offset=18)], [], None, None, lineno=440, col_offset=8), lineno=440, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=441, col_offset=8), 'write', Load(), lineno=441, col_offset=8), [Call(Attribute(Name('imp', Load(), lineno=441, col_offset=16), 'get_magic', Load(), lineno=441, col_offset=16), [], [], None, None, lineno=441, col_offset=16)], [], None, None, lineno=441, col_offset=8), lineno=441, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=442, col_offset=8), 'close', Load(), lineno=442, col_offset=8), [], [], None, None, lineno=442, col_offset=8), lineno=442, col_offset=8)], lineno=431, col_offset=4), Return(Name('code', Load(), lineno=444, col_offset=11), lineno=444, col_offset=4)], [], lineno=415, col_offset=0), Assign([Name('_os_stat', Store(), lineno=446, col_offset=0), Name('_os_path_join', Store(), lineno=446, col_offset=11)], Name('None', Load(), lineno=446, col_offset=27), lineno=446, col_offset=0), FunctionDef('_os_bootstrap', arguments([], None, None, []), [Expr(Str("Set up 'os' module replacement functions for use during import bootstrap.", lineno=448, col_offset=4), lineno=448, col_offset=4), Assign([Name('names', Store(), lineno=450, col_offset=4)], Attribute(Name('sys', Load(), lineno=450, col_offset=12), 'builtin_module_names', Load(), lineno=450, col_offset=12), lineno=450, col_offset=4), Assign([Name('join', Store(), lineno=452, col_offset=4)], Name('None', Load(), lineno=452, col_offset=11), lineno=452, col_offset=4), If(Compare(Str('posix', lineno=453, col_offset=7), [In()], [Name('names', Load(), lineno=453, col_offset=18)], lineno=453, col_offset=7), [Assign([Name('sep', Store(), lineno=454, col_offset=8)], Str('/', lineno=454, col_offset=14), lineno=454, col_offset=8), ImportFrom('posix', [alias('stat', None)], 0, lineno=455, col_offset=8)], [If(Compare(Str('nt', lineno=456, col_offset=9), [In()], [Name('names', Load(), lineno=456, col_offset=17)], lineno=456, col_offset=9), [Assign([Name('sep', Store(), lineno=457, col_offset=8)], Str('\\', lineno=457, col_offset=14), lineno=457, col_offset=8), ImportFrom('nt', [alias('stat', None)], 0, lineno=458, col_offset=8)], [If(Compare(Str('dos', lineno=459, col_offset=9), [In()], [Name('names', Load(), lineno=459, col_offset=18)], lineno=459, col_offset=9), [Assign([Name('sep', Store(), lineno=460, col_offset=8)], Str('\\', lineno=460, col_offset=14), lineno=460, col_offset=8), ImportFrom('dos', [alias('stat', None)], 0, lineno=461, col_offset=8)], [If(Compare(Str('os2', lineno=462, col_offset=9), [In()], [Name('names', Load(), lineno=462, col_offset=18)], lineno=462, col_offset=9), [Assign([Name('sep', Store(), lineno=463, col_offset=8)], Str('\\', lineno=463, col_offset=14), lineno=463, col_offset=8), ImportFrom('os2', [alias('stat', None)], 0, lineno=464, col_offset=8)], [Raise(Name('ImportError', Load(), lineno=466, col_offset=14), Str('no os specific module found', lineno=466, col_offset=27), None, lineno=466, col_offset=8)], lineno=462, col_offset=9)], lineno=459, col_offset=9)], lineno=456, col_offset=9)], lineno=453, col_offset=4), If(Compare(Name('join', Load(), lineno=468, col_offset=7), [Is()], [Name('None', Load(), lineno=468, col_offset=15)], lineno=468, col_offset=7), [FunctionDef('join', arguments([Name('a', Param(), lineno=469, col_offset=17), Name('b', Param(), lineno=469, col_offset=20), Name('sep', Param(), lineno=469, col_offset=23)], None, None, [Name('sep', Load(), lineno=469, col_offset=27)]), [If(Compare(Name('a', Load(), lineno=470, col_offset=15), [Eq()], [Str('', lineno=470, col_offset=20)], lineno=470, col_offset=15), [Return(Name('b', Load(), lineno=471, col_offset=23), lineno=471, col_offset=16)], [], lineno=470, col_offset=12), Assign([Name('lastchar', Store(), lineno=472, col_offset=12)], Subscript(Name('a', Load(), lineno=472, col_offset=23), Slice(Num(-1, lineno=472, col_offset=26), None, None), Load(), lineno=472, col_offset=23), lineno=472, col_offset=12), If(BoolOp(Or(), [Compare(Name('lastchar', Load(), lineno=473, col_offset=15), [Eq()], [Str('/', lineno=473, col_offset=27)], lineno=473, col_offset=15), Compare(Name('lastchar', Load(), lineno=473, col_offset=34), [Eq()], [Name('sep', Load(), lineno=473, col_offset=46)], lineno=473, col_offset=34)], lineno=473, col_offset=15), [Return(BinOp(Name('a', Load(), lineno=474, col_offset=23), Add(), Name('b', Load(), lineno=474, col_offset=27), lineno=474, col_offset=23), lineno=474, col_offset=16)], [], lineno=473, col_offset=12), Return(BinOp(BinOp(Name('a', Load(), lineno=475, col_offset=19), Add(), Name('sep', Load(), lineno=475, col_offset=23), lineno=475, col_offset=19), Add(), Name('b', Load(), lineno=475, col_offset=29), lineno=475, col_offset=27), lineno=475, col_offset=12)], [], lineno=469, col_offset=8)], [], lineno=468, col_offset=4), Global(['_os_stat'], lineno=477, col_offset=4), Assign([Name('_os_stat', Store(), lineno=478, col_offset=4)], Name('stat', Load(), lineno=478, col_offset=15), lineno=478, col_offset=4), Global(['_os_path_join'], lineno=480, col_offset=4), Assign([Name('_os_path_join', Store(), lineno=481, col_offset=4)], Name('join', Load(), lineno=481, col_offset=20), lineno=481, col_offset=4)], [], lineno=447, col_offset=0), FunctionDef('_os_path_isdir', arguments([Name('pathname', Param(), lineno=483, col_offset=19)], None, None, []), [Expr(Str('Local replacement for os.path.isdir().', lineno=484, col_offset=4), lineno=484, col_offset=4), TryExcept([Assign([Name('s', Store(), lineno=486, col_offset=8)], Call(Name('_os_stat', Load(), lineno=486, col_offset=12), [Name('pathname', Load(), lineno=486, col_offset=21)], [], None, None, lineno=486, col_offset=12), lineno=486, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=487, col_offset=11), None, [Return(Name('None', Load(), lineno=488, col_offset=15), lineno=488, col_offset=8)], lineno=487, col_offset=4)], [], lineno=485, col_offset=4), Return(Compare(BinOp(Attribute(Name('s', Load(), lineno=489, col_offset=12), 'st_mode', Load(), lineno=489, col_offset=12), BitAnd(), Num(61440, lineno=489, col_offset=24), lineno=489, col_offset=12), [Eq()], [Num(16384, lineno=489, col_offset=36)], lineno=489, col_offset=11), lineno=489, col_offset=4)], [], lineno=483, col_offset=0), FunctionDef('_timestamp', arguments([Name('pathname', Param(), lineno=491, col_offset=15)], None, None, []), [Expr(Str('Return the file modification time as a Long.', lineno=492, col_offset=4), lineno=492, col_offset=4), TryExcept([Assign([Name('s', Store(), lineno=494, col_offset=8)], Call(Name('_os_stat', Load(), lineno=494, col_offset=12), [Name('pathname', Load(), lineno=494, col_offset=21)], [], None, None, lineno=494, col_offset=12), lineno=494, col_offset=8)], [ExceptHandler(Name('OSError', Load(), lineno=495, col_offset=11), None, [Return(Name('None', Load(), lineno=496, col_offset=15), lineno=496, col_offset=8)], lineno=495, col_offset=4)], [], lineno=493, col_offset=4), Return(Call(Name('long', Load(), lineno=497, col_offset=11), [Attribute(Name('s', Load(), lineno=497, col_offset=16), 'st_mtime', Load(), lineno=497, col_offset=16)], [], None, None, lineno=497, col_offset=11), lineno=497, col_offset=4)], [], lineno=491, col_offset=0), ClassDef('BuiltinImporter', [Name('Importer', Load(), lineno=504, col_offset=22)], [FunctionDef('get_code', arguments([Name('self', Param(), lineno=505, col_offset=17), Name('parent', Param(), lineno=505, col_offset=23), Name('modname', Param(), lineno=505, col_offset=31), Name('fqname', Param(), lineno=505, col_offset=40)], None, None, []), [If(Name('parent', Load(), lineno=506, col_offset=11), [Return(Name('None', Load(), lineno=508, col_offset=19), lineno=508, col_offset=12)], [], lineno=506, col_offset=8), If(Call(Attribute(Name('imp', Load(), lineno=511, col_offset=11), 'is_builtin', Load(), lineno=511, col_offset=11), [Name('modname', Load(), lineno=511, col_offset=26)], [], None, None, lineno=511, col_offset=11), [Assign([Name('type', Store(), lineno=512, col_offset=12)], Attribute(Name('imp', Load(), lineno=512, col_offset=19), 'C_BUILTIN', Load(), lineno=512, col_offset=19), lineno=512, col_offset=12)], [If(Call(Attribute(Name('imp', Load(), lineno=513, col_offset=13), 'is_frozen', Load(), lineno=513, col_offset=13), [Name('modname', Load(), lineno=513, col_offset=27)], [], None, None, lineno=513, col_offset=13), [Assign([Name('type', Store(), lineno=514, col_offset=12)], Attribute(Name('imp', Load(), lineno=514, col_offset=19), 'PY_FROZEN', Load(), lineno=514, col_offset=19), lineno=514, col_offset=12)], [Return(Name('None', Load(), lineno=517, col_offset=19), lineno=517, col_offset=12)], lineno=513, col_offset=13)], lineno=511, col_offset=8), Assign([Name('module', Store(), lineno=520, col_offset=8)], Call(Attribute(Name('imp', Load(), lineno=520, col_offset=17), 'load_module', Load(), lineno=520, col_offset=17), [Name('modname', Load(), lineno=520, col_offset=33), Name('None', Load(), lineno=520, col_offset=42), Name('modname', Load(), lineno=520, col_offset=48), Tuple([Str('', lineno=520, col_offset=58), Str('', lineno=520, col_offset=62), Name('type', Load(), lineno=520, col_offset=66)], Load(), lineno=520, col_offset=58)], [], None, None, lineno=520, col_offset=17), lineno=520, col_offset=8), Return(Tuple([Num(0, lineno=521, col_offset=15), Name('module', Load(), lineno=521, col_offset=18), Dict([], [], lineno=521, col_offset=26)], Load(), lineno=521, col_offset=15), lineno=521, col_offset=8)], [], lineno=505, col_offset=4)], [], lineno=504, col_offset=0), ClassDef('_FilesystemImporter', [Name('Importer', Load(), lineno=528, col_offset=26)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=529, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=530, col_offset=8), 'suffixes', Store(), lineno=530, col_offset=8)], List([], Load(), lineno=530, col_offset=24), lineno=530, col_offset=8)], [], lineno=529, col_offset=4), FunctionDef('add_suffix', arguments([Name('self', Param(), lineno=532, col_offset=19), Name('suffix', Param(), lineno=532, col_offset=25), Name('importFunc', Param(), lineno=532, col_offset=33)], None, None, []), [Assert(Call(Name('hasattr', Load(), lineno=533, col_offset=15), [Name('importFunc', Load(), lineno=533, col_offset=23), Str('__call__', lineno=533, col_offset=35)], [], None, None, lineno=533, col_offset=15), None, lineno=533, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=534, col_offset=8), 'suffixes', Load(), lineno=534, col_offset=8), 'append', Load(), lineno=534, col_offset=8), [Tuple([Name('suffix', Load(), lineno=534, col_offset=30), Name('importFunc', Load(), lineno=534, col_offset=38)], Load(), lineno=534, col_offset=30)], [], None, None, lineno=534, col_offset=8), lineno=534, col_offset=8)], [], lineno=532, col_offset=4), FunctionDef('import_from_dir', arguments([Name('self', Param(), lineno=536, col_offset=24), Name('dir', Param(), lineno=536, col_offset=30), Name('fqname', Param(), lineno=536, col_offset=35)], None, None, []), [Assign([Name('result', Store(), lineno=537, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=537, col_offset=17), '_import_pathname', Load(), lineno=537, col_offset=17), [Call(Name('_os_path_join', Load(), lineno=537, col_offset=39), [Name('dir', Load(), lineno=537, col_offset=53), Name('fqname', Load(), lineno=537, col_offset=58)], [], None, None, lineno=537, col_offset=39), Name('fqname', Load(), lineno=537, col_offset=67)], [], None, None, lineno=537, col_offset=17), lineno=537, col_offset=8), If(Name('result', Load(), lineno=538, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=539, col_offset=19), '_process_result', Load(), lineno=539, col_offset=19), [Name('result', Load(), lineno=539, col_offset=40), Name('fqname', Load(), lineno=539, col_offset=48)], [], None, None, lineno=539, col_offset=19), lineno=539, col_offset=12)], [], lineno=538, col_offset=8), Return(Name('None', Load(), lineno=540, col_offset=15), lineno=540, col_offset=8)], [], lineno=536, col_offset=4), FunctionDef('get_code', arguments([Name('self', Param(), lineno=542, col_offset=17), Name('parent', Param(), lineno=542, col_offset=23), Name('modname', Param(), lineno=542, col_offset=31), Name('fqname', Param(), lineno=542, col_offset=40)], None, None, []), [Assert(Name('parent', Load(), lineno=547, col_offset=15), None, lineno=547, col_offset=8), For(Name('submodule_path', Store(), lineno=549, col_offset=12), Attribute(Name('parent', Load(), lineno=549, col_offset=30), '__path__', Load(), lineno=549, col_offset=30), [Assign([Name('code', Store(), lineno=550, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=550, col_offset=19), '_import_pathname', Load(), lineno=550, col_offset=19), [Call(Name('_os_path_join', Load(), lineno=550, col_offset=41), [Name('submodule_path', Load(), lineno=550, col_offset=55), Name('modname', Load(), lineno=550, col_offset=71)], [], None, None, lineno=550, col_offset=41), Name('fqname', Load(), lineno=550, col_offset=81)], [], None, None, lineno=550, col_offset=19), lineno=550, col_offset=12), If(Compare(Name('code', Load(), lineno=551, col_offset=15), [IsNot()], [Name('None', Load(), lineno=551, col_offset=27)], lineno=551, col_offset=15), [Return(Name('code', Load(), lineno=552, col_offset=23), lineno=552, col_offset=16)], [], lineno=551, col_offset=12)], [], lineno=549, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=553, col_offset=15), '_import_pathname', Load(), lineno=553, col_offset=15), [Call(Name('_os_path_join', Load(), lineno=553, col_offset=37), [Attribute(Name('parent', Load(), lineno=553, col_offset=51), '__pkgdir__', Load(), lineno=553, col_offset=51), Name('modname', Load(), lineno=553, col_offset=70)], [], None, None, lineno=553, col_offset=37), Name('fqname', Load(), lineno=554, col_offset=37)], [], None, None, lineno=553, col_offset=15), lineno=553, col_offset=8)], [], lineno=542, col_offset=4), FunctionDef('_import_pathname', arguments([Name('self', Param(), lineno=556, col_offset=25), Name('pathname', Param(), lineno=556, col_offset=31), Name('fqname', Param(), lineno=556, col_offset=41)], None, None, []), [If(Call(Name('_os_path_isdir', Load(), lineno=557, col_offset=11), [Name('pathname', Load(), lineno=557, col_offset=26)], [], None, None, lineno=557, col_offset=11), [Assign([Name('result', Store(), lineno=558, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=558, col_offset=21), '_import_pathname', Load(), lineno=558, col_offset=21), [Call(Name('_os_path_join', Load(), lineno=558, col_offset=43), [Name('pathname', Load(), lineno=558, col_offset=57), Str('__init__', lineno=558, col_offset=67)], [], None, None, lineno=558, col_offset=43), Name('fqname', Load(), lineno=559, col_offset=43)], [], None, None, lineno=558, col_offset=21), lineno=558, col_offset=12), If(Name('result', Load(), lineno=560, col_offset=15), [Assign([Name('values', Store(), lineno=561, col_offset=16)], Subscript(Name('result', Load(), lineno=561, col_offset=25), Index(Num(2, lineno=561, col_offset=32)), Load(), lineno=561, col_offset=25), lineno=561, col_offset=16), Assign([Subscript(Name('values', Load(), lineno=562, col_offset=16), Index(Str('__pkgdir__', lineno=562, col_offset=23)), Store(), lineno=562, col_offset=16)], Name('pathname', Load(), lineno=562, col_offset=39), lineno=562, col_offset=16), Assign([Subscript(Name('values', Load(), lineno=563, col_offset=16), Index(Str('__path__', lineno=563, col_offset=23)), Store(), lineno=563, col_offset=16)], List([Name('pathname', Load(), lineno=563, col_offset=39)], Load(), lineno=563, col_offset=37), lineno=563, col_offset=16), Return(Tuple([Num(1, lineno=564, col_offset=23), Subscript(Name('result', Load(), lineno=564, col_offset=26), Index(Num(1, lineno=564, col_offset=33)), Load(), lineno=564, col_offset=26), Name('values', Load(), lineno=564, col_offset=37)], Load(), lineno=564, col_offset=23), lineno=564, col_offset=16)], [], lineno=560, col_offset=12), Return(Name('None', Load(), lineno=565, col_offset=19), lineno=565, col_offset=12)], [], lineno=557, col_offset=8), For(Tuple([Name('suffix', Store(), lineno=567, col_offset=12), Name('importFunc', Store(), lineno=567, col_offset=20)], Store(), lineno=567, col_offset=12), Attribute(Name('self', Load(), lineno=567, col_offset=34), 'suffixes', Load(), lineno=567, col_offset=34), [Assign([Name('filename', Store(), lineno=568, col_offset=12)], BinOp(Name('pathname', Load(), lineno=568, col_offset=23), Add(), Name('suffix', Load(), lineno=568, col_offset=34), lineno=568, col_offset=23), lineno=568, col_offset=12), TryExcept([Assign([Name('finfo', Store(), lineno=570, col_offset=16)], Call(Name('_os_stat', Load(), lineno=570, col_offset=24), [Name('filename', Load(), lineno=570, col_offset=33)], [], None, None, lineno=570, col_offset=24), lineno=570, col_offset=16)], [ExceptHandler(Name('OSError', Load(), lineno=571, col_offset=19), None, [Pass( lineno=572, col_offset=16)], lineno=571, col_offset=12)], [Return(Call(Name('importFunc', Load(), lineno=574, col_offset=23), [Name('filename', Load(), lineno=574, col_offset=34), Name('finfo', Load(), lineno=574, col_offset=44), Name('fqname', Load(), lineno=574, col_offset=51)], [], None, None, lineno=574, col_offset=23), lineno=574, col_offset=16)], lineno=569, col_offset=12)], [], lineno=567, col_offset=8), Return(Name('None', Load(), lineno=575, col_offset=15), lineno=575, col_offset=8)], [], lineno=556, col_offset=4)], [], lineno=528, col_offset=0), FunctionDef('py_suffix_importer', arguments([Name('filename', Param(), lineno=582, col_offset=23), Name('finfo', Param(), lineno=582, col_offset=33), Name('fqname', Param(), lineno=582, col_offset=40)], None, None, []), [Assign([Name('file', Store(), lineno=583, col_offset=4)], BinOp(Subscript(Name('filename', Load(), lineno=583, col_offset=11), Slice(None, Num(-3, lineno=583, col_offset=22), None), Load(), lineno=583, col_offset=11), Add(), Name('_suffix', Load(), lineno=583, col_offset=27), lineno=583, col_offset=11), lineno=583, col_offset=4), Assign([Name('t_py', Store(), lineno=584, col_offset=4)], Call(Name('long', Load(), lineno=584, col_offset=11), [Subscript(Name('finfo', Load(), lineno=584, col_offset=16), Index(Num(8, lineno=584, col_offset=22)), Load(), lineno=584, col_offset=16)], [], None, None, lineno=584, col_offset=11), lineno=584, col_offset=4), Assign([Name('t_pyc', Store(), lineno=585, col_offset=4)], Call(Name('_timestamp', Load(), lineno=585, col_offset=12), [Name('file', Load(), lineno=585, col_offset=23)], [], None, None, lineno=585, col_offset=12), lineno=585, col_offset=4), Assign([Name('code', Store(), lineno=587, col_offset=4)], Name('None', Load(), lineno=587, col_offset=11), lineno=587, col_offset=4), If(BoolOp(And(), [Compare(Name('t_pyc', Load(), lineno=588, col_offset=7), [IsNot()], [Name('None', Load(), lineno=588, col_offset=20)], lineno=588, col_offset=7), Compare(Name('t_pyc', Load(), lineno=588, col_offset=29), [GtE()], [Name('t_py', Load(), lineno=588, col_offset=38)], lineno=588, col_offset=29)], lineno=588, col_offset=7), [Assign([Name('f', Store(), lineno=589, col_offset=8)], Call(Name('open', Load(), lineno=589, col_offset=12), [Name('file', Load(), lineno=589, col_offset=17), Str('rb', lineno=589, col_offset=23)], [], None, None, lineno=589, col_offset=12), lineno=589, col_offset=8), If(Compare(Call(Attribute(Name('f', Load(), lineno=590, col_offset=11), 'read', Load(), lineno=590, col_offset=11), [Num(4, lineno=590, col_offset=18)], [], None, None, lineno=590, col_offset=11), [Eq()], [Call(Attribute(Name('imp', Load(), lineno=590, col_offset=24), 'get_magic', Load(), lineno=590, col_offset=24), [], [], None, None, lineno=590, col_offset=24)], lineno=590, col_offset=11), [Assign([Name('t', Store(), lineno=591, col_offset=12)], Subscript(Call(Attribute(Name('struct', Load(), lineno=591, col_offset=16), 'unpack', Load(), lineno=591, col_offset=16), [Str('<I', lineno=591, col_offset=30), Call(Attribute(Name('f', Load(), lineno=591, col_offset=36), 'read', Load(), lineno=591, col_offset=36), [Num(4, lineno=591, col_offset=43)], [], None, None, lineno=591, col_offset=36)], [], None, None, lineno=591, col_offset=16), Index(Num(0, lineno=591, col_offset=47)), Load(), lineno=591, col_offset=16), lineno=591, col_offset=12), If(Compare(Name('t', Load(), lineno=592, col_offset=15), [Eq()], [Name('t_py', Load(), lineno=592, col_offset=20)], lineno=592, col_offset=15), [Assign([Name('code', Store(), lineno=593, col_offset=16)], Call(Attribute(Name('marshal', Load(), lineno=593, col_offset=23), 'load', Load(), lineno=593, col_offset=23), [Name('f', Load(), lineno=593, col_offset=36)], [], None, None, lineno=593, col_offset=23), lineno=593, col_offset=16)], [], lineno=592, col_offset=12)], [], lineno=590, col_offset=8), Expr(Call(Attribute(Name('f', Load(), lineno=594, col_offset=8), 'close', Load(), lineno=594, col_offset=8), [], [], None, None, lineno=594, col_offset=8), lineno=594, col_offset=8)], [], lineno=588, col_offset=4), If(Compare(Name('code', Load(), lineno=595, col_offset=7), [Is()], [Name('None', Load(), lineno=595, col_offset=15)], lineno=595, col_offset=7), [Assign([Name('file', Store(), lineno=596, col_offset=8)], Name('filename', Load(), lineno=596, col_offset=15), lineno=596, col_offset=8), Assign([Name('code', Store(), lineno=597, col_offset=8)], Call(Name('_compile', Load(), lineno=597, col_offset=15), [Name('file', Load(), lineno=597, col_offset=24), Name('t_py', Load(), lineno=597, col_offset=30)], [], None, None, lineno=597, col_offset=15), lineno=597, col_offset=8)], [], lineno=595, col_offset=4), Return(Tuple([Num(0, lineno=599, col_offset=11), Name('code', Load(), lineno=599, col_offset=14), Dict([Str('__file__', lineno=599, col_offset=22)], [Name('file', Load(), lineno=599, col_offset=35)], lineno=599, col_offset=20)], Load(), lineno=599, col_offset=11), lineno=599, col_offset=4)], [], lineno=582, col_offset=0), ClassDef('DynLoadSuffixImporter', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=602, col_offset=17), Name('desc', Param(), lineno=602, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=603, col_offset=8), 'desc', Store(), lineno=603, col_offset=8)], Name('desc', Load(), lineno=603, col_offset=20), lineno=603, col_offset=8)], [], lineno=602, col_offset=4), FunctionDef('import_file', arguments([Name('self', Param(), lineno=605, col_offset=20), Name('filename', Param(), lineno=605, col_offset=26), Name('finfo', Param(), lineno=605, col_offset=36), Name('fqname', Param(), lineno=605, col_offset=43)], None, None, []), [Assign([Name('fp', Store(), lineno=606, col_offset=8)], Call(Name('open', Load(), lineno=606, col_offset=13), [Name('filename', Load(), lineno=606, col_offset=18), Subscript(Attribute(Name('self', Load(), lineno=606, col_offset=28), 'desc', Load(), lineno=606, col_offset=28), Index(Num(1, lineno=606, col_offset=38)), Load(), lineno=606, col_offset=28)], [], None, None, lineno=606, col_offset=13), lineno=606, col_offset=8), Assign([Name('module', Store(), lineno=607, col_offset=8)], Call(Attribute(Name('imp', Load(), lineno=607, col_offset=17), 'load_module', Load(), lineno=607, col_offset=17), [Name('fqname', Load(), lineno=607, col_offset=33), Name('fp', Load(), lineno=607, col_offset=41), Name('filename', Load(), lineno=607, col_offset=45), Attribute(Name('self', Load(), lineno=607, col_offset=55), 'desc', Load(), lineno=607, col_offset=55)], [], None, None, lineno=607, col_offset=17), lineno=607, col_offset=8), Assign([Attribute(Name('module', Load(), lineno=608, col_offset=8), '__file__', Store(), lineno=608, col_offset=8)], Name('filename', Load(), lineno=608, col_offset=26), lineno=608, col_offset=8), Return(Tuple([Num(0, lineno=609, col_offset=15), Name('module', Load(), lineno=609, col_offset=18), Dict([], [], lineno=609, col_offset=26)], Load(), lineno=609, col_offset=15), lineno=609, col_offset=8)], [], lineno=605, col_offset=4)], [], lineno=601, col_offset=0), FunctionDef('_print_importers', arguments([], None, None, []), [Assign([Name('items', Store(), lineno=615, col_offset=4)], Call(Attribute(Attribute(Name('sys', Load(), lineno=615, col_offset=12), 'modules', Load(), lineno=615, col_offset=12), 'items', Load(), lineno=615, col_offset=12), [], [], None, None, lineno=615, col_offset=12), lineno=615, col_offset=4), Expr(Call(Attribute(Name('items', Load(), lineno=616, col_offset=4), 'sort', Load(), lineno=616, col_offset=4), [], [], None, None, lineno=616, col_offset=4), lineno=616, col_offset=4), For(Tuple([Name('name', Store(), lineno=617, col_offset=8), Name('module', Store(), lineno=617, col_offset=14)], Store(), lineno=617, col_offset=8), Name('items', Load(), lineno=617, col_offset=24), [If(Name('module', Load(), lineno=618, col_offset=11), [Print(None, [Name('name', Load(), lineno=619, col_offset=18), Call(Attribute(Attribute(Name('module', Load(), lineno=619, col_offset=24), '__dict__', Load(), lineno=619, col_offset=24), 'get', Load(), lineno=619, col_offset=24), [Str('__importer__', lineno=619, col_offset=44), Str('-- no importer', lineno=619, col_offset=60)], [], None, None, lineno=619, col_offset=24)], True, lineno=619, col_offset=12)], [Print(None, [Name('name', Load(), lineno=621, col_offset=18), Str('-- non-existent module', lineno=621, col_offset=24)], True, lineno=621, col_offset=12)], lineno=618, col_offset=8)], [], lineno=617, col_offset=4)], [], lineno=614, col_offset=0), FunctionDef('_test_revamp', arguments([], None, None, []), [Expr(Call(Attribute(Call(Name('ImportManager', Load(), lineno=624, col_offset=4), [], [], None, None, lineno=624, col_offset=4), 'install', Load(), lineno=624, col_offset=4), [], [], None, None, lineno=624, col_offset=4), lineno=624, col_offset=4), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=625, col_offset=4), 'path', Load(), lineno=625, col_offset=4), 'insert', Load(), lineno=625, col_offset=4), [Num(0, lineno=625, col_offset=20), Call(Name('BuiltinImporter', Load(), lineno=625, col_offset=23), [], [], None, None, lineno=625, col_offset=23)], [], None, None, lineno=625, col_offset=4), lineno=625, col_offset=4)], [], lineno=623, col_offset=0)])
