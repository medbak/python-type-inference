Module([Expr(Str('Header encoding and decoding functionality.', lineno=5, col_offset=0), lineno=5, col_offset=0), Assign([Name('__all__', Store(), lineno=7, col_offset=0)], List([Str('Header', lineno=8, col_offset=4), Str('decode_header', lineno=9, col_offset=4), Str('make_header', lineno=10, col_offset=4)], Load(), lineno=7, col_offset=10), lineno=7, col_offset=0), Import([alias('re', None)], lineno=13, col_offset=0), Import([alias('binascii', None)], lineno=14, col_offset=0), Import([alias('email.quoprimime', None)], lineno=16, col_offset=0), Import([alias('email.base64mime', None)], lineno=17, col_offset=0), ImportFrom('email.errors', [alias('HeaderParseError', None)], 0, lineno=19, col_offset=0), ImportFrom('email.charset', [alias('Charset', None)], 0, lineno=20, col_offset=0), Assign([Name('NL', Store(), lineno=22, col_offset=0)], Str('\n', lineno=22, col_offset=5), lineno=22, col_offset=0), Assign([Name('SPACE', Store(), lineno=23, col_offset=0)], Str(' ', lineno=23, col_offset=8), lineno=23, col_offset=0), Assign([Name('USPACE', Store(), lineno=24, col_offset=0)], Str(u' ', lineno=24, col_offset=9), lineno=24, col_offset=0), Assign([Name('SPACE8', Store(), lineno=25, col_offset=0)], BinOp(Str(' ', lineno=25, col_offset=9), Mult(), Num(8, lineno=25, col_offset=15), lineno=25, col_offset=9), lineno=25, col_offset=0), Assign([Name('UEMPTYSTRING', Store(), lineno=26, col_offset=0)], Str(u'', lineno=26, col_offset=15), lineno=26, col_offset=0), Assign([Name('MAXLINELEN', Store(), lineno=28, col_offset=0)], Num(76, lineno=28, col_offset=13), lineno=28, col_offset=0), Assign([Name('USASCII', Store(), lineno=30, col_offset=0)], Call(Name('Charset', Load(), lineno=30, col_offset=10), [Str('us-ascii', lineno=30, col_offset=18)], [], None, None, lineno=30, col_offset=10), lineno=30, col_offset=0), Assign([Name('UTF8', Store(), lineno=31, col_offset=0)], Call(Name('Charset', Load(), lineno=31, col_offset=7), [Str('utf-8', lineno=31, col_offset=15)], [], None, None, lineno=31, col_offset=7), lineno=31, col_offset=0), Assign([Name('ecre', Store(), lineno=34, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=34, col_offset=7), 'compile', Load(), lineno=34, col_offset=7), [Str('\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string\n  \\?=                   # literal ?=\n  (?=[ \\t]|$)           # whitespace or the end of the string\n  ', lineno=43, col_offset=-1), BinOp(BinOp(Attribute(Name('re', Load(), lineno=43, col_offset=7), 'VERBOSE', Load(), lineno=43, col_offset=7), BitOr(), Attribute(Name('re', Load(), lineno=43, col_offset=20), 'IGNORECASE', Load(), lineno=43, col_offset=20), lineno=43, col_offset=7), BitOr(), Attribute(Name('re', Load(), lineno=43, col_offset=36), 'MULTILINE', Load(), lineno=43, col_offset=36), lineno=43, col_offset=34)], [], None, None, lineno=34, col_offset=7), lineno=34, col_offset=0), Assign([Name('fcre', Store(), lineno=48, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=48, col_offset=7), 'compile', Load(), lineno=48, col_offset=7), [Str('[\\041-\\176]+:$', lineno=48, col_offset=18)], [], None, None, lineno=48, col_offset=7), lineno=48, col_offset=0), Assign([Name('_max_append', Store(), lineno=53, col_offset=0)], Attribute(Attribute(Name('email', Load(), lineno=53, col_offset=14), 'quoprimime', Load(), lineno=53, col_offset=14), '_max_append', Load(), lineno=53, col_offset=14), lineno=53, col_offset=0), FunctionDef('decode_header', arguments([Name('header', Param(), lineno=57, col_offset=18)], None, None, []), [Expr(Str('Decode a message header value without converting charset.\n\n    Returns a list of (decoded_string, charset) pairs containing each of the\n    decoded parts of the header.  Charset is None for non-encoded parts of the\n    header, otherwise a lower-case string containing the name of the character\n    set specified in the encoded string.\n\n    An email.errors.HeaderParseError may be raised when certain decoding error\n    occurs (e.g. a base64 decoding exception).\n    ', lineno=67, col_offset=-1), lineno=67, col_offset=-1), Assign([Name('header', Store(), lineno=69, col_offset=4)], Call(Name('str', Load(), lineno=69, col_offset=13), [Name('header', Load(), lineno=69, col_offset=17)], [], None, None, lineno=69, col_offset=13), lineno=69, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('ecre', Load(), lineno=70, col_offset=11), 'search', Load(), lineno=70, col_offset=11), [Name('header', Load(), lineno=70, col_offset=23)], [], None, None, lineno=70, col_offset=11), lineno=70, col_offset=7), [Return(List([Tuple([Name('header', Load(), lineno=71, col_offset=17), Name('None', Load(), lineno=71, col_offset=25)], Load(), lineno=71, col_offset=17)], Load(), lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=70, col_offset=4), Assign([Name('decoded', Store(), lineno=72, col_offset=4)], List([], Load(), lineno=72, col_offset=14), lineno=72, col_offset=4), Assign([Name('dec', Store(), lineno=73, col_offset=4)], Str('', lineno=73, col_offset=10), lineno=73, col_offset=4), For(Name('line', Store(), lineno=74, col_offset=8), Call(Attribute(Name('header', Load(), lineno=74, col_offset=16), 'splitlines', Load(), lineno=74, col_offset=16), [], [], None, None, lineno=74, col_offset=16), [If(UnaryOp(Not(), Call(Attribute(Name('ecre', Load(), lineno=76, col_offset=15), 'search', Load(), lineno=76, col_offset=15), [Name('line', Load(), lineno=76, col_offset=27)], [], None, None, lineno=76, col_offset=15), lineno=76, col_offset=11), [Expr(Call(Attribute(Name('decoded', Load(), lineno=77, col_offset=12), 'append', Load(), lineno=77, col_offset=12), [Tuple([Name('line', Load(), lineno=77, col_offset=28), Name('None', Load(), lineno=77, col_offset=34)], Load(), lineno=77, col_offset=28)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12), Continue( lineno=78, col_offset=12)], [], lineno=76, col_offset=8), Assign([Name('parts', Store(), lineno=79, col_offset=8)], Call(Attribute(Name('ecre', Load(), lineno=79, col_offset=16), 'split', Load(), lineno=79, col_offset=16), [Name('line', Load(), lineno=79, col_offset=27)], [], None, None, lineno=79, col_offset=16), lineno=79, col_offset=8), While(Name('parts', Load(), lineno=80, col_offset=14), [Assign([Name('unenc', Store(), lineno=81, col_offset=12)], Call(Attribute(Call(Attribute(Name('parts', Load(), lineno=81, col_offset=20), 'pop', Load(), lineno=81, col_offset=20), [Num(0, lineno=81, col_offset=30)], [], None, None, lineno=81, col_offset=20), 'strip', Load(), lineno=81, col_offset=20), [], [], None, None, lineno=81, col_offset=20), lineno=81, col_offset=12), If(Name('unenc', Load(), lineno=82, col_offset=15), [If(BoolOp(And(), [Name('decoded', Load(), lineno=84, col_offset=19), Compare(Subscript(Subscript(Name('decoded', Load(), lineno=84, col_offset=31), Index(Num(-1, lineno=84, col_offset=40)), Load(), lineno=84, col_offset=31), Index(Num(1, lineno=84, col_offset=43)), Load(), lineno=84, col_offset=31), [Is()], [Name('None', Load(), lineno=84, col_offset=49)], lineno=84, col_offset=31)], lineno=84, col_offset=19), [Assign([Subscript(Name('decoded', Load(), lineno=85, col_offset=20), Index(Num(-1, lineno=85, col_offset=29)), Store(), lineno=85, col_offset=20)], Tuple([BinOp(BinOp(Subscript(Subscript(Name('decoded', Load(), lineno=85, col_offset=35), Index(Num(-1, lineno=85, col_offset=44)), Load(), lineno=85, col_offset=35), Index(Num(0, lineno=85, col_offset=47)), Load(), lineno=85, col_offset=35), Add(), Name('SPACE', Load(), lineno=85, col_offset=52), lineno=85, col_offset=35), Add(), Name('unenc', Load(), lineno=85, col_offset=60), lineno=85, col_offset=58), Name('None', Load(), lineno=85, col_offset=67)], Load(), lineno=85, col_offset=35), lineno=85, col_offset=20)], [Expr(Call(Attribute(Name('decoded', Load(), lineno=87, col_offset=20), 'append', Load(), lineno=87, col_offset=20), [Tuple([Name('unenc', Load(), lineno=87, col_offset=36), Name('None', Load(), lineno=87, col_offset=43)], Load(), lineno=87, col_offset=36)], [], None, None, lineno=87, col_offset=20), lineno=87, col_offset=20)], lineno=84, col_offset=16)], [], lineno=82, col_offset=12), If(Name('parts', Load(), lineno=88, col_offset=15), [Assign([Tuple([Name('charset', Store(), lineno=89, col_offset=16), Name('encoding', Store(), lineno=89, col_offset=25)], Store(), lineno=89, col_offset=16)], ListComp(Call(Attribute(Name('s', Load(), lineno=89, col_offset=37), 'lower', Load(), lineno=89, col_offset=37), [], [], None, None, lineno=89, col_offset=37), [comprehension(Name('s', Store(), lineno=89, col_offset=51), Subscript(Name('parts', Load(), lineno=89, col_offset=56), Slice(Num(0, lineno=89, col_offset=62), Num(2, lineno=89, col_offset=64), None), Load(), lineno=89, col_offset=56), [])], lineno=89, col_offset=37), lineno=89, col_offset=16), Assign([Name('encoded', Store(), lineno=90, col_offset=16)], Subscript(Name('parts', Load(), lineno=90, col_offset=26), Index(Num(2, lineno=90, col_offset=32)), Load(), lineno=90, col_offset=26), lineno=90, col_offset=16), Assign([Name('dec', Store(), lineno=91, col_offset=16)], Name('None', Load(), lineno=91, col_offset=22), lineno=91, col_offset=16), If(Compare(Name('encoding', Load(), lineno=92, col_offset=19), [Eq()], [Str('q', lineno=92, col_offset=31)], lineno=92, col_offset=19), [Assign([Name('dec', Store(), lineno=93, col_offset=20)], Call(Attribute(Attribute(Name('email', Load(), lineno=93, col_offset=26), 'quoprimime', Load(), lineno=93, col_offset=26), 'header_decode', Load(), lineno=93, col_offset=26), [Name('encoded', Load(), lineno=93, col_offset=57)], [], None, None, lineno=93, col_offset=26), lineno=93, col_offset=20)], [If(Compare(Name('encoding', Load(), lineno=94, col_offset=21), [Eq()], [Str('b', lineno=94, col_offset=33)], lineno=94, col_offset=21), [Assign([Name('paderr', Store(), lineno=95, col_offset=20)], BinOp(Call(Name('len', Load(), lineno=95, col_offset=29), [Name('encoded', Load(), lineno=95, col_offset=33)], [], None, None, lineno=95, col_offset=29), Mod(), Num(4, lineno=95, col_offset=44), lineno=95, col_offset=29), lineno=95, col_offset=20), If(Name('paderr', Load(), lineno=96, col_offset=23), [AugAssign(Name('encoded', Store(), lineno=97, col_offset=24), Add(), Subscript(Str('===', lineno=97, col_offset=35), Slice(None, BinOp(Num(4, lineno=97, col_offset=42), Sub(), Name('paderr', Load(), lineno=97, col_offset=46), lineno=97, col_offset=42), None), Load(), lineno=97, col_offset=35), lineno=97, col_offset=24)], [], lineno=96, col_offset=20), TryExcept([Assign([Name('dec', Store(), lineno=99, col_offset=24)], Call(Attribute(Attribute(Name('email', Load(), lineno=99, col_offset=30), 'base64mime', Load(), lineno=99, col_offset=30), 'decode', Load(), lineno=99, col_offset=30), [Name('encoded', Load(), lineno=99, col_offset=54)], [], None, None, lineno=99, col_offset=30), lineno=99, col_offset=24)], [ExceptHandler(Attribute(Name('binascii', Load(), lineno=100, col_offset=27), 'Error', Load(), lineno=100, col_offset=27), None, [Raise(Name('HeaderParseError', Load(), lineno=104, col_offset=30), None, None, lineno=104, col_offset=24)], lineno=100, col_offset=20)], [], lineno=98, col_offset=20)], [], lineno=94, col_offset=21)], lineno=92, col_offset=16), If(Compare(Name('dec', Load(), lineno=105, col_offset=19), [Is()], [Name('None', Load(), lineno=105, col_offset=26)], lineno=105, col_offset=19), [Assign([Name('dec', Store(), lineno=106, col_offset=20)], Name('encoded', Load(), lineno=106, col_offset=26), lineno=106, col_offset=20)], [], lineno=105, col_offset=16), If(BoolOp(And(), [Name('decoded', Load(), lineno=108, col_offset=19), Compare(Subscript(Subscript(Name('decoded', Load(), lineno=108, col_offset=31), Index(Num(-1, lineno=108, col_offset=40)), Load(), lineno=108, col_offset=31), Index(Num(1, lineno=108, col_offset=43)), Load(), lineno=108, col_offset=31), [Eq()], [Name('charset', Load(), lineno=108, col_offset=49)], lineno=108, col_offset=31)], lineno=108, col_offset=19), [Assign([Subscript(Name('decoded', Load(), lineno=109, col_offset=20), Index(Num(-1, lineno=109, col_offset=29)), Store(), lineno=109, col_offset=20)], Tuple([BinOp(Subscript(Subscript(Name('decoded', Load(), lineno=109, col_offset=35), Index(Num(-1, lineno=109, col_offset=44)), Load(), lineno=109, col_offset=35), Index(Num(0, lineno=109, col_offset=47)), Load(), lineno=109, col_offset=35), Add(), Name('dec', Load(), lineno=109, col_offset=52), lineno=109, col_offset=35), Subscript(Subscript(Name('decoded', Load(), lineno=109, col_offset=57), Index(Num(-1, lineno=109, col_offset=66)), Load(), lineno=109, col_offset=57), Index(Num(1, lineno=109, col_offset=69)), Load(), lineno=109, col_offset=57)], Load(), lineno=109, col_offset=35), lineno=109, col_offset=20)], [Expr(Call(Attribute(Name('decoded', Load(), lineno=111, col_offset=20), 'append', Load(), lineno=111, col_offset=20), [Tuple([Name('dec', Load(), lineno=111, col_offset=36), Name('charset', Load(), lineno=111, col_offset=41)], Load(), lineno=111, col_offset=36)], [], None, None, lineno=111, col_offset=20), lineno=111, col_offset=20)], lineno=108, col_offset=16)], [], lineno=88, col_offset=12), Delete([Subscript(Name('parts', Load(), lineno=112, col_offset=16), Slice(Num(0, lineno=112, col_offset=22), Num(3, lineno=112, col_offset=24), None), Del(), lineno=112, col_offset=16)], lineno=112, col_offset=12)], [], lineno=80, col_offset=8)], [], lineno=74, col_offset=4), Return(Name('decoded', Load(), lineno=113, col_offset=11), lineno=113, col_offset=4)], [], lineno=57, col_offset=0), FunctionDef('make_header', arguments([Name('decoded_seq', Param(), lineno=117, col_offset=16), Name('maxlinelen', Param(), lineno=117, col_offset=29), Name('header_name', Param(), lineno=117, col_offset=46), Name('continuation_ws', Param(), lineno=118, col_offset=16)], None, None, [Name('None', Load(), lineno=117, col_offset=40), Name('None', Load(), lineno=117, col_offset=58), Str(' ', lineno=118, col_offset=32)]), [Expr(Str('Create a Header from a sequence of pairs as returned by decode_header()\n\n    decode_header() takes a header value string and returns a sequence of\n    pairs of the format (decoded_string, charset) where charset is the string\n    name of the character set.\n\n    This function takes one of those sequence of pairs and returns a Header\n    instance.  Optional maxlinelen, header_name, and continuation_ws are as in\n    the Header constructor.\n    ', lineno=128, col_offset=-1), lineno=128, col_offset=-1), Assign([Name('h', Store(), lineno=129, col_offset=4)], Call(Name('Header', Load(), lineno=129, col_offset=8), [], [keyword('maxlinelen', Name('maxlinelen', Load(), lineno=129, col_offset=26)), keyword('header_name', Name('header_name', Load(), lineno=129, col_offset=50)), keyword('continuation_ws', Name('continuation_ws', Load(), lineno=130, col_offset=31))], None, None, lineno=129, col_offset=8), lineno=129, col_offset=4), For(Tuple([Name('s', Store(), lineno=131, col_offset=8), Name('charset', Store(), lineno=131, col_offset=11)], Store(), lineno=131, col_offset=8), Name('decoded_seq', Load(), lineno=131, col_offset=22), [If(BoolOp(And(), [Compare(Name('charset', Load(), lineno=133, col_offset=11), [IsNot()], [Name('None', Load(), lineno=133, col_offset=26)], lineno=133, col_offset=11), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=133, col_offset=39), [Name('charset', Load(), lineno=133, col_offset=50), Name('Charset', Load(), lineno=133, col_offset=59)], [], None, None, lineno=133, col_offset=39), lineno=133, col_offset=35)], lineno=133, col_offset=11), [Assign([Name('charset', Store(), lineno=134, col_offset=12)], Call(Name('Charset', Load(), lineno=134, col_offset=22), [Name('charset', Load(), lineno=134, col_offset=30)], [], None, None, lineno=134, col_offset=22), lineno=134, col_offset=12)], [], lineno=133, col_offset=8), Expr(Call(Attribute(Name('h', Load(), lineno=135, col_offset=8), 'append', Load(), lineno=135, col_offset=8), [Name('s', Load(), lineno=135, col_offset=17), Name('charset', Load(), lineno=135, col_offset=20)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8)], [], lineno=131, col_offset=4), Return(Name('h', Load(), lineno=136, col_offset=11), lineno=136, col_offset=4)], [], lineno=117, col_offset=0), ClassDef('Header', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=141, col_offset=17), Name('s', Param(), lineno=141, col_offset=23), Name('charset', Param(), lineno=141, col_offset=31), Name('maxlinelen', Param(), lineno=142, col_offset=17), Name('header_name', Param(), lineno=142, col_offset=34), Name('continuation_ws', Param(), lineno=143, col_offset=17), Name('errors', Param(), lineno=143, col_offset=38)], None, None, [Name('None', Load(), lineno=141, col_offset=25), Name('None', Load(), lineno=141, col_offset=39), Name('None', Load(), lineno=142, col_offset=28), Name('None', Load(), lineno=142, col_offset=46), Str(' ', lineno=143, col_offset=33), Str('strict', lineno=143, col_offset=45)]), [Expr(Str("Create a MIME-compliant header that can contain many character sets.\n\n        Optional s is the initial header value.  If None, the initial header\n        value is not set.  You can later append to the header with .append()\n        method calls.  s may be a byte string or a Unicode string, but see the\n        .append() documentation for semantics.\n\n        Optional charset serves two purposes: it has the same meaning as the\n        charset argument to the .append() method.  It also sets the default\n        character set for all subsequent .append() calls that omit the charset\n        argument.  If charset is not provided in the constructor, the us-ascii\n        charset is used both as s's initial charset and as the default for\n        subsequent .append() calls.\n\n        The maximum line length can be specified explicit via maxlinelen.  For\n        splitting the first line to a shorter value (to account for the field\n        header which isn't included in s, e.g. `Subject') pass in the name of\n        the field in header_name.  The default maxlinelen is 76.\n\n        continuation_ws must be RFC 2822 compliant folding whitespace (usually\n        either a space or a hard tab) which will be prepended to continuation\n        lines.\n\n        errors is passed through to the .append() call.\n        ", lineno=168, col_offset=-1), lineno=168, col_offset=-1), If(Compare(Name('charset', Load(), lineno=169, col_offset=11), [Is()], [Name('None', Load(), lineno=169, col_offset=22)], lineno=169, col_offset=11), [Assign([Name('charset', Store(), lineno=170, col_offset=12)], Name('USASCII', Load(), lineno=170, col_offset=22), lineno=170, col_offset=12)], [], lineno=169, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=171, col_offset=15), [Name('charset', Load(), lineno=171, col_offset=26), Name('Charset', Load(), lineno=171, col_offset=35)], [], None, None, lineno=171, col_offset=15), lineno=171, col_offset=11), [Assign([Name('charset', Store(), lineno=172, col_offset=12)], Call(Name('Charset', Load(), lineno=172, col_offset=22), [Name('charset', Load(), lineno=172, col_offset=30)], [], None, None, lineno=172, col_offset=22), lineno=172, col_offset=12)], [], lineno=171, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=173, col_offset=8), '_charset', Store(), lineno=173, col_offset=8)], Name('charset', Load(), lineno=173, col_offset=24), lineno=173, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=174, col_offset=8), '_continuation_ws', Store(), lineno=174, col_offset=8)], Name('continuation_ws', Load(), lineno=174, col_offset=32), lineno=174, col_offset=8), Assign([Name('cws_expanded_len', Store(), lineno=175, col_offset=8)], Call(Name('len', Load(), lineno=175, col_offset=27), [Call(Attribute(Name('continuation_ws', Load(), lineno=175, col_offset=31), 'replace', Load(), lineno=175, col_offset=31), [Str('\t', lineno=175, col_offset=55), Name('SPACE8', Load(), lineno=175, col_offset=61)], [], None, None, lineno=175, col_offset=31)], [], None, None, lineno=175, col_offset=27), lineno=175, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=177, col_offset=8), '_chunks', Store(), lineno=177, col_offset=8)], List([], Load(), lineno=177, col_offset=23), lineno=177, col_offset=8), If(Compare(Name('s', Load(), lineno=178, col_offset=11), [IsNot()], [Name('None', Load(), lineno=178, col_offset=20)], lineno=178, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=179, col_offset=12), 'append', Load(), lineno=179, col_offset=12), [Name('s', Load(), lineno=179, col_offset=24), Name('charset', Load(), lineno=179, col_offset=27), Name('errors', Load(), lineno=179, col_offset=36)], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12)], [], lineno=178, col_offset=8), If(Compare(Name('maxlinelen', Load(), lineno=180, col_offset=11), [Is()], [Name('None', Load(), lineno=180, col_offset=25)], lineno=180, col_offset=11), [Assign([Name('maxlinelen', Store(), lineno=181, col_offset=12)], Name('MAXLINELEN', Load(), lineno=181, col_offset=25), lineno=181, col_offset=12)], [], lineno=180, col_offset=8), If(Compare(Name('header_name', Load(), lineno=182, col_offset=11), [Is()], [Name('None', Load(), lineno=182, col_offset=26)], lineno=182, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=185, col_offset=12), '_firstlinelen', Store(), lineno=185, col_offset=12)], Name('maxlinelen', Load(), lineno=185, col_offset=33), lineno=185, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=189, col_offset=12), '_firstlinelen', Store(), lineno=189, col_offset=12)], BinOp(BinOp(Name('maxlinelen', Load(), lineno=189, col_offset=33), Sub(), Call(Name('len', Load(), lineno=189, col_offset=46), [Name('header_name', Load(), lineno=189, col_offset=50)], [], None, None, lineno=189, col_offset=46), lineno=189, col_offset=33), Sub(), Num(2, lineno=189, col_offset=65), lineno=189, col_offset=63), lineno=189, col_offset=12)], lineno=182, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=192, col_offset=8), '_maxlinelen', Store(), lineno=192, col_offset=8)], BinOp(Name('maxlinelen', Load(), lineno=192, col_offset=27), Sub(), Name('cws_expanded_len', Load(), lineno=192, col_offset=40), lineno=192, col_offset=27), lineno=192, col_offset=8)], [], lineno=141, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=194, col_offset=16)], None, None, []), [Expr(Str('A synonym for self.encode().', lineno=195, col_offset=8), lineno=195, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=196, col_offset=15), 'encode', Load(), lineno=196, col_offset=15), [], [], None, None, lineno=196, col_offset=15), lineno=196, col_offset=8)], [], lineno=194, col_offset=4), FunctionDef('__unicode__', arguments([Name('self', Param(), lineno=198, col_offset=20)], None, None, []), [Expr(Str('Helper for the built-in unicode function.', lineno=199, col_offset=8), lineno=199, col_offset=8), Assign([Name('uchunks', Store(), lineno=200, col_offset=8)], List([], Load(), lineno=200, col_offset=18), lineno=200, col_offset=8), Assign([Name('lastcs', Store(), lineno=201, col_offset=8)], Name('None', Load(), lineno=201, col_offset=17), lineno=201, col_offset=8), For(Tuple([Name('s', Store(), lineno=202, col_offset=12), Name('charset', Store(), lineno=202, col_offset=15)], Store(), lineno=202, col_offset=12), Attribute(Name('self', Load(), lineno=202, col_offset=26), '_chunks', Load(), lineno=202, col_offset=26), [Assign([Name('nextcs', Store(), lineno=207, col_offset=12)], Name('charset', Load(), lineno=207, col_offset=21), lineno=207, col_offset=12), If(Name('uchunks', Load(), lineno=208, col_offset=15), [If(Compare(Name('lastcs', Load(), lineno=209, col_offset=19), [NotIn()], [Tuple([Name('None', Load(), lineno=209, col_offset=34), Str('us-ascii', lineno=209, col_offset=40)], Load(), lineno=209, col_offset=34)], lineno=209, col_offset=19), [If(Compare(Name('nextcs', Load(), lineno=210, col_offset=23), [In()], [Tuple([Name('None', Load(), lineno=210, col_offset=34), Str('us-ascii', lineno=210, col_offset=40)], Load(), lineno=210, col_offset=34)], lineno=210, col_offset=23), [Expr(Call(Attribute(Name('uchunks', Load(), lineno=211, col_offset=24), 'append', Load(), lineno=211, col_offset=24), [Name('USPACE', Load(), lineno=211, col_offset=39)], [], None, None, lineno=211, col_offset=24), lineno=211, col_offset=24), Assign([Name('nextcs', Store(), lineno=212, col_offset=24)], Name('None', Load(), lineno=212, col_offset=33), lineno=212, col_offset=24)], [], lineno=210, col_offset=20)], [If(Compare(Name('nextcs', Load(), lineno=213, col_offset=21), [NotIn()], [Tuple([Name('None', Load(), lineno=213, col_offset=36), Str('us-ascii', lineno=213, col_offset=42)], Load(), lineno=213, col_offset=36)], lineno=213, col_offset=21), [Expr(Call(Attribute(Name('uchunks', Load(), lineno=214, col_offset=20), 'append', Load(), lineno=214, col_offset=20), [Name('USPACE', Load(), lineno=214, col_offset=35)], [], None, None, lineno=214, col_offset=20), lineno=214, col_offset=20)], [], lineno=213, col_offset=21)], lineno=209, col_offset=16)], [], lineno=208, col_offset=12), Assign([Name('lastcs', Store(), lineno=215, col_offset=12)], Name('nextcs', Load(), lineno=215, col_offset=21), lineno=215, col_offset=12), Expr(Call(Attribute(Name('uchunks', Load(), lineno=216, col_offset=12), 'append', Load(), lineno=216, col_offset=12), [Call(Name('unicode', Load(), lineno=216, col_offset=27), [Name('s', Load(), lineno=216, col_offset=35), Call(Name('str', Load(), lineno=216, col_offset=38), [Name('charset', Load(), lineno=216, col_offset=42)], [], None, None, lineno=216, col_offset=38)], [], None, None, lineno=216, col_offset=27)], [], None, None, lineno=216, col_offset=12), lineno=216, col_offset=12)], [], lineno=202, col_offset=8), Return(Call(Attribute(Name('UEMPTYSTRING', Load(), lineno=217, col_offset=15), 'join', Load(), lineno=217, col_offset=15), [Name('uchunks', Load(), lineno=217, col_offset=33)], [], None, None, lineno=217, col_offset=15), lineno=217, col_offset=8)], [], lineno=198, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=221, col_offset=15), Name('other', Param(), lineno=221, col_offset=21)], None, None, []), [Return(Compare(Name('other', Load(), lineno=224, col_offset=15), [Eq()], [Call(Attribute(Name('self', Load(), lineno=224, col_offset=24), 'encode', Load(), lineno=224, col_offset=24), [], [], None, None, lineno=224, col_offset=24)], lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=221, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=226, col_offset=15), Name('other', Param(), lineno=226, col_offset=21)], None, None, []), [Return(UnaryOp(Not(), Compare(Name('self', Load(), lineno=227, col_offset=19), [Eq()], [Name('other', Load(), lineno=227, col_offset=27)], lineno=227, col_offset=19), lineno=227, col_offset=15), lineno=227, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('append', arguments([Name('self', Param(), lineno=229, col_offset=15), Name('s', Param(), lineno=229, col_offset=21), Name('charset', Param(), lineno=229, col_offset=24), Name('errors', Param(), lineno=229, col_offset=38)], None, None, [Name('None', Load(), lineno=229, col_offset=32), Str('strict', lineno=229, col_offset=45)]), [Expr(Str("Append a string to the MIME header.\n\n        Optional charset, if given, should be a Charset instance or the name\n        of a character set (which will be converted to a Charset instance).  A\n        value of None (the default) means that the charset given in the\n        constructor is used.\n\n        s may be a byte string or a Unicode string.  If it is a byte string\n        (i.e. isinstance(s, str) is true), then charset is the encoding of\n        that byte string, and a UnicodeError will be raised if the string\n        cannot be decoded with that charset.  If s is a Unicode string, then\n        charset is a hint specifying the character set of the characters in\n        the string.  In this case, when producing an RFC 2822 compliant header\n        using RFC 2047 rules, the Unicode string will be encoded using the\n        following charsets in order: us-ascii, the charset hint, utf-8.  The\n        first character set not to provoke a UnicodeError is used.\n\n        Optional `errors' is passed as the third argument to any unicode() or\n        ustr.encode() call.\n        ", lineno=249, col_offset=-1), lineno=249, col_offset=-1), If(Compare(Name('charset', Load(), lineno=250, col_offset=11), [Is()], [Name('None', Load(), lineno=250, col_offset=22)], lineno=250, col_offset=11), [Assign([Name('charset', Store(), lineno=251, col_offset=12)], Attribute(Name('self', Load(), lineno=251, col_offset=22), '_charset', Load(), lineno=251, col_offset=22), lineno=251, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=252, col_offset=17), [Name('charset', Load(), lineno=252, col_offset=28), Name('Charset', Load(), lineno=252, col_offset=37)], [], None, None, lineno=252, col_offset=17), lineno=252, col_offset=13), [Assign([Name('charset', Store(), lineno=253, col_offset=12)], Call(Name('Charset', Load(), lineno=253, col_offset=22), [Name('charset', Load(), lineno=253, col_offset=30)], [], None, None, lineno=253, col_offset=22), lineno=253, col_offset=12)], [], lineno=252, col_offset=13)], lineno=250, col_offset=8), If(Compare(Name('charset', Load(), lineno=255, col_offset=11), [NotEq()], [Str('8bit', lineno=255, col_offset=22)], lineno=255, col_offset=11), [If(Call(Name('isinstance', Load(), lineno=259, col_offset=15), [Name('s', Load(), lineno=259, col_offset=26), Name('str', Load(), lineno=259, col_offset=29)], [], None, None, lineno=259, col_offset=15), [Assign([Name('incodec', Store(), lineno=262, col_offset=16)], BoolOp(Or(), [Attribute(Name('charset', Load(), lineno=262, col_offset=26), 'input_codec', Load(), lineno=262, col_offset=26), Str('us-ascii', lineno=262, col_offset=49)], lineno=262, col_offset=26), lineno=262, col_offset=16), Assign([Name('ustr', Store(), lineno=263, col_offset=16)], Call(Name('unicode', Load(), lineno=263, col_offset=23), [Name('s', Load(), lineno=263, col_offset=31), Name('incodec', Load(), lineno=263, col_offset=34), Name('errors', Load(), lineno=263, col_offset=43)], [], None, None, lineno=263, col_offset=23), lineno=263, col_offset=16), Assign([Name('outcodec', Store(), lineno=267, col_offset=16)], BoolOp(Or(), [Attribute(Name('charset', Load(), lineno=267, col_offset=27), 'output_codec', Load(), lineno=267, col_offset=27), Str('us-ascii', lineno=267, col_offset=51)], lineno=267, col_offset=27), lineno=267, col_offset=16), Expr(Call(Attribute(Name('ustr', Load(), lineno=268, col_offset=16), 'encode', Load(), lineno=268, col_offset=16), [Name('outcodec', Load(), lineno=268, col_offset=28), Name('errors', Load(), lineno=268, col_offset=38)], [], None, None, lineno=268, col_offset=16), lineno=268, col_offset=16)], [If(Call(Name('isinstance', Load(), lineno=269, col_offset=17), [Name('s', Load(), lineno=269, col_offset=28), Name('unicode', Load(), lineno=269, col_offset=31)], [], None, None, lineno=269, col_offset=17), [For(Name('charset', Store(), lineno=273, col_offset=20), Tuple([Name('USASCII', Load(), lineno=273, col_offset=31), Name('charset', Load(), lineno=273, col_offset=40), Name('UTF8', Load(), lineno=273, col_offset=49)], Load(), lineno=273, col_offset=31), [TryExcept([Assign([Name('outcodec', Store(), lineno=275, col_offset=24)], BoolOp(Or(), [Attribute(Name('charset', Load(), lineno=275, col_offset=35), 'output_codec', Load(), lineno=275, col_offset=35), Str('us-ascii', lineno=275, col_offset=59)], lineno=275, col_offset=35), lineno=275, col_offset=24), Assign([Name('s', Store(), lineno=276, col_offset=24)], Call(Attribute(Name('s', Load(), lineno=276, col_offset=28), 'encode', Load(), lineno=276, col_offset=28), [Name('outcodec', Load(), lineno=276, col_offset=37), Name('errors', Load(), lineno=276, col_offset=47)], [], None, None, lineno=276, col_offset=28), lineno=276, col_offset=24), Break( lineno=277, col_offset=24)], [ExceptHandler(Name('UnicodeError', Load(), lineno=278, col_offset=27), None, [Pass( lineno=279, col_offset=24)], lineno=278, col_offset=20)], [], lineno=274, col_offset=20)], [Assert(Name('False', Load(), lineno=281, col_offset=27), Str('utf-8 conversion failed', lineno=281, col_offset=34), lineno=281, col_offset=20)], lineno=273, col_offset=16)], [], lineno=269, col_offset=17)], lineno=259, col_offset=12)], [], lineno=255, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=282, col_offset=8), '_chunks', Load(), lineno=282, col_offset=8), 'append', Load(), lineno=282, col_offset=8), [Tuple([Name('s', Load(), lineno=282, col_offset=29), Name('charset', Load(), lineno=282, col_offset=32)], Load(), lineno=282, col_offset=29)], [], None, None, lineno=282, col_offset=8), lineno=282, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('_split', arguments([Name('self', Param(), lineno=284, col_offset=15), Name('s', Param(), lineno=284, col_offset=21), Name('charset', Param(), lineno=284, col_offset=24), Name('maxlinelen', Param(), lineno=284, col_offset=33), Name('splitchars', Param(), lineno=284, col_offset=45)], None, None, []), [Assign([Name('splittable', Store(), lineno=286, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=286, col_offset=21), 'to_splittable', Load(), lineno=286, col_offset=21), [Name('s', Load(), lineno=286, col_offset=43)], [], None, None, lineno=286, col_offset=21), lineno=286, col_offset=8), Assign([Name('encoded', Store(), lineno=287, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=287, col_offset=18), 'from_splittable', Load(), lineno=287, col_offset=18), [Name('splittable', Load(), lineno=287, col_offset=42), Name('True', Load(), lineno=287, col_offset=54)], [], None, None, lineno=287, col_offset=18), lineno=287, col_offset=8), Assign([Name('elen', Store(), lineno=288, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=288, col_offset=15), 'encoded_header_len', Load(), lineno=288, col_offset=15), [Name('encoded', Load(), lineno=288, col_offset=42)], [], None, None, lineno=288, col_offset=15), lineno=288, col_offset=8), If(Compare(Name('elen', Load(), lineno=290, col_offset=11), [LtE()], [Name('maxlinelen', Load(), lineno=290, col_offset=19)], lineno=290, col_offset=11), [Return(List([Tuple([Name('encoded', Load(), lineno=291, col_offset=21), Name('charset', Load(), lineno=291, col_offset=30)], Load(), lineno=291, col_offset=21)], Load(), lineno=291, col_offset=19), lineno=291, col_offset=12)], [], lineno=290, col_offset=8), If(Compare(Name('charset', Load(), lineno=298, col_offset=11), [Eq()], [Str('8bit', lineno=298, col_offset=22)], lineno=298, col_offset=11), [Return(List([Tuple([Name('s', Load(), lineno=299, col_offset=21), Name('charset', Load(), lineno=299, col_offset=24)], Load(), lineno=299, col_offset=21)], Load(), lineno=299, col_offset=19), lineno=299, col_offset=12)], [If(Compare(Name('charset', Load(), lineno=311, col_offset=13), [Eq()], [Str('us-ascii', lineno=311, col_offset=24)], lineno=311, col_offset=13), [Return(Call(Attribute(Name('self', Load(), lineno=312, col_offset=19), '_split_ascii', Load(), lineno=312, col_offset=19), [Name('s', Load(), lineno=312, col_offset=37), Name('charset', Load(), lineno=312, col_offset=40), Name('maxlinelen', Load(), lineno=312, col_offset=49), Name('splitchars', Load(), lineno=312, col_offset=61)], [], None, None, lineno=312, col_offset=19), lineno=312, col_offset=12)], [If(Compare(Name('elen', Load(), lineno=314, col_offset=13), [Eq()], [Call(Name('len', Load(), lineno=314, col_offset=21), [Name('s', Load(), lineno=314, col_offset=25)], [], None, None, lineno=314, col_offset=21)], lineno=314, col_offset=13), [Assign([Name('splitpnt', Store(), lineno=317, col_offset=12)], Name('maxlinelen', Load(), lineno=317, col_offset=23), lineno=317, col_offset=12), Assign([Name('first', Store(), lineno=318, col_offset=12)], Call(Attribute(Name('charset', Load(), lineno=318, col_offset=20), 'from_splittable', Load(), lineno=318, col_offset=20), [Subscript(Name('splittable', Load(), lineno=318, col_offset=44), Slice(None, Name('splitpnt', Load(), lineno=318, col_offset=56), None), Load(), lineno=318, col_offset=44), Name('False', Load(), lineno=318, col_offset=67)], [], None, None, lineno=318, col_offset=20), lineno=318, col_offset=12), Assign([Name('last', Store(), lineno=319, col_offset=12)], Call(Attribute(Name('charset', Load(), lineno=319, col_offset=19), 'from_splittable', Load(), lineno=319, col_offset=19), [Subscript(Name('splittable', Load(), lineno=319, col_offset=43), Slice(Name('splitpnt', Load(), lineno=319, col_offset=54), None, None), Load(), lineno=319, col_offset=43), Name('False', Load(), lineno=319, col_offset=66)], [], None, None, lineno=319, col_offset=19), lineno=319, col_offset=12)], [Assign([Tuple([Name('first', Store(), lineno=322, col_offset=12), Name('last', Store(), lineno=322, col_offset=19)], Store(), lineno=322, col_offset=12)], Call(Name('_binsplit', Load(), lineno=322, col_offset=26), [Name('splittable', Load(), lineno=322, col_offset=36), Name('charset', Load(), lineno=322, col_offset=48), Name('maxlinelen', Load(), lineno=322, col_offset=57)], [], None, None, lineno=322, col_offset=26), lineno=322, col_offset=12)], lineno=314, col_offset=13)], lineno=311, col_offset=13)], lineno=298, col_offset=8), Assign([Name('fsplittable', Store(), lineno=325, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=325, col_offset=22), 'to_splittable', Load(), lineno=325, col_offset=22), [Name('first', Load(), lineno=325, col_offset=44)], [], None, None, lineno=325, col_offset=22), lineno=325, col_offset=8), Assign([Name('fencoded', Store(), lineno=326, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=326, col_offset=19), 'from_splittable', Load(), lineno=326, col_offset=19), [Name('fsplittable', Load(), lineno=326, col_offset=43), Name('True', Load(), lineno=326, col_offset=56)], [], None, None, lineno=326, col_offset=19), lineno=326, col_offset=8), Assign([Name('chunk', Store(), lineno=327, col_offset=8)], List([Tuple([Name('fencoded', Load(), lineno=327, col_offset=18), Name('charset', Load(), lineno=327, col_offset=28)], Load(), lineno=327, col_offset=18)], Load(), lineno=327, col_offset=16), lineno=327, col_offset=8), Return(BinOp(Name('chunk', Load(), lineno=328, col_offset=15), Add(), Call(Attribute(Name('self', Load(), lineno=328, col_offset=23), '_split', Load(), lineno=328, col_offset=23), [Name('last', Load(), lineno=328, col_offset=35), Name('charset', Load(), lineno=328, col_offset=41), Attribute(Name('self', Load(), lineno=328, col_offset=50), '_maxlinelen', Load(), lineno=328, col_offset=50), Name('splitchars', Load(), lineno=328, col_offset=68)], [], None, None, lineno=328, col_offset=23), lineno=328, col_offset=15), lineno=328, col_offset=8)], [], lineno=284, col_offset=4), FunctionDef('_split_ascii', arguments([Name('self', Param(), lineno=330, col_offset=21), Name('s', Param(), lineno=330, col_offset=27), Name('charset', Param(), lineno=330, col_offset=30), Name('firstlen', Param(), lineno=330, col_offset=39), Name('splitchars', Param(), lineno=330, col_offset=49)], None, None, []), [Assign([Name('chunks', Store(), lineno=331, col_offset=8)], Call(Name('_split_ascii', Load(), lineno=331, col_offset=17), [Name('s', Load(), lineno=331, col_offset=30), Name('firstlen', Load(), lineno=331, col_offset=33), Attribute(Name('self', Load(), lineno=331, col_offset=43), '_maxlinelen', Load(), lineno=331, col_offset=43), Attribute(Name('self', Load(), lineno=332, col_offset=30), '_continuation_ws', Load(), lineno=332, col_offset=30), Name('splitchars', Load(), lineno=332, col_offset=53)], [], None, None, lineno=331, col_offset=17), lineno=331, col_offset=8), Return(Call(Name('zip', Load(), lineno=333, col_offset=15), [Name('chunks', Load(), lineno=333, col_offset=19), BinOp(List([Name('charset', Load(), lineno=333, col_offset=28)], Load(), lineno=333, col_offset=27), Mult(), Call(Name('len', Load(), lineno=333, col_offset=37), [Name('chunks', Load(), lineno=333, col_offset=41)], [], None, None, lineno=333, col_offset=37), lineno=333, col_offset=27)], [], None, None, lineno=333, col_offset=15), lineno=333, col_offset=8)], [], lineno=330, col_offset=4), FunctionDef('_encode_chunks', arguments([Name('self', Param(), lineno=335, col_offset=23), Name('newchunks', Param(), lineno=335, col_offset=29), Name('maxlinelen', Param(), lineno=335, col_offset=40)], None, None, []), [Assign([Name('chunks', Store(), lineno=353, col_offset=8)], List([], Load(), lineno=353, col_offset=17), lineno=353, col_offset=8), For(Tuple([Name('header', Store(), lineno=354, col_offset=12), Name('charset', Store(), lineno=354, col_offset=20)], Store(), lineno=354, col_offset=12), Name('newchunks', Load(), lineno=354, col_offset=31), [If(UnaryOp(Not(), Name('header', Load(), lineno=355, col_offset=19), lineno=355, col_offset=15), [Continue( lineno=356, col_offset=16)], [], lineno=355, col_offset=12), If(BoolOp(Or(), [Compare(Name('charset', Load(), lineno=357, col_offset=15), [Is()], [Name('None', Load(), lineno=357, col_offset=26)], lineno=357, col_offset=15), Compare(Attribute(Name('charset', Load(), lineno=357, col_offset=34), 'header_encoding', Load(), lineno=357, col_offset=34), [Is()], [Name('None', Load(), lineno=357, col_offset=61)], lineno=357, col_offset=34)], lineno=357, col_offset=15), [Assign([Name('s', Store(), lineno=358, col_offset=16)], Name('header', Load(), lineno=358, col_offset=20), lineno=358, col_offset=16)], [Assign([Name('s', Store(), lineno=360, col_offset=16)], Call(Attribute(Name('charset', Load(), lineno=360, col_offset=20), 'header_encode', Load(), lineno=360, col_offset=20), [Name('header', Load(), lineno=360, col_offset=42)], [], None, None, lineno=360, col_offset=20), lineno=360, col_offset=16)], lineno=357, col_offset=12), If(BoolOp(And(), [Name('chunks', Load(), lineno=362, col_offset=15), Call(Attribute(Subscript(Name('chunks', Load(), lineno=362, col_offset=26), Index(Num(-1, lineno=362, col_offset=34)), Load(), lineno=362, col_offset=26), 'endswith', Load(), lineno=362, col_offset=26), [Str(' ', lineno=362, col_offset=46)], [], None, None, lineno=362, col_offset=26)], lineno=362, col_offset=15), [Assign([Name('extra', Store(), lineno=363, col_offset=16)], Str('', lineno=363, col_offset=24), lineno=363, col_offset=16)], [Assign([Name('extra', Store(), lineno=365, col_offset=16)], Str(' ', lineno=365, col_offset=24), lineno=365, col_offset=16)], lineno=362, col_offset=12), Expr(Call(Name('_max_append', Load(), lineno=366, col_offset=12), [Name('chunks', Load(), lineno=366, col_offset=24), Name('s', Load(), lineno=366, col_offset=32), Name('maxlinelen', Load(), lineno=366, col_offset=35), Name('extra', Load(), lineno=366, col_offset=47)], [], None, None, lineno=366, col_offset=12), lineno=366, col_offset=12)], [], lineno=354, col_offset=8), Assign([Name('joiner', Store(), lineno=367, col_offset=8)], BinOp(Name('NL', Load(), lineno=367, col_offset=17), Add(), Attribute(Name('self', Load(), lineno=367, col_offset=22), '_continuation_ws', Load(), lineno=367, col_offset=22), lineno=367, col_offset=17), lineno=367, col_offset=8), Return(Call(Attribute(Name('joiner', Load(), lineno=368, col_offset=15), 'join', Load(), lineno=368, col_offset=15), [Name('chunks', Load(), lineno=368, col_offset=27)], [], None, None, lineno=368, col_offset=15), lineno=368, col_offset=8)], [], lineno=335, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=370, col_offset=15), Name('splitchars', Param(), lineno=370, col_offset=21)], None, None, [Str(';, ', lineno=370, col_offset=32)]), [Expr(Str("Encode a message header into an RFC-compliant format.\n\n        There are many issues involved in converting a given string for use in\n        an email header.  Only certain character sets are readable in most\n        email clients, and as header strings can only contain a subset of\n        7-bit ASCII, care must be taken to properly convert and encode (with\n        Base64 or quoted-printable) header strings.  In addition, there is a\n        75-character length limit on any given encoded header field, so\n        line-wrapping must be performed, even with double-byte character sets.\n\n        This method will do its best to convert the string to the correct\n        character set used in email, and encode and line wrap it safely with\n        the appropriate scheme for that character set.\n\n        If the given charset is not known or an error occurs during\n        conversion, this function will return the header untouched.\n\n        Optional splitchars is a string containing characters to split long\n        ASCII lines on, in rough support of RFC 2822's `highest level\n        syntactic breaks'.  This doesn't affect RFC 2047 encoded lines.\n        ", lineno=391, col_offset=-1), lineno=391, col_offset=-1), Assign([Name('newchunks', Store(), lineno=392, col_offset=8)], List([], Load(), lineno=392, col_offset=20), lineno=392, col_offset=8), Assign([Name('maxlinelen', Store(), lineno=393, col_offset=8)], Attribute(Name('self', Load(), lineno=393, col_offset=21), '_firstlinelen', Load(), lineno=393, col_offset=21), lineno=393, col_offset=8), Assign([Name('lastlen', Store(), lineno=394, col_offset=8)], Num(0, lineno=394, col_offset=18), lineno=394, col_offset=8), For(Tuple([Name('s', Store(), lineno=395, col_offset=12), Name('charset', Store(), lineno=395, col_offset=15)], Store(), lineno=395, col_offset=12), Attribute(Name('self', Load(), lineno=395, col_offset=26), '_chunks', Load(), lineno=395, col_offset=26), [Assign([Name('targetlen', Store(), lineno=399, col_offset=12)], BinOp(BinOp(Name('maxlinelen', Load(), lineno=399, col_offset=24), Sub(), Name('lastlen', Load(), lineno=399, col_offset=37), lineno=399, col_offset=24), Sub(), Num(1, lineno=399, col_offset=47), lineno=399, col_offset=45), lineno=399, col_offset=12), If(Compare(Name('targetlen', Load(), lineno=400, col_offset=15), [Lt()], [Call(Attribute(Name('charset', Load(), lineno=400, col_offset=27), 'encoded_header_len', Load(), lineno=400, col_offset=27), [Str('', lineno=400, col_offset=54)], [], None, None, lineno=400, col_offset=27)], lineno=400, col_offset=15), [Assign([Name('targetlen', Store(), lineno=402, col_offset=16)], Name('maxlinelen', Load(), lineno=402, col_offset=28), lineno=402, col_offset=16)], [], lineno=400, col_offset=12), AugAssign(Name('newchunks', Store(), lineno=403, col_offset=12), Add(), Call(Attribute(Name('self', Load(), lineno=403, col_offset=25), '_split', Load(), lineno=403, col_offset=25), [Name('s', Load(), lineno=403, col_offset=37), Name('charset', Load(), lineno=403, col_offset=40), Name('targetlen', Load(), lineno=403, col_offset=49), Name('splitchars', Load(), lineno=403, col_offset=60)], [], None, None, lineno=403, col_offset=25), lineno=403, col_offset=12), Assign([Tuple([Name('lastchunk', Store(), lineno=404, col_offset=12), Name('lastcharset', Store(), lineno=404, col_offset=23)], Store(), lineno=404, col_offset=12)], Subscript(Name('newchunks', Load(), lineno=404, col_offset=37), Index(Num(-1, lineno=404, col_offset=48)), Load(), lineno=404, col_offset=37), lineno=404, col_offset=12), Assign([Name('lastlen', Store(), lineno=405, col_offset=12)], Call(Attribute(Name('lastcharset', Load(), lineno=405, col_offset=22), 'encoded_header_len', Load(), lineno=405, col_offset=22), [Name('lastchunk', Load(), lineno=405, col_offset=53)], [], None, None, lineno=405, col_offset=22), lineno=405, col_offset=12)], [], lineno=395, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=406, col_offset=15), '_encode_chunks', Load(), lineno=406, col_offset=15), [Name('newchunks', Load(), lineno=406, col_offset=35), Name('maxlinelen', Load(), lineno=406, col_offset=46)], [], None, None, lineno=406, col_offset=15), lineno=406, col_offset=8)], [], lineno=370, col_offset=4)], [], lineno=140, col_offset=0), FunctionDef('_split_ascii', arguments([Name('s', Param(), lineno=410, col_offset=17), Name('firstlen', Param(), lineno=410, col_offset=20), Name('restlen', Param(), lineno=410, col_offset=30), Name('continuation_ws', Param(), lineno=410, col_offset=39), Name('splitchars', Param(), lineno=410, col_offset=56)], None, None, []), [Assign([Name('lines', Store(), lineno=411, col_offset=4)], List([], Load(), lineno=411, col_offset=12), lineno=411, col_offset=4), Assign([Name('maxlen', Store(), lineno=412, col_offset=4)], Name('firstlen', Load(), lineno=412, col_offset=13), lineno=412, col_offset=4), For(Name('line', Store(), lineno=413, col_offset=8), Call(Attribute(Name('s', Load(), lineno=413, col_offset=16), 'splitlines', Load(), lineno=413, col_offset=16), [], [], None, None, lineno=413, col_offset=16), [Assign([Name('line', Store(), lineno=416, col_offset=8)], Call(Attribute(Name('line', Load(), lineno=416, col_offset=15), 'lstrip', Load(), lineno=416, col_offset=15), [], [], None, None, lineno=416, col_offset=15), lineno=416, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=417, col_offset=11), [Name('line', Load(), lineno=417, col_offset=15)], [], None, None, lineno=417, col_offset=11), [Lt()], [Name('maxlen', Load(), lineno=417, col_offset=23)], lineno=417, col_offset=11), [Expr(Call(Attribute(Name('lines', Load(), lineno=418, col_offset=12), 'append', Load(), lineno=418, col_offset=12), [Name('line', Load(), lineno=418, col_offset=25)], [], None, None, lineno=418, col_offset=12), lineno=418, col_offset=12), Assign([Name('maxlen', Store(), lineno=419, col_offset=12)], Name('restlen', Load(), lineno=419, col_offset=21), lineno=419, col_offset=12), Continue( lineno=420, col_offset=12)], [], lineno=417, col_offset=8), For(Name('ch', Store(), lineno=425, col_offset=12), Name('splitchars', Load(), lineno=425, col_offset=18), [If(Compare(Name('ch', Load(), lineno=426, col_offset=15), [In()], [Name('line', Load(), lineno=426, col_offset=21)], lineno=426, col_offset=15), [Break( lineno=427, col_offset=16)], [], lineno=426, col_offset=12)], [Expr(Call(Attribute(Name('lines', Load(), lineno=431, col_offset=12), 'append', Load(), lineno=431, col_offset=12), [Name('line', Load(), lineno=431, col_offset=25)], [], None, None, lineno=431, col_offset=12), lineno=431, col_offset=12), Assign([Name('maxlen', Store(), lineno=432, col_offset=12)], Name('restlen', Load(), lineno=432, col_offset=21), lineno=432, col_offset=12), Continue( lineno=433, col_offset=12)], lineno=425, col_offset=8), Assign([Name('cre', Store(), lineno=435, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=435, col_offset=14), 'compile', Load(), lineno=435, col_offset=14), [BinOp(Str('%s\\s*', lineno=435, col_offset=25), Mod(), Name('ch', Load(), lineno=435, col_offset=36), lineno=435, col_offset=25)], [], None, None, lineno=435, col_offset=14), lineno=435, col_offset=8), If(Compare(Name('ch', Load(), lineno=436, col_offset=11), [In()], [Str(';,', lineno=436, col_offset=17)], lineno=436, col_offset=11), [Assign([Name('eol', Store(), lineno=437, col_offset=12)], Name('ch', Load(), lineno=437, col_offset=18), lineno=437, col_offset=12)], [Assign([Name('eol', Store(), lineno=439, col_offset=12)], Str('', lineno=439, col_offset=18), lineno=439, col_offset=12)], lineno=436, col_offset=8), Assign([Name('joiner', Store(), lineno=440, col_offset=8)], BinOp(Name('eol', Load(), lineno=440, col_offset=17), Add(), Str(' ', lineno=440, col_offset=23), lineno=440, col_offset=17), lineno=440, col_offset=8), Assign([Name('joinlen', Store(), lineno=441, col_offset=8)], Call(Name('len', Load(), lineno=441, col_offset=18), [Name('joiner', Load(), lineno=441, col_offset=22)], [], None, None, lineno=441, col_offset=18), lineno=441, col_offset=8), Assign([Name('wslen', Store(), lineno=442, col_offset=8)], Call(Name('len', Load(), lineno=442, col_offset=16), [Call(Attribute(Name('continuation_ws', Load(), lineno=442, col_offset=20), 'replace', Load(), lineno=442, col_offset=20), [Str('\t', lineno=442, col_offset=44), Name('SPACE8', Load(), lineno=442, col_offset=50)], [], None, None, lineno=442, col_offset=20)], [], None, None, lineno=442, col_offset=16), lineno=442, col_offset=8), Assign([Name('this', Store(), lineno=443, col_offset=8)], List([], Load(), lineno=443, col_offset=15), lineno=443, col_offset=8), Assign([Name('linelen', Store(), lineno=444, col_offset=8)], Num(0, lineno=444, col_offset=18), lineno=444, col_offset=8), For(Name('part', Store(), lineno=445, col_offset=12), Call(Attribute(Name('cre', Load(), lineno=445, col_offset=20), 'split', Load(), lineno=445, col_offset=20), [Name('line', Load(), lineno=445, col_offset=30)], [], None, None, lineno=445, col_offset=20), [Assign([Name('curlen', Store(), lineno=446, col_offset=12)], BinOp(Name('linelen', Load(), lineno=446, col_offset=21), Add(), BinOp(Call(Name('max', Load(), lineno=446, col_offset=31), [Num(0, lineno=446, col_offset=35), BinOp(Call(Name('len', Load(), lineno=446, col_offset=38), [Name('this', Load(), lineno=446, col_offset=42)], [], None, None, lineno=446, col_offset=38), Sub(), Num(1, lineno=446, col_offset=48), lineno=446, col_offset=38)], [], None, None, lineno=446, col_offset=31), Mult(), Name('joinlen', Load(), lineno=446, col_offset=53), lineno=446, col_offset=31), lineno=446, col_offset=21), lineno=446, col_offset=12), Assign([Name('partlen', Store(), lineno=447, col_offset=12)], Call(Name('len', Load(), lineno=447, col_offset=22), [Name('part', Load(), lineno=447, col_offset=26)], [], None, None, lineno=447, col_offset=22), lineno=447, col_offset=12), Assign([Name('onfirstline', Store(), lineno=448, col_offset=12)], UnaryOp(Not(), Name('lines', Load(), lineno=448, col_offset=30), lineno=448, col_offset=26), lineno=448, col_offset=12), If(BoolOp(And(), [Compare(Name('ch', Load(), lineno=451, col_offset=15), [Eq()], [Str(' ', lineno=451, col_offset=21)], lineno=451, col_offset=15), Name('onfirstline', Load(), lineno=451, col_offset=29), Compare(Call(Name('len', Load(), lineno=452, col_offset=19), [Name('this', Load(), lineno=452, col_offset=23)], [], None, None, lineno=452, col_offset=19), [Eq()], [Num(1, lineno=452, col_offset=32)], lineno=452, col_offset=19), Call(Attribute(Name('fcre', Load(), lineno=452, col_offset=38), 'match', Load(), lineno=452, col_offset=38), [Subscript(Name('this', Load(), lineno=452, col_offset=49), Index(Num(0, lineno=452, col_offset=54)), Load(), lineno=452, col_offset=49)], [], None, None, lineno=452, col_offset=38)], lineno=451, col_offset=15), [Expr(Call(Attribute(Name('this', Load(), lineno=453, col_offset=16), 'append', Load(), lineno=453, col_offset=16), [Name('part', Load(), lineno=453, col_offset=28)], [], None, None, lineno=453, col_offset=16), lineno=453, col_offset=16), AugAssign(Name('linelen', Store(), lineno=454, col_offset=16), Add(), Name('partlen', Load(), lineno=454, col_offset=27), lineno=454, col_offset=16)], [If(Compare(BinOp(Name('curlen', Load(), lineno=455, col_offset=17), Add(), Name('partlen', Load(), lineno=455, col_offset=26), lineno=455, col_offset=17), [Gt()], [Name('maxlen', Load(), lineno=455, col_offset=36)], lineno=455, col_offset=17), [If(Name('this', Load(), lineno=456, col_offset=19), [Expr(Call(Attribute(Name('lines', Load(), lineno=457, col_offset=20), 'append', Load(), lineno=457, col_offset=20), [BinOp(Call(Attribute(Name('joiner', Load(), lineno=457, col_offset=33), 'join', Load(), lineno=457, col_offset=33), [Name('this', Load(), lineno=457, col_offset=45)], [], None, None, lineno=457, col_offset=33), Add(), Name('eol', Load(), lineno=457, col_offset=53), lineno=457, col_offset=33)], [], None, None, lineno=457, col_offset=20), lineno=457, col_offset=20)], [], lineno=456, col_offset=16), If(BoolOp(And(), [Compare(Name('partlen', Load(), lineno=461, col_offset=19), [Gt()], [Name('maxlen', Load(), lineno=461, col_offset=29)], lineno=461, col_offset=19), Compare(Name('ch', Load(), lineno=461, col_offset=40), [NotEq()], [Str(' ', lineno=461, col_offset=46)], lineno=461, col_offset=40)], lineno=461, col_offset=19), [Assign([Name('subl', Store(), lineno=462, col_offset=20)], Call(Name('_split_ascii', Load(), lineno=462, col_offset=27), [Name('part', Load(), lineno=462, col_offset=40), Name('maxlen', Load(), lineno=462, col_offset=46), Name('restlen', Load(), lineno=462, col_offset=54), Name('continuation_ws', Load(), lineno=463, col_offset=40), Str(' ', lineno=463, col_offset=57)], [], None, None, lineno=462, col_offset=27), lineno=462, col_offset=20), Expr(Call(Attribute(Name('lines', Load(), lineno=464, col_offset=20), 'extend', Load(), lineno=464, col_offset=20), [Subscript(Name('subl', Load(), lineno=464, col_offset=33), Slice(None, Num(-1, lineno=464, col_offset=40), None), Load(), lineno=464, col_offset=33)], [], None, None, lineno=464, col_offset=20), lineno=464, col_offset=20), Assign([Name('this', Store(), lineno=465, col_offset=20)], List([Subscript(Name('subl', Load(), lineno=465, col_offset=28), Index(Num(-1, lineno=465, col_offset=34)), Load(), lineno=465, col_offset=28)], Load(), lineno=465, col_offset=27), lineno=465, col_offset=20)], [Assign([Name('this', Store(), lineno=467, col_offset=20)], List([Name('part', Load(), lineno=467, col_offset=28)], Load(), lineno=467, col_offset=27), lineno=467, col_offset=20)], lineno=461, col_offset=16), Assign([Name('linelen', Store(), lineno=468, col_offset=16)], BinOp(Name('wslen', Load(), lineno=468, col_offset=26), Add(), Call(Name('len', Load(), lineno=468, col_offset=34), [Subscript(Name('this', Load(), lineno=468, col_offset=38), Index(Num(-1, lineno=468, col_offset=44)), Load(), lineno=468, col_offset=38)], [], None, None, lineno=468, col_offset=34), lineno=468, col_offset=26), lineno=468, col_offset=16), Assign([Name('maxlen', Store(), lineno=469, col_offset=16)], Name('restlen', Load(), lineno=469, col_offset=25), lineno=469, col_offset=16)], [Expr(Call(Attribute(Name('this', Load(), lineno=471, col_offset=16), 'append', Load(), lineno=471, col_offset=16), [Name('part', Load(), lineno=471, col_offset=28)], [], None, None, lineno=471, col_offset=16), lineno=471, col_offset=16), AugAssign(Name('linelen', Store(), lineno=472, col_offset=16), Add(), Name('partlen', Load(), lineno=472, col_offset=27), lineno=472, col_offset=16)], lineno=455, col_offset=17)], lineno=451, col_offset=12)], [], lineno=445, col_offset=8), If(Name('this', Load(), lineno=474, col_offset=11), [Expr(Call(Attribute(Name('lines', Load(), lineno=475, col_offset=12), 'append', Load(), lineno=475, col_offset=12), [Call(Attribute(Name('joiner', Load(), lineno=475, col_offset=25), 'join', Load(), lineno=475, col_offset=25), [Name('this', Load(), lineno=475, col_offset=37)], [], None, None, lineno=475, col_offset=25)], [], None, None, lineno=475, col_offset=12), lineno=475, col_offset=12)], [], lineno=474, col_offset=8)], [], lineno=413, col_offset=4), Return(Name('lines', Load(), lineno=476, col_offset=11), lineno=476, col_offset=4)], [], lineno=410, col_offset=0), FunctionDef('_binsplit', arguments([Name('splittable', Param(), lineno=480, col_offset=14), Name('charset', Param(), lineno=480, col_offset=26), Name('maxlinelen', Param(), lineno=480, col_offset=35)], None, None, []), [Assign([Name('i', Store(), lineno=481, col_offset=4)], Num(0, lineno=481, col_offset=8), lineno=481, col_offset=4), Assign([Name('j', Store(), lineno=482, col_offset=4)], Call(Name('len', Load(), lineno=482, col_offset=8), [Name('splittable', Load(), lineno=482, col_offset=12)], [], None, None, lineno=482, col_offset=8), lineno=482, col_offset=4), While(Compare(Name('i', Load(), lineno=483, col_offset=10), [Lt()], [Name('j', Load(), lineno=483, col_offset=14)], lineno=483, col_offset=10), [Assign([Name('m', Store(), lineno=492, col_offset=8)], BinOp(BinOp(BinOp(Name('i', Load(), lineno=492, col_offset=13), Add(), Name('j', Load(), lineno=492, col_offset=15), lineno=492, col_offset=13), Add(), Num(1, lineno=492, col_offset=17), lineno=492, col_offset=16), RShift(), Num(1, lineno=492, col_offset=23), lineno=492, col_offset=12), lineno=492, col_offset=8), Assign([Name('chunk', Store(), lineno=493, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=493, col_offset=16), 'from_splittable', Load(), lineno=493, col_offset=16), [Subscript(Name('splittable', Load(), lineno=493, col_offset=40), Slice(None, Name('m', Load(), lineno=493, col_offset=52), None), Load(), lineno=493, col_offset=40), Name('True', Load(), lineno=493, col_offset=56)], [], None, None, lineno=493, col_offset=16), lineno=493, col_offset=8), Assign([Name('chunklen', Store(), lineno=494, col_offset=8)], Call(Attribute(Name('charset', Load(), lineno=494, col_offset=19), 'encoded_header_len', Load(), lineno=494, col_offset=19), [Name('chunk', Load(), lineno=494, col_offset=46)], [], None, None, lineno=494, col_offset=19), lineno=494, col_offset=8), If(Compare(Name('chunklen', Load(), lineno=495, col_offset=11), [LtE()], [Name('maxlinelen', Load(), lineno=495, col_offset=23)], lineno=495, col_offset=11), [Assign([Name('i', Store(), lineno=497, col_offset=12)], Name('m', Load(), lineno=497, col_offset=16), lineno=497, col_offset=12)], [Assign([Name('j', Store(), lineno=500, col_offset=12)], BinOp(Name('m', Load(), lineno=500, col_offset=16), Sub(), Num(1, lineno=500, col_offset=20), lineno=500, col_offset=16), lineno=500, col_offset=12)], lineno=495, col_offset=8)], [], lineno=483, col_offset=4), Assign([Name('first', Store(), lineno=504, col_offset=4)], Call(Attribute(Name('charset', Load(), lineno=504, col_offset=12), 'from_splittable', Load(), lineno=504, col_offset=12), [Subscript(Name('splittable', Load(), lineno=504, col_offset=36), Slice(None, Name('i', Load(), lineno=504, col_offset=48), None), Load(), lineno=504, col_offset=36), Name('False', Load(), lineno=504, col_offset=52)], [], None, None, lineno=504, col_offset=12), lineno=504, col_offset=4), Assign([Name('last', Store(), lineno=505, col_offset=4)], Call(Attribute(Name('charset', Load(), lineno=505, col_offset=12), 'from_splittable', Load(), lineno=505, col_offset=12), [Subscript(Name('splittable', Load(), lineno=505, col_offset=36), Slice(Name('i', Load(), lineno=505, col_offset=47), None, None), Load(), lineno=505, col_offset=36), Name('False', Load(), lineno=505, col_offset=52)], [], None, None, lineno=505, col_offset=12), lineno=505, col_offset=4), Return(Tuple([Name('first', Load(), lineno=506, col_offset=11), Name('last', Load(), lineno=506, col_offset=18)], Load(), lineno=506, col_offset=11), lineno=506, col_offset=4)], [], lineno=480, col_offset=0)])
