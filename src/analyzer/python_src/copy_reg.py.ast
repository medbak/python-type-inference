Module([Expr(Str('Helper to provide extensibility for pickle/cPickle.\n\nThis is only useful to add pickle support for extension types defined in\nC, not for instances of user-defined classes.\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), ImportFrom('types', [alias('ClassType', '_ClassType')], 0, lineno=7, col_offset=0), Assign([Name('__all__', Store(), lineno=9, col_offset=0)], List([Str('pickle', lineno=9, col_offset=11), Str('constructor', lineno=9, col_offset=21), Str('add_extension', lineno=10, col_offset=11), Str('remove_extension', lineno=10, col_offset=28), Str('clear_extension_cache', lineno=10, col_offset=48)], Load(), lineno=9, col_offset=10), lineno=9, col_offset=0), Assign([Name('dispatch_table', Store(), lineno=12, col_offset=0)], Dict([], [], lineno=12, col_offset=17), lineno=12, col_offset=0), FunctionDef('pickle', arguments([Name('ob_type', Param(), lineno=14, col_offset=11), Name('pickle_function', Param(), lineno=14, col_offset=20), Name('constructor_ob', Param(), lineno=14, col_offset=37)], None, None, [Name('None', Load(), lineno=14, col_offset=52)]), [If(Compare(Call(Name('type', Load(), lineno=15, col_offset=7), [Name('ob_type', Load(), lineno=15, col_offset=12)], [], None, None, lineno=15, col_offset=7), [Is()], [Name('_ClassType', Load(), lineno=15, col_offset=24)], lineno=15, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=16, col_offset=14), [Str('copy_reg is not intended for use with classes', lineno=16, col_offset=24)], [], None, None, lineno=16, col_offset=14), None, None, lineno=16, col_offset=8)], [], lineno=15, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=18, col_offset=11), [Name('pickle_function', Load(), lineno=18, col_offset=19), Str('__call__', lineno=18, col_offset=36)], [], None, None, lineno=18, col_offset=11), lineno=18, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=19, col_offset=14), [Str('reduction functions must be callable', lineno=19, col_offset=24)], [], None, None, lineno=19, col_offset=14), None, None, lineno=19, col_offset=8)], [], lineno=18, col_offset=4), Assign([Subscript(Name('dispatch_table', Load(), lineno=20, col_offset=4), Index(Name('ob_type', Load(), lineno=20, col_offset=19)), Store(), lineno=20, col_offset=4)], Name('pickle_function', Load(), lineno=20, col_offset=30), lineno=20, col_offset=4), If(Compare(Name('constructor_ob', Load(), lineno=24, col_offset=7), [IsNot()], [Name('None', Load(), lineno=24, col_offset=29)], lineno=24, col_offset=7), [Expr(Call(Name('constructor', Load(), lineno=25, col_offset=8), [Name('constructor_ob', Load(), lineno=25, col_offset=20)], [], None, None, lineno=25, col_offset=8), lineno=25, col_offset=8)], [], lineno=24, col_offset=4)], [], lineno=14, col_offset=0), FunctionDef('constructor', arguments([Name('object', Param(), lineno=27, col_offset=16)], None, None, []), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=28, col_offset=11), [Name('object', Load(), lineno=28, col_offset=19), Str('__call__', lineno=28, col_offset=27)], [], None, None, lineno=28, col_offset=11), lineno=28, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=29, col_offset=14), [Str('constructors must be callable', lineno=29, col_offset=24)], [], None, None, lineno=29, col_offset=14), None, None, lineno=29, col_offset=8)], [], lineno=28, col_offset=4)], [], lineno=27, col_offset=0), TryExcept([Expr(Name('complex', Load(), lineno=34, col_offset=4), lineno=34, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=35, col_offset=7), None, [Pass( lineno=36, col_offset=4)], lineno=35, col_offset=0)], [FunctionDef('pickle_complex', arguments([Name('c', Param(), lineno=39, col_offset=23)], None, None, []), [Return(Tuple([Name('complex', Load(), lineno=40, col_offset=15), Tuple([Attribute(Name('c', Load(), lineno=40, col_offset=25), 'real', Load(), lineno=40, col_offset=25), Attribute(Name('c', Load(), lineno=40, col_offset=33), 'imag', Load(), lineno=40, col_offset=33)], Load(), lineno=40, col_offset=25)], Load(), lineno=40, col_offset=15), lineno=40, col_offset=8)], [], lineno=39, col_offset=4), Expr(Call(Name('pickle', Load(), lineno=42, col_offset=4), [Name('complex', Load(), lineno=42, col_offset=11), Name('pickle_complex', Load(), lineno=42, col_offset=20), Name('complex', Load(), lineno=42, col_offset=36)], [], None, None, lineno=42, col_offset=4), lineno=42, col_offset=4)], lineno=33, col_offset=0), FunctionDef('_reconstructor', arguments([Name('cls', Param(), lineno=46, col_offset=19), Name('base', Param(), lineno=46, col_offset=24), Name('state', Param(), lineno=46, col_offset=30)], None, None, []), [If(Compare(Name('base', Load(), lineno=47, col_offset=7), [Is()], [Name('object', Load(), lineno=47, col_offset=15)], lineno=47, col_offset=7), [Assign([Name('obj', Store(), lineno=48, col_offset=8)], Call(Attribute(Name('object', Load(), lineno=48, col_offset=14), '__new__', Load(), lineno=48, col_offset=14), [Name('cls', Load(), lineno=48, col_offset=29)], [], None, None, lineno=48, col_offset=14), lineno=48, col_offset=8)], [Assign([Name('obj', Store(), lineno=50, col_offset=8)], Call(Attribute(Name('base', Load(), lineno=50, col_offset=14), '__new__', Load(), lineno=50, col_offset=14), [Name('cls', Load(), lineno=50, col_offset=27), Name('state', Load(), lineno=50, col_offset=32)], [], None, None, lineno=50, col_offset=14), lineno=50, col_offset=8), If(Compare(Attribute(Name('base', Load(), lineno=51, col_offset=11), '__init__', Load(), lineno=51, col_offset=11), [NotEq()], [Attribute(Name('object', Load(), lineno=51, col_offset=28), '__init__', Load(), lineno=51, col_offset=28)], lineno=51, col_offset=11), [Expr(Call(Attribute(Name('base', Load(), lineno=52, col_offset=12), '__init__', Load(), lineno=52, col_offset=12), [Name('obj', Load(), lineno=52, col_offset=26), Name('state', Load(), lineno=52, col_offset=31)], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=12)], [], lineno=51, col_offset=8)], lineno=47, col_offset=4), Return(Name('obj', Load(), lineno=53, col_offset=11), lineno=53, col_offset=4)], [], lineno=46, col_offset=0), Assign([Name('_HEAPTYPE', Store(), lineno=55, col_offset=0)], BinOp(Num(1, lineno=55, col_offset=12), LShift(), Num(9, lineno=55, col_offset=15), lineno=55, col_offset=12), lineno=55, col_offset=0), FunctionDef('_reduce_ex', arguments([Name('self', Param(), lineno=59, col_offset=15), Name('proto', Param(), lineno=59, col_offset=21)], None, None, []), [Assert(Compare(Name('proto', Load(), lineno=60, col_offset=11), [Lt()], [Num(2, lineno=60, col_offset=19)], lineno=60, col_offset=11), None, lineno=60, col_offset=4), For(Name('base', Store(), lineno=61, col_offset=8), Attribute(Attribute(Name('self', Load(), lineno=61, col_offset=16), '__class__', Load(), lineno=61, col_offset=16), '__mro__', Load(), lineno=61, col_offset=16), [If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=62, col_offset=11), [Name('base', Load(), lineno=62, col_offset=19), Str('__flags__', lineno=62, col_offset=25)], [], None, None, lineno=62, col_offset=11), UnaryOp(Not(), BinOp(Attribute(Name('base', Load(), lineno=62, col_offset=46), '__flags__', Load(), lineno=62, col_offset=46), BitAnd(), Name('_HEAPTYPE', Load(), lineno=62, col_offset=63), lineno=62, col_offset=46), lineno=62, col_offset=42)], lineno=62, col_offset=11), [Break( lineno=63, col_offset=12)], [], lineno=62, col_offset=8)], [Assign([Name('base', Store(), lineno=65, col_offset=8)], Name('object', Load(), lineno=65, col_offset=15), lineno=65, col_offset=8)], lineno=61, col_offset=4), If(Compare(Name('base', Load(), lineno=66, col_offset=7), [Is()], [Name('object', Load(), lineno=66, col_offset=15)], lineno=66, col_offset=7), [Assign([Name('state', Store(), lineno=67, col_offset=8)], Name('None', Load(), lineno=67, col_offset=16), lineno=67, col_offset=8)], [If(Compare(Name('base', Load(), lineno=69, col_offset=11), [Is()], [Attribute(Name('self', Load(), lineno=69, col_offset=19), '__class__', Load(), lineno=69, col_offset=19)], lineno=69, col_offset=11), [Raise(Name('TypeError', Load(), lineno=70, col_offset=18), BinOp(Str("can't pickle %s objects", lineno=70, col_offset=29), Mod(), Attribute(Name('base', Load(), lineno=70, col_offset=57), '__name__', Load(), lineno=70, col_offset=57), lineno=70, col_offset=29), None, lineno=70, col_offset=12)], [], lineno=69, col_offset=8), Assign([Name('state', Store(), lineno=71, col_offset=8)], Call(Name('base', Load(), lineno=71, col_offset=16), [Name('self', Load(), lineno=71, col_offset=21)], [], None, None, lineno=71, col_offset=16), lineno=71, col_offset=8)], lineno=66, col_offset=4), Assign([Name('args', Store(), lineno=72, col_offset=4)], Tuple([Attribute(Name('self', Load(), lineno=72, col_offset=12), '__class__', Load(), lineno=72, col_offset=12), Name('base', Load(), lineno=72, col_offset=28), Name('state', Load(), lineno=72, col_offset=34)], Load(), lineno=72, col_offset=12), lineno=72, col_offset=4), TryExcept([Assign([Name('getstate', Store(), lineno=74, col_offset=8)], Attribute(Name('self', Load(), lineno=74, col_offset=19), '__getstate__', Load(), lineno=74, col_offset=19), lineno=74, col_offset=8)], [ExceptHandler(Name('AttributeError', Load(), lineno=75, col_offset=11), None, [If(Call(Name('getattr', Load(), lineno=76, col_offset=11), [Name('self', Load(), lineno=76, col_offset=19), Str('__slots__', lineno=76, col_offset=25), Name('None', Load(), lineno=76, col_offset=38)], [], None, None, lineno=76, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=77, col_offset=18), [Str('a class that defines __slots__ without defining __getstate__ cannot be pickled', lineno=77, col_offset=28)], [], None, None, lineno=77, col_offset=18), None, None, lineno=77, col_offset=12)], [], lineno=76, col_offset=8), TryExcept([Assign([Name('dict', Store(), lineno=80, col_offset=12)], Attribute(Name('self', Load(), lineno=80, col_offset=19), '__dict__', Load(), lineno=80, col_offset=19), lineno=80, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=81, col_offset=15), None, [Assign([Name('dict', Store(), lineno=82, col_offset=12)], Name('None', Load(), lineno=82, col_offset=19), lineno=82, col_offset=12)], lineno=81, col_offset=8)], [], lineno=79, col_offset=8)], lineno=75, col_offset=4)], [Assign([Name('dict', Store(), lineno=84, col_offset=8)], Call(Name('getstate', Load(), lineno=84, col_offset=15), [], [], None, None, lineno=84, col_offset=15), lineno=84, col_offset=8)], lineno=73, col_offset=4), If(Name('dict', Load(), lineno=85, col_offset=7), [Return(Tuple([Name('_reconstructor', Load(), lineno=86, col_offset=15), Name('args', Load(), lineno=86, col_offset=31), Name('dict', Load(), lineno=86, col_offset=37)], Load(), lineno=86, col_offset=15), lineno=86, col_offset=8)], [Return(Tuple([Name('_reconstructor', Load(), lineno=88, col_offset=15), Name('args', Load(), lineno=88, col_offset=31)], Load(), lineno=88, col_offset=15), lineno=88, col_offset=8)], lineno=85, col_offset=4)], [], lineno=59, col_offset=0), FunctionDef('__newobj__', arguments([Name('cls', Param(), lineno=92, col_offset=15)], 'args', None, []), [Return(Call(Attribute(Name('cls', Load(), lineno=93, col_offset=11), '__new__', Load(), lineno=93, col_offset=11), [Name('cls', Load(), lineno=93, col_offset=23)], [], Name('args', Load(), lineno=93, col_offset=29), None, lineno=93, col_offset=11), lineno=93, col_offset=4)], [], lineno=92, col_offset=0), FunctionDef('_slotnames', arguments([Name('cls', Param(), lineno=95, col_offset=15)], None, None, []), [Expr(Str("Return a list of slot names for a given class.\n\n    This needs to find slots defined by the class and its bases, so we\n    can't simply return the __slots__ attribute.  We must walk down\n    the Method Resolution Order and concatenate the __slots__ of each\n    class found there.  (This assumes classes don't modify their\n    __slots__ attribute to misrepresent their slots after the class is\n    defined.)\n    ", lineno=104, col_offset=-1), lineno=104, col_offset=-1), Assign([Name('names', Store(), lineno=107, col_offset=4)], Call(Attribute(Attribute(Name('cls', Load(), lineno=107, col_offset=12), '__dict__', Load(), lineno=107, col_offset=12), 'get', Load(), lineno=107, col_offset=12), [Str('__slotnames__', lineno=107, col_offset=29)], [], None, None, lineno=107, col_offset=12), lineno=107, col_offset=4), If(Compare(Name('names', Load(), lineno=108, col_offset=7), [IsNot()], [Name('None', Load(), lineno=108, col_offset=20)], lineno=108, col_offset=7), [Return(Name('names', Load(), lineno=109, col_offset=15), lineno=109, col_offset=8)], [], lineno=108, col_offset=4), Assign([Name('names', Store(), lineno=112, col_offset=4)], List([], Load(), lineno=112, col_offset=12), lineno=112, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=113, col_offset=11), [Name('cls', Load(), lineno=113, col_offset=19), Str('__slots__', lineno=113, col_offset=24)], [], None, None, lineno=113, col_offset=11), lineno=113, col_offset=7), [Pass( lineno=115, col_offset=8)], [For(Name('c', Store(), lineno=118, col_offset=12), Attribute(Name('cls', Load(), lineno=118, col_offset=17), '__mro__', Load(), lineno=118, col_offset=17), [If(Compare(Str('__slots__', lineno=119, col_offset=15), [In()], [Attribute(Name('c', Load(), lineno=119, col_offset=30), '__dict__', Load(), lineno=119, col_offset=30)], lineno=119, col_offset=15), [Assign([Name('slots', Store(), lineno=120, col_offset=16)], Subscript(Attribute(Name('c', Load(), lineno=120, col_offset=24), '__dict__', Load(), lineno=120, col_offset=24), Index(Str('__slots__', lineno=120, col_offset=35)), Load(), lineno=120, col_offset=24), lineno=120, col_offset=16), If(Call(Name('isinstance', Load(), lineno=122, col_offset=19), [Name('slots', Load(), lineno=122, col_offset=30), Name('basestring', Load(), lineno=122, col_offset=37)], [], None, None, lineno=122, col_offset=19), [Assign([Name('slots', Store(), lineno=123, col_offset=20)], Tuple([Name('slots', Load(), lineno=123, col_offset=29)], Load(), lineno=123, col_offset=29), lineno=123, col_offset=20)], [], lineno=122, col_offset=16), For(Name('name', Store(), lineno=124, col_offset=20), Name('slots', Load(), lineno=124, col_offset=28), [If(Compare(Name('name', Load(), lineno=126, col_offset=23), [In()], [Tuple([Str('__dict__', lineno=126, col_offset=32), Str('__weakref__', lineno=126, col_offset=44)], Load(), lineno=126, col_offset=32)], lineno=126, col_offset=23), [Continue( lineno=127, col_offset=24)], [If(BoolOp(And(), [Call(Attribute(Name('name', Load(), lineno=129, col_offset=25), 'startswith', Load(), lineno=129, col_offset=25), [Str('__', lineno=129, col_offset=41)], [], None, None, lineno=129, col_offset=25), UnaryOp(Not(), Call(Attribute(Name('name', Load(), lineno=129, col_offset=55), 'endswith', Load(), lineno=129, col_offset=55), [Str('__', lineno=129, col_offset=69)], [], None, None, lineno=129, col_offset=55), lineno=129, col_offset=51)], lineno=129, col_offset=25), [Expr(Call(Attribute(Name('names', Load(), lineno=130, col_offset=24), 'append', Load(), lineno=130, col_offset=24), [BinOp(Str('_%s%s', lineno=130, col_offset=37), Mod(), Tuple([Attribute(Name('c', Load(), lineno=130, col_offset=48), '__name__', Load(), lineno=130, col_offset=48), Name('name', Load(), lineno=130, col_offset=60)], Load(), lineno=130, col_offset=48), lineno=130, col_offset=37)], [], None, None, lineno=130, col_offset=24), lineno=130, col_offset=24)], [Expr(Call(Attribute(Name('names', Load(), lineno=132, col_offset=24), 'append', Load(), lineno=132, col_offset=24), [Name('name', Load(), lineno=132, col_offset=37)], [], None, None, lineno=132, col_offset=24), lineno=132, col_offset=24)], lineno=129, col_offset=25)], lineno=126, col_offset=20)], [], lineno=124, col_offset=16)], [], lineno=119, col_offset=12)], [], lineno=118, col_offset=8)], lineno=113, col_offset=4), TryExcept([Assign([Attribute(Name('cls', Load(), lineno=136, col_offset=8), '__slotnames__', Store(), lineno=136, col_offset=8)], Name('names', Load(), lineno=136, col_offset=28), lineno=136, col_offset=8)], [ExceptHandler(None, None, [Pass( lineno=138, col_offset=8)], lineno=137, col_offset=4)], [], lineno=135, col_offset=4), Return(Name('names', Load(), lineno=140, col_offset=11), lineno=140, col_offset=4)], [], lineno=95, col_offset=0), Assign([Name('_extension_registry', Store(), lineno=151, col_offset=0)], Dict([], [], lineno=151, col_offset=22), lineno=151, col_offset=0), Assign([Name('_inverted_registry', Store(), lineno=152, col_offset=0)], Dict([], [], lineno=152, col_offset=21), lineno=152, col_offset=0), Assign([Name('_extension_cache', Store(), lineno=153, col_offset=0)], Dict([], [], lineno=153, col_offset=19), lineno=153, col_offset=0), FunctionDef('add_extension', arguments([Name('module', Param(), lineno=157, col_offset=18), Name('name', Param(), lineno=157, col_offset=26), Name('code', Param(), lineno=157, col_offset=32)], None, None, []), [Expr(Str('Register an extension code.', lineno=158, col_offset=4), lineno=158, col_offset=4), Assign([Name('code', Store(), lineno=159, col_offset=4)], Call(Name('int', Load(), lineno=159, col_offset=11), [Name('code', Load(), lineno=159, col_offset=15)], [], None, None, lineno=159, col_offset=11), lineno=159, col_offset=4), If(UnaryOp(Not(), Compare(Num(1, lineno=160, col_offset=11), [LtE(), LtE()], [Name('code', Load(), lineno=160, col_offset=16), Num(2147483647, lineno=160, col_offset=24)], lineno=160, col_offset=11), lineno=160, col_offset=7), [Raise(Name('ValueError', Load(), lineno=161, col_offset=14), Str('code out of range', lineno=161, col_offset=26), None, lineno=161, col_offset=8)], [], lineno=160, col_offset=4), Assign([Name('key', Store(), lineno=162, col_offset=4)], Tuple([Name('module', Load(), lineno=162, col_offset=11), Name('name', Load(), lineno=162, col_offset=19)], Load(), lineno=162, col_offset=11), lineno=162, col_offset=4), If(BoolOp(And(), [Compare(Call(Attribute(Name('_extension_registry', Load(), lineno=163, col_offset=8), 'get', Load(), lineno=163, col_offset=8), [Name('key', Load(), lineno=163, col_offset=32)], [], None, None, lineno=163, col_offset=8), [Eq()], [Name('code', Load(), lineno=163, col_offset=40)], lineno=163, col_offset=8), Compare(Call(Attribute(Name('_inverted_registry', Load(), lineno=164, col_offset=8), 'get', Load(), lineno=164, col_offset=8), [Name('code', Load(), lineno=164, col_offset=31)], [], None, None, lineno=164, col_offset=8), [Eq()], [Name('key', Load(), lineno=164, col_offset=40)], lineno=164, col_offset=8)], lineno=163, col_offset=8), [Return(None, lineno=165, col_offset=8)], [], lineno=163, col_offset=4), If(Compare(Name('key', Load(), lineno=166, col_offset=7), [In()], [Name('_extension_registry', Load(), lineno=166, col_offset=14)], lineno=166, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=167, col_offset=14), [BinOp(Str('key %s is already registered with code %s', lineno=167, col_offset=25), Mod(), Tuple([Name('key', Load(), lineno=168, col_offset=26), Subscript(Name('_extension_registry', Load(), lineno=168, col_offset=31), Index(Name('key', Load(), lineno=168, col_offset=51)), Load(), lineno=168, col_offset=31)], Load(), lineno=168, col_offset=26), lineno=167, col_offset=25)], [], None, None, lineno=167, col_offset=14), None, None, lineno=167, col_offset=8)], [], lineno=166, col_offset=4), If(Compare(Name('code', Load(), lineno=169, col_offset=7), [In()], [Name('_inverted_registry', Load(), lineno=169, col_offset=15)], lineno=169, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=170, col_offset=14), [BinOp(Str('code %s is already in use for key %s', lineno=170, col_offset=25), Mod(), Tuple([Name('code', Load(), lineno=171, col_offset=26), Subscript(Name('_inverted_registry', Load(), lineno=171, col_offset=32), Index(Name('code', Load(), lineno=171, col_offset=51)), Load(), lineno=171, col_offset=32)], Load(), lineno=171, col_offset=26), lineno=170, col_offset=25)], [], None, None, lineno=170, col_offset=14), None, None, lineno=170, col_offset=8)], [], lineno=169, col_offset=4), Assign([Subscript(Name('_extension_registry', Load(), lineno=172, col_offset=4), Index(Name('key', Load(), lineno=172, col_offset=24)), Store(), lineno=172, col_offset=4)], Name('code', Load(), lineno=172, col_offset=31), lineno=172, col_offset=4), Assign([Subscript(Name('_inverted_registry', Load(), lineno=173, col_offset=4), Index(Name('code', Load(), lineno=173, col_offset=23)), Store(), lineno=173, col_offset=4)], Name('key', Load(), lineno=173, col_offset=31), lineno=173, col_offset=4)], [], lineno=157, col_offset=0), FunctionDef('remove_extension', arguments([Name('module', Param(), lineno=175, col_offset=21), Name('name', Param(), lineno=175, col_offset=29), Name('code', Param(), lineno=175, col_offset=35)], None, None, []), [Expr(Str('Unregister an extension code.  For testing only.', lineno=176, col_offset=4), lineno=176, col_offset=4), Assign([Name('key', Store(), lineno=177, col_offset=4)], Tuple([Name('module', Load(), lineno=177, col_offset=11), Name('name', Load(), lineno=177, col_offset=19)], Load(), lineno=177, col_offset=11), lineno=177, col_offset=4), If(BoolOp(Or(), [Compare(Call(Attribute(Name('_extension_registry', Load(), lineno=178, col_offset=8), 'get', Load(), lineno=178, col_offset=8), [Name('key', Load(), lineno=178, col_offset=32)], [], None, None, lineno=178, col_offset=8), [NotEq()], [Name('code', Load(), lineno=178, col_offset=40)], lineno=178, col_offset=8), Compare(Call(Attribute(Name('_inverted_registry', Load(), lineno=179, col_offset=8), 'get', Load(), lineno=179, col_offset=8), [Name('code', Load(), lineno=179, col_offset=31)], [], None, None, lineno=179, col_offset=8), [NotEq()], [Name('key', Load(), lineno=179, col_offset=40)], lineno=179, col_offset=8)], lineno=178, col_offset=8), [Raise(Call(Name('ValueError', Load(), lineno=180, col_offset=14), [BinOp(Str('key %s is not registered with code %s', lineno=180, col_offset=25), Mod(), Tuple([Name('key', Load(), lineno=181, col_offset=26), Name('code', Load(), lineno=181, col_offset=31)], Load(), lineno=181, col_offset=26), lineno=180, col_offset=25)], [], None, None, lineno=180, col_offset=14), None, None, lineno=180, col_offset=8)], [], lineno=178, col_offset=4), Delete([Subscript(Name('_extension_registry', Load(), lineno=182, col_offset=8), Index(Name('key', Load(), lineno=182, col_offset=28)), Del(), lineno=182, col_offset=8)], lineno=182, col_offset=4), Delete([Subscript(Name('_inverted_registry', Load(), lineno=183, col_offset=8), Index(Name('code', Load(), lineno=183, col_offset=27)), Del(), lineno=183, col_offset=8)], lineno=183, col_offset=4), If(Compare(Name('code', Load(), lineno=184, col_offset=7), [In()], [Name('_extension_cache', Load(), lineno=184, col_offset=15)], lineno=184, col_offset=7), [Delete([Subscript(Name('_extension_cache', Load(), lineno=185, col_offset=12), Index(Name('code', Load(), lineno=185, col_offset=29)), Del(), lineno=185, col_offset=12)], lineno=185, col_offset=8)], [], lineno=184, col_offset=4)], [], lineno=175, col_offset=0), FunctionDef('clear_extension_cache', arguments([], None, None, []), [Expr(Call(Attribute(Name('_extension_cache', Load(), lineno=188, col_offset=4), 'clear', Load(), lineno=188, col_offset=4), [], [], None, None, lineno=188, col_offset=4), lineno=188, col_offset=4)], [], lineno=187, col_offset=0)])
