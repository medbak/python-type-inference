Module([Expr(Str('distutils.emxccompiler\n\nProvides the EMXCCompiler class, a subclass of UnixCCompiler that\nhandles the EMX port of the GNU C compiler to OS/2.\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__revision__', Store(), lineno=22, col_offset=0)], Str('$Id: emxccompiler.py 86238 2010-11-06 04:06:18Z eric.araujo $', lineno=22, col_offset=15), lineno=22, col_offset=0), Import([alias('os', None), alias('sys', None), alias('copy', None)], lineno=24, col_offset=0), ImportFrom('distutils.ccompiler', [alias('gen_preprocess_options', None), alias('gen_lib_options', None)], 0, lineno=25, col_offset=0), ImportFrom('distutils.unixccompiler', [alias('UnixCCompiler', None)], 0, lineno=26, col_offset=0), ImportFrom('distutils.file_util', [alias('write_file', None)], 0, lineno=27, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsExecError', None), alias('CompileError', None), alias('UnknownFileError', None)], 0, lineno=28, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=29, col_offset=0), ClassDef('EMXCCompiler', [Name('UnixCCompiler', Load(), lineno=31, col_offset=20)], [Assign([Name('compiler_type', Store(), lineno=33, col_offset=4)], Str('emx', lineno=33, col_offset=20), lineno=33, col_offset=4), Assign([Name('obj_extension', Store(), lineno=34, col_offset=4)], Str('.obj', lineno=34, col_offset=20), lineno=34, col_offset=4), Assign([Name('static_lib_extension', Store(), lineno=35, col_offset=4)], Str('.lib', lineno=35, col_offset=27), lineno=35, col_offset=4), Assign([Name('shared_lib_extension', Store(), lineno=36, col_offset=4)], Str('.dll', lineno=36, col_offset=27), lineno=36, col_offset=4), Assign([Name('static_lib_format', Store(), lineno=37, col_offset=4)], Str('%s%s', lineno=37, col_offset=24), lineno=37, col_offset=4), Assign([Name('shared_lib_format', Store(), lineno=38, col_offset=4)], Str('%s%s', lineno=38, col_offset=24), lineno=38, col_offset=4), Assign([Name('res_extension', Store(), lineno=39, col_offset=4)], Str('.res', lineno=39, col_offset=20), lineno=39, col_offset=4), Assign([Name('exe_extension', Store(), lineno=40, col_offset=4)], Str('.exe', lineno=40, col_offset=20), lineno=40, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=42, col_offset=18), Name('verbose', Param(), lineno=43, col_offset=18), Name('dry_run', Param(), lineno=44, col_offset=18), Name('force', Param(), lineno=45, col_offset=18)], None, None, [Num(0, lineno=43, col_offset=26), Num(0, lineno=44, col_offset=26), Num(0, lineno=45, col_offset=24)]), [Expr(Call(Attribute(Name('UnixCCompiler', Load(), lineno=47, col_offset=8), '__init__', Load(), lineno=47, col_offset=8), [Name('self', Load(), lineno=47, col_offset=32), Name('verbose', Load(), lineno=47, col_offset=38), Name('dry_run', Load(), lineno=47, col_offset=47), Name('force', Load(), lineno=47, col_offset=56)], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Assign([Tuple([Name('status', Store(), lineno=49, col_offset=9), Name('details', Store(), lineno=49, col_offset=17)], Store(), lineno=49, col_offset=9)], Call(Name('check_config_h', Load(), lineno=49, col_offset=28), [], [], None, None, lineno=49, col_offset=28), lineno=49, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=50, col_offset=8), 'debug_print', Load(), lineno=50, col_offset=8), [BinOp(Str("Python's GCC status: %s (details: %s)", lineno=50, col_offset=25), Mod(), Tuple([Name('status', Load(), lineno=51, col_offset=26), Name('details', Load(), lineno=51, col_offset=34)], Load(), lineno=51, col_offset=26), lineno=50, col_offset=25)], [], None, None, lineno=50, col_offset=8), lineno=50, col_offset=8), If(Compare(Name('status', Load(), lineno=52, col_offset=11), [IsNot()], [Name('CONFIG_H_OK', Load(), lineno=52, col_offset=25)], lineno=52, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=53, col_offset=12), 'warn', Load(), lineno=53, col_offset=12), [BinOp(BinOp(Str("Python's pyconfig.h doesn't seem to support your compiler.  ", lineno=54, col_offset=16), Add(), BinOp(Str('Reason: %s.', lineno=55, col_offset=17), Mod(), Name('details', Load(), lineno=55, col_offset=33), lineno=55, col_offset=17), lineno=54, col_offset=16), Add(), Str('Compiling may fail because of undefined preprocessor macros.', lineno=56, col_offset=16), lineno=55, col_offset=42)], [], None, None, lineno=53, col_offset=12), lineno=53, col_offset=12)], [], lineno=52, col_offset=8), Assign([Tuple([Attribute(Name('self', Load(), lineno=58, col_offset=9), 'gcc_version', Store(), lineno=58, col_offset=9), Attribute(Name('self', Load(), lineno=58, col_offset=27), 'ld_version', Store(), lineno=58, col_offset=27)], Store(), lineno=58, col_offset=9)], Call(Name('get_versions', Load(), lineno=59, col_offset=12), [], [], None, None, lineno=59, col_offset=12), lineno=58, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=8), 'debug_print', Load(), lineno=60, col_offset=8), [BinOp(Attribute(Name('self', Load(), lineno=60, col_offset=25), 'compiler_type', Load(), lineno=60, col_offset=25), Add(), BinOp(Str(': gcc %s, ld %s\n', lineno=60, col_offset=46), Mod(), Tuple([Attribute(Name('self', Load(), lineno=61, col_offset=26), 'gcc_version', Load(), lineno=61, col_offset=26), Attribute(Name('self', Load(), lineno=62, col_offset=26), 'ld_version', Load(), lineno=62, col_offset=26)], Load(), lineno=61, col_offset=26), lineno=60, col_offset=46), lineno=60, col_offset=25)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'set_executables', Load(), lineno=66, col_offset=8), [], [keyword('compiler', Str('gcc -Zomf -Zmt -O3 -fomit-frame-pointer -mprobe -Wall', lineno=66, col_offset=38)), keyword('compiler_so', Str('gcc -Zomf -Zmt -O3 -fomit-frame-pointer -mprobe -Wall', lineno=67, col_offset=41)), keyword('linker_exe', Str('gcc -Zomf -Zmt -Zcrtdll', lineno=68, col_offset=40)), keyword('linker_so', Str('gcc -Zomf -Zmt -Zcrtdll -Zdll', lineno=69, col_offset=39))], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=73, col_offset=8), 'dll_libraries', Store(), lineno=73, col_offset=8)], List([Str('gcc', lineno=73, col_offset=28)], Load(), lineno=73, col_offset=27), lineno=73, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('_compile', arguments([Name('self', Param(), lineno=77, col_offset=17), Name('obj', Param(), lineno=77, col_offset=23), Name('src', Param(), lineno=77, col_offset=28), Name('ext', Param(), lineno=77, col_offset=33), Name('cc_args', Param(), lineno=77, col_offset=38), Name('extra_postargs', Param(), lineno=77, col_offset=47), Name('pp_opts', Param(), lineno=77, col_offset=63)], None, None, []), [If(Compare(Name('ext', Load(), lineno=78, col_offset=11), [Eq()], [Str('.rc', lineno=78, col_offset=18)], lineno=78, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=16), 'spawn', Load(), lineno=81, col_offset=16), [List([Str('rc', lineno=81, col_offset=28), Str('-r', lineno=81, col_offset=34), Name('src', Load(), lineno=81, col_offset=40)], Load(), lineno=81, col_offset=27)], [], None, None, lineno=81, col_offset=16), lineno=81, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=82, col_offset=19), Name('msg', Store(), lineno=82, col_offset=39), [Raise(Name('CompileError', Load(), lineno=83, col_offset=22), Name('msg', Load(), lineno=83, col_offset=36), None, lineno=83, col_offset=16)], lineno=82, col_offset=12)], [], lineno=80, col_offset=12)], [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=86, col_offset=16), 'spawn', Load(), lineno=86, col_offset=16), [BinOp(BinOp(BinOp(Attribute(Name('self', Load(), lineno=86, col_offset=27), 'compiler_so', Load(), lineno=86, col_offset=27), Add(), Name('cc_args', Load(), lineno=86, col_offset=46), lineno=86, col_offset=27), Add(), List([Name('src', Load(), lineno=86, col_offset=57), Str('-o', lineno=86, col_offset=62), Name('obj', Load(), lineno=86, col_offset=68)], Load(), lineno=86, col_offset=56), lineno=86, col_offset=54), Add(), Name('extra_postargs', Load(), lineno=87, col_offset=27), lineno=86, col_offset=73)], [], None, None, lineno=86, col_offset=16), lineno=86, col_offset=16)], [ExceptHandler(Name('DistutilsExecError', Load(), lineno=88, col_offset=19), Name('msg', Store(), lineno=88, col_offset=39), [Raise(Name('CompileError', Load(), lineno=89, col_offset=22), Name('msg', Load(), lineno=89, col_offset=36), None, lineno=89, col_offset=16)], lineno=88, col_offset=12)], [], lineno=85, col_offset=12)], lineno=78, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('link', arguments([Name('self', Param(), lineno=91, col_offset=14), Name('target_desc', Param(), lineno=92, col_offset=14), Name('objects', Param(), lineno=93, col_offset=14), Name('output_filename', Param(), lineno=94, col_offset=14), Name('output_dir', Param(), lineno=95, col_offset=14), Name('libraries', Param(), lineno=96, col_offset=14), Name('library_dirs', Param(), lineno=97, col_offset=14), Name('runtime_library_dirs', Param(), lineno=98, col_offset=14), Name('export_symbols', Param(), lineno=99, col_offset=14), Name('debug', Param(), lineno=100, col_offset=14), Name('extra_preargs', Param(), lineno=101, col_offset=14), Name('extra_postargs', Param(), lineno=102, col_offset=14), Name('build_temp', Param(), lineno=103, col_offset=14), Name('target_lang', Param(), lineno=104, col_offset=14)], None, None, [Name('None', Load(), lineno=95, col_offset=25), Name('None', Load(), lineno=96, col_offset=24), Name('None', Load(), lineno=97, col_offset=27), Name('None', Load(), lineno=98, col_offset=35), Name('None', Load(), lineno=99, col_offset=29), Num(0, lineno=100, col_offset=20), Name('None', Load(), lineno=101, col_offset=28), Name('None', Load(), lineno=102, col_offset=29), Name('None', Load(), lineno=103, col_offset=25), Name('None', Load(), lineno=104, col_offset=26)]), [Assign([Name('extra_preargs', Store(), lineno=107, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=107, col_offset=24), 'copy', Load(), lineno=107, col_offset=24), [BoolOp(Or(), [Name('extra_preargs', Load(), lineno=107, col_offset=34), List([], Load(), lineno=107, col_offset=51)], lineno=107, col_offset=34)], [], None, None, lineno=107, col_offset=24), lineno=107, col_offset=8), Assign([Name('libraries', Store(), lineno=108, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=108, col_offset=20), 'copy', Load(), lineno=108, col_offset=20), [BoolOp(Or(), [Name('libraries', Load(), lineno=108, col_offset=30), List([], Load(), lineno=108, col_offset=43)], lineno=108, col_offset=30)], [], None, None, lineno=108, col_offset=20), lineno=108, col_offset=8), Assign([Name('objects', Store(), lineno=109, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=109, col_offset=18), 'copy', Load(), lineno=109, col_offset=18), [BoolOp(Or(), [Name('objects', Load(), lineno=109, col_offset=28), List([], Load(), lineno=109, col_offset=39)], lineno=109, col_offset=28)], [], None, None, lineno=109, col_offset=18), lineno=109, col_offset=8), Expr(Call(Attribute(Name('libraries', Load(), lineno=112, col_offset=8), 'extend', Load(), lineno=112, col_offset=8), [Attribute(Name('self', Load(), lineno=112, col_offset=25), 'dll_libraries', Load(), lineno=112, col_offset=25)], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8), If(BoolOp(And(), [Compare(Name('export_symbols', Load(), lineno=116, col_offset=13), [IsNot()], [Name('None', Load(), lineno=116, col_offset=35)], lineno=116, col_offset=13), Compare(Name('target_desc', Load(), lineno=117, col_offset=13), [NotEq()], [Attribute(Name('self', Load(), lineno=117, col_offset=28), 'EXECUTABLE', Load(), lineno=117, col_offset=28)], lineno=117, col_offset=13)], lineno=116, col_offset=12), [Assign([Name('temp_dir', Store(), lineno=126, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=126, col_offset=23), 'path', Load(), lineno=126, col_offset=23), 'dirname', Load(), lineno=126, col_offset=23), [Subscript(Name('objects', Load(), lineno=126, col_offset=39), Index(Num(0, lineno=126, col_offset=47)), Load(), lineno=126, col_offset=39)], [], None, None, lineno=126, col_offset=23), lineno=126, col_offset=12), Assign([Tuple([Name('dll_name', Store(), lineno=128, col_offset=13), Name('dll_extension', Store(), lineno=128, col_offset=23)], Store(), lineno=128, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=128, col_offset=40), 'path', Load(), lineno=128, col_offset=40), 'splitext', Load(), lineno=128, col_offset=40), [Call(Attribute(Attribute(Name('os', Load(), lineno=129, col_offset=16), 'path', Load(), lineno=129, col_offset=16), 'basename', Load(), lineno=129, col_offset=16), [Name('output_filename', Load(), lineno=129, col_offset=33)], [], None, None, lineno=129, col_offset=16)], [], None, None, lineno=128, col_offset=40), lineno=128, col_offset=12), Assign([Name('def_file', Store(), lineno=132, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=132, col_offset=23), 'path', Load(), lineno=132, col_offset=23), 'join', Load(), lineno=132, col_offset=23), [Name('temp_dir', Load(), lineno=132, col_offset=36), BinOp(Name('dll_name', Load(), lineno=132, col_offset=46), Add(), Str('.def', lineno=132, col_offset=57), lineno=132, col_offset=46)], [], None, None, lineno=132, col_offset=23), lineno=132, col_offset=12), Assign([Name('contents', Store(), lineno=135, col_offset=12)], List([BinOp(Str('LIBRARY %s INITINSTANCE TERMINSTANCE', lineno=136, col_offset=16), Mod(), Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=137, col_offset=16), 'path', Load(), lineno=137, col_offset=16), 'splitext', Load(), lineno=137, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=137, col_offset=33), 'path', Load(), lineno=137, col_offset=33), 'basename', Load(), lineno=137, col_offset=33), [Name('output_filename', Load(), lineno=137, col_offset=50)], [], None, None, lineno=137, col_offset=33)], [], None, None, lineno=137, col_offset=16), Index(Num(0, lineno=137, col_offset=68)), Load(), lineno=137, col_offset=16), lineno=136, col_offset=16), Str('DATA MULTIPLE NONSHARED', lineno=138, col_offset=16), Str('EXPORTS', lineno=139, col_offset=16)], Load(), lineno=135, col_offset=23), lineno=135, col_offset=12), For(Name('sym', Store(), lineno=140, col_offset=16), Name('export_symbols', Load(), lineno=140, col_offset=23), [Expr(Call(Attribute(Name('contents', Load(), lineno=141, col_offset=16), 'append', Load(), lineno=141, col_offset=16), [BinOp(Str('  "%s"', lineno=141, col_offset=32), Mod(), Name('sym', Load(), lineno=141, col_offset=43), lineno=141, col_offset=32)], [], None, None, lineno=141, col_offset=16), lineno=141, col_offset=16)], [], lineno=140, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=12), 'execute', Load(), lineno=142, col_offset=12), [Name('write_file', Load(), lineno=142, col_offset=25), Tuple([Name('def_file', Load(), lineno=142, col_offset=38), Name('contents', Load(), lineno=142, col_offset=48)], Load(), lineno=142, col_offset=38), BinOp(Str('writing %s', lineno=143, col_offset=25), Mod(), Name('def_file', Load(), lineno=143, col_offset=40), lineno=143, col_offset=25)], [], None, None, lineno=142, col_offset=12), lineno=142, col_offset=12), Expr(Call(Attribute(Name('objects', Load(), lineno=147, col_offset=12), 'append', Load(), lineno=147, col_offset=12), [Name('def_file', Load(), lineno=147, col_offset=27)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=12)], [], lineno=116, col_offset=8), If(UnaryOp(Not(), Name('debug', Load(), lineno=158, col_offset=15), lineno=158, col_offset=11), [Expr(Call(Attribute(Name('extra_preargs', Load(), lineno=159, col_offset=12), 'append', Load(), lineno=159, col_offset=12), [Str('-s', lineno=159, col_offset=33)], [], None, None, lineno=159, col_offset=12), lineno=159, col_offset=12)], [], lineno=158, col_offset=8), Expr(Call(Attribute(Name('UnixCCompiler', Load(), lineno=161, col_offset=8), 'link', Load(), lineno=161, col_offset=8), [Name('self', Load(), lineno=161, col_offset=27), Name('target_desc', Load(), lineno=162, col_offset=27), Name('objects', Load(), lineno=163, col_offset=27), Name('output_filename', Load(), lineno=164, col_offset=27), Name('output_dir', Load(), lineno=165, col_offset=27), Name('libraries', Load(), lineno=166, col_offset=27), Name('library_dirs', Load(), lineno=167, col_offset=27), Name('runtime_library_dirs', Load(), lineno=168, col_offset=27), Name('None', Load(), lineno=169, col_offset=27), Name('debug', Load(), lineno=170, col_offset=27), Name('extra_preargs', Load(), lineno=171, col_offset=27), Name('extra_postargs', Load(), lineno=172, col_offset=27), Name('build_temp', Load(), lineno=173, col_offset=27), Name('target_lang', Load(), lineno=174, col_offset=27)], [], None, None, lineno=161, col_offset=8), lineno=161, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('object_filenames', arguments([Name('self', Param(), lineno=182, col_offset=26), Name('source_filenames', Param(), lineno=183, col_offset=26), Name('strip_dir', Param(), lineno=184, col_offset=26), Name('output_dir', Param(), lineno=185, col_offset=26)], None, None, [Num(0, lineno=184, col_offset=36), Str('', lineno=185, col_offset=37)]), [If(Compare(Name('output_dir', Load(), lineno=186, col_offset=11), [Is()], [Name('None', Load(), lineno=186, col_offset=25)], lineno=186, col_offset=11), [Assign([Name('output_dir', Store(), lineno=186, col_offset=31)], Str('', lineno=186, col_offset=44), lineno=186, col_offset=31)], [], lineno=186, col_offset=8), Assign([Name('obj_names', Store(), lineno=187, col_offset=8)], List([], Load(), lineno=187, col_offset=20), lineno=187, col_offset=8), For(Name('src_name', Store(), lineno=188, col_offset=12), Name('source_filenames', Load(), lineno=188, col_offset=24), [Assign([Tuple([Name('base', Store(), lineno=190, col_offset=13), Name('ext', Store(), lineno=190, col_offset=19)], Store(), lineno=190, col_offset=13)], Call(Attribute(Attribute(Name('os', Load(), lineno=190, col_offset=26), 'path', Load(), lineno=190, col_offset=26), 'splitext', Load(), lineno=190, col_offset=26), [Call(Attribute(Attribute(Name('os', Load(), lineno=190, col_offset=44), 'path', Load(), lineno=190, col_offset=44), 'normcase', Load(), lineno=190, col_offset=44), [Name('src_name', Load(), lineno=190, col_offset=61)], [], None, None, lineno=190, col_offset=44)], [], None, None, lineno=190, col_offset=26), lineno=190, col_offset=12), If(Compare(Name('ext', Load(), lineno=191, col_offset=15), [NotIn()], [BinOp(Attribute(Name('self', Load(), lineno=191, col_offset=27), 'src_extensions', Load(), lineno=191, col_offset=27), Add(), List([Str('.rc', lineno=191, col_offset=50)], Load(), lineno=191, col_offset=49), lineno=191, col_offset=27)], lineno=191, col_offset=15), [Raise(Name('UnknownFileError', Load(), lineno=192, col_offset=22), BinOp(Str("unknown file type '%s' (from '%s')", lineno=193, col_offset=22), Mod(), Tuple([Name('ext', Load(), lineno=194, col_offset=23), Name('src_name', Load(), lineno=194, col_offset=28)], Load(), lineno=194, col_offset=23), lineno=193, col_offset=22), None, lineno=192, col_offset=16)], [], lineno=191, col_offset=12), If(Name('strip_dir', Load(), lineno=195, col_offset=15), [Assign([Name('base', Store(), lineno=196, col_offset=16)], Call(Attribute(Attribute(Name('os', Load(), lineno=196, col_offset=23), 'path', Load(), lineno=196, col_offset=23), 'basename', Load(), lineno=196, col_offset=23), [Name('base', Load(), lineno=196, col_offset=41)], [], None, None, lineno=196, col_offset=23), lineno=196, col_offset=16)], [], lineno=195, col_offset=12), If(Compare(Name('ext', Load(), lineno=197, col_offset=15), [Eq()], [Str('.rc', lineno=197, col_offset=22)], lineno=197, col_offset=15), [Expr(Call(Attribute(Name('obj_names', Load(), lineno=199, col_offset=16), 'append', Load(), lineno=199, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=199, col_offset=34), 'path', Load(), lineno=199, col_offset=34), 'join', Load(), lineno=199, col_offset=34), [Name('output_dir', Load(), lineno=199, col_offset=48), BinOp(Name('base', Load(), lineno=200, col_offset=44), Add(), Attribute(Name('self', Load(), lineno=200, col_offset=51), 'res_extension', Load(), lineno=200, col_offset=51), lineno=200, col_offset=44)], [], None, None, lineno=199, col_offset=34)], [], None, None, lineno=199, col_offset=16), lineno=199, col_offset=16)], [Expr(Call(Attribute(Name('obj_names', Load(), lineno=202, col_offset=16), 'append', Load(), lineno=202, col_offset=16), [Call(Attribute(Attribute(Name('os', Load(), lineno=202, col_offset=34), 'path', Load(), lineno=202, col_offset=34), 'join', Load(), lineno=202, col_offset=34), [Name('output_dir', Load(), lineno=202, col_offset=48), BinOp(Name('base', Load(), lineno=203, col_offset=44), Add(), Attribute(Name('self', Load(), lineno=203, col_offset=51), 'obj_extension', Load(), lineno=203, col_offset=51), lineno=203, col_offset=44)], [], None, None, lineno=202, col_offset=34)], [], None, None, lineno=202, col_offset=16), lineno=202, col_offset=16)], lineno=197, col_offset=12)], [], lineno=188, col_offset=8), Return(Name('obj_names', Load(), lineno=204, col_offset=15), lineno=204, col_offset=8)], [], lineno=182, col_offset=4), FunctionDef('find_library_file', arguments([Name('self', Param(), lineno=210, col_offset=26), Name('dirs', Param(), lineno=210, col_offset=32), Name('lib', Param(), lineno=210, col_offset=38), Name('debug', Param(), lineno=210, col_offset=43)], None, None, [Num(0, lineno=210, col_offset=49)]), [Assign([Name('shortlib', Store(), lineno=211, col_offset=8)], BinOp(Str('%s.lib', lineno=211, col_offset=19), Mod(), Name('lib', Load(), lineno=211, col_offset=30), lineno=211, col_offset=19), lineno=211, col_offset=8), Assign([Name('longlib', Store(), lineno=212, col_offset=8)], BinOp(Str('lib%s.lib', lineno=212, col_offset=18), Mod(), Name('lib', Load(), lineno=212, col_offset=32), lineno=212, col_offset=18), lineno=212, col_offset=8), TryExcept([Assign([Name('emx_dirs', Store(), lineno=216, col_offset=12)], Call(Attribute(Subscript(Attribute(Name('os', Load(), lineno=216, col_offset=23), 'environ', Load(), lineno=216, col_offset=23), Index(Str('LIBRARY_PATH', lineno=216, col_offset=34)), Load(), lineno=216, col_offset=23), 'split', Load(), lineno=216, col_offset=23), [Str(';', lineno=216, col_offset=56)], [], None, None, lineno=216, col_offset=23), lineno=216, col_offset=12)], [ExceptHandler(Name('KeyError', Load(), lineno=217, col_offset=15), None, [Assign([Name('emx_dirs', Store(), lineno=218, col_offset=12)], List([], Load(), lineno=218, col_offset=23), lineno=218, col_offset=12)], lineno=217, col_offset=8)], [], lineno=215, col_offset=8), For(Name('dir', Store(), lineno=220, col_offset=12), BinOp(Name('dirs', Load(), lineno=220, col_offset=19), Add(), Name('emx_dirs', Load(), lineno=220, col_offset=26), lineno=220, col_offset=19), [Assign([Name('shortlibp', Store(), lineno=221, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=221, col_offset=24), 'path', Load(), lineno=221, col_offset=24), 'join', Load(), lineno=221, col_offset=24), [Name('dir', Load(), lineno=221, col_offset=37), Name('shortlib', Load(), lineno=221, col_offset=42)], [], None, None, lineno=221, col_offset=24), lineno=221, col_offset=12), Assign([Name('longlibp', Store(), lineno=222, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=222, col_offset=23), 'path', Load(), lineno=222, col_offset=23), 'join', Load(), lineno=222, col_offset=23), [Name('dir', Load(), lineno=222, col_offset=36), Name('longlib', Load(), lineno=222, col_offset=41)], [], None, None, lineno=222, col_offset=23), lineno=222, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=223, col_offset=15), 'path', Load(), lineno=223, col_offset=15), 'exists', Load(), lineno=223, col_offset=15), [Name('shortlibp', Load(), lineno=223, col_offset=30)], [], None, None, lineno=223, col_offset=15), [Return(Name('shortlibp', Load(), lineno=224, col_offset=23), lineno=224, col_offset=16)], [If(Call(Attribute(Attribute(Name('os', Load(), lineno=225, col_offset=17), 'path', Load(), lineno=225, col_offset=17), 'exists', Load(), lineno=225, col_offset=17), [Name('longlibp', Load(), lineno=225, col_offset=32)], [], None, None, lineno=225, col_offset=17), [Return(Name('longlibp', Load(), lineno=226, col_offset=23), lineno=226, col_offset=16)], [], lineno=225, col_offset=17)], lineno=223, col_offset=12)], [], lineno=220, col_offset=8), Return(Name('None', Load(), lineno=229, col_offset=15), lineno=229, col_offset=8)], [], lineno=210, col_offset=4)], [], lineno=31, col_offset=0), Assign([Name('CONFIG_H_OK', Store(), lineno=238, col_offset=0)], Str('ok', lineno=238, col_offset=14), lineno=238, col_offset=0), Assign([Name('CONFIG_H_NOTOK', Store(), lineno=239, col_offset=0)], Str('not ok', lineno=239, col_offset=17), lineno=239, col_offset=0), Assign([Name('CONFIG_H_UNCERTAIN', Store(), lineno=240, col_offset=0)], Str('uncertain', lineno=240, col_offset=21), lineno=240, col_offset=0), FunctionDef('check_config_h', arguments([], None, None, []), [Expr(Str('Check if the current Python installation (specifically, pyconfig.h)\n    appears amenable to building extensions with GCC.  Returns a tuple\n    (status, details), where \'status\' is one of the following constants:\n      CONFIG_H_OK\n        all is well, go ahead and compile\n      CONFIG_H_NOTOK\n        doesn\'t look good\n      CONFIG_H_UNCERTAIN\n        not sure -- unable to read pyconfig.h\n    \'details\' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude "OK": either \'sys.version\' contains\n    the string "GCC" (implying that this Python was built with GCC), or the\n    installed "pyconfig.h" contains the string "__GNUC__".\n    ', lineno=258, col_offset=-1), lineno=258, col_offset=-1), ImportFrom('distutils', [alias('sysconfig', None)], 0, lineno=263, col_offset=4), Import([alias('string', None)], lineno=264, col_offset=4), If(Compare(Call(Attribute(Name('string', Load(), lineno=267, col_offset=7), 'find', Load(), lineno=267, col_offset=7), [Attribute(Name('sys', Load(), lineno=267, col_offset=19), 'version', Load(), lineno=267, col_offset=19), Str('GCC', lineno=267, col_offset=31)], [], None, None, lineno=267, col_offset=7), [GtE()], [Num(0, lineno=267, col_offset=41)], lineno=267, col_offset=7), [Return(Tuple([Name('CONFIG_H_OK', Load(), lineno=268, col_offset=16), Str("sys.version mentions 'GCC'", lineno=268, col_offset=29)], Load(), lineno=268, col_offset=16), lineno=268, col_offset=8)], [], lineno=267, col_offset=4), Assign([Name('fn', Store(), lineno=270, col_offset=4)], Call(Attribute(Name('sysconfig', Load(), lineno=270, col_offset=9), 'get_config_h_filename', Load(), lineno=270, col_offset=9), [], [], None, None, lineno=270, col_offset=9), lineno=270, col_offset=4), TryExcept([Assign([Name('f', Store(), lineno=274, col_offset=8)], Call(Name('open', Load(), lineno=274, col_offset=12), [Name('fn', Load(), lineno=274, col_offset=17)], [], None, None, lineno=274, col_offset=12), lineno=274, col_offset=8), TryFinally([Assign([Name('s', Store(), lineno=276, col_offset=12)], Call(Attribute(Name('f', Load(), lineno=276, col_offset=16), 'read', Load(), lineno=276, col_offset=16), [], [], None, None, lineno=276, col_offset=16), lineno=276, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=278, col_offset=12), 'close', Load(), lineno=278, col_offset=12), [], [], None, None, lineno=278, col_offset=12), lineno=278, col_offset=12)], lineno=275, col_offset=8)], [ExceptHandler(Name('IOError', Load(), lineno=280, col_offset=11), Name('exc', Store(), lineno=280, col_offset=20), [Return(Tuple([Name('CONFIG_H_UNCERTAIN', Load(), lineno=283, col_offset=16), BinOp(Str("couldn't read '%s': %s", lineno=284, col_offset=16), Mod(), Tuple([Name('fn', Load(), lineno=284, col_offset=44), Attribute(Name('exc', Load(), lineno=284, col_offset=48), 'strerror', Load(), lineno=284, col_offset=48)], Load(), lineno=284, col_offset=44), lineno=284, col_offset=16)], Load(), lineno=283, col_offset=16), lineno=283, col_offset=8)], lineno=280, col_offset=4)], [If(Compare(Call(Attribute(Name('string', Load(), lineno=288, col_offset=11), 'find', Load(), lineno=288, col_offset=11), [Name('s', Load(), lineno=288, col_offset=23), Str('__GNUC__', lineno=288, col_offset=25)], [], None, None, lineno=288, col_offset=11), [GtE()], [Num(0, lineno=288, col_offset=40)], lineno=288, col_offset=11), [Return(Tuple([Name('CONFIG_H_OK', Load(), lineno=289, col_offset=20), BinOp(Str("'%s' mentions '__GNUC__'", lineno=289, col_offset=33), Mod(), Name('fn', Load(), lineno=289, col_offset=62), lineno=289, col_offset=33)], Load(), lineno=289, col_offset=20), lineno=289, col_offset=12)], [Return(Tuple([Name('CONFIG_H_NOTOK', Load(), lineno=291, col_offset=20), BinOp(Str("'%s' does not mention '__GNUC__'", lineno=291, col_offset=36), Mod(), Name('fn', Load(), lineno=291, col_offset=73), lineno=291, col_offset=36)], Load(), lineno=291, col_offset=20), lineno=291, col_offset=12)], lineno=288, col_offset=8)], lineno=271, col_offset=4)], [], lineno=242, col_offset=0), FunctionDef('get_versions', arguments([], None, None, []), [Expr(Str(' Try to find out the versions of gcc and ld.\n        If not possible it returns None for it.\n    ', lineno=297, col_offset=-1), lineno=297, col_offset=-1), ImportFrom('distutils.version', [alias('StrictVersion', None)], 0, lineno=298, col_offset=4), ImportFrom('distutils.spawn', [alias('find_executable', None)], 0, lineno=299, col_offset=4), Import([alias('re', None)], lineno=300, col_offset=4), Assign([Name('gcc_exe', Store(), lineno=302, col_offset=4)], Call(Name('find_executable', Load(), lineno=302, col_offset=14), [Str('gcc', lineno=302, col_offset=30)], [], None, None, lineno=302, col_offset=14), lineno=302, col_offset=4), If(Name('gcc_exe', Load(), lineno=303, col_offset=7), [Assign([Name('out', Store(), lineno=304, col_offset=8)], Call(Attribute(Name('os', Load(), lineno=304, col_offset=14), 'popen', Load(), lineno=304, col_offset=14), [BinOp(Name('gcc_exe', Load(), lineno=304, col_offset=23), Add(), Str(' -dumpversion', lineno=304, col_offset=33), lineno=304, col_offset=23), Str('r', lineno=304, col_offset=49)], [], None, None, lineno=304, col_offset=14), lineno=304, col_offset=8), TryFinally([Assign([Name('out_string', Store(), lineno=306, col_offset=12)], Call(Attribute(Name('out', Load(), lineno=306, col_offset=25), 'read', Load(), lineno=306, col_offset=25), [], [], None, None, lineno=306, col_offset=25), lineno=306, col_offset=12)], [Expr(Call(Attribute(Name('out', Load(), lineno=308, col_offset=12), 'close', Load(), lineno=308, col_offset=12), [], [], None, None, lineno=308, col_offset=12), lineno=308, col_offset=12)], lineno=305, col_offset=8), Assign([Name('result', Store(), lineno=309, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=309, col_offset=17), 'search', Load(), lineno=309, col_offset=17), [Str('(\\d+\\.\\d+\\.\\d+)', lineno=309, col_offset=27), Name('out_string', Load(), lineno=309, col_offset=45)], [], None, None, lineno=309, col_offset=17), lineno=309, col_offset=8), If(Name('result', Load(), lineno=310, col_offset=11), [Assign([Name('gcc_version', Store(), lineno=311, col_offset=12)], Call(Name('StrictVersion', Load(), lineno=311, col_offset=26), [Call(Attribute(Name('result', Load(), lineno=311, col_offset=40), 'group', Load(), lineno=311, col_offset=40), [Num(1, lineno=311, col_offset=53)], [], None, None, lineno=311, col_offset=40)], [], None, None, lineno=311, col_offset=26), lineno=311, col_offset=12)], [Assign([Name('gcc_version', Store(), lineno=313, col_offset=12)], Name('None', Load(), lineno=313, col_offset=26), lineno=313, col_offset=12)], lineno=310, col_offset=8)], [Assign([Name('gcc_version', Store(), lineno=315, col_offset=8)], Name('None', Load(), lineno=315, col_offset=22), lineno=315, col_offset=8)], lineno=303, col_offset=4), Assign([Name('ld_version', Store(), lineno=318, col_offset=4)], Name('None', Load(), lineno=318, col_offset=17), lineno=318, col_offset=4), Return(Tuple([Name('gcc_version', Load(), lineno=319, col_offset=12), Name('ld_version', Load(), lineno=319, col_offset=25)], Load(), lineno=319, col_offset=12), lineno=319, col_offset=4)], [], lineno=294, col_offset=0)])
