Module([Expr(Str('Pattern compiler.\n\nThe grammer is taken from PatternGrammar.txt.\n\nThe compiler compiles a pattern to a pytree.*Pattern instance.\n', lineno=9, col_offset=-1), lineno=9, col_offset=-1), Assign([Name('__author__', Store(), lineno=11, col_offset=0)], Str('Guido van Rossum <guido@python.org>', lineno=11, col_offset=13), lineno=11, col_offset=0), Import([alias('os', None)], lineno=14, col_offset=0), ImportFrom('pgen2', [alias('driver', None), alias('literals', None), alias('token', None), alias('tokenize', None), alias('parse', None), alias('grammar', None)], 1, lineno=17, col_offset=0), ImportFrom(None, [alias('pytree', None)], 1, lineno=20, col_offset=0), ImportFrom(None, [alias('pygram', None)], 1, lineno=21, col_offset=0), Assign([Name('_PATTERN_GRAMMAR_FILE', Store(), lineno=24, col_offset=0)], Call(Attribute(Attribute(Name('os', Load(), lineno=24, col_offset=24), 'path', Load(), lineno=24, col_offset=24), 'join', Load(), lineno=24, col_offset=24), [Call(Attribute(Attribute(Name('os', Load(), lineno=24, col_offset=37), 'path', Load(), lineno=24, col_offset=37), 'dirname', Load(), lineno=24, col_offset=37), [Name('__file__', Load(), lineno=24, col_offset=53)], [], None, None, lineno=24, col_offset=37), Str('PatternGrammar.txt', lineno=25, col_offset=37)], [], None, None, lineno=24, col_offset=24), lineno=24, col_offset=0), ClassDef('PatternSyntaxError', [Name('Exception', Load(), lineno=28, col_offset=25)], [Pass( lineno=29, col_offset=4)], [], lineno=28, col_offset=0), FunctionDef('tokenize_wrapper', arguments([Name('input', Param(), lineno=32, col_offset=21)], None, None, []), [Expr(Str('Tokenizes a string suppressing significant whitespace.', lineno=33, col_offset=4), lineno=33, col_offset=4), Assign([Name('skip', Store(), lineno=34, col_offset=4)], Call(Name('set', Load(), lineno=34, col_offset=11), [Tuple([Attribute(Name('token', Load(), lineno=34, col_offset=16), 'NEWLINE', Load(), lineno=34, col_offset=16), Attribute(Name('token', Load(), lineno=34, col_offset=31), 'INDENT', Load(), lineno=34, col_offset=31), Attribute(Name('token', Load(), lineno=34, col_offset=45), 'DEDENT', Load(), lineno=34, col_offset=45)], Load(), lineno=34, col_offset=16)], [], None, None, lineno=34, col_offset=11), lineno=34, col_offset=4), Assign([Name('tokens', Store(), lineno=35, col_offset=4)], Call(Attribute(Name('tokenize', Load(), lineno=35, col_offset=13), 'generate_tokens', Load(), lineno=35, col_offset=13), [Attribute(Call(Attribute(Name('driver', Load(), lineno=35, col_offset=38), 'generate_lines', Load(), lineno=35, col_offset=38), [Name('input', Load(), lineno=35, col_offset=60)], [], None, None, lineno=35, col_offset=38), 'next', Load(), lineno=35, col_offset=38)], [], None, None, lineno=35, col_offset=13), lineno=35, col_offset=4), For(Name('quintuple', Store(), lineno=36, col_offset=8), Name('tokens', Load(), lineno=36, col_offset=21), [Assign([Tuple([Name('type', Store(), lineno=37, col_offset=8), Name('value', Store(), lineno=37, col_offset=14), Name('start', Store(), lineno=37, col_offset=21), Name('end', Store(), lineno=37, col_offset=28), Name('line_text', Store(), lineno=37, col_offset=33)], Store(), lineno=37, col_offset=8)], Name('quintuple', Load(), lineno=37, col_offset=45), lineno=37, col_offset=8), If(Compare(Name('type', Load(), lineno=38, col_offset=11), [NotIn()], [Name('skip', Load(), lineno=38, col_offset=23)], lineno=38, col_offset=11), [Expr(Yield(Name('quintuple', Load(), lineno=39, col_offset=18), lineno=39, col_offset=12), lineno=39, col_offset=12)], [], lineno=38, col_offset=8)], [], lineno=36, col_offset=4)], [], lineno=32, col_offset=0), ClassDef('PatternCompiler', [Name('object', Load(), lineno=42, col_offset=22)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=44, col_offset=17), Name('grammar_file', Param(), lineno=44, col_offset=23)], None, None, [Name('_PATTERN_GRAMMAR_FILE', Load(), lineno=44, col_offset=36)]), [Expr(Str('Initializer.\n\n        Takes an optional alternative filename for the pattern grammar.\n        ', lineno=48, col_offset=-1), lineno=48, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=49, col_offset=8), 'grammar', Store(), lineno=49, col_offset=8)], Call(Attribute(Name('driver', Load(), lineno=49, col_offset=23), 'load_grammar', Load(), lineno=49, col_offset=23), [Name('grammar_file', Load(), lineno=49, col_offset=43)], [], None, None, lineno=49, col_offset=23), lineno=49, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=50, col_offset=8), 'syms', Store(), lineno=50, col_offset=8)], Call(Attribute(Name('pygram', Load(), lineno=50, col_offset=20), 'Symbols', Load(), lineno=50, col_offset=20), [Attribute(Name('self', Load(), lineno=50, col_offset=35), 'grammar', Load(), lineno=50, col_offset=35)], [], None, None, lineno=50, col_offset=20), lineno=50, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=51, col_offset=8), 'pygrammar', Store(), lineno=51, col_offset=8)], Attribute(Name('pygram', Load(), lineno=51, col_offset=25), 'python_grammar', Load(), lineno=51, col_offset=25), lineno=51, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=52, col_offset=8), 'pysyms', Store(), lineno=52, col_offset=8)], Attribute(Name('pygram', Load(), lineno=52, col_offset=22), 'python_symbols', Load(), lineno=52, col_offset=22), lineno=52, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=53, col_offset=8), 'driver', Store(), lineno=53, col_offset=8)], Call(Attribute(Name('driver', Load(), lineno=53, col_offset=22), 'Driver', Load(), lineno=53, col_offset=22), [Attribute(Name('self', Load(), lineno=53, col_offset=36), 'grammar', Load(), lineno=53, col_offset=36)], [keyword('convert', Name('pattern_convert', Load(), lineno=53, col_offset=58))], None, None, lineno=53, col_offset=22), lineno=53, col_offset=8)], [], lineno=44, col_offset=4), FunctionDef('compile_pattern', arguments([Name('self', Param(), lineno=55, col_offset=24), Name('input', Param(), lineno=55, col_offset=30), Name('debug', Param(), lineno=55, col_offset=37), Name('with_tree', Param(), lineno=55, col_offset=50)], None, None, [Name('False', Load(), lineno=55, col_offset=43), Name('False', Load(), lineno=55, col_offset=60)]), [Expr(Str('Compiles a pattern string to a nested pytree.*Pattern object.', lineno=56, col_offset=8), lineno=56, col_offset=8), Assign([Name('tokens', Store(), lineno=57, col_offset=8)], Call(Name('tokenize_wrapper', Load(), lineno=57, col_offset=17), [Name('input', Load(), lineno=57, col_offset=34)], [], None, None, lineno=57, col_offset=17), lineno=57, col_offset=8), TryExcept([Assign([Name('root', Store(), lineno=59, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=59, col_offset=19), 'driver', Load(), lineno=59, col_offset=19), 'parse_tokens', Load(), lineno=59, col_offset=19), [Name('tokens', Load(), lineno=59, col_offset=44)], [keyword('debug', Name('debug', Load(), lineno=59, col_offset=58))], None, None, lineno=59, col_offset=19), lineno=59, col_offset=12)], [ExceptHandler(Attribute(Name('parse', Load(), lineno=60, col_offset=15), 'ParseError', Load(), lineno=60, col_offset=15), Name('e', Store(), lineno=60, col_offset=35), [Raise(Call(Name('PatternSyntaxError', Load(), lineno=61, col_offset=18), [Call(Name('str', Load(), lineno=61, col_offset=37), [Name('e', Load(), lineno=61, col_offset=41)], [], None, None, lineno=61, col_offset=37)], [], None, None, lineno=61, col_offset=18), None, None, lineno=61, col_offset=12)], lineno=60, col_offset=8)], [], lineno=58, col_offset=8), If(Name('with_tree', Load(), lineno=62, col_offset=11), [Return(Tuple([Call(Attribute(Name('self', Load(), lineno=63, col_offset=19), 'compile_node', Load(), lineno=63, col_offset=19), [Name('root', Load(), lineno=63, col_offset=37)], [], None, None, lineno=63, col_offset=19), Name('root', Load(), lineno=63, col_offset=44)], Load(), lineno=63, col_offset=19), lineno=63, col_offset=12)], [Return(Call(Attribute(Name('self', Load(), lineno=65, col_offset=19), 'compile_node', Load(), lineno=65, col_offset=19), [Name('root', Load(), lineno=65, col_offset=37)], [], None, None, lineno=65, col_offset=19), lineno=65, col_offset=12)], lineno=62, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('compile_node', arguments([Name('self', Param(), lineno=67, col_offset=21), Name('node', Param(), lineno=67, col_offset=27)], None, None, []), [Expr(Str('Compiles a node, recursively.\n\n        This is one big switch on the node type.\n        ', lineno=71, col_offset=-1), lineno=71, col_offset=-1), If(Compare(Attribute(Name('node', Load(), lineno=74, col_offset=11), 'type', Load(), lineno=74, col_offset=11), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=74, col_offset=24), 'syms', Load(), lineno=74, col_offset=24), 'Matcher', Load(), lineno=74, col_offset=24)], lineno=74, col_offset=11), [Assign([Name('node', Store(), lineno=75, col_offset=12)], Subscript(Attribute(Name('node', Load(), lineno=75, col_offset=19), 'children', Load(), lineno=75, col_offset=19), Index(Num(0, lineno=75, col_offset=33)), Load(), lineno=75, col_offset=19), lineno=75, col_offset=12)], [], lineno=74, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=77, col_offset=11), 'type', Load(), lineno=77, col_offset=11), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=77, col_offset=24), 'syms', Load(), lineno=77, col_offset=24), 'Alternatives', Load(), lineno=77, col_offset=24)], lineno=77, col_offset=11), [Assign([Name('alts', Store(), lineno=79, col_offset=12)], ListComp(Call(Attribute(Name('self', Load(), lineno=79, col_offset=20), 'compile_node', Load(), lineno=79, col_offset=20), [Name('ch', Load(), lineno=79, col_offset=38)], [], None, None, lineno=79, col_offset=20), [comprehension(Name('ch', Store(), lineno=79, col_offset=46), Subscript(Attribute(Name('node', Load(), lineno=79, col_offset=52), 'children', Load(), lineno=79, col_offset=52), Slice(None, None, Num(2, lineno=79, col_offset=68)), Load(), lineno=79, col_offset=52), [])], lineno=79, col_offset=20), lineno=79, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=80, col_offset=15), [Name('alts', Load(), lineno=80, col_offset=19)], [], None, None, lineno=80, col_offset=15), [Eq()], [Num(1, lineno=80, col_offset=28)], lineno=80, col_offset=15), [Return(Subscript(Name('alts', Load(), lineno=81, col_offset=23), Index(Num(0, lineno=81, col_offset=28)), Load(), lineno=81, col_offset=23), lineno=81, col_offset=16)], [], lineno=80, col_offset=12), Assign([Name('p', Store(), lineno=82, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=82, col_offset=16), 'WildcardPattern', Load(), lineno=82, col_offset=16), [ListComp(List([Name('a', Load(), lineno=82, col_offset=41)], Load(), lineno=82, col_offset=40), [comprehension(Name('a', Store(), lineno=82, col_offset=48), Name('alts', Load(), lineno=82, col_offset=53), [])], lineno=82, col_offset=40)], [keyword('min', Num(1, lineno=82, col_offset=64)), keyword('max', Num(1, lineno=82, col_offset=71))], None, None, lineno=82, col_offset=16), lineno=82, col_offset=12), Return(Call(Attribute(Name('p', Load(), lineno=83, col_offset=19), 'optimize', Load(), lineno=83, col_offset=19), [], [], None, None, lineno=83, col_offset=19), lineno=83, col_offset=12)], [], lineno=77, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=85, col_offset=11), 'type', Load(), lineno=85, col_offset=11), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=85, col_offset=24), 'syms', Load(), lineno=85, col_offset=24), 'Alternative', Load(), lineno=85, col_offset=24)], lineno=85, col_offset=11), [Assign([Name('units', Store(), lineno=86, col_offset=12)], ListComp(Call(Attribute(Name('self', Load(), lineno=86, col_offset=21), 'compile_node', Load(), lineno=86, col_offset=21), [Name('ch', Load(), lineno=86, col_offset=39)], [], None, None, lineno=86, col_offset=21), [comprehension(Name('ch', Store(), lineno=86, col_offset=47), Attribute(Name('node', Load(), lineno=86, col_offset=53), 'children', Load(), lineno=86, col_offset=53), [])], lineno=86, col_offset=21), lineno=86, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=87, col_offset=15), [Name('units', Load(), lineno=87, col_offset=19)], [], None, None, lineno=87, col_offset=15), [Eq()], [Num(1, lineno=87, col_offset=29)], lineno=87, col_offset=15), [Return(Subscript(Name('units', Load(), lineno=88, col_offset=23), Index(Num(0, lineno=88, col_offset=29)), Load(), lineno=88, col_offset=23), lineno=88, col_offset=16)], [], lineno=87, col_offset=12), Assign([Name('p', Store(), lineno=89, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=89, col_offset=16), 'WildcardPattern', Load(), lineno=89, col_offset=16), [List([Name('units', Load(), lineno=89, col_offset=40)], Load(), lineno=89, col_offset=39)], [keyword('min', Num(1, lineno=89, col_offset=52)), keyword('max', Num(1, lineno=89, col_offset=59))], None, None, lineno=89, col_offset=16), lineno=89, col_offset=12), Return(Call(Attribute(Name('p', Load(), lineno=90, col_offset=19), 'optimize', Load(), lineno=90, col_offset=19), [], [], None, None, lineno=90, col_offset=19), lineno=90, col_offset=12)], [], lineno=85, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=92, col_offset=11), 'type', Load(), lineno=92, col_offset=11), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=92, col_offset=24), 'syms', Load(), lineno=92, col_offset=24), 'NegatedUnit', Load(), lineno=92, col_offset=24)], lineno=92, col_offset=11), [Assign([Name('pattern', Store(), lineno=93, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=93, col_offset=22), 'compile_basic', Load(), lineno=93, col_offset=22), [Subscript(Attribute(Name('node', Load(), lineno=93, col_offset=41), 'children', Load(), lineno=93, col_offset=41), Slice(Num(1, lineno=93, col_offset=55), None, None), Load(), lineno=93, col_offset=41)], [], None, None, lineno=93, col_offset=22), lineno=93, col_offset=12), Assign([Name('p', Store(), lineno=94, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=94, col_offset=16), 'NegatedPattern', Load(), lineno=94, col_offset=16), [Name('pattern', Load(), lineno=94, col_offset=38)], [], None, None, lineno=94, col_offset=16), lineno=94, col_offset=12), Return(Call(Attribute(Name('p', Load(), lineno=95, col_offset=19), 'optimize', Load(), lineno=95, col_offset=19), [], [], None, None, lineno=95, col_offset=19), lineno=95, col_offset=12)], [], lineno=92, col_offset=8), Assert(Compare(Attribute(Name('node', Load(), lineno=97, col_offset=15), 'type', Load(), lineno=97, col_offset=15), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=97, col_offset=28), 'syms', Load(), lineno=97, col_offset=28), 'Unit', Load(), lineno=97, col_offset=28)], lineno=97, col_offset=15), None, lineno=97, col_offset=8), Assign([Name('name', Store(), lineno=99, col_offset=8)], Name('None', Load(), lineno=99, col_offset=15), lineno=99, col_offset=8), Assign([Name('nodes', Store(), lineno=100, col_offset=8)], Attribute(Name('node', Load(), lineno=100, col_offset=16), 'children', Load(), lineno=100, col_offset=16), lineno=100, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=101, col_offset=11), [Name('nodes', Load(), lineno=101, col_offset=15)], [], None, None, lineno=101, col_offset=11), [GtE()], [Num(3, lineno=101, col_offset=25)], lineno=101, col_offset=11), Compare(Attribute(Subscript(Name('nodes', Load(), lineno=101, col_offset=31), Index(Num(1, lineno=101, col_offset=37)), Load(), lineno=101, col_offset=31), 'type', Load(), lineno=101, col_offset=31), [Eq()], [Attribute(Name('token', Load(), lineno=101, col_offset=48), 'EQUAL', Load(), lineno=101, col_offset=48)], lineno=101, col_offset=31)], lineno=101, col_offset=11), [Assign([Name('name', Store(), lineno=102, col_offset=12)], Attribute(Subscript(Name('nodes', Load(), lineno=102, col_offset=19), Index(Num(0, lineno=102, col_offset=25)), Load(), lineno=102, col_offset=19), 'value', Load(), lineno=102, col_offset=19), lineno=102, col_offset=12), Assign([Name('nodes', Store(), lineno=103, col_offset=12)], Subscript(Name('nodes', Load(), lineno=103, col_offset=20), Slice(Num(2, lineno=103, col_offset=26), None, None), Load(), lineno=103, col_offset=20), lineno=103, col_offset=12)], [], lineno=101, col_offset=8), Assign([Name('repeat', Store(), lineno=104, col_offset=8)], Name('None', Load(), lineno=104, col_offset=17), lineno=104, col_offset=8), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=105, col_offset=11), [Name('nodes', Load(), lineno=105, col_offset=15)], [], None, None, lineno=105, col_offset=11), [GtE()], [Num(2, lineno=105, col_offset=25)], lineno=105, col_offset=11), Compare(Attribute(Subscript(Name('nodes', Load(), lineno=105, col_offset=31), Index(Num(-1, lineno=105, col_offset=38)), Load(), lineno=105, col_offset=31), 'type', Load(), lineno=105, col_offset=31), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=105, col_offset=49), 'syms', Load(), lineno=105, col_offset=49), 'Repeater', Load(), lineno=105, col_offset=49)], lineno=105, col_offset=31)], lineno=105, col_offset=11), [Assign([Name('repeat', Store(), lineno=106, col_offset=12)], Subscript(Name('nodes', Load(), lineno=106, col_offset=21), Index(Num(-1, lineno=106, col_offset=28)), Load(), lineno=106, col_offset=21), lineno=106, col_offset=12), Assign([Name('nodes', Store(), lineno=107, col_offset=12)], Subscript(Name('nodes', Load(), lineno=107, col_offset=20), Slice(None, Num(-1, lineno=107, col_offset=28), None), Load(), lineno=107, col_offset=20), lineno=107, col_offset=12)], [], lineno=105, col_offset=8), Assign([Name('pattern', Store(), lineno=110, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=110, col_offset=18), 'compile_basic', Load(), lineno=110, col_offset=18), [Name('nodes', Load(), lineno=110, col_offset=37), Name('repeat', Load(), lineno=110, col_offset=44)], [], None, None, lineno=110, col_offset=18), lineno=110, col_offset=8), If(Compare(Name('repeat', Load(), lineno=112, col_offset=11), [IsNot()], [Name('None', Load(), lineno=112, col_offset=25)], lineno=112, col_offset=11), [Assert(Compare(Attribute(Name('repeat', Load(), lineno=113, col_offset=19), 'type', Load(), lineno=113, col_offset=19), [Eq()], [Attribute(Attribute(Name('self', Load(), lineno=113, col_offset=34), 'syms', Load(), lineno=113, col_offset=34), 'Repeater', Load(), lineno=113, col_offset=34)], lineno=113, col_offset=19), None, lineno=113, col_offset=12), Assign([Name('children', Store(), lineno=114, col_offset=12)], Attribute(Name('repeat', Load(), lineno=114, col_offset=23), 'children', Load(), lineno=114, col_offset=23), lineno=114, col_offset=12), Assign([Name('child', Store(), lineno=115, col_offset=12)], Subscript(Name('children', Load(), lineno=115, col_offset=20), Index(Num(0, lineno=115, col_offset=29)), Load(), lineno=115, col_offset=20), lineno=115, col_offset=12), If(Compare(Attribute(Name('child', Load(), lineno=116, col_offset=15), 'type', Load(), lineno=116, col_offset=15), [Eq()], [Attribute(Name('token', Load(), lineno=116, col_offset=29), 'STAR', Load(), lineno=116, col_offset=29)], lineno=116, col_offset=15), [Assign([Name('min', Store(), lineno=117, col_offset=16)], Num(0, lineno=117, col_offset=22), lineno=117, col_offset=16), Assign([Name('max', Store(), lineno=118, col_offset=16)], Attribute(Name('pytree', Load(), lineno=118, col_offset=22), 'HUGE', Load(), lineno=118, col_offset=22), lineno=118, col_offset=16)], [If(Compare(Attribute(Name('child', Load(), lineno=119, col_offset=17), 'type', Load(), lineno=119, col_offset=17), [Eq()], [Attribute(Name('token', Load(), lineno=119, col_offset=31), 'PLUS', Load(), lineno=119, col_offset=31)], lineno=119, col_offset=17), [Assign([Name('min', Store(), lineno=120, col_offset=16)], Num(1, lineno=120, col_offset=22), lineno=120, col_offset=16), Assign([Name('max', Store(), lineno=121, col_offset=16)], Attribute(Name('pytree', Load(), lineno=121, col_offset=22), 'HUGE', Load(), lineno=121, col_offset=22), lineno=121, col_offset=16)], [If(Compare(Attribute(Name('child', Load(), lineno=122, col_offset=17), 'type', Load(), lineno=122, col_offset=17), [Eq()], [Attribute(Name('token', Load(), lineno=122, col_offset=31), 'LBRACE', Load(), lineno=122, col_offset=31)], lineno=122, col_offset=17), [Assert(Compare(Attribute(Subscript(Name('children', Load(), lineno=123, col_offset=23), Index(Num(-1, lineno=123, col_offset=33)), Load(), lineno=123, col_offset=23), 'type', Load(), lineno=123, col_offset=23), [Eq()], [Attribute(Name('token', Load(), lineno=123, col_offset=44), 'RBRACE', Load(), lineno=123, col_offset=44)], lineno=123, col_offset=23), None, lineno=123, col_offset=16), Assert(Compare(Call(Name('len', Load(), lineno=124, col_offset=24), [Name('children', Load(), lineno=124, col_offset=28)], [], None, None, lineno=124, col_offset=24), [In()], [Tuple([Num(3, lineno=124, col_offset=42), Num(5, lineno=124, col_offset=45)], Load(), lineno=124, col_offset=42)], lineno=124, col_offset=24), None, lineno=124, col_offset=16), Assign([Name('min', Store(), lineno=125, col_offset=16), Name('max', Store(), lineno=125, col_offset=22)], Call(Attribute(Name('self', Load(), lineno=125, col_offset=28), 'get_int', Load(), lineno=125, col_offset=28), [Subscript(Name('children', Load(), lineno=125, col_offset=41), Index(Num(1, lineno=125, col_offset=50)), Load(), lineno=125, col_offset=41)], [], None, None, lineno=125, col_offset=28), lineno=125, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=126, col_offset=19), [Name('children', Load(), lineno=126, col_offset=23)], [], None, None, lineno=126, col_offset=19), [Eq()], [Num(5, lineno=126, col_offset=36)], lineno=126, col_offset=19), [Assign([Name('max', Store(), lineno=127, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=127, col_offset=26), 'get_int', Load(), lineno=127, col_offset=26), [Subscript(Name('children', Load(), lineno=127, col_offset=39), Index(Num(3, lineno=127, col_offset=48)), Load(), lineno=127, col_offset=39)], [], None, None, lineno=127, col_offset=26), lineno=127, col_offset=20)], [], lineno=126, col_offset=16)], [Assert(Name('False', Load(), lineno=129, col_offset=23), None, lineno=129, col_offset=16)], lineno=122, col_offset=17)], lineno=119, col_offset=17)], lineno=116, col_offset=12), If(BoolOp(Or(), [Compare(Name('min', Load(), lineno=130, col_offset=15), [NotEq()], [Num(1, lineno=130, col_offset=22)], lineno=130, col_offset=15), Compare(Name('max', Load(), lineno=130, col_offset=27), [NotEq()], [Num(1, lineno=130, col_offset=34)], lineno=130, col_offset=27)], lineno=130, col_offset=15), [Assign([Name('pattern', Store(), lineno=131, col_offset=16)], Call(Attribute(Name('pattern', Load(), lineno=131, col_offset=26), 'optimize', Load(), lineno=131, col_offset=26), [], [], None, None, lineno=131, col_offset=26), lineno=131, col_offset=16), Assign([Name('pattern', Store(), lineno=132, col_offset=16)], Call(Attribute(Name('pytree', Load(), lineno=132, col_offset=26), 'WildcardPattern', Load(), lineno=132, col_offset=26), [List([List([Name('pattern', Load(), lineno=132, col_offset=51)], Load(), lineno=132, col_offset=50)], Load(), lineno=132, col_offset=49)], [keyword('min', Name('min', Load(), lineno=132, col_offset=66)), keyword('max', Name('max', Load(), lineno=132, col_offset=75))], None, None, lineno=132, col_offset=26), lineno=132, col_offset=16)], [], lineno=130, col_offset=12)], [], lineno=112, col_offset=8), If(Compare(Name('name', Load(), lineno=134, col_offset=11), [IsNot()], [Name('None', Load(), lineno=134, col_offset=23)], lineno=134, col_offset=11), [Assign([Attribute(Name('pattern', Load(), lineno=135, col_offset=12), 'name', Store(), lineno=135, col_offset=12)], Name('name', Load(), lineno=135, col_offset=27), lineno=135, col_offset=12)], [], lineno=134, col_offset=8), Return(Call(Attribute(Name('pattern', Load(), lineno=136, col_offset=15), 'optimize', Load(), lineno=136, col_offset=15), [], [], None, None, lineno=136, col_offset=15), lineno=136, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('compile_basic', arguments([Name('self', Param(), lineno=138, col_offset=22), Name('nodes', Param(), lineno=138, col_offset=28), Name('repeat', Param(), lineno=138, col_offset=35)], None, None, [Name('None', Load(), lineno=138, col_offset=42)]), [Assert(Compare(Call(Name('len', Load(), lineno=140, col_offset=15), [Name('nodes', Load(), lineno=140, col_offset=19)], [], None, None, lineno=140, col_offset=15), [GtE()], [Num(1, lineno=140, col_offset=29)], lineno=140, col_offset=15), None, lineno=140, col_offset=8), Assign([Name('node', Store(), lineno=141, col_offset=8)], Subscript(Name('nodes', Load(), lineno=141, col_offset=15), Index(Num(0, lineno=141, col_offset=21)), Load(), lineno=141, col_offset=15), lineno=141, col_offset=8), If(Compare(Attribute(Name('node', Load(), lineno=142, col_offset=11), 'type', Load(), lineno=142, col_offset=11), [Eq()], [Attribute(Name('token', Load(), lineno=142, col_offset=24), 'STRING', Load(), lineno=142, col_offset=24)], lineno=142, col_offset=11), [Assign([Name('value', Store(), lineno=143, col_offset=12)], Call(Name('unicode', Load(), lineno=143, col_offset=20), [Call(Attribute(Name('literals', Load(), lineno=143, col_offset=28), 'evalString', Load(), lineno=143, col_offset=28), [Attribute(Name('node', Load(), lineno=143, col_offset=48), 'value', Load(), lineno=143, col_offset=48)], [], None, None, lineno=143, col_offset=28)], [], None, None, lineno=143, col_offset=20), lineno=143, col_offset=12), Return(Call(Attribute(Name('pytree', Load(), lineno=144, col_offset=19), 'LeafPattern', Load(), lineno=144, col_offset=19), [Call(Name('_type_of_literal', Load(), lineno=144, col_offset=38), [Name('value', Load(), lineno=144, col_offset=55)], [], None, None, lineno=144, col_offset=38), Name('value', Load(), lineno=144, col_offset=63)], [], None, None, lineno=144, col_offset=19), lineno=144, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=145, col_offset=13), 'type', Load(), lineno=145, col_offset=13), [Eq()], [Attribute(Name('token', Load(), lineno=145, col_offset=26), 'NAME', Load(), lineno=145, col_offset=26)], lineno=145, col_offset=13), [Assign([Name('value', Store(), lineno=146, col_offset=12)], Attribute(Name('node', Load(), lineno=146, col_offset=20), 'value', Load(), lineno=146, col_offset=20), lineno=146, col_offset=12), If(Call(Attribute(Name('value', Load(), lineno=147, col_offset=15), 'isupper', Load(), lineno=147, col_offset=15), [], [], None, None, lineno=147, col_offset=15), [If(Compare(Name('value', Load(), lineno=148, col_offset=19), [NotIn()], [Name('TOKEN_MAP', Load(), lineno=148, col_offset=32)], lineno=148, col_offset=19), [Raise(Call(Name('PatternSyntaxError', Load(), lineno=149, col_offset=26), [BinOp(Str('Invalid token: %r', lineno=149, col_offset=45), Mod(), Name('value', Load(), lineno=149, col_offset=67), lineno=149, col_offset=45)], [], None, None, lineno=149, col_offset=26), None, None, lineno=149, col_offset=20)], [], lineno=148, col_offset=16), If(Subscript(Name('nodes', Load(), lineno=150, col_offset=19), Slice(Num(1, lineno=150, col_offset=25), None, None), Load(), lineno=150, col_offset=19), [Raise(Call(Name('PatternSyntaxError', Load(), lineno=151, col_offset=26), [Str("Can't have details for token", lineno=151, col_offset=45)], [], None, None, lineno=151, col_offset=26), None, None, lineno=151, col_offset=20)], [], lineno=150, col_offset=16), Return(Call(Attribute(Name('pytree', Load(), lineno=152, col_offset=23), 'LeafPattern', Load(), lineno=152, col_offset=23), [Subscript(Name('TOKEN_MAP', Load(), lineno=152, col_offset=42), Index(Name('value', Load(), lineno=152, col_offset=52)), Load(), lineno=152, col_offset=42)], [], None, None, lineno=152, col_offset=23), lineno=152, col_offset=16)], [If(Compare(Name('value', Load(), lineno=154, col_offset=19), [Eq()], [Str('any', lineno=154, col_offset=28)], lineno=154, col_offset=19), [Assign([Name('type', Store(), lineno=155, col_offset=20)], Name('None', Load(), lineno=155, col_offset=27), lineno=155, col_offset=20)], [If(UnaryOp(Not(), Call(Attribute(Name('value', Load(), lineno=156, col_offset=25), 'startswith', Load(), lineno=156, col_offset=25), [Str('_', lineno=156, col_offset=42)], [], None, None, lineno=156, col_offset=25), lineno=156, col_offset=21), [Assign([Name('type', Store(), lineno=157, col_offset=20)], Call(Name('getattr', Load(), lineno=157, col_offset=27), [Attribute(Name('self', Load(), lineno=157, col_offset=35), 'pysyms', Load(), lineno=157, col_offset=35), Name('value', Load(), lineno=157, col_offset=48), Name('None', Load(), lineno=157, col_offset=55)], [], None, None, lineno=157, col_offset=27), lineno=157, col_offset=20), If(Compare(Name('type', Load(), lineno=158, col_offset=23), [Is()], [Name('None', Load(), lineno=158, col_offset=31)], lineno=158, col_offset=23), [Raise(Call(Name('PatternSyntaxError', Load(), lineno=159, col_offset=30), [BinOp(Str('Invalid symbol: %r', lineno=159, col_offset=49), Mod(), Name('value', Load(), lineno=159, col_offset=72), lineno=159, col_offset=49)], [], None, None, lineno=159, col_offset=30), None, None, lineno=159, col_offset=24)], [], lineno=158, col_offset=20)], [], lineno=156, col_offset=21)], lineno=154, col_offset=16), If(Subscript(Name('nodes', Load(), lineno=160, col_offset=19), Slice(Num(1, lineno=160, col_offset=25), None, None), Load(), lineno=160, col_offset=19), [Assign([Name('content', Store(), lineno=161, col_offset=20)], List([Call(Attribute(Name('self', Load(), lineno=161, col_offset=31), 'compile_node', Load(), lineno=161, col_offset=31), [Subscript(Attribute(Subscript(Name('nodes', Load(), lineno=161, col_offset=49), Index(Num(1, lineno=161, col_offset=55)), Load(), lineno=161, col_offset=49), 'children', Load(), lineno=161, col_offset=49), Index(Num(1, lineno=161, col_offset=67)), Load(), lineno=161, col_offset=49)], [], None, None, lineno=161, col_offset=31)], Load(), lineno=161, col_offset=30), lineno=161, col_offset=20)], [Assign([Name('content', Store(), lineno=163, col_offset=20)], Name('None', Load(), lineno=163, col_offset=30), lineno=163, col_offset=20)], lineno=160, col_offset=16), Return(Call(Attribute(Name('pytree', Load(), lineno=164, col_offset=23), 'NodePattern', Load(), lineno=164, col_offset=23), [Name('type', Load(), lineno=164, col_offset=42), Name('content', Load(), lineno=164, col_offset=48)], [], None, None, lineno=164, col_offset=23), lineno=164, col_offset=16)], lineno=147, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=165, col_offset=13), 'value', Load(), lineno=165, col_offset=13), [Eq()], [Str('(', lineno=165, col_offset=27)], lineno=165, col_offset=13), [Return(Call(Attribute(Name('self', Load(), lineno=166, col_offset=19), 'compile_node', Load(), lineno=166, col_offset=19), [Subscript(Name('nodes', Load(), lineno=166, col_offset=37), Index(Num(1, lineno=166, col_offset=43)), Load(), lineno=166, col_offset=37)], [], None, None, lineno=166, col_offset=19), lineno=166, col_offset=12)], [If(Compare(Attribute(Name('node', Load(), lineno=167, col_offset=13), 'value', Load(), lineno=167, col_offset=13), [Eq()], [Str('[', lineno=167, col_offset=27)], lineno=167, col_offset=13), [Assert(Compare(Name('repeat', Load(), lineno=168, col_offset=19), [Is()], [Name('None', Load(), lineno=168, col_offset=29)], lineno=168, col_offset=19), None, lineno=168, col_offset=12), Assign([Name('subpattern', Store(), lineno=169, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=169, col_offset=25), 'compile_node', Load(), lineno=169, col_offset=25), [Subscript(Name('nodes', Load(), lineno=169, col_offset=43), Index(Num(1, lineno=169, col_offset=49)), Load(), lineno=169, col_offset=43)], [], None, None, lineno=169, col_offset=25), lineno=169, col_offset=12), Return(Call(Attribute(Name('pytree', Load(), lineno=170, col_offset=19), 'WildcardPattern', Load(), lineno=170, col_offset=19), [List([List([Name('subpattern', Load(), lineno=170, col_offset=44)], Load(), lineno=170, col_offset=43)], Load(), lineno=170, col_offset=42)], [keyword('min', Num(0, lineno=170, col_offset=62)), keyword('max', Num(1, lineno=170, col_offset=69))], None, None, lineno=170, col_offset=19), lineno=170, col_offset=12)], [], lineno=167, col_offset=13)], lineno=165, col_offset=13)], lineno=145, col_offset=13)], lineno=142, col_offset=8), Assert(Name('False', Load(), lineno=171, col_offset=15), Name('node', Load(), lineno=171, col_offset=22), lineno=171, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('get_int', arguments([Name('self', Param(), lineno=173, col_offset=16), Name('node', Param(), lineno=173, col_offset=22)], None, None, []), [Assert(Compare(Attribute(Name('node', Load(), lineno=174, col_offset=15), 'type', Load(), lineno=174, col_offset=15), [Eq()], [Attribute(Name('token', Load(), lineno=174, col_offset=28), 'NUMBER', Load(), lineno=174, col_offset=28)], lineno=174, col_offset=15), None, lineno=174, col_offset=8), Return(Call(Name('int', Load(), lineno=175, col_offset=15), [Attribute(Name('node', Load(), lineno=175, col_offset=19), 'value', Load(), lineno=175, col_offset=19)], [], None, None, lineno=175, col_offset=15), lineno=175, col_offset=8)], [], lineno=173, col_offset=4)], [], lineno=42, col_offset=0), Assign([Name('TOKEN_MAP', Store(), lineno=179, col_offset=0)], Dict([Str('NAME', lineno=179, col_offset=13), Str('STRING', lineno=180, col_offset=13), Str('NUMBER', lineno=181, col_offset=13), Str('TOKEN', lineno=182, col_offset=13)], [Attribute(Name('token', Load(), lineno=179, col_offset=21), 'NAME', Load(), lineno=179, col_offset=21), Attribute(Name('token', Load(), lineno=180, col_offset=23), 'STRING', Load(), lineno=180, col_offset=23), Attribute(Name('token', Load(), lineno=181, col_offset=23), 'NUMBER', Load(), lineno=181, col_offset=23), Name('None', Load(), lineno=182, col_offset=22)], lineno=179, col_offset=12), lineno=179, col_offset=0), FunctionDef('_type_of_literal', arguments([Name('value', Param(), lineno=185, col_offset=21)], None, None, []), [If(Call(Attribute(Subscript(Name('value', Load(), lineno=186, col_offset=7), Index(Num(0, lineno=186, col_offset=13)), Load(), lineno=186, col_offset=7), 'isalpha', Load(), lineno=186, col_offset=7), [], [], None, None, lineno=186, col_offset=7), [Return(Attribute(Name('token', Load(), lineno=187, col_offset=15), 'NAME', Load(), lineno=187, col_offset=15), lineno=187, col_offset=8)], [If(Compare(Name('value', Load(), lineno=188, col_offset=9), [In()], [Attribute(Name('grammar', Load(), lineno=188, col_offset=18), 'opmap', Load(), lineno=188, col_offset=18)], lineno=188, col_offset=9), [Return(Subscript(Attribute(Name('grammar', Load(), lineno=189, col_offset=15), 'opmap', Load(), lineno=189, col_offset=15), Index(Name('value', Load(), lineno=189, col_offset=29)), Load(), lineno=189, col_offset=15), lineno=189, col_offset=8)], [Return(Name('None', Load(), lineno=191, col_offset=15), lineno=191, col_offset=8)], lineno=188, col_offset=9)], lineno=186, col_offset=4)], [], lineno=185, col_offset=0), FunctionDef('pattern_convert', arguments([Name('grammar', Param(), lineno=194, col_offset=20), Name('raw_node_info', Param(), lineno=194, col_offset=29)], None, None, []), [Expr(Str('Converts raw node information to a Node or Leaf instance.', lineno=195, col_offset=4), lineno=195, col_offset=4), Assign([Tuple([Name('type', Store(), lineno=196, col_offset=4), Name('value', Store(), lineno=196, col_offset=10), Name('context', Store(), lineno=196, col_offset=17), Name('children', Store(), lineno=196, col_offset=26)], Store(), lineno=196, col_offset=4)], Name('raw_node_info', Load(), lineno=196, col_offset=37), lineno=196, col_offset=4), If(BoolOp(Or(), [Name('children', Load(), lineno=197, col_offset=7), Compare(Name('type', Load(), lineno=197, col_offset=19), [In()], [Attribute(Name('grammar', Load(), lineno=197, col_offset=27), 'number2symbol', Load(), lineno=197, col_offset=27)], lineno=197, col_offset=19)], lineno=197, col_offset=7), [Return(Call(Attribute(Name('pytree', Load(), lineno=198, col_offset=15), 'Node', Load(), lineno=198, col_offset=15), [Name('type', Load(), lineno=198, col_offset=27), Name('children', Load(), lineno=198, col_offset=33)], [keyword('context', Name('context', Load(), lineno=198, col_offset=51))], None, None, lineno=198, col_offset=15), lineno=198, col_offset=8)], [Return(Call(Attribute(Name('pytree', Load(), lineno=200, col_offset=15), 'Leaf', Load(), lineno=200, col_offset=15), [Name('type', Load(), lineno=200, col_offset=27), Name('value', Load(), lineno=200, col_offset=33)], [keyword('context', Name('context', Load(), lineno=200, col_offset=48))], None, None, lineno=200, col_offset=15), lineno=200, col_offset=8)], lineno=197, col_offset=4)], [], lineno=194, col_offset=0), FunctionDef('compile_pattern', arguments([Name('pattern', Param(), lineno=203, col_offset=20)], None, None, []), [Return(Call(Attribute(Call(Name('PatternCompiler', Load(), lineno=204, col_offset=11), [], [], None, None, lineno=204, col_offset=11), 'compile_pattern', Load(), lineno=204, col_offset=11), [Name('pattern', Load(), lineno=204, col_offset=45)], [], None, None, lineno=204, col_offset=11), lineno=204, col_offset=4)], [], lineno=203, col_offset=0)])
