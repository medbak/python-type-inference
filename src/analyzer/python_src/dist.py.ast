Module([Expr(Str('distutils.dist\n\nProvides the Distribution class, which represents the module distribution\nbeing built/installed/distributed.\n', lineno=5, col_offset=-1), lineno=5, col_offset=-1), Assign([Name('__revision__', Store(), lineno=7, col_offset=0)], Str('$Id: dist.py 86238 2010-11-06 04:06:18Z eric.araujo $', lineno=7, col_offset=15), lineno=7, col_offset=0), Import([alias('sys', None), alias('os', None), alias('re', None)], lineno=9, col_offset=0), ImportFrom('email', [alias('message_from_file', None)], 0, lineno=10, col_offset=0), TryExcept([Import([alias('warnings', None)], lineno=13, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=14, col_offset=7), None, [Assign([Name('warnings', Store(), lineno=15, col_offset=4)], Name('None', Load(), lineno=15, col_offset=15), lineno=15, col_offset=4)], lineno=14, col_offset=0)], [], lineno=12, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsOptionError', None), alias('DistutilsArgError', None), alias('DistutilsModuleError', None), alias('DistutilsClassError', None)], 0, lineno=17, col_offset=0), ImportFrom('distutils.fancy_getopt', [alias('FancyGetopt', None), alias('translate_longopt', None)], 0, lineno=19, col_offset=0), ImportFrom('distutils.util', [alias('check_environ', None), alias('strtobool', None), alias('rfc822_escape', None)], 0, lineno=20, col_offset=0), ImportFrom('distutils', [alias('log', None)], 0, lineno=21, col_offset=0), ImportFrom('distutils.debug', [alias('DEBUG', None)], 0, lineno=22, col_offset=0), Assign([Name('PKG_INFO_ENCODING', Store(), lineno=25, col_offset=0)], Str('utf-8', lineno=25, col_offset=20), lineno=25, col_offset=0), Assign([Name('command_re', Store(), lineno=31, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=31, col_offset=13), 'compile', Load(), lineno=31, col_offset=13), [Str('^[a-zA-Z]([a-zA-Z0-9_]*)$', lineno=31, col_offset=25)], [], None, None, lineno=31, col_offset=13), lineno=31, col_offset=0), ClassDef('Distribution', [], [Expr(Str("The core of the Distutils.  Most of the work hiding behind 'setup'\n    is really done within a Distribution instance, which farms the work out\n    to the Distutils commands specified on the command line.\n\n    Setup scripts will almost never instantiate Distribution directly,\n    unless the 'setup()' function is totally inadequate to their needs.\n    However, it is conceivable that a setup script might wish to subclass\n    Distribution for some specialized purpose, and then pass the subclass\n    to 'setup()' as the 'distclass' keyword argument.  If so, it is\n    necessary to respect the expectations that 'setup' has of Distribution.\n    See the code for 'setup()', in core.py, for details.\n    ", lineno=46, col_offset=-1), lineno=46, col_offset=-1), Assign([Name('global_options', Store(), lineno=57, col_offset=4)], List([Tuple([Str('verbose', lineno=57, col_offset=23), Str('v', lineno=57, col_offset=34), Str('run verbosely (default)', lineno=57, col_offset=39), Num(1, lineno=57, col_offset=66)], Load(), lineno=57, col_offset=23), Tuple([Str('quiet', lineno=58, col_offset=23), Str('q', lineno=58, col_offset=32), Str('run quietly (turns verbosity off)', lineno=58, col_offset=37)], Load(), lineno=58, col_offset=23), Tuple([Str('dry-run', lineno=59, col_offset=23), Str('n', lineno=59, col_offset=34), Str("don't actually do anything", lineno=59, col_offset=39)], Load(), lineno=59, col_offset=23), Tuple([Str('help', lineno=60, col_offset=23), Str('h', lineno=60, col_offset=31), Str('show detailed help message', lineno=60, col_offset=36)], Load(), lineno=60, col_offset=23), Tuple([Str('no-user-cfg', lineno=61, col_offset=23), Name('None', Load(), lineno=61, col_offset=38), Str('ignore pydistutils.cfg in your home directory', lineno=62, col_offset=23)], Load(), lineno=61, col_offset=23)], Load(), lineno=57, col_offset=21), lineno=57, col_offset=4), Assign([Name('common_usage', Store(), lineno=67, col_offset=4)], Str("Common commands: (see '--help-commands' for more)\n\n  setup.py build      will build the package underneath 'build/'\n  setup.py install    will install the package\n", lineno=72, col_offset=-1), lineno=67, col_offset=4), Assign([Name('display_options', Store(), lineno=75, col_offset=4)], List([Tuple([Str('help-commands', lineno=76, col_offset=9), Name('None', Load(), lineno=76, col_offset=26), Str('list all available commands', lineno=77, col_offset=9)], Load(), lineno=76, col_offset=9), Tuple([Str('name', lineno=78, col_offset=9), Name('None', Load(), lineno=78, col_offset=17), Str('print package name', lineno=79, col_offset=9)], Load(), lineno=78, col_offset=9), Tuple([Str('version', lineno=80, col_offset=9), Str('V', lineno=80, col_offset=20), Str('print package version', lineno=81, col_offset=9)], Load(), lineno=80, col_offset=9), Tuple([Str('fullname', lineno=82, col_offset=9), Name('None', Load(), lineno=82, col_offset=21), Str('print <package name>-<version>', lineno=83, col_offset=9)], Load(), lineno=82, col_offset=9), Tuple([Str('author', lineno=84, col_offset=9), Name('None', Load(), lineno=84, col_offset=19), Str("print the author's name", lineno=85, col_offset=9)], Load(), lineno=84, col_offset=9), Tuple([Str('author-email', lineno=86, col_offset=9), Name('None', Load(), lineno=86, col_offset=25), Str("print the author's email address", lineno=87, col_offset=9)], Load(), lineno=86, col_offset=9), Tuple([Str('maintainer', lineno=88, col_offset=9), Name('None', Load(), lineno=88, col_offset=23), Str("print the maintainer's name", lineno=89, col_offset=9)], Load(), lineno=88, col_offset=9), Tuple([Str('maintainer-email', lineno=90, col_offset=9), Name('None', Load(), lineno=90, col_offset=29), Str("print the maintainer's email address", lineno=91, col_offset=9)], Load(), lineno=90, col_offset=9), Tuple([Str('contact', lineno=92, col_offset=9), Name('None', Load(), lineno=92, col_offset=20), Str("print the maintainer's name if known, else the author's", lineno=93, col_offset=9)], Load(), lineno=92, col_offset=9), Tuple([Str('contact-email', lineno=94, col_offset=9), Name('None', Load(), lineno=94, col_offset=26), Str("print the maintainer's email address if known, else the author's", lineno=95, col_offset=9)], Load(), lineno=94, col_offset=9), Tuple([Str('url', lineno=96, col_offset=9), Name('None', Load(), lineno=96, col_offset=16), Str('print the URL for this package', lineno=97, col_offset=9)], Load(), lineno=96, col_offset=9), Tuple([Str('license', lineno=98, col_offset=9), Name('None', Load(), lineno=98, col_offset=20), Str('print the license of the package', lineno=99, col_offset=9)], Load(), lineno=98, col_offset=9), Tuple([Str('licence', lineno=100, col_offset=9), Name('None', Load(), lineno=100, col_offset=20), Str('alias for --license', lineno=101, col_offset=9)], Load(), lineno=100, col_offset=9), Tuple([Str('description', lineno=102, col_offset=9), Name('None', Load(), lineno=102, col_offset=24), Str('print the package description', lineno=103, col_offset=9)], Load(), lineno=102, col_offset=9), Tuple([Str('long-description', lineno=104, col_offset=9), Name('None', Load(), lineno=104, col_offset=29), Str('print the long package description', lineno=105, col_offset=9)], Load(), lineno=104, col_offset=9), Tuple([Str('platforms', lineno=106, col_offset=9), Name('None', Load(), lineno=106, col_offset=22), Str('print the list of platforms', lineno=107, col_offset=9)], Load(), lineno=106, col_offset=9), Tuple([Str('classifiers', lineno=108, col_offset=9), Name('None', Load(), lineno=108, col_offset=24), Str('print the list of classifiers', lineno=109, col_offset=9)], Load(), lineno=108, col_offset=9), Tuple([Str('keywords', lineno=110, col_offset=9), Name('None', Load(), lineno=110, col_offset=21), Str('print the list of keywords', lineno=111, col_offset=9)], Load(), lineno=110, col_offset=9), Tuple([Str('provides', lineno=112, col_offset=9), Name('None', Load(), lineno=112, col_offset=21), Str('print the list of packages/modules provided', lineno=113, col_offset=9)], Load(), lineno=112, col_offset=9), Tuple([Str('requires', lineno=114, col_offset=9), Name('None', Load(), lineno=114, col_offset=21), Str('print the list of packages/modules required', lineno=115, col_offset=9)], Load(), lineno=114, col_offset=9), Tuple([Str('obsoletes', lineno=116, col_offset=9), Name('None', Load(), lineno=116, col_offset=22), Str('print the list of packages/modules made obsolete', lineno=117, col_offset=9)], Load(), lineno=116, col_offset=9)], Load(), lineno=75, col_offset=22), lineno=75, col_offset=4), Assign([Name('display_option_names', Store(), lineno=119, col_offset=4)], Call(Name('map', Load(), lineno=119, col_offset=27), [Lambda(arguments([Name('x', Param(), lineno=119, col_offset=38)], None, None, []), Call(Name('translate_longopt', Load(), lineno=119, col_offset=41), [Subscript(Name('x', Load(), lineno=119, col_offset=59), Index(Num(0, lineno=119, col_offset=61)), Load(), lineno=119, col_offset=59)], [], None, None, lineno=119, col_offset=41), lineno=119, col_offset=31), Name('display_options', Load(), lineno=120, col_offset=31)], [], None, None, lineno=119, col_offset=27), lineno=119, col_offset=4), Assign([Name('negative_opt', Store(), lineno=123, col_offset=4)], Dict([Str('quiet', lineno=123, col_offset=20)], [Str('verbose', lineno=123, col_offset=29)], lineno=123, col_offset=19), lineno=123, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=128, col_offset=18), Name('attrs', Param(), lineno=128, col_offset=24)], None, None, [Name('None', Load(), lineno=128, col_offset=30)]), [Expr(Str('Construct a new Distribution instance: initialize all the\n        attributes of a Distribution, and then use \'attrs\' (a dictionary\n        mapping attribute names to values) to assign some of those\n        attributes their "real" values.  (Any attributes not mentioned in\n        \'attrs\' will be assigned to some null value: 0, None, an empty list\n        or dictionary, etc.)  Most importantly, initialize the\n        \'command_obj\' attribute to the empty dictionary; this will be\n        filled in with real command objects by \'parse_command_line()\'.\n        ', lineno=137, col_offset=-1), lineno=137, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=140, col_offset=8), 'verbose', Store(), lineno=140, col_offset=8)], Num(1, lineno=140, col_offset=23), lineno=140, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=141, col_offset=8), 'dry_run', Store(), lineno=141, col_offset=8)], Num(0, lineno=141, col_offset=23), lineno=141, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=142, col_offset=8), 'help', Store(), lineno=142, col_offset=8)], Num(0, lineno=142, col_offset=20), lineno=142, col_offset=8), For(Name('attr', Store(), lineno=143, col_offset=12), Attribute(Name('self', Load(), lineno=143, col_offset=20), 'display_option_names', Load(), lineno=143, col_offset=20), [Expr(Call(Name('setattr', Load(), lineno=144, col_offset=12), [Name('self', Load(), lineno=144, col_offset=20), Name('attr', Load(), lineno=144, col_offset=26), Num(0, lineno=144, col_offset=32)], [], None, None, lineno=144, col_offset=12), lineno=144, col_offset=12)], [], lineno=143, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=151, col_offset=8), 'metadata', Store(), lineno=151, col_offset=8)], Call(Name('DistributionMetadata', Load(), lineno=151, col_offset=24), [], [], None, None, lineno=151, col_offset=24), lineno=151, col_offset=8), For(Name('basename', Store(), lineno=152, col_offset=12), Attribute(Attribute(Name('self', Load(), lineno=152, col_offset=24), 'metadata', Load(), lineno=152, col_offset=24), '_METHOD_BASENAMES', Load(), lineno=152, col_offset=24), [Assign([Name('method_name', Store(), lineno=153, col_offset=12)], BinOp(Str('get_', lineno=153, col_offset=26), Add(), Name('basename', Load(), lineno=153, col_offset=35), lineno=153, col_offset=26), lineno=153, col_offset=12), Expr(Call(Name('setattr', Load(), lineno=154, col_offset=12), [Name('self', Load(), lineno=154, col_offset=20), Name('method_name', Load(), lineno=154, col_offset=26), Call(Name('getattr', Load(), lineno=154, col_offset=39), [Attribute(Name('self', Load(), lineno=154, col_offset=47), 'metadata', Load(), lineno=154, col_offset=47), Name('method_name', Load(), lineno=154, col_offset=62)], [], None, None, lineno=154, col_offset=39)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=12)], [], lineno=152, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=160, col_offset=8), 'cmdclass', Store(), lineno=160, col_offset=8)], Dict([], [], lineno=160, col_offset=24), lineno=160, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=168, col_offset=8), 'command_packages', Store(), lineno=168, col_offset=8)], Name('None', Load(), lineno=168, col_offset=32), lineno=168, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=173, col_offset=8), 'script_name', Store(), lineno=173, col_offset=8)], Name('None', Load(), lineno=173, col_offset=27), lineno=173, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=174, col_offset=8), 'script_args', Store(), lineno=174, col_offset=8)], Name('None', Load(), lineno=174, col_offset=27), lineno=174, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=181, col_offset=8), 'command_options', Store(), lineno=181, col_offset=8)], Dict([], [], lineno=181, col_offset=31), lineno=181, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=192, col_offset=8), 'dist_files', Store(), lineno=192, col_offset=8)], List([], Load(), lineno=192, col_offset=26), lineno=192, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=197, col_offset=8), 'packages', Store(), lineno=197, col_offset=8)], Name('None', Load(), lineno=197, col_offset=24), lineno=197, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=198, col_offset=8), 'package_data', Store(), lineno=198, col_offset=8)], Dict([], [], lineno=198, col_offset=28), lineno=198, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=199, col_offset=8), 'package_dir', Store(), lineno=199, col_offset=8)], Name('None', Load(), lineno=199, col_offset=27), lineno=199, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=200, col_offset=8), 'py_modules', Store(), lineno=200, col_offset=8)], Name('None', Load(), lineno=200, col_offset=26), lineno=200, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=201, col_offset=8), 'libraries', Store(), lineno=201, col_offset=8)], Name('None', Load(), lineno=201, col_offset=25), lineno=201, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=202, col_offset=8), 'headers', Store(), lineno=202, col_offset=8)], Name('None', Load(), lineno=202, col_offset=23), lineno=202, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=203, col_offset=8), 'ext_modules', Store(), lineno=203, col_offset=8)], Name('None', Load(), lineno=203, col_offset=27), lineno=203, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=204, col_offset=8), 'ext_package', Store(), lineno=204, col_offset=8)], Name('None', Load(), lineno=204, col_offset=27), lineno=204, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=205, col_offset=8), 'include_dirs', Store(), lineno=205, col_offset=8)], Name('None', Load(), lineno=205, col_offset=28), lineno=205, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=206, col_offset=8), 'extra_path', Store(), lineno=206, col_offset=8)], Name('None', Load(), lineno=206, col_offset=26), lineno=206, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=207, col_offset=8), 'scripts', Store(), lineno=207, col_offset=8)], Name('None', Load(), lineno=207, col_offset=23), lineno=207, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=208, col_offset=8), 'data_files', Store(), lineno=208, col_offset=8)], Name('None', Load(), lineno=208, col_offset=26), lineno=208, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=209, col_offset=8), 'password', Store(), lineno=209, col_offset=8)], Str('', lineno=209, col_offset=24), lineno=209, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=215, col_offset=8), 'command_obj', Store(), lineno=215, col_offset=8)], Dict([], [], lineno=215, col_offset=27), lineno=215, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=227, col_offset=8), 'have_run', Store(), lineno=227, col_offset=8)], Dict([], [], lineno=227, col_offset=24), lineno=227, col_offset=8), If(Name('attrs', Load(), lineno=233, col_offset=11), [Assign([Name('options', Store(), lineno=238, col_offset=12)], Call(Attribute(Name('attrs', Load(), lineno=238, col_offset=22), 'get', Load(), lineno=238, col_offset=22), [Str('options', lineno=238, col_offset=32)], [], None, None, lineno=238, col_offset=22), lineno=238, col_offset=12), If(Compare(Name('options', Load(), lineno=239, col_offset=15), [IsNot()], [Name('None', Load(), lineno=239, col_offset=30)], lineno=239, col_offset=15), [Delete([Subscript(Name('attrs', Load(), lineno=240, col_offset=20), Index(Str('options', lineno=240, col_offset=26)), Del(), lineno=240, col_offset=20)], lineno=240, col_offset=16), For(Tuple([Name('command', Store(), lineno=241, col_offset=21), Name('cmd_options', Store(), lineno=241, col_offset=30)], Store(), lineno=241, col_offset=21), Call(Attribute(Name('options', Load(), lineno=241, col_offset=46), 'items', Load(), lineno=241, col_offset=46), [], [], None, None, lineno=241, col_offset=46), [Assign([Name('opt_dict', Store(), lineno=242, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=242, col_offset=31), 'get_option_dict', Load(), lineno=242, col_offset=31), [Name('command', Load(), lineno=242, col_offset=52)], [], None, None, lineno=242, col_offset=31), lineno=242, col_offset=20), For(Tuple([Name('opt', Store(), lineno=243, col_offset=25), Name('val', Store(), lineno=243, col_offset=30)], Store(), lineno=243, col_offset=25), Call(Attribute(Name('cmd_options', Load(), lineno=243, col_offset=38), 'items', Load(), lineno=243, col_offset=38), [], [], None, None, lineno=243, col_offset=38), [Assign([Subscript(Name('opt_dict', Load(), lineno=244, col_offset=24), Index(Name('opt', Load(), lineno=244, col_offset=33)), Store(), lineno=244, col_offset=24)], Tuple([Str('setup script', lineno=244, col_offset=41), Name('val', Load(), lineno=244, col_offset=57)], Load(), lineno=244, col_offset=41), lineno=244, col_offset=24)], [], lineno=243, col_offset=20)], [], lineno=241, col_offset=16)], [], lineno=239, col_offset=12), If(Compare(Str('licence', lineno=246, col_offset=15), [In()], [Name('attrs', Load(), lineno=246, col_offset=28)], lineno=246, col_offset=15), [Assign([Subscript(Name('attrs', Load(), lineno=247, col_offset=16), Index(Str('license', lineno=247, col_offset=22)), Store(), lineno=247, col_offset=16)], Subscript(Name('attrs', Load(), lineno=247, col_offset=35), Index(Str('licence', lineno=247, col_offset=41)), Load(), lineno=247, col_offset=35), lineno=247, col_offset=16), Delete([Subscript(Name('attrs', Load(), lineno=248, col_offset=20), Index(Str('licence', lineno=248, col_offset=26)), Del(), lineno=248, col_offset=20)], lineno=248, col_offset=16), Assign([Name('msg', Store(), lineno=249, col_offset=16)], Str("'licence' distribution option is deprecated; use 'license'", lineno=249, col_offset=22), lineno=249, col_offset=16), If(Compare(Name('warnings', Load(), lineno=250, col_offset=19), [IsNot()], [Name('None', Load(), lineno=250, col_offset=35)], lineno=250, col_offset=19), [Expr(Call(Attribute(Name('warnings', Load(), lineno=251, col_offset=20), 'warn', Load(), lineno=251, col_offset=20), [Name('msg', Load(), lineno=251, col_offset=34)], [], None, None, lineno=251, col_offset=20), lineno=251, col_offset=20)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=253, col_offset=20), 'stderr', Load(), lineno=253, col_offset=20), 'write', Load(), lineno=253, col_offset=20), [BinOp(Name('msg', Load(), lineno=253, col_offset=37), Add(), Str('\n', lineno=253, col_offset=43), lineno=253, col_offset=37)], [], None, None, lineno=253, col_offset=20), lineno=253, col_offset=20)], lineno=250, col_offset=16)], [], lineno=246, col_offset=12), For(Tuple([Name('key', Store(), lineno=257, col_offset=17), Name('val', Store(), lineno=257, col_offset=22)], Store(), lineno=257, col_offset=17), Call(Attribute(Name('attrs', Load(), lineno=257, col_offset=30), 'items', Load(), lineno=257, col_offset=30), [], [], None, None, lineno=257, col_offset=30), [If(Call(Name('hasattr', Load(), lineno=258, col_offset=19), [Attribute(Name('self', Load(), lineno=258, col_offset=27), 'metadata', Load(), lineno=258, col_offset=27), BinOp(Str('set_', lineno=258, col_offset=42), Add(), Name('key', Load(), lineno=258, col_offset=51), lineno=258, col_offset=42)], [], None, None, lineno=258, col_offset=19), [Expr(Call(Call(Name('getattr', Load(), lineno=259, col_offset=20), [Attribute(Name('self', Load(), lineno=259, col_offset=28), 'metadata', Load(), lineno=259, col_offset=28), BinOp(Str('set_', lineno=259, col_offset=43), Add(), Name('key', Load(), lineno=259, col_offset=52), lineno=259, col_offset=43)], [], None, None, lineno=259, col_offset=20), [Name('val', Load(), lineno=259, col_offset=57)], [], None, None, lineno=259, col_offset=20), lineno=259, col_offset=20)], [If(Call(Name('hasattr', Load(), lineno=260, col_offset=21), [Attribute(Name('self', Load(), lineno=260, col_offset=29), 'metadata', Load(), lineno=260, col_offset=29), Name('key', Load(), lineno=260, col_offset=44)], [], None, None, lineno=260, col_offset=21), [Expr(Call(Name('setattr', Load(), lineno=261, col_offset=20), [Attribute(Name('self', Load(), lineno=261, col_offset=28), 'metadata', Load(), lineno=261, col_offset=28), Name('key', Load(), lineno=261, col_offset=43), Name('val', Load(), lineno=261, col_offset=48)], [], None, None, lineno=261, col_offset=20), lineno=261, col_offset=20)], [If(Call(Name('hasattr', Load(), lineno=262, col_offset=21), [Name('self', Load(), lineno=262, col_offset=29), Name('key', Load(), lineno=262, col_offset=35)], [], None, None, lineno=262, col_offset=21), [Expr(Call(Name('setattr', Load(), lineno=263, col_offset=20), [Name('self', Load(), lineno=263, col_offset=28), Name('key', Load(), lineno=263, col_offset=34), Name('val', Load(), lineno=263, col_offset=39)], [], None, None, lineno=263, col_offset=20), lineno=263, col_offset=20)], [Assign([Name('msg', Store(), lineno=265, col_offset=20)], BinOp(Str('Unknown distribution option: %s', lineno=265, col_offset=26), Mod(), Call(Name('repr', Load(), lineno=265, col_offset=62), [Name('key', Load(), lineno=265, col_offset=67)], [], None, None, lineno=265, col_offset=62), lineno=265, col_offset=26), lineno=265, col_offset=20), If(Compare(Name('warnings', Load(), lineno=266, col_offset=23), [IsNot()], [Name('None', Load(), lineno=266, col_offset=39)], lineno=266, col_offset=23), [Expr(Call(Attribute(Name('warnings', Load(), lineno=267, col_offset=24), 'warn', Load(), lineno=267, col_offset=24), [Name('msg', Load(), lineno=267, col_offset=38)], [], None, None, lineno=267, col_offset=24), lineno=267, col_offset=24)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=269, col_offset=24), 'stderr', Load(), lineno=269, col_offset=24), 'write', Load(), lineno=269, col_offset=24), [BinOp(Name('msg', Load(), lineno=269, col_offset=41), Add(), Str('\n', lineno=269, col_offset=47), lineno=269, col_offset=41)], [], None, None, lineno=269, col_offset=24), lineno=269, col_offset=24)], lineno=266, col_offset=20)], lineno=262, col_offset=21)], lineno=260, col_offset=21)], lineno=258, col_offset=16)], [], lineno=257, col_offset=12)], [], lineno=233, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=277, col_offset=8), 'want_user_cfg', Store(), lineno=277, col_offset=8)], Name('True', Load(), lineno=277, col_offset=29), lineno=277, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=279, col_offset=11), 'script_args', Load(), lineno=279, col_offset=11), [IsNot()], [Name('None', Load(), lineno=279, col_offset=35)], lineno=279, col_offset=11), [For(Name('arg', Store(), lineno=280, col_offset=16), Attribute(Name('self', Load(), lineno=280, col_offset=23), 'script_args', Load(), lineno=280, col_offset=23), [If(UnaryOp(Not(), Call(Attribute(Name('arg', Load(), lineno=281, col_offset=23), 'startswith', Load(), lineno=281, col_offset=23), [Str('-', lineno=281, col_offset=38)], [], None, None, lineno=281, col_offset=23), lineno=281, col_offset=19), [Break( lineno=282, col_offset=20)], [], lineno=281, col_offset=16), If(Compare(Name('arg', Load(), lineno=283, col_offset=19), [Eq()], [Str('--no-user-cfg', lineno=283, col_offset=26)], lineno=283, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=284, col_offset=20), 'want_user_cfg', Store(), lineno=284, col_offset=20)], Name('False', Load(), lineno=284, col_offset=41), lineno=284, col_offset=20), Break( lineno=285, col_offset=20)], [], lineno=283, col_offset=16)], [], lineno=280, col_offset=12)], [], lineno=279, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=287, col_offset=8), 'finalize_options', Load(), lineno=287, col_offset=8), [], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('get_option_dict', arguments([Name('self', Param(), lineno=289, col_offset=24), Name('command', Param(), lineno=289, col_offset=30)], None, None, []), [Expr(Str("Get the option dictionary for a given command.  If that\n        command's option dictionary hasn't been created yet, then create it\n        and return the new dictionary; otherwise, return the existing\n        option dictionary.\n        ", lineno=294, col_offset=-1), lineno=294, col_offset=-1), Assign([Name('dict', Store(), lineno=295, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=295, col_offset=15), 'command_options', Load(), lineno=295, col_offset=15), 'get', Load(), lineno=295, col_offset=15), [Name('command', Load(), lineno=295, col_offset=40)], [], None, None, lineno=295, col_offset=15), lineno=295, col_offset=8), If(Compare(Name('dict', Load(), lineno=296, col_offset=11), [Is()], [Name('None', Load(), lineno=296, col_offset=19)], lineno=296, col_offset=11), [Assign([Name('dict', Store(), lineno=297, col_offset=12), Subscript(Attribute(Name('self', Load(), lineno=297, col_offset=19), 'command_options', Load(), lineno=297, col_offset=19), Index(Name('command', Load(), lineno=297, col_offset=40)), Store(), lineno=297, col_offset=19)], Dict([], [], lineno=297, col_offset=51), lineno=297, col_offset=12)], [], lineno=296, col_offset=8), Return(Name('dict', Load(), lineno=298, col_offset=15), lineno=298, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('dump_option_dicts', arguments([Name('self', Param(), lineno=300, col_offset=26), Name('header', Param(), lineno=300, col_offset=32), Name('commands', Param(), lineno=300, col_offset=45), Name('indent', Param(), lineno=300, col_offset=60)], None, None, [Name('None', Load(), lineno=300, col_offset=39), Name('None', Load(), lineno=300, col_offset=54), Str('', lineno=300, col_offset=67)]), [ImportFrom('pprint', [alias('pformat', None)], 0, lineno=301, col_offset=8), If(Compare(Name('commands', Load(), lineno=303, col_offset=11), [Is()], [Name('None', Load(), lineno=303, col_offset=23)], lineno=303, col_offset=11), [Assign([Name('commands', Store(), lineno=304, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=304, col_offset=23), 'command_options', Load(), lineno=304, col_offset=23), 'keys', Load(), lineno=304, col_offset=23), [], [], None, None, lineno=304, col_offset=23), lineno=304, col_offset=12), Expr(Call(Attribute(Name('commands', Load(), lineno=305, col_offset=12), 'sort', Load(), lineno=305, col_offset=12), [], [], None, None, lineno=305, col_offset=12), lineno=305, col_offset=12)], [], lineno=303, col_offset=8), If(Compare(Name('header', Load(), lineno=307, col_offset=11), [IsNot()], [Name('None', Load(), lineno=307, col_offset=25)], lineno=307, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=308, col_offset=12), 'announce', Load(), lineno=308, col_offset=12), [BinOp(Name('indent', Load(), lineno=308, col_offset=26), Add(), Name('header', Load(), lineno=308, col_offset=35), lineno=308, col_offset=26)], [], None, None, lineno=308, col_offset=12), lineno=308, col_offset=12), Assign([Name('indent', Store(), lineno=309, col_offset=12)], BinOp(Name('indent', Load(), lineno=309, col_offset=21), Add(), Str('  ', lineno=309, col_offset=30), lineno=309, col_offset=21), lineno=309, col_offset=12)], [], lineno=307, col_offset=8), If(UnaryOp(Not(), Name('commands', Load(), lineno=311, col_offset=15), lineno=311, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=312, col_offset=12), 'announce', Load(), lineno=312, col_offset=12), [BinOp(Name('indent', Load(), lineno=312, col_offset=26), Add(), Str('no commands known yet', lineno=312, col_offset=35), lineno=312, col_offset=26)], [], None, None, lineno=312, col_offset=12), lineno=312, col_offset=12), Return(None, lineno=313, col_offset=12)], [], lineno=311, col_offset=8), For(Name('cmd_name', Store(), lineno=315, col_offset=12), Name('commands', Load(), lineno=315, col_offset=24), [Assign([Name('opt_dict', Store(), lineno=316, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=316, col_offset=23), 'command_options', Load(), lineno=316, col_offset=23), 'get', Load(), lineno=316, col_offset=23), [Name('cmd_name', Load(), lineno=316, col_offset=48)], [], None, None, lineno=316, col_offset=23), lineno=316, col_offset=12), If(Compare(Name('opt_dict', Load(), lineno=317, col_offset=15), [Is()], [Name('None', Load(), lineno=317, col_offset=27)], lineno=317, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=318, col_offset=16), 'announce', Load(), lineno=318, col_offset=16), [BinOp(Name('indent', Load(), lineno=318, col_offset=30), Add(), BinOp(Str("no option dict for '%s' command", lineno=319, col_offset=30), Mod(), Name('cmd_name', Load(), lineno=319, col_offset=66), lineno=319, col_offset=30), lineno=318, col_offset=30)], [], None, None, lineno=318, col_offset=16), lineno=318, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=321, col_offset=16), 'announce', Load(), lineno=321, col_offset=16), [BinOp(Name('indent', Load(), lineno=321, col_offset=30), Add(), BinOp(Str("option dict for '%s' command:", lineno=322, col_offset=30), Mod(), Name('cmd_name', Load(), lineno=322, col_offset=64), lineno=322, col_offset=30), lineno=321, col_offset=30)], [], None, None, lineno=321, col_offset=16), lineno=321, col_offset=16), Assign([Name('out', Store(), lineno=323, col_offset=16)], Call(Name('pformat', Load(), lineno=323, col_offset=22), [Name('opt_dict', Load(), lineno=323, col_offset=30)], [], None, None, lineno=323, col_offset=22), lineno=323, col_offset=16), For(Name('line', Store(), lineno=324, col_offset=20), Call(Attribute(Name('out', Load(), lineno=324, col_offset=28), 'split', Load(), lineno=324, col_offset=28), [Str('\n', lineno=324, col_offset=38)], [], None, None, lineno=324, col_offset=28), [Expr(Call(Attribute(Name('self', Load(), lineno=325, col_offset=20), 'announce', Load(), lineno=325, col_offset=20), [BinOp(BinOp(Name('indent', Load(), lineno=325, col_offset=34), Add(), Str('  ', lineno=325, col_offset=43), lineno=325, col_offset=34), Add(), Name('line', Load(), lineno=325, col_offset=50), lineno=325, col_offset=48)], [], None, None, lineno=325, col_offset=20), lineno=325, col_offset=20)], [], lineno=324, col_offset=16)], lineno=317, col_offset=12)], [], lineno=315, col_offset=8)], [], lineno=300, col_offset=4), FunctionDef('find_config_files', arguments([Name('self', Param(), lineno=329, col_offset=26)], None, None, []), [Expr(Str("Find as many configuration files as should be processed for this\n        platform, and return a list of filenames in the order in which they\n        should be parsed.  The filenames returned are guaranteed to exist\n        (modulo nasty race conditions).\n\n        There are three possible config files: distutils.cfg in the\n        Distutils installation directory (ie. where the top-level\n        Distutils __inst__.py file lives), a file in the user's home\n        directory named .pydistutils.cfg on Unix and pydistutils.cfg\n        on Windows/Mac; and setup.cfg in the current directory.\n\n        The file in the user's home directory can be disabled with the\n        --no-user-cfg option.\n        ", lineno=343, col_offset=-1), lineno=343, col_offset=-1), Assign([Name('files', Store(), lineno=344, col_offset=8)], List([], Load(), lineno=344, col_offset=16), lineno=344, col_offset=8), Expr(Call(Name('check_environ', Load(), lineno=345, col_offset=8), [], [], None, None, lineno=345, col_offset=8), lineno=345, col_offset=8), Assign([Name('sys_dir', Store(), lineno=348, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=348, col_offset=18), 'path', Load(), lineno=348, col_offset=18), 'dirname', Load(), lineno=348, col_offset=18), [Attribute(Subscript(Attribute(Name('sys', Load(), lineno=348, col_offset=34), 'modules', Load(), lineno=348, col_offset=34), Index(Str('distutils', lineno=348, col_offset=46)), Load(), lineno=348, col_offset=34), '__file__', Load(), lineno=348, col_offset=34)], [], None, None, lineno=348, col_offset=18), lineno=348, col_offset=8), Assign([Name('sys_file', Store(), lineno=351, col_offset=8)], Call(Attribute(Attribute(Name('os', Load(), lineno=351, col_offset=19), 'path', Load(), lineno=351, col_offset=19), 'join', Load(), lineno=351, col_offset=19), [Name('sys_dir', Load(), lineno=351, col_offset=32), Str('distutils.cfg', lineno=351, col_offset=41)], [], None, None, lineno=351, col_offset=19), lineno=351, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=352, col_offset=11), 'path', Load(), lineno=352, col_offset=11), 'isfile', Load(), lineno=352, col_offset=11), [Name('sys_file', Load(), lineno=352, col_offset=26)], [], None, None, lineno=352, col_offset=11), [Expr(Call(Attribute(Name('files', Load(), lineno=353, col_offset=12), 'append', Load(), lineno=353, col_offset=12), [Name('sys_file', Load(), lineno=353, col_offset=25)], [], None, None, lineno=353, col_offset=12), lineno=353, col_offset=12)], [], lineno=352, col_offset=8), If(Compare(Attribute(Name('os', Load(), lineno=356, col_offset=11), 'name', Load(), lineno=356, col_offset=11), [Eq()], [Str('posix', lineno=356, col_offset=22)], lineno=356, col_offset=11), [Assign([Name('user_filename', Store(), lineno=357, col_offset=12)], Str('.pydistutils.cfg', lineno=357, col_offset=28), lineno=357, col_offset=12)], [Assign([Name('user_filename', Store(), lineno=359, col_offset=12)], Str('pydistutils.cfg', lineno=359, col_offset=28), lineno=359, col_offset=12)], lineno=356, col_offset=8), If(Attribute(Name('self', Load(), lineno=362, col_offset=11), 'want_user_cfg', Load(), lineno=362, col_offset=11), [Assign([Name('user_file', Store(), lineno=363, col_offset=12)], Call(Attribute(Attribute(Name('os', Load(), lineno=363, col_offset=24), 'path', Load(), lineno=363, col_offset=24), 'join', Load(), lineno=363, col_offset=24), [Call(Attribute(Attribute(Name('os', Load(), lineno=363, col_offset=37), 'path', Load(), lineno=363, col_offset=37), 'expanduser', Load(), lineno=363, col_offset=37), [Str('~', lineno=363, col_offset=56)], [], None, None, lineno=363, col_offset=37), Name('user_filename', Load(), lineno=363, col_offset=62)], [], None, None, lineno=363, col_offset=24), lineno=363, col_offset=12), If(Call(Attribute(Attribute(Name('os', Load(), lineno=364, col_offset=15), 'path', Load(), lineno=364, col_offset=15), 'isfile', Load(), lineno=364, col_offset=15), [Name('user_file', Load(), lineno=364, col_offset=30)], [], None, None, lineno=364, col_offset=15), [Expr(Call(Attribute(Name('files', Load(), lineno=365, col_offset=16), 'append', Load(), lineno=365, col_offset=16), [Name('user_file', Load(), lineno=365, col_offset=29)], [], None, None, lineno=365, col_offset=16), lineno=365, col_offset=16)], [], lineno=364, col_offset=12)], [], lineno=362, col_offset=8), Assign([Name('local_file', Store(), lineno=368, col_offset=8)], Str('setup.cfg', lineno=368, col_offset=21), lineno=368, col_offset=8), If(Call(Attribute(Attribute(Name('os', Load(), lineno=369, col_offset=11), 'path', Load(), lineno=369, col_offset=11), 'isfile', Load(), lineno=369, col_offset=11), [Name('local_file', Load(), lineno=369, col_offset=26)], [], None, None, lineno=369, col_offset=11), [Expr(Call(Attribute(Name('files', Load(), lineno=370, col_offset=12), 'append', Load(), lineno=370, col_offset=12), [Name('local_file', Load(), lineno=370, col_offset=25)], [], None, None, lineno=370, col_offset=12), lineno=370, col_offset=12)], [], lineno=369, col_offset=8), If(Name('DEBUG', Load(), lineno=372, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=373, col_offset=12), 'announce', Load(), lineno=373, col_offset=12), [BinOp(Str('using config files: %s', lineno=373, col_offset=26), Mod(), Call(Attribute(Str(', ', lineno=373, col_offset=53), 'join', Load(), lineno=373, col_offset=53), [Name('files', Load(), lineno=373, col_offset=63)], [], None, None, lineno=373, col_offset=53), lineno=373, col_offset=26)], [], None, None, lineno=373, col_offset=12), lineno=373, col_offset=12)], [], lineno=372, col_offset=8), Return(Name('files', Load(), lineno=375, col_offset=15), lineno=375, col_offset=8)], [], lineno=329, col_offset=4), FunctionDef('parse_config_files', arguments([Name('self', Param(), lineno=377, col_offset=27), Name('filenames', Param(), lineno=377, col_offset=33)], None, None, [Name('None', Load(), lineno=377, col_offset=43)]), [ImportFrom('ConfigParser', [alias('ConfigParser', None)], 0, lineno=378, col_offset=8), If(Compare(Name('filenames', Load(), lineno=380, col_offset=11), [Is()], [Name('None', Load(), lineno=380, col_offset=24)], lineno=380, col_offset=11), [Assign([Name('filenames', Store(), lineno=381, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=381, col_offset=24), 'find_config_files', Load(), lineno=381, col_offset=24), [], [], None, None, lineno=381, col_offset=24), lineno=381, col_offset=12)], [], lineno=380, col_offset=8), If(Name('DEBUG', Load(), lineno=383, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=384, col_offset=12), 'announce', Load(), lineno=384, col_offset=12), [Str('Distribution.parse_config_files():', lineno=384, col_offset=26)], [], None, None, lineno=384, col_offset=12), lineno=384, col_offset=12)], [], lineno=383, col_offset=8), Assign([Name('parser', Store(), lineno=386, col_offset=8)], Call(Name('ConfigParser', Load(), lineno=386, col_offset=17), [], [], None, None, lineno=386, col_offset=17), lineno=386, col_offset=8), For(Name('filename', Store(), lineno=387, col_offset=12), Name('filenames', Load(), lineno=387, col_offset=24), [If(Name('DEBUG', Load(), lineno=388, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=389, col_offset=16), 'announce', Load(), lineno=389, col_offset=16), [BinOp(Str('  reading %s', lineno=389, col_offset=30), Mod(), Name('filename', Load(), lineno=389, col_offset=47), lineno=389, col_offset=30)], [], None, None, lineno=389, col_offset=16), lineno=389, col_offset=16)], [], lineno=388, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=390, col_offset=12), 'read', Load(), lineno=390, col_offset=12), [Name('filename', Load(), lineno=390, col_offset=24)], [], None, None, lineno=390, col_offset=12), lineno=390, col_offset=12), For(Name('section', Store(), lineno=391, col_offset=16), Call(Attribute(Name('parser', Load(), lineno=391, col_offset=27), 'sections', Load(), lineno=391, col_offset=27), [], [], None, None, lineno=391, col_offset=27), [Assign([Name('options', Store(), lineno=392, col_offset=16)], Call(Attribute(Name('parser', Load(), lineno=392, col_offset=26), 'options', Load(), lineno=392, col_offset=26), [Name('section', Load(), lineno=392, col_offset=41)], [], None, None, lineno=392, col_offset=26), lineno=392, col_offset=16), Assign([Name('opt_dict', Store(), lineno=393, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=393, col_offset=27), 'get_option_dict', Load(), lineno=393, col_offset=27), [Name('section', Load(), lineno=393, col_offset=48)], [], None, None, lineno=393, col_offset=27), lineno=393, col_offset=16), For(Name('opt', Store(), lineno=395, col_offset=20), Name('options', Load(), lineno=395, col_offset=27), [If(Compare(Name('opt', Load(), lineno=396, col_offset=23), [NotEq()], [Str('__name__', lineno=396, col_offset=30)], lineno=396, col_offset=23), [Assign([Name('val', Store(), lineno=397, col_offset=24)], Call(Attribute(Name('parser', Load(), lineno=397, col_offset=30), 'get', Load(), lineno=397, col_offset=30), [Name('section', Load(), lineno=397, col_offset=41), Name('opt', Load(), lineno=397, col_offset=49)], [], None, None, lineno=397, col_offset=30), lineno=397, col_offset=24), Assign([Name('opt', Store(), lineno=398, col_offset=24)], Call(Attribute(Name('opt', Load(), lineno=398, col_offset=30), 'replace', Load(), lineno=398, col_offset=30), [Str('-', lineno=398, col_offset=42), Str('_', lineno=398, col_offset=47)], [], None, None, lineno=398, col_offset=30), lineno=398, col_offset=24), Assign([Subscript(Name('opt_dict', Load(), lineno=399, col_offset=24), Index(Name('opt', Load(), lineno=399, col_offset=33)), Store(), lineno=399, col_offset=24)], Tuple([Name('filename', Load(), lineno=399, col_offset=41), Name('val', Load(), lineno=399, col_offset=51)], Load(), lineno=399, col_offset=41), lineno=399, col_offset=24)], [], lineno=396, col_offset=20)], [], lineno=395, col_offset=16)], [], lineno=391, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=403, col_offset=12), '__init__', Load(), lineno=403, col_offset=12), [], [], None, None, lineno=403, col_offset=12), lineno=403, col_offset=12)], [], lineno=387, col_offset=8), If(Compare(Str('global', lineno=408, col_offset=11), [In()], [Attribute(Name('self', Load(), lineno=408, col_offset=23), 'command_options', Load(), lineno=408, col_offset=23)], lineno=408, col_offset=11), [For(Tuple([Name('opt', Store(), lineno=409, col_offset=17), Tuple([Name('src', Store(), lineno=409, col_offset=23), Name('val', Store(), lineno=409, col_offset=28)], Store(), lineno=409, col_offset=23)], Store(), lineno=409, col_offset=17), Call(Attribute(Subscript(Attribute(Name('self', Load(), lineno=409, col_offset=37), 'command_options', Load(), lineno=409, col_offset=37), Index(Str('global', lineno=409, col_offset=58)), Load(), lineno=409, col_offset=37), 'items', Load(), lineno=409, col_offset=37), [], [], None, None, lineno=409, col_offset=37), [Assign([Name('alias', Store(), lineno=410, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=410, col_offset=24), 'negative_opt', Load(), lineno=410, col_offset=24), 'get', Load(), lineno=410, col_offset=24), [Name('opt', Load(), lineno=410, col_offset=46)], [], None, None, lineno=410, col_offset=24), lineno=410, col_offset=16), TryExcept([If(Name('alias', Load(), lineno=412, col_offset=23), [Expr(Call(Name('setattr', Load(), lineno=413, col_offset=24), [Name('self', Load(), lineno=413, col_offset=32), Name('alias', Load(), lineno=413, col_offset=38), UnaryOp(Not(), Call(Name('strtobool', Load(), lineno=413, col_offset=49), [Name('val', Load(), lineno=413, col_offset=59)], [], None, None, lineno=413, col_offset=49), lineno=413, col_offset=45)], [], None, None, lineno=413, col_offset=24), lineno=413, col_offset=24)], [If(Compare(Name('opt', Load(), lineno=414, col_offset=25), [In()], [Tuple([Str('verbose', lineno=414, col_offset=33), Str('dry_run', lineno=414, col_offset=44)], Load(), lineno=414, col_offset=33)], lineno=414, col_offset=25), [Expr(Call(Name('setattr', Load(), lineno=415, col_offset=24), [Name('self', Load(), lineno=415, col_offset=32), Name('opt', Load(), lineno=415, col_offset=38), Call(Name('strtobool', Load(), lineno=415, col_offset=43), [Name('val', Load(), lineno=415, col_offset=53)], [], None, None, lineno=415, col_offset=43)], [], None, None, lineno=415, col_offset=24), lineno=415, col_offset=24)], [Expr(Call(Name('setattr', Load(), lineno=417, col_offset=24), [Name('self', Load(), lineno=417, col_offset=32), Name('opt', Load(), lineno=417, col_offset=38), Name('val', Load(), lineno=417, col_offset=43)], [], None, None, lineno=417, col_offset=24), lineno=417, col_offset=24)], lineno=414, col_offset=25)], lineno=412, col_offset=20)], [ExceptHandler(Name('ValueError', Load(), lineno=418, col_offset=23), Name('msg', Store(), lineno=418, col_offset=35), [Raise(Name('DistutilsOptionError', Load(), lineno=419, col_offset=26), Name('msg', Load(), lineno=419, col_offset=48), None, lineno=419, col_offset=20)], lineno=418, col_offset=16)], [], lineno=411, col_offset=16)], [], lineno=409, col_offset=12)], [], lineno=408, col_offset=8)], [], lineno=377, col_offset=4), FunctionDef('parse_command_line', arguments([Name('self', Param(), lineno=423, col_offset=27)], None, None, []), [Expr(Str('Parse the setup script\'s command line, taken from the\n        \'script_args\' instance attribute (which defaults to \'sys.argv[1:]\'\n        -- see \'setup()\' in core.py).  This list is first processed for\n        "global options" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the \'user_options\' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that \'options\'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn\'t\n        execute commands (currently, this only happens if user asks for\n        help).\n        ', lineno=441, col_offset=-1), lineno=441, col_offset=-1), Assign([Name('toplevel_options', Store(), lineno=446, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=446, col_offset=27), '_get_toplevel_options', Load(), lineno=446, col_offset=27), [], [], None, None, lineno=446, col_offset=27), lineno=446, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=455, col_offset=8), 'commands', Store(), lineno=455, col_offset=8)], List([], Load(), lineno=455, col_offset=24), lineno=455, col_offset=8), Assign([Name('parser', Store(), lineno=456, col_offset=8)], Call(Name('FancyGetopt', Load(), lineno=456, col_offset=17), [BinOp(Name('toplevel_options', Load(), lineno=456, col_offset=29), Add(), Attribute(Name('self', Load(), lineno=456, col_offset=48), 'display_options', Load(), lineno=456, col_offset=48), lineno=456, col_offset=29)], [], None, None, lineno=456, col_offset=17), lineno=456, col_offset=8), Expr(Call(Attribute(Name('parser', Load(), lineno=457, col_offset=8), 'set_negative_aliases', Load(), lineno=457, col_offset=8), [Attribute(Name('self', Load(), lineno=457, col_offset=36), 'negative_opt', Load(), lineno=457, col_offset=36)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8), Expr(Call(Attribute(Name('parser', Load(), lineno=458, col_offset=8), 'set_aliases', Load(), lineno=458, col_offset=8), [Dict([Str('licence', lineno=458, col_offset=28)], [Str('license', lineno=458, col_offset=39)], lineno=458, col_offset=27)], [], None, None, lineno=458, col_offset=8), lineno=458, col_offset=8), Assign([Name('args', Store(), lineno=459, col_offset=8)], Call(Attribute(Name('parser', Load(), lineno=459, col_offset=15), 'getopt', Load(), lineno=459, col_offset=15), [], [keyword('args', Attribute(Name('self', Load(), lineno=459, col_offset=34), 'script_args', Load(), lineno=459, col_offset=34)), keyword('object', Name('self', Load(), lineno=459, col_offset=59))], None, None, lineno=459, col_offset=15), lineno=459, col_offset=8), Assign([Name('option_order', Store(), lineno=460, col_offset=8)], Call(Attribute(Name('parser', Load(), lineno=460, col_offset=23), 'get_option_order', Load(), lineno=460, col_offset=23), [], [], None, None, lineno=460, col_offset=23), lineno=460, col_offset=8), Expr(Call(Attribute(Name('log', Load(), lineno=461, col_offset=8), 'set_verbosity', Load(), lineno=461, col_offset=8), [Attribute(Name('self', Load(), lineno=461, col_offset=26), 'verbose', Load(), lineno=461, col_offset=26)], [], None, None, lineno=461, col_offset=8), lineno=461, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=464, col_offset=11), 'handle_display_options', Load(), lineno=464, col_offset=11), [Name('option_order', Load(), lineno=464, col_offset=39)], [], None, None, lineno=464, col_offset=11), [Return(None, lineno=465, col_offset=12)], [], lineno=464, col_offset=8), While(Name('args', Load(), lineno=466, col_offset=14), [Assign([Name('args', Store(), lineno=467, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=467, col_offset=19), '_parse_command_opts', Load(), lineno=467, col_offset=19), [Name('parser', Load(), lineno=467, col_offset=44), Name('args', Load(), lineno=467, col_offset=52)], [], None, None, lineno=467, col_offset=19), lineno=467, col_offset=12), If(Compare(Name('args', Load(), lineno=468, col_offset=15), [Is()], [Name('None', Load(), lineno=468, col_offset=23)], lineno=468, col_offset=15), [Return(None, lineno=469, col_offset=16)], [], lineno=468, col_offset=12)], [], lineno=466, col_offset=8), If(Attribute(Name('self', Load(), lineno=477, col_offset=11), 'help', Load(), lineno=477, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=478, col_offset=12), '_show_help', Load(), lineno=478, col_offset=12), [Name('parser', Load(), lineno=478, col_offset=28)], [keyword('display_options', Compare(Call(Name('len', Load(), lineno=479, col_offset=44), [Attribute(Name('self', Load(), lineno=479, col_offset=48), 'commands', Load(), lineno=479, col_offset=48)], [], None, None, lineno=479, col_offset=44), [Eq()], [Num(0, lineno=479, col_offset=66)], lineno=479, col_offset=44)), keyword('commands', Attribute(Name('self', Load(), lineno=480, col_offset=37), 'commands', Load(), lineno=480, col_offset=37))], None, None, lineno=478, col_offset=12), lineno=478, col_offset=12), Return(None, lineno=481, col_offset=12)], [], lineno=477, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=484, col_offset=15), 'commands', Load(), lineno=484, col_offset=15), lineno=484, col_offset=11), [Raise(Name('DistutilsArgError', Load(), lineno=485, col_offset=18), Str('no commands supplied', lineno=485, col_offset=37), None, lineno=485, col_offset=12)], [], lineno=484, col_offset=8), Return(Num(1, lineno=488, col_offset=15), lineno=488, col_offset=8)], [], lineno=423, col_offset=4), FunctionDef('_get_toplevel_options', arguments([Name('self', Param(), lineno=490, col_offset=30)], None, None, []), [Expr(Str('Return the non-display options recognized at the top level.\n\n        This includes options that are recognized *only* at the top\n        level as well as options recognized for commands.\n        ', lineno=495, col_offset=-1), lineno=495, col_offset=-1), Return(BinOp(Attribute(Name('self', Load(), lineno=496, col_offset=15), 'global_options', Load(), lineno=496, col_offset=15), Add(), List([Tuple([Str('command-packages=', lineno=497, col_offset=13), Name('None', Load(), lineno=497, col_offset=34), Str('list of packages that provide distutils commands', lineno=498, col_offset=13)], Load(), lineno=497, col_offset=13)], Load(), lineno=496, col_offset=37), lineno=496, col_offset=15), lineno=496, col_offset=8)], [], lineno=490, col_offset=4), FunctionDef('_parse_command_opts', arguments([Name('self', Param(), lineno=501, col_offset=28), Name('parser', Param(), lineno=501, col_offset=34), Name('args', Param(), lineno=501, col_offset=42)], None, None, []), [Expr(Str("Parse the command-line options for a single command.\n        'parser' must be a FancyGetopt instance; 'args' must be the list\n        of arguments, starting with the current command (whose options\n        we are about to parse).  Returns a new version of 'args' with\n        the next command at the front of the list; will be the empty\n        list if there are no more commands on the command line.  Returns\n        None if the user asked for help on this command.\n        ", lineno=509, col_offset=-1), lineno=509, col_offset=-1), ImportFrom('distutils.cmd', [alias('Command', None)], 0, lineno=511, col_offset=8), Assign([Name('command', Store(), lineno=514, col_offset=8)], Subscript(Name('args', Load(), lineno=514, col_offset=18), Index(Num(0, lineno=514, col_offset=23)), Load(), lineno=514, col_offset=18), lineno=514, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('command_re', Load(), lineno=515, col_offset=15), 'match', Load(), lineno=515, col_offset=15), [Name('command', Load(), lineno=515, col_offset=32)], [], None, None, lineno=515, col_offset=15), lineno=515, col_offset=11), [Raise(Name('SystemExit', Load(), lineno=516, col_offset=18), BinOp(Str("invalid command name '%s'", lineno=516, col_offset=30), Mod(), Name('command', Load(), lineno=516, col_offset=60), lineno=516, col_offset=30), None, lineno=516, col_offset=12)], [], lineno=515, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=517, col_offset=8), 'commands', Load(), lineno=517, col_offset=8), 'append', Load(), lineno=517, col_offset=8), [Name('command', Load(), lineno=517, col_offset=29)], [], None, None, lineno=517, col_offset=8), lineno=517, col_offset=8), TryExcept([Assign([Name('cmd_class', Store(), lineno=523, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=523, col_offset=24), 'get_command_class', Load(), lineno=523, col_offset=24), [Name('command', Load(), lineno=523, col_offset=47)], [], None, None, lineno=523, col_offset=24), lineno=523, col_offset=12)], [ExceptHandler(Name('DistutilsModuleError', Load(), lineno=524, col_offset=15), Name('msg', Store(), lineno=524, col_offset=37), [Raise(Name('DistutilsArgError', Load(), lineno=525, col_offset=18), Name('msg', Load(), lineno=525, col_offset=37), None, lineno=525, col_offset=12)], lineno=524, col_offset=8)], [], lineno=522, col_offset=8), If(UnaryOp(Not(), Call(Name('issubclass', Load(), lineno=529, col_offset=15), [Name('cmd_class', Load(), lineno=529, col_offset=26), Name('Command', Load(), lineno=529, col_offset=37)], [], None, None, lineno=529, col_offset=15), lineno=529, col_offset=11), [Raise(Name('DistutilsClassError', Load(), lineno=530, col_offset=18), BinOp(Str('command class %s must subclass Command', lineno=531, col_offset=18), Mod(), Name('cmd_class', Load(), lineno=531, col_offset=61), lineno=531, col_offset=18), None, lineno=530, col_offset=12)], [], lineno=529, col_offset=8), If(UnaryOp(Not(), BoolOp(And(), [Call(Name('hasattr', Load(), lineno=535, col_offset=16), [Name('cmd_class', Load(), lineno=535, col_offset=24), Str('user_options', lineno=535, col_offset=35)], [], None, None, lineno=535, col_offset=16), Call(Name('isinstance', Load(), lineno=536, col_offset=16), [Attribute(Name('cmd_class', Load(), lineno=536, col_offset=27), 'user_options', Load(), lineno=536, col_offset=27), Name('list', Load(), lineno=536, col_offset=51)], [], None, None, lineno=536, col_offset=16)], lineno=535, col_offset=16), lineno=535, col_offset=11), [Raise(Name('DistutilsClassError', Load(), lineno=537, col_offset=18), BinOp(BinOp(Str('command class %s must provide ', lineno=538, col_offset=19), Add(), Str("'user_options' attribute (a list of tuples)", lineno=539, col_offset=19), lineno=538, col_offset=19), Mod(), Name('cmd_class', Load(), lineno=540, col_offset=18), lineno=538, col_offset=18), None, lineno=537, col_offset=12)], [], lineno=535, col_offset=8), Assign([Name('negative_opt', Store(), lineno=544, col_offset=8)], Attribute(Name('self', Load(), lineno=544, col_offset=23), 'negative_opt', Load(), lineno=544, col_offset=23), lineno=544, col_offset=8), If(Call(Name('hasattr', Load(), lineno=545, col_offset=11), [Name('cmd_class', Load(), lineno=545, col_offset=19), Str('negative_opt', lineno=545, col_offset=30)], [], None, None, lineno=545, col_offset=11), [Assign([Name('negative_opt', Store(), lineno=546, col_offset=12)], Call(Attribute(Name('negative_opt', Load(), lineno=546, col_offset=27), 'copy', Load(), lineno=546, col_offset=27), [], [], None, None, lineno=546, col_offset=27), lineno=546, col_offset=12), Expr(Call(Attribute(Name('negative_opt', Load(), lineno=547, col_offset=12), 'update', Load(), lineno=547, col_offset=12), [Attribute(Name('cmd_class', Load(), lineno=547, col_offset=32), 'negative_opt', Load(), lineno=547, col_offset=32)], [], None, None, lineno=547, col_offset=12), lineno=547, col_offset=12)], [], lineno=545, col_offset=8), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=551, col_offset=12), [Name('cmd_class', Load(), lineno=551, col_offset=20), Str('help_options', lineno=551, col_offset=31)], [], None, None, lineno=551, col_offset=12), Call(Name('isinstance', Load(), lineno=552, col_offset=12), [Attribute(Name('cmd_class', Load(), lineno=552, col_offset=23), 'help_options', Load(), lineno=552, col_offset=23), Name('list', Load(), lineno=552, col_offset=47)], [], None, None, lineno=552, col_offset=12)], lineno=551, col_offset=12), [Assign([Name('help_options', Store(), lineno=553, col_offset=12)], Call(Name('fix_help_options', Load(), lineno=553, col_offset=27), [Attribute(Name('cmd_class', Load(), lineno=553, col_offset=44), 'help_options', Load(), lineno=553, col_offset=44)], [], None, None, lineno=553, col_offset=27), lineno=553, col_offset=12)], [Assign([Name('help_options', Store(), lineno=555, col_offset=12)], List([], Load(), lineno=555, col_offset=27), lineno=555, col_offset=12)], lineno=551, col_offset=8), Expr(Call(Attribute(Name('parser', Load(), lineno=560, col_offset=8), 'set_option_table', Load(), lineno=560, col_offset=8), [BinOp(BinOp(Attribute(Name('self', Load(), lineno=560, col_offset=32), 'global_options', Load(), lineno=560, col_offset=32), Add(), Attribute(Name('cmd_class', Load(), lineno=561, col_offset=32), 'user_options', Load(), lineno=561, col_offset=32), lineno=560, col_offset=32), Add(), Name('help_options', Load(), lineno=562, col_offset=32), lineno=561, col_offset=55)], [], None, None, lineno=560, col_offset=8), lineno=560, col_offset=8), Expr(Call(Attribute(Name('parser', Load(), lineno=563, col_offset=8), 'set_negative_aliases', Load(), lineno=563, col_offset=8), [Name('negative_opt', Load(), lineno=563, col_offset=36)], [], None, None, lineno=563, col_offset=8), lineno=563, col_offset=8), Assign([Tuple([Name('args', Store(), lineno=564, col_offset=9), Name('opts', Store(), lineno=564, col_offset=15)], Store(), lineno=564, col_offset=9)], Call(Attribute(Name('parser', Load(), lineno=564, col_offset=23), 'getopt', Load(), lineno=564, col_offset=23), [Subscript(Name('args', Load(), lineno=564, col_offset=37), Slice(Num(1, lineno=564, col_offset=42), None, None), Load(), lineno=564, col_offset=37)], [], None, None, lineno=564, col_offset=23), lineno=564, col_offset=8), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=565, col_offset=11), [Name('opts', Load(), lineno=565, col_offset=19), Str('help', lineno=565, col_offset=25)], [], None, None, lineno=565, col_offset=11), Attribute(Name('opts', Load(), lineno=565, col_offset=37), 'help', Load(), lineno=565, col_offset=37)], lineno=565, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=566, col_offset=12), '_show_help', Load(), lineno=566, col_offset=12), [Name('parser', Load(), lineno=566, col_offset=28)], [keyword('display_options', Num(0, lineno=566, col_offset=52)), keyword('commands', List([Name('cmd_class', Load(), lineno=566, col_offset=65)], Load(), lineno=566, col_offset=64))], None, None, lineno=566, col_offset=12), lineno=566, col_offset=12), Return(None, lineno=567, col_offset=12)], [], lineno=565, col_offset=8), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=569, col_offset=12), [Name('cmd_class', Load(), lineno=569, col_offset=20), Str('help_options', lineno=569, col_offset=31)], [], None, None, lineno=569, col_offset=12), Call(Name('isinstance', Load(), lineno=570, col_offset=12), [Attribute(Name('cmd_class', Load(), lineno=570, col_offset=23), 'help_options', Load(), lineno=570, col_offset=23), Name('list', Load(), lineno=570, col_offset=47)], [], None, None, lineno=570, col_offset=12)], lineno=569, col_offset=12), [Assign([Name('help_option_found', Store(), lineno=571, col_offset=12)], Num(0, lineno=571, col_offset=30), lineno=571, col_offset=12), For(Tuple([Name('help_option', Store(), lineno=572, col_offset=17), Name('short', Store(), lineno=572, col_offset=30), Name('desc', Store(), lineno=572, col_offset=37), Name('func', Store(), lineno=572, col_offset=43)], Store(), lineno=572, col_offset=17), Attribute(Name('cmd_class', Load(), lineno=572, col_offset=52), 'help_options', Load(), lineno=572, col_offset=52), [If(Call(Name('hasattr', Load(), lineno=573, col_offset=19), [Name('opts', Load(), lineno=573, col_offset=27), Call(Attribute(Name('parser', Load(), lineno=573, col_offset=33), 'get_attr_name', Load(), lineno=573, col_offset=33), [Name('help_option', Load(), lineno=573, col_offset=54)], [], None, None, lineno=573, col_offset=33)], [], None, None, lineno=573, col_offset=19), [Assign([Name('help_option_found', Store(), lineno=574, col_offset=20)], Num(1, lineno=574, col_offset=38), lineno=574, col_offset=20), If(Call(Name('hasattr', Load(), lineno=575, col_offset=23), [Name('func', Load(), lineno=575, col_offset=31), Str('__call__', lineno=575, col_offset=37)], [], None, None, lineno=575, col_offset=23), [Expr(Call(Name('func', Load(), lineno=576, col_offset=24), [], [], None, None, lineno=576, col_offset=24), lineno=576, col_offset=24)], [Raise(Call(Name('DistutilsClassError', Load(), lineno=578, col_offset=30), [BinOp(Str("invalid help function %r for help option '%s': must be a callable object (function, etc.)", lineno=579, col_offset=28), Mod(), Tuple([Name('func', Load(), lineno=581, col_offset=31), Name('help_option', Load(), lineno=581, col_offset=37)], Load(), lineno=581, col_offset=31), lineno=579, col_offset=28)], [], None, None, lineno=578, col_offset=30), None, None, lineno=578, col_offset=24)], lineno=575, col_offset=20)], [], lineno=573, col_offset=16)], [], lineno=572, col_offset=12), If(Name('help_option_found', Load(), lineno=583, col_offset=15), [Return(None, lineno=584, col_offset=16)], [], lineno=583, col_offset=12)], [], lineno=569, col_offset=8), Assign([Name('opt_dict', Store(), lineno=588, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=588, col_offset=19), 'get_option_dict', Load(), lineno=588, col_offset=19), [Name('command', Load(), lineno=588, col_offset=40)], [], None, None, lineno=588, col_offset=19), lineno=588, col_offset=8), For(Tuple([Name('name', Store(), lineno=589, col_offset=13), Name('value', Store(), lineno=589, col_offset=19)], Store(), lineno=589, col_offset=13), Call(Attribute(Call(Name('vars', Load(), lineno=589, col_offset=29), [Name('opts', Load(), lineno=589, col_offset=34)], [], None, None, lineno=589, col_offset=29), 'items', Load(), lineno=589, col_offset=29), [], [], None, None, lineno=589, col_offset=29), [Assign([Subscript(Name('opt_dict', Load(), lineno=590, col_offset=12), Index(Name('name', Load(), lineno=590, col_offset=21)), Store(), lineno=590, col_offset=12)], Tuple([Str('command line', lineno=590, col_offset=30), Name('value', Load(), lineno=590, col_offset=46)], Load(), lineno=590, col_offset=30), lineno=590, col_offset=12)], [], lineno=589, col_offset=8), Return(Name('args', Load(), lineno=592, col_offset=15), lineno=592, col_offset=8)], [], lineno=501, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=594, col_offset=25)], None, None, []), [Expr(Str('Set final values for all the options on the Distribution\n        instance, analogous to the .finalize_options() method of Command\n        objects.\n        ', lineno=598, col_offset=-1), lineno=598, col_offset=-1), For(Name('attr', Store(), lineno=599, col_offset=12), Tuple([Str('keywords', lineno=599, col_offset=21), Str('platforms', lineno=599, col_offset=33)], Load(), lineno=599, col_offset=21), [Assign([Name('value', Store(), lineno=600, col_offset=12)], Call(Name('getattr', Load(), lineno=600, col_offset=20), [Attribute(Name('self', Load(), lineno=600, col_offset=28), 'metadata', Load(), lineno=600, col_offset=28), Name('attr', Load(), lineno=600, col_offset=43)], [], None, None, lineno=600, col_offset=20), lineno=600, col_offset=12), If(Compare(Name('value', Load(), lineno=601, col_offset=15), [Is()], [Name('None', Load(), lineno=601, col_offset=24)], lineno=601, col_offset=15), [Continue( lineno=602, col_offset=16)], [], lineno=601, col_offset=12), If(Call(Name('isinstance', Load(), lineno=603, col_offset=15), [Name('value', Load(), lineno=603, col_offset=26), Name('str', Load(), lineno=603, col_offset=33)], [], None, None, lineno=603, col_offset=15), [Assign([Name('value', Store(), lineno=604, col_offset=16)], ListComp(Call(Attribute(Name('elm', Load(), lineno=604, col_offset=25), 'strip', Load(), lineno=604, col_offset=25), [], [], None, None, lineno=604, col_offset=25), [comprehension(Name('elm', Store(), lineno=604, col_offset=41), Call(Attribute(Name('value', Load(), lineno=604, col_offset=48), 'split', Load(), lineno=604, col_offset=48), [Str(',', lineno=604, col_offset=60)], [], None, None, lineno=604, col_offset=48), [])], lineno=604, col_offset=25), lineno=604, col_offset=16), Expr(Call(Name('setattr', Load(), lineno=605, col_offset=16), [Attribute(Name('self', Load(), lineno=605, col_offset=24), 'metadata', Load(), lineno=605, col_offset=24), Name('attr', Load(), lineno=605, col_offset=39), Name('value', Load(), lineno=605, col_offset=45)], [], None, None, lineno=605, col_offset=16), lineno=605, col_offset=16)], [], lineno=603, col_offset=12)], [], lineno=599, col_offset=8)], [], lineno=594, col_offset=4), FunctionDef('_show_help', arguments([Name('self', Param(), lineno=607, col_offset=19), Name('parser', Param(), lineno=607, col_offset=25), Name('global_options', Param(), lineno=607, col_offset=33), Name('display_options', Param(), lineno=607, col_offset=51), Name('commands', Param(), lineno=608, col_offset=19)], None, None, [Num(1, lineno=607, col_offset=48), Num(1, lineno=607, col_offset=67), List([], Load(), lineno=608, col_offset=28)]), [Expr(Str('Show help for the setup script command-line in the form of\n        several lists of command-line options.  \'parser\' should be a\n        FancyGetopt instance; do not expect it to be returned in the\n        same state, as its option table will be reset to make it\n        generate the correct help text.\n\n        If \'global_options\' is true, lists the global options:\n        --verbose, --dry-run, etc.  If \'display_options\' is true, lists\n        the "display-only" options: --name, --version, etc.  Finally,\n        lists per-command help for every command name or command class\n        in \'commands\'.\n        ', lineno=620, col_offset=-1), lineno=620, col_offset=-1), ImportFrom('distutils.core', [alias('gen_usage', None)], 0, lineno=622, col_offset=8), ImportFrom('distutils.cmd', [alias('Command', None)], 0, lineno=623, col_offset=8), If(Name('global_options', Load(), lineno=625, col_offset=11), [If(Name('display_options', Load(), lineno=626, col_offset=15), [Assign([Name('options', Store(), lineno=627, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=627, col_offset=26), '_get_toplevel_options', Load(), lineno=627, col_offset=26), [], [], None, None, lineno=627, col_offset=26), lineno=627, col_offset=16)], [Assign([Name('options', Store(), lineno=629, col_offset=16)], Attribute(Name('self', Load(), lineno=629, col_offset=26), 'global_options', Load(), lineno=629, col_offset=26), lineno=629, col_offset=16)], lineno=626, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=630, col_offset=12), 'set_option_table', Load(), lineno=630, col_offset=12), [Name('options', Load(), lineno=630, col_offset=36)], [], None, None, lineno=630, col_offset=12), lineno=630, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=631, col_offset=12), 'print_help', Load(), lineno=631, col_offset=12), [BinOp(Attribute(Name('self', Load(), lineno=631, col_offset=30), 'common_usage', Load(), lineno=631, col_offset=30), Add(), Str('\nGlobal options:', lineno=631, col_offset=50), lineno=631, col_offset=30)], [], None, None, lineno=631, col_offset=12), lineno=631, col_offset=12), Print(None, [Str('', lineno=632, col_offset=18)], True, lineno=632, col_offset=12)], [], lineno=625, col_offset=8), If(Name('display_options', Load(), lineno=634, col_offset=11), [Expr(Call(Attribute(Name('parser', Load(), lineno=635, col_offset=12), 'set_option_table', Load(), lineno=635, col_offset=12), [Attribute(Name('self', Load(), lineno=635, col_offset=36), 'display_options', Load(), lineno=635, col_offset=36)], [], None, None, lineno=635, col_offset=12), lineno=635, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=636, col_offset=12), 'print_help', Load(), lineno=636, col_offset=12), [BinOp(Str('Information display options (just display ', lineno=637, col_offset=16), Add(), Str('information, ignore any commands)', lineno=638, col_offset=16), lineno=637, col_offset=16)], [], None, None, lineno=636, col_offset=12), lineno=636, col_offset=12), Print(None, [Str('', lineno=639, col_offset=18)], True, lineno=639, col_offset=12)], [], lineno=634, col_offset=8), For(Name('command', Store(), lineno=641, col_offset=12), Attribute(Name('self', Load(), lineno=641, col_offset=23), 'commands', Load(), lineno=641, col_offset=23), [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=642, col_offset=15), [Name('command', Load(), lineno=642, col_offset=26), Name('type', Load(), lineno=642, col_offset=35)], [], None, None, lineno=642, col_offset=15), Call(Name('issubclass', Load(), lineno=642, col_offset=45), [Name('command', Load(), lineno=642, col_offset=56), Name('Command', Load(), lineno=642, col_offset=65)], [], None, None, lineno=642, col_offset=45)], lineno=642, col_offset=15), [Assign([Name('klass', Store(), lineno=643, col_offset=16)], Name('command', Load(), lineno=643, col_offset=24), lineno=643, col_offset=16)], [Assign([Name('klass', Store(), lineno=645, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=645, col_offset=24), 'get_command_class', Load(), lineno=645, col_offset=24), [Name('command', Load(), lineno=645, col_offset=47)], [], None, None, lineno=645, col_offset=24), lineno=645, col_offset=16)], lineno=642, col_offset=12), If(BoolOp(And(), [Call(Name('hasattr', Load(), lineno=646, col_offset=16), [Name('klass', Load(), lineno=646, col_offset=24), Str('help_options', lineno=646, col_offset=31)], [], None, None, lineno=646, col_offset=16), Call(Name('isinstance', Load(), lineno=647, col_offset=16), [Attribute(Name('klass', Load(), lineno=647, col_offset=27), 'help_options', Load(), lineno=647, col_offset=27), Name('list', Load(), lineno=647, col_offset=47)], [], None, None, lineno=647, col_offset=16)], lineno=646, col_offset=16), [Expr(Call(Attribute(Name('parser', Load(), lineno=648, col_offset=16), 'set_option_table', Load(), lineno=648, col_offset=16), [BinOp(Attribute(Name('klass', Load(), lineno=648, col_offset=40), 'user_options', Load(), lineno=648, col_offset=40), Add(), Call(Name('fix_help_options', Load(), lineno=649, col_offset=40), [Attribute(Name('klass', Load(), lineno=649, col_offset=57), 'help_options', Load(), lineno=649, col_offset=57)], [], None, None, lineno=649, col_offset=40), lineno=648, col_offset=40)], [], None, None, lineno=648, col_offset=16), lineno=648, col_offset=16)], [Expr(Call(Attribute(Name('parser', Load(), lineno=651, col_offset=16), 'set_option_table', Load(), lineno=651, col_offset=16), [Attribute(Name('klass', Load(), lineno=651, col_offset=40), 'user_options', Load(), lineno=651, col_offset=40)], [], None, None, lineno=651, col_offset=16), lineno=651, col_offset=16)], lineno=646, col_offset=12), Expr(Call(Attribute(Name('parser', Load(), lineno=652, col_offset=12), 'print_help', Load(), lineno=652, col_offset=12), [BinOp(Str("Options for '%s' command:", lineno=652, col_offset=30), Mod(), Attribute(Name('klass', Load(), lineno=652, col_offset=60), '__name__', Load(), lineno=652, col_offset=60), lineno=652, col_offset=30)], [], None, None, lineno=652, col_offset=12), lineno=652, col_offset=12), Print(None, [Str('', lineno=653, col_offset=18)], True, lineno=653, col_offset=12)], [], lineno=641, col_offset=8), Print(None, [Call(Name('gen_usage', Load(), lineno=655, col_offset=14), [Attribute(Name('self', Load(), lineno=655, col_offset=24), 'script_name', Load(), lineno=655, col_offset=24)], [], None, None, lineno=655, col_offset=14)], True, lineno=655, col_offset=8)], [], lineno=607, col_offset=4), FunctionDef('handle_display_options', arguments([Name('self', Param(), lineno=657, col_offset=31), Name('option_order', Param(), lineno=657, col_offset=37)], None, None, []), [Expr(Str('If there were any non-global "display-only" options\n        (--help-commands or the metadata display options) on the command\n        line, display the requested info and return true; else return\n        false.\n        ', lineno=662, col_offset=-1), lineno=662, col_offset=-1), ImportFrom('distutils.core', [alias('gen_usage', None)], 0, lineno=663, col_offset=8), If(Attribute(Name('self', Load(), lineno=668, col_offset=11), 'help_commands', Load(), lineno=668, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=669, col_offset=12), 'print_commands', Load(), lineno=669, col_offset=12), [], [], None, None, lineno=669, col_offset=12), lineno=669, col_offset=12), Print(None, [Str('', lineno=670, col_offset=18)], True, lineno=670, col_offset=12), Print(None, [Call(Name('gen_usage', Load(), lineno=671, col_offset=18), [Attribute(Name('self', Load(), lineno=671, col_offset=28), 'script_name', Load(), lineno=671, col_offset=28)], [], None, None, lineno=671, col_offset=18)], True, lineno=671, col_offset=12), Return(Num(1, lineno=672, col_offset=19), lineno=672, col_offset=12)], [], lineno=668, col_offset=8), Assign([Name('any_display_options', Store(), lineno=677, col_offset=8)], Num(0, lineno=677, col_offset=30), lineno=677, col_offset=8), Assign([Name('is_display_option', Store(), lineno=678, col_offset=8)], Dict([], [], lineno=678, col_offset=28), lineno=678, col_offset=8), For(Name('option', Store(), lineno=679, col_offset=12), Attribute(Name('self', Load(), lineno=679, col_offset=22), 'display_options', Load(), lineno=679, col_offset=22), [Assign([Subscript(Name('is_display_option', Load(), lineno=680, col_offset=12), Index(Subscript(Name('option', Load(), lineno=680, col_offset=30), Index(Num(0, lineno=680, col_offset=37)), Load(), lineno=680, col_offset=30)), Store(), lineno=680, col_offset=12)], Num(1, lineno=680, col_offset=43), lineno=680, col_offset=12)], [], lineno=679, col_offset=8), For(Tuple([Name('opt', Store(), lineno=682, col_offset=13), Name('val', Store(), lineno=682, col_offset=18)], Store(), lineno=682, col_offset=13), Name('option_order', Load(), lineno=682, col_offset=26), [If(BoolOp(And(), [Name('val', Load(), lineno=683, col_offset=15), Call(Attribute(Name('is_display_option', Load(), lineno=683, col_offset=23), 'get', Load(), lineno=683, col_offset=23), [Name('opt', Load(), lineno=683, col_offset=45)], [], None, None, lineno=683, col_offset=23)], lineno=683, col_offset=15), [Assign([Name('opt', Store(), lineno=684, col_offset=16)], Call(Name('translate_longopt', Load(), lineno=684, col_offset=22), [Name('opt', Load(), lineno=684, col_offset=40)], [], None, None, lineno=684, col_offset=22), lineno=684, col_offset=16), Assign([Name('value', Store(), lineno=685, col_offset=16)], Call(Call(Name('getattr', Load(), lineno=685, col_offset=24), [Attribute(Name('self', Load(), lineno=685, col_offset=32), 'metadata', Load(), lineno=685, col_offset=32), BinOp(Str('get_', lineno=685, col_offset=47), Add(), Name('opt', Load(), lineno=685, col_offset=54), lineno=685, col_offset=47)], [], None, None, lineno=685, col_offset=24), [], [], None, None, lineno=685, col_offset=24), lineno=685, col_offset=16), If(Compare(Name('opt', Load(), lineno=686, col_offset=19), [In()], [List([Str('keywords', lineno=686, col_offset=27), Str('platforms', lineno=686, col_offset=39)], Load(), lineno=686, col_offset=26)], lineno=686, col_offset=19), [Print(None, [Call(Attribute(Str(',', lineno=687, col_offset=26), 'join', Load(), lineno=687, col_offset=26), [Name('value', Load(), lineno=687, col_offset=35)], [], None, None, lineno=687, col_offset=26)], True, lineno=687, col_offset=20)], [If(Compare(Name('opt', Load(), lineno=688, col_offset=21), [In()], [Tuple([Str('classifiers', lineno=688, col_offset=29), Str('provides', lineno=688, col_offset=44), Str('requires', lineno=688, col_offset=56), Str('obsoletes', lineno=689, col_offset=29)], Load(), lineno=688, col_offset=29)], lineno=688, col_offset=21), [Print(None, [Call(Attribute(Str('\n', lineno=690, col_offset=26), 'join', Load(), lineno=690, col_offset=26), [Name('value', Load(), lineno=690, col_offset=36)], [], None, None, lineno=690, col_offset=26)], True, lineno=690, col_offset=20)], [Print(None, [Name('value', Load(), lineno=692, col_offset=26)], True, lineno=692, col_offset=20)], lineno=688, col_offset=21)], lineno=686, col_offset=16), Assign([Name('any_display_options', Store(), lineno=693, col_offset=16)], Num(1, lineno=693, col_offset=38), lineno=693, col_offset=16)], [], lineno=683, col_offset=12)], [], lineno=682, col_offset=8), Return(Name('any_display_options', Load(), lineno=695, col_offset=15), lineno=695, col_offset=8)], [], lineno=657, col_offset=4), FunctionDef('print_command_list', arguments([Name('self', Param(), lineno=697, col_offset=27), Name('commands', Param(), lineno=697, col_offset=33), Name('header', Param(), lineno=697, col_offset=43), Name('max_length', Param(), lineno=697, col_offset=51)], None, None, []), [Expr(Str("Print a subset of the list of all commands -- used by\n        'print_commands()'.\n        ", lineno=700, col_offset=-1), lineno=700, col_offset=-1), Print(None, [BinOp(Name('header', Load(), lineno=701, col_offset=14), Add(), Str(':', lineno=701, col_offset=23), lineno=701, col_offset=14)], True, lineno=701, col_offset=8), For(Name('cmd', Store(), lineno=703, col_offset=12), Name('commands', Load(), lineno=703, col_offset=19), [Assign([Name('klass', Store(), lineno=704, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=704, col_offset=20), 'cmdclass', Load(), lineno=704, col_offset=20), 'get', Load(), lineno=704, col_offset=20), [Name('cmd', Load(), lineno=704, col_offset=38)], [], None, None, lineno=704, col_offset=20), lineno=704, col_offset=12), If(UnaryOp(Not(), Name('klass', Load(), lineno=705, col_offset=19), lineno=705, col_offset=15), [Assign([Name('klass', Store(), lineno=706, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=706, col_offset=24), 'get_command_class', Load(), lineno=706, col_offset=24), [Name('cmd', Load(), lineno=706, col_offset=47)], [], None, None, lineno=706, col_offset=24), lineno=706, col_offset=16)], [], lineno=705, col_offset=12), TryExcept([Assign([Name('description', Store(), lineno=708, col_offset=16)], Attribute(Name('klass', Load(), lineno=708, col_offset=30), 'description', Load(), lineno=708, col_offset=30), lineno=708, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=709, col_offset=19), None, [Assign([Name('description', Store(), lineno=710, col_offset=16)], Str('(no description available)', lineno=710, col_offset=30), lineno=710, col_offset=16)], lineno=709, col_offset=12)], [], lineno=707, col_offset=12), Print(None, [BinOp(Str('  %-*s  %s', lineno=712, col_offset=18), Mod(), Tuple([Name('max_length', Load(), lineno=712, col_offset=34), Name('cmd', Load(), lineno=712, col_offset=46), Name('description', Load(), lineno=712, col_offset=51)], Load(), lineno=712, col_offset=34), lineno=712, col_offset=18)], True, lineno=712, col_offset=12)], [], lineno=703, col_offset=8)], [], lineno=697, col_offset=4), FunctionDef('print_commands', arguments([Name('self', Param(), lineno=714, col_offset=23)], None, None, []), [Expr(Str('Print out a help message listing all available commands with a\n        description of each.  The list is divided into "standard commands"\n        (listed in distutils.command.__all__) and "extra commands"\n        (mentioned in self.cmdclass, but not a standard command).  The\n        descriptions come from the command class attribute\n        \'description\'.\n        ', lineno=721, col_offset=-1), lineno=721, col_offset=-1), Import([alias('distutils.command', None)], lineno=722, col_offset=8), Assign([Name('std_commands', Store(), lineno=723, col_offset=8)], Attribute(Attribute(Name('distutils', Load(), lineno=723, col_offset=23), 'command', Load(), lineno=723, col_offset=23), '__all__', Load(), lineno=723, col_offset=23), lineno=723, col_offset=8), Assign([Name('is_std', Store(), lineno=724, col_offset=8)], Dict([], [], lineno=724, col_offset=17), lineno=724, col_offset=8), For(Name('cmd', Store(), lineno=725, col_offset=12), Name('std_commands', Load(), lineno=725, col_offset=19), [Assign([Subscript(Name('is_std', Load(), lineno=726, col_offset=12), Index(Name('cmd', Load(), lineno=726, col_offset=19)), Store(), lineno=726, col_offset=12)], Num(1, lineno=726, col_offset=26), lineno=726, col_offset=12)], [], lineno=725, col_offset=8), Assign([Name('extra_commands', Store(), lineno=728, col_offset=8)], List([], Load(), lineno=728, col_offset=25), lineno=728, col_offset=8), For(Name('cmd', Store(), lineno=729, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=729, col_offset=19), 'cmdclass', Load(), lineno=729, col_offset=19), 'keys', Load(), lineno=729, col_offset=19), [], [], None, None, lineno=729, col_offset=19), [If(UnaryOp(Not(), Call(Attribute(Name('is_std', Load(), lineno=730, col_offset=19), 'get', Load(), lineno=730, col_offset=19), [Name('cmd', Load(), lineno=730, col_offset=30)], [], None, None, lineno=730, col_offset=19), lineno=730, col_offset=15), [Expr(Call(Attribute(Name('extra_commands', Load(), lineno=731, col_offset=16), 'append', Load(), lineno=731, col_offset=16), [Name('cmd', Load(), lineno=731, col_offset=38)], [], None, None, lineno=731, col_offset=16), lineno=731, col_offset=16)], [], lineno=730, col_offset=12)], [], lineno=729, col_offset=8), Assign([Name('max_length', Store(), lineno=733, col_offset=8)], Num(0, lineno=733, col_offset=21), lineno=733, col_offset=8), For(Name('cmd', Store(), lineno=734, col_offset=12), BinOp(Name('std_commands', Load(), lineno=734, col_offset=20), Add(), Name('extra_commands', Load(), lineno=734, col_offset=35), lineno=734, col_offset=20), [If(Compare(Call(Name('len', Load(), lineno=735, col_offset=15), [Name('cmd', Load(), lineno=735, col_offset=19)], [], None, None, lineno=735, col_offset=15), [Gt()], [Name('max_length', Load(), lineno=735, col_offset=26)], lineno=735, col_offset=15), [Assign([Name('max_length', Store(), lineno=736, col_offset=16)], Call(Name('len', Load(), lineno=736, col_offset=29), [Name('cmd', Load(), lineno=736, col_offset=33)], [], None, None, lineno=736, col_offset=29), lineno=736, col_offset=16)], [], lineno=735, col_offset=12)], [], lineno=734, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=738, col_offset=8), 'print_command_list', Load(), lineno=738, col_offset=8), [Name('std_commands', Load(), lineno=738, col_offset=32), Str('Standard commands', lineno=739, col_offset=32), Name('max_length', Load(), lineno=740, col_offset=32)], [], None, None, lineno=738, col_offset=8), lineno=738, col_offset=8), If(Name('extra_commands', Load(), lineno=741, col_offset=11), [Print(None, [], True, lineno=742, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=743, col_offset=12), 'print_command_list', Load(), lineno=743, col_offset=12), [Name('extra_commands', Load(), lineno=743, col_offset=36), Str('Extra commands', lineno=744, col_offset=36), Name('max_length', Load(), lineno=745, col_offset=36)], [], None, None, lineno=743, col_offset=12), lineno=743, col_offset=12)], [], lineno=741, col_offset=8)], [], lineno=714, col_offset=4), FunctionDef('get_command_list', arguments([Name('self', Param(), lineno=747, col_offset=25)], None, None, []), [Expr(Str('Get a list of (command, description) tuples.\n        The list is divided into "standard commands" (listed in\n        distutils.command.__all__) and "extra commands" (mentioned in\n        self.cmdclass, but not a standard command).  The descriptions come\n        from the command class attribute \'description\'.\n        ', lineno=753, col_offset=-1), lineno=753, col_offset=-1), Import([alias('distutils.command', None)], lineno=757, col_offset=8), Assign([Name('std_commands', Store(), lineno=758, col_offset=8)], Attribute(Attribute(Name('distutils', Load(), lineno=758, col_offset=23), 'command', Load(), lineno=758, col_offset=23), '__all__', Load(), lineno=758, col_offset=23), lineno=758, col_offset=8), Assign([Name('is_std', Store(), lineno=759, col_offset=8)], Dict([], [], lineno=759, col_offset=17), lineno=759, col_offset=8), For(Name('cmd', Store(), lineno=760, col_offset=12), Name('std_commands', Load(), lineno=760, col_offset=19), [Assign([Subscript(Name('is_std', Load(), lineno=761, col_offset=12), Index(Name('cmd', Load(), lineno=761, col_offset=19)), Store(), lineno=761, col_offset=12)], Num(1, lineno=761, col_offset=26), lineno=761, col_offset=12)], [], lineno=760, col_offset=8), Assign([Name('extra_commands', Store(), lineno=763, col_offset=8)], List([], Load(), lineno=763, col_offset=25), lineno=763, col_offset=8), For(Name('cmd', Store(), lineno=764, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=764, col_offset=19), 'cmdclass', Load(), lineno=764, col_offset=19), 'keys', Load(), lineno=764, col_offset=19), [], [], None, None, lineno=764, col_offset=19), [If(UnaryOp(Not(), Call(Attribute(Name('is_std', Load(), lineno=765, col_offset=19), 'get', Load(), lineno=765, col_offset=19), [Name('cmd', Load(), lineno=765, col_offset=30)], [], None, None, lineno=765, col_offset=19), lineno=765, col_offset=15), [Expr(Call(Attribute(Name('extra_commands', Load(), lineno=766, col_offset=16), 'append', Load(), lineno=766, col_offset=16), [Name('cmd', Load(), lineno=766, col_offset=38)], [], None, None, lineno=766, col_offset=16), lineno=766, col_offset=16)], [], lineno=765, col_offset=12)], [], lineno=764, col_offset=8), Assign([Name('rv', Store(), lineno=768, col_offset=8)], List([], Load(), lineno=768, col_offset=13), lineno=768, col_offset=8), For(Name('cmd', Store(), lineno=769, col_offset=12), BinOp(Name('std_commands', Load(), lineno=769, col_offset=20), Add(), Name('extra_commands', Load(), lineno=769, col_offset=35), lineno=769, col_offset=20), [Assign([Name('klass', Store(), lineno=770, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=770, col_offset=20), 'cmdclass', Load(), lineno=770, col_offset=20), 'get', Load(), lineno=770, col_offset=20), [Name('cmd', Load(), lineno=770, col_offset=38)], [], None, None, lineno=770, col_offset=20), lineno=770, col_offset=12), If(UnaryOp(Not(), Name('klass', Load(), lineno=771, col_offset=19), lineno=771, col_offset=15), [Assign([Name('klass', Store(), lineno=772, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=772, col_offset=24), 'get_command_class', Load(), lineno=772, col_offset=24), [Name('cmd', Load(), lineno=772, col_offset=47)], [], None, None, lineno=772, col_offset=24), lineno=772, col_offset=16)], [], lineno=771, col_offset=12), TryExcept([Assign([Name('description', Store(), lineno=774, col_offset=16)], Attribute(Name('klass', Load(), lineno=774, col_offset=30), 'description', Load(), lineno=774, col_offset=30), lineno=774, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=775, col_offset=19), None, [Assign([Name('description', Store(), lineno=776, col_offset=16)], Str('(no description available)', lineno=776, col_offset=30), lineno=776, col_offset=16)], lineno=775, col_offset=12)], [], lineno=773, col_offset=12), Expr(Call(Attribute(Name('rv', Load(), lineno=777, col_offset=12), 'append', Load(), lineno=777, col_offset=12), [Tuple([Name('cmd', Load(), lineno=777, col_offset=23), Name('description', Load(), lineno=777, col_offset=28)], Load(), lineno=777, col_offset=23)], [], None, None, lineno=777, col_offset=12), lineno=777, col_offset=12)], [], lineno=769, col_offset=8), Return(Name('rv', Load(), lineno=778, col_offset=15), lineno=778, col_offset=8)], [], lineno=747, col_offset=4), FunctionDef('get_command_packages', arguments([Name('self', Param(), lineno=782, col_offset=29)], None, None, []), [Expr(Str('Return a list of packages from which commands are loaded.', lineno=783, col_offset=8), lineno=783, col_offset=8), Assign([Name('pkgs', Store(), lineno=784, col_offset=8)], Attribute(Name('self', Load(), lineno=784, col_offset=15), 'command_packages', Load(), lineno=784, col_offset=15), lineno=784, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=785, col_offset=15), [Name('pkgs', Load(), lineno=785, col_offset=26), Name('list', Load(), lineno=785, col_offset=32)], [], None, None, lineno=785, col_offset=15), lineno=785, col_offset=11), [If(Compare(Name('pkgs', Load(), lineno=786, col_offset=15), [Is()], [Name('None', Load(), lineno=786, col_offset=23)], lineno=786, col_offset=15), [Assign([Name('pkgs', Store(), lineno=787, col_offset=16)], Str('', lineno=787, col_offset=23), lineno=787, col_offset=16)], [], lineno=786, col_offset=12), Assign([Name('pkgs', Store(), lineno=788, col_offset=12)], ListComp(Call(Attribute(Name('pkg', Load(), lineno=788, col_offset=20), 'strip', Load(), lineno=788, col_offset=20), [], [], None, None, lineno=788, col_offset=20), [comprehension(Name('pkg', Store(), lineno=788, col_offset=36), Call(Attribute(Name('pkgs', Load(), lineno=788, col_offset=43), 'split', Load(), lineno=788, col_offset=43), [Str(',', lineno=788, col_offset=54)], [], None, None, lineno=788, col_offset=43), [Compare(Name('pkg', Load(), lineno=788, col_offset=62), [NotEq()], [Str('', lineno=788, col_offset=69)], lineno=788, col_offset=62)])], lineno=788, col_offset=20), lineno=788, col_offset=12), If(Compare(Str('distutils.command', lineno=789, col_offset=15), [NotIn()], [Name('pkgs', Load(), lineno=789, col_offset=42)], lineno=789, col_offset=15), [Expr(Call(Attribute(Name('pkgs', Load(), lineno=790, col_offset=16), 'insert', Load(), lineno=790, col_offset=16), [Num(0, lineno=790, col_offset=28), Str('distutils.command', lineno=790, col_offset=31)], [], None, None, lineno=790, col_offset=16), lineno=790, col_offset=16)], [], lineno=789, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=791, col_offset=12), 'command_packages', Store(), lineno=791, col_offset=12)], Name('pkgs', Load(), lineno=791, col_offset=36), lineno=791, col_offset=12)], [], lineno=785, col_offset=8), Return(Name('pkgs', Load(), lineno=792, col_offset=15), lineno=792, col_offset=8)], [], lineno=782, col_offset=4), FunctionDef('get_command_class', arguments([Name('self', Param(), lineno=794, col_offset=26), Name('command', Param(), lineno=794, col_offset=32)], None, None, []), [Expr(Str('Return the class that implements the Distutils command named by\n        \'command\'.  First we check the \'cmdclass\' dictionary; if the\n        command is mentioned there, we fetch the class object from the\n        dictionary and return it.  Otherwise we load the command module\n        ("distutils.command." + command) and fetch the command class from\n        the module.  The loaded class is also stored in \'cmdclass\'\n        to speed future calls to \'get_command_class()\'.\n\n        Raises DistutilsModuleError if the expected module could not be\n        found, or if that module does not define the expected class.\n        ', lineno=805, col_offset=-1), lineno=805, col_offset=-1), Assign([Name('klass', Store(), lineno=806, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=806, col_offset=16), 'cmdclass', Load(), lineno=806, col_offset=16), 'get', Load(), lineno=806, col_offset=16), [Name('command', Load(), lineno=806, col_offset=34)], [], None, None, lineno=806, col_offset=16), lineno=806, col_offset=8), If(Name('klass', Load(), lineno=807, col_offset=11), [Return(Name('klass', Load(), lineno=808, col_offset=19), lineno=808, col_offset=12)], [], lineno=807, col_offset=8), For(Name('pkgname', Store(), lineno=810, col_offset=12), Call(Attribute(Name('self', Load(), lineno=810, col_offset=23), 'get_command_packages', Load(), lineno=810, col_offset=23), [], [], None, None, lineno=810, col_offset=23), [Assign([Name('module_name', Store(), lineno=811, col_offset=12)], BinOp(Str('%s.%s', lineno=811, col_offset=26), Mod(), Tuple([Name('pkgname', Load(), lineno=811, col_offset=37), Name('command', Load(), lineno=811, col_offset=46)], Load(), lineno=811, col_offset=37), lineno=811, col_offset=26), lineno=811, col_offset=12), Assign([Name('klass_name', Store(), lineno=812, col_offset=12)], Name('command', Load(), lineno=812, col_offset=25), lineno=812, col_offset=12), TryExcept([Expr(Call(Name('__import__', Load(), lineno=815, col_offset=16), [Name('module_name', Load(), lineno=815, col_offset=28)], [], None, None, lineno=815, col_offset=16), lineno=815, col_offset=16), Assign([Name('module', Store(), lineno=816, col_offset=16)], Subscript(Attribute(Name('sys', Load(), lineno=816, col_offset=25), 'modules', Load(), lineno=816, col_offset=25), Index(Name('module_name', Load(), lineno=816, col_offset=37)), Load(), lineno=816, col_offset=25), lineno=816, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=817, col_offset=19), None, [Continue( lineno=818, col_offset=16)], lineno=817, col_offset=12)], [], lineno=814, col_offset=12), TryExcept([Assign([Name('klass', Store(), lineno=821, col_offset=16)], Call(Name('getattr', Load(), lineno=821, col_offset=24), [Name('module', Load(), lineno=821, col_offset=32), Name('klass_name', Load(), lineno=821, col_offset=40)], [], None, None, lineno=821, col_offset=24), lineno=821, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=822, col_offset=19), None, [Raise(Name('DistutilsModuleError', Load(), lineno=823, col_offset=22), BinOp(Str("invalid command '%s' (no class '%s' in module '%s')", lineno=824, col_offset=22), Mod(), Tuple([Name('command', Load(), lineno=825, col_offset=25), Name('klass_name', Load(), lineno=825, col_offset=34), Name('module_name', Load(), lineno=825, col_offset=46)], Load(), lineno=825, col_offset=25), lineno=824, col_offset=22), None, lineno=823, col_offset=16)], lineno=822, col_offset=12)], [], lineno=820, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=827, col_offset=12), 'cmdclass', Load(), lineno=827, col_offset=12), Index(Name('command', Load(), lineno=827, col_offset=26)), Store(), lineno=827, col_offset=12)], Name('klass', Load(), lineno=827, col_offset=37), lineno=827, col_offset=12), Return(Name('klass', Load(), lineno=828, col_offset=19), lineno=828, col_offset=12)], [], lineno=810, col_offset=8), Raise(Call(Name('DistutilsModuleError', Load(), lineno=830, col_offset=14), [BinOp(Str("invalid command '%s'", lineno=830, col_offset=35), Mod(), Name('command', Load(), lineno=830, col_offset=60), lineno=830, col_offset=35)], [], None, None, lineno=830, col_offset=14), None, None, lineno=830, col_offset=8)], [], lineno=794, col_offset=4), FunctionDef('get_command_obj', arguments([Name('self', Param(), lineno=833, col_offset=24), Name('command', Param(), lineno=833, col_offset=30), Name('create', Param(), lineno=833, col_offset=39)], None, None, [Num(1, lineno=833, col_offset=46)]), [Expr(Str("Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        ", lineno=838, col_offset=-1), lineno=838, col_offset=-1), Assign([Name('cmd_obj', Store(), lineno=839, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=839, col_offset=18), 'command_obj', Load(), lineno=839, col_offset=18), 'get', Load(), lineno=839, col_offset=18), [Name('command', Load(), lineno=839, col_offset=39)], [], None, None, lineno=839, col_offset=18), lineno=839, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('cmd_obj', Load(), lineno=840, col_offset=15), lineno=840, col_offset=11), Name('create', Load(), lineno=840, col_offset=27)], lineno=840, col_offset=11), [If(Name('DEBUG', Load(), lineno=841, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=842, col_offset=16), 'announce', Load(), lineno=842, col_offset=16), [BinOp(Str("Distribution.get_command_obj(): creating '%s' command object", lineno=842, col_offset=30), Mod(), Name('command', Load(), lineno=843, col_offset=63), lineno=842, col_offset=30)], [], None, None, lineno=842, col_offset=16), lineno=842, col_offset=16)], [], lineno=841, col_offset=12), Assign([Name('klass', Store(), lineno=845, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=845, col_offset=20), 'get_command_class', Load(), lineno=845, col_offset=20), [Name('command', Load(), lineno=845, col_offset=43)], [], None, None, lineno=845, col_offset=20), lineno=845, col_offset=12), Assign([Name('cmd_obj', Store(), lineno=846, col_offset=12), Subscript(Attribute(Name('self', Load(), lineno=846, col_offset=22), 'command_obj', Load(), lineno=846, col_offset=22), Index(Name('command', Load(), lineno=846, col_offset=39)), Store(), lineno=846, col_offset=22)], Call(Name('klass', Load(), lineno=846, col_offset=50), [Name('self', Load(), lineno=846, col_offset=56)], [], None, None, lineno=846, col_offset=50), lineno=846, col_offset=12), Assign([Subscript(Attribute(Name('self', Load(), lineno=847, col_offset=12), 'have_run', Load(), lineno=847, col_offset=12), Index(Name('command', Load(), lineno=847, col_offset=26)), Store(), lineno=847, col_offset=12)], Num(0, lineno=847, col_offset=37), lineno=847, col_offset=12), Assign([Name('options', Store(), lineno=854, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=854, col_offset=22), 'command_options', Load(), lineno=854, col_offset=22), 'get', Load(), lineno=854, col_offset=22), [Name('command', Load(), lineno=854, col_offset=47)], [], None, None, lineno=854, col_offset=22), lineno=854, col_offset=12), If(Name('options', Load(), lineno=855, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=856, col_offset=16), '_set_command_options', Load(), lineno=856, col_offset=16), [Name('cmd_obj', Load(), lineno=856, col_offset=42), Name('options', Load(), lineno=856, col_offset=51)], [], None, None, lineno=856, col_offset=16), lineno=856, col_offset=16)], [], lineno=855, col_offset=12)], [], lineno=840, col_offset=8), Return(Name('cmd_obj', Load(), lineno=858, col_offset=15), lineno=858, col_offset=8)], [], lineno=833, col_offset=4), FunctionDef('_set_command_options', arguments([Name('self', Param(), lineno=860, col_offset=29), Name('command_obj', Param(), lineno=860, col_offset=35), Name('option_dict', Param(), lineno=860, col_offset=48)], None, None, [Name('None', Load(), lineno=860, col_offset=60)]), [Expr(Str("Set the options for 'command_obj' from 'option_dict'.  Basically\n        this means copying elements of a dictionary ('option_dict') to\n        attributes of an instance ('command').\n\n        'command_obj' must be a Command instance.  If 'option_dict' is not\n        supplied, uses the standard option dictionary for this command\n        (from 'self.command_options').\n        ", lineno=868, col_offset=-1), lineno=868, col_offset=-1), Assign([Name('command_name', Store(), lineno=869, col_offset=8)], Call(Attribute(Name('command_obj', Load(), lineno=869, col_offset=23), 'get_command_name', Load(), lineno=869, col_offset=23), [], [], None, None, lineno=869, col_offset=23), lineno=869, col_offset=8), If(Compare(Name('option_dict', Load(), lineno=870, col_offset=11), [Is()], [Name('None', Load(), lineno=870, col_offset=26)], lineno=870, col_offset=11), [Assign([Name('option_dict', Store(), lineno=871, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=871, col_offset=26), 'get_option_dict', Load(), lineno=871, col_offset=26), [Name('command_name', Load(), lineno=871, col_offset=47)], [], None, None, lineno=871, col_offset=26), lineno=871, col_offset=12)], [], lineno=870, col_offset=8), If(Name('DEBUG', Load(), lineno=873, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=874, col_offset=12), 'announce', Load(), lineno=874, col_offset=12), [BinOp(Str("  setting options for '%s' command:", lineno=874, col_offset=26), Mod(), Name('command_name', Load(), lineno=874, col_offset=66), lineno=874, col_offset=26)], [], None, None, lineno=874, col_offset=12), lineno=874, col_offset=12)], [], lineno=873, col_offset=8), For(Tuple([Name('option', Store(), lineno=875, col_offset=13), Tuple([Name('source', Store(), lineno=875, col_offset=22), Name('value', Store(), lineno=875, col_offset=30)], Store(), lineno=875, col_offset=22)], Store(), lineno=875, col_offset=13), Call(Attribute(Name('option_dict', Load(), lineno=875, col_offset=41), 'items', Load(), lineno=875, col_offset=41), [], [], None, None, lineno=875, col_offset=41), [If(Name('DEBUG', Load(), lineno=876, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=877, col_offset=16), 'announce', Load(), lineno=877, col_offset=16), [BinOp(Str('    %s = %s (from %s)', lineno=877, col_offset=30), Mod(), Tuple([Name('option', Load(), lineno=877, col_offset=57), Name('value', Load(), lineno=877, col_offset=65), Name('source', Load(), lineno=878, col_offset=57)], Load(), lineno=877, col_offset=57), lineno=877, col_offset=30)], [], None, None, lineno=877, col_offset=16), lineno=877, col_offset=16)], [], lineno=876, col_offset=12), TryExcept([Assign([Name('bool_opts', Store(), lineno=880, col_offset=16)], Call(Name('map', Load(), lineno=880, col_offset=28), [Name('translate_longopt', Load(), lineno=880, col_offset=32), Attribute(Name('command_obj', Load(), lineno=880, col_offset=51), 'boolean_options', Load(), lineno=880, col_offset=51)], [], None, None, lineno=880, col_offset=28), lineno=880, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=881, col_offset=19), None, [Assign([Name('bool_opts', Store(), lineno=882, col_offset=16)], List([], Load(), lineno=882, col_offset=28), lineno=882, col_offset=16)], lineno=881, col_offset=12)], [], lineno=879, col_offset=12), TryExcept([Assign([Name('neg_opt', Store(), lineno=884, col_offset=16)], Attribute(Name('command_obj', Load(), lineno=884, col_offset=26), 'negative_opt', Load(), lineno=884, col_offset=26), lineno=884, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=885, col_offset=19), None, [Assign([Name('neg_opt', Store(), lineno=886, col_offset=16)], Dict([], [], lineno=886, col_offset=26), lineno=886, col_offset=16)], lineno=885, col_offset=12)], [], lineno=883, col_offset=12), TryExcept([Assign([Name('is_string', Store(), lineno=889, col_offset=16)], Call(Name('isinstance', Load(), lineno=889, col_offset=28), [Name('value', Load(), lineno=889, col_offset=39), Name('str', Load(), lineno=889, col_offset=46)], [], None, None, lineno=889, col_offset=28), lineno=889, col_offset=16), If(BoolOp(And(), [Compare(Name('option', Load(), lineno=890, col_offset=19), [In()], [Name('neg_opt', Load(), lineno=890, col_offset=29)], lineno=890, col_offset=19), Name('is_string', Load(), lineno=890, col_offset=41)], lineno=890, col_offset=19), [Expr(Call(Name('setattr', Load(), lineno=891, col_offset=20), [Name('command_obj', Load(), lineno=891, col_offset=28), Subscript(Name('neg_opt', Load(), lineno=891, col_offset=41), Index(Name('option', Load(), lineno=891, col_offset=49)), Load(), lineno=891, col_offset=41), UnaryOp(Not(), Call(Name('strtobool', Load(), lineno=891, col_offset=62), [Name('value', Load(), lineno=891, col_offset=72)], [], None, None, lineno=891, col_offset=62), lineno=891, col_offset=58)], [], None, None, lineno=891, col_offset=20), lineno=891, col_offset=20)], [If(BoolOp(And(), [Compare(Name('option', Load(), lineno=892, col_offset=21), [In()], [Name('bool_opts', Load(), lineno=892, col_offset=31)], lineno=892, col_offset=21), Name('is_string', Load(), lineno=892, col_offset=45)], lineno=892, col_offset=21), [Expr(Call(Name('setattr', Load(), lineno=893, col_offset=20), [Name('command_obj', Load(), lineno=893, col_offset=28), Name('option', Load(), lineno=893, col_offset=41), Call(Name('strtobool', Load(), lineno=893, col_offset=49), [Name('value', Load(), lineno=893, col_offset=59)], [], None, None, lineno=893, col_offset=49)], [], None, None, lineno=893, col_offset=20), lineno=893, col_offset=20)], [If(Call(Name('hasattr', Load(), lineno=894, col_offset=21), [Name('command_obj', Load(), lineno=894, col_offset=29), Name('option', Load(), lineno=894, col_offset=42)], [], None, None, lineno=894, col_offset=21), [Expr(Call(Name('setattr', Load(), lineno=895, col_offset=20), [Name('command_obj', Load(), lineno=895, col_offset=28), Name('option', Load(), lineno=895, col_offset=41), Name('value', Load(), lineno=895, col_offset=49)], [], None, None, lineno=895, col_offset=20), lineno=895, col_offset=20)], [Raise(Name('DistutilsOptionError', Load(), lineno=897, col_offset=26), BinOp(Str("error in %s: command '%s' has no such option '%s'", lineno=898, col_offset=27), Mod(), Tuple([Name('source', Load(), lineno=899, col_offset=30), Name('command_name', Load(), lineno=899, col_offset=38), Name('option', Load(), lineno=899, col_offset=52)], Load(), lineno=899, col_offset=30), lineno=898, col_offset=27), None, lineno=897, col_offset=20)], lineno=894, col_offset=21)], lineno=892, col_offset=21)], lineno=890, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=900, col_offset=19), Name('msg', Store(), lineno=900, col_offset=31), [Raise(Name('DistutilsOptionError', Load(), lineno=901, col_offset=22), Name('msg', Load(), lineno=901, col_offset=44), None, lineno=901, col_offset=16)], lineno=900, col_offset=12)], [], lineno=888, col_offset=12)], [], lineno=875, col_offset=8)], [], lineno=860, col_offset=4), FunctionDef('reinitialize_command', arguments([Name('self', Param(), lineno=903, col_offset=29), Name('command', Param(), lineno=903, col_offset=35), Name('reinit_subcommands', Param(), lineno=903, col_offset=44)], None, None, [Num(0, lineno=903, col_offset=63)]), [Expr(Str('Reinitializes a command to the state it was in when first\n        returned by \'get_command_obj()\': ie., initialized but not yet\n        finalized.  This provides the opportunity to sneak option\n        values in programmatically, overriding or supplementing\n        user-supplied values from the config files and command line.\n        You\'ll have to re-finalize the command object (by calling\n        \'finalize_options()\' or \'ensure_finalized()\') before using it for\n        real.\n\n        \'command\' should be a command name (string) or command object.  If\n        \'reinit_subcommands\' is true, also reinitializes the command\'s\n        sub-commands, as declared by the \'sub_commands\' class attribute (if\n        it has one).  See the "install" command for an example.  Only\n        reinitializes the sub-commands that actually matter, ie. those\n        whose test predicates return true.\n\n        Returns the reinitialized command object.\n        ', lineno=921, col_offset=-1), lineno=921, col_offset=-1), ImportFrom('distutils.cmd', [alias('Command', None)], 0, lineno=922, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=923, col_offset=15), [Name('command', Load(), lineno=923, col_offset=26), Name('Command', Load(), lineno=923, col_offset=35)], [], None, None, lineno=923, col_offset=15), lineno=923, col_offset=11), [Assign([Name('command_name', Store(), lineno=924, col_offset=12)], Name('command', Load(), lineno=924, col_offset=27), lineno=924, col_offset=12), Assign([Name('command', Store(), lineno=925, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=925, col_offset=22), 'get_command_obj', Load(), lineno=925, col_offset=22), [Name('command_name', Load(), lineno=925, col_offset=43)], [], None, None, lineno=925, col_offset=22), lineno=925, col_offset=12)], [Assign([Name('command_name', Store(), lineno=927, col_offset=12)], Call(Attribute(Name('command', Load(), lineno=927, col_offset=27), 'get_command_name', Load(), lineno=927, col_offset=27), [], [], None, None, lineno=927, col_offset=27), lineno=927, col_offset=12)], lineno=923, col_offset=8), If(UnaryOp(Not(), Attribute(Name('command', Load(), lineno=929, col_offset=15), 'finalized', Load(), lineno=929, col_offset=15), lineno=929, col_offset=11), [Return(Name('command', Load(), lineno=930, col_offset=19), lineno=930, col_offset=12)], [], lineno=929, col_offset=8), Expr(Call(Attribute(Name('command', Load(), lineno=931, col_offset=8), 'initialize_options', Load(), lineno=931, col_offset=8), [], [], None, None, lineno=931, col_offset=8), lineno=931, col_offset=8), Assign([Attribute(Name('command', Load(), lineno=932, col_offset=8), 'finalized', Store(), lineno=932, col_offset=8)], Num(0, lineno=932, col_offset=28), lineno=932, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=933, col_offset=8), 'have_run', Load(), lineno=933, col_offset=8), Index(Name('command_name', Load(), lineno=933, col_offset=22)), Store(), lineno=933, col_offset=8)], Num(0, lineno=933, col_offset=38), lineno=933, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=934, col_offset=8), '_set_command_options', Load(), lineno=934, col_offset=8), [Name('command', Load(), lineno=934, col_offset=34)], [], None, None, lineno=934, col_offset=8), lineno=934, col_offset=8), If(Name('reinit_subcommands', Load(), lineno=936, col_offset=11), [For(Name('sub', Store(), lineno=937, col_offset=16), Call(Attribute(Name('command', Load(), lineno=937, col_offset=23), 'get_sub_commands', Load(), lineno=937, col_offset=23), [], [], None, None, lineno=937, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=938, col_offset=16), 'reinitialize_command', Load(), lineno=938, col_offset=16), [Name('sub', Load(), lineno=938, col_offset=42), Name('reinit_subcommands', Load(), lineno=938, col_offset=47)], [], None, None, lineno=938, col_offset=16), lineno=938, col_offset=16)], [], lineno=937, col_offset=12)], [], lineno=936, col_offset=8), Return(Name('command', Load(), lineno=940, col_offset=15), lineno=940, col_offset=8)], [], lineno=903, col_offset=4), FunctionDef('announce', arguments([Name('self', Param(), lineno=944, col_offset=17), Name('msg', Param(), lineno=944, col_offset=23), Name('level', Param(), lineno=944, col_offset=28)], None, None, [Attribute(Name('log', Load(), lineno=944, col_offset=34), 'INFO', Load(), lineno=944, col_offset=34)]), [Expr(Call(Attribute(Name('log', Load(), lineno=945, col_offset=8), 'log', Load(), lineno=945, col_offset=8), [Name('level', Load(), lineno=945, col_offset=16), Name('msg', Load(), lineno=945, col_offset=23)], [], None, None, lineno=945, col_offset=8), lineno=945, col_offset=8)], [], lineno=944, col_offset=4), FunctionDef('run_commands', arguments([Name('self', Param(), lineno=947, col_offset=21)], None, None, []), [Expr(Str("Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        ", lineno=951, col_offset=-1), lineno=951, col_offset=-1), For(Name('cmd', Store(), lineno=952, col_offset=12), Attribute(Name('self', Load(), lineno=952, col_offset=19), 'commands', Load(), lineno=952, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=953, col_offset=12), 'run_command', Load(), lineno=953, col_offset=12), [Name('cmd', Load(), lineno=953, col_offset=29)], [], None, None, lineno=953, col_offset=12), lineno=953, col_offset=12)], [], lineno=952, col_offset=8)], [], lineno=947, col_offset=4), FunctionDef('run_command', arguments([Name('self', Param(), lineno=957, col_offset=20), Name('command', Param(), lineno=957, col_offset=26)], None, None, []), [Expr(Str("Do whatever it takes to run a command (including nothing at all,\n        if the command has already been run).  Specifically: if we have\n        already created and run the command named by 'command', return\n        silently without doing anything.  If the command named by 'command'\n        doesn't even have a command object yet, create one.  Then invoke\n        'run()' on that command object (or an existing one).\n        ", lineno=964, col_offset=-1), lineno=964, col_offset=-1), If(Call(Attribute(Attribute(Name('self', Load(), lineno=966, col_offset=11), 'have_run', Load(), lineno=966, col_offset=11), 'get', Load(), lineno=966, col_offset=11), [Name('command', Load(), lineno=966, col_offset=29)], [], None, None, lineno=966, col_offset=11), [Return(None, lineno=967, col_offset=12)], [], lineno=966, col_offset=8), Expr(Call(Attribute(Name('log', Load(), lineno=969, col_offset=8), 'info', Load(), lineno=969, col_offset=8), [Str('running %s', lineno=969, col_offset=17), Name('command', Load(), lineno=969, col_offset=31)], [], None, None, lineno=969, col_offset=8), lineno=969, col_offset=8), Assign([Name('cmd_obj', Store(), lineno=970, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=970, col_offset=18), 'get_command_obj', Load(), lineno=970, col_offset=18), [Name('command', Load(), lineno=970, col_offset=39)], [], None, None, lineno=970, col_offset=18), lineno=970, col_offset=8), Expr(Call(Attribute(Name('cmd_obj', Load(), lineno=971, col_offset=8), 'ensure_finalized', Load(), lineno=971, col_offset=8), [], [], None, None, lineno=971, col_offset=8), lineno=971, col_offset=8), Expr(Call(Attribute(Name('cmd_obj', Load(), lineno=972, col_offset=8), 'run', Load(), lineno=972, col_offset=8), [], [], None, None, lineno=972, col_offset=8), lineno=972, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=973, col_offset=8), 'have_run', Load(), lineno=973, col_offset=8), Index(Name('command', Load(), lineno=973, col_offset=22)), Store(), lineno=973, col_offset=8)], Num(1, lineno=973, col_offset=33), lineno=973, col_offset=8)], [], lineno=957, col_offset=4), FunctionDef('has_pure_modules', arguments([Name('self', Param(), lineno=978, col_offset=25)], None, None, []), [Return(Compare(Call(Name('len', Load(), lineno=979, col_offset=15), [BoolOp(Or(), [Attribute(Name('self', Load(), lineno=979, col_offset=19), 'packages', Load(), lineno=979, col_offset=19), Attribute(Name('self', Load(), lineno=979, col_offset=36), 'py_modules', Load(), lineno=979, col_offset=36), List([], Load(), lineno=979, col_offset=55)], lineno=979, col_offset=19)], [], None, None, lineno=979, col_offset=15), [Gt()], [Num(0, lineno=979, col_offset=61)], lineno=979, col_offset=15), lineno=979, col_offset=8)], [], lineno=978, col_offset=4), FunctionDef('has_ext_modules', arguments([Name('self', Param(), lineno=981, col_offset=24)], None, None, []), [Return(BoolOp(And(), [Attribute(Name('self', Load(), lineno=982, col_offset=15), 'ext_modules', Load(), lineno=982, col_offset=15), Compare(Call(Name('len', Load(), lineno=982, col_offset=36), [Attribute(Name('self', Load(), lineno=982, col_offset=40), 'ext_modules', Load(), lineno=982, col_offset=40)], [], None, None, lineno=982, col_offset=36), [Gt()], [Num(0, lineno=982, col_offset=60)], lineno=982, col_offset=36)], lineno=982, col_offset=15), lineno=982, col_offset=8)], [], lineno=981, col_offset=4), FunctionDef('has_c_libraries', arguments([Name('self', Param(), lineno=984, col_offset=24)], None, None, []), [Return(BoolOp(And(), [Attribute(Name('self', Load(), lineno=985, col_offset=15), 'libraries', Load(), lineno=985, col_offset=15), Compare(Call(Name('len', Load(), lineno=985, col_offset=34), [Attribute(Name('self', Load(), lineno=985, col_offset=38), 'libraries', Load(), lineno=985, col_offset=38)], [], None, None, lineno=985, col_offset=34), [Gt()], [Num(0, lineno=985, col_offset=56)], lineno=985, col_offset=34)], lineno=985, col_offset=15), lineno=985, col_offset=8)], [], lineno=984, col_offset=4), FunctionDef('has_modules', arguments([Name('self', Param(), lineno=987, col_offset=20)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=988, col_offset=15), 'has_pure_modules', Load(), lineno=988, col_offset=15), [], [], None, None, lineno=988, col_offset=15), Call(Attribute(Name('self', Load(), lineno=988, col_offset=42), 'has_ext_modules', Load(), lineno=988, col_offset=42), [], [], None, None, lineno=988, col_offset=42)], lineno=988, col_offset=15), lineno=988, col_offset=8)], [], lineno=987, col_offset=4), FunctionDef('has_headers', arguments([Name('self', Param(), lineno=990, col_offset=20)], None, None, []), [Return(BoolOp(And(), [Attribute(Name('self', Load(), lineno=991, col_offset=15), 'headers', Load(), lineno=991, col_offset=15), Compare(Call(Name('len', Load(), lineno=991, col_offset=32), [Attribute(Name('self', Load(), lineno=991, col_offset=36), 'headers', Load(), lineno=991, col_offset=36)], [], None, None, lineno=991, col_offset=32), [Gt()], [Num(0, lineno=991, col_offset=52)], lineno=991, col_offset=32)], lineno=991, col_offset=15), lineno=991, col_offset=8)], [], lineno=990, col_offset=4), FunctionDef('has_scripts', arguments([Name('self', Param(), lineno=993, col_offset=20)], None, None, []), [Return(BoolOp(And(), [Attribute(Name('self', Load(), lineno=994, col_offset=15), 'scripts', Load(), lineno=994, col_offset=15), Compare(Call(Name('len', Load(), lineno=994, col_offset=32), [Attribute(Name('self', Load(), lineno=994, col_offset=36), 'scripts', Load(), lineno=994, col_offset=36)], [], None, None, lineno=994, col_offset=32), [Gt()], [Num(0, lineno=994, col_offset=52)], lineno=994, col_offset=32)], lineno=994, col_offset=15), lineno=994, col_offset=8)], [], lineno=993, col_offset=4), FunctionDef('has_data_files', arguments([Name('self', Param(), lineno=996, col_offset=23)], None, None, []), [Return(BoolOp(And(), [Attribute(Name('self', Load(), lineno=997, col_offset=15), 'data_files', Load(), lineno=997, col_offset=15), Compare(Call(Name('len', Load(), lineno=997, col_offset=35), [Attribute(Name('self', Load(), lineno=997, col_offset=39), 'data_files', Load(), lineno=997, col_offset=39)], [], None, None, lineno=997, col_offset=35), [Gt()], [Num(0, lineno=997, col_offset=58)], lineno=997, col_offset=35)], lineno=997, col_offset=15), lineno=997, col_offset=8)], [], lineno=996, col_offset=4), FunctionDef('is_pure', arguments([Name('self', Param(), lineno=999, col_offset=16)], None, None, []), [Return(BoolOp(And(), [Call(Attribute(Name('self', Load(), lineno=1000, col_offset=16), 'has_pure_modules', Load(), lineno=1000, col_offset=16), [], [], None, None, lineno=1000, col_offset=16), UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=1001, col_offset=20), 'has_ext_modules', Load(), lineno=1001, col_offset=20), [], [], None, None, lineno=1001, col_offset=20), lineno=1001, col_offset=16), UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=1002, col_offset=20), 'has_c_libraries', Load(), lineno=1002, col_offset=20), [], [], None, None, lineno=1002, col_offset=20), lineno=1002, col_offset=16)], lineno=1000, col_offset=16), lineno=1000, col_offset=8)], [], lineno=999, col_offset=4)], [], lineno=34, col_offset=0), ClassDef('DistributionMetadata', [], [Expr(Str('Dummy class to hold the distribution meta-data: name, version,\n    author, and so forth.\n    ', lineno=1014, col_offset=-1), lineno=1014, col_offset=-1), Assign([Name('_METHOD_BASENAMES', Store(), lineno=1016, col_offset=4)], Tuple([Str('name', lineno=1016, col_offset=25), Str('version', lineno=1016, col_offset=33), Str('author', lineno=1016, col_offset=44), Str('author_email', lineno=1016, col_offset=54), Str('maintainer', lineno=1017, col_offset=25), Str('maintainer_email', lineno=1017, col_offset=39), Str('url', lineno=1017, col_offset=59), Str('license', lineno=1018, col_offset=25), Str('description', lineno=1018, col_offset=36), Str('long_description', lineno=1018, col_offset=51), Str('keywords', lineno=1019, col_offset=25), Str('platforms', lineno=1019, col_offset=37), Str('fullname', lineno=1019, col_offset=50), Str('contact', lineno=1019, col_offset=62), Str('contact_email', lineno=1020, col_offset=25), Str('license', lineno=1020, col_offset=42), Str('classifiers', lineno=1020, col_offset=53), Str('download_url', lineno=1021, col_offset=25), Str('provides', lineno=1023, col_offset=25), Str('requires', lineno=1023, col_offset=37), Str('obsoletes', lineno=1023, col_offset=49)], Load(), lineno=1016, col_offset=25), lineno=1016, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1026, col_offset=17), Name('path', Param(), lineno=1026, col_offset=23)], None, None, [Name('None', Load(), lineno=1026, col_offset=28)]), [If(Compare(Name('path', Load(), lineno=1027, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1027, col_offset=23)], lineno=1027, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1028, col_offset=12), 'read_pkg_file', Load(), lineno=1028, col_offset=12), [Call(Name('open', Load(), lineno=1028, col_offset=31), [Name('path', Load(), lineno=1028, col_offset=36)], [], None, None, lineno=1028, col_offset=31)], [], None, None, lineno=1028, col_offset=12), lineno=1028, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1030, col_offset=12), 'name', Store(), lineno=1030, col_offset=12)], Name('None', Load(), lineno=1030, col_offset=24), lineno=1030, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1031, col_offset=12), 'version', Store(), lineno=1031, col_offset=12)], Name('None', Load(), lineno=1031, col_offset=27), lineno=1031, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1032, col_offset=12), 'author', Store(), lineno=1032, col_offset=12)], Name('None', Load(), lineno=1032, col_offset=26), lineno=1032, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1033, col_offset=12), 'author_email', Store(), lineno=1033, col_offset=12)], Name('None', Load(), lineno=1033, col_offset=32), lineno=1033, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1034, col_offset=12), 'maintainer', Store(), lineno=1034, col_offset=12)], Name('None', Load(), lineno=1034, col_offset=30), lineno=1034, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1035, col_offset=12), 'maintainer_email', Store(), lineno=1035, col_offset=12)], Name('None', Load(), lineno=1035, col_offset=36), lineno=1035, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1036, col_offset=12), 'url', Store(), lineno=1036, col_offset=12)], Name('None', Load(), lineno=1036, col_offset=23), lineno=1036, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1037, col_offset=12), 'license', Store(), lineno=1037, col_offset=12)], Name('None', Load(), lineno=1037, col_offset=27), lineno=1037, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1038, col_offset=12), 'description', Store(), lineno=1038, col_offset=12)], Name('None', Load(), lineno=1038, col_offset=31), lineno=1038, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1039, col_offset=12), 'long_description', Store(), lineno=1039, col_offset=12)], Name('None', Load(), lineno=1039, col_offset=36), lineno=1039, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1040, col_offset=12), 'keywords', Store(), lineno=1040, col_offset=12)], Name('None', Load(), lineno=1040, col_offset=28), lineno=1040, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1041, col_offset=12), 'platforms', Store(), lineno=1041, col_offset=12)], Name('None', Load(), lineno=1041, col_offset=29), lineno=1041, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1042, col_offset=12), 'classifiers', Store(), lineno=1042, col_offset=12)], Name('None', Load(), lineno=1042, col_offset=31), lineno=1042, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1043, col_offset=12), 'download_url', Store(), lineno=1043, col_offset=12)], Name('None', Load(), lineno=1043, col_offset=32), lineno=1043, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1045, col_offset=12), 'provides', Store(), lineno=1045, col_offset=12)], Name('None', Load(), lineno=1045, col_offset=28), lineno=1045, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1046, col_offset=12), 'requires', Store(), lineno=1046, col_offset=12)], Name('None', Load(), lineno=1046, col_offset=28), lineno=1046, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1047, col_offset=12), 'obsoletes', Store(), lineno=1047, col_offset=12)], Name('None', Load(), lineno=1047, col_offset=29), lineno=1047, col_offset=12)], lineno=1027, col_offset=8)], [], lineno=1026, col_offset=4), FunctionDef('read_pkg_file', arguments([Name('self', Param(), lineno=1049, col_offset=22), Name('file', Param(), lineno=1049, col_offset=28)], None, None, []), [Expr(Str('Reads the metadata values from a file object.', lineno=1050, col_offset=8), lineno=1050, col_offset=8), Assign([Name('msg', Store(), lineno=1051, col_offset=8)], Call(Name('message_from_file', Load(), lineno=1051, col_offset=14), [Name('file', Load(), lineno=1051, col_offset=32)], [], None, None, lineno=1051, col_offset=14), lineno=1051, col_offset=8), FunctionDef('_read_field', arguments([Name('name', Param(), lineno=1053, col_offset=24)], None, None, []), [Assign([Name('value', Store(), lineno=1054, col_offset=12)], Subscript(Name('msg', Load(), lineno=1054, col_offset=20), Index(Name('name', Load(), lineno=1054, col_offset=24)), Load(), lineno=1054, col_offset=20), lineno=1054, col_offset=12), If(Compare(Name('value', Load(), lineno=1055, col_offset=15), [Eq()], [Str('UNKNOWN', lineno=1055, col_offset=24)], lineno=1055, col_offset=15), [Return(Name('None', Load(), lineno=1056, col_offset=23), lineno=1056, col_offset=16)], [], lineno=1055, col_offset=12), Return(Name('value', Load(), lineno=1057, col_offset=19), lineno=1057, col_offset=12)], [], lineno=1053, col_offset=8), FunctionDef('_read_list', arguments([Name('name', Param(), lineno=1059, col_offset=23)], None, None, []), [Assign([Name('values', Store(), lineno=1060, col_offset=12)], Call(Attribute(Name('msg', Load(), lineno=1060, col_offset=21), 'get_all', Load(), lineno=1060, col_offset=21), [Name('name', Load(), lineno=1060, col_offset=33), Name('None', Load(), lineno=1060, col_offset=39)], [], None, None, lineno=1060, col_offset=21), lineno=1060, col_offset=12), If(Compare(Name('values', Load(), lineno=1061, col_offset=15), [Eq()], [List([], Load(), lineno=1061, col_offset=25)], lineno=1061, col_offset=15), [Return(Name('None', Load(), lineno=1062, col_offset=23), lineno=1062, col_offset=16)], [], lineno=1061, col_offset=12), Return(Name('values', Load(), lineno=1063, col_offset=19), lineno=1063, col_offset=12)], [], lineno=1059, col_offset=8), Assign([Name('metadata_version', Store(), lineno=1065, col_offset=8)], Subscript(Name('msg', Load(), lineno=1065, col_offset=27), Index(Str('metadata-version', lineno=1065, col_offset=31)), Load(), lineno=1065, col_offset=27), lineno=1065, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1066, col_offset=8), 'name', Store(), lineno=1066, col_offset=8)], Call(Name('_read_field', Load(), lineno=1066, col_offset=20), [Str('name', lineno=1066, col_offset=32)], [], None, None, lineno=1066, col_offset=20), lineno=1066, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1067, col_offset=8), 'version', Store(), lineno=1067, col_offset=8)], Call(Name('_read_field', Load(), lineno=1067, col_offset=23), [Str('version', lineno=1067, col_offset=35)], [], None, None, lineno=1067, col_offset=23), lineno=1067, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1068, col_offset=8), 'description', Store(), lineno=1068, col_offset=8)], Call(Name('_read_field', Load(), lineno=1068, col_offset=27), [Str('summary', lineno=1068, col_offset=39)], [], None, None, lineno=1068, col_offset=27), lineno=1068, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1070, col_offset=8), 'author', Store(), lineno=1070, col_offset=8)], Call(Name('_read_field', Load(), lineno=1070, col_offset=22), [Str('author', lineno=1070, col_offset=34)], [], None, None, lineno=1070, col_offset=22), lineno=1070, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1071, col_offset=8), 'maintainer', Store(), lineno=1071, col_offset=8)], Name('None', Load(), lineno=1071, col_offset=26), lineno=1071, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1072, col_offset=8), 'author_email', Store(), lineno=1072, col_offset=8)], Call(Name('_read_field', Load(), lineno=1072, col_offset=28), [Str('author-email', lineno=1072, col_offset=40)], [], None, None, lineno=1072, col_offset=28), lineno=1072, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1073, col_offset=8), 'maintainer_email', Store(), lineno=1073, col_offset=8)], Name('None', Load(), lineno=1073, col_offset=32), lineno=1073, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1074, col_offset=8), 'url', Store(), lineno=1074, col_offset=8)], Call(Name('_read_field', Load(), lineno=1074, col_offset=19), [Str('home-page', lineno=1074, col_offset=31)], [], None, None, lineno=1074, col_offset=19), lineno=1074, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1075, col_offset=8), 'license', Store(), lineno=1075, col_offset=8)], Call(Name('_read_field', Load(), lineno=1075, col_offset=23), [Str('license', lineno=1075, col_offset=35)], [], None, None, lineno=1075, col_offset=23), lineno=1075, col_offset=8), If(Compare(Str('download-url', lineno=1077, col_offset=11), [In()], [Name('msg', Load(), lineno=1077, col_offset=29)], lineno=1077, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1078, col_offset=12), 'download_url', Store(), lineno=1078, col_offset=12)], Call(Name('_read_field', Load(), lineno=1078, col_offset=32), [Str('download-url', lineno=1078, col_offset=44)], [], None, None, lineno=1078, col_offset=32), lineno=1078, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1080, col_offset=12), 'download_url', Store(), lineno=1080, col_offset=12)], Name('None', Load(), lineno=1080, col_offset=32), lineno=1080, col_offset=12)], lineno=1077, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1082, col_offset=8), 'long_description', Store(), lineno=1082, col_offset=8)], Call(Name('_read_field', Load(), lineno=1082, col_offset=32), [Str('description', lineno=1082, col_offset=44)], [], None, None, lineno=1082, col_offset=32), lineno=1082, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1083, col_offset=8), 'description', Store(), lineno=1083, col_offset=8)], Call(Name('_read_field', Load(), lineno=1083, col_offset=27), [Str('summary', lineno=1083, col_offset=39)], [], None, None, lineno=1083, col_offset=27), lineno=1083, col_offset=8), If(Compare(Str('keywords', lineno=1085, col_offset=11), [In()], [Name('msg', Load(), lineno=1085, col_offset=25)], lineno=1085, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1086, col_offset=12), 'keywords', Store(), lineno=1086, col_offset=12)], Call(Attribute(Call(Name('_read_field', Load(), lineno=1086, col_offset=28), [Str('keywords', lineno=1086, col_offset=40)], [], None, None, lineno=1086, col_offset=28), 'split', Load(), lineno=1086, col_offset=28), [Str(',', lineno=1086, col_offset=58)], [], None, None, lineno=1086, col_offset=28), lineno=1086, col_offset=12)], [], lineno=1085, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1088, col_offset=8), 'platforms', Store(), lineno=1088, col_offset=8)], Call(Name('_read_list', Load(), lineno=1088, col_offset=25), [Str('platform', lineno=1088, col_offset=36)], [], None, None, lineno=1088, col_offset=25), lineno=1088, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1089, col_offset=8), 'classifiers', Store(), lineno=1089, col_offset=8)], Call(Name('_read_list', Load(), lineno=1089, col_offset=27), [Str('classifier', lineno=1089, col_offset=38)], [], None, None, lineno=1089, col_offset=27), lineno=1089, col_offset=8), If(Compare(Name('metadata_version', Load(), lineno=1092, col_offset=11), [Eq()], [Str('1.1', lineno=1092, col_offset=31)], lineno=1092, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1093, col_offset=12), 'requires', Store(), lineno=1093, col_offset=12)], Call(Name('_read_list', Load(), lineno=1093, col_offset=28), [Str('requires', lineno=1093, col_offset=39)], [], None, None, lineno=1093, col_offset=28), lineno=1093, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1094, col_offset=12), 'provides', Store(), lineno=1094, col_offset=12)], Call(Name('_read_list', Load(), lineno=1094, col_offset=28), [Str('provides', lineno=1094, col_offset=39)], [], None, None, lineno=1094, col_offset=28), lineno=1094, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1095, col_offset=12), 'obsoletes', Store(), lineno=1095, col_offset=12)], Call(Name('_read_list', Load(), lineno=1095, col_offset=29), [Str('obsoletes', lineno=1095, col_offset=40)], [], None, None, lineno=1095, col_offset=29), lineno=1095, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1097, col_offset=12), 'requires', Store(), lineno=1097, col_offset=12)], Name('None', Load(), lineno=1097, col_offset=28), lineno=1097, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1098, col_offset=12), 'provides', Store(), lineno=1098, col_offset=12)], Name('None', Load(), lineno=1098, col_offset=28), lineno=1098, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1099, col_offset=12), 'obsoletes', Store(), lineno=1099, col_offset=12)], Name('None', Load(), lineno=1099, col_offset=29), lineno=1099, col_offset=12)], lineno=1092, col_offset=8)], [], lineno=1049, col_offset=4), FunctionDef('write_pkg_info', arguments([Name('self', Param(), lineno=1101, col_offset=23), Name('base_dir', Param(), lineno=1101, col_offset=29)], None, None, []), [Expr(Str('Write the PKG-INFO file into the release tree.\n        ', lineno=1103, col_offset=-1), lineno=1103, col_offset=-1), Assign([Name('pkg_info', Store(), lineno=1104, col_offset=8)], Call(Name('open', Load(), lineno=1104, col_offset=19), [Call(Attribute(Attribute(Name('os', Load(), lineno=1104, col_offset=24), 'path', Load(), lineno=1104, col_offset=24), 'join', Load(), lineno=1104, col_offset=24), [Name('base_dir', Load(), lineno=1104, col_offset=37), Str('PKG-INFO', lineno=1104, col_offset=47)], [], None, None, lineno=1104, col_offset=24), Str('w', lineno=1104, col_offset=60)], [], None, None, lineno=1104, col_offset=19), lineno=1104, col_offset=8), TryFinally([Expr(Call(Attribute(Name('self', Load(), lineno=1106, col_offset=12), 'write_pkg_file', Load(), lineno=1106, col_offset=12), [Name('pkg_info', Load(), lineno=1106, col_offset=32)], [], None, None, lineno=1106, col_offset=12), lineno=1106, col_offset=12)], [Expr(Call(Attribute(Name('pkg_info', Load(), lineno=1108, col_offset=12), 'close', Load(), lineno=1108, col_offset=12), [], [], None, None, lineno=1108, col_offset=12), lineno=1108, col_offset=12)], lineno=1105, col_offset=8)], [], lineno=1101, col_offset=4), FunctionDef('write_pkg_file', arguments([Name('self', Param(), lineno=1110, col_offset=23), Name('file', Param(), lineno=1110, col_offset=29)], None, None, []), [Expr(Str('Write the PKG-INFO format data to a file object.\n        ', lineno=1112, col_offset=-1), lineno=1112, col_offset=-1), Assign([Name('version', Store(), lineno=1113, col_offset=8)], Str('1.0', lineno=1113, col_offset=18), lineno=1113, col_offset=8), If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1114, col_offset=11), 'provides', Load(), lineno=1114, col_offset=11), Attribute(Name('self', Load(), lineno=1114, col_offset=28), 'requires', Load(), lineno=1114, col_offset=28), Attribute(Name('self', Load(), lineno=1114, col_offset=45), 'obsoletes', Load(), lineno=1114, col_offset=45)], lineno=1114, col_offset=11), [Assign([Name('version', Store(), lineno=1115, col_offset=12)], Str('1.1', lineno=1115, col_offset=22), lineno=1115, col_offset=12)], [], lineno=1114, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1117, col_offset=8), '_write_field', Load(), lineno=1117, col_offset=8), [Name('file', Load(), lineno=1117, col_offset=26), Str('Metadata-Version', lineno=1117, col_offset=32), Name('version', Load(), lineno=1117, col_offset=52)], [], None, None, lineno=1117, col_offset=8), lineno=1117, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1118, col_offset=8), '_write_field', Load(), lineno=1118, col_offset=8), [Name('file', Load(), lineno=1118, col_offset=26), Str('Name', lineno=1118, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1118, col_offset=40), 'get_name', Load(), lineno=1118, col_offset=40), [], [], None, None, lineno=1118, col_offset=40)], [], None, None, lineno=1118, col_offset=8), lineno=1118, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1119, col_offset=8), '_write_field', Load(), lineno=1119, col_offset=8), [Name('file', Load(), lineno=1119, col_offset=26), Str('Version', lineno=1119, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1119, col_offset=43), 'get_version', Load(), lineno=1119, col_offset=43), [], [], None, None, lineno=1119, col_offset=43)], [], None, None, lineno=1119, col_offset=8), lineno=1119, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1120, col_offset=8), '_write_field', Load(), lineno=1120, col_offset=8), [Name('file', Load(), lineno=1120, col_offset=26), Str('Summary', lineno=1120, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1120, col_offset=43), 'get_description', Load(), lineno=1120, col_offset=43), [], [], None, None, lineno=1120, col_offset=43)], [], None, None, lineno=1120, col_offset=8), lineno=1120, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1121, col_offset=8), '_write_field', Load(), lineno=1121, col_offset=8), [Name('file', Load(), lineno=1121, col_offset=26), Str('Home-page', lineno=1121, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1121, col_offset=45), 'get_url', Load(), lineno=1121, col_offset=45), [], [], None, None, lineno=1121, col_offset=45)], [], None, None, lineno=1121, col_offset=8), lineno=1121, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1122, col_offset=8), '_write_field', Load(), lineno=1122, col_offset=8), [Name('file', Load(), lineno=1122, col_offset=26), Str('Author', lineno=1122, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1122, col_offset=42), 'get_contact', Load(), lineno=1122, col_offset=42), [], [], None, None, lineno=1122, col_offset=42)], [], None, None, lineno=1122, col_offset=8), lineno=1122, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1123, col_offset=8), '_write_field', Load(), lineno=1123, col_offset=8), [Name('file', Load(), lineno=1123, col_offset=26), Str('Author-email', lineno=1123, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1123, col_offset=48), 'get_contact_email', Load(), lineno=1123, col_offset=48), [], [], None, None, lineno=1123, col_offset=48)], [], None, None, lineno=1123, col_offset=8), lineno=1123, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1124, col_offset=8), '_write_field', Load(), lineno=1124, col_offset=8), [Name('file', Load(), lineno=1124, col_offset=26), Str('License', lineno=1124, col_offset=32), Call(Attribute(Name('self', Load(), lineno=1124, col_offset=43), 'get_license', Load(), lineno=1124, col_offset=43), [], [], None, None, lineno=1124, col_offset=43)], [], None, None, lineno=1124, col_offset=8), lineno=1124, col_offset=8), If(Attribute(Name('self', Load(), lineno=1125, col_offset=11), 'download_url', Load(), lineno=1125, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1126, col_offset=12), '_write_field', Load(), lineno=1126, col_offset=12), [Name('file', Load(), lineno=1126, col_offset=30), Str('Download-URL', lineno=1126, col_offset=36), Attribute(Name('self', Load(), lineno=1126, col_offset=52), 'download_url', Load(), lineno=1126, col_offset=52)], [], None, None, lineno=1126, col_offset=12), lineno=1126, col_offset=12)], [], lineno=1125, col_offset=8), Assign([Name('long_desc', Store(), lineno=1128, col_offset=8)], Call(Name('rfc822_escape', Load(), lineno=1128, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=1128, col_offset=34), 'get_long_description', Load(), lineno=1128, col_offset=34), [], [], None, None, lineno=1128, col_offset=34)], [], None, None, lineno=1128, col_offset=20), lineno=1128, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1129, col_offset=8), '_write_field', Load(), lineno=1129, col_offset=8), [Name('file', Load(), lineno=1129, col_offset=26), Str('Description', lineno=1129, col_offset=32), Name('long_desc', Load(), lineno=1129, col_offset=47)], [], None, None, lineno=1129, col_offset=8), lineno=1129, col_offset=8), Assign([Name('keywords', Store(), lineno=1131, col_offset=8)], Call(Attribute(Str(',', lineno=1131, col_offset=19), 'join', Load(), lineno=1131, col_offset=19), [Call(Attribute(Name('self', Load(), lineno=1131, col_offset=28), 'get_keywords', Load(), lineno=1131, col_offset=28), [], [], None, None, lineno=1131, col_offset=28)], [], None, None, lineno=1131, col_offset=19), lineno=1131, col_offset=8), If(Name('keywords', Load(), lineno=1132, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1133, col_offset=12), '_write_field', Load(), lineno=1133, col_offset=12), [Name('file', Load(), lineno=1133, col_offset=30), Str('Keywords', lineno=1133, col_offset=36), Name('keywords', Load(), lineno=1133, col_offset=48)], [], None, None, lineno=1133, col_offset=12), lineno=1133, col_offset=12)], [], lineno=1132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1135, col_offset=8), '_write_list', Load(), lineno=1135, col_offset=8), [Name('file', Load(), lineno=1135, col_offset=25), Str('Platform', lineno=1135, col_offset=31), Call(Attribute(Name('self', Load(), lineno=1135, col_offset=43), 'get_platforms', Load(), lineno=1135, col_offset=43), [], [], None, None, lineno=1135, col_offset=43)], [], None, None, lineno=1135, col_offset=8), lineno=1135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1136, col_offset=8), '_write_list', Load(), lineno=1136, col_offset=8), [Name('file', Load(), lineno=1136, col_offset=25), Str('Classifier', lineno=1136, col_offset=31), Call(Attribute(Name('self', Load(), lineno=1136, col_offset=45), 'get_classifiers', Load(), lineno=1136, col_offset=45), [], [], None, None, lineno=1136, col_offset=45)], [], None, None, lineno=1136, col_offset=8), lineno=1136, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1139, col_offset=8), '_write_list', Load(), lineno=1139, col_offset=8), [Name('file', Load(), lineno=1139, col_offset=25), Str('Requires', lineno=1139, col_offset=31), Call(Attribute(Name('self', Load(), lineno=1139, col_offset=43), 'get_requires', Load(), lineno=1139, col_offset=43), [], [], None, None, lineno=1139, col_offset=43)], [], None, None, lineno=1139, col_offset=8), lineno=1139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1140, col_offset=8), '_write_list', Load(), lineno=1140, col_offset=8), [Name('file', Load(), lineno=1140, col_offset=25), Str('Provides', lineno=1140, col_offset=31), Call(Attribute(Name('self', Load(), lineno=1140, col_offset=43), 'get_provides', Load(), lineno=1140, col_offset=43), [], [], None, None, lineno=1140, col_offset=43)], [], None, None, lineno=1140, col_offset=8), lineno=1140, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1141, col_offset=8), '_write_list', Load(), lineno=1141, col_offset=8), [Name('file', Load(), lineno=1141, col_offset=25), Str('Obsoletes', lineno=1141, col_offset=31), Call(Attribute(Name('self', Load(), lineno=1141, col_offset=44), 'get_obsoletes', Load(), lineno=1141, col_offset=44), [], [], None, None, lineno=1141, col_offset=44)], [], None, None, lineno=1141, col_offset=8), lineno=1141, col_offset=8)], [], lineno=1110, col_offset=4), FunctionDef('_write_field', arguments([Name('self', Param(), lineno=1143, col_offset=21), Name('file', Param(), lineno=1143, col_offset=27), Name('name', Param(), lineno=1143, col_offset=33), Name('value', Param(), lineno=1143, col_offset=39)], None, None, []), [Expr(Call(Attribute(Name('file', Load(), lineno=1144, col_offset=8), 'write', Load(), lineno=1144, col_offset=8), [BinOp(Str('%s: %s\n', lineno=1144, col_offset=19), Mod(), Tuple([Name('name', Load(), lineno=1144, col_offset=33), Call(Attribute(Name('self', Load(), lineno=1144, col_offset=39), '_encode_field', Load(), lineno=1144, col_offset=39), [Name('value', Load(), lineno=1144, col_offset=58)], [], None, None, lineno=1144, col_offset=39)], Load(), lineno=1144, col_offset=33), lineno=1144, col_offset=19)], [], None, None, lineno=1144, col_offset=8), lineno=1144, col_offset=8)], [], lineno=1143, col_offset=4), FunctionDef('_write_list', arguments([Name('self', Param(), lineno=1146, col_offset=21), Name('file', Param(), lineno=1146, col_offset=27), Name('name', Param(), lineno=1146, col_offset=33), Name('values', Param(), lineno=1146, col_offset=39)], None, None, []), [For(Name('value', Store(), lineno=1147, col_offset=12), Name('values', Load(), lineno=1147, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=1148, col_offset=12), '_write_field', Load(), lineno=1148, col_offset=12), [Name('file', Load(), lineno=1148, col_offset=30), Name('name', Load(), lineno=1148, col_offset=36), Name('value', Load(), lineno=1148, col_offset=42)], [], None, None, lineno=1148, col_offset=12), lineno=1148, col_offset=12)], [], lineno=1147, col_offset=8)], [], lineno=1146, col_offset=4), FunctionDef('_encode_field', arguments([Name('self', Param(), lineno=1150, col_offset=22), Name('value', Param(), lineno=1150, col_offset=28)], None, None, []), [If(Compare(Name('value', Load(), lineno=1151, col_offset=11), [Is()], [Name('None', Load(), lineno=1151, col_offset=20)], lineno=1151, col_offset=11), [Return(Name('None', Load(), lineno=1152, col_offset=19), lineno=1152, col_offset=12)], [], lineno=1151, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1153, col_offset=11), [Name('value', Load(), lineno=1153, col_offset=22), Name('unicode', Load(), lineno=1153, col_offset=29)], [], None, None, lineno=1153, col_offset=11), [Return(Call(Attribute(Name('value', Load(), lineno=1154, col_offset=19), 'encode', Load(), lineno=1154, col_offset=19), [Name('PKG_INFO_ENCODING', Load(), lineno=1154, col_offset=32)], [], None, None, lineno=1154, col_offset=19), lineno=1154, col_offset=12)], [], lineno=1153, col_offset=8), Return(Call(Name('str', Load(), lineno=1155, col_offset=15), [Name('value', Load(), lineno=1155, col_offset=19)], [], None, None, lineno=1155, col_offset=15), lineno=1155, col_offset=8)], [], lineno=1150, col_offset=4), FunctionDef('get_name', arguments([Name('self', Param(), lineno=1159, col_offset=17)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1160, col_offset=15), 'name', Load(), lineno=1160, col_offset=15), Str('UNKNOWN', lineno=1160, col_offset=28)], lineno=1160, col_offset=15), lineno=1160, col_offset=8)], [], lineno=1159, col_offset=4), FunctionDef('get_version', arguments([Name('self', Param(), lineno=1162, col_offset=20)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1163, col_offset=15), 'version', Load(), lineno=1163, col_offset=15), Str('0.0.0', lineno=1163, col_offset=31)], lineno=1163, col_offset=15), lineno=1163, col_offset=8)], [], lineno=1162, col_offset=4), FunctionDef('get_fullname', arguments([Name('self', Param(), lineno=1165, col_offset=21)], None, None, []), [Return(BinOp(Str('%s-%s', lineno=1166, col_offset=15), Mod(), Tuple([Call(Attribute(Name('self', Load(), lineno=1166, col_offset=26), 'get_name', Load(), lineno=1166, col_offset=26), [], [], None, None, lineno=1166, col_offset=26), Call(Attribute(Name('self', Load(), lineno=1166, col_offset=43), 'get_version', Load(), lineno=1166, col_offset=43), [], [], None, None, lineno=1166, col_offset=43)], Load(), lineno=1166, col_offset=26), lineno=1166, col_offset=15), lineno=1166, col_offset=8)], [], lineno=1165, col_offset=4), FunctionDef('get_author', arguments([Name('self', Param(), lineno=1168, col_offset=19)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1169, col_offset=15), '_encode_field', Load(), lineno=1169, col_offset=15), [Attribute(Name('self', Load(), lineno=1169, col_offset=34), 'author', Load(), lineno=1169, col_offset=34)], [], None, None, lineno=1169, col_offset=15), Str('UNKNOWN', lineno=1169, col_offset=50)], lineno=1169, col_offset=15), lineno=1169, col_offset=8)], [], lineno=1168, col_offset=4), FunctionDef('get_author_email', arguments([Name('self', Param(), lineno=1171, col_offset=25)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1172, col_offset=15), 'author_email', Load(), lineno=1172, col_offset=15), Str('UNKNOWN', lineno=1172, col_offset=36)], lineno=1172, col_offset=15), lineno=1172, col_offset=8)], [], lineno=1171, col_offset=4), FunctionDef('get_maintainer', arguments([Name('self', Param(), lineno=1174, col_offset=23)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1175, col_offset=15), '_encode_field', Load(), lineno=1175, col_offset=15), [Attribute(Name('self', Load(), lineno=1175, col_offset=34), 'maintainer', Load(), lineno=1175, col_offset=34)], [], None, None, lineno=1175, col_offset=15), Str('UNKNOWN', lineno=1175, col_offset=54)], lineno=1175, col_offset=15), lineno=1175, col_offset=8)], [], lineno=1174, col_offset=4), FunctionDef('get_maintainer_email', arguments([Name('self', Param(), lineno=1177, col_offset=29)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1178, col_offset=15), 'maintainer_email', Load(), lineno=1178, col_offset=15), Str('UNKNOWN', lineno=1178, col_offset=40)], lineno=1178, col_offset=15), lineno=1178, col_offset=8)], [], lineno=1177, col_offset=4), FunctionDef('get_contact', arguments([Name('self', Param(), lineno=1180, col_offset=20)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1181, col_offset=16), '_encode_field', Load(), lineno=1181, col_offset=16), [Attribute(Name('self', Load(), lineno=1181, col_offset=35), 'maintainer', Load(), lineno=1181, col_offset=35)], [], None, None, lineno=1181, col_offset=16), Call(Attribute(Name('self', Load(), lineno=1182, col_offset=16), '_encode_field', Load(), lineno=1182, col_offset=16), [Attribute(Name('self', Load(), lineno=1182, col_offset=35), 'author', Load(), lineno=1182, col_offset=35)], [], None, None, lineno=1182, col_offset=16), Str('UNKNOWN', lineno=1182, col_offset=51)], lineno=1181, col_offset=16), lineno=1181, col_offset=8)], [], lineno=1180, col_offset=4), FunctionDef('get_contact_email', arguments([Name('self', Param(), lineno=1184, col_offset=26)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1185, col_offset=15), 'maintainer_email', Load(), lineno=1185, col_offset=15), Attribute(Name('self', Load(), lineno=1185, col_offset=40), 'author_email', Load(), lineno=1185, col_offset=40), Str('UNKNOWN', lineno=1185, col_offset=61)], lineno=1185, col_offset=15), lineno=1185, col_offset=8)], [], lineno=1184, col_offset=4), FunctionDef('get_url', arguments([Name('self', Param(), lineno=1187, col_offset=16)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1188, col_offset=15), 'url', Load(), lineno=1188, col_offset=15), Str('UNKNOWN', lineno=1188, col_offset=27)], lineno=1188, col_offset=15), lineno=1188, col_offset=8)], [], lineno=1187, col_offset=4), FunctionDef('get_license', arguments([Name('self', Param(), lineno=1190, col_offset=20)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1191, col_offset=15), 'license', Load(), lineno=1191, col_offset=15), Str('UNKNOWN', lineno=1191, col_offset=31)], lineno=1191, col_offset=15), lineno=1191, col_offset=8)], [], lineno=1190, col_offset=4), Assign([Name('get_licence', Store(), lineno=1192, col_offset=4)], Name('get_license', Load(), lineno=1192, col_offset=18), lineno=1192, col_offset=4), FunctionDef('get_description', arguments([Name('self', Param(), lineno=1194, col_offset=24)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1195, col_offset=15), '_encode_field', Load(), lineno=1195, col_offset=15), [Attribute(Name('self', Load(), lineno=1195, col_offset=34), 'description', Load(), lineno=1195, col_offset=34)], [], None, None, lineno=1195, col_offset=15), Str('UNKNOWN', lineno=1195, col_offset=55)], lineno=1195, col_offset=15), lineno=1195, col_offset=8)], [], lineno=1194, col_offset=4), FunctionDef('get_long_description', arguments([Name('self', Param(), lineno=1197, col_offset=29)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Name('self', Load(), lineno=1198, col_offset=15), '_encode_field', Load(), lineno=1198, col_offset=15), [Attribute(Name('self', Load(), lineno=1198, col_offset=34), 'long_description', Load(), lineno=1198, col_offset=34)], [], None, None, lineno=1198, col_offset=15), Str('UNKNOWN', lineno=1198, col_offset=60)], lineno=1198, col_offset=15), lineno=1198, col_offset=8)], [], lineno=1197, col_offset=4), FunctionDef('get_keywords', arguments([Name('self', Param(), lineno=1200, col_offset=21)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1201, col_offset=15), 'keywords', Load(), lineno=1201, col_offset=15), List([], Load(), lineno=1201, col_offset=32)], lineno=1201, col_offset=15), lineno=1201, col_offset=8)], [], lineno=1200, col_offset=4), FunctionDef('get_platforms', arguments([Name('self', Param(), lineno=1203, col_offset=22)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1204, col_offset=15), 'platforms', Load(), lineno=1204, col_offset=15), List([Str('UNKNOWN', lineno=1204, col_offset=34)], Load(), lineno=1204, col_offset=33)], lineno=1204, col_offset=15), lineno=1204, col_offset=8)], [], lineno=1203, col_offset=4), FunctionDef('get_classifiers', arguments([Name('self', Param(), lineno=1206, col_offset=24)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1207, col_offset=15), 'classifiers', Load(), lineno=1207, col_offset=15), List([], Load(), lineno=1207, col_offset=35)], lineno=1207, col_offset=15), lineno=1207, col_offset=8)], [], lineno=1206, col_offset=4), FunctionDef('get_download_url', arguments([Name('self', Param(), lineno=1209, col_offset=25)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1210, col_offset=15), 'download_url', Load(), lineno=1210, col_offset=15), Str('UNKNOWN', lineno=1210, col_offset=36)], lineno=1210, col_offset=15), lineno=1210, col_offset=8)], [], lineno=1209, col_offset=4), FunctionDef('get_requires', arguments([Name('self', Param(), lineno=1213, col_offset=21)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1214, col_offset=15), 'requires', Load(), lineno=1214, col_offset=15), List([], Load(), lineno=1214, col_offset=32)], lineno=1214, col_offset=15), lineno=1214, col_offset=8)], [], lineno=1213, col_offset=4), FunctionDef('set_requires', arguments([Name('self', Param(), lineno=1216, col_offset=21), Name('value', Param(), lineno=1216, col_offset=27)], None, None, []), [Import([alias('distutils.versionpredicate', None)], lineno=1217, col_offset=8), For(Name('v', Store(), lineno=1218, col_offset=12), Name('value', Load(), lineno=1218, col_offset=17), [Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=1219, col_offset=12), 'versionpredicate', Load(), lineno=1219, col_offset=12), 'VersionPredicate', Load(), lineno=1219, col_offset=12), [Name('v', Load(), lineno=1219, col_offset=56)], [], None, None, lineno=1219, col_offset=12), lineno=1219, col_offset=12)], [], lineno=1218, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1220, col_offset=8), 'requires', Store(), lineno=1220, col_offset=8)], Name('value', Load(), lineno=1220, col_offset=24), lineno=1220, col_offset=8)], [], lineno=1216, col_offset=4), FunctionDef('get_provides', arguments([Name('self', Param(), lineno=1222, col_offset=21)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1223, col_offset=15), 'provides', Load(), lineno=1223, col_offset=15), List([], Load(), lineno=1223, col_offset=32)], lineno=1223, col_offset=15), lineno=1223, col_offset=8)], [], lineno=1222, col_offset=4), FunctionDef('set_provides', arguments([Name('self', Param(), lineno=1225, col_offset=21), Name('value', Param(), lineno=1225, col_offset=27)], None, None, []), [Assign([Name('value', Store(), lineno=1226, col_offset=8)], ListComp(Call(Attribute(Name('v', Load(), lineno=1226, col_offset=17), 'strip', Load(), lineno=1226, col_offset=17), [], [], None, None, lineno=1226, col_offset=17), [comprehension(Name('v', Store(), lineno=1226, col_offset=31), Name('value', Load(), lineno=1226, col_offset=36), [])], lineno=1226, col_offset=17), lineno=1226, col_offset=8), For(Name('v', Store(), lineno=1227, col_offset=12), Name('value', Load(), lineno=1227, col_offset=17), [Import([alias('distutils.versionpredicate', None)], lineno=1228, col_offset=12), Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=1229, col_offset=12), 'versionpredicate', Load(), lineno=1229, col_offset=12), 'split_provision', Load(), lineno=1229, col_offset=12), [Name('v', Load(), lineno=1229, col_offset=55)], [], None, None, lineno=1229, col_offset=12), lineno=1229, col_offset=12)], [], lineno=1227, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1230, col_offset=8), 'provides', Store(), lineno=1230, col_offset=8)], Name('value', Load(), lineno=1230, col_offset=24), lineno=1230, col_offset=8)], [], lineno=1225, col_offset=4), FunctionDef('get_obsoletes', arguments([Name('self', Param(), lineno=1232, col_offset=22)], None, None, []), [Return(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1233, col_offset=15), 'obsoletes', Load(), lineno=1233, col_offset=15), List([], Load(), lineno=1233, col_offset=33)], lineno=1233, col_offset=15), lineno=1233, col_offset=8)], [], lineno=1232, col_offset=4), FunctionDef('set_obsoletes', arguments([Name('self', Param(), lineno=1235, col_offset=22), Name('value', Param(), lineno=1235, col_offset=28)], None, None, []), [Import([alias('distutils.versionpredicate', None)], lineno=1236, col_offset=8), For(Name('v', Store(), lineno=1237, col_offset=12), Name('value', Load(), lineno=1237, col_offset=17), [Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=1238, col_offset=12), 'versionpredicate', Load(), lineno=1238, col_offset=12), 'VersionPredicate', Load(), lineno=1238, col_offset=12), [Name('v', Load(), lineno=1238, col_offset=56)], [], None, None, lineno=1238, col_offset=12), lineno=1238, col_offset=12)], [], lineno=1237, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1239, col_offset=8), 'obsoletes', Store(), lineno=1239, col_offset=8)], Name('value', Load(), lineno=1239, col_offset=25), lineno=1239, col_offset=8)], [], lineno=1235, col_offset=4)], [], lineno=1011, col_offset=0), FunctionDef('fix_help_options', arguments([Name('options', Param(), lineno=1241, col_offset=21)], None, None, []), [Expr(Str("Convert a 4-tuple 'help_options' list as found in various command\n    classes to the 3-tuple form required by FancyGetopt.\n    ", lineno=1244, col_offset=-1), lineno=1244, col_offset=-1), Assign([Name('new_options', Store(), lineno=1245, col_offset=4)], List([], Load(), lineno=1245, col_offset=18), lineno=1245, col_offset=4), For(Name('help_tuple', Store(), lineno=1246, col_offset=8), Name('options', Load(), lineno=1246, col_offset=22), [Expr(Call(Attribute(Name('new_options', Load(), lineno=1247, col_offset=8), 'append', Load(), lineno=1247, col_offset=8), [Subscript(Name('help_tuple', Load(), lineno=1247, col_offset=27), Slice(Num(0, lineno=1247, col_offset=38), Num(3, lineno=1247, col_offset=40), None), Load(), lineno=1247, col_offset=27)], [], None, None, lineno=1247, col_offset=8), lineno=1247, col_offset=8)], [], lineno=1246, col_offset=4), Return(Name('new_options', Load(), lineno=1248, col_offset=11), lineno=1248, col_offset=4)], [], lineno=1241, col_offset=0)])
