Module([Expr(Str("distutils.command.check\n\nImplements the Distutils 'check' command.\n", lineno=4, col_offset=-1), lineno=4, col_offset=-1), Assign([Name('__revision__', Store(), lineno=5, col_offset=0)], Str('$Id: check.py 75266 2009-10-05 22:32:48Z andrew.kuchling $', lineno=5, col_offset=15), lineno=5, col_offset=0), ImportFrom('distutils.core', [alias('Command', None)], 0, lineno=7, col_offset=0), ImportFrom('distutils.errors', [alias('DistutilsSetupError', None)], 0, lineno=8, col_offset=0), TryExcept([ImportFrom('docutils.utils', [alias('Reporter', None)], 0, lineno=12, col_offset=4), ImportFrom('docutils.parsers.rst', [alias('Parser', None)], 0, lineno=13, col_offset=4), ImportFrom('docutils', [alias('frontend', None)], 0, lineno=14, col_offset=4), ImportFrom('docutils', [alias('nodes', None)], 0, lineno=15, col_offset=4), ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=16, col_offset=4), ClassDef('SilentReporter', [Name('Reporter', Load(), lineno=18, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=20, col_offset=21), Name('source', Param(), lineno=20, col_offset=27), Name('report_level', Param(), lineno=20, col_offset=35), Name('halt_level', Param(), lineno=20, col_offset=49), Name('stream', Param(), lineno=20, col_offset=61), Name('debug', Param(), lineno=21, col_offset=21), Name('encoding', Param(), lineno=21, col_offset=30), Name('error_handler', Param(), lineno=21, col_offset=48)], None, None, [Name('None', Load(), lineno=20, col_offset=68), Num(0, lineno=21, col_offset=27), Str('ascii', lineno=21, col_offset=39), Str('replace', lineno=21, col_offset=62)]), [Assign([Attribute(Name('self', Load(), lineno=22, col_offset=12), 'messages', Store(), lineno=22, col_offset=12)], List([], Load(), lineno=22, col_offset=28), lineno=22, col_offset=12), Expr(Call(Attribute(Name('Reporter', Load(), lineno=23, col_offset=12), '__init__', Load(), lineno=23, col_offset=12), [Name('self', Load(), lineno=23, col_offset=30), Name('source', Load(), lineno=23, col_offset=36), Name('report_level', Load(), lineno=23, col_offset=44), Name('halt_level', Load(), lineno=23, col_offset=58), Name('stream', Load(), lineno=23, col_offset=70), Name('debug', Load(), lineno=24, col_offset=30), Name('encoding', Load(), lineno=24, col_offset=37), Name('error_handler', Load(), lineno=24, col_offset=47)], [], None, None, lineno=23, col_offset=12), lineno=23, col_offset=12)], [], lineno=20, col_offset=8), FunctionDef('system_message', arguments([Name('self', Param(), lineno=26, col_offset=27), Name('level', Param(), lineno=26, col_offset=33), Name('message', Param(), lineno=26, col_offset=40)], 'children', 'kwargs', []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=27, col_offset=12), 'messages', Load(), lineno=27, col_offset=12), 'append', Load(), lineno=27, col_offset=12), [Tuple([Name('level', Load(), lineno=27, col_offset=34), Name('message', Load(), lineno=27, col_offset=41), Name('children', Load(), lineno=27, col_offset=50), Name('kwargs', Load(), lineno=27, col_offset=60)], Load(), lineno=27, col_offset=34)], [], None, None, lineno=27, col_offset=12), lineno=27, col_offset=12)], [], lineno=26, col_offset=8)], [], lineno=18, col_offset=4), Assign([Name('HAS_DOCUTILS', Store(), lineno=29, col_offset=4)], Name('True', Load(), lineno=29, col_offset=19), lineno=29, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=30, col_offset=7), None, [Assign([Name('HAS_DOCUTILS', Store(), lineno=32, col_offset=4)], Name('False', Load(), lineno=32, col_offset=19), lineno=32, col_offset=4)], lineno=30, col_offset=0)], [], lineno=10, col_offset=0), ClassDef('check', [Name('Command', Load(), lineno=34, col_offset=12)], [Expr(Str('This command checks the meta-data of the package.\n    ', lineno=36, col_offset=-1), lineno=36, col_offset=-1), Assign([Name('description', Store(), lineno=37, col_offset=4)], Str('perform some checks on the package', lineno=37, col_offset=19), lineno=37, col_offset=4), Assign([Name('user_options', Store(), lineno=38, col_offset=4)], List([Tuple([Str('metadata', lineno=38, col_offset=21), Str('m', lineno=38, col_offset=33), Str('Verify meta-data', lineno=38, col_offset=38)], Load(), lineno=38, col_offset=21), Tuple([Str('restructuredtext', lineno=39, col_offset=21), Str('r', lineno=39, col_offset=41), Str('Checks if long string meta-data syntax are reStructuredText-compliant', lineno=40, col_offset=22)], Load(), lineno=39, col_offset=21), Tuple([Str('strict', lineno=42, col_offset=21), Str('s', lineno=42, col_offset=31), Str('Will exit with an error if a check fails', lineno=43, col_offset=21)], Load(), lineno=42, col_offset=21)], Load(), lineno=38, col_offset=19), lineno=38, col_offset=4), Assign([Name('boolean_options', Store(), lineno=45, col_offset=4)], List([Str('metadata', lineno=45, col_offset=23), Str('restructuredtext', lineno=45, col_offset=35), Str('strict', lineno=45, col_offset=55)], Load(), lineno=45, col_offset=22), lineno=45, col_offset=4), FunctionDef('initialize_options', arguments([Name('self', Param(), lineno=47, col_offset=27)], None, None, []), [Expr(Str('Sets default values for options.', lineno=48, col_offset=8), lineno=48, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=49, col_offset=8), 'restructuredtext', Store(), lineno=49, col_offset=8)], Num(0, lineno=49, col_offset=32), lineno=49, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=50, col_offset=8), 'metadata', Store(), lineno=50, col_offset=8)], Num(1, lineno=50, col_offset=24), lineno=50, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=51, col_offset=8), 'strict', Store(), lineno=51, col_offset=8)], Num(0, lineno=51, col_offset=22), lineno=51, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=52, col_offset=8), '_warnings', Store(), lineno=52, col_offset=8)], Num(0, lineno=52, col_offset=25), lineno=52, col_offset=8)], [], lineno=47, col_offset=4), FunctionDef('finalize_options', arguments([Name('self', Param(), lineno=54, col_offset=25)], None, None, []), [Pass( lineno=55, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('warn', arguments([Name('self', Param(), lineno=57, col_offset=13), Name('msg', Param(), lineno=57, col_offset=19)], None, None, []), [Expr(Str('Counts the number of warnings that occurs.', lineno=58, col_offset=8), lineno=58, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=59, col_offset=8), '_warnings', Store(), lineno=59, col_offset=8), Add(), Num(1, lineno=59, col_offset=26), lineno=59, col_offset=8), Return(Call(Attribute(Name('Command', Load(), lineno=60, col_offset=15), 'warn', Load(), lineno=60, col_offset=15), [Name('self', Load(), lineno=60, col_offset=28), Name('msg', Load(), lineno=60, col_offset=34)], [], None, None, lineno=60, col_offset=15), lineno=60, col_offset=8)], [], lineno=57, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=62, col_offset=12)], None, None, []), [Expr(Str('Runs the command.', lineno=63, col_offset=8), lineno=63, col_offset=8), If(Attribute(Name('self', Load(), lineno=65, col_offset=11), 'metadata', Load(), lineno=65, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=12), 'check_metadata', Load(), lineno=66, col_offset=12), [], [], None, None, lineno=66, col_offset=12), lineno=66, col_offset=12)], [], lineno=65, col_offset=8), If(Attribute(Name('self', Load(), lineno=67, col_offset=11), 'restructuredtext', Load(), lineno=67, col_offset=11), [If(Name('HAS_DOCUTILS', Load(), lineno=68, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=69, col_offset=16), 'check_restructuredtext', Load(), lineno=69, col_offset=16), [], [], None, None, lineno=69, col_offset=16), lineno=69, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=70, col_offset=17), 'strict', Load(), lineno=70, col_offset=17), [Raise(Call(Name('DistutilsSetupError', Load(), lineno=71, col_offset=22), [Str('The docutils package is needed.', lineno=71, col_offset=42)], [], None, None, lineno=71, col_offset=22), None, None, lineno=71, col_offset=16)], [], lineno=70, col_offset=17)], lineno=68, col_offset=12)], [], lineno=67, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=75, col_offset=11), 'strict', Load(), lineno=75, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=75, col_offset=27), '_warnings', Load(), lineno=75, col_offset=27), [Gt()], [Num(0, lineno=75, col_offset=44)], lineno=75, col_offset=27)], lineno=75, col_offset=11), [Raise(Call(Name('DistutilsSetupError', Load(), lineno=76, col_offset=18), [Str('Please correct your package.', lineno=76, col_offset=38)], [], None, None, lineno=76, col_offset=18), None, None, lineno=76, col_offset=12)], [], lineno=75, col_offset=8)], [], lineno=62, col_offset=4), FunctionDef('check_metadata', arguments([Name('self', Param(), lineno=78, col_offset=23)], None, None, []), [Expr(Str('Ensures that all required elements of meta-data are supplied.\n\n        name, version, URL, (author and author_email) or\n        (maintainer and maintainer_email)).\n\n        Warns if any are missing.\n        ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Assign([Name('metadata', Store(), lineno=86, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=86, col_offset=19), 'distribution', Load(), lineno=86, col_offset=19), 'metadata', Load(), lineno=86, col_offset=19), lineno=86, col_offset=8), Assign([Name('missing', Store(), lineno=88, col_offset=8)], List([], Load(), lineno=88, col_offset=18), lineno=88, col_offset=8), For(Name('attr', Store(), lineno=89, col_offset=12), Tuple([Str('name', lineno=89, col_offset=21), Str('version', lineno=89, col_offset=29), Str('url', lineno=89, col_offset=40)], Load(), lineno=89, col_offset=21), [If(UnaryOp(Not(), BoolOp(And(), [Call(Name('hasattr', Load(), lineno=90, col_offset=20), [Name('metadata', Load(), lineno=90, col_offset=28), Name('attr', Load(), lineno=90, col_offset=38)], [], None, None, lineno=90, col_offset=20), Call(Name('getattr', Load(), lineno=90, col_offset=48), [Name('metadata', Load(), lineno=90, col_offset=56), Name('attr', Load(), lineno=90, col_offset=66)], [], None, None, lineno=90, col_offset=48)], lineno=90, col_offset=20), lineno=90, col_offset=15), [Expr(Call(Attribute(Name('missing', Load(), lineno=91, col_offset=16), 'append', Load(), lineno=91, col_offset=16), [Name('attr', Load(), lineno=91, col_offset=31)], [], None, None, lineno=91, col_offset=16), lineno=91, col_offset=16)], [], lineno=90, col_offset=12)], [], lineno=89, col_offset=8), If(Name('missing', Load(), lineno=93, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=94, col_offset=12), 'warn', Load(), lineno=94, col_offset=12), [BinOp(Str('missing required meta-data: %s', lineno=94, col_offset=22), Mod(), Call(Attribute(Str(', ', lineno=94, col_offset=58), 'join', Load(), lineno=94, col_offset=58), [Name('missing', Load(), lineno=94, col_offset=68)], [], None, None, lineno=94, col_offset=58), lineno=94, col_offset=22)], [], None, None, lineno=94, col_offset=12), lineno=94, col_offset=12)], [], lineno=93, col_offset=8), If(Attribute(Name('metadata', Load(), lineno=95, col_offset=11), 'author', Load(), lineno=95, col_offset=11), [If(UnaryOp(Not(), Attribute(Name('metadata', Load(), lineno=96, col_offset=19), 'author_email', Load(), lineno=96, col_offset=19), lineno=96, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=16), 'warn', Load(), lineno=97, col_offset=16), [BinOp(Str("missing meta-data: if 'author' supplied, ", lineno=97, col_offset=26), Add(), Str("'author_email' must be supplied too", lineno=98, col_offset=26), lineno=97, col_offset=26)], [], None, None, lineno=97, col_offset=16), lineno=97, col_offset=16)], [], lineno=96, col_offset=12)], [If(Attribute(Name('metadata', Load(), lineno=99, col_offset=13), 'maintainer', Load(), lineno=99, col_offset=13), [If(UnaryOp(Not(), Attribute(Name('metadata', Load(), lineno=100, col_offset=19), 'maintainer_email', Load(), lineno=100, col_offset=19), lineno=100, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=101, col_offset=16), 'warn', Load(), lineno=101, col_offset=16), [BinOp(Str("missing meta-data: if 'maintainer' supplied, ", lineno=101, col_offset=26), Add(), Str("'maintainer_email' must be supplied too", lineno=102, col_offset=26), lineno=101, col_offset=26)], [], None, None, lineno=101, col_offset=16), lineno=101, col_offset=16)], [], lineno=100, col_offset=12)], [Expr(Call(Attribute(Name('self', Load(), lineno=104, col_offset=12), 'warn', Load(), lineno=104, col_offset=12), [BinOp(BinOp(Str('missing meta-data: either (author and author_email) ', lineno=104, col_offset=22), Add(), Str('or (maintainer and maintainer_email) ', lineno=105, col_offset=22), lineno=104, col_offset=22), Add(), Str('must be supplied', lineno=106, col_offset=22), lineno=105, col_offset=62)], [], None, None, lineno=104, col_offset=12), lineno=104, col_offset=12)], lineno=99, col_offset=13)], lineno=95, col_offset=8)], [], lineno=78, col_offset=4), FunctionDef('check_restructuredtext', arguments([Name('self', Param(), lineno=108, col_offset=31)], None, None, []), [Expr(Str('Checks if the long string fields are reST-compliant.', lineno=109, col_offset=8), lineno=109, col_offset=8), Assign([Name('data', Store(), lineno=110, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=110, col_offset=15), 'distribution', Load(), lineno=110, col_offset=15), 'get_long_description', Load(), lineno=110, col_offset=15), [], [], None, None, lineno=110, col_offset=15), lineno=110, col_offset=8), For(Name('warning', Store(), lineno=111, col_offset=12), Call(Attribute(Name('self', Load(), lineno=111, col_offset=23), '_check_rst_data', Load(), lineno=111, col_offset=23), [Name('data', Load(), lineno=111, col_offset=44)], [], None, None, lineno=111, col_offset=23), [Assign([Name('line', Store(), lineno=112, col_offset=12)], Call(Attribute(Subscript(Name('warning', Load(), lineno=112, col_offset=19), Index(Num(-1, lineno=112, col_offset=28)), Load(), lineno=112, col_offset=19), 'get', Load(), lineno=112, col_offset=19), [Str('line', lineno=112, col_offset=35)], [], None, None, lineno=112, col_offset=19), lineno=112, col_offset=12), If(Compare(Name('line', Load(), lineno=113, col_offset=15), [Is()], [Name('None', Load(), lineno=113, col_offset=23)], lineno=113, col_offset=15), [Assign([Name('warning', Store(), lineno=114, col_offset=16)], Subscript(Name('warning', Load(), lineno=114, col_offset=26), Index(Num(1, lineno=114, col_offset=34)), Load(), lineno=114, col_offset=26), lineno=114, col_offset=16)], [Assign([Name('warning', Store(), lineno=116, col_offset=16)], BinOp(Str('%s (line %s)', lineno=116, col_offset=26), Mod(), Tuple([Subscript(Name('warning', Load(), lineno=116, col_offset=44), Index(Num(1, lineno=116, col_offset=52)), Load(), lineno=116, col_offset=44), Name('line', Load(), lineno=116, col_offset=56)], Load(), lineno=116, col_offset=44), lineno=116, col_offset=26), lineno=116, col_offset=16)], lineno=113, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=117, col_offset=12), 'warn', Load(), lineno=117, col_offset=12), [Name('warning', Load(), lineno=117, col_offset=22)], [], None, None, lineno=117, col_offset=12), lineno=117, col_offset=12)], [], lineno=111, col_offset=8)], [], lineno=108, col_offset=4), FunctionDef('_check_rst_data', arguments([Name('self', Param(), lineno=119, col_offset=24), Name('data', Param(), lineno=119, col_offset=30)], None, None, []), [Expr(Str("Returns warnings when the provided data doesn't compile.", lineno=120, col_offset=8), lineno=120, col_offset=8), Assign([Name('source_path', Store(), lineno=121, col_offset=8)], Call(Name('StringIO', Load(), lineno=121, col_offset=22), [], [], None, None, lineno=121, col_offset=22), lineno=121, col_offset=8), Assign([Name('parser', Store(), lineno=122, col_offset=8)], Call(Name('Parser', Load(), lineno=122, col_offset=17), [], [], None, None, lineno=122, col_offset=17), lineno=122, col_offset=8), Assign([Name('settings', Store(), lineno=123, col_offset=8)], Call(Attribute(Call(Attribute(Name('frontend', Load(), lineno=123, col_offset=19), 'OptionParser', Load(), lineno=123, col_offset=19), [], [], None, None, lineno=123, col_offset=19), 'get_default_values', Load(), lineno=123, col_offset=19), [], [], None, None, lineno=123, col_offset=19), lineno=123, col_offset=8), Assign([Attribute(Name('settings', Load(), lineno=124, col_offset=8), 'tab_width', Store(), lineno=124, col_offset=8)], Num(4, lineno=124, col_offset=29), lineno=124, col_offset=8), Assign([Attribute(Name('settings', Load(), lineno=125, col_offset=8), 'pep_references', Store(), lineno=125, col_offset=8)], Name('None', Load(), lineno=125, col_offset=34), lineno=125, col_offset=8), Assign([Attribute(Name('settings', Load(), lineno=126, col_offset=8), 'rfc_references', Store(), lineno=126, col_offset=8)], Name('None', Load(), lineno=126, col_offset=34), lineno=126, col_offset=8), Assign([Name('reporter', Store(), lineno=127, col_offset=8)], Call(Name('SilentReporter', Load(), lineno=127, col_offset=19), [Name('source_path', Load(), lineno=127, col_offset=34), Attribute(Name('settings', Load(), lineno=128, col_offset=26), 'report_level', Load(), lineno=128, col_offset=26), Attribute(Name('settings', Load(), lineno=129, col_offset=26), 'halt_level', Load(), lineno=129, col_offset=26)], [keyword('stream', Attribute(Name('settings', Load(), lineno=130, col_offset=33), 'warning_stream', Load(), lineno=130, col_offset=33)), keyword('debug', Attribute(Name('settings', Load(), lineno=131, col_offset=32), 'debug', Load(), lineno=131, col_offset=32)), keyword('encoding', Attribute(Name('settings', Load(), lineno=132, col_offset=35), 'error_encoding', Load(), lineno=132, col_offset=35)), keyword('error_handler', Attribute(Name('settings', Load(), lineno=133, col_offset=40), 'error_encoding_error_handler', Load(), lineno=133, col_offset=40))], None, None, lineno=127, col_offset=19), lineno=127, col_offset=8), Assign([Name('document', Store(), lineno=135, col_offset=8)], Call(Attribute(Name('nodes', Load(), lineno=135, col_offset=19), 'document', Load(), lineno=135, col_offset=19), [Name('settings', Load(), lineno=135, col_offset=34), Name('reporter', Load(), lineno=135, col_offset=44)], [keyword('source', Name('source_path', Load(), lineno=135, col_offset=61))], None, None, lineno=135, col_offset=19), lineno=135, col_offset=8), Expr(Call(Attribute(Name('document', Load(), lineno=136, col_offset=8), 'note_source', Load(), lineno=136, col_offset=8), [Name('source_path', Load(), lineno=136, col_offset=29), Num(-1, lineno=136, col_offset=43)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), TryExcept([Expr(Call(Attribute(Name('parser', Load(), lineno=138, col_offset=12), 'parse', Load(), lineno=138, col_offset=12), [Name('data', Load(), lineno=138, col_offset=25), Name('document', Load(), lineno=138, col_offset=31)], [], None, None, lineno=138, col_offset=12), lineno=138, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=139, col_offset=15), None, [Expr(Call(Attribute(Attribute(Name('reporter', Load(), lineno=140, col_offset=12), 'messages', Load(), lineno=140, col_offset=12), 'append', Load(), lineno=140, col_offset=12), [Tuple([Num(-1, lineno=140, col_offset=39), Str('Could not finish the parsing.', lineno=140, col_offset=42), Str('', lineno=141, col_offset=38), Dict([], [], lineno=141, col_offset=42)], Load(), lineno=140, col_offset=38)], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=12)], lineno=139, col_offset=8)], [], lineno=137, col_offset=8), Return(Attribute(Name('reporter', Load(), lineno=143, col_offset=15), 'messages', Load(), lineno=143, col_offset=15), lineno=143, col_offset=8)], [], lineno=119, col_offset=4)], [], lineno=34, col_offset=0)])
