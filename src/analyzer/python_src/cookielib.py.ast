Module([Expr(Str("HTTP cookie handling for web clients.\n\nThis module has (now fairly distant) origins in Gisle Aas' Perl module\nHTTP::Cookies, from the libwww-perl library.\n\nDocstrings, comments and debug strings in this code refer to the\nattributes of the HTTP cookie system as cookie-attributes, to distinguish\nthem clearly from Python attributes.\n\nClass diagram (note that BSDDBCookieJar and the MSIE* classes are not\ndistributed with the Python standard library, but are available from\nhttp://wwwsearch.sf.net/):\n\n                        CookieJar____\n                        /     \\                  FileCookieJar      \\                   /    |   \\         \\       MozillaCookieJar | LWPCookieJar \\                        |               |                        |   ---MSIEBase |                         |  /      |     |                          | /   MSIEDBCookieJar BSDDBCookieJar\n                  |/\n               MSIECookieJar\n\n", lineno=26, col_offset=-1), lineno=26, col_offset=-1), Assign([Name('__all__', Store(), lineno=28, col_offset=0)], List([Str('Cookie', lineno=28, col_offset=11), Str('CookieJar', lineno=28, col_offset=21), Str('CookiePolicy', lineno=28, col_offset=34), Str('DefaultCookiePolicy', lineno=28, col_offset=50), Str('FileCookieJar', lineno=29, col_offset=11), Str('LWPCookieJar', lineno=29, col_offset=28), Str('lwp_cookie_str', lineno=29, col_offset=44), Str('LoadError', lineno=29, col_offset=62), Str('MozillaCookieJar', lineno=30, col_offset=11)], Load(), lineno=28, col_offset=10), lineno=28, col_offset=0), Import([alias('re', None), alias('urlparse', None), alias('copy', None), alias('time', None), alias('urllib', None)], lineno=32, col_offset=0), TryExcept([Import([alias('threading', '_threading')], lineno=34, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=35, col_offset=7), None, [Import([alias('dummy_threading', '_threading')], lineno=36, col_offset=4)], lineno=35, col_offset=0)], [], lineno=33, col_offset=0), Import([alias('httplib', None)], lineno=37, col_offset=0), ImportFrom('calendar', [alias('timegm', None)], 0, lineno=38, col_offset=0), Assign([Name('debug', Store(), lineno=40, col_offset=0)], Name('False', Load(), lineno=40, col_offset=8), lineno=40, col_offset=0), Assign([Name('logger', Store(), lineno=41, col_offset=0)], Name('None', Load(), lineno=41, col_offset=9), lineno=41, col_offset=0), FunctionDef('_debug', arguments([], 'args', None, []), [If(UnaryOp(Not(), Name('debug', Load(), lineno=44, col_offset=11), lineno=44, col_offset=7), [Return(None, lineno=45, col_offset=8)], [], lineno=44, col_offset=4), Global(['logger'], lineno=46, col_offset=4), If(UnaryOp(Not(), Name('logger', Load(), lineno=47, col_offset=11), lineno=47, col_offset=7), [Import([alias('logging', None)], lineno=48, col_offset=8), Assign([Name('logger', Store(), lineno=49, col_offset=8)], Call(Attribute(Name('logging', Load(), lineno=49, col_offset=17), 'getLogger', Load(), lineno=49, col_offset=17), [Str('cookielib', lineno=49, col_offset=35)], [], None, None, lineno=49, col_offset=17), lineno=49, col_offset=8)], [], lineno=47, col_offset=4), Return(Call(Attribute(Name('logger', Load(), lineno=50, col_offset=11), 'debug', Load(), lineno=50, col_offset=11), [], [], Name('args', Load(), lineno=50, col_offset=25), None, lineno=50, col_offset=11), lineno=50, col_offset=4)], [], lineno=43, col_offset=0), Assign([Name('DEFAULT_HTTP_PORT', Store(), lineno=53, col_offset=0)], Call(Name('str', Load(), lineno=53, col_offset=20), [Attribute(Name('httplib', Load(), lineno=53, col_offset=24), 'HTTP_PORT', Load(), lineno=53, col_offset=24)], [], None, None, lineno=53, col_offset=20), lineno=53, col_offset=0), Assign([Name('MISSING_FILENAME_TEXT', Store(), lineno=54, col_offset=0)], Str('a filename was not supplied (nor was the CookieJar instance initialised with one)', lineno=54, col_offset=25), lineno=54, col_offset=0), FunctionDef('_warn_unhandled_exception', arguments([], None, None, []), [Import([alias('warnings', None), alias('traceback', None), alias('StringIO', None)], lineno=61, col_offset=4), Assign([Name('f', Store(), lineno=62, col_offset=4)], Call(Attribute(Name('StringIO', Load(), lineno=62, col_offset=8), 'StringIO', Load(), lineno=62, col_offset=8), [], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=4), Expr(Call(Attribute(Name('traceback', Load(), lineno=63, col_offset=4), 'print_exc', Load(), lineno=63, col_offset=4), [Name('None', Load(), lineno=63, col_offset=24), Name('f', Load(), lineno=63, col_offset=30)], [], None, None, lineno=63, col_offset=4), lineno=63, col_offset=4), Assign([Name('msg', Store(), lineno=64, col_offset=4)], Call(Attribute(Name('f', Load(), lineno=64, col_offset=10), 'getvalue', Load(), lineno=64, col_offset=10), [], [], None, None, lineno=64, col_offset=10), lineno=64, col_offset=4), Expr(Call(Attribute(Name('warnings', Load(), lineno=65, col_offset=4), 'warn', Load(), lineno=65, col_offset=4), [BinOp(Str('cookielib bug!\n%s', lineno=65, col_offset=18), Mod(), Name('msg', Load(), lineno=65, col_offset=41), lineno=65, col_offset=18)], [keyword('stacklevel', Num(2, lineno=65, col_offset=57))], None, None, lineno=65, col_offset=4), lineno=65, col_offset=4)], [], lineno=57, col_offset=0), Assign([Name('EPOCH_YEAR', Store(), lineno=71, col_offset=0)], Num(1970, lineno=71, col_offset=13), lineno=71, col_offset=0), FunctionDef('_timegm', arguments([Name('tt', Param(), lineno=72, col_offset=12)], None, None, []), [Assign([Tuple([Name('year', Store(), lineno=73, col_offset=4), Name('month', Store(), lineno=73, col_offset=10), Name('mday', Store(), lineno=73, col_offset=17), Name('hour', Store(), lineno=73, col_offset=23), Name('min', Store(), lineno=73, col_offset=29), Name('sec', Store(), lineno=73, col_offset=34)], Store(), lineno=73, col_offset=4)], Subscript(Name('tt', Load(), lineno=73, col_offset=40), Slice(None, Num(6, lineno=73, col_offset=44), None), Load(), lineno=73, col_offset=40), lineno=73, col_offset=4), If(BoolOp(And(), [Compare(Name('year', Load(), lineno=74, col_offset=9), [GtE()], [Name('EPOCH_YEAR', Load(), lineno=74, col_offset=17)], lineno=74, col_offset=9), Compare(Num(1, lineno=74, col_offset=34), [LtE(), LtE()], [Name('month', Load(), lineno=74, col_offset=39), Num(12, lineno=74, col_offset=48)], lineno=74, col_offset=34), Compare(Num(1, lineno=74, col_offset=57), [LtE(), LtE()], [Name('mday', Load(), lineno=74, col_offset=62), Num(31, lineno=74, col_offset=70)], lineno=74, col_offset=57), Compare(Num(0, lineno=75, col_offset=9), [LtE(), LtE()], [Name('hour', Load(), lineno=75, col_offset=14), Num(24, lineno=75, col_offset=22)], lineno=75, col_offset=9), Compare(Num(0, lineno=75, col_offset=31), [LtE(), LtE()], [Name('min', Load(), lineno=75, col_offset=36), Num(59, lineno=75, col_offset=43)], lineno=75, col_offset=31), Compare(Num(0, lineno=75, col_offset=52), [LtE(), LtE()], [Name('sec', Load(), lineno=75, col_offset=57), Num(61, lineno=75, col_offset=64)], lineno=75, col_offset=52)], lineno=74, col_offset=8), [Return(Call(Name('timegm', Load(), lineno=76, col_offset=15), [Name('tt', Load(), lineno=76, col_offset=22)], [], None, None, lineno=76, col_offset=15), lineno=76, col_offset=8)], [Return(Name('None', Load(), lineno=78, col_offset=15), lineno=78, col_offset=8)], lineno=74, col_offset=4)], [], lineno=72, col_offset=0), Assign([Name('DAYS', Store(), lineno=80, col_offset=0)], List([Str('Mon', lineno=80, col_offset=8), Str('Tue', lineno=80, col_offset=15), Str('Wed', lineno=80, col_offset=22), Str('Thu', lineno=80, col_offset=29), Str('Fri', lineno=80, col_offset=36), Str('Sat', lineno=80, col_offset=43), Str('Sun', lineno=80, col_offset=50)], Load(), lineno=80, col_offset=7), lineno=80, col_offset=0), Assign([Name('MONTHS', Store(), lineno=81, col_offset=0)], List([Str('Jan', lineno=81, col_offset=10), Str('Feb', lineno=81, col_offset=17), Str('Mar', lineno=81, col_offset=24), Str('Apr', lineno=81, col_offset=31), Str('May', lineno=81, col_offset=38), Str('Jun', lineno=81, col_offset=45), Str('Jul', lineno=82, col_offset=10), Str('Aug', lineno=82, col_offset=17), Str('Sep', lineno=82, col_offset=24), Str('Oct', lineno=82, col_offset=31), Str('Nov', lineno=82, col_offset=38), Str('Dec', lineno=82, col_offset=45)], Load(), lineno=81, col_offset=9), lineno=81, col_offset=0), Assign([Name('MONTHS_LOWER', Store(), lineno=83, col_offset=0)], List([], Load(), lineno=83, col_offset=15), lineno=83, col_offset=0), For(Name('month', Store(), lineno=84, col_offset=4), Name('MONTHS', Load(), lineno=84, col_offset=13), [Expr(Call(Attribute(Name('MONTHS_LOWER', Load(), lineno=84, col_offset=21), 'append', Load(), lineno=84, col_offset=21), [Call(Attribute(Name('month', Load(), lineno=84, col_offset=41), 'lower', Load(), lineno=84, col_offset=41), [], [], None, None, lineno=84, col_offset=41)], [], None, None, lineno=84, col_offset=21), lineno=84, col_offset=21)], [], lineno=84, col_offset=0), FunctionDef('time2isoz', arguments([Name('t', Param(), lineno=86, col_offset=14)], None, None, [Name('None', Load(), lineno=86, col_offset=16)]), [Expr(Str('Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like "YYYY-MM-DD hh:mm:ssZ",\n    representing Universal Time (UTC, aka GMT).  An example of this format is:\n\n    1994-11-24 08:49:37Z\n\n    ', lineno=97, col_offset=-1), lineno=97, col_offset=-1), If(Compare(Name('t', Load(), lineno=98, col_offset=7), [Is()], [Name('None', Load(), lineno=98, col_offset=12)], lineno=98, col_offset=7), [Assign([Name('t', Store(), lineno=98, col_offset=18)], Call(Attribute(Name('time', Load(), lineno=98, col_offset=22), 'time', Load(), lineno=98, col_offset=22), [], [], None, None, lineno=98, col_offset=22), lineno=98, col_offset=18)], [], lineno=98, col_offset=4), Assign([Tuple([Name('year', Store(), lineno=99, col_offset=4), Name('mon', Store(), lineno=99, col_offset=10), Name('mday', Store(), lineno=99, col_offset=15), Name('hour', Store(), lineno=99, col_offset=21), Name('min', Store(), lineno=99, col_offset=27), Name('sec', Store(), lineno=99, col_offset=32)], Store(), lineno=99, col_offset=4)], Subscript(Call(Attribute(Name('time', Load(), lineno=99, col_offset=38), 'gmtime', Load(), lineno=99, col_offset=38), [Name('t', Load(), lineno=99, col_offset=50)], [], None, None, lineno=99, col_offset=38), Slice(None, Num(6, lineno=99, col_offset=54), None), Load(), lineno=99, col_offset=38), lineno=99, col_offset=4), Return(BinOp(Str('%04d-%02d-%02d %02d:%02d:%02dZ', lineno=100, col_offset=11), Mod(), Tuple([Name('year', Load(), lineno=101, col_offset=8), Name('mon', Load(), lineno=101, col_offset=14), Name('mday', Load(), lineno=101, col_offset=19), Name('hour', Load(), lineno=101, col_offset=25), Name('min', Load(), lineno=101, col_offset=31), Name('sec', Load(), lineno=101, col_offset=36)], Load(), lineno=101, col_offset=8), lineno=100, col_offset=11), lineno=100, col_offset=4)], [], lineno=86, col_offset=0), FunctionDef('time2netscape', arguments([Name('t', Param(), lineno=103, col_offset=18)], None, None, [Name('None', Load(), lineno=103, col_offset=20)]), [Expr(Str('Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like this:\n\n    Wed, DD-Mon-YYYY HH:MM:SS GMT\n\n    ', lineno=113, col_offset=-1), lineno=113, col_offset=-1), If(Compare(Name('t', Load(), lineno=114, col_offset=7), [Is()], [Name('None', Load(), lineno=114, col_offset=12)], lineno=114, col_offset=7), [Assign([Name('t', Store(), lineno=114, col_offset=18)], Call(Attribute(Name('time', Load(), lineno=114, col_offset=22), 'time', Load(), lineno=114, col_offset=22), [], [], None, None, lineno=114, col_offset=22), lineno=114, col_offset=18)], [], lineno=114, col_offset=4), Assign([Tuple([Name('year', Store(), lineno=115, col_offset=4), Name('mon', Store(), lineno=115, col_offset=10), Name('mday', Store(), lineno=115, col_offset=15), Name('hour', Store(), lineno=115, col_offset=21), Name('min', Store(), lineno=115, col_offset=27), Name('sec', Store(), lineno=115, col_offset=32), Name('wday', Store(), lineno=115, col_offset=37)], Store(), lineno=115, col_offset=4)], Subscript(Call(Attribute(Name('time', Load(), lineno=115, col_offset=44), 'gmtime', Load(), lineno=115, col_offset=44), [Name('t', Load(), lineno=115, col_offset=56)], [], None, None, lineno=115, col_offset=44), Slice(None, Num(7, lineno=115, col_offset=60), None), Load(), lineno=115, col_offset=44), lineno=115, col_offset=4), Return(BinOp(Str('%s %02d-%s-%04d %02d:%02d:%02d GMT', lineno=116, col_offset=11), Mod(), Tuple([Subscript(Name('DAYS', Load(), lineno=117, col_offset=8), Index(Name('wday', Load(), lineno=117, col_offset=13)), Load(), lineno=117, col_offset=8), Name('mday', Load(), lineno=117, col_offset=20), Subscript(Name('MONTHS', Load(), lineno=117, col_offset=26), Index(BinOp(Name('mon', Load(), lineno=117, col_offset=33), Sub(), Num(1, lineno=117, col_offset=37), lineno=117, col_offset=33)), Load(), lineno=117, col_offset=26), Name('year', Load(), lineno=117, col_offset=41), Name('hour', Load(), lineno=117, col_offset=47), Name('min', Load(), lineno=117, col_offset=53), Name('sec', Load(), lineno=117, col_offset=58)], Load(), lineno=117, col_offset=8), lineno=116, col_offset=11), lineno=116, col_offset=4)], [], lineno=103, col_offset=0), Assign([Name('UTC_ZONES', Store(), lineno=120, col_offset=0)], Dict([Str('GMT', lineno=120, col_offset=13), Str('UTC', lineno=120, col_offset=26), Str('UT', lineno=120, col_offset=39), Str('Z', lineno=120, col_offset=51)], [Name('None', Load(), lineno=120, col_offset=20), Name('None', Load(), lineno=120, col_offset=33), Name('None', Load(), lineno=120, col_offset=45), Name('None', Load(), lineno=120, col_offset=56)], lineno=120, col_offset=12), lineno=120, col_offset=0), Assign([Name('TIMEZONE_RE', Store(), lineno=122, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=122, col_offset=14), 'compile', Load(), lineno=122, col_offset=14), [Str('^([-+])?(\\d\\d?):?(\\d\\d)?$', lineno=122, col_offset=25)], [], None, None, lineno=122, col_offset=14), lineno=122, col_offset=0), FunctionDef('offset_from_tz_string', arguments([Name('tz', Param(), lineno=123, col_offset=26)], None, None, []), [Assign([Name('offset', Store(), lineno=124, col_offset=4)], Name('None', Load(), lineno=124, col_offset=13), lineno=124, col_offset=4), If(Compare(Name('tz', Load(), lineno=125, col_offset=7), [In()], [Name('UTC_ZONES', Load(), lineno=125, col_offset=13)], lineno=125, col_offset=7), [Assign([Name('offset', Store(), lineno=126, col_offset=8)], Num(0, lineno=126, col_offset=17), lineno=126, col_offset=8)], [Assign([Name('m', Store(), lineno=128, col_offset=8)], Call(Attribute(Name('TIMEZONE_RE', Load(), lineno=128, col_offset=12), 'search', Load(), lineno=128, col_offset=12), [Name('tz', Load(), lineno=128, col_offset=31)], [], None, None, lineno=128, col_offset=12), lineno=128, col_offset=8), If(Name('m', Load(), lineno=129, col_offset=11), [Assign([Name('offset', Store(), lineno=130, col_offset=12)], BinOp(Num(3600, lineno=130, col_offset=21), Mult(), Call(Name('int', Load(), lineno=130, col_offset=28), [Call(Attribute(Name('m', Load(), lineno=130, col_offset=32), 'group', Load(), lineno=130, col_offset=32), [Num(2, lineno=130, col_offset=40)], [], None, None, lineno=130, col_offset=32)], [], None, None, lineno=130, col_offset=28), lineno=130, col_offset=21), lineno=130, col_offset=12), If(Call(Attribute(Name('m', Load(), lineno=131, col_offset=15), 'group', Load(), lineno=131, col_offset=15), [Num(3, lineno=131, col_offset=23)], [], None, None, lineno=131, col_offset=15), [Assign([Name('offset', Store(), lineno=132, col_offset=16)], BinOp(Name('offset', Load(), lineno=132, col_offset=25), Add(), BinOp(Num(60, lineno=132, col_offset=34), Mult(), Call(Name('int', Load(), lineno=132, col_offset=39), [Call(Attribute(Name('m', Load(), lineno=132, col_offset=43), 'group', Load(), lineno=132, col_offset=43), [Num(3, lineno=132, col_offset=51)], [], None, None, lineno=132, col_offset=43)], [], None, None, lineno=132, col_offset=39), lineno=132, col_offset=34), lineno=132, col_offset=25), lineno=132, col_offset=16)], [], lineno=131, col_offset=12), If(Compare(Call(Attribute(Name('m', Load(), lineno=133, col_offset=15), 'group', Load(), lineno=133, col_offset=15), [Num(1, lineno=133, col_offset=23)], [], None, None, lineno=133, col_offset=15), [Eq()], [Str('-', lineno=133, col_offset=29)], lineno=133, col_offset=15), [Assign([Name('offset', Store(), lineno=134, col_offset=16)], UnaryOp(USub(), Name('offset', Load(), lineno=134, col_offset=26), lineno=134, col_offset=25), lineno=134, col_offset=16)], [], lineno=133, col_offset=12)], [], lineno=129, col_offset=8)], lineno=125, col_offset=4), Return(Name('offset', Load(), lineno=135, col_offset=11), lineno=135, col_offset=4)], [], lineno=123, col_offset=0), FunctionDef('_str2time', arguments([Name('day', Param(), lineno=137, col_offset=14), Name('mon', Param(), lineno=137, col_offset=19), Name('yr', Param(), lineno=137, col_offset=24), Name('hr', Param(), lineno=137, col_offset=28), Name('min', Param(), lineno=137, col_offset=32), Name('sec', Param(), lineno=137, col_offset=37), Name('tz', Param(), lineno=137, col_offset=42)], None, None, []), [TryExcept([Assign([Name('mon', Store(), lineno=141, col_offset=8)], BinOp(Call(Attribute(Name('MONTHS_LOWER', Load(), lineno=141, col_offset=14), 'index', Load(), lineno=141, col_offset=14), [Call(Attribute(Name('mon', Load(), lineno=141, col_offset=33), 'lower', Load(), lineno=141, col_offset=33), [], [], None, None, lineno=141, col_offset=33)], [], None, None, lineno=141, col_offset=14), Add(), Num(1, lineno=141, col_offset=46), lineno=141, col_offset=14), lineno=141, col_offset=8)], [ExceptHandler(Name('ValueError', Load(), lineno=142, col_offset=11), None, [TryExcept([Assign([Name('imon', Store(), lineno=145, col_offset=12)], Call(Name('int', Load(), lineno=145, col_offset=19), [Name('mon', Load(), lineno=145, col_offset=23)], [], None, None, lineno=145, col_offset=19), lineno=145, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=146, col_offset=15), None, [Return(Name('None', Load(), lineno=147, col_offset=19), lineno=147, col_offset=12)], lineno=146, col_offset=8)], [], lineno=144, col_offset=8), If(Compare(Num(1, lineno=148, col_offset=11), [LtE(), LtE()], [Name('imon', Load(), lineno=148, col_offset=16), Num(12, lineno=148, col_offset=24)], lineno=148, col_offset=11), [Assign([Name('mon', Store(), lineno=149, col_offset=12)], Name('imon', Load(), lineno=149, col_offset=18), lineno=149, col_offset=12)], [Return(Name('None', Load(), lineno=151, col_offset=19), lineno=151, col_offset=12)], lineno=148, col_offset=8)], lineno=142, col_offset=4)], [], lineno=140, col_offset=4), If(Compare(Name('hr', Load(), lineno=154, col_offset=7), [Is()], [Name('None', Load(), lineno=154, col_offset=13)], lineno=154, col_offset=7), [Assign([Name('hr', Store(), lineno=154, col_offset=19)], Num(0, lineno=154, col_offset=24), lineno=154, col_offset=19)], [], lineno=154, col_offset=4), If(Compare(Name('min', Load(), lineno=155, col_offset=7), [Is()], [Name('None', Load(), lineno=155, col_offset=14)], lineno=155, col_offset=7), [Assign([Name('min', Store(), lineno=155, col_offset=20)], Num(0, lineno=155, col_offset=26), lineno=155, col_offset=20)], [], lineno=155, col_offset=4), If(Compare(Name('sec', Load(), lineno=156, col_offset=7), [Is()], [Name('None', Load(), lineno=156, col_offset=14)], lineno=156, col_offset=7), [Assign([Name('sec', Store(), lineno=156, col_offset=20)], Num(0, lineno=156, col_offset=26), lineno=156, col_offset=20)], [], lineno=156, col_offset=4), Assign([Name('yr', Store(), lineno=158, col_offset=4)], Call(Name('int', Load(), lineno=158, col_offset=9), [Name('yr', Load(), lineno=158, col_offset=13)], [], None, None, lineno=158, col_offset=9), lineno=158, col_offset=4), Assign([Name('day', Store(), lineno=159, col_offset=4)], Call(Name('int', Load(), lineno=159, col_offset=10), [Name('day', Load(), lineno=159, col_offset=14)], [], None, None, lineno=159, col_offset=10), lineno=159, col_offset=4), Assign([Name('hr', Store(), lineno=160, col_offset=4)], Call(Name('int', Load(), lineno=160, col_offset=9), [Name('hr', Load(), lineno=160, col_offset=13)], [], None, None, lineno=160, col_offset=9), lineno=160, col_offset=4), Assign([Name('min', Store(), lineno=161, col_offset=4)], Call(Name('int', Load(), lineno=161, col_offset=10), [Name('min', Load(), lineno=161, col_offset=14)], [], None, None, lineno=161, col_offset=10), lineno=161, col_offset=4), Assign([Name('sec', Store(), lineno=162, col_offset=4)], Call(Name('int', Load(), lineno=162, col_offset=10), [Name('sec', Load(), lineno=162, col_offset=14)], [], None, None, lineno=162, col_offset=10), lineno=162, col_offset=4), If(Compare(Name('yr', Load(), lineno=164, col_offset=7), [Lt()], [Num(1000, lineno=164, col_offset=12)], lineno=164, col_offset=7), [Assign([Name('cur_yr', Store(), lineno=166, col_offset=8)], Subscript(Call(Attribute(Name('time', Load(), lineno=166, col_offset=17), 'localtime', Load(), lineno=166, col_offset=17), [Call(Attribute(Name('time', Load(), lineno=166, col_offset=32), 'time', Load(), lineno=166, col_offset=32), [], [], None, None, lineno=166, col_offset=32)], [], None, None, lineno=166, col_offset=17), Index(Num(0, lineno=166, col_offset=45)), Load(), lineno=166, col_offset=17), lineno=166, col_offset=8), Assign([Name('m', Store(), lineno=167, col_offset=8)], BinOp(Name('cur_yr', Load(), lineno=167, col_offset=12), Mod(), Num(100, lineno=167, col_offset=21), lineno=167, col_offset=12), lineno=167, col_offset=8), Assign([Name('tmp', Store(), lineno=168, col_offset=8)], Name('yr', Load(), lineno=168, col_offset=14), lineno=168, col_offset=8), Assign([Name('yr', Store(), lineno=169, col_offset=8)], BinOp(BinOp(Name('yr', Load(), lineno=169, col_offset=13), Add(), Name('cur_yr', Load(), lineno=169, col_offset=18), lineno=169, col_offset=13), Sub(), Name('m', Load(), lineno=169, col_offset=27), lineno=169, col_offset=25), lineno=169, col_offset=8), Assign([Name('m', Store(), lineno=170, col_offset=8)], BinOp(Name('m', Load(), lineno=170, col_offset=12), Sub(), Name('tmp', Load(), lineno=170, col_offset=16), lineno=170, col_offset=12), lineno=170, col_offset=8), If(Compare(Call(Name('abs', Load(), lineno=171, col_offset=11), [Name('m', Load(), lineno=171, col_offset=15)], [], None, None, lineno=171, col_offset=11), [Gt()], [Num(50, lineno=171, col_offset=20)], lineno=171, col_offset=11), [If(Compare(Name('m', Load(), lineno=172, col_offset=15), [Gt()], [Num(0, lineno=172, col_offset=19)], lineno=172, col_offset=15), [Assign([Name('yr', Store(), lineno=172, col_offset=22)], BinOp(Name('yr', Load(), lineno=172, col_offset=27), Add(), Num(100, lineno=172, col_offset=32), lineno=172, col_offset=27), lineno=172, col_offset=22)], [Assign([Name('yr', Store(), lineno=173, col_offset=18)], BinOp(Name('yr', Load(), lineno=173, col_offset=23), Sub(), Num(100, lineno=173, col_offset=28), lineno=173, col_offset=23), lineno=173, col_offset=18)], lineno=172, col_offset=12)], [], lineno=171, col_offset=8)], [], lineno=164, col_offset=4), Assign([Name('t', Store(), lineno=176, col_offset=4)], Call(Name('_timegm', Load(), lineno=176, col_offset=8), [Tuple([Name('yr', Load(), lineno=176, col_offset=17), Name('mon', Load(), lineno=176, col_offset=21), Name('day', Load(), lineno=176, col_offset=26), Name('hr', Load(), lineno=176, col_offset=31), Name('min', Load(), lineno=176, col_offset=35), Name('sec', Load(), lineno=176, col_offset=40), Name('tz', Load(), lineno=176, col_offset=45)], Load(), lineno=176, col_offset=17)], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=4), If(Compare(Name('t', Load(), lineno=178, col_offset=7), [IsNot()], [Name('None', Load(), lineno=178, col_offset=16)], lineno=178, col_offset=7), [If(Compare(Name('tz', Load(), lineno=180, col_offset=11), [Is()], [Name('None', Load(), lineno=180, col_offset=17)], lineno=180, col_offset=11), [Assign([Name('tz', Store(), lineno=181, col_offset=12)], Str('UTC', lineno=181, col_offset=17), lineno=181, col_offset=12)], [], lineno=180, col_offset=8), Assign([Name('tz', Store(), lineno=182, col_offset=8)], Call(Attribute(Name('tz', Load(), lineno=182, col_offset=13), 'upper', Load(), lineno=182, col_offset=13), [], [], None, None, lineno=182, col_offset=13), lineno=182, col_offset=8), Assign([Name('offset', Store(), lineno=183, col_offset=8)], Call(Name('offset_from_tz_string', Load(), lineno=183, col_offset=17), [Name('tz', Load(), lineno=183, col_offset=39)], [], None, None, lineno=183, col_offset=17), lineno=183, col_offset=8), If(Compare(Name('offset', Load(), lineno=184, col_offset=11), [Is()], [Name('None', Load(), lineno=184, col_offset=21)], lineno=184, col_offset=11), [Return(Name('None', Load(), lineno=185, col_offset=19), lineno=185, col_offset=12)], [], lineno=184, col_offset=8), Assign([Name('t', Store(), lineno=186, col_offset=8)], BinOp(Name('t', Load(), lineno=186, col_offset=12), Sub(), Name('offset', Load(), lineno=186, col_offset=16), lineno=186, col_offset=12), lineno=186, col_offset=8)], [], lineno=178, col_offset=4), Return(Name('t', Load(), lineno=188, col_offset=11), lineno=188, col_offset=4)], [], lineno=137, col_offset=0), Assign([Name('STRICT_DATE_RE', Store(), lineno=190, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=190, col_offset=17), 'compile', Load(), lineno=190, col_offset=17), [Str('^[SMTWF][a-z][a-z], (\\d\\d) ([JFMASOND][a-z][a-z]) (\\d\\d\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$', lineno=191, col_offset=4)], [], None, None, lineno=190, col_offset=17), lineno=190, col_offset=0), Assign([Name('WEEKDAY_RE', Store(), lineno=193, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=193, col_offset=13), 'compile', Load(), lineno=193, col_offset=13), [Str('^(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)[a-z]*,?\\s*', lineno=194, col_offset=4), Attribute(Name('re', Load(), lineno=194, col_offset=52), 'I', Load(), lineno=194, col_offset=52)], [], None, None, lineno=193, col_offset=13), lineno=193, col_offset=0), Assign([Name('LOOSE_HTTP_DATE_RE', Store(), lineno=195, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=195, col_offset=21), 'compile', Load(), lineno=195, col_offset=21), [Str('^\n    (\\d\\d?)            # day\n       (?:\\s+|[-\\/])\n    (\\w+)              # month\n        (?:\\s+|[-\\/])\n    (\\d+)              # year\n    (?:\n          (?:\\s+|:)    # separator before clock\n       (\\d\\d?):(\\d\\d)  # hour:min\n       (?::(\\d\\d))?    # optional seconds\n    )?                 # optional clock\n       \\s*\n    ([-+]?\\d{2,4}|(?![APap][Mm]\\b)[A-Za-z]+)? # timezone\n       \\s*\n    (?:\\(\\w+\\))?       # ASCII representation of timezone in parens.\n       \\s*$', lineno=211, col_offset=-1), Attribute(Name('re', Load(), lineno=211, col_offset=16), 'X', Load(), lineno=211, col_offset=16)], [], None, None, lineno=195, col_offset=21), lineno=195, col_offset=0), FunctionDef('http2time', arguments([Name('text', Param(), lineno=212, col_offset=14)], None, None, []), [Expr(Str('Returns time in seconds since epoch of time represented by a string.\n\n    Return value is an integer.\n\n    None is returned if the format of str is unrecognized, the time is outside\n    the representable range, or the timezone string is not recognized.  If the\n    string contains no timezone, UTC is assumed.\n\n    The timezone in the string may be numerical (like "-0800" or "+0100") or a\n    string timezone (like "UTC", "GMT", "BST" or "EST").  Currently, only the\n    timezone strings equivalent to UTC (zero offset) are known to the function.\n\n    The function loosely parses the following formats:\n\n    Wed, 09 Feb 1994 22:23:32 GMT       -- HTTP format\n    Tuesday, 08-Feb-94 14:15:29 GMT     -- old rfc850 HTTP format\n    Tuesday, 08-Feb-1994 14:15:29 GMT   -- broken rfc850 HTTP format\n    09 Feb 1994 22:23:32 GMT            -- HTTP format (no weekday)\n    08-Feb-94 14:15:29 GMT              -- rfc850 format (no weekday)\n    08-Feb-1994 14:15:29 GMT            -- broken rfc850 format (no weekday)\n\n    The parser ignores leading and trailing whitespace.  The time may be\n    absent.\n\n    If the year is given with only 2 digits, the function will select the\n    century that makes the year closest to the current date.\n\n    ', lineno=240, col_offset=-1), lineno=240, col_offset=-1), Assign([Name('m', Store(), lineno=242, col_offset=4)], Call(Attribute(Name('STRICT_DATE_RE', Load(), lineno=242, col_offset=8), 'search', Load(), lineno=242, col_offset=8), [Name('text', Load(), lineno=242, col_offset=30)], [], None, None, lineno=242, col_offset=8), lineno=242, col_offset=4), If(Name('m', Load(), lineno=243, col_offset=7), [Assign([Name('g', Store(), lineno=244, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=244, col_offset=12), 'groups', Load(), lineno=244, col_offset=12), [], [], None, None, lineno=244, col_offset=12), lineno=244, col_offset=8), Assign([Name('mon', Store(), lineno=245, col_offset=8)], BinOp(Call(Attribute(Name('MONTHS_LOWER', Load(), lineno=245, col_offset=14), 'index', Load(), lineno=245, col_offset=14), [Call(Attribute(Subscript(Name('g', Load(), lineno=245, col_offset=33), Index(Num(1, lineno=245, col_offset=35)), Load(), lineno=245, col_offset=33), 'lower', Load(), lineno=245, col_offset=33), [], [], None, None, lineno=245, col_offset=33)], [], None, None, lineno=245, col_offset=14), Add(), Num(1, lineno=245, col_offset=49), lineno=245, col_offset=14), lineno=245, col_offset=8), Assign([Name('tt', Store(), lineno=246, col_offset=8)], Tuple([Call(Name('int', Load(), lineno=246, col_offset=14), [Subscript(Name('g', Load(), lineno=246, col_offset=18), Index(Num(2, lineno=246, col_offset=20)), Load(), lineno=246, col_offset=18)], [], None, None, lineno=246, col_offset=14), Name('mon', Load(), lineno=246, col_offset=25), Call(Name('int', Load(), lineno=246, col_offset=30), [Subscript(Name('g', Load(), lineno=246, col_offset=34), Index(Num(0, lineno=246, col_offset=36)), Load(), lineno=246, col_offset=34)], [], None, None, lineno=246, col_offset=30), Call(Name('int', Load(), lineno=247, col_offset=14), [Subscript(Name('g', Load(), lineno=247, col_offset=18), Index(Num(3, lineno=247, col_offset=20)), Load(), lineno=247, col_offset=18)], [], None, None, lineno=247, col_offset=14), Call(Name('int', Load(), lineno=247, col_offset=25), [Subscript(Name('g', Load(), lineno=247, col_offset=29), Index(Num(4, lineno=247, col_offset=31)), Load(), lineno=247, col_offset=29)], [], None, None, lineno=247, col_offset=25), Call(Name('float', Load(), lineno=247, col_offset=36), [Subscript(Name('g', Load(), lineno=247, col_offset=42), Index(Num(5, lineno=247, col_offset=44)), Load(), lineno=247, col_offset=42)], [], None, None, lineno=247, col_offset=36)], Load(), lineno=246, col_offset=14), lineno=246, col_offset=8), Return(Call(Name('_timegm', Load(), lineno=248, col_offset=15), [Name('tt', Load(), lineno=248, col_offset=23)], [], None, None, lineno=248, col_offset=15), lineno=248, col_offset=8)], [], lineno=243, col_offset=4), Assign([Name('text', Store(), lineno=253, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=253, col_offset=11), 'lstrip', Load(), lineno=253, col_offset=11), [], [], None, None, lineno=253, col_offset=11), lineno=253, col_offset=4), Assign([Name('text', Store(), lineno=254, col_offset=4)], Call(Attribute(Name('WEEKDAY_RE', Load(), lineno=254, col_offset=11), 'sub', Load(), lineno=254, col_offset=11), [Str('', lineno=254, col_offset=26), Name('text', Load(), lineno=254, col_offset=30), Num(1, lineno=254, col_offset=36)], [], None, None, lineno=254, col_offset=11), lineno=254, col_offset=4), Assign([Tuple([Name('day', Store(), lineno=257, col_offset=4), Name('mon', Store(), lineno=257, col_offset=9), Name('yr', Store(), lineno=257, col_offset=14), Name('hr', Store(), lineno=257, col_offset=18), Name('min', Store(), lineno=257, col_offset=22), Name('sec', Store(), lineno=257, col_offset=27), Name('tz', Store(), lineno=257, col_offset=32)], Store(), lineno=257, col_offset=4)], BinOp(List([Name('None', Load(), lineno=257, col_offset=38)], Load(), lineno=257, col_offset=37), Mult(), Num(7, lineno=257, col_offset=44), lineno=257, col_offset=37), lineno=257, col_offset=4), Assign([Name('m', Store(), lineno=260, col_offset=4)], Call(Attribute(Name('LOOSE_HTTP_DATE_RE', Load(), lineno=260, col_offset=8), 'search', Load(), lineno=260, col_offset=8), [Name('text', Load(), lineno=260, col_offset=34)], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=4), If(Compare(Name('m', Load(), lineno=261, col_offset=7), [IsNot()], [Name('None', Load(), lineno=261, col_offset=16)], lineno=261, col_offset=7), [Assign([Tuple([Name('day', Store(), lineno=262, col_offset=8), Name('mon', Store(), lineno=262, col_offset=13), Name('yr', Store(), lineno=262, col_offset=18), Name('hr', Store(), lineno=262, col_offset=22), Name('min', Store(), lineno=262, col_offset=26), Name('sec', Store(), lineno=262, col_offset=31), Name('tz', Store(), lineno=262, col_offset=36)], Store(), lineno=262, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=262, col_offset=41), 'groups', Load(), lineno=262, col_offset=41), [], [], None, None, lineno=262, col_offset=41), lineno=262, col_offset=8)], [Return(Name('None', Load(), lineno=264, col_offset=15), lineno=264, col_offset=8)], lineno=261, col_offset=4), Return(Call(Name('_str2time', Load(), lineno=266, col_offset=11), [Name('day', Load(), lineno=266, col_offset=21), Name('mon', Load(), lineno=266, col_offset=26), Name('yr', Load(), lineno=266, col_offset=31), Name('hr', Load(), lineno=266, col_offset=35), Name('min', Load(), lineno=266, col_offset=39), Name('sec', Load(), lineno=266, col_offset=44), Name('tz', Load(), lineno=266, col_offset=49)], [], None, None, lineno=266, col_offset=11), lineno=266, col_offset=4)], [], lineno=212, col_offset=0), Assign([Name('ISO_DATE_RE', Store(), lineno=268, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=268, col_offset=14), 'compile', Load(), lineno=268, col_offset=14), [Str('^\n    (\\d{4})              # year\n       [-\\/]?\n    (\\d\\d?)              # numerical month\n       [-\\/]?\n    (\\d\\d?)              # day\n   (?:\n         (?:\\s+|[-:Tt])  # separator before clock\n      (\\d\\d?):?(\\d\\d)    # hour:min\n      (?::?(\\d\\d(?:\\.\\d*)?))?  # optional seconds (and fractional)\n   )?                    # optional clock\n      \\s*\n   ([-+]?\\d\\d?:?(:?\\d\\d)?\n    |Z|z)?               # timezone  (Z is "zero meridian", i.e. GMT)\n      \\s*$', lineno=283, col_offset=-1), Attribute(Name('re', Load(), lineno=283, col_offset=15), 'X', Load(), lineno=283, col_offset=15)], [], None, None, lineno=268, col_offset=14), lineno=268, col_offset=0), FunctionDef('iso2time', arguments([Name('text', Param(), lineno=284, col_offset=13)], None, None, []), [Expr(Str('\n    As for http2time, but parses the ISO 8601 formats:\n\n    1994-02-03 14:15:29 -0100    -- ISO 8601 format\n    1994-02-03 14:15:29          -- zone is optional\n    1994-02-03                   -- only date\n    1994-02-03T14:15:29          -- Use T as separator\n    19940203T141529Z             -- ISO 8601 compact format\n    19940203                     -- only date\n\n    ', lineno=295, col_offset=-1), lineno=295, col_offset=-1), Assign([Name('text', Store(), lineno=297, col_offset=4)], Call(Attribute(Name('text', Load(), lineno=297, col_offset=11), 'lstrip', Load(), lineno=297, col_offset=11), [], [], None, None, lineno=297, col_offset=11), lineno=297, col_offset=4), Assign([Tuple([Name('day', Store(), lineno=300, col_offset=4), Name('mon', Store(), lineno=300, col_offset=9), Name('yr', Store(), lineno=300, col_offset=14), Name('hr', Store(), lineno=300, col_offset=18), Name('min', Store(), lineno=300, col_offset=22), Name('sec', Store(), lineno=300, col_offset=27), Name('tz', Store(), lineno=300, col_offset=32)], Store(), lineno=300, col_offset=4)], BinOp(List([Name('None', Load(), lineno=300, col_offset=38)], Load(), lineno=300, col_offset=37), Mult(), Num(7, lineno=300, col_offset=44), lineno=300, col_offset=37), lineno=300, col_offset=4), Assign([Name('m', Store(), lineno=303, col_offset=4)], Call(Attribute(Name('ISO_DATE_RE', Load(), lineno=303, col_offset=8), 'search', Load(), lineno=303, col_offset=8), [Name('text', Load(), lineno=303, col_offset=27)], [], None, None, lineno=303, col_offset=8), lineno=303, col_offset=4), If(Compare(Name('m', Load(), lineno=304, col_offset=7), [IsNot()], [Name('None', Load(), lineno=304, col_offset=16)], lineno=304, col_offset=7), [Assign([Tuple([Name('yr', Store(), lineno=307, col_offset=8), Name('mon', Store(), lineno=307, col_offset=12), Name('day', Store(), lineno=307, col_offset=17), Name('hr', Store(), lineno=307, col_offset=22), Name('min', Store(), lineno=307, col_offset=26), Name('sec', Store(), lineno=307, col_offset=31), Name('tz', Store(), lineno=307, col_offset=36), Name('_', Store(), lineno=307, col_offset=40)], Store(), lineno=307, col_offset=8)], Call(Attribute(Name('m', Load(), lineno=307, col_offset=44), 'groups', Load(), lineno=307, col_offset=44), [], [], None, None, lineno=307, col_offset=44), lineno=307, col_offset=8)], [Return(Name('None', Load(), lineno=309, col_offset=15), lineno=309, col_offset=8)], lineno=304, col_offset=4), Return(Call(Name('_str2time', Load(), lineno=311, col_offset=11), [Name('day', Load(), lineno=311, col_offset=21), Name('mon', Load(), lineno=311, col_offset=26), Name('yr', Load(), lineno=311, col_offset=31), Name('hr', Load(), lineno=311, col_offset=35), Name('min', Load(), lineno=311, col_offset=39), Name('sec', Load(), lineno=311, col_offset=44), Name('tz', Load(), lineno=311, col_offset=49)], [], None, None, lineno=311, col_offset=11), lineno=311, col_offset=4)], [], lineno=284, col_offset=0), FunctionDef('unmatched', arguments([Name('match', Param(), lineno=317, col_offset=14)], None, None, []), [Expr(Str('Return unmatched part of re.Match object.', lineno=318, col_offset=4), lineno=318, col_offset=4), Assign([Tuple([Name('start', Store(), lineno=319, col_offset=4), Name('end', Store(), lineno=319, col_offset=11)], Store(), lineno=319, col_offset=4)], Call(Attribute(Name('match', Load(), lineno=319, col_offset=17), 'span', Load(), lineno=319, col_offset=17), [Num(0, lineno=319, col_offset=28)], [], None, None, lineno=319, col_offset=17), lineno=319, col_offset=4), Return(BinOp(Subscript(Attribute(Name('match', Load(), lineno=320, col_offset=11), 'string', Load(), lineno=320, col_offset=11), Slice(None, Name('start', Load(), lineno=320, col_offset=25), None), Load(), lineno=320, col_offset=11), Add(), Subscript(Attribute(Name('match', Load(), lineno=320, col_offset=32), 'string', Load(), lineno=320, col_offset=32), Slice(Name('end', Load(), lineno=320, col_offset=45), None, None), Load(), lineno=320, col_offset=32), lineno=320, col_offset=11), lineno=320, col_offset=4)], [], lineno=317, col_offset=0), Assign([Name('HEADER_TOKEN_RE', Store(), lineno=322, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=322, col_offset=25), 'compile', Load(), lineno=322, col_offset=25), [Str('^\\s*([^=\\s;,]+)', lineno=322, col_offset=36)], [], None, None, lineno=322, col_offset=25), lineno=322, col_offset=0), Assign([Name('HEADER_QUOTED_VALUE_RE', Store(), lineno=323, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=323, col_offset=25), 'compile', Load(), lineno=323, col_offset=25), [Str('^\\s*=\\s*\\"([^\\"\\\\]*(?:\\\\.[^\\"\\\\]*)*)\\"', lineno=323, col_offset=36)], [], None, None, lineno=323, col_offset=25), lineno=323, col_offset=0), Assign([Name('HEADER_VALUE_RE', Store(), lineno=324, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=324, col_offset=25), 'compile', Load(), lineno=324, col_offset=25), [Str('^\\s*=\\s*([^\\s;,]*)', lineno=324, col_offset=36)], [], None, None, lineno=324, col_offset=25), lineno=324, col_offset=0), Assign([Name('HEADER_ESCAPE_RE', Store(), lineno=325, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=325, col_offset=19), 'compile', Load(), lineno=325, col_offset=19), [Str('\\\\(.)', lineno=325, col_offset=30)], [], None, None, lineno=325, col_offset=19), lineno=325, col_offset=0), FunctionDef('split_header_words', arguments([Name('header_values', Param(), lineno=326, col_offset=23)], None, None, []), [Expr(Str('Parse header values into a list of lists containing key,value pairs.\n\n    The function knows how to deal with ",", ";" and "=" as well as quoted\n    values after "=".  A list of space separated tokens are parsed as if they\n    were separated by ";".\n\n    If the header_values passed as argument contains multiple values, then they\n    are treated as if they were a single value separated by comma ",".\n\n    This means that this function is useful for parsing header fields that\n    follow this syntax (BNF as from the HTTP/1.1 specification, but we relax\n    the requirement for tokens).\n\n      headers           = #header\n      header            = (token | parameter) *( [";"] (token | parameter))\n\n      token             = 1*<any CHAR except CTLs or separators>\n      separators        = "(" | ")" | "<" | ">" | "@"\n                        | "," | ";" | ":" | "\\" | <">\n                        | "/" | "[" | "]" | "?" | "="\n                        | "{" | "}" | SP | HT\n\n      quoted-string     = ( <"> *(qdtext | quoted-pair ) <"> )\n      qdtext            = <any TEXT except <">>\n      quoted-pair       = "\\" CHAR\n\n      parameter         = attribute "=" value\n      attribute         = token\n      value             = token | quoted-string\n\n    Each header is represented by a list of key/value pairs.  The value for a\n    simple token (not part of a parameter) is None.  Syntactically incorrect\n    headers will not necessarily be parsed as you would want.\n\n    This is easier to describe with some examples:\n\n    >>> split_header_words([\'foo="bar"; port="80,81"; discard, bar=baz\'])\n    [[(\'foo\', \'bar\'), (\'port\', \'80,81\'), (\'discard\', None)], [(\'bar\', \'baz\')]]\n    >>> split_header_words([\'text/html; charset="iso-8859-1"\'])\n    [[(\'text/html\', None), (\'charset\', \'iso-8859-1\')]]\n    >>> split_header_words([r\'Basic realm="\\"foo\\bar\\""\'])\n    [[(\'Basic\', None), (\'realm\', \'"foobar"\')]]\n\n    ', lineno=370, col_offset=-1), lineno=370, col_offset=-1), Assert(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=371, col_offset=15), [Name('header_values', Load(), lineno=371, col_offset=26), Name('basestring', Load(), lineno=371, col_offset=41)], [], None, None, lineno=371, col_offset=15), lineno=371, col_offset=11), None, lineno=371, col_offset=4), Assign([Name('result', Store(), lineno=372, col_offset=4)], List([], Load(), lineno=372, col_offset=13), lineno=372, col_offset=4), For(Name('text', Store(), lineno=373, col_offset=8), Name('header_values', Load(), lineno=373, col_offset=16), [Assign([Name('orig_text', Store(), lineno=374, col_offset=8)], Name('text', Load(), lineno=374, col_offset=20), lineno=374, col_offset=8), Assign([Name('pairs', Store(), lineno=375, col_offset=8)], List([], Load(), lineno=375, col_offset=16), lineno=375, col_offset=8), While(Name('text', Load(), lineno=376, col_offset=14), [Assign([Name('m', Store(), lineno=377, col_offset=12)], Call(Attribute(Name('HEADER_TOKEN_RE', Load(), lineno=377, col_offset=16), 'search', Load(), lineno=377, col_offset=16), [Name('text', Load(), lineno=377, col_offset=39)], [], None, None, lineno=377, col_offset=16), lineno=377, col_offset=12), If(Name('m', Load(), lineno=378, col_offset=15), [Assign([Name('text', Store(), lineno=379, col_offset=16)], Call(Name('unmatched', Load(), lineno=379, col_offset=23), [Name('m', Load(), lineno=379, col_offset=33)], [], None, None, lineno=379, col_offset=23), lineno=379, col_offset=16), Assign([Name('name', Store(), lineno=380, col_offset=16)], Call(Attribute(Name('m', Load(), lineno=380, col_offset=23), 'group', Load(), lineno=380, col_offset=23), [Num(1, lineno=380, col_offset=31)], [], None, None, lineno=380, col_offset=23), lineno=380, col_offset=16), Assign([Name('m', Store(), lineno=381, col_offset=16)], Call(Attribute(Name('HEADER_QUOTED_VALUE_RE', Load(), lineno=381, col_offset=20), 'search', Load(), lineno=381, col_offset=20), [Name('text', Load(), lineno=381, col_offset=50)], [], None, None, lineno=381, col_offset=20), lineno=381, col_offset=16), If(Name('m', Load(), lineno=382, col_offset=19), [Assign([Name('text', Store(), lineno=383, col_offset=20)], Call(Name('unmatched', Load(), lineno=383, col_offset=27), [Name('m', Load(), lineno=383, col_offset=37)], [], None, None, lineno=383, col_offset=27), lineno=383, col_offset=20), Assign([Name('value', Store(), lineno=384, col_offset=20)], Call(Attribute(Name('m', Load(), lineno=384, col_offset=28), 'group', Load(), lineno=384, col_offset=28), [Num(1, lineno=384, col_offset=36)], [], None, None, lineno=384, col_offset=28), lineno=384, col_offset=20), Assign([Name('value', Store(), lineno=385, col_offset=20)], Call(Attribute(Name('HEADER_ESCAPE_RE', Load(), lineno=385, col_offset=28), 'sub', Load(), lineno=385, col_offset=28), [Str('\\1', lineno=385, col_offset=49), Name('value', Load(), lineno=385, col_offset=56)], [], None, None, lineno=385, col_offset=28), lineno=385, col_offset=20)], [Assign([Name('m', Store(), lineno=387, col_offset=20)], Call(Attribute(Name('HEADER_VALUE_RE', Load(), lineno=387, col_offset=24), 'search', Load(), lineno=387, col_offset=24), [Name('text', Load(), lineno=387, col_offset=47)], [], None, None, lineno=387, col_offset=24), lineno=387, col_offset=20), If(Name('m', Load(), lineno=388, col_offset=23), [Assign([Name('text', Store(), lineno=389, col_offset=24)], Call(Name('unmatched', Load(), lineno=389, col_offset=31), [Name('m', Load(), lineno=389, col_offset=41)], [], None, None, lineno=389, col_offset=31), lineno=389, col_offset=24), Assign([Name('value', Store(), lineno=390, col_offset=24)], Call(Attribute(Name('m', Load(), lineno=390, col_offset=32), 'group', Load(), lineno=390, col_offset=32), [Num(1, lineno=390, col_offset=40)], [], None, None, lineno=390, col_offset=32), lineno=390, col_offset=24), Assign([Name('value', Store(), lineno=391, col_offset=24)], Call(Attribute(Name('value', Load(), lineno=391, col_offset=32), 'rstrip', Load(), lineno=391, col_offset=32), [], [], None, None, lineno=391, col_offset=32), lineno=391, col_offset=24)], [Assign([Name('value', Store(), lineno=394, col_offset=24)], Name('None', Load(), lineno=394, col_offset=32), lineno=394, col_offset=24)], lineno=388, col_offset=20)], lineno=382, col_offset=16), Expr(Call(Attribute(Name('pairs', Load(), lineno=395, col_offset=16), 'append', Load(), lineno=395, col_offset=16), [Tuple([Name('name', Load(), lineno=395, col_offset=30), Name('value', Load(), lineno=395, col_offset=36)], Load(), lineno=395, col_offset=30)], [], None, None, lineno=395, col_offset=16), lineno=395, col_offset=16)], [If(Call(Attribute(Call(Attribute(Name('text', Load(), lineno=396, col_offset=17), 'lstrip', Load(), lineno=396, col_offset=17), [], [], None, None, lineno=396, col_offset=17), 'startswith', Load(), lineno=396, col_offset=17), [Str(',', lineno=396, col_offset=42)], [], None, None, lineno=396, col_offset=17), [Assign([Name('text', Store(), lineno=398, col_offset=16)], Subscript(Call(Attribute(Name('text', Load(), lineno=398, col_offset=23), 'lstrip', Load(), lineno=398, col_offset=23), [], [], None, None, lineno=398, col_offset=23), Slice(Num(1, lineno=398, col_offset=37), None, None), Load(), lineno=398, col_offset=23), lineno=398, col_offset=16), If(Name('pairs', Load(), lineno=399, col_offset=19), [Expr(Call(Attribute(Name('result', Load(), lineno=399, col_offset=26), 'append', Load(), lineno=399, col_offset=26), [Name('pairs', Load(), lineno=399, col_offset=40)], [], None, None, lineno=399, col_offset=26), lineno=399, col_offset=26)], [], lineno=399, col_offset=16), Assign([Name('pairs', Store(), lineno=400, col_offset=16)], List([], Load(), lineno=400, col_offset=24), lineno=400, col_offset=16)], [Assign([Tuple([Name('non_junk', Store(), lineno=403, col_offset=16), Name('nr_junk_chars', Store(), lineno=403, col_offset=26)], Store(), lineno=403, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=403, col_offset=42), 'subn', Load(), lineno=403, col_offset=42), [Str('^[=\\s;]*', lineno=403, col_offset=50), Str('', lineno=403, col_offset=62), Name('text', Load(), lineno=403, col_offset=66)], [], None, None, lineno=403, col_offset=42), lineno=403, col_offset=16), Assert(Compare(Name('nr_junk_chars', Load(), lineno=404, col_offset=23), [Gt()], [Num(0, lineno=404, col_offset=39)], lineno=404, col_offset=23), BinOp(Str("split_header_words bug: '%s', '%s', %s", lineno=405, col_offset=20), Mod(), Tuple([Name('orig_text', Load(), lineno=406, col_offset=21), Name('text', Load(), lineno=406, col_offset=32), Name('pairs', Load(), lineno=406, col_offset=38)], Load(), lineno=406, col_offset=21), lineno=405, col_offset=20), lineno=404, col_offset=16), Assign([Name('text', Store(), lineno=407, col_offset=16)], Name('non_junk', Load(), lineno=407, col_offset=23), lineno=407, col_offset=16)], lineno=396, col_offset=17)], lineno=378, col_offset=12)], [], lineno=376, col_offset=8), If(Name('pairs', Load(), lineno=408, col_offset=11), [Expr(Call(Attribute(Name('result', Load(), lineno=408, col_offset=18), 'append', Load(), lineno=408, col_offset=18), [Name('pairs', Load(), lineno=408, col_offset=32)], [], None, None, lineno=408, col_offset=18), lineno=408, col_offset=18)], [], lineno=408, col_offset=8)], [], lineno=373, col_offset=4), Return(Name('result', Load(), lineno=409, col_offset=11), lineno=409, col_offset=4)], [], lineno=326, col_offset=0), Assign([Name('HEADER_JOIN_ESCAPE_RE', Store(), lineno=411, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=411, col_offset=24), 'compile', Load(), lineno=411, col_offset=24), [Str('([\\"\\\\])', lineno=411, col_offset=35)], [], None, None, lineno=411, col_offset=24), lineno=411, col_offset=0), FunctionDef('join_header_words', arguments([Name('lists', Param(), lineno=412, col_offset=22)], None, None, []), [Expr(Str('Do the inverse (almost) of the conversion done by split_header_words.\n\n    Takes a list of lists of (key, value) pairs and produces a single header\n    value.  Attribute values are quoted if needed.\n\n    >>> join_header_words([[("text/plain", None), ("charset", "iso-8859/1")]])\n    \'text/plain; charset="iso-8859/1"\'\n    >>> join_header_words([[("text/plain", None)], [("charset", "iso-8859/1")]])\n    \'text/plain, charset="iso-8859/1"\'\n\n    ', lineno=423, col_offset=-1), lineno=423, col_offset=-1), Assign([Name('headers', Store(), lineno=424, col_offset=4)], List([], Load(), lineno=424, col_offset=14), lineno=424, col_offset=4), For(Name('pairs', Store(), lineno=425, col_offset=8), Name('lists', Load(), lineno=425, col_offset=17), [Assign([Name('attr', Store(), lineno=426, col_offset=8)], List([], Load(), lineno=426, col_offset=15), lineno=426, col_offset=8), For(Tuple([Name('k', Store(), lineno=427, col_offset=12), Name('v', Store(), lineno=427, col_offset=15)], Store(), lineno=427, col_offset=12), Name('pairs', Load(), lineno=427, col_offset=20), [If(Compare(Name('v', Load(), lineno=428, col_offset=15), [IsNot()], [Name('None', Load(), lineno=428, col_offset=24)], lineno=428, col_offset=15), [If(UnaryOp(Not(), Call(Attribute(Name('re', Load(), lineno=429, col_offset=23), 'search', Load(), lineno=429, col_offset=23), [Str('^\\w+$', lineno=429, col_offset=33), Name('v', Load(), lineno=429, col_offset=43)], [], None, None, lineno=429, col_offset=23), lineno=429, col_offset=19), [Assign([Name('v', Store(), lineno=430, col_offset=20)], Call(Attribute(Name('HEADER_JOIN_ESCAPE_RE', Load(), lineno=430, col_offset=24), 'sub', Load(), lineno=430, col_offset=24), [Str('\\\\\\1', lineno=430, col_offset=50), Name('v', Load(), lineno=430, col_offset=59)], [], None, None, lineno=430, col_offset=24), lineno=430, col_offset=20), Assign([Name('v', Store(), lineno=431, col_offset=20)], BinOp(Str('"%s"', lineno=431, col_offset=24), Mod(), Name('v', Load(), lineno=431, col_offset=33), lineno=431, col_offset=24), lineno=431, col_offset=20)], [], lineno=429, col_offset=16), Assign([Name('k', Store(), lineno=432, col_offset=16)], BinOp(Str('%s=%s', lineno=432, col_offset=20), Mod(), Tuple([Name('k', Load(), lineno=432, col_offset=31), Name('v', Load(), lineno=432, col_offset=34)], Load(), lineno=432, col_offset=31), lineno=432, col_offset=20), lineno=432, col_offset=16)], [], lineno=428, col_offset=12), Expr(Call(Attribute(Name('attr', Load(), lineno=433, col_offset=12), 'append', Load(), lineno=433, col_offset=12), [Name('k', Load(), lineno=433, col_offset=24)], [], None, None, lineno=433, col_offset=12), lineno=433, col_offset=12)], [], lineno=427, col_offset=8), If(Name('attr', Load(), lineno=434, col_offset=11), [Expr(Call(Attribute(Name('headers', Load(), lineno=434, col_offset=17), 'append', Load(), lineno=434, col_offset=17), [Call(Attribute(Str('; ', lineno=434, col_offset=32), 'join', Load(), lineno=434, col_offset=32), [Name('attr', Load(), lineno=434, col_offset=42)], [], None, None, lineno=434, col_offset=32)], [], None, None, lineno=434, col_offset=17), lineno=434, col_offset=17)], [], lineno=434, col_offset=8)], [], lineno=425, col_offset=4), Return(Call(Attribute(Str(', ', lineno=435, col_offset=11), 'join', Load(), lineno=435, col_offset=11), [Name('headers', Load(), lineno=435, col_offset=21)], [], None, None, lineno=435, col_offset=11), lineno=435, col_offset=4)], [], lineno=412, col_offset=0), FunctionDef('_strip_quotes', arguments([Name('text', Param(), lineno=437, col_offset=18)], None, None, []), [If(Call(Attribute(Name('text', Load(), lineno=438, col_offset=7), 'startswith', Load(), lineno=438, col_offset=7), [Str('"', lineno=438, col_offset=23)], [], None, None, lineno=438, col_offset=7), [Assign([Name('text', Store(), lineno=439, col_offset=8)], Subscript(Name('text', Load(), lineno=439, col_offset=15), Slice(Num(1, lineno=439, col_offset=20), None, None), Load(), lineno=439, col_offset=15), lineno=439, col_offset=8)], [], lineno=438, col_offset=4), If(Call(Attribute(Name('text', Load(), lineno=440, col_offset=7), 'endswith', Load(), lineno=440, col_offset=7), [Str('"', lineno=440, col_offset=21)], [], None, None, lineno=440, col_offset=7), [Assign([Name('text', Store(), lineno=441, col_offset=8)], Subscript(Name('text', Load(), lineno=441, col_offset=15), Slice(None, Num(-1, lineno=441, col_offset=22), None), Load(), lineno=441, col_offset=15), lineno=441, col_offset=8)], [], lineno=440, col_offset=4), Return(Name('text', Load(), lineno=442, col_offset=11), lineno=442, col_offset=4)], [], lineno=437, col_offset=0), FunctionDef('parse_ns_headers', arguments([Name('ns_headers', Param(), lineno=444, col_offset=21)], None, None, []), [Expr(Str('Ad-hoc parser for Netscape protocol cookie-attributes.\n\n    The old Netscape cookie format for Set-Cookie can for instance contain\n    an unquoted "," in the expires field, so we have to use this ad-hoc\n    parser instead of split_header_words.\n\n    XXX This may not make the best possible effort to parse all the crap\n    that Netscape Cookie headers contain.  Ronald Tschalar\'s HTTPClient\n    parser is probably better, so could do worse than following that if\n    this ever gives any trouble.\n\n    Currently, this is also used for parsing RFC 2109 cookies.\n\n    ', lineno=458, col_offset=-1), lineno=458, col_offset=-1), Assign([Name('known_attrs', Store(), lineno=459, col_offset=4)], Tuple([Str('expires', lineno=459, col_offset=19), Str('domain', lineno=459, col_offset=30), Str('path', lineno=459, col_offset=40), Str('secure', lineno=459, col_offset=48), Str('version', lineno=461, col_offset=19), Str('port', lineno=461, col_offset=30), Str('max-age', lineno=461, col_offset=38)], Load(), lineno=459, col_offset=19), lineno=459, col_offset=4), Assign([Name('result', Store(), lineno=463, col_offset=4)], List([], Load(), lineno=463, col_offset=13), lineno=463, col_offset=4), For(Name('ns_header', Store(), lineno=464, col_offset=8), Name('ns_headers', Load(), lineno=464, col_offset=21), [Assign([Name('pairs', Store(), lineno=465, col_offset=8)], List([], Load(), lineno=465, col_offset=16), lineno=465, col_offset=8), Assign([Name('version_set', Store(), lineno=466, col_offset=8)], Name('False', Load(), lineno=466, col_offset=22), lineno=466, col_offset=8), For(Tuple([Name('ii', Store(), lineno=467, col_offset=12), Name('param', Store(), lineno=467, col_offset=16)], Store(), lineno=467, col_offset=12), Call(Name('enumerate', Load(), lineno=467, col_offset=25), [Call(Attribute(Name('re', Load(), lineno=467, col_offset=35), 'split', Load(), lineno=467, col_offset=35), [Str(';\\s*', lineno=467, col_offset=44), Name('ns_header', Load(), lineno=467, col_offset=53)], [], None, None, lineno=467, col_offset=35)], [], None, None, lineno=467, col_offset=25), [Assign([Name('param', Store(), lineno=468, col_offset=12)], Call(Attribute(Name('param', Load(), lineno=468, col_offset=20), 'rstrip', Load(), lineno=468, col_offset=20), [], [], None, None, lineno=468, col_offset=20), lineno=468, col_offset=12), If(Compare(Name('param', Load(), lineno=469, col_offset=15), [Eq()], [Str('', lineno=469, col_offset=24)], lineno=469, col_offset=15), [Continue( lineno=469, col_offset=28)], [], lineno=469, col_offset=12), If(Compare(Str('=', lineno=470, col_offset=15), [NotIn()], [Name('param', Load(), lineno=470, col_offset=26)], lineno=470, col_offset=15), [Assign([Tuple([Name('k', Store(), lineno=471, col_offset=16), Name('v', Store(), lineno=471, col_offset=19)], Store(), lineno=471, col_offset=16)], Tuple([Name('param', Load(), lineno=471, col_offset=23), Name('None', Load(), lineno=471, col_offset=30)], Load(), lineno=471, col_offset=23), lineno=471, col_offset=16)], [Assign([Tuple([Name('k', Store(), lineno=473, col_offset=16), Name('v', Store(), lineno=473, col_offset=19)], Store(), lineno=473, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=473, col_offset=23), 'split', Load(), lineno=473, col_offset=23), [Str('\\s*=\\s*', lineno=473, col_offset=32), Name('param', Load(), lineno=473, col_offset=44), Num(1, lineno=473, col_offset=51)], [], None, None, lineno=473, col_offset=23), lineno=473, col_offset=16), Assign([Name('k', Store(), lineno=474, col_offset=16)], Call(Attribute(Name('k', Load(), lineno=474, col_offset=20), 'lstrip', Load(), lineno=474, col_offset=20), [], [], None, None, lineno=474, col_offset=20), lineno=474, col_offset=16)], lineno=470, col_offset=12), If(Compare(Name('ii', Load(), lineno=475, col_offset=15), [NotEq()], [Num(0, lineno=475, col_offset=21)], lineno=475, col_offset=15), [Assign([Name('lc', Store(), lineno=476, col_offset=16)], Call(Attribute(Name('k', Load(), lineno=476, col_offset=21), 'lower', Load(), lineno=476, col_offset=21), [], [], None, None, lineno=476, col_offset=21), lineno=476, col_offset=16), If(Compare(Name('lc', Load(), lineno=477, col_offset=19), [In()], [Name('known_attrs', Load(), lineno=477, col_offset=25)], lineno=477, col_offset=19), [Assign([Name('k', Store(), lineno=478, col_offset=20)], Name('lc', Load(), lineno=478, col_offset=24), lineno=478, col_offset=20)], [], lineno=477, col_offset=16), If(Compare(Name('k', Load(), lineno=479, col_offset=19), [Eq()], [Str('version', lineno=479, col_offset=24)], lineno=479, col_offset=19), [Assign([Name('v', Store(), lineno=481, col_offset=20)], Call(Name('_strip_quotes', Load(), lineno=481, col_offset=24), [Name('v', Load(), lineno=481, col_offset=38)], [], None, None, lineno=481, col_offset=24), lineno=481, col_offset=20), Assign([Name('version_set', Store(), lineno=482, col_offset=20)], Name('True', Load(), lineno=482, col_offset=34), lineno=482, col_offset=20)], [], lineno=479, col_offset=16), If(Compare(Name('k', Load(), lineno=483, col_offset=19), [Eq()], [Str('expires', lineno=483, col_offset=24)], lineno=483, col_offset=19), [Assign([Name('v', Store(), lineno=485, col_offset=20)], Call(Name('http2time', Load(), lineno=485, col_offset=24), [Call(Name('_strip_quotes', Load(), lineno=485, col_offset=34), [Name('v', Load(), lineno=485, col_offset=48)], [], None, None, lineno=485, col_offset=34)], [], None, None, lineno=485, col_offset=24), lineno=485, col_offset=20)], [], lineno=483, col_offset=16)], [], lineno=475, col_offset=12), Expr(Call(Attribute(Name('pairs', Load(), lineno=486, col_offset=12), 'append', Load(), lineno=486, col_offset=12), [Tuple([Name('k', Load(), lineno=486, col_offset=26), Name('v', Load(), lineno=486, col_offset=29)], Load(), lineno=486, col_offset=26)], [], None, None, lineno=486, col_offset=12), lineno=486, col_offset=12)], [], lineno=467, col_offset=8), If(Name('pairs', Load(), lineno=488, col_offset=11), [If(UnaryOp(Not(), Name('version_set', Load(), lineno=489, col_offset=19), lineno=489, col_offset=15), [Expr(Call(Attribute(Name('pairs', Load(), lineno=490, col_offset=16), 'append', Load(), lineno=490, col_offset=16), [Tuple([Str('version', lineno=490, col_offset=30), Str('0', lineno=490, col_offset=41)], Load(), lineno=490, col_offset=30)], [], None, None, lineno=490, col_offset=16), lineno=490, col_offset=16)], [], lineno=489, col_offset=12), Expr(Call(Attribute(Name('result', Load(), lineno=491, col_offset=12), 'append', Load(), lineno=491, col_offset=12), [Name('pairs', Load(), lineno=491, col_offset=26)], [], None, None, lineno=491, col_offset=12), lineno=491, col_offset=12)], [], lineno=488, col_offset=8)], [], lineno=464, col_offset=4), Return(Name('result', Load(), lineno=493, col_offset=11), lineno=493, col_offset=4)], [], lineno=444, col_offset=0), Assign([Name('IPV4_RE', Store(), lineno=496, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=496, col_offset=10), 'compile', Load(), lineno=496, col_offset=10), [Str('\\.\\d+$', lineno=496, col_offset=21)], [], None, None, lineno=496, col_offset=10), lineno=496, col_offset=0), FunctionDef('is_HDN', arguments([Name('text', Param(), lineno=497, col_offset=11)], None, None, []), [Expr(Str('Return True if text is a host domain name.', lineno=498, col_offset=4), lineno=498, col_offset=4), If(Call(Attribute(Name('IPV4_RE', Load(), lineno=504, col_offset=7), 'search', Load(), lineno=504, col_offset=7), [Name('text', Load(), lineno=504, col_offset=22)], [], None, None, lineno=504, col_offset=7), [Return(Name('False', Load(), lineno=505, col_offset=15), lineno=505, col_offset=8)], [], lineno=504, col_offset=4), If(Compare(Name('text', Load(), lineno=506, col_offset=7), [Eq()], [Str('', lineno=506, col_offset=15)], lineno=506, col_offset=7), [Return(Name('False', Load(), lineno=507, col_offset=15), lineno=507, col_offset=8)], [], lineno=506, col_offset=4), If(BoolOp(Or(), [Compare(Subscript(Name('text', Load(), lineno=508, col_offset=7), Index(Num(0, lineno=508, col_offset=12)), Load(), lineno=508, col_offset=7), [Eq()], [Str('.', lineno=508, col_offset=18)], lineno=508, col_offset=7), Compare(Subscript(Name('text', Load(), lineno=508, col_offset=25), Index(Num(-1, lineno=508, col_offset=31)), Load(), lineno=508, col_offset=25), [Eq()], [Str('.', lineno=508, col_offset=37)], lineno=508, col_offset=25)], lineno=508, col_offset=7), [Return(Name('False', Load(), lineno=509, col_offset=15), lineno=509, col_offset=8)], [], lineno=508, col_offset=4), Return(Name('True', Load(), lineno=510, col_offset=11), lineno=510, col_offset=4)], [], lineno=497, col_offset=0), FunctionDef('domain_match', arguments([Name('A', Param(), lineno=512, col_offset=17), Name('B', Param(), lineno=512, col_offset=20)], None, None, []), [Expr(Str("Return True if domain A domain-matches domain B, according to RFC 2965.\n\n    A and B may be host domain names or IP addresses.\n\n    RFC 2965, section 1:\n\n    Host names can be specified either as an IP address or a HDN string.\n    Sometimes we compare one host name with another.  (Such comparisons SHALL\n    be case-insensitive.)  Host A's name domain-matches host B's if\n\n         *  their host name strings string-compare equal; or\n\n         * A is a HDN string and has the form NB, where N is a non-empty\n            name string, B has the form .B', and B' is a HDN string.  (So,\n            x.y.com domain-matches .Y.com but not Y.com.)\n\n    Note that domain-match is not a commutative operation: a.b.c.com\n    domain-matches .c.com, but not the reverse.\n\n    ", lineno=532, col_offset=-1), lineno=532, col_offset=-1), Assign([Name('A', Store(), lineno=535, col_offset=4)], Call(Attribute(Name('A', Load(), lineno=535, col_offset=8), 'lower', Load(), lineno=535, col_offset=8), [], [], None, None, lineno=535, col_offset=8), lineno=535, col_offset=4), Assign([Name('B', Store(), lineno=536, col_offset=4)], Call(Attribute(Name('B', Load(), lineno=536, col_offset=8), 'lower', Load(), lineno=536, col_offset=8), [], [], None, None, lineno=536, col_offset=8), lineno=536, col_offset=4), If(Compare(Name('A', Load(), lineno=537, col_offset=7), [Eq()], [Name('B', Load(), lineno=537, col_offset=12)], lineno=537, col_offset=7), [Return(Name('True', Load(), lineno=538, col_offset=15), lineno=538, col_offset=8)], [], lineno=537, col_offset=4), If(UnaryOp(Not(), Call(Name('is_HDN', Load(), lineno=539, col_offset=11), [Name('A', Load(), lineno=539, col_offset=18)], [], None, None, lineno=539, col_offset=11), lineno=539, col_offset=7), [Return(Name('False', Load(), lineno=540, col_offset=15), lineno=540, col_offset=8)], [], lineno=539, col_offset=4), Assign([Name('i', Store(), lineno=541, col_offset=4)], Call(Attribute(Name('A', Load(), lineno=541, col_offset=8), 'rfind', Load(), lineno=541, col_offset=8), [Name('B', Load(), lineno=541, col_offset=16)], [], None, None, lineno=541, col_offset=8), lineno=541, col_offset=4), If(BoolOp(Or(), [Compare(Name('i', Load(), lineno=542, col_offset=7), [Eq()], [Num(-1, lineno=542, col_offset=13)], lineno=542, col_offset=7), Compare(Name('i', Load(), lineno=542, col_offset=18), [Eq()], [Num(0, lineno=542, col_offset=23)], lineno=542, col_offset=18)], lineno=542, col_offset=7), [Return(Name('False', Load(), lineno=544, col_offset=15), lineno=544, col_offset=8)], [], lineno=542, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('B', Load(), lineno=545, col_offset=11), 'startswith', Load(), lineno=545, col_offset=11), [Str('.', lineno=545, col_offset=24)], [], None, None, lineno=545, col_offset=11), lineno=545, col_offset=7), [Return(Name('False', Load(), lineno=546, col_offset=15), lineno=546, col_offset=8)], [], lineno=545, col_offset=4), If(UnaryOp(Not(), Call(Name('is_HDN', Load(), lineno=547, col_offset=11), [Subscript(Name('B', Load(), lineno=547, col_offset=18), Slice(Num(1, lineno=547, col_offset=20), None, None), Load(), lineno=547, col_offset=18)], [], None, None, lineno=547, col_offset=11), lineno=547, col_offset=7), [Return(Name('False', Load(), lineno=548, col_offset=15), lineno=548, col_offset=8)], [], lineno=547, col_offset=4), Return(Name('True', Load(), lineno=549, col_offset=11), lineno=549, col_offset=4)], [], lineno=512, col_offset=0), FunctionDef('liberal_is_HDN', arguments([Name('text', Param(), lineno=551, col_offset=19)], None, None, []), [Expr(Str('Return True if text is a sort-of-like a host domain name.\n\n    For accepting/blocking domains.\n\n    ', lineno=556, col_offset=-1), lineno=556, col_offset=-1), If(Call(Attribute(Name('IPV4_RE', Load(), lineno=557, col_offset=7), 'search', Load(), lineno=557, col_offset=7), [Name('text', Load(), lineno=557, col_offset=22)], [], None, None, lineno=557, col_offset=7), [Return(Name('False', Load(), lineno=558, col_offset=15), lineno=558, col_offset=8)], [], lineno=557, col_offset=4), Return(Name('True', Load(), lineno=559, col_offset=11), lineno=559, col_offset=4)], [], lineno=551, col_offset=0), FunctionDef('user_domain_match', arguments([Name('A', Param(), lineno=561, col_offset=22), Name('B', Param(), lineno=561, col_offset=25)], None, None, []), [Expr(Str('For blocking/accepting domains.\n\n    A and B may be host domain names or IP addresses.\n\n    ', lineno=566, col_offset=-1), lineno=566, col_offset=-1), Assign([Name('A', Store(), lineno=567, col_offset=4)], Call(Attribute(Name('A', Load(), lineno=567, col_offset=8), 'lower', Load(), lineno=567, col_offset=8), [], [], None, None, lineno=567, col_offset=8), lineno=567, col_offset=4), Assign([Name('B', Store(), lineno=568, col_offset=4)], Call(Attribute(Name('B', Load(), lineno=568, col_offset=8), 'lower', Load(), lineno=568, col_offset=8), [], [], None, None, lineno=568, col_offset=8), lineno=568, col_offset=4), If(UnaryOp(Not(), BoolOp(And(), [Call(Name('liberal_is_HDN', Load(), lineno=569, col_offset=12), [Name('A', Load(), lineno=569, col_offset=27)], [], None, None, lineno=569, col_offset=12), Call(Name('liberal_is_HDN', Load(), lineno=569, col_offset=34), [Name('B', Load(), lineno=569, col_offset=49)], [], None, None, lineno=569, col_offset=34)], lineno=569, col_offset=12), lineno=569, col_offset=7), [If(Compare(Name('A', Load(), lineno=570, col_offset=11), [Eq()], [Name('B', Load(), lineno=570, col_offset=16)], lineno=570, col_offset=11), [Return(Name('True', Load(), lineno=572, col_offset=19), lineno=572, col_offset=12)], [], lineno=570, col_offset=8), Return(Name('False', Load(), lineno=573, col_offset=15), lineno=573, col_offset=8)], [], lineno=569, col_offset=4), Assign([Name('initial_dot', Store(), lineno=574, col_offset=4)], Call(Attribute(Name('B', Load(), lineno=574, col_offset=18), 'startswith', Load(), lineno=574, col_offset=18), [Str('.', lineno=574, col_offset=31)], [], None, None, lineno=574, col_offset=18), lineno=574, col_offset=4), If(BoolOp(And(), [Name('initial_dot', Load(), lineno=575, col_offset=7), Call(Attribute(Name('A', Load(), lineno=575, col_offset=23), 'endswith', Load(), lineno=575, col_offset=23), [Name('B', Load(), lineno=575, col_offset=34)], [], None, None, lineno=575, col_offset=23)], lineno=575, col_offset=7), [Return(Name('True', Load(), lineno=576, col_offset=15), lineno=576, col_offset=8)], [], lineno=575, col_offset=4), If(BoolOp(And(), [UnaryOp(Not(), Name('initial_dot', Load(), lineno=577, col_offset=11), lineno=577, col_offset=7), Compare(Name('A', Load(), lineno=577, col_offset=27), [Eq()], [Name('B', Load(), lineno=577, col_offset=32)], lineno=577, col_offset=27)], lineno=577, col_offset=7), [Return(Name('True', Load(), lineno=578, col_offset=15), lineno=578, col_offset=8)], [], lineno=577, col_offset=4), Return(Name('False', Load(), lineno=579, col_offset=11), lineno=579, col_offset=4)], [], lineno=561, col_offset=0), Assign([Name('cut_port_re', Store(), lineno=581, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=581, col_offset=14), 'compile', Load(), lineno=581, col_offset=14), [Str(':\\d+$', lineno=581, col_offset=25)], [], None, None, lineno=581, col_offset=14), lineno=581, col_offset=0), FunctionDef('request_host', arguments([Name('request', Param(), lineno=582, col_offset=17)], None, None, []), [Expr(Str('Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    ', lineno=588, col_offset=-1), lineno=588, col_offset=-1), Assign([Name('url', Store(), lineno=589, col_offset=4)], Call(Attribute(Name('request', Load(), lineno=589, col_offset=10), 'get_full_url', Load(), lineno=589, col_offset=10), [], [], None, None, lineno=589, col_offset=10), lineno=589, col_offset=4), Assign([Name('host', Store(), lineno=590, col_offset=4)], Subscript(Call(Attribute(Name('urlparse', Load(), lineno=590, col_offset=11), 'urlparse', Load(), lineno=590, col_offset=11), [Name('url', Load(), lineno=590, col_offset=29)], [], None, None, lineno=590, col_offset=11), Index(Num(1, lineno=590, col_offset=34)), Load(), lineno=590, col_offset=11), lineno=590, col_offset=4), If(Compare(Name('host', Load(), lineno=591, col_offset=7), [Eq()], [Str('', lineno=591, col_offset=15)], lineno=591, col_offset=7), [Assign([Name('host', Store(), lineno=592, col_offset=8)], Call(Attribute(Name('request', Load(), lineno=592, col_offset=15), 'get_header', Load(), lineno=592, col_offset=15), [Str('Host', lineno=592, col_offset=34), Str('', lineno=592, col_offset=42)], [], None, None, lineno=592, col_offset=15), lineno=592, col_offset=8)], [], lineno=591, col_offset=4), Assign([Name('host', Store(), lineno=595, col_offset=4)], Call(Attribute(Name('cut_port_re', Load(), lineno=595, col_offset=11), 'sub', Load(), lineno=595, col_offset=11), [Str('', lineno=595, col_offset=27), Name('host', Load(), lineno=595, col_offset=31), Num(1, lineno=595, col_offset=37)], [], None, None, lineno=595, col_offset=11), lineno=595, col_offset=4), Return(Call(Attribute(Name('host', Load(), lineno=596, col_offset=11), 'lower', Load(), lineno=596, col_offset=11), [], [], None, None, lineno=596, col_offset=11), lineno=596, col_offset=4)], [], lineno=582, col_offset=0), FunctionDef('eff_request_host', arguments([Name('request', Param(), lineno=598, col_offset=21)], None, None, []), [Expr(Str('Return a tuple (request-host, effective request-host name).\n\n    As defined by RFC 2965, except both are lowercased.\n\n    ', lineno=603, col_offset=-1), lineno=603, col_offset=-1), Assign([Name('erhn', Store(), lineno=604, col_offset=4), Name('req_host', Store(), lineno=604, col_offset=11)], Call(Name('request_host', Load(), lineno=604, col_offset=22), [Name('request', Load(), lineno=604, col_offset=35)], [], None, None, lineno=604, col_offset=22), lineno=604, col_offset=4), If(BoolOp(And(), [Compare(Call(Attribute(Name('req_host', Load(), lineno=605, col_offset=7), 'find', Load(), lineno=605, col_offset=7), [Str('.', lineno=605, col_offset=21)], [], None, None, lineno=605, col_offset=7), [Eq()], [Num(-1, lineno=605, col_offset=30)], lineno=605, col_offset=7), UnaryOp(Not(), Call(Attribute(Name('IPV4_RE', Load(), lineno=605, col_offset=40), 'search', Load(), lineno=605, col_offset=40), [Name('req_host', Load(), lineno=605, col_offset=55)], [], None, None, lineno=605, col_offset=40), lineno=605, col_offset=36)], lineno=605, col_offset=7), [Assign([Name('erhn', Store(), lineno=606, col_offset=8)], BinOp(Name('req_host', Load(), lineno=606, col_offset=15), Add(), Str('.local', lineno=606, col_offset=26), lineno=606, col_offset=15), lineno=606, col_offset=8)], [], lineno=605, col_offset=4), Return(Tuple([Name('req_host', Load(), lineno=607, col_offset=11), Name('erhn', Load(), lineno=607, col_offset=21)], Load(), lineno=607, col_offset=11), lineno=607, col_offset=4)], [], lineno=598, col_offset=0), FunctionDef('request_path', arguments([Name('request', Param(), lineno=609, col_offset=17)], None, None, []), [Expr(Str('Path component of request-URI, as defined by RFC 2965.', lineno=610, col_offset=4), lineno=610, col_offset=4), Assign([Name('url', Store(), lineno=611, col_offset=4)], Call(Attribute(Name('request', Load(), lineno=611, col_offset=10), 'get_full_url', Load(), lineno=611, col_offset=10), [], [], None, None, lineno=611, col_offset=10), lineno=611, col_offset=4), Assign([Name('parts', Store(), lineno=612, col_offset=4)], Call(Attribute(Name('urlparse', Load(), lineno=612, col_offset=12), 'urlsplit', Load(), lineno=612, col_offset=12), [Name('url', Load(), lineno=612, col_offset=30)], [], None, None, lineno=612, col_offset=12), lineno=612, col_offset=4), Assign([Name('path', Store(), lineno=613, col_offset=4)], Call(Name('escape_path', Load(), lineno=613, col_offset=11), [Attribute(Name('parts', Load(), lineno=613, col_offset=23), 'path', Load(), lineno=613, col_offset=23)], [], None, None, lineno=613, col_offset=11), lineno=613, col_offset=4), If(UnaryOp(Not(), Call(Attribute(Name('path', Load(), lineno=614, col_offset=11), 'startswith', Load(), lineno=614, col_offset=11), [Str('/', lineno=614, col_offset=27)], [], None, None, lineno=614, col_offset=11), lineno=614, col_offset=7), [Assign([Name('path', Store(), lineno=616, col_offset=8)], BinOp(Str('/', lineno=616, col_offset=15), Add(), Name('path', Load(), lineno=616, col_offset=21), lineno=616, col_offset=15), lineno=616, col_offset=8)], [], lineno=614, col_offset=4), Return(Name('path', Load(), lineno=617, col_offset=11), lineno=617, col_offset=4)], [], lineno=609, col_offset=0), FunctionDef('request_port', arguments([Name('request', Param(), lineno=619, col_offset=17)], None, None, []), [Assign([Name('host', Store(), lineno=620, col_offset=4)], Call(Attribute(Name('request', Load(), lineno=620, col_offset=11), 'get_host', Load(), lineno=620, col_offset=11), [], [], None, None, lineno=620, col_offset=11), lineno=620, col_offset=4), Assign([Name('i', Store(), lineno=621, col_offset=4)], Call(Attribute(Name('host', Load(), lineno=621, col_offset=8), 'find', Load(), lineno=621, col_offset=8), [Str(':', lineno=621, col_offset=18)], [], None, None, lineno=621, col_offset=8), lineno=621, col_offset=4), If(Compare(Name('i', Load(), lineno=622, col_offset=7), [GtE()], [Num(0, lineno=622, col_offset=12)], lineno=622, col_offset=7), [Assign([Name('port', Store(), lineno=623, col_offset=8)], Subscript(Name('host', Load(), lineno=623, col_offset=15), Slice(BinOp(Name('i', Load(), lineno=623, col_offset=20), Add(), Num(1, lineno=623, col_offset=22), lineno=623, col_offset=20), None, None), Load(), lineno=623, col_offset=15), lineno=623, col_offset=8), TryExcept([Expr(Call(Name('int', Load(), lineno=625, col_offset=12), [Name('port', Load(), lineno=625, col_offset=16)], [], None, None, lineno=625, col_offset=12), lineno=625, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=626, col_offset=15), None, [Expr(Call(Name('_debug', Load(), lineno=627, col_offset=12), [Str("nonnumeric port: '%s'", lineno=627, col_offset=19), Name('port', Load(), lineno=627, col_offset=44)], [], None, None, lineno=627, col_offset=12), lineno=627, col_offset=12), Return(Name('None', Load(), lineno=628, col_offset=19), lineno=628, col_offset=12)], lineno=626, col_offset=8)], [], lineno=624, col_offset=8)], [Assign([Name('port', Store(), lineno=630, col_offset=8)], Name('DEFAULT_HTTP_PORT', Load(), lineno=630, col_offset=15), lineno=630, col_offset=8)], lineno=622, col_offset=4), Return(Name('port', Load(), lineno=631, col_offset=11), lineno=631, col_offset=4)], [], lineno=619, col_offset=0), Assign([Name('HTTP_PATH_SAFE', Store(), lineno=635, col_offset=0)], Str("%/;:@&=+$,!~*'()", lineno=635, col_offset=17), lineno=635, col_offset=0), Assign([Name('ESCAPED_CHAR_RE', Store(), lineno=636, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=636, col_offset=18), 'compile', Load(), lineno=636, col_offset=18), [Str('%([0-9a-fA-F][0-9a-fA-F])', lineno=636, col_offset=29)], [], None, None, lineno=636, col_offset=18), lineno=636, col_offset=0), FunctionDef('uppercase_escaped_char', arguments([Name('match', Param(), lineno=637, col_offset=27)], None, None, []), [Return(BinOp(Str('%%%s', lineno=638, col_offset=11), Mod(), Call(Attribute(Call(Attribute(Name('match', Load(), lineno=638, col_offset=20), 'group', Load(), lineno=638, col_offset=20), [Num(1, lineno=638, col_offset=32)], [], None, None, lineno=638, col_offset=20), 'upper', Load(), lineno=638, col_offset=20), [], [], None, None, lineno=638, col_offset=20), lineno=638, col_offset=11), lineno=638, col_offset=4)], [], lineno=637, col_offset=0), FunctionDef('escape_path', arguments([Name('path', Param(), lineno=639, col_offset=16)], None, None, []), [Expr(Str('Escape any invalid characters in HTTP URL, and uppercase all escapes.', lineno=640, col_offset=4), lineno=640, col_offset=4), If(Call(Name('isinstance', Load(), lineno=649, col_offset=7), [Name('path', Load(), lineno=649, col_offset=18), Name('unicode', Load(), lineno=649, col_offset=24)], [], None, None, lineno=649, col_offset=7), [Assign([Name('path', Store(), lineno=650, col_offset=8)], Call(Attribute(Name('path', Load(), lineno=650, col_offset=15), 'encode', Load(), lineno=650, col_offset=15), [Str('utf-8', lineno=650, col_offset=27)], [], None, None, lineno=650, col_offset=15), lineno=650, col_offset=8)], [], lineno=649, col_offset=4), Assign([Name('path', Store(), lineno=651, col_offset=4)], Call(Attribute(Name('urllib', Load(), lineno=651, col_offset=11), 'quote', Load(), lineno=651, col_offset=11), [Name('path', Load(), lineno=651, col_offset=24), Name('HTTP_PATH_SAFE', Load(), lineno=651, col_offset=30)], [], None, None, lineno=651, col_offset=11), lineno=651, col_offset=4), Assign([Name('path', Store(), lineno=652, col_offset=4)], Call(Attribute(Name('ESCAPED_CHAR_RE', Load(), lineno=652, col_offset=11), 'sub', Load(), lineno=652, col_offset=11), [Name('uppercase_escaped_char', Load(), lineno=652, col_offset=31), Name('path', Load(), lineno=652, col_offset=55)], [], None, None, lineno=652, col_offset=11), lineno=652, col_offset=4), Return(Name('path', Load(), lineno=653, col_offset=11), lineno=653, col_offset=4)], [], lineno=639, col_offset=0), FunctionDef('reach', arguments([Name('h', Param(), lineno=655, col_offset=10)], None, None, []), [Expr(Str('Return reach of host h, as defined by RFC 2965, section 1.\n\n    The reach R of a host name H is defined as follows:\n\n       *  If\n\n          -  H is the host domain name of a host; and,\n\n          -  H has the form A.B; and\n\n          -  A has no embedded (that is, interior) dots; and\n\n          -  B has at least one embedded dot, or B is the string "local".\n             then the reach of H is .B.\n\n       *  Otherwise, the reach of H is H.\n\n    >>> reach("www.acme.com")\n    \'.acme.com\'\n    >>> reach("acme.com")\n    \'acme.com\'\n    >>> reach("acme.local")\n    \'.local\'\n\n    ', lineno=680, col_offset=-1), lineno=680, col_offset=-1), Assign([Name('i', Store(), lineno=681, col_offset=4)], Call(Attribute(Name('h', Load(), lineno=681, col_offset=8), 'find', Load(), lineno=681, col_offset=8), [Str('.', lineno=681, col_offset=15)], [], None, None, lineno=681, col_offset=8), lineno=681, col_offset=4), If(Compare(Name('i', Load(), lineno=682, col_offset=7), [GtE()], [Num(0, lineno=682, col_offset=12)], lineno=682, col_offset=7), [Assign([Name('b', Store(), lineno=684, col_offset=8)], Subscript(Name('h', Load(), lineno=684, col_offset=12), Slice(BinOp(Name('i', Load(), lineno=684, col_offset=14), Add(), Num(1, lineno=684, col_offset=16), lineno=684, col_offset=14), None, None), Load(), lineno=684, col_offset=12), lineno=684, col_offset=8), Assign([Name('i', Store(), lineno=685, col_offset=8)], Call(Attribute(Name('b', Load(), lineno=685, col_offset=12), 'find', Load(), lineno=685, col_offset=12), [Str('.', lineno=685, col_offset=19)], [], None, None, lineno=685, col_offset=12), lineno=685, col_offset=8), If(BoolOp(And(), [Call(Name('is_HDN', Load(), lineno=686, col_offset=11), [Name('h', Load(), lineno=686, col_offset=18)], [], None, None, lineno=686, col_offset=11), BoolOp(Or(), [Compare(Name('i', Load(), lineno=686, col_offset=26), [GtE()], [Num(0, lineno=686, col_offset=31)], lineno=686, col_offset=26), Compare(Name('b', Load(), lineno=686, col_offset=36), [Eq()], [Str('local', lineno=686, col_offset=41)], lineno=686, col_offset=36)], lineno=686, col_offset=26)], lineno=686, col_offset=11), [Return(BinOp(Str('.', lineno=687, col_offset=19), Add(), Name('b', Load(), lineno=687, col_offset=23), lineno=687, col_offset=19), lineno=687, col_offset=12)], [], lineno=686, col_offset=8)], [], lineno=682, col_offset=4), Return(Name('h', Load(), lineno=688, col_offset=11), lineno=688, col_offset=4)], [], lineno=655, col_offset=0), FunctionDef('is_third_party', arguments([Name('request', Param(), lineno=690, col_offset=19)], None, None, []), [Expr(Str('\n\n    RFC 2965, section 3.3.6:\n\n        An unverifiable transaction is to a third-party host if its request-\n        host U does not domain-match the reach R of the request-host O in the\n        origin transaction.\n\n    ', lineno=699, col_offset=-1), lineno=699, col_offset=-1), Assign([Name('req_host', Store(), lineno=700, col_offset=4)], Call(Name('request_host', Load(), lineno=700, col_offset=15), [Name('request', Load(), lineno=700, col_offset=28)], [], None, None, lineno=700, col_offset=15), lineno=700, col_offset=4), If(UnaryOp(Not(), Call(Name('domain_match', Load(), lineno=701, col_offset=11), [Name('req_host', Load(), lineno=701, col_offset=24), Call(Name('reach', Load(), lineno=701, col_offset=34), [Call(Attribute(Name('request', Load(), lineno=701, col_offset=40), 'get_origin_req_host', Load(), lineno=701, col_offset=40), [], [], None, None, lineno=701, col_offset=40)], [], None, None, lineno=701, col_offset=34)], [], None, None, lineno=701, col_offset=11), lineno=701, col_offset=7), [Return(Name('True', Load(), lineno=702, col_offset=15), lineno=702, col_offset=8)], [Return(Name('False', Load(), lineno=704, col_offset=15), lineno=704, col_offset=8)], lineno=701, col_offset=4)], [], lineno=690, col_offset=0), ClassDef('Cookie', [], [Expr(Str('HTTP Cookie.\n\n    This class represents both Netscape and RFC 2965 cookies.\n\n    This is deliberately a very simple class.  It just holds attributes.  It\'s\n    possible to construct Cookie instances that don\'t comply with the cookie\n    standards.  CookieJar.make_cookies is the factory function for Cookie\n    objects -- it deals with cookie parsing, supplying defaults, and\n    normalising to the representation used in this class.  CookiePolicy is\n    responsible for checking them to see whether they should be accepted from\n    and returned to the server.\n\n    Note that the port may be present in the headers, but unspecified ("Port"\n    rather than"Port=80", for example); if this is the case, port is None.\n\n    ', lineno=723, col_offset=-1), lineno=723, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=725, col_offset=17), Name('version', Param(), lineno=725, col_offset=23), Name('name', Param(), lineno=725, col_offset=32), Name('value', Param(), lineno=725, col_offset=38), Name('port', Param(), lineno=726, col_offset=17), Name('port_specified', Param(), lineno=726, col_offset=23), Name('domain', Param(), lineno=727, col_offset=17), Name('domain_specified', Param(), lineno=727, col_offset=25), Name('domain_initial_dot', Param(), lineno=727, col_offset=43), Name('path', Param(), lineno=728, col_offset=17), Name('path_specified', Param(), lineno=728, col_offset=23), Name('secure', Param(), lineno=729, col_offset=17), Name('expires', Param(), lineno=730, col_offset=17), Name('discard', Param(), lineno=731, col_offset=17), Name('comment', Param(), lineno=732, col_offset=17), Name('comment_url', Param(), lineno=733, col_offset=17), Name('rest', Param(), lineno=734, col_offset=17), Name('rfc2109', Param(), lineno=735, col_offset=17)], None, None, [Name('False', Load(), lineno=735, col_offset=25)]), [If(Compare(Name('version', Load(), lineno=738, col_offset=11), [IsNot()], [Name('None', Load(), lineno=738, col_offset=26)], lineno=738, col_offset=11), [Assign([Name('version', Store(), lineno=738, col_offset=32)], Call(Name('int', Load(), lineno=738, col_offset=42), [Name('version', Load(), lineno=738, col_offset=46)], [], None, None, lineno=738, col_offset=42), lineno=738, col_offset=32)], [], lineno=738, col_offset=8), If(Compare(Name('expires', Load(), lineno=739, col_offset=11), [IsNot()], [Name('None', Load(), lineno=739, col_offset=26)], lineno=739, col_offset=11), [Assign([Name('expires', Store(), lineno=739, col_offset=32)], Call(Name('int', Load(), lineno=739, col_offset=42), [Name('expires', Load(), lineno=739, col_offset=46)], [], None, None, lineno=739, col_offset=42), lineno=739, col_offset=32)], [], lineno=739, col_offset=8), If(BoolOp(And(), [Compare(Name('port', Load(), lineno=740, col_offset=11), [Is()], [Name('None', Load(), lineno=740, col_offset=19)], lineno=740, col_offset=11), Compare(Name('port_specified', Load(), lineno=740, col_offset=28), [Is()], [Name('True', Load(), lineno=740, col_offset=46)], lineno=740, col_offset=28)], lineno=740, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=741, col_offset=18), [Str('if port is None, port_specified must be false', lineno=741, col_offset=29)], [], None, None, lineno=741, col_offset=18), None, None, lineno=741, col_offset=12)], [], lineno=740, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=743, col_offset=8), 'version', Store(), lineno=743, col_offset=8)], Name('version', Load(), lineno=743, col_offset=23), lineno=743, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=744, col_offset=8), 'name', Store(), lineno=744, col_offset=8)], Name('name', Load(), lineno=744, col_offset=20), lineno=744, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=745, col_offset=8), 'value', Store(), lineno=745, col_offset=8)], Name('value', Load(), lineno=745, col_offset=21), lineno=745, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=746, col_offset=8), 'port', Store(), lineno=746, col_offset=8)], Name('port', Load(), lineno=746, col_offset=20), lineno=746, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=747, col_offset=8), 'port_specified', Store(), lineno=747, col_offset=8)], Name('port_specified', Load(), lineno=747, col_offset=30), lineno=747, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=749, col_offset=8), 'domain', Store(), lineno=749, col_offset=8)], Call(Attribute(Name('domain', Load(), lineno=749, col_offset=22), 'lower', Load(), lineno=749, col_offset=22), [], [], None, None, lineno=749, col_offset=22), lineno=749, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=750, col_offset=8), 'domain_specified', Store(), lineno=750, col_offset=8)], Name('domain_specified', Load(), lineno=750, col_offset=32), lineno=750, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=755, col_offset=8), 'domain_initial_dot', Store(), lineno=755, col_offset=8)], Name('domain_initial_dot', Load(), lineno=755, col_offset=34), lineno=755, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=756, col_offset=8), 'path', Store(), lineno=756, col_offset=8)], Name('path', Load(), lineno=756, col_offset=20), lineno=756, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=757, col_offset=8), 'path_specified', Store(), lineno=757, col_offset=8)], Name('path_specified', Load(), lineno=757, col_offset=30), lineno=757, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=758, col_offset=8), 'secure', Store(), lineno=758, col_offset=8)], Name('secure', Load(), lineno=758, col_offset=22), lineno=758, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=759, col_offset=8), 'expires', Store(), lineno=759, col_offset=8)], Name('expires', Load(), lineno=759, col_offset=23), lineno=759, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=760, col_offset=8), 'discard', Store(), lineno=760, col_offset=8)], Name('discard', Load(), lineno=760, col_offset=23), lineno=760, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=761, col_offset=8), 'comment', Store(), lineno=761, col_offset=8)], Name('comment', Load(), lineno=761, col_offset=23), lineno=761, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=762, col_offset=8), 'comment_url', Store(), lineno=762, col_offset=8)], Name('comment_url', Load(), lineno=762, col_offset=27), lineno=762, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=763, col_offset=8), 'rfc2109', Store(), lineno=763, col_offset=8)], Name('rfc2109', Load(), lineno=763, col_offset=23), lineno=763, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=765, col_offset=8), '_rest', Store(), lineno=765, col_offset=8)], Call(Attribute(Name('copy', Load(), lineno=765, col_offset=21), 'copy', Load(), lineno=765, col_offset=21), [Name('rest', Load(), lineno=765, col_offset=31)], [], None, None, lineno=765, col_offset=21), lineno=765, col_offset=8)], [], lineno=725, col_offset=4), FunctionDef('has_nonstandard_attr', arguments([Name('self', Param(), lineno=767, col_offset=29), Name('name', Param(), lineno=767, col_offset=35)], None, None, []), [Return(Compare(Name('name', Load(), lineno=768, col_offset=15), [In()], [Attribute(Name('self', Load(), lineno=768, col_offset=23), '_rest', Load(), lineno=768, col_offset=23)], lineno=768, col_offset=15), lineno=768, col_offset=8)], [], lineno=767, col_offset=4), FunctionDef('get_nonstandard_attr', arguments([Name('self', Param(), lineno=769, col_offset=29), Name('name', Param(), lineno=769, col_offset=35), Name('default', Param(), lineno=769, col_offset=41)], None, None, [Name('None', Load(), lineno=769, col_offset=49)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=770, col_offset=15), '_rest', Load(), lineno=770, col_offset=15), 'get', Load(), lineno=770, col_offset=15), [Name('name', Load(), lineno=770, col_offset=30), Name('default', Load(), lineno=770, col_offset=36)], [], None, None, lineno=770, col_offset=15), lineno=770, col_offset=8)], [], lineno=769, col_offset=4), FunctionDef('set_nonstandard_attr', arguments([Name('self', Param(), lineno=771, col_offset=29), Name('name', Param(), lineno=771, col_offset=35), Name('value', Param(), lineno=771, col_offset=41)], None, None, []), [Assign([Subscript(Attribute(Name('self', Load(), lineno=772, col_offset=8), '_rest', Load(), lineno=772, col_offset=8), Index(Name('name', Load(), lineno=772, col_offset=19)), Store(), lineno=772, col_offset=8)], Name('value', Load(), lineno=772, col_offset=27), lineno=772, col_offset=8)], [], lineno=771, col_offset=4), FunctionDef('is_expired', arguments([Name('self', Param(), lineno=774, col_offset=19), Name('now', Param(), lineno=774, col_offset=25)], None, None, [Name('None', Load(), lineno=774, col_offset=29)]), [If(Compare(Name('now', Load(), lineno=775, col_offset=11), [Is()], [Name('None', Load(), lineno=775, col_offset=18)], lineno=775, col_offset=11), [Assign([Name('now', Store(), lineno=775, col_offset=24)], Call(Attribute(Name('time', Load(), lineno=775, col_offset=30), 'time', Load(), lineno=775, col_offset=30), [], [], None, None, lineno=775, col_offset=30), lineno=775, col_offset=24)], [], lineno=775, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=776, col_offset=12), 'expires', Load(), lineno=776, col_offset=12), [IsNot()], [Name('None', Load(), lineno=776, col_offset=32)], lineno=776, col_offset=12), Compare(Attribute(Name('self', Load(), lineno=776, col_offset=43), 'expires', Load(), lineno=776, col_offset=43), [LtE()], [Name('now', Load(), lineno=776, col_offset=59)], lineno=776, col_offset=43)], lineno=776, col_offset=11), [Return(Name('True', Load(), lineno=777, col_offset=19), lineno=777, col_offset=12)], [], lineno=776, col_offset=8), Return(Name('False', Load(), lineno=778, col_offset=15), lineno=778, col_offset=8)], [], lineno=774, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=780, col_offset=16)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=781, col_offset=11), 'port', Load(), lineno=781, col_offset=11), [Is()], [Name('None', Load(), lineno=781, col_offset=24)], lineno=781, col_offset=11), [Assign([Name('p', Store(), lineno=781, col_offset=30)], Str('', lineno=781, col_offset=34), lineno=781, col_offset=30)], [Assign([Name('p', Store(), lineno=782, col_offset=14)], BinOp(Str(':', lineno=782, col_offset=18), Add(), Attribute(Name('self', Load(), lineno=782, col_offset=22), 'port', Load(), lineno=782, col_offset=22), lineno=782, col_offset=18), lineno=782, col_offset=14)], lineno=781, col_offset=8), Assign([Name('limit', Store(), lineno=783, col_offset=8)], BinOp(BinOp(Attribute(Name('self', Load(), lineno=783, col_offset=16), 'domain', Load(), lineno=783, col_offset=16), Add(), Name('p', Load(), lineno=783, col_offset=30), lineno=783, col_offset=16), Add(), Attribute(Name('self', Load(), lineno=783, col_offset=34), 'path', Load(), lineno=783, col_offset=34), lineno=783, col_offset=32), lineno=783, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=784, col_offset=11), 'value', Load(), lineno=784, col_offset=11), [IsNot()], [Name('None', Load(), lineno=784, col_offset=29)], lineno=784, col_offset=11), [Assign([Name('namevalue', Store(), lineno=785, col_offset=12)], BinOp(Str('%s=%s', lineno=785, col_offset=24), Mod(), Tuple([Attribute(Name('self', Load(), lineno=785, col_offset=35), 'name', Load(), lineno=785, col_offset=35), Attribute(Name('self', Load(), lineno=785, col_offset=46), 'value', Load(), lineno=785, col_offset=46)], Load(), lineno=785, col_offset=35), lineno=785, col_offset=24), lineno=785, col_offset=12)], [Assign([Name('namevalue', Store(), lineno=787, col_offset=12)], Attribute(Name('self', Load(), lineno=787, col_offset=24), 'name', Load(), lineno=787, col_offset=24), lineno=787, col_offset=12)], lineno=784, col_offset=8), Return(BinOp(Str('<Cookie %s for %s>', lineno=788, col_offset=15), Mod(), Tuple([Name('namevalue', Load(), lineno=788, col_offset=39), Name('limit', Load(), lineno=788, col_offset=50)], Load(), lineno=788, col_offset=39), lineno=788, col_offset=15), lineno=788, col_offset=8)], [], lineno=780, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=790, col_offset=17)], None, None, []), [Assign([Name('args', Store(), lineno=791, col_offset=8)], List([], Load(), lineno=791, col_offset=15), lineno=791, col_offset=8), For(Name('name', Store(), lineno=792, col_offset=12), Tuple([Str('version', lineno=792, col_offset=21), Str('name', lineno=792, col_offset=32), Str('value', lineno=792, col_offset=40), Str('port', lineno=793, col_offset=21), Str('port_specified', lineno=793, col_offset=29), Str('domain', lineno=794, col_offset=21), Str('domain_specified', lineno=794, col_offset=31), Str('domain_initial_dot', lineno=794, col_offset=51), Str('path', lineno=795, col_offset=21), Str('path_specified', lineno=795, col_offset=29), Str('secure', lineno=796, col_offset=21), Str('expires', lineno=796, col_offset=31), Str('discard', lineno=796, col_offset=42), Str('comment', lineno=796, col_offset=53), Str('comment_url', lineno=796, col_offset=64)], Load(), lineno=792, col_offset=21), [Assign([Name('attr', Store(), lineno=798, col_offset=12)], Call(Name('getattr', Load(), lineno=798, col_offset=19), [Name('self', Load(), lineno=798, col_offset=27), Name('name', Load(), lineno=798, col_offset=33)], [], None, None, lineno=798, col_offset=19), lineno=798, col_offset=12), Expr(Call(Attribute(Name('args', Load(), lineno=799, col_offset=12), 'append', Load(), lineno=799, col_offset=12), [BinOp(Str('%s=%s', lineno=799, col_offset=24), Mod(), Tuple([Name('name', Load(), lineno=799, col_offset=35), Call(Name('repr', Load(), lineno=799, col_offset=41), [Name('attr', Load(), lineno=799, col_offset=46)], [], None, None, lineno=799, col_offset=41)], Load(), lineno=799, col_offset=35), lineno=799, col_offset=24)], [], None, None, lineno=799, col_offset=12), lineno=799, col_offset=12)], [], lineno=792, col_offset=8), Expr(Call(Attribute(Name('args', Load(), lineno=800, col_offset=8), 'append', Load(), lineno=800, col_offset=8), [BinOp(Str('rest=%s', lineno=800, col_offset=20), Mod(), Call(Name('repr', Load(), lineno=800, col_offset=32), [Attribute(Name('self', Load(), lineno=800, col_offset=37), '_rest', Load(), lineno=800, col_offset=37)], [], None, None, lineno=800, col_offset=32), lineno=800, col_offset=20)], [], None, None, lineno=800, col_offset=8), lineno=800, col_offset=8), Expr(Call(Attribute(Name('args', Load(), lineno=801, col_offset=8), 'append', Load(), lineno=801, col_offset=8), [BinOp(Str('rfc2109=%s', lineno=801, col_offset=20), Mod(), Call(Name('repr', Load(), lineno=801, col_offset=35), [Attribute(Name('self', Load(), lineno=801, col_offset=40), 'rfc2109', Load(), lineno=801, col_offset=40)], [], None, None, lineno=801, col_offset=35), lineno=801, col_offset=20)], [], None, None, lineno=801, col_offset=8), lineno=801, col_offset=8), Return(BinOp(Str('Cookie(%s)', lineno=802, col_offset=15), Mod(), Call(Attribute(Str(', ', lineno=802, col_offset=30), 'join', Load(), lineno=802, col_offset=30), [Name('args', Load(), lineno=802, col_offset=40)], [], None, None, lineno=802, col_offset=30), lineno=802, col_offset=15), lineno=802, col_offset=8)], [], lineno=790, col_offset=4)], [], lineno=707, col_offset=0), ClassDef('CookiePolicy', [], [Expr(Str('Defines which cookies get accepted from and returned to server.\n\n    May also modify cookies, though this is probably a bad idea.\n\n    The subclass DefaultCookiePolicy defines the standard rules for Netscape\n    and RFC 2965 cookies -- override that if you want a customised policy.\n\n    ', lineno=813, col_offset=-1), lineno=813, col_offset=-1), FunctionDef('set_ok', arguments([Name('self', Param(), lineno=814, col_offset=15), Name('cookie', Param(), lineno=814, col_offset=21), Name('request', Param(), lineno=814, col_offset=29)], None, None, []), [Expr(Str('Return true if (and only if) cookie should be accepted from server.\n\n        Currently, pre-expired cookies never get this far -- the CookieJar\n        class deletes such cookies itself.\n\n        ', lineno=820, col_offset=-1), lineno=820, col_offset=-1), Raise(Call(Name('NotImplementedError', Load(), lineno=821, col_offset=14), [], [], None, None, lineno=821, col_offset=14), None, None, lineno=821, col_offset=8)], [], lineno=814, col_offset=4), FunctionDef('return_ok', arguments([Name('self', Param(), lineno=823, col_offset=18), Name('cookie', Param(), lineno=823, col_offset=24), Name('request', Param(), lineno=823, col_offset=32)], None, None, []), [Expr(Str('Return true if (and only if) cookie should be returned to server.', lineno=824, col_offset=8), lineno=824, col_offset=8), Raise(Call(Name('NotImplementedError', Load(), lineno=825, col_offset=14), [], [], None, None, lineno=825, col_offset=14), None, None, lineno=825, col_offset=8)], [], lineno=823, col_offset=4), FunctionDef('domain_return_ok', arguments([Name('self', Param(), lineno=827, col_offset=25), Name('domain', Param(), lineno=827, col_offset=31), Name('request', Param(), lineno=827, col_offset=39)], None, None, []), [Expr(Str('Return false if cookies should not be returned, given cookie domain.\n        ', lineno=829, col_offset=-1), lineno=829, col_offset=-1), Return(Name('True', Load(), lineno=830, col_offset=15), lineno=830, col_offset=8)], [], lineno=827, col_offset=4), FunctionDef('path_return_ok', arguments([Name('self', Param(), lineno=832, col_offset=23), Name('path', Param(), lineno=832, col_offset=29), Name('request', Param(), lineno=832, col_offset=35)], None, None, []), [Expr(Str('Return false if cookies should not be returned, given cookie path.\n        ', lineno=834, col_offset=-1), lineno=834, col_offset=-1), Return(Name('True', Load(), lineno=835, col_offset=15), lineno=835, col_offset=8)], [], lineno=832, col_offset=4)], [], lineno=805, col_offset=0), ClassDef('DefaultCookiePolicy', [Name('CookiePolicy', Load(), lineno=838, col_offset=26)], [Expr(Str('Implements the standard rules for accepting and returning cookies.', lineno=839, col_offset=4), lineno=839, col_offset=4), Assign([Name('DomainStrictNoDots', Store(), lineno=841, col_offset=4)], Num(1, lineno=841, col_offset=25), lineno=841, col_offset=4), Assign([Name('DomainStrictNonDomain', Store(), lineno=842, col_offset=4)], Num(2, lineno=842, col_offset=28), lineno=842, col_offset=4), Assign([Name('DomainRFC2965Match', Store(), lineno=843, col_offset=4)], Num(4, lineno=843, col_offset=25), lineno=843, col_offset=4), Assign([Name('DomainLiberal', Store(), lineno=845, col_offset=4)], Num(0, lineno=845, col_offset=20), lineno=845, col_offset=4), Assign([Name('DomainStrict', Store(), lineno=846, col_offset=4)], BinOp(Name('DomainStrictNoDots', Load(), lineno=846, col_offset=19), BitOr(), Name('DomainStrictNonDomain', Load(), lineno=846, col_offset=38), lineno=846, col_offset=19), lineno=846, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=848, col_offset=17), Name('blocked_domains', Param(), lineno=849, col_offset=17), Name('allowed_domains', Param(), lineno=849, col_offset=39), Name('netscape', Param(), lineno=850, col_offset=17), Name('rfc2965', Param(), lineno=850, col_offset=32), Name('rfc2109_as_netscape', Param(), lineno=851, col_offset=17), Name('hide_cookie2', Param(), lineno=852, col_offset=17), Name('strict_domain', Param(), lineno=853, col_offset=17), Name('strict_rfc2965_unverifiable', Param(), lineno=854, col_offset=17), Name('strict_ns_unverifiable', Param(), lineno=855, col_offset=17), Name('strict_ns_domain', Param(), lineno=856, col_offset=17), Name('strict_ns_set_initial_dollar', Param(), lineno=857, col_offset=17), Name('strict_ns_set_path', Param(), lineno=858, col_offset=17)], None, None, [Name('None', Load(), lineno=849, col_offset=33), Name('None', Load(), lineno=849, col_offset=55), Name('True', Load(), lineno=850, col_offset=26), Name('False', Load(), lineno=850, col_offset=40), Name('None', Load(), lineno=851, col_offset=37), Name('False', Load(), lineno=852, col_offset=30), Name('False', Load(), lineno=853, col_offset=31), Name('True', Load(), lineno=854, col_offset=45), Name('False', Load(), lineno=855, col_offset=40), Name('DomainLiberal', Load(), lineno=856, col_offset=34), Name('False', Load(), lineno=857, col_offset=46), Name('False', Load(), lineno=858, col_offset=36)]), [Expr(Str('Constructor arguments should be passed as keyword arguments only.', lineno=860, col_offset=8), lineno=860, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=861, col_offset=8), 'netscape', Store(), lineno=861, col_offset=8)], Name('netscape', Load(), lineno=861, col_offset=24), lineno=861, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=862, col_offset=8), 'rfc2965', Store(), lineno=862, col_offset=8)], Name('rfc2965', Load(), lineno=862, col_offset=23), lineno=862, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=863, col_offset=8), 'rfc2109_as_netscape', Store(), lineno=863, col_offset=8)], Name('rfc2109_as_netscape', Load(), lineno=863, col_offset=35), lineno=863, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=864, col_offset=8), 'hide_cookie2', Store(), lineno=864, col_offset=8)], Name('hide_cookie2', Load(), lineno=864, col_offset=28), lineno=864, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=865, col_offset=8), 'strict_domain', Store(), lineno=865, col_offset=8)], Name('strict_domain', Load(), lineno=865, col_offset=29), lineno=865, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=866, col_offset=8), 'strict_rfc2965_unverifiable', Store(), lineno=866, col_offset=8)], Name('strict_rfc2965_unverifiable', Load(), lineno=866, col_offset=43), lineno=866, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=867, col_offset=8), 'strict_ns_unverifiable', Store(), lineno=867, col_offset=8)], Name('strict_ns_unverifiable', Load(), lineno=867, col_offset=38), lineno=867, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=868, col_offset=8), 'strict_ns_domain', Store(), lineno=868, col_offset=8)], Name('strict_ns_domain', Load(), lineno=868, col_offset=32), lineno=868, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=869, col_offset=8), 'strict_ns_set_initial_dollar', Store(), lineno=869, col_offset=8)], Name('strict_ns_set_initial_dollar', Load(), lineno=869, col_offset=44), lineno=869, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=870, col_offset=8), 'strict_ns_set_path', Store(), lineno=870, col_offset=8)], Name('strict_ns_set_path', Load(), lineno=870, col_offset=34), lineno=870, col_offset=8), If(Compare(Name('blocked_domains', Load(), lineno=872, col_offset=11), [IsNot()], [Name('None', Load(), lineno=872, col_offset=34)], lineno=872, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=873, col_offset=12), '_blocked_domains', Store(), lineno=873, col_offset=12)], Call(Name('tuple', Load(), lineno=873, col_offset=36), [Name('blocked_domains', Load(), lineno=873, col_offset=42)], [], None, None, lineno=873, col_offset=36), lineno=873, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=875, col_offset=12), '_blocked_domains', Store(), lineno=875, col_offset=12)], Tuple([], Load(), lineno=875, col_offset=36), lineno=875, col_offset=12)], lineno=872, col_offset=8), If(Compare(Name('allowed_domains', Load(), lineno=877, col_offset=11), [IsNot()], [Name('None', Load(), lineno=877, col_offset=34)], lineno=877, col_offset=11), [Assign([Name('allowed_domains', Store(), lineno=878, col_offset=12)], Call(Name('tuple', Load(), lineno=878, col_offset=30), [Name('allowed_domains', Load(), lineno=878, col_offset=36)], [], None, None, lineno=878, col_offset=30), lineno=878, col_offset=12)], [], lineno=877, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=879, col_offset=8), '_allowed_domains', Store(), lineno=879, col_offset=8)], Name('allowed_domains', Load(), lineno=879, col_offset=32), lineno=879, col_offset=8)], [], lineno=848, col_offset=4), FunctionDef('blocked_domains', arguments([Name('self', Param(), lineno=881, col_offset=24)], None, None, []), [Expr(Str('Return the sequence of blocked domains (as a tuple).', lineno=882, col_offset=8), lineno=882, col_offset=8), Return(Attribute(Name('self', Load(), lineno=883, col_offset=15), '_blocked_domains', Load(), lineno=883, col_offset=15), lineno=883, col_offset=8)], [], lineno=881, col_offset=4), FunctionDef('set_blocked_domains', arguments([Name('self', Param(), lineno=884, col_offset=28), Name('blocked_domains', Param(), lineno=884, col_offset=34)], None, None, []), [Expr(Str('Set the sequence of blocked domains.', lineno=885, col_offset=8), lineno=885, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=886, col_offset=8), '_blocked_domains', Store(), lineno=886, col_offset=8)], Call(Name('tuple', Load(), lineno=886, col_offset=32), [Name('blocked_domains', Load(), lineno=886, col_offset=38)], [], None, None, lineno=886, col_offset=32), lineno=886, col_offset=8)], [], lineno=884, col_offset=4), FunctionDef('is_blocked', arguments([Name('self', Param(), lineno=888, col_offset=19), Name('domain', Param(), lineno=888, col_offset=25)], None, None, []), [For(Name('blocked_domain', Store(), lineno=889, col_offset=12), Attribute(Name('self', Load(), lineno=889, col_offset=30), '_blocked_domains', Load(), lineno=889, col_offset=30), [If(Call(Name('user_domain_match', Load(), lineno=890, col_offset=15), [Name('domain', Load(), lineno=890, col_offset=33), Name('blocked_domain', Load(), lineno=890, col_offset=41)], [], None, None, lineno=890, col_offset=15), [Return(Name('True', Load(), lineno=891, col_offset=23), lineno=891, col_offset=16)], [], lineno=890, col_offset=12)], [], lineno=889, col_offset=8), Return(Name('False', Load(), lineno=892, col_offset=15), lineno=892, col_offset=8)], [], lineno=888, col_offset=4), FunctionDef('allowed_domains', arguments([Name('self', Param(), lineno=894, col_offset=24)], None, None, []), [Expr(Str('Return None, or the sequence of allowed domains (as a tuple).', lineno=895, col_offset=8), lineno=895, col_offset=8), Return(Attribute(Name('self', Load(), lineno=896, col_offset=15), '_allowed_domains', Load(), lineno=896, col_offset=15), lineno=896, col_offset=8)], [], lineno=894, col_offset=4), FunctionDef('set_allowed_domains', arguments([Name('self', Param(), lineno=897, col_offset=28), Name('allowed_domains', Param(), lineno=897, col_offset=34)], None, None, []), [Expr(Str('Set the sequence of allowed domains, or None.', lineno=898, col_offset=8), lineno=898, col_offset=8), If(Compare(Name('allowed_domains', Load(), lineno=899, col_offset=11), [IsNot()], [Name('None', Load(), lineno=899, col_offset=34)], lineno=899, col_offset=11), [Assign([Name('allowed_domains', Store(), lineno=900, col_offset=12)], Call(Name('tuple', Load(), lineno=900, col_offset=30), [Name('allowed_domains', Load(), lineno=900, col_offset=36)], [], None, None, lineno=900, col_offset=30), lineno=900, col_offset=12)], [], lineno=899, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=901, col_offset=8), '_allowed_domains', Store(), lineno=901, col_offset=8)], Name('allowed_domains', Load(), lineno=901, col_offset=32), lineno=901, col_offset=8)], [], lineno=897, col_offset=4), FunctionDef('is_not_allowed', arguments([Name('self', Param(), lineno=903, col_offset=23), Name('domain', Param(), lineno=903, col_offset=29)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=904, col_offset=11), '_allowed_domains', Load(), lineno=904, col_offset=11), [Is()], [Name('None', Load(), lineno=904, col_offset=36)], lineno=904, col_offset=11), [Return(Name('False', Load(), lineno=905, col_offset=19), lineno=905, col_offset=12)], [], lineno=904, col_offset=8), For(Name('allowed_domain', Store(), lineno=906, col_offset=12), Attribute(Name('self', Load(), lineno=906, col_offset=30), '_allowed_domains', Load(), lineno=906, col_offset=30), [If(Call(Name('user_domain_match', Load(), lineno=907, col_offset=15), [Name('domain', Load(), lineno=907, col_offset=33), Name('allowed_domain', Load(), lineno=907, col_offset=41)], [], None, None, lineno=907, col_offset=15), [Return(Name('False', Load(), lineno=908, col_offset=23), lineno=908, col_offset=16)], [], lineno=907, col_offset=12)], [], lineno=906, col_offset=8), Return(Name('True', Load(), lineno=909, col_offset=15), lineno=909, col_offset=8)], [], lineno=903, col_offset=4), FunctionDef('set_ok', arguments([Name('self', Param(), lineno=911, col_offset=15), Name('cookie', Param(), lineno=911, col_offset=21), Name('request', Param(), lineno=911, col_offset=29)], None, None, []), [Expr(Str('\n        If you override .set_ok(), be sure to call this method.  If it returns\n        false, so should your subclass (assuming your subclass wants to be more\n        strict about which cookies to accept).\n\n        ', lineno=917, col_offset=-1), lineno=917, col_offset=-1), Expr(Call(Name('_debug', Load(), lineno=918, col_offset=8), [Str(' - checking cookie %s=%s', lineno=918, col_offset=15), Attribute(Name('cookie', Load(), lineno=918, col_offset=43), 'name', Load(), lineno=918, col_offset=43), Attribute(Name('cookie', Load(), lineno=918, col_offset=56), 'value', Load(), lineno=918, col_offset=56)], [], None, None, lineno=918, col_offset=8), lineno=918, col_offset=8), Assert(Compare(Attribute(Name('cookie', Load(), lineno=920, col_offset=15), 'name', Load(), lineno=920, col_offset=15), [IsNot()], [Name('None', Load(), lineno=920, col_offset=34)], lineno=920, col_offset=15), None, lineno=920, col_offset=8), For(Name('n', Store(), lineno=922, col_offset=12), Tuple([Str('version', lineno=922, col_offset=17), Str('verifiability', lineno=922, col_offset=28), Str('name', lineno=922, col_offset=45), Str('path', lineno=922, col_offset=53), Str('domain', lineno=922, col_offset=61), Str('port', lineno=922, col_offset=71)], Load(), lineno=922, col_offset=17), [Assign([Name('fn_name', Store(), lineno=923, col_offset=12)], BinOp(Str('set_ok_', lineno=923, col_offset=22), Add(), Name('n', Load(), lineno=923, col_offset=32), lineno=923, col_offset=22), lineno=923, col_offset=12), Assign([Name('fn', Store(), lineno=924, col_offset=12)], Call(Name('getattr', Load(), lineno=924, col_offset=17), [Name('self', Load(), lineno=924, col_offset=25), Name('fn_name', Load(), lineno=924, col_offset=31)], [], None, None, lineno=924, col_offset=17), lineno=924, col_offset=12), If(UnaryOp(Not(), Call(Name('fn', Load(), lineno=925, col_offset=19), [Name('cookie', Load(), lineno=925, col_offset=22), Name('request', Load(), lineno=925, col_offset=30)], [], None, None, lineno=925, col_offset=19), lineno=925, col_offset=15), [Return(Name('False', Load(), lineno=926, col_offset=23), lineno=926, col_offset=16)], [], lineno=925, col_offset=12)], [], lineno=922, col_offset=8), Return(Name('True', Load(), lineno=928, col_offset=15), lineno=928, col_offset=8)], [], lineno=911, col_offset=4), FunctionDef('set_ok_version', arguments([Name('self', Param(), lineno=930, col_offset=23), Name('cookie', Param(), lineno=930, col_offset=29), Name('request', Param(), lineno=930, col_offset=37)], None, None, []), [If(Compare(Attribute(Name('cookie', Load(), lineno=931, col_offset=11), 'version', Load(), lineno=931, col_offset=11), [Is()], [Name('None', Load(), lineno=931, col_offset=29)], lineno=931, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=934, col_offset=12), [Str('   Set-Cookie2 without version attribute (%s=%s)', lineno=934, col_offset=19), Attribute(Name('cookie', Load(), lineno=935, col_offset=19), 'name', Load(), lineno=935, col_offset=19), Attribute(Name('cookie', Load(), lineno=935, col_offset=32), 'value', Load(), lineno=935, col_offset=32)], [], None, None, lineno=934, col_offset=12), lineno=934, col_offset=12), Return(Name('False', Load(), lineno=936, col_offset=19), lineno=936, col_offset=12)], [], lineno=931, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=937, col_offset=11), 'version', Load(), lineno=937, col_offset=11), [Gt()], [Num(0, lineno=937, col_offset=28)], lineno=937, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=937, col_offset=38), 'rfc2965', Load(), lineno=937, col_offset=38), lineno=937, col_offset=34)], lineno=937, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=938, col_offset=12), [Str('   RFC 2965 cookies are switched off', lineno=938, col_offset=19)], [], None, None, lineno=938, col_offset=12), lineno=938, col_offset=12), Return(Name('False', Load(), lineno=939, col_offset=19), lineno=939, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=940, col_offset=13), 'version', Load(), lineno=940, col_offset=13), [Eq()], [Num(0, lineno=940, col_offset=31)], lineno=940, col_offset=13), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=940, col_offset=41), 'netscape', Load(), lineno=940, col_offset=41), lineno=940, col_offset=37)], lineno=940, col_offset=13), [Expr(Call(Name('_debug', Load(), lineno=941, col_offset=12), [Str('   Netscape cookies are switched off', lineno=941, col_offset=19)], [], None, None, lineno=941, col_offset=12), lineno=941, col_offset=12), Return(Name('False', Load(), lineno=942, col_offset=19), lineno=942, col_offset=12)], [], lineno=940, col_offset=13)], lineno=937, col_offset=8), Return(Name('True', Load(), lineno=943, col_offset=15), lineno=943, col_offset=8)], [], lineno=930, col_offset=4), FunctionDef('set_ok_verifiability', arguments([Name('self', Param(), lineno=945, col_offset=29), Name('cookie', Param(), lineno=945, col_offset=35), Name('request', Param(), lineno=945, col_offset=43)], None, None, []), [If(BoolOp(And(), [Call(Attribute(Name('request', Load(), lineno=946, col_offset=11), 'is_unverifiable', Load(), lineno=946, col_offset=11), [], [], None, None, lineno=946, col_offset=11), Call(Name('is_third_party', Load(), lineno=946, col_offset=41), [Name('request', Load(), lineno=946, col_offset=56)], [], None, None, lineno=946, col_offset=41)], lineno=946, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=947, col_offset=15), 'version', Load(), lineno=947, col_offset=15), [Gt()], [Num(0, lineno=947, col_offset=32)], lineno=947, col_offset=15), Attribute(Name('self', Load(), lineno=947, col_offset=38), 'strict_rfc2965_unverifiable', Load(), lineno=947, col_offset=38)], lineno=947, col_offset=15), [Expr(Call(Name('_debug', Load(), lineno=948, col_offset=16), [Str('   third-party RFC 2965 cookie during unverifiable transaction', lineno=948, col_offset=23)], [], None, None, lineno=948, col_offset=16), lineno=948, col_offset=16), Return(Name('False', Load(), lineno=950, col_offset=23), lineno=950, col_offset=16)], [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=951, col_offset=17), 'version', Load(), lineno=951, col_offset=17), [Eq()], [Num(0, lineno=951, col_offset=35)], lineno=951, col_offset=17), Attribute(Name('self', Load(), lineno=951, col_offset=41), 'strict_ns_unverifiable', Load(), lineno=951, col_offset=41)], lineno=951, col_offset=17), [Expr(Call(Name('_debug', Load(), lineno=952, col_offset=16), [Str('   third-party Netscape cookie during unverifiable transaction', lineno=952, col_offset=23)], [], None, None, lineno=952, col_offset=16), lineno=952, col_offset=16), Return(Name('False', Load(), lineno=954, col_offset=23), lineno=954, col_offset=16)], [], lineno=951, col_offset=17)], lineno=947, col_offset=12)], [], lineno=946, col_offset=8), Return(Name('True', Load(), lineno=955, col_offset=15), lineno=955, col_offset=8)], [], lineno=945, col_offset=4), FunctionDef('set_ok_name', arguments([Name('self', Param(), lineno=957, col_offset=20), Name('cookie', Param(), lineno=957, col_offset=26), Name('request', Param(), lineno=957, col_offset=34)], None, None, []), [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=960, col_offset=12), 'version', Load(), lineno=960, col_offset=12), [Eq()], [Num(0, lineno=960, col_offset=30)], lineno=960, col_offset=12), Attribute(Name('self', Load(), lineno=960, col_offset=36), 'strict_ns_set_initial_dollar', Load(), lineno=960, col_offset=36), Call(Attribute(Attribute(Name('cookie', Load(), lineno=961, col_offset=12), 'name', Load(), lineno=961, col_offset=12), 'startswith', Load(), lineno=961, col_offset=12), [Str('$', lineno=961, col_offset=35)], [], None, None, lineno=961, col_offset=12)], lineno=960, col_offset=12), [Expr(Call(Name('_debug', Load(), lineno=962, col_offset=12), [Str("   illegal name (starts with '$'): '%s'", lineno=962, col_offset=19), Attribute(Name('cookie', Load(), lineno=962, col_offset=62), 'name', Load(), lineno=962, col_offset=62)], [], None, None, lineno=962, col_offset=12), lineno=962, col_offset=12), Return(Name('False', Load(), lineno=963, col_offset=19), lineno=963, col_offset=12)], [], lineno=960, col_offset=8), Return(Name('True', Load(), lineno=964, col_offset=15), lineno=964, col_offset=8)], [], lineno=957, col_offset=4), FunctionDef('set_ok_path', arguments([Name('self', Param(), lineno=966, col_offset=20), Name('cookie', Param(), lineno=966, col_offset=26), Name('request', Param(), lineno=966, col_offset=34)], None, None, []), [If(Attribute(Name('cookie', Load(), lineno=967, col_offset=11), 'path_specified', Load(), lineno=967, col_offset=11), [Assign([Name('req_path', Store(), lineno=968, col_offset=12)], Call(Name('request_path', Load(), lineno=968, col_offset=23), [Name('request', Load(), lineno=968, col_offset=36)], [], None, None, lineno=968, col_offset=23), lineno=968, col_offset=12), If(BoolOp(And(), [BoolOp(Or(), [Compare(Attribute(Name('cookie', Load(), lineno=969, col_offset=17), 'version', Load(), lineno=969, col_offset=17), [Gt()], [Num(0, lineno=969, col_offset=34)], lineno=969, col_offset=17), BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=970, col_offset=18), 'version', Load(), lineno=970, col_offset=18), [Eq()], [Num(0, lineno=970, col_offset=36)], lineno=970, col_offset=18), Attribute(Name('self', Load(), lineno=970, col_offset=42), 'strict_ns_set_path', Load(), lineno=970, col_offset=42)], lineno=970, col_offset=18)], lineno=969, col_offset=17), UnaryOp(Not(), Call(Attribute(Name('req_path', Load(), lineno=971, col_offset=20), 'startswith', Load(), lineno=971, col_offset=20), [Attribute(Name('cookie', Load(), lineno=971, col_offset=40), 'path', Load(), lineno=971, col_offset=40)], [], None, None, lineno=971, col_offset=20), lineno=971, col_offset=16)], lineno=969, col_offset=16), [Expr(Call(Name('_debug', Load(), lineno=972, col_offset=16), [Str('   path attribute %s is not a prefix of request path %s', lineno=972, col_offset=23), Attribute(Name('cookie', Load(), lineno=973, col_offset=34), 'path', Load(), lineno=973, col_offset=34), Name('req_path', Load(), lineno=973, col_offset=47)], [], None, None, lineno=972, col_offset=16), lineno=972, col_offset=16), Return(Name('False', Load(), lineno=974, col_offset=23), lineno=974, col_offset=16)], [], lineno=969, col_offset=12)], [], lineno=967, col_offset=8), Return(Name('True', Load(), lineno=975, col_offset=15), lineno=975, col_offset=8)], [], lineno=966, col_offset=4), FunctionDef('set_ok_domain', arguments([Name('self', Param(), lineno=977, col_offset=22), Name('cookie', Param(), lineno=977, col_offset=28), Name('request', Param(), lineno=977, col_offset=36)], None, None, []), [If(Call(Attribute(Name('self', Load(), lineno=978, col_offset=11), 'is_blocked', Load(), lineno=978, col_offset=11), [Attribute(Name('cookie', Load(), lineno=978, col_offset=27), 'domain', Load(), lineno=978, col_offset=27)], [], None, None, lineno=978, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=979, col_offset=12), [Str('   domain %s is in user block-list', lineno=979, col_offset=19), Attribute(Name('cookie', Load(), lineno=979, col_offset=57), 'domain', Load(), lineno=979, col_offset=57)], [], None, None, lineno=979, col_offset=12), lineno=979, col_offset=12), Return(Name('False', Load(), lineno=980, col_offset=19), lineno=980, col_offset=12)], [], lineno=978, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=981, col_offset=11), 'is_not_allowed', Load(), lineno=981, col_offset=11), [Attribute(Name('cookie', Load(), lineno=981, col_offset=31), 'domain', Load(), lineno=981, col_offset=31)], [], None, None, lineno=981, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=982, col_offset=12), [Str('   domain %s is not in user allow-list', lineno=982, col_offset=19), Attribute(Name('cookie', Load(), lineno=982, col_offset=61), 'domain', Load(), lineno=982, col_offset=61)], [], None, None, lineno=982, col_offset=12), lineno=982, col_offset=12), Return(Name('False', Load(), lineno=983, col_offset=19), lineno=983, col_offset=12)], [], lineno=981, col_offset=8), If(Attribute(Name('cookie', Load(), lineno=984, col_offset=11), 'domain_specified', Load(), lineno=984, col_offset=11), [Assign([Tuple([Name('req_host', Store(), lineno=985, col_offset=12), Name('erhn', Store(), lineno=985, col_offset=22)], Store(), lineno=985, col_offset=12)], Call(Name('eff_request_host', Load(), lineno=985, col_offset=29), [Name('request', Load(), lineno=985, col_offset=46)], [], None, None, lineno=985, col_offset=29), lineno=985, col_offset=12), Assign([Name('domain', Store(), lineno=986, col_offset=12)], Attribute(Name('cookie', Load(), lineno=986, col_offset=21), 'domain', Load(), lineno=986, col_offset=21), lineno=986, col_offset=12), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=987, col_offset=15), 'strict_domain', Load(), lineno=987, col_offset=15), Compare(Call(Attribute(Name('domain', Load(), lineno=987, col_offset=39), 'count', Load(), lineno=987, col_offset=39), [Str('.', lineno=987, col_offset=52)], [], None, None, lineno=987, col_offset=39), [GtE()], [Num(2, lineno=987, col_offset=60)], lineno=987, col_offset=39)], lineno=987, col_offset=15), [Assign([Name('i', Store(), lineno=991, col_offset=16)], Call(Attribute(Name('domain', Load(), lineno=991, col_offset=20), 'rfind', Load(), lineno=991, col_offset=20), [Str('.', lineno=991, col_offset=33)], [], None, None, lineno=991, col_offset=20), lineno=991, col_offset=16), Assign([Name('j', Store(), lineno=992, col_offset=16)], Call(Attribute(Name('domain', Load(), lineno=992, col_offset=20), 'rfind', Load(), lineno=992, col_offset=20), [Str('.', lineno=992, col_offset=33), Num(0, lineno=992, col_offset=38), Name('i', Load(), lineno=992, col_offset=41)], [], None, None, lineno=992, col_offset=20), lineno=992, col_offset=16), If(Compare(Name('j', Load(), lineno=993, col_offset=19), [Eq()], [Num(0, lineno=993, col_offset=24)], lineno=993, col_offset=19), [Assign([Name('tld', Store(), lineno=994, col_offset=20)], Subscript(Name('domain', Load(), lineno=994, col_offset=26), Slice(BinOp(Name('i', Load(), lineno=994, col_offset=33), Add(), Num(1, lineno=994, col_offset=35), lineno=994, col_offset=33), None, None), Load(), lineno=994, col_offset=26), lineno=994, col_offset=20), Assign([Name('sld', Store(), lineno=995, col_offset=20)], Subscript(Name('domain', Load(), lineno=995, col_offset=26), Slice(BinOp(Name('j', Load(), lineno=995, col_offset=33), Add(), Num(1, lineno=995, col_offset=35), lineno=995, col_offset=33), Name('i', Load(), lineno=995, col_offset=37), None), Load(), lineno=995, col_offset=26), lineno=995, col_offset=20), If(BoolOp(And(), [Compare(Call(Attribute(Name('sld', Load(), lineno=996, col_offset=23), 'lower', Load(), lineno=996, col_offset=23), [], [], None, None, lineno=996, col_offset=23), [In()], [Tuple([Str('co', lineno=996, col_offset=39), Str('ac', lineno=996, col_offset=45), Str('com', lineno=996, col_offset=51), Str('edu', lineno=996, col_offset=58), Str('org', lineno=996, col_offset=65), Str('net', lineno=996, col_offset=72), Str('gov', lineno=997, col_offset=23), Str('mil', lineno=997, col_offset=30), Str('int', lineno=997, col_offset=37), Str('aero', lineno=997, col_offset=44), Str('biz', lineno=997, col_offset=52), Str('cat', lineno=997, col_offset=59), Str('coop', lineno=997, col_offset=66), Str('info', lineno=998, col_offset=23), Str('jobs', lineno=998, col_offset=31), Str('mobi', lineno=998, col_offset=39), Str('museum', lineno=998, col_offset=47), Str('name', lineno=998, col_offset=57), Str('pro', lineno=998, col_offset=65), Str('travel', lineno=999, col_offset=23), Str('eu', lineno=999, col_offset=33)], Load(), lineno=996, col_offset=39)], lineno=996, col_offset=23), Compare(Call(Name('len', Load(), lineno=999, col_offset=43), [Name('tld', Load(), lineno=999, col_offset=47)], [], None, None, lineno=999, col_offset=43), [Eq()], [Num(2, lineno=999, col_offset=55)], lineno=999, col_offset=43)], lineno=996, col_offset=23), [Expr(Call(Name('_debug', Load(), lineno=1001, col_offset=24), [Str('   country-code second level domain %s', lineno=1001, col_offset=31), Name('domain', Load(), lineno=1001, col_offset=73)], [], None, None, lineno=1001, col_offset=24), lineno=1001, col_offset=24), Return(Name('False', Load(), lineno=1002, col_offset=31), lineno=1002, col_offset=24)], [], lineno=996, col_offset=20)], [], lineno=993, col_offset=16)], [], lineno=987, col_offset=12), If(Call(Attribute(Name('domain', Load(), lineno=1003, col_offset=15), 'startswith', Load(), lineno=1003, col_offset=15), [Str('.', lineno=1003, col_offset=33)], [], None, None, lineno=1003, col_offset=15), [Assign([Name('undotted_domain', Store(), lineno=1004, col_offset=16)], Subscript(Name('domain', Load(), lineno=1004, col_offset=34), Slice(Num(1, lineno=1004, col_offset=41), None, None), Load(), lineno=1004, col_offset=34), lineno=1004, col_offset=16)], [Assign([Name('undotted_domain', Store(), lineno=1006, col_offset=16)], Name('domain', Load(), lineno=1006, col_offset=34), lineno=1006, col_offset=16)], lineno=1003, col_offset=12), Assign([Name('embedded_dots', Store(), lineno=1007, col_offset=12)], Compare(Call(Attribute(Name('undotted_domain', Load(), lineno=1007, col_offset=29), 'find', Load(), lineno=1007, col_offset=29), [Str('.', lineno=1007, col_offset=50)], [], None, None, lineno=1007, col_offset=29), [GtE()], [Num(0, lineno=1007, col_offset=58)], lineno=1007, col_offset=29), lineno=1007, col_offset=12), If(BoolOp(And(), [UnaryOp(Not(), Name('embedded_dots', Load(), lineno=1008, col_offset=19), lineno=1008, col_offset=15), Compare(Name('domain', Load(), lineno=1008, col_offset=37), [NotEq()], [Str('.local', lineno=1008, col_offset=47)], lineno=1008, col_offset=37)], lineno=1008, col_offset=15), [Expr(Call(Name('_debug', Load(), lineno=1009, col_offset=16), [Str('   non-local domain %s contains no embedded dot', lineno=1009, col_offset=23), Name('domain', Load(), lineno=1010, col_offset=23)], [], None, None, lineno=1009, col_offset=16), lineno=1009, col_offset=16), Return(Name('False', Load(), lineno=1011, col_offset=23), lineno=1011, col_offset=16)], [], lineno=1008, col_offset=12), If(Compare(Attribute(Name('cookie', Load(), lineno=1012, col_offset=15), 'version', Load(), lineno=1012, col_offset=15), [Eq()], [Num(0, lineno=1012, col_offset=33)], lineno=1012, col_offset=15), [If(BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('erhn', Load(), lineno=1013, col_offset=24), 'endswith', Load(), lineno=1013, col_offset=24), [Name('domain', Load(), lineno=1013, col_offset=38)], [], None, None, lineno=1013, col_offset=24), lineno=1013, col_offset=20), BoolOp(And(), [UnaryOp(Not(), Call(Attribute(Name('erhn', Load(), lineno=1014, col_offset=25), 'startswith', Load(), lineno=1014, col_offset=25), [Str('.', lineno=1014, col_offset=41)], [], None, None, lineno=1014, col_offset=25), lineno=1014, col_offset=21), UnaryOp(Not(), Call(Attribute(BinOp(Str('.', lineno=1015, col_offset=26), Add(), Name('erhn', Load(), lineno=1015, col_offset=30), lineno=1015, col_offset=26), 'endswith', Load(), lineno=1015, col_offset=26), [Name('domain', Load(), lineno=1015, col_offset=45)], [], None, None, lineno=1015, col_offset=26), lineno=1015, col_offset=21)], lineno=1014, col_offset=21)], lineno=1013, col_offset=20), [Expr(Call(Name('_debug', Load(), lineno=1016, col_offset=20), [Str('   effective request-host %s (even with added initial dot) does not end end with %s', lineno=1016, col_offset=27), Name('erhn', Load(), lineno=1018, col_offset=27), Name('domain', Load(), lineno=1018, col_offset=33)], [], None, None, lineno=1016, col_offset=20), lineno=1016, col_offset=20), Return(Name('False', Load(), lineno=1019, col_offset=27), lineno=1019, col_offset=20)], [], lineno=1013, col_offset=16)], [], lineno=1012, col_offset=12), If(BoolOp(Or(), [Compare(Attribute(Name('cookie', Load(), lineno=1020, col_offset=16), 'version', Load(), lineno=1020, col_offset=16), [Gt()], [Num(0, lineno=1020, col_offset=33)], lineno=1020, col_offset=16), BinOp(Attribute(Name('self', Load(), lineno=1021, col_offset=17), 'strict_ns_domain', Load(), lineno=1021, col_offset=17), BitAnd(), Attribute(Name('self', Load(), lineno=1021, col_offset=41), 'DomainRFC2965Match', Load(), lineno=1021, col_offset=41), lineno=1021, col_offset=17)], lineno=1020, col_offset=16), [If(UnaryOp(Not(), Call(Name('domain_match', Load(), lineno=1022, col_offset=23), [Name('erhn', Load(), lineno=1022, col_offset=36), Name('domain', Load(), lineno=1022, col_offset=42)], [], None, None, lineno=1022, col_offset=23), lineno=1022, col_offset=19), [Expr(Call(Name('_debug', Load(), lineno=1023, col_offset=20), [Str('   effective request-host %s does not domain-match %s', lineno=1023, col_offset=27), Name('erhn', Load(), lineno=1024, col_offset=33), Name('domain', Load(), lineno=1024, col_offset=39)], [], None, None, lineno=1023, col_offset=20), lineno=1023, col_offset=20), Return(Name('False', Load(), lineno=1025, col_offset=27), lineno=1025, col_offset=20)], [], lineno=1022, col_offset=16)], [], lineno=1020, col_offset=12), If(BoolOp(Or(), [Compare(Attribute(Name('cookie', Load(), lineno=1026, col_offset=16), 'version', Load(), lineno=1026, col_offset=16), [Gt()], [Num(0, lineno=1026, col_offset=33)], lineno=1026, col_offset=16), BinOp(Attribute(Name('self', Load(), lineno=1027, col_offset=17), 'strict_ns_domain', Load(), lineno=1027, col_offset=17), BitAnd(), Attribute(Name('self', Load(), lineno=1027, col_offset=41), 'DomainStrictNoDots', Load(), lineno=1027, col_offset=41), lineno=1027, col_offset=17)], lineno=1026, col_offset=16), [Assign([Name('host_prefix', Store(), lineno=1028, col_offset=16)], Subscript(Name('req_host', Load(), lineno=1028, col_offset=30), Slice(None, UnaryOp(USub(), Call(Name('len', Load(), lineno=1028, col_offset=41), [Name('domain', Load(), lineno=1028, col_offset=45)], [], None, None, lineno=1028, col_offset=41), lineno=1028, col_offset=40), None), Load(), lineno=1028, col_offset=30), lineno=1028, col_offset=16), If(BoolOp(And(), [Compare(Call(Attribute(Name('host_prefix', Load(), lineno=1029, col_offset=20), 'find', Load(), lineno=1029, col_offset=20), [Str('.', lineno=1029, col_offset=37)], [], None, None, lineno=1029, col_offset=20), [GtE()], [Num(0, lineno=1029, col_offset=45)], lineno=1029, col_offset=20), UnaryOp(Not(), Call(Attribute(Name('IPV4_RE', Load(), lineno=1030, col_offset=24), 'search', Load(), lineno=1030, col_offset=24), [Name('req_host', Load(), lineno=1030, col_offset=39)], [], None, None, lineno=1030, col_offset=24), lineno=1030, col_offset=20)], lineno=1029, col_offset=20), [Expr(Call(Name('_debug', Load(), lineno=1031, col_offset=20), [Str('   host prefix %s for domain %s contains a dot', lineno=1031, col_offset=27), Name('host_prefix', Load(), lineno=1032, col_offset=27), Name('domain', Load(), lineno=1032, col_offset=40)], [], None, None, lineno=1031, col_offset=20), lineno=1031, col_offset=20), Return(Name('False', Load(), lineno=1033, col_offset=27), lineno=1033, col_offset=20)], [], lineno=1029, col_offset=16)], [], lineno=1026, col_offset=12)], [], lineno=984, col_offset=8), Return(Name('True', Load(), lineno=1034, col_offset=15), lineno=1034, col_offset=8)], [], lineno=977, col_offset=4), FunctionDef('set_ok_port', arguments([Name('self', Param(), lineno=1036, col_offset=20), Name('cookie', Param(), lineno=1036, col_offset=26), Name('request', Param(), lineno=1036, col_offset=34)], None, None, []), [If(Attribute(Name('cookie', Load(), lineno=1037, col_offset=11), 'port_specified', Load(), lineno=1037, col_offset=11), [Assign([Name('req_port', Store(), lineno=1038, col_offset=12)], Call(Name('request_port', Load(), lineno=1038, col_offset=23), [Name('request', Load(), lineno=1038, col_offset=36)], [], None, None, lineno=1038, col_offset=23), lineno=1038, col_offset=12), If(Compare(Name('req_port', Load(), lineno=1039, col_offset=15), [Is()], [Name('None', Load(), lineno=1039, col_offset=27)], lineno=1039, col_offset=15), [Assign([Name('req_port', Store(), lineno=1040, col_offset=16)], Str('80', lineno=1040, col_offset=27), lineno=1040, col_offset=16)], [Assign([Name('req_port', Store(), lineno=1042, col_offset=16)], Call(Name('str', Load(), lineno=1042, col_offset=27), [Name('req_port', Load(), lineno=1042, col_offset=31)], [], None, None, lineno=1042, col_offset=27), lineno=1042, col_offset=16)], lineno=1039, col_offset=12), For(Name('p', Store(), lineno=1043, col_offset=16), Call(Attribute(Attribute(Name('cookie', Load(), lineno=1043, col_offset=21), 'port', Load(), lineno=1043, col_offset=21), 'split', Load(), lineno=1043, col_offset=21), [Str(',', lineno=1043, col_offset=39)], [], None, None, lineno=1043, col_offset=21), [TryExcept([Expr(Call(Name('int', Load(), lineno=1045, col_offset=20), [Name('p', Load(), lineno=1045, col_offset=24)], [], None, None, lineno=1045, col_offset=20), lineno=1045, col_offset=20)], [ExceptHandler(Name('ValueError', Load(), lineno=1046, col_offset=23), None, [Expr(Call(Name('_debug', Load(), lineno=1047, col_offset=20), [Str('   bad port %s (not numeric)', lineno=1047, col_offset=27), Name('p', Load(), lineno=1047, col_offset=59)], [], None, None, lineno=1047, col_offset=20), lineno=1047, col_offset=20), Return(Name('False', Load(), lineno=1048, col_offset=27), lineno=1048, col_offset=20)], lineno=1046, col_offset=16)], [], lineno=1044, col_offset=16), If(Compare(Name('p', Load(), lineno=1049, col_offset=19), [Eq()], [Name('req_port', Load(), lineno=1049, col_offset=24)], lineno=1049, col_offset=19), [Break( lineno=1050, col_offset=20)], [], lineno=1049, col_offset=16)], [Expr(Call(Name('_debug', Load(), lineno=1052, col_offset=16), [Str('   request port (%s) not found in %s', lineno=1052, col_offset=23), Name('req_port', Load(), lineno=1053, col_offset=23), Attribute(Name('cookie', Load(), lineno=1053, col_offset=33), 'port', Load(), lineno=1053, col_offset=33)], [], None, None, lineno=1052, col_offset=16), lineno=1052, col_offset=16), Return(Name('False', Load(), lineno=1054, col_offset=23), lineno=1054, col_offset=16)], lineno=1043, col_offset=12)], [], lineno=1037, col_offset=8), Return(Name('True', Load(), lineno=1055, col_offset=15), lineno=1055, col_offset=8)], [], lineno=1036, col_offset=4), FunctionDef('return_ok', arguments([Name('self', Param(), lineno=1057, col_offset=18), Name('cookie', Param(), lineno=1057, col_offset=24), Name('request', Param(), lineno=1057, col_offset=32)], None, None, []), [Expr(Str('\n        If you override .return_ok(), be sure to call this method.  If it\n        returns false, so should your subclass (assuming your subclass wants to\n        be more strict about which cookies to return).\n\n        ', lineno=1063, col_offset=-1), lineno=1063, col_offset=-1), Expr(Call(Name('_debug', Load(), lineno=1066, col_offset=8), [Str(' - checking cookie %s=%s', lineno=1066, col_offset=15), Attribute(Name('cookie', Load(), lineno=1066, col_offset=43), 'name', Load(), lineno=1066, col_offset=43), Attribute(Name('cookie', Load(), lineno=1066, col_offset=56), 'value', Load(), lineno=1066, col_offset=56)], [], None, None, lineno=1066, col_offset=8), lineno=1066, col_offset=8), For(Name('n', Store(), lineno=1068, col_offset=12), Tuple([Str('version', lineno=1068, col_offset=17), Str('verifiability', lineno=1068, col_offset=28), Str('secure', lineno=1068, col_offset=45), Str('expires', lineno=1068, col_offset=55), Str('port', lineno=1068, col_offset=66), Str('domain', lineno=1068, col_offset=74)], Load(), lineno=1068, col_offset=17), [Assign([Name('fn_name', Store(), lineno=1069, col_offset=12)], BinOp(Str('return_ok_', lineno=1069, col_offset=22), Add(), Name('n', Load(), lineno=1069, col_offset=35), lineno=1069, col_offset=22), lineno=1069, col_offset=12), Assign([Name('fn', Store(), lineno=1070, col_offset=12)], Call(Name('getattr', Load(), lineno=1070, col_offset=17), [Name('self', Load(), lineno=1070, col_offset=25), Name('fn_name', Load(), lineno=1070, col_offset=31)], [], None, None, lineno=1070, col_offset=17), lineno=1070, col_offset=12), If(UnaryOp(Not(), Call(Name('fn', Load(), lineno=1071, col_offset=19), [Name('cookie', Load(), lineno=1071, col_offset=22), Name('request', Load(), lineno=1071, col_offset=30)], [], None, None, lineno=1071, col_offset=19), lineno=1071, col_offset=15), [Return(Name('False', Load(), lineno=1072, col_offset=23), lineno=1072, col_offset=16)], [], lineno=1071, col_offset=12)], [], lineno=1068, col_offset=8), Return(Name('True', Load(), lineno=1073, col_offset=15), lineno=1073, col_offset=8)], [], lineno=1057, col_offset=4), FunctionDef('return_ok_version', arguments([Name('self', Param(), lineno=1075, col_offset=26), Name('cookie', Param(), lineno=1075, col_offset=32), Name('request', Param(), lineno=1075, col_offset=40)], None, None, []), [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1076, col_offset=11), 'version', Load(), lineno=1076, col_offset=11), [Gt()], [Num(0, lineno=1076, col_offset=28)], lineno=1076, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1076, col_offset=38), 'rfc2965', Load(), lineno=1076, col_offset=38), lineno=1076, col_offset=34)], lineno=1076, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1077, col_offset=12), [Str('   RFC 2965 cookies are switched off', lineno=1077, col_offset=19)], [], None, None, lineno=1077, col_offset=12), lineno=1077, col_offset=12), Return(Name('False', Load(), lineno=1078, col_offset=19), lineno=1078, col_offset=12)], [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1079, col_offset=13), 'version', Load(), lineno=1079, col_offset=13), [Eq()], [Num(0, lineno=1079, col_offset=31)], lineno=1079, col_offset=13), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1079, col_offset=41), 'netscape', Load(), lineno=1079, col_offset=41), lineno=1079, col_offset=37)], lineno=1079, col_offset=13), [Expr(Call(Name('_debug', Load(), lineno=1080, col_offset=12), [Str('   Netscape cookies are switched off', lineno=1080, col_offset=19)], [], None, None, lineno=1080, col_offset=12), lineno=1080, col_offset=12), Return(Name('False', Load(), lineno=1081, col_offset=19), lineno=1081, col_offset=12)], [], lineno=1079, col_offset=13)], lineno=1076, col_offset=8), Return(Name('True', Load(), lineno=1082, col_offset=15), lineno=1082, col_offset=8)], [], lineno=1075, col_offset=4), FunctionDef('return_ok_verifiability', arguments([Name('self', Param(), lineno=1084, col_offset=32), Name('cookie', Param(), lineno=1084, col_offset=38), Name('request', Param(), lineno=1084, col_offset=46)], None, None, []), [If(BoolOp(And(), [Call(Attribute(Name('request', Load(), lineno=1085, col_offset=11), 'is_unverifiable', Load(), lineno=1085, col_offset=11), [], [], None, None, lineno=1085, col_offset=11), Call(Name('is_third_party', Load(), lineno=1085, col_offset=41), [Name('request', Load(), lineno=1085, col_offset=56)], [], None, None, lineno=1085, col_offset=41)], lineno=1085, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1086, col_offset=15), 'version', Load(), lineno=1086, col_offset=15), [Gt()], [Num(0, lineno=1086, col_offset=32)], lineno=1086, col_offset=15), Attribute(Name('self', Load(), lineno=1086, col_offset=38), 'strict_rfc2965_unverifiable', Load(), lineno=1086, col_offset=38)], lineno=1086, col_offset=15), [Expr(Call(Name('_debug', Load(), lineno=1087, col_offset=16), [Str('   third-party RFC 2965 cookie during unverifiable transaction', lineno=1087, col_offset=23)], [], None, None, lineno=1087, col_offset=16), lineno=1087, col_offset=16), Return(Name('False', Load(), lineno=1089, col_offset=23), lineno=1089, col_offset=16)], [If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1090, col_offset=17), 'version', Load(), lineno=1090, col_offset=17), [Eq()], [Num(0, lineno=1090, col_offset=35)], lineno=1090, col_offset=17), Attribute(Name('self', Load(), lineno=1090, col_offset=41), 'strict_ns_unverifiable', Load(), lineno=1090, col_offset=41)], lineno=1090, col_offset=17), [Expr(Call(Name('_debug', Load(), lineno=1091, col_offset=16), [Str('   third-party Netscape cookie during unverifiable transaction', lineno=1091, col_offset=23)], [], None, None, lineno=1091, col_offset=16), lineno=1091, col_offset=16), Return(Name('False', Load(), lineno=1093, col_offset=23), lineno=1093, col_offset=16)], [], lineno=1090, col_offset=17)], lineno=1086, col_offset=12)], [], lineno=1085, col_offset=8), Return(Name('True', Load(), lineno=1094, col_offset=15), lineno=1094, col_offset=8)], [], lineno=1084, col_offset=4), FunctionDef('return_ok_secure', arguments([Name('self', Param(), lineno=1096, col_offset=25), Name('cookie', Param(), lineno=1096, col_offset=31), Name('request', Param(), lineno=1096, col_offset=39)], None, None, []), [If(BoolOp(And(), [Attribute(Name('cookie', Load(), lineno=1097, col_offset=11), 'secure', Load(), lineno=1097, col_offset=11), Compare(Call(Attribute(Name('request', Load(), lineno=1097, col_offset=29), 'get_type', Load(), lineno=1097, col_offset=29), [], [], None, None, lineno=1097, col_offset=29), [NotEq()], [Str('https', lineno=1097, col_offset=51)], lineno=1097, col_offset=29)], lineno=1097, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1098, col_offset=12), [Str('   secure cookie with non-secure request', lineno=1098, col_offset=19)], [], None, None, lineno=1098, col_offset=12), lineno=1098, col_offset=12), Return(Name('False', Load(), lineno=1099, col_offset=19), lineno=1099, col_offset=12)], [], lineno=1097, col_offset=8), Return(Name('True', Load(), lineno=1100, col_offset=15), lineno=1100, col_offset=8)], [], lineno=1096, col_offset=4), FunctionDef('return_ok_expires', arguments([Name('self', Param(), lineno=1102, col_offset=26), Name('cookie', Param(), lineno=1102, col_offset=32), Name('request', Param(), lineno=1102, col_offset=40)], None, None, []), [If(Call(Attribute(Name('cookie', Load(), lineno=1103, col_offset=11), 'is_expired', Load(), lineno=1103, col_offset=11), [Attribute(Name('self', Load(), lineno=1103, col_offset=29), '_now', Load(), lineno=1103, col_offset=29)], [], None, None, lineno=1103, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1104, col_offset=12), [Str('   cookie expired', lineno=1104, col_offset=19)], [], None, None, lineno=1104, col_offset=12), lineno=1104, col_offset=12), Return(Name('False', Load(), lineno=1105, col_offset=19), lineno=1105, col_offset=12)], [], lineno=1103, col_offset=8), Return(Name('True', Load(), lineno=1106, col_offset=15), lineno=1106, col_offset=8)], [], lineno=1102, col_offset=4), FunctionDef('return_ok_port', arguments([Name('self', Param(), lineno=1108, col_offset=23), Name('cookie', Param(), lineno=1108, col_offset=29), Name('request', Param(), lineno=1108, col_offset=37)], None, None, []), [If(Attribute(Name('cookie', Load(), lineno=1109, col_offset=11), 'port', Load(), lineno=1109, col_offset=11), [Assign([Name('req_port', Store(), lineno=1110, col_offset=12)], Call(Name('request_port', Load(), lineno=1110, col_offset=23), [Name('request', Load(), lineno=1110, col_offset=36)], [], None, None, lineno=1110, col_offset=23), lineno=1110, col_offset=12), If(Compare(Name('req_port', Load(), lineno=1111, col_offset=15), [Is()], [Name('None', Load(), lineno=1111, col_offset=27)], lineno=1111, col_offset=15), [Assign([Name('req_port', Store(), lineno=1112, col_offset=16)], Str('80', lineno=1112, col_offset=27), lineno=1112, col_offset=16)], [], lineno=1111, col_offset=12), For(Name('p', Store(), lineno=1113, col_offset=16), Call(Attribute(Attribute(Name('cookie', Load(), lineno=1113, col_offset=21), 'port', Load(), lineno=1113, col_offset=21), 'split', Load(), lineno=1113, col_offset=21), [Str(',', lineno=1113, col_offset=39)], [], None, None, lineno=1113, col_offset=21), [If(Compare(Name('p', Load(), lineno=1114, col_offset=19), [Eq()], [Name('req_port', Load(), lineno=1114, col_offset=24)], lineno=1114, col_offset=19), [Break( lineno=1115, col_offset=20)], [], lineno=1114, col_offset=16)], [Expr(Call(Name('_debug', Load(), lineno=1117, col_offset=16), [Str('   request port %s does not match cookie port %s', lineno=1117, col_offset=23), Name('req_port', Load(), lineno=1118, col_offset=23), Attribute(Name('cookie', Load(), lineno=1118, col_offset=33), 'port', Load(), lineno=1118, col_offset=33)], [], None, None, lineno=1117, col_offset=16), lineno=1117, col_offset=16), Return(Name('False', Load(), lineno=1119, col_offset=23), lineno=1119, col_offset=16)], lineno=1113, col_offset=12)], [], lineno=1109, col_offset=8), Return(Name('True', Load(), lineno=1120, col_offset=15), lineno=1120, col_offset=8)], [], lineno=1108, col_offset=4), FunctionDef('return_ok_domain', arguments([Name('self', Param(), lineno=1122, col_offset=25), Name('cookie', Param(), lineno=1122, col_offset=31), Name('request', Param(), lineno=1122, col_offset=39)], None, None, []), [Assign([Tuple([Name('req_host', Store(), lineno=1123, col_offset=8), Name('erhn', Store(), lineno=1123, col_offset=18)], Store(), lineno=1123, col_offset=8)], Call(Name('eff_request_host', Load(), lineno=1123, col_offset=25), [Name('request', Load(), lineno=1123, col_offset=42)], [], None, None, lineno=1123, col_offset=25), lineno=1123, col_offset=8), Assign([Name('domain', Store(), lineno=1124, col_offset=8)], Attribute(Name('cookie', Load(), lineno=1124, col_offset=17), 'domain', Load(), lineno=1124, col_offset=17), lineno=1124, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1127, col_offset=12), 'version', Load(), lineno=1127, col_offset=12), [Eq()], [Num(0, lineno=1127, col_offset=30)], lineno=1127, col_offset=12), BinOp(Attribute(Name('self', Load(), lineno=1128, col_offset=13), 'strict_ns_domain', Load(), lineno=1128, col_offset=13), BitAnd(), Attribute(Name('self', Load(), lineno=1128, col_offset=37), 'DomainStrictNonDomain', Load(), lineno=1128, col_offset=37), lineno=1128, col_offset=13), UnaryOp(Not(), Attribute(Name('cookie', Load(), lineno=1129, col_offset=16), 'domain_specified', Load(), lineno=1129, col_offset=16), lineno=1129, col_offset=12), Compare(Name('domain', Load(), lineno=1129, col_offset=44), [NotEq()], [Name('erhn', Load(), lineno=1129, col_offset=54)], lineno=1129, col_offset=44)], lineno=1127, col_offset=12), [Expr(Call(Name('_debug', Load(), lineno=1130, col_offset=12), [Str('   cookie with unspecified domain does not string-compare equal to request domain', lineno=1130, col_offset=19)], [], None, None, lineno=1130, col_offset=12), lineno=1130, col_offset=12), Return(Name('False', Load(), lineno=1132, col_offset=19), lineno=1132, col_offset=12)], [], lineno=1127, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1134, col_offset=11), 'version', Load(), lineno=1134, col_offset=11), [Gt()], [Num(0, lineno=1134, col_offset=28)], lineno=1134, col_offset=11), UnaryOp(Not(), Call(Name('domain_match', Load(), lineno=1134, col_offset=38), [Name('erhn', Load(), lineno=1134, col_offset=51), Name('domain', Load(), lineno=1134, col_offset=57)], [], None, None, lineno=1134, col_offset=38), lineno=1134, col_offset=34)], lineno=1134, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1135, col_offset=12), [Str('   effective request-host name %s does not domain-match RFC 2965 cookie domain %s', lineno=1135, col_offset=19), Name('erhn', Load(), lineno=1136, col_offset=48), Name('domain', Load(), lineno=1136, col_offset=54)], [], None, None, lineno=1135, col_offset=12), lineno=1135, col_offset=12), Return(Name('False', Load(), lineno=1137, col_offset=19), lineno=1137, col_offset=12)], [], lineno=1134, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1138, col_offset=11), 'version', Load(), lineno=1138, col_offset=11), [Eq()], [Num(0, lineno=1138, col_offset=29)], lineno=1138, col_offset=11), UnaryOp(Not(), Call(Attribute(BinOp(Str('.', lineno=1138, col_offset=40), Add(), Name('erhn', Load(), lineno=1138, col_offset=44), lineno=1138, col_offset=40), 'endswith', Load(), lineno=1138, col_offset=40), [Name('domain', Load(), lineno=1138, col_offset=59)], [], None, None, lineno=1138, col_offset=40), lineno=1138, col_offset=35)], lineno=1138, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1139, col_offset=12), [Str('   request-host %s does not match Netscape cookie domain %s', lineno=1139, col_offset=19), Name('req_host', Load(), lineno=1140, col_offset=25), Name('domain', Load(), lineno=1140, col_offset=35)], [], None, None, lineno=1139, col_offset=12), lineno=1139, col_offset=12), Return(Name('False', Load(), lineno=1141, col_offset=19), lineno=1141, col_offset=12)], [], lineno=1138, col_offset=8), Return(Name('True', Load(), lineno=1142, col_offset=15), lineno=1142, col_offset=8)], [], lineno=1122, col_offset=4), FunctionDef('domain_return_ok', arguments([Name('self', Param(), lineno=1144, col_offset=25), Name('domain', Param(), lineno=1144, col_offset=31), Name('request', Param(), lineno=1144, col_offset=39)], None, None, []), [Assign([Tuple([Name('req_host', Store(), lineno=1147, col_offset=8), Name('erhn', Store(), lineno=1147, col_offset=18)], Store(), lineno=1147, col_offset=8)], Call(Name('eff_request_host', Load(), lineno=1147, col_offset=25), [Name('request', Load(), lineno=1147, col_offset=42)], [], None, None, lineno=1147, col_offset=25), lineno=1147, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('req_host', Load(), lineno=1148, col_offset=15), 'startswith', Load(), lineno=1148, col_offset=15), [Str('.', lineno=1148, col_offset=35)], [], None, None, lineno=1148, col_offset=15), lineno=1148, col_offset=11), [Assign([Name('req_host', Store(), lineno=1149, col_offset=12)], BinOp(Str('.', lineno=1149, col_offset=23), Add(), Name('req_host', Load(), lineno=1149, col_offset=27), lineno=1149, col_offset=23), lineno=1149, col_offset=12)], [], lineno=1148, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('erhn', Load(), lineno=1150, col_offset=15), 'startswith', Load(), lineno=1150, col_offset=15), [Str('.', lineno=1150, col_offset=31)], [], None, None, lineno=1150, col_offset=15), lineno=1150, col_offset=11), [Assign([Name('erhn', Store(), lineno=1151, col_offset=12)], BinOp(Str('.', lineno=1151, col_offset=19), Add(), Name('erhn', Load(), lineno=1151, col_offset=23), lineno=1151, col_offset=19), lineno=1151, col_offset=12)], [], lineno=1150, col_offset=8), If(UnaryOp(Not(), BoolOp(Or(), [Call(Attribute(Name('req_host', Load(), lineno=1152, col_offset=16), 'endswith', Load(), lineno=1152, col_offset=16), [Name('domain', Load(), lineno=1152, col_offset=34)], [], None, None, lineno=1152, col_offset=16), Call(Attribute(Name('erhn', Load(), lineno=1152, col_offset=45), 'endswith', Load(), lineno=1152, col_offset=45), [Name('domain', Load(), lineno=1152, col_offset=59)], [], None, None, lineno=1152, col_offset=45)], lineno=1152, col_offset=16), lineno=1152, col_offset=11), [Return(Name('False', Load(), lineno=1155, col_offset=19), lineno=1155, col_offset=12)], [], lineno=1152, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1157, col_offset=11), 'is_blocked', Load(), lineno=1157, col_offset=11), [Name('domain', Load(), lineno=1157, col_offset=27)], [], None, None, lineno=1157, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1158, col_offset=12), [Str('   domain %s is in user block-list', lineno=1158, col_offset=19), Name('domain', Load(), lineno=1158, col_offset=57)], [], None, None, lineno=1158, col_offset=12), lineno=1158, col_offset=12), Return(Name('False', Load(), lineno=1159, col_offset=19), lineno=1159, col_offset=12)], [], lineno=1157, col_offset=8), If(Call(Attribute(Name('self', Load(), lineno=1160, col_offset=11), 'is_not_allowed', Load(), lineno=1160, col_offset=11), [Name('domain', Load(), lineno=1160, col_offset=31)], [], None, None, lineno=1160, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1161, col_offset=12), [Str('   domain %s is not in user allow-list', lineno=1161, col_offset=19), Name('domain', Load(), lineno=1161, col_offset=61)], [], None, None, lineno=1161, col_offset=12), lineno=1161, col_offset=12), Return(Name('False', Load(), lineno=1162, col_offset=19), lineno=1162, col_offset=12)], [], lineno=1160, col_offset=8), Return(Name('True', Load(), lineno=1164, col_offset=15), lineno=1164, col_offset=8)], [], lineno=1144, col_offset=4), FunctionDef('path_return_ok', arguments([Name('self', Param(), lineno=1166, col_offset=23), Name('path', Param(), lineno=1166, col_offset=29), Name('request', Param(), lineno=1166, col_offset=35)], None, None, []), [Expr(Call(Name('_debug', Load(), lineno=1167, col_offset=8), [Str('- checking cookie path=%s', lineno=1167, col_offset=15), Name('path', Load(), lineno=1167, col_offset=44)], [], None, None, lineno=1167, col_offset=8), lineno=1167, col_offset=8), Assign([Name('req_path', Store(), lineno=1168, col_offset=8)], Call(Name('request_path', Load(), lineno=1168, col_offset=19), [Name('request', Load(), lineno=1168, col_offset=32)], [], None, None, lineno=1168, col_offset=19), lineno=1168, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('req_path', Load(), lineno=1169, col_offset=15), 'startswith', Load(), lineno=1169, col_offset=15), [Name('path', Load(), lineno=1169, col_offset=35)], [], None, None, lineno=1169, col_offset=15), lineno=1169, col_offset=11), [Expr(Call(Name('_debug', Load(), lineno=1170, col_offset=12), [Str('  %s does not path-match %s', lineno=1170, col_offset=19), Name('req_path', Load(), lineno=1170, col_offset=50), Name('path', Load(), lineno=1170, col_offset=60)], [], None, None, lineno=1170, col_offset=12), lineno=1170, col_offset=12), Return(Name('False', Load(), lineno=1171, col_offset=19), lineno=1171, col_offset=12)], [], lineno=1169, col_offset=8), Return(Name('True', Load(), lineno=1172, col_offset=15), lineno=1172, col_offset=8)], [], lineno=1166, col_offset=4)], [], lineno=838, col_offset=0), FunctionDef('vals_sorted_by_key', arguments([Name('adict', Param(), lineno=1175, col_offset=23)], None, None, []), [Assign([Name('keys', Store(), lineno=1176, col_offset=4)], Call(Attribute(Name('adict', Load(), lineno=1176, col_offset=11), 'keys', Load(), lineno=1176, col_offset=11), [], [], None, None, lineno=1176, col_offset=11), lineno=1176, col_offset=4), Expr(Call(Attribute(Name('keys', Load(), lineno=1177, col_offset=4), 'sort', Load(), lineno=1177, col_offset=4), [], [], None, None, lineno=1177, col_offset=4), lineno=1177, col_offset=4), Return(Call(Name('map', Load(), lineno=1178, col_offset=11), [Attribute(Name('adict', Load(), lineno=1178, col_offset=15), 'get', Load(), lineno=1178, col_offset=15), Name('keys', Load(), lineno=1178, col_offset=26)], [], None, None, lineno=1178, col_offset=11), lineno=1178, col_offset=4)], [], lineno=1175, col_offset=0), FunctionDef('deepvalues', arguments([Name('mapping', Param(), lineno=1180, col_offset=15)], None, None, []), [Expr(Str('Iterates over nested mapping, depth-first, in sorted order by key.', lineno=1181, col_offset=4), lineno=1181, col_offset=4), Assign([Name('values', Store(), lineno=1182, col_offset=4)], Call(Name('vals_sorted_by_key', Load(), lineno=1182, col_offset=13), [Name('mapping', Load(), lineno=1182, col_offset=32)], [], None, None, lineno=1182, col_offset=13), lineno=1182, col_offset=4), For(Name('obj', Store(), lineno=1183, col_offset=8), Name('values', Load(), lineno=1183, col_offset=15), [Assign([Name('mapping', Store(), lineno=1184, col_offset=8)], Name('False', Load(), lineno=1184, col_offset=18), lineno=1184, col_offset=8), TryExcept([Expr(Attribute(Name('obj', Load(), lineno=1186, col_offset=12), 'items', Load(), lineno=1186, col_offset=12), lineno=1186, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1187, col_offset=15), None, [Pass( lineno=1188, col_offset=12)], lineno=1187, col_offset=8)], [Assign([Name('mapping', Store(), lineno=1190, col_offset=12)], Name('True', Load(), lineno=1190, col_offset=22), lineno=1190, col_offset=12), For(Name('subobj', Store(), lineno=1191, col_offset=16), Call(Name('deepvalues', Load(), lineno=1191, col_offset=26), [Name('obj', Load(), lineno=1191, col_offset=37)], [], None, None, lineno=1191, col_offset=26), [Expr(Yield(Name('subobj', Load(), lineno=1192, col_offset=22), lineno=1192, col_offset=16), lineno=1192, col_offset=16)], [], lineno=1191, col_offset=12)], lineno=1185, col_offset=8), If(UnaryOp(Not(), Name('mapping', Load(), lineno=1193, col_offset=15), lineno=1193, col_offset=11), [Expr(Yield(Name('obj', Load(), lineno=1194, col_offset=18), lineno=1194, col_offset=12), lineno=1194, col_offset=12)], [], lineno=1193, col_offset=8)], [], lineno=1183, col_offset=4)], [], lineno=1180, col_offset=0), ClassDef('Absent', [], [Pass( lineno=1199, col_offset=14)], [], lineno=1199, col_offset=0), ClassDef('CookieJar', [], [Expr(Str('Collection of HTTP cookies.\n\n    You may not need to know about this class: try\n    urllib2.build_opener(HTTPCookieProcessor).open(url).\n\n    ', lineno=1207, col_offset=-1), lineno=1207, col_offset=-1), Assign([Name('non_word_re', Store(), lineno=1209, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1209, col_offset=18), 'compile', Load(), lineno=1209, col_offset=18), [Str('\\W', lineno=1209, col_offset=29)], [], None, None, lineno=1209, col_offset=18), lineno=1209, col_offset=4), Assign([Name('quote_re', Store(), lineno=1210, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1210, col_offset=15), 'compile', Load(), lineno=1210, col_offset=15), [Str('([\\"\\\\])', lineno=1210, col_offset=26)], [], None, None, lineno=1210, col_offset=15), lineno=1210, col_offset=4), Assign([Name('strict_domain_re', Store(), lineno=1211, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1211, col_offset=23), 'compile', Load(), lineno=1211, col_offset=23), [Str('\\.?[^.]*', lineno=1211, col_offset=34)], [], None, None, lineno=1211, col_offset=23), lineno=1211, col_offset=4), Assign([Name('domain_re', Store(), lineno=1212, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1212, col_offset=16), 'compile', Load(), lineno=1212, col_offset=16), [Str('[^.]*', lineno=1212, col_offset=27)], [], None, None, lineno=1212, col_offset=16), lineno=1212, col_offset=4), Assign([Name('dots_re', Store(), lineno=1213, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=1213, col_offset=14), 'compile', Load(), lineno=1213, col_offset=14), [Str('^\\.+', lineno=1213, col_offset=25)], [], None, None, lineno=1213, col_offset=14), lineno=1213, col_offset=4), Assign([Name('magic_re', Store(), lineno=1215, col_offset=4)], Str('^\\#LWP-Cookies-(\\d+\\.\\d+)', lineno=1215, col_offset=15), lineno=1215, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1217, col_offset=17), Name('policy', Param(), lineno=1217, col_offset=23)], None, None, [Name('None', Load(), lineno=1217, col_offset=30)]), [If(Compare(Name('policy', Load(), lineno=1218, col_offset=11), [Is()], [Name('None', Load(), lineno=1218, col_offset=21)], lineno=1218, col_offset=11), [Assign([Name('policy', Store(), lineno=1219, col_offset=12)], Call(Name('DefaultCookiePolicy', Load(), lineno=1219, col_offset=21), [], [], None, None, lineno=1219, col_offset=21), lineno=1219, col_offset=12)], [], lineno=1218, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1220, col_offset=8), '_policy', Store(), lineno=1220, col_offset=8)], Name('policy', Load(), lineno=1220, col_offset=23), lineno=1220, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1222, col_offset=8), '_cookies_lock', Store(), lineno=1222, col_offset=8)], Call(Attribute(Name('_threading', Load(), lineno=1222, col_offset=29), 'RLock', Load(), lineno=1222, col_offset=29), [], [], None, None, lineno=1222, col_offset=29), lineno=1222, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1223, col_offset=8), '_cookies', Store(), lineno=1223, col_offset=8)], Dict([], [], lineno=1223, col_offset=24), lineno=1223, col_offset=8)], [], lineno=1217, col_offset=4), FunctionDef('set_policy', arguments([Name('self', Param(), lineno=1225, col_offset=19), Name('policy', Param(), lineno=1225, col_offset=25)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1226, col_offset=8), '_policy', Store(), lineno=1226, col_offset=8)], Name('policy', Load(), lineno=1226, col_offset=23), lineno=1226, col_offset=8)], [], lineno=1225, col_offset=4), FunctionDef('_cookies_for_domain', arguments([Name('self', Param(), lineno=1228, col_offset=28), Name('domain', Param(), lineno=1228, col_offset=34), Name('request', Param(), lineno=1228, col_offset=42)], None, None, []), [Assign([Name('cookies', Store(), lineno=1229, col_offset=8)], List([], Load(), lineno=1229, col_offset=18), lineno=1229, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=1230, col_offset=15), '_policy', Load(), lineno=1230, col_offset=15), 'domain_return_ok', Load(), lineno=1230, col_offset=15), [Name('domain', Load(), lineno=1230, col_offset=45), Name('request', Load(), lineno=1230, col_offset=53)], [], None, None, lineno=1230, col_offset=15), lineno=1230, col_offset=11), [Return(List([], Load(), lineno=1231, col_offset=19), lineno=1231, col_offset=12)], [], lineno=1230, col_offset=8), Expr(Call(Name('_debug', Load(), lineno=1232, col_offset=8), [Str('Checking %s for cookies to return', lineno=1232, col_offset=15), Name('domain', Load(), lineno=1232, col_offset=52)], [], None, None, lineno=1232, col_offset=8), lineno=1232, col_offset=8), Assign([Name('cookies_by_path', Store(), lineno=1233, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=1233, col_offset=26), '_cookies', Load(), lineno=1233, col_offset=26), Index(Name('domain', Load(), lineno=1233, col_offset=40)), Load(), lineno=1233, col_offset=26), lineno=1233, col_offset=8), For(Name('path', Store(), lineno=1234, col_offset=12), Call(Attribute(Name('cookies_by_path', Load(), lineno=1234, col_offset=20), 'keys', Load(), lineno=1234, col_offset=20), [], [], None, None, lineno=1234, col_offset=20), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=1235, col_offset=19), '_policy', Load(), lineno=1235, col_offset=19), 'path_return_ok', Load(), lineno=1235, col_offset=19), [Name('path', Load(), lineno=1235, col_offset=47), Name('request', Load(), lineno=1235, col_offset=53)], [], None, None, lineno=1235, col_offset=19), lineno=1235, col_offset=15), [Continue( lineno=1236, col_offset=16)], [], lineno=1235, col_offset=12), Assign([Name('cookies_by_name', Store(), lineno=1237, col_offset=12)], Subscript(Name('cookies_by_path', Load(), lineno=1237, col_offset=30), Index(Name('path', Load(), lineno=1237, col_offset=46)), Load(), lineno=1237, col_offset=30), lineno=1237, col_offset=12), For(Name('cookie', Store(), lineno=1238, col_offset=16), Call(Attribute(Name('cookies_by_name', Load(), lineno=1238, col_offset=26), 'values', Load(), lineno=1238, col_offset=26), [], [], None, None, lineno=1238, col_offset=26), [If(UnaryOp(Not(), Call(Attribute(Attribute(Name('self', Load(), lineno=1239, col_offset=23), '_policy', Load(), lineno=1239, col_offset=23), 'return_ok', Load(), lineno=1239, col_offset=23), [Name('cookie', Load(), lineno=1239, col_offset=46), Name('request', Load(), lineno=1239, col_offset=54)], [], None, None, lineno=1239, col_offset=23), lineno=1239, col_offset=19), [Expr(Call(Name('_debug', Load(), lineno=1240, col_offset=20), [Str('   not returning cookie', lineno=1240, col_offset=27)], [], None, None, lineno=1240, col_offset=20), lineno=1240, col_offset=20), Continue( lineno=1241, col_offset=20)], [], lineno=1239, col_offset=16), Expr(Call(Name('_debug', Load(), lineno=1242, col_offset=16), [Str("   it's a match", lineno=1242, col_offset=23)], [], None, None, lineno=1242, col_offset=16), lineno=1242, col_offset=16), Expr(Call(Attribute(Name('cookies', Load(), lineno=1243, col_offset=16), 'append', Load(), lineno=1243, col_offset=16), [Name('cookie', Load(), lineno=1243, col_offset=31)], [], None, None, lineno=1243, col_offset=16), lineno=1243, col_offset=16)], [], lineno=1238, col_offset=12)], [], lineno=1234, col_offset=8), Return(Name('cookies', Load(), lineno=1244, col_offset=15), lineno=1244, col_offset=8)], [], lineno=1228, col_offset=4), FunctionDef('_cookies_for_request', arguments([Name('self', Param(), lineno=1246, col_offset=29), Name('request', Param(), lineno=1246, col_offset=35)], None, None, []), [Expr(Str('Return a list of cookies to be returned to server.', lineno=1247, col_offset=8), lineno=1247, col_offset=8), Assign([Name('cookies', Store(), lineno=1248, col_offset=8)], List([], Load(), lineno=1248, col_offset=18), lineno=1248, col_offset=8), For(Name('domain', Store(), lineno=1249, col_offset=12), Call(Attribute(Attribute(Name('self', Load(), lineno=1249, col_offset=22), '_cookies', Load(), lineno=1249, col_offset=22), 'keys', Load(), lineno=1249, col_offset=22), [], [], None, None, lineno=1249, col_offset=22), [Expr(Call(Attribute(Name('cookies', Load(), lineno=1250, col_offset=12), 'extend', Load(), lineno=1250, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=1250, col_offset=27), '_cookies_for_domain', Load(), lineno=1250, col_offset=27), [Name('domain', Load(), lineno=1250, col_offset=52), Name('request', Load(), lineno=1250, col_offset=60)], [], None, None, lineno=1250, col_offset=27)], [], None, None, lineno=1250, col_offset=12), lineno=1250, col_offset=12)], [], lineno=1249, col_offset=8), Return(Name('cookies', Load(), lineno=1251, col_offset=15), lineno=1251, col_offset=8)], [], lineno=1246, col_offset=4), FunctionDef('_cookie_attrs', arguments([Name('self', Param(), lineno=1253, col_offset=22), Name('cookies', Param(), lineno=1253, col_offset=28)], None, None, []), [Expr(Str('Return a list of cookie-attributes to be returned to server.\n\n        like [\'foo="bar"; $Path="/"\', ...]\n\n        The $Version attribute is also added when appropriate (currently only\n        once per request).\n\n        ', lineno=1261, col_offset=-1), lineno=1261, col_offset=-1), Expr(Call(Attribute(Name('cookies', Load(), lineno=1263, col_offset=8), 'sort', Load(), lineno=1263, col_offset=8), [], [keyword('key', Lambda(arguments([Name('arg', Param(), lineno=1263, col_offset=32)], None, None, []), Call(Name('len', Load(), lineno=1263, col_offset=37), [Attribute(Name('arg', Load(), lineno=1263, col_offset=41), 'path', Load(), lineno=1263, col_offset=41)], [], None, None, lineno=1263, col_offset=37), lineno=1263, col_offset=25)), keyword('reverse', Name('True', Load(), lineno=1263, col_offset=60))], None, None, lineno=1263, col_offset=8), lineno=1263, col_offset=8), Assign([Name('version_set', Store(), lineno=1265, col_offset=8)], Name('False', Load(), lineno=1265, col_offset=22), lineno=1265, col_offset=8), Assign([Name('attrs', Store(), lineno=1267, col_offset=8)], List([], Load(), lineno=1267, col_offset=16), lineno=1267, col_offset=8), For(Name('cookie', Store(), lineno=1268, col_offset=12), Name('cookies', Load(), lineno=1268, col_offset=22), [Assign([Name('version', Store(), lineno=1275, col_offset=12)], Attribute(Name('cookie', Load(), lineno=1275, col_offset=22), 'version', Load(), lineno=1275, col_offset=22), lineno=1275, col_offset=12), If(UnaryOp(Not(), Name('version_set', Load(), lineno=1276, col_offset=19), lineno=1276, col_offset=15), [Assign([Name('version_set', Store(), lineno=1277, col_offset=16)], Name('True', Load(), lineno=1277, col_offset=30), lineno=1277, col_offset=16), If(Compare(Name('version', Load(), lineno=1278, col_offset=19), [Gt()], [Num(0, lineno=1278, col_offset=29)], lineno=1278, col_offset=19), [Expr(Call(Attribute(Name('attrs', Load(), lineno=1279, col_offset=20), 'append', Load(), lineno=1279, col_offset=20), [BinOp(Str('$Version=%s', lineno=1279, col_offset=33), Mod(), Name('version', Load(), lineno=1279, col_offset=49), lineno=1279, col_offset=33)], [], None, None, lineno=1279, col_offset=20), lineno=1279, col_offset=20)], [], lineno=1278, col_offset=16)], [], lineno=1276, col_offset=12), If(BoolOp(And(), [Compare(Attribute(Name('cookie', Load(), lineno=1284, col_offset=17), 'value', Load(), lineno=1284, col_offset=17), [IsNot()], [Name('None', Load(), lineno=1284, col_offset=37)], lineno=1284, col_offset=17), Call(Attribute(Attribute(Name('self', Load(), lineno=1285, col_offset=16), 'non_word_re', Load(), lineno=1285, col_offset=16), 'search', Load(), lineno=1285, col_offset=16), [Attribute(Name('cookie', Load(), lineno=1285, col_offset=40), 'value', Load(), lineno=1285, col_offset=40)], [], None, None, lineno=1285, col_offset=16), Compare(Name('version', Load(), lineno=1285, col_offset=58), [Gt()], [Num(0, lineno=1285, col_offset=68)], lineno=1285, col_offset=58)], lineno=1284, col_offset=16), [Assign([Name('value', Store(), lineno=1286, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1286, col_offset=24), 'quote_re', Load(), lineno=1286, col_offset=24), 'sub', Load(), lineno=1286, col_offset=24), [Str('\\\\\\1', lineno=1286, col_offset=42), Attribute(Name('cookie', Load(), lineno=1286, col_offset=51), 'value', Load(), lineno=1286, col_offset=51)], [], None, None, lineno=1286, col_offset=24), lineno=1286, col_offset=16)], [Assign([Name('value', Store(), lineno=1288, col_offset=16)], Attribute(Name('cookie', Load(), lineno=1288, col_offset=24), 'value', Load(), lineno=1288, col_offset=24), lineno=1288, col_offset=16)], lineno=1284, col_offset=12), If(Compare(Attribute(Name('cookie', Load(), lineno=1291, col_offset=15), 'value', Load(), lineno=1291, col_offset=15), [Is()], [Name('None', Load(), lineno=1291, col_offset=31)], lineno=1291, col_offset=15), [Expr(Call(Attribute(Name('attrs', Load(), lineno=1292, col_offset=16), 'append', Load(), lineno=1292, col_offset=16), [Attribute(Name('cookie', Load(), lineno=1292, col_offset=29), 'name', Load(), lineno=1292, col_offset=29)], [], None, None, lineno=1292, col_offset=16), lineno=1292, col_offset=16)], [Expr(Call(Attribute(Name('attrs', Load(), lineno=1294, col_offset=16), 'append', Load(), lineno=1294, col_offset=16), [BinOp(Str('%s=%s', lineno=1294, col_offset=29), Mod(), Tuple([Attribute(Name('cookie', Load(), lineno=1294, col_offset=40), 'name', Load(), lineno=1294, col_offset=40), Name('value', Load(), lineno=1294, col_offset=53)], Load(), lineno=1294, col_offset=40), lineno=1294, col_offset=29)], [], None, None, lineno=1294, col_offset=16), lineno=1294, col_offset=16)], lineno=1291, col_offset=12), If(Compare(Name('version', Load(), lineno=1295, col_offset=15), [Gt()], [Num(0, lineno=1295, col_offset=25)], lineno=1295, col_offset=15), [If(Attribute(Name('cookie', Load(), lineno=1296, col_offset=19), 'path_specified', Load(), lineno=1296, col_offset=19), [Expr(Call(Attribute(Name('attrs', Load(), lineno=1297, col_offset=20), 'append', Load(), lineno=1297, col_offset=20), [BinOp(Str('$Path="%s"', lineno=1297, col_offset=33), Mod(), Attribute(Name('cookie', Load(), lineno=1297, col_offset=48), 'path', Load(), lineno=1297, col_offset=48), lineno=1297, col_offset=33)], [], None, None, lineno=1297, col_offset=20), lineno=1297, col_offset=20)], [], lineno=1296, col_offset=16), If(Call(Attribute(Attribute(Name('cookie', Load(), lineno=1298, col_offset=19), 'domain', Load(), lineno=1298, col_offset=19), 'startswith', Load(), lineno=1298, col_offset=19), [Str('.', lineno=1298, col_offset=44)], [], None, None, lineno=1298, col_offset=19), [Assign([Name('domain', Store(), lineno=1299, col_offset=20)], Attribute(Name('cookie', Load(), lineno=1299, col_offset=29), 'domain', Load(), lineno=1299, col_offset=29), lineno=1299, col_offset=20), If(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('cookie', Load(), lineno=1300, col_offset=28), 'domain_initial_dot', Load(), lineno=1300, col_offset=28), lineno=1300, col_offset=24), Call(Attribute(Name('domain', Load(), lineno=1301, col_offset=24), 'startswith', Load(), lineno=1301, col_offset=24), [Str('.', lineno=1301, col_offset=42)], [], None, None, lineno=1301, col_offset=24)], lineno=1300, col_offset=24), [Assign([Name('domain', Store(), lineno=1302, col_offset=24)], Subscript(Name('domain', Load(), lineno=1302, col_offset=33), Slice(Num(1, lineno=1302, col_offset=40), None, None), Load(), lineno=1302, col_offset=33), lineno=1302, col_offset=24)], [], lineno=1300, col_offset=20), Expr(Call(Attribute(Name('attrs', Load(), lineno=1303, col_offset=20), 'append', Load(), lineno=1303, col_offset=20), [BinOp(Str('$Domain="%s"', lineno=1303, col_offset=33), Mod(), Name('domain', Load(), lineno=1303, col_offset=50), lineno=1303, col_offset=33)], [], None, None, lineno=1303, col_offset=20), lineno=1303, col_offset=20)], [], lineno=1298, col_offset=16), If(Compare(Attribute(Name('cookie', Load(), lineno=1304, col_offset=19), 'port', Load(), lineno=1304, col_offset=19), [IsNot()], [Name('None', Load(), lineno=1304, col_offset=38)], lineno=1304, col_offset=19), [Assign([Name('p', Store(), lineno=1305, col_offset=20)], Str('$Port', lineno=1305, col_offset=24), lineno=1305, col_offset=20), If(Attribute(Name('cookie', Load(), lineno=1306, col_offset=23), 'port_specified', Load(), lineno=1306, col_offset=23), [Assign([Name('p', Store(), lineno=1307, col_offset=24)], BinOp(Name('p', Load(), lineno=1307, col_offset=28), Add(), BinOp(Str('="%s"', lineno=1307, col_offset=33), Mod(), Attribute(Name('cookie', Load(), lineno=1307, col_offset=43), 'port', Load(), lineno=1307, col_offset=43), lineno=1307, col_offset=33), lineno=1307, col_offset=28), lineno=1307, col_offset=24)], [], lineno=1306, col_offset=20), Expr(Call(Attribute(Name('attrs', Load(), lineno=1308, col_offset=20), 'append', Load(), lineno=1308, col_offset=20), [Name('p', Load(), lineno=1308, col_offset=33)], [], None, None, lineno=1308, col_offset=20), lineno=1308, col_offset=20)], [], lineno=1304, col_offset=16)], [], lineno=1295, col_offset=12)], [], lineno=1268, col_offset=8), Return(Name('attrs', Load(), lineno=1310, col_offset=15), lineno=1310, col_offset=8)], [], lineno=1253, col_offset=4), FunctionDef('add_cookie_header', arguments([Name('self', Param(), lineno=1312, col_offset=26), Name('request', Param(), lineno=1312, col_offset=32)], None, None, []), [Expr(Str('Add correct Cookie: header to request (urllib2.Request object).\n\n        The Cookie2 header is also added unless policy.hide_cookie2 is true.\n\n        ', lineno=1317, col_offset=-1), lineno=1317, col_offset=-1), Expr(Call(Name('_debug', Load(), lineno=1318, col_offset=8), [Str('add_cookie_header', lineno=1318, col_offset=15)], [], None, None, lineno=1318, col_offset=8), lineno=1318, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1319, col_offset=8), '_cookies_lock', Load(), lineno=1319, col_offset=8), 'acquire', Load(), lineno=1319, col_offset=8), [], [], None, None, lineno=1319, col_offset=8), lineno=1319, col_offset=8), TryFinally([Assign([Attribute(Attribute(Name('self', Load(), lineno=1322, col_offset=12), '_policy', Load(), lineno=1322, col_offset=12), '_now', Store(), lineno=1322, col_offset=12), Attribute(Name('self', Load(), lineno=1322, col_offset=32), '_now', Store(), lineno=1322, col_offset=32)], Call(Name('int', Load(), lineno=1322, col_offset=44), [Call(Attribute(Name('time', Load(), lineno=1322, col_offset=48), 'time', Load(), lineno=1322, col_offset=48), [], [], None, None, lineno=1322, col_offset=48)], [], None, None, lineno=1322, col_offset=44), lineno=1322, col_offset=12), Assign([Name('cookies', Store(), lineno=1324, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1324, col_offset=22), '_cookies_for_request', Load(), lineno=1324, col_offset=22), [Name('request', Load(), lineno=1324, col_offset=48)], [], None, None, lineno=1324, col_offset=22), lineno=1324, col_offset=12), Assign([Name('attrs', Store(), lineno=1326, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1326, col_offset=20), '_cookie_attrs', Load(), lineno=1326, col_offset=20), [Name('cookies', Load(), lineno=1326, col_offset=39)], [], None, None, lineno=1326, col_offset=20), lineno=1326, col_offset=12), If(Name('attrs', Load(), lineno=1327, col_offset=15), [If(UnaryOp(Not(), Call(Attribute(Name('request', Load(), lineno=1328, col_offset=23), 'has_header', Load(), lineno=1328, col_offset=23), [Str('Cookie', lineno=1328, col_offset=42)], [], None, None, lineno=1328, col_offset=23), lineno=1328, col_offset=19), [Expr(Call(Attribute(Name('request', Load(), lineno=1329, col_offset=20), 'add_unredirected_header', Load(), lineno=1329, col_offset=20), [Str('Cookie', lineno=1330, col_offset=24), Call(Attribute(Str('; ', lineno=1330, col_offset=34), 'join', Load(), lineno=1330, col_offset=34), [Name('attrs', Load(), lineno=1330, col_offset=44)], [], None, None, lineno=1330, col_offset=34)], [], None, None, lineno=1329, col_offset=20), lineno=1329, col_offset=20)], [], lineno=1328, col_offset=16)], [], lineno=1327, col_offset=12), If(BoolOp(And(), [Attribute(Attribute(Name('self', Load(), lineno=1333, col_offset=16), '_policy', Load(), lineno=1333, col_offset=16), 'rfc2965', Load(), lineno=1333, col_offset=16), UnaryOp(Not(), Attribute(Attribute(Name('self', Load(), lineno=1333, col_offset=45), '_policy', Load(), lineno=1333, col_offset=45), 'hide_cookie2', Load(), lineno=1333, col_offset=45), lineno=1333, col_offset=41), UnaryOp(Not(), Call(Attribute(Name('request', Load(), lineno=1334, col_offset=20), 'has_header', Load(), lineno=1334, col_offset=20), [Str('Cookie2', lineno=1334, col_offset=39)], [], None, None, lineno=1334, col_offset=20), lineno=1334, col_offset=16)], lineno=1333, col_offset=16), [For(Name('cookie', Store(), lineno=1335, col_offset=20), Name('cookies', Load(), lineno=1335, col_offset=30), [If(Compare(Attribute(Name('cookie', Load(), lineno=1336, col_offset=23), 'version', Load(), lineno=1336, col_offset=23), [NotEq()], [Num(1, lineno=1336, col_offset=41)], lineno=1336, col_offset=23), [Expr(Call(Attribute(Name('request', Load(), lineno=1337, col_offset=24), 'add_unredirected_header', Load(), lineno=1337, col_offset=24), [Str('Cookie2', lineno=1337, col_offset=56), Str('$Version="1"', lineno=1337, col_offset=67)], [], None, None, lineno=1337, col_offset=24), lineno=1337, col_offset=24), Break( lineno=1338, col_offset=24)], [], lineno=1336, col_offset=20)], [], lineno=1335, col_offset=16)], [], lineno=1333, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1341, col_offset=12), '_cookies_lock', Load(), lineno=1341, col_offset=12), 'release', Load(), lineno=1341, col_offset=12), [], [], None, None, lineno=1341, col_offset=12), lineno=1341, col_offset=12)], lineno=1320, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1343, col_offset=8), 'clear_expired_cookies', Load(), lineno=1343, col_offset=8), [], [], None, None, lineno=1343, col_offset=8), lineno=1343, col_offset=8)], [], lineno=1312, col_offset=4), FunctionDef('_normalized_cookie_tuples', arguments([Name('self', Param(), lineno=1345, col_offset=34), Name('attrs_set', Param(), lineno=1345, col_offset=40)], None, None, []), [Expr(Str('Return list of tuples containing normalised cookie information.\n\n        attrs_set is the list of lists of key,value pairs extracted from\n        the Set-Cookie or Set-Cookie2 headers.\n\n        Tuples are name, value, standard, rest, where name and value are the\n        cookie name and value, standard is a dictionary containing the standard\n        cookie-attributes (discard, secure, version, expires or max-age,\n        domain, path and port) and rest is a dictionary containing the rest of\n        the cookie-attributes.\n\n        ', lineno=1357, col_offset=-1), lineno=1357, col_offset=-1), Assign([Name('cookie_tuples', Store(), lineno=1358, col_offset=8)], List([], Load(), lineno=1358, col_offset=24), lineno=1358, col_offset=8), Assign([Name('boolean_attrs', Store(), lineno=1360, col_offset=8)], Tuple([Str('discard', lineno=1360, col_offset=24), Str('secure', lineno=1360, col_offset=35)], Load(), lineno=1360, col_offset=24), lineno=1360, col_offset=8), Assign([Name('value_attrs', Store(), lineno=1361, col_offset=8)], Tuple([Str('version', lineno=1361, col_offset=23), Str('expires', lineno=1362, col_offset=23), Str('max-age', lineno=1362, col_offset=34), Str('domain', lineno=1363, col_offset=23), Str('path', lineno=1363, col_offset=33), Str('port', lineno=1363, col_offset=41), Str('comment', lineno=1364, col_offset=23), Str('commenturl', lineno=1364, col_offset=34)], Load(), lineno=1361, col_offset=23), lineno=1361, col_offset=8), For(Name('cookie_attrs', Store(), lineno=1366, col_offset=12), Name('attrs_set', Load(), lineno=1366, col_offset=28), [Assign([Tuple([Name('name', Store(), lineno=1367, col_offset=12), Name('value', Store(), lineno=1367, col_offset=18)], Store(), lineno=1367, col_offset=12)], Subscript(Name('cookie_attrs', Load(), lineno=1367, col_offset=26), Index(Num(0, lineno=1367, col_offset=39)), Load(), lineno=1367, col_offset=26), lineno=1367, col_offset=12), Assign([Name('max_age_set', Store(), lineno=1377, col_offset=12)], Name('False', Load(), lineno=1377, col_offset=26), lineno=1377, col_offset=12), Assign([Name('bad_cookie', Store(), lineno=1379, col_offset=12)], Name('False', Load(), lineno=1379, col_offset=25), lineno=1379, col_offset=12), Assign([Name('standard', Store(), lineno=1381, col_offset=12)], Dict([], [], lineno=1381, col_offset=23), lineno=1381, col_offset=12), Assign([Name('rest', Store(), lineno=1382, col_offset=12)], Dict([], [], lineno=1382, col_offset=19), lineno=1382, col_offset=12), For(Tuple([Name('k', Store(), lineno=1383, col_offset=16), Name('v', Store(), lineno=1383, col_offset=19)], Store(), lineno=1383, col_offset=16), Subscript(Name('cookie_attrs', Load(), lineno=1383, col_offset=24), Slice(Num(1, lineno=1383, col_offset=37), None, None), Load(), lineno=1383, col_offset=24), [Assign([Name('lc', Store(), lineno=1384, col_offset=16)], Call(Attribute(Name('k', Load(), lineno=1384, col_offset=21), 'lower', Load(), lineno=1384, col_offset=21), [], [], None, None, lineno=1384, col_offset=21), lineno=1384, col_offset=16), If(BoolOp(Or(), [Compare(Name('lc', Load(), lineno=1386, col_offset=19), [In()], [Name('value_attrs', Load(), lineno=1386, col_offset=25)], lineno=1386, col_offset=19), Compare(Name('lc', Load(), lineno=1386, col_offset=40), [In()], [Name('boolean_attrs', Load(), lineno=1386, col_offset=46)], lineno=1386, col_offset=40)], lineno=1386, col_offset=19), [Assign([Name('k', Store(), lineno=1387, col_offset=20)], Name('lc', Load(), lineno=1387, col_offset=24), lineno=1387, col_offset=20)], [], lineno=1386, col_offset=16), If(BoolOp(And(), [Compare(Name('k', Load(), lineno=1388, col_offset=19), [In()], [Name('boolean_attrs', Load(), lineno=1388, col_offset=24)], lineno=1388, col_offset=19), Compare(Name('v', Load(), lineno=1388, col_offset=42), [Is()], [Name('None', Load(), lineno=1388, col_offset=47)], lineno=1388, col_offset=42)], lineno=1388, col_offset=19), [Assign([Name('v', Store(), lineno=1391, col_offset=20)], Name('True', Load(), lineno=1391, col_offset=24), lineno=1391, col_offset=20)], [], lineno=1388, col_offset=16), If(Compare(Name('k', Load(), lineno=1392, col_offset=19), [In()], [Name('standard', Load(), lineno=1392, col_offset=24)], lineno=1392, col_offset=19), [Continue( lineno=1394, col_offset=20)], [], lineno=1392, col_offset=16), If(Compare(Name('k', Load(), lineno=1395, col_offset=19), [Eq()], [Str('domain', lineno=1395, col_offset=24)], lineno=1395, col_offset=19), [If(Compare(Name('v', Load(), lineno=1396, col_offset=23), [Is()], [Name('None', Load(), lineno=1396, col_offset=28)], lineno=1396, col_offset=23), [Expr(Call(Name('_debug', Load(), lineno=1397, col_offset=24), [Str('   missing value for domain attribute', lineno=1397, col_offset=31)], [], None, None, lineno=1397, col_offset=24), lineno=1397, col_offset=24), Assign([Name('bad_cookie', Store(), lineno=1398, col_offset=24)], Name('True', Load(), lineno=1398, col_offset=37), lineno=1398, col_offset=24), Break( lineno=1399, col_offset=24)], [], lineno=1396, col_offset=20), Assign([Name('v', Store(), lineno=1401, col_offset=20)], Call(Attribute(Name('v', Load(), lineno=1401, col_offset=24), 'lower', Load(), lineno=1401, col_offset=24), [], [], None, None, lineno=1401, col_offset=24), lineno=1401, col_offset=20)], [], lineno=1395, col_offset=16), If(Compare(Name('k', Load(), lineno=1402, col_offset=19), [Eq()], [Str('expires', lineno=1402, col_offset=24)], lineno=1402, col_offset=19), [If(Name('max_age_set', Load(), lineno=1403, col_offset=23), [Continue( lineno=1405, col_offset=24)], [], lineno=1403, col_offset=20), If(Compare(Name('v', Load(), lineno=1406, col_offset=23), [Is()], [Name('None', Load(), lineno=1406, col_offset=28)], lineno=1406, col_offset=23), [Expr(Call(Name('_debug', Load(), lineno=1407, col_offset=24), [Str('   missing or invalid value for expires attribute: treating as session cookie', lineno=1407, col_offset=31)], [], None, None, lineno=1407, col_offset=24), lineno=1407, col_offset=24), Continue( lineno=1409, col_offset=24)], [], lineno=1406, col_offset=20)], [], lineno=1402, col_offset=16), If(Compare(Name('k', Load(), lineno=1410, col_offset=19), [Eq()], [Str('max-age', lineno=1410, col_offset=24)], lineno=1410, col_offset=19), [Assign([Name('max_age_set', Store(), lineno=1411, col_offset=20)], Name('True', Load(), lineno=1411, col_offset=34), lineno=1411, col_offset=20), TryExcept([Assign([Name('v', Store(), lineno=1413, col_offset=24)], Call(Name('int', Load(), lineno=1413, col_offset=28), [Name('v', Load(), lineno=1413, col_offset=32)], [], None, None, lineno=1413, col_offset=28), lineno=1413, col_offset=24)], [ExceptHandler(Name('ValueError', Load(), lineno=1414, col_offset=27), None, [Expr(Call(Name('_debug', Load(), lineno=1415, col_offset=24), [Str('   missing or invalid (non-numeric) value for max-age attribute', lineno=1415, col_offset=31)], [], None, None, lineno=1415, col_offset=24), lineno=1415, col_offset=24), Assign([Name('bad_cookie', Store(), lineno=1417, col_offset=24)], Name('True', Load(), lineno=1417, col_offset=37), lineno=1417, col_offset=24), Break( lineno=1418, col_offset=24)], lineno=1414, col_offset=20)], [], lineno=1412, col_offset=20), Assign([Name('k', Store(), lineno=1423, col_offset=20)], Str('expires', lineno=1423, col_offset=24), lineno=1423, col_offset=20), Assign([Name('v', Store(), lineno=1424, col_offset=20)], BinOp(Attribute(Name('self', Load(), lineno=1424, col_offset=24), '_now', Load(), lineno=1424, col_offset=24), Add(), Name('v', Load(), lineno=1424, col_offset=36), lineno=1424, col_offset=24), lineno=1424, col_offset=20)], [], lineno=1410, col_offset=16), If(BoolOp(Or(), [Compare(Name('k', Load(), lineno=1425, col_offset=20), [In()], [Name('value_attrs', Load(), lineno=1425, col_offset=25)], lineno=1425, col_offset=20), Compare(Name('k', Load(), lineno=1425, col_offset=42), [In()], [Name('boolean_attrs', Load(), lineno=1425, col_offset=47)], lineno=1425, col_offset=42)], lineno=1425, col_offset=19), [If(BoolOp(And(), [Compare(Name('v', Load(), lineno=1426, col_offset=24), [Is()], [Name('None', Load(), lineno=1426, col_offset=29)], lineno=1426, col_offset=24), Compare(Name('k', Load(), lineno=1427, col_offset=24), [NotIn()], [Tuple([Str('port', lineno=1427, col_offset=34), Str('comment', lineno=1427, col_offset=42), Str('commenturl', lineno=1427, col_offset=53)], Load(), lineno=1427, col_offset=34)], lineno=1427, col_offset=24)], lineno=1426, col_offset=24), [Expr(Call(Name('_debug', Load(), lineno=1428, col_offset=24), [BinOp(Str('   missing value for %s attribute', lineno=1428, col_offset=31), Mod(), Name('k', Load(), lineno=1428, col_offset=69), lineno=1428, col_offset=31)], [], None, None, lineno=1428, col_offset=24), lineno=1428, col_offset=24), Assign([Name('bad_cookie', Store(), lineno=1429, col_offset=24)], Name('True', Load(), lineno=1429, col_offset=37), lineno=1429, col_offset=24), Break( lineno=1430, col_offset=24)], [], lineno=1426, col_offset=20), Assign([Subscript(Name('standard', Load(), lineno=1431, col_offset=20), Index(Name('k', Load(), lineno=1431, col_offset=29)), Store(), lineno=1431, col_offset=20)], Name('v', Load(), lineno=1431, col_offset=34), lineno=1431, col_offset=20)], [Assign([Subscript(Name('rest', Load(), lineno=1433, col_offset=20), Index(Name('k', Load(), lineno=1433, col_offset=25)), Store(), lineno=1433, col_offset=20)], Name('v', Load(), lineno=1433, col_offset=30), lineno=1433, col_offset=20)], lineno=1425, col_offset=16)], [], lineno=1383, col_offset=12), If(Name('bad_cookie', Load(), lineno=1435, col_offset=15), [Continue( lineno=1436, col_offset=16)], [], lineno=1435, col_offset=12), Expr(Call(Attribute(Name('cookie_tuples', Load(), lineno=1438, col_offset=12), 'append', Load(), lineno=1438, col_offset=12), [Tuple([Name('name', Load(), lineno=1438, col_offset=34), Name('value', Load(), lineno=1438, col_offset=40), Name('standard', Load(), lineno=1438, col_offset=47), Name('rest', Load(), lineno=1438, col_offset=57)], Load(), lineno=1438, col_offset=34)], [], None, None, lineno=1438, col_offset=12), lineno=1438, col_offset=12)], [], lineno=1366, col_offset=8), Return(Name('cookie_tuples', Load(), lineno=1440, col_offset=15), lineno=1440, col_offset=8)], [], lineno=1345, col_offset=4), FunctionDef('_cookie_from_cookie_tuple', arguments([Name('self', Param(), lineno=1442, col_offset=34), Name('tup', Param(), lineno=1442, col_offset=40), Name('request', Param(), lineno=1442, col_offset=45)], None, None, []), [Assign([Tuple([Name('name', Store(), lineno=1445, col_offset=8), Name('value', Store(), lineno=1445, col_offset=14), Name('standard', Store(), lineno=1445, col_offset=21), Name('rest', Store(), lineno=1445, col_offset=31)], Store(), lineno=1445, col_offset=8)], Name('tup', Load(), lineno=1445, col_offset=38), lineno=1445, col_offset=8), Assign([Name('domain', Store(), lineno=1447, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1447, col_offset=17), 'get', Load(), lineno=1447, col_offset=17), [Str('domain', lineno=1447, col_offset=30), Name('Absent', Load(), lineno=1447, col_offset=40)], [], None, None, lineno=1447, col_offset=17), lineno=1447, col_offset=8), Assign([Name('path', Store(), lineno=1448, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1448, col_offset=15), 'get', Load(), lineno=1448, col_offset=15), [Str('path', lineno=1448, col_offset=28), Name('Absent', Load(), lineno=1448, col_offset=36)], [], None, None, lineno=1448, col_offset=15), lineno=1448, col_offset=8), Assign([Name('port', Store(), lineno=1449, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1449, col_offset=15), 'get', Load(), lineno=1449, col_offset=15), [Str('port', lineno=1449, col_offset=28), Name('Absent', Load(), lineno=1449, col_offset=36)], [], None, None, lineno=1449, col_offset=15), lineno=1449, col_offset=8), Assign([Name('expires', Store(), lineno=1450, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1450, col_offset=18), 'get', Load(), lineno=1450, col_offset=18), [Str('expires', lineno=1450, col_offset=31), Name('Absent', Load(), lineno=1450, col_offset=42)], [], None, None, lineno=1450, col_offset=18), lineno=1450, col_offset=8), Assign([Name('version', Store(), lineno=1453, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1453, col_offset=18), 'get', Load(), lineno=1453, col_offset=18), [Str('version', lineno=1453, col_offset=31), Name('None', Load(), lineno=1453, col_offset=42)], [], None, None, lineno=1453, col_offset=18), lineno=1453, col_offset=8), If(Compare(Name('version', Load(), lineno=1454, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1454, col_offset=26)], lineno=1454, col_offset=11), [TryExcept([Assign([Name('version', Store(), lineno=1456, col_offset=16)], Call(Name('int', Load(), lineno=1456, col_offset=26), [Name('version', Load(), lineno=1456, col_offset=30)], [], None, None, lineno=1456, col_offset=26), lineno=1456, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=1457, col_offset=19), None, [Return(Name('None', Load(), lineno=1458, col_offset=23), lineno=1458, col_offset=16)], lineno=1457, col_offset=12)], [], lineno=1455, col_offset=12)], [], lineno=1454, col_offset=8), Assign([Name('secure', Store(), lineno=1459, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1459, col_offset=17), 'get', Load(), lineno=1459, col_offset=17), [Str('secure', lineno=1459, col_offset=30), Name('False', Load(), lineno=1459, col_offset=40)], [], None, None, lineno=1459, col_offset=17), lineno=1459, col_offset=8), Assign([Name('discard', Store(), lineno=1461, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1461, col_offset=18), 'get', Load(), lineno=1461, col_offset=18), [Str('discard', lineno=1461, col_offset=31), Name('False', Load(), lineno=1461, col_offset=42)], [], None, None, lineno=1461, col_offset=18), lineno=1461, col_offset=8), Assign([Name('comment', Store(), lineno=1462, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1462, col_offset=18), 'get', Load(), lineno=1462, col_offset=18), [Str('comment', lineno=1462, col_offset=31), Name('None', Load(), lineno=1462, col_offset=42)], [], None, None, lineno=1462, col_offset=18), lineno=1462, col_offset=8), Assign([Name('comment_url', Store(), lineno=1463, col_offset=8)], Call(Attribute(Name('standard', Load(), lineno=1463, col_offset=22), 'get', Load(), lineno=1463, col_offset=22), [Str('commenturl', lineno=1463, col_offset=35), Name('None', Load(), lineno=1463, col_offset=49)], [], None, None, lineno=1463, col_offset=22), lineno=1463, col_offset=8), If(BoolOp(And(), [Compare(Name('path', Load(), lineno=1466, col_offset=11), [IsNot()], [Name('Absent', Load(), lineno=1466, col_offset=23)], lineno=1466, col_offset=11), Compare(Name('path', Load(), lineno=1466, col_offset=34), [NotEq()], [Str('', lineno=1466, col_offset=42)], lineno=1466, col_offset=34)], lineno=1466, col_offset=11), [Assign([Name('path_specified', Store(), lineno=1467, col_offset=12)], Name('True', Load(), lineno=1467, col_offset=29), lineno=1467, col_offset=12), Assign([Name('path', Store(), lineno=1468, col_offset=12)], Call(Name('escape_path', Load(), lineno=1468, col_offset=19), [Name('path', Load(), lineno=1468, col_offset=31)], [], None, None, lineno=1468, col_offset=19), lineno=1468, col_offset=12)], [Assign([Name('path_specified', Store(), lineno=1470, col_offset=12)], Name('False', Load(), lineno=1470, col_offset=29), lineno=1470, col_offset=12), Assign([Name('path', Store(), lineno=1471, col_offset=12)], Call(Name('request_path', Load(), lineno=1471, col_offset=19), [Name('request', Load(), lineno=1471, col_offset=32)], [], None, None, lineno=1471, col_offset=19), lineno=1471, col_offset=12), Assign([Name('i', Store(), lineno=1472, col_offset=12)], Call(Attribute(Name('path', Load(), lineno=1472, col_offset=16), 'rfind', Load(), lineno=1472, col_offset=16), [Str('/', lineno=1472, col_offset=27)], [], None, None, lineno=1472, col_offset=16), lineno=1472, col_offset=12), If(Compare(Name('i', Load(), lineno=1473, col_offset=15), [NotEq()], [Num(-1, lineno=1473, col_offset=21)], lineno=1473, col_offset=15), [If(Compare(Name('version', Load(), lineno=1474, col_offset=19), [Eq()], [Num(0, lineno=1474, col_offset=30)], lineno=1474, col_offset=19), [Assign([Name('path', Store(), lineno=1476, col_offset=20)], Subscript(Name('path', Load(), lineno=1476, col_offset=27), Slice(None, Name('i', Load(), lineno=1476, col_offset=33), None), Load(), lineno=1476, col_offset=27), lineno=1476, col_offset=20)], [Assign([Name('path', Store(), lineno=1478, col_offset=20)], Subscript(Name('path', Load(), lineno=1478, col_offset=27), Slice(None, BinOp(Name('i', Load(), lineno=1478, col_offset=33), Add(), Num(1, lineno=1478, col_offset=35), lineno=1478, col_offset=33), None), Load(), lineno=1478, col_offset=27), lineno=1478, col_offset=20)], lineno=1474, col_offset=16)], [], lineno=1473, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=1479, col_offset=15), [Name('path', Load(), lineno=1479, col_offset=19)], [], None, None, lineno=1479, col_offset=15), [Eq()], [Num(0, lineno=1479, col_offset=28)], lineno=1479, col_offset=15), [Assign([Name('path', Store(), lineno=1479, col_offset=31)], Str('/', lineno=1479, col_offset=38), lineno=1479, col_offset=31)], [], lineno=1479, col_offset=12)], lineno=1466, col_offset=8), Assign([Name('domain_specified', Store(), lineno=1482, col_offset=8)], Compare(Name('domain', Load(), lineno=1482, col_offset=27), [IsNot()], [Name('Absent', Load(), lineno=1482, col_offset=41)], lineno=1482, col_offset=27), lineno=1482, col_offset=8), Assign([Name('domain_initial_dot', Store(), lineno=1484, col_offset=8)], Name('False', Load(), lineno=1484, col_offset=29), lineno=1484, col_offset=8), If(Name('domain_specified', Load(), lineno=1485, col_offset=11), [Assign([Name('domain_initial_dot', Store(), lineno=1486, col_offset=12)], Call(Name('bool', Load(), lineno=1486, col_offset=33), [Call(Attribute(Name('domain', Load(), lineno=1486, col_offset=38), 'startswith', Load(), lineno=1486, col_offset=38), [Str('.', lineno=1486, col_offset=56)], [], None, None, lineno=1486, col_offset=38)], [], None, None, lineno=1486, col_offset=33), lineno=1486, col_offset=12)], [], lineno=1485, col_offset=8), If(Compare(Name('domain', Load(), lineno=1487, col_offset=11), [Is()], [Name('Absent', Load(), lineno=1487, col_offset=21)], lineno=1487, col_offset=11), [Assign([Tuple([Name('req_host', Store(), lineno=1488, col_offset=12), Name('erhn', Store(), lineno=1488, col_offset=22)], Store(), lineno=1488, col_offset=12)], Call(Name('eff_request_host', Load(), lineno=1488, col_offset=29), [Name('request', Load(), lineno=1488, col_offset=46)], [], None, None, lineno=1488, col_offset=29), lineno=1488, col_offset=12), Assign([Name('domain', Store(), lineno=1489, col_offset=12)], Name('erhn', Load(), lineno=1489, col_offset=21), lineno=1489, col_offset=12)], [If(UnaryOp(Not(), Call(Attribute(Name('domain', Load(), lineno=1490, col_offset=17), 'startswith', Load(), lineno=1490, col_offset=17), [Str('.', lineno=1490, col_offset=35)], [], None, None, lineno=1490, col_offset=17), lineno=1490, col_offset=13), [Assign([Name('domain', Store(), lineno=1491, col_offset=12)], BinOp(Str('.', lineno=1491, col_offset=21), Add(), Name('domain', Load(), lineno=1491, col_offset=25), lineno=1491, col_offset=21), lineno=1491, col_offset=12)], [], lineno=1490, col_offset=13)], lineno=1487, col_offset=8), Assign([Name('port_specified', Store(), lineno=1494, col_offset=8)], Name('False', Load(), lineno=1494, col_offset=25), lineno=1494, col_offset=8), If(Compare(Name('port', Load(), lineno=1495, col_offset=11), [IsNot()], [Name('Absent', Load(), lineno=1495, col_offset=23)], lineno=1495, col_offset=11), [If(Compare(Name('port', Load(), lineno=1496, col_offset=15), [Is()], [Name('None', Load(), lineno=1496, col_offset=23)], lineno=1496, col_offset=15), [Assign([Name('port', Store(), lineno=1499, col_offset=16)], Call(Name('request_port', Load(), lineno=1499, col_offset=23), [Name('request', Load(), lineno=1499, col_offset=36)], [], None, None, lineno=1499, col_offset=23), lineno=1499, col_offset=16)], [Assign([Name('port_specified', Store(), lineno=1501, col_offset=16)], Name('True', Load(), lineno=1501, col_offset=33), lineno=1501, col_offset=16), Assign([Name('port', Store(), lineno=1502, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=1502, col_offset=23), 'sub', Load(), lineno=1502, col_offset=23), [Str('\\s+', lineno=1502, col_offset=30), Str('', lineno=1502, col_offset=38), Name('port', Load(), lineno=1502, col_offset=42)], [], None, None, lineno=1502, col_offset=23), lineno=1502, col_offset=16)], lineno=1496, col_offset=12)], [Assign([Name('port', Store(), lineno=1505, col_offset=12)], Name('None', Load(), lineno=1505, col_offset=19), lineno=1505, col_offset=12)], lineno=1495, col_offset=8), If(Compare(Name('expires', Load(), lineno=1508, col_offset=11), [Is()], [Name('Absent', Load(), lineno=1508, col_offset=22)], lineno=1508, col_offset=11), [Assign([Name('expires', Store(), lineno=1509, col_offset=12)], Name('None', Load(), lineno=1509, col_offset=22), lineno=1509, col_offset=12), Assign([Name('discard', Store(), lineno=1510, col_offset=12)], Name('True', Load(), lineno=1510, col_offset=22), lineno=1510, col_offset=12)], [If(Compare(Name('expires', Load(), lineno=1511, col_offset=13), [LtE()], [Attribute(Name('self', Load(), lineno=1511, col_offset=24), '_now', Load(), lineno=1511, col_offset=24)], lineno=1511, col_offset=13), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=1515, col_offset=16), 'clear', Load(), lineno=1515, col_offset=16), [Name('domain', Load(), lineno=1515, col_offset=27), Name('path', Load(), lineno=1515, col_offset=35), Name('name', Load(), lineno=1515, col_offset=41)], [], None, None, lineno=1515, col_offset=16), lineno=1515, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=1516, col_offset=19), None, [Pass( lineno=1517, col_offset=16)], lineno=1516, col_offset=12)], [], lineno=1514, col_offset=12), Expr(Call(Name('_debug', Load(), lineno=1518, col_offset=12), [Str("Expiring cookie, domain='%s', path='%s', name='%s'", lineno=1518, col_offset=19), Name('domain', Load(), lineno=1519, col_offset=19), Name('path', Load(), lineno=1519, col_offset=27), Name('name', Load(), lineno=1519, col_offset=33)], [], None, None, lineno=1518, col_offset=12), lineno=1518, col_offset=12), Return(Name('None', Load(), lineno=1520, col_offset=19), lineno=1520, col_offset=12)], [], lineno=1511, col_offset=13)], lineno=1508, col_offset=8), Return(Call(Name('Cookie', Load(), lineno=1522, col_offset=15), [Name('version', Load(), lineno=1522, col_offset=22), Name('name', Load(), lineno=1523, col_offset=22), Name('value', Load(), lineno=1523, col_offset=28), Name('port', Load(), lineno=1524, col_offset=22), Name('port_specified', Load(), lineno=1524, col_offset=28), Name('domain', Load(), lineno=1525, col_offset=22), Name('domain_specified', Load(), lineno=1525, col_offset=30), Name('domain_initial_dot', Load(), lineno=1525, col_offset=48), Name('path', Load(), lineno=1526, col_offset=22), Name('path_specified', Load(), lineno=1526, col_offset=28), Name('secure', Load(), lineno=1527, col_offset=22), Name('expires', Load(), lineno=1528, col_offset=22), Name('discard', Load(), lineno=1529, col_offset=22), Name('comment', Load(), lineno=1530, col_offset=22), Name('comment_url', Load(), lineno=1531, col_offset=22), Name('rest', Load(), lineno=1532, col_offset=22)], [], None, None, lineno=1522, col_offset=15), lineno=1522, col_offset=8)], [], lineno=1442, col_offset=4), FunctionDef('_cookies_from_attrs_set', arguments([Name('self', Param(), lineno=1534, col_offset=32), Name('attrs_set', Param(), lineno=1534, col_offset=38), Name('request', Param(), lineno=1534, col_offset=49)], None, None, []), [Assign([Name('cookie_tuples', Store(), lineno=1535, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1535, col_offset=24), '_normalized_cookie_tuples', Load(), lineno=1535, col_offset=24), [Name('attrs_set', Load(), lineno=1535, col_offset=55)], [], None, None, lineno=1535, col_offset=24), lineno=1535, col_offset=8), Assign([Name('cookies', Store(), lineno=1537, col_offset=8)], List([], Load(), lineno=1537, col_offset=18), lineno=1537, col_offset=8), For(Name('tup', Store(), lineno=1538, col_offset=12), Name('cookie_tuples', Load(), lineno=1538, col_offset=19), [Assign([Name('cookie', Store(), lineno=1539, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1539, col_offset=21), '_cookie_from_cookie_tuple', Load(), lineno=1539, col_offset=21), [Name('tup', Load(), lineno=1539, col_offset=52), Name('request', Load(), lineno=1539, col_offset=57)], [], None, None, lineno=1539, col_offset=21), lineno=1539, col_offset=12), If(Name('cookie', Load(), lineno=1540, col_offset=15), [Expr(Call(Attribute(Name('cookies', Load(), lineno=1540, col_offset=23), 'append', Load(), lineno=1540, col_offset=23), [Name('cookie', Load(), lineno=1540, col_offset=38)], [], None, None, lineno=1540, col_offset=23), lineno=1540, col_offset=23)], [], lineno=1540, col_offset=12)], [], lineno=1538, col_offset=8), Return(Name('cookies', Load(), lineno=1541, col_offset=15), lineno=1541, col_offset=8)], [], lineno=1534, col_offset=4), FunctionDef('_process_rfc2109_cookies', arguments([Name('self', Param(), lineno=1543, col_offset=33), Name('cookies', Param(), lineno=1543, col_offset=39)], None, None, []), [Assign([Name('rfc2109_as_ns', Store(), lineno=1544, col_offset=8)], Call(Name('getattr', Load(), lineno=1544, col_offset=24), [Attribute(Name('self', Load(), lineno=1544, col_offset=32), '_policy', Load(), lineno=1544, col_offset=32), Str('rfc2109_as_netscape', lineno=1544, col_offset=46), Name('None', Load(), lineno=1544, col_offset=69)], [], None, None, lineno=1544, col_offset=24), lineno=1544, col_offset=8), If(Compare(Name('rfc2109_as_ns', Load(), lineno=1545, col_offset=11), [Is()], [Name('None', Load(), lineno=1545, col_offset=28)], lineno=1545, col_offset=11), [Assign([Name('rfc2109_as_ns', Store(), lineno=1546, col_offset=12)], UnaryOp(Not(), Attribute(Attribute(Name('self', Load(), lineno=1546, col_offset=32), '_policy', Load(), lineno=1546, col_offset=32), 'rfc2965', Load(), lineno=1546, col_offset=32), lineno=1546, col_offset=28), lineno=1546, col_offset=12)], [], lineno=1545, col_offset=8), For(Name('cookie', Store(), lineno=1547, col_offset=12), Name('cookies', Load(), lineno=1547, col_offset=22), [If(Compare(Attribute(Name('cookie', Load(), lineno=1548, col_offset=15), 'version', Load(), lineno=1548, col_offset=15), [Eq()], [Num(1, lineno=1548, col_offset=33)], lineno=1548, col_offset=15), [Assign([Attribute(Name('cookie', Load(), lineno=1549, col_offset=16), 'rfc2109', Store(), lineno=1549, col_offset=16)], Name('True', Load(), lineno=1549, col_offset=33), lineno=1549, col_offset=16), If(Name('rfc2109_as_ns', Load(), lineno=1550, col_offset=19), [Assign([Attribute(Name('cookie', Load(), lineno=1553, col_offset=20), 'version', Store(), lineno=1553, col_offset=20)], Num(0, lineno=1553, col_offset=37), lineno=1553, col_offset=20)], [], lineno=1550, col_offset=16)], [], lineno=1548, col_offset=12)], [], lineno=1547, col_offset=8)], [], lineno=1543, col_offset=4), FunctionDef('make_cookies', arguments([Name('self', Param(), lineno=1555, col_offset=21), Name('response', Param(), lineno=1555, col_offset=27), Name('request', Param(), lineno=1555, col_offset=37)], None, None, []), [Expr(Str('Return sequence of Cookie objects extracted from response object.', lineno=1556, col_offset=8), lineno=1556, col_offset=8), Assign([Name('headers', Store(), lineno=1558, col_offset=8)], Call(Attribute(Name('response', Load(), lineno=1558, col_offset=18), 'info', Load(), lineno=1558, col_offset=18), [], [], None, None, lineno=1558, col_offset=18), lineno=1558, col_offset=8), Assign([Name('rfc2965_hdrs', Store(), lineno=1559, col_offset=8)], Call(Attribute(Name('headers', Load(), lineno=1559, col_offset=23), 'getheaders', Load(), lineno=1559, col_offset=23), [Str('Set-Cookie2', lineno=1559, col_offset=42)], [], None, None, lineno=1559, col_offset=23), lineno=1559, col_offset=8), Assign([Name('ns_hdrs', Store(), lineno=1560, col_offset=8)], Call(Attribute(Name('headers', Load(), lineno=1560, col_offset=18), 'getheaders', Load(), lineno=1560, col_offset=18), [Str('Set-Cookie', lineno=1560, col_offset=37)], [], None, None, lineno=1560, col_offset=18), lineno=1560, col_offset=8), Assign([Name('rfc2965', Store(), lineno=1562, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1562, col_offset=18), '_policy', Load(), lineno=1562, col_offset=18), 'rfc2965', Load(), lineno=1562, col_offset=18), lineno=1562, col_offset=8), Assign([Name('netscape', Store(), lineno=1563, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=1563, col_offset=19), '_policy', Load(), lineno=1563, col_offset=19), 'netscape', Load(), lineno=1563, col_offset=19), lineno=1563, col_offset=8), If(BoolOp(Or(), [BoolOp(And(), [UnaryOp(Not(), Name('rfc2965_hdrs', Load(), lineno=1565, col_offset=17), lineno=1565, col_offset=13), UnaryOp(Not(), Name('ns_hdrs', Load(), lineno=1565, col_offset=38), lineno=1565, col_offset=34)], lineno=1565, col_offset=13), BoolOp(And(), [UnaryOp(Not(), Name('ns_hdrs', Load(), lineno=1566, col_offset=17), lineno=1566, col_offset=13), UnaryOp(Not(), Name('rfc2965', Load(), lineno=1566, col_offset=33), lineno=1566, col_offset=29)], lineno=1566, col_offset=13), BoolOp(And(), [UnaryOp(Not(), Name('rfc2965_hdrs', Load(), lineno=1567, col_offset=17), lineno=1567, col_offset=13), UnaryOp(Not(), Name('netscape', Load(), lineno=1567, col_offset=38), lineno=1567, col_offset=34)], lineno=1567, col_offset=13), BoolOp(And(), [UnaryOp(Not(), Name('netscape', Load(), lineno=1568, col_offset=17), lineno=1568, col_offset=13), UnaryOp(Not(), Name('rfc2965', Load(), lineno=1568, col_offset=34), lineno=1568, col_offset=30)], lineno=1568, col_offset=13)], lineno=1565, col_offset=12), [Return(List([], Load(), lineno=1569, col_offset=19), lineno=1569, col_offset=12)], [], lineno=1565, col_offset=8), TryExcept([Assign([Name('cookies', Store(), lineno=1572, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1572, col_offset=22), '_cookies_from_attrs_set', Load(), lineno=1572, col_offset=22), [Call(Name('split_header_words', Load(), lineno=1573, col_offset=16), [Name('rfc2965_hdrs', Load(), lineno=1573, col_offset=35)], [], None, None, lineno=1573, col_offset=16), Name('request', Load(), lineno=1573, col_offset=50)], [], None, None, lineno=1572, col_offset=22), lineno=1572, col_offset=12)], [ExceptHandler(Name('Exception', Load(), lineno=1574, col_offset=15), None, [Expr(Call(Name('_warn_unhandled_exception', Load(), lineno=1575, col_offset=12), [], [], None, None, lineno=1575, col_offset=12), lineno=1575, col_offset=12), Assign([Name('cookies', Store(), lineno=1576, col_offset=12)], List([], Load(), lineno=1576, col_offset=22), lineno=1576, col_offset=12)], lineno=1574, col_offset=8)], [], lineno=1571, col_offset=8), If(BoolOp(And(), [Name('ns_hdrs', Load(), lineno=1578, col_offset=11), Name('netscape', Load(), lineno=1578, col_offset=23)], lineno=1578, col_offset=11), [TryExcept([Assign([Name('ns_cookies', Store(), lineno=1581, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=1581, col_offset=29), '_cookies_from_attrs_set', Load(), lineno=1581, col_offset=29), [Call(Name('parse_ns_headers', Load(), lineno=1582, col_offset=20), [Name('ns_hdrs', Load(), lineno=1582, col_offset=37)], [], None, None, lineno=1582, col_offset=20), Name('request', Load(), lineno=1582, col_offset=47)], [], None, None, lineno=1581, col_offset=29), lineno=1581, col_offset=16)], [ExceptHandler(Name('Exception', Load(), lineno=1583, col_offset=19), None, [Expr(Call(Name('_warn_unhandled_exception', Load(), lineno=1584, col_offset=16), [], [], None, None, lineno=1584, col_offset=16), lineno=1584, col_offset=16), Assign([Name('ns_cookies', Store(), lineno=1585, col_offset=16)], List([], Load(), lineno=1585, col_offset=29), lineno=1585, col_offset=16)], lineno=1583, col_offset=12)], [], lineno=1579, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1586, col_offset=12), '_process_rfc2109_cookies', Load(), lineno=1586, col_offset=12), [Name('ns_cookies', Load(), lineno=1586, col_offset=42)], [], None, None, lineno=1586, col_offset=12), lineno=1586, col_offset=12), If(Name('rfc2965', Load(), lineno=1594, col_offset=15), [Assign([Name('lookup', Store(), lineno=1595, col_offset=16)], Dict([], [], lineno=1595, col_offset=25), lineno=1595, col_offset=16), For(Name('cookie', Store(), lineno=1596, col_offset=20), Name('cookies', Load(), lineno=1596, col_offset=30), [Assign([Subscript(Name('lookup', Load(), lineno=1597, col_offset=20), Index(Tuple([Attribute(Name('cookie', Load(), lineno=1597, col_offset=28), 'domain', Load(), lineno=1597, col_offset=28), Attribute(Name('cookie', Load(), lineno=1597, col_offset=43), 'path', Load(), lineno=1597, col_offset=43), Attribute(Name('cookie', Load(), lineno=1597, col_offset=56), 'name', Load(), lineno=1597, col_offset=56)], Load(), lineno=1597, col_offset=28)), Store(), lineno=1597, col_offset=20)], Name('None', Load(), lineno=1597, col_offset=72), lineno=1597, col_offset=20)], [], lineno=1596, col_offset=16), FunctionDef('no_matching_rfc2965', arguments([Name('ns_cookie', Param(), lineno=1599, col_offset=40), Name('lookup', Param(), lineno=1599, col_offset=51)], None, None, [Name('lookup', Load(), lineno=1599, col_offset=58)]), [Assign([Name('key', Store(), lineno=1600, col_offset=20)], Tuple([Attribute(Name('ns_cookie', Load(), lineno=1600, col_offset=26), 'domain', Load(), lineno=1600, col_offset=26), Attribute(Name('ns_cookie', Load(), lineno=1600, col_offset=44), 'path', Load(), lineno=1600, col_offset=44), Attribute(Name('ns_cookie', Load(), lineno=1600, col_offset=60), 'name', Load(), lineno=1600, col_offset=60)], Load(), lineno=1600, col_offset=26), lineno=1600, col_offset=20), Return(Compare(Name('key', Load(), lineno=1601, col_offset=27), [NotIn()], [Name('lookup', Load(), lineno=1601, col_offset=38)], lineno=1601, col_offset=27), lineno=1601, col_offset=20)], [], lineno=1599, col_offset=16), Assign([Name('ns_cookies', Store(), lineno=1602, col_offset=16)], Call(Name('filter', Load(), lineno=1602, col_offset=29), [Name('no_matching_rfc2965', Load(), lineno=1602, col_offset=36), Name('ns_cookies', Load(), lineno=1602, col_offset=57)], [], None, None, lineno=1602, col_offset=29), lineno=1602, col_offset=16)], [], lineno=1594, col_offset=12), If(Name('ns_cookies', Load(), lineno=1604, col_offset=15), [Expr(Call(Attribute(Name('cookies', Load(), lineno=1605, col_offset=16), 'extend', Load(), lineno=1605, col_offset=16), [Name('ns_cookies', Load(), lineno=1605, col_offset=31)], [], None, None, lineno=1605, col_offset=16), lineno=1605, col_offset=16)], [], lineno=1604, col_offset=12)], [], lineno=1578, col_offset=8), Return(Name('cookies', Load(), lineno=1607, col_offset=15), lineno=1607, col_offset=8)], [], lineno=1555, col_offset=4), FunctionDef('set_cookie_if_ok', arguments([Name('self', Param(), lineno=1609, col_offset=25), Name('cookie', Param(), lineno=1609, col_offset=31), Name('request', Param(), lineno=1609, col_offset=39)], None, None, []), [Expr(Str("Set a cookie if policy says it's OK to do so.", lineno=1610, col_offset=8), lineno=1610, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1611, col_offset=8), '_cookies_lock', Load(), lineno=1611, col_offset=8), 'acquire', Load(), lineno=1611, col_offset=8), [], [], None, None, lineno=1611, col_offset=8), lineno=1611, col_offset=8), TryFinally([Assign([Attribute(Attribute(Name('self', Load(), lineno=1613, col_offset=12), '_policy', Load(), lineno=1613, col_offset=12), '_now', Store(), lineno=1613, col_offset=12), Attribute(Name('self', Load(), lineno=1613, col_offset=32), '_now', Store(), lineno=1613, col_offset=32)], Call(Name('int', Load(), lineno=1613, col_offset=44), [Call(Attribute(Name('time', Load(), lineno=1613, col_offset=48), 'time', Load(), lineno=1613, col_offset=48), [], [], None, None, lineno=1613, col_offset=48)], [], None, None, lineno=1613, col_offset=44), lineno=1613, col_offset=12), If(Call(Attribute(Attribute(Name('self', Load(), lineno=1615, col_offset=15), '_policy', Load(), lineno=1615, col_offset=15), 'set_ok', Load(), lineno=1615, col_offset=15), [Name('cookie', Load(), lineno=1615, col_offset=35), Name('request', Load(), lineno=1615, col_offset=43)], [], None, None, lineno=1615, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=1616, col_offset=16), 'set_cookie', Load(), lineno=1616, col_offset=16), [Name('cookie', Load(), lineno=1616, col_offset=32)], [], None, None, lineno=1616, col_offset=16), lineno=1616, col_offset=16)], [], lineno=1615, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1620, col_offset=12), '_cookies_lock', Load(), lineno=1620, col_offset=12), 'release', Load(), lineno=1620, col_offset=12), [], [], None, None, lineno=1620, col_offset=12), lineno=1620, col_offset=12)], lineno=1612, col_offset=8)], [], lineno=1609, col_offset=4), FunctionDef('set_cookie', arguments([Name('self', Param(), lineno=1622, col_offset=19), Name('cookie', Param(), lineno=1622, col_offset=25)], None, None, []), [Expr(Str('Set a cookie, without checking whether or not it should be set.', lineno=1623, col_offset=8), lineno=1623, col_offset=8), Assign([Name('c', Store(), lineno=1624, col_offset=8)], Attribute(Name('self', Load(), lineno=1624, col_offset=12), '_cookies', Load(), lineno=1624, col_offset=12), lineno=1624, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1625, col_offset=8), '_cookies_lock', Load(), lineno=1625, col_offset=8), 'acquire', Load(), lineno=1625, col_offset=8), [], [], None, None, lineno=1625, col_offset=8), lineno=1625, col_offset=8), TryFinally([If(Compare(Attribute(Name('cookie', Load(), lineno=1627, col_offset=15), 'domain', Load(), lineno=1627, col_offset=15), [NotIn()], [Name('c', Load(), lineno=1627, col_offset=36)], lineno=1627, col_offset=15), [Assign([Subscript(Name('c', Load(), lineno=1627, col_offset=39), Index(Attribute(Name('cookie', Load(), lineno=1627, col_offset=41), 'domain', Load(), lineno=1627, col_offset=41)), Store(), lineno=1627, col_offset=39)], Dict([], [], lineno=1627, col_offset=58), lineno=1627, col_offset=39)], [], lineno=1627, col_offset=12), Assign([Name('c2', Store(), lineno=1628, col_offset=12)], Subscript(Name('c', Load(), lineno=1628, col_offset=17), Index(Attribute(Name('cookie', Load(), lineno=1628, col_offset=19), 'domain', Load(), lineno=1628, col_offset=19)), Load(), lineno=1628, col_offset=17), lineno=1628, col_offset=12), If(Compare(Attribute(Name('cookie', Load(), lineno=1629, col_offset=15), 'path', Load(), lineno=1629, col_offset=15), [NotIn()], [Name('c2', Load(), lineno=1629, col_offset=34)], lineno=1629, col_offset=15), [Assign([Subscript(Name('c2', Load(), lineno=1629, col_offset=38), Index(Attribute(Name('cookie', Load(), lineno=1629, col_offset=41), 'path', Load(), lineno=1629, col_offset=41)), Store(), lineno=1629, col_offset=38)], Dict([], [], lineno=1629, col_offset=56), lineno=1629, col_offset=38)], [], lineno=1629, col_offset=12), Assign([Name('c3', Store(), lineno=1630, col_offset=12)], Subscript(Name('c2', Load(), lineno=1630, col_offset=17), Index(Attribute(Name('cookie', Load(), lineno=1630, col_offset=20), 'path', Load(), lineno=1630, col_offset=20)), Load(), lineno=1630, col_offset=17), lineno=1630, col_offset=12), Assign([Subscript(Name('c3', Load(), lineno=1631, col_offset=12), Index(Attribute(Name('cookie', Load(), lineno=1631, col_offset=15), 'name', Load(), lineno=1631, col_offset=15)), Store(), lineno=1631, col_offset=12)], Name('cookie', Load(), lineno=1631, col_offset=30), lineno=1631, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1633, col_offset=12), '_cookies_lock', Load(), lineno=1633, col_offset=12), 'release', Load(), lineno=1633, col_offset=12), [], [], None, None, lineno=1633, col_offset=12), lineno=1633, col_offset=12)], lineno=1626, col_offset=8)], [], lineno=1622, col_offset=4), FunctionDef('extract_cookies', arguments([Name('self', Param(), lineno=1635, col_offset=24), Name('response', Param(), lineno=1635, col_offset=30), Name('request', Param(), lineno=1635, col_offset=40)], None, None, []), [Expr(Str('Extract cookies from response, where allowable given the request.', lineno=1636, col_offset=8), lineno=1636, col_offset=8), Expr(Call(Name('_debug', Load(), lineno=1637, col_offset=8), [Str('extract_cookies: %s', lineno=1637, col_offset=15), Call(Attribute(Name('response', Load(), lineno=1637, col_offset=38), 'info', Load(), lineno=1637, col_offset=38), [], [], None, None, lineno=1637, col_offset=38)], [], None, None, lineno=1637, col_offset=8), lineno=1637, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1638, col_offset=8), '_cookies_lock', Load(), lineno=1638, col_offset=8), 'acquire', Load(), lineno=1638, col_offset=8), [], [], None, None, lineno=1638, col_offset=8), lineno=1638, col_offset=8), TryFinally([Assign([Attribute(Attribute(Name('self', Load(), lineno=1640, col_offset=12), '_policy', Load(), lineno=1640, col_offset=12), '_now', Store(), lineno=1640, col_offset=12), Attribute(Name('self', Load(), lineno=1640, col_offset=32), '_now', Store(), lineno=1640, col_offset=32)], Call(Name('int', Load(), lineno=1640, col_offset=44), [Call(Attribute(Name('time', Load(), lineno=1640, col_offset=48), 'time', Load(), lineno=1640, col_offset=48), [], [], None, None, lineno=1640, col_offset=48)], [], None, None, lineno=1640, col_offset=44), lineno=1640, col_offset=12), For(Name('cookie', Store(), lineno=1642, col_offset=16), Call(Attribute(Name('self', Load(), lineno=1642, col_offset=26), 'make_cookies', Load(), lineno=1642, col_offset=26), [Name('response', Load(), lineno=1642, col_offset=44), Name('request', Load(), lineno=1642, col_offset=54)], [], None, None, lineno=1642, col_offset=26), [If(Call(Attribute(Attribute(Name('self', Load(), lineno=1643, col_offset=19), '_policy', Load(), lineno=1643, col_offset=19), 'set_ok', Load(), lineno=1643, col_offset=19), [Name('cookie', Load(), lineno=1643, col_offset=39), Name('request', Load(), lineno=1643, col_offset=47)], [], None, None, lineno=1643, col_offset=19), [Expr(Call(Name('_debug', Load(), lineno=1644, col_offset=20), [Str(' setting cookie: %s', lineno=1644, col_offset=27), Name('cookie', Load(), lineno=1644, col_offset=50)], [], None, None, lineno=1644, col_offset=20), lineno=1644, col_offset=20), Expr(Call(Attribute(Name('self', Load(), lineno=1645, col_offset=20), 'set_cookie', Load(), lineno=1645, col_offset=20), [Name('cookie', Load(), lineno=1645, col_offset=36)], [], None, None, lineno=1645, col_offset=20), lineno=1645, col_offset=20)], [], lineno=1643, col_offset=16)], [], lineno=1642, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1647, col_offset=12), '_cookies_lock', Load(), lineno=1647, col_offset=12), 'release', Load(), lineno=1647, col_offset=12), [], [], None, None, lineno=1647, col_offset=12), lineno=1647, col_offset=12)], lineno=1639, col_offset=8)], [], lineno=1635, col_offset=4), FunctionDef('clear', arguments([Name('self', Param(), lineno=1649, col_offset=14), Name('domain', Param(), lineno=1649, col_offset=20), Name('path', Param(), lineno=1649, col_offset=33), Name('name', Param(), lineno=1649, col_offset=44)], None, None, [Name('None', Load(), lineno=1649, col_offset=27), Name('None', Load(), lineno=1649, col_offset=38), Name('None', Load(), lineno=1649, col_offset=49)]), [Expr(Str('Clear some cookies.\n\n        Invoking this method without arguments will clear all cookies.  If\n        given a single argument, only cookies belonging to that domain will be\n        removed.  If given two arguments, cookies belonging to the specified\n        path within that domain are removed.  If given three arguments, then\n        the cookie with the specified name, path and domain is removed.\n\n        Raises KeyError if no matching cookie exists.\n\n        ', lineno=1660, col_offset=-1), lineno=1660, col_offset=-1), If(Compare(Name('name', Load(), lineno=1661, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1661, col_offset=23)], lineno=1661, col_offset=11), [If(BoolOp(Or(), [Compare(Name('domain', Load(), lineno=1662, col_offset=16), [Is()], [Name('None', Load(), lineno=1662, col_offset=26)], lineno=1662, col_offset=16), Compare(Name('path', Load(), lineno=1662, col_offset=36), [Is()], [Name('None', Load(), lineno=1662, col_offset=44)], lineno=1662, col_offset=36)], lineno=1662, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=1663, col_offset=22), [Str('domain and path must be given to remove a cookie by name', lineno=1664, col_offset=20)], [], None, None, lineno=1663, col_offset=22), None, None, lineno=1663, col_offset=16)], [], lineno=1662, col_offset=12), Delete([Subscript(Subscript(Subscript(Attribute(Name('self', Load(), lineno=1665, col_offset=16), '_cookies', Load(), lineno=1665, col_offset=16), Index(Name('domain', Load(), lineno=1665, col_offset=30)), Load(), lineno=1665, col_offset=16), Index(Name('path', Load(), lineno=1665, col_offset=38)), Load(), lineno=1665, col_offset=16), Index(Name('name', Load(), lineno=1665, col_offset=44)), Del(), lineno=1665, col_offset=16)], lineno=1665, col_offset=12)], [If(Compare(Name('path', Load(), lineno=1666, col_offset=13), [IsNot()], [Name('None', Load(), lineno=1666, col_offset=25)], lineno=1666, col_offset=13), [If(Compare(Name('domain', Load(), lineno=1667, col_offset=15), [Is()], [Name('None', Load(), lineno=1667, col_offset=25)], lineno=1667, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=1668, col_offset=22), [Str('domain must be given to remove cookies by path', lineno=1669, col_offset=20)], [], None, None, lineno=1668, col_offset=22), None, None, lineno=1668, col_offset=16)], [], lineno=1667, col_offset=12), Delete([Subscript(Subscript(Attribute(Name('self', Load(), lineno=1670, col_offset=16), '_cookies', Load(), lineno=1670, col_offset=16), Index(Name('domain', Load(), lineno=1670, col_offset=30)), Load(), lineno=1670, col_offset=16), Index(Name('path', Load(), lineno=1670, col_offset=38)), Del(), lineno=1670, col_offset=16)], lineno=1670, col_offset=12)], [If(Compare(Name('domain', Load(), lineno=1671, col_offset=13), [IsNot()], [Name('None', Load(), lineno=1671, col_offset=27)], lineno=1671, col_offset=13), [Delete([Subscript(Attribute(Name('self', Load(), lineno=1672, col_offset=16), '_cookies', Load(), lineno=1672, col_offset=16), Index(Name('domain', Load(), lineno=1672, col_offset=30)), Del(), lineno=1672, col_offset=16)], lineno=1672, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=1674, col_offset=12), '_cookies', Store(), lineno=1674, col_offset=12)], Dict([], [], lineno=1674, col_offset=28), lineno=1674, col_offset=12)], lineno=1671, col_offset=13)], lineno=1666, col_offset=13)], lineno=1661, col_offset=8)], [], lineno=1649, col_offset=4), FunctionDef('clear_session_cookies', arguments([Name('self', Param(), lineno=1676, col_offset=30)], None, None, []), [Expr(Str("Discard all session cookies.\n\n        Note that the .save() method won't save session cookies anyway, unless\n        you ask otherwise by passing a true ignore_discard argument.\n\n        ", lineno=1682, col_offset=-1), lineno=1682, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1683, col_offset=8), '_cookies_lock', Load(), lineno=1683, col_offset=8), 'acquire', Load(), lineno=1683, col_offset=8), [], [], None, None, lineno=1683, col_offset=8), lineno=1683, col_offset=8), TryFinally([For(Name('cookie', Store(), lineno=1685, col_offset=16), Name('self', Load(), lineno=1685, col_offset=26), [If(Attribute(Name('cookie', Load(), lineno=1686, col_offset=19), 'discard', Load(), lineno=1686, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=1687, col_offset=20), 'clear', Load(), lineno=1687, col_offset=20), [Attribute(Name('cookie', Load(), lineno=1687, col_offset=31), 'domain', Load(), lineno=1687, col_offset=31), Attribute(Name('cookie', Load(), lineno=1687, col_offset=46), 'path', Load(), lineno=1687, col_offset=46), Attribute(Name('cookie', Load(), lineno=1687, col_offset=59), 'name', Load(), lineno=1687, col_offset=59)], [], None, None, lineno=1687, col_offset=20), lineno=1687, col_offset=20)], [], lineno=1686, col_offset=16)], [], lineno=1685, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1689, col_offset=12), '_cookies_lock', Load(), lineno=1689, col_offset=12), 'release', Load(), lineno=1689, col_offset=12), [], [], None, None, lineno=1689, col_offset=12), lineno=1689, col_offset=12)], lineno=1684, col_offset=8)], [], lineno=1676, col_offset=4), FunctionDef('clear_expired_cookies', arguments([Name('self', Param(), lineno=1691, col_offset=30)], None, None, []), [Expr(Str("Discard all expired cookies.\n\n        You probably don't need to call this method: expired cookies are never\n        sent back to the server (provided you're using DefaultCookiePolicy),\n        this method is called by CookieJar itself every so often, and the\n        .save() method won't save expired cookies anyway (unless you ask\n        otherwise by passing a true ignore_expires argument).\n\n        ", lineno=1700, col_offset=-1), lineno=1700, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1701, col_offset=8), '_cookies_lock', Load(), lineno=1701, col_offset=8), 'acquire', Load(), lineno=1701, col_offset=8), [], [], None, None, lineno=1701, col_offset=8), lineno=1701, col_offset=8), TryFinally([Assign([Name('now', Store(), lineno=1703, col_offset=12)], Call(Attribute(Name('time', Load(), lineno=1703, col_offset=18), 'time', Load(), lineno=1703, col_offset=18), [], [], None, None, lineno=1703, col_offset=18), lineno=1703, col_offset=12), For(Name('cookie', Store(), lineno=1704, col_offset=16), Name('self', Load(), lineno=1704, col_offset=26), [If(Call(Attribute(Name('cookie', Load(), lineno=1705, col_offset=19), 'is_expired', Load(), lineno=1705, col_offset=19), [Name('now', Load(), lineno=1705, col_offset=37)], [], None, None, lineno=1705, col_offset=19), [Expr(Call(Attribute(Name('self', Load(), lineno=1706, col_offset=20), 'clear', Load(), lineno=1706, col_offset=20), [Attribute(Name('cookie', Load(), lineno=1706, col_offset=31), 'domain', Load(), lineno=1706, col_offset=31), Attribute(Name('cookie', Load(), lineno=1706, col_offset=46), 'path', Load(), lineno=1706, col_offset=46), Attribute(Name('cookie', Load(), lineno=1706, col_offset=59), 'name', Load(), lineno=1706, col_offset=59)], [], None, None, lineno=1706, col_offset=20), lineno=1706, col_offset=20)], [], lineno=1705, col_offset=16)], [], lineno=1704, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1708, col_offset=12), '_cookies_lock', Load(), lineno=1708, col_offset=12), 'release', Load(), lineno=1708, col_offset=12), [], [], None, None, lineno=1708, col_offset=12), lineno=1708, col_offset=12)], lineno=1702, col_offset=8)], [], lineno=1691, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=1710, col_offset=17)], None, None, []), [Return(Call(Name('deepvalues', Load(), lineno=1711, col_offset=15), [Attribute(Name('self', Load(), lineno=1711, col_offset=26), '_cookies', Load(), lineno=1711, col_offset=26)], [], None, None, lineno=1711, col_offset=15), lineno=1711, col_offset=8)], [], lineno=1710, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=1713, col_offset=16)], None, None, []), [Expr(Str('Return number of contained cookies.', lineno=1714, col_offset=8), lineno=1714, col_offset=8), Assign([Name('i', Store(), lineno=1715, col_offset=8)], Num(0, lineno=1715, col_offset=12), lineno=1715, col_offset=8), For(Name('cookie', Store(), lineno=1716, col_offset=12), Name('self', Load(), lineno=1716, col_offset=22), [Assign([Name('i', Store(), lineno=1716, col_offset=28)], BinOp(Name('i', Load(), lineno=1716, col_offset=32), Add(), Num(1, lineno=1716, col_offset=36), lineno=1716, col_offset=32), lineno=1716, col_offset=28)], [], lineno=1716, col_offset=8), Return(Name('i', Load(), lineno=1717, col_offset=15), lineno=1717, col_offset=8)], [], lineno=1713, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=1719, col_offset=17)], None, None, []), [Assign([Name('r', Store(), lineno=1720, col_offset=8)], List([], Load(), lineno=1720, col_offset=12), lineno=1720, col_offset=8), For(Name('cookie', Store(), lineno=1721, col_offset=12), Name('self', Load(), lineno=1721, col_offset=22), [Expr(Call(Attribute(Name('r', Load(), lineno=1721, col_offset=28), 'append', Load(), lineno=1721, col_offset=28), [Call(Name('repr', Load(), lineno=1721, col_offset=37), [Name('cookie', Load(), lineno=1721, col_offset=42)], [], None, None, lineno=1721, col_offset=37)], [], None, None, lineno=1721, col_offset=28), lineno=1721, col_offset=28)], [], lineno=1721, col_offset=8), Return(BinOp(Str('<%s[%s]>', lineno=1722, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=1722, col_offset=29), '__class__', Load(), lineno=1722, col_offset=29), Call(Attribute(Str(', ', lineno=1722, col_offset=45), 'join', Load(), lineno=1722, col_offset=45), [Name('r', Load(), lineno=1722, col_offset=55)], [], None, None, lineno=1722, col_offset=45)], Load(), lineno=1722, col_offset=29), lineno=1722, col_offset=15), lineno=1722, col_offset=8)], [], lineno=1719, col_offset=4), FunctionDef('__str__', arguments([Name('self', Param(), lineno=1724, col_offset=16)], None, None, []), [Assign([Name('r', Store(), lineno=1725, col_offset=8)], List([], Load(), lineno=1725, col_offset=12), lineno=1725, col_offset=8), For(Name('cookie', Store(), lineno=1726, col_offset=12), Name('self', Load(), lineno=1726, col_offset=22), [Expr(Call(Attribute(Name('r', Load(), lineno=1726, col_offset=28), 'append', Load(), lineno=1726, col_offset=28), [Call(Name('str', Load(), lineno=1726, col_offset=37), [Name('cookie', Load(), lineno=1726, col_offset=41)], [], None, None, lineno=1726, col_offset=37)], [], None, None, lineno=1726, col_offset=28), lineno=1726, col_offset=28)], [], lineno=1726, col_offset=8), Return(BinOp(Str('<%s[%s]>', lineno=1727, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=1727, col_offset=29), '__class__', Load(), lineno=1727, col_offset=29), Call(Attribute(Str(', ', lineno=1727, col_offset=45), 'join', Load(), lineno=1727, col_offset=45), [Name('r', Load(), lineno=1727, col_offset=55)], [], None, None, lineno=1727, col_offset=45)], Load(), lineno=1727, col_offset=29), lineno=1727, col_offset=15), lineno=1727, col_offset=8)], [], lineno=1724, col_offset=4)], [], lineno=1201, col_offset=0), ClassDef('LoadError', [Name('IOError', Load(), lineno=1731, col_offset=16)], [Pass( lineno=1731, col_offset=26)], [], lineno=1731, col_offset=0), ClassDef('FileCookieJar', [Name('CookieJar', Load(), lineno=1733, col_offset=20)], [Expr(Str('CookieJar that can be loaded from and saved to a file.', lineno=1734, col_offset=4), lineno=1734, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1736, col_offset=17), Name('filename', Param(), lineno=1736, col_offset=23), Name('delayload', Param(), lineno=1736, col_offset=38), Name('policy', Param(), lineno=1736, col_offset=55)], None, None, [Name('None', Load(), lineno=1736, col_offset=32), Name('False', Load(), lineno=1736, col_offset=48), Name('None', Load(), lineno=1736, col_offset=62)]), [Expr(Str('\n        Cookies are NOT loaded from the named file until either the .load() or\n        .revert() method is called.\n\n        ', lineno=1741, col_offset=-1), lineno=1741, col_offset=-1), Expr(Call(Attribute(Name('CookieJar', Load(), lineno=1742, col_offset=8), '__init__', Load(), lineno=1742, col_offset=8), [Name('self', Load(), lineno=1742, col_offset=27), Name('policy', Load(), lineno=1742, col_offset=33)], [], None, None, lineno=1742, col_offset=8), lineno=1742, col_offset=8), If(Compare(Name('filename', Load(), lineno=1743, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1743, col_offset=27)], lineno=1743, col_offset=11), [TryExcept([Expr(BinOp(Name('filename', Load(), lineno=1745, col_offset=16), Add(), Str('', lineno=1745, col_offset=25), lineno=1745, col_offset=16), lineno=1745, col_offset=16)], [ExceptHandler(None, None, [Raise(Call(Name('ValueError', Load(), lineno=1747, col_offset=22), [Str('filename must be string-like', lineno=1747, col_offset=33)], [], None, None, lineno=1747, col_offset=22), None, None, lineno=1747, col_offset=16)], lineno=1746, col_offset=12)], [], lineno=1744, col_offset=12)], [], lineno=1743, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1748, col_offset=8), 'filename', Store(), lineno=1748, col_offset=8)], Name('filename', Load(), lineno=1748, col_offset=24), lineno=1748, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1749, col_offset=8), 'delayload', Store(), lineno=1749, col_offset=8)], Call(Name('bool', Load(), lineno=1749, col_offset=25), [Name('delayload', Load(), lineno=1749, col_offset=30)], [], None, None, lineno=1749, col_offset=25), lineno=1749, col_offset=8)], [], lineno=1736, col_offset=4), FunctionDef('save', arguments([Name('self', Param(), lineno=1751, col_offset=13), Name('filename', Param(), lineno=1751, col_offset=19), Name('ignore_discard', Param(), lineno=1751, col_offset=34), Name('ignore_expires', Param(), lineno=1751, col_offset=56)], None, None, [Name('None', Load(), lineno=1751, col_offset=28), Name('False', Load(), lineno=1751, col_offset=49), Name('False', Load(), lineno=1751, col_offset=71)]), [Expr(Str('Save cookies to a file.', lineno=1752, col_offset=8), lineno=1752, col_offset=8), Raise(Call(Name('NotImplementedError', Load(), lineno=1753, col_offset=14), [], [], None, None, lineno=1753, col_offset=14), None, None, lineno=1753, col_offset=8)], [], lineno=1751, col_offset=4), FunctionDef('load', arguments([Name('self', Param(), lineno=1755, col_offset=13), Name('filename', Param(), lineno=1755, col_offset=19), Name('ignore_discard', Param(), lineno=1755, col_offset=34), Name('ignore_expires', Param(), lineno=1755, col_offset=56)], None, None, [Name('None', Load(), lineno=1755, col_offset=28), Name('False', Load(), lineno=1755, col_offset=49), Name('False', Load(), lineno=1755, col_offset=71)]), [Expr(Str('Load cookies from a file.', lineno=1756, col_offset=8), lineno=1756, col_offset=8), If(Compare(Name('filename', Load(), lineno=1757, col_offset=11), [Is()], [Name('None', Load(), lineno=1757, col_offset=23)], lineno=1757, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1758, col_offset=15), 'filename', Load(), lineno=1758, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1758, col_offset=36)], lineno=1758, col_offset=15), [Assign([Name('filename', Store(), lineno=1758, col_offset=42)], Attribute(Name('self', Load(), lineno=1758, col_offset=53), 'filename', Load(), lineno=1758, col_offset=53), lineno=1758, col_offset=42)], [Raise(Call(Name('ValueError', Load(), lineno=1759, col_offset=24), [Name('MISSING_FILENAME_TEXT', Load(), lineno=1759, col_offset=35)], [], None, None, lineno=1759, col_offset=24), None, None, lineno=1759, col_offset=18)], lineno=1758, col_offset=12)], [], lineno=1757, col_offset=8), Assign([Name('f', Store(), lineno=1761, col_offset=8)], Call(Name('open', Load(), lineno=1761, col_offset=12), [Name('filename', Load(), lineno=1761, col_offset=17)], [], None, None, lineno=1761, col_offset=12), lineno=1761, col_offset=8), TryFinally([Expr(Call(Attribute(Name('self', Load(), lineno=1763, col_offset=12), '_really_load', Load(), lineno=1763, col_offset=12), [Name('f', Load(), lineno=1763, col_offset=30), Name('filename', Load(), lineno=1763, col_offset=33), Name('ignore_discard', Load(), lineno=1763, col_offset=43), Name('ignore_expires', Load(), lineno=1763, col_offset=59)], [], None, None, lineno=1763, col_offset=12), lineno=1763, col_offset=12)], [Expr(Call(Attribute(Name('f', Load(), lineno=1765, col_offset=12), 'close', Load(), lineno=1765, col_offset=12), [], [], None, None, lineno=1765, col_offset=12), lineno=1765, col_offset=12)], lineno=1762, col_offset=8)], [], lineno=1755, col_offset=4), FunctionDef('revert', arguments([Name('self', Param(), lineno=1767, col_offset=15), Name('filename', Param(), lineno=1767, col_offset=21), Name('ignore_discard', Param(), lineno=1768, col_offset=15), Name('ignore_expires', Param(), lineno=1768, col_offset=37)], None, None, [Name('None', Load(), lineno=1767, col_offset=30), Name('False', Load(), lineno=1768, col_offset=30), Name('False', Load(), lineno=1768, col_offset=52)]), [Expr(Str("Clear all cookies and reload cookies from a saved file.\n\n        Raises LoadError (or IOError) if reversion is not successful; the\n        object's state will not be altered if this happens.\n\n        ", lineno=1774, col_offset=-1), lineno=1774, col_offset=-1), If(Compare(Name('filename', Load(), lineno=1775, col_offset=11), [Is()], [Name('None', Load(), lineno=1775, col_offset=23)], lineno=1775, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=1776, col_offset=15), 'filename', Load(), lineno=1776, col_offset=15), [IsNot()], [Name('None', Load(), lineno=1776, col_offset=36)], lineno=1776, col_offset=15), [Assign([Name('filename', Store(), lineno=1776, col_offset=42)], Attribute(Name('self', Load(), lineno=1776, col_offset=53), 'filename', Load(), lineno=1776, col_offset=53), lineno=1776, col_offset=42)], [Raise(Call(Name('ValueError', Load(), lineno=1777, col_offset=24), [Name('MISSING_FILENAME_TEXT', Load(), lineno=1777, col_offset=35)], [], None, None, lineno=1777, col_offset=24), None, None, lineno=1777, col_offset=18)], lineno=1776, col_offset=12)], [], lineno=1775, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1779, col_offset=8), '_cookies_lock', Load(), lineno=1779, col_offset=8), 'acquire', Load(), lineno=1779, col_offset=8), [], [], None, None, lineno=1779, col_offset=8), lineno=1779, col_offset=8), TryFinally([Assign([Name('old_state', Store(), lineno=1782, col_offset=12)], Call(Attribute(Name('copy', Load(), lineno=1782, col_offset=24), 'deepcopy', Load(), lineno=1782, col_offset=24), [Attribute(Name('self', Load(), lineno=1782, col_offset=38), '_cookies', Load(), lineno=1782, col_offset=38)], [], None, None, lineno=1782, col_offset=24), lineno=1782, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1783, col_offset=12), '_cookies', Store(), lineno=1783, col_offset=12)], Dict([], [], lineno=1783, col_offset=28), lineno=1783, col_offset=12), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=1785, col_offset=16), 'load', Load(), lineno=1785, col_offset=16), [Name('filename', Load(), lineno=1785, col_offset=26), Name('ignore_discard', Load(), lineno=1785, col_offset=36), Name('ignore_expires', Load(), lineno=1785, col_offset=52)], [], None, None, lineno=1785, col_offset=16), lineno=1785, col_offset=16)], [ExceptHandler(Tuple([Name('LoadError', Load(), lineno=1786, col_offset=20), Name('IOError', Load(), lineno=1786, col_offset=31)], Load(), lineno=1786, col_offset=20), None, [Assign([Attribute(Name('self', Load(), lineno=1787, col_offset=16), '_cookies', Store(), lineno=1787, col_offset=16)], Name('old_state', Load(), lineno=1787, col_offset=32), lineno=1787, col_offset=16), Raise(None, None, None, lineno=1788, col_offset=16)], lineno=1786, col_offset=12)], [], lineno=1784, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1791, col_offset=12), '_cookies_lock', Load(), lineno=1791, col_offset=12), 'release', Load(), lineno=1791, col_offset=12), [], [], None, None, lineno=1791, col_offset=12), lineno=1791, col_offset=12)], lineno=1780, col_offset=8)], [], lineno=1767, col_offset=4)], [], lineno=1733, col_offset=0), ImportFrom('_LWPCookieJar', [alias('LWPCookieJar', None), alias('lwp_cookie_str', None)], 0, lineno=1793, col_offset=0), ImportFrom('_MozillaCookieJar', [alias('MozillaCookieJar', None)], 0, lineno=1794, col_offset=0)])
