Module([Expr(Str(" Python 'bz2_codec' Codec - bz2 compression encoding\n\n    Unlike most of the other codecs which target Unicode, this codec\n    will return Python string objects for both encode and decode.\n\n    Adapted by Raymond Hettinger from zlib_codec.py which was written\n    by Marc-Andre Lemburg (mal@lemburg.com).\n\n", lineno=9, col_offset=-1), lineno=9, col_offset=-1), Import([alias('codecs', None)], lineno=10, col_offset=0), Import([alias('bz2', None)], lineno=11, col_offset=0), FunctionDef('bz2_encode', arguments([Name('input', Param(), lineno=15, col_offset=15), Name('errors', Param(), lineno=15, col_offset=21)], None, None, [Str('strict', lineno=15, col_offset=28)]), [Expr(Str(" Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    ", lineno=24, col_offset=-1), lineno=24, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=25, col_offset=11), [Eq()], [Str('strict', lineno=25, col_offset=21)], lineno=25, col_offset=11), None, lineno=25, col_offset=4), Assign([Name('output', Store(), lineno=26, col_offset=4)], Call(Attribute(Name('bz2', Load(), lineno=26, col_offset=13), 'compress', Load(), lineno=26, col_offset=13), [Name('input', Load(), lineno=26, col_offset=26)], [], None, None, lineno=26, col_offset=13), lineno=26, col_offset=4), Return(Tuple([Name('output', Load(), lineno=27, col_offset=12), Call(Name('len', Load(), lineno=27, col_offset=20), [Name('input', Load(), lineno=27, col_offset=24)], [], None, None, lineno=27, col_offset=20)], Load(), lineno=27, col_offset=12), lineno=27, col_offset=4)], [], lineno=15, col_offset=0), FunctionDef('bz2_decode', arguments([Name('input', Param(), lineno=29, col_offset=15), Name('errors', Param(), lineno=29, col_offset=21)], None, None, [Str('strict', lineno=29, col_offset=28)]), [Expr(Str(" Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    ", lineno=42, col_offset=-1), lineno=42, col_offset=-1), Assert(Compare(Name('errors', Load(), lineno=43, col_offset=11), [Eq()], [Str('strict', lineno=43, col_offset=21)], lineno=43, col_offset=11), None, lineno=43, col_offset=4), Assign([Name('output', Store(), lineno=44, col_offset=4)], Call(Attribute(Name('bz2', Load(), lineno=44, col_offset=13), 'decompress', Load(), lineno=44, col_offset=13), [Name('input', Load(), lineno=44, col_offset=28)], [], None, None, lineno=44, col_offset=13), lineno=44, col_offset=4), Return(Tuple([Name('output', Load(), lineno=45, col_offset=12), Call(Name('len', Load(), lineno=45, col_offset=20), [Name('input', Load(), lineno=45, col_offset=24)], [], None, None, lineno=45, col_offset=20)], Load(), lineno=45, col_offset=12), lineno=45, col_offset=4)], [], lineno=29, col_offset=0), ClassDef('Codec', [Attribute(Name('codecs', Load(), lineno=47, col_offset=12), 'Codec', Load(), lineno=47, col_offset=12)], [FunctionDef('encode', arguments([Name('self', Param(), lineno=49, col_offset=15), Name('input', Param(), lineno=49, col_offset=21), Name('errors', Param(), lineno=49, col_offset=28)], None, None, [Str('strict', lineno=49, col_offset=35)]), [Return(Call(Name('bz2_encode', Load(), lineno=50, col_offset=15), [Name('input', Load(), lineno=50, col_offset=26), Name('errors', Load(), lineno=50, col_offset=33)], [], None, None, lineno=50, col_offset=15), lineno=50, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=51, col_offset=15), Name('input', Param(), lineno=51, col_offset=21), Name('errors', Param(), lineno=51, col_offset=28)], None, None, [Str('strict', lineno=51, col_offset=35)]), [Return(Call(Name('bz2_decode', Load(), lineno=52, col_offset=15), [Name('input', Load(), lineno=52, col_offset=26), Name('errors', Load(), lineno=52, col_offset=33)], [], None, None, lineno=52, col_offset=15), lineno=52, col_offset=8)], [], lineno=51, col_offset=4)], [], lineno=47, col_offset=0), ClassDef('IncrementalEncoder', [Attribute(Name('codecs', Load(), lineno=54, col_offset=25), 'IncrementalEncoder', Load(), lineno=54, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=55, col_offset=17), Name('errors', Param(), lineno=55, col_offset=23)], None, None, [Str('strict', lineno=55, col_offset=30)]), [Assert(Compare(Name('errors', Load(), lineno=56, col_offset=15), [Eq()], [Str('strict', lineno=56, col_offset=25)], lineno=56, col_offset=15), None, lineno=56, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=57, col_offset=8), 'errors', Store(), lineno=57, col_offset=8)], Name('errors', Load(), lineno=57, col_offset=22), lineno=57, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=58, col_offset=8), 'compressobj', Store(), lineno=58, col_offset=8)], Call(Attribute(Name('bz2', Load(), lineno=58, col_offset=27), 'BZ2Compressor', Load(), lineno=58, col_offset=27), [], [], None, None, lineno=58, col_offset=27), lineno=58, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('encode', arguments([Name('self', Param(), lineno=60, col_offset=15), Name('input', Param(), lineno=60, col_offset=21), Name('final', Param(), lineno=60, col_offset=28)], None, None, [Name('False', Load(), lineno=60, col_offset=34)]), [If(Name('final', Load(), lineno=61, col_offset=11), [Assign([Name('c', Store(), lineno=62, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=62, col_offset=16), 'compressobj', Load(), lineno=62, col_offset=16), 'compress', Load(), lineno=62, col_offset=16), [Name('input', Load(), lineno=62, col_offset=42)], [], None, None, lineno=62, col_offset=16), lineno=62, col_offset=12), Return(BinOp(Name('c', Load(), lineno=63, col_offset=19), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=63, col_offset=23), 'compressobj', Load(), lineno=63, col_offset=23), 'flush', Load(), lineno=63, col_offset=23), [], [], None, None, lineno=63, col_offset=23), lineno=63, col_offset=19), lineno=63, col_offset=12)], [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=65, col_offset=19), 'compressobj', Load(), lineno=65, col_offset=19), 'compress', Load(), lineno=65, col_offset=19), [Name('input', Load(), lineno=65, col_offset=45)], [], None, None, lineno=65, col_offset=19), lineno=65, col_offset=12)], lineno=61, col_offset=8)], [], lineno=60, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=67, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=68, col_offset=8), 'compressobj', Store(), lineno=68, col_offset=8)], Call(Attribute(Name('bz2', Load(), lineno=68, col_offset=27), 'BZ2Compressor', Load(), lineno=68, col_offset=27), [], [], None, None, lineno=68, col_offset=27), lineno=68, col_offset=8)], [], lineno=67, col_offset=4)], [], lineno=54, col_offset=0), ClassDef('IncrementalDecoder', [Attribute(Name('codecs', Load(), lineno=70, col_offset=25), 'IncrementalDecoder', Load(), lineno=70, col_offset=25)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=71, col_offset=17), Name('errors', Param(), lineno=71, col_offset=23)], None, None, [Str('strict', lineno=71, col_offset=30)]), [Assert(Compare(Name('errors', Load(), lineno=72, col_offset=15), [Eq()], [Str('strict', lineno=72, col_offset=25)], lineno=72, col_offset=15), None, lineno=72, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=73, col_offset=8), 'errors', Store(), lineno=73, col_offset=8)], Name('errors', Load(), lineno=73, col_offset=22), lineno=73, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=74, col_offset=8), 'decompressobj', Store(), lineno=74, col_offset=8)], Call(Attribute(Name('bz2', Load(), lineno=74, col_offset=29), 'BZ2Decompressor', Load(), lineno=74, col_offset=29), [], [], None, None, lineno=74, col_offset=29), lineno=74, col_offset=8)], [], lineno=71, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=76, col_offset=15), Name('input', Param(), lineno=76, col_offset=21), Name('final', Param(), lineno=76, col_offset=28)], None, None, [Name('False', Load(), lineno=76, col_offset=34)]), [TryExcept([Return(Call(Attribute(Attribute(Name('self', Load(), lineno=78, col_offset=19), 'decompressobj', Load(), lineno=78, col_offset=19), 'decompress', Load(), lineno=78, col_offset=19), [Name('input', Load(), lineno=78, col_offset=49)], [], None, None, lineno=78, col_offset=19), lineno=78, col_offset=12)], [ExceptHandler(Name('EOFError', Load(), lineno=79, col_offset=15), None, [Return(Str('', lineno=80, col_offset=19), lineno=80, col_offset=12)], lineno=79, col_offset=8)], [], lineno=77, col_offset=8)], [], lineno=76, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=82, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=83, col_offset=8), 'decompressobj', Store(), lineno=83, col_offset=8)], Call(Attribute(Name('bz2', Load(), lineno=83, col_offset=29), 'BZ2Decompressor', Load(), lineno=83, col_offset=29), [], [], None, None, lineno=83, col_offset=29), lineno=83, col_offset=8)], [], lineno=82, col_offset=4)], [], lineno=70, col_offset=0), ClassDef('StreamWriter', [Name('Codec', Load(), lineno=85, col_offset=19), Attribute(Name('codecs', Load(), lineno=85, col_offset=25), 'StreamWriter', Load(), lineno=85, col_offset=25)], [Pass( lineno=86, col_offset=4)], [], lineno=85, col_offset=0), ClassDef('StreamReader', [Name('Codec', Load(), lineno=88, col_offset=19), Attribute(Name('codecs', Load(), lineno=88, col_offset=25), 'StreamReader', Load(), lineno=88, col_offset=25)], [Pass( lineno=89, col_offset=4)], [], lineno=88, col_offset=0), FunctionDef('getregentry', arguments([], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=94, col_offset=11), 'CodecInfo', Load(), lineno=94, col_offset=11), [], [keyword('name', Str('bz2', lineno=95, col_offset=13)), keyword('encode', Name('bz2_encode', Load(), lineno=96, col_offset=15)), keyword('decode', Name('bz2_decode', Load(), lineno=97, col_offset=15)), keyword('incrementalencoder', Name('IncrementalEncoder', Load(), lineno=98, col_offset=27)), keyword('incrementaldecoder', Name('IncrementalDecoder', Load(), lineno=99, col_offset=27)), keyword('streamwriter', Name('StreamWriter', Load(), lineno=100, col_offset=21)), keyword('streamreader', Name('StreamReader', Load(), lineno=101, col_offset=21))], None, None, lineno=94, col_offset=11), lineno=94, col_offset=4)], [], lineno=93, col_offset=0)])
