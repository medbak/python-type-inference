Module([Import([alias('sys', None)], lineno=2, col_offset=0), Import([alias('codecs', None)], lineno=3, col_offset=0), Import([alias('logging', None)], lineno=4, col_offset=0), Import([alias('StringIO', None)], lineno=5, col_offset=0), Import([alias('unittest', None)], lineno=6, col_offset=0), ImportFrom('lib2to3', [alias('main', None)], 0, lineno=8, col_offset=0), ClassDef('TestMain', [Attribute(Name('unittest', Load(), lineno=11, col_offset=15), 'TestCase', Load(), lineno=11, col_offset=15)], [FunctionDef('tearDown', arguments([Name('self', Param(), lineno=13, col_offset=17)], None, None, []), [Delete([Subscript(Attribute(Attribute(Name('logging', Load(), lineno=15, col_offset=12), 'root', Load(), lineno=15, col_offset=12), 'handlers', Load(), lineno=15, col_offset=12), Slice(None, None, None), Del(), lineno=15, col_offset=12)], lineno=15, col_offset=8)], [], lineno=13, col_offset=4), FunctionDef('run_2to3_capture', arguments([Name('self', Param(), lineno=17, col_offset=25), Name('args', Param(), lineno=17, col_offset=31), Name('in_capture', Param(), lineno=17, col_offset=37), Name('out_capture', Param(), lineno=17, col_offset=49), Name('err_capture', Param(), lineno=17, col_offset=62)], None, None, []), [Assign([Name('save_stdin', Store(), lineno=18, col_offset=8)], Attribute(Name('sys', Load(), lineno=18, col_offset=21), 'stdin', Load(), lineno=18, col_offset=21), lineno=18, col_offset=8), Assign([Name('save_stdout', Store(), lineno=19, col_offset=8)], Attribute(Name('sys', Load(), lineno=19, col_offset=22), 'stdout', Load(), lineno=19, col_offset=22), lineno=19, col_offset=8), Assign([Name('save_stderr', Store(), lineno=20, col_offset=8)], Attribute(Name('sys', Load(), lineno=20, col_offset=22), 'stderr', Load(), lineno=20, col_offset=22), lineno=20, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=21, col_offset=8), 'stdin', Store(), lineno=21, col_offset=8)], Name('in_capture', Load(), lineno=21, col_offset=20), lineno=21, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=22, col_offset=8), 'stdout', Store(), lineno=22, col_offset=8)], Name('out_capture', Load(), lineno=22, col_offset=21), lineno=22, col_offset=8), Assign([Attribute(Name('sys', Load(), lineno=23, col_offset=8), 'stderr', Store(), lineno=23, col_offset=8)], Name('err_capture', Load(), lineno=23, col_offset=21), lineno=23, col_offset=8), TryFinally([Return(Call(Attribute(Name('main', Load(), lineno=25, col_offset=19), 'main', Load(), lineno=25, col_offset=19), [Str('lib2to3.fixes', lineno=25, col_offset=29), Name('args', Load(), lineno=25, col_offset=46)], [], None, None, lineno=25, col_offset=19), lineno=25, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=27, col_offset=12), 'stdin', Store(), lineno=27, col_offset=12)], Name('save_stdin', Load(), lineno=27, col_offset=24), lineno=27, col_offset=12), Assign([Attribute(Name('sys', Load(), lineno=28, col_offset=12), 'stdout', Store(), lineno=28, col_offset=12)], Name('save_stdout', Load(), lineno=28, col_offset=25), lineno=28, col_offset=12), Assign([Attribute(Name('sys', Load(), lineno=29, col_offset=12), 'stderr', Store(), lineno=29, col_offset=12)], Name('save_stderr', Load(), lineno=29, col_offset=25), lineno=29, col_offset=12)], lineno=24, col_offset=8)], [], lineno=17, col_offset=4), FunctionDef('test_unencodable_diff', arguments([Name('self', Param(), lineno=31, col_offset=30)], None, None, []), [Assign([Name('input_stream', Store(), lineno=32, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=32, col_offset=23), 'StringIO', Load(), lineno=32, col_offset=23), [Str(u"print 'nothing'\nprint u'\xfcber'\n", lineno=32, col_offset=41)], [], None, None, lineno=32, col_offset=23), lineno=32, col_offset=8), Assign([Name('out', Store(), lineno=33, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=33, col_offset=14), 'StringIO', Load(), lineno=33, col_offset=14), [], [], None, None, lineno=33, col_offset=14), lineno=33, col_offset=8), Assign([Name('out_enc', Store(), lineno=34, col_offset=8)], Call(Call(Attribute(Name('codecs', Load(), lineno=34, col_offset=18), 'getwriter', Load(), lineno=34, col_offset=18), [Str('ascii', lineno=34, col_offset=35)], [], None, None, lineno=34, col_offset=18), [Name('out', Load(), lineno=34, col_offset=44)], [], None, None, lineno=34, col_offset=18), lineno=34, col_offset=8), Assign([Name('err', Store(), lineno=35, col_offset=8)], Call(Attribute(Name('StringIO', Load(), lineno=35, col_offset=14), 'StringIO', Load(), lineno=35, col_offset=14), [], [], None, None, lineno=35, col_offset=14), lineno=35, col_offset=8), Assign([Name('ret', Store(), lineno=36, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=36, col_offset=14), 'run_2to3_capture', Load(), lineno=36, col_offset=14), [List([Str('-', lineno=36, col_offset=37)], Load(), lineno=36, col_offset=36), Name('input_stream', Load(), lineno=36, col_offset=43), Name('out_enc', Load(), lineno=36, col_offset=57), Name('err', Load(), lineno=36, col_offset=66)], [], None, None, lineno=36, col_offset=14), lineno=36, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=37, col_offset=8), 'assertEqual', Load(), lineno=37, col_offset=8), [Name('ret', Load(), lineno=37, col_offset=25), Num(0, lineno=37, col_offset=30)], [], None, None, lineno=37, col_offset=8), lineno=37, col_offset=8), Assign([Name('output', Store(), lineno=38, col_offset=8)], Call(Attribute(Name('out', Load(), lineno=38, col_offset=17), 'getvalue', Load(), lineno=38, col_offset=17), [], [], None, None, lineno=38, col_offset=17), lineno=38, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=39, col_offset=8), 'assertTrue', Load(), lineno=39, col_offset=8), [Compare(Str("-print 'nothing'", lineno=39, col_offset=24), [In()], [Name('output', Load(), lineno=39, col_offset=46)], lineno=39, col_offset=24)], [], None, None, lineno=39, col_offset=8), lineno=39, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=8), 'assertTrue', Load(), lineno=40, col_offset=8), [Compare(Str("WARNING: couldn't encode <stdin>'s diff for your terminal", lineno=40, col_offset=24), [In()], [Call(Attribute(Name('err', Load(), lineno=41, col_offset=43), 'getvalue', Load(), lineno=41, col_offset=43), [], [], None, None, lineno=41, col_offset=43)], lineno=40, col_offset=24)], [], None, None, lineno=40, col_offset=8), lineno=40, col_offset=8)], [], lineno=31, col_offset=4)], [], lineno=11, col_offset=0)])
