Module([Import([alias('os', None)], lineno=6, col_offset=0), Import([alias('re', None)], lineno=7, col_offset=0), Import([alias('subprocess', None)], lineno=8, col_offset=0), Import([alias('sys', None)], lineno=9, col_offset=0), Import([alias('unittest', None)], lineno=10, col_offset=0), Import([alias('sysconfig', None)], lineno=11, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None), alias('findfile', None)], 0, lineno=13, col_offset=0), TryExcept([Assign([Tuple([Name('gdb_version', Store(), lineno=16, col_offset=4), Name('_', Store(), lineno=16, col_offset=17)], Store(), lineno=16, col_offset=4)], Call(Attribute(Call(Attribute(Name('subprocess', Load(), lineno=16, col_offset=21), 'Popen', Load(), lineno=16, col_offset=21), [List([Str('gdb', lineno=16, col_offset=39), Str('--version', lineno=16, col_offset=46)], Load(), lineno=16, col_offset=38)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=17, col_offset=45), 'PIPE', Load(), lineno=17, col_offset=45))], None, None, lineno=16, col_offset=21), 'communicate', Load(), lineno=16, col_offset=21), [], [], None, None, lineno=16, col_offset=21), lineno=16, col_offset=4)], [ExceptHandler(Name('OSError', Load(), lineno=18, col_offset=7), None, [Raise(Call(Attribute(Name('unittest', Load(), lineno=21, col_offset=10), 'SkipTest', Load(), lineno=21, col_offset=10), [Str("Couldn't find gdb on the path", lineno=21, col_offset=28)], [], None, None, lineno=21, col_offset=10), None, None, lineno=21, col_offset=4)], lineno=18, col_offset=0)], [], lineno=15, col_offset=0), Assign([Name('gdb_version_number', Store(), lineno=22, col_offset=0)], Call(Attribute(Name('re', Load(), lineno=22, col_offset=21), 'search', Load(), lineno=22, col_offset=21), [Str('^GNU gdb [^\\d]*(\\d+)\\.', lineno=22, col_offset=31), Name('gdb_version', Load(), lineno=22, col_offset=58)], [], None, None, lineno=22, col_offset=21), lineno=22, col_offset=0), If(Compare(Call(Name('int', Load(), lineno=23, col_offset=3), [Call(Attribute(Name('gdb_version_number', Load(), lineno=23, col_offset=7), 'group', Load(), lineno=23, col_offset=7), [Num(1, lineno=23, col_offset=32)], [], None, None, lineno=23, col_offset=7)], [], None, None, lineno=23, col_offset=3), [Lt()], [Num(7, lineno=23, col_offset=38)], lineno=23, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=24, col_offset=10), 'SkipTest', Load(), lineno=24, col_offset=10), [BinOp(Str("gdb versions before 7.0 didn't support python embedding Saw:\n", lineno=24, col_offset=28), Add(), Name('gdb_version', Load(), lineno=25, col_offset=40), lineno=24, col_offset=28)], [], None, None, lineno=24, col_offset=10), None, None, lineno=24, col_offset=4)], [], lineno=23, col_offset=0), Assign([Name('cmd', Store(), lineno=28, col_offset=0)], Str('--eval-command=python import sys; print sys.version_info', lineno=28, col_offset=6), lineno=28, col_offset=0), Assign([Name('p', Store(), lineno=29, col_offset=0)], Call(Attribute(Name('subprocess', Load(), lineno=29, col_offset=4), 'Popen', Load(), lineno=29, col_offset=4), [List([Str('gdb', lineno=29, col_offset=22), Str('--batch', lineno=29, col_offset=29), Name('cmd', Load(), lineno=29, col_offset=40)], Load(), lineno=29, col_offset=21)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=30, col_offset=28), 'PIPE', Load(), lineno=30, col_offset=28))], None, None, lineno=29, col_offset=4), lineno=29, col_offset=0), Assign([Tuple([Name('gdbpy_version', Store(), lineno=31, col_offset=0), Name('_', Store(), lineno=31, col_offset=15)], Store(), lineno=31, col_offset=0)], Call(Attribute(Name('p', Load(), lineno=31, col_offset=19), 'communicate', Load(), lineno=31, col_offset=19), [], [], None, None, lineno=31, col_offset=19), lineno=31, col_offset=0), If(Compare(Name('gdbpy_version', Load(), lineno=32, col_offset=3), [Eq()], [Str('', lineno=32, col_offset=20)], lineno=32, col_offset=3), [Raise(Call(Attribute(Name('unittest', Load(), lineno=33, col_offset=10), 'SkipTest', Load(), lineno=33, col_offset=10), [Str('gdb not built with embedded python support', lineno=33, col_offset=28)], [], None, None, lineno=33, col_offset=10), None, None, lineno=33, col_offset=4)], [], lineno=32, col_offset=0), FunctionDef('gdb_has_frame_select', arguments([], None, None, []), [Assign([Name('cmd', Store(), lineno=37, col_offset=4)], Str('--eval-command=python print(dir(gdb.Frame))', lineno=37, col_offset=10), lineno=37, col_offset=4), Assign([Name('p', Store(), lineno=38, col_offset=4)], Call(Attribute(Name('subprocess', Load(), lineno=38, col_offset=8), 'Popen', Load(), lineno=38, col_offset=8), [List([Str('gdb', lineno=38, col_offset=26), Str('--batch', lineno=38, col_offset=33), Name('cmd', Load(), lineno=38, col_offset=44)], Load(), lineno=38, col_offset=25)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=39, col_offset=32), 'PIPE', Load(), lineno=39, col_offset=32))], None, None, lineno=38, col_offset=8), lineno=38, col_offset=4), Assign([Tuple([Name('stdout', Store(), lineno=40, col_offset=4), Name('_', Store(), lineno=40, col_offset=12)], Store(), lineno=40, col_offset=4)], Call(Attribute(Name('p', Load(), lineno=40, col_offset=16), 'communicate', Load(), lineno=40, col_offset=16), [], [], None, None, lineno=40, col_offset=16), lineno=40, col_offset=4), Assign([Name('m', Store(), lineno=41, col_offset=4)], Call(Attribute(Name('re', Load(), lineno=41, col_offset=8), 'match', Load(), lineno=41, col_offset=8), [Str('.*\\[(.*)\\].*', lineno=41, col_offset=17), Name('stdout', Load(), lineno=41, col_offset=34)], [], None, None, lineno=41, col_offset=8), lineno=41, col_offset=4), If(UnaryOp(Not(), Name('m', Load(), lineno=42, col_offset=11), lineno=42, col_offset=7), [Raise(Call(Attribute(Name('unittest', Load(), lineno=43, col_offset=14), 'SkipTest', Load(), lineno=43, col_offset=14), [Str('Unable to parse output from gdb.Frame.select test', lineno=43, col_offset=32)], [], None, None, lineno=43, col_offset=14), None, None, lineno=43, col_offset=8)], [], lineno=42, col_offset=4), Assign([Name('gdb_frame_dir', Store(), lineno=44, col_offset=4)], Call(Attribute(Call(Attribute(Name('m', Load(), lineno=44, col_offset=20), 'group', Load(), lineno=44, col_offset=20), [Num(1, lineno=44, col_offset=28)], [], None, None, lineno=44, col_offset=20), 'split', Load(), lineno=44, col_offset=20), [Str(', ', lineno=44, col_offset=37)], [], None, None, lineno=44, col_offset=20), lineno=44, col_offset=4), Return(Compare(Str("'select'", lineno=45, col_offset=11), [In()], [Name('gdb_frame_dir', Load(), lineno=45, col_offset=25)], lineno=45, col_offset=11), lineno=45, col_offset=4)], [], lineno=35, col_offset=0), Assign([Name('HAS_PYUP_PYDOWN', Store(), lineno=47, col_offset=0)], Call(Name('gdb_has_frame_select', Load(), lineno=47, col_offset=18), [], [], None, None, lineno=47, col_offset=18), lineno=47, col_offset=0), ClassDef('DebuggerTests', [Attribute(Name('unittest', Load(), lineno=49, col_offset=20), 'TestCase', Load(), lineno=49, col_offset=20)], [Expr(Str('Test that the debugger can debug Python.', lineno=51, col_offset=4), lineno=51, col_offset=4), FunctionDef('run_gdb', arguments([Name('self', Param(), lineno=53, col_offset=16)], 'args', None, []), [Expr(Str('Runs gdb with the command line given by *args.\n\n        Returns its stdout, stderr\n        ', lineno=57, col_offset=-1), lineno=57, col_offset=-1), Assign([Tuple([Name('out', Store(), lineno=58, col_offset=8), Name('err', Store(), lineno=58, col_offset=13)], Store(), lineno=58, col_offset=8)], Call(Attribute(Call(Attribute(Name('subprocess', Load(), lineno=58, col_offset=19), 'Popen', Load(), lineno=58, col_offset=19), [Name('args', Load(), lineno=59, col_offset=12)], [keyword('stdout', Attribute(Name('subprocess', Load(), lineno=59, col_offset=25), 'PIPE', Load(), lineno=59, col_offset=25)), keyword('stderr', Attribute(Name('subprocess', Load(), lineno=59, col_offset=49), 'PIPE', Load(), lineno=59, col_offset=49))], None, None, lineno=58, col_offset=19), 'communicate', Load(), lineno=58, col_offset=19), [], [], None, None, lineno=58, col_offset=19), lineno=58, col_offset=8), Return(Tuple([Name('out', Load(), lineno=61, col_offset=15), Name('err', Load(), lineno=61, col_offset=20)], Load(), lineno=61, col_offset=15), lineno=61, col_offset=8)], [], lineno=53, col_offset=4), FunctionDef('get_stack_trace', arguments([Name('self', Param(), lineno=63, col_offset=24), Name('source', Param(), lineno=63, col_offset=30), Name('script', Param(), lineno=63, col_offset=43), Name('breakpoint', Param(), lineno=64, col_offset=24), Name('cmds_after_breakpoint', Param(), lineno=65, col_offset=24), Name('import_site', Param(), lineno=66, col_offset=24)], None, None, [Name('None', Load(), lineno=63, col_offset=37), Name('None', Load(), lineno=63, col_offset=50), Str('PyObject_Print', lineno=64, col_offset=35), Name('None', Load(), lineno=65, col_offset=46), Name('False', Load(), lineno=66, col_offset=36)]), [Expr(Str("\n        Run 'python -c SOURCE' under gdb with a breakpoint.\n\n        Support injecting commands after the breakpoint is reached\n\n        Returns the stdout from gdb\n\n        cmds_after_breakpoint: if provided, a list of strings: gdb commands\n        ", lineno=75, col_offset=-1), lineno=75, col_offset=-1), Assign([Name('commands', Store(), lineno=90, col_offset=8)], List([Str('set breakpoint pending yes', lineno=90, col_offset=20), BinOp(Str('break %s', lineno=91, col_offset=20), Mod(), Name('breakpoint', Load(), lineno=91, col_offset=33), lineno=91, col_offset=20), Str('run', lineno=92, col_offset=20)], Load(), lineno=90, col_offset=19), lineno=90, col_offset=8), If(Name('cmds_after_breakpoint', Load(), lineno=93, col_offset=11), [AugAssign(Name('commands', Store(), lineno=94, col_offset=12), Add(), Name('cmds_after_breakpoint', Load(), lineno=94, col_offset=24), lineno=94, col_offset=12)], [AugAssign(Name('commands', Store(), lineno=96, col_offset=12), Add(), List([Str('backtrace', lineno=96, col_offset=25)], Load(), lineno=96, col_offset=24), lineno=96, col_offset=12)], lineno=93, col_offset=8), Assign([Name('args', Store(), lineno=101, col_offset=8)], List([Str('gdb', lineno=101, col_offset=16), Str('--batch', lineno=101, col_offset=23)], Load(), lineno=101, col_offset=15), lineno=101, col_offset=8), AugAssign(Name('args', Store(), lineno=102, col_offset=8), Add(), ListComp(BinOp(Str('--eval-command=%s', lineno=102, col_offset=17), Mod(), Name('cmd', Load(), lineno=102, col_offset=39), lineno=102, col_offset=17), [comprehension(Name('cmd', Store(), lineno=102, col_offset=47), Name('commands', Load(), lineno=102, col_offset=54), [])], lineno=102, col_offset=17), lineno=102, col_offset=8), AugAssign(Name('args', Store(), lineno=103, col_offset=8), Add(), List([Str('--args', lineno=103, col_offset=17), Attribute(Name('sys', Load(), lineno=104, col_offset=17), 'executable', Load(), lineno=104, col_offset=17)], Load(), lineno=103, col_offset=16), lineno=103, col_offset=8), If(UnaryOp(Not(), Name('import_site', Load(), lineno=106, col_offset=15), lineno=106, col_offset=11), [AugAssign(Name('args', Store(), lineno=108, col_offset=12), Add(), List([Str('-S', lineno=108, col_offset=21)], Load(), lineno=108, col_offset=20), lineno=108, col_offset=12)], [], lineno=106, col_offset=8), If(Name('source', Load(), lineno=110, col_offset=11), [AugAssign(Name('args', Store(), lineno=111, col_offset=12), Add(), List([Str('-c', lineno=111, col_offset=21), Name('source', Load(), lineno=111, col_offset=27)], Load(), lineno=111, col_offset=20), lineno=111, col_offset=12)], [If(Name('script', Load(), lineno=112, col_offset=13), [AugAssign(Name('args', Store(), lineno=113, col_offset=12), Add(), List([Name('script', Load(), lineno=113, col_offset=21)], Load(), lineno=113, col_offset=20), lineno=113, col_offset=12)], [], lineno=112, col_offset=13)], lineno=110, col_offset=8), Assign([Tuple([Name('out', Store(), lineno=119, col_offset=8), Name('err', Store(), lineno=119, col_offset=13)], Store(), lineno=119, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=119, col_offset=19), 'run_gdb', Load(), lineno=119, col_offset=19), [], [], Name('args', Load(), lineno=119, col_offset=33), None, lineno=119, col_offset=19), lineno=119, col_offset=8), Assign([Name('err', Store(), lineno=122, col_offset=8)], Call(Attribute(Name('err', Load(), lineno=122, col_offset=14), 'replace', Load(), lineno=122, col_offset=14), [BinOp(Str('Function "%s" not defined.\n', lineno=122, col_offset=26), Mod(), Name('breakpoint', Load(), lineno=122, col_offset=59), lineno=122, col_offset=26), Str('', lineno=122, col_offset=71)], [], None, None, lineno=122, col_offset=14), lineno=122, col_offset=8), Assign([Name('err', Store(), lineno=124, col_offset=8)], Call(Attribute(Name('err', Load(), lineno=124, col_offset=14), 'replace', Load(), lineno=124, col_offset=14), [Str("warning: Unable to find libthread_db matching inferior's thread library, thread debugging will not be available.\n", lineno=124, col_offset=26), Str('', lineno=127, col_offset=26)], [], None, None, lineno=124, col_offset=14), lineno=124, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=130, col_offset=8), 'assertEqual', Load(), lineno=130, col_offset=8), [Name('err', Load(), lineno=130, col_offset=25), Str('', lineno=130, col_offset=30)], [], None, None, lineno=130, col_offset=8), lineno=130, col_offset=8), Return(Name('out', Load(), lineno=132, col_offset=15), lineno=132, col_offset=8)], [], lineno=63, col_offset=4), FunctionDef('get_gdb_repr', arguments([Name('self', Param(), lineno=134, col_offset=21), Name('source', Param(), lineno=134, col_offset=27), Name('cmds_after_breakpoint', Param(), lineno=135, col_offset=21), Name('import_site', Param(), lineno=136, col_offset=21)], None, None, [Name('None', Load(), lineno=135, col_offset=43), Name('False', Load(), lineno=136, col_offset=33)]), [Assign([Name('gdb_output', Store(), lineno=144, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=144, col_offset=21), 'get_stack_trace', Load(), lineno=144, col_offset=21), [Name('source', Load(), lineno=144, col_offset=42)], [keyword('breakpoint', Str('PyObject_Print', lineno=144, col_offset=61)), keyword('cmds_after_breakpoint', Name('cmds_after_breakpoint', Load(), lineno=145, col_offset=64)), keyword('import_site', Name('import_site', Load(), lineno=146, col_offset=54))], None, None, lineno=144, col_offset=21), lineno=144, col_offset=8), Assign([Name('m', Store(), lineno=150, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=150, col_offset=12), 'match', Load(), lineno=150, col_offset=12), [Str('.*#0\\s+PyObject_Print\\s+\\(\\s*op\\=\\s*(.*?),\\s+fp=.*\\).*', lineno=150, col_offset=21), Name('gdb_output', Load(), lineno=151, col_offset=21), Attribute(Name('re', Load(), lineno=151, col_offset=33), 'DOTALL', Load(), lineno=151, col_offset=33)], [], None, None, lineno=150, col_offset=12), lineno=150, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=152, col_offset=15), lineno=152, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=153, col_offset=12), 'fail', Load(), lineno=153, col_offset=12), [BinOp(Str('Unexpected gdb output: %r\n%s', lineno=153, col_offset=22), Mod(), Tuple([Name('gdb_output', Load(), lineno=153, col_offset=57), Name('gdb_output', Load(), lineno=153, col_offset=69)], Load(), lineno=153, col_offset=57), lineno=153, col_offset=22)], [], None, None, lineno=153, col_offset=12), lineno=153, col_offset=12)], [], lineno=152, col_offset=8), Return(Tuple([Call(Attribute(Name('m', Load(), lineno=154, col_offset=15), 'group', Load(), lineno=154, col_offset=15), [Num(1, lineno=154, col_offset=23)], [], None, None, lineno=154, col_offset=15), Name('gdb_output', Load(), lineno=154, col_offset=27)], Load(), lineno=154, col_offset=15), lineno=154, col_offset=8)], [], lineno=134, col_offset=4), FunctionDef('assertEndsWith', arguments([Name('self', Param(), lineno=156, col_offset=23), Name('actual', Param(), lineno=156, col_offset=29), Name('exp_end', Param(), lineno=156, col_offset=37)], None, None, []), [Expr(Str('Ensure that the given "actual" string ends with "exp_end"', lineno=157, col_offset=8), lineno=157, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=158, col_offset=8), 'assertTrue', Load(), lineno=158, col_offset=8), [Call(Attribute(Name('actual', Load(), lineno=158, col_offset=24), 'endswith', Load(), lineno=158, col_offset=24), [Name('exp_end', Load(), lineno=158, col_offset=40)], [], None, None, lineno=158, col_offset=24)], [keyword('msg', BinOp(Str('%r did not end with %r', lineno=159, col_offset=28), Mod(), Tuple([Name('actual', Load(), lineno=159, col_offset=56), Name('exp_end', Load(), lineno=159, col_offset=64)], Load(), lineno=159, col_offset=56), lineno=159, col_offset=28))], None, None, lineno=158, col_offset=8), lineno=158, col_offset=8)], [], lineno=156, col_offset=4), FunctionDef('assertMultilineMatches', arguments([Name('self', Param(), lineno=161, col_offset=31), Name('actual', Param(), lineno=161, col_offset=37), Name('pattern', Param(), lineno=161, col_offset=45)], None, None, []), [Assign([Name('m', Store(), lineno=162, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=162, col_offset=12), 'match', Load(), lineno=162, col_offset=12), [Name('pattern', Load(), lineno=162, col_offset=21), Name('actual', Load(), lineno=162, col_offset=30), Attribute(Name('re', Load(), lineno=162, col_offset=38), 'DOTALL', Load(), lineno=162, col_offset=38)], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=163, col_offset=8), 'assertTrue', Load(), lineno=163, col_offset=8), [Name('m', Load(), lineno=163, col_offset=24)], [keyword('msg', BinOp(Str('%r did not match %r', lineno=163, col_offset=31), Mod(), Tuple([Name('actual', Load(), lineno=163, col_offset=56), Name('pattern', Load(), lineno=163, col_offset=64)], Load(), lineno=163, col_offset=56), lineno=163, col_offset=31))], None, None, lineno=163, col_offset=8), lineno=163, col_offset=8)], [], lineno=161, col_offset=4), FunctionDef('get_sample_script', arguments([Name('self', Param(), lineno=165, col_offset=26)], None, None, []), [Return(Call(Name('findfile', Load(), lineno=166, col_offset=15), [Str('gdb_sample.py', lineno=166, col_offset=24)], [], None, None, lineno=166, col_offset=15), lineno=166, col_offset=8)], [], lineno=165, col_offset=4)], [], lineno=49, col_offset=0), ClassDef('PrettyPrintTests', [Name('DebuggerTests', Load(), lineno=168, col_offset=23)], [FunctionDef('test_getting_backtrace', arguments([Name('self', Param(), lineno=169, col_offset=31)], None, None, []), [Assign([Name('gdb_output', Store(), lineno=170, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=170, col_offset=21), 'get_stack_trace', Load(), lineno=170, col_offset=21), [Str('print 42', lineno=170, col_offset=42)], [], None, None, lineno=170, col_offset=21), lineno=170, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=171, col_offset=8), 'assertTrue', Load(), lineno=171, col_offset=8), [Compare(Str('PyObject_Print', lineno=171, col_offset=24), [In()], [Name('gdb_output', Load(), lineno=171, col_offset=44)], lineno=171, col_offset=24)], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('assertGdbRepr', arguments([Name('self', Param(), lineno=173, col_offset=22), Name('val', Param(), lineno=173, col_offset=28), Name('cmds_after_breakpoint', Param(), lineno=173, col_offset=33)], None, None, [Name('None', Load(), lineno=173, col_offset=55)]), [Assign([Tuple([Name('gdb_repr', Store(), lineno=176, col_offset=8), Name('gdb_output', Store(), lineno=176, col_offset=18)], Store(), lineno=176, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=176, col_offset=31), 'get_gdb_repr', Load(), lineno=176, col_offset=31), [BinOp(Str('print ', lineno=176, col_offset=49), Add(), Call(Name('repr', Load(), lineno=176, col_offset=60), [Name('val', Load(), lineno=176, col_offset=65)], [], None, None, lineno=176, col_offset=60), lineno=176, col_offset=49), Name('cmds_after_breakpoint', Load(), lineno=177, col_offset=49)], [], None, None, lineno=176, col_offset=31), lineno=176, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=178, col_offset=8), 'assertEqual', Load(), lineno=178, col_offset=8), [Name('gdb_repr', Load(), lineno=178, col_offset=25), Call(Name('repr', Load(), lineno=178, col_offset=35), [Name('val', Load(), lineno=178, col_offset=40)], [], None, None, lineno=178, col_offset=35), Name('gdb_output', Load(), lineno=178, col_offset=46)], [], None, None, lineno=178, col_offset=8), lineno=178, col_offset=8)], [], lineno=173, col_offset=4), FunctionDef('test_int', arguments([Name('self', Param(), lineno=180, col_offset=17)], None, None, []), [Expr(Str('Verify the pretty-printing of various "int" values', lineno=181, col_offset=8), lineno=181, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=182, col_offset=8), 'assertGdbRepr', Load(), lineno=182, col_offset=8), [Num(42, lineno=182, col_offset=27)], [], None, None, lineno=182, col_offset=8), lineno=182, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=183, col_offset=8), 'assertGdbRepr', Load(), lineno=183, col_offset=8), [Num(0, lineno=183, col_offset=27)], [], None, None, lineno=183, col_offset=8), lineno=183, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=184, col_offset=8), 'assertGdbRepr', Load(), lineno=184, col_offset=8), [Num(-7, lineno=184, col_offset=28)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=185, col_offset=8), 'assertGdbRepr', Load(), lineno=185, col_offset=8), [Attribute(Name('sys', Load(), lineno=185, col_offset=27), 'maxint', Load(), lineno=185, col_offset=27)], [], None, None, lineno=185, col_offset=8), lineno=185, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=186, col_offset=8), 'assertGdbRepr', Load(), lineno=186, col_offset=8), [UnaryOp(USub(), Attribute(Name('sys', Load(), lineno=186, col_offset=28), 'maxint', Load(), lineno=186, col_offset=28), lineno=186, col_offset=27)], [], None, None, lineno=186, col_offset=8), lineno=186, col_offset=8)], [], lineno=180, col_offset=4), FunctionDef('test_long', arguments([Name('self', Param(), lineno=188, col_offset=18)], None, None, []), [Expr(Str('Verify the pretty-printing of various "long" values', lineno=189, col_offset=8), lineno=189, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=190, col_offset=8), 'assertGdbRepr', Load(), lineno=190, col_offset=8), [Num(0L, lineno=190, col_offset=27)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=8), 'assertGdbRepr', Load(), lineno=191, col_offset=8), [Num(1000000000000L, lineno=191, col_offset=27)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=192, col_offset=8), 'assertGdbRepr', Load(), lineno=192, col_offset=8), [Num(-1L, lineno=192, col_offset=28)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=8), 'assertGdbRepr', Load(), lineno=193, col_offset=8), [Num(-1000000000000000L, lineno=193, col_offset=28)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8)], [], lineno=188, col_offset=4), FunctionDef('test_singletons', arguments([Name('self', Param(), lineno=195, col_offset=24)], None, None, []), [Expr(Str('Verify the pretty-printing of True, False and None', lineno=196, col_offset=8), lineno=196, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=197, col_offset=8), 'assertGdbRepr', Load(), lineno=197, col_offset=8), [Name('True', Load(), lineno=197, col_offset=27)], [], None, None, lineno=197, col_offset=8), lineno=197, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=198, col_offset=8), 'assertGdbRepr', Load(), lineno=198, col_offset=8), [Name('False', Load(), lineno=198, col_offset=27)], [], None, None, lineno=198, col_offset=8), lineno=198, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=199, col_offset=8), 'assertGdbRepr', Load(), lineno=199, col_offset=8), [Name('None', Load(), lineno=199, col_offset=27)], [], None, None, lineno=199, col_offset=8), lineno=199, col_offset=8)], [], lineno=195, col_offset=4), FunctionDef('test_dicts', arguments([Name('self', Param(), lineno=201, col_offset=19)], None, None, []), [Expr(Str('Verify the pretty-printing of dictionaries', lineno=202, col_offset=8), lineno=202, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=8), 'assertGdbRepr', Load(), lineno=203, col_offset=8), [Dict([], [], lineno=203, col_offset=27)], [], None, None, lineno=203, col_offset=8), lineno=203, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=204, col_offset=8), 'assertGdbRepr', Load(), lineno=204, col_offset=8), [Dict([Str('foo', lineno=204, col_offset=28)], [Str('bar', lineno=204, col_offset=35)], lineno=204, col_offset=27)], [], None, None, lineno=204, col_offset=8), lineno=204, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=205, col_offset=8), 'assertGdbRepr', Load(), lineno=205, col_offset=8), [Dict([Str('foo', lineno=205, col_offset=28), Str('douglas', lineno=205, col_offset=42)], [Str('bar', lineno=205, col_offset=35), Num(42, lineno=205, col_offset=52)], lineno=205, col_offset=27)], [], None, None, lineno=205, col_offset=8), lineno=205, col_offset=8)], [], lineno=201, col_offset=4), FunctionDef('test_lists', arguments([Name('self', Param(), lineno=207, col_offset=19)], None, None, []), [Expr(Str('Verify the pretty-printing of lists', lineno=208, col_offset=8), lineno=208, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=209, col_offset=8), 'assertGdbRepr', Load(), lineno=209, col_offset=8), [List([], Load(), lineno=209, col_offset=27)], [], None, None, lineno=209, col_offset=8), lineno=209, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=210, col_offset=8), 'assertGdbRepr', Load(), lineno=210, col_offset=8), [Call(Name('range', Load(), lineno=210, col_offset=27), [Num(5, lineno=210, col_offset=33)], [], None, None, lineno=210, col_offset=27)], [], None, None, lineno=210, col_offset=8), lineno=210, col_offset=8)], [], lineno=207, col_offset=4), FunctionDef('test_strings', arguments([Name('self', Param(), lineno=212, col_offset=21)], None, None, []), [Expr(Str('Verify the pretty-printing of strings', lineno=213, col_offset=8), lineno=213, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=214, col_offset=8), 'assertGdbRepr', Load(), lineno=214, col_offset=8), [Str('', lineno=214, col_offset=27)], [], None, None, lineno=214, col_offset=8), lineno=214, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=215, col_offset=8), 'assertGdbRepr', Load(), lineno=215, col_offset=8), [Str('And now for something hopefully the same', lineno=215, col_offset=27)], [], None, None, lineno=215, col_offset=8), lineno=215, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=216, col_offset=8), 'assertGdbRepr', Load(), lineno=216, col_offset=8), [Str('string with embedded NUL here \x00 and then some more text', lineno=216, col_offset=27)], [], None, None, lineno=216, col_offset=8), lineno=216, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=217, col_offset=8), 'assertGdbRepr', Load(), lineno=217, col_offset=8), [Str('this is byte 255:\xff and byte 128:\x80', lineno=217, col_offset=27)], [], None, None, lineno=217, col_offset=8), lineno=217, col_offset=8)], [], lineno=212, col_offset=4), FunctionDef('test_tuples', arguments([Name('self', Param(), lineno=219, col_offset=20)], None, None, []), [Expr(Str('Verify the pretty-printing of tuples', lineno=220, col_offset=8), lineno=220, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=8), 'assertGdbRepr', Load(), lineno=221, col_offset=8), [Call(Name('tuple', Load(), lineno=221, col_offset=27), [], [], None, None, lineno=221, col_offset=27)], [], None, None, lineno=221, col_offset=8), lineno=221, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=222, col_offset=8), 'assertGdbRepr', Load(), lineno=222, col_offset=8), [Tuple([Num(1, lineno=222, col_offset=28)], Load(), lineno=222, col_offset=28)], [], None, None, lineno=222, col_offset=8), lineno=222, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), 'assertGdbRepr', Load(), lineno=223, col_offset=8), [Tuple([Str('foo', lineno=223, col_offset=28), Str('bar', lineno=223, col_offset=35), Str('baz', lineno=223, col_offset=42)], Load(), lineno=223, col_offset=28)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8)], [], lineno=219, col_offset=4), FunctionDef('test_unicode', arguments([Name('self', Param(), lineno=225, col_offset=21)], None, None, []), [Expr(Str('Verify the pretty-printing of unicode values', lineno=226, col_offset=8), lineno=226, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=8), 'assertGdbRepr', Load(), lineno=228, col_offset=8), [Str(u'', lineno=228, col_offset=27)], [], None, None, lineno=228, col_offset=8), lineno=228, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=8), 'assertGdbRepr', Load(), lineno=230, col_offset=8), [Str(u'hello world', lineno=230, col_offset=27)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=8), 'assertGdbRepr', Load(), lineno=234, col_offset=8), [Str(u'\u2620', lineno=234, col_offset=27)], [], None, None, lineno=234, col_offset=8), lineno=234, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=239, col_offset=8), 'assertGdbRepr', Load(), lineno=239, col_offset=8), [Str(u'\u6587\u5b57\u5316\u3051', lineno=239, col_offset=27)], [], None, None, lineno=239, col_offset=8), lineno=239, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=247, col_offset=8), 'assertGdbRepr', Load(), lineno=247, col_offset=8), [Str(u'\U0001d121', lineno=247, col_offset=27)], [], None, None, lineno=247, col_offset=8), lineno=247, col_offset=8)], [], lineno=225, col_offset=4), FunctionDef('test_sets', arguments([Name('self', Param(), lineno=249, col_offset=18)], None, None, []), [Expr(Str('Verify the pretty-printing of sets', lineno=250, col_offset=8), lineno=250, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=251, col_offset=8), 'assertGdbRepr', Load(), lineno=251, col_offset=8), [Call(Name('set', Load(), lineno=251, col_offset=27), [], [], None, None, lineno=251, col_offset=27)], [], None, None, lineno=251, col_offset=8), lineno=251, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=252, col_offset=8), 'assertGdbRepr', Load(), lineno=252, col_offset=8), [Call(Name('set', Load(), lineno=252, col_offset=27), [List([Str('a', lineno=252, col_offset=32), Str('b', lineno=252, col_offset=37)], Load(), lineno=252, col_offset=31)], [], None, None, lineno=252, col_offset=27)], [], None, None, lineno=252, col_offset=8), lineno=252, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=8), 'assertGdbRepr', Load(), lineno=253, col_offset=8), [Call(Name('set', Load(), lineno=253, col_offset=27), [List([Num(4, lineno=253, col_offset=32), Num(5, lineno=253, col_offset=35), Num(6, lineno=253, col_offset=38)], Load(), lineno=253, col_offset=31)], [], None, None, lineno=253, col_offset=27)], [], None, None, lineno=253, col_offset=8), lineno=253, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=257, col_offset=8), Name('gdb_output', Store(), lineno=257, col_offset=18)], Store(), lineno=257, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=257, col_offset=31), 'get_gdb_repr', Load(), lineno=257, col_offset=31), [Str("s = set(['a','b'])\ns.pop()\nprint s", lineno=259, col_offset=-1)], [], None, None, lineno=257, col_offset=31), lineno=257, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=260, col_offset=8), 'assertEqual', Load(), lineno=260, col_offset=8), [Name('gdb_repr', Load(), lineno=260, col_offset=25), Str("set(['b'])", lineno=260, col_offset=35)], [], None, None, lineno=260, col_offset=8), lineno=260, col_offset=8)], [], lineno=249, col_offset=4), FunctionDef('test_frozensets', arguments([Name('self', Param(), lineno=262, col_offset=24)], None, None, []), [Expr(Str('Verify the pretty-printing of frozensets', lineno=263, col_offset=8), lineno=263, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=264, col_offset=8), 'assertGdbRepr', Load(), lineno=264, col_offset=8), [Call(Name('frozenset', Load(), lineno=264, col_offset=27), [], [], None, None, lineno=264, col_offset=27)], [], None, None, lineno=264, col_offset=8), lineno=264, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=265, col_offset=8), 'assertGdbRepr', Load(), lineno=265, col_offset=8), [Call(Name('frozenset', Load(), lineno=265, col_offset=27), [List([Str('a', lineno=265, col_offset=38), Str('b', lineno=265, col_offset=43)], Load(), lineno=265, col_offset=37)], [], None, None, lineno=265, col_offset=27)], [], None, None, lineno=265, col_offset=8), lineno=265, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=266, col_offset=8), 'assertGdbRepr', Load(), lineno=266, col_offset=8), [Call(Name('frozenset', Load(), lineno=266, col_offset=27), [List([Num(4, lineno=266, col_offset=38), Num(5, lineno=266, col_offset=41), Num(6, lineno=266, col_offset=44)], Load(), lineno=266, col_offset=37)], [], None, None, lineno=266, col_offset=27)], [], None, None, lineno=266, col_offset=8), lineno=266, col_offset=8)], [], lineno=262, col_offset=4), FunctionDef('test_exceptions', arguments([Name('self', Param(), lineno=268, col_offset=24)], None, None, []), [Assign([Tuple([Name('gdb_repr', Store(), lineno=270, col_offset=8), Name('gdb_output', Store(), lineno=270, col_offset=18)], Store(), lineno=270, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=270, col_offset=31), 'get_gdb_repr', Load(), lineno=270, col_offset=31), [Str('\ntry:\n    raise RuntimeError("I am an error")\nexcept RuntimeError, e:\n    print e\n', lineno=275, col_offset=-1)], [], None, None, lineno=270, col_offset=31), lineno=270, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=8), 'assertEqual', Load(), lineno=276, col_offset=8), [Name('gdb_repr', Load(), lineno=276, col_offset=25), Str("exceptions.RuntimeError('I am an error',)", lineno=277, col_offset=25)], [], None, None, lineno=276, col_offset=8), lineno=276, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=281, col_offset=8), Name('gdb_output', Store(), lineno=281, col_offset=18)], Store(), lineno=281, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=281, col_offset=31), 'get_gdb_repr', Load(), lineno=281, col_offset=31), [Str('\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError, e:\n    print e\n', lineno=286, col_offset=-1)], [], None, None, lineno=281, col_offset=31), lineno=281, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=287, col_offset=8), 'assertEqual', Load(), lineno=287, col_offset=8), [Name('gdb_repr', Load(), lineno=287, col_offset=25), Str("exceptions.ZeroDivisionError('integer division or modulo by zero',)", lineno=288, col_offset=25)], [], None, None, lineno=287, col_offset=8), lineno=287, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('test_classic_class', arguments([Name('self', Param(), lineno=290, col_offset=27)], None, None, []), [Expr(Str('Verify the pretty-printing of classic class instances', lineno=291, col_offset=8), lineno=291, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=292, col_offset=8), Name('gdb_output', Store(), lineno=292, col_offset=18)], Store(), lineno=292, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=292, col_offset=31), 'get_gdb_repr', Load(), lineno=292, col_offset=31), [Str('\nclass Foo:\n    pass\nfoo = Foo()\nfoo.an_int = 42\nprint foo', lineno=297, col_offset=-1)], [], None, None, lineno=292, col_offset=31), lineno=292, col_offset=8), Assign([Name('m', Store(), lineno=298, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=298, col_offset=12), 'match', Load(), lineno=298, col_offset=12), [Str('<Foo\\(an_int=42\\) at remote 0x[0-9a-f]+>', lineno=298, col_offset=21), Name('gdb_repr', Load(), lineno=298, col_offset=66)], [], None, None, lineno=298, col_offset=12), lineno=298, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=299, col_offset=8), 'assertTrue', Load(), lineno=299, col_offset=8), [Name('m', Load(), lineno=299, col_offset=24)], [keyword('msg', BinOp(Str('Unexpected classic-class rendering %r', lineno=300, col_offset=28), Mod(), Name('gdb_repr', Load(), lineno=300, col_offset=70), lineno=300, col_offset=28))], None, None, lineno=299, col_offset=8), lineno=299, col_offset=8)], [], lineno=290, col_offset=4), FunctionDef('test_modern_class', arguments([Name('self', Param(), lineno=302, col_offset=26)], None, None, []), [Expr(Str('Verify the pretty-printing of new-style class instances', lineno=303, col_offset=8), lineno=303, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=304, col_offset=8), Name('gdb_output', Store(), lineno=304, col_offset=18)], Store(), lineno=304, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=304, col_offset=31), 'get_gdb_repr', Load(), lineno=304, col_offset=31), [Str('\nclass Foo(object):\n    pass\nfoo = Foo()\nfoo.an_int = 42\nprint foo', lineno=309, col_offset=-1)], [], None, None, lineno=304, col_offset=31), lineno=304, col_offset=8), Assign([Name('m', Store(), lineno=310, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=310, col_offset=12), 'match', Load(), lineno=310, col_offset=12), [Str('<Foo\\(an_int=42\\) at remote 0x[0-9a-f]+>', lineno=310, col_offset=21), Name('gdb_repr', Load(), lineno=310, col_offset=66)], [], None, None, lineno=310, col_offset=12), lineno=310, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=311, col_offset=8), 'assertTrue', Load(), lineno=311, col_offset=8), [Name('m', Load(), lineno=311, col_offset=24)], [keyword('msg', BinOp(Str('Unexpected new-style class rendering %r', lineno=312, col_offset=28), Mod(), Name('gdb_repr', Load(), lineno=312, col_offset=72), lineno=312, col_offset=28))], None, None, lineno=311, col_offset=8), lineno=311, col_offset=8)], [], lineno=302, col_offset=4), FunctionDef('test_subclassing_list', arguments([Name('self', Param(), lineno=314, col_offset=30)], None, None, []), [Expr(Str('Verify the pretty-printing of an instance of a list subclass', lineno=315, col_offset=8), lineno=315, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=316, col_offset=8), Name('gdb_output', Store(), lineno=316, col_offset=18)], Store(), lineno=316, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=316, col_offset=31), 'get_gdb_repr', Load(), lineno=316, col_offset=31), [Str('\nclass Foo(list):\n    pass\nfoo = Foo()\nfoo += [1, 2, 3]\nfoo.an_int = 42\nprint foo', lineno=322, col_offset=-1)], [], None, None, lineno=316, col_offset=31), lineno=316, col_offset=8), Assign([Name('m', Store(), lineno=323, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=323, col_offset=12), 'match', Load(), lineno=323, col_offset=12), [Str('<Foo\\(an_int=42\\) at remote 0x[0-9a-f]+>', lineno=323, col_offset=21), Name('gdb_repr', Load(), lineno=323, col_offset=66)], [], None, None, lineno=323, col_offset=12), lineno=323, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=324, col_offset=8), 'assertTrue', Load(), lineno=324, col_offset=8), [Name('m', Load(), lineno=324, col_offset=24)], [keyword('msg', BinOp(Str('Unexpected new-style class rendering %r', lineno=325, col_offset=28), Mod(), Name('gdb_repr', Load(), lineno=325, col_offset=72), lineno=325, col_offset=28))], None, None, lineno=324, col_offset=8), lineno=324, col_offset=8)], [], lineno=314, col_offset=4), FunctionDef('test_subclassing_tuple', arguments([Name('self', Param(), lineno=327, col_offset=31)], None, None, []), [Expr(Str('Verify the pretty-printing of an instance of a tuple subclass', lineno=328, col_offset=8), lineno=328, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=331, col_offset=8), Name('gdb_output', Store(), lineno=331, col_offset=18)], Store(), lineno=331, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=331, col_offset=31), 'get_gdb_repr', Load(), lineno=331, col_offset=31), [Str('\nclass Foo(tuple):\n    pass\nfoo = Foo((1, 2, 3))\nfoo.an_int = 42\nprint foo', lineno=336, col_offset=-1)], [], None, None, lineno=331, col_offset=31), lineno=331, col_offset=8), Assign([Name('m', Store(), lineno=337, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=337, col_offset=12), 'match', Load(), lineno=337, col_offset=12), [Str('<Foo\\(an_int=42\\) at remote 0x[0-9a-f]+>', lineno=337, col_offset=21), Name('gdb_repr', Load(), lineno=337, col_offset=66)], [], None, None, lineno=337, col_offset=12), lineno=337, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'assertTrue', Load(), lineno=338, col_offset=8), [Name('m', Load(), lineno=338, col_offset=24)], [keyword('msg', BinOp(Str('Unexpected new-style class rendering %r', lineno=339, col_offset=28), Mod(), Name('gdb_repr', Load(), lineno=339, col_offset=72), lineno=339, col_offset=28))], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8)], [], lineno=327, col_offset=4), FunctionDef('assertSane', arguments([Name('self', Param(), lineno=341, col_offset=19), Name('source', Param(), lineno=341, col_offset=25), Name('corruption', Param(), lineno=341, col_offset=33), Name('expvalue', Param(), lineno=341, col_offset=45), Name('exptype', Param(), lineno=341, col_offset=60)], None, None, [Name('None', Load(), lineno=341, col_offset=54), Name('None', Load(), lineno=341, col_offset=68)]), [Expr(Str("Run Python under gdb, corrupting variables in the inferior process\n        immediately before taking a backtrace.\n\n        Verify that the variable's representation is the expected failsafe\n        representation", lineno=346, col_offset=-1), lineno=346, col_offset=-1), If(Name('corruption', Load(), lineno=347, col_offset=11), [Assign([Name('cmds_after_breakpoint', Store(), lineno=348, col_offset=12)], List([Name('corruption', Load(), lineno=348, col_offset=35), Str('backtrace', lineno=348, col_offset=47)], Load(), lineno=348, col_offset=34), lineno=348, col_offset=12)], [Assign([Name('cmds_after_breakpoint', Store(), lineno=350, col_offset=12)], List([Str('backtrace', lineno=350, col_offset=35)], Load(), lineno=350, col_offset=34), lineno=350, col_offset=12)], lineno=347, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=352, col_offset=8), Name('gdb_output', Store(), lineno=352, col_offset=18)], Store(), lineno=352, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=353, col_offset=12), 'get_gdb_repr', Load(), lineno=353, col_offset=12), [Name('source', Load(), lineno=353, col_offset=30)], [keyword('cmds_after_breakpoint', Name('cmds_after_breakpoint', Load(), lineno=354, col_offset=52))], None, None, lineno=353, col_offset=12), lineno=352, col_offset=8), If(Name('expvalue', Load(), lineno=356, col_offset=11), [If(Compare(Name('gdb_repr', Load(), lineno=357, col_offset=15), [Eq()], [Call(Name('repr', Load(), lineno=357, col_offset=27), [Name('expvalue', Load(), lineno=357, col_offset=32)], [], None, None, lineno=357, col_offset=27)], lineno=357, col_offset=15), [Return(None, lineno=360, col_offset=16)], [], lineno=357, col_offset=12)], [], lineno=356, col_offset=8), If(Name('exptype', Load(), lineno=362, col_offset=11), [Assign([Name('pattern', Store(), lineno=363, col_offset=12)], BinOp(BinOp(Str('<', lineno=363, col_offset=22), Add(), Name('exptype', Load(), lineno=363, col_offset=28), lineno=363, col_offset=22), Add(), Str(' at remote 0x[0-9a-f]+>', lineno=363, col_offset=38), lineno=363, col_offset=36), lineno=363, col_offset=12)], [Assign([Name('pattern', Store(), lineno=367, col_offset=12)], Str('<.* at remote 0x[0-9a-f]+>', lineno=367, col_offset=22), lineno=367, col_offset=12)], lineno=362, col_offset=8), Assign([Name('m', Store(), lineno=369, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=369, col_offset=12), 'match', Load(), lineno=369, col_offset=12), [Name('pattern', Load(), lineno=369, col_offset=21), Name('gdb_repr', Load(), lineno=369, col_offset=30)], [], None, None, lineno=369, col_offset=12), lineno=369, col_offset=8), If(UnaryOp(Not(), Name('m', Load(), lineno=370, col_offset=15), lineno=370, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=371, col_offset=12), 'fail', Load(), lineno=371, col_offset=12), [BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=371, col_offset=22), Mod(), Tuple([Name('gdb_repr', Load(), lineno=372, col_offset=27), Name('gdb_output', Load(), lineno=372, col_offset=37)], Load(), lineno=372, col_offset=27), lineno=371, col_offset=22)], [], None, None, lineno=371, col_offset=12), lineno=371, col_offset=12)], [], lineno=370, col_offset=8)], [], lineno=341, col_offset=4), FunctionDef('test_NULL_ptr', arguments([Name('self', Param(), lineno=374, col_offset=22)], None, None, []), [Expr(Str('Ensure that a NULL PyObject* is handled gracefully', lineno=375, col_offset=8), lineno=375, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=376, col_offset=8), Name('gdb_output', Store(), lineno=376, col_offset=18)], Store(), lineno=376, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=377, col_offset=12), 'get_gdb_repr', Load(), lineno=377, col_offset=12), [Str('print 42', lineno=377, col_offset=30)], [keyword('cmds_after_breakpoint', List([Str('set variable op=0', lineno=378, col_offset=53), Str('backtrace', lineno=379, col_offset=53)], Load(), lineno=378, col_offset=52))], None, None, lineno=377, col_offset=12), lineno=376, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'assertEqual', Load(), lineno=382, col_offset=8), [Name('gdb_repr', Load(), lineno=382, col_offset=25), Str('0x0', lineno=382, col_offset=35)], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8)], [], lineno=374, col_offset=4), FunctionDef('test_NULL_ob_type', arguments([Name('self', Param(), lineno=384, col_offset=26)], None, None, []), [Expr(Str('Ensure that a PyObject* with NULL ob_type is handled gracefully', lineno=385, col_offset=8), lineno=385, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=386, col_offset=8), 'assertSane', Load(), lineno=386, col_offset=8), [Str('print 42', lineno=386, col_offset=24), Str('set op->ob_type=0', lineno=387, col_offset=24)], [], None, None, lineno=386, col_offset=8), lineno=386, col_offset=8)], [], lineno=384, col_offset=4), FunctionDef('test_corrupt_ob_type', arguments([Name('self', Param(), lineno=389, col_offset=29)], None, None, []), [Expr(Str('Ensure that a PyObject* with a corrupt ob_type is handled gracefully', lineno=390, col_offset=8), lineno=390, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=391, col_offset=8), 'assertSane', Load(), lineno=391, col_offset=8), [Str('print 42', lineno=391, col_offset=24), Str('set op->ob_type=0xDEADBEEF', lineno=392, col_offset=24)], [keyword('expvalue', Num(42, lineno=393, col_offset=33))], None, None, lineno=391, col_offset=8), lineno=391, col_offset=8)], [], lineno=389, col_offset=4), FunctionDef('test_corrupt_tp_flags', arguments([Name('self', Param(), lineno=395, col_offset=30)], None, None, []), [Expr(Str('Ensure that a PyObject* with a type with corrupt tp_flags is handled', lineno=396, col_offset=8), lineno=396, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=397, col_offset=8), 'assertSane', Load(), lineno=397, col_offset=8), [Str('print 42', lineno=397, col_offset=24), Str('set op->ob_type->tp_flags=0x0', lineno=398, col_offset=24)], [keyword('expvalue', Num(42, lineno=399, col_offset=33))], None, None, lineno=397, col_offset=8), lineno=397, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('test_corrupt_tp_name', arguments([Name('self', Param(), lineno=401, col_offset=29)], None, None, []), [Expr(Str('Ensure that a PyObject* with a type with corrupt tp_name is handled', lineno=402, col_offset=8), lineno=402, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=403, col_offset=8), 'assertSane', Load(), lineno=403, col_offset=8), [Str('print 42', lineno=403, col_offset=24), Str('set op->ob_type->tp_name=0xDEADBEEF', lineno=404, col_offset=24)], [keyword('expvalue', Num(42, lineno=405, col_offset=33))], None, None, lineno=403, col_offset=8), lineno=403, col_offset=8)], [], lineno=401, col_offset=4), FunctionDef('test_NULL_instance_dict', arguments([Name('self', Param(), lineno=407, col_offset=32)], None, None, []), [Expr(Str('Ensure that a PyInstanceObject with with a NULL in_dict is handled', lineno=408, col_offset=8), lineno=408, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=409, col_offset=8), 'assertSane', Load(), lineno=409, col_offset=8), [Str('\nclass Foo:\n    pass\nfoo = Foo()\nfoo.an_int = 42\nprint foo', lineno=414, col_offset=-1), Str('set ((PyInstanceObject*)op)->in_dict = 0', lineno=415, col_offset=24)], [keyword('exptype', Str('Foo', lineno=416, col_offset=32))], None, None, lineno=409, col_offset=8), lineno=409, col_offset=8)], [], lineno=407, col_offset=4), FunctionDef('test_builtins_help', arguments([Name('self', Param(), lineno=418, col_offset=27)], None, None, []), [Expr(Str('Ensure that the new-style class _Helper in site.py can be handled', lineno=419, col_offset=8), lineno=419, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=423, col_offset=8), Name('gdb_output', Store(), lineno=423, col_offset=18)], Store(), lineno=423, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=423, col_offset=31), 'get_gdb_repr', Load(), lineno=423, col_offset=31), [Str('print __builtins__.help', lineno=423, col_offset=49)], [keyword('import_site', Name('True', Load(), lineno=423, col_offset=88))], None, None, lineno=423, col_offset=31), lineno=423, col_offset=8), Assign([Name('m', Store(), lineno=424, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=424, col_offset=12), 'match', Load(), lineno=424, col_offset=12), [Str('<_Helper at remote 0x[0-9a-f]+>', lineno=424, col_offset=21), Name('gdb_repr', Load(), lineno=424, col_offset=57)], [], None, None, lineno=424, col_offset=12), lineno=424, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=425, col_offset=8), 'assertTrue', Load(), lineno=425, col_offset=8), [Name('m', Load(), lineno=425, col_offset=24)], [keyword('msg', BinOp(Str('Unexpected rendering %r', lineno=426, col_offset=28), Mod(), Name('gdb_repr', Load(), lineno=426, col_offset=56), lineno=426, col_offset=28))], None, None, lineno=425, col_offset=8), lineno=425, col_offset=8)], [], lineno=418, col_offset=4), FunctionDef('test_selfreferential_list', arguments([Name('self', Param(), lineno=428, col_offset=34)], None, None, []), [Expr(Str("Ensure that a reference loop involving a list doesn't lead proxyval\n        into an infinite loop:", lineno=430, col_offset=-1), lineno=430, col_offset=-1), Assign([Tuple([Name('gdb_repr', Store(), lineno=431, col_offset=8), Name('gdb_output', Store(), lineno=431, col_offset=18)], Store(), lineno=431, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=432, col_offset=12), 'get_gdb_repr', Load(), lineno=432, col_offset=12), [Str('a = [3, 4, 5] ; a.append(a) ; print a', lineno=432, col_offset=30)], [], None, None, lineno=432, col_offset=12), lineno=431, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=434, col_offset=8), 'assertEqual', Load(), lineno=434, col_offset=8), [Name('gdb_repr', Load(), lineno=434, col_offset=25), Str('[3, 4, 5, [...]]', lineno=434, col_offset=35)], [], None, None, lineno=434, col_offset=8), lineno=434, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=436, col_offset=8), Name('gdb_output', Store(), lineno=436, col_offset=18)], Store(), lineno=436, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=437, col_offset=12), 'get_gdb_repr', Load(), lineno=437, col_offset=12), [Str('a = [3, 4, 5] ; b = [a] ; a.append(b) ; print a', lineno=437, col_offset=30)], [], None, None, lineno=437, col_offset=12), lineno=436, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=439, col_offset=8), 'assertEqual', Load(), lineno=439, col_offset=8), [Name('gdb_repr', Load(), lineno=439, col_offset=25), Str('[3, 4, 5, [[...]]]', lineno=439, col_offset=35)], [], None, None, lineno=439, col_offset=8), lineno=439, col_offset=8)], [], lineno=428, col_offset=4), FunctionDef('test_selfreferential_dict', arguments([Name('self', Param(), lineno=441, col_offset=34)], None, None, []), [Expr(Str("Ensure that a reference loop involving a dict doesn't lead proxyval\n        into an infinite loop:", lineno=443, col_offset=-1), lineno=443, col_offset=-1), Assign([Tuple([Name('gdb_repr', Store(), lineno=444, col_offset=8), Name('gdb_output', Store(), lineno=444, col_offset=18)], Store(), lineno=444, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=445, col_offset=12), 'get_gdb_repr', Load(), lineno=445, col_offset=12), [Str("a = {} ; b = {'bar':a} ; a['foo'] = b ; print a", lineno=445, col_offset=30)], [], None, None, lineno=445, col_offset=12), lineno=444, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=447, col_offset=8), 'assertEqual', Load(), lineno=447, col_offset=8), [Name('gdb_repr', Load(), lineno=447, col_offset=25), Str("{'foo': {'bar': {...}}}", lineno=447, col_offset=35)], [], None, None, lineno=447, col_offset=8), lineno=447, col_offset=8)], [], lineno=441, col_offset=4), FunctionDef('test_selfreferential_old_style_instance', arguments([Name('self', Param(), lineno=449, col_offset=48)], None, None, []), [Assign([Tuple([Name('gdb_repr', Store(), lineno=450, col_offset=8), Name('gdb_output', Store(), lineno=450, col_offset=18)], Store(), lineno=450, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=451, col_offset=12), 'get_gdb_repr', Load(), lineno=451, col_offset=12), [Str('\nclass Foo:\n    pass\nfoo = Foo()\nfoo.an_attr = foo\nprint foo', lineno=456, col_offset=-1)], [], None, None, lineno=451, col_offset=12), lineno=450, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=457, col_offset=8), 'assertTrue', Load(), lineno=457, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=457, col_offset=24), 'match', Load(), lineno=457, col_offset=24), [Str('<Foo\\(an_attr=<\\.\\.\\.>\\) at remote 0x[0-9a-f]+>', lineno=457, col_offset=33), Name('gdb_repr', Load(), lineno=458, col_offset=33)], [], None, None, lineno=457, col_offset=24), BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=459, col_offset=24), Mod(), Tuple([Name('gdb_repr', Load(), lineno=460, col_offset=29), Name('gdb_output', Load(), lineno=460, col_offset=39)], Load(), lineno=460, col_offset=29), lineno=459, col_offset=24)], [], None, None, lineno=457, col_offset=8), lineno=457, col_offset=8)], [], lineno=449, col_offset=4), FunctionDef('test_selfreferential_new_style_instance', arguments([Name('self', Param(), lineno=462, col_offset=48)], None, None, []), [Assign([Tuple([Name('gdb_repr', Store(), lineno=463, col_offset=8), Name('gdb_output', Store(), lineno=463, col_offset=18)], Store(), lineno=463, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=464, col_offset=12), 'get_gdb_repr', Load(), lineno=464, col_offset=12), [Str('\nclass Foo(object):\n    pass\nfoo = Foo()\nfoo.an_attr = foo\nprint foo', lineno=469, col_offset=-1)], [], None, None, lineno=464, col_offset=12), lineno=463, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=470, col_offset=8), 'assertTrue', Load(), lineno=470, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=470, col_offset=24), 'match', Load(), lineno=470, col_offset=24), [Str('<Foo\\(an_attr=<\\.\\.\\.>\\) at remote 0x[0-9a-f]+>', lineno=470, col_offset=33), Name('gdb_repr', Load(), lineno=471, col_offset=33)], [], None, None, lineno=470, col_offset=24), BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=472, col_offset=24), Mod(), Tuple([Name('gdb_repr', Load(), lineno=473, col_offset=29), Name('gdb_output', Load(), lineno=473, col_offset=39)], Load(), lineno=473, col_offset=29), lineno=472, col_offset=24)], [], None, None, lineno=470, col_offset=8), lineno=470, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=475, col_offset=8), Name('gdb_output', Store(), lineno=475, col_offset=18)], Store(), lineno=475, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=476, col_offset=12), 'get_gdb_repr', Load(), lineno=476, col_offset=12), [Str('\nclass Foo(object):\n    pass\na = Foo()\nb = Foo()\na.an_attr = b\nb.an_attr = a\nprint a', lineno=483, col_offset=-1)], [], None, None, lineno=476, col_offset=12), lineno=475, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=484, col_offset=8), 'assertTrue', Load(), lineno=484, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=484, col_offset=24), 'match', Load(), lineno=484, col_offset=24), [Str('<Foo\\(an_attr=<Foo\\(an_attr=<\\.\\.\\.>\\) at remote 0x[0-9a-f]+>\\) at remote 0x[0-9a-f]+>', lineno=484, col_offset=33), Name('gdb_repr', Load(), lineno=485, col_offset=33)], [], None, None, lineno=484, col_offset=24), BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=486, col_offset=24), Mod(), Tuple([Name('gdb_repr', Load(), lineno=487, col_offset=29), Name('gdb_output', Load(), lineno=487, col_offset=39)], Load(), lineno=487, col_offset=29), lineno=486, col_offset=24)], [], None, None, lineno=484, col_offset=8), lineno=484, col_offset=8)], [], lineno=462, col_offset=4), FunctionDef('test_truncation', arguments([Name('self', Param(), lineno=489, col_offset=24)], None, None, []), [Expr(Str('Verify that very long output is truncated', lineno=490, col_offset=8), lineno=490, col_offset=8), Assign([Tuple([Name('gdb_repr', Store(), lineno=491, col_offset=8), Name('gdb_output', Store(), lineno=491, col_offset=18)], Store(), lineno=491, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=491, col_offset=31), 'get_gdb_repr', Load(), lineno=491, col_offset=31), [Str('print range(1000)', lineno=491, col_offset=49)], [], None, None, lineno=491, col_offset=31), lineno=491, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=492, col_offset=8), 'assertEqual', Load(), lineno=492, col_offset=8), [Name('gdb_repr', Load(), lineno=492, col_offset=25), Str('[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226...(truncated)', lineno=493, col_offset=25)], [], None, None, lineno=492, col_offset=8), lineno=492, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=514, col_offset=8), 'assertEqual', Load(), lineno=514, col_offset=8), [Call(Name('len', Load(), lineno=514, col_offset=25), [Name('gdb_repr', Load(), lineno=514, col_offset=29)], [], None, None, lineno=514, col_offset=25), BinOp(Num(1024, lineno=515, col_offset=25), Add(), Call(Name('len', Load(), lineno=515, col_offset=32), [Str('...(truncated)', lineno=515, col_offset=36)], [], None, None, lineno=515, col_offset=32), lineno=515, col_offset=25)], [], None, None, lineno=514, col_offset=8), lineno=514, col_offset=8)], [], lineno=489, col_offset=4), FunctionDef('test_builtin_function', arguments([Name('self', Param(), lineno=517, col_offset=30)], None, None, []), [Assign([Tuple([Name('gdb_repr', Store(), lineno=518, col_offset=8), Name('gdb_output', Store(), lineno=518, col_offset=18)], Store(), lineno=518, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=518, col_offset=31), 'get_gdb_repr', Load(), lineno=518, col_offset=31), [Str('print len', lineno=518, col_offset=49)], [], None, None, lineno=518, col_offset=31), lineno=518, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=519, col_offset=8), 'assertEqual', Load(), lineno=519, col_offset=8), [Name('gdb_repr', Load(), lineno=519, col_offset=25), Str('<built-in function len>', lineno=519, col_offset=35)], [], None, None, lineno=519, col_offset=8), lineno=519, col_offset=8)], [], lineno=517, col_offset=4), FunctionDef('test_builtin_method', arguments([Name('self', Param(), lineno=521, col_offset=28)], None, None, []), [Assign([Tuple([Name('gdb_repr', Store(), lineno=522, col_offset=8), Name('gdb_output', Store(), lineno=522, col_offset=18)], Store(), lineno=522, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=522, col_offset=31), 'get_gdb_repr', Load(), lineno=522, col_offset=31), [Str('import sys; print sys.stdout.readlines', lineno=522, col_offset=49)], [], None, None, lineno=522, col_offset=31), lineno=522, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=523, col_offset=8), 'assertTrue', Load(), lineno=523, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=523, col_offset=24), 'match', Load(), lineno=523, col_offset=24), [Str('<built-in method readlines of file object at remote 0x[0-9a-f]+>', lineno=523, col_offset=33), Name('gdb_repr', Load(), lineno=524, col_offset=33)], [], None, None, lineno=523, col_offset=24), BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=525, col_offset=24), Mod(), Tuple([Name('gdb_repr', Load(), lineno=526, col_offset=29), Name('gdb_output', Load(), lineno=526, col_offset=39)], Load(), lineno=526, col_offset=29), lineno=525, col_offset=24)], [], None, None, lineno=523, col_offset=8), lineno=523, col_offset=8)], [], lineno=521, col_offset=4), FunctionDef('test_frames', arguments([Name('self', Param(), lineno=528, col_offset=20)], None, None, []), [Assign([Name('gdb_output', Store(), lineno=529, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=529, col_offset=21), 'get_stack_trace', Load(), lineno=529, col_offset=21), [Str('\ndef foo(a, b, c):\n    pass\n\nfoo(3, 4, 5)\nprint foo.__code__', lineno=534, col_offset=-1)], [keyword('breakpoint', Str('PyObject_Print', lineno=535, col_offset=53)), keyword('cmds_after_breakpoint', List([Str('print (PyFrameObject*)(((PyCodeObject*)op)->co_zombieframe)', lineno=536, col_offset=65)], Load(), lineno=536, col_offset=64))], None, None, lineno=529, col_offset=21), lineno=529, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=538, col_offset=8), 'assertTrue', Load(), lineno=538, col_offset=8), [Call(Attribute(Name('re', Load(), lineno=538, col_offset=24), 'match', Load(), lineno=538, col_offset=24), [Str('.*\\s+\\$1 =\\s+Frame 0x[0-9a-f]+, for file <string>, line 3, in foo \\(\\)\\s+.*', lineno=538, col_offset=33), Name('gdb_output', Load(), lineno=539, col_offset=33), Attribute(Name('re', Load(), lineno=540, col_offset=33), 'DOTALL', Load(), lineno=540, col_offset=33)], [], None, None, lineno=538, col_offset=24), BinOp(Str('Unexpected gdb representation: %r\n%s', lineno=541, col_offset=24), Mod(), Tuple([Name('gdb_output', Load(), lineno=541, col_offset=67), Name('gdb_output', Load(), lineno=541, col_offset=79)], Load(), lineno=541, col_offset=67), lineno=541, col_offset=24)], [], None, None, lineno=538, col_offset=8), lineno=538, col_offset=8)], [], lineno=528, col_offset=4)], [], lineno=168, col_offset=0), ClassDef('PyListTests', [Name('DebuggerTests', Load(), lineno=543, col_offset=18)], [FunctionDef('assertListing', arguments([Name('self', Param(), lineno=544, col_offset=22), Name('expected', Param(), lineno=544, col_offset=28), Name('actual', Param(), lineno=544, col_offset=38)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=545, col_offset=8), 'assertEndsWith', Load(), lineno=545, col_offset=8), [Name('actual', Load(), lineno=545, col_offset=28), Name('expected', Load(), lineno=545, col_offset=36)], [], None, None, lineno=545, col_offset=8), lineno=545, col_offset=8)], [], lineno=544, col_offset=4), FunctionDef('test_basic_command', arguments([Name('self', Param(), lineno=547, col_offset=27)], None, None, []), [Expr(Str('Verify that the "py-list" command works', lineno=548, col_offset=8), lineno=548, col_offset=8), Assign([Name('bt', Store(), lineno=549, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=549, col_offset=13), 'get_stack_trace', Load(), lineno=549, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=549, col_offset=41), 'get_sample_script', Load(), lineno=549, col_offset=41), [], [], None, None, lineno=549, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-list', lineno=550, col_offset=57)], Load(), lineno=550, col_offset=56))], None, None, lineno=549, col_offset=13), lineno=549, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=552, col_offset=8), 'assertListing', Load(), lineno=552, col_offset=8), [Str('   5    \n   6    def bar(a, b, c):\n   7        baz(a, b, c)\n   8    \n   9    def baz(*args):\n >10        print(42)\n  11    \n  12    foo(1, 2, 3)\n', lineno=552, col_offset=27), Name('bt', Load(), lineno=560, col_offset=27)], [], None, None, lineno=552, col_offset=8), lineno=552, col_offset=8)], [], lineno=547, col_offset=4), FunctionDef('test_one_abs_arg', arguments([Name('self', Param(), lineno=562, col_offset=25)], None, None, []), [Expr(Str('Verify the "py-list" command with one absolute argument', lineno=563, col_offset=8), lineno=563, col_offset=8), Assign([Name('bt', Store(), lineno=564, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=564, col_offset=13), 'get_stack_trace', Load(), lineno=564, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=564, col_offset=41), 'get_sample_script', Load(), lineno=564, col_offset=41), [], [], None, None, lineno=564, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-list 9', lineno=565, col_offset=57)], Load(), lineno=565, col_offset=56))], None, None, lineno=564, col_offset=13), lineno=564, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=567, col_offset=8), 'assertListing', Load(), lineno=567, col_offset=8), [Str('   9    def baz(*args):\n >10        print(42)\n  11    \n  12    foo(1, 2, 3)\n', lineno=567, col_offset=27), Name('bt', Load(), lineno=571, col_offset=27)], [], None, None, lineno=567, col_offset=8), lineno=567, col_offset=8)], [], lineno=562, col_offset=4), FunctionDef('test_two_abs_args', arguments([Name('self', Param(), lineno=573, col_offset=26)], None, None, []), [Expr(Str('Verify the "py-list" command with two absolute arguments', lineno=574, col_offset=8), lineno=574, col_offset=8), Assign([Name('bt', Store(), lineno=575, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=575, col_offset=13), 'get_stack_trace', Load(), lineno=575, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=575, col_offset=41), 'get_sample_script', Load(), lineno=575, col_offset=41), [], [], None, None, lineno=575, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-list 1,3', lineno=576, col_offset=57)], Load(), lineno=576, col_offset=56))], None, None, lineno=575, col_offset=13), lineno=575, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=578, col_offset=8), 'assertListing', Load(), lineno=578, col_offset=8), [Str('   1    # Sample script for use by test_gdb.py\n   2    \n   3    def foo(a, b, c):\n', lineno=578, col_offset=27), Name('bt', Load(), lineno=581, col_offset=27)], [], None, None, lineno=578, col_offset=8), lineno=578, col_offset=8)], [], lineno=573, col_offset=4)], [], lineno=543, col_offset=0), ClassDef('StackNavigationTests', [Name('DebuggerTests', Load(), lineno=583, col_offset=27)], [FunctionDef('test_pyup_command', arguments([Name('self', Param(), lineno=585, col_offset=26)], None, None, []), [Expr(Str('Verify that the "py-up" command works', lineno=586, col_offset=8), lineno=586, col_offset=8), Assign([Name('bt', Store(), lineno=587, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=587, col_offset=13), 'get_stack_trace', Load(), lineno=587, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=587, col_offset=41), 'get_sample_script', Load(), lineno=587, col_offset=41), [], [], None, None, lineno=587, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-up', lineno=588, col_offset=57)], Load(), lineno=588, col_offset=56))], None, None, lineno=587, col_offset=13), lineno=587, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=589, col_offset=8), 'assertMultilineMatches', Load(), lineno=589, col_offset=8), [Name('bt', Load(), lineno=589, col_offset=36), Str('^.*\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 7, in bar \\(a=1, b=2, c=3\\)\n    baz\\(a, b, c\\)\n$', lineno=593, col_offset=-1)], [], None, None, lineno=589, col_offset=8), lineno=589, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=584, col_offset=5), 'skipUnless', Load(), lineno=584, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=584, col_offset=25), Str('test requires py-up/py-down commands', lineno=584, col_offset=42)], [], None, None, lineno=584, col_offset=5)], lineno=584, col_offset=4), FunctionDef('test_down_at_bottom', arguments([Name('self', Param(), lineno=596, col_offset=28)], None, None, []), [Expr(Str('Verify handling of "py-down" at the bottom of the stack', lineno=597, col_offset=8), lineno=597, col_offset=8), Assign([Name('bt', Store(), lineno=598, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=598, col_offset=13), 'get_stack_trace', Load(), lineno=598, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=598, col_offset=41), 'get_sample_script', Load(), lineno=598, col_offset=41), [], [], None, None, lineno=598, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-down', lineno=599, col_offset=57)], Load(), lineno=599, col_offset=56))], None, None, lineno=598, col_offset=13), lineno=598, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=600, col_offset=8), 'assertEndsWith', Load(), lineno=600, col_offset=8), [Name('bt', Load(), lineno=600, col_offset=28), Str('Unable to find a newer python frame\n', lineno=601, col_offset=28)], [], None, None, lineno=600, col_offset=8), lineno=600, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=595, col_offset=5), 'skipUnless', Load(), lineno=595, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=595, col_offset=25), Str('test requires py-up/py-down commands', lineno=595, col_offset=42)], [], None, None, lineno=595, col_offset=5)], lineno=595, col_offset=4), FunctionDef('test_up_at_top', arguments([Name('self', Param(), lineno=604, col_offset=23)], None, None, []), [Expr(Str('Verify handling of "py-up" at the top of the stack', lineno=605, col_offset=8), lineno=605, col_offset=8), Assign([Name('bt', Store(), lineno=606, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=606, col_offset=13), 'get_stack_trace', Load(), lineno=606, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=606, col_offset=41), 'get_sample_script', Load(), lineno=606, col_offset=41), [], [], None, None, lineno=606, col_offset=41)), keyword('cmds_after_breakpoint', BinOp(List([Str('py-up', lineno=607, col_offset=57)], Load(), lineno=607, col_offset=56), Mult(), Num(4, lineno=607, col_offset=68), lineno=607, col_offset=56))], None, None, lineno=606, col_offset=13), lineno=606, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=608, col_offset=8), 'assertEndsWith', Load(), lineno=608, col_offset=8), [Name('bt', Load(), lineno=608, col_offset=28), Str('Unable to find an older python frame\n', lineno=609, col_offset=28)], [], None, None, lineno=608, col_offset=8), lineno=608, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=603, col_offset=5), 'skipUnless', Load(), lineno=603, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=603, col_offset=25), Str('test requires py-up/py-down commands', lineno=603, col_offset=42)], [], None, None, lineno=603, col_offset=5)], lineno=603, col_offset=4), FunctionDef('test_up_then_down', arguments([Name('self', Param(), lineno=612, col_offset=26)], None, None, []), [Expr(Str('Verify "py-up" followed by "py-down"', lineno=613, col_offset=8), lineno=613, col_offset=8), Assign([Name('bt', Store(), lineno=614, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=614, col_offset=13), 'get_stack_trace', Load(), lineno=614, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=614, col_offset=41), 'get_sample_script', Load(), lineno=614, col_offset=41), [], [], None, None, lineno=614, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-up', lineno=615, col_offset=57), Str('py-down', lineno=615, col_offset=66)], Load(), lineno=615, col_offset=56))], None, None, lineno=614, col_offset=13), lineno=614, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=616, col_offset=8), 'assertMultilineMatches', Load(), lineno=616, col_offset=8), [Name('bt', Load(), lineno=616, col_offset=36), Str('^.*\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 7, in bar \\(a=1, b=2, c=3\\)\n    baz\\(a, b, c\\)\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 10, in baz \\(args=\\(1, 2, 3\\)\\)\n    print\\(42\\)\n$', lineno=622, col_offset=-1)], [], None, None, lineno=616, col_offset=8), lineno=616, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=611, col_offset=5), 'skipUnless', Load(), lineno=611, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=611, col_offset=25), Str('test requires py-up/py-down commands', lineno=611, col_offset=42)], [], None, None, lineno=611, col_offset=5)], lineno=611, col_offset=4)], [], lineno=583, col_offset=0), ClassDef('PyBtTests', [Name('DebuggerTests', Load(), lineno=624, col_offset=16)], [FunctionDef('test_basic_command', arguments([Name('self', Param(), lineno=625, col_offset=27)], None, None, []), [Expr(Str('Verify that the "py-bt" command works', lineno=626, col_offset=8), lineno=626, col_offset=8), Assign([Name('bt', Store(), lineno=627, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=627, col_offset=13), 'get_stack_trace', Load(), lineno=627, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=627, col_offset=41), 'get_sample_script', Load(), lineno=627, col_offset=41), [], [], None, None, lineno=627, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-bt', lineno=628, col_offset=57)], Load(), lineno=628, col_offset=56))], None, None, lineno=627, col_offset=13), lineno=627, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=629, col_offset=8), 'assertMultilineMatches', Load(), lineno=629, col_offset=8), [Name('bt', Load(), lineno=629, col_offset=36), Str('^.*\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 7, in bar \\(a=1, b=2, c=3\\)\n    baz\\(a, b, c\\)\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 4, in foo \\(a=1, b=2, c=3\\)\n    bar\\(a, b, c\\)\n#[0-9]+ Frame 0x[0-9a-f]+, for file .*gdb_sample.py, line 12, in <module> \\(\\)\nfoo\\(1, 2, 3\\)\n', lineno=637, col_offset=-1)], [], None, None, lineno=629, col_offset=8), lineno=629, col_offset=8)], [], lineno=625, col_offset=4)], [], lineno=624, col_offset=0), ClassDef('PyPrintTests', [Name('DebuggerTests', Load(), lineno=639, col_offset=19)], [FunctionDef('test_basic_command', arguments([Name('self', Param(), lineno=640, col_offset=27)], None, None, []), [Expr(Str('Verify that the "py-print" command works', lineno=641, col_offset=8), lineno=641, col_offset=8), Assign([Name('bt', Store(), lineno=642, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=642, col_offset=13), 'get_stack_trace', Load(), lineno=642, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=642, col_offset=41), 'get_sample_script', Load(), lineno=642, col_offset=41), [], [], None, None, lineno=642, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-print args', lineno=643, col_offset=57)], Load(), lineno=643, col_offset=56))], None, None, lineno=642, col_offset=13), lineno=642, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=644, col_offset=8), 'assertMultilineMatches', Load(), lineno=644, col_offset=8), [Name('bt', Load(), lineno=644, col_offset=36), Str(".*\\nlocal 'args' = \\(1, 2, 3\\)\\n.*", lineno=645, col_offset=36)], [], None, None, lineno=644, col_offset=8), lineno=644, col_offset=8)], [], lineno=640, col_offset=4), FunctionDef('test_print_after_up', arguments([Name('self', Param(), lineno=648, col_offset=28)], None, None, []), [Assign([Name('bt', Store(), lineno=649, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=649, col_offset=13), 'get_stack_trace', Load(), lineno=649, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=649, col_offset=41), 'get_sample_script', Load(), lineno=649, col_offset=41), [], [], None, None, lineno=649, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-up', lineno=650, col_offset=57), Str('py-print c', lineno=650, col_offset=66), Str('py-print b', lineno=650, col_offset=80), Str('py-print a', lineno=650, col_offset=94)], Load(), lineno=650, col_offset=56))], None, None, lineno=649, col_offset=13), lineno=649, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=651, col_offset=8), 'assertMultilineMatches', Load(), lineno=651, col_offset=8), [Name('bt', Load(), lineno=651, col_offset=36), Str(".*\\nlocal 'c' = 3\\nlocal 'b' = 2\\nlocal 'a' = 1\\n.*", lineno=652, col_offset=36)], [], None, None, lineno=651, col_offset=8), lineno=651, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=647, col_offset=5), 'skipUnless', Load(), lineno=647, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=647, col_offset=25), Str('test requires py-up/py-down commands', lineno=647, col_offset=42)], [], None, None, lineno=647, col_offset=5)], lineno=647, col_offset=4), FunctionDef('test_printing_global', arguments([Name('self', Param(), lineno=654, col_offset=29)], None, None, []), [Assign([Name('bt', Store(), lineno=655, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=655, col_offset=13), 'get_stack_trace', Load(), lineno=655, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=655, col_offset=41), 'get_sample_script', Load(), lineno=655, col_offset=41), [], [], None, None, lineno=655, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-print __name__', lineno=656, col_offset=57)], Load(), lineno=656, col_offset=56))], None, None, lineno=655, col_offset=13), lineno=655, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=657, col_offset=8), 'assertMultilineMatches', Load(), lineno=657, col_offset=8), [Name('bt', Load(), lineno=657, col_offset=36), Str(".*\\nglobal '__name__' = '__main__'\\n.*", lineno=658, col_offset=36)], [], None, None, lineno=657, col_offset=8), lineno=657, col_offset=8)], [], lineno=654, col_offset=4), FunctionDef('test_printing_builtin', arguments([Name('self', Param(), lineno=660, col_offset=30)], None, None, []), [Assign([Name('bt', Store(), lineno=661, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=661, col_offset=13), 'get_stack_trace', Load(), lineno=661, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=661, col_offset=41), 'get_sample_script', Load(), lineno=661, col_offset=41), [], [], None, None, lineno=661, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-print len', lineno=662, col_offset=57)], Load(), lineno=662, col_offset=56))], None, None, lineno=661, col_offset=13), lineno=661, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=663, col_offset=8), 'assertMultilineMatches', Load(), lineno=663, col_offset=8), [Name('bt', Load(), lineno=663, col_offset=36), Str(".*\\nbuiltin 'len' = <built-in function len>\\n.*", lineno=664, col_offset=36)], [], None, None, lineno=663, col_offset=8), lineno=663, col_offset=8)], [], lineno=660, col_offset=4)], [], lineno=639, col_offset=0), ClassDef('PyLocalsTests', [Name('DebuggerTests', Load(), lineno=666, col_offset=20)], [FunctionDef('test_basic_command', arguments([Name('self', Param(), lineno=667, col_offset=27)], None, None, []), [Assign([Name('bt', Store(), lineno=668, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=668, col_offset=13), 'get_stack_trace', Load(), lineno=668, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=668, col_offset=41), 'get_sample_script', Load(), lineno=668, col_offset=41), [], [], None, None, lineno=668, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-locals', lineno=669, col_offset=57)], Load(), lineno=669, col_offset=56))], None, None, lineno=668, col_offset=13), lineno=668, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=670, col_offset=8), 'assertMultilineMatches', Load(), lineno=670, col_offset=8), [Name('bt', Load(), lineno=670, col_offset=36), Str('.*\\nargs = \\(1, 2, 3\\)\\n.*', lineno=671, col_offset=36)], [], None, None, lineno=670, col_offset=8), lineno=670, col_offset=8)], [], lineno=667, col_offset=4), FunctionDef('test_locals_after_up', arguments([Name('self', Param(), lineno=674, col_offset=29)], None, None, []), [Assign([Name('bt', Store(), lineno=675, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=675, col_offset=13), 'get_stack_trace', Load(), lineno=675, col_offset=13), [], [keyword('script', Call(Attribute(Name('self', Load(), lineno=675, col_offset=41), 'get_sample_script', Load(), lineno=675, col_offset=41), [], [], None, None, lineno=675, col_offset=41)), keyword('cmds_after_breakpoint', List([Str('py-up', lineno=676, col_offset=57), Str('py-locals', lineno=676, col_offset=66)], Load(), lineno=676, col_offset=56))], None, None, lineno=675, col_offset=13), lineno=675, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=677, col_offset=8), 'assertMultilineMatches', Load(), lineno=677, col_offset=8), [Name('bt', Load(), lineno=677, col_offset=36), Str('.*\\na = 1\\nb = 2\\nc = 3\\n.*', lineno=678, col_offset=36)], [], None, None, lineno=677, col_offset=8), lineno=677, col_offset=8)], [Call(Attribute(Name('unittest', Load(), lineno=673, col_offset=5), 'skipUnless', Load(), lineno=673, col_offset=5), [Name('HAS_PYUP_PYDOWN', Load(), lineno=673, col_offset=25), Str('test requires py-up/py-down commands', lineno=673, col_offset=42)], [], None, None, lineno=673, col_offset=5)], lineno=673, col_offset=4)], [], lineno=666, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Name('cflags', Store(), lineno=681, col_offset=4)], Subscript(Call(Attribute(Name('sysconfig', Load(), lineno=681, col_offset=13), 'get_config_vars', Load(), lineno=681, col_offset=13), [], [], None, None, lineno=681, col_offset=13), Index(Str('PY_CFLAGS', lineno=681, col_offset=41)), Load(), lineno=681, col_offset=13), lineno=681, col_offset=4), Assign([Name('final_opt', Store(), lineno=682, col_offset=4)], Str('', lineno=682, col_offset=16), lineno=682, col_offset=4), For(Name('opt', Store(), lineno=683, col_offset=8), Call(Attribute(Name('cflags', Load(), lineno=683, col_offset=15), 'split', Load(), lineno=683, col_offset=15), [], [], None, None, lineno=683, col_offset=15), [If(Call(Attribute(Name('opt', Load(), lineno=684, col_offset=11), 'startswith', Load(), lineno=684, col_offset=11), [Str('-O', lineno=684, col_offset=26)], [], None, None, lineno=684, col_offset=11), [Assign([Name('final_opt', Store(), lineno=685, col_offset=12)], Name('opt', Load(), lineno=685, col_offset=24), lineno=685, col_offset=12)], [], lineno=684, col_offset=8)], [], lineno=683, col_offset=4), If(BoolOp(And(), [Name('final_opt', Load(), lineno=686, col_offset=7), Compare(Name('final_opt', Load(), lineno=686, col_offset=21), [NotEq()], [Str('-O0', lineno=686, col_offset=34)], lineno=686, col_offset=21)], lineno=686, col_offset=7), [Raise(Call(Attribute(Name('unittest', Load(), lineno=687, col_offset=14), 'SkipTest', Load(), lineno=687, col_offset=14), [Str("Python was built with compiler optimizations, tests can't reliably succeed", lineno=687, col_offset=32)], [], None, None, lineno=687, col_offset=14), None, None, lineno=687, col_offset=8)], [], lineno=686, col_offset=4), Expr(Call(Name('run_unittest', Load(), lineno=690, col_offset=4), [Name('PrettyPrintTests', Load(), lineno=690, col_offset=17), Name('PyListTests', Load(), lineno=691, col_offset=17), Name('StackNavigationTests', Load(), lineno=692, col_offset=17), Name('PyBtTests', Load(), lineno=693, col_offset=17), Name('PyPrintTests', Load(), lineno=694, col_offset=17), Name('PyLocalsTests', Load(), lineno=695, col_offset=17)], [], None, None, lineno=690, col_offset=4), lineno=690, col_offset=4)], [], lineno=680, col_offset=0), If(Compare(Name('__name__', Load(), lineno=698, col_offset=3), [Eq()], [Str('__main__', lineno=698, col_offset=15)], lineno=698, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=699, col_offset=4), [], [], None, None, lineno=699, col_offset=4), lineno=699, col_offset=4)], [], lineno=698, col_offset=0)])
