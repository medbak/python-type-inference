Module([ImportFrom('bgenOutput', [alias('*', None)], 0, lineno=3, col_offset=0), ImportFrom('bgenType', [alias('OutputOnlyMixIn', None)], 0, lineno=4, col_offset=0), ImportFrom('bgenBuffer', [alias('FixedInputOutputBufferType', None)], 0, lineno=5, col_offset=0), ClassDef('HeapInputOutputBufferType', [Name('FixedInputOutputBufferType', Load(), lineno=8, col_offset=32)], [Expr(Str('Input-output buffer allocated on the heap -- passed as (inbuffer, outbuffer, size).\n\n    Instantiate without parameters.\n    Call from Python with input buffer.\n    ', lineno=14, col_offset=-1), lineno=14, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=16, col_offset=17), Name('datatype', Param(), lineno=16, col_offset=23), Name('sizetype', Param(), lineno=16, col_offset=42), Name('sizeformat', Param(), lineno=16, col_offset=60)], None, None, [Str('char', lineno=16, col_offset=34), Str('int', lineno=16, col_offset=53), Name('None', Load(), lineno=16, col_offset=73)]), [Expr(Call(Attribute(Name('FixedInputOutputBufferType', Load(), lineno=17, col_offset=8), '__init__', Load(), lineno=17, col_offset=8), [Name('self', Load(), lineno=17, col_offset=44), Str('0', lineno=17, col_offset=50), Name('datatype', Load(), lineno=17, col_offset=55), Name('sizetype', Load(), lineno=17, col_offset=65), Name('sizeformat', Load(), lineno=17, col_offset=75)], [], None, None, lineno=17, col_offset=8), lineno=17, col_offset=8)], [], lineno=16, col_offset=4), FunctionDef('getOutputBufferDeclarations', arguments([Name('self', Param(), lineno=19, col_offset=36), Name('name', Param(), lineno=19, col_offset=42), Name('constmode', Param(), lineno=19, col_offset=48), Name('outmode', Param(), lineno=19, col_offset=65)], None, None, [Name('False', Load(), lineno=19, col_offset=58), Name('False', Load(), lineno=19, col_offset=73)]), [If(Name('constmode', Load(), lineno=20, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=21, col_offset=18), Str('Cannot use const output buffer', lineno=21, col_offset=32), None, lineno=21, col_offset=12)], [], lineno=20, col_offset=8), If(Name('outmode', Load(), lineno=22, col_offset=11), [Assign([Name('out', Store(), lineno=23, col_offset=12)], Str('*', lineno=23, col_offset=18), lineno=23, col_offset=12)], [Assign([Name('out', Store(), lineno=25, col_offset=12)], Str('', lineno=25, col_offset=18), lineno=25, col_offset=12)], lineno=22, col_offset=8), Return(List([BinOp(Str('%s%s *%s__out__', lineno=26, col_offset=16), Mod(), Tuple([Attribute(Name('self', Load(), lineno=26, col_offset=37), 'datatype', Load(), lineno=26, col_offset=37), Name('out', Load(), lineno=26, col_offset=52), Name('name', Load(), lineno=26, col_offset=57)], Load(), lineno=26, col_offset=37), lineno=26, col_offset=16)], Load(), lineno=26, col_offset=15), lineno=26, col_offset=8)], [], lineno=19, col_offset=4), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=28, col_offset=21), Name('name', Param(), lineno=28, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=29, col_offset=8), [Str('if ((%s__out__ = malloc(%s__in_len__)) == NULL)', lineno=29, col_offset=15), Name('name', Load(), lineno=29, col_offset=66), Name('name', Load(), lineno=29, col_offset=72)], [], None, None, lineno=29, col_offset=8), lineno=29, col_offset=8), Expr(Call(Name('OutLbrace', Load(), lineno=30, col_offset=8), [], [], None, None, lineno=30, col_offset=8), lineno=30, col_offset=8), Expr(Call(Name('Output', Load(), lineno=31, col_offset=8), [Str('PyErr_NoMemory();', lineno=31, col_offset=15)], [], None, None, lineno=31, col_offset=8), lineno=31, col_offset=8), Expr(Call(Name('Output', Load(), lineno=32, col_offset=8), [Str('goto %s__error__;', lineno=32, col_offset=15), Name('name', Load(), lineno=32, col_offset=36)], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'label_needed', Store(), lineno=33, col_offset=8)], Num(1, lineno=33, col_offset=28), lineno=33, col_offset=8), Expr(Call(Name('OutRbrace', Load(), lineno=34, col_offset=8), [], [], None, None, lineno=34, col_offset=8), lineno=34, col_offset=8), Expr(Call(Name('Output', Load(), lineno=35, col_offset=8), [Str('%s__len__ = %s__in_len__;', lineno=35, col_offset=15), Name('name', Load(), lineno=35, col_offset=44), Name('name', Load(), lineno=35, col_offset=50)], [], None, None, lineno=35, col_offset=8), lineno=35, col_offset=8)], [], lineno=28, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=37, col_offset=19), Name('name', Param(), lineno=37, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__in__, %s__out__, (%s)%s__len__', lineno=38, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=39, col_offset=13), Name('name', Load(), lineno=39, col_offset=19), Attribute(Name('self', Load(), lineno=39, col_offset=25), 'sizetype', Load(), lineno=39, col_offset=25), Name('name', Load(), lineno=39, col_offset=40)], Load(), lineno=39, col_offset=13), lineno=38, col_offset=15), lineno=38, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=41, col_offset=20), Name('name', Param(), lineno=41, col_offset=26)], None, None, []), [Return(BinOp(Str('%s__out__, (int)%s__len__', lineno=42, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=42, col_offset=46), Name('name', Load(), lineno=42, col_offset=52)], Load(), lineno=42, col_offset=46), lineno=42, col_offset=15), lineno=42, col_offset=8)], [], lineno=41, col_offset=4), FunctionDef('cleanup', arguments([Name('self', Param(), lineno=44, col_offset=16), Name('name', Param(), lineno=44, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=45, col_offset=8), [Str('free(%s__out__);', lineno=45, col_offset=15), Name('name', Load(), lineno=45, col_offset=35)], [], None, None, lineno=45, col_offset=8), lineno=45, col_offset=8), Expr(Call(Attribute(Name('FixedInputOutputBufferType', Load(), lineno=46, col_offset=8), 'cleanup', Load(), lineno=46, col_offset=8), [Name('self', Load(), lineno=46, col_offset=43), Name('name', Load(), lineno=46, col_offset=49)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8)], [], lineno=44, col_offset=4)], [], lineno=8, col_offset=0), ClassDef('VarHeapInputOutputBufferType', [Name('HeapInputOutputBufferType', Load(), lineno=49, col_offset=35)], [Expr(Str('same as base class, but passed as (inbuffer, outbuffer, &size)', lineno=51, col_offset=4), lineno=51, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=53, col_offset=19), Name('name', Param(), lineno=53, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__in__, %s__out__, &%s__len__', lineno=54, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=54, col_offset=52), Name('name', Load(), lineno=54, col_offset=58), Name('name', Load(), lineno=54, col_offset=64)], Load(), lineno=54, col_offset=52), lineno=54, col_offset=15), lineno=54, col_offset=8)], [], lineno=53, col_offset=4)], [], lineno=49, col_offset=0), ClassDef('HeapCombinedInputOutputBufferType', [Name('HeapInputOutputBufferType', Load(), lineno=57, col_offset=40)], [Expr(Str('same as base class, but passed as (inoutbuffer, size)', lineno=59, col_offset=4), lineno=59, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=61, col_offset=19), Name('name', Param(), lineno=61, col_offset=25)], None, None, []), [Return(BinOp(Str('(%s *)memcpy(%s__out__, %s__in__, %s__len__)', lineno=62, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=63, col_offset=13), 'datatype', Load(), lineno=63, col_offset=13), Name('name', Load(), lineno=63, col_offset=28), Name('name', Load(), lineno=63, col_offset=36), Name('name', Load(), lineno=63, col_offset=46)], Load(), lineno=63, col_offset=13), lineno=62, col_offset=15), lineno=62, col_offset=8)], [], lineno=61, col_offset=4)], [], lineno=57, col_offset=0), ClassDef('VarHeapCombinedInputOutputBufferType', [Name('HeapInputOutputBufferType', Load(), lineno=66, col_offset=43)], [Expr(Str('same as base class, but passed as (inoutbuffer, &size)', lineno=68, col_offset=4), lineno=68, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=70, col_offset=19), Name('name', Param(), lineno=70, col_offset=25)], None, None, []), [Return(BinOp(Str('(%s *)memcpy(%s__out__, %s__in__, &%s__len__)', lineno=71, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=72, col_offset=13), 'datatype', Load(), lineno=72, col_offset=13), Name('name', Load(), lineno=72, col_offset=28), Name('name', Load(), lineno=72, col_offset=36), Name('name', Load(), lineno=72, col_offset=47)], Load(), lineno=72, col_offset=13), lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=70, col_offset=4)], [], lineno=66, col_offset=0), ClassDef('HeapOutputBufferType', [Name('OutputOnlyMixIn', Load(), lineno=75, col_offset=27), Name('HeapInputOutputBufferType', Load(), lineno=75, col_offset=44)], [Expr(Str('Output buffer allocated on the heap -- passed as (buffer, size).\n\n    Instantiate without parameters.\n    Call from Python with buffer size.\n    ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), FunctionDef('getInputBufferDeclarations', arguments([Name('self', Param(), lineno=83, col_offset=35), Name('name', Param(), lineno=83, col_offset=41), Name('constmode', Param(), lineno=83, col_offset=47)], None, None, [Name('False', Load(), lineno=83, col_offset=57)]), [Return(List([], Load(), lineno=84, col_offset=15), lineno=84, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=86, col_offset=22)], None, None, []), [Return(Str('i', lineno=87, col_offset=15), lineno=87, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=89, col_offset=20), Name('name', Param(), lineno=89, col_offset=26)], None, None, []), [Return(BinOp(Str('&%s__in_len__', lineno=90, col_offset=15), Mod(), Name('name', Load(), lineno=90, col_offset=33), lineno=90, col_offset=15), lineno=90, col_offset=8)], [], lineno=89, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=92, col_offset=19), Name('name', Param(), lineno=92, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__out__, %s__len__', lineno=93, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=93, col_offset=41), Name('name', Load(), lineno=93, col_offset=47)], Load(), lineno=93, col_offset=41), lineno=93, col_offset=15), lineno=93, col_offset=8)], [], lineno=92, col_offset=4)], [], lineno=75, col_offset=0), ClassDef('VarHeapOutputBufferType', [Name('HeapOutputBufferType', Load(), lineno=96, col_offset=30)], [Expr(Str('Output buffer allocated on the heap -- passed as (buffer, &size).\n\n    Instantiate without parameters.\n    Call from Python with buffer size.\n    ', lineno=102, col_offset=-1), lineno=102, col_offset=-1), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=104, col_offset=19), Name('name', Param(), lineno=104, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__out__, &%s__len__', lineno=105, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=105, col_offset=42), Name('name', Load(), lineno=105, col_offset=48)], Load(), lineno=105, col_offset=42), lineno=105, col_offset=15), lineno=105, col_offset=8)], [], lineno=104, col_offset=4)], [], lineno=96, col_offset=0), ClassDef('VarVarHeapOutputBufferType', [Name('VarHeapOutputBufferType', Load(), lineno=108, col_offset=33)], [Expr(Str('Output buffer allocated on the heap -- passed as (buffer, size, &size).\n\n    Instantiate without parameters.\n    Call from Python with buffer size.\n    ', lineno=114, col_offset=-1), lineno=114, col_offset=-1), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=116, col_offset=19), Name('name', Param(), lineno=116, col_offset=25)], None, None, []), [Return(BinOp(Str('%s__out__, %s__len__, &%s__len__', lineno=117, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=117, col_offset=53), Name('name', Load(), lineno=117, col_offset=59), Name('name', Load(), lineno=117, col_offset=65)], Load(), lineno=117, col_offset=53), lineno=117, col_offset=15), lineno=117, col_offset=8)], [], lineno=116, col_offset=4)], [], lineno=108, col_offset=0), ClassDef('MallocHeapOutputBufferType', [Name('HeapOutputBufferType', Load(), lineno=119, col_offset=33)], [Expr(Str('Output buffer allocated by the called function -- passed as (&buffer, &size).\n\n    Instantiate without parameters.\n    Call from Python without parameters.\n    ', lineno=124, col_offset=-1), lineno=124, col_offset=-1), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=126, col_offset=21), Name('name', Param(), lineno=126, col_offset=27)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=127, col_offset=8), [Str('%s__out__ = NULL;', lineno=127, col_offset=15), Name('name', Load(), lineno=127, col_offset=36)], [], None, None, lineno=127, col_offset=8), lineno=127, col_offset=8)], [], lineno=126, col_offset=4), FunctionDef('getAuxDeclarations', arguments([Name('self', Param(), lineno=129, col_offset=27), Name('name', Param(), lineno=129, col_offset=33)], None, None, []), [Return(List([], Load(), lineno=130, col_offset=15), lineno=130, col_offset=8)], [], lineno=129, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=132, col_offset=19), Name('name', Param(), lineno=132, col_offset=25)], None, None, []), [Return(BinOp(Str('&%s__out__, &%s__len__', lineno=133, col_offset=15), Mod(), Tuple([Name('name', Load(), lineno=133, col_offset=43), Name('name', Load(), lineno=133, col_offset=49)], Load(), lineno=133, col_offset=43), lineno=133, col_offset=15), lineno=133, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=135, col_offset=22)], None, None, []), [Return(Str('', lineno=136, col_offset=15), lineno=136, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=138, col_offset=20), Name('name', Param(), lineno=138, col_offset=26)], None, None, []), [Return(Name('None', Load(), lineno=139, col_offset=15), lineno=139, col_offset=8)], [], lineno=138, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=141, col_offset=22)], None, None, []), [Return(Str('z#', lineno=142, col_offset=15), lineno=142, col_offset=8)], [], lineno=141, col_offset=4), FunctionDef('cleanup', arguments([Name('self', Param(), lineno=144, col_offset=16), Name('name', Param(), lineno=144, col_offset=22)], None, None, []), [Expr(Call(Name('Output', Load(), lineno=145, col_offset=8), [Str('if( %s__out__ ) free(%s__out__);', lineno=145, col_offset=15), Name('name', Load(), lineno=145, col_offset=51), Name('name', Load(), lineno=145, col_offset=57)], [], None, None, lineno=145, col_offset=8), lineno=145, col_offset=8)], [], lineno=144, col_offset=4)], [], lineno=119, col_offset=0)])
