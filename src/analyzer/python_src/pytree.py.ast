Module([Expr(Str("\nPython parse tree definitions.\n\nThis is a very concrete parse tree; we need to keep every token and\neven the comments and whitespace between tokens.\n\nThere's also a pattern matching implementation here.\n", lineno=11, col_offset=-1), lineno=11, col_offset=-1), Assign([Name('__author__', Store(), lineno=13, col_offset=0)], Str('Guido van Rossum <guido@python.org>', lineno=13, col_offset=13), lineno=13, col_offset=0), Import([alias('sys', None)], lineno=15, col_offset=0), Import([alias('warnings', None)], lineno=16, col_offset=0), ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=17, col_offset=0), Assign([Name('HUGE', Store(), lineno=19, col_offset=0)], Num(2147483647, lineno=19, col_offset=7), lineno=19, col_offset=0), Assign([Name('_type_reprs', Store(), lineno=21, col_offset=0)], Dict([], [], lineno=21, col_offset=14), lineno=21, col_offset=0), FunctionDef('type_repr', arguments([Name('type_num', Param(), lineno=22, col_offset=14)], None, None, []), [Global(['_type_reprs'], lineno=23, col_offset=4), If(UnaryOp(Not(), Name('_type_reprs', Load(), lineno=24, col_offset=11), lineno=24, col_offset=7), [ImportFrom('pygram', [alias('python_symbols', None)], 1, lineno=25, col_offset=8), For(Tuple([Name('name', Store(), lineno=28, col_offset=12), Name('val', Store(), lineno=28, col_offset=18)], Store(), lineno=28, col_offset=12), Call(Attribute(Attribute(Name('python_symbols', Load(), lineno=28, col_offset=25), '__dict__', Load(), lineno=28, col_offset=25), 'items', Load(), lineno=28, col_offset=25), [], [], None, None, lineno=28, col_offset=25), [If(Compare(Call(Name('type', Load(), lineno=29, col_offset=15), [Name('val', Load(), lineno=29, col_offset=20)], [], None, None, lineno=29, col_offset=15), [Eq()], [Name('int', Load(), lineno=29, col_offset=28)], lineno=29, col_offset=15), [Assign([Subscript(Name('_type_reprs', Load(), lineno=29, col_offset=33), Index(Name('val', Load(), lineno=29, col_offset=45)), Store(), lineno=29, col_offset=33)], Name('name', Load(), lineno=29, col_offset=52), lineno=29, col_offset=33)], [], lineno=29, col_offset=12)], [], lineno=28, col_offset=8)], [], lineno=24, col_offset=4), Return(Call(Attribute(Name('_type_reprs', Load(), lineno=30, col_offset=11), 'setdefault', Load(), lineno=30, col_offset=11), [Name('type_num', Load(), lineno=30, col_offset=34), Name('type_num', Load(), lineno=30, col_offset=44)], [], None, None, lineno=30, col_offset=11), lineno=30, col_offset=4)], [], lineno=22, col_offset=0), ClassDef('Base', [Name('object', Load(), lineno=32, col_offset=11)], [Expr(Str('\n    Abstract base class for Node and Leaf.\n\n    This provides some default functionality and boilerplate using the\n    template pattern.\n\n    A node may be a subnode of at most one parent.\n    ', lineno=41, col_offset=-1), lineno=41, col_offset=-1), Assign([Name('type', Store(), lineno=44, col_offset=4)], Name('None', Load(), lineno=44, col_offset=11), lineno=44, col_offset=4), Assign([Name('parent', Store(), lineno=45, col_offset=4)], Name('None', Load(), lineno=45, col_offset=13), lineno=45, col_offset=4), Assign([Name('children', Store(), lineno=46, col_offset=4)], Tuple([], Load(), lineno=46, col_offset=15), lineno=46, col_offset=4), Assign([Name('was_changed', Store(), lineno=47, col_offset=4)], Name('False', Load(), lineno=47, col_offset=18), lineno=47, col_offset=4), Assign([Name('was_checked', Store(), lineno=48, col_offset=4)], Name('False', Load(), lineno=48, col_offset=18), lineno=48, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=50, col_offset=16)], 'args', 'kwds', []), [Expr(Str('Constructor that prevents Base from being instantiated.', lineno=51, col_offset=8), lineno=51, col_offset=8), Assert(Compare(Name('cls', Load(), lineno=52, col_offset=15), [IsNot()], [Name('Base', Load(), lineno=52, col_offset=26)], lineno=52, col_offset=15), Str('Cannot instantiate Base', lineno=52, col_offset=32), lineno=52, col_offset=8), Return(Call(Attribute(Name('object', Load(), lineno=53, col_offset=15), '__new__', Load(), lineno=53, col_offset=15), [Name('cls', Load(), lineno=53, col_offset=30)], [], None, None, lineno=53, col_offset=15), lineno=53, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('__eq__', arguments([Name('self', Param(), lineno=55, col_offset=15), Name('other', Param(), lineno=55, col_offset=21)], None, None, []), [Expr(Str('\n        Compare two nodes for equality.\n\n        This calls the method _eq().\n        ', lineno=60, col_offset=-1), lineno=60, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=61, col_offset=11), '__class__', Load(), lineno=61, col_offset=11), [IsNot()], [Attribute(Name('other', Load(), lineno=61, col_offset=33), '__class__', Load(), lineno=61, col_offset=33)], lineno=61, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=62, col_offset=19), lineno=62, col_offset=12)], [], lineno=61, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=63, col_offset=15), '_eq', Load(), lineno=63, col_offset=15), [Name('other', Load(), lineno=63, col_offset=24)], [], None, None, lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=55, col_offset=4), Assign([Name('__hash__', Store(), lineno=65, col_offset=4)], Name('None', Load(), lineno=65, col_offset=15), lineno=65, col_offset=4), FunctionDef('__ne__', arguments([Name('self', Param(), lineno=67, col_offset=15), Name('other', Param(), lineno=67, col_offset=21)], None, None, []), [Expr(Str('\n        Compare two nodes for inequality.\n\n        This calls the method _eq().\n        ', lineno=72, col_offset=-1), lineno=72, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=73, col_offset=11), '__class__', Load(), lineno=73, col_offset=11), [IsNot()], [Attribute(Name('other', Load(), lineno=73, col_offset=33), '__class__', Load(), lineno=73, col_offset=33)], lineno=73, col_offset=11), [Return(Name('NotImplemented', Load(), lineno=74, col_offset=19), lineno=74, col_offset=12)], [], lineno=73, col_offset=8), Return(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=75, col_offset=19), '_eq', Load(), lineno=75, col_offset=19), [Name('other', Load(), lineno=75, col_offset=28)], [], None, None, lineno=75, col_offset=19), lineno=75, col_offset=15), lineno=75, col_offset=8)], [], lineno=67, col_offset=4), FunctionDef('_eq', arguments([Name('self', Param(), lineno=77, col_offset=12), Name('other', Param(), lineno=77, col_offset=18)], None, None, []), [Expr(Str('\n        Compare two nodes for equality.\n\n        This is called by __eq__ and __ne__.  It is only called if the two nodes\n        have the same type.  This must be implemented by the concrete subclass.\n        Nodes should be considered equal if they have the same structure,\n        ignoring the prefix string and other context information.\n        ', lineno=85, col_offset=-1), lineno=85, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=86, col_offset=14), None, None, lineno=86, col_offset=8)], [], lineno=77, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=88, col_offset=14)], None, None, []), [Expr(Str('\n        Return a cloned (deep) copy of self.\n\n        This must be implemented by the concrete subclass.\n        ', lineno=93, col_offset=-1), lineno=93, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=94, col_offset=14), None, None, lineno=94, col_offset=8)], [], lineno=88, col_offset=4), FunctionDef('post_order', arguments([Name('self', Param(), lineno=96, col_offset=19)], None, None, []), [Expr(Str('\n        Return a post-order iterator for the tree.\n\n        This must be implemented by the concrete subclass.\n        ', lineno=101, col_offset=-1), lineno=101, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=102, col_offset=14), None, None, lineno=102, col_offset=8)], [], lineno=96, col_offset=4), FunctionDef('pre_order', arguments([Name('self', Param(), lineno=104, col_offset=18)], None, None, []), [Expr(Str('\n        Return a pre-order iterator for the tree.\n\n        This must be implemented by the concrete subclass.\n        ', lineno=109, col_offset=-1), lineno=109, col_offset=-1), Raise(Name('NotImplementedError', Load(), lineno=110, col_offset=14), None, None, lineno=110, col_offset=8)], [], lineno=104, col_offset=4), FunctionDef('set_prefix', arguments([Name('self', Param(), lineno=112, col_offset=19), Name('prefix', Param(), lineno=112, col_offset=25)], None, None, []), [Expr(Str('\n        Set the prefix for the node (see Leaf class).\n\n        DEPRECATED; use the prefix property directly.\n        ', lineno=117, col_offset=-1), lineno=117, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=118, col_offset=8), 'warn', Load(), lineno=118, col_offset=8), [Str('set_prefix() is deprecated; use the prefix property', lineno=118, col_offset=22), Name('DeprecationWarning', Load(), lineno=119, col_offset=22)], [keyword('stacklevel', Num(2, lineno=119, col_offset=53))], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=120, col_offset=8), 'prefix', Store(), lineno=120, col_offset=8)], Name('prefix', Load(), lineno=120, col_offset=22), lineno=120, col_offset=8)], [], lineno=112, col_offset=4), FunctionDef('get_prefix', arguments([Name('self', Param(), lineno=122, col_offset=19)], None, None, []), [Expr(Str('\n        Return the prefix for the node (see Leaf class).\n\n        DEPRECATED; use the prefix property directly.\n        ', lineno=127, col_offset=-1), lineno=127, col_offset=-1), Expr(Call(Attribute(Name('warnings', Load(), lineno=128, col_offset=8), 'warn', Load(), lineno=128, col_offset=8), [Str('get_prefix() is deprecated; use the prefix property', lineno=128, col_offset=22), Name('DeprecationWarning', Load(), lineno=129, col_offset=22)], [keyword('stacklevel', Num(2, lineno=129, col_offset=53))], None, None, lineno=128, col_offset=8), lineno=128, col_offset=8), Return(Attribute(Name('self', Load(), lineno=130, col_offset=15), 'prefix', Load(), lineno=130, col_offset=15), lineno=130, col_offset=8)], [], lineno=122, col_offset=4), FunctionDef('replace', arguments([Name('self', Param(), lineno=132, col_offset=16), Name('new', Param(), lineno=132, col_offset=22)], None, None, []), [Expr(Str('Replace this node with a new one in the parent.', lineno=133, col_offset=8), lineno=133, col_offset=8), Assert(Compare(Attribute(Name('self', Load(), lineno=134, col_offset=15), 'parent', Load(), lineno=134, col_offset=15), [IsNot()], [Name('None', Load(), lineno=134, col_offset=34)], lineno=134, col_offset=15), Call(Name('str', Load(), lineno=134, col_offset=40), [Name('self', Load(), lineno=134, col_offset=44)], [], None, None, lineno=134, col_offset=40), lineno=134, col_offset=8), Assert(Compare(Name('new', Load(), lineno=135, col_offset=15), [IsNot()], [Name('None', Load(), lineno=135, col_offset=26)], lineno=135, col_offset=15), None, lineno=135, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=136, col_offset=15), [Name('new', Load(), lineno=136, col_offset=26), Name('list', Load(), lineno=136, col_offset=31)], [], None, None, lineno=136, col_offset=15), lineno=136, col_offset=11), [Assign([Name('new', Store(), lineno=137, col_offset=12)], List([Name('new', Load(), lineno=137, col_offset=19)], Load(), lineno=137, col_offset=18), lineno=137, col_offset=12)], [], lineno=136, col_offset=8), Assign([Name('l_children', Store(), lineno=138, col_offset=8)], List([], Load(), lineno=138, col_offset=21), lineno=138, col_offset=8), Assign([Name('found', Store(), lineno=139, col_offset=8)], Name('False', Load(), lineno=139, col_offset=16), lineno=139, col_offset=8), For(Name('ch', Store(), lineno=140, col_offset=12), Attribute(Attribute(Name('self', Load(), lineno=140, col_offset=18), 'parent', Load(), lineno=140, col_offset=18), 'children', Load(), lineno=140, col_offset=18), [If(Compare(Name('ch', Load(), lineno=141, col_offset=15), [Is()], [Name('self', Load(), lineno=141, col_offset=21)], lineno=141, col_offset=15), [Assert(UnaryOp(Not(), Name('found', Load(), lineno=142, col_offset=27), lineno=142, col_offset=23), Tuple([Attribute(Attribute(Name('self', Load(), lineno=142, col_offset=35), 'parent', Load(), lineno=142, col_offset=35), 'children', Load(), lineno=142, col_offset=35), Name('self', Load(), lineno=142, col_offset=57), Name('new', Load(), lineno=142, col_offset=63)], Load(), lineno=142, col_offset=35), lineno=142, col_offset=16), If(Compare(Name('new', Load(), lineno=143, col_offset=19), [IsNot()], [Name('None', Load(), lineno=143, col_offset=30)], lineno=143, col_offset=19), [Expr(Call(Attribute(Name('l_children', Load(), lineno=144, col_offset=20), 'extend', Load(), lineno=144, col_offset=20), [Name('new', Load(), lineno=144, col_offset=38)], [], None, None, lineno=144, col_offset=20), lineno=144, col_offset=20)], [], lineno=143, col_offset=16), Assign([Name('found', Store(), lineno=145, col_offset=16)], Name('True', Load(), lineno=145, col_offset=24), lineno=145, col_offset=16)], [Expr(Call(Attribute(Name('l_children', Load(), lineno=147, col_offset=16), 'append', Load(), lineno=147, col_offset=16), [Name('ch', Load(), lineno=147, col_offset=34)], [], None, None, lineno=147, col_offset=16), lineno=147, col_offset=16)], lineno=141, col_offset=12)], [], lineno=140, col_offset=8), Assert(Name('found', Load(), lineno=148, col_offset=15), Tuple([Attribute(Name('self', Load(), lineno=148, col_offset=23), 'children', Load(), lineno=148, col_offset=23), Name('self', Load(), lineno=148, col_offset=38), Name('new', Load(), lineno=148, col_offset=44)], Load(), lineno=148, col_offset=23), lineno=148, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=149, col_offset=8), 'parent', Load(), lineno=149, col_offset=8), 'changed', Load(), lineno=149, col_offset=8), [], [], None, None, lineno=149, col_offset=8), lineno=149, col_offset=8), Assign([Attribute(Attribute(Name('self', Load(), lineno=150, col_offset=8), 'parent', Load(), lineno=150, col_offset=8), 'children', Store(), lineno=150, col_offset=8)], Name('l_children', Load(), lineno=150, col_offset=31), lineno=150, col_offset=8), For(Name('x', Store(), lineno=151, col_offset=12), Name('new', Load(), lineno=151, col_offset=17), [Assign([Attribute(Name('x', Load(), lineno=152, col_offset=12), 'parent', Store(), lineno=152, col_offset=12)], Attribute(Name('self', Load(), lineno=152, col_offset=23), 'parent', Load(), lineno=152, col_offset=23), lineno=152, col_offset=12)], [], lineno=151, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=153, col_offset=8), 'parent', Store(), lineno=153, col_offset=8)], Name('None', Load(), lineno=153, col_offset=22), lineno=153, col_offset=8)], [], lineno=132, col_offset=4), FunctionDef('get_lineno', arguments([Name('self', Param(), lineno=155, col_offset=19)], None, None, []), [Expr(Str('Return the line number which generated the invocant node.', lineno=156, col_offset=8), lineno=156, col_offset=8), Assign([Name('node', Store(), lineno=157, col_offset=8)], Name('self', Load(), lineno=157, col_offset=15), lineno=157, col_offset=8), While(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=158, col_offset=18), [Name('node', Load(), lineno=158, col_offset=29), Name('Leaf', Load(), lineno=158, col_offset=35)], [], None, None, lineno=158, col_offset=18), lineno=158, col_offset=14), [If(UnaryOp(Not(), Attribute(Name('node', Load(), lineno=159, col_offset=19), 'children', Load(), lineno=159, col_offset=19), lineno=159, col_offset=15), [Return(None, lineno=160, col_offset=16)], [], lineno=159, col_offset=12), Assign([Name('node', Store(), lineno=161, col_offset=12)], Subscript(Attribute(Name('node', Load(), lineno=161, col_offset=19), 'children', Load(), lineno=161, col_offset=19), Index(Num(0, lineno=161, col_offset=33)), Load(), lineno=161, col_offset=19), lineno=161, col_offset=12)], [], lineno=158, col_offset=8), Return(Attribute(Name('node', Load(), lineno=162, col_offset=15), 'lineno', Load(), lineno=162, col_offset=15), lineno=162, col_offset=8)], [], lineno=155, col_offset=4), FunctionDef('changed', arguments([Name('self', Param(), lineno=164, col_offset=16)], None, None, []), [If(Attribute(Name('self', Load(), lineno=165, col_offset=11), 'parent', Load(), lineno=165, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=166, col_offset=12), 'parent', Load(), lineno=166, col_offset=12), 'changed', Load(), lineno=166, col_offset=12), [], [], None, None, lineno=166, col_offset=12), lineno=166, col_offset=12)], [], lineno=165, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=167, col_offset=8), 'was_changed', Store(), lineno=167, col_offset=8)], Name('True', Load(), lineno=167, col_offset=27), lineno=167, col_offset=8)], [], lineno=164, col_offset=4), FunctionDef('remove', arguments([Name('self', Param(), lineno=169, col_offset=15)], None, None, []), [Expr(Str("\n        Remove the node from the tree. Returns the position of the node in its\n        parent's children before it was removed.\n        ", lineno=173, col_offset=-1), lineno=173, col_offset=-1), If(Attribute(Name('self', Load(), lineno=174, col_offset=11), 'parent', Load(), lineno=174, col_offset=11), [For(Tuple([Name('i', Store(), lineno=175, col_offset=16), Name('node', Store(), lineno=175, col_offset=19)], Store(), lineno=175, col_offset=16), Call(Name('enumerate', Load(), lineno=175, col_offset=27), [Attribute(Attribute(Name('self', Load(), lineno=175, col_offset=37), 'parent', Load(), lineno=175, col_offset=37), 'children', Load(), lineno=175, col_offset=37)], [], None, None, lineno=175, col_offset=27), [If(Compare(Name('node', Load(), lineno=176, col_offset=19), [Is()], [Name('self', Load(), lineno=176, col_offset=27)], lineno=176, col_offset=19), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=177, col_offset=20), 'parent', Load(), lineno=177, col_offset=20), 'changed', Load(), lineno=177, col_offset=20), [], [], None, None, lineno=177, col_offset=20), lineno=177, col_offset=20), Delete([Subscript(Attribute(Attribute(Name('self', Load(), lineno=178, col_offset=24), 'parent', Load(), lineno=178, col_offset=24), 'children', Load(), lineno=178, col_offset=24), Index(Name('i', Load(), lineno=178, col_offset=45)), Del(), lineno=178, col_offset=24)], lineno=178, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=179, col_offset=20), 'parent', Store(), lineno=179, col_offset=20)], Name('None', Load(), lineno=179, col_offset=34), lineno=179, col_offset=20), Return(Name('i', Load(), lineno=180, col_offset=27), lineno=180, col_offset=20)], [], lineno=176, col_offset=16)], [], lineno=175, col_offset=12)], [], lineno=174, col_offset=8)], [], lineno=169, col_offset=4), FunctionDef('next_sibling', arguments([Name('self', Param(), lineno=183, col_offset=21)], None, None, []), [Expr(Str("\n        The node immediately following the invocant in their parent's children\n        list. If the invocant does not have a next sibling, it is None\n        ", lineno=187, col_offset=-1), lineno=187, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=188, col_offset=11), 'parent', Load(), lineno=188, col_offset=11), [Is()], [Name('None', Load(), lineno=188, col_offset=26)], lineno=188, col_offset=11), [Return(Name('None', Load(), lineno=189, col_offset=19), lineno=189, col_offset=12)], [], lineno=188, col_offset=8), For(Tuple([Name('i', Store(), lineno=192, col_offset=12), Name('child', Store(), lineno=192, col_offset=15)], Store(), lineno=192, col_offset=12), Call(Name('enumerate', Load(), lineno=192, col_offset=24), [Attribute(Attribute(Name('self', Load(), lineno=192, col_offset=34), 'parent', Load(), lineno=192, col_offset=34), 'children', Load(), lineno=192, col_offset=34)], [], None, None, lineno=192, col_offset=24), [If(Compare(Name('child', Load(), lineno=193, col_offset=15), [Is()], [Name('self', Load(), lineno=193, col_offset=24)], lineno=193, col_offset=15), [TryExcept([Return(Subscript(Attribute(Attribute(Name('self', Load(), lineno=195, col_offset=27), 'parent', Load(), lineno=195, col_offset=27), 'children', Load(), lineno=195, col_offset=27), Index(BinOp(Name('i', Load(), lineno=195, col_offset=48), Add(), Num(1, lineno=195, col_offset=50), lineno=195, col_offset=48)), Load(), lineno=195, col_offset=27), lineno=195, col_offset=20)], [ExceptHandler(Name('IndexError', Load(), lineno=196, col_offset=23), None, [Return(Name('None', Load(), lineno=197, col_offset=27), lineno=197, col_offset=20)], lineno=196, col_offset=16)], [], lineno=194, col_offset=16)], [], lineno=193, col_offset=12)], [], lineno=192, col_offset=8)], [Name('property', Load(), lineno=182, col_offset=5)], lineno=182, col_offset=4), FunctionDef('prev_sibling', arguments([Name('self', Param(), lineno=200, col_offset=21)], None, None, []), [Expr(Str("\n        The node immediately preceding the invocant in their parent's children\n        list. If the invocant does not have a previous sibling, it is None.\n        ", lineno=204, col_offset=-1), lineno=204, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=205, col_offset=11), 'parent', Load(), lineno=205, col_offset=11), [Is()], [Name('None', Load(), lineno=205, col_offset=26)], lineno=205, col_offset=11), [Return(Name('None', Load(), lineno=206, col_offset=19), lineno=206, col_offset=12)], [], lineno=205, col_offset=8), For(Tuple([Name('i', Store(), lineno=209, col_offset=12), Name('child', Store(), lineno=209, col_offset=15)], Store(), lineno=209, col_offset=12), Call(Name('enumerate', Load(), lineno=209, col_offset=24), [Attribute(Attribute(Name('self', Load(), lineno=209, col_offset=34), 'parent', Load(), lineno=209, col_offset=34), 'children', Load(), lineno=209, col_offset=34)], [], None, None, lineno=209, col_offset=24), [If(Compare(Name('child', Load(), lineno=210, col_offset=15), [Is()], [Name('self', Load(), lineno=210, col_offset=24)], lineno=210, col_offset=15), [If(Compare(Name('i', Load(), lineno=211, col_offset=19), [Eq()], [Num(0, lineno=211, col_offset=24)], lineno=211, col_offset=19), [Return(Name('None', Load(), lineno=212, col_offset=27), lineno=212, col_offset=20)], [], lineno=211, col_offset=16), Return(Subscript(Attribute(Attribute(Name('self', Load(), lineno=213, col_offset=23), 'parent', Load(), lineno=213, col_offset=23), 'children', Load(), lineno=213, col_offset=23), Index(BinOp(Name('i', Load(), lineno=213, col_offset=44), Sub(), Num(1, lineno=213, col_offset=46), lineno=213, col_offset=44)), Load(), lineno=213, col_offset=23), lineno=213, col_offset=16)], [], lineno=210, col_offset=12)], [], lineno=209, col_offset=8)], [Name('property', Load(), lineno=199, col_offset=5)], lineno=199, col_offset=4), FunctionDef('leaves', arguments([Name('self', Param(), lineno=215, col_offset=15)], None, None, []), [For(Name('child', Store(), lineno=216, col_offset=12), Attribute(Name('self', Load(), lineno=216, col_offset=21), 'children', Load(), lineno=216, col_offset=21), [For(Name('x', Store(), lineno=217, col_offset=16), Call(Attribute(Name('child', Load(), lineno=217, col_offset=21), 'leaves', Load(), lineno=217, col_offset=21), [], [], None, None, lineno=217, col_offset=21), [Expr(Yield(Name('x', Load(), lineno=218, col_offset=22), lineno=218, col_offset=16), lineno=218, col_offset=16)], [], lineno=217, col_offset=12)], [], lineno=216, col_offset=8)], [], lineno=215, col_offset=4), FunctionDef('depth', arguments([Name('self', Param(), lineno=220, col_offset=14)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=221, col_offset=11), 'parent', Load(), lineno=221, col_offset=11), [Is()], [Name('None', Load(), lineno=221, col_offset=26)], lineno=221, col_offset=11), [Return(Num(0, lineno=222, col_offset=19), lineno=222, col_offset=12)], [], lineno=221, col_offset=8), Return(BinOp(Num(1, lineno=223, col_offset=15), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=223, col_offset=19), 'parent', Load(), lineno=223, col_offset=19), 'depth', Load(), lineno=223, col_offset=19), [], [], None, None, lineno=223, col_offset=19), lineno=223, col_offset=15), lineno=223, col_offset=8)], [], lineno=220, col_offset=4), FunctionDef('get_suffix', arguments([Name('self', Param(), lineno=225, col_offset=19)], None, None, []), [Expr(Str('\n        Return the string immediately following the invocant node. This is\n        effectively equivalent to node.next_sibling.prefix\n        ', lineno=229, col_offset=-1), lineno=229, col_offset=-1), Assign([Name('next_sib', Store(), lineno=230, col_offset=8)], Attribute(Name('self', Load(), lineno=230, col_offset=19), 'next_sibling', Load(), lineno=230, col_offset=19), lineno=230, col_offset=8), If(Compare(Name('next_sib', Load(), lineno=231, col_offset=11), [Is()], [Name('None', Load(), lineno=231, col_offset=23)], lineno=231, col_offset=11), [Return(Str(u'', lineno=232, col_offset=19), lineno=232, col_offset=12)], [], lineno=231, col_offset=8), Return(Attribute(Name('next_sib', Load(), lineno=233, col_offset=15), 'prefix', Load(), lineno=233, col_offset=15), lineno=233, col_offset=8)], [], lineno=225, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=235, col_offset=7), 'version_info', Load(), lineno=235, col_offset=7), [Lt()], [Tuple([Num(3, lineno=235, col_offset=27), Num(0, lineno=235, col_offset=30)], Load(), lineno=235, col_offset=27)], lineno=235, col_offset=7), [FunctionDef('__str__', arguments([Name('self', Param(), lineno=236, col_offset=20)], None, None, []), [Return(Call(Attribute(Call(Name('unicode', Load(), lineno=237, col_offset=19), [Name('self', Load(), lineno=237, col_offset=27)], [], None, None, lineno=237, col_offset=19), 'encode', Load(), lineno=237, col_offset=19), [Str('ascii', lineno=237, col_offset=40)], [], None, None, lineno=237, col_offset=19), lineno=237, col_offset=12)], [], lineno=236, col_offset=8)], [], lineno=235, col_offset=4)], [], lineno=32, col_offset=0), ClassDef('Node', [Name('Base', Load(), lineno=239, col_offset=11)], [Expr(Str('Concrete implementation for interior nodes.', lineno=241, col_offset=4), lineno=241, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=243, col_offset=17), Name('type', Param(), lineno=243, col_offset=22), Name('children', Param(), lineno=243, col_offset=28), Name('context', Param(), lineno=244, col_offset=17), Name('prefix', Param(), lineno=245, col_offset=17), Name('fixers_applied', Param(), lineno=246, col_offset=17)], None, None, [Name('None', Load(), lineno=244, col_offset=25), Name('None', Load(), lineno=245, col_offset=24), Name('None', Load(), lineno=246, col_offset=32)]), [Expr(Str('\n        Initializer.\n\n        Takes a type constant (a symbol number >= 256), a sequence of\n        child nodes, and an optional context keyword argument.\n\n        As a side effect, the parent pointers of the children are updated.\n        ', lineno=254, col_offset=-1), lineno=254, col_offset=-1), Assert(Compare(Name('type', Load(), lineno=255, col_offset=15), [GtE()], [Num(256, lineno=255, col_offset=23)], lineno=255, col_offset=15), Name('type', Load(), lineno=255, col_offset=28), lineno=255, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=256, col_offset=8), 'type', Store(), lineno=256, col_offset=8)], Name('type', Load(), lineno=256, col_offset=20), lineno=256, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=257, col_offset=8), 'children', Store(), lineno=257, col_offset=8)], Call(Name('list', Load(), lineno=257, col_offset=24), [Name('children', Load(), lineno=257, col_offset=29)], [], None, None, lineno=257, col_offset=24), lineno=257, col_offset=8), For(Name('ch', Store(), lineno=258, col_offset=12), Attribute(Name('self', Load(), lineno=258, col_offset=18), 'children', Load(), lineno=258, col_offset=18), [Assert(Compare(Attribute(Name('ch', Load(), lineno=259, col_offset=19), 'parent', Load(), lineno=259, col_offset=19), [Is()], [Name('None', Load(), lineno=259, col_offset=32)], lineno=259, col_offset=19), Call(Name('repr', Load(), lineno=259, col_offset=38), [Name('ch', Load(), lineno=259, col_offset=43)], [], None, None, lineno=259, col_offset=38), lineno=259, col_offset=12), Assign([Attribute(Name('ch', Load(), lineno=260, col_offset=12), 'parent', Store(), lineno=260, col_offset=12)], Name('self', Load(), lineno=260, col_offset=24), lineno=260, col_offset=12)], [], lineno=258, col_offset=8), If(Compare(Name('prefix', Load(), lineno=261, col_offset=11), [IsNot()], [Name('None', Load(), lineno=261, col_offset=25)], lineno=261, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=262, col_offset=12), 'prefix', Store(), lineno=262, col_offset=12)], Name('prefix', Load(), lineno=262, col_offset=26), lineno=262, col_offset=12)], [], lineno=261, col_offset=8), If(Name('fixers_applied', Load(), lineno=263, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=264, col_offset=12), 'fixers_applied', Store(), lineno=264, col_offset=12)], Subscript(Name('fixers_applied', Load(), lineno=264, col_offset=34), Slice(None, None, None), Load(), lineno=264, col_offset=34), lineno=264, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=266, col_offset=12), 'fixers_applied', Store(), lineno=266, col_offset=12)], Name('None', Load(), lineno=266, col_offset=34), lineno=266, col_offset=12)], lineno=263, col_offset=8)], [], lineno=243, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=268, col_offset=17)], None, None, []), [Expr(Str('Return a canonical string representation.', lineno=269, col_offset=8), lineno=269, col_offset=8), Return(BinOp(Str('%s(%s, %r)', lineno=270, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=270, col_offset=31), '__class__', Load(), lineno=270, col_offset=31), '__name__', Load(), lineno=270, col_offset=31), Call(Name('type_repr', Load(), lineno=271, col_offset=31), [Attribute(Name('self', Load(), lineno=271, col_offset=41), 'type', Load(), lineno=271, col_offset=41)], [], None, None, lineno=271, col_offset=31), Attribute(Name('self', Load(), lineno=272, col_offset=31), 'children', Load(), lineno=272, col_offset=31)], Load(), lineno=270, col_offset=31), lineno=270, col_offset=15), lineno=270, col_offset=8)], [], lineno=268, col_offset=4), FunctionDef('__unicode__', arguments([Name('self', Param(), lineno=274, col_offset=20)], None, None, []), [Expr(Str('\n        Return a pretty string representation.\n\n        This reproduces the input source exactly.\n        ', lineno=279, col_offset=-1), lineno=279, col_offset=-1), Return(Call(Attribute(Str(u'', lineno=280, col_offset=15), 'join', Load(), lineno=280, col_offset=15), [Call(Name('map', Load(), lineno=280, col_offset=24), [Name('unicode', Load(), lineno=280, col_offset=28), Attribute(Name('self', Load(), lineno=280, col_offset=37), 'children', Load(), lineno=280, col_offset=37)], [], None, None, lineno=280, col_offset=24)], [], None, None, lineno=280, col_offset=15), lineno=280, col_offset=8)], [], lineno=274, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=282, col_offset=7), 'version_info', Load(), lineno=282, col_offset=7), [Gt()], [Tuple([Num(3, lineno=282, col_offset=27), Num(0, lineno=282, col_offset=30)], Load(), lineno=282, col_offset=27)], lineno=282, col_offset=7), [Assign([Name('__str__', Store(), lineno=283, col_offset=8)], Name('__unicode__', Load(), lineno=283, col_offset=18), lineno=283, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('_eq', arguments([Name('self', Param(), lineno=285, col_offset=12), Name('other', Param(), lineno=285, col_offset=18)], None, None, []), [Expr(Str('Compare two nodes for equality.', lineno=286, col_offset=8), lineno=286, col_offset=8), Return(Compare(Tuple([Attribute(Name('self', Load(), lineno=287, col_offset=16), 'type', Load(), lineno=287, col_offset=16), Attribute(Name('self', Load(), lineno=287, col_offset=27), 'children', Load(), lineno=287, col_offset=27)], Load(), lineno=287, col_offset=16), [Eq()], [Tuple([Attribute(Name('other', Load(), lineno=287, col_offset=46), 'type', Load(), lineno=287, col_offset=46), Attribute(Name('other', Load(), lineno=287, col_offset=58), 'children', Load(), lineno=287, col_offset=58)], Load(), lineno=287, col_offset=46)], lineno=287, col_offset=15), lineno=287, col_offset=8)], [], lineno=285, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=289, col_offset=14)], None, None, []), [Expr(Str('Return a cloned (deep) copy of self.', lineno=290, col_offset=8), lineno=290, col_offset=8), Return(Call(Name('Node', Load(), lineno=291, col_offset=15), [Attribute(Name('self', Load(), lineno=291, col_offset=20), 'type', Load(), lineno=291, col_offset=20), ListComp(Call(Attribute(Name('ch', Load(), lineno=291, col_offset=32), 'clone', Load(), lineno=291, col_offset=32), [], [], None, None, lineno=291, col_offset=32), [comprehension(Name('ch', Store(), lineno=291, col_offset=47), Attribute(Name('self', Load(), lineno=291, col_offset=53), 'children', Load(), lineno=291, col_offset=53), [])], lineno=291, col_offset=32)], [keyword('fixers_applied', Attribute(Name('self', Load(), lineno=292, col_offset=35), 'fixers_applied', Load(), lineno=292, col_offset=35))], None, None, lineno=291, col_offset=15), lineno=291, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('post_order', arguments([Name('self', Param(), lineno=294, col_offset=19)], None, None, []), [Expr(Str('Return a post-order iterator for the tree.', lineno=295, col_offset=8), lineno=295, col_offset=8), For(Name('child', Store(), lineno=296, col_offset=12), Attribute(Name('self', Load(), lineno=296, col_offset=21), 'children', Load(), lineno=296, col_offset=21), [For(Name('node', Store(), lineno=297, col_offset=16), Call(Attribute(Name('child', Load(), lineno=297, col_offset=24), 'post_order', Load(), lineno=297, col_offset=24), [], [], None, None, lineno=297, col_offset=24), [Expr(Yield(Name('node', Load(), lineno=298, col_offset=22), lineno=298, col_offset=16), lineno=298, col_offset=16)], [], lineno=297, col_offset=12)], [], lineno=296, col_offset=8), Expr(Yield(Name('self', Load(), lineno=299, col_offset=14), lineno=299, col_offset=8), lineno=299, col_offset=8)], [], lineno=294, col_offset=4), FunctionDef('pre_order', arguments([Name('self', Param(), lineno=301, col_offset=18)], None, None, []), [Expr(Str('Return a pre-order iterator for the tree.', lineno=302, col_offset=8), lineno=302, col_offset=8), Expr(Yield(Name('self', Load(), lineno=303, col_offset=14), lineno=303, col_offset=8), lineno=303, col_offset=8), For(Name('child', Store(), lineno=304, col_offset=12), Attribute(Name('self', Load(), lineno=304, col_offset=21), 'children', Load(), lineno=304, col_offset=21), [For(Name('node', Store(), lineno=305, col_offset=16), Call(Attribute(Name('child', Load(), lineno=305, col_offset=24), 'pre_order', Load(), lineno=305, col_offset=24), [], [], None, None, lineno=305, col_offset=24), [Expr(Yield(Name('node', Load(), lineno=306, col_offset=22), lineno=306, col_offset=16), lineno=306, col_offset=16)], [], lineno=305, col_offset=12)], [], lineno=304, col_offset=8)], [], lineno=301, col_offset=4), FunctionDef('_prefix_getter', arguments([Name('self', Param(), lineno=308, col_offset=23)], None, None, []), [Expr(Str('\n        The whitespace and comments preceding this node in the input.\n        ', lineno=311, col_offset=-1), lineno=311, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=312, col_offset=15), 'children', Load(), lineno=312, col_offset=15), lineno=312, col_offset=11), [Return(Str('', lineno=313, col_offset=19), lineno=313, col_offset=12)], [], lineno=312, col_offset=8), Return(Attribute(Subscript(Attribute(Name('self', Load(), lineno=314, col_offset=15), 'children', Load(), lineno=314, col_offset=15), Index(Num(0, lineno=314, col_offset=29)), Load(), lineno=314, col_offset=15), 'prefix', Load(), lineno=314, col_offset=15), lineno=314, col_offset=8)], [], lineno=308, col_offset=4), FunctionDef('_prefix_setter', arguments([Name('self', Param(), lineno=316, col_offset=23), Name('prefix', Param(), lineno=316, col_offset=29)], None, None, []), [If(Attribute(Name('self', Load(), lineno=317, col_offset=11), 'children', Load(), lineno=317, col_offset=11), [Assign([Attribute(Subscript(Attribute(Name('self', Load(), lineno=318, col_offset=12), 'children', Load(), lineno=318, col_offset=12), Index(Num(0, lineno=318, col_offset=26)), Load(), lineno=318, col_offset=12), 'prefix', Store(), lineno=318, col_offset=12)], Name('prefix', Load(), lineno=318, col_offset=38), lineno=318, col_offset=12)], [], lineno=317, col_offset=8)], [], lineno=316, col_offset=4), Assign([Name('prefix', Store(), lineno=320, col_offset=4)], Call(Name('property', Load(), lineno=320, col_offset=13), [Name('_prefix_getter', Load(), lineno=320, col_offset=22), Name('_prefix_setter', Load(), lineno=320, col_offset=38)], [], None, None, lineno=320, col_offset=13), lineno=320, col_offset=4), FunctionDef('set_child', arguments([Name('self', Param(), lineno=322, col_offset=18), Name('i', Param(), lineno=322, col_offset=24), Name('child', Param(), lineno=322, col_offset=27)], None, None, []), [Expr(Str("\n        Equivalent to 'node.children[i] = child'. This method also sets the\n        child's parent attribute appropriately.\n        ", lineno=326, col_offset=-1), lineno=326, col_offset=-1), Assign([Attribute(Name('child', Load(), lineno=327, col_offset=8), 'parent', Store(), lineno=327, col_offset=8)], Name('self', Load(), lineno=327, col_offset=23), lineno=327, col_offset=8), Assign([Attribute(Subscript(Attribute(Name('self', Load(), lineno=328, col_offset=8), 'children', Load(), lineno=328, col_offset=8), Index(Name('i', Load(), lineno=328, col_offset=22)), Load(), lineno=328, col_offset=8), 'parent', Store(), lineno=328, col_offset=8)], Name('None', Load(), lineno=328, col_offset=34), lineno=328, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=329, col_offset=8), 'children', Load(), lineno=329, col_offset=8), Index(Name('i', Load(), lineno=329, col_offset=22)), Store(), lineno=329, col_offset=8)], Name('child', Load(), lineno=329, col_offset=27), lineno=329, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), 'changed', Load(), lineno=330, col_offset=8), [], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8)], [], lineno=322, col_offset=4), FunctionDef('insert_child', arguments([Name('self', Param(), lineno=332, col_offset=21), Name('i', Param(), lineno=332, col_offset=27), Name('child', Param(), lineno=332, col_offset=30)], None, None, []), [Expr(Str("\n        Equivalent to 'node.children.insert(i, child)'. This method also sets\n        the child's parent attribute appropriately.\n        ", lineno=336, col_offset=-1), lineno=336, col_offset=-1), Assign([Attribute(Name('child', Load(), lineno=337, col_offset=8), 'parent', Store(), lineno=337, col_offset=8)], Name('self', Load(), lineno=337, col_offset=23), lineno=337, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'children', Load(), lineno=338, col_offset=8), 'insert', Load(), lineno=338, col_offset=8), [Name('i', Load(), lineno=338, col_offset=29), Name('child', Load(), lineno=338, col_offset=32)], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=339, col_offset=8), 'changed', Load(), lineno=339, col_offset=8), [], [], None, None, lineno=339, col_offset=8), lineno=339, col_offset=8)], [], lineno=332, col_offset=4), FunctionDef('append_child', arguments([Name('self', Param(), lineno=341, col_offset=21), Name('child', Param(), lineno=341, col_offset=27)], None, None, []), [Expr(Str("\n        Equivalent to 'node.children.append(child)'. This method also sets the\n        child's parent attribute appropriately.\n        ", lineno=345, col_offset=-1), lineno=345, col_offset=-1), Assign([Attribute(Name('child', Load(), lineno=346, col_offset=8), 'parent', Store(), lineno=346, col_offset=8)], Name('self', Load(), lineno=346, col_offset=23), lineno=346, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=347, col_offset=8), 'children', Load(), lineno=347, col_offset=8), 'append', Load(), lineno=347, col_offset=8), [Name('child', Load(), lineno=347, col_offset=29)], [], None, None, lineno=347, col_offset=8), lineno=347, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=348, col_offset=8), 'changed', Load(), lineno=348, col_offset=8), [], [], None, None, lineno=348, col_offset=8), lineno=348, col_offset=8)], [], lineno=341, col_offset=4)], [], lineno=239, col_offset=0), ClassDef('Leaf', [Name('Base', Load(), lineno=351, col_offset=11)], [Expr(Str('Concrete implementation for leaf nodes.', lineno=353, col_offset=4), lineno=353, col_offset=4), Assign([Name('_prefix', Store(), lineno=356, col_offset=4)], Str('', lineno=356, col_offset=14), lineno=356, col_offset=4), Assign([Name('lineno', Store(), lineno=357, col_offset=4)], Num(0, lineno=357, col_offset=13), lineno=357, col_offset=4), Assign([Name('column', Store(), lineno=358, col_offset=4)], Num(0, lineno=358, col_offset=13), lineno=358, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=360, col_offset=17), Name('type', Param(), lineno=360, col_offset=23), Name('value', Param(), lineno=360, col_offset=29), Name('context', Param(), lineno=361, col_offset=17), Name('prefix', Param(), lineno=362, col_offset=17), Name('fixers_applied', Param(), lineno=363, col_offset=17)], None, None, [Name('None', Load(), lineno=361, col_offset=25), Name('None', Load(), lineno=362, col_offset=24), List([], Load(), lineno=363, col_offset=32)]), [Expr(Str('\n        Initializer.\n\n        Takes a type constant (a token number < 256), a string value, and an\n        optional context keyword argument.\n        ', lineno=369, col_offset=-1), lineno=369, col_offset=-1), Assert(Compare(Num(0, lineno=370, col_offset=15), [LtE(), Lt()], [Name('type', Load(), lineno=370, col_offset=20), Num(256, lineno=370, col_offset=27)], lineno=370, col_offset=15), Name('type', Load(), lineno=370, col_offset=32), lineno=370, col_offset=8), If(Compare(Name('context', Load(), lineno=371, col_offset=11), [IsNot()], [Name('None', Load(), lineno=371, col_offset=26)], lineno=371, col_offset=11), [Assign([Tuple([Attribute(Name('self', Load(), lineno=372, col_offset=12), '_prefix', Store(), lineno=372, col_offset=12), Tuple([Attribute(Name('self', Load(), lineno=372, col_offset=27), 'lineno', Store(), lineno=372, col_offset=27), Attribute(Name('self', Load(), lineno=372, col_offset=40), 'column', Store(), lineno=372, col_offset=40)], Store(), lineno=372, col_offset=27)], Store(), lineno=372, col_offset=12)], Name('context', Load(), lineno=372, col_offset=55), lineno=372, col_offset=12)], [], lineno=371, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=373, col_offset=8), 'type', Store(), lineno=373, col_offset=8)], Name('type', Load(), lineno=373, col_offset=20), lineno=373, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=374, col_offset=8), 'value', Store(), lineno=374, col_offset=8)], Name('value', Load(), lineno=374, col_offset=21), lineno=374, col_offset=8), If(Compare(Name('prefix', Load(), lineno=375, col_offset=11), [IsNot()], [Name('None', Load(), lineno=375, col_offset=25)], lineno=375, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=376, col_offset=12), '_prefix', Store(), lineno=376, col_offset=12)], Name('prefix', Load(), lineno=376, col_offset=27), lineno=376, col_offset=12)], [], lineno=375, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=377, col_offset=8), 'fixers_applied', Store(), lineno=377, col_offset=8)], Subscript(Name('fixers_applied', Load(), lineno=377, col_offset=30), Slice(None, None, None), Load(), lineno=377, col_offset=30), lineno=377, col_offset=8)], [], lineno=360, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=379, col_offset=17)], None, None, []), [Expr(Str('Return a canonical string representation.', lineno=380, col_offset=8), lineno=380, col_offset=8), Return(BinOp(Str('%s(%r, %r)', lineno=381, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=381, col_offset=31), '__class__', Load(), lineno=381, col_offset=31), '__name__', Load(), lineno=381, col_offset=31), Attribute(Name('self', Load(), lineno=382, col_offset=31), 'type', Load(), lineno=382, col_offset=31), Attribute(Name('self', Load(), lineno=383, col_offset=31), 'value', Load(), lineno=383, col_offset=31)], Load(), lineno=381, col_offset=31), lineno=381, col_offset=15), lineno=381, col_offset=8)], [], lineno=379, col_offset=4), FunctionDef('__unicode__', arguments([Name('self', Param(), lineno=385, col_offset=20)], None, None, []), [Expr(Str('\n        Return a pretty string representation.\n\n        This reproduces the input source exactly.\n        ', lineno=390, col_offset=-1), lineno=390, col_offset=-1), Return(BinOp(Attribute(Name('self', Load(), lineno=391, col_offset=15), 'prefix', Load(), lineno=391, col_offset=15), Add(), Call(Name('unicode', Load(), lineno=391, col_offset=29), [Attribute(Name('self', Load(), lineno=391, col_offset=37), 'value', Load(), lineno=391, col_offset=37)], [], None, None, lineno=391, col_offset=29), lineno=391, col_offset=15), lineno=391, col_offset=8)], [], lineno=385, col_offset=4), If(Compare(Attribute(Name('sys', Load(), lineno=393, col_offset=7), 'version_info', Load(), lineno=393, col_offset=7), [Gt()], [Tuple([Num(3, lineno=393, col_offset=27), Num(0, lineno=393, col_offset=30)], Load(), lineno=393, col_offset=27)], lineno=393, col_offset=7), [Assign([Name('__str__', Store(), lineno=394, col_offset=8)], Name('__unicode__', Load(), lineno=394, col_offset=18), lineno=394, col_offset=8)], [], lineno=393, col_offset=4), FunctionDef('_eq', arguments([Name('self', Param(), lineno=396, col_offset=12), Name('other', Param(), lineno=396, col_offset=18)], None, None, []), [Expr(Str('Compare two nodes for equality.', lineno=397, col_offset=8), lineno=397, col_offset=8), Return(Compare(Tuple([Attribute(Name('self', Load(), lineno=398, col_offset=16), 'type', Load(), lineno=398, col_offset=16), Attribute(Name('self', Load(), lineno=398, col_offset=27), 'value', Load(), lineno=398, col_offset=27)], Load(), lineno=398, col_offset=16), [Eq()], [Tuple([Attribute(Name('other', Load(), lineno=398, col_offset=43), 'type', Load(), lineno=398, col_offset=43), Attribute(Name('other', Load(), lineno=398, col_offset=55), 'value', Load(), lineno=398, col_offset=55)], Load(), lineno=398, col_offset=43)], lineno=398, col_offset=15), lineno=398, col_offset=8)], [], lineno=396, col_offset=4), FunctionDef('clone', arguments([Name('self', Param(), lineno=400, col_offset=14)], None, None, []), [Expr(Str('Return a cloned (deep) copy of self.', lineno=401, col_offset=8), lineno=401, col_offset=8), Return(Call(Name('Leaf', Load(), lineno=402, col_offset=15), [Attribute(Name('self', Load(), lineno=402, col_offset=20), 'type', Load(), lineno=402, col_offset=20), Attribute(Name('self', Load(), lineno=402, col_offset=31), 'value', Load(), lineno=402, col_offset=31), Tuple([Attribute(Name('self', Load(), lineno=403, col_offset=21), 'prefix', Load(), lineno=403, col_offset=21), Tuple([Attribute(Name('self', Load(), lineno=403, col_offset=35), 'lineno', Load(), lineno=403, col_offset=35), Attribute(Name('self', Load(), lineno=403, col_offset=48), 'column', Load(), lineno=403, col_offset=48)], Load(), lineno=403, col_offset=35)], Load(), lineno=403, col_offset=21)], [keyword('fixers_applied', Attribute(Name('self', Load(), lineno=404, col_offset=35), 'fixers_applied', Load(), lineno=404, col_offset=35))], None, None, lineno=402, col_offset=15), lineno=402, col_offset=8)], [], lineno=400, col_offset=4), FunctionDef('leaves', arguments([Name('self', Param(), lineno=406, col_offset=15)], None, None, []), [Expr(Yield(Name('self', Load(), lineno=407, col_offset=14), lineno=407, col_offset=8), lineno=407, col_offset=8)], [], lineno=406, col_offset=4), FunctionDef('post_order', arguments([Name('self', Param(), lineno=409, col_offset=19)], None, None, []), [Expr(Str('Return a post-order iterator for the tree.', lineno=410, col_offset=8), lineno=410, col_offset=8), Expr(Yield(Name('self', Load(), lineno=411, col_offset=14), lineno=411, col_offset=8), lineno=411, col_offset=8)], [], lineno=409, col_offset=4), FunctionDef('pre_order', arguments([Name('self', Param(), lineno=413, col_offset=18)], None, None, []), [Expr(Str('Return a pre-order iterator for the tree.', lineno=414, col_offset=8), lineno=414, col_offset=8), Expr(Yield(Name('self', Load(), lineno=415, col_offset=14), lineno=415, col_offset=8), lineno=415, col_offset=8)], [], lineno=413, col_offset=4), FunctionDef('_prefix_getter', arguments([Name('self', Param(), lineno=417, col_offset=23)], None, None, []), [Expr(Str('\n        The whitespace and comments preceding this token in the input.\n        ', lineno=420, col_offset=-1), lineno=420, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=421, col_offset=15), '_prefix', Load(), lineno=421, col_offset=15), lineno=421, col_offset=8)], [], lineno=417, col_offset=4), FunctionDef('_prefix_setter', arguments([Name('self', Param(), lineno=423, col_offset=23), Name('prefix', Param(), lineno=423, col_offset=29)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=424, col_offset=8), 'changed', Load(), lineno=424, col_offset=8), [], [], None, None, lineno=424, col_offset=8), lineno=424, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=425, col_offset=8), '_prefix', Store(), lineno=425, col_offset=8)], Name('prefix', Load(), lineno=425, col_offset=23), lineno=425, col_offset=8)], [], lineno=423, col_offset=4), Assign([Name('prefix', Store(), lineno=427, col_offset=4)], Call(Name('property', Load(), lineno=427, col_offset=13), [Name('_prefix_getter', Load(), lineno=427, col_offset=22), Name('_prefix_setter', Load(), lineno=427, col_offset=38)], [], None, None, lineno=427, col_offset=13), lineno=427, col_offset=4)], [], lineno=351, col_offset=0), FunctionDef('convert', arguments([Name('gr', Param(), lineno=429, col_offset=12), Name('raw_node', Param(), lineno=429, col_offset=16)], None, None, []), [Expr(Str('\n    Convert raw node information to a Node or Leaf instance.\n\n    This is passed to the parser driver which calls it whenever a reduction of a\n    grammar rule produces a new complete node, so that the tree is build\n    strictly bottom-up.\n    ', lineno=436, col_offset=-1), lineno=436, col_offset=-1), Assign([Tuple([Name('type', Store(), lineno=437, col_offset=4), Name('value', Store(), lineno=437, col_offset=10), Name('context', Store(), lineno=437, col_offset=17), Name('children', Store(), lineno=437, col_offset=26)], Store(), lineno=437, col_offset=4)], Name('raw_node', Load(), lineno=437, col_offset=37), lineno=437, col_offset=4), If(BoolOp(Or(), [Name('children', Load(), lineno=438, col_offset=7), Compare(Name('type', Load(), lineno=438, col_offset=19), [In()], [Attribute(Name('gr', Load(), lineno=438, col_offset=27), 'number2symbol', Load(), lineno=438, col_offset=27)], lineno=438, col_offset=19)], lineno=438, col_offset=7), [If(Compare(Call(Name('len', Load(), lineno=441, col_offset=11), [Name('children', Load(), lineno=441, col_offset=15)], [], None, None, lineno=441, col_offset=11), [Eq()], [Num(1, lineno=441, col_offset=28)], lineno=441, col_offset=11), [Return(Subscript(Name('children', Load(), lineno=442, col_offset=19), Index(Num(0, lineno=442, col_offset=28)), Load(), lineno=442, col_offset=19), lineno=442, col_offset=12)], [], lineno=441, col_offset=8), Return(Call(Name('Node', Load(), lineno=443, col_offset=15), [Name('type', Load(), lineno=443, col_offset=20), Name('children', Load(), lineno=443, col_offset=26)], [keyword('context', Name('context', Load(), lineno=443, col_offset=44))], None, None, lineno=443, col_offset=15), lineno=443, col_offset=8)], [Return(Call(Name('Leaf', Load(), lineno=445, col_offset=15), [Name('type', Load(), lineno=445, col_offset=20), Name('value', Load(), lineno=445, col_offset=26)], [keyword('context', Name('context', Load(), lineno=445, col_offset=41))], None, None, lineno=445, col_offset=15), lineno=445, col_offset=8)], lineno=438, col_offset=4)], [], lineno=429, col_offset=0), ClassDef('BasePattern', [Name('object', Load(), lineno=448, col_offset=18)], [Expr(Str('\n    A pattern is a tree matching pattern.\n\n    It looks for a specific node type (token or symbol), and\n    optionally for a specific content.\n\n    This is an abstract base class.  There are three concrete\n    subclasses:\n\n    - LeafPattern matches a single leaf node;\n    - NodePattern matches a single node (usually non-leaf);\n    - WildcardPattern matches a sequence of nodes of variable length.\n    ', lineno=462, col_offset=-1), lineno=462, col_offset=-1), Assign([Name('type', Store(), lineno=465, col_offset=4)], Name('None', Load(), lineno=465, col_offset=11), lineno=465, col_offset=4), Assign([Name('content', Store(), lineno=466, col_offset=4)], Name('None', Load(), lineno=466, col_offset=14), lineno=466, col_offset=4), Assign([Name('name', Store(), lineno=467, col_offset=4)], Name('None', Load(), lineno=467, col_offset=11), lineno=467, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=469, col_offset=16)], 'args', 'kwds', []), [Expr(Str('Constructor that prevents BasePattern from being instantiated.', lineno=470, col_offset=8), lineno=470, col_offset=8), Assert(Compare(Name('cls', Load(), lineno=471, col_offset=15), [IsNot()], [Name('BasePattern', Load(), lineno=471, col_offset=26)], lineno=471, col_offset=15), Str('Cannot instantiate BasePattern', lineno=471, col_offset=39), lineno=471, col_offset=8), Return(Call(Attribute(Name('object', Load(), lineno=472, col_offset=15), '__new__', Load(), lineno=472, col_offset=15), [Name('cls', Load(), lineno=472, col_offset=30)], [], None, None, lineno=472, col_offset=15), lineno=472, col_offset=8)], [], lineno=469, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=474, col_offset=17)], None, None, []), [Assign([Name('args', Store(), lineno=475, col_offset=8)], List([Call(Name('type_repr', Load(), lineno=475, col_offset=16), [Attribute(Name('self', Load(), lineno=475, col_offset=26), 'type', Load(), lineno=475, col_offset=26)], [], None, None, lineno=475, col_offset=16), Attribute(Name('self', Load(), lineno=475, col_offset=38), 'content', Load(), lineno=475, col_offset=38), Attribute(Name('self', Load(), lineno=475, col_offset=52), 'name', Load(), lineno=475, col_offset=52)], Load(), lineno=475, col_offset=15), lineno=475, col_offset=8), While(BoolOp(And(), [Name('args', Load(), lineno=476, col_offset=14), Compare(Subscript(Name('args', Load(), lineno=476, col_offset=23), Index(Num(-1, lineno=476, col_offset=29)), Load(), lineno=476, col_offset=23), [Is()], [Name('None', Load(), lineno=476, col_offset=35)], lineno=476, col_offset=23)], lineno=476, col_offset=14), [Delete([Subscript(Name('args', Load(), lineno=477, col_offset=16), Index(Num(-1, lineno=477, col_offset=22)), Del(), lineno=477, col_offset=16)], lineno=477, col_offset=12)], [], lineno=476, col_offset=8), Return(BinOp(Str('%s(%s)', lineno=478, col_offset=15), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=478, col_offset=27), '__class__', Load(), lineno=478, col_offset=27), '__name__', Load(), lineno=478, col_offset=27), Call(Attribute(Str(', ', lineno=478, col_offset=52), 'join', Load(), lineno=478, col_offset=52), [Call(Name('map', Load(), lineno=478, col_offset=62), [Name('repr', Load(), lineno=478, col_offset=66), Name('args', Load(), lineno=478, col_offset=72)], [], None, None, lineno=478, col_offset=62)], [], None, None, lineno=478, col_offset=52)], Load(), lineno=478, col_offset=27), lineno=478, col_offset=15), lineno=478, col_offset=8)], [], lineno=474, col_offset=4), FunctionDef('optimize', arguments([Name('self', Param(), lineno=480, col_offset=17)], None, None, []), [Expr(Str('\n        A subclass can define this as a hook for optimizations.\n\n        Returns either self or another node with the same effect.\n        ', lineno=485, col_offset=-1), lineno=485, col_offset=-1), Return(Name('self', Load(), lineno=486, col_offset=15), lineno=486, col_offset=8)], [], lineno=480, col_offset=4), FunctionDef('match', arguments([Name('self', Param(), lineno=488, col_offset=14), Name('node', Param(), lineno=488, col_offset=20), Name('results', Param(), lineno=488, col_offset=26)], None, None, [Name('None', Load(), lineno=488, col_offset=34)]), [Expr(Str('\n        Does this pattern exactly match a node?\n\n        Returns True if it matches, False if not.\n\n        If results is not None, it must be a dict which will be\n        updated with the nodes matching named subpatterns.\n\n        Default implementation for non-wildcard patterns.\n        ', lineno=498, col_offset=-1), lineno=498, col_offset=-1), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=499, col_offset=11), 'type', Load(), lineno=499, col_offset=11), [IsNot()], [Name('None', Load(), lineno=499, col_offset=28)], lineno=499, col_offset=11), Compare(Attribute(Name('node', Load(), lineno=499, col_offset=37), 'type', Load(), lineno=499, col_offset=37), [NotEq()], [Attribute(Name('self', Load(), lineno=499, col_offset=50), 'type', Load(), lineno=499, col_offset=50)], lineno=499, col_offset=37)], lineno=499, col_offset=11), [Return(Name('False', Load(), lineno=500, col_offset=19), lineno=500, col_offset=12)], [], lineno=499, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=501, col_offset=11), 'content', Load(), lineno=501, col_offset=11), [IsNot()], [Name('None', Load(), lineno=501, col_offset=31)], lineno=501, col_offset=11), [Assign([Name('r', Store(), lineno=502, col_offset=12)], Name('None', Load(), lineno=502, col_offset=16), lineno=502, col_offset=12), If(Compare(Name('results', Load(), lineno=503, col_offset=15), [IsNot()], [Name('None', Load(), lineno=503, col_offset=30)], lineno=503, col_offset=15), [Assign([Name('r', Store(), lineno=504, col_offset=16)], Dict([], [], lineno=504, col_offset=20), lineno=504, col_offset=16)], [], lineno=503, col_offset=12), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=505, col_offset=19), '_submatch', Load(), lineno=505, col_offset=19), [Name('node', Load(), lineno=505, col_offset=34), Name('r', Load(), lineno=505, col_offset=40)], [], None, None, lineno=505, col_offset=19), lineno=505, col_offset=15), [Return(Name('False', Load(), lineno=506, col_offset=23), lineno=506, col_offset=16)], [], lineno=505, col_offset=12), If(Name('r', Load(), lineno=507, col_offset=15), [Expr(Call(Attribute(Name('results', Load(), lineno=508, col_offset=16), 'update', Load(), lineno=508, col_offset=16), [Name('r', Load(), lineno=508, col_offset=31)], [], None, None, lineno=508, col_offset=16), lineno=508, col_offset=16)], [], lineno=507, col_offset=12)], [], lineno=501, col_offset=8), If(BoolOp(And(), [Compare(Name('results', Load(), lineno=509, col_offset=11), [IsNot()], [Name('None', Load(), lineno=509, col_offset=26)], lineno=509, col_offset=11), Attribute(Name('self', Load(), lineno=509, col_offset=35), 'name', Load(), lineno=509, col_offset=35)], lineno=509, col_offset=11), [Assign([Subscript(Name('results', Load(), lineno=510, col_offset=12), Index(Attribute(Name('self', Load(), lineno=510, col_offset=20), 'name', Load(), lineno=510, col_offset=20)), Store(), lineno=510, col_offset=12)], Name('node', Load(), lineno=510, col_offset=33), lineno=510, col_offset=12)], [], lineno=509, col_offset=8), Return(Name('True', Load(), lineno=511, col_offset=15), lineno=511, col_offset=8)], [], lineno=488, col_offset=4), FunctionDef('match_seq', arguments([Name('self', Param(), lineno=513, col_offset=18), Name('nodes', Param(), lineno=513, col_offset=24), Name('results', Param(), lineno=513, col_offset=31)], None, None, [Name('None', Load(), lineno=513, col_offset=39)]), [Expr(Str('\n        Does this pattern exactly match a sequence of nodes?\n\n        Default implementation for non-wildcard patterns.\n        ', lineno=518, col_offset=-1), lineno=518, col_offset=-1), If(Compare(Call(Name('len', Load(), lineno=519, col_offset=11), [Name('nodes', Load(), lineno=519, col_offset=15)], [], None, None, lineno=519, col_offset=11), [NotEq()], [Num(1, lineno=519, col_offset=25)], lineno=519, col_offset=11), [Return(Name('False', Load(), lineno=520, col_offset=19), lineno=520, col_offset=12)], [], lineno=519, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=521, col_offset=15), 'match', Load(), lineno=521, col_offset=15), [Subscript(Name('nodes', Load(), lineno=521, col_offset=26), Index(Num(0, lineno=521, col_offset=32)), Load(), lineno=521, col_offset=26), Name('results', Load(), lineno=521, col_offset=36)], [], None, None, lineno=521, col_offset=15), lineno=521, col_offset=8)], [], lineno=513, col_offset=4), FunctionDef('generate_matches', arguments([Name('self', Param(), lineno=523, col_offset=25), Name('nodes', Param(), lineno=523, col_offset=31)], None, None, []), [Expr(Str('\n        Generator yielding all matches for this pattern.\n\n        Default implementation for non-wildcard patterns.\n        ', lineno=528, col_offset=-1), lineno=528, col_offset=-1), Assign([Name('r', Store(), lineno=529, col_offset=8)], Dict([], [], lineno=529, col_offset=12), lineno=529, col_offset=8), If(BoolOp(And(), [Name('nodes', Load(), lineno=530, col_offset=11), Call(Attribute(Name('self', Load(), lineno=530, col_offset=21), 'match', Load(), lineno=530, col_offset=21), [Subscript(Name('nodes', Load(), lineno=530, col_offset=32), Index(Num(0, lineno=530, col_offset=38)), Load(), lineno=530, col_offset=32), Name('r', Load(), lineno=530, col_offset=42)], [], None, None, lineno=530, col_offset=21)], lineno=530, col_offset=11), [Expr(Yield(Tuple([Num(1, lineno=531, col_offset=18), Name('r', Load(), lineno=531, col_offset=21)], Load(), lineno=531, col_offset=18), lineno=531, col_offset=12), lineno=531, col_offset=12)], [], lineno=530, col_offset=8)], [], lineno=523, col_offset=4)], [], lineno=448, col_offset=0), ClassDef('LeafPattern', [Name('BasePattern', Load(), lineno=534, col_offset=18)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=536, col_offset=17), Name('type', Param(), lineno=536, col_offset=23), Name('content', Param(), lineno=536, col_offset=34), Name('name', Param(), lineno=536, col_offset=48)], None, None, [Name('None', Load(), lineno=536, col_offset=28), Name('None', Load(), lineno=536, col_offset=42), Name('None', Load(), lineno=536, col_offset=53)]), [Expr(Str('\n        Initializer.  Takes optional type, content, and name.\n\n        The type, if given must be a token type (< 256).  If not given,\n        this matches any *leaf* node; the content may still be required.\n\n        The content, if given, must be a string.\n\n        If a name is given, the matching node is stored in the results\n        dict under that key.\n        ', lineno=547, col_offset=-1), lineno=547, col_offset=-1), If(Compare(Name('type', Load(), lineno=548, col_offset=11), [IsNot()], [Name('None', Load(), lineno=548, col_offset=23)], lineno=548, col_offset=11), [Assert(Compare(Num(0, lineno=549, col_offset=19), [LtE(), Lt()], [Name('type', Load(), lineno=549, col_offset=24), Num(256, lineno=549, col_offset=31)], lineno=549, col_offset=19), Name('type', Load(), lineno=549, col_offset=36), lineno=549, col_offset=12)], [], lineno=548, col_offset=8), If(Compare(Name('content', Load(), lineno=550, col_offset=11), [IsNot()], [Name('None', Load(), lineno=550, col_offset=26)], lineno=550, col_offset=11), [Assert(Call(Name('isinstance', Load(), lineno=551, col_offset=19), [Name('content', Load(), lineno=551, col_offset=30), Name('basestring', Load(), lineno=551, col_offset=39)], [], None, None, lineno=551, col_offset=19), Call(Name('repr', Load(), lineno=551, col_offset=52), [Name('content', Load(), lineno=551, col_offset=57)], [], None, None, lineno=551, col_offset=52), lineno=551, col_offset=12)], [], lineno=550, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=552, col_offset=8), 'type', Store(), lineno=552, col_offset=8)], Name('type', Load(), lineno=552, col_offset=20), lineno=552, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=553, col_offset=8), 'content', Store(), lineno=553, col_offset=8)], Name('content', Load(), lineno=553, col_offset=23), lineno=553, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=554, col_offset=8), 'name', Store(), lineno=554, col_offset=8)], Name('name', Load(), lineno=554, col_offset=20), lineno=554, col_offset=8)], [], lineno=536, col_offset=4), FunctionDef('match', arguments([Name('self', Param(), lineno=556, col_offset=14), Name('node', Param(), lineno=556, col_offset=20), Name('results', Param(), lineno=556, col_offset=26)], None, None, [Name('None', Load(), lineno=556, col_offset=34)]), [Expr(Str('Override match() to insist on a leaf node.', lineno=557, col_offset=8), lineno=557, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=558, col_offset=15), [Name('node', Load(), lineno=558, col_offset=26), Name('Leaf', Load(), lineno=558, col_offset=32)], [], None, None, lineno=558, col_offset=15), lineno=558, col_offset=11), [Return(Name('False', Load(), lineno=559, col_offset=19), lineno=559, col_offset=12)], [], lineno=558, col_offset=8), Return(Call(Attribute(Name('BasePattern', Load(), lineno=560, col_offset=15), 'match', Load(), lineno=560, col_offset=15), [Name('self', Load(), lineno=560, col_offset=33), Name('node', Load(), lineno=560, col_offset=39), Name('results', Load(), lineno=560, col_offset=45)], [], None, None, lineno=560, col_offset=15), lineno=560, col_offset=8)], [], lineno=556, col_offset=4), FunctionDef('_submatch', arguments([Name('self', Param(), lineno=562, col_offset=18), Name('node', Param(), lineno=562, col_offset=24), Name('results', Param(), lineno=562, col_offset=30)], None, None, [Name('None', Load(), lineno=562, col_offset=38)]), [Expr(Str("\n        Match the pattern's content to the node's children.\n\n        This assumes the node type matches and self.content is not None.\n\n        Returns True if it matches, False if not.\n\n        If results is not None, it must be a dict which will be\n        updated with the nodes matching named subpatterns.\n\n        When returning False, the results dict may still be updated.\n        ", lineno=574, col_offset=-1), lineno=574, col_offset=-1), Return(Compare(Attribute(Name('self', Load(), lineno=575, col_offset=15), 'content', Load(), lineno=575, col_offset=15), [Eq()], [Attribute(Name('node', Load(), lineno=575, col_offset=31), 'value', Load(), lineno=575, col_offset=31)], lineno=575, col_offset=15), lineno=575, col_offset=8)], [], lineno=562, col_offset=4)], [], lineno=534, col_offset=0), ClassDef('NodePattern', [Name('BasePattern', Load(), lineno=578, col_offset=18)], [Assign([Name('wildcards', Store(), lineno=580, col_offset=4)], Name('False', Load(), lineno=580, col_offset=16), lineno=580, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=582, col_offset=17), Name('type', Param(), lineno=582, col_offset=23), Name('content', Param(), lineno=582, col_offset=34), Name('name', Param(), lineno=582, col_offset=48)], None, None, [Name('None', Load(), lineno=582, col_offset=28), Name('None', Load(), lineno=582, col_offset=42), Name('None', Load(), lineno=582, col_offset=53)]), [Expr(Str("\n        Initializer.  Takes optional type, content, and name.\n\n        The type, if given, must be a symbol type (>= 256).  If the\n        type is None this matches *any* single node (leaf or not),\n        except if content is not None, in which it only matches\n        non-leaf nodes that also match the content pattern.\n\n        The content, if not None, must be a sequence of Patterns that\n        must match the node's children exactly.  If the content is\n        given, the type must not be None.\n\n        If a name is given, the matching node is stored in the results\n        dict under that key.\n        ", lineno=597, col_offset=-1), lineno=597, col_offset=-1), If(Compare(Name('type', Load(), lineno=598, col_offset=11), [IsNot()], [Name('None', Load(), lineno=598, col_offset=23)], lineno=598, col_offset=11), [Assert(Compare(Name('type', Load(), lineno=599, col_offset=19), [GtE()], [Num(256, lineno=599, col_offset=27)], lineno=599, col_offset=19), Name('type', Load(), lineno=599, col_offset=32), lineno=599, col_offset=12)], [], lineno=598, col_offset=8), If(Compare(Name('content', Load(), lineno=600, col_offset=11), [IsNot()], [Name('None', Load(), lineno=600, col_offset=26)], lineno=600, col_offset=11), [Assert(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=601, col_offset=23), [Name('content', Load(), lineno=601, col_offset=34), Name('basestring', Load(), lineno=601, col_offset=43)], [], None, None, lineno=601, col_offset=23), lineno=601, col_offset=19), Call(Name('repr', Load(), lineno=601, col_offset=56), [Name('content', Load(), lineno=601, col_offset=61)], [], None, None, lineno=601, col_offset=56), lineno=601, col_offset=12), Assign([Name('content', Store(), lineno=602, col_offset=12)], Call(Name('list', Load(), lineno=602, col_offset=22), [Name('content', Load(), lineno=602, col_offset=27)], [], None, None, lineno=602, col_offset=22), lineno=602, col_offset=12), For(Tuple([Name('i', Store(), lineno=603, col_offset=16), Name('item', Store(), lineno=603, col_offset=19)], Store(), lineno=603, col_offset=16), Call(Name('enumerate', Load(), lineno=603, col_offset=27), [Name('content', Load(), lineno=603, col_offset=37)], [], None, None, lineno=603, col_offset=27), [Assert(Call(Name('isinstance', Load(), lineno=604, col_offset=23), [Name('item', Load(), lineno=604, col_offset=34), Name('BasePattern', Load(), lineno=604, col_offset=40)], [], None, None, lineno=604, col_offset=23), Tuple([Name('i', Load(), lineno=604, col_offset=55), Name('item', Load(), lineno=604, col_offset=58)], Load(), lineno=604, col_offset=55), lineno=604, col_offset=16), If(Call(Name('isinstance', Load(), lineno=605, col_offset=19), [Name('item', Load(), lineno=605, col_offset=30), Name('WildcardPattern', Load(), lineno=605, col_offset=36)], [], None, None, lineno=605, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=606, col_offset=20), 'wildcards', Store(), lineno=606, col_offset=20)], Name('True', Load(), lineno=606, col_offset=37), lineno=606, col_offset=20)], [], lineno=605, col_offset=16)], [], lineno=603, col_offset=12)], [], lineno=600, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=607, col_offset=8), 'type', Store(), lineno=607, col_offset=8)], Name('type', Load(), lineno=607, col_offset=20), lineno=607, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=608, col_offset=8), 'content', Store(), lineno=608, col_offset=8)], Name('content', Load(), lineno=608, col_offset=23), lineno=608, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=609, col_offset=8), 'name', Store(), lineno=609, col_offset=8)], Name('name', Load(), lineno=609, col_offset=20), lineno=609, col_offset=8)], [], lineno=582, col_offset=4), FunctionDef('_submatch', arguments([Name('self', Param(), lineno=611, col_offset=18), Name('node', Param(), lineno=611, col_offset=24), Name('results', Param(), lineno=611, col_offset=30)], None, None, [Name('None', Load(), lineno=611, col_offset=38)]), [Expr(Str("\n        Match the pattern's content to the node's children.\n\n        This assumes the node type matches and self.content is not None.\n\n        Returns True if it matches, False if not.\n\n        If results is not None, it must be a dict which will be\n        updated with the nodes matching named subpatterns.\n\n        When returning False, the results dict may still be updated.\n        ", lineno=623, col_offset=-1), lineno=623, col_offset=-1), If(Attribute(Name('self', Load(), lineno=624, col_offset=11), 'wildcards', Load(), lineno=624, col_offset=11), [For(Tuple([Name('c', Store(), lineno=625, col_offset=16), Name('r', Store(), lineno=625, col_offset=19)], Store(), lineno=625, col_offset=16), Call(Name('generate_matches', Load(), lineno=625, col_offset=24), [Attribute(Name('self', Load(), lineno=625, col_offset=41), 'content', Load(), lineno=625, col_offset=41), Attribute(Name('node', Load(), lineno=625, col_offset=55), 'children', Load(), lineno=625, col_offset=55)], [], None, None, lineno=625, col_offset=24), [If(Compare(Name('c', Load(), lineno=626, col_offset=19), [Eq()], [Call(Name('len', Load(), lineno=626, col_offset=24), [Attribute(Name('node', Load(), lineno=626, col_offset=28), 'children', Load(), lineno=626, col_offset=28)], [], None, None, lineno=626, col_offset=24)], lineno=626, col_offset=19), [If(Compare(Name('results', Load(), lineno=627, col_offset=23), [IsNot()], [Name('None', Load(), lineno=627, col_offset=38)], lineno=627, col_offset=23), [Expr(Call(Attribute(Name('results', Load(), lineno=628, col_offset=24), 'update', Load(), lineno=628, col_offset=24), [Name('r', Load(), lineno=628, col_offset=39)], [], None, None, lineno=628, col_offset=24), lineno=628, col_offset=24)], [], lineno=627, col_offset=20), Return(Name('True', Load(), lineno=629, col_offset=27), lineno=629, col_offset=20)], [], lineno=626, col_offset=16)], [], lineno=625, col_offset=12), Return(Name('False', Load(), lineno=630, col_offset=19), lineno=630, col_offset=12)], [], lineno=624, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=631, col_offset=11), [Attribute(Name('self', Load(), lineno=631, col_offset=15), 'content', Load(), lineno=631, col_offset=15)], [], None, None, lineno=631, col_offset=11), [NotEq()], [Call(Name('len', Load(), lineno=631, col_offset=32), [Attribute(Name('node', Load(), lineno=631, col_offset=36), 'children', Load(), lineno=631, col_offset=36)], [], None, None, lineno=631, col_offset=32)], lineno=631, col_offset=11), [Return(Name('False', Load(), lineno=632, col_offset=19), lineno=632, col_offset=12)], [], lineno=631, col_offset=8), For(Tuple([Name('subpattern', Store(), lineno=633, col_offset=12), Name('child', Store(), lineno=633, col_offset=24)], Store(), lineno=633, col_offset=12), Call(Name('zip', Load(), lineno=633, col_offset=33), [Attribute(Name('self', Load(), lineno=633, col_offset=37), 'content', Load(), lineno=633, col_offset=37), Attribute(Name('node', Load(), lineno=633, col_offset=51), 'children', Load(), lineno=633, col_offset=51)], [], None, None, lineno=633, col_offset=33), [If(UnaryOp(Not(), Call(Attribute(Name('subpattern', Load(), lineno=634, col_offset=19), 'match', Load(), lineno=634, col_offset=19), [Name('child', Load(), lineno=634, col_offset=36), Name('results', Load(), lineno=634, col_offset=43)], [], None, None, lineno=634, col_offset=19), lineno=634, col_offset=15), [Return(Name('False', Load(), lineno=635, col_offset=23), lineno=635, col_offset=16)], [], lineno=634, col_offset=12)], [], lineno=633, col_offset=8), Return(Name('True', Load(), lineno=636, col_offset=15), lineno=636, col_offset=8)], [], lineno=611, col_offset=4)], [], lineno=578, col_offset=0), ClassDef('WildcardPattern', [Name('BasePattern', Load(), lineno=639, col_offset=22)], [Expr(Str('\n    A wildcard pattern can match zero or more nodes.\n\n    This has all the flexibility needed to implement patterns like:\n\n    .*      .+      .?      .{m,n}\n    (a b c | d e | f)\n    (...)*  (...)+  (...)?  (...){m,n}\n\n    except it always uses non-greedy matching.\n    ', lineno=651, col_offset=-1), lineno=651, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=653, col_offset=17), Name('content', Param(), lineno=653, col_offset=23), Name('min', Param(), lineno=653, col_offset=37), Name('max', Param(), lineno=653, col_offset=44), Name('name', Param(), lineno=653, col_offset=54)], None, None, [Name('None', Load(), lineno=653, col_offset=31), Num(0, lineno=653, col_offset=41), Name('HUGE', Load(), lineno=653, col_offset=48), Name('None', Load(), lineno=653, col_offset=59)]), [Expr(Str("\n        Initializer.\n\n        Args:\n            content: optional sequence of subsequences of patterns;\n                     if absent, matches one node;\n                     if present, each subsequence is an alternative [*]\n            min: optinal minumum number of times to match, default 0\n            max: optional maximum number of times tro match, default HUGE\n            name: optional name assigned to this match\n\n        [*] Thus, if content is [[a, b, c], [d, e], [f, g, h]] this is\n            equivalent to (a b c | d e | f g h); if content is None,\n            this is equivalent to '.' in regular expression terms.\n            The min and max parameters work as follows:\n                min=0, max=maxint: .*\n                min=1, max=maxint: .+\n                min=0, max=1: .?\n                min=1, max=1: .\n            If content is not None, replace the dot with the parenthesized\n            list of alternatives, e.g. (a b c | d e | f g h)*\n        ", lineno=675, col_offset=-1), lineno=675, col_offset=-1), Assert(Compare(Num(0, lineno=676, col_offset=15), [LtE(), LtE(), LtE()], [Name('min', Load(), lineno=676, col_offset=20), Name('max', Load(), lineno=676, col_offset=27), Name('HUGE', Load(), lineno=676, col_offset=34)], lineno=676, col_offset=15), Tuple([Name('min', Load(), lineno=676, col_offset=41), Name('max', Load(), lineno=676, col_offset=46)], Load(), lineno=676, col_offset=41), lineno=676, col_offset=8), If(Compare(Name('content', Load(), lineno=677, col_offset=11), [IsNot()], [Name('None', Load(), lineno=677, col_offset=26)], lineno=677, col_offset=11), [Assign([Name('content', Store(), lineno=678, col_offset=12)], Call(Name('tuple', Load(), lineno=678, col_offset=22), [Call(Name('map', Load(), lineno=678, col_offset=28), [Name('tuple', Load(), lineno=678, col_offset=32), Name('content', Load(), lineno=678, col_offset=39)], [], None, None, lineno=678, col_offset=28)], [], None, None, lineno=678, col_offset=22), lineno=678, col_offset=12), Assert(Call(Name('len', Load(), lineno=680, col_offset=19), [Name('content', Load(), lineno=680, col_offset=23)], [], None, None, lineno=680, col_offset=19), Call(Name('repr', Load(), lineno=680, col_offset=33), [Name('content', Load(), lineno=680, col_offset=38)], [], None, None, lineno=680, col_offset=33), lineno=680, col_offset=12), For(Name('alt', Store(), lineno=681, col_offset=16), Name('content', Load(), lineno=681, col_offset=23), [Assert(Call(Name('len', Load(), lineno=682, col_offset=23), [Name('alt', Load(), lineno=682, col_offset=27)], [], None, None, lineno=682, col_offset=23), Call(Name('repr', Load(), lineno=682, col_offset=33), [Name('alt', Load(), lineno=682, col_offset=38)], [], None, None, lineno=682, col_offset=33), lineno=682, col_offset=16)], [], lineno=681, col_offset=12)], [], lineno=677, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=683, col_offset=8), 'content', Store(), lineno=683, col_offset=8)], Name('content', Load(), lineno=683, col_offset=23), lineno=683, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=684, col_offset=8), 'min', Store(), lineno=684, col_offset=8)], Name('min', Load(), lineno=684, col_offset=19), lineno=684, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=685, col_offset=8), 'max', Store(), lineno=685, col_offset=8)], Name('max', Load(), lineno=685, col_offset=19), lineno=685, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=686, col_offset=8), 'name', Store(), lineno=686, col_offset=8)], Name('name', Load(), lineno=686, col_offset=20), lineno=686, col_offset=8)], [], lineno=653, col_offset=4), FunctionDef('optimize', arguments([Name('self', Param(), lineno=688, col_offset=17)], None, None, []), [Expr(Str('Optimize certain stacked wildcard patterns.', lineno=689, col_offset=8), lineno=689, col_offset=8), Assign([Name('subpattern', Store(), lineno=690, col_offset=8)], Name('None', Load(), lineno=690, col_offset=21), lineno=690, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=691, col_offset=12), 'content', Load(), lineno=691, col_offset=12), [IsNot()], [Name('None', Load(), lineno=691, col_offset=32)], lineno=691, col_offset=12), Compare(Call(Name('len', Load(), lineno=692, col_offset=12), [Attribute(Name('self', Load(), lineno=692, col_offset=16), 'content', Load(), lineno=692, col_offset=16)], [], None, None, lineno=692, col_offset=12), [Eq()], [Num(1, lineno=692, col_offset=33)], lineno=692, col_offset=12), Compare(Call(Name('len', Load(), lineno=692, col_offset=39), [Subscript(Attribute(Name('self', Load(), lineno=692, col_offset=43), 'content', Load(), lineno=692, col_offset=43), Index(Num(0, lineno=692, col_offset=56)), Load(), lineno=692, col_offset=43)], [], None, None, lineno=692, col_offset=39), [Eq()], [Num(1, lineno=692, col_offset=63)], lineno=692, col_offset=39)], lineno=691, col_offset=12), [Assign([Name('subpattern', Store(), lineno=693, col_offset=12)], Subscript(Subscript(Attribute(Name('self', Load(), lineno=693, col_offset=25), 'content', Load(), lineno=693, col_offset=25), Index(Num(0, lineno=693, col_offset=38)), Load(), lineno=693, col_offset=25), Index(Num(0, lineno=693, col_offset=41)), Load(), lineno=693, col_offset=25), lineno=693, col_offset=12)], [], lineno=691, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=694, col_offset=11), 'min', Load(), lineno=694, col_offset=11), [Eq()], [Num(1, lineno=694, col_offset=23)], lineno=694, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=694, col_offset=29), 'max', Load(), lineno=694, col_offset=29), [Eq()], [Num(1, lineno=694, col_offset=41)], lineno=694, col_offset=29)], lineno=694, col_offset=11), [If(Compare(Attribute(Name('self', Load(), lineno=695, col_offset=15), 'content', Load(), lineno=695, col_offset=15), [Is()], [Name('None', Load(), lineno=695, col_offset=31)], lineno=695, col_offset=15), [Return(Call(Name('NodePattern', Load(), lineno=696, col_offset=23), [], [keyword('name', Attribute(Name('self', Load(), lineno=696, col_offset=40), 'name', Load(), lineno=696, col_offset=40))], None, None, lineno=696, col_offset=23), lineno=696, col_offset=16)], [], lineno=695, col_offset=12), If(BoolOp(And(), [Compare(Name('subpattern', Load(), lineno=697, col_offset=15), [IsNot()], [Name('None', Load(), lineno=697, col_offset=33)], lineno=697, col_offset=15), Compare(Attribute(Name('self', Load(), lineno=697, col_offset=43), 'name', Load(), lineno=697, col_offset=43), [Eq()], [Attribute(Name('subpattern', Load(), lineno=697, col_offset=56), 'name', Load(), lineno=697, col_offset=56)], lineno=697, col_offset=43)], lineno=697, col_offset=15), [Return(Call(Attribute(Name('subpattern', Load(), lineno=698, col_offset=23), 'optimize', Load(), lineno=698, col_offset=23), [], [], None, None, lineno=698, col_offset=23), lineno=698, col_offset=16)], [], lineno=697, col_offset=12)], [], lineno=694, col_offset=8), If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=699, col_offset=12), 'min', Load(), lineno=699, col_offset=12), [LtE()], [Num(1, lineno=699, col_offset=24)], lineno=699, col_offset=12), Call(Name('isinstance', Load(), lineno=699, col_offset=30), [Name('subpattern', Load(), lineno=699, col_offset=41), Name('WildcardPattern', Load(), lineno=699, col_offset=53)], [], None, None, lineno=699, col_offset=30), Compare(Attribute(Name('subpattern', Load(), lineno=700, col_offset=12), 'min', Load(), lineno=700, col_offset=12), [LtE()], [Num(1, lineno=700, col_offset=30)], lineno=700, col_offset=12), Compare(Attribute(Name('self', Load(), lineno=700, col_offset=36), 'name', Load(), lineno=700, col_offset=36), [Eq()], [Attribute(Name('subpattern', Load(), lineno=700, col_offset=49), 'name', Load(), lineno=700, col_offset=49)], lineno=700, col_offset=36)], lineno=699, col_offset=12), [Return(Call(Name('WildcardPattern', Load(), lineno=701, col_offset=19), [Attribute(Name('subpattern', Load(), lineno=701, col_offset=35), 'content', Load(), lineno=701, col_offset=35), BinOp(Attribute(Name('self', Load(), lineno=702, col_offset=35), 'min', Load(), lineno=702, col_offset=35), Mult(), Attribute(Name('subpattern', Load(), lineno=702, col_offset=44), 'min', Load(), lineno=702, col_offset=44), lineno=702, col_offset=35), BinOp(Attribute(Name('self', Load(), lineno=703, col_offset=35), 'max', Load(), lineno=703, col_offset=35), Mult(), Attribute(Name('subpattern', Load(), lineno=703, col_offset=44), 'max', Load(), lineno=703, col_offset=44), lineno=703, col_offset=35), Attribute(Name('subpattern', Load(), lineno=704, col_offset=35), 'name', Load(), lineno=704, col_offset=35)], [], None, None, lineno=701, col_offset=19), lineno=701, col_offset=12)], [], lineno=699, col_offset=8), Return(Name('self', Load(), lineno=705, col_offset=15), lineno=705, col_offset=8)], [], lineno=688, col_offset=4), FunctionDef('match', arguments([Name('self', Param(), lineno=707, col_offset=14), Name('node', Param(), lineno=707, col_offset=20), Name('results', Param(), lineno=707, col_offset=26)], None, None, [Name('None', Load(), lineno=707, col_offset=34)]), [Expr(Str('Does this pattern exactly match a node?', lineno=708, col_offset=8), lineno=708, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=709, col_offset=15), 'match_seq', Load(), lineno=709, col_offset=15), [List([Name('node', Load(), lineno=709, col_offset=31)], Load(), lineno=709, col_offset=30), Name('results', Load(), lineno=709, col_offset=38)], [], None, None, lineno=709, col_offset=15), lineno=709, col_offset=8)], [], lineno=707, col_offset=4), FunctionDef('match_seq', arguments([Name('self', Param(), lineno=711, col_offset=18), Name('nodes', Param(), lineno=711, col_offset=24), Name('results', Param(), lineno=711, col_offset=31)], None, None, [Name('None', Load(), lineno=711, col_offset=39)]), [Expr(Str('Does this pattern exactly match a sequence of nodes?', lineno=712, col_offset=8), lineno=712, col_offset=8), For(Tuple([Name('c', Store(), lineno=713, col_offset=12), Name('r', Store(), lineno=713, col_offset=15)], Store(), lineno=713, col_offset=12), Call(Attribute(Name('self', Load(), lineno=713, col_offset=20), 'generate_matches', Load(), lineno=713, col_offset=20), [Name('nodes', Load(), lineno=713, col_offset=42)], [], None, None, lineno=713, col_offset=20), [If(Compare(Name('c', Load(), lineno=714, col_offset=15), [Eq()], [Call(Name('len', Load(), lineno=714, col_offset=20), [Name('nodes', Load(), lineno=714, col_offset=24)], [], None, None, lineno=714, col_offset=20)], lineno=714, col_offset=15), [If(Compare(Name('results', Load(), lineno=715, col_offset=19), [IsNot()], [Name('None', Load(), lineno=715, col_offset=34)], lineno=715, col_offset=19), [Expr(Call(Attribute(Name('results', Load(), lineno=716, col_offset=20), 'update', Load(), lineno=716, col_offset=20), [Name('r', Load(), lineno=716, col_offset=35)], [], None, None, lineno=716, col_offset=20), lineno=716, col_offset=20), If(Attribute(Name('self', Load(), lineno=717, col_offset=23), 'name', Load(), lineno=717, col_offset=23), [Assign([Subscript(Name('results', Load(), lineno=718, col_offset=24), Index(Attribute(Name('self', Load(), lineno=718, col_offset=32), 'name', Load(), lineno=718, col_offset=32)), Store(), lineno=718, col_offset=24)], Call(Name('list', Load(), lineno=718, col_offset=45), [Name('nodes', Load(), lineno=718, col_offset=50)], [], None, None, lineno=718, col_offset=45), lineno=718, col_offset=24)], [], lineno=717, col_offset=20)], [], lineno=715, col_offset=16), Return(Name('True', Load(), lineno=719, col_offset=23), lineno=719, col_offset=16)], [], lineno=714, col_offset=12)], [], lineno=713, col_offset=8), Return(Name('False', Load(), lineno=720, col_offset=15), lineno=720, col_offset=8)], [], lineno=711, col_offset=4), FunctionDef('generate_matches', arguments([Name('self', Param(), lineno=722, col_offset=25), Name('nodes', Param(), lineno=722, col_offset=31)], None, None, []), [Expr(Str('\n        Generator yielding matches for a sequence of nodes.\n\n        Args:\n            nodes: sequence of nodes\n\n        Yields:\n            (count, results) tuples where:\n            count: the match comprises nodes[:count];\n            results: dict containing named submatches.\n        ', lineno=733, col_offset=-1), lineno=733, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=734, col_offset=11), 'content', Load(), lineno=734, col_offset=11), [Is()], [Name('None', Load(), lineno=734, col_offset=27)], lineno=734, col_offset=11), [For(Name('count', Store(), lineno=736, col_offset=16), Call(Name('xrange', Load(), lineno=736, col_offset=25), [Attribute(Name('self', Load(), lineno=736, col_offset=32), 'min', Load(), lineno=736, col_offset=32), BinOp(Num(1, lineno=736, col_offset=42), Add(), Call(Name('min', Load(), lineno=736, col_offset=46), [Call(Name('len', Load(), lineno=736, col_offset=50), [Name('nodes', Load(), lineno=736, col_offset=54)], [], None, None, lineno=736, col_offset=50), Attribute(Name('self', Load(), lineno=736, col_offset=62), 'max', Load(), lineno=736, col_offset=62)], [], None, None, lineno=736, col_offset=46), lineno=736, col_offset=42)], [], None, None, lineno=736, col_offset=25), [Assign([Name('r', Store(), lineno=737, col_offset=16)], Dict([], [], lineno=737, col_offset=20), lineno=737, col_offset=16), If(Attribute(Name('self', Load(), lineno=738, col_offset=19), 'name', Load(), lineno=738, col_offset=19), [Assign([Subscript(Name('r', Load(), lineno=739, col_offset=20), Index(Attribute(Name('self', Load(), lineno=739, col_offset=22), 'name', Load(), lineno=739, col_offset=22)), Store(), lineno=739, col_offset=20)], Subscript(Name('nodes', Load(), lineno=739, col_offset=35), Slice(None, Name('count', Load(), lineno=739, col_offset=42), None), Load(), lineno=739, col_offset=35), lineno=739, col_offset=20)], [], lineno=738, col_offset=16), Expr(Yield(Tuple([Name('count', Load(), lineno=740, col_offset=22), Name('r', Load(), lineno=740, col_offset=29)], Load(), lineno=740, col_offset=22), lineno=740, col_offset=16), lineno=740, col_offset=16)], [], lineno=736, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=741, col_offset=13), 'name', Load(), lineno=741, col_offset=13), [Eq()], [Str('bare_name', lineno=741, col_offset=26)], lineno=741, col_offset=13), [Expr(Yield(Call(Attribute(Name('self', Load(), lineno=742, col_offset=18), '_bare_name_matches', Load(), lineno=742, col_offset=18), [Name('nodes', Load(), lineno=742, col_offset=42)], [], None, None, lineno=742, col_offset=18), lineno=742, col_offset=12), lineno=742, col_offset=12)], [Assign([Name('save_stderr', Store(), lineno=747, col_offset=12)], Attribute(Name('sys', Load(), lineno=747, col_offset=26), 'stderr', Load(), lineno=747, col_offset=26), lineno=747, col_offset=12), Assign([Attribute(Name('sys', Load(), lineno=748, col_offset=12), 'stderr', Store(), lineno=748, col_offset=12)], Call(Name('StringIO', Load(), lineno=748, col_offset=25), [], [], None, None, lineno=748, col_offset=25), lineno=748, col_offset=12), TryFinally([TryExcept([For(Tuple([Name('count', Store(), lineno=750, col_offset=20), Name('r', Store(), lineno=750, col_offset=27)], Store(), lineno=750, col_offset=20), Call(Attribute(Name('self', Load(), lineno=750, col_offset=32), '_recursive_matches', Load(), lineno=750, col_offset=32), [Name('nodes', Load(), lineno=750, col_offset=56), Num(0, lineno=750, col_offset=63)], [], None, None, lineno=750, col_offset=32), [If(Attribute(Name('self', Load(), lineno=751, col_offset=23), 'name', Load(), lineno=751, col_offset=23), [Assign([Subscript(Name('r', Load(), lineno=752, col_offset=24), Index(Attribute(Name('self', Load(), lineno=752, col_offset=26), 'name', Load(), lineno=752, col_offset=26)), Store(), lineno=752, col_offset=24)], Subscript(Name('nodes', Load(), lineno=752, col_offset=39), Slice(None, Name('count', Load(), lineno=752, col_offset=46), None), Load(), lineno=752, col_offset=39), lineno=752, col_offset=24)], [], lineno=751, col_offset=20), Expr(Yield(Tuple([Name('count', Load(), lineno=753, col_offset=26), Name('r', Load(), lineno=753, col_offset=33)], Load(), lineno=753, col_offset=26), lineno=753, col_offset=20), lineno=753, col_offset=20)], [], lineno=750, col_offset=16)], [ExceptHandler(Name('RuntimeError', Load(), lineno=754, col_offset=19), None, [For(Tuple([Name('count', Store(), lineno=757, col_offset=20), Name('r', Store(), lineno=757, col_offset=27)], Store(), lineno=757, col_offset=20), Call(Attribute(Name('self', Load(), lineno=757, col_offset=32), '_iterative_matches', Load(), lineno=757, col_offset=32), [Name('nodes', Load(), lineno=757, col_offset=56)], [], None, None, lineno=757, col_offset=32), [If(Attribute(Name('self', Load(), lineno=758, col_offset=23), 'name', Load(), lineno=758, col_offset=23), [Assign([Subscript(Name('r', Load(), lineno=759, col_offset=24), Index(Attribute(Name('self', Load(), lineno=759, col_offset=26), 'name', Load(), lineno=759, col_offset=26)), Store(), lineno=759, col_offset=24)], Subscript(Name('nodes', Load(), lineno=759, col_offset=39), Slice(None, Name('count', Load(), lineno=759, col_offset=46), None), Load(), lineno=759, col_offset=39), lineno=759, col_offset=24)], [], lineno=758, col_offset=20), Expr(Yield(Tuple([Name('count', Load(), lineno=760, col_offset=26), Name('r', Load(), lineno=760, col_offset=33)], Load(), lineno=760, col_offset=26), lineno=760, col_offset=20), lineno=760, col_offset=20)], [], lineno=757, col_offset=16)], lineno=754, col_offset=12)], [], lineno=749, col_offset=12)], [Assign([Attribute(Name('sys', Load(), lineno=762, col_offset=16), 'stderr', Store(), lineno=762, col_offset=16)], Name('save_stderr', Load(), lineno=762, col_offset=29), lineno=762, col_offset=16)], lineno=749, col_offset=12)], lineno=741, col_offset=13)], lineno=734, col_offset=8)], [], lineno=722, col_offset=4), FunctionDef('_iterative_matches', arguments([Name('self', Param(), lineno=764, col_offset=27), Name('nodes', Param(), lineno=764, col_offset=33)], None, None, []), [Expr(Str('Helper to iteratively yield the matches.', lineno=765, col_offset=8), lineno=765, col_offset=8), Assign([Name('nodelen', Store(), lineno=766, col_offset=8)], Call(Name('len', Load(), lineno=766, col_offset=18), [Name('nodes', Load(), lineno=766, col_offset=22)], [], None, None, lineno=766, col_offset=18), lineno=766, col_offset=8), If(Compare(Num(0, lineno=767, col_offset=11), [GtE()], [Attribute(Name('self', Load(), lineno=767, col_offset=16), 'min', Load(), lineno=767, col_offset=16)], lineno=767, col_offset=11), [Expr(Yield(Tuple([Num(0, lineno=768, col_offset=18), Dict([], [], lineno=768, col_offset=21)], Load(), lineno=768, col_offset=18), lineno=768, col_offset=12), lineno=768, col_offset=12)], [], lineno=767, col_offset=8), Assign([Name('results', Store(), lineno=770, col_offset=8)], List([], Load(), lineno=770, col_offset=18), lineno=770, col_offset=8), For(Name('alt', Store(), lineno=772, col_offset=12), Attribute(Name('self', Load(), lineno=772, col_offset=19), 'content', Load(), lineno=772, col_offset=19), [For(Tuple([Name('c', Store(), lineno=773, col_offset=16), Name('r', Store(), lineno=773, col_offset=19)], Store(), lineno=773, col_offset=16), Call(Name('generate_matches', Load(), lineno=773, col_offset=24), [Name('alt', Load(), lineno=773, col_offset=41), Name('nodes', Load(), lineno=773, col_offset=46)], [], None, None, lineno=773, col_offset=24), [Expr(Yield(Tuple([Name('c', Load(), lineno=774, col_offset=22), Name('r', Load(), lineno=774, col_offset=25)], Load(), lineno=774, col_offset=22), lineno=774, col_offset=16), lineno=774, col_offset=16), Expr(Call(Attribute(Name('results', Load(), lineno=775, col_offset=16), 'append', Load(), lineno=775, col_offset=16), [Tuple([Name('c', Load(), lineno=775, col_offset=32), Name('r', Load(), lineno=775, col_offset=35)], Load(), lineno=775, col_offset=32)], [], None, None, lineno=775, col_offset=16), lineno=775, col_offset=16)], [], lineno=773, col_offset=12)], [], lineno=772, col_offset=8), While(Name('results', Load(), lineno=778, col_offset=14), [Assign([Name('new_results', Store(), lineno=779, col_offset=12)], List([], Load(), lineno=779, col_offset=26), lineno=779, col_offset=12), For(Tuple([Name('c0', Store(), lineno=780, col_offset=16), Name('r0', Store(), lineno=780, col_offset=20)], Store(), lineno=780, col_offset=16), Name('results', Load(), lineno=780, col_offset=26), [If(BoolOp(And(), [Compare(Name('c0', Load(), lineno=782, col_offset=19), [Lt()], [Name('nodelen', Load(), lineno=782, col_offset=24)], lineno=782, col_offset=19), Compare(Name('c0', Load(), lineno=782, col_offset=36), [LtE()], [Attribute(Name('self', Load(), lineno=782, col_offset=42), 'max', Load(), lineno=782, col_offset=42)], lineno=782, col_offset=36)], lineno=782, col_offset=19), [For(Name('alt', Store(), lineno=783, col_offset=24), Attribute(Name('self', Load(), lineno=783, col_offset=31), 'content', Load(), lineno=783, col_offset=31), [For(Tuple([Name('c1', Store(), lineno=784, col_offset=28), Name('r1', Store(), lineno=784, col_offset=32)], Store(), lineno=784, col_offset=28), Call(Name('generate_matches', Load(), lineno=784, col_offset=38), [Name('alt', Load(), lineno=784, col_offset=55), Subscript(Name('nodes', Load(), lineno=784, col_offset=60), Slice(Name('c0', Load(), lineno=784, col_offset=66), None, None), Load(), lineno=784, col_offset=60)], [], None, None, lineno=784, col_offset=38), [If(Compare(Name('c1', Load(), lineno=785, col_offset=31), [Gt()], [Num(0, lineno=785, col_offset=36)], lineno=785, col_offset=31), [Assign([Name('r', Store(), lineno=786, col_offset=32)], Dict([], [], lineno=786, col_offset=36), lineno=786, col_offset=32), Expr(Call(Attribute(Name('r', Load(), lineno=787, col_offset=32), 'update', Load(), lineno=787, col_offset=32), [Name('r0', Load(), lineno=787, col_offset=41)], [], None, None, lineno=787, col_offset=32), lineno=787, col_offset=32), Expr(Call(Attribute(Name('r', Load(), lineno=788, col_offset=32), 'update', Load(), lineno=788, col_offset=32), [Name('r1', Load(), lineno=788, col_offset=41)], [], None, None, lineno=788, col_offset=32), lineno=788, col_offset=32), Expr(Yield(Tuple([BinOp(Name('c0', Load(), lineno=789, col_offset=38), Add(), Name('c1', Load(), lineno=789, col_offset=43), lineno=789, col_offset=38), Name('r', Load(), lineno=789, col_offset=47)], Load(), lineno=789, col_offset=38), lineno=789, col_offset=32), lineno=789, col_offset=32), Expr(Call(Attribute(Name('new_results', Load(), lineno=790, col_offset=32), 'append', Load(), lineno=790, col_offset=32), [Tuple([BinOp(Name('c0', Load(), lineno=790, col_offset=52), Add(), Name('c1', Load(), lineno=790, col_offset=57), lineno=790, col_offset=52), Name('r', Load(), lineno=790, col_offset=61)], Load(), lineno=790, col_offset=52)], [], None, None, lineno=790, col_offset=32), lineno=790, col_offset=32)], [], lineno=785, col_offset=28)], [], lineno=784, col_offset=24)], [], lineno=783, col_offset=20)], [], lineno=782, col_offset=16)], [], lineno=780, col_offset=12), Assign([Name('results', Store(), lineno=791, col_offset=12)], Name('new_results', Load(), lineno=791, col_offset=22), lineno=791, col_offset=12)], [], lineno=778, col_offset=8)], [], lineno=764, col_offset=4), FunctionDef('_bare_name_matches', arguments([Name('self', Param(), lineno=793, col_offset=27), Name('nodes', Param(), lineno=793, col_offset=33)], None, None, []), [Expr(Str('Special optimized matcher for bare_name.', lineno=794, col_offset=8), lineno=794, col_offset=8), Assign([Name('count', Store(), lineno=795, col_offset=8)], Num(0, lineno=795, col_offset=16), lineno=795, col_offset=8), Assign([Name('r', Store(), lineno=796, col_offset=8)], Dict([], [], lineno=796, col_offset=12), lineno=796, col_offset=8), Assign([Name('done', Store(), lineno=797, col_offset=8)], Name('False', Load(), lineno=797, col_offset=15), lineno=797, col_offset=8), Assign([Name('max', Store(), lineno=798, col_offset=8)], Call(Name('len', Load(), lineno=798, col_offset=14), [Name('nodes', Load(), lineno=798, col_offset=18)], [], None, None, lineno=798, col_offset=14), lineno=798, col_offset=8), While(BoolOp(And(), [UnaryOp(Not(), Name('done', Load(), lineno=799, col_offset=18), lineno=799, col_offset=14), Compare(Name('count', Load(), lineno=799, col_offset=27), [Lt()], [Name('max', Load(), lineno=799, col_offset=35)], lineno=799, col_offset=27)], lineno=799, col_offset=14), [Assign([Name('done', Store(), lineno=800, col_offset=12)], Name('True', Load(), lineno=800, col_offset=19), lineno=800, col_offset=12), For(Name('leaf', Store(), lineno=801, col_offset=16), Attribute(Name('self', Load(), lineno=801, col_offset=24), 'content', Load(), lineno=801, col_offset=24), [If(Call(Attribute(Subscript(Name('leaf', Load(), lineno=802, col_offset=19), Index(Num(0, lineno=802, col_offset=24)), Load(), lineno=802, col_offset=19), 'match', Load(), lineno=802, col_offset=19), [Subscript(Name('nodes', Load(), lineno=802, col_offset=33), Index(Name('count', Load(), lineno=802, col_offset=39)), Load(), lineno=802, col_offset=33), Name('r', Load(), lineno=802, col_offset=47)], [], None, None, lineno=802, col_offset=19), [AugAssign(Name('count', Store(), lineno=803, col_offset=20), Add(), Num(1, lineno=803, col_offset=29), lineno=803, col_offset=20), Assign([Name('done', Store(), lineno=804, col_offset=20)], Name('False', Load(), lineno=804, col_offset=27), lineno=804, col_offset=20), Break( lineno=805, col_offset=20)], [], lineno=802, col_offset=16)], [], lineno=801, col_offset=12)], [], lineno=799, col_offset=8), Assign([Subscript(Name('r', Load(), lineno=806, col_offset=8), Index(Attribute(Name('self', Load(), lineno=806, col_offset=10), 'name', Load(), lineno=806, col_offset=10)), Store(), lineno=806, col_offset=8)], Subscript(Name('nodes', Load(), lineno=806, col_offset=23), Slice(None, Name('count', Load(), lineno=806, col_offset=30), None), Load(), lineno=806, col_offset=23), lineno=806, col_offset=8), Return(Tuple([Name('count', Load(), lineno=807, col_offset=15), Name('r', Load(), lineno=807, col_offset=22)], Load(), lineno=807, col_offset=15), lineno=807, col_offset=8)], [], lineno=793, col_offset=4), FunctionDef('_recursive_matches', arguments([Name('self', Param(), lineno=809, col_offset=27), Name('nodes', Param(), lineno=809, col_offset=33), Name('count', Param(), lineno=809, col_offset=40)], None, None, []), [Expr(Str('Helper to recursively yield the matches.', lineno=810, col_offset=8), lineno=810, col_offset=8), Assert(Compare(Attribute(Name('self', Load(), lineno=811, col_offset=15), 'content', Load(), lineno=811, col_offset=15), [IsNot()], [Name('None', Load(), lineno=811, col_offset=35)], lineno=811, col_offset=15), None, lineno=811, col_offset=8), If(Compare(Name('count', Load(), lineno=812, col_offset=11), [GtE()], [Attribute(Name('self', Load(), lineno=812, col_offset=20), 'min', Load(), lineno=812, col_offset=20)], lineno=812, col_offset=11), [Expr(Yield(Tuple([Num(0, lineno=813, col_offset=18), Dict([], [], lineno=813, col_offset=21)], Load(), lineno=813, col_offset=18), lineno=813, col_offset=12), lineno=813, col_offset=12)], [], lineno=812, col_offset=8), If(Compare(Name('count', Load(), lineno=814, col_offset=11), [Lt()], [Attribute(Name('self', Load(), lineno=814, col_offset=19), 'max', Load(), lineno=814, col_offset=19)], lineno=814, col_offset=11), [For(Name('alt', Store(), lineno=815, col_offset=16), Attribute(Name('self', Load(), lineno=815, col_offset=23), 'content', Load(), lineno=815, col_offset=23), [For(Tuple([Name('c0', Store(), lineno=816, col_offset=20), Name('r0', Store(), lineno=816, col_offset=24)], Store(), lineno=816, col_offset=20), Call(Name('generate_matches', Load(), lineno=816, col_offset=30), [Name('alt', Load(), lineno=816, col_offset=47), Name('nodes', Load(), lineno=816, col_offset=52)], [], None, None, lineno=816, col_offset=30), [For(Tuple([Name('c1', Store(), lineno=817, col_offset=24), Name('r1', Store(), lineno=817, col_offset=28)], Store(), lineno=817, col_offset=24), Call(Attribute(Name('self', Load(), lineno=817, col_offset=34), '_recursive_matches', Load(), lineno=817, col_offset=34), [Subscript(Name('nodes', Load(), lineno=817, col_offset=58), Slice(Name('c0', Load(), lineno=817, col_offset=64), None, None), Load(), lineno=817, col_offset=58), BinOp(Name('count', Load(), lineno=817, col_offset=70), Add(), Num(1, lineno=817, col_offset=76), lineno=817, col_offset=70)], [], None, None, lineno=817, col_offset=34), [Assign([Name('r', Store(), lineno=818, col_offset=24)], Dict([], [], lineno=818, col_offset=28), lineno=818, col_offset=24), Expr(Call(Attribute(Name('r', Load(), lineno=819, col_offset=24), 'update', Load(), lineno=819, col_offset=24), [Name('r0', Load(), lineno=819, col_offset=33)], [], None, None, lineno=819, col_offset=24), lineno=819, col_offset=24), Expr(Call(Attribute(Name('r', Load(), lineno=820, col_offset=24), 'update', Load(), lineno=820, col_offset=24), [Name('r1', Load(), lineno=820, col_offset=33)], [], None, None, lineno=820, col_offset=24), lineno=820, col_offset=24), Expr(Yield(Tuple([BinOp(Name('c0', Load(), lineno=821, col_offset=30), Add(), Name('c1', Load(), lineno=821, col_offset=35), lineno=821, col_offset=30), Name('r', Load(), lineno=821, col_offset=39)], Load(), lineno=821, col_offset=30), lineno=821, col_offset=24), lineno=821, col_offset=24)], [], lineno=817, col_offset=20)], [], lineno=816, col_offset=16)], [], lineno=815, col_offset=12)], [], lineno=814, col_offset=8)], [], lineno=809, col_offset=4)], [], lineno=639, col_offset=0), ClassDef('NegatedPattern', [Name('BasePattern', Load(), lineno=824, col_offset=21)], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=826, col_offset=17), Name('content', Param(), lineno=826, col_offset=23)], None, None, [Name('None', Load(), lineno=826, col_offset=31)]), [Expr(Str("\n        Initializer.\n\n        The argument is either a pattern or None.  If it is None, this\n        only matches an empty sequence (effectively '$' in regex\n        lingo).  If it is not None, this matches whenever the argument\n        pattern doesn't have any matches.\n        ", lineno=834, col_offset=-1), lineno=834, col_offset=-1), If(Compare(Name('content', Load(), lineno=835, col_offset=11), [IsNot()], [Name('None', Load(), lineno=835, col_offset=26)], lineno=835, col_offset=11), [Assert(Call(Name('isinstance', Load(), lineno=836, col_offset=19), [Name('content', Load(), lineno=836, col_offset=30), Name('BasePattern', Load(), lineno=836, col_offset=39)], [], None, None, lineno=836, col_offset=19), Call(Name('repr', Load(), lineno=836, col_offset=53), [Name('content', Load(), lineno=836, col_offset=58)], [], None, None, lineno=836, col_offset=53), lineno=836, col_offset=12)], [], lineno=835, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=837, col_offset=8), 'content', Store(), lineno=837, col_offset=8)], Name('content', Load(), lineno=837, col_offset=23), lineno=837, col_offset=8)], [], lineno=826, col_offset=4), FunctionDef('match', arguments([Name('self', Param(), lineno=839, col_offset=14), Name('node', Param(), lineno=839, col_offset=20)], None, None, []), [Return(Name('False', Load(), lineno=841, col_offset=15), lineno=841, col_offset=8)], [], lineno=839, col_offset=4), FunctionDef('match_seq', arguments([Name('self', Param(), lineno=843, col_offset=18), Name('nodes', Param(), lineno=843, col_offset=24)], None, None, []), [Return(Compare(Call(Name('len', Load(), lineno=845, col_offset=15), [Name('nodes', Load(), lineno=845, col_offset=19)], [], None, None, lineno=845, col_offset=15), [Eq()], [Num(0, lineno=845, col_offset=29)], lineno=845, col_offset=15), lineno=845, col_offset=8)], [], lineno=843, col_offset=4), FunctionDef('generate_matches', arguments([Name('self', Param(), lineno=847, col_offset=25), Name('nodes', Param(), lineno=847, col_offset=31)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=848, col_offset=11), 'content', Load(), lineno=848, col_offset=11), [Is()], [Name('None', Load(), lineno=848, col_offset=27)], lineno=848, col_offset=11), [If(Compare(Call(Name('len', Load(), lineno=850, col_offset=15), [Name('nodes', Load(), lineno=850, col_offset=19)], [], None, None, lineno=850, col_offset=15), [Eq()], [Num(0, lineno=850, col_offset=29)], lineno=850, col_offset=15), [Expr(Yield(Tuple([Num(0, lineno=851, col_offset=22), Dict([], [], lineno=851, col_offset=25)], Load(), lineno=851, col_offset=22), lineno=851, col_offset=16), lineno=851, col_offset=16)], [], lineno=850, col_offset=12)], [For(Tuple([Name('c', Store(), lineno=854, col_offset=16), Name('r', Store(), lineno=854, col_offset=19)], Store(), lineno=854, col_offset=16), Call(Attribute(Attribute(Name('self', Load(), lineno=854, col_offset=24), 'content', Load(), lineno=854, col_offset=24), 'generate_matches', Load(), lineno=854, col_offset=24), [Name('nodes', Load(), lineno=854, col_offset=54)], [], None, None, lineno=854, col_offset=24), [Return(None, lineno=855, col_offset=16)], [], lineno=854, col_offset=12), Expr(Yield(Tuple([Num(0, lineno=856, col_offset=18), Dict([], [], lineno=856, col_offset=21)], Load(), lineno=856, col_offset=18), lineno=856, col_offset=12), lineno=856, col_offset=12)], lineno=848, col_offset=8)], [], lineno=847, col_offset=4)], [], lineno=824, col_offset=0), FunctionDef('generate_matches', arguments([Name('patterns', Param(), lineno=859, col_offset=21), Name('nodes', Param(), lineno=859, col_offset=31)], None, None, []), [Expr(Str('\n    Generator yielding matches for a sequence of patterns and nodes.\n\n    Args:\n        patterns: a sequence of patterns\n        nodes: a sequence of nodes\n\n    Yields:\n        (count, results) tuples where:\n        count: the entire sequence of patterns matches nodes[:count];\n        results: dict containing named submatches.\n        ', lineno=871, col_offset=-1), lineno=871, col_offset=-1), If(UnaryOp(Not(), Name('patterns', Load(), lineno=872, col_offset=11), lineno=872, col_offset=7), [Expr(Yield(Tuple([Num(0, lineno=873, col_offset=14), Dict([], [], lineno=873, col_offset=17)], Load(), lineno=873, col_offset=14), lineno=873, col_offset=8), lineno=873, col_offset=8)], [Assign([Tuple([Name('p', Store(), lineno=875, col_offset=8), Name('rest', Store(), lineno=875, col_offset=11)], Store(), lineno=875, col_offset=8)], Tuple([Subscript(Name('patterns', Load(), lineno=875, col_offset=18), Index(Num(0, lineno=875, col_offset=27)), Load(), lineno=875, col_offset=18), Subscript(Name('patterns', Load(), lineno=875, col_offset=31), Slice(Num(1, lineno=875, col_offset=40), None, None), Load(), lineno=875, col_offset=31)], Load(), lineno=875, col_offset=18), lineno=875, col_offset=8), For(Tuple([Name('c0', Store(), lineno=876, col_offset=12), Name('r0', Store(), lineno=876, col_offset=16)], Store(), lineno=876, col_offset=12), Call(Attribute(Name('p', Load(), lineno=876, col_offset=22), 'generate_matches', Load(), lineno=876, col_offset=22), [Name('nodes', Load(), lineno=876, col_offset=41)], [], None, None, lineno=876, col_offset=22), [If(UnaryOp(Not(), Name('rest', Load(), lineno=877, col_offset=19), lineno=877, col_offset=15), [Expr(Yield(Tuple([Name('c0', Load(), lineno=878, col_offset=22), Name('r0', Load(), lineno=878, col_offset=26)], Load(), lineno=878, col_offset=22), lineno=878, col_offset=16), lineno=878, col_offset=16)], [For(Tuple([Name('c1', Store(), lineno=880, col_offset=20), Name('r1', Store(), lineno=880, col_offset=24)], Store(), lineno=880, col_offset=20), Call(Name('generate_matches', Load(), lineno=880, col_offset=30), [Name('rest', Load(), lineno=880, col_offset=47), Subscript(Name('nodes', Load(), lineno=880, col_offset=53), Slice(Name('c0', Load(), lineno=880, col_offset=59), None, None), Load(), lineno=880, col_offset=53)], [], None, None, lineno=880, col_offset=30), [Assign([Name('r', Store(), lineno=881, col_offset=20)], Dict([], [], lineno=881, col_offset=24), lineno=881, col_offset=20), Expr(Call(Attribute(Name('r', Load(), lineno=882, col_offset=20), 'update', Load(), lineno=882, col_offset=20), [Name('r0', Load(), lineno=882, col_offset=29)], [], None, None, lineno=882, col_offset=20), lineno=882, col_offset=20), Expr(Call(Attribute(Name('r', Load(), lineno=883, col_offset=20), 'update', Load(), lineno=883, col_offset=20), [Name('r1', Load(), lineno=883, col_offset=29)], [], None, None, lineno=883, col_offset=20), lineno=883, col_offset=20), Expr(Yield(Tuple([BinOp(Name('c0', Load(), lineno=884, col_offset=26), Add(), Name('c1', Load(), lineno=884, col_offset=31), lineno=884, col_offset=26), Name('r', Load(), lineno=884, col_offset=35)], Load(), lineno=884, col_offset=26), lineno=884, col_offset=20), lineno=884, col_offset=20)], [], lineno=880, col_offset=16)], lineno=877, col_offset=12)], [], lineno=876, col_offset=8)], lineno=872, col_offset=4)], [], lineno=859, col_offset=0)])
