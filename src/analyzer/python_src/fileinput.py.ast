Module([Expr(Str('Helper class to quickly write a loop over all standard input files.\n\nTypical use is:\n\n    import fileinput\n    for line in fileinput.input():\n        process(line)\n\nThis iterates over the lines of all files listed in sys.argv[1:],\ndefaulting to sys.stdin if the list is empty.  If a filename is \'-\' it\nis also replaced by sys.stdin.  To specify an alternative list of\nfilenames, pass it as the argument to input().  A single file name is\nalso allowed.\n\nFunctions filename(), lineno() return the filename and cumulative line\nnumber of the line that has just been read; filelineno() returns its\nline number in the current file; isfirstline() returns true iff the\nline just read is the first line of its file; isstdin() returns true\niff the line was read from sys.stdin.  Function nextfile() closes the\ncurrent file so that the next iteration will read the first line from\nthe next file (if any); lines not read from the file will not count\ntowards the cumulative line count; the filename is not changed until\nafter the first line of the next file has been read.  Function close()\ncloses the sequence.\n\nBefore any lines have been read, filename() returns None and both line\nnumbers are zero; nextfile() has no effect.  After all lines have been\nread, filename() and the line number functions return the values\npertaining to the last line read; nextfile() has no effect.\n\nAll files are opened in text mode by default, you can override this by\nsetting the mode parameter to input() or FileInput.__init__().\nIf an I/O error occurs during opening or reading a file, the IOError\nexception is raised.\n\nIf sys.stdin is used more than once, the second and further use will\nreturn no lines, except perhaps for interactive use, or if it has been\nexplicitly reset (e.g. using sys.stdin.seek(0)).\n\nEmpty files are opened and immediately closed; the only time their\npresence in the list of filenames is noticeable at all is when the\nlast file opened is empty.\n\nIt is possible that the last line of a file doesn\'t end in a newline\ncharacter; otherwise lines are returned including the trailing\nnewline.\n\nClass FileInput is the implementation; its methods filename(),\nlineno(), fileline(), isfirstline(), isstdin(), nextfile() and close()\ncorrespond to the functions in the module.  In addition it has a\nreadline() method which returns the next input line, and a\n__getitem__() method which implements the sequence behavior.  The\nsequence must be accessed in strictly sequential order; sequence\naccess and readline() cannot be mixed.\n\nOptional in-place filtering: if the keyword argument inplace=1 is\npassed to input() or to the FileInput constructor, the file is moved\nto a backup file and standard output is directed to the input file.\nThis makes it possible to write a filter that rewrites its input file\nin place.  If the keyword argument backup=".<some extension>" is also\ngiven, it specifies the extension for the backup file, and the backup\nfile remains around; by default, the extension is ".bak" and it is\ndeleted when the output file is closed.  In-place filtering is\ndisabled when standard input is read.  XXX The current implementation\ndoes not work for MS-DOS 8+3 filesystems.\n\nPerformance: this module is unfortunately one of the slower ways of\nprocessing large numbers of input lines.  Nevertheless, a significant\nspeed-up has been obtained by using readlines(bufsize) instead of\nreadline().  A new keyword argument, bufsize=N, is present on the\ninput() function and the FileInput() class to override the default\nbuffer size.\n\nXXX Possible additions:\n\n- optional getopt argument processing\n- isatty()\n- read(), read(size), even readlines()\n\n', lineno=80, col_offset=-1), lineno=80, col_offset=-1), Import([alias('sys', None), alias('os', None)], lineno=82, col_offset=0), Assign([Name('__all__', Store(), lineno=84, col_offset=0)], List([Str('input', lineno=84, col_offset=11), Str('close', lineno=84, col_offset=19), Str('nextfile', lineno=84, col_offset=27), Str('filename', lineno=84, col_offset=38), Str('lineno', lineno=84, col_offset=49), Str('filelineno', lineno=84, col_offset=58), Str('isfirstline', lineno=85, col_offset=11), Str('isstdin', lineno=85, col_offset=25), Str('FileInput', lineno=85, col_offset=35)], Load(), lineno=84, col_offset=10), lineno=84, col_offset=0), Assign([Name('_state', Store(), lineno=87, col_offset=0)], Name('None', Load(), lineno=87, col_offset=9), lineno=87, col_offset=0), Assign([Name('DEFAULT_BUFSIZE', Store(), lineno=89, col_offset=0)], BinOp(Num(8, lineno=89, col_offset=18), Mult(), Num(1024, lineno=89, col_offset=20), lineno=89, col_offset=18), lineno=89, col_offset=0), FunctionDef('input', arguments([Name('files', Param(), lineno=91, col_offset=10), Name('inplace', Param(), lineno=91, col_offset=22), Name('backup', Param(), lineno=91, col_offset=33), Name('bufsize', Param(), lineno=91, col_offset=44), Name('mode', Param(), lineno=92, col_offset=10), Name('openhook', Param(), lineno=92, col_offset=20)], None, None, [Name('None', Load(), lineno=91, col_offset=16), Num(0, lineno=91, col_offset=30), Str('', lineno=91, col_offset=40), Num(0, lineno=91, col_offset=52), Str('r', lineno=92, col_offset=15), Name('None', Load(), lineno=92, col_offset=29)]), [Expr(Str('input([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Create an instance of the FileInput class. The instance will be used\n    as global state for the functions of this module, and is also returned\n    to use during iteration. The parameters to this function will be passed\n    along to the constructor of the FileInput class.\n    ', lineno=99, col_offset=-1), lineno=99, col_offset=-1), Global(['_state'], lineno=100, col_offset=4), If(BoolOp(And(), [Name('_state', Load(), lineno=101, col_offset=7), Attribute(Name('_state', Load(), lineno=101, col_offset=18), '_file', Load(), lineno=101, col_offset=18)], lineno=101, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=102, col_offset=14), Str('input() already active', lineno=102, col_offset=28), None, lineno=102, col_offset=8)], [], lineno=101, col_offset=4), Assign([Name('_state', Store(), lineno=103, col_offset=4)], Call(Name('FileInput', Load(), lineno=103, col_offset=13), [Name('files', Load(), lineno=103, col_offset=23), Name('inplace', Load(), lineno=103, col_offset=30), Name('backup', Load(), lineno=103, col_offset=39), Name('bufsize', Load(), lineno=103, col_offset=47), Name('mode', Load(), lineno=103, col_offset=56), Name('openhook', Load(), lineno=103, col_offset=62)], [], None, None, lineno=103, col_offset=13), lineno=103, col_offset=4), Return(Name('_state', Load(), lineno=104, col_offset=11), lineno=104, col_offset=4)], [], lineno=91, col_offset=0), FunctionDef('close', arguments([], None, None, []), [Expr(Str('Close the sequence.', lineno=107, col_offset=4), lineno=107, col_offset=4), Global(['_state'], lineno=108, col_offset=4), Assign([Name('state', Store(), lineno=109, col_offset=4)], Name('_state', Load(), lineno=109, col_offset=12), lineno=109, col_offset=4), Assign([Name('_state', Store(), lineno=110, col_offset=4)], Name('None', Load(), lineno=110, col_offset=13), lineno=110, col_offset=4), If(Name('state', Load(), lineno=111, col_offset=7), [Expr(Call(Attribute(Name('state', Load(), lineno=112, col_offset=8), 'close', Load(), lineno=112, col_offset=8), [], [], None, None, lineno=112, col_offset=8), lineno=112, col_offset=8)], [], lineno=111, col_offset=4)], [], lineno=106, col_offset=0), FunctionDef('nextfile', arguments([], None, None, []), [Expr(Str('\n    Close the current file so that the next iteration will read the first\n    line from the next file (if any); lines not read from the file will\n    not count towards the cumulative line count. The filename is not\n    changed until after the first line of the next file has been read.\n    Before the first line has been read, this function has no effect;\n    it cannot be used to skip the first file. After the last line of the\n    last file has been read, this function has no effect.\n    ', lineno=123, col_offset=-1), lineno=123, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=124, col_offset=11), lineno=124, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=125, col_offset=14), Str('no active input()', lineno=125, col_offset=28), None, lineno=125, col_offset=8)], [], lineno=124, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=126, col_offset=11), 'nextfile', Load(), lineno=126, col_offset=11), [], [], None, None, lineno=126, col_offset=11), lineno=126, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('filename', arguments([], None, None, []), [Expr(Str('\n    Return the name of the file currently being read.\n    Before the first line has been read, returns None.\n    ', lineno=132, col_offset=-1), lineno=132, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=133, col_offset=11), lineno=133, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=134, col_offset=14), Str('no active input()', lineno=134, col_offset=28), None, lineno=134, col_offset=8)], [], lineno=133, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=135, col_offset=11), 'filename', Load(), lineno=135, col_offset=11), [], [], None, None, lineno=135, col_offset=11), lineno=135, col_offset=4)], [], lineno=128, col_offset=0), FunctionDef('lineno', arguments([], None, None, []), [Expr(Str('\n    Return the cumulative line number of the line that has just been read.\n    Before the first line has been read, returns 0. After the last line\n    of the last file has been read, returns the line number of that line.\n    ', lineno=142, col_offset=-1), lineno=142, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=143, col_offset=11), lineno=143, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=144, col_offset=14), Str('no active input()', lineno=144, col_offset=28), None, lineno=144, col_offset=8)], [], lineno=143, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=145, col_offset=11), 'lineno', Load(), lineno=145, col_offset=11), [], [], None, None, lineno=145, col_offset=11), lineno=145, col_offset=4)], [], lineno=137, col_offset=0), FunctionDef('filelineno', arguments([], None, None, []), [Expr(Str('\n    Return the line number in the current file. Before the first line\n    has been read, returns 0. After the last line of the last file has\n    been read, returns the line number of that line within the file.\n    ', lineno=152, col_offset=-1), lineno=152, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=153, col_offset=11), lineno=153, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=154, col_offset=14), Str('no active input()', lineno=154, col_offset=28), None, lineno=154, col_offset=8)], [], lineno=153, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=155, col_offset=11), 'filelineno', Load(), lineno=155, col_offset=11), [], [], None, None, lineno=155, col_offset=11), lineno=155, col_offset=4)], [], lineno=147, col_offset=0), FunctionDef('fileno', arguments([], None, None, []), [Expr(Str('\n    Return the file number of the current file. When no file is currently\n    opened, returns -1.\n    ', lineno=161, col_offset=-1), lineno=161, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=162, col_offset=11), lineno=162, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=163, col_offset=14), Str('no active input()', lineno=163, col_offset=28), None, lineno=163, col_offset=8)], [], lineno=162, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=164, col_offset=11), 'fileno', Load(), lineno=164, col_offset=11), [], [], None, None, lineno=164, col_offset=11), lineno=164, col_offset=4)], [], lineno=157, col_offset=0), FunctionDef('isfirstline', arguments([], None, None, []), [Expr(Str('\n    Returns true the line just read is the first line of its file,\n    otherwise returns false.\n    ', lineno=170, col_offset=-1), lineno=170, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=171, col_offset=11), lineno=171, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=172, col_offset=14), Str('no active input()', lineno=172, col_offset=28), None, lineno=172, col_offset=8)], [], lineno=171, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=173, col_offset=11), 'isfirstline', Load(), lineno=173, col_offset=11), [], [], None, None, lineno=173, col_offset=11), lineno=173, col_offset=4)], [], lineno=166, col_offset=0), FunctionDef('isstdin', arguments([], None, None, []), [Expr(Str('\n    Returns true if the last line was read from sys.stdin,\n    otherwise returns false.\n    ', lineno=179, col_offset=-1), lineno=179, col_offset=-1), If(UnaryOp(Not(), Name('_state', Load(), lineno=180, col_offset=11), lineno=180, col_offset=7), [Raise(Name('RuntimeError', Load(), lineno=181, col_offset=14), Str('no active input()', lineno=181, col_offset=28), None, lineno=181, col_offset=8)], [], lineno=180, col_offset=4), Return(Call(Attribute(Name('_state', Load(), lineno=182, col_offset=11), 'isstdin', Load(), lineno=182, col_offset=11), [], [], None, None, lineno=182, col_offset=11), lineno=182, col_offset=4)], [], lineno=175, col_offset=0), ClassDef('FileInput', [], [Expr(Str('class FileInput([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Class FileInput is the implementation of the module; its methods\n    filename(), lineno(), fileline(), isfirstline(), isstdin(), fileno(),\n    nextfile() and close() correspond to the functions of the same name\n    in the module.\n    In addition it has a readline() method which returns the next\n    input line, and a __getitem__() method which implements the\n    sequence behavior. The sequence must be accessed in strictly\n    sequential order; random access and readline() cannot be mixed.\n    ', lineno=195, col_offset=-1), lineno=195, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=197, col_offset=17), Name('files', Param(), lineno=197, col_offset=23), Name('inplace', Param(), lineno=197, col_offset=35), Name('backup', Param(), lineno=197, col_offset=46), Name('bufsize', Param(), lineno=197, col_offset=57), Name('mode', Param(), lineno=198, col_offset=17), Name('openhook', Param(), lineno=198, col_offset=27)], None, None, [Name('None', Load(), lineno=197, col_offset=29), Num(0, lineno=197, col_offset=43), Str('', lineno=197, col_offset=53), Num(0, lineno=197, col_offset=65), Str('r', lineno=198, col_offset=22), Name('None', Load(), lineno=198, col_offset=36)]), [If(Call(Name('isinstance', Load(), lineno=199, col_offset=11), [Name('files', Load(), lineno=199, col_offset=22), Name('basestring', Load(), lineno=199, col_offset=29)], [], None, None, lineno=199, col_offset=11), [Assign([Name('files', Store(), lineno=200, col_offset=12)], Tuple([Name('files', Load(), lineno=200, col_offset=21)], Load(), lineno=200, col_offset=21), lineno=200, col_offset=12)], [If(Compare(Name('files', Load(), lineno=202, col_offset=15), [Is()], [Name('None', Load(), lineno=202, col_offset=24)], lineno=202, col_offset=15), [Assign([Name('files', Store(), lineno=203, col_offset=16)], Subscript(Attribute(Name('sys', Load(), lineno=203, col_offset=24), 'argv', Load(), lineno=203, col_offset=24), Slice(Num(1, lineno=203, col_offset=33), None, None), Load(), lineno=203, col_offset=24), lineno=203, col_offset=16)], [], lineno=202, col_offset=12), If(UnaryOp(Not(), Name('files', Load(), lineno=204, col_offset=19), lineno=204, col_offset=15), [Assign([Name('files', Store(), lineno=205, col_offset=16)], Tuple([Str('-', lineno=205, col_offset=25)], Load(), lineno=205, col_offset=25), lineno=205, col_offset=16)], [Assign([Name('files', Store(), lineno=207, col_offset=16)], Call(Name('tuple', Load(), lineno=207, col_offset=24), [Name('files', Load(), lineno=207, col_offset=30)], [], None, None, lineno=207, col_offset=24), lineno=207, col_offset=16)], lineno=204, col_offset=12)], lineno=199, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=208, col_offset=8), '_files', Store(), lineno=208, col_offset=8)], Name('files', Load(), lineno=208, col_offset=22), lineno=208, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=209, col_offset=8), '_inplace', Store(), lineno=209, col_offset=8)], Name('inplace', Load(), lineno=209, col_offset=24), lineno=209, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=210, col_offset=8), '_backup', Store(), lineno=210, col_offset=8)], Name('backup', Load(), lineno=210, col_offset=23), lineno=210, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=211, col_offset=8), '_bufsize', Store(), lineno=211, col_offset=8)], BoolOp(Or(), [Name('bufsize', Load(), lineno=211, col_offset=24), Name('DEFAULT_BUFSIZE', Load(), lineno=211, col_offset=35)], lineno=211, col_offset=24), lineno=211, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=212, col_offset=8), '_savestdout', Store(), lineno=212, col_offset=8)], Name('None', Load(), lineno=212, col_offset=27), lineno=212, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=213, col_offset=8), '_output', Store(), lineno=213, col_offset=8)], Name('None', Load(), lineno=213, col_offset=23), lineno=213, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=214, col_offset=8), '_filename', Store(), lineno=214, col_offset=8)], Name('None', Load(), lineno=214, col_offset=25), lineno=214, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=215, col_offset=8), '_lineno', Store(), lineno=215, col_offset=8)], Num(0, lineno=215, col_offset=23), lineno=215, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=216, col_offset=8), '_filelineno', Store(), lineno=216, col_offset=8)], Num(0, lineno=216, col_offset=27), lineno=216, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=217, col_offset=8), '_file', Store(), lineno=217, col_offset=8)], Name('None', Load(), lineno=217, col_offset=21), lineno=217, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=218, col_offset=8), '_isstdin', Store(), lineno=218, col_offset=8)], Name('False', Load(), lineno=218, col_offset=24), lineno=218, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=219, col_offset=8), '_backupfilename', Store(), lineno=219, col_offset=8)], Name('None', Load(), lineno=219, col_offset=31), lineno=219, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=220, col_offset=8), '_buffer', Store(), lineno=220, col_offset=8)], List([], Load(), lineno=220, col_offset=23), lineno=220, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=221, col_offset=8), '_bufindex', Store(), lineno=221, col_offset=8)], Num(0, lineno=221, col_offset=25), lineno=221, col_offset=8), If(Compare(Name('mode', Load(), lineno=223, col_offset=11), [NotIn()], [Tuple([Str('r', lineno=223, col_offset=24), Str('rU', lineno=223, col_offset=29), Str('U', lineno=223, col_offset=35), Str('rb', lineno=223, col_offset=40)], Load(), lineno=223, col_offset=24)], lineno=223, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=224, col_offset=18), [Str("FileInput opening mode must be one of 'r', 'rU', 'U' and 'rb'", lineno=224, col_offset=29)], [], None, None, lineno=224, col_offset=18), None, None, lineno=224, col_offset=12)], [], lineno=223, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=226, col_offset=8), '_mode', Store(), lineno=226, col_offset=8)], Name('mode', Load(), lineno=226, col_offset=21), lineno=226, col_offset=8), If(BoolOp(And(), [Name('inplace', Load(), lineno=227, col_offset=11), Name('openhook', Load(), lineno=227, col_offset=23)], lineno=227, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=228, col_offset=18), [Str('FileInput cannot use an opening hook in inplace mode', lineno=228, col_offset=29)], [], None, None, lineno=228, col_offset=18), None, None, lineno=228, col_offset=12)], [If(BoolOp(And(), [Name('openhook', Load(), lineno=229, col_offset=13), UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=229, col_offset=30), [Name('openhook', Load(), lineno=229, col_offset=38), Str('__call__', lineno=229, col_offset=48)], [], None, None, lineno=229, col_offset=30), lineno=229, col_offset=26)], lineno=229, col_offset=13), [Raise(Call(Name('ValueError', Load(), lineno=230, col_offset=18), [Str('FileInput openhook must be callable', lineno=230, col_offset=29)], [], None, None, lineno=230, col_offset=18), None, None, lineno=230, col_offset=12)], [], lineno=229, col_offset=13)], lineno=227, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=231, col_offset=8), '_openhook', Store(), lineno=231, col_offset=8)], Name('openhook', Load(), lineno=231, col_offset=25), lineno=231, col_offset=8)], [], lineno=197, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=233, col_offset=16)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=234, col_offset=8), 'close', Load(), lineno=234, col_offset=8), [], [], None, None, lineno=234, col_offset=8), lineno=234, col_offset=8)], [], lineno=233, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=236, col_offset=14)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=237, col_offset=8), 'nextfile', Load(), lineno=237, col_offset=8), [], [], None, None, lineno=237, col_offset=8), lineno=237, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=238, col_offset=8), '_files', Store(), lineno=238, col_offset=8)], Tuple([], Load(), lineno=238, col_offset=22), lineno=238, col_offset=8)], [], lineno=236, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=240, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=241, col_offset=15), lineno=241, col_offset=8)], [], lineno=240, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=243, col_offset=13)], None, None, []), [TryExcept([Assign([Name('line', Store(), lineno=245, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=245, col_offset=19), '_buffer', Load(), lineno=245, col_offset=19), Index(Attribute(Name('self', Load(), lineno=245, col_offset=32), '_bufindex', Load(), lineno=245, col_offset=32)), Load(), lineno=245, col_offset=19), lineno=245, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=246, col_offset=15), None, [Pass( lineno=247, col_offset=12)], lineno=246, col_offset=8)], [AugAssign(Attribute(Name('self', Load(), lineno=249, col_offset=12), '_bufindex', Store(), lineno=249, col_offset=12), Add(), Num(1, lineno=249, col_offset=30), lineno=249, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=250, col_offset=12), '_lineno', Store(), lineno=250, col_offset=12), Add(), Num(1, lineno=250, col_offset=28), lineno=250, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=251, col_offset=12), '_filelineno', Store(), lineno=251, col_offset=12), Add(), Num(1, lineno=251, col_offset=32), lineno=251, col_offset=12), Return(Name('line', Load(), lineno=252, col_offset=19), lineno=252, col_offset=12)], lineno=244, col_offset=8), Assign([Name('line', Store(), lineno=253, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=253, col_offset=15), 'readline', Load(), lineno=253, col_offset=15), [], [], None, None, lineno=253, col_offset=15), lineno=253, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=254, col_offset=15), lineno=254, col_offset=11), [Raise(Name('StopIteration', Load(), lineno=255, col_offset=18), None, None, lineno=255, col_offset=12)], [], lineno=254, col_offset=8), Return(Name('line', Load(), lineno=256, col_offset=15), lineno=256, col_offset=8)], [], lineno=243, col_offset=4), FunctionDef('__getitem__', arguments([Name('self', Param(), lineno=258, col_offset=20), Name('i', Param(), lineno=258, col_offset=26)], None, None, []), [If(Compare(Name('i', Load(), lineno=259, col_offset=11), [NotEq()], [Attribute(Name('self', Load(), lineno=259, col_offset=16), '_lineno', Load(), lineno=259, col_offset=16)], lineno=259, col_offset=11), [Raise(Name('RuntimeError', Load(), lineno=260, col_offset=18), Str('accessing lines out of order', lineno=260, col_offset=32), None, lineno=260, col_offset=12)], [], lineno=259, col_offset=8), TryExcept([Return(Call(Attribute(Name('self', Load(), lineno=262, col_offset=19), 'next', Load(), lineno=262, col_offset=19), [], [], None, None, lineno=262, col_offset=19), lineno=262, col_offset=12)], [ExceptHandler(Name('StopIteration', Load(), lineno=263, col_offset=15), None, [Raise(Name('IndexError', Load(), lineno=264, col_offset=18), Str('end of input reached', lineno=264, col_offset=30), None, lineno=264, col_offset=12)], lineno=263, col_offset=8)], [], lineno=261, col_offset=8)], [], lineno=258, col_offset=4), FunctionDef('nextfile', arguments([Name('self', Param(), lineno=266, col_offset=17)], None, None, []), [Assign([Name('savestdout', Store(), lineno=267, col_offset=8)], Attribute(Name('self', Load(), lineno=267, col_offset=21), '_savestdout', Load(), lineno=267, col_offset=21), lineno=267, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=268, col_offset=8), '_savestdout', Store(), lineno=268, col_offset=8)], Num(0, lineno=268, col_offset=27), lineno=268, col_offset=8), If(Name('savestdout', Load(), lineno=269, col_offset=11), [Assign([Attribute(Name('sys', Load(), lineno=270, col_offset=12), 'stdout', Store(), lineno=270, col_offset=12)], Name('savestdout', Load(), lineno=270, col_offset=25), lineno=270, col_offset=12)], [], lineno=269, col_offset=8), Assign([Name('output', Store(), lineno=272, col_offset=8)], Attribute(Name('self', Load(), lineno=272, col_offset=17), '_output', Load(), lineno=272, col_offset=17), lineno=272, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=273, col_offset=8), '_output', Store(), lineno=273, col_offset=8)], Num(0, lineno=273, col_offset=23), lineno=273, col_offset=8), If(Name('output', Load(), lineno=274, col_offset=11), [Expr(Call(Attribute(Name('output', Load(), lineno=275, col_offset=12), 'close', Load(), lineno=275, col_offset=12), [], [], None, None, lineno=275, col_offset=12), lineno=275, col_offset=12)], [], lineno=274, col_offset=8), Assign([Name('file', Store(), lineno=277, col_offset=8)], Attribute(Name('self', Load(), lineno=277, col_offset=15), '_file', Load(), lineno=277, col_offset=15), lineno=277, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=278, col_offset=8), '_file', Store(), lineno=278, col_offset=8)], Num(0, lineno=278, col_offset=21), lineno=278, col_offset=8), If(BoolOp(And(), [Name('file', Load(), lineno=279, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=279, col_offset=24), '_isstdin', Load(), lineno=279, col_offset=24), lineno=279, col_offset=20)], lineno=279, col_offset=11), [Expr(Call(Attribute(Name('file', Load(), lineno=280, col_offset=12), 'close', Load(), lineno=280, col_offset=12), [], [], None, None, lineno=280, col_offset=12), lineno=280, col_offset=12)], [], lineno=279, col_offset=8), Assign([Name('backupfilename', Store(), lineno=282, col_offset=8)], Attribute(Name('self', Load(), lineno=282, col_offset=25), '_backupfilename', Load(), lineno=282, col_offset=25), lineno=282, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=283, col_offset=8), '_backupfilename', Store(), lineno=283, col_offset=8)], Num(0, lineno=283, col_offset=31), lineno=283, col_offset=8), If(BoolOp(And(), [Name('backupfilename', Load(), lineno=284, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=284, col_offset=34), '_backup', Load(), lineno=284, col_offset=34), lineno=284, col_offset=30)], lineno=284, col_offset=11), [TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=285, col_offset=17), 'unlink', Load(), lineno=285, col_offset=17), [Name('backupfilename', Load(), lineno=285, col_offset=27)], [], None, None, lineno=285, col_offset=17), lineno=285, col_offset=17)], [ExceptHandler(Name('OSError', Load(), lineno=286, col_offset=19), None, [Pass( lineno=286, col_offset=28)], lineno=286, col_offset=12)], [], lineno=285, col_offset=12)], [], lineno=284, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=288, col_offset=8), '_isstdin', Store(), lineno=288, col_offset=8)], Name('False', Load(), lineno=288, col_offset=24), lineno=288, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=289, col_offset=8), '_buffer', Store(), lineno=289, col_offset=8)], List([], Load(), lineno=289, col_offset=23), lineno=289, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=290, col_offset=8), '_bufindex', Store(), lineno=290, col_offset=8)], Num(0, lineno=290, col_offset=25), lineno=290, col_offset=8)], [], lineno=266, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=292, col_offset=17)], None, None, []), [TryExcept([Assign([Name('line', Store(), lineno=294, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=294, col_offset=19), '_buffer', Load(), lineno=294, col_offset=19), Index(Attribute(Name('self', Load(), lineno=294, col_offset=32), '_bufindex', Load(), lineno=294, col_offset=32)), Load(), lineno=294, col_offset=19), lineno=294, col_offset=12)], [ExceptHandler(Name('IndexError', Load(), lineno=295, col_offset=15), None, [Pass( lineno=296, col_offset=12)], lineno=295, col_offset=8)], [AugAssign(Attribute(Name('self', Load(), lineno=298, col_offset=12), '_bufindex', Store(), lineno=298, col_offset=12), Add(), Num(1, lineno=298, col_offset=30), lineno=298, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=299, col_offset=12), '_lineno', Store(), lineno=299, col_offset=12), Add(), Num(1, lineno=299, col_offset=28), lineno=299, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=300, col_offset=12), '_filelineno', Store(), lineno=300, col_offset=12), Add(), Num(1, lineno=300, col_offset=32), lineno=300, col_offset=12), Return(Name('line', Load(), lineno=301, col_offset=19), lineno=301, col_offset=12)], lineno=293, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=302, col_offset=15), '_file', Load(), lineno=302, col_offset=15), lineno=302, col_offset=11), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=303, col_offset=19), '_files', Load(), lineno=303, col_offset=19), lineno=303, col_offset=15), [Return(Str('', lineno=304, col_offset=23), lineno=304, col_offset=16)], [], lineno=303, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=305, col_offset=12), '_filename', Store(), lineno=305, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=305, col_offset=29), '_files', Load(), lineno=305, col_offset=29), Index(Num(0, lineno=305, col_offset=41)), Load(), lineno=305, col_offset=29), lineno=305, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=306, col_offset=12), '_files', Store(), lineno=306, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=306, col_offset=26), '_files', Load(), lineno=306, col_offset=26), Slice(Num(1, lineno=306, col_offset=38), None, None), Load(), lineno=306, col_offset=26), lineno=306, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=307, col_offset=12), '_filelineno', Store(), lineno=307, col_offset=12)], Num(0, lineno=307, col_offset=31), lineno=307, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=308, col_offset=12), '_file', Store(), lineno=308, col_offset=12)], Name('None', Load(), lineno=308, col_offset=25), lineno=308, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=309, col_offset=12), '_isstdin', Store(), lineno=309, col_offset=12)], Name('False', Load(), lineno=309, col_offset=28), lineno=309, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=310, col_offset=12), '_backupfilename', Store(), lineno=310, col_offset=12)], Num(0, lineno=310, col_offset=35), lineno=310, col_offset=12), If(Compare(Attribute(Name('self', Load(), lineno=311, col_offset=15), '_filename', Load(), lineno=311, col_offset=15), [Eq()], [Str('-', lineno=311, col_offset=33)], lineno=311, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=312, col_offset=16), '_filename', Store(), lineno=312, col_offset=16)], Str('<stdin>', lineno=312, col_offset=33), lineno=312, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=313, col_offset=16), '_file', Store(), lineno=313, col_offset=16)], Attribute(Name('sys', Load(), lineno=313, col_offset=29), 'stdin', Load(), lineno=313, col_offset=29), lineno=313, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=314, col_offset=16), '_isstdin', Store(), lineno=314, col_offset=16)], Name('True', Load(), lineno=314, col_offset=32), lineno=314, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=316, col_offset=19), '_inplace', Load(), lineno=316, col_offset=19), [Assign([Attribute(Name('self', Load(), lineno=317, col_offset=20), '_backupfilename', Store(), lineno=317, col_offset=20)], BinOp(Attribute(Name('self', Load(), lineno=318, col_offset=24), '_filename', Load(), lineno=318, col_offset=24), Add(), BoolOp(Or(), [Attribute(Name('self', Load(), lineno=318, col_offset=42), '_backup', Load(), lineno=318, col_offset=42), BinOp(Attribute(Name('os', Load(), lineno=318, col_offset=58), 'extsep', Load(), lineno=318, col_offset=58), Add(), Str('bak', lineno=318, col_offset=68), lineno=318, col_offset=58)], lineno=318, col_offset=42), lineno=318, col_offset=24), lineno=317, col_offset=20), TryExcept([Expr(Call(Attribute(Name('os', Load(), lineno=319, col_offset=25), 'unlink', Load(), lineno=319, col_offset=25), [Attribute(Name('self', Load(), lineno=319, col_offset=35), '_backupfilename', Load(), lineno=319, col_offset=35)], [], None, None, lineno=319, col_offset=25), lineno=319, col_offset=25)], [ExceptHandler(Attribute(Name('os', Load(), lineno=320, col_offset=27), 'error', Load(), lineno=320, col_offset=27), None, [Pass( lineno=320, col_offset=37)], lineno=320, col_offset=20)], [], lineno=319, col_offset=20), Expr(Call(Attribute(Name('os', Load(), lineno=322, col_offset=20), 'rename', Load(), lineno=322, col_offset=20), [Attribute(Name('self', Load(), lineno=322, col_offset=30), '_filename', Load(), lineno=322, col_offset=30), Attribute(Name('self', Load(), lineno=322, col_offset=46), '_backupfilename', Load(), lineno=322, col_offset=46)], [], None, None, lineno=322, col_offset=20), lineno=322, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=323, col_offset=20), '_file', Store(), lineno=323, col_offset=20)], Call(Name('open', Load(), lineno=323, col_offset=33), [Attribute(Name('self', Load(), lineno=323, col_offset=38), '_backupfilename', Load(), lineno=323, col_offset=38), Attribute(Name('self', Load(), lineno=323, col_offset=60), '_mode', Load(), lineno=323, col_offset=60)], [], None, None, lineno=323, col_offset=33), lineno=323, col_offset=20), TryExcept([Assign([Name('perm', Store(), lineno=325, col_offset=24)], Attribute(Call(Attribute(Name('os', Load(), lineno=325, col_offset=31), 'fstat', Load(), lineno=325, col_offset=31), [Call(Attribute(Attribute(Name('self', Load(), lineno=325, col_offset=40), '_file', Load(), lineno=325, col_offset=40), 'fileno', Load(), lineno=325, col_offset=40), [], [], None, None, lineno=325, col_offset=40)], [], None, None, lineno=325, col_offset=31), 'st_mode', Load(), lineno=325, col_offset=31), lineno=325, col_offset=24)], [ExceptHandler(Name('OSError', Load(), lineno=326, col_offset=27), None, [Assign([Attribute(Name('self', Load(), lineno=327, col_offset=24), '_output', Store(), lineno=327, col_offset=24)], Call(Name('open', Load(), lineno=327, col_offset=39), [Attribute(Name('self', Load(), lineno=327, col_offset=44), '_filename', Load(), lineno=327, col_offset=44), Str('w', lineno=327, col_offset=60)], [], None, None, lineno=327, col_offset=39), lineno=327, col_offset=24)], lineno=326, col_offset=20)], [Assign([Name('fd', Store(), lineno=329, col_offset=24)], Call(Attribute(Name('os', Load(), lineno=329, col_offset=29), 'open', Load(), lineno=329, col_offset=29), [Attribute(Name('self', Load(), lineno=329, col_offset=37), '_filename', Load(), lineno=329, col_offset=37), BinOp(BinOp(Attribute(Name('os', Load(), lineno=330, col_offset=37), 'O_CREAT', Load(), lineno=330, col_offset=37), BitOr(), Attribute(Name('os', Load(), lineno=330, col_offset=50), 'O_WRONLY', Load(), lineno=330, col_offset=50), lineno=330, col_offset=37), BitOr(), Attribute(Name('os', Load(), lineno=330, col_offset=64), 'O_TRUNC', Load(), lineno=330, col_offset=64), lineno=330, col_offset=62), Name('perm', Load(), lineno=331, col_offset=37)], [], None, None, lineno=329, col_offset=29), lineno=329, col_offset=24), Assign([Attribute(Name('self', Load(), lineno=332, col_offset=24), '_output', Store(), lineno=332, col_offset=24)], Call(Attribute(Name('os', Load(), lineno=332, col_offset=39), 'fdopen', Load(), lineno=332, col_offset=39), [Name('fd', Load(), lineno=332, col_offset=49), Str('w', lineno=332, col_offset=53)], [], None, None, lineno=332, col_offset=39), lineno=332, col_offset=24), TryExcept([If(Call(Name('hasattr', Load(), lineno=334, col_offset=31), [Name('os', Load(), lineno=334, col_offset=39), Str('chmod', lineno=334, col_offset=43)], [], None, None, lineno=334, col_offset=31), [Expr(Call(Attribute(Name('os', Load(), lineno=335, col_offset=32), 'chmod', Load(), lineno=335, col_offset=32), [Attribute(Name('self', Load(), lineno=335, col_offset=41), '_filename', Load(), lineno=335, col_offset=41), Name('perm', Load(), lineno=335, col_offset=57)], [], None, None, lineno=335, col_offset=32), lineno=335, col_offset=32)], [], lineno=334, col_offset=28)], [ExceptHandler(Name('OSError', Load(), lineno=336, col_offset=31), None, [Pass( lineno=337, col_offset=28)], lineno=336, col_offset=24)], [], lineno=333, col_offset=24)], lineno=324, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=338, col_offset=20), '_savestdout', Store(), lineno=338, col_offset=20)], Attribute(Name('sys', Load(), lineno=338, col_offset=39), 'stdout', Load(), lineno=338, col_offset=39), lineno=338, col_offset=20), Assign([Attribute(Name('sys', Load(), lineno=339, col_offset=20), 'stdout', Store(), lineno=339, col_offset=20)], Attribute(Name('self', Load(), lineno=339, col_offset=33), '_output', Load(), lineno=339, col_offset=33), lineno=339, col_offset=20)], [If(Attribute(Name('self', Load(), lineno=342, col_offset=23), '_openhook', Load(), lineno=342, col_offset=23), [Assign([Attribute(Name('self', Load(), lineno=343, col_offset=24), '_file', Store(), lineno=343, col_offset=24)], Call(Attribute(Name('self', Load(), lineno=343, col_offset=37), '_openhook', Load(), lineno=343, col_offset=37), [Attribute(Name('self', Load(), lineno=343, col_offset=52), '_filename', Load(), lineno=343, col_offset=52), Attribute(Name('self', Load(), lineno=343, col_offset=68), '_mode', Load(), lineno=343, col_offset=68)], [], None, None, lineno=343, col_offset=37), lineno=343, col_offset=24)], [Assign([Attribute(Name('self', Load(), lineno=345, col_offset=24), '_file', Store(), lineno=345, col_offset=24)], Call(Name('open', Load(), lineno=345, col_offset=37), [Attribute(Name('self', Load(), lineno=345, col_offset=42), '_filename', Load(), lineno=345, col_offset=42), Attribute(Name('self', Load(), lineno=345, col_offset=58), '_mode', Load(), lineno=345, col_offset=58)], [], None, None, lineno=345, col_offset=37), lineno=345, col_offset=24)], lineno=342, col_offset=20)], lineno=316, col_offset=16)], lineno=311, col_offset=12)], [], lineno=302, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=346, col_offset=8), '_buffer', Store(), lineno=346, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=346, col_offset=23), '_file', Load(), lineno=346, col_offset=23), 'readlines', Load(), lineno=346, col_offset=23), [Attribute(Name('self', Load(), lineno=346, col_offset=44), '_bufsize', Load(), lineno=346, col_offset=44)], [], None, None, lineno=346, col_offset=23), lineno=346, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=347, col_offset=8), '_bufindex', Store(), lineno=347, col_offset=8)], Num(0, lineno=347, col_offset=25), lineno=347, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=348, col_offset=15), '_buffer', Load(), lineno=348, col_offset=15), lineno=348, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=349, col_offset=12), 'nextfile', Load(), lineno=349, col_offset=12), [], [], None, None, lineno=349, col_offset=12), lineno=349, col_offset=12)], [], lineno=348, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=351, col_offset=15), 'readline', Load(), lineno=351, col_offset=15), [], [], None, None, lineno=351, col_offset=15), lineno=351, col_offset=8)], [], lineno=292, col_offset=4), FunctionDef('filename', arguments([Name('self', Param(), lineno=353, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=354, col_offset=15), '_filename', Load(), lineno=354, col_offset=15), lineno=354, col_offset=8)], [], lineno=353, col_offset=4), FunctionDef('lineno', arguments([Name('self', Param(), lineno=356, col_offset=15)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=357, col_offset=15), '_lineno', Load(), lineno=357, col_offset=15), lineno=357, col_offset=8)], [], lineno=356, col_offset=4), FunctionDef('filelineno', arguments([Name('self', Param(), lineno=359, col_offset=19)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=360, col_offset=15), '_filelineno', Load(), lineno=360, col_offset=15), lineno=360, col_offset=8)], [], lineno=359, col_offset=4), FunctionDef('fileno', arguments([Name('self', Param(), lineno=362, col_offset=15)], None, None, []), [If(Attribute(Name('self', Load(), lineno=363, col_offset=11), '_file', Load(), lineno=363, col_offset=11), [TryExcept([Return(Call(Attribute(Attribute(Name('self', Load(), lineno=365, col_offset=23), '_file', Load(), lineno=365, col_offset=23), 'fileno', Load(), lineno=365, col_offset=23), [], [], None, None, lineno=365, col_offset=23), lineno=365, col_offset=16)], [ExceptHandler(Name('ValueError', Load(), lineno=366, col_offset=19), None, [Return(Num(-1, lineno=367, col_offset=24), lineno=367, col_offset=16)], lineno=366, col_offset=12)], [], lineno=364, col_offset=12)], [Return(Num(-1, lineno=369, col_offset=20), lineno=369, col_offset=12)], lineno=363, col_offset=8)], [], lineno=362, col_offset=4), FunctionDef('isfirstline', arguments([Name('self', Param(), lineno=371, col_offset=20)], None, None, []), [Return(Compare(Attribute(Name('self', Load(), lineno=372, col_offset=15), '_filelineno', Load(), lineno=372, col_offset=15), [Eq()], [Num(1, lineno=372, col_offset=35)], lineno=372, col_offset=15), lineno=372, col_offset=8)], [], lineno=371, col_offset=4), FunctionDef('isstdin', arguments([Name('self', Param(), lineno=374, col_offset=16)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=375, col_offset=15), '_isstdin', Load(), lineno=375, col_offset=15), lineno=375, col_offset=8)], [], lineno=374, col_offset=4)], [], lineno=184, col_offset=0), FunctionDef('hook_compressed', arguments([Name('filename', Param(), lineno=378, col_offset=20), Name('mode', Param(), lineno=378, col_offset=30)], None, None, []), [Assign([Name('ext', Store(), lineno=379, col_offset=4)], Subscript(Call(Attribute(Attribute(Name('os', Load(), lineno=379, col_offset=10), 'path', Load(), lineno=379, col_offset=10), 'splitext', Load(), lineno=379, col_offset=10), [Name('filename', Load(), lineno=379, col_offset=27)], [], None, None, lineno=379, col_offset=10), Index(Num(1, lineno=379, col_offset=37)), Load(), lineno=379, col_offset=10), lineno=379, col_offset=4), If(Compare(Name('ext', Load(), lineno=380, col_offset=7), [Eq()], [Str('.gz', lineno=380, col_offset=14)], lineno=380, col_offset=7), [Import([alias('gzip', None)], lineno=381, col_offset=8), Return(Call(Attribute(Name('gzip', Load(), lineno=382, col_offset=15), 'open', Load(), lineno=382, col_offset=15), [Name('filename', Load(), lineno=382, col_offset=25), Name('mode', Load(), lineno=382, col_offset=35)], [], None, None, lineno=382, col_offset=15), lineno=382, col_offset=8)], [If(Compare(Name('ext', Load(), lineno=383, col_offset=9), [Eq()], [Str('.bz2', lineno=383, col_offset=16)], lineno=383, col_offset=9), [Import([alias('bz2', None)], lineno=384, col_offset=8), Return(Call(Attribute(Name('bz2', Load(), lineno=385, col_offset=15), 'BZ2File', Load(), lineno=385, col_offset=15), [Name('filename', Load(), lineno=385, col_offset=27), Name('mode', Load(), lineno=385, col_offset=37)], [], None, None, lineno=385, col_offset=15), lineno=385, col_offset=8)], [Return(Call(Name('open', Load(), lineno=387, col_offset=15), [Name('filename', Load(), lineno=387, col_offset=20), Name('mode', Load(), lineno=387, col_offset=30)], [], None, None, lineno=387, col_offset=15), lineno=387, col_offset=8)], lineno=383, col_offset=9)], lineno=380, col_offset=4)], [], lineno=378, col_offset=0), FunctionDef('hook_encoded', arguments([Name('encoding', Param(), lineno=390, col_offset=17)], None, None, []), [Import([alias('codecs', None)], lineno=391, col_offset=4), FunctionDef('openhook', arguments([Name('filename', Param(), lineno=392, col_offset=17), Name('mode', Param(), lineno=392, col_offset=27)], None, None, []), [Return(Call(Attribute(Name('codecs', Load(), lineno=393, col_offset=15), 'open', Load(), lineno=393, col_offset=15), [Name('filename', Load(), lineno=393, col_offset=27), Name('mode', Load(), lineno=393, col_offset=37), Name('encoding', Load(), lineno=393, col_offset=43)], [], None, None, lineno=393, col_offset=15), lineno=393, col_offset=8)], [], lineno=392, col_offset=4), Return(Name('openhook', Load(), lineno=394, col_offset=11), lineno=394, col_offset=4)], [], lineno=390, col_offset=0), FunctionDef('_test', arguments([], None, None, []), [Import([alias('getopt', None)], lineno=398, col_offset=4), Assign([Name('inplace', Store(), lineno=399, col_offset=4)], Num(0, lineno=399, col_offset=14), lineno=399, col_offset=4), Assign([Name('backup', Store(), lineno=400, col_offset=4)], Num(0, lineno=400, col_offset=13), lineno=400, col_offset=4), Assign([Tuple([Name('opts', Store(), lineno=401, col_offset=4), Name('args', Store(), lineno=401, col_offset=10)], Store(), lineno=401, col_offset=4)], Call(Attribute(Name('getopt', Load(), lineno=401, col_offset=17), 'getopt', Load(), lineno=401, col_offset=17), [Subscript(Attribute(Name('sys', Load(), lineno=401, col_offset=31), 'argv', Load(), lineno=401, col_offset=31), Slice(Num(1, lineno=401, col_offset=40), None, None), Load(), lineno=401, col_offset=31), Str('ib:', lineno=401, col_offset=45)], [], None, None, lineno=401, col_offset=17), lineno=401, col_offset=4), For(Tuple([Name('o', Store(), lineno=402, col_offset=8), Name('a', Store(), lineno=402, col_offset=11)], Store(), lineno=402, col_offset=8), Name('opts', Load(), lineno=402, col_offset=16), [If(Compare(Name('o', Load(), lineno=403, col_offset=11), [Eq()], [Str('-i', lineno=403, col_offset=16)], lineno=403, col_offset=11), [Assign([Name('inplace', Store(), lineno=403, col_offset=22)], Num(1, lineno=403, col_offset=32), lineno=403, col_offset=22)], [], lineno=403, col_offset=8), If(Compare(Name('o', Load(), lineno=404, col_offset=11), [Eq()], [Str('-b', lineno=404, col_offset=16)], lineno=404, col_offset=11), [Assign([Name('backup', Store(), lineno=404, col_offset=22)], Name('a', Load(), lineno=404, col_offset=31), lineno=404, col_offset=22)], [], lineno=404, col_offset=8)], [], lineno=402, col_offset=4), For(Name('line', Store(), lineno=405, col_offset=8), Call(Name('input', Load(), lineno=405, col_offset=16), [Name('args', Load(), lineno=405, col_offset=22)], [keyword('inplace', Name('inplace', Load(), lineno=405, col_offset=36)), keyword('backup', Name('backup', Load(), lineno=405, col_offset=52))], None, None, lineno=405, col_offset=16), [If(Compare(Subscript(Name('line', Load(), lineno=406, col_offset=11), Slice(Num(-1, lineno=406, col_offset=17), None, None), Load(), lineno=406, col_offset=11), [Eq()], [Str('\n', lineno=406, col_offset=24)], lineno=406, col_offset=11), [Assign([Name('line', Store(), lineno=406, col_offset=30)], Subscript(Name('line', Load(), lineno=406, col_offset=37), Slice(None, Num(-1, lineno=406, col_offset=44), None), Load(), lineno=406, col_offset=37), lineno=406, col_offset=30)], [], lineno=406, col_offset=8), If(Compare(Subscript(Name('line', Load(), lineno=407, col_offset=11), Slice(Num(-1, lineno=407, col_offset=17), None, None), Load(), lineno=407, col_offset=11), [Eq()], [Str('\r', lineno=407, col_offset=24)], lineno=407, col_offset=11), [Assign([Name('line', Store(), lineno=407, col_offset=30)], Subscript(Name('line', Load(), lineno=407, col_offset=37), Slice(None, Num(-1, lineno=407, col_offset=44), None), Load(), lineno=407, col_offset=37), lineno=407, col_offset=30)], [], lineno=407, col_offset=8), Print(None, [BinOp(Str('%d: %s[%d]%s %s', lineno=408, col_offset=14), Mod(), Tuple([Call(Name('lineno', Load(), lineno=408, col_offset=35), [], [], None, None, lineno=408, col_offset=35), Call(Name('filename', Load(), lineno=408, col_offset=45), [], [], None, None, lineno=408, col_offset=45), Call(Name('filelineno', Load(), lineno=408, col_offset=57), [], [], None, None, lineno=408, col_offset=57), BoolOp(Or(), [BoolOp(And(), [Call(Name('isfirstline', Load(), lineno=409, col_offset=35), [], [], None, None, lineno=409, col_offset=35), Str('*', lineno=409, col_offset=53)], lineno=409, col_offset=35), Str('', lineno=409, col_offset=60)], lineno=409, col_offset=35), Name('line', Load(), lineno=409, col_offset=64)], Load(), lineno=408, col_offset=35), lineno=408, col_offset=14)], True, lineno=408, col_offset=8)], [], lineno=405, col_offset=4), Print(None, [BinOp(Str('%d: %s[%d]', lineno=410, col_offset=10), Mod(), Tuple([Call(Name('lineno', Load(), lineno=410, col_offset=26), [], [], None, None, lineno=410, col_offset=26), Call(Name('filename', Load(), lineno=410, col_offset=36), [], [], None, None, lineno=410, col_offset=36), Call(Name('filelineno', Load(), lineno=410, col_offset=48), [], [], None, None, lineno=410, col_offset=48)], Load(), lineno=410, col_offset=26), lineno=410, col_offset=10)], True, lineno=410, col_offset=4)], [], lineno=397, col_offset=0), If(Compare(Name('__name__', Load(), lineno=412, col_offset=3), [Eq()], [Str('__main__', lineno=412, col_offset=15)], lineno=412, col_offset=3), [Expr(Call(Name('_test', Load(), lineno=413, col_offset=4), [], [], None, None, lineno=413, col_offset=4), lineno=413, col_offset=4)], [], lineno=412, col_offset=0)])
