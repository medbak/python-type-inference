Module([Expr(Str('Abstract Base Classes (ABCs) according to PEP 3119.', lineno=4, col_offset=0), lineno=4, col_offset=0), Import([alias('types', None)], lineno=6, col_offset=0), ImportFrom('_weakrefset', [alias('WeakSet', None)], 0, lineno=8, col_offset=0), ClassDef('_C', [], [Pass( lineno=11, col_offset=10)], [], lineno=11, col_offset=0), Assign([Name('_InstanceType', Store(), lineno=12, col_offset=0)], Call(Name('type', Load(), lineno=12, col_offset=16), [Call(Name('_C', Load(), lineno=12, col_offset=21), [], [], None, None, lineno=12, col_offset=21)], [], None, None, lineno=12, col_offset=16), lineno=12, col_offset=0), FunctionDef('abstractmethod', arguments([Name('funcobj', Param(), lineno=15, col_offset=19)], None, None, []), [Expr(Str("A decorator indicating abstract methods.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.\n\n    Usage:\n\n        class C:\n            __metaclass__ = ABCMeta\n            @abstractmethod\n            def my_abstract_method(self, ...):\n                ...\n    ", lineno=31, col_offset=-1), lineno=31, col_offset=-1), Assign([Attribute(Name('funcobj', Load(), lineno=32, col_offset=4), '__isabstractmethod__', Store(), lineno=32, col_offset=4)], Name('True', Load(), lineno=32, col_offset=35), lineno=32, col_offset=4), Return(Name('funcobj', Load(), lineno=33, col_offset=11), lineno=33, col_offset=4)], [], lineno=15, col_offset=0), ClassDef('abstractproperty', [Name('property', Load(), lineno=36, col_offset=23)], [Expr(Str("A decorator indicating abstract properties.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract properties are overridden.\n    The abstract properties can be called using any of the normal\n    'super' call mechanisms.\n\n    Usage:\n\n        class C:\n            __metaclass__ = ABCMeta\n            @abstractproperty\n            def my_abstract_property(self):\n                ...\n\n    This defines a read-only property; you can also define a read-write\n    abstract property using the 'long' form of property declaration:\n\n        class C:\n            __metaclass__ = ABCMeta\n            def getx(self): ...\n            def setx(self, value): ...\n            x = abstractproperty(getx, setx)\n    ", lineno=61, col_offset=-1), lineno=61, col_offset=-1), Assign([Name('__isabstractmethod__', Store(), lineno=62, col_offset=4)], Name('True', Load(), lineno=62, col_offset=27), lineno=62, col_offset=4)], [], lineno=36, col_offset=0), ClassDef('ABCMeta', [Name('type', Load(), lineno=65, col_offset=14)], [Expr(Str("Metaclass for defining Abstract Base Classes (ABCs).\n\n    Use this metaclass to create an ABC.  An ABC can be subclassed\n    directly, and then acts as a mix-in class.  You can also register\n    unrelated concrete classes (even built-in classes) and unrelated\n    ABCs as 'virtual subclasses' -- these and their descendants will\n    be considered subclasses of the registering ABC by the built-in\n    issubclass() function, but the registering ABC won't show up in\n    their MRO (Method Resolution Order) nor will method\n    implementations defined by the registering ABC be callable (not\n    even via super()).\n\n    ", lineno=79, col_offset=-1), lineno=79, col_offset=-1), Assign([Name('_abc_invalidation_counter', Store(), lineno=84, col_offset=4)], Num(0, lineno=84, col_offset=32), lineno=84, col_offset=4), FunctionDef('__new__', arguments([Name('mcls', Param(), lineno=86, col_offset=16), Name('name', Param(), lineno=86, col_offset=22), Name('bases', Param(), lineno=86, col_offset=28), Name('namespace', Param(), lineno=86, col_offset=35)], None, None, []), [Assign([Name('cls', Store(), lineno=87, col_offset=8)], Call(Attribute(Call(Name('super', Load(), lineno=87, col_offset=14), [Name('ABCMeta', Load(), lineno=87, col_offset=20), Name('mcls', Load(), lineno=87, col_offset=29)], [], None, None, lineno=87, col_offset=14), '__new__', Load(), lineno=87, col_offset=14), [Name('mcls', Load(), lineno=87, col_offset=43), Name('name', Load(), lineno=87, col_offset=49), Name('bases', Load(), lineno=87, col_offset=55), Name('namespace', Load(), lineno=87, col_offset=62)], [], None, None, lineno=87, col_offset=14), lineno=87, col_offset=8), Assign([Name('abstracts', Store(), lineno=89, col_offset=8)], Call(Name('set', Load(), lineno=89, col_offset=20), [GeneratorExp(Name('name', Load(), lineno=89, col_offset=24), [comprehension(Tuple([Name('name', Store(), lineno=90, col_offset=25), Name('value', Store(), lineno=90, col_offset=31)], Store(), lineno=90, col_offset=25), Call(Attribute(Name('namespace', Load(), lineno=90, col_offset=40), 'items', Load(), lineno=90, col_offset=40), [], [], None, None, lineno=90, col_offset=40), [Call(Name('getattr', Load(), lineno=91, col_offset=24), [Name('value', Load(), lineno=91, col_offset=32), Str('__isabstractmethod__', lineno=91, col_offset=39), Name('False', Load(), lineno=91, col_offset=63)], [], None, None, lineno=91, col_offset=24)])], lineno=89, col_offset=24)], [], None, None, lineno=89, col_offset=20), lineno=89, col_offset=8), For(Name('base', Store(), lineno=92, col_offset=12), Name('bases', Load(), lineno=92, col_offset=20), [For(Name('name', Store(), lineno=93, col_offset=16), Call(Name('getattr', Load(), lineno=93, col_offset=24), [Name('base', Load(), lineno=93, col_offset=32), Str('__abstractmethods__', lineno=93, col_offset=38), Call(Name('set', Load(), lineno=93, col_offset=61), [], [], None, None, lineno=93, col_offset=61)], [], None, None, lineno=93, col_offset=24), [Assign([Name('value', Store(), lineno=94, col_offset=16)], Call(Name('getattr', Load(), lineno=94, col_offset=24), [Name('cls', Load(), lineno=94, col_offset=32), Name('name', Load(), lineno=94, col_offset=37), Name('None', Load(), lineno=94, col_offset=43)], [], None, None, lineno=94, col_offset=24), lineno=94, col_offset=16), If(Call(Name('getattr', Load(), lineno=95, col_offset=19), [Name('value', Load(), lineno=95, col_offset=27), Str('__isabstractmethod__', lineno=95, col_offset=34), Name('False', Load(), lineno=95, col_offset=58)], [], None, None, lineno=95, col_offset=19), [Expr(Call(Attribute(Name('abstracts', Load(), lineno=96, col_offset=20), 'add', Load(), lineno=96, col_offset=20), [Name('name', Load(), lineno=96, col_offset=34)], [], None, None, lineno=96, col_offset=20), lineno=96, col_offset=20)], [], lineno=95, col_offset=16)], [], lineno=93, col_offset=12)], [], lineno=92, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=97, col_offset=8), '__abstractmethods__', Store(), lineno=97, col_offset=8)], Call(Name('frozenset', Load(), lineno=97, col_offset=34), [Name('abstracts', Load(), lineno=97, col_offset=44)], [], None, None, lineno=97, col_offset=34), lineno=97, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=99, col_offset=8), '_abc_registry', Store(), lineno=99, col_offset=8)], Call(Name('WeakSet', Load(), lineno=99, col_offset=28), [], [], None, None, lineno=99, col_offset=28), lineno=99, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=100, col_offset=8), '_abc_cache', Store(), lineno=100, col_offset=8)], Call(Name('WeakSet', Load(), lineno=100, col_offset=25), [], [], None, None, lineno=100, col_offset=25), lineno=100, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=101, col_offset=8), '_abc_negative_cache', Store(), lineno=101, col_offset=8)], Call(Name('WeakSet', Load(), lineno=101, col_offset=34), [], [], None, None, lineno=101, col_offset=34), lineno=101, col_offset=8), Assign([Attribute(Name('cls', Load(), lineno=102, col_offset=8), '_abc_negative_cache_version', Store(), lineno=102, col_offset=8)], Attribute(Name('ABCMeta', Load(), lineno=102, col_offset=42), '_abc_invalidation_counter', Load(), lineno=102, col_offset=42), lineno=102, col_offset=8), Return(Name('cls', Load(), lineno=103, col_offset=15), lineno=103, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('register', arguments([Name('cls', Param(), lineno=105, col_offset=17), Name('subclass', Param(), lineno=105, col_offset=22)], None, None, []), [Expr(Str('Register a virtual subclass of an ABC.', lineno=106, col_offset=8), lineno=106, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=107, col_offset=15), [Name('subclass', Load(), lineno=107, col_offset=26), Tuple([Name('type', Load(), lineno=107, col_offset=37), Attribute(Name('types', Load(), lineno=107, col_offset=43), 'ClassType', Load(), lineno=107, col_offset=43)], Load(), lineno=107, col_offset=37)], [], None, None, lineno=107, col_offset=15), lineno=107, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=108, col_offset=18), [Str('Can only register classes', lineno=108, col_offset=28)], [], None, None, lineno=108, col_offset=18), None, None, lineno=108, col_offset=12)], [], lineno=107, col_offset=8), If(Call(Name('issubclass', Load(), lineno=109, col_offset=11), [Name('subclass', Load(), lineno=109, col_offset=22), Name('cls', Load(), lineno=109, col_offset=32)], [], None, None, lineno=109, col_offset=11), [Return(None, lineno=110, col_offset=12)], [], lineno=109, col_offset=8), If(Call(Name('issubclass', Load(), lineno=113, col_offset=11), [Name('cls', Load(), lineno=113, col_offset=22), Name('subclass', Load(), lineno=113, col_offset=27)], [], None, None, lineno=113, col_offset=11), [Raise(Call(Name('RuntimeError', Load(), lineno=115, col_offset=18), [Str('Refusing to create an inheritance cycle', lineno=115, col_offset=31)], [], None, None, lineno=115, col_offset=18), None, None, lineno=115, col_offset=12)], [], lineno=113, col_offset=8), Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=116, col_offset=8), '_abc_registry', Load(), lineno=116, col_offset=8), 'add', Load(), lineno=116, col_offset=8), [Name('subclass', Load(), lineno=116, col_offset=30)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8), AugAssign(Attribute(Name('ABCMeta', Load(), lineno=117, col_offset=8), '_abc_invalidation_counter', Store(), lineno=117, col_offset=8), Add(), Num(1, lineno=117, col_offset=45), lineno=117, col_offset=8)], [], lineno=105, col_offset=4), FunctionDef('_dump_registry', arguments([Name('cls', Param(), lineno=119, col_offset=23), Name('file', Param(), lineno=119, col_offset=28)], None, None, [Name('None', Load(), lineno=119, col_offset=33)]), [Expr(Str('Debug helper to print the ABC registry.', lineno=120, col_offset=8), lineno=120, col_offset=8), Print(Name('file', Load(), lineno=121, col_offset=17), [BinOp(Str('Class: %s.%s', lineno=121, col_offset=23), Mod(), Tuple([Attribute(Name('cls', Load(), lineno=121, col_offset=41), '__module__', Load(), lineno=121, col_offset=41), Attribute(Name('cls', Load(), lineno=121, col_offset=57), '__name__', Load(), lineno=121, col_offset=57)], Load(), lineno=121, col_offset=41), lineno=121, col_offset=23)], True, lineno=121, col_offset=8), Print(Name('file', Load(), lineno=122, col_offset=17), [BinOp(Str('Inv.counter: %s', lineno=122, col_offset=23), Mod(), Attribute(Name('ABCMeta', Load(), lineno=122, col_offset=43), '_abc_invalidation_counter', Load(), lineno=122, col_offset=43), lineno=122, col_offset=23)], True, lineno=122, col_offset=8), For(Name('name', Store(), lineno=123, col_offset=12), Call(Name('sorted', Load(), lineno=123, col_offset=20), [Call(Attribute(Attribute(Name('cls', Load(), lineno=123, col_offset=27), '__dict__', Load(), lineno=123, col_offset=27), 'keys', Load(), lineno=123, col_offset=27), [], [], None, None, lineno=123, col_offset=27)], [], None, None, lineno=123, col_offset=20), [If(Call(Attribute(Name('name', Load(), lineno=124, col_offset=15), 'startswith', Load(), lineno=124, col_offset=15), [Str('_abc_', lineno=124, col_offset=31)], [], None, None, lineno=124, col_offset=15), [Assign([Name('value', Store(), lineno=125, col_offset=16)], Call(Name('getattr', Load(), lineno=125, col_offset=24), [Name('cls', Load(), lineno=125, col_offset=32), Name('name', Load(), lineno=125, col_offset=37)], [], None, None, lineno=125, col_offset=24), lineno=125, col_offset=16), Print(Name('file', Load(), lineno=126, col_offset=25), [BinOp(Str('%s: %r', lineno=126, col_offset=31), Mod(), Tuple([Name('name', Load(), lineno=126, col_offset=43), Name('value', Load(), lineno=126, col_offset=49)], Load(), lineno=126, col_offset=43), lineno=126, col_offset=31)], True, lineno=126, col_offset=16)], [], lineno=124, col_offset=12)], [], lineno=123, col_offset=8)], [], lineno=119, col_offset=4), FunctionDef('__instancecheck__', arguments([Name('cls', Param(), lineno=128, col_offset=26), Name('instance', Param(), lineno=128, col_offset=31)], None, None, []), [Expr(Str('Override for isinstance(instance, cls).', lineno=129, col_offset=8), lineno=129, col_offset=8), Assign([Name('subclass', Store(), lineno=131, col_offset=8)], Call(Name('getattr', Load(), lineno=131, col_offset=19), [Name('instance', Load(), lineno=131, col_offset=27), Str('__class__', lineno=131, col_offset=37), Name('None', Load(), lineno=131, col_offset=50)], [], None, None, lineno=131, col_offset=19), lineno=131, col_offset=8), If(BoolOp(And(), [Compare(Name('subclass', Load(), lineno=132, col_offset=11), [IsNot()], [Name('None', Load(), lineno=132, col_offset=27)], lineno=132, col_offset=11), Compare(Name('subclass', Load(), lineno=132, col_offset=36), [In()], [Attribute(Name('cls', Load(), lineno=132, col_offset=48), '_abc_cache', Load(), lineno=132, col_offset=48)], lineno=132, col_offset=36)], lineno=132, col_offset=11), [Return(Name('True', Load(), lineno=133, col_offset=19), lineno=133, col_offset=12)], [], lineno=132, col_offset=8), Assign([Name('subtype', Store(), lineno=134, col_offset=8)], Call(Name('type', Load(), lineno=134, col_offset=18), [Name('instance', Load(), lineno=134, col_offset=23)], [], None, None, lineno=134, col_offset=18), lineno=134, col_offset=8), If(Compare(Name('subtype', Load(), lineno=136, col_offset=11), [Is()], [Name('_InstanceType', Load(), lineno=136, col_offset=22)], lineno=136, col_offset=11), [Assign([Name('subtype', Store(), lineno=137, col_offset=12)], Name('subclass', Load(), lineno=137, col_offset=22), lineno=137, col_offset=12)], [], lineno=136, col_offset=8), If(BoolOp(Or(), [Compare(Name('subtype', Load(), lineno=138, col_offset=11), [Is()], [Name('subclass', Load(), lineno=138, col_offset=22)], lineno=138, col_offset=11), Compare(Name('subclass', Load(), lineno=138, col_offset=34), [Is()], [Name('None', Load(), lineno=138, col_offset=46)], lineno=138, col_offset=34)], lineno=138, col_offset=11), [If(BoolOp(And(), [Compare(Attribute(Name('cls', Load(), lineno=139, col_offset=16), '_abc_negative_cache_version', Load(), lineno=139, col_offset=16), [Eq()], [Attribute(Name('ABCMeta', Load(), lineno=140, col_offset=16), '_abc_invalidation_counter', Load(), lineno=140, col_offset=16)], lineno=139, col_offset=16), Compare(Name('subtype', Load(), lineno=141, col_offset=16), [In()], [Attribute(Name('cls', Load(), lineno=141, col_offset=27), '_abc_negative_cache', Load(), lineno=141, col_offset=27)], lineno=141, col_offset=16)], lineno=139, col_offset=16), [Return(Name('False', Load(), lineno=142, col_offset=23), lineno=142, col_offset=16)], [], lineno=139, col_offset=12), Return(Call(Attribute(Name('cls', Load(), lineno=144, col_offset=19), '__subclasscheck__', Load(), lineno=144, col_offset=19), [Name('subtype', Load(), lineno=144, col_offset=41)], [], None, None, lineno=144, col_offset=19), lineno=144, col_offset=12)], [], lineno=138, col_offset=8), Return(BoolOp(Or(), [Call(Attribute(Name('cls', Load(), lineno=145, col_offset=16), '__subclasscheck__', Load(), lineno=145, col_offset=16), [Name('subclass', Load(), lineno=145, col_offset=38)], [], None, None, lineno=145, col_offset=16), Call(Attribute(Name('cls', Load(), lineno=146, col_offset=16), '__subclasscheck__', Load(), lineno=146, col_offset=16), [Name('subtype', Load(), lineno=146, col_offset=38)], [], None, None, lineno=146, col_offset=16)], lineno=145, col_offset=16), lineno=145, col_offset=8)], [], lineno=128, col_offset=4), FunctionDef('__subclasscheck__', arguments([Name('cls', Param(), lineno=148, col_offset=26), Name('subclass', Param(), lineno=148, col_offset=31)], None, None, []), [Expr(Str('Override for issubclass(subclass, cls).', lineno=149, col_offset=8), lineno=149, col_offset=8), If(Compare(Name('subclass', Load(), lineno=151, col_offset=11), [In()], [Attribute(Name('cls', Load(), lineno=151, col_offset=23), '_abc_cache', Load(), lineno=151, col_offset=23)], lineno=151, col_offset=11), [Return(Name('True', Load(), lineno=152, col_offset=19), lineno=152, col_offset=12)], [], lineno=151, col_offset=8), If(Compare(Attribute(Name('cls', Load(), lineno=154, col_offset=11), '_abc_negative_cache_version', Load(), lineno=154, col_offset=11), [Lt()], [Attribute(Name('ABCMeta', Load(), lineno=154, col_offset=45), '_abc_invalidation_counter', Load(), lineno=154, col_offset=45)], lineno=154, col_offset=11), [Assign([Attribute(Name('cls', Load(), lineno=156, col_offset=12), '_abc_negative_cache', Store(), lineno=156, col_offset=12)], Call(Name('WeakSet', Load(), lineno=156, col_offset=38), [], [], None, None, lineno=156, col_offset=38), lineno=156, col_offset=12), Assign([Attribute(Name('cls', Load(), lineno=157, col_offset=12), '_abc_negative_cache_version', Store(), lineno=157, col_offset=12)], Attribute(Name('ABCMeta', Load(), lineno=157, col_offset=46), '_abc_invalidation_counter', Load(), lineno=157, col_offset=46), lineno=157, col_offset=12)], [If(Compare(Name('subclass', Load(), lineno=158, col_offset=13), [In()], [Attribute(Name('cls', Load(), lineno=158, col_offset=25), '_abc_negative_cache', Load(), lineno=158, col_offset=25)], lineno=158, col_offset=13), [Return(Name('False', Load(), lineno=159, col_offset=19), lineno=159, col_offset=12)], [], lineno=158, col_offset=13)], lineno=154, col_offset=8), Assign([Name('ok', Store(), lineno=161, col_offset=8)], Call(Attribute(Name('cls', Load(), lineno=161, col_offset=13), '__subclasshook__', Load(), lineno=161, col_offset=13), [Name('subclass', Load(), lineno=161, col_offset=34)], [], None, None, lineno=161, col_offset=13), lineno=161, col_offset=8), If(Compare(Name('ok', Load(), lineno=162, col_offset=11), [IsNot()], [Name('NotImplemented', Load(), lineno=162, col_offset=21)], lineno=162, col_offset=11), [Assert(Call(Name('isinstance', Load(), lineno=163, col_offset=19), [Name('ok', Load(), lineno=163, col_offset=30), Name('bool', Load(), lineno=163, col_offset=34)], [], None, None, lineno=163, col_offset=19), None, lineno=163, col_offset=12), If(Name('ok', Load(), lineno=164, col_offset=15), [Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=165, col_offset=16), '_abc_cache', Load(), lineno=165, col_offset=16), 'add', Load(), lineno=165, col_offset=16), [Name('subclass', Load(), lineno=165, col_offset=35)], [], None, None, lineno=165, col_offset=16), lineno=165, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=167, col_offset=16), '_abc_negative_cache', Load(), lineno=167, col_offset=16), 'add', Load(), lineno=167, col_offset=16), [Name('subclass', Load(), lineno=167, col_offset=44)], [], None, None, lineno=167, col_offset=16), lineno=167, col_offset=16)], lineno=164, col_offset=12), Return(Name('ok', Load(), lineno=168, col_offset=19), lineno=168, col_offset=12)], [], lineno=162, col_offset=8), If(Compare(Name('cls', Load(), lineno=170, col_offset=11), [In()], [Call(Name('getattr', Load(), lineno=170, col_offset=18), [Name('subclass', Load(), lineno=170, col_offset=26), Str('__mro__', lineno=170, col_offset=36), Tuple([], Load(), lineno=170, col_offset=47)], [], None, None, lineno=170, col_offset=18)], lineno=170, col_offset=11), [Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=171, col_offset=12), '_abc_cache', Load(), lineno=171, col_offset=12), 'add', Load(), lineno=171, col_offset=12), [Name('subclass', Load(), lineno=171, col_offset=31)], [], None, None, lineno=171, col_offset=12), lineno=171, col_offset=12), Return(Name('True', Load(), lineno=172, col_offset=19), lineno=172, col_offset=12)], [], lineno=170, col_offset=8), For(Name('rcls', Store(), lineno=174, col_offset=12), Attribute(Name('cls', Load(), lineno=174, col_offset=20), '_abc_registry', Load(), lineno=174, col_offset=20), [If(Call(Name('issubclass', Load(), lineno=175, col_offset=15), [Name('subclass', Load(), lineno=175, col_offset=26), Name('rcls', Load(), lineno=175, col_offset=36)], [], None, None, lineno=175, col_offset=15), [Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=176, col_offset=16), '_abc_cache', Load(), lineno=176, col_offset=16), 'add', Load(), lineno=176, col_offset=16), [Name('subclass', Load(), lineno=176, col_offset=35)], [], None, None, lineno=176, col_offset=16), lineno=176, col_offset=16), Return(Name('True', Load(), lineno=177, col_offset=23), lineno=177, col_offset=16)], [], lineno=175, col_offset=12)], [], lineno=174, col_offset=8), For(Name('scls', Store(), lineno=179, col_offset=12), Call(Attribute(Name('cls', Load(), lineno=179, col_offset=20), '__subclasses__', Load(), lineno=179, col_offset=20), [], [], None, None, lineno=179, col_offset=20), [If(Call(Name('issubclass', Load(), lineno=180, col_offset=15), [Name('subclass', Load(), lineno=180, col_offset=26), Name('scls', Load(), lineno=180, col_offset=36)], [], None, None, lineno=180, col_offset=15), [Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=181, col_offset=16), '_abc_cache', Load(), lineno=181, col_offset=16), 'add', Load(), lineno=181, col_offset=16), [Name('subclass', Load(), lineno=181, col_offset=35)], [], None, None, lineno=181, col_offset=16), lineno=181, col_offset=16), Return(Name('True', Load(), lineno=182, col_offset=23), lineno=182, col_offset=16)], [], lineno=180, col_offset=12)], [], lineno=179, col_offset=8), Expr(Call(Attribute(Attribute(Name('cls', Load(), lineno=184, col_offset=8), '_abc_negative_cache', Load(), lineno=184, col_offset=8), 'add', Load(), lineno=184, col_offset=8), [Name('subclass', Load(), lineno=184, col_offset=36)], [], None, None, lineno=184, col_offset=8), lineno=184, col_offset=8), Return(Name('False', Load(), lineno=185, col_offset=15), lineno=185, col_offset=8)], [], lineno=148, col_offset=4)], [], lineno=65, col_offset=0)])
