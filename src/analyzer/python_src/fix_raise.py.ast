Module([Expr(Str('Fixer for \'raise E, V, T\'\n\nraise         -> raise\nraise E       -> raise E\nraise E, V    -> raise E(V)\nraise E, V, T -> raise E(V).with_traceback(T)\nraise E, None, T -> raise E.with_traceback(T)\n\nraise (((E, E\'), E\'\'), E\'\'\'), V -> raise E(V)\nraise "foo", V, T               -> warns about string exceptions\n\n\nCAVEATS:\n1) "raise E, V" will be incorrectly translated if V is an exception\n   instance. The correct Python 3 idiom is\n\n        raise E from V\n\n   but since we can\'t detect instance-hood by syntax alone and since\n   any client code would have to be changed as well, we don\'t automate\n   this.\n', lineno=22, col_offset=-1), lineno=22, col_offset=-1), ImportFrom(None, [alias('pytree', None)], 2, lineno=26, col_offset=0), ImportFrom('pgen2', [alias('token', None)], 2, lineno=27, col_offset=0), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=28, col_offset=0), ImportFrom('fixer_util', [alias('Name', None), alias('Call', None), alias('Attr', None), alias('ArgList', None), alias('is_tuple', None)], 2, lineno=29, col_offset=0), ClassDef('FixRaise', [Attribute(Name('fixer_base', Load(), lineno=31, col_offset=15), 'BaseFix', Load(), lineno=31, col_offset=15)], [Assign([Name('BM_compatible', Store(), lineno=33, col_offset=4)], Name('True', Load(), lineno=33, col_offset=20), lineno=33, col_offset=4), Assign([Name('PATTERN', Store(), lineno=34, col_offset=4)], Str("\n    raise_stmt< 'raise' exc=any [',' val=any [',' tb=any]] >\n    ", lineno=36, col_offset=-1), lineno=34, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=38, col_offset=18), Name('node', Param(), lineno=38, col_offset=24), Name('results', Param(), lineno=38, col_offset=30)], None, None, []), [Assign([Name('syms', Store(), lineno=39, col_offset=8)], Attribute(Name('self', Load(), lineno=39, col_offset=15), 'syms', Load(), lineno=39, col_offset=15), lineno=39, col_offset=8), Assign([Name('exc', Store(), lineno=41, col_offset=8)], Call(Attribute(Subscript(Name('results', Load(), lineno=41, col_offset=14), Index(Str('exc', lineno=41, col_offset=22)), Load(), lineno=41, col_offset=14), 'clone', Load(), lineno=41, col_offset=14), [], [], None, None, lineno=41, col_offset=14), lineno=41, col_offset=8), If(Compare(Attribute(Name('exc', Load(), lineno=42, col_offset=11), 'type', Load(), lineno=42, col_offset=11), [Eq()], [Attribute(Name('token', Load(), lineno=42, col_offset=23), 'STRING', Load(), lineno=42, col_offset=23)], lineno=42, col_offset=11), [Assign([Name('msg', Store(), lineno=43, col_offset=12)], Str('Python 3 does not support string exceptions', lineno=43, col_offset=18), lineno=43, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=44, col_offset=12), 'cannot_convert', Load(), lineno=44, col_offset=12), [Name('node', Load(), lineno=44, col_offset=32), Name('msg', Load(), lineno=44, col_offset=38)], [], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12), Return(None, lineno=45, col_offset=12)], [], lineno=42, col_offset=8), If(Call(Name('is_tuple', Load(), lineno=53, col_offset=11), [Name('exc', Load(), lineno=53, col_offset=20)], [], None, None, lineno=53, col_offset=11), [While(Call(Name('is_tuple', Load(), lineno=54, col_offset=18), [Name('exc', Load(), lineno=54, col_offset=27)], [], None, None, lineno=54, col_offset=18), [Assign([Name('exc', Store(), lineno=57, col_offset=16)], Call(Attribute(Subscript(Attribute(Subscript(Attribute(Name('exc', Load(), lineno=57, col_offset=22), 'children', Load(), lineno=57, col_offset=22), Index(Num(1, lineno=57, col_offset=35)), Load(), lineno=57, col_offset=22), 'children', Load(), lineno=57, col_offset=22), Index(Num(0, lineno=57, col_offset=47)), Load(), lineno=57, col_offset=22), 'clone', Load(), lineno=57, col_offset=22), [], [], None, None, lineno=57, col_offset=22), lineno=57, col_offset=16)], [], lineno=54, col_offset=12), Assign([Attribute(Name('exc', Load(), lineno=58, col_offset=12), 'prefix', Store(), lineno=58, col_offset=12)], Str(u' ', lineno=58, col_offset=25), lineno=58, col_offset=12)], [], lineno=53, col_offset=8), If(Compare(Str('val', lineno=60, col_offset=11), [NotIn()], [Name('results', Load(), lineno=60, col_offset=24)], lineno=60, col_offset=11), [Assign([Name('new', Store(), lineno=62, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=62, col_offset=18), 'Node', Load(), lineno=62, col_offset=18), [Attribute(Name('syms', Load(), lineno=62, col_offset=30), 'raise_stmt', Load(), lineno=62, col_offset=30), List([Call(Name('Name', Load(), lineno=62, col_offset=48), [Str(u'raise', lineno=62, col_offset=53)], [], None, None, lineno=62, col_offset=48), Name('exc', Load(), lineno=62, col_offset=64)], Load(), lineno=62, col_offset=47)], [], None, None, lineno=62, col_offset=18), lineno=62, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=63, col_offset=12), 'prefix', Store(), lineno=63, col_offset=12)], Attribute(Name('node', Load(), lineno=63, col_offset=25), 'prefix', Load(), lineno=63, col_offset=25), lineno=63, col_offset=12), Return(Name('new', Load(), lineno=64, col_offset=19), lineno=64, col_offset=12)], [], lineno=60, col_offset=8), Assign([Name('val', Store(), lineno=66, col_offset=8)], Call(Attribute(Subscript(Name('results', Load(), lineno=66, col_offset=14), Index(Str('val', lineno=66, col_offset=22)), Load(), lineno=66, col_offset=14), 'clone', Load(), lineno=66, col_offset=14), [], [], None, None, lineno=66, col_offset=14), lineno=66, col_offset=8), If(Call(Name('is_tuple', Load(), lineno=67, col_offset=11), [Name('val', Load(), lineno=67, col_offset=20)], [], None, None, lineno=67, col_offset=11), [Assign([Name('args', Store(), lineno=68, col_offset=12)], ListComp(Call(Attribute(Name('c', Load(), lineno=68, col_offset=20), 'clone', Load(), lineno=68, col_offset=20), [], [], None, None, lineno=68, col_offset=20), [comprehension(Name('c', Store(), lineno=68, col_offset=34), Subscript(Attribute(Name('val', Load(), lineno=68, col_offset=39), 'children', Load(), lineno=68, col_offset=39), Slice(Num(1, lineno=68, col_offset=52), Num(-1, lineno=68, col_offset=55), None), Load(), lineno=68, col_offset=39), [])], lineno=68, col_offset=20), lineno=68, col_offset=12)], [Assign([Attribute(Name('val', Load(), lineno=70, col_offset=12), 'prefix', Store(), lineno=70, col_offset=12)], Str(u'', lineno=70, col_offset=25), lineno=70, col_offset=12), Assign([Name('args', Store(), lineno=71, col_offset=12)], List([Name('val', Load(), lineno=71, col_offset=20)], Load(), lineno=71, col_offset=19), lineno=71, col_offset=12)], lineno=67, col_offset=8), If(Compare(Str('tb', lineno=73, col_offset=11), [In()], [Name('results', Load(), lineno=73, col_offset=19)], lineno=73, col_offset=11), [Assign([Name('tb', Store(), lineno=74, col_offset=12)], Call(Attribute(Subscript(Name('results', Load(), lineno=74, col_offset=17), Index(Str('tb', lineno=74, col_offset=25)), Load(), lineno=74, col_offset=17), 'clone', Load(), lineno=74, col_offset=17), [], [], None, None, lineno=74, col_offset=17), lineno=74, col_offset=12), Assign([Attribute(Name('tb', Load(), lineno=75, col_offset=12), 'prefix', Store(), lineno=75, col_offset=12)], Str(u'', lineno=75, col_offset=24), lineno=75, col_offset=12), Assign([Name('e', Store(), lineno=77, col_offset=12)], Name('exc', Load(), lineno=77, col_offset=16), lineno=77, col_offset=12), If(BoolOp(Or(), [Compare(Attribute(Name('val', Load(), lineno=81, col_offset=15), 'type', Load(), lineno=81, col_offset=15), [NotEq()], [Attribute(Name('token', Load(), lineno=81, col_offset=27), 'NAME', Load(), lineno=81, col_offset=27)], lineno=81, col_offset=15), Compare(Attribute(Name('val', Load(), lineno=81, col_offset=41), 'value', Load(), lineno=81, col_offset=41), [NotEq()], [Str(u'None', lineno=81, col_offset=54)], lineno=81, col_offset=41)], lineno=81, col_offset=15), [Assign([Name('e', Store(), lineno=82, col_offset=16)], Call(Name('Call', Load(), lineno=82, col_offset=20), [Name('exc', Load(), lineno=82, col_offset=25), Name('args', Load(), lineno=82, col_offset=30)], [], None, None, lineno=82, col_offset=20), lineno=82, col_offset=16)], [], lineno=81, col_offset=12), Assign([Name('with_tb', Store(), lineno=83, col_offset=12)], BinOp(Call(Name('Attr', Load(), lineno=83, col_offset=22), [Name('e', Load(), lineno=83, col_offset=27), Call(Name('Name', Load(), lineno=83, col_offset=30), [Str(u'with_traceback', lineno=83, col_offset=35)], [], None, None, lineno=83, col_offset=30)], [], None, None, lineno=83, col_offset=22), Add(), List([Call(Name('ArgList', Load(), lineno=83, col_offset=58), [List([Name('tb', Load(), lineno=83, col_offset=67)], Load(), lineno=83, col_offset=66)], [], None, None, lineno=83, col_offset=58)], Load(), lineno=83, col_offset=57), lineno=83, col_offset=22), lineno=83, col_offset=12), Assign([Name('new', Store(), lineno=84, col_offset=12)], Call(Attribute(Name('pytree', Load(), lineno=84, col_offset=18), 'Node', Load(), lineno=84, col_offset=18), [Attribute(Name('syms', Load(), lineno=84, col_offset=30), 'simple_stmt', Load(), lineno=84, col_offset=30), BinOp(List([Call(Name('Name', Load(), lineno=84, col_offset=49), [Str(u'raise', lineno=84, col_offset=54)], [], None, None, lineno=84, col_offset=49)], Load(), lineno=84, col_offset=48), Add(), Name('with_tb', Load(), lineno=84, col_offset=67), lineno=84, col_offset=48)], [], None, None, lineno=84, col_offset=18), lineno=84, col_offset=12), Assign([Attribute(Name('new', Load(), lineno=85, col_offset=12), 'prefix', Store(), lineno=85, col_offset=12)], Attribute(Name('node', Load(), lineno=85, col_offset=25), 'prefix', Load(), lineno=85, col_offset=25), lineno=85, col_offset=12), Return(Name('new', Load(), lineno=86, col_offset=19), lineno=86, col_offset=12)], [Return(Call(Attribute(Name('pytree', Load(), lineno=88, col_offset=19), 'Node', Load(), lineno=88, col_offset=19), [Attribute(Name('syms', Load(), lineno=88, col_offset=31), 'raise_stmt', Load(), lineno=88, col_offset=31), List([Call(Name('Name', Load(), lineno=89, col_offset=32), [Str(u'raise', lineno=89, col_offset=37)], [], None, None, lineno=89, col_offset=32), Call(Name('Call', Load(), lineno=89, col_offset=48), [Name('exc', Load(), lineno=89, col_offset=53), Name('args', Load(), lineno=89, col_offset=58)], [], None, None, lineno=89, col_offset=48)], Load(), lineno=89, col_offset=31)], [keyword('prefix', Attribute(Name('node', Load(), lineno=90, col_offset=38), 'prefix', Load(), lineno=90, col_offset=38))], None, None, lineno=88, col_offset=19), lineno=88, col_offset=12)], lineno=73, col_offset=8)], [], lineno=38, col_offset=4)], [], lineno=31, col_offset=0)])
