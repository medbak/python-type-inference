Module([Expr(Str('\ncsv.py - read/write/investigate CSV files\n', lineno=4, col_offset=-1), lineno=4, col_offset=-1), Import([alias('re', None)], lineno=6, col_offset=0), ImportFrom('functools', [alias('reduce', None)], 0, lineno=7, col_offset=0), ImportFrom('_csv', [alias('Error', None), alias('__version__', None), alias('writer', None), alias('reader', None), alias('register_dialect', None), alias('unregister_dialect', None), alias('get_dialect', None), alias('list_dialects', None), alias('field_size_limit', None), alias('QUOTE_MINIMAL', None), alias('QUOTE_ALL', None), alias('QUOTE_NONNUMERIC', None), alias('QUOTE_NONE', None), alias('__doc__', None)], 0, lineno=8, col_offset=0), ImportFrom('_csv', [alias('Dialect', '_Dialect')], 0, lineno=13, col_offset=0), TryExcept([ImportFrom('cStringIO', [alias('StringIO', None)], 0, lineno=16, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=17, col_offset=7), None, [ImportFrom('StringIO', [alias('StringIO', None)], 0, lineno=18, col_offset=4)], lineno=17, col_offset=0)], [], lineno=15, col_offset=0), Assign([Name('__all__', Store(), lineno=20, col_offset=0)], List([Str('QUOTE_MINIMAL', lineno=20, col_offset=12), Str('QUOTE_ALL', lineno=20, col_offset=29), Str('QUOTE_NONNUMERIC', lineno=20, col_offset=42), Str('QUOTE_NONE', lineno=20, col_offset=62), Str('Error', lineno=21, col_offset=12), Str('Dialect', lineno=21, col_offset=21), Str('__doc__', lineno=21, col_offset=32), Str('excel', lineno=21, col_offset=43), Str('excel_tab', lineno=21, col_offset=52), Str('field_size_limit', lineno=22, col_offset=12), Str('reader', lineno=22, col_offset=32), Str('writer', lineno=22, col_offset=42), Str('register_dialect', lineno=23, col_offset=12), Str('get_dialect', lineno=23, col_offset=32), Str('list_dialects', lineno=23, col_offset=47), Str('Sniffer', lineno=23, col_offset=64), Str('unregister_dialect', lineno=24, col_offset=12), Str('__version__', lineno=24, col_offset=34), Str('DictReader', lineno=24, col_offset=49), Str('DictWriter', lineno=24, col_offset=63)], Load(), lineno=20, col_offset=10), lineno=20, col_offset=0), ClassDef('Dialect', [], [Expr(Str('Describe an Excel dialect.\n\n    This must be subclassed (see csv.excel).  Valid attributes are:\n    delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n    lineterminator, quoting.\n\n    ', lineno=33, col_offset=-1), lineno=33, col_offset=-1), Assign([Name('_name', Store(), lineno=34, col_offset=4)], Str('', lineno=34, col_offset=12), lineno=34, col_offset=4), Assign([Name('_valid', Store(), lineno=35, col_offset=4)], Name('False', Load(), lineno=35, col_offset=13), lineno=35, col_offset=4), Assign([Name('delimiter', Store(), lineno=37, col_offset=4)], Name('None', Load(), lineno=37, col_offset=16), lineno=37, col_offset=4), Assign([Name('quotechar', Store(), lineno=38, col_offset=4)], Name('None', Load(), lineno=38, col_offset=16), lineno=38, col_offset=4), Assign([Name('escapechar', Store(), lineno=39, col_offset=4)], Name('None', Load(), lineno=39, col_offset=17), lineno=39, col_offset=4), Assign([Name('doublequote', Store(), lineno=40, col_offset=4)], Name('None', Load(), lineno=40, col_offset=18), lineno=40, col_offset=4), Assign([Name('skipinitialspace', Store(), lineno=41, col_offset=4)], Name('None', Load(), lineno=41, col_offset=23), lineno=41, col_offset=4), Assign([Name('lineterminator', Store(), lineno=42, col_offset=4)], Name('None', Load(), lineno=42, col_offset=21), lineno=42, col_offset=4), Assign([Name('quoting', Store(), lineno=43, col_offset=4)], Name('None', Load(), lineno=43, col_offset=14), lineno=43, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=45, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=46, col_offset=11), '__class__', Load(), lineno=46, col_offset=11), [NotEq()], [Name('Dialect', Load(), lineno=46, col_offset=29)], lineno=46, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=47, col_offset=12), '_valid', Store(), lineno=47, col_offset=12)], Name('True', Load(), lineno=47, col_offset=26), lineno=47, col_offset=12)], [], lineno=46, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=48, col_offset=8), '_validate', Load(), lineno=48, col_offset=8), [], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8)], [], lineno=45, col_offset=4), FunctionDef('_validate', arguments([Name('self', Param(), lineno=50, col_offset=18)], None, None, []), [TryExcept([Expr(Call(Name('_Dialect', Load(), lineno=52, col_offset=12), [Name('self', Load(), lineno=52, col_offset=21)], [], None, None, lineno=52, col_offset=12), lineno=52, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=53, col_offset=15), Name('e', Store(), lineno=53, col_offset=26), [Raise(Call(Name('Error', Load(), lineno=55, col_offset=18), [Call(Name('str', Load(), lineno=55, col_offset=24), [Name('e', Load(), lineno=55, col_offset=28)], [], None, None, lineno=55, col_offset=24)], [], None, None, lineno=55, col_offset=18), None, None, lineno=55, col_offset=12)], lineno=53, col_offset=8)], [], lineno=51, col_offset=8)], [], lineno=50, col_offset=4)], [], lineno=26, col_offset=0), ClassDef('excel', [Name('Dialect', Load(), lineno=57, col_offset=12)], [Expr(Str('Describe the usual properties of Excel-generated CSV files.', lineno=58, col_offset=4), lineno=58, col_offset=4), Assign([Name('delimiter', Store(), lineno=59, col_offset=4)], Str(',', lineno=59, col_offset=16), lineno=59, col_offset=4), Assign([Name('quotechar', Store(), lineno=60, col_offset=4)], Str('"', lineno=60, col_offset=16), lineno=60, col_offset=4), Assign([Name('doublequote', Store(), lineno=61, col_offset=4)], Name('True', Load(), lineno=61, col_offset=18), lineno=61, col_offset=4), Assign([Name('skipinitialspace', Store(), lineno=62, col_offset=4)], Name('False', Load(), lineno=62, col_offset=23), lineno=62, col_offset=4), Assign([Name('lineterminator', Store(), lineno=63, col_offset=4)], Str('\r\n', lineno=63, col_offset=21), lineno=63, col_offset=4), Assign([Name('quoting', Store(), lineno=64, col_offset=4)], Name('QUOTE_MINIMAL', Load(), lineno=64, col_offset=14), lineno=64, col_offset=4)], [], lineno=57, col_offset=0), Expr(Call(Name('register_dialect', Load(), lineno=65, col_offset=0), [Str('excel', lineno=65, col_offset=17), Name('excel', Load(), lineno=65, col_offset=26)], [], None, None, lineno=65, col_offset=0), lineno=65, col_offset=0), ClassDef('excel_tab', [Name('excel', Load(), lineno=67, col_offset=16)], [Expr(Str('Describe the usual properties of Excel-generated TAB-delimited files.', lineno=68, col_offset=4), lineno=68, col_offset=4), Assign([Name('delimiter', Store(), lineno=69, col_offset=4)], Str('\t', lineno=69, col_offset=16), lineno=69, col_offset=4)], [], lineno=67, col_offset=0), Expr(Call(Name('register_dialect', Load(), lineno=70, col_offset=0), [Str('excel-tab', lineno=70, col_offset=17), Name('excel_tab', Load(), lineno=70, col_offset=30)], [], None, None, lineno=70, col_offset=0), lineno=70, col_offset=0), ClassDef('DictReader', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=74, col_offset=17), Name('f', Param(), lineno=74, col_offset=23), Name('fieldnames', Param(), lineno=74, col_offset=26), Name('restkey', Param(), lineno=74, col_offset=43), Name('restval', Param(), lineno=74, col_offset=57), Name('dialect', Param(), lineno=75, col_offset=17)], 'args', 'kwds', [Name('None', Load(), lineno=74, col_offset=37), Name('None', Load(), lineno=74, col_offset=51), Name('None', Load(), lineno=74, col_offset=65), Str('excel', lineno=75, col_offset=25)]), [Assign([Attribute(Name('self', Load(), lineno=76, col_offset=8), '_fieldnames', Store(), lineno=76, col_offset=8)], Name('fieldnames', Load(), lineno=76, col_offset=27), lineno=76, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=77, col_offset=8), 'restkey', Store(), lineno=77, col_offset=8)], Name('restkey', Load(), lineno=77, col_offset=23), lineno=77, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=78, col_offset=8), 'restval', Store(), lineno=78, col_offset=8)], Name('restval', Load(), lineno=78, col_offset=23), lineno=78, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=79, col_offset=8), 'reader', Store(), lineno=79, col_offset=8)], Call(Name('reader', Load(), lineno=79, col_offset=22), [Name('f', Load(), lineno=79, col_offset=29), Name('dialect', Load(), lineno=79, col_offset=32)], [], Name('args', Load(), lineno=79, col_offset=42), Name('kwds', Load(), lineno=79, col_offset=50), lineno=79, col_offset=22), lineno=79, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=80, col_offset=8), 'dialect', Store(), lineno=80, col_offset=8)], Name('dialect', Load(), lineno=80, col_offset=23), lineno=80, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=81, col_offset=8), 'line_num', Store(), lineno=81, col_offset=8)], Num(0, lineno=81, col_offset=24), lineno=81, col_offset=8)], [], lineno=74, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=83, col_offset=17)], None, None, []), [Return(Name('self', Load(), lineno=84, col_offset=15), lineno=84, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('fieldnames', arguments([Name('self', Param(), lineno=87, col_offset=19)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=88, col_offset=11), '_fieldnames', Load(), lineno=88, col_offset=11), [Is()], [Name('None', Load(), lineno=88, col_offset=31)], lineno=88, col_offset=11), [TryExcept([Assign([Attribute(Name('self', Load(), lineno=90, col_offset=16), '_fieldnames', Store(), lineno=90, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=90, col_offset=35), 'reader', Load(), lineno=90, col_offset=35), 'next', Load(), lineno=90, col_offset=35), [], [], None, None, lineno=90, col_offset=35), lineno=90, col_offset=16)], [ExceptHandler(Name('StopIteration', Load(), lineno=91, col_offset=19), None, [Pass( lineno=92, col_offset=16)], lineno=91, col_offset=12)], [], lineno=89, col_offset=12)], [], lineno=88, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=93, col_offset=8), 'line_num', Store(), lineno=93, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=93, col_offset=24), 'reader', Load(), lineno=93, col_offset=24), 'line_num', Load(), lineno=93, col_offset=24), lineno=93, col_offset=8), Return(Attribute(Name('self', Load(), lineno=94, col_offset=15), '_fieldnames', Load(), lineno=94, col_offset=15), lineno=94, col_offset=8)], [Name('property', Load(), lineno=86, col_offset=5)], lineno=86, col_offset=4), FunctionDef('fieldnames', arguments([Name('self', Param(), lineno=97, col_offset=19), Name('value', Param(), lineno=97, col_offset=25)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=98, col_offset=8), '_fieldnames', Store(), lineno=98, col_offset=8)], Name('value', Load(), lineno=98, col_offset=27), lineno=98, col_offset=8)], [Attribute(Name('fieldnames', Load(), lineno=96, col_offset=5), 'setter', Load(), lineno=96, col_offset=5)], lineno=96, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=100, col_offset=13)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=101, col_offset=11), 'line_num', Load(), lineno=101, col_offset=11), [Eq()], [Num(0, lineno=101, col_offset=28)], lineno=101, col_offset=11), [Expr(Attribute(Name('self', Load(), lineno=103, col_offset=12), 'fieldnames', Load(), lineno=103, col_offset=12), lineno=103, col_offset=12)], [], lineno=101, col_offset=8), Assign([Name('row', Store(), lineno=104, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=104, col_offset=14), 'reader', Load(), lineno=104, col_offset=14), 'next', Load(), lineno=104, col_offset=14), [], [], None, None, lineno=104, col_offset=14), lineno=104, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=105, col_offset=8), 'line_num', Store(), lineno=105, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=105, col_offset=24), 'reader', Load(), lineno=105, col_offset=24), 'line_num', Load(), lineno=105, col_offset=24), lineno=105, col_offset=8), While(Compare(Name('row', Load(), lineno=110, col_offset=14), [Eq()], [List([], Load(), lineno=110, col_offset=21)], lineno=110, col_offset=14), [Assign([Name('row', Store(), lineno=111, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=111, col_offset=18), 'reader', Load(), lineno=111, col_offset=18), 'next', Load(), lineno=111, col_offset=18), [], [], None, None, lineno=111, col_offset=18), lineno=111, col_offset=12)], [], lineno=110, col_offset=8), Assign([Name('d', Store(), lineno=112, col_offset=8)], Call(Name('dict', Load(), lineno=112, col_offset=12), [Call(Name('zip', Load(), lineno=112, col_offset=17), [Attribute(Name('self', Load(), lineno=112, col_offset=21), 'fieldnames', Load(), lineno=112, col_offset=21), Name('row', Load(), lineno=112, col_offset=38)], [], None, None, lineno=112, col_offset=17)], [], None, None, lineno=112, col_offset=12), lineno=112, col_offset=8), Assign([Name('lf', Store(), lineno=113, col_offset=8)], Call(Name('len', Load(), lineno=113, col_offset=13), [Attribute(Name('self', Load(), lineno=113, col_offset=17), 'fieldnames', Load(), lineno=113, col_offset=17)], [], None, None, lineno=113, col_offset=13), lineno=113, col_offset=8), Assign([Name('lr', Store(), lineno=114, col_offset=8)], Call(Name('len', Load(), lineno=114, col_offset=13), [Name('row', Load(), lineno=114, col_offset=17)], [], None, None, lineno=114, col_offset=13), lineno=114, col_offset=8), If(Compare(Name('lf', Load(), lineno=115, col_offset=11), [Lt()], [Name('lr', Load(), lineno=115, col_offset=16)], lineno=115, col_offset=11), [Assign([Subscript(Name('d', Load(), lineno=116, col_offset=12), Index(Attribute(Name('self', Load(), lineno=116, col_offset=14), 'restkey', Load(), lineno=116, col_offset=14)), Store(), lineno=116, col_offset=12)], Subscript(Name('row', Load(), lineno=116, col_offset=30), Slice(Name('lf', Load(), lineno=116, col_offset=34), None, None), Load(), lineno=116, col_offset=30), lineno=116, col_offset=12)], [If(Compare(Name('lf', Load(), lineno=117, col_offset=13), [Gt()], [Name('lr', Load(), lineno=117, col_offset=18)], lineno=117, col_offset=13), [For(Name('key', Store(), lineno=118, col_offset=16), Subscript(Attribute(Name('self', Load(), lineno=118, col_offset=23), 'fieldnames', Load(), lineno=118, col_offset=23), Slice(Name('lr', Load(), lineno=118, col_offset=39), None, None), Load(), lineno=118, col_offset=23), [Assign([Subscript(Name('d', Load(), lineno=119, col_offset=16), Index(Name('key', Load(), lineno=119, col_offset=18)), Store(), lineno=119, col_offset=16)], Attribute(Name('self', Load(), lineno=119, col_offset=25), 'restval', Load(), lineno=119, col_offset=25), lineno=119, col_offset=16)], [], lineno=118, col_offset=12)], [], lineno=117, col_offset=13)], lineno=115, col_offset=8), Return(Name('d', Load(), lineno=120, col_offset=15), lineno=120, col_offset=8)], [], lineno=100, col_offset=4)], [], lineno=73, col_offset=0), ClassDef('DictWriter', [], [FunctionDef('__init__', arguments([Name('self', Param(), lineno=124, col_offset=17), Name('f', Param(), lineno=124, col_offset=23), Name('fieldnames', Param(), lineno=124, col_offset=26), Name('restval', Param(), lineno=124, col_offset=38), Name('extrasaction', Param(), lineno=124, col_offset=50), Name('dialect', Param(), lineno=125, col_offset=17)], 'args', 'kwds', [Str('', lineno=124, col_offset=46), Str('raise', lineno=124, col_offset=63), Str('excel', lineno=125, col_offset=25)]), [Assign([Attribute(Name('self', Load(), lineno=126, col_offset=8), 'fieldnames', Store(), lineno=126, col_offset=8)], Name('fieldnames', Load(), lineno=126, col_offset=26), lineno=126, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=127, col_offset=8), 'restval', Store(), lineno=127, col_offset=8)], Name('restval', Load(), lineno=127, col_offset=23), lineno=127, col_offset=8), If(Compare(Call(Attribute(Name('extrasaction', Load(), lineno=128, col_offset=11), 'lower', Load(), lineno=128, col_offset=11), [], [], None, None, lineno=128, col_offset=11), [NotIn()], [Tuple([Str('raise', lineno=128, col_offset=40), Str('ignore', lineno=128, col_offset=49)], Load(), lineno=128, col_offset=40)], lineno=128, col_offset=11), [Raise(Name('ValueError', Load(), lineno=129, col_offset=18), BinOp(Str("extrasaction (%s) must be 'raise' or 'ignore'", lineno=130, col_offset=19), Mod(), Name('extrasaction', Load(), lineno=131, col_offset=19), lineno=130, col_offset=19), None, lineno=129, col_offset=12)], [], lineno=128, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=132, col_offset=8), 'extrasaction', Store(), lineno=132, col_offset=8)], Name('extrasaction', Load(), lineno=132, col_offset=28), lineno=132, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=133, col_offset=8), 'writer', Store(), lineno=133, col_offset=8)], Call(Name('writer', Load(), lineno=133, col_offset=22), [Name('f', Load(), lineno=133, col_offset=29), Name('dialect', Load(), lineno=133, col_offset=32)], [], Name('args', Load(), lineno=133, col_offset=42), Name('kwds', Load(), lineno=133, col_offset=50), lineno=133, col_offset=22), lineno=133, col_offset=8)], [], lineno=124, col_offset=4), FunctionDef('writeheader', arguments([Name('self', Param(), lineno=135, col_offset=20)], None, None, []), [Assign([Name('header', Store(), lineno=136, col_offset=8)], Call(Name('dict', Load(), lineno=136, col_offset=17), [Call(Name('zip', Load(), lineno=136, col_offset=22), [Attribute(Name('self', Load(), lineno=136, col_offset=26), 'fieldnames', Load(), lineno=136, col_offset=26), Attribute(Name('self', Load(), lineno=136, col_offset=43), 'fieldnames', Load(), lineno=136, col_offset=43)], [], None, None, lineno=136, col_offset=22)], [], None, None, lineno=136, col_offset=17), lineno=136, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=137, col_offset=8), 'writerow', Load(), lineno=137, col_offset=8), [Name('header', Load(), lineno=137, col_offset=22)], [], None, None, lineno=137, col_offset=8), lineno=137, col_offset=8)], [], lineno=135, col_offset=4), FunctionDef('_dict_to_list', arguments([Name('self', Param(), lineno=139, col_offset=22), Name('rowdict', Param(), lineno=139, col_offset=28)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=140, col_offset=11), 'extrasaction', Load(), lineno=140, col_offset=11), [Eq()], [Str('raise', lineno=140, col_offset=32)], lineno=140, col_offset=11), [Assign([Name('wrong_fields', Store(), lineno=141, col_offset=12)], ListComp(Name('k', Load(), lineno=141, col_offset=28), [comprehension(Name('k', Store(), lineno=141, col_offset=34), Name('rowdict', Load(), lineno=141, col_offset=39), [Compare(Name('k', Load(), lineno=141, col_offset=50), [NotIn()], [Attribute(Name('self', Load(), lineno=141, col_offset=59), 'fieldnames', Load(), lineno=141, col_offset=59)], lineno=141, col_offset=50)])], lineno=141, col_offset=28), lineno=141, col_offset=12), If(Name('wrong_fields', Load(), lineno=142, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=143, col_offset=22), [BinOp(Str('dict contains fields not in fieldnames: ', lineno=143, col_offset=33), Add(), Call(Attribute(Str(', ', lineno=144, col_offset=33), 'join', Load(), lineno=144, col_offset=33), [Name('wrong_fields', Load(), lineno=144, col_offset=43)], [], None, None, lineno=144, col_offset=33), lineno=143, col_offset=33)], [], None, None, lineno=143, col_offset=22), None, None, lineno=143, col_offset=16)], [], lineno=142, col_offset=12)], [], lineno=140, col_offset=8), Return(ListComp(Call(Attribute(Name('rowdict', Load(), lineno=145, col_offset=16), 'get', Load(), lineno=145, col_offset=16), [Name('key', Load(), lineno=145, col_offset=28), Attribute(Name('self', Load(), lineno=145, col_offset=33), 'restval', Load(), lineno=145, col_offset=33)], [], None, None, lineno=145, col_offset=16), [comprehension(Name('key', Store(), lineno=145, col_offset=51), Attribute(Name('self', Load(), lineno=145, col_offset=58), 'fieldnames', Load(), lineno=145, col_offset=58), [])], lineno=145, col_offset=16), lineno=145, col_offset=8)], [], lineno=139, col_offset=4), FunctionDef('writerow', arguments([Name('self', Param(), lineno=147, col_offset=17), Name('rowdict', Param(), lineno=147, col_offset=23)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=148, col_offset=15), 'writer', Load(), lineno=148, col_offset=15), 'writerow', Load(), lineno=148, col_offset=15), [Call(Attribute(Name('self', Load(), lineno=148, col_offset=36), '_dict_to_list', Load(), lineno=148, col_offset=36), [Name('rowdict', Load(), lineno=148, col_offset=55)], [], None, None, lineno=148, col_offset=36)], [], None, None, lineno=148, col_offset=15), lineno=148, col_offset=8)], [], lineno=147, col_offset=4), FunctionDef('writerows', arguments([Name('self', Param(), lineno=150, col_offset=18), Name('rowdicts', Param(), lineno=150, col_offset=24)], None, None, []), [Assign([Name('rows', Store(), lineno=151, col_offset=8)], List([], Load(), lineno=151, col_offset=15), lineno=151, col_offset=8), For(Name('rowdict', Store(), lineno=152, col_offset=12), Name('rowdicts', Load(), lineno=152, col_offset=23), [Expr(Call(Attribute(Name('rows', Load(), lineno=153, col_offset=12), 'append', Load(), lineno=153, col_offset=12), [Call(Attribute(Name('self', Load(), lineno=153, col_offset=24), '_dict_to_list', Load(), lineno=153, col_offset=24), [Name('rowdict', Load(), lineno=153, col_offset=43)], [], None, None, lineno=153, col_offset=24)], [], None, None, lineno=153, col_offset=12), lineno=153, col_offset=12)], [], lineno=152, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=154, col_offset=15), 'writer', Load(), lineno=154, col_offset=15), 'writerows', Load(), lineno=154, col_offset=15), [Name('rows', Load(), lineno=154, col_offset=37)], [], None, None, lineno=154, col_offset=15), lineno=154, col_offset=8)], [], lineno=150, col_offset=4)], [], lineno=123, col_offset=0), TryExcept([Expr(Name('complex', Load(), lineno=158, col_offset=4), lineno=158, col_offset=4)], [ExceptHandler(Name('NameError', Load(), lineno=159, col_offset=7), None, [Assign([Name('complex', Store(), lineno=160, col_offset=4)], Name('float', Load(), lineno=160, col_offset=14), lineno=160, col_offset=4)], lineno=159, col_offset=0)], [], lineno=157, col_offset=0), ClassDef('Sniffer', [], [Expr(Str('\n    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)\n    Returns a Dialect object.\n    ', lineno=166, col_offset=-1), lineno=166, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=167, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=169, col_offset=8), 'preferred', Store(), lineno=169, col_offset=8)], List([Str(',', lineno=169, col_offset=26), Str('\t', lineno=169, col_offset=31), Str(';', lineno=169, col_offset=37), Str(' ', lineno=169, col_offset=42), Str(':', lineno=169, col_offset=47)], Load(), lineno=169, col_offset=25), lineno=169, col_offset=8)], [], lineno=167, col_offset=4), FunctionDef('sniff', arguments([Name('self', Param(), lineno=172, col_offset=14), Name('sample', Param(), lineno=172, col_offset=20), Name('delimiters', Param(), lineno=172, col_offset=28)], None, None, [Name('None', Load(), lineno=172, col_offset=39)]), [Expr(Str('\n        Returns a dialect (or None) corresponding to the sample\n        ', lineno=175, col_offset=-1), lineno=175, col_offset=-1), Assign([Tuple([Name('quotechar', Store(), lineno=177, col_offset=8), Name('doublequote', Store(), lineno=177, col_offset=19), Name('delimiter', Store(), lineno=177, col_offset=32), Name('skipinitialspace', Store(), lineno=177, col_offset=43)], Store(), lineno=177, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=178, col_offset=19), '_guess_quote_and_delimiter', Load(), lineno=178, col_offset=19), [Name('sample', Load(), lineno=178, col_offset=51), Name('delimiters', Load(), lineno=178, col_offset=59)], [], None, None, lineno=178, col_offset=19), lineno=177, col_offset=8), If(UnaryOp(Not(), Name('delimiter', Load(), lineno=179, col_offset=15), lineno=179, col_offset=11), [Assign([Tuple([Name('delimiter', Store(), lineno=180, col_offset=12), Name('skipinitialspace', Store(), lineno=180, col_offset=23)], Store(), lineno=180, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=180, col_offset=42), '_guess_delimiter', Load(), lineno=180, col_offset=42), [Name('sample', Load(), lineno=180, col_offset=64), Name('delimiters', Load(), lineno=181, col_offset=64)], [], None, None, lineno=180, col_offset=42), lineno=180, col_offset=12)], [], lineno=179, col_offset=8), If(UnaryOp(Not(), Name('delimiter', Load(), lineno=183, col_offset=15), lineno=183, col_offset=11), [Raise(Name('Error', Load(), lineno=184, col_offset=18), Str('Could not determine delimiter', lineno=184, col_offset=25), None, lineno=184, col_offset=12)], [], lineno=183, col_offset=8), ClassDef('dialect', [Name('Dialect', Load(), lineno=186, col_offset=22)], [Assign([Name('_name', Store(), lineno=187, col_offset=12)], Str('sniffed', lineno=187, col_offset=20), lineno=187, col_offset=12), Assign([Name('lineterminator', Store(), lineno=188, col_offset=12)], Str('\r\n', lineno=188, col_offset=29), lineno=188, col_offset=12), Assign([Name('quoting', Store(), lineno=189, col_offset=12)], Name('QUOTE_MINIMAL', Load(), lineno=189, col_offset=22), lineno=189, col_offset=12)], [], lineno=186, col_offset=8), Assign([Attribute(Name('dialect', Load(), lineno=192, col_offset=8), 'doublequote', Store(), lineno=192, col_offset=8)], Name('doublequote', Load(), lineno=192, col_offset=30), lineno=192, col_offset=8), Assign([Attribute(Name('dialect', Load(), lineno=193, col_offset=8), 'delimiter', Store(), lineno=193, col_offset=8)], Name('delimiter', Load(), lineno=193, col_offset=28), lineno=193, col_offset=8), Assign([Attribute(Name('dialect', Load(), lineno=195, col_offset=8), 'quotechar', Store(), lineno=195, col_offset=8)], BoolOp(Or(), [Name('quotechar', Load(), lineno=195, col_offset=28), Str('"', lineno=195, col_offset=41)], lineno=195, col_offset=28), lineno=195, col_offset=8), Assign([Attribute(Name('dialect', Load(), lineno=196, col_offset=8), 'skipinitialspace', Store(), lineno=196, col_offset=8)], Name('skipinitialspace', Load(), lineno=196, col_offset=35), lineno=196, col_offset=8), Return(Name('dialect', Load(), lineno=198, col_offset=15), lineno=198, col_offset=8)], [], lineno=172, col_offset=4), FunctionDef('_guess_quote_and_delimiter', arguments([Name('self', Param(), lineno=201, col_offset=35), Name('data', Param(), lineno=201, col_offset=41), Name('delimiters', Param(), lineno=201, col_offset=47)], None, None, []), [Expr(Str("\n        Looks for text enclosed between two identical quotes\n        (the probable quotechar) which are preceded and followed\n        by the same character (the probable delimiter).\n        For example:\n                         ,'some text',\n        The quote with the most wins, same with the delimiter.\n        If there is no quotechar the delimiter can't be determined\n        this way.\n        ", lineno=211, col_offset=-1), lineno=211, col_offset=-1), Assign([Name('matches', Store(), lineno=213, col_offset=8)], List([], Load(), lineno=213, col_offset=18), lineno=213, col_offset=8), For(Name('restr', Store(), lineno=214, col_offset=12), Tuple([Str('(?P<delim>[^\\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?P=delim)', lineno=214, col_offset=22), Str('(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?P<delim>[^\\w\n"\'])(?P<space> ?)', lineno=215, col_offset=22), Str('(?P<delim>>[^\\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)', lineno=216, col_offset=22), Str('(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?:$|\n)', lineno=217, col_offset=22)], Load(), lineno=214, col_offset=22), [Assign([Name('regexp', Store(), lineno=218, col_offset=12)], Call(Attribute(Name('re', Load(), lineno=218, col_offset=21), 'compile', Load(), lineno=218, col_offset=21), [Name('restr', Load(), lineno=218, col_offset=32), BinOp(Attribute(Name('re', Load(), lineno=218, col_offset=39), 'DOTALL', Load(), lineno=218, col_offset=39), BitOr(), Attribute(Name('re', Load(), lineno=218, col_offset=51), 'MULTILINE', Load(), lineno=218, col_offset=51), lineno=218, col_offset=39)], [], None, None, lineno=218, col_offset=21), lineno=218, col_offset=12), Assign([Name('matches', Store(), lineno=219, col_offset=12)], Call(Attribute(Name('regexp', Load(), lineno=219, col_offset=22), 'findall', Load(), lineno=219, col_offset=22), [Name('data', Load(), lineno=219, col_offset=37)], [], None, None, lineno=219, col_offset=22), lineno=219, col_offset=12), If(Name('matches', Load(), lineno=220, col_offset=15), [Break( lineno=221, col_offset=16)], [], lineno=220, col_offset=12)], [], lineno=214, col_offset=8), If(UnaryOp(Not(), Name('matches', Load(), lineno=223, col_offset=15), lineno=223, col_offset=11), [Return(Tuple([Str('', lineno=225, col_offset=20), Name('False', Load(), lineno=225, col_offset=24), Name('None', Load(), lineno=225, col_offset=31), Num(0, lineno=225, col_offset=37)], Load(), lineno=225, col_offset=20), lineno=225, col_offset=12)], [], lineno=223, col_offset=8), Assign([Name('quotes', Store(), lineno=226, col_offset=8)], Dict([], [], lineno=226, col_offset=17), lineno=226, col_offset=8), Assign([Name('delims', Store(), lineno=227, col_offset=8)], Dict([], [], lineno=227, col_offset=17), lineno=227, col_offset=8), Assign([Name('spaces', Store(), lineno=228, col_offset=8)], Num(0, lineno=228, col_offset=17), lineno=228, col_offset=8), For(Name('m', Store(), lineno=229, col_offset=12), Name('matches', Load(), lineno=229, col_offset=17), [Assign([Name('n', Store(), lineno=230, col_offset=12)], BinOp(Subscript(Attribute(Name('regexp', Load(), lineno=230, col_offset=16), 'groupindex', Load(), lineno=230, col_offset=16), Index(Str('quote', lineno=230, col_offset=34)), Load(), lineno=230, col_offset=16), Sub(), Num(1, lineno=230, col_offset=45), lineno=230, col_offset=16), lineno=230, col_offset=12), Assign([Name('key', Store(), lineno=231, col_offset=12)], Subscript(Name('m', Load(), lineno=231, col_offset=18), Index(Name('n', Load(), lineno=231, col_offset=20)), Load(), lineno=231, col_offset=18), lineno=231, col_offset=12), If(Name('key', Load(), lineno=232, col_offset=15), [Assign([Subscript(Name('quotes', Load(), lineno=233, col_offset=16), Index(Name('key', Load(), lineno=233, col_offset=23)), Store(), lineno=233, col_offset=16)], BinOp(Call(Attribute(Name('quotes', Load(), lineno=233, col_offset=30), 'get', Load(), lineno=233, col_offset=30), [Name('key', Load(), lineno=233, col_offset=41), Num(0, lineno=233, col_offset=46)], [], None, None, lineno=233, col_offset=30), Add(), Num(1, lineno=233, col_offset=51), lineno=233, col_offset=30), lineno=233, col_offset=16)], [], lineno=232, col_offset=12), TryExcept([Assign([Name('n', Store(), lineno=235, col_offset=16)], BinOp(Subscript(Attribute(Name('regexp', Load(), lineno=235, col_offset=20), 'groupindex', Load(), lineno=235, col_offset=20), Index(Str('delim', lineno=235, col_offset=38)), Load(), lineno=235, col_offset=20), Sub(), Num(1, lineno=235, col_offset=49), lineno=235, col_offset=20), lineno=235, col_offset=16), Assign([Name('key', Store(), lineno=236, col_offset=16)], Subscript(Name('m', Load(), lineno=236, col_offset=22), Index(Name('n', Load(), lineno=236, col_offset=24)), Load(), lineno=236, col_offset=22), lineno=236, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=237, col_offset=19), None, [Continue( lineno=238, col_offset=16)], lineno=237, col_offset=12)], [], lineno=234, col_offset=12), If(BoolOp(And(), [Name('key', Load(), lineno=239, col_offset=15), BoolOp(Or(), [Compare(Name('delimiters', Load(), lineno=239, col_offset=24), [Is()], [Name('None', Load(), lineno=239, col_offset=38)], lineno=239, col_offset=24), Compare(Name('key', Load(), lineno=239, col_offset=46), [In()], [Name('delimiters', Load(), lineno=239, col_offset=53)], lineno=239, col_offset=46)], lineno=239, col_offset=24)], lineno=239, col_offset=15), [Assign([Subscript(Name('delims', Load(), lineno=240, col_offset=16), Index(Name('key', Load(), lineno=240, col_offset=23)), Store(), lineno=240, col_offset=16)], BinOp(Call(Attribute(Name('delims', Load(), lineno=240, col_offset=30), 'get', Load(), lineno=240, col_offset=30), [Name('key', Load(), lineno=240, col_offset=41), Num(0, lineno=240, col_offset=46)], [], None, None, lineno=240, col_offset=30), Add(), Num(1, lineno=240, col_offset=51), lineno=240, col_offset=30), lineno=240, col_offset=16)], [], lineno=239, col_offset=12), TryExcept([Assign([Name('n', Store(), lineno=242, col_offset=16)], BinOp(Subscript(Attribute(Name('regexp', Load(), lineno=242, col_offset=20), 'groupindex', Load(), lineno=242, col_offset=20), Index(Str('space', lineno=242, col_offset=38)), Load(), lineno=242, col_offset=20), Sub(), Num(1, lineno=242, col_offset=49), lineno=242, col_offset=20), lineno=242, col_offset=16)], [ExceptHandler(Name('KeyError', Load(), lineno=243, col_offset=19), None, [Continue( lineno=244, col_offset=16)], lineno=243, col_offset=12)], [], lineno=241, col_offset=12), If(Subscript(Name('m', Load(), lineno=245, col_offset=15), Index(Name('n', Load(), lineno=245, col_offset=17)), Load(), lineno=245, col_offset=15), [AugAssign(Name('spaces', Store(), lineno=246, col_offset=16), Add(), Num(1, lineno=246, col_offset=26), lineno=246, col_offset=16)], [], lineno=245, col_offset=12)], [], lineno=229, col_offset=8), Assign([Name('quotechar', Store(), lineno=248, col_offset=8)], Call(Name('reduce', Load(), lineno=248, col_offset=20), [Lambda(arguments([Name('a', Param(), lineno=248, col_offset=34), Name('b', Param(), lineno=248, col_offset=37), Name('quotes', Param(), lineno=248, col_offset=40)], None, None, [Name('quotes', Load(), lineno=248, col_offset=49)]), BoolOp(Or(), [BoolOp(And(), [Compare(Subscript(Name('quotes', Load(), lineno=249, col_offset=28), Index(Name('a', Load(), lineno=249, col_offset=35)), Load(), lineno=249, col_offset=28), [Gt()], [Subscript(Name('quotes', Load(), lineno=249, col_offset=40), Index(Name('b', Load(), lineno=249, col_offset=47)), Load(), lineno=249, col_offset=40)], lineno=249, col_offset=28), Name('a', Load(), lineno=249, col_offset=55)], lineno=249, col_offset=27), Name('b', Load(), lineno=249, col_offset=60)], lineno=249, col_offset=27), lineno=248, col_offset=27), Call(Attribute(Name('quotes', Load(), lineno=249, col_offset=63), 'keys', Load(), lineno=249, col_offset=63), [], [], None, None, lineno=249, col_offset=63)], [], None, None, lineno=248, col_offset=20), lineno=248, col_offset=8), If(Name('delims', Load(), lineno=251, col_offset=11), [Assign([Name('delim', Store(), lineno=252, col_offset=12)], Call(Name('reduce', Load(), lineno=252, col_offset=20), [Lambda(arguments([Name('a', Param(), lineno=252, col_offset=34), Name('b', Param(), lineno=252, col_offset=37), Name('delims', Param(), lineno=252, col_offset=40)], None, None, [Name('delims', Load(), lineno=252, col_offset=49)]), BoolOp(Or(), [BoolOp(And(), [Compare(Subscript(Name('delims', Load(), lineno=253, col_offset=28), Index(Name('a', Load(), lineno=253, col_offset=35)), Load(), lineno=253, col_offset=28), [Gt()], [Subscript(Name('delims', Load(), lineno=253, col_offset=40), Index(Name('b', Load(), lineno=253, col_offset=47)), Load(), lineno=253, col_offset=40)], lineno=253, col_offset=28), Name('a', Load(), lineno=253, col_offset=55)], lineno=253, col_offset=27), Name('b', Load(), lineno=253, col_offset=60)], lineno=253, col_offset=27), lineno=252, col_offset=27), Call(Attribute(Name('delims', Load(), lineno=253, col_offset=63), 'keys', Load(), lineno=253, col_offset=63), [], [], None, None, lineno=253, col_offset=63)], [], None, None, lineno=252, col_offset=20), lineno=252, col_offset=12), Assign([Name('skipinitialspace', Store(), lineno=254, col_offset=12)], Compare(Subscript(Name('delims', Load(), lineno=254, col_offset=31), Index(Name('delim', Load(), lineno=254, col_offset=38)), Load(), lineno=254, col_offset=31), [Eq()], [Name('spaces', Load(), lineno=254, col_offset=48)], lineno=254, col_offset=31), lineno=254, col_offset=12), If(Compare(Name('delim', Load(), lineno=255, col_offset=15), [Eq()], [Str('\n', lineno=255, col_offset=24)], lineno=255, col_offset=15), [Assign([Name('delim', Store(), lineno=256, col_offset=16)], Str('', lineno=256, col_offset=24), lineno=256, col_offset=16)], [], lineno=255, col_offset=12)], [Assign([Name('delim', Store(), lineno=259, col_offset=12)], Str('', lineno=259, col_offset=20), lineno=259, col_offset=12), Assign([Name('skipinitialspace', Store(), lineno=260, col_offset=12)], Num(0, lineno=260, col_offset=31), lineno=260, col_offset=12)], lineno=251, col_offset=8), Assign([Name('dq_regexp', Store(), lineno=264, col_offset=8)], Call(Attribute(Name('re', Load(), lineno=264, col_offset=20), 'compile', Load(), lineno=264, col_offset=20), [BinOp(Str('((%(delim)s)|^)\\W*%(quote)s[^%(delim)s\\n]*%(quote)s[^%(delim)s\\n]*%(quote)s\\W*((%(delim)s)|$)', lineno=264, col_offset=31), Mod(), Dict([Str('delim', lineno=265, col_offset=32), Str('quote', lineno=265, col_offset=47)], [Name('delim', Load(), lineno=265, col_offset=40), Name('quotechar', Load(), lineno=265, col_offset=55)], lineno=265, col_offset=31), lineno=264, col_offset=31), Attribute(Name('re', Load(), lineno=265, col_offset=67), 'MULTILINE', Load(), lineno=265, col_offset=67)], [], None, None, lineno=264, col_offset=20), lineno=264, col_offset=8), If(Call(Attribute(Name('dq_regexp', Load(), lineno=269, col_offset=11), 'search', Load(), lineno=269, col_offset=11), [Name('data', Load(), lineno=269, col_offset=28)], [], None, None, lineno=269, col_offset=11), [Assign([Name('doublequote', Store(), lineno=270, col_offset=12)], Name('True', Load(), lineno=270, col_offset=26), lineno=270, col_offset=12)], [Assign([Name('doublequote', Store(), lineno=272, col_offset=12)], Name('False', Load(), lineno=272, col_offset=26), lineno=272, col_offset=12)], lineno=269, col_offset=8), Return(Tuple([Name('quotechar', Load(), lineno=274, col_offset=16), Name('doublequote', Load(), lineno=274, col_offset=27), Name('delim', Load(), lineno=274, col_offset=40), Name('skipinitialspace', Load(), lineno=274, col_offset=47)], Load(), lineno=274, col_offset=16), lineno=274, col_offset=8)], [], lineno=201, col_offset=4), FunctionDef('_guess_delimiter', arguments([Name('self', Param(), lineno=277, col_offset=25), Name('data', Param(), lineno=277, col_offset=31), Name('delimiters', Param(), lineno=277, col_offset=37)], None, None, []), [Expr(Str("\n        The delimiter /should/ occur the same number of times on\n        each row. However, due to malformed data, it may not. We don't want\n        an all or nothing approach, so we allow for small variations in this\n        number.\n          1) build a table of the frequency of each character on every line.\n          2) build a table of freqencies of this frequency (meta-frequency?),\n             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n             7 times in 2 rows'\n          3) use the mode of the meta-frequency to determine the /expected/\n             frequency for that character\n          4) find out how often the character actually meets that goal\n          5) the character that best meets its goal is the delimiter\n        For performance reasons, the data is evaluated in chunks, so it can\n        try and evaluate the smallest portion of the data possible, evaluating\n        additional chunks as necessary.\n        ", lineno=294, col_offset=-1), lineno=294, col_offset=-1), Assign([Name('data', Store(), lineno=296, col_offset=8)], Call(Name('filter', Load(), lineno=296, col_offset=15), [Name('None', Load(), lineno=296, col_offset=22), Call(Attribute(Name('data', Load(), lineno=296, col_offset=28), 'split', Load(), lineno=296, col_offset=28), [Str('\n', lineno=296, col_offset=39)], [], None, None, lineno=296, col_offset=28)], [], None, None, lineno=296, col_offset=15), lineno=296, col_offset=8), Assign([Name('ascii', Store(), lineno=298, col_offset=8)], ListComp(Call(Name('chr', Load(), lineno=298, col_offset=17), [Name('c', Load(), lineno=298, col_offset=21)], [], None, None, lineno=298, col_offset=17), [comprehension(Name('c', Store(), lineno=298, col_offset=28), Call(Name('range', Load(), lineno=298, col_offset=33), [Num(127, lineno=298, col_offset=39)], [], None, None, lineno=298, col_offset=33), [])], lineno=298, col_offset=17), lineno=298, col_offset=8), Assign([Name('chunkLength', Store(), lineno=301, col_offset=8)], Call(Name('min', Load(), lineno=301, col_offset=22), [Num(10, lineno=301, col_offset=26), Call(Name('len', Load(), lineno=301, col_offset=30), [Name('data', Load(), lineno=301, col_offset=34)], [], None, None, lineno=301, col_offset=30)], [], None, None, lineno=301, col_offset=22), lineno=301, col_offset=8), Assign([Name('iteration', Store(), lineno=302, col_offset=8)], Num(0, lineno=302, col_offset=20), lineno=302, col_offset=8), Assign([Name('charFrequency', Store(), lineno=303, col_offset=8)], Dict([], [], lineno=303, col_offset=24), lineno=303, col_offset=8), Assign([Name('modes', Store(), lineno=304, col_offset=8)], Dict([], [], lineno=304, col_offset=16), lineno=304, col_offset=8), Assign([Name('delims', Store(), lineno=305, col_offset=8)], Dict([], [], lineno=305, col_offset=17), lineno=305, col_offset=8), Assign([Tuple([Name('start', Store(), lineno=306, col_offset=8), Name('end', Store(), lineno=306, col_offset=15)], Store(), lineno=306, col_offset=8)], Tuple([Num(0, lineno=306, col_offset=21), Call(Name('min', Load(), lineno=306, col_offset=24), [Name('chunkLength', Load(), lineno=306, col_offset=28), Call(Name('len', Load(), lineno=306, col_offset=41), [Name('data', Load(), lineno=306, col_offset=45)], [], None, None, lineno=306, col_offset=41)], [], None, None, lineno=306, col_offset=24)], Load(), lineno=306, col_offset=21), lineno=306, col_offset=8), While(Compare(Name('start', Load(), lineno=307, col_offset=14), [Lt()], [Call(Name('len', Load(), lineno=307, col_offset=22), [Name('data', Load(), lineno=307, col_offset=26)], [], None, None, lineno=307, col_offset=22)], lineno=307, col_offset=14), [AugAssign(Name('iteration', Store(), lineno=308, col_offset=12), Add(), Num(1, lineno=308, col_offset=25), lineno=308, col_offset=12), For(Name('line', Store(), lineno=309, col_offset=16), Subscript(Name('data', Load(), lineno=309, col_offset=24), Slice(Name('start', Load(), lineno=309, col_offset=29), Name('end', Load(), lineno=309, col_offset=35), None), Load(), lineno=309, col_offset=24), [For(Name('char', Store(), lineno=310, col_offset=20), Name('ascii', Load(), lineno=310, col_offset=28), [Assign([Name('metaFrequency', Store(), lineno=311, col_offset=20)], Call(Attribute(Name('charFrequency', Load(), lineno=311, col_offset=36), 'get', Load(), lineno=311, col_offset=36), [Name('char', Load(), lineno=311, col_offset=54), Dict([], [], lineno=311, col_offset=60)], [], None, None, lineno=311, col_offset=36), lineno=311, col_offset=20), Assign([Name('freq', Store(), lineno=313, col_offset=20)], Call(Attribute(Name('line', Load(), lineno=313, col_offset=27), 'count', Load(), lineno=313, col_offset=27), [Name('char', Load(), lineno=313, col_offset=38)], [], None, None, lineno=313, col_offset=27), lineno=313, col_offset=20), Assign([Subscript(Name('metaFrequency', Load(), lineno=315, col_offset=20), Index(Name('freq', Load(), lineno=315, col_offset=34)), Store(), lineno=315, col_offset=20)], BinOp(Call(Attribute(Name('metaFrequency', Load(), lineno=315, col_offset=42), 'get', Load(), lineno=315, col_offset=42), [Name('freq', Load(), lineno=315, col_offset=60), Num(0, lineno=315, col_offset=66)], [], None, None, lineno=315, col_offset=42), Add(), Num(1, lineno=315, col_offset=71), lineno=315, col_offset=42), lineno=315, col_offset=20), Assign([Subscript(Name('charFrequency', Load(), lineno=316, col_offset=20), Index(Name('char', Load(), lineno=316, col_offset=34)), Store(), lineno=316, col_offset=20)], Name('metaFrequency', Load(), lineno=316, col_offset=42), lineno=316, col_offset=20)], [], lineno=310, col_offset=16)], [], lineno=309, col_offset=12), For(Name('char', Store(), lineno=318, col_offset=16), Call(Attribute(Name('charFrequency', Load(), lineno=318, col_offset=24), 'keys', Load(), lineno=318, col_offset=24), [], [], None, None, lineno=318, col_offset=24), [Assign([Name('items', Store(), lineno=319, col_offset=16)], Call(Attribute(Subscript(Name('charFrequency', Load(), lineno=319, col_offset=24), Index(Name('char', Load(), lineno=319, col_offset=38)), Load(), lineno=319, col_offset=24), 'items', Load(), lineno=319, col_offset=24), [], [], None, None, lineno=319, col_offset=24), lineno=319, col_offset=16), If(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=320, col_offset=19), [Name('items', Load(), lineno=320, col_offset=23)], [], None, None, lineno=320, col_offset=19), [Eq()], [Num(1, lineno=320, col_offset=33)], lineno=320, col_offset=19), Compare(Subscript(Subscript(Name('items', Load(), lineno=320, col_offset=39), Index(Num(0, lineno=320, col_offset=45)), Load(), lineno=320, col_offset=39), Index(Num(0, lineno=320, col_offset=48)), Load(), lineno=320, col_offset=39), [Eq()], [Num(0, lineno=320, col_offset=54)], lineno=320, col_offset=39)], lineno=320, col_offset=19), [Continue( lineno=321, col_offset=20)], [], lineno=320, col_offset=16), If(Compare(Call(Name('len', Load(), lineno=323, col_offset=19), [Name('items', Load(), lineno=323, col_offset=23)], [], None, None, lineno=323, col_offset=19), [Gt()], [Num(1, lineno=323, col_offset=32)], lineno=323, col_offset=19), [Assign([Subscript(Name('modes', Load(), lineno=324, col_offset=20), Index(Name('char', Load(), lineno=324, col_offset=26)), Store(), lineno=324, col_offset=20)], Call(Name('reduce', Load(), lineno=324, col_offset=34), [Lambda(arguments([Name('a', Param(), lineno=324, col_offset=48), Name('b', Param(), lineno=324, col_offset=51)], None, None, []), BoolOp(Or(), [BoolOp(And(), [Compare(Subscript(Name('a', Load(), lineno=324, col_offset=54), Index(Num(1, lineno=324, col_offset=56)), Load(), lineno=324, col_offset=54), [Gt()], [Subscript(Name('b', Load(), lineno=324, col_offset=61), Index(Num(1, lineno=324, col_offset=63)), Load(), lineno=324, col_offset=61)], lineno=324, col_offset=54), Name('a', Load(), lineno=324, col_offset=70)], lineno=324, col_offset=54), Name('b', Load(), lineno=324, col_offset=75)], lineno=324, col_offset=54), lineno=324, col_offset=41), Name('items', Load(), lineno=325, col_offset=41)], [], None, None, lineno=324, col_offset=34), lineno=324, col_offset=20), Expr(Call(Attribute(Name('items', Load(), lineno=328, col_offset=20), 'remove', Load(), lineno=328, col_offset=20), [Subscript(Name('modes', Load(), lineno=328, col_offset=33), Index(Name('char', Load(), lineno=328, col_offset=39)), Load(), lineno=328, col_offset=33)], [], None, None, lineno=328, col_offset=20), lineno=328, col_offset=20), Assign([Subscript(Name('modes', Load(), lineno=329, col_offset=20), Index(Name('char', Load(), lineno=329, col_offset=26)), Store(), lineno=329, col_offset=20)], Tuple([Subscript(Subscript(Name('modes', Load(), lineno=329, col_offset=35), Index(Name('char', Load(), lineno=329, col_offset=41)), Load(), lineno=329, col_offset=35), Index(Num(0, lineno=329, col_offset=47)), Load(), lineno=329, col_offset=35), BinOp(Subscript(Subscript(Name('modes', Load(), lineno=329, col_offset=51), Index(Name('char', Load(), lineno=329, col_offset=57)), Load(), lineno=329, col_offset=51), Index(Num(1, lineno=329, col_offset=63)), Load(), lineno=329, col_offset=51), Sub(), Subscript(Call(Name('reduce', Load(), lineno=330, col_offset=37), [Lambda(arguments([Name('a', Param(), lineno=330, col_offset=51), Name('b', Param(), lineno=330, col_offset=54)], None, None, []), Tuple([Num(0, lineno=330, col_offset=58), BinOp(Subscript(Name('a', Load(), lineno=330, col_offset=61), Index(Num(1, lineno=330, col_offset=63)), Load(), lineno=330, col_offset=61), Add(), Subscript(Name('b', Load(), lineno=330, col_offset=68), Index(Num(1, lineno=330, col_offset=70)), Load(), lineno=330, col_offset=68), lineno=330, col_offset=61)], Load(), lineno=330, col_offset=58), lineno=330, col_offset=44), Name('items', Load(), lineno=331, col_offset=44)], [], None, None, lineno=330, col_offset=37), Index(Num(1, lineno=331, col_offset=51)), Load(), lineno=330, col_offset=37), lineno=329, col_offset=51)], Load(), lineno=329, col_offset=35), lineno=329, col_offset=20)], [Assign([Subscript(Name('modes', Load(), lineno=333, col_offset=20), Index(Name('char', Load(), lineno=333, col_offset=26)), Store(), lineno=333, col_offset=20)], Subscript(Name('items', Load(), lineno=333, col_offset=34), Index(Num(0, lineno=333, col_offset=40)), Load(), lineno=333, col_offset=34), lineno=333, col_offset=20)], lineno=323, col_offset=16)], [], lineno=318, col_offset=12), Assign([Name('modeList', Store(), lineno=336, col_offset=12)], Call(Attribute(Name('modes', Load(), lineno=336, col_offset=23), 'items', Load(), lineno=336, col_offset=23), [], [], None, None, lineno=336, col_offset=23), lineno=336, col_offset=12), Assign([Name('total', Store(), lineno=337, col_offset=12)], Call(Name('float', Load(), lineno=337, col_offset=20), [BinOp(Name('chunkLength', Load(), lineno=337, col_offset=26), Mult(), Name('iteration', Load(), lineno=337, col_offset=40), lineno=337, col_offset=26)], [], None, None, lineno=337, col_offset=20), lineno=337, col_offset=12), Assign([Name('consistency', Store(), lineno=339, col_offset=12)], Num(1.0, lineno=339, col_offset=26), lineno=339, col_offset=12), Assign([Name('threshold', Store(), lineno=341, col_offset=12)], Num(0.9, lineno=341, col_offset=24), lineno=341, col_offset=12), While(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=342, col_offset=18), [Name('delims', Load(), lineno=342, col_offset=22)], [], None, None, lineno=342, col_offset=18), [Eq()], [Num(0, lineno=342, col_offset=33)], lineno=342, col_offset=18), Compare(Name('consistency', Load(), lineno=342, col_offset=39), [GtE()], [Name('threshold', Load(), lineno=342, col_offset=54)], lineno=342, col_offset=39)], lineno=342, col_offset=18), [For(Tuple([Name('k', Store(), lineno=343, col_offset=20), Name('v', Store(), lineno=343, col_offset=23)], Store(), lineno=343, col_offset=20), Name('modeList', Load(), lineno=343, col_offset=28), [If(BoolOp(And(), [Compare(Subscript(Name('v', Load(), lineno=344, col_offset=23), Index(Num(0, lineno=344, col_offset=25)), Load(), lineno=344, col_offset=23), [Gt()], [Num(0, lineno=344, col_offset=30)], lineno=344, col_offset=23), Compare(Subscript(Name('v', Load(), lineno=344, col_offset=36), Index(Num(1, lineno=344, col_offset=38)), Load(), lineno=344, col_offset=36), [Gt()], [Num(0, lineno=344, col_offset=43)], lineno=344, col_offset=36)], lineno=344, col_offset=23), [If(BoolOp(And(), [Compare(BinOp(Subscript(Name('v', Load(), lineno=345, col_offset=29), Index(Num(1, lineno=345, col_offset=31)), Load(), lineno=345, col_offset=29), Div(), Name('total', Load(), lineno=345, col_offset=34), lineno=345, col_offset=29), [GtE()], [Name('consistency', Load(), lineno=345, col_offset=44)], lineno=345, col_offset=28), BoolOp(Or(), [Compare(Name('delimiters', Load(), lineno=346, col_offset=29), [Is()], [Name('None', Load(), lineno=346, col_offset=43)], lineno=346, col_offset=29), Compare(Name('k', Load(), lineno=346, col_offset=51), [In()], [Name('delimiters', Load(), lineno=346, col_offset=56)], lineno=346, col_offset=51)], lineno=346, col_offset=29)], lineno=345, col_offset=28), [Assign([Subscript(Name('delims', Load(), lineno=347, col_offset=28), Index(Name('k', Load(), lineno=347, col_offset=35)), Store(), lineno=347, col_offset=28)], Name('v', Load(), lineno=347, col_offset=40), lineno=347, col_offset=28)], [], lineno=345, col_offset=24)], [], lineno=344, col_offset=20)], [], lineno=343, col_offset=16), AugAssign(Name('consistency', Store(), lineno=348, col_offset=16), Sub(), Num(0.01, lineno=348, col_offset=31), lineno=348, col_offset=16)], [], lineno=342, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=350, col_offset=15), [Name('delims', Load(), lineno=350, col_offset=19)], [], None, None, lineno=350, col_offset=15), [Eq()], [Num(1, lineno=350, col_offset=30)], lineno=350, col_offset=15), [Assign([Name('delim', Store(), lineno=351, col_offset=16)], Subscript(Call(Attribute(Name('delims', Load(), lineno=351, col_offset=24), 'keys', Load(), lineno=351, col_offset=24), [], [], None, None, lineno=351, col_offset=24), Index(Num(0, lineno=351, col_offset=38)), Load(), lineno=351, col_offset=24), lineno=351, col_offset=16), Assign([Name('skipinitialspace', Store(), lineno=352, col_offset=16)], Compare(Call(Attribute(Subscript(Name('data', Load(), lineno=352, col_offset=36), Index(Num(0, lineno=352, col_offset=41)), Load(), lineno=352, col_offset=36), 'count', Load(), lineno=352, col_offset=36), [Name('delim', Load(), lineno=352, col_offset=50)], [], None, None, lineno=352, col_offset=36), [Eq()], [Call(Attribute(Subscript(Name('data', Load(), lineno=353, col_offset=36), Index(Num(0, lineno=353, col_offset=41)), Load(), lineno=353, col_offset=36), 'count', Load(), lineno=353, col_offset=36), [BinOp(Str('%c ', lineno=353, col_offset=50), Mod(), Name('delim', Load(), lineno=353, col_offset=58), lineno=353, col_offset=50)], [], None, None, lineno=353, col_offset=36)], lineno=352, col_offset=36), lineno=352, col_offset=16), Return(Tuple([Name('delim', Load(), lineno=354, col_offset=24), Name('skipinitialspace', Load(), lineno=354, col_offset=31)], Load(), lineno=354, col_offset=24), lineno=354, col_offset=16)], [], lineno=350, col_offset=12), Assign([Name('start', Store(), lineno=357, col_offset=12)], Name('end', Load(), lineno=357, col_offset=20), lineno=357, col_offset=12), AugAssign(Name('end', Store(), lineno=358, col_offset=12), Add(), Name('chunkLength', Load(), lineno=358, col_offset=19), lineno=358, col_offset=12)], [], lineno=307, col_offset=8), If(UnaryOp(Not(), Name('delims', Load(), lineno=360, col_offset=15), lineno=360, col_offset=11), [Return(Tuple([Str('', lineno=361, col_offset=20), Num(0, lineno=361, col_offset=24)], Load(), lineno=361, col_offset=20), lineno=361, col_offset=12)], [], lineno=360, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=364, col_offset=11), [Name('delims', Load(), lineno=364, col_offset=15)], [], None, None, lineno=364, col_offset=11), [Gt()], [Num(1, lineno=364, col_offset=25)], lineno=364, col_offset=11), [For(Name('d', Store(), lineno=365, col_offset=16), Attribute(Name('self', Load(), lineno=365, col_offset=21), 'preferred', Load(), lineno=365, col_offset=21), [If(Compare(Name('d', Load(), lineno=366, col_offset=19), [In()], [Call(Attribute(Name('delims', Load(), lineno=366, col_offset=24), 'keys', Load(), lineno=366, col_offset=24), [], [], None, None, lineno=366, col_offset=24)], lineno=366, col_offset=19), [Assign([Name('skipinitialspace', Store(), lineno=367, col_offset=20)], Compare(Call(Attribute(Subscript(Name('data', Load(), lineno=367, col_offset=40), Index(Num(0, lineno=367, col_offset=45)), Load(), lineno=367, col_offset=40), 'count', Load(), lineno=367, col_offset=40), [Name('d', Load(), lineno=367, col_offset=54)], [], None, None, lineno=367, col_offset=40), [Eq()], [Call(Attribute(Subscript(Name('data', Load(), lineno=368, col_offset=40), Index(Num(0, lineno=368, col_offset=45)), Load(), lineno=368, col_offset=40), 'count', Load(), lineno=368, col_offset=40), [BinOp(Str('%c ', lineno=368, col_offset=54), Mod(), Name('d', Load(), lineno=368, col_offset=62), lineno=368, col_offset=54)], [], None, None, lineno=368, col_offset=40)], lineno=367, col_offset=40), lineno=367, col_offset=20), Return(Tuple([Name('d', Load(), lineno=369, col_offset=28), Name('skipinitialspace', Load(), lineno=369, col_offset=31)], Load(), lineno=369, col_offset=28), lineno=369, col_offset=20)], [], lineno=366, col_offset=16)], [], lineno=365, col_offset=12)], [], lineno=364, col_offset=8), Assign([Name('items', Store(), lineno=373, col_offset=8)], ListComp(Tuple([Name('v', Load(), lineno=373, col_offset=18), Name('k', Load(), lineno=373, col_offset=20)], Load(), lineno=373, col_offset=18), [comprehension(Tuple([Name('k', Store(), lineno=373, col_offset=28), Name('v', Store(), lineno=373, col_offset=30)], Store(), lineno=373, col_offset=28), Call(Attribute(Name('delims', Load(), lineno=373, col_offset=36), 'items', Load(), lineno=373, col_offset=36), [], [], None, None, lineno=373, col_offset=36), [])], lineno=373, col_offset=17), lineno=373, col_offset=8), Expr(Call(Attribute(Name('items', Load(), lineno=374, col_offset=8), 'sort', Load(), lineno=374, col_offset=8), [], [], None, None, lineno=374, col_offset=8), lineno=374, col_offset=8), Assign([Name('delim', Store(), lineno=375, col_offset=8)], Subscript(Subscript(Name('items', Load(), lineno=375, col_offset=16), Index(Num(-1, lineno=375, col_offset=23)), Load(), lineno=375, col_offset=16), Index(Num(1, lineno=375, col_offset=26)), Load(), lineno=375, col_offset=16), lineno=375, col_offset=8), Assign([Name('skipinitialspace', Store(), lineno=377, col_offset=8)], Compare(Call(Attribute(Subscript(Name('data', Load(), lineno=377, col_offset=28), Index(Num(0, lineno=377, col_offset=33)), Load(), lineno=377, col_offset=28), 'count', Load(), lineno=377, col_offset=28), [Name('delim', Load(), lineno=377, col_offset=42)], [], None, None, lineno=377, col_offset=28), [Eq()], [Call(Attribute(Subscript(Name('data', Load(), lineno=378, col_offset=28), Index(Num(0, lineno=378, col_offset=33)), Load(), lineno=378, col_offset=28), 'count', Load(), lineno=378, col_offset=28), [BinOp(Str('%c ', lineno=378, col_offset=42), Mod(), Name('delim', Load(), lineno=378, col_offset=50), lineno=378, col_offset=42)], [], None, None, lineno=378, col_offset=28)], lineno=377, col_offset=28), lineno=377, col_offset=8), Return(Tuple([Name('delim', Load(), lineno=379, col_offset=16), Name('skipinitialspace', Load(), lineno=379, col_offset=23)], Load(), lineno=379, col_offset=16), lineno=379, col_offset=8)], [], lineno=277, col_offset=4), FunctionDef('has_header', arguments([Name('self', Param(), lineno=382, col_offset=19), Name('sample', Param(), lineno=382, col_offset=25)], None, None, []), [Assign([Name('rdr', Store(), lineno=392, col_offset=8)], Call(Name('reader', Load(), lineno=392, col_offset=14), [Call(Name('StringIO', Load(), lineno=392, col_offset=21), [Name('sample', Load(), lineno=392, col_offset=30)], [], None, None, lineno=392, col_offset=21), Call(Attribute(Name('self', Load(), lineno=392, col_offset=39), 'sniff', Load(), lineno=392, col_offset=39), [Name('sample', Load(), lineno=392, col_offset=50)], [], None, None, lineno=392, col_offset=39)], [], None, None, lineno=392, col_offset=14), lineno=392, col_offset=8), Assign([Name('header', Store(), lineno=394, col_offset=8)], Call(Attribute(Name('rdr', Load(), lineno=394, col_offset=17), 'next', Load(), lineno=394, col_offset=17), [], [], None, None, lineno=394, col_offset=17), lineno=394, col_offset=8), Assign([Name('columns', Store(), lineno=396, col_offset=8)], Call(Name('len', Load(), lineno=396, col_offset=18), [Name('header', Load(), lineno=396, col_offset=22)], [], None, None, lineno=396, col_offset=18), lineno=396, col_offset=8), Assign([Name('columnTypes', Store(), lineno=397, col_offset=8)], Dict([], [], lineno=397, col_offset=22), lineno=397, col_offset=8), For(Name('i', Store(), lineno=398, col_offset=12), Call(Name('range', Load(), lineno=398, col_offset=17), [Name('columns', Load(), lineno=398, col_offset=23)], [], None, None, lineno=398, col_offset=17), [Assign([Subscript(Name('columnTypes', Load(), lineno=398, col_offset=33), Index(Name('i', Load(), lineno=398, col_offset=45)), Store(), lineno=398, col_offset=33)], Name('None', Load(), lineno=398, col_offset=50), lineno=398, col_offset=33)], [], lineno=398, col_offset=8), Assign([Name('checked', Store(), lineno=400, col_offset=8)], Num(0, lineno=400, col_offset=18), lineno=400, col_offset=8), For(Name('row', Store(), lineno=401, col_offset=12), Name('rdr', Load(), lineno=401, col_offset=19), [If(Compare(Name('checked', Load(), lineno=403, col_offset=15), [Gt()], [Num(20, lineno=403, col_offset=25)], lineno=403, col_offset=15), [Break( lineno=404, col_offset=16)], [], lineno=403, col_offset=12), AugAssign(Name('checked', Store(), lineno=405, col_offset=12), Add(), Num(1, lineno=405, col_offset=23), lineno=405, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=407, col_offset=15), [Name('row', Load(), lineno=407, col_offset=19)], [], None, None, lineno=407, col_offset=15), [NotEq()], [Name('columns', Load(), lineno=407, col_offset=27)], lineno=407, col_offset=15), [Continue( lineno=408, col_offset=16)], [], lineno=407, col_offset=12), For(Name('col', Store(), lineno=410, col_offset=16), Call(Attribute(Name('columnTypes', Load(), lineno=410, col_offset=23), 'keys', Load(), lineno=410, col_offset=23), [], [], None, None, lineno=410, col_offset=23), [For(Name('thisType', Store(), lineno=412, col_offset=20), List([Name('int', Load(), lineno=412, col_offset=33), Name('long', Load(), lineno=412, col_offset=38), Name('float', Load(), lineno=412, col_offset=44), Name('complex', Load(), lineno=412, col_offset=51)], Load(), lineno=412, col_offset=32), [TryExcept([Expr(Call(Name('thisType', Load(), lineno=414, col_offset=24), [Subscript(Name('row', Load(), lineno=414, col_offset=33), Index(Name('col', Load(), lineno=414, col_offset=37)), Load(), lineno=414, col_offset=33)], [], None, None, lineno=414, col_offset=24), lineno=414, col_offset=24), Break( lineno=415, col_offset=24)], [ExceptHandler(Tuple([Name('ValueError', Load(), lineno=416, col_offset=28), Name('OverflowError', Load(), lineno=416, col_offset=40)], Load(), lineno=416, col_offset=28), None, [Pass( lineno=417, col_offset=24)], lineno=416, col_offset=20)], [], lineno=413, col_offset=20)], [Assign([Name('thisType', Store(), lineno=420, col_offset=20)], Call(Name('len', Load(), lineno=420, col_offset=31), [Subscript(Name('row', Load(), lineno=420, col_offset=35), Index(Name('col', Load(), lineno=420, col_offset=39)), Load(), lineno=420, col_offset=35)], [], None, None, lineno=420, col_offset=31), lineno=420, col_offset=20)], lineno=412, col_offset=16), If(Compare(Name('thisType', Load(), lineno=423, col_offset=19), [Eq()], [Name('long', Load(), lineno=423, col_offset=31)], lineno=423, col_offset=19), [Assign([Name('thisType', Store(), lineno=424, col_offset=20)], Name('int', Load(), lineno=424, col_offset=31), lineno=424, col_offset=20)], [], lineno=423, col_offset=16), If(Compare(Name('thisType', Load(), lineno=426, col_offset=19), [NotEq()], [Subscript(Name('columnTypes', Load(), lineno=426, col_offset=31), Index(Name('col', Load(), lineno=426, col_offset=43)), Load(), lineno=426, col_offset=31)], lineno=426, col_offset=19), [If(Compare(Subscript(Name('columnTypes', Load(), lineno=427, col_offset=23), Index(Name('col', Load(), lineno=427, col_offset=35)), Load(), lineno=427, col_offset=23), [Is()], [Name('None', Load(), lineno=427, col_offset=43)], lineno=427, col_offset=23), [Assign([Subscript(Name('columnTypes', Load(), lineno=428, col_offset=24), Index(Name('col', Load(), lineno=428, col_offset=36)), Store(), lineno=428, col_offset=24)], Name('thisType', Load(), lineno=428, col_offset=43), lineno=428, col_offset=24)], [Delete([Subscript(Name('columnTypes', Load(), lineno=432, col_offset=28), Index(Name('col', Load(), lineno=432, col_offset=40)), Del(), lineno=432, col_offset=28)], lineno=432, col_offset=24)], lineno=427, col_offset=20)], [], lineno=426, col_offset=16)], [], lineno=410, col_offset=12)], [], lineno=401, col_offset=8), Assign([Name('hasHeader', Store(), lineno=436, col_offset=8)], Num(0, lineno=436, col_offset=20), lineno=436, col_offset=8), For(Tuple([Name('col', Store(), lineno=437, col_offset=12), Name('colType', Store(), lineno=437, col_offset=17)], Store(), lineno=437, col_offset=12), Call(Attribute(Name('columnTypes', Load(), lineno=437, col_offset=28), 'items', Load(), lineno=437, col_offset=28), [], [], None, None, lineno=437, col_offset=28), [If(Compare(Call(Name('type', Load(), lineno=438, col_offset=15), [Name('colType', Load(), lineno=438, col_offset=20)], [], None, None, lineno=438, col_offset=15), [Eq()], [Call(Name('type', Load(), lineno=438, col_offset=32), [Num(0, lineno=438, col_offset=37)], [], None, None, lineno=438, col_offset=32)], lineno=438, col_offset=15), [If(Compare(Call(Name('len', Load(), lineno=439, col_offset=19), [Subscript(Name('header', Load(), lineno=439, col_offset=23), Index(Name('col', Load(), lineno=439, col_offset=30)), Load(), lineno=439, col_offset=23)], [], None, None, lineno=439, col_offset=19), [NotEq()], [Name('colType', Load(), lineno=439, col_offset=39)], lineno=439, col_offset=19), [AugAssign(Name('hasHeader', Store(), lineno=440, col_offset=20), Add(), Num(1, lineno=440, col_offset=33), lineno=440, col_offset=20)], [AugAssign(Name('hasHeader', Store(), lineno=442, col_offset=20), Sub(), Num(1, lineno=442, col_offset=33), lineno=442, col_offset=20)], lineno=439, col_offset=16)], [TryExcept([Expr(Call(Name('colType', Load(), lineno=445, col_offset=20), [Subscript(Name('header', Load(), lineno=445, col_offset=28), Index(Name('col', Load(), lineno=445, col_offset=35)), Load(), lineno=445, col_offset=28)], [], None, None, lineno=445, col_offset=20), lineno=445, col_offset=20)], [ExceptHandler(Tuple([Name('ValueError', Load(), lineno=446, col_offset=24), Name('TypeError', Load(), lineno=446, col_offset=36)], Load(), lineno=446, col_offset=24), None, [AugAssign(Name('hasHeader', Store(), lineno=447, col_offset=20), Add(), Num(1, lineno=447, col_offset=33), lineno=447, col_offset=20)], lineno=446, col_offset=16)], [AugAssign(Name('hasHeader', Store(), lineno=449, col_offset=20), Sub(), Num(1, lineno=449, col_offset=33), lineno=449, col_offset=20)], lineno=444, col_offset=16)], lineno=438, col_offset=12)], [], lineno=437, col_offset=8), Return(Compare(Name('hasHeader', Load(), lineno=451, col_offset=15), [Gt()], [Num(0, lineno=451, col_offset=27)], lineno=451, col_offset=15), lineno=451, col_offset=8)], [], lineno=382, col_offset=4)], [], lineno=162, col_offset=0)])
