Module([Expr(Str("A bottom-up tree matching algorithm implementation meant to speed\nup 2to3's matching process. After the tree patterns are reduced to\ntheir rarest linear path, a linear Aho-Corasick automaton is\ncreated. The linear automaton traverses the linear paths from the\nleaves to the root of the AST and returns a set of nodes for further\nmatching. This reduces significantly the number of candidate nodes.", lineno=6, col_offset=-1), lineno=6, col_offset=-1), Assign([Name('__author__', Store(), lineno=8, col_offset=0)], Str('George Boutsioukis <gboutsioukis@gmail.com>', lineno=8, col_offset=13), lineno=8, col_offset=0), Import([alias('logging', None)], lineno=10, col_offset=0), Import([alias('itertools', None)], lineno=11, col_offset=0), ImportFrom('collections', [alias('defaultdict', None)], 0, lineno=12, col_offset=0), ImportFrom(None, [alias('pytree', None)], 1, lineno=14, col_offset=0), ImportFrom('btm_utils', [alias('reduce_tree', None)], 1, lineno=15, col_offset=0), ClassDef('BMNode', [Name('object', Load(), lineno=17, col_offset=13)], [Expr(Str('Class for a node of the Aho-Corasick automaton used in matching', lineno=18, col_offset=4), lineno=18, col_offset=4), Assign([Name('count', Store(), lineno=19, col_offset=4)], Call(Attribute(Name('itertools', Load(), lineno=19, col_offset=12), 'count', Load(), lineno=19, col_offset=12), [], [], None, None, lineno=19, col_offset=12), lineno=19, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=20, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=21, col_offset=8), 'transition_table', Store(), lineno=21, col_offset=8)], Dict([], [], lineno=21, col_offset=32), lineno=21, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=22, col_offset=8), 'fixers', Store(), lineno=22, col_offset=8)], List([], Load(), lineno=22, col_offset=22), lineno=22, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=23, col_offset=8), 'id', Store(), lineno=23, col_offset=8)], Call(Name('next', Load(), lineno=23, col_offset=18), [Attribute(Name('BMNode', Load(), lineno=23, col_offset=23), 'count', Load(), lineno=23, col_offset=23)], [], None, None, lineno=23, col_offset=18), lineno=23, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=24, col_offset=8), 'content', Store(), lineno=24, col_offset=8)], Str('', lineno=24, col_offset=23), lineno=24, col_offset=8)], [], lineno=20, col_offset=4)], [], lineno=17, col_offset=0), ClassDef('BottomMatcher', [Name('object', Load(), lineno=26, col_offset=20)], [Expr(Str('The main matcher class. After instantiating the patterns should\n    be added using the add_fixer method', lineno=28, col_offset=-1), lineno=28, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=30, col_offset=17)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=31, col_offset=8), 'match', Store(), lineno=31, col_offset=8)], Call(Name('set', Load(), lineno=31, col_offset=21), [], [], None, None, lineno=31, col_offset=21), lineno=31, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=32, col_offset=8), 'root', Store(), lineno=32, col_offset=8)], Call(Name('BMNode', Load(), lineno=32, col_offset=20), [], [], None, None, lineno=32, col_offset=20), lineno=32, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'nodes', Store(), lineno=33, col_offset=8)], List([Attribute(Name('self', Load(), lineno=33, col_offset=22), 'root', Load(), lineno=33, col_offset=22)], Load(), lineno=33, col_offset=21), lineno=33, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=34, col_offset=8), 'fixers', Store(), lineno=34, col_offset=8)], List([], Load(), lineno=34, col_offset=22), lineno=34, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'logger', Store(), lineno=35, col_offset=8)], Call(Attribute(Name('logging', Load(), lineno=35, col_offset=22), 'getLogger', Load(), lineno=35, col_offset=22), [Str('RefactoringTool', lineno=35, col_offset=40)], [], None, None, lineno=35, col_offset=22), lineno=35, col_offset=8)], [], lineno=30, col_offset=4), FunctionDef('add_fixer', arguments([Name('self', Param(), lineno=37, col_offset=18), Name('fixer', Param(), lineno=37, col_offset=24)], None, None, []), [Expr(Str("Reduces a fixer's pattern tree to a linear path and adds it\n        to the matcher(a common Aho-Corasick automaton). The fixer is\n        appended on the matching states and called when they are\n        reached", lineno=41, col_offset=-1), lineno=41, col_offset=-1), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=42, col_offset=8), 'fixers', Load(), lineno=42, col_offset=8), 'append', Load(), lineno=42, col_offset=8), [Name('fixer', Load(), lineno=42, col_offset=27)], [], None, None, lineno=42, col_offset=8), lineno=42, col_offset=8), Assign([Name('tree', Store(), lineno=43, col_offset=8)], Call(Name('reduce_tree', Load(), lineno=43, col_offset=15), [Attribute(Name('fixer', Load(), lineno=43, col_offset=27), 'pattern_tree', Load(), lineno=43, col_offset=27)], [], None, None, lineno=43, col_offset=15), lineno=43, col_offset=8), Assign([Name('linear', Store(), lineno=44, col_offset=8)], Call(Attribute(Name('tree', Load(), lineno=44, col_offset=17), 'get_linear_subpattern', Load(), lineno=44, col_offset=17), [], [], None, None, lineno=44, col_offset=17), lineno=44, col_offset=8), Assign([Name('match_nodes', Store(), lineno=45, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=45, col_offset=22), 'add', Load(), lineno=45, col_offset=22), [Name('linear', Load(), lineno=45, col_offset=31)], [keyword('start', Attribute(Name('self', Load(), lineno=45, col_offset=45), 'root', Load(), lineno=45, col_offset=45))], None, None, lineno=45, col_offset=22), lineno=45, col_offset=8), For(Name('match_node', Store(), lineno=46, col_offset=12), Name('match_nodes', Load(), lineno=46, col_offset=26), [Expr(Call(Attribute(Attribute(Name('match_node', Load(), lineno=47, col_offset=12), 'fixers', Load(), lineno=47, col_offset=12), 'append', Load(), lineno=47, col_offset=12), [Name('fixer', Load(), lineno=47, col_offset=37)], [], None, None, lineno=47, col_offset=12), lineno=47, col_offset=12)], [], lineno=46, col_offset=8)], [], lineno=37, col_offset=4), FunctionDef('add', arguments([Name('self', Param(), lineno=49, col_offset=12), Name('pattern', Param(), lineno=49, col_offset=18), Name('start', Param(), lineno=49, col_offset=27)], None, None, []), [Expr(Str('Recursively adds a linear pattern to the AC automaton', lineno=50, col_offset=8), lineno=50, col_offset=8), If(UnaryOp(Not(), Name('pattern', Load(), lineno=52, col_offset=15), lineno=52, col_offset=11), [Return(List([Name('start', Load(), lineno=54, col_offset=20)], Load(), lineno=54, col_offset=19), lineno=54, col_offset=12)], [], lineno=52, col_offset=8), If(Call(Name('isinstance', Load(), lineno=55, col_offset=11), [Subscript(Name('pattern', Load(), lineno=55, col_offset=22), Index(Num(0, lineno=55, col_offset=30)), Load(), lineno=55, col_offset=22), Name('tuple', Load(), lineno=55, col_offset=34)], [], None, None, lineno=55, col_offset=11), [Assign([Name('match_nodes', Store(), lineno=58, col_offset=12)], List([], Load(), lineno=58, col_offset=26), lineno=58, col_offset=12), For(Name('alternative', Store(), lineno=59, col_offset=16), Subscript(Name('pattern', Load(), lineno=59, col_offset=31), Index(Num(0, lineno=59, col_offset=39)), Load(), lineno=59, col_offset=31), [Assign([Name('end_nodes', Store(), lineno=62, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=62, col_offset=28), 'add', Load(), lineno=62, col_offset=28), [Name('alternative', Load(), lineno=62, col_offset=37)], [keyword('start', Name('start', Load(), lineno=62, col_offset=56))], None, None, lineno=62, col_offset=28), lineno=62, col_offset=16), For(Name('end', Store(), lineno=63, col_offset=20), Name('end_nodes', Load(), lineno=63, col_offset=27), [Expr(Call(Attribute(Name('match_nodes', Load(), lineno=64, col_offset=20), 'extend', Load(), lineno=64, col_offset=20), [Call(Attribute(Name('self', Load(), lineno=64, col_offset=39), 'add', Load(), lineno=64, col_offset=39), [Subscript(Name('pattern', Load(), lineno=64, col_offset=48), Slice(Num(1, lineno=64, col_offset=56), None, None), Load(), lineno=64, col_offset=48), Name('end', Load(), lineno=64, col_offset=61)], [], None, None, lineno=64, col_offset=39)], [], None, None, lineno=64, col_offset=20), lineno=64, col_offset=20)], [], lineno=63, col_offset=16)], [], lineno=59, col_offset=12), Return(Name('match_nodes', Load(), lineno=65, col_offset=19), lineno=65, col_offset=12)], [If(Compare(Subscript(Name('pattern', Load(), lineno=69, col_offset=15), Index(Num(0, lineno=69, col_offset=23)), Load(), lineno=69, col_offset=15), [NotIn()], [Attribute(Name('start', Load(), lineno=69, col_offset=33), 'transition_table', Load(), lineno=69, col_offset=33)], lineno=69, col_offset=15), [Assign([Name('next_node', Store(), lineno=71, col_offset=16)], Call(Name('BMNode', Load(), lineno=71, col_offset=28), [], [], None, None, lineno=71, col_offset=28), lineno=71, col_offset=16), Assign([Subscript(Attribute(Name('start', Load(), lineno=72, col_offset=16), 'transition_table', Load(), lineno=72, col_offset=16), Index(Subscript(Name('pattern', Load(), lineno=72, col_offset=39), Index(Num(0, lineno=72, col_offset=47)), Load(), lineno=72, col_offset=39)), Store(), lineno=72, col_offset=16)], Name('next_node', Load(), lineno=72, col_offset=53), lineno=72, col_offset=16)], [Assign([Name('next_node', Store(), lineno=75, col_offset=16)], Subscript(Attribute(Name('start', Load(), lineno=75, col_offset=28), 'transition_table', Load(), lineno=75, col_offset=28), Index(Subscript(Name('pattern', Load(), lineno=75, col_offset=51), Index(Num(0, lineno=75, col_offset=59)), Load(), lineno=75, col_offset=51)), Load(), lineno=75, col_offset=28), lineno=75, col_offset=16)], lineno=69, col_offset=12), If(Subscript(Name('pattern', Load(), lineno=77, col_offset=15), Slice(Num(1, lineno=77, col_offset=23), None, None), Load(), lineno=77, col_offset=15), [Assign([Name('end_nodes', Store(), lineno=78, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=78, col_offset=28), 'add', Load(), lineno=78, col_offset=28), [Subscript(Name('pattern', Load(), lineno=78, col_offset=37), Slice(Num(1, lineno=78, col_offset=45), None, None), Load(), lineno=78, col_offset=37)], [keyword('start', Name('next_node', Load(), lineno=78, col_offset=56))], None, None, lineno=78, col_offset=28), lineno=78, col_offset=16)], [Assign([Name('end_nodes', Store(), lineno=80, col_offset=16)], List([Name('next_node', Load(), lineno=80, col_offset=29)], Load(), lineno=80, col_offset=28), lineno=80, col_offset=16)], lineno=77, col_offset=12), Return(Name('end_nodes', Load(), lineno=81, col_offset=19), lineno=81, col_offset=12)], lineno=55, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('run', arguments([Name('self', Param(), lineno=83, col_offset=12), Name('leaves', Param(), lineno=83, col_offset=18)], None, None, []), [Expr(Str('The main interface with the bottom matcher. The tree is\n        traversed from the bottom using the constructed\n        automaton. Nodes are only checked once as the tree is\n        retraversed. When the automaton fails, we give it one more\n        shot(in case the above tree matches as a whole with the\n        rejected leaf), then we break for the next leaf. There is the\n        special case of multiple arguments(see code comments) where we\n        recheck the nodes\n\n        Args:\n           The leaves of the AST tree to be matched\n\n        Returns:\n           A dictionary of node matches with fixers as the keys\n        ', lineno=98, col_offset=-1), lineno=98, col_offset=-1), Assign([Name('current_ac_node', Store(), lineno=99, col_offset=8)], Attribute(Name('self', Load(), lineno=99, col_offset=26), 'root', Load(), lineno=99, col_offset=26), lineno=99, col_offset=8), Assign([Name('results', Store(), lineno=100, col_offset=8)], Call(Name('defaultdict', Load(), lineno=100, col_offset=18), [Name('list', Load(), lineno=100, col_offset=30)], [], None, None, lineno=100, col_offset=18), lineno=100, col_offset=8), For(Name('leaf', Store(), lineno=101, col_offset=12), Name('leaves', Load(), lineno=101, col_offset=20), [Assign([Name('current_ast_node', Store(), lineno=102, col_offset=12)], Name('leaf', Load(), lineno=102, col_offset=31), lineno=102, col_offset=12), While(Name('current_ast_node', Load(), lineno=103, col_offset=18), [Assign([Attribute(Name('current_ast_node', Load(), lineno=104, col_offset=16), 'was_checked', Store(), lineno=104, col_offset=16)], Name('True', Load(), lineno=104, col_offset=47), lineno=104, col_offset=16), For(Name('child', Store(), lineno=105, col_offset=20), Attribute(Name('current_ast_node', Load(), lineno=105, col_offset=29), 'children', Load(), lineno=105, col_offset=29), [If(BoolOp(And(), [Call(Name('isinstance', Load(), lineno=107, col_offset=23), [Name('child', Load(), lineno=107, col_offset=34), Attribute(Name('pytree', Load(), lineno=107, col_offset=41), 'Leaf', Load(), lineno=107, col_offset=41)], [], None, None, lineno=107, col_offset=23), Compare(Attribute(Name('child', Load(), lineno=107, col_offset=58), 'value', Load(), lineno=107, col_offset=58), [Eq()], [Str(u';', lineno=107, col_offset=73)], lineno=107, col_offset=58)], lineno=107, col_offset=23), [Assign([Attribute(Name('current_ast_node', Load(), lineno=108, col_offset=24), 'was_checked', Store(), lineno=108, col_offset=24)], Name('False', Load(), lineno=108, col_offset=55), lineno=108, col_offset=24), Break( lineno=109, col_offset=24)], [], lineno=107, col_offset=20)], [], lineno=105, col_offset=16), If(Compare(Attribute(Name('current_ast_node', Load(), lineno=110, col_offset=19), 'type', Load(), lineno=110, col_offset=19), [Eq()], [Num(1, lineno=110, col_offset=44)], lineno=110, col_offset=19), [Assign([Name('node_token', Store(), lineno=112, col_offset=20)], Attribute(Name('current_ast_node', Load(), lineno=112, col_offset=33), 'value', Load(), lineno=112, col_offset=33), lineno=112, col_offset=20)], [Assign([Name('node_token', Store(), lineno=114, col_offset=20)], Attribute(Name('current_ast_node', Load(), lineno=114, col_offset=33), 'type', Load(), lineno=114, col_offset=33), lineno=114, col_offset=20)], lineno=110, col_offset=16), If(Compare(Name('node_token', Load(), lineno=116, col_offset=19), [In()], [Attribute(Name('current_ac_node', Load(), lineno=116, col_offset=33), 'transition_table', Load(), lineno=116, col_offset=33)], lineno=116, col_offset=19), [Assign([Name('current_ac_node', Store(), lineno=118, col_offset=20)], Subscript(Attribute(Name('current_ac_node', Load(), lineno=118, col_offset=38), 'transition_table', Load(), lineno=118, col_offset=38), Index(Name('node_token', Load(), lineno=118, col_offset=71)), Load(), lineno=118, col_offset=38), lineno=118, col_offset=20), For(Name('fixer', Store(), lineno=119, col_offset=24), Attribute(Name('current_ac_node', Load(), lineno=119, col_offset=33), 'fixers', Load(), lineno=119, col_offset=33), [If(UnaryOp(Not(), Compare(Name('fixer', Load(), lineno=120, col_offset=31), [In()], [Name('results', Load(), lineno=120, col_offset=40)], lineno=120, col_offset=31), lineno=120, col_offset=27), [Assign([Subscript(Name('results', Load(), lineno=121, col_offset=28), Index(Name('fixer', Load(), lineno=121, col_offset=36)), Store(), lineno=121, col_offset=28)], List([], Load(), lineno=121, col_offset=45), lineno=121, col_offset=28)], [], lineno=120, col_offset=24), Expr(Call(Attribute(Subscript(Name('results', Load(), lineno=122, col_offset=24), Index(Name('fixer', Load(), lineno=122, col_offset=32)), Load(), lineno=122, col_offset=24), 'append', Load(), lineno=122, col_offset=24), [Name('current_ast_node', Load(), lineno=122, col_offset=46)], [], None, None, lineno=122, col_offset=24), lineno=122, col_offset=24)], [], lineno=119, col_offset=20)], [Assign([Name('current_ac_node', Store(), lineno=126, col_offset=20)], Attribute(Name('self', Load(), lineno=126, col_offset=38), 'root', Load(), lineno=126, col_offset=38), lineno=126, col_offset=20), If(BoolOp(And(), [Compare(Attribute(Name('current_ast_node', Load(), lineno=127, col_offset=24), 'parent', Load(), lineno=127, col_offset=24), [IsNot()], [Name('None', Load(), lineno=127, col_offset=55)], lineno=127, col_offset=24), Attribute(Attribute(Name('current_ast_node', Load(), lineno=128, col_offset=28), 'parent', Load(), lineno=128, col_offset=28), 'was_checked', Load(), lineno=128, col_offset=28)], lineno=127, col_offset=24), [Break( lineno=130, col_offset=24)], [], lineno=127, col_offset=20), If(Compare(Name('node_token', Load(), lineno=133, col_offset=23), [In()], [Attribute(Name('current_ac_node', Load(), lineno=133, col_offset=37), 'transition_table', Load(), lineno=133, col_offset=37)], lineno=133, col_offset=23), [Assign([Name('current_ac_node', Store(), lineno=135, col_offset=24)], Subscript(Attribute(Name('current_ac_node', Load(), lineno=135, col_offset=42), 'transition_table', Load(), lineno=135, col_offset=42), Index(Name('node_token', Load(), lineno=135, col_offset=75)), Load(), lineno=135, col_offset=42), lineno=135, col_offset=24), For(Name('fixer', Store(), lineno=136, col_offset=28), Attribute(Name('current_ac_node', Load(), lineno=136, col_offset=37), 'fixers', Load(), lineno=136, col_offset=37), [If(UnaryOp(Not(), Compare(Name('fixer', Load(), lineno=137, col_offset=35), [In()], [Call(Attribute(Name('results', Load(), lineno=137, col_offset=44), 'keys', Load(), lineno=137, col_offset=44), [], [], None, None, lineno=137, col_offset=44)], lineno=137, col_offset=35), lineno=137, col_offset=31), [Assign([Subscript(Name('results', Load(), lineno=138, col_offset=32), Index(Name('fixer', Load(), lineno=138, col_offset=40)), Store(), lineno=138, col_offset=32)], List([], Load(), lineno=138, col_offset=49), lineno=138, col_offset=32)], [], lineno=137, col_offset=28), Expr(Call(Attribute(Subscript(Name('results', Load(), lineno=139, col_offset=28), Index(Name('fixer', Load(), lineno=139, col_offset=36)), Load(), lineno=139, col_offset=28), 'append', Load(), lineno=139, col_offset=28), [Name('current_ast_node', Load(), lineno=139, col_offset=50)], [], None, None, lineno=139, col_offset=28), lineno=139, col_offset=28)], [], lineno=136, col_offset=24)], [], lineno=133, col_offset=20)], lineno=116, col_offset=16), Assign([Name('current_ast_node', Store(), lineno=141, col_offset=16)], Attribute(Name('current_ast_node', Load(), lineno=141, col_offset=35), 'parent', Load(), lineno=141, col_offset=35), lineno=141, col_offset=16)], [], lineno=103, col_offset=12)], [], lineno=101, col_offset=8), Return(Name('results', Load(), lineno=142, col_offset=15), lineno=142, col_offset=8)], [], lineno=83, col_offset=4), FunctionDef('print_ac', arguments([Name('self', Param(), lineno=144, col_offset=17)], None, None, []), [Expr(Str('Prints a graphviz diagram of the BM automaton(for debugging)', lineno=145, col_offset=8), lineno=145, col_offset=8), Print(None, [Str('digraph g{', lineno=146, col_offset=14)], True, lineno=146, col_offset=8), FunctionDef('print_node', arguments([Name('node', Param(), lineno=147, col_offset=23)], None, None, []), [For(Name('subnode_key', Store(), lineno=148, col_offset=16), Call(Attribute(Attribute(Name('node', Load(), lineno=148, col_offset=31), 'transition_table', Load(), lineno=148, col_offset=31), 'keys', Load(), lineno=148, col_offset=31), [], [], None, None, lineno=148, col_offset=31), [Assign([Name('subnode', Store(), lineno=149, col_offset=16)], Subscript(Attribute(Name('node', Load(), lineno=149, col_offset=26), 'transition_table', Load(), lineno=149, col_offset=26), Index(Name('subnode_key', Load(), lineno=149, col_offset=48)), Load(), lineno=149, col_offset=26), lineno=149, col_offset=16), Print(None, [BinOp(Str('%d -> %d [label=%s] //%s', lineno=150, col_offset=22), Mod(), Tuple([Attribute(Name('node', Load(), lineno=151, col_offset=23), 'id', Load(), lineno=151, col_offset=23), Attribute(Name('subnode', Load(), lineno=151, col_offset=32), 'id', Load(), lineno=151, col_offset=32), Call(Name('type_repr', Load(), lineno=151, col_offset=44), [Name('subnode_key', Load(), lineno=151, col_offset=54)], [], None, None, lineno=151, col_offset=44), Call(Name('str', Load(), lineno=151, col_offset=68), [Attribute(Name('subnode', Load(), lineno=151, col_offset=72), 'fixers', Load(), lineno=151, col_offset=72)], [], None, None, lineno=151, col_offset=68)], Load(), lineno=151, col_offset=23), lineno=150, col_offset=22)], True, lineno=150, col_offset=16), If(Compare(Name('subnode_key', Load(), lineno=152, col_offset=19), [Eq()], [Num(1, lineno=152, col_offset=34)], lineno=152, col_offset=19), [Print(None, [Attribute(Name('subnode', Load(), lineno=153, col_offset=26), 'content', Load(), lineno=153, col_offset=26)], True, lineno=153, col_offset=20)], [], lineno=152, col_offset=16), Expr(Call(Name('print_node', Load(), lineno=154, col_offset=16), [Name('subnode', Load(), lineno=154, col_offset=27)], [], None, None, lineno=154, col_offset=16), lineno=154, col_offset=16)], [], lineno=148, col_offset=12)], [], lineno=147, col_offset=8), Expr(Call(Name('print_node', Load(), lineno=155, col_offset=8), [Attribute(Name('self', Load(), lineno=155, col_offset=19), 'root', Load(), lineno=155, col_offset=19)], [], None, None, lineno=155, col_offset=8), lineno=155, col_offset=8), Print(None, [Str('}', lineno=156, col_offset=14)], True, lineno=156, col_offset=8)], [], lineno=144, col_offset=4)], [], lineno=26, col_offset=0), Assign([Name('_type_reprs', Store(), lineno=159, col_offset=0)], Dict([], [], lineno=159, col_offset=14), lineno=159, col_offset=0), FunctionDef('type_repr', arguments([Name('type_num', Param(), lineno=160, col_offset=14)], None, None, []), [Global(['_type_reprs'], lineno=161, col_offset=4), If(UnaryOp(Not(), Name('_type_reprs', Load(), lineno=162, col_offset=11), lineno=162, col_offset=7), [ImportFrom('pygram', [alias('python_symbols', None)], 1, lineno=163, col_offset=8), For(Tuple([Name('name', Store(), lineno=166, col_offset=12), Name('val', Store(), lineno=166, col_offset=18)], Store(), lineno=166, col_offset=12), Call(Attribute(Attribute(Name('python_symbols', Load(), lineno=166, col_offset=25), '__dict__', Load(), lineno=166, col_offset=25), 'items', Load(), lineno=166, col_offset=25), [], [], None, None, lineno=166, col_offset=25), [If(Compare(Call(Name('type', Load(), lineno=167, col_offset=15), [Name('val', Load(), lineno=167, col_offset=20)], [], None, None, lineno=167, col_offset=15), [Eq()], [Name('int', Load(), lineno=167, col_offset=28)], lineno=167, col_offset=15), [Assign([Subscript(Name('_type_reprs', Load(), lineno=167, col_offset=33), Index(Name('val', Load(), lineno=167, col_offset=45)), Store(), lineno=167, col_offset=33)], Name('name', Load(), lineno=167, col_offset=52), lineno=167, col_offset=33)], [], lineno=167, col_offset=12)], [], lineno=166, col_offset=8)], [], lineno=162, col_offset=4), Return(Call(Attribute(Name('_type_reprs', Load(), lineno=168, col_offset=11), 'setdefault', Load(), lineno=168, col_offset=11), [Name('type_num', Load(), lineno=168, col_offset=34), Name('type_num', Load(), lineno=168, col_offset=44)], [], None, None, lineno=168, col_offset=11), lineno=168, col_offset=4)], [], lineno=160, col_offset=0)])
