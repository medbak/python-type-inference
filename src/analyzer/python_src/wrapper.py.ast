Module([Expr(Str('curses.wrapper\n\nContains one function, wrapper(), which runs another function which\nshould be the rest of your curses-based application.  If the\napplication raises an exception, wrapper() will restore the terminal\nto a sane state so you can read the resulting traceback.\n\n', lineno=8, col_offset=-1), lineno=8, col_offset=-1), Import([alias('curses', None)], lineno=10, col_offset=0), FunctionDef('wrapper', arguments([Name('func', Param(), lineno=12, col_offset=12)], 'args', 'kwds', []), [Expr(Str("Wrapper function that initializes curses and calls another function,\n    restoring normal keyboard/screen behavior on error.\n    The callable object 'func' is then passed the main window 'stdscr'\n    as its first argument, followed by any other arguments passed to\n    wrapper().\n    ", lineno=18, col_offset=-1), lineno=18, col_offset=-1), TryFinally([Assign([Name('stdscr', Store(), lineno=22, col_offset=8)], Call(Attribute(Name('curses', Load(), lineno=22, col_offset=17), 'initscr', Load(), lineno=22, col_offset=17), [], [], None, None, lineno=22, col_offset=17), lineno=22, col_offset=8), Expr(Call(Attribute(Name('curses', Load(), lineno=26, col_offset=8), 'noecho', Load(), lineno=26, col_offset=8), [], [], None, None, lineno=26, col_offset=8), lineno=26, col_offset=8), Expr(Call(Attribute(Name('curses', Load(), lineno=27, col_offset=8), 'cbreak', Load(), lineno=27, col_offset=8), [], [], None, None, lineno=27, col_offset=8), lineno=27, col_offset=8), Expr(Call(Attribute(Name('stdscr', Load(), lineno=32, col_offset=8), 'keypad', Load(), lineno=32, col_offset=8), [Num(1, lineno=32, col_offset=22)], [], None, None, lineno=32, col_offset=8), lineno=32, col_offset=8), TryExcept([Expr(Call(Attribute(Name('curses', Load(), lineno=39, col_offset=12), 'start_color', Load(), lineno=39, col_offset=12), [], [], None, None, lineno=39, col_offset=12), lineno=39, col_offset=12)], [ExceptHandler(None, None, [Pass( lineno=41, col_offset=12)], lineno=40, col_offset=8)], [], lineno=38, col_offset=8), Return(Call(Name('func', Load(), lineno=43, col_offset=15), [Name('stdscr', Load(), lineno=43, col_offset=20)], [], Name('args', Load(), lineno=43, col_offset=29), Name('kwds', Load(), lineno=43, col_offset=37), lineno=43, col_offset=15), lineno=43, col_offset=8)], [Expr(Call(Attribute(Name('stdscr', Load(), lineno=46, col_offset=8), 'keypad', Load(), lineno=46, col_offset=8), [Num(0, lineno=46, col_offset=22)], [], None, None, lineno=46, col_offset=8), lineno=46, col_offset=8), Expr(Call(Attribute(Name('curses', Load(), lineno=47, col_offset=8), 'echo', Load(), lineno=47, col_offset=8), [], [], None, None, lineno=47, col_offset=8), lineno=47, col_offset=8), Expr(Call(Attribute(Name('curses', Load(), lineno=48, col_offset=8), 'nocbreak', Load(), lineno=48, col_offset=8), [], [], None, None, lineno=48, col_offset=8), lineno=48, col_offset=8), Expr(Call(Attribute(Name('curses', Load(), lineno=49, col_offset=8), 'endwin', Load(), lineno=49, col_offset=8), [], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8)], lineno=20, col_offset=4)], [], lineno=12, col_offset=0)])
