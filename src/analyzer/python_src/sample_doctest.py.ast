Module([Expr(Str("This is a sample module that doesn't really test anything all that\n   interesting.\n\nIt simply has a few tests, some of which succeed and some of which fail.\n\nIt's important that the numbers remain constant as another test is\ntesting the running of these tests.\n\n\n>>> 2+2\n4\n", lineno=12, col_offset=-1), lineno=12, col_offset=-1), FunctionDef('foo', arguments([], None, None, []), [Expr(Str('\n\n    >>> 2+2\n    5\n\n    >>> 2+2\n    4\n    ', lineno=23, col_offset=-1), lineno=23, col_offset=-1)], [], lineno=15, col_offset=0), FunctionDef('bar', arguments([], None, None, []), [Expr(Str('\n\n    >>> 2+2\n    4\n    ', lineno=30, col_offset=-1), lineno=30, col_offset=-1)], [], lineno=25, col_offset=0), FunctionDef('test_silly_setup', arguments([], None, None, []), [Expr(Str('\n\n    >>> import test.test_doctest\n    >>> test.test_doctest.sillySetup\n    True\n    ', lineno=38, col_offset=-1), lineno=38, col_offset=-1)], [], lineno=32, col_offset=0), FunctionDef('w_blank', arguments([], None, None, []), [Expr(Str("\n    >>> if 1:\n    ...    print 'a'\n    ...    print\n    ...    print 'b'\n    a\n    <BLANKLINE>\n    b\n    ", lineno=49, col_offset=-1), lineno=49, col_offset=-1)], [], lineno=40, col_offset=0), Assign([Name('x', Store(), lineno=51, col_offset=0)], Num(1, lineno=51, col_offset=4), lineno=51, col_offset=0), FunctionDef('x_is_one', arguments([], None, None, []), [Expr(Str('\n    >>> x\n    1\n    ', lineno=56, col_offset=-1), lineno=56, col_offset=-1)], [], lineno=52, col_offset=0), FunctionDef('y_is_one', arguments([], None, None, []), [Expr(Str('\n    >>> y\n    1\n    ', lineno=62, col_offset=-1), lineno=62, col_offset=-1)], [], lineno=58, col_offset=0), Assign([Name('__test__', Store(), lineno=64, col_offset=0)], Dict([Str('good', lineno=64, col_offset=12), Str('bad', lineno=68, col_offset=12)], [Str('\n                    >>> 42\n                    42\n                    ', lineno=67, col_offset=-1), Str('\n                    >>> 42\n                    666\n                    ', lineno=71, col_offset=-1)], lineno=64, col_offset=11), lineno=64, col_offset=0), FunctionDef('test_suite', arguments([], None, None, []), [Import([alias('doctest', None)], lineno=75, col_offset=4), Return(Call(Attribute(Name('doctest', Load(), lineno=76, col_offset=11), 'DocTestSuite', Load(), lineno=76, col_offset=11), [], [], None, None, lineno=76, col_offset=11), lineno=76, col_offset=4)], [], lineno=74, col_offset=0)])
