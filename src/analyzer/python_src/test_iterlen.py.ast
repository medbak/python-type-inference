Module([Expr(Str(" Test Iterator Length Transparency\n\nSome functions or methods which accept general iterable arguments have\noptional, more efficient code paths if they know how many items to expect.\nFor instance, map(func, iterable), will pre-allocate the exact amount of\nspace required whenever the iterable can report its length.\n\nThe desired invariant is:  len(it)==len(list(it)).\n\nA complication is that an iterable and iterator can be the same object. To\nmaintain the invariant, an iterator needs to dynamically update its length.\nFor instance, an iterable such as xrange(10) always reports its length as ten,\nbut it=iter(xrange(10)) starts at ten, and then goes to nine after it.next().\nHaving this capability means that map() can ignore the distinction between\nmap(func, iterable) and map(func, iter(iterable)).\n\nWhen the iterable is immutable, the implementation can straight-forwardly\nreport the original length minus the cumulative number of calls to next().\nThis is the case for tuples, xrange objects, and itertools.repeat().\n\nSome containers become temporarily immutable during iteration.  This includes\ndicts, sets, and collections.deque.  Their implementation is equally simple\nthough they need to permantently set their length to zero whenever there is\nan attempt to iterate after a length mutation.\n\nThe situation slightly more involved whenever an object allows length mutation\nduring iteration.  Lists and sequence iterators are dynanamically updatable.\nSo, if a list is extended during iteration, the iterator will continue through\nthe new items.  If it shrinks to a point before the most recent iteration,\nthen no further items are available and the length is reported at zero.\n\nReversed objects can also be wrapped around mutable objects; however, any\nappends after the current position are ignored.  Any other approach leads\nto confusion and possibly returning the same item more than once.\n\nThe iterators not listed above, such as enumerate and the other itertools,\nare not length transparent because they have no way to distinguish between\niterables that report static length and iterators whose length changes with\neach call (i.e. the difference between enumerate('abc') and\nenumerate(iter('abc')).\n\n", lineno=42, col_offset=-1), lineno=42, col_offset=-1), Import([alias('unittest', None)], lineno=44, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=45, col_offset=0), ImportFrom('itertools', [alias('repeat', None)], 0, lineno=46, col_offset=0), ImportFrom('collections', [alias('deque', None)], 0, lineno=47, col_offset=0), ImportFrom('__builtin__', [alias('len', '_len')], 0, lineno=48, col_offset=0), Assign([Name('n', Store(), lineno=50, col_offset=0)], Num(10, lineno=50, col_offset=4), lineno=50, col_offset=0), FunctionDef('len', arguments([Name('obj', Param(), lineno=52, col_offset=8)], None, None, []), [TryExcept([Return(Call(Name('_len', Load(), lineno=54, col_offset=15), [Name('obj', Load(), lineno=54, col_offset=20)], [], None, None, lineno=54, col_offset=15), lineno=54, col_offset=8)], [ExceptHandler(Name('TypeError', Load(), lineno=55, col_offset=11), None, [TryExcept([Return(Call(Attribute(Name('obj', Load(), lineno=59, col_offset=19), '__length_hint__', Load(), lineno=59, col_offset=19), [], [], None, None, lineno=59, col_offset=19), lineno=59, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=60, col_offset=15), None, [Raise(Name('TypeError', Load(), lineno=61, col_offset=18), None, None, lineno=61, col_offset=12)], lineno=60, col_offset=8)], [], lineno=56, col_offset=8)], lineno=55, col_offset=4)], [], lineno=53, col_offset=4)], [], lineno=52, col_offset=0), ClassDef('TestInvariantWithoutMutations', [Attribute(Name('unittest', Load(), lineno=63, col_offset=36), 'TestCase', Load(), lineno=63, col_offset=36)], [FunctionDef('test_invariant', arguments([Name('self', Param(), lineno=65, col_offset=23)], None, None, []), [Assign([Name('it', Store(), lineno=66, col_offset=8)], Attribute(Name('self', Load(), lineno=66, col_offset=13), 'it', Load(), lineno=66, col_offset=13), lineno=66, col_offset=8), For(Name('i', Store(), lineno=67, col_offset=12), Call(Name('reversed', Load(), lineno=67, col_offset=17), [Call(Name('xrange', Load(), lineno=67, col_offset=26), [Num(1, lineno=67, col_offset=33), BinOp(Name('n', Load(), lineno=67, col_offset=36), Add(), Num(1, lineno=67, col_offset=38), lineno=67, col_offset=36)], [], None, None, lineno=67, col_offset=26)], [], None, None, lineno=67, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=12), 'assertEqual', Load(), lineno=68, col_offset=12), [Call(Name('len', Load(), lineno=68, col_offset=29), [Name('it', Load(), lineno=68, col_offset=33)], [], None, None, lineno=68, col_offset=29), Name('i', Load(), lineno=68, col_offset=38)], [], None, None, lineno=68, col_offset=12), lineno=68, col_offset=12), Expr(Call(Attribute(Name('it', Load(), lineno=69, col_offset=12), 'next', Load(), lineno=69, col_offset=12), [], [], None, None, lineno=69, col_offset=12), lineno=69, col_offset=12)], [], lineno=67, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'assertEqual', Load(), lineno=70, col_offset=8), [Call(Name('len', Load(), lineno=70, col_offset=25), [Name('it', Load(), lineno=70, col_offset=29)], [], None, None, lineno=70, col_offset=25), Num(0, lineno=70, col_offset=34)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=71, col_offset=8), 'assertRaises', Load(), lineno=71, col_offset=8), [Name('StopIteration', Load(), lineno=71, col_offset=26), Attribute(Name('it', Load(), lineno=71, col_offset=41), 'next', Load(), lineno=71, col_offset=41)], [], None, None, lineno=71, col_offset=8), lineno=71, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=72, col_offset=8), 'assertEqual', Load(), lineno=72, col_offset=8), [Call(Name('len', Load(), lineno=72, col_offset=25), [Name('it', Load(), lineno=72, col_offset=29)], [], None, None, lineno=72, col_offset=25), Num(0, lineno=72, col_offset=34)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8)], [], lineno=65, col_offset=4)], [], lineno=63, col_offset=0), ClassDef('TestTemporarilyImmutable', [Name('TestInvariantWithoutMutations', Load(), lineno=74, col_offset=31)], [FunctionDef('test_immutable_during_iteration', arguments([Name('self', Param(), lineno=76, col_offset=40)], None, None, []), [Assign([Name('it', Store(), lineno=80, col_offset=8)], Attribute(Name('self', Load(), lineno=80, col_offset=13), 'it', Load(), lineno=80, col_offset=13), lineno=80, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=81, col_offset=8), 'assertEqual', Load(), lineno=81, col_offset=8), [Call(Name('len', Load(), lineno=81, col_offset=25), [Name('it', Load(), lineno=81, col_offset=29)], [], None, None, lineno=81, col_offset=25), Name('n', Load(), lineno=81, col_offset=34)], [], None, None, lineno=81, col_offset=8), lineno=81, col_offset=8), Expr(Call(Attribute(Name('it', Load(), lineno=82, col_offset=8), 'next', Load(), lineno=82, col_offset=8), [], [], None, None, lineno=82, col_offset=8), lineno=82, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=83, col_offset=8), 'assertEqual', Load(), lineno=83, col_offset=8), [Call(Name('len', Load(), lineno=83, col_offset=25), [Name('it', Load(), lineno=83, col_offset=29)], [], None, None, lineno=83, col_offset=25), BinOp(Name('n', Load(), lineno=83, col_offset=34), Sub(), Num(1, lineno=83, col_offset=36), lineno=83, col_offset=34)], [], None, None, lineno=83, col_offset=8), lineno=83, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=84, col_offset=8), 'mutate', Load(), lineno=84, col_offset=8), [], [], None, None, lineno=84, col_offset=8), lineno=84, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=8), 'assertRaises', Load(), lineno=85, col_offset=8), [Name('RuntimeError', Load(), lineno=85, col_offset=26), Attribute(Name('it', Load(), lineno=85, col_offset=40), 'next', Load(), lineno=85, col_offset=40)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=86, col_offset=8), 'assertEqual', Load(), lineno=86, col_offset=8), [Call(Name('len', Load(), lineno=86, col_offset=25), [Name('it', Load(), lineno=86, col_offset=29)], [], None, None, lineno=86, col_offset=25), Num(0, lineno=86, col_offset=34)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8)], [], lineno=76, col_offset=4)], [], lineno=74, col_offset=0), ClassDef('TestRepeat', [Name('TestInvariantWithoutMutations', Load(), lineno=90, col_offset=17)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=92, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=93, col_offset=8), 'it', Store(), lineno=93, col_offset=8)], Call(Name('repeat', Load(), lineno=93, col_offset=18), [Name('None', Load(), lineno=93, col_offset=25), Name('n', Load(), lineno=93, col_offset=31)], [], None, None, lineno=93, col_offset=18), lineno=93, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('test_no_len_for_infinite_repeat', arguments([Name('self', Param(), lineno=95, col_offset=40)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=97, col_offset=8), 'assertRaises', Load(), lineno=97, col_offset=8), [Name('TypeError', Load(), lineno=97, col_offset=26), Name('len', Load(), lineno=97, col_offset=37), Call(Name('repeat', Load(), lineno=97, col_offset=42), [Name('None', Load(), lineno=97, col_offset=49)], [], None, None, lineno=97, col_offset=42)], [], None, None, lineno=97, col_offset=8), lineno=97, col_offset=8)], [], lineno=95, col_offset=4)], [], lineno=90, col_offset=0), ClassDef('TestXrange', [Name('TestInvariantWithoutMutations', Load(), lineno=99, col_offset=17)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=101, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=102, col_offset=8), 'it', Store(), lineno=102, col_offset=8)], Call(Name('iter', Load(), lineno=102, col_offset=18), [Call(Name('xrange', Load(), lineno=102, col_offset=23), [Name('n', Load(), lineno=102, col_offset=30)], [], None, None, lineno=102, col_offset=23)], [], None, None, lineno=102, col_offset=18), lineno=102, col_offset=8)], [], lineno=101, col_offset=4)], [], lineno=99, col_offset=0), ClassDef('TestXrangeCustomReversed', [Name('TestInvariantWithoutMutations', Load(), lineno=104, col_offset=31)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=106, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=107, col_offset=8), 'it', Store(), lineno=107, col_offset=8)], Call(Name('reversed', Load(), lineno=107, col_offset=18), [Call(Name('xrange', Load(), lineno=107, col_offset=27), [Name('n', Load(), lineno=107, col_offset=34)], [], None, None, lineno=107, col_offset=27)], [], None, None, lineno=107, col_offset=18), lineno=107, col_offset=8)], [], lineno=106, col_offset=4)], [], lineno=104, col_offset=0), ClassDef('TestTuple', [Name('TestInvariantWithoutMutations', Load(), lineno=109, col_offset=16)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=111, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=112, col_offset=8), 'it', Store(), lineno=112, col_offset=8)], Call(Name('iter', Load(), lineno=112, col_offset=18), [Call(Name('tuple', Load(), lineno=112, col_offset=23), [Call(Name('xrange', Load(), lineno=112, col_offset=29), [Name('n', Load(), lineno=112, col_offset=36)], [], None, None, lineno=112, col_offset=29)], [], None, None, lineno=112, col_offset=23)], [], None, None, lineno=112, col_offset=18), lineno=112, col_offset=8)], [], lineno=111, col_offset=4)], [], lineno=109, col_offset=0), ClassDef('TestDeque', [Name('TestTemporarilyImmutable', Load(), lineno=116, col_offset=16)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=118, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=119, col_offset=8)], Call(Name('deque', Load(), lineno=119, col_offset=12), [Call(Name('xrange', Load(), lineno=119, col_offset=18), [Name('n', Load(), lineno=119, col_offset=25)], [], None, None, lineno=119, col_offset=18)], [], None, None, lineno=119, col_offset=12), lineno=119, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=120, col_offset=8), 'it', Store(), lineno=120, col_offset=8)], Call(Name('iter', Load(), lineno=120, col_offset=18), [Name('d', Load(), lineno=120, col_offset=23)], [], None, None, lineno=120, col_offset=18), lineno=120, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=121, col_offset=8), 'mutate', Store(), lineno=121, col_offset=8)], Attribute(Name('d', Load(), lineno=121, col_offset=22), 'pop', Load(), lineno=121, col_offset=22), lineno=121, col_offset=8)], [], lineno=118, col_offset=4)], [], lineno=116, col_offset=0), ClassDef('TestDequeReversed', [Name('TestTemporarilyImmutable', Load(), lineno=123, col_offset=24)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=125, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=126, col_offset=8)], Call(Name('deque', Load(), lineno=126, col_offset=12), [Call(Name('xrange', Load(), lineno=126, col_offset=18), [Name('n', Load(), lineno=126, col_offset=25)], [], None, None, lineno=126, col_offset=18)], [], None, None, lineno=126, col_offset=12), lineno=126, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=127, col_offset=8), 'it', Store(), lineno=127, col_offset=8)], Call(Name('reversed', Load(), lineno=127, col_offset=18), [Name('d', Load(), lineno=127, col_offset=27)], [], None, None, lineno=127, col_offset=18), lineno=127, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=128, col_offset=8), 'mutate', Store(), lineno=128, col_offset=8)], Attribute(Name('d', Load(), lineno=128, col_offset=22), 'pop', Load(), lineno=128, col_offset=22), lineno=128, col_offset=8)], [], lineno=125, col_offset=4)], [], lineno=123, col_offset=0), ClassDef('TestDictKeys', [Name('TestTemporarilyImmutable', Load(), lineno=130, col_offset=19)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=132, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=133, col_offset=8)], Call(Attribute(Name('dict', Load(), lineno=133, col_offset=12), 'fromkeys', Load(), lineno=133, col_offset=12), [Call(Name('xrange', Load(), lineno=133, col_offset=26), [Name('n', Load(), lineno=133, col_offset=33)], [], None, None, lineno=133, col_offset=26)], [], None, None, lineno=133, col_offset=12), lineno=133, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=134, col_offset=8), 'it', Store(), lineno=134, col_offset=8)], Call(Name('iter', Load(), lineno=134, col_offset=18), [Name('d', Load(), lineno=134, col_offset=23)], [], None, None, lineno=134, col_offset=18), lineno=134, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=135, col_offset=8), 'mutate', Store(), lineno=135, col_offset=8)], Attribute(Name('d', Load(), lineno=135, col_offset=22), 'popitem', Load(), lineno=135, col_offset=22), lineno=135, col_offset=8)], [], lineno=132, col_offset=4)], [], lineno=130, col_offset=0), ClassDef('TestDictItems', [Name('TestTemporarilyImmutable', Load(), lineno=137, col_offset=20)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=139, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=140, col_offset=8)], Call(Attribute(Name('dict', Load(), lineno=140, col_offset=12), 'fromkeys', Load(), lineno=140, col_offset=12), [Call(Name('xrange', Load(), lineno=140, col_offset=26), [Name('n', Load(), lineno=140, col_offset=33)], [], None, None, lineno=140, col_offset=26)], [], None, None, lineno=140, col_offset=12), lineno=140, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=141, col_offset=8), 'it', Store(), lineno=141, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=141, col_offset=18), 'iteritems', Load(), lineno=141, col_offset=18), [], [], None, None, lineno=141, col_offset=18), lineno=141, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=142, col_offset=8), 'mutate', Store(), lineno=142, col_offset=8)], Attribute(Name('d', Load(), lineno=142, col_offset=22), 'popitem', Load(), lineno=142, col_offset=22), lineno=142, col_offset=8)], [], lineno=139, col_offset=4)], [], lineno=137, col_offset=0), ClassDef('TestDictValues', [Name('TestTemporarilyImmutable', Load(), lineno=144, col_offset=21)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=146, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=147, col_offset=8)], Call(Attribute(Name('dict', Load(), lineno=147, col_offset=12), 'fromkeys', Load(), lineno=147, col_offset=12), [Call(Name('xrange', Load(), lineno=147, col_offset=26), [Name('n', Load(), lineno=147, col_offset=33)], [], None, None, lineno=147, col_offset=26)], [], None, None, lineno=147, col_offset=12), lineno=147, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=148, col_offset=8), 'it', Store(), lineno=148, col_offset=8)], Call(Attribute(Name('d', Load(), lineno=148, col_offset=18), 'itervalues', Load(), lineno=148, col_offset=18), [], [], None, None, lineno=148, col_offset=18), lineno=148, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=149, col_offset=8), 'mutate', Store(), lineno=149, col_offset=8)], Attribute(Name('d', Load(), lineno=149, col_offset=22), 'popitem', Load(), lineno=149, col_offset=22), lineno=149, col_offset=8)], [], lineno=146, col_offset=4)], [], lineno=144, col_offset=0), ClassDef('TestSet', [Name('TestTemporarilyImmutable', Load(), lineno=151, col_offset=14)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=153, col_offset=14)], None, None, []), [Assign([Name('d', Store(), lineno=154, col_offset=8)], Call(Name('set', Load(), lineno=154, col_offset=12), [Call(Name('xrange', Load(), lineno=154, col_offset=16), [Name('n', Load(), lineno=154, col_offset=23)], [], None, None, lineno=154, col_offset=16)], [], None, None, lineno=154, col_offset=12), lineno=154, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=155, col_offset=8), 'it', Store(), lineno=155, col_offset=8)], Call(Name('iter', Load(), lineno=155, col_offset=18), [Name('d', Load(), lineno=155, col_offset=23)], [], None, None, lineno=155, col_offset=18), lineno=155, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=156, col_offset=8), 'mutate', Store(), lineno=156, col_offset=8)], Attribute(Name('d', Load(), lineno=156, col_offset=22), 'pop', Load(), lineno=156, col_offset=22), lineno=156, col_offset=8)], [], lineno=153, col_offset=4)], [], lineno=151, col_offset=0), ClassDef('TestList', [Name('TestInvariantWithoutMutations', Load(), lineno=160, col_offset=15)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=162, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=163, col_offset=8), 'it', Store(), lineno=163, col_offset=8)], Call(Name('iter', Load(), lineno=163, col_offset=18), [Call(Name('range', Load(), lineno=163, col_offset=23), [Name('n', Load(), lineno=163, col_offset=29)], [], None, None, lineno=163, col_offset=23)], [], None, None, lineno=163, col_offset=18), lineno=163, col_offset=8)], [], lineno=162, col_offset=4), FunctionDef('test_mutation', arguments([Name('self', Param(), lineno=165, col_offset=22)], None, None, []), [Assign([Name('d', Store(), lineno=166, col_offset=8)], Call(Name('range', Load(), lineno=166, col_offset=12), [Name('n', Load(), lineno=166, col_offset=18)], [], None, None, lineno=166, col_offset=12), lineno=166, col_offset=8), Assign([Name('it', Store(), lineno=167, col_offset=8)], Call(Name('iter', Load(), lineno=167, col_offset=13), [Name('d', Load(), lineno=167, col_offset=18)], [], None, None, lineno=167, col_offset=13), lineno=167, col_offset=8), Expr(Call(Attribute(Name('it', Load(), lineno=168, col_offset=8), 'next', Load(), lineno=168, col_offset=8), [], [], None, None, lineno=168, col_offset=8), lineno=168, col_offset=8), Expr(Call(Attribute(Name('it', Load(), lineno=169, col_offset=8), 'next', Load(), lineno=169, col_offset=8), [], [], None, None, lineno=169, col_offset=8), lineno=169, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=170, col_offset=8), 'assertEqual', Load(), lineno=170, col_offset=8), [Call(Name('len', Load(), lineno=170, col_offset=25), [Name('it', Load(), lineno=170, col_offset=29)], [], None, None, lineno=170, col_offset=25), BinOp(Name('n', Load(), lineno=170, col_offset=34), Sub(), Num(2, lineno=170, col_offset=36), lineno=170, col_offset=34)], [], None, None, lineno=170, col_offset=8), lineno=170, col_offset=8), Expr(Call(Attribute(Name('d', Load(), lineno=171, col_offset=8), 'append', Load(), lineno=171, col_offset=8), [Name('n', Load(), lineno=171, col_offset=17)], [], None, None, lineno=171, col_offset=8), lineno=171, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=172, col_offset=8), 'assertEqual', Load(), lineno=172, col_offset=8), [Call(Name('len', Load(), lineno=172, col_offset=25), [Name('it', Load(), lineno=172, col_offset=29)], [], None, None, lineno=172, col_offset=25), BinOp(Name('n', Load(), lineno=172, col_offset=34), Sub(), Num(1, lineno=172, col_offset=36), lineno=172, col_offset=34)], [], None, None, lineno=172, col_offset=8), lineno=172, col_offset=8), Assign([Subscript(Name('d', Load(), lineno=173, col_offset=8), Slice(Num(1, lineno=173, col_offset=10), None, None), Store(), lineno=173, col_offset=8)], List([], Load(), lineno=173, col_offset=16), lineno=173, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=174, col_offset=8), 'assertEqual', Load(), lineno=174, col_offset=8), [Call(Name('len', Load(), lineno=174, col_offset=25), [Name('it', Load(), lineno=174, col_offset=29)], [], None, None, lineno=174, col_offset=25), Num(0, lineno=174, col_offset=34)], [], None, None, lineno=174, col_offset=8), lineno=174, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=175, col_offset=8), 'assertEqual', Load(), lineno=175, col_offset=8), [Call(Name('list', Load(), lineno=175, col_offset=25), [Name('it', Load(), lineno=175, col_offset=30)], [], None, None, lineno=175, col_offset=25), List([], Load(), lineno=175, col_offset=35)], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8), Expr(Call(Attribute(Name('d', Load(), lineno=176, col_offset=8), 'extend', Load(), lineno=176, col_offset=8), [Call(Name('xrange', Load(), lineno=176, col_offset=17), [Num(20, lineno=176, col_offset=24)], [], None, None, lineno=176, col_offset=17)], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=8), 'assertEqual', Load(), lineno=177, col_offset=8), [Call(Name('len', Load(), lineno=177, col_offset=25), [Name('it', Load(), lineno=177, col_offset=29)], [], None, None, lineno=177, col_offset=25), Num(0, lineno=177, col_offset=34)], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8)], [], lineno=165, col_offset=4)], [], lineno=160, col_offset=0), ClassDef('TestListReversed', [Name('TestInvariantWithoutMutations', Load(), lineno=179, col_offset=23)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=181, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=182, col_offset=8), 'it', Store(), lineno=182, col_offset=8)], Call(Name('reversed', Load(), lineno=182, col_offset=18), [Call(Name('range', Load(), lineno=182, col_offset=27), [Name('n', Load(), lineno=182, col_offset=33)], [], None, None, lineno=182, col_offset=27)], [], None, None, lineno=182, col_offset=18), lineno=182, col_offset=8)], [], lineno=181, col_offset=4), FunctionDef('test_mutation', arguments([Name('self', Param(), lineno=184, col_offset=22)], None, None, []), [Assign([Name('d', Store(), lineno=185, col_offset=8)], Call(Name('range', Load(), lineno=185, col_offset=12), [Name('n', Load(), lineno=185, col_offset=18)], [], None, None, lineno=185, col_offset=12), lineno=185, col_offset=8), Assign([Name('it', Store(), lineno=186, col_offset=8)], Call(Name('reversed', Load(), lineno=186, col_offset=13), [Name('d', Load(), lineno=186, col_offset=22)], [], None, None, lineno=186, col_offset=13), lineno=186, col_offset=8), Expr(Call(Attribute(Name('it', Load(), lineno=187, col_offset=8), 'next', Load(), lineno=187, col_offset=8), [], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=8), Expr(Call(Attribute(Name('it', Load(), lineno=188, col_offset=8), 'next', Load(), lineno=188, col_offset=8), [], [], None, None, lineno=188, col_offset=8), lineno=188, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=189, col_offset=8), 'assertEqual', Load(), lineno=189, col_offset=8), [Call(Name('len', Load(), lineno=189, col_offset=25), [Name('it', Load(), lineno=189, col_offset=29)], [], None, None, lineno=189, col_offset=25), BinOp(Name('n', Load(), lineno=189, col_offset=34), Sub(), Num(2, lineno=189, col_offset=36), lineno=189, col_offset=34)], [], None, None, lineno=189, col_offset=8), lineno=189, col_offset=8), Expr(Call(Attribute(Name('d', Load(), lineno=190, col_offset=8), 'append', Load(), lineno=190, col_offset=8), [Name('n', Load(), lineno=190, col_offset=17)], [], None, None, lineno=190, col_offset=8), lineno=190, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=191, col_offset=8), 'assertEqual', Load(), lineno=191, col_offset=8), [Call(Name('len', Load(), lineno=191, col_offset=25), [Name('it', Load(), lineno=191, col_offset=29)], [], None, None, lineno=191, col_offset=25), BinOp(Name('n', Load(), lineno=191, col_offset=34), Sub(), Num(2, lineno=191, col_offset=36), lineno=191, col_offset=34)], [], None, None, lineno=191, col_offset=8), lineno=191, col_offset=8), Assign([Subscript(Name('d', Load(), lineno=192, col_offset=8), Slice(Num(1, lineno=192, col_offset=10), None, None), Store(), lineno=192, col_offset=8)], List([], Load(), lineno=192, col_offset=16), lineno=192, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=193, col_offset=8), 'assertEqual', Load(), lineno=193, col_offset=8), [Call(Name('len', Load(), lineno=193, col_offset=25), [Name('it', Load(), lineno=193, col_offset=29)], [], None, None, lineno=193, col_offset=25), Num(0, lineno=193, col_offset=34)], [], None, None, lineno=193, col_offset=8), lineno=193, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=194, col_offset=8), 'assertEqual', Load(), lineno=194, col_offset=8), [Call(Name('list', Load(), lineno=194, col_offset=25), [Name('it', Load(), lineno=194, col_offset=30)], [], None, None, lineno=194, col_offset=25), List([], Load(), lineno=194, col_offset=35)], [], None, None, lineno=194, col_offset=8), lineno=194, col_offset=8), Expr(Call(Attribute(Name('d', Load(), lineno=195, col_offset=8), 'extend', Load(), lineno=195, col_offset=8), [Call(Name('xrange', Load(), lineno=195, col_offset=17), [Num(20, lineno=195, col_offset=24)], [], None, None, lineno=195, col_offset=17)], [], None, None, lineno=195, col_offset=8), lineno=195, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=196, col_offset=8), 'assertEqual', Load(), lineno=196, col_offset=8), [Call(Name('len', Load(), lineno=196, col_offset=25), [Name('it', Load(), lineno=196, col_offset=29)], [], None, None, lineno=196, col_offset=25), Num(0, lineno=196, col_offset=34)], [], None, None, lineno=196, col_offset=8), lineno=196, col_offset=8)], [], lineno=184, col_offset=4)], [], lineno=179, col_offset=0), ClassDef('BadLen', [Name('object', Load(), lineno=201, col_offset=13)], [FunctionDef('__iter__', arguments([Name('self', Param(), lineno=202, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=202, col_offset=31), [Call(Name('range', Load(), lineno=202, col_offset=36), [Num(10, lineno=202, col_offset=42)], [], None, None, lineno=202, col_offset=36)], [], None, None, lineno=202, col_offset=31), lineno=202, col_offset=24)], [], lineno=202, col_offset=4), FunctionDef('__len__', arguments([Name('self', Param(), lineno=203, col_offset=16)], None, None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=204, col_offset=14), [Str('hello', lineno=204, col_offset=27)], [], None, None, lineno=204, col_offset=14), None, None, lineno=204, col_offset=8)], [], lineno=203, col_offset=4)], [], lineno=201, col_offset=0), ClassDef('BadLengthHint', [Name('object', Load(), lineno=206, col_offset=20)], [FunctionDef('__iter__', arguments([Name('self', Param(), lineno=207, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=207, col_offset=31), [Call(Name('range', Load(), lineno=207, col_offset=36), [Num(10, lineno=207, col_offset=42)], [], None, None, lineno=207, col_offset=36)], [], None, None, lineno=207, col_offset=31), lineno=207, col_offset=24)], [], lineno=207, col_offset=4), FunctionDef('__length_hint__', arguments([Name('self', Param(), lineno=208, col_offset=24)], None, None, []), [Raise(Call(Name('RuntimeError', Load(), lineno=209, col_offset=14), [Str('hello', lineno=209, col_offset=27)], [], None, None, lineno=209, col_offset=14), None, None, lineno=209, col_offset=8)], [], lineno=208, col_offset=4)], [], lineno=206, col_offset=0), ClassDef('NoneLengthHint', [Name('object', Load(), lineno=211, col_offset=21)], [FunctionDef('__iter__', arguments([Name('self', Param(), lineno=212, col_offset=17)], None, None, []), [Return(Call(Name('iter', Load(), lineno=212, col_offset=31), [Call(Name('range', Load(), lineno=212, col_offset=36), [Num(10, lineno=212, col_offset=42)], [], None, None, lineno=212, col_offset=36)], [], None, None, lineno=212, col_offset=31), lineno=212, col_offset=24)], [], lineno=212, col_offset=4), FunctionDef('__length_hint__', arguments([Name('self', Param(), lineno=213, col_offset=24)], None, None, []), [Return(Name('None', Load(), lineno=214, col_offset=15), lineno=214, col_offset=8)], [], lineno=213, col_offset=4)], [], lineno=211, col_offset=0), ClassDef('TestLengthHintExceptions', [Attribute(Name('unittest', Load(), lineno=216, col_offset=31), 'TestCase', Load(), lineno=216, col_offset=31)], [FunctionDef('test_issue1242657', arguments([Name('self', Param(), lineno=218, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=219, col_offset=8), 'assertRaises', Load(), lineno=219, col_offset=8), [Name('RuntimeError', Load(), lineno=219, col_offset=26), Name('list', Load(), lineno=219, col_offset=40), Call(Name('BadLen', Load(), lineno=219, col_offset=46), [], [], None, None, lineno=219, col_offset=46)], [], None, None, lineno=219, col_offset=8), lineno=219, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=220, col_offset=8), 'assertRaises', Load(), lineno=220, col_offset=8), [Name('RuntimeError', Load(), lineno=220, col_offset=26), Name('list', Load(), lineno=220, col_offset=40), Call(Name('BadLengthHint', Load(), lineno=220, col_offset=46), [], [], None, None, lineno=220, col_offset=46)], [], None, None, lineno=220, col_offset=8), lineno=220, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=221, col_offset=8), 'assertRaises', Load(), lineno=221, col_offset=8), [Name('RuntimeError', Load(), lineno=221, col_offset=26), Attribute(List([], Load(), lineno=221, col_offset=40), 'extend', Load(), lineno=221, col_offset=40), Call(Name('BadLen', Load(), lineno=221, col_offset=51), [], [], None, None, lineno=221, col_offset=51)], [], None, None, lineno=221, col_offset=8), lineno=221, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=222, col_offset=8), 'assertRaises', Load(), lineno=222, col_offset=8), [Name('RuntimeError', Load(), lineno=222, col_offset=26), Attribute(List([], Load(), lineno=222, col_offset=40), 'extend', Load(), lineno=222, col_offset=40), Call(Name('BadLengthHint', Load(), lineno=222, col_offset=51), [], [], None, None, lineno=222, col_offset=51)], [], None, None, lineno=222, col_offset=8), lineno=222, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=223, col_offset=8), 'assertRaises', Load(), lineno=223, col_offset=8), [Name('RuntimeError', Load(), lineno=223, col_offset=26), Name('zip', Load(), lineno=223, col_offset=40), Call(Name('BadLen', Load(), lineno=223, col_offset=45), [], [], None, None, lineno=223, col_offset=45)], [], None, None, lineno=223, col_offset=8), lineno=223, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=224, col_offset=8), 'assertRaises', Load(), lineno=224, col_offset=8), [Name('RuntimeError', Load(), lineno=224, col_offset=26), Name('zip', Load(), lineno=224, col_offset=40), Call(Name('BadLengthHint', Load(), lineno=224, col_offset=45), [], [], None, None, lineno=224, col_offset=45)], [], None, None, lineno=224, col_offset=8), lineno=224, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=225, col_offset=8), 'assertRaises', Load(), lineno=225, col_offset=8), [Name('RuntimeError', Load(), lineno=225, col_offset=26), Name('filter', Load(), lineno=225, col_offset=40), Name('None', Load(), lineno=225, col_offset=48), Call(Name('BadLen', Load(), lineno=225, col_offset=54), [], [], None, None, lineno=225, col_offset=54)], [], None, None, lineno=225, col_offset=8), lineno=225, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=226, col_offset=8), 'assertRaises', Load(), lineno=226, col_offset=8), [Name('RuntimeError', Load(), lineno=226, col_offset=26), Name('filter', Load(), lineno=226, col_offset=40), Name('None', Load(), lineno=226, col_offset=48), Call(Name('BadLengthHint', Load(), lineno=226, col_offset=54), [], [], None, None, lineno=226, col_offset=54)], [], None, None, lineno=226, col_offset=8), lineno=226, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=227, col_offset=8), 'assertRaises', Load(), lineno=227, col_offset=8), [Name('RuntimeError', Load(), lineno=227, col_offset=26), Name('map', Load(), lineno=227, col_offset=40), Name('chr', Load(), lineno=227, col_offset=45), Call(Name('BadLen', Load(), lineno=227, col_offset=50), [], [], None, None, lineno=227, col_offset=50)], [], None, None, lineno=227, col_offset=8), lineno=227, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=228, col_offset=8), 'assertRaises', Load(), lineno=228, col_offset=8), [Name('RuntimeError', Load(), lineno=228, col_offset=26), Name('map', Load(), lineno=228, col_offset=40), Name('chr', Load(), lineno=228, col_offset=45), Call(Name('BadLengthHint', Load(), lineno=228, col_offset=50), [], [], None, None, lineno=228, col_offset=50)], [], None, None, lineno=228, col_offset=8), lineno=228, col_offset=8), Assign([Name('b', Store(), lineno=229, col_offset=8)], Call(Name('bytearray', Load(), lineno=229, col_offset=12), [Call(Name('range', Load(), lineno=229, col_offset=22), [Num(10, lineno=229, col_offset=28)], [], None, None, lineno=229, col_offset=22)], [], None, None, lineno=229, col_offset=12), lineno=229, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=230, col_offset=8), 'assertRaises', Load(), lineno=230, col_offset=8), [Name('RuntimeError', Load(), lineno=230, col_offset=26), Attribute(Name('b', Load(), lineno=230, col_offset=40), 'extend', Load(), lineno=230, col_offset=40), Call(Name('BadLen', Load(), lineno=230, col_offset=50), [], [], None, None, lineno=230, col_offset=50)], [], None, None, lineno=230, col_offset=8), lineno=230, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=231, col_offset=8), 'assertRaises', Load(), lineno=231, col_offset=8), [Name('RuntimeError', Load(), lineno=231, col_offset=26), Attribute(Name('b', Load(), lineno=231, col_offset=40), 'extend', Load(), lineno=231, col_offset=40), Call(Name('BadLengthHint', Load(), lineno=231, col_offset=50), [], [], None, None, lineno=231, col_offset=50)], [], None, None, lineno=231, col_offset=8), lineno=231, col_offset=8)], [], lineno=218, col_offset=4), FunctionDef('test_invalid_hint', arguments([Name('self', Param(), lineno=233, col_offset=26)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=235, col_offset=8), 'assertEqual', Load(), lineno=235, col_offset=8), [Call(Name('list', Load(), lineno=235, col_offset=25), [Call(Name('NoneLengthHint', Load(), lineno=235, col_offset=30), [], [], None, None, lineno=235, col_offset=30)], [], None, None, lineno=235, col_offset=25), Call(Name('list', Load(), lineno=235, col_offset=49), [Call(Name('range', Load(), lineno=235, col_offset=54), [Num(10, lineno=235, col_offset=60)], [], None, None, lineno=235, col_offset=54)], [], None, None, lineno=235, col_offset=49)], [], None, None, lineno=235, col_offset=8), lineno=235, col_offset=8)], [], lineno=233, col_offset=4)], [], lineno=216, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Assign([Name('unittests', Store(), lineno=239, col_offset=4)], List([Name('TestRepeat', Load(), lineno=240, col_offset=8), Name('TestXrange', Load(), lineno=241, col_offset=8), Name('TestXrangeCustomReversed', Load(), lineno=242, col_offset=8), Name('TestTuple', Load(), lineno=243, col_offset=8), Name('TestDeque', Load(), lineno=244, col_offset=8), Name('TestDequeReversed', Load(), lineno=245, col_offset=8), Name('TestDictKeys', Load(), lineno=246, col_offset=8), Name('TestDictItems', Load(), lineno=247, col_offset=8), Name('TestDictValues', Load(), lineno=248, col_offset=8), Name('TestSet', Load(), lineno=249, col_offset=8), Name('TestList', Load(), lineno=250, col_offset=8), Name('TestListReversed', Load(), lineno=251, col_offset=8), Name('TestLengthHintExceptions', Load(), lineno=252, col_offset=8)], Load(), lineno=239, col_offset=16), lineno=239, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=254, col_offset=4), 'run_unittest', Load(), lineno=254, col_offset=4), [], [], Name('unittests', Load(), lineno=254, col_offset=31), None, lineno=254, col_offset=4), lineno=254, col_offset=4)], [], lineno=238, col_offset=0), If(Compare(Name('__name__', Load(), lineno=256, col_offset=3), [Eq()], [Str('__main__', lineno=256, col_offset=15)], lineno=256, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=257, col_offset=4), [], [], None, None, lineno=257, col_offset=4), lineno=257, col_offset=4)], [], lineno=256, col_offset=0)])
