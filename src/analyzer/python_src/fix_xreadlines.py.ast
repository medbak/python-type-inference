Module([Expr(Str('Fix "for x in f.xreadlines()" -> "for x in f".\n\nThis fixer will also convert g(f.xreadlines) into g(f.__iter__).', lineno=3, col_offset=-1), lineno=3, col_offset=-1), ImportFrom(None, [alias('fixer_base', None)], 2, lineno=7, col_offset=0), ImportFrom('fixer_util', [alias('Name', None)], 2, lineno=8, col_offset=0), ClassDef('FixXreadlines', [Attribute(Name('fixer_base', Load(), lineno=11, col_offset=20), 'BaseFix', Load(), lineno=11, col_offset=20)], [Assign([Name('BM_compatible', Store(), lineno=12, col_offset=4)], Name('True', Load(), lineno=12, col_offset=20), lineno=12, col_offset=4), Assign([Name('PATTERN', Store(), lineno=13, col_offset=4)], Str("\n    power< call=any+ trailer< '.' 'xreadlines' > trailer< '(' ')' > >\n    |\n    power< any+ trailer< '.' no_call='xreadlines' > >\n    ", lineno=17, col_offset=-1), lineno=13, col_offset=4), FunctionDef('transform', arguments([Name('self', Param(), lineno=19, col_offset=18), Name('node', Param(), lineno=19, col_offset=24), Name('results', Param(), lineno=19, col_offset=30)], None, None, []), [Assign([Name('no_call', Store(), lineno=20, col_offset=8)], Call(Attribute(Name('results', Load(), lineno=20, col_offset=18), 'get', Load(), lineno=20, col_offset=18), [Str('no_call', lineno=20, col_offset=30)], [], None, None, lineno=20, col_offset=18), lineno=20, col_offset=8), If(Name('no_call', Load(), lineno=22, col_offset=11), [Expr(Call(Attribute(Name('no_call', Load(), lineno=23, col_offset=12), 'replace', Load(), lineno=23, col_offset=12), [Call(Name('Name', Load(), lineno=23, col_offset=28), [Str(u'__iter__', lineno=23, col_offset=33)], [keyword('prefix', Attribute(Name('no_call', Load(), lineno=23, col_offset=53), 'prefix', Load(), lineno=23, col_offset=53))], None, None, lineno=23, col_offset=28)], [], None, None, lineno=23, col_offset=12), lineno=23, col_offset=12)], [Expr(Call(Attribute(Name('node', Load(), lineno=25, col_offset=12), 'replace', Load(), lineno=25, col_offset=12), [ListComp(Call(Attribute(Name('x', Load(), lineno=25, col_offset=26), 'clone', Load(), lineno=25, col_offset=26), [], [], None, None, lineno=25, col_offset=26), [comprehension(Name('x', Store(), lineno=25, col_offset=40), Subscript(Name('results', Load(), lineno=25, col_offset=45), Index(Str('call', lineno=25, col_offset=53)), Load(), lineno=25, col_offset=45), [])], lineno=25, col_offset=26)], [], None, None, lineno=25, col_offset=12), lineno=25, col_offset=12)], lineno=22, col_offset=8)], [], lineno=19, col_offset=4)], [], lineno=11, col_offset=0)])
