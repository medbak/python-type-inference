Module([Import([alias('sys', None)], lineno=14, col_offset=0), Import([alias('cgi', None)], lineno=15, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=17, col_offset=0), ImportFrom('test.test_support', [alias('findfile', None)], 0, lineno=18, col_offset=0), ImportFrom('xml.etree', [alias('ElementTree', 'ET')], 0, lineno=20, col_offset=0), Assign([Name('SIMPLE_XMLFILE', Store(), lineno=22, col_offset=0)], Call(Name('findfile', Load(), lineno=22, col_offset=17), [Str('simple.xml', lineno=22, col_offset=26)], [keyword('subdir', Str('xmltestdata', lineno=22, col_offset=47))], None, None, lineno=22, col_offset=17), lineno=22, col_offset=0), Assign([Name('SIMPLE_NS_XMLFILE', Store(), lineno=23, col_offset=0)], Call(Name('findfile', Load(), lineno=23, col_offset=20), [Str('simple-ns.xml', lineno=23, col_offset=29)], [keyword('subdir', Str('xmltestdata', lineno=23, col_offset=53))], None, None, lineno=23, col_offset=20), lineno=23, col_offset=0), Assign([Name('SAMPLE_XML', Store(), lineno=25, col_offset=0)], Str("<body>\n  <tag class='a'>text</tag>\n  <tag class='b' />\n  <section>\n    <tag class='b' id='inner'>subtext</tag>\n  </section>\n</body>\n", lineno=33, col_offset=-1), lineno=25, col_offset=0), Assign([Name('SAMPLE_SECTION', Store(), lineno=35, col_offset=0)], Str("<section>\n  <tag class='b' id='inner'>subtext</tag>\n  <nexttag />\n  <nextsection>\n    <tag />\n  </nextsection>\n</section>\n", lineno=43, col_offset=-1), lineno=35, col_offset=0), Assign([Name('SAMPLE_XML_NS', Store(), lineno=45, col_offset=0)], Str('\n<body xmlns="http://effbot.org/ns">\n  <tag>text</tag>\n  <tag />\n  <section>\n    <tag>subtext</tag>\n  </section>\n</body>\n', lineno=53, col_offset=-1), lineno=45, col_offset=0), FunctionDef('sanity', arguments([], None, None, []), [Expr(Str('\n    Import sanity.\n\n    >>> from xml.etree import ElementTree\n    >>> from xml.etree import ElementInclude\n    >>> from xml.etree import ElementPath\n    ', lineno=63, col_offset=-1), lineno=63, col_offset=-1)], [], lineno=56, col_offset=0), FunctionDef('check_method', arguments([Name('method', Param(), lineno=65, col_offset=17)], None, None, []), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=66, col_offset=11), [Name('method', Load(), lineno=66, col_offset=19), Str('__call__', lineno=66, col_offset=27)], [], None, None, lineno=66, col_offset=11), lineno=66, col_offset=7), [Print(None, [Name('method', Load(), lineno=67, col_offset=14), Str('not callable', lineno=67, col_offset=22)], True, lineno=67, col_offset=8)], [], lineno=66, col_offset=4)], [], lineno=65, col_offset=0), FunctionDef('serialize', arguments([Name('elem', Param(), lineno=69, col_offset=14), Name('to_string', Param(), lineno=69, col_offset=20)], None, 'options', [Name('True', Load(), lineno=69, col_offset=30)]), [Import([alias('StringIO', None)], lineno=70, col_offset=4), Assign([Name('file', Store(), lineno=71, col_offset=4)], Call(Attribute(Name('StringIO', Load(), lineno=71, col_offset=11), 'StringIO', Load(), lineno=71, col_offset=11), [], [], None, None, lineno=71, col_offset=11), lineno=71, col_offset=4), Assign([Name('tree', Store(), lineno=72, col_offset=4)], Call(Attribute(Name('ET', Load(), lineno=72, col_offset=11), 'ElementTree', Load(), lineno=72, col_offset=11), [Name('elem', Load(), lineno=72, col_offset=26)], [], None, None, lineno=72, col_offset=11), lineno=72, col_offset=4), Expr(Call(Attribute(Name('tree', Load(), lineno=73, col_offset=4), 'write', Load(), lineno=73, col_offset=4), [Name('file', Load(), lineno=73, col_offset=15)], [], None, Name('options', Load(), lineno=73, col_offset=23), lineno=73, col_offset=4), lineno=73, col_offset=4), If(Name('to_string', Load(), lineno=74, col_offset=7), [Return(Call(Attribute(Name('file', Load(), lineno=75, col_offset=15), 'getvalue', Load(), lineno=75, col_offset=15), [], [], None, None, lineno=75, col_offset=15), lineno=75, col_offset=8)], [Expr(Call(Attribute(Name('file', Load(), lineno=77, col_offset=8), 'seek', Load(), lineno=77, col_offset=8), [Num(0, lineno=77, col_offset=18)], [], None, None, lineno=77, col_offset=8), lineno=77, col_offset=8), Return(Name('file', Load(), lineno=78, col_offset=15), lineno=78, col_offset=8)], lineno=74, col_offset=4)], [], lineno=69, col_offset=0), FunctionDef('summarize', arguments([Name('elem', Param(), lineno=80, col_offset=14)], None, None, []), [If(Compare(Attribute(Name('elem', Load(), lineno=81, col_offset=7), 'tag', Load(), lineno=81, col_offset=7), [Eq()], [Attribute(Name('ET', Load(), lineno=81, col_offset=19), 'Comment', Load(), lineno=81, col_offset=19)], lineno=81, col_offset=7), [Return(Str('<Comment>', lineno=82, col_offset=15), lineno=82, col_offset=8)], [], lineno=81, col_offset=4), Return(Attribute(Name('elem', Load(), lineno=83, col_offset=11), 'tag', Load(), lineno=83, col_offset=11), lineno=83, col_offset=4)], [], lineno=80, col_offset=0), FunctionDef('summarize_list', arguments([Name('seq', Param(), lineno=85, col_offset=19)], None, None, []), [Return(ListComp(Call(Name('summarize', Load(), lineno=86, col_offset=12), [Name('elem', Load(), lineno=86, col_offset=22)], [], None, None, lineno=86, col_offset=12), [comprehension(Name('elem', Store(), lineno=86, col_offset=32), Name('seq', Load(), lineno=86, col_offset=40), [])], lineno=86, col_offset=12), lineno=86, col_offset=4)], [], lineno=85, col_offset=0), FunctionDef('normalize_crlf', arguments([Name('tree', Param(), lineno=88, col_offset=19)], None, None, []), [For(Name('elem', Store(), lineno=89, col_offset=8), Call(Attribute(Name('tree', Load(), lineno=89, col_offset=16), 'iter', Load(), lineno=89, col_offset=16), [], [], None, None, lineno=89, col_offset=16), [If(Attribute(Name('elem', Load(), lineno=90, col_offset=11), 'text', Load(), lineno=90, col_offset=11), [Assign([Attribute(Name('elem', Load(), lineno=91, col_offset=12), 'text', Store(), lineno=91, col_offset=12)], Call(Attribute(Attribute(Name('elem', Load(), lineno=91, col_offset=24), 'text', Load(), lineno=91, col_offset=24), 'replace', Load(), lineno=91, col_offset=24), [Str('\r\n', lineno=91, col_offset=42), Str('\n', lineno=91, col_offset=50)], [], None, None, lineno=91, col_offset=24), lineno=91, col_offset=12)], [], lineno=90, col_offset=8), If(Attribute(Name('elem', Load(), lineno=92, col_offset=11), 'tail', Load(), lineno=92, col_offset=11), [Assign([Attribute(Name('elem', Load(), lineno=93, col_offset=12), 'tail', Store(), lineno=93, col_offset=12)], Call(Attribute(Attribute(Name('elem', Load(), lineno=93, col_offset=24), 'tail', Load(), lineno=93, col_offset=24), 'replace', Load(), lineno=93, col_offset=24), [Str('\r\n', lineno=93, col_offset=42), Str('\n', lineno=93, col_offset=50)], [], None, None, lineno=93, col_offset=24), lineno=93, col_offset=12)], [], lineno=92, col_offset=8)], [], lineno=89, col_offset=4)], [], lineno=88, col_offset=0), FunctionDef('check_string', arguments([Name('string', Param(), lineno=95, col_offset=17)], None, None, []), [Expr(Call(Name('len', Load(), lineno=96, col_offset=4), [Name('string', Load(), lineno=96, col_offset=8)], [], None, None, lineno=96, col_offset=4), lineno=96, col_offset=4), For(Name('char', Store(), lineno=97, col_offset=8), Name('string', Load(), lineno=97, col_offset=16), [If(Compare(Call(Name('len', Load(), lineno=98, col_offset=11), [Name('char', Load(), lineno=98, col_offset=15)], [], None, None, lineno=98, col_offset=11), [NotEq()], [Num(1, lineno=98, col_offset=24)], lineno=98, col_offset=11), [Print(None, [BinOp(Str('expected one-character string, got %r', lineno=99, col_offset=18), Mod(), Name('char', Load(), lineno=99, col_offset=60), lineno=99, col_offset=18)], True, lineno=99, col_offset=12)], [], lineno=98, col_offset=8)], [], lineno=97, col_offset=4), Assign([Name('new_string', Store(), lineno=100, col_offset=4)], BinOp(Name('string', Load(), lineno=100, col_offset=17), Add(), Str('', lineno=100, col_offset=26), lineno=100, col_offset=17), lineno=100, col_offset=4), Assign([Name('new_string', Store(), lineno=101, col_offset=4)], BinOp(Name('string', Load(), lineno=101, col_offset=17), Add(), Str(' ', lineno=101, col_offset=26), lineno=101, col_offset=17), lineno=101, col_offset=4), Expr(Subscript(Name('string', Load(), lineno=102, col_offset=4), Slice(None, Num(0, lineno=102, col_offset=12), None), Load(), lineno=102, col_offset=4), lineno=102, col_offset=4)], [], lineno=95, col_offset=0), FunctionDef('check_mapping', arguments([Name('mapping', Param(), lineno=104, col_offset=18)], None, None, []), [Expr(Call(Name('len', Load(), lineno=105, col_offset=4), [Name('mapping', Load(), lineno=105, col_offset=8)], [], None, None, lineno=105, col_offset=4), lineno=105, col_offset=4), Assign([Name('keys', Store(), lineno=106, col_offset=4)], Call(Attribute(Name('mapping', Load(), lineno=106, col_offset=11), 'keys', Load(), lineno=106, col_offset=11), [], [], None, None, lineno=106, col_offset=11), lineno=106, col_offset=4), Assign([Name('items', Store(), lineno=107, col_offset=4)], Call(Attribute(Name('mapping', Load(), lineno=107, col_offset=12), 'items', Load(), lineno=107, col_offset=12), [], [], None, None, lineno=107, col_offset=12), lineno=107, col_offset=4), For(Name('key', Store(), lineno=108, col_offset=8), Name('keys', Load(), lineno=108, col_offset=15), [Assign([Name('item', Store(), lineno=109, col_offset=8)], Subscript(Name('mapping', Load(), lineno=109, col_offset=15), Index(Name('key', Load(), lineno=109, col_offset=23)), Load(), lineno=109, col_offset=15), lineno=109, col_offset=8)], [], lineno=108, col_offset=4), Assign([Subscript(Name('mapping', Load(), lineno=110, col_offset=4), Index(Str('key', lineno=110, col_offset=12)), Store(), lineno=110, col_offset=4)], Str('value', lineno=110, col_offset=21), lineno=110, col_offset=4), If(Compare(Subscript(Name('mapping', Load(), lineno=111, col_offset=7), Index(Str('key', lineno=111, col_offset=15)), Load(), lineno=111, col_offset=7), [NotEq()], [Str('value', lineno=111, col_offset=25)], lineno=111, col_offset=7), [Print(None, [BinOp(Str('expected value string, got %r', lineno=112, col_offset=14), Mod(), Subscript(Name('mapping', Load(), lineno=112, col_offset=48), Index(Str('key', lineno=112, col_offset=56)), Load(), lineno=112, col_offset=48), lineno=112, col_offset=14)], True, lineno=112, col_offset=8)], [], lineno=111, col_offset=4)], [], lineno=104, col_offset=0), FunctionDef('check_element', arguments([Name('element', Param(), lineno=114, col_offset=18)], None, None, []), [If(UnaryOp(Not(), Call(Attribute(Name('ET', Load(), lineno=115, col_offset=11), 'iselement', Load(), lineno=115, col_offset=11), [Name('element', Load(), lineno=115, col_offset=24)], [], None, None, lineno=115, col_offset=11), lineno=115, col_offset=7), [Print(None, [Str('not an element', lineno=116, col_offset=14)], True, lineno=116, col_offset=8)], [], lineno=115, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=117, col_offset=11), [Name('element', Load(), lineno=117, col_offset=19), Str('tag', lineno=117, col_offset=28)], [], None, None, lineno=117, col_offset=11), lineno=117, col_offset=7), [Print(None, [Str('no tag member', lineno=118, col_offset=14)], True, lineno=118, col_offset=8)], [], lineno=117, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=119, col_offset=11), [Name('element', Load(), lineno=119, col_offset=19), Str('attrib', lineno=119, col_offset=28)], [], None, None, lineno=119, col_offset=11), lineno=119, col_offset=7), [Print(None, [Str('no attrib member', lineno=120, col_offset=14)], True, lineno=120, col_offset=8)], [], lineno=119, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=121, col_offset=11), [Name('element', Load(), lineno=121, col_offset=19), Str('text', lineno=121, col_offset=28)], [], None, None, lineno=121, col_offset=11), lineno=121, col_offset=7), [Print(None, [Str('no text member', lineno=122, col_offset=14)], True, lineno=122, col_offset=8)], [], lineno=121, col_offset=4), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=123, col_offset=11), [Name('element', Load(), lineno=123, col_offset=19), Str('tail', lineno=123, col_offset=28)], [], None, None, lineno=123, col_offset=11), lineno=123, col_offset=7), [Print(None, [Str('no tail member', lineno=124, col_offset=14)], True, lineno=124, col_offset=8)], [], lineno=123, col_offset=4), Expr(Call(Name('check_string', Load(), lineno=126, col_offset=4), [Attribute(Name('element', Load(), lineno=126, col_offset=17), 'tag', Load(), lineno=126, col_offset=17)], [], None, None, lineno=126, col_offset=4), lineno=126, col_offset=4), Expr(Call(Name('check_mapping', Load(), lineno=127, col_offset=4), [Attribute(Name('element', Load(), lineno=127, col_offset=18), 'attrib', Load(), lineno=127, col_offset=18)], [], None, None, lineno=127, col_offset=4), lineno=127, col_offset=4), If(Compare(Attribute(Name('element', Load(), lineno=128, col_offset=7), 'text', Load(), lineno=128, col_offset=7), [IsNot()], [Name('None', Load(), lineno=128, col_offset=27)], lineno=128, col_offset=7), [Expr(Call(Name('check_string', Load(), lineno=129, col_offset=8), [Attribute(Name('element', Load(), lineno=129, col_offset=21), 'text', Load(), lineno=129, col_offset=21)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=8)], [], lineno=128, col_offset=4), If(Compare(Attribute(Name('element', Load(), lineno=130, col_offset=7), 'tail', Load(), lineno=130, col_offset=7), [IsNot()], [Name('None', Load(), lineno=130, col_offset=27)], lineno=130, col_offset=7), [Expr(Call(Name('check_string', Load(), lineno=131, col_offset=8), [Attribute(Name('element', Load(), lineno=131, col_offset=21), 'tail', Load(), lineno=131, col_offset=21)], [], None, None, lineno=131, col_offset=8), lineno=131, col_offset=8)], [], lineno=130, col_offset=4), For(Name('elem', Store(), lineno=132, col_offset=8), Name('element', Load(), lineno=132, col_offset=16), [Expr(Call(Name('check_element', Load(), lineno=133, col_offset=8), [Name('elem', Load(), lineno=133, col_offset=22)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8)], [], lineno=132, col_offset=4)], [], lineno=114, col_offset=0), FunctionDef('interface', arguments([], None, None, []), [Expr(Str('\n    Test element tree interface.\n\n    >>> element = ET.Element("tag")\n    >>> check_element(element)\n    >>> tree = ET.ElementTree(element)\n    >>> check_element(tree.getroot())\n\n    >>> element = ET.Element("t\\xe4g", key="value")\n    >>> tree = ET.ElementTree(element)\n    >>> repr(element)   # doctest: +ELLIPSIS\n    "<Element \'t\\\\xe4g\' at 0x...>"\n    >>> element = ET.Element("tag", key="value")\n\n    Make sure all standard element methods exist.\n\n    >>> check_method(element.append)\n    >>> check_method(element.extend)\n    >>> check_method(element.insert)\n    >>> check_method(element.remove)\n    >>> check_method(element.getchildren)\n    >>> check_method(element.find)\n    >>> check_method(element.iterfind)\n    >>> check_method(element.findall)\n    >>> check_method(element.findtext)\n    >>> check_method(element.clear)\n    >>> check_method(element.get)\n    >>> check_method(element.set)\n    >>> check_method(element.keys)\n    >>> check_method(element.items)\n    >>> check_method(element.iter)\n    >>> check_method(element.itertext)\n    >>> check_method(element.getiterator)\n\n    These methods return an iterable. See bug 6472.\n\n    >>> check_method(element.iter("tag").next)\n    >>> check_method(element.iterfind("tag").next)\n    >>> check_method(element.iterfind("*").next)\n    >>> check_method(tree.iter("tag").next)\n    >>> check_method(tree.iterfind("tag").next)\n    >>> check_method(tree.iterfind("*").next)\n\n    These aliases are provided:\n\n    >>> assert ET.XML == ET.fromstring\n    >>> assert ET.PI == ET.ProcessingInstruction\n    >>> assert ET.XMLParser == ET.XMLTreeBuilder\n    ', lineno=187, col_offset=-1), lineno=187, col_offset=-1)], [], lineno=138, col_offset=0), FunctionDef('simpleops', arguments([], None, None, []), [Expr(Str('\n    Basic method sanity checks.\n\n    >>> elem = ET.XML("<body><tag/></body>")\n    >>> serialize(elem)\n    \'<body><tag /></body>\'\n    >>> e = ET.Element("tag2")\n    >>> elem.append(e)\n    >>> serialize(elem)\n    \'<body><tag /><tag2 /></body>\'\n    >>> elem.remove(e)\n    >>> serialize(elem)\n    \'<body><tag /></body>\'\n    >>> elem.insert(0, e)\n    >>> serialize(elem)\n    \'<body><tag2 /><tag /></body>\'\n    >>> elem.remove(e)\n    >>> elem.extend([e])\n    >>> serialize(elem)\n    \'<body><tag /><tag2 /></body>\'\n    >>> elem.remove(e)\n\n    >>> element = ET.Element("tag", key="value")\n    >>> serialize(element) # 1\n    \'<tag key="value" />\'\n    >>> subelement = ET.Element("subtag")\n    >>> element.append(subelement)\n    >>> serialize(element) # 2\n    \'<tag key="value"><subtag /></tag>\'\n    >>> element.insert(0, subelement)\n    >>> serialize(element) # 3\n    \'<tag key="value"><subtag /><subtag /></tag>\'\n    >>> element.remove(subelement)\n    >>> serialize(element) # 4\n    \'<tag key="value"><subtag /></tag>\'\n    >>> element.remove(subelement)\n    >>> serialize(element) # 5\n    \'<tag key="value" />\'\n    >>> element.remove(subelement)\n    Traceback (most recent call last):\n    ValueError: list.remove(x): x not in list\n    >>> serialize(element) # 6\n    \'<tag key="value" />\'\n    >>> element[0:0] = [subelement, subelement, subelement]\n    >>> serialize(element[1])\n    \'<subtag />\'\n    >>> element[1:9] == [element[1], element[2]]\n    True\n    >>> element[:9:2] == [element[0], element[2]]\n    True\n    >>> del element[1:2]\n    >>> serialize(element)\n    \'<tag key="value"><subtag /><subtag /></tag>\'\n    ', lineno=243, col_offset=-1), lineno=243, col_offset=-1)], [], lineno=189, col_offset=0), FunctionDef('cdata', arguments([], None, None, []), [Expr(Str('\n    Test CDATA handling (etc).\n\n    >>> serialize(ET.XML("<tag>hello</tag>"))\n    \'<tag>hello</tag>\'\n    >>> serialize(ET.XML("<tag>&#104;&#101;&#108;&#108;&#111;</tag>"))\n    \'<tag>hello</tag>\'\n    >>> serialize(ET.XML("<tag><![CDATA[hello]]></tag>"))\n    \'<tag>hello</tag>\'\n    ', lineno=255, col_offset=-1), lineno=255, col_offset=-1)], [], lineno=245, col_offset=0), FunctionDef('simplefind', arguments([], None, None, []), [Expr(Str('\n    Test find methods using the elementpath fallback.\n\n    >>> from xml.etree import ElementTree\n\n    >>> CurrentElementPath = ElementTree.ElementPath\n    >>> ElementTree.ElementPath = ElementTree._SimpleElementPath()\n    >>> elem = ElementTree.XML(SAMPLE_XML)\n    >>> elem.find("tag").tag\n    \'tag\'\n    >>> ElementTree.ElementTree(elem).find("tag").tag\n    \'tag\'\n    >>> elem.findtext("tag")\n    \'text\'\n    >>> elem.findtext("tog")\n    >>> elem.findtext("tog", "default")\n    \'default\'\n    >>> ElementTree.ElementTree(elem).findtext("tag")\n    \'text\'\n    >>> summarize_list(elem.findall("tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall(".//tag"))\n    [\'tag\', \'tag\', \'tag\']\n\n    Path syntax doesn\'t work in this case.\n\n    >>> elem.find("section/tag")\n    >>> elem.findtext("section/tag")\n    >>> summarize_list(elem.findall("section/tag"))\n    []\n\n    >>> ElementTree.ElementPath = CurrentElementPath\n    ', lineno=291, col_offset=-1), lineno=291, col_offset=-1)], [], lineno=258, col_offset=0), FunctionDef('find', arguments([], None, None, []), [Expr(Str('\n    Test find methods (including xpath syntax).\n\n    >>> elem = ET.XML(SAMPLE_XML)\n    >>> elem.find("tag").tag\n    \'tag\'\n    >>> ET.ElementTree(elem).find("tag").tag\n    \'tag\'\n    >>> elem.find("section/tag").tag\n    \'tag\'\n    >>> elem.find("./tag").tag\n    \'tag\'\n    >>> ET.ElementTree(elem).find("./tag").tag\n    \'tag\'\n    >>> ET.ElementTree(elem).find("/tag").tag\n    \'tag\'\n    >>> elem[2] = ET.XML(SAMPLE_SECTION)\n    >>> elem.find("section/nexttag").tag\n    \'nexttag\'\n    >>> ET.ElementTree(elem).find("section/tag").tag\n    \'tag\'\n    >>> ET.ElementTree(elem).find("tog")\n    >>> ET.ElementTree(elem).find("tog/foo")\n    >>> elem.findtext("tag")\n    \'text\'\n    >>> elem.findtext("section/nexttag")\n    \'\'\n    >>> elem.findtext("section/nexttag", "default")\n    \'\'\n    >>> elem.findtext("tog")\n    >>> elem.findtext("tog", "default")\n    \'default\'\n    >>> ET.ElementTree(elem).findtext("tag")\n    \'text\'\n    >>> ET.ElementTree(elem).findtext("tog/foo")\n    >>> ET.ElementTree(elem).findtext("tog/foo", "default")\n    \'default\'\n    >>> ET.ElementTree(elem).findtext("./tag")\n    \'text\'\n    >>> ET.ElementTree(elem).findtext("/tag")\n    \'text\'\n    >>> elem.findtext("section/tag")\n    \'subtext\'\n    >>> ET.ElementTree(elem).findtext("section/tag")\n    \'subtext\'\n    >>> summarize_list(elem.findall("."))\n    [\'body\']\n    >>> summarize_list(elem.findall("tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall("tog"))\n    []\n    >>> summarize_list(elem.findall("tog/foo"))\n    []\n    >>> summarize_list(elem.findall("*"))\n    [\'tag\', \'tag\', \'section\']\n    >>> summarize_list(elem.findall(".//tag"))\n    [\'tag\', \'tag\', \'tag\', \'tag\']\n    >>> summarize_list(elem.findall("section/tag"))\n    [\'tag\']\n    >>> summarize_list(elem.findall("section//tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall("section/*"))\n    [\'tag\', \'nexttag\', \'nextsection\']\n    >>> summarize_list(elem.findall("section//*"))\n    [\'tag\', \'nexttag\', \'nextsection\', \'tag\']\n    >>> summarize_list(elem.findall("section/.//*"))\n    [\'tag\', \'nexttag\', \'nextsection\', \'tag\']\n    >>> summarize_list(elem.findall("*/*"))\n    [\'tag\', \'nexttag\', \'nextsection\']\n    >>> summarize_list(elem.findall("*//*"))\n    [\'tag\', \'nexttag\', \'nextsection\', \'tag\']\n    >>> summarize_list(elem.findall("*/tag"))\n    [\'tag\']\n    >>> summarize_list(elem.findall("*/./tag"))\n    [\'tag\']\n    >>> summarize_list(elem.findall("./tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall(".//tag"))\n    [\'tag\', \'tag\', \'tag\', \'tag\']\n    >>> summarize_list(elem.findall("././tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall(".//tag[@class]"))\n    [\'tag\', \'tag\', \'tag\']\n    >>> summarize_list(elem.findall(".//tag[@class=\'a\']"))\n    [\'tag\']\n    >>> summarize_list(elem.findall(".//tag[@class=\'b\']"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(elem.findall(".//tag[@id]"))\n    [\'tag\']\n    >>> summarize_list(elem.findall(".//section[tag]"))\n    [\'section\']\n    >>> summarize_list(elem.findall(".//section[element]"))\n    []\n    >>> summarize_list(elem.findall("../tag"))\n    []\n    >>> summarize_list(elem.findall("section/../tag"))\n    [\'tag\', \'tag\']\n    >>> summarize_list(ET.ElementTree(elem).findall("./tag"))\n    [\'tag\', \'tag\']\n\n    Following example is invalid in 1.2.\n    A leading \'*\' is assumed in 1.3.\n\n    >>> elem.findall("section//") == elem.findall("section//*")\n    True\n\n    ET\'s Path module handles this case incorrectly; this gives\n    a warning in 1.3, and the behaviour will be modified in 1.4.\n\n    >>> summarize_list(ET.ElementTree(elem).findall("/tag"))\n    [\'tag\', \'tag\']\n\n    >>> elem = ET.XML(SAMPLE_XML_NS)\n    >>> summarize_list(elem.findall("tag"))\n    []\n    >>> summarize_list(elem.findall("{http://effbot.org/ns}tag"))\n    [\'{http://effbot.org/ns}tag\', \'{http://effbot.org/ns}tag\']\n    >>> summarize_list(elem.findall(".//{http://effbot.org/ns}tag"))\n    [\'{http://effbot.org/ns}tag\', \'{http://effbot.org/ns}tag\', \'{http://effbot.org/ns}tag\']\n    ', lineno=413, col_offset=-1), lineno=413, col_offset=-1)], [], lineno=293, col_offset=0), FunctionDef('file_init', arguments([], None, None, []), [Expr(Str('\n    >>> import StringIO\n\n    >>> stringfile = StringIO.StringIO(SAMPLE_XML)\n    >>> tree = ET.ElementTree(file=stringfile)\n    >>> tree.find("tag").tag\n    \'tag\'\n    >>> tree.find("section/tag").tag\n    \'tag\'\n\n    >>> tree = ET.ElementTree(file=SIMPLE_XMLFILE)\n    >>> tree.find("element").tag\n    \'element\'\n    >>> tree.find("element/../empty-element").tag\n    \'empty-element\'\n    ', lineno=431, col_offset=-1), lineno=431, col_offset=-1)], [], lineno=415, col_offset=0), FunctionDef('bad_find', arguments([], None, None, []), [Expr(Str('\n    Check bad or unsupported path expressions.\n\n    >>> elem = ET.XML(SAMPLE_XML)\n    >>> elem.findall("/tag")\n    Traceback (most recent call last):\n    SyntaxError: cannot use absolute path on element\n    ', lineno=441, col_offset=-1), lineno=441, col_offset=-1)], [], lineno=433, col_offset=0), FunctionDef('path_cache', arguments([], None, None, []), [Expr(Str("\n    Check that the path cache behaves sanely.\n\n    >>> elem = ET.XML(SAMPLE_XML)\n    >>> for i in range(10): ET.ElementTree(elem).find('./'+str(i))\n    >>> cache_len_10 = len(ET.ElementPath._cache)\n    >>> for i in range(10): ET.ElementTree(elem).find('./'+str(i))\n    >>> len(ET.ElementPath._cache) == cache_len_10\n    True\n    >>> for i in range(20): ET.ElementTree(elem).find('./'+str(i))\n    >>> len(ET.ElementPath._cache) > cache_len_10\n    True\n    >>> for i in range(600): ET.ElementTree(elem).find('./'+str(i))\n    >>> len(ET.ElementPath._cache) < 500\n    True\n    ", lineno=459, col_offset=-1), lineno=459, col_offset=-1)], [], lineno=443, col_offset=0), FunctionDef('copy', arguments([], None, None, []), [Expr(Str('\n    Test copy handling (etc).\n\n    >>> import copy\n    >>> e1 = ET.XML("<tag>hello<foo/></tag>")\n    >>> e2 = copy.copy(e1)\n    >>> e3 = copy.deepcopy(e1)\n    >>> e1.find("foo").tag = "bar"\n    >>> serialize(e1)\n    \'<tag>hello<bar /></tag>\'\n    >>> serialize(e2)\n    \'<tag>hello<bar /></tag>\'\n    >>> serialize(e3)\n    \'<tag>hello<foo /></tag>\'\n\n    ', lineno=477, col_offset=-1), lineno=477, col_offset=-1)], [], lineno=461, col_offset=0), FunctionDef('attrib', arguments([], None, None, []), [Expr(Str('\n    Test attribute handling.\n\n    >>> elem = ET.Element("tag")\n    >>> elem.get("key") # 1.1\n    >>> elem.get("key", "default") # 1.2\n    \'default\'\n    >>> elem.set("key", "value")\n    >>> elem.get("key") # 1.3\n    \'value\'\n\n    >>> elem = ET.Element("tag", key="value")\n    >>> elem.get("key") # 2.1\n    \'value\'\n    >>> elem.attrib # 2.2\n    {\'key\': \'value\'}\n\n    >>> attrib = {"key": "value"}\n    >>> elem = ET.Element("tag", attrib)\n    >>> attrib.clear() # check for aliasing issues\n    >>> elem.get("key") # 3.1\n    \'value\'\n    >>> elem.attrib # 3.2\n    {\'key\': \'value\'}\n\n    >>> attrib = {"key": "value"}\n    >>> elem = ET.Element("tag", **attrib)\n    >>> attrib.clear() # check for aliasing issues\n    >>> elem.get("key") # 4.1\n    \'value\'\n    >>> elem.attrib # 4.2\n    {\'key\': \'value\'}\n\n    >>> elem = ET.Element("tag", {"key": "other"}, key="value")\n    >>> elem.get("key") # 5.1\n    \'value\'\n    >>> elem.attrib # 5.2\n    {\'key\': \'value\'}\n\n    >>> elem = ET.Element(\'test\')\n    >>> elem.text = "aa"\n    >>> elem.set(\'testa\', \'testval\')\n    >>> elem.set(\'testb\', \'test2\')\n    >>> ET.tostring(elem)\n    \'<test testa="testval" testb="test2">aa</test>\'\n    >>> sorted(elem.keys())\n    [\'testa\', \'testb\']\n    >>> sorted(elem.items())\n    [(\'testa\', \'testval\'), (\'testb\', \'test2\')]\n    >>> elem.attrib[\'testb\']\n    \'test2\'\n    >>> elem.attrib[\'testb\'] = \'test1\'\n    >>> elem.attrib[\'testc\'] = \'test2\'\n    >>> ET.tostring(elem)\n    \'<test testa="testval" testb="test1" testc="test2">aa</test>\'\n    ', lineno=535, col_offset=-1), lineno=535, col_offset=-1)], [], lineno=479, col_offset=0), FunctionDef('makeelement', arguments([], None, None, []), [Expr(Str('\n    Test makeelement handling.\n\n    >>> elem = ET.Element("tag")\n    >>> attrib = {"key": "value"}\n    >>> subelem = elem.makeelement("subtag", attrib)\n    >>> if subelem.attrib is attrib:\n    ...     print "attrib aliasing"\n    >>> elem.append(subelem)\n    >>> serialize(elem)\n    \'<tag><subtag key="value" /></tag>\'\n\n    >>> elem.clear()\n    >>> serialize(elem)\n    \'<tag />\'\n    >>> elem.append(subelem)\n    >>> serialize(elem)\n    \'<tag><subtag key="value" /></tag>\'\n    >>> elem.extend([subelem, subelem])\n    >>> serialize(elem)\n    \'<tag><subtag key="value" /><subtag key="value" /><subtag key="value" /></tag>\'\n    >>> elem[:] = [subelem]\n    >>> serialize(elem)\n    \'<tag><subtag key="value" /></tag>\'\n    >>> elem[:] = tuple([subelem])\n    >>> serialize(elem)\n    \'<tag><subtag key="value" /></tag>\'\n\n    ', lineno=566, col_offset=-1), lineno=566, col_offset=-1)], [], lineno=537, col_offset=0), FunctionDef('parsefile', arguments([], None, None, []), [Expr(Str('\n    Test parsing from file.\n\n    >>> tree = ET.parse(SIMPLE_XMLFILE)\n    >>> normalize_crlf(tree)\n    >>> tree.write(sys.stdout)\n    <root>\n       <element key="value">text</element>\n       <element>text</element>tail\n       <empty-element />\n    </root>\n    >>> tree = ET.parse(SIMPLE_NS_XMLFILE)\n    >>> normalize_crlf(tree)\n    >>> tree.write(sys.stdout)\n    <ns0:root xmlns:ns0="namespace">\n       <ns0:element key="value">text</ns0:element>\n       <ns0:element>text</ns0:element>tail\n       <ns0:empty-element />\n    </ns0:root>\n\n    >>> with open(SIMPLE_XMLFILE) as f:\n    ...     data = f.read()\n\n    >>> parser = ET.XMLParser()\n    >>> parser.version  # doctest: +ELLIPSIS\n    \'Expat ...\'\n    >>> parser.feed(data)\n    >>> print serialize(parser.close())\n    <root>\n       <element key="value">text</element>\n       <element>text</element>tail\n       <empty-element />\n    </root>\n\n    >>> parser = ET.XMLTreeBuilder() # 1.2 compatibility\n    >>> parser.feed(data)\n    >>> print serialize(parser.close())\n    <root>\n       <element key="value">text</element>\n       <element>text</element>tail\n       <empty-element />\n    </root>\n\n    >>> target = ET.TreeBuilder()\n    >>> parser = ET.XMLParser(target=target)\n    >>> parser.feed(data)\n    >>> print serialize(parser.close())\n    <root>\n       <element key="value">text</element>\n       <element>text</element>tail\n       <empty-element />\n    </root>\n    ', lineno=621, col_offset=-1), lineno=621, col_offset=-1)], [], lineno=568, col_offset=0), FunctionDef('parseliteral', arguments([], None, None, []), [Expr(Str('\n    >>> element = ET.XML("<html><body>text</body></html>")\n    >>> ET.ElementTree(element).write(sys.stdout)\n    <html><body>text</body></html>\n    >>> element = ET.fromstring("<html><body>text</body></html>")\n    >>> ET.ElementTree(element).write(sys.stdout)\n    <html><body>text</body></html>\n    >>> sequence = ["<html><body>", "text</bo", "dy></html>"]\n    >>> element = ET.fromstringlist(sequence)\n    >>> print ET.tostring(element)\n    <html><body>text</body></html>\n    >>> print "".join(ET.tostringlist(element))\n    <html><body>text</body></html>\n    >>> ET.tostring(element, "ascii")\n    "<?xml version=\'1.0\' encoding=\'ascii\'?>\\n<html><body>text</body></html>"\n    >>> _, ids = ET.XMLID("<html><body>text</body></html>")\n    >>> len(ids)\n    0\n    >>> _, ids = ET.XMLID("<html><body id=\'body\'>text</body></html>")\n    >>> len(ids)\n    1\n    >>> ids["body"].tag\n    \'body\'\n    ', lineno=647, col_offset=-1), lineno=647, col_offset=-1)], [], lineno=623, col_offset=0), FunctionDef('iterparse', arguments([], None, None, []), [Expr(Str('\n    Test iterparse interface.\n\n    >>> iterparse = ET.iterparse\n\n    >>> context = iterparse(SIMPLE_XMLFILE)\n    >>> action, elem = next(context)\n    >>> print action, elem.tag\n    end element\n    >>> for action, elem in context:\n    ...   print action, elem.tag\n    end element\n    end empty-element\n    end root\n    >>> context.root.tag\n    \'root\'\n\n    >>> context = iterparse(SIMPLE_NS_XMLFILE)\n    >>> for action, elem in context:\n    ...   print action, elem.tag\n    end {namespace}element\n    end {namespace}element\n    end {namespace}empty-element\n    end {namespace}root\n\n    >>> events = ()\n    >>> context = iterparse(SIMPLE_XMLFILE, events)\n    >>> for action, elem in context:\n    ...   print action, elem.tag\n\n    >>> events = ()\n    >>> context = iterparse(SIMPLE_XMLFILE, events=events)\n    >>> for action, elem in context:\n    ...   print action, elem.tag\n\n    >>> events = ("start", "end")\n    >>> context = iterparse(SIMPLE_XMLFILE, events)\n    >>> for action, elem in context:\n    ...   print action, elem.tag\n    start root\n    start element\n    end element\n    start element\n    end element\n    start empty-element\n    end empty-element\n    end root\n\n    >>> events = ("start", "end", "start-ns", "end-ns")\n    >>> context = iterparse(SIMPLE_NS_XMLFILE, events)\n    >>> for action, elem in context:\n    ...   if action in ("start", "end"):\n    ...     print action, elem.tag\n    ...   else:\n    ...     print action, elem\n    start-ns (\'\', \'namespace\')\n    start {namespace}root\n    start {namespace}element\n    end {namespace}element\n    start {namespace}element\n    end {namespace}element\n    start {namespace}empty-element\n    end {namespace}empty-element\n    end {namespace}root\n    end-ns None\n\n    >>> events = ("start", "end", "bogus")\n    >>> with open(SIMPLE_XMLFILE, "rb") as f:\n    ...     iterparse(f, events)\n    Traceback (most recent call last):\n    ValueError: unknown event \'bogus\'\n\n    >>> import StringIO\n\n    >>> source = StringIO.StringIO(\n    ...     "<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\\n"\n    ...     "<body xmlns=\'http://&#233;ffbot.org/ns\'\\n"\n    ...     "      xmlns:cl\\xe9=\'http://effbot.org/ns\'>text</body>\\n")\n    >>> events = ("start-ns",)\n    >>> context = iterparse(source, events)\n    >>> for action, elem in context:\n    ...     print action, elem\n    start-ns (\'\', u\'http://\\xe9ffbot.org/ns\')\n    start-ns (u\'cl\\xe9\', \'http://effbot.org/ns\')\n\n    >>> source = StringIO.StringIO("<document />junk")\n    >>> try:\n    ...   for action, elem in iterparse(source):\n    ...     print action, elem.tag\n    ... except ET.ParseError, v:\n    ...   print v\n    junk after document element: line 1, column 12\n    ', lineno=742, col_offset=-1), lineno=742, col_offset=-1)], [], lineno=649, col_offset=0), FunctionDef('writefile', arguments([], None, None, []), [Expr(Str('\n    >>> elem = ET.Element("tag")\n    >>> elem.text = "text"\n    >>> serialize(elem)\n    \'<tag>text</tag>\'\n    >>> ET.SubElement(elem, "subtag").text = "subtext"\n    >>> serialize(elem)\n    \'<tag>text<subtag>subtext</subtag></tag>\'\n\n    Test tag suppression\n    >>> elem.tag = None\n    >>> serialize(elem)\n    \'text<subtag>subtext</subtag>\'\n    >>> elem.insert(0, ET.Comment("comment"))\n    >>> serialize(elem)     # assumes 1.3\n    \'text<!--comment--><subtag>subtext</subtag>\'\n    >>> elem[0] = ET.PI("key", "value")\n    >>> serialize(elem)\n    \'text<?key value?><subtag>subtext</subtag>\'\n    ', lineno=764, col_offset=-1), lineno=764, col_offset=-1)], [], lineno=744, col_offset=0), FunctionDef('custom_builder', arguments([], None, None, []), [Expr(Str('\n    Test parser w. custom builder.\n\n    >>> with open(SIMPLE_XMLFILE) as f:\n    ...     data = f.read()\n    >>> class Builder:\n    ...     def start(self, tag, attrib):\n    ...         print "start", tag\n    ...     def end(self, tag):\n    ...         print "end", tag\n    ...     def data(self, text):\n    ...         pass\n    >>> builder = Builder()\n    >>> parser = ET.XMLParser(target=builder)\n    >>> parser.feed(data)\n    start root\n    start element\n    end element\n    start element\n    end element\n    start empty-element\n    end empty-element\n    end root\n\n    >>> with open(SIMPLE_NS_XMLFILE) as f:\n    ...     data = f.read()\n    >>> class Builder:\n    ...     def start(self, tag, attrib):\n    ...         print "start", tag\n    ...     def end(self, tag):\n    ...         print "end", tag\n    ...     def data(self, text):\n    ...         pass\n    ...     def pi(self, target, data):\n    ...         print "pi", target, repr(data)\n    ...     def comment(self, data):\n    ...         print "comment", repr(data)\n    >>> builder = Builder()\n    >>> parser = ET.XMLParser(target=builder)\n    >>> parser.feed(data)\n    pi pi \'data\'\n    comment \' comment \'\n    start {namespace}root\n    start {namespace}element\n    end {namespace}element\n    start {namespace}element\n    end {namespace}element\n    start {namespace}empty-element\n    end {namespace}empty-element\n    end {namespace}root\n\n    ', lineno=818, col_offset=-1), lineno=818, col_offset=-1)], [], lineno=766, col_offset=0), FunctionDef('getchildren', arguments([], None, None, []), [Expr(Str('\n    Test Element.getchildren()\n\n    >>> with open(SIMPLE_XMLFILE, "r") as f:\n    ...     tree = ET.parse(f)\n    >>> for elem in tree.getroot().iter():\n    ...     summarize_list(elem.getchildren())\n    [\'element\', \'element\', \'empty-element\']\n    []\n    []\n    []\n    >>> for elem in tree.getiterator():\n    ...     summarize_list(elem.getchildren())\n    [\'element\', \'element\', \'empty-element\']\n    []\n    []\n    []\n\n    >>> elem = ET.XML(SAMPLE_XML)\n    >>> len(elem.getchildren())\n    3\n    >>> len(elem[2].getchildren())\n    1\n    >>> elem[:] == elem.getchildren()\n    True\n    >>> child1 = elem[0]\n    >>> child2 = elem[2]\n    >>> del elem[1:2]\n    >>> len(elem.getchildren())\n    2\n    >>> child1 == elem[0]\n    True\n    >>> child2 == elem[1]\n    True\n    >>> elem[0:2] = [child2, child1]\n    >>> child2 == elem[0]\n    True\n    >>> child1 == elem[1]\n    True\n    >>> child1 == elem[0]\n    False\n    >>> elem.clear()\n    >>> elem.getchildren()\n    []\n    ', lineno=865, col_offset=-1), lineno=865, col_offset=-1)], [], lineno=820, col_offset=0), FunctionDef('writestring', arguments([], None, None, []), [Expr(Str('\n    >>> elem = ET.XML("<html><body>text</body></html>")\n    >>> ET.tostring(elem)\n    \'<html><body>text</body></html>\'\n    >>> elem = ET.fromstring("<html><body>text</body></html>")\n    >>> ET.tostring(elem)\n    \'<html><body>text</body></html>\'\n    ', lineno=875, col_offset=-1), lineno=875, col_offset=-1)], [], lineno=867, col_offset=0), FunctionDef('check_encoding', arguments([Name('encoding', Param(), lineno=877, col_offset=19)], None, None, []), [Expr(Str('\n    >>> check_encoding("ascii")\n    >>> check_encoding("us-ascii")\n    >>> check_encoding("iso-8859-1")\n    >>> check_encoding("iso-8859-15")\n    >>> check_encoding("cp437")\n    >>> check_encoding("mac-roman")\n    ', lineno=885, col_offset=-1), lineno=885, col_offset=-1), Expr(Call(Attribute(Name('ET', Load(), lineno=886, col_offset=4), 'XML', Load(), lineno=886, col_offset=4), [BinOp(Str("<?xml version='1.0' encoding='%s'?><xml />", lineno=886, col_offset=11), Mod(), Name('encoding', Load(), lineno=886, col_offset=58), lineno=886, col_offset=11)], [], None, None, lineno=886, col_offset=4), lineno=886, col_offset=4)], [], lineno=877, col_offset=0), FunctionDef('encoding', arguments([], None, None, []), [Expr(Str('\n    Test encoding issues.\n\n    >>> elem = ET.Element("tag")\n    >>> elem.text = u"abc"\n    >>> serialize(elem)\n    \'<tag>abc</tag>\'\n    >>> serialize(elem, encoding="utf-8")\n    \'<tag>abc</tag>\'\n    >>> serialize(elem, encoding="us-ascii")\n    \'<tag>abc</tag>\'\n    >>> serialize(elem, encoding="iso-8859-1")\n    "<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\\n<tag>abc</tag>"\n\n    >>> elem.text = "<&\\"\\\'>"\n    >>> serialize(elem)\n    \'<tag>&lt;&amp;"\\\'&gt;</tag>\'\n    >>> serialize(elem, encoding="utf-8")\n    \'<tag>&lt;&amp;"\\\'&gt;</tag>\'\n    >>> serialize(elem, encoding="us-ascii") # cdata characters\n    \'<tag>&lt;&amp;"\\\'&gt;</tag>\'\n    >>> serialize(elem, encoding="iso-8859-1")\n    \'<?xml version=\\\'1.0\\\' encoding=\\\'iso-8859-1\\\'?>\\n<tag>&lt;&amp;"\\\'&gt;</tag>\'\n\n    >>> elem.attrib["key"] = "<&\\"\\\'>"\n    >>> elem.text = None\n    >>> serialize(elem)\n    \'<tag key="&lt;&amp;&quot;\\\'&gt;" />\'\n    >>> serialize(elem, encoding="utf-8")\n    \'<tag key="&lt;&amp;&quot;\\\'&gt;" />\'\n    >>> serialize(elem, encoding="us-ascii")\n    \'<tag key="&lt;&amp;&quot;\\\'&gt;" />\'\n    >>> serialize(elem, encoding="iso-8859-1")\n    \'<?xml version=\\\'1.0\\\' encoding=\\\'iso-8859-1\\\'?>\\n<tag key="&lt;&amp;&quot;\\\'&gt;" />\'\n\n    >>> elem.text = u\'\\xe5\\xf6\\xf6<>\'\n    >>> elem.attrib.clear()\n    >>> serialize(elem)\n    \'<tag>&#229;&#246;&#246;&lt;&gt;</tag>\'\n    >>> serialize(elem, encoding="utf-8")\n    \'<tag>\\xc3\\xa5\\xc3\\xb6\\xc3\\xb6&lt;&gt;</tag>\'\n    >>> serialize(elem, encoding="us-ascii")\n    \'<tag>&#229;&#246;&#246;&lt;&gt;</tag>\'\n    >>> serialize(elem, encoding="iso-8859-1")\n    "<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\\n<tag>\\xe5\\xf6\\xf6&lt;&gt;</tag>"\n\n    >>> elem.attrib["key"] = u\'\\xe5\\xf6\\xf6<>\'\n    >>> elem.text = None\n    >>> serialize(elem)\n    \'<tag key="&#229;&#246;&#246;&lt;&gt;" />\'\n    >>> serialize(elem, encoding="utf-8")\n    \'<tag key="\\xc3\\xa5\\xc3\\xb6\\xc3\\xb6&lt;&gt;" />\'\n    >>> serialize(elem, encoding="us-ascii")\n    \'<tag key="&#229;&#246;&#246;&lt;&gt;" />\'\n    >>> serialize(elem, encoding="iso-8859-1")\n    \'<?xml version=\\\'1.0\\\' encoding=\\\'iso-8859-1\\\'?>\\n<tag key="\\xe5\\xf6\\xf6&lt;&gt;" />\'\n    ', lineno=945, col_offset=-1), lineno=945, col_offset=-1)], [], lineno=888, col_offset=0), FunctionDef('methods', arguments([], None, None, []), [Expr(Str('\n    Test serialization methods.\n\n    >>> e = ET.XML("<html><link/><script>1 &lt; 2</script></html>")\n    >>> e.tail = "\\n"\n    >>> serialize(e)\n    \'<html><link /><script>1 &lt; 2</script></html>\\n\'\n    >>> serialize(e, method=None)\n    \'<html><link /><script>1 &lt; 2</script></html>\\n\'\n    >>> serialize(e, method="xml")\n    \'<html><link /><script>1 &lt; 2</script></html>\\n\'\n    >>> serialize(e, method="html")\n    \'<html><link><script>1 < 2</script></html>\\n\'\n    >>> serialize(e, method="text")\n    \'1 < 2\\n\'\n    ', lineno=963, col_offset=-1), lineno=963, col_offset=-1)], [], lineno=947, col_offset=0), FunctionDef('iterators', arguments([], None, None, []), [Expr(Str('\n    Test iterators.\n\n    >>> e = ET.XML("<html><body>this is a <i>paragraph</i>.</body>..</html>")\n    >>> summarize_list(e.iter())\n    [\'html\', \'body\', \'i\']\n    >>> summarize_list(e.find("body").iter())\n    [\'body\', \'i\']\n    >>> summarize(next(e.iter()))\n    \'html\'\n    >>> "".join(e.itertext())\n    \'this is a paragraph...\'\n    >>> "".join(e.find("body").itertext())\n    \'this is a paragraph.\'\n    >>> next(e.itertext())\n    \'this is a \'\n\n    Method iterparse should return an iterator. See bug 6472.\n\n    >>> sourcefile = serialize(e, to_string=False)\n    >>> next(ET.iterparse(sourcefile))  # doctest: +ELLIPSIS\n    (\'end\', <Element \'i\' at 0x...>)\n\n    >>> tree = ET.ElementTree(None)\n    >>> tree.iter()\n    Traceback (most recent call last):\n    AttributeError: \'NoneType\' object has no attribute \'iter\'\n    ', lineno=993, col_offset=-1), lineno=993, col_offset=-1)], [], lineno=965, col_offset=0), Assign([Name('ENTITY_XML', Store(), lineno=995, col_offset=0)], Str("<!DOCTYPE points [\n<!ENTITY % user-entities SYSTEM 'user-entities.xml'>\n%user-entities;\n]>\n<document>&entity;</document>\n", lineno=1001, col_offset=-1), lineno=995, col_offset=0), FunctionDef('entity', arguments([], None, None, []), [Expr(Str('\n    Test entity handling.\n\n    1) good entities\n\n    >>> e = ET.XML("<document title=\'&#x8230;\'>test</document>")\n    >>> serialize(e)\n    \'<document title="&#33328;">test</document>\'\n\n    2) bad entities\n\n    >>> ET.XML("<document>&entity;</document>")\n    Traceback (most recent call last):\n    ParseError: undefined entity: line 1, column 10\n\n    >>> ET.XML(ENTITY_XML)\n    Traceback (most recent call last):\n    ParseError: undefined entity &entity;: line 5, column 10\n\n    3) custom entity\n\n    >>> parser = ET.XMLParser()\n    >>> parser.entity["entity"] = "text"\n    >>> parser.feed(ENTITY_XML)\n    >>> root = parser.close()\n    >>> serialize(root)\n    \'<document>text</document>\'\n    ', lineno=1031, col_offset=-1), lineno=1031, col_offset=-1)], [], lineno=1003, col_offset=0), FunctionDef('error', arguments([Name('xml', Param(), lineno=1033, col_offset=10)], None, None, []), [Expr(Str('\n\n    Test error handling.\n\n    >>> issubclass(ET.ParseError, SyntaxError)\n    True\n    >>> error("foo").position\n    (1, 0)\n    >>> error("<tag>&foo;</tag>").position\n    (1, 5)\n    >>> error("foobar<").position\n    (1, 6)\n\n    ', lineno=1047, col_offset=-1), lineno=1047, col_offset=-1), TryExcept([Expr(Call(Attribute(Name('ET', Load(), lineno=1049, col_offset=8), 'XML', Load(), lineno=1049, col_offset=8), [Name('xml', Load(), lineno=1049, col_offset=15)], [], None, None, lineno=1049, col_offset=8), lineno=1049, col_offset=8)], [ExceptHandler(Attribute(Name('ET', Load(), lineno=1050, col_offset=11), 'ParseError', Load(), lineno=1050, col_offset=11), None, [Return(Attribute(Name('sys', Load(), lineno=1051, col_offset=15), 'exc_value', Load(), lineno=1051, col_offset=15), lineno=1051, col_offset=8)], lineno=1050, col_offset=4)], [], lineno=1048, col_offset=4)], [], lineno=1033, col_offset=0), FunctionDef('namespace', arguments([], None, None, []), [Expr(Str('\n    Test namespace issues.\n\n    1) xml namespace\n\n    >>> elem = ET.XML("<tag xml:lang=\'en\' />")\n    >>> serialize(elem) # 1.1\n    \'<tag xml:lang="en" />\'\n\n    2) other "well-known" namespaces\n\n    >>> elem = ET.XML("<rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\' />")\n    >>> serialize(elem) # 2.1\n    \'<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" />\'\n\n    >>> elem = ET.XML("<html:html xmlns:html=\'http://www.w3.org/1999/xhtml\' />")\n    >>> serialize(elem) # 2.2\n    \'<html:html xmlns:html="http://www.w3.org/1999/xhtml" />\'\n\n    >>> elem = ET.XML("<soap:Envelope xmlns:soap=\'http://schemas.xmlsoap.org/soap/envelope\' />")\n    >>> serialize(elem) # 2.3\n    \'<ns0:Envelope xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope" />\'\n\n    3) unknown namespaces\n    >>> elem = ET.XML(SAMPLE_XML_NS)\n    >>> print serialize(elem)\n    <ns0:body xmlns:ns0="http://effbot.org/ns">\n      <ns0:tag>text</ns0:tag>\n      <ns0:tag />\n      <ns0:section>\n        <ns0:tag>subtext</ns0:tag>\n      </ns0:section>\n    </ns0:body>\n    ', lineno=1087, col_offset=-1), lineno=1087, col_offset=-1)], [], lineno=1053, col_offset=0), FunctionDef('qname', arguments([], None, None, []), [Expr(Str('\n    Test QName handling.\n\n    1) decorated tags\n\n    >>> elem = ET.Element("{uri}tag")\n    >>> serialize(elem) # 1.1\n    \'<ns0:tag xmlns:ns0="uri" />\'\n    >>> elem = ET.Element(ET.QName("{uri}tag"))\n    >>> serialize(elem) # 1.2\n    \'<ns0:tag xmlns:ns0="uri" />\'\n    >>> elem = ET.Element(ET.QName("uri", "tag"))\n    >>> serialize(elem) # 1.3\n    \'<ns0:tag xmlns:ns0="uri" />\'\n    >>> elem = ET.Element(ET.QName("uri", "tag"))\n    >>> subelem = ET.SubElement(elem, ET.QName("uri", "tag1"))\n    >>> subelem = ET.SubElement(elem, ET.QName("uri", "tag2"))\n    >>> serialize(elem) # 1.4\n    \'<ns0:tag xmlns:ns0="uri"><ns0:tag1 /><ns0:tag2 /></ns0:tag>\'\n\n    2) decorated attributes\n\n    >>> elem.clear()\n    >>> elem.attrib["{uri}key"] = "value"\n    >>> serialize(elem) # 2.1\n    \'<ns0:tag xmlns:ns0="uri" ns0:key="value" />\'\n\n    >>> elem.clear()\n    >>> elem.attrib[ET.QName("{uri}key")] = "value"\n    >>> serialize(elem) # 2.2\n    \'<ns0:tag xmlns:ns0="uri" ns0:key="value" />\'\n\n    3) decorated values are not converted by default, but the\n       QName wrapper can be used for values\n\n    >>> elem.clear()\n    >>> elem.attrib["{uri}key"] = "{uri}value"\n    >>> serialize(elem) # 3.1\n    \'<ns0:tag xmlns:ns0="uri" ns0:key="{uri}value" />\'\n\n    >>> elem.clear()\n    >>> elem.attrib["{uri}key"] = ET.QName("{uri}value")\n    >>> serialize(elem) # 3.2\n    \'<ns0:tag xmlns:ns0="uri" ns0:key="ns0:value" />\'\n\n    >>> elem.clear()\n    >>> subelem = ET.Element("tag")\n    >>> subelem.attrib["{uri1}key"] = ET.QName("{uri2}value")\n    >>> elem.append(subelem)\n    >>> elem.append(subelem)\n    >>> serialize(elem) # 3.3\n    \'<ns0:tag xmlns:ns0="uri" xmlns:ns1="uri1" xmlns:ns2="uri2"><tag ns1:key="ns2:value" /><tag ns1:key="ns2:value" /></ns0:tag>\'\n\n    4) Direct QName tests\n\n    >>> str(ET.QName(\'ns\', \'tag\'))\n    \'{ns}tag\'\n    >>> str(ET.QName(\'{ns}tag\'))\n    \'{ns}tag\'\n    >>> q1 = ET.QName(\'ns\', \'tag\')\n    >>> q2 = ET.QName(\'ns\', \'tag\')\n    >>> q1 == q2\n    True\n    >>> q2 = ET.QName(\'ns\', \'other-tag\')\n    >>> q1 == q2\n    False\n    >>> q1 == \'ns:tag\'\n    False\n    >>> q1 == \'{ns}tag\'\n    True\n    ', lineno=1160, col_offset=-1), lineno=1160, col_offset=-1)], [], lineno=1089, col_offset=0), FunctionDef('doctype_public', arguments([], None, None, []), [Expr(Str('\n    Test PUBLIC doctype.\n\n    >>> elem = ET.XML(\'<!DOCTYPE html PUBLIC\'\n    ...   \' "-//W3C//DTD XHTML 1.0 Transitional//EN"\'\n    ...   \' "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\'\n    ...   \'<html>text</html>\')\n\n    ', lineno=1171, col_offset=-1), lineno=1171, col_offset=-1)], [], lineno=1162, col_offset=0), FunctionDef('xpath_tokenizer', arguments([Name('p', Param(), lineno=1173, col_offset=20)], None, None, []), [Expr(Str('\n    Test the XPath tokenizer.\n\n    >>> # tests from the xml specification\n    >>> xpath_tokenizer("*")\n    [\'*\']\n    >>> xpath_tokenizer("text()")\n    [\'text\', \'()\']\n    >>> xpath_tokenizer("@name")\n    [\'@\', \'name\']\n    >>> xpath_tokenizer("@*")\n    [\'@\', \'*\']\n    >>> xpath_tokenizer("para[1]")\n    [\'para\', \'[\', \'1\', \']\']\n    >>> xpath_tokenizer("para[last()]")\n    [\'para\', \'[\', \'last\', \'()\', \']\']\n    >>> xpath_tokenizer("*/para")\n    [\'*\', \'/\', \'para\']\n    >>> xpath_tokenizer("/doc/chapter[5]/section[2]")\n    [\'/\', \'doc\', \'/\', \'chapter\', \'[\', \'5\', \']\', \'/\', \'section\', \'[\', \'2\', \']\']\n    >>> xpath_tokenizer("chapter//para")\n    [\'chapter\', \'//\', \'para\']\n    >>> xpath_tokenizer("//para")\n    [\'//\', \'para\']\n    >>> xpath_tokenizer("//olist/item")\n    [\'//\', \'olist\', \'/\', \'item\']\n    >>> xpath_tokenizer(".")\n    [\'.\']\n    >>> xpath_tokenizer(".//para")\n    [\'.\', \'//\', \'para\']\n    >>> xpath_tokenizer("..")\n    [\'..\']\n    >>> xpath_tokenizer("../@lang")\n    [\'..\', \'/\', \'@\', \'lang\']\n    >>> xpath_tokenizer("chapter[title]")\n    [\'chapter\', \'[\', \'title\', \']\']\n    >>> xpath_tokenizer("employee[@secretary and @assistant]")\n    [\'employee\', \'[\', \'@\', \'secretary\', \'\', \'and\', \'\', \'@\', \'assistant\', \']\']\n\n    >>> # additional tests\n    >>> xpath_tokenizer("{http://spam}egg")\n    [\'{http://spam}egg\']\n    >>> xpath_tokenizer("./spam.egg")\n    [\'.\', \'/\', \'spam.egg\']\n    >>> xpath_tokenizer(".//{http://spam}egg")\n    [\'.\', \'//\', \'{http://spam}egg\']\n    ', lineno=1220, col_offset=-1), lineno=1220, col_offset=-1), ImportFrom('xml.etree', [alias('ElementPath', None)], 0, lineno=1221, col_offset=4), Assign([Name('out', Store(), lineno=1222, col_offset=4)], List([], Load(), lineno=1222, col_offset=10), lineno=1222, col_offset=4), For(Tuple([Name('op', Store(), lineno=1223, col_offset=8), Name('tag', Store(), lineno=1223, col_offset=12)], Store(), lineno=1223, col_offset=8), Call(Attribute(Name('ElementPath', Load(), lineno=1223, col_offset=19), 'xpath_tokenizer', Load(), lineno=1223, col_offset=19), [Name('p', Load(), lineno=1223, col_offset=47)], [], None, None, lineno=1223, col_offset=19), [Expr(Call(Attribute(Name('out', Load(), lineno=1224, col_offset=8), 'append', Load(), lineno=1224, col_offset=8), [BoolOp(Or(), [Name('op', Load(), lineno=1224, col_offset=19), Name('tag', Load(), lineno=1224, col_offset=25)], lineno=1224, col_offset=19)], [], None, None, lineno=1224, col_offset=8), lineno=1224, col_offset=8)], [], lineno=1223, col_offset=4), Return(Name('out', Load(), lineno=1225, col_offset=11), lineno=1225, col_offset=4)], [], lineno=1173, col_offset=0), FunctionDef('processinginstruction', arguments([], None, None, []), [Expr(Str('\n    Test ProcessingInstruction directly\n\n    >>> ET.tostring(ET.ProcessingInstruction(\'test\', \'instruction\'))\n    \'<?test instruction?>\'\n    >>> ET.tostring(ET.PI(\'test\', \'instruction\'))\n    \'<?test instruction?>\'\n\n    Issue #2746\n\n    >>> ET.tostring(ET.PI(\'test\', \'<testing&>\'))\n    \'<?test <testing&>?>\'\n    >>> ET.tostring(ET.PI(\'test\', u\'<testing&>\xe3\'), \'latin1\')\n    "<?xml version=\'1.0\' encoding=\'latin1\'?>\\n<?test <testing&>\\xe3?>"\n    ', lineno=1242, col_offset=-1), lineno=1242, col_offset=-1)], [], lineno=1227, col_offset=0), Assign([Name('XINCLUDE', Store(), lineno=1247, col_offset=0)], Dict([], [], lineno=1247, col_offset=11), lineno=1247, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1249, col_offset=0), Index(Str('C1.xml', lineno=1249, col_offset=9)), Store(), lineno=1249, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>120 Mz is adequate for an average home user.</p>\n  <xi:include href="disclaimer.xml"/>\n</document>\n', lineno=1255, col_offset=-1), lineno=1249, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1257, col_offset=0), Index(Str('disclaimer.xml', lineno=1257, col_offset=9)), Store(), lineno=1257, col_offset=0)], Str("<?xml version='1.0'?>\n<disclaimer>\n  <p>The opinions represented herein represent those of the individual\n  and should not be interpreted as official policy endorsed by this\n  organization.</p>\n</disclaimer>\n", lineno=1264, col_offset=-1), lineno=1257, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1266, col_offset=0), Index(Str('C2.xml', lineno=1266, col_offset=9)), Store(), lineno=1266, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>This document has been accessed\n  <xi:include href="count.txt" parse="text"/> times.</p>\n</document>\n', lineno=1272, col_offset=-1), lineno=1266, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1274, col_offset=0), Index(Str('count.txt', lineno=1274, col_offset=9)), Store(), lineno=1274, col_offset=0)], Str('324387', lineno=1274, col_offset=24), lineno=1274, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1276, col_offset=0), Index(Str('C2b.xml', lineno=1276, col_offset=9)), Store(), lineno=1276, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>This document has been <em>accessed</em>\n  <xi:include href="count.txt" parse="text"/> times.</p>\n</document>\n', lineno=1282, col_offset=-1), lineno=1276, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1284, col_offset=0), Index(Str('C3.xml', lineno=1284, col_offset=9)), Store(), lineno=1284, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>The following is the source of the "data.xml" resource:</p>\n  <example><xi:include href="data.xml" parse="text"/></example>\n</document>\n', lineno=1290, col_offset=-1), lineno=1284, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1292, col_offset=0), Index(Str('data.xml', lineno=1292, col_offset=9)), Store(), lineno=1292, col_offset=0)], Str("<?xml version='1.0'?>\n<data>\n  <item><![CDATA[Brooks & Shields]]></item>\n</data>\n", lineno=1297, col_offset=-1), lineno=1292, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1299, col_offset=0), Index(Str('C5.xml', lineno=1299, col_offset=9)), Store(), lineno=1299, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<div xmlns:xi="http://www.w3.org/2001/XInclude">\n  <xi:include href="example.txt" parse="text">\n    <xi:fallback>\n      <xi:include href="fallback-example.txt" parse="text">\n        <xi:fallback><a href="mailto:bob@example.org">Report error</a></xi:fallback>\n      </xi:include>\n    </xi:fallback>\n  </xi:include>\n</div>\n', lineno=1310, col_offset=-1), lineno=1299, col_offset=0), Assign([Subscript(Name('XINCLUDE', Load(), lineno=1312, col_offset=0), Index(Str('default.xml', lineno=1312, col_offset=9)), Store(), lineno=1312, col_offset=0)], Call(Attribute(Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>Example.</p>\n  <xi:include href="{}"/>\n</document>\n', lineno=1318, col_offset=-1), 'format', Load(), lineno=1318, col_offset=-1), [Call(Attribute(Name('cgi', Load(), lineno=1318, col_offset=11), 'escape', Load(), lineno=1318, col_offset=11), [Name('SIMPLE_XMLFILE', Load(), lineno=1318, col_offset=22), Name('True', Load(), lineno=1318, col_offset=38)], [], None, None, lineno=1318, col_offset=11)], [], None, None, lineno=1318, col_offset=-1), lineno=1312, col_offset=0), FunctionDef('xinclude_loader', arguments([Name('href', Param(), lineno=1320, col_offset=20), Name('parse', Param(), lineno=1320, col_offset=26), Name('encoding', Param(), lineno=1320, col_offset=39)], None, None, [Str('xml', lineno=1320, col_offset=32), Name('None', Load(), lineno=1320, col_offset=48)]), [TryExcept([Assign([Name('data', Store(), lineno=1322, col_offset=8)], Subscript(Name('XINCLUDE', Load(), lineno=1322, col_offset=15), Index(Name('href', Load(), lineno=1322, col_offset=24)), Load(), lineno=1322, col_offset=15), lineno=1322, col_offset=8)], [ExceptHandler(Name('KeyError', Load(), lineno=1323, col_offset=11), None, [Raise(Call(Name('IOError', Load(), lineno=1324, col_offset=14), [Str('resource not found', lineno=1324, col_offset=22)], [], None, None, lineno=1324, col_offset=14), None, None, lineno=1324, col_offset=8)], lineno=1323, col_offset=4)], [], lineno=1321, col_offset=4), If(Compare(Name('parse', Load(), lineno=1325, col_offset=7), [Eq()], [Str('xml', lineno=1325, col_offset=16)], lineno=1325, col_offset=7), [ImportFrom('xml.etree.ElementTree', [alias('XML', None)], 0, lineno=1326, col_offset=8), Return(Call(Name('XML', Load(), lineno=1327, col_offset=15), [Name('data', Load(), lineno=1327, col_offset=19)], [], None, None, lineno=1327, col_offset=15), lineno=1327, col_offset=8)], [], lineno=1325, col_offset=4), Return(Name('data', Load(), lineno=1328, col_offset=11), lineno=1328, col_offset=4)], [], lineno=1320, col_offset=0), FunctionDef('xinclude', arguments([], None, None, []), [Expr(Str('\n    Basic inclusion example (XInclude C.1)\n\n    >>> from xml.etree import ElementTree as ET\n    >>> from xml.etree import ElementInclude\n\n    >>> document = xinclude_loader("C1.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(document) # C1\n    <document>\n      <p>120 Mz is adequate for an average home user.</p>\n      <disclaimer>\n      <p>The opinions represented herein represent those of the individual\n      and should not be interpreted as official policy endorsed by this\n      organization.</p>\n    </disclaimer>\n    </document>\n\n    Textual inclusion example (XInclude C.2)\n\n    >>> document = xinclude_loader("C2.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(document) # C2\n    <document>\n      <p>This document has been accessed\n      324387 times.</p>\n    </document>\n\n    Textual inclusion after sibling element (based on modified XInclude C.2)\n\n    >>> document = xinclude_loader("C2b.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print(serialize(document)) # C2b\n    <document>\n      <p>This document has been <em>accessed</em>\n      324387 times.</p>\n    </document>\n\n    Textual inclusion of XML example (XInclude C.3)\n\n    >>> document = xinclude_loader("C3.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(document) # C3\n    <document>\n      <p>The following is the source of the "data.xml" resource:</p>\n      <example>&lt;?xml version=\'1.0\'?&gt;\n    &lt;data&gt;\n      &lt;item&gt;&lt;![CDATA[Brooks &amp; Shields]]&gt;&lt;/item&gt;\n    &lt;/data&gt;\n    </example>\n    </document>\n\n    Fallback example (XInclude C.5)\n    Note! Fallback support is not yet implemented\n\n    >>> document = xinclude_loader("C5.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    Traceback (most recent call last):\n    IOError: resource not found\n    >>> # print serialize(document) # C5\n    ', lineno=1391, col_offset=-1), lineno=1391, col_offset=-1)], [], lineno=1330, col_offset=0), FunctionDef('xinclude_default', arguments([], None, None, []), [Expr(Str('\n    >>> from xml.etree import ElementInclude\n\n    >>> document = xinclude_loader("default.xml")\n    >>> ElementInclude.include(document)\n    >>> print serialize(document) # default\n    <document>\n      <p>Example.</p>\n      <root>\n       <element key="value">text</element>\n       <element>text</element>tail\n       <empty-element />\n    </root>\n    </document>\n    ', lineno=1408, col_offset=-1), lineno=1408, col_offset=-1)], [], lineno=1393, col_offset=0), Assign([Name('XINCLUDE_BAD', Store(), lineno=1413, col_offset=0)], Dict([], [], lineno=1413, col_offset=15), lineno=1413, col_offset=0), Assign([Subscript(Name('XINCLUDE_BAD', Load(), lineno=1415, col_offset=0), Index(Str('B1.xml', lineno=1415, col_offset=13)), Store(), lineno=1415, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<document xmlns:xi="http://www.w3.org/2001/XInclude">\n  <p>120 Mz is adequate for an average home user.</p>\n  <xi:include href="disclaimer.xml" parse="BAD_TYPE"/>\n</document>\n', lineno=1421, col_offset=-1), lineno=1415, col_offset=0), Assign([Subscript(Name('XINCLUDE_BAD', Load(), lineno=1423, col_offset=0), Index(Str('B2.xml', lineno=1423, col_offset=13)), Store(), lineno=1423, col_offset=0)], Str('<?xml version=\'1.0\'?>\n<div xmlns:xi="http://www.w3.org/2001/XInclude">\n    <xi:fallback></xi:fallback>\n</div>\n', lineno=1428, col_offset=-1), lineno=1423, col_offset=0), FunctionDef('xinclude_failures', arguments([], None, None, []), [Expr(Str('\n    Test failure to locate included XML file.\n\n    >>> from xml.etree import ElementInclude\n\n    >>> def none_loader(href, parser, encoding=None):\n    ...     return None\n\n    >>> document = ET.XML(XINCLUDE["C1.xml"])\n    >>> ElementInclude.include(document, loader=none_loader)\n    Traceback (most recent call last):\n    FatalIncludeError: cannot load \'disclaimer.xml\' as \'xml\'\n\n    Test failure to locate included text file.\n\n    >>> document = ET.XML(XINCLUDE["C2.xml"])\n    >>> ElementInclude.include(document, loader=none_loader)\n    Traceback (most recent call last):\n    FatalIncludeError: cannot load \'count.txt\' as \'text\'\n\n    Test bad parse type.\n\n    >>> document = ET.XML(XINCLUDE_BAD["B1.xml"])\n    >>> ElementInclude.include(document, loader=none_loader)\n    Traceback (most recent call last):\n    FatalIncludeError: unknown parse type in xi:include tag (\'BAD_TYPE\')\n\n    Test xi:fallback outside xi:include.\n\n    >>> document = ET.XML(XINCLUDE_BAD["B2.xml"])\n    >>> ElementInclude.include(document, loader=none_loader)\n    Traceback (most recent call last):\n    FatalIncludeError: xi:fallback tag must be child of xi:include (\'{http://www.w3.org/2001/XInclude}fallback\')\n    ', lineno=1464, col_offset=-1), lineno=1464, col_offset=-1)], [], lineno=1430, col_offset=0), FunctionDef('bug_xmltoolkit21', arguments([], None, None, []), [Expr(Str('\n\n    marshaller gives obscure errors for non-string values\n\n    >>> elem = ET.Element(123)\n    >>> serialize(elem) # tag\n    Traceback (most recent call last):\n    TypeError: cannot serialize 123 (type int)\n    >>> elem = ET.Element("elem")\n    >>> elem.text = 123\n    >>> serialize(elem) # text\n    Traceback (most recent call last):\n    TypeError: cannot serialize 123 (type int)\n    >>> elem = ET.Element("elem")\n    >>> elem.tail = 123\n    >>> serialize(elem) # tail\n    Traceback (most recent call last):\n    TypeError: cannot serialize 123 (type int)\n    >>> elem = ET.Element("elem")\n    >>> elem.set(123, "123")\n    >>> serialize(elem) # attribute key\n    Traceback (most recent call last):\n    TypeError: cannot serialize 123 (type int)\n    >>> elem = ET.Element("elem")\n    >>> elem.set("123", 123)\n    >>> serialize(elem) # attribute value\n    Traceback (most recent call last):\n    TypeError: cannot serialize 123 (type int)\n\n    ', lineno=1499, col_offset=-1), lineno=1499, col_offset=-1)], [], lineno=1469, col_offset=0), FunctionDef('bug_xmltoolkit25', arguments([], None, None, []), [Expr(Str('\n\n    typo in ElementTree.findtext\n\n    >>> elem = ET.XML(SAMPLE_XML)\n    >>> tree = ET.ElementTree(elem)\n    >>> tree.findtext("tag")\n    \'text\'\n    >>> tree.findtext("section/tag")\n    \'subtext\'\n\n    ', lineno=1513, col_offset=-1), lineno=1513, col_offset=-1)], [], lineno=1501, col_offset=0), FunctionDef('bug_xmltoolkit28', arguments([], None, None, []), [Expr(Str('\n\n    .//tag causes exceptions\n\n    >>> tree = ET.XML("<doc><table><tbody/></table></doc>")\n    >>> summarize_list(tree.findall(".//thead"))\n    []\n    >>> summarize_list(tree.findall(".//tbody"))\n    [\'tbody\']\n\n    ', lineno=1526, col_offset=-1), lineno=1526, col_offset=-1)], [], lineno=1515, col_offset=0), FunctionDef('bug_xmltoolkitX1', arguments([], None, None, []), [Expr(Str('\n\n    dump() doesn\'t flush the output buffer\n\n    >>> tree = ET.XML("<doc><table><tbody/></table></doc>")\n    >>> ET.dump(tree); sys.stdout.write("tail")\n    <doc><table><tbody /></table></doc>\n    tail\n\n    ', lineno=1538, col_offset=-1), lineno=1538, col_offset=-1)], [], lineno=1528, col_offset=0), FunctionDef('bug_xmltoolkit39', arguments([], None, None, []), [Expr(Str('\n\n    non-ascii element and attribute names doesn\'t work\n\n    >>> tree = ET.XML("<?xml version=\'1.0\' encoding=\'iso-8859-1\'?><t\xe4g />")\n    >>> ET.tostring(tree, "utf-8")\n    \'<t\\xc3\\xa4g />\'\n\n    >>> tree = ET.XML("<?xml version=\'1.0\' encoding=\'iso-8859-1\'?><tag \xe4ttr=\'v&#228;lue\' />")\n    >>> tree.attrib\n    {u\'\\xe4ttr\': u\'v\\xe4lue\'}\n    >>> ET.tostring(tree, "utf-8")\n    \'<tag \\xc3\\xa4ttr="v\\xc3\\xa4lue" />\'\n\n    >>> tree = ET.XML("<?xml version=\'1.0\' encoding=\'iso-8859-1\'?><t\xe4g>text</t\xe4g>")\n    >>> ET.tostring(tree, "utf-8")\n    \'<t\\xc3\\xa4g>text</t\\xc3\\xa4g>\'\n\n    >>> tree = ET.Element(u"t\\u00e4g")\n    >>> ET.tostring(tree, "utf-8")\n    \'<t\\xc3\\xa4g />\'\n\n    >>> tree = ET.Element("tag")\n    >>> tree.set(u"\\u00e4ttr", u"v\\u00e4lue")\n    >>> ET.tostring(tree, "utf-8")\n    \'<tag \\xc3\\xa4ttr="v\\xc3\\xa4lue" />\'\n\n    ', lineno=1568, col_offset=-1), lineno=1568, col_offset=-1)], [], lineno=1540, col_offset=0), FunctionDef('bug_xmltoolkit54', arguments([], None, None, []), [Expr(Str('\n\n    problems handling internally defined entities\n\n    >>> e = ET.XML("<!DOCTYPE doc [<!ENTITY ldots \'&#x8230;\'>]><doc>&ldots;</doc>")\n    >>> serialize(e)\n    \'<doc>&#33328;</doc>\'\n\n    ', lineno=1579, col_offset=-1), lineno=1579, col_offset=-1)], [], lineno=1570, col_offset=0), FunctionDef('bug_xmltoolkit55', arguments([], None, None, []), [Expr(Str('\n\n    make sure we\'re reporting the first error, not the last\n\n    >>> e = ET.XML("<!DOCTYPE doc SYSTEM \'doc.dtd\'><doc>&ldots;&ndots;&rdots;</doc>")\n    Traceback (most recent call last):\n    ParseError: undefined entity &ldots;: line 1, column 36\n\n    ', lineno=1590, col_offset=-1), lineno=1590, col_offset=-1)], [], lineno=1581, col_offset=0), ClassDef('ExceptionFile', [], [FunctionDef('read', arguments([Name('self', Param(), lineno=1593, col_offset=13), Name('x', Param(), lineno=1593, col_offset=19)], None, None, []), [Raise(Name('IOError', Load(), lineno=1594, col_offset=14), None, None, lineno=1594, col_offset=8)], [], lineno=1593, col_offset=4)], [], lineno=1592, col_offset=0), FunctionDef('xmltoolkit60', arguments([], None, None, []), [Expr(Str('\n\n    Handle crash in stream source.\n    >>> tree = ET.parse(ExceptionFile())\n    Traceback (most recent call last):\n    IOError\n\n    ', lineno=1604, col_offset=-1), lineno=1604, col_offset=-1)], [], lineno=1596, col_offset=0), Assign([Name('XMLTOOLKIT62_DOC', Store(), lineno=1606, col_offset=0)], Str('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE patent-application-publication SYSTEM "pap-v15-2001-01-31.dtd" []>\n<patent-application-publication>\n<subdoc-abstract>\n<paragraph id="A-0001" lvl="0">A new cultivar of Begonia plant named &lsquo;BCT9801BEG&rsquo;.</paragraph>\n</subdoc-abstract>\n</patent-application-publication>', lineno=1612, col_offset=-1), lineno=1606, col_offset=0), FunctionDef('xmltoolkit62', arguments([], None, None, []), [Expr(Str("\n\n    Don't crash when using custom entities.\n\n    >>> xmltoolkit62()\n    u'A new cultivar of Begonia plant named \\u2018BCT9801BEG\\u2019.'\n\n    ", lineno=1623, col_offset=-1), lineno=1623, col_offset=-1), Assign([Name('ENTITIES', Store(), lineno=1624, col_offset=4)], Dict([Str(u'rsquo', lineno=1624, col_offset=16), Str(u'lsquo', lineno=1624, col_offset=37)], [Str(u'\u2019', lineno=1624, col_offset=26), Str(u'\u2018', lineno=1624, col_offset=47)], lineno=1624, col_offset=15), lineno=1624, col_offset=4), Assign([Name('parser', Store(), lineno=1625, col_offset=4)], Call(Attribute(Name('ET', Load(), lineno=1625, col_offset=13), 'XMLTreeBuilder', Load(), lineno=1625, col_offset=13), [], [], None, None, lineno=1625, col_offset=13), lineno=1625, col_offset=4), Expr(Call(Attribute(Attribute(Name('parser', Load(), lineno=1626, col_offset=4), 'entity', Load(), lineno=1626, col_offset=4), 'update', Load(), lineno=1626, col_offset=4), [Name('ENTITIES', Load(), lineno=1626, col_offset=25)], [], None, None, lineno=1626, col_offset=4), lineno=1626, col_offset=4), Expr(Call(Attribute(Name('parser', Load(), lineno=1627, col_offset=4), 'feed', Load(), lineno=1627, col_offset=4), [Name('XMLTOOLKIT62_DOC', Load(), lineno=1627, col_offset=16)], [], None, None, lineno=1627, col_offset=4), lineno=1627, col_offset=4), Assign([Name('t', Store(), lineno=1628, col_offset=4)], Call(Attribute(Name('parser', Load(), lineno=1628, col_offset=8), 'close', Load(), lineno=1628, col_offset=8), [], [], None, None, lineno=1628, col_offset=8), lineno=1628, col_offset=4), Return(Attribute(Call(Attribute(Name('t', Load(), lineno=1629, col_offset=11), 'find', Load(), lineno=1629, col_offset=11), [Str('.//paragraph', lineno=1629, col_offset=18)], [], None, None, lineno=1629, col_offset=11), 'text', Load(), lineno=1629, col_offset=11), lineno=1629, col_offset=4)], [], lineno=1615, col_offset=0), FunctionDef('xmltoolkit63', arguments([], None, None, []), [Expr(Str('\n\n    Check reference leak.\n    >>> xmltoolkit63()\n    >>> count = sys.getrefcount(None)\n    >>> for i in range(1000):\n    ...     xmltoolkit63()\n    >>> sys.getrefcount(None) - count\n    0\n\n    ', lineno=1642, col_offset=-1), lineno=1642, col_offset=-1), Assign([Name('tree', Store(), lineno=1643, col_offset=4)], Call(Attribute(Name('ET', Load(), lineno=1643, col_offset=11), 'TreeBuilder', Load(), lineno=1643, col_offset=11), [], [], None, None, lineno=1643, col_offset=11), lineno=1643, col_offset=4), Expr(Call(Attribute(Name('tree', Load(), lineno=1644, col_offset=4), 'start', Load(), lineno=1644, col_offset=4), [Str('tag', lineno=1644, col_offset=15), Dict([], [], lineno=1644, col_offset=22)], [], None, None, lineno=1644, col_offset=4), lineno=1644, col_offset=4), Expr(Call(Attribute(Name('tree', Load(), lineno=1645, col_offset=4), 'data', Load(), lineno=1645, col_offset=4), [Str('text', lineno=1645, col_offset=14)], [], None, None, lineno=1645, col_offset=4), lineno=1645, col_offset=4), Expr(Call(Attribute(Name('tree', Load(), lineno=1646, col_offset=4), 'end', Load(), lineno=1646, col_offset=4), [Str('tag', lineno=1646, col_offset=13)], [], None, None, lineno=1646, col_offset=4), lineno=1646, col_offset=4)], [], lineno=1631, col_offset=0), FunctionDef('bug_200708_newline', arguments([], None, None, []), [Expr(Str('\n\n    Preserve newlines in attributes.\n\n    >>> e = ET.Element(\'SomeTag\', text="def _f():\\n  return 3\\n")\n    >>> ET.tostring(e)\n    \'<SomeTag text="def _f():&#10;  return 3&#10;" />\'\n    >>> ET.XML(ET.tostring(e)).get("text")\n    \'def _f():\\n  return 3\\n\'\n    >>> ET.tostring(ET.XML(ET.tostring(e)))\n    \'<SomeTag text="def _f():&#10;  return 3&#10;" />\'\n\n    ', lineno=1664, col_offset=-1), lineno=1664, col_offset=-1)], [], lineno=1651, col_offset=0), FunctionDef('bug_200708_close', arguments([], None, None, []), [Expr(Str('\n\n    Test default builder.\n    >>> parser = ET.XMLParser() # default\n    >>> parser.feed("<element>some text</element>")\n    >>> summarize(parser.close())\n    \'element\'\n\n    Test custom builder.\n    >>> class EchoTarget:\n    ...     def close(self):\n    ...         return ET.Element("element") # simulate root\n    >>> parser = ET.XMLParser(EchoTarget())\n    >>> parser.feed("<element>some text</element>")\n    >>> summarize(parser.close())\n    \'element\'\n\n    ', lineno=1684, col_offset=-1), lineno=1684, col_offset=-1)], [], lineno=1666, col_offset=0), FunctionDef('bug_200709_default_namespace', arguments([], None, None, []), [Expr(Str('\n\n    >>> e = ET.Element("{default}elem")\n    >>> s = ET.SubElement(e, "{default}elem")\n    >>> serialize(e, default_namespace="default") # 1\n    \'<elem xmlns="default"><elem /></elem>\'\n\n    >>> e = ET.Element("{default}elem")\n    >>> s = ET.SubElement(e, "{default}elem")\n    >>> s = ET.SubElement(e, "{not-default}elem")\n    >>> serialize(e, default_namespace="default") # 2\n    \'<elem xmlns="default" xmlns:ns1="not-default"><elem /><ns1:elem /></elem>\'\n\n    >>> e = ET.Element("{default}elem")\n    >>> s = ET.SubElement(e, "{default}elem")\n    >>> s = ET.SubElement(e, "elem") # unprefixed name\n    >>> serialize(e, default_namespace="default") # 3\n    Traceback (most recent call last):\n    ValueError: cannot use non-qualified names with default_namespace option\n\n    ', lineno=1707, col_offset=-1), lineno=1707, col_offset=-1)], [], lineno=1686, col_offset=0), FunctionDef('bug_200709_register_namespace', arguments([], None, None, []), [Expr(Str('\n\n    >>> ET.tostring(ET.Element("{http://namespace.invalid/does/not/exist/}title"))\n    \'<ns0:title xmlns:ns0="http://namespace.invalid/does/not/exist/" />\'\n    >>> ET.register_namespace("foo", "http://namespace.invalid/does/not/exist/")\n    >>> ET.tostring(ET.Element("{http://namespace.invalid/does/not/exist/}title"))\n    \'<foo:title xmlns:foo="http://namespace.invalid/does/not/exist/" />\'\n\n    And the Dublin Core namespace is in the default list:\n\n    >>> ET.tostring(ET.Element("{http://purl.org/dc/elements/1.1/}title"))\n    \'<dc:title xmlns:dc="http://purl.org/dc/elements/1.1/" />\'\n\n    ', lineno=1723, col_offset=-1), lineno=1723, col_offset=-1)], [], lineno=1709, col_offset=0), FunctionDef('bug_200709_element_comment', arguments([], None, None, []), [Expr(Str("\n\n    Not sure if this can be fixed, really (since the serializer needs\n    ET.Comment, not cET.comment).\n\n    >>> a = ET.Element('a')\n    >>> a.append(ET.Comment('foo'))\n    >>> a[0].tag == ET.Comment\n    True\n\n    >>> a = ET.Element('a')\n    >>> a.append(ET.PI('foo'))\n    >>> a[0].tag == ET.PI\n    True\n\n    ", lineno=1741, col_offset=-1), lineno=1741, col_offset=-1)], [], lineno=1725, col_offset=0), FunctionDef('bug_200709_element_insert', arguments([], None, None, []), [Expr(Str("\n\n    >>> a = ET.Element('a')\n    >>> b = ET.SubElement(a, 'b')\n    >>> c = ET.SubElement(a, 'c')\n    >>> d = ET.Element('d')\n    >>> a.insert(0, d)\n    >>> summarize_list(a)\n    ['d', 'b', 'c']\n    >>> a.insert(-1, d)\n    >>> summarize_list(a)\n    ['d', 'b', 'd', 'c']\n\n    ", lineno=1757, col_offset=-1), lineno=1757, col_offset=-1)], [], lineno=1743, col_offset=0), FunctionDef('bug_200709_iter_comment', arguments([], None, None, []), [Expr(Str('\n\n    >>> a = ET.Element(\'a\')\n    >>> b = ET.SubElement(a, \'b\')\n    >>> comment_b = ET.Comment("TEST-b")\n    >>> b.append(comment_b)\n    >>> summarize_list(a.iter(ET.Comment))\n    [\'<Comment>\']\n\n    ', lineno=1769, col_offset=-1), lineno=1769, col_offset=-1)], [], lineno=1759, col_offset=0), FunctionDef('bug_1534630', arguments([], None, None, []), [Expr(Str('\n\n    >>> bob = ET.TreeBuilder()\n    >>> e = bob.data("data")\n    >>> e = bob.start("tag", {})\n    >>> e = bob.end("tag")\n    >>> e = bob.close()\n    >>> serialize(e)\n    \'<tag />\'\n\n    ', lineno=1785, col_offset=-1), lineno=1785, col_offset=-1)], [], lineno=1774, col_offset=0), FunctionDef('check_issue6233', arguments([], None, None, []), [Expr(Str('\n\n    >>> e = ET.XML("<?xml version=\'1.0\' encoding=\'utf-8\'?><body>t\\xc3\\xa3g</body>")\n    >>> ET.tostring(e, \'ascii\')\n    "<?xml version=\'1.0\' encoding=\'ascii\'?>\\n<body>t&#227;g</body>"\n    >>> e = ET.XML("<?xml version=\'1.0\' encoding=\'iso-8859-1\'?><body>t\\xe3g</body>")\n    >>> ET.tostring(e, \'ascii\')\n    "<?xml version=\'1.0\' encoding=\'ascii\'?>\\n<body>t&#227;g</body>"\n\n    ', lineno=1797, col_offset=-1), lineno=1797, col_offset=-1)], [], lineno=1787, col_offset=0), FunctionDef('check_issue3151', arguments([], None, None, []), [Expr(Str('\n\n    >>> e = ET.XML(\'<prefix:localname xmlns:prefix="${stuff}"/>\')\n    >>> e.tag\n    \'{${stuff}}localname\'\n    >>> t = ET.ElementTree(e)\n    >>> ET.tostring(e)\n    \'<ns0:localname xmlns:ns0="${stuff}" />\'\n\n    ', lineno=1809, col_offset=-1), lineno=1809, col_offset=-1)], [], lineno=1799, col_offset=0), FunctionDef('check_issue6565', arguments([], None, None, []), [Expr(Str('\n\n    >>> elem = ET.XML("<body><tag/></body>")\n    >>> summarize_list(elem)\n    [\'tag\']\n    >>> newelem = ET.XML(SAMPLE_XML)\n    >>> elem[:] = newelem[:]\n    >>> summarize_list(elem)\n    [\'tag\', \'tag\', \'section\']\n\n    ', lineno=1822, col_offset=-1), lineno=1822, col_offset=-1)], [], lineno=1811, col_offset=0), ClassDef('CleanContext', [Name('object', Load(), lineno=1827, col_offset=19)], [Expr(Str('Provide default namespace mapping and path cache.', lineno=1828, col_offset=4), lineno=1828, col_offset=4), Assign([Name('checkwarnings', Store(), lineno=1829, col_offset=4)], Name('None', Load(), lineno=1829, col_offset=20), lineno=1829, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1831, col_offset=17), Name('quiet', Param(), lineno=1831, col_offset=23)], None, None, [Name('False', Load(), lineno=1831, col_offset=29)]), [If(Compare(Attribute(Attribute(Name('sys', Load(), lineno=1832, col_offset=11), 'flags', Load(), lineno=1832, col_offset=11), 'optimize', Load(), lineno=1832, col_offset=11), [GtE()], [Num(2, lineno=1832, col_offset=33)], lineno=1832, col_offset=11), [Assign([Name('quiet', Store(), lineno=1835, col_offset=12)], Name('True', Load(), lineno=1835, col_offset=20), lineno=1835, col_offset=12)], [], lineno=1832, col_offset=8), Assign([Name('deprecations', Store(), lineno=1836, col_offset=8)], Tuple([Tuple([Str("This search is broken in 1.3 and earlier, and will be fixed in a future version.  If you rely on the current behaviour, change it to '.+'", lineno=1838, col_offset=13), Name('FutureWarning', Load(), lineno=1840, col_offset=34)], Load(), lineno=1838, col_offset=13), Tuple([Str('This method will be removed in future versions.  Use .+ instead.', lineno=1842, col_offset=13), Name('DeprecationWarning', Load(), lineno=1843, col_offset=32)], Load(), lineno=1842, col_offset=13), Tuple([Str('This method will be removed in future versions.  Use .+ instead.', lineno=1844, col_offset=13), Name('PendingDeprecationWarning', Load(), lineno=1845, col_offset=32)], Load(), lineno=1844, col_offset=13), Tuple([Str('This method of XMLParser is deprecated.  Define doctype.. method on the TreeBuilder target.', lineno=1847, col_offset=13), Name('DeprecationWarning', Load(), lineno=1848, col_offset=50)], Load(), lineno=1847, col_offset=13)], Load(), lineno=1838, col_offset=12), lineno=1836, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1849, col_offset=8), 'checkwarnings', Store(), lineno=1849, col_offset=8)], Call(Attribute(Name('test_support', Load(), lineno=1849, col_offset=29), 'check_warnings', Load(), lineno=1849, col_offset=29), [], [keyword('quiet', Name('quiet', Load(), lineno=1850, col_offset=63))], Name('deprecations', Load(), lineno=1849, col_offset=58), None, lineno=1849, col_offset=29), lineno=1849, col_offset=8)], [], lineno=1831, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=1852, col_offset=18)], None, None, []), [ImportFrom('xml.etree', [alias('ElementTree', None)], 0, lineno=1853, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1854, col_offset=8), '_nsmap', Store(), lineno=1854, col_offset=8)], Attribute(Name('ElementTree', Load(), lineno=1854, col_offset=22), '_namespace_map', Load(), lineno=1854, col_offset=22), lineno=1854, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1855, col_offset=8), '_path_cache', Store(), lineno=1855, col_offset=8)], Attribute(Attribute(Name('ElementTree', Load(), lineno=1855, col_offset=27), 'ElementPath', Load(), lineno=1855, col_offset=27), '_cache', Load(), lineno=1855, col_offset=27), lineno=1855, col_offset=8), Assign([Attribute(Name('ElementTree', Load(), lineno=1857, col_offset=8), '_namespace_map', Store(), lineno=1857, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1857, col_offset=37), '_nsmap', Load(), lineno=1857, col_offset=37), 'copy', Load(), lineno=1857, col_offset=37), [], [], None, None, lineno=1857, col_offset=37), lineno=1857, col_offset=8), Assign([Attribute(Attribute(Name('ElementTree', Load(), lineno=1859, col_offset=8), 'ElementPath', Load(), lineno=1859, col_offset=8), '_cache', Store(), lineno=1859, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1859, col_offset=41), '_path_cache', Load(), lineno=1859, col_offset=41), 'copy', Load(), lineno=1859, col_offset=41), [], [], None, None, lineno=1859, col_offset=41), lineno=1859, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1860, col_offset=8), 'checkwarnings', Load(), lineno=1860, col_offset=8), '__enter__', Load(), lineno=1860, col_offset=8), [], [], None, None, lineno=1860, col_offset=8), lineno=1860, col_offset=8)], [], lineno=1852, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=1862, col_offset=17)], 'args', None, []), [ImportFrom('xml.etree', [alias('ElementTree', None)], 0, lineno=1863, col_offset=8), Assign([Attribute(Name('ElementTree', Load(), lineno=1865, col_offset=8), '_namespace_map', Store(), lineno=1865, col_offset=8)], Attribute(Name('self', Load(), lineno=1865, col_offset=37), '_nsmap', Load(), lineno=1865, col_offset=37), lineno=1865, col_offset=8), Assign([Attribute(Attribute(Name('ElementTree', Load(), lineno=1866, col_offset=8), 'ElementPath', Load(), lineno=1866, col_offset=8), '_cache', Store(), lineno=1866, col_offset=8)], Attribute(Name('self', Load(), lineno=1866, col_offset=41), '_path_cache', Load(), lineno=1866, col_offset=41), lineno=1866, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1867, col_offset=8), 'checkwarnings', Load(), lineno=1867, col_offset=8), '__exit__', Load(), lineno=1867, col_offset=8), [], [], Name('args', Load(), lineno=1867, col_offset=37), None, lineno=1867, col_offset=8), lineno=1867, col_offset=8)], [], lineno=1862, col_offset=4)], [], lineno=1827, col_offset=0), FunctionDef('test_main', arguments([Name('module_name', Param(), lineno=1870, col_offset=14)], None, None, [Str('xml.etree.ElementTree', lineno=1870, col_offset=26)]), [ImportFrom('test', [alias('test_xml_etree', None)], 0, lineno=1871, col_offset=4), Assign([Name('use_py_module', Store(), lineno=1873, col_offset=4)], Compare(Name('module_name', Load(), lineno=1873, col_offset=21), [Eq()], [Str('xml.etree.ElementTree', lineno=1873, col_offset=36)], lineno=1873, col_offset=21), lineno=1873, col_offset=4), Assert(Compare(Attribute(Attribute(Name('test_xml_etree', Load(), lineno=1876, col_offset=11), 'ET', Load(), lineno=1876, col_offset=11), '__name__', Load(), lineno=1876, col_offset=11), [Eq()], [Name('module_name', Load(), lineno=1876, col_offset=41)], lineno=1876, col_offset=11), None, lineno=1876, col_offset=4), With(Call(Name('CleanContext', Load(), lineno=1879, col_offset=9), [], [keyword('quiet', UnaryOp(Not(), Name('use_py_module', Load(), lineno=1879, col_offset=32), lineno=1879, col_offset=28))], None, None, lineno=1879, col_offset=9), None, [Expr(Call(Attribute(Name('test_support', Load(), lineno=1880, col_offset=8), 'run_doctest', Load(), lineno=1880, col_offset=8), [Name('test_xml_etree', Load(), lineno=1880, col_offset=33)], [keyword('verbosity', Name('True', Load(), lineno=1880, col_offset=59))], None, None, lineno=1880, col_offset=8), lineno=1880, col_offset=8)], lineno=1879, col_offset=9), Assert(Compare(Attribute(Attribute(Name('test_xml_etree', Load(), lineno=1883, col_offset=11), 'ET', Load(), lineno=1883, col_offset=11), '__name__', Load(), lineno=1883, col_offset=11), [Eq()], [Name('module_name', Load(), lineno=1883, col_offset=41)], lineno=1883, col_offset=11), None, lineno=1883, col_offset=4)], [], lineno=1870, col_offset=0), If(Compare(Name('__name__', Load(), lineno=1885, col_offset=3), [Eq()], [Str('__main__', lineno=1885, col_offset=15)], lineno=1885, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=1886, col_offset=4), [], [], None, None, lineno=1886, col_offset=4), lineno=1886, col_offset=4)], [], lineno=1885, col_offset=0)])
