Module([Import([alias('os', None), alias('unittest', None)], lineno=24, col_offset=0), Import([alias('sqlite3', 'sqlite')], lineno=25, col_offset=0), ClassDef('CollationTests', [Attribute(Name('unittest', Load(), lineno=27, col_offset=21), 'TestCase', Load(), lineno=27, col_offset=21)], [FunctionDef('setUp', arguments([Name('self', Param(), lineno=28, col_offset=14)], None, None, []), [Pass( lineno=29, col_offset=8)], [], lineno=28, col_offset=4), FunctionDef('tearDown', arguments([Name('self', Param(), lineno=31, col_offset=17)], None, None, []), [Pass( lineno=32, col_offset=8)], [], lineno=31, col_offset=4), FunctionDef('CheckCreateCollationNotCallable', arguments([Name('self', Param(), lineno=34, col_offset=40)], None, None, []), [Assign([Name('con', Store(), lineno=35, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=35, col_offset=14), 'connect', Load(), lineno=35, col_offset=14), [Str(':memory:', lineno=35, col_offset=29)], [], None, None, lineno=35, col_offset=14), lineno=35, col_offset=8), TryExcept([Expr(Call(Attribute(Name('con', Load(), lineno=37, col_offset=12), 'create_collation', Load(), lineno=37, col_offset=12), [Str('X', lineno=37, col_offset=33), Num(42, lineno=37, col_offset=38)], [], None, None, lineno=37, col_offset=12), lineno=37, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=38, col_offset=12), 'fail', Load(), lineno=38, col_offset=12), [Str('should have raised a TypeError', lineno=38, col_offset=22)], [], None, None, lineno=38, col_offset=12), lineno=38, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=39, col_offset=15), Name('e', Store(), lineno=39, col_offset=26), [Expr(Call(Attribute(Name('self', Load(), lineno=40, col_offset=12), 'assertEqual', Load(), lineno=40, col_offset=12), [Subscript(Attribute(Name('e', Load(), lineno=40, col_offset=29), 'args', Load(), lineno=40, col_offset=29), Index(Num(0, lineno=40, col_offset=36)), Load(), lineno=40, col_offset=29), Str('parameter must be callable', lineno=40, col_offset=40)], [], None, None, lineno=40, col_offset=12), lineno=40, col_offset=12)], lineno=39, col_offset=8)], [], lineno=36, col_offset=8)], [], lineno=34, col_offset=4), FunctionDef('CheckCreateCollationNotAscii', arguments([Name('self', Param(), lineno=42, col_offset=37)], None, None, []), [Assign([Name('con', Store(), lineno=43, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=43, col_offset=14), 'connect', Load(), lineno=43, col_offset=14), [Str(':memory:', lineno=43, col_offset=29)], [], None, None, lineno=43, col_offset=14), lineno=43, col_offset=8), TryExcept([Expr(Call(Attribute(Name('con', Load(), lineno=45, col_offset=12), 'create_collation', Load(), lineno=45, col_offset=12), [Str('coll\xe4', lineno=45, col_offset=33), Name('cmp', Load(), lineno=45, col_offset=42)], [], None, None, lineno=45, col_offset=12), lineno=45, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=46, col_offset=12), 'fail', Load(), lineno=46, col_offset=12), [Str('should have raised a ProgrammingError', lineno=46, col_offset=22)], [], None, None, lineno=46, col_offset=12), lineno=46, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=47, col_offset=15), 'ProgrammingError', Load(), lineno=47, col_offset=15), Name('e', Store(), lineno=47, col_offset=40), [Pass( lineno=48, col_offset=12)], lineno=47, col_offset=8)], [], lineno=44, col_offset=8)], [], lineno=42, col_offset=4), FunctionDef('CheckCollationIsUsed', arguments([Name('self', Param(), lineno=50, col_offset=29)], None, None, []), [If(Compare(Attribute(Name('sqlite', Load(), lineno=51, col_offset=11), 'version_info', Load(), lineno=51, col_offset=11), [Lt()], [Tuple([Num(3, lineno=51, col_offset=34), Num(2, lineno=51, col_offset=37), Num(1, lineno=51, col_offset=40)], Load(), lineno=51, col_offset=34)], lineno=51, col_offset=11), [Return(None, lineno=52, col_offset=12)], [], lineno=51, col_offset=8), FunctionDef('mycoll', arguments([Name('x', Param(), lineno=53, col_offset=19), Name('y', Param(), lineno=53, col_offset=22)], None, None, []), [Return(UnaryOp(USub(), Call(Name('cmp', Load(), lineno=55, col_offset=20), [Name('x', Load(), lineno=55, col_offset=24), Name('y', Load(), lineno=55, col_offset=27)], [], None, None, lineno=55, col_offset=20), lineno=55, col_offset=19), lineno=55, col_offset=12)], [], lineno=53, col_offset=8), Assign([Name('con', Store(), lineno=57, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=57, col_offset=14), 'connect', Load(), lineno=57, col_offset=14), [Str(':memory:', lineno=57, col_offset=29)], [], None, None, lineno=57, col_offset=14), lineno=57, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=58, col_offset=8), 'create_collation', Load(), lineno=58, col_offset=8), [Str('mycoll', lineno=58, col_offset=29), Name('mycoll', Load(), lineno=58, col_offset=39)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), Assign([Name('sql', Store(), lineno=59, col_offset=8)], Str("\n            select x from (\n            select 'a' as x\n            union\n            select 'b' as x\n            union\n            select 'c' as x\n            ) order by x collate mycoll\n            ", lineno=67, col_offset=-1), lineno=59, col_offset=8), Assign([Name('result', Store(), lineno=68, col_offset=8)], Call(Attribute(Call(Attribute(Name('con', Load(), lineno=68, col_offset=17), 'execute', Load(), lineno=68, col_offset=17), [Name('sql', Load(), lineno=68, col_offset=29)], [], None, None, lineno=68, col_offset=17), 'fetchall', Load(), lineno=68, col_offset=17), [], [], None, None, lineno=68, col_offset=17), lineno=68, col_offset=8), If(BoolOp(Or(), [Compare(Subscript(Subscript(Name('result', Load(), lineno=69, col_offset=11), Index(Num(0, lineno=69, col_offset=18)), Load(), lineno=69, col_offset=11), Index(Num(0, lineno=69, col_offset=21)), Load(), lineno=69, col_offset=11), [NotEq()], [Str('c', lineno=69, col_offset=27)], lineno=69, col_offset=11), Compare(Subscript(Subscript(Name('result', Load(), lineno=69, col_offset=34), Index(Num(1, lineno=69, col_offset=41)), Load(), lineno=69, col_offset=34), Index(Num(0, lineno=69, col_offset=44)), Load(), lineno=69, col_offset=34), [NotEq()], [Str('b', lineno=69, col_offset=50)], lineno=69, col_offset=34), Compare(Subscript(Subscript(Name('result', Load(), lineno=69, col_offset=57), Index(Num(2, lineno=69, col_offset=64)), Load(), lineno=69, col_offset=57), Index(Num(0, lineno=69, col_offset=67)), Load(), lineno=69, col_offset=57), [NotEq()], [Str('a', lineno=69, col_offset=73)], lineno=69, col_offset=57)], lineno=69, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=12), 'fail', Load(), lineno=70, col_offset=12), [Str('the expected order was not returned', lineno=70, col_offset=22)], [], None, None, lineno=70, col_offset=12), lineno=70, col_offset=12)], [], lineno=69, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=72, col_offset=8), 'create_collation', Load(), lineno=72, col_offset=8), [Str('mycoll', lineno=72, col_offset=29), Name('None', Load(), lineno=72, col_offset=39)], [], None, None, lineno=72, col_offset=8), lineno=72, col_offset=8), TryExcept([Assign([Name('result', Store(), lineno=74, col_offset=12)], Call(Attribute(Call(Attribute(Name('con', Load(), lineno=74, col_offset=21), 'execute', Load(), lineno=74, col_offset=21), [Name('sql', Load(), lineno=74, col_offset=33)], [], None, None, lineno=74, col_offset=21), 'fetchall', Load(), lineno=74, col_offset=21), [], [], None, None, lineno=74, col_offset=21), lineno=74, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=75, col_offset=12), 'fail', Load(), lineno=75, col_offset=12), [Str('should have raised an OperationalError', lineno=75, col_offset=22)], [], None, None, lineno=75, col_offset=12), lineno=75, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=76, col_offset=15), 'OperationalError', Load(), lineno=76, col_offset=15), Name('e', Store(), lineno=76, col_offset=40), [Expr(Call(Attribute(Name('self', Load(), lineno=77, col_offset=12), 'assertEqual', Load(), lineno=77, col_offset=12), [Call(Attribute(Subscript(Attribute(Name('e', Load(), lineno=77, col_offset=29), 'args', Load(), lineno=77, col_offset=29), Index(Num(0, lineno=77, col_offset=36)), Load(), lineno=77, col_offset=29), 'lower', Load(), lineno=77, col_offset=29), [], [], None, None, lineno=77, col_offset=29), Str('no such collation sequence: mycoll', lineno=77, col_offset=48)], [], None, None, lineno=77, col_offset=12), lineno=77, col_offset=12)], lineno=76, col_offset=8)], [], lineno=73, col_offset=8)], [], lineno=50, col_offset=4), FunctionDef('CheckCollationRegisterTwice', arguments([Name('self', Param(), lineno=79, col_offset=36)], None, None, []), [Expr(Str('\n        Register two different collation functions under the same name.\n        Verify that the last one is actually used.\n        ', lineno=83, col_offset=-1), lineno=83, col_offset=-1), Assign([Name('con', Store(), lineno=84, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=84, col_offset=14), 'connect', Load(), lineno=84, col_offset=14), [Str(':memory:', lineno=84, col_offset=29)], [], None, None, lineno=84, col_offset=14), lineno=84, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=85, col_offset=8), 'create_collation', Load(), lineno=85, col_offset=8), [Str('mycoll', lineno=85, col_offset=29), Name('cmp', Load(), lineno=85, col_offset=39)], [], None, None, lineno=85, col_offset=8), lineno=85, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=86, col_offset=8), 'create_collation', Load(), lineno=86, col_offset=8), [Str('mycoll', lineno=86, col_offset=29), Lambda(arguments([Name('x', Param(), lineno=86, col_offset=46), Name('y', Param(), lineno=86, col_offset=49)], None, None, []), UnaryOp(USub(), Call(Name('cmp', Load(), lineno=86, col_offset=53), [Name('x', Load(), lineno=86, col_offset=57), Name('y', Load(), lineno=86, col_offset=60)], [], None, None, lineno=86, col_offset=53), lineno=86, col_offset=52), lineno=86, col_offset=39)], [], None, None, lineno=86, col_offset=8), lineno=86, col_offset=8), Assign([Name('result', Store(), lineno=87, col_offset=8)], Call(Attribute(Call(Attribute(Name('con', Load(), lineno=87, col_offset=17), 'execute', Load(), lineno=87, col_offset=17), [Str("\n            select x from (select 'a' as x union select 'b' as x) order by x collate mycoll\n            ", lineno=89, col_offset=-1)], [], None, None, lineno=87, col_offset=17), 'fetchall', Load(), lineno=87, col_offset=17), [], [], None, None, lineno=87, col_offset=17), lineno=87, col_offset=8), If(BoolOp(Or(), [Compare(Subscript(Subscript(Name('result', Load(), lineno=90, col_offset=11), Index(Num(0, lineno=90, col_offset=18)), Load(), lineno=90, col_offset=11), Index(Num(0, lineno=90, col_offset=21)), Load(), lineno=90, col_offset=11), [NotEq()], [Str('b', lineno=90, col_offset=27)], lineno=90, col_offset=11), Compare(Subscript(Subscript(Name('result', Load(), lineno=90, col_offset=34), Index(Num(1, lineno=90, col_offset=41)), Load(), lineno=90, col_offset=34), Index(Num(0, lineno=90, col_offset=44)), Load(), lineno=90, col_offset=34), [NotEq()], [Str('a', lineno=90, col_offset=50)], lineno=90, col_offset=34)], lineno=90, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=91, col_offset=12), 'fail', Load(), lineno=91, col_offset=12), [Str('wrong collation function is used', lineno=91, col_offset=22)], [], None, None, lineno=91, col_offset=12), lineno=91, col_offset=12)], [], lineno=90, col_offset=8)], [], lineno=79, col_offset=4), FunctionDef('CheckDeregisterCollation', arguments([Name('self', Param(), lineno=93, col_offset=33)], None, None, []), [Expr(Str('\n        Register a collation, then deregister it. Make sure an error is raised if we try\n        to use it.\n        ', lineno=97, col_offset=-1), lineno=97, col_offset=-1), Assign([Name('con', Store(), lineno=98, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=98, col_offset=14), 'connect', Load(), lineno=98, col_offset=14), [Str(':memory:', lineno=98, col_offset=29)], [], None, None, lineno=98, col_offset=14), lineno=98, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=99, col_offset=8), 'create_collation', Load(), lineno=99, col_offset=8), [Str('mycoll', lineno=99, col_offset=29), Name('cmp', Load(), lineno=99, col_offset=39)], [], None, None, lineno=99, col_offset=8), lineno=99, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=100, col_offset=8), 'create_collation', Load(), lineno=100, col_offset=8), [Str('mycoll', lineno=100, col_offset=29), Name('None', Load(), lineno=100, col_offset=39)], [], None, None, lineno=100, col_offset=8), lineno=100, col_offset=8), TryExcept([Expr(Call(Attribute(Name('con', Load(), lineno=102, col_offset=12), 'execute', Load(), lineno=102, col_offset=12), [Str("select 'a' as x union select 'b' as x order by x collate mycoll", lineno=102, col_offset=24)], [], None, None, lineno=102, col_offset=12), lineno=102, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=103, col_offset=12), 'fail', Load(), lineno=103, col_offset=12), [Str('should have raised an OperationalError', lineno=103, col_offset=22)], [], None, None, lineno=103, col_offset=12), lineno=103, col_offset=12)], [ExceptHandler(Attribute(Name('sqlite', Load(), lineno=104, col_offset=15), 'OperationalError', Load(), lineno=104, col_offset=15), Name('e', Store(), lineno=104, col_offset=40), [If(UnaryOp(Not(), Call(Attribute(Subscript(Attribute(Name('e', Load(), lineno=105, col_offset=19), 'args', Load(), lineno=105, col_offset=19), Index(Num(0, lineno=105, col_offset=26)), Load(), lineno=105, col_offset=19), 'startswith', Load(), lineno=105, col_offset=19), [Str('no such collation sequence', lineno=105, col_offset=40)], [], None, None, lineno=105, col_offset=19), lineno=105, col_offset=15), [Expr(Call(Attribute(Name('self', Load(), lineno=106, col_offset=16), 'fail', Load(), lineno=106, col_offset=16), [Str('wrong OperationalError raised', lineno=106, col_offset=26)], [], None, None, lineno=106, col_offset=16), lineno=106, col_offset=16)], [], lineno=105, col_offset=12)], lineno=104, col_offset=8)], [], lineno=101, col_offset=8)], [], lineno=93, col_offset=4)], [], lineno=27, col_offset=0), ClassDef('ProgressTests', [Attribute(Name('unittest', Load(), lineno=108, col_offset=20), 'TestCase', Load(), lineno=108, col_offset=20)], [FunctionDef('CheckProgressHandlerUsed', arguments([Name('self', Param(), lineno=109, col_offset=33)], None, None, []), [Expr(Str('\n        Test that the progress handler is invoked once it is set.\n        ', lineno=112, col_offset=-1), lineno=112, col_offset=-1), Assign([Name('con', Store(), lineno=113, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=113, col_offset=14), 'connect', Load(), lineno=113, col_offset=14), [Str(':memory:', lineno=113, col_offset=29)], [], None, None, lineno=113, col_offset=14), lineno=113, col_offset=8), Assign([Name('progress_calls', Store(), lineno=114, col_offset=8)], List([], Load(), lineno=114, col_offset=25), lineno=114, col_offset=8), FunctionDef('progress', arguments([], None, None, []), [Expr(Call(Attribute(Name('progress_calls', Load(), lineno=116, col_offset=12), 'append', Load(), lineno=116, col_offset=12), [Name('None', Load(), lineno=116, col_offset=34)], [], None, None, lineno=116, col_offset=12), lineno=116, col_offset=12), Return(Num(0, lineno=117, col_offset=19), lineno=117, col_offset=12)], [], lineno=115, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=118, col_offset=8), 'set_progress_handler', Load(), lineno=118, col_offset=8), [Name('progress', Load(), lineno=118, col_offset=33), Num(1, lineno=118, col_offset=43)], [], None, None, lineno=118, col_offset=8), lineno=118, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=119, col_offset=8), 'execute', Load(), lineno=119, col_offset=8), [Str('\n            create table foo(a, b)\n            ', lineno=121, col_offset=-1)], [], None, None, lineno=119, col_offset=8), lineno=119, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=122, col_offset=8), 'assertTrue', Load(), lineno=122, col_offset=8), [Name('progress_calls', Load(), lineno=122, col_offset=24)], [], None, None, lineno=122, col_offset=8), lineno=122, col_offset=8)], [], lineno=109, col_offset=4), FunctionDef('CheckOpcodeCount', arguments([Name('self', Param(), lineno=125, col_offset=25)], None, None, []), [Expr(Str('\n        Test that the opcode argument is respected.\n        ', lineno=128, col_offset=-1), lineno=128, col_offset=-1), Assign([Name('con', Store(), lineno=129, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=129, col_offset=14), 'connect', Load(), lineno=129, col_offset=14), [Str(':memory:', lineno=129, col_offset=29)], [], None, None, lineno=129, col_offset=14), lineno=129, col_offset=8), Assign([Name('progress_calls', Store(), lineno=130, col_offset=8)], List([], Load(), lineno=130, col_offset=25), lineno=130, col_offset=8), FunctionDef('progress', arguments([], None, None, []), [Expr(Call(Attribute(Name('progress_calls', Load(), lineno=132, col_offset=12), 'append', Load(), lineno=132, col_offset=12), [Name('None', Load(), lineno=132, col_offset=34)], [], None, None, lineno=132, col_offset=12), lineno=132, col_offset=12), Return(Num(0, lineno=133, col_offset=19), lineno=133, col_offset=12)], [], lineno=131, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=134, col_offset=8), 'set_progress_handler', Load(), lineno=134, col_offset=8), [Name('progress', Load(), lineno=134, col_offset=33), Num(1, lineno=134, col_offset=43)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Assign([Name('curs', Store(), lineno=135, col_offset=8)], Call(Attribute(Name('con', Load(), lineno=135, col_offset=15), 'cursor', Load(), lineno=135, col_offset=15), [], [], None, None, lineno=135, col_offset=15), lineno=135, col_offset=8), Expr(Call(Attribute(Name('curs', Load(), lineno=136, col_offset=8), 'execute', Load(), lineno=136, col_offset=8), [Str('\n            create table foo (a, b)\n            ', lineno=138, col_offset=-1)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), Assign([Name('first_count', Store(), lineno=139, col_offset=8)], Call(Name('len', Load(), lineno=139, col_offset=22), [Name('progress_calls', Load(), lineno=139, col_offset=26)], [], None, None, lineno=139, col_offset=22), lineno=139, col_offset=8), Assign([Name('progress_calls', Store(), lineno=140, col_offset=8)], List([], Load(), lineno=140, col_offset=25), lineno=140, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=141, col_offset=8), 'set_progress_handler', Load(), lineno=141, col_offset=8), [Name('progress', Load(), lineno=141, col_offset=33), Num(2, lineno=141, col_offset=43)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('curs', Load(), lineno=142, col_offset=8), 'execute', Load(), lineno=142, col_offset=8), [Str('\n            create table bar (a, b)\n            ', lineno=144, col_offset=-1)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8), Assign([Name('second_count', Store(), lineno=145, col_offset=8)], Call(Name('len', Load(), lineno=145, col_offset=23), [Name('progress_calls', Load(), lineno=145, col_offset=27)], [], None, None, lineno=145, col_offset=23), lineno=145, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=146, col_offset=8), 'assertTrue', Load(), lineno=146, col_offset=8), [Compare(Name('first_count', Load(), lineno=146, col_offset=24), [Gt()], [Name('second_count', Load(), lineno=146, col_offset=38)], lineno=146, col_offset=24)], [], None, None, lineno=146, col_offset=8), lineno=146, col_offset=8)], [], lineno=125, col_offset=4), FunctionDef('CheckCancelOperation', arguments([Name('self', Param(), lineno=148, col_offset=29)], None, None, []), [Expr(Str('\n        Test that returning a non-zero value stops the operation in progress.\n        ', lineno=151, col_offset=-1), lineno=151, col_offset=-1), Assign([Name('con', Store(), lineno=152, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=152, col_offset=14), 'connect', Load(), lineno=152, col_offset=14), [Str(':memory:', lineno=152, col_offset=29)], [], None, None, lineno=152, col_offset=14), lineno=152, col_offset=8), Assign([Name('progress_calls', Store(), lineno=153, col_offset=8)], List([], Load(), lineno=153, col_offset=25), lineno=153, col_offset=8), FunctionDef('progress', arguments([], None, None, []), [Expr(Call(Attribute(Name('progress_calls', Load(), lineno=155, col_offset=12), 'append', Load(), lineno=155, col_offset=12), [Name('None', Load(), lineno=155, col_offset=34)], [], None, None, lineno=155, col_offset=12), lineno=155, col_offset=12), Return(Num(1, lineno=156, col_offset=19), lineno=156, col_offset=12)], [], lineno=154, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=157, col_offset=8), 'set_progress_handler', Load(), lineno=157, col_offset=8), [Name('progress', Load(), lineno=157, col_offset=33), Num(1, lineno=157, col_offset=43)], [], None, None, lineno=157, col_offset=8), lineno=157, col_offset=8), Assign([Name('curs', Store(), lineno=158, col_offset=8)], Call(Attribute(Name('con', Load(), lineno=158, col_offset=15), 'cursor', Load(), lineno=158, col_offset=15), [], [], None, None, lineno=158, col_offset=15), lineno=158, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=159, col_offset=8), 'assertRaises', Load(), lineno=159, col_offset=8), [Attribute(Name('sqlite', Load(), lineno=160, col_offset=12), 'OperationalError', Load(), lineno=160, col_offset=12), Attribute(Name('curs', Load(), lineno=161, col_offset=12), 'execute', Load(), lineno=161, col_offset=12), Str('create table bar (a, b)', lineno=162, col_offset=12)], [], None, None, lineno=159, col_offset=8), lineno=159, col_offset=8)], [], lineno=148, col_offset=4), FunctionDef('CheckClearHandler', arguments([Name('self', Param(), lineno=164, col_offset=26)], None, None, []), [Expr(Str('\n        Test that setting the progress handler to None clears the previously set handler.\n        ', lineno=167, col_offset=-1), lineno=167, col_offset=-1), Assign([Name('con', Store(), lineno=168, col_offset=8)], Call(Attribute(Name('sqlite', Load(), lineno=168, col_offset=14), 'connect', Load(), lineno=168, col_offset=14), [Str(':memory:', lineno=168, col_offset=29)], [], None, None, lineno=168, col_offset=14), lineno=168, col_offset=8), Assign([Name('action', Store(), lineno=169, col_offset=8)], Num(0, lineno=169, col_offset=17), lineno=169, col_offset=8), FunctionDef('progress', arguments([], None, None, []), [Assign([Name('action', Store(), lineno=171, col_offset=12)], Num(1, lineno=171, col_offset=21), lineno=171, col_offset=12), Return(Num(0, lineno=172, col_offset=19), lineno=172, col_offset=12)], [], lineno=170, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=173, col_offset=8), 'set_progress_handler', Load(), lineno=173, col_offset=8), [Name('progress', Load(), lineno=173, col_offset=33), Num(1, lineno=173, col_offset=43)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=8), Expr(Call(Attribute(Name('con', Load(), lineno=174, col_offset=8), 'set_progress_handler', Load(), lineno=174, col_offset=8), [Name('None', Load(), lineno=174, col_offset=33), Num(1, lineno=174, col_offset=39)], [], None, None, lineno=174, col_offset=8), lineno=174, col_offset=8), Expr(Call(Attribute(Call(Attribute(Name('con', Load(), lineno=175, col_offset=8), 'execute', Load(), lineno=175, col_offset=8), [Str('select 1 union select 2 union select 3', lineno=175, col_offset=20)], [], None, None, lineno=175, col_offset=8), 'fetchall', Load(), lineno=175, col_offset=8), [], [], None, None, lineno=175, col_offset=8), lineno=175, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=176, col_offset=8), 'assertEqual', Load(), lineno=176, col_offset=8), [Name('action', Load(), lineno=176, col_offset=25), Num(0, lineno=176, col_offset=33), Str('progress handler was not cleared', lineno=176, col_offset=36)], [], None, None, lineno=176, col_offset=8), lineno=176, col_offset=8)], [], lineno=164, col_offset=4)], [], lineno=108, col_offset=0), FunctionDef('suite', arguments([], None, None, []), [Assign([Name('collation_suite', Store(), lineno=179, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=179, col_offset=22), 'makeSuite', Load(), lineno=179, col_offset=22), [Name('CollationTests', Load(), lineno=179, col_offset=41), Str('Check', lineno=179, col_offset=57)], [], None, None, lineno=179, col_offset=22), lineno=179, col_offset=4), Assign([Name('progress_suite', Store(), lineno=180, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=180, col_offset=21), 'makeSuite', Load(), lineno=180, col_offset=21), [Name('ProgressTests', Load(), lineno=180, col_offset=40), Str('Check', lineno=180, col_offset=55)], [], None, None, lineno=180, col_offset=21), lineno=180, col_offset=4), Return(Call(Attribute(Name('unittest', Load(), lineno=181, col_offset=11), 'TestSuite', Load(), lineno=181, col_offset=11), [Tuple([Name('collation_suite', Load(), lineno=181, col_offset=31), Name('progress_suite', Load(), lineno=181, col_offset=48)], Load(), lineno=181, col_offset=31)], [], None, None, lineno=181, col_offset=11), lineno=181, col_offset=4)], [], lineno=178, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Assign([Name('runner', Store(), lineno=184, col_offset=4)], Call(Attribute(Name('unittest', Load(), lineno=184, col_offset=13), 'TextTestRunner', Load(), lineno=184, col_offset=13), [], [], None, None, lineno=184, col_offset=13), lineno=184, col_offset=4), Expr(Call(Attribute(Name('runner', Load(), lineno=185, col_offset=4), 'run', Load(), lineno=185, col_offset=4), [Call(Name('suite', Load(), lineno=185, col_offset=15), [], [], None, None, lineno=185, col_offset=15)], [], None, None, lineno=185, col_offset=4), lineno=185, col_offset=4)], [], lineno=183, col_offset=0), If(Compare(Name('__name__', Load(), lineno=187, col_offset=3), [Eq()], [Str('__main__', lineno=187, col_offset=15)], lineno=187, col_offset=3), [Expr(Call(Name('test', Load(), lineno=188, col_offset=4), [], [], None, None, lineno=188, col_offset=4), lineno=188, col_offset=4)], [], lineno=187, col_offset=0)])
