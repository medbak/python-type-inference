Module([Expr(Str('TELNET client class.\n\nBased on RFC 854: TELNET Protocol Specification, by J. Postel and\nJ. Reynolds\n\nExample:\n\n>>> from telnetlib import Telnet\n>>> tn = Telnet(\'www.python.org\', 79)   # connect to finger port\n>>> tn.write(\'guido\\r\\n\')\n>>> print tn.read_all()\nLogin       Name               TTY         Idle    When    Where\nguido    Guido van Rossum      pts/2        <Dec  2 11:10> snag.cnri.reston..\n\n>>>\n\nNote that read_all() won\'t read until eof -- it just reads some data\n-- but it guarantees to read at least one byte unless EOF is hit.\n\nIt is possible to pass a Telnet object to select.select() in order to\nwait until more data is available.  Note that in this case,\nread_eager() may return \'\' even if there was data on the socket,\nbecause the protocol negotiation may have eaten the data.  This is why\nEOFError is needed in some cases to distinguish between "no data" and\n"connection closed" (since the socket also appears ready for reading\nwhen it is closed).\n\nTo do:\n- option negotiation\n- timeout should be intrinsic to the connection object instead of an\n  option on one of the read calls only\n\n', lineno=33, col_offset=-1), lineno=33, col_offset=-1), Import([alias('sys', None)], lineno=37, col_offset=0), Import([alias('socket', None)], lineno=38, col_offset=0), Import([alias('select', None)], lineno=39, col_offset=0), Assign([Name('__all__', Store(), lineno=41, col_offset=0)], List([Str('Telnet', lineno=41, col_offset=11)], Load(), lineno=41, col_offset=10), lineno=41, col_offset=0), Assign([Name('DEBUGLEVEL', Store(), lineno=44, col_offset=0)], Num(0, lineno=44, col_offset=13), lineno=44, col_offset=0), Assign([Name('TELNET_PORT', Store(), lineno=47, col_offset=0)], Num(23, lineno=47, col_offset=14), lineno=47, col_offset=0), Assign([Name('IAC', Store(), lineno=50, col_offset=0)], Call(Name('chr', Load(), lineno=50, col_offset=7), [Num(255, lineno=50, col_offset=11)], [], None, None, lineno=50, col_offset=7), lineno=50, col_offset=0), Assign([Name('DONT', Store(), lineno=51, col_offset=0)], Call(Name('chr', Load(), lineno=51, col_offset=7), [Num(254, lineno=51, col_offset=11)], [], None, None, lineno=51, col_offset=7), lineno=51, col_offset=0), Assign([Name('DO', Store(), lineno=52, col_offset=0)], Call(Name('chr', Load(), lineno=52, col_offset=7), [Num(253, lineno=52, col_offset=11)], [], None, None, lineno=52, col_offset=7), lineno=52, col_offset=0), Assign([Name('WONT', Store(), lineno=53, col_offset=0)], Call(Name('chr', Load(), lineno=53, col_offset=7), [Num(252, lineno=53, col_offset=11)], [], None, None, lineno=53, col_offset=7), lineno=53, col_offset=0), Assign([Name('WILL', Store(), lineno=54, col_offset=0)], Call(Name('chr', Load(), lineno=54, col_offset=7), [Num(251, lineno=54, col_offset=11)], [], None, None, lineno=54, col_offset=7), lineno=54, col_offset=0), Assign([Name('theNULL', Store(), lineno=55, col_offset=0)], Call(Name('chr', Load(), lineno=55, col_offset=10), [Num(0, lineno=55, col_offset=14)], [], None, None, lineno=55, col_offset=10), lineno=55, col_offset=0), Assign([Name('SE', Store(), lineno=57, col_offset=0)], Call(Name('chr', Load(), lineno=57, col_offset=6), [Num(240, lineno=57, col_offset=10)], [], None, None, lineno=57, col_offset=6), lineno=57, col_offset=0), Assign([Name('NOP', Store(), lineno=58, col_offset=0)], Call(Name('chr', Load(), lineno=58, col_offset=6), [Num(241, lineno=58, col_offset=10)], [], None, None, lineno=58, col_offset=6), lineno=58, col_offset=0), Assign([Name('DM', Store(), lineno=59, col_offset=0)], Call(Name('chr', Load(), lineno=59, col_offset=6), [Num(242, lineno=59, col_offset=10)], [], None, None, lineno=59, col_offset=6), lineno=59, col_offset=0), Assign([Name('BRK', Store(), lineno=60, col_offset=0)], Call(Name('chr', Load(), lineno=60, col_offset=6), [Num(243, lineno=60, col_offset=10)], [], None, None, lineno=60, col_offset=6), lineno=60, col_offset=0), Assign([Name('IP', Store(), lineno=61, col_offset=0)], Call(Name('chr', Load(), lineno=61, col_offset=6), [Num(244, lineno=61, col_offset=10)], [], None, None, lineno=61, col_offset=6), lineno=61, col_offset=0), Assign([Name('AO', Store(), lineno=62, col_offset=0)], Call(Name('chr', Load(), lineno=62, col_offset=6), [Num(245, lineno=62, col_offset=10)], [], None, None, lineno=62, col_offset=6), lineno=62, col_offset=0), Assign([Name('AYT', Store(), lineno=63, col_offset=0)], Call(Name('chr', Load(), lineno=63, col_offset=6), [Num(246, lineno=63, col_offset=10)], [], None, None, lineno=63, col_offset=6), lineno=63, col_offset=0), Assign([Name('EC', Store(), lineno=64, col_offset=0)], Call(Name('chr', Load(), lineno=64, col_offset=6), [Num(247, lineno=64, col_offset=10)], [], None, None, lineno=64, col_offset=6), lineno=64, col_offset=0), Assign([Name('EL', Store(), lineno=65, col_offset=0)], Call(Name('chr', Load(), lineno=65, col_offset=6), [Num(248, lineno=65, col_offset=10)], [], None, None, lineno=65, col_offset=6), lineno=65, col_offset=0), Assign([Name('GA', Store(), lineno=66, col_offset=0)], Call(Name('chr', Load(), lineno=66, col_offset=6), [Num(249, lineno=66, col_offset=10)], [], None, None, lineno=66, col_offset=6), lineno=66, col_offset=0), Assign([Name('SB', Store(), lineno=67, col_offset=0)], Call(Name('chr', Load(), lineno=67, col_offset=6), [Num(250, lineno=67, col_offset=10)], [], None, None, lineno=67, col_offset=6), lineno=67, col_offset=0), Assign([Name('BINARY', Store(), lineno=72, col_offset=0)], Call(Name('chr', Load(), lineno=72, col_offset=9), [Num(0, lineno=72, col_offset=13)], [], None, None, lineno=72, col_offset=9), lineno=72, col_offset=0), Assign([Name('ECHO', Store(), lineno=73, col_offset=0)], Call(Name('chr', Load(), lineno=73, col_offset=7), [Num(1, lineno=73, col_offset=11)], [], None, None, lineno=73, col_offset=7), lineno=73, col_offset=0), Assign([Name('RCP', Store(), lineno=74, col_offset=0)], Call(Name('chr', Load(), lineno=74, col_offset=6), [Num(2, lineno=74, col_offset=10)], [], None, None, lineno=74, col_offset=6), lineno=74, col_offset=0), Assign([Name('SGA', Store(), lineno=75, col_offset=0)], Call(Name('chr', Load(), lineno=75, col_offset=6), [Num(3, lineno=75, col_offset=10)], [], None, None, lineno=75, col_offset=6), lineno=75, col_offset=0), Assign([Name('NAMS', Store(), lineno=76, col_offset=0)], Call(Name('chr', Load(), lineno=76, col_offset=7), [Num(4, lineno=76, col_offset=11)], [], None, None, lineno=76, col_offset=7), lineno=76, col_offset=0), Assign([Name('STATUS', Store(), lineno=77, col_offset=0)], Call(Name('chr', Load(), lineno=77, col_offset=9), [Num(5, lineno=77, col_offset=13)], [], None, None, lineno=77, col_offset=9), lineno=77, col_offset=0), Assign([Name('TM', Store(), lineno=78, col_offset=0)], Call(Name('chr', Load(), lineno=78, col_offset=5), [Num(6, lineno=78, col_offset=9)], [], None, None, lineno=78, col_offset=5), lineno=78, col_offset=0), Assign([Name('RCTE', Store(), lineno=79, col_offset=0)], Call(Name('chr', Load(), lineno=79, col_offset=7), [Num(7, lineno=79, col_offset=11)], [], None, None, lineno=79, col_offset=7), lineno=79, col_offset=0), Assign([Name('NAOL', Store(), lineno=80, col_offset=0)], Call(Name('chr', Load(), lineno=80, col_offset=7), [Num(8, lineno=80, col_offset=11)], [], None, None, lineno=80, col_offset=7), lineno=80, col_offset=0), Assign([Name('NAOP', Store(), lineno=81, col_offset=0)], Call(Name('chr', Load(), lineno=81, col_offset=7), [Num(9, lineno=81, col_offset=11)], [], None, None, lineno=81, col_offset=7), lineno=81, col_offset=0), Assign([Name('NAOCRD', Store(), lineno=82, col_offset=0)], Call(Name('chr', Load(), lineno=82, col_offset=9), [Num(10, lineno=82, col_offset=13)], [], None, None, lineno=82, col_offset=9), lineno=82, col_offset=0), Assign([Name('NAOHTS', Store(), lineno=83, col_offset=0)], Call(Name('chr', Load(), lineno=83, col_offset=9), [Num(11, lineno=83, col_offset=13)], [], None, None, lineno=83, col_offset=9), lineno=83, col_offset=0), Assign([Name('NAOHTD', Store(), lineno=84, col_offset=0)], Call(Name('chr', Load(), lineno=84, col_offset=9), [Num(12, lineno=84, col_offset=13)], [], None, None, lineno=84, col_offset=9), lineno=84, col_offset=0), Assign([Name('NAOFFD', Store(), lineno=85, col_offset=0)], Call(Name('chr', Load(), lineno=85, col_offset=9), [Num(13, lineno=85, col_offset=13)], [], None, None, lineno=85, col_offset=9), lineno=85, col_offset=0), Assign([Name('NAOVTS', Store(), lineno=86, col_offset=0)], Call(Name('chr', Load(), lineno=86, col_offset=9), [Num(14, lineno=86, col_offset=13)], [], None, None, lineno=86, col_offset=9), lineno=86, col_offset=0), Assign([Name('NAOVTD', Store(), lineno=87, col_offset=0)], Call(Name('chr', Load(), lineno=87, col_offset=9), [Num(15, lineno=87, col_offset=13)], [], None, None, lineno=87, col_offset=9), lineno=87, col_offset=0), Assign([Name('NAOLFD', Store(), lineno=88, col_offset=0)], Call(Name('chr', Load(), lineno=88, col_offset=9), [Num(16, lineno=88, col_offset=13)], [], None, None, lineno=88, col_offset=9), lineno=88, col_offset=0), Assign([Name('XASCII', Store(), lineno=89, col_offset=0)], Call(Name('chr', Load(), lineno=89, col_offset=9), [Num(17, lineno=89, col_offset=13)], [], None, None, lineno=89, col_offset=9), lineno=89, col_offset=0), Assign([Name('LOGOUT', Store(), lineno=90, col_offset=0)], Call(Name('chr', Load(), lineno=90, col_offset=9), [Num(18, lineno=90, col_offset=13)], [], None, None, lineno=90, col_offset=9), lineno=90, col_offset=0), Assign([Name('BM', Store(), lineno=91, col_offset=0)], Call(Name('chr', Load(), lineno=91, col_offset=5), [Num(19, lineno=91, col_offset=9)], [], None, None, lineno=91, col_offset=5), lineno=91, col_offset=0), Assign([Name('DET', Store(), lineno=92, col_offset=0)], Call(Name('chr', Load(), lineno=92, col_offset=6), [Num(20, lineno=92, col_offset=10)], [], None, None, lineno=92, col_offset=6), lineno=92, col_offset=0), Assign([Name('SUPDUP', Store(), lineno=93, col_offset=0)], Call(Name('chr', Load(), lineno=93, col_offset=9), [Num(21, lineno=93, col_offset=13)], [], None, None, lineno=93, col_offset=9), lineno=93, col_offset=0), Assign([Name('SUPDUPOUTPUT', Store(), lineno=94, col_offset=0)], Call(Name('chr', Load(), lineno=94, col_offset=15), [Num(22, lineno=94, col_offset=19)], [], None, None, lineno=94, col_offset=15), lineno=94, col_offset=0), Assign([Name('SNDLOC', Store(), lineno=95, col_offset=0)], Call(Name('chr', Load(), lineno=95, col_offset=9), [Num(23, lineno=95, col_offset=13)], [], None, None, lineno=95, col_offset=9), lineno=95, col_offset=0), Assign([Name('TTYPE', Store(), lineno=96, col_offset=0)], Call(Name('chr', Load(), lineno=96, col_offset=8), [Num(24, lineno=96, col_offset=12)], [], None, None, lineno=96, col_offset=8), lineno=96, col_offset=0), Assign([Name('EOR', Store(), lineno=97, col_offset=0)], Call(Name('chr', Load(), lineno=97, col_offset=6), [Num(25, lineno=97, col_offset=10)], [], None, None, lineno=97, col_offset=6), lineno=97, col_offset=0), Assign([Name('TUID', Store(), lineno=98, col_offset=0)], Call(Name('chr', Load(), lineno=98, col_offset=7), [Num(26, lineno=98, col_offset=11)], [], None, None, lineno=98, col_offset=7), lineno=98, col_offset=0), Assign([Name('OUTMRK', Store(), lineno=99, col_offset=0)], Call(Name('chr', Load(), lineno=99, col_offset=9), [Num(27, lineno=99, col_offset=13)], [], None, None, lineno=99, col_offset=9), lineno=99, col_offset=0), Assign([Name('TTYLOC', Store(), lineno=100, col_offset=0)], Call(Name('chr', Load(), lineno=100, col_offset=9), [Num(28, lineno=100, col_offset=13)], [], None, None, lineno=100, col_offset=9), lineno=100, col_offset=0), Assign([Name('VT3270REGIME', Store(), lineno=101, col_offset=0)], Call(Name('chr', Load(), lineno=101, col_offset=15), [Num(29, lineno=101, col_offset=19)], [], None, None, lineno=101, col_offset=15), lineno=101, col_offset=0), Assign([Name('X3PAD', Store(), lineno=102, col_offset=0)], Call(Name('chr', Load(), lineno=102, col_offset=8), [Num(30, lineno=102, col_offset=12)], [], None, None, lineno=102, col_offset=8), lineno=102, col_offset=0), Assign([Name('NAWS', Store(), lineno=103, col_offset=0)], Call(Name('chr', Load(), lineno=103, col_offset=7), [Num(31, lineno=103, col_offset=11)], [], None, None, lineno=103, col_offset=7), lineno=103, col_offset=0), Assign([Name('TSPEED', Store(), lineno=104, col_offset=0)], Call(Name('chr', Load(), lineno=104, col_offset=9), [Num(32, lineno=104, col_offset=13)], [], None, None, lineno=104, col_offset=9), lineno=104, col_offset=0), Assign([Name('LFLOW', Store(), lineno=105, col_offset=0)], Call(Name('chr', Load(), lineno=105, col_offset=8), [Num(33, lineno=105, col_offset=12)], [], None, None, lineno=105, col_offset=8), lineno=105, col_offset=0), Assign([Name('LINEMODE', Store(), lineno=106, col_offset=0)], Call(Name('chr', Load(), lineno=106, col_offset=11), [Num(34, lineno=106, col_offset=15)], [], None, None, lineno=106, col_offset=11), lineno=106, col_offset=0), Assign([Name('XDISPLOC', Store(), lineno=107, col_offset=0)], Call(Name('chr', Load(), lineno=107, col_offset=11), [Num(35, lineno=107, col_offset=15)], [], None, None, lineno=107, col_offset=11), lineno=107, col_offset=0), Assign([Name('OLD_ENVIRON', Store(), lineno=108, col_offset=0)], Call(Name('chr', Load(), lineno=108, col_offset=14), [Num(36, lineno=108, col_offset=18)], [], None, None, lineno=108, col_offset=14), lineno=108, col_offset=0), Assign([Name('AUTHENTICATION', Store(), lineno=109, col_offset=0)], Call(Name('chr', Load(), lineno=109, col_offset=17), [Num(37, lineno=109, col_offset=21)], [], None, None, lineno=109, col_offset=17), lineno=109, col_offset=0), Assign([Name('ENCRYPT', Store(), lineno=110, col_offset=0)], Call(Name('chr', Load(), lineno=110, col_offset=10), [Num(38, lineno=110, col_offset=14)], [], None, None, lineno=110, col_offset=10), lineno=110, col_offset=0), Assign([Name('NEW_ENVIRON', Store(), lineno=111, col_offset=0)], Call(Name('chr', Load(), lineno=111, col_offset=14), [Num(39, lineno=111, col_offset=18)], [], None, None, lineno=111, col_offset=14), lineno=111, col_offset=0), Assign([Name('TN3270E', Store(), lineno=116, col_offset=0)], Call(Name('chr', Load(), lineno=116, col_offset=10), [Num(40, lineno=116, col_offset=14)], [], None, None, lineno=116, col_offset=10), lineno=116, col_offset=0), Assign([Name('XAUTH', Store(), lineno=117, col_offset=0)], Call(Name('chr', Load(), lineno=117, col_offset=8), [Num(41, lineno=117, col_offset=12)], [], None, None, lineno=117, col_offset=8), lineno=117, col_offset=0), Assign([Name('CHARSET', Store(), lineno=118, col_offset=0)], Call(Name('chr', Load(), lineno=118, col_offset=10), [Num(42, lineno=118, col_offset=14)], [], None, None, lineno=118, col_offset=10), lineno=118, col_offset=0), Assign([Name('RSP', Store(), lineno=119, col_offset=0)], Call(Name('chr', Load(), lineno=119, col_offset=6), [Num(43, lineno=119, col_offset=10)], [], None, None, lineno=119, col_offset=6), lineno=119, col_offset=0), Assign([Name('COM_PORT_OPTION', Store(), lineno=120, col_offset=0)], Call(Name('chr', Load(), lineno=120, col_offset=18), [Num(44, lineno=120, col_offset=22)], [], None, None, lineno=120, col_offset=18), lineno=120, col_offset=0), Assign([Name('SUPPRESS_LOCAL_ECHO', Store(), lineno=121, col_offset=0)], Call(Name('chr', Load(), lineno=121, col_offset=22), [Num(45, lineno=121, col_offset=26)], [], None, None, lineno=121, col_offset=22), lineno=121, col_offset=0), Assign([Name('TLS', Store(), lineno=122, col_offset=0)], Call(Name('chr', Load(), lineno=122, col_offset=6), [Num(46, lineno=122, col_offset=10)], [], None, None, lineno=122, col_offset=6), lineno=122, col_offset=0), Assign([Name('KERMIT', Store(), lineno=123, col_offset=0)], Call(Name('chr', Load(), lineno=123, col_offset=9), [Num(47, lineno=123, col_offset=13)], [], None, None, lineno=123, col_offset=9), lineno=123, col_offset=0), Assign([Name('SEND_URL', Store(), lineno=124, col_offset=0)], Call(Name('chr', Load(), lineno=124, col_offset=11), [Num(48, lineno=124, col_offset=15)], [], None, None, lineno=124, col_offset=11), lineno=124, col_offset=0), Assign([Name('FORWARD_X', Store(), lineno=125, col_offset=0)], Call(Name('chr', Load(), lineno=125, col_offset=12), [Num(49, lineno=125, col_offset=16)], [], None, None, lineno=125, col_offset=12), lineno=125, col_offset=0), Assign([Name('PRAGMA_LOGON', Store(), lineno=126, col_offset=0)], Call(Name('chr', Load(), lineno=126, col_offset=15), [Num(138, lineno=126, col_offset=19)], [], None, None, lineno=126, col_offset=15), lineno=126, col_offset=0), Assign([Name('SSPI_LOGON', Store(), lineno=127, col_offset=0)], Call(Name('chr', Load(), lineno=127, col_offset=13), [Num(139, lineno=127, col_offset=17)], [], None, None, lineno=127, col_offset=13), lineno=127, col_offset=0), Assign([Name('PRAGMA_HEARTBEAT', Store(), lineno=128, col_offset=0)], Call(Name('chr', Load(), lineno=128, col_offset=19), [Num(140, lineno=128, col_offset=23)], [], None, None, lineno=128, col_offset=19), lineno=128, col_offset=0), Assign([Name('EXOPL', Store(), lineno=129, col_offset=0)], Call(Name('chr', Load(), lineno=129, col_offset=8), [Num(255, lineno=129, col_offset=12)], [], None, None, lineno=129, col_offset=8), lineno=129, col_offset=0), Assign([Name('NOOPT', Store(), lineno=130, col_offset=0)], Call(Name('chr', Load(), lineno=130, col_offset=8), [Num(0, lineno=130, col_offset=12)], [], None, None, lineno=130, col_offset=8), lineno=130, col_offset=0), ClassDef('Telnet', [], [Expr(Str("Telnet interface class.\n\n    An instance of this class represents a connection to a telnet\n    server.  The instance is initially not connected; the open()\n    method must be used to establish a connection.  Alternatively, the\n    host name and optional port number can be passed to the\n    constructor, too.\n\n    Don't try to reopen an already connected instance.\n\n    This class has many read_*() methods.  Note that some of them\n    raise EOFError when the end of the connection is read, because\n    they can return an empty string for other reasons.  See the\n    individual doc strings.\n\n    read_until(expected, [timeout])\n        Read until the expected string has been seen, or a timeout is\n        hit (default is no timeout); may block.\n\n    read_all()\n        Read all data until EOF; may block.\n\n    read_some()\n        Read at least one byte or EOF; may block.\n\n    read_very_eager()\n        Read all data available already queued or on the socket,\n        without blocking.\n\n    read_eager()\n        Read either data already queued or some data available on the\n        socket, without blocking.\n\n    read_lazy()\n        Read all data in the raw queue (processing it first), without\n        doing any socket I/O.\n\n    read_very_lazy()\n        Reads all data in the cooked queue, without doing any socket\n        I/O.\n\n    read_sb_data()\n        Reads available data between SB ... SE sequence. Don't block.\n\n    set_option_negotiation_callback(callback)\n        Each time a telnet option is read on the input flow, this callback\n        (if set) is called with the following parameters :\n        callback(telnet socket, command, option)\n            option will be chr(0) when there is no option.\n        No other action is done afterwards by telnetlib.\n\n    ", lineno=185, col_offset=-1), lineno=185, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=187, col_offset=17), Name('host', Param(), lineno=187, col_offset=23), Name('port', Param(), lineno=187, col_offset=34), Name('timeout', Param(), lineno=188, col_offset=17)], None, None, [Name('None', Load(), lineno=187, col_offset=28), Num(0, lineno=187, col_offset=39), Attribute(Name('socket', Load(), lineno=188, col_offset=25), '_GLOBAL_DEFAULT_TIMEOUT', Load(), lineno=188, col_offset=25)]), [Expr(Str('Constructor.\n\n        When called without arguments, create an unconnected instance.\n        With a hostname argument, it connects the instance; port number\n        and timeout are optional.\n        ', lineno=194, col_offset=-1), lineno=194, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=195, col_offset=8), 'debuglevel', Store(), lineno=195, col_offset=8)], Name('DEBUGLEVEL', Load(), lineno=195, col_offset=26), lineno=195, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=196, col_offset=8), 'host', Store(), lineno=196, col_offset=8)], Name('host', Load(), lineno=196, col_offset=20), lineno=196, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=197, col_offset=8), 'port', Store(), lineno=197, col_offset=8)], Name('port', Load(), lineno=197, col_offset=20), lineno=197, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=198, col_offset=8), 'timeout', Store(), lineno=198, col_offset=8)], Name('timeout', Load(), lineno=198, col_offset=23), lineno=198, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=199, col_offset=8), 'sock', Store(), lineno=199, col_offset=8)], Name('None', Load(), lineno=199, col_offset=20), lineno=199, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=200, col_offset=8), 'rawq', Store(), lineno=200, col_offset=8)], Str('', lineno=200, col_offset=20), lineno=200, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=201, col_offset=8), 'irawq', Store(), lineno=201, col_offset=8)], Num(0, lineno=201, col_offset=21), lineno=201, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=202, col_offset=8), 'cookedq', Store(), lineno=202, col_offset=8)], Str('', lineno=202, col_offset=23), lineno=202, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=203, col_offset=8), 'eof', Store(), lineno=203, col_offset=8)], Num(0, lineno=203, col_offset=19), lineno=203, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=204, col_offset=8), 'iacseq', Store(), lineno=204, col_offset=8)], Str('', lineno=204, col_offset=22), lineno=204, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=205, col_offset=8), 'sb', Store(), lineno=205, col_offset=8)], Num(0, lineno=205, col_offset=18), lineno=205, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=206, col_offset=8), 'sbdataq', Store(), lineno=206, col_offset=8)], Str('', lineno=206, col_offset=23), lineno=206, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=207, col_offset=8), 'option_callback', Store(), lineno=207, col_offset=8)], Name('None', Load(), lineno=207, col_offset=31), lineno=207, col_offset=8), If(Compare(Name('host', Load(), lineno=208, col_offset=11), [IsNot()], [Name('None', Load(), lineno=208, col_offset=23)], lineno=208, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=209, col_offset=12), 'open', Load(), lineno=209, col_offset=12), [Name('host', Load(), lineno=209, col_offset=22), Name('port', Load(), lineno=209, col_offset=28), Name('timeout', Load(), lineno=209, col_offset=34)], [], None, None, lineno=209, col_offset=12), lineno=209, col_offset=12)], [], lineno=208, col_offset=8)], [], lineno=187, col_offset=4), FunctionDef('open', arguments([Name('self', Param(), lineno=211, col_offset=13), Name('host', Param(), lineno=211, col_offset=19), Name('port', Param(), lineno=211, col_offset=25), Name('timeout', Param(), lineno=211, col_offset=33)], None, None, [Num(0, lineno=211, col_offset=30), Attribute(Name('socket', Load(), lineno=211, col_offset=41), '_GLOBAL_DEFAULT_TIMEOUT', Load(), lineno=211, col_offset=41)]), [Expr(Str("Connect to a host.\n\n        The optional second argument is the port number, which\n        defaults to the standard telnet port (23).\n\n        Don't try to reopen an already connected instance.\n        ", lineno=218, col_offset=-1), lineno=218, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=219, col_offset=8), 'eof', Store(), lineno=219, col_offset=8)], Num(0, lineno=219, col_offset=19), lineno=219, col_offset=8), If(UnaryOp(Not(), Name('port', Load(), lineno=220, col_offset=15), lineno=220, col_offset=11), [Assign([Name('port', Store(), lineno=221, col_offset=12)], Name('TELNET_PORT', Load(), lineno=221, col_offset=19), lineno=221, col_offset=12)], [], lineno=220, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=222, col_offset=8), 'host', Store(), lineno=222, col_offset=8)], Name('host', Load(), lineno=222, col_offset=20), lineno=222, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=223, col_offset=8), 'port', Store(), lineno=223, col_offset=8)], Name('port', Load(), lineno=223, col_offset=20), lineno=223, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=224, col_offset=8), 'timeout', Store(), lineno=224, col_offset=8)], Name('timeout', Load(), lineno=224, col_offset=23), lineno=224, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=225, col_offset=8), 'sock', Store(), lineno=225, col_offset=8)], Call(Attribute(Name('socket', Load(), lineno=225, col_offset=20), 'create_connection', Load(), lineno=225, col_offset=20), [Tuple([Name('host', Load(), lineno=225, col_offset=46), Name('port', Load(), lineno=225, col_offset=52)], Load(), lineno=225, col_offset=46), Name('timeout', Load(), lineno=225, col_offset=59)], [], None, None, lineno=225, col_offset=20), lineno=225, col_offset=8)], [], lineno=211, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=227, col_offset=16)], None, None, []), [Expr(Str('Destructor -- close the connection.', lineno=228, col_offset=8), lineno=228, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=229, col_offset=8), 'close', Load(), lineno=229, col_offset=8), [], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8)], [], lineno=227, col_offset=4), FunctionDef('msg', arguments([Name('self', Param(), lineno=231, col_offset=12), Name('msg', Param(), lineno=231, col_offset=18)], 'args', None, []), [Expr(Str('Print a debug message, when the debug level is > 0.\n\n        If extra arguments are present, they are substituted in the\n        message using the standard string formatting operator.\n\n        ', lineno=237, col_offset=-1), lineno=237, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=238, col_offset=11), 'debuglevel', Load(), lineno=238, col_offset=11), [Gt()], [Num(0, lineno=238, col_offset=29)], lineno=238, col_offset=11), [Print(None, [BinOp(Str('Telnet(%s,%d):', lineno=239, col_offset=18), Mod(), Tuple([Attribute(Name('self', Load(), lineno=239, col_offset=38), 'host', Load(), lineno=239, col_offset=38), Attribute(Name('self', Load(), lineno=239, col_offset=49), 'port', Load(), lineno=239, col_offset=49)], Load(), lineno=239, col_offset=38), lineno=239, col_offset=18)], False, lineno=239, col_offset=12), If(Name('args', Load(), lineno=240, col_offset=15), [Print(None, [BinOp(Name('msg', Load(), lineno=241, col_offset=22), Mod(), Name('args', Load(), lineno=241, col_offset=28), lineno=241, col_offset=22)], True, lineno=241, col_offset=16)], [Print(None, [Name('msg', Load(), lineno=243, col_offset=22)], True, lineno=243, col_offset=16)], lineno=240, col_offset=12)], [], lineno=238, col_offset=8)], [], lineno=231, col_offset=4), FunctionDef('set_debuglevel', arguments([Name('self', Param(), lineno=245, col_offset=23), Name('debuglevel', Param(), lineno=245, col_offset=29)], None, None, []), [Expr(Str('Set the debug level.\n\n        The higher it is, the more debug output you get (on sys.stdout).\n\n        ', lineno=250, col_offset=-1), lineno=250, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=251, col_offset=8), 'debuglevel', Store(), lineno=251, col_offset=8)], Name('debuglevel', Load(), lineno=251, col_offset=26), lineno=251, col_offset=8)], [], lineno=245, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=253, col_offset=14)], None, None, []), [Expr(Str('Close the connection.', lineno=254, col_offset=8), lineno=254, col_offset=8), If(Attribute(Name('self', Load(), lineno=255, col_offset=11), 'sock', Load(), lineno=255, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=256, col_offset=12), 'sock', Load(), lineno=256, col_offset=12), 'close', Load(), lineno=256, col_offset=12), [], [], None, None, lineno=256, col_offset=12), lineno=256, col_offset=12)], [], lineno=255, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=257, col_offset=8), 'sock', Store(), lineno=257, col_offset=8)], Num(0, lineno=257, col_offset=20), lineno=257, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=258, col_offset=8), 'eof', Store(), lineno=258, col_offset=8)], Num(1, lineno=258, col_offset=19), lineno=258, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=259, col_offset=8), 'iacseq', Store(), lineno=259, col_offset=8)], Str('', lineno=259, col_offset=22), lineno=259, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=260, col_offset=8), 'sb', Store(), lineno=260, col_offset=8)], Num(0, lineno=260, col_offset=18), lineno=260, col_offset=8)], [], lineno=253, col_offset=4), FunctionDef('get_socket', arguments([Name('self', Param(), lineno=262, col_offset=19)], None, None, []), [Expr(Str('Return the socket object used internally.', lineno=263, col_offset=8), lineno=263, col_offset=8), Return(Attribute(Name('self', Load(), lineno=264, col_offset=15), 'sock', Load(), lineno=264, col_offset=15), lineno=264, col_offset=8)], [], lineno=262, col_offset=4), FunctionDef('fileno', arguments([Name('self', Param(), lineno=266, col_offset=15)], None, None, []), [Expr(Str('Return the fileno() of the socket object used internally.', lineno=267, col_offset=8), lineno=267, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=268, col_offset=15), 'sock', Load(), lineno=268, col_offset=15), 'fileno', Load(), lineno=268, col_offset=15), [], [], None, None, lineno=268, col_offset=15), lineno=268, col_offset=8)], [], lineno=266, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=270, col_offset=14), Name('buffer', Param(), lineno=270, col_offset=20)], None, None, []), [Expr(Str('Write a string to the socket, doubling any IAC characters.\n\n        Can block if the connection is blocked.  May raise\n        socket.error if the connection is closed.\n\n        ', lineno=276, col_offset=-1), lineno=276, col_offset=-1), If(Compare(Name('IAC', Load(), lineno=277, col_offset=11), [In()], [Name('buffer', Load(), lineno=277, col_offset=18)], lineno=277, col_offset=11), [Assign([Name('buffer', Store(), lineno=278, col_offset=12)], Call(Attribute(Name('buffer', Load(), lineno=278, col_offset=21), 'replace', Load(), lineno=278, col_offset=21), [Name('IAC', Load(), lineno=278, col_offset=36), BinOp(Name('IAC', Load(), lineno=278, col_offset=41), Add(), Name('IAC', Load(), lineno=278, col_offset=45), lineno=278, col_offset=41)], [], None, None, lineno=278, col_offset=21), lineno=278, col_offset=12)], [], lineno=277, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=8), 'msg', Load(), lineno=279, col_offset=8), [Str('send %r', lineno=279, col_offset=17), Name('buffer', Load(), lineno=279, col_offset=28)], [], None, None, lineno=279, col_offset=8), lineno=279, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=280, col_offset=8), 'sock', Load(), lineno=280, col_offset=8), 'sendall', Load(), lineno=280, col_offset=8), [Name('buffer', Load(), lineno=280, col_offset=26)], [], None, None, lineno=280, col_offset=8), lineno=280, col_offset=8)], [], lineno=270, col_offset=4), FunctionDef('read_until', arguments([Name('self', Param(), lineno=282, col_offset=19), Name('match', Param(), lineno=282, col_offset=25), Name('timeout', Param(), lineno=282, col_offset=32)], None, None, [Name('None', Load(), lineno=282, col_offset=40)]), [Expr(Str('Read until a given string is encountered or until timeout.\n\n        When no match is found, return whatever is available instead,\n        possibly the empty string.  Raise EOFError if the connection\n        is closed and no cooked data is available.\n\n        ', lineno=289, col_offset=-1), lineno=289, col_offset=-1), Assign([Name('n', Store(), lineno=290, col_offset=8)], Call(Name('len', Load(), lineno=290, col_offset=12), [Name('match', Load(), lineno=290, col_offset=16)], [], None, None, lineno=290, col_offset=12), lineno=290, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=291, col_offset=8), 'process_rawq', Load(), lineno=291, col_offset=8), [], [], None, None, lineno=291, col_offset=8), lineno=291, col_offset=8), Assign([Name('i', Store(), lineno=292, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=292, col_offset=12), 'cookedq', Load(), lineno=292, col_offset=12), 'find', Load(), lineno=292, col_offset=12), [Name('match', Load(), lineno=292, col_offset=30)], [], None, None, lineno=292, col_offset=12), lineno=292, col_offset=8), If(Compare(Name('i', Load(), lineno=293, col_offset=11), [GtE()], [Num(0, lineno=293, col_offset=16)], lineno=293, col_offset=11), [Assign([Name('i', Store(), lineno=294, col_offset=12)], BinOp(Name('i', Load(), lineno=294, col_offset=16), Add(), Name('n', Load(), lineno=294, col_offset=18), lineno=294, col_offset=16), lineno=294, col_offset=12), Assign([Name('buf', Store(), lineno=295, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=295, col_offset=18), 'cookedq', Load(), lineno=295, col_offset=18), Slice(None, Name('i', Load(), lineno=295, col_offset=32), None), Load(), lineno=295, col_offset=18), lineno=295, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=296, col_offset=12), 'cookedq', Store(), lineno=296, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=296, col_offset=27), 'cookedq', Load(), lineno=296, col_offset=27), Slice(Name('i', Load(), lineno=296, col_offset=40), None, None), Load(), lineno=296, col_offset=27), lineno=296, col_offset=12), Return(Name('buf', Load(), lineno=297, col_offset=19), lineno=297, col_offset=12)], [], lineno=293, col_offset=8), Assign([Name('s_reply', Store(), lineno=298, col_offset=8)], Tuple([List([Name('self', Load(), lineno=298, col_offset=20)], Load(), lineno=298, col_offset=19), List([], Load(), lineno=298, col_offset=27), List([], Load(), lineno=298, col_offset=31)], Load(), lineno=298, col_offset=19), lineno=298, col_offset=8), Assign([Name('s_args', Store(), lineno=299, col_offset=8)], Name('s_reply', Load(), lineno=299, col_offset=17), lineno=299, col_offset=8), If(Compare(Name('timeout', Load(), lineno=300, col_offset=11), [IsNot()], [Name('None', Load(), lineno=300, col_offset=26)], lineno=300, col_offset=11), [Assign([Name('s_args', Store(), lineno=301, col_offset=12)], BinOp(Name('s_args', Load(), lineno=301, col_offset=21), Add(), Tuple([Name('timeout', Load(), lineno=301, col_offset=31)], Load(), lineno=301, col_offset=31), lineno=301, col_offset=21), lineno=301, col_offset=12), ImportFrom('time', [alias('time', None)], 0, lineno=302, col_offset=12), Assign([Name('time_start', Store(), lineno=303, col_offset=12)], Call(Name('time', Load(), lineno=303, col_offset=25), [], [], None, None, lineno=303, col_offset=25), lineno=303, col_offset=12)], [], lineno=300, col_offset=8), While(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=304, col_offset=18), 'eof', Load(), lineno=304, col_offset=18), lineno=304, col_offset=14), Compare(Call(Attribute(Name('select', Load(), lineno=304, col_offset=31), 'select', Load(), lineno=304, col_offset=31), [], [], Name('s_args', Load(), lineno=304, col_offset=46), None, lineno=304, col_offset=31), [Eq()], [Name('s_reply', Load(), lineno=304, col_offset=57)], lineno=304, col_offset=31)], lineno=304, col_offset=14), [Assign([Name('i', Store(), lineno=305, col_offset=12)], Call(Name('max', Load(), lineno=305, col_offset=16), [Num(0, lineno=305, col_offset=20), BinOp(Call(Name('len', Load(), lineno=305, col_offset=23), [Attribute(Name('self', Load(), lineno=305, col_offset=27), 'cookedq', Load(), lineno=305, col_offset=27)], [], None, None, lineno=305, col_offset=23), Sub(), Name('n', Load(), lineno=305, col_offset=41), lineno=305, col_offset=23)], [], None, None, lineno=305, col_offset=16), lineno=305, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=306, col_offset=12), 'fill_rawq', Load(), lineno=306, col_offset=12), [], [], None, None, lineno=306, col_offset=12), lineno=306, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=307, col_offset=12), 'process_rawq', Load(), lineno=307, col_offset=12), [], [], None, None, lineno=307, col_offset=12), lineno=307, col_offset=12), Assign([Name('i', Store(), lineno=308, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=308, col_offset=16), 'cookedq', Load(), lineno=308, col_offset=16), 'find', Load(), lineno=308, col_offset=16), [Name('match', Load(), lineno=308, col_offset=34), Name('i', Load(), lineno=308, col_offset=41)], [], None, None, lineno=308, col_offset=16), lineno=308, col_offset=12), If(Compare(Name('i', Load(), lineno=309, col_offset=15), [GtE()], [Num(0, lineno=309, col_offset=20)], lineno=309, col_offset=15), [Assign([Name('i', Store(), lineno=310, col_offset=16)], BinOp(Name('i', Load(), lineno=310, col_offset=20), Add(), Name('n', Load(), lineno=310, col_offset=22), lineno=310, col_offset=20), lineno=310, col_offset=16), Assign([Name('buf', Store(), lineno=311, col_offset=16)], Subscript(Attribute(Name('self', Load(), lineno=311, col_offset=22), 'cookedq', Load(), lineno=311, col_offset=22), Slice(None, Name('i', Load(), lineno=311, col_offset=36), None), Load(), lineno=311, col_offset=22), lineno=311, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=312, col_offset=16), 'cookedq', Store(), lineno=312, col_offset=16)], Subscript(Attribute(Name('self', Load(), lineno=312, col_offset=31), 'cookedq', Load(), lineno=312, col_offset=31), Slice(Name('i', Load(), lineno=312, col_offset=44), None, None), Load(), lineno=312, col_offset=31), lineno=312, col_offset=16), Return(Name('buf', Load(), lineno=313, col_offset=23), lineno=313, col_offset=16)], [], lineno=309, col_offset=12), If(Compare(Name('timeout', Load(), lineno=314, col_offset=15), [IsNot()], [Name('None', Load(), lineno=314, col_offset=30)], lineno=314, col_offset=15), [Assign([Name('elapsed', Store(), lineno=315, col_offset=16)], BinOp(Call(Name('time', Load(), lineno=315, col_offset=26), [], [], None, None, lineno=315, col_offset=26), Sub(), Name('time_start', Load(), lineno=315, col_offset=35), lineno=315, col_offset=26), lineno=315, col_offset=16), If(Compare(Name('elapsed', Load(), lineno=316, col_offset=19), [GtE()], [Name('timeout', Load(), lineno=316, col_offset=30)], lineno=316, col_offset=19), [Break( lineno=317, col_offset=20)], [], lineno=316, col_offset=16), Assign([Name('s_args', Store(), lineno=318, col_offset=16)], BinOp(Name('s_reply', Load(), lineno=318, col_offset=25), Add(), Tuple([BinOp(Name('timeout', Load(), lineno=318, col_offset=36), Sub(), Name('elapsed', Load(), lineno=318, col_offset=44), lineno=318, col_offset=36)], Load(), lineno=318, col_offset=36), lineno=318, col_offset=25), lineno=318, col_offset=16)], [], lineno=314, col_offset=12)], [], lineno=304, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=319, col_offset=15), 'read_very_lazy', Load(), lineno=319, col_offset=15), [], [], None, None, lineno=319, col_offset=15), lineno=319, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('read_all', arguments([Name('self', Param(), lineno=321, col_offset=17)], None, None, []), [Expr(Str('Read all data until EOF; block until connection closed.', lineno=322, col_offset=8), lineno=322, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=323, col_offset=8), 'process_rawq', Load(), lineno=323, col_offset=8), [], [], None, None, lineno=323, col_offset=8), lineno=323, col_offset=8), While(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=324, col_offset=18), 'eof', Load(), lineno=324, col_offset=18), lineno=324, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=325, col_offset=12), 'fill_rawq', Load(), lineno=325, col_offset=12), [], [], None, None, lineno=325, col_offset=12), lineno=325, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=326, col_offset=12), 'process_rawq', Load(), lineno=326, col_offset=12), [], [], None, None, lineno=326, col_offset=12), lineno=326, col_offset=12)], [], lineno=324, col_offset=8), Assign([Name('buf', Store(), lineno=327, col_offset=8)], Attribute(Name('self', Load(), lineno=327, col_offset=14), 'cookedq', Load(), lineno=327, col_offset=14), lineno=327, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=328, col_offset=8), 'cookedq', Store(), lineno=328, col_offset=8)], Str('', lineno=328, col_offset=23), lineno=328, col_offset=8), Return(Name('buf', Load(), lineno=329, col_offset=15), lineno=329, col_offset=8)], [], lineno=321, col_offset=4), FunctionDef('read_some', arguments([Name('self', Param(), lineno=331, col_offset=18)], None, None, []), [Expr(Str("Read at least one byte of cooked data unless EOF is hit.\n\n        Return '' if EOF is hit.  Block if no data is immediately\n        available.\n\n        ", lineno=337, col_offset=-1), lineno=337, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=338, col_offset=8), 'process_rawq', Load(), lineno=338, col_offset=8), [], [], None, None, lineno=338, col_offset=8), lineno=338, col_offset=8), While(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=339, col_offset=18), 'cookedq', Load(), lineno=339, col_offset=18), lineno=339, col_offset=14), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=339, col_offset=39), 'eof', Load(), lineno=339, col_offset=39), lineno=339, col_offset=35)], lineno=339, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=340, col_offset=12), 'fill_rawq', Load(), lineno=340, col_offset=12), [], [], None, None, lineno=340, col_offset=12), lineno=340, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=12), 'process_rawq', Load(), lineno=341, col_offset=12), [], [], None, None, lineno=341, col_offset=12), lineno=341, col_offset=12)], [], lineno=339, col_offset=8), Assign([Name('buf', Store(), lineno=342, col_offset=8)], Attribute(Name('self', Load(), lineno=342, col_offset=14), 'cookedq', Load(), lineno=342, col_offset=14), lineno=342, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=343, col_offset=8), 'cookedq', Store(), lineno=343, col_offset=8)], Str('', lineno=343, col_offset=23), lineno=343, col_offset=8), Return(Name('buf', Load(), lineno=344, col_offset=15), lineno=344, col_offset=8)], [], lineno=331, col_offset=4), FunctionDef('read_very_eager', arguments([Name('self', Param(), lineno=346, col_offset=24)], None, None, []), [Expr(Str("Read everything that's possible without blocking in I/O (eager).\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        ", lineno=353, col_offset=-1), lineno=353, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=354, col_offset=8), 'process_rawq', Load(), lineno=354, col_offset=8), [], [], None, None, lineno=354, col_offset=8), lineno=354, col_offset=8), While(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=355, col_offset=18), 'eof', Load(), lineno=355, col_offset=18), lineno=355, col_offset=14), Call(Attribute(Name('self', Load(), lineno=355, col_offset=31), 'sock_avail', Load(), lineno=355, col_offset=31), [], [], None, None, lineno=355, col_offset=31)], lineno=355, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=356, col_offset=12), 'fill_rawq', Load(), lineno=356, col_offset=12), [], [], None, None, lineno=356, col_offset=12), lineno=356, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=357, col_offset=12), 'process_rawq', Load(), lineno=357, col_offset=12), [], [], None, None, lineno=357, col_offset=12), lineno=357, col_offset=12)], [], lineno=355, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=358, col_offset=15), 'read_very_lazy', Load(), lineno=358, col_offset=15), [], [], None, None, lineno=358, col_offset=15), lineno=358, col_offset=8)], [], lineno=346, col_offset=4), FunctionDef('read_eager', arguments([Name('self', Param(), lineno=360, col_offset=19)], None, None, []), [Expr(Str("Read readily available data.\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        ", lineno=367, col_offset=-1), lineno=367, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=368, col_offset=8), 'process_rawq', Load(), lineno=368, col_offset=8), [], [], None, None, lineno=368, col_offset=8), lineno=368, col_offset=8), While(BoolOp(And(), [UnaryOp(Not(), Attribute(Name('self', Load(), lineno=369, col_offset=18), 'cookedq', Load(), lineno=369, col_offset=18), lineno=369, col_offset=14), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=369, col_offset=39), 'eof', Load(), lineno=369, col_offset=39), lineno=369, col_offset=35), Call(Attribute(Name('self', Load(), lineno=369, col_offset=52), 'sock_avail', Load(), lineno=369, col_offset=52), [], [], None, None, lineno=369, col_offset=52)], lineno=369, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=370, col_offset=12), 'fill_rawq', Load(), lineno=370, col_offset=12), [], [], None, None, lineno=370, col_offset=12), lineno=370, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=371, col_offset=12), 'process_rawq', Load(), lineno=371, col_offset=12), [], [], None, None, lineno=371, col_offset=12), lineno=371, col_offset=12)], [], lineno=369, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=372, col_offset=15), 'read_very_lazy', Load(), lineno=372, col_offset=15), [], [], None, None, lineno=372, col_offset=15), lineno=372, col_offset=8)], [], lineno=360, col_offset=4), FunctionDef('read_lazy', arguments([Name('self', Param(), lineno=374, col_offset=18)], None, None, []), [Expr(Str("Process and return data that's already in the queues (lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block\n        unless in the midst of an IAC sequence.\n\n        ", lineno=381, col_offset=-1), lineno=381, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=382, col_offset=8), 'process_rawq', Load(), lineno=382, col_offset=8), [], [], None, None, lineno=382, col_offset=8), lineno=382, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=383, col_offset=15), 'read_very_lazy', Load(), lineno=383, col_offset=15), [], [], None, None, lineno=383, col_offset=15), lineno=383, col_offset=8)], [], lineno=374, col_offset=4), FunctionDef('read_very_lazy', arguments([Name('self', Param(), lineno=385, col_offset=23)], None, None, []), [Expr(Str("Return any data available in the cooked queue (very lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block.\n\n        ", lineno=391, col_offset=-1), lineno=391, col_offset=-1), Assign([Name('buf', Store(), lineno=392, col_offset=8)], Attribute(Name('self', Load(), lineno=392, col_offset=14), 'cookedq', Load(), lineno=392, col_offset=14), lineno=392, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=393, col_offset=8), 'cookedq', Store(), lineno=393, col_offset=8)], Str('', lineno=393, col_offset=23), lineno=393, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('buf', Load(), lineno=394, col_offset=15), lineno=394, col_offset=11), Attribute(Name('self', Load(), lineno=394, col_offset=23), 'eof', Load(), lineno=394, col_offset=23), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=394, col_offset=40), 'rawq', Load(), lineno=394, col_offset=40), lineno=394, col_offset=36)], lineno=394, col_offset=11), [Raise(Name('EOFError', Load(), lineno=395, col_offset=18), Str('telnet connection closed', lineno=395, col_offset=28), None, lineno=395, col_offset=12)], [], lineno=394, col_offset=8), Return(Name('buf', Load(), lineno=396, col_offset=15), lineno=396, col_offset=8)], [], lineno=385, col_offset=4), FunctionDef('read_sb_data', arguments([Name('self', Param(), lineno=398, col_offset=21)], None, None, []), [Expr(Str("Return any data available in the SB ... SE queue.\n\n        Return '' if no SB ... SE available. Should only be called\n        after seeing a SB or SE command. When a new SB command is\n        found, old unread SB data will be discarded. Don't block.\n\n        ", lineno=405, col_offset=-1), lineno=405, col_offset=-1), Assign([Name('buf', Store(), lineno=406, col_offset=8)], Attribute(Name('self', Load(), lineno=406, col_offset=14), 'sbdataq', Load(), lineno=406, col_offset=14), lineno=406, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=407, col_offset=8), 'sbdataq', Store(), lineno=407, col_offset=8)], Str('', lineno=407, col_offset=23), lineno=407, col_offset=8), Return(Name('buf', Load(), lineno=408, col_offset=15), lineno=408, col_offset=8)], [], lineno=398, col_offset=4), FunctionDef('set_option_negotiation_callback', arguments([Name('self', Param(), lineno=410, col_offset=40), Name('callback', Param(), lineno=410, col_offset=46)], None, None, []), [Expr(Str('Provide a callback function called after each receipt of a telnet option.', lineno=411, col_offset=8), lineno=411, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=412, col_offset=8), 'option_callback', Store(), lineno=412, col_offset=8)], Name('callback', Load(), lineno=412, col_offset=31), lineno=412, col_offset=8)], [], lineno=410, col_offset=4), FunctionDef('process_rawq', arguments([Name('self', Param(), lineno=414, col_offset=21)], None, None, []), [Expr(Str("Transfer from raw queue to cooked queue.\n\n        Set self.eof when connection is closed.  Don't block unless in\n        the midst of an IAC sequence.\n\n        ", lineno=420, col_offset=-1), lineno=420, col_offset=-1), Assign([Name('buf', Store(), lineno=421, col_offset=8)], List([Str('', lineno=421, col_offset=15), Str('', lineno=421, col_offset=19)], Load(), lineno=421, col_offset=14), lineno=421, col_offset=8), TryExcept([While(Attribute(Name('self', Load(), lineno=423, col_offset=18), 'rawq', Load(), lineno=423, col_offset=18), [Assign([Name('c', Store(), lineno=424, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=424, col_offset=20), 'rawq_getchar', Load(), lineno=424, col_offset=20), [], [], None, None, lineno=424, col_offset=20), lineno=424, col_offset=16), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=425, col_offset=23), 'iacseq', Load(), lineno=425, col_offset=23), lineno=425, col_offset=19), [If(Compare(Name('c', Load(), lineno=426, col_offset=23), [Eq()], [Name('theNULL', Load(), lineno=426, col_offset=28)], lineno=426, col_offset=23), [Continue( lineno=427, col_offset=24)], [], lineno=426, col_offset=20), If(Compare(Name('c', Load(), lineno=428, col_offset=23), [Eq()], [Str('\x11', lineno=428, col_offset=28)], lineno=428, col_offset=23), [Continue( lineno=429, col_offset=24)], [], lineno=428, col_offset=20), If(Compare(Name('c', Load(), lineno=430, col_offset=23), [NotEq()], [Name('IAC', Load(), lineno=430, col_offset=28)], lineno=430, col_offset=23), [Assign([Subscript(Name('buf', Load(), lineno=431, col_offset=24), Index(Attribute(Name('self', Load(), lineno=431, col_offset=28), 'sb', Load(), lineno=431, col_offset=28)), Store(), lineno=431, col_offset=24)], BinOp(Subscript(Name('buf', Load(), lineno=431, col_offset=39), Index(Attribute(Name('self', Load(), lineno=431, col_offset=43), 'sb', Load(), lineno=431, col_offset=43)), Load(), lineno=431, col_offset=39), Add(), Name('c', Load(), lineno=431, col_offset=54), lineno=431, col_offset=39), lineno=431, col_offset=24), Continue( lineno=432, col_offset=24)], [AugAssign(Attribute(Name('self', Load(), lineno=434, col_offset=24), 'iacseq', Store(), lineno=434, col_offset=24), Add(), Name('c', Load(), lineno=434, col_offset=39), lineno=434, col_offset=24)], lineno=430, col_offset=20)], [If(Compare(Call(Name('len', Load(), lineno=435, col_offset=21), [Attribute(Name('self', Load(), lineno=435, col_offset=25), 'iacseq', Load(), lineno=435, col_offset=25)], [], None, None, lineno=435, col_offset=21), [Eq()], [Num(1, lineno=435, col_offset=41)], lineno=435, col_offset=21), [If(Compare(Name('c', Load(), lineno=437, col_offset=23), [In()], [Tuple([Name('DO', Load(), lineno=437, col_offset=29), Name('DONT', Load(), lineno=437, col_offset=33), Name('WILL', Load(), lineno=437, col_offset=39), Name('WONT', Load(), lineno=437, col_offset=45)], Load(), lineno=437, col_offset=29)], lineno=437, col_offset=23), [AugAssign(Attribute(Name('self', Load(), lineno=438, col_offset=24), 'iacseq', Store(), lineno=438, col_offset=24), Add(), Name('c', Load(), lineno=438, col_offset=39), lineno=438, col_offset=24), Continue( lineno=439, col_offset=24)], [], lineno=437, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=441, col_offset=20), 'iacseq', Store(), lineno=441, col_offset=20)], Str('', lineno=441, col_offset=34), lineno=441, col_offset=20), If(Compare(Name('c', Load(), lineno=442, col_offset=23), [Eq()], [Name('IAC', Load(), lineno=442, col_offset=28)], lineno=442, col_offset=23), [Assign([Subscript(Name('buf', Load(), lineno=443, col_offset=24), Index(Attribute(Name('self', Load(), lineno=443, col_offset=28), 'sb', Load(), lineno=443, col_offset=28)), Store(), lineno=443, col_offset=24)], BinOp(Subscript(Name('buf', Load(), lineno=443, col_offset=39), Index(Attribute(Name('self', Load(), lineno=443, col_offset=43), 'sb', Load(), lineno=443, col_offset=43)), Load(), lineno=443, col_offset=39), Add(), Name('c', Load(), lineno=443, col_offset=54), lineno=443, col_offset=39), lineno=443, col_offset=24)], [If(Compare(Name('c', Load(), lineno=445, col_offset=27), [Eq()], [Name('SB', Load(), lineno=445, col_offset=32)], lineno=445, col_offset=27), [Assign([Attribute(Name('self', Load(), lineno=446, col_offset=28), 'sb', Store(), lineno=446, col_offset=28)], Num(1, lineno=446, col_offset=38), lineno=446, col_offset=28), Assign([Attribute(Name('self', Load(), lineno=447, col_offset=28), 'sbdataq', Store(), lineno=447, col_offset=28)], Str('', lineno=447, col_offset=43), lineno=447, col_offset=28)], [If(Compare(Name('c', Load(), lineno=448, col_offset=29), [Eq()], [Name('SE', Load(), lineno=448, col_offset=34)], lineno=448, col_offset=29), [Assign([Attribute(Name('self', Load(), lineno=449, col_offset=28), 'sb', Store(), lineno=449, col_offset=28)], Num(0, lineno=449, col_offset=38), lineno=449, col_offset=28), Assign([Attribute(Name('self', Load(), lineno=450, col_offset=28), 'sbdataq', Store(), lineno=450, col_offset=28)], BinOp(Attribute(Name('self', Load(), lineno=450, col_offset=43), 'sbdataq', Load(), lineno=450, col_offset=43), Add(), Subscript(Name('buf', Load(), lineno=450, col_offset=58), Index(Num(1, lineno=450, col_offset=62)), Load(), lineno=450, col_offset=58), lineno=450, col_offset=43), lineno=450, col_offset=28), Assign([Subscript(Name('buf', Load(), lineno=451, col_offset=28), Index(Num(1, lineno=451, col_offset=32)), Store(), lineno=451, col_offset=28)], Str('', lineno=451, col_offset=37), lineno=451, col_offset=28)], [], lineno=448, col_offset=29)], lineno=445, col_offset=24), If(Attribute(Name('self', Load(), lineno=452, col_offset=27), 'option_callback', Load(), lineno=452, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=455, col_offset=28), 'option_callback', Load(), lineno=455, col_offset=28), [Attribute(Name('self', Load(), lineno=455, col_offset=49), 'sock', Load(), lineno=455, col_offset=49), Name('c', Load(), lineno=455, col_offset=60), Name('NOOPT', Load(), lineno=455, col_offset=63)], [], None, None, lineno=455, col_offset=28), lineno=455, col_offset=28)], [Expr(Call(Attribute(Name('self', Load(), lineno=460, col_offset=28), 'msg', Load(), lineno=460, col_offset=28), [BinOp(Str('IAC %d not recognized', lineno=460, col_offset=37), Mod(), Call(Name('ord', Load(), lineno=460, col_offset=63), [Name('c', Load(), lineno=460, col_offset=67)], [], None, None, lineno=460, col_offset=63), lineno=460, col_offset=37)], [], None, None, lineno=460, col_offset=28), lineno=460, col_offset=28)], lineno=452, col_offset=24)], lineno=442, col_offset=20)], [If(Compare(Call(Name('len', Load(), lineno=461, col_offset=21), [Attribute(Name('self', Load(), lineno=461, col_offset=25), 'iacseq', Load(), lineno=461, col_offset=25)], [], None, None, lineno=461, col_offset=21), [Eq()], [Num(2, lineno=461, col_offset=41)], lineno=461, col_offset=21), [Assign([Name('cmd', Store(), lineno=462, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=462, col_offset=26), 'iacseq', Load(), lineno=462, col_offset=26), Index(Num(1, lineno=462, col_offset=38)), Load(), lineno=462, col_offset=26), lineno=462, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=463, col_offset=20), 'iacseq', Store(), lineno=463, col_offset=20)], Str('', lineno=463, col_offset=34), lineno=463, col_offset=20), Assign([Name('opt', Store(), lineno=464, col_offset=20)], Name('c', Load(), lineno=464, col_offset=26), lineno=464, col_offset=20), If(Compare(Name('cmd', Load(), lineno=465, col_offset=23), [In()], [Tuple([Name('DO', Load(), lineno=465, col_offset=31), Name('DONT', Load(), lineno=465, col_offset=35)], Load(), lineno=465, col_offset=31)], lineno=465, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=466, col_offset=24), 'msg', Load(), lineno=466, col_offset=24), [Str('IAC %s %d', lineno=466, col_offset=33), BoolOp(Or(), [BoolOp(And(), [Compare(Name('cmd', Load(), lineno=467, col_offset=28), [Eq()], [Name('DO', Load(), lineno=467, col_offset=35)], lineno=467, col_offset=28), Str('DO', lineno=467, col_offset=42)], lineno=467, col_offset=28), Str('DONT', lineno=467, col_offset=50)], lineno=467, col_offset=28), Call(Name('ord', Load(), lineno=467, col_offset=58), [Name('opt', Load(), lineno=467, col_offset=62)], [], None, None, lineno=467, col_offset=58)], [], None, None, lineno=466, col_offset=24), lineno=466, col_offset=24), If(Attribute(Name('self', Load(), lineno=468, col_offset=27), 'option_callback', Load(), lineno=468, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=469, col_offset=28), 'option_callback', Load(), lineno=469, col_offset=28), [Attribute(Name('self', Load(), lineno=469, col_offset=49), 'sock', Load(), lineno=469, col_offset=49), Name('cmd', Load(), lineno=469, col_offset=60), Name('opt', Load(), lineno=469, col_offset=65)], [], None, None, lineno=469, col_offset=28), lineno=469, col_offset=28)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=471, col_offset=28), 'sock', Load(), lineno=471, col_offset=28), 'sendall', Load(), lineno=471, col_offset=28), [BinOp(BinOp(Name('IAC', Load(), lineno=471, col_offset=46), Add(), Name('WONT', Load(), lineno=471, col_offset=52), lineno=471, col_offset=46), Add(), Name('opt', Load(), lineno=471, col_offset=59), lineno=471, col_offset=57)], [], None, None, lineno=471, col_offset=28), lineno=471, col_offset=28)], lineno=468, col_offset=24)], [If(Compare(Name('cmd', Load(), lineno=472, col_offset=25), [In()], [Tuple([Name('WILL', Load(), lineno=472, col_offset=33), Name('WONT', Load(), lineno=472, col_offset=39)], Load(), lineno=472, col_offset=33)], lineno=472, col_offset=25), [Expr(Call(Attribute(Name('self', Load(), lineno=473, col_offset=24), 'msg', Load(), lineno=473, col_offset=24), [Str('IAC %s %d', lineno=473, col_offset=33), BoolOp(Or(), [BoolOp(And(), [Compare(Name('cmd', Load(), lineno=474, col_offset=28), [Eq()], [Name('WILL', Load(), lineno=474, col_offset=35)], lineno=474, col_offset=28), Str('WILL', lineno=474, col_offset=44)], lineno=474, col_offset=28), Str('WONT', lineno=474, col_offset=54)], lineno=474, col_offset=28), Call(Name('ord', Load(), lineno=474, col_offset=62), [Name('opt', Load(), lineno=474, col_offset=66)], [], None, None, lineno=474, col_offset=62)], [], None, None, lineno=473, col_offset=24), lineno=473, col_offset=24), If(Attribute(Name('self', Load(), lineno=475, col_offset=27), 'option_callback', Load(), lineno=475, col_offset=27), [Expr(Call(Attribute(Name('self', Load(), lineno=476, col_offset=28), 'option_callback', Load(), lineno=476, col_offset=28), [Attribute(Name('self', Load(), lineno=476, col_offset=49), 'sock', Load(), lineno=476, col_offset=49), Name('cmd', Load(), lineno=476, col_offset=60), Name('opt', Load(), lineno=476, col_offset=65)], [], None, None, lineno=476, col_offset=28), lineno=476, col_offset=28)], [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=478, col_offset=28), 'sock', Load(), lineno=478, col_offset=28), 'sendall', Load(), lineno=478, col_offset=28), [BinOp(BinOp(Name('IAC', Load(), lineno=478, col_offset=46), Add(), Name('DONT', Load(), lineno=478, col_offset=52), lineno=478, col_offset=46), Add(), Name('opt', Load(), lineno=478, col_offset=59), lineno=478, col_offset=57)], [], None, None, lineno=478, col_offset=28), lineno=478, col_offset=28)], lineno=475, col_offset=24)], [], lineno=472, col_offset=25)], lineno=465, col_offset=20)], [], lineno=461, col_offset=21)], lineno=435, col_offset=21)], lineno=425, col_offset=16)], [], lineno=423, col_offset=12)], [ExceptHandler(Name('EOFError', Load(), lineno=479, col_offset=15), None, [Assign([Attribute(Name('self', Load(), lineno=480, col_offset=12), 'iacseq', Store(), lineno=480, col_offset=12)], Str('', lineno=480, col_offset=26), lineno=480, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=481, col_offset=12), 'sb', Store(), lineno=481, col_offset=12)], Num(0, lineno=481, col_offset=22), lineno=481, col_offset=12), Pass( lineno=482, col_offset=12)], lineno=479, col_offset=8)], [], lineno=422, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=483, col_offset=8), 'cookedq', Store(), lineno=483, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=483, col_offset=23), 'cookedq', Load(), lineno=483, col_offset=23), Add(), Subscript(Name('buf', Load(), lineno=483, col_offset=38), Index(Num(0, lineno=483, col_offset=42)), Load(), lineno=483, col_offset=38), lineno=483, col_offset=23), lineno=483, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=484, col_offset=8), 'sbdataq', Store(), lineno=484, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=484, col_offset=23), 'sbdataq', Load(), lineno=484, col_offset=23), Add(), Subscript(Name('buf', Load(), lineno=484, col_offset=38), Index(Num(1, lineno=484, col_offset=42)), Load(), lineno=484, col_offset=38), lineno=484, col_offset=23), lineno=484, col_offset=8)], [], lineno=414, col_offset=4), FunctionDef('rawq_getchar', arguments([Name('self', Param(), lineno=486, col_offset=21)], None, None, []), [Expr(Str('Get next char from raw queue.\n\n        Block if no data is immediately available.  Raise EOFError\n        when connection is closed.\n\n        ', lineno=492, col_offset=-1), lineno=492, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=493, col_offset=15), 'rawq', Load(), lineno=493, col_offset=15), lineno=493, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=494, col_offset=12), 'fill_rawq', Load(), lineno=494, col_offset=12), [], [], None, None, lineno=494, col_offset=12), lineno=494, col_offset=12), If(Attribute(Name('self', Load(), lineno=495, col_offset=15), 'eof', Load(), lineno=495, col_offset=15), [Raise(Name('EOFError', Load(), lineno=496, col_offset=22), None, None, lineno=496, col_offset=16)], [], lineno=495, col_offset=12)], [], lineno=493, col_offset=8), Assign([Name('c', Store(), lineno=497, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=497, col_offset=12), 'rawq', Load(), lineno=497, col_offset=12), Index(Attribute(Name('self', Load(), lineno=497, col_offset=22), 'irawq', Load(), lineno=497, col_offset=22)), Load(), lineno=497, col_offset=12), lineno=497, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=498, col_offset=8), 'irawq', Store(), lineno=498, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=498, col_offset=21), 'irawq', Load(), lineno=498, col_offset=21), Add(), Num(1, lineno=498, col_offset=34), lineno=498, col_offset=21), lineno=498, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=499, col_offset=11), 'irawq', Load(), lineno=499, col_offset=11), [GtE()], [Call(Name('len', Load(), lineno=499, col_offset=25), [Attribute(Name('self', Load(), lineno=499, col_offset=29), 'rawq', Load(), lineno=499, col_offset=29)], [], None, None, lineno=499, col_offset=25)], lineno=499, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=500, col_offset=12), 'rawq', Store(), lineno=500, col_offset=12)], Str('', lineno=500, col_offset=24), lineno=500, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=501, col_offset=12), 'irawq', Store(), lineno=501, col_offset=12)], Num(0, lineno=501, col_offset=25), lineno=501, col_offset=12)], [], lineno=499, col_offset=8), Return(Name('c', Load(), lineno=502, col_offset=15), lineno=502, col_offset=8)], [], lineno=486, col_offset=4), FunctionDef('fill_rawq', arguments([Name('self', Param(), lineno=504, col_offset=18)], None, None, []), [Expr(Str('Fill raw queue from exactly one recv() system call.\n\n        Block if no data is immediately available.  Set self.eof when\n        connection is closed.\n\n        ', lineno=510, col_offset=-1), lineno=510, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=511, col_offset=11), 'irawq', Load(), lineno=511, col_offset=11), [GtE()], [Call(Name('len', Load(), lineno=511, col_offset=25), [Attribute(Name('self', Load(), lineno=511, col_offset=29), 'rawq', Load(), lineno=511, col_offset=29)], [], None, None, lineno=511, col_offset=25)], lineno=511, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=512, col_offset=12), 'rawq', Store(), lineno=512, col_offset=12)], Str('', lineno=512, col_offset=24), lineno=512, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=513, col_offset=12), 'irawq', Store(), lineno=513, col_offset=12)], Num(0, lineno=513, col_offset=25), lineno=513, col_offset=12)], [], lineno=511, col_offset=8), Assign([Name('buf', Store(), lineno=516, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=516, col_offset=14), 'sock', Load(), lineno=516, col_offset=14), 'recv', Load(), lineno=516, col_offset=14), [Num(50, lineno=516, col_offset=29)], [], None, None, lineno=516, col_offset=14), lineno=516, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=517, col_offset=8), 'msg', Load(), lineno=517, col_offset=8), [Str('recv %r', lineno=517, col_offset=17), Name('buf', Load(), lineno=517, col_offset=28)], [], None, None, lineno=517, col_offset=8), lineno=517, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=518, col_offset=8), 'eof', Store(), lineno=518, col_offset=8)], UnaryOp(Not(), Name('buf', Load(), lineno=518, col_offset=24), lineno=518, col_offset=20), lineno=518, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=519, col_offset=8), 'rawq', Store(), lineno=519, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=519, col_offset=20), 'rawq', Load(), lineno=519, col_offset=20), Add(), Name('buf', Load(), lineno=519, col_offset=32), lineno=519, col_offset=20), lineno=519, col_offset=8)], [], lineno=504, col_offset=4), FunctionDef('sock_avail', arguments([Name('self', Param(), lineno=521, col_offset=19)], None, None, []), [Expr(Str('Test whether data is available on the socket.', lineno=522, col_offset=8), lineno=522, col_offset=8), Return(Compare(Call(Attribute(Name('select', Load(), lineno=523, col_offset=15), 'select', Load(), lineno=523, col_offset=15), [List([Name('self', Load(), lineno=523, col_offset=30)], Load(), lineno=523, col_offset=29), List([], Load(), lineno=523, col_offset=37), List([], Load(), lineno=523, col_offset=41), Num(0, lineno=523, col_offset=45)], [], None, None, lineno=523, col_offset=15), [Eq()], [Tuple([List([Name('self', Load(), lineno=523, col_offset=53)], Load(), lineno=523, col_offset=52), List([], Load(), lineno=523, col_offset=60), List([], Load(), lineno=523, col_offset=64)], Load(), lineno=523, col_offset=52)], lineno=523, col_offset=15), lineno=523, col_offset=8)], [], lineno=521, col_offset=4), FunctionDef('interact', arguments([Name('self', Param(), lineno=525, col_offset=17)], None, None, []), [Expr(Str('Interaction function, emulates a very dumb telnet client.', lineno=526, col_offset=8), lineno=526, col_offset=8), If(Compare(Attribute(Name('sys', Load(), lineno=527, col_offset=11), 'platform', Load(), lineno=527, col_offset=11), [Eq()], [Str('win32', lineno=527, col_offset=27)], lineno=527, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=528, col_offset=12), 'mt_interact', Load(), lineno=528, col_offset=12), [], [], None, None, lineno=528, col_offset=12), lineno=528, col_offset=12), Return(None, lineno=529, col_offset=12)], [], lineno=527, col_offset=8), While(Num(1, lineno=530, col_offset=14), [Assign([Tuple([Name('rfd', Store(), lineno=531, col_offset=12), Name('wfd', Store(), lineno=531, col_offset=17), Name('xfd', Store(), lineno=531, col_offset=22)], Store(), lineno=531, col_offset=12)], Call(Attribute(Name('select', Load(), lineno=531, col_offset=28), 'select', Load(), lineno=531, col_offset=28), [List([Name('self', Load(), lineno=531, col_offset=43), Attribute(Name('sys', Load(), lineno=531, col_offset=49), 'stdin', Load(), lineno=531, col_offset=49)], Load(), lineno=531, col_offset=42), List([], Load(), lineno=531, col_offset=61), List([], Load(), lineno=531, col_offset=65)], [], None, None, lineno=531, col_offset=28), lineno=531, col_offset=12), If(Compare(Name('self', Load(), lineno=532, col_offset=15), [In()], [Name('rfd', Load(), lineno=532, col_offset=23)], lineno=532, col_offset=15), [TryExcept([Assign([Name('text', Store(), lineno=534, col_offset=20)], Call(Attribute(Name('self', Load(), lineno=534, col_offset=27), 'read_eager', Load(), lineno=534, col_offset=27), [], [], None, None, lineno=534, col_offset=27), lineno=534, col_offset=20)], [ExceptHandler(Name('EOFError', Load(), lineno=535, col_offset=23), None, [Print(None, [Str('*** Connection closed by remote host ***', lineno=536, col_offset=26)], True, lineno=536, col_offset=20), Break( lineno=537, col_offset=20)], lineno=535, col_offset=16)], [], lineno=533, col_offset=16), If(Name('text', Load(), lineno=538, col_offset=19), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=539, col_offset=20), 'stdout', Load(), lineno=539, col_offset=20), 'write', Load(), lineno=539, col_offset=20), [Name('text', Load(), lineno=539, col_offset=37)], [], None, None, lineno=539, col_offset=20), lineno=539, col_offset=20), Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=540, col_offset=20), 'stdout', Load(), lineno=540, col_offset=20), 'flush', Load(), lineno=540, col_offset=20), [], [], None, None, lineno=540, col_offset=20), lineno=540, col_offset=20)], [], lineno=538, col_offset=16)], [], lineno=532, col_offset=12), If(Compare(Attribute(Name('sys', Load(), lineno=541, col_offset=15), 'stdin', Load(), lineno=541, col_offset=15), [In()], [Name('rfd', Load(), lineno=541, col_offset=28)], lineno=541, col_offset=15), [Assign([Name('line', Store(), lineno=542, col_offset=16)], Call(Attribute(Attribute(Name('sys', Load(), lineno=542, col_offset=23), 'stdin', Load(), lineno=542, col_offset=23), 'readline', Load(), lineno=542, col_offset=23), [], [], None, None, lineno=542, col_offset=23), lineno=542, col_offset=16), If(UnaryOp(Not(), Name('line', Load(), lineno=543, col_offset=23), lineno=543, col_offset=19), [Break( lineno=544, col_offset=20)], [], lineno=543, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=545, col_offset=16), 'write', Load(), lineno=545, col_offset=16), [Name('line', Load(), lineno=545, col_offset=27)], [], None, None, lineno=545, col_offset=16), lineno=545, col_offset=16)], [], lineno=541, col_offset=12)], [], lineno=530, col_offset=8)], [], lineno=525, col_offset=4), FunctionDef('mt_interact', arguments([Name('self', Param(), lineno=547, col_offset=20)], None, None, []), [Expr(Str('Multithreaded version of interact().', lineno=548, col_offset=8), lineno=548, col_offset=8), Import([alias('thread', None)], lineno=549, col_offset=8), Expr(Call(Attribute(Name('thread', Load(), lineno=550, col_offset=8), 'start_new_thread', Load(), lineno=550, col_offset=8), [Attribute(Name('self', Load(), lineno=550, col_offset=32), 'listener', Load(), lineno=550, col_offset=32), Tuple([], Load(), lineno=550, col_offset=47)], [], None, None, lineno=550, col_offset=8), lineno=550, col_offset=8), While(Num(1, lineno=551, col_offset=14), [Assign([Name('line', Store(), lineno=552, col_offset=12)], Call(Attribute(Attribute(Name('sys', Load(), lineno=552, col_offset=19), 'stdin', Load(), lineno=552, col_offset=19), 'readline', Load(), lineno=552, col_offset=19), [], [], None, None, lineno=552, col_offset=19), lineno=552, col_offset=12), If(UnaryOp(Not(), Name('line', Load(), lineno=553, col_offset=19), lineno=553, col_offset=15), [Break( lineno=554, col_offset=16)], [], lineno=553, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=555, col_offset=12), 'write', Load(), lineno=555, col_offset=12), [Name('line', Load(), lineno=555, col_offset=23)], [], None, None, lineno=555, col_offset=12), lineno=555, col_offset=12)], [], lineno=551, col_offset=8)], [], lineno=547, col_offset=4), FunctionDef('listener', arguments([Name('self', Param(), lineno=557, col_offset=17)], None, None, []), [Expr(Str('Helper for mt_interact() -- this executes in the other thread.', lineno=558, col_offset=8), lineno=558, col_offset=8), While(Num(1, lineno=559, col_offset=14), [TryExcept([Assign([Name('data', Store(), lineno=561, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=561, col_offset=23), 'read_eager', Load(), lineno=561, col_offset=23), [], [], None, None, lineno=561, col_offset=23), lineno=561, col_offset=16)], [ExceptHandler(Name('EOFError', Load(), lineno=562, col_offset=19), None, [Print(None, [Str('*** Connection closed by remote host ***', lineno=563, col_offset=22)], True, lineno=563, col_offset=16), Return(None, lineno=564, col_offset=16)], lineno=562, col_offset=12)], [], lineno=560, col_offset=12), If(Name('data', Load(), lineno=565, col_offset=15), [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=566, col_offset=16), 'stdout', Load(), lineno=566, col_offset=16), 'write', Load(), lineno=566, col_offset=16), [Name('data', Load(), lineno=566, col_offset=33)], [], None, None, lineno=566, col_offset=16), lineno=566, col_offset=16)], [Expr(Call(Attribute(Attribute(Name('sys', Load(), lineno=568, col_offset=16), 'stdout', Load(), lineno=568, col_offset=16), 'flush', Load(), lineno=568, col_offset=16), [], [], None, None, lineno=568, col_offset=16), lineno=568, col_offset=16)], lineno=565, col_offset=12)], [], lineno=559, col_offset=8)], [], lineno=557, col_offset=4), FunctionDef('expect', arguments([Name('self', Param(), lineno=570, col_offset=15), Name('list', Param(), lineno=570, col_offset=21), Name('timeout', Param(), lineno=570, col_offset=27)], None, None, [Name('None', Load(), lineno=570, col_offset=35)]), [Expr(Str("Read until one from a list of a regular expressions matches.\n\n        The first argument is a list of regular expressions, either\n        compiled (re.RegexObject instances) or uncompiled (strings).\n        The optional second argument is a timeout, in seconds; default\n        is no timeout.\n\n        Return a tuple of three items: the index in the list of the\n        first regular expression that matches; the match object\n        returned; and the text read up till and including the match.\n\n        If EOF is read and no text was read, raise EOFError.\n        Otherwise, when nothing matches, return (-1, None, text) where\n        text is the text received so far (may be the empty string if a\n        timeout happened).\n\n        If a regular expression ends with a greedy match (e.g. '.*')\n        or if more than one expression can match the same input, the\n        results are undeterministic, and may depend on the I/O timing.\n\n        ", lineno=591, col_offset=-1), lineno=591, col_offset=-1), Assign([Name('re', Store(), lineno=592, col_offset=8)], Name('None', Load(), lineno=592, col_offset=13), lineno=592, col_offset=8), Assign([Name('list', Store(), lineno=593, col_offset=8)], Subscript(Name('list', Load(), lineno=593, col_offset=15), Slice(None, None, None), Load(), lineno=593, col_offset=15), lineno=593, col_offset=8), Assign([Name('indices', Store(), lineno=594, col_offset=8)], Call(Name('range', Load(), lineno=594, col_offset=18), [Call(Name('len', Load(), lineno=594, col_offset=24), [Name('list', Load(), lineno=594, col_offset=28)], [], None, None, lineno=594, col_offset=24)], [], None, None, lineno=594, col_offset=18), lineno=594, col_offset=8), For(Name('i', Store(), lineno=595, col_offset=12), Name('indices', Load(), lineno=595, col_offset=17), [If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=596, col_offset=19), [Subscript(Name('list', Load(), lineno=596, col_offset=27), Index(Name('i', Load(), lineno=596, col_offset=32)), Load(), lineno=596, col_offset=27), Str('search', lineno=596, col_offset=36)], [], None, None, lineno=596, col_offset=19), lineno=596, col_offset=15), [If(UnaryOp(Not(), Name('re', Load(), lineno=597, col_offset=23), lineno=597, col_offset=19), [Import([alias('re', None)], lineno=597, col_offset=27)], [], lineno=597, col_offset=16), Assign([Subscript(Name('list', Load(), lineno=598, col_offset=16), Index(Name('i', Load(), lineno=598, col_offset=21)), Store(), lineno=598, col_offset=16)], Call(Attribute(Name('re', Load(), lineno=598, col_offset=26), 'compile', Load(), lineno=598, col_offset=26), [Subscript(Name('list', Load(), lineno=598, col_offset=37), Index(Name('i', Load(), lineno=598, col_offset=42)), Load(), lineno=598, col_offset=37)], [], None, None, lineno=598, col_offset=26), lineno=598, col_offset=16)], [], lineno=596, col_offset=12)], [], lineno=595, col_offset=8), If(Compare(Name('timeout', Load(), lineno=599, col_offset=11), [IsNot()], [Name('None', Load(), lineno=599, col_offset=26)], lineno=599, col_offset=11), [ImportFrom('time', [alias('time', None)], 0, lineno=600, col_offset=12), Assign([Name('time_start', Store(), lineno=601, col_offset=12)], Call(Name('time', Load(), lineno=601, col_offset=25), [], [], None, None, lineno=601, col_offset=25), lineno=601, col_offset=12)], [], lineno=599, col_offset=8), While(Num(1, lineno=602, col_offset=14), [Expr(Call(Attribute(Name('self', Load(), lineno=603, col_offset=12), 'process_rawq', Load(), lineno=603, col_offset=12), [], [], None, None, lineno=603, col_offset=12), lineno=603, col_offset=12), For(Name('i', Store(), lineno=604, col_offset=16), Name('indices', Load(), lineno=604, col_offset=21), [Assign([Name('m', Store(), lineno=605, col_offset=16)], Call(Attribute(Subscript(Name('list', Load(), lineno=605, col_offset=20), Index(Name('i', Load(), lineno=605, col_offset=25)), Load(), lineno=605, col_offset=20), 'search', Load(), lineno=605, col_offset=20), [Attribute(Name('self', Load(), lineno=605, col_offset=35), 'cookedq', Load(), lineno=605, col_offset=35)], [], None, None, lineno=605, col_offset=20), lineno=605, col_offset=16), If(Name('m', Load(), lineno=606, col_offset=19), [Assign([Name('e', Store(), lineno=607, col_offset=20)], Call(Attribute(Name('m', Load(), lineno=607, col_offset=24), 'end', Load(), lineno=607, col_offset=24), [], [], None, None, lineno=607, col_offset=24), lineno=607, col_offset=20), Assign([Name('text', Store(), lineno=608, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=608, col_offset=27), 'cookedq', Load(), lineno=608, col_offset=27), Slice(None, Name('e', Load(), lineno=608, col_offset=41), None), Load(), lineno=608, col_offset=27), lineno=608, col_offset=20), Assign([Attribute(Name('self', Load(), lineno=609, col_offset=20), 'cookedq', Store(), lineno=609, col_offset=20)], Subscript(Attribute(Name('self', Load(), lineno=609, col_offset=35), 'cookedq', Load(), lineno=609, col_offset=35), Slice(Name('e', Load(), lineno=609, col_offset=48), None, None), Load(), lineno=609, col_offset=35), lineno=609, col_offset=20), Return(Tuple([Name('i', Load(), lineno=610, col_offset=28), Name('m', Load(), lineno=610, col_offset=31), Name('text', Load(), lineno=610, col_offset=34)], Load(), lineno=610, col_offset=28), lineno=610, col_offset=20)], [], lineno=606, col_offset=16)], [], lineno=604, col_offset=12), If(Attribute(Name('self', Load(), lineno=611, col_offset=15), 'eof', Load(), lineno=611, col_offset=15), [Break( lineno=612, col_offset=16)], [], lineno=611, col_offset=12), If(Compare(Name('timeout', Load(), lineno=613, col_offset=15), [IsNot()], [Name('None', Load(), lineno=613, col_offset=30)], lineno=613, col_offset=15), [Assign([Name('elapsed', Store(), lineno=614, col_offset=16)], BinOp(Call(Name('time', Load(), lineno=614, col_offset=26), [], [], None, None, lineno=614, col_offset=26), Sub(), Name('time_start', Load(), lineno=614, col_offset=35), lineno=614, col_offset=26), lineno=614, col_offset=16), If(Compare(Name('elapsed', Load(), lineno=615, col_offset=19), [GtE()], [Name('timeout', Load(), lineno=615, col_offset=30)], lineno=615, col_offset=19), [Break( lineno=616, col_offset=20)], [], lineno=615, col_offset=16), Assign([Name('s_args', Store(), lineno=617, col_offset=16)], Tuple([List([Call(Attribute(Name('self', Load(), lineno=617, col_offset=27), 'fileno', Load(), lineno=617, col_offset=27), [], [], None, None, lineno=617, col_offset=27)], Load(), lineno=617, col_offset=26), List([], Load(), lineno=617, col_offset=43), List([], Load(), lineno=617, col_offset=47), BinOp(Name('timeout', Load(), lineno=617, col_offset=51), Sub(), Name('elapsed', Load(), lineno=617, col_offset=59), lineno=617, col_offset=51)], Load(), lineno=617, col_offset=26), lineno=617, col_offset=16), Assign([Tuple([Name('r', Store(), lineno=618, col_offset=16), Name('w', Store(), lineno=618, col_offset=19), Name('x', Store(), lineno=618, col_offset=22)], Store(), lineno=618, col_offset=16)], Call(Attribute(Name('select', Load(), lineno=618, col_offset=26), 'select', Load(), lineno=618, col_offset=26), [], [], Name('s_args', Load(), lineno=618, col_offset=41), None, lineno=618, col_offset=26), lineno=618, col_offset=16), If(UnaryOp(Not(), Name('r', Load(), lineno=619, col_offset=23), lineno=619, col_offset=19), [Break( lineno=620, col_offset=20)], [], lineno=619, col_offset=16)], [], lineno=613, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=621, col_offset=12), 'fill_rawq', Load(), lineno=621, col_offset=12), [], [], None, None, lineno=621, col_offset=12), lineno=621, col_offset=12)], [], lineno=602, col_offset=8), Assign([Name('text', Store(), lineno=622, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=622, col_offset=15), 'read_very_lazy', Load(), lineno=622, col_offset=15), [], [], None, None, lineno=622, col_offset=15), lineno=622, col_offset=8), If(BoolOp(And(), [UnaryOp(Not(), Name('text', Load(), lineno=623, col_offset=15), lineno=623, col_offset=11), Attribute(Name('self', Load(), lineno=623, col_offset=24), 'eof', Load(), lineno=623, col_offset=24)], lineno=623, col_offset=11), [Raise(Name('EOFError', Load(), lineno=624, col_offset=18), None, None, lineno=624, col_offset=12)], [], lineno=623, col_offset=8), Return(Tuple([Num(-1, lineno=625, col_offset=17), Name('None', Load(), lineno=625, col_offset=20), Name('text', Load(), lineno=625, col_offset=26)], Load(), lineno=625, col_offset=16), lineno=625, col_offset=8)], [], lineno=570, col_offset=4)], [], lineno=132, col_offset=0), FunctionDef('test', arguments([], None, None, []), [Expr(Str('Test program for telnetlib.\n\n    Usage: python telnetlib.py [-d] ... [host [port]]\n\n    Default host is localhost; default port is 23.\n\n    ', lineno=635, col_offset=-1), lineno=635, col_offset=-1), Assign([Name('debuglevel', Store(), lineno=636, col_offset=4)], Num(0, lineno=636, col_offset=17), lineno=636, col_offset=4), While(BoolOp(And(), [Subscript(Attribute(Name('sys', Load(), lineno=637, col_offset=10), 'argv', Load(), lineno=637, col_offset=10), Slice(Num(1, lineno=637, col_offset=19), None, None), Load(), lineno=637, col_offset=10), Compare(Subscript(Attribute(Name('sys', Load(), lineno=637, col_offset=27), 'argv', Load(), lineno=637, col_offset=27), Index(Num(1, lineno=637, col_offset=36)), Load(), lineno=637, col_offset=27), [Eq()], [Str('-d', lineno=637, col_offset=42)], lineno=637, col_offset=27)], lineno=637, col_offset=10), [Assign([Name('debuglevel', Store(), lineno=638, col_offset=8)], BinOp(Name('debuglevel', Load(), lineno=638, col_offset=21), Add(), Num(1, lineno=638, col_offset=32), lineno=638, col_offset=21), lineno=638, col_offset=8), Delete([Subscript(Attribute(Name('sys', Load(), lineno=639, col_offset=12), 'argv', Load(), lineno=639, col_offset=12), Index(Num(1, lineno=639, col_offset=21)), Del(), lineno=639, col_offset=12)], lineno=639, col_offset=8)], [], lineno=637, col_offset=4), Assign([Name('host', Store(), lineno=640, col_offset=4)], Str('localhost', lineno=640, col_offset=11), lineno=640, col_offset=4), If(Subscript(Attribute(Name('sys', Load(), lineno=641, col_offset=7), 'argv', Load(), lineno=641, col_offset=7), Slice(Num(1, lineno=641, col_offset=16), None, None), Load(), lineno=641, col_offset=7), [Assign([Name('host', Store(), lineno=642, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=642, col_offset=15), 'argv', Load(), lineno=642, col_offset=15), Index(Num(1, lineno=642, col_offset=24)), Load(), lineno=642, col_offset=15), lineno=642, col_offset=8)], [], lineno=641, col_offset=4), Assign([Name('port', Store(), lineno=643, col_offset=4)], Num(0, lineno=643, col_offset=11), lineno=643, col_offset=4), If(Subscript(Attribute(Name('sys', Load(), lineno=644, col_offset=7), 'argv', Load(), lineno=644, col_offset=7), Slice(Num(2, lineno=644, col_offset=16), None, None), Load(), lineno=644, col_offset=7), [Assign([Name('portstr', Store(), lineno=645, col_offset=8)], Subscript(Attribute(Name('sys', Load(), lineno=645, col_offset=18), 'argv', Load(), lineno=645, col_offset=18), Index(Num(2, lineno=645, col_offset=27)), Load(), lineno=645, col_offset=18), lineno=645, col_offset=8), TryExcept([Assign([Name('port', Store(), lineno=647, col_offset=12)], Call(Name('int', Load(), lineno=647, col_offset=19), [Name('portstr', Load(), lineno=647, col_offset=23)], [], None, None, lineno=647, col_offset=19), lineno=647, col_offset=12)], [ExceptHandler(Name('ValueError', Load(), lineno=648, col_offset=15), None, [Assign([Name('port', Store(), lineno=649, col_offset=12)], Call(Attribute(Name('socket', Load(), lineno=649, col_offset=19), 'getservbyname', Load(), lineno=649, col_offset=19), [Name('portstr', Load(), lineno=649, col_offset=40), Str('tcp', lineno=649, col_offset=49)], [], None, None, lineno=649, col_offset=19), lineno=649, col_offset=12)], lineno=648, col_offset=8)], [], lineno=646, col_offset=8)], [], lineno=644, col_offset=4), Assign([Name('tn', Store(), lineno=650, col_offset=4)], Call(Name('Telnet', Load(), lineno=650, col_offset=9), [], [], None, None, lineno=650, col_offset=9), lineno=650, col_offset=4), Expr(Call(Attribute(Name('tn', Load(), lineno=651, col_offset=4), 'set_debuglevel', Load(), lineno=651, col_offset=4), [Name('debuglevel', Load(), lineno=651, col_offset=22)], [], None, None, lineno=651, col_offset=4), lineno=651, col_offset=4), Expr(Call(Attribute(Name('tn', Load(), lineno=652, col_offset=4), 'open', Load(), lineno=652, col_offset=4), [Name('host', Load(), lineno=652, col_offset=12), Name('port', Load(), lineno=652, col_offset=18)], [keyword('timeout', Num(0.5, lineno=652, col_offset=32))], None, None, lineno=652, col_offset=4), lineno=652, col_offset=4), Expr(Call(Attribute(Name('tn', Load(), lineno=653, col_offset=4), 'interact', Load(), lineno=653, col_offset=4), [], [], None, None, lineno=653, col_offset=4), lineno=653, col_offset=4), Expr(Call(Attribute(Name('tn', Load(), lineno=654, col_offset=4), 'close', Load(), lineno=654, col_offset=4), [], [], None, None, lineno=654, col_offset=4), lineno=654, col_offset=4)], [], lineno=628, col_offset=0), If(Compare(Name('__name__', Load(), lineno=656, col_offset=3), [Eq()], [Str('__main__', lineno=656, col_offset=15)], lineno=656, col_offset=3), [Expr(Call(Name('test', Load(), lineno=657, col_offset=4), [], [], None, None, lineno=657, col_offset=4), lineno=657, col_offset=4)], [], lineno=656, col_offset=0)])
