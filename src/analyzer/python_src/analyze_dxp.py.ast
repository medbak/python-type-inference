Module([Expr(Str("\nSome helper functions to analyze the output of sys.getdxp() (which is\nonly available if Python was built with -DDYNAMIC_EXECUTION_PROFILE).\nThese will tell you which opcodes have been executed most frequently\nin the current process, and, if Python was also built with -DDXPAIRS,\nwill tell you which instruction _pairs_ were executed most frequently,\nwhich may help in choosing new instructions.\n\nIf Python was built without -DDYNAMIC_EXECUTION_PROFILE, importing\nthis module will raise a RuntimeError.\n\nIf you're running a script you want to profile, a simple way to get\nthe common pairs is:\n\n$ PYTHONPATH=$PYTHONPATH:<python_srcdir>/Tools/scripts ./python -i -O the_script.py --args\n...\n> from analyze_dxp import *\n> s = render_common_pairs()\n> open('/tmp/some_file', 'w').write(s)\n", lineno=21, col_offset=-1), lineno=21, col_offset=-1), Import([alias('copy', None)], lineno=23, col_offset=0), Import([alias('opcode', None)], lineno=24, col_offset=0), Import([alias('operator', None)], lineno=25, col_offset=0), Import([alias('sys', None)], lineno=26, col_offset=0), Import([alias('threading', None)], lineno=27, col_offset=0), If(UnaryOp(Not(), Call(Name('hasattr', Load(), lineno=29, col_offset=7), [Name('sys', Load(), lineno=29, col_offset=15), Str('getdxp', lineno=29, col_offset=20)], [], None, None, lineno=29, col_offset=7), lineno=29, col_offset=3), [Raise(Call(Name('RuntimeError', Load(), lineno=30, col_offset=10), [Str("Can't import analyze_dxp: Python built without -DDYNAMIC_EXECUTION_PROFILE.", lineno=30, col_offset=23)], [], None, None, lineno=30, col_offset=10), None, None, lineno=30, col_offset=4)], [], lineno=29, col_offset=0), Assign([Name('_profile_lock', Store(), lineno=34, col_offset=0)], Call(Attribute(Name('threading', Load(), lineno=34, col_offset=16), 'RLock', Load(), lineno=34, col_offset=16), [], [], None, None, lineno=34, col_offset=16), lineno=34, col_offset=0), Assign([Name('_cumulative_profile', Store(), lineno=35, col_offset=0)], Call(Attribute(Name('sys', Load(), lineno=35, col_offset=22), 'getdxp', Load(), lineno=35, col_offset=22), [], [], None, None, lineno=35, col_offset=22), lineno=35, col_offset=0), FunctionDef('has_pairs', arguments([Name('profile', Param(), lineno=39, col_offset=14)], None, None, []), [Expr(Str('Returns True if the Python that produced the argument profile\n    was built with -DDXPAIRS.', lineno=41, col_offset=-1), lineno=41, col_offset=-1), Return(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=43, col_offset=11), [Name('profile', Load(), lineno=43, col_offset=15)], [], None, None, lineno=43, col_offset=11), [Gt()], [Num(0, lineno=43, col_offset=26)], lineno=43, col_offset=11), Call(Name('isinstance', Load(), lineno=43, col_offset=32), [Subscript(Name('profile', Load(), lineno=43, col_offset=43), Index(Num(0, lineno=43, col_offset=51)), Load(), lineno=43, col_offset=43), Name('list', Load(), lineno=43, col_offset=55)], [], None, None, lineno=43, col_offset=32)], lineno=43, col_offset=11), lineno=43, col_offset=4)], [], lineno=39, col_offset=0), FunctionDef('reset_profile', arguments([], None, None, []), [Expr(Str('Forgets any execution profile that has been gathered so far.', lineno=47, col_offset=4), lineno=47, col_offset=4), With(Name('_profile_lock', Load(), lineno=48, col_offset=9), None, [Expr(Call(Attribute(Name('sys', Load(), lineno=49, col_offset=8), 'getdxp', Load(), lineno=49, col_offset=8), [], [], None, None, lineno=49, col_offset=8), lineno=49, col_offset=8), Global(['_cumulative_profile'], lineno=50, col_offset=8), Assign([Name('_cumulative_profile', Store(), lineno=51, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=51, col_offset=30), 'getdxp', Load(), lineno=51, col_offset=30), [], [], None, None, lineno=51, col_offset=30), lineno=51, col_offset=8)], lineno=48, col_offset=9)], [], lineno=46, col_offset=0), FunctionDef('merge_profile', arguments([], None, None, []), [Expr(Str("Reads sys.getdxp() and merges it into this module's cached copy.\n\n    We need this because sys.getdxp() 0s itself every time it's called.", lineno=57, col_offset=-1), lineno=57, col_offset=-1), With(Name('_profile_lock', Load(), lineno=59, col_offset=9), None, [Assign([Name('new_profile', Store(), lineno=60, col_offset=8)], Call(Attribute(Name('sys', Load(), lineno=60, col_offset=22), 'getdxp', Load(), lineno=60, col_offset=22), [], [], None, None, lineno=60, col_offset=22), lineno=60, col_offset=8), If(Call(Name('has_pairs', Load(), lineno=61, col_offset=11), [Name('new_profile', Load(), lineno=61, col_offset=21)], [], None, None, lineno=61, col_offset=11), [For(Name('first_inst', Store(), lineno=62, col_offset=16), Call(Name('range', Load(), lineno=62, col_offset=30), [Call(Name('len', Load(), lineno=62, col_offset=36), [Name('_cumulative_profile', Load(), lineno=62, col_offset=40)], [], None, None, lineno=62, col_offset=36)], [], None, None, lineno=62, col_offset=30), [For(Name('second_inst', Store(), lineno=63, col_offset=20), Call(Name('range', Load(), lineno=63, col_offset=35), [Call(Name('len', Load(), lineno=63, col_offset=41), [Subscript(Name('_cumulative_profile', Load(), lineno=63, col_offset=45), Index(Name('first_inst', Load(), lineno=63, col_offset=65)), Load(), lineno=63, col_offset=45)], [], None, None, lineno=63, col_offset=41)], [], None, None, lineno=63, col_offset=35), [AugAssign(Subscript(Subscript(Name('_cumulative_profile', Load(), lineno=64, col_offset=20), Index(Name('first_inst', Load(), lineno=64, col_offset=40)), Load(), lineno=64, col_offset=20), Index(Name('second_inst', Load(), lineno=64, col_offset=52)), Store(), lineno=64, col_offset=20), Add(), Subscript(Subscript(Name('new_profile', Load(), lineno=65, col_offset=24), Index(Name('first_inst', Load(), lineno=65, col_offset=36)), Load(), lineno=65, col_offset=24), Index(Name('second_inst', Load(), lineno=65, col_offset=48)), Load(), lineno=65, col_offset=24), lineno=64, col_offset=20)], [], lineno=63, col_offset=16)], [], lineno=62, col_offset=12)], [For(Name('inst', Store(), lineno=67, col_offset=16), Call(Name('range', Load(), lineno=67, col_offset=24), [Call(Name('len', Load(), lineno=67, col_offset=30), [Name('_cumulative_profile', Load(), lineno=67, col_offset=34)], [], None, None, lineno=67, col_offset=30)], [], None, None, lineno=67, col_offset=24), [AugAssign(Subscript(Name('_cumulative_profile', Load(), lineno=68, col_offset=16), Index(Name('inst', Load(), lineno=68, col_offset=36)), Store(), lineno=68, col_offset=16), Add(), Subscript(Name('new_profile', Load(), lineno=68, col_offset=45), Index(Name('inst', Load(), lineno=68, col_offset=57)), Load(), lineno=68, col_offset=45), lineno=68, col_offset=16)], [], lineno=67, col_offset=12)], lineno=61, col_offset=8)], lineno=59, col_offset=9)], [], lineno=54, col_offset=0), FunctionDef('snapshot_profile', arguments([], None, None, []), [Expr(Str('Returns the cumulative execution profile until this call.', lineno=72, col_offset=4), lineno=72, col_offset=4), With(Name('_profile_lock', Load(), lineno=73, col_offset=9), None, [Expr(Call(Name('merge_profile', Load(), lineno=74, col_offset=8), [], [], None, None, lineno=74, col_offset=8), lineno=74, col_offset=8), Return(Call(Attribute(Name('copy', Load(), lineno=75, col_offset=15), 'deepcopy', Load(), lineno=75, col_offset=15), [Name('_cumulative_profile', Load(), lineno=75, col_offset=29)], [], None, None, lineno=75, col_offset=15), lineno=75, col_offset=8)], lineno=73, col_offset=9)], [], lineno=71, col_offset=0), FunctionDef('common_instructions', arguments([Name('profile', Param(), lineno=78, col_offset=24)], None, None, []), [Expr(Str('Returns the most common opcodes in order of descending frequency.\n\n    The result is a list of tuples of the form\n      (opcode, opname, # of occurrences)\n\n    ', lineno=84, col_offset=-1), lineno=84, col_offset=-1), If(BoolOp(And(), [Call(Name('has_pairs', Load(), lineno=85, col_offset=7), [Name('profile', Load(), lineno=85, col_offset=17)], [], None, None, lineno=85, col_offset=7), Name('profile', Load(), lineno=85, col_offset=30)], lineno=85, col_offset=7), [Assign([Name('inst_list', Store(), lineno=86, col_offset=8)], Subscript(Name('profile', Load(), lineno=86, col_offset=20), Index(Num(-1, lineno=86, col_offset=29)), Load(), lineno=86, col_offset=20), lineno=86, col_offset=8)], [Assign([Name('inst_list', Store(), lineno=88, col_offset=8)], Name('profile', Load(), lineno=88, col_offset=20), lineno=88, col_offset=8)], lineno=85, col_offset=4), Assign([Name('result', Store(), lineno=89, col_offset=4)], ListComp(Tuple([Name('op', Load(), lineno=89, col_offset=15), Subscript(Attribute(Name('opcode', Load(), lineno=89, col_offset=19), 'opname', Load(), lineno=89, col_offset=19), Index(Name('op', Load(), lineno=89, col_offset=33)), Load(), lineno=89, col_offset=19), Name('count', Load(), lineno=89, col_offset=38)], Load(), lineno=89, col_offset=15), [comprehension(Tuple([Name('op', Store(), lineno=90, col_offset=18), Name('count', Store(), lineno=90, col_offset=22)], Store(), lineno=90, col_offset=18), Call(Name('enumerate', Load(), lineno=90, col_offset=31), [Name('inst_list', Load(), lineno=90, col_offset=41)], [], None, None, lineno=90, col_offset=31), [Compare(Name('count', Load(), lineno=91, col_offset=17), [Gt()], [Num(0, lineno=91, col_offset=25)], lineno=91, col_offset=17)])], lineno=89, col_offset=14), lineno=89, col_offset=4), Expr(Call(Attribute(Name('result', Load(), lineno=92, col_offset=4), 'sort', Load(), lineno=92, col_offset=4), [], [keyword('key', Call(Attribute(Name('operator', Load(), lineno=92, col_offset=20), 'itemgetter', Load(), lineno=92, col_offset=20), [Num(2, lineno=92, col_offset=40)], [], None, None, lineno=92, col_offset=20)), keyword('reverse', Name('True', Load(), lineno=92, col_offset=52))], None, None, lineno=92, col_offset=4), lineno=92, col_offset=4), Return(Name('result', Load(), lineno=93, col_offset=11), lineno=93, col_offset=4)], [], lineno=78, col_offset=0), FunctionDef('common_pairs', arguments([Name('profile', Param(), lineno=96, col_offset=17)], None, None, []), [Expr(Str('Returns the most common opcode pairs in order of descending frequency.\n\n    The result is a list of tuples of the form\n      ((1st opcode, 2nd opcode),\n       (1st opname, 2nd opname),\n       # of occurrences of the pair)\n\n    ', lineno=104, col_offset=-1), lineno=104, col_offset=-1), If(UnaryOp(Not(), Call(Name('has_pairs', Load(), lineno=105, col_offset=11), [Name('profile', Load(), lineno=105, col_offset=21)], [], None, None, lineno=105, col_offset=11), lineno=105, col_offset=7), [Return(List([], Load(), lineno=106, col_offset=15), lineno=106, col_offset=8)], [], lineno=105, col_offset=4), Assign([Name('result', Store(), lineno=107, col_offset=4)], ListComp(Tuple([Tuple([Name('op1', Load(), lineno=107, col_offset=16), Name('op2', Load(), lineno=107, col_offset=21)], Load(), lineno=107, col_offset=16), Tuple([Subscript(Attribute(Name('opcode', Load(), lineno=107, col_offset=28), 'opname', Load(), lineno=107, col_offset=28), Index(Name('op1', Load(), lineno=107, col_offset=42)), Load(), lineno=107, col_offset=28), Subscript(Attribute(Name('opcode', Load(), lineno=107, col_offset=48), 'opname', Load(), lineno=107, col_offset=48), Index(Name('op2', Load(), lineno=107, col_offset=62)), Load(), lineno=107, col_offset=48)], Load(), lineno=107, col_offset=28), Name('count', Load(), lineno=107, col_offset=69)], Load(), lineno=107, col_offset=15), [comprehension(Tuple([Name('op1', Store(), lineno=109, col_offset=18), Name('op1profile', Store(), lineno=109, col_offset=23)], Store(), lineno=109, col_offset=18), Call(Name('enumerate', Load(), lineno=109, col_offset=37), [Subscript(Name('profile', Load(), lineno=109, col_offset=47), Slice(None, Num(-1, lineno=109, col_offset=57), None), Load(), lineno=109, col_offset=47)], [], None, None, lineno=109, col_offset=37), []), comprehension(Tuple([Name('op2', Store(), lineno=110, col_offset=18), Name('count', Store(), lineno=110, col_offset=23)], Store(), lineno=110, col_offset=18), Call(Name('enumerate', Load(), lineno=110, col_offset=32), [Name('op1profile', Load(), lineno=110, col_offset=42)], [], None, None, lineno=110, col_offset=32), [Compare(Name('count', Load(), lineno=111, col_offset=17), [Gt()], [Num(0, lineno=111, col_offset=25)], lineno=111, col_offset=17)])], lineno=107, col_offset=14), lineno=107, col_offset=4), Expr(Call(Attribute(Name('result', Load(), lineno=112, col_offset=4), 'sort', Load(), lineno=112, col_offset=4), [], [keyword('key', Call(Attribute(Name('operator', Load(), lineno=112, col_offset=20), 'itemgetter', Load(), lineno=112, col_offset=20), [Num(2, lineno=112, col_offset=40)], [], None, None, lineno=112, col_offset=20)), keyword('reverse', Name('True', Load(), lineno=112, col_offset=52))], None, None, lineno=112, col_offset=4), lineno=112, col_offset=4), Return(Name('result', Load(), lineno=113, col_offset=11), lineno=113, col_offset=4)], [], lineno=96, col_offset=0), FunctionDef('render_common_pairs', arguments([Name('profile', Param(), lineno=116, col_offset=24)], None, None, [Name('None', Load(), lineno=116, col_offset=32)]), [Expr(Str("Renders the most common opcode pairs to a string in order of\n    descending frequency.\n\n    The result is a series of lines of the form:\n      # of occurrences: ('1st opname', '2nd opname')\n\n    ", lineno=123, col_offset=-1), lineno=123, col_offset=-1), If(Compare(Name('profile', Load(), lineno=124, col_offset=7), [Is()], [Name('None', Load(), lineno=124, col_offset=18)], lineno=124, col_offset=7), [Assign([Name('profile', Store(), lineno=125, col_offset=8)], Call(Name('snapshot_profile', Load(), lineno=125, col_offset=18), [], [], None, None, lineno=125, col_offset=18), lineno=125, col_offset=8)], [], lineno=124, col_offset=4), FunctionDef('seq', arguments([], None, None, []), [For(Tuple([Name('_', Store(), lineno=127, col_offset=12), Name('ops', Store(), lineno=127, col_offset=15), Name('count', Store(), lineno=127, col_offset=20)], Store(), lineno=127, col_offset=12), Call(Name('common_pairs', Load(), lineno=127, col_offset=29), [Name('profile', Load(), lineno=127, col_offset=42)], [], None, None, lineno=127, col_offset=29), [Expr(Yield(BinOp(Str('%s: %s\n', lineno=128, col_offset=18), Mod(), Tuple([Name('count', Load(), lineno=128, col_offset=32), Name('ops', Load(), lineno=128, col_offset=39)], Load(), lineno=128, col_offset=32), lineno=128, col_offset=18), lineno=128, col_offset=12), lineno=128, col_offset=12)], [], lineno=127, col_offset=8)], [], lineno=126, col_offset=4), Return(Call(Attribute(Str('', lineno=129, col_offset=11), 'join', Load(), lineno=129, col_offset=11), [Call(Name('seq', Load(), lineno=129, col_offset=19), [], [], None, None, lineno=129, col_offset=19)], [], None, None, lineno=129, col_offset=11), lineno=129, col_offset=4)], [], lineno=116, col_offset=0)])
