Module([ImportFrom('__future__', [alias('division', None)], 0, lineno=1, col_offset=0), Import([alias('sys', None)], lineno=6, col_offset=0), Import([alias('random', None)], lineno=7, col_offset=0), Import([alias('math', None)], lineno=8, col_offset=0), Import([alias('unittest', None)], lineno=9, col_offset=0), ImportFrom('test.test_support', [alias('run_unittest', None)], 0, lineno=10, col_offset=0), Assign([Name('requires_IEEE_754', Store(), lineno=13, col_offset=0)], Call(Attribute(Name('unittest', Load(), lineno=13, col_offset=20), 'skipUnless', Load(), lineno=13, col_offset=20), [Call(Attribute(Call(Attribute(Name('float', Load(), lineno=14, col_offset=4), '__getformat__', Load(), lineno=14, col_offset=4), [Str('double', lineno=14, col_offset=24)], [], None, None, lineno=14, col_offset=4), 'startswith', Load(), lineno=14, col_offset=4), [Str('IEEE', lineno=14, col_offset=45)], [], None, None, lineno=14, col_offset=4), Str('test requires IEEE 754 doubles', lineno=15, col_offset=4)], [], None, None, lineno=13, col_offset=20), lineno=13, col_offset=0), Assign([Name('DBL_MAX', Store(), lineno=17, col_offset=0)], Attribute(Attribute(Name('sys', Load(), lineno=17, col_offset=10), 'float_info', Load(), lineno=17, col_offset=10), 'max', Load(), lineno=17, col_offset=10), lineno=17, col_offset=0), Assign([Name('DBL_MAX_EXP', Store(), lineno=18, col_offset=0)], Attribute(Attribute(Name('sys', Load(), lineno=18, col_offset=14), 'float_info', Load(), lineno=18, col_offset=14), 'max_exp', Load(), lineno=18, col_offset=14), lineno=18, col_offset=0), Assign([Name('DBL_MIN_EXP', Store(), lineno=19, col_offset=0)], Attribute(Attribute(Name('sys', Load(), lineno=19, col_offset=14), 'float_info', Load(), lineno=19, col_offset=14), 'min_exp', Load(), lineno=19, col_offset=14), lineno=19, col_offset=0), Assign([Name('DBL_MANT_DIG', Store(), lineno=20, col_offset=0)], Attribute(Attribute(Name('sys', Load(), lineno=20, col_offset=15), 'float_info', Load(), lineno=20, col_offset=15), 'mant_dig', Load(), lineno=20, col_offset=15), lineno=20, col_offset=0), Assign([Name('DBL_MIN_OVERFLOW', Store(), lineno=21, col_offset=0)], BinOp(BinOp(Num(2, lineno=21, col_offset=19), Pow(), Name('DBL_MAX_EXP', Load(), lineno=21, col_offset=22), lineno=21, col_offset=19), Sub(), BinOp(Num(2, lineno=21, col_offset=36), Pow(), BinOp(BinOp(Name('DBL_MAX_EXP', Load(), lineno=21, col_offset=40), Sub(), Name('DBL_MANT_DIG', Load(), lineno=21, col_offset=54), lineno=21, col_offset=40), Sub(), Num(1, lineno=21, col_offset=69), lineno=21, col_offset=67), lineno=21, col_offset=36), lineno=21, col_offset=19), lineno=21, col_offset=0), FunctionDef('truediv', arguments([Name('a', Param(), lineno=24, col_offset=12), Name('b', Param(), lineno=24, col_offset=15)], None, None, []), [Expr(Str('Correctly-rounded true division for integers.', lineno=25, col_offset=4), lineno=25, col_offset=4), Assign([Name('negative', Store(), lineno=26, col_offset=4)], Compare(BinOp(Name('a', Load(), lineno=26, col_offset=15), BitXor(), Name('b', Load(), lineno=26, col_offset=17), lineno=26, col_offset=15), [Lt()], [Num(0, lineno=26, col_offset=21)], lineno=26, col_offset=15), lineno=26, col_offset=4), Assign([Tuple([Name('a', Store(), lineno=27, col_offset=4), Name('b', Store(), lineno=27, col_offset=7)], Store(), lineno=27, col_offset=4)], Tuple([Call(Name('abs', Load(), lineno=27, col_offset=11), [Name('a', Load(), lineno=27, col_offset=15)], [], None, None, lineno=27, col_offset=11), Call(Name('abs', Load(), lineno=27, col_offset=19), [Name('b', Load(), lineno=27, col_offset=23)], [], None, None, lineno=27, col_offset=19)], Load(), lineno=27, col_offset=11), lineno=27, col_offset=4), If(UnaryOp(Not(), Name('b', Load(), lineno=30, col_offset=11), lineno=30, col_offset=7), [Raise(Call(Name('ZeroDivisionError', Load(), lineno=31, col_offset=14), [Str('division by zero', lineno=31, col_offset=32)], [], None, None, lineno=31, col_offset=14), None, None, lineno=31, col_offset=8)], [], lineno=30, col_offset=4), If(Compare(Name('a', Load(), lineno=32, col_offset=7), [GtE()], [BinOp(Name('DBL_MIN_OVERFLOW', Load(), lineno=32, col_offset=12), Mult(), Name('b', Load(), lineno=32, col_offset=31), lineno=32, col_offset=12)], lineno=32, col_offset=7), [Raise(Call(Name('OverflowError', Load(), lineno=33, col_offset=14), [Str('int/int too large to represent as a float', lineno=33, col_offset=28)], [], None, None, lineno=33, col_offset=14), None, None, lineno=33, col_offset=8)], [], lineno=32, col_offset=4), Assign([Name('d', Store(), lineno=36, col_offset=4)], BinOp(Call(Attribute(Name('a', Load(), lineno=36, col_offset=8), 'bit_length', Load(), lineno=36, col_offset=8), [], [], None, None, lineno=36, col_offset=8), Sub(), Call(Attribute(Name('b', Load(), lineno=36, col_offset=25), 'bit_length', Load(), lineno=36, col_offset=25), [], [], None, None, lineno=36, col_offset=25), lineno=36, col_offset=8), lineno=36, col_offset=4), If(BoolOp(Or(), [BoolOp(And(), [Compare(Name('d', Load(), lineno=37, col_offset=7), [GtE()], [Num(0, lineno=37, col_offset=12)], lineno=37, col_offset=7), Compare(Name('a', Load(), lineno=37, col_offset=18), [GtE()], [BinOp(BinOp(Num(2, lineno=37, col_offset=23), Pow(), Name('d', Load(), lineno=37, col_offset=26), lineno=37, col_offset=23), Mult(), Name('b', Load(), lineno=37, col_offset=30), lineno=37, col_offset=23)], lineno=37, col_offset=18)], lineno=37, col_offset=7), BoolOp(And(), [Compare(Name('d', Load(), lineno=37, col_offset=35), [Lt()], [Num(0, lineno=37, col_offset=39)], lineno=37, col_offset=35), Compare(BinOp(Name('a', Load(), lineno=37, col_offset=45), Mult(), BinOp(Num(2, lineno=37, col_offset=49), Pow(), UnaryOp(USub(), Name('d', Load(), lineno=37, col_offset=53), lineno=37, col_offset=52), lineno=37, col_offset=49), lineno=37, col_offset=45), [GtE()], [Name('b', Load(), lineno=37, col_offset=58)], lineno=37, col_offset=45)], lineno=37, col_offset=35)], lineno=37, col_offset=7), [AugAssign(Name('d', Store(), lineno=38, col_offset=8), Add(), Num(1, lineno=38, col_offset=13), lineno=38, col_offset=8)], [], lineno=37, col_offset=4), Assign([Name('exp', Store(), lineno=41, col_offset=4)], BinOp(Call(Name('max', Load(), lineno=41, col_offset=10), [Name('d', Load(), lineno=41, col_offset=14), Name('DBL_MIN_EXP', Load(), lineno=41, col_offset=17)], [], None, None, lineno=41, col_offset=10), Sub(), Name('DBL_MANT_DIG', Load(), lineno=41, col_offset=32), lineno=41, col_offset=10), lineno=41, col_offset=4), Assign([Tuple([Name('a', Store(), lineno=42, col_offset=4), Name('b', Store(), lineno=42, col_offset=7)], Store(), lineno=42, col_offset=4)], Tuple([BinOp(Name('a', Load(), lineno=42, col_offset=11), LShift(), Call(Name('max', Load(), lineno=42, col_offset=16), [UnaryOp(USub(), Name('exp', Load(), lineno=42, col_offset=21), lineno=42, col_offset=20), Num(0, lineno=42, col_offset=26)], [], None, None, lineno=42, col_offset=16), lineno=42, col_offset=11), BinOp(Name('b', Load(), lineno=42, col_offset=30), LShift(), Call(Name('max', Load(), lineno=42, col_offset=35), [Name('exp', Load(), lineno=42, col_offset=39), Num(0, lineno=42, col_offset=44)], [], None, None, lineno=42, col_offset=35), lineno=42, col_offset=30)], Load(), lineno=42, col_offset=11), lineno=42, col_offset=4), Assign([Tuple([Name('q', Store(), lineno=43, col_offset=4), Name('r', Store(), lineno=43, col_offset=7)], Store(), lineno=43, col_offset=4)], Call(Name('divmod', Load(), lineno=43, col_offset=11), [Name('a', Load(), lineno=43, col_offset=18), Name('b', Load(), lineno=43, col_offset=21)], [], None, None, lineno=43, col_offset=11), lineno=43, col_offset=4), If(BoolOp(Or(), [Compare(BinOp(Num(2, lineno=47, col_offset=7), Mult(), Name('r', Load(), lineno=47, col_offset=9), lineno=47, col_offset=7), [Gt()], [Name('b', Load(), lineno=47, col_offset=13)], lineno=47, col_offset=7), BoolOp(And(), [Compare(BinOp(Num(2, lineno=47, col_offset=18), Mult(), Name('r', Load(), lineno=47, col_offset=20), lineno=47, col_offset=18), [Eq()], [Name('b', Load(), lineno=47, col_offset=25)], lineno=47, col_offset=18), Compare(BinOp(Name('q', Load(), lineno=47, col_offset=31), Mod(), Num(2, lineno=47, col_offset=35), lineno=47, col_offset=31), [Eq()], [Num(1, lineno=47, col_offset=40)], lineno=47, col_offset=31)], lineno=47, col_offset=18)], lineno=47, col_offset=7), [AugAssign(Name('q', Store(), lineno=48, col_offset=8), Add(), Num(1, lineno=48, col_offset=13), lineno=48, col_offset=8)], [], lineno=47, col_offset=4), Assign([Name('result', Store(), lineno=50, col_offset=4)], Call(Attribute(Name('math', Load(), lineno=50, col_offset=13), 'ldexp', Load(), lineno=50, col_offset=13), [Call(Name('float', Load(), lineno=50, col_offset=24), [Name('q', Load(), lineno=50, col_offset=30)], [], None, None, lineno=50, col_offset=24), Name('exp', Load(), lineno=50, col_offset=34)], [], None, None, lineno=50, col_offset=13), lineno=50, col_offset=4), Return(IfExp(Name('negative', Load(), lineno=51, col_offset=22), UnaryOp(USub(), Name('result', Load(), lineno=51, col_offset=12), lineno=51, col_offset=11), Name('result', Load(), lineno=51, col_offset=36), lineno=51, col_offset=11), lineno=51, col_offset=4)], [], lineno=24, col_offset=0), ClassDef('TrueDivisionTests', [Attribute(Name('unittest', Load(), lineno=53, col_offset=24), 'TestCase', Load(), lineno=53, col_offset=24)], [FunctionDef('test', arguments([Name('self', Param(), lineno=54, col_offset=13)], None, None, []), [Assign([Name('huge', Store(), lineno=55, col_offset=8)], BinOp(Num(1L, lineno=55, col_offset=15), LShift(), Num(40000, lineno=55, col_offset=21), lineno=55, col_offset=15), lineno=55, col_offset=8), Assign([Name('mhuge', Store(), lineno=56, col_offset=8)], UnaryOp(USub(), Name('huge', Load(), lineno=56, col_offset=17), lineno=56, col_offset=16), lineno=56, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=57, col_offset=8), 'assertEqual', Load(), lineno=57, col_offset=8), [BinOp(Name('huge', Load(), lineno=57, col_offset=25), Div(), Name('huge', Load(), lineno=57, col_offset=32), lineno=57, col_offset=25), Num(1.0, lineno=57, col_offset=38)], [], None, None, lineno=57, col_offset=8), lineno=57, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=58, col_offset=8), 'assertEqual', Load(), lineno=58, col_offset=8), [BinOp(Name('mhuge', Load(), lineno=58, col_offset=25), Div(), Name('mhuge', Load(), lineno=58, col_offset=33), lineno=58, col_offset=25), Num(1.0, lineno=58, col_offset=40)], [], None, None, lineno=58, col_offset=8), lineno=58, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=59, col_offset=8), 'assertEqual', Load(), lineno=59, col_offset=8), [BinOp(Name('huge', Load(), lineno=59, col_offset=25), Div(), Name('mhuge', Load(), lineno=59, col_offset=32), lineno=59, col_offset=25), Num(-1.0, lineno=59, col_offset=40)], [], None, None, lineno=59, col_offset=8), lineno=59, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=60, col_offset=8), 'assertEqual', Load(), lineno=60, col_offset=8), [BinOp(Name('mhuge', Load(), lineno=60, col_offset=25), Div(), Name('huge', Load(), lineno=60, col_offset=33), lineno=60, col_offset=25), Num(-1.0, lineno=60, col_offset=40)], [], None, None, lineno=60, col_offset=8), lineno=60, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=61, col_offset=8), 'assertEqual', Load(), lineno=61, col_offset=8), [BinOp(Num(1, lineno=61, col_offset=25), Div(), Name('huge', Load(), lineno=61, col_offset=29), lineno=61, col_offset=25), Num(0.0, lineno=61, col_offset=35)], [], None, None, lineno=61, col_offset=8), lineno=61, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=62, col_offset=8), 'assertEqual', Load(), lineno=62, col_offset=8), [BinOp(Num(1L, lineno=62, col_offset=25), Div(), Name('huge', Load(), lineno=62, col_offset=30), lineno=62, col_offset=25), Num(0.0, lineno=62, col_offset=36)], [], None, None, lineno=62, col_offset=8), lineno=62, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=63, col_offset=8), 'assertEqual', Load(), lineno=63, col_offset=8), [BinOp(Num(1, lineno=63, col_offset=25), Div(), Name('mhuge', Load(), lineno=63, col_offset=29), lineno=63, col_offset=25), Num(0.0, lineno=63, col_offset=36)], [], None, None, lineno=63, col_offset=8), lineno=63, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=64, col_offset=8), 'assertEqual', Load(), lineno=64, col_offset=8), [BinOp(Num(1L, lineno=64, col_offset=25), Div(), Name('mhuge', Load(), lineno=64, col_offset=30), lineno=64, col_offset=25), Num(0.0, lineno=64, col_offset=37)], [], None, None, lineno=64, col_offset=8), lineno=64, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=65, col_offset=8), 'assertEqual', Load(), lineno=65, col_offset=8), [BinOp(BinOp(BinOp(Num(666, lineno=65, col_offset=26), Mult(), Name('huge', Load(), lineno=65, col_offset=32), lineno=65, col_offset=26), Add(), BinOp(Name('huge', Load(), lineno=65, col_offset=40), RShift(), Num(1, lineno=65, col_offset=48), lineno=65, col_offset=40), lineno=65, col_offset=26), Div(), Name('huge', Load(), lineno=65, col_offset=54), lineno=65, col_offset=25), Num(666.5, lineno=65, col_offset=60)], [], None, None, lineno=65, col_offset=8), lineno=65, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=66, col_offset=8), 'assertEqual', Load(), lineno=66, col_offset=8), [BinOp(BinOp(BinOp(Num(666, lineno=66, col_offset=26), Mult(), Name('mhuge', Load(), lineno=66, col_offset=32), lineno=66, col_offset=26), Add(), BinOp(Name('mhuge', Load(), lineno=66, col_offset=41), RShift(), Num(1, lineno=66, col_offset=50), lineno=66, col_offset=41), lineno=66, col_offset=26), Div(), Name('mhuge', Load(), lineno=66, col_offset=56), lineno=66, col_offset=25), Num(666.5, lineno=66, col_offset=63)], [], None, None, lineno=66, col_offset=8), lineno=66, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=67, col_offset=8), 'assertEqual', Load(), lineno=67, col_offset=8), [BinOp(BinOp(BinOp(Num(666, lineno=67, col_offset=26), Mult(), Name('huge', Load(), lineno=67, col_offset=32), lineno=67, col_offset=26), Add(), BinOp(Name('huge', Load(), lineno=67, col_offset=40), RShift(), Num(1, lineno=67, col_offset=48), lineno=67, col_offset=40), lineno=67, col_offset=26), Div(), Name('mhuge', Load(), lineno=67, col_offset=54), lineno=67, col_offset=25), Num(-666.5, lineno=67, col_offset=62)], [], None, None, lineno=67, col_offset=8), lineno=67, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=68, col_offset=8), 'assertEqual', Load(), lineno=68, col_offset=8), [BinOp(BinOp(BinOp(Num(666, lineno=68, col_offset=26), Mult(), Name('mhuge', Load(), lineno=68, col_offset=32), lineno=68, col_offset=26), Add(), BinOp(Name('mhuge', Load(), lineno=68, col_offset=41), RShift(), Num(1, lineno=68, col_offset=50), lineno=68, col_offset=41), lineno=68, col_offset=26), Div(), Name('huge', Load(), lineno=68, col_offset=56), lineno=68, col_offset=25), Num(-666.5, lineno=68, col_offset=63)], [], None, None, lineno=68, col_offset=8), lineno=68, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=69, col_offset=8), 'assertEqual', Load(), lineno=69, col_offset=8), [BinOp(Name('huge', Load(), lineno=69, col_offset=25), Div(), BinOp(Name('huge', Load(), lineno=69, col_offset=33), LShift(), Num(1, lineno=69, col_offset=41), lineno=69, col_offset=33), lineno=69, col_offset=25), Num(0.5, lineno=69, col_offset=45)], [], None, None, lineno=69, col_offset=8), lineno=69, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=70, col_offset=8), 'assertEqual', Load(), lineno=70, col_offset=8), [BinOp(BinOp(Num(1000000, lineno=70, col_offset=26), Mult(), Name('huge', Load(), lineno=70, col_offset=36), lineno=70, col_offset=26), Div(), Name('huge', Load(), lineno=70, col_offset=44), lineno=70, col_offset=25), Num(1000000, lineno=70, col_offset=50)], [], None, None, lineno=70, col_offset=8), lineno=70, col_offset=8), Assign([Name('namespace', Store(), lineno=72, col_offset=8)], Dict([Str('huge', lineno=72, col_offset=21), Str('mhuge', lineno=72, col_offset=35)], [Name('huge', Load(), lineno=72, col_offset=29), Name('mhuge', Load(), lineno=72, col_offset=44)], lineno=72, col_offset=20), lineno=72, col_offset=8), For(Name('overflow', Store(), lineno=74, col_offset=12), List([Str('float(huge)', lineno=74, col_offset=25), Str('float(mhuge)', lineno=74, col_offset=40), Str('huge / 1', lineno=75, col_offset=25), Str('huge / 2L', lineno=75, col_offset=37), Str('huge / -1', lineno=75, col_offset=50), Str('huge / -2L', lineno=75, col_offset=63), Str('mhuge / 100', lineno=76, col_offset=25), Str('mhuge / 100L', lineno=76, col_offset=40)], Load(), lineno=74, col_offset=24), [With(Call(Attribute(Name('self', Load(), lineno=79, col_offset=17), 'assertRaises', Load(), lineno=79, col_offset=17), [Name('OverflowError', Load(), lineno=79, col_offset=35)], [], None, None, lineno=79, col_offset=17), None, [Expr(Call(Name('eval', Load(), lineno=80, col_offset=16), [Name('overflow', Load(), lineno=80, col_offset=21), Name('namespace', Load(), lineno=80, col_offset=31)], [], None, None, lineno=80, col_offset=16), lineno=80, col_offset=16)], lineno=79, col_offset=17)], [], lineno=74, col_offset=8), For(Name('underflow', Store(), lineno=82, col_offset=12), List([Str('1 / huge', lineno=82, col_offset=26), Str('2L / huge', lineno=82, col_offset=38), Str('-1 / huge', lineno=82, col_offset=51), Str('-2L / huge', lineno=82, col_offset=64), Str('100 / mhuge', lineno=83, col_offset=25), Str('100L / mhuge', lineno=83, col_offset=40)], Load(), lineno=82, col_offset=25), [Assign([Name('result', Store(), lineno=84, col_offset=12)], Call(Name('eval', Load(), lineno=84, col_offset=21), [Name('underflow', Load(), lineno=84, col_offset=26), Name('namespace', Load(), lineno=84, col_offset=37)], [], None, None, lineno=84, col_offset=21), lineno=84, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=85, col_offset=12), 'assertEqual', Load(), lineno=85, col_offset=12), [Name('result', Load(), lineno=85, col_offset=29), Num(0.0, lineno=85, col_offset=37), Call(Attribute(Str('expected underflow to 0 from {!r}', lineno=85, col_offset=42), 'format', Load(), lineno=85, col_offset=42), [Name('underflow', Load(), lineno=86, col_offset=48)], [], None, None, lineno=85, col_offset=42)], [], None, None, lineno=85, col_offset=12), lineno=85, col_offset=12)], [], lineno=82, col_offset=8), For(Name('zero', Store(), lineno=88, col_offset=12), List([Str('huge / 0', lineno=88, col_offset=21), Str('huge / 0L', lineno=88, col_offset=33), Str('mhuge / 0', lineno=88, col_offset=46), Str('mhuge / 0L', lineno=88, col_offset=59)], Load(), lineno=88, col_offset=20), [With(Call(Attribute(Name('self', Load(), lineno=89, col_offset=17), 'assertRaises', Load(), lineno=89, col_offset=17), [Name('ZeroDivisionError', Load(), lineno=89, col_offset=35)], [], None, None, lineno=89, col_offset=17), None, [Expr(Call(Name('eval', Load(), lineno=90, col_offset=16), [Name('zero', Load(), lineno=90, col_offset=21), Name('namespace', Load(), lineno=90, col_offset=27)], [], None, None, lineno=90, col_offset=16), lineno=90, col_offset=16)], lineno=89, col_offset=17)], [], lineno=88, col_offset=8)], [], lineno=54, col_offset=4), FunctionDef('check_truediv', arguments([Name('self', Param(), lineno=92, col_offset=22), Name('a', Param(), lineno=92, col_offset=28), Name('b', Param(), lineno=92, col_offset=31), Name('skip_small', Param(), lineno=92, col_offset=34)], None, None, [Name('True', Load(), lineno=92, col_offset=45)]), [Expr(Str('Verify that the result of a/b is correctly rounded, by\n        comparing it with a pure Python implementation of correctly\n        rounded division.  b should be nonzero.', lineno=95, col_offset=-1), lineno=95, col_offset=-1), Assign([Tuple([Name('a', Store(), lineno=97, col_offset=8), Name('b', Store(), lineno=97, col_offset=11)], Store(), lineno=97, col_offset=8)], Tuple([Call(Name('long', Load(), lineno=97, col_offset=15), [Name('a', Load(), lineno=97, col_offset=20)], [], None, None, lineno=97, col_offset=15), Call(Name('long', Load(), lineno=97, col_offset=24), [Name('b', Load(), lineno=97, col_offset=29)], [], None, None, lineno=97, col_offset=24)], Load(), lineno=97, col_offset=15), lineno=97, col_offset=8), If(BoolOp(And(), [Name('skip_small', Load(), lineno=103, col_offset=11), Compare(Call(Name('max', Load(), lineno=103, col_offset=26), [Call(Name('abs', Load(), lineno=103, col_offset=30), [Name('a', Load(), lineno=103, col_offset=34)], [], None, None, lineno=103, col_offset=30), Call(Name('abs', Load(), lineno=103, col_offset=38), [Name('b', Load(), lineno=103, col_offset=42)], [], None, None, lineno=103, col_offset=38)], [], None, None, lineno=103, col_offset=26), [Lt()], [BinOp(Num(2, lineno=103, col_offset=48), Pow(), Name('DBL_MANT_DIG', Load(), lineno=103, col_offset=51), lineno=103, col_offset=48)], lineno=103, col_offset=26)], lineno=103, col_offset=11), [Return(None, lineno=104, col_offset=12)], [], lineno=103, col_offset=8), TryExcept([Assign([Name('expected', Store(), lineno=108, col_offset=12)], Call(Name('repr', Load(), lineno=108, col_offset=23), [Call(Name('truediv', Load(), lineno=108, col_offset=28), [Name('a', Load(), lineno=108, col_offset=36), Name('b', Load(), lineno=108, col_offset=39)], [], None, None, lineno=108, col_offset=28)], [], None, None, lineno=108, col_offset=23), lineno=108, col_offset=12)], [ExceptHandler(Name('OverflowError', Load(), lineno=109, col_offset=15), None, [Assign([Name('expected', Store(), lineno=110, col_offset=12)], Str('overflow', lineno=110, col_offset=23), lineno=110, col_offset=12)], lineno=109, col_offset=8), ExceptHandler(Name('ZeroDivisionError', Load(), lineno=111, col_offset=15), None, [Assign([Name('expected', Store(), lineno=112, col_offset=12)], Str('zerodivision', lineno=112, col_offset=23), lineno=112, col_offset=12)], lineno=111, col_offset=8)], [], lineno=106, col_offset=8), TryExcept([Assign([Name('got', Store(), lineno=115, col_offset=12)], Call(Name('repr', Load(), lineno=115, col_offset=18), [BinOp(Name('a', Load(), lineno=115, col_offset=23), Div(), Name('b', Load(), lineno=115, col_offset=27), lineno=115, col_offset=23)], [], None, None, lineno=115, col_offset=18), lineno=115, col_offset=12)], [ExceptHandler(Name('OverflowError', Load(), lineno=116, col_offset=15), None, [Assign([Name('got', Store(), lineno=117, col_offset=12)], Str('overflow', lineno=117, col_offset=18), lineno=117, col_offset=12)], lineno=116, col_offset=8), ExceptHandler(Name('ZeroDivisionError', Load(), lineno=118, col_offset=15), None, [Assign([Name('got', Store(), lineno=119, col_offset=12)], Str('zerodivision', lineno=119, col_offset=18), lineno=119, col_offset=12)], lineno=118, col_offset=8)], [], lineno=114, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=121, col_offset=8), 'assertEqual', Load(), lineno=121, col_offset=8), [Name('expected', Load(), lineno=121, col_offset=25), Name('got', Load(), lineno=121, col_offset=35), Call(Attribute(Str('Incorrectly rounded division {}/{}: expected {}, got {}', lineno=121, col_offset=40), 'format', Load(), lineno=121, col_offset=40), [Name('a', Load(), lineno=122, col_offset=54), Name('b', Load(), lineno=122, col_offset=57), Name('expected', Load(), lineno=122, col_offset=60), Name('got', Load(), lineno=122, col_offset=70)], [], None, None, lineno=121, col_offset=40)], [], None, None, lineno=121, col_offset=8), lineno=121, col_offset=8)], [], lineno=92, col_offset=4), FunctionDef('test_correctly_rounded_true_division', arguments([Name('self', Param(), lineno=125, col_offset=45)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=132, col_offset=8), 'check_truediv', Load(), lineno=132, col_offset=8), [Num(123, lineno=132, col_offset=27), Num(0, lineno=132, col_offset=32)], [], None, None, lineno=132, col_offset=8), lineno=132, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=133, col_offset=8), 'check_truediv', Load(), lineno=133, col_offset=8), [Num(-456, lineno=133, col_offset=28), Num(0, lineno=133, col_offset=33)], [], None, None, lineno=133, col_offset=8), lineno=133, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=134, col_offset=8), 'check_truediv', Load(), lineno=134, col_offset=8), [Num(0, lineno=134, col_offset=27), Num(3, lineno=134, col_offset=30)], [], None, None, lineno=134, col_offset=8), lineno=134, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=135, col_offset=8), 'check_truediv', Load(), lineno=135, col_offset=8), [Num(0, lineno=135, col_offset=27), Num(-3, lineno=135, col_offset=31)], [], None, None, lineno=135, col_offset=8), lineno=135, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=136, col_offset=8), 'check_truediv', Load(), lineno=136, col_offset=8), [Num(0, lineno=136, col_offset=27), Num(0, lineno=136, col_offset=30)], [], None, None, lineno=136, col_offset=8), lineno=136, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=138, col_offset=8), 'check_truediv', Load(), lineno=138, col_offset=8), [BinOp(BinOp(Num(671, lineno=138, col_offset=27), Mult(), Num(12345, lineno=138, col_offset=33), lineno=138, col_offset=27), Mult(), BinOp(Num(2, lineno=138, col_offset=41), Pow(), Name('DBL_MAX_EXP', Load(), lineno=138, col_offset=44), lineno=138, col_offset=41), lineno=138, col_offset=39), Num(12345, lineno=138, col_offset=57)], [], None, None, lineno=138, col_offset=8), lineno=138, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=139, col_offset=8), 'check_truediv', Load(), lineno=139, col_offset=8), [Num(12345, lineno=139, col_offset=27), BinOp(Num(345678, lineno=139, col_offset=34), Mult(), BinOp(Num(2, lineno=139, col_offset=43), Pow(), BinOp(Name('DBL_MANT_DIG', Load(), lineno=139, col_offset=47), Sub(), Name('DBL_MIN_EXP', Load(), lineno=139, col_offset=62), lineno=139, col_offset=47), lineno=139, col_offset=43), lineno=139, col_offset=34)], [], None, None, lineno=139, col_offset=8), lineno=139, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=141, col_offset=8), 'check_truediv', Load(), lineno=141, col_offset=8), [BinOp(Num(12345, lineno=141, col_offset=27), Mult(), BinOp(Num(2, lineno=141, col_offset=33), Pow(), Num(100, lineno=141, col_offset=36), lineno=141, col_offset=33), lineno=141, col_offset=27), Num(98765, lineno=141, col_offset=41)], [], None, None, lineno=141, col_offset=8), lineno=141, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=142, col_offset=8), 'check_truediv', Load(), lineno=142, col_offset=8), [BinOp(Num(12345, lineno=142, col_offset=27), Mult(), BinOp(Num(2, lineno=142, col_offset=33), Pow(), Num(30, lineno=142, col_offset=36), lineno=142, col_offset=33), lineno=142, col_offset=27), BinOp(Num(98765, lineno=142, col_offset=40), Mult(), BinOp(Num(7, lineno=142, col_offset=46), Pow(), Num(81, lineno=142, col_offset=49), lineno=142, col_offset=46), lineno=142, col_offset=40)], [], None, None, lineno=142, col_offset=8), lineno=142, col_offset=8), Assign([Name('bases', Store(), lineno=145, col_offset=8)], Tuple([Num(0, lineno=145, col_offset=17), Name('DBL_MANT_DIG', Load(), lineno=145, col_offset=20), Name('DBL_MIN_EXP', Load(), lineno=145, col_offset=34), Name('DBL_MAX_EXP', Load(), lineno=146, col_offset=17), BinOp(Name('DBL_MIN_EXP', Load(), lineno=146, col_offset=30), Sub(), Name('DBL_MANT_DIG', Load(), lineno=146, col_offset=44), lineno=146, col_offset=30)], Load(), lineno=145, col_offset=17), lineno=145, col_offset=8), For(Name('base', Store(), lineno=147, col_offset=12), Name('bases', Load(), lineno=147, col_offset=20), [For(Name('exp', Store(), lineno=148, col_offset=16), Call(Name('range', Load(), lineno=148, col_offset=23), [BinOp(Name('base', Load(), lineno=148, col_offset=29), Sub(), Num(15, lineno=148, col_offset=36), lineno=148, col_offset=29), BinOp(Name('base', Load(), lineno=148, col_offset=40), Add(), Num(15, lineno=148, col_offset=47), lineno=148, col_offset=40)], [], None, None, lineno=148, col_offset=23), [Expr(Call(Attribute(Name('self', Load(), lineno=149, col_offset=16), 'check_truediv', Load(), lineno=149, col_offset=16), [BinOp(Num(75312, lineno=149, col_offset=35), Mult(), BinOp(Num(2, lineno=149, col_offset=41), Pow(), Call(Name('max', Load(), lineno=149, col_offset=44), [Name('exp', Load(), lineno=149, col_offset=48), Num(0, lineno=149, col_offset=53)], [], None, None, lineno=149, col_offset=44), lineno=149, col_offset=41), lineno=149, col_offset=35), BinOp(Num(69187, lineno=149, col_offset=57), Mult(), BinOp(Num(2, lineno=149, col_offset=63), Pow(), Call(Name('max', Load(), lineno=149, col_offset=66), [UnaryOp(USub(), Name('exp', Load(), lineno=149, col_offset=71), lineno=149, col_offset=70), Num(0, lineno=149, col_offset=76)], [], None, None, lineno=149, col_offset=66), lineno=149, col_offset=63), lineno=149, col_offset=57)], [], None, None, lineno=149, col_offset=16), lineno=149, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=150, col_offset=16), 'check_truediv', Load(), lineno=150, col_offset=16), [BinOp(Num(69187, lineno=150, col_offset=35), Mult(), BinOp(Num(2, lineno=150, col_offset=41), Pow(), Call(Name('max', Load(), lineno=150, col_offset=44), [Name('exp', Load(), lineno=150, col_offset=48), Num(0, lineno=150, col_offset=53)], [], None, None, lineno=150, col_offset=44), lineno=150, col_offset=41), lineno=150, col_offset=35), BinOp(Num(75312, lineno=150, col_offset=57), Mult(), BinOp(Num(2, lineno=150, col_offset=63), Pow(), Call(Name('max', Load(), lineno=150, col_offset=66), [UnaryOp(USub(), Name('exp', Load(), lineno=150, col_offset=71), lineno=150, col_offset=70), Num(0, lineno=150, col_offset=76)], [], None, None, lineno=150, col_offset=66), lineno=150, col_offset=63), lineno=150, col_offset=57)], [], None, None, lineno=150, col_offset=16), lineno=150, col_offset=16)], [], lineno=148, col_offset=12)], [], lineno=147, col_offset=8), For(Name('m', Store(), lineno=153, col_offset=12), List([Num(1, lineno=153, col_offset=18), Num(2, lineno=153, col_offset=21), Num(7, lineno=153, col_offset=24), Num(17, lineno=153, col_offset=27), Num(12345, lineno=153, col_offset=31), BinOp(Num(7, lineno=153, col_offset=38), Pow(), Num(100, lineno=153, col_offset=41), lineno=153, col_offset=38), Num(-1, lineno=154, col_offset=19), Num(-2, lineno=154, col_offset=23), Num(-5, lineno=154, col_offset=27), Num(-23, lineno=154, col_offset=31), Num(-67891, lineno=154, col_offset=36), UnaryOp(USub(), BinOp(Num(41, lineno=154, col_offset=44), Pow(), Num(50, lineno=154, col_offset=48), lineno=154, col_offset=44), lineno=154, col_offset=43)], Load(), lineno=153, col_offset=17), [For(Name('n', Store(), lineno=155, col_offset=16), Call(Name('range', Load(), lineno=155, col_offset=21), [Num(-10, lineno=155, col_offset=28), Num(10, lineno=155, col_offset=32)], [], None, None, lineno=155, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=156, col_offset=16), 'check_truediv', Load(), lineno=156, col_offset=16), [BinOp(BinOp(Name('m', Load(), lineno=156, col_offset=35), Mult(), Name('DBL_MIN_OVERFLOW', Load(), lineno=156, col_offset=37), lineno=156, col_offset=35), Add(), Name('n', Load(), lineno=156, col_offset=56), lineno=156, col_offset=35), Name('m', Load(), lineno=156, col_offset=59)], [], None, None, lineno=156, col_offset=16), lineno=156, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=157, col_offset=16), 'check_truediv', Load(), lineno=157, col_offset=16), [BinOp(BinOp(Name('m', Load(), lineno=157, col_offset=35), Mult(), Name('DBL_MIN_OVERFLOW', Load(), lineno=157, col_offset=37), lineno=157, col_offset=35), Add(), Name('n', Load(), lineno=157, col_offset=56), lineno=157, col_offset=35), UnaryOp(USub(), Name('m', Load(), lineno=157, col_offset=60), lineno=157, col_offset=59)], [], None, None, lineno=157, col_offset=16), lineno=157, col_offset=16)], [], lineno=155, col_offset=12)], [], lineno=153, col_offset=8), For(Name('n', Store(), lineno=160, col_offset=12), Call(Name('range', Load(), lineno=160, col_offset=17), [Num(250, lineno=160, col_offset=23)], [], None, None, lineno=160, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=166, col_offset=12), 'check_truediv', Load(), lineno=166, col_offset=12), [BinOp(BinOp(BinOp(BinOp(BinOp(Num(2, lineno=166, col_offset=32), Pow(), Name('DBL_MANT_DIG', Load(), lineno=166, col_offset=35), lineno=166, col_offset=32), Add(), Num(1, lineno=166, col_offset=50), lineno=166, col_offset=32), Mult(), Num(12345, lineno=166, col_offset=53), lineno=166, col_offset=31), Mult(), BinOp(Num(2, lineno=166, col_offset=59), Pow(), Num(200, lineno=166, col_offset=62), lineno=166, col_offset=59), lineno=166, col_offset=58), Add(), BinOp(Num(2, lineno=166, col_offset=68), Pow(), Name('n', Load(), lineno=166, col_offset=71), lineno=166, col_offset=68), lineno=166, col_offset=31), BinOp(BinOp(Num(2, lineno=167, col_offset=27), Pow(), Name('DBL_MANT_DIG', Load(), lineno=167, col_offset=30), lineno=167, col_offset=27), Mult(), Num(12345, lineno=167, col_offset=43), lineno=167, col_offset=27)], [], None, None, lineno=166, col_offset=12), lineno=166, col_offset=12)], [], lineno=160, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=173, col_offset=8), 'check_truediv', Load(), lineno=173, col_offset=8), [Num(1, lineno=173, col_offset=27), Num(2731, lineno=173, col_offset=30)], [], None, None, lineno=173, col_offset=8), lineno=173, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=177, col_offset=8), 'check_truediv', Load(), lineno=177, col_offset=8), [Num(295147931372582273023L, lineno=177, col_offset=27), Num(295147932265116303360L, lineno=177, col_offset=50)], [], None, None, lineno=177, col_offset=8), lineno=177, col_offset=8), For(Name('i', Store(), lineno=178, col_offset=12), Call(Name('range', Load(), lineno=178, col_offset=17), [Num(1000, lineno=178, col_offset=23)], [], None, None, lineno=178, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=179, col_offset=12), 'check_truediv', Load(), lineno=179, col_offset=12), [BinOp(Num(10, lineno=179, col_offset=31), Pow(), BinOp(Name('i', Load(), lineno=179, col_offset=36), Add(), Num(1, lineno=179, col_offset=38), lineno=179, col_offset=36), lineno=179, col_offset=31), BinOp(Num(10, lineno=179, col_offset=42), Pow(), Name('i', Load(), lineno=179, col_offset=46), lineno=179, col_offset=42)], [], None, None, lineno=179, col_offset=12), lineno=179, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=180, col_offset=12), 'check_truediv', Load(), lineno=180, col_offset=12), [BinOp(Num(10, lineno=180, col_offset=31), Pow(), Name('i', Load(), lineno=180, col_offset=35), lineno=180, col_offset=31), BinOp(Num(10, lineno=180, col_offset=38), Pow(), BinOp(Name('i', Load(), lineno=180, col_offset=43), Add(), Num(1, lineno=180, col_offset=45), lineno=180, col_offset=43), lineno=180, col_offset=38)], [], None, None, lineno=180, col_offset=12), lineno=180, col_offset=12)], [], lineno=178, col_offset=8), For(Name('m', Store(), lineno=183, col_offset=12), List([Num(1, lineno=183, col_offset=18), Num(2, lineno=183, col_offset=21), Num(4, lineno=183, col_offset=24), Num(7, lineno=183, col_offset=27), Num(8, lineno=183, col_offset=30), Num(16, lineno=183, col_offset=33), Num(17, lineno=183, col_offset=37), Num(32, lineno=183, col_offset=41), Num(12345, lineno=183, col_offset=45), BinOp(Num(7, lineno=183, col_offset=52), Pow(), Num(100, lineno=183, col_offset=55), lineno=183, col_offset=52), Num(-1, lineno=184, col_offset=19), Num(-2, lineno=184, col_offset=23), Num(-5, lineno=184, col_offset=27), Num(-23, lineno=184, col_offset=31), Num(-67891, lineno=184, col_offset=36), UnaryOp(USub(), BinOp(Num(41, lineno=184, col_offset=44), Pow(), Num(50, lineno=184, col_offset=48), lineno=184, col_offset=44), lineno=184, col_offset=43)], Load(), lineno=183, col_offset=17), [For(Name('n', Store(), lineno=185, col_offset=16), Call(Name('range', Load(), lineno=185, col_offset=21), [Num(-10, lineno=185, col_offset=28), Num(10, lineno=185, col_offset=32)], [], None, None, lineno=185, col_offset=21), [Expr(Call(Attribute(Name('self', Load(), lineno=186, col_offset=16), 'check_truediv', Load(), lineno=186, col_offset=16), [BinOp(BinOp(BinOp(Num(2, lineno=186, col_offset=35), Pow(), Name('DBL_MANT_DIG', Load(), lineno=186, col_offset=38), lineno=186, col_offset=35), Mult(), Name('m', Load(), lineno=186, col_offset=51), lineno=186, col_offset=35), Add(), Name('n', Load(), lineno=186, col_offset=55), lineno=186, col_offset=35), Name('m', Load(), lineno=186, col_offset=58)], [], None, None, lineno=186, col_offset=16), lineno=186, col_offset=16)], [], lineno=185, col_offset=12)], [], lineno=183, col_offset=8), For(Name('n', Store(), lineno=189, col_offset=12), Call(Name('range', Load(), lineno=189, col_offset=17), [Num(-20, lineno=189, col_offset=24), Num(20, lineno=189, col_offset=28)], [], None, None, lineno=189, col_offset=17), [Expr(Call(Attribute(Name('self', Load(), lineno=190, col_offset=12), 'check_truediv', Load(), lineno=190, col_offset=12), [Name('n', Load(), lineno=190, col_offset=31), BinOp(Num(2, lineno=190, col_offset=34), Pow(), Num(1076, lineno=190, col_offset=37), lineno=190, col_offset=34)], [], None, None, lineno=190, col_offset=12), lineno=190, col_offset=12)], [], lineno=189, col_offset=8), For(Name('M', Store(), lineno=196, col_offset=12), List([BinOp(Num(10, lineno=196, col_offset=18), Pow(), Num(10, lineno=196, col_offset=22), lineno=196, col_offset=18), BinOp(Num(10, lineno=196, col_offset=26), Pow(), Num(100, lineno=196, col_offset=30), lineno=196, col_offset=26), BinOp(Num(10, lineno=196, col_offset=35), Pow(), Num(1000, lineno=196, col_offset=39), lineno=196, col_offset=35)], Load(), lineno=196, col_offset=17), [For(Name('i', Store(), lineno=197, col_offset=16), Call(Name('range', Load(), lineno=197, col_offset=21), [Num(1000, lineno=197, col_offset=27)], [], None, None, lineno=197, col_offset=21), [Assign([Name('a', Store(), lineno=198, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=198, col_offset=20), 'randrange', Load(), lineno=198, col_offset=20), [Num(1, lineno=198, col_offset=37), Name('M', Load(), lineno=198, col_offset=40)], [], None, None, lineno=198, col_offset=20), lineno=198, col_offset=16), Assign([Name('b', Store(), lineno=199, col_offset=16)], Call(Attribute(Name('random', Load(), lineno=199, col_offset=20), 'randrange', Load(), lineno=199, col_offset=20), [Name('a', Load(), lineno=199, col_offset=37), BinOp(BinOp(Num(2, lineno=199, col_offset=40), Mult(), Name('a', Load(), lineno=199, col_offset=42), lineno=199, col_offset=40), Add(), Num(1, lineno=199, col_offset=44), lineno=199, col_offset=40)], [], None, None, lineno=199, col_offset=20), lineno=199, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=200, col_offset=16), 'check_truediv', Load(), lineno=200, col_offset=16), [Name('a', Load(), lineno=200, col_offset=35), Name('b', Load(), lineno=200, col_offset=38)], [], None, None, lineno=200, col_offset=16), lineno=200, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=201, col_offset=16), 'check_truediv', Load(), lineno=201, col_offset=16), [UnaryOp(USub(), Name('a', Load(), lineno=201, col_offset=36), lineno=201, col_offset=35), Name('b', Load(), lineno=201, col_offset=39)], [], None, None, lineno=201, col_offset=16), lineno=201, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=202, col_offset=16), 'check_truediv', Load(), lineno=202, col_offset=16), [Name('a', Load(), lineno=202, col_offset=35), UnaryOp(USub(), Name('b', Load(), lineno=202, col_offset=39), lineno=202, col_offset=38)], [], None, None, lineno=202, col_offset=16), lineno=202, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=203, col_offset=16), 'check_truediv', Load(), lineno=203, col_offset=16), [UnaryOp(USub(), Name('a', Load(), lineno=203, col_offset=36), lineno=203, col_offset=35), UnaryOp(USub(), Name('b', Load(), lineno=203, col_offset=40), lineno=203, col_offset=39)], [], None, None, lineno=203, col_offset=16), lineno=203, col_offset=16)], [], lineno=197, col_offset=12)], [], lineno=196, col_offset=8), For(Name('_', Store(), lineno=206, col_offset=12), Call(Name('range', Load(), lineno=206, col_offset=17), [Num(10000, lineno=206, col_offset=23)], [], None, None, lineno=206, col_offset=17), [Assign([Name('a_bits', Store(), lineno=207, col_offset=12)], Call(Attribute(Name('random', Load(), lineno=207, col_offset=21), 'randrange', Load(), lineno=207, col_offset=21), [Num(1000, lineno=207, col_offset=38)], [], None, None, lineno=207, col_offset=21), lineno=207, col_offset=12), Assign([Name('b_bits', Store(), lineno=208, col_offset=12)], Call(Attribute(Name('random', Load(), lineno=208, col_offset=21), 'randrange', Load(), lineno=208, col_offset=21), [Num(1, lineno=208, col_offset=38), Num(1000, lineno=208, col_offset=41)], [], None, None, lineno=208, col_offset=21), lineno=208, col_offset=12), Assign([Name('x', Store(), lineno=209, col_offset=12)], Call(Attribute(Name('random', Load(), lineno=209, col_offset=16), 'randrange', Load(), lineno=209, col_offset=16), [BinOp(Num(2, lineno=209, col_offset=33), Pow(), Name('a_bits', Load(), lineno=209, col_offset=36), lineno=209, col_offset=33)], [], None, None, lineno=209, col_offset=16), lineno=209, col_offset=12), Assign([Name('y', Store(), lineno=210, col_offset=12)], Call(Attribute(Name('random', Load(), lineno=210, col_offset=16), 'randrange', Load(), lineno=210, col_offset=16), [Num(1, lineno=210, col_offset=33), BinOp(Num(2, lineno=210, col_offset=36), Pow(), Name('b_bits', Load(), lineno=210, col_offset=39), lineno=210, col_offset=36)], [], None, None, lineno=210, col_offset=16), lineno=210, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=211, col_offset=12), 'check_truediv', Load(), lineno=211, col_offset=12), [Name('x', Load(), lineno=211, col_offset=31), Name('y', Load(), lineno=211, col_offset=34)], [], None, None, lineno=211, col_offset=12), lineno=211, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=212, col_offset=12), 'check_truediv', Load(), lineno=212, col_offset=12), [Name('x', Load(), lineno=212, col_offset=31), UnaryOp(USub(), Name('y', Load(), lineno=212, col_offset=35), lineno=212, col_offset=34)], [], None, None, lineno=212, col_offset=12), lineno=212, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=213, col_offset=12), 'check_truediv', Load(), lineno=213, col_offset=12), [UnaryOp(USub(), Name('x', Load(), lineno=213, col_offset=32), lineno=213, col_offset=31), Name('y', Load(), lineno=213, col_offset=35)], [], None, None, lineno=213, col_offset=12), lineno=213, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=214, col_offset=12), 'check_truediv', Load(), lineno=214, col_offset=12), [UnaryOp(USub(), Name('x', Load(), lineno=214, col_offset=32), lineno=214, col_offset=31), UnaryOp(USub(), Name('y', Load(), lineno=214, col_offset=36), lineno=214, col_offset=35)], [], None, None, lineno=214, col_offset=12), lineno=214, col_offset=12)], [], lineno=206, col_offset=8)], [Name('requires_IEEE_754', Load(), lineno=124, col_offset=5)], lineno=124, col_offset=4)], [], lineno=53, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Name('run_unittest', Load(), lineno=218, col_offset=4), [Name('TrueDivisionTests', Load(), lineno=218, col_offset=17)], [], None, None, lineno=218, col_offset=4), lineno=218, col_offset=4)], [], lineno=217, col_offset=0), If(Compare(Name('__name__', Load(), lineno=220, col_offset=3), [Eq()], [Str('__main__', lineno=220, col_offset=15)], lineno=220, col_offset=3), [Expr(Call(Name('test_main', Load(), lineno=221, col_offset=4), [], [], None, None, lineno=221, col_offset=4), lineno=221, col_offset=4)], [], lineno=220, col_offset=0)])
