Module([Import([alias('__future__', None)], lineno=1, col_offset=0), Import([alias('os', None)], lineno=2, col_offset=0), Import([alias('unittest', None)], lineno=3, col_offset=0), Import([alias('distutils.dir_util', None)], lineno=4, col_offset=0), Import([alias('tempfile', None)], lineno=5, col_offset=0), ImportFrom('test', [alias('test_support', None)], 0, lineno=7, col_offset=0), TryExcept([Expr(Name('set', Load(), lineno=9, col_offset=5), lineno=9, col_offset=5)], [ExceptHandler(Name('NameError', Load(), lineno=10, col_offset=7), None, [ImportFrom('sets', [alias('Set', 'set')], 0, lineno=10, col_offset=18)], lineno=10, col_offset=0)], [], lineno=9, col_offset=0), Import([alias('modulefinder', None)], lineno=12, col_offset=0), Assign([Name('TEST_DIR', Store(), lineno=18, col_offset=0)], Call(Attribute(Name('tempfile', Load(), lineno=18, col_offset=11), 'mkdtemp', Load(), lineno=18, col_offset=11), [], [], None, None, lineno=18, col_offset=11), lineno=18, col_offset=0), Assign([Name('TEST_PATH', Store(), lineno=19, col_offset=0)], List([Name('TEST_DIR', Load(), lineno=19, col_offset=13), Call(Attribute(Attribute(Name('os', Load(), lineno=19, col_offset=23), 'path', Load(), lineno=19, col_offset=23), 'dirname', Load(), lineno=19, col_offset=23), [Attribute(Name('__future__', Load(), lineno=19, col_offset=39), '__file__', Load(), lineno=19, col_offset=39)], [], None, None, lineno=19, col_offset=23)], Load(), lineno=19, col_offset=12), lineno=19, col_offset=0), Assign([Name('maybe_test', Store(), lineno=36, col_offset=0)], List([Str('a.module', lineno=37, col_offset=4), List([Str('a', lineno=38, col_offset=5), Str('a.module', lineno=38, col_offset=10), Str('sys', lineno=38, col_offset=22), Str('b', lineno=39, col_offset=5)], Load(), lineno=38, col_offset=4), List([Str('c', lineno=40, col_offset=5)], Load(), lineno=40, col_offset=4), List([Str('b.something', lineno=40, col_offset=12)], Load(), lineno=40, col_offset=11), Str('a/__init__.py\na/module.py\n                                from b import something\n                                from c import something\nb/__init__.py\n                                from sys import *\n', lineno=48, col_offset=-1)], Load(), lineno=36, col_offset=13), lineno=36, col_offset=0), Assign([Name('maybe_test_new', Store(), lineno=50, col_offset=0)], List([Str('a.module', lineno=51, col_offset=4), List([Str('a', lineno=52, col_offset=5), Str('a.module', lineno=52, col_offset=10), Str('sys', lineno=52, col_offset=22), Str('b', lineno=53, col_offset=5), Str('__future__', lineno=53, col_offset=10)], Load(), lineno=52, col_offset=4), List([Str('c', lineno=54, col_offset=5)], Load(), lineno=54, col_offset=4), List([Str('b.something', lineno=54, col_offset=12)], Load(), lineno=54, col_offset=11), Str('a/__init__.py\na/module.py\n                                from b import something\n                                from c import something\nb/__init__.py\n                                from __future__ import absolute_import\n                                from sys import *\n', lineno=63, col_offset=-1)], Load(), lineno=50, col_offset=17), lineno=50, col_offset=0), Assign([Name('package_test', Store(), lineno=65, col_offset=0)], List([Str('a.module', lineno=66, col_offset=4), List([Str('a', lineno=67, col_offset=5), Str('a.b', lineno=67, col_offset=10), Str('a.c', lineno=67, col_offset=17), Str('a.module', lineno=67, col_offset=24), Str('mymodule', lineno=67, col_offset=36), Str('sys', lineno=67, col_offset=48)], Load(), lineno=67, col_offset=4), List([Str('blahblah', lineno=68, col_offset=5)], Load(), lineno=68, col_offset=4), List([], Load(), lineno=68, col_offset=18), Str('mymodule.py\na/__init__.py\n                                import blahblah\n                                from a import b\n                                import c\na/module.py\n                                import sys\n                                from a import b as x\n                                from a.c import sillyname\na/b.py\na/c.py\n                                from a.module import x\n                                import mymodule as sillyname\n                                from sys import version_info\n', lineno=84, col_offset=-1)], Load(), lineno=65, col_offset=15), lineno=65, col_offset=0), Assign([Name('absolute_import_test', Store(), lineno=86, col_offset=0)], List([Str('a.module', lineno=87, col_offset=4), List([Str('a', lineno=88, col_offset=5), Str('a.module', lineno=88, col_offset=10), Str('b', lineno=89, col_offset=5), Str('b.x', lineno=89, col_offset=10), Str('b.y', lineno=89, col_offset=17), Str('b.z', lineno=89, col_offset=24), Str('__future__', lineno=90, col_offset=5), Str('sys', lineno=90, col_offset=19), Str('exceptions', lineno=90, col_offset=26)], Load(), lineno=88, col_offset=4), List([Str('blahblah', lineno=91, col_offset=5)], Load(), lineno=91, col_offset=4), List([], Load(), lineno=91, col_offset=18), Str('mymodule.py\na/__init__.py\na/module.py\n                                from __future__ import absolute_import\n                                import sys # sys\n                                import blahblah # fails\n                                import exceptions # exceptions\n                                import b.x # b.x\n                                from b import y # b.y\n                                from b.z import * # b.z.*\na/exceptions.py\na/sys.py\n                                import mymodule\na/b/__init__.py\na/b/x.py\na/b/y.py\na/b/z.py\nb/__init__.py\n                                import z\nb/unused.py\nb/x.py\nb/y.py\nb/z.py\n', lineno=116, col_offset=-1)], Load(), lineno=86, col_offset=23), lineno=86, col_offset=0), Assign([Name('relative_import_test', Store(), lineno=118, col_offset=0)], List([Str('a.module', lineno=119, col_offset=4), List([Str('__future__', lineno=120, col_offset=5), Str('a', lineno=121, col_offset=5), Str('a.module', lineno=121, col_offset=10), Str('a.b', lineno=122, col_offset=5), Str('a.b.y', lineno=122, col_offset=12), Str('a.b.z', lineno=122, col_offset=21), Str('a.b.c', lineno=123, col_offset=5), Str('a.b.c.moduleC', lineno=123, col_offset=14), Str('a.b.c.d', lineno=124, col_offset=5), Str('a.b.c.e', lineno=124, col_offset=16), Str('a.b.x', lineno=125, col_offset=5), Str('exceptions', lineno=126, col_offset=5)], Load(), lineno=120, col_offset=4), List([], Load(), lineno=127, col_offset=4), List([], Load(), lineno=127, col_offset=8), Str('mymodule.py\na/__init__.py\n                                from .b import y, z # a.b.y, a.b.z\na/module.py\n                                from __future__ import absolute_import # __future__\n                                import exceptions # exceptions\na/exceptions.py\na/sys.py\na/b/__init__.py\n                                from ..b import x # a.b.x\n                                #from a.b.c import moduleC\n                                from .c import moduleC # a.b.moduleC\na/b/x.py\na/b/y.py\na/b/z.py\na/b/g.py\na/b/c/__init__.py\n                                from ..c import e # a.b.c.e\na/b/c/moduleC.py\n                                from ..c import d # a.b.c.d\na/b/c/d.py\na/b/c/e.py\na/b/c/x.py\n', lineno=152, col_offset=-1)], Load(), lineno=118, col_offset=23), lineno=118, col_offset=0), Assign([Name('relative_import_test_2', Store(), lineno=154, col_offset=0)], List([Str('a.module', lineno=155, col_offset=4), List([Str('a', lineno=156, col_offset=5), Str('a.module', lineno=156, col_offset=10), Str('a.sys', lineno=157, col_offset=5), Str('a.b', lineno=158, col_offset=5), Str('a.b.y', lineno=158, col_offset=12), Str('a.b.z', lineno=158, col_offset=21), Str('a.b.c', lineno=159, col_offset=5), Str('a.b.c.d', lineno=159, col_offset=14), Str('a.b.c.e', lineno=160, col_offset=5), Str('a.b.c.moduleC', lineno=161, col_offset=5), Str('a.b.c.f', lineno=162, col_offset=5), Str('a.b.x', lineno=163, col_offset=5), Str('a.another', lineno=164, col_offset=5)], Load(), lineno=156, col_offset=4), List([], Load(), lineno=165, col_offset=4), List([], Load(), lineno=165, col_offset=8), Str('mymodule.py\na/__init__.py\n                                from . import sys # a.sys\na/another.py\na/module.py\n                                from .b import y, z # a.b.y, a.b.z\na/exceptions.py\na/sys.py\na/b/__init__.py\n                                from .c import moduleC # a.b.c.moduleC\n                                from .c import d # a.b.c.d\na/b/x.py\na/b/y.py\na/b/z.py\na/b/c/__init__.py\n                                from . import e # a.b.c.e\na/b/c/moduleC.py\n                                #\n                                from . import f   # a.b.c.f\n                                from .. import x  # a.b.x\n                                from ... import another # a.another\na/b/c/d.py\na/b/c/e.py\na/b/c/f.py\n', lineno=191, col_offset=-1)], Load(), lineno=154, col_offset=25), lineno=154, col_offset=0), Assign([Name('relative_import_test_3', Store(), lineno=193, col_offset=0)], List([Str('a.module', lineno=194, col_offset=4), List([Str('a', lineno=195, col_offset=5), Str('a.module', lineno=195, col_offset=10)], Load(), lineno=195, col_offset=4), List([Str('a.bar', lineno=196, col_offset=5)], Load(), lineno=196, col_offset=4), List([], Load(), lineno=197, col_offset=4), Str('a/__init__.py\n                                def foo(): pass\na/module.py\n                                from . import foo\n                                from . import bar\n', lineno=204, col_offset=-1)], Load(), lineno=193, col_offset=25), lineno=193, col_offset=0), FunctionDef('open_file', arguments([Name('path', Param(), lineno=206, col_offset=14)], None, None, []), [Assign([Name('dirname', Store(), lineno=208, col_offset=4)], Call(Attribute(Attribute(Name('os', Load(), lineno=208, col_offset=14), 'path', Load(), lineno=208, col_offset=14), 'dirname', Load(), lineno=208, col_offset=14), [Name('path', Load(), lineno=208, col_offset=30)], [], None, None, lineno=208, col_offset=14), lineno=208, col_offset=4), Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=209, col_offset=4), 'dir_util', Load(), lineno=209, col_offset=4), 'mkpath', Load(), lineno=209, col_offset=4), [Name('dirname', Load(), lineno=209, col_offset=30)], [], None, None, lineno=209, col_offset=4), lineno=209, col_offset=4), Return(Call(Name('open', Load(), lineno=210, col_offset=11), [Name('path', Load(), lineno=210, col_offset=16), Str('w', lineno=210, col_offset=22)], [], None, None, lineno=210, col_offset=11), lineno=210, col_offset=4)], [], lineno=206, col_offset=0), FunctionDef('create_package', arguments([Name('source', Param(), lineno=212, col_offset=19)], None, None, []), [Assign([Name('ofi', Store(), lineno=213, col_offset=4)], Name('None', Load(), lineno=213, col_offset=10), lineno=213, col_offset=4), TryFinally([For(Name('line', Store(), lineno=215, col_offset=12), Call(Attribute(Name('source', Load(), lineno=215, col_offset=20), 'splitlines', Load(), lineno=215, col_offset=20), [], [], None, None, lineno=215, col_offset=20), [If(BoolOp(Or(), [Call(Attribute(Name('line', Load(), lineno=216, col_offset=15), 'startswith', Load(), lineno=216, col_offset=15), [Str(' ', lineno=216, col_offset=31)], [], None, None, lineno=216, col_offset=15), Call(Attribute(Name('line', Load(), lineno=216, col_offset=39), 'startswith', Load(), lineno=216, col_offset=39), [Str('\t', lineno=216, col_offset=55)], [], None, None, lineno=216, col_offset=39)], lineno=216, col_offset=15), [Expr(Call(Attribute(Name('ofi', Load(), lineno=217, col_offset=16), 'write', Load(), lineno=217, col_offset=16), [BinOp(Call(Attribute(Name('line', Load(), lineno=217, col_offset=26), 'strip', Load(), lineno=217, col_offset=26), [], [], None, None, lineno=217, col_offset=26), Add(), Str('\n', lineno=217, col_offset=41), lineno=217, col_offset=26)], [], None, None, lineno=217, col_offset=16), lineno=217, col_offset=16)], [If(Name('ofi', Load(), lineno=219, col_offset=19), [Expr(Call(Attribute(Name('ofi', Load(), lineno=220, col_offset=20), 'close', Load(), lineno=220, col_offset=20), [], [], None, None, lineno=220, col_offset=20), lineno=220, col_offset=20)], [], lineno=219, col_offset=16), Assign([Name('ofi', Store(), lineno=221, col_offset=16)], Call(Name('open_file', Load(), lineno=221, col_offset=22), [Call(Attribute(Attribute(Name('os', Load(), lineno=221, col_offset=32), 'path', Load(), lineno=221, col_offset=32), 'join', Load(), lineno=221, col_offset=32), [Name('TEST_DIR', Load(), lineno=221, col_offset=45), Call(Attribute(Name('line', Load(), lineno=221, col_offset=55), 'strip', Load(), lineno=221, col_offset=55), [], [], None, None, lineno=221, col_offset=55)], [], None, None, lineno=221, col_offset=32)], [], None, None, lineno=221, col_offset=22), lineno=221, col_offset=16)], lineno=216, col_offset=12)], [], lineno=215, col_offset=8)], [If(Name('ofi', Load(), lineno=223, col_offset=11), [Expr(Call(Attribute(Name('ofi', Load(), lineno=224, col_offset=12), 'close', Load(), lineno=224, col_offset=12), [], [], None, None, lineno=224, col_offset=12), lineno=224, col_offset=12)], [], lineno=223, col_offset=8)], lineno=214, col_offset=4)], [], lineno=212, col_offset=0), ClassDef('ModuleFinderTest', [Attribute(Name('unittest', Load(), lineno=226, col_offset=23), 'TestCase', Load(), lineno=226, col_offset=23)], [FunctionDef('_do_test', arguments([Name('self', Param(), lineno=227, col_offset=17), Name('info', Param(), lineno=227, col_offset=23), Name('report', Param(), lineno=227, col_offset=29)], None, None, [Name('False', Load(), lineno=227, col_offset=36)]), [Assign([Tuple([Name('import_this', Store(), lineno=228, col_offset=8), Name('modules', Store(), lineno=228, col_offset=21), Name('missing', Store(), lineno=228, col_offset=30), Name('maybe_missing', Store(), lineno=228, col_offset=39), Name('source', Store(), lineno=228, col_offset=54)], Store(), lineno=228, col_offset=8)], Name('info', Load(), lineno=228, col_offset=63), lineno=228, col_offset=8), Expr(Call(Name('create_package', Load(), lineno=229, col_offset=8), [Name('source', Load(), lineno=229, col_offset=23)], [], None, None, lineno=229, col_offset=8), lineno=229, col_offset=8), TryFinally([Assign([Name('mf', Store(), lineno=231, col_offset=12)], Call(Attribute(Name('modulefinder', Load(), lineno=231, col_offset=17), 'ModuleFinder', Load(), lineno=231, col_offset=17), [], [keyword('path', Name('TEST_PATH', Load(), lineno=231, col_offset=48))], None, None, lineno=231, col_offset=17), lineno=231, col_offset=12), Expr(Call(Attribute(Name('mf', Load(), lineno=232, col_offset=12), 'import_hook', Load(), lineno=232, col_offset=12), [Name('import_this', Load(), lineno=232, col_offset=27)], [], None, None, lineno=232, col_offset=12), lineno=232, col_offset=12), If(Name('report', Load(), lineno=233, col_offset=15), [Expr(Call(Attribute(Name('mf', Load(), lineno=234, col_offset=16), 'report', Load(), lineno=234, col_offset=16), [], [], None, None, lineno=234, col_offset=16), lineno=234, col_offset=16)], [], lineno=233, col_offset=12), Assign([Name('modules', Store(), lineno=244, col_offset=12)], Call(Name('set', Load(), lineno=244, col_offset=22), [Name('modules', Load(), lineno=244, col_offset=26)], [], None, None, lineno=244, col_offset=22), lineno=244, col_offset=12), Assign([Name('found', Store(), lineno=245, col_offset=12)], Call(Name('set', Load(), lineno=245, col_offset=20), [Call(Attribute(Attribute(Name('mf', Load(), lineno=245, col_offset=24), 'modules', Load(), lineno=245, col_offset=24), 'keys', Load(), lineno=245, col_offset=24), [], [], None, None, lineno=245, col_offset=24)], [], None, None, lineno=245, col_offset=20), lineno=245, col_offset=12), Assign([Name('more', Store(), lineno=246, col_offset=12)], Call(Name('list', Load(), lineno=246, col_offset=19), [BinOp(Name('found', Load(), lineno=246, col_offset=24), Sub(), Name('modules', Load(), lineno=246, col_offset=32), lineno=246, col_offset=24)], [], None, None, lineno=246, col_offset=19), lineno=246, col_offset=12), Assign([Name('less', Store(), lineno=247, col_offset=12)], Call(Name('list', Load(), lineno=247, col_offset=19), [BinOp(Name('modules', Load(), lineno=247, col_offset=24), Sub(), Name('found', Load(), lineno=247, col_offset=34), lineno=247, col_offset=24)], [], None, None, lineno=247, col_offset=19), lineno=247, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=249, col_offset=12), 'assertEqual', Load(), lineno=249, col_offset=12), [Tuple([Name('more', Load(), lineno=249, col_offset=30), Name('less', Load(), lineno=249, col_offset=36)], Load(), lineno=249, col_offset=30), Tuple([List([], Load(), lineno=249, col_offset=44), List([], Load(), lineno=249, col_offset=48)], Load(), lineno=249, col_offset=44)], [], None, None, lineno=249, col_offset=12), lineno=249, col_offset=12), Assign([Tuple([Name('bad', Store(), lineno=252, col_offset=12), Name('maybe', Store(), lineno=252, col_offset=17)], Store(), lineno=252, col_offset=12)], Call(Attribute(Name('mf', Load(), lineno=252, col_offset=25), 'any_missing_maybe', Load(), lineno=252, col_offset=25), [], [], None, None, lineno=252, col_offset=25), lineno=252, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=253, col_offset=12), 'assertEqual', Load(), lineno=253, col_offset=12), [Name('bad', Load(), lineno=253, col_offset=29), Name('missing', Load(), lineno=253, col_offset=34)], [], None, None, lineno=253, col_offset=12), lineno=253, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=254, col_offset=12), 'assertEqual', Load(), lineno=254, col_offset=12), [Name('maybe', Load(), lineno=254, col_offset=29), Name('maybe_missing', Load(), lineno=254, col_offset=36)], [], None, None, lineno=254, col_offset=12), lineno=254, col_offset=12)], [Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=256, col_offset=12), 'dir_util', Load(), lineno=256, col_offset=12), 'remove_tree', Load(), lineno=256, col_offset=12), [Name('TEST_DIR', Load(), lineno=256, col_offset=43)], [], None, None, lineno=256, col_offset=12), lineno=256, col_offset=12)], lineno=230, col_offset=8)], [], lineno=227, col_offset=4), FunctionDef('test_package', arguments([Name('self', Param(), lineno=258, col_offset=21)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=259, col_offset=8), '_do_test', Load(), lineno=259, col_offset=8), [Name('package_test', Load(), lineno=259, col_offset=22)], [], None, None, lineno=259, col_offset=8), lineno=259, col_offset=8)], [], lineno=258, col_offset=4), FunctionDef('test_maybe', arguments([Name('self', Param(), lineno=261, col_offset=19)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=262, col_offset=8), '_do_test', Load(), lineno=262, col_offset=8), [Name('maybe_test', Load(), lineno=262, col_offset=22)], [], None, None, lineno=262, col_offset=8), lineno=262, col_offset=8)], [], lineno=261, col_offset=4), If(Call(Name('getattr', Load(), lineno=264, col_offset=7), [Name('__future__', Load(), lineno=264, col_offset=15), Str('absolute_import', lineno=264, col_offset=27), Name('None', Load(), lineno=264, col_offset=46)], [], None, None, lineno=264, col_offset=7), [FunctionDef('test_maybe_new', arguments([Name('self', Param(), lineno=266, col_offset=27)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=267, col_offset=12), '_do_test', Load(), lineno=267, col_offset=12), [Name('maybe_test_new', Load(), lineno=267, col_offset=26)], [], None, None, lineno=267, col_offset=12), lineno=267, col_offset=12)], [], lineno=266, col_offset=8), FunctionDef('test_absolute_imports', arguments([Name('self', Param(), lineno=269, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=270, col_offset=12), '_do_test', Load(), lineno=270, col_offset=12), [Name('absolute_import_test', Load(), lineno=270, col_offset=26)], [], None, None, lineno=270, col_offset=12), lineno=270, col_offset=12)], [], lineno=269, col_offset=8), FunctionDef('test_relative_imports', arguments([Name('self', Param(), lineno=272, col_offset=34)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=273, col_offset=12), '_do_test', Load(), lineno=273, col_offset=12), [Name('relative_import_test', Load(), lineno=273, col_offset=26)], [], None, None, lineno=273, col_offset=12), lineno=273, col_offset=12)], [], lineno=272, col_offset=8), FunctionDef('test_relative_imports_2', arguments([Name('self', Param(), lineno=275, col_offset=36)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=276, col_offset=12), '_do_test', Load(), lineno=276, col_offset=12), [Name('relative_import_test_2', Load(), lineno=276, col_offset=26)], [], None, None, lineno=276, col_offset=12), lineno=276, col_offset=12)], [], lineno=275, col_offset=8), FunctionDef('test_relative_imports_3', arguments([Name('self', Param(), lineno=278, col_offset=36)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=279, col_offset=12), '_do_test', Load(), lineno=279, col_offset=12), [Name('relative_import_test_3', Load(), lineno=279, col_offset=26)], [], None, None, lineno=279, col_offset=12), lineno=279, col_offset=12)], [], lineno=278, col_offset=8)], [], lineno=264, col_offset=4)], [], lineno=226, col_offset=0), FunctionDef('test_main', arguments([], None, None, []), [Expr(Call(Attribute(Attribute(Name('distutils', Load(), lineno=282, col_offset=4), 'log', Load(), lineno=282, col_offset=4), 'set_threshold', Load(), lineno=282, col_offset=4), [Attribute(Attribute(Name('distutils', Load(), lineno=282, col_offset=32), 'log', Load(), lineno=282, col_offset=32), 'WARN', Load(), lineno=282, col_offset=32)], [], None, None, lineno=282, col_offset=4), lineno=282, col_offset=4), Expr(Call(Attribute(Name('test_support', Load(), lineno=283, col_offset=4), 'run_unittest', Load(), lineno=283, col_offset=4), [Name('ModuleFinderTest', Load(), lineno=283, col_offset=30)], [], None, None, lineno=283, col_offset=4), lineno=283, col_offset=4)], [], lineno=281, col_offset=0), If(Compare(Name('__name__', Load(), lineno=285, col_offset=3), [Eq()], [Str('__main__', lineno=285, col_offset=15)], lineno=285, col_offset=3), [Expr(Call(Attribute(Name('unittest', Load(), lineno=286, col_offset=4), 'main', Load(), lineno=286, col_offset=4), [], [], None, None, lineno=286, col_offset=4), lineno=286, col_offset=4)], [], lineno=285, col_offset=0)])
