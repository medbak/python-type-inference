Module([Expr(Str(u'\nPython implementation of the io module.\n', lineno=3, col_offset=-1), lineno=3, col_offset=-1), ImportFrom('__future__', [alias('print_function', None), alias('unicode_literals', None)], 0, lineno=5, col_offset=0), Import([alias('os', None)], lineno=7, col_offset=0), Import([alias('abc', None)], lineno=8, col_offset=0), Import([alias('codecs', None)], lineno=9, col_offset=0), Import([alias('warnings', None)], lineno=10, col_offset=0), TryExcept([ImportFrom('thread', [alias('allocate_lock', 'Lock')], 0, lineno=13, col_offset=4)], [ExceptHandler(Name('ImportError', Load(), lineno=14, col_offset=7), None, [ImportFrom('dummy_thread', [alias('allocate_lock', 'Lock')], 0, lineno=15, col_offset=4)], lineno=14, col_offset=0)], [], lineno=12, col_offset=0), Import([alias('io', None)], lineno=17, col_offset=0), ImportFrom('io', [alias('__all__', None), alias('SEEK_SET', None), alias('SEEK_CUR', None), alias('SEEK_END', None)], 0, lineno=18, col_offset=0), Assign([Name('__metaclass__', Store(), lineno=20, col_offset=0)], Name('type', Load(), lineno=20, col_offset=16), lineno=20, col_offset=0), Assign([Name('DEFAULT_BUFFER_SIZE', Store(), lineno=23, col_offset=0)], BinOp(Num(8, lineno=23, col_offset=22), Mult(), Num(1024, lineno=23, col_offset=26), lineno=23, col_offset=22), lineno=23, col_offset=0), ClassDef('BlockingIOError', [Name('IOError', Load(), lineno=30, col_offset=22)], [Expr(Str(u'Exception raised when I/O would block on a non-blocking I/O stream.', lineno=32, col_offset=4), lineno=32, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=34, col_offset=17), Name('errno', Param(), lineno=34, col_offset=23), Name('strerror', Param(), lineno=34, col_offset=30), Name('characters_written', Param(), lineno=34, col_offset=40)], None, None, [Num(0, lineno=34, col_offset=59)]), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=35, col_offset=8), [Name('IOError', Load(), lineno=35, col_offset=14), Name('self', Load(), lineno=35, col_offset=23)], [], None, None, lineno=35, col_offset=8), '__init__', Load(), lineno=35, col_offset=8), [Name('errno', Load(), lineno=35, col_offset=38), Name('strerror', Load(), lineno=35, col_offset=45)], [], None, None, lineno=35, col_offset=8), lineno=35, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=36, col_offset=15), [Name('characters_written', Load(), lineno=36, col_offset=26), Tuple([Name('int', Load(), lineno=36, col_offset=47), Name('long', Load(), lineno=36, col_offset=52)], Load(), lineno=36, col_offset=47)], [], None, None, lineno=36, col_offset=15), lineno=36, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=37, col_offset=18), [Str(u'characters_written must be a integer', lineno=37, col_offset=28)], [], None, None, lineno=37, col_offset=18), None, None, lineno=37, col_offset=12)], [], lineno=36, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=38, col_offset=8), 'characters_written', Store(), lineno=38, col_offset=8)], Name('characters_written', Load(), lineno=38, col_offset=34), lineno=38, col_offset=8)], [], lineno=34, col_offset=4)], [], lineno=30, col_offset=0), FunctionDef('open', arguments([Name('file', Param(), lineno=41, col_offset=9), Name('mode', Param(), lineno=41, col_offset=15), Name('buffering', Param(), lineno=41, col_offset=25), Name('encoding', Param(), lineno=42, col_offset=9), Name('errors', Param(), lineno=42, col_offset=24), Name('newline', Param(), lineno=43, col_offset=9), Name('closefd', Param(), lineno=43, col_offset=23)], None, None, [Str(u'r', lineno=41, col_offset=20), Num(-1, lineno=41, col_offset=36), Name('None', Load(), lineno=42, col_offset=18), Name('None', Load(), lineno=42, col_offset=31), Name('None', Load(), lineno=43, col_offset=17), Name('True', Load(), lineno=43, col_offset=31)]), [Expr(Str(u'Open file and return a stream.  Raise IOError upon failure.\n\n    file is either a text or byte string giving the name (and the path\n    if the file isn\'t in the current working directory) of the file to\n    be opened or an integer file descriptor of the file to be\n    wrapped. (If a file descriptor is given, it is closed when the\n    returned I/O object is closed, unless closefd is set to False.)\n\n    mode is an optional string that specifies the mode in which the file\n    is opened. It defaults to \'r\' which means open for reading in text\n    mode.  Other common values are \'w\' for writing (truncating the file if\n    it already exists), and \'a\' for appending (which on some Unix systems,\n    means that all writes append to the end of the file regardless of the\n    current seek position). In text mode, if encoding is not specified the\n    encoding used is platform dependent. (For reading and writing raw\n    bytes use binary mode and leave encoding unspecified.) The available\n    modes are:\n\n    ========= ===============================================================\n    Character Meaning\n    --------- ---------------------------------------------------------------\n    \'r\'       open for reading (default)\n    \'w\'       open for writing, truncating the file first\n    \'a\'       open for writing, appending to the end of the file if it exists\n    \'b\'       binary mode\n    \'t\'       text mode (default)\n    \'+\'       open a disk file for updating (reading and writing)\n    \'U\'       universal newline mode (for backwards compatibility; unneeded\n              for new code)\n    ========= ===============================================================\n\n    The default mode is \'rt\' (open for reading text). For binary random\n    access, the mode \'w+b\' opens and truncates the file to 0 bytes, while\n    \'r+b\' opens the file without truncation.\n\n    Python distinguishes between files opened in binary and text modes,\n    even when the underlying operating system doesn\'t. Files opened in\n    binary mode (appending \'b\' to the mode argument) return contents as\n    bytes objects without any decoding. In text mode (the default, or when\n    \'t\' is appended to the mode argument), the contents of the file are\n    returned as strings, the bytes having been first decoded using a\n    platform-dependent encoding or using the specified encoding if given.\n\n    buffering is an optional integer used to set the buffering policy.\n    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select\n    line buffering (only usable in text mode), and an integer > 1 to indicate\n    the size of a fixed-size chunk buffer.  When no buffering argument is\n    given, the default buffering policy works as follows:\n\n    * Binary files are buffered in fixed-size chunks; the size of the buffer\n      is chosen using a heuristic trying to determine the underlying device\'s\n      "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n      On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n    * "Interactive" text files (files for which isatty() returns True)\n      use line buffering.  Other text files use the policy described above\n      for binary files.\n\n    encoding is the name of the encoding used to decode or encode the\n    file. This should only be used in text mode. The default encoding is\n    platform dependent, but any encoding supported by Python can be\n    passed.  See the codecs module for the list of supported encodings.\n\n    errors is an optional string that specifies how encoding errors are to\n    be handled---this argument should not be used in binary mode. Pass\n    \'strict\' to raise a ValueError exception if there is an encoding error\n    (the default of None has the same effect), or pass \'ignore\' to ignore\n    errors. (Note that ignoring encoding errors can lead to data loss.)\n    See the documentation for codecs.register for a list of the permitted\n    encoding error strings.\n\n    newline controls how universal newlines works (it only applies to text\n    mode). It can be None, \'\', \'\\n\', \'\\r\', and \'\\r\\n\'.  It works as\n    follows:\n\n    * On input, if newline is None, universal newlines mode is\n      enabled. Lines in the input can end in \'\\n\', \'\\r\', or \'\\r\\n\', and\n      these are translated into \'\\n\' before being returned to the\n      caller. If it is \'\', universal newline mode is enabled, but line\n      endings are returned to the caller untranslated. If it has any of\n      the other legal values, input lines are only terminated by the given\n      string, and the line ending is returned to the caller untranslated.\n\n    * On output, if newline is None, any \'\\n\' characters written are\n      translated to the system default line separator, os.linesep. If\n      newline is \'\', no translation takes place. If newline is any of the\n      other legal values, any \'\\n\' characters written are translated to\n      the given string.\n\n    If closefd is False, the underlying file descriptor will be kept open\n    when the file is closed. This does not work when a file name is given\n    and must be True in that case.\n\n    open() returns a file object whose type depends on the mode, and\n    through which the standard file operations such as reading and writing\n    are performed. When open() is used to open a file in a text mode (\'w\',\n    \'r\', \'wt\', \'rt\', etc.), it returns a TextIOWrapper. When used to open\n    a file in a binary mode, the returned class varies: in read binary\n    mode, it returns a BufferedReader; in write binary and append binary\n    modes, it returns a BufferedWriter, and in read/write mode, it returns\n    a BufferedRandom.\n\n    It is also possible to use a string or bytearray as a file for both\n    reading and writing. For strings StringIO can be used like a file\n    opened in a text mode, and for bytes a BytesIO can be used like a file\n    opened in a binary mode.\n    ', lineno=151, col_offset=-1), lineno=151, col_offset=-1), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=152, col_offset=11), [Name('file', Load(), lineno=152, col_offset=22), Tuple([Name('basestring', Load(), lineno=152, col_offset=29), Name('int', Load(), lineno=152, col_offset=41), Name('long', Load(), lineno=152, col_offset=46)], Load(), lineno=152, col_offset=29)], [], None, None, lineno=152, col_offset=11), lineno=152, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=153, col_offset=14), [BinOp(Str(u'invalid file: %r', lineno=153, col_offset=24), Mod(), Name('file', Load(), lineno=153, col_offset=45), lineno=153, col_offset=24)], [], None, None, lineno=153, col_offset=14), None, None, lineno=153, col_offset=8)], [], lineno=152, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=154, col_offset=11), [Name('mode', Load(), lineno=154, col_offset=22), Name('basestring', Load(), lineno=154, col_offset=28)], [], None, None, lineno=154, col_offset=11), lineno=154, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=155, col_offset=14), [BinOp(Str(u'invalid mode: %r', lineno=155, col_offset=24), Mod(), Name('mode', Load(), lineno=155, col_offset=45), lineno=155, col_offset=24)], [], None, None, lineno=155, col_offset=14), None, None, lineno=155, col_offset=8)], [], lineno=154, col_offset=4), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=156, col_offset=11), [Name('buffering', Load(), lineno=156, col_offset=22), Tuple([Name('int', Load(), lineno=156, col_offset=34), Name('long', Load(), lineno=156, col_offset=39)], Load(), lineno=156, col_offset=34)], [], None, None, lineno=156, col_offset=11), lineno=156, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=157, col_offset=14), [BinOp(Str(u'invalid buffering: %r', lineno=157, col_offset=24), Mod(), Name('buffering', Load(), lineno=157, col_offset=50), lineno=157, col_offset=24)], [], None, None, lineno=157, col_offset=14), None, None, lineno=157, col_offset=8)], [], lineno=156, col_offset=4), If(BoolOp(And(), [Compare(Name('encoding', Load(), lineno=158, col_offset=7), [IsNot()], [Name('None', Load(), lineno=158, col_offset=23)], lineno=158, col_offset=7), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=158, col_offset=36), [Name('encoding', Load(), lineno=158, col_offset=47), Name('basestring', Load(), lineno=158, col_offset=57)], [], None, None, lineno=158, col_offset=36), lineno=158, col_offset=32)], lineno=158, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=159, col_offset=14), [BinOp(Str(u'invalid encoding: %r', lineno=159, col_offset=24), Mod(), Name('encoding', Load(), lineno=159, col_offset=49), lineno=159, col_offset=24)], [], None, None, lineno=159, col_offset=14), None, None, lineno=159, col_offset=8)], [], lineno=158, col_offset=4), If(BoolOp(And(), [Compare(Name('errors', Load(), lineno=160, col_offset=7), [IsNot()], [Name('None', Load(), lineno=160, col_offset=21)], lineno=160, col_offset=7), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=160, col_offset=34), [Name('errors', Load(), lineno=160, col_offset=45), Name('basestring', Load(), lineno=160, col_offset=53)], [], None, None, lineno=160, col_offset=34), lineno=160, col_offset=30)], lineno=160, col_offset=7), [Raise(Call(Name('TypeError', Load(), lineno=161, col_offset=14), [BinOp(Str(u'invalid errors: %r', lineno=161, col_offset=24), Mod(), Name('errors', Load(), lineno=161, col_offset=47), lineno=161, col_offset=24)], [], None, None, lineno=161, col_offset=14), None, None, lineno=161, col_offset=8)], [], lineno=160, col_offset=4), Assign([Name('modes', Store(), lineno=162, col_offset=4)], Call(Name('set', Load(), lineno=162, col_offset=12), [Name('mode', Load(), lineno=162, col_offset=16)], [], None, None, lineno=162, col_offset=12), lineno=162, col_offset=4), If(BoolOp(Or(), [BinOp(Name('modes', Load(), lineno=163, col_offset=7), Sub(), Call(Name('set', Load(), lineno=163, col_offset=15), [Str(u'arwb+tU', lineno=163, col_offset=19)], [], None, None, lineno=163, col_offset=15), lineno=163, col_offset=7), Compare(Call(Name('len', Load(), lineno=163, col_offset=33), [Name('mode', Load(), lineno=163, col_offset=37)], [], None, None, lineno=163, col_offset=33), [Gt()], [Call(Name('len', Load(), lineno=163, col_offset=45), [Name('modes', Load(), lineno=163, col_offset=49)], [], None, None, lineno=163, col_offset=45)], lineno=163, col_offset=33)], lineno=163, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=164, col_offset=14), [BinOp(Str(u'invalid mode: %r', lineno=164, col_offset=25), Mod(), Name('mode', Load(), lineno=164, col_offset=46), lineno=164, col_offset=25)], [], None, None, lineno=164, col_offset=14), None, None, lineno=164, col_offset=8)], [], lineno=163, col_offset=4), Assign([Name('reading', Store(), lineno=165, col_offset=4)], Compare(Str(u'r', lineno=165, col_offset=14), [In()], [Name('modes', Load(), lineno=165, col_offset=21)], lineno=165, col_offset=14), lineno=165, col_offset=4), Assign([Name('writing', Store(), lineno=166, col_offset=4)], Compare(Str(u'w', lineno=166, col_offset=14), [In()], [Name('modes', Load(), lineno=166, col_offset=21)], lineno=166, col_offset=14), lineno=166, col_offset=4), Assign([Name('appending', Store(), lineno=167, col_offset=4)], Compare(Str(u'a', lineno=167, col_offset=16), [In()], [Name('modes', Load(), lineno=167, col_offset=23)], lineno=167, col_offset=16), lineno=167, col_offset=4), Assign([Name('updating', Store(), lineno=168, col_offset=4)], Compare(Str(u'+', lineno=168, col_offset=15), [In()], [Name('modes', Load(), lineno=168, col_offset=22)], lineno=168, col_offset=15), lineno=168, col_offset=4), Assign([Name('text', Store(), lineno=169, col_offset=4)], Compare(Str(u't', lineno=169, col_offset=11), [In()], [Name('modes', Load(), lineno=169, col_offset=18)], lineno=169, col_offset=11), lineno=169, col_offset=4), Assign([Name('binary', Store(), lineno=170, col_offset=4)], Compare(Str(u'b', lineno=170, col_offset=13), [In()], [Name('modes', Load(), lineno=170, col_offset=20)], lineno=170, col_offset=13), lineno=170, col_offset=4), If(Compare(Str(u'U', lineno=171, col_offset=7), [In()], [Name('modes', Load(), lineno=171, col_offset=14)], lineno=171, col_offset=7), [If(BoolOp(Or(), [Name('writing', Load(), lineno=172, col_offset=11), Name('appending', Load(), lineno=172, col_offset=22)], lineno=172, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=173, col_offset=18), [Str(u"can't use U and writing mode at once", lineno=173, col_offset=29)], [], None, None, lineno=173, col_offset=18), None, None, lineno=173, col_offset=12)], [], lineno=172, col_offset=8), Assign([Name('reading', Store(), lineno=174, col_offset=8)], Name('True', Load(), lineno=174, col_offset=18), lineno=174, col_offset=8)], [], lineno=171, col_offset=4), If(BoolOp(And(), [Name('text', Load(), lineno=175, col_offset=7), Name('binary', Load(), lineno=175, col_offset=16)], lineno=175, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=176, col_offset=14), [Str(u"can't have text and binary mode at once", lineno=176, col_offset=25)], [], None, None, lineno=176, col_offset=14), None, None, lineno=176, col_offset=8)], [], lineno=175, col_offset=4), If(Compare(BinOp(BinOp(Name('reading', Load(), lineno=177, col_offset=7), Add(), Name('writing', Load(), lineno=177, col_offset=17), lineno=177, col_offset=7), Add(), Name('appending', Load(), lineno=177, col_offset=27), lineno=177, col_offset=25), [Gt()], [Num(1, lineno=177, col_offset=39)], lineno=177, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=178, col_offset=14), [Str(u"can't have read/write/append mode at once", lineno=178, col_offset=25)], [], None, None, lineno=178, col_offset=14), None, None, lineno=178, col_offset=8)], [], lineno=177, col_offset=4), If(UnaryOp(Not(), BoolOp(Or(), [Name('reading', Load(), lineno=179, col_offset=12), Name('writing', Load(), lineno=179, col_offset=23), Name('appending', Load(), lineno=179, col_offset=34)], lineno=179, col_offset=12), lineno=179, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=180, col_offset=14), [Str(u'must have exactly one of read/write/append mode', lineno=180, col_offset=25)], [], None, None, lineno=180, col_offset=14), None, None, lineno=180, col_offset=8)], [], lineno=179, col_offset=4), If(BoolOp(And(), [Name('binary', Load(), lineno=181, col_offset=7), Compare(Name('encoding', Load(), lineno=181, col_offset=18), [IsNot()], [Name('None', Load(), lineno=181, col_offset=34)], lineno=181, col_offset=18)], lineno=181, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=182, col_offset=14), [Str(u"binary mode doesn't take an encoding argument", lineno=182, col_offset=25)], [], None, None, lineno=182, col_offset=14), None, None, lineno=182, col_offset=8)], [], lineno=181, col_offset=4), If(BoolOp(And(), [Name('binary', Load(), lineno=183, col_offset=7), Compare(Name('errors', Load(), lineno=183, col_offset=18), [IsNot()], [Name('None', Load(), lineno=183, col_offset=32)], lineno=183, col_offset=18)], lineno=183, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=184, col_offset=14), [Str(u"binary mode doesn't take an errors argument", lineno=184, col_offset=25)], [], None, None, lineno=184, col_offset=14), None, None, lineno=184, col_offset=8)], [], lineno=183, col_offset=4), If(BoolOp(And(), [Name('binary', Load(), lineno=185, col_offset=7), Compare(Name('newline', Load(), lineno=185, col_offset=18), [IsNot()], [Name('None', Load(), lineno=185, col_offset=33)], lineno=185, col_offset=18)], lineno=185, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=186, col_offset=14), [Str(u"binary mode doesn't take a newline argument", lineno=186, col_offset=25)], [], None, None, lineno=186, col_offset=14), None, None, lineno=186, col_offset=8)], [], lineno=185, col_offset=4), Assign([Name('raw', Store(), lineno=187, col_offset=4)], Call(Name('FileIO', Load(), lineno=187, col_offset=10), [Name('file', Load(), lineno=187, col_offset=17), BinOp(BinOp(BinOp(BoolOp(Or(), [BoolOp(And(), [Name('reading', Load(), lineno=188, col_offset=18), Str(u'r', lineno=188, col_offset=30)], lineno=188, col_offset=18), Str(u'', lineno=188, col_offset=37)], lineno=188, col_offset=18), Add(), BoolOp(Or(), [BoolOp(And(), [Name('writing', Load(), lineno=189, col_offset=18), Str(u'w', lineno=189, col_offset=30)], lineno=189, col_offset=18), Str(u'', lineno=189, col_offset=37)], lineno=189, col_offset=18), lineno=188, col_offset=17), Add(), BoolOp(Or(), [BoolOp(And(), [Name('appending', Load(), lineno=190, col_offset=18), Str(u'a', lineno=190, col_offset=32)], lineno=190, col_offset=18), Str(u'', lineno=190, col_offset=39)], lineno=190, col_offset=18), lineno=189, col_offset=41), Add(), BoolOp(Or(), [BoolOp(And(), [Name('updating', Load(), lineno=191, col_offset=18), Str(u'+', lineno=191, col_offset=31)], lineno=191, col_offset=18), Str(u'', lineno=191, col_offset=38)], lineno=191, col_offset=18), lineno=190, col_offset=43), Name('closefd', Load(), lineno=192, col_offset=17)], [], None, None, lineno=187, col_offset=10), lineno=187, col_offset=4), Assign([Name('line_buffering', Store(), lineno=193, col_offset=4)], Name('False', Load(), lineno=193, col_offset=21), lineno=193, col_offset=4), If(BoolOp(Or(), [Compare(Name('buffering', Load(), lineno=194, col_offset=7), [Eq()], [Num(1, lineno=194, col_offset=20)], lineno=194, col_offset=7), BoolOp(And(), [Compare(Name('buffering', Load(), lineno=194, col_offset=25), [Lt()], [Num(0, lineno=194, col_offset=37)], lineno=194, col_offset=25), Call(Attribute(Name('raw', Load(), lineno=194, col_offset=43), 'isatty', Load(), lineno=194, col_offset=43), [], [], None, None, lineno=194, col_offset=43)], lineno=194, col_offset=25)], lineno=194, col_offset=7), [Assign([Name('buffering', Store(), lineno=195, col_offset=8)], Num(-1, lineno=195, col_offset=21), lineno=195, col_offset=8), Assign([Name('line_buffering', Store(), lineno=196, col_offset=8)], Name('True', Load(), lineno=196, col_offset=25), lineno=196, col_offset=8)], [], lineno=194, col_offset=4), If(Compare(Name('buffering', Load(), lineno=197, col_offset=7), [Lt()], [Num(0, lineno=197, col_offset=19)], lineno=197, col_offset=7), [Assign([Name('buffering', Store(), lineno=198, col_offset=8)], Name('DEFAULT_BUFFER_SIZE', Load(), lineno=198, col_offset=20), lineno=198, col_offset=8), TryExcept([Assign([Name('bs', Store(), lineno=200, col_offset=12)], Attribute(Call(Attribute(Name('os', Load(), lineno=200, col_offset=17), 'fstat', Load(), lineno=200, col_offset=17), [Call(Attribute(Name('raw', Load(), lineno=200, col_offset=26), 'fileno', Load(), lineno=200, col_offset=26), [], [], None, None, lineno=200, col_offset=26)], [], None, None, lineno=200, col_offset=17), 'st_blksize', Load(), lineno=200, col_offset=17), lineno=200, col_offset=12)], [ExceptHandler(Tuple([Attribute(Name('os', Load(), lineno=201, col_offset=16), 'error', Load(), lineno=201, col_offset=16), Name('AttributeError', Load(), lineno=201, col_offset=26)], Load(), lineno=201, col_offset=16), None, [Pass( lineno=202, col_offset=12)], lineno=201, col_offset=8)], [If(Compare(Name('bs', Load(), lineno=204, col_offset=15), [Gt()], [Num(1, lineno=204, col_offset=20)], lineno=204, col_offset=15), [Assign([Name('buffering', Store(), lineno=205, col_offset=16)], Name('bs', Load(), lineno=205, col_offset=28), lineno=205, col_offset=16)], [], lineno=204, col_offset=12)], lineno=199, col_offset=8)], [], lineno=197, col_offset=4), If(Compare(Name('buffering', Load(), lineno=206, col_offset=7), [Lt()], [Num(0, lineno=206, col_offset=19)], lineno=206, col_offset=7), [Raise(Call(Name('ValueError', Load(), lineno=207, col_offset=14), [Str(u'invalid buffering size', lineno=207, col_offset=25)], [], None, None, lineno=207, col_offset=14), None, None, lineno=207, col_offset=8)], [], lineno=206, col_offset=4), If(Compare(Name('buffering', Load(), lineno=208, col_offset=7), [Eq()], [Num(0, lineno=208, col_offset=20)], lineno=208, col_offset=7), [If(Name('binary', Load(), lineno=209, col_offset=11), [Return(Name('raw', Load(), lineno=210, col_offset=19), lineno=210, col_offset=12)], [], lineno=209, col_offset=8), Raise(Call(Name('ValueError', Load(), lineno=211, col_offset=14), [Str(u"can't have unbuffered text I/O", lineno=211, col_offset=25)], [], None, None, lineno=211, col_offset=14), None, None, lineno=211, col_offset=8)], [], lineno=208, col_offset=4), If(Name('updating', Load(), lineno=212, col_offset=7), [Assign([Name('buffer', Store(), lineno=213, col_offset=8)], Call(Name('BufferedRandom', Load(), lineno=213, col_offset=17), [Name('raw', Load(), lineno=213, col_offset=32), Name('buffering', Load(), lineno=213, col_offset=37)], [], None, None, lineno=213, col_offset=17), lineno=213, col_offset=8)], [If(BoolOp(Or(), [Name('writing', Load(), lineno=214, col_offset=9), Name('appending', Load(), lineno=214, col_offset=20)], lineno=214, col_offset=9), [Assign([Name('buffer', Store(), lineno=215, col_offset=8)], Call(Name('BufferedWriter', Load(), lineno=215, col_offset=17), [Name('raw', Load(), lineno=215, col_offset=32), Name('buffering', Load(), lineno=215, col_offset=37)], [], None, None, lineno=215, col_offset=17), lineno=215, col_offset=8)], [If(Name('reading', Load(), lineno=216, col_offset=9), [Assign([Name('buffer', Store(), lineno=217, col_offset=8)], Call(Name('BufferedReader', Load(), lineno=217, col_offset=17), [Name('raw', Load(), lineno=217, col_offset=32), Name('buffering', Load(), lineno=217, col_offset=37)], [], None, None, lineno=217, col_offset=17), lineno=217, col_offset=8)], [Raise(Call(Name('ValueError', Load(), lineno=219, col_offset=14), [BinOp(Str(u'unknown mode: %r', lineno=219, col_offset=25), Mod(), Name('mode', Load(), lineno=219, col_offset=46), lineno=219, col_offset=25)], [], None, None, lineno=219, col_offset=14), None, None, lineno=219, col_offset=8)], lineno=216, col_offset=9)], lineno=214, col_offset=9)], lineno=212, col_offset=4), If(Name('binary', Load(), lineno=220, col_offset=7), [Return(Name('buffer', Load(), lineno=221, col_offset=15), lineno=221, col_offset=8)], [], lineno=220, col_offset=4), Assign([Name('text', Store(), lineno=222, col_offset=4)], Call(Name('TextIOWrapper', Load(), lineno=222, col_offset=11), [Name('buffer', Load(), lineno=222, col_offset=25), Name('encoding', Load(), lineno=222, col_offset=33), Name('errors', Load(), lineno=222, col_offset=43), Name('newline', Load(), lineno=222, col_offset=51), Name('line_buffering', Load(), lineno=222, col_offset=60)], [], None, None, lineno=222, col_offset=11), lineno=222, col_offset=4), Assign([Attribute(Name('text', Load(), lineno=223, col_offset=4), 'mode', Store(), lineno=223, col_offset=4)], Name('mode', Load(), lineno=223, col_offset=16), lineno=223, col_offset=4), Return(Name('text', Load(), lineno=224, col_offset=11), lineno=224, col_offset=4)], [], lineno=41, col_offset=0), ClassDef('DocDescriptor', [], [Expr(Str(u'Helper for builtins.open.__doc__\n    ', lineno=229, col_offset=-1), lineno=229, col_offset=-1), FunctionDef('__get__', arguments([Name('self', Param(), lineno=230, col_offset=16), Name('obj', Param(), lineno=230, col_offset=22), Name('typ', Param(), lineno=230, col_offset=27)], None, None, []), [Return(BinOp(Str(u"open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True)\n\n", lineno=232, col_offset=12), Add(), Attribute(Name('open', Load(), lineno=234, col_offset=12), '__doc__', Load(), lineno=234, col_offset=12), lineno=232, col_offset=12), lineno=231, col_offset=8)], [], lineno=230, col_offset=4)], [], lineno=227, col_offset=0), ClassDef('OpenWrapper', [], [Expr(Str(u"Wrapper for builtins.open\n\n    Trick so that open won't become a bound method when stored\n    as a class variable (as dbm.dumb does).\n\n    See initstdio() in Python/pythonrun.c.\n    ", lineno=243, col_offset=-1), lineno=243, col_offset=-1), Assign([Name('__doc__', Store(), lineno=244, col_offset=4)], Call(Name('DocDescriptor', Load(), lineno=244, col_offset=14), [], [], None, None, lineno=244, col_offset=14), lineno=244, col_offset=4), FunctionDef('__new__', arguments([Name('cls', Param(), lineno=246, col_offset=16)], 'args', 'kwargs', []), [Return(Call(Name('open', Load(), lineno=247, col_offset=15), [], [], Name('args', Load(), lineno=247, col_offset=21), Name('kwargs', Load(), lineno=247, col_offset=29), lineno=247, col_offset=15), lineno=247, col_offset=8)], [], lineno=246, col_offset=4)], [], lineno=236, col_offset=0), ClassDef('UnsupportedOperation', [Name('ValueError', Load(), lineno=250, col_offset=27), Name('IOError', Load(), lineno=250, col_offset=39)], [Pass( lineno=251, col_offset=4)], [], lineno=250, col_offset=0), ClassDef('IOBase', [], [Assign([Name('__metaclass__', Store(), lineno=255, col_offset=4)], Attribute(Name('abc', Load(), lineno=255, col_offset=20), 'ABCMeta', Load(), lineno=255, col_offset=20), lineno=255, col_offset=4), Expr(Str(u"The abstract base class for all I/O classes, acting on streams of\n    bytes. There is no public constructor.\n\n    This class provides dummy implementations for many methods that\n    derived classes can override selectively; the default implementations\n    represent a file that cannot be read, written or seeked.\n\n    Even though IOBase does not declare read, readinto, or write because\n    their signatures will vary, implementations and clients should\n    consider those methods part of the interface. Also, implementations\n    may raise a IOError when operations they do not support are called.\n\n    The basic type used for binary data read from or written to a file is\n    bytes. bytearrays are accepted too, and in some cases (such as\n    readinto) needed. Text I/O classes work with str data.\n\n    Note that calling any method (even inquiries) on a closed stream is\n    undefined. Implementations may raise IOError in this case.\n\n    IOBase (and its subclasses) support the iterator protocol, meaning\n    that an IOBase object can be iterated over yielding the lines in a\n    stream.\n\n    IOBase also supports the :keyword:`with` statement. In this example,\n    fp is closed after the suite of the with statement is complete:\n\n    with open('spam.txt', 'r') as fp:\n        fp.write('Spam and eggs!')\n    ", lineno=285, col_offset=-1), lineno=285, col_offset=-1), FunctionDef('_unsupported', arguments([Name('self', Param(), lineno=289, col_offset=21), Name('name', Param(), lineno=289, col_offset=27)], None, None, []), [Expr(Str(u'Internal: raise an exception for unsupported operations.', lineno=290, col_offset=8), lineno=290, col_offset=8), Raise(Call(Name('UnsupportedOperation', Load(), lineno=291, col_offset=14), [BinOp(Str(u'%s.%s() not supported', lineno=291, col_offset=35), Mod(), Tuple([Attribute(Attribute(Name('self', Load(), lineno=292, col_offset=36), '__class__', Load(), lineno=292, col_offset=36), '__name__', Load(), lineno=292, col_offset=36), Name('name', Load(), lineno=292, col_offset=61)], Load(), lineno=292, col_offset=36), lineno=291, col_offset=35)], [], None, None, lineno=291, col_offset=14), None, None, lineno=291, col_offset=8)], [], lineno=289, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=296, col_offset=13), Name('pos', Param(), lineno=296, col_offset=19), Name('whence', Param(), lineno=296, col_offset=24)], None, None, [Num(0, lineno=296, col_offset=31)]), [Expr(Str(u'Change stream position.\n\n        Change the stream position to byte offset offset. offset is\n        interpreted relative to the position indicated by whence.  Values\n        for whence are:\n\n        * 0 -- start of stream (the default); offset should be zero or positive\n        * 1 -- current stream position; offset may be negative\n        * 2 -- end of stream; offset is usually negative\n\n        Return the new absolute position.\n        ', lineno=308, col_offset=-1), lineno=308, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=309, col_offset=8), '_unsupported', Load(), lineno=309, col_offset=8), [Str(u'seek', lineno=309, col_offset=26)], [], None, None, lineno=309, col_offset=8), lineno=309, col_offset=8)], [], lineno=296, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=311, col_offset=13)], None, None, []), [Expr(Str(u'Return current stream position.', lineno=312, col_offset=8), lineno=312, col_offset=8), Return(Call(Attribute(Name('self', Load(), lineno=313, col_offset=15), 'seek', Load(), lineno=313, col_offset=15), [Num(0, lineno=313, col_offset=25), Num(1, lineno=313, col_offset=28)], [], None, None, lineno=313, col_offset=15), lineno=313, col_offset=8)], [], lineno=311, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=315, col_offset=17), Name('pos', Param(), lineno=315, col_offset=23)], None, None, [Name('None', Load(), lineno=315, col_offset=27)]), [Expr(Str(u'Truncate file to size bytes.\n\n        Size defaults to the current IO position as reported by tell().  Return\n        the new size.\n        ', lineno=320, col_offset=-1), lineno=320, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=321, col_offset=8), '_unsupported', Load(), lineno=321, col_offset=8), [Str(u'truncate', lineno=321, col_offset=26)], [], None, None, lineno=321, col_offset=8), lineno=321, col_offset=8)], [], lineno=315, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=325, col_offset=14)], None, None, []), [Expr(Str(u'Flush write buffers, if applicable.\n\n        This is not implemented for read-only and non-blocking streams.\n        ', lineno=329, col_offset=-1), lineno=329, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=330, col_offset=8), '_checkClosed', Load(), lineno=330, col_offset=8), [], [], None, None, lineno=330, col_offset=8), lineno=330, col_offset=8)], [], lineno=325, col_offset=4), Assign([Name('__closed', Store(), lineno=333, col_offset=4)], Name('False', Load(), lineno=333, col_offset=15), lineno=333, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=335, col_offset=14)], None, None, []), [Expr(Str(u'Flush and close the IO object.\n\n        This method has no effect if the file is already closed.\n        ', lineno=339, col_offset=-1), lineno=339, col_offset=-1), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=340, col_offset=15), '__closed', Load(), lineno=340, col_offset=15), lineno=340, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=341, col_offset=12), 'flush', Load(), lineno=341, col_offset=12), [], [], None, None, lineno=341, col_offset=12), lineno=341, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=342, col_offset=12), '__closed', Store(), lineno=342, col_offset=12)], Name('True', Load(), lineno=342, col_offset=28), lineno=342, col_offset=12)], [], lineno=340, col_offset=8)], [], lineno=335, col_offset=4), FunctionDef('__del__', arguments([Name('self', Param(), lineno=344, col_offset=16)], None, None, []), [Expr(Str(u'Destructor.  Calls close().', lineno=345, col_offset=8), lineno=345, col_offset=8), TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=352, col_offset=12), 'close', Load(), lineno=352, col_offset=12), [], [], None, None, lineno=352, col_offset=12), lineno=352, col_offset=12)], [ExceptHandler(None, None, [Pass( lineno=354, col_offset=12)], lineno=353, col_offset=8)], [], lineno=351, col_offset=8)], [], lineno=344, col_offset=4), FunctionDef('seekable', arguments([Name('self', Param(), lineno=358, col_offset=17)], None, None, []), [Expr(Str(u'Return whether object supports random access.\n\n        If False, seek(), tell() and truncate() will raise IOError.\n        This method may need to do a test seek().\n        ', lineno=363, col_offset=-1), lineno=363, col_offset=-1), Return(Name('False', Load(), lineno=364, col_offset=15), lineno=364, col_offset=8)], [], lineno=358, col_offset=4), FunctionDef('_checkSeekable', arguments([Name('self', Param(), lineno=366, col_offset=23), Name('msg', Param(), lineno=366, col_offset=29)], None, None, [Name('None', Load(), lineno=366, col_offset=33)]), [Expr(Str(u'Internal: raise an IOError if file is not seekable\n        ', lineno=368, col_offset=-1), lineno=368, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=369, col_offset=15), 'seekable', Load(), lineno=369, col_offset=15), [], [], None, None, lineno=369, col_offset=15), lineno=369, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=370, col_offset=18), [IfExp(Compare(Name('msg', Load(), lineno=371, col_offset=29), [Is()], [Name('None', Load(), lineno=371, col_offset=36)], lineno=371, col_offset=29), Str(u'File or stream is not seekable.', lineno=370, col_offset=26), Name('msg', Load(), lineno=371, col_offset=46), lineno=370, col_offset=26)], [], None, None, lineno=370, col_offset=18), None, None, lineno=370, col_offset=12)], [], lineno=369, col_offset=8)], [], lineno=366, col_offset=4), FunctionDef('readable', arguments([Name('self', Param(), lineno=374, col_offset=17)], None, None, []), [Expr(Str(u'Return whether object was opened for reading.\n\n        If False, read() will raise IOError.\n        ', lineno=378, col_offset=-1), lineno=378, col_offset=-1), Return(Name('False', Load(), lineno=379, col_offset=15), lineno=379, col_offset=8)], [], lineno=374, col_offset=4), FunctionDef('_checkReadable', arguments([Name('self', Param(), lineno=381, col_offset=23), Name('msg', Param(), lineno=381, col_offset=29)], None, None, [Name('None', Load(), lineno=381, col_offset=33)]), [Expr(Str(u'Internal: raise an IOError if file is not readable\n        ', lineno=383, col_offset=-1), lineno=383, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=384, col_offset=15), 'readable', Load(), lineno=384, col_offset=15), [], [], None, None, lineno=384, col_offset=15), lineno=384, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=385, col_offset=18), [IfExp(Compare(Name('msg', Load(), lineno=386, col_offset=29), [Is()], [Name('None', Load(), lineno=386, col_offset=36)], lineno=386, col_offset=29), Str(u'File or stream is not readable.', lineno=385, col_offset=26), Name('msg', Load(), lineno=386, col_offset=46), lineno=385, col_offset=26)], [], None, None, lineno=385, col_offset=18), None, None, lineno=385, col_offset=12)], [], lineno=384, col_offset=8)], [], lineno=381, col_offset=4), FunctionDef('writable', arguments([Name('self', Param(), lineno=388, col_offset=17)], None, None, []), [Expr(Str(u'Return whether object was opened for writing.\n\n        If False, write() and truncate() will raise IOError.\n        ', lineno=392, col_offset=-1), lineno=392, col_offset=-1), Return(Name('False', Load(), lineno=393, col_offset=15), lineno=393, col_offset=8)], [], lineno=388, col_offset=4), FunctionDef('_checkWritable', arguments([Name('self', Param(), lineno=395, col_offset=23), Name('msg', Param(), lineno=395, col_offset=29)], None, None, [Name('None', Load(), lineno=395, col_offset=33)]), [Expr(Str(u'Internal: raise an IOError if file is not writable\n        ', lineno=397, col_offset=-1), lineno=397, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=398, col_offset=15), 'writable', Load(), lineno=398, col_offset=15), [], [], None, None, lineno=398, col_offset=15), lineno=398, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=399, col_offset=18), [IfExp(Compare(Name('msg', Load(), lineno=400, col_offset=29), [Is()], [Name('None', Load(), lineno=400, col_offset=36)], lineno=400, col_offset=29), Str(u'File or stream is not writable.', lineno=399, col_offset=26), Name('msg', Load(), lineno=400, col_offset=46), lineno=399, col_offset=26)], [], None, None, lineno=399, col_offset=18), None, None, lineno=399, col_offset=12)], [], lineno=398, col_offset=8)], [], lineno=395, col_offset=4), FunctionDef('closed', arguments([Name('self', Param(), lineno=403, col_offset=15)], None, None, []), [Expr(Str(u'closed: bool.  True iff the file has been closed.\n\n        For backwards compatibility, this is a property, not a predicate.\n        ', lineno=407, col_offset=-1), lineno=407, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=408, col_offset=15), '__closed', Load(), lineno=408, col_offset=15), lineno=408, col_offset=8)], [Name('property', Load(), lineno=402, col_offset=5)], lineno=402, col_offset=4), FunctionDef('_checkClosed', arguments([Name('self', Param(), lineno=410, col_offset=21), Name('msg', Param(), lineno=410, col_offset=27)], None, None, [Name('None', Load(), lineno=410, col_offset=31)]), [Expr(Str(u'Internal: raise an ValueError if file is closed\n        ', lineno=412, col_offset=-1), lineno=412, col_offset=-1), If(Attribute(Name('self', Load(), lineno=413, col_offset=11), 'closed', Load(), lineno=413, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=414, col_offset=18), [IfExp(Compare(Name('msg', Load(), lineno=415, col_offset=32), [Is()], [Name('None', Load(), lineno=415, col_offset=39)], lineno=415, col_offset=32), Str(u'I/O operation on closed file.', lineno=414, col_offset=29), Name('msg', Load(), lineno=415, col_offset=49), lineno=414, col_offset=29)], [], None, None, lineno=414, col_offset=18), None, None, lineno=414, col_offset=12)], [], lineno=413, col_offset=8)], [], lineno=410, col_offset=4), FunctionDef('__enter__', arguments([Name('self', Param(), lineno=419, col_offset=18)], None, None, []), [Expr(Str(u'Context management protocol.  Returns self.', lineno=420, col_offset=8), lineno=420, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=421, col_offset=8), '_checkClosed', Load(), lineno=421, col_offset=8), [], [], None, None, lineno=421, col_offset=8), lineno=421, col_offset=8), Return(Name('self', Load(), lineno=422, col_offset=15), lineno=422, col_offset=8)], [], lineno=419, col_offset=4), FunctionDef('__exit__', arguments([Name('self', Param(), lineno=424, col_offset=17)], 'args', None, []), [Expr(Str(u'Context management protocol.  Calls close()', lineno=425, col_offset=8), lineno=425, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=426, col_offset=8), 'close', Load(), lineno=426, col_offset=8), [], [], None, None, lineno=426, col_offset=8), lineno=426, col_offset=8)], [], lineno=424, col_offset=4), FunctionDef('fileno', arguments([Name('self', Param(), lineno=432, col_offset=15)], None, None, []), [Expr(Str(u'Returns underlying file descriptor if one exists.\n\n        An IOError is raised if the IO object does not use a file descriptor.\n        ', lineno=436, col_offset=-1), lineno=436, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=437, col_offset=8), '_unsupported', Load(), lineno=437, col_offset=8), [Str(u'fileno', lineno=437, col_offset=26)], [], None, None, lineno=437, col_offset=8), lineno=437, col_offset=8)], [], lineno=432, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=439, col_offset=15)], None, None, []), [Expr(Str(u"Return whether this is an 'interactive' stream.\n\n        Return False if it can't be determined.\n        ", lineno=443, col_offset=-1), lineno=443, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=444, col_offset=8), '_checkClosed', Load(), lineno=444, col_offset=8), [], [], None, None, lineno=444, col_offset=8), lineno=444, col_offset=8), Return(Name('False', Load(), lineno=445, col_offset=15), lineno=445, col_offset=8)], [], lineno=439, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=449, col_offset=17), Name('limit', Param(), lineno=449, col_offset=23)], None, None, [Num(-1, lineno=449, col_offset=30)]), [Expr(Str(u"Read and return a line from the stream.\n\n        If limit is specified, at most limit bytes will be read.\n\n        The line terminator is always b'\\n' for binary files; for text\n        files, the newlines argument to open can be used to select the line\n        terminator(s) recognized.\n        ", lineno=457, col_offset=-1), lineno=457, col_offset=-1), If(Call(Name('hasattr', Load(), lineno=459, col_offset=11), [Name('self', Load(), lineno=459, col_offset=19), Str(u'peek', lineno=459, col_offset=25)], [], None, None, lineno=459, col_offset=11), [FunctionDef('nreadahead', arguments([], None, None, []), [Assign([Name('readahead', Store(), lineno=461, col_offset=16)], Call(Attribute(Name('self', Load(), lineno=461, col_offset=28), 'peek', Load(), lineno=461, col_offset=28), [Num(1, lineno=461, col_offset=38)], [], None, None, lineno=461, col_offset=28), lineno=461, col_offset=16), If(UnaryOp(Not(), Name('readahead', Load(), lineno=462, col_offset=23), lineno=462, col_offset=19), [Return(Num(1, lineno=463, col_offset=27), lineno=463, col_offset=20)], [], lineno=462, col_offset=16), Assign([Name('n', Store(), lineno=464, col_offset=16)], BoolOp(Or(), [BinOp(Call(Attribute(Name('readahead', Load(), lineno=464, col_offset=21), 'find', Load(), lineno=464, col_offset=21), [Str('\n', lineno=464, col_offset=36)], [], None, None, lineno=464, col_offset=21), Add(), Num(1, lineno=464, col_offset=45), lineno=464, col_offset=21), Call(Name('len', Load(), lineno=464, col_offset=51), [Name('readahead', Load(), lineno=464, col_offset=55)], [], None, None, lineno=464, col_offset=51)], lineno=464, col_offset=20), lineno=464, col_offset=16), If(Compare(Name('limit', Load(), lineno=465, col_offset=19), [GtE()], [Num(0, lineno=465, col_offset=28)], lineno=465, col_offset=19), [Assign([Name('n', Store(), lineno=466, col_offset=20)], Call(Name('min', Load(), lineno=466, col_offset=24), [Name('n', Load(), lineno=466, col_offset=28), Name('limit', Load(), lineno=466, col_offset=31)], [], None, None, lineno=466, col_offset=24), lineno=466, col_offset=20)], [], lineno=465, col_offset=16), Return(Name('n', Load(), lineno=467, col_offset=23), lineno=467, col_offset=16)], [], lineno=460, col_offset=12)], [FunctionDef('nreadahead', arguments([], None, None, []), [Return(Num(1, lineno=470, col_offset=23), lineno=470, col_offset=16)], [], lineno=469, col_offset=12)], lineno=459, col_offset=8), If(Compare(Name('limit', Load(), lineno=471, col_offset=11), [Is()], [Name('None', Load(), lineno=471, col_offset=20)], lineno=471, col_offset=11), [Assign([Name('limit', Store(), lineno=472, col_offset=12)], Num(-1, lineno=472, col_offset=21), lineno=472, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=473, col_offset=17), [Name('limit', Load(), lineno=473, col_offset=28), Tuple([Name('int', Load(), lineno=473, col_offset=36), Name('long', Load(), lineno=473, col_offset=41)], Load(), lineno=473, col_offset=36)], [], None, None, lineno=473, col_offset=17), lineno=473, col_offset=13), [Raise(Call(Name('TypeError', Load(), lineno=474, col_offset=18), [Str(u'limit must be an integer', lineno=474, col_offset=28)], [], None, None, lineno=474, col_offset=18), None, None, lineno=474, col_offset=12)], [], lineno=473, col_offset=13)], lineno=471, col_offset=8), Assign([Name('res', Store(), lineno=475, col_offset=8)], Call(Name('bytearray', Load(), lineno=475, col_offset=14), [], [], None, None, lineno=475, col_offset=14), lineno=475, col_offset=8), While(BoolOp(Or(), [Compare(Name('limit', Load(), lineno=476, col_offset=14), [Lt()], [Num(0, lineno=476, col_offset=22)], lineno=476, col_offset=14), Compare(Call(Name('len', Load(), lineno=476, col_offset=27), [Name('res', Load(), lineno=476, col_offset=31)], [], None, None, lineno=476, col_offset=27), [Lt()], [Name('limit', Load(), lineno=476, col_offset=38)], lineno=476, col_offset=27)], lineno=476, col_offset=14), [Assign([Name('b', Store(), lineno=477, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=477, col_offset=16), 'read', Load(), lineno=477, col_offset=16), [Call(Name('nreadahead', Load(), lineno=477, col_offset=26), [], [], None, None, lineno=477, col_offset=26)], [], None, None, lineno=477, col_offset=16), lineno=477, col_offset=12), If(UnaryOp(Not(), Name('b', Load(), lineno=478, col_offset=19), lineno=478, col_offset=15), [Break( lineno=479, col_offset=16)], [], lineno=478, col_offset=12), AugAssign(Name('res', Store(), lineno=480, col_offset=12), Add(), Name('b', Load(), lineno=480, col_offset=19), lineno=480, col_offset=12), If(Call(Attribute(Name('res', Load(), lineno=481, col_offset=15), 'endswith', Load(), lineno=481, col_offset=15), [Str('\n', lineno=481, col_offset=28)], [], None, None, lineno=481, col_offset=15), [Break( lineno=482, col_offset=16)], [], lineno=481, col_offset=12)], [], lineno=476, col_offset=8), Return(Call(Name('bytes', Load(), lineno=483, col_offset=15), [Name('res', Load(), lineno=483, col_offset=21)], [], None, None, lineno=483, col_offset=15), lineno=483, col_offset=8)], [], lineno=449, col_offset=4), FunctionDef('__iter__', arguments([Name('self', Param(), lineno=485, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=486, col_offset=8), '_checkClosed', Load(), lineno=486, col_offset=8), [], [], None, None, lineno=486, col_offset=8), lineno=486, col_offset=8), Return(Name('self', Load(), lineno=487, col_offset=15), lineno=487, col_offset=8)], [], lineno=485, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=489, col_offset=13)], None, None, []), [Assign([Name('line', Store(), lineno=490, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=490, col_offset=15), 'readline', Load(), lineno=490, col_offset=15), [], [], None, None, lineno=490, col_offset=15), lineno=490, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=491, col_offset=15), lineno=491, col_offset=11), [Raise(Name('StopIteration', Load(), lineno=492, col_offset=18), None, None, lineno=492, col_offset=12)], [], lineno=491, col_offset=8), Return(Name('line', Load(), lineno=493, col_offset=15), lineno=493, col_offset=8)], [], lineno=489, col_offset=4), FunctionDef('readlines', arguments([Name('self', Param(), lineno=495, col_offset=18), Name('hint', Param(), lineno=495, col_offset=24)], None, None, [Name('None', Load(), lineno=495, col_offset=29)]), [Expr(Str(u'Return a list of lines from the stream.\n\n        hint can be specified to control the number of lines read: no more\n        lines will be read if the total size (in bytes/characters) of all\n        lines so far exceeds hint.\n        ', lineno=501, col_offset=-1), lineno=501, col_offset=-1), If(BoolOp(And(), [Compare(Name('hint', Load(), lineno=502, col_offset=11), [IsNot()], [Name('None', Load(), lineno=502, col_offset=23)], lineno=502, col_offset=11), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=502, col_offset=36), [Name('hint', Load(), lineno=502, col_offset=47), Tuple([Name('int', Load(), lineno=502, col_offset=54), Name('long', Load(), lineno=502, col_offset=59)], Load(), lineno=502, col_offset=54)], [], None, None, lineno=502, col_offset=36), lineno=502, col_offset=32)], lineno=502, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=503, col_offset=18), [Str(u'integer or None expected', lineno=503, col_offset=28)], [], None, None, lineno=503, col_offset=18), None, None, lineno=503, col_offset=12)], [], lineno=502, col_offset=8), If(BoolOp(Or(), [Compare(Name('hint', Load(), lineno=504, col_offset=11), [Is()], [Name('None', Load(), lineno=504, col_offset=19)], lineno=504, col_offset=11), Compare(Name('hint', Load(), lineno=504, col_offset=27), [LtE()], [Num(0, lineno=504, col_offset=35)], lineno=504, col_offset=27)], lineno=504, col_offset=11), [Return(Call(Name('list', Load(), lineno=505, col_offset=19), [Name('self', Load(), lineno=505, col_offset=24)], [], None, None, lineno=505, col_offset=19), lineno=505, col_offset=12)], [], lineno=504, col_offset=8), Assign([Name('n', Store(), lineno=506, col_offset=8)], Num(0, lineno=506, col_offset=12), lineno=506, col_offset=8), Assign([Name('lines', Store(), lineno=507, col_offset=8)], List([], Load(), lineno=507, col_offset=16), lineno=507, col_offset=8), For(Name('line', Store(), lineno=508, col_offset=12), Name('self', Load(), lineno=508, col_offset=20), [Expr(Call(Attribute(Name('lines', Load(), lineno=509, col_offset=12), 'append', Load(), lineno=509, col_offset=12), [Name('line', Load(), lineno=509, col_offset=25)], [], None, None, lineno=509, col_offset=12), lineno=509, col_offset=12), AugAssign(Name('n', Store(), lineno=510, col_offset=12), Add(), Call(Name('len', Load(), lineno=510, col_offset=17), [Name('line', Load(), lineno=510, col_offset=21)], [], None, None, lineno=510, col_offset=17), lineno=510, col_offset=12), If(Compare(Name('n', Load(), lineno=511, col_offset=15), [GtE()], [Name('hint', Load(), lineno=511, col_offset=20)], lineno=511, col_offset=15), [Break( lineno=512, col_offset=16)], [], lineno=511, col_offset=12)], [], lineno=508, col_offset=8), Return(Name('lines', Load(), lineno=513, col_offset=15), lineno=513, col_offset=8)], [], lineno=495, col_offset=4), FunctionDef('writelines', arguments([Name('self', Param(), lineno=515, col_offset=19), Name('lines', Param(), lineno=515, col_offset=25)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=516, col_offset=8), '_checkClosed', Load(), lineno=516, col_offset=8), [], [], None, None, lineno=516, col_offset=8), lineno=516, col_offset=8), For(Name('line', Store(), lineno=517, col_offset=12), Name('lines', Load(), lineno=517, col_offset=20), [Expr(Call(Attribute(Name('self', Load(), lineno=518, col_offset=12), 'write', Load(), lineno=518, col_offset=12), [Name('line', Load(), lineno=518, col_offset=23)], [], None, None, lineno=518, col_offset=12), lineno=518, col_offset=12)], [], lineno=517, col_offset=8)], [], lineno=515, col_offset=4)], [], lineno=254, col_offset=0), Expr(Call(Attribute(Attribute(Name('io', Load(), lineno=520, col_offset=0), 'IOBase', Load(), lineno=520, col_offset=0), 'register', Load(), lineno=520, col_offset=0), [Name('IOBase', Load(), lineno=520, col_offset=19)], [], None, None, lineno=520, col_offset=0), lineno=520, col_offset=0), ClassDef('RawIOBase', [Name('IOBase', Load(), lineno=523, col_offset=16)], [Expr(Str(u'Base class for raw binary I/O.', lineno=525, col_offset=4), lineno=525, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=537, col_offset=13), Name('n', Param(), lineno=537, col_offset=19)], None, None, [Num(-1, lineno=537, col_offset=22)]), [Expr(Str(u'Read and return up to n bytes.\n\n        Returns an empty bytes object on EOF, or None if the object is\n        set not to block and has no data to read.\n        ', lineno=542, col_offset=-1), lineno=542, col_offset=-1), If(Compare(Name('n', Load(), lineno=543, col_offset=11), [Is()], [Name('None', Load(), lineno=543, col_offset=16)], lineno=543, col_offset=11), [Assign([Name('n', Store(), lineno=544, col_offset=12)], Num(-1, lineno=544, col_offset=17), lineno=544, col_offset=12)], [], lineno=543, col_offset=8), If(Compare(Name('n', Load(), lineno=545, col_offset=11), [Lt()], [Num(0, lineno=545, col_offset=15)], lineno=545, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=546, col_offset=19), 'readall', Load(), lineno=546, col_offset=19), [], [], None, None, lineno=546, col_offset=19), lineno=546, col_offset=12)], [], lineno=545, col_offset=8), Assign([Name('b', Store(), lineno=547, col_offset=8)], Call(Name('bytearray', Load(), lineno=547, col_offset=12), [Call(Attribute(Name('n', Load(), lineno=547, col_offset=22), '__index__', Load(), lineno=547, col_offset=22), [], [], None, None, lineno=547, col_offset=22)], [], None, None, lineno=547, col_offset=12), lineno=547, col_offset=8), Assign([Name('n', Store(), lineno=548, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=548, col_offset=12), 'readinto', Load(), lineno=548, col_offset=12), [Name('b', Load(), lineno=548, col_offset=26)], [], None, None, lineno=548, col_offset=12), lineno=548, col_offset=8), If(Compare(Name('n', Load(), lineno=549, col_offset=11), [Is()], [Name('None', Load(), lineno=549, col_offset=16)], lineno=549, col_offset=11), [Return(Name('None', Load(), lineno=550, col_offset=19), lineno=550, col_offset=12)], [], lineno=549, col_offset=8), Delete([Subscript(Name('b', Load(), lineno=551, col_offset=12), Slice(Name('n', Load(), lineno=551, col_offset=14), None, None), Del(), lineno=551, col_offset=12)], lineno=551, col_offset=8), Return(Call(Name('bytes', Load(), lineno=552, col_offset=15), [Name('b', Load(), lineno=552, col_offset=21)], [], None, None, lineno=552, col_offset=15), lineno=552, col_offset=8)], [], lineno=537, col_offset=4), FunctionDef('readall', arguments([Name('self', Param(), lineno=554, col_offset=16)], None, None, []), [Expr(Str(u'Read until EOF, using multiple read() call.', lineno=555, col_offset=8), lineno=555, col_offset=8), Assign([Name('res', Store(), lineno=556, col_offset=8)], Call(Name('bytearray', Load(), lineno=556, col_offset=14), [], [], None, None, lineno=556, col_offset=14), lineno=556, col_offset=8), While(Name('True', Load(), lineno=557, col_offset=14), [Assign([Name('data', Store(), lineno=558, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=558, col_offset=19), 'read', Load(), lineno=558, col_offset=19), [Name('DEFAULT_BUFFER_SIZE', Load(), lineno=558, col_offset=29)], [], None, None, lineno=558, col_offset=19), lineno=558, col_offset=12), If(UnaryOp(Not(), Name('data', Load(), lineno=559, col_offset=19), lineno=559, col_offset=15), [Break( lineno=560, col_offset=16)], [], lineno=559, col_offset=12), AugAssign(Name('res', Store(), lineno=561, col_offset=12), Add(), Name('data', Load(), lineno=561, col_offset=19), lineno=561, col_offset=12)], [], lineno=557, col_offset=8), Return(Call(Name('bytes', Load(), lineno=562, col_offset=15), [Name('res', Load(), lineno=562, col_offset=21)], [], None, None, lineno=562, col_offset=15), lineno=562, col_offset=8)], [], lineno=554, col_offset=4), FunctionDef('readinto', arguments([Name('self', Param(), lineno=564, col_offset=17), Name('b', Param(), lineno=564, col_offset=23)], None, None, []), [Expr(Str(u'Read up to len(b) bytes into b.\n\n        Returns number of bytes read (0 for EOF), or None if the object\n        is set not to block and has no data to read.\n        ', lineno=569, col_offset=-1), lineno=569, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=570, col_offset=8), '_unsupported', Load(), lineno=570, col_offset=8), [Str(u'readinto', lineno=570, col_offset=26)], [], None, None, lineno=570, col_offset=8), lineno=570, col_offset=8)], [], lineno=564, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=572, col_offset=14), Name('b', Param(), lineno=572, col_offset=20)], None, None, []), [Expr(Str(u'Write the given buffer to the IO stream.\n\n        Returns the number of bytes written, which may be less than len(b).\n        ', lineno=576, col_offset=-1), lineno=576, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=577, col_offset=8), '_unsupported', Load(), lineno=577, col_offset=8), [Str(u'write', lineno=577, col_offset=26)], [], None, None, lineno=577, col_offset=8), lineno=577, col_offset=8)], [], lineno=572, col_offset=4)], [], lineno=523, col_offset=0), Expr(Call(Attribute(Attribute(Name('io', Load(), lineno=579, col_offset=0), 'RawIOBase', Load(), lineno=579, col_offset=0), 'register', Load(), lineno=579, col_offset=0), [Name('RawIOBase', Load(), lineno=579, col_offset=22)], [], None, None, lineno=579, col_offset=0), lineno=579, col_offset=0), ImportFrom('_io', [alias('FileIO', None)], 0, lineno=580, col_offset=0), Expr(Call(Attribute(Name('RawIOBase', Load(), lineno=581, col_offset=0), 'register', Load(), lineno=581, col_offset=0), [Name('FileIO', Load(), lineno=581, col_offset=19)], [], None, None, lineno=581, col_offset=0), lineno=581, col_offset=0), ClassDef('BufferedIOBase', [Name('IOBase', Load(), lineno=584, col_offset=21)], [Expr(Str(u'Base class for buffered IO objects.\n\n    The main difference with RawIOBase is that the read() method\n    supports omitting the size argument, and does not have a default\n    implementation that defers to readinto().\n\n    In addition, read(), readinto() and write() may raise\n    BlockingIOError if the underlying raw stream is in non-blocking\n    mode and not ready; unlike their raw counterparts, they will never\n    return None.\n\n    A typical implementation should not inherit from a RawIOBase\n    implementation, but wrap one.\n    ', lineno=599, col_offset=-1), lineno=599, col_offset=-1), FunctionDef('read', arguments([Name('self', Param(), lineno=601, col_offset=13), Name('n', Param(), lineno=601, col_offset=19)], None, None, [Name('None', Load(), lineno=601, col_offset=21)]), [Expr(Str(u"Read and return up to n bytes.\n\n        If the argument is omitted, None, or negative, reads and\n        returns all data until EOF.\n\n        If the argument is positive, and the underlying raw stream is\n        not 'interactive', multiple raw reads may be issued to satisfy\n        the byte count (unless EOF is reached first).  But for\n        interactive raw streams (XXX and for pipes?), at most one raw\n        read will be issued, and a short result does not imply that\n        EOF is imminent.\n\n        Returns an empty bytes array on EOF.\n\n        Raises BlockingIOError if the underlying raw stream has no\n        data at the moment.\n        ", lineno=618, col_offset=-1), lineno=618, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=619, col_offset=8), '_unsupported', Load(), lineno=619, col_offset=8), [Str(u'read', lineno=619, col_offset=26)], [], None, None, lineno=619, col_offset=8), lineno=619, col_offset=8)], [], lineno=601, col_offset=4), FunctionDef('read1', arguments([Name('self', Param(), lineno=621, col_offset=14), Name('n', Param(), lineno=621, col_offset=20)], None, None, [Name('None', Load(), lineno=621, col_offset=22)]), [Expr(Str(u'Read up to n bytes with at most one read() system call.', lineno=622, col_offset=8), lineno=622, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=623, col_offset=8), '_unsupported', Load(), lineno=623, col_offset=8), [Str(u'read1', lineno=623, col_offset=26)], [], None, None, lineno=623, col_offset=8), lineno=623, col_offset=8)], [], lineno=621, col_offset=4), FunctionDef('readinto', arguments([Name('self', Param(), lineno=625, col_offset=17), Name('b', Param(), lineno=625, col_offset=23)], None, None, []), [Expr(Str(u"Read up to len(b) bytes into b.\n\n        Like read(), this may issue multiple reads to the underlying raw\n        stream, unless the latter is 'interactive'.\n\n        Returns the number of bytes read (0 for EOF).\n\n        Raises BlockingIOError if the underlying raw stream has no\n        data at the moment.\n        ", lineno=635, col_offset=-1), lineno=635, col_offset=-1), Assign([Name('data', Store(), lineno=637, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=637, col_offset=15), 'read', Load(), lineno=637, col_offset=15), [Call(Name('len', Load(), lineno=637, col_offset=25), [Name('b', Load(), lineno=637, col_offset=29)], [], None, None, lineno=637, col_offset=25)], [], None, None, lineno=637, col_offset=15), lineno=637, col_offset=8), Assign([Name('n', Store(), lineno=638, col_offset=8)], Call(Name('len', Load(), lineno=638, col_offset=12), [Name('data', Load(), lineno=638, col_offset=16)], [], None, None, lineno=638, col_offset=12), lineno=638, col_offset=8), TryExcept([Assign([Subscript(Name('b', Load(), lineno=640, col_offset=12), Slice(None, Name('n', Load(), lineno=640, col_offset=15), None), Store(), lineno=640, col_offset=12)], Name('data', Load(), lineno=640, col_offset=20), lineno=640, col_offset=12)], [ExceptHandler(Name('TypeError', Load(), lineno=641, col_offset=15), Name('err', Store(), lineno=641, col_offset=28), [Import([alias('array', None)], lineno=642, col_offset=12), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=643, col_offset=19), [Name('b', Load(), lineno=643, col_offset=30), Attribute(Name('array', Load(), lineno=643, col_offset=33), 'array', Load(), lineno=643, col_offset=33)], [], None, None, lineno=643, col_offset=19), lineno=643, col_offset=15), [Raise(Name('err', Load(), lineno=644, col_offset=22), None, None, lineno=644, col_offset=16)], [], lineno=643, col_offset=12), Assign([Subscript(Name('b', Load(), lineno=645, col_offset=12), Slice(None, Name('n', Load(), lineno=645, col_offset=15), None), Store(), lineno=645, col_offset=12)], Call(Attribute(Name('array', Load(), lineno=645, col_offset=20), 'array', Load(), lineno=645, col_offset=20), [Str('b', lineno=645, col_offset=32), Name('data', Load(), lineno=645, col_offset=38)], [], None, None, lineno=645, col_offset=20), lineno=645, col_offset=12)], lineno=641, col_offset=8)], [], lineno=639, col_offset=8), Return(Name('n', Load(), lineno=646, col_offset=15), lineno=646, col_offset=8)], [], lineno=625, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=648, col_offset=14), Name('b', Param(), lineno=648, col_offset=20)], None, None, []), [Expr(Str(u'Write the given buffer to the IO stream.\n\n        Return the number of bytes written, which is never less than\n        len(b).\n\n        Raises BlockingIOError if the buffer is full and the\n        underlying raw stream cannot accept more data at the moment.\n        ', lineno=656, col_offset=-1), lineno=656, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=657, col_offset=8), '_unsupported', Load(), lineno=657, col_offset=8), [Str(u'write', lineno=657, col_offset=26)], [], None, None, lineno=657, col_offset=8), lineno=657, col_offset=8)], [], lineno=648, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=659, col_offset=15)], None, None, []), [Expr(Str(u'\n        Separate the underlying raw stream from the buffer and return it.\n\n        After the raw stream has been detached, the buffer is in an unusable\n        state.\n        ', lineno=665, col_offset=-1), lineno=665, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=666, col_offset=8), '_unsupported', Load(), lineno=666, col_offset=8), [Str(u'detach', lineno=666, col_offset=26)], [], None, None, lineno=666, col_offset=8), lineno=666, col_offset=8)], [], lineno=659, col_offset=4)], [], lineno=584, col_offset=0), Expr(Call(Attribute(Attribute(Name('io', Load(), lineno=668, col_offset=0), 'BufferedIOBase', Load(), lineno=668, col_offset=0), 'register', Load(), lineno=668, col_offset=0), [Name('BufferedIOBase', Load(), lineno=668, col_offset=27)], [], None, None, lineno=668, col_offset=0), lineno=668, col_offset=0), ClassDef('_BufferedIOMixin', [Name('BufferedIOBase', Load(), lineno=671, col_offset=23)], [Expr(Str(u'A mixin implementation of BufferedIOBase with an underlying raw stream.\n\n    This passes most requests on to the underlying raw stream.  It\n    does *not* provide implementations of read(), readinto() or\n    write().\n    ', lineno=678, col_offset=-1), lineno=678, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=680, col_offset=17), Name('raw', Param(), lineno=680, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=681, col_offset=8), 'raw', Store(), lineno=681, col_offset=8)], Name('raw', Load(), lineno=681, col_offset=19), lineno=681, col_offset=8)], [], lineno=680, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=685, col_offset=13), Name('pos', Param(), lineno=685, col_offset=19), Name('whence', Param(), lineno=685, col_offset=24)], None, None, [Num(0, lineno=685, col_offset=31)]), [Assign([Name('new_position', Store(), lineno=686, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=686, col_offset=23), 'raw', Load(), lineno=686, col_offset=23), 'seek', Load(), lineno=686, col_offset=23), [Name('pos', Load(), lineno=686, col_offset=37), Name('whence', Load(), lineno=686, col_offset=42)], [], None, None, lineno=686, col_offset=23), lineno=686, col_offset=8), If(Compare(Name('new_position', Load(), lineno=687, col_offset=11), [Lt()], [Num(0, lineno=687, col_offset=26)], lineno=687, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=688, col_offset=18), [Str(u'seek() returned an invalid position', lineno=688, col_offset=26)], [], None, None, lineno=688, col_offset=18), None, None, lineno=688, col_offset=12)], [], lineno=687, col_offset=8), Return(Name('new_position', Load(), lineno=689, col_offset=15), lineno=689, col_offset=8)], [], lineno=685, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=691, col_offset=13)], None, None, []), [Assign([Name('pos', Store(), lineno=692, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=692, col_offset=14), 'raw', Load(), lineno=692, col_offset=14), 'tell', Load(), lineno=692, col_offset=14), [], [], None, None, lineno=692, col_offset=14), lineno=692, col_offset=8), If(Compare(Name('pos', Load(), lineno=693, col_offset=11), [Lt()], [Num(0, lineno=693, col_offset=17)], lineno=693, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=694, col_offset=18), [Str(u'tell() returned an invalid position', lineno=694, col_offset=26)], [], None, None, lineno=694, col_offset=18), None, None, lineno=694, col_offset=12)], [], lineno=693, col_offset=8), Return(Name('pos', Load(), lineno=695, col_offset=15), lineno=695, col_offset=8)], [], lineno=691, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=697, col_offset=17), Name('pos', Param(), lineno=697, col_offset=23)], None, None, [Name('None', Load(), lineno=697, col_offset=27)]), [Expr(Call(Attribute(Name('self', Load(), lineno=701, col_offset=8), 'flush', Load(), lineno=701, col_offset=8), [], [], None, None, lineno=701, col_offset=8), lineno=701, col_offset=8), If(Compare(Name('pos', Load(), lineno=703, col_offset=11), [Is()], [Name('None', Load(), lineno=703, col_offset=18)], lineno=703, col_offset=11), [Assign([Name('pos', Store(), lineno=704, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=704, col_offset=18), 'tell', Load(), lineno=704, col_offset=18), [], [], None, None, lineno=704, col_offset=18), lineno=704, col_offset=12)], [], lineno=703, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=707, col_offset=15), 'raw', Load(), lineno=707, col_offset=15), 'truncate', Load(), lineno=707, col_offset=15), [Name('pos', Load(), lineno=707, col_offset=33)], [], None, None, lineno=707, col_offset=15), lineno=707, col_offset=8)], [], lineno=697, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=711, col_offset=14)], None, None, []), [If(Attribute(Name('self', Load(), lineno=712, col_offset=11), 'closed', Load(), lineno=712, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=713, col_offset=18), [Str(u'flush of closed file', lineno=713, col_offset=29)], [], None, None, lineno=713, col_offset=18), None, None, lineno=713, col_offset=12)], [], lineno=712, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=714, col_offset=8), 'raw', Load(), lineno=714, col_offset=8), 'flush', Load(), lineno=714, col_offset=8), [], [], None, None, lineno=714, col_offset=8), lineno=714, col_offset=8)], [], lineno=711, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=716, col_offset=14)], None, None, []), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=717, col_offset=11), 'raw', Load(), lineno=717, col_offset=11), [IsNot()], [Name('None', Load(), lineno=717, col_offset=27)], lineno=717, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=717, col_offset=40), 'closed', Load(), lineno=717, col_offset=40), lineno=717, col_offset=36)], lineno=717, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=718, col_offset=12), 'flush', Load(), lineno=718, col_offset=12), [], [], None, None, lineno=718, col_offset=12), lineno=718, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=719, col_offset=12), 'raw', Load(), lineno=719, col_offset=12), 'close', Load(), lineno=719, col_offset=12), [], [], None, None, lineno=719, col_offset=12), lineno=719, col_offset=12)], [], lineno=717, col_offset=8)], [], lineno=716, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=721, col_offset=15)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=722, col_offset=11), 'raw', Load(), lineno=722, col_offset=11), [Is()], [Name('None', Load(), lineno=722, col_offset=23)], lineno=722, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=723, col_offset=18), [Str(u'raw stream already detached', lineno=723, col_offset=29)], [], None, None, lineno=723, col_offset=18), None, None, lineno=723, col_offset=12)], [], lineno=722, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=724, col_offset=8), 'flush', Load(), lineno=724, col_offset=8), [], [], None, None, lineno=724, col_offset=8), lineno=724, col_offset=8), Assign([Name('raw', Store(), lineno=725, col_offset=8)], Attribute(Name('self', Load(), lineno=725, col_offset=14), 'raw', Load(), lineno=725, col_offset=14), lineno=725, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=726, col_offset=8), 'raw', Store(), lineno=726, col_offset=8)], Name('None', Load(), lineno=726, col_offset=19), lineno=726, col_offset=8), Return(Name('raw', Load(), lineno=727, col_offset=15), lineno=727, col_offset=8)], [], lineno=721, col_offset=4), FunctionDef('seekable', arguments([Name('self', Param(), lineno=731, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=732, col_offset=15), 'raw', Load(), lineno=732, col_offset=15), 'seekable', Load(), lineno=732, col_offset=15), [], [], None, None, lineno=732, col_offset=15), lineno=732, col_offset=8)], [], lineno=731, col_offset=4), FunctionDef('readable', arguments([Name('self', Param(), lineno=734, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=735, col_offset=15), 'raw', Load(), lineno=735, col_offset=15), 'readable', Load(), lineno=735, col_offset=15), [], [], None, None, lineno=735, col_offset=15), lineno=735, col_offset=8)], [], lineno=734, col_offset=4), FunctionDef('writable', arguments([Name('self', Param(), lineno=737, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=738, col_offset=15), 'raw', Load(), lineno=738, col_offset=15), 'writable', Load(), lineno=738, col_offset=15), [], [], None, None, lineno=738, col_offset=15), lineno=738, col_offset=8)], [], lineno=737, col_offset=4), FunctionDef('closed', arguments([Name('self', Param(), lineno=741, col_offset=15)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=742, col_offset=15), 'raw', Load(), lineno=742, col_offset=15), 'closed', Load(), lineno=742, col_offset=15), lineno=742, col_offset=8)], [Name('property', Load(), lineno=740, col_offset=5)], lineno=740, col_offset=4), FunctionDef('name', arguments([Name('self', Param(), lineno=745, col_offset=13)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=746, col_offset=15), 'raw', Load(), lineno=746, col_offset=15), 'name', Load(), lineno=746, col_offset=15), lineno=746, col_offset=8)], [Name('property', Load(), lineno=744, col_offset=5)], lineno=744, col_offset=4), FunctionDef('mode', arguments([Name('self', Param(), lineno=749, col_offset=13)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=750, col_offset=15), 'raw', Load(), lineno=750, col_offset=15), 'mode', Load(), lineno=750, col_offset=15), lineno=750, col_offset=8)], [Name('property', Load(), lineno=748, col_offset=5)], lineno=748, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=752, col_offset=17)], None, None, []), [Assign([Name('clsname', Store(), lineno=753, col_offset=8)], Attribute(Attribute(Name('self', Load(), lineno=753, col_offset=18), '__class__', Load(), lineno=753, col_offset=18), '__name__', Load(), lineno=753, col_offset=18), lineno=753, col_offset=8), TryExcept([Assign([Name('name', Store(), lineno=755, col_offset=12)], Attribute(Name('self', Load(), lineno=755, col_offset=19), 'name', Load(), lineno=755, col_offset=19), lineno=755, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=756, col_offset=15), None, [Return(Call(Attribute(Str(u'<_pyio.{0}>', lineno=757, col_offset=19), 'format', Load(), lineno=757, col_offset=19), [Name('clsname', Load(), lineno=757, col_offset=40)], [], None, None, lineno=757, col_offset=19), lineno=757, col_offset=12)], lineno=756, col_offset=8)], [Return(Call(Attribute(Str(u'<_pyio.{0} name={1!r}>', lineno=759, col_offset=19), 'format', Load(), lineno=759, col_offset=19), [Name('clsname', Load(), lineno=759, col_offset=51), Name('name', Load(), lineno=759, col_offset=60)], [], None, None, lineno=759, col_offset=19), lineno=759, col_offset=12)], lineno=754, col_offset=8)], [], lineno=752, col_offset=4), FunctionDef('fileno', arguments([Name('self', Param(), lineno=763, col_offset=15)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=764, col_offset=15), 'raw', Load(), lineno=764, col_offset=15), 'fileno', Load(), lineno=764, col_offset=15), [], [], None, None, lineno=764, col_offset=15), lineno=764, col_offset=8)], [], lineno=763, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=766, col_offset=15)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=767, col_offset=15), 'raw', Load(), lineno=767, col_offset=15), 'isatty', Load(), lineno=767, col_offset=15), [], [], None, None, lineno=767, col_offset=15), lineno=767, col_offset=8)], [], lineno=766, col_offset=4)], [], lineno=671, col_offset=0), ClassDef('BytesIO', [Name('BufferedIOBase', Load(), lineno=770, col_offset=14)], [Expr(Str(u'Buffered I/O implementation using an in-memory bytes buffer.', lineno=772, col_offset=4), lineno=772, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=774, col_offset=17), Name('initial_bytes', Param(), lineno=774, col_offset=23)], None, None, [Name('None', Load(), lineno=774, col_offset=37)]), [Assign([Name('buf', Store(), lineno=775, col_offset=8)], Call(Name('bytearray', Load(), lineno=775, col_offset=14), [], [], None, None, lineno=775, col_offset=14), lineno=775, col_offset=8), If(Compare(Name('initial_bytes', Load(), lineno=776, col_offset=11), [IsNot()], [Name('None', Load(), lineno=776, col_offset=32)], lineno=776, col_offset=11), [Expr(Call(Attribute(Name('buf', Load(), lineno=777, col_offset=12), 'extend', Load(), lineno=777, col_offset=12), [Name('initial_bytes', Load(), lineno=777, col_offset=23)], [], None, None, lineno=777, col_offset=12), lineno=777, col_offset=12)], [], lineno=776, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=778, col_offset=8), '_buffer', Store(), lineno=778, col_offset=8)], Name('buf', Load(), lineno=778, col_offset=23), lineno=778, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=779, col_offset=8), '_pos', Store(), lineno=779, col_offset=8)], Num(0, lineno=779, col_offset=20), lineno=779, col_offset=8)], [], lineno=774, col_offset=4), FunctionDef('__getstate__', arguments([Name('self', Param(), lineno=781, col_offset=21)], None, None, []), [If(Attribute(Name('self', Load(), lineno=782, col_offset=11), 'closed', Load(), lineno=782, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=783, col_offset=18), [Str(u'__getstate__ on closed file', lineno=783, col_offset=29)], [], None, None, lineno=783, col_offset=18), None, None, lineno=783, col_offset=12)], [], lineno=782, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=784, col_offset=15), '__dict__', Load(), lineno=784, col_offset=15), 'copy', Load(), lineno=784, col_offset=15), [], [], None, None, lineno=784, col_offset=15), lineno=784, col_offset=8)], [], lineno=781, col_offset=4), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=786, col_offset=17)], None, None, []), [Expr(Str(u'Return the bytes value (contents) of the buffer\n        ', lineno=788, col_offset=-1), lineno=788, col_offset=-1), If(Attribute(Name('self', Load(), lineno=789, col_offset=11), 'closed', Load(), lineno=789, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=790, col_offset=18), [Str(u'getvalue on closed file', lineno=790, col_offset=29)], [], None, None, lineno=790, col_offset=18), None, None, lineno=790, col_offset=12)], [], lineno=789, col_offset=8), Return(Call(Name('bytes', Load(), lineno=791, col_offset=15), [Attribute(Name('self', Load(), lineno=791, col_offset=21), '_buffer', Load(), lineno=791, col_offset=21)], [], None, None, lineno=791, col_offset=15), lineno=791, col_offset=8)], [], lineno=786, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=793, col_offset=13), Name('n', Param(), lineno=793, col_offset=19)], None, None, [Name('None', Load(), lineno=793, col_offset=21)]), [If(Attribute(Name('self', Load(), lineno=794, col_offset=11), 'closed', Load(), lineno=794, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=795, col_offset=18), [Str(u'read from closed file', lineno=795, col_offset=29)], [], None, None, lineno=795, col_offset=18), None, None, lineno=795, col_offset=12)], [], lineno=794, col_offset=8), If(Compare(Name('n', Load(), lineno=796, col_offset=11), [Is()], [Name('None', Load(), lineno=796, col_offset=16)], lineno=796, col_offset=11), [Assign([Name('n', Store(), lineno=797, col_offset=12)], Num(-1, lineno=797, col_offset=17), lineno=797, col_offset=12)], [], lineno=796, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=798, col_offset=15), [Name('n', Load(), lineno=798, col_offset=26), Tuple([Name('int', Load(), lineno=798, col_offset=30), Name('long', Load(), lineno=798, col_offset=35)], Load(), lineno=798, col_offset=30)], [], None, None, lineno=798, col_offset=15), lineno=798, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=799, col_offset=18), [Call(Attribute(Str(u'integer argument expected, got {0!r}', lineno=799, col_offset=28), 'format', Load(), lineno=799, col_offset=28), [Call(Name('type', Load(), lineno=800, col_offset=16), [Name('n', Load(), lineno=800, col_offset=21)], [], None, None, lineno=800, col_offset=16)], [], None, None, lineno=799, col_offset=28)], [], None, None, lineno=799, col_offset=18), None, None, lineno=799, col_offset=12)], [], lineno=798, col_offset=8), If(Compare(Name('n', Load(), lineno=801, col_offset=11), [Lt()], [Num(0, lineno=801, col_offset=15)], lineno=801, col_offset=11), [Assign([Name('n', Store(), lineno=802, col_offset=12)], Call(Name('len', Load(), lineno=802, col_offset=16), [Attribute(Name('self', Load(), lineno=802, col_offset=20), '_buffer', Load(), lineno=802, col_offset=20)], [], None, None, lineno=802, col_offset=16), lineno=802, col_offset=12)], [], lineno=801, col_offset=8), If(Compare(Call(Name('len', Load(), lineno=803, col_offset=11), [Attribute(Name('self', Load(), lineno=803, col_offset=15), '_buffer', Load(), lineno=803, col_offset=15)], [], None, None, lineno=803, col_offset=11), [LtE()], [Attribute(Name('self', Load(), lineno=803, col_offset=32), '_pos', Load(), lineno=803, col_offset=32)], lineno=803, col_offset=11), [Return(Str('', lineno=804, col_offset=19), lineno=804, col_offset=12)], [], lineno=803, col_offset=8), Assign([Name('newpos', Store(), lineno=805, col_offset=8)], Call(Name('min', Load(), lineno=805, col_offset=17), [Call(Name('len', Load(), lineno=805, col_offset=21), [Attribute(Name('self', Load(), lineno=805, col_offset=25), '_buffer', Load(), lineno=805, col_offset=25)], [], None, None, lineno=805, col_offset=21), BinOp(Attribute(Name('self', Load(), lineno=805, col_offset=40), '_pos', Load(), lineno=805, col_offset=40), Add(), Name('n', Load(), lineno=805, col_offset=52), lineno=805, col_offset=40)], [], None, None, lineno=805, col_offset=17), lineno=805, col_offset=8), Assign([Name('b', Store(), lineno=806, col_offset=8)], Subscript(Attribute(Name('self', Load(), lineno=806, col_offset=12), '_buffer', Load(), lineno=806, col_offset=12), Slice(Attribute(Name('self', Load(), lineno=806, col_offset=25), '_pos', Load(), lineno=806, col_offset=25), Name('newpos', Load(), lineno=806, col_offset=37), None), Load(), lineno=806, col_offset=12), lineno=806, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=807, col_offset=8), '_pos', Store(), lineno=807, col_offset=8)], Name('newpos', Load(), lineno=807, col_offset=20), lineno=807, col_offset=8), Return(Call(Name('bytes', Load(), lineno=808, col_offset=15), [Name('b', Load(), lineno=808, col_offset=21)], [], None, None, lineno=808, col_offset=15), lineno=808, col_offset=8)], [], lineno=793, col_offset=4), FunctionDef('read1', arguments([Name('self', Param(), lineno=810, col_offset=14), Name('n', Param(), lineno=810, col_offset=20)], None, None, []), [Expr(Str(u'This is the same as read.\n        ', lineno=812, col_offset=-1), lineno=812, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=813, col_offset=15), 'read', Load(), lineno=813, col_offset=15), [Name('n', Load(), lineno=813, col_offset=25)], [], None, None, lineno=813, col_offset=15), lineno=813, col_offset=8)], [], lineno=810, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=815, col_offset=14), Name('b', Param(), lineno=815, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=816, col_offset=11), 'closed', Load(), lineno=816, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=817, col_offset=18), [Str(u'write to closed file', lineno=817, col_offset=29)], [], None, None, lineno=817, col_offset=18), None, None, lineno=817, col_offset=12)], [], lineno=816, col_offset=8), If(Call(Name('isinstance', Load(), lineno=818, col_offset=11), [Name('b', Load(), lineno=818, col_offset=22), Name('unicode', Load(), lineno=818, col_offset=25)], [], None, None, lineno=818, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=819, col_offset=18), [Str(u"can't write unicode to binary stream", lineno=819, col_offset=28)], [], None, None, lineno=819, col_offset=18), None, None, lineno=819, col_offset=12)], [], lineno=818, col_offset=8), Assign([Name('n', Store(), lineno=820, col_offset=8)], Call(Name('len', Load(), lineno=820, col_offset=12), [Name('b', Load(), lineno=820, col_offset=16)], [], None, None, lineno=820, col_offset=12), lineno=820, col_offset=8), If(Compare(Name('n', Load(), lineno=821, col_offset=11), [Eq()], [Num(0, lineno=821, col_offset=16)], lineno=821, col_offset=11), [Return(Num(0, lineno=822, col_offset=19), lineno=822, col_offset=12)], [], lineno=821, col_offset=8), Assign([Name('pos', Store(), lineno=823, col_offset=8)], Attribute(Name('self', Load(), lineno=823, col_offset=14), '_pos', Load(), lineno=823, col_offset=14), lineno=823, col_offset=8), If(Compare(Name('pos', Load(), lineno=824, col_offset=11), [Gt()], [Call(Name('len', Load(), lineno=824, col_offset=17), [Attribute(Name('self', Load(), lineno=824, col_offset=21), '_buffer', Load(), lineno=824, col_offset=21)], [], None, None, lineno=824, col_offset=17)], lineno=824, col_offset=11), [Assign([Name('padding', Store(), lineno=827, col_offset=12)], BinOp(Str('\x00', lineno=827, col_offset=22), Mult(), BinOp(Name('pos', Load(), lineno=827, col_offset=33), Sub(), Call(Name('len', Load(), lineno=827, col_offset=39), [Attribute(Name('self', Load(), lineno=827, col_offset=43), '_buffer', Load(), lineno=827, col_offset=43)], [], None, None, lineno=827, col_offset=39), lineno=827, col_offset=33), lineno=827, col_offset=22), lineno=827, col_offset=12), AugAssign(Attribute(Name('self', Load(), lineno=828, col_offset=12), '_buffer', Store(), lineno=828, col_offset=12), Add(), Name('padding', Load(), lineno=828, col_offset=28), lineno=828, col_offset=12)], [], lineno=824, col_offset=8), Assign([Subscript(Attribute(Name('self', Load(), lineno=829, col_offset=8), '_buffer', Load(), lineno=829, col_offset=8), Slice(Name('pos', Load(), lineno=829, col_offset=21), BinOp(Name('pos', Load(), lineno=829, col_offset=25), Add(), Name('n', Load(), lineno=829, col_offset=31), lineno=829, col_offset=25), None), Store(), lineno=829, col_offset=8)], Name('b', Load(), lineno=829, col_offset=36), lineno=829, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=830, col_offset=8), '_pos', Store(), lineno=830, col_offset=8), Add(), Name('n', Load(), lineno=830, col_offset=21), lineno=830, col_offset=8), Return(Name('n', Load(), lineno=831, col_offset=15), lineno=831, col_offset=8)], [], lineno=815, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=833, col_offset=13), Name('pos', Param(), lineno=833, col_offset=19), Name('whence', Param(), lineno=833, col_offset=24)], None, None, [Num(0, lineno=833, col_offset=31)]), [If(Attribute(Name('self', Load(), lineno=834, col_offset=11), 'closed', Load(), lineno=834, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=835, col_offset=18), [Str(u'seek on closed file', lineno=835, col_offset=29)], [], None, None, lineno=835, col_offset=18), None, None, lineno=835, col_offset=12)], [], lineno=834, col_offset=8), TryExcept([Expr(Attribute(Name('pos', Load(), lineno=837, col_offset=12), '__index__', Load(), lineno=837, col_offset=12), lineno=837, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=838, col_offset=15), None, [Raise(Call(Name('TypeError', Load(), lineno=839, col_offset=18), [Str(u'an integer is required', lineno=839, col_offset=28)], [], None, None, lineno=839, col_offset=18), None, None, lineno=839, col_offset=12)], lineno=838, col_offset=8)], [], lineno=836, col_offset=8), If(Compare(Name('whence', Load(), lineno=840, col_offset=11), [Eq()], [Num(0, lineno=840, col_offset=21)], lineno=840, col_offset=11), [If(Compare(Name('pos', Load(), lineno=841, col_offset=15), [Lt()], [Num(0, lineno=841, col_offset=21)], lineno=841, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=842, col_offset=22), [BinOp(Str(u'negative seek position %r', lineno=842, col_offset=33), Mod(), Tuple([Name('pos', Load(), lineno=842, col_offset=64)], Load(), lineno=842, col_offset=64), lineno=842, col_offset=33)], [], None, None, lineno=842, col_offset=22), None, None, lineno=842, col_offset=16)], [], lineno=841, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=843, col_offset=12), '_pos', Store(), lineno=843, col_offset=12)], Name('pos', Load(), lineno=843, col_offset=24), lineno=843, col_offset=12)], [If(Compare(Name('whence', Load(), lineno=844, col_offset=13), [Eq()], [Num(1, lineno=844, col_offset=23)], lineno=844, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=845, col_offset=12), '_pos', Store(), lineno=845, col_offset=12)], Call(Name('max', Load(), lineno=845, col_offset=24), [Num(0, lineno=845, col_offset=28), BinOp(Attribute(Name('self', Load(), lineno=845, col_offset=31), '_pos', Load(), lineno=845, col_offset=31), Add(), Name('pos', Load(), lineno=845, col_offset=43), lineno=845, col_offset=31)], [], None, None, lineno=845, col_offset=24), lineno=845, col_offset=12)], [If(Compare(Name('whence', Load(), lineno=846, col_offset=13), [Eq()], [Num(2, lineno=846, col_offset=23)], lineno=846, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=847, col_offset=12), '_pos', Store(), lineno=847, col_offset=12)], Call(Name('max', Load(), lineno=847, col_offset=24), [Num(0, lineno=847, col_offset=28), BinOp(Call(Name('len', Load(), lineno=847, col_offset=31), [Attribute(Name('self', Load(), lineno=847, col_offset=35), '_buffer', Load(), lineno=847, col_offset=35)], [], None, None, lineno=847, col_offset=31), Add(), Name('pos', Load(), lineno=847, col_offset=51), lineno=847, col_offset=31)], [], None, None, lineno=847, col_offset=24), lineno=847, col_offset=12)], [Raise(Call(Name('ValueError', Load(), lineno=849, col_offset=18), [Str(u'invalid whence value', lineno=849, col_offset=29)], [], None, None, lineno=849, col_offset=18), None, None, lineno=849, col_offset=12)], lineno=846, col_offset=13)], lineno=844, col_offset=13)], lineno=840, col_offset=8), Return(Attribute(Name('self', Load(), lineno=850, col_offset=15), '_pos', Load(), lineno=850, col_offset=15), lineno=850, col_offset=8)], [], lineno=833, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=852, col_offset=13)], None, None, []), [If(Attribute(Name('self', Load(), lineno=853, col_offset=11), 'closed', Load(), lineno=853, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=854, col_offset=18), [Str(u'tell on closed file', lineno=854, col_offset=29)], [], None, None, lineno=854, col_offset=18), None, None, lineno=854, col_offset=12)], [], lineno=853, col_offset=8), Return(Attribute(Name('self', Load(), lineno=855, col_offset=15), '_pos', Load(), lineno=855, col_offset=15), lineno=855, col_offset=8)], [], lineno=852, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=857, col_offset=17), Name('pos', Param(), lineno=857, col_offset=23)], None, None, [Name('None', Load(), lineno=857, col_offset=27)]), [If(Attribute(Name('self', Load(), lineno=858, col_offset=11), 'closed', Load(), lineno=858, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=859, col_offset=18), [Str(u'truncate on closed file', lineno=859, col_offset=29)], [], None, None, lineno=859, col_offset=18), None, None, lineno=859, col_offset=12)], [], lineno=858, col_offset=8), If(Compare(Name('pos', Load(), lineno=860, col_offset=11), [Is()], [Name('None', Load(), lineno=860, col_offset=18)], lineno=860, col_offset=11), [Assign([Name('pos', Store(), lineno=861, col_offset=12)], Attribute(Name('self', Load(), lineno=861, col_offset=18), '_pos', Load(), lineno=861, col_offset=18), lineno=861, col_offset=12)], [TryExcept([Expr(Attribute(Name('pos', Load(), lineno=864, col_offset=16), '__index__', Load(), lineno=864, col_offset=16), lineno=864, col_offset=16)], [ExceptHandler(Name('AttributeError', Load(), lineno=865, col_offset=19), None, [Raise(Call(Name('TypeError', Load(), lineno=866, col_offset=22), [Str(u'an integer is required', lineno=866, col_offset=32)], [], None, None, lineno=866, col_offset=22), None, None, lineno=866, col_offset=16)], lineno=865, col_offset=12)], [], lineno=863, col_offset=12), If(Compare(Name('pos', Load(), lineno=867, col_offset=15), [Lt()], [Num(0, lineno=867, col_offset=21)], lineno=867, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=868, col_offset=22), [BinOp(Str(u'negative truncate position %r', lineno=868, col_offset=33), Mod(), Tuple([Name('pos', Load(), lineno=868, col_offset=68)], Load(), lineno=868, col_offset=68), lineno=868, col_offset=33)], [], None, None, lineno=868, col_offset=22), None, None, lineno=868, col_offset=16)], [], lineno=867, col_offset=12)], lineno=860, col_offset=8), Delete([Subscript(Attribute(Name('self', Load(), lineno=869, col_offset=12), '_buffer', Load(), lineno=869, col_offset=12), Slice(Name('pos', Load(), lineno=869, col_offset=25), None, None), Del(), lineno=869, col_offset=12)], lineno=869, col_offset=8), Return(Name('pos', Load(), lineno=870, col_offset=15), lineno=870, col_offset=8)], [], lineno=857, col_offset=4), FunctionDef('readable', arguments([Name('self', Param(), lineno=872, col_offset=17)], None, None, []), [Return(Name('True', Load(), lineno=873, col_offset=15), lineno=873, col_offset=8)], [], lineno=872, col_offset=4), FunctionDef('writable', arguments([Name('self', Param(), lineno=875, col_offset=17)], None, None, []), [Return(Name('True', Load(), lineno=876, col_offset=15), lineno=876, col_offset=8)], [], lineno=875, col_offset=4), FunctionDef('seekable', arguments([Name('self', Param(), lineno=878, col_offset=17)], None, None, []), [Return(Name('True', Load(), lineno=879, col_offset=15), lineno=879, col_offset=8)], [], lineno=878, col_offset=4)], [], lineno=770, col_offset=0), ClassDef('BufferedReader', [Name('_BufferedIOMixin', Load(), lineno=882, col_offset=21)], [Expr(Str(u'BufferedReader(raw[, buffer_size])\n\n    A buffer for a readable, sequential BaseRawIO object.\n\n    The constructor creates a BufferedReader for the given readable raw\n    stream and buffer_size. If buffer_size is omitted, DEFAULT_BUFFER_SIZE\n    is used.\n    ', lineno=891, col_offset=-1), lineno=891, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=893, col_offset=17), Name('raw', Param(), lineno=893, col_offset=23), Name('buffer_size', Param(), lineno=893, col_offset=28)], None, None, [Name('DEFAULT_BUFFER_SIZE', Load(), lineno=893, col_offset=40)]), [Expr(Str(u'Create a new buffered reader using the given readable raw IO object.\n        ', lineno=895, col_offset=-1), lineno=895, col_offset=-1), If(UnaryOp(Not(), Call(Attribute(Name('raw', Load(), lineno=896, col_offset=15), 'readable', Load(), lineno=896, col_offset=15), [], [], None, None, lineno=896, col_offset=15), lineno=896, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=897, col_offset=18), [Str(u'"raw" argument must be readable.', lineno=897, col_offset=26)], [], None, None, lineno=897, col_offset=18), None, None, lineno=897, col_offset=12)], [], lineno=896, col_offset=8), Expr(Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=899, col_offset=8), '__init__', Load(), lineno=899, col_offset=8), [Name('self', Load(), lineno=899, col_offset=34), Name('raw', Load(), lineno=899, col_offset=40)], [], None, None, lineno=899, col_offset=8), lineno=899, col_offset=8), If(Compare(Name('buffer_size', Load(), lineno=900, col_offset=11), [LtE()], [Num(0, lineno=900, col_offset=26)], lineno=900, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=901, col_offset=18), [Str(u'invalid buffer size', lineno=901, col_offset=29)], [], None, None, lineno=901, col_offset=18), None, None, lineno=901, col_offset=12)], [], lineno=900, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=902, col_offset=8), 'buffer_size', Store(), lineno=902, col_offset=8)], Name('buffer_size', Load(), lineno=902, col_offset=27), lineno=902, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=903, col_offset=8), '_reset_read_buf', Load(), lineno=903, col_offset=8), [], [], None, None, lineno=903, col_offset=8), lineno=903, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=904, col_offset=8), '_read_lock', Store(), lineno=904, col_offset=8)], Call(Name('Lock', Load(), lineno=904, col_offset=26), [], [], None, None, lineno=904, col_offset=26), lineno=904, col_offset=8)], [], lineno=893, col_offset=4), FunctionDef('_reset_read_buf', arguments([Name('self', Param(), lineno=906, col_offset=24)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=907, col_offset=8), '_read_buf', Store(), lineno=907, col_offset=8)], Str('', lineno=907, col_offset=25), lineno=907, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=908, col_offset=8), '_read_pos', Store(), lineno=908, col_offset=8)], Num(0, lineno=908, col_offset=25), lineno=908, col_offset=8)], [], lineno=906, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=910, col_offset=13), Name('n', Param(), lineno=910, col_offset=19)], None, None, [Name('None', Load(), lineno=910, col_offset=21)]), [Expr(Str(u'Read n bytes.\n\n        Returns exactly n bytes of data unless the underlying raw IO\n        stream reaches EOF or if the call would block in non-blocking\n        mode. If n is negative, read until EOF or until read() would\n        block.\n        ', lineno=917, col_offset=-1), lineno=917, col_offset=-1), If(BoolOp(And(), [Compare(Name('n', Load(), lineno=918, col_offset=11), [IsNot()], [Name('None', Load(), lineno=918, col_offset=20)], lineno=918, col_offset=11), Compare(Name('n', Load(), lineno=918, col_offset=29), [Lt()], [Num(-1, lineno=918, col_offset=34)], lineno=918, col_offset=29)], lineno=918, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=919, col_offset=18), [Str(u'invalid number of bytes to read', lineno=919, col_offset=29)], [], None, None, lineno=919, col_offset=18), None, None, lineno=919, col_offset=12)], [], lineno=918, col_offset=8), With(Attribute(Name('self', Load(), lineno=920, col_offset=13), '_read_lock', Load(), lineno=920, col_offset=13), None, [Return(Call(Attribute(Name('self', Load(), lineno=921, col_offset=19), '_read_unlocked', Load(), lineno=921, col_offset=19), [Name('n', Load(), lineno=921, col_offset=39)], [], None, None, lineno=921, col_offset=19), lineno=921, col_offset=12)], lineno=920, col_offset=13)], [], lineno=910, col_offset=4), FunctionDef('_read_unlocked', arguments([Name('self', Param(), lineno=923, col_offset=23), Name('n', Param(), lineno=923, col_offset=29)], None, None, [Name('None', Load(), lineno=923, col_offset=31)]), [Assign([Name('nodata_val', Store(), lineno=924, col_offset=8)], Str('', lineno=924, col_offset=21), lineno=924, col_offset=8), Assign([Name('empty_values', Store(), lineno=925, col_offset=8)], Tuple([Str('', lineno=925, col_offset=24), Name('None', Load(), lineno=925, col_offset=29)], Load(), lineno=925, col_offset=24), lineno=925, col_offset=8), Assign([Name('buf', Store(), lineno=926, col_offset=8)], Attribute(Name('self', Load(), lineno=926, col_offset=14), '_read_buf', Load(), lineno=926, col_offset=14), lineno=926, col_offset=8), Assign([Name('pos', Store(), lineno=927, col_offset=8)], Attribute(Name('self', Load(), lineno=927, col_offset=14), '_read_pos', Load(), lineno=927, col_offset=14), lineno=927, col_offset=8), If(BoolOp(Or(), [Compare(Name('n', Load(), lineno=930, col_offset=11), [Is()], [Name('None', Load(), lineno=930, col_offset=16)], lineno=930, col_offset=11), Compare(Name('n', Load(), lineno=930, col_offset=24), [Eq()], [Num(-1, lineno=930, col_offset=30)], lineno=930, col_offset=24)], lineno=930, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=931, col_offset=12), '_reset_read_buf', Load(), lineno=931, col_offset=12), [], [], None, None, lineno=931, col_offset=12), lineno=931, col_offset=12), Assign([Name('chunks', Store(), lineno=932, col_offset=12)], List([Subscript(Name('buf', Load(), lineno=932, col_offset=22), Slice(Name('pos', Load(), lineno=932, col_offset=26), None, None), Load(), lineno=932, col_offset=22)], Load(), lineno=932, col_offset=21), lineno=932, col_offset=12), Assign([Name('current_size', Store(), lineno=933, col_offset=12)], Num(0, lineno=933, col_offset=27), lineno=933, col_offset=12), While(Name('True', Load(), lineno=934, col_offset=18), [Assign([Name('chunk', Store(), lineno=936, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=936, col_offset=24), 'raw', Load(), lineno=936, col_offset=24), 'read', Load(), lineno=936, col_offset=24), [], [], None, None, lineno=936, col_offset=24), lineno=936, col_offset=16), If(Compare(Name('chunk', Load(), lineno=937, col_offset=19), [In()], [Name('empty_values', Load(), lineno=937, col_offset=28)], lineno=937, col_offset=19), [Assign([Name('nodata_val', Store(), lineno=938, col_offset=20)], Name('chunk', Load(), lineno=938, col_offset=33), lineno=938, col_offset=20), Break( lineno=939, col_offset=20)], [], lineno=937, col_offset=16), AugAssign(Name('current_size', Store(), lineno=940, col_offset=16), Add(), Call(Name('len', Load(), lineno=940, col_offset=32), [Name('chunk', Load(), lineno=940, col_offset=36)], [], None, None, lineno=940, col_offset=32), lineno=940, col_offset=16), Expr(Call(Attribute(Name('chunks', Load(), lineno=941, col_offset=16), 'append', Load(), lineno=941, col_offset=16), [Name('chunk', Load(), lineno=941, col_offset=30)], [], None, None, lineno=941, col_offset=16), lineno=941, col_offset=16)], [], lineno=934, col_offset=12), Return(BoolOp(Or(), [Call(Attribute(Str('', lineno=942, col_offset=19), 'join', Load(), lineno=942, col_offset=19), [Name('chunks', Load(), lineno=942, col_offset=28)], [], None, None, lineno=942, col_offset=19), Name('nodata_val', Load(), lineno=942, col_offset=39)], lineno=942, col_offset=19), lineno=942, col_offset=12)], [], lineno=930, col_offset=8), Assign([Name('avail', Store(), lineno=945, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=945, col_offset=16), [Name('buf', Load(), lineno=945, col_offset=20)], [], None, None, lineno=945, col_offset=16), Sub(), Name('pos', Load(), lineno=945, col_offset=27), lineno=945, col_offset=16), lineno=945, col_offset=8), If(Compare(Name('n', Load(), lineno=946, col_offset=11), [LtE()], [Name('avail', Load(), lineno=946, col_offset=16)], lineno=946, col_offset=11), [AugAssign(Attribute(Name('self', Load(), lineno=948, col_offset=12), '_read_pos', Store(), lineno=948, col_offset=12), Add(), Name('n', Load(), lineno=948, col_offset=30), lineno=948, col_offset=12), Return(Subscript(Name('buf', Load(), lineno=949, col_offset=19), Slice(Name('pos', Load(), lineno=949, col_offset=23), BinOp(Name('pos', Load(), lineno=949, col_offset=27), Add(), Name('n', Load(), lineno=949, col_offset=31), lineno=949, col_offset=27), None), Load(), lineno=949, col_offset=19), lineno=949, col_offset=12)], [], lineno=946, col_offset=8), Assign([Name('chunks', Store(), lineno=952, col_offset=8)], List([Subscript(Name('buf', Load(), lineno=952, col_offset=18), Slice(Name('pos', Load(), lineno=952, col_offset=22), None, None), Load(), lineno=952, col_offset=18)], Load(), lineno=952, col_offset=17), lineno=952, col_offset=8), Assign([Name('wanted', Store(), lineno=953, col_offset=8)], Call(Name('max', Load(), lineno=953, col_offset=17), [Attribute(Name('self', Load(), lineno=953, col_offset=21), 'buffer_size', Load(), lineno=953, col_offset=21), Name('n', Load(), lineno=953, col_offset=39)], [], None, None, lineno=953, col_offset=17), lineno=953, col_offset=8), While(Compare(Name('avail', Load(), lineno=954, col_offset=14), [Lt()], [Name('n', Load(), lineno=954, col_offset=22)], lineno=954, col_offset=14), [Assign([Name('chunk', Store(), lineno=955, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=955, col_offset=20), 'raw', Load(), lineno=955, col_offset=20), 'read', Load(), lineno=955, col_offset=20), [Name('wanted', Load(), lineno=955, col_offset=34)], [], None, None, lineno=955, col_offset=20), lineno=955, col_offset=12), If(Compare(Name('chunk', Load(), lineno=956, col_offset=15), [In()], [Name('empty_values', Load(), lineno=956, col_offset=24)], lineno=956, col_offset=15), [Assign([Name('nodata_val', Store(), lineno=957, col_offset=16)], Name('chunk', Load(), lineno=957, col_offset=29), lineno=957, col_offset=16), Break( lineno=958, col_offset=16)], [], lineno=956, col_offset=12), AugAssign(Name('avail', Store(), lineno=959, col_offset=12), Add(), Call(Name('len', Load(), lineno=959, col_offset=21), [Name('chunk', Load(), lineno=959, col_offset=25)], [], None, None, lineno=959, col_offset=21), lineno=959, col_offset=12), Expr(Call(Attribute(Name('chunks', Load(), lineno=960, col_offset=12), 'append', Load(), lineno=960, col_offset=12), [Name('chunk', Load(), lineno=960, col_offset=26)], [], None, None, lineno=960, col_offset=12), lineno=960, col_offset=12)], [], lineno=954, col_offset=8), Assign([Name('n', Store(), lineno=963, col_offset=8)], Call(Name('min', Load(), lineno=963, col_offset=12), [Name('n', Load(), lineno=963, col_offset=16), Name('avail', Load(), lineno=963, col_offset=19)], [], None, None, lineno=963, col_offset=12), lineno=963, col_offset=8), Assign([Name('out', Store(), lineno=964, col_offset=8)], Call(Attribute(Str('', lineno=964, col_offset=14), 'join', Load(), lineno=964, col_offset=14), [Name('chunks', Load(), lineno=964, col_offset=23)], [], None, None, lineno=964, col_offset=14), lineno=964, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=965, col_offset=8), '_read_buf', Store(), lineno=965, col_offset=8)], Subscript(Name('out', Load(), lineno=965, col_offset=25), Slice(Name('n', Load(), lineno=965, col_offset=29), None, None), Load(), lineno=965, col_offset=25), lineno=965, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=966, col_offset=8), '_read_pos', Store(), lineno=966, col_offset=8)], Num(0, lineno=966, col_offset=25), lineno=966, col_offset=8), Return(IfExp(Name('out', Load(), lineno=967, col_offset=26), Subscript(Name('out', Load(), lineno=967, col_offset=15), Slice(None, Name('n', Load(), lineno=967, col_offset=20), None), Load(), lineno=967, col_offset=15), Name('nodata_val', Load(), lineno=967, col_offset=35), lineno=967, col_offset=15), lineno=967, col_offset=8)], [], lineno=923, col_offset=4), FunctionDef('peek', arguments([Name('self', Param(), lineno=969, col_offset=13), Name('n', Param(), lineno=969, col_offset=19)], None, None, [Num(0, lineno=969, col_offset=21)]), [Expr(Str(u'Returns buffered bytes without advancing the position.\n\n        The argument indicates a desired minimal number of bytes; we\n        do at most one raw read to satisfy it.  We never return more\n        than self.buffer_size.\n        ', lineno=975, col_offset=-1), lineno=975, col_offset=-1), With(Attribute(Name('self', Load(), lineno=976, col_offset=13), '_read_lock', Load(), lineno=976, col_offset=13), None, [Return(Call(Attribute(Name('self', Load(), lineno=977, col_offset=19), '_peek_unlocked', Load(), lineno=977, col_offset=19), [Name('n', Load(), lineno=977, col_offset=39)], [], None, None, lineno=977, col_offset=19), lineno=977, col_offset=12)], lineno=976, col_offset=13)], [], lineno=969, col_offset=4), FunctionDef('_peek_unlocked', arguments([Name('self', Param(), lineno=979, col_offset=23), Name('n', Param(), lineno=979, col_offset=29)], None, None, [Num(0, lineno=979, col_offset=31)]), [Assign([Name('want', Store(), lineno=980, col_offset=8)], Call(Name('min', Load(), lineno=980, col_offset=15), [Name('n', Load(), lineno=980, col_offset=19), Attribute(Name('self', Load(), lineno=980, col_offset=22), 'buffer_size', Load(), lineno=980, col_offset=22)], [], None, None, lineno=980, col_offset=15), lineno=980, col_offset=8), Assign([Name('have', Store(), lineno=981, col_offset=8)], BinOp(Call(Name('len', Load(), lineno=981, col_offset=15), [Attribute(Name('self', Load(), lineno=981, col_offset=19), '_read_buf', Load(), lineno=981, col_offset=19)], [], None, None, lineno=981, col_offset=15), Sub(), Attribute(Name('self', Load(), lineno=981, col_offset=37), '_read_pos', Load(), lineno=981, col_offset=37), lineno=981, col_offset=15), lineno=981, col_offset=8), If(BoolOp(Or(), [Compare(Name('have', Load(), lineno=982, col_offset=11), [Lt()], [Name('want', Load(), lineno=982, col_offset=18)], lineno=982, col_offset=11), Compare(Name('have', Load(), lineno=982, col_offset=26), [LtE()], [Num(0, lineno=982, col_offset=34)], lineno=982, col_offset=26)], lineno=982, col_offset=11), [Assign([Name('to_read', Store(), lineno=983, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=983, col_offset=22), 'buffer_size', Load(), lineno=983, col_offset=22), Sub(), Name('have', Load(), lineno=983, col_offset=41), lineno=983, col_offset=22), lineno=983, col_offset=12), Assign([Name('current', Store(), lineno=984, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=984, col_offset=22), 'raw', Load(), lineno=984, col_offset=22), 'read', Load(), lineno=984, col_offset=22), [Name('to_read', Load(), lineno=984, col_offset=36)], [], None, None, lineno=984, col_offset=22), lineno=984, col_offset=12), If(Name('current', Load(), lineno=985, col_offset=15), [Assign([Attribute(Name('self', Load(), lineno=986, col_offset=16), '_read_buf', Store(), lineno=986, col_offset=16)], BinOp(Subscript(Attribute(Name('self', Load(), lineno=986, col_offset=33), '_read_buf', Load(), lineno=986, col_offset=33), Slice(Attribute(Name('self', Load(), lineno=986, col_offset=48), '_read_pos', Load(), lineno=986, col_offset=48), None, None), Load(), lineno=986, col_offset=33), Add(), Name('current', Load(), lineno=986, col_offset=67), lineno=986, col_offset=33), lineno=986, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=987, col_offset=16), '_read_pos', Store(), lineno=987, col_offset=16)], Num(0, lineno=987, col_offset=33), lineno=987, col_offset=16)], [], lineno=985, col_offset=12)], [], lineno=982, col_offset=8), Return(Subscript(Attribute(Name('self', Load(), lineno=988, col_offset=15), '_read_buf', Load(), lineno=988, col_offset=15), Slice(Attribute(Name('self', Load(), lineno=988, col_offset=30), '_read_pos', Load(), lineno=988, col_offset=30), None, None), Load(), lineno=988, col_offset=15), lineno=988, col_offset=8)], [], lineno=979, col_offset=4), FunctionDef('read1', arguments([Name('self', Param(), lineno=990, col_offset=14), Name('n', Param(), lineno=990, col_offset=20)], None, None, []), [Expr(Str(u'Reads up to n bytes, with at most one read() system call.', lineno=991, col_offset=8), lineno=991, col_offset=8), If(Compare(Name('n', Load(), lineno=994, col_offset=11), [Lt()], [Num(0, lineno=994, col_offset=15)], lineno=994, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=995, col_offset=18), [Str(u'number of bytes to read must be positive', lineno=995, col_offset=29)], [], None, None, lineno=995, col_offset=18), None, None, lineno=995, col_offset=12)], [], lineno=994, col_offset=8), If(Compare(Name('n', Load(), lineno=996, col_offset=11), [Eq()], [Num(0, lineno=996, col_offset=16)], lineno=996, col_offset=11), [Return(Str('', lineno=997, col_offset=19), lineno=997, col_offset=12)], [], lineno=996, col_offset=8), With(Attribute(Name('self', Load(), lineno=998, col_offset=13), '_read_lock', Load(), lineno=998, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=999, col_offset=12), '_peek_unlocked', Load(), lineno=999, col_offset=12), [Num(1, lineno=999, col_offset=32)], [], None, None, lineno=999, col_offset=12), lineno=999, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=1000, col_offset=19), '_read_unlocked', Load(), lineno=1000, col_offset=19), [Call(Name('min', Load(), lineno=1001, col_offset=16), [Name('n', Load(), lineno=1001, col_offset=20), BinOp(Call(Name('len', Load(), lineno=1001, col_offset=23), [Attribute(Name('self', Load(), lineno=1001, col_offset=27), '_read_buf', Load(), lineno=1001, col_offset=27)], [], None, None, lineno=1001, col_offset=23), Sub(), Attribute(Name('self', Load(), lineno=1001, col_offset=45), '_read_pos', Load(), lineno=1001, col_offset=45), lineno=1001, col_offset=23)], [], None, None, lineno=1001, col_offset=16)], [], None, None, lineno=1000, col_offset=19), lineno=1000, col_offset=12)], lineno=998, col_offset=13)], [], lineno=990, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=1003, col_offset=13)], None, None, []), [Return(BinOp(BinOp(Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=1004, col_offset=15), 'tell', Load(), lineno=1004, col_offset=15), [Name('self', Load(), lineno=1004, col_offset=37)], [], None, None, lineno=1004, col_offset=15), Sub(), Call(Name('len', Load(), lineno=1004, col_offset=45), [Attribute(Name('self', Load(), lineno=1004, col_offset=49), '_read_buf', Load(), lineno=1004, col_offset=49)], [], None, None, lineno=1004, col_offset=45), lineno=1004, col_offset=15), Add(), Attribute(Name('self', Load(), lineno=1004, col_offset=67), '_read_pos', Load(), lineno=1004, col_offset=67), lineno=1004, col_offset=65), lineno=1004, col_offset=8)], [], lineno=1003, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=1006, col_offset=13), Name('pos', Param(), lineno=1006, col_offset=19), Name('whence', Param(), lineno=1006, col_offset=24)], None, None, [Num(0, lineno=1006, col_offset=31)]), [If(UnaryOp(Not(), Compare(Num(0, lineno=1007, col_offset=16), [LtE(), LtE()], [Name('whence', Load(), lineno=1007, col_offset=21), Num(2, lineno=1007, col_offset=31)], lineno=1007, col_offset=16), lineno=1007, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1008, col_offset=18), [Str(u'invalid whence value', lineno=1008, col_offset=29)], [], None, None, lineno=1008, col_offset=18), None, None, lineno=1008, col_offset=12)], [], lineno=1007, col_offset=8), With(Attribute(Name('self', Load(), lineno=1009, col_offset=13), '_read_lock', Load(), lineno=1009, col_offset=13), None, [If(Compare(Name('whence', Load(), lineno=1010, col_offset=15), [Eq()], [Num(1, lineno=1010, col_offset=25)], lineno=1010, col_offset=15), [AugAssign(Name('pos', Store(), lineno=1011, col_offset=16), Sub(), BinOp(Call(Name('len', Load(), lineno=1011, col_offset=23), [Attribute(Name('self', Load(), lineno=1011, col_offset=27), '_read_buf', Load(), lineno=1011, col_offset=27)], [], None, None, lineno=1011, col_offset=23), Sub(), Attribute(Name('self', Load(), lineno=1011, col_offset=45), '_read_pos', Load(), lineno=1011, col_offset=45), lineno=1011, col_offset=23), lineno=1011, col_offset=16)], [], lineno=1010, col_offset=12), Assign([Name('pos', Store(), lineno=1012, col_offset=12)], Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=1012, col_offset=18), 'seek', Load(), lineno=1012, col_offset=18), [Name('self', Load(), lineno=1012, col_offset=40), Name('pos', Load(), lineno=1012, col_offset=46), Name('whence', Load(), lineno=1012, col_offset=51)], [], None, None, lineno=1012, col_offset=18), lineno=1012, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1013, col_offset=12), '_reset_read_buf', Load(), lineno=1013, col_offset=12), [], [], None, None, lineno=1013, col_offset=12), lineno=1013, col_offset=12), Return(Name('pos', Load(), lineno=1014, col_offset=19), lineno=1014, col_offset=12)], lineno=1009, col_offset=13)], [], lineno=1006, col_offset=4)], [], lineno=882, col_offset=0), ClassDef('BufferedWriter', [Name('_BufferedIOMixin', Load(), lineno=1016, col_offset=21)], [Expr(Str(u'A buffer for a writeable sequential RawIO object.\n\n    The constructor creates a BufferedWriter for the given writeable raw\n    stream. If the buffer_size is not given, it defaults to\n    DEFAULT_BUFFER_SIZE.\n    ', lineno=1023, col_offset=-1), lineno=1023, col_offset=-1), Assign([Name('_warning_stack_offset', Store(), lineno=1025, col_offset=4)], Num(2, lineno=1025, col_offset=28), lineno=1025, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1027, col_offset=17), Name('raw', Param(), lineno=1027, col_offset=23), Name('buffer_size', Param(), lineno=1028, col_offset=17), Name('max_buffer_size', Param(), lineno=1028, col_offset=50)], None, None, [Name('DEFAULT_BUFFER_SIZE', Load(), lineno=1028, col_offset=29), Name('None', Load(), lineno=1028, col_offset=66)]), [If(UnaryOp(Not(), Call(Attribute(Name('raw', Load(), lineno=1029, col_offset=15), 'writable', Load(), lineno=1029, col_offset=15), [], [], None, None, lineno=1029, col_offset=15), lineno=1029, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1030, col_offset=18), [Str(u'"raw" argument must be writable.', lineno=1030, col_offset=26)], [], None, None, lineno=1030, col_offset=18), None, None, lineno=1030, col_offset=12)], [], lineno=1029, col_offset=8), Expr(Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=1032, col_offset=8), '__init__', Load(), lineno=1032, col_offset=8), [Name('self', Load(), lineno=1032, col_offset=34), Name('raw', Load(), lineno=1032, col_offset=40)], [], None, None, lineno=1032, col_offset=8), lineno=1032, col_offset=8), If(Compare(Name('buffer_size', Load(), lineno=1033, col_offset=11), [LtE()], [Num(0, lineno=1033, col_offset=26)], lineno=1033, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1034, col_offset=18), [Str(u'invalid buffer size', lineno=1034, col_offset=29)], [], None, None, lineno=1034, col_offset=18), None, None, lineno=1034, col_offset=12)], [], lineno=1033, col_offset=8), If(Compare(Name('max_buffer_size', Load(), lineno=1035, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1035, col_offset=34)], lineno=1035, col_offset=11), [Expr(Call(Attribute(Name('warnings', Load(), lineno=1036, col_offset=12), 'warn', Load(), lineno=1036, col_offset=12), [Str(u'max_buffer_size is deprecated', lineno=1036, col_offset=26), Name('DeprecationWarning', Load(), lineno=1036, col_offset=59), Attribute(Name('self', Load(), lineno=1037, col_offset=26), '_warning_stack_offset', Load(), lineno=1037, col_offset=26)], [], None, None, lineno=1036, col_offset=12), lineno=1036, col_offset=12)], [], lineno=1035, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1038, col_offset=8), 'buffer_size', Store(), lineno=1038, col_offset=8)], Name('buffer_size', Load(), lineno=1038, col_offset=27), lineno=1038, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1039, col_offset=8), '_write_buf', Store(), lineno=1039, col_offset=8)], Call(Name('bytearray', Load(), lineno=1039, col_offset=26), [], [], None, None, lineno=1039, col_offset=26), lineno=1039, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1040, col_offset=8), '_write_lock', Store(), lineno=1040, col_offset=8)], Call(Name('Lock', Load(), lineno=1040, col_offset=27), [], [], None, None, lineno=1040, col_offset=27), lineno=1040, col_offset=8)], [], lineno=1027, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=1042, col_offset=14), Name('b', Param(), lineno=1042, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1043, col_offset=11), 'closed', Load(), lineno=1043, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1044, col_offset=18), [Str(u'write to closed file', lineno=1044, col_offset=29)], [], None, None, lineno=1044, col_offset=18), None, None, lineno=1044, col_offset=12)], [], lineno=1043, col_offset=8), If(Call(Name('isinstance', Load(), lineno=1045, col_offset=11), [Name('b', Load(), lineno=1045, col_offset=22), Name('unicode', Load(), lineno=1045, col_offset=25)], [], None, None, lineno=1045, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=1046, col_offset=18), [Str(u"can't write unicode to binary stream", lineno=1046, col_offset=28)], [], None, None, lineno=1046, col_offset=18), None, None, lineno=1046, col_offset=12)], [], lineno=1045, col_offset=8), With(Attribute(Name('self', Load(), lineno=1047, col_offset=13), '_write_lock', Load(), lineno=1047, col_offset=13), None, [If(Compare(Call(Name('len', Load(), lineno=1050, col_offset=15), [Attribute(Name('self', Load(), lineno=1050, col_offset=19), '_write_buf', Load(), lineno=1050, col_offset=19)], [], None, None, lineno=1050, col_offset=15), [Gt()], [Attribute(Name('self', Load(), lineno=1050, col_offset=38), 'buffer_size', Load(), lineno=1050, col_offset=38)], lineno=1050, col_offset=15), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=1053, col_offset=20), '_flush_unlocked', Load(), lineno=1053, col_offset=20), [], [], None, None, lineno=1053, col_offset=20), lineno=1053, col_offset=20)], [ExceptHandler(Name('BlockingIOError', Load(), lineno=1054, col_offset=23), Name('e', Store(), lineno=1054, col_offset=42), [Raise(Call(Name('BlockingIOError', Load(), lineno=1057, col_offset=26), [Attribute(Name('e', Load(), lineno=1057, col_offset=42), 'errno', Load(), lineno=1057, col_offset=42), Attribute(Name('e', Load(), lineno=1057, col_offset=51), 'strerror', Load(), lineno=1057, col_offset=51), Num(0, lineno=1057, col_offset=63)], [], None, None, lineno=1057, col_offset=26), None, None, lineno=1057, col_offset=20)], lineno=1054, col_offset=16)], [], lineno=1052, col_offset=16)], [], lineno=1050, col_offset=12), Assign([Name('before', Store(), lineno=1058, col_offset=12)], Call(Name('len', Load(), lineno=1058, col_offset=21), [Attribute(Name('self', Load(), lineno=1058, col_offset=25), '_write_buf', Load(), lineno=1058, col_offset=25)], [], None, None, lineno=1058, col_offset=21), lineno=1058, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1059, col_offset=12), '_write_buf', Load(), lineno=1059, col_offset=12), 'extend', Load(), lineno=1059, col_offset=12), [Name('b', Load(), lineno=1059, col_offset=35)], [], None, None, lineno=1059, col_offset=12), lineno=1059, col_offset=12), Assign([Name('written', Store(), lineno=1060, col_offset=12)], BinOp(Call(Name('len', Load(), lineno=1060, col_offset=22), [Attribute(Name('self', Load(), lineno=1060, col_offset=26), '_write_buf', Load(), lineno=1060, col_offset=26)], [], None, None, lineno=1060, col_offset=22), Sub(), Name('before', Load(), lineno=1060, col_offset=45), lineno=1060, col_offset=22), lineno=1060, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=1061, col_offset=15), [Attribute(Name('self', Load(), lineno=1061, col_offset=19), '_write_buf', Load(), lineno=1061, col_offset=19)], [], None, None, lineno=1061, col_offset=15), [Gt()], [Attribute(Name('self', Load(), lineno=1061, col_offset=38), 'buffer_size', Load(), lineno=1061, col_offset=38)], lineno=1061, col_offset=15), [TryExcept([Expr(Call(Attribute(Name('self', Load(), lineno=1063, col_offset=20), '_flush_unlocked', Load(), lineno=1063, col_offset=20), [], [], None, None, lineno=1063, col_offset=20), lineno=1063, col_offset=20)], [ExceptHandler(Name('BlockingIOError', Load(), lineno=1064, col_offset=23), Name('e', Store(), lineno=1064, col_offset=42), [If(Compare(Call(Name('len', Load(), lineno=1065, col_offset=23), [Attribute(Name('self', Load(), lineno=1065, col_offset=27), '_write_buf', Load(), lineno=1065, col_offset=27)], [], None, None, lineno=1065, col_offset=23), [Gt()], [Attribute(Name('self', Load(), lineno=1065, col_offset=46), 'buffer_size', Load(), lineno=1065, col_offset=46)], lineno=1065, col_offset=23), [Assign([Name('overage', Store(), lineno=1068, col_offset=24)], BinOp(Call(Name('len', Load(), lineno=1068, col_offset=34), [Attribute(Name('self', Load(), lineno=1068, col_offset=38), '_write_buf', Load(), lineno=1068, col_offset=38)], [], None, None, lineno=1068, col_offset=34), Sub(), Attribute(Name('self', Load(), lineno=1068, col_offset=57), 'buffer_size', Load(), lineno=1068, col_offset=57), lineno=1068, col_offset=34), lineno=1068, col_offset=24), AugAssign(Name('written', Store(), lineno=1069, col_offset=24), Sub(), Name('overage', Load(), lineno=1069, col_offset=35), lineno=1069, col_offset=24), Assign([Attribute(Name('self', Load(), lineno=1070, col_offset=24), '_write_buf', Store(), lineno=1070, col_offset=24)], Subscript(Attribute(Name('self', Load(), lineno=1070, col_offset=42), '_write_buf', Load(), lineno=1070, col_offset=42), Slice(None, Attribute(Name('self', Load(), lineno=1070, col_offset=59), 'buffer_size', Load(), lineno=1070, col_offset=59), None), Load(), lineno=1070, col_offset=42), lineno=1070, col_offset=24), Raise(Call(Name('BlockingIOError', Load(), lineno=1071, col_offset=30), [Attribute(Name('e', Load(), lineno=1071, col_offset=46), 'errno', Load(), lineno=1071, col_offset=46), Attribute(Name('e', Load(), lineno=1071, col_offset=55), 'strerror', Load(), lineno=1071, col_offset=55), Name('written', Load(), lineno=1071, col_offset=67)], [], None, None, lineno=1071, col_offset=30), None, None, lineno=1071, col_offset=24)], [], lineno=1065, col_offset=20)], lineno=1064, col_offset=16)], [], lineno=1062, col_offset=16)], [], lineno=1061, col_offset=12), Return(Name('written', Load(), lineno=1072, col_offset=19), lineno=1072, col_offset=12)], lineno=1047, col_offset=13)], [], lineno=1042, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=1074, col_offset=17), Name('pos', Param(), lineno=1074, col_offset=23)], None, None, [Name('None', Load(), lineno=1074, col_offset=27)]), [With(Attribute(Name('self', Load(), lineno=1075, col_offset=13), '_write_lock', Load(), lineno=1075, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=1076, col_offset=12), '_flush_unlocked', Load(), lineno=1076, col_offset=12), [], [], None, None, lineno=1076, col_offset=12), lineno=1076, col_offset=12), If(Compare(Name('pos', Load(), lineno=1077, col_offset=15), [Is()], [Name('None', Load(), lineno=1077, col_offset=22)], lineno=1077, col_offset=15), [Assign([Name('pos', Store(), lineno=1078, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1078, col_offset=22), 'raw', Load(), lineno=1078, col_offset=22), 'tell', Load(), lineno=1078, col_offset=22), [], [], None, None, lineno=1078, col_offset=22), lineno=1078, col_offset=16)], [], lineno=1077, col_offset=12), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1079, col_offset=19), 'raw', Load(), lineno=1079, col_offset=19), 'truncate', Load(), lineno=1079, col_offset=19), [Name('pos', Load(), lineno=1079, col_offset=37)], [], None, None, lineno=1079, col_offset=19), lineno=1079, col_offset=12)], lineno=1075, col_offset=13)], [], lineno=1074, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=1081, col_offset=14)], None, None, []), [With(Attribute(Name('self', Load(), lineno=1082, col_offset=13), '_write_lock', Load(), lineno=1082, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=1083, col_offset=12), '_flush_unlocked', Load(), lineno=1083, col_offset=12), [], [], None, None, lineno=1083, col_offset=12), lineno=1083, col_offset=12)], lineno=1082, col_offset=13)], [], lineno=1081, col_offset=4), FunctionDef('_flush_unlocked', arguments([Name('self', Param(), lineno=1085, col_offset=24)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1086, col_offset=11), 'closed', Load(), lineno=1086, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1087, col_offset=18), [Str(u'flush of closed file', lineno=1087, col_offset=29)], [], None, None, lineno=1087, col_offset=18), None, None, lineno=1087, col_offset=12)], [], lineno=1086, col_offset=8), Assign([Name('written', Store(), lineno=1088, col_offset=8)], Num(0, lineno=1088, col_offset=18), lineno=1088, col_offset=8), TryExcept([While(Attribute(Name('self', Load(), lineno=1090, col_offset=18), '_write_buf', Load(), lineno=1090, col_offset=18), [Assign([Name('n', Store(), lineno=1091, col_offset=16)], Call(Attribute(Attribute(Name('self', Load(), lineno=1091, col_offset=20), 'raw', Load(), lineno=1091, col_offset=20), 'write', Load(), lineno=1091, col_offset=20), [Attribute(Name('self', Load(), lineno=1091, col_offset=35), '_write_buf', Load(), lineno=1091, col_offset=35)], [], None, None, lineno=1091, col_offset=20), lineno=1091, col_offset=16), If(BoolOp(Or(), [Compare(Name('n', Load(), lineno=1092, col_offset=19), [Gt()], [Call(Name('len', Load(), lineno=1092, col_offset=23), [Attribute(Name('self', Load(), lineno=1092, col_offset=27), '_write_buf', Load(), lineno=1092, col_offset=27)], [], None, None, lineno=1092, col_offset=23)], lineno=1092, col_offset=19), Compare(Name('n', Load(), lineno=1092, col_offset=47), [Lt()], [Num(0, lineno=1092, col_offset=51)], lineno=1092, col_offset=47)], lineno=1092, col_offset=19), [Raise(Call(Name('IOError', Load(), lineno=1093, col_offset=26), [Str(u'write() returned incorrect number of bytes', lineno=1093, col_offset=34)], [], None, None, lineno=1093, col_offset=26), None, None, lineno=1093, col_offset=20)], [], lineno=1092, col_offset=16), Delete([Subscript(Attribute(Name('self', Load(), lineno=1094, col_offset=20), '_write_buf', Load(), lineno=1094, col_offset=20), Slice(None, Name('n', Load(), lineno=1094, col_offset=37), None), Del(), lineno=1094, col_offset=20)], lineno=1094, col_offset=16), AugAssign(Name('written', Store(), lineno=1095, col_offset=16), Add(), Name('n', Load(), lineno=1095, col_offset=27), lineno=1095, col_offset=16)], [], lineno=1090, col_offset=12)], [ExceptHandler(Name('BlockingIOError', Load(), lineno=1096, col_offset=15), Name('e', Store(), lineno=1096, col_offset=34), [Assign([Name('n', Store(), lineno=1097, col_offset=12)], Attribute(Name('e', Load(), lineno=1097, col_offset=16), 'characters_written', Load(), lineno=1097, col_offset=16), lineno=1097, col_offset=12), Delete([Subscript(Attribute(Name('self', Load(), lineno=1098, col_offset=16), '_write_buf', Load(), lineno=1098, col_offset=16), Slice(None, Name('n', Load(), lineno=1098, col_offset=33), None), Del(), lineno=1098, col_offset=16)], lineno=1098, col_offset=12), AugAssign(Name('written', Store(), lineno=1099, col_offset=12), Add(), Name('n', Load(), lineno=1099, col_offset=23), lineno=1099, col_offset=12), Raise(Call(Name('BlockingIOError', Load(), lineno=1100, col_offset=18), [Attribute(Name('e', Load(), lineno=1100, col_offset=34), 'errno', Load(), lineno=1100, col_offset=34), Attribute(Name('e', Load(), lineno=1100, col_offset=43), 'strerror', Load(), lineno=1100, col_offset=43), Name('written', Load(), lineno=1100, col_offset=55)], [], None, None, lineno=1100, col_offset=18), None, None, lineno=1100, col_offset=12)], lineno=1096, col_offset=8)], [], lineno=1089, col_offset=8)], [], lineno=1085, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=1102, col_offset=13)], None, None, []), [Return(BinOp(Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=1103, col_offset=15), 'tell', Load(), lineno=1103, col_offset=15), [Name('self', Load(), lineno=1103, col_offset=37)], [], None, None, lineno=1103, col_offset=15), Add(), Call(Name('len', Load(), lineno=1103, col_offset=45), [Attribute(Name('self', Load(), lineno=1103, col_offset=49), '_write_buf', Load(), lineno=1103, col_offset=49)], [], None, None, lineno=1103, col_offset=45), lineno=1103, col_offset=15), lineno=1103, col_offset=8)], [], lineno=1102, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=1105, col_offset=13), Name('pos', Param(), lineno=1105, col_offset=19), Name('whence', Param(), lineno=1105, col_offset=24)], None, None, [Num(0, lineno=1105, col_offset=31)]), [If(UnaryOp(Not(), Compare(Num(0, lineno=1106, col_offset=16), [LtE(), LtE()], [Name('whence', Load(), lineno=1106, col_offset=21), Num(2, lineno=1106, col_offset=31)], lineno=1106, col_offset=16), lineno=1106, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1107, col_offset=18), [Str(u'invalid whence', lineno=1107, col_offset=29)], [], None, None, lineno=1107, col_offset=18), None, None, lineno=1107, col_offset=12)], [], lineno=1106, col_offset=8), With(Attribute(Name('self', Load(), lineno=1108, col_offset=13), '_write_lock', Load(), lineno=1108, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=1109, col_offset=12), '_flush_unlocked', Load(), lineno=1109, col_offset=12), [], [], None, None, lineno=1109, col_offset=12), lineno=1109, col_offset=12), Return(Call(Attribute(Name('_BufferedIOMixin', Load(), lineno=1110, col_offset=19), 'seek', Load(), lineno=1110, col_offset=19), [Name('self', Load(), lineno=1110, col_offset=41), Name('pos', Load(), lineno=1110, col_offset=47), Name('whence', Load(), lineno=1110, col_offset=52)], [], None, None, lineno=1110, col_offset=19), lineno=1110, col_offset=12)], lineno=1108, col_offset=13)], [], lineno=1105, col_offset=4)], [], lineno=1016, col_offset=0), ClassDef('BufferedRWPair', [Name('BufferedIOBase', Load(), lineno=1113, col_offset=21)], [Expr(Str(u'A buffered reader and writer object together.\n\n    A buffered reader object and buffered writer object put together to\n    form a sequential IO object that can read and write. This is typically\n    used with a socket or two-way pipe.\n\n    reader and writer are RawIOBase objects that are readable and\n    writeable respectively. If the buffer_size is omitted it defaults to\n    DEFAULT_BUFFER_SIZE.\n    ', lineno=1124, col_offset=-1), lineno=1124, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1129, col_offset=17), Name('reader', Param(), lineno=1129, col_offset=23), Name('writer', Param(), lineno=1129, col_offset=31), Name('buffer_size', Param(), lineno=1130, col_offset=17), Name('max_buffer_size', Param(), lineno=1130, col_offset=50)], None, None, [Name('DEFAULT_BUFFER_SIZE', Load(), lineno=1130, col_offset=29), Name('None', Load(), lineno=1130, col_offset=66)]), [Expr(Str(u'Constructor.\n\n        The arguments are two RawIO instances.\n        ', lineno=1134, col_offset=-1), lineno=1134, col_offset=-1), If(Compare(Name('max_buffer_size', Load(), lineno=1135, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1135, col_offset=34)], lineno=1135, col_offset=11), [Expr(Call(Attribute(Name('warnings', Load(), lineno=1136, col_offset=12), 'warn', Load(), lineno=1136, col_offset=12), [Str(u'max_buffer_size is deprecated', lineno=1136, col_offset=26), Name('DeprecationWarning', Load(), lineno=1136, col_offset=59), Num(2, lineno=1136, col_offset=79)], [], None, None, lineno=1136, col_offset=12), lineno=1136, col_offset=12)], [], lineno=1135, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('reader', Load(), lineno=1138, col_offset=15), 'readable', Load(), lineno=1138, col_offset=15), [], [], None, None, lineno=1138, col_offset=15), lineno=1138, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1139, col_offset=18), [Str(u'"reader" argument must be readable.', lineno=1139, col_offset=26)], [], None, None, lineno=1139, col_offset=18), None, None, lineno=1139, col_offset=12)], [], lineno=1138, col_offset=8), If(UnaryOp(Not(), Call(Attribute(Name('writer', Load(), lineno=1141, col_offset=15), 'writable', Load(), lineno=1141, col_offset=15), [], [], None, None, lineno=1141, col_offset=15), lineno=1141, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1142, col_offset=18), [Str(u'"writer" argument must be writable.', lineno=1142, col_offset=26)], [], None, None, lineno=1142, col_offset=18), None, None, lineno=1142, col_offset=12)], [], lineno=1141, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1144, col_offset=8), 'reader', Store(), lineno=1144, col_offset=8)], Call(Name('BufferedReader', Load(), lineno=1144, col_offset=22), [Name('reader', Load(), lineno=1144, col_offset=37), Name('buffer_size', Load(), lineno=1144, col_offset=45)], [], None, None, lineno=1144, col_offset=22), lineno=1144, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1145, col_offset=8), 'writer', Store(), lineno=1145, col_offset=8)], Call(Name('BufferedWriter', Load(), lineno=1145, col_offset=22), [Name('writer', Load(), lineno=1145, col_offset=37), Name('buffer_size', Load(), lineno=1145, col_offset=45)], [], None, None, lineno=1145, col_offset=22), lineno=1145, col_offset=8)], [], lineno=1129, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=1147, col_offset=13), Name('n', Param(), lineno=1147, col_offset=19)], None, None, [Name('None', Load(), lineno=1147, col_offset=21)]), [If(Compare(Name('n', Load(), lineno=1148, col_offset=11), [Is()], [Name('None', Load(), lineno=1148, col_offset=16)], lineno=1148, col_offset=11), [Assign([Name('n', Store(), lineno=1149, col_offset=12)], Num(-1, lineno=1149, col_offset=17), lineno=1149, col_offset=12)], [], lineno=1148, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1150, col_offset=15), 'reader', Load(), lineno=1150, col_offset=15), 'read', Load(), lineno=1150, col_offset=15), [Name('n', Load(), lineno=1150, col_offset=32)], [], None, None, lineno=1150, col_offset=15), lineno=1150, col_offset=8)], [], lineno=1147, col_offset=4), FunctionDef('readinto', arguments([Name('self', Param(), lineno=1152, col_offset=17), Name('b', Param(), lineno=1152, col_offset=23)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1153, col_offset=15), 'reader', Load(), lineno=1153, col_offset=15), 'readinto', Load(), lineno=1153, col_offset=15), [Name('b', Load(), lineno=1153, col_offset=36)], [], None, None, lineno=1153, col_offset=15), lineno=1153, col_offset=8)], [], lineno=1152, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=1155, col_offset=14), Name('b', Param(), lineno=1155, col_offset=20)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1156, col_offset=15), 'writer', Load(), lineno=1156, col_offset=15), 'write', Load(), lineno=1156, col_offset=15), [Name('b', Load(), lineno=1156, col_offset=33)], [], None, None, lineno=1156, col_offset=15), lineno=1156, col_offset=8)], [], lineno=1155, col_offset=4), FunctionDef('peek', arguments([Name('self', Param(), lineno=1158, col_offset=13), Name('n', Param(), lineno=1158, col_offset=19)], None, None, [Num(0, lineno=1158, col_offset=21)]), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1159, col_offset=15), 'reader', Load(), lineno=1159, col_offset=15), 'peek', Load(), lineno=1159, col_offset=15), [Name('n', Load(), lineno=1159, col_offset=32)], [], None, None, lineno=1159, col_offset=15), lineno=1159, col_offset=8)], [], lineno=1158, col_offset=4), FunctionDef('read1', arguments([Name('self', Param(), lineno=1161, col_offset=14), Name('n', Param(), lineno=1161, col_offset=20)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1162, col_offset=15), 'reader', Load(), lineno=1162, col_offset=15), 'read1', Load(), lineno=1162, col_offset=15), [Name('n', Load(), lineno=1162, col_offset=33)], [], None, None, lineno=1162, col_offset=15), lineno=1162, col_offset=8)], [], lineno=1161, col_offset=4), FunctionDef('readable', arguments([Name('self', Param(), lineno=1164, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1165, col_offset=15), 'reader', Load(), lineno=1165, col_offset=15), 'readable', Load(), lineno=1165, col_offset=15), [], [], None, None, lineno=1165, col_offset=15), lineno=1165, col_offset=8)], [], lineno=1164, col_offset=4), FunctionDef('writable', arguments([Name('self', Param(), lineno=1167, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1168, col_offset=15), 'writer', Load(), lineno=1168, col_offset=15), 'writable', Load(), lineno=1168, col_offset=15), [], [], None, None, lineno=1168, col_offset=15), lineno=1168, col_offset=8)], [], lineno=1167, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=1170, col_offset=14)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1171, col_offset=15), 'writer', Load(), lineno=1171, col_offset=15), 'flush', Load(), lineno=1171, col_offset=15), [], [], None, None, lineno=1171, col_offset=15), lineno=1171, col_offset=8)], [], lineno=1170, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=1173, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1174, col_offset=8), 'writer', Load(), lineno=1174, col_offset=8), 'close', Load(), lineno=1174, col_offset=8), [], [], None, None, lineno=1174, col_offset=8), lineno=1174, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1175, col_offset=8), 'reader', Load(), lineno=1175, col_offset=8), 'close', Load(), lineno=1175, col_offset=8), [], [], None, None, lineno=1175, col_offset=8), lineno=1175, col_offset=8)], [], lineno=1173, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=1177, col_offset=15)], None, None, []), [Return(BoolOp(Or(), [Call(Attribute(Attribute(Name('self', Load(), lineno=1178, col_offset=15), 'reader', Load(), lineno=1178, col_offset=15), 'isatty', Load(), lineno=1178, col_offset=15), [], [], None, None, lineno=1178, col_offset=15), Call(Attribute(Attribute(Name('self', Load(), lineno=1178, col_offset=39), 'writer', Load(), lineno=1178, col_offset=39), 'isatty', Load(), lineno=1178, col_offset=39), [], [], None, None, lineno=1178, col_offset=39)], lineno=1178, col_offset=15), lineno=1178, col_offset=8)], [], lineno=1177, col_offset=4), FunctionDef('closed', arguments([Name('self', Param(), lineno=1181, col_offset=15)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=1182, col_offset=15), 'writer', Load(), lineno=1182, col_offset=15), 'closed', Load(), lineno=1182, col_offset=15), lineno=1182, col_offset=8)], [Name('property', Load(), lineno=1180, col_offset=5)], lineno=1180, col_offset=4)], [], lineno=1113, col_offset=0), ClassDef('BufferedRandom', [Name('BufferedWriter', Load(), lineno=1185, col_offset=21), Name('BufferedReader', Load(), lineno=1185, col_offset=37)], [Expr(Str(u'A buffered interface to random access streams.\n\n    The constructor creates a reader and writer for a seekable stream,\n    raw, given in the first argument. If the buffer_size is omitted it\n    defaults to DEFAULT_BUFFER_SIZE.\n    ', lineno=1192, col_offset=-1), lineno=1192, col_offset=-1), Assign([Name('_warning_stack_offset', Store(), lineno=1194, col_offset=4)], Num(3, lineno=1194, col_offset=28), lineno=1194, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1196, col_offset=17), Name('raw', Param(), lineno=1196, col_offset=23), Name('buffer_size', Param(), lineno=1197, col_offset=17), Name('max_buffer_size', Param(), lineno=1197, col_offset=50)], None, None, [Name('DEFAULT_BUFFER_SIZE', Load(), lineno=1197, col_offset=29), Name('None', Load(), lineno=1197, col_offset=66)]), [Expr(Call(Attribute(Name('raw', Load(), lineno=1198, col_offset=8), '_checkSeekable', Load(), lineno=1198, col_offset=8), [], [], None, None, lineno=1198, col_offset=8), lineno=1198, col_offset=8), Expr(Call(Attribute(Name('BufferedReader', Load(), lineno=1199, col_offset=8), '__init__', Load(), lineno=1199, col_offset=8), [Name('self', Load(), lineno=1199, col_offset=32), Name('raw', Load(), lineno=1199, col_offset=38), Name('buffer_size', Load(), lineno=1199, col_offset=43)], [], None, None, lineno=1199, col_offset=8), lineno=1199, col_offset=8), Expr(Call(Attribute(Name('BufferedWriter', Load(), lineno=1200, col_offset=8), '__init__', Load(), lineno=1200, col_offset=8), [Name('self', Load(), lineno=1200, col_offset=32), Name('raw', Load(), lineno=1200, col_offset=38), Name('buffer_size', Load(), lineno=1200, col_offset=43), Name('max_buffer_size', Load(), lineno=1200, col_offset=56)], [], None, None, lineno=1200, col_offset=8), lineno=1200, col_offset=8)], [], lineno=1196, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=1202, col_offset=13), Name('pos', Param(), lineno=1202, col_offset=19), Name('whence', Param(), lineno=1202, col_offset=24)], None, None, [Num(0, lineno=1202, col_offset=31)]), [If(UnaryOp(Not(), Compare(Num(0, lineno=1203, col_offset=16), [LtE(), LtE()], [Name('whence', Load(), lineno=1203, col_offset=21), Num(2, lineno=1203, col_offset=31)], lineno=1203, col_offset=16), lineno=1203, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1204, col_offset=18), [Str(u'invalid whence', lineno=1204, col_offset=29)], [], None, None, lineno=1204, col_offset=18), None, None, lineno=1204, col_offset=12)], [], lineno=1203, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1205, col_offset=8), 'flush', Load(), lineno=1205, col_offset=8), [], [], None, None, lineno=1205, col_offset=8), lineno=1205, col_offset=8), If(Attribute(Name('self', Load(), lineno=1206, col_offset=11), '_read_buf', Load(), lineno=1206, col_offset=11), [With(Attribute(Name('self', Load(), lineno=1208, col_offset=17), '_read_lock', Load(), lineno=1208, col_offset=17), None, [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1209, col_offset=16), 'raw', Load(), lineno=1209, col_offset=16), 'seek', Load(), lineno=1209, col_offset=16), [BinOp(Attribute(Name('self', Load(), lineno=1209, col_offset=30), '_read_pos', Load(), lineno=1209, col_offset=30), Sub(), Call(Name('len', Load(), lineno=1209, col_offset=47), [Attribute(Name('self', Load(), lineno=1209, col_offset=51), '_read_buf', Load(), lineno=1209, col_offset=51)], [], None, None, lineno=1209, col_offset=47), lineno=1209, col_offset=30), Num(1, lineno=1209, col_offset=68)], [], None, None, lineno=1209, col_offset=16), lineno=1209, col_offset=16)], lineno=1208, col_offset=17)], [], lineno=1206, col_offset=8), Assign([Name('pos', Store(), lineno=1212, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1212, col_offset=14), 'raw', Load(), lineno=1212, col_offset=14), 'seek', Load(), lineno=1212, col_offset=14), [Name('pos', Load(), lineno=1212, col_offset=28), Name('whence', Load(), lineno=1212, col_offset=33)], [], None, None, lineno=1212, col_offset=14), lineno=1212, col_offset=8), With(Attribute(Name('self', Load(), lineno=1213, col_offset=13), '_read_lock', Load(), lineno=1213, col_offset=13), None, [Expr(Call(Attribute(Name('self', Load(), lineno=1214, col_offset=12), '_reset_read_buf', Load(), lineno=1214, col_offset=12), [], [], None, None, lineno=1214, col_offset=12), lineno=1214, col_offset=12)], lineno=1213, col_offset=13), If(Compare(Name('pos', Load(), lineno=1215, col_offset=11), [Lt()], [Num(0, lineno=1215, col_offset=17)], lineno=1215, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1216, col_offset=18), [Str(u'seek() returned invalid position', lineno=1216, col_offset=26)], [], None, None, lineno=1216, col_offset=18), None, None, lineno=1216, col_offset=12)], [], lineno=1215, col_offset=8), Return(Name('pos', Load(), lineno=1217, col_offset=15), lineno=1217, col_offset=8)], [], lineno=1202, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=1219, col_offset=13)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1220, col_offset=11), '_write_buf', Load(), lineno=1220, col_offset=11), [Return(Call(Attribute(Name('BufferedWriter', Load(), lineno=1221, col_offset=19), 'tell', Load(), lineno=1221, col_offset=19), [Name('self', Load(), lineno=1221, col_offset=39)], [], None, None, lineno=1221, col_offset=19), lineno=1221, col_offset=12)], [Return(Call(Attribute(Name('BufferedReader', Load(), lineno=1223, col_offset=19), 'tell', Load(), lineno=1223, col_offset=19), [Name('self', Load(), lineno=1223, col_offset=39)], [], None, None, lineno=1223, col_offset=19), lineno=1223, col_offset=12)], lineno=1220, col_offset=8)], [], lineno=1219, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=1225, col_offset=17), Name('pos', Param(), lineno=1225, col_offset=23)], None, None, [Name('None', Load(), lineno=1225, col_offset=27)]), [If(Compare(Name('pos', Load(), lineno=1226, col_offset=11), [Is()], [Name('None', Load(), lineno=1226, col_offset=18)], lineno=1226, col_offset=11), [Assign([Name('pos', Store(), lineno=1227, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1227, col_offset=18), 'tell', Load(), lineno=1227, col_offset=18), [], [], None, None, lineno=1227, col_offset=18), lineno=1227, col_offset=12)], [], lineno=1226, col_offset=8), Return(Call(Attribute(Name('BufferedWriter', Load(), lineno=1229, col_offset=15), 'truncate', Load(), lineno=1229, col_offset=15), [Name('self', Load(), lineno=1229, col_offset=39), Name('pos', Load(), lineno=1229, col_offset=45)], [], None, None, lineno=1229, col_offset=15), lineno=1229, col_offset=8)], [], lineno=1225, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=1231, col_offset=13), Name('n', Param(), lineno=1231, col_offset=19)], None, None, [Name('None', Load(), lineno=1231, col_offset=21)]), [If(Compare(Name('n', Load(), lineno=1232, col_offset=11), [Is()], [Name('None', Load(), lineno=1232, col_offset=16)], lineno=1232, col_offset=11), [Assign([Name('n', Store(), lineno=1233, col_offset=12)], Num(-1, lineno=1233, col_offset=17), lineno=1233, col_offset=12)], [], lineno=1232, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1234, col_offset=8), 'flush', Load(), lineno=1234, col_offset=8), [], [], None, None, lineno=1234, col_offset=8), lineno=1234, col_offset=8), Return(Call(Attribute(Name('BufferedReader', Load(), lineno=1235, col_offset=15), 'read', Load(), lineno=1235, col_offset=15), [Name('self', Load(), lineno=1235, col_offset=35), Name('n', Load(), lineno=1235, col_offset=41)], [], None, None, lineno=1235, col_offset=15), lineno=1235, col_offset=8)], [], lineno=1231, col_offset=4), FunctionDef('readinto', arguments([Name('self', Param(), lineno=1237, col_offset=17), Name('b', Param(), lineno=1237, col_offset=23)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1238, col_offset=8), 'flush', Load(), lineno=1238, col_offset=8), [], [], None, None, lineno=1238, col_offset=8), lineno=1238, col_offset=8), Return(Call(Attribute(Name('BufferedReader', Load(), lineno=1239, col_offset=15), 'readinto', Load(), lineno=1239, col_offset=15), [Name('self', Load(), lineno=1239, col_offset=39), Name('b', Load(), lineno=1239, col_offset=45)], [], None, None, lineno=1239, col_offset=15), lineno=1239, col_offset=8)], [], lineno=1237, col_offset=4), FunctionDef('peek', arguments([Name('self', Param(), lineno=1241, col_offset=13), Name('n', Param(), lineno=1241, col_offset=19)], None, None, [Num(0, lineno=1241, col_offset=21)]), [Expr(Call(Attribute(Name('self', Load(), lineno=1242, col_offset=8), 'flush', Load(), lineno=1242, col_offset=8), [], [], None, None, lineno=1242, col_offset=8), lineno=1242, col_offset=8), Return(Call(Attribute(Name('BufferedReader', Load(), lineno=1243, col_offset=15), 'peek', Load(), lineno=1243, col_offset=15), [Name('self', Load(), lineno=1243, col_offset=35), Name('n', Load(), lineno=1243, col_offset=41)], [], None, None, lineno=1243, col_offset=15), lineno=1243, col_offset=8)], [], lineno=1241, col_offset=4), FunctionDef('read1', arguments([Name('self', Param(), lineno=1245, col_offset=14), Name('n', Param(), lineno=1245, col_offset=20)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1246, col_offset=8), 'flush', Load(), lineno=1246, col_offset=8), [], [], None, None, lineno=1246, col_offset=8), lineno=1246, col_offset=8), Return(Call(Attribute(Name('BufferedReader', Load(), lineno=1247, col_offset=15), 'read1', Load(), lineno=1247, col_offset=15), [Name('self', Load(), lineno=1247, col_offset=36), Name('n', Load(), lineno=1247, col_offset=42)], [], None, None, lineno=1247, col_offset=15), lineno=1247, col_offset=8)], [], lineno=1245, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=1249, col_offset=14), Name('b', Param(), lineno=1249, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1250, col_offset=11), '_read_buf', Load(), lineno=1250, col_offset=11), [With(Attribute(Name('self', Load(), lineno=1252, col_offset=17), '_read_lock', Load(), lineno=1252, col_offset=17), None, [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1253, col_offset=16), 'raw', Load(), lineno=1253, col_offset=16), 'seek', Load(), lineno=1253, col_offset=16), [BinOp(Attribute(Name('self', Load(), lineno=1253, col_offset=30), '_read_pos', Load(), lineno=1253, col_offset=30), Sub(), Call(Name('len', Load(), lineno=1253, col_offset=47), [Attribute(Name('self', Load(), lineno=1253, col_offset=51), '_read_buf', Load(), lineno=1253, col_offset=51)], [], None, None, lineno=1253, col_offset=47), lineno=1253, col_offset=30), Num(1, lineno=1253, col_offset=68)], [], None, None, lineno=1253, col_offset=16), lineno=1253, col_offset=16), Expr(Call(Attribute(Name('self', Load(), lineno=1254, col_offset=16), '_reset_read_buf', Load(), lineno=1254, col_offset=16), [], [], None, None, lineno=1254, col_offset=16), lineno=1254, col_offset=16)], lineno=1252, col_offset=17)], [], lineno=1250, col_offset=8), Return(Call(Attribute(Name('BufferedWriter', Load(), lineno=1255, col_offset=15), 'write', Load(), lineno=1255, col_offset=15), [Name('self', Load(), lineno=1255, col_offset=36), Name('b', Load(), lineno=1255, col_offset=42)], [], None, None, lineno=1255, col_offset=15), lineno=1255, col_offset=8)], [], lineno=1249, col_offset=4)], [], lineno=1185, col_offset=0), ClassDef('TextIOBase', [Name('IOBase', Load(), lineno=1258, col_offset=17)], [Expr(Str(u"Base class for text I/O.\n\n    This class provides a character and line based interface to stream\n    I/O. There is no readinto method because Python's character strings\n    are immutable. There is no public constructor.\n    ", lineno=1265, col_offset=-1), lineno=1265, col_offset=-1), FunctionDef('read', arguments([Name('self', Param(), lineno=1267, col_offset=13), Name('n', Param(), lineno=1267, col_offset=19)], None, None, [Num(-1, lineno=1267, col_offset=22)]), [Expr(Str(u'Read at most n characters from stream.\n\n        Read from underlying buffer until we have n characters or we hit EOF.\n        If n is negative or omitted, read until EOF.\n        ', lineno=1272, col_offset=-1), lineno=1272, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1273, col_offset=8), '_unsupported', Load(), lineno=1273, col_offset=8), [Str(u'read', lineno=1273, col_offset=26)], [], None, None, lineno=1273, col_offset=8), lineno=1273, col_offset=8)], [], lineno=1267, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=1275, col_offset=14), Name('s', Param(), lineno=1275, col_offset=20)], None, None, []), [Expr(Str(u'Write string s to stream.', lineno=1276, col_offset=8), lineno=1276, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1277, col_offset=8), '_unsupported', Load(), lineno=1277, col_offset=8), [Str(u'write', lineno=1277, col_offset=26)], [], None, None, lineno=1277, col_offset=8), lineno=1277, col_offset=8)], [], lineno=1275, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=1279, col_offset=17), Name('pos', Param(), lineno=1279, col_offset=23)], None, None, [Name('None', Load(), lineno=1279, col_offset=27)]), [Expr(Str(u'Truncate size to pos.', lineno=1280, col_offset=8), lineno=1280, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1281, col_offset=8), '_unsupported', Load(), lineno=1281, col_offset=8), [Str(u'truncate', lineno=1281, col_offset=26)], [], None, None, lineno=1281, col_offset=8), lineno=1281, col_offset=8)], [], lineno=1279, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=1283, col_offset=17)], None, None, []), [Expr(Str(u'Read until newline or EOF.\n\n        Returns an empty string if EOF is hit immediately.\n        ', lineno=1287, col_offset=-1), lineno=1287, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1288, col_offset=8), '_unsupported', Load(), lineno=1288, col_offset=8), [Str(u'readline', lineno=1288, col_offset=26)], [], None, None, lineno=1288, col_offset=8), lineno=1288, col_offset=8)], [], lineno=1283, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=1290, col_offset=15)], None, None, []), [Expr(Str(u'\n        Separate the underlying buffer from the TextIOBase and return it.\n\n        After the underlying buffer has been detached, the TextIO is in an\n        unusable state.\n        ', lineno=1296, col_offset=-1), lineno=1296, col_offset=-1), Expr(Call(Attribute(Name('self', Load(), lineno=1297, col_offset=8), '_unsupported', Load(), lineno=1297, col_offset=8), [Str(u'detach', lineno=1297, col_offset=26)], [], None, None, lineno=1297, col_offset=8), lineno=1297, col_offset=8)], [], lineno=1290, col_offset=4), FunctionDef('encoding', arguments([Name('self', Param(), lineno=1300, col_offset=17)], None, None, []), [Expr(Str(u'Subclasses should override.', lineno=1301, col_offset=8), lineno=1301, col_offset=8), Return(Name('None', Load(), lineno=1302, col_offset=15), lineno=1302, col_offset=8)], [Name('property', Load(), lineno=1299, col_offset=5)], lineno=1299, col_offset=4), FunctionDef('newlines', arguments([Name('self', Param(), lineno=1305, col_offset=17)], None, None, []), [Expr(Str(u'Line endings translated so far.\n\n        Only line endings translated during reading are considered.\n\n        Subclasses should override.\n        ', lineno=1311, col_offset=-1), lineno=1311, col_offset=-1), Return(Name('None', Load(), lineno=1312, col_offset=15), lineno=1312, col_offset=8)], [Name('property', Load(), lineno=1304, col_offset=5)], lineno=1304, col_offset=4), FunctionDef('errors', arguments([Name('self', Param(), lineno=1315, col_offset=15)], None, None, []), [Expr(Str(u'Error setting of the decoder or encoder.\n\n        Subclasses should override.', lineno=1318, col_offset=-1), lineno=1318, col_offset=-1), Return(Name('None', Load(), lineno=1319, col_offset=15), lineno=1319, col_offset=8)], [Name('property', Load(), lineno=1314, col_offset=5)], lineno=1314, col_offset=4)], [], lineno=1258, col_offset=0), Expr(Call(Attribute(Attribute(Name('io', Load(), lineno=1321, col_offset=0), 'TextIOBase', Load(), lineno=1321, col_offset=0), 'register', Load(), lineno=1321, col_offset=0), [Name('TextIOBase', Load(), lineno=1321, col_offset=23)], [], None, None, lineno=1321, col_offset=0), lineno=1321, col_offset=0), ClassDef('IncrementalNewlineDecoder', [Attribute(Name('codecs', Load(), lineno=1324, col_offset=32), 'IncrementalDecoder', Load(), lineno=1324, col_offset=32)], [Expr(Str(u'Codec used when reading a file in universal newlines mode.  It wraps\n    another incremental decoder, translating \\r\\n and \\r into \\n.  It also\n    records the types of newlines encountered.  When used with\n    translate=False, it ensures that the newline sequence is returned in\n    one piece.\n    ', lineno=1330, col_offset=-1), lineno=1330, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1331, col_offset=17), Name('decoder', Param(), lineno=1331, col_offset=23), Name('translate', Param(), lineno=1331, col_offset=32), Name('errors', Param(), lineno=1331, col_offset=43)], None, None, [Str(u'strict', lineno=1331, col_offset=50)]), [Expr(Call(Attribute(Attribute(Name('codecs', Load(), lineno=1332, col_offset=8), 'IncrementalDecoder', Load(), lineno=1332, col_offset=8), '__init__', Load(), lineno=1332, col_offset=8), [Name('self', Load(), lineno=1332, col_offset=43)], [keyword('errors', Name('errors', Load(), lineno=1332, col_offset=56))], None, None, lineno=1332, col_offset=8), lineno=1332, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1333, col_offset=8), 'translate', Store(), lineno=1333, col_offset=8)], Name('translate', Load(), lineno=1333, col_offset=25), lineno=1333, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1334, col_offset=8), 'decoder', Store(), lineno=1334, col_offset=8)], Name('decoder', Load(), lineno=1334, col_offset=23), lineno=1334, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1335, col_offset=8), 'seennl', Store(), lineno=1335, col_offset=8)], Num(0, lineno=1335, col_offset=22), lineno=1335, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1336, col_offset=8), 'pendingcr', Store(), lineno=1336, col_offset=8)], Name('False', Load(), lineno=1336, col_offset=25), lineno=1336, col_offset=8)], [], lineno=1331, col_offset=4), FunctionDef('decode', arguments([Name('self', Param(), lineno=1338, col_offset=15), Name('input', Param(), lineno=1338, col_offset=21), Name('final', Param(), lineno=1338, col_offset=28)], None, None, [Name('False', Load(), lineno=1338, col_offset=34)]), [If(Compare(Attribute(Name('self', Load(), lineno=1340, col_offset=11), 'decoder', Load(), lineno=1340, col_offset=11), [Is()], [Name('None', Load(), lineno=1340, col_offset=27)], lineno=1340, col_offset=11), [Assign([Name('output', Store(), lineno=1341, col_offset=12)], Name('input', Load(), lineno=1341, col_offset=21), lineno=1341, col_offset=12)], [Assign([Name('output', Store(), lineno=1343, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1343, col_offset=21), 'decoder', Load(), lineno=1343, col_offset=21), 'decode', Load(), lineno=1343, col_offset=21), [Name('input', Load(), lineno=1343, col_offset=41)], [keyword('final', Name('final', Load(), lineno=1343, col_offset=54))], None, None, lineno=1343, col_offset=21), lineno=1343, col_offset=12)], lineno=1340, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1344, col_offset=11), 'pendingcr', Load(), lineno=1344, col_offset=11), BoolOp(Or(), [Name('output', Load(), lineno=1344, col_offset=31), Name('final', Load(), lineno=1344, col_offset=41)], lineno=1344, col_offset=31)], lineno=1344, col_offset=11), [Assign([Name('output', Store(), lineno=1345, col_offset=12)], BinOp(Str(u'\r', lineno=1345, col_offset=21), Add(), Name('output', Load(), lineno=1345, col_offset=28), lineno=1345, col_offset=21), lineno=1345, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1346, col_offset=12), 'pendingcr', Store(), lineno=1346, col_offset=12)], Name('False', Load(), lineno=1346, col_offset=29), lineno=1346, col_offset=12)], [], lineno=1344, col_offset=8), If(BoolOp(And(), [Call(Attribute(Name('output', Load(), lineno=1350, col_offset=11), 'endswith', Load(), lineno=1350, col_offset=11), [Str(u'\r', lineno=1350, col_offset=27)], [], None, None, lineno=1350, col_offset=11), UnaryOp(Not(), Name('final', Load(), lineno=1350, col_offset=41), lineno=1350, col_offset=37)], lineno=1350, col_offset=11), [Assign([Name('output', Store(), lineno=1351, col_offset=12)], Subscript(Name('output', Load(), lineno=1351, col_offset=21), Slice(None, Num(-1, lineno=1351, col_offset=30), None), Load(), lineno=1351, col_offset=21), lineno=1351, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1352, col_offset=12), 'pendingcr', Store(), lineno=1352, col_offset=12)], Name('True', Load(), lineno=1352, col_offset=29), lineno=1352, col_offset=12)], [], lineno=1350, col_offset=8), Assign([Name('crlf', Store(), lineno=1355, col_offset=8)], Call(Attribute(Name('output', Load(), lineno=1355, col_offset=15), 'count', Load(), lineno=1355, col_offset=15), [Str(u'\r\n', lineno=1355, col_offset=28)], [], None, None, lineno=1355, col_offset=15), lineno=1355, col_offset=8), Assign([Name('cr', Store(), lineno=1356, col_offset=8)], BinOp(Call(Attribute(Name('output', Load(), lineno=1356, col_offset=13), 'count', Load(), lineno=1356, col_offset=13), [Str(u'\r', lineno=1356, col_offset=26)], [], None, None, lineno=1356, col_offset=13), Sub(), Name('crlf', Load(), lineno=1356, col_offset=34), lineno=1356, col_offset=13), lineno=1356, col_offset=8), Assign([Name('lf', Store(), lineno=1357, col_offset=8)], BinOp(Call(Attribute(Name('output', Load(), lineno=1357, col_offset=13), 'count', Load(), lineno=1357, col_offset=13), [Str(u'\n', lineno=1357, col_offset=26)], [], None, None, lineno=1357, col_offset=13), Sub(), Name('crlf', Load(), lineno=1357, col_offset=34), lineno=1357, col_offset=13), lineno=1357, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=1358, col_offset=8), 'seennl', Store(), lineno=1358, col_offset=8), BitOr(), BinOp(BinOp(BoolOp(And(), [Name('lf', Load(), lineno=1358, col_offset=24), Attribute(Name('self', Load(), lineno=1358, col_offset=31), '_LF', Load(), lineno=1358, col_offset=31)], lineno=1358, col_offset=24), BitOr(), BoolOp(And(), [Name('cr', Load(), lineno=1358, col_offset=44), Attribute(Name('self', Load(), lineno=1358, col_offset=51), '_CR', Load(), lineno=1358, col_offset=51)], lineno=1358, col_offset=44), lineno=1358, col_offset=23), BitOr(), BoolOp(And(), [Name('crlf', Load(), lineno=1359, col_offset=23), Attribute(Name('self', Load(), lineno=1359, col_offset=32), '_CRLF', Load(), lineno=1359, col_offset=32)], lineno=1359, col_offset=23), lineno=1359, col_offset=20), lineno=1358, col_offset=8), If(Attribute(Name('self', Load(), lineno=1361, col_offset=11), 'translate', Load(), lineno=1361, col_offset=11), [If(Name('crlf', Load(), lineno=1362, col_offset=15), [Assign([Name('output', Store(), lineno=1363, col_offset=16)], Call(Attribute(Name('output', Load(), lineno=1363, col_offset=25), 'replace', Load(), lineno=1363, col_offset=25), [Str(u'\r\n', lineno=1363, col_offset=40), Str(u'\n', lineno=1363, col_offset=48)], [], None, None, lineno=1363, col_offset=25), lineno=1363, col_offset=16)], [], lineno=1362, col_offset=12), If(Name('cr', Load(), lineno=1364, col_offset=15), [Assign([Name('output', Store(), lineno=1365, col_offset=16)], Call(Attribute(Name('output', Load(), lineno=1365, col_offset=25), 'replace', Load(), lineno=1365, col_offset=25), [Str(u'\r', lineno=1365, col_offset=40), Str(u'\n', lineno=1365, col_offset=46)], [], None, None, lineno=1365, col_offset=25), lineno=1365, col_offset=16)], [], lineno=1364, col_offset=12)], [], lineno=1361, col_offset=8), Return(Name('output', Load(), lineno=1367, col_offset=15), lineno=1367, col_offset=8)], [], lineno=1338, col_offset=4), FunctionDef('getstate', arguments([Name('self', Param(), lineno=1369, col_offset=17)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=1370, col_offset=11), 'decoder', Load(), lineno=1370, col_offset=11), [Is()], [Name('None', Load(), lineno=1370, col_offset=27)], lineno=1370, col_offset=11), [Assign([Name('buf', Store(), lineno=1371, col_offset=12)], Str('', lineno=1371, col_offset=18), lineno=1371, col_offset=12), Assign([Name('flag', Store(), lineno=1372, col_offset=12)], Num(0, lineno=1372, col_offset=19), lineno=1372, col_offset=12)], [Assign([Tuple([Name('buf', Store(), lineno=1374, col_offset=12), Name('flag', Store(), lineno=1374, col_offset=17)], Store(), lineno=1374, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1374, col_offset=24), 'decoder', Load(), lineno=1374, col_offset=24), 'getstate', Load(), lineno=1374, col_offset=24), [], [], None, None, lineno=1374, col_offset=24), lineno=1374, col_offset=12)], lineno=1370, col_offset=8), AugAssign(Name('flag', Store(), lineno=1375, col_offset=8), LShift(), Num(1, lineno=1375, col_offset=17), lineno=1375, col_offset=8), If(Attribute(Name('self', Load(), lineno=1376, col_offset=11), 'pendingcr', Load(), lineno=1376, col_offset=11), [AugAssign(Name('flag', Store(), lineno=1377, col_offset=12), BitOr(), Num(1, lineno=1377, col_offset=20), lineno=1377, col_offset=12)], [], lineno=1376, col_offset=8), Return(Tuple([Name('buf', Load(), lineno=1378, col_offset=15), Name('flag', Load(), lineno=1378, col_offset=20)], Load(), lineno=1378, col_offset=15), lineno=1378, col_offset=8)], [], lineno=1369, col_offset=4), FunctionDef('setstate', arguments([Name('self', Param(), lineno=1380, col_offset=17), Name('state', Param(), lineno=1380, col_offset=23)], None, None, []), [Assign([Tuple([Name('buf', Store(), lineno=1381, col_offset=8), Name('flag', Store(), lineno=1381, col_offset=13)], Store(), lineno=1381, col_offset=8)], Name('state', Load(), lineno=1381, col_offset=20), lineno=1381, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1382, col_offset=8), 'pendingcr', Store(), lineno=1382, col_offset=8)], Call(Name('bool', Load(), lineno=1382, col_offset=25), [BinOp(Name('flag', Load(), lineno=1382, col_offset=30), BitAnd(), Num(1, lineno=1382, col_offset=37), lineno=1382, col_offset=30)], [], None, None, lineno=1382, col_offset=25), lineno=1382, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1383, col_offset=11), 'decoder', Load(), lineno=1383, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1383, col_offset=31)], lineno=1383, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1384, col_offset=12), 'decoder', Load(), lineno=1384, col_offset=12), 'setstate', Load(), lineno=1384, col_offset=12), [Tuple([Name('buf', Load(), lineno=1384, col_offset=35), BinOp(Name('flag', Load(), lineno=1384, col_offset=40), RShift(), Num(1, lineno=1384, col_offset=48), lineno=1384, col_offset=40)], Load(), lineno=1384, col_offset=35)], [], None, None, lineno=1384, col_offset=12), lineno=1384, col_offset=12)], [], lineno=1383, col_offset=8)], [], lineno=1380, col_offset=4), FunctionDef('reset', arguments([Name('self', Param(), lineno=1386, col_offset=14)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1387, col_offset=8), 'seennl', Store(), lineno=1387, col_offset=8)], Num(0, lineno=1387, col_offset=22), lineno=1387, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1388, col_offset=8), 'pendingcr', Store(), lineno=1388, col_offset=8)], Name('False', Load(), lineno=1388, col_offset=25), lineno=1388, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1389, col_offset=11), 'decoder', Load(), lineno=1389, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1389, col_offset=31)], lineno=1389, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1390, col_offset=12), 'decoder', Load(), lineno=1390, col_offset=12), 'reset', Load(), lineno=1390, col_offset=12), [], [], None, None, lineno=1390, col_offset=12), lineno=1390, col_offset=12)], [], lineno=1389, col_offset=8)], [], lineno=1386, col_offset=4), Assign([Name('_LF', Store(), lineno=1392, col_offset=4)], Num(1, lineno=1392, col_offset=10), lineno=1392, col_offset=4), Assign([Name('_CR', Store(), lineno=1393, col_offset=4)], Num(2, lineno=1393, col_offset=10), lineno=1393, col_offset=4), Assign([Name('_CRLF', Store(), lineno=1394, col_offset=4)], Num(4, lineno=1394, col_offset=12), lineno=1394, col_offset=4), FunctionDef('newlines', arguments([Name('self', Param(), lineno=1397, col_offset=17)], None, None, []), [Return(Subscript(Tuple([Name('None', Load(), lineno=1398, col_offset=16), Str(u'\n', lineno=1399, col_offset=16), Str(u'\r', lineno=1400, col_offset=16), Tuple([Str(u'\r', lineno=1401, col_offset=17), Str(u'\n', lineno=1401, col_offset=23)], Load(), lineno=1401, col_offset=17), Str(u'\r\n', lineno=1402, col_offset=16), Tuple([Str(u'\n', lineno=1403, col_offset=17), Str(u'\r\n', lineno=1403, col_offset=23)], Load(), lineno=1403, col_offset=17), Tuple([Str(u'\r', lineno=1404, col_offset=17), Str(u'\r\n', lineno=1404, col_offset=23)], Load(), lineno=1404, col_offset=17), Tuple([Str(u'\r', lineno=1405, col_offset=17), Str(u'\n', lineno=1405, col_offset=23), Str(u'\r\n', lineno=1405, col_offset=29)], Load(), lineno=1405, col_offset=17)], Load(), lineno=1398, col_offset=16), Index(Attribute(Name('self', Load(), lineno=1406, col_offset=17), 'seennl', Load(), lineno=1406, col_offset=17)), Load(), lineno=1398, col_offset=16), lineno=1398, col_offset=8)], [Name('property', Load(), lineno=1396, col_offset=5)], lineno=1396, col_offset=4)], [], lineno=1324, col_offset=0), ClassDef('TextIOWrapper', [Name('TextIOBase', Load(), lineno=1409, col_offset=20)], [Expr(Str(u'Character and line based layer over a BufferedIOBase object, buffer.\n\n    encoding gives the name of the encoding that the stream will be\n    decoded or encoded with. It defaults to locale.getpreferredencoding.\n\n    errors determines the strictness of encoding and decoding (see the\n    codecs.register) and defaults to "strict".\n\n    newline can be None, \'\', \'\\n\', \'\\r\', or \'\\r\\n\'.  It controls the\n    handling of line endings. If it is None, universal newlines is\n    enabled.  With this enabled, on input, the lines endings \'\\n\', \'\\r\',\n    or \'\\r\\n\' are translated to \'\\n\' before being returned to the\n    caller. Conversely, on output, \'\\n\' is translated to the system\n    default line seperator, os.linesep. If newline is any other of its\n    legal values, that newline becomes the newline when the file is read\n    and it is returned untranslated. On output, \'\\n\' is converted to the\n    newline.\n\n    If line_buffering is True, a call to flush is implied when a call to\n    write contains a newline character.\n    ', lineno=1431, col_offset=-1), lineno=1431, col_offset=-1), Assign([Name('_CHUNK_SIZE', Store(), lineno=1433, col_offset=4)], Num(2048, lineno=1433, col_offset=18), lineno=1433, col_offset=4), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1435, col_offset=17), Name('buffer', Param(), lineno=1435, col_offset=23), Name('encoding', Param(), lineno=1435, col_offset=31), Name('errors', Param(), lineno=1435, col_offset=46), Name('newline', Param(), lineno=1435, col_offset=59), Name('line_buffering', Param(), lineno=1436, col_offset=17)], None, None, [Name('None', Load(), lineno=1435, col_offset=40), Name('None', Load(), lineno=1435, col_offset=53), Name('None', Load(), lineno=1435, col_offset=67), Name('False', Load(), lineno=1436, col_offset=32)]), [If(BoolOp(And(), [Compare(Name('newline', Load(), lineno=1437, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1437, col_offset=26)], lineno=1437, col_offset=11), UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1437, col_offset=39), [Name('newline', Load(), lineno=1437, col_offset=50), Name('basestring', Load(), lineno=1437, col_offset=59)], [], None, None, lineno=1437, col_offset=39), lineno=1437, col_offset=35)], lineno=1437, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=1438, col_offset=18), [BinOp(Str(u'illegal newline type: %r', lineno=1438, col_offset=28), Mod(), Tuple([Call(Name('type', Load(), lineno=1438, col_offset=58), [Name('newline', Load(), lineno=1438, col_offset=63)], [], None, None, lineno=1438, col_offset=58)], Load(), lineno=1438, col_offset=58), lineno=1438, col_offset=28)], [], None, None, lineno=1438, col_offset=18), None, None, lineno=1438, col_offset=12)], [], lineno=1437, col_offset=8), If(Compare(Name('newline', Load(), lineno=1439, col_offset=11), [NotIn()], [Tuple([Name('None', Load(), lineno=1439, col_offset=27), Str(u'', lineno=1439, col_offset=33), Str(u'\n', lineno=1439, col_offset=37), Str(u'\r', lineno=1439, col_offset=43), Str(u'\r\n', lineno=1439, col_offset=49)], Load(), lineno=1439, col_offset=27)], lineno=1439, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1440, col_offset=18), [BinOp(Str(u'illegal newline value: %r', lineno=1440, col_offset=29), Mod(), Tuple([Name('newline', Load(), lineno=1440, col_offset=60)], Load(), lineno=1440, col_offset=60), lineno=1440, col_offset=29)], [], None, None, lineno=1440, col_offset=18), None, None, lineno=1440, col_offset=12)], [], lineno=1439, col_offset=8), If(Compare(Name('encoding', Load(), lineno=1441, col_offset=11), [Is()], [Name('None', Load(), lineno=1441, col_offset=23)], lineno=1441, col_offset=11), [TryExcept([Import([alias('locale', None)], lineno=1443, col_offset=16)], [ExceptHandler(Name('ImportError', Load(), lineno=1444, col_offset=19), None, [Assign([Name('encoding', Store(), lineno=1446, col_offset=16)], Str(u'ascii', lineno=1446, col_offset=27), lineno=1446, col_offset=16)], lineno=1444, col_offset=12)], [Assign([Name('encoding', Store(), lineno=1448, col_offset=16)], Call(Attribute(Name('locale', Load(), lineno=1448, col_offset=27), 'getpreferredencoding', Load(), lineno=1448, col_offset=27), [], [], None, None, lineno=1448, col_offset=27), lineno=1448, col_offset=16)], lineno=1442, col_offset=12)], [], lineno=1441, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1450, col_offset=15), [Name('encoding', Load(), lineno=1450, col_offset=26), Name('basestring', Load(), lineno=1450, col_offset=36)], [], None, None, lineno=1450, col_offset=15), lineno=1450, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1451, col_offset=18), [BinOp(Str(u'invalid encoding: %r', lineno=1451, col_offset=29), Mod(), Name('encoding', Load(), lineno=1451, col_offset=54), lineno=1451, col_offset=29)], [], None, None, lineno=1451, col_offset=18), None, None, lineno=1451, col_offset=12)], [], lineno=1450, col_offset=8), If(Compare(Name('errors', Load(), lineno=1453, col_offset=11), [Is()], [Name('None', Load(), lineno=1453, col_offset=21)], lineno=1453, col_offset=11), [Assign([Name('errors', Store(), lineno=1454, col_offset=12)], Str(u'strict', lineno=1454, col_offset=21), lineno=1454, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1456, col_offset=19), [Name('errors', Load(), lineno=1456, col_offset=30), Name('basestring', Load(), lineno=1456, col_offset=38)], [], None, None, lineno=1456, col_offset=19), lineno=1456, col_offset=15), [Raise(Call(Name('ValueError', Load(), lineno=1457, col_offset=22), [BinOp(Str(u'invalid errors: %r', lineno=1457, col_offset=33), Mod(), Name('errors', Load(), lineno=1457, col_offset=56), lineno=1457, col_offset=33)], [], None, None, lineno=1457, col_offset=22), None, None, lineno=1457, col_offset=16)], [], lineno=1456, col_offset=12)], lineno=1453, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1459, col_offset=8), 'buffer', Store(), lineno=1459, col_offset=8)], Name('buffer', Load(), lineno=1459, col_offset=22), lineno=1459, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1460, col_offset=8), '_line_buffering', Store(), lineno=1460, col_offset=8)], Name('line_buffering', Load(), lineno=1460, col_offset=31), lineno=1460, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1461, col_offset=8), '_encoding', Store(), lineno=1461, col_offset=8)], Name('encoding', Load(), lineno=1461, col_offset=25), lineno=1461, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1462, col_offset=8), '_errors', Store(), lineno=1462, col_offset=8)], Name('errors', Load(), lineno=1462, col_offset=23), lineno=1462, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1463, col_offset=8), '_readuniversal', Store(), lineno=1463, col_offset=8)], UnaryOp(Not(), Name('newline', Load(), lineno=1463, col_offset=34), lineno=1463, col_offset=30), lineno=1463, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1464, col_offset=8), '_readtranslate', Store(), lineno=1464, col_offset=8)], Compare(Name('newline', Load(), lineno=1464, col_offset=30), [Is()], [Name('None', Load(), lineno=1464, col_offset=41)], lineno=1464, col_offset=30), lineno=1464, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1465, col_offset=8), '_readnl', Store(), lineno=1465, col_offset=8)], Name('newline', Load(), lineno=1465, col_offset=23), lineno=1465, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1466, col_offset=8), '_writetranslate', Store(), lineno=1466, col_offset=8)], Compare(Name('newline', Load(), lineno=1466, col_offset=31), [NotEq()], [Str(u'', lineno=1466, col_offset=42)], lineno=1466, col_offset=31), lineno=1466, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1467, col_offset=8), '_writenl', Store(), lineno=1467, col_offset=8)], BoolOp(Or(), [Name('newline', Load(), lineno=1467, col_offset=24), Attribute(Name('os', Load(), lineno=1467, col_offset=35), 'linesep', Load(), lineno=1467, col_offset=35)], lineno=1467, col_offset=24), lineno=1467, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1468, col_offset=8), '_encoder', Store(), lineno=1468, col_offset=8)], Name('None', Load(), lineno=1468, col_offset=24), lineno=1468, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1469, col_offset=8), '_decoder', Store(), lineno=1469, col_offset=8)], Name('None', Load(), lineno=1469, col_offset=24), lineno=1469, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1470, col_offset=8), '_decoded_chars', Store(), lineno=1470, col_offset=8)], Str(u'', lineno=1470, col_offset=30), lineno=1470, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1471, col_offset=8), '_decoded_chars_used', Store(), lineno=1471, col_offset=8)], Num(0, lineno=1471, col_offset=35), lineno=1471, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1472, col_offset=8), '_snapshot', Store(), lineno=1472, col_offset=8)], Name('None', Load(), lineno=1472, col_offset=25), lineno=1472, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1473, col_offset=8), '_seekable', Store(), lineno=1473, col_offset=8), Attribute(Name('self', Load(), lineno=1473, col_offset=25), '_telling', Store(), lineno=1473, col_offset=25)], Call(Attribute(Attribute(Name('self', Load(), lineno=1473, col_offset=41), 'buffer', Load(), lineno=1473, col_offset=41), 'seekable', Load(), lineno=1473, col_offset=41), [], [], None, None, lineno=1473, col_offset=41), lineno=1473, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1475, col_offset=11), '_seekable', Load(), lineno=1475, col_offset=11), Call(Attribute(Name('self', Load(), lineno=1475, col_offset=30), 'writable', Load(), lineno=1475, col_offset=30), [], [], None, None, lineno=1475, col_offset=30)], lineno=1475, col_offset=11), [Assign([Name('position', Store(), lineno=1476, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1476, col_offset=23), 'buffer', Load(), lineno=1476, col_offset=23), 'tell', Load(), lineno=1476, col_offset=23), [], [], None, None, lineno=1476, col_offset=23), lineno=1476, col_offset=12), If(Compare(Name('position', Load(), lineno=1477, col_offset=15), [NotEq()], [Num(0, lineno=1477, col_offset=27)], lineno=1477, col_offset=15), [TryExcept([Expr(Call(Attribute(Call(Attribute(Name('self', Load(), lineno=1479, col_offset=20), '_get_encoder', Load(), lineno=1479, col_offset=20), [], [], None, None, lineno=1479, col_offset=20), 'setstate', Load(), lineno=1479, col_offset=20), [Num(0, lineno=1479, col_offset=49)], [], None, None, lineno=1479, col_offset=20), lineno=1479, col_offset=20)], [ExceptHandler(Name('LookupError', Load(), lineno=1480, col_offset=23), None, [Pass( lineno=1482, col_offset=20)], lineno=1480, col_offset=16)], [], lineno=1478, col_offset=16)], [], lineno=1477, col_offset=12)], [], lineno=1475, col_offset=8)], [], lineno=1435, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=1493, col_offset=17)], None, None, []), [TryExcept([Assign([Name('name', Store(), lineno=1495, col_offset=12)], Attribute(Name('self', Load(), lineno=1495, col_offset=19), 'name', Load(), lineno=1495, col_offset=19), lineno=1495, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1496, col_offset=15), None, [Return(Call(Attribute(Str(u"<_pyio.TextIOWrapper encoding='{0}'>", lineno=1497, col_offset=19), 'format', Load(), lineno=1497, col_offset=19), [Attribute(Name('self', Load(), lineno=1497, col_offset=65), 'encoding', Load(), lineno=1497, col_offset=65)], [], None, None, lineno=1497, col_offset=19), lineno=1497, col_offset=12)], lineno=1496, col_offset=8)], [Return(Call(Attribute(Str(u"<_pyio.TextIOWrapper name={0!r} encoding='{1}'>", lineno=1499, col_offset=19), 'format', Load(), lineno=1499, col_offset=19), [Name('name', Load(), lineno=1500, col_offset=16), Attribute(Name('self', Load(), lineno=1500, col_offset=22), 'encoding', Load(), lineno=1500, col_offset=22)], [], None, None, lineno=1499, col_offset=19), lineno=1499, col_offset=12)], lineno=1494, col_offset=8)], [], lineno=1493, col_offset=4), FunctionDef('encoding', arguments([Name('self', Param(), lineno=1503, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=1504, col_offset=15), '_encoding', Load(), lineno=1504, col_offset=15), lineno=1504, col_offset=8)], [Name('property', Load(), lineno=1502, col_offset=5)], lineno=1502, col_offset=4), FunctionDef('errors', arguments([Name('self', Param(), lineno=1507, col_offset=15)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=1508, col_offset=15), '_errors', Load(), lineno=1508, col_offset=15), lineno=1508, col_offset=8)], [Name('property', Load(), lineno=1506, col_offset=5)], lineno=1506, col_offset=4), FunctionDef('line_buffering', arguments([Name('self', Param(), lineno=1511, col_offset=23)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=1512, col_offset=15), '_line_buffering', Load(), lineno=1512, col_offset=15), lineno=1512, col_offset=8)], [Name('property', Load(), lineno=1510, col_offset=5)], lineno=1510, col_offset=4), FunctionDef('seekable', arguments([Name('self', Param(), lineno=1514, col_offset=17)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=1515, col_offset=15), '_seekable', Load(), lineno=1515, col_offset=15), lineno=1515, col_offset=8)], [], lineno=1514, col_offset=4), FunctionDef('readable', arguments([Name('self', Param(), lineno=1517, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1518, col_offset=15), 'buffer', Load(), lineno=1518, col_offset=15), 'readable', Load(), lineno=1518, col_offset=15), [], [], None, None, lineno=1518, col_offset=15), lineno=1518, col_offset=8)], [], lineno=1517, col_offset=4), FunctionDef('writable', arguments([Name('self', Param(), lineno=1520, col_offset=17)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1521, col_offset=15), 'buffer', Load(), lineno=1521, col_offset=15), 'writable', Load(), lineno=1521, col_offset=15), [], [], None, None, lineno=1521, col_offset=15), lineno=1521, col_offset=8)], [], lineno=1520, col_offset=4), FunctionDef('flush', arguments([Name('self', Param(), lineno=1523, col_offset=14)], None, None, []), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1524, col_offset=8), 'buffer', Load(), lineno=1524, col_offset=8), 'flush', Load(), lineno=1524, col_offset=8), [], [], None, None, lineno=1524, col_offset=8), lineno=1524, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1525, col_offset=8), '_telling', Store(), lineno=1525, col_offset=8)], Attribute(Name('self', Load(), lineno=1525, col_offset=24), '_seekable', Load(), lineno=1525, col_offset=24), lineno=1525, col_offset=8)], [], lineno=1523, col_offset=4), FunctionDef('close', arguments([Name('self', Param(), lineno=1527, col_offset=14)], None, None, []), [If(BoolOp(And(), [Compare(Attribute(Name('self', Load(), lineno=1528, col_offset=11), 'buffer', Load(), lineno=1528, col_offset=11), [IsNot()], [Name('None', Load(), lineno=1528, col_offset=30)], lineno=1528, col_offset=11), UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1528, col_offset=43), 'closed', Load(), lineno=1528, col_offset=43), lineno=1528, col_offset=39)], lineno=1528, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1529, col_offset=12), 'flush', Load(), lineno=1529, col_offset=12), [], [], None, None, lineno=1529, col_offset=12), lineno=1529, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1530, col_offset=12), 'buffer', Load(), lineno=1530, col_offset=12), 'close', Load(), lineno=1530, col_offset=12), [], [], None, None, lineno=1530, col_offset=12), lineno=1530, col_offset=12)], [], lineno=1528, col_offset=8)], [], lineno=1527, col_offset=4), FunctionDef('closed', arguments([Name('self', Param(), lineno=1533, col_offset=15)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=1534, col_offset=15), 'buffer', Load(), lineno=1534, col_offset=15), 'closed', Load(), lineno=1534, col_offset=15), lineno=1534, col_offset=8)], [Name('property', Load(), lineno=1532, col_offset=5)], lineno=1532, col_offset=4), FunctionDef('name', arguments([Name('self', Param(), lineno=1537, col_offset=13)], None, None, []), [Return(Attribute(Attribute(Name('self', Load(), lineno=1538, col_offset=15), 'buffer', Load(), lineno=1538, col_offset=15), 'name', Load(), lineno=1538, col_offset=15), lineno=1538, col_offset=8)], [Name('property', Load(), lineno=1536, col_offset=5)], lineno=1536, col_offset=4), FunctionDef('fileno', arguments([Name('self', Param(), lineno=1540, col_offset=15)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1541, col_offset=15), 'buffer', Load(), lineno=1541, col_offset=15), 'fileno', Load(), lineno=1541, col_offset=15), [], [], None, None, lineno=1541, col_offset=15), lineno=1541, col_offset=8)], [], lineno=1540, col_offset=4), FunctionDef('isatty', arguments([Name('self', Param(), lineno=1543, col_offset=15)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1544, col_offset=15), 'buffer', Load(), lineno=1544, col_offset=15), 'isatty', Load(), lineno=1544, col_offset=15), [], [], None, None, lineno=1544, col_offset=15), lineno=1544, col_offset=8)], [], lineno=1543, col_offset=4), FunctionDef('write', arguments([Name('self', Param(), lineno=1546, col_offset=14), Name('s', Param(), lineno=1546, col_offset=20)], None, None, []), [If(Attribute(Name('self', Load(), lineno=1547, col_offset=11), 'closed', Load(), lineno=1547, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1548, col_offset=18), [Str(u'write to closed file', lineno=1548, col_offset=29)], [], None, None, lineno=1548, col_offset=18), None, None, lineno=1548, col_offset=12)], [], lineno=1547, col_offset=8), If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1549, col_offset=15), [Name('s', Load(), lineno=1549, col_offset=26), Name('unicode', Load(), lineno=1549, col_offset=29)], [], None, None, lineno=1549, col_offset=15), lineno=1549, col_offset=11), [Raise(Call(Name('TypeError', Load(), lineno=1550, col_offset=18), [BinOp(Str(u"can't write %s to text stream", lineno=1550, col_offset=28), Mod(), Attribute(Attribute(Name('s', Load(), lineno=1551, col_offset=28), '__class__', Load(), lineno=1551, col_offset=28), '__name__', Load(), lineno=1551, col_offset=28), lineno=1550, col_offset=28)], [], None, None, lineno=1550, col_offset=18), None, None, lineno=1550, col_offset=12)], [], lineno=1549, col_offset=8), Assign([Name('length', Store(), lineno=1552, col_offset=8)], Call(Name('len', Load(), lineno=1552, col_offset=17), [Name('s', Load(), lineno=1552, col_offset=21)], [], None, None, lineno=1552, col_offset=17), lineno=1552, col_offset=8), Assign([Name('haslf', Store(), lineno=1553, col_offset=8)], BoolOp(And(), [BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1553, col_offset=17), '_writetranslate', Load(), lineno=1553, col_offset=17), Attribute(Name('self', Load(), lineno=1553, col_offset=41), '_line_buffering', Load(), lineno=1553, col_offset=41)], lineno=1553, col_offset=17), Compare(Str(u'\n', lineno=1553, col_offset=67), [In()], [Name('s', Load(), lineno=1553, col_offset=75)], lineno=1553, col_offset=67)], lineno=1553, col_offset=16), lineno=1553, col_offset=8), If(BoolOp(And(), [Name('haslf', Load(), lineno=1554, col_offset=11), Attribute(Name('self', Load(), lineno=1554, col_offset=21), '_writetranslate', Load(), lineno=1554, col_offset=21), Compare(Attribute(Name('self', Load(), lineno=1554, col_offset=46), '_writenl', Load(), lineno=1554, col_offset=46), [NotEq()], [Str(u'\n', lineno=1554, col_offset=63)], lineno=1554, col_offset=46)], lineno=1554, col_offset=11), [Assign([Name('s', Store(), lineno=1555, col_offset=12)], Call(Attribute(Name('s', Load(), lineno=1555, col_offset=16), 'replace', Load(), lineno=1555, col_offset=16), [Str(u'\n', lineno=1555, col_offset=26), Attribute(Name('self', Load(), lineno=1555, col_offset=32), '_writenl', Load(), lineno=1555, col_offset=32)], [], None, None, lineno=1555, col_offset=16), lineno=1555, col_offset=12)], [], lineno=1554, col_offset=8), Assign([Name('encoder', Store(), lineno=1556, col_offset=8)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1556, col_offset=18), '_encoder', Load(), lineno=1556, col_offset=18), Call(Attribute(Name('self', Load(), lineno=1556, col_offset=35), '_get_encoder', Load(), lineno=1556, col_offset=35), [], [], None, None, lineno=1556, col_offset=35)], lineno=1556, col_offset=18), lineno=1556, col_offset=8), Assign([Name('b', Store(), lineno=1558, col_offset=8)], Call(Attribute(Name('encoder', Load(), lineno=1558, col_offset=12), 'encode', Load(), lineno=1558, col_offset=12), [Name('s', Load(), lineno=1558, col_offset=27)], [], None, None, lineno=1558, col_offset=12), lineno=1558, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1559, col_offset=8), 'buffer', Load(), lineno=1559, col_offset=8), 'write', Load(), lineno=1559, col_offset=8), [Name('b', Load(), lineno=1559, col_offset=26)], [], None, None, lineno=1559, col_offset=8), lineno=1559, col_offset=8), If(BoolOp(And(), [Attribute(Name('self', Load(), lineno=1560, col_offset=11), '_line_buffering', Load(), lineno=1560, col_offset=11), BoolOp(Or(), [Name('haslf', Load(), lineno=1560, col_offset=37), Compare(Str(u'\r', lineno=1560, col_offset=46), [In()], [Name('s', Load(), lineno=1560, col_offset=54)], lineno=1560, col_offset=46)], lineno=1560, col_offset=37)], lineno=1560, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1561, col_offset=12), 'flush', Load(), lineno=1561, col_offset=12), [], [], None, None, lineno=1561, col_offset=12), lineno=1561, col_offset=12)], [], lineno=1560, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1562, col_offset=8), '_snapshot', Store(), lineno=1562, col_offset=8)], Name('None', Load(), lineno=1562, col_offset=25), lineno=1562, col_offset=8), If(Attribute(Name('self', Load(), lineno=1563, col_offset=11), '_decoder', Load(), lineno=1563, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1564, col_offset=12), '_decoder', Load(), lineno=1564, col_offset=12), 'reset', Load(), lineno=1564, col_offset=12), [], [], None, None, lineno=1564, col_offset=12), lineno=1564, col_offset=12)], [], lineno=1563, col_offset=8), Return(Name('length', Load(), lineno=1565, col_offset=15), lineno=1565, col_offset=8)], [], lineno=1546, col_offset=4), FunctionDef('_get_encoder', arguments([Name('self', Param(), lineno=1567, col_offset=21)], None, None, []), [Assign([Name('make_encoder', Store(), lineno=1568, col_offset=8)], Call(Attribute(Name('codecs', Load(), lineno=1568, col_offset=23), 'getincrementalencoder', Load(), lineno=1568, col_offset=23), [Attribute(Name('self', Load(), lineno=1568, col_offset=52), '_encoding', Load(), lineno=1568, col_offset=52)], [], None, None, lineno=1568, col_offset=23), lineno=1568, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1569, col_offset=8), '_encoder', Store(), lineno=1569, col_offset=8)], Call(Name('make_encoder', Load(), lineno=1569, col_offset=24), [Attribute(Name('self', Load(), lineno=1569, col_offset=37), '_errors', Load(), lineno=1569, col_offset=37)], [], None, None, lineno=1569, col_offset=24), lineno=1569, col_offset=8), Return(Attribute(Name('self', Load(), lineno=1570, col_offset=15), '_encoder', Load(), lineno=1570, col_offset=15), lineno=1570, col_offset=8)], [], lineno=1567, col_offset=4), FunctionDef('_get_decoder', arguments([Name('self', Param(), lineno=1572, col_offset=21)], None, None, []), [Assign([Name('make_decoder', Store(), lineno=1573, col_offset=8)], Call(Attribute(Name('codecs', Load(), lineno=1573, col_offset=23), 'getincrementaldecoder', Load(), lineno=1573, col_offset=23), [Attribute(Name('self', Load(), lineno=1573, col_offset=52), '_encoding', Load(), lineno=1573, col_offset=52)], [], None, None, lineno=1573, col_offset=23), lineno=1573, col_offset=8), Assign([Name('decoder', Store(), lineno=1574, col_offset=8)], Call(Name('make_decoder', Load(), lineno=1574, col_offset=18), [Attribute(Name('self', Load(), lineno=1574, col_offset=31), '_errors', Load(), lineno=1574, col_offset=31)], [], None, None, lineno=1574, col_offset=18), lineno=1574, col_offset=8), If(Attribute(Name('self', Load(), lineno=1575, col_offset=11), '_readuniversal', Load(), lineno=1575, col_offset=11), [Assign([Name('decoder', Store(), lineno=1576, col_offset=12)], Call(Name('IncrementalNewlineDecoder', Load(), lineno=1576, col_offset=22), [Name('decoder', Load(), lineno=1576, col_offset=48), Attribute(Name('self', Load(), lineno=1576, col_offset=57), '_readtranslate', Load(), lineno=1576, col_offset=57)], [], None, None, lineno=1576, col_offset=22), lineno=1576, col_offset=12)], [], lineno=1575, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1577, col_offset=8), '_decoder', Store(), lineno=1577, col_offset=8)], Name('decoder', Load(), lineno=1577, col_offset=24), lineno=1577, col_offset=8), Return(Name('decoder', Load(), lineno=1578, col_offset=15), lineno=1578, col_offset=8)], [], lineno=1572, col_offset=4), FunctionDef('_set_decoded_chars', arguments([Name('self', Param(), lineno=1583, col_offset=27), Name('chars', Param(), lineno=1583, col_offset=33)], None, None, []), [Expr(Str(u'Set the _decoded_chars buffer.', lineno=1584, col_offset=8), lineno=1584, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1585, col_offset=8), '_decoded_chars', Store(), lineno=1585, col_offset=8)], Name('chars', Load(), lineno=1585, col_offset=30), lineno=1585, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1586, col_offset=8), '_decoded_chars_used', Store(), lineno=1586, col_offset=8)], Num(0, lineno=1586, col_offset=35), lineno=1586, col_offset=8)], [], lineno=1583, col_offset=4), FunctionDef('_get_decoded_chars', arguments([Name('self', Param(), lineno=1588, col_offset=27), Name('n', Param(), lineno=1588, col_offset=33)], None, None, [Name('None', Load(), lineno=1588, col_offset=35)]), [Expr(Str(u'Advance into the _decoded_chars buffer.', lineno=1589, col_offset=8), lineno=1589, col_offset=8), Assign([Name('offset', Store(), lineno=1590, col_offset=8)], Attribute(Name('self', Load(), lineno=1590, col_offset=17), '_decoded_chars_used', Load(), lineno=1590, col_offset=17), lineno=1590, col_offset=8), If(Compare(Name('n', Load(), lineno=1591, col_offset=11), [Is()], [Name('None', Load(), lineno=1591, col_offset=16)], lineno=1591, col_offset=11), [Assign([Name('chars', Store(), lineno=1592, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=1592, col_offset=20), '_decoded_chars', Load(), lineno=1592, col_offset=20), Slice(Name('offset', Load(), lineno=1592, col_offset=40), None, None), Load(), lineno=1592, col_offset=20), lineno=1592, col_offset=12)], [Assign([Name('chars', Store(), lineno=1594, col_offset=12)], Subscript(Attribute(Name('self', Load(), lineno=1594, col_offset=20), '_decoded_chars', Load(), lineno=1594, col_offset=20), Slice(Name('offset', Load(), lineno=1594, col_offset=40), BinOp(Name('offset', Load(), lineno=1594, col_offset=47), Add(), Name('n', Load(), lineno=1594, col_offset=56), lineno=1594, col_offset=47), None), Load(), lineno=1594, col_offset=20), lineno=1594, col_offset=12)], lineno=1591, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=1595, col_offset=8), '_decoded_chars_used', Store(), lineno=1595, col_offset=8), Add(), Call(Name('len', Load(), lineno=1595, col_offset=36), [Name('chars', Load(), lineno=1595, col_offset=40)], [], None, None, lineno=1595, col_offset=36), lineno=1595, col_offset=8), Return(Name('chars', Load(), lineno=1596, col_offset=15), lineno=1596, col_offset=8)], [], lineno=1588, col_offset=4), FunctionDef('_rewind_decoded_chars', arguments([Name('self', Param(), lineno=1598, col_offset=30), Name('n', Param(), lineno=1598, col_offset=36)], None, None, []), [Expr(Str(u'Rewind the _decoded_chars buffer.', lineno=1599, col_offset=8), lineno=1599, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=1600, col_offset=11), '_decoded_chars_used', Load(), lineno=1600, col_offset=11), [Lt()], [Name('n', Load(), lineno=1600, col_offset=38)], lineno=1600, col_offset=11), [Raise(Call(Name('AssertionError', Load(), lineno=1601, col_offset=18), [Str(u'rewind decoded_chars out of bounds', lineno=1601, col_offset=33)], [], None, None, lineno=1601, col_offset=18), None, None, lineno=1601, col_offset=12)], [], lineno=1600, col_offset=8), AugAssign(Attribute(Name('self', Load(), lineno=1602, col_offset=8), '_decoded_chars_used', Store(), lineno=1602, col_offset=8), Sub(), Name('n', Load(), lineno=1602, col_offset=36), lineno=1602, col_offset=8)], [], lineno=1598, col_offset=4), FunctionDef('_read_chunk', arguments([Name('self', Param(), lineno=1604, col_offset=20)], None, None, []), [Expr(Str(u'\n        Read and decode the next chunk of data from the BufferedReader.\n        ', lineno=1607, col_offset=-1), lineno=1607, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=1615, col_offset=11), '_decoder', Load(), lineno=1615, col_offset=11), [Is()], [Name('None', Load(), lineno=1615, col_offset=28)], lineno=1615, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1616, col_offset=18), [Str(u'no decoder', lineno=1616, col_offset=29)], [], None, None, lineno=1616, col_offset=18), None, None, lineno=1616, col_offset=12)], [], lineno=1615, col_offset=8), If(Attribute(Name('self', Load(), lineno=1618, col_offset=11), '_telling', Load(), lineno=1618, col_offset=11), [Assign([Tuple([Name('dec_buffer', Store(), lineno=1622, col_offset=12), Name('dec_flags', Store(), lineno=1622, col_offset=24)], Store(), lineno=1622, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1622, col_offset=36), '_decoder', Load(), lineno=1622, col_offset=36), 'getstate', Load(), lineno=1622, col_offset=36), [], [], None, None, lineno=1622, col_offset=36), lineno=1622, col_offset=12)], [], lineno=1618, col_offset=8), Assign([Name('input_chunk', Store(), lineno=1627, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1627, col_offset=22), 'buffer', Load(), lineno=1627, col_offset=22), 'read1', Load(), lineno=1627, col_offset=22), [Attribute(Name('self', Load(), lineno=1627, col_offset=40), '_CHUNK_SIZE', Load(), lineno=1627, col_offset=40)], [], None, None, lineno=1627, col_offset=22), lineno=1627, col_offset=8), Assign([Name('eof', Store(), lineno=1628, col_offset=8)], UnaryOp(Not(), Name('input_chunk', Load(), lineno=1628, col_offset=18), lineno=1628, col_offset=14), lineno=1628, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1629, col_offset=8), '_set_decoded_chars', Load(), lineno=1629, col_offset=8), [Call(Attribute(Attribute(Name('self', Load(), lineno=1629, col_offset=32), '_decoder', Load(), lineno=1629, col_offset=32), 'decode', Load(), lineno=1629, col_offset=32), [Name('input_chunk', Load(), lineno=1629, col_offset=53), Name('eof', Load(), lineno=1629, col_offset=66)], [], None, None, lineno=1629, col_offset=32)], [], None, None, lineno=1629, col_offset=8), lineno=1629, col_offset=8), If(Attribute(Name('self', Load(), lineno=1631, col_offset=11), '_telling', Load(), lineno=1631, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1634, col_offset=12), '_snapshot', Store(), lineno=1634, col_offset=12)], Tuple([Name('dec_flags', Load(), lineno=1634, col_offset=30), BinOp(Name('dec_buffer', Load(), lineno=1634, col_offset=41), Add(), Name('input_chunk', Load(), lineno=1634, col_offset=54), lineno=1634, col_offset=41)], Load(), lineno=1634, col_offset=30), lineno=1634, col_offset=12)], [], lineno=1631, col_offset=8), Return(UnaryOp(Not(), Name('eof', Load(), lineno=1636, col_offset=19), lineno=1636, col_offset=15), lineno=1636, col_offset=8)], [], lineno=1604, col_offset=4), FunctionDef('_pack_cookie', arguments([Name('self', Param(), lineno=1638, col_offset=21), Name('position', Param(), lineno=1638, col_offset=27), Name('dec_flags', Param(), lineno=1638, col_offset=37), Name('bytes_to_feed', Param(), lineno=1639, col_offset=27), Name('need_eof', Param(), lineno=1639, col_offset=44), Name('chars_to_skip', Param(), lineno=1639, col_offset=56)], None, None, [Num(0, lineno=1638, col_offset=47), Num(0, lineno=1639, col_offset=41), Num(0, lineno=1639, col_offset=53), Num(0, lineno=1639, col_offset=70)]), [Return(BinOp(BinOp(BinOp(BinOp(Name('position', Load(), lineno=1645, col_offset=16), BitOr(), BinOp(Name('dec_flags', Load(), lineno=1645, col_offset=28), LShift(), Num(64, lineno=1645, col_offset=39), lineno=1645, col_offset=28), lineno=1645, col_offset=16), BitOr(), BinOp(Name('bytes_to_feed', Load(), lineno=1645, col_offset=46), LShift(), Num(128, lineno=1645, col_offset=61), lineno=1645, col_offset=46), lineno=1645, col_offset=43), BitOr(), BinOp(Name('chars_to_skip', Load(), lineno=1646, col_offset=16), LShift(), Num(192, lineno=1646, col_offset=31), lineno=1646, col_offset=16), lineno=1645, col_offset=66), BitOr(), BinOp(Call(Name('bool', Load(), lineno=1646, col_offset=38), [Name('need_eof', Load(), lineno=1646, col_offset=43)], [], None, None, lineno=1646, col_offset=38), LShift(), Num(256, lineno=1646, col_offset=54), lineno=1646, col_offset=38), lineno=1646, col_offset=36), lineno=1645, col_offset=8)], [], lineno=1638, col_offset=4), FunctionDef('_unpack_cookie', arguments([Name('self', Param(), lineno=1648, col_offset=23), Name('bigint', Param(), lineno=1648, col_offset=29)], None, None, []), [Assign([Tuple([Name('rest', Store(), lineno=1649, col_offset=8), Name('position', Store(), lineno=1649, col_offset=14)], Store(), lineno=1649, col_offset=8)], Call(Name('divmod', Load(), lineno=1649, col_offset=25), [Name('bigint', Load(), lineno=1649, col_offset=32), BinOp(Num(1, lineno=1649, col_offset=40), LShift(), Num(64, lineno=1649, col_offset=43), lineno=1649, col_offset=40)], [], None, None, lineno=1649, col_offset=25), lineno=1649, col_offset=8), Assign([Tuple([Name('rest', Store(), lineno=1650, col_offset=8), Name('dec_flags', Store(), lineno=1650, col_offset=14)], Store(), lineno=1650, col_offset=8)], Call(Name('divmod', Load(), lineno=1650, col_offset=26), [Name('rest', Load(), lineno=1650, col_offset=33), BinOp(Num(1, lineno=1650, col_offset=39), LShift(), Num(64, lineno=1650, col_offset=42), lineno=1650, col_offset=39)], [], None, None, lineno=1650, col_offset=26), lineno=1650, col_offset=8), Assign([Tuple([Name('rest', Store(), lineno=1651, col_offset=8), Name('bytes_to_feed', Store(), lineno=1651, col_offset=14)], Store(), lineno=1651, col_offset=8)], Call(Name('divmod', Load(), lineno=1651, col_offset=30), [Name('rest', Load(), lineno=1651, col_offset=37), BinOp(Num(1, lineno=1651, col_offset=43), LShift(), Num(64, lineno=1651, col_offset=46), lineno=1651, col_offset=43)], [], None, None, lineno=1651, col_offset=30), lineno=1651, col_offset=8), Assign([Tuple([Name('need_eof', Store(), lineno=1652, col_offset=8), Name('chars_to_skip', Store(), lineno=1652, col_offset=18)], Store(), lineno=1652, col_offset=8)], Call(Name('divmod', Load(), lineno=1652, col_offset=34), [Name('rest', Load(), lineno=1652, col_offset=41), BinOp(Num(1, lineno=1652, col_offset=47), LShift(), Num(64, lineno=1652, col_offset=50), lineno=1652, col_offset=47)], [], None, None, lineno=1652, col_offset=34), lineno=1652, col_offset=8), Return(Tuple([Name('position', Load(), lineno=1653, col_offset=15), Name('dec_flags', Load(), lineno=1653, col_offset=25), Name('bytes_to_feed', Load(), lineno=1653, col_offset=36), Name('need_eof', Load(), lineno=1653, col_offset=51), Name('chars_to_skip', Load(), lineno=1653, col_offset=61)], Load(), lineno=1653, col_offset=15), lineno=1653, col_offset=8)], [], lineno=1648, col_offset=4), FunctionDef('tell', arguments([Name('self', Param(), lineno=1655, col_offset=13)], None, None, []), [If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1656, col_offset=15), '_seekable', Load(), lineno=1656, col_offset=15), lineno=1656, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1657, col_offset=18), [Str(u'underlying stream is not seekable', lineno=1657, col_offset=26)], [], None, None, lineno=1657, col_offset=18), None, None, lineno=1657, col_offset=12)], [], lineno=1656, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1658, col_offset=15), '_telling', Load(), lineno=1658, col_offset=15), lineno=1658, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1659, col_offset=18), [Str(u'telling position disabled by next() call', lineno=1659, col_offset=26)], [], None, None, lineno=1659, col_offset=18), None, None, lineno=1659, col_offset=12)], [], lineno=1658, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1660, col_offset=8), 'flush', Load(), lineno=1660, col_offset=8), [], [], None, None, lineno=1660, col_offset=8), lineno=1660, col_offset=8), Assign([Name('position', Store(), lineno=1661, col_offset=8)], Call(Attribute(Attribute(Name('self', Load(), lineno=1661, col_offset=19), 'buffer', Load(), lineno=1661, col_offset=19), 'tell', Load(), lineno=1661, col_offset=19), [], [], None, None, lineno=1661, col_offset=19), lineno=1661, col_offset=8), Assign([Name('decoder', Store(), lineno=1662, col_offset=8)], Attribute(Name('self', Load(), lineno=1662, col_offset=18), '_decoder', Load(), lineno=1662, col_offset=18), lineno=1662, col_offset=8), If(BoolOp(Or(), [Compare(Name('decoder', Load(), lineno=1663, col_offset=11), [Is()], [Name('None', Load(), lineno=1663, col_offset=22)], lineno=1663, col_offset=11), Compare(Attribute(Name('self', Load(), lineno=1663, col_offset=30), '_snapshot', Load(), lineno=1663, col_offset=30), [Is()], [Name('None', Load(), lineno=1663, col_offset=48)], lineno=1663, col_offset=30)], lineno=1663, col_offset=11), [If(Attribute(Name('self', Load(), lineno=1664, col_offset=15), '_decoded_chars', Load(), lineno=1664, col_offset=15), [Raise(Call(Name('AssertionError', Load(), lineno=1666, col_offset=22), [Str(u'pending decoded text', lineno=1666, col_offset=37)], [], None, None, lineno=1666, col_offset=22), None, None, lineno=1666, col_offset=16)], [], lineno=1664, col_offset=12), Return(Name('position', Load(), lineno=1667, col_offset=19), lineno=1667, col_offset=12)], [], lineno=1663, col_offset=8), Assign([Tuple([Name('dec_flags', Store(), lineno=1670, col_offset=8), Name('next_input', Store(), lineno=1670, col_offset=19)], Store(), lineno=1670, col_offset=8)], Attribute(Name('self', Load(), lineno=1670, col_offset=32), '_snapshot', Load(), lineno=1670, col_offset=32), lineno=1670, col_offset=8), AugAssign(Name('position', Store(), lineno=1671, col_offset=8), Sub(), Call(Name('len', Load(), lineno=1671, col_offset=20), [Name('next_input', Load(), lineno=1671, col_offset=24)], [], None, None, lineno=1671, col_offset=20), lineno=1671, col_offset=8), Assign([Name('chars_to_skip', Store(), lineno=1674, col_offset=8)], Attribute(Name('self', Load(), lineno=1674, col_offset=24), '_decoded_chars_used', Load(), lineno=1674, col_offset=24), lineno=1674, col_offset=8), If(Compare(Name('chars_to_skip', Load(), lineno=1675, col_offset=11), [Eq()], [Num(0, lineno=1675, col_offset=28)], lineno=1675, col_offset=11), [Return(Call(Attribute(Name('self', Load(), lineno=1677, col_offset=19), '_pack_cookie', Load(), lineno=1677, col_offset=19), [Name('position', Load(), lineno=1677, col_offset=37), Name('dec_flags', Load(), lineno=1677, col_offset=47)], [], None, None, lineno=1677, col_offset=19), lineno=1677, col_offset=12)], [], lineno=1675, col_offset=8), Assign([Name('saved_state', Store(), lineno=1681, col_offset=8)], Call(Attribute(Name('decoder', Load(), lineno=1681, col_offset=22), 'getstate', Load(), lineno=1681, col_offset=22), [], [], None, None, lineno=1681, col_offset=22), lineno=1681, col_offset=8), TryFinally([Expr(Call(Attribute(Name('decoder', Load(), lineno=1684, col_offset=12), 'setstate', Load(), lineno=1684, col_offset=12), [Tuple([Str('', lineno=1684, col_offset=30), Name('dec_flags', Load(), lineno=1684, col_offset=35)], Load(), lineno=1684, col_offset=30)], [], None, None, lineno=1684, col_offset=12), lineno=1684, col_offset=12), Assign([Name('start_pos', Store(), lineno=1685, col_offset=12)], Name('position', Load(), lineno=1685, col_offset=24), lineno=1685, col_offset=12), Assign([Tuple([Name('start_flags', Store(), lineno=1686, col_offset=12), Name('bytes_fed', Store(), lineno=1686, col_offset=25), Name('chars_decoded', Store(), lineno=1686, col_offset=36)], Store(), lineno=1686, col_offset=12)], Tuple([Name('dec_flags', Load(), lineno=1686, col_offset=52), Num(0, lineno=1686, col_offset=63), Num(0, lineno=1686, col_offset=66)], Load(), lineno=1686, col_offset=52), lineno=1686, col_offset=12), Assign([Name('need_eof', Store(), lineno=1687, col_offset=12)], Num(0, lineno=1687, col_offset=23), lineno=1687, col_offset=12), For(Name('next_byte', Store(), lineno=1693, col_offset=16), Name('next_input', Load(), lineno=1693, col_offset=29), [AugAssign(Name('bytes_fed', Store(), lineno=1694, col_offset=16), Add(), Num(1, lineno=1694, col_offset=29), lineno=1694, col_offset=16), AugAssign(Name('chars_decoded', Store(), lineno=1695, col_offset=16), Add(), Call(Name('len', Load(), lineno=1695, col_offset=33), [Call(Attribute(Name('decoder', Load(), lineno=1695, col_offset=37), 'decode', Load(), lineno=1695, col_offset=37), [Name('next_byte', Load(), lineno=1695, col_offset=52)], [], None, None, lineno=1695, col_offset=37)], [], None, None, lineno=1695, col_offset=33), lineno=1695, col_offset=16), Assign([Tuple([Name('dec_buffer', Store(), lineno=1696, col_offset=16), Name('dec_flags', Store(), lineno=1696, col_offset=28)], Store(), lineno=1696, col_offset=16)], Call(Attribute(Name('decoder', Load(), lineno=1696, col_offset=40), 'getstate', Load(), lineno=1696, col_offset=40), [], [], None, None, lineno=1696, col_offset=40), lineno=1696, col_offset=16), If(BoolOp(And(), [UnaryOp(Not(), Name('dec_buffer', Load(), lineno=1697, col_offset=23), lineno=1697, col_offset=19), Compare(Name('chars_decoded', Load(), lineno=1697, col_offset=38), [LtE()], [Name('chars_to_skip', Load(), lineno=1697, col_offset=55)], lineno=1697, col_offset=38)], lineno=1697, col_offset=19), [AugAssign(Name('start_pos', Store(), lineno=1699, col_offset=20), Add(), Name('bytes_fed', Load(), lineno=1699, col_offset=33), lineno=1699, col_offset=20), AugAssign(Name('chars_to_skip', Store(), lineno=1700, col_offset=20), Sub(), Name('chars_decoded', Load(), lineno=1700, col_offset=37), lineno=1700, col_offset=20), Assign([Tuple([Name('start_flags', Store(), lineno=1701, col_offset=20), Name('bytes_fed', Store(), lineno=1701, col_offset=33), Name('chars_decoded', Store(), lineno=1701, col_offset=44)], Store(), lineno=1701, col_offset=20)], Tuple([Name('dec_flags', Load(), lineno=1701, col_offset=60), Num(0, lineno=1701, col_offset=71), Num(0, lineno=1701, col_offset=74)], Load(), lineno=1701, col_offset=60), lineno=1701, col_offset=20)], [], lineno=1697, col_offset=16), If(Compare(Name('chars_decoded', Load(), lineno=1702, col_offset=19), [GtE()], [Name('chars_to_skip', Load(), lineno=1702, col_offset=36)], lineno=1702, col_offset=19), [Break( lineno=1703, col_offset=20)], [], lineno=1702, col_offset=16)], [AugAssign(Name('chars_decoded', Store(), lineno=1706, col_offset=16), Add(), Call(Name('len', Load(), lineno=1706, col_offset=33), [Call(Attribute(Name('decoder', Load(), lineno=1706, col_offset=37), 'decode', Load(), lineno=1706, col_offset=37), [Str('', lineno=1706, col_offset=52)], [keyword('final', Name('True', Load(), lineno=1706, col_offset=63))], None, None, lineno=1706, col_offset=37)], [], None, None, lineno=1706, col_offset=33), lineno=1706, col_offset=16), Assign([Name('need_eof', Store(), lineno=1707, col_offset=16)], Num(1, lineno=1707, col_offset=27), lineno=1707, col_offset=16), If(Compare(Name('chars_decoded', Load(), lineno=1708, col_offset=19), [Lt()], [Name('chars_to_skip', Load(), lineno=1708, col_offset=35)], lineno=1708, col_offset=19), [Raise(Call(Name('IOError', Load(), lineno=1709, col_offset=26), [Str(u"can't reconstruct logical file position", lineno=1709, col_offset=34)], [], None, None, lineno=1709, col_offset=26), None, None, lineno=1709, col_offset=20)], [], lineno=1708, col_offset=16)], lineno=1693, col_offset=12), Return(Call(Attribute(Name('self', Load(), lineno=1712, col_offset=19), '_pack_cookie', Load(), lineno=1712, col_offset=19), [Name('start_pos', Load(), lineno=1713, col_offset=16), Name('start_flags', Load(), lineno=1713, col_offset=27), Name('bytes_fed', Load(), lineno=1713, col_offset=40), Name('need_eof', Load(), lineno=1713, col_offset=51), Name('chars_to_skip', Load(), lineno=1713, col_offset=61)], [], None, None, lineno=1712, col_offset=19), lineno=1712, col_offset=12)], [Expr(Call(Attribute(Name('decoder', Load(), lineno=1715, col_offset=12), 'setstate', Load(), lineno=1715, col_offset=12), [Name('saved_state', Load(), lineno=1715, col_offset=29)], [], None, None, lineno=1715, col_offset=12), lineno=1715, col_offset=12)], lineno=1682, col_offset=8)], [], lineno=1655, col_offset=4), FunctionDef('truncate', arguments([Name('self', Param(), lineno=1717, col_offset=17), Name('pos', Param(), lineno=1717, col_offset=23)], None, None, [Name('None', Load(), lineno=1717, col_offset=27)]), [Expr(Call(Attribute(Name('self', Load(), lineno=1718, col_offset=8), 'flush', Load(), lineno=1718, col_offset=8), [], [], None, None, lineno=1718, col_offset=8), lineno=1718, col_offset=8), If(Compare(Name('pos', Load(), lineno=1719, col_offset=11), [Is()], [Name('None', Load(), lineno=1719, col_offset=18)], lineno=1719, col_offset=11), [Assign([Name('pos', Store(), lineno=1720, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1720, col_offset=18), 'tell', Load(), lineno=1720, col_offset=18), [], [], None, None, lineno=1720, col_offset=18), lineno=1720, col_offset=12)], [], lineno=1719, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=1721, col_offset=15), 'buffer', Load(), lineno=1721, col_offset=15), 'truncate', Load(), lineno=1721, col_offset=15), [Name('pos', Load(), lineno=1721, col_offset=36)], [], None, None, lineno=1721, col_offset=15), lineno=1721, col_offset=8)], [], lineno=1717, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=1723, col_offset=15)], None, None, []), [If(Compare(Attribute(Name('self', Load(), lineno=1724, col_offset=11), 'buffer', Load(), lineno=1724, col_offset=11), [Is()], [Name('None', Load(), lineno=1724, col_offset=26)], lineno=1724, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1725, col_offset=18), [Str(u'buffer is already detached', lineno=1725, col_offset=29)], [], None, None, lineno=1725, col_offset=18), None, None, lineno=1725, col_offset=12)], [], lineno=1724, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1726, col_offset=8), 'flush', Load(), lineno=1726, col_offset=8), [], [], None, None, lineno=1726, col_offset=8), lineno=1726, col_offset=8), Assign([Name('buffer', Store(), lineno=1727, col_offset=8)], Attribute(Name('self', Load(), lineno=1727, col_offset=17), 'buffer', Load(), lineno=1727, col_offset=17), lineno=1727, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1728, col_offset=8), 'buffer', Store(), lineno=1728, col_offset=8)], Name('None', Load(), lineno=1728, col_offset=22), lineno=1728, col_offset=8), Return(Name('buffer', Load(), lineno=1729, col_offset=15), lineno=1729, col_offset=8)], [], lineno=1723, col_offset=4), FunctionDef('seek', arguments([Name('self', Param(), lineno=1731, col_offset=13), Name('cookie', Param(), lineno=1731, col_offset=19), Name('whence', Param(), lineno=1731, col_offset=27)], None, None, [Num(0, lineno=1731, col_offset=34)]), [If(Attribute(Name('self', Load(), lineno=1732, col_offset=11), 'closed', Load(), lineno=1732, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1733, col_offset=18), [Str(u'tell on closed file', lineno=1733, col_offset=29)], [], None, None, lineno=1733, col_offset=18), None, None, lineno=1733, col_offset=12)], [], lineno=1732, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1734, col_offset=15), '_seekable', Load(), lineno=1734, col_offset=15), lineno=1734, col_offset=11), [Raise(Call(Name('IOError', Load(), lineno=1735, col_offset=18), [Str(u'underlying stream is not seekable', lineno=1735, col_offset=26)], [], None, None, lineno=1735, col_offset=18), None, None, lineno=1735, col_offset=12)], [], lineno=1734, col_offset=8), If(Compare(Name('whence', Load(), lineno=1736, col_offset=11), [Eq()], [Num(1, lineno=1736, col_offset=21)], lineno=1736, col_offset=11), [If(Compare(Name('cookie', Load(), lineno=1737, col_offset=15), [NotEq()], [Num(0, lineno=1737, col_offset=25)], lineno=1737, col_offset=15), [Raise(Call(Name('IOError', Load(), lineno=1738, col_offset=22), [Str(u"can't do nonzero cur-relative seeks", lineno=1738, col_offset=30)], [], None, None, lineno=1738, col_offset=22), None, None, lineno=1738, col_offset=16)], [], lineno=1737, col_offset=12), Assign([Name('whence', Store(), lineno=1741, col_offset=12)], Num(0, lineno=1741, col_offset=21), lineno=1741, col_offset=12), Assign([Name('cookie', Store(), lineno=1742, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1742, col_offset=21), 'tell', Load(), lineno=1742, col_offset=21), [], [], None, None, lineno=1742, col_offset=21), lineno=1742, col_offset=12)], [], lineno=1736, col_offset=8), If(Compare(Name('whence', Load(), lineno=1743, col_offset=11), [Eq()], [Num(2, lineno=1743, col_offset=21)], lineno=1743, col_offset=11), [If(Compare(Name('cookie', Load(), lineno=1744, col_offset=15), [NotEq()], [Num(0, lineno=1744, col_offset=25)], lineno=1744, col_offset=15), [Raise(Call(Name('IOError', Load(), lineno=1745, col_offset=22), [Str(u"can't do nonzero end-relative seeks", lineno=1745, col_offset=30)], [], None, None, lineno=1745, col_offset=22), None, None, lineno=1745, col_offset=16)], [], lineno=1744, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1746, col_offset=12), 'flush', Load(), lineno=1746, col_offset=12), [], [], None, None, lineno=1746, col_offset=12), lineno=1746, col_offset=12), Assign([Name('position', Store(), lineno=1747, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1747, col_offset=23), 'buffer', Load(), lineno=1747, col_offset=23), 'seek', Load(), lineno=1747, col_offset=23), [Num(0, lineno=1747, col_offset=40), Num(2, lineno=1747, col_offset=43)], [], None, None, lineno=1747, col_offset=23), lineno=1747, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1748, col_offset=12), '_set_decoded_chars', Load(), lineno=1748, col_offset=12), [Str(u'', lineno=1748, col_offset=36)], [], None, None, lineno=1748, col_offset=12), lineno=1748, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1749, col_offset=12), '_snapshot', Store(), lineno=1749, col_offset=12)], Name('None', Load(), lineno=1749, col_offset=29), lineno=1749, col_offset=12), If(Attribute(Name('self', Load(), lineno=1750, col_offset=15), '_decoder', Load(), lineno=1750, col_offset=15), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1751, col_offset=16), '_decoder', Load(), lineno=1751, col_offset=16), 'reset', Load(), lineno=1751, col_offset=16), [], [], None, None, lineno=1751, col_offset=16), lineno=1751, col_offset=16)], [], lineno=1750, col_offset=12), Return(Name('position', Load(), lineno=1752, col_offset=19), lineno=1752, col_offset=12)], [], lineno=1743, col_offset=8), If(Compare(Name('whence', Load(), lineno=1753, col_offset=11), [NotEq()], [Num(0, lineno=1753, col_offset=21)], lineno=1753, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1754, col_offset=18), [BinOp(Str(u'invalid whence (%r, should be 0, 1 or 2)', lineno=1754, col_offset=29), Mod(), Tuple([Name('whence', Load(), lineno=1755, col_offset=30)], Load(), lineno=1755, col_offset=30), lineno=1754, col_offset=29)], [], None, None, lineno=1754, col_offset=18), None, None, lineno=1754, col_offset=12)], [], lineno=1753, col_offset=8), If(Compare(Name('cookie', Load(), lineno=1756, col_offset=11), [Lt()], [Num(0, lineno=1756, col_offset=20)], lineno=1756, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1757, col_offset=18), [BinOp(Str(u'negative seek position %r', lineno=1757, col_offset=29), Mod(), Tuple([Name('cookie', Load(), lineno=1757, col_offset=60)], Load(), lineno=1757, col_offset=60), lineno=1757, col_offset=29)], [], None, None, lineno=1757, col_offset=18), None, None, lineno=1757, col_offset=12)], [], lineno=1756, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1758, col_offset=8), 'flush', Load(), lineno=1758, col_offset=8), [], [], None, None, lineno=1758, col_offset=8), lineno=1758, col_offset=8), Assign([Tuple([Name('start_pos', Store(), lineno=1762, col_offset=8), Name('dec_flags', Store(), lineno=1762, col_offset=19), Name('bytes_to_feed', Store(), lineno=1762, col_offset=30), Name('need_eof', Store(), lineno=1762, col_offset=45), Name('chars_to_skip', Store(), lineno=1762, col_offset=55)], Store(), lineno=1762, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1763, col_offset=12), '_unpack_cookie', Load(), lineno=1763, col_offset=12), [Name('cookie', Load(), lineno=1763, col_offset=32)], [], None, None, lineno=1763, col_offset=12), lineno=1762, col_offset=8), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1766, col_offset=8), 'buffer', Load(), lineno=1766, col_offset=8), 'seek', Load(), lineno=1766, col_offset=8), [Name('start_pos', Load(), lineno=1766, col_offset=25)], [], None, None, lineno=1766, col_offset=8), lineno=1766, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1767, col_offset=8), '_set_decoded_chars', Load(), lineno=1767, col_offset=8), [Str(u'', lineno=1767, col_offset=32)], [], None, None, lineno=1767, col_offset=8), lineno=1767, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=1768, col_offset=8), '_snapshot', Store(), lineno=1768, col_offset=8)], Name('None', Load(), lineno=1768, col_offset=25), lineno=1768, col_offset=8), If(BoolOp(And(), [Compare(Name('cookie', Load(), lineno=1771, col_offset=11), [Eq()], [Num(0, lineno=1771, col_offset=21)], lineno=1771, col_offset=11), Attribute(Name('self', Load(), lineno=1771, col_offset=27), '_decoder', Load(), lineno=1771, col_offset=27)], lineno=1771, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1772, col_offset=12), '_decoder', Load(), lineno=1772, col_offset=12), 'reset', Load(), lineno=1772, col_offset=12), [], [], None, None, lineno=1772, col_offset=12), lineno=1772, col_offset=12)], [If(BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1773, col_offset=13), '_decoder', Load(), lineno=1773, col_offset=13), Name('dec_flags', Load(), lineno=1773, col_offset=30), Name('chars_to_skip', Load(), lineno=1773, col_offset=43)], lineno=1773, col_offset=13), [Assign([Attribute(Name('self', Load(), lineno=1774, col_offset=12), '_decoder', Store(), lineno=1774, col_offset=12)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1774, col_offset=28), '_decoder', Load(), lineno=1774, col_offset=28), Call(Attribute(Name('self', Load(), lineno=1774, col_offset=45), '_get_decoder', Load(), lineno=1774, col_offset=45), [], [], None, None, lineno=1774, col_offset=45)], lineno=1774, col_offset=28), lineno=1774, col_offset=12), Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=1775, col_offset=12), '_decoder', Load(), lineno=1775, col_offset=12), 'setstate', Load(), lineno=1775, col_offset=12), [Tuple([Str('', lineno=1775, col_offset=36), Name('dec_flags', Load(), lineno=1775, col_offset=41)], Load(), lineno=1775, col_offset=36)], [], None, None, lineno=1775, col_offset=12), lineno=1775, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1776, col_offset=12), '_snapshot', Store(), lineno=1776, col_offset=12)], Tuple([Name('dec_flags', Load(), lineno=1776, col_offset=30), Str('', lineno=1776, col_offset=41)], Load(), lineno=1776, col_offset=30), lineno=1776, col_offset=12)], [], lineno=1773, col_offset=13)], lineno=1771, col_offset=8), If(Name('chars_to_skip', Load(), lineno=1778, col_offset=11), [Assign([Name('input_chunk', Store(), lineno=1780, col_offset=12)], Call(Attribute(Attribute(Name('self', Load(), lineno=1780, col_offset=26), 'buffer', Load(), lineno=1780, col_offset=26), 'read', Load(), lineno=1780, col_offset=26), [Name('bytes_to_feed', Load(), lineno=1780, col_offset=43)], [], None, None, lineno=1780, col_offset=26), lineno=1780, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1781, col_offset=12), '_set_decoded_chars', Load(), lineno=1781, col_offset=12), [Call(Attribute(Attribute(Name('self', Load(), lineno=1782, col_offset=16), '_decoder', Load(), lineno=1782, col_offset=16), 'decode', Load(), lineno=1782, col_offset=16), [Name('input_chunk', Load(), lineno=1782, col_offset=37), Name('need_eof', Load(), lineno=1782, col_offset=50)], [], None, None, lineno=1782, col_offset=16)], [], None, None, lineno=1781, col_offset=12), lineno=1781, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1783, col_offset=12), '_snapshot', Store(), lineno=1783, col_offset=12)], Tuple([Name('dec_flags', Load(), lineno=1783, col_offset=30), Name('input_chunk', Load(), lineno=1783, col_offset=41)], Load(), lineno=1783, col_offset=30), lineno=1783, col_offset=12), If(Compare(Call(Name('len', Load(), lineno=1786, col_offset=15), [Attribute(Name('self', Load(), lineno=1786, col_offset=19), '_decoded_chars', Load(), lineno=1786, col_offset=19)], [], None, None, lineno=1786, col_offset=15), [Lt()], [Name('chars_to_skip', Load(), lineno=1786, col_offset=42)], lineno=1786, col_offset=15), [Raise(Call(Name('IOError', Load(), lineno=1787, col_offset=22), [Str(u"can't restore logical file position", lineno=1787, col_offset=30)], [], None, None, lineno=1787, col_offset=22), None, None, lineno=1787, col_offset=16)], [], lineno=1786, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1788, col_offset=12), '_decoded_chars_used', Store(), lineno=1788, col_offset=12)], Name('chars_to_skip', Load(), lineno=1788, col_offset=39), lineno=1788, col_offset=12)], [], lineno=1778, col_offset=8), TryExcept([Assign([Name('encoder', Store(), lineno=1792, col_offset=12)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1792, col_offset=22), '_encoder', Load(), lineno=1792, col_offset=22), Call(Attribute(Name('self', Load(), lineno=1792, col_offset=39), '_get_encoder', Load(), lineno=1792, col_offset=39), [], [], None, None, lineno=1792, col_offset=39)], lineno=1792, col_offset=22), lineno=1792, col_offset=12)], [ExceptHandler(Name('LookupError', Load(), lineno=1793, col_offset=15), None, [Pass( lineno=1795, col_offset=12)], lineno=1793, col_offset=8)], [If(Compare(Name('cookie', Load(), lineno=1797, col_offset=15), [NotEq()], [Num(0, lineno=1797, col_offset=25)], lineno=1797, col_offset=15), [Expr(Call(Attribute(Name('encoder', Load(), lineno=1798, col_offset=16), 'setstate', Load(), lineno=1798, col_offset=16), [Num(0, lineno=1798, col_offset=33)], [], None, None, lineno=1798, col_offset=16), lineno=1798, col_offset=16)], [Expr(Call(Attribute(Name('encoder', Load(), lineno=1800, col_offset=16), 'reset', Load(), lineno=1800, col_offset=16), [], [], None, None, lineno=1800, col_offset=16), lineno=1800, col_offset=16)], lineno=1797, col_offset=12)], lineno=1791, col_offset=8), Return(Name('cookie', Load(), lineno=1801, col_offset=15), lineno=1801, col_offset=8)], [], lineno=1731, col_offset=4), FunctionDef('read', arguments([Name('self', Param(), lineno=1803, col_offset=13), Name('n', Param(), lineno=1803, col_offset=19)], None, None, [Name('None', Load(), lineno=1803, col_offset=21)]), [Expr(Call(Attribute(Name('self', Load(), lineno=1804, col_offset=8), '_checkReadable', Load(), lineno=1804, col_offset=8), [], [], None, None, lineno=1804, col_offset=8), lineno=1804, col_offset=8), If(Compare(Name('n', Load(), lineno=1805, col_offset=11), [Is()], [Name('None', Load(), lineno=1805, col_offset=16)], lineno=1805, col_offset=11), [Assign([Name('n', Store(), lineno=1806, col_offset=12)], Num(-1, lineno=1806, col_offset=17), lineno=1806, col_offset=12)], [], lineno=1805, col_offset=8), Assign([Name('decoder', Store(), lineno=1807, col_offset=8)], BoolOp(Or(), [Attribute(Name('self', Load(), lineno=1807, col_offset=18), '_decoder', Load(), lineno=1807, col_offset=18), Call(Attribute(Name('self', Load(), lineno=1807, col_offset=35), '_get_decoder', Load(), lineno=1807, col_offset=35), [], [], None, None, lineno=1807, col_offset=35)], lineno=1807, col_offset=18), lineno=1807, col_offset=8), TryExcept([Expr(Attribute(Name('n', Load(), lineno=1809, col_offset=12), '__index__', Load(), lineno=1809, col_offset=12), lineno=1809, col_offset=12)], [ExceptHandler(Name('AttributeError', Load(), lineno=1810, col_offset=15), None, [Raise(Call(Name('TypeError', Load(), lineno=1811, col_offset=18), [Str(u'an integer is required', lineno=1811, col_offset=28)], [], None, None, lineno=1811, col_offset=18), None, None, lineno=1811, col_offset=12)], lineno=1810, col_offset=8)], [], lineno=1808, col_offset=8), If(Compare(Name('n', Load(), lineno=1812, col_offset=11), [Lt()], [Num(0, lineno=1812, col_offset=15)], lineno=1812, col_offset=11), [Assign([Name('result', Store(), lineno=1814, col_offset=12)], BinOp(Call(Attribute(Name('self', Load(), lineno=1814, col_offset=22), '_get_decoded_chars', Load(), lineno=1814, col_offset=22), [], [], None, None, lineno=1814, col_offset=22), Add(), Call(Attribute(Name('decoder', Load(), lineno=1815, col_offset=22), 'decode', Load(), lineno=1815, col_offset=22), [Call(Attribute(Attribute(Name('self', Load(), lineno=1815, col_offset=37), 'buffer', Load(), lineno=1815, col_offset=37), 'read', Load(), lineno=1815, col_offset=37), [], [], None, None, lineno=1815, col_offset=37)], [keyword('final', Name('True', Load(), lineno=1815, col_offset=63))], None, None, lineno=1815, col_offset=22), lineno=1814, col_offset=22), lineno=1814, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1816, col_offset=12), '_set_decoded_chars', Load(), lineno=1816, col_offset=12), [Str(u'', lineno=1816, col_offset=36)], [], None, None, lineno=1816, col_offset=12), lineno=1816, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1817, col_offset=12), '_snapshot', Store(), lineno=1817, col_offset=12)], Name('None', Load(), lineno=1817, col_offset=29), lineno=1817, col_offset=12), Return(Name('result', Load(), lineno=1818, col_offset=19), lineno=1818, col_offset=12)], [Assign([Name('eof', Store(), lineno=1821, col_offset=12)], Name('False', Load(), lineno=1821, col_offset=18), lineno=1821, col_offset=12), Assign([Name('result', Store(), lineno=1822, col_offset=12)], Call(Attribute(Name('self', Load(), lineno=1822, col_offset=21), '_get_decoded_chars', Load(), lineno=1822, col_offset=21), [Name('n', Load(), lineno=1822, col_offset=45)], [], None, None, lineno=1822, col_offset=21), lineno=1822, col_offset=12), While(BoolOp(And(), [Compare(Call(Name('len', Load(), lineno=1823, col_offset=18), [Name('result', Load(), lineno=1823, col_offset=22)], [], None, None, lineno=1823, col_offset=18), [Lt()], [Name('n', Load(), lineno=1823, col_offset=32)], lineno=1823, col_offset=18), UnaryOp(Not(), Name('eof', Load(), lineno=1823, col_offset=42), lineno=1823, col_offset=38)], lineno=1823, col_offset=18), [Assign([Name('eof', Store(), lineno=1824, col_offset=16)], UnaryOp(Not(), Call(Attribute(Name('self', Load(), lineno=1824, col_offset=26), '_read_chunk', Load(), lineno=1824, col_offset=26), [], [], None, None, lineno=1824, col_offset=26), lineno=1824, col_offset=22), lineno=1824, col_offset=16), AugAssign(Name('result', Store(), lineno=1825, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=1825, col_offset=26), '_get_decoded_chars', Load(), lineno=1825, col_offset=26), [BinOp(Name('n', Load(), lineno=1825, col_offset=50), Sub(), Call(Name('len', Load(), lineno=1825, col_offset=54), [Name('result', Load(), lineno=1825, col_offset=58)], [], None, None, lineno=1825, col_offset=54), lineno=1825, col_offset=50)], [], None, None, lineno=1825, col_offset=26), lineno=1825, col_offset=16)], [], lineno=1823, col_offset=12), Return(Name('result', Load(), lineno=1826, col_offset=19), lineno=1826, col_offset=12)], lineno=1812, col_offset=8)], [], lineno=1803, col_offset=4), FunctionDef('next', arguments([Name('self', Param(), lineno=1828, col_offset=13)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=1829, col_offset=8), '_telling', Store(), lineno=1829, col_offset=8)], Name('False', Load(), lineno=1829, col_offset=24), lineno=1829, col_offset=8), Assign([Name('line', Store(), lineno=1830, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1830, col_offset=15), 'readline', Load(), lineno=1830, col_offset=15), [], [], None, None, lineno=1830, col_offset=15), lineno=1830, col_offset=8), If(UnaryOp(Not(), Name('line', Load(), lineno=1831, col_offset=15), lineno=1831, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1832, col_offset=12), '_snapshot', Store(), lineno=1832, col_offset=12)], Name('None', Load(), lineno=1832, col_offset=29), lineno=1832, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=1833, col_offset=12), '_telling', Store(), lineno=1833, col_offset=12)], Attribute(Name('self', Load(), lineno=1833, col_offset=28), '_seekable', Load(), lineno=1833, col_offset=28), lineno=1833, col_offset=12), Raise(Name('StopIteration', Load(), lineno=1834, col_offset=18), None, None, lineno=1834, col_offset=12)], [], lineno=1831, col_offset=8), Return(Name('line', Load(), lineno=1835, col_offset=15), lineno=1835, col_offset=8)], [], lineno=1828, col_offset=4), FunctionDef('readline', arguments([Name('self', Param(), lineno=1837, col_offset=17), Name('limit', Param(), lineno=1837, col_offset=23)], None, None, [Name('None', Load(), lineno=1837, col_offset=29)]), [If(Attribute(Name('self', Load(), lineno=1838, col_offset=11), 'closed', Load(), lineno=1838, col_offset=11), [Raise(Call(Name('ValueError', Load(), lineno=1839, col_offset=18), [Str(u'read from closed file', lineno=1839, col_offset=29)], [], None, None, lineno=1839, col_offset=18), None, None, lineno=1839, col_offset=12)], [], lineno=1838, col_offset=8), If(Compare(Name('limit', Load(), lineno=1840, col_offset=11), [Is()], [Name('None', Load(), lineno=1840, col_offset=20)], lineno=1840, col_offset=11), [Assign([Name('limit', Store(), lineno=1841, col_offset=12)], Num(-1, lineno=1841, col_offset=21), lineno=1841, col_offset=12)], [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1842, col_offset=17), [Name('limit', Load(), lineno=1842, col_offset=28), Tuple([Name('int', Load(), lineno=1842, col_offset=36), Name('long', Load(), lineno=1842, col_offset=41)], Load(), lineno=1842, col_offset=36)], [], None, None, lineno=1842, col_offset=17), lineno=1842, col_offset=13), [Raise(Call(Name('TypeError', Load(), lineno=1843, col_offset=18), [Str(u'limit must be an integer', lineno=1843, col_offset=28)], [], None, None, lineno=1843, col_offset=18), None, None, lineno=1843, col_offset=12)], [], lineno=1842, col_offset=13)], lineno=1840, col_offset=8), Assign([Name('line', Store(), lineno=1846, col_offset=8)], Call(Attribute(Name('self', Load(), lineno=1846, col_offset=15), '_get_decoded_chars', Load(), lineno=1846, col_offset=15), [], [], None, None, lineno=1846, col_offset=15), lineno=1846, col_offset=8), Assign([Name('start', Store(), lineno=1848, col_offset=8)], Num(0, lineno=1848, col_offset=16), lineno=1848, col_offset=8), If(UnaryOp(Not(), Attribute(Name('self', Load(), lineno=1850, col_offset=15), '_decoder', Load(), lineno=1850, col_offset=15), lineno=1850, col_offset=11), [Expr(Call(Attribute(Name('self', Load(), lineno=1851, col_offset=12), '_get_decoder', Load(), lineno=1851, col_offset=12), [], [], None, None, lineno=1851, col_offset=12), lineno=1851, col_offset=12)], [], lineno=1850, col_offset=8), Assign([Name('pos', Store(), lineno=1853, col_offset=8), Name('endpos', Store(), lineno=1853, col_offset=14)], Name('None', Load(), lineno=1853, col_offset=23), lineno=1853, col_offset=8), While(Name('True', Load(), lineno=1854, col_offset=14), [If(Attribute(Name('self', Load(), lineno=1855, col_offset=15), '_readtranslate', Load(), lineno=1855, col_offset=15), [Assign([Name('pos', Store(), lineno=1857, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=1857, col_offset=22), 'find', Load(), lineno=1857, col_offset=22), [Str(u'\n', lineno=1857, col_offset=32), Name('start', Load(), lineno=1857, col_offset=38)], [], None, None, lineno=1857, col_offset=22), lineno=1857, col_offset=16), If(Compare(Name('pos', Load(), lineno=1858, col_offset=19), [GtE()], [Num(0, lineno=1858, col_offset=26)], lineno=1858, col_offset=19), [Assign([Name('endpos', Store(), lineno=1859, col_offset=20)], BinOp(Name('pos', Load(), lineno=1859, col_offset=29), Add(), Num(1, lineno=1859, col_offset=35), lineno=1859, col_offset=29), lineno=1859, col_offset=20), Break( lineno=1860, col_offset=20)], [Assign([Name('start', Store(), lineno=1862, col_offset=20)], Call(Name('len', Load(), lineno=1862, col_offset=28), [Name('line', Load(), lineno=1862, col_offset=32)], [], None, None, lineno=1862, col_offset=28), lineno=1862, col_offset=20)], lineno=1858, col_offset=16)], [If(Attribute(Name('self', Load(), lineno=1864, col_offset=17), '_readuniversal', Load(), lineno=1864, col_offset=17), [Assign([Name('nlpos', Store(), lineno=1869, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=1869, col_offset=24), 'find', Load(), lineno=1869, col_offset=24), [Str(u'\n', lineno=1869, col_offset=34), Name('start', Load(), lineno=1869, col_offset=40)], [], None, None, lineno=1869, col_offset=24), lineno=1869, col_offset=16), Assign([Name('crpos', Store(), lineno=1870, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=1870, col_offset=24), 'find', Load(), lineno=1870, col_offset=24), [Str(u'\r', lineno=1870, col_offset=34), Name('start', Load(), lineno=1870, col_offset=40)], [], None, None, lineno=1870, col_offset=24), lineno=1870, col_offset=16), If(Compare(Name('crpos', Load(), lineno=1871, col_offset=19), [Eq()], [Num(-1, lineno=1871, col_offset=29)], lineno=1871, col_offset=19), [If(Compare(Name('nlpos', Load(), lineno=1872, col_offset=23), [Eq()], [Num(-1, lineno=1872, col_offset=33)], lineno=1872, col_offset=23), [Assign([Name('start', Store(), lineno=1874, col_offset=24)], Call(Name('len', Load(), lineno=1874, col_offset=32), [Name('line', Load(), lineno=1874, col_offset=36)], [], None, None, lineno=1874, col_offset=32), lineno=1874, col_offset=24)], [Assign([Name('endpos', Store(), lineno=1877, col_offset=24)], BinOp(Name('nlpos', Load(), lineno=1877, col_offset=33), Add(), Num(1, lineno=1877, col_offset=41), lineno=1877, col_offset=33), lineno=1877, col_offset=24), Break( lineno=1878, col_offset=24)], lineno=1872, col_offset=20)], [If(Compare(Name('nlpos', Load(), lineno=1879, col_offset=21), [Eq()], [Num(-1, lineno=1879, col_offset=31)], lineno=1879, col_offset=21), [Assign([Name('endpos', Store(), lineno=1881, col_offset=20)], BinOp(Name('crpos', Load(), lineno=1881, col_offset=29), Add(), Num(1, lineno=1881, col_offset=37), lineno=1881, col_offset=29), lineno=1881, col_offset=20), Break( lineno=1882, col_offset=20)], [If(Compare(Name('nlpos', Load(), lineno=1883, col_offset=21), [Lt()], [Name('crpos', Load(), lineno=1883, col_offset=29)], lineno=1883, col_offset=21), [Assign([Name('endpos', Store(), lineno=1885, col_offset=20)], BinOp(Name('nlpos', Load(), lineno=1885, col_offset=29), Add(), Num(1, lineno=1885, col_offset=37), lineno=1885, col_offset=29), lineno=1885, col_offset=20), Break( lineno=1886, col_offset=20)], [If(Compare(Name('nlpos', Load(), lineno=1887, col_offset=21), [Eq()], [BinOp(Name('crpos', Load(), lineno=1887, col_offset=30), Add(), Num(1, lineno=1887, col_offset=38), lineno=1887, col_offset=30)], lineno=1887, col_offset=21), [Assign([Name('endpos', Store(), lineno=1889, col_offset=20)], BinOp(Name('crpos', Load(), lineno=1889, col_offset=29), Add(), Num(2, lineno=1889, col_offset=37), lineno=1889, col_offset=29), lineno=1889, col_offset=20), Break( lineno=1890, col_offset=20)], [Assign([Name('endpos', Store(), lineno=1893, col_offset=20)], BinOp(Name('crpos', Load(), lineno=1893, col_offset=29), Add(), Num(1, lineno=1893, col_offset=37), lineno=1893, col_offset=29), lineno=1893, col_offset=20), Break( lineno=1894, col_offset=20)], lineno=1887, col_offset=21)], lineno=1883, col_offset=21)], lineno=1879, col_offset=21)], lineno=1871, col_offset=16)], [Assign([Name('pos', Store(), lineno=1897, col_offset=16)], Call(Attribute(Name('line', Load(), lineno=1897, col_offset=22), 'find', Load(), lineno=1897, col_offset=22), [Attribute(Name('self', Load(), lineno=1897, col_offset=32), '_readnl', Load(), lineno=1897, col_offset=32)], [], None, None, lineno=1897, col_offset=22), lineno=1897, col_offset=16), If(Compare(Name('pos', Load(), lineno=1898, col_offset=19), [GtE()], [Num(0, lineno=1898, col_offset=26)], lineno=1898, col_offset=19), [Assign([Name('endpos', Store(), lineno=1899, col_offset=20)], BinOp(Name('pos', Load(), lineno=1899, col_offset=29), Add(), Call(Name('len', Load(), lineno=1899, col_offset=35), [Attribute(Name('self', Load(), lineno=1899, col_offset=39), '_readnl', Load(), lineno=1899, col_offset=39)], [], None, None, lineno=1899, col_offset=35), lineno=1899, col_offset=29), lineno=1899, col_offset=20), Break( lineno=1900, col_offset=20)], [], lineno=1898, col_offset=16)], lineno=1864, col_offset=17)], lineno=1855, col_offset=12), If(BoolOp(And(), [Compare(Name('limit', Load(), lineno=1902, col_offset=15), [GtE()], [Num(0, lineno=1902, col_offset=24)], lineno=1902, col_offset=15), Compare(Call(Name('len', Load(), lineno=1902, col_offset=30), [Name('line', Load(), lineno=1902, col_offset=34)], [], None, None, lineno=1902, col_offset=30), [GtE()], [Name('limit', Load(), lineno=1902, col_offset=43)], lineno=1902, col_offset=30)], lineno=1902, col_offset=15), [Assign([Name('endpos', Store(), lineno=1903, col_offset=16)], Name('limit', Load(), lineno=1903, col_offset=25), lineno=1903, col_offset=16), Break( lineno=1904, col_offset=16)], [], lineno=1902, col_offset=12), While(Call(Attribute(Name('self', Load(), lineno=1907, col_offset=18), '_read_chunk', Load(), lineno=1907, col_offset=18), [], [], None, None, lineno=1907, col_offset=18), [If(Attribute(Name('self', Load(), lineno=1908, col_offset=19), '_decoded_chars', Load(), lineno=1908, col_offset=19), [Break( lineno=1909, col_offset=20)], [], lineno=1908, col_offset=16)], [], lineno=1907, col_offset=12), If(Attribute(Name('self', Load(), lineno=1910, col_offset=15), '_decoded_chars', Load(), lineno=1910, col_offset=15), [AugAssign(Name('line', Store(), lineno=1911, col_offset=16), Add(), Call(Attribute(Name('self', Load(), lineno=1911, col_offset=24), '_get_decoded_chars', Load(), lineno=1911, col_offset=24), [], [], None, None, lineno=1911, col_offset=24), lineno=1911, col_offset=16)], [Expr(Call(Attribute(Name('self', Load(), lineno=1914, col_offset=16), '_set_decoded_chars', Load(), lineno=1914, col_offset=16), [Str(u'', lineno=1914, col_offset=40)], [], None, None, lineno=1914, col_offset=16), lineno=1914, col_offset=16), Assign([Attribute(Name('self', Load(), lineno=1915, col_offset=16), '_snapshot', Store(), lineno=1915, col_offset=16)], Name('None', Load(), lineno=1915, col_offset=33), lineno=1915, col_offset=16), Return(Name('line', Load(), lineno=1916, col_offset=23), lineno=1916, col_offset=16)], lineno=1910, col_offset=12)], [], lineno=1854, col_offset=8), If(BoolOp(And(), [Compare(Name('limit', Load(), lineno=1918, col_offset=11), [GtE()], [Num(0, lineno=1918, col_offset=20)], lineno=1918, col_offset=11), Compare(Name('endpos', Load(), lineno=1918, col_offset=26), [Gt()], [Name('limit', Load(), lineno=1918, col_offset=35)], lineno=1918, col_offset=26)], lineno=1918, col_offset=11), [Assign([Name('endpos', Store(), lineno=1919, col_offset=12)], Name('limit', Load(), lineno=1919, col_offset=21), lineno=1919, col_offset=12)], [], lineno=1918, col_offset=8), Expr(Call(Attribute(Name('self', Load(), lineno=1922, col_offset=8), '_rewind_decoded_chars', Load(), lineno=1922, col_offset=8), [BinOp(Call(Name('len', Load(), lineno=1922, col_offset=35), [Name('line', Load(), lineno=1922, col_offset=39)], [], None, None, lineno=1922, col_offset=35), Sub(), Name('endpos', Load(), lineno=1922, col_offset=47), lineno=1922, col_offset=35)], [], None, None, lineno=1922, col_offset=8), lineno=1922, col_offset=8), Return(Subscript(Name('line', Load(), lineno=1923, col_offset=15), Slice(None, Name('endpos', Load(), lineno=1923, col_offset=21), None), Load(), lineno=1923, col_offset=15), lineno=1923, col_offset=8)], [], lineno=1837, col_offset=4), FunctionDef('newlines', arguments([Name('self', Param(), lineno=1926, col_offset=17)], None, None, []), [Return(IfExp(Attribute(Name('self', Load(), lineno=1927, col_offset=41), '_decoder', Load(), lineno=1927, col_offset=41), Attribute(Attribute(Name('self', Load(), lineno=1927, col_offset=15), '_decoder', Load(), lineno=1927, col_offset=15), 'newlines', Load(), lineno=1927, col_offset=15), Name('None', Load(), lineno=1927, col_offset=60), lineno=1927, col_offset=15), lineno=1927, col_offset=8)], [Name('property', Load(), lineno=1925, col_offset=5)], lineno=1925, col_offset=4)], [], lineno=1409, col_offset=0), ClassDef('StringIO', [Name('TextIOWrapper', Load(), lineno=1930, col_offset=15)], [Expr(Str(u"Text I/O implementation using an in-memory buffer.\n\n    The initial_value argument sets the value of object.  The newline\n    argument is like the one of TextIOWrapper's constructor.\n    ", lineno=1935, col_offset=-1), lineno=1935, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=1937, col_offset=17), Name('initial_value', Param(), lineno=1937, col_offset=23), Name('newline', Param(), lineno=1937, col_offset=41)], None, None, [Str(u'', lineno=1937, col_offset=37), Str(u'\n', lineno=1937, col_offset=49)]), [Expr(Call(Attribute(Call(Name('super', Load(), lineno=1938, col_offset=8), [Name('StringIO', Load(), lineno=1938, col_offset=14), Name('self', Load(), lineno=1938, col_offset=24)], [], None, None, lineno=1938, col_offset=8), '__init__', Load(), lineno=1938, col_offset=8), [Call(Name('BytesIO', Load(), lineno=1938, col_offset=39), [], [], None, None, lineno=1938, col_offset=39)], [keyword('encoding', Str(u'utf-8', lineno=1939, col_offset=48)), keyword('errors', Str(u'strict', lineno=1940, col_offset=46)), keyword('newline', Name('newline', Load(), lineno=1941, col_offset=47))], None, None, lineno=1938, col_offset=8), lineno=1938, col_offset=8), If(Compare(Name('newline', Load(), lineno=1944, col_offset=11), [Is()], [Name('None', Load(), lineno=1944, col_offset=22)], lineno=1944, col_offset=11), [Assign([Attribute(Name('self', Load(), lineno=1945, col_offset=12), '_writetranslate', Store(), lineno=1945, col_offset=12)], Name('False', Load(), lineno=1945, col_offset=35), lineno=1945, col_offset=12)], [], lineno=1944, col_offset=8), If(Name('initial_value', Load(), lineno=1946, col_offset=11), [If(UnaryOp(Not(), Call(Name('isinstance', Load(), lineno=1947, col_offset=19), [Name('initial_value', Load(), lineno=1947, col_offset=30), Name('unicode', Load(), lineno=1947, col_offset=45)], [], None, None, lineno=1947, col_offset=19), lineno=1947, col_offset=15), [Assign([Name('initial_value', Store(), lineno=1948, col_offset=16)], Call(Name('unicode', Load(), lineno=1948, col_offset=32), [Name('initial_value', Load(), lineno=1948, col_offset=40)], [], None, None, lineno=1948, col_offset=32), lineno=1948, col_offset=16)], [], lineno=1947, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1949, col_offset=12), 'write', Load(), lineno=1949, col_offset=12), [Name('initial_value', Load(), lineno=1949, col_offset=23)], [], None, None, lineno=1949, col_offset=12), lineno=1949, col_offset=12), Expr(Call(Attribute(Name('self', Load(), lineno=1950, col_offset=12), 'seek', Load(), lineno=1950, col_offset=12), [Num(0, lineno=1950, col_offset=22)], [], None, None, lineno=1950, col_offset=12), lineno=1950, col_offset=12)], [], lineno=1946, col_offset=8)], [], lineno=1937, col_offset=4), FunctionDef('getvalue', arguments([Name('self', Param(), lineno=1952, col_offset=17)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1953, col_offset=8), 'flush', Load(), lineno=1953, col_offset=8), [], [], None, None, lineno=1953, col_offset=8), lineno=1953, col_offset=8), Return(Call(Attribute(Call(Attribute(Attribute(Name('self', Load(), lineno=1954, col_offset=15), 'buffer', Load(), lineno=1954, col_offset=15), 'getvalue', Load(), lineno=1954, col_offset=15), [], [], None, None, lineno=1954, col_offset=15), 'decode', Load(), lineno=1954, col_offset=15), [Attribute(Name('self', Load(), lineno=1954, col_offset=45), '_encoding', Load(), lineno=1954, col_offset=45), Attribute(Name('self', Load(), lineno=1954, col_offset=61), '_errors', Load(), lineno=1954, col_offset=61)], [], None, None, lineno=1954, col_offset=15), lineno=1954, col_offset=8)], [], lineno=1952, col_offset=4), FunctionDef('__repr__', arguments([Name('self', Param(), lineno=1956, col_offset=17)], None, None, []), [Return(Call(Attribute(Name('object', Load(), lineno=1959, col_offset=15), '__repr__', Load(), lineno=1959, col_offset=15), [Name('self', Load(), lineno=1959, col_offset=31)], [], None, None, lineno=1959, col_offset=15), lineno=1959, col_offset=8)], [], lineno=1956, col_offset=4), FunctionDef('errors', arguments([Name('self', Param(), lineno=1962, col_offset=15)], None, None, []), [Return(Name('None', Load(), lineno=1963, col_offset=15), lineno=1963, col_offset=8)], [Name('property', Load(), lineno=1961, col_offset=5)], lineno=1961, col_offset=4), FunctionDef('encoding', arguments([Name('self', Param(), lineno=1966, col_offset=17)], None, None, []), [Return(Name('None', Load(), lineno=1967, col_offset=15), lineno=1967, col_offset=8)], [Name('property', Load(), lineno=1965, col_offset=5)], lineno=1965, col_offset=4), FunctionDef('detach', arguments([Name('self', Param(), lineno=1969, col_offset=15)], None, None, []), [Expr(Call(Attribute(Name('self', Load(), lineno=1971, col_offset=8), '_unsupported', Load(), lineno=1971, col_offset=8), [Str(u'detach', lineno=1971, col_offset=26)], [], None, None, lineno=1971, col_offset=8), lineno=1971, col_offset=8)], [], lineno=1969, col_offset=4)], [], lineno=1930, col_offset=0)])
