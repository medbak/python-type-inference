Module([Expr(Str('Variables, arguments and argument transfer modes etc.', lineno=1, col_offset=0), lineno=1, col_offset=0), Assign([Name('InMode', Store(), lineno=5, col_offset=0)], Num(1, lineno=5, col_offset=12), lineno=5, col_offset=0), Assign([Name('OutMode', Store(), lineno=6, col_offset=0)], Num(2, lineno=6, col_offset=12), lineno=6, col_offset=0), Assign([Name('InOutMode', Store(), lineno=7, col_offset=0)], Num(3, lineno=7, col_offset=12), lineno=7, col_offset=0), Assign([Name('ModeMask', Store(), lineno=8, col_offset=0)], Num(3, lineno=8, col_offset=12), lineno=8, col_offset=0), Assign([Name('SelfMode', Store(), lineno=13, col_offset=0)], BinOp(Num(4, lineno=13, col_offset=14), Add(), Name('InMode', Load(), lineno=13, col_offset=16), lineno=13, col_offset=14), lineno=13, col_offset=0), Assign([Name('ReturnMode', Store(), lineno=14, col_offset=0)], BinOp(Num(8, lineno=14, col_offset=14), Add(), Name('OutMode', Load(), lineno=14, col_offset=16), lineno=14, col_offset=14), lineno=14, col_offset=0), Assign([Name('ErrorMode', Store(), lineno=15, col_offset=0)], BinOp(Num(16, lineno=15, col_offset=13), Add(), Name('OutMode', Load(), lineno=15, col_offset=16), lineno=15, col_offset=13), lineno=15, col_offset=0), Assign([Name('RefMode', Store(), lineno=16, col_offset=0)], Num(32, lineno=16, col_offset=13), lineno=16, col_offset=0), Assign([Name('ConstMode', Store(), lineno=17, col_offset=0)], Num(64, lineno=17, col_offset=13), lineno=17, col_offset=0), ClassDef('Variable', [], [Expr(Str('A Variable holds a type, a name, a transfer mode and flags.\n\n    Most of its methods call the correponding type method with the\n    variable name.\n    ', lineno=25, col_offset=-1), lineno=25, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=27, col_offset=17), Name('type', Param(), lineno=27, col_offset=23), Name('name', Param(), lineno=27, col_offset=29), Name('flags', Param(), lineno=27, col_offset=42)], None, None, [Name('None', Load(), lineno=27, col_offset=36), Name('InMode', Load(), lineno=27, col_offset=50)]), [Expr(Str('Call with a type, a name and flags.\n\n        If name is None, it muse be set later.\n        flags defaults to InMode.\n        ', lineno=32, col_offset=-1), lineno=32, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=33, col_offset=8), 'type', Store(), lineno=33, col_offset=8)], Name('type', Load(), lineno=33, col_offset=20), lineno=33, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=34, col_offset=8), 'name', Store(), lineno=34, col_offset=8)], Name('name', Load(), lineno=34, col_offset=20), lineno=34, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=35, col_offset=8), 'flags', Store(), lineno=35, col_offset=8)], Name('flags', Load(), lineno=35, col_offset=21), lineno=35, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=36, col_offset=8), 'mode', Store(), lineno=36, col_offset=8)], BinOp(Name('flags', Load(), lineno=36, col_offset=20), BitAnd(), Name('ModeMask', Load(), lineno=36, col_offset=28), lineno=36, col_offset=20), lineno=36, col_offset=8)], [], lineno=27, col_offset=4), FunctionDef('declare', arguments([Name('self', Param(), lineno=38, col_offset=16)], None, None, []), [Expr(Str('Declare the variable if necessary.\n\n        If it is "self", it is not declared.\n        ', lineno=42, col_offset=-1), lineno=42, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=43, col_offset=11), 'flags', Load(), lineno=43, col_offset=11), [Eq()], [BinOp(Name('ReturnMode', Load(), lineno=43, col_offset=25), Add(), Name('RefMode', Load(), lineno=43, col_offset=36), lineno=43, col_offset=25)], lineno=43, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=44, col_offset=12), 'type', Load(), lineno=44, col_offset=12), 'declare', Load(), lineno=44, col_offset=12), [Attribute(Name('self', Load(), lineno=44, col_offset=30), 'name', Load(), lineno=44, col_offset=30)], [keyword('reference', Name('True', Load(), lineno=44, col_offset=51))], None, None, lineno=44, col_offset=12), lineno=44, col_offset=12)], [If(Compare(Attribute(Name('self', Load(), lineno=45, col_offset=13), 'flags', Load(), lineno=45, col_offset=13), [NotEq()], [Name('SelfMode', Load(), lineno=45, col_offset=27)], lineno=45, col_offset=13), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=46, col_offset=12), 'type', Load(), lineno=46, col_offset=12), 'declare', Load(), lineno=46, col_offset=12), [Attribute(Name('self', Load(), lineno=46, col_offset=30), 'name', Load(), lineno=46, col_offset=30)], [], None, None, lineno=46, col_offset=12), lineno=46, col_offset=12)], [], lineno=45, col_offset=13)], lineno=43, col_offset=8)], [], lineno=38, col_offset=4), FunctionDef('getArgDeclarations', arguments([Name('self', Param(), lineno=48, col_offset=27), Name('fullmodes', Param(), lineno=48, col_offset=33)], None, None, [Name('False', Load(), lineno=48, col_offset=43)]), [Assign([Name('refmode', Store(), lineno=49, col_offset=8)], BinOp(Attribute(Name('self', Load(), lineno=49, col_offset=19), 'flags', Load(), lineno=49, col_offset=19), BitAnd(), Name('RefMode', Load(), lineno=49, col_offset=32), lineno=49, col_offset=19), lineno=49, col_offset=8), Assign([Name('constmode', Store(), lineno=50, col_offset=8)], Name('False', Load(), lineno=50, col_offset=20), lineno=50, col_offset=8), Assign([Name('outmode', Store(), lineno=51, col_offset=8)], Name('False', Load(), lineno=51, col_offset=18), lineno=51, col_offset=8), If(Name('fullmodes', Load(), lineno=52, col_offset=11), [Assign([Name('constmode', Store(), lineno=53, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=53, col_offset=25), 'flags', Load(), lineno=53, col_offset=25), BitAnd(), Name('ConstMode', Load(), lineno=53, col_offset=38), lineno=53, col_offset=25), lineno=53, col_offset=12), Assign([Name('outmode', Store(), lineno=54, col_offset=12)], BinOp(Attribute(Name('self', Load(), lineno=54, col_offset=23), 'flags', Load(), lineno=54, col_offset=23), BitAnd(), Name('OutMode', Load(), lineno=54, col_offset=36), lineno=54, col_offset=23), lineno=54, col_offset=12)], [], lineno=52, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=55, col_offset=15), 'type', Load(), lineno=55, col_offset=15), 'getArgDeclarations', Load(), lineno=55, col_offset=15), [Attribute(Name('self', Load(), lineno=55, col_offset=44), 'name', Load(), lineno=55, col_offset=44)], [keyword('reference', Name('refmode', Load(), lineno=56, col_offset=26)), keyword('constmode', Name('constmode', Load(), lineno=56, col_offset=45)), keyword('outmode', Name('outmode', Load(), lineno=56, col_offset=64))], None, None, lineno=55, col_offset=15), lineno=55, col_offset=8)], [], lineno=48, col_offset=4), FunctionDef('getAuxDeclarations', arguments([Name('self', Param(), lineno=58, col_offset=27)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=59, col_offset=15), 'type', Load(), lineno=59, col_offset=15), 'getAuxDeclarations', Load(), lineno=59, col_offset=15), [Attribute(Name('self', Load(), lineno=59, col_offset=44), 'name', Load(), lineno=59, col_offset=44)], [], None, None, lineno=59, col_offset=15), lineno=59, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=61, col_offset=22)], None, None, []), [Expr(Str("Call the type's getargsFormatmethod.", lineno=62, col_offset=8), lineno=62, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=63, col_offset=15), 'type', Load(), lineno=63, col_offset=15), 'getargsFormat', Load(), lineno=63, col_offset=15), [], [], None, None, lineno=63, col_offset=15), lineno=63, col_offset=8)], [], lineno=61, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=65, col_offset=20)], None, None, []), [Expr(Str("Call the type's getargsArgsmethod.", lineno=66, col_offset=8), lineno=66, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=67, col_offset=15), 'type', Load(), lineno=67, col_offset=15), 'getargsArgs', Load(), lineno=67, col_offset=15), [Attribute(Name('self', Load(), lineno=67, col_offset=37), 'name', Load(), lineno=67, col_offset=37)], [], None, None, lineno=67, col_offset=15), lineno=67, col_offset=8)], [], lineno=65, col_offset=4), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=69, col_offset=21)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=70, col_offset=15), 'type', Load(), lineno=70, col_offset=15), 'getargsCheck', Load(), lineno=70, col_offset=15), [Attribute(Name('self', Load(), lineno=70, col_offset=38), 'name', Load(), lineno=70, col_offset=38)], [], None, None, lineno=70, col_offset=15), lineno=70, col_offset=8)], [], lineno=69, col_offset=4), FunctionDef('getargsPreCheck', arguments([Name('self', Param(), lineno=72, col_offset=24)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=73, col_offset=15), 'type', Load(), lineno=73, col_offset=15), 'getargsPreCheck', Load(), lineno=73, col_offset=15), [Attribute(Name('self', Load(), lineno=73, col_offset=41), 'name', Load(), lineno=73, col_offset=41)], [], None, None, lineno=73, col_offset=15), lineno=73, col_offset=8)], [], lineno=72, col_offset=4), FunctionDef('passArgument', arguments([Name('self', Param(), lineno=75, col_offset=21)], None, None, []), [Expr(Str('Return the string required to pass the variable as argument.\n\n        For "in" arguments, return the variable name.\n        For "out" and "in out" arguments,\n        return its name prefixed with "&".\n        ', lineno=81, col_offset=-1), lineno=81, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=82, col_offset=11), 'mode', Load(), lineno=82, col_offset=11), [Eq()], [Name('InMode', Load(), lineno=82, col_offset=24)], lineno=82, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=83, col_offset=19), 'type', Load(), lineno=83, col_offset=19), 'passInput', Load(), lineno=83, col_offset=19), [Attribute(Name('self', Load(), lineno=83, col_offset=39), 'name', Load(), lineno=83, col_offset=39)], [], None, None, lineno=83, col_offset=19), lineno=83, col_offset=12)], [], lineno=82, col_offset=8), If(BinOp(Attribute(Name('self', Load(), lineno=84, col_offset=11), 'mode', Load(), lineno=84, col_offset=11), BitAnd(), Name('RefMode', Load(), lineno=84, col_offset=23), lineno=84, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=85, col_offset=19), 'type', Load(), lineno=85, col_offset=19), 'passReference', Load(), lineno=85, col_offset=19), [Attribute(Name('self', Load(), lineno=85, col_offset=43), 'name', Load(), lineno=85, col_offset=43)], [], None, None, lineno=85, col_offset=19), lineno=85, col_offset=12)], [], lineno=84, col_offset=8), If(Compare(Attribute(Name('self', Load(), lineno=86, col_offset=11), 'mode', Load(), lineno=86, col_offset=11), [In()], [Tuple([Name('OutMode', Load(), lineno=86, col_offset=25), Name('InOutMode', Load(), lineno=86, col_offset=34)], Load(), lineno=86, col_offset=25)], lineno=86, col_offset=11), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=87, col_offset=19), 'type', Load(), lineno=87, col_offset=19), 'passOutput', Load(), lineno=87, col_offset=19), [Attribute(Name('self', Load(), lineno=87, col_offset=40), 'name', Load(), lineno=87, col_offset=40)], [], None, None, lineno=87, col_offset=19), lineno=87, col_offset=12)], [], lineno=86, col_offset=8), Return(BinOp(Str('/*mode?*/', lineno=89, col_offset=15), Add(), Call(Attribute(Attribute(Name('self', Load(), lineno=89, col_offset=29), 'type', Load(), lineno=89, col_offset=29), 'passInput', Load(), lineno=89, col_offset=29), [Attribute(Name('self', Load(), lineno=89, col_offset=49), 'name', Load(), lineno=89, col_offset=49)], [], None, None, lineno=89, col_offset=29), lineno=89, col_offset=15), lineno=89, col_offset=8)], [], lineno=75, col_offset=4), FunctionDef('errorCheck', arguments([Name('self', Param(), lineno=91, col_offset=19)], None, None, []), [Expr(Str("Check for an error if necessary.\n\n        This only generates code if the variable's mode is ErrorMode.\n        ", lineno=95, col_offset=-1), lineno=95, col_offset=-1), If(Compare(Attribute(Name('self', Load(), lineno=96, col_offset=11), 'flags', Load(), lineno=96, col_offset=11), [Eq()], [Name('ErrorMode', Load(), lineno=96, col_offset=25)], lineno=96, col_offset=11), [Expr(Call(Attribute(Attribute(Name('self', Load(), lineno=97, col_offset=12), 'type', Load(), lineno=97, col_offset=12), 'errorCheck', Load(), lineno=97, col_offset=12), [Attribute(Name('self', Load(), lineno=97, col_offset=33), 'name', Load(), lineno=97, col_offset=33)], [], None, None, lineno=97, col_offset=12), lineno=97, col_offset=12)], [], lineno=96, col_offset=8)], [], lineno=91, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=99, col_offset=23)], None, None, []), [Expr(Str("Call the type's mkvalueFormat method.", lineno=100, col_offset=8), lineno=100, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=101, col_offset=15), 'type', Load(), lineno=101, col_offset=15), 'mkvalueFormat', Load(), lineno=101, col_offset=15), [], [], None, None, lineno=101, col_offset=15), lineno=101, col_offset=8)], [], lineno=99, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=103, col_offset=20)], None, None, []), [Expr(Str("Call the type's mkvalueArgs method.", lineno=104, col_offset=8), lineno=104, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=105, col_offset=15), 'type', Load(), lineno=105, col_offset=15), 'mkvalueArgs', Load(), lineno=105, col_offset=15), [Attribute(Name('self', Load(), lineno=105, col_offset=37), 'name', Load(), lineno=105, col_offset=37)], [], None, None, lineno=105, col_offset=15), lineno=105, col_offset=8)], [], lineno=103, col_offset=4), FunctionDef('mkvaluePreCheck', arguments([Name('self', Param(), lineno=107, col_offset=24)], None, None, []), [Return(Call(Attribute(Attribute(Name('self', Load(), lineno=108, col_offset=15), 'type', Load(), lineno=108, col_offset=15), 'mkvaluePreCheck', Load(), lineno=108, col_offset=15), [Attribute(Name('self', Load(), lineno=108, col_offset=41), 'name', Load(), lineno=108, col_offset=41)], [], None, None, lineno=108, col_offset=15), lineno=108, col_offset=8)], [], lineno=107, col_offset=4), FunctionDef('cleanup', arguments([Name('self', Param(), lineno=110, col_offset=16)], None, None, []), [Expr(Str("Call the type's cleanup method.", lineno=111, col_offset=8), lineno=111, col_offset=8), Return(Call(Attribute(Attribute(Name('self', Load(), lineno=112, col_offset=15), 'type', Load(), lineno=112, col_offset=15), 'cleanup', Load(), lineno=112, col_offset=15), [Attribute(Name('self', Load(), lineno=112, col_offset=33), 'name', Load(), lineno=112, col_offset=33)], [], None, None, lineno=112, col_offset=15), lineno=112, col_offset=8)], [], lineno=110, col_offset=4)], [], lineno=19, col_offset=0)])
