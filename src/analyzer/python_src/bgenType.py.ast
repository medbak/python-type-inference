Module([Expr(Str('Type classes and a modest collection of standard types.', lineno=1, col_offset=0), lineno=1, col_offset=0), ImportFrom('bgenOutput', [alias('*', None)], 0, lineno=4, col_offset=0), ClassDef('Type', [], [Expr(Str('Define the various things you can do with a C type.\n\n    Most methods are intended to be extended or overridden.\n    ', lineno=12, col_offset=-1), lineno=12, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=14, col_offset=17), Name('typeName', Param(), lineno=14, col_offset=23), Name('fmt', Param(), lineno=14, col_offset=33)], None, None, []), [Expr(Str('Call with the C name and getargs format for the type.\n\n        Example: int = Type("int", "i")\n        ', lineno=18, col_offset=-1), lineno=18, col_offset=-1), Assign([Attribute(Name('self', Load(), lineno=19, col_offset=8), 'typeName', Store(), lineno=19, col_offset=8)], Name('typeName', Load(), lineno=19, col_offset=24), lineno=19, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=20, col_offset=8), 'fmt', Store(), lineno=20, col_offset=8)], Name('fmt', Load(), lineno=20, col_offset=19), lineno=20, col_offset=8)], [], lineno=14, col_offset=4), FunctionDef('declare', arguments([Name('self', Param(), lineno=22, col_offset=16), Name('name', Param(), lineno=22, col_offset=22), Name('reference', Param(), lineno=22, col_offset=28)], None, None, [Name('False', Load(), lineno=22, col_offset=38)]), [Expr(Str('Declare a variable of the type with a given name.\n\n        Example: int.declare(\'spam\') prints "int spam;"\n        ', lineno=26, col_offset=-1), lineno=26, col_offset=-1), For(Name('decl', Store(), lineno=27, col_offset=12), Call(Attribute(Name('self', Load(), lineno=27, col_offset=20), 'getArgDeclarations', Load(), lineno=27, col_offset=20), [Name('name', Load(), lineno=27, col_offset=44), Name('reference', Load(), lineno=27, col_offset=50)], [], None, None, lineno=27, col_offset=20), [Expr(Call(Name('Output', Load(), lineno=28, col_offset=12), [Str('%s;', lineno=28, col_offset=19), Name('decl', Load(), lineno=28, col_offset=26)], [], None, None, lineno=28, col_offset=12), lineno=28, col_offset=12)], [], lineno=27, col_offset=8), For(Name('decl', Store(), lineno=29, col_offset=12), Call(Attribute(Name('self', Load(), lineno=29, col_offset=20), 'getAuxDeclarations', Load(), lineno=29, col_offset=20), [Name('name', Load(), lineno=29, col_offset=44)], [], None, None, lineno=29, col_offset=20), [Expr(Call(Name('Output', Load(), lineno=30, col_offset=12), [Str('%s;', lineno=30, col_offset=19), Name('decl', Load(), lineno=30, col_offset=26)], [], None, None, lineno=30, col_offset=12), lineno=30, col_offset=12)], [], lineno=29, col_offset=8)], [], lineno=22, col_offset=4), FunctionDef('getArgDeclarations', arguments([Name('self', Param(), lineno=32, col_offset=27), Name('name', Param(), lineno=32, col_offset=33), Name('reference', Param(), lineno=32, col_offset=39), Name('constmode', Param(), lineno=32, col_offset=56), Name('outmode', Param(), lineno=32, col_offset=73)], None, None, [Name('False', Load(), lineno=32, col_offset=49), Name('False', Load(), lineno=32, col_offset=66), Name('False', Load(), lineno=32, col_offset=81)]), [Expr(Str('Return the main part of the declarations for this type: the items\n        that will be passed as arguments in the C/C++ function call.', lineno=34, col_offset=-1), lineno=34, col_offset=-1), If(Name('reference', Load(), lineno=35, col_offset=11), [Assign([Name('ref', Store(), lineno=36, col_offset=12)], Str('&', lineno=36, col_offset=18), lineno=36, col_offset=12)], [Assign([Name('ref', Store(), lineno=38, col_offset=12)], Str('', lineno=38, col_offset=18), lineno=38, col_offset=12)], lineno=35, col_offset=8), If(Name('constmode', Load(), lineno=39, col_offset=11), [Assign([Name('const', Store(), lineno=40, col_offset=12)], Str('const ', lineno=40, col_offset=20), lineno=40, col_offset=12)], [Assign([Name('const', Store(), lineno=42, col_offset=12)], Str('', lineno=42, col_offset=20), lineno=42, col_offset=12)], lineno=39, col_offset=8), If(Name('outmode', Load(), lineno=43, col_offset=11), [Assign([Name('out', Store(), lineno=44, col_offset=12)], Str('*', lineno=44, col_offset=18), lineno=44, col_offset=12)], [Assign([Name('out', Store(), lineno=46, col_offset=12)], Str('', lineno=46, col_offset=18), lineno=46, col_offset=12)], lineno=43, col_offset=8), Return(List([BinOp(Str('%s%s%s%s %s', lineno=47, col_offset=16), Mod(), Tuple([Name('const', Load(), lineno=47, col_offset=33), Attribute(Name('self', Load(), lineno=47, col_offset=40), 'typeName', Load(), lineno=47, col_offset=40), Name('ref', Load(), lineno=47, col_offset=55), Name('out', Load(), lineno=47, col_offset=60), Name('name', Load(), lineno=47, col_offset=65)], Load(), lineno=47, col_offset=33), lineno=47, col_offset=16)], Load(), lineno=47, col_offset=15), lineno=47, col_offset=8)], [], lineno=32, col_offset=4), FunctionDef('getAuxDeclarations', arguments([Name('self', Param(), lineno=49, col_offset=27), Name('name', Param(), lineno=49, col_offset=33)], None, None, []), [Expr(Str('Return any auxiliary declarations needed for implementing this\n        type, such as helper variables used to hold sizes, etc. These declarations\n        are not part of the C/C++ function call interface.', lineno=52, col_offset=-1), lineno=52, col_offset=-1), Return(List([], Load(), lineno=53, col_offset=15), lineno=53, col_offset=8)], [], lineno=49, col_offset=4), FunctionDef('getargs', arguments([Name('self', Param(), lineno=55, col_offset=16)], None, None, []), [Return(Tuple([Call(Attribute(Name('self', Load(), lineno=56, col_offset=15), 'getargsFormat', Load(), lineno=56, col_offset=15), [], [], None, None, lineno=56, col_offset=15), Call(Attribute(Name('self', Load(), lineno=56, col_offset=37), 'getargsArgs', Load(), lineno=56, col_offset=37), [], [], None, None, lineno=56, col_offset=37)], Load(), lineno=56, col_offset=15), lineno=56, col_offset=8)], [], lineno=55, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=58, col_offset=22)], None, None, []), [Expr(Str('Return the format for this type for use with PyArg_Parse().\n\n        Example: int.getargsFormat() returns the string "i".\n        (getargs is a very old name for PyArg_Parse, hence the name of this method).\n        ', lineno=63, col_offset=-1), lineno=63, col_offset=-1), Return(Attribute(Name('self', Load(), lineno=64, col_offset=15), 'fmt', Load(), lineno=64, col_offset=15), lineno=64, col_offset=8)], [], lineno=58, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=66, col_offset=20), Name('name', Param(), lineno=66, col_offset=26)], None, None, []), [Expr(Str('Return an argument for use with PyArg_Parse().\n\n        Example: int.getargsArgs("spam") returns the string "&spam".\n        ', lineno=70, col_offset=-1), lineno=70, col_offset=-1), Return(BinOp(Str('&', lineno=71, col_offset=15), Add(), Name('name', Load(), lineno=71, col_offset=21), lineno=71, col_offset=15), lineno=71, col_offset=8)], [], lineno=66, col_offset=4), FunctionDef('getargsPreCheck', arguments([Name('self', Param(), lineno=73, col_offset=24), Name('name', Param(), lineno=73, col_offset=30)], None, None, []), [Expr(Str('Perform any actions needed before calling getargs().\n\n        This could include declaring temporary variables and such.\n        ', lineno=77, col_offset=-1), lineno=77, col_offset=-1)], [], lineno=73, col_offset=4), FunctionDef('getargsCheck', arguments([Name('self', Param(), lineno=79, col_offset=21), Name('name', Param(), lineno=79, col_offset=27)], None, None, []), [Expr(Str('Perform any needed post-[new]getargs() checks.\n\n        This is type-dependent; the default does not check for errors.\n        An example would be a check for a maximum string length, or it\n        could do post-getargs() copying or conversion.', lineno=84, col_offset=-1), lineno=84, col_offset=-1)], [], lineno=79, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=86, col_offset=18), Name('name', Param(), lineno=86, col_offset=24)], None, None, []), [Expr(Str('Return an argument for passing a variable into a call.\n\n        Example: int.passInput("spam") returns the string "spam".\n        ', lineno=90, col_offset=-1), lineno=90, col_offset=-1), Return(Name('name', Load(), lineno=91, col_offset=15), lineno=91, col_offset=8)], [], lineno=86, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=93, col_offset=19), Name('name', Param(), lineno=93, col_offset=25)], None, None, []), [Expr(Str('Return an argument for returning a variable out of a call.\n\n        Example: int.passOutput("spam") returns the string "&spam".\n        ', lineno=97, col_offset=-1), lineno=97, col_offset=-1), Return(BinOp(Str('&', lineno=98, col_offset=15), Add(), Name('name', Load(), lineno=98, col_offset=21), lineno=98, col_offset=15), lineno=98, col_offset=8)], [], lineno=93, col_offset=4), FunctionDef('passReference', arguments([Name('self', Param(), lineno=100, col_offset=22), Name('name', Param(), lineno=100, col_offset=28)], None, None, []), [Expr(Str('Return an argument for C++ pass-by-reference.\n        Default is to call passInput().\n        ', lineno=103, col_offset=-1), lineno=103, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=104, col_offset=15), 'passInput', Load(), lineno=104, col_offset=15), [Name('name', Load(), lineno=104, col_offset=30)], [], None, None, lineno=104, col_offset=15), lineno=104, col_offset=8)], [], lineno=100, col_offset=4), FunctionDef('errorCheck', arguments([Name('self', Param(), lineno=106, col_offset=19), Name('name', Param(), lineno=106, col_offset=25)], None, None, []), [Expr(Str('Check for an error returned in the variable.\n\n        This is type-dependent; the default does not check for errors.\n        An example would be a check for a NULL pointer.\n        If an error is found, the generated routine should\n        raise an exception and return NULL.\n\n        XXX There should be a way to add error clean-up code.\n        ', lineno=115, col_offset=-1), lineno=115, col_offset=-1), Expr(Call(Name('Output', Load(), lineno=116, col_offset=8), [Str('/* XXX no err check for %s %s */', lineno=116, col_offset=15), Attribute(Name('self', Load(), lineno=116, col_offset=51), 'typeName', Load(), lineno=116, col_offset=51), Name('name', Load(), lineno=116, col_offset=66)], [], None, None, lineno=116, col_offset=8), lineno=116, col_offset=8)], [], lineno=106, col_offset=4), FunctionDef('mkvalue', arguments([Name('self', Param(), lineno=118, col_offset=16)], None, None, []), [Return(Tuple([Call(Attribute(Name('self', Load(), lineno=119, col_offset=15), 'mkvalueFormat', Load(), lineno=119, col_offset=15), [], [], None, None, lineno=119, col_offset=15), Call(Attribute(Name('self', Load(), lineno=119, col_offset=37), 'mkvalueArgs', Load(), lineno=119, col_offset=37), [], [], None, None, lineno=119, col_offset=37)], Load(), lineno=119, col_offset=15), lineno=119, col_offset=8)], [], lineno=118, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=121, col_offset=22)], None, None, []), [Expr(Str('Return the format for this type for use with Py_BuildValue().\n\n        This is normally the same as getargsFormat() but it is\n        a separate function to allow future divergence.\n        (mkvalue is a very old name for Py_BuildValue, hence the name of this\n        method).\n        ', lineno=128, col_offset=-1), lineno=128, col_offset=-1), Return(Call(Attribute(Name('self', Load(), lineno=129, col_offset=15), 'getargsFormat', Load(), lineno=129, col_offset=15), [], [], None, None, lineno=129, col_offset=15), lineno=129, col_offset=8)], [], lineno=121, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=131, col_offset=20), Name('name', Param(), lineno=131, col_offset=26)], None, None, []), [Expr(Str('Return an argument for use with Py_BuildValue().\n\n        Example: int.mkvalueArgs("spam") returns the string "spam".\n        ', lineno=135, col_offset=-1), lineno=135, col_offset=-1), Return(Name('name', Load(), lineno=136, col_offset=15), lineno=136, col_offset=8)], [], lineno=131, col_offset=4), FunctionDef('mkvaluePreCheck', arguments([Name('self', Param(), lineno=138, col_offset=24), Name('name', Param(), lineno=138, col_offset=30)], None, None, []), [Expr(Str('Perform any actions needed before calling mkvalue().\n\n        This could include declaring temporary variables and such.\n        ', lineno=142, col_offset=-1), lineno=142, col_offset=-1)], [], lineno=138, col_offset=4), FunctionDef('cleanup', arguments([Name('self', Param(), lineno=144, col_offset=16), Name('name', Param(), lineno=144, col_offset=22)], None, None, []), [Expr(Str('Clean up if necessary.\n\n        This is normally empty; it may deallocate buffers etc.\n        ', lineno=148, col_offset=-1), lineno=148, col_offset=-1), Pass( lineno=149, col_offset=8)], [], lineno=144, col_offset=4)], [], lineno=7, col_offset=0), ClassDef('ByAddressType', [Name('Type', Load(), lineno=151, col_offset=20)], [Expr(Str('Simple type that is also passed by address for input', lineno=152, col_offset=4), lineno=152, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=154, col_offset=18), Name('name', Param(), lineno=154, col_offset=24)], None, None, []), [Return(BinOp(Str('&%s', lineno=155, col_offset=15), Mod(), Name('name', Load(), lineno=155, col_offset=23), lineno=155, col_offset=15), lineno=155, col_offset=8)], [], lineno=154, col_offset=4)], [], lineno=151, col_offset=0), ClassDef('InputOnlyMixIn', [], [Expr(Str('Mix-in class to boobytrap passOutput', lineno=163, col_offset=4), lineno=163, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=165, col_offset=19), Name('name', Param(), lineno=165, col_offset=25)], None, None, []), [Raise(Name('RuntimeError', Load(), lineno=166, col_offset=14), BinOp(Str("Type '%s' can only be used for input parameters", lineno=166, col_offset=28), Mod(), Attribute(Name('self', Load(), lineno=166, col_offset=80), 'typeName', Load(), lineno=166, col_offset=80), lineno=166, col_offset=28), None, lineno=166, col_offset=8)], [], lineno=165, col_offset=4)], [], lineno=161, col_offset=0), ClassDef('InputOnlyType', [Name('InputOnlyMixIn', Load(), lineno=168, col_offset=20), Name('Type', Load(), lineno=168, col_offset=36)], [Expr(Str('Same as Type, but only usable for input parameters -- passOutput is boobytrapped', lineno=170, col_offset=4), lineno=170, col_offset=4)], [], lineno=168, col_offset=0), ClassDef('OutputOnlyMixIn', [], [Expr(Str('Mix-in class to boobytrap passInput', lineno=174, col_offset=4), lineno=174, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=176, col_offset=18), Name('name', Param(), lineno=176, col_offset=24)], None, None, []), [Raise(Name('RuntimeError', Load(), lineno=177, col_offset=14), BinOp(Str("Type '%s' can only be used for output parameters", lineno=177, col_offset=28), Mod(), Attribute(Name('self', Load(), lineno=177, col_offset=81), 'typeName', Load(), lineno=177, col_offset=81), lineno=177, col_offset=28), None, lineno=177, col_offset=8)], [], lineno=176, col_offset=4)], [], lineno=172, col_offset=0), ClassDef('OutputOnlyType', [Name('OutputOnlyMixIn', Load(), lineno=179, col_offset=21), Name('Type', Load(), lineno=179, col_offset=38)], [Expr(Str('Same as Type, but only usable for output parameters -- passInput is boobytrapped', lineno=181, col_offset=4), lineno=181, col_offset=4)], [], lineno=179, col_offset=0), Assign([Name('void', Store(), lineno=185, col_offset=0)], Name('None', Load(), lineno=185, col_offset=7), lineno=185, col_offset=0), Assign([Name('char', Store(), lineno=186, col_offset=0)], Call(Name('Type', Load(), lineno=186, col_offset=7), [Str('char', lineno=186, col_offset=12), Str('c', lineno=186, col_offset=20)], [], None, None, lineno=186, col_offset=7), lineno=186, col_offset=0), Assign([Name('short', Store(), lineno=187, col_offset=0)], Call(Name('Type', Load(), lineno=187, col_offset=8), [Str('short', lineno=187, col_offset=13), Str('h', lineno=187, col_offset=22)], [], None, None, lineno=187, col_offset=8), lineno=187, col_offset=0), Assign([Name('unsigned_short', Store(), lineno=188, col_offset=0)], Call(Name('Type', Load(), lineno=188, col_offset=17), [Str('unsigned short', lineno=188, col_offset=22), Str('H', lineno=188, col_offset=40)], [], None, None, lineno=188, col_offset=17), lineno=188, col_offset=0), Assign([Name('int', Store(), lineno=189, col_offset=0)], Call(Name('Type', Load(), lineno=189, col_offset=6), [Str('int', lineno=189, col_offset=11), Str('i', lineno=189, col_offset=18)], [], None, None, lineno=189, col_offset=6), lineno=189, col_offset=0), Assign([Name('long', Store(), lineno=190, col_offset=0)], Call(Name('Type', Load(), lineno=190, col_offset=7), [Str('long', lineno=190, col_offset=12), Str('l', lineno=190, col_offset=20)], [], None, None, lineno=190, col_offset=7), lineno=190, col_offset=0), Assign([Name('unsigned_long', Store(), lineno=191, col_offset=0)], Call(Name('Type', Load(), lineno=191, col_offset=16), [Str('unsigned long', lineno=191, col_offset=21), Str('l', lineno=191, col_offset=38)], [], None, None, lineno=191, col_offset=16), lineno=191, col_offset=0), Assign([Name('float', Store(), lineno=192, col_offset=0)], Call(Name('Type', Load(), lineno=192, col_offset=8), [Str('float', lineno=192, col_offset=13), Str('f', lineno=192, col_offset=22)], [], None, None, lineno=192, col_offset=8), lineno=192, col_offset=0), Assign([Name('double', Store(), lineno=193, col_offset=0)], Call(Name('Type', Load(), lineno=193, col_offset=9), [Str('double', lineno=193, col_offset=14), Str('d', lineno=193, col_offset=24)], [], None, None, lineno=193, col_offset=9), lineno=193, col_offset=0), Assign([Name('stringptr', Store(), lineno=199, col_offset=0)], Call(Name('InputOnlyType', Load(), lineno=199, col_offset=12), [Str('char*', lineno=199, col_offset=26), Str('s', lineno=199, col_offset=35)], [], None, None, lineno=199, col_offset=12), lineno=199, col_offset=0), Assign([Name('unicodestringptr', Store(), lineno=200, col_offset=0)], Call(Name('InputOnlyType', Load(), lineno=200, col_offset=19), [Str('wchar_t *', lineno=200, col_offset=33), Str('u', lineno=200, col_offset=46)], [], None, None, lineno=200, col_offset=19), lineno=200, col_offset=0), Assign([Name('objectptr', Store(), lineno=204, col_offset=0)], Call(Name('Type', Load(), lineno=204, col_offset=12), [Str('PyObject*', lineno=204, col_offset=17), Str('O', lineno=204, col_offset=30)], [], None, None, lineno=204, col_offset=12), lineno=204, col_offset=0), Assign([Name('stringobjectptr', Store(), lineno=205, col_offset=0)], Call(Name('Type', Load(), lineno=205, col_offset=18), [Str('PyStringObject*', lineno=205, col_offset=23), Str('S', lineno=205, col_offset=42)], [], None, None, lineno=205, col_offset=18), lineno=205, col_offset=0), ClassDef('FakeType', [Name('InputOnlyType', Load(), lineno=209, col_offset=15)], [Expr(Str('A type that is not represented in the Python version of the interface.\n\n    Instantiate with a value to pass in the call.\n    ', lineno=214, col_offset=-1), lineno=214, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=216, col_offset=17), Name('substitute', Param(), lineno=216, col_offset=23)], None, None, []), [Assign([Attribute(Name('self', Load(), lineno=217, col_offset=8), 'substitute', Store(), lineno=217, col_offset=8)], Name('substitute', Load(), lineno=217, col_offset=26), lineno=217, col_offset=8), Assign([Attribute(Name('self', Load(), lineno=218, col_offset=8), 'typeName', Store(), lineno=218, col_offset=8)], Name('None', Load(), lineno=218, col_offset=24), lineno=218, col_offset=8)], [], lineno=216, col_offset=4), FunctionDef('getArgDeclarations', arguments([Name('self', Param(), lineno=220, col_offset=27), Name('name', Param(), lineno=220, col_offset=33), Name('reference', Param(), lineno=220, col_offset=39), Name('constmode', Param(), lineno=220, col_offset=56), Name('outmode', Param(), lineno=220, col_offset=73)], None, None, [Name('False', Load(), lineno=220, col_offset=49), Name('False', Load(), lineno=220, col_offset=66), Name('False', Load(), lineno=220, col_offset=81)]), [Return(List([], Load(), lineno=221, col_offset=15), lineno=221, col_offset=8)], [], lineno=220, col_offset=4), FunctionDef('getAuxDeclarations', arguments([Name('self', Param(), lineno=223, col_offset=27), Name('name', Param(), lineno=223, col_offset=33), Name('reference', Param(), lineno=223, col_offset=39)], None, None, [Name('False', Load(), lineno=223, col_offset=49)]), [Return(List([], Load(), lineno=224, col_offset=15), lineno=224, col_offset=8)], [], lineno=223, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=226, col_offset=22)], None, None, []), [Return(Str('', lineno=227, col_offset=15), lineno=227, col_offset=8)], [], lineno=226, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=229, col_offset=20), Name('name', Param(), lineno=229, col_offset=26)], None, None, []), [Return(Name('None', Load(), lineno=230, col_offset=15), lineno=230, col_offset=8)], [], lineno=229, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=232, col_offset=18), Name('name', Param(), lineno=232, col_offset=24)], None, None, []), [Return(Attribute(Name('self', Load(), lineno=233, col_offset=15), 'substitute', Load(), lineno=233, col_offset=15), lineno=233, col_offset=8)], [], lineno=232, col_offset=4)], [], lineno=209, col_offset=0), ClassDef('OpaqueType', [Name('Type', Load(), lineno=236, col_offset=17)], [Expr(Str('A type represented by an opaque object type, always passed by address.\n\n    Instantiate with the type name and the names of the new and convert procs.\n    If fewer than three arguments are passed, the second argument is used\n    to derive the new and convert procs by appending _New and _Convert; it\n    defaults to the first argument.\n    ', lineno=244, col_offset=-1), lineno=244, col_offset=-1), FunctionDef('__init__', arguments([Name('self', Param(), lineno=246, col_offset=17), Name('name', Param(), lineno=246, col_offset=23), Name('arg', Param(), lineno=246, col_offset=29), Name('extra', Param(), lineno=246, col_offset=41)], None, None, [Name('None', Load(), lineno=246, col_offset=35), Name('None', Load(), lineno=246, col_offset=49)]), [Assign([Attribute(Name('self', Load(), lineno=247, col_offset=8), 'typeName', Store(), lineno=247, col_offset=8)], Name('name', Load(), lineno=247, col_offset=24), lineno=247, col_offset=8), If(Compare(Name('extra', Load(), lineno=248, col_offset=11), [Is()], [Name('None', Load(), lineno=248, col_offset=20)], lineno=248, col_offset=11), [Assign([Name('arg', Store(), lineno=250, col_offset=12)], BoolOp(Or(), [Name('arg', Load(), lineno=250, col_offset=18), Name('name', Load(), lineno=250, col_offset=25)], lineno=250, col_offset=18), lineno=250, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=251, col_offset=12), 'new', Store(), lineno=251, col_offset=12)], BinOp(Name('arg', Load(), lineno=251, col_offset=23), Add(), Str('_New', lineno=251, col_offset=29), lineno=251, col_offset=23), lineno=251, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=252, col_offset=12), 'convert', Store(), lineno=252, col_offset=12)], BinOp(Name('arg', Load(), lineno=252, col_offset=27), Add(), Str('_Convert', lineno=252, col_offset=33), lineno=252, col_offset=27), lineno=252, col_offset=12)], [Assign([Attribute(Name('self', Load(), lineno=255, col_offset=12), 'new', Store(), lineno=255, col_offset=12)], Name('arg', Load(), lineno=255, col_offset=23), lineno=255, col_offset=12), Assign([Attribute(Name('self', Load(), lineno=256, col_offset=12), 'convert', Store(), lineno=256, col_offset=12)], Name('extra', Load(), lineno=256, col_offset=27), lineno=256, col_offset=12)], lineno=248, col_offset=8)], [], lineno=246, col_offset=4), FunctionDef('getargsFormat', arguments([Name('self', Param(), lineno=258, col_offset=22)], None, None, []), [Return(Str('O&', lineno=259, col_offset=15), lineno=259, col_offset=8)], [], lineno=258, col_offset=4), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=261, col_offset=20), Name('name', Param(), lineno=261, col_offset=26)], None, None, []), [Return(BinOp(Str('%s, &%s', lineno=262, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=262, col_offset=28), 'convert', Load(), lineno=262, col_offset=28), Name('name', Load(), lineno=262, col_offset=42)], Load(), lineno=262, col_offset=28), lineno=262, col_offset=15), lineno=262, col_offset=8)], [], lineno=261, col_offset=4), FunctionDef('passInput', arguments([Name('self', Param(), lineno=264, col_offset=18), Name('name', Param(), lineno=264, col_offset=24)], None, None, []), [Return(BinOp(Str('&%s', lineno=265, col_offset=15), Mod(), Name('name', Load(), lineno=265, col_offset=23), lineno=265, col_offset=15), lineno=265, col_offset=8)], [], lineno=264, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=267, col_offset=22)], None, None, []), [Return(Str('O&', lineno=268, col_offset=15), lineno=268, col_offset=8)], [], lineno=267, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=270, col_offset=20), Name('name', Param(), lineno=270, col_offset=26)], None, None, []), [Return(BinOp(Str('%s, &%s', lineno=271, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=271, col_offset=28), 'new', Load(), lineno=271, col_offset=28), Name('name', Load(), lineno=271, col_offset=38)], Load(), lineno=271, col_offset=28), lineno=271, col_offset=15), lineno=271, col_offset=8)], [], lineno=270, col_offset=4)], [], lineno=236, col_offset=0), ClassDef('OpaqueByValueType', [Name('OpaqueType', Load(), lineno=274, col_offset=24)], [Expr(Str('A type represented by an opaque object type, on input passed BY VALUE.\n\n    Instantiate with the type name, and optionally an object type name whose\n    New/Convert functions will be used.\n    ', lineno=280, col_offset=-1), lineno=280, col_offset=-1), FunctionDef('passInput', arguments([Name('self', Param(), lineno=282, col_offset=18), Name('name', Param(), lineno=282, col_offset=24)], None, None, []), [Return(Name('name', Load(), lineno=283, col_offset=15), lineno=283, col_offset=8)], [], lineno=282, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=285, col_offset=20), Name('name', Param(), lineno=285, col_offset=26)], None, None, []), [Return(BinOp(Str('%s, %s', lineno=286, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=286, col_offset=27), 'new', Load(), lineno=286, col_offset=27), Name('name', Load(), lineno=286, col_offset=37)], Load(), lineno=286, col_offset=27), lineno=286, col_offset=15), lineno=286, col_offset=8)], [], lineno=285, col_offset=4)], [], lineno=274, col_offset=0), ClassDef('OpaqueByRefType', [Name('OpaqueType', Load(), lineno=288, col_offset=22)], [Expr(Str('An opaque object type, passed by reference.\n\n    Instantiate with the type name, and optionally an object type name whose\n    New/Convert functions will be used.\n    ', lineno=293, col_offset=-1), lineno=293, col_offset=-1), FunctionDef('passInput', arguments([Name('self', Param(), lineno=295, col_offset=18), Name('name', Param(), lineno=295, col_offset=24)], None, None, []), [Return(Name('name', Load(), lineno=296, col_offset=15), lineno=296, col_offset=8)], [], lineno=295, col_offset=4), FunctionDef('mkvalueFormat', arguments([Name('self', Param(), lineno=301, col_offset=22)], None, None, []), [Return(Str('O', lineno=302, col_offset=15), lineno=302, col_offset=8)], [], lineno=301, col_offset=4), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=304, col_offset=20), Name('name', Param(), lineno=304, col_offset=26)], None, None, []), [Return(BinOp(Str('%s(%s)', lineno=305, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=305, col_offset=27), 'new', Load(), lineno=305, col_offset=27), Name('name', Load(), lineno=305, col_offset=37)], Load(), lineno=305, col_offset=27), lineno=305, col_offset=15), lineno=305, col_offset=8)], [], lineno=304, col_offset=4)], [], lineno=288, col_offset=0), ClassDef('OpaqueByValueStructType', [Name('OpaqueByValueType', Load(), lineno=307, col_offset=30)], [Expr(Str('Similar to OpaqueByValueType, but we also pass this to mkvalue by\n    address, in stead of by value.\n    ', lineno=310, col_offset=-1), lineno=310, col_offset=-1), FunctionDef('mkvalueArgs', arguments([Name('self', Param(), lineno=312, col_offset=20), Name('name', Param(), lineno=312, col_offset=26)], None, None, []), [Return(BinOp(Str('%s, &%s', lineno=313, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=313, col_offset=28), 'new', Load(), lineno=313, col_offset=28), Name('name', Load(), lineno=313, col_offset=38)], Load(), lineno=313, col_offset=28), lineno=313, col_offset=15), lineno=313, col_offset=8)], [], lineno=312, col_offset=4)], [], lineno=307, col_offset=0), ClassDef('OpaqueArrayType', [Name('OpaqueByValueType', Load(), lineno=316, col_offset=22)], [Expr(Str('A type represented by an opaque object type, with ARRAY passing semantics.\n\n    Instantiate with the type name, and optional an object type name whose\n    New/Convert functions will be used.\n    ', lineno=322, col_offset=-1), lineno=322, col_offset=-1), FunctionDef('getargsArgs', arguments([Name('self', Param(), lineno=324, col_offset=20), Name('name', Param(), lineno=324, col_offset=26)], None, None, []), [Return(BinOp(Str('%s, %s', lineno=325, col_offset=15), Mod(), Tuple([Attribute(Name('self', Load(), lineno=325, col_offset=27), 'convert', Load(), lineno=325, col_offset=27), Name('name', Load(), lineno=325, col_offset=41)], Load(), lineno=325, col_offset=27), lineno=325, col_offset=15), lineno=325, col_offset=8)], [], lineno=324, col_offset=4), FunctionDef('passOutput', arguments([Name('self', Param(), lineno=327, col_offset=19), Name('name', Param(), lineno=327, col_offset=25)], None, None, []), [Return(Name('name', Load(), lineno=328, col_offset=15), lineno=328, col_offset=8)], [], lineno=327, col_offset=4)], [], lineno=316, col_offset=0)])
